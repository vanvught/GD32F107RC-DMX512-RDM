
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	08008525 	stmdaeq	r0, {r0, r2, r5, r8, sl, pc}
 8007008:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800700c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007010:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007014:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007018:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
	...
 800702c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007030:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800703c:	0801243d 	stmdaeq	r1, {r0, r2, r3, r4, r5, sl, sp}
 8007040:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007044:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007048:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800704c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007050:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007054:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007058:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800705c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007060:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007064:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007068:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800706c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007070:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007074:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007078:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800707c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007080:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007084:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007088:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800708c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007090:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007094:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007098:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800709c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070a0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070a4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070a8:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070ac:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070b0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070b4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070b8:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070bc:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070c0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070c4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070c8:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070cc:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070d0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070d4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070d8:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070dc:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070e0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070e4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070e8:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070ec:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070f0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 80070f4:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
	...
 8007100:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800710c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007110:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007114:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007118:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800711c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007120:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007124:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007128:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800712c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007130:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007134:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007138:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800713c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007140:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007144:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8007148:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 800714c:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}

Disassembly of section .text:

08007150 <net_init>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4616      	mov	r6, r2
 8007158:	9f06      	ldr	r7, [sp, #24]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <net_init+0x94>)
 800715c:	461d      	mov	r5, r3
 800715e:	1e43      	subs	r3, r0, #1
 8007160:	3005      	adds	r0, #5
 8007162:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007166:	4283      	cmp	r3, r0
 8007168:	f802 1b01 	strb.w	r1, [r2], #1
 800716c:	d1f9      	bne.n	8007162 <net_init+0x12>
 800716e:	4623      	mov	r3, r4
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <net_init+0x98>)
 8007172:	f104 010c 	add.w	r1, r4, #12
 8007176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800717a:	428b      	cmp	r3, r1
 800717c:	f802 0b01 	strb.w	r0, [r2], #1
 8007180:	d1f9      	bne.n	8007176 <net_init+0x26>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	4918      	ldr	r1, [pc, #96]	; (80071e8 <net_init+0x98>)
 8007188:	4816      	ldr	r0, [pc, #88]	; (80071e4 <net_init+0x94>)
 800718a:	f000 f9a7 	bl	80074dc <ip_init>
 800718e:	4815      	ldr	r0, [pc, #84]	; (80071e4 <net_init+0x94>)
 8007190:	f000 f83c 	bl	800720c <rfc3927_init>
 8007194:	f887 8000 	strb.w	r8, [r7]
 8007198:	782b      	ldrb	r3, [r5, #0]
 800719a:	b163      	cbz	r3, 80071b6 <net_init+0x66>
 800719c:	4632      	mov	r2, r6
 800719e:	4912      	ldr	r1, [pc, #72]	; (80071e8 <net_init+0x98>)
 80071a0:	4810      	ldr	r0, [pc, #64]	; (80071e4 <net_init+0x94>)
 80071a2:	f009 f9e1 	bl	8010568 <dhcp_client>
 80071a6:	4540      	cmp	r0, r8
 80071a8:	da05      	bge.n	80071b6 <net_init+0x66>
 80071aa:	480f      	ldr	r0, [pc, #60]	; (80071e8 <net_init+0x98>)
 80071ac:	f885 8000 	strb.w	r8, [r5]
 80071b0:	f007 fcfc 	bl	800ebac <rfc3927>
 80071b4:	7038      	strb	r0, [r7, #0]
 80071b6:	490c      	ldr	r1, [pc, #48]	; (80071e8 <net_init+0x98>)
 80071b8:	480a      	ldr	r0, [pc, #40]	; (80071e4 <net_init+0x94>)
 80071ba:	f000 f883 	bl	80072c4 <arp_init>
 80071be:	480a      	ldr	r0, [pc, #40]	; (80071e8 <net_init+0x98>)
 80071c0:	f009 fbf2 	bl	80109a8 <ip_set_ip>
 80071c4:	f000 f82e 	bl	8007224 <tcp_init>
 80071c8:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <net_init+0x98>)
 80071ca:	1e63      	subs	r3, r4, #1
 80071cc:	340b      	adds	r4, #11
 80071ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80071d2:	f803 1f01 	strb.w	r1, [r3, #1]!
 80071d6:	429c      	cmp	r4, r3
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x7e>
 80071da:	782a      	ldrb	r2, [r5, #0]
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <net_init+0x9c>)
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	200029cc 	andcs	r2, r0, ip, asr #19
 80071e8:	200029c0 	andcs	r2, r0, r0, asr #19
 80071ec:	200029d2 	ldrdcs	r2, [r0], -r2	; <UNPREDICTABLE>

080071f0 <net_shutdown>:
 80071f0:	b508      	push	{r3, lr}
 80071f2:	f000 f97e 	bl	80074f2 <ip_shutdown>
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <net_shutdown+0x18>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b11b      	cbz	r3, 8007204 <net_shutdown+0x14>
 80071fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007200:	f009 baba 	b.w	8010778 <dhcp_client_release>
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	200029d2 	ldrdcs	r2, [r0], -r2	; <UNPREDICTABLE>

0800720c <rfc3927_init>:
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <rfc3927_init+0x14>)
 800720e:	1d82      	adds	r2, r0, #6
 8007210:	4290      	cmp	r0, r2
 8007212:	d100      	bne.n	8007216 <rfc3927_init+0xa>
 8007214:	4770      	bx	lr
 8007216:	f810 1b01 	ldrb.w	r1, [r0], #1
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f7      	b.n	8007210 <rfc3927_init+0x4>
 8007220:	200029dc 	ldrdcs	r2, [r0], -ip

08007224 <tcp_init>:
 8007224:	2206      	movs	r2, #6
 8007226:	b513      	push	{r0, r1, r4, lr}
 8007228:	4c0b      	ldr	r4, [pc, #44]	; (8007258 <tcp_init+0x34>)
 800722a:	490c      	ldr	r1, [pc, #48]	; (800725c <tcp_init+0x38>)
 800722c:	18a0      	adds	r0, r4, r2
 800722e:	f007 fd17 	bl	800ec60 <memcpy.isra.0>
 8007232:	2308      	movs	r3, #8
 8007234:	2204      	movs	r2, #4
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <tcp_init+0x3c>)
 800723a:	eb0d 0102 	add.w	r1, sp, r2
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f104 001a 	add.w	r0, r4, #26
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	f007 fd0b 	bl	800ec60 <memcpy.isra.0>
 800724a:	2345      	movs	r3, #69	; 0x45
 800724c:	81e3      	strh	r3, [r4, #14]
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <tcp_init+0x40>)
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	b002      	add	sp, #8
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	200035a4 	andcs	r3, r0, r4, lsr #11
 800725c:	200029cc 	andcs	r2, r0, ip, asr #19
 8007260:	200029c0 	andcs	r2, r0, r0, asr #19
 8007264:	06400040 	strbeq	r0, [r0], -r0, asr #32

08007268 <udp_init>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2200      	movs	r2, #0
 800726c:	2408      	movs	r4, #8
 800726e:	460e      	mov	r6, r1
 8007270:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <udp_init+0x40>)
 8007272:	490e      	ldr	r1, [pc, #56]	; (80072ac <udp_init+0x44>)
 8007274:	3c01      	subs	r4, #1
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	805a      	strh	r2, [r3, #2]
 800727a:	f841 2b04 	str.w	r2, [r1], #4
 800727e:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8007282:	d1f7      	bne.n	8007274 <udp_init+0xc>
 8007284:	2206      	movs	r2, #6
 8007286:	4d0a      	ldr	r5, [pc, #40]	; (80072b0 <udp_init+0x48>)
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <udp_init+0x4c>)
 800728a:	4601      	mov	r1, r0
 800728c:	18a8      	adds	r0, r5, r2
 800728e:	801c      	strh	r4, [r3, #0]
 8007290:	f007 fe6a 	bl	800ef68 <memcpy.isra.0>
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <udp_init+0x50>)
 8007296:	4630      	mov	r0, r6
 8007298:	60eb      	str	r3, [r5, #12]
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <udp_init+0x54>)
 800729c:	616b      	str	r3, [r5, #20]
 800729e:	f007 fe8b 	bl	800efb8 <udp_set_ip>
 80072a2:	852c      	strh	r4, [r5, #40]	; 0x28
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	bf00      	nop
 80072a8:	20003bc0 	andcs	r3, r0, r0, asr #23
 80072ac:	20003ba0 	andcs	r3, r0, r0, lsr #23
 80072b0:	20009860 	andcs	r9, r0, r0, ror #16
 80072b4:	20003b9c 	mulcs	r0, ip, fp
 80072b8:	00450008 	subeq	r0, r5, r8
 80072bc:	11400040 	cmpne	r0, r0, asr #32

080072c0 <udp_shutdown>:
 80072c0:	4770      	bx	lr
	...

080072c4 <arp_init>:
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	f000 f876 	bl	80073bc <arp_cache_init>
 80072d0:	2206      	movs	r2, #6
 80072d2:	4621      	mov	r1, r4
 80072d4:	482e      	ldr	r0, [pc, #184]	; (8007390 <arp_init+0xcc>)
 80072d6:	682f      	ldr	r7, [r5, #0]
 80072d8:	f008 ffca 	bl	8010270 <memcpy.isra.0>
 80072dc:	4b2d      	ldr	r3, [pc, #180]	; (8007394 <arp_init+0xd0>)
 80072de:	2507      	movs	r5, #7
 80072e0:	461e      	mov	r6, r3
 80072e2:	22ff      	movs	r2, #255	; 0xff
 80072e4:	3d01      	subs	r5, #1
 80072e6:	d146      	bne.n	8007376 <arp_init+0xb2>
 80072e8:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <arp_init+0xd4>)
 80072ea:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800739c <arp_init+0xd8>
 80072ee:	2206      	movs	r2, #6
 80072f0:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80072f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f8:	4621      	mov	r1, r4
 80072fa:	4829      	ldr	r0, [pc, #164]	; (80073a0 <arp_init+0xdc>)
 80072fc:	82b3      	strh	r3, [r6, #20]
 80072fe:	f008 ffb7 	bl	8010270 <memcpy.isra.0>
 8007302:	2307      	movs	r3, #7
 8007304:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <arp_init+0xe0>)
 8007306:	61f7      	str	r7, [r6, #28]
 8007308:	3b01      	subs	r3, #1
 800730a:	d137      	bne.n	800737c <arp_init+0xb8>
 800730c:	2206      	movs	r2, #6
 800730e:	4621      	mov	r1, r4
 8007310:	4825      	ldr	r0, [pc, #148]	; (80073a8 <arp_init+0xe4>)
 8007312:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 8007316:	f008 ffab 	bl	8010270 <memcpy.isra.0>
 800731a:	4a24      	ldr	r2, [pc, #144]	; (80073ac <arp_init+0xe8>)
 800731c:	2306      	movs	r3, #6
 800731e:	4615      	mov	r5, r2
 8007320:	21ff      	movs	r1, #255	; 0xff
 8007322:	3b01      	subs	r3, #1
 8007324:	d22d      	bcs.n	8007382 <arp_init+0xbe>
 8007326:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <arp_init+0xd4>)
 8007328:	2206      	movs	r2, #6
 800732a:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800732e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007332:	4621      	mov	r1, r4
 8007334:	481e      	ldr	r0, [pc, #120]	; (80073b0 <arp_init+0xec>)
 8007336:	82ab      	strh	r3, [r5, #20]
 8007338:	f008 ff9a 	bl	8010270 <memcpy.isra.0>
 800733c:	2307      	movs	r3, #7
 800733e:	2100      	movs	r1, #0
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <arp_init+0xf0>)
 8007342:	61ef      	str	r7, [r5, #28]
 8007344:	3b01      	subs	r3, #1
 8007346:	d11f      	bne.n	8007388 <arp_init+0xc4>
 8007348:	2206      	movs	r2, #6
 800734a:	4d1b      	ldr	r5, [pc, #108]	; (80073b8 <arp_init+0xf4>)
 800734c:	4621      	mov	r1, r4
 800734e:	18a8      	adds	r0, r5, r2
 8007350:	f008 ff8e 	bl	8010270 <memcpy.isra.0>
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <arp_init+0xd4>)
 8007356:	4621      	mov	r1, r4
 8007358:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	f105 0016 	add.w	r0, r5, #22
 8007364:	2206      	movs	r2, #6
 8007366:	82ab      	strh	r3, [r5, #20]
 8007368:	f008 ff82 	bl	8010270 <memcpy.isra.0>
 800736c:	61ef      	str	r7, [r5, #28]
 800736e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007372:	f008 bf87 	b.w	8010284 <arp_announce>
 8007376:	f803 2b01 	strb.w	r2, [r3], #1
 800737a:	e7b3      	b.n	80072e4 <arp_init+0x20>
 800737c:	f802 5b01 	strb.w	r5, [r2], #1
 8007380:	e7c2      	b.n	8007308 <arp_init+0x44>
 8007382:	f802 1b01 	strb.w	r1, [r2], #1
 8007386:	e7cc      	b.n	8007322 <arp_init+0x5e>
 8007388:	f802 1b01 	strb.w	r1, [r2], #1
 800738c:	e7da      	b.n	8007344 <arp_init+0x80>
 800738e:	bf00      	nop
 8007390:	2000a2f6 	strdcs	sl, [r0], -r6
 8007394:	2000a2f0 	strdcs	sl, [r0], -r0
 8007398:	01000608 	tsteq	r0, r8, lsl #12
 800739c:	04060008 	streq	r0, [r6], #-8
 80073a0:	2000a306 	andcs	sl, r0, r6, lsl #6
 80073a4:	2000a310 	andcs	sl, r0, r0, lsl r3
 80073a8:	2000a34e 	andcs	sl, r0, lr, asr #6
 80073ac:	2000a348 	andcs	sl, r0, r8, asr #6
 80073b0:	2000a35e 	andcs	sl, r0, lr, asr r3
 80073b4:	2000a368 	andcs	sl, r0, r8, ror #6
 80073b8:	2000a31c 	andcs	sl, r0, ip, lsl r3

080073bc <arp_cache_init>:
 80073bc:	2300      	movs	r3, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <arp_cache_init+0x2c>)
 80073c2:	b510      	push	{r4, lr}
 80073c4:	8013      	strh	r3, [r2, #0]
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <arp_cache_init+0x30>)
 80073c8:	4611      	mov	r1, r2
 80073ca:	f842 0c04 	str.w	r0, [r2, #-4]
 80073ce:	1d94      	adds	r4, r2, #6
 80073d0:	42a1      	cmp	r1, r4
 80073d2:	d105      	bne.n	80073e0 <arp_cache_init+0x24>
 80073d4:	3303      	adds	r3, #3
 80073d6:	2b60      	cmp	r3, #96	; 0x60
 80073d8:	f102 020c 	add.w	r2, r2, #12
 80073dc:	d1f4      	bne.n	80073c8 <arp_cache_init+0xc>
 80073de:	bd10      	pop	{r4, pc}
 80073e0:	f801 0b01 	strb.w	r0, [r1], #1
 80073e4:	e7f4      	b.n	80073d0 <arp_cache_init+0x14>
 80073e6:	bf00      	nop
 80073e8:	2000a4f4 	strdcs	sl, [r0], -r4
 80073ec:	2000a378 	andcs	sl, r0, r8, ror r3

080073f0 <igmp_init>:
 80073f0:	2200      	movs	r2, #0
 80073f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4b23      	ldr	r3, [pc, #140]	; (800748c <igmp_init+0x9c>)
 80073fe:	f103 0408 	add.w	r4, r3, #8
 8007402:	42a3      	cmp	r3, r4
 8007404:	d13e      	bne.n	8007484 <igmp_init+0x94>
 8007406:	3201      	adds	r2, #1
 8007408:	2a24      	cmp	r2, #36	; 0x24
 800740a:	d1f8      	bne.n	80073fe <igmp_init+0xe>
 800740c:	2600      	movs	r6, #0
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <igmp_init+0xa0>)
 8007410:	4c20      	ldr	r4, [pc, #128]	; (8007494 <igmp_init+0xa4>)
 8007412:	601e      	str	r6, [r3, #0]
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <igmp_init+0xa8>)
 8007416:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800741a:	801e      	strh	r6, [r3, #0]
 800741c:	f009 fa24 	bl	8010868 <igmp_set_ip>
 8007420:	2201      	movs	r2, #1
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <igmp_init+0xac>)
 8007424:	4629      	mov	r1, r5
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	225e      	movs	r2, #94	; 0x5e
 800742a:	709a      	strb	r2, [r3, #2]
 800742c:	2206      	movs	r2, #6
 800742e:	18a0      	adds	r0, r4, r2
 8007430:	f009 f9d0 	bl	80107d4 <memcpy.isra.0>
 8007434:	f240 4394 	movw	r3, #1172	; 0x494
 8007438:	8463      	strh	r3, [r4, #34]	; 0x22
 800743a:	2316      	movs	r3, #22
 800743c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074a0 <igmp_init+0xb0>
 8007440:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074a4 <igmp_init+0xb4>
 8007444:	84e3      	strh	r3, [r4, #38]	; 0x26
 8007446:	f8c4 9014 	str.w	r9, [r4, #20]
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <igmp_init+0xb8>)
 800744c:	f8c4 800c 	str.w	r8, [r4, #12]
 8007450:	8227      	strh	r7, [r4, #16]
 8007452:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007454:	4c15      	ldr	r4, [pc, #84]	; (80074ac <igmp_init+0xbc>)
 8007456:	2206      	movs	r2, #6
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745e:	18a0      	adds	r0, r4, r2
 8007460:	80a3      	strh	r3, [r4, #4]
 8007462:	4629      	mov	r1, r5
 8007464:	f009 f9b6 	bl	80107d4 <memcpy.isra.0>
 8007468:	23e0      	movs	r3, #224	; 0xe0
 800746a:	83e3      	strh	r3, [r4, #30]
 800746c:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <igmp_init+0xc0>)
 8007472:	f8c4 9014 	str.w	r9, [r4, #20]
 8007476:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800747a:	f8c4 800c 	str.w	r8, [r4, #12]
 800747e:	8227      	strh	r7, [r4, #16]
 8007480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007484:	f803 1b01 	strb.w	r1, [r3], #1
 8007488:	e7bb      	b.n	8007402 <igmp_init+0x12>
 800748a:	bf00      	nop
 800748c:	2000a72c 	andcs	sl, r0, ip, lsr #14
 8007490:	2000a850 	andcs	sl, r0, r0, asr r8
 8007494:	2000a88c 	andcs	sl, r0, ip, lsl #17
 8007498:	2000a84c 	andcs	sl, r0, ip, asr #16
 800749c:	2000a884 	andcs	sl, r0, r4, lsl #17
 80074a0:	02010040 	andeq	r0, r1, #64	; 0x40
 80074a4:	00460008 	subeq	r0, r6, r8
 80074a8:	005e0001 	subseq	r0, lr, r1
 80074ac:	2000a854 	andcs	sl, r0, r4, asr r8
 80074b0:	04940200 	ldreq	r0, [r4], #512	; 0x200

080074b4 <igmp_shutdown>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	2500      	movs	r5, #0
 80074b8:	462e      	mov	r6, r5
 80074ba:	4c07      	ldr	r4, [pc, #28]	; (80074d8 <igmp_shutdown+0x24>)
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	b120      	cbz	r0, 80074ca <igmp_shutdown+0x16>
 80074c0:	f009 fa2e 	bl	8010920 <igmp_leave>
 80074c4:	6026      	str	r6, [r4, #0]
 80074c6:	7166      	strb	r6, [r4, #5]
 80074c8:	7126      	strb	r6, [r4, #4]
 80074ca:	3501      	adds	r5, #1
 80074cc:	2d24      	cmp	r5, #36	; 0x24
 80074ce:	f104 0408 	add.w	r4, r4, #8
 80074d2:	d1f3      	bne.n	80074bc <igmp_shutdown+0x8>
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	bf00      	nop
 80074d8:	2000a72c 	andcs	sl, r0, ip, lsr #14

080074dc <ip_init>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	460d      	mov	r5, r1
 80074e2:	f7ff fec1 	bl	8007268 <udp_init>
 80074e6:	4629      	mov	r1, r5
 80074e8:	4620      	mov	r0, r4
 80074ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ee:	f7ff bf7f 	b.w	80073f0 <igmp_init>

080074f2 <ip_shutdown>:
 80074f2:	b508      	push	{r3, lr}
 80074f4:	f7ff ffde 	bl	80074b4 <igmp_shutdown>
 80074f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074fc:	f7ff bee0 	b.w	80072c0 <udp_shutdown>

08007500 <console_init>:
 8007500:	b508      	push	{r3, lr}
 8007502:	f00a ff3d 	bl	8012380 <uart0_init>
 8007506:	4804      	ldr	r0, [pc, #16]	; (8007518 <console_init+0x18>)
 8007508:	f00a ff6a 	bl	80123e0 <uart0_puts>
 800750c:	4803      	ldr	r0, [pc, #12]	; (800751c <console_init+0x1c>)
 800750e:	f00a ff67 	bl	80123e0 <uart0_puts>
 8007512:	2000      	movs	r0, #0
 8007514:	bd08      	pop	{r3, pc}
 8007516:	bf00      	nop
 8007518:	0801431e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, lr}
 800751c:	08016338 	stmdaeq	r1, {r3, r4, r5, r8, r9, sp, lr}

08007520 <net_handle>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4c0c      	ldr	r4, [pc, #48]	; (8007554 <net_handle+0x34>)
 8007524:	4620      	mov	r0, r4
 8007526:	f00b fccf 	bl	8012ec8 <emac_eth_recv>
 800752a:	2800      	cmp	r0, #0
 800752c:	dd07      	ble.n	800753e <net_handle+0x1e>
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	8983      	ldrh	r3, [r0, #12]
 8007532:	2b08      	cmp	r3, #8
 8007534:	d107      	bne.n	8007546 <net_handle+0x26>
 8007536:	f000 fa6f 	bl	8007a18 <ip_handle>
 800753a:	f00b fcd9 	bl	8012ef0 <emac_free_pkt>
 800753e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007542:	f007 bb23 	b.w	800eb8c <net_timers_run>
 8007546:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800754a:	d1f6      	bne.n	800753a <net_handle+0x1a>
 800754c:	f000 fa08 	bl	8007960 <arp_handle>
 8007550:	e7f3      	b.n	800753a <net_handle+0x1a>
 8007552:	bf00      	nop
 8007554:	200029d4 	ldrdcs	r2, [r0], -r4

08007558 <tcp_handle>:
 8007558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	4605      	mov	r5, r0
 800755e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007560:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 8007564:	ba5b      	rev16	r3, r3
 8007566:	8443      	strh	r3, [r0, #34]	; 0x22
 8007568:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800756a:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 800756e:	ba5b      	rev16	r3, r3
 8007570:	8483      	strh	r3, [r0, #36]	; 0x24
 8007572:	f007 fb7f 	bl	800ec74 <_bswap32>
 8007576:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8007578:	4ca5      	ldr	r4, [pc, #660]	; (8007810 <tcp_handle+0x2b8>)
 800757a:	ba5b      	rev16	r3, r3
 800757c:	862b      	strh	r3, [r5, #48]	; 0x30
 800757e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8007580:	8822      	ldrh	r2, [r4, #0]
 8007582:	ba5b      	rev16	r3, r3
 8007584:	86ab      	strh	r3, [r5, #52]	; 0x34
 8007586:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8007588:	429a      	cmp	r2, r3
 800758a:	d14d      	bne.n	8007628 <tcp_handle+0xd0>
 800758c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007590:	2b01      	cmp	r3, #1
 8007592:	d00d      	beq.n	80075b0 <tcp_handle+0x58>
 8007594:	2204      	movs	r2, #4
 8007596:	4668      	mov	r0, sp
 8007598:	f105 011a 	add.w	r1, r5, #26
 800759c:	f007 fb60 	bl	800ec60 <memcpy.isra.0>
 80075a0:	8862      	ldrh	r2, [r4, #2]
 80075a2:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d13f      	bne.n	8007628 <tcp_handle+0xd0>
 80075a8:	6862      	ldr	r2, [r4, #4]
 80075aa:	9b00      	ldr	r3, [sp, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d13b      	bne.n	8007628 <tcp_handle+0xd0>
 80075b0:	2204      	movs	r2, #4
 80075b2:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 80075b6:	eb0d 0002 	add.w	r0, sp, r2
 80075ba:	f007 fb51 	bl	800ec60 <memcpy.isra.0>
 80075be:	2204      	movs	r2, #4
 80075c0:	f105 0126 	add.w	r1, r5, #38	; 0x26
 80075c4:	eb0d 0002 	add.w	r0, sp, r2
 80075c8:	9e01      	ldr	r6, [sp, #4]
 80075ca:	f007 fb49 	bl	800ec60 <memcpy.isra.0>
 80075ce:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80075d2:	9f01      	ldr	r7, [sp, #4]
 80075d4:	2a01      	cmp	r2, #1
 80075d6:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 80075da:	d01b      	beq.n	8007614 <tcp_handle+0xbc>
 80075dc:	1ed3      	subs	r3, r2, #3
 80075de:	2b07      	cmp	r3, #7
 80075e0:	d822      	bhi.n	8007628 <tcp_handle+0xd0>
 80075e2:	fa98 f198 	rev16.w	r1, r8
 80075e6:	f64f 78ec 	movw	r8, #65516	; 0xffec
 80075ea:	ea4f 1319 	mov.w	r3, r9, lsr #4
 80075ee:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 80075f2:	4488      	add	r8, r1
 80075f4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80075f6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 80075fa:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80075fe:	fa1f f888 	uxth.w	r8, r8
 8007602:	2900      	cmp	r1, #0
 8007604:	d142      	bne.n	800768c <tcp_handle+0x134>
 8007606:	f1b8 0f00 	cmp.w	r8, #0
 800760a:	d16b      	bne.n	80076e4 <tcp_handle+0x18c>
 800760c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760e:	42bb      	cmp	r3, r7
 8007610:	d168      	bne.n	80076e4 <tcp_handle+0x18c>
 8007612:	e048      	b.n	80076a6 <tcp_handle+0x14e>
 8007614:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007618:	075a      	lsls	r2, r3, #29
 800761a:	d405      	bmi.n	8007628 <tcp_handle+0xd0>
 800761c:	06d8      	lsls	r0, r3, #27
 800761e:	d506      	bpl.n	800762e <tcp_handle+0xd6>
 8007620:	4628      	mov	r0, r5
 8007622:	497b      	ldr	r1, [pc, #492]	; (8007810 <tcp_handle+0x2b8>)
 8007624:	f007 fbf2 	bl	800ee0c <_send_reset>
 8007628:	b004      	add	sp, #16
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	0799      	lsls	r1, r3, #30
 8007630:	d5fa      	bpl.n	8007628 <tcp_handle+0xd0>
 8007632:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8007636:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800763a:	4668      	mov	r0, sp
 800763c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007640:	f105 011a 	add.w	r1, r5, #26
 8007644:	2204      	movs	r2, #4
 8007646:	8063      	strh	r3, [r4, #2]
 8007648:	f007 fb0a 	bl	800ec60 <memcpy.isra.0>
 800764c:	2206      	movs	r2, #6
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	18a9      	adds	r1, r5, r2
 8007652:	4870      	ldr	r0, [pc, #448]	; (8007814 <tcp_handle+0x2bc>)
 8007654:	6063      	str	r3, [r4, #4]
 8007656:	f007 fb03 	bl	800ec60 <memcpy.isra.0>
 800765a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800765c:	1c7b      	adds	r3, r7, #1
 800765e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007662:	6363      	str	r3, [r4, #52]	; 0x34
 8007664:	2312      	movs	r3, #18
 8007666:	486a      	ldr	r0, [pc, #424]	; (8007810 <tcp_handle+0x2b8>)
 8007668:	a901      	add	r1, sp, #4
 800766a:	f88d 300c 	strb.w	r3, [sp, #12]
 800766e:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007672:	63e7      	str	r7, [r4, #60]	; 0x3c
 8007674:	f8c4 a018 	str.w	sl, [r4, #24]
 8007678:	f007 fb22 	bl	800ecc0 <_tcp_send_package>
 800767c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8007684:	2303      	movs	r3, #3
 8007686:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800768a:	e7cd      	b.n	8007628 <tcp_handle+0xd0>
 800768c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800768e:	eba3 0c07 	sub.w	ip, r3, r7
 8007692:	f1b8 0f00 	cmp.w	r8, #0
 8007696:	d10d      	bne.n	80076b4 <tcp_handle+0x15c>
 8007698:	f1bc 0f00 	cmp.w	ip, #0
 800769c:	dc22      	bgt.n	80076e4 <tcp_handle+0x18c>
 800769e:	1afb      	subs	r3, r7, r3
 80076a0:	1a5b      	subs	r3, r3, r1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da1e      	bge.n	80076e4 <tcp_handle+0x18c>
 80076a6:	0743      	lsls	r3, r0, #29
 80076a8:	d530      	bpl.n	800770c <tcp_handle+0x1b4>
 80076aa:	8821      	ldrh	r1, [r4, #0]
 80076ac:	4858      	ldr	r0, [pc, #352]	; (8007810 <tcp_handle+0x2b8>)
 80076ae:	f007 fabd 	bl	800ec2c <_init_tcb>
 80076b2:	e7b9      	b.n	8007628 <tcp_handle+0xd0>
 80076b4:	f1bc 0f00 	cmp.w	ip, #0
 80076b8:	dc06      	bgt.n	80076c8 <tcp_handle+0x170>
 80076ba:	eba7 0c03 	sub.w	ip, r7, r3
 80076be:	ebac 0c01 	sub.w	ip, ip, r1
 80076c2:	f1bc 0f00 	cmp.w	ip, #0
 80076c6:	dbee      	blt.n	80076a6 <tcp_handle+0x14e>
 80076c8:	eb08 0c07 	add.w	ip, r8, r7
 80076cc:	f103 0e01 	add.w	lr, r3, #1
 80076d0:	ebae 0e0c 	sub.w	lr, lr, ip
 80076d4:	f1be 0f00 	cmp.w	lr, #0
 80076d8:	dc04      	bgt.n	80076e4 <tcp_handle+0x18c>
 80076da:	43db      	mvns	r3, r3
 80076dc:	1a5b      	subs	r3, r3, r1
 80076de:	eb13 0f0c 	cmn.w	r3, ip
 80076e2:	d4e0      	bmi.n	80076a6 <tcp_handle+0x14e>
 80076e4:	0742      	lsls	r2, r0, #29
 80076e6:	d505      	bpl.n	80076f4 <tcp_handle+0x19c>
 80076e8:	8821      	ldrh	r1, [r4, #0]
 80076ea:	4849      	ldr	r0, [pc, #292]	; (8007810 <tcp_handle+0x2b8>)
 80076ec:	f007 fa9e 	bl	800ec2c <_init_tcb>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e7c8      	b.n	8007686 <tcp_handle+0x12e>
 80076f4:	6963      	ldr	r3, [r4, #20]
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	2310      	movs	r3, #16
 80076fe:	4844      	ldr	r0, [pc, #272]	; (8007810 <tcp_handle+0x2b8>)
 8007700:	a901      	add	r1, sp, #4
 8007702:	f88d 300c 	strb.w	r3, [sp, #12]
 8007706:	f007 fadb 	bl	800ecc0 <_tcp_send_package>
 800770a:	e78d      	b.n	8007628 <tcp_handle+0xd0>
 800770c:	0781      	lsls	r1, r0, #30
 800770e:	d505      	bpl.n	800771c <tcp_handle+0x1c4>
 8007710:	2a03      	cmp	r2, #3
 8007712:	d0ed      	beq.n	80076f0 <tcp_handle+0x198>
 8007714:	4628      	mov	r0, r5
 8007716:	493e      	ldr	r1, [pc, #248]	; (8007810 <tcp_handle+0x2b8>)
 8007718:	f007 fb78 	bl	800ee0c <_send_reset>
 800771c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007720:	06da      	lsls	r2, r3, #27
 8007722:	d581      	bpl.n	8007628 <tcp_handle+0xd0>
 8007724:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007728:	3b03      	subs	r3, #3
 800772a:	2b07      	cmp	r3, #7
 800772c:	d818      	bhi.n	8007760 <tcp_handle+0x208>
 800772e:	e8df f003 	tbb	[pc, r3]
 8007732:	75757504 	ldrbvc	r7, [r5, #-1284]!	; 0xfffffafc
 8007736:	a59c7575 	ldrge	r7, [ip, #1397]	; 0x575
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	1b9b      	subs	r3, r3, r6
 800773e:	2b00      	cmp	r3, #0
 8007740:	dc0a      	bgt.n	8007758 <tcp_handle+0x200>
 8007742:	6963      	ldr	r3, [r4, #20]
 8007744:	1af3      	subs	r3, r6, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	dc06      	bgt.n	8007758 <tcp_handle+0x200>
 800774a:	2304      	movs	r3, #4
 800774c:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007750:	f8c4 a018 	str.w	sl, [r4, #24]
 8007754:	6126      	str	r6, [r4, #16]
 8007756:	e796      	b.n	8007686 <tcp_handle+0x12e>
 8007758:	4628      	mov	r0, r5
 800775a:	492d      	ldr	r1, [pc, #180]	; (8007810 <tcp_handle+0x2b8>)
 800775c:	f007 fb56 	bl	800ee0c <_send_reset>
 8007760:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007764:	3b04      	subs	r3, #4
 8007766:	2b02      	cmp	r3, #2
 8007768:	d830      	bhi.n	80077cc <tcp_handle+0x274>
 800776a:	f1b8 0f00 	cmp.w	r8, #0
 800776e:	d02d      	beq.n	80077cc <tcp_handle+0x274>
 8007770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007772:	42bb      	cmp	r3, r7
 8007774:	f040 8091 	bne.w	800789a <tcp_handle+0x342>
 8007778:	f240 53b6 	movw	r3, #1462	; 0x5b6
 800777c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007818 <tcp_handle+0x2c0>
 8007780:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8007784:	f8ba 7000 	ldrh.w	r7, [sl]
 8007788:	4642      	mov	r2, r8
 800778a:	435f      	muls	r7, r3
 800778c:	1d38      	adds	r0, r7, #4
 800778e:	4449      	add	r1, r9
 8007790:	4450      	add	r0, sl
 8007792:	f007 fa65 	bl	800ec60 <memcpy.isra.0>
 8007796:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8007798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800779a:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800779e:	8722      	strh	r2, [r4, #56]	; 0x38
 80077a0:	6962      	ldr	r2, [r4, #20]
 80077a2:	4443      	add	r3, r8
 80077a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077a8:	6363      	str	r3, [r4, #52]	; 0x34
 80077aa:	2310      	movs	r3, #16
 80077ac:	4457      	add	r7, sl
 80077ae:	4818      	ldr	r0, [pc, #96]	; (8007810 <tcp_handle+0x2b8>)
 80077b0:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 80077b4:	a901      	add	r1, sp, #4
 80077b6:	f88d 300c 	strb.w	r3, [sp, #12]
 80077ba:	f007 fa81 	bl	800ecc0 <_tcp_send_package>
 80077be:	f8ba 3000 	ldrh.w	r3, [sl]
 80077c2:	3301      	adds	r3, #1
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	f8aa 3000 	strh.w	r3, [sl]
 80077cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	f67f af29 	bls.w	8007628 <tcp_handle+0xd0>
 80077d6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80077da:	07db      	lsls	r3, r3, #31
 80077dc:	f57f af24 	bpl.w	8007628 <tcp_handle+0xd0>
 80077e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077e2:	6962      	ldr	r2, [r4, #20]
 80077e4:	3301      	adds	r3, #1
 80077e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077ea:	6363      	str	r3, [r4, #52]	; 0x34
 80077ec:	2310      	movs	r3, #16
 80077ee:	4808      	ldr	r0, [pc, #32]	; (8007810 <tcp_handle+0x2b8>)
 80077f0:	a901      	add	r1, sp, #4
 80077f2:	f88d 300c 	strb.w	r3, [sp, #12]
 80077f6:	f007 fa63 	bl	800ecc0 <_tcp_send_package>
 80077fa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d053      	beq.n	80078aa <tcp_handle+0x352>
 8007802:	d84d      	bhi.n	80078a0 <tcp_handle+0x348>
 8007804:	3b03      	subs	r3, #3
 8007806:	2b01      	cmp	r3, #1
 8007808:	f63f af0e 	bhi.w	8007628 <tcp_handle+0xd0>
 800780c:	2307      	movs	r3, #7
 800780e:	e73a      	b.n	8007686 <tcp_handle+0x12e>
 8007810:	20003560 	andcs	r3, r0, r0, ror #10
 8007814:	20003568 	andcs	r3, r0, r8, ror #10
 8007818:	200029f0 	strdcs	r2, [r0], -r0
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	1b99      	subs	r1, r3, r6
 8007820:	d513      	bpl.n	800784a <tcp_handle+0x2f2>
 8007822:	6962      	ldr	r2, [r4, #20]
 8007824:	1ab2      	subs	r2, r6, r2
 8007826:	2a00      	cmp	r2, #0
 8007828:	dc0f      	bgt.n	800784a <tcp_handle+0x2f2>
 800782a:	6126      	str	r6, [r4, #16]
 800782c:	6a23      	ldr	r3, [r4, #32]
 800782e:	1bda      	subs	r2, r3, r7
 8007830:	2a00      	cmp	r2, #0
 8007832:	db05      	blt.n	8007840 <tcp_handle+0x2e8>
 8007834:	42bb      	cmp	r3, r7
 8007836:	d193      	bne.n	8007760 <tcp_handle+0x208>
 8007838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800783a:	1b9b      	subs	r3, r3, r6
 800783c:	2b00      	cmp	r3, #0
 800783e:	dc8f      	bgt.n	8007760 <tcp_handle+0x208>
 8007840:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007844:	f8c4 a018 	str.w	sl, [r4, #24]
 8007848:	e78a      	b.n	8007760 <tcp_handle+0x208>
 800784a:	1af3      	subs	r3, r6, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	dc06      	bgt.n	800785e <tcp_handle+0x306>
 8007850:	2900      	cmp	r1, #0
 8007852:	dc85      	bgt.n	8007760 <tcp_handle+0x208>
 8007854:	6963      	ldr	r3, [r4, #20]
 8007856:	1af3      	subs	r3, r6, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc81      	bgt.n	8007760 <tcp_handle+0x208>
 800785c:	e7e6      	b.n	800782c <tcp_handle+0x2d4>
 800785e:	6963      	ldr	r3, [r4, #20]
 8007860:	1b9a      	subs	r2, r3, r6
 8007862:	2a00      	cmp	r2, #0
 8007864:	f6bf af7c 	bge.w	8007760 <tcp_handle+0x208>
 8007868:	e745      	b.n	80076f6 <tcp_handle+0x19e>
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	42b3      	cmp	r3, r6
 800786e:	f47f af77 	bne.w	8007760 <tcp_handle+0x208>
 8007872:	8821      	ldrh	r1, [r4, #0]
 8007874:	480f      	ldr	r0, [pc, #60]	; (80078b4 <tcp_handle+0x35c>)
 8007876:	f007 f9d9 	bl	800ec2c <_init_tcb>
 800787a:	e771      	b.n	8007760 <tcp_handle+0x208>
 800787c:	6963      	ldr	r3, [r4, #20]
 800787e:	42b3      	cmp	r3, r6
 8007880:	f47f af6e 	bne.w	8007760 <tcp_handle+0x208>
 8007884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007886:	480b      	ldr	r0, [pc, #44]	; (80078b4 <tcp_handle+0x35c>)
 8007888:	9302      	str	r3, [sp, #8]
 800788a:	2310      	movs	r3, #16
 800788c:	a901      	add	r1, sp, #4
 800788e:	9601      	str	r6, [sp, #4]
 8007890:	f88d 300c 	strb.w	r3, [sp, #12]
 8007894:	f007 fa14 	bl	800ecc0 <_tcp_send_package>
 8007898:	e762      	b.n	8007760 <tcp_handle+0x208>
 800789a:	6962      	ldr	r2, [r4, #20]
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	e72c      	b.n	80076fa <tcp_handle+0x1a2>
 80078a0:	2b06      	cmp	r3, #6
 80078a2:	f47f aec1 	bne.w	8007628 <tcp_handle+0xd0>
 80078a6:	230a      	movs	r3, #10
 80078a8:	e6ed      	b.n	8007686 <tcp_handle+0x12e>
 80078aa:	6963      	ldr	r3, [r4, #20]
 80078ac:	42b3      	cmp	r3, r6
 80078ae:	d0fa      	beq.n	80078a6 <tcp_handle+0x34e>
 80078b0:	2308      	movs	r3, #8
 80078b2:	e6e8      	b.n	8007686 <tcp_handle+0x12e>
 80078b4:	20003560 	andcs	r3, r0, r0, ror #10

080078b8 <udp_handle>:
 80078b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078bc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80078be:	4607      	mov	r7, r0
 80078c0:	ba5b      	rev16	r3, r3
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 80078c8:	2a01      	cmp	r2, #1
 80078ca:	d904      	bls.n	80078d6 <udp_handle+0x1e>
 80078cc:	2b7b      	cmp	r3, #123	; 0x7b
 80078ce:	d002      	beq.n	80078d6 <udp_handle+0x1e>
 80078d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d4:	d308      	bcc.n	80078e8 <udp_handle+0x30>
 80078d6:	2400      	movs	r4, #0
 80078d8:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <udp_handle+0xa0>)
 80078da:	f852 1b04 	ldr.w	r1, [r2], #4
 80078de:	4299      	cmp	r1, r3
 80078e0:	d005      	beq.n	80078ee <udp_handle+0x36>
 80078e2:	3401      	adds	r4, #1
 80078e4:	2c08      	cmp	r4, #8
 80078e6:	d1f8      	bne.n	80078da <udp_handle+0x22>
 80078e8:	b002      	add	sp, #8
 80078ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ee:	f640 3394 	movw	r3, #2964	; 0xb94
 80078f2:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 80078f4:	435c      	muls	r4, r3
 80078f6:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80078fa:	ba76      	rev16	r6, r6
 80078fc:	3e08      	subs	r6, #8
 80078fe:	b2b6      	uxth	r6, r6
 8007900:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8007904:	bf28      	it	cs
 8007906:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 800790a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800795c <udp_handle+0xa4>
 800790e:	1d20      	adds	r0, r4, #4
 8007910:	f838 5004 	ldrh.w	r5, [r8, r4]
 8007914:	4632      	mov	r2, r6
 8007916:	435d      	muls	r5, r3
 8007918:	4428      	add	r0, r5
 800791a:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800791e:	4440      	add	r0, r8
 8007920:	f007 fb22 	bl	800ef68 <memcpy.isra.0>
 8007924:	2204      	movs	r2, #4
 8007926:	f107 011a 	add.w	r1, r7, #26
 800792a:	eb0d 0002 	add.w	r0, sp, r2
 800792e:	f007 fb1b 	bl	800ef68 <memcpy.isra.0>
 8007932:	9a01      	ldr	r2, [sp, #4]
 8007934:	192b      	adds	r3, r5, r4
 8007936:	4443      	add	r3, r8
 8007938:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 800793c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800793e:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 8007942:	ba52      	rev16	r2, r2
 8007944:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8007948:	f838 3004 	ldrh.w	r3, [r8, r4]
 800794c:	3301      	adds	r3, #1
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	f828 3004 	strh.w	r3, [r8, r4]
 8007956:	e7c7      	b.n	80078e8 <udp_handle+0x30>
 8007958:	20003ba0 	andcs	r3, r0, r0, lsr #23
 800795c:	20003bc0 	andcs	r3, r0, r0, asr #23

08007960 <arp_handle>:
 8007960:	8a83      	ldrh	r3, [r0, #20]
 8007962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007966:	d003      	beq.n	8007970 <arp_handle+0x10>
 8007968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796c:	d002      	beq.n	8007974 <arp_handle+0x14>
 800796e:	4770      	bx	lr
 8007970:	f008 bc92 	b.w	8010298 <arp_handle_request>
 8007974:	f008 bcb8 	b.w	80102e8 <arp_handle_reply>

08007978 <igmp_handle>:
 8007978:	7b83      	ldrb	r3, [r0, #14]
 800797a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800797e:	2b45      	cmp	r3, #69	; 0x45
 8007980:	d116      	bne.n	80079b0 <igmp_handle+0x38>
 8007982:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007986:	2b11      	cmp	r3, #17
 8007988:	d112      	bne.n	80079b0 <igmp_handle+0x38>
 800798a:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <igmp_handle+0x94>)
 800798c:	f100 051e 	add.w	r5, r0, #30
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	466a      	mov	r2, sp
 8007994:	462b      	mov	r3, r5
 8007996:	f100 0622 	add.w	r6, r0, #34	; 0x22
 800799a:	42b3      	cmp	r3, r6
 800799c:	d10b      	bne.n	80079b6 <igmp_handle+0x3e>
 800799e:	2401      	movs	r4, #1
 80079a0:	2100      	movs	r1, #0
 80079a2:	f04f 0c01 	mov.w	ip, #1
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <igmp_handle+0x98>)
 80079a8:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <igmp_handle+0x9c>)
 80079aa:	681f      	ldr	r7, [r3, #0]
 80079ac:	428f      	cmp	r7, r1
 80079ae:	d10a      	bne.n	80079c6 <igmp_handle+0x4e>
 80079b0:	b003      	add	sp, #12
 80079b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079b6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80079ba:	f812 1b01 	ldrb.w	r1, [r2], #1
 80079be:	428c      	cmp	r4, r1
 80079c0:	d0eb      	beq.n	800799a <igmp_handle+0x22>
 80079c2:	2400      	movs	r4, #0
 80079c4:	e7ec      	b.n	80079a0 <igmp_handle+0x28>
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	b924      	cbnz	r4, 80079d6 <igmp_handle+0x5e>
 80079cc:	462b      	mov	r3, r5
 80079ce:	f10d 0e04 	add.w	lr, sp, #4
 80079d2:	42b3      	cmp	r3, r6
 80079d4:	d10e      	bne.n	80079f4 <igmp_handle+0x7c>
 80079d6:	f892 e005 	ldrb.w	lr, [r2, #5]
 80079da:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80079de:	f1be 0f01 	cmp.w	lr, #1
 80079e2:	d110      	bne.n	8007a06 <igmp_handle+0x8e>
 80079e4:	f892 e004 	ldrb.w	lr, [r2, #4]
 80079e8:	459e      	cmp	lr, r3
 80079ea:	d909      	bls.n	8007a00 <igmp_handle+0x88>
 80079ec:	085b      	lsrs	r3, r3, #1
 80079ee:	3301      	adds	r3, #1
 80079f0:	7113      	strb	r3, [r2, #4]
 80079f2:	e005      	b.n	8007a00 <igmp_handle+0x88>
 80079f4:	f813 9b01 	ldrb.w	r9, [r3], #1
 80079f8:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80079fc:	45c1      	cmp	r9, r8
 80079fe:	d0e8      	beq.n	80079d2 <igmp_handle+0x5a>
 8007a00:	3101      	adds	r1, #1
 8007a02:	3208      	adds	r2, #8
 8007a04:	e7d2      	b.n	80079ac <igmp_handle+0x34>
 8007a06:	f882 c005 	strb.w	ip, [r2, #5]
 8007a0a:	e7ef      	b.n	80079ec <igmp_handle+0x74>
 8007a0c:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a10:	2000a850 	andcs	sl, r0, r0, asr r8
 8007a14:	2000a72c 	andcs	sl, r0, ip, lsr #14

08007a18 <ip_handle>:
 8007a18:	7b82      	ldrb	r2, [r0, #14]
 8007a1a:	7dc3      	ldrb	r3, [r0, #23]
 8007a1c:	2a45      	cmp	r2, #69	; 0x45
 8007a1e:	d003      	beq.n	8007a28 <ip_handle+0x10>
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d111      	bne.n	8007a48 <ip_handle+0x30>
 8007a24:	f7ff bfa8 	b.w	8007978 <igmp_handle>
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	d00b      	beq.n	8007a44 <ip_handle+0x2c>
 8007a2c:	d804      	bhi.n	8007a38 <ip_handle+0x20>
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d006      	beq.n	8007a40 <ip_handle+0x28>
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d0f6      	beq.n	8007a24 <ip_handle+0xc>
 8007a36:	4770      	bx	lr
 8007a38:	2b11      	cmp	r3, #17
 8007a3a:	d105      	bne.n	8007a48 <ip_handle+0x30>
 8007a3c:	f7ff bf3c 	b.w	80078b8 <udp_handle>
 8007a40:	f000 b804 	b.w	8007a4c <icmp_handle>
 8007a44:	f7ff bd88 	b.w	8007558 <tcp_handle>
 8007a48:	4770      	bx	lr
	...

08007a4c <icmp_handle>:
 8007a4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a4e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007a52:	4604      	mov	r4, r0
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d13e      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a58:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	d13a      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a60:	1d86      	adds	r6, r0, #6
 8007a62:	4631      	mov	r1, r6
 8007a64:	2206      	movs	r2, #6
 8007a66:	f008 ffc1 	bl	80109ec <memcpy.isra.0>
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	2206      	movs	r2, #6
 8007a6e:	491b      	ldr	r1, [pc, #108]	; (8007adc <icmp_handle+0x90>)
 8007a70:	f008 ffbc 	bl	80109ec <memcpy.isra.0>
 8007a74:	8a63      	ldrh	r3, [r4, #18]
 8007a76:	f104 061a 	add.w	r6, r4, #26
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	2204      	movs	r2, #4
 8007a80:	8263      	strh	r3, [r4, #18]
 8007a82:	f104 001e 	add.w	r0, r4, #30
 8007a86:	f008 ffb1 	bl	80109ec <memcpy.isra.0>
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <icmp_handle+0x94>)
 8007a8e:	eb0d 0102 	add.w	r1, sp, r2
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4630      	mov	r0, r6
 8007a96:	f104 060e 	add.w	r6, r4, #14
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	f008 ffa6 	bl	80109ec <memcpy.isra.0>
 8007aa0:	2114      	movs	r1, #20
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	7625      	strb	r5, [r4, #24]
 8007aa6:	7665      	strb	r5, [r4, #25]
 8007aa8:	f008 ff87 	bl	80109ba <net_chksum>
 8007aac:	8a21      	ldrh	r1, [r4, #16]
 8007aae:	8320      	strh	r0, [r4, #24]
 8007ab0:	ba49      	rev16	r1, r1
 8007ab2:	b289      	uxth	r1, r1
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007aba:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007abe:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007ac2:	f008 ff7a 	bl	80109ba <net_chksum>
 8007ac6:	8a21      	ldrh	r1, [r4, #16]
 8007ac8:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007aca:	ba49      	rev16	r1, r1
 8007acc:	b289      	uxth	r1, r1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	310e      	adds	r1, #14
 8007ad2:	f00b fa11 	bl	8012ef8 <emac_eth_send>
 8007ad6:	b002      	add	sp, #8
 8007ad8:	bd70      	pop	{r4, r5, r6, pc}
 8007ada:	bf00      	nop
 8007adc:	200029cc 	andcs	r2, r0, ip, asr #19
 8007ae0:	200029c0 	andcs	r2, r0, r0, asr #19

08007ae4 <__aeabi_d2f>:
 8007ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007ae8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007aec:	bf24      	itt	cs
 8007aee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007af2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007af6:	d90d      	bls.n	8007b14 <__aeabi_d2f+0x30>
 8007af8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007afc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007b00:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007b04:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007b08:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007b0c:	bf08      	it	eq
 8007b0e:	f020 0001 	biceq.w	r0, r0, #1
 8007b12:	4770      	bx	lr
 8007b14:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007b18:	d121      	bne.n	8007b5e <__aeabi_d2f+0x7a>
 8007b1a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007b1e:	bfbc      	itt	lt
 8007b20:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007b24:	4770      	bxlt	lr
 8007b26:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007b2a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007b2e:	f1c2 0218 	rsb	r2, r2, #24
 8007b32:	f1c2 0c20 	rsb	ip, r2, #32
 8007b36:	fa10 f30c 	lsls.w	r3, r0, ip
 8007b3a:	fa20 f002 	lsr.w	r0, r0, r2
 8007b3e:	bf18      	it	ne
 8007b40:	f040 0001 	orrne.w	r0, r0, #1
 8007b44:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007b48:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007b4c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007b50:	ea40 000c 	orr.w	r0, r0, ip
 8007b54:	fa23 f302 	lsr.w	r3, r3, r2
 8007b58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b5c:	e7cc      	b.n	8007af8 <__aeabi_d2f+0x14>
 8007b5e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007b62:	d107      	bne.n	8007b74 <__aeabi_d2f+0x90>
 8007b64:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007b68:	bf1e      	ittt	ne
 8007b6a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007b6e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007b72:	4770      	bxne	lr
 8007b74:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007b78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007b7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop

08007b84 <__aeabi_frsub>:
 8007b84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8007b88:	e002      	b.n	8007b90 <__addsf3>
 8007b8a:	bf00      	nop

08007b8c <__aeabi_fsub>:
 8007b8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007b90 <__addsf3>:
 8007b90:	0042      	lsls	r2, r0, #1
 8007b92:	bf1f      	itttt	ne
 8007b94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8007b98:	ea92 0f03 	teqne	r2, r3
 8007b9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007ba0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007ba4:	d06a      	beq.n	8007c7c <__addsf3+0xec>
 8007ba6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007baa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007bae:	bfc1      	itttt	gt
 8007bb0:	18d2      	addgt	r2, r2, r3
 8007bb2:	4041      	eorgt	r1, r0
 8007bb4:	4048      	eorgt	r0, r1
 8007bb6:	4041      	eorgt	r1, r0
 8007bb8:	bfb8      	it	lt
 8007bba:	425b      	neglt	r3, r3
 8007bbc:	2b19      	cmp	r3, #25
 8007bbe:	bf88      	it	hi
 8007bc0:	4770      	bxhi	lr
 8007bc2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007bc6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007bca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8007bce:	bf18      	it	ne
 8007bd0:	4240      	negne	r0, r0
 8007bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007bd6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007bda:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8007bde:	bf18      	it	ne
 8007be0:	4249      	negne	r1, r1
 8007be2:	ea92 0f03 	teq	r2, r3
 8007be6:	d03f      	beq.n	8007c68 <__addsf3+0xd8>
 8007be8:	f1a2 0201 	sub.w	r2, r2, #1
 8007bec:	fa41 fc03 	asr.w	ip, r1, r3
 8007bf0:	eb10 000c 	adds.w	r0, r0, ip
 8007bf4:	f1c3 0320 	rsb	r3, r3, #32
 8007bf8:	fa01 f103 	lsl.w	r1, r1, r3
 8007bfc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007c00:	d502      	bpl.n	8007c08 <__addsf3+0x78>
 8007c02:	4249      	negs	r1, r1
 8007c04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007c08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007c0c:	d313      	bcc.n	8007c36 <__addsf3+0xa6>
 8007c0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8007c12:	d306      	bcc.n	8007c22 <__addsf3+0x92>
 8007c14:	0840      	lsrs	r0, r0, #1
 8007c16:	ea4f 0131 	mov.w	r1, r1, rrx
 8007c1a:	f102 0201 	add.w	r2, r2, #1
 8007c1e:	2afe      	cmp	r2, #254	; 0xfe
 8007c20:	d251      	bcs.n	8007cc6 <__addsf3+0x136>
 8007c22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007c2a:	bf08      	it	eq
 8007c2c:	f020 0001 	biceq.w	r0, r0, #1
 8007c30:	ea40 0003 	orr.w	r0, r0, r3
 8007c34:	4770      	bx	lr
 8007c36:	0049      	lsls	r1, r1, #1
 8007c38:	eb40 0000 	adc.w	r0, r0, r0
 8007c3c:	3a01      	subs	r2, #1
 8007c3e:	bf28      	it	cs
 8007c40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8007c44:	d2ed      	bcs.n	8007c22 <__addsf3+0x92>
 8007c46:	fab0 fc80 	clz	ip, r0
 8007c4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8007c4e:	ebb2 020c 	subs.w	r2, r2, ip
 8007c52:	fa00 f00c 	lsl.w	r0, r0, ip
 8007c56:	bfaa      	itet	ge
 8007c58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8007c5c:	4252      	neglt	r2, r2
 8007c5e:	4318      	orrge	r0, r3
 8007c60:	bfbc      	itt	lt
 8007c62:	40d0      	lsrlt	r0, r2
 8007c64:	4318      	orrlt	r0, r3
 8007c66:	4770      	bx	lr
 8007c68:	f092 0f00 	teq	r2, #0
 8007c6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007c70:	bf06      	itte	eq
 8007c72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8007c76:	3201      	addeq	r2, #1
 8007c78:	3b01      	subne	r3, #1
 8007c7a:	e7b5      	b.n	8007be8 <__addsf3+0x58>
 8007c7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007c80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007c84:	bf18      	it	ne
 8007c86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007c8a:	d021      	beq.n	8007cd0 <__addsf3+0x140>
 8007c8c:	ea92 0f03 	teq	r2, r3
 8007c90:	d004      	beq.n	8007c9c <__addsf3+0x10c>
 8007c92:	f092 0f00 	teq	r2, #0
 8007c96:	bf08      	it	eq
 8007c98:	4608      	moveq	r0, r1
 8007c9a:	4770      	bx	lr
 8007c9c:	ea90 0f01 	teq	r0, r1
 8007ca0:	bf1c      	itt	ne
 8007ca2:	2000      	movne	r0, #0
 8007ca4:	4770      	bxne	lr
 8007ca6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8007caa:	d104      	bne.n	8007cb6 <__addsf3+0x126>
 8007cac:	0040      	lsls	r0, r0, #1
 8007cae:	bf28      	it	cs
 8007cb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007cb4:	4770      	bx	lr
 8007cb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8007cba:	bf3c      	itt	cc
 8007cbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8007cc0:	4770      	bxcc	lr
 8007cc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007cc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8007cca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007cce:	4770      	bx	lr
 8007cd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007cd4:	bf16      	itet	ne
 8007cd6:	4608      	movne	r0, r1
 8007cd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007cdc:	4601      	movne	r1, r0
 8007cde:	0242      	lsls	r2, r0, #9
 8007ce0:	bf06      	itte	eq
 8007ce2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8007ce6:	ea90 0f01 	teqeq	r0, r1
 8007cea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8007cee:	4770      	bx	lr

08007cf0 <__aeabi_ui2f>:
 8007cf0:	f04f 0300 	mov.w	r3, #0
 8007cf4:	e004      	b.n	8007d00 <__aeabi_i2f+0x8>
 8007cf6:	bf00      	nop

08007cf8 <__aeabi_i2f>:
 8007cf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007cfc:	bf48      	it	mi
 8007cfe:	4240      	negmi	r0, r0
 8007d00:	ea5f 0c00 	movs.w	ip, r0
 8007d04:	bf08      	it	eq
 8007d06:	4770      	bxeq	lr
 8007d08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	f04f 0000 	mov.w	r0, #0
 8007d12:	e01c      	b.n	8007d4e <__aeabi_l2f+0x2a>

08007d14 <__aeabi_ul2f>:
 8007d14:	ea50 0201 	orrs.w	r2, r0, r1
 8007d18:	bf08      	it	eq
 8007d1a:	4770      	bxeq	lr
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	e00a      	b.n	8007d38 <__aeabi_l2f+0x14>
 8007d22:	bf00      	nop

08007d24 <__aeabi_l2f>:
 8007d24:	ea50 0201 	orrs.w	r2, r0, r1
 8007d28:	bf08      	it	eq
 8007d2a:	4770      	bxeq	lr
 8007d2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007d30:	d502      	bpl.n	8007d38 <__aeabi_l2f+0x14>
 8007d32:	4240      	negs	r0, r0
 8007d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007d38:	ea5f 0c01 	movs.w	ip, r1
 8007d3c:	bf02      	ittt	eq
 8007d3e:	4684      	moveq	ip, r0
 8007d40:	4601      	moveq	r1, r0
 8007d42:	2000      	moveq	r0, #0
 8007d44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8007d48:	bf08      	it	eq
 8007d4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007d4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007d52:	fabc f28c 	clz	r2, ip
 8007d56:	3a08      	subs	r2, #8
 8007d58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007d5c:	db10      	blt.n	8007d80 <__aeabi_l2f+0x5c>
 8007d5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8007d62:	4463      	add	r3, ip
 8007d64:	fa00 fc02 	lsl.w	ip, r0, r2
 8007d68:	f1c2 0220 	rsb	r2, r2, #32
 8007d6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007d70:	fa20 f202 	lsr.w	r2, r0, r2
 8007d74:	eb43 0002 	adc.w	r0, r3, r2
 8007d78:	bf08      	it	eq
 8007d7a:	f020 0001 	biceq.w	r0, r0, #1
 8007d7e:	4770      	bx	lr
 8007d80:	f102 0220 	add.w	r2, r2, #32
 8007d84:	fa01 fc02 	lsl.w	ip, r1, r2
 8007d88:	f1c2 0220 	rsb	r2, r2, #32
 8007d8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007d90:	fa21 f202 	lsr.w	r2, r1, r2
 8007d94:	eb43 0002 	adc.w	r0, r3, r2
 8007d98:	bf08      	it	eq
 8007d9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007d9e:	4770      	bx	lr

08007da0 <__gesf2>:
 8007da0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007da4:	e006      	b.n	8007db4 <__cmpsf2+0x4>
 8007da6:	bf00      	nop

08007da8 <__lesf2>:
 8007da8:	f04f 0c01 	mov.w	ip, #1
 8007dac:	e002      	b.n	8007db4 <__cmpsf2+0x4>
 8007dae:	bf00      	nop

08007db0 <__cmpsf2>:
 8007db0:	f04f 0c01 	mov.w	ip, #1
 8007db4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007db8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007dbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007dc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007dc4:	bf18      	it	ne
 8007dc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007dca:	d011      	beq.n	8007df0 <__cmpsf2+0x40>
 8007dcc:	b001      	add	sp, #4
 8007dce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8007dd2:	bf18      	it	ne
 8007dd4:	ea90 0f01 	teqne	r0, r1
 8007dd8:	bf58      	it	pl
 8007dda:	ebb2 0003 	subspl.w	r0, r2, r3
 8007dde:	bf88      	it	hi
 8007de0:	17c8      	asrhi	r0, r1, #31
 8007de2:	bf38      	it	cc
 8007de4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007de8:	bf18      	it	ne
 8007dea:	f040 0001 	orrne.w	r0, r0, #1
 8007dee:	4770      	bx	lr
 8007df0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007df4:	d102      	bne.n	8007dfc <__cmpsf2+0x4c>
 8007df6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007dfa:	d105      	bne.n	8007e08 <__cmpsf2+0x58>
 8007dfc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8007e00:	d1e4      	bne.n	8007dcc <__cmpsf2+0x1c>
 8007e02:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007e06:	d0e1      	beq.n	8007dcc <__cmpsf2+0x1c>
 8007e08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop

08007e10 <__aeabi_cfrcmple>:
 8007e10:	4684      	mov	ip, r0
 8007e12:	4608      	mov	r0, r1
 8007e14:	4661      	mov	r1, ip
 8007e16:	e7ff      	b.n	8007e18 <__aeabi_cfcmpeq>

08007e18 <__aeabi_cfcmpeq>:
 8007e18:	b50f      	push	{r0, r1, r2, r3, lr}
 8007e1a:	f7ff ffc9 	bl	8007db0 <__cmpsf2>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	bf48      	it	mi
 8007e22:	f110 0f00 	cmnmi.w	r0, #0
 8007e26:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007e28 <__aeabi_fcmpeq>:
 8007e28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e2c:	f7ff fff4 	bl	8007e18 <__aeabi_cfcmpeq>
 8007e30:	bf0c      	ite	eq
 8007e32:	2001      	moveq	r0, #1
 8007e34:	2000      	movne	r0, #0
 8007e36:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e3a:	bf00      	nop

08007e3c <__aeabi_fcmplt>:
 8007e3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e40:	f7ff ffea 	bl	8007e18 <__aeabi_cfcmpeq>
 8007e44:	bf34      	ite	cc
 8007e46:	2001      	movcc	r0, #1
 8007e48:	2000      	movcs	r0, #0
 8007e4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e4e:	bf00      	nop

08007e50 <__aeabi_fcmple>:
 8007e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e54:	f7ff ffe0 	bl	8007e18 <__aeabi_cfcmpeq>
 8007e58:	bf94      	ite	ls
 8007e5a:	2001      	movls	r0, #1
 8007e5c:	2000      	movhi	r0, #0
 8007e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e62:	bf00      	nop

08007e64 <__aeabi_fcmpge>:
 8007e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e68:	f7ff ffd2 	bl	8007e10 <__aeabi_cfrcmple>
 8007e6c:	bf94      	ite	ls
 8007e6e:	2001      	movls	r0, #1
 8007e70:	2000      	movhi	r0, #0
 8007e72:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e76:	bf00      	nop

08007e78 <__aeabi_fcmpgt>:
 8007e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007e7c:	f7ff ffc8 	bl	8007e10 <__aeabi_cfrcmple>
 8007e80:	bf34      	ite	cc
 8007e82:	2001      	movcc	r0, #1
 8007e84:	2000      	movcs	r0, #0
 8007e86:	f85d fb08 	ldr.w	pc, [sp], #8
 8007e8a:	bf00      	nop

08007e8c <__aeabi_f2iz>:
 8007e8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007e90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007e94:	d30f      	bcc.n	8007eb6 <__aeabi_f2iz+0x2a>
 8007e96:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007e9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8007e9e:	d90d      	bls.n	8007ebc <__aeabi_f2iz+0x30>
 8007ea0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ea8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007eac:	fa23 f002 	lsr.w	r0, r3, r2
 8007eb0:	bf18      	it	ne
 8007eb2:	4240      	negne	r0, r0
 8007eb4:	4770      	bx	lr
 8007eb6:	f04f 0000 	mov.w	r0, #0
 8007eba:	4770      	bx	lr
 8007ebc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8007ec0:	d101      	bne.n	8007ec6 <__aeabi_f2iz+0x3a>
 8007ec2:	0242      	lsls	r2, r0, #9
 8007ec4:	d105      	bne.n	8007ed2 <__aeabi_f2iz+0x46>
 8007ec6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8007eca:	bf08      	it	eq
 8007ecc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007ed0:	4770      	bx	lr
 8007ed2:	f04f 0000 	mov.w	r0, #0
 8007ed6:	4770      	bx	lr

08007ed8 <__aeabi_uldivmod>:
 8007ed8:	b953      	cbnz	r3, 8007ef0 <__aeabi_uldivmod+0x18>
 8007eda:	b94a      	cbnz	r2, 8007ef0 <__aeabi_uldivmod+0x18>
 8007edc:	2900      	cmp	r1, #0
 8007ede:	bf08      	it	eq
 8007ee0:	2800      	cmpeq	r0, #0
 8007ee2:	bf1c      	itt	ne
 8007ee4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007ee8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007eec:	f000 b80c 	b.w	8007f08 <__aeabi_idiv0>
 8007ef0:	f1ad 0c08 	sub.w	ip, sp, #8
 8007ef4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007ef8:	f001 f9e8 	bl	80092cc <__udivmoddi4>
 8007efc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007f00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f04:	b004      	add	sp, #16
 8007f06:	4770      	bx	lr

08007f08 <__aeabi_idiv0>:
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop

08007f0c <__aeabi_drsub>:
 8007f0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007f10:	e002      	b.n	8007f18 <__adddf3>
 8007f12:	bf00      	nop

08007f14 <__aeabi_dsub>:
 8007f14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007f18 <__adddf3>:
 8007f18:	b530      	push	{r4, r5, lr}
 8007f1a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007f1e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007f22:	ea94 0f05 	teq	r4, r5
 8007f26:	bf08      	it	eq
 8007f28:	ea90 0f02 	teqeq	r0, r2
 8007f2c:	bf1f      	itttt	ne
 8007f2e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007f32:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007f36:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007f3a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007f3e:	f000 80e2 	beq.w	8008106 <__adddf3+0x1ee>
 8007f42:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007f46:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007f4a:	bfb8      	it	lt
 8007f4c:	426d      	neglt	r5, r5
 8007f4e:	dd0c      	ble.n	8007f6a <__adddf3+0x52>
 8007f50:	442c      	add	r4, r5
 8007f52:	ea80 0202 	eor.w	r2, r0, r2
 8007f56:	ea81 0303 	eor.w	r3, r1, r3
 8007f5a:	ea82 0000 	eor.w	r0, r2, r0
 8007f5e:	ea83 0101 	eor.w	r1, r3, r1
 8007f62:	ea80 0202 	eor.w	r2, r0, r2
 8007f66:	ea81 0303 	eor.w	r3, r1, r3
 8007f6a:	2d36      	cmp	r5, #54	; 0x36
 8007f6c:	bf88      	it	hi
 8007f6e:	bd30      	pophi	{r4, r5, pc}
 8007f70:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007f74:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007f78:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007f7c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007f80:	d002      	beq.n	8007f88 <__adddf3+0x70>
 8007f82:	4240      	negs	r0, r0
 8007f84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007f88:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007f8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007f90:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007f94:	d002      	beq.n	8007f9c <__adddf3+0x84>
 8007f96:	4252      	negs	r2, r2
 8007f98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007f9c:	ea94 0f05 	teq	r4, r5
 8007fa0:	f000 80a7 	beq.w	80080f2 <__adddf3+0x1da>
 8007fa4:	f1a4 0401 	sub.w	r4, r4, #1
 8007fa8:	f1d5 0e20 	rsbs	lr, r5, #32
 8007fac:	db0d      	blt.n	8007fca <__adddf3+0xb2>
 8007fae:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007fb2:	fa22 f205 	lsr.w	r2, r2, r5
 8007fb6:	1880      	adds	r0, r0, r2
 8007fb8:	f141 0100 	adc.w	r1, r1, #0
 8007fbc:	fa03 f20e 	lsl.w	r2, r3, lr
 8007fc0:	1880      	adds	r0, r0, r2
 8007fc2:	fa43 f305 	asr.w	r3, r3, r5
 8007fc6:	4159      	adcs	r1, r3
 8007fc8:	e00e      	b.n	8007fe8 <__adddf3+0xd0>
 8007fca:	f1a5 0520 	sub.w	r5, r5, #32
 8007fce:	f10e 0e20 	add.w	lr, lr, #32
 8007fd2:	2a01      	cmp	r2, #1
 8007fd4:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007fd8:	bf28      	it	cs
 8007fda:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007fde:	fa43 f305 	asr.w	r3, r3, r5
 8007fe2:	18c0      	adds	r0, r0, r3
 8007fe4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007fe8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007fec:	d507      	bpl.n	8007ffe <__adddf3+0xe6>
 8007fee:	f04f 0e00 	mov.w	lr, #0
 8007ff2:	f1dc 0c00 	rsbs	ip, ip, #0
 8007ff6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007ffa:	eb6e 0101 	sbc.w	r1, lr, r1
 8007ffe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008002:	d31b      	bcc.n	800803c <__adddf3+0x124>
 8008004:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008008:	d30c      	bcc.n	8008024 <__adddf3+0x10c>
 800800a:	0849      	lsrs	r1, r1, #1
 800800c:	ea5f 0030 	movs.w	r0, r0, rrx
 8008010:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008014:	f104 0401 	add.w	r4, r4, #1
 8008018:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800801c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008020:	f080 809a 	bcs.w	8008158 <__adddf3+0x240>
 8008024:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008028:	bf08      	it	eq
 800802a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800802e:	f150 0000 	adcs.w	r0, r0, #0
 8008032:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008036:	ea41 0105 	orr.w	r1, r1, r5
 800803a:	bd30      	pop	{r4, r5, pc}
 800803c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008040:	4140      	adcs	r0, r0
 8008042:	eb41 0101 	adc.w	r1, r1, r1
 8008046:	3c01      	subs	r4, #1
 8008048:	bf28      	it	cs
 800804a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800804e:	d2e9      	bcs.n	8008024 <__adddf3+0x10c>
 8008050:	f091 0f00 	teq	r1, #0
 8008054:	bf04      	itt	eq
 8008056:	4601      	moveq	r1, r0
 8008058:	2000      	moveq	r0, #0
 800805a:	fab1 f381 	clz	r3, r1
 800805e:	bf08      	it	eq
 8008060:	3320      	addeq	r3, #32
 8008062:	f1a3 030b 	sub.w	r3, r3, #11
 8008066:	f1b3 0220 	subs.w	r2, r3, #32
 800806a:	da0c      	bge.n	8008086 <__adddf3+0x16e>
 800806c:	320c      	adds	r2, #12
 800806e:	dd08      	ble.n	8008082 <__adddf3+0x16a>
 8008070:	f102 0c14 	add.w	ip, r2, #20
 8008074:	f1c2 020c 	rsb	r2, r2, #12
 8008078:	fa01 f00c 	lsl.w	r0, r1, ip
 800807c:	fa21 f102 	lsr.w	r1, r1, r2
 8008080:	e00c      	b.n	800809c <__adddf3+0x184>
 8008082:	f102 0214 	add.w	r2, r2, #20
 8008086:	bfd8      	it	le
 8008088:	f1c2 0c20 	rsble	ip, r2, #32
 800808c:	fa01 f102 	lsl.w	r1, r1, r2
 8008090:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008094:	bfdc      	itt	le
 8008096:	ea41 010c 	orrle.w	r1, r1, ip
 800809a:	4090      	lslle	r0, r2
 800809c:	1ae4      	subs	r4, r4, r3
 800809e:	bfa2      	ittt	ge
 80080a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80080a4:	4329      	orrge	r1, r5
 80080a6:	bd30      	popge	{r4, r5, pc}
 80080a8:	ea6f 0404 	mvn.w	r4, r4
 80080ac:	3c1f      	subs	r4, #31
 80080ae:	da1c      	bge.n	80080ea <__adddf3+0x1d2>
 80080b0:	340c      	adds	r4, #12
 80080b2:	dc0e      	bgt.n	80080d2 <__adddf3+0x1ba>
 80080b4:	f104 0414 	add.w	r4, r4, #20
 80080b8:	f1c4 0220 	rsb	r2, r4, #32
 80080bc:	fa20 f004 	lsr.w	r0, r0, r4
 80080c0:	fa01 f302 	lsl.w	r3, r1, r2
 80080c4:	ea40 0003 	orr.w	r0, r0, r3
 80080c8:	fa21 f304 	lsr.w	r3, r1, r4
 80080cc:	ea45 0103 	orr.w	r1, r5, r3
 80080d0:	bd30      	pop	{r4, r5, pc}
 80080d2:	f1c4 040c 	rsb	r4, r4, #12
 80080d6:	f1c4 0220 	rsb	r2, r4, #32
 80080da:	fa20 f002 	lsr.w	r0, r0, r2
 80080de:	fa01 f304 	lsl.w	r3, r1, r4
 80080e2:	ea40 0003 	orr.w	r0, r0, r3
 80080e6:	4629      	mov	r1, r5
 80080e8:	bd30      	pop	{r4, r5, pc}
 80080ea:	fa21 f004 	lsr.w	r0, r1, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	bd30      	pop	{r4, r5, pc}
 80080f2:	f094 0f00 	teq	r4, #0
 80080f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80080fa:	bf06      	itte	eq
 80080fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008100:	3401      	addeq	r4, #1
 8008102:	3d01      	subne	r5, #1
 8008104:	e74e      	b.n	8007fa4 <__adddf3+0x8c>
 8008106:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800810a:	bf18      	it	ne
 800810c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008110:	d029      	beq.n	8008166 <__adddf3+0x24e>
 8008112:	ea94 0f05 	teq	r4, r5
 8008116:	bf08      	it	eq
 8008118:	ea90 0f02 	teqeq	r0, r2
 800811c:	d005      	beq.n	800812a <__adddf3+0x212>
 800811e:	ea54 0c00 	orrs.w	ip, r4, r0
 8008122:	bf04      	itt	eq
 8008124:	4619      	moveq	r1, r3
 8008126:	4610      	moveq	r0, r2
 8008128:	bd30      	pop	{r4, r5, pc}
 800812a:	ea91 0f03 	teq	r1, r3
 800812e:	bf1e      	ittt	ne
 8008130:	2100      	movne	r1, #0
 8008132:	2000      	movne	r0, #0
 8008134:	bd30      	popne	{r4, r5, pc}
 8008136:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800813a:	d105      	bne.n	8008148 <__adddf3+0x230>
 800813c:	0040      	lsls	r0, r0, #1
 800813e:	4149      	adcs	r1, r1
 8008140:	bf28      	it	cs
 8008142:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008146:	bd30      	pop	{r4, r5, pc}
 8008148:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800814c:	bf3c      	itt	cc
 800814e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008152:	bd30      	popcc	{r4, r5, pc}
 8008154:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008158:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800815c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008160:	f04f 0000 	mov.w	r0, #0
 8008164:	bd30      	pop	{r4, r5, pc}
 8008166:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800816a:	bf1a      	itte	ne
 800816c:	4619      	movne	r1, r3
 800816e:	4610      	movne	r0, r2
 8008170:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008174:	bf1c      	itt	ne
 8008176:	460b      	movne	r3, r1
 8008178:	4602      	movne	r2, r0
 800817a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800817e:	bf06      	itte	eq
 8008180:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008184:	ea91 0f03 	teqeq	r1, r3
 8008188:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800818c:	bd30      	pop	{r4, r5, pc}
 800818e:	bf00      	nop

08008190 <__aeabi_ui2d>:
 8008190:	f090 0f00 	teq	r0, #0
 8008194:	bf04      	itt	eq
 8008196:	2100      	moveq	r1, #0
 8008198:	4770      	bxeq	lr
 800819a:	b530      	push	{r4, r5, lr}
 800819c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081a4:	f04f 0500 	mov.w	r5, #0
 80081a8:	f04f 0100 	mov.w	r1, #0
 80081ac:	e750      	b.n	8008050 <__adddf3+0x138>
 80081ae:	bf00      	nop

080081b0 <__aeabi_i2d>:
 80081b0:	f090 0f00 	teq	r0, #0
 80081b4:	bf04      	itt	eq
 80081b6:	2100      	moveq	r1, #0
 80081b8:	4770      	bxeq	lr
 80081ba:	b530      	push	{r4, r5, lr}
 80081bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80081c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80081c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80081c8:	bf48      	it	mi
 80081ca:	4240      	negmi	r0, r0
 80081cc:	f04f 0100 	mov.w	r1, #0
 80081d0:	e73e      	b.n	8008050 <__adddf3+0x138>
 80081d2:	bf00      	nop

080081d4 <__aeabi_f2d>:
 80081d4:	0042      	lsls	r2, r0, #1
 80081d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80081da:	ea4f 0131 	mov.w	r1, r1, rrx
 80081de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80081e2:	bf1f      	itttt	ne
 80081e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80081e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80081ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80081f0:	4770      	bxne	lr
 80081f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80081f6:	bf08      	it	eq
 80081f8:	4770      	bxeq	lr
 80081fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80081fe:	bf04      	itt	eq
 8008200:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008204:	4770      	bxeq	lr
 8008206:	b530      	push	{r4, r5, lr}
 8008208:	f44f 7460 	mov.w	r4, #896	; 0x380
 800820c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008210:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008214:	e71c      	b.n	8008050 <__adddf3+0x138>
 8008216:	bf00      	nop

08008218 <__aeabi_ul2d>:
 8008218:	ea50 0201 	orrs.w	r2, r0, r1
 800821c:	bf08      	it	eq
 800821e:	4770      	bxeq	lr
 8008220:	b530      	push	{r4, r5, lr}
 8008222:	f04f 0500 	mov.w	r5, #0
 8008226:	e00a      	b.n	800823e <__aeabi_l2d+0x16>

08008228 <__aeabi_l2d>:
 8008228:	ea50 0201 	orrs.w	r2, r0, r1
 800822c:	bf08      	it	eq
 800822e:	4770      	bxeq	lr
 8008230:	b530      	push	{r4, r5, lr}
 8008232:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008236:	d502      	bpl.n	800823e <__aeabi_l2d+0x16>
 8008238:	4240      	negs	r0, r0
 800823a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800823e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008242:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008246:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800824a:	f43f aed8 	beq.w	8007ffe <__adddf3+0xe6>
 800824e:	f04f 0203 	mov.w	r2, #3
 8008252:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008256:	bf18      	it	ne
 8008258:	3203      	addne	r2, #3
 800825a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800825e:	bf18      	it	ne
 8008260:	3203      	addne	r2, #3
 8008262:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008266:	f1c2 0320 	rsb	r3, r2, #32
 800826a:	fa00 fc03 	lsl.w	ip, r0, r3
 800826e:	fa20 f002 	lsr.w	r0, r0, r2
 8008272:	fa01 fe03 	lsl.w	lr, r1, r3
 8008276:	ea40 000e 	orr.w	r0, r0, lr
 800827a:	fa21 f102 	lsr.w	r1, r1, r2
 800827e:	4414      	add	r4, r2
 8008280:	e6bd      	b.n	8007ffe <__adddf3+0xe6>
 8008282:	bf00      	nop

08008284 <__aeabi_fmul>:
 8008284:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008288:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800828c:	bf1e      	ittt	ne
 800828e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008292:	ea92 0f0c 	teqne	r2, ip
 8008296:	ea93 0f0c 	teqne	r3, ip
 800829a:	d06f      	beq.n	800837c <__aeabi_fmul+0xf8>
 800829c:	441a      	add	r2, r3
 800829e:	ea80 0c01 	eor.w	ip, r0, r1
 80082a2:	0240      	lsls	r0, r0, #9
 80082a4:	bf18      	it	ne
 80082a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80082aa:	d01e      	beq.n	80082ea <__aeabi_fmul+0x66>
 80082ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80082b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80082b8:	fba0 3101 	umull	r3, r1, r0, r1
 80082bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80082c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80082c4:	bf3e      	ittt	cc
 80082c6:	0049      	lslcc	r1, r1, #1
 80082c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80082cc:	005b      	lslcc	r3, r3, #1
 80082ce:	ea40 0001 	orr.w	r0, r0, r1
 80082d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80082d6:	2afd      	cmp	r2, #253	; 0xfd
 80082d8:	d81d      	bhi.n	8008316 <__aeabi_fmul+0x92>
 80082da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80082e2:	bf08      	it	eq
 80082e4:	f020 0001 	biceq.w	r0, r0, #1
 80082e8:	4770      	bx	lr
 80082ea:	f090 0f00 	teq	r0, #0
 80082ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80082f2:	bf08      	it	eq
 80082f4:	0249      	lsleq	r1, r1, #9
 80082f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80082fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80082fe:	3a7f      	subs	r2, #127	; 0x7f
 8008300:	bfc2      	ittt	gt
 8008302:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008306:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800830a:	4770      	bxgt	lr
 800830c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008310:	f04f 0300 	mov.w	r3, #0
 8008314:	3a01      	subs	r2, #1
 8008316:	dc5d      	bgt.n	80083d4 <__aeabi_fmul+0x150>
 8008318:	f112 0f19 	cmn.w	r2, #25
 800831c:	bfdc      	itt	le
 800831e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8008322:	4770      	bxle	lr
 8008324:	f1c2 0200 	rsb	r2, r2, #0
 8008328:	0041      	lsls	r1, r0, #1
 800832a:	fa21 f102 	lsr.w	r1, r1, r2
 800832e:	f1c2 0220 	rsb	r2, r2, #32
 8008332:	fa00 fc02 	lsl.w	ip, r0, r2
 8008336:	ea5f 0031 	movs.w	r0, r1, rrx
 800833a:	f140 0000 	adc.w	r0, r0, #0
 800833e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8008342:	bf08      	it	eq
 8008344:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008348:	4770      	bx	lr
 800834a:	f092 0f00 	teq	r2, #0
 800834e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008352:	bf02      	ittt	eq
 8008354:	0040      	lsleq	r0, r0, #1
 8008356:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800835a:	3a01      	subeq	r2, #1
 800835c:	d0f9      	beq.n	8008352 <__aeabi_fmul+0xce>
 800835e:	ea40 000c 	orr.w	r0, r0, ip
 8008362:	f093 0f00 	teq	r3, #0
 8008366:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800836a:	bf02      	ittt	eq
 800836c:	0049      	lsleq	r1, r1, #1
 800836e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008372:	3b01      	subeq	r3, #1
 8008374:	d0f9      	beq.n	800836a <__aeabi_fmul+0xe6>
 8008376:	ea41 010c 	orr.w	r1, r1, ip
 800837a:	e78f      	b.n	800829c <__aeabi_fmul+0x18>
 800837c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008380:	ea92 0f0c 	teq	r2, ip
 8008384:	bf18      	it	ne
 8008386:	ea93 0f0c 	teqne	r3, ip
 800838a:	d00a      	beq.n	80083a2 <__aeabi_fmul+0x11e>
 800838c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008390:	bf18      	it	ne
 8008392:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008396:	d1d8      	bne.n	800834a <__aeabi_fmul+0xc6>
 8008398:	ea80 0001 	eor.w	r0, r0, r1
 800839c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80083a0:	4770      	bx	lr
 80083a2:	f090 0f00 	teq	r0, #0
 80083a6:	bf17      	itett	ne
 80083a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80083ac:	4608      	moveq	r0, r1
 80083ae:	f091 0f00 	teqne	r1, #0
 80083b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80083b6:	d014      	beq.n	80083e2 <__aeabi_fmul+0x15e>
 80083b8:	ea92 0f0c 	teq	r2, ip
 80083bc:	d101      	bne.n	80083c2 <__aeabi_fmul+0x13e>
 80083be:	0242      	lsls	r2, r0, #9
 80083c0:	d10f      	bne.n	80083e2 <__aeabi_fmul+0x15e>
 80083c2:	ea93 0f0c 	teq	r3, ip
 80083c6:	d103      	bne.n	80083d0 <__aeabi_fmul+0x14c>
 80083c8:	024b      	lsls	r3, r1, #9
 80083ca:	bf18      	it	ne
 80083cc:	4608      	movne	r0, r1
 80083ce:	d108      	bne.n	80083e2 <__aeabi_fmul+0x15e>
 80083d0:	ea80 0001 	eor.w	r0, r0, r1
 80083d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80083d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80083dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80083e0:	4770      	bx	lr
 80083e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80083e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80083ea:	4770      	bx	lr

080083ec <__aeabi_fdiv>:
 80083ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80083f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80083f4:	bf1e      	ittt	ne
 80083f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80083fa:	ea92 0f0c 	teqne	r2, ip
 80083fe:	ea93 0f0c 	teqne	r3, ip
 8008402:	d069      	beq.n	80084d8 <__aeabi_fdiv+0xec>
 8008404:	eba2 0203 	sub.w	r2, r2, r3
 8008408:	ea80 0c01 	eor.w	ip, r0, r1
 800840c:	0249      	lsls	r1, r1, #9
 800840e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8008412:	d037      	beq.n	8008484 <__aeabi_fdiv+0x98>
 8008414:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008418:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800841c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8008420:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008424:	428b      	cmp	r3, r1
 8008426:	bf38      	it	cc
 8008428:	005b      	lslcc	r3, r3, #1
 800842a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800842e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8008432:	428b      	cmp	r3, r1
 8008434:	bf24      	itt	cs
 8008436:	1a5b      	subcs	r3, r3, r1
 8008438:	ea40 000c 	orrcs.w	r0, r0, ip
 800843c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8008440:	bf24      	itt	cs
 8008442:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8008446:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800844a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800844e:	bf24      	itt	cs
 8008450:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8008454:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008458:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800845c:	bf24      	itt	cs
 800845e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8008462:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	bf18      	it	ne
 800846a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800846e:	d1e0      	bne.n	8008432 <__aeabi_fdiv+0x46>
 8008470:	2afd      	cmp	r2, #253	; 0xfd
 8008472:	f63f af50 	bhi.w	8008316 <__aeabi_fmul+0x92>
 8008476:	428b      	cmp	r3, r1
 8008478:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800847c:	bf08      	it	eq
 800847e:	f020 0001 	biceq.w	r0, r0, #1
 8008482:	4770      	bx	lr
 8008484:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008488:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800848c:	327f      	adds	r2, #127	; 0x7f
 800848e:	bfc2      	ittt	gt
 8008490:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008494:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008498:	4770      	bxgt	lr
 800849a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800849e:	f04f 0300 	mov.w	r3, #0
 80084a2:	3a01      	subs	r2, #1
 80084a4:	e737      	b.n	8008316 <__aeabi_fmul+0x92>
 80084a6:	f092 0f00 	teq	r2, #0
 80084aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80084ae:	bf02      	ittt	eq
 80084b0:	0040      	lsleq	r0, r0, #1
 80084b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80084b6:	3a01      	subeq	r2, #1
 80084b8:	d0f9      	beq.n	80084ae <__aeabi_fdiv+0xc2>
 80084ba:	ea40 000c 	orr.w	r0, r0, ip
 80084be:	f093 0f00 	teq	r3, #0
 80084c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80084c6:	bf02      	ittt	eq
 80084c8:	0049      	lsleq	r1, r1, #1
 80084ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80084ce:	3b01      	subeq	r3, #1
 80084d0:	d0f9      	beq.n	80084c6 <__aeabi_fdiv+0xda>
 80084d2:	ea41 010c 	orr.w	r1, r1, ip
 80084d6:	e795      	b.n	8008404 <__aeabi_fdiv+0x18>
 80084d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80084dc:	ea92 0f0c 	teq	r2, ip
 80084e0:	d108      	bne.n	80084f4 <__aeabi_fdiv+0x108>
 80084e2:	0242      	lsls	r2, r0, #9
 80084e4:	f47f af7d 	bne.w	80083e2 <__aeabi_fmul+0x15e>
 80084e8:	ea93 0f0c 	teq	r3, ip
 80084ec:	f47f af70 	bne.w	80083d0 <__aeabi_fmul+0x14c>
 80084f0:	4608      	mov	r0, r1
 80084f2:	e776      	b.n	80083e2 <__aeabi_fmul+0x15e>
 80084f4:	ea93 0f0c 	teq	r3, ip
 80084f8:	d104      	bne.n	8008504 <__aeabi_fdiv+0x118>
 80084fa:	024b      	lsls	r3, r1, #9
 80084fc:	f43f af4c 	beq.w	8008398 <__aeabi_fmul+0x114>
 8008500:	4608      	mov	r0, r1
 8008502:	e76e      	b.n	80083e2 <__aeabi_fmul+0x15e>
 8008504:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008508:	bf18      	it	ne
 800850a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800850e:	d1ca      	bne.n	80084a6 <__aeabi_fdiv+0xba>
 8008510:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008514:	f47f af5c 	bne.w	80083d0 <__aeabi_fmul+0x14c>
 8008518:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800851c:	f47f af3c 	bne.w	8008398 <__aeabi_fmul+0x114>
 8008520:	e75f      	b.n	80083e2 <__aeabi_fmul+0x15e>
 8008522:	bf00      	nop

08008524 <Reset_Handler>:
 8008524:	480c      	ldr	r0, [pc, #48]	; (8008558 <Zerobss+0x10>)
 8008526:	4685      	mov	sp, r0
 8008528:	2100      	movs	r1, #0
 800852a:	e003      	b.n	8008534 <DataInit>

0800852c <CopyData>:
 800852c:	4b0b      	ldr	r3, [pc, #44]	; (800855c <Zerobss+0x14>)
 800852e:	585b      	ldr	r3, [r3, r1]
 8008530:	5043      	str	r3, [r0, r1]
 8008532:	3104      	adds	r1, #4

08008534 <DataInit>:
 8008534:	480a      	ldr	r0, [pc, #40]	; (8008560 <Zerobss+0x18>)
 8008536:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <Zerobss+0x1c>)
 8008538:	1842      	adds	r2, r0, r1
 800853a:	429a      	cmp	r2, r3
 800853c:	d3f6      	bcc.n	800852c <CopyData>
 800853e:	4a0a      	ldr	r2, [pc, #40]	; (8008568 <Zerobss+0x20>)
 8008540:	e002      	b.n	8008548 <Zerobss>

08008542 <FillZerobss>:
 8008542:	2300      	movs	r3, #0
 8008544:	f842 3b04 	str.w	r3, [r2], #4

08008548 <Zerobss>:
 8008548:	4b08      	ldr	r3, [pc, #32]	; (800856c <Zerobss+0x24>)
 800854a:	429a      	cmp	r2, r3
 800854c:	d3f9      	bcc.n	8008542 <FillZerobss>
 800854e:	f009 ff7d 	bl	801244c <SystemInit>
 8008552:	f000 f91b 	bl	800878c <main>
 8008556:	4770      	bx	lr
 8008558:	20018000 	andcs	r8, r1, r0
 800855c:	08016434 	stmdaeq	r1, {r2, r4, r5, sl, sp, lr}
 8008560:	20000000 	andcs	r0, r0, r0
 8008564:	200000e4 	andcs	r0, r0, r4, ror #1
 8008568:	200000e8 	andcs	r0, r0, r8, ror #1
 800856c:	2001464c 	andcs	r4, r1, ip, asr #12

08008570 <ADC0_1_IRQHandler>:
 8008570:	e7fe      	b.n	8008570 <ADC0_1_IRQHandler>

08008572 <DisplayHandler::~DisplayHandler()>:
 8008572:	4770      	bx	lr

08008574 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8008574:	4770      	bx	lr
	...

08008578 <PixelDmxStartStop::Start()>:
 8008578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800857c:	4b01      	ldr	r3, [pc, #4]	; (8008584 <PixelDmxStartStop::Start()+0xc>)
 800857e:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8008582:	4770      	bx	lr
 8008584:	40010000 	andmi	r0, r1, r0

08008588 <PixelDmxStartStop::Stop()>:
 8008588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800858c:	4b01      	ldr	r3, [pc, #4]	; (8008594 <PixelDmxStartStop::Stop()+0xc>)
 800858e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8008592:	4770      	bx	lr
 8008594:	40010000 	andmi	r0, r1, r0

08008598 <Reboot::~Reboot()>:
 8008598:	4770      	bx	lr
	...

0800859c <Reboot::Run()>:
 800859c:	b508      	push	{r3, lr}
 800859e:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <Reboot::Run()+0x18>)
 80085a0:	6818      	ldr	r0, [r3, #0]
 80085a2:	f001 f8fb 	bl	800979c <E131Bridge::Stop()>
 80085a6:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <Reboot::Run()+0x1c>)
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085ae:	f004 bb05 	b.w	800cbbc <WS28xx::Blackout()>
 80085b2:	bf00      	nop
 80085b4:	20001900 	andcs	r1, r0, r0, lsl #18
 80085b8:	20001944 	andcs	r1, r0, r4, asr #18

080085bc <Reboot::~Reboot()>:
 80085bc:	b510      	push	{r4, lr}
 80085be:	4604      	mov	r4, r0
 80085c0:	f009 fcf0 	bl	8011fa4 <operator delete(void*)>
 80085c4:	4620      	mov	r0, r4
 80085c6:	bd10      	pop	{r4, pc}

080085c8 <DisplayHandler::~DisplayHandler()>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	4604      	mov	r4, r0
 80085cc:	f009 fcea 	bl	8011fa4 <operator delete(void*)>
 80085d0:	4620      	mov	r0, r4
 80085d2:	bd10      	pop	{r4, pc}

080085d4 <PixelDmxStartStop::~PixelDmxStartStop()>:
 80085d4:	b510      	push	{r4, lr}
 80085d6:	4604      	mov	r4, r0
 80085d8:	f009 fce4 	bl	8011fa4 <operator delete(void*)>
 80085dc:	4620      	mov	r0, r4
 80085de:	bd10      	pop	{r4, pc}

080085e0 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 80085e0:	b110      	cbz	r0, 80085e8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 80085e2:	6803      	ldr	r3, [r0, #0]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	4718      	bx	r3
 80085e8:	4770      	bx	lr

080085ea <Display::PutChar(int) [clone .isra.0]>:
 80085ea:	b110      	cbz	r0, 80085f2 <Display::PutChar(int) [clone .isra.0]+0x8>
 80085ec:	6803      	ldr	r3, [r0, #0]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	4718      	bx	r3
 80085f2:	4770      	bx	lr

080085f4 <DisplayHandler::Print(unsigned int)>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	7903      	ldrb	r3, [r0, #4]
 80085f8:	b1f3      	cbz	r3, 8008638 <DisplayHandler::Print(unsigned int)+0x44>
 80085fa:	2904      	cmp	r1, #4
 80085fc:	bf98      	it	ls
 80085fe:	4b0f      	ldrls	r3, [pc, #60]	; (800863c <DisplayHandler::Print(unsigned int)+0x48>)
 8008600:	4d0f      	ldr	r5, [pc, #60]	; (8008640 <DisplayHandler::Print(unsigned int)+0x4c>)
 8008602:	bf98      	it	ls
 8008604:	5c5c      	ldrbls	r4, [r3, r1]
 8008606:	682b      	ldr	r3, [r5, #0]
 8008608:	bf88      	it	hi
 800860a:	2455      	movhi	r4, #85	; 0x55
 800860c:	6998      	ldr	r0, [r3, #24]
 800860e:	b178      	cbz	r0, 8008630 <DisplayHandler::Print(unsigned int)+0x3c>
 8008610:	7901      	ldrb	r1, [r0, #4]
 8008612:	3901      	subs	r1, #1
 8008614:	b2c9      	uxtb	r1, r1
 8008616:	b168      	cbz	r0, 8008634 <DisplayHandler::Print(unsigned int)+0x40>
 8008618:	7942      	ldrb	r2, [r0, #5]
 800861a:	3a01      	subs	r2, #1
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	f7ff ffdf 	bl	80085e0 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	4621      	mov	r1, r4
 8008626:	6998      	ldr	r0, [r3, #24]
 8008628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800862c:	f7ff bfdd 	b.w	80085ea <Display::PutChar(int) [clone .isra.0]>
 8008630:	4601      	mov	r1, r0
 8008632:	e7ee      	b.n	8008612 <DisplayHandler::Print(unsigned int)+0x1e>
 8008634:	4602      	mov	r2, r0
 8008636:	e7f0      	b.n	800861a <DisplayHandler::Print(unsigned int)+0x26>
 8008638:	bd38      	pop	{r3, r4, r5, pc}
 800863a:	bf00      	nop
 800863c:	080143b0 	stmdaeq	r1, {r4, r5, r7, r8, r9, lr}
 8008640:	2000a8c4 	andcs	sl, r0, r4, asr #17

08008644 <Display::SetSleep(bool)>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4604      	mov	r4, r0
 8008648:	6980      	ldr	r0, [r0, #24]
 800864a:	460d      	mov	r5, r1
 800864c:	b138      	cbz	r0, 800865e <Display::SetSleep(bool)+0x1a>
 800864e:	6803      	ldr	r3, [r0, #0]
 8008650:	7421      	strb	r1, [r4, #16]
 8008652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008654:	4798      	blx	r3
 8008656:	b915      	cbnz	r5, 800865e <Display::SetSleep(bool)+0x1a>
 8008658:	4b01      	ldr	r3, [pc, #4]	; (8008660 <Display::SetSleep(bool)+0x1c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6063      	str	r3, [r4, #4]
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	2000a9cc 	andcs	sl, r0, ip, asr #19

08008664 <Display::Printf(unsigned char, char const*, ...)>:
 8008664:	b40c      	push	{r2, r3}
 8008666:	b570      	push	{r4, r5, r6, lr}
 8008668:	6984      	ldr	r4, [r0, #24]
 800866a:	4605      	mov	r5, r0
 800866c:	460e      	mov	r6, r1
 800866e:	b08a      	sub	sp, #40	; 0x28
 8008670:	b174      	cbz	r4, 8008690 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8008672:	ab0f      	add	r3, sp, #60	; 0x3c
 8008674:	2120      	movs	r1, #32
 8008676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008678:	a802      	add	r0, sp, #8
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	f000 fe16 	bl	80092ac <vsnprintf>
 8008680:	4604      	mov	r4, r0
 8008682:	69a8      	ldr	r0, [r5, #24]
 8008684:	4631      	mov	r1, r6
 8008686:	6803      	ldr	r3, [r0, #0]
 8008688:	aa02      	add	r2, sp, #8
 800868a:	69dd      	ldr	r5, [r3, #28]
 800868c:	b2a3      	uxth	r3, r4
 800868e:	47a8      	blx	r5
 8008690:	4620      	mov	r0, r4
 8008692:	b00a      	add	sp, #40	; 0x28
 8008694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008698:	b002      	add	sp, #8
 800869a:	4770      	bx	lr

0800869c <Display::TextStatus(char const*)>:
 800869c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a0:	4604      	mov	r4, r0
 80086a2:	6980      	ldr	r0, [r0, #24]
 80086a4:	460d      	mov	r5, r1
 80086a6:	b360      	cbz	r0, 8008702 <Display::TextStatus(char const*)+0x66>
 80086a8:	7947      	ldrb	r7, [r0, #5]
 80086aa:	2100      	movs	r1, #0
 80086ac:	1e7e      	subs	r6, r7, #1
 80086ae:	b2f6      	uxtb	r6, r6
 80086b0:	4632      	mov	r2, r6
 80086b2:	f890 9004 	ldrb.w	r9, [r0, #4]
 80086b6:	f04f 0800 	mov.w	r8, #0
 80086ba:	f7ff ff91 	bl	80085e0 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80086be:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80086c2:	45c1      	cmp	r9, r8
 80086c4:	69a0      	ldr	r0, [r4, #24]
 80086c6:	d816      	bhi.n	80086f6 <Display::TextStatus(char const*)+0x5a>
 80086c8:	4632      	mov	r2, r6
 80086ca:	2100      	movs	r1, #0
 80086cc:	f7ff ff88 	bl	80085e0 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 80086d0:	69a0      	ldr	r0, [r4, #24]
 80086d2:	b1b0      	cbz	r0, 8008702 <Display::TextStatus(char const*)+0x66>
 80086d4:	2300      	movs	r3, #0
 80086d6:	7901      	ldrb	r1, [r0, #4]
 80086d8:	5cea      	ldrb	r2, [r5, r3]
 80086da:	b11a      	cbz	r2, 80086e4 <Display::TextStatus(char const*)+0x48>
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	4299      	cmp	r1, r3
 80086e0:	4613      	mov	r3, r2
 80086e2:	dcf9      	bgt.n	80086d8 <Display::TextStatus(char const*)+0x3c>
 80086e4:	6802      	ldr	r2, [r0, #0]
 80086e6:	4639      	mov	r1, r7
 80086e8:	69d4      	ldr	r4, [r2, #28]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	462a      	mov	r2, r5
 80086ee:	46a4      	mov	ip, r4
 80086f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f4:	4760      	bx	ip
 80086f6:	2120      	movs	r1, #32
 80086f8:	f7ff ff77 	bl	80085ea <Display::PutChar(int) [clone .isra.0]>
 80086fc:	f108 0801 	add.w	r8, r8, #1
 8008700:	e7df      	b.n	80086c2 <Display::TextStatus(char const*)+0x26>
 8008702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008706 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8008706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008708:	4605      	mov	r5, r0
 800870a:	461e      	mov	r6, r3
 800870c:	460f      	mov	r7, r1
 800870e:	4614      	mov	r4, r2
 8008710:	f7ff ffc4 	bl	800869c <Display::TextStatus(char const*)>
 8008714:	7c6b      	ldrb	r3, [r5, #17]
 8008716:	b19b      	cbz	r3, 8008740 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 8008718:	43e2      	mvns	r2, r4
 800871a:	2312      	movs	r3, #18
 800871c:	7a28      	ldrb	r0, [r5, #8]
 800871e:	f88d 3004 	strb.w	r3, [sp, #4]
 8008722:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008726:	f88d 3005 	strb.w	r3, [sp, #5]
 800872a:	f88d 2006 	strb.w	r2, [sp, #6]
 800872e:	f00a fc7b 	bl	8013028 <gd32_i2c_set_address(unsigned char)>
 8008732:	68e8      	ldr	r0, [r5, #12]
 8008734:	f00a fc70 	bl	8013018 <gd32_i2c_set_baudrate(unsigned int)>
 8008738:	2103      	movs	r1, #3
 800873a:	a801      	add	r0, sp, #4
 800873c:	f00a fc7a 	bl	8013034 <gd32_i2c_write(char const*, unsigned int)>
 8008740:	1c73      	adds	r3, r6, #1
 8008742:	d006      	beq.n	8008752 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 8008744:	4639      	mov	r1, r7
 8008746:	4630      	mov	r0, r6
 8008748:	b003      	add	sp, #12
 800874a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800874e:	f009 bac7 	b.w	8011ce0 <console_status>
 8008752:	b003      	add	sp, #12
 8008754:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008758 <display::timeout::gpio_init()>:
 8008758:	b510      	push	{r4, lr}
 800875a:	f240 6003 	movw	r0, #1539	; 0x603
 800875e:	f00a f845 	bl	80127ec <rcu_periph_clock_enable>
 8008762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800876a:	2203      	movs	r2, #3
 800876c:	2148      	movs	r1, #72	; 0x48
 800876e:	4801      	ldr	r0, [pc, #4]	; (8008774 <display::timeout::gpio_init()+0x1c>)
 8008770:	f009 bfa4 	b.w	80126bc <gpio_init>
 8008774:	40010c00 	andmi	r0, r1, r0, lsl #24

08008778 <display::timeout::gpio_renew()>:
 8008778:	4b03      	ldr	r3, [pc, #12]	; (8008788 <display::timeout::gpio_renew()+0x10>)
 800877a:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 800877e:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8008782:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8008786:	4770      	bx	lr
 8008788:	40010000 	andmi	r0, r1, r0

0800878c <main>:
 800878c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008790:	2501      	movs	r5, #1
 8008792:	f6ad 6dc4 	subw	sp, sp, #3780	; 0xec4
 8008796:	a80c      	add	r0, sp, #48	; 0x30
 8008798:	f009 fb56 	bl	8011e48 <Hardware::Hardware()>
 800879c:	a86e      	add	r0, sp, #440	; 0x1b8
 800879e:	f007 f957 	bl	800fa50 <Network::Network()>
 80087a2:	a812      	add	r0, sp, #72	; 0x48
 80087a4:	f009 fafa 	bl	8011d9c <LedBlink::LedBlink()>
 80087a8:	a858      	add	r0, sp, #352	; 0x160
 80087aa:	f008 f95b 	bl	8010a64 <DisplayUdf::DisplayUdf()>
 80087ae:	4ab3      	ldr	r2, [pc, #716]	; (8008a7c <main+0x2f0>)
 80087b0:	4bb3      	ldr	r3, [pc, #716]	; (8008a80 <main+0x2f4>)
 80087b2:	49b4      	ldr	r1, [pc, #720]	; (8008a84 <main+0x2f8>)
 80087b4:	a804      	add	r0, sp, #16
 80087b6:	f009 faab 	bl	8011d10 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 80087ba:	a805      	add	r0, sp, #20
 80087bc:	f006 f86e 	bl	800e89c <FlashRom::FlashRom()>
 80087c0:	4eb1      	ldr	r6, [pc, #708]	; (8008a88 <main+0x2fc>)
 80087c2:	a806      	add	r0, sp, #24
 80087c4:	f005 fd46 	bl	800e254 <SpiFlashStore::SpiFlashStore()>
 80087c8:	49b0      	ldr	r1, [pc, #704]	; (8008a8c <main+0x300>)
 80087ca:	a804      	add	r0, sp, #16
 80087cc:	f009 fad8 	bl	8011d80 <FirmwareVersion::Print(char const*)>
 80087d0:	2004      	movs	r0, #4
 80087d2:	6135      	str	r5, [r6, #16]
 80087d4:	f009 fbea 	bl	8011fac <operator new(unsigned int)>
 80087d8:	4bad      	ldr	r3, [pc, #692]	; (8008a90 <main+0x304>)
 80087da:	900c      	str	r0, [sp, #48]	; 0x30
 80087dc:	6003      	str	r3, [r0, #0]
 80087de:	2008      	movs	r0, #8
 80087e0:	f009 fbe4 	bl	8011fac <operator new(unsigned int)>
 80087e4:	4bab      	ldr	r3, [pc, #684]	; (8008a94 <main+0x308>)
 80087e6:	2400      	movs	r4, #0
 80087e8:	6003      	str	r3, [r0, #0]
 80087ea:	4bab      	ldr	r3, [pc, #684]	; (8008a98 <main+0x30c>)
 80087ec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	49aa      	ldr	r1, [pc, #680]	; (8008a9c <main+0x310>)
 80087f4:	3b00      	subs	r3, #0
 80087f6:	bf18      	it	ne
 80087f8:	2301      	movne	r3, #1
 80087fa:	9014      	str	r0, [sp, #80]	; 0x50
 80087fc:	7103      	strb	r3, [r0, #4]
 80087fe:	2303      	movs	r3, #3
 8008800:	a858      	add	r0, sp, #352	; 0x160
 8008802:	f7ff ff80 	bl	8008706 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008806:	a80e      	add	r0, sp, #56	; 0x38
 8008808:	f005 ff2a 	bl	800e660 <StoreNetwork::StoreNetwork()>
 800880c:	ab0f      	add	r3, sp, #60	; 0x3c
 800880e:	a90e      	add	r1, sp, #56	; 0x38
 8008810:	a86e      	add	r0, sp, #440	; 0x1b8
 8008812:	939b      	str	r3, [sp, #620]	; 0x26c
 8008814:	f007 f974 	bl	800fb00 <Network::Init(NetworkParamsStore*)>
 8008818:	a86e      	add	r0, sp, #440	; 0x1b8
 800881a:	f007 faa5 	bl	800fd68 <Network::Print()>
 800881e:	2303      	movs	r3, #3
 8008820:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008824:	499e      	ldr	r1, [pc, #632]	; (8008aa0 <main+0x314>)
 8008826:	a858      	add	r0, sp, #352	; 0x160
 8008828:	f7ff ff6d 	bl	8008706 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800882c:	a807      	add	r0, sp, #28
 800882e:	f006 fd51 	bl	800f2d4 <MDNS::MDNS()>
 8008832:	a807      	add	r0, sp, #28
 8008834:	f006 fe0e 	bl	800f454 <MDNS::Start()>
 8008838:	f642 1305 	movw	r3, #10501	; 0x2905
 800883c:	4621      	mov	r1, r4
 800883e:	4a99      	ldr	r2, [pc, #612]	; (8008aa4 <main+0x318>)
 8008840:	e9cd 4400 	strd	r4, r4, [sp]
 8008844:	a807      	add	r0, sp, #28
 8008846:	f006 ff6f 	bl	800f728 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 800884a:	4b97      	ldr	r3, [pc, #604]	; (8008aa8 <main+0x31c>)
 800884c:	4621      	mov	r1, r4
 800884e:	4a97      	ldr	r2, [pc, #604]	; (8008aac <main+0x320>)
 8008850:	e9cd 5300 	strd	r5, r3, [sp]
 8008854:	a807      	add	r0, sp, #28
 8008856:	2350      	movs	r3, #80	; 0x50
 8008858:	f006 ff66 	bl	800f728 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 800885c:	a807      	add	r0, sp, #28
 800885e:	f007 f8a9 	bl	800f9b4 <MDNS::Print()>
 8008862:	2303      	movs	r3, #3
 8008864:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 8008868:	4991      	ldr	r1, [pc, #580]	; (8008ab0 <main+0x324>)
 800886a:	a858      	add	r0, sp, #352	; 0x160
 800886c:	f7ff ff4b 	bl	8008706 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008870:	a809      	add	r0, sp, #36	; 0x24
 8008872:	f005 fe49 	bl	800e508 <StoreE131::StoreE131()>
 8008876:	a909      	add	r1, sp, #36	; 0x24
 8008878:	a820      	add	r0, sp, #128	; 0x80
 800887a:	f001 fee3 	bl	800a644 <E131Params::E131Params(E131ParamsStore*)>
 800887e:	f50d 6007 	add.w	r0, sp, #2160	; 0x870
 8008882:	f000 ffdb 	bl	800983c <E131Bridge::E131Bridge()>
 8008886:	a820      	add	r0, sp, #128	; 0x80
 8008888:	f001 fefc 	bl	800a684 <E131Params::Load()>
 800888c:	b138      	cbz	r0, 800889e <main+0x112>
 800888e:	a820      	add	r0, sp, #128	; 0x80
 8008890:	f50d 6107 	add.w	r1, sp, #2160	; 0x870
 8008894:	f002 f937 	bl	800ab06 <E131Params::Set(E131Bridge*)>
 8008898:	a820      	add	r0, sp, #128	; 0x80
 800889a:	f002 f96d 	bl	800ab78 <E131Params::Dump()>
 800889e:	4d85      	ldr	r5, [pc, #532]	; (8008ab4 <main+0x328>)
 80088a0:	ac18      	add	r4, sp, #96	; 0x60
 80088a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80088aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80088ae:	a810      	add	r0, sp, #64	; 0x40
 80088b0:	f005 ffe8 	bl	800e884 <StoreWS28xxDmx::StoreWS28xxDmx()>
 80088b4:	a910      	add	r1, sp, #64	; 0x40
 80088b6:	a83c      	add	r0, sp, #240	; 0xf0
 80088b8:	f002 fbac 	bl	800b014 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 80088bc:	a83c      	add	r0, sp, #240	; 0xf0
 80088be:	f002 fbd1 	bl	800b064 <WS28xxDmxParams::Load()>
 80088c2:	b130      	cbz	r0, 80088d2 <main+0x146>
 80088c4:	a83c      	add	r0, sp, #240	; 0xf0
 80088c6:	a918      	add	r1, sp, #96	; 0x60
 80088c8:	f002 fe51 	bl	800b56e <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 80088cc:	a83c      	add	r0, sp, #240	; 0xf0
 80088ce:	f002 fe84 	bl	800b5da <WS28xxDmxParams::Dump()>
 80088d2:	a918      	add	r1, sp, #96	; 0x60
 80088d4:	a847      	add	r0, sp, #284	; 0x11c
 80088d6:	f002 faa3 	bl	800ae20 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 80088da:	2004      	movs	r0, #4
 80088dc:	f009 fb66 	bl	8011fac <operator new(unsigned int)>
 80088e0:	4b75      	ldr	r3, [pc, #468]	; (8008ab8 <main+0x32c>)
 80088e2:	4604      	mov	r4, r0
 80088e4:	6003      	str	r3, [r0, #0]
 80088e6:	2203      	movs	r2, #3
 80088e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ec:	2110      	movs	r1, #16
 80088ee:	4873      	ldr	r0, [pc, #460]	; (8008abc <main+0x330>)
 80088f0:	f009 fee4 	bl	80126bc <gpio_init>
 80088f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088f8:	4b71      	ldr	r3, [pc, #452]	; (8008ac0 <main+0x334>)
 80088fa:	f8bd 810a 	ldrh.w	r8, [sp, #266]	; 0x10a
 80088fe:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8008902:	9456      	str	r4, [sp, #344]	; 0x158
 8008904:	2400      	movs	r4, #0
 8008906:	9d3d      	ldr	r5, [sp, #244]	; 0xf4
 8008908:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800890a:	f405 5580 	and.w	r5, r5, #4096	; 0x1000
 800890e:	42bc      	cmp	r4, r7
 8008910:	f040 811d 	bne.w	8008b4e <main+0x3c2>
 8008914:	f89d 511a 	ldrb.w	r5, [sp, #282]	; 0x11a
 8008918:	2101      	movs	r1, #1
 800891a:	a808      	add	r0, sp, #32
 800891c:	f002 ff70 	bl	800b800 <PixelPatterns::PixelPatterns(unsigned int)>
 8008920:	4b68      	ldr	r3, [pc, #416]	; (8008ac4 <main+0x338>)
 8008922:	2d05      	cmp	r5, #5
 8008924:	601d      	str	r5, [r3, #0]
 8008926:	f340 816b 	ble.w	8008c00 <main+0x474>
 800892a:	4b66      	ldr	r3, [pc, #408]	; (8008ac4 <main+0x338>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	f040 815e 	bne.w	8008bf0 <main+0x464>
 8008934:	ab47      	add	r3, sp, #284	; 0x11c
 8008936:	f50d 6007 	add.w	r0, sp, #2160	; 0x870
 800893a:	f8cd 3874 	str.w	r3, [sp, #2164]	; 0x874
 800893e:	f001 fdb7 	bl	800a4b0 <E131Bridge::Print()>
 8008942:	a847      	add	r0, sp, #284	; 0x11c
 8008944:	f002 fe4a 	bl	800b5dc <WS28xxDmx::Print()>
 8008948:	495f      	ldr	r1, [pc, #380]	; (8008ac8 <main+0x33c>)
 800894a:	a858      	add	r0, sp, #352	; 0x160
 800894c:	f008 f8a0 	bl	8010a90 <DisplayUdf::SetTitle(char const*, ...)>
 8008950:	2202      	movs	r2, #2
 8008952:	a858      	add	r0, sp, #352	; 0x160
 8008954:	4611      	mov	r1, r2
 8008956:	f008 f9f1 	bl	8010d3c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800895a:	2207      	movs	r2, #7
 800895c:	2103      	movs	r1, #3
 800895e:	a858      	add	r0, sp, #352	; 0x160
 8008960:	f008 f9ec 	bl	8010d3c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008964:	2203      	movs	r2, #3
 8008966:	2104      	movs	r1, #4
 8008968:	a858      	add	r0, sp, #352	; 0x160
 800896a:	f008 f9e7 	bl	8010d3c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800896e:	2208      	movs	r2, #8
 8008970:	2105      	movs	r1, #5
 8008972:	a858      	add	r0, sp, #352	; 0x160
 8008974:	f008 f9e2 	bl	8010d3c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008978:	2201      	movs	r2, #1
 800897a:	2106      	movs	r1, #6
 800897c:	a858      	add	r0, sp, #352	; 0x160
 800897e:	f008 f9dd 	bl	8010d3c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008982:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008984:	f003 f99e 	bl	800bcc4 <PixelType::GetType(pixel::Type)>
 8008988:	4604      	mov	r4, r0
 800898a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800898c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800898e:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8008992:	f003 f9ef 	bl	800bd74 <PixelType::GetMap(pixel::Map)>
 8008996:	4623      	mov	r3, r4
 8008998:	2107      	movs	r1, #7
 800899a:	4a4c      	ldr	r2, [pc, #304]	; (8008acc <main+0x340>)
 800899c:	e9cd 8001 	strd	r8, r0, [sp, #4]
 80089a0:	9700      	str	r7, [sp, #0]
 80089a2:	a858      	add	r0, sp, #352	; 0x160
 80089a4:	f7ff fe5e 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 80089a8:	a80a      	add	r0, sp, #40	; 0x28
 80089aa:	f005 fd79 	bl	800e4a0 <StoreDisplayUdf::StoreDisplayUdf()>
 80089ae:	a90a      	add	r1, sp, #40	; 0x28
 80089b0:	a832      	add	r0, sp, #200	; 0xc8
 80089b2:	f008 fa05 	bl	8010dc0 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80089b6:	a832      	add	r0, sp, #200	; 0xc8
 80089b8:	f008 fa0f 	bl	8010dda <DisplayUdfParams::Load()>
 80089bc:	b130      	cbz	r0, 80089cc <main+0x240>
 80089be:	a832      	add	r0, sp, #200	; 0xc8
 80089c0:	a958      	add	r1, sp, #352	; 0x160
 80089c2:	f008 fb42 	bl	801104a <DisplayUdfParams::Set(DisplayUdf*)>
 80089c6:	a832      	add	r0, sp, #200	; 0xc8
 80089c8:	f008 fb72 	bl	80110b0 <DisplayUdfParams::Dump()>
 80089cc:	f50d 6107 	add.w	r1, sp, #2160	; 0x870
 80089d0:	a858      	add	r0, sp, #352	; 0x160
 80089d2:	f008 fb6f 	bl	80110b4 <DisplayUdf::Show(E131Bridge*)>
 80089d6:	b17d      	cbz	r5, 80089f8 <main+0x26c>
 80089d8:	985e      	ldr	r0, [sp, #376]	; 0x178
 80089da:	b118      	cbz	r0, 80089e4 <main+0x258>
 80089dc:	6803      	ldr	r3, [r0, #0]
 80089de:	2106      	movs	r1, #6
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	4798      	blx	r3
 80089e4:	4628      	mov	r0, r5
 80089e6:	f002 ff2b 	bl	800b840 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80089ea:	2106      	movs	r1, #6
 80089ec:	4603      	mov	r3, r0
 80089ee:	4a38      	ldr	r2, [pc, #224]	; (8008ad0 <main+0x344>)
 80089f0:	9500      	str	r5, [sp, #0]
 80089f2:	a858      	add	r0, sp, #352	; 0x160
 80089f4:	f7ff fe36 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 80089f8:	2203      	movs	r2, #3
 80089fa:	2101      	movs	r1, #1
 80089fc:	f89d 3d7b 	ldrb.w	r3, [sp, #3451]	; 0xd7b
 8008a00:	a8a0      	add	r0, sp, #640	; 0x280
 8008a02:	f004 fa69 	bl	800ced8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008a06:	a80b      	add	r0, sp, #44	; 0x2c
 8008a08:	f005 fe60 	bl	800e6cc <StoreRemoteConfig::StoreRemoteConfig()>
 8008a0c:	a90b      	add	r1, sp, #44	; 0x2c
 8008a0e:	a829      	add	r0, sp, #164	; 0xa4
 8008a10:	f004 fd62 	bl	800d4d8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008a14:	a829      	add	r0, sp, #164	; 0xa4
 8008a16:	f004 fd69 	bl	800d4ec <RemoteConfigParams::Load()>
 8008a1a:	b130      	cbz	r0, 8008a2a <main+0x29e>
 8008a1c:	a829      	add	r0, sp, #164	; 0xa4
 8008a1e:	a9a0      	add	r1, sp, #640	; 0x280
 8008a20:	f004 fe8b 	bl	800d73a <RemoteConfigParams::Set(RemoteConfig*)>
 8008a24:	a829      	add	r0, sp, #164	; 0xa4
 8008a26:	f004 feac 	bl	800d782 <RemoteConfigParams::Dump()>
 8008a2a:	a806      	add	r0, sp, #24
 8008a2c:	f005 fcb4 	bl	800e398 <SpiFlashStore::Flash()>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d1fa      	bne.n	8008a2a <main+0x29e>
 8008a34:	2303      	movs	r3, #3
 8008a36:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008a3a:	4926      	ldr	r1, [pc, #152]	; (8008ad4 <main+0x348>)
 8008a3c:	a858      	add	r0, sp, #352	; 0x160
 8008a3e:	f7ff fe62 	bl	8008706 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008a42:	f50d 6007 	add.w	r0, sp, #2160	; 0x870
 8008a46:	f000 fe6d 	bl	8009724 <E131Bridge::Start()>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	f248 0280 	movw	r2, #32896	; 0x8080
 8008a50:	4921      	ldr	r1, [pc, #132]	; (8008ad8 <main+0x34c>)
 8008a52:	a858      	add	r0, sp, #352	; 0x160
 8008a54:	f7ff fe57 	bl	8008706 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008a58:	2102      	movs	r1, #2
 8008a5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008a5e:	f009 fe03 	bl	8012668 <fwdgt_config>
 8008a62:	2801      	cmp	r0, #1
 8008a64:	bf0c      	ite	eq
 8008a66:	2301      	moveq	r3, #1
 8008a68:	2300      	movne	r3, #0
 8008a6a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8008a6e:	d101      	bne.n	8008a74 <main+0x2e8>
 8008a70:	f009 fdea 	bl	8012648 <fwdgt_enable>
 8008a74:	2701      	movs	r7, #1
 8008a76:	4c19      	ldr	r4, [pc, #100]	; (8008adc <main+0x350>)
 8008a78:	4d12      	ldr	r5, [pc, #72]	; (8008ac4 <main+0x338>)
 8008a7a:	e031      	b.n	8008ae0 <main+0x354>
 8008a7c:	080142e1 	stmdaeq	r1, {r0, r5, r6, r7, r9, lr}
 8008a80:	080142d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, lr}
 8008a84:	080143b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, lr}
 8008a88:	40011000 	andmi	r1, r1, r0
 8008a8c:	080142ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9, lr}
 8008a90:	080143a4 	stmdaeq	r1, {r2, r5, r7, r8, r9, lr}
 8008a94:	08014378 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, lr}
 8008a98:	2000a8c4 	andcs	sl, r0, r4, asr #17
 8008a9c:	08015ab9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, fp, ip, lr}
 8008aa0:	08015aa8 	stmdaeq	r1, {r3, r5, r7, r9, fp, ip, lr}
 8008aa4:	08014324 	stmdaeq	r1, {r2, r5, r8, r9, lr}
 8008aa8:	08014334 	stmdaeq	r1, {r2, r4, r5, r8, r9, lr}
 8008aac:	0801432d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, lr}
 8008ab0:	080144b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, sl, lr}
 8008ab4:	080142a0 	stmdaeq	r1, {r5, r7, r9, lr}
 8008ab8:	0801438c 	stmdaeq	r1, {r2, r3, r7, r8, r9, lr}
 8008abc:	40010c00 	andmi	r0, r1, r0, lsl #24
 8008ac0:	40010000 	andmi	r0, r1, r0
 8008ac4:	2000193c 	andcs	r1, r0, ip, lsr r9
 8008ac8:	0801434a 	stmdaeq	r1, {r1, r3, r6, r8, r9, lr}
 8008acc:	0801435a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, lr}
 8008ad0:	08014367 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, lr}
 8008ad4:	080144a1 	stmdaeq	r1, {r0, r5, r7, sl, lr}
 8008ad8:	080144cc 	stmdaeq	r1, {r2, r3, r6, r7, sl, lr}
 8008adc:	2000a9cc 	andcs	sl, r0, ip, asr #19
 8008ae0:	f009 fdba 	bl	8012658 <fwdgt_counter_reload>
 8008ae4:	f7fe fd1c 	bl	8007520 <net_handle>
 8008ae8:	f50d 6007 	add.w	r0, sp, #2160	; 0x870
 8008aec:	f001 fa88 	bl	800a000 <E131Bridge::Run()>
 8008af0:	a8a0      	add	r0, sp, #640	; 0x280
 8008af2:	f004 fba1 	bl	800d238 <RemoteConfig::Run()>
 8008af6:	a806      	add	r0, sp, #24
 8008af8:	f005 fc4e 	bl	800e398 <SpiFlashStore::Flash()>
 8008afc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008afe:	b172      	cbz	r2, 8008b1e <main+0x392>
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008b04:	1a5b      	subs	r3, r3, r1
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d809      	bhi.n	8008b1e <main+0x392>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8008b0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	f083 0201 	eor.w	r2, r3, #1
 8008b16:	9216      	str	r2, [sp, #88]	; 0x58
 8008b18:	bf14      	ite	ne
 8008b1a:	6137      	strne	r7, [r6, #16]
 8008b1c:	6173      	streq	r3, [r6, #20]
 8008b1e:	9a5d      	ldr	r2, [sp, #372]	; 0x174
 8008b20:	b162      	cbz	r2, 8008b3c <main+0x3b0>
 8008b22:	f89d 3170 	ldrb.w	r3, [sp, #368]	; 0x170
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d164      	bne.n	8008bf4 <main+0x468>
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	9959      	ldr	r1, [sp, #356]	; 0x164
 8008b2e:	1a5b      	subs	r3, r3, r1
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d203      	bcs.n	8008b3c <main+0x3b0>
 8008b34:	2101      	movs	r1, #1
 8008b36:	a858      	add	r0, sp, #352	; 0x160
 8008b38:	f7ff fd84 	bl	8008644 <Display::SetSleep(bool)>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b113      	cbz	r3, 8008b46 <main+0x3ba>
 8008b40:	a808      	add	r0, sp, #32
 8008b42:	f003 f897 	bl	800bc74 <PixelPatterns::Run()>
 8008b46:	a807      	add	r0, sp, #28
 8008b48:	f006 ff10 	bl	800f96c <MDNS::Run()>
 8008b4c:	e7c8      	b.n	8008ae0 <main+0x354>
 8008b4e:	b145      	cbz	r5, 8008b62 <main+0x3d6>
 8008b50:	eb08 0304 	add.w	r3, r8, r4
 8008b54:	2201      	movs	r2, #1
 8008b56:	4621      	mov	r1, r4
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f50d 6007 	add.w	r0, sp, #2160	; 0x870
 8008b5e:	f000 ff0b 	bl	8009978 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008b62:	3401      	adds	r4, #1
 8008b64:	e6d3      	b.n	800890e <main+0x182>
 8008b66:	2300      	movs	r3, #0
 8008b68:	2264      	movs	r2, #100	; 0x64
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	a808      	add	r0, sp, #32
 8008b6e:	f002 fe73 	bl	800b858 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8008b72:	e6da      	b.n	800892a <main+0x19e>
 8008b74:	2200      	movs	r2, #0
 8008b76:	2364      	movs	r3, #100	; 0x64
 8008b78:	4611      	mov	r1, r2
 8008b7a:	e9cd 3200 	strd	r3, r2, [sp]
 8008b7e:	a808      	add	r0, sp, #32
 8008b80:	4b28      	ldr	r3, [pc, #160]	; (8008c24 <main+0x498>)
 8008b82:	f002 fe7d 	bl	800b880 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008b86:	e6d0      	b.n	800892a <main+0x19e>
 8008b88:	2100      	movs	r1, #0
 8008b8a:	2364      	movs	r3, #100	; 0x64
 8008b8c:	4a25      	ldr	r2, [pc, #148]	; (8008c24 <main+0x498>)
 8008b8e:	9100      	str	r1, [sp, #0]
 8008b90:	a808      	add	r0, sp, #32
 8008b92:	f002 fe91 	bl	800b8b8 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008b96:	e6c8      	b.n	800892a <main+0x19e>
 8008b98:	2364      	movs	r3, #100	; 0x64
 8008b9a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	a808      	add	r0, sp, #32
 8008ba2:	f002 fea3 	bl	800b8ec <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8008ba6:	e6c0      	b.n	800892a <main+0x19e>
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2364      	movs	r3, #100	; 0x64
 8008bac:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008bb0:	230a      	movs	r3, #10
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	a808      	add	r0, sp, #32
 8008bb8:	4b1a      	ldr	r3, [pc, #104]	; (8008c24 <main+0x498>)
 8008bba:	f002 fec9 	bl	800b950 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008bbe:	e6b4      	b.n	800892a <main+0x19e>
 8008bc0:	2400      	movs	r4, #0
 8008bc2:	46a1      	mov	r9, r4
 8008bc4:	4b18      	ldr	r3, [pc, #96]	; (8008c28 <main+0x49c>)
 8008bc6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8008c2c <main+0x4a0>
 8008bca:	4f19      	ldr	r7, [pc, #100]	; (8008c30 <main+0x4a4>)
 8008bcc:	61dc      	str	r4, [r3, #28]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	f8d8 0000 	ldr.w	r0, [r8]
 8008bd4:	429c      	cmp	r4, r3
 8008bd6:	d302      	bcc.n	8008bde <main+0x452>
 8008bd8:	f003 ffd4 	bl	800cb84 <WS28xx::Update()>
 8008bdc:	e6a5      	b.n	800892a <main+0x19e>
 8008bde:	2300      	movs	r3, #0
 8008be0:	4621      	mov	r1, r4
 8008be2:	461a      	mov	r2, r3
 8008be4:	f8cd 9000 	str.w	r9, [sp]
 8008be8:	f003 f98c 	bl	800bf04 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 8008bec:	3401      	adds	r4, #1
 8008bee:	e7ee      	b.n	8008bce <main+0x442>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	e6a0      	b.n	8008936 <main+0x1aa>
 8008bf4:	f7ff fdc0 	bl	8008778 <display::timeout::gpio_renew()>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d09f      	beq.n	8008b3c <main+0x3b0>
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	e79a      	b.n	8008b36 <main+0x3aa>
 8008c00:	2d05      	cmp	r5, #5
 8008c02:	f63f ae92 	bhi.w	800892a <main+0x19e>
 8008c06:	a301      	add	r3, pc, #4	; (adr r3, 8008c0c <main+0x480>)
 8008c08:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8008c0c:	08008bc1 	stmdaeq	r0, {r0, r6, r7, r8, r9, fp, pc}
 8008c10:	08008b67 	stmdaeq	r0, {r0, r1, r2, r5, r6, r8, r9, fp, pc}
 8008c14:	08008b75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, fp, pc}
 8008c18:	08008b89 	stmdaeq	r0, {r0, r3, r7, r8, r9, fp, pc}
 8008c1c:	08008b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp, pc}
 8008c20:	08008ba9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, fp, pc}
 8008c24:	00646464 	rsbeq	r6, r4, r4, ror #8
 8008c28:	2000190c 	andcs	r1, r0, ip, lsl #18
 8008c2c:	20001938 	andcs	r1, r0, r8, lsr r9
 8008c30:	20001934 	andcs	r1, r0, r4, lsr r9

08008c34 <_itostr>:
 8008c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c36:	0fc7      	lsrs	r7, r0, #31
 8008c38:	b091      	sub	sp, #68	; 0x44
 8008c3a:	bf18      	it	ne
 8008c3c:	4240      	negne	r0, r0
 8008c3e:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 8008c42:	b9c8      	cbnz	r0, 8008c78 <_itostr+0x44>
 8008c44:	2330      	movs	r3, #48	; 0x30
 8008c46:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008c4a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008c4e:	b132      	cbz	r2, 8008c5e <_itostr+0x2a>
 8008c50:	4668      	mov	r0, sp
 8008c52:	2530      	movs	r5, #48	; 0x30
 8008c54:	1ae6      	subs	r6, r4, r3
 8008c56:	4296      	cmp	r6, r2
 8008c58:	da01      	bge.n	8008c5e <_itostr+0x2a>
 8008c5a:	4283      	cmp	r3, r0
 8008c5c:	d81c      	bhi.n	8008c98 <_itostr+0x64>
 8008c5e:	b117      	cbz	r7, 8008c66 <_itostr+0x32>
 8008c60:	222d      	movs	r2, #45	; 0x2d
 8008c62:	f803 2901 	strb.w	r2, [r3], #-1
 8008c66:	3301      	adds	r3, #1
 8008c68:	1ae0      	subs	r0, r4, r3
 8008c6a:	3901      	subs	r1, #1
 8008c6c:	aa10      	add	r2, sp, #64	; 0x40
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d315      	bcc.n	8008c9e <_itostr+0x6a>
 8008c72:	3001      	adds	r0, #1
 8008c74:	b011      	add	sp, #68	; 0x44
 8008c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c78:	4623      	mov	r3, r4
 8008c7a:	250a      	movs	r5, #10
 8008c7c:	46ec      	mov	ip, sp
 8008c7e:	fb90 f6f5 	sdiv	r6, r0, r5
 8008c82:	fb05 0016 	mls	r0, r5, r6, r0
 8008c86:	3030      	adds	r0, #48	; 0x30
 8008c88:	f803 0901 	strb.w	r0, [r3], #-1
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	2e00      	cmp	r6, #0
 8008c90:	d0dd      	beq.n	8008c4e <_itostr+0x1a>
 8008c92:	4563      	cmp	r3, ip
 8008c94:	d1f3      	bne.n	8008c7e <_itostr+0x4a>
 8008c96:	e7da      	b.n	8008c4e <_itostr+0x1a>
 8008c98:	f803 5901 	strb.w	r5, [r3], #-1
 8008c9c:	e7da      	b.n	8008c54 <_itostr+0x20>
 8008c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ca2:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008ca6:	e7e1      	b.n	8008c6c <_itostr+0x38>

08008ca8 <_xputch>:
 8008ca8:	4603      	mov	r3, r0
 8008caa:	b410      	push	{r4}
 8008cac:	4c08      	ldr	r4, [pc, #32]	; (8008cd0 <_xputch+0x28>)
 8008cae:	68da      	ldr	r2, [r3, #12]
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	6821      	ldr	r1, [r4, #0]
 8008cb4:	3201      	adds	r2, #1
 8008cb6:	60da      	str	r2, [r3, #12]
 8008cb8:	b139      	cbz	r1, 8008cca <_xputch+0x22>
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	da02      	bge.n	8008cc6 <_xputch+0x1e>
 8008cc0:	1c4b      	adds	r3, r1, #1
 8008cc2:	6023      	str	r3, [r4, #0]
 8008cc4:	7008      	strb	r0, [r1, #0]
 8008cc6:	bc10      	pop	{r4}
 8008cc8:	4770      	bx	lr
 8008cca:	bc10      	pop	{r4}
 8008ccc:	f008 bfd0 	b.w	8011c70 <console_putc>
 8008cd0:	200000e8 	andcs	r0, r0, r8, ror #1

08008cd4 <_format_int>:
 8008cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cd8:	4698      	mov	r8, r3
 8008cda:	b091      	sub	sp, #68	; 0x44
 8008cdc:	ea52 0308 	orrs.w	r3, r2, r8
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	4617      	mov	r7, r2
 8008ce4:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8008ce8:	d133      	bne.n	8008d52 <_format_int+0x7e>
 8008cea:	2330      	movs	r3, #48	; 0x30
 8008cec:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8008cf0:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008cf4:	6833      	ldr	r3, [r6, #0]
 8008cf6:	07d8      	lsls	r0, r3, #31
 8008cf8:	d507      	bpl.n	8008d0a <_format_int+0x36>
 8008cfa:	466a      	mov	r2, sp
 8008cfc:	2030      	movs	r0, #48	; 0x30
 8008cfe:	6871      	ldr	r1, [r6, #4]
 8008d00:	1b2f      	subs	r7, r5, r4
 8008d02:	428f      	cmp	r7, r1
 8008d04:	da01      	bge.n	8008d0a <_format_int+0x36>
 8008d06:	4294      	cmp	r4, r2
 8008d08:	d839      	bhi.n	8008d7e <_format_int+0xaa>
 8008d0a:	0699      	lsls	r1, r3, #26
 8008d0c:	d507      	bpl.n	8008d1e <_format_int+0x4a>
 8008d0e:	466a      	mov	r2, sp
 8008d10:	2030      	movs	r0, #48	; 0x30
 8008d12:	68b1      	ldr	r1, [r6, #8]
 8008d14:	1b2f      	subs	r7, r5, r4
 8008d16:	428f      	cmp	r7, r1
 8008d18:	da01      	bge.n	8008d1e <_format_int+0x4a>
 8008d1a:	4294      	cmp	r4, r2
 8008d1c:	d832      	bhi.n	8008d84 <_format_int+0xb0>
 8008d1e:	071a      	lsls	r2, r3, #28
 8008d20:	bf44      	itt	mi
 8008d22:	222d      	movmi	r2, #45	; 0x2d
 8008d24:	f804 2901 	strbmi.w	r2, [r4], #-1
 8008d28:	065b      	lsls	r3, r3, #25
 8008d2a:	d407      	bmi.n	8008d3c <_format_int+0x68>
 8008d2c:	466b      	mov	r3, sp
 8008d2e:	2120      	movs	r1, #32
 8008d30:	68b2      	ldr	r2, [r6, #8]
 8008d32:	1b28      	subs	r0, r5, r4
 8008d34:	4290      	cmp	r0, r2
 8008d36:	da01      	bge.n	8008d3c <_format_int+0x68>
 8008d38:	429c      	cmp	r4, r3
 8008d3a:	d826      	bhi.n	8008d8a <_format_int+0xb6>
 8008d3c:	1b2d      	subs	r5, r5, r4
 8008d3e:	3401      	adds	r4, #1
 8008d40:	ab10      	add	r3, sp, #64	; 0x40
 8008d42:	429c      	cmp	r4, r3
 8008d44:	d324      	bcc.n	8008d90 <_format_int+0xbc>
 8008d46:	68b3      	ldr	r3, [r6, #8]
 8008d48:	42ab      	cmp	r3, r5
 8008d4a:	dc27      	bgt.n	8008d9c <_format_int+0xc8>
 8008d4c:	b011      	add	sp, #68	; 0x44
 8008d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d52:	462c      	mov	r4, r5
 8008d54:	46e9      	mov	r9, sp
 8008d56:	4638      	mov	r0, r7
 8008d58:	4641      	mov	r1, r8
 8008d5a:	220a      	movs	r2, #10
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f7ff f8bb 	bl	8007ed8 <__aeabi_uldivmod>
 8008d62:	3230      	adds	r2, #48	; 0x30
 8008d64:	f804 2901 	strb.w	r2, [r4], #-1
 8008d68:	463a      	mov	r2, r7
 8008d6a:	4643      	mov	r3, r8
 8008d6c:	2a0a      	cmp	r2, #10
 8008d6e:	f173 0300 	sbcs.w	r3, r3, #0
 8008d72:	4607      	mov	r7, r0
 8008d74:	4688      	mov	r8, r1
 8008d76:	d3bd      	bcc.n	8008cf4 <_format_int+0x20>
 8008d78:	454c      	cmp	r4, r9
 8008d7a:	d1ec      	bne.n	8008d56 <_format_int+0x82>
 8008d7c:	e7ba      	b.n	8008cf4 <_format_int+0x20>
 8008d7e:	f804 0901 	strb.w	r0, [r4], #-1
 8008d82:	e7bd      	b.n	8008d00 <_format_int+0x2c>
 8008d84:	f804 0901 	strb.w	r0, [r4], #-1
 8008d88:	e7c4      	b.n	8008d14 <_format_int+0x40>
 8008d8a:	f804 1901 	strb.w	r1, [r4], #-1
 8008d8e:	e7d0      	b.n	8008d32 <_format_int+0x5e>
 8008d90:	4630      	mov	r0, r6
 8008d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d96:	f7ff ff87 	bl	8008ca8 <_xputch>
 8008d9a:	e7d1      	b.n	8008d40 <_format_int+0x6c>
 8008d9c:	2120      	movs	r1, #32
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f7ff ff82 	bl	8008ca8 <_xputch>
 8008da4:	3501      	adds	r5, #1
 8008da6:	e7ce      	b.n	8008d46 <_format_int+0x72>

08008da8 <_format_hex>:
 8008da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008daa:	b091      	sub	sp, #68	; 0x44
 8008dac:	4606      	mov	r6, r0
 8008dae:	6804      	ldr	r4, [r0, #0]
 8008db0:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8008db4:	bb61      	cbnz	r1, 8008e10 <_format_hex+0x68>
 8008db6:	2330      	movs	r3, #48	; 0x30
 8008db8:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008dbc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008dc0:	07e5      	lsls	r5, r4, #31
 8008dc2:	d507      	bpl.n	8008dd4 <_format_hex+0x2c>
 8008dc4:	4669      	mov	r1, sp
 8008dc6:	2530      	movs	r5, #48	; 0x30
 8008dc8:	6870      	ldr	r0, [r6, #4]
 8008dca:	1ad7      	subs	r7, r2, r3
 8008dcc:	4287      	cmp	r7, r0
 8008dce:	da01      	bge.n	8008dd4 <_format_hex+0x2c>
 8008dd0:	428b      	cmp	r3, r1
 8008dd2:	d831      	bhi.n	8008e38 <_format_hex+0x90>
 8008dd4:	06a0      	lsls	r0, r4, #26
 8008dd6:	d507      	bpl.n	8008de8 <_format_hex+0x40>
 8008dd8:	4669      	mov	r1, sp
 8008dda:	2530      	movs	r5, #48	; 0x30
 8008ddc:	68b0      	ldr	r0, [r6, #8]
 8008dde:	1ad7      	subs	r7, r2, r3
 8008de0:	4287      	cmp	r7, r0
 8008de2:	da01      	bge.n	8008de8 <_format_hex+0x40>
 8008de4:	428b      	cmp	r3, r1
 8008de6:	d82a      	bhi.n	8008e3e <_format_hex+0x96>
 8008de8:	0661      	lsls	r1, r4, #25
 8008dea:	d407      	bmi.n	8008dfc <_format_hex+0x54>
 8008dec:	4669      	mov	r1, sp
 8008dee:	2420      	movs	r4, #32
 8008df0:	68b0      	ldr	r0, [r6, #8]
 8008df2:	1ad5      	subs	r5, r2, r3
 8008df4:	4285      	cmp	r5, r0
 8008df6:	da01      	bge.n	8008dfc <_format_hex+0x54>
 8008df8:	428b      	cmp	r3, r1
 8008dfa:	d823      	bhi.n	8008e44 <_format_hex+0x9c>
 8008dfc:	1ad5      	subs	r5, r2, r3
 8008dfe:	1c5c      	adds	r4, r3, #1
 8008e00:	ab10      	add	r3, sp, #64	; 0x40
 8008e02:	429c      	cmp	r4, r3
 8008e04:	d321      	bcc.n	8008e4a <_format_hex+0xa2>
 8008e06:	68b3      	ldr	r3, [r6, #8]
 8008e08:	429d      	cmp	r5, r3
 8008e0a:	db24      	blt.n	8008e56 <_format_hex+0xae>
 8008e0c:	b011      	add	sp, #68	; 0x44
 8008e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e10:	f014 0f02 	tst.w	r4, #2
 8008e14:	bf0c      	ite	eq
 8008e16:	2757      	moveq	r7, #87	; 0x57
 8008e18:	2737      	movne	r7, #55	; 0x37
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	466d      	mov	r5, sp
 8008e1e:	f001 000f 	and.w	r0, r1, #15
 8008e22:	2809      	cmp	r0, #9
 8008e24:	bf94      	ite	ls
 8008e26:	3030      	addls	r0, #48	; 0x30
 8008e28:	19c0      	addhi	r0, r0, r7
 8008e2a:	0909      	lsrs	r1, r1, #4
 8008e2c:	f803 0901 	strb.w	r0, [r3], #-1
 8008e30:	d0c6      	beq.n	8008dc0 <_format_hex+0x18>
 8008e32:	42ab      	cmp	r3, r5
 8008e34:	d1f3      	bne.n	8008e1e <_format_hex+0x76>
 8008e36:	e7c3      	b.n	8008dc0 <_format_hex+0x18>
 8008e38:	f803 5901 	strb.w	r5, [r3], #-1
 8008e3c:	e7c5      	b.n	8008dca <_format_hex+0x22>
 8008e3e:	f803 5901 	strb.w	r5, [r3], #-1
 8008e42:	e7cc      	b.n	8008dde <_format_hex+0x36>
 8008e44:	f803 4901 	strb.w	r4, [r3], #-1
 8008e48:	e7d3      	b.n	8008df2 <_format_hex+0x4a>
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e50:	f7ff ff2a 	bl	8008ca8 <_xputch>
 8008e54:	e7d4      	b.n	8008e00 <_format_hex+0x58>
 8008e56:	2120      	movs	r1, #32
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f7ff ff25 	bl	8008ca8 <_xputch>
 8008e5e:	3501      	adds	r5, #1
 8008e60:	e7d1      	b.n	8008e06 <_format_hex+0x5e>
	...

08008e64 <_vprintf>:
 8008e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	4614      	mov	r4, r2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	f04f 0800 	mov.w	r8, #0
 8008e72:	b099      	sub	sp, #100	; 0x64
 8008e74:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8008e78:	af08      	add	r7, sp, #32
 8008e7a:	7819      	ldrb	r1, [r3, #0]
 8008e7c:	b919      	cbnz	r1, 8008e86 <_vprintf+0x22>
 8008e7e:	9806      	ldr	r0, [sp, #24]
 8008e80:	b019      	add	sp, #100	; 0x64
 8008e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e86:	2925      	cmp	r1, #37	; 0x25
 8008e88:	f103 0601 	add.w	r6, r3, #1
 8008e8c:	d004      	beq.n	8008e98 <_vprintf+0x34>
 8008e8e:	a803      	add	r0, sp, #12
 8008e90:	f7ff ff0a 	bl	8008ca8 <_xputch>
 8008e94:	4633      	mov	r3, r6
 8008e96:	e7f0      	b.n	8008e7a <_vprintf+0x16>
 8008e98:	2200      	movs	r2, #0
 8008e9a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8008e9e:	9205      	str	r2, [sp, #20]
 8008ea0:	785a      	ldrb	r2, [r3, #1]
 8008ea2:	2a30      	cmp	r2, #48	; 0x30
 8008ea4:	d129      	bne.n	8008efa <_vprintf+0x96>
 8008ea6:	2220      	movs	r2, #32
 8008ea8:	9203      	str	r2, [sp, #12]
 8008eaa:	1c9e      	adds	r6, r3, #2
 8008eac:	2200      	movs	r2, #0
 8008eae:	4635      	mov	r5, r6
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	f04f 0c0a 	mov.w	ip, #10
 8008eb6:	7829      	ldrb	r1, [r5, #0]
 8008eb8:	462e      	mov	r6, r5
 8008eba:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8008ebe:	2809      	cmp	r0, #9
 8008ec0:	f105 0501 	add.w	r5, r5, #1
 8008ec4:	d91d      	bls.n	8008f02 <_vprintf+0x9e>
 8008ec6:	b12a      	cbz	r2, 8008ed4 <_vprintf+0x70>
 8008ec8:	9305      	str	r3, [sp, #20]
 8008eca:	b11b      	cbz	r3, 8008ed4 <_vprintf+0x70>
 8008ecc:	9b03      	ldr	r3, [sp, #12]
 8008ece:	f043 0310 	orr.w	r3, r3, #16
 8008ed2:	9303      	str	r3, [sp, #12]
 8008ed4:	292e      	cmp	r1, #46	; 0x2e
 8008ed6:	d123      	bne.n	8008f20 <_vprintf+0xbc>
 8008ed8:	7873      	ldrb	r3, [r6, #1]
 8008eda:	2b2a      	cmp	r3, #42	; 0x2a
 8008edc:	d015      	beq.n	8008f0a <_vprintf+0xa6>
 8008ede:	2100      	movs	r1, #0
 8008ee0:	250a      	movs	r5, #10
 8008ee2:	460a      	mov	r2, r1
 8008ee4:	1c70      	adds	r0, r6, #1
 8008ee6:	7803      	ldrb	r3, [r0, #0]
 8008ee8:	4606      	mov	r6, r0
 8008eea:	3b30      	subs	r3, #48	; 0x30
 8008eec:	2b09      	cmp	r3, #9
 8008eee:	f100 0001 	add.w	r0, r0, #1
 8008ef2:	d959      	bls.n	8008fa8 <_vprintf+0x144>
 8008ef4:	b181      	cbz	r1, 8008f18 <_vprintf+0xb4>
 8008ef6:	9204      	str	r2, [sp, #16]
 8008ef8:	e00e      	b.n	8008f18 <_vprintf+0xb4>
 8008efa:	2a2d      	cmp	r2, #45	; 0x2d
 8008efc:	d1d6      	bne.n	8008eac <_vprintf+0x48>
 8008efe:	2240      	movs	r2, #64	; 0x40
 8008f00:	e7d2      	b.n	8008ea8 <_vprintf+0x44>
 8008f02:	2201      	movs	r2, #1
 8008f04:	fb0c 0303 	mla	r3, ip, r3, r0
 8008f08:	e7d5      	b.n	8008eb6 <_vprintf+0x52>
 8008f0a:	f854 3b04 	ldr.w	r3, [r4], #4
 8008f0e:	3602      	adds	r6, #2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	bfb8      	it	lt
 8008f14:	425b      	neglt	r3, r3
 8008f16:	9304      	str	r3, [sp, #16]
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	f043 0301 	orr.w	r3, r3, #1
 8008f1e:	9303      	str	r3, [sp, #12]
 8008f20:	7833      	ldrb	r3, [r6, #0]
 8008f22:	2b6c      	cmp	r3, #108	; 0x6c
 8008f24:	bf04      	itt	eq
 8008f26:	9b03      	ldreq	r3, [sp, #12]
 8008f28:	3601      	addeq	r6, #1
 8008f2a:	7831      	ldrb	r1, [r6, #0]
 8008f2c:	bf04      	itt	eq
 8008f2e:	f043 0304 	orreq.w	r3, r3, #4
 8008f32:	9303      	streq	r3, [sp, #12]
 8008f34:	2958      	cmp	r1, #88	; 0x58
 8008f36:	f000 8171 	beq.w	800921c <_vprintf+0x3b8>
 8008f3a:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	2a15      	cmp	r2, #21
 8008f42:	d8a4      	bhi.n	8008e8e <_vprintf+0x2a>
 8008f44:	2b15      	cmp	r3, #21
 8008f46:	d8a2      	bhi.n	8008e8e <_vprintf+0x2a>
 8008f48:	a201      	add	r2, pc, #4	; (adr r2, 8008f50 <_vprintf+0xec>)
 8008f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4e:	bf00      	nop
 8008f50:	08008fb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, fp, pc}
 8008f54:	08008fc3 	stmdaeq	r0, {r0, r1, r6, r7, r8, r9, sl, fp, pc}
 8008f58:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f5c:	08008ff9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f60:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f64:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f68:	08008fc3 	stmdaeq	r0, {r0, r1, r6, r7, r8, r9, sl, fp, pc}
 8008f6c:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f70:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f74:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f78:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f7c:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f80:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f84:	0800915f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r8, ip, pc}
 8008f88:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f8c:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f90:	08009187 	stmdaeq	r0, {r0, r1, r2, r7, r8, ip, pc}
 8008f94:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008f98:	080091fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, ip, pc}
 8008f9c:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008fa0:	08008e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, pc}
 8008fa4:	08009225 	stmdaeq	r0, {r0, r2, r5, r9, ip, pc}
 8008fa8:	2101      	movs	r1, #1
 8008faa:	fb05 3202 	mla	r2, r5, r2, r3
 8008fae:	e79a      	b.n	8008ee6 <_vprintf+0x82>
 8008fb0:	4625      	mov	r5, r4
 8008fb2:	a803      	add	r0, sp, #12
 8008fb4:	f855 1b04 	ldr.w	r1, [r5], #4
 8008fb8:	f7ff fe76 	bl	8008ca8 <_xputch>
 8008fbc:	462c      	mov	r4, r5
 8008fbe:	3601      	adds	r6, #1
 8008fc0:	e768      	b.n	8008e94 <_vprintf+0x30>
 8008fc2:	9903      	ldr	r1, [sp, #12]
 8008fc4:	074d      	lsls	r5, r1, #29
 8008fc6:	bf51      	iteee	pl
 8008fc8:	4625      	movpl	r5, r4
 8008fca:	3407      	addmi	r4, #7
 8008fcc:	f024 0407 	bicmi.w	r4, r4, #7
 8008fd0:	4625      	movmi	r5, r4
 8008fd2:	bf55      	itete	pl
 8008fd4:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8008fd8:	6863      	ldrmi	r3, [r4, #4]
 8008fda:	17d3      	asrpl	r3, r2, #31
 8008fdc:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	da05      	bge.n	8008ff0 <_vprintf+0x18c>
 8008fe4:	f041 0108 	orr.w	r1, r1, #8
 8008fe8:	4252      	negs	r2, r2
 8008fea:	9103      	str	r1, [sp, #12]
 8008fec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008ff0:	a803      	add	r0, sp, #12
 8008ff2:	f7ff fe6f 	bl	8008cd4 <_format_int>
 8008ff6:	e7e1      	b.n	8008fbc <_vprintf+0x158>
 8008ff8:	3407      	adds	r4, #7
 8008ffa:	f024 0507 	bic.w	r5, r4, #7
 8008ffe:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009002:	f7fe fd6f 	bl	8007ae4 <__aeabi_d2f>
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	4641      	mov	r1, r8
 800900a:	07dc      	lsls	r4, r3, #31
 800900c:	bf54      	ite	pl
 800900e:	f04f 0a06 	movpl.w	sl, #6
 8009012:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 8009016:	4681      	mov	r9, r0
 8009018:	f7fe ff10 	bl	8007e3c <__aeabi_fcmplt>
 800901c:	2800      	cmp	r0, #0
 800901e:	d063      	beq.n	80090e8 <_vprintf+0x284>
 8009020:	232d      	movs	r3, #45	; 0x2d
 8009022:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 8009026:	f88d 3020 	strb.w	r3, [sp, #32]
 800902a:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 800902e:	4648      	mov	r0, r9
 8009030:	f7fe ff2c 	bl	8007e8c <__aeabi_f2iz>
 8009034:	4659      	mov	r1, fp
 8009036:	2200      	movs	r2, #0
 8009038:	4604      	mov	r4, r0
 800903a:	f7ff fdfb 	bl	8008c34 <_itostr>
 800903e:	eb0b 0200 	add.w	r2, fp, r0
 8009042:	e9cd 2000 	strd	r2, r0, [sp]
 8009046:	4620      	mov	r0, r4
 8009048:	f7fe fe56 	bl	8007cf8 <__aeabi_i2f>
 800904c:	4601      	mov	r1, r0
 800904e:	4648      	mov	r0, r9
 8009050:	f7fe fd9c 	bl	8007b8c <__aeabi_fsub>
 8009054:	222e      	movs	r2, #46	; 0x2e
 8009056:	4601      	mov	r1, r0
 8009058:	200a      	movs	r0, #10
 800905a:	9b00      	ldr	r3, [sp, #0]
 800905c:	f10a 0901 	add.w	r9, sl, #1
 8009060:	1c5c      	adds	r4, r3, #1
 8009062:	9b01      	ldr	r3, [sp, #4]
 8009064:	f80b 2003 	strb.w	r2, [fp, r3]
 8009068:	4603      	mov	r3, r0
 800906a:	f1ba 0f00 	cmp.w	sl, #0
 800906e:	dc3d      	bgt.n	80090ec <_vprintf+0x288>
 8009070:	9100      	str	r1, [sp, #0]
 8009072:	f7fe fe41 	bl	8007cf8 <__aeabi_i2f>
 8009076:	9900      	ldr	r1, [sp, #0]
 8009078:	f7ff f904 	bl	8008284 <__aeabi_fmul>
 800907c:	f7fe ff06 	bl	8007e8c <__aeabi_f2iz>
 8009080:	464a      	mov	r2, r9
 8009082:	4621      	mov	r1, r4
 8009084:	f7ff fdd6 	bl	8008c34 <_itostr>
 8009088:	4404      	add	r4, r0
 800908a:	1be0      	subs	r0, r4, r7
 800908c:	1e44      	subs	r4, r0, #1
 800908e:	5d3b      	ldrb	r3, [r7, r4]
 8009090:	193a      	adds	r2, r7, r4
 8009092:	2b34      	cmp	r3, #52	; 0x34
 8009094:	d910      	bls.n	80090b8 <_vprintf+0x254>
 8009096:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800909a:	1e53      	subs	r3, r2, #1
 800909c:	292e      	cmp	r1, #46	; 0x2e
 800909e:	d02c      	beq.n	80090fa <_vprintf+0x296>
 80090a0:	469c      	mov	ip, r3
 80090a2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80090a6:	4663      	mov	r3, ip
 80090a8:	f81c 1901 	ldrb.w	r1, [ip], #-1
 80090ac:	2939      	cmp	r1, #57	; 0x39
 80090ae:	d021      	beq.n	80090f4 <_vprintf+0x290>
 80090b0:	292e      	cmp	r1, #46	; 0x2e
 80090b2:	d022      	beq.n	80090fa <_vprintf+0x296>
 80090b4:	3101      	adds	r1, #1
 80090b6:	7019      	strb	r1, [r3, #0]
 80090b8:	f104 0360 	add.w	r3, r4, #96	; 0x60
 80090bc:	446b      	add	r3, sp
 80090be:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 80090c2:	2b2e      	cmp	r3, #46	; 0x2e
 80090c4:	bf08      	it	eq
 80090c6:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 80090ca:	46a1      	mov	r9, r4
 80090cc:	9b05      	ldr	r3, [sp, #20]
 80090ce:	4599      	cmp	r9, r3
 80090d0:	db3e      	blt.n	8009150 <_vprintf+0x2ec>
 80090d2:	46b9      	mov	r9, r7
 80090d4:	2c00      	cmp	r4, #0
 80090d6:	f77f af71 	ble.w	8008fbc <_vprintf+0x158>
 80090da:	f819 1b01 	ldrb.w	r1, [r9], #1
 80090de:	a803      	add	r0, sp, #12
 80090e0:	f7ff fde2 	bl	8008ca8 <_xputch>
 80090e4:	3c01      	subs	r4, #1
 80090e6:	e7f5      	b.n	80090d4 <_vprintf+0x270>
 80090e8:	46bb      	mov	fp, r7
 80090ea:	e7a0      	b.n	800902e <_vprintf+0x1ca>
 80090ec:	4358      	muls	r0, r3
 80090ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80090f2:	e7ba      	b.n	800906a <_vprintf+0x206>
 80090f4:	f88c e001 	strb.w	lr, [ip, #1]
 80090f8:	e7d5      	b.n	80090a6 <_vprintf+0x242>
 80090fa:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80090fe:	3b01      	subs	r3, #1
 8009100:	7819      	ldrb	r1, [r3, #0]
 8009102:	2939      	cmp	r1, #57	; 0x39
 8009104:	d112      	bne.n	800912c <_vprintf+0x2c8>
 8009106:	42bb      	cmp	r3, r7
 8009108:	d20d      	bcs.n	8009126 <_vprintf+0x2c2>
 800910a:	1c5c      	adds	r4, r3, #1
 800910c:	1c99      	adds	r1, r3, #2
 800910e:	428c      	cmp	r4, r1
 8009110:	eba2 0203 	sub.w	r2, r2, r3
 8009114:	d913      	bls.n	800913e <_vprintf+0x2da>
 8009116:	3201      	adds	r2, #1
 8009118:	441a      	add	r2, r3
 800911a:	42a2      	cmp	r2, r4
 800911c:	d10b      	bne.n	8009136 <_vprintf+0x2d2>
 800911e:	2231      	movs	r2, #49	; 0x31
 8009120:	4604      	mov	r4, r0
 8009122:	705a      	strb	r2, [r3, #1]
 8009124:	e7c8      	b.n	80090b8 <_vprintf+0x254>
 8009126:	f803 c901 	strb.w	ip, [r3], #-1
 800912a:	e7e9      	b.n	8009100 <_vprintf+0x29c>
 800912c:	42bb      	cmp	r3, r7
 800912e:	d3ec      	bcc.n	800910a <_vprintf+0x2a6>
 8009130:	292d      	cmp	r1, #45	; 0x2d
 8009132:	d0ea      	beq.n	800910a <_vprintf+0x2a6>
 8009134:	e7be      	b.n	80090b4 <_vprintf+0x250>
 8009136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913a:	7021      	strb	r1, [r4, #0]
 800913c:	e7ed      	b.n	800911a <_vprintf+0x2b6>
 800913e:	4414      	add	r4, r2
 8009140:	440a      	add	r2, r1
 8009142:	428a      	cmp	r2, r1
 8009144:	d0eb      	beq.n	800911e <_vprintf+0x2ba>
 8009146:	f814 cd01 	ldrb.w	ip, [r4, #-1]!
 800914a:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800914e:	e7f8      	b.n	8009142 <_vprintf+0x2de>
 8009150:	2120      	movs	r1, #32
 8009152:	a803      	add	r0, sp, #12
 8009154:	f7ff fda8 	bl	8008ca8 <_xputch>
 8009158:	f109 0901 	add.w	r9, r9, #1
 800915c:	e7b6      	b.n	80090cc <_vprintf+0x268>
 800915e:	2308      	movs	r3, #8
 8009160:	4625      	mov	r5, r4
 8009162:	9305      	str	r3, [sp, #20]
 8009164:	2320      	movs	r3, #32
 8009166:	2130      	movs	r1, #48	; 0x30
 8009168:	f855 4b04 	ldr.w	r4, [r5], #4
 800916c:	a803      	add	r0, sp, #12
 800916e:	9303      	str	r3, [sp, #12]
 8009170:	f7ff fd9a 	bl	8008ca8 <_xputch>
 8009174:	2178      	movs	r1, #120	; 0x78
 8009176:	a803      	add	r0, sp, #12
 8009178:	f7ff fd96 	bl	8008ca8 <_xputch>
 800917c:	4621      	mov	r1, r4
 800917e:	a803      	add	r0, sp, #12
 8009180:	f7ff fe12 	bl	8008da8 <_format_hex>
 8009184:	e71a      	b.n	8008fbc <_vprintf+0x158>
 8009186:	4625      	mov	r5, r4
 8009188:	2400      	movs	r4, #0
 800918a:	f855 9b04 	ldr.w	r9, [r5], #4
 800918e:	f819 3004 	ldrb.w	r3, [r9, r4]
 8009192:	b993      	cbnz	r3, 80091ba <_vprintf+0x356>
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	07d9      	lsls	r1, r3, #31
 8009198:	d503      	bpl.n	80091a2 <_vprintf+0x33e>
 800919a:	9b04      	ldr	r3, [sp, #16]
 800919c:	429c      	cmp	r4, r3
 800919e:	bfa8      	it	ge
 80091a0:	461c      	movge	r4, r3
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	f104 0a01 	add.w	sl, r4, #1
 80091a8:	065a      	lsls	r2, r3, #25
 80091aa:	d403      	bmi.n	80091b4 <_vprintf+0x350>
 80091ac:	9b05      	ldr	r3, [sp, #20]
 80091ae:	429c      	cmp	r4, r3
 80091b0:	db05      	blt.n	80091be <_vprintf+0x35a>
 80091b2:	4654      	mov	r4, sl
 80091b4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80091b8:	e00d      	b.n	80091d6 <_vprintf+0x372>
 80091ba:	3401      	adds	r4, #1
 80091bc:	e7e7      	b.n	800918e <_vprintf+0x32a>
 80091be:	2120      	movs	r1, #32
 80091c0:	a803      	add	r0, sp, #12
 80091c2:	f7ff fd71 	bl	8008ca8 <_xputch>
 80091c6:	4654      	mov	r4, sl
 80091c8:	e7eb      	b.n	80091a2 <_vprintf+0x33e>
 80091ca:	a803      	add	r0, sp, #12
 80091cc:	f7ff fd6c 	bl	8008ca8 <_xputch>
 80091d0:	9b04      	ldr	r3, [sp, #16]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	9304      	str	r3, [sp, #16]
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	07db      	lsls	r3, r3, #31
 80091da:	d501      	bpl.n	80091e0 <_vprintf+0x37c>
 80091dc:	9b04      	ldr	r3, [sp, #16]
 80091de:	b11b      	cbz	r3, 80091e8 <_vprintf+0x384>
 80091e0:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80091e4:	2900      	cmp	r1, #0
 80091e6:	d1f0      	bne.n	80091ca <_vprintf+0x366>
 80091e8:	9b05      	ldr	r3, [sp, #20]
 80091ea:	429c      	cmp	r4, r3
 80091ec:	f6bf aee6 	bge.w	8008fbc <_vprintf+0x158>
 80091f0:	2120      	movs	r1, #32
 80091f2:	a803      	add	r0, sp, #12
 80091f4:	f7ff fd58 	bl	8008ca8 <_xputch>
 80091f8:	3401      	adds	r4, #1
 80091fa:	e7f5      	b.n	80091e8 <_vprintf+0x384>
 80091fc:	9b03      	ldr	r3, [sp, #12]
 80091fe:	f013 0304 	ands.w	r3, r3, #4
 8009202:	bf1d      	ittte	ne
 8009204:	3407      	addne	r4, #7
 8009206:	f024 0407 	bicne.w	r4, r4, #7
 800920a:	4625      	movne	r5, r4
 800920c:	4625      	moveq	r5, r4
 800920e:	bf1a      	itte	ne
 8009210:	f855 2b08 	ldrne.w	r2, [r5], #8
 8009214:	6863      	ldrne	r3, [r4, #4]
 8009216:	f855 2b04 	ldreq.w	r2, [r5], #4
 800921a:	e6e9      	b.n	8008ff0 <_vprintf+0x18c>
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	f043 0302 	orr.w	r3, r3, #2
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	4625      	mov	r5, r4
 8009226:	f855 1b04 	ldr.w	r1, [r5], #4
 800922a:	e7a8      	b.n	800917e <_vprintf+0x31a>

0800922c <printf>:
 800922c:	b40f      	push	{r0, r1, r2, r3}
 800922e:	b507      	push	{r0, r1, r2, lr}
 8009230:	aa04      	add	r2, sp, #16
 8009232:	f852 1b04 	ldr.w	r1, [r2], #4
 8009236:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800923a:	9201      	str	r2, [sp, #4]
 800923c:	f7ff fe12 	bl	8008e64 <_vprintf>
 8009240:	b003      	add	sp, #12
 8009242:	f85d eb04 	ldr.w	lr, [sp], #4
 8009246:	b004      	add	sp, #16
 8009248:	4770      	bx	lr
	...

0800924c <sprintf>:
 800924c:	b40e      	push	{r1, r2, r3}
 800924e:	b517      	push	{r0, r1, r2, r4, lr}
 8009250:	4c09      	ldr	r4, [pc, #36]	; (8009278 <sprintf+0x2c>)
 8009252:	aa05      	add	r2, sp, #20
 8009254:	f852 1b04 	ldr.w	r1, [r2], #4
 8009258:	6020      	str	r0, [r4, #0]
 800925a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800925e:	9201      	str	r2, [sp, #4]
 8009260:	f7ff fe00 	bl	8008e64 <_vprintf>
 8009264:	2300      	movs	r3, #0
 8009266:	6822      	ldr	r2, [r4, #0]
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	7013      	strb	r3, [r2, #0]
 800926c:	b003      	add	sp, #12
 800926e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009272:	b003      	add	sp, #12
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	200000e8 	andcs	r0, r0, r8, ror #1

0800927c <snprintf>:
 800927c:	b40c      	push	{r2, r3}
 800927e:	460b      	mov	r3, r1
 8009280:	b513      	push	{r0, r1, r4, lr}
 8009282:	4c09      	ldr	r4, [pc, #36]	; (80092a8 <snprintf+0x2c>)
 8009284:	aa04      	add	r2, sp, #16
 8009286:	f852 1b04 	ldr.w	r1, [r2], #4
 800928a:	6020      	str	r0, [r4, #0]
 800928c:	4618      	mov	r0, r3
 800928e:	9201      	str	r2, [sp, #4]
 8009290:	f7ff fde8 	bl	8008e64 <_vprintf>
 8009294:	2300      	movs	r3, #0
 8009296:	6822      	ldr	r2, [r4, #0]
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	7013      	strb	r3, [r2, #0]
 800929c:	b002      	add	sp, #8
 800929e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a2:	b002      	add	sp, #8
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	200000e8 	andcs	r0, r0, r8, ror #1

080092ac <vsnprintf>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4605      	mov	r5, r0
 80092b0:	4c05      	ldr	r4, [pc, #20]	; (80092c8 <vsnprintf+0x1c>)
 80092b2:	4608      	mov	r0, r1
 80092b4:	4611      	mov	r1, r2
 80092b6:	461a      	mov	r2, r3
 80092b8:	6025      	str	r5, [r4, #0]
 80092ba:	f7ff fdd3 	bl	8008e64 <_vprintf>
 80092be:	2300      	movs	r3, #0
 80092c0:	6822      	ldr	r2, [r4, #0]
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	7013      	strb	r3, [r2, #0]
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	200000e8 	andcs	r0, r0, r8, ror #1

080092cc <__udivmoddi4>:
 80092cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d0:	9e08      	ldr	r6, [sp, #32]
 80092d2:	460d      	mov	r5, r1
 80092d4:	4604      	mov	r4, r0
 80092d6:	468e      	mov	lr, r1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d14c      	bne.n	8009376 <__udivmoddi4+0xaa>
 80092dc:	428a      	cmp	r2, r1
 80092de:	4694      	mov	ip, r2
 80092e0:	d967      	bls.n	80093b2 <__udivmoddi4+0xe6>
 80092e2:	fab2 f382 	clz	r3, r2
 80092e6:	b153      	cbz	r3, 80092fe <__udivmoddi4+0x32>
 80092e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80092ec:	f1c3 0220 	rsb	r2, r3, #32
 80092f0:	fa01 fe03 	lsl.w	lr, r1, r3
 80092f4:	fa20 f202 	lsr.w	r2, r0, r2
 80092f8:	ea42 0e0e 	orr.w	lr, r2, lr
 80092fc:	409c      	lsls	r4, r3
 80092fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009302:	fbbe f1f7 	udiv	r1, lr, r7
 8009306:	fa1f f58c 	uxth.w	r5, ip
 800930a:	fb07 ee11 	mls	lr, r7, r1, lr
 800930e:	fb01 f005 	mul.w	r0, r1, r5
 8009312:	0c22      	lsrs	r2, r4, #16
 8009314:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8009318:	4290      	cmp	r0, r2
 800931a:	d90a      	bls.n	8009332 <__udivmoddi4+0x66>
 800931c:	eb1c 0202 	adds.w	r2, ip, r2
 8009320:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8009324:	f080 8119 	bcs.w	800955a <__udivmoddi4+0x28e>
 8009328:	4290      	cmp	r0, r2
 800932a:	f240 8116 	bls.w	800955a <__udivmoddi4+0x28e>
 800932e:	3902      	subs	r1, #2
 8009330:	4462      	add	r2, ip
 8009332:	1a12      	subs	r2, r2, r0
 8009334:	fbb2 f0f7 	udiv	r0, r2, r7
 8009338:	fb07 2210 	mls	r2, r7, r0, r2
 800933c:	fb00 f505 	mul.w	r5, r0, r5
 8009340:	b2a4      	uxth	r4, r4
 8009342:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009346:	42a5      	cmp	r5, r4
 8009348:	d90a      	bls.n	8009360 <__udivmoddi4+0x94>
 800934a:	eb1c 0404 	adds.w	r4, ip, r4
 800934e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009352:	f080 8104 	bcs.w	800955e <__udivmoddi4+0x292>
 8009356:	42a5      	cmp	r5, r4
 8009358:	f240 8101 	bls.w	800955e <__udivmoddi4+0x292>
 800935c:	4464      	add	r4, ip
 800935e:	3802      	subs	r0, #2
 8009360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8009364:	2100      	movs	r1, #0
 8009366:	1b64      	subs	r4, r4, r5
 8009368:	b11e      	cbz	r6, 8009372 <__udivmoddi4+0xa6>
 800936a:	40dc      	lsrs	r4, r3
 800936c:	2300      	movs	r3, #0
 800936e:	e9c6 4300 	strd	r4, r3, [r6]
 8009372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009376:	428b      	cmp	r3, r1
 8009378:	d908      	bls.n	800938c <__udivmoddi4+0xc0>
 800937a:	2e00      	cmp	r6, #0
 800937c:	f000 80ea 	beq.w	8009554 <__udivmoddi4+0x288>
 8009380:	2100      	movs	r1, #0
 8009382:	e9c6 0500 	strd	r0, r5, [r6]
 8009386:	4608      	mov	r0, r1
 8009388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800938c:	fab3 f183 	clz	r1, r3
 8009390:	2900      	cmp	r1, #0
 8009392:	d148      	bne.n	8009426 <__udivmoddi4+0x15a>
 8009394:	42ab      	cmp	r3, r5
 8009396:	d302      	bcc.n	800939e <__udivmoddi4+0xd2>
 8009398:	4282      	cmp	r2, r0
 800939a:	f200 80f8 	bhi.w	800958e <__udivmoddi4+0x2c2>
 800939e:	1a84      	subs	r4, r0, r2
 80093a0:	eb65 0203 	sbc.w	r2, r5, r3
 80093a4:	2001      	movs	r0, #1
 80093a6:	4696      	mov	lr, r2
 80093a8:	2e00      	cmp	r6, #0
 80093aa:	d0e2      	beq.n	8009372 <__udivmoddi4+0xa6>
 80093ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80093b0:	e7df      	b.n	8009372 <__udivmoddi4+0xa6>
 80093b2:	b902      	cbnz	r2, 80093b6 <__udivmoddi4+0xea>
 80093b4:	deff      	udf	#255	; 0xff
 80093b6:	fab2 f382 	clz	r3, r2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f040 808e 	bne.w	80094dc <__udivmoddi4+0x210>
 80093c0:	1a88      	subs	r0, r1, r2
 80093c2:	2101      	movs	r1, #1
 80093c4:	0c17      	lsrs	r7, r2, #16
 80093c6:	fa1f fe82 	uxth.w	lr, r2
 80093ca:	fbb0 f5f7 	udiv	r5, r0, r7
 80093ce:	fb07 0015 	mls	r0, r7, r5, r0
 80093d2:	0c22      	lsrs	r2, r4, #16
 80093d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80093d8:	fb0e f005 	mul.w	r0, lr, r5
 80093dc:	4290      	cmp	r0, r2
 80093de:	d908      	bls.n	80093f2 <__udivmoddi4+0x126>
 80093e0:	eb1c 0202 	adds.w	r2, ip, r2
 80093e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80093e8:	d202      	bcs.n	80093f0 <__udivmoddi4+0x124>
 80093ea:	4290      	cmp	r0, r2
 80093ec:	f200 80cc 	bhi.w	8009588 <__udivmoddi4+0x2bc>
 80093f0:	4645      	mov	r5, r8
 80093f2:	1a12      	subs	r2, r2, r0
 80093f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80093f8:	fb07 2210 	mls	r2, r7, r0, r2
 80093fc:	fb0e fe00 	mul.w	lr, lr, r0
 8009400:	b2a4      	uxth	r4, r4
 8009402:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009406:	45a6      	cmp	lr, r4
 8009408:	d908      	bls.n	800941c <__udivmoddi4+0x150>
 800940a:	eb1c 0404 	adds.w	r4, ip, r4
 800940e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8009412:	d202      	bcs.n	800941a <__udivmoddi4+0x14e>
 8009414:	45a6      	cmp	lr, r4
 8009416:	f200 80b4 	bhi.w	8009582 <__udivmoddi4+0x2b6>
 800941a:	4610      	mov	r0, r2
 800941c:	eba4 040e 	sub.w	r4, r4, lr
 8009420:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8009424:	e7a0      	b.n	8009368 <__udivmoddi4+0x9c>
 8009426:	f1c1 0720 	rsb	r7, r1, #32
 800942a:	408b      	lsls	r3, r1
 800942c:	fa22 fc07 	lsr.w	ip, r2, r7
 8009430:	ea4c 0c03 	orr.w	ip, ip, r3
 8009434:	fa25 fa07 	lsr.w	sl, r5, r7
 8009438:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800943c:	fbba f8f9 	udiv	r8, sl, r9
 8009440:	408d      	lsls	r5, r1
 8009442:	fa20 f307 	lsr.w	r3, r0, r7
 8009446:	fb09 aa18 	mls	sl, r9, r8, sl
 800944a:	fa1f fe8c 	uxth.w	lr, ip
 800944e:	432b      	orrs	r3, r5
 8009450:	fa00 f501 	lsl.w	r5, r0, r1
 8009454:	fb08 f00e 	mul.w	r0, r8, lr
 8009458:	0c1c      	lsrs	r4, r3, #16
 800945a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800945e:	42a0      	cmp	r0, r4
 8009460:	fa02 f201 	lsl.w	r2, r2, r1
 8009464:	d90b      	bls.n	800947e <__udivmoddi4+0x1b2>
 8009466:	eb1c 0404 	adds.w	r4, ip, r4
 800946a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800946e:	f080 8086 	bcs.w	800957e <__udivmoddi4+0x2b2>
 8009472:	42a0      	cmp	r0, r4
 8009474:	f240 8083 	bls.w	800957e <__udivmoddi4+0x2b2>
 8009478:	f1a8 0802 	sub.w	r8, r8, #2
 800947c:	4464      	add	r4, ip
 800947e:	1a24      	subs	r4, r4, r0
 8009480:	b298      	uxth	r0, r3
 8009482:	fbb4 f3f9 	udiv	r3, r4, r9
 8009486:	fb09 4413 	mls	r4, r9, r3, r4
 800948a:	fb03 fe0e 	mul.w	lr, r3, lr
 800948e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8009492:	45a6      	cmp	lr, r4
 8009494:	d908      	bls.n	80094a8 <__udivmoddi4+0x1dc>
 8009496:	eb1c 0404 	adds.w	r4, ip, r4
 800949a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800949e:	d26a      	bcs.n	8009576 <__udivmoddi4+0x2aa>
 80094a0:	45a6      	cmp	lr, r4
 80094a2:	d968      	bls.n	8009576 <__udivmoddi4+0x2aa>
 80094a4:	3b02      	subs	r3, #2
 80094a6:	4464      	add	r4, ip
 80094a8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80094ac:	fba0 9302 	umull	r9, r3, r0, r2
 80094b0:	eba4 040e 	sub.w	r4, r4, lr
 80094b4:	429c      	cmp	r4, r3
 80094b6:	46c8      	mov	r8, r9
 80094b8:	469e      	mov	lr, r3
 80094ba:	d354      	bcc.n	8009566 <__udivmoddi4+0x29a>
 80094bc:	d051      	beq.n	8009562 <__udivmoddi4+0x296>
 80094be:	2e00      	cmp	r6, #0
 80094c0:	d067      	beq.n	8009592 <__udivmoddi4+0x2c6>
 80094c2:	ebb5 0308 	subs.w	r3, r5, r8
 80094c6:	eb64 040e 	sbc.w	r4, r4, lr
 80094ca:	40cb      	lsrs	r3, r1
 80094cc:	fa04 f707 	lsl.w	r7, r4, r7
 80094d0:	431f      	orrs	r7, r3
 80094d2:	40cc      	lsrs	r4, r1
 80094d4:	e9c6 7400 	strd	r7, r4, [r6]
 80094d8:	2100      	movs	r1, #0
 80094da:	e74a      	b.n	8009372 <__udivmoddi4+0xa6>
 80094dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80094e0:	f1c3 0020 	rsb	r0, r3, #32
 80094e4:	40c1      	lsrs	r1, r0
 80094e6:	409d      	lsls	r5, r3
 80094e8:	fa24 f000 	lsr.w	r0, r4, r0
 80094ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80094f0:	4328      	orrs	r0, r5
 80094f2:	fbb1 f5f7 	udiv	r5, r1, r7
 80094f6:	fb07 1115 	mls	r1, r7, r5, r1
 80094fa:	fa1f fe8c 	uxth.w	lr, ip
 80094fe:	0c02      	lsrs	r2, r0, #16
 8009500:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009504:	fb05 f10e 	mul.w	r1, r5, lr
 8009508:	4291      	cmp	r1, r2
 800950a:	fa04 f403 	lsl.w	r4, r4, r3
 800950e:	d908      	bls.n	8009522 <__udivmoddi4+0x256>
 8009510:	eb1c 0202 	adds.w	r2, ip, r2
 8009514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8009518:	d22f      	bcs.n	800957a <__udivmoddi4+0x2ae>
 800951a:	4291      	cmp	r1, r2
 800951c:	d92d      	bls.n	800957a <__udivmoddi4+0x2ae>
 800951e:	3d02      	subs	r5, #2
 8009520:	4462      	add	r2, ip
 8009522:	1a52      	subs	r2, r2, r1
 8009524:	fbb2 f1f7 	udiv	r1, r2, r7
 8009528:	fb07 2211 	mls	r2, r7, r1, r2
 800952c:	b280      	uxth	r0, r0
 800952e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8009532:	fb01 f20e 	mul.w	r2, r1, lr
 8009536:	4282      	cmp	r2, r0
 8009538:	d908      	bls.n	800954c <__udivmoddi4+0x280>
 800953a:	eb1c 0000 	adds.w	r0, ip, r0
 800953e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8009542:	d216      	bcs.n	8009572 <__udivmoddi4+0x2a6>
 8009544:	4282      	cmp	r2, r0
 8009546:	d914      	bls.n	8009572 <__udivmoddi4+0x2a6>
 8009548:	3902      	subs	r1, #2
 800954a:	4460      	add	r0, ip
 800954c:	1a80      	subs	r0, r0, r2
 800954e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8009552:	e73a      	b.n	80093ca <__udivmoddi4+0xfe>
 8009554:	4631      	mov	r1, r6
 8009556:	4630      	mov	r0, r6
 8009558:	e70b      	b.n	8009372 <__udivmoddi4+0xa6>
 800955a:	4671      	mov	r1, lr
 800955c:	e6e9      	b.n	8009332 <__udivmoddi4+0x66>
 800955e:	4610      	mov	r0, r2
 8009560:	e6fe      	b.n	8009360 <__udivmoddi4+0x94>
 8009562:	454d      	cmp	r5, r9
 8009564:	d2ab      	bcs.n	80094be <__udivmoddi4+0x1f2>
 8009566:	ebb9 0802 	subs.w	r8, r9, r2
 800956a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800956e:	3801      	subs	r0, #1
 8009570:	e7a5      	b.n	80094be <__udivmoddi4+0x1f2>
 8009572:	4641      	mov	r1, r8
 8009574:	e7ea      	b.n	800954c <__udivmoddi4+0x280>
 8009576:	4603      	mov	r3, r0
 8009578:	e796      	b.n	80094a8 <__udivmoddi4+0x1dc>
 800957a:	4645      	mov	r5, r8
 800957c:	e7d1      	b.n	8009522 <__udivmoddi4+0x256>
 800957e:	46d0      	mov	r8, sl
 8009580:	e77d      	b.n	800947e <__udivmoddi4+0x1b2>
 8009582:	4464      	add	r4, ip
 8009584:	3802      	subs	r0, #2
 8009586:	e749      	b.n	800941c <__udivmoddi4+0x150>
 8009588:	3d02      	subs	r5, #2
 800958a:	4462      	add	r2, ip
 800958c:	e731      	b.n	80093f2 <__udivmoddi4+0x126>
 800958e:	4608      	mov	r0, r1
 8009590:	e70a      	b.n	80093a8 <__udivmoddi4+0xdc>
 8009592:	4631      	mov	r1, r6
 8009594:	e6ed      	b.n	8009372 <__udivmoddi4+0xa6>
 8009596:	bf00      	nop

08009598 <e131::universe_to_multicast_ip(unsigned short)>:
 8009598:	b513      	push	{r0, r1, r4, lr}
 800959a:	4604      	mov	r4, r0
 800959c:	a901      	add	r1, sp, #4
 800959e:	4806      	ldr	r0, [pc, #24]	; (80095b8 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 80095a0:	f008 fd08 	bl	8011fb4 <inet_aton>
 80095a4:	9801      	ldr	r0, [sp, #4]
 80095a6:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 80095aa:	0224      	lsls	r4, r4, #8
 80095ac:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80095b0:	4320      	orrs	r0, r4
 80095b2:	b002      	add	sp, #8
 80095b4:	bd10      	pop	{r4, pc}
 80095b6:	bf00      	nop
 80095b8:	080143b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, lr}

080095bc <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 80095bc:	f240 6304 	movw	r3, #1540	; 0x604
 80095c0:	fb03 0001 	mla	r0, r3, r1, r0
 80095c4:	2300      	movs	r3, #0
 80095c6:	b510      	push	{r4, lr}
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d100      	bne.n	80095ce <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 80095cc:	bd10      	pop	{r4, pc}
 80095ce:	f810 4b01 	ldrb.w	r4, [r0], #1
 80095d2:	3301      	adds	r3, #1
 80095d4:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 80095d8:	42a1      	cmp	r1, r4
 80095da:	bf38      	it	cc
 80095dc:	4621      	movcc	r1, r4
 80095de:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 80095e2:	e7f1      	b.n	80095c8 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

080095e4 <memset.constprop.0.isra.0>:
 80095e4:	2300      	movs	r3, #0
 80095e6:	4401      	add	r1, r0
 80095e8:	4288      	cmp	r0, r1
 80095ea:	d100      	bne.n	80095ee <memset.constprop.0.isra.0+0xa>
 80095ec:	4770      	bx	lr
 80095ee:	f800 3b01 	strb.w	r3, [r0], #1
 80095f2:	e7f9      	b.n	80095e8 <memset.constprop.0.isra.0+0x4>

080095f4 <memcpy.isra.0>:
 80095f4:	3801      	subs	r0, #1
 80095f6:	440a      	add	r2, r1
 80095f8:	4291      	cmp	r1, r2
 80095fa:	d100      	bne.n	80095fe <memcpy.isra.0+0xa>
 80095fc:	4770      	bx	lr
 80095fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009602:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009606:	e7f7      	b.n	80095f8 <memcpy.isra.0+0x4>

08009608 <lightset::Data::Get()>:
 8009608:	4b03      	ldr	r3, [pc, #12]	; (8009618 <lightset::Data::Get()+0x10>)
 800960a:	4804      	ldr	r0, [pc, #16]	; (800961c <lightset::Data::Get()+0x14>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	07d2      	lsls	r2, r2, #31
 8009610:	bf5c      	itt	pl
 8009612:	2201      	movpl	r2, #1
 8009614:	601a      	strpl	r2, [r3, #0]
 8009616:	4770      	bx	lr
 8009618:	200000ec 	andcs	r0, r0, ip, ror #1
 800961c:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08009620 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 8009620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009624:	4615      	mov	r5, r2
 8009626:	460f      	mov	r7, r1
 8009628:	4604      	mov	r4, r0
 800962a:	f7ff ffed 	bl	8009608 <lightset::Data::Get()>
 800962e:	f240 6304 	movw	r3, #1540	; 0x604
 8009632:	4606      	mov	r6, r0
 8009634:	435c      	muls	r4, r3
 8009636:	eb00 0804 	add.w	r8, r0, r4
 800963a:	462a      	mov	r2, r5
 800963c:	4639      	mov	r1, r7
 800963e:	4640      	mov	r0, r8
 8009640:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009644:	f7ff ffd6 	bl	80095f4 <memcpy.isra.0>
 8009648:	462a      	mov	r2, r5
 800964a:	4639      	mov	r1, r7
 800964c:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 8009650:	1930      	adds	r0, r6, r4
 8009652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009656:	f7ff bfcd 	b.w	80095f4 <memcpy.isra.0>

0800965a <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800965a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800965e:	4680      	mov	r8, r0
 8009660:	f240 6404 	movw	r4, #1540	; 0x604
 8009664:	4615      	mov	r5, r2
 8009666:	460f      	mov	r7, r1
 8009668:	4699      	mov	r9, r3
 800966a:	f7ff ffcd 	bl	8009608 <lightset::Data::Get()>
 800966e:	fb04 f408 	mul.w	r4, r4, r8
 8009672:	eb00 0a04 	add.w	sl, r0, r4
 8009676:	4606      	mov	r6, r0
 8009678:	462a      	mov	r2, r5
 800967a:	4639      	mov	r1, r7
 800967c:	4650      	mov	r0, sl
 800967e:	f7ff ffb9 	bl	80095f4 <memcpy.isra.0>
 8009682:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 8009686:	f1b9 0f00 	cmp.w	r9, #0
 800968a:	d106      	bne.n	800969a <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 800968c:	462a      	mov	r2, r5
 800968e:	4641      	mov	r1, r8
 8009690:	4630      	mov	r0, r6
 8009692:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009696:	f7ff bf91 	b.w	80095bc <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800969a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800969e:	462a      	mov	r2, r5
 80096a0:	4639      	mov	r1, r7
 80096a2:	1930      	adds	r0, r6, r4
 80096a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a8:	f7ff bfa4 	b.w	80095f4 <memcpy.isra.0>

080096ac <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 80096ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096b0:	4616      	mov	r6, r2
 80096b2:	4699      	mov	r9, r3
 80096b4:	4680      	mov	r8, r0
 80096b6:	460f      	mov	r7, r1
 80096b8:	f7ff ffa6 	bl	8009608 <lightset::Data::Get()>
 80096bc:	f240 6404 	movw	r4, #1540	; 0x604
 80096c0:	4605      	mov	r5, r0
 80096c2:	fb04 f408 	mul.w	r4, r4, r8
 80096c6:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80096ca:	4632      	mov	r2, r6
 80096cc:	4639      	mov	r1, r7
 80096ce:	4428      	add	r0, r5
 80096d0:	f7ff ff90 	bl	80095f4 <memcpy.isra.0>
 80096d4:	192b      	adds	r3, r5, r4
 80096d6:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 80096da:	f1b9 0f00 	cmp.w	r9, #0
 80096de:	d106      	bne.n	80096ee <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 80096e0:	4632      	mov	r2, r6
 80096e2:	4641      	mov	r1, r8
 80096e4:	4628      	mov	r0, r5
 80096e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096ea:	f7ff bf67 	b.w	80095bc <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 80096ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80096f2:	4632      	mov	r2, r6
 80096f4:	4639      	mov	r1, r7
 80096f6:	1928      	adds	r0, r5, r4
 80096f8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096fc:	f7ff bf7a 	b.w	80095f4 <memcpy.isra.0>

08009700 <lightset::Data::IOutput(LightSet*, unsigned int) const>:
 8009700:	f240 6304 	movw	r3, #1540	; 0x604
 8009704:	b470      	push	{r4, r5, r6}
 8009706:	4605      	mov	r5, r0
 8009708:	4608      	mov	r0, r1
 800970a:	4353      	muls	r3, r2
 800970c:	4611      	mov	r1, r2
 800970e:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8009712:	18ea      	adds	r2, r5, r3
 8009714:	6803      	ldr	r3, [r0, #0]
 8009716:	691e      	ldr	r6, [r3, #16]
 8009718:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800971c:	46b4      	mov	ip, r6
 800971e:	192a      	adds	r2, r5, r4
 8009720:	bc70      	pop	{r4, r5, r6}
 8009722:	4760      	bx	ip

08009724 <E131Bridge::Start()>:
 8009724:	6943      	ldr	r3, [r0, #20]
 8009726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009728:	4604      	mov	r4, r0
 800972a:	b35b      	cbz	r3, 8009784 <E131Bridge::Start()+0x60>
 800972c:	6983      	ldr	r3, [r0, #24]
 800972e:	b9cb      	cbnz	r3, 8009764 <E131Bridge::Start()+0x40>
 8009730:	a901      	add	r1, sp, #4
 8009732:	4818      	ldr	r0, [pc, #96]	; (8009794 <E131Bridge::Start()+0x70>)
 8009734:	f008 fc3e 	bl	8011fb4 <inet_aton>
 8009738:	9b01      	ldr	r3, [sp, #4]
 800973a:	f240 207e 	movw	r0, #638	; 0x27e
 800973e:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 8009742:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 8009746:	6223      	str	r3, [r4, #32]
 8009748:	f008 fc30 	bl	8011fac <operator new(unsigned int)>
 800974c:	61a0      	str	r0, [r4, #24]
 800974e:	4620      	mov	r0, r4
 8009750:	f000 fd8c 	bl	800a26c <E131Bridge::FillDataPacket()>
 8009754:	f44f 608f 	mov.w	r0, #1144	; 0x478
 8009758:	f008 fc28 	bl	8011fac <operator new(unsigned int)>
 800975c:	61e0      	str	r0, [r4, #28]
 800975e:	4620      	mov	r0, r4
 8009760:	f000 fcda 	bl	800a118 <E131Bridge::FillDiscoveryPacket()>
 8009764:	2500      	movs	r5, #0
 8009766:	270c      	movs	r7, #12
 8009768:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800976c:	fb07 f305 	mul.w	r3, r7, r5
 8009770:	5cf3      	ldrb	r3, [r6, r3]
 8009772:	b123      	cbz	r3, 800977e <E131Bridge::Start()+0x5a>
 8009774:	6960      	ldr	r0, [r4, #20]
 8009776:	4629      	mov	r1, r5
 8009778:	6803      	ldr	r3, [r0, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	4798      	blx	r3
 800977e:	3501      	adds	r5, #1
 8009780:	2d04      	cmp	r5, #4
 8009782:	d1f3      	bne.n	800976c <E131Bridge::Start()+0x48>
 8009784:	2102      	movs	r1, #2
 8009786:	4b04      	ldr	r3, [pc, #16]	; (8009798 <E131Bridge::Start()+0x74>)
 8009788:	6818      	ldr	r0, [r3, #0]
 800978a:	b003      	add	sp, #12
 800978c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009790:	f008 bb26 	b.w	8011de0 <LedBlink::SetMode(ledblink::Mode)>
 8009794:	080143b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, lr}
 8009798:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0

0800979c <E131Bridge::Stop()>:
 800979c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a0:	2500      	movs	r5, #0
 80097a2:	2301      	movs	r3, #1
 80097a4:	4604      	mov	r4, r0
 80097a6:	f240 6804 	movw	r8, #1540	; 0x604
 80097aa:	462e      	mov	r6, r5
 80097ac:	f880 34f4 	strb.w	r3, [r0, #1268]	; 0x4f4
 80097b0:	f500 67aa 	add.w	r7, r0, #1360	; 0x550
 80097b4:	6860      	ldr	r0, [r4, #4]
 80097b6:	b118      	cbz	r0, 80097c0 <E131Bridge::Stop()+0x24>
 80097b8:	6803      	ldr	r3, [r0, #0]
 80097ba:	4629      	mov	r1, r5
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	4798      	blx	r3
 80097c0:	f7ff ff22 	bl	8009608 <lightset::Data::Get()>
 80097c4:	2344      	movs	r3, #68	; 0x44
 80097c6:	fb08 0005 	mla	r0, r8, r5, r0
 80097ca:	436b      	muls	r3, r5
 80097cc:	3501      	adds	r5, #1
 80097ce:	2d04      	cmp	r5, #4
 80097d0:	f8c0 6600 	str.w	r6, [r0, #1536]	; 0x600
 80097d4:	54fe      	strb	r6, [r7, r3]
 80097d6:	d1ed      	bne.n	80097b4 <E131Bridge::Stop()+0x18>
 80097d8:	6963      	ldr	r3, [r4, #20]
 80097da:	b17b      	cbz	r3, 80097fc <E131Bridge::Stop()+0x60>
 80097dc:	2500      	movs	r5, #0
 80097de:	270c      	movs	r7, #12
 80097e0:	f204 6622 	addw	r6, r4, #1570	; 0x622
 80097e4:	fb07 f305 	mul.w	r3, r7, r5
 80097e8:	5cf3      	ldrb	r3, [r6, r3]
 80097ea:	b123      	cbz	r3, 80097f6 <E131Bridge::Stop()+0x5a>
 80097ec:	6960      	ldr	r0, [r4, #20]
 80097ee:	4629      	mov	r1, r5
 80097f0:	6803      	ldr	r3, [r0, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	4798      	blx	r3
 80097f6:	3501      	adds	r5, #1
 80097f8:	2d04      	cmp	r5, #4
 80097fa:	d1f3      	bne.n	80097e4 <E131Bridge::Stop()+0x48>
 80097fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009800:	4b02      	ldr	r3, [pc, #8]	; (800980c <E131Bridge::Stop()+0x70>)
 8009802:	2100      	movs	r1, #0
 8009804:	6818      	ldr	r0, [r3, #0]
 8009806:	f008 baeb 	b.w	8011de0 <LedBlink::SetMode(ledblink::Mode)>
 800980a:	bf00      	nop
 800980c:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0

08009810 <E131Bridge::SetSourceName(char const*)>:
 8009810:	233f      	movs	r3, #63	; 0x3f
 8009812:	b510      	push	{r4, lr}
 8009814:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8009818:	3901      	subs	r1, #1
 800981a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800981e:	b92c      	cbnz	r4, 800982c <E131Bridge::SetSourceName(char const*)+0x1c>
 8009820:	4413      	add	r3, r2
 8009822:	429a      	cmp	r2, r3
 8009824:	d006      	beq.n	8009834 <E131Bridge::SetSourceName(char const*)+0x24>
 8009826:	f802 4b01 	strb.w	r4, [r2], #1
 800982a:	e7fa      	b.n	8009822 <E131Bridge::SetSourceName(char const*)+0x12>
 800982c:	3b01      	subs	r3, #1
 800982e:	f802 4b01 	strb.w	r4, [r2], #1
 8009832:	d1f2      	bne.n	800981a <E131Bridge::SetSourceName(char const*)+0xa>
 8009834:	2300      	movs	r3, #0
 8009836:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
 800983a:	bd10      	pop	{r4, pc}

0800983c <E131Bridge::E131Bridge()>:
 800983c:	2300      	movs	r3, #0
 800983e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009844:	e9c0 2300 	strd	r2, r3, [r0]
 8009848:	2201      	movs	r2, #1
 800984a:	4604      	mov	r4, r0
 800984c:	2764      	movs	r7, #100	; 0x64
 800984e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009852:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8009856:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800985a:	6743      	str	r3, [r0, #116]	; 0x74
 800985c:	4b1e      	ldr	r3, [pc, #120]	; (80098d8 <E131Bridge::E131Bridge()+0x9c>)
 800985e:	7202      	strb	r2, [r0, #8]
 8009860:	b093      	sub	sp, #76	; 0x4c
 8009862:	6018      	str	r0, [r3, #0]
 8009864:	f500 65a2 	add.w	r5, r0, #1296	; 0x510
 8009868:	f500 62c4 	add.w	r2, r0, #1568	; 0x620
 800986c:	f500 66ca 	add.w	r6, r0, #1616	; 0x650
 8009870:	4628      	mov	r0, r5
 8009872:	2144      	movs	r1, #68	; 0x44
 8009874:	f7ff feb6 	bl	80095e4 <memset.constprop.0.isra.0>
 8009878:	4610      	mov	r0, r2
 800987a:	210c      	movs	r1, #12
 800987c:	f7ff feb2 	bl	80095e4 <memset.constprop.0.isra.0>
 8009880:	320c      	adds	r2, #12
 8009882:	f802 7c03 	strb.w	r7, [r2, #-3]
 8009886:	42b2      	cmp	r2, r6
 8009888:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800988c:	d1f0      	bne.n	8009870 <E131Bridge::E131Bridge()+0x34>
 800988e:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 8009892:	211c      	movs	r1, #28
 8009894:	f7ff fea6 	bl	80095e4 <memset.constprop.0.isra.0>
 8009898:	2301      	movs	r3, #1
 800989a:	4d10      	ldr	r5, [pc, #64]	; (80098dc <E131Bridge::E131Bridge()+0xa0>)
 800989c:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 80098a0:	4a0f      	ldr	r2, [pc, #60]	; (80098e0 <E131Bridge::E131Bridge()+0xa4>)
 80098a2:	682b      	ldr	r3, [r5, #0]
 80098a4:	2140      	movs	r1, #64	; 0x40
 80098a6:	331c      	adds	r3, #28
 80098a8:	9200      	str	r2, [sp, #0]
 80098aa:	a802      	add	r0, sp, #8
 80098ac:	4a0d      	ldr	r2, [pc, #52]	; (80098e4 <E131Bridge::E131Bridge()+0xa8>)
 80098ae:	f7ff fce5 	bl	800927c <snprintf>
 80098b2:	4620      	mov	r0, r4
 80098b4:	a902      	add	r1, sp, #8
 80098b6:	f7ff ffab 	bl	8009810 <E131Bridge::SetSourceName(char const*)>
 80098ba:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 80098be:	6828      	ldr	r0, [r5, #0]
 80098c0:	f006 f8f6 	bl	800fab0 <Network::Begin(unsigned short)>
 80098c4:	4621      	mov	r1, r4
 80098c6:	4b08      	ldr	r3, [pc, #32]	; (80098e8 <E131Bridge::E131Bridge()+0xac>)
 80098c8:	f841 0b24 	str.w	r0, [r1], #36
 80098cc:	6818      	ldr	r0, [r3, #0]
 80098ce:	f008 fb0f 	bl	8011ef0 <Hardware::GetUuid(unsigned char*)>
 80098d2:	4620      	mov	r0, r4
 80098d4:	b013      	add	sp, #76	; 0x4c
 80098d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098d8:	20001900 	andcs	r1, r0, r0, lsl #18
 80098dc:	2000a28c 	andcs	sl, r0, ip, lsl #5
 80098e0:	080143ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, lr}
 80098e4:	080143c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, lr}
 80098e8:	2000a9b4 			; <UNDEFINED> instruction: 0x2000a9b4

080098ec <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	4604      	mov	r4, r0
 80098f0:	2300      	movs	r3, #0
 80098f2:	2544      	movs	r5, #68	; 0x44
 80098f4:	4610      	mov	r0, r2
 80098f6:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
 80098fa:	4299      	cmp	r1, r3
 80098fc:	d004      	beq.n	8009908 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 80098fe:	fb05 f603 	mul.w	r6, r5, r3
 8009902:	5b96      	ldrh	r6, [r2, r6]
 8009904:	4286      	cmp	r6, r0
 8009906:	d00e      	beq.n	8009926 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 8009908:	3301      	adds	r3, #1
 800990a:	2b04      	cmp	r3, #4
 800990c:	d1f5      	bne.n	80098fa <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 800990e:	4b06      	ldr	r3, [pc, #24]	; (8009928 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 8009910:	6824      	ldr	r4, [r4, #0]
 8009912:	681d      	ldr	r5, [r3, #0]
 8009914:	f7ff fe40 	bl	8009598 <e131::universe_to_multicast_ip(unsigned short)>
 8009918:	4621      	mov	r1, r4
 800991a:	4602      	mov	r2, r0
 800991c:	4628      	mov	r0, r5
 800991e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009922:	f006 b8d9 	b.w	800fad8 <Network::LeaveGroup(int, unsigned int)>
 8009926:	bd70      	pop	{r4, r5, r6, pc}
 8009928:	2000a28c 	andcs	sl, r0, ip, lsl #5

0800992c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800992c:	b570      	push	{r4, r5, r6, lr}
 800992e:	4604      	mov	r4, r0
 8009930:	461d      	mov	r5, r3
 8009932:	b1c1      	cbz	r1, 8009966 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 8009934:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 8009938:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800993c:	b12a      	cbz	r2, 800994a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800993e:	42aa      	cmp	r2, r5
 8009940:	d017      	beq.n	8009972 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 8009942:	2104      	movs	r1, #4
 8009944:	4620      	mov	r0, r4
 8009946:	f7ff ffd1 	bl	80098ec <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800994a:	4b0a      	ldr	r3, [pc, #40]	; (8009974 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>)
 800994c:	8035      	strh	r5, [r6, #0]
 800994e:	4628      	mov	r0, r5
 8009950:	6826      	ldr	r6, [r4, #0]
 8009952:	681c      	ldr	r4, [r3, #0]
 8009954:	f7ff fe20 	bl	8009598 <e131::universe_to_multicast_ip(unsigned short)>
 8009958:	4631      	mov	r1, r6
 800995a:	4602      	mov	r2, r0
 800995c:	4620      	mov	r0, r4
 800995e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009962:	f006 b8b6 	b.w	800fad2 <Network::JoinGroup(int, unsigned int)>
 8009966:	b122      	cbz	r2, 8009972 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 8009968:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800996c:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 8009970:	e7e4      	b.n	800993c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	2000a28c 	andcs	sl, r0, ip, lsl #5

08009978 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 8009978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997c:	4604      	mov	r4, r0
 800997e:	460d      	mov	r5, r1
 8009980:	461e      	mov	r6, r3
 8009982:	bb02      	cbnz	r2, 80099c6 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 8009984:	2903      	cmp	r1, #3
 8009986:	d843      	bhi.n	8009a10 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 8009988:	230c      	movs	r3, #12
 800998a:	fb03 0301 	mla	r3, r3, r1, r0
 800998e:	f893 2622 	ldrb.w	r2, [r3, #1570]	; 0x622
 8009992:	b12a      	cbz	r2, 80099a0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 8009994:	f8b3 3620 	ldrh.w	r3, [r3, #1568]	; 0x620
 8009998:	42b3      	cmp	r3, r6
 800999a:	d109      	bne.n	80099b0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800999c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a0:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 80099a4:	3201      	adds	r2, #1
 80099a6:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 80099b0:	230c      	movs	r3, #12
 80099b2:	fb03 4405 	mla	r4, r3, r5, r4
 80099b6:	4630      	mov	r0, r6
 80099b8:	f8a4 6620 	strh.w	r6, [r4, #1568]	; 0x620
 80099bc:	f7ff fdec 	bl	8009598 <e131::universe_to_multicast_ip(unsigned short)>
 80099c0:	f8c4 0624 	str.w	r0, [r4, #1572]	; 0x624
 80099c4:	e7ea      	b.n	800999c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 80099c6:	2a02      	cmp	r2, #2
 80099c8:	d122      	bne.n	8009a10 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 80099ca:	2903      	cmp	r1, #3
 80099cc:	d8e6      	bhi.n	800999c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 80099ce:	2344      	movs	r3, #68	; 0x44
 80099d0:	fb03 0301 	mla	r3, r3, r1, r0
 80099d4:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 80099d8:	b152      	cbz	r2, 80099f0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 80099e0:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 80099e4:	4632      	mov	r2, r6
 80099e6:	3b01      	subs	r3, #1
 80099e8:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 80099ec:	f7ff ff7e 	bl	80098ec <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 80099f0:	230c      	movs	r3, #12
 80099f2:	fb03 4505 	mla	r5, r3, r5, r4
 80099f6:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0ce      	beq.n	800999c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 80099fe:	2300      	movs	r3, #0
 8009a00:	f885 3622 	strb.w	r3, [r5, #1570]	; 0x622
 8009a04:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 8009a0e:	e7c5      	b.n	800999c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 8009a10:	2344      	movs	r3, #68	; 0x44
 8009a12:	fb03 4305 	mla	r3, r3, r5, r4
 8009a16:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8009a1a:	b1d2      	cbz	r2, 8009a52 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 8009a1c:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 8009a20:	42b3      	cmp	r3, r6
 8009a22:	d0bb      	beq.n	800999c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 8009a24:	4632      	mov	r2, r6
 8009a26:	4629      	mov	r1, r5
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f7ff ff5f 	bl	80098ec <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	; (8009a64 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 8009a30:	4630      	mov	r0, r6
 8009a32:	681f      	ldr	r7, [r3, #0]
 8009a34:	f8d4 8000 	ldr.w	r8, [r4]
 8009a38:	f7ff fdae 	bl	8009598 <e131::universe_to_multicast_ip(unsigned short)>
 8009a3c:	4641      	mov	r1, r8
 8009a3e:	4602      	mov	r2, r0
 8009a40:	4638      	mov	r0, r7
 8009a42:	f006 f846 	bl	800fad2 <Network::JoinGroup(int, unsigned int)>
 8009a46:	2344      	movs	r3, #68	; 0x44
 8009a48:	fb03 4305 	mla	r3, r3, r5, r4
 8009a4c:	f8a3 6510 	strh.w	r6, [r3, #1296]	; 0x510
 8009a50:	e7a4      	b.n	800999c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 8009a52:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 8009a56:	3201      	adds	r2, #1
 8009a58:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 8009a62:	e7e4      	b.n	8009a2e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 8009a64:	2000a28c 	andcs	sl, r0, ip, lsl #5

08009a68 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 8009a68:	b953      	cbnz	r3, 8009a80 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 8009a6a:	2903      	cmp	r1, #3
 8009a6c:	d811      	bhi.n	8009a92 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 8009a6e:	230c      	movs	r3, #12
 8009a70:	fb03 0001 	mla	r0, r3, r1, r0
 8009a74:	f8b0 3620 	ldrh.w	r3, [r0, #1568]	; 0x620
 8009a78:	f890 0622 	ldrb.w	r0, [r0, #1570]	; 0x622
 8009a7c:	8013      	strh	r3, [r2, #0]
 8009a7e:	4770      	bx	lr
 8009a80:	2344      	movs	r3, #68	; 0x44
 8009a82:	fb03 0001 	mla	r0, r3, r1, r0
 8009a86:	f8b0 3510 	ldrh.w	r3, [r0, #1296]	; 0x510
 8009a8a:	f890 0512 	ldrb.w	r0, [r0, #1298]	; 0x512
 8009a8e:	8013      	strh	r3, [r2, #0]
 8009a90:	4770      	bx	lr
 8009a92:	4618      	mov	r0, r3
 8009a94:	4770      	bx	lr

08009a96 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 8009a96:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 8009a9a:	b923      	cbnz	r3, 8009aa6 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 8009aa2:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 8009aa6:	2344      	movs	r3, #68	; 0x44
 8009aa8:	fb03 0001 	mla	r0, r3, r1, r0
 8009aac:	2301      	movs	r3, #1
 8009aae:	f880 3551 	strb.w	r3, [r0, #1361]	; 0x551
 8009ab2:	4770      	bx	lr

08009ab4 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	2044      	movs	r0, #68	; 0x44
 8009ab8:	4348      	muls	r0, r1
 8009aba:	b570      	push	{r4, r5, r6, lr}
 8009abc:	1815      	adds	r5, r2, r0
 8009abe:	460c      	mov	r4, r1
 8009ac0:	68d3      	ldr	r3, [r2, #12]
 8009ac2:	f8d5 1514 	ldr.w	r1, [r5, #1300]	; 0x514
 8009ac6:	1a5b      	subs	r3, r3, r1
 8009ac8:	f242 7110 	movw	r1, #10000	; 0x2710
 8009acc:	428b      	cmp	r3, r1
 8009ace:	d90a      	bls.n	8009ae6 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 8009ad0:	2600      	movs	r6, #0
 8009ad2:	f200 501c 	addw	r0, r0, #1308	; 0x51c
 8009ad6:	2110      	movs	r1, #16
 8009ad8:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
 8009adc:	4410      	add	r0, r2
 8009ade:	f7ff fd81 	bl	80095e4 <memset.constprop.0.isra.0>
 8009ae2:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 8009ae6:	2344      	movs	r3, #68	; 0x44
 8009ae8:	435c      	muls	r4, r3
 8009aea:	1915      	adds	r5, r2, r4
 8009aec:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
 8009af0:	68d3      	ldr	r3, [r2, #12]
 8009af2:	1a5b      	subs	r3, r3, r1
 8009af4:	f242 7110 	movw	r1, #10000	; 0x2710
 8009af8:	428b      	cmp	r3, r1
 8009afa:	d90a      	bls.n	8009b12 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 8009afc:	2600      	movs	r6, #0
 8009afe:	f504 64a7 	add.w	r4, r4, #1336	; 0x538
 8009b02:	2110      	movs	r1, #16
 8009b04:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 8009b08:	1910      	adds	r0, r2, r4
 8009b0a:	f7ff fd6b 	bl	80095e4 <memset.constprop.0.isra.0>
 8009b0e:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 8009b12:	f892 1595 	ldrb.w	r1, [r2, #1429]	; 0x595
 8009b16:	f892 3551 	ldrb.w	r3, [r2, #1361]	; 0x551
 8009b1a:	430b      	orrs	r3, r1
 8009b1c:	f892 15d9 	ldrb.w	r1, [r2, #1497]	; 0x5d9
 8009b20:	430b      	orrs	r3, r1
 8009b22:	d107      	bne.n	8009b34 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 8009b24:	f892 361d 	ldrb.w	r3, [r2, #1565]	; 0x61d
 8009b28:	b923      	cbnz	r3, 8009b34 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 8009b30:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 8009b34:	bd70      	pop	{r4, r5, r6, pc}

08009b36 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 8009b36:	2244      	movs	r2, #68	; 0x44
 8009b38:	fb02 0101 	mla	r1, r2, r1, r0
 8009b3c:	68c3      	ldr	r3, [r0, #12]
 8009b3e:	b510      	push	{r4, lr}
 8009b40:	f8d1 2530 	ldr.w	r2, [r1, #1328]	; 0x530
 8009b44:	f8d1 4518 	ldr.w	r4, [r1, #1304]	; 0x518
 8009b48:	f8d1 0534 	ldr.w	r0, [r1, #1332]	; 0x534
 8009b4c:	1a9a      	subs	r2, r3, r2
 8009b4e:	b184      	cbz	r4, 8009b72 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 8009b50:	f8d1 1514 	ldr.w	r1, [r1, #1300]	; 0x514
 8009b54:	1a5b      	subs	r3, r3, r1
 8009b56:	b128      	cbz	r0, 8009b64 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 8009b58:	f242 700f 	movw	r0, #9999	; 0x270f
 8009b5c:	4283      	cmp	r3, r0
 8009b5e:	d90d      	bls.n	8009b7c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 8009b60:	4282      	cmp	r2, r0
 8009b62:	e002      	b.n	8009b6a <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 8009b64:	f242 7010 	movw	r0, #10000	; 0x2710
 8009b68:	4283      	cmp	r3, r0
 8009b6a:	bf94      	ite	ls
 8009b6c:	2000      	movls	r0, #0
 8009b6e:	2001      	movhi	r0, #1
 8009b70:	bd10      	pop	{r4, pc}
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d0fc      	beq.n	8009b70 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 8009b76:	f242 7010 	movw	r0, #10000	; 0x2710
 8009b7a:	e7f1      	b.n	8009b60 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	e7f7      	b.n	8009b70 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

08009b80 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 8009b80:	684a      	ldr	r2, [r1, #4]
 8009b82:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8009b84:	b510      	push	{r4, lr}
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d10d      	bne.n	8009ba6 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 8009b8a:	f100 0392 	add.w	r3, r0, #146	; 0x92
 8009b8e:	3108      	adds	r1, #8
 8009b90:	30a2      	adds	r0, #162	; 0xa2
 8009b92:	4283      	cmp	r3, r0
 8009b94:	d101      	bne.n	8009b9a <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 8009b96:	2001      	movs	r0, #1
 8009b98:	bd10      	pop	{r4, pc}
 8009b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ba2:	4294      	cmp	r4, r2
 8009ba4:	d0f5      	beq.n	8009b92 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	e7f6      	b.n	8009b98 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>
	...

08009bac <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 8009bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	4690      	mov	r8, r2
 8009bb6:	460f      	mov	r7, r1
 8009bb8:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	d03d      	beq.n	8009c3c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 8009bc0:	2a00      	cmp	r2, #0
 8009bc2:	d03b      	beq.n	8009c3c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	f240 6804 	movw	r8, #1540	; 0x604
 8009bca:	4637      	mov	r7, r6
 8009bcc:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 8009bd0:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 8009bd4:	f200 541c 	addw	r4, r0, #1308	; 0x51c
 8009bd8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8009bdc:	b1e3      	cbz	r3, 8009c18 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6c>
 8009bde:	6868      	ldr	r0, [r5, #4]
 8009be0:	4631      	mov	r1, r6
 8009be2:	6803      	ldr	r3, [r0, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	4798      	blx	r3
 8009be8:	2110      	movs	r1, #16
 8009bea:	4620      	mov	r0, r4
 8009bec:	f844 7c04 	str.w	r7, [r4, #-4]
 8009bf0:	f7ff fcf8 	bl	80095e4 <memset.constprop.0.isra.0>
 8009bf4:	2110      	movs	r1, #16
 8009bf6:	f104 001c 	add.w	r0, r4, #28
 8009bfa:	61a7      	str	r7, [r4, #24]
 8009bfc:	f7ff fcf2 	bl	80095e4 <memset.constprop.0.isra.0>
 8009c00:	f7ff fd02 	bl	8009608 <lightset::Data::Get()>
 8009c04:	fb08 0006 	mla	r0, r8, r6, r0
 8009c08:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 8009c0c:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 8009c10:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
 8009c14:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
 8009c18:	3601      	adds	r6, #1
 8009c1a:	2e04      	cmp	r6, #4
 8009c1c:	f104 0444 	add.w	r4, r4, #68	; 0x44
 8009c20:	d1da      	bne.n	8009bd8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 8009c22:	4b25      	ldr	r3, [pc, #148]	; (8009cb8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10c>)
 8009c24:	2102      	movs	r1, #2
 8009c26:	6818      	ldr	r0, [r3, #0]
 8009c28:	f008 f8da 	bl	8011de0 <LedBlink::SetMode(ledblink::Mode)>
 8009c2c:	f895 350d 	ldrb.w	r3, [r5, #1293]	; 0x50d
 8009c30:	f023 0302 	bic.w	r3, r3, #2
 8009c34:	f885 350d 	strb.w	r3, [r5, #1293]	; 0x50d
 8009c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	2600      	movs	r6, #0
 8009c3e:	f240 6b04 	movw	fp, #1540	; 0x604
 8009c42:	46b1      	mov	r9, r6
 8009c44:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 8009c48:	7ea3      	ldrb	r3, [r4, #26]
 8009c4a:	b373      	cbz	r3, 8009caa <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 8009c4c:	b15f      	cbz	r7, 8009c66 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 8009c4e:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8009c52:	b143      	cbz	r3, 8009c66 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 8009c54:	2110      	movs	r1, #16
 8009c56:	f844 9c20 	str.w	r9, [r4, #-32]
 8009c5a:	f1a4 001c 	sub.w	r0, r4, #28
 8009c5e:	f7ff fcc1 	bl	80095e4 <memset.constprop.0.isra.0>
 8009c62:	f884 9019 	strb.w	r9, [r4, #25]
 8009c66:	f1b8 0f00 	cmp.w	r8, #0
 8009c6a:	d00a      	beq.n	8009c82 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 8009c6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009c70:	b13b      	cbz	r3, 8009c82 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 8009c72:	2110      	movs	r1, #16
 8009c74:	4620      	mov	r0, r4
 8009c76:	f844 9c04 	str.w	r9, [r4, #-4]
 8009c7a:	f7ff fcb3 	bl	80095e4 <memset.constprop.0.isra.0>
 8009c7e:	f884 9019 	strb.w	r9, [r4, #25]
 8009c82:	f895 a4f5 	ldrb.w	sl, [r5, #1269]	; 0x4f5
 8009c86:	f1ba 0f00 	cmp.w	sl, #0
 8009c8a:	d10e      	bne.n	8009caa <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 8009c8c:	6868      	ldr	r0, [r5, #4]
 8009c8e:	4631      	mov	r1, r6
 8009c90:	6803      	ldr	r3, [r0, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	4798      	blx	r3
 8009c96:	f7ff fcb7 	bl	8009608 <lightset::Data::Get()>
 8009c9a:	fb0b 0006 	mla	r0, fp, r6, r0
 8009c9e:	f8c0 a600 	str.w	sl, [r0, #1536]	; 0x600
 8009ca2:	f884 a018 	strb.w	sl, [r4, #24]
 8009ca6:	f884 a01a 	strb.w	sl, [r4, #26]
 8009caa:	3601      	adds	r6, #1
 8009cac:	2e04      	cmp	r6, #4
 8009cae:	f104 0444 	add.w	r4, r4, #68	; 0x44
 8009cb2:	d1c9      	bne.n	8009c48 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9c>
 8009cb4:	e7b5      	b.n	8009c22 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x76>
 8009cb6:	bf00      	nop
 8009cb8:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0

08009cbc <E131Bridge::HandleDmx()>:
 8009cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	2600      	movs	r6, #0
 8009cc4:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 8009cc8:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 8009ccc:	ba7f      	rev16	r7, r7
 8009cce:	b2bf      	uxth	r7, r7
 8009cd0:	3f01      	subs	r7, #1
 8009cd2:	f200 551c 	addw	r5, r0, #1308	; 0x51c
 8009cd6:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 8009cda:	b353      	cbz	r3, 8009d32 <E131Bridge::HandleDmx()+0x76>
 8009cdc:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 8009ce0:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 8009ce4:	ba5b      	rev16	r3, r3
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d122      	bne.n	8009d32 <E131Bridge::HandleDmx()+0x76>
 8009cec:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8009cf0:	f1a5 0108 	sub.w	r1, r5, #8
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	f7ff ff42 	bl	8009b80 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 8009cfc:	f105 0114 	add.w	r1, r5, #20
 8009d00:	4682      	mov	sl, r0
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7ff ff3c 	bl	8009b80 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 8009d08:	f8d5 b018 	ldr.w	fp, [r5, #24]
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	f1ba 0f00 	cmp.w	sl, #0
 8009d12:	d016      	beq.n	8009d42 <E131Bridge::HandleDmx()+0x86>
 8009d14:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009d18:	7c2a      	ldrb	r2, [r5, #16]
 8009d1a:	742b      	strb	r3, [r5, #16]
 8009d1c:	3313      	adds	r3, #19
 8009d1e:	1a9b      	subs	r3, r3, r2
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b13      	cmp	r3, #19
 8009d24:	d905      	bls.n	8009d32 <E131Bridge::HandleDmx()+0x76>
 8009d26:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 8009d2a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 8009d2e:	2a00      	cmp	r2, #0
 8009d30:	da10      	bge.n	8009d54 <E131Bridge::HandleDmx()+0x98>
 8009d32:	3601      	adds	r6, #1
 8009d34:	2e04      	cmp	r6, #4
 8009d36:	f105 0544 	add.w	r5, r5, #68	; 0x44
 8009d3a:	d1cc      	bne.n	8009cd6 <E131Bridge::HandleDmx()+0x1a>
 8009d3c:	b003      	add	sp, #12
 8009d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d42:	2800      	cmp	r0, #0
 8009d44:	d0ef      	beq.n	8009d26 <E131Bridge::HandleDmx()+0x6a>
 8009d46:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009d4a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 8009d4e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 8009d52:	e7e3      	b.n	8009d1c <E131Bridge::HandleDmx()+0x60>
 8009d54:	065a      	lsls	r2, r3, #25
 8009d56:	d50b      	bpl.n	8009d70 <E131Bridge::HandleDmx()+0xb4>
 8009d58:	f1ba 0f00 	cmp.w	sl, #0
 8009d5c:	d102      	bne.n	8009d64 <E131Bridge::HandleDmx()+0xa8>
 8009d5e:	f1b8 0f00 	cmp.w	r8, #0
 8009d62:	d0e6      	beq.n	8009d32 <E131Bridge::HandleDmx()+0x76>
 8009d64:	4642      	mov	r2, r8
 8009d66:	4651      	mov	r1, sl
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f7ff ff1f 	bl	8009bac <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 8009d6e:	e7e0      	b.n	8009d32 <E131Bridge::HandleDmx()+0x76>
 8009d70:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 8009d74:	b133      	cbz	r3, 8009d84 <E131Bridge::HandleDmx()+0xc8>
 8009d76:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 8009d7a:	b91b      	cbnz	r3, 8009d84 <E131Bridge::HandleDmx()+0xc8>
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f7ff fe98 	bl	8009ab4 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 8009d84:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 8009d88:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d259      	bcs.n	8009e44 <E131Bridge::HandleDmx()+0x188>
 8009d90:	4631      	mov	r1, r6
 8009d92:	4620      	mov	r0, r4
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	f7ff fece 	bl	8009b36 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d0c9      	beq.n	8009d32 <E131Bridge::HandleDmx()+0x76>
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 8009da4:	9b00      	ldr	r3, [sp, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d154      	bne.n	8009e54 <E131Bridge::HandleDmx()+0x198>
 8009daa:	f1bb 0f00 	cmp.w	fp, #0
 8009dae:	d15c      	bne.n	8009e6a <E131Bridge::HandleDmx()+0x1ae>
 8009db0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009db2:	2210      	movs	r2, #16
 8009db4:	f845 3c04 	str.w	r3, [r5, #-4]
 8009db8:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	742b      	strb	r3, [r5, #16]
 8009dc0:	f104 0192 	add.w	r1, r4, #146	; 0x92
 8009dc4:	f7ff fc16 	bl	80095f4 <memcpy.isra.0>
 8009dc8:	68e3      	ldr	r3, [r4, #12]
 8009dca:	463a      	mov	r2, r7
 8009dcc:	4649      	mov	r1, r9
 8009dce:	4630      	mov	r0, r6
 8009dd0:	f845 3c08 	str.w	r3, [r5, #-8]
 8009dd4:	f7ff fc24 	bl	8009620 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 8009dd8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 8009ddc:	069b      	lsls	r3, r3, #26
 8009dde:	f100 80ad 	bmi.w	8009f3c <E131Bridge::HandleDmx()+0x280>
 8009de2:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	2a00      	cmp	r2, #0
 8009dea:	f000 80ab 	beq.w	8009f44 <E131Bridge::HandleDmx()+0x288>
 8009dee:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 8009df2:	2a00      	cmp	r2, #0
 8009df4:	f040 80a6 	bne.w	8009f44 <E131Bridge::HandleDmx()+0x288>
 8009df8:	ba5b      	rev16	r3, r3
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	f1ba 0f00 	cmp.w	sl, #0
 8009e00:	f040 8099 	bne.w	8009f36 <E131Bridge::HandleDmx()+0x27a>
 8009e04:	f1b8 0f00 	cmp.w	r8, #0
 8009e08:	f040 8095 	bne.w	8009f36 <E131Bridge::HandleDmx()+0x27a>
 8009e0c:	69aa      	ldr	r2, [r5, #24]
 8009e0e:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8009e12:	3a00      	subs	r2, #0
 8009e14:	bf18      	it	ne
 8009e16:	2201      	movne	r2, #1
 8009e18:	3900      	subs	r1, #0
 8009e1a:	bf18      	it	ne
 8009e1c:	2101      	movne	r1, #1
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f7ff fd84 	bl	800992c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 8009e24:	f240 1301 	movw	r3, #257	; 0x101
 8009e28:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 8009e2c:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 808c 	bne.w	8009f4e <E131Bridge::HandleDmx()+0x292>
 8009e36:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 8009e3a:	f043 0302 	orr.w	r3, r3, #2
 8009e3e:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 8009e42:	e776      	b.n	8009d32 <E131Bridge::HandleDmx()+0x76>
 8009e44:	d9ae      	bls.n	8009da4 <E131Bridge::HandleDmx()+0xe8>
 8009e46:	2200      	movs	r2, #0
 8009e48:	f845 2c04 	str.w	r2, [r5, #-4]
 8009e4c:	61aa      	str	r2, [r5, #24]
 8009e4e:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 8009e52:	e7a5      	b.n	8009da0 <E131Bridge::HandleDmx()+0xe4>
 8009e54:	f1ba 0f00 	cmp.w	sl, #0
 8009e58:	f000 8092 	beq.w	8009f80 <E131Bridge::HandleDmx()+0x2c4>
 8009e5c:	f1bb 0f00 	cmp.w	fp, #0
 8009e60:	d15c      	bne.n	8009f1c <E131Bridge::HandleDmx()+0x260>
 8009e62:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009e66:	742b      	strb	r3, [r5, #16]
 8009e68:	e7ae      	b.n	8009dc8 <E131Bridge::HandleDmx()+0x10c>
 8009e6a:	f1b8 0f00 	cmp.w	r8, #0
 8009e6e:	d03b      	beq.n	8009ee8 <E131Bridge::HandleDmx()+0x22c>
 8009e70:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009e74:	f240 6b04 	movw	fp, #1540	; 0x604
 8009e78:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 8009e7c:	68e3      	ldr	r3, [r4, #12]
 8009e7e:	fb0b fb06 	mul.w	fp, fp, r6
 8009e82:	616b      	str	r3, [r5, #20]
 8009e84:	f7ff fbc0 	bl	8009608 <lightset::Data::Get()>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	f50b 7000 	add.w	r0, fp, #512	; 0x200
 8009e8e:	463a      	mov	r2, r7
 8009e90:	4649      	mov	r1, r9
 8009e92:	4418      	add	r0, r3
 8009e94:	9300      	str	r3, [sp, #0]
 8009e96:	f7ff fbad 	bl	80095f4 <memcpy.isra.0>
 8009e9a:	9b00      	ldr	r3, [sp, #0]
 8009e9c:	f50b 6080 	add.w	r0, fp, #1024	; 0x400
 8009ea0:	eb03 020b 	add.w	r2, r3, fp
 8009ea4:	f8c2 7600 	str.w	r7, [r2, #1536]	; 0x600
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	463a      	mov	r2, r7
 8009eac:	4418      	add	r0, r3
 8009eae:	f7ff fba1 	bl	80095f4 <memcpy.isra.0>
 8009eb2:	e791      	b.n	8009dd8 <E131Bridge::HandleDmx()+0x11c>
 8009eb4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009eb6:	2210      	movs	r2, #16
 8009eb8:	61ab      	str	r3, [r5, #24]
 8009eba:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009ebe:	f104 0192 	add.w	r1, r4, #146	; 0x92
 8009ec2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 8009ec6:	f105 001c 	add.w	r0, r5, #28
 8009eca:	f7ff fb93 	bl	80095f4 <memcpy.isra.0>
 8009ece:	68e3      	ldr	r3, [r4, #12]
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	616b      	str	r3, [r5, #20]
 8009ed6:	f7ff fdde 	bl	8009a96 <E131Bridge::UpdateMergeStatus(unsigned int)>
 8009eda:	463a      	mov	r2, r7
 8009edc:	4649      	mov	r1, r9
 8009ede:	4630      	mov	r0, r6
 8009ee0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009ee2:	f7ff fbe3 	bl	80096ac <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 8009ee6:	e777      	b.n	8009dd8 <E131Bridge::HandleDmx()+0x11c>
 8009ee8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009eea:	2210      	movs	r2, #16
 8009eec:	f845 3c04 	str.w	r3, [r5, #-4]
 8009ef0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	742b      	strb	r3, [r5, #16]
 8009ef8:	f104 0192 	add.w	r1, r4, #146	; 0x92
 8009efc:	f7ff fb7a 	bl	80095f4 <memcpy.isra.0>
 8009f00:	68e3      	ldr	r3, [r4, #12]
 8009f02:	4631      	mov	r1, r6
 8009f04:	4620      	mov	r0, r4
 8009f06:	f845 3c08 	str.w	r3, [r5, #-8]
 8009f0a:	f7ff fdc4 	bl	8009a96 <E131Bridge::UpdateMergeStatus(unsigned int)>
 8009f0e:	463a      	mov	r2, r7
 8009f10:	4649      	mov	r1, r9
 8009f12:	4630      	mov	r0, r6
 8009f14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009f16:	f7ff fba0 	bl	800965a <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 8009f1a:	e75d      	b.n	8009dd8 <E131Bridge::HandleDmx()+0x11c>
 8009f1c:	f1b8 0f00 	cmp.w	r8, #0
 8009f20:	d103      	bne.n	8009f2a <E131Bridge::HandleDmx()+0x26e>
 8009f22:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009f26:	742b      	strb	r3, [r5, #16]
 8009f28:	e7ea      	b.n	8009f00 <E131Bridge::HandleDmx()+0x244>
 8009f2a:	481b      	ldr	r0, [pc, #108]	; (8009f98 <E131Bridge::HandleDmx()+0x2dc>)
 8009f2c:	b003      	add	sp, #12
 8009f2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f32:	f7ff b97b 	b.w	800922c <printf>
 8009f36:	4642      	mov	r2, r8
 8009f38:	4651      	mov	r1, sl
 8009f3a:	e770      	b.n	8009e1e <E131Bridge::HandleDmx()+0x162>
 8009f3c:	f04f 0300 	mov.w	r3, #0
 8009f40:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 8009f44:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f47f af6f 	bne.w	8009e2c <E131Bridge::HandleDmx()+0x170>
 8009f4e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8009f52:	f7ff fb59 	bl	8009608 <lightset::Data::Get()>
 8009f56:	4632      	mov	r2, r6
 8009f58:	4641      	mov	r1, r8
 8009f5a:	f7ff fbd1 	bl	8009700 <lightset::Data::IOutput(LightSet*, unsigned int) const>
 8009f5e:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f47f af67 	bne.w	8009e36 <E131Bridge::HandleDmx()+0x17a>
 8009f68:	6860      	ldr	r0, [r4, #4]
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	6803      	ldr	r3, [r0, #0]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	4798      	blx	r3
 8009f72:	f04f 0301 	mov.w	r3, #1
 8009f76:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 8009f7a:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 8009f7e:	e75a      	b.n	8009e36 <E131Bridge::HandleDmx()+0x17a>
 8009f80:	f1bb 0f00 	cmp.w	fp, #0
 8009f84:	d096      	beq.n	8009eb4 <E131Bridge::HandleDmx()+0x1f8>
 8009f86:	f1b8 0f00 	cmp.w	r8, #0
 8009f8a:	d0ce      	beq.n	8009f2a <E131Bridge::HandleDmx()+0x26e>
 8009f8c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009f90:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 8009f94:	e79b      	b.n	8009ece <E131Bridge::HandleDmx()+0x212>
 8009f96:	bf00      	nop
 8009f98:	080143d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, lr}

08009f9c <E131Bridge::IsValidRoot()>:
 8009f9c:	b530      	push	{r4, r5, lr}
 8009f9e:	4a0d      	ldr	r2, [pc, #52]	; (8009fd4 <E131Bridge::IsValidRoot()+0x38>)
 8009fa0:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8009fa4:	f100 018c 	add.w	r1, r0, #140	; 0x8c
 8009fa8:	4299      	cmp	r1, r3
 8009faa:	d109      	bne.n	8009fc0 <E131Bridge::IsValidRoot()+0x24>
 8009fac:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 8009fb0:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8009fb4:	d00c      	beq.n	8009fd0 <E131Bridge::IsValidRoot()+0x34>
 8009fb6:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 8009fba:	4258      	negs	r0, r3
 8009fbc:	4158      	adcs	r0, r3
 8009fbe:	bd30      	pop	{r4, r5, pc}
 8009fc0:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009fc4:	f812 4b01 	ldrb.w	r4, [r2], #1
 8009fc8:	42a5      	cmp	r5, r4
 8009fca:	d0ed      	beq.n	8009fa8 <E131Bridge::IsValidRoot()+0xc>
 8009fcc:	2000      	movs	r0, #0
 8009fce:	e7f6      	b.n	8009fbe <E131Bridge::IsValidRoot()+0x22>
 8009fd0:	2001      	movs	r0, #1
 8009fd2:	e7f4      	b.n	8009fbe <E131Bridge::IsValidRoot()+0x22>
 8009fd4:	080145bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, lr}

08009fd8 <E131Bridge::IsValidDataPacket()>:
 8009fd8:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d10d      	bne.n	8009ffc <E131Bridge::IsValidDataPacket()+0x24>
 8009fe0:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 8009fe4:	2ba1      	cmp	r3, #161	; 0xa1
 8009fe6:	d109      	bne.n	8009ffc <E131Bridge::IsValidDataPacket()+0x24>
 8009fe8:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 8009fec:	b933      	cbnz	r3, 8009ffc <E131Bridge::IsValidDataPacket()+0x24>
 8009fee:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 8009ff2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8009ff6:	4258      	negs	r0, r3
 8009ff8:	4158      	adcs	r0, r3
 8009ffa:	4770      	bx	lr
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	4770      	bx	lr

0800a000 <E131Bridge::Run()>:
 800a000:	b530      	push	{r4, r5, lr}
 800a002:	4601      	mov	r1, r0
 800a004:	4604      	mov	r4, r0
 800a006:	b085      	sub	sp, #20
 800a008:	f10d 030e 	add.w	r3, sp, #14
 800a00c:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800a010:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800a01a:	f005 f827 	bl	800f06c <udp_recv>
 800a01e:	4b3c      	ldr	r3, [pc, #240]	; (800a110 <E131Bridge::Run()+0x110>)
 800a020:	681d      	ldr	r5, [r3, #0]
 800a022:	60e5      	str	r5, [r4, #12]
 800a024:	2800      	cmp	r0, #0
 800a026:	d13b      	bne.n	800a0a0 <E131Bridge::Run()+0xa0>
 800a028:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800a02c:	b183      	cbz	r3, 800a050 <E131Bridge::Run()+0x50>
 800a02e:	f894 24f9 	ldrb.w	r2, [r4, #1273]	; 0x4f9
 800a032:	6923      	ldr	r3, [r4, #16]
 800a034:	bb6a      	cbnz	r2, 800a092 <E131Bridge::Run()+0x92>
 800a036:	1aed      	subs	r5, r5, r3
 800a038:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800a03c:	429d      	cmp	r5, r3
 800a03e:	d928      	bls.n	800a092 <E131Bridge::Run()+0x92>
 800a040:	6863      	ldr	r3, [r4, #4]
 800a042:	b9eb      	cbnz	r3, 800a080 <E131Bridge::Run()+0x80>
 800a044:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800a048:	f023 0302 	bic.w	r3, r3, #2
 800a04c:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800a050:	6963      	ldr	r3, [r4, #20]
 800a052:	b12b      	cbz	r3, 800a060 <E131Bridge::Run()+0x60>
 800a054:	4620      	mov	r0, r4
 800a056:	f000 f94f 	bl	800a2f8 <E131Bridge::HandleDmxIn()>
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 f8ca 	bl	800a1f4 <E131Bridge::SendDiscoveryPacket()>
 800a060:	7a23      	ldrb	r3, [r4, #8]
 800a062:	b15b      	cbz	r3, 800a07c <E131Bridge::Run()+0x7c>
 800a064:	4b2b      	ldr	r3, [pc, #172]	; (800a114 <E131Bridge::Run()+0x114>)
 800a066:	6818      	ldr	r0, [r3, #0]
 800a068:	6843      	ldr	r3, [r0, #4]
 800a06a:	2b04      	cmp	r3, #4
 800a06c:	d006      	beq.n	800a07c <E131Bridge::Run()+0x7c>
 800a06e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800a072:	2b00      	cmp	r3, #0
 800a074:	d049      	beq.n	800a10a <E131Bridge::Run()+0x10a>
 800a076:	2103      	movs	r1, #3
 800a078:	f007 feb2 	bl	8011de0 <LedBlink::SetMode(ledblink::Mode)>
 800a07c:	b005      	add	sp, #20
 800a07e:	bd30      	pop	{r4, r5, pc}
 800a080:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1dd      	bne.n	800a044 <E131Bridge::Run()+0x44>
 800a088:	2201      	movs	r2, #1
 800a08a:	4620      	mov	r0, r4
 800a08c:	4611      	mov	r1, r2
 800a08e:	f7ff fd8d 	bl	8009bac <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800a092:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800a096:	1a9b      	subs	r3, r3, r2
 800a098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a09c:	d3d8      	bcc.n	800a050 <E131Bridge::Run()+0x50>
 800a09e:	e7d1      	b.n	800a044 <E131Bridge::Run()+0x44>
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f7ff ff7b 	bl	8009f9c <E131Bridge::IsValidRoot()>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	d0e8      	beq.n	800a07c <E131Bridge::Run()+0x7c>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800a0b0:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800a0b4:	6125      	str	r5, [r4, #16]
 800a0b6:	b15b      	cbz	r3, 800a0d0 <E131Bridge::Run()+0xd0>
 800a0b8:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800a0bc:	b943      	cbnz	r3, 800a0d0 <E131Bridge::Run()+0xd0>
 800a0be:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800a0c2:	1aad      	subs	r5, r5, r2
 800a0c4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800a0c8:	4295      	cmp	r5, r2
 800a0ca:	bf88      	it	hi
 800a0cc:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800a0d0:	6863      	ldr	r3, [r4, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0bc      	beq.n	800a050 <E131Bridge::Run()+0x50>
 800a0d6:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800a0da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0de:	ba1a      	rev	r2, r3
 800a0e0:	d108      	bne.n	800a0f4 <E131Bridge::Run()+0xf4>
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f7ff ff78 	bl	8009fd8 <E131Bridge::IsValidDataPacket()>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d0b1      	beq.n	800a050 <E131Bridge::Run()+0x50>
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f7ff fde5 	bl	8009cbc <E131Bridge::HandleDmx()>
 800a0f2:	e7ad      	b.n	800a050 <E131Bridge::Run()+0x50>
 800a0f4:	2a08      	cmp	r2, #8
 800a0f6:	d1ab      	bne.n	800a050 <E131Bridge::Run()+0x50>
 800a0f8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800a0fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a100:	d1a6      	bne.n	800a050 <E131Bridge::Run()+0x50>
 800a102:	4620      	mov	r0, r4
 800a104:	f000 f976 	bl	800a3f4 <E131Bridge::HandleSynchronization()>
 800a108:	e7a2      	b.n	800a050 <E131Bridge::Run()+0x50>
 800a10a:	2102      	movs	r1, #2
 800a10c:	e7b4      	b.n	800a078 <E131Bridge::Run()+0x78>
 800a10e:	bf00      	nop
 800a110:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800a114:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0

0800a118 <E131Bridge::FillDiscoveryPacket()>:
 800a118:	2200      	movs	r2, #0
 800a11a:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800a11e:	b510      	push	{r4, lr}
 800a120:	333c      	adds	r3, #60	; 0x3c
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800a128:	69c3      	ldr	r3, [r0, #28]
 800a12a:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800a12e:	428b      	cmp	r3, r1
 800a130:	d14b      	bne.n	800a1ca <E131Bridge::FillDiscoveryPacket()+0xb2>
 800a132:	69c3      	ldr	r3, [r0, #28]
 800a134:	492e      	ldr	r1, [pc, #184]	; (800a1f0 <E131Bridge::FillDiscoveryPacket()+0xd8>)
 800a136:	701a      	strb	r2, [r3, #0]
 800a138:	2210      	movs	r2, #16
 800a13a:	705a      	strb	r2, [r3, #1]
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	3310      	adds	r3, #16
 800a140:	4293      	cmp	r3, r2
 800a142:	d145      	bne.n	800a1d0 <E131Bridge::FillDiscoveryPacket()+0xb8>
 800a144:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800a148:	69c3      	ldr	r3, [r0, #28]
 800a14a:	3234      	adds	r2, #52	; 0x34
 800a14c:	0052      	lsls	r2, r2, #1
 800a14e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800a152:	ba52      	rev16	r2, r2
 800a154:	821a      	strh	r2, [r3, #16]
 800a156:	2200      	movs	r2, #0
 800a158:	749a      	strb	r2, [r3, #18]
 800a15a:	74da      	strb	r2, [r3, #19]
 800a15c:	751a      	strb	r2, [r3, #20]
 800a15e:	2208      	movs	r2, #8
 800a160:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800a164:	755a      	strb	r2, [r3, #21]
 800a166:	3316      	adds	r3, #22
 800a168:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800a16c:	4291      	cmp	r1, r2
 800a16e:	d134      	bne.n	800a1da <E131Bridge::FillDiscoveryPacket()+0xc2>
 800a170:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800a174:	69c3      	ldr	r3, [r0, #28]
 800a176:	3229      	adds	r2, #41	; 0x29
 800a178:	0052      	lsls	r2, r2, #1
 800a17a:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800a17e:	ba52      	rev16	r2, r2
 800a180:	84da      	strh	r2, [r3, #38]	; 0x26
 800a182:	2200      	movs	r2, #0
 800a184:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a188:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800a18c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800a190:	2202      	movs	r2, #2
 800a192:	332c      	adds	r3, #44	; 0x2c
 800a194:	f803 2c01 	strb.w	r2, [r3, #-1]
 800a198:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800a19c:	4291      	cmp	r1, r2
 800a19e:	d121      	bne.n	800a1e4 <E131Bridge::FillDiscoveryPacket()+0xcc>
 800a1a0:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800a1a4:	69c2      	ldr	r2, [r0, #28]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	005b      	lsls	r3, r3, #1
 800a1aa:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a1ae:	ba5b      	rev16	r3, r3
 800a1b0:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800a1ba:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800a1be:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800a1c8:	bd10      	pop	{r4, pc}
 800a1ca:	f803 2b01 	strb.w	r2, [r3], #1
 800a1ce:	e7ae      	b.n	800a12e <E131Bridge::FillDiscoveryPacket()+0x16>
 800a1d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1d4:	f802 4b01 	strb.w	r4, [r2], #1
 800a1d8:	e7b2      	b.n	800a140 <E131Bridge::FillDiscoveryPacket()+0x28>
 800a1da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1de:	f803 4b01 	strb.w	r4, [r3], #1
 800a1e2:	e7c3      	b.n	800a16c <E131Bridge::FillDiscoveryPacket()+0x54>
 800a1e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1e8:	f803 4b01 	strb.w	r4, [r3], #1
 800a1ec:	e7d6      	b.n	800a19c <E131Bridge::FillDiscoveryPacket()+0x84>
 800a1ee:	bf00      	nop
 800a1f0:	080145bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, lr}

0800a1f4 <E131Bridge::SendDiscoveryPacket()>:
 800a1f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a1f6:	f242 710f 	movw	r1, #9999	; 0x270f
 800a1fa:	68c2      	ldr	r2, [r0, #12]
 800a1fc:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800a200:	4604      	mov	r4, r0
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	428b      	cmp	r3, r1
 800a206:	d924      	bls.n	800a252 <E131Bridge::SendDiscoveryPacket()+0x5e>
 800a208:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800a20c:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800a210:	b1ab      	cbz	r3, 800a23e <E131Bridge::SendDiscoveryPacket()+0x4a>
 800a212:	2500      	movs	r5, #0
 800a214:	462e      	mov	r6, r5
 800a216:	2300      	movs	r3, #0
 800a218:	4629      	mov	r1, r5
 800a21a:	4620      	mov	r0, r4
 800a21c:	f10d 020e 	add.w	r2, sp, #14
 800a220:	f7ff fc22 	bl	8009a68 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800a224:	b140      	cbz	r0, 800a238 <E131Bridge::SendDiscoveryPacket()+0x44>
 800a226:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800a22a:	69e2      	ldr	r2, [r4, #28]
 800a22c:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800a230:	ba5b      	rev16	r3, r3
 800a232:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800a236:	3601      	adds	r6, #1
 800a238:	3501      	adds	r5, #1
 800a23a:	2d04      	cmp	r5, #4
 800a23c:	d1eb      	bne.n	800a216 <E131Bridge::SendDiscoveryPacket()+0x22>
 800a23e:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800a242:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	69e1      	ldr	r1, [r4, #28]
 800a24a:	6a23      	ldr	r3, [r4, #32]
 800a24c:	7820      	ldrb	r0, [r4, #0]
 800a24e:	f004 ff69 	bl	800f124 <udp_send>
 800a252:	b004      	add	sp, #16
 800a254:	bd70      	pop	{r4, r5, r6, pc}

0800a256 <memcpy.isra.0>:
 800a256:	3801      	subs	r0, #1
 800a258:	440a      	add	r2, r1
 800a25a:	4291      	cmp	r1, r2
 800a25c:	d100      	bne.n	800a260 <memcpy.isra.0+0xa>
 800a25e:	4770      	bx	lr
 800a260:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a264:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a268:	e7f7      	b.n	800a25a <memcpy.isra.0+0x4>
	...

0800a26c <E131Bridge::FillDataPacket()>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	2400      	movs	r4, #0
 800a270:	2610      	movs	r6, #16
 800a272:	4605      	mov	r5, r0
 800a274:	6980      	ldr	r0, [r0, #24]
 800a276:	220c      	movs	r2, #12
 800a278:	7046      	strb	r6, [r0, #1]
 800a27a:	7004      	strb	r4, [r0, #0]
 800a27c:	7084      	strb	r4, [r0, #2]
 800a27e:	70c4      	strb	r4, [r0, #3]
 800a280:	491c      	ldr	r1, [pc, #112]	; (800a2f4 <E131Bridge::FillDataPacket()+0x88>)
 800a282:	3004      	adds	r0, #4
 800a284:	f7ff ffe7 	bl	800a256 <memcpy.isra.0>
 800a288:	2304      	movs	r3, #4
 800a28a:	4632      	mov	r2, r6
 800a28c:	2602      	movs	r6, #2
 800a28e:	69a8      	ldr	r0, [r5, #24]
 800a290:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800a294:	7543      	strb	r3, [r0, #21]
 800a296:	7484      	strb	r4, [r0, #18]
 800a298:	74c4      	strb	r4, [r0, #19]
 800a29a:	7504      	strb	r4, [r0, #20]
 800a29c:	3016      	adds	r0, #22
 800a29e:	f7ff ffda 	bl	800a256 <memcpy.isra.0>
 800a2a2:	69a8      	ldr	r0, [r5, #24]
 800a2a4:	2240      	movs	r2, #64	; 0x40
 800a2a6:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800a2aa:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800a2ae:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800a2b2:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800a2b6:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800a2ba:	302c      	adds	r0, #44	; 0x2c
 800a2bc:	f7ff ffcb 	bl	800a256 <memcpy.isra.0>
 800a2c0:	22a1      	movs	r2, #161	; 0xa1
 800a2c2:	69ab      	ldr	r3, [r5, #24]
 800a2c4:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800a2c8:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800a2cc:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800a2d0:	69ab      	ldr	r3, [r5, #24]
 800a2d2:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800a2d6:	69ab      	ldr	r3, [r5, #24]
 800a2d8:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800a2dc:	2201      	movs	r2, #1
 800a2de:	69ab      	ldr	r3, [r5, #24]
 800a2e0:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800a2e4:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800a2e8:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800a2ec:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
 800a2f2:	bf00      	nop
 800a2f4:	080145bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, lr}

0800a2f8 <E131Bridge::HandleDmxIn()>:
 800a2f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	4605      	mov	r5, r0
 800a300:	2600      	movs	r6, #0
 800a302:	4f3b      	ldr	r7, [pc, #236]	; (800a3f0 <E131Bridge::HandleDmxIn()+0xf8>)
 800a304:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d058      	beq.n	800a3be <E131Bridge::HandleDmxIn()+0xc6>
 800a30c:	6960      	ldr	r0, [r4, #20]
 800a30e:	4631      	mov	r1, r6
 800a310:	6803      	ldr	r3, [r0, #0]
 800a312:	aa02      	add	r2, sp, #8
 800a314:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800a318:	ab03      	add	r3, sp, #12
 800a31a:	47c0      	blx	r8
 800a31c:	4601      	mov	r1, r0
 800a31e:	2800      	cmp	r0, #0
 800a320:	d055      	beq.n	800a3ce <E131Bridge::HandleDmxIn()+0xd6>
 800a322:	9a02      	ldr	r2, [sp, #8]
 800a324:	69a0      	ldr	r0, [r4, #24]
 800a326:	b293      	uxth	r3, r2
 800a328:	f103 0c6d 	add.w	ip, r3, #109	; 0x6d
 800a32c:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800a330:	fa9c fc9c 	rev16.w	ip, ip
 800a334:	f8a0 c010 	strh.w	ip, [r0, #16]
 800a338:	f103 0c57 	add.w	ip, r3, #87	; 0x57
 800a33c:	f44c 4ce0 	orr.w	ip, ip, #28672	; 0x7000
 800a340:	fa9c fc9c 	rev16.w	ip, ip
 800a344:	f8a0 c026 	strh.w	ip, [r0, #38]	; 0x26
 800a348:	f895 c629 	ldrb.w	ip, [r5, #1577]	; 0x629
 800a34c:	330a      	adds	r3, #10
 800a34e:	f880 c06c 	strb.w	ip, [r0, #108]	; 0x6c
 800a352:	f895 c628 	ldrb.w	ip, [r5, #1576]	; 0x628
 800a356:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800a35a:	f10c 0001 	add.w	r0, ip, #1
 800a35e:	f885 0628 	strb.w	r0, [r5, #1576]	; 0x628
 800a362:	69a0      	ldr	r0, [r4, #24]
 800a364:	ba5b      	rev16	r3, r3
 800a366:	f880 c06f 	strb.w	ip, [r0, #111]	; 0x6f
 800a36a:	f8b5 c620 	ldrh.w	ip, [r5, #1568]	; 0x620
 800a36e:	69a0      	ldr	r0, [r4, #24]
 800a370:	fa9c fc9c 	rev16.w	ip, ip
 800a374:	f8a0 c071 	strh.w	ip, [r0, #113]	; 0x71
 800a378:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800a37c:	307d      	adds	r0, #125	; 0x7d
 800a37e:	f7ff ff6a 	bl	800a256 <memcpy.isra.0>
 800a382:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800a386:	69a1      	ldr	r1, [r4, #24]
 800a388:	ba53      	rev16	r3, r2
 800a38a:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800a38e:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800a392:	327d      	adds	r2, #125	; 0x7d
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 800a39a:	b292      	uxth	r2, r2
 800a39c:	7820      	ldrb	r0, [r4, #0]
 800a39e:	f004 fec1 	bl	800f124 <udp_send>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	683a      	ldr	r2, [r7, #0]
 800a3a6:	40b3      	lsls	r3, r6
 800a3a8:	ea33 0102 	bics.w	r1, r3, r2
 800a3ac:	d007      	beq.n	800a3be <E131Bridge::HandleDmxIn()+0xc6>
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	603b      	str	r3, [r7, #0]
 800a3b2:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800a3b6:	f043 0301 	orr.w	r3, r3, #1
 800a3ba:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800a3be:	3601      	adds	r6, #1
 800a3c0:	2e04      	cmp	r6, #4
 800a3c2:	f105 050c 	add.w	r5, r5, #12
 800a3c6:	d19d      	bne.n	800a304 <E131Bridge::HandleDmxIn()+0xc>
 800a3c8:	b004      	add	sp, #16
 800a3ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ce:	9b03      	ldr	r3, [sp, #12]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1f4      	bne.n	800a3be <E131Bridge::HandleDmxIn()+0xc6>
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	40b2      	lsls	r2, r6
 800a3da:	ea23 0302 	bic.w	r3, r3, r2
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1ec      	bne.n	800a3be <E131Bridge::HandleDmxIn()+0xc6>
 800a3e4:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800a3e8:	f023 0301 	bic.w	r3, r3, #1
 800a3ec:	e7e5      	b.n	800a3ba <E131Bridge::HandleDmxIn()+0xc2>
 800a3ee:	bf00      	nop
 800a3f0:	20001904 	andcs	r1, r0, r4, lsl #18

0800a3f4 <E131Bridge::HandleSynchronization()>:
 800a3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f8:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800a3fc:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800a400:	ba5b      	rev16	r3, r3
 800a402:	b29b      	uxth	r3, r3
 800a404:	429a      	cmp	r2, r3
 800a406:	4604      	mov	r4, r0
 800a408:	d00a      	beq.n	800a420 <E131Bridge::HandleSynchronization()+0x2c>
 800a40a:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800a40e:	429a      	cmp	r2, r3
 800a410:	d006      	beq.n	800a420 <E131Bridge::HandleSynchronization()+0x2c>
 800a412:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a416:	4b23      	ldr	r3, [pc, #140]	; (800a4a4 <E131Bridge::HandleSynchronization()+0xb0>)
 800a418:	2102      	movs	r1, #2
 800a41a:	6818      	ldr	r0, [r3, #0]
 800a41c:	f007 bce0 	b.w	8011de0 <LedBlink::SetMode(ledblink::Mode)>
 800a420:	2500      	movs	r5, #0
 800a422:	4627      	mov	r7, r4
 800a424:	46a9      	mov	r9, r5
 800a426:	68e3      	ldr	r3, [r4, #12]
 800a428:	4e1f      	ldr	r6, [pc, #124]	; (800a4a8 <E131Bridge::HandleSynchronization()+0xb4>)
 800a42a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800a4ac <E131Bridge::HandleSynchronization()+0xb8>
 800a42e:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800a432:	f897 3512 	ldrb.w	r3, [r7, #1298]	; 0x512
 800a436:	b323      	cbz	r3, 800a482 <E131Bridge::HandleSynchronization()+0x8e>
 800a438:	f8d8 3000 	ldr.w	r3, [r8]
 800a43c:	6860      	ldr	r0, [r4, #4]
 800a43e:	07da      	lsls	r2, r3, #31
 800a440:	bf5c      	itt	pl
 800a442:	2301      	movpl	r3, #1
 800a444:	f8c8 3000 	strpl.w	r3, [r8]
 800a448:	6803      	ldr	r3, [r0, #0]
 800a44a:	4629      	mov	r1, r5
 800a44c:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800a450:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800a454:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800a458:	47d0      	blx	sl
 800a45a:	f897 3552 	ldrb.w	r3, [r7, #1362]	; 0x552
 800a45e:	b93b      	cbnz	r3, 800a470 <E131Bridge::HandleSynchronization()+0x7c>
 800a460:	6860      	ldr	r0, [r4, #4]
 800a462:	4629      	mov	r1, r5
 800a464:	6803      	ldr	r3, [r0, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	4798      	blx	r3
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 3552 	strb.w	r3, [r7, #1362]	; 0x552
 800a470:	f8d8 3000 	ldr.w	r3, [r8]
 800a474:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800a478:	07db      	lsls	r3, r3, #31
 800a47a:	bf5c      	itt	pl
 800a47c:	2301      	movpl	r3, #1
 800a47e:	f8c8 3000 	strpl.w	r3, [r8]
 800a482:	3501      	adds	r5, #1
 800a484:	2d04      	cmp	r5, #4
 800a486:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800a48a:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800a48e:	d1d0      	bne.n	800a432 <E131Bridge::HandleSynchronization()+0x3e>
 800a490:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a492:	b120      	cbz	r0, 800a49e <E131Bridge::HandleSynchronization()+0xaa>
 800a494:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a498:	6803      	ldr	r3, [r0, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	4718      	bx	r3
 800a49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4a2:	bf00      	nop
 800a4a4:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0
 800a4a8:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800a4ac:	200000ec 	andcs	r0, r0, ip, ror #1

0800a4b0 <E131Bridge::Print()>:
 800a4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b4:	2500      	movs	r5, #0
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	b08c      	sub	sp, #48	; 0x30
 800a4ba:	a902      	add	r1, sp, #8
 800a4bc:	3024      	adds	r0, #36	; 0x24
 800a4be:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800a4c2:	f000 fb9d 	bl	800ac00 <uuid_unparse>
 800a4c6:	482c      	ldr	r0, [pc, #176]	; (800a578 <E131Bridge::Print()+0xc8>)
 800a4c8:	f7fe feb0 	bl	800922c <printf>
 800a4cc:	4b2b      	ldr	r3, [pc, #172]	; (800a57c <E131Bridge::Print()+0xcc>)
 800a4ce:	482c      	ldr	r0, [pc, #176]	; (800a580 <E131Bridge::Print()+0xd0>)
 800a4d0:	7819      	ldrb	r1, [r3, #0]
 800a4d2:	785a      	ldrb	r2, [r3, #1]
 800a4d4:	f7fe feaa 	bl	800922c <printf>
 800a4d8:	482a      	ldr	r0, [pc, #168]	; (800a584 <E131Bridge::Print()+0xd4>)
 800a4da:	a902      	add	r1, sp, #8
 800a4dc:	f7fe fea6 	bl	800922c <printf>
 800a4e0:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800a4e4:	b303      	cbz	r3, 800a528 <E131Bridge::Print()+0x78>
 800a4e6:	4828      	ldr	r0, [pc, #160]	; (800a588 <E131Bridge::Print()+0xd8>)
 800a4e8:	f7fe fea0 	bl	800922c <printf>
 800a4ec:	4e27      	ldr	r6, [pc, #156]	; (800a58c <E131Bridge::Print()+0xdc>)
 800a4ee:	4f28      	ldr	r7, [pc, #160]	; (800a590 <E131Bridge::Print()+0xe0>)
 800a4f0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800a594 <E131Bridge::Print()+0xe4>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f10d 0206 	add.w	r2, sp, #6
 800a4fe:	f7ff fab3 	bl	8009a68 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800a502:	b170      	cbz	r0, 800a522 <E131Bridge::Print()+0x72>
 800a504:	2344      	movs	r3, #68	; 0x44
 800a506:	436b      	muls	r3, r5
 800a508:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 800a50c:	58d3      	ldr	r3, [r2, r3]
 800a50e:	4629      	mov	r1, r5
 800a510:	2b00      	cmp	r3, #0
 800a512:	bf0c      	ite	eq
 800a514:	4633      	moveq	r3, r6
 800a516:	463b      	movne	r3, r7
 800a518:	4640      	mov	r0, r8
 800a51a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a51e:	f7fe fe85 	bl	800922c <printf>
 800a522:	3501      	adds	r5, #1
 800a524:	2d04      	cmp	r5, #4
 800a526:	d1e5      	bne.n	800a4f4 <E131Bridge::Print()+0x44>
 800a528:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800a52c:	b1d3      	cbz	r3, 800a564 <E131Bridge::Print()+0xb4>
 800a52e:	481a      	ldr	r0, [pc, #104]	; (800a598 <E131Bridge::Print()+0xe8>)
 800a530:	f7fe fe7c 	bl	800922c <printf>
 800a534:	2500      	movs	r5, #0
 800a536:	4e19      	ldr	r6, [pc, #100]	; (800a59c <E131Bridge::Print()+0xec>)
 800a538:	2300      	movs	r3, #0
 800a53a:	4629      	mov	r1, r5
 800a53c:	4620      	mov	r0, r4
 800a53e:	f10d 0206 	add.w	r2, sp, #6
 800a542:	f7ff fa91 	bl	8009a68 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800a546:	b150      	cbz	r0, 800a55e <E131Bridge::Print()+0xae>
 800a548:	230c      	movs	r3, #12
 800a54a:	436b      	muls	r3, r5
 800a54c:	f204 6229 	addw	r2, r4, #1577	; 0x629
 800a550:	5cd3      	ldrb	r3, [r2, r3]
 800a552:	4629      	mov	r1, r5
 800a554:	4630      	mov	r0, r6
 800a556:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a55a:	f7fe fe67 	bl	800922c <printf>
 800a55e:	3501      	adds	r5, #1
 800a560:	2d04      	cmp	r5, #4
 800a562:	d1e9      	bne.n	800a538 <E131Bridge::Print()+0x88>
 800a564:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800a568:	b113      	cbz	r3, 800a570 <E131Bridge::Print()+0xc0>
 800a56a:	480d      	ldr	r0, [pc, #52]	; (800a5a0 <E131Bridge::Print()+0xf0>)
 800a56c:	f7fe fe5e 	bl	800922c <printf>
 800a570:	b00c      	add	sp, #48	; 0x30
 800a572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a576:	bf00      	nop
 800a578:	0801440d 	stmdaeq	r1, {r0, r2, r3, sl, lr}
 800a57c:	080145c8 	stmdaeq	r1, {r3, r6, r7, r8, sl, lr}
 800a580:	08014415 	stmdaeq	r1, {r0, r2, r4, sl, lr}
 800a584:	08014428 	stmdaeq	r1, {r3, r5, sl, lr}
 800a588:	08014438 	stmdaeq	r1, {r3, r4, r5, sl, lr}
 800a58c:	08014405 	stmdaeq	r1, {r0, r2, sl, lr}
 800a590:	08014409 	stmdaeq	r1, {r0, r3, sl, lr}
 800a594:	08014441 	stmdaeq	r1, {r0, r6, sl, lr}
 800a598:	08014460 	stmdaeq	r1, {r5, r6, sl, lr}
 800a59c:	08014468 	stmdaeq	r1, {r3, r5, r6, sl, lr}
 800a5a0:	08014487 	stmdaeq	r1, {r0, r1, r2, r7, sl, lr}

0800a5a4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800a5a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5a6:	88c6      	ldrh	r6, [r0, #6]
 800a5a8:	8885      	ldrh	r5, [r0, #4]
 800a5aa:	42ae      	cmp	r6, r5
 800a5ac:	d216      	bcs.n	800a5dc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	6800      	ldr	r0, [r0, #0]
 800a5b2:	1bad      	subs	r5, r5, r6
 800a5b4:	4430      	add	r0, r6
 800a5b6:	7a26      	ldrb	r6, [r4, #8]
 800a5b8:	b923      	cbnz	r3, 800a5c4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800a5ba:	b926      	cbnz	r6, 800a5c6 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800a5bc:	9200      	str	r2, [sp, #0]
 800a5be:	460b      	mov	r3, r1
 800a5c0:	4a09      	ldr	r2, [pc, #36]	; (800a5e8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800a5c2:	e003      	b.n	800a5cc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a5c4:	b166      	cbz	r6, 800a5e0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	9200      	str	r2, [sp, #0]
 800a5ca:	4a08      	ldr	r2, [pc, #32]	; (800a5ec <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	f7fe fe55 	bl	800927c <snprintf>
 800a5d2:	4285      	cmp	r5, r0
 800a5d4:	bfa2      	ittt	ge
 800a5d6:	88e3      	ldrhge	r3, [r4, #6]
 800a5d8:	181b      	addge	r3, r3, r0
 800a5da:	80e3      	strhge	r3, [r4, #6]
 800a5dc:	b002      	add	sp, #8
 800a5de:	bd70      	pop	{r4, r5, r6, pc}
 800a5e0:	9200      	str	r2, [sp, #0]
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4a02      	ldr	r2, [pc, #8]	; (800a5f0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a5e6:	e7f1      	b.n	800a5cc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a5e8:	080144ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, sl, lr}
 800a5ec:	080144df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, sl, lr}
 800a5f0:	080144eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, sl, lr}

0800a5f4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800a5f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	8885      	ldrh	r5, [r0, #4]
 800a5fa:	88c1      	ldrh	r1, [r0, #6]
 800a5fc:	42a9      	cmp	r1, r5
 800a5fe:	d214      	bcs.n	800a62a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800a600:	4604      	mov	r4, r0
 800a602:	6800      	ldr	r0, [r0, #0]
 800a604:	1a6d      	subs	r5, r5, r1
 800a606:	4408      	add	r0, r1
 800a608:	7a21      	ldrb	r1, [r4, #8]
 800a60a:	b91a      	cbnz	r2, 800a614 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800a60c:	b919      	cbnz	r1, 800a616 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800a60e:	4a0a      	ldr	r2, [pc, #40]	; (800a638 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800a610:	9100      	str	r1, [sp, #0]
 800a612:	e002      	b.n	800a61a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800a614:	b159      	cbz	r1, 800a62e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800a616:	9200      	str	r2, [sp, #0]
 800a618:	4a08      	ldr	r2, [pc, #32]	; (800a63c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800a61a:	4629      	mov	r1, r5
 800a61c:	f7fe fe2e 	bl	800927c <snprintf>
 800a620:	4285      	cmp	r5, r0
 800a622:	bfa2      	ittt	ge
 800a624:	88e3      	ldrhge	r3, [r4, #6]
 800a626:	181b      	addge	r3, r3, r0
 800a628:	80e3      	strhge	r3, [r4, #6]
 800a62a:	b003      	add	sp, #12
 800a62c:	bd30      	pop	{r4, r5, pc}
 800a62e:	2201      	movs	r2, #1
 800a630:	9200      	str	r2, [sp, #0]
 800a632:	4a03      	ldr	r2, [pc, #12]	; (800a640 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800a634:	e7f1      	b.n	800a61a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800a636:	bf00      	nop
 800a638:	080144fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, lr}
 800a63c:	080144f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sl, lr}
 800a640:	080144fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, lr}

0800a644 <E131Params::E131Params(E131ParamsStore*)>:
 800a644:	b510      	push	{r4, lr}
 800a646:	221a      	movs	r2, #26
 800a648:	4604      	mov	r4, r0
 800a64a:	f840 1b04 	str.w	r1, [r0], #4
 800a64e:	2100      	movs	r1, #0
 800a650:	f007 fd82 	bl	8012158 <memset>
 800a654:	2300      	movs	r3, #0
 800a656:	2201      	movs	r2, #1
 800a658:	7323      	strb	r3, [r4, #12]
 800a65a:	72e2      	strb	r2, [r4, #11]
 800a65c:	73a3      	strb	r3, [r4, #14]
 800a65e:	2202      	movs	r2, #2
 800a660:	7423      	strb	r3, [r4, #16]
 800a662:	74a3      	strb	r3, [r4, #18]
 800a664:	f246 43ff 	movw	r3, #25855	; 0x64ff
 800a668:	7362      	strb	r2, [r4, #13]
 800a66a:	83e3      	strh	r3, [r4, #30]
 800a66c:	2203      	movs	r2, #3
 800a66e:	f246 4364 	movw	r3, #25700	; 0x6464
 800a672:	73e2      	strb	r2, [r4, #15]
 800a674:	8423      	strh	r3, [r4, #32]
 800a676:	2204      	movs	r2, #4
 800a678:	2364      	movs	r3, #100	; 0x64
 800a67a:	4620      	mov	r0, r4
 800a67c:	7462      	strb	r2, [r4, #17]
 800a67e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800a682:	bd10      	pop	{r4, pc}

0800a684 <E131Params::Load()>:
 800a684:	b508      	push	{r3, lr}
 800a686:	2300      	movs	r3, #0
 800a688:	4601      	mov	r1, r0
 800a68a:	6043      	str	r3, [r0, #4]
 800a68c:	6800      	ldr	r0, [r0, #0]
 800a68e:	b120      	cbz	r0, 800a69a <E131Params::Load()+0x16>
 800a690:	6803      	ldr	r3, [r0, #0]
 800a692:	3104      	adds	r1, #4
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	4798      	blx	r3
 800a698:	2001      	movs	r0, #1
 800a69a:	bd08      	pop	{r3, pc}

0800a69c <E131Params::Load(char const*, unsigned int)>:
 800a69c:	6803      	ldr	r3, [r0, #0]
 800a69e:	b1d3      	cbz	r3, 800a6d6 <E131Params::Load(char const*, unsigned int)+0x3a>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6a4:	460d      	mov	r5, r1
 800a6a6:	4616      	mov	r6, r2
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	6043      	str	r3, [r0, #4]
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	490a      	ldr	r1, [pc, #40]	; (800a6d8 <E131Params::Load(char const*, unsigned int)+0x3c>)
 800a6b0:	4668      	mov	r0, sp
 800a6b2:	f006 fecb 	bl	801144c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800a6b6:	4632      	mov	r2, r6
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	4668      	mov	r0, sp
 800a6bc:	f006 feca 	bl	8011454 <ReadConfigFile::Read(char const*, unsigned int)>
 800a6c0:	4621      	mov	r1, r4
 800a6c2:	f851 0b04 	ldr.w	r0, [r1], #4
 800a6c6:	6803      	ldr	r3, [r0, #0]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	4798      	blx	r3
 800a6cc:	4668      	mov	r0, sp
 800a6ce:	f006 fec0 	bl	8011452 <ReadConfigFile::~ReadConfigFile()>
 800a6d2:	b002      	add	sp, #8
 800a6d4:	bd70      	pop	{r4, r5, r6, pc}
 800a6d6:	4770      	bx	lr
 800a6d8:	0800a8a5 	stmdaeq	r0, {r0, r2, r5, r7, fp, sp, pc}

0800a6dc <E131Params::callbackFunction(char const*)>:
 800a6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	460e      	mov	r6, r1
 800a6e4:	2500      	movs	r5, #0
 800a6e6:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 800a88c <E131Params::callbackFunction(char const*)+0x1b0>
 800a6ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a890 <E131Params::callbackFunction(char const*)+0x1b4>
 800a6ee:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 800a894 <E131Params::callbackFunction(char const*)+0x1b8>
 800a6f2:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 800a898 <E131Params::callbackFunction(char const*)+0x1bc>
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	4649      	mov	r1, r9
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f10d 0202 	add.w	r2, sp, #2
 800a700:	f006 ff99 	bl	8011636 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800a704:	b9c8      	cbnz	r0, 800a73a <E131Params::callbackFunction(char const*)+0x5e>
 800a706:	f64f 16fe 	movw	r6, #63998	; 0xf9fe
 800a70a:	2110      	movs	r1, #16
 800a70c:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800a710:	6863      	ldr	r3, [r4, #4]
 800a712:	1e42      	subs	r2, r0, #1
 800a714:	b292      	uxth	r2, r2
 800a716:	42b2      	cmp	r2, r6
 800a718:	ea4f 0245 	mov.w	r2, r5, lsl #1
 800a71c:	fa01 f105 	lsl.w	r1, r1, r5
 800a720:	bf85      	ittet	hi
 800a722:	1912      	addhi	r2, r2, r4
 800a724:	3501      	addhi	r5, #1
 800a726:	1912      	addls	r2, r2, r4
 800a728:	f8a2 500b 	strhhi.w	r5, [r2, #11]
 800a72c:	bf8e      	itee	hi
 800a72e:	438b      	bichi	r3, r1
 800a730:	f8a2 000b 	strhls.w	r0, [r2, #11]
 800a734:	430b      	orrls	r3, r1
 800a736:	6063      	str	r3, [r4, #4]
 800a738:	e02b      	b.n	800a792 <E131Params::callbackFunction(char const*)+0xb6>
 800a73a:	2712      	movs	r7, #18
 800a73c:	2303      	movs	r3, #3
 800a73e:	436f      	muls	r7, r5
 800a740:	9301      	str	r3, [sp, #4]
 800a742:	4630      	mov	r0, r6
 800a744:	ab01      	add	r3, sp, #4
 800a746:	aa02      	add	r2, sp, #8
 800a748:	eb0a 0107 	add.w	r1, sl, r7
 800a74c:	f006 feb6 	bl	80114bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a750:	bb10      	cbnz	r0, 800a798 <E131Params::callbackFunction(char const*)+0xbc>
 800a752:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a756:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800a75a:	40ab      	lsls	r3, r5
 800a75c:	f041 0120 	orr.w	r1, r1, #32
 800a760:	296c      	cmp	r1, #108	; 0x6c
 800a762:	6862      	ldr	r2, [r4, #4]
 800a764:	4425      	add	r5, r4
 800a766:	d10f      	bne.n	800a788 <E131Params::callbackFunction(char const*)+0xac>
 800a768:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800a76c:	f041 0120 	orr.w	r1, r1, #32
 800a770:	2974      	cmp	r1, #116	; 0x74
 800a772:	d109      	bne.n	800a788 <E131Params::callbackFunction(char const*)+0xac>
 800a774:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800a778:	f041 0120 	orr.w	r1, r1, #32
 800a77c:	2970      	cmp	r1, #112	; 0x70
 800a77e:	d103      	bne.n	800a788 <E131Params::callbackFunction(char const*)+0xac>
 800a780:	2101      	movs	r1, #1
 800a782:	7529      	strb	r1, [r5, #20]
 800a784:	4313      	orrs	r3, r2
 800a786:	e7d6      	b.n	800a736 <E131Params::callbackFunction(char const*)+0x5a>
 800a788:	2100      	movs	r1, #0
 800a78a:	ea22 0203 	bic.w	r2, r2, r3
 800a78e:	7529      	strb	r1, [r5, #20]
 800a790:	6062      	str	r2, [r4, #4]
 800a792:	b007      	add	sp, #28
 800a794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a798:	2305      	movs	r3, #5
 800a79a:	4630      	mov	r0, r6
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	aa02      	add	r2, sp, #8
 800a7a0:	ab01      	add	r3, sp, #4
 800a7a2:	eb0b 0107 	add.w	r1, fp, r7
 800a7a6:	f006 fe89 	bl	80114bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a7aa:	bb40      	cbnz	r0, 800a7fe <E131Params::callbackFunction(char const*)+0x122>
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	7fa3      	ldrb	r3, [r4, #30]
 800a7b0:	40aa      	lsls	r2, r5
 800a7b2:	ea23 0302 	bic.w	r3, r3, r2
 800a7b6:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800a7ba:	77a3      	strb	r3, [r4, #30]
 800a7bc:	f042 0220 	orr.w	r2, r2, #32
 800a7c0:	2a69      	cmp	r2, #105	; 0x69
 800a7c2:	d117      	bne.n	800a7f4 <E131Params::callbackFunction(char const*)+0x118>
 800a7c4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800a7c8:	f042 0220 	orr.w	r2, r2, #32
 800a7cc:	2a6e      	cmp	r2, #110	; 0x6e
 800a7ce:	d111      	bne.n	800a7f4 <E131Params::callbackFunction(char const*)+0x118>
 800a7d0:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800a7d4:	f042 0220 	orr.w	r2, r2, #32
 800a7d8:	2a70      	cmp	r2, #112	; 0x70
 800a7da:	d10b      	bne.n	800a7f4 <E131Params::callbackFunction(char const*)+0x118>
 800a7dc:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800a7e0:	f042 0220 	orr.w	r2, r2, #32
 800a7e4:	2a75      	cmp	r2, #117	; 0x75
 800a7e6:	d105      	bne.n	800a7f4 <E131Params::callbackFunction(char const*)+0x118>
 800a7e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800a7ec:	f042 0220 	orr.w	r2, r2, #32
 800a7f0:	2a74      	cmp	r2, #116	; 0x74
 800a7f2:	d0ce      	beq.n	800a792 <E131Params::callbackFunction(char const*)+0xb6>
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	40aa      	lsls	r2, r5
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	77a3      	strb	r3, [r4, #30]
 800a7fc:	e7c9      	b.n	800a792 <E131Params::callbackFunction(char const*)+0xb6>
 800a7fe:	4641      	mov	r1, r8
 800a800:	4630      	mov	r0, r6
 800a802:	f10d 0201 	add.w	r2, sp, #1
 800a806:	f006 ff5d 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a80a:	b998      	cbnz	r0, 800a834 <E131Params::callbackFunction(char const*)+0x158>
 800a80c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a810:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800a814:	40aa      	lsls	r2, r5
 800a816:	1e48      	subs	r0, r1, #1
 800a818:	b2c0      	uxtb	r0, r0
 800a81a:	28c7      	cmp	r0, #199	; 0xc7
 800a81c:	6863      	ldr	r3, [r4, #4]
 800a81e:	4425      	add	r5, r4
 800a820:	d803      	bhi.n	800a82a <E131Params::callbackFunction(char const*)+0x14e>
 800a822:	2964      	cmp	r1, #100	; 0x64
 800a824:	d001      	beq.n	800a82a <E131Params::callbackFunction(char const*)+0x14e>
 800a826:	77e9      	strb	r1, [r5, #31]
 800a828:	e7ac      	b.n	800a784 <E131Params::callbackFunction(char const*)+0xa8>
 800a82a:	2164      	movs	r1, #100	; 0x64
 800a82c:	ea23 0302 	bic.w	r3, r3, r2
 800a830:	77e9      	strb	r1, [r5, #31]
 800a832:	e780      	b.n	800a736 <E131Params::callbackFunction(char const*)+0x5a>
 800a834:	3501      	adds	r5, #1
 800a836:	2d04      	cmp	r5, #4
 800a838:	f109 0910 	add.w	r9, r9, #16
 800a83c:	f108 0812 	add.w	r8, r8, #18
 800a840:	f47f af5a 	bne.w	800a6f8 <E131Params::callbackFunction(char const*)+0x1c>
 800a844:	4630      	mov	r0, r6
 800a846:	4915      	ldr	r1, [pc, #84]	; (800a89c <E131Params::callbackFunction(char const*)+0x1c0>)
 800a848:	f10d 0201 	add.w	r2, sp, #1
 800a84c:	f006 ff3a 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a850:	b948      	cbnz	r0, 800a866 <E131Params::callbackFunction(char const*)+0x18a>
 800a852:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a856:	6863      	ldr	r3, [r4, #4]
 800a858:	b112      	cbz	r2, 800a860 <E131Params::callbackFunction(char const*)+0x184>
 800a85a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a85e:	e76a      	b.n	800a736 <E131Params::callbackFunction(char const*)+0x5a>
 800a860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a864:	e767      	b.n	800a736 <E131Params::callbackFunction(char const*)+0x5a>
 800a866:	4630      	mov	r0, r6
 800a868:	490d      	ldr	r1, [pc, #52]	; (800a8a0 <E131Params::callbackFunction(char const*)+0x1c4>)
 800a86a:	f10d 0201 	add.w	r2, sp, #1
 800a86e:	f006 ff29 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a872:	2800      	cmp	r0, #0
 800a874:	d18d      	bne.n	800a792 <E131Params::callbackFunction(char const*)+0xb6>
 800a876:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a87a:	6863      	ldr	r3, [r4, #4]
 800a87c:	b112      	cbz	r2, 800a884 <E131Params::callbackFunction(char const*)+0x1a8>
 800a87e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a882:	e758      	b.n	800a736 <E131Params::callbackFunction(char const*)+0x5a>
 800a884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a888:	e755      	b.n	800a736 <E131Params::callbackFunction(char const*)+0x5a>
 800a88a:	bf00      	nop
 800a88c:	08015e79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, sl, fp, ip, lr}
 800a890:	0801456b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, sl, lr}
 800a894:	08015f49 	stmdaeq	r1, {r0, r3, r6, r8, r9, sl, fp, ip, lr}
 800a898:	08015fac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
 800a89c:	08014549 	stmdaeq	r1, {r0, r3, r6, r8, sl, lr}
 800a8a0:	08014533 	stmdaeq	r1, {r0, r1, r4, r5, r8, sl, lr}

0800a8a4 <E131Params::staticCallbackFunction(void*, char const*)>:
 800a8a4:	f7ff bf1a 	b.w	800a6dc <E131Params::callbackFunction(char const*)>

0800a8a8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
 800a8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	4615      	mov	r5, r2
 800a8b0:	461e      	mov	r6, r3
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	3004      	adds	r0, #4
 800a8b6:	2900      	cmp	r1, #0
 800a8b8:	d045      	beq.n	800a946 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x9e>
 800a8ba:	221f      	movs	r2, #31
 800a8bc:	f007 fc35 	bl	801212a <memmove>
 800a8c0:	4633      	mov	r3, r6
 800a8c2:	462a      	mov	r2, r5
 800a8c4:	4978      	ldr	r1, [pc, #480]	; (800aaa8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x200>)
 800a8c6:	a803      	add	r0, sp, #12
 800a8c8:	f006 fd20 	bl	801130c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800a8cc:	2500      	movs	r5, #0
 800a8ce:	4e77      	ldr	r6, [pc, #476]	; (800aaac <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 800a8d0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800aab0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x208>
 800a8d4:	4f77      	ldr	r7, [pc, #476]	; (800aab4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>)
 800a8d6:	7fa3      	ldrb	r3, [r4, #30]
 800a8d8:	4631      	mov	r1, r6
 800a8da:	412b      	asrs	r3, r5
 800a8dc:	f013 0f01 	tst.w	r3, #1
 800a8e0:	ea6f 0303 	mvn.w	r3, r3
 800a8e4:	bf0c      	ite	eq
 800a8e6:	4642      	moveq	r2, r8
 800a8e8:	463a      	movne	r2, r7
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	a803      	add	r0, sp, #12
 800a8f0:	3501      	adds	r5, #1
 800a8f2:	f7ff fe57 	bl	800a5a4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a8f6:	2d04      	cmp	r5, #4
 800a8f8:	f106 0612 	add.w	r6, r6, #18
 800a8fc:	d1eb      	bne.n	800a8d6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2e>
 800a8fe:	2600      	movs	r6, #0
 800a900:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800aab8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x210>
 800a904:	4f6d      	ldr	r7, [pc, #436]	; (800aabc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x214>)
 800a906:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800aac0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x218>
 800a90a:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800aac4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x21c>
 800a90e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800a912:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800a916:	eb04 0346 	add.w	r3, r4, r6, lsl #1
 800a91a:	42a9      	cmp	r1, r5
 800a91c:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800a920:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800a924:	d225      	bcs.n	800a972 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xca>
 800a926:	2210      	movs	r2, #16
 800a928:	9803      	ldr	r0, [sp, #12]
 800a92a:	40b2      	lsls	r2, r6
 800a92c:	ea32 0c0c 	bics.w	ip, r2, ip
 800a930:	4408      	add	r0, r1
 800a932:	eba5 0501 	sub.w	r5, r5, r1
 800a936:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800a93a:	d00b      	beq.n	800a954 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xac>
 800a93c:	b961      	cbnz	r1, 800a958 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xb0>
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	464a      	mov	r2, r9
 800a942:	4653      	mov	r3, sl
 800a944:	e00b      	b.n	800a95e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 800a946:	6823      	ldr	r3, [r4, #0]
 800a948:	4601      	mov	r1, r0
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	4618      	mov	r0, r3
 800a94e:	68d2      	ldr	r2, [r2, #12]
 800a950:	4790      	blx	r2
 800a952:	e7b5      	b.n	800a8c0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18>
 800a954:	2900      	cmp	r1, #0
 800a956:	d05f      	beq.n	800aa18 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x170>
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	463a      	mov	r2, r7
 800a95c:	4653      	mov	r3, sl
 800a95e:	4629      	mov	r1, r5
 800a960:	f7fe fc8c 	bl	800927c <snprintf>
 800a964:	4285      	cmp	r5, r0
 800a966:	bfa2      	ittt	ge
 800a968:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800a96c:	18c0      	addge	r0, r0, r3
 800a96e:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800a972:	3601      	adds	r6, #1
 800a974:	2e04      	cmp	r6, #4
 800a976:	f10a 0a10 	add.w	sl, sl, #16
 800a97a:	d1c8      	bne.n	800a90e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x66>
 800a97c:	4952      	ldr	r1, [pc, #328]	; (800aac8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x220>)
 800a97e:	a803      	add	r0, sp, #12
 800a980:	f006 fd4a 	bl	8011418 <PropertiesBuilder::AddComment(char const*)>
 800a984:	2500      	movs	r5, #0
 800a986:	f44f 7a80 	mov.w	sl, #256	; 0x100
 800a98a:	4e50      	ldr	r6, [pc, #320]	; (800aacc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x224>)
 800a98c:	f8df 9140 	ldr.w	r9, [pc, #320]	; 800aad0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x228>
 800a990:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800aad4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x22c>
 800a994:	f104 0714 	add.w	r7, r4, #20
 800a998:	6861      	ldr	r1, [r4, #4]
 800a99a:	fa0a f305 	lsl.w	r3, sl, r5
 800a99e:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a9a2:	438b      	bics	r3, r1
 800a9a4:	bf0c      	ite	eq
 800a9a6:	2301      	moveq	r3, #1
 800a9a8:	2300      	movne	r3, #0
 800a9aa:	4631      	mov	r1, r6
 800a9ac:	2a00      	cmp	r2, #0
 800a9ae:	bf0c      	ite	eq
 800a9b0:	464a      	moveq	r2, r9
 800a9b2:	4642      	movne	r2, r8
 800a9b4:	a803      	add	r0, sp, #12
 800a9b6:	3501      	adds	r5, #1
 800a9b8:	f7ff fdf4 	bl	800a5a4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a9bc:	2d04      	cmp	r5, #4
 800a9be:	f106 0612 	add.w	r6, r6, #18
 800a9c2:	d1e9      	bne.n	800a998 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xf0>
 800a9c4:	4944      	ldr	r1, [pc, #272]	; (800aad8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x230>)
 800a9c6:	a803      	add	r0, sp, #12
 800a9c8:	f006 fd26 	bl	8011418 <PropertiesBuilder::AddComment(char const*)>
 800a9cc:	2600      	movs	r6, #0
 800a9ce:	f8df b10c 	ldr.w	fp, [pc, #268]	; 800aadc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x234>
 800a9d2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800aabc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x214>
 800a9d6:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800aac0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x218>
 800a9da:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800aac4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x21c>
 800a9de:	f104 071f 	add.w	r7, r4, #31
 800a9e2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800a9e6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800a9ea:	f817 3b01 	ldrb.w	r3, [r7], #1
 800a9ee:	42a9      	cmp	r1, r5
 800a9f0:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800a9f4:	d223      	bcs.n	800aa3e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x196>
 800a9f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a9fa:	9803      	ldr	r0, [sp, #12]
 800a9fc:	40b2      	lsls	r2, r6
 800a9fe:	ea32 0c0c 	bics.w	ip, r2, ip
 800aa02:	4408      	add	r0, r1
 800aa04:	eba5 0501 	sub.w	r5, r5, r1
 800aa08:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800aa0c:	d008      	beq.n	800aa20 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x178>
 800aa0e:	b949      	cbnz	r1, 800aa24 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x17c>
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	4652      	mov	r2, sl
 800aa14:	465b      	mov	r3, fp
 800aa16:	e008      	b.n	800aa2a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x182>
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	4642      	mov	r2, r8
 800aa1c:	4653      	mov	r3, sl
 800aa1e:	e79e      	b.n	800a95e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 800aa20:	2900      	cmp	r1, #0
 800aa22:	d03d      	beq.n	800aaa0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f8>
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	4642      	mov	r2, r8
 800aa28:	465b      	mov	r3, fp
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	f7fe fc26 	bl	800927c <snprintf>
 800aa30:	4285      	cmp	r5, r0
 800aa32:	bfa2      	ittt	ge
 800aa34:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800aa38:	18c0      	addge	r0, r0, r3
 800aa3a:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800aa3e:	3601      	adds	r6, #1
 800aa40:	2e04      	cmp	r6, #4
 800aa42:	f10b 0b12 	add.w	fp, fp, #18
 800aa46:	d1cc      	bne.n	800a9e2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13a>
 800aa48:	4925      	ldr	r1, [pc, #148]	; (800aae0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x238>)
 800aa4a:	a803      	add	r0, sp, #12
 800aa4c:	f006 fce4 	bl	8011418 <PropertiesBuilder::AddComment(char const*)>
 800aa50:	6862      	ldr	r2, [r4, #4]
 800aa52:	4924      	ldr	r1, [pc, #144]	; (800aae4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x23c>)
 800aa54:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800aa58:	a803      	add	r0, sp, #12
 800aa5a:	f7ff fdcb 	bl	800a5f4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800aa5e:	6862      	ldr	r2, [r4, #4]
 800aa60:	4921      	ldr	r1, [pc, #132]	; (800aae8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x240>)
 800aa62:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800aa66:	a803      	add	r0, sp, #12
 800aa68:	f7ff fdc4 	bl	800a5f4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800aa6c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800aa70:	b17b      	cbz	r3, 800aa92 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1ea>
 800aa72:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	4413      	add	r3, r2
 800aa7a:	227d      	movs	r2, #125	; 0x7d
 800aa7c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800aa80:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800aa84:	9903      	ldr	r1, [sp, #12]
 800aa86:	54ca      	strb	r2, [r1, r3]
 800aa88:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	f8ad 3012 	strh.w	r3, [sp, #18]
 800aa92:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800aa96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa98:	601a      	str	r2, [r3, #0]
 800aa9a:	b007      	add	sp, #28
 800aa9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	464a      	mov	r2, r9
 800aaa4:	465b      	mov	r3, fp
 800aaa6:	e7c0      	b.n	800aa2a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x182>
 800aaa8:	080145b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r8, sl, lr}
 800aaac:	08015fac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
 800aab0:	08014503 	stmdaeq	r1, {r0, r1, r8, sl, lr}
 800aab4:	08014509 	stmdaeq	r1, {r0, r3, r8, sl, lr}
 800aab8:	08015e79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, sl, fp, ip, lr}
 800aabc:	080144f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sl, lr}
 800aac0:	080144fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, lr}
 800aac4:	080144fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, lr}
 800aac8:	08014518 	stmdaeq	r1, {r3, r4, r8, sl, lr}
 800aacc:	08015f49 	stmdaeq	r1, {r0, r3, r6, r8, r9, sl, fp, ip, lr}
 800aad0:	08014514 	stmdaeq	r1, {r2, r4, r8, sl, lr}
 800aad4:	08014510 	stmdaeq	r1, {r4, r8, sl, lr}
 800aad8:	08014523 	stmdaeq	r1, {r0, r1, r5, r8, sl, lr}
 800aadc:	0801456b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, sl, lr}
 800aae0:	0801452d 	stmdaeq	r1, {r0, r2, r3, r5, r8, sl, lr}
 800aae4:	08014549 	stmdaeq	r1, {r0, r3, r6, r8, sl, lr}
 800aae8:	08014533 	stmdaeq	r1, {r0, r1, r4, r5, r8, sl, lr}

0800aaec <E131Params::Save(char*, unsigned int, unsigned int&)>:
 800aaec:	b513      	push	{r0, r1, r4, lr}
 800aaee:	6804      	ldr	r4, [r0, #0]
 800aaf0:	b914      	cbnz	r4, 800aaf8 <E131Params::Save(char*, unsigned int, unsigned int&)+0xc>
 800aaf2:	601c      	str	r4, [r3, #0]
 800aaf4:	b002      	add	sp, #8
 800aaf6:	bd10      	pop	{r4, pc}
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	4613      	mov	r3, r2
 800aafc:	460a      	mov	r2, r1
 800aafe:	2100      	movs	r1, #0
 800ab00:	f7ff fed2 	bl	800a8a8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
 800ab04:	e7f6      	b.n	800aaf4 <E131Params::Save(char*, unsigned int, unsigned int&)+0x8>

0800ab06 <E131Params::Set(E131Bridge*)>:
 800ab06:	6843      	ldr	r3, [r0, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d034      	beq.n	800ab76 <E131Params::Set(E131Bridge*)+0x70>
 800ab0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab10:	2300      	movs	r3, #0
 800ab12:	f44f 7680 	mov.w	r6, #256	; 0x100
 800ab16:	f04f 0e44 	mov.w	lr, #68	; 0x44
 800ab1a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800ab1e:	f100 0214 	add.w	r2, r0, #20
 800ab22:	f201 5c4c 	addw	ip, r1, #1356	; 0x54c
 800ab26:	6845      	ldr	r5, [r0, #4]
 800ab28:	fa06 f403 	lsl.w	r4, r6, r3
 800ab2c:	43ac      	bics	r4, r5
 800ab2e:	bf02      	ittt	eq
 800ab30:	fb0e f403 	muleq.w	r4, lr, r3
 800ab34:	f892 8000 	ldrbeq.w	r8, [r2]
 800ab38:	f84c 8004 	streq.w	r8, [ip, r4]
 800ab3c:	fa07 f403 	lsl.w	r4, r7, r3
 800ab40:	43ac      	bics	r4, r5
 800ab42:	d106      	bne.n	800ab52 <E131Params::Set(E131Bridge*)+0x4c>
 800ab44:	7ad5      	ldrb	r5, [r2, #11]
 800ab46:	1e6c      	subs	r4, r5, #1
 800ab48:	b2e4      	uxtb	r4, r4
 800ab4a:	2cc7      	cmp	r4, #199	; 0xc7
 800ab4c:	bf98      	it	ls
 800ab4e:	f881 5629 	strbls.w	r5, [r1, #1577]	; 0x629
 800ab52:	3301      	adds	r3, #1
 800ab54:	2b04      	cmp	r3, #4
 800ab56:	f102 0201 	add.w	r2, r2, #1
 800ab5a:	d1e4      	bne.n	800ab26 <E131Params::Set(E131Bridge*)+0x20>
 800ab5c:	6843      	ldr	r3, [r0, #4]
 800ab5e:	04da      	lsls	r2, r3, #19
 800ab60:	bf44      	itt	mi
 800ab62:	2201      	movmi	r2, #1
 800ab64:	f881 24f9 	strbmi.w	r2, [r1, #1273]	; 0x4f9
 800ab68:	049b      	lsls	r3, r3, #18
 800ab6a:	bf44      	itt	mi
 800ab6c:	2301      	movmi	r3, #1
 800ab6e:	f881 34fa 	strbmi.w	r3, [r1, #1274]	; 0x4fa
 800ab72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab76:	4770      	bx	lr

0800ab78 <E131Params::Dump()>:
 800ab78:	4770      	bx	lr

0800ab7a <uuid_unparse_x>:
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	b530      	push	{r4, r5, lr}
 800ab7e:	4608      	mov	r0, r1
 800ab80:	4611      	mov	r1, r2
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	b08f      	sub	sp, #60	; 0x3c
 800ab86:	ba12      	rev	r2, r2
 800ab88:	920a      	str	r2, [sp, #40]	; 0x28
 800ab8a:	889a      	ldrh	r2, [r3, #4]
 800ab8c:	891c      	ldrh	r4, [r3, #8]
 800ab8e:	ba52      	rev16	r2, r2
 800ab90:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800ab94:	88da      	ldrh	r2, [r3, #6]
 800ab96:	ba64      	rev16	r4, r4
 800ab98:	ba52      	rev16	r2, r2
 800ab9a:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800ab9e:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800aba2:	f103 020a 	add.w	r2, r3, #10
 800aba6:	f10d 0432 	add.w	r4, sp, #50	; 0x32
 800abaa:	3310      	adds	r3, #16
 800abac:	4293      	cmp	r3, r2
 800abae:	d122      	bne.n	800abf6 <uuid_unparse_x+0x7c>
 800abb0:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800abb4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800abb8:	9208      	str	r2, [sp, #32]
 800abba:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800abbe:	0a1b      	lsrs	r3, r3, #8
 800abc0:	9207      	str	r2, [sp, #28]
 800abc2:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800abc6:	9301      	str	r3, [sp, #4]
 800abc8:	9206      	str	r2, [sp, #24]
 800abca:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800abce:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800abd2:	9205      	str	r2, [sp, #20]
 800abd4:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	9204      	str	r2, [sp, #16]
 800abdc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800abe0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800abe4:	9203      	str	r2, [sp, #12]
 800abe6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800abea:	9202      	str	r2, [sp, #8]
 800abec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abee:	f7fe fb2d 	bl	800924c <sprintf>
 800abf2:	b00f      	add	sp, #60	; 0x3c
 800abf4:	bd30      	pop	{r4, r5, pc}
 800abf6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800abfa:	f804 5b01 	strb.w	r5, [r4], #1
 800abfe:	e7d5      	b.n	800abac <uuid_unparse_x+0x32>

0800ac00 <uuid_unparse>:
 800ac00:	4a01      	ldr	r2, [pc, #4]	; (800ac08 <uuid_unparse+0x8>)
 800ac02:	f7ff bfba 	b.w	800ab7a <uuid_unparse_x>
 800ac06:	bf00      	nop
 800ac08:	080145ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, sl, lr}

0800ac0c <WS28xxDmx::GetDmxStartAddress()>:
 800ac0c:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 800ac0e:	4770      	bx	lr

0800ac10 <WS28xxDmx::GetDmxFootprint()>:
 800ac10:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800ac12:	4770      	bx	lr

0800ac14 <WS28xxDmx::~WS28xxDmx()>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4b06      	ldr	r3, [pc, #24]	; (800ac30 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 800ac18:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	6003      	str	r3, [r0, #0]
 800ac1e:	b12d      	cbz	r5, 800ac2c <WS28xxDmx::~WS28xxDmx()+0x18>
 800ac20:	4628      	mov	r0, r5
 800ac22:	f001 ff51 	bl	800cac8 <WS28xx::~WS28xx()>
 800ac26:	4628      	mov	r0, r5
 800ac28:	f007 f9bc 	bl	8011fa4 <operator delete(void*)>
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	08014604 	stmdaeq	r1, {r2, r9, sl, lr}

0800ac34 <WS28xxDmx::~WS28xxDmx()>:
 800ac34:	b510      	push	{r4, lr}
 800ac36:	4604      	mov	r4, r0
 800ac38:	f7ff ffec 	bl	800ac14 <WS28xxDmx::~WS28xxDmx()>
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f007 f9b1 	bl	8011fa4 <operator delete(void*)>
 800ac42:	4620      	mov	r0, r4
 800ac44:	bd10      	pop	{r4, pc}

0800ac46 <WS28xxDmx::Blackout(bool)>:
 800ac46:	b538      	push	{r3, r4, r5, lr}
 800ac48:	4605      	mov	r5, r0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
 800ac50:	f008 fba6 	bl	80133a0 <gd32_spi_dma_tx_is_active()>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d1fb      	bne.n	800ac50 <WS28xxDmx::Blackout(bool)+0xa>
 800ac58:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800ac5a:	b11c      	cbz	r4, 800ac64 <WS28xxDmx::Blackout(bool)+0x1e>
 800ac5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac60:	f001 bfac 	b.w	800cbbc <WS28xx::Blackout()>
 800ac64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac68:	f001 bf8c 	b.w	800cb84 <WS28xx::Update()>

0800ac6c <WS28xxDmx::Start(unsigned int)>:
 800ac6c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ac70:	b93b      	cbnz	r3, 800ac82 <WS28xxDmx::Start(unsigned int)+0x16>
 800ac72:	2301      	movs	r3, #1
 800ac74:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800ac78:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800ac7a:	b110      	cbz	r0, 800ac82 <WS28xxDmx::Start(unsigned int)+0x16>
 800ac7c:	6803      	ldr	r3, [r0, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	4718      	bx	r3
 800ac82:	4770      	bx	lr

0800ac84 <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 800ac84:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 800ac86:	b508      	push	{r3, lr}
 800ac88:	428a      	cmp	r2, r1
 800ac8a:	d101      	bne.n	800ac90 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	bd08      	pop	{r3, pc}
 800ac90:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 800ac92:	440a      	add	r2, r1
 800ac94:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800ac98:	dc0b      	bgt.n	800acb2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800ac9a:	1e4a      	subs	r2, r1, #1
 800ac9c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800aca0:	d207      	bcs.n	800acb2 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800aca2:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800aca4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d0f0      	beq.n	800ac8c <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800acaa:	6803      	ldr	r3, [r0, #0]
 800acac:	69db      	ldr	r3, [r3, #28]
 800acae:	4798      	blx	r3
 800acb0:	e7ec      	b.n	800ac8c <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800acb2:	2000      	movs	r0, #0
 800acb4:	e7eb      	b.n	800ac8e <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>

0800acb6 <WS28xxDmx::Stop(unsigned int)>:
 800acb6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800acba:	b510      	push	{r4, lr}
 800acbc:	4604      	mov	r4, r0
 800acbe:	b16b      	cbz	r3, 800acdc <WS28xxDmx::Stop(unsigned int)+0x26>
 800acc0:	2300      	movs	r3, #0
 800acc2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800acc6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800acc8:	b108      	cbz	r0, 800acce <WS28xxDmx::Stop(unsigned int)+0x18>
 800acca:	f001 ff77 	bl	800cbbc <WS28xx::Blackout()>
 800acce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800acd0:	b120      	cbz	r0, 800acdc <WS28xxDmx::Stop(unsigned int)+0x26>
 800acd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd6:	6803      	ldr	r3, [r0, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	4718      	bx	r3
 800acdc:	bd10      	pop	{r4, pc}

0800acde <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800acde:	4603      	mov	r3, r0
 800ace0:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800ace2:	4288      	cmp	r0, r1
 800ace4:	f04f 0000 	mov.w	r0, #0
 800ace8:	d30f      	bcc.n	800ad0a <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2c>
 800acea:	7090      	strb	r0, [r2, #2]
 800acec:	6a1b      	ldr	r3, [r3, #32]
 800acee:	fbb1 f0f3 	udiv	r0, r1, r3
 800acf2:	fb03 1110 	mls	r1, r3, r0, r1
 800acf6:	2903      	cmp	r1, #3
 800acf8:	d80e      	bhi.n	800ad18 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 800acfa:	e8df f001 	tbb	[pc, r1]
 800acfe:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 800ad02:	f240 2305 	movw	r3, #517	; 0x205
 800ad06:	2001      	movs	r0, #1
 800ad08:	8013      	strh	r3, [r2, #0]
 800ad0a:	4770      	bx	lr
 800ad0c:	f240 2306 	movw	r3, #518	; 0x206
 800ad10:	e7f9      	b.n	800ad06 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800ad12:	f240 2307 	movw	r3, #519	; 0x207
 800ad16:	e7f6      	b.n	800ad06 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800ad18:	f240 2312 	movw	r3, #530	; 0x212
 800ad1c:	e7f3      	b.n	800ad06 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>

0800ad1e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800ad1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad22:	b085      	sub	sp, #20
 800ad24:	4606      	mov	r6, r0
 800ad26:	4691      	mov	r9, r2
 800ad28:	4698      	mov	r8, r3
 800ad2a:	9103      	str	r1, [sp, #12]
 800ad2c:	f008 fb38 	bl	80133a0 <gd32_spi_dma_tx_is_active()>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d172      	bne.n	800ae1a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 800ad34:	9b03      	ldr	r3, [sp, #12]
 800ad36:	6972      	ldr	r2, [r6, #20]
 800ad38:	f003 0103 	and.w	r1, r3, #3
 800ad3c:	6a33      	ldr	r3, [r6, #32]
 800ad3e:	2902      	cmp	r1, #2
 800ad40:	fbb8 f7f3 	udiv	r7, r8, r3
 800ad44:	d01f      	beq.n	800ad86 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x68>
 800ad46:	2903      	cmp	r1, #3
 800ad48:	d024      	beq.n	800ad94 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x76>
 800ad4a:	2901      	cmp	r1, #1
 800ad4c:	6875      	ldr	r5, [r6, #4]
 800ad4e:	d01b      	beq.n	800ad88 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800ad50:	4297      	cmp	r7, r2
 800ad52:	bf28      	it	cs
 800ad54:	4617      	movcs	r7, r2
 800ad56:	4295      	cmp	r5, r2
 800ad58:	d91e      	bls.n	800ad98 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x7a>
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	8df4      	ldrh	r4, [r6, #46]	; 0x2e
 800ad5e:	3c01      	subs	r4, #1
 800ad60:	2b03      	cmp	r3, #3
 800ad62:	444c      	add	r4, r9
 800ad64:	d144      	bne.n	800adf0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xd2>
 800ad66:	42bd      	cmp	r5, r7
 800ad68:	d325      	bcc.n	800adb6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x98>
 800ad6a:	6933      	ldr	r3, [r6, #16]
 800ad6c:	9a03      	ldr	r2, [sp, #12]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d153      	bne.n	800ae1a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 800ad72:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d14f      	bne.n	800ae1a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xfc>
 800ad7a:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800ad7c:	b005      	add	sp, #20
 800ad7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad82:	f001 beff 	b.w	800cb84 <WS28xx::Update()>
 800ad86:	68b5      	ldr	r5, [r6, #8]
 800ad88:	442f      	add	r7, r5
 800ad8a:	4297      	cmp	r7, r2
 800ad8c:	bf28      	it	cs
 800ad8e:	4617      	movcs	r7, r2
 800ad90:	4604      	mov	r4, r0
 800ad92:	e7e5      	b.n	800ad60 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800ad94:	68f5      	ldr	r5, [r6, #12]
 800ad96:	e7f7      	b.n	800ad88 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800ad98:	4605      	mov	r5, r0
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	e7e0      	b.n	800ad60 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800ad9e:	78a2      	ldrb	r2, [r4, #2]
 800ada0:	7863      	ldrb	r3, [r4, #1]
 800ada2:	9200      	str	r2, [sp, #0]
 800ada4:	eb0b 010a 	add.w	r1, fp, sl
 800ada8:	7822      	ldrb	r2, [r4, #0]
 800adaa:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800adac:	f001 f8aa 	bl	800bf04 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800adb0:	f10a 0a01 	add.w	sl, sl, #1
 800adb4:	e00a      	b.n	800adcc <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xae>
 800adb6:	eba4 0309 	sub.w	r3, r4, r9
 800adba:	4598      	cmp	r8, r3
 800adbc:	d9d5      	bls.n	800ad6a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 800adbe:	f04f 0a00 	mov.w	sl, #0
 800adc2:	69b3      	ldr	r3, [r6, #24]
 800adc4:	f894 f000 	pld	[r4]
 800adc8:	fb03 fb05 	mul.w	fp, r3, r5
 800adcc:	69b3      	ldr	r3, [r6, #24]
 800adce:	459a      	cmp	sl, r3
 800add0:	d3e5      	bcc.n	800ad9e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 800add2:	3501      	adds	r5, #1
 800add4:	3403      	adds	r4, #3
 800add6:	e7c6      	b.n	800ad66 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x48>
 800add8:	f04f 0a00 	mov.w	sl, #0
 800addc:	69b3      	ldr	r3, [r6, #24]
 800adde:	f894 f000 	pld	[r4]
 800ade2:	fb03 fb05 	mul.w	fp, r3, r5
 800ade6:	69b3      	ldr	r3, [r6, #24]
 800ade8:	459a      	cmp	sl, r3
 800adea:	d308      	bcc.n	800adfe <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe0>
 800adec:	3501      	adds	r5, #1
 800adee:	3404      	adds	r4, #4
 800adf0:	42af      	cmp	r7, r5
 800adf2:	d9ba      	bls.n	800ad6a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 800adf4:	eba4 0309 	sub.w	r3, r4, r9
 800adf8:	4598      	cmp	r8, r3
 800adfa:	d8ed      	bhi.n	800add8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xba>
 800adfc:	e7b5      	b.n	800ad6a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x4c>
 800adfe:	78e2      	ldrb	r2, [r4, #3]
 800ae00:	7863      	ldrb	r3, [r4, #1]
 800ae02:	9201      	str	r2, [sp, #4]
 800ae04:	78a2      	ldrb	r2, [r4, #2]
 800ae06:	eb0b 010a 	add.w	r1, fp, sl
 800ae0a:	9200      	str	r2, [sp, #0]
 800ae0c:	7822      	ldrb	r2, [r4, #0]
 800ae0e:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800ae10:	f001 fd44 	bl	800c89c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800ae14:	f10a 0a01 	add.w	sl, sl, #1
 800ae18:	e7e5      	b.n	800ade6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xc8>
 800ae1a:	b005      	add	sp, #20
 800ae1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae20 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 800ae20:	22ff      	movs	r2, #255	; 0xff
 800ae22:	4b1d      	ldr	r3, [pc, #116]	; (800ae98 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x78>)
 800ae24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae26:	6003      	str	r3, [r0, #0]
 800ae28:	2300      	movs	r3, #0
 800ae2a:	460d      	mov	r5, r1
 800ae2c:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800ae30:	2101      	movs	r1, #1
 800ae32:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800ae36:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 800ae3a:	8483      	strh	r3, [r0, #36]	; 0x24
 800ae3c:	6283      	str	r3, [r0, #40]	; 0x28
 800ae3e:	63c3      	str	r3, [r0, #60]	; 0x3c
 800ae40:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800ae44:	4b15      	ldr	r3, [pc, #84]	; (800ae9c <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x7c>)
 800ae46:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800ae48:	6018      	str	r0, [r3, #0]
 800ae4a:	f100 031c 	add.w	r3, r0, #28
 800ae4e:	8602      	strh	r2, [r0, #48]	; 0x30
 800ae50:	9301      	str	r3, [sp, #4]
 800ae52:	f100 0314 	add.w	r3, r0, #20
 800ae56:	4604      	mov	r4, r0
 800ae58:	f100 0220 	add.w	r2, r0, #32
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	1d03      	adds	r3, r0, #4
 800ae60:	4628      	mov	r0, r5
 800ae62:	f000 fbcf 	bl	800b604 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 800ae66:	201c      	movs	r0, #28
 800ae68:	f007 f8a0 	bl	8011fac <operator new(unsigned int)>
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	4629      	mov	r1, r5
 800ae70:	f001 fe48 	bl	800cb04 <WS28xx::WS28xx(PixelConfiguration&)>
 800ae74:	4630      	mov	r0, r6
 800ae76:	6366      	str	r6, [r4, #52]	; 0x34
 800ae78:	f001 fea0 	bl	800cbbc <WS28xx::Blackout()>
 800ae7c:	69ab      	ldr	r3, [r5, #24]
 800ae7e:	6a22      	ldr	r2, [r4, #32]
 800ae80:	61a3      	str	r3, [r4, #24]
 800ae82:	8bab      	ldrh	r3, [r5, #28]
 800ae84:	4628      	mov	r0, r5
 800ae86:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800ae88:	6963      	ldr	r3, [r4, #20]
 800ae8a:	4353      	muls	r3, r2
 800ae8c:	8623      	strh	r3, [r4, #48]	; 0x30
 800ae8e:	f000 fc0e 	bl	800b6ae <PixelDmxConfiguration::Dump()>
 800ae92:	4620      	mov	r0, r4
 800ae94:	b002      	add	sp, #8
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	08014604 	stmdaeq	r1, {r2, r9, sl, lr}
 800ae9c:	20001908 	andcs	r1, r0, r8, lsl #18

0800aea0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800aea0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aea2:	88c6      	ldrh	r6, [r0, #6]
 800aea4:	8885      	ldrh	r5, [r0, #4]
 800aea6:	42ae      	cmp	r6, r5
 800aea8:	d216      	bcs.n	800aed8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800aeaa:	4604      	mov	r4, r0
 800aeac:	6800      	ldr	r0, [r0, #0]
 800aeae:	1bad      	subs	r5, r5, r6
 800aeb0:	4430      	add	r0, r6
 800aeb2:	7a26      	ldrb	r6, [r4, #8]
 800aeb4:	b923      	cbnz	r3, 800aec0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800aeb6:	b926      	cbnz	r6, 800aec2 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800aeb8:	9200      	str	r2, [sp, #0]
 800aeba:	460b      	mov	r3, r1
 800aebc:	4a09      	ldr	r2, [pc, #36]	; (800aee4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800aebe:	e003      	b.n	800aec8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800aec0:	b166      	cbz	r6, 800aedc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800aec2:	460b      	mov	r3, r1
 800aec4:	9200      	str	r2, [sp, #0]
 800aec6:	4a08      	ldr	r2, [pc, #32]	; (800aee8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800aec8:	4629      	mov	r1, r5
 800aeca:	f7fe f9d7 	bl	800927c <snprintf>
 800aece:	4285      	cmp	r5, r0
 800aed0:	bfa2      	ittt	ge
 800aed2:	88e3      	ldrhge	r3, [r4, #6]
 800aed4:	181b      	addge	r3, r3, r0
 800aed6:	80e3      	strhge	r3, [r4, #6]
 800aed8:	b002      	add	sp, #8
 800aeda:	bd70      	pop	{r4, r5, r6, pc}
 800aedc:	9200      	str	r2, [sp, #0]
 800aede:	460b      	mov	r3, r1
 800aee0:	4a02      	ldr	r2, [pc, #8]	; (800aeec <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800aee2:	e7f1      	b.n	800aec8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800aee4:	080144fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, lr}
 800aee8:	080144f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sl, lr}
 800aeec:	080144fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, lr}

0800aef0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800aef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aef2:	88c6      	ldrh	r6, [r0, #6]
 800aef4:	8885      	ldrh	r5, [r0, #4]
 800aef6:	42ae      	cmp	r6, r5
 800aef8:	d216      	bcs.n	800af28 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800aefa:	4604      	mov	r4, r0
 800aefc:	6800      	ldr	r0, [r0, #0]
 800aefe:	1bad      	subs	r5, r5, r6
 800af00:	4430      	add	r0, r6
 800af02:	7a26      	ldrb	r6, [r4, #8]
 800af04:	b923      	cbnz	r3, 800af10 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800af06:	b926      	cbnz	r6, 800af12 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800af08:	9200      	str	r2, [sp, #0]
 800af0a:	460b      	mov	r3, r1
 800af0c:	4a09      	ldr	r2, [pc, #36]	; (800af34 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800af0e:	e003      	b.n	800af18 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800af10:	b166      	cbz	r6, 800af2c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800af12:	460b      	mov	r3, r1
 800af14:	9200      	str	r2, [sp, #0]
 800af16:	4a08      	ldr	r2, [pc, #32]	; (800af38 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800af18:	4629      	mov	r1, r5
 800af1a:	f7fe f9af 	bl	800927c <snprintf>
 800af1e:	4285      	cmp	r5, r0
 800af20:	bfa2      	ittt	ge
 800af22:	88e3      	ldrhge	r3, [r4, #6]
 800af24:	181b      	addge	r3, r3, r0
 800af26:	80e3      	strhge	r3, [r4, #6]
 800af28:	b002      	add	sp, #8
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	9200      	str	r2, [sp, #0]
 800af2e:	460b      	mov	r3, r1
 800af30:	4a02      	ldr	r2, [pc, #8]	; (800af3c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800af32:	e7f1      	b.n	800af18 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800af34:	080144fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, lr}
 800af38:	080144f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sl, lr}
 800af3c:	080144fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, lr}

0800af40 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800af40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af42:	88c6      	ldrh	r6, [r0, #6]
 800af44:	8885      	ldrh	r5, [r0, #4]
 800af46:	42ae      	cmp	r6, r5
 800af48:	d216      	bcs.n	800af78 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800af4a:	4604      	mov	r4, r0
 800af4c:	6800      	ldr	r0, [r0, #0]
 800af4e:	1bad      	subs	r5, r5, r6
 800af50:	4430      	add	r0, r6
 800af52:	7a26      	ldrb	r6, [r4, #8]
 800af54:	b923      	cbnz	r3, 800af60 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800af56:	b926      	cbnz	r6, 800af62 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800af58:	9200      	str	r2, [sp, #0]
 800af5a:	460b      	mov	r3, r1
 800af5c:	4a09      	ldr	r2, [pc, #36]	; (800af84 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800af5e:	e003      	b.n	800af68 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800af60:	b166      	cbz	r6, 800af7c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800af62:	460b      	mov	r3, r1
 800af64:	9200      	str	r2, [sp, #0]
 800af66:	4a08      	ldr	r2, [pc, #32]	; (800af88 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800af68:	4629      	mov	r1, r5
 800af6a:	f7fe f987 	bl	800927c <snprintf>
 800af6e:	4285      	cmp	r5, r0
 800af70:	bfa2      	ittt	ge
 800af72:	88e3      	ldrhge	r3, [r4, #6]
 800af74:	181b      	addge	r3, r3, r0
 800af76:	80e3      	strhge	r3, [r4, #6]
 800af78:	b002      	add	sp, #8
 800af7a:	bd70      	pop	{r4, r5, r6, pc}
 800af7c:	9200      	str	r2, [sp, #0]
 800af7e:	460b      	mov	r3, r1
 800af80:	4a02      	ldr	r2, [pc, #8]	; (800af8c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800af82:	e7f1      	b.n	800af68 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800af84:	080144ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, sl, lr}
 800af88:	080144df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, sl, lr}
 800af8c:	080144eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, sl, lr}

0800af90 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 800af90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af94:	4699      	mov	r9, r3
 800af96:	8885      	ldrh	r5, [r0, #4]
 800af98:	88c3      	ldrh	r3, [r0, #6]
 800af9a:	4604      	mov	r4, r0
 800af9c:	42ab      	cmp	r3, r5
 800af9e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800afa2:	d227      	bcs.n	800aff4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 800afa4:	6826      	ldr	r6, [r4, #0]
 800afa6:	4610      	mov	r0, r2
 800afa8:	460f      	mov	r7, r1
 800afaa:	f894 a008 	ldrb.w	sl, [r4, #8]
 800afae:	441e      	add	r6, r3
 800afb0:	1aed      	subs	r5, r5, r3
 800afb2:	f7fd f90f 	bl	80081d4 <__aeabi_f2d>
 800afb6:	f1b9 0f00 	cmp.w	r9, #0
 800afba:	d109      	bne.n	800afd0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 800afbc:	f1ba 0f00 	cmp.w	sl, #0
 800afc0:	d109      	bne.n	800afd6 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 800afc2:	463b      	mov	r3, r7
 800afc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afc8:	4a0f      	ldr	r2, [pc, #60]	; (800b008 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 800afca:	f8cd 8000 	str.w	r8, [sp]
 800afce:	e008      	b.n	800afe2 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800afd0:	f1ba 0f00 	cmp.w	sl, #0
 800afd4:	d011      	beq.n	800affa <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 800afd6:	463b      	mov	r3, r7
 800afd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afdc:	4a0b      	ldr	r2, [pc, #44]	; (800b00c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 800afde:	f8cd 8000 	str.w	r8, [sp]
 800afe2:	4629      	mov	r1, r5
 800afe4:	4630      	mov	r0, r6
 800afe6:	f7fe f949 	bl	800927c <snprintf>
 800afea:	4285      	cmp	r5, r0
 800afec:	bfa2      	ittt	ge
 800afee:	88e3      	ldrhge	r3, [r4, #6]
 800aff0:	181b      	addge	r3, r3, r0
 800aff2:	80e3      	strhge	r3, [r4, #6]
 800aff4:	b004      	add	sp, #16
 800aff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800affa:	463b      	mov	r3, r7
 800affc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b000:	4a03      	ldr	r2, [pc, #12]	; (800b010 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 800b002:	f8cd 8000 	str.w	r8, [sp]
 800b006:	e7ec      	b.n	800afe2 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800b008:	0801463b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r9, sl, lr}
 800b00c:	08014630 	stmdaeq	r1, {r4, r5, r9, sl, lr}
 800b010:	0801463c 	stmdaeq	r1, {r2, r3, r4, r5, r9, sl, lr}

0800b014 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 800b014:	2200      	movs	r2, #0
 800b016:	6001      	str	r1, [r0, #0]
 800b018:	4910      	ldr	r1, [pc, #64]	; (800b05c <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x48>)
 800b01a:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800b01e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800b022:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800b026:	81c1      	strh	r1, [r0, #14]
 800b028:	213d      	movs	r1, #61	; 0x3d
 800b02a:	8201      	strh	r1, [r0, #16]
 800b02c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b030:	8241      	strh	r1, [r0, #18]
 800b032:	2101      	movs	r1, #1
 800b034:	7541      	strb	r1, [r0, #21]
 800b036:	2106      	movs	r1, #6
 800b038:	75c1      	strb	r1, [r0, #23]
 800b03a:	4909      	ldr	r1, [pc, #36]	; (800b060 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x4c>)
 800b03c:	7302      	strb	r2, [r0, #12]
 800b03e:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800b042:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 800b046:	6201      	str	r1, [r0, #32]
 800b048:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 800b04c:	6241      	str	r1, [r0, #36]	; 0x24
 800b04e:	211d      	movs	r1, #29
 800b050:	7582      	strb	r2, [r0, #22]
 800b052:	8501      	strh	r1, [r0, #40]	; 0x28
 800b054:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	0100aa03 	tsteq	r0, r3, lsl #20
 800b060:	00090005 	andeq	r0, r9, r5

0800b064 <WS28xxDmxParams::Load()>:
 800b064:	b508      	push	{r3, lr}
 800b066:	2300      	movs	r3, #0
 800b068:	4601      	mov	r1, r0
 800b06a:	6043      	str	r3, [r0, #4]
 800b06c:	6800      	ldr	r0, [r0, #0]
 800b06e:	b120      	cbz	r0, 800b07a <WS28xxDmxParams::Load()+0x16>
 800b070:	6803      	ldr	r3, [r0, #0]
 800b072:	3104      	adds	r1, #4
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	4798      	blx	r3
 800b078:	2001      	movs	r0, #1
 800b07a:	bd08      	pop	{r3, pc}

0800b07c <WS28xxDmxParams::Load(char const*, unsigned int)>:
 800b07c:	6803      	ldr	r3, [r0, #0]
 800b07e:	b1d3      	cbz	r3, 800b0b6 <WS28xxDmxParams::Load(char const*, unsigned int)+0x3a>
 800b080:	2300      	movs	r3, #0
 800b082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b084:	460d      	mov	r5, r1
 800b086:	4616      	mov	r6, r2
 800b088:	4604      	mov	r4, r0
 800b08a:	6043      	str	r3, [r0, #4]
 800b08c:	4602      	mov	r2, r0
 800b08e:	490a      	ldr	r1, [pc, #40]	; (800b0b8 <WS28xxDmxParams::Load(char const*, unsigned int)+0x3c>)
 800b090:	4668      	mov	r0, sp
 800b092:	f006 f9db 	bl	801144c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800b096:	4632      	mov	r2, r6
 800b098:	4629      	mov	r1, r5
 800b09a:	4668      	mov	r0, sp
 800b09c:	f006 f9da 	bl	8011454 <ReadConfigFile::Read(char const*, unsigned int)>
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	f851 0b04 	ldr.w	r0, [r1], #4
 800b0a6:	6803      	ldr	r3, [r0, #0]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	4798      	blx	r3
 800b0ac:	4668      	mov	r0, sp
 800b0ae:	f006 f9d0 	bl	8011452 <ReadConfigFile::~ReadConfigFile()>
 800b0b2:	b002      	add	sp, #8
 800b0b4:	bd70      	pop	{r4, r5, r6, pc}
 800b0b6:	4770      	bx	lr
 800b0b8:	0800b305 	stmdaeq	r0, {r0, r2, r8, r9, ip, sp, pc}

0800b0bc <WS28xxDmxParams::callbackFunction(char const*)>:
 800b0bc:	b530      	push	{r4, r5, lr}
 800b0be:	2308      	movs	r3, #8
 800b0c0:	460d      	mov	r5, r1
 800b0c2:	b089      	sub	sp, #36	; 0x24
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	9302      	str	r3, [sp, #8]
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	4982      	ldr	r1, [pc, #520]	; (800b2d4 <WS28xxDmxParams::callbackFunction(char const*)+0x218>)
 800b0cc:	446b      	add	r3, sp
 800b0ce:	aa04      	add	r2, sp, #16
 800b0d0:	f006 f9f4 	bl	80114bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b0d4:	b9a0      	cbnz	r0, 800b100 <WS28xxDmxParams::callbackFunction(char const*)+0x44>
 800b0d6:	9b02      	ldr	r3, [sp, #8]
 800b0d8:	3320      	adds	r3, #32
 800b0da:	446b      	add	r3, sp
 800b0dc:	f803 0c10 	strb.w	r0, [r3, #-16]
 800b0e0:	a804      	add	r0, sp, #16
 800b0e2:	f000 fdfb 	bl	800bcdc <PixelType::GetType(char const*)>
 800b0e6:	280e      	cmp	r0, #14
 800b0e8:	bf08      	it	eq
 800b0ea:	2203      	moveq	r2, #3
 800b0ec:	6863      	ldr	r3, [r4, #4]
 800b0ee:	bf19      	ittee	ne
 800b0f0:	7220      	strbne	r0, [r4, #8]
 800b0f2:	f043 0301 	orrne.w	r3, r3, #1
 800b0f6:	7222      	strbeq	r2, [r4, #8]
 800b0f8:	f023 0301 	biceq.w	r3, r3, #1
 800b0fc:	6063      	str	r3, [r4, #4]
 800b0fe:	e033      	b.n	800b168 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800b100:	4628      	mov	r0, r5
 800b102:	4975      	ldr	r1, [pc, #468]	; (800b2d8 <WS28xxDmxParams::callbackFunction(char const*)+0x21c>)
 800b104:	f10d 0202 	add.w	r2, sp, #2
 800b108:	f006 fa95 	bl	8011636 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800b10c:	b990      	cbnz	r0, 800b134 <WS28xxDmxParams::callbackFunction(char const*)+0x78>
 800b10e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b112:	6863      	ldr	r3, [r4, #4]
 800b114:	1e51      	subs	r1, r2, #1
 800b116:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 800b11a:	bf2d      	iteet	cs
 800b11c:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 800b120:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 800b124:	f043 0302 	orrcc.w	r3, r3, #2
 800b128:	7262      	strbcs	r2, [r4, #9]
 800b12a:	bf24      	itt	cs
 800b12c:	72a0      	strbcs	r0, [r4, #10]
 800b12e:	f023 0302 	biccs.w	r3, r3, #2
 800b132:	e7e3      	b.n	800b0fc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800b134:	2303      	movs	r3, #3
 800b136:	4628      	mov	r0, r5
 800b138:	9302      	str	r3, [sp, #8]
 800b13a:	4968      	ldr	r1, [pc, #416]	; (800b2dc <WS28xxDmxParams::callbackFunction(char const*)+0x220>)
 800b13c:	ab02      	add	r3, sp, #8
 800b13e:	aa04      	add	r2, sp, #16
 800b140:	f006 f9bc 	bl	80114bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b144:	b990      	cbnz	r0, 800b16c <WS28xxDmxParams::callbackFunction(char const*)+0xb0>
 800b146:	9b02      	ldr	r3, [sp, #8]
 800b148:	3320      	adds	r3, #32
 800b14a:	446b      	add	r3, sp
 800b14c:	f803 0c10 	strb.w	r0, [r3, #-16]
 800b150:	a804      	add	r0, sp, #16
 800b152:	f000 fde7 	bl	800bd24 <PixelType::GetMap(char const*)>
 800b156:	6863      	ldr	r3, [r4, #4]
 800b158:	2806      	cmp	r0, #6
 800b15a:	bf14      	ite	ne
 800b15c:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 800b160:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 800b164:	6063      	str	r3, [r4, #4]
 800b166:	75e0      	strb	r0, [r4, #23]
 800b168:	b009      	add	sp, #36	; 0x24
 800b16a:	bd30      	pop	{r4, r5, pc}
 800b16c:	4628      	mov	r0, r5
 800b16e:	495c      	ldr	r1, [pc, #368]	; (800b2e0 <WS28xxDmxParams::callbackFunction(char const*)+0x224>)
 800b170:	aa01      	add	r2, sp, #4
 800b172:	f006 f9bc 	bl	80114ee <Sscan::Float(char const*, char const*, float&)>
 800b176:	b960      	cbnz	r0, 800b192 <WS28xxDmxParams::callbackFunction(char const*)+0xd6>
 800b178:	9801      	ldr	r0, [sp, #4]
 800b17a:	f000 fe35 	bl	800bde8 <PixelType::ConvertTxH(float)>
 800b17e:	6863      	ldr	r3, [r4, #4]
 800b180:	b120      	cbz	r0, 800b18c <WS28xxDmxParams::callbackFunction(char const*)+0xd0>
 800b182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b186:	6063      	str	r3, [r4, #4]
 800b188:	7620      	strb	r0, [r4, #24]
 800b18a:	e7ed      	b.n	800b168 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800b18c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b190:	e7f9      	b.n	800b186 <WS28xxDmxParams::callbackFunction(char const*)+0xca>
 800b192:	4628      	mov	r0, r5
 800b194:	4953      	ldr	r1, [pc, #332]	; (800b2e4 <WS28xxDmxParams::callbackFunction(char const*)+0x228>)
 800b196:	aa01      	add	r2, sp, #4
 800b198:	f006 f9a9 	bl	80114ee <Sscan::Float(char const*, char const*, float&)>
 800b19c:	b960      	cbnz	r0, 800b1b8 <WS28xxDmxParams::callbackFunction(char const*)+0xfc>
 800b19e:	9801      	ldr	r0, [sp, #4]
 800b1a0:	f000 fe22 	bl	800bde8 <PixelType::ConvertTxH(float)>
 800b1a4:	6863      	ldr	r3, [r4, #4]
 800b1a6:	b120      	cbz	r0, 800b1b2 <WS28xxDmxParams::callbackFunction(char const*)+0xf6>
 800b1a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b1ac:	6063      	str	r3, [r4, #4]
 800b1ae:	7660      	strb	r0, [r4, #25]
 800b1b0:	e7da      	b.n	800b168 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800b1b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1b6:	e7f9      	b.n	800b1ac <WS28xxDmxParams::callbackFunction(char const*)+0xf0>
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	494b      	ldr	r1, [pc, #300]	; (800b2e8 <WS28xxDmxParams::callbackFunction(char const*)+0x22c>)
 800b1bc:	f10d 0202 	add.w	r2, sp, #2
 800b1c0:	f006 fa39 	bl	8011636 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800b1c4:	b998      	cbnz	r0, 800b1ee <WS28xxDmxParams::callbackFunction(char const*)+0x132>
 800b1c6:	f240 25a6 	movw	r5, #678	; 0x2a6
 800b1ca:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800b1ce:	6863      	ldr	r3, [r4, #4]
 800b1d0:	1e8a      	subs	r2, r1, #2
 800b1d2:	b292      	uxth	r2, r2
 800b1d4:	42aa      	cmp	r2, r5
 800b1d6:	bf81      	itttt	hi
 800b1d8:	2201      	movhi	r2, #1
 800b1da:	75a0      	strbhi	r0, [r4, #22]
 800b1dc:	7562      	strbhi	r2, [r4, #21]
 800b1de:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800b1e2:	bf9c      	itt	ls
 800b1e4:	f8a4 1015 	strhls.w	r1, [r4, #21]
 800b1e8:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800b1ec:	e786      	b.n	800b0fc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	493e      	ldr	r1, [pc, #248]	; (800b2ec <WS28xxDmxParams::callbackFunction(char const*)+0x230>)
 800b1f2:	aa03      	add	r2, sp, #12
 800b1f4:	f006 fa3d 	bl	8011672 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 800b1f8:	b960      	cbnz	r0, 800b214 <WS28xxDmxParams::callbackFunction(char const*)+0x158>
 800b1fa:	9a03      	ldr	r2, [sp, #12]
 800b1fc:	493c      	ldr	r1, [pc, #240]	; (800b2f0 <WS28xxDmxParams::callbackFunction(char const*)+0x234>)
 800b1fe:	6863      	ldr	r3, [r4, #4]
 800b200:	428a      	cmp	r2, r1
 800b202:	bf14      	ite	ne
 800b204:	f043 0310 	orrne.w	r3, r3, #16
 800b208:	f023 0310 	biceq.w	r3, r3, #16
 800b20c:	6063      	str	r3, [r4, #4]
 800b20e:	f8c4 200e 	str.w	r2, [r4, #14]
 800b212:	e7a9      	b.n	800b168 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800b214:	4628      	mov	r0, r5
 800b216:	4937      	ldr	r1, [pc, #220]	; (800b2f4 <WS28xxDmxParams::callbackFunction(char const*)+0x238>)
 800b218:	f10d 0201 	add.w	r2, sp, #1
 800b21c:	f006 fa52 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b220:	b988      	cbnz	r0, 800b246 <WS28xxDmxParams::callbackFunction(char const*)+0x18a>
 800b222:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800b226:	6863      	ldr	r3, [r4, #4]
 800b228:	1e4a      	subs	r2, r1, #1
 800b22a:	b2d2      	uxtb	r2, r2
 800b22c:	2afd      	cmp	r2, #253	; 0xfd
 800b22e:	bf83      	ittte	hi
 800b230:	f023 0320 	bichi.w	r3, r3, #32
 800b234:	6063      	strhi	r3, [r4, #4]
 800b236:	23ff      	movhi	r3, #255	; 0xff
 800b238:	f043 0320 	orrls.w	r3, r3, #32
 800b23c:	bf9a      	itte	ls
 800b23e:	6063      	strls	r3, [r4, #4]
 800b240:	74a1      	strbls	r1, [r4, #18]
 800b242:	74a3      	strbhi	r3, [r4, #18]
 800b244:	e790      	b.n	800b168 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800b246:	4628      	mov	r0, r5
 800b248:	492b      	ldr	r1, [pc, #172]	; (800b2f8 <WS28xxDmxParams::callbackFunction(char const*)+0x23c>)
 800b24a:	f10d 0202 	add.w	r2, sp, #2
 800b24e:	f006 f9f2 	bl	8011636 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800b252:	b9b8      	cbnz	r0, 800b284 <WS28xxDmxParams::callbackFunction(char const*)+0x1c8>
 800b254:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b258:	6863      	ldr	r3, [r4, #4]
 800b25a:	1e91      	subs	r1, r2, #2
 800b25c:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800b260:	bf83      	ittte	hi
 800b262:	2201      	movhi	r2, #1
 800b264:	72e2      	strbhi	r2, [r4, #11]
 800b266:	2200      	movhi	r2, #0
 800b268:	f8a4 200b 	strhls.w	r2, [r4, #11]
 800b26c:	bf92      	itee	ls
 800b26e:	f043 0304 	orrls.w	r3, r3, #4
 800b272:	7322      	strbhi	r2, [r4, #12]
 800b274:	f023 0304 	bichi.w	r3, r3, #4
 800b278:	e740      	b.n	800b0fc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800b27a:	2201      	movs	r2, #1
 800b27c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b280:	8362      	strh	r2, [r4, #26]
 800b282:	e00e      	b.n	800b2a2 <WS28xxDmxParams::callbackFunction(char const*)+0x1e6>
 800b284:	4628      	mov	r0, r5
 800b286:	491d      	ldr	r1, [pc, #116]	; (800b2fc <WS28xxDmxParams::callbackFunction(char const*)+0x240>)
 800b288:	f10d 0202 	add.w	r2, sp, #2
 800b28c:	f006 f9d3 	bl	8011636 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800b290:	b940      	cbnz	r0, 800b2a4 <WS28xxDmxParams::callbackFunction(char const*)+0x1e8>
 800b292:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b296:	6863      	ldr	r3, [r4, #4]
 800b298:	2a00      	cmp	r2, #0
 800b29a:	d0ee      	beq.n	800b27a <WS28xxDmxParams::callbackFunction(char const*)+0x1be>
 800b29c:	8362      	strh	r2, [r4, #26]
 800b29e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b2a2:	6063      	str	r3, [r4, #4]
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	4916      	ldr	r1, [pc, #88]	; (800b300 <WS28xxDmxParams::callbackFunction(char const*)+0x244>)
 800b2a8:	f10d 0201 	add.w	r2, sp, #1
 800b2ac:	f006 fa0a 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	f47f af59 	bne.w	800b168 <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800b2b6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b2ba:	6863      	ldr	r3, [r4, #4]
 800b2bc:	1e51      	subs	r1, r2, #1
 800b2be:	2904      	cmp	r1, #4
 800b2c0:	bf99      	ittee	ls
 800b2c2:	f884 202a 	strbls.w	r2, [r4, #42]	; 0x2a
 800b2c6:	f443 1380 	orrls.w	r3, r3, #1048576	; 0x100000
 800b2ca:	f884 002a 	strbhi.w	r0, [r4, #42]	; 0x2a
 800b2ce:	f423 1380 	bichi.w	r3, r3, #1048576	; 0x100000
 800b2d2:	e713      	b.n	800b0fc <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800b2d4:	08015e10 	stmdaeq	r1, {r4, r9, sl, fp, ip, lr}
 800b2d8:	08015e19 	stmdaeq	r1, {r0, r3, r4, r9, sl, fp, ip, lr}
 800b2dc:	08015e00 	stmdaeq	r1, {r9, sl, fp, ip, lr}
 800b2e0:	08015e23 	stmdaeq	r1, {r0, r1, r5, r9, sl, fp, ip, lr}
 800b2e4:	08015e2b 	stmdaeq	r1, {r0, r1, r3, r5, r9, sl, fp, ip, lr}
 800b2e8:	08015dde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, sl, fp, ip, lr}
 800b2ec:	08015dcf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, sl, fp, ip, lr}
 800b2f0:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800b2f4:	08015dee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, sl, fp, ip, lr}
 800b2f8:	08015f91 	stmdaeq	r1, {r0, r4, r7, r8, r9, sl, fp, ip, lr}
 800b2fc:	08015eb9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, sl, fp, ip, lr}
 800b300:	08015e6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, sl, fp, ip, lr}

0800b304 <WS28xxDmxParams::staticCallbackFunction(void*, char const*)>:
 800b304:	f7ff beda 	b.w	800b0bc <WS28xxDmxParams::callbackFunction(char const*)>

0800b308 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>:
 800b308:	b570      	push	{r4, r5, r6, lr}
 800b30a:	4604      	mov	r4, r0
 800b30c:	4615      	mov	r5, r2
 800b30e:	461e      	mov	r6, r3
 800b310:	b086      	sub	sp, #24
 800b312:	3004      	adds	r0, #4
 800b314:	2900      	cmp	r1, #0
 800b316:	f000 808f 	beq.w	800b438 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x130>
 800b31a:	2227      	movs	r2, #39	; 0x27
 800b31c:	f006 ff05 	bl	801212a <memmove>
 800b320:	4633      	mov	r3, r6
 800b322:	462a      	mov	r2, r5
 800b324:	4975      	ldr	r1, [pc, #468]	; (800b4fc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800b326:	a803      	add	r0, sp, #12
 800b328:	f005 fff0 	bl	801130c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800b32c:	7a20      	ldrb	r0, [r4, #8]
 800b32e:	f000 fcc9 	bl	800bcc4 <PixelType::GetType(pixel::Type)>
 800b332:	6863      	ldr	r3, [r4, #4]
 800b334:	4602      	mov	r2, r0
 800b336:	4972      	ldr	r1, [pc, #456]	; (800b500 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 800b338:	f003 0301 	and.w	r3, r3, #1
 800b33c:	a803      	add	r0, sp, #12
 800b33e:	f7ff fdff 	bl	800af40 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b342:	6863      	ldr	r3, [r4, #4]
 800b344:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 800b348:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b34c:	496d      	ldr	r1, [pc, #436]	; (800b504 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 800b34e:	a803      	add	r0, sp, #12
 800b350:	f7ff fdce 	bl	800aef0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800b354:	496c      	ldr	r1, [pc, #432]	; (800b508 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x200>)
 800b356:	a803      	add	r0, sp, #12
 800b358:	f006 f85e 	bl	8011418 <PropertiesBuilder::AddComment(char const*)>
 800b35c:	6863      	ldr	r3, [r4, #4]
 800b35e:	059e      	lsls	r6, r3, #22
 800b360:	d403      	bmi.n	800b36a <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x62>
 800b362:	7a20      	ldrb	r0, [r4, #8]
 800b364:	f000 f9a4 	bl	800b6b0 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800b368:	75e0      	strb	r0, [r4, #23]
 800b36a:	7de0      	ldrb	r0, [r4, #23]
 800b36c:	f000 fd02 	bl	800bd74 <PixelType::GetMap(pixel::Map)>
 800b370:	6863      	ldr	r3, [r4, #4]
 800b372:	4602      	mov	r2, r0
 800b374:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800b378:	4964      	ldr	r1, [pc, #400]	; (800b50c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x204>)
 800b37a:	a803      	add	r0, sp, #12
 800b37c:	f7ff fde0 	bl	800af40 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b380:	6863      	ldr	r3, [r4, #4]
 800b382:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b386:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b38a:	d011      	beq.n	800b3b0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800b38c:	f10d 020b 	add.w	r2, sp, #11
 800b390:	7a20      	ldrb	r0, [r4, #8]
 800b392:	f10d 010a 	add.w	r1, sp, #10
 800b396:	f000 f995 	bl	800b6c4 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800b39a:	6863      	ldr	r3, [r4, #4]
 800b39c:	055d      	lsls	r5, r3, #21
 800b39e:	bf5c      	itt	pl
 800b3a0:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 800b3a4:	7622      	strbpl	r2, [r4, #24]
 800b3a6:	0518      	lsls	r0, r3, #20
 800b3a8:	bf5c      	itt	pl
 800b3aa:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 800b3ae:	7663      	strbpl	r3, [r4, #25]
 800b3b0:	4957      	ldr	r1, [pc, #348]	; (800b510 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x208>)
 800b3b2:	a803      	add	r0, sp, #12
 800b3b4:	f006 f830 	bl	8011418 <PropertiesBuilder::AddComment(char const*)>
 800b3b8:	7e20      	ldrb	r0, [r4, #24]
 800b3ba:	f000 fce7 	bl	800bd8c <PixelType::ConvertTxH(unsigned char)>
 800b3be:	2502      	movs	r5, #2
 800b3c0:	6863      	ldr	r3, [r4, #4]
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	4953      	ldr	r1, [pc, #332]	; (800b514 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800b3c6:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800b3ca:	9500      	str	r5, [sp, #0]
 800b3cc:	a803      	add	r0, sp, #12
 800b3ce:	f7ff fddf 	bl	800af90 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800b3d2:	7e60      	ldrb	r0, [r4, #25]
 800b3d4:	f000 fcda 	bl	800bd8c <PixelType::ConvertTxH(unsigned char)>
 800b3d8:	6863      	ldr	r3, [r4, #4]
 800b3da:	4602      	mov	r2, r0
 800b3dc:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800b3e0:	494d      	ldr	r1, [pc, #308]	; (800b518 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800b3e2:	9500      	str	r5, [sp, #0]
 800b3e4:	a803      	add	r0, sp, #12
 800b3e6:	f7ff fdd3 	bl	800af90 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800b3ea:	494c      	ldr	r1, [pc, #304]	; (800b51c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x214>)
 800b3ec:	a803      	add	r0, sp, #12
 800b3ee:	f006 f813 	bl	8011418 <PropertiesBuilder::AddComment(char const*)>
 800b3f2:	6863      	ldr	r3, [r4, #4]
 800b3f4:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 800b3f8:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800b3fc:	4948      	ldr	r1, [pc, #288]	; (800b520 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x218>)
 800b3fe:	a803      	add	r0, sp, #12
 800b400:	f7ff fd76 	bl	800aef0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800b404:	4947      	ldr	r1, [pc, #284]	; (800b524 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x21c>)
 800b406:	a803      	add	r0, sp, #12
 800b408:	f006 f806 	bl	8011418 <PropertiesBuilder::AddComment(char const*)>
 800b40c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b410:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800b414:	f8d4 300e 	ldr.w	r3, [r4, #14]
 800b418:	42aa      	cmp	r2, r5
 800b41a:	6861      	ldr	r1, [r4, #4]
 800b41c:	d222      	bcs.n	800b464 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x15c>
 800b41e:	9803      	ldr	r0, [sp, #12]
 800b420:	06c9      	lsls	r1, r1, #27
 800b422:	4410      	add	r0, r2
 800b424:	eba5 0502 	sub.w	r5, r5, r2
 800b428:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800b42c:	d40b      	bmi.n	800b446 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x13e>
 800b42e:	b962      	cbnz	r2, 800b44a <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x142>
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	4a3d      	ldr	r2, [pc, #244]	; (800b528 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800b434:	4b3d      	ldr	r3, [pc, #244]	; (800b52c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800b436:	e00b      	b.n	800b450 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x148>
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	4601      	mov	r1, r0
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	4618      	mov	r0, r3
 800b440:	68d2      	ldr	r2, [r2, #12]
 800b442:	4790      	blx	r2
 800b444:	e76c      	b.n	800b320 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x18>
 800b446:	2a00      	cmp	r2, #0
 800b448:	d053      	beq.n	800b4f2 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1ea>
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	4a38      	ldr	r2, [pc, #224]	; (800b530 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x228>)
 800b44e:	4b37      	ldr	r3, [pc, #220]	; (800b52c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800b450:	4629      	mov	r1, r5
 800b452:	f7fd ff13 	bl	800927c <snprintf>
 800b456:	4285      	cmp	r5, r0
 800b458:	bfa2      	ittt	ge
 800b45a:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800b45e:	18c0      	addge	r0, r0, r3
 800b460:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800b464:	4933      	ldr	r1, [pc, #204]	; (800b534 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x22c>)
 800b466:	a803      	add	r0, sp, #12
 800b468:	f005 ffd6 	bl	8011418 <PropertiesBuilder::AddComment(char const*)>
 800b46c:	6863      	ldr	r3, [r4, #4]
 800b46e:	7ca2      	ldrb	r2, [r4, #18]
 800b470:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b474:	4930      	ldr	r1, [pc, #192]	; (800b538 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x230>)
 800b476:	a803      	add	r0, sp, #12
 800b478:	f7ff fd12 	bl	800aea0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b47c:	492f      	ldr	r1, [pc, #188]	; (800b53c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x234>)
 800b47e:	a803      	add	r0, sp, #12
 800b480:	f005 ffca 	bl	8011418 <PropertiesBuilder::AddComment(char const*)>
 800b484:	6863      	ldr	r3, [r4, #4]
 800b486:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 800b48a:	492d      	ldr	r1, [pc, #180]	; (800b540 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x238>)
 800b48c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b490:	a803      	add	r0, sp, #12
 800b492:	f7ff fd2d 	bl	800aef0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800b496:	6863      	ldr	r3, [r4, #4]
 800b498:	8b62      	ldrh	r2, [r4, #26]
 800b49a:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800b49e:	4929      	ldr	r1, [pc, #164]	; (800b544 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x23c>)
 800b4a0:	a803      	add	r0, sp, #12
 800b4a2:	f7ff fd25 	bl	800aef0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800b4a6:	4928      	ldr	r1, [pc, #160]	; (800b548 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x240>)
 800b4a8:	a803      	add	r0, sp, #12
 800b4aa:	f005 ffb5 	bl	8011418 <PropertiesBuilder::AddComment(char const*)>
 800b4ae:	6863      	ldr	r3, [r4, #4]
 800b4b0:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800b4b4:	f3c3 5300 	ubfx	r3, r3, #20, #1
 800b4b8:	4924      	ldr	r1, [pc, #144]	; (800b54c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x244>)
 800b4ba:	a803      	add	r0, sp, #12
 800b4bc:	f7ff fcf0 	bl	800aea0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b4c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b4c4:	b17b      	cbz	r3, 800b4e6 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1de>
 800b4c6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b4ca:	9b03      	ldr	r3, [sp, #12]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	227d      	movs	r2, #125	; 0x7d
 800b4d0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b4d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b4d8:	9903      	ldr	r1, [sp, #12]
 800b4da:	54ca      	strb	r2, [r1, r3]
 800b4dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	f8ad 3012 	strh.w	r3, [sp, #18]
 800b4e6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800b4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	b006      	add	sp, #24
 800b4f0:	bd70      	pop	{r4, r5, r6, pc}
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	4a16      	ldr	r2, [pc, #88]	; (800b550 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x248>)
 800b4f6:	4b0d      	ldr	r3, [pc, #52]	; (800b52c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800b4f8:	e7aa      	b.n	800b450 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x148>
 800b4fa:	bf00      	nop
 800b4fc:	08015e33 	stmdaeq	r1, {r0, r1, r4, r5, r9, sl, fp, ip, lr}
 800b500:	08015e10 	stmdaeq	r1, {r4, r9, sl, fp, ip, lr}
 800b504:	08015e19 	stmdaeq	r1, {r0, r3, r4, r9, sl, fp, ip, lr}
 800b508:	08014645 	stmdaeq	r1, {r0, r2, r6, r9, sl, lr}
 800b50c:	08015e00 	stmdaeq	r1, {r9, sl, fp, ip, lr}
 800b510:	08014659 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, lr}
 800b514:	08015e23 	stmdaeq	r1, {r0, r1, r5, r9, sl, fp, ip, lr}
 800b518:	08015e2b 	stmdaeq	r1, {r0, r1, r3, r5, r9, sl, fp, ip, lr}
 800b51c:	0801466f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r9, sl, lr}
 800b520:	08015dde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, sl, fp, ip, lr}
 800b524:	08014678 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, lr}
 800b528:	080144fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, lr}
 800b52c:	08015dcf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, sl, fp, ip, lr}
 800b530:	080144f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sl, lr}
 800b534:	0801468a 	stmdaeq	r1, {r1, r3, r7, r9, sl, lr}
 800b538:	08015dee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, sl, fp, ip, lr}
 800b53c:	08015dc1 	stmdaeq	r1, {r0, r6, r7, r8, sl, fp, ip, lr}
 800b540:	08015f91 	stmdaeq	r1, {r0, r4, r7, r8, r9, sl, fp, ip, lr}
 800b544:	08015eb9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, sl, fp, ip, lr}
 800b548:	08014698 	stmdaeq	r1, {r3, r4, r7, r9, sl, lr}
 800b54c:	08015e6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, sl, fp, ip, lr}
 800b550:	080144fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, lr}

0800b554 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>:
 800b554:	b513      	push	{r0, r1, r4, lr}
 800b556:	6804      	ldr	r4, [r0, #0]
 800b558:	b914      	cbnz	r4, 800b560 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800b55a:	601c      	str	r4, [r3, #0]
 800b55c:	b002      	add	sp, #8
 800b55e:	bd10      	pop	{r4, pc}
 800b560:	9300      	str	r3, [sp, #0]
 800b562:	4613      	mov	r3, r2
 800b564:	460a      	mov	r2, r1
 800b566:	2100      	movs	r1, #0
 800b568:	f7ff fece 	bl	800b308 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>
 800b56c:	e7f6      	b.n	800b55c <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800b56e <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 800b56e:	6843      	ldr	r3, [r0, #4]
 800b570:	07da      	lsls	r2, r3, #31
 800b572:	bf44      	itt	mi
 800b574:	7a02      	ldrbmi	r2, [r0, #8]
 800b576:	600a      	strmi	r2, [r1, #0]
 800b578:	079a      	lsls	r2, r3, #30
 800b57a:	d505      	bpl.n	800b588 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 800b57c:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800b580:	2a00      	cmp	r2, #0
 800b582:	bf08      	it	eq
 800b584:	22aa      	moveq	r2, #170	; 0xaa
 800b586:	604a      	str	r2, [r1, #4]
 800b588:	059a      	lsls	r2, r3, #22
 800b58a:	bf44      	itt	mi
 800b58c:	7dc2      	ldrbmi	r2, [r0, #23]
 800b58e:	608a      	strmi	r2, [r1, #8]
 800b590:	055a      	lsls	r2, r3, #21
 800b592:	bf44      	itt	mi
 800b594:	7e02      	ldrbmi	r2, [r0, #24]
 800b596:	740a      	strbmi	r2, [r1, #16]
 800b598:	051a      	lsls	r2, r3, #20
 800b59a:	bf44      	itt	mi
 800b59c:	7e42      	ldrbmi	r2, [r0, #25]
 800b59e:	744a      	strbmi	r2, [r1, #17]
 800b5a0:	06da      	lsls	r2, r3, #27
 800b5a2:	bf44      	itt	mi
 800b5a4:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 800b5a8:	60ca      	strmi	r2, [r1, #12]
 800b5aa:	069a      	lsls	r2, r3, #26
 800b5ac:	bf44      	itt	mi
 800b5ae:	7c82      	ldrbmi	r2, [r0, #18]
 800b5b0:	748a      	strbmi	r2, [r1, #18]
 800b5b2:	075a      	lsls	r2, r3, #29
 800b5b4:	d50b      	bpl.n	800b5ce <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x60>
 800b5b6:	7ac2      	ldrb	r2, [r0, #11]
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	7b04      	ldrb	r4, [r0, #12]
 800b5bc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800b5c0:	838a      	strh	r2, [r1, #28]
 800b5c2:	05da      	lsls	r2, r3, #23
 800b5c4:	bf44      	itt	mi
 800b5c6:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800b5ca:	618b      	strmi	r3, [r1, #24]
 800b5cc:	bd10      	pop	{r4, pc}
 800b5ce:	05db      	lsls	r3, r3, #23
 800b5d0:	bf44      	itt	mi
 800b5d2:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800b5d6:	618b      	strmi	r3, [r1, #24]
 800b5d8:	4770      	bx	lr

0800b5da <WS28xxDmxParams::Dump()>:
 800b5da:	4770      	bx	lr

0800b5dc <WS28xxDmx::Print()>:
 800b5dc:	b510      	push	{r4, lr}
 800b5de:	4604      	mov	r4, r0
 800b5e0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800b5e2:	f000 fc4d 	bl	800be80 <WS28xx::Print()>
 800b5e6:	4805      	ldr	r0, [pc, #20]	; (800b5fc <WS28xxDmx::Print()+0x20>)
 800b5e8:	f7fd fe20 	bl	800922c <printf>
 800b5ec:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800b5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f4:	4802      	ldr	r0, [pc, #8]	; (800b600 <WS28xxDmx::Print()+0x24>)
 800b5f6:	f7fd be19 	b.w	800922c <printf>
 800b5fa:	bf00      	nop
 800b5fc:	080146a5 	stmdaeq	r1, {r0, r2, r5, r7, r9, sl, lr}
 800b600:	080146bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, lr}

0800b604 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 800b604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b608:	460e      	mov	r6, r1
 800b60a:	4611      	mov	r1, r2
 800b60c:	4604      	mov	r4, r0
 800b60e:	4690      	mov	r8, r2
 800b610:	461d      	mov	r5, r3
 800b612:	9f06      	ldr	r7, [sp, #24]
 800b614:	f000 f864 	bl	800b6e0 <PixelConfiguration::Validate(unsigned int&)>
 800b618:	2e01      	cmp	r6, #1
 800b61a:	d009      	beq.n	800b630 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800b61c:	7ce2      	ldrb	r2, [r4, #19]
 800b61e:	b93a      	cbnz	r2, 800b630 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800b620:	2e04      	cmp	r6, #4
 800b622:	d13c      	bne.n	800b69e <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x9a>
 800b624:	2303      	movs	r3, #3
 800b626:	6023      	str	r3, [r4, #0]
 800b628:	4641      	mov	r1, r8
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 f858 	bl	800b6e0 <PixelConfiguration::Validate(unsigned int&)>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	2b07      	cmp	r3, #7
 800b634:	bf15      	itete	ne
 800b636:	f44f 72aa 	movne.w	r2, #340	; 0x154
 800b63a:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800b63e:	21aa      	movne	r1, #170	; 0xaa
 800b640:	2180      	moveq	r1, #128	; 0x80
 800b642:	bf14      	ite	ne
 800b644:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 800b648:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 800b64c:	e9c5 1200 	strd	r1, r2, [r5]
 800b650:	69a2      	ldr	r2, [r4, #24]
 800b652:	60ab      	str	r3, [r5, #8]
 800b654:	6863      	ldr	r3, [r4, #4]
 800b656:	b10a      	cbz	r2, 800b65c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x58>
 800b658:	429a      	cmp	r2, r3
 800b65a:	d900      	bls.n	800b65e <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5a>
 800b65c:	61a3      	str	r3, [r4, #24]
 800b65e:	69a2      	ldr	r2, [r4, #24]
 800b660:	fbb3 f3f2 	udiv	r3, r3, r2
 800b664:	603b      	str	r3, [r7, #0]
 800b666:	6963      	ldr	r3, [r4, #20]
 800b668:	42b3      	cmp	r3, r6
 800b66a:	bf94      	ite	ls
 800b66c:	6163      	strls	r3, [r4, #20]
 800b66e:	6166      	strhi	r6, [r4, #20]
 800b670:	682b      	ldr	r3, [r5, #0]
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	3301      	adds	r3, #1
 800b676:	fbb2 f2f3 	udiv	r2, r2, r3
 800b67a:	9b07      	ldr	r3, [sp, #28]
 800b67c:	3201      	adds	r2, #1
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	2e01      	cmp	r6, #1
 800b682:	bf01      	itttt	eq
 800b684:	682b      	ldreq	r3, [r5, #0]
 800b686:	683a      	ldreq	r2, [r7, #0]
 800b688:	3301      	addeq	r3, #1
 800b68a:	fbb2 f2f3 	udiveq	r2, r2, r3
 800b68e:	bf1e      	ittt	ne
 800b690:	6963      	ldrne	r3, [r4, #20]
 800b692:	435a      	mulne	r2, r3
 800b694:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 800b698:	60ea      	str	r2, [r5, #12]
 800b69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69e:	6823      	ldr	r3, [r4, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d0c1      	beq.n	800b628 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 800b6a4:	3b0b      	subs	r3, #11
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	bf88      	it	hi
 800b6aa:	6022      	strhi	r2, [r4, #0]
 800b6ac:	e7bc      	b.n	800b628 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

0800b6ae <PixelDmxConfiguration::Dump()>:
 800b6ae:	4770      	bx	lr

0800b6b0 <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 800b6b0:	3801      	subs	r0, #1
 800b6b2:	2809      	cmp	r0, #9
 800b6b4:	bf9a      	itte	ls
 800b6b6:	4b02      	ldrls	r3, [pc, #8]	; (800b6c0 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x10>)
 800b6b8:	5618      	ldrsbls	r0, [r3, r0]
 800b6ba:	2002      	movhi	r0, #2
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	080146df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r9, sl, lr}

0800b6c4 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 800b6c4:	23c0      	movs	r3, #192	; 0xc0
 800b6c6:	2803      	cmp	r0, #3
 800b6c8:	700b      	strb	r3, [r1, #0]
 800b6ca:	d006      	beq.n	800b6da <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 800b6cc:	3808      	subs	r0, #8
 800b6ce:	2803      	cmp	r0, #3
 800b6d0:	bf34      	ite	cc
 800b6d2:	23fc      	movcc	r3, #252	; 0xfc
 800b6d4:	23f0      	movcs	r3, #240	; 0xf0
 800b6d6:	7013      	strb	r3, [r2, #0]
 800b6d8:	4770      	bx	lr
 800b6da:	23f8      	movs	r3, #248	; 0xf8
 800b6dc:	e7fb      	b.n	800b6d6 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

0800b6e0 <PixelConfiguration::Validate(unsigned int&)>:
 800b6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6e2:	e9d0 5300 	ldrd	r5, r3, [r0]
 800b6e6:	2d07      	cmp	r5, #7
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	6882      	ldr	r2, [r0, #8]
 800b6ec:	d129      	bne.n	800b742 <PixelConfiguration::Validate(unsigned int&)+0x62>
 800b6ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6f2:	bf28      	it	cs
 800b6f4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800b6f8:	6043      	str	r3, [r0, #4]
 800b6fa:	2304      	movs	r3, #4
 800b6fc:	600b      	str	r3, [r1, #0]
 800b6fe:	2301      	movs	r3, #1
 800b700:	2a06      	cmp	r2, #6
 800b702:	74e3      	strb	r3, [r4, #19]
 800b704:	d103      	bne.n	800b70e <PixelConfiguration::Validate(unsigned int&)+0x2e>
 800b706:	4628      	mov	r0, r5
 800b708:	f7ff ffd2 	bl	800b6b0 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800b70c:	60a0      	str	r0, [r4, #8]
 800b70e:	7c63      	ldrb	r3, [r4, #17]
 800b710:	7c22      	ldrb	r2, [r4, #16]
 800b712:	4628      	mov	r0, r5
 800b714:	429a      	cmp	r2, r3
 800b716:	bf28      	it	cs
 800b718:	2300      	movcs	r3, #0
 800b71a:	f10d 0207 	add.w	r2, sp, #7
 800b71e:	bf28      	it	cs
 800b720:	8223      	strhcs	r3, [r4, #16]
 800b722:	f10d 0106 	add.w	r1, sp, #6
 800b726:	f7ff ffcd 	bl	800b6c4 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800b72a:	7c23      	ldrb	r3, [r4, #16]
 800b72c:	b913      	cbnz	r3, 800b734 <PixelConfiguration::Validate(unsigned int&)+0x54>
 800b72e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b732:	7423      	strb	r3, [r4, #16]
 800b734:	7c63      	ldrb	r3, [r4, #17]
 800b736:	b913      	cbnz	r3, 800b73e <PixelConfiguration::Validate(unsigned int&)+0x5e>
 800b738:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b73c:	7463      	strb	r3, [r4, #17]
 800b73e:	4b1a      	ldr	r3, [pc, #104]	; (800b7a8 <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 800b740:	e020      	b.n	800b784 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 800b742:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800b746:	bf28      	it	cs
 800b748:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 800b74c:	6043      	str	r3, [r0, #4]
 800b74e:	2303      	movs	r3, #3
 800b750:	600b      	str	r3, [r1, #0]
 800b752:	f1a5 030b 	sub.w	r3, r5, #11
 800b756:	2b01      	cmp	r3, #1
 800b758:	d806      	bhi.n	800b768 <PixelConfiguration::Validate(unsigned int&)+0x88>
 800b75a:	7c83      	ldrb	r3, [r0, #18]
 800b75c:	2b1f      	cmp	r3, #31
 800b75e:	d81d      	bhi.n	800b79c <PixelConfiguration::Validate(unsigned int&)+0xbc>
 800b760:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b764:	74a3      	strb	r3, [r4, #18]
 800b766:	e000      	b.n	800b76a <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800b768:	b9d5      	cbnz	r5, 800b7a0 <PixelConfiguration::Validate(unsigned int&)+0xc0>
 800b76a:	2300      	movs	r3, #0
 800b76c:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800b770:	2a06      	cmp	r2, #6
 800b772:	bf08      	it	eq
 800b774:	60a3      	streq	r3, [r4, #8]
 800b776:	2d0d      	cmp	r5, #13
 800b778:	74e3      	strb	r3, [r4, #19]
 800b77a:	8221      	strh	r1, [r4, #16]
 800b77c:	68e3      	ldr	r3, [r4, #12]
 800b77e:	d109      	bne.n	800b794 <PixelConfiguration::Validate(unsigned int&)+0xb4>
 800b780:	b913      	cbnz	r3, 800b788 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 800b782:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 800b784:	60e3      	str	r3, [r4, #12]
 800b786:	e003      	b.n	800b790 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800b788:	4a09      	ldr	r2, [pc, #36]	; (800b7b0 <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d900      	bls.n	800b790 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800b78e:	60e2      	str	r2, [r4, #12]
 800b790:	b003      	add	sp, #12
 800b792:	bd30      	pop	{r4, r5, pc}
 800b794:	2b00      	cmp	r3, #0
 800b796:	d0f4      	beq.n	800b782 <PixelConfiguration::Validate(unsigned int&)+0xa2>
 800b798:	4a06      	ldr	r2, [pc, #24]	; (800b7b4 <PixelConfiguration::Validate(unsigned int&)+0xd4>)
 800b79a:	e7f6      	b.n	800b78a <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800b79c:	23ff      	movs	r3, #255	; 0xff
 800b79e:	e7e1      	b.n	800b764 <PixelConfiguration::Validate(unsigned int&)+0x84>
 800b7a0:	2d0d      	cmp	r5, #13
 800b7a2:	d1ac      	bne.n	800b6fe <PixelConfiguration::Validate(unsigned int&)+0x1e>
 800b7a4:	e7e1      	b.n	800b76a <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800b7a6:	bf00      	nop
 800b7a8:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 800b7ac:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800b7b0:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 800b7b4:	017d7840 	cmneq	sp, r0, asr #16

0800b7b8 <PixelConfiguration::Dump()>:
 800b7b8:	4770      	bx	lr
	...

0800b7bc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>:
 800b7bc:	b507      	push	{r0, r1, r2, lr}
 800b7be:	b2cb      	uxtb	r3, r1
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800b7c6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b7ca:	4601      	mov	r1, r0
 800b7cc:	4803      	ldr	r0, [pc, #12]	; (800b7dc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]+0x20>)
 800b7ce:	6800      	ldr	r0, [r0, #0]
 800b7d0:	f000 fb98 	bl	800bf04 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800b7d4:	b003      	add	sp, #12
 800b7d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7da:	bf00      	nop
 800b7dc:	20001938 	andcs	r1, r0, r8, lsr r9

0800b7e0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	2400      	movs	r4, #0
 800b7e4:	4d05      	ldr	r5, [pc, #20]	; (800b7fc <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 800b7e6:	682b      	ldr	r3, [r5, #0]
 800b7e8:	429c      	cmp	r4, r3
 800b7ea:	d300      	bcc.n	800b7ee <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0xe>
 800b7ec:	bd38      	pop	{r3, r4, r5, pc}
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	f7ff ffe3 	bl	800b7bc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b7f6:	3401      	adds	r4, #1
 800b7f8:	e7f5      	b.n	800b7e6 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 800b7fa:	bf00      	nop
 800b7fc:	20001934 	andcs	r1, r0, r4, lsr r9

0800b800 <PixelPatterns::PixelPatterns(unsigned int)>:
 800b800:	2901      	cmp	r1, #1
 800b802:	bf28      	it	cs
 800b804:	2101      	movcs	r1, #1
 800b806:	4b08      	ldr	r3, [pc, #32]	; (800b828 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 800b808:	4a08      	ldr	r2, [pc, #32]	; (800b82c <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6013      	str	r3, [r2, #0]
 800b80e:	4a08      	ldr	r2, [pc, #32]	; (800b830 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 800b810:	6011      	str	r1, [r2, #0]
 800b812:	685a      	ldr	r2, [r3, #4]
 800b814:	4b07      	ldr	r3, [pc, #28]	; (800b834 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	2200      	movs	r2, #0
 800b81a:	4b07      	ldr	r3, [pc, #28]	; (800b838 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 800b81c:	6819      	ldr	r1, [r3, #0]
 800b81e:	4b07      	ldr	r3, [pc, #28]	; (800b83c <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 800b820:	61da      	str	r2, [r3, #28]
 800b822:	6019      	str	r1, [r3, #0]
 800b824:	619a      	str	r2, [r3, #24]
 800b826:	4770      	bx	lr
 800b828:	20001944 	andcs	r1, r0, r4, asr #18
 800b82c:	20001938 	andcs	r1, r0, r8, lsr r9
 800b830:	2000192c 	andcs	r1, r0, ip, lsr #18
 800b834:	20001934 	andcs	r1, r0, r4, lsr r9
 800b838:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800b83c:	2000190c 	andcs	r1, r0, ip, lsl #18

0800b840 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 800b840:	2805      	cmp	r0, #5
 800b842:	bfdd      	ittte	le
 800b844:	220e      	movle	r2, #14
 800b846:	4b02      	ldrle	r3, [pc, #8]	; (800b850 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 800b848:	fb02 3000 	mlale	r0, r2, r0, r3
 800b84c:	4801      	ldrgt	r0, [pc, #4]	; (800b854 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 800b84e:	4770      	bx	lr
 800b850:	080146f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl, lr}
 800b854:	080146e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl, lr}

0800b858 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	460e      	mov	r6, r1
 800b85c:	4615      	mov	r5, r2
 800b85e:	461c      	mov	r4, r3
 800b860:	f7ff ffbe 	bl	800b7e0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800b864:	2301      	movs	r3, #1
 800b866:	4905      	ldr	r1, [pc, #20]	; (800b87c <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 800b868:	22ff      	movs	r2, #255	; 0xff
 800b86a:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800b86e:	61cb      	str	r3, [r1, #28]
 800b870:	2300      	movs	r3, #0
 800b872:	604d      	str	r5, [r1, #4]
 800b874:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b878:	618c      	str	r4, [r1, #24]
 800b87a:	bd70      	pop	{r4, r5, r6, pc}
 800b87c:	2000190c 	andcs	r1, r0, ip, lsl #18

0800b880 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800b880:	b570      	push	{r4, r5, r6, lr}
 800b882:	460e      	mov	r6, r1
 800b884:	461c      	mov	r4, r3
 800b886:	4615      	mov	r5, r2
 800b888:	f7ff ffaa 	bl	800b7e0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800b88c:	2302      	movs	r3, #2
 800b88e:	4908      	ldr	r1, [pc, #32]	; (800b8b0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800b890:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800b894:	61cb      	str	r3, [r1, #28]
 800b896:	9b04      	ldr	r3, [sp, #16]
 800b898:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800b89c:	604b      	str	r3, [r1, #4]
 800b89e:	4b05      	ldr	r3, [pc, #20]	; (800b8b4 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	610b      	str	r3, [r1, #16]
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	614b      	str	r3, [r1, #20]
 800b8a8:	9b05      	ldr	r3, [sp, #20]
 800b8aa:	618b      	str	r3, [r1, #24]
 800b8ac:	bd70      	pop	{r4, r5, r6, pc}
 800b8ae:	bf00      	nop
 800b8b0:	2000190c 	andcs	r1, r0, ip, lsl #18
 800b8b4:	20001934 	andcs	r1, r0, r4, lsr r9

0800b8b8 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800b8b8:	b570      	push	{r4, r5, r6, lr}
 800b8ba:	460e      	mov	r6, r1
 800b8bc:	461d      	mov	r5, r3
 800b8be:	4614      	mov	r4, r2
 800b8c0:	f7ff ff8e 	bl	800b7e0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	4907      	ldr	r1, [pc, #28]	; (800b8e4 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800b8c8:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800b8cc:	61cb      	str	r3, [r1, #28]
 800b8ce:	4b06      	ldr	r3, [pc, #24]	; (800b8e8 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800b8d0:	604d      	str	r5, [r1, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	608c      	str	r4, [r1, #8]
 800b8d6:	610b      	str	r3, [r1, #16]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	614b      	str	r3, [r1, #20]
 800b8dc:	9b04      	ldr	r3, [sp, #16]
 800b8de:	618b      	str	r3, [r1, #24]
 800b8e0:	bd70      	pop	{r4, r5, r6, pc}
 800b8e2:	bf00      	nop
 800b8e4:	2000190c 	andcs	r1, r0, ip, lsl #18
 800b8e8:	20001934 	andcs	r1, r0, r4, lsr r9

0800b8ec <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 800b8ec:	b570      	push	{r4, r5, r6, lr}
 800b8ee:	460e      	mov	r6, r1
 800b8f0:	461d      	mov	r5, r3
 800b8f2:	4614      	mov	r4, r2
 800b8f4:	f7ff ff74 	bl	800b7e0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800b8f8:	2304      	movs	r3, #4
 800b8fa:	4912      	ldr	r1, [pc, #72]	; (800b944 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 800b8fc:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800b900:	604d      	str	r5, [r1, #4]
 800b902:	4d11      	ldr	r5, [pc, #68]	; (800b948 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 800b904:	61cb      	str	r3, [r1, #28]
 800b906:	6828      	ldr	r0, [r5, #0]
 800b908:	608c      	str	r4, [r1, #8]
 800b90a:	1e43      	subs	r3, r0, #1
 800b90c:	005b      	lsls	r3, r3, #1
 800b90e:	b29b      	uxth	r3, r3
 800b910:	610b      	str	r3, [r1, #16]
 800b912:	2300      	movs	r3, #0
 800b914:	4c0d      	ldr	r4, [pc, #52]	; (800b94c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 800b916:	614b      	str	r3, [r1, #20]
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	b97b      	cbnz	r3, 800b93c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x50>
 800b91c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800b920:	4298      	cmp	r0, r3
 800b922:	bf2c      	ite	cs
 800b924:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 800b928:	0080      	lslcc	r0, r0, #2
 800b92a:	f006 fb41 	bl	8011fb0 <operator new[](unsigned int)>
 800b92e:	2200      	movs	r2, #0
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	6020      	str	r0, [r4, #0]
 800b934:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800b938:	4298      	cmp	r0, r3
 800b93a:	d100      	bne.n	800b93e <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x52>
 800b93c:	bd70      	pop	{r4, r5, r6, pc}
 800b93e:	f840 2b04 	str.w	r2, [r0], #4
 800b942:	e7f9      	b.n	800b938 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 800b944:	2000190c 	andcs	r1, r0, ip, lsl #18
 800b948:	20001934 	andcs	r1, r0, r4, lsr r9
 800b94c:	20001930 	andcs	r1, r0, r0, lsr r9

0800b950 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800b950:	b570      	push	{r4, r5, r6, lr}
 800b952:	460e      	mov	r6, r1
 800b954:	461c      	mov	r4, r3
 800b956:	4615      	mov	r5, r2
 800b958:	f7ff ff42 	bl	800b7e0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800b95c:	2305      	movs	r3, #5
 800b95e:	4907      	ldr	r1, [pc, #28]	; (800b97c <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800b960:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800b964:	61cb      	str	r3, [r1, #28]
 800b966:	9b05      	ldr	r3, [sp, #20]
 800b968:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800b96c:	604b      	str	r3, [r1, #4]
 800b96e:	9b04      	ldr	r3, [sp, #16]
 800b970:	610b      	str	r3, [r1, #16]
 800b972:	2300      	movs	r3, #0
 800b974:	614b      	str	r3, [r1, #20]
 800b976:	9b06      	ldr	r3, [sp, #24]
 800b978:	618b      	str	r3, [r1, #24]
 800b97a:	bd70      	pop	{r4, r5, r6, pc}
 800b97c:	2000190c 	andcs	r1, r0, ip, lsl #18

0800b980 <PixelPatterns::Wheel(unsigned char)>:
 800b980:	43cb      	mvns	r3, r1
 800b982:	b2db      	uxtb	r3, r3
 800b984:	2b54      	cmp	r3, #84	; 0x54
 800b986:	d809      	bhi.n	800b99c <PixelPatterns::Wheel(unsigned char)+0x1c>
 800b988:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	1e5a      	subs	r2, r3, #1
 800b990:	4258      	negs	r0, r3
 800b992:	b2d2      	uxtb	r2, r2
 800b994:	b2c0      	uxtb	r0, r0
 800b996:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800b99a:	4770      	bx	lr
 800b99c:	2ba9      	cmp	r3, #169	; 0xa9
 800b99e:	d809      	bhi.n	800b9b4 <PixelPatterns::Wheel(unsigned char)+0x34>
 800b9a0:	f1c1 01aa 	rsb	r1, r1, #170	; 0xaa
 800b9a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b9a8:	b2c9      	uxtb	r1, r1
 800b9aa:	43c8      	mvns	r0, r1
 800b9ac:	b2c0      	uxtb	r0, r0
 800b9ae:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 800b9b2:	4770      	bx	lr
 800b9b4:	f1c1 0155 	rsb	r1, r1, #85	; 0x55
 800b9b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b9bc:	b2c9      	uxtb	r1, r1
 800b9be:	0208      	lsls	r0, r1, #8
 800b9c0:	f480 407f 	eor.w	r0, r0, #65280	; 0xff00
 800b9c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800b9c8:	4770      	bx	lr
	...

0800b9cc <PixelPatterns::Increment(unsigned int)>:
 800b9cc:	4a0d      	ldr	r2, [pc, #52]	; (800ba04 <PixelPatterns::Increment(unsigned int)+0x38>)
 800b9ce:	b510      	push	{r4, lr}
 800b9d0:	014c      	lsls	r4, r1, #5
 800b9d2:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800b9d6:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800b9da:	b930      	cbnz	r0, 800b9ea <PixelPatterns::Increment(unsigned int)+0x1e>
 800b9dc:	690a      	ldr	r2, [r1, #16]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	4293      	cmp	r3, r2
 800b9e2:	bf18      	it	ne
 800b9e4:	4618      	movne	r0, r3
 800b9e6:	6148      	str	r0, [r1, #20]
 800b9e8:	bd10      	pop	{r4, pc}
 800b9ea:	b92b      	cbnz	r3, 800b9f8 <PixelPatterns::Increment(unsigned int)+0x2c>
 800b9ec:	4422      	add	r2, r4
 800b9ee:	6913      	ldr	r3, [r2, #16]
 800b9f0:	3b01      	subs	r3, #1
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	6153      	str	r3, [r2, #20]
 800b9f6:	e7f7      	b.n	800b9e8 <PixelPatterns::Increment(unsigned int)+0x1c>
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	614b      	str	r3, [r1, #20]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d1f3      	bne.n	800b9e8 <PixelPatterns::Increment(unsigned int)+0x1c>
 800ba00:	e7f4      	b.n	800b9ec <PixelPatterns::Increment(unsigned int)+0x20>
 800ba02:	bf00      	nop
 800ba04:	2000190c 	andcs	r1, r0, ip, lsl #18

0800ba08 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 800ba08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	4604      	mov	r4, r0
 800ba0e:	460d      	mov	r5, r1
 800ba10:	2700      	movs	r7, #0
 800ba12:	4b10      	ldr	r3, [pc, #64]	; (800ba54 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 800ba14:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800ba58 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 800ba18:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ba1c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800ba20:	f8d8 2000 	ldr.w	r2, [r8]
 800ba24:	b2be      	uxth	r6, r7
 800ba26:	42b2      	cmp	r2, r6
 800ba28:	f107 0701 	add.w	r7, r7, #1
 800ba2c:	d805      	bhi.n	800ba3a <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x32>
 800ba2e:	4629      	mov	r1, r5
 800ba30:	4620      	mov	r0, r4
 800ba32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba36:	f7ff bfc9 	b.w	800b9cc <PixelPatterns::Increment(unsigned int)>
 800ba3a:	0233      	lsls	r3, r6, #8
 800ba3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba40:	444b      	add	r3, r9
 800ba42:	b2d9      	uxtb	r1, r3
 800ba44:	4620      	mov	r0, r4
 800ba46:	f7ff ff9b 	bl	800b980 <PixelPatterns::Wheel(unsigned char)>
 800ba4a:	4601      	mov	r1, r0
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	f7ff feb5 	bl	800b7bc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800ba52:	e7e5      	b.n	800ba20 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x18>
 800ba54:	2000190c 	andcs	r1, r0, ip, lsl #18
 800ba58:	20001934 	andcs	r1, r0, r4, lsr r9

0800ba5c <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 800ba5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba60:	4605      	mov	r5, r0
 800ba62:	460c      	mov	r4, r1
 800ba64:	f04f 0b00 	mov.w	fp, #0
 800ba68:	4b11      	ldr	r3, [pc, #68]	; (800bab0 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x54>)
 800ba6a:	4e12      	ldr	r6, [pc, #72]	; (800bab4 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800ba6c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ba70:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800ba74:	f8df a040 	ldr.w	sl, [pc, #64]	; 800bab8 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 800ba78:	e9d3 7802 	ldrd	r7, r8, [r3, #8]
 800ba7c:	6833      	ldr	r3, [r6, #0]
 800ba7e:	fa1f f08b 	uxth.w	r0, fp
 800ba82:	4283      	cmp	r3, r0
 800ba84:	d805      	bhi.n	800ba92 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x36>
 800ba86:	4621      	mov	r1, r4
 800ba88:	4628      	mov	r0, r5
 800ba8a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8e:	f7ff bf9d 	b.w	800b9cc <PixelPatterns::Increment(unsigned int)>
 800ba92:	eb09 0300 	add.w	r3, r9, r0
 800ba96:	fb0a f303 	mul.w	r3, sl, r3
 800ba9a:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800ba9e:	bf94      	ite	ls
 800baa0:	4639      	movls	r1, r7
 800baa2:	4641      	movhi	r1, r8
 800baa4:	f7ff fe8a 	bl	800b7bc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800baa8:	f10b 0b01 	add.w	fp, fp, #1
 800baac:	e7e6      	b.n	800ba7c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x20>
 800baae:	bf00      	nop
 800bab0:	2000190c 	andcs	r1, r0, ip, lsl #18
 800bab4:	20001934 	andcs	r1, r0, r4, lsr r9
 800bab8:	aaaaaaab 	bge	6ab656c <__stack_size+0x6ab4d6c>

0800babc <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 800babc:	b538      	push	{r3, r4, r5, lr}
 800babe:	4605      	mov	r5, r0
 800bac0:	460c      	mov	r4, r1
 800bac2:	4b06      	ldr	r3, [pc, #24]	; (800badc <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 800bac4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bac8:	6899      	ldr	r1, [r3, #8]
 800baca:	6958      	ldr	r0, [r3, #20]
 800bacc:	f7ff fe76 	bl	800b7bc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800bad0:	4621      	mov	r1, r4
 800bad2:	4628      	mov	r0, r5
 800bad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bad8:	f7ff bf78 	b.w	800b9cc <PixelPatterns::Increment(unsigned int)>
 800badc:	2000190c 	andcs	r1, r0, ip, lsl #18

0800bae0 <PixelPatterns::ScannerUpdate(unsigned int)>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	460d      	mov	r5, r1
 800bae6:	f04f 0900 	mov.w	r9, #0
 800baea:	4a27      	ldr	r2, [pc, #156]	; (800bb88 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 800baec:	b085      	sub	sp, #20
 800baee:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800baf2:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 800baf6:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800bafa:	00b3      	lsls	r3, r6, #2
 800bafc:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800bb8c <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 800bb00:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800bb90 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 800bb04:	9002      	str	r0, [sp, #8]
 800bb06:	9301      	str	r3, [sp, #4]
 800bb08:	1bbf      	subs	r7, r7, r6
 800bb0a:	f8da 1000 	ldr.w	r1, [sl]
 800bb0e:	fa1f f489 	uxth.w	r4, r9
 800bb12:	42a1      	cmp	r1, r4
 800bb14:	d806      	bhi.n	800bb24 <PixelPatterns::ScannerUpdate(unsigned int)+0x44>
 800bb16:	4629      	mov	r1, r5
 800bb18:	9802      	ldr	r0, [sp, #8]
 800bb1a:	b005      	add	sp, #20
 800bb1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb20:	f7ff bf54 	b.w	800b9cc <PixelPatterns::Increment(unsigned int)>
 800bb24:	42a6      	cmp	r6, r4
 800bb26:	d10b      	bne.n	800bb40 <PixelPatterns::ScannerUpdate(unsigned int)+0x60>
 800bb28:	4659      	mov	r1, fp
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f7ff fe46 	bl	800b7bc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800bb30:	f8d8 1000 	ldr.w	r1, [r8]
 800bb34:	9b01      	ldr	r3, [sp, #4]
 800bb36:	f841 b003 	str.w	fp, [r1, r3]
 800bb3a:	f109 0901 	add.w	r9, r9, #1
 800bb3e:	e7e4      	b.n	800bb0a <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 800bb40:	42a7      	cmp	r7, r4
 800bb42:	d108      	bne.n	800bb56 <PixelPatterns::ScannerUpdate(unsigned int)+0x76>
 800bb44:	4659      	mov	r1, fp
 800bb46:	4638      	mov	r0, r7
 800bb48:	f7ff fe38 	bl	800b7bc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800bb4c:	f8d8 1000 	ldr.w	r1, [r8]
 800bb50:	f841 b024 	str.w	fp, [r1, r4, lsl #2]
 800bb54:	e7f1      	b.n	800bb3a <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 800bb56:	f8d8 1000 	ldr.w	r1, [r8]
 800bb5a:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800bb5e:	f3c0 2146 	ubfx	r1, r0, #9, #7
 800bb62:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 800bb66:	0209      	lsls	r1, r1, #8
 800bb68:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800bb6c:	f3c0 0046 	ubfx	r0, r0, #1, #7
 800bb70:	4301      	orrs	r1, r0
 800bb72:	4620      	mov	r0, r4
 800bb74:	9103      	str	r1, [sp, #12]
 800bb76:	f7ff fe21 	bl	800b7bc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800bb7a:	f8d8 0000 	ldr.w	r0, [r8]
 800bb7e:	9903      	ldr	r1, [sp, #12]
 800bb80:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800bb84:	e7d9      	b.n	800bb3a <PixelPatterns::ScannerUpdate(unsigned int)+0x5a>
 800bb86:	bf00      	nop
 800bb88:	2000190c 	andcs	r1, r0, ip, lsl #18
 800bb8c:	20001934 	andcs	r1, r0, r4, lsr r9
 800bb90:	20001930 	andcs	r1, r0, r0, lsr r9

0800bb94 <PixelPatterns::FadeUpdate(unsigned int)>:
 800bb94:	4a21      	ldr	r2, [pc, #132]	; (800bc1c <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 800bb96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb9a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800bb9e:	4605      	mov	r5, r0
 800bba0:	e9d2 0704 	ldrd	r0, r7, [r2, #16]
 800bba4:	460c      	mov	r4, r1
 800bba6:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
 800bbaa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800bbae:	437a      	muls	r2, r7
 800bbb0:	1bc6      	subs	r6, r0, r7
 800bbb2:	f3c1 2c07 	ubfx	ip, r1, #8, #8
 800bbb6:	fb06 220c 	mla	r2, r6, ip, r2
 800bbba:	fbb2 f2f0 	udiv	r2, r2, r0
 800bbbe:	0212      	lsls	r2, r2, #8
 800bbc0:	fa1f fc82 	uxth.w	ip, r2
 800bbc4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800bbc8:	437a      	muls	r2, r7
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	437b      	muls	r3, r7
 800bbce:	f3c1 4e07 	ubfx	lr, r1, #16, #8
 800bbd2:	fb06 220e 	mla	r2, r6, lr, r2
 800bbd6:	b2c9      	uxtb	r1, r1
 800bbd8:	fb06 3301 	mla	r3, r6, r1, r3
 800bbdc:	fbb2 f2f0 	udiv	r2, r2, r0
 800bbe0:	fbb3 f3f0 	udiv	r3, r3, r0
 800bbe4:	2700      	movs	r7, #0
 800bbe6:	0412      	lsls	r2, r2, #16
 800bbe8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800bbec:	ea4c 0202 	orr.w	r2, ip, r2
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800bc20 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 800bbf6:	ea42 0603 	orr.w	r6, r2, r3
 800bbfa:	f8d8 3000 	ldr.w	r3, [r8]
 800bbfe:	429f      	cmp	r7, r3
 800bc00:	d305      	bcc.n	800bc0e <PixelPatterns::FadeUpdate(unsigned int)+0x7a>
 800bc02:	4621      	mov	r1, r4
 800bc04:	4628      	mov	r0, r5
 800bc06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0a:	f7ff bedf 	b.w	800b9cc <PixelPatterns::Increment(unsigned int)>
 800bc0e:	4638      	mov	r0, r7
 800bc10:	4631      	mov	r1, r6
 800bc12:	f7ff fdd3 	bl	800b7bc <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800bc16:	3701      	adds	r7, #1
 800bc18:	e7ef      	b.n	800bbfa <PixelPatterns::FadeUpdate(unsigned int)+0x66>
 800bc1a:	bf00      	nop
 800bc1c:	2000190c 	andcs	r1, r0, ip, lsl #18
 800bc20:	20001934 	andcs	r1, r0, r4, lsr r9

0800bc24 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 800bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc26:	4b12      	ldr	r3, [pc, #72]	; (800bc70 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 800bc28:	014e      	lsls	r6, r1, #5
 800bc2a:	599c      	ldr	r4, [r3, r6]
 800bc2c:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800bc30:	686f      	ldr	r7, [r5, #4]
 800bc32:	1b14      	subs	r4, r2, r4
 800bc34:	42bc      	cmp	r4, r7
 800bc36:	d319      	bcc.n	800bc6c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800bc38:	519a      	str	r2, [r3, r6]
 800bc3a:	69eb      	ldr	r3, [r5, #28]
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	2b04      	cmp	r3, #4
 800bc40:	d814      	bhi.n	800bc6c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800bc42:	e8df f003 	tbb	[pc, r3]
 800bc46:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800bc4a:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800bc4e:	fedc 2001 	cdp2	0, 13, cr2, cr12, cr1, {0}
 800bc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc54:	f7ff ff02 	bl	800ba5c <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 800bc58:	e7fa      	b.n	800bc50 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800bc5a:	f7ff ff2f 	bl	800babc <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800bc5e:	e7f7      	b.n	800bc50 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800bc60:	f7ff ff3e 	bl	800bae0 <PixelPatterns::ScannerUpdate(unsigned int)>
 800bc64:	e7f4      	b.n	800bc50 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800bc66:	f7ff ff95 	bl	800bb94 <PixelPatterns::FadeUpdate(unsigned int)>
 800bc6a:	e7f1      	b.n	800bc50 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	e7f0      	b.n	800bc52 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 800bc70:	2000190c 	andcs	r1, r0, ip, lsl #18

0800bc74 <PixelPatterns::Run()>:
 800bc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc78:	4606      	mov	r6, r0
 800bc7a:	f007 fb91 	bl	80133a0 <gd32_spi_dma_tx_is_active()>
 800bc7e:	4604      	mov	r4, r0
 800bc80:	b9c0      	cbnz	r0, 800bcb4 <PixelPatterns::Run()+0x40>
 800bc82:	4605      	mov	r5, r0
 800bc84:	4b0c      	ldr	r3, [pc, #48]	; (800bcb8 <PixelPatterns::Run()+0x44>)
 800bc86:	4f0d      	ldr	r7, [pc, #52]	; (800bcbc <PixelPatterns::Run()+0x48>)
 800bc88:	f8d3 8000 	ldr.w	r8, [r3]
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	b2e9      	uxtb	r1, r5
 800bc90:	428b      	cmp	r3, r1
 800bc92:	f105 0501 	add.w	r5, r5, #1
 800bc96:	d806      	bhi.n	800bca6 <PixelPatterns::Run()+0x32>
 800bc98:	b164      	cbz	r4, 800bcb4 <PixelPatterns::Run()+0x40>
 800bc9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc9e:	4b08      	ldr	r3, [pc, #32]	; (800bcc0 <PixelPatterns::Run()+0x4c>)
 800bca0:	6818      	ldr	r0, [r3, #0]
 800bca2:	f000 bf6f 	b.w	800cb84 <WS28xx::Update()>
 800bca6:	4642      	mov	r2, r8
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f7ff ffbb 	bl	800bc24 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 800bcae:	4304      	orrs	r4, r0
 800bcb0:	b2e4      	uxtb	r4, r4
 800bcb2:	e7eb      	b.n	800bc8c <PixelPatterns::Run()+0x18>
 800bcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb8:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800bcbc:	2000192c 	andcs	r1, r0, ip, lsr #18
 800bcc0:	20001938 	andcs	r1, r0, r8, lsr r9

0800bcc4 <PixelType::GetType(pixel::Type)>:
 800bcc4:	280d      	cmp	r0, #13
 800bcc6:	bfda      	itte	le
 800bcc8:	4b02      	ldrle	r3, [pc, #8]	; (800bcd4 <PixelType::GetType(pixel::Type)+0x10>)
 800bcca:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800bcce:	4802      	ldrgt	r0, [pc, #8]	; (800bcd8 <PixelType::GetType(pixel::Type)+0x14>)
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	08014767 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, sl, lr}
 800bcd8:	080146e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl, lr}

0800bcdc <PixelType::GetType(char const*)>:
 800bcdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcde:	4604      	mov	r4, r0
 800bce0:	2000      	movs	r0, #0
 800bce2:	490f      	ldr	r1, [pc, #60]	; (800bd20 <PixelType::GetType(char const*)+0x44>)
 800bce4:	1e67      	subs	r7, r4, #1
 800bce6:	1e4e      	subs	r6, r1, #1
 800bce8:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800bcec:	4615      	mov	r5, r2
 800bcee:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 800bcf2:	2b19      	cmp	r3, #25
 800bcf4:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800bcf8:	bf98      	it	ls
 800bcfa:	f102 0520 	addls.w	r5, r2, #32
 800bcfe:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 800bd02:	f1bc 0f19 	cmp.w	ip, #25
 800bd06:	bf98      	it	ls
 800bd08:	3320      	addls	r3, #32
 800bd0a:	42ab      	cmp	r3, r5
 800bd0c:	d005      	beq.n	800bd1a <PixelType::GetType(char const*)+0x3e>
 800bd0e:	3001      	adds	r0, #1
 800bd10:	280e      	cmp	r0, #14
 800bd12:	f101 0108 	add.w	r1, r1, #8
 800bd16:	d1e5      	bne.n	800bce4 <PixelType::GetType(char const*)+0x8>
 800bd18:	e001      	b.n	800bd1e <PixelType::GetType(char const*)+0x42>
 800bd1a:	2a00      	cmp	r2, #0
 800bd1c:	d1e4      	bne.n	800bce8 <PixelType::GetType(char const*)+0xc>
 800bd1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd20:	08014767 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, sl, lr}

0800bd24 <PixelType::GetMap(char const*)>:
 800bd24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd26:	4605      	mov	r5, r0
 800bd28:	2000      	movs	r0, #0
 800bd2a:	4b11      	ldr	r3, [pc, #68]	; (800bd70 <PixelType::GetMap(char const*)+0x4c>)
 800bd2c:	1e5c      	subs	r4, r3, #1
 800bd2e:	1e6e      	subs	r6, r5, #1
 800bd30:	f103 0c02 	add.w	ip, r3, #2
 800bd34:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800bd38:	4617      	mov	r7, r2
 800bd3a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800bd3e:	2919      	cmp	r1, #25
 800bd40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd44:	bf98      	it	ls
 800bd46:	f102 0720 	addls.w	r7, r2, #32
 800bd4a:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 800bd4e:	f1be 0f19 	cmp.w	lr, #25
 800bd52:	bf98      	it	ls
 800bd54:	3120      	addls	r1, #32
 800bd56:	42b9      	cmp	r1, r7
 800bd58:	d005      	beq.n	800bd66 <PixelType::GetMap(char const*)+0x42>
 800bd5a:	3001      	adds	r0, #1
 800bd5c:	2806      	cmp	r0, #6
 800bd5e:	f103 0304 	add.w	r3, r3, #4
 800bd62:	d1e3      	bne.n	800bd2c <PixelType::GetMap(char const*)+0x8>
 800bd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd66:	2a00      	cmp	r2, #0
 800bd68:	d0fc      	beq.n	800bd64 <PixelType::GetMap(char const*)+0x40>
 800bd6a:	4564      	cmp	r4, ip
 800bd6c:	d1e2      	bne.n	800bd34 <PixelType::GetMap(char const*)+0x10>
 800bd6e:	e7f9      	b.n	800bd64 <PixelType::GetMap(char const*)+0x40>
 800bd70:	0801474f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, r9, sl, lr}

0800bd74 <PixelType::GetMap(pixel::Map)>:
 800bd74:	2805      	cmp	r0, #5
 800bd76:	bfda      	itte	le
 800bd78:	4b02      	ldrle	r3, [pc, #8]	; (800bd84 <PixelType::GetMap(pixel::Map)+0x10>)
 800bd7a:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800bd7e:	4802      	ldrgt	r0, [pc, #8]	; (800bd88 <PixelType::GetMap(pixel::Map)+0x14>)
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	0801474f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, r9, sl, lr}
 800bd88:	08014745 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, lr}

0800bd8c <PixelType::ConvertTxH(unsigned char)>:
 800bd8c:	28f0      	cmp	r0, #240	; 0xf0
 800bd8e:	d010      	beq.n	800bdb2 <PixelType::ConvertTxH(unsigned char)+0x26>
 800bd90:	d807      	bhi.n	800bda2 <PixelType::ConvertTxH(unsigned char)+0x16>
 800bd92:	28c0      	cmp	r0, #192	; 0xc0
 800bd94:	d00f      	beq.n	800bdb6 <PixelType::ConvertTxH(unsigned char)+0x2a>
 800bd96:	28e0      	cmp	r0, #224	; 0xe0
 800bd98:	d00f      	beq.n	800bdba <PixelType::ConvertTxH(unsigned char)+0x2e>
 800bd9a:	2880      	cmp	r0, #128	; 0x80
 800bd9c:	d113      	bne.n	800bdc6 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800bd9e:	480b      	ldr	r0, [pc, #44]	; (800bdcc <PixelType::ConvertTxH(unsigned char)+0x40>)
 800bda0:	4770      	bx	lr
 800bda2:	28fc      	cmp	r0, #252	; 0xfc
 800bda4:	d00b      	beq.n	800bdbe <PixelType::ConvertTxH(unsigned char)+0x32>
 800bda6:	28fe      	cmp	r0, #254	; 0xfe
 800bda8:	d00b      	beq.n	800bdc2 <PixelType::ConvertTxH(unsigned char)+0x36>
 800bdaa:	28f8      	cmp	r0, #248	; 0xf8
 800bdac:	d10b      	bne.n	800bdc6 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800bdae:	4808      	ldr	r0, [pc, #32]	; (800bdd0 <PixelType::ConvertTxH(unsigned char)+0x44>)
 800bdb0:	4770      	bx	lr
 800bdb2:	4808      	ldr	r0, [pc, #32]	; (800bdd4 <PixelType::ConvertTxH(unsigned char)+0x48>)
 800bdb4:	4770      	bx	lr
 800bdb6:	4808      	ldr	r0, [pc, #32]	; (800bdd8 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 800bdb8:	4770      	bx	lr
 800bdba:	4808      	ldr	r0, [pc, #32]	; (800bddc <PixelType::ConvertTxH(unsigned char)+0x50>)
 800bdbc:	4770      	bx	lr
 800bdbe:	4808      	ldr	r0, [pc, #32]	; (800bde0 <PixelType::ConvertTxH(unsigned char)+0x54>)
 800bdc0:	4770      	bx	lr
 800bdc2:	4808      	ldr	r0, [pc, #32]	; (800bde4 <PixelType::ConvertTxH(unsigned char)+0x58>)
 800bdc4:	4770      	bx	lr
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 800bdd0:	3f480000 	svccc	0x00480000
 800bdd4:	3f200000 	svccc	0x00200000
 800bdd8:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 800bddc:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 800bde0:	3f700000 	svccc	0x00700000
 800bde4:	3f8c0000 	svccc	0x008c0000

0800bde8 <PixelType::ConvertTxH(float)>:
 800bde8:	b510      	push	{r4, lr}
 800bdea:	491d      	ldr	r1, [pc, #116]	; (800be60 <PixelType::ConvertTxH(float)+0x78>)
 800bdec:	4604      	mov	r4, r0
 800bdee:	f7fc f825 	bl	8007e3c <__aeabi_fcmplt>
 800bdf2:	bb30      	cbnz	r0, 800be42 <PixelType::ConvertTxH(float)+0x5a>
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	491b      	ldr	r1, [pc, #108]	; (800be64 <PixelType::ConvertTxH(float)+0x7c>)
 800bdf8:	f7fc f820 	bl	8007e3c <__aeabi_fcmplt>
 800bdfc:	bb18      	cbnz	r0, 800be46 <PixelType::ConvertTxH(float)+0x5e>
 800bdfe:	4620      	mov	r0, r4
 800be00:	4919      	ldr	r1, [pc, #100]	; (800be68 <PixelType::ConvertTxH(float)+0x80>)
 800be02:	f7fc f81b 	bl	8007e3c <__aeabi_fcmplt>
 800be06:	bb00      	cbnz	r0, 800be4a <PixelType::ConvertTxH(float)+0x62>
 800be08:	4620      	mov	r0, r4
 800be0a:	4918      	ldr	r1, [pc, #96]	; (800be6c <PixelType::ConvertTxH(float)+0x84>)
 800be0c:	f7fc f816 	bl	8007e3c <__aeabi_fcmplt>
 800be10:	b9e8      	cbnz	r0, 800be4e <PixelType::ConvertTxH(float)+0x66>
 800be12:	4620      	mov	r0, r4
 800be14:	4916      	ldr	r1, [pc, #88]	; (800be70 <PixelType::ConvertTxH(float)+0x88>)
 800be16:	f7fc f811 	bl	8007e3c <__aeabi_fcmplt>
 800be1a:	b9d0      	cbnz	r0, 800be52 <PixelType::ConvertTxH(float)+0x6a>
 800be1c:	4620      	mov	r0, r4
 800be1e:	4915      	ldr	r1, [pc, #84]	; (800be74 <PixelType::ConvertTxH(float)+0x8c>)
 800be20:	f7fc f80c 	bl	8007e3c <__aeabi_fcmplt>
 800be24:	b9b8      	cbnz	r0, 800be56 <PixelType::ConvertTxH(float)+0x6e>
 800be26:	4620      	mov	r0, r4
 800be28:	4913      	ldr	r1, [pc, #76]	; (800be78 <PixelType::ConvertTxH(float)+0x90>)
 800be2a:	f7fc f807 	bl	8007e3c <__aeabi_fcmplt>
 800be2e:	b9a0      	cbnz	r0, 800be5a <PixelType::ConvertTxH(float)+0x72>
 800be30:	4620      	mov	r0, r4
 800be32:	4912      	ldr	r1, [pc, #72]	; (800be7c <PixelType::ConvertTxH(float)+0x94>)
 800be34:	f7fc f802 	bl	8007e3c <__aeabi_fcmplt>
 800be38:	2800      	cmp	r0, #0
 800be3a:	bf14      	ite	ne
 800be3c:	20fe      	movne	r0, #254	; 0xfe
 800be3e:	2000      	moveq	r0, #0
 800be40:	bd10      	pop	{r4, pc}
 800be42:	2000      	movs	r0, #0
 800be44:	e7fc      	b.n	800be40 <PixelType::ConvertTxH(float)+0x58>
 800be46:	2080      	movs	r0, #128	; 0x80
 800be48:	e7fa      	b.n	800be40 <PixelType::ConvertTxH(float)+0x58>
 800be4a:	20c0      	movs	r0, #192	; 0xc0
 800be4c:	e7f8      	b.n	800be40 <PixelType::ConvertTxH(float)+0x58>
 800be4e:	20e0      	movs	r0, #224	; 0xe0
 800be50:	e7f6      	b.n	800be40 <PixelType::ConvertTxH(float)+0x58>
 800be52:	20f0      	movs	r0, #240	; 0xf0
 800be54:	e7f4      	b.n	800be40 <PixelType::ConvertTxH(float)+0x58>
 800be56:	20f8      	movs	r0, #248	; 0xf8
 800be58:	e7f2      	b.n	800be40 <PixelType::ConvertTxH(float)+0x58>
 800be5a:	20fc      	movs	r0, #252	; 0xfc
 800be5c:	e7f0      	b.n	800be40 <PixelType::ConvertTxH(float)+0x58>
 800be5e:	bf00      	nop
 800be60:	3da00000 	stccc	0, cr0, [r0]
 800be64:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
 800be68:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
 800be6c:	3f0c0000 	svccc	0x000c0000
 800be70:	3f340000 	svccc	0x00340000
 800be74:	3f5c0000 	svccc	0x005c0000
 800be78:	3f820000 	svccc	0x00820000
 800be7c:	3f960000 	svccc	0x00960000

0800be80 <WS28xx::Print()>:
 800be80:	b513      	push	{r0, r1, r4, lr}
 800be82:	4604      	mov	r4, r0
 800be84:	4819      	ldr	r0, [pc, #100]	; (800beec <WS28xx::Print()+0x6c>)
 800be86:	f7fd f9d1 	bl	800922c <printf>
 800be8a:	6820      	ldr	r0, [r4, #0]
 800be8c:	f7ff ff1a 	bl	800bcc4 <PixelType::GetType(pixel::Type)>
 800be90:	6822      	ldr	r2, [r4, #0]
 800be92:	4601      	mov	r1, r0
 800be94:	4816      	ldr	r0, [pc, #88]	; (800bef0 <WS28xx::Print()+0x70>)
 800be96:	f7fd f9c9 	bl	800922c <printf>
 800be9a:	6861      	ldr	r1, [r4, #4]
 800be9c:	4815      	ldr	r0, [pc, #84]	; (800bef4 <WS28xx::Print()+0x74>)
 800be9e:	f7fd f9c5 	bl	800922c <printf>
 800bea2:	7ca3      	ldrb	r3, [r4, #18]
 800bea4:	b1fb      	cbz	r3, 800bee6 <WS28xx::Print()+0x66>
 800bea6:	68a0      	ldr	r0, [r4, #8]
 800bea8:	f7ff ff64 	bl	800bd74 <PixelType::GetMap(pixel::Map)>
 800beac:	68a2      	ldr	r2, [r4, #8]
 800beae:	4601      	mov	r1, r0
 800beb0:	4811      	ldr	r0, [pc, #68]	; (800bef8 <WS28xx::Print()+0x78>)
 800beb2:	f7fd f9bb 	bl	800922c <printf>
 800beb6:	7c20      	ldrb	r0, [r4, #16]
 800beb8:	f7ff ff68 	bl	800bd8c <PixelType::ConvertTxH(unsigned char)>
 800bebc:	f7fc f98a 	bl	80081d4 <__aeabi_f2d>
 800bec0:	460b      	mov	r3, r1
 800bec2:	7c21      	ldrb	r1, [r4, #16]
 800bec4:	4602      	mov	r2, r0
 800bec6:	9100      	str	r1, [sp, #0]
 800bec8:	480c      	ldr	r0, [pc, #48]	; (800befc <WS28xx::Print()+0x7c>)
 800beca:	f7fd f9af 	bl	800922c <printf>
 800bece:	7c60      	ldrb	r0, [r4, #17]
 800bed0:	f7ff ff5c 	bl	800bd8c <PixelType::ConvertTxH(unsigned char)>
 800bed4:	f7fc f97e 	bl	80081d4 <__aeabi_f2d>
 800bed8:	460b      	mov	r3, r1
 800beda:	7c61      	ldrb	r1, [r4, #17]
 800bedc:	4602      	mov	r2, r0
 800bede:	9100      	str	r1, [sp, #0]
 800bee0:	4807      	ldr	r0, [pc, #28]	; (800bf00 <WS28xx::Print()+0x80>)
 800bee2:	f7fd f9a3 	bl	800922c <printf>
 800bee6:	b002      	add	sp, #8
 800bee8:	bd10      	pop	{r4, pc}
 800beea:	bf00      	nop
 800beec:	080147d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, r9, sl, lr}
 800bef0:	080147e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, lr}
 800bef4:	080147fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bef8:	0801480c 	stmdaeq	r1, {r2, r3, fp, lr}
 800befc:	08014820 	stmdaeq	r1, {r5, fp, lr}
 800bf00:	08014838 	stmdaeq	r1, {r3, r4, r5, fp, lr}

0800bf04 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 800bf04:	b530      	push	{r4, r5, lr}
 800bf06:	7c84      	ldrb	r4, [r0, #18]
 800bf08:	f89d c00c 	ldrb.w	ip, [sp, #12]
 800bf0c:	b994      	cbnz	r4, 800bf34 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x30>
 800bf0e:	6804      	ldr	r4, [r0, #0]
 800bf10:	f1a4 0e0b 	sub.w	lr, r4, #11
 800bf14:	f1be 0f01 	cmp.w	lr, #1
 800bf18:	d93d      	bls.n	800bf96 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x92>
 800bf1a:	b9d4      	cbnz	r4, 800bf52 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4e>
 800bf1c:	6944      	ldr	r4, [r0, #20]
 800bf1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800bf22:	5462      	strb	r2, [r4, r1]
 800bf24:	6942      	ldr	r2, [r0, #20]
 800bf26:	440a      	add	r2, r1
 800bf28:	7053      	strb	r3, [r2, #1]
 800bf2a:	6943      	ldr	r3, [r0, #20]
 800bf2c:	440b      	add	r3, r1
 800bf2e:	f883 c002 	strb.w	ip, [r3, #2]
 800bf32:	bd30      	pop	{r4, r5, pc}
 800bf34:	6884      	ldr	r4, [r0, #8]
 800bf36:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800bf3a:	00c9      	lsls	r1, r1, #3
 800bf3c:	2c05      	cmp	r4, #5
 800bf3e:	f200 812d 	bhi.w	800c19c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x298>
 800bf42:	e8df f014 	tbh	[pc, r4, lsl #1]
 800bf46:	02ed012b 	rsceq	r0, sp, #-1073741814	; 0xc000000a
 800bf4a:	04140384 	ldreq	r0, [r4], #-900	; 0xfffffc7c
 800bf4e:	0202003b 	andeq	r0, r2, #59	; 0x3b
 800bf52:	ea6f 0e9c 	mvn.w	lr, ip, lsr #2
 800bf56:	ea6f 1413 	mvn.w	r4, r3, lsr #4
 800bf5a:	f082 05c0 	eor.w	r5, r2, #192	; 0xc0
 800bf5e:	f00e 0e30 	and.w	lr, lr, #48	; 0x30
 800bf62:	f004 040c 	and.w	r4, r4, #12
 800bf66:	ea4e 1e95 	orr.w	lr, lr, r5, lsr #6
 800bf6a:	ea4e 0e04 	orr.w	lr, lr, r4
 800bf6e:	6944      	ldr	r4, [r0, #20]
 800bf70:	3101      	adds	r1, #1
 800bf72:	f06e 0e3f 	orn	lr, lr, #63	; 0x3f
 800bf76:	f804 e021 	strb.w	lr, [r4, r1, lsl #2]
 800bf7a:	6944      	ldr	r4, [r0, #20]
 800bf7c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800bf80:	f884 c001 	strb.w	ip, [r4, #1]
 800bf84:	6944      	ldr	r4, [r0, #20]
 800bf86:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800bf8a:	70a3      	strb	r3, [r4, #2]
 800bf8c:	6943      	ldr	r3, [r0, #20]
 800bf8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800bf92:	70da      	strb	r2, [r3, #3]
 800bf94:	bd30      	pop	{r4, r5, pc}
 800bf96:	6944      	ldr	r4, [r0, #20]
 800bf98:	7cc5      	ldrb	r5, [r0, #19]
 800bf9a:	3101      	adds	r1, #1
 800bf9c:	f804 5021 	strb.w	r5, [r4, r1, lsl #2]
 800bfa0:	6944      	ldr	r4, [r0, #20]
 800bfa2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800bfa6:	7062      	strb	r2, [r4, #1]
 800bfa8:	6942      	ldr	r2, [r0, #20]
 800bfaa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800bfae:	7093      	strb	r3, [r2, #2]
 800bfb0:	6943      	ldr	r3, [r0, #20]
 800bfb2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800bfb6:	f883 c003 	strb.w	ip, [r3, #3]
 800bfba:	bd30      	pop	{r4, r5, pc}
 800bfbc:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800bfc0:	bf0c      	ite	eq
 800bfc2:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800bfc6:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800bfca:	6945      	ldr	r5, [r0, #20]
 800bfcc:	1c4c      	adds	r4, r1, #1
 800bfce:	f805 e004 	strb.w	lr, [r5, r4]
 800bfd2:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800bfd6:	bf0c      	ite	eq
 800bfd8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800bfdc:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800bfe0:	6945      	ldr	r5, [r0, #20]
 800bfe2:	1c8c      	adds	r4, r1, #2
 800bfe4:	f805 e004 	strb.w	lr, [r5, r4]
 800bfe8:	f01c 0f20 	tst.w	ip, #32
 800bfec:	bf0c      	ite	eq
 800bfee:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800bff2:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800bff6:	6945      	ldr	r5, [r0, #20]
 800bff8:	1ccc      	adds	r4, r1, #3
 800bffa:	f805 e004 	strb.w	lr, [r5, r4]
 800bffe:	f01c 0f10 	tst.w	ip, #16
 800c002:	bf0c      	ite	eq
 800c004:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800c008:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800c00c:	6945      	ldr	r5, [r0, #20]
 800c00e:	1d0c      	adds	r4, r1, #4
 800c010:	f01c 0f08 	tst.w	ip, #8
 800c014:	f805 e004 	strb.w	lr, [r5, r4]
 800c018:	bf0c      	ite	eq
 800c01a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800c01e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800c022:	6945      	ldr	r5, [r0, #20]
 800c024:	1d4c      	adds	r4, r1, #5
 800c026:	f01c 0f04 	tst.w	ip, #4
 800c02a:	f805 e004 	strb.w	lr, [r5, r4]
 800c02e:	bf0c      	ite	eq
 800c030:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800c034:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800c038:	6945      	ldr	r5, [r0, #20]
 800c03a:	1d8c      	adds	r4, r1, #6
 800c03c:	f01c 0f02 	tst.w	ip, #2
 800c040:	f805 e004 	strb.w	lr, [r5, r4]
 800c044:	bf0c      	ite	eq
 800c046:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800c04a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800c04e:	6945      	ldr	r5, [r0, #20]
 800c050:	1dcc      	adds	r4, r1, #7
 800c052:	f01c 0f01 	tst.w	ip, #1
 800c056:	f805 e004 	strb.w	lr, [r5, r4]
 800c05a:	bf14      	ite	ne
 800c05c:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800c060:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800c064:	6945      	ldr	r5, [r0, #20]
 800c066:	f101 0408 	add.w	r4, r1, #8
 800c06a:	f805 c004 	strb.w	ip, [r5, r4]
 800c06e:	0615      	lsls	r5, r2, #24
 800c070:	bf54      	ite	pl
 800c072:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c076:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c07a:	6945      	ldr	r5, [r0, #20]
 800c07c:	f101 0409 	add.w	r4, r1, #9
 800c080:	f805 c004 	strb.w	ip, [r5, r4]
 800c084:	0655      	lsls	r5, r2, #25
 800c086:	bf54      	ite	pl
 800c088:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c08c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c090:	6945      	ldr	r5, [r0, #20]
 800c092:	f101 040a 	add.w	r4, r1, #10
 800c096:	f805 c004 	strb.w	ip, [r5, r4]
 800c09a:	0695      	lsls	r5, r2, #26
 800c09c:	bf54      	ite	pl
 800c09e:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c0a2:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c0a6:	6945      	ldr	r5, [r0, #20]
 800c0a8:	f101 040b 	add.w	r4, r1, #11
 800c0ac:	f805 c004 	strb.w	ip, [r5, r4]
 800c0b0:	06d5      	lsls	r5, r2, #27
 800c0b2:	bf54      	ite	pl
 800c0b4:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c0b8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c0bc:	6945      	ldr	r5, [r0, #20]
 800c0be:	f101 040c 	add.w	r4, r1, #12
 800c0c2:	f805 c004 	strb.w	ip, [r5, r4]
 800c0c6:	0715      	lsls	r5, r2, #28
 800c0c8:	bf54      	ite	pl
 800c0ca:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c0ce:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c0d2:	6945      	ldr	r5, [r0, #20]
 800c0d4:	f101 040d 	add.w	r4, r1, #13
 800c0d8:	f805 c004 	strb.w	ip, [r5, r4]
 800c0dc:	0755      	lsls	r5, r2, #29
 800c0de:	bf54      	ite	pl
 800c0e0:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c0e4:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c0e8:	6945      	ldr	r5, [r0, #20]
 800c0ea:	f101 040e 	add.w	r4, r1, #14
 800c0ee:	f805 c004 	strb.w	ip, [r5, r4]
 800c0f2:	0795      	lsls	r5, r2, #30
 800c0f4:	bf58      	it	pl
 800c0f6:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c0fa:	6945      	ldr	r5, [r0, #20]
 800c0fc:	bf48      	it	mi
 800c0fe:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c102:	f101 040f 	add.w	r4, r1, #15
 800c106:	f805 c004 	strb.w	ip, [r5, r4]
 800c10a:	07d5      	lsls	r5, r2, #31
 800c10c:	bf4c      	ite	mi
 800c10e:	7c45      	ldrbmi	r5, [r0, #17]
 800c110:	7c05      	ldrbpl	r5, [r0, #16]
 800c112:	6942      	ldr	r2, [r0, #20]
 800c114:	f101 0410 	add.w	r4, r1, #16
 800c118:	5515      	strb	r5, [r2, r4]
 800c11a:	061c      	lsls	r4, r3, #24
 800c11c:	bf54      	ite	pl
 800c11e:	7c05      	ldrbpl	r5, [r0, #16]
 800c120:	7c45      	ldrbmi	r5, [r0, #17]
 800c122:	6944      	ldr	r4, [r0, #20]
 800c124:	f101 0211 	add.w	r2, r1, #17
 800c128:	54a5      	strb	r5, [r4, r2]
 800c12a:	065d      	lsls	r5, r3, #25
 800c12c:	bf54      	ite	pl
 800c12e:	7c05      	ldrbpl	r5, [r0, #16]
 800c130:	7c45      	ldrbmi	r5, [r0, #17]
 800c132:	6944      	ldr	r4, [r0, #20]
 800c134:	f101 0212 	add.w	r2, r1, #18
 800c138:	54a5      	strb	r5, [r4, r2]
 800c13a:	069c      	lsls	r4, r3, #26
 800c13c:	bf54      	ite	pl
 800c13e:	7c05      	ldrbpl	r5, [r0, #16]
 800c140:	7c45      	ldrbmi	r5, [r0, #17]
 800c142:	6944      	ldr	r4, [r0, #20]
 800c144:	f101 0213 	add.w	r2, r1, #19
 800c148:	54a5      	strb	r5, [r4, r2]
 800c14a:	06dd      	lsls	r5, r3, #27
 800c14c:	bf54      	ite	pl
 800c14e:	7c05      	ldrbpl	r5, [r0, #16]
 800c150:	7c45      	ldrbmi	r5, [r0, #17]
 800c152:	6944      	ldr	r4, [r0, #20]
 800c154:	f101 0214 	add.w	r2, r1, #20
 800c158:	54a5      	strb	r5, [r4, r2]
 800c15a:	071c      	lsls	r4, r3, #28
 800c15c:	bf54      	ite	pl
 800c15e:	7c05      	ldrbpl	r5, [r0, #16]
 800c160:	7c45      	ldrbmi	r5, [r0, #17]
 800c162:	6944      	ldr	r4, [r0, #20]
 800c164:	f101 0215 	add.w	r2, r1, #21
 800c168:	54a5      	strb	r5, [r4, r2]
 800c16a:	075d      	lsls	r5, r3, #29
 800c16c:	bf54      	ite	pl
 800c16e:	7c05      	ldrbpl	r5, [r0, #16]
 800c170:	7c45      	ldrbmi	r5, [r0, #17]
 800c172:	6944      	ldr	r4, [r0, #20]
 800c174:	f101 0216 	add.w	r2, r1, #22
 800c178:	54a5      	strb	r5, [r4, r2]
 800c17a:	079c      	lsls	r4, r3, #30
 800c17c:	bf54      	ite	pl
 800c17e:	7c05      	ldrbpl	r5, [r0, #16]
 800c180:	7c45      	ldrbmi	r5, [r0, #17]
 800c182:	6944      	ldr	r4, [r0, #20]
 800c184:	f101 0217 	add.w	r2, r1, #23
 800c188:	54a5      	strb	r5, [r4, r2]
 800c18a:	3118      	adds	r1, #24
 800c18c:	f013 0f01 	tst.w	r3, #1
 800c190:	f000 80d9 	beq.w	800c346 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x442>
 800c194:	7c42      	ldrb	r2, [r0, #17]
 800c196:	6943      	ldr	r3, [r0, #20]
 800c198:	545a      	strb	r2, [r3, r1]
 800c19a:	bd30      	pop	{r4, r5, pc}
 800c19c:	0615      	lsls	r5, r2, #24
 800c19e:	bf54      	ite	pl
 800c1a0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c1a4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c1a8:	6945      	ldr	r5, [r0, #20]
 800c1aa:	1c4c      	adds	r4, r1, #1
 800c1ac:	f805 e004 	strb.w	lr, [r5, r4]
 800c1b0:	0655      	lsls	r5, r2, #25
 800c1b2:	bf54      	ite	pl
 800c1b4:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c1b8:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c1bc:	6945      	ldr	r5, [r0, #20]
 800c1be:	1c8c      	adds	r4, r1, #2
 800c1c0:	f805 e004 	strb.w	lr, [r5, r4]
 800c1c4:	0695      	lsls	r5, r2, #26
 800c1c6:	bf54      	ite	pl
 800c1c8:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c1cc:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c1d0:	6945      	ldr	r5, [r0, #20]
 800c1d2:	1ccc      	adds	r4, r1, #3
 800c1d4:	f805 e004 	strb.w	lr, [r5, r4]
 800c1d8:	06d5      	lsls	r5, r2, #27
 800c1da:	bf54      	ite	pl
 800c1dc:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c1e0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c1e4:	6945      	ldr	r5, [r0, #20]
 800c1e6:	1d0c      	adds	r4, r1, #4
 800c1e8:	f805 e004 	strb.w	lr, [r5, r4]
 800c1ec:	0715      	lsls	r5, r2, #28
 800c1ee:	bf54      	ite	pl
 800c1f0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c1f4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c1f8:	6945      	ldr	r5, [r0, #20]
 800c1fa:	1d4c      	adds	r4, r1, #5
 800c1fc:	f805 e004 	strb.w	lr, [r5, r4]
 800c200:	0755      	lsls	r5, r2, #29
 800c202:	bf54      	ite	pl
 800c204:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c208:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c20c:	6945      	ldr	r5, [r0, #20]
 800c20e:	1d8c      	adds	r4, r1, #6
 800c210:	f805 e004 	strb.w	lr, [r5, r4]
 800c214:	0795      	lsls	r5, r2, #30
 800c216:	bf58      	it	pl
 800c218:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c21c:	6945      	ldr	r5, [r0, #20]
 800c21e:	bf48      	it	mi
 800c220:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c224:	1dcc      	adds	r4, r1, #7
 800c226:	f805 e004 	strb.w	lr, [r5, r4]
 800c22a:	07d5      	lsls	r5, r2, #31
 800c22c:	bf4c      	ite	mi
 800c22e:	7c45      	ldrbmi	r5, [r0, #17]
 800c230:	7c05      	ldrbpl	r5, [r0, #16]
 800c232:	6942      	ldr	r2, [r0, #20]
 800c234:	f101 0408 	add.w	r4, r1, #8
 800c238:	5515      	strb	r5, [r2, r4]
 800c23a:	061c      	lsls	r4, r3, #24
 800c23c:	bf54      	ite	pl
 800c23e:	7c05      	ldrbpl	r5, [r0, #16]
 800c240:	7c45      	ldrbmi	r5, [r0, #17]
 800c242:	6944      	ldr	r4, [r0, #20]
 800c244:	f101 0209 	add.w	r2, r1, #9
 800c248:	54a5      	strb	r5, [r4, r2]
 800c24a:	065d      	lsls	r5, r3, #25
 800c24c:	bf54      	ite	pl
 800c24e:	7c05      	ldrbpl	r5, [r0, #16]
 800c250:	7c45      	ldrbmi	r5, [r0, #17]
 800c252:	6944      	ldr	r4, [r0, #20]
 800c254:	f101 020a 	add.w	r2, r1, #10
 800c258:	54a5      	strb	r5, [r4, r2]
 800c25a:	069c      	lsls	r4, r3, #26
 800c25c:	bf54      	ite	pl
 800c25e:	7c05      	ldrbpl	r5, [r0, #16]
 800c260:	7c45      	ldrbmi	r5, [r0, #17]
 800c262:	6944      	ldr	r4, [r0, #20]
 800c264:	f101 020b 	add.w	r2, r1, #11
 800c268:	54a5      	strb	r5, [r4, r2]
 800c26a:	06dd      	lsls	r5, r3, #27
 800c26c:	bf54      	ite	pl
 800c26e:	7c05      	ldrbpl	r5, [r0, #16]
 800c270:	7c45      	ldrbmi	r5, [r0, #17]
 800c272:	6944      	ldr	r4, [r0, #20]
 800c274:	f101 020c 	add.w	r2, r1, #12
 800c278:	54a5      	strb	r5, [r4, r2]
 800c27a:	071c      	lsls	r4, r3, #28
 800c27c:	bf54      	ite	pl
 800c27e:	7c05      	ldrbpl	r5, [r0, #16]
 800c280:	7c45      	ldrbmi	r5, [r0, #17]
 800c282:	6944      	ldr	r4, [r0, #20]
 800c284:	f101 020d 	add.w	r2, r1, #13
 800c288:	54a5      	strb	r5, [r4, r2]
 800c28a:	075d      	lsls	r5, r3, #29
 800c28c:	bf54      	ite	pl
 800c28e:	7c05      	ldrbpl	r5, [r0, #16]
 800c290:	7c45      	ldrbmi	r5, [r0, #17]
 800c292:	6944      	ldr	r4, [r0, #20]
 800c294:	f101 020e 	add.w	r2, r1, #14
 800c298:	54a5      	strb	r5, [r4, r2]
 800c29a:	079c      	lsls	r4, r3, #30
 800c29c:	bf58      	it	pl
 800c29e:	7c05      	ldrbpl	r5, [r0, #16]
 800c2a0:	6944      	ldr	r4, [r0, #20]
 800c2a2:	bf48      	it	mi
 800c2a4:	7c45      	ldrbmi	r5, [r0, #17]
 800c2a6:	f101 020f 	add.w	r2, r1, #15
 800c2aa:	54a5      	strb	r5, [r4, r2]
 800c2ac:	07db      	lsls	r3, r3, #31
 800c2ae:	bf4c      	ite	mi
 800c2b0:	7c44      	ldrbmi	r4, [r0, #17]
 800c2b2:	7c04      	ldrbpl	r4, [r0, #16]
 800c2b4:	6943      	ldr	r3, [r0, #20]
 800c2b6:	f101 0210 	add.w	r2, r1, #16
 800c2ba:	549c      	strb	r4, [r3, r2]
 800c2bc:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c2c0:	bf0c      	ite	eq
 800c2c2:	7c04      	ldrbeq	r4, [r0, #16]
 800c2c4:	7c44      	ldrbne	r4, [r0, #17]
 800c2c6:	6942      	ldr	r2, [r0, #20]
 800c2c8:	f101 0311 	add.w	r3, r1, #17
 800c2cc:	54d4      	strb	r4, [r2, r3]
 800c2ce:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800c2d2:	bf0c      	ite	eq
 800c2d4:	7c04      	ldrbeq	r4, [r0, #16]
 800c2d6:	7c44      	ldrbne	r4, [r0, #17]
 800c2d8:	6942      	ldr	r2, [r0, #20]
 800c2da:	f101 0312 	add.w	r3, r1, #18
 800c2de:	54d4      	strb	r4, [r2, r3]
 800c2e0:	f01c 0f20 	tst.w	ip, #32
 800c2e4:	bf0c      	ite	eq
 800c2e6:	7c04      	ldrbeq	r4, [r0, #16]
 800c2e8:	7c44      	ldrbne	r4, [r0, #17]
 800c2ea:	6942      	ldr	r2, [r0, #20]
 800c2ec:	f101 0313 	add.w	r3, r1, #19
 800c2f0:	54d4      	strb	r4, [r2, r3]
 800c2f2:	f01c 0f10 	tst.w	ip, #16
 800c2f6:	bf0c      	ite	eq
 800c2f8:	7c04      	ldrbeq	r4, [r0, #16]
 800c2fa:	7c44      	ldrbne	r4, [r0, #17]
 800c2fc:	6942      	ldr	r2, [r0, #20]
 800c2fe:	f101 0314 	add.w	r3, r1, #20
 800c302:	54d4      	strb	r4, [r2, r3]
 800c304:	f01c 0f08 	tst.w	ip, #8
 800c308:	bf0c      	ite	eq
 800c30a:	7c04      	ldrbeq	r4, [r0, #16]
 800c30c:	7c44      	ldrbne	r4, [r0, #17]
 800c30e:	6942      	ldr	r2, [r0, #20]
 800c310:	f101 0315 	add.w	r3, r1, #21
 800c314:	54d4      	strb	r4, [r2, r3]
 800c316:	f01c 0f04 	tst.w	ip, #4
 800c31a:	bf0c      	ite	eq
 800c31c:	7c04      	ldrbeq	r4, [r0, #16]
 800c31e:	7c44      	ldrbne	r4, [r0, #17]
 800c320:	6942      	ldr	r2, [r0, #20]
 800c322:	f101 0316 	add.w	r3, r1, #22
 800c326:	54d4      	strb	r4, [r2, r3]
 800c328:	f01c 0f02 	tst.w	ip, #2
 800c32c:	bf0c      	ite	eq
 800c32e:	7c04      	ldrbeq	r4, [r0, #16]
 800c330:	7c44      	ldrbne	r4, [r0, #17]
 800c332:	6942      	ldr	r2, [r0, #20]
 800c334:	f101 0317 	add.w	r3, r1, #23
 800c338:	f01c 0f01 	tst.w	ip, #1
 800c33c:	54d4      	strb	r4, [r2, r3]
 800c33e:	f101 0118 	add.w	r1, r1, #24
 800c342:	f47f af27 	bne.w	800c194 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x290>
 800c346:	7c02      	ldrb	r2, [r0, #16]
 800c348:	e725      	b.n	800c196 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x292>
 800c34a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c34e:	bf0c      	ite	eq
 800c350:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800c354:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800c358:	6945      	ldr	r5, [r0, #20]
 800c35a:	1c4c      	adds	r4, r1, #1
 800c35c:	f805 e004 	strb.w	lr, [r5, r4]
 800c360:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800c364:	bf0c      	ite	eq
 800c366:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800c36a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800c36e:	6945      	ldr	r5, [r0, #20]
 800c370:	1c8c      	adds	r4, r1, #2
 800c372:	f805 e004 	strb.w	lr, [r5, r4]
 800c376:	f01c 0f20 	tst.w	ip, #32
 800c37a:	bf0c      	ite	eq
 800c37c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800c380:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800c384:	6945      	ldr	r5, [r0, #20]
 800c386:	1ccc      	adds	r4, r1, #3
 800c388:	f805 e004 	strb.w	lr, [r5, r4]
 800c38c:	f01c 0f10 	tst.w	ip, #16
 800c390:	bf0c      	ite	eq
 800c392:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800c396:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800c39a:	6945      	ldr	r5, [r0, #20]
 800c39c:	1d0c      	adds	r4, r1, #4
 800c39e:	f01c 0f08 	tst.w	ip, #8
 800c3a2:	f805 e004 	strb.w	lr, [r5, r4]
 800c3a6:	bf0c      	ite	eq
 800c3a8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800c3ac:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800c3b0:	6945      	ldr	r5, [r0, #20]
 800c3b2:	1d4c      	adds	r4, r1, #5
 800c3b4:	f01c 0f04 	tst.w	ip, #4
 800c3b8:	f805 e004 	strb.w	lr, [r5, r4]
 800c3bc:	bf0c      	ite	eq
 800c3be:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800c3c2:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800c3c6:	6945      	ldr	r5, [r0, #20]
 800c3c8:	1d8c      	adds	r4, r1, #6
 800c3ca:	f01c 0f02 	tst.w	ip, #2
 800c3ce:	f805 e004 	strb.w	lr, [r5, r4]
 800c3d2:	bf0c      	ite	eq
 800c3d4:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800c3d8:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800c3dc:	6945      	ldr	r5, [r0, #20]
 800c3de:	1dcc      	adds	r4, r1, #7
 800c3e0:	f01c 0f01 	tst.w	ip, #1
 800c3e4:	f805 e004 	strb.w	lr, [r5, r4]
 800c3e8:	bf14      	ite	ne
 800c3ea:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800c3ee:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800c3f2:	6945      	ldr	r5, [r0, #20]
 800c3f4:	f101 0408 	add.w	r4, r1, #8
 800c3f8:	f805 c004 	strb.w	ip, [r5, r4]
 800c3fc:	061d      	lsls	r5, r3, #24
 800c3fe:	bf54      	ite	pl
 800c400:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c404:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c408:	6945      	ldr	r5, [r0, #20]
 800c40a:	f101 0409 	add.w	r4, r1, #9
 800c40e:	f805 c004 	strb.w	ip, [r5, r4]
 800c412:	065d      	lsls	r5, r3, #25
 800c414:	bf54      	ite	pl
 800c416:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c41a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c41e:	6945      	ldr	r5, [r0, #20]
 800c420:	f101 040a 	add.w	r4, r1, #10
 800c424:	f805 c004 	strb.w	ip, [r5, r4]
 800c428:	069d      	lsls	r5, r3, #26
 800c42a:	bf54      	ite	pl
 800c42c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c430:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c434:	6945      	ldr	r5, [r0, #20]
 800c436:	f101 040b 	add.w	r4, r1, #11
 800c43a:	f805 c004 	strb.w	ip, [r5, r4]
 800c43e:	06dd      	lsls	r5, r3, #27
 800c440:	bf54      	ite	pl
 800c442:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c446:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c44a:	6945      	ldr	r5, [r0, #20]
 800c44c:	f101 040c 	add.w	r4, r1, #12
 800c450:	f805 c004 	strb.w	ip, [r5, r4]
 800c454:	071d      	lsls	r5, r3, #28
 800c456:	bf54      	ite	pl
 800c458:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c45c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c460:	6945      	ldr	r5, [r0, #20]
 800c462:	f101 040d 	add.w	r4, r1, #13
 800c466:	f805 c004 	strb.w	ip, [r5, r4]
 800c46a:	075d      	lsls	r5, r3, #29
 800c46c:	bf54      	ite	pl
 800c46e:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c472:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c476:	6945      	ldr	r5, [r0, #20]
 800c478:	f101 040e 	add.w	r4, r1, #14
 800c47c:	f805 c004 	strb.w	ip, [r5, r4]
 800c480:	079d      	lsls	r5, r3, #30
 800c482:	bf58      	it	pl
 800c484:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800c488:	6945      	ldr	r5, [r0, #20]
 800c48a:	bf48      	it	mi
 800c48c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800c490:	f101 040f 	add.w	r4, r1, #15
 800c494:	f805 c004 	strb.w	ip, [r5, r4]
 800c498:	07dd      	lsls	r5, r3, #31
 800c49a:	bf4c      	ite	mi
 800c49c:	7c45      	ldrbmi	r5, [r0, #17]
 800c49e:	7c05      	ldrbpl	r5, [r0, #16]
 800c4a0:	6943      	ldr	r3, [r0, #20]
 800c4a2:	f101 0410 	add.w	r4, r1, #16
 800c4a6:	551d      	strb	r5, [r3, r4]
 800c4a8:	0614      	lsls	r4, r2, #24
 800c4aa:	bf54      	ite	pl
 800c4ac:	7c05      	ldrbpl	r5, [r0, #16]
 800c4ae:	7c45      	ldrbmi	r5, [r0, #17]
 800c4b0:	6944      	ldr	r4, [r0, #20]
 800c4b2:	f101 0311 	add.w	r3, r1, #17
 800c4b6:	54e5      	strb	r5, [r4, r3]
 800c4b8:	0655      	lsls	r5, r2, #25
 800c4ba:	bf54      	ite	pl
 800c4bc:	7c05      	ldrbpl	r5, [r0, #16]
 800c4be:	7c45      	ldrbmi	r5, [r0, #17]
 800c4c0:	6944      	ldr	r4, [r0, #20]
 800c4c2:	f101 0312 	add.w	r3, r1, #18
 800c4c6:	54e5      	strb	r5, [r4, r3]
 800c4c8:	0694      	lsls	r4, r2, #26
 800c4ca:	bf54      	ite	pl
 800c4cc:	7c05      	ldrbpl	r5, [r0, #16]
 800c4ce:	7c45      	ldrbmi	r5, [r0, #17]
 800c4d0:	6944      	ldr	r4, [r0, #20]
 800c4d2:	f101 0313 	add.w	r3, r1, #19
 800c4d6:	54e5      	strb	r5, [r4, r3]
 800c4d8:	06d5      	lsls	r5, r2, #27
 800c4da:	bf54      	ite	pl
 800c4dc:	7c05      	ldrbpl	r5, [r0, #16]
 800c4de:	7c45      	ldrbmi	r5, [r0, #17]
 800c4e0:	6944      	ldr	r4, [r0, #20]
 800c4e2:	f101 0314 	add.w	r3, r1, #20
 800c4e6:	54e5      	strb	r5, [r4, r3]
 800c4e8:	0714      	lsls	r4, r2, #28
 800c4ea:	bf54      	ite	pl
 800c4ec:	7c05      	ldrbpl	r5, [r0, #16]
 800c4ee:	7c45      	ldrbmi	r5, [r0, #17]
 800c4f0:	6944      	ldr	r4, [r0, #20]
 800c4f2:	f101 0315 	add.w	r3, r1, #21
 800c4f6:	54e5      	strb	r5, [r4, r3]
 800c4f8:	0755      	lsls	r5, r2, #29
 800c4fa:	bf54      	ite	pl
 800c4fc:	7c05      	ldrbpl	r5, [r0, #16]
 800c4fe:	7c45      	ldrbmi	r5, [r0, #17]
 800c500:	6944      	ldr	r4, [r0, #20]
 800c502:	f101 0316 	add.w	r3, r1, #22
 800c506:	54e5      	strb	r5, [r4, r3]
 800c508:	0794      	lsls	r4, r2, #30
 800c50a:	bf54      	ite	pl
 800c50c:	7c05      	ldrbpl	r5, [r0, #16]
 800c50e:	7c45      	ldrbmi	r5, [r0, #17]
 800c510:	6944      	ldr	r4, [r0, #20]
 800c512:	f101 0317 	add.w	r3, r1, #23
 800c516:	54e5      	strb	r5, [r4, r3]
 800c518:	3118      	adds	r1, #24
 800c51a:	f012 0f01 	tst.w	r2, #1
 800c51e:	e637      	b.n	800c190 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x28c>
 800c520:	0615      	lsls	r5, r2, #24
 800c522:	bf54      	ite	pl
 800c524:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c528:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c52c:	6945      	ldr	r5, [r0, #20]
 800c52e:	1c4c      	adds	r4, r1, #1
 800c530:	f805 e004 	strb.w	lr, [r5, r4]
 800c534:	0655      	lsls	r5, r2, #25
 800c536:	bf54      	ite	pl
 800c538:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c53c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c540:	6945      	ldr	r5, [r0, #20]
 800c542:	1c8c      	adds	r4, r1, #2
 800c544:	f805 e004 	strb.w	lr, [r5, r4]
 800c548:	0695      	lsls	r5, r2, #26
 800c54a:	bf54      	ite	pl
 800c54c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c550:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c554:	6945      	ldr	r5, [r0, #20]
 800c556:	1ccc      	adds	r4, r1, #3
 800c558:	f805 e004 	strb.w	lr, [r5, r4]
 800c55c:	06d5      	lsls	r5, r2, #27
 800c55e:	bf54      	ite	pl
 800c560:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c564:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c568:	6945      	ldr	r5, [r0, #20]
 800c56a:	1d0c      	adds	r4, r1, #4
 800c56c:	f805 e004 	strb.w	lr, [r5, r4]
 800c570:	0715      	lsls	r5, r2, #28
 800c572:	bf54      	ite	pl
 800c574:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c578:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c57c:	6945      	ldr	r5, [r0, #20]
 800c57e:	1d4c      	adds	r4, r1, #5
 800c580:	f805 e004 	strb.w	lr, [r5, r4]
 800c584:	0755      	lsls	r5, r2, #29
 800c586:	bf54      	ite	pl
 800c588:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c58c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c590:	6945      	ldr	r5, [r0, #20]
 800c592:	1d8c      	adds	r4, r1, #6
 800c594:	f805 e004 	strb.w	lr, [r5, r4]
 800c598:	0795      	lsls	r5, r2, #30
 800c59a:	bf58      	it	pl
 800c59c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c5a0:	6945      	ldr	r5, [r0, #20]
 800c5a2:	bf48      	it	mi
 800c5a4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c5a8:	1dcc      	adds	r4, r1, #7
 800c5aa:	f805 e004 	strb.w	lr, [r5, r4]
 800c5ae:	07d2      	lsls	r2, r2, #31
 800c5b0:	bf4c      	ite	mi
 800c5b2:	7c45      	ldrbmi	r5, [r0, #17]
 800c5b4:	7c05      	ldrbpl	r5, [r0, #16]
 800c5b6:	6942      	ldr	r2, [r0, #20]
 800c5b8:	f101 0408 	add.w	r4, r1, #8
 800c5bc:	5515      	strb	r5, [r2, r4]
 800c5be:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c5c2:	bf0c      	ite	eq
 800c5c4:	7c05      	ldrbeq	r5, [r0, #16]
 800c5c6:	7c45      	ldrbne	r5, [r0, #17]
 800c5c8:	6944      	ldr	r4, [r0, #20]
 800c5ca:	f101 0209 	add.w	r2, r1, #9
 800c5ce:	54a5      	strb	r5, [r4, r2]
 800c5d0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800c5d4:	bf0c      	ite	eq
 800c5d6:	7c05      	ldrbeq	r5, [r0, #16]
 800c5d8:	7c45      	ldrbne	r5, [r0, #17]
 800c5da:	6944      	ldr	r4, [r0, #20]
 800c5dc:	f101 020a 	add.w	r2, r1, #10
 800c5e0:	54a5      	strb	r5, [r4, r2]
 800c5e2:	f01c 0f20 	tst.w	ip, #32
 800c5e6:	bf0c      	ite	eq
 800c5e8:	7c05      	ldrbeq	r5, [r0, #16]
 800c5ea:	7c45      	ldrbne	r5, [r0, #17]
 800c5ec:	6944      	ldr	r4, [r0, #20]
 800c5ee:	f101 020b 	add.w	r2, r1, #11
 800c5f2:	54a5      	strb	r5, [r4, r2]
 800c5f4:	f01c 0f10 	tst.w	ip, #16
 800c5f8:	bf0c      	ite	eq
 800c5fa:	7c05      	ldrbeq	r5, [r0, #16]
 800c5fc:	7c45      	ldrbne	r5, [r0, #17]
 800c5fe:	6944      	ldr	r4, [r0, #20]
 800c600:	f101 020c 	add.w	r2, r1, #12
 800c604:	54a5      	strb	r5, [r4, r2]
 800c606:	f01c 0f08 	tst.w	ip, #8
 800c60a:	bf0c      	ite	eq
 800c60c:	7c05      	ldrbeq	r5, [r0, #16]
 800c60e:	7c45      	ldrbne	r5, [r0, #17]
 800c610:	6944      	ldr	r4, [r0, #20]
 800c612:	f101 020d 	add.w	r2, r1, #13
 800c616:	54a5      	strb	r5, [r4, r2]
 800c618:	f01c 0f04 	tst.w	ip, #4
 800c61c:	bf0c      	ite	eq
 800c61e:	7c05      	ldrbeq	r5, [r0, #16]
 800c620:	7c45      	ldrbne	r5, [r0, #17]
 800c622:	6944      	ldr	r4, [r0, #20]
 800c624:	f101 020e 	add.w	r2, r1, #14
 800c628:	54a5      	strb	r5, [r4, r2]
 800c62a:	f01c 0f02 	tst.w	ip, #2
 800c62e:	bf0c      	ite	eq
 800c630:	7c05      	ldrbeq	r5, [r0, #16]
 800c632:	7c45      	ldrbne	r5, [r0, #17]
 800c634:	6944      	ldr	r4, [r0, #20]
 800c636:	f101 020f 	add.w	r2, r1, #15
 800c63a:	54a5      	strb	r5, [r4, r2]
 800c63c:	f01c 0f01 	tst.w	ip, #1
 800c640:	bf14      	ite	ne
 800c642:	7c45      	ldrbne	r5, [r0, #17]
 800c644:	7c05      	ldrbeq	r5, [r0, #16]
 800c646:	6944      	ldr	r4, [r0, #20]
 800c648:	f101 0210 	add.w	r2, r1, #16
 800c64c:	e564      	b.n	800c118 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x214>
 800c64e:	061d      	lsls	r5, r3, #24
 800c650:	bf54      	ite	pl
 800c652:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c656:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c65a:	6945      	ldr	r5, [r0, #20]
 800c65c:	1c4c      	adds	r4, r1, #1
 800c65e:	f805 e004 	strb.w	lr, [r5, r4]
 800c662:	065d      	lsls	r5, r3, #25
 800c664:	bf54      	ite	pl
 800c666:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c66a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c66e:	6945      	ldr	r5, [r0, #20]
 800c670:	1c8c      	adds	r4, r1, #2
 800c672:	f805 e004 	strb.w	lr, [r5, r4]
 800c676:	069d      	lsls	r5, r3, #26
 800c678:	bf54      	ite	pl
 800c67a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c67e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c682:	6945      	ldr	r5, [r0, #20]
 800c684:	1ccc      	adds	r4, r1, #3
 800c686:	f805 e004 	strb.w	lr, [r5, r4]
 800c68a:	06dd      	lsls	r5, r3, #27
 800c68c:	bf54      	ite	pl
 800c68e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c692:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c696:	6945      	ldr	r5, [r0, #20]
 800c698:	1d0c      	adds	r4, r1, #4
 800c69a:	f805 e004 	strb.w	lr, [r5, r4]
 800c69e:	071d      	lsls	r5, r3, #28
 800c6a0:	bf54      	ite	pl
 800c6a2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c6a6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c6aa:	6945      	ldr	r5, [r0, #20]
 800c6ac:	1d4c      	adds	r4, r1, #5
 800c6ae:	f805 e004 	strb.w	lr, [r5, r4]
 800c6b2:	075d      	lsls	r5, r3, #29
 800c6b4:	bf54      	ite	pl
 800c6b6:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c6ba:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c6be:	6945      	ldr	r5, [r0, #20]
 800c6c0:	1d8c      	adds	r4, r1, #6
 800c6c2:	f805 e004 	strb.w	lr, [r5, r4]
 800c6c6:	079d      	lsls	r5, r3, #30
 800c6c8:	bf58      	it	pl
 800c6ca:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c6ce:	6945      	ldr	r5, [r0, #20]
 800c6d0:	bf48      	it	mi
 800c6d2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c6d6:	1dcc      	adds	r4, r1, #7
 800c6d8:	f805 e004 	strb.w	lr, [r5, r4]
 800c6dc:	07dd      	lsls	r5, r3, #31
 800c6de:	bf4c      	ite	mi
 800c6e0:	7c45      	ldrbmi	r5, [r0, #17]
 800c6e2:	7c05      	ldrbpl	r5, [r0, #16]
 800c6e4:	6943      	ldr	r3, [r0, #20]
 800c6e6:	f101 0408 	add.w	r4, r1, #8
 800c6ea:	551d      	strb	r5, [r3, r4]
 800c6ec:	0614      	lsls	r4, r2, #24
 800c6ee:	bf54      	ite	pl
 800c6f0:	7c05      	ldrbpl	r5, [r0, #16]
 800c6f2:	7c45      	ldrbmi	r5, [r0, #17]
 800c6f4:	6944      	ldr	r4, [r0, #20]
 800c6f6:	f101 0309 	add.w	r3, r1, #9
 800c6fa:	54e5      	strb	r5, [r4, r3]
 800c6fc:	0655      	lsls	r5, r2, #25
 800c6fe:	bf54      	ite	pl
 800c700:	7c05      	ldrbpl	r5, [r0, #16]
 800c702:	7c45      	ldrbmi	r5, [r0, #17]
 800c704:	6944      	ldr	r4, [r0, #20]
 800c706:	f101 030a 	add.w	r3, r1, #10
 800c70a:	54e5      	strb	r5, [r4, r3]
 800c70c:	0694      	lsls	r4, r2, #26
 800c70e:	bf54      	ite	pl
 800c710:	7c05      	ldrbpl	r5, [r0, #16]
 800c712:	7c45      	ldrbmi	r5, [r0, #17]
 800c714:	6944      	ldr	r4, [r0, #20]
 800c716:	f101 030b 	add.w	r3, r1, #11
 800c71a:	54e5      	strb	r5, [r4, r3]
 800c71c:	06d5      	lsls	r5, r2, #27
 800c71e:	bf54      	ite	pl
 800c720:	7c05      	ldrbpl	r5, [r0, #16]
 800c722:	7c45      	ldrbmi	r5, [r0, #17]
 800c724:	6944      	ldr	r4, [r0, #20]
 800c726:	f101 030c 	add.w	r3, r1, #12
 800c72a:	54e5      	strb	r5, [r4, r3]
 800c72c:	0714      	lsls	r4, r2, #28
 800c72e:	bf54      	ite	pl
 800c730:	7c05      	ldrbpl	r5, [r0, #16]
 800c732:	7c45      	ldrbmi	r5, [r0, #17]
 800c734:	6944      	ldr	r4, [r0, #20]
 800c736:	f101 030d 	add.w	r3, r1, #13
 800c73a:	54e5      	strb	r5, [r4, r3]
 800c73c:	0755      	lsls	r5, r2, #29
 800c73e:	bf54      	ite	pl
 800c740:	7c05      	ldrbpl	r5, [r0, #16]
 800c742:	7c45      	ldrbmi	r5, [r0, #17]
 800c744:	6944      	ldr	r4, [r0, #20]
 800c746:	f101 030e 	add.w	r3, r1, #14
 800c74a:	54e5      	strb	r5, [r4, r3]
 800c74c:	0794      	lsls	r4, r2, #30
 800c74e:	bf58      	it	pl
 800c750:	7c05      	ldrbpl	r5, [r0, #16]
 800c752:	6944      	ldr	r4, [r0, #20]
 800c754:	bf48      	it	mi
 800c756:	7c45      	ldrbmi	r5, [r0, #17]
 800c758:	f101 030f 	add.w	r3, r1, #15
 800c75c:	54e5      	strb	r5, [r4, r3]
 800c75e:	07d2      	lsls	r2, r2, #31
 800c760:	bf4c      	ite	mi
 800c762:	7c44      	ldrbmi	r4, [r0, #17]
 800c764:	7c04      	ldrbpl	r4, [r0, #16]
 800c766:	6942      	ldr	r2, [r0, #20]
 800c768:	f101 0310 	add.w	r3, r1, #16
 800c76c:	e5a5      	b.n	800c2ba <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3b6>
 800c76e:	061d      	lsls	r5, r3, #24
 800c770:	bf54      	ite	pl
 800c772:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c776:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c77a:	6945      	ldr	r5, [r0, #20]
 800c77c:	1c4c      	adds	r4, r1, #1
 800c77e:	f805 e004 	strb.w	lr, [r5, r4]
 800c782:	065d      	lsls	r5, r3, #25
 800c784:	bf54      	ite	pl
 800c786:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c78a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c78e:	6945      	ldr	r5, [r0, #20]
 800c790:	1c8c      	adds	r4, r1, #2
 800c792:	f805 e004 	strb.w	lr, [r5, r4]
 800c796:	069d      	lsls	r5, r3, #26
 800c798:	bf54      	ite	pl
 800c79a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c79e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c7a2:	6945      	ldr	r5, [r0, #20]
 800c7a4:	1ccc      	adds	r4, r1, #3
 800c7a6:	f805 e004 	strb.w	lr, [r5, r4]
 800c7aa:	06dd      	lsls	r5, r3, #27
 800c7ac:	bf54      	ite	pl
 800c7ae:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c7b2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c7b6:	6945      	ldr	r5, [r0, #20]
 800c7b8:	1d0c      	adds	r4, r1, #4
 800c7ba:	f805 e004 	strb.w	lr, [r5, r4]
 800c7be:	071d      	lsls	r5, r3, #28
 800c7c0:	bf54      	ite	pl
 800c7c2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c7c6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c7ca:	6945      	ldr	r5, [r0, #20]
 800c7cc:	1d4c      	adds	r4, r1, #5
 800c7ce:	f805 e004 	strb.w	lr, [r5, r4]
 800c7d2:	075d      	lsls	r5, r3, #29
 800c7d4:	bf54      	ite	pl
 800c7d6:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c7da:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c7de:	6945      	ldr	r5, [r0, #20]
 800c7e0:	1d8c      	adds	r4, r1, #6
 800c7e2:	f805 e004 	strb.w	lr, [r5, r4]
 800c7e6:	079d      	lsls	r5, r3, #30
 800c7e8:	bf58      	it	pl
 800c7ea:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800c7ee:	6945      	ldr	r5, [r0, #20]
 800c7f0:	bf48      	it	mi
 800c7f2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800c7f6:	1dcc      	adds	r4, r1, #7
 800c7f8:	f805 e004 	strb.w	lr, [r5, r4]
 800c7fc:	07db      	lsls	r3, r3, #31
 800c7fe:	bf4c      	ite	mi
 800c800:	7c45      	ldrbmi	r5, [r0, #17]
 800c802:	7c05      	ldrbpl	r5, [r0, #16]
 800c804:	6943      	ldr	r3, [r0, #20]
 800c806:	f101 0408 	add.w	r4, r1, #8
 800c80a:	551d      	strb	r5, [r3, r4]
 800c80c:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c810:	bf0c      	ite	eq
 800c812:	7c05      	ldrbeq	r5, [r0, #16]
 800c814:	7c45      	ldrbne	r5, [r0, #17]
 800c816:	6944      	ldr	r4, [r0, #20]
 800c818:	f101 0309 	add.w	r3, r1, #9
 800c81c:	54e5      	strb	r5, [r4, r3]
 800c81e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800c822:	bf0c      	ite	eq
 800c824:	7c05      	ldrbeq	r5, [r0, #16]
 800c826:	7c45      	ldrbne	r5, [r0, #17]
 800c828:	6944      	ldr	r4, [r0, #20]
 800c82a:	f101 030a 	add.w	r3, r1, #10
 800c82e:	54e5      	strb	r5, [r4, r3]
 800c830:	f01c 0f20 	tst.w	ip, #32
 800c834:	bf0c      	ite	eq
 800c836:	7c05      	ldrbeq	r5, [r0, #16]
 800c838:	7c45      	ldrbne	r5, [r0, #17]
 800c83a:	6944      	ldr	r4, [r0, #20]
 800c83c:	f101 030b 	add.w	r3, r1, #11
 800c840:	54e5      	strb	r5, [r4, r3]
 800c842:	f01c 0f10 	tst.w	ip, #16
 800c846:	bf0c      	ite	eq
 800c848:	7c05      	ldrbeq	r5, [r0, #16]
 800c84a:	7c45      	ldrbne	r5, [r0, #17]
 800c84c:	6944      	ldr	r4, [r0, #20]
 800c84e:	f101 030c 	add.w	r3, r1, #12
 800c852:	54e5      	strb	r5, [r4, r3]
 800c854:	f01c 0f08 	tst.w	ip, #8
 800c858:	bf0c      	ite	eq
 800c85a:	7c05      	ldrbeq	r5, [r0, #16]
 800c85c:	7c45      	ldrbne	r5, [r0, #17]
 800c85e:	6944      	ldr	r4, [r0, #20]
 800c860:	f101 030d 	add.w	r3, r1, #13
 800c864:	54e5      	strb	r5, [r4, r3]
 800c866:	f01c 0f04 	tst.w	ip, #4
 800c86a:	bf0c      	ite	eq
 800c86c:	7c05      	ldrbeq	r5, [r0, #16]
 800c86e:	7c45      	ldrbne	r5, [r0, #17]
 800c870:	6944      	ldr	r4, [r0, #20]
 800c872:	f101 030e 	add.w	r3, r1, #14
 800c876:	54e5      	strb	r5, [r4, r3]
 800c878:	f01c 0f02 	tst.w	ip, #2
 800c87c:	bf0c      	ite	eq
 800c87e:	7c05      	ldrbeq	r5, [r0, #16]
 800c880:	7c45      	ldrbne	r5, [r0, #17]
 800c882:	6944      	ldr	r4, [r0, #20]
 800c884:	f101 030f 	add.w	r3, r1, #15
 800c888:	54e5      	strb	r5, [r4, r3]
 800c88a:	f01c 0f01 	tst.w	ip, #1
 800c88e:	bf14      	ite	ne
 800c890:	7c45      	ldrbne	r5, [r0, #17]
 800c892:	7c05      	ldrbeq	r5, [r0, #16]
 800c894:	6944      	ldr	r4, [r0, #20]
 800c896:	f101 0310 	add.w	r3, r1, #16
 800c89a:	e604      	b.n	800c4a6 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a2>

0800c89c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	6804      	ldr	r4, [r0, #0]
 800c8a0:	f89d c010 	ldrb.w	ip, [sp, #16]
 800c8a4:	2c07      	cmp	r4, #7
 800c8a6:	f89d e014 	ldrb.w	lr, [sp, #20]
 800c8aa:	d000      	beq.n	800c8ae <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x12>
 800c8ac:	bd70      	pop	{r4, r5, r6, pc}
 800c8ae:	061e      	lsls	r6, r3, #24
 800c8b0:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800c8b4:	bf54      	ite	pl
 800c8b6:	7c06      	ldrbpl	r6, [r0, #16]
 800c8b8:	7c46      	ldrbmi	r6, [r0, #17]
 800c8ba:	6945      	ldr	r5, [r0, #20]
 800c8bc:	1c4c      	adds	r4, r1, #1
 800c8be:	552e      	strb	r6, [r5, r4]
 800c8c0:	065d      	lsls	r5, r3, #25
 800c8c2:	bf54      	ite	pl
 800c8c4:	7c06      	ldrbpl	r6, [r0, #16]
 800c8c6:	7c46      	ldrbmi	r6, [r0, #17]
 800c8c8:	6945      	ldr	r5, [r0, #20]
 800c8ca:	1c8c      	adds	r4, r1, #2
 800c8cc:	552e      	strb	r6, [r5, r4]
 800c8ce:	069e      	lsls	r6, r3, #26
 800c8d0:	bf54      	ite	pl
 800c8d2:	7c06      	ldrbpl	r6, [r0, #16]
 800c8d4:	7c46      	ldrbmi	r6, [r0, #17]
 800c8d6:	6945      	ldr	r5, [r0, #20]
 800c8d8:	1ccc      	adds	r4, r1, #3
 800c8da:	552e      	strb	r6, [r5, r4]
 800c8dc:	06dd      	lsls	r5, r3, #27
 800c8de:	bf54      	ite	pl
 800c8e0:	7c06      	ldrbpl	r6, [r0, #16]
 800c8e2:	7c46      	ldrbmi	r6, [r0, #17]
 800c8e4:	6945      	ldr	r5, [r0, #20]
 800c8e6:	1d0c      	adds	r4, r1, #4
 800c8e8:	552e      	strb	r6, [r5, r4]
 800c8ea:	071e      	lsls	r6, r3, #28
 800c8ec:	bf54      	ite	pl
 800c8ee:	7c06      	ldrbpl	r6, [r0, #16]
 800c8f0:	7c46      	ldrbmi	r6, [r0, #17]
 800c8f2:	6945      	ldr	r5, [r0, #20]
 800c8f4:	1d4c      	adds	r4, r1, #5
 800c8f6:	552e      	strb	r6, [r5, r4]
 800c8f8:	075d      	lsls	r5, r3, #29
 800c8fa:	bf54      	ite	pl
 800c8fc:	7c06      	ldrbpl	r6, [r0, #16]
 800c8fe:	7c46      	ldrbmi	r6, [r0, #17]
 800c900:	6945      	ldr	r5, [r0, #20]
 800c902:	1d8c      	adds	r4, r1, #6
 800c904:	552e      	strb	r6, [r5, r4]
 800c906:	079e      	lsls	r6, r3, #30
 800c908:	6945      	ldr	r5, [r0, #20]
 800c90a:	bf54      	ite	pl
 800c90c:	7c06      	ldrbpl	r6, [r0, #16]
 800c90e:	7c46      	ldrbmi	r6, [r0, #17]
 800c910:	1dcc      	adds	r4, r1, #7
 800c912:	552e      	strb	r6, [r5, r4]
 800c914:	07dd      	lsls	r5, r3, #31
 800c916:	bf4c      	ite	mi
 800c918:	7c45      	ldrbmi	r5, [r0, #17]
 800c91a:	7c05      	ldrbpl	r5, [r0, #16]
 800c91c:	6943      	ldr	r3, [r0, #20]
 800c91e:	f101 0408 	add.w	r4, r1, #8
 800c922:	551d      	strb	r5, [r3, r4]
 800c924:	0614      	lsls	r4, r2, #24
 800c926:	bf54      	ite	pl
 800c928:	7c05      	ldrbpl	r5, [r0, #16]
 800c92a:	7c45      	ldrbmi	r5, [r0, #17]
 800c92c:	6944      	ldr	r4, [r0, #20]
 800c92e:	f101 0309 	add.w	r3, r1, #9
 800c932:	54e5      	strb	r5, [r4, r3]
 800c934:	0656      	lsls	r6, r2, #25
 800c936:	bf54      	ite	pl
 800c938:	7c05      	ldrbpl	r5, [r0, #16]
 800c93a:	7c45      	ldrbmi	r5, [r0, #17]
 800c93c:	6944      	ldr	r4, [r0, #20]
 800c93e:	f101 030a 	add.w	r3, r1, #10
 800c942:	54e5      	strb	r5, [r4, r3]
 800c944:	0695      	lsls	r5, r2, #26
 800c946:	bf54      	ite	pl
 800c948:	7c05      	ldrbpl	r5, [r0, #16]
 800c94a:	7c45      	ldrbmi	r5, [r0, #17]
 800c94c:	6944      	ldr	r4, [r0, #20]
 800c94e:	f101 030b 	add.w	r3, r1, #11
 800c952:	54e5      	strb	r5, [r4, r3]
 800c954:	06d4      	lsls	r4, r2, #27
 800c956:	bf54      	ite	pl
 800c958:	7c05      	ldrbpl	r5, [r0, #16]
 800c95a:	7c45      	ldrbmi	r5, [r0, #17]
 800c95c:	6944      	ldr	r4, [r0, #20]
 800c95e:	f101 030c 	add.w	r3, r1, #12
 800c962:	54e5      	strb	r5, [r4, r3]
 800c964:	0716      	lsls	r6, r2, #28
 800c966:	bf54      	ite	pl
 800c968:	7c05      	ldrbpl	r5, [r0, #16]
 800c96a:	7c45      	ldrbmi	r5, [r0, #17]
 800c96c:	6944      	ldr	r4, [r0, #20]
 800c96e:	f101 030d 	add.w	r3, r1, #13
 800c972:	54e5      	strb	r5, [r4, r3]
 800c974:	0755      	lsls	r5, r2, #29
 800c976:	bf54      	ite	pl
 800c978:	7c05      	ldrbpl	r5, [r0, #16]
 800c97a:	7c45      	ldrbmi	r5, [r0, #17]
 800c97c:	6944      	ldr	r4, [r0, #20]
 800c97e:	f101 030e 	add.w	r3, r1, #14
 800c982:	54e5      	strb	r5, [r4, r3]
 800c984:	0794      	lsls	r4, r2, #30
 800c986:	bf58      	it	pl
 800c988:	7c05      	ldrbpl	r5, [r0, #16]
 800c98a:	6944      	ldr	r4, [r0, #20]
 800c98c:	bf48      	it	mi
 800c98e:	7c45      	ldrbmi	r5, [r0, #17]
 800c990:	f101 030f 	add.w	r3, r1, #15
 800c994:	54e5      	strb	r5, [r4, r3]
 800c996:	07d2      	lsls	r2, r2, #31
 800c998:	bf4c      	ite	mi
 800c99a:	7c44      	ldrbmi	r4, [r0, #17]
 800c99c:	7c04      	ldrbpl	r4, [r0, #16]
 800c99e:	6942      	ldr	r2, [r0, #20]
 800c9a0:	f101 0310 	add.w	r3, r1, #16
 800c9a4:	54d4      	strb	r4, [r2, r3]
 800c9a6:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c9aa:	bf0c      	ite	eq
 800c9ac:	7c04      	ldrbeq	r4, [r0, #16]
 800c9ae:	7c44      	ldrbne	r4, [r0, #17]
 800c9b0:	6942      	ldr	r2, [r0, #20]
 800c9b2:	f101 0311 	add.w	r3, r1, #17
 800c9b6:	54d4      	strb	r4, [r2, r3]
 800c9b8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800c9bc:	bf14      	ite	ne
 800c9be:	7c44      	ldrbne	r4, [r0, #17]
 800c9c0:	7c04      	ldrbeq	r4, [r0, #16]
 800c9c2:	6942      	ldr	r2, [r0, #20]
 800c9c4:	f101 0312 	add.w	r3, r1, #18
 800c9c8:	54d4      	strb	r4, [r2, r3]
 800c9ca:	f01c 0f20 	tst.w	ip, #32
 800c9ce:	bf14      	ite	ne
 800c9d0:	7c44      	ldrbne	r4, [r0, #17]
 800c9d2:	7c04      	ldrbeq	r4, [r0, #16]
 800c9d4:	6942      	ldr	r2, [r0, #20]
 800c9d6:	f101 0313 	add.w	r3, r1, #19
 800c9da:	54d4      	strb	r4, [r2, r3]
 800c9dc:	f01c 0f10 	tst.w	ip, #16
 800c9e0:	bf14      	ite	ne
 800c9e2:	7c44      	ldrbne	r4, [r0, #17]
 800c9e4:	7c04      	ldrbeq	r4, [r0, #16]
 800c9e6:	6942      	ldr	r2, [r0, #20]
 800c9e8:	f101 0314 	add.w	r3, r1, #20
 800c9ec:	54d4      	strb	r4, [r2, r3]
 800c9ee:	f01c 0f08 	tst.w	ip, #8
 800c9f2:	bf14      	ite	ne
 800c9f4:	7c44      	ldrbne	r4, [r0, #17]
 800c9f6:	7c04      	ldrbeq	r4, [r0, #16]
 800c9f8:	6942      	ldr	r2, [r0, #20]
 800c9fa:	f101 0315 	add.w	r3, r1, #21
 800c9fe:	54d4      	strb	r4, [r2, r3]
 800ca00:	f01c 0f04 	tst.w	ip, #4
 800ca04:	bf14      	ite	ne
 800ca06:	7c44      	ldrbne	r4, [r0, #17]
 800ca08:	7c04      	ldrbeq	r4, [r0, #16]
 800ca0a:	6942      	ldr	r2, [r0, #20]
 800ca0c:	f101 0316 	add.w	r3, r1, #22
 800ca10:	54d4      	strb	r4, [r2, r3]
 800ca12:	f01c 0f02 	tst.w	ip, #2
 800ca16:	bf14      	ite	ne
 800ca18:	7c44      	ldrbne	r4, [r0, #17]
 800ca1a:	7c04      	ldrbeq	r4, [r0, #16]
 800ca1c:	6942      	ldr	r2, [r0, #20]
 800ca1e:	f101 0317 	add.w	r3, r1, #23
 800ca22:	54d4      	strb	r4, [r2, r3]
 800ca24:	f01c 0f01 	tst.w	ip, #1
 800ca28:	bf14      	ite	ne
 800ca2a:	7c44      	ldrbne	r4, [r0, #17]
 800ca2c:	7c04      	ldrbeq	r4, [r0, #16]
 800ca2e:	6942      	ldr	r2, [r0, #20]
 800ca30:	f101 0318 	add.w	r3, r1, #24
 800ca34:	54d4      	strb	r4, [r2, r3]
 800ca36:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800ca3a:	bf0c      	ite	eq
 800ca3c:	7c04      	ldrbeq	r4, [r0, #16]
 800ca3e:	7c44      	ldrbne	r4, [r0, #17]
 800ca40:	6942      	ldr	r2, [r0, #20]
 800ca42:	f101 0319 	add.w	r3, r1, #25
 800ca46:	54d4      	strb	r4, [r2, r3]
 800ca48:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800ca4c:	bf0c      	ite	eq
 800ca4e:	7c04      	ldrbeq	r4, [r0, #16]
 800ca50:	7c44      	ldrbne	r4, [r0, #17]
 800ca52:	6942      	ldr	r2, [r0, #20]
 800ca54:	f101 031a 	add.w	r3, r1, #26
 800ca58:	54d4      	strb	r4, [r2, r3]
 800ca5a:	f01e 0f20 	tst.w	lr, #32
 800ca5e:	bf0c      	ite	eq
 800ca60:	7c04      	ldrbeq	r4, [r0, #16]
 800ca62:	7c44      	ldrbne	r4, [r0, #17]
 800ca64:	6942      	ldr	r2, [r0, #20]
 800ca66:	f101 031b 	add.w	r3, r1, #27
 800ca6a:	54d4      	strb	r4, [r2, r3]
 800ca6c:	f01e 0f10 	tst.w	lr, #16
 800ca70:	bf0c      	ite	eq
 800ca72:	7c04      	ldrbeq	r4, [r0, #16]
 800ca74:	7c44      	ldrbne	r4, [r0, #17]
 800ca76:	6942      	ldr	r2, [r0, #20]
 800ca78:	f101 031c 	add.w	r3, r1, #28
 800ca7c:	54d4      	strb	r4, [r2, r3]
 800ca7e:	f01e 0f08 	tst.w	lr, #8
 800ca82:	bf0c      	ite	eq
 800ca84:	7c04      	ldrbeq	r4, [r0, #16]
 800ca86:	7c44      	ldrbne	r4, [r0, #17]
 800ca88:	6942      	ldr	r2, [r0, #20]
 800ca8a:	f101 031d 	add.w	r3, r1, #29
 800ca8e:	54d4      	strb	r4, [r2, r3]
 800ca90:	f01e 0f04 	tst.w	lr, #4
 800ca94:	bf0c      	ite	eq
 800ca96:	7c04      	ldrbeq	r4, [r0, #16]
 800ca98:	7c44      	ldrbne	r4, [r0, #17]
 800ca9a:	6942      	ldr	r2, [r0, #20]
 800ca9c:	f101 031e 	add.w	r3, r1, #30
 800caa0:	54d4      	strb	r4, [r2, r3]
 800caa2:	f01e 0f02 	tst.w	lr, #2
 800caa6:	6942      	ldr	r2, [r0, #20]
 800caa8:	bf0c      	ite	eq
 800caaa:	7c04      	ldrbeq	r4, [r0, #16]
 800caac:	7c44      	ldrbne	r4, [r0, #17]
 800caae:	f101 031f 	add.w	r3, r1, #31
 800cab2:	54d4      	strb	r4, [r2, r3]
 800cab4:	f01e 0f01 	tst.w	lr, #1
 800cab8:	bf14      	ite	ne
 800caba:	7c42      	ldrbne	r2, [r0, #17]
 800cabc:	7c02      	ldrbeq	r2, [r0, #16]
 800cabe:	6943      	ldr	r3, [r0, #20]
 800cac0:	3120      	adds	r1, #32
 800cac2:	545a      	strb	r2, [r3, r1]
 800cac4:	bd70      	pop	{r4, r5, r6, pc}
 800cac6:	bf00      	nop

0800cac8 <WS28xx::~WS28xx()>:
 800cac8:	2200      	movs	r2, #0
 800caca:	4b01      	ldr	r3, [pc, #4]	; (800cad0 <WS28xx::~WS28xx()+0x8>)
 800cacc:	601a      	str	r2, [r3, #0]
 800cace:	4770      	bx	lr
 800cad0:	20001944 	andcs	r1, r0, r4, asr #18

0800cad4 <WS28xx::SetupBuffers()>:
 800cad4:	b513      	push	{r0, r1, r4, lr}
 800cad6:	4604      	mov	r4, r0
 800cad8:	a801      	add	r0, sp, #4
 800cada:	f006 fc3f 	bl	801335c <gd32_spi_dma_tx_prepare(unsigned int*)>
 800cade:	9b01      	ldr	r3, [sp, #4]
 800cae0:	4a07      	ldr	r2, [pc, #28]	; (800cb00 <WS28xx::SetupBuffers()+0x2c>)
 800cae2:	085b      	lsrs	r3, r3, #1
 800cae4:	f023 0303 	bic.w	r3, r3, #3
 800cae8:	6160      	str	r0, [r4, #20]
 800caea:	4418      	add	r0, r3
 800caec:	68e3      	ldr	r3, [r4, #12]
 800caee:	61a0      	str	r0, [r4, #24]
 800caf0:	6013      	str	r3, [r2, #0]
 800caf2:	3303      	adds	r3, #3
 800caf4:	f023 0303 	bic.w	r3, r3, #3
 800caf8:	60e3      	str	r3, [r4, #12]
 800cafa:	b002      	add	sp, #8
 800cafc:	bd10      	pop	{r4, pc}
 800cafe:	bf00      	nop
 800cb00:	20001940 	andcs	r1, r0, r0, asr #18

0800cb04 <WS28xx::WS28xx(PixelConfiguration&)>:
 800cb04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb06:	23aa      	movs	r3, #170	; 0xaa
 800cb08:	2203      	movs	r2, #3
 800cb0a:	e9c0 2300 	strd	r2, r3, [r0]
 800cb0e:	2306      	movs	r3, #6
 800cb10:	6083      	str	r3, [r0, #8]
 800cb12:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800cb16:	8243      	strh	r3, [r0, #18]
 800cb18:	2300      	movs	r3, #0
 800cb1a:	460d      	mov	r5, r1
 800cb1c:	4604      	mov	r4, r0
 800cb1e:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800cb22:	4b17      	ldr	r3, [pc, #92]	; (800cb80 <WS28xx::WS28xx(PixelConfiguration&)+0x7c>)
 800cb24:	a901      	add	r1, sp, #4
 800cb26:	6018      	str	r0, [r3, #0]
 800cb28:	4628      	mov	r0, r5
 800cb2a:	f7fe fdd9 	bl	800b6e0 <PixelConfiguration::Validate(unsigned int&)>
 800cb2e:	4628      	mov	r0, r5
 800cb30:	f7fe fe42 	bl	800b7b8 <PixelConfiguration::Dump()>
 800cb34:	68ab      	ldr	r3, [r5, #8]
 800cb36:	686a      	ldr	r2, [r5, #4]
 800cb38:	60a3      	str	r3, [r4, #8]
 800cb3a:	8a2b      	ldrh	r3, [r5, #16]
 800cb3c:	6829      	ldr	r1, [r5, #0]
 800cb3e:	8223      	strh	r3, [r4, #16]
 800cb40:	7cab      	ldrb	r3, [r5, #18]
 800cb42:	7ce8      	ldrb	r0, [r5, #19]
 800cb44:	74e3      	strb	r3, [r4, #19]
 800cb46:	9b01      	ldr	r3, [sp, #4]
 800cb48:	6021      	str	r1, [r4, #0]
 800cb4a:	4353      	muls	r3, r2
 800cb4c:	6062      	str	r2, [r4, #4]
 800cb4e:	74a0      	strb	r0, [r4, #18]
 800cb50:	b998      	cbnz	r0, 800cb7a <WS28xx::WS28xx(PixelConfiguration&)+0x76>
 800cb52:	390b      	subs	r1, #11
 800cb54:	2902      	cmp	r1, #2
 800cb56:	60e3      	str	r3, [r4, #12]
 800cb58:	bf9e      	ittt	ls
 800cb5a:	68e3      	ldrls	r3, [r4, #12]
 800cb5c:	3208      	addls	r2, #8
 800cb5e:	189b      	addls	r3, r3, r2
 800cb60:	4620      	mov	r0, r4
 800cb62:	bf98      	it	ls
 800cb64:	60e3      	strls	r3, [r4, #12]
 800cb66:	f7ff ffb5 	bl	800cad4 <WS28xx::SetupBuffers()>
 800cb6a:	f006 fb6d 	bl	8013248 <gd32_spi_dma_begin()>
 800cb6e:	68e8      	ldr	r0, [r5, #12]
 800cb70:	f006 fbe0 	bl	8013334 <gd32_spi_dma_set_speed_hz(unsigned int)>
 800cb74:	4620      	mov	r0, r4
 800cb76:	b003      	add	sp, #12
 800cb78:	bd30      	pop	{r4, r5, pc}
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	e7e8      	b.n	800cb52 <WS28xx::WS28xx(PixelConfiguration&)+0x4e>
 800cb80:	20001944 	andcs	r1, r0, r4, asr #18

0800cb84 <WS28xx::Update()>:
 800cb84:	2200      	movs	r2, #0
 800cb86:	b430      	push	{r4, r5}
 800cb88:	4b0b      	ldr	r3, [pc, #44]	; (800cbb8 <WS28xx::Update()+0x34>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68c1      	ldr	r1, [r0, #12]
 800cb8e:	6944      	ldr	r4, [r0, #20]
 800cb90:	4299      	cmp	r1, r3
 800cb92:	d807      	bhi.n	800cba4 <WS28xx::Update()+0x20>
 800cb94:	2300      	movs	r3, #0
 800cb96:	6980      	ldr	r0, [r0, #24]
 800cb98:	084d      	lsrs	r5, r1, #1
 800cb9a:	42ab      	cmp	r3, r5
 800cb9c:	d105      	bne.n	800cbaa <WS28xx::Update()+0x26>
 800cb9e:	bc30      	pop	{r4, r5}
 800cba0:	f006 bbe4 	b.w	801336c <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 800cba4:	54e2      	strb	r2, [r4, r3]
 800cba6:	3301      	adds	r3, #1
 800cba8:	e7f0      	b.n	800cb8c <WS28xx::Update()+0x8>
 800cbaa:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800cbae:	ba52      	rev16	r2, r2
 800cbb0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	e7f0      	b.n	800cb9a <WS28xx::Update()+0x16>
 800cbb8:	20001940 	andcs	r1, r0, r0, asr #18

0800cbbc <WS28xx::Blackout()>:
 800cbbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbbe:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	6143      	str	r3, [r0, #20]
 800cbc6:	f3bf 8f6f 	isb	sy
 800cbca:	f006 fbe9 	bl	80133a0 <gd32_spi_dma_tx_is_active()>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	d1f9      	bne.n	800cbc6 <WS28xx::Blackout()+0xa>
 800cbd2:	6822      	ldr	r2, [r4, #0]
 800cbd4:	6963      	ldr	r3, [r4, #20]
 800cbd6:	3a0b      	subs	r2, #11
 800cbd8:	2a02      	cmp	r2, #2
 800cbda:	7018      	strb	r0, [r3, #0]
 800cbdc:	d82a      	bhi.n	800cc34 <WS28xx::Blackout()+0x78>
 800cbde:	4605      	mov	r5, r0
 800cbe0:	4607      	mov	r7, r0
 800cbe2:	7058      	strb	r0, [r3, #1]
 800cbe4:	7098      	strb	r0, [r3, #2]
 800cbe6:	70d8      	strb	r0, [r3, #3]
 800cbe8:	6863      	ldr	r3, [r4, #4]
 800cbea:	42ab      	cmp	r3, r5
 800cbec:	d819      	bhi.n	800cc22 <WS28xx::Blackout()+0x66>
 800cbee:	6821      	ldr	r1, [r4, #0]
 800cbf0:	68e2      	ldr	r2, [r4, #12]
 800cbf2:	390b      	subs	r1, #11
 800cbf4:	2901      	cmp	r1, #1
 800cbf6:	bf94      	ite	ls
 800cbf8:	21ff      	movls	r1, #255	; 0xff
 800cbfa:	2100      	movhi	r1, #0
 800cbfc:	6960      	ldr	r0, [r4, #20]
 800cbfe:	3a04      	subs	r2, #4
 800cc00:	1883      	adds	r3, r0, r2
 800cc02:	5481      	strb	r1, [r0, r2]
 800cc04:	7059      	strb	r1, [r3, #1]
 800cc06:	7099      	strb	r1, [r3, #2]
 800cc08:	70d9      	strb	r1, [r3, #3]
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f7ff ffba 	bl	800cb84 <WS28xx::Update()>
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f006 fbc4 	bl	80133a0 <gd32_spi_dma_tx_is_active()>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d1f9      	bne.n	800cc10 <WS28xx::Blackout()+0x54>
 800cc1c:	6166      	str	r6, [r4, #20]
 800cc1e:	b003      	add	sp, #12
 800cc20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc22:	2300      	movs	r3, #0
 800cc24:	4629      	mov	r1, r5
 800cc26:	461a      	mov	r2, r3
 800cc28:	4620      	mov	r0, r4
 800cc2a:	9700      	str	r7, [sp, #0]
 800cc2c:	f7ff f96a 	bl	800bf04 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800cc30:	3501      	adds	r5, #1
 800cc32:	e7d9      	b.n	800cbe8 <WS28xx::Blackout()+0x2c>
 800cc34:	6963      	ldr	r3, [r4, #20]
 800cc36:	6821      	ldr	r1, [r4, #0]
 800cc38:	1c5a      	adds	r2, r3, #1
 800cc3a:	b101      	cbz	r1, 800cc3e <WS28xx::Blackout()+0x82>
 800cc3c:	7c21      	ldrb	r1, [r4, #16]
 800cc3e:	68e0      	ldr	r0, [r4, #12]
 800cc40:	3001      	adds	r0, #1
 800cc42:	4403      	add	r3, r0
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d0e0      	beq.n	800cc0a <WS28xx::Blackout()+0x4e>
 800cc48:	f802 1b01 	strb.w	r1, [r2], #1
 800cc4c:	e7fa      	b.n	800cc44 <WS28xx::Blackout()+0x88>
	...

0800cc50 <RemoteConfig::HandleList()>:
 800cc50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc54:	6801      	ldr	r1, [r0, #0]
 800cc56:	4604      	mov	r4, r0
 800cc58:	2012      	movs	r0, #18
 800cc5a:	f04f 080c 	mov.w	r8, #12
 800cc5e:	4a2b      	ldr	r2, [pc, #172]	; (800cd0c <RemoteConfig::HandleList()+0xbc>)
 800cc60:	4b2b      	ldr	r3, [pc, #172]	; (800cd10 <RemoteConfig::HandleList()+0xc0>)
 800cc62:	fb00 2201 	mla	r2, r0, r1, r2
 800cc66:	6860      	ldr	r0, [r4, #4]
 800cc68:	492a      	ldr	r1, [pc, #168]	; (800cd14 <RemoteConfig::HandleList()+0xc4>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	fb08 1100 	mla	r1, r8, r0, r1
 800cc70:	4e29      	ldr	r6, [pc, #164]	; (800cd18 <RemoteConfig::HandleList()+0xc8>)
 800cc72:	482a      	ldr	r0, [pc, #168]	; (800cd1c <RemoteConfig::HandleList()+0xcc>)
 800cc74:	691f      	ldr	r7, [r3, #16]
 800cc76:	6835      	ldr	r5, [r6, #0]
 800cc78:	f890 9009 	ldrb.w	r9, [r0, #9]
 800cc7c:	b2fb      	uxtb	r3, r7
 800cc7e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 800cc82:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800cc86:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800cc8a:	b089      	sub	sp, #36	; 0x24
 800cc8c:	3507      	adds	r5, #7
 800cc8e:	0e3f      	lsrs	r7, r7, #24
 800cc90:	f1b9 0f00 	cmp.w	r9, #0
 800cc94:	d020      	beq.n	800ccd8 <RemoteConfig::HandleList()+0x88>
 800cc96:	3009      	adds	r0, #9
 800cc98:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800cc9c:	e9cd 8005 	strd	r8, r0, [sp, #20]
 800cca0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800cca4:	4628      	mov	r0, r5
 800cca6:	e9cd e701 	strd	lr, r7, [sp, #4]
 800ccaa:	4a1d      	ldr	r2, [pc, #116]	; (800cd20 <RemoteConfig::HandleList()+0xd0>)
 800ccac:	f8cd c000 	str.w	ip, [sp]
 800ccb0:	f7fc fae4 	bl	800927c <snprintf>
 800ccb4:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800ccb8:	2b05      	cmp	r3, #5
 800ccba:	d11a      	bne.n	800ccf2 <RemoteConfig::HandleList()+0xa2>
 800ccbc:	f642 1305 	movw	r3, #10501	; 0x2905
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ccc6:	b282      	uxth	r2, r0
 800ccc8:	4629      	mov	r1, r5
 800ccca:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ccce:	f002 fa29 	bl	800f124 <udp_send>
 800ccd2:	b009      	add	sp, #36	; 0x24
 800ccd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccd8:	e9cd 1804 	strd	r1, r8, [sp, #16]
 800ccdc:	e9cd 7202 	strd	r7, r2, [sp, #8]
 800cce0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800cce4:	4628      	mov	r0, r5
 800cce6:	e9cd ce00 	strd	ip, lr, [sp]
 800ccea:	4a0e      	ldr	r2, [pc, #56]	; (800cd24 <RemoteConfig::HandleList()+0xd4>)
 800ccec:	f7fc fac6 	bl	800927c <snprintf>
 800ccf0:	e7e0      	b.n	800ccb4 <RemoteConfig::HandleList()+0x64>
 800ccf2:	2b06      	cmp	r3, #6
 800ccf4:	d1ed      	bne.n	800ccd2 <RemoteConfig::HandleList()+0x82>
 800ccf6:	6833      	ldr	r3, [r6, #0]
 800ccf8:	799b      	ldrb	r3, [r3, #6]
 800ccfa:	2b2a      	cmp	r3, #42	; 0x2a
 800ccfc:	d1e9      	bne.n	800ccd2 <RemoteConfig::HandleList()+0x82>
 800ccfe:	f642 1305 	movw	r3, #10501	; 0x2905
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd08:	e7dd      	b.n	800ccc6 <RemoteConfig::HandleList()+0x76>
 800cd0a:	bf00      	nop
 800cd0c:	08014916 	stmdaeq	r1, {r1, r2, r4, r8, fp, lr}
 800cd10:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800cd14:	080149b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, fp, lr}
 800cd18:	20001948 	andcs	r1, r0, r8, asr #18
 800cd1c:	2000194c 	andcs	r1, r0, ip, asr #18
 800cd20:	08014850 	stmdaeq	r1, {r4, r6, fp, lr}
 800cd24:	08014869 	stmdaeq	r1, {r0, r3, r5, r6, fp, lr}

0800cd28 <RemoteConfig::HandleDisplayGet()>:
 800cd28:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800cd2c:	2b08      	cmp	r3, #8
 800cd2e:	d11d      	bne.n	800cd6c <RemoteConfig::HandleDisplayGet()+0x44>
 800cd30:	4b0f      	ldr	r3, [pc, #60]	; (800cd70 <RemoteConfig::HandleDisplayGet()+0x48>)
 800cd32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4d0f      	ldr	r5, [pc, #60]	; (800cd74 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800cd38:	7c19      	ldrb	r1, [r3, #16]
 800cd3a:	4a0f      	ldr	r2, [pc, #60]	; (800cd78 <RemoteConfig::HandleDisplayGet()+0x50>)
 800cd3c:	4b0f      	ldr	r3, [pc, #60]	; (800cd7c <RemoteConfig::HandleDisplayGet()+0x54>)
 800cd3e:	4604      	mov	r4, r0
 800cd40:	2900      	cmp	r1, #0
 800cd42:	bf18      	it	ne
 800cd44:	4613      	movne	r3, r2
 800cd46:	6828      	ldr	r0, [r5, #0]
 800cd48:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800cd4c:	4a0c      	ldr	r2, [pc, #48]	; (800cd80 <RemoteConfig::HandleDisplayGet()+0x58>)
 800cd4e:	f7fc fa95 	bl	800927c <snprintf>
 800cd52:	f642 1305 	movw	r3, #10501	; 0x2905
 800cd56:	9300      	str	r3, [sp, #0]
 800cd58:	b282      	uxth	r2, r0
 800cd5a:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800cd5e:	6829      	ldr	r1, [r5, #0]
 800cd60:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800cd64:	f002 f9de 	bl	800f124 <udp_send>
 800cd68:	b003      	add	sp, #12
 800cd6a:	bd30      	pop	{r4, r5, pc}
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop
 800cd70:	2000a8c4 	andcs	sl, r0, r4, asr #17
 800cd74:	20001948 	andcs	r1, r0, r8, asr #18
 800cd78:	08014882 	stmdaeq	r1, {r1, r7, fp, lr}
 800cd7c:	0801487f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, fp, lr}
 800cd80:	08014886 	stmdaeq	r1, {r1, r2, r7, fp, lr}

0800cd84 <RemoteConfig::HandleTftpSet()>:
 800cd84:	f8d0 25e4 	ldr.w	r2, [r0, #1508]	; 0x5e4
 800cd88:	2a06      	cmp	r2, #6
 800cd8a:	d109      	bne.n	800cda0 <RemoteConfig::HandleTftpSet()+0x1c>
 800cd8c:	4a05      	ldr	r2, [pc, #20]	; (800cda4 <RemoteConfig::HandleTftpSet()+0x20>)
 800cd8e:	6812      	ldr	r2, [r2, #0]
 800cd90:	7992      	ldrb	r2, [r2, #6]
 800cd92:	3a30      	subs	r2, #48	; 0x30
 800cd94:	bf18      	it	ne
 800cd96:	2201      	movne	r2, #1
 800cd98:	f880 25ec 	strb.w	r2, [r0, #1516]	; 0x5ec
 800cd9c:	f000 bd70 	b.w	800d880 <RemoteConfig::PlatformHandleTftpSet()>
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	20001948 	andcs	r1, r0, r8, asr #18

0800cda8 <RemoteConfig::HandleTftpGet()>:
 800cda8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdaa:	4604      	mov	r4, r0
 800cdac:	f000 fd70 	bl	800d890 <RemoteConfig::PlatformHandleTftpGet()>
 800cdb0:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800cdb4:	2b05      	cmp	r3, #5
 800cdb6:	d118      	bne.n	800cdea <RemoteConfig::HandleTftpGet()+0x42>
 800cdb8:	f894 15ec 	ldrb.w	r1, [r4, #1516]	; 0x5ec
 800cdbc:	4d0c      	ldr	r5, [pc, #48]	; (800cdf0 <RemoteConfig::HandleTftpGet()+0x48>)
 800cdbe:	4a0d      	ldr	r2, [pc, #52]	; (800cdf4 <RemoteConfig::HandleTftpGet()+0x4c>)
 800cdc0:	4b0d      	ldr	r3, [pc, #52]	; (800cdf8 <RemoteConfig::HandleTftpGet()+0x50>)
 800cdc2:	6828      	ldr	r0, [r5, #0]
 800cdc4:	2900      	cmp	r1, #0
 800cdc6:	bf08      	it	eq
 800cdc8:	4613      	moveq	r3, r2
 800cdca:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800cdce:	4a0b      	ldr	r2, [pc, #44]	; (800cdfc <RemoteConfig::HandleTftpGet()+0x54>)
 800cdd0:	f7fc fa54 	bl	800927c <snprintf>
 800cdd4:	f642 1305 	movw	r3, #10501	; 0x2905
 800cdd8:	b282      	uxth	r2, r0
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	6829      	ldr	r1, [r5, #0]
 800cdde:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800cde2:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800cde6:	f002 f99d 	bl	800f124 <udp_send>
 800cdea:	b003      	add	sp, #12
 800cdec:	bd30      	pop	{r4, r5, pc}
 800cdee:	bf00      	nop
 800cdf0:	20001948 	andcs	r1, r0, r8, asr #18
 800cdf4:	08014882 	stmdaeq	r1, {r1, r7, fp, lr}
 800cdf8:	0801487f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, fp, lr}
 800cdfc:	08014892 	stmdaeq	r1, {r1, r4, r7, fp, lr}

0800ce00 <RemoteConfig::HandleVersion()>:
 800ce00:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800ce04:	2b08      	cmp	r3, #8
 800ce06:	d116      	bne.n	800ce36 <RemoteConfig::HandleVersion()+0x36>
 800ce08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce0a:	4d0b      	ldr	r5, [pc, #44]	; (800ce38 <RemoteConfig::HandleVersion()+0x38>)
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ce12:	4b0a      	ldr	r3, [pc, #40]	; (800ce3c <RemoteConfig::HandleVersion()+0x3c>)
 800ce14:	4a0a      	ldr	r2, [pc, #40]	; (800ce40 <RemoteConfig::HandleVersion()+0x40>)
 800ce16:	6828      	ldr	r0, [r5, #0]
 800ce18:	f7fc fa30 	bl	800927c <snprintf>
 800ce1c:	f642 1305 	movw	r3, #10501	; 0x2905
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	b282      	uxth	r2, r0
 800ce24:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ce28:	6829      	ldr	r1, [r5, #0]
 800ce2a:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ce2e:	f002 f979 	bl	800f124 <udp_send>
 800ce32:	b003      	add	sp, #12
 800ce34:	bd30      	pop	{r4, r5, pc}
 800ce36:	4770      	bx	lr
 800ce38:	20001948 	andcs	r1, r0, r8, asr #18
 800ce3c:	2000a96a 	andcs	sl, r0, sl, ror #18
 800ce40:	0801489b 	stmdaeq	r1, {r0, r1, r3, r4, r7, fp, lr}

0800ce44 <RemoteConfig::HandleUptime()>:
 800ce44:	f890 35d7 	ldrb.w	r3, [r0, #1495]	; 0x5d7
 800ce48:	b1fb      	cbz	r3, 800ce8a <RemoteConfig::HandleUptime()+0x46>
 800ce4a:	4b10      	ldr	r3, [pc, #64]	; (800ce8c <RemoteConfig::HandleUptime()+0x48>)
 800ce4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800ce54:	4604      	mov	r4, r0
 800ce56:	2b07      	cmp	r3, #7
 800ce58:	d115      	bne.n	800ce86 <RemoteConfig::HandleUptime()+0x42>
 800ce5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ce5e:	4d0c      	ldr	r5, [pc, #48]	; (800ce90 <RemoteConfig::HandleUptime()+0x4c>)
 800ce60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce64:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800ce68:	4a0a      	ldr	r2, [pc, #40]	; (800ce94 <RemoteConfig::HandleUptime()+0x50>)
 800ce6a:	6828      	ldr	r0, [r5, #0]
 800ce6c:	f7fc fa06 	bl	800927c <snprintf>
 800ce70:	f642 1305 	movw	r3, #10501	; 0x2905
 800ce74:	9300      	str	r3, [sp, #0]
 800ce76:	b282      	uxth	r2, r0
 800ce78:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800ce7c:	6829      	ldr	r1, [r5, #0]
 800ce7e:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800ce82:	f002 f94f 	bl	800f124 <udp_send>
 800ce86:	b003      	add	sp, #12
 800ce88:	bd30      	pop	{r4, r5, pc}
 800ce8a:	4770      	bx	lr
 800ce8c:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800ce90:	20001948 	andcs	r1, r0, r8, asr #18
 800ce94:	080148a6 	stmdaeq	r1, {r1, r2, r5, r7, fp, lr}

0800ce98 <RemoteConfig::HandleDisplaySet()>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800ce9e:	2b09      	cmp	r3, #9
 800cea0:	d113      	bne.n	800ceca <RemoteConfig::HandleDisplaySet()+0x32>
 800cea2:	4b0a      	ldr	r3, [pc, #40]	; (800cecc <RemoteConfig::HandleDisplaySet()+0x34>)
 800cea4:	681c      	ldr	r4, [r3, #0]
 800cea6:	4b0a      	ldr	r3, [pc, #40]	; (800ced0 <RemoteConfig::HandleDisplaySet()+0x38>)
 800cea8:	69a0      	ldr	r0, [r4, #24]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	7a5d      	ldrb	r5, [r3, #9]
 800ceae:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800ceb2:	4259      	negs	r1, r3
 800ceb4:	4159      	adcs	r1, r3
 800ceb6:	b140      	cbz	r0, 800ceca <RemoteConfig::HandleDisplaySet()+0x32>
 800ceb8:	6803      	ldr	r3, [r0, #0]
 800ceba:	7421      	strb	r1, [r4, #16]
 800cebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cebe:	4798      	blx	r3
 800cec0:	2d30      	cmp	r5, #48	; 0x30
 800cec2:	bf1e      	ittt	ne
 800cec4:	4b03      	ldrne	r3, [pc, #12]	; (800ced4 <RemoteConfig::HandleDisplaySet()+0x3c>)
 800cec6:	681b      	ldrne	r3, [r3, #0]
 800cec8:	6063      	strne	r3, [r4, #4]
 800ceca:	bd38      	pop	{r3, r4, r5, pc}
 800cecc:	2000a8c4 	andcs	sl, r0, r4, asr #17
 800ced0:	20001948 	andcs	r1, r0, r8, asr #18
 800ced4:	2000a9cc 	andcs	sl, r0, ip, asr #19

0800ced8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800ced8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	f100 0a0c 	add.w	sl, r0, #12
 800cee0:	4604      	mov	r4, r0
 800cee2:	e9c0 1200 	strd	r1, r2, [r0]
 800cee6:	6083      	str	r3, [r0, #8]
 800cee8:	4650      	mov	r0, sl
 800ceea:	4690      	mov	r8, r2
 800ceec:	4689      	mov	r9, r1
 800ceee:	461f      	mov	r7, r3
 800cef0:	f000 fd0e 	bl	800d910 <HttpDaemon::HttpDaemon()>
 800cef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cef8:	2500      	movs	r5, #0
 800cefa:	4e16      	ldr	r6, [pc, #88]	; (800cf54 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x7c>)
 800cefc:	f8df b058 	ldr.w	fp, [pc, #88]	; 800cf58 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x80>
 800cf00:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800cf04:	4b15      	ldr	r3, [pc, #84]	; (800cf5c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x84>)
 800cf06:	4631      	mov	r1, r6
 800cf08:	f8db 0000 	ldr.w	r0, [fp]
 800cf0c:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 800cf10:	f8a4 55d8 	strh.w	r5, [r4, #1496]	; 0x5d8
 800cf14:	f8c4 55e0 	str.w	r5, [r4, #1504]	; 0x5e0
 800cf18:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
 800cf1c:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
 800cf20:	f884 55ec 	strb.w	r5, [r4, #1516]	; 0x5ec
 800cf24:	601c      	str	r4, [r3, #0]
 800cf26:	f002 fdc9 	bl	800fabc <Network::MacAddressCopyTo(unsigned char*)>
 800cf2a:	f642 1105 	movw	r1, #10501	; 0x2905
 800cf2e:	f8db 0000 	ldr.w	r0, [fp]
 800cf32:	f886 9006 	strb.w	r9, [r6, #6]
 800cf36:	f886 8007 	strb.w	r8, [r6, #7]
 800cf3a:	7237      	strb	r7, [r6, #8]
 800cf3c:	7275      	strb	r5, [r6, #9]
 800cf3e:	f002 fdb7 	bl	800fab0 <Network::Begin(unsigned short)>
 800cf42:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800cf46:	4650      	mov	r0, sl
 800cf48:	f000 fcfa 	bl	800d940 <HttpDaemon::Start()>
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf52:	bf00      	nop
 800cf54:	2000194c 	andcs	r1, r0, ip, asr #18
 800cf58:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800cf5c:	20001970 	andcs	r1, r0, r0, ror r9

0800cf60 <RemoteConfig::GetStringNode() const>:
 800cf60:	2012      	movs	r0, #18
 800cf62:	4b03      	ldr	r3, [pc, #12]	; (800cf70 <RemoteConfig::GetStringNode() const+0x10>)
 800cf64:	799a      	ldrb	r2, [r3, #6]
 800cf66:	4b03      	ldr	r3, [pc, #12]	; (800cf74 <RemoteConfig::GetStringNode() const+0x14>)
 800cf68:	fb00 3002 	mla	r0, r0, r2, r3
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop
 800cf70:	2000194c 	andcs	r1, r0, ip, asr #18
 800cf74:	08014916 	stmdaeq	r1, {r1, r2, r4, r8, fp, lr}

0800cf78 <RemoteConfig::GetStringOutput() const>:
 800cf78:	200c      	movs	r0, #12
 800cf7a:	4b03      	ldr	r3, [pc, #12]	; (800cf88 <RemoteConfig::GetStringOutput() const+0x10>)
 800cf7c:	79da      	ldrb	r2, [r3, #7]
 800cf7e:	4b03      	ldr	r3, [pc, #12]	; (800cf8c <RemoteConfig::GetStringOutput() const+0x14>)
 800cf80:	fb00 3002 	mla	r0, r0, r2, r3
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	2000194c 	andcs	r1, r0, ip, asr #18
 800cf8c:	080149b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, fp, lr}

0800cf90 <RemoteConfig::SetDisable(bool)>:
 800cf90:	b538      	push	{r3, r4, r5, lr}
 800cf92:	4604      	mov	r4, r0
 800cf94:	f890 35d4 	ldrb.w	r3, [r0, #1492]	; 0x5d4
 800cf98:	b171      	cbz	r1, 800cfb8 <RemoteConfig::SetDisable(bool)+0x28>
 800cf9a:	b963      	cbnz	r3, 800cfb6 <RemoteConfig::SetDisable(bool)+0x26>
 800cf9c:	4b0d      	ldr	r3, [pc, #52]	; (800cfd4 <RemoteConfig::SetDisable(bool)+0x44>)
 800cf9e:	f642 1105 	movw	r1, #10501	; 0x2905
 800cfa2:	6818      	ldr	r0, [r3, #0]
 800cfa4:	f002 fd87 	bl	800fab6 <Network::End(unsigned short)>
 800cfa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfac:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	f884 35d4 	strb.w	r3, [r4, #1492]	; 0x5d4
 800cfb6:	bd38      	pop	{r3, r4, r5, pc}
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d0fc      	beq.n	800cfb6 <RemoteConfig::SetDisable(bool)+0x26>
 800cfbc:	4b05      	ldr	r3, [pc, #20]	; (800cfd4 <RemoteConfig::SetDisable(bool)+0x44>)
 800cfbe:	460d      	mov	r5, r1
 800cfc0:	6818      	ldr	r0, [r3, #0]
 800cfc2:	f642 1105 	movw	r1, #10501	; 0x2905
 800cfc6:	f002 fd73 	bl	800fab0 <Network::Begin(unsigned short)>
 800cfca:	f884 55d4 	strb.w	r5, [r4, #1492]	; 0x5d4
 800cfce:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800cfd2:	e7f0      	b.n	800cfb6 <RemoteConfig::SetDisable(bool)+0x26>
 800cfd4:	2000a28c 	andcs	sl, r0, ip, lsl #5

0800cfd8 <RemoteConfig::SetDisplayName(char const*)>:
 800cfd8:	2217      	movs	r2, #23
 800cfda:	4809      	ldr	r0, [pc, #36]	; (800d000 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800cfdc:	b508      	push	{r3, lr}
 800cfde:	1e4b      	subs	r3, r1, #1
 800cfe0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800cfe4:	b911      	cbnz	r1, 800cfec <RemoteConfig::SetDisplayName(char const*)+0x14>
 800cfe6:	f005 f8b7 	bl	8012158 <memset>
 800cfea:	e003      	b.n	800cff4 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800cfec:	3a01      	subs	r2, #1
 800cfee:	f800 1b01 	strb.w	r1, [r0], #1
 800cff2:	d1f5      	bne.n	800cfe0 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800cff4:	2200      	movs	r2, #0
 800cff6:	4b03      	ldr	r3, [pc, #12]	; (800d004 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800cff8:	f883 2020 	strb.w	r2, [r3, #32]
 800cffc:	bd08      	pop	{r3, pc}
 800cffe:	bf00      	nop
 800d000:	20001955 	andcs	r1, r0, r5, asr r9
 800d004:	2000194c 	andcs	r1, r0, ip, asr #18

0800d008 <RemoteConfig::HandleGet(void*, unsigned int)>:
 800d008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d00a:	4604      	mov	r4, r0
 800d00c:	4616      	mov	r6, r2
 800d00e:	460d      	mov	r5, r1
 800d010:	4f2a      	ldr	r7, [pc, #168]	; (800d0bc <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800d012:	b085      	sub	sp, #20
 800d014:	b9b9      	cbnz	r1, 800d046 <RemoteConfig::HandleGet(void*, unsigned int)+0x3e>
 800d016:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800d01a:	6839      	ldr	r1, [r7, #0]
 800d01c:	aa03      	add	r2, sp, #12
 800d01e:	3105      	adds	r1, #5
 800d020:	9303      	str	r3, [sp, #12]
 800d022:	f000 fc03 	bl	800d82c <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d026:	1e03      	subs	r3, r0, #0
 800d028:	da1d      	bge.n	800d066 <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800d02a:	f642 1305 	movw	r3, #10501	; 0x2905
 800d02e:	220b      	movs	r2, #11
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	4923      	ldr	r1, [pc, #140]	; (800d0c0 <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800d034:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d038:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d03c:	f002 f872 	bl	800f124 <udp_send>
 800d040:	200c      	movs	r0, #12
 800d042:	b005      	add	sp, #20
 800d044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d046:	9203      	str	r2, [sp, #12]
 800d048:	aa03      	add	r2, sp, #12
 800d04a:	6039      	str	r1, [r7, #0]
 800d04c:	f000 fbee 	bl	800d82c <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d050:	1e03      	subs	r3, r0, #0
 800d052:	da08      	bge.n	800d066 <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800d054:	2e0b      	cmp	r6, #11
 800d056:	4632      	mov	r2, r6
 800d058:	4628      	mov	r0, r5
 800d05a:	bf28      	it	cs
 800d05c:	220b      	movcs	r2, #11
 800d05e:	4918      	ldr	r1, [pc, #96]	; (800d0c0 <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800d060:	f005 f858 	bl	8012114 <memcpy>
 800d064:	e7ec      	b.n	800d040 <RemoteConfig::HandleGet(void*, unsigned int)+0x38>
 800d066:	221c      	movs	r2, #28
 800d068:	4353      	muls	r3, r2
 800d06a:	4916      	ldr	r1, [pc, #88]	; (800d0c4 <RemoteConfig::HandleGet(void*, unsigned int)+0xbc>)
 800d06c:	18ca      	adds	r2, r1, r3
 800d06e:	6852      	ldr	r2, [r2, #4]
 800d070:	58cb      	ldr	r3, [r1, r3]
 800d072:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800d076:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d07a:	07d2      	lsls	r2, r2, #31
 800d07c:	bf48      	it	mi
 800d07e:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800d082:	a903      	add	r1, sp, #12
 800d084:	bf48      	it	mi
 800d086:	58d3      	ldrmi	r3, [r2, r3]
 800d088:	4798      	blx	r3
 800d08a:	b96d      	cbnz	r5, 800d0a8 <RemoteConfig::HandleGet(void*, unsigned int)+0xa0>
 800d08c:	f642 1305 	movw	r3, #10501	; 0x2905
 800d090:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d09c:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d0a0:	f002 f840 	bl	800f124 <udp_send>
 800d0a4:	9803      	ldr	r0, [sp, #12]
 800d0a6:	e7cc      	b.n	800d042 <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800d0a8:	9a03      	ldr	r2, [sp, #12]
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	42b2      	cmp	r2, r6
 800d0ae:	bf28      	it	cs
 800d0b0:	4632      	movcs	r2, r6
 800d0b2:	6839      	ldr	r1, [r7, #0]
 800d0b4:	f005 f839 	bl	801212a <memmove>
 800d0b8:	e7f4      	b.n	800d0a4 <RemoteConfig::HandleGet(void*, unsigned int)+0x9c>
 800d0ba:	bf00      	nop
 800d0bc:	20001948 	andcs	r1, r0, r8, asr #18
 800d0c0:	080148b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, fp, lr}
 800d0c4:	08014b50 	stmdaeq	r1, {r4, r6, r8, r9, fp, lr}

0800d0c8 <RemoteConfig::HandleGetNoParams()>:
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	f7ff bf9c 	b.w	800d008 <RemoteConfig::HandleGet(void*, unsigned int)>

0800d0d0 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800d0d0:	b510      	push	{r4, lr}
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	4b07      	ldr	r3, [pc, #28]	; (800d0f4 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800d0d6:	b08a      	sub	sp, #40	; 0x28
 800d0d8:	6819      	ldr	r1, [r3, #0]
 800d0da:	a801      	add	r0, sp, #4
 800d0dc:	f000 f9fc 	bl	800d4d8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800d0e0:	4905      	ldr	r1, [pc, #20]	; (800d0f8 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800d0e2:	4623      	mov	r3, r4
 800d0e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d0e8:	6809      	ldr	r1, [r1, #0]
 800d0ea:	a801      	add	r0, sp, #4
 800d0ec:	f000 fb18 	bl	800d720 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800d0f0:	b00a      	add	sp, #40	; 0x28
 800d0f2:	bd10      	pop	{r4, pc}
 800d0f4:	2000299c 	mulcs	r0, ip, r9
 800d0f8:	20001948 	andcs	r1, r0, r8, asr #18

0800d0fc <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800d0fc:	b513      	push	{r0, r1, r4, lr}
 800d0fe:	460c      	mov	r4, r1
 800d100:	4b07      	ldr	r3, [pc, #28]	; (800d120 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800d102:	a801      	add	r0, sp, #4
 800d104:	6819      	ldr	r1, [r3, #0]
 800d106:	f002 feb7 	bl	800fe78 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800d10a:	4906      	ldr	r1, [pc, #24]	; (800d124 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800d10c:	4623      	mov	r3, r4
 800d10e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d112:	6809      	ldr	r1, [r1, #0]
 800d114:	a801      	add	r0, sp, #4
 800d116:	f003 f89d 	bl	8010254 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800d11a:	b002      	add	sp, #8
 800d11c:	bd10      	pop	{r4, pc}
 800d11e:	bf00      	nop
 800d120:	20002998 	mulcs	r0, r8, r9
 800d124:	20001948 	andcs	r1, r0, r8, asr #18

0800d128 <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
 800d128:	b510      	push	{r4, lr}
 800d12a:	460c      	mov	r4, r1
 800d12c:	4b07      	ldr	r3, [pc, #28]	; (800d14c <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x24>)
 800d12e:	b08a      	sub	sp, #40	; 0x28
 800d130:	6819      	ldr	r1, [r3, #0]
 800d132:	a801      	add	r0, sp, #4
 800d134:	f7fd fa86 	bl	800a644 <E131Params::E131Params(E131ParamsStore*)>
 800d138:	4905      	ldr	r1, [pc, #20]	; (800d150 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x28>)
 800d13a:	4623      	mov	r3, r4
 800d13c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d140:	6809      	ldr	r1, [r1, #0]
 800d142:	a801      	add	r0, sp, #4
 800d144:	f7fd fcd2 	bl	800aaec <E131Params::Save(char*, unsigned int, unsigned int&)>
 800d148:	b00a      	add	sp, #40	; 0x28
 800d14a:	bd10      	pop	{r4, pc}
 800d14c:	20002994 	mulcs	r0, r4, r9
 800d150:	20001948 	andcs	r1, r0, r8, asr #18

0800d154 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800d154:	b510      	push	{r4, lr}
 800d156:	460c      	mov	r4, r1
 800d158:	4b07      	ldr	r3, [pc, #28]	; (800d178 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x24>)
 800d15a:	b08c      	sub	sp, #48	; 0x30
 800d15c:	6819      	ldr	r1, [r3, #0]
 800d15e:	a801      	add	r0, sp, #4
 800d160:	f7fd ff58 	bl	800b014 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800d164:	4905      	ldr	r1, [pc, #20]	; (800d17c <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800d166:	4623      	mov	r3, r4
 800d168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d16c:	6809      	ldr	r1, [r1, #0]
 800d16e:	a801      	add	r0, sp, #4
 800d170:	f7fe f9f0 	bl	800b554 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>
 800d174:	b00c      	add	sp, #48	; 0x30
 800d176:	bd10      	pop	{r4, pc}
 800d178:	200029a0 	andcs	r2, r0, r0, lsr #19
 800d17c:	20001948 	andcs	r1, r0, r8, asr #18

0800d180 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800d180:	b510      	push	{r4, lr}
 800d182:	460c      	mov	r4, r1
 800d184:	4b07      	ldr	r3, [pc, #28]	; (800d1a4 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800d186:	b08a      	sub	sp, #40	; 0x28
 800d188:	6819      	ldr	r1, [r3, #0]
 800d18a:	4668      	mov	r0, sp
 800d18c:	f003 fe18 	bl	8010dc0 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800d190:	4905      	ldr	r1, [pc, #20]	; (800d1a8 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800d192:	4623      	mov	r3, r4
 800d194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d198:	4668      	mov	r0, sp
 800d19a:	6809      	ldr	r1, [r1, #0]
 800d19c:	f003 ff48 	bl	8011030 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800d1a0:	b00a      	add	sp, #40	; 0x28
 800d1a2:	bd10      	pop	{r4, pc}
 800d1a4:	20002990 	mulcs	r0, r0, r9
 800d1a8:	20001948 	andcs	r1, r0, r8, asr #18

0800d1ac <RemoteConfig::HandleSet(void*, unsigned int)>:
 800d1ac:	b530      	push	{r4, r5, lr}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	9201      	str	r2, [sp, #4]
 800d1b4:	b9d1      	cbnz	r1, 800d1ec <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 800d1b6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800d1ba:	9303      	str	r3, [sp, #12]
 800d1bc:	4b1b      	ldr	r3, [pc, #108]	; (800d22c <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800d1be:	aa03      	add	r2, sp, #12
 800d1c0:	6819      	ldr	r1, [r3, #0]
 800d1c2:	3101      	adds	r1, #1
 800d1c4:	f000 fb32 	bl	800d82c <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	db0d      	blt.n	800d1e8 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800d1cc:	221c      	movs	r2, #28
 800d1ce:	4b18      	ldr	r3, [pc, #96]	; (800d230 <RemoteConfig::HandleSet(void*, unsigned int)+0x84>)
 800d1d0:	fb02 3300 	mla	r3, r2, r0, r3
 800d1d4:	68da      	ldr	r2, [r3, #12]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	1051      	asrs	r1, r2, #1
 800d1da:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d1de:	07d2      	lsls	r2, r2, #31
 800d1e0:	bf44      	itt	mi
 800d1e2:	5862      	ldrmi	r2, [r4, r1]
 800d1e4:	58d3      	ldrmi	r3, [r2, r3]
 800d1e6:	4798      	blx	r3
 800d1e8:	b005      	add	sp, #20
 800d1ea:	bd30      	pop	{r4, r5, pc}
 800d1ec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	d8f9      	bhi.n	800d1e8 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	460d      	mov	r5, r1
 800d1f8:	490e      	ldr	r1, [pc, #56]	; (800d234 <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800d1fa:	f8c0 25e8 	str.w	r2, [r0, #1512]	; 0x5e8
 800d1fe:	7809      	ldrb	r1, [r1, #0]
 800d200:	07c9      	lsls	r1, r1, #31
 800d202:	d50a      	bpl.n	800d21a <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800d204:	7829      	ldrb	r1, [r5, #0]
 800d206:	297b      	cmp	r1, #123	; 0x7b
 800d208:	d107      	bne.n	800d21a <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800d20a:	3b01      	subs	r3, #1
 800d20c:	b299      	uxth	r1, r3
 800d20e:	4628      	mov	r0, r5
 800d210:	f003 ffca 	bl	80111a8 <properties::convert_json_file(char*, unsigned short, bool)>
 800d214:	1e03      	subs	r3, r0, #0
 800d216:	dde7      	ble.n	800d1e8 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800d218:	b29b      	uxth	r3, r3
 800d21a:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800d21e:	4b03      	ldr	r3, [pc, #12]	; (800d22c <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800d220:	4620      	mov	r0, r4
 800d222:	601d      	str	r5, [r3, #0]
 800d224:	aa01      	add	r2, sp, #4
 800d226:	1c69      	adds	r1, r5, #1
 800d228:	e7cc      	b.n	800d1c4 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800d22a:	bf00      	nop
 800d22c:	20001948 	andcs	r1, r0, r8, asr #18
 800d230:	08014b50 	stmdaeq	r1, {r4, r6, r8, r9, fp, lr}
 800d234:	2000a8c0 	andcs	sl, r0, r0, asr #17

0800d238 <RemoteConfig::Run()>:
 800d238:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d23c:	f890 55d4 	ldrb.w	r5, [r0, #1492]	; 0x5d4
 800d240:	2d00      	cmp	r5, #0
 800d242:	d15d      	bne.n	800d300 <RemoteConfig::Run()+0xc8>
 800d244:	4604      	mov	r4, r0
 800d246:	4e4a      	ldr	r6, [pc, #296]	; (800d370 <RemoteConfig::Run()+0x138>)
 800d248:	300c      	adds	r0, #12
 800d24a:	f000 fdf3 	bl	800de34 <HttpDaemon::Run()>
 800d24e:	4631      	mov	r1, r6
 800d250:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d254:	f10d 030e 	add.w	r3, sp, #14
 800d258:	f504 62bc 	add.w	r2, r4, #1504	; 0x5e0
 800d25c:	f001 ff3c 	bl	800f0d8 <udp_recv2>
 800d260:	2803      	cmp	r0, #3
 800d262:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800d266:	d94b      	bls.n	800d300 <RemoteConfig::Run()+0xc8>
 800d268:	6831      	ldr	r1, [r6, #0]
 800d26a:	1e43      	subs	r3, r0, #1
 800d26c:	5cca      	ldrb	r2, [r1, r3]
 800d26e:	2a0a      	cmp	r2, #10
 800d270:	bf18      	it	ne
 800d272:	4603      	movne	r3, r0
 800d274:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800d278:	7808      	ldrb	r0, [r1, #0]
 800d27a:	283f      	cmp	r0, #63	; 0x3f
 800d27c:	d135      	bne.n	800d2ea <RemoteConfig::Run()+0xb2>
 800d27e:	483d      	ldr	r0, [pc, #244]	; (800d374 <RemoteConfig::Run()+0x13c>)
 800d280:	462a      	mov	r2, r5
 800d282:	4607      	mov	r7, r0
 800d284:	3b01      	subs	r3, #1
 800d286:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800d28a:	7b86      	ldrb	r6, [r0, #14]
 800d28c:	8985      	ldrh	r5, [r0, #12]
 800d28e:	b176      	cbz	r6, 800d2ae <RemoteConfig::Run()+0x76>
 800d290:	42ab      	cmp	r3, r5
 800d292:	d80e      	bhi.n	800d2b2 <RemoteConfig::Run()+0x7a>
 800d294:	3201      	adds	r2, #1
 800d296:	2a09      	cmp	r2, #9
 800d298:	f100 0010 	add.w	r0, r0, #16
 800d29c:	d1f5      	bne.n	800d28a <RemoteConfig::Run()+0x52>
 800d29e:	f642 1305 	movw	r3, #10501	; 0x2905
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	2208      	movs	r2, #8
 800d2a6:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d2aa:	4933      	ldr	r1, [pc, #204]	; (800d378 <RemoteConfig::Run()+0x140>)
 800d2ac:	e052      	b.n	800d354 <RemoteConfig::Run()+0x11c>
 800d2ae:	42ab      	cmp	r3, r5
 800d2b0:	d1f0      	bne.n	800d294 <RemoteConfig::Run()+0x5c>
 800d2b2:	6886      	ldr	r6, [r0, #8]
 800d2b4:	f101 0c01 	add.w	ip, r1, #1
 800d2b8:	4435      	add	r5, r6
 800d2ba:	42b5      	cmp	r5, r6
 800d2bc:	d10b      	bne.n	800d2d6 <RemoteConfig::Run()+0x9e>
 800d2be:	0113      	lsls	r3, r2, #4
 800d2c0:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800d2c4:	6852      	ldr	r2, [r2, #4]
 800d2c6:	58fb      	ldr	r3, [r7, r3]
 800d2c8:	1051      	asrs	r1, r2, #1
 800d2ca:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d2ce:	07d2      	lsls	r2, r2, #31
 800d2d0:	d408      	bmi.n	800d2e4 <RemoteConfig::Run()+0xac>
 800d2d2:	4798      	blx	r3
 800d2d4:	e014      	b.n	800d300 <RemoteConfig::Run()+0xc8>
 800d2d6:	f81c 8b01 	ldrb.w	r8, [ip], #1
 800d2da:	f816 eb01 	ldrb.w	lr, [r6], #1
 800d2de:	45f0      	cmp	r8, lr
 800d2e0:	d0eb      	beq.n	800d2ba <RemoteConfig::Run()+0x82>
 800d2e2:	e7d7      	b.n	800d294 <RemoteConfig::Run()+0x5c>
 800d2e4:	5862      	ldr	r2, [r4, r1]
 800d2e6:	58d3      	ldr	r3, [r2, r3]
 800d2e8:	e7f3      	b.n	800d2d2 <RemoteConfig::Run()+0x9a>
 800d2ea:	f894 25d5 	ldrb.w	r2, [r4, #1493]	; 0x5d5
 800d2ee:	b93a      	cbnz	r2, 800d300 <RemoteConfig::Run()+0xc8>
 800d2f0:	2823      	cmp	r0, #35	; 0x23
 800d2f2:	d108      	bne.n	800d306 <RemoteConfig::Run()+0xce>
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
 800d2fc:	f7ff ff56 	bl	800d1ac <RemoteConfig::HandleSet(void*, unsigned int)>
 800d300:	b004      	add	sp, #16
 800d302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d306:	2821      	cmp	r0, #33	; 0x21
 800d308:	d1fa      	bne.n	800d300 <RemoteConfig::Run()+0xc8>
 800d30a:	3b01      	subs	r3, #1
 800d30c:	2b05      	cmp	r3, #5
 800d30e:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800d312:	d918      	bls.n	800d346 <RemoteConfig::Run()+0x10e>
 800d314:	1c4a      	adds	r2, r1, #1
 800d316:	4610      	mov	r0, r2
 800d318:	4d18      	ldr	r5, [pc, #96]	; (800d37c <RemoteConfig::Run()+0x144>)
 800d31a:	f101 0c06 	add.w	ip, r1, #6
 800d31e:	4560      	cmp	r0, ip
 800d320:	d01d      	beq.n	800d35e <RemoteConfig::Run()+0x126>
 800d322:	f810 7b01 	ldrb.w	r7, [r0], #1
 800d326:	f815 6b01 	ldrb.w	r6, [r5], #1
 800d32a:	42b7      	cmp	r7, r6
 800d32c:	d0f7      	beq.n	800d31e <RemoteConfig::Run()+0xe6>
 800d32e:	2b08      	cmp	r3, #8
 800d330:	d909      	bls.n	800d346 <RemoteConfig::Run()+0x10e>
 800d332:	4b13      	ldr	r3, [pc, #76]	; (800d380 <RemoteConfig::Run()+0x148>)
 800d334:	3109      	adds	r1, #9
 800d336:	428a      	cmp	r2, r1
 800d338:	d017      	beq.n	800d36a <RemoteConfig::Run()+0x132>
 800d33a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d33e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d342:	4285      	cmp	r5, r0
 800d344:	d0f7      	beq.n	800d336 <RemoteConfig::Run()+0xfe>
 800d346:	f642 1305 	movw	r3, #10501	; 0x2905
 800d34a:	2208      	movs	r2, #8
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d352:	490c      	ldr	r1, [pc, #48]	; (800d384 <RemoteConfig::Run()+0x14c>)
 800d354:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d358:	f001 fee4 	bl	800f124 <udp_send>
 800d35c:	e7d0      	b.n	800d300 <RemoteConfig::Run()+0xc8>
 800d35e:	2300      	movs	r3, #0
 800d360:	4a09      	ldr	r2, [pc, #36]	; (800d388 <RemoteConfig::Run()+0x150>)
 800d362:	011b      	lsls	r3, r3, #4
 800d364:	4620      	mov	r0, r4
 800d366:	58d3      	ldr	r3, [r2, r3]
 800d368:	e7b3      	b.n	800d2d2 <RemoteConfig::Run()+0x9a>
 800d36a:	2301      	movs	r3, #1
 800d36c:	e7f8      	b.n	800d360 <RemoteConfig::Run()+0x128>
 800d36e:	bf00      	nop
 800d370:	20001948 	andcs	r1, r0, r8, asr #18
 800d374:	08014a48 	stmdaeq	r1, {r3, r6, r9, fp, lr}
 800d378:	080148d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, fp, lr}
 800d37c:	080148bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, fp, lr}
 800d380:	080148c5 	stmdaeq	r1, {r0, r2, r6, r7, fp, lr}
 800d384:	080148ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, fp, lr}
 800d388:	08014ad8 	stmdaeq	r1, {r3, r4, r6, r7, r9, fp, lr}

0800d38c <RemoteConfig::HandleSetRconfig()>:
 800d38c:	b510      	push	{r4, lr}
 800d38e:	4604      	mov	r4, r0
 800d390:	4b09      	ldr	r3, [pc, #36]	; (800d3b8 <RemoteConfig::HandleSetRconfig()+0x2c>)
 800d392:	b08a      	sub	sp, #40	; 0x28
 800d394:	6819      	ldr	r1, [r3, #0]
 800d396:	a801      	add	r0, sp, #4
 800d398:	f000 f89e 	bl	800d4d8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800d39c:	4b07      	ldr	r3, [pc, #28]	; (800d3bc <RemoteConfig::HandleSetRconfig()+0x30>)
 800d39e:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800d3a2:	6819      	ldr	r1, [r3, #0]
 800d3a4:	a801      	add	r0, sp, #4
 800d3a6:	f000 f8ad 	bl	800d504 <RemoteConfigParams::Load(char const*, unsigned int)>
 800d3aa:	4621      	mov	r1, r4
 800d3ac:	a801      	add	r0, sp, #4
 800d3ae:	f000 f9c4 	bl	800d73a <RemoteConfigParams::Set(RemoteConfig*)>
 800d3b2:	b00a      	add	sp, #40	; 0x28
 800d3b4:	bd10      	pop	{r4, pc}
 800d3b6:	bf00      	nop
 800d3b8:	2000299c 	mulcs	r0, ip, r9
 800d3bc:	20001948 	andcs	r1, r0, r8, asr #18

0800d3c0 <RemoteConfig::HandleSetNetworkTxt()>:
 800d3c0:	b513      	push	{r0, r1, r4, lr}
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	4b06      	ldr	r3, [pc, #24]	; (800d3e0 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800d3c6:	a801      	add	r0, sp, #4
 800d3c8:	6819      	ldr	r1, [r3, #0]
 800d3ca:	f002 fd55 	bl	800fe78 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800d3ce:	4b05      	ldr	r3, [pc, #20]	; (800d3e4 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800d3d0:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800d3d4:	6819      	ldr	r1, [r3, #0]
 800d3d6:	a801      	add	r0, sp, #4
 800d3d8:	f002 fd6e 	bl	800feb8 <NetworkParams::Load(char const*, unsigned int)>
 800d3dc:	b002      	add	sp, #8
 800d3de:	bd10      	pop	{r4, pc}
 800d3e0:	20002998 	mulcs	r0, r8, r9
 800d3e4:	20001948 	andcs	r1, r0, r8, asr #18

0800d3e8 <RemoteConfig::HandleSetE131Txt()>:
 800d3e8:	b510      	push	{r4, lr}
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	4b07      	ldr	r3, [pc, #28]	; (800d40c <RemoteConfig::HandleSetE131Txt()+0x24>)
 800d3ee:	b08a      	sub	sp, #40	; 0x28
 800d3f0:	6819      	ldr	r1, [r3, #0]
 800d3f2:	a801      	add	r0, sp, #4
 800d3f4:	f7fd f926 	bl	800a644 <E131Params::E131Params(E131ParamsStore*)>
 800d3f8:	4b05      	ldr	r3, [pc, #20]	; (800d410 <RemoteConfig::HandleSetE131Txt()+0x28>)
 800d3fa:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800d3fe:	6819      	ldr	r1, [r3, #0]
 800d400:	a801      	add	r0, sp, #4
 800d402:	f7fd f94b 	bl	800a69c <E131Params::Load(char const*, unsigned int)>
 800d406:	b00a      	add	sp, #40	; 0x28
 800d408:	bd10      	pop	{r4, pc}
 800d40a:	bf00      	nop
 800d40c:	20002994 	mulcs	r0, r4, r9
 800d410:	20001948 	andcs	r1, r0, r8, asr #18

0800d414 <RemoteConfig::HandleSetDevicesTxt()>:
 800d414:	b510      	push	{r4, lr}
 800d416:	4604      	mov	r4, r0
 800d418:	4b07      	ldr	r3, [pc, #28]	; (800d438 <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 800d41a:	b08c      	sub	sp, #48	; 0x30
 800d41c:	6819      	ldr	r1, [r3, #0]
 800d41e:	a801      	add	r0, sp, #4
 800d420:	f7fd fdf8 	bl	800b014 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800d424:	4b05      	ldr	r3, [pc, #20]	; (800d43c <RemoteConfig::HandleSetDevicesTxt()+0x28>)
 800d426:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800d42a:	6819      	ldr	r1, [r3, #0]
 800d42c:	a801      	add	r0, sp, #4
 800d42e:	f7fd fe25 	bl	800b07c <WS28xxDmxParams::Load(char const*, unsigned int)>
 800d432:	b00c      	add	sp, #48	; 0x30
 800d434:	bd10      	pop	{r4, pc}
 800d436:	bf00      	nop
 800d438:	200029a0 	andcs	r2, r0, r0, lsr #19
 800d43c:	20001948 	andcs	r1, r0, r8, asr #18

0800d440 <RemoteConfig::HandleSetDisplayTxt()>:
 800d440:	b510      	push	{r4, lr}
 800d442:	4604      	mov	r4, r0
 800d444:	4b07      	ldr	r3, [pc, #28]	; (800d464 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800d446:	b08a      	sub	sp, #40	; 0x28
 800d448:	6819      	ldr	r1, [r3, #0]
 800d44a:	4668      	mov	r0, sp
 800d44c:	f003 fcb8 	bl	8010dc0 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800d450:	4b05      	ldr	r3, [pc, #20]	; (800d468 <RemoteConfig::HandleSetDisplayTxt()+0x28>)
 800d452:	4668      	mov	r0, sp
 800d454:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800d458:	6819      	ldr	r1, [r3, #0]
 800d45a:	f003 fccb 	bl	8010df4 <DisplayUdfParams::Load(char const*, unsigned int)>
 800d45e:	b00a      	add	sp, #40	; 0x28
 800d460:	bd10      	pop	{r4, pc}
 800d462:	bf00      	nop
 800d464:	20002990 	mulcs	r0, r0, r9
 800d468:	20001948 	andcs	r1, r0, r8, asr #18

0800d46c <RemoteConfig::HandleFactory()>:
 800d46c:	b538      	push	{r3, r4, r5, lr}
 800d46e:	2400      	movs	r4, #0
 800d470:	4d04      	ldr	r5, [pc, #16]	; (800d484 <RemoteConfig::HandleFactory()+0x18>)
 800d472:	4621      	mov	r1, r4
 800d474:	6828      	ldr	r0, [r5, #0]
 800d476:	3401      	adds	r4, #1
 800d478:	f000 ff12 	bl	800e2a0 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800d47c:	2c1c      	cmp	r4, #28
 800d47e:	d1f8      	bne.n	800d472 <RemoteConfig::HandleFactory()+0x6>
 800d480:	bd38      	pop	{r3, r4, r5, pc}
 800d482:	bf00      	nop
 800d484:	20002988 	andcs	r2, r0, r8, lsl #19

0800d488 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800d488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d48a:	460b      	mov	r3, r1
 800d48c:	8885      	ldrh	r5, [r0, #4]
 800d48e:	88c1      	ldrh	r1, [r0, #6]
 800d490:	42a9      	cmp	r1, r5
 800d492:	d214      	bcs.n	800d4be <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800d494:	4604      	mov	r4, r0
 800d496:	6800      	ldr	r0, [r0, #0]
 800d498:	1a6d      	subs	r5, r5, r1
 800d49a:	4408      	add	r0, r1
 800d49c:	7a21      	ldrb	r1, [r4, #8]
 800d49e:	b91a      	cbnz	r2, 800d4a8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800d4a0:	b919      	cbnz	r1, 800d4aa <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800d4a2:	4a0a      	ldr	r2, [pc, #40]	; (800d4cc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800d4a4:	9100      	str	r1, [sp, #0]
 800d4a6:	e002      	b.n	800d4ae <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d4a8:	b159      	cbz	r1, 800d4c2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800d4aa:	9200      	str	r2, [sp, #0]
 800d4ac:	4a08      	ldr	r2, [pc, #32]	; (800d4d0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800d4ae:	4629      	mov	r1, r5
 800d4b0:	f7fb fee4 	bl	800927c <snprintf>
 800d4b4:	4285      	cmp	r5, r0
 800d4b6:	bfa2      	ittt	ge
 800d4b8:	88e3      	ldrhge	r3, [r4, #6]
 800d4ba:	181b      	addge	r3, r3, r0
 800d4bc:	80e3      	strhge	r3, [r4, #6]
 800d4be:	b003      	add	sp, #12
 800d4c0:	bd30      	pop	{r4, r5, pc}
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	9200      	str	r2, [sp, #0]
 800d4c6:	4a03      	ldr	r2, [pc, #12]	; (800d4d4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800d4c8:	e7f1      	b.n	800d4ae <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d4ca:	bf00      	nop
 800d4cc:	080144fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, lr}
 800d4d0:	080144f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sl, lr}
 800d4d4:	080144fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, lr}

0800d4d8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800d4d8:	b510      	push	{r4, lr}
 800d4da:	4604      	mov	r4, r0
 800d4dc:	2220      	movs	r2, #32
 800d4de:	f840 1b04 	str.w	r1, [r0], #4
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	f004 fe38 	bl	8012158 <memset>
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	bd10      	pop	{r4, pc}

0800d4ec <RemoteConfigParams::Load()>:
 800d4ec:	b508      	push	{r3, lr}
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	4601      	mov	r1, r0
 800d4f2:	6043      	str	r3, [r0, #4]
 800d4f4:	6800      	ldr	r0, [r0, #0]
 800d4f6:	b120      	cbz	r0, 800d502 <RemoteConfigParams::Load()+0x16>
 800d4f8:	6803      	ldr	r3, [r0, #0]
 800d4fa:	3104      	adds	r1, #4
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	4798      	blx	r3
 800d500:	2001      	movs	r0, #1
 800d502:	bd08      	pop	{r3, pc}

0800d504 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800d504:	2300      	movs	r3, #0
 800d506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d508:	460d      	mov	r5, r1
 800d50a:	4616      	mov	r6, r2
 800d50c:	4604      	mov	r4, r0
 800d50e:	6043      	str	r3, [r0, #4]
 800d510:	4602      	mov	r2, r0
 800d512:	490a      	ldr	r1, [pc, #40]	; (800d53c <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800d514:	4668      	mov	r0, sp
 800d516:	f003 ff99 	bl	801144c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800d51a:	4632      	mov	r2, r6
 800d51c:	4629      	mov	r1, r5
 800d51e:	4668      	mov	r0, sp
 800d520:	f003 ff98 	bl	8011454 <ReadConfigFile::Read(char const*, unsigned int)>
 800d524:	4621      	mov	r1, r4
 800d526:	f851 0b04 	ldr.w	r0, [r1], #4
 800d52a:	6803      	ldr	r3, [r0, #0]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	4798      	blx	r3
 800d530:	4668      	mov	r0, sp
 800d532:	f003 ff8e 	bl	8011452 <ReadConfigFile::~ReadConfigFile()>
 800d536:	b002      	add	sp, #8
 800d538:	bd70      	pop	{r4, r5, r6, pc}
 800d53a:	bf00      	nop
 800d53c:	0800d5fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, ip, lr, pc}

0800d540 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800d540:	6843      	ldr	r3, [r0, #4]
 800d542:	b111      	cbz	r1, 800d54a <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800d544:	4313      	orrs	r3, r2
 800d546:	6043      	str	r3, [r0, #4]
 800d548:	4770      	bx	lr
 800d54a:	ea23 0302 	bic.w	r3, r3, r2
 800d54e:	e7fa      	b.n	800d546 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800d550 <RemoteConfigParams::callbackFunction(char const*)>:
 800d550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d552:	460d      	mov	r5, r1
 800d554:	4604      	mov	r4, r0
 800d556:	4923      	ldr	r1, [pc, #140]	; (800d5e4 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800d558:	4628      	mov	r0, r5
 800d55a:	f10d 0203 	add.w	r2, sp, #3
 800d55e:	f004 f8b1 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d562:	b940      	cbnz	r0, 800d576 <RemoteConfigParams::callbackFunction(char const*)+0x26>
 800d564:	2201      	movs	r2, #1
 800d566:	4620      	mov	r0, r4
 800d568:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800d56c:	b003      	add	sp, #12
 800d56e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d572:	f7ff bfe5 	b.w	800d540 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800d576:	4628      	mov	r0, r5
 800d578:	491b      	ldr	r1, [pc, #108]	; (800d5e8 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800d57a:	f10d 0203 	add.w	r2, sp, #3
 800d57e:	f004 f8a1 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d582:	b908      	cbnz	r0, 800d588 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800d584:	2202      	movs	r2, #2
 800d586:	e7ee      	b.n	800d566 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d588:	4628      	mov	r0, r5
 800d58a:	4918      	ldr	r1, [pc, #96]	; (800d5ec <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800d58c:	f10d 0203 	add.w	r2, sp, #3
 800d590:	f004 f898 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d594:	b908      	cbnz	r0, 800d59a <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 800d596:	2204      	movs	r2, #4
 800d598:	e7e5      	b.n	800d566 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d59a:	4628      	mov	r0, r5
 800d59c:	4914      	ldr	r1, [pc, #80]	; (800d5f0 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800d59e:	f10d 0203 	add.w	r2, sp, #3
 800d5a2:	f004 f88f 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d5a6:	b908      	cbnz	r0, 800d5ac <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 800d5a8:	2208      	movs	r2, #8
 800d5aa:	e7dc      	b.n	800d566 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	4911      	ldr	r1, [pc, #68]	; (800d5f4 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800d5b0:	f10d 0203 	add.w	r2, sp, #3
 800d5b4:	f004 f886 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d5b8:	b908      	cbnz	r0, 800d5be <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 800d5ba:	2220      	movs	r2, #32
 800d5bc:	e7d3      	b.n	800d566 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d5be:	2317      	movs	r3, #23
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	9301      	str	r3, [sp, #4]
 800d5c4:	490c      	ldr	r1, [pc, #48]	; (800d5f8 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800d5c6:	ab01      	add	r3, sp, #4
 800d5c8:	f104 020c 	add.w	r2, r4, #12
 800d5cc:	f003 ff76 	bl	80114bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d5d0:	b930      	cbnz	r0, 800d5e0 <RemoteConfigParams::callbackFunction(char const*)+0x90>
 800d5d2:	9b01      	ldr	r3, [sp, #4]
 800d5d4:	4423      	add	r3, r4
 800d5d6:	7318      	strb	r0, [r3, #12]
 800d5d8:	6863      	ldr	r3, [r4, #4]
 800d5da:	f043 0310 	orr.w	r3, r3, #16
 800d5de:	6063      	str	r3, [r4, #4]
 800d5e0:	b003      	add	sp, #12
 800d5e2:	bd30      	pop	{r4, r5, pc}
 800d5e4:	08014eb8 	stmdaeq	r1, {r3, r4, r5, r7, r9, sl, fp, lr}
 800d5e8:	08014ed9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, sl, fp, lr}
 800d5ec:	08014ee7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, sl, fp, lr}
 800d5f0:	08014ef5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, sl, fp, lr}
 800d5f4:	08014f03 	stmdaeq	r1, {r0, r1, r8, r9, sl, fp, lr}
 800d5f8:	08014ecc 	stmdaeq	r1, {r2, r3, r6, r7, r9, sl, fp, lr}

0800d5fc <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800d5fc:	f7ff bfa8 	b.w	800d550 <RemoteConfigParams::callbackFunction(char const*)>

0800d600 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800d600:	b570      	push	{r4, r5, r6, lr}
 800d602:	4604      	mov	r4, r0
 800d604:	4615      	mov	r5, r2
 800d606:	461e      	mov	r6, r3
 800d608:	b086      	sub	sp, #24
 800d60a:	3004      	adds	r0, #4
 800d60c:	2900      	cmp	r1, #0
 800d60e:	d041      	beq.n	800d694 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 800d610:	2220      	movs	r2, #32
 800d612:	f004 fd8a 	bl	801212a <memmove>
 800d616:	4633      	mov	r3, r6
 800d618:	462a      	mov	r2, r5
 800d61a:	4937      	ldr	r1, [pc, #220]	; (800d6f8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800d61c:	a803      	add	r0, sp, #12
 800d61e:	f003 fe75 	bl	801130c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800d622:	6862      	ldr	r2, [r4, #4]
 800d624:	4935      	ldr	r1, [pc, #212]	; (800d6fc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800d626:	f002 0201 	and.w	r2, r2, #1
 800d62a:	a803      	add	r0, sp, #12
 800d62c:	f7ff ff2c 	bl	800d488 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d630:	6862      	ldr	r2, [r4, #4]
 800d632:	4933      	ldr	r1, [pc, #204]	; (800d700 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800d634:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800d638:	a803      	add	r0, sp, #12
 800d63a:	f7ff ff25 	bl	800d488 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d63e:	6862      	ldr	r2, [r4, #4]
 800d640:	4930      	ldr	r1, [pc, #192]	; (800d704 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800d642:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800d646:	a803      	add	r0, sp, #12
 800d648:	f7ff ff1e 	bl	800d488 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d64c:	6862      	ldr	r2, [r4, #4]
 800d64e:	492e      	ldr	r1, [pc, #184]	; (800d708 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800d650:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800d654:	a803      	add	r0, sp, #12
 800d656:	f7ff ff17 	bl	800d488 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d65a:	6862      	ldr	r2, [r4, #4]
 800d65c:	492b      	ldr	r1, [pc, #172]	; (800d70c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800d65e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800d662:	a803      	add	r0, sp, #12
 800d664:	f7ff ff10 	bl	800d488 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d668:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d66c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800d670:	6862      	ldr	r2, [r4, #4]
 800d672:	42ab      	cmp	r3, r5
 800d674:	d223      	bcs.n	800d6be <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 800d676:	9803      	ldr	r0, [sp, #12]
 800d678:	06d2      	lsls	r2, r2, #27
 800d67a:	4418      	add	r0, r3
 800d67c:	eba5 0503 	sub.w	r5, r5, r3
 800d680:	f104 040c 	add.w	r4, r4, #12
 800d684:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d688:	d40b      	bmi.n	800d6a2 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800d68a:	b95b      	cbnz	r3, 800d6a4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 800d68c:	4b20      	ldr	r3, [pc, #128]	; (800d710 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800d68e:	4a21      	ldr	r2, [pc, #132]	; (800d714 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800d690:	9400      	str	r4, [sp, #0]
 800d692:	e00a      	b.n	800d6aa <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800d694:	6823      	ldr	r3, [r4, #0]
 800d696:	4601      	mov	r1, r0
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	4618      	mov	r0, r3
 800d69c:	68d2      	ldr	r2, [r2, #12]
 800d69e:	4790      	blx	r2
 800d6a0:	e7b9      	b.n	800d616 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800d6a2:	b32b      	cbz	r3, 800d6f0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 800d6a4:	4b1a      	ldr	r3, [pc, #104]	; (800d710 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800d6a6:	4a1c      	ldr	r2, [pc, #112]	; (800d718 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800d6a8:	9400      	str	r4, [sp, #0]
 800d6aa:	4629      	mov	r1, r5
 800d6ac:	f7fb fde6 	bl	800927c <snprintf>
 800d6b0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d6b4:	4285      	cmp	r5, r0
 800d6b6:	bfa4      	itt	ge
 800d6b8:	181b      	addge	r3, r3, r0
 800d6ba:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800d6be:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d6c2:	b17b      	cbz	r3, 800d6e4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 800d6c4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d6c8:	9b03      	ldr	r3, [sp, #12]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	227d      	movs	r2, #125	; 0x7d
 800d6ce:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d6d2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d6d6:	9903      	ldr	r1, [sp, #12]
 800d6d8:	54ca      	strb	r2, [r1, r3]
 800d6da:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	f8ad 3012 	strh.w	r3, [sp, #18]
 800d6e4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ea:	601a      	str	r2, [r3, #0]
 800d6ec:	b006      	add	sp, #24
 800d6ee:	bd70      	pop	{r4, r5, r6, pc}
 800d6f0:	4b07      	ldr	r3, [pc, #28]	; (800d710 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800d6f2:	4a0a      	ldr	r2, [pc, #40]	; (800d71c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800d6f4:	9400      	str	r4, [sp, #0]
 800d6f6:	e7d8      	b.n	800d6aa <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800d6f8:	08014ec0 	stmdaeq	r1, {r6, r7, r9, sl, fp, lr}
 800d6fc:	08014eb8 	stmdaeq	r1, {r3, r4, r5, r7, r9, sl, fp, lr}
 800d700:	08014ed9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, sl, fp, lr}
 800d704:	08014ee7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, sl, fp, lr}
 800d708:	08014ef5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, sl, fp, lr}
 800d70c:	08014f03 	stmdaeq	r1, {r0, r1, r8, r9, sl, fp, lr}
 800d710:	08014ecc 	stmdaeq	r1, {r2, r3, r6, r7, r9, sl, fp, lr}
 800d714:	080144ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, sl, lr}
 800d718:	080144df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, sl, lr}
 800d71c:	080144eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, sl, lr}

0800d720 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800d720:	b513      	push	{r0, r1, r4, lr}
 800d722:	6804      	ldr	r4, [r0, #0]
 800d724:	b914      	cbnz	r4, 800d72c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800d726:	601c      	str	r4, [r3, #0]
 800d728:	b002      	add	sp, #8
 800d72a:	bd10      	pop	{r4, pc}
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	4613      	mov	r3, r2
 800d730:	460a      	mov	r2, r1
 800d732:	2100      	movs	r1, #0
 800d734:	f7ff ff64 	bl	800d600 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800d738:	e7f6      	b.n	800d728 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800d73a <RemoteConfigParams::Set(RemoteConfig*)>:
 800d73a:	b538      	push	{r3, r4, r5, lr}
 800d73c:	460c      	mov	r4, r1
 800d73e:	4605      	mov	r5, r0
 800d740:	6841      	ldr	r1, [r0, #4]
 800d742:	4620      	mov	r0, r4
 800d744:	f001 0101 	and.w	r1, r1, #1
 800d748:	f7ff fc22 	bl	800cf90 <RemoteConfig::SetDisable(bool)>
 800d74c:	686b      	ldr	r3, [r5, #4]
 800d74e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800d752:	f884 25d5 	strb.w	r2, [r4, #1493]	; 0x5d5
 800d756:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800d75a:	f884 25d6 	strb.w	r2, [r4, #1494]	; 0x5d6
 800d75e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800d762:	f884 25d7 	strb.w	r2, [r4, #1495]	; 0x5d7
 800d766:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800d76a:	06db      	lsls	r3, r3, #27
 800d76c:	f884 25d8 	strb.w	r2, [r4, #1496]	; 0x5d8
 800d770:	d506      	bpl.n	800d780 <RemoteConfigParams::Set(RemoteConfig*)+0x46>
 800d772:	4620      	mov	r0, r4
 800d774:	f105 010c 	add.w	r1, r5, #12
 800d778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d77c:	f7ff bc2c 	b.w	800cfd8 <RemoteConfig::SetDisplayName(char const*)>
 800d780:	bd38      	pop	{r3, r4, r5, pc}

0800d782 <RemoteConfigParams::Dump()>:
 800d782:	4770      	bx	lr

0800d784 <RemoteConfig::HandleReboot()>:
 800d784:	f890 35d6 	ldrb.w	r3, [r0, #1494]	; 0x5d6
 800d788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d03d      	beq.n	800d80a <RemoteConfig::HandleReboot()+0x86>
 800d78e:	2301      	movs	r3, #1
 800d790:	4c1f      	ldr	r4, [pc, #124]	; (800d810 <RemoteConfig::HandleReboot()+0x8c>)
 800d792:	f880 35d9 	strb.w	r3, [r0, #1497]	; 0x5d9
 800d796:	6825      	ldr	r5, [r4, #0]
 800d798:	69a8      	ldr	r0, [r5, #24]
 800d79a:	b138      	cbz	r0, 800d7ac <RemoteConfig::HandleReboot()+0x28>
 800d79c:	2100      	movs	r1, #0
 800d79e:	6803      	ldr	r3, [r0, #0]
 800d7a0:	7429      	strb	r1, [r5, #16]
 800d7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a4:	4798      	blx	r3
 800d7a6:	4b1b      	ldr	r3, [pc, #108]	; (800d814 <RemoteConfig::HandleReboot()+0x90>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	606b      	str	r3, [r5, #4]
 800d7ac:	4d1a      	ldr	r5, [pc, #104]	; (800d818 <RemoteConfig::HandleReboot()+0x94>)
 800d7ae:	6828      	ldr	r0, [r5, #0]
 800d7b0:	f000 fdf2 	bl	800e398 <SpiFlashStore::Flash()>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	d1fa      	bne.n	800d7ae <RemoteConfig::HandleReboot()+0x2a>
 800d7b8:	4b18      	ldr	r3, [pc, #96]	; (800d81c <RemoteConfig::HandleReboot()+0x98>)
 800d7ba:	6818      	ldr	r0, [r3, #0]
 800d7bc:	f002 f970 	bl	800faa0 <Network::Shutdown()>
 800d7c0:	4817      	ldr	r0, [pc, #92]	; (800d820 <RemoteConfig::HandleReboot()+0x9c>)
 800d7c2:	f7fb fd33 	bl	800922c <printf>
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	6998      	ldr	r0, [r3, #24]
 800d7ca:	b110      	cbz	r0, 800d7d2 <RemoteConfig::HandleReboot()+0x4e>
 800d7cc:	6803      	ldr	r3, [r0, #0]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	4798      	blx	r3
 800d7d2:	6824      	ldr	r4, [r4, #0]
 800d7d4:	4913      	ldr	r1, [pc, #76]	; (800d824 <RemoteConfig::HandleReboot()+0xa0>)
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f7fa ff60 	bl	800869c <Display::TextStatus(char const*)>
 800d7dc:	7c63      	ldrb	r3, [r4, #17]
 800d7de:	b183      	cbz	r3, 800d802 <RemoteConfig::HandleReboot()+0x7e>
 800d7e0:	f64b 7312 	movw	r3, #48914	; 0xbf12
 800d7e4:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d7e8:	23bf      	movs	r3, #191	; 0xbf
 800d7ea:	7a20      	ldrb	r0, [r4, #8]
 800d7ec:	f88d 3006 	strb.w	r3, [sp, #6]
 800d7f0:	f005 fc1a 	bl	8013028 <gd32_i2c_set_address(unsigned char)>
 800d7f4:	68e0      	ldr	r0, [r4, #12]
 800d7f6:	f005 fc0f 	bl	8013018 <gd32_i2c_set_baudrate(unsigned int)>
 800d7fa:	2103      	movs	r1, #3
 800d7fc:	a801      	add	r0, sp, #4
 800d7fe:	f005 fc19 	bl	8013034 <gd32_i2c_write(char const*, unsigned int)>
 800d802:	4b09      	ldr	r3, [pc, #36]	; (800d828 <RemoteConfig::HandleReboot()+0xa4>)
 800d804:	6818      	ldr	r0, [r3, #0]
 800d806:	f004 fb8f 	bl	8011f28 <Hardware::Reboot()>
 800d80a:	b003      	add	sp, #12
 800d80c:	bd30      	pop	{r4, r5, pc}
 800d80e:	bf00      	nop
 800d810:	2000a8c4 	andcs	sl, r0, r4, asr #17
 800d814:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800d818:	20002988 	andcs	r2, r0, r8, lsl #19
 800d81c:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800d820:	08014af8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r9, fp, lr}
 800d824:	08014b07 	stmdaeq	r1, {r0, r1, r2, r8, r9, fp, lr}
 800d828:	2000a9b4 			; <UNDEFINED> instruction: 0x2000a9b4

0800d82c <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800d82c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d830:	2000      	movs	r0, #0
 800d832:	4d12      	ldr	r5, [pc, #72]	; (800d87c <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800d834:	f10d 0c04 	add.w	ip, sp, #4
 800d838:	6814      	ldr	r4, [r2, #0]
 800d83a:	7d2b      	ldrb	r3, [r5, #20]
 800d83c:	692e      	ldr	r6, [r5, #16]
 800d83e:	42a3      	cmp	r3, r4
 800d840:	bf34      	ite	cc
 800d842:	4664      	movcc	r4, ip
 800d844:	4614      	movcs	r4, r2
 800d846:	9301      	str	r3, [sp, #4]
 800d848:	6827      	ldr	r7, [r4, #0]
 800d84a:	460c      	mov	r4, r1
 800d84c:	3e01      	subs	r6, #1
 800d84e:	440f      	add	r7, r1
 800d850:	42bc      	cmp	r4, r7
 800d852:	d101      	bne.n	800d858 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	e00c      	b.n	800d872 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 800d858:	f894 8000 	ldrb.w	r8, [r4]
 800d85c:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800d860:	45f0      	cmp	r8, lr
 800d862:	d009      	beq.n	800d878 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800d864:	3001      	adds	r0, #1
 800d866:	2805      	cmp	r0, #5
 800d868:	f105 051c 	add.w	r5, r5, #28
 800d86c:	d1e4      	bne.n	800d838 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800d86e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d872:	b002      	add	sp, #8
 800d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d878:	3401      	adds	r4, #1
 800d87a:	e7e9      	b.n	800d850 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800d87c:	08014b50 	stmdaeq	r1, {r4, r6, r8, r9, fp, lr}

0800d880 <RemoteConfig::PlatformHandleTftpSet()>:
 800d880:	f890 15ec 	ldrb.w	r1, [r0, #1516]	; 0x5ec
 800d884:	b109      	cbz	r1, 800d88a <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800d886:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800d88a:	2002      	movs	r0, #2
 800d88c:	f004 be5e 	b.w	801254c <bkp_data_write>

0800d890 <RemoteConfig::PlatformHandleTftpGet()>:
 800d890:	b510      	push	{r4, lr}
 800d892:	4604      	mov	r4, r0
 800d894:	2002      	movs	r0, #2
 800d896:	f004 fe6f 	bl	8012578 <bkp_data_read>
 800d89a:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800d89e:	1ac3      	subs	r3, r0, r3
 800d8a0:	4258      	negs	r0, r3
 800d8a2:	4158      	adcs	r0, r3
 800d8a4:	f884 05ec 	strb.w	r0, [r4, #1516]	; 0x5ec
 800d8a8:	bd10      	pop	{r4, pc}

0800d8aa <strcmp>:
 800d8aa:	1e43      	subs	r3, r0, #1
 800d8ac:	3901      	subs	r1, #1
 800d8ae:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d8b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d8b6:	4290      	cmp	r0, r2
 800d8b8:	d001      	beq.n	800d8be <strcmp+0x14>
 800d8ba:	1a80      	subs	r0, r0, r2
 800d8bc:	e001      	b.n	800d8c2 <strcmp+0x18>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d1f5      	bne.n	800d8ae <strcmp+0x4>
 800d8c2:	4770      	bx	lr

0800d8c4 <strcasecmp>:
 800d8c4:	b530      	push	{r4, r5, lr}
 800d8c6:	1e42      	subs	r2, r0, #1
 800d8c8:	3901      	subs	r1, #1
 800d8ca:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d8d4:	2b19      	cmp	r3, #25
 800d8d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d8da:	bf98      	it	ls
 800d8dc:	f100 0420 	addls.w	r4, r0, #32
 800d8e0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800d8e4:	2d19      	cmp	r5, #25
 800d8e6:	bf98      	it	ls
 800d8e8:	3320      	addls	r3, #32
 800d8ea:	42a3      	cmp	r3, r4
 800d8ec:	d001      	beq.n	800d8f2 <strcasecmp+0x2e>
 800d8ee:	1ae0      	subs	r0, r4, r3
 800d8f0:	e001      	b.n	800d8f6 <strcasecmp+0x32>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	d1e9      	bne.n	800d8ca <strcasecmp+0x6>
 800d8f6:	bd30      	pop	{r4, r5, pc}

0800d8f8 <PropertiesConfig::EnableJSON(bool)>:
 800d8f8:	4a04      	ldr	r2, [pc, #16]	; (800d90c <PropertiesConfig::EnableJSON(bool)+0x14>)
 800d8fa:	7813      	ldrb	r3, [r2, #0]
 800d8fc:	b118      	cbz	r0, 800d906 <PropertiesConfig::EnableJSON(bool)+0xe>
 800d8fe:	f043 0301 	orr.w	r3, r3, #1
 800d902:	7013      	strb	r3, [r2, #0]
 800d904:	4770      	bx	lr
 800d906:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d90a:	e7fa      	b.n	800d902 <PropertiesConfig::EnableJSON(bool)+0xa>
 800d90c:	2000a8c0 	andcs	sl, r0, r0, asr #17

0800d910 <HttpDaemon::HttpDaemon()>:
 800d910:	4a0a      	ldr	r2, [pc, #40]	; (800d93c <HttpDaemon::HttpDaemon()+0x2c>)
 800d912:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d916:	6002      	str	r2, [r0, #0]
 800d918:	2200      	movs	r2, #0
 800d91a:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800d91e:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800d922:	2102      	movs	r1, #2
 800d924:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800d928:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800d92c:	60c2      	str	r2, [r0, #12]
 800d92e:	8402      	strh	r2, [r0, #32]
 800d930:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 800d934:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	08014e38 	stmdaeq	r1, {r3, r4, r5, r9, sl, fp, lr}

0800d940 <HttpDaemon::Start()>:
 800d940:	4b04      	ldr	r3, [pc, #16]	; (800d954 <HttpDaemon::Start()+0x14>)
 800d942:	b510      	push	{r4, lr}
 800d944:	2150      	movs	r1, #80	; 0x50
 800d946:	4604      	mov	r4, r0
 800d948:	6818      	ldr	r0, [r3, #0]
 800d94a:	f002 fa89 	bl	800fe60 <Network::TcpBegin(unsigned short)>
 800d94e:	6120      	str	r0, [r4, #16]
 800d950:	bd10      	pop	{r4, pc}
 800d952:	bf00      	nop
 800d954:	2000a28c 	andcs	sl, r0, ip, lsl #5

0800d958 <HttpDaemon::ParseMethod(char*)>:
 800d958:	b538      	push	{r3, r4, r5, lr}
 800d95a:	4604      	mov	r4, r0
 800d95c:	4608      	mov	r0, r1
 800d95e:	491a      	ldr	r1, [pc, #104]	; (800d9c8 <HttpDaemon::ParseMethod(char*)+0x70>)
 800d960:	f004 fc24 	bl	80121ac <strtok>
 800d964:	4605      	mov	r5, r0
 800d966:	b360      	cbz	r0, 800d9c2 <HttpDaemon::ParseMethod(char*)+0x6a>
 800d968:	4918      	ldr	r1, [pc, #96]	; (800d9cc <HttpDaemon::ParseMethod(char*)+0x74>)
 800d96a:	f7ff ff9e 	bl	800d8aa <strcmp>
 800d96e:	b128      	cbz	r0, 800d97c <HttpDaemon::ParseMethod(char*)+0x24>
 800d970:	4628      	mov	r0, r5
 800d972:	4917      	ldr	r1, [pc, #92]	; (800d9d0 <HttpDaemon::ParseMethod(char*)+0x78>)
 800d974:	f7ff ff99 	bl	800d8aa <strcmp>
 800d978:	bb18      	cbnz	r0, 800d9c2 <HttpDaemon::ParseMethod(char*)+0x6a>
 800d97a:	2001      	movs	r0, #1
 800d97c:	61e0      	str	r0, [r4, #28]
 800d97e:	4912      	ldr	r1, [pc, #72]	; (800d9c8 <HttpDaemon::ParseMethod(char*)+0x70>)
 800d980:	2000      	movs	r0, #0
 800d982:	f004 fc13 	bl	80121ac <strtok>
 800d986:	b910      	cbnz	r0, 800d98e <HttpDaemon::ParseMethod(char*)+0x36>
 800d988:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d98c:	bd38      	pop	{r3, r4, r5, pc}
 800d98e:	6060      	str	r0, [r4, #4]
 800d990:	4910      	ldr	r1, [pc, #64]	; (800d9d4 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800d992:	2000      	movs	r0, #0
 800d994:	f004 fc0a 	bl	80121ac <strtok>
 800d998:	2800      	cmp	r0, #0
 800d99a:	d0f5      	beq.n	800d988 <HttpDaemon::ParseMethod(char*)+0x30>
 800d99c:	490e      	ldr	r1, [pc, #56]	; (800d9d8 <HttpDaemon::ParseMethod(char*)+0x80>)
 800d99e:	f7ff ff84 	bl	800d8aa <strcmp>
 800d9a2:	2800      	cmp	r0, #0
 800d9a4:	d1f0      	bne.n	800d988 <HttpDaemon::ParseMethod(char*)+0x30>
 800d9a6:	490d      	ldr	r1, [pc, #52]	; (800d9dc <HttpDaemon::ParseMethod(char*)+0x84>)
 800d9a8:	f004 fc00 	bl	80121ac <strtok>
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	d0eb      	beq.n	800d988 <HttpDaemon::ParseMethod(char*)+0x30>
 800d9b0:	490b      	ldr	r1, [pc, #44]	; (800d9e0 <HttpDaemon::ParseMethod(char*)+0x88>)
 800d9b2:	f7ff ff7a 	bl	800d8aa <strcmp>
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	f240 10f9 	movw	r0, #505	; 0x1f9
 800d9bc:	bf08      	it	eq
 800d9be:	20c8      	moveq	r0, #200	; 0xc8
 800d9c0:	e7e4      	b.n	800d98c <HttpDaemon::ParseMethod(char*)+0x34>
 800d9c2:	f240 10f5 	movw	r0, #501	; 0x1f5
 800d9c6:	e7e1      	b.n	800d98c <HttpDaemon::ParseMethod(char*)+0x34>
 800d9c8:	08014bdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, fp, lr}
 800d9cc:	08014bde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, r9, fp, lr}
 800d9d0:	08014be2 	stmdaeq	r1, {r1, r5, r6, r7, r8, r9, fp, lr}
 800d9d4:	08014c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, lr}
 800d9d8:	08014be7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, r9, fp, lr}
 800d9dc:	08014bec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, fp, lr}
 800d9e0:	08014bef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, fp, lr}

0800d9e4 <HttpDaemon::ParseHeaderField(char*)>:
 800d9e4:	b538      	push	{r3, r4, r5, lr}
 800d9e6:	4605      	mov	r5, r0
 800d9e8:	4608      	mov	r0, r1
 800d9ea:	491d      	ldr	r1, [pc, #116]	; (800da60 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800d9ec:	f004 fbde 	bl	80121ac <strtok>
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	b910      	cbnz	r0, 800d9fa <HttpDaemon::ParseHeaderField(char*)+0x16>
 800d9f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d9f8:	bd38      	pop	{r3, r4, r5, pc}
 800d9fa:	491a      	ldr	r1, [pc, #104]	; (800da64 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800d9fc:	f7ff ff62 	bl	800d8c4 <strcasecmp>
 800da00:	b970      	cbnz	r0, 800da20 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800da02:	4919      	ldr	r1, [pc, #100]	; (800da68 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800da04:	f004 fbd2 	bl	80121ac <strtok>
 800da08:	2800      	cmp	r0, #0
 800da0a:	d0f3      	beq.n	800d9f4 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800da0c:	4917      	ldr	r1, [pc, #92]	; (800da6c <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800da0e:	f7ff ff4c 	bl	800d8aa <strcmp>
 800da12:	b108      	cbz	r0, 800da18 <HttpDaemon::ParseHeaderField(char*)+0x34>
 800da14:	20c8      	movs	r0, #200	; 0xc8
 800da16:	e7ef      	b.n	800d9f8 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800da18:	2301      	movs	r3, #1
 800da1a:	f885 3020 	strb.w	r3, [r5, #32]
 800da1e:	e7f9      	b.n	800da14 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800da20:	4620      	mov	r0, r4
 800da22:	4913      	ldr	r1, [pc, #76]	; (800da70 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800da24:	f7ff ff4e 	bl	800d8c4 <strcasecmp>
 800da28:	4604      	mov	r4, r0
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d1f2      	bne.n	800da14 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800da2e:	4911      	ldr	r1, [pc, #68]	; (800da74 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800da30:	f004 fbbc 	bl	80121ac <strtok>
 800da34:	2800      	cmp	r0, #0
 800da36:	d0dd      	beq.n	800d9f4 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800da38:	1e42      	subs	r2, r0, #1
 800da3a:	4623      	mov	r3, r4
 800da3c:	200a      	movs	r0, #10
 800da3e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800da42:	b911      	cbnz	r1, 800da4a <HttpDaemon::ParseHeaderField(char*)+0x66>
 800da44:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 800da48:	e7e4      	b.n	800da14 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800da4a:	3930      	subs	r1, #48	; 0x30
 800da4c:	2909      	cmp	r1, #9
 800da4e:	d8d1      	bhi.n	800d9f4 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800da50:	fb00 1303 	mla	r3, r0, r3, r1
 800da54:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800da58:	d9f1      	bls.n	800da3e <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800da5a:	f240 109d 	movw	r0, #413	; 0x19d
 800da5e:	e7cb      	b.n	800d9f8 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800da60:	08014bf3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, r9, fp, lr}
 800da64:	08014bf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, fp, lr}
 800da68:	08014c02 	stmdaeq	r1, {r1, sl, fp, lr}
 800da6c:	08014c05 	stmdaeq	r1, {r0, r2, sl, fp, lr}
 800da70:	08014c16 	stmdaeq	r1, {r1, r2, r4, sl, fp, lr}
 800da74:	08014bdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, fp, lr}

0800da78 <HttpDaemon::ParseRequest()>:
 800da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7a:	2400      	movs	r4, #0
 800da7c:	4605      	mov	r5, r0
 800da7e:	4622      	mov	r2, r4
 800da80:	4626      	mov	r6, r4
 800da82:	68c1      	ldr	r1, [r0, #12]
 800da84:	f880 4020 	strb.w	r4, [r0, #32]
 800da88:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 800da8c:	8aab      	ldrh	r3, [r5, #20]
 800da8e:	42a3      	cmp	r3, r4
 800da90:	d91e      	bls.n	800dad0 <HttpDaemon::ParseRequest()+0x58>
 800da92:	68eb      	ldr	r3, [r5, #12]
 800da94:	5d18      	ldrb	r0, [r3, r4]
 800da96:	280a      	cmp	r0, #10
 800da98:	d10e      	bne.n	800dab8 <HttpDaemon::ParseRequest()+0x40>
 800da9a:	4423      	add	r3, r4
 800da9c:	f803 6c01 	strb.w	r6, [r3, #-1]
 800daa0:	1c57      	adds	r7, r2, #1
 800daa2:	b962      	cbnz	r2, 800dabe <HttpDaemon::ParseRequest()+0x46>
 800daa4:	4628      	mov	r0, r5
 800daa6:	f7ff ff57 	bl	800d958 <HttpDaemon::ParseMethod(char*)>
 800daaa:	28c8      	cmp	r0, #200	; 0xc8
 800daac:	d111      	bne.n	800dad2 <HttpDaemon::ParseRequest()+0x5a>
 800daae:	463a      	mov	r2, r7
 800dab0:	68e9      	ldr	r1, [r5, #12]
 800dab2:	3401      	adds	r4, #1
 800dab4:	b2a4      	uxth	r4, r4
 800dab6:	4421      	add	r1, r4
 800dab8:	3401      	adds	r4, #1
 800daba:	b2a4      	uxth	r4, r4
 800dabc:	e7e6      	b.n	800da8c <HttpDaemon::ParseRequest()+0x14>
 800dabe:	7808      	ldrb	r0, [r1, #0]
 800dac0:	b970      	cbnz	r0, 800dae0 <HttpDaemon::ParseRequest()+0x68>
 800dac2:	696b      	ldr	r3, [r5, #20]
 800dac4:	3b01      	subs	r3, #1
 800dac6:	1b1b      	subs	r3, r3, r4
 800dac8:	b29b      	uxth	r3, r3
 800daca:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 800dace:	b90b      	cbnz	r3, 800dad4 <HttpDaemon::ParseRequest()+0x5c>
 800dad0:	20c8      	movs	r0, #200	; 0xc8
 800dad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dad4:	68ea      	ldr	r2, [r5, #12]
 800dad6:	3401      	adds	r4, #1
 800dad8:	4414      	add	r4, r2
 800dada:	60ac      	str	r4, [r5, #8]
 800dadc:	54e0      	strb	r0, [r4, r3]
 800dade:	e7f7      	b.n	800dad0 <HttpDaemon::ParseRequest()+0x58>
 800dae0:	4628      	mov	r0, r5
 800dae2:	f7ff ff7f 	bl	800d9e4 <HttpDaemon::ParseHeaderField(char*)>
 800dae6:	e7e0      	b.n	800daaa <HttpDaemon::ParseRequest()+0x32>

0800dae8 <HttpDaemon::HandleGetTxt()>:
 800dae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daec:	6847      	ldr	r7, [r0, #4]
 800daee:	4604      	mov	r4, r0
 800daf0:	1dbd      	adds	r5, r7, #6
 800daf2:	462b      	mov	r3, r5
 800daf4:	4618      	mov	r0, r3
 800daf6:	7802      	ldrb	r2, [r0, #0]
 800daf8:	3301      	adds	r3, #1
 800dafa:	2a00      	cmp	r2, #0
 800dafc:	d1fa      	bne.n	800daf4 <HttpDaemon::HandleGetTxt()+0xc>
 800dafe:	1b40      	subs	r0, r0, r5
 800db00:	2804      	cmp	r0, #4
 800db02:	d803      	bhi.n	800db0c <HttpDaemon::HandleGetTxt()+0x24>
 800db04:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800db08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db0c:	3804      	subs	r0, #4
 800db0e:	4914      	ldr	r1, [pc, #80]	; (800db60 <HttpDaemon::HandleGetTxt()+0x78>)
 800db10:	4428      	add	r0, r5
 800db12:	f7ff feca 	bl	800d8aa <strcmp>
 800db16:	2800      	cmp	r0, #0
 800db18:	d1f4      	bne.n	800db04 <HttpDaemon::HandleGetTxt()+0x1c>
 800db1a:	4b12      	ldr	r3, [pc, #72]	; (800db64 <HttpDaemon::HandleGetTxt()+0x7c>)
 800db1c:	2001      	movs	r0, #1
 800db1e:	f893 8000 	ldrb.w	r8, [r3]
 800db22:	f7ff fee9 	bl	800d8f8 <PropertiesConfig::EnableJSON(bool)>
 800db26:	4b10      	ldr	r3, [pc, #64]	; (800db68 <HttpDaemon::HandleGetTxt()+0x80>)
 800db28:	f240 529b 	movw	r2, #1435	; 0x59b
 800db2c:	4629      	mov	r1, r5
 800db2e:	6818      	ldr	r0, [r3, #0]
 800db30:	f7ff fa6a 	bl	800d008 <RemoteConfig::HandleGet(void*, unsigned int)>
 800db34:	4606      	mov	r6, r0
 800db36:	f008 0801 	and.w	r8, r8, #1
 800db3a:	4640      	mov	r0, r8
 800db3c:	f7ff fedc 	bl	800d8f8 <PropertiesConfig::EnableJSON(bool)>
 800db40:	2e00      	cmp	r6, #0
 800db42:	d0df      	beq.n	800db04 <HttpDaemon::HandleGetTxt()+0x1c>
 800db44:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 800db48:	3606      	adds	r6, #6
 800db4a:	3422      	adds	r4, #34	; 0x22
 800db4c:	4437      	add	r7, r6
 800db4e:	42bd      	cmp	r5, r7
 800db50:	d101      	bne.n	800db56 <HttpDaemon::HandleGetTxt()+0x6e>
 800db52:	20c8      	movs	r0, #200	; 0xc8
 800db54:	e7d8      	b.n	800db08 <HttpDaemon::HandleGetTxt()+0x20>
 800db56:	f815 3b01 	ldrb.w	r3, [r5], #1
 800db5a:	f804 3b01 	strb.w	r3, [r4], #1
 800db5e:	e7f6      	b.n	800db4e <HttpDaemon::HandleGetTxt()+0x66>
 800db60:	08014b3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, r9, fp, lr}
 800db64:	2000a8c0 	andcs	sl, r0, r0, asr #17
 800db68:	20001970 	andcs	r1, r0, r0, ror r9

0800db6c <HttpDaemon::HandleGet()>:
 800db6c:	b570      	push	{r4, r5, r6, lr}
 800db6e:	6845      	ldr	r5, [r0, #4]
 800db70:	4604      	mov	r4, r0
 800db72:	4943      	ldr	r1, [pc, #268]	; (800dc80 <HttpDaemon::HandleGet()+0x114>)
 800db74:	4628      	mov	r0, r5
 800db76:	f7ff fe98 	bl	800d8aa <strcmp>
 800db7a:	b120      	cbz	r0, 800db86 <HttpDaemon::HandleGet()+0x1a>
 800db7c:	4628      	mov	r0, r5
 800db7e:	4941      	ldr	r1, [pc, #260]	; (800dc84 <HttpDaemon::HandleGet()+0x118>)
 800db80:	f7ff fe93 	bl	800d8aa <strcmp>
 800db84:	b960      	cbnz	r0, 800dba0 <HttpDaemon::HandleGet()+0x34>
 800db86:	4621      	mov	r1, r4
 800db88:	4b3f      	ldr	r3, [pc, #252]	; (800dc88 <HttpDaemon::HandleGet()+0x11c>)
 800db8a:	4840      	ldr	r0, [pc, #256]	; (800dc8c <HttpDaemon::HandleGet()+0x120>)
 800db8c:	f841 3b22 	str.w	r3, [r1], #34
 800db90:	f000 fa7a 	bl	800e088 <get_file_content(char const*, char*)>
 800db94:	2800      	cmp	r0, #0
 800db96:	dd33      	ble.n	800dc00 <HttpDaemon::HandleGet()+0x94>
 800db98:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800db9c:	20c8      	movs	r0, #200	; 0xc8
 800db9e:	bd70      	pop	{r4, r5, r6, pc}
 800dba0:	4628      	mov	r0, r5
 800dba2:	493b      	ldr	r1, [pc, #236]	; (800dc90 <HttpDaemon::HandleGet()+0x124>)
 800dba4:	f7ff fe81 	bl	800d8aa <strcmp>
 800dba8:	b928      	cbnz	r0, 800dbb6 <HttpDaemon::HandleGet()+0x4a>
 800dbaa:	4621      	mov	r1, r4
 800dbac:	4b39      	ldr	r3, [pc, #228]	; (800dc94 <HttpDaemon::HandleGet()+0x128>)
 800dbae:	483a      	ldr	r0, [pc, #232]	; (800dc98 <HttpDaemon::HandleGet()+0x12c>)
 800dbb0:	f841 3b22 	str.w	r3, [r1], #34
 800dbb4:	e7ec      	b.n	800db90 <HttpDaemon::HandleGet()+0x24>
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	4938      	ldr	r1, [pc, #224]	; (800dc9c <HttpDaemon::HandleGet()+0x130>)
 800dbba:	f7ff fe76 	bl	800d8aa <strcmp>
 800dbbe:	b198      	cbz	r0, 800dbe8 <HttpDaemon::HandleGet()+0x7c>
 800dbc0:	4a37      	ldr	r2, [pc, #220]	; (800dca0 <HttpDaemon::HandleGet()+0x134>)
 800dbc2:	1e6b      	subs	r3, r5, #1
 800dbc4:	1d69      	adds	r1, r5, #5
 800dbc6:	428b      	cmp	r3, r1
 800dbc8:	d114      	bne.n	800dbf4 <HttpDaemon::HandleGet()+0x88>
 800dbca:	4b36      	ldr	r3, [pc, #216]	; (800dca4 <HttpDaemon::HandleGet()+0x138>)
 800dbcc:	3506      	adds	r5, #6
 800dbce:	4628      	mov	r0, r5
 800dbd0:	4935      	ldr	r1, [pc, #212]	; (800dca8 <HttpDaemon::HandleGet()+0x13c>)
 800dbd2:	6023      	str	r3, [r4, #0]
 800dbd4:	f7ff fe69 	bl	800d8aa <strcmp>
 800dbd8:	b9a8      	cbnz	r0, 800dc06 <HttpDaemon::HandleGet()+0x9a>
 800dbda:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800dbde:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800dbe2:	f000 f9d9 	bl	800df98 <remoteconfig::json_get_list(char*, unsigned short)>
 800dbe6:	e7d5      	b.n	800db94 <HttpDaemon::HandleGet()+0x28>
 800dbe8:	4621      	mov	r1, r4
 800dbea:	4b30      	ldr	r3, [pc, #192]	; (800dcac <HttpDaemon::HandleGet()+0x140>)
 800dbec:	4830      	ldr	r0, [pc, #192]	; (800dcb0 <HttpDaemon::HandleGet()+0x144>)
 800dbee:	f841 3b22 	str.w	r3, [r1], #34
 800dbf2:	e7cd      	b.n	800db90 <HttpDaemon::HandleGet()+0x24>
 800dbf4:	f812 0b01 	ldrb.w	r0, [r2], #1
 800dbf8:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800dbfc:	4286      	cmp	r6, r0
 800dbfe:	d0e2      	beq.n	800dbc6 <HttpDaemon::HandleGet()+0x5a>
 800dc00:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800dc04:	e7cb      	b.n	800db9e <HttpDaemon::HandleGet()+0x32>
 800dc06:	4628      	mov	r0, r5
 800dc08:	492a      	ldr	r1, [pc, #168]	; (800dcb4 <HttpDaemon::HandleGet()+0x148>)
 800dc0a:	f7ff fe4e 	bl	800d8aa <strcmp>
 800dc0e:	b930      	cbnz	r0, 800dc1e <HttpDaemon::HandleGet()+0xb2>
 800dc10:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800dc14:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800dc18:	f000 f9f2 	bl	800e000 <remoteconfig::json_get_version(char*, unsigned short)>
 800dc1c:	e7ba      	b.n	800db94 <HttpDaemon::HandleGet()+0x28>
 800dc1e:	4628      	mov	r0, r5
 800dc20:	4925      	ldr	r1, [pc, #148]	; (800dcb8 <HttpDaemon::HandleGet()+0x14c>)
 800dc22:	f7ff fe42 	bl	800d8aa <strcmp>
 800dc26:	b958      	cbnz	r0, 800dc40 <HttpDaemon::HandleGet()+0xd4>
 800dc28:	4b24      	ldr	r3, [pc, #144]	; (800dcbc <HttpDaemon::HandleGet()+0x150>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f893 35d7 	ldrb.w	r3, [r3, #1495]	; 0x5d7
 800dc30:	b31b      	cbz	r3, 800dc7a <HttpDaemon::HandleGet()+0x10e>
 800dc32:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800dc36:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800dc3a:	f000 f9fd 	bl	800e038 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800dc3e:	e7a9      	b.n	800db94 <HttpDaemon::HandleGet()+0x28>
 800dc40:	4628      	mov	r0, r5
 800dc42:	491f      	ldr	r1, [pc, #124]	; (800dcc0 <HttpDaemon::HandleGet()+0x154>)
 800dc44:	f7ff fe31 	bl	800d8aa <strcmp>
 800dc48:	b930      	cbnz	r0, 800dc58 <HttpDaemon::HandleGet()+0xec>
 800dc4a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800dc4e:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800dc52:	f000 fa01 	bl	800e058 <remoteconfig::json_get_display(char*, unsigned short)>
 800dc56:	e79d      	b.n	800db94 <HttpDaemon::HandleGet()+0x28>
 800dc58:	4628      	mov	r0, r5
 800dc5a:	491a      	ldr	r1, [pc, #104]	; (800dcc4 <HttpDaemon::HandleGet()+0x158>)
 800dc5c:	f7ff fe25 	bl	800d8aa <strcmp>
 800dc60:	b930      	cbnz	r0, 800dc70 <HttpDaemon::HandleGet()+0x104>
 800dc62:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800dc66:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800dc6a:	f000 fa05 	bl	800e078 <remoteconfig::json_get_directory(char*, unsigned short)>
 800dc6e:	e791      	b.n	800db94 <HttpDaemon::HandleGet()+0x28>
 800dc70:	4620      	mov	r0, r4
 800dc72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc76:	f7ff bf37 	b.w	800dae8 <HttpDaemon::HandleGetTxt()>
 800dc7a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800dc7e:	e78e      	b.n	800db9e <HttpDaemon::HandleGet()+0x32>
 800dc80:	08014c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, lr}
 800dc84:	08014c25 	stmdaeq	r1, {r0, r2, r5, sl, fp, lr}
 800dc88:	08014e38 	stmdaeq	r1, {r3, r4, r5, r9, sl, fp, lr}
 800dc8c:	08014c26 	stmdaeq	r1, {r1, r2, r5, sl, fp, lr}
 800dc90:	08014c31 	stmdaeq	r1, {r0, r4, r5, sl, fp, lr}
 800dc94:	08014e58 	stmdaeq	r1, {r3, r4, r6, r9, sl, fp, lr}
 800dc98:	08014c32 	stmdaeq	r1, {r1, r4, r5, sl, fp, lr}
 800dc9c:	08014c3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, sl, fp, lr}
 800dca0:	08014c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, lr}
 800dca4:	08014e98 	stmdaeq	r1, {r3, r4, r7, r9, sl, fp, lr}
 800dca8:	08014c4e 	stmdaeq	r1, {r1, r2, r3, r6, sl, fp, lr}
 800dcac:	08014e78 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, fp, lr}
 800dcb0:	08014c3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, fp, lr}
 800dcb4:	08014c53 	stmdaeq	r1, {r0, r1, r4, r6, sl, fp, lr}
 800dcb8:	08014c5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, sl, fp, lr}
 800dcbc:	20001970 	andcs	r1, r0, r0, ror r9
 800dcc0:	08014c62 	stmdaeq	r1, {r1, r5, r6, sl, fp, lr}
 800dcc4:	08014c6a 	stmdaeq	r1, {r1, r3, r5, r6, sl, fp, lr}

0800dcc8 <HttpDaemon::HandlePost(bool)>:
 800dcc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcca:	4604      	mov	r4, r0
 800dccc:	2900      	cmp	r1, #0
 800dcce:	f040 8091 	bne.w	800ddf4 <HttpDaemon::HandlePost(bool)+0x12c>
 800dcd2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d05d      	beq.n	800dd96 <HttpDaemon::HandlePost(bool)+0xce>
 800dcda:	6845      	ldr	r5, [r0, #4]
 800dcdc:	4948      	ldr	r1, [pc, #288]	; (800de00 <HttpDaemon::HandlePost(bool)+0x138>)
 800dcde:	4628      	mov	r0, r5
 800dce0:	f7ff fde3 	bl	800d8aa <strcmp>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	bf0c      	ite	eq
 800dce8:	2301      	moveq	r3, #1
 800dcea:	2300      	movne	r3, #0
 800dcec:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800dcf0:	d055      	beq.n	800dd9e <HttpDaemon::HandlePost(bool)+0xd6>
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	4943      	ldr	r1, [pc, #268]	; (800de04 <HttpDaemon::HandlePost(bool)+0x13c>)
 800dcf6:	f7ff fdd8 	bl	800d8aa <strcmp>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d04f      	beq.n	800dd9e <HttpDaemon::HandlePost(bool)+0xd6>
 800dcfe:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800dd02:	e04a      	b.n	800dd9a <HttpDaemon::HandlePost(bool)+0xd2>
 800dd04:	4940      	ldr	r1, [pc, #256]	; (800de08 <HttpDaemon::HandlePost(bool)+0x140>)
 800dd06:	68a0      	ldr	r0, [r4, #8]
 800dd08:	f10d 0207 	add.w	r2, sp, #7
 800dd0c:	f003 fcda 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dd10:	b9e8      	cbnz	r0, 800dd4e <HttpDaemon::HandlePost(bool)+0x86>
 800dd12:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800dd16:	4b3d      	ldr	r3, [pc, #244]	; (800de0c <HttpDaemon::HandlePost(bool)+0x144>)
 800dd18:	fab6 f186 	clz	r1, r6
 800dd1c:	681d      	ldr	r5, [r3, #0]
 800dd1e:	0949      	lsrs	r1, r1, #5
 800dd20:	69a8      	ldr	r0, [r5, #24]
 800dd22:	b138      	cbz	r0, 800dd34 <HttpDaemon::HandlePost(bool)+0x6c>
 800dd24:	6803      	ldr	r3, [r0, #0]
 800dd26:	7429      	strb	r1, [r5, #16]
 800dd28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd2a:	4798      	blx	r3
 800dd2c:	b116      	cbz	r6, 800dd34 <HttpDaemon::HandlePost(bool)+0x6c>
 800dd2e:	4b38      	ldr	r3, [pc, #224]	; (800de10 <HttpDaemon::HandlePost(bool)+0x148>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	606b      	str	r3, [r5, #4]
 800dd34:	4620      	mov	r0, r4
 800dd36:	4b37      	ldr	r3, [pc, #220]	; (800de14 <HttpDaemon::HandlePost(bool)+0x14c>)
 800dd38:	f240 519f 	movw	r1, #1439	; 0x59f
 800dd3c:	4a36      	ldr	r2, [pc, #216]	; (800de18 <HttpDaemon::HandlePost(bool)+0x150>)
 800dd3e:	f840 3b22 	str.w	r3, [r0], #34
 800dd42:	f7fb fa9b 	bl	800927c <snprintf>
 800dd46:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800dd4a:	20c8      	movs	r0, #200	; 0xc8
 800dd4c:	e025      	b.n	800dd9a <HttpDaemon::HandlePost(bool)+0xd2>
 800dd4e:	4933      	ldr	r1, [pc, #204]	; (800de1c <HttpDaemon::HandlePost(bool)+0x154>)
 800dd50:	68a0      	ldr	r0, [r4, #8]
 800dd52:	f10d 0207 	add.w	r2, sp, #7
 800dd56:	f003 fcb5 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dd5a:	b9e0      	cbnz	r0, 800dd96 <HttpDaemon::HandlePost(bool)+0xce>
 800dd5c:	4b30      	ldr	r3, [pc, #192]	; (800de20 <HttpDaemon::HandlePost(bool)+0x158>)
 800dd5e:	6818      	ldr	r0, [r3, #0]
 800dd60:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dd64:	b11b      	cbz	r3, 800dd6e <HttpDaemon::HandlePost(bool)+0xa6>
 800dd66:	2104      	movs	r1, #4
 800dd68:	f004 f83a 	bl	8011de0 <LedBlink::SetMode(ledblink::Mode)>
 800dd6c:	e7e2      	b.n	800dd34 <HttpDaemon::HandlePost(bool)+0x6c>
 800dd6e:	2102      	movs	r1, #2
 800dd70:	e7fa      	b.n	800dd68 <HttpDaemon::HandlePost(bool)+0xa0>
 800dd72:	4b2c      	ldr	r3, [pc, #176]	; (800de24 <HttpDaemon::HandlePost(bool)+0x15c>)
 800dd74:	2001      	movs	r0, #1
 800dd76:	781d      	ldrb	r5, [r3, #0]
 800dd78:	f7ff fdbe 	bl	800d8f8 <PropertiesConfig::EnableJSON(bool)>
 800dd7c:	4b2a      	ldr	r3, [pc, #168]	; (800de28 <HttpDaemon::HandlePost(bool)+0x160>)
 800dd7e:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 800dd82:	6818      	ldr	r0, [r3, #0]
 800dd84:	68a1      	ldr	r1, [r4, #8]
 800dd86:	f005 0501 	and.w	r5, r5, #1
 800dd8a:	f7ff fa0f 	bl	800d1ac <RemoteConfig::HandleSet(void*, unsigned int)>
 800dd8e:	4628      	mov	r0, r5
 800dd90:	f7ff fdb2 	bl	800d8f8 <PropertiesConfig::EnableJSON(bool)>
 800dd94:	e7ce      	b.n	800dd34 <HttpDaemon::HandlePost(bool)+0x6c>
 800dd96:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800dd9a:	b002      	add	sp, #8
 800dd9c:	bd70      	pop	{r4, r5, r6, pc}
 800dd9e:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 800dda2:	6962      	ldr	r2, [r4, #20]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	dbd0      	blt.n	800dd4a <HttpDaemon::HandlePost(bool)+0x82>
 800dda8:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d0cc      	beq.n	800dd4a <HttpDaemon::HandlePost(bool)+0x82>
 800ddb0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d0dc      	beq.n	800dd72 <HttpDaemon::HandlePost(bool)+0xaa>
 800ddb8:	2201      	movs	r2, #1
 800ddba:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 800ddbe:	68a0      	ldr	r0, [r4, #8]
 800ddc0:	f003 f9f2 	bl	80111a8 <properties::convert_json_file(char*, unsigned short, bool)>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	dde6      	ble.n	800dd96 <HttpDaemon::HandlePost(bool)+0xce>
 800ddc8:	4918      	ldr	r1, [pc, #96]	; (800de2c <HttpDaemon::HandlePost(bool)+0x164>)
 800ddca:	68a0      	ldr	r0, [r4, #8]
 800ddcc:	f10d 0207 	add.w	r2, sp, #7
 800ddd0:	f003 fc78 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	d195      	bne.n	800dd04 <HttpDaemon::HandlePost(bool)+0x3c>
 800ddd8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d0a9      	beq.n	800dd34 <HttpDaemon::HandlePost(bool)+0x6c>
 800dde0:	4b11      	ldr	r3, [pc, #68]	; (800de28 <HttpDaemon::HandlePost(bool)+0x160>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f893 35d6 	ldrb.w	r3, [r3, #1494]	; 0x5d6
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d0d4      	beq.n	800dd96 <HttpDaemon::HandlePost(bool)+0xce>
 800ddec:	4b10      	ldr	r3, [pc, #64]	; (800de30 <HttpDaemon::HandlePost(bool)+0x168>)
 800ddee:	6818      	ldr	r0, [r3, #0]
 800ddf0:	f004 f89a 	bl	8011f28 <Hardware::Reboot()>
 800ddf4:	68c3      	ldr	r3, [r0, #12]
 800ddf6:	6083      	str	r3, [r0, #8]
 800ddf8:	6943      	ldr	r3, [r0, #20]
 800ddfa:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 800ddfe:	e7d7      	b.n	800ddb0 <HttpDaemon::HandlePost(bool)+0xe8>
 800de00:	08014c74 	stmdaeq	r1, {r2, r4, r5, r6, sl, fp, lr}
 800de04:	08014c10 	stmdaeq	r1, {r4, sl, fp, lr}
 800de08:	08014c62 	stmdaeq	r1, {r1, r5, r6, sl, fp, lr}
 800de0c:	2000a8c4 	andcs	sl, r0, r4, asr #17
 800de10:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800de14:	08014e38 	stmdaeq	r1, {r3, r4, r5, r9, sl, fp, lr}
 800de18:	08014c91 	stmdaeq	r1, {r0, r4, r7, sl, fp, lr}
 800de1c:	08014c88 	stmdaeq	r1, {r3, r7, sl, fp, lr}
 800de20:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0
 800de24:	2000a8c0 	andcs	sl, r0, r0, asr #17
 800de28:	20001970 	andcs	r1, r0, r0, ror r9
 800de2c:	08014c81 	stmdaeq	r1, {r0, r7, sl, fp, lr}
 800de30:	2000a9b4 			; <UNDEFINED> instruction: 0x2000a9b4

0800de34 <HttpDaemon::Run()>:
 800de34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de36:	4e4a      	ldr	r6, [pc, #296]	; (800df60 <HttpDaemon::Run()+0x12c>)
 800de38:	4604      	mov	r4, r0
 800de3a:	6901      	ldr	r1, [r0, #16]
 800de3c:	f100 020c 	add.w	r2, r0, #12
 800de40:	b085      	sub	sp, #20
 800de42:	6830      	ldr	r0, [r6, #0]
 800de44:	f002 f80f 	bl	800fe66 <Network::TcpRead(int, unsigned char const**)>
 800de48:	6160      	str	r0, [r4, #20]
 800de4a:	2800      	cmp	r0, #0
 800de4c:	d061      	beq.n	800df12 <HttpDaemon::Run()+0xde>
 800de4e:	69a3      	ldr	r3, [r4, #24]
 800de50:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800de54:	d15f      	bne.n	800df16 <HttpDaemon::Run()+0xe2>
 800de56:	4620      	mov	r0, r4
 800de58:	f7ff fe0e 	bl	800da78 <HttpDaemon::ParseRequest()>
 800de5c:	28c8      	cmp	r0, #200	; 0xc8
 800de5e:	61a0      	str	r0, [r4, #24]
 800de60:	d106      	bne.n	800de70 <HttpDaemon::Run()+0x3c>
 800de62:	69e3      	ldr	r3, [r4, #28]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d147      	bne.n	800def8 <HttpDaemon::Run()+0xc4>
 800de68:	4620      	mov	r0, r4
 800de6a:	f7ff fe7f 	bl	800db6c <HttpDaemon::HandleGet()>
 800de6e:	61a0      	str	r0, [r4, #24]
 800de70:	69a3      	ldr	r3, [r4, #24]
 800de72:	f104 0722 	add.w	r7, r4, #34	; 0x22
 800de76:	2bc8      	cmp	r3, #200	; 0xc8
 800de78:	d06f      	beq.n	800df5a <HttpDaemon::Run()+0x126>
 800de7a:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800de7e:	d062      	beq.n	800df46 <HttpDaemon::Run()+0x112>
 800de80:	dc52      	bgt.n	800df28 <HttpDaemon::Run()+0xf4>
 800de82:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800de86:	d060      	beq.n	800df4a <HttpDaemon::Run()+0x116>
 800de88:	f240 129d 	movw	r2, #413	; 0x19d
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d05e      	beq.n	800df4e <HttpDaemon::Run()+0x11a>
 800de90:	4d34      	ldr	r5, [pc, #208]	; (800df64 <HttpDaemon::Run()+0x130>)
 800de92:	4a35      	ldr	r2, [pc, #212]	; (800df68 <HttpDaemon::Run()+0x134>)
 800de94:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800de98:	bf18      	it	ne
 800de9a:	4615      	movne	r5, r2
 800de9c:	4a33      	ldr	r2, [pc, #204]	; (800df6c <HttpDaemon::Run()+0x138>)
 800de9e:	f240 519f 	movw	r1, #1439	; 0x59f
 800dea2:	6022      	str	r2, [r4, #0]
 800dea4:	4638      	mov	r0, r7
 800dea6:	e9cd 5500 	strd	r5, r5, [sp]
 800deaa:	4a31      	ldr	r2, [pc, #196]	; (800df70 <HttpDaemon::Run()+0x13c>)
 800deac:	f7fb f9e6 	bl	800927c <snprintf>
 800deb0:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800deb4:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800deb8:	f240 519f 	movw	r1, #1439	; 0x59f
 800debc:	9303      	str	r3, [sp, #12]
 800debe:	6823      	ldr	r3, [r4, #0]
 800dec0:	4a2c      	ldr	r2, [pc, #176]	; (800df74 <HttpDaemon::Run()+0x140>)
 800dec2:	9302      	str	r3, [sp, #8]
 800dec4:	4b2c      	ldr	r3, [pc, #176]	; (800df78 <HttpDaemon::Run()+0x144>)
 800dec6:	68e0      	ldr	r0, [r4, #12]
 800dec8:	e9cd 5300 	strd	r5, r3, [sp]
 800decc:	69a3      	ldr	r3, [r4, #24]
 800dece:	f7fb f9d5 	bl	800927c <snprintf>
 800ded2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800ded6:	b283      	uxth	r3, r0
 800ded8:	6830      	ldr	r0, [r6, #0]
 800deda:	f001 ffc8 	bl	800fe6e <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800dede:	463a      	mov	r2, r7
 800dee0:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800dee4:	6921      	ldr	r1, [r4, #16]
 800dee6:	6830      	ldr	r0, [r6, #0]
 800dee8:	f001 ffc1 	bl	800fe6e <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800deec:	f44f 7202 	mov.w	r2, #520	; 0x208
 800def0:	2302      	movs	r3, #2
 800def2:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800def6:	e00c      	b.n	800df12 <HttpDaemon::Run()+0xde>
 800def8:	2b01      	cmp	r3, #1
 800defa:	d1b9      	bne.n	800de70 <HttpDaemon::Run()+0x3c>
 800defc:	2100      	movs	r1, #0
 800defe:	4620      	mov	r0, r4
 800df00:	f7ff fee2 	bl	800dcc8 <HttpDaemon::HandlePost(bool)>
 800df04:	28c8      	cmp	r0, #200	; 0xc8
 800df06:	61a0      	str	r0, [r4, #24]
 800df08:	d1b2      	bne.n	800de70 <HttpDaemon::Run()+0x3c>
 800df0a:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1ae      	bne.n	800de70 <HttpDaemon::Run()+0x3c>
 800df12:	b005      	add	sp, #20
 800df14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df16:	2bc8      	cmp	r3, #200	; 0xc8
 800df18:	d1aa      	bne.n	800de70 <HttpDaemon::Run()+0x3c>
 800df1a:	69e1      	ldr	r1, [r4, #28]
 800df1c:	2901      	cmp	r1, #1
 800df1e:	d1a7      	bne.n	800de70 <HttpDaemon::Run()+0x3c>
 800df20:	4620      	mov	r0, r4
 800df22:	f7ff fed1 	bl	800dcc8 <HttpDaemon::HandlePost(bool)>
 800df26:	e7a2      	b.n	800de6e <HttpDaemon::Run()+0x3a>
 800df28:	f240 12f5 	movw	r2, #501	; 0x1f5
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d010      	beq.n	800df52 <HttpDaemon::Run()+0x11e>
 800df30:	f240 12f9 	movw	r2, #505	; 0x1f9
 800df34:	4293      	cmp	r3, r2
 800df36:	d00e      	beq.n	800df56 <HttpDaemon::Run()+0x122>
 800df38:	4d10      	ldr	r5, [pc, #64]	; (800df7c <HttpDaemon::Run()+0x148>)
 800df3a:	4a0b      	ldr	r2, [pc, #44]	; (800df68 <HttpDaemon::Run()+0x134>)
 800df3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800df40:	bf18      	it	ne
 800df42:	4615      	movne	r5, r2
 800df44:	e7aa      	b.n	800de9c <HttpDaemon::Run()+0x68>
 800df46:	4d0e      	ldr	r5, [pc, #56]	; (800df80 <HttpDaemon::Run()+0x14c>)
 800df48:	e7a8      	b.n	800de9c <HttpDaemon::Run()+0x68>
 800df4a:	4d0e      	ldr	r5, [pc, #56]	; (800df84 <HttpDaemon::Run()+0x150>)
 800df4c:	e7a6      	b.n	800de9c <HttpDaemon::Run()+0x68>
 800df4e:	4d0e      	ldr	r5, [pc, #56]	; (800df88 <HttpDaemon::Run()+0x154>)
 800df50:	e7a4      	b.n	800de9c <HttpDaemon::Run()+0x68>
 800df52:	4d0e      	ldr	r5, [pc, #56]	; (800df8c <HttpDaemon::Run()+0x158>)
 800df54:	e7a2      	b.n	800de9c <HttpDaemon::Run()+0x68>
 800df56:	4d0e      	ldr	r5, [pc, #56]	; (800df90 <HttpDaemon::Run()+0x15c>)
 800df58:	e7a0      	b.n	800de9c <HttpDaemon::Run()+0x68>
 800df5a:	4d0e      	ldr	r5, [pc, #56]	; (800df94 <HttpDaemon::Run()+0x160>)
 800df5c:	e7aa      	b.n	800deb4 <HttpDaemon::Run()+0x80>
 800df5e:	bf00      	nop
 800df60:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800df64:	08014ced 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, sl, fp, lr}
 800df68:	08014d74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, lr}
 800df6c:	08014e38 	stmdaeq	r1, {r3, r4, r5, r9, sl, fp, lr}
 800df70:	08014d85 	stmdaeq	r1, {r0, r2, r7, r8, sl, fp, lr}
 800df74:	08014de0 	stmdaeq	r1, {r5, r6, r7, r8, sl, fp, lr}
 800df78:	080143ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, lr}
 800df7c:	08014d31 	stmdaeq	r1, {r0, r4, r5, r8, sl, fp, lr}
 800df80:	08014d1c 	stmdaeq	r1, {r2, r3, r4, r8, sl, fp, lr}
 800df84:	08014cf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, sl, fp, lr}
 800df88:	08014d03 	stmdaeq	r1, {r0, r1, r8, sl, fp, lr}
 800df8c:	08014d47 	stmdaeq	r1, {r0, r1, r2, r6, r8, sl, fp, lr}
 800df90:	08014d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, lr}
 800df94:	08014d82 	stmdaeq	r1, {r1, r7, r8, sl, fp, lr}

0800df98 <remoteconfig::json_get_list(char*, unsigned short)>:
 800df98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df9c:	4b14      	ldr	r3, [pc, #80]	; (800dff0 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800df9e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800dff4 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	b088      	sub	sp, #32
 800dfa6:	4605      	mov	r5, r0
 800dfa8:	f8d8 0000 	ldr.w	r0, [r8]
 800dfac:	691c      	ldr	r4, [r3, #16]
 800dfae:	460e      	mov	r6, r1
 800dfb0:	f7fe ffd6 	bl	800cf60 <RemoteConfig::GetStringNode() const>
 800dfb4:	4607      	mov	r7, r0
 800dfb6:	f8d8 0000 	ldr.w	r0, [r8]
 800dfba:	f7fe ffdd 	bl	800cf78 <RemoteConfig::GetStringOutput() const>
 800dfbe:	4b0e      	ldr	r3, [pc, #56]	; (800dff8 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 800dfc0:	4631      	mov	r1, r6
 800dfc2:	7a1a      	ldrb	r2, [r3, #8]
 800dfc4:	3309      	adds	r3, #9
 800dfc6:	9303      	str	r3, [sp, #12]
 800dfc8:	0e23      	lsrs	r3, r4, #24
 800dfca:	9302      	str	r3, [sp, #8]
 800dfcc:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800dfd0:	9301      	str	r3, [sp, #4]
 800dfd2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800dfd6:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	4628      	mov	r0, r5
 800dfde:	4a07      	ldr	r2, [pc, #28]	; (800dffc <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 800dfe0:	9704      	str	r7, [sp, #16]
 800dfe2:	b2e3      	uxtb	r3, r4
 800dfe4:	f7fb f94a 	bl	800927c <snprintf>
 800dfe8:	b280      	uxth	r0, r0
 800dfea:	b008      	add	sp, #32
 800dfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dff0:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800dff4:	20001970 	andcs	r1, r0, r0, ror r9
 800dff8:	2000194c 	andcs	r1, r0, ip, asr #18
 800dffc:	08014f12 	stmdaeq	r1, {r1, r4, r8, r9, sl, fp, lr}

0800e000 <remoteconfig::json_get_version(char*, unsigned short)>:
 800e000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e002:	2208      	movs	r2, #8
 800e004:	4b09      	ldr	r3, [pc, #36]	; (800e02c <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800e006:	9204      	str	r2, [sp, #16]
 800e008:	f1a3 020b 	sub.w	r2, r3, #11
 800e00c:	9203      	str	r2, [sp, #12]
 800e00e:	220b      	movs	r2, #11
 800e010:	9202      	str	r2, [sp, #8]
 800e012:	4a07      	ldr	r2, [pc, #28]	; (800e030 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800e014:	9305      	str	r3, [sp, #20]
 800e016:	3b0e      	subs	r3, #14
 800e018:	9201      	str	r2, [sp, #4]
 800e01a:	9300      	str	r3, [sp, #0]
 800e01c:	4a05      	ldr	r2, [pc, #20]	; (800e034 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800e01e:	2303      	movs	r3, #3
 800e020:	f7fb f92c 	bl	800927c <snprintf>
 800e024:	b280      	uxth	r0, r0
 800e026:	b007      	add	sp, #28
 800e028:	f85d fb04 	ldr.w	pc, [sp], #4
 800e02c:	2000a962 	andcs	sl, r0, r2, ror #18
 800e030:	080143ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, lr}
 800e034:	08014f71 	stmdaeq	r1, {r0, r4, r5, r6, r8, r9, sl, fp, lr}

0800e038 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800e038:	b508      	push	{r3, lr}
 800e03a:	4b05      	ldr	r3, [pc, #20]	; (800e050 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e042:	fbb2 f3f3 	udiv	r3, r2, r3
 800e046:	4a03      	ldr	r2, [pc, #12]	; (800e054 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800e048:	f7fb f918 	bl	800927c <snprintf>
 800e04c:	b280      	uxth	r0, r0
 800e04e:	bd08      	pop	{r3, pc}
 800e050:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800e054:	08014fb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, r9, sl, fp, lr}

0800e058 <remoteconfig::json_get_display(char*, unsigned short)>:
 800e058:	b508      	push	{r3, lr}
 800e05a:	4b05      	ldr	r3, [pc, #20]	; (800e070 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800e05c:	4a05      	ldr	r2, [pc, #20]	; (800e074 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	7c1b      	ldrb	r3, [r3, #16]
 800e062:	f083 0301 	eor.w	r3, r3, #1
 800e066:	f7fb f909 	bl	800927c <snprintf>
 800e06a:	b280      	uxth	r0, r0
 800e06c:	bd08      	pop	{r3, pc}
 800e06e:	bf00      	nop
 800e070:	2000a8c4 	andcs	sl, r0, r4, asr #17
 800e074:	08014fc6 	stmdaeq	r1, {r1, r2, r6, r7, r8, r9, sl, fp, lr}

0800e078 <remoteconfig::json_get_directory(char*, unsigned short)>:
 800e078:	b508      	push	{r3, lr}
 800e07a:	4a02      	ldr	r2, [pc, #8]	; (800e084 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800e07c:	f7fb f8fe 	bl	800927c <snprintf>
 800e080:	b280      	uxth	r0, r0
 800e082:	bd08      	pop	{r3, pc}
 800e084:	08014fd5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, sl, fp, lr}

0800e088 <get_file_content(char const*, char*)>:
 800e088:	2300      	movs	r3, #0
 800e08a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e08c:	4a18      	ldr	r2, [pc, #96]	; (800e0f0 <get_file_content(char const*, char*)+0x68>)
 800e08e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800e092:	1e47      	subs	r7, r0, #1
 800e094:	1e6e      	subs	r6, r5, #1
 800e096:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 800e09a:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 800e09e:	4564      	cmp	r4, ip
 800e0a0:	d00b      	beq.n	800e0ba <get_file_content(char const*, char*)+0x32>
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	2b03      	cmp	r3, #3
 800e0a6:	d1f2      	bne.n	800e08e <get_file_content(char const*, char*)+0x6>
 800e0a8:	2333      	movs	r3, #51	; 0x33
 800e0aa:	4a12      	ldr	r2, [pc, #72]	; (800e0f4 <get_file_content(char const*, char*)+0x6c>)
 800e0ac:	4912      	ldr	r1, [pc, #72]	; (800e0f8 <get_file_content(char const*, char*)+0x70>)
 800e0ae:	4813      	ldr	r0, [pc, #76]	; (800e0fc <get_file_content(char const*, char*)+0x74>)
 800e0b0:	f7fb f8bc 	bl	800922c <printf>
 800e0b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e0b8:	e016      	b.n	800e0e8 <get_file_content(char const*, char*)+0x60>
 800e0ba:	2c00      	cmp	r4, #0
 800e0bc:	d1eb      	bne.n	800e096 <get_file_content(char const*, char*)+0xe>
 800e0be:	460c      	mov	r4, r1
 800e0c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e0c4:	6853      	ldr	r3, [r2, #4]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e0cc:	f804 2b01 	strb.w	r2, [r4], #1
 800e0d0:	2a00      	cmp	r2, #0
 800e0d2:	d1f9      	bne.n	800e0c8 <get_file_content(char const*, char*)+0x40>
 800e0d4:	1a64      	subs	r4, r4, r1
 800e0d6:	3c01      	subs	r4, #1
 800e0d8:	232e      	movs	r3, #46	; 0x2e
 800e0da:	e9cd 5400 	strd	r5, r4, [sp]
 800e0de:	4a06      	ldr	r2, [pc, #24]	; (800e0f8 <get_file_content(char const*, char*)+0x70>)
 800e0e0:	4904      	ldr	r1, [pc, #16]	; (800e0f4 <get_file_content(char const*, char*)+0x6c>)
 800e0e2:	4807      	ldr	r0, [pc, #28]	; (800e100 <get_file_content(char const*, char*)+0x78>)
 800e0e4:	f7fb f8a2 	bl	800922c <printf>
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	b003      	add	sp, #12
 800e0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	08015370 	stmdaeq	r1, {r4, r5, r6, r8, r9, ip, lr}
 800e0f4:	0801508b 	stmdaeq	r1, {r0, r1, r3, r7, ip, lr}
 800e0f8:	0801506c 	stmdaeq	r1, {r2, r3, r5, r6, ip, lr}
 800e0fc:	080150b8 	stmdaeq	r1, {r3, r4, r5, r7, ip, lr}
 800e100:	0801509c 	stmdaeq	r1, {r2, r3, r4, r7, ip, lr}

0800e104 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800e104:	2300      	movs	r3, #0
 800e106:	2020      	movs	r0, #32
 800e108:	b510      	push	{r4, lr}
 800e10a:	4a04      	ldr	r2, [pc, #16]	; (800e11c <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800e10c:	428b      	cmp	r3, r1
 800e10e:	d100      	bne.n	800e112 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 800e110:	bd10      	pop	{r4, pc}
 800e112:	f852 4b04 	ldr.w	r4, [r2], #4
 800e116:	3301      	adds	r3, #1
 800e118:	4420      	add	r0, r4
 800e11a:	e7f7      	b.n	800e10c <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800e11c:	080158b4 	stmdaeq	r1, {r2, r4, r5, r7, fp, ip, lr}

0800e120 <SpiFlashStore::Init()>:
 800e120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e124:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800e23c <SpiFlashStore::Init()+0x11c>
 800e128:	4607      	mov	r7, r0
 800e12a:	b085      	sub	sp, #20
 800e12c:	f8d8 0000 	ldr.w	r0, [r8]
 800e130:	f000 fbd4 	bl	800e8dc <FlashRom::GetSectorSize() const>
 800e134:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e138:	4605      	mov	r5, r0
 800e13a:	d17d      	bne.n	800e238 <SpiFlashStore::Init()+0x118>
 800e13c:	f8d8 0000 	ldr.w	r0, [r8]
 800e140:	f000 fbc4 	bl	800e8cc <FlashRom::GetSize() const>
 800e144:	4b3e      	ldr	r3, [pc, #248]	; (800e240 <SpiFlashStore::Init()+0x120>)
 800e146:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800e14a:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800e14e:	6019      	str	r1, [r3, #0]
 800e150:	2e00      	cmp	r6, #0
 800e152:	d171      	bne.n	800e238 <SpiFlashStore::Init()+0x118>
 800e154:	4c3b      	ldr	r4, [pc, #236]	; (800e244 <SpiFlashStore::Init()+0x124>)
 800e156:	ab03      	add	r3, sp, #12
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	462a      	mov	r2, r5
 800e15c:	4623      	mov	r3, r4
 800e15e:	f8d8 0000 	ldr.w	r0, [r8]
 800e162:	f000 fbbe 	bl	800e8e2 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800e166:	7823      	ldrb	r3, [r4, #0]
 800e168:	2b41      	cmp	r3, #65	; 0x41
 800e16a:	bf1c      	itt	ne
 800e16c:	2341      	movne	r3, #65	; 0x41
 800e16e:	7023      	strbne	r3, [r4, #0]
 800e170:	7863      	ldrb	r3, [r4, #1]
 800e172:	bf14      	ite	ne
 800e174:	4635      	movne	r5, r6
 800e176:	2501      	moveq	r5, #1
 800e178:	2b76      	cmp	r3, #118	; 0x76
 800e17a:	bf1c      	itt	ne
 800e17c:	2376      	movne	r3, #118	; 0x76
 800e17e:	7063      	strbne	r3, [r4, #1]
 800e180:	78a3      	ldrb	r3, [r4, #2]
 800e182:	bf18      	it	ne
 800e184:	2500      	movne	r5, #0
 800e186:	2b56      	cmp	r3, #86	; 0x56
 800e188:	bf1c      	itt	ne
 800e18a:	2356      	movne	r3, #86	; 0x56
 800e18c:	70a3      	strbne	r3, [r4, #2]
 800e18e:	78e3      	ldrb	r3, [r4, #3]
 800e190:	bf18      	it	ne
 800e192:	2500      	movne	r5, #0
 800e194:	2b10      	cmp	r3, #16
 800e196:	d022      	beq.n	800e1de <SpiFlashStore::Init()+0xbe>
 800e198:	2310      	movs	r3, #16
 800e19a:	70e3      	strb	r3, [r4, #3]
 800e19c:	2201      	movs	r2, #1
 800e19e:	2500      	movs	r5, #0
 800e1a0:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800e1a4:	4b28      	ldr	r3, [pc, #160]	; (800e248 <SpiFlashStore::Init()+0x128>)
 800e1a6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800e24c <SpiFlashStore::Init()+0x12c>
 800e1aa:	701a      	strb	r2, [r3, #0]
 800e1ac:	4631      	mov	r1, r6
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	f7ff ffa8 	bl	800e104 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e1b4:	1823      	adds	r3, r4, r0
 800e1b6:	5425      	strb	r5, [r4, r0]
 800e1b8:	705d      	strb	r5, [r3, #1]
 800e1ba:	709d      	strb	r5, [r3, #2]
 800e1bc:	70dd      	strb	r5, [r3, #3]
 800e1be:	f858 3b04 	ldr.w	r3, [r8], #4
 800e1c2:	1d02      	adds	r2, r0, #4
 800e1c4:	4403      	add	r3, r0
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d332      	bcc.n	800e230 <SpiFlashStore::Init()+0x110>
 800e1ca:	3601      	adds	r6, #1
 800e1cc:	2e1c      	cmp	r6, #28
 800e1ce:	d1ed      	bne.n	800e1ac <SpiFlashStore::Init()+0x8c>
 800e1d0:	2501      	movs	r5, #1
 800e1d2:	4b1f      	ldr	r3, [pc, #124]	; (800e250 <SpiFlashStore::Init()+0x130>)
 800e1d4:	601d      	str	r5, [r3, #0]
 800e1d6:	4628      	mov	r0, r5
 800e1d8:	b005      	add	sp, #20
 800e1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1de:	2d00      	cmp	r5, #0
 800e1e0:	d0dc      	beq.n	800e19c <SpiFlashStore::Init()+0x7c>
 800e1e2:	f04f 0900 	mov.w	r9, #0
 800e1e6:	46c8      	mov	r8, r9
 800e1e8:	4631      	mov	r1, r6
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	f7ff ff8a 	bl	800e104 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e1f0:	5c23      	ldrb	r3, [r4, r0]
 800e1f2:	2bff      	cmp	r3, #255	; 0xff
 800e1f4:	d112      	bne.n	800e21c <SpiFlashStore::Init()+0xfc>
 800e1f6:	1823      	adds	r3, r4, r0
 800e1f8:	785a      	ldrb	r2, [r3, #1]
 800e1fa:	2aff      	cmp	r2, #255	; 0xff
 800e1fc:	d10e      	bne.n	800e21c <SpiFlashStore::Init()+0xfc>
 800e1fe:	789a      	ldrb	r2, [r3, #2]
 800e200:	2aff      	cmp	r2, #255	; 0xff
 800e202:	d10b      	bne.n	800e21c <SpiFlashStore::Init()+0xfc>
 800e204:	78da      	ldrb	r2, [r3, #3]
 800e206:	2aff      	cmp	r2, #255	; 0xff
 800e208:	d108      	bne.n	800e21c <SpiFlashStore::Init()+0xfc>
 800e20a:	46a9      	mov	r9, r5
 800e20c:	f804 8000 	strb.w	r8, [r4, r0]
 800e210:	f883 8001 	strb.w	r8, [r3, #1]
 800e214:	f883 8002 	strb.w	r8, [r3, #2]
 800e218:	f883 8003 	strb.w	r8, [r3, #3]
 800e21c:	3601      	adds	r6, #1
 800e21e:	2e1c      	cmp	r6, #28
 800e220:	d1e2      	bne.n	800e1e8 <SpiFlashStore::Init()+0xc8>
 800e222:	f1b9 0f00 	cmp.w	r9, #0
 800e226:	d0d6      	beq.n	800e1d6 <SpiFlashStore::Init()+0xb6>
 800e228:	2201      	movs	r2, #1
 800e22a:	4b09      	ldr	r3, [pc, #36]	; (800e250 <SpiFlashStore::Init()+0x130>)
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	e7d2      	b.n	800e1d6 <SpiFlashStore::Init()+0xb6>
 800e230:	f804 9002 	strb.w	r9, [r4, r2]
 800e234:	3201      	adds	r2, #1
 800e236:	e7c6      	b.n	800e1c6 <SpiFlashStore::Init()+0xa6>
 800e238:	2500      	movs	r5, #0
 800e23a:	e7cc      	b.n	800e1d6 <SpiFlashStore::Init()+0xb6>
 800e23c:	200029a4 	andcs	r2, r0, r4, lsr #19
 800e240:	20002978 	andcs	r2, r0, r8, ror r9
 800e244:	20001978 	andcs	r1, r0, r8, ror r9
 800e248:	2000298c 	andcs	r2, r0, ip, lsl #19
 800e24c:	080158b4 	stmdaeq	r1, {r2, r4, r5, r7, fp, ip, lr}
 800e250:	20002984 	andcs	r2, r0, r4, lsl #19

0800e254 <SpiFlashStore::SpiFlashStore()>:
 800e254:	b538      	push	{r3, r4, r5, lr}
 800e256:	4b0d      	ldr	r3, [pc, #52]	; (800e28c <SpiFlashStore::SpiFlashStore()+0x38>)
 800e258:	4604      	mov	r4, r0
 800e25a:	6018      	str	r0, [r3, #0]
 800e25c:	4b0c      	ldr	r3, [pc, #48]	; (800e290 <SpiFlashStore::SpiFlashStore()+0x3c>)
 800e25e:	4d0d      	ldr	r5, [pc, #52]	; (800e294 <SpiFlashStore::SpiFlashStore()+0x40>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	b113      	cbz	r3, 800e26c <SpiFlashStore::SpiFlashStore()+0x18>
 800e266:	f7ff ff5b 	bl	800e120 <SpiFlashStore::Init()>
 800e26a:	7028      	strb	r0, [r5, #0]
 800e26c:	782b      	ldrb	r3, [r5, #0]
 800e26e:	b153      	cbz	r3, 800e286 <SpiFlashStore::SpiFlashStore()+0x32>
 800e270:	2320      	movs	r3, #32
 800e272:	2200      	movs	r2, #0
 800e274:	4908      	ldr	r1, [pc, #32]	; (800e298 <SpiFlashStore::SpiFlashStore()+0x44>)
 800e276:	f851 0b04 	ldr.w	r0, [r1], #4
 800e27a:	3201      	adds	r2, #1
 800e27c:	2a1c      	cmp	r2, #28
 800e27e:	4403      	add	r3, r0
 800e280:	d1f9      	bne.n	800e276 <SpiFlashStore::SpiFlashStore()+0x22>
 800e282:	4a06      	ldr	r2, [pc, #24]	; (800e29c <SpiFlashStore::SpiFlashStore()+0x48>)
 800e284:	6013      	str	r3, [r2, #0]
 800e286:	4620      	mov	r0, r4
 800e288:	bd38      	pop	{r3, r4, r5, pc}
 800e28a:	bf00      	nop
 800e28c:	20002988 	andcs	r2, r0, r8, lsl #19
 800e290:	200029a4 	andcs	r2, r0, r4, lsr #19
 800e294:	2000297c 	andcs	r2, r0, ip, ror r9
 800e298:	080158b4 	stmdaeq	r1, {r2, r4, r5, r7, fp, ip, lr}
 800e29c:	20002980 	andcs	r2, r0, r0, lsl #19

0800e2a0 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800e2a0:	b508      	push	{r3, lr}
 800e2a2:	f7ff ff2f 	bl	800e104 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	4904      	ldr	r1, [pc, #16]	; (800e2bc <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800e2aa:	1842      	adds	r2, r0, r1
 800e2ac:	540b      	strb	r3, [r1, r0]
 800e2ae:	7053      	strb	r3, [r2, #1]
 800e2b0:	7093      	strb	r3, [r2, #2]
 800e2b2:	70d3      	strb	r3, [r2, #3]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	4b02      	ldr	r3, [pc, #8]	; (800e2c0 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	bd08      	pop	{r3, pc}
 800e2bc:	20001978 	andcs	r1, r0, r8, ror r9
 800e2c0:	20002984 	andcs	r2, r0, r4, lsl #19

0800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800e2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c8:	461c      	mov	r4, r3
 800e2ca:	4b19      	ldr	r3, [pc, #100]	; (800e330 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800e2cc:	4615      	mov	r5, r2
 800e2ce:	781f      	ldrb	r7, [r3, #0]
 800e2d0:	9e07      	ldr	r6, [sp, #28]
 800e2d2:	b307      	cbz	r7, 800e316 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800e2d4:	f7ff ff16 	bl	800e104 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e2d8:	f04f 0c00 	mov.w	ip, #0
 800e2dc:	4a15      	ldr	r2, [pc, #84]	; (800e334 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800e2de:	1941      	adds	r1, r0, r5
 800e2e0:	1e63      	subs	r3, r4, #1
 800e2e2:	9c06      	ldr	r4, [sp, #24]
 800e2e4:	4411      	add	r1, r2
 800e2e6:	440c      	add	r4, r1
 800e2e8:	42a1      	cmp	r1, r4
 800e2ea:	d116      	bne.n	800e31a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 800e2ec:	f1bc 0f00 	cmp.w	ip, #0
 800e2f0:	d011      	beq.n	800e316 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800e2f2:	4b11      	ldr	r3, [pc, #68]	; (800e338 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800e2f4:	6819      	ldr	r1, [r3, #0]
 800e2f6:	b109      	cbz	r1, 800e2fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 800e2f8:	2906      	cmp	r1, #6
 800e2fa:	d101      	bne.n	800e300 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	6019      	str	r1, [r3, #0]
 800e300:	4b0e      	ldr	r3, [pc, #56]	; (800e33c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800e302:	6819      	ldr	r1, [r3, #0]
 800e304:	4b0e      	ldr	r3, [pc, #56]	; (800e340 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800e306:	6019      	str	r1, [r3, #0]
 800e308:	b12d      	cbz	r5, 800e316 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800e30a:	b126      	cbz	r6, 800e316 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800e30c:	9b08      	ldr	r3, [sp, #32]
 800e30e:	4418      	add	r0, r3
 800e310:	5813      	ldr	r3, [r2, r0]
 800e312:	4333      	orrs	r3, r6
 800e314:	5013      	str	r3, [r2, r0]
 800e316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e31a:	f891 8000 	ldrb.w	r8, [r1]
 800e31e:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e322:	3101      	adds	r1, #1
 800e324:	45f0      	cmp	r8, lr
 800e326:	bf1c      	itt	ne
 800e328:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800e32c:	46bc      	movne	ip, r7
 800e32e:	e7db      	b.n	800e2e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800e330:	2000297c 	andcs	r2, r0, ip, ror r9
 800e334:	20001978 	andcs	r1, r0, r8, ror r9
 800e338:	20002984 	andcs	r2, r0, r4, lsl #19
 800e33c:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800e340:	20001974 	andcs	r1, r0, r4, ror r9

0800e344 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 800e344:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e348:	461d      	mov	r5, r3
 800e34a:	4b11      	ldr	r3, [pc, #68]	; (800e390 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x4c>)
 800e34c:	4607      	mov	r7, r0
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	4614      	mov	r4, r2
 800e352:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800e356:	b1c3      	cbz	r3, 800e38a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 800e358:	f7ff fed4 	bl	800e104 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e35c:	4a0d      	ldr	r2, [pc, #52]	; (800e394 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x50>)
 800e35e:	eb00 0608 	add.w	r6, r0, r8
 800e362:	5990      	ldr	r0, [r2, r6]
 800e364:	18b3      	adds	r3, r6, r2
 800e366:	b140      	cbz	r0, 800e37a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x36>
 800e368:	3c01      	subs	r4, #1
 800e36a:	441d      	add	r5, r3
 800e36c:	429d      	cmp	r5, r3
 800e36e:	d00c      	beq.n	800e38a <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 800e370:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e374:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e378:	e7f8      	b.n	800e36c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x28>
 800e37a:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800e37e:	4623      	mov	r3, r4
 800e380:	4642      	mov	r2, r8
 800e382:	4638      	mov	r0, r7
 800e384:	9500      	str	r5, [sp, #0]
 800e386:	f7ff ff9d 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e38a:	b004      	add	sp, #16
 800e38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e390:	2000297c 	andcs	r2, r0, ip, ror r9
 800e394:	20001978 	andcs	r1, r0, r8, ror r9

0800e398 <SpiFlashStore::Flash()>:
 800e398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e39a:	4c25      	ldr	r4, [pc, #148]	; (800e430 <SpiFlashStore::Flash()+0x98>)
 800e39c:	6820      	ldr	r0, [r4, #0]
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	d043      	beq.n	800e42a <SpiFlashStore::Flash()+0x92>
 800e3a2:	3801      	subs	r0, #1
 800e3a4:	2805      	cmp	r0, #5
 800e3a6:	d831      	bhi.n	800e40c <SpiFlashStore::Flash()+0x74>
 800e3a8:	e8df f000 	tbb	[pc, r0]
 800e3ac:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800e3b0:	4b203025 	blmi	881a44c <__exidx_end+0x804018>
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	4b20      	ldr	r3, [pc, #128]	; (800e438 <SpiFlashStore::Flash()+0xa0>)
 800e3b8:	601a      	str	r2, [r3, #0]
 800e3ba:	2302      	movs	r3, #2
 800e3bc:	6023      	str	r3, [r4, #0]
 800e3be:	2001      	movs	r0, #1
 800e3c0:	e033      	b.n	800e42a <SpiFlashStore::Flash()+0x92>
 800e3c2:	4b1c      	ldr	r3, [pc, #112]	; (800e434 <SpiFlashStore::Flash()+0x9c>)
 800e3c4:	4a1c      	ldr	r2, [pc, #112]	; (800e438 <SpiFlashStore::Flash()+0xa0>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	6812      	ldr	r2, [r2, #0]
 800e3ca:	1a9b      	subs	r3, r3, r2
 800e3cc:	2b63      	cmp	r3, #99	; 0x63
 800e3ce:	d9f6      	bls.n	800e3be <SpiFlashStore::Flash()+0x26>
 800e3d0:	2303      	movs	r3, #3
 800e3d2:	e7f3      	b.n	800e3bc <SpiFlashStore::Flash()+0x24>
 800e3d4:	4919      	ldr	r1, [pc, #100]	; (800e43c <SpiFlashStore::Flash()+0xa4>)
 800e3d6:	481a      	ldr	r0, [pc, #104]	; (800e440 <SpiFlashStore::Flash()+0xa8>)
 800e3d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e3dc:	6809      	ldr	r1, [r1, #0]
 800e3de:	6800      	ldr	r0, [r0, #0]
 800e3e0:	ab03      	add	r3, sp, #12
 800e3e2:	f000 fa8d 	bl	800e900 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d0e9      	beq.n	800e3be <SpiFlashStore::Flash()+0x26>
 800e3ea:	4b12      	ldr	r3, [pc, #72]	; (800e434 <SpiFlashStore::Flash()+0x9c>)
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	4b12      	ldr	r3, [pc, #72]	; (800e438 <SpiFlashStore::Flash()+0xa0>)
 800e3f0:	601a      	str	r2, [r3, #0]
 800e3f2:	2305      	movs	r3, #5
 800e3f4:	e7e2      	b.n	800e3bc <SpiFlashStore::Flash()+0x24>
 800e3f6:	4b0f      	ldr	r3, [pc, #60]	; (800e434 <SpiFlashStore::Flash()+0x9c>)
 800e3f8:	4a0f      	ldr	r2, [pc, #60]	; (800e438 <SpiFlashStore::Flash()+0xa0>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	6812      	ldr	r2, [r2, #0]
 800e3fe:	1a9b      	subs	r3, r3, r2
 800e400:	2b63      	cmp	r3, #99	; 0x63
 800e402:	d9dc      	bls.n	800e3be <SpiFlashStore::Flash()+0x26>
 800e404:	2304      	movs	r3, #4
 800e406:	e7d9      	b.n	800e3bc <SpiFlashStore::Flash()+0x24>
 800e408:	2306      	movs	r3, #6
 800e40a:	e7d7      	b.n	800e3bc <SpiFlashStore::Flash()+0x24>
 800e40c:	ab03      	add	r3, sp, #12
 800e40e:	4a0d      	ldr	r2, [pc, #52]	; (800e444 <SpiFlashStore::Flash()+0xac>)
 800e410:	490a      	ldr	r1, [pc, #40]	; (800e43c <SpiFlashStore::Flash()+0xa4>)
 800e412:	480b      	ldr	r0, [pc, #44]	; (800e440 <SpiFlashStore::Flash()+0xa8>)
 800e414:	9300      	str	r3, [sp, #0]
 800e416:	6812      	ldr	r2, [r2, #0]
 800e418:	4b0b      	ldr	r3, [pc, #44]	; (800e448 <SpiFlashStore::Flash()+0xb0>)
 800e41a:	6809      	ldr	r1, [r1, #0]
 800e41c:	6800      	ldr	r0, [r0, #0]
 800e41e:	f000 fb0f 	bl	800ea40 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800e422:	2800      	cmp	r0, #0
 800e424:	d0cb      	beq.n	800e3be <SpiFlashStore::Flash()+0x26>
 800e426:	2000      	movs	r0, #0
 800e428:	6020      	str	r0, [r4, #0]
 800e42a:	b004      	add	sp, #16
 800e42c:	bd10      	pop	{r4, pc}
 800e42e:	bf00      	nop
 800e430:	20002984 	andcs	r2, r0, r4, lsl #19
 800e434:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800e438:	20001974 	andcs	r1, r0, r4, ror r9
 800e43c:	20002978 	andcs	r2, r0, r8, ror r9
 800e440:	200029a4 	andcs	r2, r0, r4, lsr #19
 800e444:	20002980 	andcs	r2, r0, r0, lsl #19
 800e448:	20001978 	andcs	r1, r0, r8, ror r9

0800e44c <StoreDisplayUdf::~StoreDisplayUdf()>:
 800e44c:	4770      	bx	lr
	...

0800e450 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 800e450:	2300      	movs	r3, #0
 800e452:	b507      	push	{r0, r1, r2, lr}
 800e454:	4805      	ldr	r0, [pc, #20]	; (800e46c <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	460a      	mov	r2, r1
 800e45a:	2322      	movs	r3, #34	; 0x22
 800e45c:	210f      	movs	r1, #15
 800e45e:	6800      	ldr	r0, [r0, #0]
 800e460:	f7ff ff70 	bl	800e344 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e464:	b003      	add	sp, #12
 800e466:	f85d fb04 	ldr.w	pc, [sp], #4
 800e46a:	bf00      	nop
 800e46c:	20002988 	andcs	r2, r0, r8, lsl #19

0800e470 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 800e470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e472:	2200      	movs	r2, #0
 800e474:	460b      	mov	r3, r1
 800e476:	2122      	movs	r1, #34	; 0x22
 800e478:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e47c:	4804      	ldr	r0, [pc, #16]	; (800e490 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800e47e:	9100      	str	r1, [sp, #0]
 800e480:	6800      	ldr	r0, [r0, #0]
 800e482:	210f      	movs	r1, #15
 800e484:	f7ff ff1e 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e488:	b005      	add	sp, #20
 800e48a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e48e:	bf00      	nop
 800e490:	20002988 	andcs	r2, r0, r8, lsl #19

0800e494 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800e494:	b510      	push	{r4, lr}
 800e496:	4604      	mov	r4, r0
 800e498:	f003 fd84 	bl	8011fa4 <operator delete(void*)>
 800e49c:	4620      	mov	r0, r4
 800e49e:	bd10      	pop	{r4, pc}

0800e4a0 <StoreDisplayUdf::StoreDisplayUdf()>:
 800e4a0:	4a02      	ldr	r2, [pc, #8]	; (800e4ac <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800e4a2:	6002      	str	r2, [r0, #0]
 800e4a4:	4a02      	ldr	r2, [pc, #8]	; (800e4b0 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 800e4a6:	6010      	str	r0, [r2, #0]
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop
 800e4ac:	0801592c 	stmdaeq	r1, {r2, r3, r5, r8, fp, ip, lr}
 800e4b0:	20002990 	mulcs	r0, r0, r9

0800e4b4 <StoreE131::~StoreE131()>:
 800e4b4:	4770      	bx	lr
	...

0800e4b8 <StoreE131::Copy(e131params::Params*)>:
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	b507      	push	{r0, r1, r2, lr}
 800e4bc:	4805      	ldr	r0, [pc, #20]	; (800e4d4 <StoreE131::Copy(e131params::Params*)+0x1c>)
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	460a      	mov	r2, r1
 800e4c2:	231f      	movs	r3, #31
 800e4c4:	2104      	movs	r1, #4
 800e4c6:	6800      	ldr	r0, [r0, #0]
 800e4c8:	f7ff ff3c 	bl	800e344 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e4cc:	b003      	add	sp, #12
 800e4ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4d2:	bf00      	nop
 800e4d4:	20002988 	andcs	r2, r0, r8, lsl #19

0800e4d8 <StoreE131::Update(e131params::Params const*)>:
 800e4d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4da:	2200      	movs	r2, #0
 800e4dc:	460b      	mov	r3, r1
 800e4de:	211f      	movs	r1, #31
 800e4e0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e4e4:	4804      	ldr	r0, [pc, #16]	; (800e4f8 <StoreE131::Update(e131params::Params const*)+0x20>)
 800e4e6:	9100      	str	r1, [sp, #0]
 800e4e8:	6800      	ldr	r0, [r0, #0]
 800e4ea:	2104      	movs	r1, #4
 800e4ec:	f7ff feea 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e4f0:	b005      	add	sp, #20
 800e4f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4f6:	bf00      	nop
 800e4f8:	20002988 	andcs	r2, r0, r8, lsl #19

0800e4fc <StoreE131::~StoreE131()>:
 800e4fc:	b510      	push	{r4, lr}
 800e4fe:	4604      	mov	r4, r0
 800e500:	f003 fd50 	bl	8011fa4 <operator delete(void*)>
 800e504:	4620      	mov	r0, r4
 800e506:	bd10      	pop	{r4, pc}

0800e508 <StoreE131::StoreE131()>:
 800e508:	4a02      	ldr	r2, [pc, #8]	; (800e514 <StoreE131::StoreE131()+0xc>)
 800e50a:	6002      	str	r2, [r0, #0]
 800e50c:	4a02      	ldr	r2, [pc, #8]	; (800e518 <StoreE131::StoreE131()+0x10>)
 800e50e:	6010      	str	r0, [r2, #0]
 800e510:	4770      	bx	lr
 800e512:	bf00      	nop
 800e514:	08015944 	stmdaeq	r1, {r2, r6, r8, fp, ip, lr}
 800e518:	20002994 	mulcs	r0, r4, r9

0800e51c <StoreNetwork::~StoreNetwork()>:
 800e51c:	4770      	bx	lr

0800e51e <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800e51e:	3804      	subs	r0, #4
 800e520:	4770      	bx	lr
	...

0800e524 <StoreNetwork::Update(TNetworkParams const*)>:
 800e524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e526:	2200      	movs	r2, #0
 800e528:	460b      	mov	r3, r1
 800e52a:	215e      	movs	r1, #94	; 0x5e
 800e52c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e530:	4804      	ldr	r0, [pc, #16]	; (800e544 <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 800e532:	9100      	str	r1, [sp, #0]
 800e534:	6800      	ldr	r0, [r0, #0]
 800e536:	4611      	mov	r1, r2
 800e538:	f7ff fec4 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e53c:	b005      	add	sp, #20
 800e53e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e542:	bf00      	nop
 800e544:	20002988 	andcs	r2, r0, r8, lsl #19

0800e548 <StoreNetwork::SaveDhcp(bool)>:
 800e548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e54a:	2301      	movs	r3, #1
 800e54c:	f88d 1017 	strb.w	r1, [sp, #23]
 800e550:	2100      	movs	r1, #0
 800e552:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e556:	4805      	ldr	r0, [pc, #20]	; (800e56c <StoreNetwork::SaveDhcp(bool)+0x24>)
 800e558:	9300      	str	r3, [sp, #0]
 800e55a:	2214      	movs	r2, #20
 800e55c:	6800      	ldr	r0, [r0, #0]
 800e55e:	f10d 0317 	add.w	r3, sp, #23
 800e562:	f7ff feaf 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e566:	b007      	add	sp, #28
 800e568:	f85d fb04 	ldr.w	pc, [sp], #4
 800e56c:	20002988 	andcs	r2, r0, r8, lsl #19

0800e570 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800e570:	f1a0 0004 	sub.w	r0, r0, #4
 800e574:	e7e8      	b.n	800e548 <StoreNetwork::SaveDhcp(bool)>
 800e576:	bf00      	nop

0800e578 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 800e578:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e57a:	2308      	movs	r3, #8
 800e57c:	9105      	str	r1, [sp, #20]
 800e57e:	2100      	movs	r1, #0
 800e580:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e584:	2304      	movs	r3, #4
 800e586:	4805      	ldr	r0, [pc, #20]	; (800e59c <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 800e588:	9300      	str	r3, [sp, #0]
 800e58a:	220c      	movs	r2, #12
 800e58c:	6800      	ldr	r0, [r0, #0]
 800e58e:	ab05      	add	r3, sp, #20
 800e590:	f7ff fe98 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e594:	b007      	add	sp, #28
 800e596:	f85d fb04 	ldr.w	pc, [sp], #4
 800e59a:	bf00      	nop
 800e59c:	20002988 	andcs	r2, r0, r8, lsl #19

0800e5a0 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 800e5a0:	f1a0 0004 	sub.w	r0, r0, #4
 800e5a4:	e7e8      	b.n	800e578 <StoreNetwork::SaveGatewayIp(unsigned int)>
 800e5a6:	bf00      	nop

0800e5a8 <StoreNetwork::SaveNetMask(unsigned int)>:
 800e5a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e5aa:	2304      	movs	r3, #4
 800e5ac:	9105      	str	r1, [sp, #20]
 800e5ae:	2100      	movs	r1, #0
 800e5b0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e5b4:	4804      	ldr	r0, [pc, #16]	; (800e5c8 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 800e5b6:	9300      	str	r3, [sp, #0]
 800e5b8:	2208      	movs	r2, #8
 800e5ba:	6800      	ldr	r0, [r0, #0]
 800e5bc:	ab05      	add	r3, sp, #20
 800e5be:	f7ff fe81 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e5c2:	b007      	add	sp, #28
 800e5c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5c8:	20002988 	andcs	r2, r0, r8, lsl #19

0800e5cc <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 800e5cc:	f1a0 0004 	sub.w	r0, r0, #4
 800e5d0:	e7ea      	b.n	800e5a8 <StoreNetwork::SaveNetMask(unsigned int)>
 800e5d2:	bf00      	nop

0800e5d4 <StoreNetwork::SaveIp(unsigned int)>:
 800e5d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e5d6:	2302      	movs	r3, #2
 800e5d8:	9105      	str	r1, [sp, #20]
 800e5da:	2100      	movs	r1, #0
 800e5dc:	2204      	movs	r2, #4
 800e5de:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e5e2:	4804      	ldr	r0, [pc, #16]	; (800e5f4 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 800e5e4:	9200      	str	r2, [sp, #0]
 800e5e6:	6800      	ldr	r0, [r0, #0]
 800e5e8:	ab05      	add	r3, sp, #20
 800e5ea:	f7ff fe6b 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e5ee:	b007      	add	sp, #28
 800e5f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5f4:	20002988 	andcs	r2, r0, r8, lsl #19

0800e5f8 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 800e5f8:	f1a0 0004 	sub.w	r0, r0, #4
 800e5fc:	e7ea      	b.n	800e5d4 <StoreNetwork::SaveIp(unsigned int)>
 800e5fe:	bf00      	nop

0800e600 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800e600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e602:	460b      	mov	r3, r1
 800e604:	2020      	movs	r0, #32
 800e606:	2100      	movs	r1, #0
 800e608:	2a40      	cmp	r2, #64	; 0x40
 800e60a:	bf28      	it	cs
 800e60c:	2240      	movcs	r2, #64	; 0x40
 800e60e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e612:	4804      	ldr	r0, [pc, #16]	; (800e624 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 800e614:	9200      	str	r2, [sp, #0]
 800e616:	6800      	ldr	r0, [r0, #0]
 800e618:	2215      	movs	r2, #21
 800e61a:	f7ff fe53 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e61e:	b005      	add	sp, #20
 800e620:	f85d fb04 	ldr.w	pc, [sp], #4
 800e624:	20002988 	andcs	r2, r0, r8, lsl #19

0800e628 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800e628:	f1a0 0004 	sub.w	r0, r0, #4
 800e62c:	e7e8      	b.n	800e600 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 800e62e:	bf00      	nop

0800e630 <StoreNetwork::~StoreNetwork()>:
 800e630:	b510      	push	{r4, lr}
 800e632:	4604      	mov	r4, r0
 800e634:	f003 fcb6 	bl	8011fa4 <operator delete(void*)>
 800e638:	4620      	mov	r0, r4
 800e63a:	bd10      	pop	{r4, pc}

0800e63c <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800e63c:	f1a0 0004 	sub.w	r0, r0, #4
 800e640:	e7f6      	b.n	800e630 <StoreNetwork::~StoreNetwork()>
	...

0800e644 <StoreNetwork::Copy(TNetworkParams*)>:
 800e644:	b507      	push	{r0, r1, r2, lr}
 800e646:	460a      	mov	r2, r1
 800e648:	2100      	movs	r1, #0
 800e64a:	4804      	ldr	r0, [pc, #16]	; (800e65c <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 800e64c:	9100      	str	r1, [sp, #0]
 800e64e:	235e      	movs	r3, #94	; 0x5e
 800e650:	6800      	ldr	r0, [r0, #0]
 800e652:	f7ff fe77 	bl	800e344 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e656:	b003      	add	sp, #12
 800e658:	f85d fb04 	ldr.w	pc, [sp], #4
 800e65c:	20002988 	andcs	r2, r0, r8, lsl #19

0800e660 <StoreNetwork::StoreNetwork()>:
 800e660:	4a03      	ldr	r2, [pc, #12]	; (800e670 <StoreNetwork::StoreNetwork()+0x10>)
 800e662:	6002      	str	r2, [r0, #0]
 800e664:	322c      	adds	r2, #44	; 0x2c
 800e666:	6042      	str	r2, [r0, #4]
 800e668:	4a02      	ldr	r2, [pc, #8]	; (800e674 <StoreNetwork::StoreNetwork()+0x14>)
 800e66a:	6010      	str	r0, [r2, #0]
 800e66c:	4770      	bx	lr
 800e66e:	bf00      	nop
 800e670:	0801595c 	stmdaeq	r1, {r2, r3, r4, r6, r8, fp, ip, lr}
 800e674:	20002998 	mulcs	r0, r8, r9

0800e678 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800e678:	4770      	bx	lr
	...

0800e67c <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 800e67c:	2300      	movs	r3, #0
 800e67e:	b507      	push	{r0, r1, r2, lr}
 800e680:	4805      	ldr	r0, [pc, #20]	; (800e698 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 800e682:	9300      	str	r3, [sp, #0]
 800e684:	460a      	mov	r2, r1
 800e686:	2320      	movs	r3, #32
 800e688:	210c      	movs	r1, #12
 800e68a:	6800      	ldr	r0, [r0, #0]
 800e68c:	f7ff fe5a 	bl	800e344 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e690:	b003      	add	sp, #12
 800e692:	f85d fb04 	ldr.w	pc, [sp], #4
 800e696:	bf00      	nop
 800e698:	20002988 	andcs	r2, r0, r8, lsl #19

0800e69c <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 800e69c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e69e:	2200      	movs	r2, #0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	2120      	movs	r1, #32
 800e6a4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e6a8:	4804      	ldr	r0, [pc, #16]	; (800e6bc <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 800e6aa:	9100      	str	r1, [sp, #0]
 800e6ac:	6800      	ldr	r0, [r0, #0]
 800e6ae:	210c      	movs	r1, #12
 800e6b0:	f7ff fe08 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e6b4:	b005      	add	sp, #20
 800e6b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e6ba:	bf00      	nop
 800e6bc:	20002988 	andcs	r2, r0, r8, lsl #19

0800e6c0 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	f003 fc6e 	bl	8011fa4 <operator delete(void*)>
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	bd10      	pop	{r4, pc}

0800e6cc <StoreRemoteConfig::StoreRemoteConfig()>:
 800e6cc:	4a02      	ldr	r2, [pc, #8]	; (800e6d8 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 800e6ce:	6002      	str	r2, [r0, #0]
 800e6d0:	4a02      	ldr	r2, [pc, #8]	; (800e6dc <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 800e6d2:	6010      	str	r0, [r2, #0]
 800e6d4:	4770      	bx	lr
 800e6d6:	bf00      	nop
 800e6d8:	080159ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, fp, ip, lr}
 800e6dc:	2000299c 	mulcs	r0, ip, r9

0800e6e0 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800e6e0:	4770      	bx	lr

0800e6e2 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800e6e2:	3804      	subs	r0, #4
 800e6e4:	4770      	bx	lr
	...

0800e6e8 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 800e6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	2127      	movs	r1, #39	; 0x27
 800e6f0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e6f4:	4804      	ldr	r0, [pc, #16]	; (800e708 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 800e6f6:	9100      	str	r1, [sp, #0]
 800e6f8:	6800      	ldr	r0, [r0, #0]
 800e6fa:	2103      	movs	r1, #3
 800e6fc:	f7ff fde2 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e700:	b005      	add	sp, #20
 800e702:	f85d fb04 	ldr.w	pc, [sp], #4
 800e706:	bf00      	nop
 800e708:	20002988 	andcs	r2, r0, r8, lsl #19

0800e70c <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 800e70c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e70e:	2304      	movs	r3, #4
 800e710:	2200      	movs	r2, #0
 800e712:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e716:	2302      	movs	r3, #2
 800e718:	4806      	ldr	r0, [pc, #24]	; (800e734 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e720:	2207      	movs	r2, #7
 800e722:	2103      	movs	r1, #3
 800e724:	6800      	ldr	r0, [r0, #0]
 800e726:	f10d 0316 	add.w	r3, sp, #22
 800e72a:	f7ff fdcb 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e72e:	b007      	add	sp, #28
 800e730:	f85d fb04 	ldr.w	pc, [sp], #4
 800e734:	20002988 	andcs	r2, r0, r8, lsl #19

0800e738 <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 800e738:	f1a0 0004 	sub.w	r0, r0, #4
 800e73c:	e7e6      	b.n	800e70c <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 800e73e:	bf00      	nop

0800e740 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800e740:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e742:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e746:	2200      	movs	r2, #0
 800e748:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e74c:	2301      	movs	r3, #1
 800e74e:	4807      	ldr	r0, [pc, #28]	; (800e76c <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	f88d 1017 	strb.w	r1, [sp, #23]
 800e756:	2226      	movs	r2, #38	; 0x26
 800e758:	2103      	movs	r1, #3
 800e75a:	6800      	ldr	r0, [r0, #0]
 800e75c:	f10d 0317 	add.w	r3, sp, #23
 800e760:	f7ff fdb0 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e764:	b007      	add	sp, #28
 800e766:	f85d fb04 	ldr.w	pc, [sp], #4
 800e76a:	bf00      	nop
 800e76c:	20002988 	andcs	r2, r0, r8, lsl #19

0800e770 <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800e770:	f1a0 0004 	sub.w	r0, r0, #4
 800e774:	e7e4      	b.n	800e740 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 800e776:	bf00      	nop

0800e778 <StoreWS28xxDmx::SaveMap(unsigned char)>:
 800e778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e77a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e77e:	2200      	movs	r2, #0
 800e780:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e784:	2301      	movs	r3, #1
 800e786:	4807      	ldr	r0, [pc, #28]	; (800e7a4 <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	f88d 1017 	strb.w	r1, [sp, #23]
 800e78e:	2213      	movs	r2, #19
 800e790:	2103      	movs	r1, #3
 800e792:	6800      	ldr	r0, [r0, #0]
 800e794:	f10d 0317 	add.w	r3, sp, #23
 800e798:	f7ff fd94 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e79c:	b007      	add	sp, #28
 800e79e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7a2:	bf00      	nop
 800e7a4:	20002988 	andcs	r2, r0, r8, lsl #19

0800e7a8 <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 800e7a8:	f1a0 0004 	sub.w	r0, r0, #4
 800e7ac:	e7e4      	b.n	800e778 <StoreWS28xxDmx::SaveMap(unsigned char)>
 800e7ae:	bf00      	nop

0800e7b0 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 800e7b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e7b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e7bc:	2302      	movs	r3, #2
 800e7be:	4807      	ldr	r0, [pc, #28]	; (800e7dc <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e7c6:	2211      	movs	r2, #17
 800e7c8:	2103      	movs	r1, #3
 800e7ca:	6800      	ldr	r0, [r0, #0]
 800e7cc:	f10d 0316 	add.w	r3, sp, #22
 800e7d0:	f7ff fd78 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e7d4:	b007      	add	sp, #28
 800e7d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7da:	bf00      	nop
 800e7dc:	20002988 	andcs	r2, r0, r8, lsl #19

0800e7e0 <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 800e7e0:	f1a0 0004 	sub.w	r0, r0, #4
 800e7e4:	e7e4      	b.n	800e7b0 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 800e7e6:	bf00      	nop

0800e7e8 <StoreWS28xxDmx::SaveCount(unsigned short)>:
 800e7e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e7ea:	2302      	movs	r3, #2
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e7f2:	4807      	ldr	r0, [pc, #28]	; (800e810 <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e7fa:	2205      	movs	r2, #5
 800e7fc:	2103      	movs	r1, #3
 800e7fe:	6800      	ldr	r0, [r0, #0]
 800e800:	f10d 0316 	add.w	r3, sp, #22
 800e804:	f7ff fd5e 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e808:	b007      	add	sp, #28
 800e80a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e80e:	bf00      	nop
 800e810:	20002988 	andcs	r2, r0, r8, lsl #19

0800e814 <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 800e814:	f1a0 0004 	sub.w	r0, r0, #4
 800e818:	e7e6      	b.n	800e7e8 <StoreWS28xxDmx::SaveCount(unsigned short)>
 800e81a:	bf00      	nop

0800e81c <StoreWS28xxDmx::SaveType(unsigned char)>:
 800e81c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e81e:	2301      	movs	r3, #1
 800e820:	2200      	movs	r2, #0
 800e822:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e826:	4807      	ldr	r0, [pc, #28]	; (800e844 <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 800e828:	9300      	str	r3, [sp, #0]
 800e82a:	f88d 1017 	strb.w	r1, [sp, #23]
 800e82e:	2204      	movs	r2, #4
 800e830:	2103      	movs	r1, #3
 800e832:	6800      	ldr	r0, [r0, #0]
 800e834:	f10d 0317 	add.w	r3, sp, #23
 800e838:	f7ff fd44 	bl	800e2c4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e83c:	b007      	add	sp, #28
 800e83e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e842:	bf00      	nop
 800e844:	20002988 	andcs	r2, r0, r8, lsl #19

0800e848 <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 800e848:	f1a0 0004 	sub.w	r0, r0, #4
 800e84c:	e7e6      	b.n	800e81c <StoreWS28xxDmx::SaveType(unsigned char)>
 800e84e:	bf00      	nop

0800e850 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800e850:	b510      	push	{r4, lr}
 800e852:	4604      	mov	r4, r0
 800e854:	f003 fba6 	bl	8011fa4 <operator delete(void*)>
 800e858:	4620      	mov	r0, r4
 800e85a:	bd10      	pop	{r4, pc}

0800e85c <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800e85c:	f1a0 0004 	sub.w	r0, r0, #4
 800e860:	e7f6      	b.n	800e850 <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

0800e864 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 800e864:	2300      	movs	r3, #0
 800e866:	b507      	push	{r0, r1, r2, lr}
 800e868:	4805      	ldr	r0, [pc, #20]	; (800e880 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 800e86a:	9300      	str	r3, [sp, #0]
 800e86c:	460a      	mov	r2, r1
 800e86e:	2327      	movs	r3, #39	; 0x27
 800e870:	2103      	movs	r1, #3
 800e872:	6800      	ldr	r0, [r0, #0]
 800e874:	f7ff fd66 	bl	800e344 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e878:	b003      	add	sp, #12
 800e87a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e87e:	bf00      	nop
 800e880:	20002988 	andcs	r2, r0, r8, lsl #19

0800e884 <StoreWS28xxDmx::StoreWS28xxDmx()>:
 800e884:	4a03      	ldr	r2, [pc, #12]	; (800e894 <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 800e886:	6002      	str	r2, [r0, #0]
 800e888:	3230      	adds	r2, #48	; 0x30
 800e88a:	6042      	str	r2, [r0, #4]
 800e88c:	4a02      	ldr	r2, [pc, #8]	; (800e898 <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 800e88e:	6010      	str	r0, [r2, #0]
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	080159c4 	stmdaeq	r1, {r2, r6, r7, r8, fp, ip, lr}
 800e898:	200029a0 	andcs	r2, r0, r0, lsr #19

0800e89c <FlashRom::FlashRom()>:
 800e89c:	4b07      	ldr	r3, [pc, #28]	; (800e8bc <FlashRom::FlashRom()+0x20>)
 800e89e:	b510      	push	{r4, lr}
 800e8a0:	6018      	str	r0, [r3, #0]
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	4604      	mov	r4, r0
 800e8a6:	7003      	strb	r3, [r0, #0]
 800e8a8:	4b05      	ldr	r3, [pc, #20]	; (800e8c0 <FlashRom::FlashRom()+0x24>)
 800e8aa:	4906      	ldr	r1, [pc, #24]	; (800e8c4 <FlashRom::FlashRom()+0x28>)
 800e8ac:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800e8b0:	4805      	ldr	r0, [pc, #20]	; (800e8c8 <FlashRom::FlashRom()+0x2c>)
 800e8b2:	029a      	lsls	r2, r3, #10
 800e8b4:	f7fa fcba 	bl	800922c <printf>
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	bd10      	pop	{r4, pc}
 800e8bc:	200029a4 	andcs	r2, r0, r4, lsr #19
 800e8c0:	1ffff700 	svcne	0x00fff700
 800e8c4:	080143ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, lr}
 800e8c8:	08015a14 	stmdaeq	r1, {r2, r4, r9, fp, ip, lr}

0800e8cc <FlashRom::GetSize() const>:
 800e8cc:	4b02      	ldr	r3, [pc, #8]	; (800e8d8 <FlashRom::GetSize() const+0xc>)
 800e8ce:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800e8d2:	0280      	lsls	r0, r0, #10
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	1ffff700 	svcne	0x00fff700

0800e8dc <FlashRom::GetSectorSize() const>:
 800e8dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e8e0:	4770      	bx	lr

0800e8e2 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 800e8e2:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800e8e6:	441a      	add	r2, r3
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d104      	bne.n	800e8f6 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	9b00      	ldr	r3, [sp, #0]
 800e8f0:	2001      	movs	r0, #1
 800e8f2:	601a      	str	r2, [r3, #0]
 800e8f4:	4770      	bx	lr
 800e8f6:	f851 0b04 	ldr.w	r0, [r1], #4
 800e8fa:	f843 0b04 	str.w	r0, [r3], #4
 800e8fe:	e7f3      	b.n	800e8e8 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

0800e900 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 800e900:	2000      	movs	r0, #0
 800e902:	b538      	push	{r3, r4, r5, lr}
 800e904:	4c47      	ldr	r4, [pc, #284]	; (800ea24 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 800e906:	6018      	str	r0, [r3, #0]
 800e908:	6823      	ldr	r3, [r4, #0]
 800e90a:	2b04      	cmp	r3, #4
 800e90c:	f200 8082 	bhi.w	800ea14 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800e910:	e8df f003 	tbb	[pc, r3]
 800e914:	78452003 	stmdavc	r5, {r0, r1, sp}^
 800e918:	4b430080 	blmi	90ceb20 <__exidx_end+0x10b86ec>
 800e91c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800e920:	6019      	str	r1, [r3, #0]
 800e922:	4b42      	ldr	r3, [pc, #264]	; (800ea2c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800e924:	601a      	str	r2, [r3, #0]
 800e926:	4b42      	ldr	r3, [pc, #264]	; (800ea30 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 800e928:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800e92c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e930:	4b40      	ldr	r3, [pc, #256]	; (800ea34 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800e932:	d807      	bhi.n	800e944 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 800e934:	2201      	movs	r2, #1
 800e936:	701a      	strb	r2, [r3, #0]
 800e938:	f003 fe36 	bl	80125a8 <fmc_bank0_unlock>
 800e93c:	2301      	movs	r3, #1
 800e93e:	6023      	str	r3, [r4, #0]
 800e940:	2000      	movs	r0, #0
 800e942:	e026      	b.n	800e992 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800e944:	4a3c      	ldr	r2, [pc, #240]	; (800ea38 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 800e946:	4291      	cmp	r1, r2
 800e948:	d3f4      	bcc.n	800e934 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 800e94a:	2200      	movs	r2, #0
 800e94c:	701a      	strb	r2, [r3, #0]
 800e94e:	f003 fe39 	bl	80125c4 <fmc_bank1_unlock>
 800e952:	e7f3      	b.n	800e93c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800e954:	4d37      	ldr	r5, [pc, #220]	; (800ea34 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800e956:	782b      	ldrb	r3, [r5, #0]
 800e958:	b15b      	cbz	r3, 800e972 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 800e95a:	f003 fe51 	bl	8012600 <fmc_bank0_state_get>
 800e95e:	2801      	cmp	r0, #1
 800e960:	d0ee      	beq.n	800e940 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 800e962:	7829      	ldrb	r1, [r5, #0]
 800e964:	4b35      	ldr	r3, [pc, #212]	; (800ea3c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800e966:	b939      	cbnz	r1, 800e978 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 800e968:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e96a:	f022 0202 	bic.w	r2, r2, #2
 800e96e:	651a      	str	r2, [r3, #80]	; 0x50
 800e970:	e006      	b.n	800e980 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 800e972:	f003 fe57 	bl	8012624 <fmc_bank1_state_get>
 800e976:	e7f2      	b.n	800e95e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 800e978:	691a      	ldr	r2, [r3, #16]
 800e97a:	f022 0202 	bic.w	r2, r2, #2
 800e97e:	611a      	str	r2, [r3, #16]
 800e980:	4b2a      	ldr	r3, [pc, #168]	; (800ea2c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	b94b      	cbnz	r3, 800e99a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 800e986:	b129      	cbz	r1, 800e994 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 800e988:	f003 fe2a 	bl	80125e0 <fmc_bank0_lock>
 800e98c:	2300      	movs	r3, #0
 800e98e:	2001      	movs	r0, #1
 800e990:	6023      	str	r3, [r4, #0]
 800e992:	bd38      	pop	{r3, r4, r5, pc}
 800e994:	f003 fe2c 	bl	80125f0 <fmc_bank1_lock>
 800e998:	e7f8      	b.n	800e98c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 800e99a:	2302      	movs	r3, #2
 800e99c:	e7cf      	b.n	800e93e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 800e99e:	4923      	ldr	r1, [pc, #140]	; (800ea2c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800e9a0:	680b      	ldr	r3, [r1, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d0ca      	beq.n	800e93c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800e9a6:	4b23      	ldr	r3, [pc, #140]	; (800ea34 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800e9a8:	4a1f      	ldr	r2, [pc, #124]	; (800ea28 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 800e9aa:	7818      	ldrb	r0, [r3, #0]
 800e9ac:	4b23      	ldr	r3, [pc, #140]	; (800ea3c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800e9ae:	b190      	cbz	r0, 800e9d6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 800e9b0:	6918      	ldr	r0, [r3, #16]
 800e9b2:	f040 0002 	orr.w	r0, r0, #2
 800e9b6:	6118      	str	r0, [r3, #16]
 800e9b8:	6810      	ldr	r0, [r2, #0]
 800e9ba:	6158      	str	r0, [r3, #20]
 800e9bc:	6918      	ldr	r0, [r3, #16]
 800e9be:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800e9c2:	6118      	str	r0, [r3, #16]
 800e9c4:	680b      	ldr	r3, [r1, #0]
 800e9c6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800e9ca:	600b      	str	r3, [r1, #0]
 800e9cc:	6813      	ldr	r3, [r2, #0]
 800e9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	e7b2      	b.n	800e93c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800e9d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e9d8:	f040 0002 	orr.w	r0, r0, #2
 800e9dc:	6518      	str	r0, [r3, #80]	; 0x50
 800e9de:	6810      	ldr	r0, [r2, #0]
 800e9e0:	6558      	str	r0, [r3, #84]	; 0x54
 800e9e2:	69dd      	ldr	r5, [r3, #28]
 800e9e4:	07ad      	lsls	r5, r5, #30
 800e9e6:	bf48      	it	mi
 800e9e8:	6158      	strmi	r0, [r3, #20]
 800e9ea:	4814      	ldr	r0, [pc, #80]	; (800ea3c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800e9ec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e9ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9f2:	6503      	str	r3, [r0, #80]	; 0x50
 800e9f4:	680b      	ldr	r3, [r1, #0]
 800e9f6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800e9fa:	600b      	str	r3, [r1, #0]
 800e9fc:	6813      	ldr	r3, [r2, #0]
 800e9fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ea02:	e7e6      	b.n	800e9d2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 800ea04:	4b0b      	ldr	r3, [pc, #44]	; (800ea34 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800ea06:	781a      	ldrb	r2, [r3, #0]
 800ea08:	4b0c      	ldr	r3, [pc, #48]	; (800ea3c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800ea0a:	b132      	cbz	r2, 800ea1a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 800ea0c:	691a      	ldr	r2, [r3, #16]
 800ea0e:	f022 0201 	bic.w	r2, r2, #1
 800ea12:	611a      	str	r2, [r3, #16]
 800ea14:	2000      	movs	r0, #0
 800ea16:	6020      	str	r0, [r4, #0]
 800ea18:	e7bb      	b.n	800e992 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800ea1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea1c:	f022 0201 	bic.w	r2, r2, #1
 800ea20:	651a      	str	r2, [r3, #80]	; 0x50
 800ea22:	e7f7      	b.n	800ea14 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800ea24:	200029ac 	andcs	r2, r0, ip, lsr #19
 800ea28:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 800ea2c:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 800ea30:	1ffff700 	svcne	0x00fff700
 800ea34:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 800ea38:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800ea3c:	40022000 	andmi	r2, r2, r0

0800ea40 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 800ea40:	b570      	push	{r4, r5, r6, lr}
 800ea42:	2400      	movs	r4, #0
 800ea44:	9804      	ldr	r0, [sp, #16]
 800ea46:	6004      	str	r4, [r0, #0]
 800ea48:	4c48      	ldr	r4, [pc, #288]	; (800eb6c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 800ea4a:	6820      	ldr	r0, [r4, #0]
 800ea4c:	2804      	cmp	r0, #4
 800ea4e:	d848      	bhi.n	800eae2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 800ea50:	e8df f000 	tbb	[pc, r0]
 800ea54:	22847c03 	addcs	r7, r4, #768	; 0x300
 800ea58:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 800ea5c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800ea60:	6001      	str	r1, [r0, #0]
 800ea62:	4844      	ldr	r0, [pc, #272]	; (800eb74 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800ea64:	6003      	str	r3, [r0, #0]
 800ea66:	4b44      	ldr	r3, [pc, #272]	; (800eb78 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800ea68:	601a      	str	r2, [r3, #0]
 800ea6a:	4b44      	ldr	r3, [pc, #272]	; (800eb7c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 800ea6c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800ea70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea74:	4b42      	ldr	r3, [pc, #264]	; (800eb80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800ea76:	d807      	bhi.n	800ea88 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 800ea78:	2201      	movs	r2, #1
 800ea7a:	701a      	strb	r2, [r3, #0]
 800ea7c:	f003 fd94 	bl	80125a8 <fmc_bank0_unlock>
 800ea80:	2303      	movs	r3, #3
 800ea82:	6023      	str	r3, [r4, #0]
 800ea84:	2000      	movs	r0, #0
 800ea86:	e026      	b.n	800ead6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800ea88:	4a3e      	ldr	r2, [pc, #248]	; (800eb84 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 800ea8a:	4291      	cmp	r1, r2
 800ea8c:	d3f4      	bcc.n	800ea78 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 800ea8e:	2200      	movs	r2, #0
 800ea90:	701a      	strb	r2, [r3, #0]
 800ea92:	f003 fd97 	bl	80125c4 <fmc_bank1_unlock>
 800ea96:	e7f3      	b.n	800ea80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800ea98:	4d39      	ldr	r5, [pc, #228]	; (800eb80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800ea9a:	782b      	ldrb	r3, [r5, #0]
 800ea9c:	b15b      	cbz	r3, 800eab6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 800ea9e:	f003 fdaf 	bl	8012600 <fmc_bank0_state_get>
 800eaa2:	2801      	cmp	r0, #1
 800eaa4:	d0ee      	beq.n	800ea84 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 800eaa6:	7829      	ldrb	r1, [r5, #0]
 800eaa8:	4b37      	ldr	r3, [pc, #220]	; (800eb88 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800eaaa:	b939      	cbnz	r1, 800eabc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 800eaac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eaae:	f022 0201 	bic.w	r2, r2, #1
 800eab2:	651a      	str	r2, [r3, #80]	; 0x50
 800eab4:	e006      	b.n	800eac4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 800eab6:	f003 fdb5 	bl	8012624 <fmc_bank1_state_get>
 800eaba:	e7f2      	b.n	800eaa2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 800eabc:	691a      	ldr	r2, [r3, #16]
 800eabe:	f022 0201 	bic.w	r2, r2, #1
 800eac2:	611a      	str	r2, [r3, #16]
 800eac4:	4b2c      	ldr	r3, [pc, #176]	; (800eb78 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	b94b      	cbnz	r3, 800eade <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 800eaca:	b129      	cbz	r1, 800ead8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 800eacc:	f003 fd88 	bl	80125e0 <fmc_bank0_lock>
 800ead0:	2300      	movs	r3, #0
 800ead2:	2001      	movs	r0, #1
 800ead4:	6023      	str	r3, [r4, #0]
 800ead6:	bd70      	pop	{r4, r5, r6, pc}
 800ead8:	f003 fd8a 	bl	80125f0 <fmc_bank1_lock>
 800eadc:	e7f8      	b.n	800ead0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 800eade:	2304      	movs	r3, #4
 800eae0:	e7cf      	b.n	800ea82 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 800eae2:	4a25      	ldr	r2, [pc, #148]	; (800eb78 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800eae4:	6813      	ldr	r3, [r2, #0]
 800eae6:	2b03      	cmp	r3, #3
 800eae8:	d91a      	bls.n	800eb20 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 800eaea:	4b25      	ldr	r3, [pc, #148]	; (800eb80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800eaec:	7819      	ldrb	r1, [r3, #0]
 800eaee:	4b26      	ldr	r3, [pc, #152]	; (800eb88 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800eaf0:	b189      	cbz	r1, 800eb16 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 800eaf2:	6919      	ldr	r1, [r3, #16]
 800eaf4:	f041 0101 	orr.w	r1, r1, #1
 800eaf8:	6119      	str	r1, [r3, #16]
 800eafa:	4d1e      	ldr	r5, [pc, #120]	; (800eb74 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800eafc:	481c      	ldr	r0, [pc, #112]	; (800eb70 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800eafe:	6829      	ldr	r1, [r5, #0]
 800eb00:	6803      	ldr	r3, [r0, #0]
 800eb02:	f851 6b04 	ldr.w	r6, [r1], #4
 800eb06:	f843 6b04 	str.w	r6, [r3], #4
 800eb0a:	6003      	str	r3, [r0, #0]
 800eb0c:	6813      	ldr	r3, [r2, #0]
 800eb0e:	6029      	str	r1, [r5, #0]
 800eb10:	3b04      	subs	r3, #4
 800eb12:	6013      	str	r3, [r2, #0]
 800eb14:	e7b4      	b.n	800ea80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800eb16:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800eb18:	f041 0101 	orr.w	r1, r1, #1
 800eb1c:	6519      	str	r1, [r3, #80]	; 0x50
 800eb1e:	e7ec      	b.n	800eafa <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d0ad      	beq.n	800ea80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800eb24:	4b16      	ldr	r3, [pc, #88]	; (800eb80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800eb26:	781a      	ldrb	r2, [r3, #0]
 800eb28:	4b17      	ldr	r3, [pc, #92]	; (800eb88 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800eb2a:	b152      	cbz	r2, 800eb42 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 800eb2c:	691a      	ldr	r2, [r3, #16]
 800eb2e:	f042 0201 	orr.w	r2, r2, #1
 800eb32:	611a      	str	r2, [r3, #16]
 800eb34:	4a0f      	ldr	r2, [pc, #60]	; (800eb74 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800eb36:	4b0e      	ldr	r3, [pc, #56]	; (800eb70 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800eb38:	6812      	ldr	r2, [r2, #0]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	6812      	ldr	r2, [r2, #0]
 800eb3e:	601a      	str	r2, [r3, #0]
 800eb40:	e79e      	b.n	800ea80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800eb42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb44:	f042 0201 	orr.w	r2, r2, #1
 800eb48:	651a      	str	r2, [r3, #80]	; 0x50
 800eb4a:	e7f3      	b.n	800eb34 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 800eb4c:	4b0c      	ldr	r3, [pc, #48]	; (800eb80 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800eb4e:	781a      	ldrb	r2, [r3, #0]
 800eb50:	4b0d      	ldr	r3, [pc, #52]	; (800eb88 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800eb52:	b132      	cbz	r2, 800eb62 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 800eb54:	691a      	ldr	r2, [r3, #16]
 800eb56:	f022 0202 	bic.w	r2, r2, #2
 800eb5a:	611a      	str	r2, [r3, #16]
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	6020      	str	r0, [r4, #0]
 800eb60:	e7b9      	b.n	800ead6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800eb62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb64:	f022 0202 	bic.w	r2, r2, #2
 800eb68:	651a      	str	r2, [r3, #80]	; 0x50
 800eb6a:	e7f7      	b.n	800eb5c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 800eb6c:	200029ac 	andcs	r2, r0, ip, lsr #19
 800eb70:	200029a8 	andcs	r2, r0, r8, lsr #19
 800eb74:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800eb78:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 800eb7c:	1ffff700 	svcne	0x00fff700
 800eb80:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 800eb84:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800eb88:	40022000 	andmi	r2, r2, r0

0800eb8c <net_timers_run>:
 800eb8c:	4b05      	ldr	r3, [pc, #20]	; (800eba4 <net_timers_run+0x18>)
 800eb8e:	4a06      	ldr	r2, [pc, #24]	; (800eba8 <net_timers_run+0x1c>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	6811      	ldr	r1, [r2, #0]
 800eb94:	4299      	cmp	r1, r3
 800eb96:	d803      	bhi.n	800eba0 <net_timers_run+0x14>
 800eb98:	3364      	adds	r3, #100	; 0x64
 800eb9a:	6013      	str	r3, [r2, #0]
 800eb9c:	f001 be7a 	b.w	8010894 <igmp_timer>
 800eba0:	4770      	bx	lr
 800eba2:	bf00      	nop
 800eba4:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800eba8:	200029d8 	ldrdcs	r2, [r0], -r8

0800ebac <rfc3927>:
 800ebac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb0:	4606      	mov	r6, r0
 800ebb2:	25ff      	movs	r5, #255	; 0xff
 800ebb4:	4b18      	ldr	r3, [pc, #96]	; (800ec18 <rfc3927+0x6c>)
 800ebb6:	4f19      	ldr	r7, [pc, #100]	; (800ec1c <rfc3927+0x70>)
 800ebb8:	791a      	ldrb	r2, [r3, #4]
 800ebba:	78dc      	ldrb	r4, [r3, #3]
 800ebbc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800ec20 <rfc3927+0x74>
 800ebc0:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800ebc4:	f8d7 9000 	ldr.w	r9, [r7]
 800ebc8:	f8df b058 	ldr.w	fp, [pc, #88]	; 800ec24 <rfc3927+0x78>
 800ebcc:	f8df a058 	ldr.w	sl, [pc, #88]	; 800ec28 <rfc3927+0x7c>
 800ebd0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800ebd4:	4659      	mov	r1, fp
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	f001 fbbc 	bl	8010354 <arp_cache_lookup>
 800ebdc:	b190      	cbz	r0, 800ec04 <rfc3927+0x58>
 800ebde:	ba24      	rev	r4, r4
 800ebe0:	3401      	adds	r4, #1
 800ebe2:	3d01      	subs	r5, #1
 800ebe4:	ba24      	rev	r4, r4
 800ebe6:	b2ad      	uxth	r5, r5
 800ebe8:	4554      	cmp	r4, sl
 800ebea:	bf08      	it	eq
 800ebec:	4644      	moveq	r4, r8
 800ebee:	b18d      	cbz	r5, 800ec14 <rfc3927+0x68>
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	eba3 0309 	sub.w	r3, r3, r9
 800ebf6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ebfa:	d3eb      	bcc.n	800ebd4 <rfc3927+0x28>
 800ebfc:	2400      	movs	r4, #0
 800ebfe:	4623      	mov	r3, r4
 800ec00:	4620      	mov	r0, r4
 800ec02:	e002      	b.n	800ec0a <rfc3927+0x5e>
 800ec04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ec08:	2001      	movs	r0, #1
 800ec0a:	e9c6 3401 	strd	r3, r4, [r6, #4]
 800ec0e:	6034      	str	r4, [r6, #0]
 800ec10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec14:	462c      	mov	r4, r5
 800ec16:	e7f2      	b.n	800ebfe <rfc3927+0x52>
 800ec18:	200029dc 	ldrdcs	r2, [r0], -ip
 800ec1c:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800ec20:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 800ec24:	200029e4 	andcs	r2, r0, r4, ror #19
 800ec28:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

0800ec2c <_init_tcb>:
 800ec2c:	b510      	push	{r4, lr}
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2400      	movs	r4, #0
 800ec32:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d10d      	bne.n	800ec56 <_init_tcb+0x2a>
 800ec3a:	4b08      	ldr	r3, [pc, #32]	; (800ec5c <_init_tcb+0x30>)
 800ec3c:	f640 3268 	movw	r2, #2920	; 0xb68
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	8702      	strh	r2, [r0, #56]	; 0x38
 800ec44:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec48:	6283      	str	r3, [r0, #40]	; 0x28
 800ec4a:	6243      	str	r3, [r0, #36]	; 0x24
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	8001      	strh	r1, [r0, #0]
 800ec50:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800ec54:	bd10      	pop	{r4, pc}
 800ec56:	f803 4b01 	strb.w	r4, [r3], #1
 800ec5a:	e7ec      	b.n	800ec36 <_init_tcb+0xa>
 800ec5c:	2000a9cc 	andcs	sl, r0, ip, asr #19

0800ec60 <memcpy.isra.0>:
 800ec60:	3801      	subs	r0, #1
 800ec62:	440a      	add	r2, r1
 800ec64:	4291      	cmp	r1, r2
 800ec66:	d100      	bne.n	800ec6a <memcpy.isra.0+0xa>
 800ec68:	4770      	bx	lr
 800ec6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec6e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ec72:	e7f7      	b.n	800ec64 <memcpy.isra.0+0x4>

0800ec74 <_bswap32>:
 800ec74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec76:	2204      	movs	r2, #4
 800ec78:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	4604      	mov	r4, r0
 800ec80:	eb0d 0002 	add.w	r0, sp, r2
 800ec84:	f7ff ffec 	bl	800ec60 <memcpy.isra.0>
 800ec88:	2204      	movs	r2, #4
 800ec8a:	9b01      	ldr	r3, [sp, #4]
 800ec8c:	eb0d 0102 	add.w	r1, sp, r2
 800ec90:	ba1b      	rev	r3, r3
 800ec92:	4628      	mov	r0, r5
 800ec94:	9301      	str	r3, [sp, #4]
 800ec96:	f7ff ffe3 	bl	800ec60 <memcpy.isra.0>
 800ec9a:	2204      	movs	r2, #4
 800ec9c:	3426      	adds	r4, #38	; 0x26
 800ec9e:	eb0d 0002 	add.w	r0, sp, r2
 800eca2:	4621      	mov	r1, r4
 800eca4:	f7ff ffdc 	bl	800ec60 <memcpy.isra.0>
 800eca8:	2204      	movs	r2, #4
 800ecaa:	9b01      	ldr	r3, [sp, #4]
 800ecac:	4620      	mov	r0, r4
 800ecae:	ba1b      	rev	r3, r3
 800ecb0:	eb0d 0102 	add.w	r1, sp, r2
 800ecb4:	9301      	str	r3, [sp, #4]
 800ecb6:	f7ff ffd3 	bl	800ec60 <memcpy.isra.0>
 800ecba:	b003      	add	sp, #12
 800ecbc:	bd30      	pop	{r4, r5, pc}
	...

0800ecc0 <_tcp_send_package>:
 800ecc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc4:	7a0b      	ldrb	r3, [r1, #8]
 800ecc6:	4605      	mov	r5, r0
 800ecc8:	f013 0f02 	tst.w	r3, #2
 800eccc:	bf0c      	ite	eq
 800ecce:	f04f 0805 	moveq.w	r8, #5
 800ecd2:	f04f 0806 	movne.w	r8, #6
 800ecd6:	f04f 0a00 	mov.w	sl, #0
 800ecda:	4c47      	ldr	r4, [pc, #284]	; (800edf8 <_tcp_send_package+0x138>)
 800ecdc:	460f      	mov	r7, r1
 800ecde:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 800ece0:	f100 0108 	add.w	r1, r0, #8
 800ece4:	2206      	movs	r2, #6
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7ff ffba 	bl	800ec60 <memcpy.isra.0>
 800ecec:	4a43      	ldr	r2, [pc, #268]	; (800edfc <_tcp_send_package+0x13c>)
 800ecee:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800ecf2:	8813      	ldrh	r3, [r2, #0]
 800ecf4:	b2b6      	uxth	r6, r6
 800ecf6:	1c59      	adds	r1, r3, #1
 800ecf8:	8263      	strh	r3, [r4, #18]
 800ecfa:	f105 0904 	add.w	r9, r5, #4
 800ecfe:	f106 0314 	add.w	r3, r6, #20
 800ed02:	ba5b      	rev16	r3, r3
 800ed04:	8011      	strh	r1, [r2, #0]
 800ed06:	f104 001e 	add.w	r0, r4, #30
 800ed0a:	2204      	movs	r2, #4
 800ed0c:	4649      	mov	r1, r9
 800ed0e:	8223      	strh	r3, [r4, #16]
 800ed10:	f7ff ffa6 	bl	800ec60 <memcpy.isra.0>
 800ed14:	2114      	movs	r1, #20
 800ed16:	f104 000e 	add.w	r0, r4, #14
 800ed1a:	f8a4 a018 	strh.w	sl, [r4, #24]
 800ed1e:	f001 fe4c 	bl	80109ba <net_chksum>
 800ed22:	882b      	ldrh	r3, [r5, #0]
 800ed24:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800ed28:	8463      	strh	r3, [r4, #34]	; 0x22
 800ed2a:	886b      	ldrh	r3, [r5, #2]
 800ed2c:	8320      	strh	r0, [r4, #24]
 800ed2e:	84a3      	strh	r3, [r4, #36]	; 0x24
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 800ed34:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 800ed3e:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 800ed42:	7a3b      	ldrb	r3, [r7, #8]
 800ed44:	8622      	strh	r2, [r4, #48]	; 0x30
 800ed46:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800ed4a:	079b      	lsls	r3, r3, #30
 800ed4c:	bf48      	it	mi
 800ed4e:	f240 4302 	movwmi	r3, #1026	; 0x402
 800ed52:	8baa      	ldrh	r2, [r5, #28]
 800ed54:	bf48      	it	mi
 800ed56:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 800ed58:	86a2      	strh	r2, [r4, #52]	; 0x34
 800ed5a:	bf42      	ittt	mi
 800ed5c:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 800ed60:	4622      	movmi	r2, r4
 800ed62:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 800ed66:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ed68:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 800ed6c:	bf58      	it	pl
 800ed6e:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d13e      	bne.n	800edf4 <_tcp_send_package+0x134>
 800ed76:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800ed78:	481f      	ldr	r0, [pc, #124]	; (800edf8 <_tcp_send_package+0x138>)
 800ed7a:	ba5b      	rev16	r3, r3
 800ed7c:	8463      	strh	r3, [r4, #34]	; 0x22
 800ed7e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800ed80:	ba5b      	rev16	r3, r3
 800ed82:	84a3      	strh	r3, [r4, #36]	; 0x24
 800ed84:	f7ff ff76 	bl	800ec74 <_bswap32>
 800ed88:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ed8a:	a801      	add	r0, sp, #4
 800ed8c:	ba5b      	rev16	r3, r3
 800ed8e:	8623      	strh	r3, [r4, #48]	; 0x30
 800ed90:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800ed92:	220c      	movs	r2, #12
 800ed94:	ba5b      	rev16	r3, r3
 800ed96:	491a      	ldr	r1, [pc, #104]	; (800ee00 <_tcp_send_package+0x140>)
 800ed98:	86a3      	strh	r3, [r4, #52]	; 0x34
 800ed9a:	f7ff ff61 	bl	800ec60 <memcpy.isra.0>
 800ed9e:	2204      	movs	r2, #4
 800eda0:	4918      	ldr	r1, [pc, #96]	; (800ee04 <_tcp_send_package+0x144>)
 800eda2:	4817      	ldr	r0, [pc, #92]	; (800ee00 <_tcp_send_package+0x140>)
 800eda4:	f7ff ff5c 	bl	800ec60 <memcpy.isra.0>
 800eda8:	2204      	movs	r2, #4
 800edaa:	4649      	mov	r1, r9
 800edac:	4816      	ldr	r0, [pc, #88]	; (800ee08 <_tcp_send_package+0x148>)
 800edae:	f7ff ff57 	bl	800ec60 <memcpy.isra.0>
 800edb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800edb6:	f106 010c 	add.w	r1, r6, #12
 800edba:	83e3      	strh	r3, [r4, #30]
 800edbc:	4810      	ldr	r0, [pc, #64]	; (800ee00 <_tcp_send_package+0x140>)
 800edbe:	ba73      	rev16	r3, r6
 800edc0:	8423      	strh	r3, [r4, #32]
 800edc2:	f001 fdfa 	bl	80109ba <net_chksum>
 800edc6:	a901      	add	r1, sp, #4
 800edc8:	4605      	mov	r5, r0
 800edca:	220c      	movs	r2, #12
 800edcc:	480c      	ldr	r0, [pc, #48]	; (800ee00 <_tcp_send_package+0x140>)
 800edce:	f7ff ff47 	bl	800ec60 <memcpy.isra.0>
 800edd2:	4809      	ldr	r0, [pc, #36]	; (800edf8 <_tcp_send_package+0x138>)
 800edd4:	f106 0122 	add.w	r1, r6, #34	; 0x22
 800edd8:	8665      	strh	r5, [r4, #50]	; 0x32
 800edda:	b004      	add	sp, #16
 800eddc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ede0:	f004 b88a 	b.w	8012ef8 <emac_eth_send>
 800ede4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800ede6:	5cc9      	ldrb	r1, [r1, r3]
 800ede8:	54d1      	strb	r1, [r2, r3]
 800edea:	3301      	adds	r3, #1
 800edec:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800edee:	4299      	cmp	r1, r3
 800edf0:	d8f8      	bhi.n	800ede4 <_tcp_send_package+0x124>
 800edf2:	e7c0      	b.n	800ed76 <_tcp_send_package+0xb6>
 800edf4:	2300      	movs	r3, #0
 800edf6:	e7f9      	b.n	800edec <_tcp_send_package+0x12c>
 800edf8:	200035a4 	andcs	r3, r0, r4, lsr #11
 800edfc:	200029ec 	andcs	r2, r0, ip, ror #19
 800ee00:	200035ba 			; <UNDEFINED> instruction: 0x200035ba
 800ee04:	200029c0 	andcs	r2, r0, r0, asr #19
 800ee08:	200035be 			; <UNDEFINED> instruction: 0x200035be

0800ee0c <_send_reset>:
 800ee0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ee0e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800ee12:	4604      	mov	r4, r0
 800ee14:	075a      	lsls	r2, r3, #29
 800ee16:	460e      	mov	r6, r1
 800ee18:	d421      	bmi.n	800ee5e <_send_reset+0x52>
 800ee1a:	2204      	movs	r2, #4
 800ee1c:	f013 0310 	ands.w	r3, r3, #16
 800ee20:	f88d 200c 	strb.w	r2, [sp, #12]
 800ee24:	d01d      	beq.n	800ee62 <_send_reset+0x56>
 800ee26:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 800ee2a:	4668      	mov	r0, sp
 800ee2c:	f7ff ff18 	bl	800ec60 <memcpy.isra.0>
 800ee30:	9b00      	ldr	r3, [sp, #0]
 800ee32:	9301      	str	r3, [sp, #4]
 800ee34:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ee38:	4668      	mov	r0, sp
 800ee3a:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800ee3e:	f104 0126 	add.w	r1, r4, #38	; 0x26
 800ee42:	07db      	lsls	r3, r3, #31
 800ee44:	f04f 0204 	mov.w	r2, #4
 800ee48:	bf48      	it	mi
 800ee4a:	3501      	addmi	r5, #1
 800ee4c:	f7ff ff08 	bl	800ec60 <memcpy.isra.0>
 800ee50:	9b00      	ldr	r3, [sp, #0]
 800ee52:	4630      	mov	r0, r6
 800ee54:	441d      	add	r5, r3
 800ee56:	a901      	add	r1, sp, #4
 800ee58:	9502      	str	r5, [sp, #8]
 800ee5a:	f7ff ff31 	bl	800ecc0 <_tcp_send_package>
 800ee5e:	b004      	add	sp, #16
 800ee60:	bd70      	pop	{r4, r5, r6, pc}
 800ee62:	9301      	str	r3, [sp, #4]
 800ee64:	2314      	movs	r3, #20
 800ee66:	f88d 300c 	strb.w	r3, [sp, #12]
 800ee6a:	e7e3      	b.n	800ee34 <_send_reset+0x28>

0800ee6c <tcp_begin>:
 800ee6c:	b508      	push	{r3, lr}
 800ee6e:	4b0a      	ldr	r3, [pc, #40]	; (800ee98 <tcp_begin+0x2c>)
 800ee70:	4601      	mov	r1, r0
 800ee72:	881a      	ldrh	r2, [r3, #0]
 800ee74:	4282      	cmp	r2, r0
 800ee76:	d102      	bne.n	800ee7e <tcp_begin+0x12>
 800ee78:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ee7c:	b130      	cbz	r0, 800ee8c <tcp_begin+0x20>
 800ee7e:	b12a      	cbz	r2, 800ee8c <tcp_begin+0x20>
 800ee80:	4806      	ldr	r0, [pc, #24]	; (800ee9c <tcp_begin+0x30>)
 800ee82:	f002 ff1b 	bl	8011cbc <console_error>
 800ee86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee8a:	bd08      	pop	{r3, pc}
 800ee8c:	4802      	ldr	r0, [pc, #8]	; (800ee98 <tcp_begin+0x2c>)
 800ee8e:	8019      	strh	r1, [r3, #0]
 800ee90:	f7ff fecc 	bl	800ec2c <_init_tcb>
 800ee94:	2000      	movs	r0, #0
 800ee96:	e7f8      	b.n	800ee8a <tcp_begin+0x1e>
 800ee98:	20003560 	andcs	r3, r0, r0, ror #10
 800ee9c:	08015a42 	stmdaeq	r1, {r1, r6, r9, fp, ip, lr}

0800eea0 <tcp_write>:
 800eea0:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800eea4:	429a      	cmp	r2, r3
 800eea6:	bf28      	it	cs
 800eea8:	461a      	movcs	r2, r3
 800eeaa:	2344      	movs	r3, #68	; 0x44
 800eeac:	b530      	push	{r4, r5, lr}
 800eeae:	4c0d      	ldr	r4, [pc, #52]	; (800eee4 <tcp_write+0x44>)
 800eeb0:	b085      	sub	sp, #20
 800eeb2:	fb03 4400 	mla	r4, r3, r0, r4
 800eeb6:	6963      	ldr	r3, [r4, #20]
 800eeb8:	62e1      	str	r1, [r4, #44]	; 0x2c
 800eeba:	9301      	str	r3, [sp, #4]
 800eebc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eebe:	4620      	mov	r0, r4
 800eec0:	9302      	str	r3, [sp, #8]
 800eec2:	2318      	movs	r3, #24
 800eec4:	8622      	strh	r2, [r4, #48]	; 0x30
 800eec6:	a901      	add	r1, sp, #4
 800eec8:	4615      	mov	r5, r2
 800eeca:	f88d 300c 	strb.w	r3, [sp, #12]
 800eece:	f7ff fef7 	bl	800ecc0 <_tcp_send_package>
 800eed2:	2300      	movs	r3, #0
 800eed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eed6:	8623      	strh	r3, [r4, #48]	; 0x30
 800eed8:	6963      	ldr	r3, [r4, #20]
 800eeda:	442b      	add	r3, r5
 800eedc:	6163      	str	r3, [r4, #20]
 800eede:	b005      	add	sp, #20
 800eee0:	bd30      	pop	{r4, r5, pc}
 800eee2:	bf00      	nop
 800eee4:	20003560 	andcs	r3, r0, r0, ror #10

0800eee8 <tcp_read>:
 800eee8:	2344      	movs	r3, #68	; 0x44
 800eeea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeec:	4c1c      	ldr	r4, [pc, #112]	; (800ef60 <tcp_read+0x78>)
 800eeee:	b085      	sub	sp, #20
 800eef0:	fb03 4400 	mla	r4, r3, r0, r4
 800eef4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800eef8:	2b07      	cmp	r3, #7
 800eefa:	d112      	bne.n	800ef22 <tcp_read+0x3a>
 800eefc:	6963      	ldr	r3, [r4, #20]
 800eefe:	4620      	mov	r0, r4
 800ef00:	9301      	str	r3, [sp, #4]
 800ef02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef04:	a901      	add	r1, sp, #4
 800ef06:	9302      	str	r3, [sp, #8]
 800ef08:	2311      	movs	r3, #17
 800ef0a:	f88d 300c 	strb.w	r3, [sp, #12]
 800ef0e:	f7ff fed7 	bl	800ecc0 <_tcp_send_package>
 800ef12:	2309      	movs	r3, #9
 800ef14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ef18:	6963      	ldr	r3, [r4, #20]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	6163      	str	r3, [r4, #20]
 800ef1e:	2000      	movs	r0, #0
 800ef20:	e01b      	b.n	800ef5a <tcp_read+0x72>
 800ef22:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 800ef26:	4358      	muls	r0, r3
 800ef28:	4a0e      	ldr	r2, [pc, #56]	; (800ef64 <tcp_read+0x7c>)
 800ef2a:	1817      	adds	r7, r2, r0
 800ef2c:	887b      	ldrh	r3, [r7, #2]
 800ef2e:	5a15      	ldrh	r5, [r2, r0]
 800ef30:	429d      	cmp	r5, r3
 800ef32:	d0f4      	beq.n	800ef1e <tcp_read+0x36>
 800ef34:	f240 55b6 	movw	r5, #1462	; 0x5b6
 800ef38:	435d      	muls	r5, r3
 800ef3a:	1d06      	adds	r6, r0, #4
 800ef3c:	442e      	add	r6, r5
 800ef3e:	4416      	add	r6, r2
 800ef40:	4405      	add	r5, r0
 800ef42:	600e      	str	r6, [r1, #0]
 800ef44:	442a      	add	r2, r5
 800ef46:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 800ef4a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800ef52:	f003 0301 	and.w	r3, r3, #1
 800ef56:	8722      	strh	r2, [r4, #56]	; 0x38
 800ef58:	807b      	strh	r3, [r7, #2]
 800ef5a:	b005      	add	sp, #20
 800ef5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	20003560 	andcs	r3, r0, r0, ror #10
 800ef64:	200029f0 	strdcs	r2, [r0], -r0

0800ef68 <memcpy.isra.0>:
 800ef68:	3801      	subs	r0, #1
 800ef6a:	440a      	add	r2, r1
 800ef6c:	4291      	cmp	r1, r2
 800ef6e:	d100      	bne.n	800ef72 <memcpy.isra.0+0xa>
 800ef70:	4770      	bx	lr
 800ef72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef76:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ef7a:	e7f7      	b.n	800ef6c <memcpy.isra.0+0x4>

0800ef7c <net_memcpy>:
 800ef7c:	ea40 0301 	orr.w	r3, r0, r1
 800ef80:	079b      	lsls	r3, r3, #30
 800ef82:	b570      	push	{r4, r5, r6, lr}
 800ef84:	d108      	bne.n	800ef98 <net_memcpy+0x1c>
 800ef86:	f022 0303 	bic.w	r3, r2, #3
 800ef8a:	1f04      	subs	r4, r0, #4
 800ef8c:	18cd      	adds	r5, r1, r3
 800ef8e:	42a9      	cmp	r1, r5
 800ef90:	d108      	bne.n	800efa4 <net_memcpy+0x28>
 800ef92:	1ad2      	subs	r2, r2, r3
 800ef94:	4403      	add	r3, r0
 800ef96:	e000      	b.n	800ef9a <net_memcpy+0x1e>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	3b01      	subs	r3, #1
 800ef9c:	440a      	add	r2, r1
 800ef9e:	4291      	cmp	r1, r2
 800efa0:	d105      	bne.n	800efae <net_memcpy+0x32>
 800efa2:	bd70      	pop	{r4, r5, r6, pc}
 800efa4:	f851 6b04 	ldr.w	r6, [r1], #4
 800efa8:	f844 6f04 	str.w	r6, [r4, #4]!
 800efac:	e7ef      	b.n	800ef8e <net_memcpy+0x12>
 800efae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efb6:	e7f2      	b.n	800ef9e <net_memcpy+0x22>

0800efb8 <udp_set_ip>:
 800efb8:	2204      	movs	r2, #4
 800efba:	b513      	push	{r0, r1, r4, lr}
 800efbc:	4604      	mov	r4, r0
 800efbe:	6803      	ldr	r3, [r0, #0]
 800efc0:	eb0d 0102 	add.w	r1, sp, r2
 800efc4:	4808      	ldr	r0, [pc, #32]	; (800efe8 <udp_set_ip+0x30>)
 800efc6:	9301      	str	r3, [sp, #4]
 800efc8:	f7ff ffce 	bl	800ef68 <memcpy.isra.0>
 800efcc:	6862      	ldr	r2, [r4, #4]
 800efce:	4b07      	ldr	r3, [pc, #28]	; (800efec <udp_set_ip+0x34>)
 800efd0:	43d1      	mvns	r1, r2
 800efd2:	6019      	str	r1, [r3, #0]
 800efd4:	6823      	ldr	r3, [r4, #0]
 800efd6:	4013      	ands	r3, r2
 800efd8:	4a05      	ldr	r2, [pc, #20]	; (800eff0 <udp_set_ip+0x38>)
 800efda:	6013      	str	r3, [r2, #0]
 800efdc:	68a2      	ldr	r2, [r4, #8]
 800efde:	4b05      	ldr	r3, [pc, #20]	; (800eff4 <udp_set_ip+0x3c>)
 800efe0:	601a      	str	r2, [r3, #0]
 800efe2:	b002      	add	sp, #8
 800efe4:	bd10      	pop	{r4, pc}
 800efe6:	bf00      	nop
 800efe8:	2000987a 	andcs	r9, r0, sl, ror r8
 800efec:	20003b90 	mulcs	r0, r0, fp
 800eff0:	20003b98 	mulcs	r0, r8, fp
 800eff4:	20003b94 	mulcs	r0, r4, fp

0800eff8 <udp_bind>:
 800eff8:	4a0a      	ldr	r2, [pc, #40]	; (800f024 <udp_bind+0x2c>)
 800effa:	4603      	mov	r3, r0
 800effc:	b510      	push	{r4, lr}
 800effe:	2000      	movs	r0, #0
 800f000:	4614      	mov	r4, r2
 800f002:	f852 1b04 	ldr.w	r1, [r2], #4
 800f006:	4299      	cmp	r1, r3
 800f008:	d008      	beq.n	800f01c <udp_bind+0x24>
 800f00a:	b141      	cbz	r1, 800f01e <udp_bind+0x26>
 800f00c:	3001      	adds	r0, #1
 800f00e:	2808      	cmp	r0, #8
 800f010:	d1f7      	bne.n	800f002 <udp_bind+0xa>
 800f012:	4805      	ldr	r0, [pc, #20]	; (800f028 <udp_bind+0x30>)
 800f014:	f002 fe52 	bl	8011cbc <console_error>
 800f018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f01c:	bd10      	pop	{r4, pc}
 800f01e:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800f022:	e7fb      	b.n	800f01c <udp_bind+0x24>
 800f024:	20003ba0 	andcs	r3, r0, r0, lsr #23
 800f028:	08015a62 	stmdaeq	r1, {r1, r5, r6, r9, fp, ip, lr}

0800f02c <udp_unbind>:
 800f02c:	4a0c      	ldr	r2, [pc, #48]	; (800f060 <udp_unbind+0x34>)
 800f02e:	2300      	movs	r3, #0
 800f030:	4611      	mov	r1, r2
 800f032:	b510      	push	{r4, lr}
 800f034:	f852 4b04 	ldr.w	r4, [r2], #4
 800f038:	4284      	cmp	r4, r0
 800f03a:	d108      	bne.n	800f04e <udp_unbind+0x22>
 800f03c:	2000      	movs	r0, #0
 800f03e:	f640 3294 	movw	r2, #2964	; 0xb94
 800f042:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800f046:	4353      	muls	r3, r2
 800f048:	4a06      	ldr	r2, [pc, #24]	; (800f064 <udp_unbind+0x38>)
 800f04a:	50d0      	str	r0, [r2, r3]
 800f04c:	bd10      	pop	{r4, pc}
 800f04e:	3301      	adds	r3, #1
 800f050:	2b08      	cmp	r3, #8
 800f052:	d1ef      	bne.n	800f034 <udp_unbind+0x8>
 800f054:	4804      	ldr	r0, [pc, #16]	; (800f068 <udp_unbind+0x3c>)
 800f056:	f002 fe31 	bl	8011cbc <console_error>
 800f05a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f05e:	e7f5      	b.n	800f04c <udp_unbind+0x20>
 800f060:	20003ba0 	andcs	r3, r0, r0, lsr #23
 800f064:	20003bc0 	andcs	r3, r0, r0, asr #23
 800f068:	08015a67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, fp, ip, lr}

0800f06c <udp_recv>:
 800f06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f070:	4604      	mov	r4, r0
 800f072:	4698      	mov	r8, r3
 800f074:	f640 3394 	movw	r3, #2964	; 0xb94
 800f078:	435c      	muls	r4, r3
 800f07a:	4608      	mov	r0, r1
 800f07c:	4915      	ldr	r1, [pc, #84]	; (800f0d4 <udp_recv+0x68>)
 800f07e:	190f      	adds	r7, r1, r4
 800f080:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800f084:	5b0b      	ldrh	r3, [r1, r4]
 800f086:	4563      	cmp	r3, ip
 800f088:	d021      	beq.n	800f0ce <udp_recv+0x62>
 800f08a:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800f08e:	fb03 fc0c 	mul.w	ip, r3, ip
 800f092:	eb0c 0604 	add.w	r6, ip, r4
 800f096:	440e      	add	r6, r1
 800f098:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 800f09c:	3404      	adds	r4, #4
 800f09e:	4295      	cmp	r5, r2
 800f0a0:	bf28      	it	cs
 800f0a2:	4615      	movcs	r5, r2
 800f0a4:	4464      	add	r4, ip
 800f0a6:	462a      	mov	r2, r5
 800f0a8:	4421      	add	r1, r4
 800f0aa:	f7ff ff67 	bl	800ef7c <net_memcpy>
 800f0ae:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 800f0b2:	f8c8 3000 	str.w	r3, [r8]
 800f0b6:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 800f0ba:	9b06      	ldr	r3, [sp, #24]
 800f0bc:	801a      	strh	r2, [r3, #0]
 800f0be:	887b      	ldrh	r3, [r7, #2]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	f003 0301 	and.w	r3, r3, #1
 800f0c6:	807b      	strh	r3, [r7, #2]
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0ce:	2500      	movs	r5, #0
 800f0d0:	e7fa      	b.n	800f0c8 <udp_recv+0x5c>
 800f0d2:	bf00      	nop
 800f0d4:	20003bc0 	andcs	r3, r0, r0, asr #23

0800f0d8 <udp_recv2>:
 800f0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0da:	f640 3594 	movw	r5, #2964	; 0xb94
 800f0de:	4368      	muls	r0, r5
 800f0e0:	4c0f      	ldr	r4, [pc, #60]	; (800f120 <udp_recv2+0x48>)
 800f0e2:	1827      	adds	r7, r4, r0
 800f0e4:	887d      	ldrh	r5, [r7, #2]
 800f0e6:	5a26      	ldrh	r6, [r4, r0]
 800f0e8:	42ae      	cmp	r6, r5
 800f0ea:	d017      	beq.n	800f11c <udp_recv2+0x44>
 800f0ec:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 800f0f0:	fb0c f505 	mul.w	r5, ip, r5
 800f0f4:	1d06      	adds	r6, r0, #4
 800f0f6:	442e      	add	r6, r5
 800f0f8:	4405      	add	r5, r0
 800f0fa:	4426      	add	r6, r4
 800f0fc:	442c      	add	r4, r5
 800f0fe:	600e      	str	r6, [r1, #0]
 800f100:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 800f104:	6011      	str	r1, [r2, #0]
 800f106:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 800f10a:	801a      	strh	r2, [r3, #0]
 800f10c:	887b      	ldrh	r3, [r7, #2]
 800f10e:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 800f112:	3301      	adds	r3, #1
 800f114:	f003 0301 	and.w	r3, r3, #1
 800f118:	807b      	strh	r3, [r7, #2]
 800f11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f11c:	2000      	movs	r0, #0
 800f11e:	e7fc      	b.n	800f11a <udp_recv2+0x42>
 800f120:	20003bc0 	andcs	r3, r0, r0, asr #23

0800f124 <udp_send>:
 800f124:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f128:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800f25c <udp_send+0x138>
 800f12c:	461c      	mov	r4, r3
 800f12e:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 800f132:	4607      	mov	r7, r0
 800f134:	4688      	mov	r8, r1
 800f136:	4616      	mov	r6, r2
 800f138:	2b00      	cmp	r3, #0
 800f13a:	f000 808b 	beq.w	800f254 <udp_send+0x130>
 800f13e:	1c63      	adds	r3, r4, #1
 800f140:	d141      	bne.n	800f1c6 <udp_send+0xa2>
 800f142:	4a47      	ldr	r2, [pc, #284]	; (800f260 <udp_send+0x13c>)
 800f144:	2307      	movs	r3, #7
 800f146:	4611      	mov	r1, r2
 800f148:	20ff      	movs	r0, #255	; 0xff
 800f14a:	e001      	b.n	800f150 <udp_send+0x2c>
 800f14c:	f802 0b01 	strb.w	r0, [r2], #1
 800f150:	3b01      	subs	r3, #1
 800f152:	d1fb      	bne.n	800f14c <udp_send+0x28>
 800f154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f158:	83cb      	strh	r3, [r1, #30]
 800f15a:	840b      	strh	r3, [r1, #32]
 800f15c:	2500      	movs	r5, #0
 800f15e:	f8df a104 	ldr.w	sl, [pc, #260]	; 800f264 <udp_send+0x140>
 800f162:	4c3f      	ldr	r4, [pc, #252]	; (800f260 <udp_send+0x13c>)
 800f164:	f8ba 3000 	ldrh.w	r3, [sl]
 800f168:	2114      	movs	r1, #20
 800f16a:	8263      	strh	r3, [r4, #18]
 800f16c:	f106 031c 	add.w	r3, r6, #28
 800f170:	ba5b      	rev16	r3, r3
 800f172:	f104 000e 	add.w	r0, r4, #14
 800f176:	8223      	strh	r3, [r4, #16]
 800f178:	8325      	strh	r5, [r4, #24]
 800f17a:	f001 fc1e 	bl	80109ba <net_chksum>
 800f17e:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 800f182:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800f186:	ba5b      	rev16	r3, r3
 800f188:	8463      	strh	r3, [r4, #34]	; 0x22
 800f18a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800f18e:	4632      	mov	r2, r6
 800f190:	ba5b      	rev16	r3, r3
 800f192:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f194:	f106 0308 	add.w	r3, r6, #8
 800f198:	ba5b      	rev16	r3, r3
 800f19a:	bf28      	it	cs
 800f19c:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 800f1a0:	4641      	mov	r1, r8
 800f1a2:	8320      	strh	r0, [r4, #24]
 800f1a4:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800f1a8:	84e3      	strh	r3, [r4, #38]	; 0x26
 800f1aa:	f7ff fee7 	bl	800ef7c <net_memcpy>
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 800f1b4:	f003 fea0 	bl	8012ef8 <emac_eth_send>
 800f1b8:	f8ba 3000 	ldrh.w	r3, [sl]
 800f1bc:	4628      	mov	r0, r5
 800f1be:	3301      	adds	r3, #1
 800f1c0:	f8aa 3000 	strh.w	r3, [sl]
 800f1c4:	e037      	b.n	800f236 <udp_send+0x112>
 800f1c6:	4b28      	ldr	r3, [pc, #160]	; (800f268 <udp_send+0x144>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	43a3      	bics	r3, r4
 800f1cc:	d10f      	bne.n	800f1ee <udp_send+0xca>
 800f1ce:	2307      	movs	r3, #7
 800f1d0:	21ff      	movs	r1, #255	; 0xff
 800f1d2:	4a23      	ldr	r2, [pc, #140]	; (800f260 <udp_send+0x13c>)
 800f1d4:	e001      	b.n	800f1da <udp_send+0xb6>
 800f1d6:	f802 1b01 	strb.w	r1, [r2], #1
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	d1fb      	bne.n	800f1d6 <udp_send+0xb2>
 800f1de:	2204      	movs	r2, #4
 800f1e0:	4822      	ldr	r0, [pc, #136]	; (800f26c <udp_send+0x148>)
 800f1e2:	eb0d 0102 	add.w	r1, sp, r2
 800f1e6:	9401      	str	r4, [sp, #4]
 800f1e8:	f7ff febe 	bl	800ef68 <memcpy.isra.0>
 800f1ec:	e7b6      	b.n	800f15c <udp_send+0x38>
 800f1ee:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 800f1f2:	2be0      	cmp	r3, #224	; 0xe0
 800f1f4:	d10e      	bne.n	800f214 <udp_send+0xf0>
 800f1f6:	491e      	ldr	r1, [pc, #120]	; (800f270 <udp_send+0x14c>)
 800f1f8:	f3c4 2306 	ubfx	r3, r4, #8, #7
 800f1fc:	70cb      	strb	r3, [r1, #3]
 800f1fe:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800f202:	710b      	strb	r3, [r1, #4]
 800f204:	f3c4 6307 	ubfx	r3, r4, #24, #8
 800f208:	2206      	movs	r2, #6
 800f20a:	4815      	ldr	r0, [pc, #84]	; (800f260 <udp_send+0x13c>)
 800f20c:	714b      	strb	r3, [r1, #5]
 800f20e:	f7ff feab 	bl	800ef68 <memcpy.isra.0>
 800f212:	e7e4      	b.n	800f1de <udp_send+0xba>
 800f214:	4b17      	ldr	r3, [pc, #92]	; (800f274 <udp_send+0x150>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	43a3      	bics	r3, r4
 800f21a:	d00f      	beq.n	800f23c <udp_send+0x118>
 800f21c:	4d16      	ldr	r5, [pc, #88]	; (800f278 <udp_send+0x154>)
 800f21e:	4910      	ldr	r1, [pc, #64]	; (800f260 <udp_send+0x13c>)
 800f220:	6828      	ldr	r0, [r5, #0]
 800f222:	f001 f897 	bl	8010354 <arp_cache_lookup>
 800f226:	682b      	ldr	r3, [r5, #0]
 800f228:	4298      	cmp	r0, r3
 800f22a:	d0d8      	beq.n	800f1de <udp_send+0xba>
 800f22c:	4813      	ldr	r0, [pc, #76]	; (800f27c <udp_send+0x158>)
 800f22e:	f002 fd45 	bl	8011cbc <console_error>
 800f232:	f06f 0002 	mvn.w	r0, #2
 800f236:	b002      	add	sp, #8
 800f238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f23c:	4620      	mov	r0, r4
 800f23e:	4908      	ldr	r1, [pc, #32]	; (800f260 <udp_send+0x13c>)
 800f240:	f001 f888 	bl	8010354 <arp_cache_lookup>
 800f244:	42a0      	cmp	r0, r4
 800f246:	d0ca      	beq.n	800f1de <udp_send+0xba>
 800f248:	480d      	ldr	r0, [pc, #52]	; (800f280 <udp_send+0x15c>)
 800f24a:	f002 fd37 	bl	8011cbc <console_error>
 800f24e:	f06f 0001 	mvn.w	r0, #1
 800f252:	e7f0      	b.n	800f236 <udp_send+0x112>
 800f254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f258:	e7ed      	b.n	800f236 <udp_send+0x112>
 800f25a:	bf00      	nop
 800f25c:	20003ba0 	andcs	r3, r0, r0, lsr #23
 800f260:	20009860 	andcs	r9, r0, r0, ror #16
 800f264:	20003b9c 	mulcs	r0, ip, fp
 800f268:	20003b90 	mulcs	r0, r0, fp
 800f26c:	2000987e 	andcs	r9, r0, lr, ror r8
 800f270:	20000000 	andcs	r0, r0, r0
 800f274:	20003b98 	mulcs	r0, r8, fp
 800f278:	20003b94 	mulcs	r0, r4, fp
 800f27c:	08015a6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r9, fp, ip, lr}
 800f280:	08015a95 	stmdaeq	r1, {r0, r2, r4, r7, r9, fp, ip, lr}

0800f284 <strlen>:
 800f284:	4603      	mov	r3, r0
 800f286:	461a      	mov	r2, r3
 800f288:	7811      	ldrb	r1, [r2, #0]
 800f28a:	3301      	adds	r3, #1
 800f28c:	2900      	cmp	r1, #0
 800f28e:	d1fa      	bne.n	800f286 <strlen+0x2>
 800f290:	1a10      	subs	r0, r2, r0
 800f292:	4770      	bx	lr

0800f294 <strcmp>:
 800f294:	1e43      	subs	r3, r0, #1
 800f296:	3901      	subs	r1, #1
 800f298:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800f29c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f2a0:	4290      	cmp	r0, r2
 800f2a2:	d001      	beq.n	800f2a8 <strcmp+0x14>
 800f2a4:	1a80      	subs	r0, r0, r2
 800f2a6:	e001      	b.n	800f2ac <strcmp+0x18>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d1f5      	bne.n	800f298 <strcmp+0x4>
 800f2ac:	4770      	bx	lr

0800f2ae <strcpy.isra.0>:
 800f2ae:	3801      	subs	r0, #1
 800f2b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2b4:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d1f9      	bne.n	800f2b0 <strcpy.isra.0+0x2>
 800f2bc:	4770      	bx	lr

0800f2be <strcat.isra.0>:
 800f2be:	b538      	push	{r3, r4, r5, lr}
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	460d      	mov	r5, r1
 800f2c4:	f7ff ffde 	bl	800f284 <strlen>
 800f2c8:	4629      	mov	r1, r5
 800f2ca:	4420      	add	r0, r4
 800f2cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2d0:	f7ff bfed 	b.w	800f2ae <strcpy.isra.0>

0800f2d4 <MDNS::MDNS()>:
 800f2d4:	b513      	push	{r0, r1, r4, lr}
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	a901      	add	r1, sp, #4
 800f2da:	4804      	ldr	r0, [pc, #16]	; (800f2ec <MDNS::MDNS()+0x18>)
 800f2dc:	f002 fe6a 	bl	8011fb4 <inet_aton>
 800f2e0:	4620      	mov	r0, r4
 800f2e2:	4b03      	ldr	r3, [pc, #12]	; (800f2f0 <MDNS::MDNS()+0x1c>)
 800f2e4:	9a01      	ldr	r2, [sp, #4]
 800f2e6:	601a      	str	r2, [r3, #0]
 800f2e8:	b002      	add	sp, #8
 800f2ea:	bd10      	pop	{r4, pc}
 800f2ec:	08015ad0 	stmdaeq	r1, {r4, r6, r7, r9, fp, ip, lr}
 800f2f0:	20009e54 	andcs	r9, r0, r4, asr lr

0800f2f4 <MDNS::SetName(char const*)>:
 800f2f4:	b538      	push	{r3, r4, r5, lr}
 800f2f6:	4d0b      	ldr	r5, [pc, #44]	; (800f324 <MDNS::SetName(char const*)+0x30>)
 800f2f8:	460c      	mov	r4, r1
 800f2fa:	6828      	ldr	r0, [r5, #0]
 800f2fc:	b108      	cbz	r0, 800f302 <MDNS::SetName(char const*)+0xe>
 800f2fe:	f002 fe53 	bl	8011fa8 <operator delete[](void*)>
 800f302:	4620      	mov	r0, r4
 800f304:	f7ff ffbe 	bl	800f284 <strlen>
 800f308:	3007      	adds	r0, #7
 800f30a:	f002 fe51 	bl	8011fb0 <operator new[](unsigned int)>
 800f30e:	4621      	mov	r1, r4
 800f310:	6028      	str	r0, [r5, #0]
 800f312:	f7ff ffcc 	bl	800f2ae <strcpy.isra.0>
 800f316:	6828      	ldr	r0, [r5, #0]
 800f318:	4903      	ldr	r1, [pc, #12]	; (800f328 <MDNS::SetName(char const*)+0x34>)
 800f31a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f31e:	f7ff bfce 	b.w	800f2be <strcat.isra.0>
 800f322:	bf00      	nop
 800f324:	2000a284 	andcs	sl, r0, r4, lsl #5
 800f328:	08015ae0 	stmdaeq	r1, {r5, r6, r7, r9, fp, ip, lr}

0800f32c <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 800f32c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f330:	f04f 0e00 	mov.w	lr, #0
 800f334:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 800f338:	4675      	mov	r5, lr
 800f33a:	4e1b      	ldr	r6, [pc, #108]	; (800f3a8 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 800f33c:	4f1b      	ldr	r7, [pc, #108]	; (800f3ac <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 800f33e:	780b      	ldrb	r3, [r1, #0]
 800f340:	1c68      	adds	r0, r5, #1
 800f342:	b913      	cbnz	r3, 800f34a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 800f344:	7013      	strb	r3, [r2, #0]
 800f346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f34a:	2b3f      	cmp	r3, #63	; 0x3f
 800f34c:	d91c      	bls.n	800f388 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 800f34e:	7849      	ldrb	r1, [r1, #1]
 800f350:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 800f354:	430b      	orrs	r3, r1
 800f356:	6839      	ldr	r1, [r7, #0]
 800f358:	f1be 0f00 	cmp.w	lr, #0
 800f35c:	bf08      	it	eq
 800f35e:	4605      	moveq	r5, r0
 800f360:	5ccc      	ldrb	r4, [r1, r3]
 800f362:	3301      	adds	r3, #1
 800f364:	4419      	add	r1, r3
 800f366:	2300      	movs	r3, #0
 800f368:	42a3      	cmp	r3, r4
 800f36a:	5cc8      	ldrb	r0, [r1, r3]
 800f36c:	d309      	bcc.n	800f382 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 800f36e:	f04f 0e01 	mov.w	lr, #1
 800f372:	4421      	add	r1, r4
 800f374:	4414      	add	r4, r2
 800f376:	780b      	ldrb	r3, [r1, #0]
 800f378:	b10b      	cbz	r3, 800f37e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 800f37a:	f804 cb01 	strb.w	ip, [r4], #1
 800f37e:	4622      	mov	r2, r4
 800f380:	e7dd      	b.n	800f33e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 800f382:	54d0      	strb	r0, [r2, r3]
 800f384:	3301      	adds	r3, #1
 800f386:	e7ef      	b.n	800f368 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 800f388:	4688      	mov	r8, r1
 800f38a:	18d4      	adds	r4, r2, r3
 800f38c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 800f390:	f802 9b01 	strb.w	r9, [r2], #1
 800f394:	4294      	cmp	r4, r2
 800f396:	d1f9      	bne.n	800f38c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 800f398:	1c5a      	adds	r2, r3, #1
 800f39a:	4411      	add	r1, r2
 800f39c:	f1be 0f00 	cmp.w	lr, #0
 800f3a0:	d1e9      	bne.n	800f376 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 800f3a2:	181d      	adds	r5, r3, r0
 800f3a4:	e7e7      	b.n	800f376 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 800f3a6:	bf00      	nop
 800f3a8:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 800f3ac:	2000a288 	andcs	sl, r0, r8, lsl #5

0800f3b0 <MDNS::FindFirstDotFromRight(char const*) const>:
 800f3b0:	b510      	push	{r4, lr}
 800f3b2:	4608      	mov	r0, r1
 800f3b4:	460c      	mov	r4, r1
 800f3b6:	f7ff ff65 	bl	800f284 <strlen>
 800f3ba:	4420      	add	r0, r4
 800f3bc:	42a0      	cmp	r0, r4
 800f3be:	d903      	bls.n	800f3c8 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 800f3c0:	f810 3901 	ldrb.w	r3, [r0], #-1
 800f3c4:	2b2e      	cmp	r3, #46	; 0x2e
 800f3c6:	d1f9      	bne.n	800f3bc <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 800f3c8:	3001      	adds	r0, #1
 800f3ca:	bd10      	pop	{r4, pc}

0800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>:
 800f3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3ce:	4614      	mov	r4, r2
 800f3d0:	460f      	mov	r7, r1
 800f3d2:	1c60      	adds	r0, r4, #1
 800f3d4:	463d      	mov	r5, r7
 800f3d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f3da:	b946      	cbnz	r6, 800f3ee <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 800f3dc:	1a69      	subs	r1, r5, r1
 800f3de:	7021      	strb	r1, [r4, #0]
 800f3e0:	7829      	ldrb	r1, [r5, #0]
 800f3e2:	b949      	cbnz	r1, 800f3f8 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 800f3e4:	b10b      	cbz	r3, 800f3ea <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 800f3e6:	f800 1b01 	strb.w	r1, [r0], #1
 800f3ea:	1a80      	subs	r0, r0, r2
 800f3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3ee:	2e2e      	cmp	r6, #46	; 0x2e
 800f3f0:	d0f4      	beq.n	800f3dc <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 800f3f2:	f800 6b01 	strb.w	r6, [r0], #1
 800f3f6:	e7ed      	b.n	800f3d4 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	1c69      	adds	r1, r5, #1
 800f3fc:	e7e8      	b.n	800f3d0 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

0800f400 <MDNS::CreateAnswerLocalIpAddress()>:
 800f400:	2384      	movs	r3, #132	; 0x84
 800f402:	b510      	push	{r4, lr}
 800f404:	4c0f      	ldr	r4, [pc, #60]	; (800f444 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 800f406:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f40a:	80e3      	strh	r3, [r4, #6]
 800f40c:	2300      	movs	r3, #0
 800f40e:	490e      	ldr	r1, [pc, #56]	; (800f448 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 800f410:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f414:	6809      	ldr	r1, [r1, #0]
 800f416:	f104 0210 	add.w	r2, r4, #16
 800f41a:	2301      	movs	r3, #1
 800f41c:	f7ff ffd6 	bl	800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>
 800f420:	490a      	ldr	r1, [pc, #40]	; (800f44c <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 800f422:	1813      	adds	r3, r2, r0
 800f424:	5011      	str	r1, [r2, r0]
 800f426:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800f42a:	605a      	str	r2, [r3, #4]
 800f42c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f430:	811a      	strh	r2, [r3, #8]
 800f432:	4a07      	ldr	r2, [pc, #28]	; (800f450 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 800f434:	6812      	ldr	r2, [r2, #0]
 800f436:	6912      	ldr	r2, [r2, #16]
 800f438:	f8c3 200a 	str.w	r2, [r3, #10]
 800f43c:	1b1b      	subs	r3, r3, r4
 800f43e:	330a      	adds	r3, #10
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	bd10      	pop	{r4, pc}
 800f444:	20009e58 	andcs	r9, r0, r8, asr lr
 800f448:	2000a284 	andcs	sl, r0, r4, lsl #5
 800f44c:	01800100 	orreq	r0, r0, r0, lsl #2
 800f450:	2000a28c 	andcs	sl, r0, ip, lsl #5

0800f454 <MDNS::Start()>:
 800f454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f456:	4c1d      	ldr	r4, [pc, #116]	; (800f4cc <MDNS::Start()+0x78>)
 800f458:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800f45c:	4605      	mov	r5, r0
 800f45e:	6820      	ldr	r0, [r4, #0]
 800f460:	f000 fb26 	bl	800fab0 <Network::Begin(unsigned short)>
 800f464:	4e1a      	ldr	r6, [pc, #104]	; (800f4d0 <MDNS::Start()+0x7c>)
 800f466:	4f1b      	ldr	r7, [pc, #108]	; (800f4d4 <MDNS::Start()+0x80>)
 800f468:	4601      	mov	r1, r0
 800f46a:	6030      	str	r0, [r6, #0]
 800f46c:	683a      	ldr	r2, [r7, #0]
 800f46e:	6820      	ldr	r0, [r4, #0]
 800f470:	f000 fb2f 	bl	800fad2 <Network::JoinGroup(int, unsigned int)>
 800f474:	4b18      	ldr	r3, [pc, #96]	; (800f4d8 <MDNS::Start()+0x84>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	b923      	cbnz	r3, 800f484 <MDNS::Start()+0x30>
 800f47a:	6821      	ldr	r1, [r4, #0]
 800f47c:	4628      	mov	r0, r5
 800f47e:	311c      	adds	r1, #28
 800f480:	f7ff ff38 	bl	800f2f4 <MDNS::SetName(char const*)>
 800f484:	4628      	mov	r0, r5
 800f486:	f7ff ffbb 	bl	800f400 <MDNS::CreateAnswerLocalIpAddress()>
 800f48a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f48e:	4913      	ldr	r1, [pc, #76]	; (800f4dc <MDNS::Start()+0x88>)
 800f490:	7830      	ldrb	r0, [r6, #0]
 800f492:	f831 2b04 	ldrh.w	r2, [r1], #4
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	f7ff fe43 	bl	800f124 <udp_send>
 800f49e:	233f      	movs	r3, #63	; 0x3f
 800f4a0:	6820      	ldr	r0, [r4, #0]
 800f4a2:	4c0f      	ldr	r4, [pc, #60]	; (800f4e0 <MDNS::Start()+0x8c>)
 800f4a4:	f100 025c 	add.w	r2, r0, #92	; 0x5c
 800f4a8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800f4ac:	b929      	cbnz	r1, 800f4ba <MDNS::Start()+0x66>
 800f4ae:	4413      	add	r3, r2
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d006      	beq.n	800f4c2 <MDNS::Start()+0x6e>
 800f4b4:	f802 1b01 	strb.w	r1, [r2], #1
 800f4b8:	e7fa      	b.n	800f4b0 <MDNS::Start()+0x5c>
 800f4ba:	3b01      	subs	r3, #1
 800f4bc:	f802 1b01 	strb.w	r1, [r2], #1
 800f4c0:	d1f2      	bne.n	800f4a8 <MDNS::Start()+0x54>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 800f4c8:	b003      	add	sp, #12
 800f4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4cc:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800f4d0:	20000008 	andcs	r0, r0, r8
 800f4d4:	20009e54 	andcs	r9, r0, r4, asr lr
 800f4d8:	2000a284 	andcs	sl, r0, r4, lsl #5
 800f4dc:	20009e58 	andcs	r9, r0, r8, asr lr
 800f4e0:	08015ae0 	stmdaeq	r1, {r5, r6, r7, r9, fp, ip, lr}

0800f4e4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 800f4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e8:	4c1b      	ldr	r4, [pc, #108]	; (800f558 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 800f4ea:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 800f4ee:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	f854 100c 	ldr.w	r1, [r4, ip]
 800f4f8:	4607      	mov	r7, r0
 800f4fa:	f7ff ff67 	bl	800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>
 800f4fe:	2301      	movs	r3, #1
 800f500:	7bac      	ldrb	r4, [r5, #14]
 800f502:	4616      	mov	r6, r2
 800f504:	4915      	ldr	r1, [pc, #84]	; (800f55c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 800f506:	4402      	add	r2, r0
 800f508:	4815      	ldr	r0, [pc, #84]	; (800f560 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 800f50a:	429c      	cmp	r4, r3
 800f50c:	bf18      	it	ne
 800f50e:	4601      	movne	r1, r0
 800f510:	4638      	mov	r0, r7
 800f512:	f7ff ff5b 	bl	800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>
 800f516:	4b13      	ldr	r3, [pc, #76]	; (800f564 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 800f518:	1814      	adds	r4, r2, r0
 800f51a:	5013      	str	r3, [r2, r0]
 800f51c:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f520:	6063      	str	r3, [r4, #4]
 800f522:	4b11      	ldr	r3, [pc, #68]	; (800f568 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 800f524:	f8d3 8000 	ldr.w	r8, [r3]
 800f528:	4640      	mov	r0, r8
 800f52a:	f7ff feab 	bl	800f284 <strlen>
 800f52e:	f100 0308 	add.w	r3, r0, #8
 800f532:	ba5b      	rev16	r3, r3
 800f534:	8123      	strh	r3, [r4, #8]
 800f536:	2300      	movs	r3, #0
 800f538:	f8c4 300a 	str.w	r3, [r4, #10]
 800f53c:	89ab      	ldrh	r3, [r5, #12]
 800f53e:	f104 0210 	add.w	r2, r4, #16
 800f542:	ba5b      	rev16	r3, r3
 800f544:	81e3      	strh	r3, [r4, #14]
 800f546:	4641      	mov	r1, r8
 800f548:	2301      	movs	r3, #1
 800f54a:	4638      	mov	r0, r7
 800f54c:	f7ff ff3e 	bl	800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>
 800f550:	4410      	add	r0, r2
 800f552:	1b80      	subs	r0, r0, r6
 800f554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f558:	2000a05c 	andcs	sl, r0, ip, asr r0
 800f55c:	08015adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, ip, lr}
 800f560:	08015af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, ip, lr}
 800f564:	01802100 	orreq	r2, r0, r0, lsl #2
 800f568:	2000a284 	andcs	sl, r0, r4, lsl #5

0800f56c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 800f56c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f570:	4e19      	ldr	r6, [pc, #100]	; (800f5d8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 800f572:	010f      	lsls	r7, r1, #4
 800f574:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800f578:	2300      	movs	r3, #0
 800f57a:	59f1      	ldr	r1, [r6, r7]
 800f57c:	4604      	mov	r4, r0
 800f57e:	f7ff ff25 	bl	800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>
 800f582:	2301      	movs	r3, #1
 800f584:	7bae      	ldrb	r6, [r5, #14]
 800f586:	4690      	mov	r8, r2
 800f588:	4914      	ldr	r1, [pc, #80]	; (800f5dc <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 800f58a:	4402      	add	r2, r0
 800f58c:	4814      	ldr	r0, [pc, #80]	; (800f5e0 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 800f58e:	429e      	cmp	r6, r3
 800f590:	bf18      	it	ne
 800f592:	4601      	movne	r1, r0
 800f594:	4620      	mov	r0, r4
 800f596:	f7ff ff19 	bl	800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>
 800f59a:	4b12      	ldr	r3, [pc, #72]	; (800f5e4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 800f59c:	1816      	adds	r6, r2, r0
 800f59e:	5013      	str	r3, [r2, r0]
 800f5a0:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f5a4:	68a8      	ldr	r0, [r5, #8]
 800f5a6:	6073      	str	r3, [r6, #4]
 800f5a8:	f106 040b 	add.w	r4, r6, #11
 800f5ac:	b938      	cbnz	r0, 800f5be <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 800f5ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f5b2:	72b0      	strb	r0, [r6, #10]
 800f5b4:	8133      	strh	r3, [r6, #8]
 800f5b6:	eba4 0008 	sub.w	r0, r4, r8
 800f5ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5be:	f7ff fe61 	bl	800f284 <strlen>
 800f5c2:	4607      	mov	r7, r0
 800f5c4:	1c43      	adds	r3, r0, #1
 800f5c6:	72b0      	strb	r0, [r6, #10]
 800f5c8:	ba5b      	rev16	r3, r3
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	68a9      	ldr	r1, [r5, #8]
 800f5ce:	8133      	strh	r3, [r6, #8]
 800f5d0:	f7ff fe6d 	bl	800f2ae <strcpy.isra.0>
 800f5d4:	443c      	add	r4, r7
 800f5d6:	e7ee      	b.n	800f5b6 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 800f5d8:	2000a05c 	andcs	sl, r0, ip, asr r0
 800f5dc:	08015adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, ip, lr}
 800f5e0:	08015af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, ip, lr}
 800f5e4:	01801000 	orreq	r1, r0, r0

0800f5e8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 800f5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5ec:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800f650 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 800f5f0:	ea4f 1901 	mov.w	r9, r1, lsl #4
 800f5f4:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 800f5f8:	6869      	ldr	r1, [r5, #4]
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	4607      	mov	r7, r0
 800f5fe:	f7ff fee5 	bl	800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>
 800f602:	4b14      	ldr	r3, [pc, #80]	; (800f654 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 800f604:	f858 8009 	ldr.w	r8, [r8, r9]
 800f608:	5013      	str	r3, [r2, r0]
 800f60a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f60e:	1816      	adds	r6, r2, r0
 800f610:	6073      	str	r3, [r6, #4]
 800f612:	4640      	mov	r0, r8
 800f614:	4614      	mov	r4, r2
 800f616:	f7ff fe35 	bl	800f284 <strlen>
 800f61a:	f100 030d 	add.w	r3, r0, #13
 800f61e:	ba5b      	rev16	r3, r3
 800f620:	4641      	mov	r1, r8
 800f622:	8133      	strh	r3, [r6, #8]
 800f624:	f106 020a 	add.w	r2, r6, #10
 800f628:	2300      	movs	r3, #0
 800f62a:	4638      	mov	r0, r7
 800f62c:	f7ff fece 	bl	800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>
 800f630:	2301      	movs	r3, #1
 800f632:	4402      	add	r2, r0
 800f634:	7bad      	ldrb	r5, [r5, #14]
 800f636:	4808      	ldr	r0, [pc, #32]	; (800f658 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 800f638:	4908      	ldr	r1, [pc, #32]	; (800f65c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 800f63a:	429d      	cmp	r5, r3
 800f63c:	bf18      	it	ne
 800f63e:	4601      	movne	r1, r0
 800f640:	4638      	mov	r0, r7
 800f642:	f7ff fec3 	bl	800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>
 800f646:	4410      	add	r0, r2
 800f648:	1b00      	subs	r0, r0, r4
 800f64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f64e:	bf00      	nop
 800f650:	2000a05c 	andcs	sl, r0, ip, asr r0
 800f654:	01000c00 	tsteq	r0, r0, lsl #24
 800f658:	08015af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, ip, lr}
 800f65c:	08015adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, ip, lr}

0800f660 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 800f660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f662:	460f      	mov	r7, r1
 800f664:	2301      	movs	r3, #1
 800f666:	490f      	ldr	r1, [pc, #60]	; (800f6a4 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 800f668:	4606      	mov	r6, r0
 800f66a:	f7ff feaf 	bl	800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>
 800f66e:	4b0e      	ldr	r3, [pc, #56]	; (800f6a8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 800f670:	490e      	ldr	r1, [pc, #56]	; (800f6ac <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 800f672:	5013      	str	r3, [r2, r0]
 800f674:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f678:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800f67c:	684f      	ldr	r7, [r1, #4]
 800f67e:	1815      	adds	r5, r2, r0
 800f680:	606b      	str	r3, [r5, #4]
 800f682:	4638      	mov	r0, r7
 800f684:	4614      	mov	r4, r2
 800f686:	f7ff fdfd 	bl	800f284 <strlen>
 800f68a:	1c83      	adds	r3, r0, #2
 800f68c:	ba5b      	rev16	r3, r3
 800f68e:	812b      	strh	r3, [r5, #8]
 800f690:	f105 020a 	add.w	r2, r5, #10
 800f694:	2301      	movs	r3, #1
 800f696:	4639      	mov	r1, r7
 800f698:	4630      	mov	r0, r6
 800f69a:	f7ff fe97 	bl	800f3cc <MDNS::WriteDnsName(char const*, char*, bool)>
 800f69e:	4410      	add	r0, r2
 800f6a0:	1b00      	subs	r0, r0, r4
 800f6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6a4:	08015ae7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, fp, ip, lr}
 800f6a8:	01000c00 	tsteq	r0, r0, lsl #24
 800f6ac:	2000a05c 	andcs	sl, r0, ip, asr r0

0800f6b0 <MDNS::CreateMDNSMessage(unsigned int)>:
 800f6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b2:	2384      	movs	r3, #132	; 0x84
 800f6b4:	4d19      	ldr	r5, [pc, #100]	; (800f71c <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 800f6b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f6ba:	80eb      	strh	r3, [r5, #6]
 800f6bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6c0:	f105 0410 	add.w	r4, r5, #16
 800f6c4:	e9c5 2302 	strd	r2, r3, [r5, #8]
 800f6c8:	4622      	mov	r2, r4
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	460f      	mov	r7, r1
 800f6ce:	f7ff ff09 	bl	800f4e4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 800f6d2:	4404      	add	r4, r0
 800f6d4:	4622      	mov	r2, r4
 800f6d6:	4639      	mov	r1, r7
 800f6d8:	4630      	mov	r0, r6
 800f6da:	f7ff ff47 	bl	800f56c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 800f6de:	4404      	add	r4, r0
 800f6e0:	4622      	mov	r2, r4
 800f6e2:	4639      	mov	r1, r7
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	f7ff ffbb 	bl	800f660 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 800f6ea:	4404      	add	r4, r0
 800f6ec:	4622      	mov	r2, r4
 800f6ee:	4639      	mov	r1, r7
 800f6f0:	4630      	mov	r0, r6
 800f6f2:	f7ff ff79 	bl	800f5e8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 800f6f6:	4a0a      	ldr	r2, [pc, #40]	; (800f720 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 800f6f8:	4404      	add	r4, r0
 800f6fa:	f852 3b10 	ldr.w	r3, [r2], #16
 800f6fe:	1e60      	subs	r0, r4, #1
 800f700:	3b0c      	subs	r3, #12
 800f702:	4619      	mov	r1, r3
 800f704:	3901      	subs	r1, #1
 800f706:	d204      	bcs.n	800f712 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 800f708:	441c      	add	r4, r3
 800f70a:	4b06      	ldr	r3, [pc, #24]	; (800f724 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 800f70c:	1ae4      	subs	r4, r4, r3
 800f70e:	602c      	str	r4, [r5, #0]
 800f710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f712:	f812 6b01 	ldrb.w	r6, [r2], #1
 800f716:	f800 6f01 	strb.w	r6, [r0, #1]!
 800f71a:	e7f3      	b.n	800f704 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 800f71c:	2000a080 	andcs	sl, r0, r0, lsl #1
 800f720:	20009e58 	andcs	r9, r0, r8, asr lr
 800f724:	2000a084 	andcs	sl, r0, r4, lsl #1

0800f728 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 800f728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f72c:	4d40      	ldr	r5, [pc, #256]	; (800f830 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 800f72e:	b085      	sub	sp, #20
 800f730:	682c      	ldr	r4, [r5, #0]
 800f732:	4680      	mov	r8, r0
 800f734:	460f      	mov	r7, r1
 800f736:	4616      	mov	r6, r2
 800f738:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 800f73c:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800f740:	b11c      	cbz	r4, 800f74a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 800f742:	692a      	ldr	r2, [r5, #16]
 800f744:	2a00      	cmp	r2, #0
 800f746:	d16e      	bne.n	800f826 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 800f748:	2401      	movs	r4, #1
 800f74a:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800f74e:	ea4f 1904 	mov.w	r9, r4, lsl #4
 800f752:	8193      	strh	r3, [r2, #12]
 800f754:	f882 b00e 	strb.w	fp, [r2, #14]
 800f758:	2f00      	cmp	r7, #0
 800f75a:	d154      	bne.n	800f806 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 800f75c:	4b35      	ldr	r3, [pc, #212]	; (800f834 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 800f75e:	6818      	ldr	r0, [r3, #0]
 800f760:	301c      	adds	r0, #28
 800f762:	f7ff fd8f 	bl	800f284 <strlen>
 800f766:	4607      	mov	r7, r0
 800f768:	4630      	mov	r0, r6
 800f76a:	f7ff fd8b 	bl	800f284 <strlen>
 800f76e:	4438      	add	r0, r7
 800f770:	3001      	adds	r0, #1
 800f772:	f002 fc1d 	bl	8011fb0 <operator new[](unsigned int)>
 800f776:	4b2f      	ldr	r3, [pc, #188]	; (800f834 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 800f778:	f845 0009 	str.w	r0, [r5, r9]
 800f77c:	6819      	ldr	r1, [r3, #0]
 800f77e:	311c      	adds	r1, #28
 800f780:	f7ff fd95 	bl	800f2ae <strcpy.isra.0>
 800f784:	f855 0009 	ldr.w	r0, [r5, r9]
 800f788:	4631      	mov	r1, r6
 800f78a:	f7ff fd98 	bl	800f2be <strcat.isra.0>
 800f78e:	4631      	mov	r1, r6
 800f790:	4640      	mov	r0, r8
 800f792:	f7ff fe0d 	bl	800f3b0 <MDNS::FindFirstDotFromRight(char const*) const>
 800f796:	eb05 0709 	add.w	r7, r5, r9
 800f79a:	4605      	mov	r5, r0
 800f79c:	f7ff fd72 	bl	800f284 <strlen>
 800f7a0:	300d      	adds	r0, #13
 800f7a2:	f002 fc05 	bl	8011fb0 <operator new[](unsigned int)>
 800f7a6:	4629      	mov	r1, r5
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	f7ff fd80 	bl	800f2ae <strcpy.isra.0>
 800f7ae:	4922      	ldr	r1, [pc, #136]	; (800f838 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f7ff fd84 	bl	800f2be <strcat.isra.0>
 800f7b6:	4921      	ldr	r1, [pc, #132]	; (800f83c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 800f7b8:	4b21      	ldr	r3, [pc, #132]	; (800f840 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f1bb 0f01 	cmp.w	fp, #1
 800f7c0:	bf18      	it	ne
 800f7c2:	4619      	movne	r1, r3
 800f7c4:	f7ff fd7b 	bl	800f2be <strcat.isra.0>
 800f7c8:	f1ba 0f00 	cmp.w	sl, #0
 800f7cc:	d009      	beq.n	800f7e2 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 800f7ce:	4650      	mov	r0, sl
 800f7d0:	f7ff fd58 	bl	800f284 <strlen>
 800f7d4:	3001      	adds	r0, #1
 800f7d6:	f002 fbeb 	bl	8011fb0 <operator new[](unsigned int)>
 800f7da:	4651      	mov	r1, sl
 800f7dc:	60b8      	str	r0, [r7, #8]
 800f7de:	f7ff fd66 	bl	800f2ae <strcpy.isra.0>
 800f7e2:	4621      	mov	r1, r4
 800f7e4:	4640      	mov	r0, r8
 800f7e6:	f7ff ff63 	bl	800f6b0 <MDNS::CreateMDNSMessage(unsigned int)>
 800f7ea:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f7ee:	4915      	ldr	r1, [pc, #84]	; (800f844 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 800f7f0:	4815      	ldr	r0, [pc, #84]	; (800f848 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 800f7f2:	f831 2b04 	ldrh.w	r2, [r1], #4
 800f7f6:	9300      	str	r3, [sp, #0]
 800f7f8:	4b14      	ldr	r3, [pc, #80]	; (800f84c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 800f7fa:	7800      	ldrb	r0, [r0, #0]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f7ff fc91 	bl	800f124 <udp_send>
 800f802:	2001      	movs	r0, #1
 800f804:	e010      	b.n	800f828 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 800f806:	4638      	mov	r0, r7
 800f808:	f7ff fd3c 	bl	800f284 <strlen>
 800f80c:	9003      	str	r0, [sp, #12]
 800f80e:	4630      	mov	r0, r6
 800f810:	f7ff fd38 	bl	800f284 <strlen>
 800f814:	9b03      	ldr	r3, [sp, #12]
 800f816:	4418      	add	r0, r3
 800f818:	3001      	adds	r0, #1
 800f81a:	f002 fbc9 	bl	8011fb0 <operator new[](unsigned int)>
 800f81e:	4639      	mov	r1, r7
 800f820:	f845 0009 	str.w	r0, [r5, r9]
 800f824:	e7ac      	b.n	800f780 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 800f826:	2000      	movs	r0, #0
 800f828:	b005      	add	sp, #20
 800f82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82e:	bf00      	nop
 800f830:	2000a05c 	andcs	sl, r0, ip, asr r0
 800f834:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800f838:	08014b13 	stmdaeq	r1, {r0, r1, r4, r8, r9, fp, lr}
 800f83c:	08015adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, ip, lr}
 800f840:	08015af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, ip, lr}
 800f844:	2000a080 	andcs	sl, r0, r0, lsl #1
 800f848:	20000008 	andcs	r0, r0, r8
 800f84c:	20009e54 	andcs	r9, r0, r4, asr lr

0800f850 <MDNS::HandleRequest(unsigned short)>:
 800f850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f854:	4605      	mov	r5, r0
 800f856:	2700      	movs	r7, #0
 800f858:	f04f 080c 	mov.w	r8, #12
 800f85c:	b0c5      	sub	sp, #276	; 0x114
 800f85e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800f920 <MDNS::HandleRequest(unsigned short)+0xd0>
 800f862:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800f924 <MDNS::HandleRequest(unsigned short)+0xd4>
 800f866:	9103      	str	r1, [sp, #12]
 800f868:	9b03      	ldr	r3, [sp, #12]
 800f86a:	42bb      	cmp	r3, r7
 800f86c:	d802      	bhi.n	800f874 <MDNS::HandleRequest(unsigned short)+0x24>
 800f86e:	b045      	add	sp, #276	; 0x114
 800f870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f874:	f8da 1000 	ldr.w	r1, [sl]
 800f878:	aa04      	add	r2, sp, #16
 800f87a:	4441      	add	r1, r8
 800f87c:	4628      	mov	r0, r5
 800f87e:	f7ff fd55 	bl	800f32c <MDNS::DecodeDNSNameNotation(char const*, char*)>
 800f882:	f8da 2000 	ldr.w	r2, [sl]
 800f886:	4440      	add	r0, r8
 800f888:	1813      	adds	r3, r2, r0
 800f88a:	885b      	ldrh	r3, [r3, #2]
 800f88c:	f100 0804 	add.w	r8, r0, #4
 800f890:	ba5b      	rev16	r3, r3
 800f892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f896:	2b01      	cmp	r3, #1
 800f898:	d13d      	bne.n	800f916 <MDNS::HandleRequest(unsigned short)+0xc6>
 800f89a:	5a14      	ldrh	r4, [r2, r0]
 800f89c:	4b22      	ldr	r3, [pc, #136]	; (800f928 <MDNS::HandleRequest(unsigned short)+0xd8>)
 800f89e:	ba64      	rev16	r4, r4
 800f8a0:	6818      	ldr	r0, [r3, #0]
 800f8a2:	a904      	add	r1, sp, #16
 800f8a4:	b2a4      	uxth	r4, r4
 800f8a6:	f7ff fcf5 	bl	800f294 <strcmp>
 800f8aa:	b968      	cbnz	r0, 800f8c8 <MDNS::HandleRequest(unsigned short)+0x78>
 800f8ac:	2c01      	cmp	r4, #1
 800f8ae:	d10b      	bne.n	800f8c8 <MDNS::HandleRequest(unsigned short)+0x78>
 800f8b0:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f8b4:	491d      	ldr	r1, [pc, #116]	; (800f92c <MDNS::HandleRequest(unsigned short)+0xdc>)
 800f8b6:	481e      	ldr	r0, [pc, #120]	; (800f930 <MDNS::HandleRequest(unsigned short)+0xe0>)
 800f8b8:	f831 2b04 	ldrh.w	r2, [r1], #4
 800f8bc:	9300      	str	r3, [sp, #0]
 800f8be:	4b1d      	ldr	r3, [pc, #116]	; (800f934 <MDNS::HandleRequest(unsigned short)+0xe4>)
 800f8c0:	7800      	ldrb	r0, [r0, #0]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f7ff fc2e 	bl	800f124 <udp_send>
 800f8c8:	481b      	ldr	r0, [pc, #108]	; (800f938 <MDNS::HandleRequest(unsigned short)+0xe8>)
 800f8ca:	a904      	add	r1, sp, #16
 800f8cc:	f7ff fce2 	bl	800f294 <strcmp>
 800f8d0:	f04f 0900 	mov.w	r9, #0
 800f8d4:	4e19      	ldr	r6, [pc, #100]	; (800f93c <MDNS::HandleRequest(unsigned short)+0xec>)
 800f8d6:	9002      	str	r0, [sp, #8]
 800f8d8:	6833      	ldr	r3, [r6, #0]
 800f8da:	b1c3      	cbz	r3, 800f90e <MDNS::HandleRequest(unsigned short)+0xbe>
 800f8dc:	9b02      	ldr	r3, [sp, #8]
 800f8de:	b123      	cbz	r3, 800f8ea <MDNS::HandleRequest(unsigned short)+0x9a>
 800f8e0:	6870      	ldr	r0, [r6, #4]
 800f8e2:	a904      	add	r1, sp, #16
 800f8e4:	f7ff fcd6 	bl	800f294 <strcmp>
 800f8e8:	b988      	cbnz	r0, 800f90e <MDNS::HandleRequest(unsigned short)+0xbe>
 800f8ea:	2c0c      	cmp	r4, #12
 800f8ec:	d10f      	bne.n	800f90e <MDNS::HandleRequest(unsigned short)+0xbe>
 800f8ee:	4649      	mov	r1, r9
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	f7ff fedd 	bl	800f6b0 <MDNS::CreateMDNSMessage(unsigned int)>
 800f8f6:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f8fa:	480d      	ldr	r0, [pc, #52]	; (800f930 <MDNS::HandleRequest(unsigned short)+0xe0>)
 800f8fc:	9300      	str	r3, [sp, #0]
 800f8fe:	4b0d      	ldr	r3, [pc, #52]	; (800f934 <MDNS::HandleRequest(unsigned short)+0xe4>)
 800f900:	f8bb 2000 	ldrh.w	r2, [fp]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	490e      	ldr	r1, [pc, #56]	; (800f940 <MDNS::HandleRequest(unsigned short)+0xf0>)
 800f908:	7800      	ldrb	r0, [r0, #0]
 800f90a:	f7ff fc0b 	bl	800f124 <udp_send>
 800f90e:	3610      	adds	r6, #16
 800f910:	f1b9 0f00 	cmp.w	r9, #0
 800f914:	d001      	beq.n	800f91a <MDNS::HandleRequest(unsigned short)+0xca>
 800f916:	3701      	adds	r7, #1
 800f918:	e7a6      	b.n	800f868 <MDNS::HandleRequest(unsigned short)+0x18>
 800f91a:	f04f 0901 	mov.w	r9, #1
 800f91e:	e7db      	b.n	800f8d8 <MDNS::HandleRequest(unsigned short)+0x88>
 800f920:	2000a288 	andcs	sl, r0, r8, lsl #5
 800f924:	2000a080 	andcs	sl, r0, r0, lsl #1
 800f928:	2000a284 	andcs	sl, r0, r4, lsl #5
 800f92c:	20009e58 	andcs	r9, r0, r8, asr lr
 800f930:	20000008 	andcs	r0, r0, r8
 800f934:	20009e54 	andcs	r9, r0, r4, asr lr
 800f938:	08015ae7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, fp, ip, lr}
 800f93c:	2000a05c 	andcs	sl, r0, ip, asr r0
 800f940:	2000a084 	andcs	sl, r0, r4, lsl #1

0800f944 <MDNS::Parse()>:
 800f944:	4b08      	ldr	r3, [pc, #32]	; (800f968 <MDNS::Parse()+0x24>)
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	8853      	ldrh	r3, [r2, #2]
 800f94a:	ba5b      	rev16	r3, r3
 800f94c:	b299      	uxth	r1, r3
 800f94e:	041b      	lsls	r3, r3, #16
 800f950:	d408      	bmi.n	800f964 <MDNS::Parse()+0x20>
 800f952:	0b89      	lsrs	r1, r1, #14
 800f954:	d106      	bne.n	800f964 <MDNS::Parse()+0x20>
 800f956:	8891      	ldrh	r1, [r2, #4]
 800f958:	b28b      	uxth	r3, r1
 800f95a:	b11b      	cbz	r3, 800f964 <MDNS::Parse()+0x20>
 800f95c:	ba49      	rev16	r1, r1
 800f95e:	b289      	uxth	r1, r1
 800f960:	f7ff bf76 	b.w	800f850 <MDNS::HandleRequest(unsigned short)>
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop
 800f968:	2000a288 	andcs	sl, r0, r8, lsl #5

0800f96c <MDNS::Run()>:
 800f96c:	b538      	push	{r3, r4, r5, lr}
 800f96e:	4d0c      	ldr	r5, [pc, #48]	; (800f9a0 <MDNS::Run()+0x34>)
 800f970:	4604      	mov	r4, r0
 800f972:	480c      	ldr	r0, [pc, #48]	; (800f9a4 <MDNS::Run()+0x38>)
 800f974:	462b      	mov	r3, r5
 800f976:	4a0c      	ldr	r2, [pc, #48]	; (800f9a8 <MDNS::Run()+0x3c>)
 800f978:	490c      	ldr	r1, [pc, #48]	; (800f9ac <MDNS::Run()+0x40>)
 800f97a:	7800      	ldrb	r0, [r0, #0]
 800f97c:	f7ff fbac 	bl	800f0d8 <udp_recv2>
 800f980:	4b0b      	ldr	r3, [pc, #44]	; (800f9b0 <MDNS::Run()+0x44>)
 800f982:	882a      	ldrh	r2, [r5, #0]
 800f984:	8018      	strh	r0, [r3, #0]
 800f986:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d106      	bne.n	800f99c <MDNS::Run()+0x30>
 800f98e:	280c      	cmp	r0, #12
 800f990:	d904      	bls.n	800f99c <MDNS::Run()+0x30>
 800f992:	4620      	mov	r0, r4
 800f994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f998:	f7ff bfd4 	b.w	800f944 <MDNS::Parse()>
 800f99c:	bd38      	pop	{r3, r4, r5, pc}
 800f99e:	bf00      	nop
 800f9a0:	20009e50 	andcs	r9, r0, r0, asr lr
 800f9a4:	20000008 	andcs	r0, r0, r8
 800f9a8:	20009e4c 	andcs	r9, r0, ip, asr #28
 800f9ac:	2000a288 	andcs	sl, r0, r8, lsl #5
 800f9b0:	2000a07c 	andcs	sl, r0, ip, ror r0

0800f9b4 <MDNS::Print()>:
 800f9b4:	b510      	push	{r4, lr}
 800f9b6:	4816      	ldr	r0, [pc, #88]	; (800fa10 <MDNS::Print()+0x5c>)
 800f9b8:	f7f9 fc38 	bl	800922c <printf>
 800f9bc:	4b15      	ldr	r3, [pc, #84]	; (800fa14 <MDNS::Print()+0x60>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	d104      	bne.n	800f9ce <MDNS::Print()+0x1a>
 800f9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9c8:	4813      	ldr	r0, [pc, #76]	; (800fa18 <MDNS::Print()+0x64>)
 800f9ca:	f7f9 bc2f 	b.w	800922c <printf>
 800f9ce:	4b13      	ldr	r3, [pc, #76]	; (800fa1c <MDNS::Print()+0x68>)
 800f9d0:	4c13      	ldr	r4, [pc, #76]	; (800fa20 <MDNS::Print()+0x6c>)
 800f9d2:	6819      	ldr	r1, [r3, #0]
 800f9d4:	4813      	ldr	r0, [pc, #76]	; (800fa24 <MDNS::Print()+0x70>)
 800f9d6:	f7f9 fc29 	bl	800922c <printf>
 800f9da:	6823      	ldr	r3, [r4, #0]
 800f9dc:	b14b      	cbz	r3, 800f9f2 <MDNS::Print()+0x3e>
 800f9de:	4a12      	ldr	r2, [pc, #72]	; (800fa28 <MDNS::Print()+0x74>)
 800f9e0:	68a3      	ldr	r3, [r4, #8]
 800f9e2:	6861      	ldr	r1, [r4, #4]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	bf08      	it	eq
 800f9e8:	4613      	moveq	r3, r2
 800f9ea:	4810      	ldr	r0, [pc, #64]	; (800fa2c <MDNS::Print()+0x78>)
 800f9ec:	89a2      	ldrh	r2, [r4, #12]
 800f9ee:	f7f9 fc1d 	bl	800922c <printf>
 800f9f2:	6923      	ldr	r3, [r4, #16]
 800f9f4:	b15b      	cbz	r3, 800fa0e <MDNS::Print()+0x5a>
 800f9f6:	69a3      	ldr	r3, [r4, #24]
 800f9f8:	4a0b      	ldr	r2, [pc, #44]	; (800fa28 <MDNS::Print()+0x74>)
 800f9fa:	6961      	ldr	r1, [r4, #20]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	bf08      	it	eq
 800fa00:	4613      	moveq	r3, r2
 800fa02:	480a      	ldr	r0, [pc, #40]	; (800fa2c <MDNS::Print()+0x78>)
 800fa04:	8ba2      	ldrh	r2, [r4, #28]
 800fa06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa0a:	f7f9 bc0f 	b.w	800922c <printf>
 800fa0e:	bd10      	pop	{r4, pc}
 800fa10:	08015b04 	stmdaeq	r1, {r2, r8, r9, fp, ip, lr}
 800fa14:	20000008 	andcs	r0, r0, r8
 800fa18:	08015b0a 	stmdaeq	r1, {r1, r3, r8, r9, fp, ip, lr}
 800fa1c:	2000a284 	andcs	sl, r0, r4, lsl #5
 800fa20:	2000a05c 	andcs	sl, r0, ip, asr r0
 800fa24:	08015b18 	stmdaeq	r1, {r3, r4, r8, r9, fp, ip, lr}
 800fa28:	08014e37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, sl, fp, lr}
 800fa2c:	08015b24 	stmdaeq	r1, {r2, r5, r8, r9, fp, ip, lr}

0800fa30 <strncpy.constprop.0.isra.0>:
 800fa30:	233f      	movs	r3, #63	; 0x3f
 800fa32:	3901      	subs	r1, #1
 800fa34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fa38:	b92a      	cbnz	r2, 800fa46 <strncpy.constprop.0.isra.0+0x16>
 800fa3a:	4403      	add	r3, r0
 800fa3c:	4298      	cmp	r0, r3
 800fa3e:	d006      	beq.n	800fa4e <strncpy.constprop.0.isra.0+0x1e>
 800fa40:	f800 2b01 	strb.w	r2, [r0], #1
 800fa44:	e7fa      	b.n	800fa3c <strncpy.constprop.0.isra.0+0xc>
 800fa46:	3b01      	subs	r3, #1
 800fa48:	f800 2b01 	strb.w	r2, [r0], #1
 800fa4c:	d1f2      	bne.n	800fa34 <strncpy.constprop.0.isra.0+0x4>
 800fa4e:	4770      	bx	lr

0800fa50 <Network::Network()>:
 800fa50:	4a11      	ldr	r2, [pc, #68]	; (800fa98 <Network::Network()+0x48>)
 800fa52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800fa56:	6010      	str	r0, [r2, #0]
 800fa58:	2201      	movs	r2, #1
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	e9c0 1200 	strd	r1, r2, [r0]
 800fa60:	2200      	movs	r2, #0
 800fa62:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 800fa66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa6a:	490c      	ldr	r1, [pc, #48]	; (800fa9c <Network::Network()+0x4c>)
 800fa6c:	60c2      	str	r2, [r0, #12]
 800fa6e:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 800fa72:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 800fa76:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 800fa7a:	6083      	str	r3, [r0, #8]
 800fa7c:	6183      	str	r3, [r0, #24]
 800fa7e:	7703      	strb	r3, [r0, #28]
 800fa80:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 800fa84:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 800fa88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa8c:	f802 3b01 	strb.w	r3, [r2], #1
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d1f9      	bne.n	800fa88 <Network::Network()+0x38>
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop
 800fa98:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800fa9c:	08015b2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, r9, fp, ip, lr}

0800faa0 <Network::Shutdown()>:
 800faa0:	b508      	push	{r3, lr}
 800faa2:	30b8      	adds	r0, #184	; 0xb8
 800faa4:	f001 fb74 	bl	8011190 <NetworkDisplay::ShowShutdown()>
 800faa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800faac:	f7f7 bba0 	b.w	80071f0 <net_shutdown>

0800fab0 <Network::Begin(unsigned short)>:
 800fab0:	4608      	mov	r0, r1
 800fab2:	f7ff baa1 	b.w	800eff8 <udp_bind>

0800fab6 <Network::End(unsigned short)>:
 800fab6:	4608      	mov	r0, r1
 800fab8:	f7ff bab8 	b.w	800f02c <udp_unbind>

0800fabc <Network::MacAddressCopyTo(unsigned char*)>:
 800fabc:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 800fac0:	3901      	subs	r1, #1
 800fac2:	30a2      	adds	r0, #162	; 0xa2
 800fac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fac8:	4283      	cmp	r3, r0
 800faca:	f801 2f01 	strb.w	r2, [r1, #1]!
 800face:	d1f9      	bne.n	800fac4 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 800fad0:	4770      	bx	lr

0800fad2 <Network::JoinGroup(int, unsigned int)>:
 800fad2:	4610      	mov	r0, r2
 800fad4:	f000 bef8 	b.w	80108c8 <igmp_join>

0800fad8 <Network::LeaveGroup(int, unsigned int)>:
 800fad8:	4610      	mov	r0, r2
 800fada:	f000 bf21 	b.w	8010920 <igmp_leave>

0800fade <Network::SetDefaultIp()>:
 800fade:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800fae2:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 800fae6:	041b      	lsls	r3, r3, #16
 800fae8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800faec:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 800faf0:	3302      	adds	r3, #2
 800faf2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800faf6:	22ff      	movs	r2, #255	; 0xff
 800faf8:	6103      	str	r3, [r0, #16]
 800fafa:	e9c0 3205 	strd	r3, r2, [r0, #20]
 800fafe:	4770      	bx	lr

0800fb00 <Network::Init(NetworkParamsStore*)>:
 800fb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb04:	b08b      	sub	sp, #44	; 0x2c
 800fb06:	4604      	mov	r4, r0
 800fb08:	a806      	add	r0, sp, #24
 800fb0a:	f000 f9b5 	bl	800fe78 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800fb0e:	a806      	add	r0, sp, #24
 800fb10:	f000 f9c2 	bl	800fe98 <NetworkParams::Load()>
 800fb14:	b110      	cbz	r0, 800fb1c <Network::Init(NetworkParamsStore*)+0x1c>
 800fb16:	a806      	add	r0, sp, #24
 800fb18:	f000 fba9 	bl	801026e <NetworkParams::Dump()>
 800fb1c:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 800fb20:	f8df 822c 	ldr.w	r8, [pc, #556]	; 800fd50 <Network::Init(NetworkParamsStore*)+0x250>
 800fb24:	4628      	mov	r0, r5
 800fb26:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 800fb2a:	f001 fb25 	bl	8011178 <NetworkDisplay::ShowEmacStart()>
 800fb2e:	4638      	mov	r0, r7
 800fb30:	f003 f91e 	bl	8012d70 <emac_start>
 800fb34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fb38:	f104 061c 	add.w	r6, r4, #28
 800fb3c:	9307      	str	r3, [sp, #28]
 800fb3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb42:	9308      	str	r3, [sp, #32]
 800fb44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fb48:	9309      	str	r3, [sp, #36]	; 0x24
 800fb4a:	f898 3014 	ldrb.w	r3, [r8, #20]
 800fb4e:	7063      	strb	r3, [r4, #1]
 800fb50:	f8d8 3000 	ldr.w	r3, [r8]
 800fb54:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 800fb58:	bf18      	it	ne
 800fb5a:	f8d8 2055 	ldrne.w	r2, [r8, #85]	; 0x55
 800fb5e:	061b      	lsls	r3, r3, #24
 800fb60:	bf58      	it	pl
 800fb62:	2300      	movpl	r3, #0
 800fb64:	60a2      	str	r2, [r4, #8]
 800fb66:	bf48      	it	mi
 800fb68:	f8d8 3059 	ldrmi.w	r3, [r8, #89]	; 0x59
 800fb6c:	60e3      	str	r3, [r4, #12]
 800fb6e:	f898 3015 	ldrb.w	r3, [r8, #21]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	f040 80bc 	bne.w	800fcf0 <Network::Init(NetworkParamsStore*)+0x1f0>
 800fb78:	4630      	mov	r0, r6
 800fb7a:	4976      	ldr	r1, [pc, #472]	; (800fd54 <Network::Init(NetworkParamsStore*)+0x254>)
 800fb7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb80:	f103 0c01 	add.w	ip, r3, #1
 800fb84:	2a00      	cmp	r2, #0
 800fb86:	f040 80af 	bne.w	800fce8 <Network::Init(NetworkParamsStore*)+0x1e8>
 800fb8a:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 800fb8e:	18e1      	adds	r1, r4, r3
 800fb90:	0910      	lsrs	r0, r2, #4
 800fb92:	2a9f      	cmp	r2, #159	; 0x9f
 800fb94:	f002 020f 	and.w	r2, r2, #15
 800fb98:	bf94      	ite	ls
 800fb9a:	3030      	addls	r0, #48	; 0x30
 800fb9c:	3037      	addhi	r0, #55	; 0x37
 800fb9e:	2a09      	cmp	r2, #9
 800fba0:	bf94      	ite	ls
 800fba2:	3230      	addls	r2, #48	; 0x30
 800fba4:	3237      	addhi	r2, #55	; 0x37
 800fba6:	44a4      	add	ip, r4
 800fba8:	7708      	strb	r0, [r1, #28]
 800fbaa:	f88c 201c 	strb.w	r2, [ip, #28]
 800fbae:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 800fbb2:	f103 0e02 	add.w	lr, r3, #2
 800fbb6:	0910      	lsrs	r0, r2, #4
 800fbb8:	2a9f      	cmp	r2, #159	; 0x9f
 800fbba:	f002 020f 	and.w	r2, r2, #15
 800fbbe:	bf94      	ite	ls
 800fbc0:	3030      	addls	r0, #48	; 0x30
 800fbc2:	3037      	addhi	r0, #55	; 0x37
 800fbc4:	f103 0903 	add.w	r9, r3, #3
 800fbc8:	2a09      	cmp	r2, #9
 800fbca:	44a6      	add	lr, r4
 800fbcc:	f88e 001c 	strb.w	r0, [lr, #28]
 800fbd0:	bf94      	ite	ls
 800fbd2:	3230      	addls	r2, #48	; 0x30
 800fbd4:	3237      	addhi	r2, #55	; 0x37
 800fbd6:	eb04 0009 	add.w	r0, r4, r9
 800fbda:	7702      	strb	r2, [r0, #28]
 800fbdc:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 800fbe0:	f103 0c04 	add.w	ip, r3, #4
 800fbe4:	0910      	lsrs	r0, r2, #4
 800fbe6:	2a9f      	cmp	r2, #159	; 0x9f
 800fbe8:	f002 020f 	and.w	r2, r2, #15
 800fbec:	bf94      	ite	ls
 800fbee:	3030      	addls	r0, #48	; 0x30
 800fbf0:	3037      	addhi	r0, #55	; 0x37
 800fbf2:	3305      	adds	r3, #5
 800fbf4:	2a09      	cmp	r2, #9
 800fbf6:	4423      	add	r3, r4
 800fbf8:	44a4      	add	ip, r4
 800fbfa:	bf94      	ite	ls
 800fbfc:	3230      	addls	r2, #48	; 0x30
 800fbfe:	3237      	addhi	r2, #55	; 0x37
 800fc00:	f88c 001c 	strb.w	r0, [ip, #28]
 800fc04:	771a      	strb	r2, [r3, #28]
 800fc06:	2300      	movs	r3, #0
 800fc08:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 800fc0c:	7863      	ldrb	r3, [r4, #1]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	f040 8098 	bne.w	800fd44 <Network::Init(NetworkParamsStore*)+0x244>
 800fc14:	9b07      	ldr	r3, [sp, #28]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d172      	bne.n	800fd00 <Network::Init(NetworkParamsStore*)+0x200>
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f7ff ff5f 	bl	800fade <Network::SetDefaultIp()>
 800fc20:	6923      	ldr	r3, [r4, #16]
 800fc22:	69a2      	ldr	r2, [r4, #24]
 800fc24:	9307      	str	r3, [sp, #28]
 800fc26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fc2a:	1ce3      	adds	r3, r4, #3
 800fc2c:	f104 0901 	add.w	r9, r4, #1
 800fc30:	9302      	str	r3, [sp, #8]
 800fc32:	9300      	str	r3, [sp, #0]
 800fc34:	4632      	mov	r2, r6
 800fc36:	464b      	mov	r3, r9
 800fc38:	4638      	mov	r0, r7
 800fc3a:	a907      	add	r1, sp, #28
 800fc3c:	f7f7 fa88 	bl	8007150 <net_init>
 800fc40:	78e3      	ldrb	r3, [r4, #3]
 800fc42:	b11b      	cbz	r3, 800fc4c <Network::Init(NetworkParamsStore*)+0x14c>
 800fc44:	2104      	movs	r1, #4
 800fc46:	4628      	mov	r0, r5
 800fc48:	f001 faa8 	bl	801119c <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800fc4c:	f898 3014 	ldrb.w	r3, [r8, #20]
 800fc50:	f898 a05d 	ldrb.w	sl, [r8, #93]	; 0x5d
 800fc54:	9304      	str	r3, [sp, #16]
 800fc56:	233c      	movs	r3, #60	; 0x3c
 800fc58:	fb03 f30a 	mul.w	r3, r3, sl
 800fc5c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800fd58 <Network::Init(NetworkParamsStore*)+0x258>
 800fc60:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 800fd5c <Network::Init(NetworkParamsStore*)+0x25c>
 800fc64:	9303      	str	r3, [sp, #12]
 800fc66:	78e3      	ldrb	r3, [r4, #3]
 800fc68:	b393      	cbz	r3, 800fcd0 <Network::Init(NetworkParamsStore*)+0x1d0>
 800fc6a:	f1ba 0f00 	cmp.w	sl, #0
 800fc6e:	d02f      	beq.n	800fcd0 <Network::Init(NetworkParamsStore*)+0x1d0>
 800fc70:	9b04      	ldr	r3, [sp, #16]
 800fc72:	b36b      	cbz	r3, 800fcd0 <Network::Init(NetworkParamsStore*)+0x1d0>
 800fc74:	2104      	movs	r1, #4
 800fc76:	f8d8 0000 	ldr.w	r0, [r8]
 800fc7a:	f002 f8b1 	bl	8011de0 <LedBlink::SetMode(ledblink::Mode)>
 800fc7e:	2103      	movs	r1, #3
 800fc80:	4628      	mov	r0, r5
 800fc82:	f001 fa8b 	bl	801119c <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800fc86:	2000      	movs	r0, #0
 800fc88:	f002 fb6e 	bl	8012368 <time>
 800fc8c:	9005      	str	r0, [sp, #20]
 800fc8e:	2000      	movs	r0, #0
 800fc90:	f002 fb6a 	bl	8012368 <time>
 800fc94:	9b05      	ldr	r3, [sp, #20]
 800fc96:	4932      	ldr	r1, [pc, #200]	; (800fd60 <Network::Init(NetworkParamsStore*)+0x260>)
 800fc98:	1ac0      	subs	r0, r0, r3
 800fc9a:	9b03      	ldr	r3, [sp, #12]
 800fc9c:	4298      	cmp	r0, r3
 800fc9e:	db37      	blt.n	800fd10 <Network::Init(NetworkParamsStore*)+0x210>
 800fca0:	2101      	movs	r1, #1
 800fca2:	4628      	mov	r0, r5
 800fca4:	f001 fa7a 	bl	801119c <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800fca8:	2101      	movs	r1, #1
 800fcaa:	f8d8 0000 	ldr.w	r0, [r8]
 800fcae:	f002 f897 	bl	8011de0 <LedBlink::SetMode(ledblink::Mode)>
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	7063      	strb	r3, [r4, #1]
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	70e3      	strb	r3, [r4, #3]
 800fcba:	9b02      	ldr	r3, [sp, #8]
 800fcbc:	4632      	mov	r2, r6
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	4638      	mov	r0, r7
 800fcc2:	464b      	mov	r3, r9
 800fcc4:	a907      	add	r1, sp, #28
 800fcc6:	f7f7 fa43 	bl	8007150 <net_init>
 800fcca:	7863      	ldrb	r3, [r4, #1]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d0ca      	beq.n	800fc66 <Network::Init(NetworkParamsStore*)+0x166>
 800fcd0:	9b07      	ldr	r3, [sp, #28]
 800fcd2:	4628      	mov	r0, r5
 800fcd4:	6123      	str	r3, [r4, #16]
 800fcd6:	9b08      	ldr	r3, [sp, #32]
 800fcd8:	61a3      	str	r3, [r4, #24]
 800fcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcdc:	6163      	str	r3, [r4, #20]
 800fcde:	f001 fa51 	bl	8011184 <NetworkDisplay::ShowIp()>
 800fce2:	b00b      	add	sp, #44	; 0x2c
 800fce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fce8:	4663      	mov	r3, ip
 800fcea:	f800 2b01 	strb.w	r2, [r0], #1
 800fcee:	e745      	b.n	800fb7c <Network::Init(NetworkParamsStore*)+0x7c>
 800fcf0:	4630      	mov	r0, r6
 800fcf2:	491c      	ldr	r1, [pc, #112]	; (800fd64 <Network::Init(NetworkParamsStore*)+0x264>)
 800fcf4:	f7ff fe9c 	bl	800fa30 <strncpy.constprop.0.isra.0>
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 800fcfe:	e785      	b.n	800fc0c <Network::Init(NetworkParamsStore*)+0x10c>
 800fd00:	69a1      	ldr	r1, [r4, #24]
 800fd02:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800fd06:	4053      	eors	r3, r2
 800fd08:	420b      	tst	r3, r1
 800fd0a:	bf18      	it	ne
 800fd0c:	9209      	strne	r2, [sp, #36]	; 0x24
 800fd0e:	e78c      	b.n	800fc2a <Network::Init(NetworkParamsStore*)+0x12a>
 800fd10:	f8d8 3000 	ldr.w	r3, [r8]
 800fd14:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800fd18:	f1bc 0f00 	cmp.w	ip, #0
 800fd1c:	d0b7      	beq.n	800fc8e <Network::Init(NetworkParamsStore*)+0x18e>
 800fd1e:	6808      	ldr	r0, [r1, #0]
 800fd20:	695a      	ldr	r2, [r3, #20]
 800fd22:	1a80      	subs	r0, r0, r2
 800fd24:	4584      	cmp	ip, r0
 800fd26:	d8b2      	bhi.n	800fc8e <Network::Init(NetworkParamsStore*)+0x18e>
 800fd28:	6808      	ldr	r0, [r1, #0]
 800fd2a:	6158      	str	r0, [r3, #20]
 800fd2c:	6918      	ldr	r0, [r3, #16]
 800fd2e:	2801      	cmp	r0, #1
 800fd30:	f080 0201 	eor.w	r2, r0, #1
 800fd34:	611a      	str	r2, [r3, #16]
 800fd36:	bf16      	itet	ne
 800fd38:	2301      	movne	r3, #1
 800fd3a:	f8cb 0014 	streq.w	r0, [fp, #20]
 800fd3e:	f8cb 3010 	strne.w	r3, [fp, #16]
 800fd42:	e7a4      	b.n	800fc8e <Network::Init(NetworkParamsStore*)+0x18e>
 800fd44:	2101      	movs	r1, #1
 800fd46:	4628      	mov	r0, r5
 800fd48:	f001 fa28 	bl	801119c <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800fd4c:	e76d      	b.n	800fc2a <Network::Init(NetworkParamsStore*)+0x12a>
 800fd4e:	bf00      	nop
 800fd50:	2000a290 	mulcs	r0, r0, r2
 800fd54:	08015b34 	stmdaeq	r1, {r2, r4, r5, r8, r9, fp, ip, lr}
 800fd58:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0
 800fd5c:	40011000 	andmi	r1, r1, r0
 800fd60:	2000a9cc 	andcs	sl, r0, ip, asr #19
 800fd64:	2000a2a5 	andcs	sl, r0, r5, lsr #5

0800fd68 <Network::Print()>:
 800fd68:	b530      	push	{r4, r5, lr}
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	b085      	sub	sp, #20
 800fd6e:	4832      	ldr	r0, [pc, #200]	; (800fe38 <Network::Print()+0xd0>)
 800fd70:	f7f9 fa5c 	bl	800922c <printf>
 800fd74:	f104 011c 	add.w	r1, r4, #28
 800fd78:	4830      	ldr	r0, [pc, #192]	; (800fe3c <Network::Print()+0xd4>)
 800fd7a:	f7f9 fa57 	bl	800922c <printf>
 800fd7e:	6861      	ldr	r1, [r4, #4]
 800fd80:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 800fd84:	482e      	ldr	r0, [pc, #184]	; (800fe40 <Network::Print()+0xd8>)
 800fd86:	f7f9 fa51 	bl	800922c <printf>
 800fd8a:	69a0      	ldr	r0, [r4, #24]
 800fd8c:	f004 fa74 	bl	8014278 <__popcountsi2>
 800fd90:	6925      	ldr	r5, [r4, #16]
 800fd92:	9001      	str	r0, [sp, #4]
 800fd94:	0e2b      	lsrs	r3, r5, #24
 800fd96:	9300      	str	r3, [sp, #0]
 800fd98:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800fd9c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800fda0:	b2e9      	uxtb	r1, r5
 800fda2:	4828      	ldr	r0, [pc, #160]	; (800fe44 <Network::Print()+0xdc>)
 800fda4:	f7f9 fa42 	bl	800922c <printf>
 800fda8:	69a1      	ldr	r1, [r4, #24]
 800fdaa:	4827      	ldr	r0, [pc, #156]	; (800fe48 <Network::Print()+0xe0>)
 800fdac:	0e0b      	lsrs	r3, r1, #24
 800fdae:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fdb8:	b2c9      	uxtb	r1, r1
 800fdba:	f7f9 fa37 	bl	800922c <printf>
 800fdbe:	6961      	ldr	r1, [r4, #20]
 800fdc0:	4822      	ldr	r0, [pc, #136]	; (800fe4c <Network::Print()+0xe4>)
 800fdc2:	0e0b      	lsrs	r3, r1, #24
 800fdc4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800fdc8:	9300      	str	r3, [sp, #0]
 800fdca:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fdce:	b2c9      	uxtb	r1, r1
 800fdd0:	f7f9 fa2c 	bl	800922c <printf>
 800fdd4:	69a3      	ldr	r3, [r4, #24]
 800fdd6:	6921      	ldr	r1, [r4, #16]
 800fdd8:	481d      	ldr	r0, [pc, #116]	; (800fe50 <Network::Print()+0xe8>)
 800fdda:	ea61 0103 	orn	r1, r1, r3
 800fdde:	0e0b      	lsrs	r3, r1, #24
 800fde0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800fde4:	9300      	str	r3, [sp, #0]
 800fde6:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800fdea:	b2c9      	uxtb	r1, r1
 800fdec:	f7f9 fa1e 	bl	800922c <printf>
 800fdf0:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 800fdf4:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 800fdf8:	9302      	str	r3, [sp, #8]
 800fdfa:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 800fdfe:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 800fe02:	9301      	str	r3, [sp, #4]
 800fe04:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 800fe08:	4812      	ldr	r0, [pc, #72]	; (800fe54 <Network::Print()+0xec>)
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 800fe10:	f7f9 fa0c 	bl	800922c <printf>
 800fe14:	4b10      	ldr	r3, [pc, #64]	; (800fe58 <Network::Print()+0xf0>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	78da      	ldrb	r2, [r3, #3]
 800fe1a:	b952      	cbnz	r2, 800fe32 <Network::Print()+0xca>
 800fe1c:	785b      	ldrb	r3, [r3, #1]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	bf14      	ite	ne
 800fe22:	2144      	movne	r1, #68	; 0x44
 800fe24:	2153      	moveq	r1, #83	; 0x53
 800fe26:	480d      	ldr	r0, [pc, #52]	; (800fe5c <Network::Print()+0xf4>)
 800fe28:	b005      	add	sp, #20
 800fe2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe2e:	f7f9 b9fd 	b.w	800922c <printf>
 800fe32:	215a      	movs	r1, #90	; 0x5a
 800fe34:	e7f7      	b.n	800fe26 <Network::Print()+0xbe>
 800fe36:	bf00      	nop
 800fe38:	08015b40 	stmdaeq	r1, {r6, r8, r9, fp, ip, lr}
 800fe3c:	08015b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, ip, lr}
 800fe40:	08015b5a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, fp, ip, lr}
 800fe44:	08015b6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, fp, ip, lr}
 800fe48:	08015b8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, fp, ip, lr}
 800fe4c:	08015ba6 	stmdaeq	r1, {r1, r2, r5, r7, r8, r9, fp, ip, lr}
 800fe50:	08015bc0 	stmdaeq	r1, {r6, r7, r8, r9, fp, ip, lr}
 800fe54:	08015bda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, r9, fp, ip, lr}
 800fe58:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800fe5c:	08015c06 	stmdaeq	r1, {r1, r2, sl, fp, ip, lr}

0800fe60 <Network::TcpBegin(unsigned short)>:
 800fe60:	4608      	mov	r0, r1
 800fe62:	f7ff b803 	b.w	800ee6c <tcp_begin>

0800fe66 <Network::TcpRead(int, unsigned char const**)>:
 800fe66:	4608      	mov	r0, r1
 800fe68:	4611      	mov	r1, r2
 800fe6a:	f7ff b83d 	b.w	800eee8 <tcp_read>

0800fe6e <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 800fe6e:	4608      	mov	r0, r1
 800fe70:	4611      	mov	r1, r2
 800fe72:	461a      	mov	r2, r3
 800fe74:	f7ff b814 	b.w	800eea0 <tcp_write>

0800fe78 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 800fe78:	4b06      	ldr	r3, [pc, #24]	; (800fe94 <NetworkParams::NetworkParams(NetworkParamsStore*)+0x1c>)
 800fe7a:	b510      	push	{r4, lr}
 800fe7c:	225e      	movs	r2, #94	; 0x5e
 800fe7e:	4604      	mov	r4, r0
 800fe80:	6001      	str	r1, [r0, #0]
 800fe82:	2100      	movs	r1, #0
 800fe84:	4618      	mov	r0, r3
 800fe86:	f002 f967 	bl	8012158 <memset>
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	7502      	strb	r2, [r0, #20]
 800fe8e:	4620      	mov	r0, r4
 800fe90:	bd10      	pop	{r4, pc}
 800fe92:	bf00      	nop
 800fe94:	2000a290 	mulcs	r0, r0, r2

0800fe98 <NetworkParams::Load()>:
 800fe98:	b508      	push	{r3, lr}
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	4905      	ldr	r1, [pc, #20]	; (800feb4 <NetworkParams::Load()+0x1c>)
 800fe9e:	6800      	ldr	r0, [r0, #0]
 800fea0:	700b      	strb	r3, [r1, #0]
 800fea2:	704b      	strb	r3, [r1, #1]
 800fea4:	708b      	strb	r3, [r1, #2]
 800fea6:	70cb      	strb	r3, [r1, #3]
 800fea8:	b118      	cbz	r0, 800feb2 <NetworkParams::Load()+0x1a>
 800feaa:	6803      	ldr	r3, [r0, #0]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	4798      	blx	r3
 800feb0:	2001      	movs	r0, #1
 800feb2:	bd08      	pop	{r3, pc}
 800feb4:	2000a290 	mulcs	r0, r0, r2

0800feb8 <NetworkParams::Load(char const*, unsigned int)>:
 800feb8:	6803      	ldr	r3, [r0, #0]
 800feba:	b1eb      	cbz	r3, 800fef8 <NetworkParams::Load(char const*, unsigned int)+0x40>
 800febc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800febe:	2300      	movs	r3, #0
 800fec0:	460e      	mov	r6, r1
 800fec2:	4617      	mov	r7, r2
 800fec4:	4605      	mov	r5, r0
 800fec6:	4c0d      	ldr	r4, [pc, #52]	; (800fefc <NetworkParams::Load(char const*, unsigned int)+0x44>)
 800fec8:	4602      	mov	r2, r0
 800feca:	490d      	ldr	r1, [pc, #52]	; (800ff00 <NetworkParams::Load(char const*, unsigned int)+0x48>)
 800fecc:	4668      	mov	r0, sp
 800fece:	7023      	strb	r3, [r4, #0]
 800fed0:	7063      	strb	r3, [r4, #1]
 800fed2:	70a3      	strb	r3, [r4, #2]
 800fed4:	70e3      	strb	r3, [r4, #3]
 800fed6:	f001 fab9 	bl	801144c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800feda:	463a      	mov	r2, r7
 800fedc:	4631      	mov	r1, r6
 800fede:	4668      	mov	r0, sp
 800fee0:	f001 fab8 	bl	8011454 <ReadConfigFile::Read(char const*, unsigned int)>
 800fee4:	6828      	ldr	r0, [r5, #0]
 800fee6:	4621      	mov	r1, r4
 800fee8:	6803      	ldr	r3, [r0, #0]
 800feea:	689b      	ldr	r3, [r3, #8]
 800feec:	4798      	blx	r3
 800feee:	4668      	mov	r0, sp
 800fef0:	f001 faaf 	bl	8011452 <ReadConfigFile::~ReadConfigFile()>
 800fef4:	b003      	add	sp, #12
 800fef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop
 800fefc:	2000a290 	mulcs	r0, r0, r2
 800ff00:	08010035 	stmdaeq	r1, {r0, r2, r4, r5}

0800ff04 <NetworkParams::callbackFunction(char const*)>:
 800ff04:	b530      	push	{r4, r5, lr}
 800ff06:	460c      	mov	r4, r1
 800ff08:	b085      	sub	sp, #20
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	4942      	ldr	r1, [pc, #264]	; (8010018 <NetworkParams::callbackFunction(char const*)+0x114>)
 800ff0e:	f10d 0207 	add.w	r2, sp, #7
 800ff12:	f001 fbd7 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ff16:	b980      	cbnz	r0, 800ff3a <NetworkParams::callbackFunction(char const*)+0x36>
 800ff18:	4940      	ldr	r1, [pc, #256]	; (801001c <NetworkParams::callbackFunction(char const*)+0x118>)
 800ff1a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ff1e:	680b      	ldr	r3, [r1, #0]
 800ff20:	b142      	cbz	r2, 800ff34 <NetworkParams::callbackFunction(char const*)+0x30>
 800ff22:	f023 0301 	bic.w	r3, r3, #1
 800ff26:	3a00      	subs	r2, #0
 800ff28:	bf18      	it	ne
 800ff2a:	2201      	movne	r2, #1
 800ff2c:	600b      	str	r3, [r1, #0]
 800ff2e:	750a      	strb	r2, [r1, #20]
 800ff30:	b005      	add	sp, #20
 800ff32:	bd30      	pop	{r4, r5, pc}
 800ff34:	f043 0301 	orr.w	r3, r3, #1
 800ff38:	e7f5      	b.n	800ff26 <NetworkParams::callbackFunction(char const*)+0x22>
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	4938      	ldr	r1, [pc, #224]	; (8010020 <NetworkParams::callbackFunction(char const*)+0x11c>)
 800ff3e:	f10d 0207 	add.w	r2, sp, #7
 800ff42:	f001 fbbf 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800ff46:	b988      	cbnz	r0, 800ff6c <NetworkParams::callbackFunction(char const*)+0x68>
 800ff48:	4a34      	ldr	r2, [pc, #208]	; (801001c <NetworkParams::callbackFunction(char const*)+0x118>)
 800ff4a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ff4e:	6813      	ldr	r3, [r2, #0]
 800ff50:	1e4d      	subs	r5, r1, #1
 800ff52:	2d04      	cmp	r5, #4
 800ff54:	bf97      	itett	ls
 800ff56:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800ff5a:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800ff5e:	6013      	strls	r3, [r2, #0]
 800ff60:	f882 105d 	strbls.w	r1, [r2, #93]	; 0x5d
 800ff64:	bf84      	itt	hi
 800ff66:	6013      	strhi	r3, [r2, #0]
 800ff68:	f882 005d 	strbhi.w	r0, [r2, #93]	; 0x5d
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	492d      	ldr	r1, [pc, #180]	; (8010024 <NetworkParams::callbackFunction(char const*)+0x120>)
 800ff70:	aa02      	add	r2, sp, #8
 800ff72:	f001 fb1f 	bl	80115b4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800ff76:	b9d0      	cbnz	r0, 800ffae <NetworkParams::callbackFunction(char const*)+0xaa>
 800ff78:	9b02      	ldr	r3, [sp, #8]
 800ff7a:	b2d9      	uxtb	r1, r3
 800ff7c:	29ac      	cmp	r1, #172	; 0xac
 800ff7e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ff82:	d00a      	beq.n	800ff9a <NetworkParams::callbackFunction(char const*)+0x96>
 800ff84:	29c0      	cmp	r1, #192	; 0xc0
 800ff86:	d00c      	beq.n	800ffa2 <NetworkParams::callbackFunction(char const*)+0x9e>
 800ff88:	290a      	cmp	r1, #10
 800ff8a:	d10d      	bne.n	800ffa8 <NetworkParams::callbackFunction(char const*)+0xa4>
 800ff8c:	4a23      	ldr	r2, [pc, #140]	; (801001c <NetworkParams::callbackFunction(char const*)+0x118>)
 800ff8e:	6053      	str	r3, [r2, #4]
 800ff90:	6813      	ldr	r3, [r2, #0]
 800ff92:	f043 0302 	orr.w	r3, r3, #2
 800ff96:	6013      	str	r3, [r2, #0]
 800ff98:	e7ca      	b.n	800ff30 <NetworkParams::callbackFunction(char const*)+0x2c>
 800ff9a:	3a10      	subs	r2, #16
 800ff9c:	2a0f      	cmp	r2, #15
 800ff9e:	d8c7      	bhi.n	800ff30 <NetworkParams::callbackFunction(char const*)+0x2c>
 800ffa0:	e7f4      	b.n	800ff8c <NetworkParams::callbackFunction(char const*)+0x88>
 800ffa2:	2aa8      	cmp	r2, #168	; 0xa8
 800ffa4:	d1c4      	bne.n	800ff30 <NetworkParams::callbackFunction(char const*)+0x2c>
 800ffa6:	e7f1      	b.n	800ff8c <NetworkParams::callbackFunction(char const*)+0x88>
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d0ef      	beq.n	800ff8c <NetworkParams::callbackFunction(char const*)+0x88>
 800ffac:	e7c0      	b.n	800ff30 <NetworkParams::callbackFunction(char const*)+0x2c>
 800ffae:	4620      	mov	r0, r4
 800ffb0:	491d      	ldr	r1, [pc, #116]	; (8010028 <NetworkParams::callbackFunction(char const*)+0x124>)
 800ffb2:	aa02      	add	r2, sp, #8
 800ffb4:	f001 fafe 	bl	80115b4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800ffb8:	b970      	cbnz	r0, 800ffd8 <NetworkParams::callbackFunction(char const*)+0xd4>
 800ffba:	9a02      	ldr	r2, [sp, #8]
 800ffbc:	2a00      	cmp	r2, #0
 800ffbe:	d0b7      	beq.n	800ff30 <NetworkParams::callbackFunction(char const*)+0x2c>
 800ffc0:	ba13      	rev	r3, r2
 800ffc2:	43d9      	mvns	r1, r3
 800ffc4:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 800ffc8:	d1b2      	bne.n	800ff30 <NetworkParams::callbackFunction(char const*)+0x2c>
 800ffca:	4b14      	ldr	r3, [pc, #80]	; (801001c <NetworkParams::callbackFunction(char const*)+0x118>)
 800ffcc:	609a      	str	r2, [r3, #8]
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	f042 0204 	orr.w	r2, r2, #4
 800ffd4:	601a      	str	r2, [r3, #0]
 800ffd6:	e7ab      	b.n	800ff30 <NetworkParams::callbackFunction(char const*)+0x2c>
 800ffd8:	4620      	mov	r0, r4
 800ffda:	4914      	ldr	r1, [pc, #80]	; (801002c <NetworkParams::callbackFunction(char const*)+0x128>)
 800ffdc:	aa02      	add	r2, sp, #8
 800ffde:	f001 fae9 	bl	80115b4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800ffe2:	4d0e      	ldr	r5, [pc, #56]	; (801001c <NetworkParams::callbackFunction(char const*)+0x118>)
 800ffe4:	b930      	cbnz	r0, 800fff4 <NetworkParams::callbackFunction(char const*)+0xf0>
 800ffe6:	9b02      	ldr	r3, [sp, #8]
 800ffe8:	60eb      	str	r3, [r5, #12]
 800ffea:	682b      	ldr	r3, [r5, #0]
 800ffec:	f043 0308 	orr.w	r3, r3, #8
 800fff0:	602b      	str	r3, [r5, #0]
 800fff2:	e79d      	b.n	800ff30 <NetworkParams::callbackFunction(char const*)+0x2c>
 800fff4:	233f      	movs	r3, #63	; 0x3f
 800fff6:	4620      	mov	r0, r4
 800fff8:	9303      	str	r3, [sp, #12]
 800fffa:	490d      	ldr	r1, [pc, #52]	; (8010030 <NetworkParams::callbackFunction(char const*)+0x12c>)
 800fffc:	ab03      	add	r3, sp, #12
 800fffe:	f105 0215 	add.w	r2, r5, #21
 8010002:	f001 fa5b 	bl	80114bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8010006:	2800      	cmp	r0, #0
 8010008:	d192      	bne.n	800ff30 <NetworkParams::callbackFunction(char const*)+0x2c>
 801000a:	9b03      	ldr	r3, [sp, #12]
 801000c:	442b      	add	r3, r5
 801000e:	7558      	strb	r0, [r3, #21]
 8010010:	682b      	ldr	r3, [r5, #0]
 8010012:	f043 0320 	orr.w	r3, r3, #32
 8010016:	e7eb      	b.n	800fff0 <NetworkParams::callbackFunction(char const*)+0xec>
 8010018:	08015c5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, sl, fp, ip, lr}
 801001c:	2000a290 	mulcs	r0, r0, r2
 8010020:	08015c3c 	stmdaeq	r1, {r2, r3, r4, r5, sl, fp, ip, lr}
 8010024:	08015c21 	stmdaeq	r1, {r0, r5, sl, fp, ip, lr}
 8010028:	08015c55 	stmdaeq	r1, {r0, r2, r4, r6, sl, fp, ip, lr}
 801002c:	08015c2c 	stmdaeq	r1, {r2, r3, r5, sl, fp, ip, lr}
 8010030:	08015c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, ip, lr}

08010034 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8010034:	f7ff bf66 	b.w	800ff04 <NetworkParams::callbackFunction(char const*)>

08010038 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 8010038:	b530      	push	{r4, r5, lr}
 801003a:	4614      	mov	r4, r2
 801003c:	461d      	mov	r5, r3
 801003e:	b087      	sub	sp, #28
 8010040:	2900      	cmp	r1, #0
 8010042:	d02a      	beq.n	801009a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x62>
 8010044:	225e      	movs	r2, #94	; 0x5e
 8010046:	4872      	ldr	r0, [pc, #456]	; (8010210 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 8010048:	f002 f86f 	bl	801212a <memmove>
 801004c:	4622      	mov	r2, r4
 801004e:	462b      	mov	r3, r5
 8010050:	4970      	ldr	r1, [pc, #448]	; (8010214 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8010052:	a803      	add	r0, sp, #12
 8010054:	f001 f95a 	bl	801130c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8010058:	4c6d      	ldr	r4, [pc, #436]	; (8010210 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 801005a:	6823      	ldr	r3, [r4, #0]
 801005c:	0799      	lsls	r1, r3, #30
 801005e:	bf5f      	itttt	pl
 8010060:	4a6d      	ldrpl	r2, [pc, #436]	; (8010218 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8010062:	6812      	ldrpl	r2, [r2, #0]
 8010064:	6912      	ldrpl	r2, [r2, #16]
 8010066:	6062      	strpl	r2, [r4, #4]
 8010068:	075a      	lsls	r2, r3, #29
 801006a:	bf5f      	itttt	pl
 801006c:	4a6a      	ldrpl	r2, [pc, #424]	; (8010218 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 801006e:	6812      	ldrpl	r2, [r2, #0]
 8010070:	6992      	ldrpl	r2, [r2, #24]
 8010072:	60a2      	strpl	r2, [r4, #8]
 8010074:	071d      	lsls	r5, r3, #28
 8010076:	bf5f      	itttt	pl
 8010078:	4a67      	ldrpl	r2, [pc, #412]	; (8010218 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 801007a:	6812      	ldrpl	r2, [r2, #0]
 801007c:	6952      	ldrpl	r2, [r2, #20]
 801007e:	60e2      	strpl	r2, [r4, #12]
 8010080:	0698      	lsls	r0, r3, #26
 8010082:	d417      	bmi.n	80100b4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x7c>
 8010084:	223f      	movs	r2, #63	; 0x3f
 8010086:	4b64      	ldr	r3, [pc, #400]	; (8010218 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8010088:	4864      	ldr	r0, [pc, #400]	; (801021c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	331b      	adds	r3, #27
 801008e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010092:	b941      	cbnz	r1, 80100a6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x6e>
 8010094:	f002 f860 	bl	8012158 <memset>
 8010098:	e009      	b.n	80100ae <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x76>
 801009a:	6800      	ldr	r0, [r0, #0]
 801009c:	495c      	ldr	r1, [pc, #368]	; (8010210 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 801009e:	6803      	ldr	r3, [r0, #0]
 80100a0:	68db      	ldr	r3, [r3, #12]
 80100a2:	4798      	blx	r3
 80100a4:	e7d2      	b.n	801004c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x14>
 80100a6:	3a01      	subs	r2, #1
 80100a8:	f800 1b01 	strb.w	r1, [r0], #1
 80100ac:	d1ef      	bne.n	801008e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x56>
 80100ae:	2300      	movs	r3, #0
 80100b0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80100b4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80100b8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80100bc:	7d23      	ldrb	r3, [r4, #20]
 80100be:	42aa      	cmp	r2, r5
 80100c0:	6821      	ldr	r1, [r4, #0]
 80100c2:	d21a      	bcs.n	80100fa <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc2>
 80100c4:	9803      	ldr	r0, [sp, #12]
 80100c6:	07c9      	lsls	r1, r1, #31
 80100c8:	4410      	add	r0, r2
 80100ca:	eba5 0502 	sub.w	r5, r5, r2
 80100ce:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80100d2:	d404      	bmi.n	80100de <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa6>
 80100d4:	b922      	cbnz	r2, 80100e0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa8>
 80100d6:	9300      	str	r3, [sp, #0]
 80100d8:	4a51      	ldr	r2, [pc, #324]	; (8010220 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 80100da:	4b52      	ldr	r3, [pc, #328]	; (8010224 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 80100dc:	e003      	b.n	80100e6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 80100de:	b312      	cbz	r2, 8010126 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xee>
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	4a51      	ldr	r2, [pc, #324]	; (8010228 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80100e4:	4b4f      	ldr	r3, [pc, #316]	; (8010224 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 80100e6:	4629      	mov	r1, r5
 80100e8:	f7f9 f8c8 	bl	800927c <snprintf>
 80100ec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80100f0:	4285      	cmp	r5, r0
 80100f2:	bfa4      	itt	ge
 80100f4:	181b      	addge	r3, r3, r0
 80100f6:	f8ad 3012 	strhge.w	r3, [sp, #18]
 80100fa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80100fe:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8010102:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8010106:	42aa      	cmp	r2, r5
 8010108:	6821      	ldr	r1, [r4, #0]
 801010a:	d21f      	bcs.n	801014c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x114>
 801010c:	9803      	ldr	r0, [sp, #12]
 801010e:	05c9      	lsls	r1, r1, #23
 8010110:	4410      	add	r0, r2
 8010112:	eba5 0502 	sub.w	r5, r5, r2
 8010116:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801011a:	d408      	bmi.n	801012e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf6>
 801011c:	b94a      	cbnz	r2, 8010132 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfa>
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	4a3f      	ldr	r2, [pc, #252]	; (8010220 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8010122:	4b42      	ldr	r3, [pc, #264]	; (801022c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8010124:	e008      	b.n	8010138 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	4a41      	ldr	r2, [pc, #260]	; (8010230 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 801012a:	4b3e      	ldr	r3, [pc, #248]	; (8010224 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 801012c:	e7db      	b.n	80100e6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 801012e:	2a00      	cmp	r2, #0
 8010130:	d03e      	beq.n	80101b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x178>
 8010132:	9300      	str	r3, [sp, #0]
 8010134:	4a3c      	ldr	r2, [pc, #240]	; (8010228 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8010136:	4b3d      	ldr	r3, [pc, #244]	; (801022c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8010138:	4629      	mov	r1, r5
 801013a:	f7f9 f89f 	bl	800927c <snprintf>
 801013e:	4285      	cmp	r5, r0
 8010140:	bfa2      	ittt	ge
 8010142:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8010146:	18c0      	addge	r0, r0, r3
 8010148:	f8ad 0012 	strhge.w	r0, [sp, #18]
 801014c:	4939      	ldr	r1, [pc, #228]	; (8010234 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 801014e:	a803      	add	r0, sp, #12
 8010150:	f001 f962 	bl	8011418 <PropertiesBuilder::AddComment(char const*)>
 8010154:	6823      	ldr	r3, [r4, #0]
 8010156:	6862      	ldr	r2, [r4, #4]
 8010158:	4937      	ldr	r1, [pc, #220]	; (8010238 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x200>)
 801015a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801015e:	a803      	add	r0, sp, #12
 8010160:	f001 f916 	bl	8011390 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010164:	6823      	ldr	r3, [r4, #0]
 8010166:	68a2      	ldr	r2, [r4, #8]
 8010168:	4934      	ldr	r1, [pc, #208]	; (801023c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>)
 801016a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801016e:	a803      	add	r0, sp, #12
 8010170:	f001 f90e 	bl	8011390 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010174:	6823      	ldr	r3, [r4, #0]
 8010176:	68e2      	ldr	r2, [r4, #12]
 8010178:	4931      	ldr	r1, [pc, #196]	; (8010240 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x208>)
 801017a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801017e:	a803      	add	r0, sp, #12
 8010180:	f001 f906 	bl	8011390 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010184:	6821      	ldr	r1, [r4, #0]
 8010186:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801018a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801018e:	42a3      	cmp	r3, r4
 8010190:	d220      	bcs.n	80101d4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x19c>
 8010192:	9803      	ldr	r0, [sp, #12]
 8010194:	f011 0f20 	tst.w	r1, #32
 8010198:	4418      	add	r0, r3
 801019a:	eba4 0403 	sub.w	r4, r4, r3
 801019e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80101a2:	4b1e      	ldr	r3, [pc, #120]	; (801021c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80101a4:	d108      	bne.n	80101b8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x180>
 80101a6:	b942      	cbnz	r2, 80101ba <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x182>
 80101a8:	9300      	str	r3, [sp, #0]
 80101aa:	4a26      	ldr	r2, [pc, #152]	; (8010244 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 80101ac:	4b26      	ldr	r3, [pc, #152]	; (8010248 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 80101ae:	e007      	b.n	80101c0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x188>
 80101b0:	9300      	str	r3, [sp, #0]
 80101b2:	4a1f      	ldr	r2, [pc, #124]	; (8010230 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 80101b4:	4b1d      	ldr	r3, [pc, #116]	; (801022c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 80101b6:	e7bf      	b.n	8010138 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 80101b8:	b32a      	cbz	r2, 8010206 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ce>
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	4a23      	ldr	r2, [pc, #140]	; (801024c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x214>)
 80101be:	4b22      	ldr	r3, [pc, #136]	; (8010248 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 80101c0:	4621      	mov	r1, r4
 80101c2:	f7f9 f85b 	bl	800927c <snprintf>
 80101c6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80101ca:	4284      	cmp	r4, r0
 80101cc:	bfa4      	itt	ge
 80101ce:	181b      	addge	r3, r3, r0
 80101d0:	f8ad 3012 	strhge.w	r3, [sp, #18]
 80101d4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80101d8:	b17b      	cbz	r3, 80101fa <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1c2>
 80101da:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80101de:	9b03      	ldr	r3, [sp, #12]
 80101e0:	4413      	add	r3, r2
 80101e2:	227d      	movs	r2, #125	; 0x7d
 80101e4:	f803 2c01 	strb.w	r2, [r3, #-1]
 80101e8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80101ec:	9903      	ldr	r1, [sp, #12]
 80101ee:	54ca      	strb	r2, [r1, r3]
 80101f0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80101f4:	3301      	adds	r3, #1
 80101f6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80101fa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80101fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010200:	601a      	str	r2, [r3, #0]
 8010202:	b007      	add	sp, #28
 8010204:	bd30      	pop	{r4, r5, pc}
 8010206:	9300      	str	r3, [sp, #0]
 8010208:	4a11      	ldr	r2, [pc, #68]	; (8010250 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x218>)
 801020a:	4b0f      	ldr	r3, [pc, #60]	; (8010248 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 801020c:	e7d8      	b.n	80101c0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x188>
 801020e:	bf00      	nop
 8010210:	2000a290 	mulcs	r0, r0, r2
 8010214:	08015c67 	stmdaeq	r1, {r0, r1, r2, r5, r6, sl, fp, ip, lr}
 8010218:	2000a28c 	andcs	sl, r0, ip, lsl #5
 801021c:	2000a2a5 	andcs	sl, r0, r5, lsr #5
 8010220:	080144fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, lr}
 8010224:	08015c5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, sl, fp, ip, lr}
 8010228:	080144f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sl, lr}
 801022c:	08015c3c 	stmdaeq	r1, {r2, r3, r4, r5, sl, fp, ip, lr}
 8010230:	080144fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, lr}
 8010234:	08015c17 	stmdaeq	r1, {r0, r1, r2, r4, sl, fp, ip, lr}
 8010238:	08015c21 	stmdaeq	r1, {r0, r5, sl, fp, ip, lr}
 801023c:	08015c55 	stmdaeq	r1, {r0, r2, r4, r6, sl, fp, ip, lr}
 8010240:	08015c2c 	stmdaeq	r1, {r2, r3, r5, sl, fp, ip, lr}
 8010244:	080144ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, sl, lr}
 8010248:	08015c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, ip, lr}
 801024c:	080144df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, sl, lr}
 8010250:	080144eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, sl, lr}

08010254 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 8010254:	b513      	push	{r0, r1, r4, lr}
 8010256:	6804      	ldr	r4, [r0, #0]
 8010258:	b914      	cbnz	r4, 8010260 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801025a:	601c      	str	r4, [r3, #0]
 801025c:	b002      	add	sp, #8
 801025e:	bd10      	pop	{r4, pc}
 8010260:	9300      	str	r3, [sp, #0]
 8010262:	4613      	mov	r3, r2
 8010264:	460a      	mov	r2, r1
 8010266:	2100      	movs	r1, #0
 8010268:	f7ff fee6 	bl	8010038 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 801026c:	e7f6      	b.n	801025c <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

0801026e <NetworkParams::Dump()>:
 801026e:	4770      	bx	lr

08010270 <memcpy.isra.0>:
 8010270:	3801      	subs	r0, #1
 8010272:	440a      	add	r2, r1
 8010274:	4291      	cmp	r1, r2
 8010276:	d100      	bne.n	801027a <memcpy.isra.0+0xa>
 8010278:	4770      	bx	lr
 801027a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801027e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010282:	e7f7      	b.n	8010274 <memcpy.isra.0+0x4>

08010284 <arp_announce>:
 8010284:	4803      	ldr	r0, [pc, #12]	; (8010294 <arp_announce+0x10>)
 8010286:	69c3      	ldr	r3, [r0, #28]
 8010288:	b113      	cbz	r3, 8010290 <arp_announce+0xc>
 801028a:	212a      	movs	r1, #42	; 0x2a
 801028c:	f002 be34 	b.w	8012ef8 <emac_eth_send>
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop
 8010294:	2000a2f0 	strdcs	sl, [r0], -r0

08010298 <arp_handle_request>:
 8010298:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801029a:	2204      	movs	r2, #4
 801029c:	f100 0126 	add.w	r1, r0, #38	; 0x26
 80102a0:	4604      	mov	r4, r0
 80102a2:	eb0d 0002 	add.w	r0, sp, r2
 80102a6:	f7ff ffe3 	bl	8010270 <memcpy.isra.0>
 80102aa:	4b0d      	ldr	r3, [pc, #52]	; (80102e0 <arp_handle_request+0x48>)
 80102ac:	9a01      	ldr	r2, [sp, #4]
 80102ae:	69db      	ldr	r3, [r3, #28]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d113      	bne.n	80102dc <arp_handle_request+0x44>
 80102b4:	2206      	movs	r2, #6
 80102b6:	4d0b      	ldr	r5, [pc, #44]	; (80102e4 <arp_handle_request+0x4c>)
 80102b8:	18a1      	adds	r1, r4, r2
 80102ba:	4628      	mov	r0, r5
 80102bc:	f7ff ffd8 	bl	8010270 <memcpy.isra.0>
 80102c0:	f104 0116 	add.w	r1, r4, #22
 80102c4:	f105 0020 	add.w	r0, r5, #32
 80102c8:	2206      	movs	r2, #6
 80102ca:	f7ff ffd1 	bl	8010270 <memcpy.isra.0>
 80102ce:	69e3      	ldr	r3, [r4, #28]
 80102d0:	212a      	movs	r1, #42	; 0x2a
 80102d2:	4628      	mov	r0, r5
 80102d4:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 80102d8:	f002 fe0e 	bl	8012ef8 <emac_eth_send>
 80102dc:	b003      	add	sp, #12
 80102de:	bd30      	pop	{r4, r5, pc}
 80102e0:	2000a2f0 	strdcs	sl, [r0], -r0
 80102e4:	2000a31c 	andcs	sl, r0, ip, lsl r3

080102e8 <arp_handle_reply>:
 80102e8:	69c1      	ldr	r1, [r0, #28]
 80102ea:	3016      	adds	r0, #22
 80102ec:	f000 b80a 	b.w	8010304 <arp_cache_update>

080102f0 <arp_send_request>:
 80102f0:	4b03      	ldr	r3, [pc, #12]	; (8010300 <arp_send_request+0x10>)
 80102f2:	212a      	movs	r1, #42	; 0x2a
 80102f4:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 80102f8:	4618      	mov	r0, r3
 80102fa:	f002 bdfd 	b.w	8012ef8 <emac_eth_send>
 80102fe:	bf00      	nop
 8010300:	2000a348 	andcs	sl, r0, r8, asr #6

08010304 <arp_cache_update>:
 8010304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010306:	4e11      	ldr	r6, [pc, #68]	; (801034c <arp_cache_update+0x48>)
 8010308:	8833      	ldrh	r3, [r6, #0]
 801030a:	2b20      	cmp	r3, #32
 801030c:	d018      	beq.n	8010340 <arp_cache_update+0x3c>
 801030e:	2400      	movs	r4, #0
 8010310:	220c      	movs	r2, #12
 8010312:	4d0f      	ldr	r5, [pc, #60]	; (8010350 <arp_cache_update+0x4c>)
 8010314:	b2a7      	uxth	r7, r4
 8010316:	42bb      	cmp	r3, r7
 8010318:	d80b      	bhi.n	8010332 <arp_cache_update+0x2e>
 801031a:	fb02 5203 	mla	r2, r2, r3, r5
 801031e:	1d84      	adds	r4, r0, #6
 8010320:	3203      	adds	r2, #3
 8010322:	42a0      	cmp	r0, r4
 8010324:	d10d      	bne.n	8010342 <arp_cache_update+0x3e>
 8010326:	220c      	movs	r2, #12
 8010328:	435a      	muls	r2, r3
 801032a:	3301      	adds	r3, #1
 801032c:	50a9      	str	r1, [r5, r2]
 801032e:	8033      	strh	r3, [r6, #0]
 8010330:	e006      	b.n	8010340 <arp_cache_update+0x3c>
 8010332:	3401      	adds	r4, #1
 8010334:	fb02 5704 	mla	r7, r2, r4, r5
 8010338:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 801033c:	428f      	cmp	r7, r1
 801033e:	d1e9      	bne.n	8010314 <arp_cache_update+0x10>
 8010340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010342:	f810 7b01 	ldrb.w	r7, [r0], #1
 8010346:	f802 7f01 	strb.w	r7, [r2, #1]!
 801034a:	e7ea      	b.n	8010322 <arp_cache_update+0x1e>
 801034c:	2000a4f4 	strdcs	sl, [r0], -r4
 8010350:	2000a374 	andcs	sl, r0, r4, ror r3

08010354 <arp_cache_lookup>:
 8010354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010358:	2200      	movs	r2, #0
 801035a:	4606      	mov	r6, r0
 801035c:	460c      	mov	r4, r1
 801035e:	200c      	movs	r0, #12
 8010360:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80103e8 <arp_cache_lookup+0x94>
 8010364:	fb00 f302 	mul.w	r3, r0, r2
 8010368:	f853 1008 	ldr.w	r1, [r3, r8]
 801036c:	42b1      	cmp	r1, r6
 801036e:	d10d      	bne.n	801038c <arp_cache_lookup+0x38>
 8010370:	3304      	adds	r3, #4
 8010372:	4443      	add	r3, r8
 8010374:	3c01      	subs	r4, #1
 8010376:	1d9a      	adds	r2, r3, #6
 8010378:	4293      	cmp	r3, r2
 801037a:	d102      	bne.n	8010382 <arp_cache_lookup+0x2e>
 801037c:	4630      	mov	r0, r6
 801037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010382:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010386:	f804 1f01 	strb.w	r1, [r4, #1]!
 801038a:	e7f5      	b.n	8010378 <arp_cache_lookup+0x24>
 801038c:	b111      	cbz	r1, 8010394 <arp_cache_lookup+0x40>
 801038e:	3201      	adds	r2, #1
 8010390:	2a20      	cmp	r2, #32
 8010392:	d1e7      	bne.n	8010364 <arp_cache_lookup+0x10>
 8010394:	2704      	movs	r7, #4
 8010396:	f8df a054 	ldr.w	sl, [pc, #84]	; 80103ec <arp_cache_lookup+0x98>
 801039a:	f8ba 5000 	ldrh.w	r5, [sl]
 801039e:	3f01      	subs	r7, #1
 80103a0:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80103a4:	d101      	bne.n	80103aa <arp_cache_lookup+0x56>
 80103a6:	463e      	mov	r6, r7
 80103a8:	e7e8      	b.n	801037c <arp_cache_lookup+0x28>
 80103aa:	4630      	mov	r0, r6
 80103ac:	f7ff ffa0 	bl	80102f0 <arp_send_request>
 80103b0:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 80103b4:	f1b9 0901 	subs.w	r9, r9, #1
 80103b8:	f8ba 3000 	ldrh.w	r3, [sl]
 80103bc:	d011      	beq.n	80103e2 <arp_cache_lookup+0x8e>
 80103be:	429d      	cmp	r5, r3
 80103c0:	d00c      	beq.n	80103dc <arp_cache_lookup+0x88>
 80103c2:	230c      	movs	r3, #12
 80103c4:	fb03 8505 	mla	r5, r3, r5, r8
 80103c8:	3c01      	subs	r4, #1
 80103ca:	1d2b      	adds	r3, r5, #4
 80103cc:	350a      	adds	r5, #10
 80103ce:	42ab      	cmp	r3, r5
 80103d0:	d0d4      	beq.n	801037c <arp_cache_lookup+0x28>
 80103d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80103da:	e7f8      	b.n	80103ce <arp_cache_lookup+0x7a>
 80103dc:	f7f7 f8a0 	bl	8007520 <net_handle>
 80103e0:	e7e8      	b.n	80103b4 <arp_cache_lookup+0x60>
 80103e2:	429d      	cmp	r5, r3
 80103e4:	d0db      	beq.n	801039e <arp_cache_lookup+0x4a>
 80103e6:	e7ec      	b.n	80103c2 <arp_cache_lookup+0x6e>
 80103e8:	2000a374 	andcs	sl, r0, r4, ror r3
 80103ec:	2000a4f4 	strdcs	sl, [r0], -r4

080103f0 <_parse_response>:
 80103f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f4:	2400      	movs	r4, #0
 80103f6:	460d      	mov	r5, r1
 80103f8:	46a3      	mov	fp, r4
 80103fa:	4627      	mov	r7, r4
 80103fc:	46a2      	mov	sl, r4
 80103fe:	46a1      	mov	r9, r4
 8010400:	46a0      	mov	r8, r4
 8010402:	4e4f      	ldr	r6, [pc, #316]	; (8010540 <_parse_response+0x150>)
 8010404:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8010408:	6833      	ldr	r3, [r6, #0]
 801040a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801040e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8010412:	9009      	str	r0, [sp, #36]	; 0x24
 8010414:	9402      	str	r4, [sp, #8]
 8010416:	9407      	str	r4, [sp, #28]
 8010418:	9308      	str	r3, [sp, #32]
 801041a:	f7f7 f881 	bl	8007520 <net_handle>
 801041e:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8010422:	9300      	str	r3, [sp, #0]
 8010424:	f44f 7209 	mov.w	r2, #548	; 0x224
 8010428:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801042c:	ab0c      	add	r3, sp, #48	; 0x30
 801042e:	a90d      	add	r1, sp, #52	; 0x34
 8010430:	f7fe fe1c 	bl	800f06c <udp_recv>
 8010434:	2800      	cmp	r0, #0
 8010436:	d03e      	beq.n	80104b6 <_parse_response+0xc6>
 8010438:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801043c:	2b43      	cmp	r3, #67	; 0x43
 801043e:	d13a      	bne.n	80104b6 <_parse_response+0xc6>
 8010440:	aa14      	add	r2, sp, #80	; 0x50
 8010442:	1e6b      	subs	r3, r5, #1
 8010444:	1d69      	adds	r1, r5, #5
 8010446:	4299      	cmp	r1, r3
 8010448:	d12f      	bne.n	80104aa <_parse_response+0xba>
 801044a:	2100      	movs	r1, #0
 801044c:	ab0d      	add	r3, sp, #52	; 0x34
 801044e:	181d      	adds	r5, r3, r0
 8010450:	468c      	mov	ip, r1
 8010452:	460e      	mov	r6, r1
 8010454:	4608      	mov	r0, r1
 8010456:	ab49      	add	r3, sp, #292	; 0x124
 8010458:	42ab      	cmp	r3, r5
 801045a:	d337      	bcc.n	80104cc <_parse_response+0xdc>
 801045c:	b141      	cbz	r1, 8010470 <_parse_response+0x80>
 801045e:	4b39      	ldr	r3, [pc, #228]	; (8010544 <_parse_response+0x154>)
 8010460:	9a07      	ldr	r2, [sp, #28]
 8010462:	f883 8003 	strb.w	r8, [r3, #3]
 8010466:	709a      	strb	r2, [r3, #2]
 8010468:	9a06      	ldr	r2, [sp, #24]
 801046a:	705a      	strb	r2, [r3, #1]
 801046c:	9a05      	ldr	r2, [sp, #20]
 801046e:	701a      	strb	r2, [r3, #0]
 8010470:	f1bc 0f00 	cmp.w	ip, #0
 8010474:	d007      	beq.n	8010486 <_parse_response+0x96>
 8010476:	4b34      	ldr	r3, [pc, #208]	; (8010548 <_parse_response+0x158>)
 8010478:	9a04      	ldr	r2, [sp, #16]
 801047a:	705c      	strb	r4, [r3, #1]
 801047c:	70da      	strb	r2, [r3, #3]
 801047e:	9a03      	ldr	r2, [sp, #12]
 8010480:	709a      	strb	r2, [r3, #2]
 8010482:	9a02      	ldr	r2, [sp, #8]
 8010484:	701a      	strb	r2, [r3, #0]
 8010486:	b13e      	cbz	r6, 8010498 <_parse_response+0xa8>
 8010488:	4b30      	ldr	r3, [pc, #192]	; (801054c <_parse_response+0x15c>)
 801048a:	70df      	strb	r7, [r3, #3]
 801048c:	f883 a002 	strb.w	sl, [r3, #2]
 8010490:	f883 9001 	strb.w	r9, [r3, #1]
 8010494:	f883 b000 	strb.w	fp, [r3]
 8010498:	2802      	cmp	r0, #2
 801049a:	d102      	bne.n	80104a2 <_parse_response+0xb2>
 801049c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801049e:	4b2c      	ldr	r3, [pc, #176]	; (8010550 <_parse_response+0x160>)
 80104a0:	601a      	str	r2, [r3, #0]
 80104a2:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 80104a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104aa:	f812 cb01 	ldrb.w	ip, [r2], #1
 80104ae:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80104b2:	45e6      	cmp	lr, ip
 80104b4:	d0c7      	beq.n	8010446 <_parse_response+0x56>
 80104b6:	6833      	ldr	r3, [r6, #0]
 80104b8:	9a08      	ldr	r2, [sp, #32]
 80104ba:	1a9b      	subs	r3, r3, r2
 80104bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80104c0:	d3ab      	bcc.n	801041a <_parse_response+0x2a>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	d1c1      	bne.n	801044a <_parse_response+0x5a>
 80104c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104ca:	e7ea      	b.n	80104a2 <_parse_response+0xb2>
 80104cc:	781a      	ldrb	r2, [r3, #0]
 80104ce:	2a35      	cmp	r2, #53	; 0x35
 80104d0:	d011      	beq.n	80104f6 <_parse_response+0x106>
 80104d2:	d808      	bhi.n	80104e6 <_parse_response+0xf6>
 80104d4:	2a01      	cmp	r2, #1
 80104d6:	d011      	beq.n	80104fc <_parse_response+0x10c>
 80104d8:	2a03      	cmp	r2, #3
 80104da:	d019      	beq.n	8010510 <_parse_response+0x120>
 80104dc:	b14a      	cbz	r2, 80104f2 <_parse_response+0x102>
 80104de:	1c9a      	adds	r2, r3, #2
 80104e0:	785b      	ldrb	r3, [r3, #1]
 80104e2:	4413      	add	r3, r2
 80104e4:	e7b8      	b.n	8010458 <_parse_response+0x68>
 80104e6:	2a36      	cmp	r2, #54	; 0x36
 80104e8:	d01f      	beq.n	801052a <_parse_response+0x13a>
 80104ea:	2aff      	cmp	r2, #255	; 0xff
 80104ec:	d1f7      	bne.n	80104de <_parse_response+0xee>
 80104ee:	462b      	mov	r3, r5
 80104f0:	e7b2      	b.n	8010458 <_parse_response+0x68>
 80104f2:	3301      	adds	r3, #1
 80104f4:	e7b0      	b.n	8010458 <_parse_response+0x68>
 80104f6:	7898      	ldrb	r0, [r3, #2]
 80104f8:	3303      	adds	r3, #3
 80104fa:	e7ad      	b.n	8010458 <_parse_response+0x68>
 80104fc:	f893 b002 	ldrb.w	fp, [r3, #2]
 8010500:	f893 9003 	ldrb.w	r9, [r3, #3]
 8010504:	f893 a004 	ldrb.w	sl, [r3, #4]
 8010508:	795f      	ldrb	r7, [r3, #5]
 801050a:	4616      	mov	r6, r2
 801050c:	3306      	adds	r3, #6
 801050e:	e7a3      	b.n	8010458 <_parse_response+0x68>
 8010510:	789a      	ldrb	r2, [r3, #2]
 8010512:	78dc      	ldrb	r4, [r3, #3]
 8010514:	9202      	str	r2, [sp, #8]
 8010516:	791a      	ldrb	r2, [r3, #4]
 8010518:	f04f 0c01 	mov.w	ip, #1
 801051c:	9203      	str	r2, [sp, #12]
 801051e:	795a      	ldrb	r2, [r3, #5]
 8010520:	9204      	str	r2, [sp, #16]
 8010522:	785a      	ldrb	r2, [r3, #1]
 8010524:	4413      	add	r3, r2
 8010526:	3302      	adds	r3, #2
 8010528:	e796      	b.n	8010458 <_parse_response+0x68>
 801052a:	789a      	ldrb	r2, [r3, #2]
 801052c:	f893 8005 	ldrb.w	r8, [r3, #5]
 8010530:	9205      	str	r2, [sp, #20]
 8010532:	78da      	ldrb	r2, [r3, #3]
 8010534:	2101      	movs	r1, #1
 8010536:	9206      	str	r2, [sp, #24]
 8010538:	791a      	ldrb	r2, [r3, #4]
 801053a:	3306      	adds	r3, #6
 801053c:	9207      	str	r2, [sp, #28]
 801053e:	e78b      	b.n	8010458 <_parse_response+0x68>
 8010540:	2000a9cc 	andcs	sl, r0, ip, asr #19
 8010544:	2000a728 	andcs	sl, r0, r8, lsr #14
 8010548:	2000a4f8 	strdcs	sl, [r0], -r8
 801054c:	2000a500 	andcs	sl, r0, r0, lsl #10
 8010550:	2000a4fc 	strdcs	sl, [r0], -ip

08010554 <memcpy.isra.0>:
 8010554:	3801      	subs	r0, #1
 8010556:	440a      	add	r2, r1
 8010558:	4291      	cmp	r1, r2
 801055a:	d100      	bne.n	801055e <memcpy.isra.0+0xa>
 801055c:	4770      	bx	lr
 801055e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010562:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010566:	e7f7      	b.n	8010558 <memcpy.isra.0+0x4>

08010568 <dhcp_client>:
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	b087      	sub	sp, #28
 801056e:	9203      	str	r2, [sp, #12]
 8010570:	4a77      	ldr	r2, [pc, #476]	; (8010750 <dhcp_client+0x1e8>)
 8010572:	460f      	mov	r7, r1
 8010574:	4605      	mov	r5, r0
 8010576:	f44f 7309 	mov.w	r3, #548	; 0x224
 801057a:	4614      	mov	r4, r2
 801057c:	2100      	movs	r1, #0
 801057e:	3b01      	subs	r3, #1
 8010580:	f802 1b01 	strb.w	r1, [r2], #1
 8010584:	d1fb      	bne.n	801057e <dhcp_client+0x16>
 8010586:	f240 1301 	movw	r3, #257	; 0x101
 801058a:	2206      	movs	r2, #6
 801058c:	4629      	mov	r1, r5
 801058e:	4871      	ldr	r0, [pc, #452]	; (8010754 <dhcp_client+0x1ec>)
 8010590:	8023      	strh	r3, [r4, #0]
 8010592:	70a2      	strb	r2, [r4, #2]
 8010594:	f7ff ffde 	bl	8010554 <memcpy.isra.0>
 8010598:	4b6f      	ldr	r3, [pc, #444]	; (8010758 <dhcp_client+0x1f0>)
 801059a:	2044      	movs	r0, #68	; 0x44
 801059c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80105a0:	f240 1335 	movw	r3, #309	; 0x135
 80105a4:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 80105a8:	f7fe fd26 	bl	800eff8 <udp_bind>
 80105ac:	1e06      	subs	r6, r0, #0
 80105ae:	f2c0 80c9 	blt.w	8010744 <dhcp_client+0x1dc>
 80105b2:	f04f 0915 	mov.w	r9, #21
 80105b6:	f8df a198 	ldr.w	sl, [pc, #408]	; 8010750 <dhcp_client+0x1e8>
 80105ba:	f1b9 0901 	subs.w	r9, r9, #1
 80105be:	d11f      	bne.n	8010600 <dhcp_client+0x98>
 80105c0:	464c      	mov	r4, r9
 80105c2:	2044      	movs	r0, #68	; 0x44
 80105c4:	f7fe fd32 	bl	800f02c <udp_unbind>
 80105c8:	2c00      	cmp	r4, #0
 80105ca:	f000 80be 	beq.w	801074a <dhcp_client+0x1e2>
 80105ce:	2204      	movs	r2, #4
 80105d0:	4962      	ldr	r1, [pc, #392]	; (801075c <dhcp_client+0x1f4>)
 80105d2:	a805      	add	r0, sp, #20
 80105d4:	f7ff ffbe 	bl	8010554 <memcpy.isra.0>
 80105d8:	9b05      	ldr	r3, [sp, #20]
 80105da:	2204      	movs	r2, #4
 80105dc:	4960      	ldr	r1, [pc, #384]	; (8010760 <dhcp_client+0x1f8>)
 80105de:	603b      	str	r3, [r7, #0]
 80105e0:	a805      	add	r0, sp, #20
 80105e2:	f7ff ffb7 	bl	8010554 <memcpy.isra.0>
 80105e6:	9b05      	ldr	r3, [sp, #20]
 80105e8:	a805      	add	r0, sp, #20
 80105ea:	60bb      	str	r3, [r7, #8]
 80105ec:	2204      	movs	r2, #4
 80105ee:	495d      	ldr	r1, [pc, #372]	; (8010764 <dhcp_client+0x1fc>)
 80105f0:	f7ff ffb0 	bl	8010554 <memcpy.isra.0>
 80105f4:	2000      	movs	r0, #0
 80105f6:	9b05      	ldr	r3, [sp, #20]
 80105f8:	607b      	str	r3, [r7, #4]
 80105fa:	b007      	add	sp, #28
 80105fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010600:	f643 5301 	movw	r3, #15617	; 0x3d01
 8010604:	f240 1807 	movw	r8, #263	; 0x107
 8010608:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 801060c:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8010610:	782b      	ldrb	r3, [r5, #0]
 8010612:	4a55      	ldr	r2, [pc, #340]	; (8010768 <dhcp_client+0x200>)
 8010614:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8010618:	786b      	ldrb	r3, [r5, #1]
 801061a:	fa5f fb86 	uxtb.w	fp, r6
 801061e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8010622:	78ab      	ldrb	r3, [r5, #2]
 8010624:	4651      	mov	r1, sl
 8010626:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 801062a:	78eb      	ldrb	r3, [r5, #3]
 801062c:	4658      	mov	r0, fp
 801062e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8010632:	792b      	ldrb	r3, [r5, #4]
 8010634:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8010638:	796b      	ldrb	r3, [r5, #5]
 801063a:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 801063e:	4b4b      	ldr	r3, [pc, #300]	; (801076c <dhcp_client+0x204>)
 8010640:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8010644:	23ff      	movs	r3, #255	; 0xff
 8010646:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 801064a:	2343      	movs	r3, #67	; 0x43
 801064c:	f240 1205 	movw	r2, #261	; 0x105
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010656:	f7fe fd65 	bl	800f124 <udp_send>
 801065a:	4629      	mov	r1, r5
 801065c:	4630      	mov	r0, r6
 801065e:	f7ff fec7 	bl	80103f0 <_parse_response>
 8010662:	2802      	cmp	r0, #2
 8010664:	d1a9      	bne.n	80105ba <dhcp_client+0x52>
 8010666:	f643 5303 	movw	r3, #15619	; 0x3d03
 801066a:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 801066e:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8010672:	782b      	ldrb	r3, [r5, #0]
 8010674:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8010770 <dhcp_client+0x208>
 8010678:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 801067c:	786b      	ldrb	r3, [r5, #1]
 801067e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8010682:	78ab      	ldrb	r3, [r5, #2]
 8010684:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8010688:	78eb      	ldrb	r3, [r5, #3]
 801068a:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 801068e:	792b      	ldrb	r3, [r5, #4]
 8010690:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8010694:	796b      	ldrb	r3, [r5, #5]
 8010696:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 801069a:	f240 4332 	movw	r3, #1074	; 0x432
 801069e:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 80106a2:	4b2e      	ldr	r3, [pc, #184]	; (801075c <dhcp_client+0x1f4>)
 80106a4:	881a      	ldrh	r2, [r3, #0]
 80106a6:	885b      	ldrh	r3, [r3, #2]
 80106a8:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 80106ac:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 80106b0:	f240 4336 	movw	r3, #1078	; 0x436
 80106b4:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 80106b8:	4b2e      	ldr	r3, [pc, #184]	; (8010774 <dhcp_client+0x20c>)
 80106ba:	221e      	movs	r2, #30
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 80106c2:	230c      	movs	r3, #12
 80106c4:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 80106c8:	9b03      	ldr	r3, [sp, #12]
 80106ca:	1e58      	subs	r0, r3, #1
 80106cc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80106d0:	f1a2 0e1e 	sub.w	lr, r2, #30
 80106d4:	1c51      	adds	r1, r2, #1
 80106d6:	bb8b      	cbnz	r3, 801073c <dhcp_client+0x1d4>
 80106d8:	2037      	movs	r0, #55	; 0x37
 80106da:	18a3      	adds	r3, r4, r2
 80106dc:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 80106e0:	2006      	movs	r0, #6
 80106e2:	4421      	add	r1, r4
 80106e4:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 80106e8:	2103      	movs	r1, #3
 80106ea:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 80106ee:	210f      	movs	r1, #15
 80106f0:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 80106f4:	213a      	movs	r1, #58	; 0x3a
 80106f6:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 80106fa:	213b      	movs	r1, #59	; 0x3b
 80106fc:	f04f 0801 	mov.w	r8, #1
 8010700:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8010704:	21ff      	movs	r1, #255	; 0xff
 8010706:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 801070a:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 801070e:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8010712:	2343      	movs	r3, #67	; 0x43
 8010714:	32f5      	adds	r2, #245	; 0xf5
 8010716:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 801071a:	4651      	mov	r1, sl
 801071c:	9300      	str	r3, [sp, #0]
 801071e:	b292      	uxth	r2, r2
 8010720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010724:	4658      	mov	r0, fp
 8010726:	f7fe fcfd 	bl	800f124 <udp_send>
 801072a:	4629      	mov	r1, r5
 801072c:	4630      	mov	r0, r6
 801072e:	f7ff fe5f 	bl	80103f0 <_parse_response>
 8010732:	2805      	cmp	r0, #5
 8010734:	f47f af41 	bne.w	80105ba <dhcp_client+0x52>
 8010738:	4644      	mov	r4, r8
 801073a:	e742      	b.n	80105c2 <dhcp_client+0x5a>
 801073c:	460a      	mov	r2, r1
 801073e:	f80c 3b01 	strb.w	r3, [ip], #1
 8010742:	e7c3      	b.n	80106cc <dhcp_client+0x164>
 8010744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010748:	e757      	b.n	80105fa <dhcp_client+0x92>
 801074a:	f06f 0001 	mvn.w	r0, #1
 801074e:	e754      	b.n	80105fa <dhcp_client+0x92>
 8010750:	2000a504 	andcs	sl, r0, r4, lsl #10
 8010754:	2000a520 	andcs	sl, r0, r0, lsr #10
 8010758:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 801075c:	2000a4fc 	strdcs	sl, [r0], -ip
 8010760:	2000a4f8 	strdcs	sl, [r0], -r8
 8010764:	2000a500 	andcs	sl, r0, r0, lsl #10
 8010768:	03010637 	movweq	r0, #5687	; 0x1637
 801076c:	3b3a0f06 	blcc	8e9438c <__exidx_end+0xe7df58>
 8010770:	2000a60e 	andcs	sl, r0, lr, lsl #12
 8010774:	2000a728 	andcs	sl, r0, r8, lsr #14

08010778 <dhcp_client_release>:
 8010778:	b507      	push	{r0, r1, r2, lr}
 801077a:	2044      	movs	r0, #68	; 0x44
 801077c:	f7fe fc3c 	bl	800eff8 <udp_bind>
 8010780:	f243 6307 	movw	r3, #13831	; 0x3607
 8010784:	4911      	ldr	r1, [pc, #68]	; (80107cc <dhcp_client_release+0x54>)
 8010786:	b2c0      	uxtb	r0, r0
 8010788:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 801078c:	2304      	movs	r3, #4
 801078e:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8010792:	4b0f      	ldr	r3, [pc, #60]	; (80107d0 <dhcp_client_release+0x58>)
 8010794:	781a      	ldrb	r2, [r3, #0]
 8010796:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 801079a:	785a      	ldrb	r2, [r3, #1]
 801079c:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 80107a0:	789a      	ldrb	r2, [r3, #2]
 80107a2:	78db      	ldrb	r3, [r3, #3]
 80107a4:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 80107a8:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 80107ac:	23ff      	movs	r3, #255	; 0xff
 80107ae:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 80107b2:	2343      	movs	r3, #67	; 0x43
 80107b4:	22fa      	movs	r2, #250	; 0xfa
 80107b6:	9300      	str	r3, [sp, #0]
 80107b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107bc:	f7fe fcb2 	bl	800f124 <udp_send>
 80107c0:	2044      	movs	r0, #68	; 0x44
 80107c2:	b003      	add	sp, #12
 80107c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80107c8:	f7fe bc30 	b.w	800f02c <udp_unbind>
 80107cc:	2000a504 	andcs	sl, r0, r4, lsl #10
 80107d0:	2000a728 	andcs	sl, r0, r8, lsr #14

080107d4 <memcpy.isra.0>:
 80107d4:	3801      	subs	r0, #1
 80107d6:	440a      	add	r2, r1
 80107d8:	4291      	cmp	r1, r2
 80107da:	d100      	bne.n	80107de <memcpy.isra.0+0xa>
 80107dc:	4770      	bx	lr
 80107de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107e2:	f800 3f01 	strb.w	r3, [r0, #1]!
 80107e6:	e7f7      	b.n	80107d8 <memcpy.isra.0+0x4>

080107e8 <_send_report>:
 80107e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107ea:	491c      	ldr	r1, [pc, #112]	; (801085c <_send_report+0x74>)
 80107ec:	4c1c      	ldr	r4, [pc, #112]	; (8010860 <_send_report+0x78>)
 80107ee:	f3c0 2306 	ubfx	r3, r0, #8, #7
 80107f2:	9001      	str	r0, [sp, #4]
 80107f4:	70cb      	strb	r3, [r1, #3]
 80107f6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80107fa:	f3c0 6007 	ubfx	r0, r0, #24, #8
 80107fe:	710b      	strb	r3, [r1, #4]
 8010800:	7148      	strb	r0, [r1, #5]
 8010802:	2206      	movs	r2, #6
 8010804:	4620      	mov	r0, r4
 8010806:	f7ff ffe5 	bl	80107d4 <memcpy.isra.0>
 801080a:	2204      	movs	r2, #4
 801080c:	2700      	movs	r7, #0
 801080e:	4d15      	ldr	r5, [pc, #84]	; (8010864 <_send_report+0x7c>)
 8010810:	eb0d 0102 	add.w	r1, sp, r2
 8010814:	882b      	ldrh	r3, [r5, #0]
 8010816:	f104 001e 	add.w	r0, r4, #30
 801081a:	f104 060e 	add.w	r6, r4, #14
 801081e:	8263      	strh	r3, [r4, #18]
 8010820:	f7ff ffd8 	bl	80107d4 <memcpy.isra.0>
 8010824:	2118      	movs	r1, #24
 8010826:	4630      	mov	r0, r6
 8010828:	8327      	strh	r7, [r4, #24]
 801082a:	f000 f8c6 	bl	80109ba <net_chksum>
 801082e:	2204      	movs	r2, #4
 8010830:	8320      	strh	r0, [r4, #24]
 8010832:	eb0d 0102 	add.w	r1, sp, r2
 8010836:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801083a:	f7ff ffcb 	bl	80107d4 <memcpy.isra.0>
 801083e:	2120      	movs	r1, #32
 8010840:	4630      	mov	r0, r6
 8010842:	8527      	strh	r7, [r4, #40]	; 0x28
 8010844:	f000 f8b9 	bl	80109ba <net_chksum>
 8010848:	212e      	movs	r1, #46	; 0x2e
 801084a:	8520      	strh	r0, [r4, #40]	; 0x28
 801084c:	4620      	mov	r0, r4
 801084e:	f002 fb53 	bl	8012ef8 <emac_eth_send>
 8010852:	882b      	ldrh	r3, [r5, #0]
 8010854:	3301      	adds	r3, #1
 8010856:	802b      	strh	r3, [r5, #0]
 8010858:	b003      	add	sp, #12
 801085a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801085c:	2000a884 	andcs	sl, r0, r4, lsl #17
 8010860:	2000a88c 	andcs	sl, r0, ip, lsl #17
 8010864:	2000a84c 	andcs	sl, r0, ip, asr #16

08010868 <igmp_set_ip>:
 8010868:	b507      	push	{r0, r1, r2, lr}
 801086a:	2204      	movs	r2, #4
 801086c:	6803      	ldr	r3, [r0, #0]
 801086e:	eb0d 0102 	add.w	r1, sp, r2
 8010872:	4806      	ldr	r0, [pc, #24]	; (801088c <igmp_set_ip+0x24>)
 8010874:	9301      	str	r3, [sp, #4]
 8010876:	f7ff ffad 	bl	80107d4 <memcpy.isra.0>
 801087a:	2204      	movs	r2, #4
 801087c:	4804      	ldr	r0, [pc, #16]	; (8010890 <igmp_set_ip+0x28>)
 801087e:	eb0d 0102 	add.w	r1, sp, r2
 8010882:	f7ff ffa7 	bl	80107d4 <memcpy.isra.0>
 8010886:	b003      	add	sp, #12
 8010888:	f85d fb04 	ldr.w	pc, [sp], #4
 801088c:	2000a8a6 	andcs	sl, r0, r6, lsr #17
 8010890:	2000a86e 	andcs	sl, r0, lr, ror #16

08010894 <igmp_timer>:
 8010894:	b570      	push	{r4, r5, r6, lr}
 8010896:	2500      	movs	r5, #0
 8010898:	2602      	movs	r6, #2
 801089a:	4c0a      	ldr	r4, [pc, #40]	; (80108c4 <igmp_timer+0x30>)
 801089c:	7963      	ldrb	r3, [r4, #5]
 801089e:	2b01      	cmp	r3, #1
 80108a0:	d109      	bne.n	80108b6 <igmp_timer+0x22>
 80108a2:	7923      	ldrb	r3, [r4, #4]
 80108a4:	b13b      	cbz	r3, 80108b6 <igmp_timer+0x22>
 80108a6:	3b01      	subs	r3, #1
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	7123      	strb	r3, [r4, #4]
 80108ac:	b91b      	cbnz	r3, 80108b6 <igmp_timer+0x22>
 80108ae:	6820      	ldr	r0, [r4, #0]
 80108b0:	f7ff ff9a 	bl	80107e8 <_send_report>
 80108b4:	7166      	strb	r6, [r4, #5]
 80108b6:	3501      	adds	r5, #1
 80108b8:	2d24      	cmp	r5, #36	; 0x24
 80108ba:	f104 0408 	add.w	r4, r4, #8
 80108be:	d1ed      	bne.n	801089c <igmp_timer+0x8>
 80108c0:	bd70      	pop	{r4, r5, r6, pc}
 80108c2:	bf00      	nop
 80108c4:	2000a72c 	andcs	sl, r0, ip, lsr #14

080108c8 <igmp_join>:
 80108c8:	b538      	push	{r3, r4, r5, lr}
 80108ca:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 80108ce:	2be0      	cmp	r3, #224	; 0xe0
 80108d0:	d11b      	bne.n	801090a <igmp_join+0x42>
 80108d2:	4911      	ldr	r1, [pc, #68]	; (8010918 <igmp_join+0x50>)
 80108d4:	680c      	ldr	r4, [r1, #0]
 80108d6:	2c24      	cmp	r4, #36	; 0x24
 80108d8:	d01a      	beq.n	8010910 <igmp_join+0x48>
 80108da:	2300      	movs	r3, #0
 80108dc:	4a0f      	ldr	r2, [pc, #60]	; (801091c <igmp_join+0x54>)
 80108de:	429c      	cmp	r4, r3
 80108e0:	dc0d      	bgt.n	80108fe <igmp_join+0x36>
 80108e2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80108e6:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 80108ea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80108ee:	8093      	strh	r3, [r2, #4]
 80108f0:	1c63      	adds	r3, r4, #1
 80108f2:	600b      	str	r3, [r1, #0]
 80108f4:	f7ff ff78 	bl	80107e8 <_send_report>
 80108f8:	4623      	mov	r3, r4
 80108fa:	4618      	mov	r0, r3
 80108fc:	bd38      	pop	{r3, r4, r5, pc}
 80108fe:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8010902:	4285      	cmp	r5, r0
 8010904:	d0f9      	beq.n	80108fa <igmp_join+0x32>
 8010906:	3301      	adds	r3, #1
 8010908:	e7e9      	b.n	80108de <igmp_join+0x16>
 801090a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801090e:	e7f4      	b.n	80108fa <igmp_join+0x32>
 8010910:	f06f 0301 	mvn.w	r3, #1
 8010914:	e7f1      	b.n	80108fa <igmp_join+0x32>
 8010916:	bf00      	nop
 8010918:	2000a850 	andcs	sl, r0, r0, asr r8
 801091c:	2000a72c 	andcs	sl, r0, ip, lsr #14

08010920 <igmp_leave>:
 8010920:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010924:	2600      	movs	r6, #0
 8010926:	4f1c      	ldr	r7, [pc, #112]	; (8010998 <igmp_leave+0x78>)
 8010928:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 801092c:	4283      	cmp	r3, r0
 801092e:	d007      	beq.n	8010940 <igmp_leave+0x20>
 8010930:	3601      	adds	r6, #1
 8010932:	2e24      	cmp	r6, #36	; 0x24
 8010934:	d1f8      	bne.n	8010928 <igmp_leave+0x8>
 8010936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801093a:	b002      	add	sp, #8
 801093c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010940:	2400      	movs	r4, #0
 8010942:	f8df 8058 	ldr.w	r8, [pc, #88]	; 801099c <igmp_leave+0x7c>
 8010946:	4d16      	ldr	r5, [pc, #88]	; (80109a0 <igmp_leave+0x80>)
 8010948:	f8b8 3000 	ldrh.w	r3, [r8]
 801094c:	2118      	movs	r1, #24
 801094e:	9001      	str	r0, [sp, #4]
 8010950:	4814      	ldr	r0, [pc, #80]	; (80109a4 <igmp_leave+0x84>)
 8010952:	826b      	strh	r3, [r5, #18]
 8010954:	832c      	strh	r4, [r5, #24]
 8010956:	f000 f830 	bl	80109ba <net_chksum>
 801095a:	2204      	movs	r2, #4
 801095c:	8328      	strh	r0, [r5, #24]
 801095e:	eb0d 0102 	add.w	r1, sp, r2
 8010962:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8010966:	f7ff ff35 	bl	80107d4 <memcpy.isra.0>
 801096a:	2120      	movs	r1, #32
 801096c:	f105 000e 	add.w	r0, r5, #14
 8010970:	852c      	strh	r4, [r5, #40]	; 0x28
 8010972:	f000 f822 	bl	80109ba <net_chksum>
 8010976:	212e      	movs	r1, #46	; 0x2e
 8010978:	8528      	strh	r0, [r5, #40]	; 0x28
 801097a:	4628      	mov	r0, r5
 801097c:	f002 fabc 	bl	8012ef8 <emac_eth_send>
 8010980:	f8b8 3000 	ldrh.w	r3, [r8]
 8010984:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8010988:	3301      	adds	r3, #1
 801098a:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 801098e:	4620      	mov	r0, r4
 8010990:	f8a8 3000 	strh.w	r3, [r8]
 8010994:	80bc      	strh	r4, [r7, #4]
 8010996:	e7d0      	b.n	801093a <igmp_leave+0x1a>
 8010998:	2000a72c 	andcs	sl, r0, ip, lsr #14
 801099c:	2000a84c 	andcs	sl, r0, ip, asr #16
 80109a0:	2000a854 	andcs	sl, r0, r4, asr r8
 80109a4:	2000a89a 	mulcs	r0, sl, r8

080109a8 <ip_set_ip>:
 80109a8:	b510      	push	{r4, lr}
 80109aa:	4604      	mov	r4, r0
 80109ac:	f7fe fb04 	bl	800efb8 <udp_set_ip>
 80109b0:	4620      	mov	r0, r4
 80109b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109b6:	f7ff bf57 	b.w	8010868 <igmp_set_ip>

080109ba <net_chksum>:
 80109ba:	2300      	movs	r3, #0
 80109bc:	f021 0201 	bic.w	r2, r1, #1
 80109c0:	b530      	push	{r4, r5, lr}
 80109c2:	1884      	adds	r4, r0, r2
 80109c4:	42a0      	cmp	r0, r4
 80109c6:	d10b      	bne.n	80109e0 <net_chksum+0x26>
 80109c8:	4291      	cmp	r1, r2
 80109ca:	d004      	beq.n	80109d6 <net_chksum+0x1c>
 80109cc:	7802      	ldrb	r2, [r0, #0]
 80109ce:	0212      	lsls	r2, r2, #8
 80109d0:	ba52      	rev16	r2, r2
 80109d2:	b292      	uxth	r2, r2
 80109d4:	4413      	add	r3, r2
 80109d6:	0c1a      	lsrs	r2, r3, #16
 80109d8:	d106      	bne.n	80109e8 <net_chksum+0x2e>
 80109da:	43d8      	mvns	r0, r3
 80109dc:	b280      	uxth	r0, r0
 80109de:	bd30      	pop	{r4, r5, pc}
 80109e0:	f830 5b02 	ldrh.w	r5, [r0], #2
 80109e4:	442b      	add	r3, r5
 80109e6:	e7ed      	b.n	80109c4 <net_chksum+0xa>
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	e7f3      	b.n	80109d4 <net_chksum+0x1a>

080109ec <memcpy.isra.0>:
 80109ec:	3801      	subs	r0, #1
 80109ee:	440a      	add	r2, r1
 80109f0:	4291      	cmp	r1, r2
 80109f2:	d100      	bne.n	80109f6 <memcpy.isra.0+0xa>
 80109f4:	4770      	bx	lr
 80109f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109fa:	f800 3f01 	strb.w	r3, [r0, #1]!
 80109fe:	e7f7      	b.n	80109f0 <memcpy.isra.0+0x4>

08010a00 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8010a00:	b430      	push	{r4, r5}
 8010a02:	b168      	cbz	r0, 8010a20 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8010a04:	2300      	movs	r3, #0
 8010a06:	7905      	ldrb	r5, [r0, #4]
 8010a08:	5cd4      	ldrb	r4, [r2, r3]
 8010a0a:	b11c      	cbz	r4, 8010a14 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8010a0c:	1c5c      	adds	r4, r3, #1
 8010a0e:	429d      	cmp	r5, r3
 8010a10:	4623      	mov	r3, r4
 8010a12:	dcf9      	bgt.n	8010a08 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8010a14:	6804      	ldr	r4, [r0, #0]
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	69e4      	ldr	r4, [r4, #28]
 8010a1a:	46a4      	mov	ip, r4
 8010a1c:	bc30      	pop	{r4, r5}
 8010a1e:	4760      	bx	ip
 8010a20:	bc30      	pop	{r4, r5}
 8010a22:	4770      	bx	lr

08010a24 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8010a24:	b110      	cbz	r0, 8010a2c <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8010a26:	6803      	ldr	r3, [r0, #0]
 8010a28:	691b      	ldr	r3, [r3, #16]
 8010a2a:	4718      	bx	r3
 8010a2c:	4770      	bx	lr

08010a2e <Display::Status(Display7SegmentMessage)>:
 8010a2e:	7c43      	ldrb	r3, [r0, #17]
 8010a30:	b513      	push	{r0, r1, r4, lr}
 8010a32:	4604      	mov	r4, r0
 8010a34:	b19b      	cbz	r3, 8010a5e <Display::Status(Display7SegmentMessage)+0x30>
 8010a36:	43c9      	mvns	r1, r1
 8010a38:	2312      	movs	r3, #18
 8010a3a:	7a00      	ldrb	r0, [r0, #8]
 8010a3c:	f88d 3004 	strb.w	r3, [sp, #4]
 8010a40:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010a44:	f88d 1006 	strb.w	r1, [sp, #6]
 8010a48:	f88d 3005 	strb.w	r3, [sp, #5]
 8010a4c:	f002 faec 	bl	8013028 <gd32_i2c_set_address(unsigned char)>
 8010a50:	68e0      	ldr	r0, [r4, #12]
 8010a52:	f002 fae1 	bl	8013018 <gd32_i2c_set_baudrate(unsigned int)>
 8010a56:	2103      	movs	r1, #3
 8010a58:	a801      	add	r0, sp, #4
 8010a5a:	f002 faeb 	bl	8013034 <gd32_i2c_write(char const*, unsigned int)>
 8010a5e:	b002      	add	sp, #8
 8010a60:	bd10      	pop	{r4, pc}
	...

08010a64 <DisplayUdf::DisplayUdf()>:
 8010a64:	b510      	push	{r4, lr}
 8010a66:	4604      	mov	r4, r0
 8010a68:	f000 fee0 	bl	801182c <Display::Display()>
 8010a6c:	2202      	movs	r2, #2
 8010a6e:	2300      	movs	r3, #0
 8010a70:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8010a74:	4b05      	ldr	r3, [pc, #20]	; (8010a8c <DisplayUdf::DisplayUdf()+0x28>)
 8010a76:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8010a7a:	601c      	str	r4, [r3, #0]
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	f802 3b01 	strb.w	r3, [r2], #1
 8010a82:	3301      	adds	r3, #1
 8010a84:	2b15      	cmp	r3, #21
 8010a86:	d1fa      	bne.n	8010a7e <DisplayUdf::DisplayUdf()+0x1a>
 8010a88:	4620      	mov	r0, r4
 8010a8a:	bd10      	pop	{r4, pc}
 8010a8c:	2000a8bc 			; <UNDEFINED> instruction: 0x2000a8bc

08010a90 <DisplayUdf::SetTitle(char const*, ...)>:
 8010a90:	b40e      	push	{r1, r2, r3}
 8010a92:	b517      	push	{r0, r1, r2, r4, lr}
 8010a94:	ab05      	add	r3, sp, #20
 8010a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a9a:	4604      	mov	r4, r0
 8010a9c:	211f      	movs	r1, #31
 8010a9e:	301c      	adds	r0, #28
 8010aa0:	9301      	str	r3, [sp, #4]
 8010aa2:	f7f8 fc03 	bl	80092ac <vsnprintf>
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	4404      	add	r4, r0
 8010aaa:	7723      	strb	r3, [r4, #28]
 8010aac:	b003      	add	sp, #12
 8010aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ab2:	b003      	add	sp, #12
 8010ab4:	4770      	bx	lr
	...

08010ab8 <DisplayUdf::ShowEmacStart()>:
 8010ab8:	b510      	push	{r4, lr}
 8010aba:	4604      	mov	r4, r0
 8010abc:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8010ac0:	6980      	ldr	r0, [r0, #24]
 8010ac2:	f7ff ffaf 	bl	8010a24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	4a02      	ldr	r2, [pc, #8]	; (8010ad4 <DisplayUdf::ShowEmacStart()+0x1c>)
 8010aca:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8010ace:	f7f7 fdc9 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 8010ad2:	bd10      	pop	{r4, pc}
 8010ad4:	08015c73 	stmdaeq	r1, {r0, r1, r4, r5, r6, sl, fp, ip, lr}

08010ad8 <DisplayUdf::ShowIpAddress()>:
 8010ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010adc:	4604      	mov	r4, r0
 8010ade:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8010ae2:	b086      	sub	sp, #24
 8010ae4:	6980      	ldr	r0, [r0, #24]
 8010ae6:	f7ff ff9d 	bl	8010a24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010aea:	4b13      	ldr	r3, [pc, #76]	; (8010b38 <DisplayUdf::ShowIpAddress()+0x60>)
 8010aec:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 8010af0:	681d      	ldr	r5, [r3, #0]
 8010af2:	69a8      	ldr	r0, [r5, #24]
 8010af4:	692e      	ldr	r6, [r5, #16]
 8010af6:	f003 fbbf 	bl	8014278 <__popcountsi2>
 8010afa:	78eb      	ldrb	r3, [r5, #3]
 8010afc:	fa5f f886 	uxtb.w	r8, r6
 8010b00:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8010b04:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8010b08:	0e36      	lsrs	r6, r6, #24
 8010b0a:	b99b      	cbnz	r3, 8010b34 <DisplayUdf::ShowIpAddress()+0x5c>
 8010b0c:	786b      	ldrb	r3, [r5, #1]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	bf14      	ite	ne
 8010b12:	2244      	movne	r2, #68	; 0x44
 8010b14:	2253      	moveq	r2, #83	; 0x53
 8010b16:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8010b1a:	4643      	mov	r3, r8
 8010b1c:	4639      	mov	r1, r7
 8010b1e:	4620      	mov	r0, r4
 8010b20:	e9cd a601 	strd	sl, r6, [sp, #4]
 8010b24:	4a05      	ldr	r2, [pc, #20]	; (8010b3c <DisplayUdf::ShowIpAddress()+0x64>)
 8010b26:	f8cd 9000 	str.w	r9, [sp]
 8010b2a:	f7f7 fd9b 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 8010b2e:	b006      	add	sp, #24
 8010b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b34:	225a      	movs	r2, #90	; 0x5a
 8010b36:	e7ee      	b.n	8010b16 <DisplayUdf::ShowIpAddress()+0x3e>
 8010b38:	2000a28c 	andcs	sl, r0, ip, lsl #5
 8010b3c:	08015c82 	stmdaeq	r1, {r1, r7, sl, fp, ip, lr}

08010b40 <DisplayUdf::ShowNetmask()>:
 8010b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b42:	4604      	mov	r4, r0
 8010b44:	4b0b      	ldr	r3, [pc, #44]	; (8010b74 <DisplayUdf::ShowNetmask()+0x34>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	699b      	ldr	r3, [r3, #24]
 8010b4a:	0e1a      	lsrs	r2, r3, #24
 8010b4c:	9202      	str	r2, [sp, #8]
 8010b4e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010b52:	9201      	str	r2, [sp, #4]
 8010b54:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010b58:	9200      	str	r2, [sp, #0]
 8010b5a:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8010b5e:	4a06      	ldr	r2, [pc, #24]	; (8010b78 <DisplayUdf::ShowNetmask()+0x38>)
 8010b60:	b2db      	uxtb	r3, r3
 8010b62:	f7f7 fd7f 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 8010b66:	4620      	mov	r0, r4
 8010b68:	b004      	add	sp, #16
 8010b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b6e:	f7ff bfb3 	b.w	8010ad8 <DisplayUdf::ShowIpAddress()>
 8010b72:	bf00      	nop
 8010b74:	2000a28c 	andcs	sl, r0, ip, lsl #5
 8010b78:	08015c94 	stmdaeq	r1, {r2, r4, r7, sl, fp, ip, lr}

08010b7c <DisplayUdf::ShowGatewayIp()>:
 8010b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b7e:	4604      	mov	r4, r0
 8010b80:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8010b84:	6980      	ldr	r0, [r0, #24]
 8010b86:	f7ff ff4d 	bl	8010a24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010b8a:	4b0a      	ldr	r3, [pc, #40]	; (8010bb4 <DisplayUdf::ShowGatewayIp()+0x38>)
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8010b94:	695b      	ldr	r3, [r3, #20]
 8010b96:	0e1a      	lsrs	r2, r3, #24
 8010b98:	9202      	str	r2, [sp, #8]
 8010b9a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010b9e:	9201      	str	r2, [sp, #4]
 8010ba0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010ba4:	9200      	str	r2, [sp, #0]
 8010ba6:	b2db      	uxtb	r3, r3
 8010ba8:	4a03      	ldr	r2, [pc, #12]	; (8010bb8 <DisplayUdf::ShowGatewayIp()+0x3c>)
 8010baa:	f7f7 fd5b 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 8010bae:	b004      	add	sp, #16
 8010bb0:	bd10      	pop	{r4, pc}
 8010bb2:	bf00      	nop
 8010bb4:	2000a28c 	andcs	sl, r0, ip, lsl #5
 8010bb8:	08015ca3 	stmdaeq	r1, {r0, r1, r5, r7, sl, fp, ip, lr}

08010bbc <DisplayUdf::ShowHostName()>:
 8010bbc:	b510      	push	{r4, lr}
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8010bc4:	6980      	ldr	r0, [r0, #24]
 8010bc6:	f7ff ff2d 	bl	8010a24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010bca:	4b05      	ldr	r3, [pc, #20]	; (8010be0 <DisplayUdf::ShowHostName()+0x24>)
 8010bcc:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8010bd0:	681a      	ldr	r2, [r3, #0]
 8010bd2:	69a0      	ldr	r0, [r4, #24]
 8010bd4:	321c      	adds	r2, #28
 8010bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bda:	f7ff bf11 	b.w	8010a00 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8010bde:	bf00      	nop
 8010be0:	2000a28c 	andcs	sl, r0, ip, lsl #5

08010be4 <DisplayUdf::Show()>:
 8010be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010be6:	4604      	mov	r4, r0
 8010be8:	21ff      	movs	r1, #255	; 0xff
 8010bea:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8010bee:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8010bf2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010bf6:	2806      	cmp	r0, #6
 8010bf8:	bf88      	it	hi
 8010bfa:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d1f7      	bne.n	8010bf2 <DisplayUdf::Show()+0xe>
 8010c02:	2501      	movs	r5, #1
 8010c04:	4629      	mov	r1, r5
 8010c06:	3501      	adds	r5, #1
 8010c08:	69a0      	ldr	r0, [r4, #24]
 8010c0a:	b2ed      	uxtb	r5, r5
 8010c0c:	f7ff ff0a 	bl	8010a24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010c10:	2d06      	cmp	r5, #6
 8010c12:	d1f7      	bne.n	8010c04 <DisplayUdf::Show()+0x20>
 8010c14:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8010c18:	69a0      	ldr	r0, [r4, #24]
 8010c1a:	f104 021c 	add.w	r2, r4, #28
 8010c1e:	f7ff feef 	bl	8010a00 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8010c22:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8010c26:	69a0      	ldr	r0, [r4, #24]
 8010c28:	4a0d      	ldr	r2, [pc, #52]	; (8010c60 <DisplayUdf::Show()+0x7c>)
 8010c2a:	f7ff fee9 	bl	8010a00 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8010c2e:	4b0d      	ldr	r3, [pc, #52]	; (8010c64 <DisplayUdf::Show()+0x80>)
 8010c30:	4a0d      	ldr	r2, [pc, #52]	; (8010c68 <DisplayUdf::Show()+0x84>)
 8010c32:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8010c36:	9300      	str	r3, [sp, #0]
 8010c38:	4620      	mov	r0, r4
 8010c3a:	2303      	movs	r3, #3
 8010c3c:	f7f7 fd12 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 8010c40:	4620      	mov	r0, r4
 8010c42:	f7ff ff49 	bl	8010ad8 <DisplayUdf::ShowIpAddress()>
 8010c46:	4620      	mov	r0, r4
 8010c48:	f7ff ff98 	bl	8010b7c <DisplayUdf::ShowGatewayIp()>
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f7ff ff77 	bl	8010b40 <DisplayUdf::ShowNetmask()>
 8010c52:	4620      	mov	r0, r4
 8010c54:	b003      	add	sp, #12
 8010c56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c5a:	f7ff bfaf 	b.w	8010bbc <DisplayUdf::ShowHostName()>
 8010c5e:	bf00      	nop
 8010c60:	080143ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, lr}
 8010c64:	2000a954 	andcs	sl, r0, r4, asr r9
 8010c68:	08015cb2 	stmdaeq	r1, {r1, r4, r5, r7, sl, fp, ip, lr}

08010c6c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8010c6c:	3901      	subs	r1, #1
 8010c6e:	b510      	push	{r4, lr}
 8010c70:	4604      	mov	r4, r0
 8010c72:	2903      	cmp	r1, #3
 8010c74:	d814      	bhi.n	8010ca0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8010c76:	e8df f001 	tbb	[pc, r1]
 8010c7a:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 8010c7e:	4b14      	ldr	r3, [pc, #80]	; (8010cd0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8010c80:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8010c84:	6818      	ldr	r0, [r3, #0]
 8010c86:	f7ff fed2 	bl	8010a2e <Display::Status(Display7SegmentMessage)>
 8010c8a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8010c8e:	69a0      	ldr	r0, [r4, #24]
 8010c90:	f7ff fec8 	bl	8010a24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010c94:	4a0f      	ldr	r2, [pc, #60]	; (8010cd4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 8010c96:	4620      	mov	r0, r4
 8010c98:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8010c9c:	f7f7 fce2 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 8010ca0:	bd10      	pop	{r4, pc}
 8010ca2:	f248 0180 	movw	r1, #32896	; 0x8080
 8010ca6:	4b0a      	ldr	r3, [pc, #40]	; (8010cd0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8010ca8:	6818      	ldr	r0, [r3, #0]
 8010caa:	f7ff fec0 	bl	8010a2e <Display::Status(Display7SegmentMessage)>
 8010cae:	e7f7      	b.n	8010ca0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8010cb0:	4b07      	ldr	r3, [pc, #28]	; (8010cd0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8010cb2:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8010cb6:	6818      	ldr	r0, [r3, #0]
 8010cb8:	f7ff feb9 	bl	8010a2e <Display::Status(Display7SegmentMessage)>
 8010cbc:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8010cc0:	69a0      	ldr	r0, [r4, #24]
 8010cc2:	f7ff feaf 	bl	8010a24 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010cc6:	4a04      	ldr	r2, [pc, #16]	; (8010cd8 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8010cc8:	e7e5      	b.n	8010c96 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 8010cca:	f645 3179 	movw	r1, #23417	; 0x5b79
 8010cce:	e7ea      	b.n	8010ca6 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8010cd0:	2000a8c4 	andcs	sl, r0, r4, asr #17
 8010cd4:	08015cc1 	stmdaeq	r1, {r0, r6, r7, sl, fp, ip, lr}
 8010cd8:	08015ccf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, sl, fp, ip, lr}

08010cdc <DisplayUdf::ShowShutdown()>:
 8010cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce0:	4604      	mov	r4, r0
 8010ce2:	6980      	ldr	r0, [r0, #24]
 8010ce4:	b1d0      	cbz	r0, 8010d1c <DisplayUdf::ShowShutdown()+0x40>
 8010ce6:	f890 8005 	ldrb.w	r8, [r0, #5]
 8010cea:	6803      	ldr	r3, [r0, #0]
 8010cec:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8010cf0:	b2ed      	uxtb	r5, r5
 8010cf2:	462a      	mov	r2, r5
 8010cf4:	2100      	movs	r1, #0
 8010cf6:	6a1b      	ldr	r3, [r3, #32]
 8010cf8:	7906      	ldrb	r6, [r0, #4]
 8010cfa:	2700      	movs	r7, #0
 8010cfc:	4798      	blx	r3
 8010cfe:	3e01      	subs	r6, #1
 8010d00:	42b7      	cmp	r7, r6
 8010d02:	69a0      	ldr	r0, [r4, #24]
 8010d04:	d311      	bcc.n	8010d2a <DisplayUdf::ShowShutdown()+0x4e>
 8010d06:	b120      	cbz	r0, 8010d12 <DisplayUdf::ShowShutdown()+0x36>
 8010d08:	6803      	ldr	r3, [r0, #0]
 8010d0a:	462a      	mov	r2, r5
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	6a1b      	ldr	r3, [r3, #32]
 8010d10:	4798      	blx	r3
 8010d12:	4641      	mov	r1, r8
 8010d14:	4a08      	ldr	r2, [pc, #32]	; (8010d38 <DisplayUdf::ShowShutdown()+0x5c>)
 8010d16:	69a0      	ldr	r0, [r4, #24]
 8010d18:	f7ff fe72 	bl	8010a00 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8010d1c:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8010d20:	4620      	mov	r0, r4
 8010d22:	f7ff fe84 	bl	8010a2e <Display::Status(Display7SegmentMessage)>
 8010d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d2a:	b118      	cbz	r0, 8010d34 <DisplayUdf::ShowShutdown()+0x58>
 8010d2c:	6803      	ldr	r3, [r0, #0]
 8010d2e:	2120      	movs	r1, #32
 8010d30:	695b      	ldr	r3, [r3, #20]
 8010d32:	4798      	blx	r3
 8010d34:	3701      	adds	r7, #1
 8010d36:	e7e3      	b.n	8010d00 <DisplayUdf::ShowShutdown()+0x24>
 8010d38:	08015cdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, fp, ip, lr}

08010d3c <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8010d3c:	1e4b      	subs	r3, r1, #1
 8010d3e:	2b05      	cmp	r3, #5
 8010d40:	b530      	push	{r4, r5, lr}
 8010d42:	d80f      	bhi.n	8010d64 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8010d44:	2300      	movs	r3, #0
 8010d46:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 8010d4a:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010d4e:	428d      	cmp	r5, r1
 8010d50:	d109      	bne.n	8010d66 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8010d52:	1884      	adds	r4, r0, r2
 8010d54:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8010d58:	4403      	add	r3, r0
 8010d5a:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8010d5e:	4410      	add	r0, r2
 8010d60:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8010d64:	bd30      	pop	{r4, r5, pc}
 8010d66:	3301      	adds	r3, #1
 8010d68:	2b14      	cmp	r3, #20
 8010d6a:	d1ee      	bne.n	8010d4a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8010d6c:	e7f7      	b.n	8010d5e <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

08010d70 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8010d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d72:	88c6      	ldrh	r6, [r0, #6]
 8010d74:	8885      	ldrh	r5, [r0, #4]
 8010d76:	42ae      	cmp	r6, r5
 8010d78:	d216      	bcs.n	8010da8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8010d7a:	4604      	mov	r4, r0
 8010d7c:	6800      	ldr	r0, [r0, #0]
 8010d7e:	1bad      	subs	r5, r5, r6
 8010d80:	4430      	add	r0, r6
 8010d82:	7a26      	ldrb	r6, [r4, #8]
 8010d84:	b923      	cbnz	r3, 8010d90 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8010d86:	b926      	cbnz	r6, 8010d92 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8010d88:	9200      	str	r2, [sp, #0]
 8010d8a:	460b      	mov	r3, r1
 8010d8c:	4a09      	ldr	r2, [pc, #36]	; (8010db4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8010d8e:	e003      	b.n	8010d98 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8010d90:	b166      	cbz	r6, 8010dac <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8010d92:	460b      	mov	r3, r1
 8010d94:	9200      	str	r2, [sp, #0]
 8010d96:	4a08      	ldr	r2, [pc, #32]	; (8010db8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8010d98:	4629      	mov	r1, r5
 8010d9a:	f7f8 fa6f 	bl	800927c <snprintf>
 8010d9e:	4285      	cmp	r5, r0
 8010da0:	bfa2      	ittt	ge
 8010da2:	88e3      	ldrhge	r3, [r4, #6]
 8010da4:	181b      	addge	r3, r3, r0
 8010da6:	80e3      	strhge	r3, [r4, #6]
 8010da8:	b002      	add	sp, #8
 8010daa:	bd70      	pop	{r4, r5, r6, pc}
 8010dac:	9200      	str	r2, [sp, #0]
 8010dae:	460b      	mov	r3, r1
 8010db0:	4a02      	ldr	r2, [pc, #8]	; (8010dbc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8010db2:	e7f1      	b.n	8010d98 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8010db4:	080144fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, lr}
 8010db8:	080144f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sl, lr}
 8010dbc:	080144fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, lr}

08010dc0 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8010dc0:	b510      	push	{r4, lr}
 8010dc2:	2220      	movs	r2, #32
 8010dc4:	4604      	mov	r4, r0
 8010dc6:	f840 1b04 	str.w	r1, [r0], #4
 8010dca:	2100      	movs	r1, #0
 8010dcc:	f001 f9c4 	bl	8012158 <memset>
 8010dd0:	f647 7305 	movw	r3, #32517	; 0x7f05
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	84a3      	strh	r3, [r4, #36]	; 0x24
 8010dd8:	bd10      	pop	{r4, pc}

08010dda <DisplayUdfParams::Load()>:
 8010dda:	b508      	push	{r3, lr}
 8010ddc:	2300      	movs	r3, #0
 8010dde:	4601      	mov	r1, r0
 8010de0:	6043      	str	r3, [r0, #4]
 8010de2:	6800      	ldr	r0, [r0, #0]
 8010de4:	b120      	cbz	r0, 8010df0 <DisplayUdfParams::Load()+0x16>
 8010de6:	6803      	ldr	r3, [r0, #0]
 8010de8:	3104      	adds	r1, #4
 8010dea:	68db      	ldr	r3, [r3, #12]
 8010dec:	4798      	blx	r3
 8010dee:	2001      	movs	r0, #1
 8010df0:	bd08      	pop	{r3, pc}
	...

08010df4 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8010df4:	6803      	ldr	r3, [r0, #0]
 8010df6:	b1d3      	cbz	r3, 8010e2e <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8010df8:	2300      	movs	r3, #0
 8010dfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010dfc:	460d      	mov	r5, r1
 8010dfe:	4616      	mov	r6, r2
 8010e00:	4604      	mov	r4, r0
 8010e02:	6043      	str	r3, [r0, #4]
 8010e04:	4602      	mov	r2, r0
 8010e06:	490a      	ldr	r1, [pc, #40]	; (8010e30 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8010e08:	4668      	mov	r0, sp
 8010e0a:	f000 fb1f 	bl	801144c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8010e0e:	4632      	mov	r2, r6
 8010e10:	4629      	mov	r1, r5
 8010e12:	4668      	mov	r0, sp
 8010e14:	f000 fb1e 	bl	8011454 <ReadConfigFile::Read(char const*, unsigned int)>
 8010e18:	4621      	mov	r1, r4
 8010e1a:	f851 0b04 	ldr.w	r0, [r1], #4
 8010e1e:	6803      	ldr	r3, [r0, #0]
 8010e20:	689b      	ldr	r3, [r3, #8]
 8010e22:	4798      	blx	r3
 8010e24:	4668      	mov	r0, sp
 8010e26:	f000 fb14 	bl	8011452 <ReadConfigFile::~ReadConfigFile()>
 8010e2a:	b002      	add	sp, #8
 8010e2c:	bd70      	pop	{r4, r5, r6, pc}
 8010e2e:	4770      	bx	lr
 8010e30:	08010efd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp}

08010e34 <DisplayUdfParams::callbackFunction(char const*)>:
 8010e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e36:	460e      	mov	r6, r1
 8010e38:	4604      	mov	r4, r0
 8010e3a:	492c      	ldr	r1, [pc, #176]	; (8010eec <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8010e3c:	4630      	mov	r0, r6
 8010e3e:	f10d 0207 	add.w	r2, sp, #7
 8010e42:	f000 fc3f 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010e46:	b968      	cbnz	r0, 8010e64 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8010e48:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010e4c:	6863      	ldr	r3, [r4, #4]
 8010e4e:	2a7f      	cmp	r2, #127	; 0x7f
 8010e50:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8010e54:	bf14      	ite	ne
 8010e56:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 8010e5a:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 8010e5e:	6063      	str	r3, [r4, #4]
 8010e60:	b003      	add	sp, #12
 8010e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e64:	4630      	mov	r0, r6
 8010e66:	4922      	ldr	r1, [pc, #136]	; (8010ef0 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 8010e68:	f10d 0207 	add.w	r2, sp, #7
 8010e6c:	f000 fc2a 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010e70:	b958      	cbnz	r0, 8010e8a <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8010e72:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010e76:	6863      	ldr	r3, [r4, #4]
 8010e78:	2a05      	cmp	r2, #5
 8010e7a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8010e7e:	bf14      	ite	ne
 8010e80:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8010e84:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8010e88:	e7e9      	b.n	8010e5e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8010e8a:	4630      	mov	r0, r6
 8010e8c:	4919      	ldr	r1, [pc, #100]	; (8010ef4 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 8010e8e:	f10d 0207 	add.w	r2, sp, #7
 8010e92:	f000 fc17 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010e96:	b948      	cbnz	r0, 8010eac <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8010e98:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010e9c:	6863      	ldr	r3, [r4, #4]
 8010e9e:	b112      	cbz	r2, 8010ea6 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8010ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010ea4:	e7db      	b.n	8010e5e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8010ea6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010eaa:	e7d8      	b.n	8010e5e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8010eac:	2500      	movs	r5, #0
 8010eae:	4f12      	ldr	r7, [pc, #72]	; (8010ef8 <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 8010eb0:	4630      	mov	r0, r6
 8010eb2:	f857 1b04 	ldr.w	r1, [r7], #4
 8010eb6:	f10d 0207 	add.w	r2, sp, #7
 8010eba:	f000 fc03 	bl	80116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010ebe:	b980      	cbnz	r0, 8010ee2 <DisplayUdfParams::callbackFunction(char const*)+0xae>
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010ec6:	40ab      	lsls	r3, r5
 8010ec8:	1e4e      	subs	r6, r1, #1
 8010eca:	2e05      	cmp	r6, #5
 8010ecc:	6862      	ldr	r2, [r4, #4]
 8010ece:	4425      	add	r5, r4
 8010ed0:	d802      	bhi.n	8010ed8 <DisplayUdfParams::callbackFunction(char const*)+0xa4>
 8010ed2:	7229      	strb	r1, [r5, #8]
 8010ed4:	4313      	orrs	r3, r2
 8010ed6:	e7c2      	b.n	8010e5e <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8010ed8:	ea22 0203 	bic.w	r2, r2, r3
 8010edc:	7228      	strb	r0, [r5, #8]
 8010ede:	6062      	str	r2, [r4, #4]
 8010ee0:	e7be      	b.n	8010e60 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8010ee2:	3501      	adds	r5, #1
 8010ee4:	2d14      	cmp	r5, #20
 8010ee6:	d1e3      	bne.n	8010eb0 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 8010ee8:	e7ba      	b.n	8010e60 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8010eea:	bf00      	nop
 8010eec:	08015d9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, sl, fp, ip, lr}
 8010ef0:	08015d66 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, fp, ip, lr}
 8010ef4:	08015d74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, ip, lr}
 8010ef8:	08015cf0 	stmdaeq	r1, {r4, r5, r6, r7, sl, fp, ip, lr}

08010efc <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8010efc:	f7ff bf9a 	b.w	8010e34 <DisplayUdfParams::callbackFunction(char const*)>

08010f00 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 8010f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f04:	4604      	mov	r4, r0
 8010f06:	4615      	mov	r5, r2
 8010f08:	461e      	mov	r6, r3
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	3004      	adds	r0, #4
 8010f0e:	b379      	cbz	r1, 8010f70 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 8010f10:	2222      	movs	r2, #34	; 0x22
 8010f12:	f001 f90a 	bl	801212a <memmove>
 8010f16:	462a      	mov	r2, r5
 8010f18:	4633      	mov	r3, r6
 8010f1a:	493d      	ldr	r1, [pc, #244]	; (8011010 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 8010f1c:	a803      	add	r0, sp, #12
 8010f1e:	f000 f9f5 	bl	801130c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8010f22:	6863      	ldr	r3, [r4, #4]
 8010f24:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8010f28:	493a      	ldr	r1, [pc, #232]	; (8011014 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 8010f2a:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8010f2e:	a803      	add	r0, sp, #12
 8010f30:	f7ff ff1e 	bl	8010d70 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8010f34:	6863      	ldr	r3, [r4, #4]
 8010f36:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8010f3a:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8010f3e:	4936      	ldr	r1, [pc, #216]	; (8011018 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 8010f40:	a803      	add	r0, sp, #12
 8010f42:	f7ff ff15 	bl	8010d70 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8010f46:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010f4a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8010f4e:	6863      	ldr	r3, [r4, #4]
 8010f50:	42aa      	cmp	r2, r5
 8010f52:	d226      	bcs.n	8010fa2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 8010f54:	9803      	ldr	r0, [sp, #12]
 8010f56:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8010f5a:	4410      	add	r0, r2
 8010f5c:	eba5 0502 	sub.w	r5, r5, r2
 8010f60:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8010f64:	d10b      	bne.n	8010f7e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8010f66:	b962      	cbnz	r2, 8010f82 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8010f68:	9200      	str	r2, [sp, #0]
 8010f6a:	4b2c      	ldr	r3, [pc, #176]	; (801101c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8010f6c:	4a2c      	ldr	r2, [pc, #176]	; (8011020 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8010f6e:	e00e      	b.n	8010f8e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8010f70:	6823      	ldr	r3, [r4, #0]
 8010f72:	4601      	mov	r1, r0
 8010f74:	681a      	ldr	r2, [r3, #0]
 8010f76:	4618      	mov	r0, r3
 8010f78:	68d2      	ldr	r2, [r2, #12]
 8010f7a:	4790      	blx	r2
 8010f7c:	e7cb      	b.n	8010f16 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8010f7e:	2a00      	cmp	r2, #0
 8010f80:	d041      	beq.n	8011006 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8010f82:	3b00      	subs	r3, #0
 8010f84:	bf18      	it	ne
 8010f86:	2301      	movne	r3, #1
 8010f88:	4a26      	ldr	r2, [pc, #152]	; (8011024 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8010f8a:	9300      	str	r3, [sp, #0]
 8010f8c:	4b23      	ldr	r3, [pc, #140]	; (801101c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8010f8e:	4629      	mov	r1, r5
 8010f90:	f7f8 f974 	bl	800927c <snprintf>
 8010f94:	4285      	cmp	r5, r0
 8010f96:	bfa2      	ittt	ge
 8010f98:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8010f9c:	181b      	addge	r3, r3, r0
 8010f9e:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8010fa2:	2500      	movs	r5, #0
 8010fa4:	2701      	movs	r7, #1
 8010fa6:	4e20      	ldr	r6, [pc, #128]	; (8011028 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8010fa8:	f104 0808 	add.w	r8, r4, #8
 8010fac:	f856 1b04 	ldr.w	r1, [r6], #4
 8010fb0:	780b      	ldrb	r3, [r1, #0]
 8010fb2:	b15b      	cbz	r3, 8010fcc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8010fb4:	6862      	ldr	r2, [r4, #4]
 8010fb6:	fa07 f305 	lsl.w	r3, r7, r5
 8010fba:	4393      	bics	r3, r2
 8010fbc:	bf0c      	ite	eq
 8010fbe:	2301      	moveq	r3, #1
 8010fc0:	2300      	movne	r3, #0
 8010fc2:	f818 2005 	ldrb.w	r2, [r8, r5]
 8010fc6:	a803      	add	r0, sp, #12
 8010fc8:	f7ff fed2 	bl	8010d70 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8010fcc:	3501      	adds	r5, #1
 8010fce:	2d14      	cmp	r5, #20
 8010fd0:	d1ec      	bne.n	8010fac <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 8010fd2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010fd6:	b17b      	cbz	r3, 8010ff8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 8010fd8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010fdc:	9b03      	ldr	r3, [sp, #12]
 8010fde:	4413      	add	r3, r2
 8010fe0:	227d      	movs	r2, #125	; 0x7d
 8010fe2:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010fe6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010fea:	9903      	ldr	r1, [sp, #12]
 8010fec:	54ca      	strb	r2, [r1, r3]
 8010fee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010ff8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010ffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ffe:	601a      	str	r2, [r3, #0]
 8011000:	b006      	add	sp, #24
 8011002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011006:	2301      	movs	r3, #1
 8011008:	4a08      	ldr	r2, [pc, #32]	; (801102c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	4b03      	ldr	r3, [pc, #12]	; (801101c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801100e:	e7be      	b.n	8010f8e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8011010:	08015d92 	stmdaeq	r1, {r1, r4, r7, r8, sl, fp, ip, lr}
 8011014:	08015d9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, sl, fp, ip, lr}
 8011018:	08015d66 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, fp, ip, lr}
 801101c:	08015d74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, ip, lr}
 8011020:	080144fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, sl, lr}
 8011024:	080144f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, sl, lr}
 8011028:	08015cf0 	stmdaeq	r1, {r4, r5, r6, r7, sl, fp, ip, lr}
 801102c:	080144fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, lr}

08011030 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8011030:	b513      	push	{r0, r1, r4, lr}
 8011032:	6804      	ldr	r4, [r0, #0]
 8011034:	b914      	cbnz	r4, 801103c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8011036:	601c      	str	r4, [r3, #0]
 8011038:	b002      	add	sp, #8
 801103a:	bd10      	pop	{r4, pc}
 801103c:	9300      	str	r3, [sp, #0]
 801103e:	4613      	mov	r3, r2
 8011040:	460a      	mov	r2, r1
 8011042:	2100      	movs	r1, #0
 8011044:	f7ff ff5c 	bl	8010f00 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 8011048:	e7f6      	b.n	8011038 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

0801104a <DisplayUdfParams::Set(DisplayUdf*)>:
 801104a:	6843      	ldr	r3, [r0, #4]
 801104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011050:	009a      	lsls	r2, r3, #2
 8011052:	4604      	mov	r4, r0
 8011054:	460e      	mov	r6, r1
 8011056:	d506      	bpl.n	8011066 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8011058:	6988      	ldr	r0, [r1, #24]
 801105a:	b120      	cbz	r0, 8011066 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 801105c:	6803      	ldr	r3, [r0, #0]
 801105e:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8011062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011064:	4798      	blx	r3
 8011066:	6863      	ldr	r3, [r4, #4]
 8011068:	69b0      	ldr	r0, [r6, #24]
 801106a:	00db      	lsls	r3, r3, #3
 801106c:	bf41      	itttt	mi
 801106e:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8011072:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8011076:	4353      	mulmi	r3, r2
 8011078:	6173      	strmi	r3, [r6, #20]
 801107a:	6861      	ldr	r1, [r4, #4]
 801107c:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8011080:	b110      	cbz	r0, 8011088 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8011082:	6803      	ldr	r3, [r0, #0]
 8011084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011086:	4798      	blx	r3
 8011088:	2500      	movs	r5, #0
 801108a:	2701      	movs	r7, #1
 801108c:	f104 0808 	add.w	r8, r4, #8
 8011090:	6862      	ldr	r2, [r4, #4]
 8011092:	fa07 f305 	lsl.w	r3, r7, r5
 8011096:	4393      	bics	r3, r2
 8011098:	d105      	bne.n	80110a6 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 801109a:	462a      	mov	r2, r5
 801109c:	4630      	mov	r0, r6
 801109e:	f818 1005 	ldrb.w	r1, [r8, r5]
 80110a2:	f7ff fe4b 	bl	8010d3c <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80110a6:	3501      	adds	r5, #1
 80110a8:	2d14      	cmp	r5, #20
 80110aa:	d1f1      	bne.n	8011090 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 80110ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080110b0 <DisplayUdfParams::Dump()>:
 80110b0:	4770      	bx	lr
	...

080110b4 <DisplayUdf::Show(E131Bridge*)>:
 80110b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110b8:	460e      	mov	r6, r1
 80110ba:	4604      	mov	r4, r0
 80110bc:	b085      	sub	sp, #20
 80110be:	f7ff fd91 	bl	8010be4 <DisplayUdf::Show()>
 80110c2:	f896 250b 	ldrb.w	r2, [r6, #1291]	; 0x50b
 80110c6:	f896 350a 	ldrb.w	r3, [r6, #1290]	; 0x50a
 80110ca:	4620      	mov	r0, r4
 80110cc:	4413      	add	r3, r2
 80110ce:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 80110d2:	4a21      	ldr	r2, [pc, #132]	; (8011158 <DisplayUdf::Show(E131Bridge*)+0xa4>)
 80110d4:	f7f7 fac6 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 80110d8:	2500      	movs	r5, #0
 80110da:	4f20      	ldr	r7, [pc, #128]	; (801115c <DisplayUdf::Show(E131Bridge*)+0xa8>)
 80110dc:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8011160 <DisplayUdf::Show(E131Bridge*)+0xac>
 80110e0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8011164 <DisplayUdf::Show(E131Bridge*)+0xb0>
 80110e4:	2301      	movs	r3, #1
 80110e6:	4629      	mov	r1, r5
 80110e8:	4630      	mov	r0, r6
 80110ea:	f10d 020e 	add.w	r2, sp, #14
 80110ee:	f7f8 fcbb 	bl	8009a68 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 80110f2:	b1a8      	cbz	r0, 8011120 <DisplayUdf::Show(E131Bridge*)+0x6c>
 80110f4:	2344      	movs	r3, #68	; 0x44
 80110f6:	436b      	muls	r3, r5
 80110f8:	f206 524c 	addw	r2, r6, #1356	; 0x54c
 80110fc:	58d2      	ldr	r2, [r2, r3]
 80110fe:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8011102:	2a00      	cmp	r2, #0
 8011104:	bf0c      	ite	eq
 8011106:	463b      	moveq	r3, r7
 8011108:	4643      	movne	r3, r8
 801110a:	e9cd 0300 	strd	r0, r3, [sp]
 801110e:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8011112:	464a      	mov	r2, r9
 8011114:	4620      	mov	r0, r4
 8011116:	5d49      	ldrb	r1, [r1, r5]
 8011118:	f105 0341 	add.w	r3, r5, #65	; 0x41
 801111c:	f7f7 faa2 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 8011120:	3501      	adds	r5, #1
 8011122:	2d04      	cmp	r5, #4
 8011124:	d1de      	bne.n	80110e4 <DisplayUdf::Show(E131Bridge*)+0x30>
 8011126:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011128:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 801112c:	2a02      	cmp	r2, #2
 801112e:	d001      	beq.n	8011134 <DisplayUdf::Show(E131Bridge*)+0x80>
 8011130:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011132:	b933      	cbnz	r3, 8011142 <DisplayUdf::Show(E131Bridge*)+0x8e>
 8011134:	4620      	mov	r0, r4
 8011136:	4a0c      	ldr	r2, [pc, #48]	; (8011168 <DisplayUdf::Show(E131Bridge*)+0xb4>)
 8011138:	f7f7 fa94 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 801113c:	b005      	add	sp, #20
 801113e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011142:	480a      	ldr	r0, [pc, #40]	; (801116c <DisplayUdf::Show(E131Bridge*)+0xb8>)
 8011144:	9300      	str	r3, [sp, #0]
 8011146:	4b0a      	ldr	r3, [pc, #40]	; (8011170 <DisplayUdf::Show(E131Bridge*)+0xbc>)
 8011148:	2a00      	cmp	r2, #0
 801114a:	bf08      	it	eq
 801114c:	4603      	moveq	r3, r0
 801114e:	4620      	mov	r0, r4
 8011150:	4a08      	ldr	r2, [pc, #32]	; (8011174 <DisplayUdf::Show(E131Bridge*)+0xc0>)
 8011152:	f7f7 fa87 	bl	8008664 <Display::Printf(unsigned char, char const*, ...)>
 8011156:	e7f1      	b.n	801113c <DisplayUdf::Show(E131Bridge*)+0x88>
 8011158:	08015da8 	stmdaeq	r1, {r3, r5, r7, r8, sl, fp, ip, lr}
 801115c:	08014405 	stmdaeq	r1, {r0, r2, sl, lr}
 8011160:	08014409 	stmdaeq	r1, {r0, r3, sl, lr}
 8011164:	08015daf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, sl, fp, ip, lr}
 8011168:	08015dbe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, sl, fp, ip, lr}
 801116c:	08014527 	stmdaeq	r1, {r0, r1, r2, r5, r8, sl, lr}
 8011170:	0801451c 	stmdaeq	r1, {r2, r3, r4, r8, sl, lr}
 8011174:	08015dc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, sl, fp, ip, lr}

08011178 <NetworkDisplay::ShowEmacStart()>:
 8011178:	4b01      	ldr	r3, [pc, #4]	; (8011180 <NetworkDisplay::ShowEmacStart()+0x8>)
 801117a:	6818      	ldr	r0, [r3, #0]
 801117c:	f7ff bc9c 	b.w	8010ab8 <DisplayUdf::ShowEmacStart()>
 8011180:	2000a8bc 			; <UNDEFINED> instruction: 0x2000a8bc

08011184 <NetworkDisplay::ShowIp()>:
 8011184:	4b01      	ldr	r3, [pc, #4]	; (801118c <NetworkDisplay::ShowIp()+0x8>)
 8011186:	6818      	ldr	r0, [r3, #0]
 8011188:	f7ff bca6 	b.w	8010ad8 <DisplayUdf::ShowIpAddress()>
 801118c:	2000a8bc 			; <UNDEFINED> instruction: 0x2000a8bc

08011190 <NetworkDisplay::ShowShutdown()>:
 8011190:	4b01      	ldr	r3, [pc, #4]	; (8011198 <NetworkDisplay::ShowShutdown()+0x8>)
 8011192:	6818      	ldr	r0, [r3, #0]
 8011194:	f7ff bda2 	b.w	8010cdc <DisplayUdf::ShowShutdown()>
 8011198:	2000a8bc 			; <UNDEFINED> instruction: 0x2000a8bc

0801119c <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 801119c:	4b01      	ldr	r3, [pc, #4]	; (80111a4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 801119e:	6818      	ldr	r0, [r3, #0]
 80111a0:	f7ff bd64 	b.w	8010c6c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80111a4:	2000a8bc 			; <UNDEFINED> instruction: 0x2000a8bc

080111a8 <properties::convert_json_file(char*, unsigned short, bool)>:
 80111a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111ac:	4603      	mov	r3, r0
 80111ae:	7800      	ldrb	r0, [r0, #0]
 80111b0:	287b      	cmp	r0, #123	; 0x7b
 80111b2:	f040 80a2 	bne.w	80112fa <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 80111b6:	b17a      	cbz	r2, 80111d8 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 80111b8:	2401      	movs	r4, #1
 80111ba:	461e      	mov	r6, r3
 80111bc:	4620      	mov	r0, r4
 80111be:	2a00      	cmp	r2, #0
 80111c0:	bf0c      	ite	eq
 80111c2:	f04f 0c0a 	moveq.w	ip, #10
 80111c6:	f04f 0c00 	movne.w	ip, #0
 80111ca:	273d      	movs	r7, #61	; 0x3d
 80111cc:	42a1      	cmp	r1, r4
 80111ce:	d850      	bhi.n	8011272 <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 80111d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111d4:	463c      	mov	r4, r7
 80111d6:	e7f2      	b.n	80111be <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 80111d8:	2023      	movs	r0, #35	; 0x23
 80111da:	f803 0b01 	strb.w	r0, [r3], #1
 80111de:	461c      	mov	r4, r3
 80111e0:	2701      	movs	r7, #1
 80111e2:	42b9      	cmp	r1, r7
 80111e4:	d811      	bhi.n	801120a <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 80111e6:	2001      	movs	r0, #1
 80111e8:	461e      	mov	r6, r3
 80111ea:	230a      	movs	r3, #10
 80111ec:	4625      	mov	r5, r4
 80111ee:	f806 3b01 	strb.w	r3, [r6], #1
 80111f2:	3001      	adds	r0, #1
 80111f4:	462b      	mov	r3, r5
 80111f6:	781c      	ldrb	r4, [r3, #0]
 80111f8:	3501      	adds	r5, #1
 80111fa:	2c7b      	cmp	r4, #123	; 0x7b
 80111fc:	d0ea      	beq.n	80111d4 <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 80111fe:	42b9      	cmp	r1, r7
 8011200:	f107 0401 	add.w	r4, r7, #1
 8011204:	d9db      	bls.n	80111be <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8011206:	4627      	mov	r7, r4
 8011208:	e7f4      	b.n	80111f4 <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 801120a:	f814 0b01 	ldrb.w	r0, [r4], #1
 801120e:	2822      	cmp	r0, #34	; 0x22
 8011210:	d119      	bne.n	8011246 <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 8011212:	46a4      	mov	ip, r4
 8011214:	461d      	mov	r5, r3
 8011216:	2601      	movs	r6, #1
 8011218:	f89c e000 	ldrb.w	lr, [ip]
 801121c:	4664      	mov	r4, ip
 801121e:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011222:	462b      	mov	r3, r5
 8011224:	4630      	mov	r0, r6
 8011226:	f10c 0c01 	add.w	ip, ip, #1
 801122a:	f105 0501 	add.w	r5, r5, #1
 801122e:	f106 0601 	add.w	r6, r6, #1
 8011232:	d0d9      	beq.n	80111e8 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8011234:	3701      	adds	r7, #1
 8011236:	42b9      	cmp	r1, r7
 8011238:	4664      	mov	r4, ip
 801123a:	f805 ec01 	strb.w	lr, [r5, #-1]
 801123e:	d8eb      	bhi.n	8011218 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8011240:	4630      	mov	r0, r6
 8011242:	462b      	mov	r3, r5
 8011244:	e7d0      	b.n	80111e8 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8011246:	3701      	adds	r7, #1
 8011248:	e7cb      	b.n	80111e2 <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 801124a:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 801124e:	d110      	bne.n	8011272 <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8011250:	eba0 0803 	sub.w	r8, r0, r3
 8011254:	461a      	mov	r2, r3
 8011256:	eb08 0003 	add.w	r0, r8, r3
 801125a:	f813 eb01 	ldrb.w	lr, [r3], #1
 801125e:	1c65      	adds	r5, r4, #1
 8011260:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011264:	d04c      	beq.n	8011300 <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 8011266:	42a1      	cmp	r1, r4
 8011268:	d911      	bls.n	801128e <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 801126a:	462c      	mov	r4, r5
 801126c:	f806 eb01 	strb.w	lr, [r6], #1
 8011270:	e7f0      	b.n	8011254 <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8011272:	42a1      	cmp	r1, r4
 8011274:	461d      	mov	r5, r3
 8011276:	f893 e000 	ldrb.w	lr, [r3]
 801127a:	f104 0401 	add.w	r4, r4, #1
 801127e:	f103 0301 	add.w	r3, r3, #1
 8011282:	d8e2      	bhi.n	801124a <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8011284:	462b      	mov	r3, r5
 8011286:	e7e3      	b.n	8011250 <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 8011288:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 801128c:	d009      	beq.n	80112a2 <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 801128e:	42a9      	cmp	r1, r5
 8011290:	4614      	mov	r4, r2
 8011292:	f892 e000 	ldrb.w	lr, [r2]
 8011296:	f105 0501 	add.w	r5, r5, #1
 801129a:	f102 0201 	add.w	r2, r2, #1
 801129e:	d8f3      	bhi.n	8011288 <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 80112a0:	4622      	mov	r2, r4
 80112a2:	7814      	ldrb	r4, [r2, #0]
 80112a4:	4696      	mov	lr, r2
 80112a6:	2c2f      	cmp	r4, #47	; 0x2f
 80112a8:	462b      	mov	r3, r5
 80112aa:	f102 0201 	add.w	r2, r2, #1
 80112ae:	f105 0501 	add.w	r5, r5, #1
 80112b2:	d81a      	bhi.n	80112ea <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 80112b4:	4299      	cmp	r1, r3
 80112b6:	d8f4      	bhi.n	80112a2 <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 80112b8:	2c22      	cmp	r4, #34	; 0x22
 80112ba:	bf08      	it	eq
 80112bc:	4696      	moveq	lr, r2
 80112be:	4673      	mov	r3, lr
 80112c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112c4:	1c6c      	adds	r4, r5, #1
 80112c6:	2a22      	cmp	r2, #34	; 0x22
 80112c8:	d011      	beq.n	80112ee <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 80112ca:	2a2c      	cmp	r2, #44	; 0x2c
 80112cc:	d00f      	beq.n	80112ee <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 80112ce:	2a7d      	cmp	r2, #125	; 0x7d
 80112d0:	d00d      	beq.n	80112ee <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 80112d2:	42a9      	cmp	r1, r5
 80112d4:	d90f      	bls.n	80112f6 <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 80112d6:	f1a2 0520 	sub.w	r5, r2, #32
 80112da:	2d5a      	cmp	r5, #90	; 0x5a
 80112dc:	d803      	bhi.n	80112e6 <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 80112de:	469e      	mov	lr, r3
 80112e0:	f806 2b01 	strb.w	r2, [r6], #1
 80112e4:	3001      	adds	r0, #1
 80112e6:	4625      	mov	r5, r4
 80112e8:	e7e9      	b.n	80112be <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 80112ea:	461d      	mov	r5, r3
 80112ec:	e7e7      	b.n	80112be <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 80112ee:	462c      	mov	r4, r5
 80112f0:	f806 cb01 	strb.w	ip, [r6], #1
 80112f4:	3001      	adds	r0, #1
 80112f6:	3401      	adds	r4, #1
 80112f8:	e768      	b.n	80111cc <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 80112fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112fe:	e767      	b.n	80111d0 <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 8011300:	4625      	mov	r5, r4
 8011302:	f806 7b01 	strb.w	r7, [r6], #1
 8011306:	3001      	adds	r0, #1
 8011308:	e7c1      	b.n	801128e <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

0801130c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 801130c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011310:	6002      	str	r2, [r0, #0]
 8011312:	4614      	mov	r4, r2
 8011314:	2200      	movs	r2, #0
 8011316:	80c2      	strh	r2, [r0, #6]
 8011318:	4a1c      	ldr	r2, [pc, #112]	; (801138c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 801131a:	4606      	mov	r6, r0
 801131c:	7812      	ldrb	r2, [r2, #0]
 801131e:	8083      	strh	r3, [r0, #4]
 8011320:	f002 0201 	and.w	r2, r2, #1
 8011324:	7202      	strb	r2, [r0, #8]
 8011326:	4608      	mov	r0, r1
 8011328:	4605      	mov	r5, r0
 801132a:	782f      	ldrb	r7, [r5, #0]
 801132c:	3001      	adds	r0, #1
 801132e:	2f00      	cmp	r7, #0
 8011330:	d1fa      	bne.n	8011328 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8011332:	1a6d      	subs	r5, r5, r1
 8011334:	b29b      	uxth	r3, r3
 8011336:	b1d2      	cbz	r2, 801136e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8011338:	1d2f      	adds	r7, r5, #4
 801133a:	429f      	cmp	r7, r3
 801133c:	d814      	bhi.n	8011368 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801133e:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8011342:	f04f 0922 	mov.w	r9, #34	; 0x22
 8011346:	462a      	mov	r2, r5
 8011348:	f884 8000 	strb.w	r8, [r4]
 801134c:	f884 9001 	strb.w	r9, [r4, #1]
 8011350:	1ca0      	adds	r0, r4, #2
 8011352:	f000 feea 	bl	801212a <memmove>
 8011356:	223a      	movs	r2, #58	; 0x3a
 8011358:	1963      	adds	r3, r4, r5
 801135a:	3505      	adds	r5, #5
 801135c:	f883 9002 	strb.w	r9, [r3, #2]
 8011360:	70da      	strb	r2, [r3, #3]
 8011362:	80f5      	strh	r5, [r6, #6]
 8011364:	f804 8007 	strb.w	r8, [r4, r7]
 8011368:	4630      	mov	r0, r6
 801136a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801136e:	1caf      	adds	r7, r5, #2
 8011370:	429f      	cmp	r7, r3
 8011372:	d8f9      	bhi.n	8011368 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8011374:	4620      	mov	r0, r4
 8011376:	2323      	movs	r3, #35	; 0x23
 8011378:	462a      	mov	r2, r5
 801137a:	f800 3b01 	strb.w	r3, [r0], #1
 801137e:	f000 fed4 	bl	801212a <memmove>
 8011382:	230a      	movs	r3, #10
 8011384:	442c      	add	r4, r5
 8011386:	7063      	strb	r3, [r4, #1]
 8011388:	80f7      	strh	r7, [r6, #6]
 801138a:	e7ed      	b.n	8011368 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801138c:	2000a8c0 	andcs	sl, r0, r0, asr #17

08011390 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8011390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011392:	469c      	mov	ip, r3
 8011394:	8885      	ldrh	r5, [r0, #4]
 8011396:	88c3      	ldrh	r3, [r0, #6]
 8011398:	b085      	sub	sp, #20
 801139a:	42ab      	cmp	r3, r5
 801139c:	d302      	bcc.n	80113a4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 801139e:	2000      	movs	r0, #0
 80113a0:	b005      	add	sp, #20
 80113a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113a4:	4604      	mov	r4, r0
 80113a6:	6800      	ldr	r0, [r0, #0]
 80113a8:	1aed      	subs	r5, r5, r3
 80113aa:	4418      	add	r0, r3
 80113ac:	b2d6      	uxtb	r6, r2
 80113ae:	f3c2 2707 	ubfx	r7, r2, #8, #8
 80113b2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80113b6:	f894 e008 	ldrb.w	lr, [r4, #8]
 80113ba:	0e12      	lsrs	r2, r2, #24
 80113bc:	f1bc 0f00 	cmp.w	ip, #0
 80113c0:	d109      	bne.n	80113d6 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 80113c2:	f1be 0f00 	cmp.w	lr, #0
 80113c6:	d109      	bne.n	80113dc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 80113c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80113cc:	e9cd 6700 	strd	r6, r7, [sp]
 80113d0:	460b      	mov	r3, r1
 80113d2:	4a0e      	ldr	r2, [pc, #56]	; (801140c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 80113d4:	e008      	b.n	80113e8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80113d6:	f1be 0f00 	cmp.w	lr, #0
 80113da:	d00f      	beq.n	80113fc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 80113dc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80113e0:	460b      	mov	r3, r1
 80113e2:	e9cd 6700 	strd	r6, r7, [sp]
 80113e6:	4a0a      	ldr	r2, [pc, #40]	; (8011410 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 80113e8:	4629      	mov	r1, r5
 80113ea:	f7f7 ff47 	bl	800927c <snprintf>
 80113ee:	4285      	cmp	r5, r0
 80113f0:	dbd5      	blt.n	801139e <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 80113f2:	88e3      	ldrh	r3, [r4, #6]
 80113f4:	4403      	add	r3, r0
 80113f6:	80e3      	strh	r3, [r4, #6]
 80113f8:	2001      	movs	r0, #1
 80113fa:	e7d1      	b.n	80113a0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 80113fc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011400:	e9cd 6700 	strd	r6, r7, [sp]
 8011404:	460b      	mov	r3, r1
 8011406:	4a03      	ldr	r2, [pc, #12]	; (8011414 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8011408:	e7ee      	b.n	80113e8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 801140a:	bf00      	nop
 801140c:	08015e53 	stmdaeq	r1, {r0, r1, r4, r6, r9, sl, fp, ip, lr}
 8011410:	08015e3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r9, sl, fp, ip, lr}
 8011414:	08015e54 	stmdaeq	r1, {r2, r4, r6, r9, sl, fp, ip, lr}

08011418 <PropertiesBuilder::AddComment(char const*)>:
 8011418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801141a:	7a06      	ldrb	r6, [r0, #8]
 801141c:	b996      	cbnz	r6, 8011444 <PropertiesBuilder::AddComment(char const*)+0x2c>
 801141e:	4604      	mov	r4, r0
 8011420:	88c0      	ldrh	r0, [r0, #6]
 8011422:	88a5      	ldrh	r5, [r4, #4]
 8011424:	42a8      	cmp	r0, r5
 8011426:	d20d      	bcs.n	8011444 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8011428:	6827      	ldr	r7, [r4, #0]
 801142a:	1a2d      	subs	r5, r5, r0
 801142c:	460b      	mov	r3, r1
 801142e:	4a06      	ldr	r2, [pc, #24]	; (8011448 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8011430:	4629      	mov	r1, r5
 8011432:	4438      	add	r0, r7
 8011434:	f7f7 ff22 	bl	800927c <snprintf>
 8011438:	4285      	cmp	r5, r0
 801143a:	bfa1      	itttt	ge
 801143c:	2601      	movge	r6, #1
 801143e:	88e3      	ldrhge	r3, [r4, #6]
 8011440:	18c0      	addge	r0, r0, r3
 8011442:	80e0      	strhge	r0, [r4, #6]
 8011444:	4630      	mov	r0, r6
 8011446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011448:	08015e64 	stmdaeq	r1, {r2, r5, r6, r9, sl, fp, ip, lr}

0801144c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 801144c:	e9c0 1200 	strd	r1, r2, [r0]
 8011450:	4770      	bx	lr

08011452 <ReadConfigFile::~ReadConfigFile()>:
 8011452:	4770      	bx	lr

08011454 <ReadConfigFile::Read(char const*, unsigned int)>:
 8011454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011458:	4606      	mov	r6, r0
 801145a:	460d      	mov	r5, r1
 801145c:	4614      	mov	r4, r2
 801145e:	f04f 0800 	mov.w	r8, #0
 8011462:	b090      	sub	sp, #64	; 0x40
 8011464:	b33c      	cbz	r4, 80114b6 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8011466:	466b      	mov	r3, sp
 8011468:	462a      	mov	r2, r5
 801146a:	4619      	mov	r1, r3
 801146c:	e007      	b.n	801147e <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 801146e:	f803 7b01 	strb.w	r7, [r3], #1
 8011472:	1a58      	subs	r0, r3, r1
 8011474:	283f      	cmp	r0, #63	; 0x3f
 8011476:	4615      	mov	r5, r2
 8011478:	dc1d      	bgt.n	80114b6 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 801147a:	3c01      	subs	r4, #1
 801147c:	d00f      	beq.n	801149e <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 801147e:	7817      	ldrb	r7, [r2, #0]
 8011480:	4610      	mov	r0, r2
 8011482:	2f0d      	cmp	r7, #13
 8011484:	f102 0201 	add.w	r2, r2, #1
 8011488:	d001      	beq.n	801148e <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 801148a:	2f0a      	cmp	r7, #10
 801148c:	d1ef      	bne.n	801146e <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 801148e:	4605      	mov	r5, r0
 8011490:	b12c      	cbz	r4, 801149e <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8011492:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011496:	2a0d      	cmp	r2, #13
 8011498:	d00b      	beq.n	80114b2 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 801149a:	2a0a      	cmp	r2, #10
 801149c:	d009      	beq.n	80114b2 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 801149e:	f89d 2000 	ldrb.w	r2, [sp]
 80114a2:	2a60      	cmp	r2, #96	; 0x60
 80114a4:	d9de      	bls.n	8011464 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80114a6:	f883 8000 	strb.w	r8, [r3]
 80114aa:	e9d6 3000 	ldrd	r3, r0, [r6]
 80114ae:	4798      	blx	r3
 80114b0:	e7d8      	b.n	8011464 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80114b2:	3c01      	subs	r4, #1
 80114b4:	e7eb      	b.n	801148e <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 80114b6:	b010      	add	sp, #64	; 0x40
 80114b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080114bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 80114bc:	b570      	push	{r4, r5, r6, lr}
 80114be:	4615      	mov	r5, r2
 80114c0:	461c      	mov	r4, r3
 80114c2:	f000 f91c 	bl	80116fe <Sscan::checkName(char const*, char const*)>
 80114c6:	b180      	cbz	r0, 80114ea <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 80114c8:	2100      	movs	r1, #0
 80114ca:	5c43      	ldrb	r3, [r0, r1]
 80114cc:	6826      	ldr	r6, [r4, #0]
 80114ce:	b28a      	uxth	r2, r1
 80114d0:	b143      	cbz	r3, 80114e4 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 80114d2:	42b2      	cmp	r2, r6
 80114d4:	d303      	bcc.n	80114de <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 80114d6:	2b0a      	cmp	r3, #10
 80114d8:	d004      	beq.n	80114e4 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 80114da:	2002      	movs	r0, #2
 80114dc:	e004      	b.n	80114e8 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 80114de:	546b      	strb	r3, [r5, r1]
 80114e0:	3101      	adds	r1, #1
 80114e2:	e7f2      	b.n	80114ca <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 80114e4:	2000      	movs	r0, #0
 80114e6:	6022      	str	r2, [r4, #0]
 80114e8:	bd70      	pop	{r4, r5, r6, pc}
 80114ea:	2001      	movs	r0, #1
 80114ec:	e7fc      	b.n	80114e8 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

080114ee <Sscan::Float(char const*, char const*, float&)>:
 80114ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114f2:	4616      	mov	r6, r2
 80114f4:	f000 f903 	bl	80116fe <Sscan::checkName(char const*, char const*)>
 80114f8:	2800      	cmp	r0, #0
 80114fa:	d059      	beq.n	80115b0 <Sscan::Float(char const*, char const*, float&)+0xc2>
 80114fc:	4604      	mov	r4, r0
 80114fe:	7803      	ldrb	r3, [r0, #0]
 8011500:	2b2d      	cmp	r3, #45	; 0x2d
 8011502:	bf08      	it	eq
 8011504:	3401      	addeq	r4, #1
 8011506:	7823      	ldrb	r3, [r4, #0]
 8011508:	bf0c      	ite	eq
 801150a:	f04f 0801 	moveq.w	r8, #1
 801150e:	f04f 0800 	movne.w	r8, #0
 8011512:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8011516:	d103      	bne.n	8011520 <Sscan::Float(char const*, char const*, float&)+0x32>
 8011518:	2702      	movs	r7, #2
 801151a:	4638      	mov	r0, r7
 801151c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011520:	2000      	movs	r0, #0
 8011522:	220a      	movs	r2, #10
 8011524:	7823      	ldrb	r3, [r4, #0]
 8011526:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801152a:	2909      	cmp	r1, #9
 801152c:	d8f4      	bhi.n	8011518 <Sscan::Float(char const*, char const*, float&)+0x2a>
 801152e:	fb02 3000 	mla	r0, r2, r0, r3
 8011532:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011536:	3830      	subs	r0, #48	; 0x30
 8011538:	2b2e      	cmp	r3, #46	; 0x2e
 801153a:	d002      	beq.n	8011542 <Sscan::Float(char const*, char const*, float&)+0x54>
 801153c:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8011540:	d1f0      	bne.n	8011524 <Sscan::Float(char const*, char const*, float&)+0x36>
 8011542:	f7f6 fbd5 	bl	8007cf0 <__aeabi_ui2f>
 8011546:	6030      	str	r0, [r6, #0]
 8011548:	7823      	ldrb	r3, [r4, #0]
 801154a:	4605      	mov	r5, r0
 801154c:	2b2e      	cmp	r3, #46	; 0x2e
 801154e:	d008      	beq.n	8011562 <Sscan::Float(char const*, char const*, float&)+0x74>
 8011550:	f1b8 0f00 	cmp.w	r8, #0
 8011554:	d101      	bne.n	801155a <Sscan::Float(char const*, char const*, float&)+0x6c>
 8011556:	2700      	movs	r7, #0
 8011558:	e7df      	b.n	801151a <Sscan::Float(char const*, char const*, float&)+0x2c>
 801155a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 801155e:	6035      	str	r5, [r6, #0]
 8011560:	e7f9      	b.n	8011556 <Sscan::Float(char const*, char const*, float&)+0x68>
 8011562:	f04f 0901 	mov.w	r9, #1
 8011566:	2000      	movs	r0, #0
 8011568:	220a      	movs	r2, #10
 801156a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801156e:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 8011572:	d111      	bne.n	8011598 <Sscan::Float(char const*, char const*, float&)+0xaa>
 8011574:	f7f6 fbbc 	bl	8007cf0 <__aeabi_ui2f>
 8011578:	4604      	mov	r4, r0
 801157a:	4648      	mov	r0, r9
 801157c:	f7f6 fbb8 	bl	8007cf0 <__aeabi_ui2f>
 8011580:	4601      	mov	r1, r0
 8011582:	4620      	mov	r0, r4
 8011584:	f7f6 ff32 	bl	80083ec <__aeabi_fdiv>
 8011588:	4629      	mov	r1, r5
 801158a:	f7f6 fb01 	bl	8007b90 <__addsf3>
 801158e:	f1b8 0f00 	cmp.w	r8, #0
 8011592:	d109      	bne.n	80115a8 <Sscan::Float(char const*, char const*, float&)+0xba>
 8011594:	6030      	str	r0, [r6, #0]
 8011596:	e7de      	b.n	8011556 <Sscan::Float(char const*, char const*, float&)+0x68>
 8011598:	3b30      	subs	r3, #48	; 0x30
 801159a:	2b09      	cmp	r3, #9
 801159c:	d8bc      	bhi.n	8011518 <Sscan::Float(char const*, char const*, float&)+0x2a>
 801159e:	fb02 3000 	mla	r0, r2, r0, r3
 80115a2:	fb02 f909 	mul.w	r9, r2, r9
 80115a6:	e7e0      	b.n	801156a <Sscan::Float(char const*, char const*, float&)+0x7c>
 80115a8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80115ac:	6030      	str	r0, [r6, #0]
 80115ae:	e7b4      	b.n	801151a <Sscan::Float(char const*, char const*, float&)+0x2c>
 80115b0:	2701      	movs	r7, #1
 80115b2:	e7b2      	b.n	801151a <Sscan::Float(char const*, char const*, float&)+0x2c>

080115b4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 80115b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115b6:	4615      	mov	r5, r2
 80115b8:	f000 f8a1 	bl	80116fe <Sscan::checkName(char const*, char const*)>
 80115bc:	bb58      	cbnz	r0, 8011616 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 80115be:	2001      	movs	r0, #1
 80115c0:	e027      	b.n	8011612 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 80115c2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80115c6:	2b09      	cmp	r3, #9
 80115c8:	d822      	bhi.n	8011610 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80115ca:	4603      	mov	r3, r0
 80115cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80115d0:	3930      	subs	r1, #48	; 0x30
 80115d2:	4618      	mov	r0, r3
 80115d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115d8:	2a2e      	cmp	r2, #46	; 0x2e
 80115da:	d115      	bne.n	8011608 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 80115dc:	29ff      	cmp	r1, #255	; 0xff
 80115de:	d817      	bhi.n	8011610 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80115e0:	3401      	adds	r4, #1
 80115e2:	2c03      	cmp	r4, #3
 80115e4:	f806 1b01 	strb.w	r1, [r6], #1
 80115e8:	d119      	bne.n	801161e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 80115ea:	2400      	movs	r4, #0
 80115ec:	260a      	movs	r6, #10
 80115ee:	1d1a      	adds	r2, r3, #4
 80115f0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80115f4:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 80115f8:	d115      	bne.n	8011626 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 80115fa:	2cff      	cmp	r4, #255	; 0xff
 80115fc:	d808      	bhi.n	8011610 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80115fe:	f88d 4007 	strb.w	r4, [sp, #7]
 8011602:	9b01      	ldr	r3, [sp, #4]
 8011604:	602b      	str	r3, [r5, #0]
 8011606:	e004      	b.n	8011612 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8011608:	2a00      	cmp	r2, #0
 801160a:	d0e7      	beq.n	80115dc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 801160c:	42b8      	cmp	r0, r7
 801160e:	d1d8      	bne.n	80115c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 8011610:	2002      	movs	r0, #2
 8011612:	b003      	add	sp, #12
 8011614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011616:	2400      	movs	r4, #0
 8011618:	f04f 0c0a 	mov.w	ip, #10
 801161c:	ae01      	add	r6, sp, #4
 801161e:	4603      	mov	r3, r0
 8011620:	2100      	movs	r1, #0
 8011622:	1d07      	adds	r7, r0, #4
 8011624:	e7d5      	b.n	80115d2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 8011626:	4293      	cmp	r3, r2
 8011628:	d0f2      	beq.n	8011610 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801162a:	3930      	subs	r1, #48	; 0x30
 801162c:	2909      	cmp	r1, #9
 801162e:	d8ef      	bhi.n	8011610 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8011630:	fb06 1404 	mla	r4, r6, r4, r1
 8011634:	e7dc      	b.n	80115f0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

08011636 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8011636:	b538      	push	{r3, r4, r5, lr}
 8011638:	4615      	mov	r5, r2
 801163a:	f000 f860 	bl	80116fe <Sscan::checkName(char const*, char const*)>
 801163e:	b1a0      	cbz	r0, 801166a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8011640:	4604      	mov	r4, r0
 8011642:	2100      	movs	r1, #0
 8011644:	220a      	movs	r2, #10
 8011646:	7823      	ldrb	r3, [r4, #0]
 8011648:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 801164c:	2809      	cmp	r0, #9
 801164e:	d80e      	bhi.n	801166e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8011650:	fb02 3101 	mla	r1, r2, r1, r3
 8011654:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011658:	3930      	subs	r1, #48	; 0x30
 801165a:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 801165e:	d1f2      	bne.n	8011646 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8011660:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8011664:	d203      	bcs.n	801166e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8011666:	8029      	strh	r1, [r5, #0]
 8011668:	bd38      	pop	{r3, r4, r5, pc}
 801166a:	2001      	movs	r0, #1
 801166c:	e7fc      	b.n	8011668 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 801166e:	2002      	movs	r0, #2
 8011670:	e7fa      	b.n	8011668 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08011672 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 8011672:	b570      	push	{r4, r5, r6, lr}
 8011674:	4615      	mov	r5, r2
 8011676:	f000 f842 	bl	80116fe <Sscan::checkName(char const*, char const*)>
 801167a:	b1f8      	cbz	r0, 80116bc <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 801167c:	2300      	movs	r3, #0
 801167e:	4604      	mov	r4, r0
 8011680:	461a      	mov	r2, r3
 8011682:	260a      	movs	r6, #10
 8011684:	7820      	ldrb	r0, [r4, #0]
 8011686:	f1a0 0130 	sub.w	r1, r0, #48	; 0x30
 801168a:	2909      	cmp	r1, #9
 801168c:	d818      	bhi.n	80116c0 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 801168e:	fba3 3106 	umull	r3, r1, r3, r6
 8011692:	fb06 1102 	mla	r1, r6, r2, r1
 8011696:	3b30      	subs	r3, #48	; 0x30
 8011698:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 801169c:	18c3      	adds	r3, r0, r3
 801169e:	f141 0200 	adc.w	r2, r1, #0
 80116a2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80116a6:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 80116aa:	d1eb      	bne.n	8011684 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x12>
 80116ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80116b0:	4299      	cmp	r1, r3
 80116b2:	eb70 0202 	sbcs.w	r2, r0, r2
 80116b6:	d303      	bcc.n	80116c0 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 80116b8:	602b      	str	r3, [r5, #0]
 80116ba:	bd70      	pop	{r4, r5, r6, pc}
 80116bc:	2001      	movs	r0, #1
 80116be:	e7fc      	b.n	80116ba <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>
 80116c0:	2002      	movs	r0, #2
 80116c2:	e7fa      	b.n	80116ba <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>

080116c4 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 80116c4:	b538      	push	{r3, r4, r5, lr}
 80116c6:	4615      	mov	r5, r2
 80116c8:	f000 f819 	bl	80116fe <Sscan::checkName(char const*, char const*)>
 80116cc:	b198      	cbz	r0, 80116f6 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 80116ce:	4604      	mov	r4, r0
 80116d0:	2100      	movs	r1, #0
 80116d2:	220a      	movs	r2, #10
 80116d4:	7823      	ldrb	r3, [r4, #0]
 80116d6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80116da:	2809      	cmp	r0, #9
 80116dc:	d80d      	bhi.n	80116fa <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 80116de:	fb02 3101 	mla	r1, r2, r1, r3
 80116e2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80116e6:	3930      	subs	r1, #48	; 0x30
 80116e8:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 80116ec:	d1f2      	bne.n	80116d4 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 80116ee:	29ff      	cmp	r1, #255	; 0xff
 80116f0:	d803      	bhi.n	80116fa <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 80116f2:	7029      	strb	r1, [r5, #0]
 80116f4:	bd38      	pop	{r3, r4, r5, pc}
 80116f6:	2001      	movs	r0, #1
 80116f8:	e7fc      	b.n	80116f4 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 80116fa:	2002      	movs	r0, #2
 80116fc:	e7fa      	b.n	80116f4 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

080116fe <Sscan::checkName(char const*, char const*)>:
 80116fe:	4603      	mov	r3, r0
 8011700:	b510      	push	{r4, lr}
 8011702:	3901      	subs	r1, #1
 8011704:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011708:	461c      	mov	r4, r3
 801170a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801170e:	b120      	cbz	r0, 801171a <Sscan::checkName(char const*, char const*)+0x1c>
 8011710:	b10a      	cbz	r2, 8011716 <Sscan::checkName(char const*, char const*)+0x18>
 8011712:	4290      	cmp	r0, r2
 8011714:	d0f6      	beq.n	8011704 <Sscan::checkName(char const*, char const*)+0x6>
 8011716:	2000      	movs	r0, #0
 8011718:	e006      	b.n	8011728 <Sscan::checkName(char const*, char const*)+0x2a>
 801171a:	2a3d      	cmp	r2, #61	; 0x3d
 801171c:	d104      	bne.n	8011728 <Sscan::checkName(char const*, char const*)+0x2a>
 801171e:	7860      	ldrb	r0, [r4, #1]
 8011720:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8011724:	d000      	beq.n	8011728 <Sscan::checkName(char const*, char const*)+0x2a>
 8011726:	1c60      	adds	r0, r4, #1
 8011728:	bd10      	pop	{r4, pc}
	...

0801172c <Display::PrintInfo() [clone .isra.0]>:
 801172c:	b910      	cbnz	r0, 8011734 <Display::PrintInfo() [clone .isra.0]+0x8>
 801172e:	4803      	ldr	r0, [pc, #12]	; (801173c <Display::PrintInfo() [clone .isra.0]+0x10>)
 8011730:	f000 bd33 	b.w	801219a <puts>
 8011734:	6803      	ldr	r3, [r0, #0]
 8011736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011738:	4718      	bx	r3
 801173a:	bf00      	nop
 801173c:	08015ff4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

08011740 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8011740:	b513      	push	{r0, r1, r4, lr}
 8011742:	4604      	mov	r4, r0
 8011744:	0a13      	lsrs	r3, r2, #8
 8011746:	7800      	ldrb	r0, [r0, #0]
 8011748:	f88d 1004 	strb.w	r1, [sp, #4]
 801174c:	f88d 3005 	strb.w	r3, [sp, #5]
 8011750:	f88d 2006 	strb.w	r2, [sp, #6]
 8011754:	f001 fc68 	bl	8013028 <gd32_i2c_set_address(unsigned char)>
 8011758:	6860      	ldr	r0, [r4, #4]
 801175a:	f001 fc5d 	bl	8013018 <gd32_i2c_set_baudrate(unsigned int)>
 801175e:	2103      	movs	r1, #3
 8011760:	a801      	add	r0, sp, #4
 8011762:	f001 fc67 	bl	8013034 <gd32_i2c_write(char const*, unsigned int)>
 8011766:	b002      	add	sp, #8
 8011768:	bd10      	pop	{r4, pc}

0801176a <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 801176a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801176c:	460d      	mov	r5, r1
 801176e:	4604      	mov	r4, r0
 8011770:	f001 fc5a 	bl	8013028 <gd32_i2c_set_address(unsigned char)>
 8011774:	4628      	mov	r0, r5
 8011776:	f001 fc4f 	bl	8013018 <gd32_i2c_set_baudrate(unsigned int)>
 801177a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801177e:	2b07      	cmp	r3, #7
 8011780:	d902      	bls.n	8011788 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8011782:	3c50      	subs	r4, #80	; 0x50
 8011784:	2c0f      	cmp	r4, #15
 8011786:	d809      	bhi.n	801179c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8011788:	2101      	movs	r1, #1
 801178a:	f10d 0007 	add.w	r0, sp, #7
 801178e:	f001 fcb7 	bl	8013100 <gd32_i2c_read(char*, unsigned int)>
 8011792:	fab0 f080 	clz	r0, r0
 8011796:	0940      	lsrs	r0, r0, #5
 8011798:	b003      	add	sp, #12
 801179a:	bd30      	pop	{r4, r5, pc}
 801179c:	2100      	movs	r1, #0
 801179e:	4608      	mov	r0, r1
 80117a0:	f001 fc48 	bl	8013034 <gd32_i2c_write(char const*, unsigned int)>
 80117a4:	e7f5      	b.n	8011792 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

080117a6 <Display::Detect7Segment()>:
 80117a6:	b538      	push	{r3, r4, r5, lr}
 80117a8:	68c1      	ldr	r1, [r0, #12]
 80117aa:	4604      	mov	r4, r0
 80117ac:	7a00      	ldrb	r0, [r0, #8]
 80117ae:	f7ff ffdc 	bl	801176a <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 80117b2:	7460      	strb	r0, [r4, #17]
 80117b4:	b170      	cbz	r0, 80117d4 <Display::Detect7Segment()+0x2e>
 80117b6:	2200      	movs	r2, #0
 80117b8:	f104 0508 	add.w	r5, r4, #8
 80117bc:	4611      	mov	r1, r2
 80117be:	4628      	mov	r0, r5
 80117c0:	f7ff ffbe 	bl	8011740 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80117c4:	7c63      	ldrb	r3, [r4, #17]
 80117c6:	b12b      	cbz	r3, 80117d4 <Display::Detect7Segment()+0x2e>
 80117c8:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 80117cc:	2112      	movs	r1, #18
 80117ce:	4628      	mov	r0, r5
 80117d0:	f7ff ffb6 	bl	8011740 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80117d4:	bd38      	pop	{r3, r4, r5, pc}

080117d6 <Display::Detect(display::Type)>:
 80117d6:	2902      	cmp	r1, #2
 80117d8:	b538      	push	{r3, r4, r5, lr}
 80117da:	4604      	mov	r4, r0
 80117dc:	d014      	beq.n	8011808 <Display::Detect(display::Type)+0x32>
 80117de:	2904      	cmp	r1, #4
 80117e0:	d01b      	beq.n	801181a <Display::Detect(display::Type)+0x44>
 80117e2:	69a0      	ldr	r0, [r4, #24]
 80117e4:	b168      	cbz	r0, 8011802 <Display::Detect(display::Type)+0x2c>
 80117e6:	6803      	ldr	r3, [r0, #0]
 80117e8:	689b      	ldr	r3, [r3, #8]
 80117ea:	4798      	blx	r3
 80117ec:	4603      	mov	r3, r0
 80117ee:	69a0      	ldr	r0, [r4, #24]
 80117f0:	b9ab      	cbnz	r3, 801181e <Display::Detect(display::Type)+0x48>
 80117f2:	b110      	cbz	r0, 80117fa <Display::Detect(display::Type)+0x24>
 80117f4:	6803      	ldr	r3, [r0, #0]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	4798      	blx	r3
 80117fa:	2300      	movs	r3, #0
 80117fc:	61a3      	str	r3, [r4, #24]
 80117fe:	2304      	movs	r3, #4
 8011800:	6023      	str	r3, [r4, #0]
 8011802:	2300      	movs	r3, #0
 8011804:	6163      	str	r3, [r4, #20]
 8011806:	e010      	b.n	801182a <Display::Detect(display::Type)+0x54>
 8011808:	2018      	movs	r0, #24
 801180a:	f000 fbcf 	bl	8011fac <operator new(unsigned int)>
 801180e:	4605      	mov	r5, r0
 8011810:	2100      	movs	r1, #0
 8011812:	f000 f89d 	bl	8011950 <Ssd1306::Ssd1306(TOledPanel)>
 8011816:	61a5      	str	r5, [r4, #24]
 8011818:	e7e3      	b.n	80117e2 <Display::Detect(display::Type)+0xc>
 801181a:	6001      	str	r1, [r0, #0]
 801181c:	e7e1      	b.n	80117e2 <Display::Detect(display::Type)+0xc>
 801181e:	6803      	ldr	r3, [r0, #0]
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	4798      	blx	r3
 8011824:	69a3      	ldr	r3, [r4, #24]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d0eb      	beq.n	8011802 <Display::Detect(display::Type)+0x2c>
 801182a:	bd38      	pop	{r3, r4, r5, pc}

0801182c <Display::Display()>:
 801182c:	2304      	movs	r3, #4
 801182e:	b510      	push	{r4, lr}
 8011830:	6003      	str	r3, [r0, #0]
 8011832:	4b0f      	ldr	r3, [pc, #60]	; (8011870 <Display::Display()+0x44>)
 8011834:	4604      	mov	r4, r0
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	4a0e      	ldr	r2, [pc, #56]	; (8011874 <Display::Display()+0x48>)
 801183a:	6043      	str	r3, [r0, #4]
 801183c:	2321      	movs	r3, #33	; 0x21
 801183e:	7203      	strb	r3, [r0, #8]
 8011840:	4b0d      	ldr	r3, [pc, #52]	; (8011878 <Display::Display()+0x4c>)
 8011842:	2102      	movs	r1, #2
 8011844:	60c3      	str	r3, [r0, #12]
 8011846:	2300      	movs	r3, #0
 8011848:	e9c0 2305 	strd	r2, r3, [r0, #20]
 801184c:	8203      	strh	r3, [r0, #16]
 801184e:	4b0b      	ldr	r3, [pc, #44]	; (801187c <Display::Display()+0x50>)
 8011850:	6018      	str	r0, [r3, #0]
 8011852:	f7ff ffc0 	bl	80117d6 <Display::Detect(display::Type)>
 8011856:	4620      	mov	r0, r4
 8011858:	f7ff ffa5 	bl	80117a6 <Display::Detect7Segment()>
 801185c:	69a3      	ldr	r3, [r4, #24]
 801185e:	b10b      	cbz	r3, 8011864 <Display::Display()+0x38>
 8011860:	f7f6 ff7a 	bl	8008758 <display::timeout::gpio_init()>
 8011864:	69a0      	ldr	r0, [r4, #24]
 8011866:	f7ff ff61 	bl	801172c <Display::PrintInfo() [clone .isra.0]>
 801186a:	4620      	mov	r0, r4
 801186c:	bd10      	pop	{r4, pc}
 801186e:	bf00      	nop
 8011870:	2000a9cc 	andcs	sl, r0, ip, asr #19
 8011874:	000493e0 	andeq	r9, r4, r0, ror #7
 8011878:	00061a80 	andeq	r1, r6, r0, lsl #21
 801187c:	2000a8c4 	andcs	sl, r0, r4, asr #17

08011880 <Ssd1306::~Ssd1306()>:
 8011880:	4770      	bx	lr

08011882 <Ssd1306::SetCursor(unsigned int)>:
 8011882:	4770      	bx	lr

08011884 <Ssd1306::PrintInfo()>:
 8011884:	b410      	push	{r4}
 8011886:	4906      	ldr	r1, [pc, #24]	; (80118a0 <Ssd1306::PrintInfo()+0x1c>)
 8011888:	7c44      	ldrb	r4, [r0, #17]
 801188a:	7903      	ldrb	r3, [r0, #4]
 801188c:	7942      	ldrb	r2, [r0, #5]
 801188e:	4805      	ldr	r0, [pc, #20]	; (80118a4 <Ssd1306::PrintInfo()+0x20>)
 8011890:	2c00      	cmp	r4, #0
 8011892:	bf08      	it	eq
 8011894:	4601      	moveq	r1, r0
 8011896:	4804      	ldr	r0, [pc, #16]	; (80118a8 <Ssd1306::PrintInfo()+0x24>)
 8011898:	bc10      	pop	{r4}
 801189a:	f7f7 bcc7 	b.w	800922c <printf>
 801189e:	bf00      	nop
 80118a0:	08016005 	stmdaeq	r1, {r0, r2, sp, lr}
 80118a4:	0801600c 	stmdaeq	r1, {r2, r3, sp, lr}
 80118a8:	08016014 	stmdaeq	r1, {r2, r4, sp, lr}

080118ac <Ssd1306::~Ssd1306()>:
 80118ac:	b510      	push	{r4, lr}
 80118ae:	4604      	mov	r4, r0
 80118b0:	f000 fb78 	bl	8011fa4 <operator delete(void*)>
 80118b4:	4620      	mov	r0, r4
 80118b6:	bd10      	pop	{r4, pc}

080118b8 <HAL_I2C::Setup()>:
 80118b8:	b510      	push	{r4, lr}
 80118ba:	4604      	mov	r4, r0
 80118bc:	7800      	ldrb	r0, [r0, #0]
 80118be:	f001 fbb3 	bl	8013028 <gd32_i2c_set_address(unsigned char)>
 80118c2:	6860      	ldr	r0, [r4, #4]
 80118c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118c8:	f001 bba6 	b.w	8013018 <gd32_i2c_set_baudrate(unsigned int)>

080118cc <Ssd1306::PutChar(int)>:
 80118cc:	b510      	push	{r4, lr}
 80118ce:	f1a1 0420 	sub.w	r4, r1, #32
 80118d2:	2c5f      	cmp	r4, #95	; 0x5f
 80118d4:	bf88      	it	hi
 80118d6:	2400      	movhi	r4, #0
 80118d8:	3008      	adds	r0, #8
 80118da:	f7ff ffed 	bl	80118b8 <HAL_I2C::Setup()>
 80118de:	4804      	ldr	r0, [pc, #16]	; (80118f0 <Ssd1306::PutChar(int)+0x24>)
 80118e0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80118e4:	4420      	add	r0, r4
 80118e6:	2107      	movs	r1, #7
 80118e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118ec:	f001 bba2 	b.w	8013034 <gd32_i2c_write(char const*, unsigned int)>
 80118f0:	08016028 	stmdaeq	r1, {r3, r5, sp, lr}

080118f4 <Ssd1306::PutString(char const*)>:
 80118f4:	b538      	push	{r3, r4, r5, lr}
 80118f6:	4605      	mov	r5, r0
 80118f8:	1e4c      	subs	r4, r1, #1
 80118fa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80118fe:	b901      	cbnz	r1, 8011902 <Ssd1306::PutString(char const*)+0xe>
 8011900:	bd38      	pop	{r3, r4, r5, pc}
 8011902:	4628      	mov	r0, r5
 8011904:	f7ff ffe2 	bl	80118cc <Ssd1306::PutChar(int)>
 8011908:	e7f7      	b.n	80118fa <Ssd1306::PutString(char const*)+0x6>

0801190a <Ssd1306::Text(char const*, unsigned int)>:
 801190a:	b570      	push	{r4, r5, r6, lr}
 801190c:	7903      	ldrb	r3, [r0, #4]
 801190e:	4605      	mov	r5, r0
 8011910:	460c      	mov	r4, r1
 8011912:	4293      	cmp	r3, r2
 8011914:	bf94      	ite	ls
 8011916:	18ce      	addls	r6, r1, r3
 8011918:	188e      	addhi	r6, r1, r2
 801191a:	42b4      	cmp	r4, r6
 801191c:	d100      	bne.n	8011920 <Ssd1306::Text(char const*, unsigned int)+0x16>
 801191e:	bd70      	pop	{r4, r5, r6, pc}
 8011920:	4628      	mov	r0, r5
 8011922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011926:	f7ff ffd1 	bl	80118cc <Ssd1306::PutChar(int)>
 801192a:	e7f6      	b.n	801191a <Ssd1306::Text(char const*, unsigned int)+0x10>

0801192c <Ssd1306::InitMembers()>:
 801192c:	7c03      	ldrb	r3, [r0, #16]
 801192e:	b14b      	cbz	r3, 8011944 <Ssd1306::InitMembers()+0x18>
 8011930:	3b01      	subs	r3, #1
 8011932:	2b01      	cmp	r3, #1
 8011934:	d909      	bls.n	801194a <Ssd1306::InitMembers()+0x1e>
 8011936:	2308      	movs	r3, #8
 8011938:	2204      	movs	r2, #4
 801193a:	2115      	movs	r1, #21
 801193c:	7143      	strb	r3, [r0, #5]
 801193e:	7101      	strb	r1, [r0, #4]
 8011940:	6142      	str	r2, [r0, #20]
 8011942:	4770      	bx	lr
 8011944:	2308      	movs	r3, #8
 8011946:	461a      	mov	r2, r3
 8011948:	e7f7      	b.n	801193a <Ssd1306::InitMembers()+0xe>
 801194a:	2304      	movs	r3, #4
 801194c:	e7fb      	b.n	8011946 <Ssd1306::InitMembers()+0x1a>
	...

08011950 <Ssd1306::Ssd1306(TOledPanel)>:
 8011950:	4a08      	ldr	r2, [pc, #32]	; (8011974 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8011952:	b508      	push	{r3, lr}
 8011954:	6002      	str	r2, [r0, #0]
 8011956:	227f      	movs	r2, #127	; 0x7f
 8011958:	80c2      	strh	r2, [r0, #6]
 801195a:	223c      	movs	r2, #60	; 0x3c
 801195c:	7202      	strb	r2, [r0, #8]
 801195e:	4a06      	ldr	r2, [pc, #24]	; (8011978 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8011960:	7401      	strb	r1, [r0, #16]
 8011962:	60c2      	str	r2, [r0, #12]
 8011964:	2200      	movs	r2, #0
 8011966:	7442      	strb	r2, [r0, #17]
 8011968:	4a04      	ldr	r2, [pc, #16]	; (801197c <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 801196a:	6010      	str	r0, [r2, #0]
 801196c:	f7ff ffde 	bl	801192c <Ssd1306::InitMembers()>
 8011970:	bd08      	pop	{r3, pc}
 8011972:	bf00      	nop
 8011974:	08016300 	stmdaeq	r1, {r8, r9, sp, lr}
 8011978:	00061a80 	andeq	r1, r6, r0, lsl #21
 801197c:	2000a950 	andcs	sl, r0, r0, asr r9

08011980 <Ssd1306::SendCommand(unsigned char)>:
 8011980:	2300      	movs	r3, #0
 8011982:	b507      	push	{r0, r1, r2, lr}
 8011984:	3008      	adds	r0, #8
 8011986:	f88d 3004 	strb.w	r3, [sp, #4]
 801198a:	f88d 1005 	strb.w	r1, [sp, #5]
 801198e:	f7ff ff93 	bl	80118b8 <HAL_I2C::Setup()>
 8011992:	2102      	movs	r1, #2
 8011994:	a801      	add	r0, sp, #4
 8011996:	f001 fb4d 	bl	8013034 <gd32_i2c_write(char const*, unsigned int)>
 801199a:	b003      	add	sp, #12
 801199c:	f85d fb04 	ldr.w	pc, [sp], #4

080119a0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 80119a0:	2914      	cmp	r1, #20
 80119a2:	b570      	push	{r4, r5, r6, lr}
 80119a4:	4605      	mov	r5, r0
 80119a6:	4616      	mov	r6, r2
 80119a8:	d81c      	bhi.n	80119e4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80119aa:	7943      	ldrb	r3, [r0, #5]
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d919      	bls.n	80119e4 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80119b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80119b4:	7c43      	ldrb	r3, [r0, #17]
 80119b6:	004c      	lsls	r4, r1, #1
 80119b8:	b2e4      	uxtb	r4, r4
 80119ba:	b10b      	cbz	r3, 80119c0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 80119bc:	3404      	adds	r4, #4
 80119be:	b2e4      	uxtb	r4, r4
 80119c0:	4628      	mov	r0, r5
 80119c2:	f004 010e 	and.w	r1, r4, #14
 80119c6:	f7ff ffdb 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 80119ca:	0921      	lsrs	r1, r4, #4
 80119cc:	4628      	mov	r0, r5
 80119ce:	f041 0110 	orr.w	r1, r1, #16
 80119d2:	f7ff ffd5 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 80119d6:	4628      	mov	r0, r5
 80119d8:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 80119dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119e0:	f7ff bfce 	b.w	8011980 <Ssd1306::SendCommand(unsigned char)>
 80119e4:	bd70      	pop	{r4, r5, r6, pc}

080119e6 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 80119e6:	b570      	push	{r4, r5, r6, lr}
 80119e8:	4604      	mov	r4, r0
 80119ea:	4615      	mov	r5, r2
 80119ec:	461e      	mov	r6, r3
 80119ee:	b171      	cbz	r1, 8011a0e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80119f0:	7943      	ldrb	r3, [r0, #5]
 80119f2:	428b      	cmp	r3, r1
 80119f4:	d30b      	bcc.n	8011a0e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80119f6:	3901      	subs	r1, #1
 80119f8:	b2ca      	uxtb	r2, r1
 80119fa:	2100      	movs	r1, #0
 80119fc:	f7ff ffd0 	bl	80119a0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8011a00:	4632      	mov	r2, r6
 8011a02:	4629      	mov	r1, r5
 8011a04:	4620      	mov	r0, r4
 8011a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a0a:	f7ff bf7e 	b.w	801190a <Ssd1306::Text(char const*, unsigned int)>
 8011a0e:	bd70      	pop	{r4, r5, r6, pc}

08011a10 <Ssd1306::ClearLine(unsigned char)>:
 8011a10:	b538      	push	{r3, r4, r5, lr}
 8011a12:	4605      	mov	r5, r0
 8011a14:	b1b9      	cbz	r1, 8011a46 <Ssd1306::ClearLine(unsigned char)+0x36>
 8011a16:	7943      	ldrb	r3, [r0, #5]
 8011a18:	428b      	cmp	r3, r1
 8011a1a:	d314      	bcc.n	8011a46 <Ssd1306::ClearLine(unsigned char)+0x36>
 8011a1c:	3901      	subs	r1, #1
 8011a1e:	b2cc      	uxtb	r4, r1
 8011a20:	4622      	mov	r2, r4
 8011a22:	2100      	movs	r1, #0
 8011a24:	f7ff ffbc 	bl	80119a0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8011a28:	f105 0008 	add.w	r0, r5, #8
 8011a2c:	f7ff ff44 	bl	80118b8 <HAL_I2C::Setup()>
 8011a30:	2181      	movs	r1, #129	; 0x81
 8011a32:	4805      	ldr	r0, [pc, #20]	; (8011a48 <Ssd1306::ClearLine(unsigned char)+0x38>)
 8011a34:	f001 fafe 	bl	8013034 <gd32_i2c_write(char const*, unsigned int)>
 8011a38:	4622      	mov	r2, r4
 8011a3a:	4628      	mov	r0, r5
 8011a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a40:	2100      	movs	r1, #0
 8011a42:	f7ff bfad 	b.w	80119a0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8011a46:	bd38      	pop	{r3, r4, r5, pc}
 8011a48:	2000a8c8 	andcs	sl, r0, r8, asr #17

08011a4c <Ssd1306::SetSleep(bool)>:
 8011a4c:	b111      	cbz	r1, 8011a54 <Ssd1306::SetSleep(bool)+0x8>
 8011a4e:	21ae      	movs	r1, #174	; 0xae
 8011a50:	f7ff bf96 	b.w	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011a54:	21af      	movs	r1, #175	; 0xaf
 8011a56:	e7fb      	b.n	8011a50 <Ssd1306::SetSleep(bool)+0x4>

08011a58 <Ssd1306::SetContrast(unsigned char)>:
 8011a58:	b538      	push	{r3, r4, r5, lr}
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	460d      	mov	r5, r1
 8011a5e:	7181      	strb	r1, [r0, #6]
 8011a60:	2181      	movs	r1, #129	; 0x81
 8011a62:	f7ff ff8d 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011a66:	4629      	mov	r1, r5
 8011a68:	4620      	mov	r0, r4
 8011a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a6e:	f7ff bf87 	b.w	8011980 <Ssd1306::SendCommand(unsigned char)>

08011a72 <Ssd1306::SetFlipVertically(bool)>:
 8011a72:	b510      	push	{r4, lr}
 8011a74:	4604      	mov	r4, r0
 8011a76:	71c1      	strb	r1, [r0, #7]
 8011a78:	b141      	cbz	r1, 8011a8c <Ssd1306::SetFlipVertically(bool)+0x1a>
 8011a7a:	21c0      	movs	r1, #192	; 0xc0
 8011a7c:	f7ff ff80 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011a80:	21a0      	movs	r1, #160	; 0xa0
 8011a82:	4620      	mov	r0, r4
 8011a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a88:	f7ff bf7a 	b.w	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011a8c:	21c8      	movs	r1, #200	; 0xc8
 8011a8e:	f7ff ff77 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011a92:	21a1      	movs	r1, #161	; 0xa1
 8011a94:	e7f5      	b.n	8011a82 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08011a98 <Ssd1306::CheckSH1106()>:
 8011a98:	b570      	push	{r4, r5, r6, lr}
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	b086      	sub	sp, #24
 8011a9e:	2100      	movs	r1, #0
 8011aa0:	f7ff ff6e 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011aa4:	2190      	movs	r1, #144	; 0x90
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	f7ff ff6a 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011aac:	21b0      	movs	r1, #176	; 0xb0
 8011aae:	4620      	mov	r0, r4
 8011ab0:	f7ff ff66 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011ab4:	4b22      	ldr	r3, [pc, #136]	; (8011b40 <Ssd1306::CheckSH1106()+0xa8>)
 8011ab6:	f104 0608 	add.w	r6, r4, #8
 8011aba:	6818      	ldr	r0, [r3, #0]
 8011abc:	791b      	ldrb	r3, [r3, #4]
 8011abe:	ad02      	add	r5, sp, #8
 8011ac0:	9002      	str	r0, [sp, #8]
 8011ac2:	4630      	mov	r0, r6
 8011ac4:	712b      	strb	r3, [r5, #4]
 8011ac6:	f7ff fef7 	bl	80118b8 <HAL_I2C::Setup()>
 8011aca:	2105      	movs	r1, #5
 8011acc:	4628      	mov	r0, r5
 8011ace:	f001 fab1 	bl	8013034 <gd32_i2c_write(char const*, unsigned int)>
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	f7ff ff53 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011ada:	2190      	movs	r1, #144	; 0x90
 8011adc:	4620      	mov	r0, r4
 8011ade:	f7ff ff4f 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011ae2:	21b0      	movs	r1, #176	; 0xb0
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	f7ff ff4b 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011aea:	2300      	movs	r3, #0
 8011aec:	9304      	str	r3, [sp, #16]
 8011aee:	f88d 3014 	strb.w	r3, [sp, #20]
 8011af2:	2340      	movs	r3, #64	; 0x40
 8011af4:	4630      	mov	r0, r6
 8011af6:	f88d 3007 	strb.w	r3, [sp, #7]
 8011afa:	f7ff fedd 	bl	80118b8 <HAL_I2C::Setup()>
 8011afe:	2101      	movs	r1, #1
 8011b00:	f10d 0007 	add.w	r0, sp, #7
 8011b04:	f001 fa96 	bl	8013034 <gd32_i2c_write(char const*, unsigned int)>
 8011b08:	4630      	mov	r0, r6
 8011b0a:	f7ff fed5 	bl	80118b8 <HAL_I2C::Setup()>
 8011b0e:	2105      	movs	r1, #5
 8011b10:	a804      	add	r0, sp, #16
 8011b12:	f001 faf5 	bl	8013100 <gd32_i2c_read(char*, unsigned int)>
 8011b16:	2201      	movs	r2, #1
 8011b18:	5cab      	ldrb	r3, [r5, r2]
 8011b1a:	a904      	add	r1, sp, #16
 8011b1c:	3201      	adds	r2, #1
 8011b1e:	4411      	add	r1, r2
 8011b20:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8011b24:	428b      	cmp	r3, r1
 8011b26:	d006      	beq.n	8011b36 <Ssd1306::CheckSH1106()+0x9e>
 8011b28:	1a5b      	subs	r3, r3, r1
 8011b2a:	fab3 f383 	clz	r3, r3
 8011b2e:	095b      	lsrs	r3, r3, #5
 8011b30:	7463      	strb	r3, [r4, #17]
 8011b32:	b006      	add	sp, #24
 8011b34:	bd70      	pop	{r4, r5, r6, pc}
 8011b36:	2a05      	cmp	r2, #5
 8011b38:	d1ee      	bne.n	8011b18 <Ssd1306::CheckSH1106()+0x80>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	e7f5      	b.n	8011b2a <Ssd1306::CheckSH1106()+0x92>
 8011b3e:	bf00      	nop
 8011b40:	08016020 	stmdaeq	r1, {r5, sp, lr}

08011b44 <Ssd1306::Cls()>:
 8011b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b48:	4604      	mov	r4, r0
 8011b4a:	2600      	movs	r6, #0
 8011b4c:	7c45      	ldrb	r5, [r0, #17]
 8011b4e:	00ad      	lsls	r5, r5, #2
 8011b50:	b2ed      	uxtb	r5, r5
 8011b52:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8011b56:	f045 0810 	orr.w	r8, r5, #16
 8011b5a:	b2ff      	uxtb	r7, r7
 8011b5c:	6963      	ldr	r3, [r4, #20]
 8011b5e:	4629      	mov	r1, r5
 8011b60:	42b3      	cmp	r3, r6
 8011b62:	4620      	mov	r0, r4
 8011b64:	d80b      	bhi.n	8011b7e <Ssd1306::Cls()+0x3a>
 8011b66:	f7ff ff0b 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011b6a:	4641      	mov	r1, r8
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	f7ff ff07 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011b72:	4620      	mov	r0, r4
 8011b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b78:	21b0      	movs	r1, #176	; 0xb0
 8011b7a:	f7ff bf01 	b.w	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011b7e:	f7ff feff 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011b82:	4641      	mov	r1, r8
 8011b84:	4620      	mov	r0, r4
 8011b86:	f7ff fefb 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011b8a:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8011b8e:	4620      	mov	r0, r4
 8011b90:	b2c9      	uxtb	r1, r1
 8011b92:	f7ff fef5 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011b96:	7c23      	ldrb	r3, [r4, #16]
 8011b98:	b123      	cbz	r3, 8011ba4 <Ssd1306::Cls()+0x60>
 8011b9a:	3b01      	subs	r3, #1
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d901      	bls.n	8011ba4 <Ssd1306::Cls()+0x60>
 8011ba0:	3601      	adds	r6, #1
 8011ba2:	e7db      	b.n	8011b5c <Ssd1306::Cls()+0x18>
 8011ba4:	f104 0008 	add.w	r0, r4, #8
 8011ba8:	f7ff fe86 	bl	80118b8 <HAL_I2C::Setup()>
 8011bac:	4639      	mov	r1, r7
 8011bae:	4802      	ldr	r0, [pc, #8]	; (8011bb8 <Ssd1306::Cls()+0x74>)
 8011bb0:	f001 fa40 	bl	8013034 <gd32_i2c_write(char const*, unsigned int)>
 8011bb4:	e7f4      	b.n	8011ba0 <Ssd1306::Cls()+0x5c>
 8011bb6:	bf00      	nop
 8011bb8:	2000a8c8 	andcs	sl, r0, r8, asr #17

08011bbc <Ssd1306::Start()>:
 8011bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011bbe:	7a04      	ldrb	r4, [r0, #8]
 8011bc0:	68c6      	ldr	r6, [r0, #12]
 8011bc2:	4605      	mov	r5, r0
 8011bc4:	4620      	mov	r0, r4
 8011bc6:	f001 fa2f 	bl	8013028 <gd32_i2c_set_address(unsigned char)>
 8011bca:	4630      	mov	r0, r6
 8011bcc:	f001 fa24 	bl	8013018 <gd32_i2c_set_baudrate(unsigned int)>
 8011bd0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011bd4:	2b07      	cmp	r3, #7
 8011bd6:	d902      	bls.n	8011bde <Ssd1306::Start()+0x22>
 8011bd8:	3c50      	subs	r4, #80	; 0x50
 8011bda:	2c0f      	cmp	r4, #15
 8011bdc:	d80f      	bhi.n	8011bfe <Ssd1306::Start()+0x42>
 8011bde:	2101      	movs	r1, #1
 8011be0:	f10d 0007 	add.w	r0, sp, #7
 8011be4:	f001 fa8c 	bl	8013100 <gd32_i2c_read(char*, unsigned int)>
 8011be8:	fab0 f480 	clz	r4, r0
 8011bec:	0964      	lsrs	r4, r4, #5
 8011bee:	b35c      	cbz	r4, 8011c48 <Ssd1306::Start()+0x8c>
 8011bf0:	7c2e      	ldrb	r6, [r5, #16]
 8011bf2:	b14e      	cbz	r6, 8011c08 <Ssd1306::Start()+0x4c>
 8011bf4:	3e01      	subs	r6, #1
 8011bf6:	2e01      	cmp	r6, #1
 8011bf8:	d929      	bls.n	8011c4e <Ssd1306::Start()+0x92>
 8011bfa:	2400      	movs	r4, #0
 8011bfc:	e024      	b.n	8011c48 <Ssd1306::Start()+0x8c>
 8011bfe:	2100      	movs	r1, #0
 8011c00:	4608      	mov	r0, r1
 8011c02:	f001 fa17 	bl	8013034 <gd32_i2c_write(char const*, unsigned int)>
 8011c06:	e7ef      	b.n	8011be8 <Ssd1306::Start()+0x2c>
 8011c08:	4f16      	ldr	r7, [pc, #88]	; (8011c64 <Ssd1306::Start()+0xa8>)
 8011c0a:	4628      	mov	r0, r5
 8011c0c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011c10:	3601      	adds	r6, #1
 8011c12:	f7ff feb5 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011c16:	2e18      	cmp	r6, #24
 8011c18:	d1f7      	bne.n	8011c0a <Ssd1306::Start()+0x4e>
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	4a12      	ldr	r2, [pc, #72]	; (8011c68 <Ssd1306::Start()+0xac>)
 8011c1e:	4618      	mov	r0, r3
 8011c20:	4611      	mov	r1, r2
 8011c22:	3301      	adds	r3, #1
 8011c24:	2b86      	cmp	r3, #134	; 0x86
 8011c26:	f802 0b01 	strb.w	r0, [r2], #1
 8011c2a:	d1fa      	bne.n	8011c22 <Ssd1306::Start()+0x66>
 8011c2c:	2340      	movs	r3, #64	; 0x40
 8011c2e:	4628      	mov	r0, r5
 8011c30:	700b      	strb	r3, [r1, #0]
 8011c32:	f7ff ff31 	bl	8011a98 <Ssd1306::CheckSH1106()>
 8011c36:	4628      	mov	r0, r5
 8011c38:	f7ff ff84 	bl	8011b44 <Ssd1306::Cls()>
 8011c3c:	21af      	movs	r1, #175	; 0xaf
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f7ff fe9e 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011c44:	2301      	movs	r3, #1
 8011c46:	71eb      	strb	r3, [r5, #7]
 8011c48:	4620      	mov	r0, r4
 8011c4a:	b003      	add	sp, #12
 8011c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c4e:	2600      	movs	r6, #0
 8011c50:	4f06      	ldr	r7, [pc, #24]	; (8011c6c <Ssd1306::Start()+0xb0>)
 8011c52:	4628      	mov	r0, r5
 8011c54:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011c58:	3601      	adds	r6, #1
 8011c5a:	f7ff fe91 	bl	8011980 <Ssd1306::SendCommand(unsigned char)>
 8011c5e:	2e18      	cmp	r6, #24
 8011c60:	d1f7      	bne.n	8011c52 <Ssd1306::Start()+0x96>
 8011c62:	e7da      	b.n	8011c1a <Ssd1306::Start()+0x5e>
 8011c64:	080162e0 	stmdaeq	r1, {r5, r6, r7, r9, sp, lr}
 8011c68:	2000a8c8 	andcs	sl, r0, r8, asr #17
 8011c6c:	080162c8 	stmdaeq	r1, {r3, r6, r7, r9, sp, lr}

08011c70 <console_putc>:
 8011c70:	f000 bb96 	b.w	80123a0 <uart0_putc>

08011c74 <console_puts>:
 8011c74:	f000 bbb4 	b.w	80123e0 <uart0_puts>

08011c78 <console_set_fg_color>:
 8011c78:	2807      	cmp	r0, #7
 8011c7a:	d810      	bhi.n	8011c9e <console_set_fg_color+0x26>
 8011c7c:	e8df f000 	tbb	[pc, r0]
 8011c80:	0b090704 	bleq	8253898 <__exidx_end+0x23d464>
 8011c84:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8011c50 <Ssd1306::Start()+0x94>
 8011c88:	4806      	ldr	r0, [pc, #24]	; (8011ca4 <console_set_fg_color+0x2c>)
 8011c8a:	f000 bba9 	b.w	80123e0 <uart0_puts>
 8011c8e:	4806      	ldr	r0, [pc, #24]	; (8011ca8 <console_set_fg_color+0x30>)
 8011c90:	e7fb      	b.n	8011c8a <console_set_fg_color+0x12>
 8011c92:	4806      	ldr	r0, [pc, #24]	; (8011cac <console_set_fg_color+0x34>)
 8011c94:	e7f9      	b.n	8011c8a <console_set_fg_color+0x12>
 8011c96:	4806      	ldr	r0, [pc, #24]	; (8011cb0 <console_set_fg_color+0x38>)
 8011c98:	e7f7      	b.n	8011c8a <console_set_fg_color+0x12>
 8011c9a:	4806      	ldr	r0, [pc, #24]	; (8011cb4 <console_set_fg_color+0x3c>)
 8011c9c:	e7f5      	b.n	8011c8a <console_set_fg_color+0x12>
 8011c9e:	4806      	ldr	r0, [pc, #24]	; (8011cb8 <console_set_fg_color+0x40>)
 8011ca0:	e7f3      	b.n	8011c8a <console_set_fg_color+0x12>
 8011ca2:	bf00      	nop
 8011ca4:	0801633e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, sp, lr}
 8011ca8:	08016344 	stmdaeq	r1, {r2, r6, r8, r9, sp, lr}
 8011cac:	0801634a 	stmdaeq	r1, {r1, r3, r6, r8, r9, sp, lr}
 8011cb0:	08016350 	stmdaeq	r1, {r4, r6, r8, r9, sp, lr}
 8011cb4:	0801431e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, lr}
 8011cb8:	08016356 	stmdaeq	r1, {r1, r2, r4, r6, r8, r9, sp, lr}

08011cbc <console_error>:
 8011cbc:	b510      	push	{r4, lr}
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	4805      	ldr	r0, [pc, #20]	; (8011cd8 <console_error+0x1c>)
 8011cc2:	f000 fb8d 	bl	80123e0 <uart0_puts>
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	f000 fb8a 	bl	80123e0 <uart0_puts>
 8011ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cd0:	4802      	ldr	r0, [pc, #8]	; (8011cdc <console_error+0x20>)
 8011cd2:	f000 bb85 	b.w	80123e0 <uart0_puts>
 8011cd6:	bf00      	nop
 8011cd8:	08016344 	stmdaeq	r1, {r2, r6, r8, r9, sp, lr}
 8011cdc:	0801431e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, lr}

08011ce0 <console_status>:
 8011ce0:	b510      	push	{r4, lr}
 8011ce2:	460c      	mov	r4, r1
 8011ce4:	b280      	uxth	r0, r0
 8011ce6:	f7ff ffc7 	bl	8011c78 <console_set_fg_color>
 8011cea:	4807      	ldr	r0, [pc, #28]	; (8011d08 <console_status+0x28>)
 8011cec:	f000 fb78 	bl	80123e0 <uart0_puts>
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	f000 fb75 	bl	80123e0 <uart0_puts>
 8011cf6:	200a      	movs	r0, #10
 8011cf8:	f000 fb52 	bl	80123a0 <uart0_putc>
 8011cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d00:	4802      	ldr	r0, [pc, #8]	; (8011d0c <console_status+0x2c>)
 8011d02:	f000 bb6d 	b.w	80123e0 <uart0_puts>
 8011d06:	bf00      	nop
 8011d08:	08016338 	stmdaeq	r1, {r3, r4, r5, r8, r9, sp, lr}
 8011d0c:	0801431e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, lr}

08011d10 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8011d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d14:	4617      	mov	r7, r2
 8011d16:	461e      	mov	r6, r3
 8011d18:	4d14      	ldr	r5, [pc, #80]	; (8011d6c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8011d1a:	4b15      	ldr	r3, [pc, #84]	; (8011d70 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8011d1c:	b086      	sub	sp, #24
 8011d1e:	6018      	str	r0, [r3, #0]
 8011d20:	4604      	mov	r4, r0
 8011d22:	f105 0803 	add.w	r8, r5, #3
 8011d26:	2203      	movs	r2, #3
 8011d28:	4628      	mov	r0, r5
 8011d2a:	f000 f9fe 	bl	801212a <memmove>
 8011d2e:	4639      	mov	r1, r7
 8011d30:	220b      	movs	r2, #11
 8011d32:	4640      	mov	r0, r8
 8011d34:	f000 f9f9 	bl	801212a <memmove>
 8011d38:	f105 030e 	add.w	r3, r5, #14
 8011d3c:	4631      	mov	r1, r6
 8011d3e:	2208      	movs	r2, #8
 8011d40:	4618      	mov	r0, r3
 8011d42:	f000 f9f2 	bl	801212a <memmove>
 8011d46:	2308      	movs	r3, #8
 8011d48:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8011d4c:	230b      	movs	r3, #11
 8011d4e:	9302      	str	r3, [sp, #8]
 8011d50:	4b08      	ldr	r3, [pc, #32]	; (8011d74 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8011d52:	9005      	str	r0, [sp, #20]
 8011d54:	e9cd 5300 	strd	r5, r3, [sp]
 8011d58:	213f      	movs	r1, #63	; 0x3f
 8011d5a:	2303      	movs	r3, #3
 8011d5c:	4a06      	ldr	r2, [pc, #24]	; (8011d78 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8011d5e:	4807      	ldr	r0, [pc, #28]	; (8011d7c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8011d60:	f7f7 fa8c 	bl	800927c <snprintf>
 8011d64:	4620      	mov	r0, r4
 8011d66:	b006      	add	sp, #24
 8011d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d6c:	2000a954 	andcs	sl, r0, r4, asr r9
 8011d70:	2000a9ac 	andcs	sl, r0, ip, lsr #19
 8011d74:	080143ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, lr}
 8011d78:	0801635c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, sp, lr}
 8011d7c:	2000a96a 	andcs	sl, r0, sl, ror #18

08011d80 <FirmwareVersion::Print(char const*)>:
 8011d80:	b510      	push	{r4, lr}
 8011d82:	460c      	mov	r4, r1
 8011d84:	4804      	ldr	r0, [pc, #16]	; (8011d98 <FirmwareVersion::Print(char const*)+0x18>)
 8011d86:	f000 fa08 	bl	801219a <puts>
 8011d8a:	b124      	cbz	r4, 8011d96 <FirmwareVersion::Print(char const*)+0x16>
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d92:	f000 ba02 	b.w	801219a <puts>
 8011d96:	bd10      	pop	{r4, pc}
 8011d98:	2000a96a 	andcs	sl, r0, sl, ror #18

08011d9c <LedBlink::LedBlink()>:
 8011d9c:	b538      	push	{r3, r4, r5, lr}
 8011d9e:	2205      	movs	r2, #5
 8011da0:	2300      	movs	r3, #0
 8011da2:	e9c0 3200 	strd	r3, r2, [r0]
 8011da6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8011daa:	6083      	str	r3, [r0, #8]
 8011dac:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8011db0:	6143      	str	r3, [r0, #20]
 8011db2:	4b09      	ldr	r3, [pc, #36]	; (8011dd8 <LedBlink::LedBlink()+0x3c>)
 8011db4:	4d09      	ldr	r5, [pc, #36]	; (8011ddc <LedBlink::LedBlink()+0x40>)
 8011db6:	4604      	mov	r4, r0
 8011db8:	6018      	str	r0, [r3, #0]
 8011dba:	f240 6004 	movw	r0, #1540	; 0x604
 8011dbe:	f000 fd15 	bl	80127ec <rcu_periph_clock_enable>
 8011dc2:	4628      	mov	r0, r5
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	2203      	movs	r2, #3
 8011dc8:	2110      	movs	r1, #16
 8011dca:	f000 fc77 	bl	80126bc <gpio_init>
 8011dce:	2301      	movs	r3, #1
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	616b      	str	r3, [r5, #20]
 8011dd4:	bd38      	pop	{r3, r4, r5, pc}
 8011dd6:	bf00      	nop
 8011dd8:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0
 8011ddc:	40011000 	andmi	r1, r1, r0

08011de0 <LedBlink::SetMode(ledblink::Mode)>:
 8011de0:	6843      	ldr	r3, [r0, #4]
 8011de2:	428b      	cmp	r3, r1
 8011de4:	d02f      	beq.n	8011e46 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8011de6:	6041      	str	r1, [r0, #4]
 8011de8:	2904      	cmp	r1, #4
 8011dea:	d822      	bhi.n	8011e32 <LedBlink::SetMode(ledblink::Mode)+0x52>
 8011dec:	e8df f001 	tbb	[pc, r1]
 8011df0:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8011df4:	23ff001d 	mvnscs	r0, #29
 8011df8:	6003      	str	r3, [r0, #0]
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	2201      	movs	r2, #1
 8011dfe:	60c3      	str	r3, [r0, #12]
 8011e00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011e04:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8011e08:	611a      	str	r2, [r3, #16]
 8011e0a:	6880      	ldr	r0, [r0, #8]
 8011e0c:	b1d8      	cbz	r0, 8011e46 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8011e0e:	6803      	ldr	r3, [r0, #0]
 8011e10:	689b      	ldr	r3, [r3, #8]
 8011e12:	4718      	bx	r3
 8011e14:	2301      	movs	r3, #1
 8011e16:	6003      	str	r3, [r0, #0]
 8011e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011e1c:	60c3      	str	r3, [r0, #12]
 8011e1e:	e7f4      	b.n	8011e0a <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8011e20:	2303      	movs	r3, #3
 8011e22:	6003      	str	r3, [r0, #0]
 8011e24:	f240 134d 	movw	r3, #333	; 0x14d
 8011e28:	e7f8      	b.n	8011e1c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8011e2a:	2305      	movs	r3, #5
 8011e2c:	6003      	str	r3, [r0, #0]
 8011e2e:	23c8      	movs	r3, #200	; 0xc8
 8011e30:	e7f4      	b.n	8011e1c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8011e32:	2300      	movs	r3, #0
 8011e34:	2201      	movs	r2, #1
 8011e36:	6003      	str	r3, [r0, #0]
 8011e38:	60c3      	str	r3, [r0, #12]
 8011e3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011e3e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8011e42:	615a      	str	r2, [r3, #20]
 8011e44:	e7e1      	b.n	8011e0a <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8011e46:	4770      	bx	lr

08011e48 <Hardware::Hardware()>:
 8011e48:	b570      	push	{r4, r5, r6, lr}
 8011e4a:	2400      	movs	r4, #0
 8011e4c:	4b26      	ldr	r3, [pc, #152]	; (8011ee8 <Hardware::Hardware()+0xa0>)
 8011e4e:	b090      	sub	sp, #64	; 0x40
 8011e50:	6004      	str	r4, [r0, #0]
 8011e52:	7104      	strb	r4, [r0, #4]
 8011e54:	6018      	str	r0, [r3, #0]
 8011e56:	4605      	mov	r5, r0
 8011e58:	f7f5 fb52 	bl	8007500 <console_init>
 8011e5c:	f000 fad0 	bl	8012400 <systick_config>
 8011e60:	f001 fb82 	bl	8013568 <udelay_init()>
 8011e64:	f001 fb7e 	bl	8013564 <micros_init()>
 8011e68:	f240 701b 	movw	r0, #1819	; 0x71b
 8011e6c:	f000 fcbe 	bl	80127ec <rcu_periph_clock_enable>
 8011e70:	f240 701c 	movw	r0, #1820	; 0x71c
 8011e74:	f000 fcba 	bl	80127ec <rcu_periph_clock_enable>
 8011e78:	4e1c      	ldr	r6, [pc, #112]	; (8011eec <Hardware::Hardware()+0xa4>)
 8011e7a:	f000 fcaf 	bl	80127dc <pmu_backup_write_enable>
 8011e7e:	f000 fb5d 	bl	801253c <bkp_deinit>
 8011e82:	4621      	mov	r1, r4
 8011e84:	2002      	movs	r0, #2
 8011e86:	f000 fb61 	bl	801254c <bkp_data_write>
 8011e8a:	f240 7004 	movw	r0, #1796	; 0x704
 8011e8e:	f000 fcad 	bl	80127ec <rcu_periph_clock_enable>
 8011e92:	4630      	mov	r0, r6
 8011e94:	f000 fe08 	bl	8012aa8 <timer_deinit>
 8011e98:	236b      	movs	r3, #107	; 0x6b
 8011e9a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ea2:	a903      	add	r1, sp, #12
 8011ea4:	4630      	mov	r0, r6
 8011ea6:	9305      	str	r3, [sp, #20]
 8011ea8:	f000 fe60 	bl	8012b6c <timer_init>
 8011eac:	4630      	mov	r0, r6
 8011eae:	f000 feb5 	bl	8012c1c <timer_enable>
 8011eb2:	f001 f823 	bl	8012efc <gd32_adc_init()>
 8011eb6:	2213      	movs	r2, #19
 8011eb8:	2302      	movs	r3, #2
 8011eba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011ebe:	237a      	movs	r3, #122	; 0x7a
 8011ec0:	a807      	add	r0, sp, #28
 8011ec2:	930c      	str	r3, [sp, #48]	; 0x30
 8011ec4:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8011ec8:	9407      	str	r4, [sp, #28]
 8011eca:	940f      	str	r4, [sp, #60]	; 0x3c
 8011ecc:	f000 f9be 	bl	801224c <mktime>
 8011ed0:	4621      	mov	r1, r4
 8011ed2:	e9cd 0401 	strd	r0, r4, [sp, #4]
 8011ed6:	a801      	add	r0, sp, #4
 8011ed8:	f000 fa2e 	bl	8012338 <settimeofday>
 8011edc:	f001 f868 	bl	8012fb0 <gd32_i2c_begin()>
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	b010      	add	sp, #64	; 0x40
 8011ee4:	bd70      	pop	{r4, r5, r6, pc}
 8011ee6:	bf00      	nop
 8011ee8:	2000a9b4 			; <UNDEFINED> instruction: 0x2000a9b4
 8011eec:	40001000 	andmi	r1, r0, r0

08011ef0 <Hardware::GetUuid(unsigned char*)>:
 8011ef0:	4a0c      	ldr	r2, [pc, #48]	; (8011f24 <Hardware::GetUuid(unsigned char*)+0x34>)
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8011ef8:	9300      	str	r3, [sp, #0]
 8011efa:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 8011efe:	9001      	str	r0, [sp, #4]
 8011f00:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 8011f04:	4403      	add	r3, r0
 8011f06:	4413      	add	r3, r2
 8011f08:	9202      	str	r2, [sp, #8]
 8011f0a:	466a      	mov	r2, sp
 8011f0c:	9303      	str	r3, [sp, #12]
 8011f0e:	1e4b      	subs	r3, r1, #1
 8011f10:	310f      	adds	r1, #15
 8011f12:	428b      	cmp	r3, r1
 8011f14:	d101      	bne.n	8011f1a <Hardware::GetUuid(unsigned char*)+0x2a>
 8011f16:	b004      	add	sp, #16
 8011f18:	4770      	bx	lr
 8011f1a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011f1e:	f803 0f01 	strb.w	r0, [r3, #1]!
 8011f22:	e7f6      	b.n	8011f12 <Hardware::GetUuid(unsigned char*)+0x22>
 8011f24:	1ffff000 	svcne	0x00fff000

08011f28 <Hardware::Reboot()>:
 8011f28:	b508      	push	{r3, lr}
 8011f2a:	6803      	ldr	r3, [r0, #0]
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	b153      	cbz	r3, 8011f46 <Hardware::Reboot()+0x1e>
 8011f30:	2300      	movs	r3, #0
 8011f32:	2104      	movs	r1, #4
 8011f34:	7103      	strb	r3, [r0, #4]
 8011f36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011f3a:	f000 fb95 	bl	8012668 <fwdgt_config>
 8011f3e:	6820      	ldr	r0, [r4, #0]
 8011f40:	6803      	ldr	r3, [r0, #0]
 8011f42:	689b      	ldr	r3, [r3, #8]
 8011f44:	4798      	blx	r3
 8011f46:	2102      	movs	r1, #2
 8011f48:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011f4c:	f000 fb8c 	bl	8012668 <fwdgt_config>
 8011f50:	2801      	cmp	r0, #1
 8011f52:	bf0c      	ite	eq
 8011f54:	2301      	moveq	r3, #1
 8011f56:	2300      	movne	r3, #0
 8011f58:	7123      	strb	r3, [r4, #4]
 8011f5a:	d101      	bne.n	8011f60 <Hardware::Reboot()+0x38>
 8011f5c:	f000 fb74 	bl	8012648 <fwdgt_enable>
 8011f60:	2208      	movs	r2, #8
 8011f62:	4b0d      	ldr	r3, [pc, #52]	; (8011f98 <Hardware::Reboot()+0x70>)
 8011f64:	2501      	movs	r5, #1
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	480c      	ldr	r0, [pc, #48]	; (8011f9c <Hardware::Reboot()+0x74>)
 8011f6a:	601a      	str	r2, [r3, #0]
 8011f6c:	227d      	movs	r2, #125	; 0x7d
 8011f6e:	490c      	ldr	r1, [pc, #48]	; (8011fa0 <Hardware::Reboot()+0x78>)
 8011f70:	60da      	str	r2, [r3, #12]
 8011f72:	68dc      	ldr	r4, [r3, #12]
 8011f74:	b904      	cbnz	r4, 8011f78 <Hardware::Reboot()+0x50>
 8011f76:	e7fe      	b.n	8011f76 <Hardware::Reboot()+0x4e>
 8011f78:	6802      	ldr	r2, [r0, #0]
 8011f7a:	695e      	ldr	r6, [r3, #20]
 8011f7c:	1b92      	subs	r2, r2, r6
 8011f7e:	4294      	cmp	r4, r2
 8011f80:	d8f8      	bhi.n	8011f74 <Hardware::Reboot()+0x4c>
 8011f82:	6802      	ldr	r2, [r0, #0]
 8011f84:	615a      	str	r2, [r3, #20]
 8011f86:	691a      	ldr	r2, [r3, #16]
 8011f88:	2a01      	cmp	r2, #1
 8011f8a:	f082 0401 	eor.w	r4, r2, #1
 8011f8e:	611c      	str	r4, [r3, #16]
 8011f90:	bf14      	ite	ne
 8011f92:	610d      	strne	r5, [r1, #16]
 8011f94:	614a      	streq	r2, [r1, #20]
 8011f96:	e7ec      	b.n	8011f72 <Hardware::Reboot()+0x4a>
 8011f98:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0
 8011f9c:	2000a9cc 	andcs	sl, r0, ip, asr #19
 8011fa0:	40011000 	andmi	r1, r1, r0

08011fa4 <operator delete(void*)>:
 8011fa4:	f000 b890 	b.w	80120c8 <free>

08011fa8 <operator delete[](void*)>:
 8011fa8:	f000 b88e 	b.w	80120c8 <free>

08011fac <operator new(unsigned int)>:
 8011fac:	f000 b842 	b.w	8012034 <malloc>

08011fb0 <operator new[](unsigned int)>:
 8011fb0:	f000 b840 	b.w	8012034 <malloc>

08011fb4 <inet_aton>:
 8011fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fb6:	f04f 0c0a 	mov.w	ip, #10
 8011fba:	2500      	movs	r5, #0
 8011fbc:	ae01      	add	r6, sp, #4
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	1d07      	adds	r7, r0, #4
 8011fc4:	e007      	b.n	8011fd6 <inet_aton+0x22>
 8011fc6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011fca:	2b09      	cmp	r3, #9
 8011fcc:	d820      	bhi.n	8012010 <inet_aton+0x5c>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	fb0c 4202 	mla	r2, ip, r2, r4
 8011fd4:	3a30      	subs	r2, #48	; 0x30
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f810 4b01 	ldrb.w	r4, [r0], #1
 8011fdc:	2c2e      	cmp	r4, #46	; 0x2e
 8011fde:	d111      	bne.n	8012004 <inet_aton+0x50>
 8011fe0:	3501      	adds	r5, #1
 8011fe2:	2d03      	cmp	r5, #3
 8011fe4:	f806 2b01 	strb.w	r2, [r6], #1
 8011fe8:	d1e9      	bne.n	8011fbe <inet_aton+0xa>
 8011fea:	2200      	movs	r2, #0
 8011fec:	250a      	movs	r5, #10
 8011fee:	1d1c      	adds	r4, r3, #4
 8011ff0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8011ff4:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8011ff8:	d10d      	bne.n	8012016 <inet_aton+0x62>
 8011ffa:	f88d 2007 	strb.w	r2, [sp, #7]
 8011ffe:	b9b1      	cbnz	r1, 801202e <inet_aton+0x7a>
 8012000:	2001      	movs	r0, #1
 8012002:	e006      	b.n	8012012 <inet_aton+0x5e>
 8012004:	2c00      	cmp	r4, #0
 8012006:	d0eb      	beq.n	8011fe0 <inet_aton+0x2c>
 8012008:	2c0a      	cmp	r4, #10
 801200a:	d0e9      	beq.n	8011fe0 <inet_aton+0x2c>
 801200c:	42b8      	cmp	r0, r7
 801200e:	d1da      	bne.n	8011fc6 <inet_aton+0x12>
 8012010:	2000      	movs	r0, #0
 8012012:	b003      	add	sp, #12
 8012014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012016:	280a      	cmp	r0, #10
 8012018:	d0ef      	beq.n	8011ffa <inet_aton+0x46>
 801201a:	42a3      	cmp	r3, r4
 801201c:	d0f8      	beq.n	8012010 <inet_aton+0x5c>
 801201e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 8012022:	2e09      	cmp	r6, #9
 8012024:	d8f4      	bhi.n	8012010 <inet_aton+0x5c>
 8012026:	fb05 0202 	mla	r2, r5, r2, r0
 801202a:	3a30      	subs	r2, #48	; 0x30
 801202c:	e7e0      	b.n	8011ff0 <inet_aton+0x3c>
 801202e:	9b01      	ldr	r3, [sp, #4]
 8012030:	600b      	str	r3, [r1, #0]
 8012032:	e7e5      	b.n	8012000 <inet_aton+0x4c>

08012034 <malloc>:
 8012034:	b538      	push	{r3, r4, r5, lr}
 8012036:	4604      	mov	r4, r0
 8012038:	4601      	mov	r1, r0
 801203a:	481c      	ldr	r0, [pc, #112]	; (80120ac <malloc+0x78>)
 801203c:	f7f7 f8f6 	bl	800922c <printf>
 8012040:	b17c      	cbz	r4, 8012062 <malloc+0x2e>
 8012042:	4b1b      	ldr	r3, [pc, #108]	; (80120b0 <malloc+0x7c>)
 8012044:	6818      	ldr	r0, [r3, #0]
 8012046:	b978      	cbnz	r0, 8012068 <malloc+0x34>
 8012048:	4a1a      	ldr	r2, [pc, #104]	; (80120b4 <malloc+0x80>)
 801204a:	f104 031b 	add.w	r3, r4, #27
 801204e:	6811      	ldr	r1, [r2, #0]
 8012050:	4819      	ldr	r0, [pc, #100]	; (80120b8 <malloc+0x84>)
 8012052:	f023 030f 	bic.w	r3, r3, #15
 8012056:	440b      	add	r3, r1
 8012058:	4283      	cmp	r3, r0
 801205a:	d921      	bls.n	80120a0 <malloc+0x6c>
 801205c:	4817      	ldr	r0, [pc, #92]	; (80120bc <malloc+0x88>)
 801205e:	f7f7 f8e5 	bl	800922c <printf>
 8012062:	2500      	movs	r5, #0
 8012064:	4628      	mov	r0, r5
 8012066:	bd38      	pop	{r3, r4, r5, pc}
 8012068:	4284      	cmp	r4, r0
 801206a:	d80a      	bhi.n	8012082 <malloc+0x4e>
 801206c:	685a      	ldr	r2, [r3, #4]
 801206e:	6899      	ldr	r1, [r3, #8]
 8012070:	3201      	adds	r2, #1
 8012072:	428a      	cmp	r2, r1
 8012074:	605a      	str	r2, [r3, #4]
 8012076:	d900      	bls.n	801207a <malloc+0x46>
 8012078:	609a      	str	r2, [r3, #8]
 801207a:	68d9      	ldr	r1, [r3, #12]
 801207c:	b919      	cbnz	r1, 8012086 <malloc+0x52>
 801207e:	4604      	mov	r4, r0
 8012080:	e7e2      	b.n	8012048 <malloc+0x14>
 8012082:	3310      	adds	r3, #16
 8012084:	e7de      	b.n	8012044 <malloc+0x10>
 8012086:	4604      	mov	r4, r0
 8012088:	688a      	ldr	r2, [r1, #8]
 801208a:	60da      	str	r2, [r3, #12]
 801208c:	2300      	movs	r3, #0
 801208e:	f101 050c 	add.w	r5, r1, #12
 8012092:	608b      	str	r3, [r1, #8]
 8012094:	4622      	mov	r2, r4
 8012096:	462b      	mov	r3, r5
 8012098:	4809      	ldr	r0, [pc, #36]	; (80120c0 <malloc+0x8c>)
 801209a:	f7f7 f8c7 	bl	800922c <printf>
 801209e:	e7e1      	b.n	8012064 <malloc+0x30>
 80120a0:	6013      	str	r3, [r2, #0]
 80120a2:	4b08      	ldr	r3, [pc, #32]	; (80120c4 <malloc+0x90>)
 80120a4:	e9c1 3400 	strd	r3, r4, [r1]
 80120a8:	e7f0      	b.n	801208c <malloc+0x58>
 80120aa:	bf00      	nop
 80120ac:	08016380 	stmdaeq	r1, {r7, r8, r9, sp, lr}
 80120b0:	20000010 	andcs	r0, r0, r0, lsl r0
 80120b4:	2000000c 	andcs	r0, r0, ip
 80120b8:	20016800 	andcs	r6, r1, r0, lsl #16
 80120bc:	0801638c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sp, lr}
 80120c0:	080163a8 	stmdaeq	r1, {r3, r5, r7, r8, r9, sp, lr}
 80120c4:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

080120c8 <free>:
 80120c8:	b538      	push	{r3, r4, r5, lr}
 80120ca:	4604      	mov	r4, r0
 80120cc:	b1c8      	cbz	r0, 8012102 <free+0x3a>
 80120ce:	f1a0 050c 	sub.w	r5, r0, #12
 80120d2:	4602      	mov	r2, r0
 80120d4:	4629      	mov	r1, r5
 80120d6:	480c      	ldr	r0, [pc, #48]	; (8012108 <free+0x40>)
 80120d8:	f7f7 f8a8 	bl	800922c <printf>
 80120dc:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80120e0:	4b0a      	ldr	r3, [pc, #40]	; (801210c <free+0x44>)
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d10d      	bne.n	8012102 <free+0x3a>
 80120e6:	4b0a      	ldr	r3, [pc, #40]	; (8012110 <free+0x48>)
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	b152      	cbz	r2, 8012102 <free+0x3a>
 80120ec:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80120f0:	4291      	cmp	r1, r2
 80120f2:	d107      	bne.n	8012104 <free+0x3c>
 80120f4:	68da      	ldr	r2, [r3, #12]
 80120f6:	f844 2c04 	str.w	r2, [r4, #-4]
 80120fa:	685a      	ldr	r2, [r3, #4]
 80120fc:	60dd      	str	r5, [r3, #12]
 80120fe:	3a01      	subs	r2, #1
 8012100:	605a      	str	r2, [r3, #4]
 8012102:	bd38      	pop	{r3, r4, r5, pc}
 8012104:	3310      	adds	r3, #16
 8012106:	e7ef      	b.n	80120e8 <free+0x20>
 8012108:	080163d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, r9, sp, lr}
 801210c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8012110:	20000010 	andcs	r0, r0, r0, lsl r0

08012114 <memcpy>:
 8012114:	b510      	push	{r4, lr}
 8012116:	1e43      	subs	r3, r0, #1
 8012118:	440a      	add	r2, r1
 801211a:	4291      	cmp	r1, r2
 801211c:	d100      	bne.n	8012120 <memcpy+0xc>
 801211e:	bd10      	pop	{r4, pc}
 8012120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012128:	e7f7      	b.n	801211a <memcpy+0x6>

0801212a <memmove>:
 801212a:	4288      	cmp	r0, r1
 801212c:	b510      	push	{r4, lr}
 801212e:	eb01 0302 	add.w	r3, r1, r2
 8012132:	d208      	bcs.n	8012146 <memmove+0x1c>
 8012134:	1e42      	subs	r2, r0, #1
 8012136:	4299      	cmp	r1, r3
 8012138:	d100      	bne.n	801213c <memmove+0x12>
 801213a:	bd10      	pop	{r4, pc}
 801213c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012140:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012144:	e7f7      	b.n	8012136 <memmove+0xc>
 8012146:	4601      	mov	r1, r0
 8012148:	4402      	add	r2, r0
 801214a:	428a      	cmp	r2, r1
 801214c:	d0f5      	beq.n	801213a <memmove+0x10>
 801214e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012152:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012156:	e7f8      	b.n	801214a <memmove+0x20>

08012158 <memset>:
 8012158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801215a:	b1c2      	cbz	r2, 801218e <memset+0x36>
 801215c:	4603      	mov	r3, r0
 801215e:	b2c9      	uxtb	r1, r1
 8012160:	075c      	lsls	r4, r3, #29
 8012162:	d110      	bne.n	8012186 <memset+0x2e>
 8012164:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8012168:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 801216c:	463d      	mov	r5, r7
 801216e:	461e      	mov	r6, r3
 8012170:	f022 0407 	bic.w	r4, r2, #7
 8012174:	441c      	add	r4, r3
 8012176:	42a6      	cmp	r6, r4
 8012178:	d10a      	bne.n	8012190 <memset+0x38>
 801217a:	4413      	add	r3, r2
 801217c:	429c      	cmp	r4, r3
 801217e:	d006      	beq.n	801218e <memset+0x36>
 8012180:	f804 1b01 	strb.w	r1, [r4], #1
 8012184:	e7fa      	b.n	801217c <memset+0x24>
 8012186:	3a01      	subs	r2, #1
 8012188:	f803 1b01 	strb.w	r1, [r3], #1
 801218c:	d1e8      	bne.n	8012160 <memset+0x8>
 801218e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012190:	f846 7b08 	str.w	r7, [r6], #8
 8012194:	f846 5c04 	str.w	r5, [r6, #-4]
 8012198:	e7ed      	b.n	8012176 <memset+0x1e>

0801219a <puts>:
 801219a:	b508      	push	{r3, lr}
 801219c:	f7ff fd6a 	bl	8011c74 <console_puts>
 80121a0:	200a      	movs	r0, #10
 80121a2:	f7ff fd65 	bl	8011c70 <console_putc>
 80121a6:	2001      	movs	r0, #1
 80121a8:	bd08      	pop	{r3, pc}
	...

080121ac <strtok>:
 80121ac:	b530      	push	{r4, r5, lr}
 80121ae:	b910      	cbnz	r0, 80121b6 <strtok+0xa>
 80121b0:	4b12      	ldr	r3, [pc, #72]	; (80121fc <strtok+0x50>)
 80121b2:	6818      	ldr	r0, [r3, #0]
 80121b4:	b158      	cbz	r0, 80121ce <strtok+0x22>
 80121b6:	4603      	mov	r3, r0
 80121b8:	460d      	mov	r5, r1
 80121ba:	4618      	mov	r0, r3
 80121bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80121c4:	b924      	cbnz	r4, 80121d0 <strtok+0x24>
 80121c6:	b94a      	cbnz	r2, 80121dc <strtok+0x30>
 80121c8:	4610      	mov	r0, r2
 80121ca:	4b0c      	ldr	r3, [pc, #48]	; (80121fc <strtok+0x50>)
 80121cc:	601a      	str	r2, [r3, #0]
 80121ce:	bd30      	pop	{r4, r5, pc}
 80121d0:	42a2      	cmp	r2, r4
 80121d2:	d1f5      	bne.n	80121c0 <strtok+0x14>
 80121d4:	e7f0      	b.n	80121b8 <strtok+0xc>
 80121d6:	4613      	mov	r3, r2
 80121d8:	e00c      	b.n	80121f4 <strtok+0x48>
 80121da:	b914      	cbnz	r4, 80121e2 <strtok+0x36>
 80121dc:	460d      	mov	r5, r1
 80121de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80121e6:	42a2      	cmp	r2, r4
 80121e8:	d1f7      	bne.n	80121da <strtok+0x2e>
 80121ea:	2a00      	cmp	r2, #0
 80121ec:	d0f3      	beq.n	80121d6 <strtok+0x2a>
 80121ee:	2200      	movs	r2, #0
 80121f0:	f803 2c01 	strb.w	r2, [r3, #-1]
 80121f4:	4a01      	ldr	r2, [pc, #4]	; (80121fc <strtok+0x50>)
 80121f6:	6013      	str	r3, [r2, #0]
 80121f8:	e7e9      	b.n	80121ce <strtok+0x22>
 80121fa:	bf00      	nop
 80121fc:	2000a9b8 			; <UNDEFINED> instruction: 0x2000a9b8

08012200 <isleapyear>:
 8012200:	2264      	movs	r2, #100	; 0x64
 8012202:	fb90 f3f2 	sdiv	r3, r0, r2
 8012206:	fb02 0313 	mls	r3, r2, r3, r0
 801220a:	b94b      	cbnz	r3, 8012220 <isleapyear+0x20>
 801220c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012210:	fb90 f2f3 	sdiv	r2, r0, r3
 8012214:	fb03 0012 	mls	r0, r3, r2, r0
 8012218:	fab0 f080 	clz	r0, r0
 801221c:	0940      	lsrs	r0, r0, #5
 801221e:	4770      	bx	lr
 8012220:	f010 0f03 	tst.w	r0, #3
 8012224:	bf0c      	ite	eq
 8012226:	2001      	moveq	r0, #1
 8012228:	2000      	movne	r0, #0
 801222a:	4770      	bx	lr

0801222c <getdaysofmonth>:
 801222c:	b510      	push	{r4, lr}
 801222e:	4604      	mov	r4, r0
 8012230:	2c01      	cmp	r4, #1
 8012232:	4608      	mov	r0, r1
 8012234:	d102      	bne.n	801223c <getdaysofmonth+0x10>
 8012236:	f7ff ffe3 	bl	8012200 <isleapyear>
 801223a:	b918      	cbnz	r0, 8012244 <getdaysofmonth+0x18>
 801223c:	4b02      	ldr	r3, [pc, #8]	; (8012248 <getdaysofmonth+0x1c>)
 801223e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012242:	bd10      	pop	{r4, pc}
 8012244:	201d      	movs	r0, #29
 8012246:	e7fc      	b.n	8012242 <getdaysofmonth+0x16>
 8012248:	080163fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sp, lr}

0801224c <mktime>:
 801224c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012250:	4604      	mov	r4, r0
 8012252:	2800      	cmp	r0, #0
 8012254:	d043      	beq.n	80122de <mktime+0x92>
 8012256:	6941      	ldr	r1, [r0, #20]
 8012258:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 801225c:	2b45      	cmp	r3, #69	; 0x45
 801225e:	d83e      	bhi.n	80122de <mktime+0x92>
 8012260:	2600      	movs	r6, #0
 8012262:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8012266:	f240 186d 	movw	r8, #365	; 0x16d
 801226a:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 801226e:	42af      	cmp	r7, r5
 8012270:	da24      	bge.n	80122bc <mktime+0x70>
 8012272:	6927      	ldr	r7, [r4, #16]
 8012274:	2f0b      	cmp	r7, #11
 8012276:	d832      	bhi.n	80122de <mktime+0x92>
 8012278:	2500      	movs	r5, #0
 801227a:	42af      	cmp	r7, r5
 801227c:	d129      	bne.n	80122d2 <mktime+0x86>
 801227e:	68e5      	ldr	r5, [r4, #12]
 8012280:	2d00      	cmp	r5, #0
 8012282:	dd2c      	ble.n	80122de <mktime+0x92>
 8012284:	4638      	mov	r0, r7
 8012286:	f7ff ffd1 	bl	801222c <getdaysofmonth>
 801228a:	4285      	cmp	r5, r0
 801228c:	dc27      	bgt.n	80122de <mktime+0x92>
 801228e:	2318      	movs	r3, #24
 8012290:	3d01      	subs	r5, #1
 8012292:	4435      	add	r5, r6
 8012294:	435d      	muls	r5, r3
 8012296:	68a3      	ldr	r3, [r4, #8]
 8012298:	2b17      	cmp	r3, #23
 801229a:	d820      	bhi.n	80122de <mktime+0x92>
 801229c:	213c      	movs	r1, #60	; 0x3c
 801229e:	442b      	add	r3, r5
 80122a0:	fb01 f203 	mul.w	r2, r1, r3
 80122a4:	6863      	ldr	r3, [r4, #4]
 80122a6:	2b3b      	cmp	r3, #59	; 0x3b
 80122a8:	d819      	bhi.n	80122de <mktime+0x92>
 80122aa:	6820      	ldr	r0, [r4, #0]
 80122ac:	4413      	add	r3, r2
 80122ae:	283b      	cmp	r0, #59	; 0x3b
 80122b0:	fb01 f303 	mul.w	r3, r1, r3
 80122b4:	d813      	bhi.n	80122de <mktime+0x92>
 80122b6:	4418      	add	r0, r3
 80122b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122bc:	4628      	mov	r0, r5
 80122be:	f7ff ff9f 	bl	8012200 <isleapyear>
 80122c2:	2800      	cmp	r0, #0
 80122c4:	bf14      	ite	ne
 80122c6:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 80122ca:	4643      	moveq	r3, r8
 80122cc:	3501      	adds	r5, #1
 80122ce:	441e      	add	r6, r3
 80122d0:	e7cd      	b.n	801226e <mktime+0x22>
 80122d2:	4628      	mov	r0, r5
 80122d4:	f7ff ffaa 	bl	801222c <getdaysofmonth>
 80122d8:	3501      	adds	r5, #1
 80122da:	4406      	add	r6, r0
 80122dc:	e7cd      	b.n	801227a <mktime+0x2e>
 80122de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80122e2:	e7e9      	b.n	80122b8 <mktime+0x6c>

080122e4 <gettimeofday>:
 80122e4:	b538      	push	{r3, r4, r5, lr}
 80122e6:	4b10      	ldr	r3, [pc, #64]	; (8012328 <gettimeofday+0x44>)
 80122e8:	4a10      	ldr	r2, [pc, #64]	; (801232c <gettimeofday+0x48>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	6814      	ldr	r4, [r2, #0]
 80122ee:	6013      	str	r3, [r2, #0]
 80122f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80122f4:	429c      	cmp	r4, r3
 80122f6:	bf2c      	ite	cs
 80122f8:	1ae4      	subcs	r4, r4, r3
 80122fa:	1b1c      	subcc	r4, r3, r4
 80122fc:	4354      	muls	r4, r2
 80122fe:	4b0c      	ldr	r3, [pc, #48]	; (8012330 <gettimeofday+0x4c>)
 8012300:	4605      	mov	r5, r0
 8012302:	e9d3 2100 	ldrd	r2, r1, [r3]
 8012306:	18a4      	adds	r4, r4, r2
 8012308:	f141 0100 	adc.w	r1, r1, #0
 801230c:	e9c3 4100 	strd	r4, r1, [r3]
 8012310:	4620      	mov	r0, r4
 8012312:	2300      	movs	r3, #0
 8012314:	4a07      	ldr	r2, [pc, #28]	; (8012334 <gettimeofday+0x50>)
 8012316:	f7f5 fddf 	bl	8007ed8 <__aeabi_uldivmod>
 801231a:	4b06      	ldr	r3, [pc, #24]	; (8012334 <gettimeofday+0x50>)
 801231c:	6028      	str	r0, [r5, #0]
 801231e:	fb03 4410 	mls	r4, r3, r0, r4
 8012322:	2000      	movs	r0, #0
 8012324:	606c      	str	r4, [r5, #4]
 8012326:	bd38      	pop	{r3, r4, r5, pc}
 8012328:	2000a9cc 	andcs	sl, r0, ip, asr #19
 801232c:	2000a9c8 	andcs	sl, r0, r8, asr #19
 8012330:	2000a9c0 	andcs	sl, r0, r0, asr #19
 8012334:	000f4240 	andeq	r4, pc, r0, asr #4

08012338 <settimeofday>:
 8012338:	4b07      	ldr	r3, [pc, #28]	; (8012358 <settimeofday+0x20>)
 801233a:	b510      	push	{r4, lr}
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	4b07      	ldr	r3, [pc, #28]	; (801235c <settimeofday+0x24>)
 8012340:	6804      	ldr	r4, [r0, #0]
 8012342:	601a      	str	r2, [r3, #0]
 8012344:	6843      	ldr	r3, [r0, #4]
 8012346:	4806      	ldr	r0, [pc, #24]	; (8012360 <settimeofday+0x28>)
 8012348:	17da      	asrs	r2, r3, #31
 801234a:	fbc4 3200 	smlal	r3, r2, r4, r0
 801234e:	4905      	ldr	r1, [pc, #20]	; (8012364 <settimeofday+0x2c>)
 8012350:	2000      	movs	r0, #0
 8012352:	e9c1 3200 	strd	r3, r2, [r1]
 8012356:	bd10      	pop	{r4, pc}
 8012358:	2000a9cc 	andcs	sl, r0, ip, asr #19
 801235c:	2000a9c8 	andcs	sl, r0, r8, asr #19
 8012360:	000f4240 	andeq	r4, pc, r0, asr #4
 8012364:	2000a9c0 	andcs	sl, r0, r0, asr #19

08012368 <time>:
 8012368:	b513      	push	{r0, r1, r4, lr}
 801236a:	4604      	mov	r4, r0
 801236c:	2100      	movs	r1, #0
 801236e:	4668      	mov	r0, sp
 8012370:	f7ff ffb8 	bl	80122e4 <gettimeofday>
 8012374:	9800      	ldr	r0, [sp, #0]
 8012376:	b104      	cbz	r4, 801237a <time+0x12>
 8012378:	6020      	str	r0, [r4, #0]
 801237a:	b002      	add	sp, #8
 801237c:	bd10      	pop	{r4, pc}
	...

08012380 <uart0_init>:
 8012380:	2301      	movs	r3, #1
 8012382:	b507      	push	{r0, r1, r2, lr}
 8012384:	2208      	movs	r2, #8
 8012386:	9300      	str	r3, [sp, #0]
 8012388:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 801238c:	2300      	movs	r3, #0
 801238e:	4803      	ldr	r0, [pc, #12]	; (801239c <uart0_init+0x1c>)
 8012390:	f001 f810 	bl	80133b4 <gd32_uart_begin>
 8012394:	b003      	add	sp, #12
 8012396:	f85d fb04 	ldr.w	pc, [sp], #4
 801239a:	bf00      	nop
 801239c:	40013800 	andmi	r3, r1, r0, lsl #16

080123a0 <uart0_putc>:
 80123a0:	280a      	cmp	r0, #10
 80123a2:	b538      	push	{r3, r4, r5, lr}
 80123a4:	4604      	mov	r4, r0
 80123a6:	d10a      	bne.n	80123be <uart0_putc+0x1e>
 80123a8:	4d0b      	ldr	r5, [pc, #44]	; (80123d8 <uart0_putc+0x38>)
 80123aa:	2107      	movs	r1, #7
 80123ac:	4628      	mov	r0, r5
 80123ae:	f000 fcd3 	bl	8012d58 <usart_flag_get>
 80123b2:	2800      	cmp	r0, #0
 80123b4:	d0f9      	beq.n	80123aa <uart0_putc+0xa>
 80123b6:	220d      	movs	r2, #13
 80123b8:	4b08      	ldr	r3, [pc, #32]	; (80123dc <uart0_putc+0x3c>)
 80123ba:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80123be:	4d06      	ldr	r5, [pc, #24]	; (80123d8 <uart0_putc+0x38>)
 80123c0:	2107      	movs	r1, #7
 80123c2:	4628      	mov	r0, r5
 80123c4:	f000 fcc8 	bl	8012d58 <usart_flag_get>
 80123c8:	2800      	cmp	r0, #0
 80123ca:	d0f9      	beq.n	80123c0 <uart0_putc+0x20>
 80123cc:	4b03      	ldr	r3, [pc, #12]	; (80123dc <uart0_putc+0x3c>)
 80123ce:	b2e4      	uxtb	r4, r4
 80123d0:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 80123d4:	bd38      	pop	{r3, r4, r5, pc}
 80123d6:	bf00      	nop
 80123d8:	40013800 	andmi	r3, r1, r0, lsl #16
 80123dc:	40013000 	andmi	r3, r1, r0

080123e0 <uart0_puts>:
 80123e0:	b510      	push	{r4, lr}
 80123e2:	1e44      	subs	r4, r0, #1
 80123e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80123e8:	b903      	cbnz	r3, 80123ec <uart0_puts+0xc>
 80123ea:	bd10      	pop	{r4, pc}
 80123ec:	2b0a      	cmp	r3, #10
 80123ee:	d102      	bne.n	80123f6 <uart0_puts+0x16>
 80123f0:	200d      	movs	r0, #13
 80123f2:	f7ff ffd5 	bl	80123a0 <uart0_putc>
 80123f6:	7820      	ldrb	r0, [r4, #0]
 80123f8:	f7ff ffd2 	bl	80123a0 <uart0_putc>
 80123fc:	e7f2      	b.n	80123e4 <uart0_puts+0x4>
	...

08012400 <systick_config>:
 8012400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012404:	4b0b      	ldr	r3, [pc, #44]	; (8012434 <systick_config+0x34>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	fbb3 f3f2 	udiv	r3, r3, r2
 801240c:	3b01      	subs	r3, #1
 801240e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012412:	d20d      	bcs.n	8012430 <systick_config+0x30>
 8012414:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8012418:	21f0      	movs	r1, #240	; 0xf0
 801241a:	6153      	str	r3, [r2, #20]
 801241c:	4b06      	ldr	r3, [pc, #24]	; (8012438 <systick_config+0x38>)
 801241e:	2007      	movs	r0, #7
 8012420:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8012424:	2100      	movs	r1, #0
 8012426:	6191      	str	r1, [r2, #24]
 8012428:	6110      	str	r0, [r2, #16]
 801242a:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 801242e:	4770      	bx	lr
 8012430:	e7fe      	b.n	8012430 <systick_config+0x30>
 8012432:	bf00      	nop
 8012434:	200000e0 	andcs	r0, r0, r0, ror #1
 8012438:	e000ed00 	and	lr, r0, r0, lsl #26

0801243c <SysTick_Handler>:
 801243c:	4a02      	ldr	r2, [pc, #8]	; (8012448 <SysTick_Handler+0xc>)
 801243e:	6813      	ldr	r3, [r2, #0]
 8012440:	3301      	adds	r3, #1
 8012442:	6013      	str	r3, [r2, #0]
 8012444:	4770      	bx	lr
 8012446:	bf00      	nop
 8012448:	2000a9cc 	andcs	sl, r0, ip, asr #19

0801244c <SystemInit>:
 801244c:	4b37      	ldr	r3, [pc, #220]	; (801252c <SystemInit+0xe0>)
 801244e:	4938      	ldr	r1, [pc, #224]	; (8012530 <SystemInit+0xe4>)
 8012450:	681a      	ldr	r2, [r3, #0]
 8012452:	f042 0201 	orr.w	r2, r2, #1
 8012456:	601a      	str	r2, [r3, #0]
 8012458:	685a      	ldr	r2, [r3, #4]
 801245a:	f022 0203 	bic.w	r2, r2, #3
 801245e:	605a      	str	r2, [r3, #4]
 8012460:	681a      	ldr	r2, [r3, #0]
 8012462:	400a      	ands	r2, r1
 8012464:	601a      	str	r2, [r3, #0]
 8012466:	6858      	ldr	r0, [r3, #4]
 8012468:	4a32      	ldr	r2, [pc, #200]	; (8012534 <SystemInit+0xe8>)
 801246a:	4002      	ands	r2, r0
 801246c:	605a      	str	r2, [r3, #4]
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	400a      	ands	r2, r1
 8012472:	601a      	str	r2, [r3, #0]
 8012474:	681a      	ldr	r2, [r3, #0]
 8012476:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801247a:	601a      	str	r2, [r3, #0]
 801247c:	685a      	ldr	r2, [r3, #4]
 801247e:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 8012482:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8012486:	605a      	str	r2, [r3, #4]
 8012488:	2200      	movs	r2, #0
 801248a:	62da      	str	r2, [r3, #44]	; 0x2c
 801248c:	681a      	ldr	r2, [r3, #0]
 801248e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8012492:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8012496:	601a      	str	r2, [r3, #0]
 8012498:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 801249c:	609a      	str	r2, [r3, #8]
 801249e:	681a      	ldr	r2, [r3, #0]
 80124a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80124a4:	601a      	str	r2, [r3, #0]
 80124a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124aa:	6819      	ldr	r1, [r3, #0]
 80124ac:	0389      	lsls	r1, r1, #14
 80124ae:	d401      	bmi.n	80124b4 <SystemInit+0x68>
 80124b0:	3a01      	subs	r2, #1
 80124b2:	d1fa      	bne.n	80124aa <SystemInit+0x5e>
 80124b4:	681a      	ldr	r2, [r3, #0]
 80124b6:	0392      	lsls	r2, r2, #14
 80124b8:	d400      	bmi.n	80124bc <SystemInit+0x70>
 80124ba:	e7fe      	b.n	80124ba <SystemInit+0x6e>
 80124bc:	685a      	ldr	r2, [r3, #4]
 80124be:	605a      	str	r2, [r3, #4]
 80124c0:	685a      	ldr	r2, [r3, #4]
 80124c2:	605a      	str	r2, [r3, #4]
 80124c4:	685a      	ldr	r2, [r3, #4]
 80124c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80124ca:	605a      	str	r2, [r3, #4]
 80124cc:	685a      	ldr	r2, [r3, #4]
 80124ce:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80124d2:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80124d6:	605a      	str	r2, [r3, #4]
 80124d8:	685a      	ldr	r2, [r3, #4]
 80124da:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80124de:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 80124e2:	605a      	str	r2, [r3, #4]
 80124e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80124e6:	4a14      	ldr	r2, [pc, #80]	; (8012538 <SystemInit+0xec>)
 80124e8:	400a      	ands	r2, r1
 80124ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80124ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ee:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 80124f2:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 80124f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80124f8:	681a      	ldr	r2, [r3, #0]
 80124fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80124fe:	601a      	str	r2, [r3, #0]
 8012500:	681a      	ldr	r2, [r3, #0]
 8012502:	0110      	lsls	r0, r2, #4
 8012504:	d5fc      	bpl.n	8012500 <SystemInit+0xb4>
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 801250c:	601a      	str	r2, [r3, #0]
 801250e:	681a      	ldr	r2, [r3, #0]
 8012510:	0191      	lsls	r1, r2, #6
 8012512:	d5fc      	bpl.n	801250e <SystemInit+0xc2>
 8012514:	685a      	ldr	r2, [r3, #4]
 8012516:	f022 0203 	bic.w	r2, r2, #3
 801251a:	605a      	str	r2, [r3, #4]
 801251c:	685a      	ldr	r2, [r3, #4]
 801251e:	f042 0202 	orr.w	r2, r2, #2
 8012522:	605a      	str	r2, [r3, #4]
 8012524:	685a      	ldr	r2, [r3, #4]
 8012526:	0712      	lsls	r2, r2, #28
 8012528:	d5fc      	bpl.n	8012524 <SystemInit+0xd8>
 801252a:	4770      	bx	lr
 801252c:	40021000 	andmi	r1, r2, r0
 8012530:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 8012534:	e0ff000c 	rscs	r0, pc, ip
 8012538:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

0801253c <bkp_deinit>:
 801253c:	b508      	push	{r3, lr}
 801253e:	f000 f975 	bl	801282c <rcu_bkp_reset_enable>
 8012542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012546:	f000 b979 	b.w	801283c <rcu_bkp_reset_disable>
	...

0801254c <bkp_data_write>:
 801254c:	f1a0 030b 	sub.w	r3, r0, #11
 8012550:	2b1f      	cmp	r3, #31
 8012552:	d804      	bhi.n	801255e <bkp_data_write+0x12>
 8012554:	4b07      	ldr	r3, [pc, #28]	; (8012574 <bkp_data_write+0x28>)
 8012556:	4403      	add	r3, r0
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	8019      	strh	r1, [r3, #0]
 801255c:	4770      	bx	lr
 801255e:	1e43      	subs	r3, r0, #1
 8012560:	2b09      	cmp	r3, #9
 8012562:	bf9f      	itttt	ls
 8012564:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8012568:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 801256c:	0080      	lslls	r0, r0, #2
 801256e:	8001      	strhls	r1, [r0, #0]
 8012570:	4770      	bx	lr
 8012572:	bf00      	nop
 8012574:	10001b05 	andne	r1, r0, r5, lsl #22

08012578 <bkp_data_read>:
 8012578:	f1a0 030b 	sub.w	r3, r0, #11
 801257c:	2b1f      	cmp	r3, #31
 801257e:	d805      	bhi.n	801258c <bkp_data_read+0x14>
 8012580:	4b08      	ldr	r3, [pc, #32]	; (80125a4 <bkp_data_read+0x2c>)
 8012582:	4403      	add	r3, r0
 8012584:	009b      	lsls	r3, r3, #2
 8012586:	8818      	ldrh	r0, [r3, #0]
 8012588:	b280      	uxth	r0, r0
 801258a:	4770      	bx	lr
 801258c:	1e43      	subs	r3, r0, #1
 801258e:	2b09      	cmp	r3, #9
 8012590:	d806      	bhi.n	80125a0 <bkp_data_read+0x28>
 8012592:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8012596:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 801259a:	0080      	lsls	r0, r0, #2
 801259c:	8800      	ldrh	r0, [r0, #0]
 801259e:	e7f3      	b.n	8012588 <bkp_data_read+0x10>
 80125a0:	2000      	movs	r0, #0
 80125a2:	4770      	bx	lr
 80125a4:	10001b05 	andne	r1, r0, r5, lsl #22

080125a8 <fmc_bank0_unlock>:
 80125a8:	4b04      	ldr	r3, [pc, #16]	; (80125bc <fmc_bank0_unlock+0x14>)
 80125aa:	691a      	ldr	r2, [r3, #16]
 80125ac:	0612      	lsls	r2, r2, #24
 80125ae:	bf41      	itttt	mi
 80125b0:	4a03      	ldrmi	r2, [pc, #12]	; (80125c0 <fmc_bank0_unlock+0x18>)
 80125b2:	605a      	strmi	r2, [r3, #4]
 80125b4:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80125b8:	605a      	strmi	r2, [r3, #4]
 80125ba:	4770      	bx	lr
 80125bc:	40022000 	andmi	r2, r2, r0
 80125c0:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080125c4 <fmc_bank1_unlock>:
 80125c4:	4b04      	ldr	r3, [pc, #16]	; (80125d8 <fmc_bank1_unlock+0x14>)
 80125c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125c8:	0612      	lsls	r2, r2, #24
 80125ca:	bf41      	itttt	mi
 80125cc:	4a03      	ldrmi	r2, [pc, #12]	; (80125dc <fmc_bank1_unlock+0x18>)
 80125ce:	645a      	strmi	r2, [r3, #68]	; 0x44
 80125d0:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80125d4:	645a      	strmi	r2, [r3, #68]	; 0x44
 80125d6:	4770      	bx	lr
 80125d8:	40022000 	andmi	r2, r2, r0
 80125dc:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080125e0 <fmc_bank0_lock>:
 80125e0:	4a02      	ldr	r2, [pc, #8]	; (80125ec <fmc_bank0_lock+0xc>)
 80125e2:	6913      	ldr	r3, [r2, #16]
 80125e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125e8:	6113      	str	r3, [r2, #16]
 80125ea:	4770      	bx	lr
 80125ec:	40022000 	andmi	r2, r2, r0

080125f0 <fmc_bank1_lock>:
 80125f0:	4a02      	ldr	r2, [pc, #8]	; (80125fc <fmc_bank1_lock+0xc>)
 80125f2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80125f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125f8:	6513      	str	r3, [r2, #80]	; 0x50
 80125fa:	4770      	bx	lr
 80125fc:	40022000 	andmi	r2, r2, r0

08012600 <fmc_bank0_state_get>:
 8012600:	4b07      	ldr	r3, [pc, #28]	; (8012620 <fmc_bank0_state_get+0x20>)
 8012602:	68da      	ldr	r2, [r3, #12]
 8012604:	07d1      	lsls	r1, r2, #31
 8012606:	d407      	bmi.n	8012618 <fmc_bank0_state_get+0x18>
 8012608:	68da      	ldr	r2, [r3, #12]
 801260a:	06d2      	lsls	r2, r2, #27
 801260c:	d406      	bmi.n	801261c <fmc_bank0_state_get+0x1c>
 801260e:	68d8      	ldr	r0, [r3, #12]
 8012610:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8012614:	0040      	lsls	r0, r0, #1
 8012616:	4770      	bx	lr
 8012618:	2001      	movs	r0, #1
 801261a:	4770      	bx	lr
 801261c:	2003      	movs	r0, #3
 801261e:	4770      	bx	lr
 8012620:	40022000 	andmi	r2, r2, r0

08012624 <fmc_bank1_state_get>:
 8012624:	4b07      	ldr	r3, [pc, #28]	; (8012644 <fmc_bank1_state_get+0x20>)
 8012626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012628:	07d1      	lsls	r1, r2, #31
 801262a:	d407      	bmi.n	801263c <fmc_bank1_state_get+0x18>
 801262c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801262e:	06d2      	lsls	r2, r2, #27
 8012630:	d406      	bmi.n	8012640 <fmc_bank1_state_get+0x1c>
 8012632:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012634:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8012638:	0040      	lsls	r0, r0, #1
 801263a:	4770      	bx	lr
 801263c:	2001      	movs	r0, #1
 801263e:	4770      	bx	lr
 8012640:	2003      	movs	r0, #3
 8012642:	4770      	bx	lr
 8012644:	40022000 	andmi	r2, r2, r0

08012648 <fwdgt_enable>:
 8012648:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 801264c:	4b01      	ldr	r3, [pc, #4]	; (8012654 <fwdgt_enable+0xc>)
 801264e:	601a      	str	r2, [r3, #0]
 8012650:	4770      	bx	lr
 8012652:	bf00      	nop
 8012654:	40003000 	andmi	r3, r0, r0

08012658 <fwdgt_counter_reload>:
 8012658:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801265c:	4b01      	ldr	r3, [pc, #4]	; (8012664 <fwdgt_counter_reload+0xc>)
 801265e:	601a      	str	r2, [r3, #0]
 8012660:	4770      	bx	lr
 8012662:	bf00      	nop
 8012664:	40003000 	andmi	r3, r0, r0

08012668 <fwdgt_config>:
 8012668:	f245 5355 	movw	r3, #21845	; 0x5555
 801266c:	4a11      	ldr	r2, [pc, #68]	; (80126b4 <fwdgt_config+0x4c>)
 801266e:	b510      	push	{r4, lr}
 8012670:	4c11      	ldr	r4, [pc, #68]	; (80126b8 <fwdgt_config+0x50>)
 8012672:	6013      	str	r3, [r2, #0]
 8012674:	68d3      	ldr	r3, [r2, #12]
 8012676:	3c01      	subs	r4, #1
 8012678:	f003 0301 	and.w	r3, r3, #1
 801267c:	d013      	beq.n	80126a6 <fwdgt_config+0x3e>
 801267e:	2b00      	cmp	r3, #0
 8012680:	d1f8      	bne.n	8012674 <fwdgt_config+0xc>
 8012682:	6051      	str	r1, [r2, #4]
 8012684:	490c      	ldr	r1, [pc, #48]	; (80126b8 <fwdgt_config+0x50>)
 8012686:	4a0b      	ldr	r2, [pc, #44]	; (80126b4 <fwdgt_config+0x4c>)
 8012688:	68d3      	ldr	r3, [r2, #12]
 801268a:	3901      	subs	r1, #1
 801268c:	f003 0302 	and.w	r3, r3, #2
 8012690:	d00d      	beq.n	80126ae <fwdgt_config+0x46>
 8012692:	2b00      	cmp	r3, #0
 8012694:	d1f8      	bne.n	8012688 <fwdgt_config+0x20>
 8012696:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 801269a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801269e:	6090      	str	r0, [r2, #8]
 80126a0:	2001      	movs	r0, #1
 80126a2:	6013      	str	r3, [r2, #0]
 80126a4:	e002      	b.n	80126ac <fwdgt_config+0x44>
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d0eb      	beq.n	8012682 <fwdgt_config+0x1a>
 80126aa:	2000      	movs	r0, #0
 80126ac:	bd10      	pop	{r4, pc}
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d1fb      	bne.n	80126aa <fwdgt_config+0x42>
 80126b2:	e7f0      	b.n	8012696 <fwdgt_config+0x2e>
 80126b4:	40003000 	andmi	r3, r0, r0
 80126b8:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080126bc <gpio_init>:
 80126bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c0:	f04f 0c0f 	mov.w	ip, #15
 80126c4:	06cf      	lsls	r7, r1, #27
 80126c6:	f04f 0400 	mov.w	r4, #0
 80126ca:	f04f 0701 	mov.w	r7, #1
 80126ce:	f001 050f 	and.w	r5, r1, #15
 80126d2:	bf48      	it	mi
 80126d4:	4315      	orrmi	r5, r2
 80126d6:	fa23 f204 	lsr.w	r2, r3, r4
 80126da:	07d6      	lsls	r6, r2, #31
 80126dc:	d510      	bpl.n	8012700 <gpio_init+0x44>
 80126de:	00a2      	lsls	r2, r4, #2
 80126e0:	6806      	ldr	r6, [r0, #0]
 80126e2:	fa0c fe02 	lsl.w	lr, ip, r2
 80126e6:	ea26 060e 	bic.w	r6, r6, lr
 80126ea:	fa05 f202 	lsl.w	r2, r5, r2
 80126ee:	2928      	cmp	r1, #40	; 0x28
 80126f0:	ea42 0206 	orr.w	r2, r2, r6
 80126f4:	d128      	bne.n	8012748 <gpio_init+0x8c>
 80126f6:	fa07 f604 	lsl.w	r6, r7, r4
 80126fa:	401e      	ands	r6, r3
 80126fc:	6146      	str	r6, [r0, #20]
 80126fe:	6002      	str	r2, [r0, #0]
 8012700:	3401      	adds	r4, #1
 8012702:	2c08      	cmp	r4, #8
 8012704:	d1e7      	bne.n	80126d6 <gpio_init+0x1a>
 8012706:	2600      	movs	r6, #0
 8012708:	f04f 0c0f 	mov.w	ip, #15
 801270c:	2701      	movs	r7, #1
 801270e:	f106 0208 	add.w	r2, r6, #8
 8012712:	fa23 f402 	lsr.w	r4, r3, r2
 8012716:	07e4      	lsls	r4, r4, #31
 8012718:	d511      	bpl.n	801273e <gpio_init+0x82>
 801271a:	00b4      	lsls	r4, r6, #2
 801271c:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8012720:	fa0c f804 	lsl.w	r8, ip, r4
 8012724:	ea2e 0e08 	bic.w	lr, lr, r8
 8012728:	fa05 f404 	lsl.w	r4, r5, r4
 801272c:	2928      	cmp	r1, #40	; 0x28
 801272e:	ea44 040e 	orr.w	r4, r4, lr
 8012732:	d110      	bne.n	8012756 <gpio_init+0x9a>
 8012734:	fa07 f202 	lsl.w	r2, r7, r2
 8012738:	401a      	ands	r2, r3
 801273a:	6142      	str	r2, [r0, #20]
 801273c:	6044      	str	r4, [r0, #4]
 801273e:	3601      	adds	r6, #1
 8012740:	2e08      	cmp	r6, #8
 8012742:	d1e4      	bne.n	801270e <gpio_init+0x52>
 8012744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012748:	2948      	cmp	r1, #72	; 0x48
 801274a:	bf02      	ittt	eq
 801274c:	fa07 f604 	lsleq.w	r6, r7, r4
 8012750:	401e      	andeq	r6, r3
 8012752:	6106      	streq	r6, [r0, #16]
 8012754:	e7d3      	b.n	80126fe <gpio_init+0x42>
 8012756:	2948      	cmp	r1, #72	; 0x48
 8012758:	bf02      	ittt	eq
 801275a:	fa07 f202 	lsleq.w	r2, r7, r2
 801275e:	401a      	andeq	r2, r3
 8012760:	6102      	streq	r2, [r0, #16]
 8012762:	e7eb      	b.n	801273c <gpio_init+0x80>

08012764 <gpio_pin_remap_config>:
 8012764:	2800      	cmp	r0, #0
 8012766:	4a16      	ldr	r2, [pc, #88]	; (80127c0 <gpio_pin_remap_config+0x5c>)
 8012768:	b530      	push	{r4, r5, lr}
 801276a:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 801276e:	bfb4      	ite	lt
 8012770:	69d3      	ldrlt	r3, [r2, #28]
 8012772:	6853      	ldrge	r3, [r2, #4]
 8012774:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8012778:	b284      	uxth	r4, r0
 801277a:	d110      	bne.n	801279e <gpio_pin_remap_config+0x3a>
 801277c:	6855      	ldr	r5, [r2, #4]
 801277e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8012782:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8012786:	6055      	str	r5, [r2, #4]
 8012788:	b119      	cbz	r1, 8012792 <gpio_pin_remap_config+0x2e>
 801278a:	0d42      	lsrs	r2, r0, #21
 801278c:	0112      	lsls	r2, r2, #4
 801278e:	4094      	lsls	r4, r2
 8012790:	4323      	orrs	r3, r4
 8012792:	4a0b      	ldr	r2, [pc, #44]	; (80127c0 <gpio_pin_remap_config+0x5c>)
 8012794:	2800      	cmp	r0, #0
 8012796:	bfb4      	ite	lt
 8012798:	61d3      	strlt	r3, [r2, #28]
 801279a:	6053      	strge	r3, [r2, #4]
 801279c:	bd30      	pop	{r4, r5, pc}
 801279e:	02c2      	lsls	r2, r0, #11
 80127a0:	bf4d      	iteet	mi
 80127a2:	2203      	movmi	r2, #3
 80127a4:	0d42      	lsrpl	r2, r0, #21
 80127a6:	0112      	lslpl	r2, r2, #4
 80127a8:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 80127ac:	bf4c      	ite	mi
 80127ae:	40aa      	lslmi	r2, r5
 80127b0:	fa04 f202 	lslpl.w	r2, r4, r2
 80127b4:	ea23 0302 	bic.w	r3, r3, r2
 80127b8:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80127bc:	e7e4      	b.n	8012788 <gpio_pin_remap_config+0x24>
 80127be:	bf00      	nop
 80127c0:	40010000 	andmi	r0, r1, r0

080127c4 <gpio_ethernet_phy_select>:
 80127c4:	4b04      	ldr	r3, [pc, #16]	; (80127d8 <gpio_ethernet_phy_select+0x14>)
 80127c6:	685a      	ldr	r2, [r3, #4]
 80127c8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80127cc:	605a      	str	r2, [r3, #4]
 80127ce:	685a      	ldr	r2, [r3, #4]
 80127d0:	4302      	orrs	r2, r0
 80127d2:	605a      	str	r2, [r3, #4]
 80127d4:	4770      	bx	lr
 80127d6:	bf00      	nop
 80127d8:	40010000 	andmi	r0, r1, r0

080127dc <pmu_backup_write_enable>:
 80127dc:	4a02      	ldr	r2, [pc, #8]	; (80127e8 <pmu_backup_write_enable+0xc>)
 80127de:	6813      	ldr	r3, [r2, #0]
 80127e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80127e4:	6013      	str	r3, [r2, #0]
 80127e6:	4770      	bx	lr
 80127e8:	40007000 	andmi	r7, r0, r0

080127ec <rcu_periph_clock_enable>:
 80127ec:	2201      	movs	r2, #1
 80127ee:	0983      	lsrs	r3, r0, #6
 80127f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80127f4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80127f8:	6819      	ldr	r1, [r3, #0]
 80127fa:	f000 001f 	and.w	r0, r0, #31
 80127fe:	4082      	lsls	r2, r0
 8012800:	430a      	orrs	r2, r1
 8012802:	601a      	str	r2, [r3, #0]
 8012804:	4770      	bx	lr

08012806 <rcu_periph_clock_disable>:
 8012806:	2101      	movs	r1, #1
 8012808:	0983      	lsrs	r3, r0, #6
 801280a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801280e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	f000 001f 	and.w	r0, r0, #31
 8012818:	4081      	lsls	r1, r0
 801281a:	ea22 0201 	bic.w	r2, r2, r1
 801281e:	601a      	str	r2, [r3, #0]
 8012820:	4770      	bx	lr

08012822 <rcu_periph_reset_enable>:
 8012822:	f7ff bfe3 	b.w	80127ec <rcu_periph_clock_enable>

08012826 <rcu_periph_reset_disable>:
 8012826:	f7ff bfee 	b.w	8012806 <rcu_periph_clock_disable>
	...

0801282c <rcu_bkp_reset_enable>:
 801282c:	4a02      	ldr	r2, [pc, #8]	; (8012838 <rcu_bkp_reset_enable+0xc>)
 801282e:	6a13      	ldr	r3, [r2, #32]
 8012830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012834:	6213      	str	r3, [r2, #32]
 8012836:	4770      	bx	lr
 8012838:	40021000 	andmi	r1, r2, r0

0801283c <rcu_bkp_reset_disable>:
 801283c:	4a02      	ldr	r2, [pc, #8]	; (8012848 <rcu_bkp_reset_disable+0xc>)
 801283e:	6a13      	ldr	r3, [r2, #32]
 8012840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012844:	6213      	str	r3, [r2, #32]
 8012846:	4770      	bx	lr
 8012848:	40021000 	andmi	r1, r2, r0

0801284c <rcu_ckout0_config>:
 801284c:	4a03      	ldr	r2, [pc, #12]	; (801285c <rcu_ckout0_config+0x10>)
 801284e:	6853      	ldr	r3, [r2, #4]
 8012850:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8012854:	4303      	orrs	r3, r0
 8012856:	6053      	str	r3, [r2, #4]
 8012858:	4770      	bx	lr
 801285a:	bf00      	nop
 801285c:	40021000 	andmi	r1, r2, r0

08012860 <rcu_pll2_config>:
 8012860:	4b04      	ldr	r3, [pc, #16]	; (8012874 <rcu_pll2_config+0x14>)
 8012862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012864:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8012868:	62da      	str	r2, [r3, #44]	; 0x2c
 801286a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801286c:	4302      	orrs	r2, r0
 801286e:	62da      	str	r2, [r3, #44]	; 0x2c
 8012870:	4770      	bx	lr
 8012872:	bf00      	nop
 8012874:	40021000 	andmi	r1, r2, r0

08012878 <rcu_adc_clock_config>:
 8012878:	490c      	ldr	r1, [pc, #48]	; (80128ac <rcu_adc_clock_config+0x34>)
 801287a:	2805      	cmp	r0, #5
 801287c:	684b      	ldr	r3, [r1, #4]
 801287e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012882:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8012886:	d006      	beq.n	8012896 <rcu_adc_clock_config+0x1e>
 8012888:	d803      	bhi.n	8012892 <rcu_adc_clock_config+0x1a>
 801288a:	2804      	cmp	r0, #4
 801288c:	d10a      	bne.n	80128a4 <rcu_adc_clock_config+0x2c>
 801288e:	604b      	str	r3, [r1, #4]
 8012890:	4770      	bx	lr
 8012892:	2807      	cmp	r0, #7
 8012894:	d1fb      	bne.n	801288e <rcu_adc_clock_config+0x16>
 8012896:	4a06      	ldr	r2, [pc, #24]	; (80128b0 <rcu_adc_clock_config+0x38>)
 8012898:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 801289c:	4313      	orrs	r3, r2
 801289e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128a2:	e7f4      	b.n	801288e <rcu_adc_clock_config+0x16>
 80128a4:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 80128a8:	e7f1      	b.n	801288e <rcu_adc_clock_config+0x16>
 80128aa:	bf00      	nop
 80128ac:	40021000 	andmi	r1, r2, r0
 80128b0:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

080128b4 <rcu_flag_get>:
 80128b4:	0983      	lsrs	r3, r0, #6
 80128b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80128ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80128be:	681a      	ldr	r2, [r3, #0]
 80128c0:	2301      	movs	r3, #1
 80128c2:	f000 001f 	and.w	r0, r0, #31
 80128c6:	4083      	lsls	r3, r0
 80128c8:	4213      	tst	r3, r2
 80128ca:	bf14      	ite	ne
 80128cc:	2001      	movne	r0, #1
 80128ce:	2000      	moveq	r0, #0
 80128d0:	4770      	bx	lr
	...

080128d4 <rcu_osci_stab_wait>:
 80128d4:	281a      	cmp	r0, #26
 80128d6:	b508      	push	{r3, lr}
 80128d8:	d051      	beq.n	801297e <rcu_osci_stab_wait+0xaa>
 80128da:	d806      	bhi.n	80128ea <rcu_osci_stab_wait+0x16>
 80128dc:	2810      	cmp	r0, #16
 80128de:	d015      	beq.n	801290c <rcu_osci_stab_wait+0x38>
 80128e0:	2818      	cmp	r0, #24
 80128e2:	d043      	beq.n	801296c <rcu_osci_stab_wait+0x98>
 80128e4:	b368      	cbz	r0, 8012942 <rcu_osci_stab_wait+0x6e>
 80128e6:	2000      	movs	r0, #0
 80128e8:	bd08      	pop	{r3, pc}
 80128ea:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80128ee:	d01c      	beq.n	801292a <rcu_osci_stab_wait+0x56>
 80128f0:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 80128f4:	d02f      	beq.n	8012956 <rcu_osci_stab_wait+0x82>
 80128f6:	281c      	cmp	r0, #28
 80128f8:	d1f5      	bne.n	80128e6 <rcu_osci_stab_wait+0x12>
 80128fa:	4925      	ldr	r1, [pc, #148]	; (8012990 <rcu_osci_stab_wait+0xbc>)
 80128fc:	201d      	movs	r0, #29
 80128fe:	f7ff ffd9 	bl	80128b4 <rcu_flag_get>
 8012902:	b908      	cbnz	r0, 8012908 <rcu_osci_stab_wait+0x34>
 8012904:	3901      	subs	r1, #1
 8012906:	d1f9      	bne.n	80128fc <rcu_osci_stab_wait+0x28>
 8012908:	201d      	movs	r0, #29
 801290a:	e008      	b.n	801291e <rcu_osci_stab_wait+0x4a>
 801290c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012910:	2011      	movs	r0, #17
 8012912:	f7ff ffcf 	bl	80128b4 <rcu_flag_get>
 8012916:	b908      	cbnz	r0, 801291c <rcu_osci_stab_wait+0x48>
 8012918:	3901      	subs	r1, #1
 801291a:	d1f9      	bne.n	8012910 <rcu_osci_stab_wait+0x3c>
 801291c:	2011      	movs	r0, #17
 801291e:	f7ff ffc9 	bl	80128b4 <rcu_flag_get>
 8012922:	3800      	subs	r0, #0
 8012924:	bf18      	it	ne
 8012926:	2001      	movne	r0, #1
 8012928:	e7de      	b.n	80128e8 <rcu_osci_stab_wait+0x14>
 801292a:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 801292e:	f640 0001 	movw	r0, #2049	; 0x801
 8012932:	f7ff ffbf 	bl	80128b4 <rcu_flag_get>
 8012936:	b908      	cbnz	r0, 801293c <rcu_osci_stab_wait+0x68>
 8012938:	3901      	subs	r1, #1
 801293a:	d1f8      	bne.n	801292e <rcu_osci_stab_wait+0x5a>
 801293c:	f640 0001 	movw	r0, #2049	; 0x801
 8012940:	e7ed      	b.n	801291e <rcu_osci_stab_wait+0x4a>
 8012942:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8012946:	2001      	movs	r0, #1
 8012948:	f7ff ffb4 	bl	80128b4 <rcu_flag_get>
 801294c:	b908      	cbnz	r0, 8012952 <rcu_osci_stab_wait+0x7e>
 801294e:	3901      	subs	r1, #1
 8012950:	d1f9      	bne.n	8012946 <rcu_osci_stab_wait+0x72>
 8012952:	2001      	movs	r0, #1
 8012954:	e7e3      	b.n	801291e <rcu_osci_stab_wait+0x4a>
 8012956:	490e      	ldr	r1, [pc, #56]	; (8012990 <rcu_osci_stab_wait+0xbc>)
 8012958:	f640 1001 	movw	r0, #2305	; 0x901
 801295c:	f7ff ffaa 	bl	80128b4 <rcu_flag_get>
 8012960:	b908      	cbnz	r0, 8012966 <rcu_osci_stab_wait+0x92>
 8012962:	3901      	subs	r1, #1
 8012964:	d1f8      	bne.n	8012958 <rcu_osci_stab_wait+0x84>
 8012966:	f640 1001 	movw	r0, #2305	; 0x901
 801296a:	e7d8      	b.n	801291e <rcu_osci_stab_wait+0x4a>
 801296c:	4908      	ldr	r1, [pc, #32]	; (8012990 <rcu_osci_stab_wait+0xbc>)
 801296e:	2019      	movs	r0, #25
 8012970:	f7ff ffa0 	bl	80128b4 <rcu_flag_get>
 8012974:	b908      	cbnz	r0, 801297a <rcu_osci_stab_wait+0xa6>
 8012976:	3901      	subs	r1, #1
 8012978:	d1f9      	bne.n	801296e <rcu_osci_stab_wait+0x9a>
 801297a:	2019      	movs	r0, #25
 801297c:	e7cf      	b.n	801291e <rcu_osci_stab_wait+0x4a>
 801297e:	4904      	ldr	r1, [pc, #16]	; (8012990 <rcu_osci_stab_wait+0xbc>)
 8012980:	201b      	movs	r0, #27
 8012982:	f7ff ff97 	bl	80128b4 <rcu_flag_get>
 8012986:	b908      	cbnz	r0, 801298c <rcu_osci_stab_wait+0xb8>
 8012988:	3901      	subs	r1, #1
 801298a:	d1f9      	bne.n	8012980 <rcu_osci_stab_wait+0xac>
 801298c:	201b      	movs	r0, #27
 801298e:	e7c6      	b.n	801291e <rcu_osci_stab_wait+0x4a>
 8012990:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08012994 <rcu_osci_on>:
 8012994:	f7ff bf2a 	b.w	80127ec <rcu_periph_clock_enable>

08012998 <rcu_clock_freq_get>:
 8012998:	4b3e      	ldr	r3, [pc, #248]	; (8012a94 <rcu_clock_freq_get+0xfc>)
 801299a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801299c:	4604      	mov	r4, r0
 801299e:	461f      	mov	r7, r3
 80129a0:	b089      	sub	sp, #36	; 0x24
 80129a2:	ad04      	add	r5, sp, #16
 80129a4:	f103 0610 	add.w	r6, r3, #16
 80129a8:	462a      	mov	r2, r5
 80129aa:	6818      	ldr	r0, [r3, #0]
 80129ac:	6859      	ldr	r1, [r3, #4]
 80129ae:	3308      	adds	r3, #8
 80129b0:	c203      	stmia	r2!, {r0, r1}
 80129b2:	42b3      	cmp	r3, r6
 80129b4:	4615      	mov	r5, r2
 80129b6:	d1f7      	bne.n	80129a8 <rcu_clock_freq_get+0x10>
 80129b8:	466b      	mov	r3, sp
 80129ba:	6938      	ldr	r0, [r7, #16]
 80129bc:	6871      	ldr	r1, [r6, #4]
 80129be:	4a36      	ldr	r2, [pc, #216]	; (8012a98 <rcu_clock_freq_get+0x100>)
 80129c0:	c303      	stmia	r3!, {r0, r1}
 80129c2:	c303      	stmia	r3!, {r0, r1}
 80129c4:	6853      	ldr	r3, [r2, #4]
 80129c6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80129ca:	2b01      	cmp	r3, #1
 80129cc:	d053      	beq.n	8012a76 <rcu_clock_freq_get+0xde>
 80129ce:	2b02      	cmp	r3, #2
 80129d0:	d153      	bne.n	8012a7a <rcu_clock_freq_get+0xe2>
 80129d2:	6853      	ldr	r3, [r2, #4]
 80129d4:	03dd      	lsls	r5, r3, #15
 80129d6:	d523      	bpl.n	8012a20 <rcu_clock_freq_get+0x88>
 80129d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80129da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80129de:	4b2f      	ldr	r3, [pc, #188]	; (8012a9c <rcu_clock_freq_get+0x104>)
 80129e0:	d00e      	beq.n	8012a00 <rcu_clock_freq_get+0x68>
 80129e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80129e4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80129e6:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80129ea:	f3c0 2003 	ubfx	r0, r0, #8, #4
 80129ee:	3101      	adds	r1, #1
 80129f0:	280f      	cmp	r0, #15
 80129f2:	f100 0502 	add.w	r5, r0, #2
 80129f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80129fa:	bf08      	it	eq
 80129fc:	2514      	moveq	r5, #20
 80129fe:	436b      	muls	r3, r5
 8012a00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8012a02:	f001 010f 	and.w	r1, r1, #15
 8012a06:	3101      	adds	r1, #1
 8012a08:	fbb3 f3f1 	udiv	r3, r3, r1
 8012a0c:	6851      	ldr	r1, [r2, #4]
 8012a0e:	6850      	ldr	r0, [r2, #4]
 8012a10:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8012a14:	0080      	lsls	r0, r0, #2
 8012a16:	d505      	bpl.n	8012a24 <rcu_clock_freq_get+0x8c>
 8012a18:	f041 0110 	orr.w	r1, r1, #16
 8012a1c:	1c48      	adds	r0, r1, #1
 8012a1e:	e007      	b.n	8012a30 <rcu_clock_freq_get+0x98>
 8012a20:	4b1f      	ldr	r3, [pc, #124]	; (8012aa0 <rcu_clock_freq_get+0x108>)
 8012a22:	e7f3      	b.n	8012a0c <rcu_clock_freq_get+0x74>
 8012a24:	290f      	cmp	r1, #15
 8012a26:	d0f9      	beq.n	8012a1c <rcu_clock_freq_get+0x84>
 8012a28:	290d      	cmp	r1, #13
 8012a2a:	f101 0002 	add.w	r0, r1, #2
 8012a2e:	d01d      	beq.n	8012a6c <rcu_clock_freq_get+0xd4>
 8012a30:	4358      	muls	r0, r3
 8012a32:	6853      	ldr	r3, [r2, #4]
 8012a34:	6851      	ldr	r1, [r2, #4]
 8012a36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8012a3a:	6852      	ldr	r2, [r2, #4]
 8012a3c:	3320      	adds	r3, #32
 8012a3e:	446b      	add	r3, sp
 8012a40:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8012a44:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8012a48:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8012a4c:	3120      	adds	r1, #32
 8012a4e:	3220      	adds	r2, #32
 8012a50:	4469      	add	r1, sp
 8012a52:	446a      	add	r2, sp
 8012a54:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8012a58:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8012a5c:	fa20 f303 	lsr.w	r3, r0, r3
 8012a60:	2c03      	cmp	r4, #3
 8012a62:	d815      	bhi.n	8012a90 <rcu_clock_freq_get+0xf8>
 8012a64:	e8df f004 	tbb	[pc, r4]
 8012a68:	110e0b0c 	tstne	lr, ip, lsl #22
 8012a6c:	2006      	movs	r0, #6
 8012a6e:	0859      	lsrs	r1, r3, #1
 8012a70:	fb00 1003 	mla	r0, r0, r3, r1
 8012a74:	e7dd      	b.n	8012a32 <rcu_clock_freq_get+0x9a>
 8012a76:	4809      	ldr	r0, [pc, #36]	; (8012a9c <rcu_clock_freq_get+0x104>)
 8012a78:	e7db      	b.n	8012a32 <rcu_clock_freq_get+0x9a>
 8012a7a:	480a      	ldr	r0, [pc, #40]	; (8012aa4 <rcu_clock_freq_get+0x10c>)
 8012a7c:	e7d9      	b.n	8012a32 <rcu_clock_freq_get+0x9a>
 8012a7e:	4618      	mov	r0, r3
 8012a80:	b009      	add	sp, #36	; 0x24
 8012a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a84:	fa23 f001 	lsr.w	r0, r3, r1
 8012a88:	e7fa      	b.n	8012a80 <rcu_clock_freq_get+0xe8>
 8012a8a:	fa23 f002 	lsr.w	r0, r3, r2
 8012a8e:	e7f7      	b.n	8012a80 <rcu_clock_freq_get+0xe8>
 8012a90:	2000      	movs	r0, #0
 8012a92:	e7f5      	b.n	8012a80 <rcu_clock_freq_get+0xe8>
 8012a94:	080142c0 	stmdaeq	r1, {r6, r7, r9, lr}
 8012a98:	40021000 	andmi	r1, r2, r0
 8012a9c:	017d7840 	cmneq	sp, r0, asr #16
 8012aa0:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8012aa4:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08012aa8 <timer_deinit>:
 8012aa8:	b508      	push	{r3, lr}
 8012aaa:	4b2d      	ldr	r3, [pc, #180]	; (8012b60 <timer_deinit+0xb8>)
 8012aac:	4298      	cmp	r0, r3
 8012aae:	d048      	beq.n	8012b42 <timer_deinit+0x9a>
 8012ab0:	d816      	bhi.n	8012ae0 <timer_deinit+0x38>
 8012ab2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8012ab6:	4298      	cmp	r0, r3
 8012ab8:	d03c      	beq.n	8012b34 <timer_deinit+0x8c>
 8012aba:	d807      	bhi.n	8012acc <timer_deinit+0x24>
 8012abc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012ac0:	d02a      	beq.n	8012b18 <timer_deinit+0x70>
 8012ac2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012ac6:	4298      	cmp	r0, r3
 8012ac8:	d02d      	beq.n	8012b26 <timer_deinit+0x7e>
 8012aca:	bd08      	pop	{r3, pc}
 8012acc:	4b25      	ldr	r3, [pc, #148]	; (8012b64 <timer_deinit+0xbc>)
 8012ace:	4298      	cmp	r0, r3
 8012ad0:	d1fb      	bne.n	8012aca <timer_deinit+0x22>
 8012ad2:	f240 4003 	movw	r0, #1027	; 0x403
 8012ad6:	f7ff fea4 	bl	8012822 <rcu_periph_reset_enable>
 8012ada:	f240 4003 	movw	r0, #1027	; 0x403
 8012ade:	e017      	b.n	8012b10 <timer_deinit+0x68>
 8012ae0:	4b21      	ldr	r3, [pc, #132]	; (8012b68 <timer_deinit+0xc0>)
 8012ae2:	4298      	cmp	r0, r3
 8012ae4:	d00e      	beq.n	8012b04 <timer_deinit+0x5c>
 8012ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012aea:	4298      	cmp	r0, r3
 8012aec:	d030      	beq.n	8012b50 <timer_deinit+0xa8>
 8012aee:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8012af2:	4298      	cmp	r0, r3
 8012af4:	d1e9      	bne.n	8012aca <timer_deinit+0x22>
 8012af6:	f240 4005 	movw	r0, #1029	; 0x405
 8012afa:	f7ff fe92 	bl	8012822 <rcu_periph_reset_enable>
 8012afe:	f240 4005 	movw	r0, #1029	; 0x405
 8012b02:	e005      	b.n	8012b10 <timer_deinit+0x68>
 8012b04:	f240 300b 	movw	r0, #779	; 0x30b
 8012b08:	f7ff fe8b 	bl	8012822 <rcu_periph_reset_enable>
 8012b0c:	f240 300b 	movw	r0, #779	; 0x30b
 8012b10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012b14:	f7ff be87 	b.w	8012826 <rcu_periph_reset_disable>
 8012b18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012b1c:	f7ff fe81 	bl	8012822 <rcu_periph_reset_enable>
 8012b20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012b24:	e7f4      	b.n	8012b10 <timer_deinit+0x68>
 8012b26:	f240 4001 	movw	r0, #1025	; 0x401
 8012b2a:	f7ff fe7a 	bl	8012822 <rcu_periph_reset_enable>
 8012b2e:	f240 4001 	movw	r0, #1025	; 0x401
 8012b32:	e7ed      	b.n	8012b10 <timer_deinit+0x68>
 8012b34:	f240 4002 	movw	r0, #1026	; 0x402
 8012b38:	f7ff fe73 	bl	8012822 <rcu_periph_reset_enable>
 8012b3c:	f240 4002 	movw	r0, #1026	; 0x402
 8012b40:	e7e6      	b.n	8012b10 <timer_deinit+0x68>
 8012b42:	f240 4004 	movw	r0, #1028	; 0x404
 8012b46:	f7ff fe6c 	bl	8012822 <rcu_periph_reset_enable>
 8012b4a:	f240 4004 	movw	r0, #1028	; 0x404
 8012b4e:	e7df      	b.n	8012b10 <timer_deinit+0x68>
 8012b50:	f240 300d 	movw	r0, #781	; 0x30d
 8012b54:	f7ff fe65 	bl	8012822 <rcu_periph_reset_enable>
 8012b58:	f240 300d 	movw	r0, #781	; 0x30d
 8012b5c:	e7d8      	b.n	8012b10 <timer_deinit+0x68>
 8012b5e:	bf00      	nop
 8012b60:	40001000 	andmi	r1, r0, r0
 8012b64:	40000c00 	andmi	r0, r0, r0, lsl #24
 8012b68:	40012c00 	andmi	r2, r1, r0, lsl #24

08012b6c <timer_init>:
 8012b6c:	880b      	ldrh	r3, [r1, #0]
 8012b6e:	6283      	str	r3, [r0, #40]	; 0x28
 8012b70:	4b26      	ldr	r3, [pc, #152]	; (8012c0c <timer_init+0xa0>)
 8012b72:	4298      	cmp	r0, r3
 8012b74:	d018      	beq.n	8012ba8 <timer_init+0x3c>
 8012b76:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8012b7a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8012b7e:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8012b82:	d011      	beq.n	8012ba8 <timer_init+0x3c>
 8012b84:	4a22      	ldr	r2, [pc, #136]	; (8012c10 <timer_init+0xa4>)
 8012b86:	4290      	cmp	r0, r2
 8012b88:	d00e      	beq.n	8012ba8 <timer_init+0x3c>
 8012b8a:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8012b8e:	4290      	cmp	r0, r2
 8012b90:	d00a      	beq.n	8012ba8 <timer_init+0x3c>
 8012b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d006      	beq.n	8012ba8 <timer_init+0x3c>
 8012b9a:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8012b9e:	4293      	cmp	r3, r2
 8012ba0:	d002      	beq.n	8012ba8 <timer_init+0x3c>
 8012ba2:	4b1c      	ldr	r3, [pc, #112]	; (8012c14 <timer_init+0xa8>)
 8012ba4:	4298      	cmp	r0, r3
 8012ba6:	d10f      	bne.n	8012bc8 <timer_init+0x5c>
 8012ba8:	6803      	ldr	r3, [r0, #0]
 8012baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012bae:	6003      	str	r3, [r0, #0]
 8012bb0:	884b      	ldrh	r3, [r1, #2]
 8012bb2:	6802      	ldr	r2, [r0, #0]
 8012bb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012bb8:	4313      	orrs	r3, r2
 8012bba:	6003      	str	r3, [r0, #0]
 8012bbc:	888b      	ldrh	r3, [r1, #4]
 8012bbe:	6802      	ldr	r2, [r0, #0]
 8012bc0:	f003 0310 	and.w	r3, r3, #16
 8012bc4:	4313      	orrs	r3, r2
 8012bc6:	6003      	str	r3, [r0, #0]
 8012bc8:	688b      	ldr	r3, [r1, #8]
 8012bca:	62c3      	str	r3, [r0, #44]	; 0x2c
 8012bcc:	4b12      	ldr	r3, [pc, #72]	; (8012c18 <timer_init+0xac>)
 8012bce:	4298      	cmp	r0, r3
 8012bd0:	d003      	beq.n	8012bda <timer_init+0x6e>
 8012bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012bd6:	4298      	cmp	r0, r3
 8012bd8:	d104      	bne.n	8012be4 <timer_init+0x78>
 8012bda:	6943      	ldr	r3, [r0, #20]
 8012bdc:	f043 0301 	orr.w	r3, r3, #1
 8012be0:	6143      	str	r3, [r0, #20]
 8012be2:	4770      	bx	lr
 8012be4:	6803      	ldr	r3, [r0, #0]
 8012be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012bea:	6003      	str	r3, [r0, #0]
 8012bec:	898b      	ldrh	r3, [r1, #12]
 8012bee:	6802      	ldr	r2, [r0, #0]
 8012bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012bf4:	4313      	orrs	r3, r2
 8012bf6:	6003      	str	r3, [r0, #0]
 8012bf8:	4b04      	ldr	r3, [pc, #16]	; (8012c0c <timer_init+0xa0>)
 8012bfa:	4298      	cmp	r0, r3
 8012bfc:	d002      	beq.n	8012c04 <timer_init+0x98>
 8012bfe:	4b04      	ldr	r3, [pc, #16]	; (8012c10 <timer_init+0xa4>)
 8012c00:	4298      	cmp	r0, r3
 8012c02:	d1ea      	bne.n	8012bda <timer_init+0x6e>
 8012c04:	7b8b      	ldrb	r3, [r1, #14]
 8012c06:	6303      	str	r3, [r0, #48]	; 0x30
 8012c08:	e7e7      	b.n	8012bda <timer_init+0x6e>
 8012c0a:	bf00      	nop
 8012c0c:	40012c00 	andmi	r2, r1, r0, lsl #24
 8012c10:	40013400 	andmi	r3, r1, r0, lsl #8
 8012c14:	40002000 	andmi	r2, r0, r0
 8012c18:	40001000 	andmi	r1, r0, r0

08012c1c <timer_enable>:
 8012c1c:	6803      	ldr	r3, [r0, #0]
 8012c1e:	f043 0301 	orr.w	r3, r3, #1
 8012c22:	6003      	str	r3, [r0, #0]
 8012c24:	4770      	bx	lr
	...

08012c28 <usart_deinit>:
 8012c28:	b508      	push	{r3, lr}
 8012c2a:	4b1d      	ldr	r3, [pc, #116]	; (8012ca0 <usart_deinit+0x78>)
 8012c2c:	4298      	cmp	r0, r3
 8012c2e:	d028      	beq.n	8012c82 <usart_deinit+0x5a>
 8012c30:	d808      	bhi.n	8012c44 <usart_deinit+0x1c>
 8012c32:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8012c36:	4298      	cmp	r0, r3
 8012c38:	d015      	beq.n	8012c66 <usart_deinit+0x3e>
 8012c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012c3e:	4298      	cmp	r0, r3
 8012c40:	d018      	beq.n	8012c74 <usart_deinit+0x4c>
 8012c42:	bd08      	pop	{r3, pc}
 8012c44:	4b17      	ldr	r3, [pc, #92]	; (8012ca4 <usart_deinit+0x7c>)
 8012c46:	4298      	cmp	r0, r3
 8012c48:	d022      	beq.n	8012c90 <usart_deinit+0x68>
 8012c4a:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8012c4e:	4298      	cmp	r0, r3
 8012c50:	d1f7      	bne.n	8012c42 <usart_deinit+0x1a>
 8012c52:	f240 300e 	movw	r0, #782	; 0x30e
 8012c56:	f7ff fde4 	bl	8012822 <rcu_periph_reset_enable>
 8012c5a:	f240 300e 	movw	r0, #782	; 0x30e
 8012c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012c62:	f7ff bde0 	b.w	8012826 <rcu_periph_reset_disable>
 8012c66:	f240 4011 	movw	r0, #1041	; 0x411
 8012c6a:	f7ff fdda 	bl	8012822 <rcu_periph_reset_enable>
 8012c6e:	f240 4011 	movw	r0, #1041	; 0x411
 8012c72:	e7f4      	b.n	8012c5e <usart_deinit+0x36>
 8012c74:	f240 4012 	movw	r0, #1042	; 0x412
 8012c78:	f7ff fdd3 	bl	8012822 <rcu_periph_reset_enable>
 8012c7c:	f240 4012 	movw	r0, #1042	; 0x412
 8012c80:	e7ed      	b.n	8012c5e <usart_deinit+0x36>
 8012c82:	f240 4013 	movw	r0, #1043	; 0x413
 8012c86:	f7ff fdcc 	bl	8012822 <rcu_periph_reset_enable>
 8012c8a:	f240 4013 	movw	r0, #1043	; 0x413
 8012c8e:	e7e6      	b.n	8012c5e <usart_deinit+0x36>
 8012c90:	f240 4014 	movw	r0, #1044	; 0x414
 8012c94:	f7ff fdc5 	bl	8012822 <rcu_periph_reset_enable>
 8012c98:	f240 4014 	movw	r0, #1044	; 0x414
 8012c9c:	e7df      	b.n	8012c5e <usart_deinit+0x36>
 8012c9e:	bf00      	nop
 8012ca0:	40004c00 	andmi	r4, r0, r0, lsl #24
 8012ca4:	40005000 	andmi	r5, r0, r0

08012ca8 <usart_baudrate_set>:
 8012ca8:	b538      	push	{r3, r4, r5, lr}
 8012caa:	4b11      	ldr	r3, [pc, #68]	; (8012cf0 <usart_baudrate_set+0x48>)
 8012cac:	4604      	mov	r4, r0
 8012cae:	4298      	cmp	r0, r3
 8012cb0:	460d      	mov	r5, r1
 8012cb2:	d01b      	beq.n	8012cec <usart_baudrate_set+0x44>
 8012cb4:	d809      	bhi.n	8012cca <usart_baudrate_set+0x22>
 8012cb6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8012cba:	4298      	cmp	r0, r3
 8012cbc:	d016      	beq.n	8012cec <usart_baudrate_set+0x44>
 8012cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012cc2:	4298      	cmp	r0, r3
 8012cc4:	d012      	beq.n	8012cec <usart_baudrate_set+0x44>
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	e009      	b.n	8012cde <usart_baudrate_set+0x36>
 8012cca:	4b0a      	ldr	r3, [pc, #40]	; (8012cf4 <usart_baudrate_set+0x4c>)
 8012ccc:	4298      	cmp	r0, r3
 8012cce:	d00d      	beq.n	8012cec <usart_baudrate_set+0x44>
 8012cd0:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8012cd4:	4298      	cmp	r0, r3
 8012cd6:	d1f6      	bne.n	8012cc6 <usart_baudrate_set+0x1e>
 8012cd8:	2003      	movs	r0, #3
 8012cda:	f7ff fe5d 	bl	8012998 <rcu_clock_freq_get>
 8012cde:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 8012ce2:	fbb1 f1f5 	udiv	r1, r1, r5
 8012ce6:	b289      	uxth	r1, r1
 8012ce8:	60a1      	str	r1, [r4, #8]
 8012cea:	bd38      	pop	{r3, r4, r5, pc}
 8012cec:	2002      	movs	r0, #2
 8012cee:	e7f4      	b.n	8012cda <usart_baudrate_set+0x32>
 8012cf0:	40004c00 	andmi	r4, r0, r0, lsl #24
 8012cf4:	40005000 	andmi	r5, r0, r0

08012cf8 <usart_parity_config>:
 8012cf8:	68c3      	ldr	r3, [r0, #12]
 8012cfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8012cfe:	60c3      	str	r3, [r0, #12]
 8012d00:	68c3      	ldr	r3, [r0, #12]
 8012d02:	430b      	orrs	r3, r1
 8012d04:	60c3      	str	r3, [r0, #12]
 8012d06:	4770      	bx	lr

08012d08 <usart_word_length_set>:
 8012d08:	68c3      	ldr	r3, [r0, #12]
 8012d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012d0e:	60c3      	str	r3, [r0, #12]
 8012d10:	68c3      	ldr	r3, [r0, #12]
 8012d12:	430b      	orrs	r3, r1
 8012d14:	60c3      	str	r3, [r0, #12]
 8012d16:	4770      	bx	lr

08012d18 <usart_stop_bit_set>:
 8012d18:	6903      	ldr	r3, [r0, #16]
 8012d1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8012d1e:	6103      	str	r3, [r0, #16]
 8012d20:	6903      	ldr	r3, [r0, #16]
 8012d22:	430b      	orrs	r3, r1
 8012d24:	6103      	str	r3, [r0, #16]
 8012d26:	4770      	bx	lr

08012d28 <usart_transmit_config>:
 8012d28:	68c3      	ldr	r3, [r0, #12]
 8012d2a:	f023 0308 	bic.w	r3, r3, #8
 8012d2e:	430b      	orrs	r3, r1
 8012d30:	60c3      	str	r3, [r0, #12]
 8012d32:	4770      	bx	lr

08012d34 <usart_receive_config>:
 8012d34:	68c3      	ldr	r3, [r0, #12]
 8012d36:	f023 0304 	bic.w	r3, r3, #4
 8012d3a:	430b      	orrs	r3, r1
 8012d3c:	60c3      	str	r3, [r0, #12]
 8012d3e:	4770      	bx	lr

08012d40 <usart_hardware_flow_rts_config>:
 8012d40:	6943      	ldr	r3, [r0, #20]
 8012d42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012d46:	430b      	orrs	r3, r1
 8012d48:	6143      	str	r3, [r0, #20]
 8012d4a:	4770      	bx	lr

08012d4c <usart_hardware_flow_cts_config>:
 8012d4c:	6943      	ldr	r3, [r0, #20]
 8012d4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012d52:	430b      	orrs	r3, r1
 8012d54:	6143      	str	r3, [r0, #20]
 8012d56:	4770      	bx	lr

08012d58 <usart_flag_get>:
 8012d58:	098b      	lsrs	r3, r1, #6
 8012d5a:	581a      	ldr	r2, [r3, r0]
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	f001 011f 	and.w	r1, r1, #31
 8012d62:	408b      	lsls	r3, r1
 8012d64:	4213      	tst	r3, r2
 8012d66:	bf14      	ite	ne
 8012d68:	2001      	movne	r0, #1
 8012d6a:	2000      	moveq	r0, #0
 8012d6c:	4770      	bx	lr
	...

08012d70 <emac_start>:
 8012d70:	b510      	push	{r4, lr}
 8012d72:	4604      	mov	r4, r0
 8012d74:	f240 6002 	movw	r0, #1538	; 0x602
 8012d78:	f7ff fd38 	bl	80127ec <rcu_periph_clock_enable>
 8012d7c:	f240 6003 	movw	r0, #1539	; 0x603
 8012d80:	f7ff fd34 	bl	80127ec <rcu_periph_clock_enable>
 8012d84:	f240 6004 	movw	r0, #1540	; 0x604
 8012d88:	f7ff fd30 	bl	80127ec <rcu_periph_clock_enable>
 8012d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d90:	2203      	movs	r2, #3
 8012d92:	2118      	movs	r1, #24
 8012d94:	4846      	ldr	r0, [pc, #280]	; (8012eb0 <emac_start+0x140>)
 8012d96:	f7ff fc91 	bl	80126bc <gpio_init>
 8012d9a:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8012d9e:	f7ff fd25 	bl	80127ec <rcu_periph_clock_enable>
 8012da2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012da6:	f7ff fd5b 	bl	8012860 <rcu_pll2_config>
 8012daa:	201c      	movs	r0, #28
 8012dac:	f7ff fdf2 	bl	8012994 <rcu_osci_on>
 8012db0:	201c      	movs	r0, #28
 8012db2:	f7ff fd8f 	bl	80128d4 <rcu_osci_stab_wait>
 8012db6:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8012dba:	f7ff fd47 	bl	801284c <rcu_ckout0_config>
 8012dbe:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8012dc2:	f7ff fcff 	bl	80127c4 <gpio_ethernet_phy_select>
 8012dc6:	2302      	movs	r3, #2
 8012dc8:	2203      	movs	r2, #3
 8012dca:	2104      	movs	r1, #4
 8012dcc:	4838      	ldr	r0, [pc, #224]	; (8012eb0 <emac_start+0x140>)
 8012dce:	f7ff fc75 	bl	80126bc <gpio_init>
 8012dd2:	2304      	movs	r3, #4
 8012dd4:	2203      	movs	r2, #3
 8012dd6:	2118      	movs	r1, #24
 8012dd8:	4835      	ldr	r0, [pc, #212]	; (8012eb0 <emac_start+0x140>)
 8012dda:	f7ff fc6f 	bl	80126bc <gpio_init>
 8012dde:	2380      	movs	r3, #128	; 0x80
 8012de0:	2203      	movs	r2, #3
 8012de2:	2104      	movs	r1, #4
 8012de4:	4832      	ldr	r0, [pc, #200]	; (8012eb0 <emac_start+0x140>)
 8012de6:	f7ff fc69 	bl	80126bc <gpio_init>
 8012dea:	2302      	movs	r3, #2
 8012dec:	2203      	movs	r2, #3
 8012dee:	2118      	movs	r1, #24
 8012df0:	4830      	ldr	r0, [pc, #192]	; (8012eb4 <emac_start+0x144>)
 8012df2:	f7ff fc63 	bl	80126bc <gpio_init>
 8012df6:	2310      	movs	r3, #16
 8012df8:	2203      	movs	r2, #3
 8012dfa:	2104      	movs	r1, #4
 8012dfc:	482d      	ldr	r0, [pc, #180]	; (8012eb4 <emac_start+0x144>)
 8012dfe:	f7ff fc5d 	bl	80126bc <gpio_init>
 8012e02:	2320      	movs	r3, #32
 8012e04:	2203      	movs	r2, #3
 8012e06:	2104      	movs	r1, #4
 8012e08:	482a      	ldr	r0, [pc, #168]	; (8012eb4 <emac_start+0x144>)
 8012e0a:	f7ff fc57 	bl	80126bc <gpio_init>
 8012e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012e12:	2203      	movs	r2, #3
 8012e14:	2118      	movs	r1, #24
 8012e16:	4828      	ldr	r0, [pc, #160]	; (8012eb8 <emac_start+0x148>)
 8012e18:	f7ff fc50 	bl	80126bc <gpio_init>
 8012e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e20:	2203      	movs	r2, #3
 8012e22:	2118      	movs	r1, #24
 8012e24:	4824      	ldr	r0, [pc, #144]	; (8012eb8 <emac_start+0x148>)
 8012e26:	f7ff fc49 	bl	80126bc <gpio_init>
 8012e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012e2e:	2203      	movs	r2, #3
 8012e30:	2118      	movs	r1, #24
 8012e32:	4821      	ldr	r0, [pc, #132]	; (8012eb8 <emac_start+0x148>)
 8012e34:	f7ff fc42 	bl	80126bc <gpio_init>
 8012e38:	f240 500e 	movw	r0, #1294	; 0x50e
 8012e3c:	f7ff fcd6 	bl	80127ec <rcu_periph_clock_enable>
 8012e40:	f240 500f 	movw	r0, #1295	; 0x50f
 8012e44:	f7ff fcd2 	bl	80127ec <rcu_periph_clock_enable>
 8012e48:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8012e4c:	f7ff fcce 	bl	80127ec <rcu_periph_clock_enable>
 8012e50:	f001 f8dc 	bl	801400c <enet_deinit>
 8012e54:	f000 fd3a 	bl	80138cc <enet_software_reset>
 8012e58:	b900      	cbnz	r0, 8012e5c <emac_start+0xec>
 8012e5a:	e7fe      	b.n	8012e5a <emac_start+0xea>
 8012e5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012e64:	2001      	movs	r0, #1
 8012e66:	f000 feb5 	bl	8013bd4 <enet_init>
 8012e6a:	4b14      	ldr	r3, [pc, #80]	; (8012ebc <emac_start+0x14c>)
 8012e6c:	6018      	str	r0, [r3, #0]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	b903      	cbnz	r3, 8012e74 <emac_start+0x104>
 8012e72:	e7fe      	b.n	8012e72 <emac_start+0x102>
 8012e74:	4620      	mov	r0, r4
 8012e76:	f000 fba3 	bl	80135c0 <mac_address_get>
 8012e7a:	4621      	mov	r1, r4
 8012e7c:	2000      	movs	r0, #0
 8012e7e:	f000 fe09 	bl	8013a94 <enet_mac_address_set>
 8012e82:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8012e86:	f000 fd35 	bl	80138f4 <enet_descriptors_chain_init>
 8012e8a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8012e8e:	f000 fd31 	bl	80138f4 <enet_descriptors_chain_init>
 8012e92:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8012e96:	480a      	ldr	r0, [pc, #40]	; (8012ec0 <emac_start+0x150>)
 8012e98:	f000 fdf6 	bl	8013a88 <enet_transmit_checksum_config>
 8012e9c:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8012ea0:	4808      	ldr	r0, [pc, #32]	; (8012ec4 <emac_start+0x154>)
 8012ea2:	f000 fdf1 	bl	8013a88 <enet_transmit_checksum_config>
 8012ea6:	f001 f829 	bl	8013efc <enet_enable>
 8012eaa:	2001      	movs	r0, #1
 8012eac:	bd10      	pop	{r4, pc}
 8012eae:	bf00      	nop
 8012eb0:	40010800 	andmi	r0, r1, r0, lsl #16
 8012eb4:	40011000 	andmi	r1, r1, r0
 8012eb8:	40010c00 	andmi	r0, r1, r0, lsl #24
 8012ebc:	2000a9d0 	ldrdcs	sl, [r0], -r0
 8012ec0:	2001462c 	andcs	r4, r1, ip, lsr #12
 8012ec4:	2001463c 	andcs	r4, r1, ip, lsr r6

08012ec8 <emac_eth_recv>:
 8012ec8:	b538      	push	{r3, r4, r5, lr}
 8012eca:	4605      	mov	r5, r0
 8012ecc:	f001 f86e 	bl	8013fac <enet_rxframe_size_get>
 8012ed0:	4604      	mov	r4, r0
 8012ed2:	b138      	cbz	r0, 8012ee4 <emac_eth_recv+0x1c>
 8012ed4:	4b05      	ldr	r3, [pc, #20]	; (8012eec <emac_eth_recv+0x24>)
 8012ed6:	2105      	movs	r1, #5
 8012ed8:	6818      	ldr	r0, [r3, #0]
 8012eda:	f001 f816 	bl	8013f0a <enet_desc_information_get>
 8012ede:	6028      	str	r0, [r5, #0]
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	bd38      	pop	{r3, r4, r5, pc}
 8012ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ee8:	e7fb      	b.n	8012ee2 <emac_eth_recv+0x1a>
 8012eea:	bf00      	nop
 8012eec:	200109e0 	andcs	r0, r1, r0, ror #19

08012ef0 <emac_free_pkt>:
 8012ef0:	2100      	movs	r1, #0
 8012ef2:	4608      	mov	r0, r1
 8012ef4:	f000 bd46 	b.w	8013984 <enet_frame_receive>

08012ef8 <emac_eth_send>:
 8012ef8:	f000 bd84 	b.w	8013a04 <enet_frame_transmit>

08012efc <gd32_adc_init()>:
 8012efc:	b510      	push	{r4, lr}
 8012efe:	f240 6009 	movw	r0, #1545	; 0x609
 8012f02:	4c21      	ldr	r4, [pc, #132]	; (8012f88 <gd32_adc_init()+0x8c>)
 8012f04:	f7ff fc72 	bl	80127ec <rcu_periph_clock_enable>
 8012f08:	2005      	movs	r0, #5
 8012f0a:	f7ff fcb5 	bl	8012878 <rcu_adc_clock_config>
 8012f0e:	4620      	mov	r0, r4
 8012f10:	2201      	movs	r2, #1
 8012f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012f16:	f000 fb75 	bl	8013604 <adc_special_function_config>
 8012f1a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8012f1e:	4620      	mov	r0, r4
 8012f20:	2102      	movs	r1, #2
 8012f22:	f000 fc0e 	bl	8013742 <adc_external_trigger_source_config>
 8012f26:	2100      	movs	r1, #0
 8012f28:	4620      	mov	r0, r4
 8012f2a:	f000 fb93 	bl	8013654 <adc_data_alignment_config>
 8012f2e:	2000      	movs	r0, #0
 8012f30:	f000 fb58 	bl	80135e4 <adc_mode_config>
 8012f34:	2202      	movs	r2, #2
 8012f36:	4620      	mov	r0, r4
 8012f38:	4611      	mov	r1, r2
 8012f3a:	f000 fbb7 	bl	80136ac <adc_channel_length_config>
 8012f3e:	4620      	mov	r0, r4
 8012f40:	2307      	movs	r3, #7
 8012f42:	2210      	movs	r2, #16
 8012f44:	2100      	movs	r1, #0
 8012f46:	f000 fbce 	bl	80136e6 <adc_inserted_channel_config>
 8012f4a:	2307      	movs	r3, #7
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	2211      	movs	r2, #17
 8012f50:	2101      	movs	r1, #1
 8012f52:	f000 fbc8 	bl	80136e6 <adc_inserted_channel_config>
 8012f56:	2201      	movs	r2, #1
 8012f58:	2102      	movs	r1, #2
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f000 fc02 	bl	8013764 <adc_external_trigger_config>
 8012f60:	f000 fb9a 	bl	8013698 <adc_tempsensor_vrefint_enable>
 8012f64:	4620      	mov	r0, r4
 8012f66:	f000 fb7e 	bl	8013666 <adc_enable>
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012f70:	f000 fb0e 	bl	8013590 <udelay(unsigned int, unsigned int)>
 8012f74:	4620      	mov	r0, r4
 8012f76:	f000 fb7e 	bl	8013676 <adc_calibration_enable>
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f80:	2102      	movs	r1, #2
 8012f82:	f000 bc0a 	b.w	801379a <adc_software_trigger_enable>
 8012f86:	bf00      	nop
 8012f88:	40012400 	andmi	r2, r1, r0, lsl #8

08012f8c <_stop() [clone .isra.0]>:
 8012f8c:	b508      	push	{r3, lr}
 8012f8e:	4806      	ldr	r0, [pc, #24]	; (8012fa8 <_stop() [clone .isra.0]+0x1c>)
 8012f90:	f001 f8d0 	bl	8014134 <i2c_stop_on_bus>
 8012f94:	f640 73ff 	movw	r3, #4095	; 0xfff
 8012f98:	4904      	ldr	r1, [pc, #16]	; (8012fac <_stop() [clone .isra.0]+0x20>)
 8012f9a:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8012f9e:	0592      	lsls	r2, r2, #22
 8012fa0:	d501      	bpl.n	8012fa6 <_stop() [clone .isra.0]+0x1a>
 8012fa2:	3b01      	subs	r3, #1
 8012fa4:	d1f9      	bne.n	8012f9a <_stop() [clone .isra.0]+0xe>
 8012fa6:	bd08      	pop	{r3, pc}
 8012fa8:	40005400 	andmi	r5, r0, r0, lsl #8
 8012fac:	40005000 	andmi	r5, r0, r0

08012fb0 <gd32_i2c_begin()>:
 8012fb0:	b510      	push	{r4, lr}
 8012fb2:	f240 7015 	movw	r0, #1813	; 0x715
 8012fb6:	f7ff fc19 	bl	80127ec <rcu_periph_clock_enable>
 8012fba:	4c15      	ldr	r4, [pc, #84]	; (8013010 <gd32_i2c_begin()+0x60>)
 8012fbc:	f240 6003 	movw	r0, #1539	; 0x603
 8012fc0:	f7ff fc14 	bl	80127ec <rcu_periph_clock_enable>
 8012fc4:	f240 6003 	movw	r0, #1539	; 0x603
 8012fc8:	f7ff fc10 	bl	80127ec <rcu_periph_clock_enable>
 8012fcc:	4620      	mov	r0, r4
 8012fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fd2:	2203      	movs	r2, #3
 8012fd4:	211c      	movs	r1, #28
 8012fd6:	f7ff fb71 	bl	80126bc <gpio_init>
 8012fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012fde:	2203      	movs	r2, #3
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	211c      	movs	r1, #28
 8012fe4:	f7ff fb6a 	bl	80126bc <gpio_init>
 8012fe8:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8012fec:	2101      	movs	r1, #1
 8012fee:	2002      	movs	r0, #2
 8012ff0:	f7ff fbb8 	bl	8012764 <gpio_pin_remap_config>
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	4907      	ldr	r1, [pc, #28]	; (8013014 <gd32_i2c_begin()+0x64>)
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	f001 f815 	bl	8014028 <i2c_clock_config>
 8012ffe:	4620      	mov	r0, r4
 8013000:	f001 f88e 	bl	8014120 <i2c_enable>
 8013004:	4620      	mov	r0, r4
 8013006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801300a:	2101      	movs	r1, #1
 801300c:	f001 b86e 	b.w	80140ec <i2c_ack_config>
 8013010:	40010c00 	andmi	r0, r1, r0, lsl #24
 8013014:	00061a80 	andeq	r1, r6, r0, lsl #21

08013018 <gd32_i2c_set_baudrate(unsigned int)>:
 8013018:	4601      	mov	r1, r0
 801301a:	2200      	movs	r2, #0
 801301c:	4801      	ldr	r0, [pc, #4]	; (8013024 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 801301e:	f001 b803 	b.w	8014028 <i2c_clock_config>
 8013022:	bf00      	nop
 8013024:	40005400 	andmi	r5, r0, r0, lsl #8

08013028 <gd32_i2c_set_address(unsigned char)>:
 8013028:	4b01      	ldr	r3, [pc, #4]	; (8013030 <gd32_i2c_set_address(unsigned char)+0x8>)
 801302a:	0040      	lsls	r0, r0, #1
 801302c:	7018      	strb	r0, [r3, #0]
 801302e:	4770      	bx	lr
 8013030:	2000a9d4 	ldrdcs	sl, [r0], -r4

08013034 <gd32_i2c_write(char const*, unsigned int)>:
 8013034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013036:	4604      	mov	r4, r0
 8013038:	460f      	mov	r7, r1
 801303a:	f640 75ff 	movw	r5, #4095	; 0xfff
 801303e:	4e2e      	ldr	r6, [pc, #184]	; (80130f8 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8013040:	f240 6101 	movw	r1, #1537	; 0x601
 8013044:	4630      	mov	r0, r6
 8013046:	f001 f87f 	bl	8014148 <i2c_flag_get>
 801304a:	b9b0      	cbnz	r0, 801307a <gd32_i2c_write(char const*, unsigned int)+0x46>
 801304c:	482a      	ldr	r0, [pc, #168]	; (80130f8 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801304e:	f001 f86c 	bl	801412a <i2c_start_on_bus>
 8013052:	f640 75ff 	movw	r5, #4095	; 0xfff
 8013056:	4e28      	ldr	r6, [pc, #160]	; (80130f8 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8013058:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 801305c:	4630      	mov	r0, r6
 801305e:	f001 f873 	bl	8014148 <i2c_flag_get>
 8013062:	b190      	cbz	r0, 801308a <gd32_i2c_write(char const*, unsigned int)+0x56>
 8013064:	4b25      	ldr	r3, [pc, #148]	; (80130fc <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 8013066:	f06f 0201 	mvn.w	r2, #1
 801306a:	7819      	ldrb	r1, [r3, #0]
 801306c:	4822      	ldr	r0, [pc, #136]	; (80130f8 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801306e:	f001 f84f 	bl	8014110 <i2c_master_addressing>
 8013072:	f640 75ff 	movw	r5, #4095	; 0xfff
 8013076:	4e20      	ldr	r6, [pc, #128]	; (80130f8 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8013078:	e00c      	b.n	8013094 <gd32_i2c_write(char const*, unsigned int)+0x60>
 801307a:	3d01      	subs	r5, #1
 801307c:	d1e0      	bne.n	8013040 <gd32_i2c_write(char const*, unsigned int)+0xc>
 801307e:	f7ff ff85 	bl	8012f8c <_stop() [clone .isra.0]>
 8013082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013086:	4240      	negs	r0, r0
 8013088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801308a:	3d01      	subs	r5, #1
 801308c:	d1e4      	bne.n	8013058 <gd32_i2c_write(char const*, unsigned int)+0x24>
 801308e:	e7f6      	b.n	801307e <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8013090:	3d01      	subs	r5, #1
 8013092:	d0f4      	beq.n	801307e <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8013094:	f240 5101 	movw	r1, #1281	; 0x501
 8013098:	4630      	mov	r0, r6
 801309a:	f001 f855 	bl	8014148 <i2c_flag_get>
 801309e:	2800      	cmp	r0, #0
 80130a0:	d0f6      	beq.n	8013090 <gd32_i2c_write(char const*, unsigned int)+0x5c>
 80130a2:	f240 5101 	movw	r1, #1281	; 0x501
 80130a6:	4814      	ldr	r0, [pc, #80]	; (80130f8 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80130a8:	f001 f859 	bl	801415e <i2c_flag_clear>
 80130ac:	f640 75ff 	movw	r5, #4095	; 0xfff
 80130b0:	4e11      	ldr	r6, [pc, #68]	; (80130f8 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80130b2:	f240 5107 	movw	r1, #1287	; 0x507
 80130b6:	4630      	mov	r0, r6
 80130b8:	f001 f846 	bl	8014148 <i2c_flag_get>
 80130bc:	2801      	cmp	r0, #1
 80130be:	d107      	bne.n	80130d0 <gd32_i2c_write(char const*, unsigned int)+0x9c>
 80130c0:	4e0d      	ldr	r6, [pc, #52]	; (80130f8 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80130c2:	4427      	add	r7, r4
 80130c4:	42a7      	cmp	r7, r4
 80130c6:	d106      	bne.n	80130d6 <gd32_i2c_write(char const*, unsigned int)+0xa2>
 80130c8:	f7ff ff60 	bl	8012f8c <_stop() [clone .isra.0]>
 80130cc:	2000      	movs	r0, #0
 80130ce:	e7da      	b.n	8013086 <gd32_i2c_write(char const*, unsigned int)+0x52>
 80130d0:	3d01      	subs	r5, #1
 80130d2:	d1ee      	bne.n	80130b2 <gd32_i2c_write(char const*, unsigned int)+0x7e>
 80130d4:	e7d3      	b.n	801307e <gd32_i2c_write(char const*, unsigned int)+0x4a>
 80130d6:	4630      	mov	r0, r6
 80130d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130dc:	f001 f82f 	bl	801413e <i2c_data_transmit>
 80130e0:	f640 75ff 	movw	r5, #4095	; 0xfff
 80130e4:	f240 5102 	movw	r1, #1282	; 0x502
 80130e8:	4630      	mov	r0, r6
 80130ea:	f001 f82d 	bl	8014148 <i2c_flag_get>
 80130ee:	2800      	cmp	r0, #0
 80130f0:	d1e8      	bne.n	80130c4 <gd32_i2c_write(char const*, unsigned int)+0x90>
 80130f2:	3d01      	subs	r5, #1
 80130f4:	d1f6      	bne.n	80130e4 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 80130f6:	e7c2      	b.n	801307e <gd32_i2c_write(char const*, unsigned int)+0x4a>
 80130f8:	40005400 	andmi	r5, r0, r0, lsl #8
 80130fc:	2000a9d4 	ldrdcs	sl, [r0], -r4

08013100 <gd32_i2c_read(char*, unsigned int)>:
 8013100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013104:	4680      	mov	r8, r0
 8013106:	460c      	mov	r4, r1
 8013108:	f640 76ff 	movw	r6, #4095	; 0xfff
 801310c:	4f4b      	ldr	r7, [pc, #300]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801310e:	f240 6101 	movw	r1, #1537	; 0x601
 8013112:	4638      	mov	r0, r7
 8013114:	f001 f818 	bl	8014148 <i2c_flag_get>
 8013118:	4605      	mov	r5, r0
 801311a:	bb08      	cbnz	r0, 8013160 <gd32_i2c_read(char*, unsigned int)+0x60>
 801311c:	2c02      	cmp	r4, #2
 801311e:	d103      	bne.n	8013128 <gd32_i2c_read(char*, unsigned int)+0x28>
 8013120:	4601      	mov	r1, r0
 8013122:	4846      	ldr	r0, [pc, #280]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013124:	f000 ffeb 	bl	80140fe <i2c_ackpos_config>
 8013128:	4844      	ldr	r0, [pc, #272]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801312a:	f000 fffe 	bl	801412a <i2c_start_on_bus>
 801312e:	f640 76ff 	movw	r6, #4095	; 0xfff
 8013132:	4f42      	ldr	r7, [pc, #264]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013134:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8013138:	4638      	mov	r0, r7
 801313a:	f001 f805 	bl	8014148 <i2c_flag_get>
 801313e:	b1a8      	cbz	r0, 801316c <gd32_i2c_read(char*, unsigned int)+0x6c>
 8013140:	4b3f      	ldr	r3, [pc, #252]	; (8013240 <gd32_i2c_read(char*, unsigned int)+0x140>)
 8013142:	2201      	movs	r2, #1
 8013144:	7819      	ldrb	r1, [r3, #0]
 8013146:	483d      	ldr	r0, [pc, #244]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013148:	f000 ffe2 	bl	8014110 <i2c_master_addressing>
 801314c:	2c02      	cmp	r4, #2
 801314e:	d803      	bhi.n	8013158 <gd32_i2c_read(char*, unsigned int)+0x58>
 8013150:	2100      	movs	r1, #0
 8013152:	483a      	ldr	r0, [pc, #232]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013154:	f000 ffca 	bl	80140ec <i2c_ack_config>
 8013158:	f640 76ff 	movw	r6, #4095	; 0xfff
 801315c:	4f37      	ldr	r7, [pc, #220]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801315e:	e00a      	b.n	8013176 <gd32_i2c_read(char*, unsigned int)+0x76>
 8013160:	3e01      	subs	r6, #1
 8013162:	d1d4      	bne.n	801310e <gd32_i2c_read(char*, unsigned int)+0xe>
 8013164:	f7ff ff12 	bl	8012f8c <_stop() [clone .isra.0]>
 8013168:	2504      	movs	r5, #4
 801316a:	e04d      	b.n	8013208 <gd32_i2c_read(char*, unsigned int)+0x108>
 801316c:	3e01      	subs	r6, #1
 801316e:	d1e1      	bne.n	8013134 <gd32_i2c_read(char*, unsigned int)+0x34>
 8013170:	e7f8      	b.n	8013164 <gd32_i2c_read(char*, unsigned int)+0x64>
 8013172:	3e01      	subs	r6, #1
 8013174:	d0f6      	beq.n	8013164 <gd32_i2c_read(char*, unsigned int)+0x64>
 8013176:	f240 5101 	movw	r1, #1281	; 0x501
 801317a:	4638      	mov	r0, r7
 801317c:	f000 ffe4 	bl	8014148 <i2c_flag_get>
 8013180:	2800      	cmp	r0, #0
 8013182:	d0f6      	beq.n	8013172 <gd32_i2c_read(char*, unsigned int)+0x72>
 8013184:	f240 5101 	movw	r1, #1281	; 0x501
 8013188:	482c      	ldr	r0, [pc, #176]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801318a:	f000 ffe8 	bl	801415e <i2c_flag_clear>
 801318e:	2c01      	cmp	r4, #1
 8013190:	d102      	bne.n	8013198 <gd32_i2c_read(char*, unsigned int)+0x98>
 8013192:	482a      	ldr	r0, [pc, #168]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013194:	f000 ffce 	bl	8014134 <i2c_stop_on_bus>
 8013198:	f640 77ff 	movw	r7, #4095	; 0xfff
 801319c:	4e27      	ldr	r6, [pc, #156]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801319e:	e022      	b.n	80131e6 <gd32_i2c_read(char*, unsigned int)+0xe6>
 80131a0:	2c03      	cmp	r4, #3
 80131a2:	d134      	bne.n	801320e <gd32_i2c_read(char*, unsigned int)+0x10e>
 80131a4:	f640 79ff 	movw	r9, #4095	; 0xfff
 80131a8:	e002      	b.n	80131b0 <gd32_i2c_read(char*, unsigned int)+0xb0>
 80131aa:	f1b9 0901 	subs.w	r9, r9, #1
 80131ae:	d0d9      	beq.n	8013164 <gd32_i2c_read(char*, unsigned int)+0x64>
 80131b0:	f240 5102 	movw	r1, #1282	; 0x502
 80131b4:	4630      	mov	r0, r6
 80131b6:	f000 ffc7 	bl	8014148 <i2c_flag_get>
 80131ba:	2800      	cmp	r0, #0
 80131bc:	d0f5      	beq.n	80131aa <gd32_i2c_read(char*, unsigned int)+0xaa>
 80131be:	2100      	movs	r1, #0
 80131c0:	4630      	mov	r0, r6
 80131c2:	f000 ff93 	bl	80140ec <i2c_ack_config>
 80131c6:	f240 5106 	movw	r1, #1286	; 0x506
 80131ca:	4630      	mov	r0, r6
 80131cc:	f000 ffbc 	bl	8014148 <i2c_flag_get>
 80131d0:	b138      	cbz	r0, 80131e2 <gd32_i2c_read(char*, unsigned int)+0xe2>
 80131d2:	4630      	mov	r0, r6
 80131d4:	f000 ffb5 	bl	8014142 <i2c_data_receive>
 80131d8:	f640 77ff 	movw	r7, #4095	; 0xfff
 80131dc:	f808 0b01 	strb.w	r0, [r8], #1
 80131e0:	3c01      	subs	r4, #1
 80131e2:	3f01      	subs	r7, #1
 80131e4:	d0be      	beq.n	8013164 <gd32_i2c_read(char*, unsigned int)+0x64>
 80131e6:	2c00      	cmp	r4, #0
 80131e8:	d1da      	bne.n	80131a0 <gd32_i2c_read(char*, unsigned int)+0xa0>
 80131ea:	f640 73ff 	movw	r3, #4095	; 0xfff
 80131ee:	4915      	ldr	r1, [pc, #84]	; (8013244 <gd32_i2c_read(char*, unsigned int)+0x144>)
 80131f0:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 80131f4:	0592      	lsls	r2, r2, #22
 80131f6:	d41d      	bmi.n	8013234 <gd32_i2c_read(char*, unsigned int)+0x134>
 80131f8:	2101      	movs	r1, #1
 80131fa:	4810      	ldr	r0, [pc, #64]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80131fc:	f000 ff76 	bl	80140ec <i2c_ack_config>
 8013200:	2101      	movs	r1, #1
 8013202:	480e      	ldr	r0, [pc, #56]	; (801323c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013204:	f000 ff7b 	bl	80140fe <i2c_ackpos_config>
 8013208:	4628      	mov	r0, r5
 801320a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801320e:	2c02      	cmp	r4, #2
 8013210:	d1d9      	bne.n	80131c6 <gd32_i2c_read(char*, unsigned int)+0xc6>
 8013212:	f640 79ff 	movw	r9, #4095	; 0xfff
 8013216:	e002      	b.n	801321e <gd32_i2c_read(char*, unsigned int)+0x11e>
 8013218:	f1b9 0901 	subs.w	r9, r9, #1
 801321c:	d0a2      	beq.n	8013164 <gd32_i2c_read(char*, unsigned int)+0x64>
 801321e:	f240 5102 	movw	r1, #1282	; 0x502
 8013222:	4630      	mov	r0, r6
 8013224:	f000 ff90 	bl	8014148 <i2c_flag_get>
 8013228:	2800      	cmp	r0, #0
 801322a:	d0f5      	beq.n	8013218 <gd32_i2c_read(char*, unsigned int)+0x118>
 801322c:	4630      	mov	r0, r6
 801322e:	f000 ff81 	bl	8014134 <i2c_stop_on_bus>
 8013232:	e7c8      	b.n	80131c6 <gd32_i2c_read(char*, unsigned int)+0xc6>
 8013234:	3b01      	subs	r3, #1
 8013236:	d1db      	bne.n	80131f0 <gd32_i2c_read(char*, unsigned int)+0xf0>
 8013238:	e796      	b.n	8013168 <gd32_i2c_read(char*, unsigned int)+0x68>
 801323a:	bf00      	nop
 801323c:	40005400 	andmi	r5, r0, r0, lsl #8
 8013240:	2000a9d4 	ldrdcs	sl, [r0], -r4
 8013244:	40005000 	andmi	r5, r0, r0

08013248 <gd32_spi_dma_begin()>:
 8013248:	b530      	push	{r4, r5, lr}
 801324a:	f240 6002 	movw	r0, #1538	; 0x602
 801324e:	b089      	sub	sp, #36	; 0x24
 8013250:	f7ff facc 	bl	80127ec <rcu_periph_clock_enable>
 8013254:	f240 6003 	movw	r0, #1539	; 0x603
 8013258:	f7ff fac8 	bl	80127ec <rcu_periph_clock_enable>
 801325c:	f240 700f 	movw	r0, #1807	; 0x70f
 8013260:	f7ff fac4 	bl	80127ec <rcu_periph_clock_enable>
 8013264:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8013268:	f7ff fac0 	bl	80127ec <rcu_periph_clock_enable>
 801326c:	2338      	movs	r3, #56	; 0x38
 801326e:	2203      	movs	r2, #3
 8013270:	2118      	movs	r1, #24
 8013272:	4829      	ldr	r0, [pc, #164]	; (8013318 <gd32_spi_dma_begin()+0xd0>)
 8013274:	f7ff fa22 	bl	80126bc <gpio_init>
 8013278:	4c28      	ldr	r4, [pc, #160]	; (801331c <gd32_spi_dma_begin()+0xd4>)
 801327a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801327e:	2203      	movs	r2, #3
 8013280:	2118      	movs	r1, #24
 8013282:	4827      	ldr	r0, [pc, #156]	; (8013320 <gd32_spi_dma_begin()+0xd8>)
 8013284:	f7ff fa1a 	bl	80126bc <gpio_init>
 8013288:	2101      	movs	r1, #1
 801328a:	4826      	ldr	r0, [pc, #152]	; (8013324 <gd32_spi_dma_begin()+0xdc>)
 801328c:	f7ff fa6a 	bl	8012764 <gpio_pin_remap_config>
 8013290:	4620      	mov	r0, r4
 8013292:	f000 ffe2 	bl	801425a <i2s_disable>
 8013296:	2300      	movs	r3, #0
 8013298:	4620      	mov	r0, r4
 801329a:	461a      	mov	r2, r3
 801329c:	4922      	ldr	r1, [pc, #136]	; (8013328 <gd32_spi_dma_begin()+0xe0>)
 801329e:	f000 ff7f 	bl	80141a0 <i2s_psc_config>
 80132a2:	2300      	movs	r3, #0
 80132a4:	2210      	movs	r2, #16
 80132a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80132aa:	4620      	mov	r0, r4
 80132ac:	f000 ff69 	bl	8014182 <i2s_init>
 80132b0:	4620      	mov	r0, r4
 80132b2:	f000 ffcd 	bl	8014250 <i2s_enable>
 80132b6:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 80132ba:	f240 5001 	movw	r0, #1281	; 0x501
 80132be:	f7ff fa95 	bl	80127ec <rcu_periph_clock_enable>
 80132c2:	2101      	movs	r1, #1
 80132c4:	4620      	mov	r0, r4
 80132c6:	f000 fa75 	bl	80137b4 <dma_deinit>
 80132ca:	a801      	add	r0, sp, #4
 80132cc:	f000 fa8e 	bl	80137ec <dma_struct_para_init>
 80132d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132d4:	2501      	movs	r5, #1
 80132d6:	9304      	str	r3, [sp, #16]
 80132d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80132dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80132e0:	4912      	ldr	r1, [pc, #72]	; (801332c <gd32_spi_dma_begin()+0xe4>)
 80132e2:	4620      	mov	r0, r4
 80132e4:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80132e8:	9206      	str	r2, [sp, #24]
 80132ea:	4629      	mov	r1, r5
 80132ec:	aa01      	add	r2, sp, #4
 80132ee:	f8ad 301c 	strh.w	r3, [sp, #28]
 80132f2:	f88d 501e 	strb.w	r5, [sp, #30]
 80132f6:	f000 fa83 	bl	8013800 <dma_init>
 80132fa:	4629      	mov	r1, r5
 80132fc:	4620      	mov	r0, r4
 80132fe:	f000 fab9 	bl	8013874 <dma_circulation_disable>
 8013302:	4629      	mov	r1, r5
 8013304:	4620      	mov	r0, r4
 8013306:	f000 fac5 	bl	8013894 <dma_memory_to_memory_disable>
 801330a:	2200      	movs	r2, #0
 801330c:	4b08      	ldr	r3, [pc, #32]	; (8013330 <gd32_spi_dma_begin()+0xe8>)
 801330e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8013312:	b009      	add	sp, #36	; 0x24
 8013314:	bd30      	pop	{r4, r5, pc}
 8013316:	bf00      	nop
 8013318:	40010c00 	andmi	r0, r1, r0, lsl #24
 801331c:	40003c00 	andmi	r3, r0, r0, lsl #24
 8013320:	40010800 	andmi	r0, r1, r0, lsl #16
 8013324:	00300400 	eorseq	r0, r0, r0, lsl #8
 8013328:	00030d40 	andeq	r0, r3, r0, asr #26
 801332c:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8013330:	40020000 	andmi	r0, r2, r0

08013334 <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8013334:	b538      	push	{r3, r4, r5, lr}
 8013336:	4c08      	ldr	r4, [pc, #32]	; (8013358 <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 8013338:	4605      	mov	r5, r0
 801333a:	4620      	mov	r0, r4
 801333c:	f000 ff8d 	bl	801425a <i2s_disable>
 8013340:	2300      	movs	r3, #0
 8013342:	4620      	mov	r0, r4
 8013344:	461a      	mov	r2, r3
 8013346:	0969      	lsrs	r1, r5, #5
 8013348:	f000 ff2a 	bl	80141a0 <i2s_psc_config>
 801334c:	4620      	mov	r0, r4
 801334e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013352:	f000 bf7d 	b.w	8014250 <i2s_enable>
 8013356:	bf00      	nop
 8013358:	40003c00 	andmi	r3, r0, r0, lsl #24

0801335c <gd32_spi_dma_tx_prepare(unsigned int*)>:
 801335c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8013360:	6003      	str	r3, [r0, #0]
 8013362:	4801      	ldr	r0, [pc, #4]	; (8013368 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 8013364:	4770      	bx	lr
 8013366:	bf00      	nop
 8013368:	2000a9d8 	ldrdcs	sl, [r0], -r8

0801336c <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 801336c:	4a0a      	ldr	r2, [pc, #40]	; (8013398 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 801336e:	3101      	adds	r1, #1
 8013370:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8013374:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8013378:	f023 0301 	bic.w	r3, r3, #1
 801337c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8013380:	f043 0301 	orr.w	r3, r3, #1
 8013384:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 8013388:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 801338c:	4803      	ldr	r0, [pc, #12]	; (801339c <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 801338e:	2100      	movs	r1, #0
 8013390:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8013394:	f000 bf66 	b.w	8014264 <spi_dma_enable>
 8013398:	40020000 	andmi	r0, r2, r0
 801339c:	40003c00 	andmi	r3, r0, r0, lsl #24

080133a0 <gd32_spi_dma_tx_is_active()>:
 80133a0:	4b03      	ldr	r3, [pc, #12]	; (80133b0 <gd32_spi_dma_tx_is_active()+0x10>)
 80133a2:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 80133a6:	3800      	subs	r0, #0
 80133a8:	bf18      	it	ne
 80133aa:	2001      	movne	r0, #1
 80133ac:	4770      	bx	lr
 80133ae:	bf00      	nop
 80133b0:	40020000 	andmi	r0, r2, r0

080133b4 <gd32_uart_begin>:
 80133b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133b6:	461e      	mov	r6, r3
 80133b8:	4b63      	ldr	r3, [pc, #396]	; (8013548 <gd32_uart_begin+0x194>)
 80133ba:	4604      	mov	r4, r0
 80133bc:	4298      	cmp	r0, r3
 80133be:	460f      	mov	r7, r1
 80133c0:	4615      	mov	r5, r2
 80133c2:	d03b      	beq.n	801343c <gd32_uart_begin+0x88>
 80133c4:	d80a      	bhi.n	80133dc <gd32_uart_begin+0x28>
 80133c6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80133ca:	4298      	cmp	r0, r3
 80133cc:	d02f      	beq.n	801342e <gd32_uart_begin+0x7a>
 80133ce:	f240 7012 	movw	r0, #1810	; 0x712
 80133d2:	f7ff fa0b 	bl	80127ec <rcu_periph_clock_enable>
 80133d6:	f240 6004 	movw	r0, #1540	; 0x604
 80133da:	e008      	b.n	80133ee <gd32_uart_begin+0x3a>
 80133dc:	4b5b      	ldr	r3, [pc, #364]	; (801354c <gd32_uart_begin+0x198>)
 80133de:	4298      	cmp	r0, r3
 80133e0:	d02f      	beq.n	8013442 <gd32_uart_begin+0x8e>
 80133e2:	f240 600e 	movw	r0, #1550	; 0x60e
 80133e6:	f7ff fa01 	bl	80127ec <rcu_periph_clock_enable>
 80133ea:	f240 6003 	movw	r0, #1539	; 0x603
 80133ee:	f7ff f9fd 	bl	80127ec <rcu_periph_clock_enable>
 80133f2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80133f6:	f7ff f9f9 	bl	80127ec <rcu_periph_clock_enable>
 80133fa:	4b53      	ldr	r3, [pc, #332]	; (8013548 <gd32_uart_begin+0x194>)
 80133fc:	429c      	cmp	r4, r3
 80133fe:	f000 8084 	beq.w	801350a <gd32_uart_begin+0x156>
 8013402:	d829      	bhi.n	8013458 <gd32_uart_begin+0xa4>
 8013404:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013408:	429c      	cmp	r4, r3
 801340a:	d071      	beq.n	80134f0 <gd32_uart_begin+0x13c>
 801340c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013410:	2203      	movs	r2, #3
 8013412:	2118      	movs	r1, #24
 8013414:	484e      	ldr	r0, [pc, #312]	; (8013550 <gd32_uart_begin+0x19c>)
 8013416:	f7ff f951 	bl	80126bc <gpio_init>
 801341a:	2104      	movs	r1, #4
 801341c:	484c      	ldr	r0, [pc, #304]	; (8013550 <gd32_uart_begin+0x19c>)
 801341e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013422:	2203      	movs	r2, #3
 8013424:	f7ff f94a 	bl	80126bc <gpio_init>
 8013428:	2101      	movs	r1, #1
 801342a:	484a      	ldr	r0, [pc, #296]	; (8013554 <gd32_uart_begin+0x1a0>)
 801342c:	e025      	b.n	801347a <gd32_uart_begin+0xc6>
 801342e:	f240 7011 	movw	r0, #1809	; 0x711
 8013432:	f7ff f9db 	bl	80127ec <rcu_periph_clock_enable>
 8013436:	f240 6002 	movw	r0, #1538	; 0x602
 801343a:	e7d8      	b.n	80133ee <gd32_uart_begin+0x3a>
 801343c:	f240 7013 	movw	r0, #1811	; 0x713
 8013440:	e7c7      	b.n	80133d2 <gd32_uart_begin+0x1e>
 8013442:	f240 7014 	movw	r0, #1812	; 0x714
 8013446:	f7ff f9d1 	bl	80127ec <rcu_periph_clock_enable>
 801344a:	f240 6004 	movw	r0, #1540	; 0x604
 801344e:	f7ff f9cd 	bl	80127ec <rcu_periph_clock_enable>
 8013452:	f240 6005 	movw	r0, #1541	; 0x605
 8013456:	e7ca      	b.n	80133ee <gd32_uart_begin+0x3a>
 8013458:	4b3c      	ldr	r3, [pc, #240]	; (801354c <gd32_uart_begin+0x198>)
 801345a:	429c      	cmp	r4, r3
 801345c:	d062      	beq.n	8013524 <gd32_uart_begin+0x170>
 801345e:	2340      	movs	r3, #64	; 0x40
 8013460:	2203      	movs	r2, #3
 8013462:	2118      	movs	r1, #24
 8013464:	483c      	ldr	r0, [pc, #240]	; (8013558 <gd32_uart_begin+0x1a4>)
 8013466:	f7ff f929 	bl	80126bc <gpio_init>
 801346a:	2104      	movs	r1, #4
 801346c:	483a      	ldr	r0, [pc, #232]	; (8013558 <gd32_uart_begin+0x1a4>)
 801346e:	2380      	movs	r3, #128	; 0x80
 8013470:	2203      	movs	r2, #3
 8013472:	f7ff f923 	bl	80126bc <gpio_init>
 8013476:	2101      	movs	r1, #1
 8013478:	2004      	movs	r0, #4
 801347a:	f7ff f973 	bl	8012764 <gpio_pin_remap_config>
 801347e:	4620      	mov	r0, r4
 8013480:	f7ff fbd2 	bl	8012c28 <usart_deinit>
 8013484:	68e3      	ldr	r3, [r4, #12]
 8013486:	4639      	mov	r1, r7
 8013488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801348c:	4620      	mov	r0, r4
 801348e:	60e3      	str	r3, [r4, #12]
 8013490:	f7ff fc0a 	bl	8012ca8 <usart_baudrate_set>
 8013494:	f1a5 0309 	sub.w	r3, r5, #9
 8013498:	4259      	negs	r1, r3
 801349a:	4159      	adcs	r1, r3
 801349c:	4620      	mov	r0, r4
 801349e:	0309      	lsls	r1, r1, #12
 80134a0:	f7ff fc32 	bl	8012d08 <usart_word_length_set>
 80134a4:	9906      	ldr	r1, [sp, #24]
 80134a6:	4620      	mov	r0, r4
 80134a8:	1e8a      	subs	r2, r1, #2
 80134aa:	4251      	negs	r1, r2
 80134ac:	4151      	adcs	r1, r2
 80134ae:	0349      	lsls	r1, r1, #13
 80134b0:	f7ff fc32 	bl	8012d18 <usart_stop_bit_set>
 80134b4:	2e01      	cmp	r6, #1
 80134b6:	d041      	beq.n	801353c <gd32_uart_begin+0x188>
 80134b8:	2e02      	cmp	r6, #2
 80134ba:	d142      	bne.n	8013542 <gd32_uart_begin+0x18e>
 80134bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80134c0:	4620      	mov	r0, r4
 80134c2:	f7ff fc19 	bl	8012cf8 <usart_parity_config>
 80134c6:	2100      	movs	r1, #0
 80134c8:	4620      	mov	r0, r4
 80134ca:	f7ff fc39 	bl	8012d40 <usart_hardware_flow_rts_config>
 80134ce:	2100      	movs	r1, #0
 80134d0:	4620      	mov	r0, r4
 80134d2:	f7ff fc3b 	bl	8012d4c <usart_hardware_flow_cts_config>
 80134d6:	2104      	movs	r1, #4
 80134d8:	4620      	mov	r0, r4
 80134da:	f7ff fc2b 	bl	8012d34 <usart_receive_config>
 80134de:	2108      	movs	r1, #8
 80134e0:	4620      	mov	r0, r4
 80134e2:	f7ff fc21 	bl	8012d28 <usart_transmit_config>
 80134e6:	68e3      	ldr	r3, [r4, #12]
 80134e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80134ec:	60e3      	str	r3, [r4, #12]
 80134ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134f0:	2304      	movs	r3, #4
 80134f2:	2203      	movs	r2, #3
 80134f4:	2118      	movs	r1, #24
 80134f6:	4819      	ldr	r0, [pc, #100]	; (801355c <gd32_uart_begin+0x1a8>)
 80134f8:	f7ff f8e0 	bl	80126bc <gpio_init>
 80134fc:	2308      	movs	r3, #8
 80134fe:	2203      	movs	r2, #3
 8013500:	2104      	movs	r1, #4
 8013502:	4816      	ldr	r0, [pc, #88]	; (801355c <gd32_uart_begin+0x1a8>)
 8013504:	f7ff f8da 	bl	80126bc <gpio_init>
 8013508:	e7b9      	b.n	801347e <gd32_uart_begin+0xca>
 801350a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801350e:	2203      	movs	r2, #3
 8013510:	2118      	movs	r1, #24
 8013512:	480f      	ldr	r0, [pc, #60]	; (8013550 <gd32_uart_begin+0x19c>)
 8013514:	f7ff f8d2 	bl	80126bc <gpio_init>
 8013518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801351c:	2203      	movs	r2, #3
 801351e:	2104      	movs	r1, #4
 8013520:	480b      	ldr	r0, [pc, #44]	; (8013550 <gd32_uart_begin+0x19c>)
 8013522:	e7ef      	b.n	8013504 <gd32_uart_begin+0x150>
 8013524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013528:	2203      	movs	r2, #3
 801352a:	2118      	movs	r1, #24
 801352c:	4808      	ldr	r0, [pc, #32]	; (8013550 <gd32_uart_begin+0x19c>)
 801352e:	f7ff f8c5 	bl	80126bc <gpio_init>
 8013532:	2304      	movs	r3, #4
 8013534:	2203      	movs	r2, #3
 8013536:	4619      	mov	r1, r3
 8013538:	4809      	ldr	r0, [pc, #36]	; (8013560 <gd32_uart_begin+0x1ac>)
 801353a:	e7e3      	b.n	8013504 <gd32_uart_begin+0x150>
 801353c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8013540:	e7be      	b.n	80134c0 <gd32_uart_begin+0x10c>
 8013542:	2100      	movs	r1, #0
 8013544:	e7bc      	b.n	80134c0 <gd32_uart_begin+0x10c>
 8013546:	bf00      	nop
 8013548:	40004c00 	andmi	r4, r0, r0, lsl #24
 801354c:	40005000 	andmi	r5, r0, r0
 8013550:	40011000 	andmi	r1, r1, r0
 8013554:	00140010 	andseq	r0, r4, r0, lsl r0
 8013558:	40010c00 	andmi	r0, r1, r0, lsl #24
 801355c:	40010800 	andmi	r0, r1, r0, lsl #16
 8013560:	40011400 	andmi	r1, r1, r0, lsl #8

08013564 <micros_init()>:
 8013564:	4770      	bx	lr
	...

08013568 <udelay_init()>:
 8013568:	4a07      	ldr	r2, [pc, #28]	; (8013588 <udelay_init()+0x20>)
 801356a:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 801356e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013572:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8013576:	2200      	movs	r2, #0
 8013578:	4b04      	ldr	r3, [pc, #16]	; (801358c <udelay_init()+0x24>)
 801357a:	605a      	str	r2, [r3, #4]
 801357c:	681a      	ldr	r2, [r3, #0]
 801357e:	f042 0201 	orr.w	r2, r2, #1
 8013582:	601a      	str	r2, [r3, #0]
 8013584:	4770      	bx	lr
 8013586:	bf00      	nop
 8013588:	e000ed00 	and	lr, r0, r0, lsl #26
 801358c:	e0001000 	and	r1, r0, r0

08013590 <udelay(unsigned int, unsigned int)>:
 8013590:	236c      	movs	r3, #108	; 0x6c
 8013592:	b530      	push	{r4, r5, lr}
 8013594:	4358      	muls	r0, r3
 8013596:	b909      	cbnz	r1, 801359c <udelay(unsigned int, unsigned int)+0xc>
 8013598:	4b08      	ldr	r3, [pc, #32]	; (80135bc <udelay(unsigned int, unsigned int)+0x2c>)
 801359a:	6859      	ldr	r1, [r3, #4]
 801359c:	2300      	movs	r3, #0
 801359e:	4c07      	ldr	r4, [pc, #28]	; (80135bc <udelay(unsigned int, unsigned int)+0x2c>)
 80135a0:	6862      	ldr	r2, [r4, #4]
 80135a2:	4291      	cmp	r1, r2
 80135a4:	d0fc      	beq.n	80135a0 <udelay(unsigned int, unsigned int)+0x10>
 80135a6:	bf2a      	itet	cs
 80135a8:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 80135ac:	189b      	addcc	r3, r3, r2
 80135ae:	195b      	addcs	r3, r3, r5
 80135b0:	1a5b      	subs	r3, r3, r1
 80135b2:	4283      	cmp	r3, r0
 80135b4:	d300      	bcc.n	80135b8 <udelay(unsigned int, unsigned int)+0x28>
 80135b6:	bd30      	pop	{r4, r5, pc}
 80135b8:	4611      	mov	r1, r2
 80135ba:	e7f1      	b.n	80135a0 <udelay(unsigned int, unsigned int)+0x10>
 80135bc:	e0001000 	and	r1, r0, r0

080135c0 <mac_address_get>:
 80135c0:	2102      	movs	r1, #2
 80135c2:	4a07      	ldr	r2, [pc, #28]	; (80135e0 <mac_address_get+0x20>)
 80135c4:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 80135c8:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 80135cc:	7001      	strb	r1, [r0, #0]
 80135ce:	7042      	strb	r2, [r0, #1]
 80135d0:	0e1a      	lsrs	r2, r3, #24
 80135d2:	7082      	strb	r2, [r0, #2]
 80135d4:	0c1a      	lsrs	r2, r3, #16
 80135d6:	70c2      	strb	r2, [r0, #3]
 80135d8:	0a1a      	lsrs	r2, r3, #8
 80135da:	7102      	strb	r2, [r0, #4]
 80135dc:	7143      	strb	r3, [r0, #5]
 80135de:	4770      	bx	lr
 80135e0:	1ffff000 	svcne	0x00fff000

080135e4 <adc_mode_config>:
 80135e4:	4b06      	ldr	r3, [pc, #24]	; (8013600 <adc_mode_config+0x1c>)
 80135e6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80135ea:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80135ee:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80135f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80135f6:	4302      	orrs	r2, r0
 80135f8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80135fc:	4770      	bx	lr
 80135fe:	bf00      	nop
 8013600:	40012000 	andmi	r2, r1, r0

08013604 <adc_special_function_config>:
 8013604:	b510      	push	{r4, lr}
 8013606:	f401 7380 	and.w	r3, r1, #256	; 0x100
 801360a:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 801360e:	f001 0102 	and.w	r1, r1, #2
 8013612:	b17a      	cbz	r2, 8013634 <adc_special_function_config+0x30>
 8013614:	b11b      	cbz	r3, 801361e <adc_special_function_config+0x1a>
 8013616:	6843      	ldr	r3, [r0, #4]
 8013618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801361c:	6043      	str	r3, [r0, #4]
 801361e:	b11c      	cbz	r4, 8013628 <adc_special_function_config+0x24>
 8013620:	6843      	ldr	r3, [r0, #4]
 8013622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013626:	6043      	str	r3, [r0, #4]
 8013628:	b119      	cbz	r1, 8013632 <adc_special_function_config+0x2e>
 801362a:	6883      	ldr	r3, [r0, #8]
 801362c:	f043 0302 	orr.w	r3, r3, #2
 8013630:	6083      	str	r3, [r0, #8]
 8013632:	bd10      	pop	{r4, pc}
 8013634:	b11b      	cbz	r3, 801363e <adc_special_function_config+0x3a>
 8013636:	6843      	ldr	r3, [r0, #4]
 8013638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801363c:	6043      	str	r3, [r0, #4]
 801363e:	b11c      	cbz	r4, 8013648 <adc_special_function_config+0x44>
 8013640:	6843      	ldr	r3, [r0, #4]
 8013642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013646:	6043      	str	r3, [r0, #4]
 8013648:	2900      	cmp	r1, #0
 801364a:	d0f2      	beq.n	8013632 <adc_special_function_config+0x2e>
 801364c:	6883      	ldr	r3, [r0, #8]
 801364e:	f023 0302 	bic.w	r3, r3, #2
 8013652:	e7ed      	b.n	8013630 <adc_special_function_config+0x2c>

08013654 <adc_data_alignment_config>:
 8013654:	6883      	ldr	r3, [r0, #8]
 8013656:	b119      	cbz	r1, 8013660 <adc_data_alignment_config+0xc>
 8013658:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801365c:	6083      	str	r3, [r0, #8]
 801365e:	4770      	bx	lr
 8013660:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013664:	e7fa      	b.n	801365c <adc_data_alignment_config+0x8>

08013666 <adc_enable>:
 8013666:	6883      	ldr	r3, [r0, #8]
 8013668:	07db      	lsls	r3, r3, #31
 801366a:	bf5e      	ittt	pl
 801366c:	6883      	ldrpl	r3, [r0, #8]
 801366e:	f043 0301 	orrpl.w	r3, r3, #1
 8013672:	6083      	strpl	r3, [r0, #8]
 8013674:	4770      	bx	lr

08013676 <adc_calibration_enable>:
 8013676:	6883      	ldr	r3, [r0, #8]
 8013678:	f100 0208 	add.w	r2, r0, #8
 801367c:	f043 0308 	orr.w	r3, r3, #8
 8013680:	6083      	str	r3, [r0, #8]
 8013682:	6813      	ldr	r3, [r2, #0]
 8013684:	0719      	lsls	r1, r3, #28
 8013686:	d4fc      	bmi.n	8013682 <adc_calibration_enable+0xc>
 8013688:	6883      	ldr	r3, [r0, #8]
 801368a:	f043 0304 	orr.w	r3, r3, #4
 801368e:	6083      	str	r3, [r0, #8]
 8013690:	6813      	ldr	r3, [r2, #0]
 8013692:	075b      	lsls	r3, r3, #29
 8013694:	d4fc      	bmi.n	8013690 <adc_calibration_enable+0x1a>
 8013696:	4770      	bx	lr

08013698 <adc_tempsensor_vrefint_enable>:
 8013698:	4a03      	ldr	r2, [pc, #12]	; (80136a8 <adc_tempsensor_vrefint_enable+0x10>)
 801369a:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 801369e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80136a2:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 80136a6:	4770      	bx	lr
 80136a8:	40012000 	andmi	r2, r1, r0

080136ac <adc_channel_length_config>:
 80136ac:	2901      	cmp	r1, #1
 80136ae:	d002      	beq.n	80136b6 <adc_channel_length_config+0xa>
 80136b0:	2902      	cmp	r1, #2
 80136b2:	d00c      	beq.n	80136ce <adc_channel_length_config+0x22>
 80136b4:	4770      	bx	lr
 80136b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80136b8:	3a01      	subs	r2, #1
 80136ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80136be:	62c3      	str	r3, [r0, #44]	; 0x2c
 80136c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80136c2:	0512      	lsls	r2, r2, #20
 80136c4:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 80136c8:	431a      	orrs	r2, r3
 80136ca:	62c2      	str	r2, [r0, #44]	; 0x2c
 80136cc:	4770      	bx	lr
 80136ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80136d0:	3a01      	subs	r2, #1
 80136d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80136d6:	6383      	str	r3, [r0, #56]	; 0x38
 80136d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80136da:	0512      	lsls	r2, r2, #20
 80136dc:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80136e0:	431a      	orrs	r2, r3
 80136e2:	6382      	str	r2, [r0, #56]	; 0x38
 80136e4:	4770      	bx	lr

080136e6 <adc_inserted_channel_config>:
 80136e6:	b530      	push	{r4, r5, lr}
 80136e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80136ea:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80136ec:	f3c4 5401 	ubfx	r4, r4, #20, #2
 80136f0:	1a61      	subs	r1, r4, r1
 80136f2:	f06f 0404 	mvn.w	r4, #4
 80136f6:	4361      	muls	r1, r4
 80136f8:	241f      	movs	r4, #31
 80136fa:	310f      	adds	r1, #15
 80136fc:	408c      	lsls	r4, r1
 80136fe:	ea25 0504 	bic.w	r5, r5, r4
 8013702:	fa02 f101 	lsl.w	r1, r2, r1
 8013706:	4329      	orrs	r1, r5
 8013708:	2a09      	cmp	r2, #9
 801370a:	6381      	str	r1, [r0, #56]	; 0x38
 801370c:	d80b      	bhi.n	8013726 <adc_inserted_channel_config+0x40>
 801370e:	2407      	movs	r4, #7
 8013710:	6901      	ldr	r1, [r0, #16]
 8013712:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013716:	4094      	lsls	r4, r2
 8013718:	ea21 0104 	bic.w	r1, r1, r4
 801371c:	fa03 f202 	lsl.w	r2, r3, r2
 8013720:	430a      	orrs	r2, r1
 8013722:	6102      	str	r2, [r0, #16]
 8013724:	bd30      	pop	{r4, r5, pc}
 8013726:	2a11      	cmp	r2, #17
 8013728:	d8fc      	bhi.n	8013724 <adc_inserted_channel_config+0x3e>
 801372a:	2407      	movs	r4, #7
 801372c:	3a0a      	subs	r2, #10
 801372e:	68c1      	ldr	r1, [r0, #12]
 8013730:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013734:	4094      	lsls	r4, r2
 8013736:	ea21 0104 	bic.w	r1, r1, r4
 801373a:	4093      	lsls	r3, r2
 801373c:	430b      	orrs	r3, r1
 801373e:	60c3      	str	r3, [r0, #12]
 8013740:	e7f0      	b.n	8013724 <adc_inserted_channel_config+0x3e>

08013742 <adc_external_trigger_source_config>:
 8013742:	2901      	cmp	r1, #1
 8013744:	d002      	beq.n	801374c <adc_external_trigger_source_config+0xa>
 8013746:	2902      	cmp	r1, #2
 8013748:	d008      	beq.n	801375c <adc_external_trigger_source_config+0x1a>
 801374a:	4770      	bx	lr
 801374c:	6883      	ldr	r3, [r0, #8]
 801374e:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8013752:	6083      	str	r3, [r0, #8]
 8013754:	6883      	ldr	r3, [r0, #8]
 8013756:	4313      	orrs	r3, r2
 8013758:	6083      	str	r3, [r0, #8]
 801375a:	4770      	bx	lr
 801375c:	6883      	ldr	r3, [r0, #8]
 801375e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013762:	e7f6      	b.n	8013752 <adc_external_trigger_source_config+0x10>

08013764 <adc_external_trigger_config>:
 8013764:	f001 0301 	and.w	r3, r1, #1
 8013768:	f001 0102 	and.w	r1, r1, #2
 801376c:	b152      	cbz	r2, 8013784 <adc_external_trigger_config+0x20>
 801376e:	b11b      	cbz	r3, 8013778 <adc_external_trigger_config+0x14>
 8013770:	6883      	ldr	r3, [r0, #8]
 8013772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013776:	6083      	str	r3, [r0, #8]
 8013778:	b119      	cbz	r1, 8013782 <adc_external_trigger_config+0x1e>
 801377a:	6883      	ldr	r3, [r0, #8]
 801377c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013780:	6083      	str	r3, [r0, #8]
 8013782:	4770      	bx	lr
 8013784:	b11b      	cbz	r3, 801378e <adc_external_trigger_config+0x2a>
 8013786:	6883      	ldr	r3, [r0, #8]
 8013788:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801378c:	6083      	str	r3, [r0, #8]
 801378e:	2900      	cmp	r1, #0
 8013790:	d0f7      	beq.n	8013782 <adc_external_trigger_config+0x1e>
 8013792:	6883      	ldr	r3, [r0, #8]
 8013794:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8013798:	e7f2      	b.n	8013780 <adc_external_trigger_config+0x1c>

0801379a <adc_software_trigger_enable>:
 801379a:	07ca      	lsls	r2, r1, #31
 801379c:	bf42      	ittt	mi
 801379e:	6883      	ldrmi	r3, [r0, #8]
 80137a0:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 80137a4:	6083      	strmi	r3, [r0, #8]
 80137a6:	078b      	lsls	r3, r1, #30
 80137a8:	bf42      	ittt	mi
 80137aa:	6883      	ldrmi	r3, [r0, #8]
 80137ac:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 80137b0:	6083      	strmi	r3, [r0, #8]
 80137b2:	4770      	bx	lr

080137b4 <dma_deinit>:
 80137b4:	4b0c      	ldr	r3, [pc, #48]	; (80137e8 <dma_deinit+0x34>)
 80137b6:	4298      	cmp	r0, r3
 80137b8:	d102      	bne.n	80137c0 <dma_deinit+0xc>
 80137ba:	2904      	cmp	r1, #4
 80137bc:	d900      	bls.n	80137c0 <dma_deinit+0xc>
 80137be:	e7fe      	b.n	80137be <dma_deinit+0xa>
 80137c0:	2314      	movs	r3, #20
 80137c2:	fb03 0301 	mla	r3, r3, r1, r0
 80137c6:	689a      	ldr	r2, [r3, #8]
 80137c8:	0089      	lsls	r1, r1, #2
 80137ca:	f022 0201 	bic.w	r2, r2, #1
 80137ce:	609a      	str	r2, [r3, #8]
 80137d0:	2200      	movs	r2, #0
 80137d2:	609a      	str	r2, [r3, #8]
 80137d4:	60da      	str	r2, [r3, #12]
 80137d6:	611a      	str	r2, [r3, #16]
 80137d8:	615a      	str	r2, [r3, #20]
 80137da:	230f      	movs	r3, #15
 80137dc:	6842      	ldr	r2, [r0, #4]
 80137de:	408b      	lsls	r3, r1
 80137e0:	4313      	orrs	r3, r2
 80137e2:	6043      	str	r3, [r0, #4]
 80137e4:	4770      	bx	lr
 80137e6:	bf00      	nop
 80137e8:	40020400 	andmi	r0, r2, r0, lsl #8

080137ec <dma_struct_para_init>:
 80137ec:	2300      	movs	r3, #0
 80137ee:	e9c0 3300 	strd	r3, r3, [r0]
 80137f2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80137f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80137fa:	8303      	strh	r3, [r0, #24]
 80137fc:	7683      	strb	r3, [r0, #26]
 80137fe:	4770      	bx	lr

08013800 <dma_init>:
 8013800:	4b1b      	ldr	r3, [pc, #108]	; (8013870 <dma_init+0x70>)
 8013802:	b510      	push	{r4, lr}
 8013804:	4298      	cmp	r0, r3
 8013806:	d102      	bne.n	801380e <dma_init+0xe>
 8013808:	2904      	cmp	r1, #4
 801380a:	d900      	bls.n	801380e <dma_init+0xe>
 801380c:	e7fe      	b.n	801380c <dma_init+0xc>
 801380e:	2314      	movs	r3, #20
 8013810:	fb03 0101 	mla	r1, r3, r1, r0
 8013814:	6813      	ldr	r3, [r2, #0]
 8013816:	610b      	str	r3, [r1, #16]
 8013818:	6893      	ldr	r3, [r2, #8]
 801381a:	614b      	str	r3, [r1, #20]
 801381c:	8a13      	ldrh	r3, [r2, #16]
 801381e:	60cb      	str	r3, [r1, #12]
 8013820:	68d4      	ldr	r4, [r2, #12]
 8013822:	6853      	ldr	r3, [r2, #4]
 8013824:	6888      	ldr	r0, [r1, #8]
 8013826:	4323      	orrs	r3, r4
 8013828:	6954      	ldr	r4, [r2, #20]
 801382a:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 801382e:	4323      	orrs	r3, r4
 8013830:	4303      	orrs	r3, r0
 8013832:	608b      	str	r3, [r1, #8]
 8013834:	7e13      	ldrb	r3, [r2, #24]
 8013836:	2b01      	cmp	r3, #1
 8013838:	688b      	ldr	r3, [r1, #8]
 801383a:	bf0c      	ite	eq
 801383c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8013840:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8013844:	608b      	str	r3, [r1, #8]
 8013846:	7e53      	ldrb	r3, [r2, #25]
 8013848:	2b01      	cmp	r3, #1
 801384a:	688b      	ldr	r3, [r1, #8]
 801384c:	bf0c      	ite	eq
 801384e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8013852:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8013856:	608b      	str	r3, [r1, #8]
 8013858:	7e93      	ldrb	r3, [r2, #26]
 801385a:	b923      	cbnz	r3, 8013866 <dma_init+0x66>
 801385c:	688b      	ldr	r3, [r1, #8]
 801385e:	f023 0310 	bic.w	r3, r3, #16
 8013862:	608b      	str	r3, [r1, #8]
 8013864:	bd10      	pop	{r4, pc}
 8013866:	688b      	ldr	r3, [r1, #8]
 8013868:	f043 0310 	orr.w	r3, r3, #16
 801386c:	e7f9      	b.n	8013862 <dma_init+0x62>
 801386e:	bf00      	nop
 8013870:	40020400 	andmi	r0, r2, r0, lsl #8

08013874 <dma_circulation_disable>:
 8013874:	4b06      	ldr	r3, [pc, #24]	; (8013890 <dma_circulation_disable+0x1c>)
 8013876:	4298      	cmp	r0, r3
 8013878:	d102      	bne.n	8013880 <dma_circulation_disable+0xc>
 801387a:	2904      	cmp	r1, #4
 801387c:	d900      	bls.n	8013880 <dma_circulation_disable+0xc>
 801387e:	e7fe      	b.n	801387e <dma_circulation_disable+0xa>
 8013880:	2314      	movs	r3, #20
 8013882:	4359      	muls	r1, r3
 8013884:	3008      	adds	r0, #8
 8013886:	580b      	ldr	r3, [r1, r0]
 8013888:	f023 0320 	bic.w	r3, r3, #32
 801388c:	500b      	str	r3, [r1, r0]
 801388e:	4770      	bx	lr
 8013890:	40020400 	andmi	r0, r2, r0, lsl #8

08013894 <dma_memory_to_memory_disable>:
 8013894:	4b06      	ldr	r3, [pc, #24]	; (80138b0 <dma_memory_to_memory_disable+0x1c>)
 8013896:	4298      	cmp	r0, r3
 8013898:	d102      	bne.n	80138a0 <dma_memory_to_memory_disable+0xc>
 801389a:	2904      	cmp	r1, #4
 801389c:	d900      	bls.n	80138a0 <dma_memory_to_memory_disable+0xc>
 801389e:	e7fe      	b.n	801389e <dma_memory_to_memory_disable+0xa>
 80138a0:	2314      	movs	r3, #20
 80138a2:	4359      	muls	r1, r3
 80138a4:	3008      	adds	r0, #8
 80138a6:	580b      	ldr	r3, [r1, r0]
 80138a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80138ac:	500b      	str	r3, [r1, r0]
 80138ae:	4770      	bx	lr
 80138b0:	40020400 	andmi	r0, r2, r0, lsl #8

080138b4 <enet_delay>:
 80138b4:	2300      	movs	r3, #0
 80138b6:	b082      	sub	sp, #8
 80138b8:	9301      	str	r3, [sp, #4]
 80138ba:	9001      	str	r0, [sp, #4]
 80138bc:	9b01      	ldr	r3, [sp, #4]
 80138be:	b90b      	cbnz	r3, 80138c4 <enet_delay+0x10>
 80138c0:	b002      	add	sp, #8
 80138c2:	4770      	bx	lr
 80138c4:	9b01      	ldr	r3, [sp, #4]
 80138c6:	3b01      	subs	r3, #1
 80138c8:	9301      	str	r3, [sp, #4]
 80138ca:	e7f7      	b.n	80138bc <enet_delay+0x8>

080138cc <enet_software_reset>:
 80138cc:	4b07      	ldr	r3, [pc, #28]	; (80138ec <enet_software_reset+0x20>)
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	f042 0201 	orr.w	r2, r2, #1
 80138d4:	601a      	str	r2, [r3, #0]
 80138d6:	4a06      	ldr	r2, [pc, #24]	; (80138f0 <enet_software_reset+0x24>)
 80138d8:	6819      	ldr	r1, [r3, #0]
 80138da:	07c9      	lsls	r1, r1, #31
 80138dc:	d501      	bpl.n	80138e2 <enet_software_reset+0x16>
 80138de:	3a01      	subs	r2, #1
 80138e0:	d1fa      	bne.n	80138d8 <enet_software_reset+0xc>
 80138e2:	6818      	ldr	r0, [r3, #0]
 80138e4:	43c0      	mvns	r0, r0
 80138e6:	f000 0001 	and.w	r0, r0, #1
 80138ea:	4770      	bx	lr
 80138ec:	40029000 	andmi	r9, r2, r0
 80138f0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080138f4 <enet_descriptors_chain_init>:
 80138f4:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 80138f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138fa:	4a19      	ldr	r2, [pc, #100]	; (8013960 <enet_descriptors_chain_init+0x6c>)
 80138fc:	d125      	bne.n	801394a <enet_descriptors_chain_init+0x56>
 80138fe:	2500      	movs	r5, #0
 8013900:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8013904:	2002      	movs	r0, #2
 8013906:	4b17      	ldr	r3, [pc, #92]	; (8013964 <enet_descriptors_chain_init+0x70>)
 8013908:	4c17      	ldr	r4, [pc, #92]	; (8013968 <enet_descriptors_chain_init+0x74>)
 801390a:	6113      	str	r3, [r2, #16]
 801390c:	4a17      	ldr	r2, [pc, #92]	; (801396c <enet_descriptors_chain_init+0x78>)
 801390e:	6013      	str	r3, [r2, #0]
 8013910:	2200      	movs	r2, #0
 8013912:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 8013916:	4916      	ldr	r1, [pc, #88]	; (8013970 <enet_descriptors_chain_init+0x7c>)
 8013918:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801391c:	600a      	str	r2, [r1, #0]
 801391e:	4915      	ldr	r1, [pc, #84]	; (8013974 <enet_descriptors_chain_init+0x80>)
 8013920:	600a      	str	r2, [r1, #0]
 8013922:	f103 0110 	add.w	r1, r3, #16
 8013926:	fb0e 4702 	mla	r7, lr, r2, r4
 801392a:	f841 7c08 	str.w	r7, [r1, #-8]
 801392e:	4594      	cmp	ip, r2
 8013930:	bf94      	ite	ls
 8013932:	461f      	movls	r7, r3
 8013934:	460f      	movhi	r7, r1
 8013936:	3201      	adds	r2, #1
 8013938:	4290      	cmp	r0, r2
 801393a:	e941 6504 	strd	r6, r5, [r1, #-16]
 801393e:	f841 7c04 	str.w	r7, [r1, #-4]
 8013942:	f101 0110 	add.w	r1, r1, #16
 8013946:	d1ee      	bne.n	8013926 <enet_descriptors_chain_init+0x32>
 8013948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801394a:	4b0b      	ldr	r3, [pc, #44]	; (8013978 <enet_descriptors_chain_init+0x84>)
 801394c:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8013950:	60d3      	str	r3, [r2, #12]
 8013952:	4a0a      	ldr	r2, [pc, #40]	; (801397c <enet_descriptors_chain_init+0x88>)
 8013954:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013958:	2008      	movs	r0, #8
 801395a:	4c09      	ldr	r4, [pc, #36]	; (8013980 <enet_descriptors_chain_init+0x8c>)
 801395c:	6013      	str	r3, [r2, #0]
 801395e:	e7d7      	b.n	8013910 <enet_descriptors_chain_init+0x1c>
 8013960:	40029000 	andmi	r9, r2, r0
 8013964:	2001462c 	andcs	r4, r1, ip, lsr #12
 8013968:	20013a44 	andcs	r3, r1, r4, asr #20
 801396c:	200109e4 	andcs	r0, r1, r4, ror #19
 8013970:	200109d8 	ldrdcs	r0, [r1], -r8
 8013974:	200109dc 	ldrdcs	r0, [r1], -ip
 8013978:	200139c4 	andcs	r3, r1, r4, asr #19
 801397c:	200109e0 	andcs	r0, r1, r0, ror #19
 8013980:	20010a24 	andcs	r0, r1, r4, lsr #20

08013984 <enet_frame_receive>:
 8013984:	4a1d      	ldr	r2, [pc, #116]	; (80139fc <enet_frame_receive+0x78>)
 8013986:	b510      	push	{r4, lr}
 8013988:	6813      	ldr	r3, [r2, #0]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	db33      	blt.n	80139f8 <enet_frame_receive+0x74>
 8013990:	b970      	cbnz	r0, 80139b0 <enet_frame_receive+0x2c>
 8013992:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8013996:	6813      	ldr	r3, [r2, #0]
 8013998:	6019      	str	r1, [r3, #0]
 801399a:	4919      	ldr	r1, [pc, #100]	; (8013a00 <enet_frame_receive+0x7c>)
 801399c:	6948      	ldr	r0, [r1, #20]
 801399e:	0604      	lsls	r4, r0, #24
 80139a0:	d419      	bmi.n	80139d6 <enet_frame_receive+0x52>
 80139a2:	6859      	ldr	r1, [r3, #4]
 80139a4:	0448      	lsls	r0, r1, #17
 80139a6:	d51b      	bpl.n	80139e0 <enet_frame_receive+0x5c>
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	2001      	movs	r0, #1
 80139ac:	6013      	str	r3, [r2, #0]
 80139ae:	bd10      	pop	{r4, pc}
 80139b0:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 80139b4:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80139b8:	d11e      	bne.n	80139f8 <enet_frame_receive+0x74>
 80139ba:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80139be:	3b04      	subs	r3, #4
 80139c0:	428b      	cmp	r3, r1
 80139c2:	d819      	bhi.n	80139f8 <enet_frame_receive+0x74>
 80139c4:	2100      	movs	r1, #0
 80139c6:	4299      	cmp	r1, r3
 80139c8:	6814      	ldr	r4, [r2, #0]
 80139ca:	d2e2      	bcs.n	8013992 <enet_frame_receive+0xe>
 80139cc:	68a4      	ldr	r4, [r4, #8]
 80139ce:	5d0c      	ldrb	r4, [r1, r4]
 80139d0:	5444      	strb	r4, [r0, r1]
 80139d2:	3101      	adds	r1, #1
 80139d4:	e7f7      	b.n	80139c6 <enet_frame_receive+0x42>
 80139d6:	2080      	movs	r0, #128	; 0x80
 80139d8:	6148      	str	r0, [r1, #20]
 80139da:	2000      	movs	r0, #0
 80139dc:	6088      	str	r0, [r1, #8]
 80139de:	e7e0      	b.n	80139a2 <enet_frame_receive+0x1e>
 80139e0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80139e4:	4906      	ldr	r1, [pc, #24]	; (8013a00 <enet_frame_receive+0x7c>)
 80139e6:	bf05      	ittet	eq
 80139e8:	3310      	addeq	r3, #16
 80139ea:	6809      	ldreq	r1, [r1, #0]
 80139ec:	68cb      	ldrne	r3, [r1, #12]
 80139ee:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80139f2:	bf08      	it	eq
 80139f4:	185b      	addeq	r3, r3, r1
 80139f6:	e7d8      	b.n	80139aa <enet_frame_receive+0x26>
 80139f8:	2000      	movs	r0, #0
 80139fa:	e7d8      	b.n	80139ae <enet_frame_receive+0x2a>
 80139fc:	200109e0 	andcs	r0, r1, r0, ror #19
 8013a00:	40029000 	andmi	r9, r2, r0

08013a04 <enet_frame_transmit>:
 8013a04:	4a1e      	ldr	r2, [pc, #120]	; (8013a80 <enet_frame_transmit+0x7c>)
 8013a06:	b530      	push	{r4, r5, lr}
 8013a08:	6813      	ldr	r3, [r2, #0]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	db34      	blt.n	8013a7a <enet_frame_transmit+0x76>
 8013a10:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8013a14:	4299      	cmp	r1, r3
 8013a16:	d830      	bhi.n	8013a7a <enet_frame_transmit+0x76>
 8013a18:	b9e8      	cbnz	r0, 8013a56 <enet_frame_transmit+0x52>
 8013a1a:	6813      	ldr	r3, [r2, #0]
 8013a1c:	4819      	ldr	r0, [pc, #100]	; (8013a84 <enet_frame_transmit+0x80>)
 8013a1e:	6059      	str	r1, [r3, #4]
 8013a20:	6819      	ldr	r1, [r3, #0]
 8013a22:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8013a26:	6019      	str	r1, [r3, #0]
 8013a28:	6941      	ldr	r1, [r0, #20]
 8013a2a:	6944      	ldr	r4, [r0, #20]
 8013a2c:	f001 0104 	and.w	r1, r1, #4
 8013a30:	f004 0420 	and.w	r4, r4, #32
 8013a34:	4321      	orrs	r1, r4
 8013a36:	d110      	bne.n	8013a5a <enet_frame_transmit+0x56>
 8013a38:	6819      	ldr	r1, [r3, #0]
 8013a3a:	02c8      	lsls	r0, r1, #11
 8013a3c:	d511      	bpl.n	8013a62 <enet_frame_transmit+0x5e>
 8013a3e:	68db      	ldr	r3, [r3, #12]
 8013a40:	2001      	movs	r0, #1
 8013a42:	6013      	str	r3, [r2, #0]
 8013a44:	bd30      	pop	{r4, r5, pc}
 8013a46:	5cc5      	ldrb	r5, [r0, r3]
 8013a48:	68a4      	ldr	r4, [r4, #8]
 8013a4a:	551d      	strb	r5, [r3, r4]
 8013a4c:	3301      	adds	r3, #1
 8013a4e:	428b      	cmp	r3, r1
 8013a50:	6814      	ldr	r4, [r2, #0]
 8013a52:	d1f8      	bne.n	8013a46 <enet_frame_transmit+0x42>
 8013a54:	e7e1      	b.n	8013a1a <enet_frame_transmit+0x16>
 8013a56:	2300      	movs	r3, #0
 8013a58:	e7f9      	b.n	8013a4e <enet_frame_transmit+0x4a>
 8013a5a:	6141      	str	r1, [r0, #20]
 8013a5c:	2100      	movs	r1, #0
 8013a5e:	6041      	str	r1, [r0, #4]
 8013a60:	e7ea      	b.n	8013a38 <enet_frame_transmit+0x34>
 8013a62:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8013a66:	4907      	ldr	r1, [pc, #28]	; (8013a84 <enet_frame_transmit+0x80>)
 8013a68:	bf05      	ittet	eq
 8013a6a:	3310      	addeq	r3, #16
 8013a6c:	6809      	ldreq	r1, [r1, #0]
 8013a6e:	690b      	ldrne	r3, [r1, #16]
 8013a70:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8013a74:	bf08      	it	eq
 8013a76:	185b      	addeq	r3, r3, r1
 8013a78:	e7e2      	b.n	8013a40 <enet_frame_transmit+0x3c>
 8013a7a:	2000      	movs	r0, #0
 8013a7c:	e7e2      	b.n	8013a44 <enet_frame_transmit+0x40>
 8013a7e:	bf00      	nop
 8013a80:	200109e4 	andcs	r0, r1, r4, ror #19
 8013a84:	40029000 	andmi	r9, r2, r0

08013a88 <enet_transmit_checksum_config>:
 8013a88:	6803      	ldr	r3, [r0, #0]
 8013a8a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8013a8e:	430b      	orrs	r3, r1
 8013a90:	6003      	str	r3, [r0, #0]
 8013a92:	4770      	bx	lr

08013a94 <enet_mac_address_set>:
 8013a94:	888a      	ldrh	r2, [r1, #4]
 8013a96:	4b03      	ldr	r3, [pc, #12]	; (8013aa4 <enet_mac_address_set+0x10>)
 8013a98:	50c2      	str	r2, [r0, r3]
 8013a9a:	680a      	ldr	r2, [r1, #0]
 8013a9c:	3304      	adds	r3, #4
 8013a9e:	50c2      	str	r2, [r0, r3]
 8013aa0:	4770      	bx	lr
 8013aa2:	bf00      	nop
 8013aa4:	40028040 	andmi	r8, r2, r0, asr #32

08013aa8 <enet_rx_enable>:
 8013aa8:	4a05      	ldr	r2, [pc, #20]	; (8013ac0 <enet_rx_enable+0x18>)
 8013aaa:	6813      	ldr	r3, [r2, #0]
 8013aac:	f043 0304 	orr.w	r3, r3, #4
 8013ab0:	6013      	str	r3, [r2, #0]
 8013ab2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013ab6:	6993      	ldr	r3, [r2, #24]
 8013ab8:	f043 0302 	orr.w	r3, r3, #2
 8013abc:	6193      	str	r3, [r2, #24]
 8013abe:	4770      	bx	lr
 8013ac0:	40028000 	andmi	r8, r2, r0

08013ac4 <enet_phy_write_read>:
 8013ac4:	b530      	push	{r4, r5, lr}
 8013ac6:	4604      	mov	r4, r0
 8013ac8:	4d13      	ldr	r5, [pc, #76]	; (8013b18 <enet_phy_write_read+0x54>)
 8013aca:	0192      	lsls	r2, r2, #6
 8013acc:	6928      	ldr	r0, [r5, #16]
 8013ace:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8013ad2:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 8013ad6:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 8013ada:	4302      	orrs	r2, r0
 8013adc:	02c9      	lsls	r1, r1, #11
 8013ade:	b289      	uxth	r1, r1
 8013ae0:	2c02      	cmp	r4, #2
 8013ae2:	ea42 0204 	orr.w	r2, r2, r4
 8013ae6:	ea42 0201 	orr.w	r2, r2, r1
 8013aea:	bf08      	it	eq
 8013aec:	8819      	ldrheq	r1, [r3, #0]
 8013aee:	f042 0201 	orr.w	r2, r2, #1
 8013af2:	bf08      	it	eq
 8013af4:	6169      	streq	r1, [r5, #20]
 8013af6:	612a      	str	r2, [r5, #16]
 8013af8:	4907      	ldr	r1, [pc, #28]	; (8013b18 <enet_phy_write_read+0x54>)
 8013afa:	4a08      	ldr	r2, [pc, #32]	; (8013b1c <enet_phy_write_read+0x58>)
 8013afc:	6908      	ldr	r0, [r1, #16]
 8013afe:	07c0      	lsls	r0, r0, #31
 8013b00:	d501      	bpl.n	8013b06 <enet_phy_write_read+0x42>
 8013b02:	3a01      	subs	r2, #1
 8013b04:	d1fa      	bne.n	8013afc <enet_phy_write_read+0x38>
 8013b06:	690a      	ldr	r2, [r1, #16]
 8013b08:	43d2      	mvns	r2, r2
 8013b0a:	f002 0001 	and.w	r0, r2, #1
 8013b0e:	b90c      	cbnz	r4, 8013b14 <enet_phy_write_read+0x50>
 8013b10:	694a      	ldr	r2, [r1, #20]
 8013b12:	801a      	strh	r2, [r3, #0]
 8013b14:	bd30      	pop	{r4, r5, pc}
 8013b16:	bf00      	nop
 8013b18:	40028000 	andmi	r8, r2, r0
 8013b1c:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08013b20 <enet_phy_config>:
 8013b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b22:	4d22      	ldr	r5, [pc, #136]	; (8013bac <enet_phy_config+0x8c>)
 8013b24:	2001      	movs	r0, #1
 8013b26:	692c      	ldr	r4, [r5, #16]
 8013b28:	f7fe ff36 	bl	8012998 <rcu_clock_freq_get>
 8013b2c:	4b20      	ldr	r3, [pc, #128]	; (8013bb0 <enet_phy_config+0x90>)
 8013b2e:	4a21      	ldr	r2, [pc, #132]	; (8013bb4 <enet_phy_config+0x94>)
 8013b30:	4403      	add	r3, r0
 8013b32:	4293      	cmp	r3, r2
 8013b34:	f024 041c 	bic.w	r4, r4, #28
 8013b38:	d21f      	bcs.n	8013b7a <enet_phy_config+0x5a>
 8013b3a:	f044 0408 	orr.w	r4, r4, #8
 8013b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013b42:	612c      	str	r4, [r5, #16]
 8013b44:	2200      	movs	r2, #0
 8013b46:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013b4a:	2101      	movs	r1, #1
 8013b4c:	2002      	movs	r0, #2
 8013b4e:	f10d 0306 	add.w	r3, sp, #6
 8013b52:	f7ff ffb7 	bl	8013ac4 <enet_phy_write_read>
 8013b56:	b310      	cbz	r0, 8013b9e <enet_phy_config+0x7e>
 8013b58:	2200      	movs	r2, #0
 8013b5a:	4817      	ldr	r0, [pc, #92]	; (8013bb8 <enet_phy_config+0x98>)
 8013b5c:	f7ff feaa 	bl	80138b4 <enet_delay>
 8013b60:	2101      	movs	r1, #1
 8013b62:	4610      	mov	r0, r2
 8013b64:	f10d 0306 	add.w	r3, sp, #6
 8013b68:	f7ff ffac 	bl	8013ac4 <enet_phy_write_read>
 8013b6c:	b1b8      	cbz	r0, 8013b9e <enet_phy_config+0x7e>
 8013b6e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013b72:	43c0      	mvns	r0, r0
 8013b74:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8013b78:	e012      	b.n	8013ba0 <enet_phy_config+0x80>
 8013b7a:	4b10      	ldr	r3, [pc, #64]	; (8013bbc <enet_phy_config+0x9c>)
 8013b7c:	4a10      	ldr	r2, [pc, #64]	; (8013bc0 <enet_phy_config+0xa0>)
 8013b7e:	4403      	add	r3, r0
 8013b80:	4293      	cmp	r3, r2
 8013b82:	d802      	bhi.n	8013b8a <enet_phy_config+0x6a>
 8013b84:	f044 040c 	orr.w	r4, r4, #12
 8013b88:	e7d9      	b.n	8013b3e <enet_phy_config+0x1e>
 8013b8a:	4b0e      	ldr	r3, [pc, #56]	; (8013bc4 <enet_phy_config+0xa4>)
 8013b8c:	4a0e      	ldr	r2, [pc, #56]	; (8013bc8 <enet_phy_config+0xa8>)
 8013b8e:	4403      	add	r3, r0
 8013b90:	4293      	cmp	r3, r2
 8013b92:	d9d4      	bls.n	8013b3e <enet_phy_config+0x1e>
 8013b94:	4b0d      	ldr	r3, [pc, #52]	; (8013bcc <enet_phy_config+0xac>)
 8013b96:	4a0e      	ldr	r2, [pc, #56]	; (8013bd0 <enet_phy_config+0xb0>)
 8013b98:	4403      	add	r3, r0
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d902      	bls.n	8013ba4 <enet_phy_config+0x84>
 8013b9e:	2000      	movs	r0, #0
 8013ba0:	b003      	add	sp, #12
 8013ba2:	bd30      	pop	{r4, r5, pc}
 8013ba4:	f044 0404 	orr.w	r4, r4, #4
 8013ba8:	e7c9      	b.n	8013b3e <enet_phy_config+0x1e>
 8013baa:	bf00      	nop
 8013bac:	40028000 	andmi	r8, r2, r0
 8013bb0:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8013bb4:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8013bb8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8013bbc:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8013bc0:	017d783f 	cmneq	sp, pc, lsr r8
 8013bc4:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8013bc8:	01c9c37f 	biceq	ip, r9, pc, ror r3
 8013bcc:	faa2b580 	blx	68c11d4 <__stack_size+0x68bf9d4>
 8013bd0:	0112a880 	tsteq	r2, r0, lsl #17

08013bd4 <enet_init>:
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bd8:	4604      	mov	r4, r0
 8013bda:	460d      	mov	r5, r1
 8013bdc:	4616      	mov	r6, r2
 8013bde:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013be2:	f7ff ff9d 	bl	8013b20 <enet_phy_config>
 8013be6:	2800      	cmp	r0, #0
 8013be8:	d037      	beq.n	8013c5a <enet_init+0x86>
 8013bea:	4b3b      	ldr	r3, [pc, #236]	; (8013cd8 <enet_init+0x104>)
 8013bec:	4a3b      	ldr	r2, [pc, #236]	; (8013cdc <enet_init+0x108>)
 8013bee:	6819      	ldr	r1, [r3, #0]
 8013bf0:	2c01      	cmp	r4, #1
 8013bf2:	ea02 0201 	and.w	r2, r2, r1
 8013bf6:	601a      	str	r2, [r3, #0]
 8013bf8:	f04f 0200 	mov.w	r2, #0
 8013bfc:	605a      	str	r2, [r3, #4]
 8013bfe:	609a      	str	r2, [r3, #8]
 8013c00:	60da      	str	r2, [r3, #12]
 8013c02:	6999      	ldr	r1, [r3, #24]
 8013c04:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8013c08:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8013c0c:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8013c10:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8013c14:	6199      	str	r1, [r3, #24]
 8013c16:	4932      	ldr	r1, [pc, #200]	; (8013ce0 <enet_init+0x10c>)
 8013c18:	61da      	str	r2, [r3, #28]
 8013c1a:	6988      	ldr	r0, [r1, #24]
 8013c1c:	4b31      	ldr	r3, [pc, #196]	; (8013ce4 <enet_init+0x110>)
 8013c1e:	ea03 0300 	and.w	r3, r3, r0
 8013c22:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8013c26:	618b      	str	r3, [r1, #24]
 8013c28:	680b      	ldr	r3, [r1, #0]
 8013c2a:	4b2f      	ldr	r3, [pc, #188]	; (8013ce8 <enet_init+0x114>)
 8013c2c:	600b      	str	r3, [r1, #0]
 8013c2e:	d01e      	beq.n	8013c6e <enet_init+0x9a>
 8013c30:	08e3      	lsrs	r3, r4, #3
 8013c32:	0861      	lsrs	r1, r4, #1
 8013c34:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8013c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c3c:	430b      	orrs	r3, r1
 8013c3e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013c42:	2101      	movs	r1, #1
 8013c44:	2002      	movs	r0, #2
 8013c46:	f10d 0306 	add.w	r3, sp, #6
 8013c4a:	f7ff ff3b 	bl	8013ac4 <enet_phy_write_read>
 8013c4e:	b158      	cbz	r0, 8013c68 <enet_init+0x94>
 8013c50:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013c54:	f7ff fe2e 	bl	80138b4 <enet_delay>
 8013c58:	e05d      	b.n	8013d16 <enet_init+0x142>
 8013c5a:	4824      	ldr	r0, [pc, #144]	; (8013cec <enet_init+0x118>)
 8013c5c:	f7ff fe2a 	bl	80138b4 <enet_delay>
 8013c60:	f7ff ff5e 	bl	8013b20 <enet_phy_config>
 8013c64:	2800      	cmp	r0, #0
 8013c66:	d1c0      	bne.n	8013bea <enet_init+0x16>
 8013c68:	2000      	movs	r0, #0
 8013c6a:	b003      	add	sp, #12
 8013c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c6e:	4614      	mov	r4, r2
 8013c70:	4f1f      	ldr	r7, [pc, #124]	; (8013cf0 <enet_init+0x11c>)
 8013c72:	2201      	movs	r2, #1
 8013c74:	2000      	movs	r0, #0
 8013c76:	4611      	mov	r1, r2
 8013c78:	f10d 0306 	add.w	r3, sp, #6
 8013c7c:	f7ff ff22 	bl	8013ac4 <enet_phy_write_read>
 8013c80:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013c84:	3401      	adds	r4, #1
 8013c86:	f002 0204 	and.w	r2, r2, #4
 8013c8a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013c8e:	b912      	cbnz	r2, 8013c96 <enet_init+0xc2>
 8013c90:	42bc      	cmp	r4, r7
 8013c92:	d1ee      	bne.n	8013c72 <enet_init+0x9e>
 8013c94:	e7e8      	b.n	8013c68 <enet_init+0x94>
 8013c96:	42bc      	cmp	r4, r7
 8013c98:	d0e6      	beq.n	8013c68 <enet_init+0x94>
 8013c9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013c9e:	2101      	movs	r1, #1
 8013ca0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013ca4:	2002      	movs	r0, #2
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	f7ff ff0c 	bl	8013ac4 <enet_phy_write_read>
 8013cac:	2800      	cmp	r0, #0
 8013cae:	d0db      	beq.n	8013c68 <enet_init+0x94>
 8013cb0:	2400      	movs	r4, #0
 8013cb2:	4f0f      	ldr	r7, [pc, #60]	; (8013cf0 <enet_init+0x11c>)
 8013cb4:	2201      	movs	r2, #1
 8013cb6:	2000      	movs	r0, #0
 8013cb8:	4611      	mov	r1, r2
 8013cba:	f10d 0306 	add.w	r3, sp, #6
 8013cbe:	f7ff ff01 	bl	8013ac4 <enet_phy_write_read>
 8013cc2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013cc6:	3401      	adds	r4, #1
 8013cc8:	f002 0220 	and.w	r2, r2, #32
 8013ccc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013cd0:	b982      	cbnz	r2, 8013cf4 <enet_init+0x120>
 8013cd2:	42bc      	cmp	r4, r7
 8013cd4:	d1ee      	bne.n	8013cb4 <enet_init+0xe0>
 8013cd6:	e7c7      	b.n	8013c68 <enet_init+0x94>
 8013cd8:	40028000 	andmi	r8, r2, r0
 8013cdc:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8013ce0:	40029000 	andmi	r9, r2, r0
 8013ce4:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8013ce8:	02c16000 	sbceq	r6, r1, #0
 8013cec:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8013cf0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8013cf4:	42bc      	cmp	r4, r7
 8013cf6:	d0b7      	beq.n	8013c68 <enet_init+0x94>
 8013cf8:	2101      	movs	r1, #1
 8013cfa:	2210      	movs	r2, #16
 8013cfc:	2000      	movs	r0, #0
 8013cfe:	f7ff fee1 	bl	8013ac4 <enet_phy_write_read>
 8013d02:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013d06:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8013d0a:	0799      	lsls	r1, r3, #30
 8013d0c:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8013d10:	d401      	bmi.n	8013d16 <enet_init+0x142>
 8013d12:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8013d16:	4b63      	ldr	r3, [pc, #396]	; (8013ea4 <enet_init+0x2d0>)
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 8013d1e:	4314      	orrs	r4, r2
 8013d20:	056a      	lsls	r2, r5, #21
 8013d22:	601c      	str	r4, [r3, #0]
 8013d24:	d50b      	bpl.n	8013d3e <enet_init+0x16a>
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8013d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013d30:	601a      	str	r2, [r3, #0]
 8013d32:	4a5d      	ldr	r2, [pc, #372]	; (8013ea8 <enet_init+0x2d4>)
 8013d34:	6993      	ldr	r3, [r2, #24]
 8013d36:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013d3a:	431d      	orrs	r5, r3
 8013d3c:	6195      	str	r5, [r2, #24]
 8013d3e:	4959      	ldr	r1, [pc, #356]	; (8013ea4 <enet_init+0x2d0>)
 8013d40:	684b      	ldr	r3, [r1, #4]
 8013d42:	431e      	orrs	r6, r3
 8013d44:	4b59      	ldr	r3, [pc, #356]	; (8013eac <enet_init+0x2d8>)
 8013d46:	604e      	str	r6, [r1, #4]
 8013d48:	681a      	ldr	r2, [r3, #0]
 8013d4a:	07d7      	lsls	r7, r2, #31
 8013d4c:	d510      	bpl.n	8013d70 <enet_init+0x19c>
 8013d4e:	685a      	ldr	r2, [r3, #4]
 8013d50:	680c      	ldr	r4, [r1, #0]
 8013d52:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8013d56:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8013d5a:	4320      	orrs	r0, r4
 8013d5c:	6008      	str	r0, [r1, #0]
 8013d5e:	4852      	ldr	r0, [pc, #328]	; (8013ea8 <enet_init+0x2d4>)
 8013d60:	0892      	lsrs	r2, r2, #2
 8013d62:	6981      	ldr	r1, [r0, #24]
 8013d64:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8013d68:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8013d6c:	430a      	orrs	r2, r1
 8013d6e:	6182      	str	r2, [r0, #24]
 8013d70:	681a      	ldr	r2, [r3, #0]
 8013d72:	0796      	lsls	r6, r2, #30
 8013d74:	d508      	bpl.n	8013d88 <enet_init+0x1b4>
 8013d76:	494c      	ldr	r1, [pc, #304]	; (8013ea8 <enet_init+0x2d4>)
 8013d78:	6898      	ldr	r0, [r3, #8]
 8013d7a:	680a      	ldr	r2, [r1, #0]
 8013d7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8013d80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8013d84:	4302      	orrs	r2, r0
 8013d86:	600a      	str	r2, [r1, #0]
 8013d88:	681a      	ldr	r2, [r3, #0]
 8013d8a:	0755      	lsls	r5, r2, #29
 8013d8c:	d508      	bpl.n	8013da0 <enet_init+0x1cc>
 8013d8e:	4946      	ldr	r1, [pc, #280]	; (8013ea8 <enet_init+0x2d4>)
 8013d90:	68d8      	ldr	r0, [r3, #12]
 8013d92:	680a      	ldr	r2, [r1, #0]
 8013d94:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8013d98:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8013d9c:	4302      	orrs	r2, r0
 8013d9e:	600a      	str	r2, [r1, #0]
 8013da0:	681a      	ldr	r2, [r3, #0]
 8013da2:	0714      	lsls	r4, r2, #28
 8013da4:	d508      	bpl.n	8013db8 <enet_init+0x1e4>
 8013da6:	4940      	ldr	r1, [pc, #256]	; (8013ea8 <enet_init+0x2d4>)
 8013da8:	6918      	ldr	r0, [r3, #16]
 8013daa:	680a      	ldr	r2, [r1, #0]
 8013dac:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8013db0:	f022 0202 	bic.w	r2, r2, #2
 8013db4:	4302      	orrs	r2, r0
 8013db6:	600a      	str	r2, [r1, #0]
 8013db8:	681a      	ldr	r2, [r3, #0]
 8013dba:	06d0      	lsls	r0, r2, #27
 8013dbc:	d506      	bpl.n	8013dcc <enet_init+0x1f8>
 8013dbe:	493a      	ldr	r1, [pc, #232]	; (8013ea8 <enet_init+0x2d4>)
 8013dc0:	4a3b      	ldr	r2, [pc, #236]	; (8013eb0 <enet_init+0x2dc>)
 8013dc2:	6988      	ldr	r0, [r1, #24]
 8013dc4:	4002      	ands	r2, r0
 8013dc6:	6958      	ldr	r0, [r3, #20]
 8013dc8:	4302      	orrs	r2, r0
 8013dca:	618a      	str	r2, [r1, #24]
 8013dcc:	681a      	ldr	r2, [r3, #0]
 8013dce:	0691      	lsls	r1, r2, #26
 8013dd0:	d508      	bpl.n	8013de4 <enet_init+0x210>
 8013dd2:	4935      	ldr	r1, [pc, #212]	; (8013ea8 <enet_init+0x2d4>)
 8013dd4:	6998      	ldr	r0, [r3, #24]
 8013dd6:	698a      	ldr	r2, [r1, #24]
 8013dd8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8013ddc:	f022 0204 	bic.w	r2, r2, #4
 8013de0:	4302      	orrs	r2, r0
 8013de2:	618a      	str	r2, [r1, #24]
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	0652      	lsls	r2, r2, #25
 8013de8:	d506      	bpl.n	8013df8 <enet_init+0x224>
 8013dea:	492e      	ldr	r1, [pc, #184]	; (8013ea4 <enet_init+0x2d0>)
 8013dec:	69d8      	ldr	r0, [r3, #28]
 8013dee:	69ca      	ldr	r2, [r1, #28]
 8013df0:	0c52      	lsrs	r2, r2, #17
 8013df2:	0452      	lsls	r2, r2, #17
 8013df4:	4302      	orrs	r2, r0
 8013df6:	61ca      	str	r2, [r1, #28]
 8013df8:	681a      	ldr	r2, [r3, #0]
 8013dfa:	0617      	lsls	r7, r2, #24
 8013dfc:	d517      	bpl.n	8013e2e <enet_init+0x25a>
 8013dfe:	4c29      	ldr	r4, [pc, #164]	; (8013ea4 <enet_init+0x2d0>)
 8013e00:	6a1a      	ldr	r2, [r3, #32]
 8013e02:	69a0      	ldr	r0, [r4, #24]
 8013e04:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8013e08:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8013e0c:	0400      	lsls	r0, r0, #16
 8013e0e:	0c00      	lsrs	r0, r0, #16
 8013e10:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8013e14:	4301      	orrs	r1, r0
 8013e16:	4824      	ldr	r0, [pc, #144]	; (8013ea8 <enet_init+0x2d4>)
 8013e18:	61a1      	str	r1, [r4, #24]
 8013e1a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8013e1e:	0a12      	lsrs	r2, r2, #8
 8013e20:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8013e24:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8013e28:	430a      	orrs	r2, r1
 8013e2a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8013e2e:	681a      	ldr	r2, [r3, #0]
 8013e30:	05d6      	lsls	r6, r2, #23
 8013e32:	bf42      	ittt	mi
 8013e34:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8013e36:	4a1b      	ldrmi	r2, [pc, #108]	; (8013ea4 <enet_init+0x2d0>)
 8013e38:	6091      	strmi	r1, [r2, #8]
 8013e3a:	681a      	ldr	r2, [r3, #0]
 8013e3c:	0595      	lsls	r5, r2, #22
 8013e3e:	bf42      	ittt	mi
 8013e40:	4a18      	ldrmi	r2, [pc, #96]	; (8013ea4 <enet_init+0x2d0>)
 8013e42:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8013e44:	60d1      	strmi	r1, [r2, #12]
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	0554      	lsls	r4, r2, #21
 8013e4a:	d508      	bpl.n	8013e5e <enet_init+0x28a>
 8013e4c:	4915      	ldr	r1, [pc, #84]	; (8013ea4 <enet_init+0x2d0>)
 8013e4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8013e50:	684a      	ldr	r2, [r1, #4]
 8013e52:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8013e56:	f022 0206 	bic.w	r2, r2, #6
 8013e5a:	4302      	orrs	r2, r0
 8013e5c:	604a      	str	r2, [r1, #4]
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	0510      	lsls	r0, r2, #20
 8013e62:	d508      	bpl.n	8013e76 <enet_init+0x2a2>
 8013e64:	490f      	ldr	r1, [pc, #60]	; (8013ea4 <enet_init+0x2d0>)
 8013e66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013e68:	680a      	ldr	r2, [r1, #0]
 8013e6a:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8013e6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8013e72:	4302      	orrs	r2, r0
 8013e74:	600a      	str	r2, [r1, #0]
 8013e76:	681a      	ldr	r2, [r3, #0]
 8013e78:	04d1      	lsls	r1, r2, #19
 8013e7a:	d506      	bpl.n	8013e8a <enet_init+0x2b6>
 8013e7c:	4909      	ldr	r1, [pc, #36]	; (8013ea4 <enet_init+0x2d0>)
 8013e7e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013e80:	680a      	ldr	r2, [r1, #0]
 8013e82:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8013e86:	4302      	orrs	r2, r0
 8013e88:	600a      	str	r2, [r1, #0]
 8013e8a:	681a      	ldr	r2, [r3, #0]
 8013e8c:	0492      	lsls	r2, r2, #18
 8013e8e:	d506      	bpl.n	8013e9e <enet_init+0x2ca>
 8013e90:	4904      	ldr	r1, [pc, #16]	; (8013ea4 <enet_init+0x2d0>)
 8013e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e94:	680a      	ldr	r2, [r1, #0]
 8013e96:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8013e9a:	4313      	orrs	r3, r2
 8013e9c:	600b      	str	r3, [r1, #0]
 8013e9e:	2001      	movs	r0, #1
 8013ea0:	e6e3      	b.n	8013c6a <enet_init+0x96>
 8013ea2:	bf00      	nop
 8013ea4:	40028000 	andmi	r8, r2, r0
 8013ea8:	40029000 	andmi	r9, r2, r0
 8013eac:	200109e8 	andcs	r0, r1, r8, ror #19
 8013eb0:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08013eb4 <enet_txfifo_flush>:
 8013eb4:	4b06      	ldr	r3, [pc, #24]	; (8013ed0 <enet_txfifo_flush+0x1c>)
 8013eb6:	4807      	ldr	r0, [pc, #28]	; (8013ed4 <enet_txfifo_flush+0x20>)
 8013eb8:	699a      	ldr	r2, [r3, #24]
 8013eba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013ebe:	619a      	str	r2, [r3, #24]
 8013ec0:	699a      	ldr	r2, [r3, #24]
 8013ec2:	02d2      	lsls	r2, r2, #11
 8013ec4:	d502      	bpl.n	8013ecc <enet_txfifo_flush+0x18>
 8013ec6:	3801      	subs	r0, #1
 8013ec8:	d1fa      	bne.n	8013ec0 <enet_txfifo_flush+0xc>
 8013eca:	4770      	bx	lr
 8013ecc:	2001      	movs	r0, #1
 8013ece:	4770      	bx	lr
 8013ed0:	40029000 	andmi	r9, r2, r0
 8013ed4:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08013ed8 <enet_tx_enable>:
 8013ed8:	4a06      	ldr	r2, [pc, #24]	; (8013ef4 <enet_tx_enable+0x1c>)
 8013eda:	b508      	push	{r3, lr}
 8013edc:	6813      	ldr	r3, [r2, #0]
 8013ede:	f043 0308 	orr.w	r3, r3, #8
 8013ee2:	6013      	str	r3, [r2, #0]
 8013ee4:	f7ff ffe6 	bl	8013eb4 <enet_txfifo_flush>
 8013ee8:	4a03      	ldr	r2, [pc, #12]	; (8013ef8 <enet_tx_enable+0x20>)
 8013eea:	6993      	ldr	r3, [r2, #24]
 8013eec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013ef0:	6193      	str	r3, [r2, #24]
 8013ef2:	bd08      	pop	{r3, pc}
 8013ef4:	40028000 	andmi	r8, r2, r0
 8013ef8:	40029000 	andmi	r9, r2, r0

08013efc <enet_enable>:
 8013efc:	b508      	push	{r3, lr}
 8013efe:	f7ff ffeb 	bl	8013ed8 <enet_tx_enable>
 8013f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013f06:	f7ff bdcf 	b.w	8013aa8 <enet_rx_enable>

08013f0a <enet_desc_information_get>:
 8013f0a:	2905      	cmp	r1, #5
 8013f0c:	d817      	bhi.n	8013f3e <enet_desc_information_get+0x34>
 8013f0e:	e8df f001 	tbb	[pc, r1]
 8013f12:	03091012 	movweq	r1, #36882	; 0x9012
 8013f16:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8013f1a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8013f1e:	4770      	bx	lr
 8013f20:	88c0      	ldrh	r0, [r0, #6]
 8013f22:	e7fa      	b.n	8013f1a <enet_desc_information_get+0x10>
 8013f24:	8840      	ldrh	r0, [r0, #2]
 8013f26:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8013f2a:	2804      	cmp	r0, #4
 8013f2c:	d90a      	bls.n	8013f44 <enet_desc_information_get+0x3a>
 8013f2e:	3804      	subs	r0, #4
 8013f30:	4770      	bx	lr
 8013f32:	6880      	ldr	r0, [r0, #8]
 8013f34:	4770      	bx	lr
 8013f36:	6800      	ldr	r0, [r0, #0]
 8013f38:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8013f3c:	4770      	bx	lr
 8013f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f42:	4770      	bx	lr
 8013f44:	2000      	movs	r0, #0
 8013f46:	4770      	bx	lr

08013f48 <enet_rxframe_drop>:
 8013f48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013f4c:	4814      	ldr	r0, [pc, #80]	; (8013fa0 <enet_rxframe_drop+0x58>)
 8013f4e:	b510      	push	{r4, lr}
 8013f50:	6802      	ldr	r2, [r0, #0]
 8013f52:	4914      	ldr	r1, [pc, #80]	; (8013fa4 <enet_rxframe_drop+0x5c>)
 8013f54:	6854      	ldr	r4, [r2, #4]
 8013f56:	6013      	str	r3, [r2, #0]
 8013f58:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8013f5c:	680b      	ldr	r3, [r1, #0]
 8013f5e:	d009      	beq.n	8013f74 <enet_rxframe_drop+0x2c>
 8013f60:	b12b      	cbz	r3, 8013f6e <enet_rxframe_drop+0x26>
 8013f62:	68da      	ldr	r2, [r3, #12]
 8013f64:	6002      	str	r2, [r0, #0]
 8013f66:	681a      	ldr	r2, [r3, #0]
 8013f68:	b1ba      	cbz	r2, 8013f9a <enet_rxframe_drop+0x52>
 8013f6a:	600a      	str	r2, [r1, #0]
 8013f6c:	bd10      	pop	{r4, pc}
 8013f6e:	68d3      	ldr	r3, [r2, #12]
 8013f70:	6003      	str	r3, [r0, #0]
 8013f72:	e7fb      	b.n	8013f6c <enet_rxframe_drop+0x24>
 8013f74:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8013f78:	4c0b      	ldr	r4, [pc, #44]	; (8013fa8 <enet_rxframe_drop+0x60>)
 8013f7a:	d006      	beq.n	8013f8a <enet_rxframe_drop+0x42>
 8013f7c:	68e2      	ldr	r2, [r4, #12]
 8013f7e:	6002      	str	r2, [r0, #0]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d0f3      	beq.n	8013f6c <enet_rxframe_drop+0x24>
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	600b      	str	r3, [r1, #0]
 8013f88:	e7f0      	b.n	8013f6c <enet_rxframe_drop+0x24>
 8013f8a:	6824      	ldr	r4, [r4, #0]
 8013f8c:	3210      	adds	r2, #16
 8013f8e:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8013f92:	4422      	add	r2, r4
 8013f94:	6002      	str	r2, [r0, #0]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d0e8      	beq.n	8013f6c <enet_rxframe_drop+0x24>
 8013f9a:	3310      	adds	r3, #16
 8013f9c:	e7f3      	b.n	8013f86 <enet_rxframe_drop+0x3e>
 8013f9e:	bf00      	nop
 8013fa0:	200109e0 	andcs	r0, r1, r0, ror #19
 8013fa4:	200109d8 	ldrdcs	r0, [r1], -r8
 8013fa8:	40029000 	andmi	r9, r2, r0

08013fac <enet_rxframe_size_get>:
 8013fac:	b508      	push	{r3, lr}
 8013fae:	4b0c      	ldr	r3, [pc, #48]	; (8013fe0 <enet_rxframe_size_get+0x34>)
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	6818      	ldr	r0, [r3, #0]
 8013fb4:	2800      	cmp	r0, #0
 8013fb6:	db10      	blt.n	8013fda <enet_rxframe_size_get+0x2e>
 8013fb8:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8013fbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013fc0:	d003      	beq.n	8013fca <enet_rxframe_size_get+0x1e>
 8013fc2:	f7ff ffc1 	bl	8013f48 <enet_rxframe_drop>
 8013fc6:	2001      	movs	r0, #1
 8013fc8:	bd08      	pop	{r3, pc}
 8013fca:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8013fce:	2b21      	cmp	r3, #33	; 0x21
 8013fd0:	d0f7      	beq.n	8013fc2 <enet_rxframe_size_get+0x16>
 8013fd2:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8013fd6:	3804      	subs	r0, #4
 8013fd8:	e7f6      	b.n	8013fc8 <enet_rxframe_size_get+0x1c>
 8013fda:	2000      	movs	r0, #0
 8013fdc:	e7f4      	b.n	8013fc8 <enet_rxframe_size_get+0x1c>
 8013fde:	bf00      	nop
 8013fe0:	200109e0 	andcs	r0, r1, r0, ror #19

08013fe4 <enet_initpara_reset>:
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	4b08      	ldr	r3, [pc, #32]	; (8014008 <enet_initpara_reset+0x24>)
 8013fe8:	e9c3 2200 	strd	r2, r2, [r3]
 8013fec:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8013ff0:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8013ff4:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8013ff8:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8013ffc:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8014000:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8014004:	639a      	str	r2, [r3, #56]	; 0x38
 8014006:	4770      	bx	lr
 8014008:	200109e8 	andcs	r0, r1, r8, ror #19

0801400c <enet_deinit>:
 801400c:	b508      	push	{r3, lr}
 801400e:	f640 200e 	movw	r0, #2574	; 0xa0e
 8014012:	f7fe fc06 	bl	8012822 <rcu_periph_reset_enable>
 8014016:	f640 200e 	movw	r0, #2574	; 0xa0e
 801401a:	f7fe fc04 	bl	8012826 <rcu_periph_reset_disable>
 801401e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014022:	f7ff bfdf 	b.w	8013fe4 <enet_initpara_reset>
	...

08014028 <i2c_clock_config>:
 8014028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801402a:	4605      	mov	r5, r0
 801402c:	2002      	movs	r0, #2
 801402e:	460c      	mov	r4, r1
 8014030:	4617      	mov	r7, r2
 8014032:	f7fe fcb1 	bl	8012998 <rcu_clock_freq_get>
 8014036:	4603      	mov	r3, r0
 8014038:	4828      	ldr	r0, [pc, #160]	; (80140dc <i2c_clock_config+0xb4>)
 801403a:	4a29      	ldr	r2, [pc, #164]	; (80140e0 <i2c_clock_config+0xb8>)
 801403c:	fbb3 f0f0 	udiv	r0, r3, r0
 8014040:	4293      	cmp	r3, r2
 8014042:	bf34      	ite	cc
 8014044:	4601      	movcc	r1, r0
 8014046:	2136      	movcs	r1, #54	; 0x36
 8014048:	686e      	ldr	r6, [r5, #4]
 801404a:	4a26      	ldr	r2, [pc, #152]	; (80140e4 <i2c_clock_config+0xbc>)
 801404c:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8014050:	430e      	orrs	r6, r1
 8014052:	4294      	cmp	r4, r2
 8014054:	606e      	str	r6, [r5, #4]
 8014056:	d816      	bhi.n	8014086 <i2c_clock_config+0x5e>
 8014058:	3001      	adds	r0, #1
 801405a:	2835      	cmp	r0, #53	; 0x35
 801405c:	d90d      	bls.n	801407a <i2c_clock_config+0x52>
 801405e:	2236      	movs	r2, #54	; 0x36
 8014060:	622a      	str	r2, [r5, #32]
 8014062:	0064      	lsls	r4, r4, #1
 8014064:	fbb3 f4f4 	udiv	r4, r3, r4
 8014068:	2c04      	cmp	r4, #4
 801406a:	bf38      	it	cc
 801406c:	2404      	movcc	r4, #4
 801406e:	69ea      	ldr	r2, [r5, #28]
 8014070:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8014074:	4314      	orrs	r4, r2
 8014076:	61ec      	str	r4, [r5, #28]
 8014078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801407a:	2802      	cmp	r0, #2
 801407c:	d801      	bhi.n	8014082 <i2c_clock_config+0x5a>
 801407e:	2202      	movs	r2, #2
 8014080:	e7ee      	b.n	8014060 <i2c_clock_config+0x38>
 8014082:	6228      	str	r0, [r5, #32]
 8014084:	e7ed      	b.n	8014062 <i2c_clock_config+0x3a>
 8014086:	4a18      	ldr	r2, [pc, #96]	; (80140e8 <i2c_clock_config+0xc0>)
 8014088:	4294      	cmp	r4, r2
 801408a:	d8f5      	bhi.n	8014078 <i2c_clock_config+0x50>
 801408c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014090:	4351      	muls	r1, r2
 8014092:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014096:	fbb1 f1f2 	udiv	r1, r1, r2
 801409a:	3101      	adds	r1, #1
 801409c:	6229      	str	r1, [r5, #32]
 801409e:	b9a7      	cbnz	r7, 80140ca <i2c_clock_config+0xa2>
 80140a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80140a4:	fbb3 f4f4 	udiv	r4, r3, r4
 80140a8:	69eb      	ldr	r3, [r5, #28]
 80140aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80140ae:	61eb      	str	r3, [r5, #28]
 80140b0:	f3c4 030b 	ubfx	r3, r4, #0, #12
 80140b4:	b90b      	cbnz	r3, 80140ba <i2c_clock_config+0x92>
 80140b6:	f044 0401 	orr.w	r4, r4, #1
 80140ba:	69eb      	ldr	r3, [r5, #28]
 80140bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80140c0:	61eb      	str	r3, [r5, #28]
 80140c2:	69eb      	ldr	r3, [r5, #28]
 80140c4:	4323      	orrs	r3, r4
 80140c6:	61eb      	str	r3, [r5, #28]
 80140c8:	e7d6      	b.n	8014078 <i2c_clock_config+0x50>
 80140ca:	2219      	movs	r2, #25
 80140cc:	4354      	muls	r4, r2
 80140ce:	fbb3 f4f4 	udiv	r4, r3, r4
 80140d2:	69eb      	ldr	r3, [r5, #28]
 80140d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80140d8:	e7e9      	b.n	80140ae <i2c_clock_config+0x86>
 80140da:	bf00      	nop
 80140dc:	000f4240 	andeq	r4, pc, r0, asr #4
 80140e0:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 80140e4:	000186a0 	andeq	r8, r1, r0, lsr #13
 80140e8:	00061a80 	andeq	r1, r6, r0, lsl #21

080140ec <i2c_ack_config>:
 80140ec:	6803      	ldr	r3, [r0, #0]
 80140ee:	2901      	cmp	r1, #1
 80140f0:	bf0c      	ite	eq
 80140f2:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 80140f6:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80140fa:	6003      	str	r3, [r0, #0]
 80140fc:	4770      	bx	lr

080140fe <i2c_ackpos_config>:
 80140fe:	6803      	ldr	r3, [r0, #0]
 8014100:	b919      	cbnz	r1, 801410a <i2c_ackpos_config+0xc>
 8014102:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014106:	6003      	str	r3, [r0, #0]
 8014108:	4770      	bx	lr
 801410a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801410e:	e7fa      	b.n	8014106 <i2c_ackpos_config+0x8>

08014110 <i2c_master_addressing>:
 8014110:	3202      	adds	r2, #2
 8014112:	bf0c      	ite	eq
 8014114:	f021 0101 	biceq.w	r1, r1, #1
 8014118:	f041 0101 	orrne.w	r1, r1, #1
 801411c:	6101      	str	r1, [r0, #16]
 801411e:	4770      	bx	lr

08014120 <i2c_enable>:
 8014120:	6803      	ldr	r3, [r0, #0]
 8014122:	f043 0301 	orr.w	r3, r3, #1
 8014126:	6003      	str	r3, [r0, #0]
 8014128:	4770      	bx	lr

0801412a <i2c_start_on_bus>:
 801412a:	6803      	ldr	r3, [r0, #0]
 801412c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014130:	6003      	str	r3, [r0, #0]
 8014132:	4770      	bx	lr

08014134 <i2c_stop_on_bus>:
 8014134:	6803      	ldr	r3, [r0, #0]
 8014136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801413a:	6003      	str	r3, [r0, #0]
 801413c:	4770      	bx	lr

0801413e <i2c_data_transmit>:
 801413e:	6101      	str	r1, [r0, #16]
 8014140:	4770      	bx	lr

08014142 <i2c_data_receive>:
 8014142:	6900      	ldr	r0, [r0, #16]
 8014144:	b2c0      	uxtb	r0, r0
 8014146:	4770      	bx	lr

08014148 <i2c_flag_get>:
 8014148:	098b      	lsrs	r3, r1, #6
 801414a:	581a      	ldr	r2, [r3, r0]
 801414c:	2301      	movs	r3, #1
 801414e:	f001 011f 	and.w	r1, r1, #31
 8014152:	408b      	lsls	r3, r1
 8014154:	4213      	tst	r3, r2
 8014156:	bf14      	ite	ne
 8014158:	2001      	movne	r0, #1
 801415a:	2000      	moveq	r0, #0
 801415c:	4770      	bx	lr

0801415e <i2c_flag_clear>:
 801415e:	f240 5301 	movw	r3, #1281	; 0x501
 8014162:	4299      	cmp	r1, r3
 8014164:	b510      	push	{r4, lr}
 8014166:	d102      	bne.n	801416e <i2c_flag_clear+0x10>
 8014168:	6943      	ldr	r3, [r0, #20]
 801416a:	6983      	ldr	r3, [r0, #24]
 801416c:	bd10      	pop	{r4, pc}
 801416e:	2201      	movs	r2, #1
 8014170:	098c      	lsrs	r4, r1, #6
 8014172:	5823      	ldr	r3, [r4, r0]
 8014174:	f001 011f 	and.w	r1, r1, #31
 8014178:	408a      	lsls	r2, r1
 801417a:	ea23 0302 	bic.w	r3, r3, r2
 801417e:	5023      	str	r3, [r4, r0]
 8014180:	e7f4      	b.n	801416c <i2c_flag_clear+0xe>

08014182 <i2s_init>:
 8014182:	b510      	push	{r4, lr}
 8014184:	69c4      	ldr	r4, [r0, #28]
 8014186:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 801418a:	f024 0408 	bic.w	r4, r4, #8
 801418e:	0424      	lsls	r4, r4, #16
 8014190:	0c24      	lsrs	r4, r4, #16
 8014192:	431c      	orrs	r4, r3
 8014194:	4314      	orrs	r4, r2
 8014196:	430c      	orrs	r4, r1
 8014198:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 801419c:	61c4      	str	r4, [r0, #28]
 801419e:	bd10      	pop	{r4, pc}

080141a0 <i2s_psc_config>:
 80141a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141a4:	4698      	mov	r8, r3
 80141a6:	2302      	movs	r3, #2
 80141a8:	6203      	str	r3, [r0, #32]
 80141aa:	4b26      	ldr	r3, [pc, #152]	; (8014244 <i2s_psc_config+0xa4>)
 80141ac:	4617      	mov	r7, r2
 80141ae:	4298      	cmp	r0, r3
 80141b0:	bf0c      	ite	eq
 80141b2:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 80141b6:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 80141ba:	4a23      	ldr	r2, [pc, #140]	; (8014248 <i2s_psc_config+0xa8>)
 80141bc:	4605      	mov	r5, r0
 80141be:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80141c0:	460e      	mov	r6, r1
 80141c2:	4018      	ands	r0, r3
 80141c4:	d036      	beq.n	8014234 <i2s_psc_config+0x94>
 80141c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80141c8:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80141cc:	1f99      	subs	r1, r3, #6
 80141ce:	2908      	cmp	r1, #8
 80141d0:	d82c      	bhi.n	801422c <i2s_psc_config+0x8c>
 80141d2:	3302      	adds	r3, #2
 80141d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80141d6:	481d      	ldr	r0, [pc, #116]	; (801424c <i2s_psc_config+0xac>)
 80141d8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80141dc:	3201      	adds	r2, #1
 80141de:	fbb0 f0f2 	udiv	r0, r0, r2
 80141e2:	4358      	muls	r0, r3
 80141e4:	0040      	lsls	r0, r0, #1
 80141e6:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 80141ea:	f04f 030a 	mov.w	r3, #10
 80141ee:	d124      	bne.n	801423a <i2s_psc_config+0x9a>
 80141f0:	0a04      	lsrs	r4, r0, #8
 80141f2:	435c      	muls	r4, r3
 80141f4:	fbb4 f6f6 	udiv	r6, r4, r6
 80141f8:	230a      	movs	r3, #10
 80141fa:	3605      	adds	r6, #5
 80141fc:	fbb6 f6f3 	udiv	r6, r6, r3
 8014200:	f006 0301 	and.w	r3, r6, #1
 8014204:	0876      	lsrs	r6, r6, #1
 8014206:	1eb2      	subs	r2, r6, #2
 8014208:	2afd      	cmp	r2, #253	; 0xfd
 801420a:	bf86      	itte	hi
 801420c:	2300      	movhi	r3, #0
 801420e:	2602      	movhi	r6, #2
 8014210:	021b      	lslls	r3, r3, #8
 8014212:	431e      	orrs	r6, r3
 8014214:	ea46 0608 	orr.w	r6, r6, r8
 8014218:	622e      	str	r6, [r5, #32]
 801421a:	69eb      	ldr	r3, [r5, #28]
 801421c:	f023 0307 	bic.w	r3, r3, #7
 8014220:	61eb      	str	r3, [r5, #28]
 8014222:	69eb      	ldr	r3, [r5, #28]
 8014224:	433b      	orrs	r3, r7
 8014226:	61eb      	str	r3, [r5, #28]
 8014228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801422c:	2b0f      	cmp	r3, #15
 801422e:	bf08      	it	eq
 8014230:	2314      	moveq	r3, #20
 8014232:	e7cf      	b.n	80141d4 <i2s_psc_config+0x34>
 8014234:	f7fe fbb0 	bl	8012998 <rcu_clock_freq_get>
 8014238:	e7d5      	b.n	80141e6 <i2s_psc_config+0x46>
 801423a:	b90f      	cbnz	r7, 8014240 <i2s_psc_config+0xa0>
 801423c:	0944      	lsrs	r4, r0, #5
 801423e:	e7d8      	b.n	80141f2 <i2s_psc_config+0x52>
 8014240:	0984      	lsrs	r4, r0, #6
 8014242:	e7d6      	b.n	80141f2 <i2s_psc_config+0x52>
 8014244:	40003800 	andmi	r3, r0, r0, lsl #16
 8014248:	40021000 	andmi	r1, r2, r0
 801424c:	017d7840 	cmneq	sp, r0, asr #16

08014250 <i2s_enable>:
 8014250:	69c3      	ldr	r3, [r0, #28]
 8014252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014256:	61c3      	str	r3, [r0, #28]
 8014258:	4770      	bx	lr

0801425a <i2s_disable>:
 801425a:	69c3      	ldr	r3, [r0, #28]
 801425c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014260:	61c3      	str	r3, [r0, #28]
 8014262:	4770      	bx	lr

08014264 <spi_dma_enable>:
 8014264:	6843      	ldr	r3, [r0, #4]
 8014266:	b919      	cbnz	r1, 8014270 <spi_dma_enable+0xc>
 8014268:	f043 0302 	orr.w	r3, r3, #2
 801426c:	6043      	str	r3, [r0, #4]
 801426e:	4770      	bx	lr
 8014270:	f043 0301 	orr.w	r3, r3, #1
 8014274:	e7fa      	b.n	801426c <spi_dma_enable+0x8>
	...

08014278 <__popcountsi2>:
 8014278:	0843      	lsrs	r3, r0, #1
 801427a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 801427e:	1ac0      	subs	r0, r0, r3
 8014280:	0883      	lsrs	r3, r0, #2
 8014282:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8014286:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 801428a:	4418      	add	r0, r3
 801428c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8014290:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8014294:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8014298:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 801429c:	0e00      	lsrs	r0, r0, #24
 801429e:	4770      	bx	lr

Disassembly of section .rodata:

080142a0 <vtable for DisplayHandler-0xd0>:
 80142a0:	00000003 	andeq	r0, r0, r3
 80142a4:	000000aa 	andeq	r0, r0, sl, lsr #1
 80142a8:	00000006 	andeq	r0, r0, r6
 80142ac:	00000000 	andeq	r0, r0, r0
 80142b0:	01ff0000 	mvnseq	r0, r0
 80142b4:	00000001 	andeq	r0, r0, r1
 80142b8:	00000001 	andeq	r0, r0, r1
 80142bc:	00000001 	andeq	r0, r0, r1
	...
 80142c8:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
 80142cc:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
 80142d0:	00000000 	andeq	r0, r0, r0
 80142d4:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
 80142d8:	353a3731 	ldrcc	r3, [sl, #-1841]!	; 0xfffff8cf
 80142dc:	34303a32 	ldrtcc	r3, [r0], #-2610	; 0xfffff5ce
 80142e0:	72614d00 	rsbvc	r4, r1, #0, 26
 80142e4:	20393120 	eorscs	r3, r9, r0, lsr #2
 80142e8:	32323032 	eorscc	r3, r2, #50	; 0x32
 80142ec:	43417300 	movtmi	r7, #4864	; 0x1300
 80142f0:	3145204e 	cmpcc	r5, lr, asr #32
 80142f4:	2031332e 	eorscs	r3, r1, lr, lsr #6
 80142f8:	32335b1b 	eorscc	r5, r3, #27648	; 0x6c00
 80142fc:	7869506d 	stmdavc	r9!, {r0, r2, r3, r5, r6, ip, lr}^
 8014300:	63206c65 			; <UNDEFINED> instruction: 0x63206c65
 8014304:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 8014308:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 801430c:	317b2072 	cmncc	fp, r2, ror r0
 8014310:	20342078 	eorscs	r2, r4, r8, ror r0
 8014314:	76696e55 			; <UNDEFINED> instruction: 0x76696e55
 8014318:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801431c:	5b1b7d73 	blpl	86f38f0 <__exidx_end+0x6dd4bc>
 8014320:	006d3733 	rsbeq	r3, sp, r3, lsr r7
 8014324:	6f635f2e 	svcvs	0x00635f2e
 8014328:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801432c:	685f2e00 	ldmdavs	pc, {r9, sl, fp, sp}^	; <UNPREDICTABLE>
 8014330:	00707474 	rsbseq	r7, r0, r4, ror r4
 8014334:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8014338:	4341733d 	movtmi	r7, #4925	; 0x133d
 801433c:	3145204e 	cmpcc	r5, lr, asr #32
 8014340:	2031332e 	eorscs	r3, r1, lr, lsr #6
 8014344:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8014348:	4173006c 	cmnmi	r3, ip, rrx
 801434c:	50204e43 	eorpl	r4, r0, r3, asr #28
 8014350:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8014354:	34783120 	ldrbtcc	r3, [r8], #-288	; 0xfffffee0
 8014358:	73250055 			; <UNDEFINED> instruction: 0x73250055
 801435c:	2064253a 	rsbcs	r2, r4, sl, lsr r5
 8014360:	20642547 	rsbcs	r2, r4, r7, asr #10
 8014364:	25007325 	strcs	r7, [r0, #-805]	; 0xfffffcdb
 8014368:	75253a73 	strvc	r3, [r5, #-2675]!	; 0xfffff58d
 801436c:	00000000 	andeq	r0, r0, r0

08014370 <vtable for DisplayHandler>:
	...
 8014378:	08008573 	stmdaeq	r0, {r0, r1, r4, r5, r6, r8, sl, pc}
 801437c:	080085c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, pc}
 8014380:	080085f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl, pc}

08014384 <vtable for PixelDmxStartStop>:
	...
 801438c:	08008575 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, sl, pc}
 8014390:	080085d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, pc}
 8014394:	08008579 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, pc}
 8014398:	08008589 	stmdaeq	r0, {r0, r3, r7, r8, sl, pc}

0801439c <vtable for Reboot>:
	...
 80143a4:	08008599 	stmdaeq	r0, {r0, r3, r4, r7, r8, sl, pc}
 80143a8:	080085bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, sl, pc}
 80143ac:	0800859d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sl, pc}

080143b0 <CSWTCH.65>:
 80143b0:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 80143b4:	 	eorcc	r3, lr, #-2147483631	; 0x80000011

080143b5 <SOFTWARE_VERSION>:
 80143b5:	00322e31 	eorseq	r2, r2, r1, lsr lr
 80143b9:	2e393332 	mrccs	3, 1, r3, cr9, cr2, {1}
 80143bd:	2e353532 	mrccs	5, 1, r3, cr5, cr2, {1}
 80143c1:	00302e30 	eorseq	r2, r0, r0, lsr lr
 80143c5:	38342e25 	ldmdacc	r4!, {r0, r2, r5, r9, sl, fp, sp}
 80143c9:	73252073 			; <UNDEFINED> instruction: 0x73252073
 80143cd:	33444700 	movtcc	r4, #18176	; 0x4700
 80143d1:	30314632 	eorscc	r4, r1, r2, lsr r6
 80143d5:	30005237 	andcc	r5, r0, r7, lsr r2
 80143d9:	6f4e202e 	svcvs	0x004e202e
 80143dd:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 80143e1:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 80143e5:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 80143e9:	202c6465 	eorcs	r6, ip, r5, ror #8
 80143ed:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 80143f1:	6f687320 	svcvs	0x00687320
 80143f5:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 80143f9:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 80143fd:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8014401:	000a216e 	andeq	r2, sl, lr, ror #2
 8014405:	00505448 	subseq	r5, r0, r8, asr #8
 8014409:	0050544c 	subseq	r5, r0, ip, asr #8
 801440d:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8014411:	000a6567 	andeq	r6, sl, r7, ror #10
 8014415:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8014419:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 801441d:	203a2065 	eorscs	r2, sl, r5, rrx
 8014421:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8014425:	20000a64 	andcs	r0, r0, r4, ror #20
 8014429:	20444943 	subcs	r4, r4, r3, asr #18
 801442d:	20202020 	eorcs	r2, r0, r0, lsr #32
 8014431:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8014435:	20000a73 	andcs	r0, r0, r3, ror sl
 8014439:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 801443d:	000a7475 	andeq	r7, sl, r5, ror r4
 8014441:	6f502020 	svcvs	0x00502020
 8014445:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
 8014449:	55206432 	strpl	r6, [r0, #-1074]!	; 0xfffffbce
 801444d:	6576696e 	ldrbvs	r6, [r6, #-2414]!	; 0xfffff692
 8014451:	20657372 	rsbcs	r7, r5, r2, ror r3
 8014455:	64332d25 	ldrtvs	r2, [r3], #-3365	; 0xfffff2db
 8014459:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 801445d:	20000a5d 	andcs	r0, r0, sp, asr sl
 8014461:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
 8014465:	20000a74 	andcs	r0, r0, r4, ror sl
 8014469:	726f5020 	rsbvc	r5, pc, #32
 801446d:	32252074 	eorcc	r2, r5, #116	; 0x74
 8014471:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 8014475:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8014479:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 801447d:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8014481:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 8014485:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 8014489:	68636e79 	stmdavs	r3!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
 801448d:	696e6f72 	stmdbvs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8014491:	6920657a 	stmdbvs	r0!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
 8014495:	69642073 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sp}^
 8014499:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
 801449d:	000a6465 	andeq	r6, sl, r5, ror #8

080144a1 <E131MsgConst::START>:
 80144a1:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 80144a5:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80144a9:	43417320 	movtmi	r7, #4896	; 0x1320
 80144ad:	3145204e 	cmpcc	r5, lr, asr #32
 80144b1:	0031332e 	eorseq	r3, r1, lr, lsr #6

080144b5 <E131MsgConst::PARAMS>:
 80144b5:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80144b9:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80144bd:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80144c1:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 80144c5:	2e314520 	cfabs64cs	mvdx4, mvdx1
 80144c9:	 	movwvc	r3, #307	; 0x133

080144cc <E131MsgConst::STARTED>:
 80144cc:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 80144d0:	2e314520 	cfabs64cs	mvdx4, mvdx1
 80144d4:	73203133 			; <UNDEFINED> instruction: 0x73203133
 80144d8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 80144dc:	22006465 	andcs	r6, r0, #1694498816	; 0x65000000
 80144e0:	3a227325 	bcc	88b117c <__exidx_end+0x89ad48>
 80144e4:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 80144e8:	2523002c 	strcs	r0, [r3, #-44]!	; 0xffffffd4
 80144ec:	73253d73 			; <UNDEFINED> instruction: 0x73253d73
 80144f0:	2522000a 	strcs	r0, [r2, #-10]!
 80144f4:	253a2273 	ldrcs	r2, [sl, #-627]!	; 0xfffffd8d
 80144f8:	23002c64 	movwcs	r2, #3172	; 0xc64
 80144fc:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8014500:	69000a64 	stmdbvs	r0, {r2, r5, r6, r9, fp}
 8014504:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 8014508:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 801450c:	00747570 	rsbseq	r7, r4, r0, ror r5
 8014510:	0070746c 	rsbseq	r7, r0, ip, ror #8
 8014514:	00707468 	rsbseq	r7, r0, r8, ror #8
 8014518:	20584d44 	subscs	r4, r8, r4, asr #26
 801451c:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 8014520:	44007475 	strmi	r7, [r0], #-1141	; 0xfffffb8b
 8014524:	4920584d 	stmdbmi	r0!, {r0, r2, r3, r6, fp, ip, lr}
 8014528:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 801452c:	68744f00 	ldmdavs	r4!, {r8, r9, sl, fp, lr}^
 8014530:	 	strvs	r7, [r0], #-613	; 0xfffffd9b

08014533 <E131ParamsConst::DISABLE_MERGE_TIMEOUT>:
 8014533:	61736964 	cmnvs	r3, r4, ror #18
 8014537:	5f656c62 	svcpl	0x00656c62
 801453b:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801453f:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 8014543:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8013fde <enet_rxframe_size_get+0x32>
 8014547:	 	stmdbvs	r4!, {r2, r4, r5, r6}^

08014549 <E131ParamsConst::DISABLE_NETWORK_DATA_LOSS_TIMEOUT>:
 8014549:	61736964 	cmnvs	r3, r4, ror #18
 801454d:	5f656c62 	svcpl	0x00656c62
 8014551:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8014555:	5f6b726f 	svcpl	0x006b726f
 8014559:	61746164 	cmnvs	r4, r4, ror #2
 801455d:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
 8014561:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8014565:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8014000 <enet_initpara_reset+0x1c>
 8014569:	 	rsbsvc	r0, r0, #116	; 0x74

0801456b <E131ParamsConst::PRIORITY>:
 801456b:	6f697270 	svcvs	0x00697270
 801456f:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8014573:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8014577:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801457b:	72700000 	rsbsvc	r0, r0, #0
 801457f:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8014583:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 8014587:	5f74726f 	svcpl	0x0074726f
 801458b:	00000062 	andeq	r0, r0, r2, rrx
 801458f:	6f697270 	svcvs	0x00697270
 8014593:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8014597:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801459b:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801459f:	72700000 	rsbsvc	r0, r0, #0
 80145a3:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 80145a7:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 80145ab:	5f74726f 	svcpl	0x0074726f
 80145af:	00000064 	andeq	r0, r0, r4, rrx

080145b3 <E131ParamsConst::FILE_NAME>:
 80145b3:	31333165 	teqcc	r3, r5, ror #2
 80145b7:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

080145bc <E117Const::ACN_PACKET_IDENTIFIER>:
 80145bc:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 80145c0:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 80145c4:	00000037 	andeq	r0, r0, r7, lsr r0

080145c8 <E131BridgeConst::VERSION>:
 80145c8:	30251801 	eorcc	r1, r5, r1, lsl #16
 80145cc:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 80145d0:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 80145d4:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 80145d8:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 80145dc:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 80145e0:	30252d78 	eorcc	r2, r5, r8, ror sp
 80145e4:	30257832 	eorcc	r7, r5, r2, lsr r8
 80145e8:	30257832 	eorcc	r7, r5, r2, lsr r8
 80145ec:	30257832 	eorcc	r7, r5, r2, lsr r8
 80145f0:	30257832 	eorcc	r7, r5, r2, lsr r8
 80145f4:	30257832 	eorcc	r7, r5, r2, lsr r8
 80145f8:	00007832 	andeq	r7, r0, r2, lsr r8

080145fc <vtable for WS28xxDmx>:
	...
 8014604:	0800ac15 	stmdaeq	r0, {r0, r2, r4, sl, fp, sp, pc}
 8014608:	0800ac35 	stmdaeq	r0, {r0, r2, r4, r5, sl, fp, sp, pc}
 801460c:	0800ac6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, fp, sp, pc}
 8014610:	0800acb7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, sl, fp, sp, pc}
 8014614:	0800ad1f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, sl, fp, sp, pc}
 8014618:	0800ac47 	stmdaeq	r0, {r0, r1, r2, r6, sl, fp, sp, pc}
 801461c:	0800b5dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, ip, sp, pc}
 8014620:	0800ac85 	stmdaeq	r0, {r0, r2, r7, sl, fp, sp, pc}
 8014624:	0800ac0d 	stmdaeq	r0, {r0, r2, r3, sl, fp, sp, pc}
 8014628:	0800ac11 	stmdaeq	r0, {r0, r4, sl, fp, sp, pc}
 801462c:	0800acdf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sl, fp, sp, pc}
 8014630:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8014634:	2a2e253a 	bcs	8b9db24 <__exidx_end+0xb876f0>
 8014638:	23002c66 	movwcs	r2, #3174	; 0xc66
 801463c:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8014640:	0a662a2e 	beq	999ef00 <__exidx_end+0x1988acc>
 8014644:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8014648:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 801464c:	64206574 	strtvs	r6, [r0], #-1396	; 0xfffffa8c
 8014650:	73617461 	cmnvc	r1, #1627389952	; 0x61000000
 8014654:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8014658:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 801465c:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 8014660:	74206574 	strtvc	r6, [r0], #-1396	; 0xfffffa8c
 8014664:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
 8014668:	75282067 	strvc	r2, [r8, #-103]!	; 0xffffff99
 801466c:	47002973 	smlsdxmi	r0, r3, r9, r2
 8014670:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 8014674:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8014678:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 801467c:	6162206b 	cmnvs	r2, fp, rrx
 8014680:	20646573 	rsbcs	r6, r4, r3, ror r5
 8014684:	70696863 	rsbvc	r6, r9, r3, ror #16
 8014688:	50410073 	subpl	r0, r1, r3, ror r0
 801468c:	32303141 	eorscc	r3, r0, #1073741840	; 0x40000010
 8014690:	394b532f 	stmdbcc	fp, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 8014694:	00323238 	eorseq	r3, r2, r8, lsr r2
 8014698:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
 801469c:	74617020 	strbtvc	r7, [r1], #-32	; 0xffffffe0
 80146a0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 80146a4:	78695000 	stmdavc	r9!, {ip, lr}^
 80146a8:	44206c65 	strtmi	r6, [r0], #-3173	; 0xfffff39b
 80146ac:	7020584d 	eorvc	r5, r0, sp, asr #16
 80146b0:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 80146b4:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 80146b8:	20000a73 	andcs	r0, r0, r3, ror sl
 80146bc:	756f7247 	strbvc	r7, [pc, #-583]!	; 801447d <SOFTWARE_VERSION+0xc8>
 80146c0:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 80146c4:	756f6320 	strbvc	r6, [pc, #-800]!	; 80143ac <vtable for Reboot+0x10>
 80146c8:	3a20746e 	bcc	8831888 <__exidx_end+0x81b454>
 80146cc:	20642520 	rsbcs	r2, r4, r0, lsr #10
 80146d0:	6f72475b 	svcvs	0x0072475b
 80146d4:	20737075 	rsbscs	r7, r3, r5, ror r0
 80146d8:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80146dc:	 	andeq	r0, r0, sp, asr sl

080146df <CSWTCH.6>:
 80146df:	02020200 	andeq	r0, r2, #0, 4
 80146e3:	04020202 	streq	r0, [r2], #-514	; 0xfffffdfe
 80146e7:	6e550500 	cdpvs	5, 5, cr0, cr5, cr0, {0}
 80146eb:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 80146ef:	 	svcvs	0x004e006e

080146f1 <s_patternName>:
 80146f1:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 80146fd:	61520000 	cmpvs	r2, r0
 8014701:	6f626e69 	svcvs	0x00626e69
 8014705:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 8014709:	00656c63 	rsbeq	r6, r5, r3, ror #24
 801470d:	61656854 	cmnvs	r5, r4, asr r8
 8014711:	20726574 	rsbscs	r6, r2, r4, ror r5
 8014715:	73616863 	cmnvc	r1, #6488064	; 0x630000
 8014719:	6f430065 	svcvs	0x00430065
 801471d:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 8014721:	70697720 	rsbvc	r7, r9, r0, lsr #14
 8014725:	00000065 	andeq	r0, r0, r5, rrx
 8014729:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 801472d:	0072656e 	rsbseq	r6, r2, lr, ror #10
 8014731:	00000000 	andeq	r0, r0, r0
 8014735:	61460000 	mrsvs	r0, (UNDEF: 70)
 8014739:	00006564 	andeq	r6, r0, r4, ror #10
	...
 8014745:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 8014749:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 801474d:	 	ldrbmi	r0, [r2, -r4, rrx]

0801474f <PixelType::MAPS>:
 801474f:	00424752 	subeq	r4, r2, r2, asr r7
 8014753:	00474252 	subeq	r4, r7, r2, asr r2
 8014757:	00425247 	subeq	r5, r2, r7, asr #4
 801475b:	00524247 	subseq	r4, r2, r7, asr #4
 801475f:	00475242 	subeq	r5, r7, r2, asr #4
 8014763:	00524742 	subseq	r4, r2, r2, asr #14

08014767 <PixelType::TYPES>:
 8014767:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801476b:	00003130 	andeq	r3, r0, r0, lsr r1
 801476f:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8014773:	00003131 	andeq	r3, r0, r1, lsr r1
 8014777:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801477b:	00003231 	andeq	r3, r0, r1, lsr r2
 801477f:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8014783:	00423231 	subeq	r3, r2, r1, lsr r2
 8014787:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 801478b:	00003331 	andeq	r3, r0, r1, lsr r3
 801478f:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8014793:	00003531 	andeq	r3, r0, r1, lsr r5
 8014797:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 801479b:	00003231 	andeq	r3, r0, r1, lsr r2
 801479f:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80147a3:	00573231 	subseq	r3, r7, r1, lsr r2
 80147a7:	31534355 	cmpcc	r3, r5, asr r3
 80147ab:	00333039 	eorseq	r3, r3, r9, lsr r0
 80147af:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 80147b3:	00333039 	eorseq	r3, r3, r9, lsr r0
 80147b7:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 80147bb:	00003231 	andeq	r3, r0, r1, lsr r2
 80147bf:	31415041 	cmpcc	r1, r1, asr #32
 80147c3:	00003230 	andeq	r3, r0, r0, lsr r2
 80147c7:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80147cb:	00003232 	andeq	r3, r0, r2, lsr r2
 80147cf:	31383950 	teqcc	r8, r0, asr r9
 80147d3:	00000033 	andeq	r0, r0, r3, lsr r0
 80147d7:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80147db:	6170206c 	cmnvs	r0, ip, rrx
 80147df:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 80147e3:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 80147e7:	5420000a 	strtpl	r0, [r0], #-10
 80147eb:	20657079 	rsbcs	r7, r5, r9, ror r0
 80147ef:	3a202020 	bcc	881c877 <__exidx_end+0x806443>
 80147f3:	20732520 	rsbscs	r2, r3, r0, lsr #10
 80147f7:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 80147fb:	4320000a 			; <UNDEFINED> instruction: 0x4320000a
 80147ff:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 8014803:	3a202020 	bcc	881c88b <__exidx_end+0x806457>
 8014807:	0a642520 	beq	991dc8f <__exidx_end+0x190785b>
 801480b:	614d2000 	mrsvs	r2, (UNDEF: 77)
 801480f:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
 8014813:	203a2067 	eorscs	r2, sl, r7, rrx
 8014817:	5b207325 	blpl	88314b3 <__exidx_end+0x81b07f>
 801481b:	0a5d6425 	beq	976d8b7 <__exidx_end+0x1757483>
 801481f:	30542000 	subscc	r2, r4, r0
 8014823:	20202048 	eorcs	r2, r0, r8, asr #32
 8014827:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801482b:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 801482f:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 8014833:	0a5d5825 	beq	976a8cf <__exidx_end+0x175449b>
 8014837:	31542000 	cmpcc	r4, r0
 801483b:	20202048 	eorcs	r2, r0, r8, asr #32
 801483f:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8014843:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 8014847:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 801484b:	0a5d5825 	beq	976a8e7 <__exidx_end+0x17544b3>
 801484f:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 8014853:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8014857:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801485b:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 801485f:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8014863:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 8014867:	6425000a 	strtvs	r0, [r5], #-10
 801486b:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801486f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8014873:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 8014877:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 801487b:	000a6425 	andeq	r6, sl, r5, lsr #8
 801487f:	4f006e4f 	svcmi	0x00006e4f
 8014883:	64006666 	strvs	r6, [r0], #-1638	; 0xfffff99a
 8014887:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 801488b:	253a7961 	ldrcs	r7, [sl, #-2401]!	; 0xfffff69f
 801488f:	74000a73 	strvc	r0, [r0], #-2675	; 0xfffff58d
 8014893:	3a707466 	bcc	9c31a33 <__exidx_end+0x1c1b5ff>
 8014897:	000a7325 	andeq	r7, sl, r5, lsr #6
 801489b:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801489f:	3a6e6f69 	bcc	9bb064b <__exidx_end+0x1b9a217>
 80148a3:	75007325 	strvc	r7, [r0, #-805]	; 0xfffffcdb
 80148a7:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 80148ab:	25203a65 	strcs	r3, [r0, #-2661]!	; 0xfffff59b
 80148af:	000a7375 	andeq	r7, sl, r5, ror r3
 80148b3:	4f525245 	svcmi	0x00525245
 80148b7:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 80148bb:	000a7465 	andeq	r7, sl, r5, ror #8
 80148bf:	70746674 	rsbsvc	r6, r4, r4, ror r6
 80148c3:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 80148c7:	616c7073 	smcvs	50947	; 0xc703
 80148cb:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 80148cf:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 80148d3:	000a2123 	andeq	r2, sl, r3, lsr #2
 80148d7:	4f525245 	svcmi	0x00525245
 80148db:	0a3f2352 	beq	8fdd62b <__exidx_end+0xfc71f7>
 80148df:	62657200 	rsbvs	r7, r5, #0, 4
 80148e3:	23746f6f 	cmncs	r4, #444	; 0x1bc
 80148e7:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 80148eb:	00237473 	eoreq	r7, r3, r3, ror r4
 80148ef:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80148f3:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 80148f7:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 80148fb:	76002365 	strvc	r2, [r0], -r5, ror #6
 80148ff:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8014903:	00236e6f 	eoreq	r6, r3, pc, ror #28
 8014907:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 801490b:	63616600 	cmnvs	r1, #0, 12
 801490f:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8014913:	 	tstmi	r0, r3, lsr #6

08014916 <s_Node>:
 8014916:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801491a:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8014926:	41730000 	cmnmi	r3, r0
 801492a:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 801492e:	31332e31 	teqcc	r3, r1, lsr lr
	...
 801493a:	2043534f 	subcs	r5, r3, pc, asr #6
 801493e:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8014942:	00007265 	andeq	r7, r0, r5, ror #4
 8014946:	00000000 	andeq	r0, r0, r0
 801494a:	544c0000 	strbpl	r0, [ip], #-0
 801494e:	00000043 	andeq	r0, r0, r3, asr #32
	...
 801495e:	2043534f 	subcs	r5, r3, pc, asr #6
 8014962:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 8014966:	0000746e 	andeq	r7, r0, lr, ror #8
 801496a:	00000000 	andeq	r0, r0, r0
 801496e:	44520000 	ldrbmi	r0, [r2], #-0
 8014972:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 8014976:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 801497a:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 801497e:	0000796c 	andeq	r7, r0, ip, ror #18
 8014982:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 8014986:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8014992:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 8014996:	00004944 	andeq	r4, r0, r4, asr #18
	...
 80149a6:	00504444 	subseq	r4, r0, r4, asr #8
	...

080149b8 <s_Output>:
 80149b8:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 80149c4:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 80149d0:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 80149d4:	00726f74 	rsbseq	r6, r2, r4, ror pc
 80149d8:	00000000 	andeq	r0, r0, r0
 80149dc:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80149e0:	0000006c 	andeq	r0, r0, ip, rrx
 80149e4:	00000000 	andeq	r0, r0, r0
 80149e8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 80149ec:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 80149f0:	00000000 	andeq	r0, r0, r0
 80149f4:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 8014a00:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8014a04:	00006769 	andeq	r6, r0, r9, ror #14
 8014a08:	00000000 	andeq	r0, r0, r0
 8014a0c:	70657453 	rsbvc	r7, r5, r3, asr r4
 8014a10:	00726570 	rsbseq	r6, r2, r0, ror r5
 8014a14:	00000000 	andeq	r0, r0, r0
 8014a18:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 8014a1c:	00007265 	andeq	r7, r0, r5, ror #4
 8014a20:	00000000 	andeq	r0, r0, r0
 8014a24:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8014a28:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8014a2c:	00000000 	andeq	r0, r0, r0
 8014a30:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 8014a34:	00006c61 	andeq	r6, r0, r1, ror #24
 8014a38:	00000000 	andeq	r0, r0, r0
 8014a3c:	20424752 	subcs	r4, r2, r2, asr r7
 8014a40:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 8014a44:	0000006c 	andeq	r0, r0, ip, rrx

08014a48 <RemoteConfig::s_GET>:
 8014a48:	0800d785 	stmdaeq	r0, {r0, r2, r7, r8, r9, sl, ip, lr, pc}
 8014a4c:	00000000 	andeq	r0, r0, r0
 8014a50:	080148e0 	stmdaeq	r1, {r5, r6, r7, fp, lr}
 8014a54:	00000008 	andeq	r0, r0, r8
 8014a58:	0800cc51 	stmdaeq	r0, {r0, r4, r6, sl, fp, lr, pc}
 8014a5c:	00000000 	andeq	r0, r0, r0
 8014a60:	080148e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, fp, lr}
 8014a64:	00000005 	andeq	r0, r0, r5
 8014a68:	0800cc51 	stmdaeq	r0, {r0, r4, r6, sl, fp, lr, pc}
 8014a6c:	00000000 	andeq	r0, r0, r0
 8014a70:	080148ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, fp, lr}
 8014a74:	00000006 	andeq	r0, r0, r6
 8014a78:	0800ce45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, lr, pc}
 8014a7c:	00000000 	andeq	r0, r0, r0
 8014a80:	080148f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, fp, lr}
 8014a84:	00000007 	andeq	r0, r0, r7
 8014a88:	0800ce01 	stmdaeq	r0, {r0, r9, sl, fp, lr, pc}
 8014a8c:	00000000 	andeq	r0, r0, r0
 8014a90:	080148fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, fp, lr}
 8014a94:	00000008 	andeq	r0, r0, r8
 8014a98:	0800cd29 	stmdaeq	r0, {r0, r3, r5, r8, sl, fp, lr, pc}
 8014a9c:	00000000 	andeq	r0, r0, r0
 8014aa0:	080148c5 	stmdaeq	r1, {r0, r2, r6, r7, fp, lr}
 8014aa4:	00000008 	andeq	r0, r0, r8
 8014aa8:	0800d0c9 	stmdaeq	r0, {r0, r3, r6, r7, ip, lr, pc}
 8014aac:	00000000 	andeq	r0, r0, r0
 8014ab0:	08014907 	stmdaeq	r1, {r0, r1, r2, r8, fp, lr}
 8014ab4:	00010004 	andeq	r0, r1, r4
 8014ab8:	0800cda9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, fp, lr, pc}
 8014abc:	00000000 	andeq	r0, r0, r0
 8014ac0:	080148bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, fp, lr}
 8014ac4:	00000005 	andeq	r0, r0, r5
 8014ac8:	0800d46d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, ip, lr, pc}
 8014acc:	00000000 	andeq	r0, r0, r0
 8014ad0:	0801490c 	stmdaeq	r1, {r2, r3, r8, fp, lr}
 8014ad4:	00000009 	andeq	r0, r0, r9

08014ad8 <RemoteConfig::s_SET>:
 8014ad8:	0800cd85 	stmdaeq	r0, {r0, r2, r7, r8, sl, fp, lr, pc}
 8014adc:	00000000 	andeq	r0, r0, r0
 8014ae0:	080148bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, fp, lr}
 8014ae4:	00010005 	andeq	r0, r1, r5
 8014ae8:	0800ce99 	stmdaeq	r0, {r0, r3, r4, r7, r9, sl, fp, lr, pc}
 8014aec:	00000000 	andeq	r0, r0, r0
 8014af0:	080148c5 	stmdaeq	r1, {r0, r2, r6, r7, fp, lr}
 8014af4:	00010008 	andeq	r0, r1, r8
 8014af8:	6f626552 	svcvs	0x00626552
 8014afc:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 8014b00:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 8014b04:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 8014b08:	6f6f6265 	svcvs	0x006f6265
 8014b0c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8014b10:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 8014b14:	6f637200 	svcvs	0x00637200
 8014b18:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8014b1c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8014b20:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 8014b24:	6b726f77 	blvs	9cb0908 <__exidx_end+0x1c9a4d4>
 8014b28:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8014b2c:	73696400 	cmnvc	r9, #0, 8
 8014b30:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8014b34:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8014b38:	33316500 	teqcc	r1, #0, 10
 8014b3c:	78742e31 	ldmdavc	r4!, {r0, r4, r5, r9, sl, fp, sp}^
 8014b40:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 8014b44:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8014b48:	78742e73 	ldmdavc	r4!, {r0, r1, r4, r5, r6, r9, sl, fp, sp}^
 8014b4c:	00000074 	andeq	r0, r0, r4, ror r0

08014b50 <RemoteConfig::s_TXT>:
 8014b50:	0800d0d1 	stmdaeq	r0, {r0, r4, r6, r7, ip, lr, pc}
 8014b54:	00000000 	andeq	r0, r0, r0
 8014b58:	0800d38d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, ip, lr, pc}
 8014b5c:	00000000 	andeq	r0, r0, r0
 8014b60:	08014b15 	stmdaeq	r1, {r0, r2, r4, r8, r9, fp, lr}
 8014b64:	0000000b 	andeq	r0, r0, fp
 8014b68:	0000000c 	andeq	r0, r0, ip
 8014b6c:	0800d0fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, ip, lr, pc}
 8014b70:	00000000 	andeq	r0, r0, r0
 8014b74:	0800d3c1 	stmdaeq	r0, {r0, r6, r7, r8, r9, ip, lr, pc}
 8014b78:	00000000 	andeq	r0, r0, r0
 8014b7c:	08014b21 	stmdaeq	r1, {r0, r5, r8, r9, fp, lr}
 8014b80:	0000000b 	andeq	r0, r0, fp
 8014b84:	00000000 	andeq	r0, r0, r0
 8014b88:	0800d181 	stmdaeq	r0, {r0, r7, r8, ip, lr, pc}
 8014b8c:	00000000 	andeq	r0, r0, r0
 8014b90:	0800d441 	stmdaeq	r0, {r0, r6, sl, ip, lr, pc}
 8014b94:	00000000 	andeq	r0, r0, r0
 8014b98:	08014b2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, fp, lr}
 8014b9c:	0000000b 	andeq	r0, r0, fp
 8014ba0:	0000000f 	andeq	r0, r0, pc
 8014ba4:	0800d129 	stmdaeq	r0, {r0, r3, r5, r8, ip, lr, pc}
 8014ba8:	00000000 	andeq	r0, r0, r0
 8014bac:	0800d3e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, ip, lr, pc}
 8014bb0:	00000000 	andeq	r0, r0, r0
 8014bb4:	08014b39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, fp, lr}
 8014bb8:	00000008 	andeq	r0, r0, r8
 8014bbc:	00000004 	andeq	r0, r0, r4
 8014bc0:	0800d155 	stmdaeq	r0, {r0, r2, r4, r6, r8, ip, lr, pc}
 8014bc4:	00000000 	andeq	r0, r0, r0
 8014bc8:	0800d415 	stmdaeq	r0, {r0, r2, r4, sl, ip, lr, pc}
 8014bcc:	00000000 	andeq	r0, r0, r0
 8014bd0:	08014b42 	stmdaeq	r1, {r1, r6, r8, r9, fp, lr}
 8014bd4:	0000000b 	andeq	r0, r0, fp
 8014bd8:	00000003 	andeq	r0, r0, r3
 8014bdc:	45470020 	strbmi	r0, [r7, #-32]	; 0xffffffe0
 8014be0:	4f500054 	svcmi	0x00500054
 8014be4:	48005453 	stmdami	r0, {r0, r1, r4, r6, sl, ip, lr}
 8014be8:	00505454 	subseq	r5, r0, r4, asr r4
 8014bec:	31000a20 	tstcc	r0, r0, lsr #20
 8014bf0:	3a00312e 	bcc	80210b0 <__exidx_end+0xac7c>
 8014bf4:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
 8014bf8:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
 8014bfc:	7079542d 	rsbsvc	r5, r9, sp, lsr #8
 8014c00:	3b200065 	blcc	8814d9c <__exidx_end+0x7fe968>
 8014c04:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 8014c08:	6163696c 	cmnvs	r3, ip, ror #18
 8014c0c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8014c10:	6f736a2f 	svcvs	0x00736a2f
 8014c14:	6f43006e 	svcvs	0x0043006e
 8014c18:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8014c1c:	654c2d74 	strbvs	r2, [ip, #-3444]	; 0xfffff28c
 8014c20:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 8014c24:	6e692f00 	cdpvs	15, 6, cr2, cr9, cr0, {0}
 8014c28:	2e786564 	cdpcs	5, 7, cr6, cr8, cr4, {3}
 8014c2c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8014c30:	74732f00 	ldrbtvc	r2, [r3], #-3840	; 0xfffff100
 8014c34:	73656c79 	cmnvc	r5, #30976	; 0x7900
 8014c38:	7373632e 	cmnvc	r3, #-1207959552	; 0xb8000000
 8014c3c:	6e692f00 	cdpvs	15, 6, cr2, cr9, cr0, {0}
 8014c40:	2e786564 	cdpcs	5, 7, cr6, cr8, cr4, {3}
 8014c44:	2f00736a 	svccs	0x0000736a
 8014c48:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8014c4c:	696c002f 	stmdbvs	ip!, {r0, r1, r2, r3, r5}^
 8014c50:	76007473 			; <UNDEFINED> instruction: 0x76007473
 8014c54:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8014c58:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xfffff191
 8014c5c:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8014c60:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
 8014c64:	616c7073 	smcvs	50947	; 0xc703
 8014c68:	69640079 	stmdbvs	r4!, {r0, r3, r4, r5, r6}^
 8014c6c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8014c70:	0079726f 	rsbseq	r7, r9, pc, ror #4
 8014c74:	6f736a2f 	svcvs	0x00736a2f
 8014c78:	63612f6e 	cmnvs	r1, #440	; 0x1b8
 8014c7c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8014c80:	62657200 	rsbvs	r7, r5, #0, 4
 8014c84:	00746f6f 	rsbseq	r6, r4, pc, ror #30
 8014c88:	6e656469 	cdpvs	4, 6, cr6, cr5, cr9, {3}
 8014c8c:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
 8014c90:	44213c00 	strtmi	r3, [r1], #-3072	; 0xfffff400
 8014c94:	5954434f 	ldmdbpl	r4, {r0, r1, r2, r3, r6, r8, r9, lr}^
 8014c98:	68204550 	stmdavs	r0!, {r4, r6, r8, sl, lr}
 8014c9c:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8014ca0:	74683c0a 	strbtvc	r3, [r8], #-3082	; 0xfffff3f6
 8014ca4:	0a3e6c6d 	beq	8fafe60 <__exidx_end+0xf99a2c>
 8014ca8:	6165683c 	cmnvs	r5, ip, lsr r8
 8014cac:	743c3e64 	ldrtvc	r3, [ip], #-3684	; 0xfffff19c
 8014cb0:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8014cb4:	6275533e 	rsbsvs	r5, r5, #-134217728	; 0xf8000000
 8014cb8:	3c74696d 			; <UNDEFINED> instruction: 0x3c74696d
 8014cbc:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8014cc0:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8014cc4:	6165682f 	cmnvs	r5, pc, lsr #16
 8014cc8:	3c0a3e64 	stccc	14, cr3, [sl], {100}	; 0x64
 8014ccc:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8014cd0:	31683c3e 	cmncc	r8, lr, lsr ip
 8014cd4:	3c4b4f3e 	mcrrcc	15, 3, r4, fp, cr14
 8014cd8:	3e31682f 	cdpcc	8, 3, cr6, cr1, cr15, {1}
 8014cdc:	6f622f3c 	svcvs	0x00622f3c
 8014ce0:	0a3e7964 	beq	8fb3278 <__exidx_end+0xf9ce44>
 8014ce4:	74682f3c 	strbtvc	r2, [r8], #-3900	; 0xfffff0c4
 8014ce8:	0a3e6c6d 	beq	8fafea4 <__exidx_end+0xf99a70>
 8014cec:	64614200 	strbtvs	r4, [r1], #-512	; 0xfffffe00
 8014cf0:	71655220 	cmnvc	r5, r0, lsr #4
 8014cf4:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 8014cf8:	746f4e00 	strbtvc	r4, [pc], #-3584	; 8014d00 <RemoteConfig::s_TXT+0x1b0>
 8014cfc:	756f4620 	strbvc	r4, [pc, #-1568]!	; 80146e4 <CSWTCH.6+0x5>
 8014d00:	5200646e 	andpl	r6, r0, #1845493760	; 0x6e000000
 8014d04:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 8014d08:	45207473 	strmi	r7, [r0, #-1139]!	; 0xfffffb8d
 8014d0c:	7469746e 	strbtvc	r7, [r9], #-1134	; 0xfffffb92
 8014d10:	6f542079 	svcvs	0x00542079
 8014d14:	614c206f 	cmpvs	ip, pc, rrx
 8014d18:	00656772 	rsbeq	r6, r5, r2, ror r7
 8014d1c:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
 8014d20:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
 8014d24:	20495255 	subcs	r5, r9, r5, asr r2
 8014d28:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 8014d2c:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 8014d30:	746e4900 	strbtvc	r4, [lr], #-2304	; 0xfffff700
 8014d34:	616e7265 	cmnvs	lr, r5, ror #4
 8014d38:	6553206c 	ldrbvs	r2, [r3, #-108]	; 0xffffff94
 8014d3c:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 8014d40:	72724520 	rsbsvc	r4, r2, #32, 10	; 0x8000000
 8014d44:	4d00726f 	sfmmi	f7, 4, [r0, #-444]	; 0xfffffe44
 8014d48:	6f687465 	svcvs	0x00687465
 8014d4c:	6f4e2064 	svcvs	0x004e2064
 8014d50:	6d492074 	stclvs	0, cr2, [r9, #-464]	; 0xfffffe30
 8014d54:	6d656c70 	stclvs	12, cr6, [r5, #-448]!	; 0xfffffe40
 8014d58:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8014d5c:	65560064 	ldrbvs	r0, [r6, #-100]	; 0xffffff9c
 8014d60:	6f697372 	svcvs	0x00697372
 8014d64:	6f4e206e 	svcvs	0x004e206e
 8014d68:	75532074 	ldrbvc	r2, [r3, #-116]	; 0xffffff8c
 8014d6c:	726f7070 	rsbvc	r7, pc, #112	; 0x70
 8014d70:	00646574 	rsbeq	r6, r4, r4, ror r5
 8014d74:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 8014d78:	206e776f 	rsbcs	r7, lr, pc, ror #14
 8014d7c:	6f727245 	svcvs	0x00727245
 8014d80:	4b4f0072 	blmi	93d4f50 <__exidx_end+0x13beb1c>
 8014d84:	44213c00 	strtmi	r3, [r1], #-3072	; 0xfffff400
 8014d88:	5954434f 	ldmdbpl	r4, {r0, r1, r2, r3, r6, r8, r9, lr}^
 8014d8c:	68204550 	stmdavs	r0!, {r4, r6, r8, sl, lr}
 8014d90:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8014d94:	74683c0a 	strbtvc	r3, [r8], #-3082	; 0xfffff3f6
 8014d98:	0a3e6c6d 	beq	8faff54 <__exidx_end+0xf99b20>
 8014d9c:	6165683c 	cmnvs	r5, ip, lsr r8
 8014da0:	743c3e64 	ldrtvc	r3, [ip], #-3684	; 0xfffff19c
 8014da4:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8014da8:	2075253e 	rsbscs	r2, r5, lr, lsr r5
 8014dac:	2f3c7325 	svccs	0x003c7325
 8014db0:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8014db4:	2f3c3e65 	svccs	0x003c3e65
 8014db8:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 8014dbc:	623c0a3e 	eorsvs	r0, ip, #253952	; 0x3e000
 8014dc0:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8014dc4:	3e31683c 	mrccc	8, 1, r6, cr1, cr12, {1}
 8014dc8:	2f3c7325 	svccs	0x003c7325
 8014dcc:	3c3e3168 	ldfccs	f3, [lr], #-416	; 0xfffffe60
 8014dd0:	646f622f 	strbtvs	r6, [pc], #-559	; 8014dd8 <RemoteConfig::s_TXT+0x288>
 8014dd4:	3c0a3e79 	stccc	14, cr3, [sl], {121}	; 0x79
 8014dd8:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8014ddc:	000a3e6c 	andeq	r3, sl, ip, ror #28
 8014de0:	50545448 	subspl	r5, r4, r8, asr #8
 8014de4:	312e312f 			; <UNDEFINED> instruction: 0x312e312f
 8014de8:	20752520 	rsbscs	r2, r5, r0, lsr #10
 8014dec:	0a0d7325 	beq	8371a88 <__exidx_end+0x35b654>
 8014df0:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8014df4:	203a7265 	eorscs	r7, sl, r5, ror #4
 8014df8:	0a0d7325 	beq	8371a94 <__exidx_end+0x35b660>
 8014dfc:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8014e00:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8014e04:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 8014e08:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8014e0c:	6f430a0d 	svcvs	0x00430a0d
 8014e10:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8014e14:	654c2d74 	strbvs	r2, [ip, #-3444]	; 0xfffff28c
 8014e18:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 8014e1c:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 8014e20:	6f430a0d 	svcvs	0x00430a0d
 8014e24:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 8014e28:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8014e2c:	6c63203a 	stclvs	0, cr2, [r3], #-232	; 0xffffff18
 8014e30:	0d65736f 	stcleq	3, cr7, [r5, #-444]!	; 0xfffffe44
 8014e34:	000a0d0a 	andeq	r0, sl, sl, lsl #26

08014e38 <contentType>:
 8014e38:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8014e3c:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8014e40:	0000006c 	andeq	r0, r0, ip, rrx
	...
 8014e58:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8014e5c:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 8014e78:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8014e7c:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8014e80:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8014e84:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 8014e98:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 8014e9c:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 8014ea0:	2f6e6f69 	svccs	0x006e6f69
 8014ea4:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

08014eb8 <RemoteConfigConst::PARAMS_DISABLE>:
 8014eb8:	61736964 	cmnvs	r3, r4, ror #18
 8014ebc:	00656c62 	rsbeq	r6, r5, r2, ror #24

08014ec0 <RemoteConfigConst::PARAMS_FILE_NAME>:
 8014ec0:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8014ec4:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8014ec8:	00747874 	rsbseq	r7, r4, r4, ror r8

08014ecc <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 8014ecc:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8014ed0:	5f79616c 	svcpl	0x0079616c
 8014ed4:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08014ed9 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 8014ed9:	61736964 	cmnvs	r3, r4, ror #18
 8014edd:	5f656c62 	svcpl	0x00656c62
 8014ee1:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 8014ee5:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08014ee7 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 8014ee7:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8014eeb:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8014eef:	6f6f6265 	svcvs	0x006f6265
 8014ef3:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

08014ef5 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 8014ef5:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8014ef9:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 8014995 <s_Node+0x7f>
 8014efd:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8014f01:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08014f03 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8014f03:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8014f07:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8014f0b:	6f746361 	svcvs	0x00746361
 8014f0f:	7b007972 	blvc	80334df <__exidx_end+0x1d0ab>
 8014f13:	73696c22 	cmnvc	r9, #8704	; 0x2200
 8014f17:	7b3a2274 	blvc	8e9d8ef <__exidx_end+0xe874bb>
 8014f1b:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8014f1f:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8014f23:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8014f27:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8014f2b:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8014f2f:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8014f33:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8014f37:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8014f3b:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8014f3f:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8014f43:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8014f47:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8014f4b:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8014f4f:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8014f53:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8014f57:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8014f5b:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8014f5f:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8014f63:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8014f67:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8014f6b:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8014f6f:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8014f73:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8014f77:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8014f7b:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8014f7f:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8014f83:	616f6222 	cmnvs	pc, r2, lsr #4
 8014f87:	3a226472 	bcc	88ae157 <__exidx_end+0x897d23>
 8014f8b:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8014f8f:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8014f93:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 8014f97:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 8014f9b:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 8014f9f:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8014fa3:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8014fa7:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 8014fab:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 8014faf:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 8014fb3:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8014fb7:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 8014fbb:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8014fbf:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 8014fc3:	7b000a7d 	blvc	80179bf <__exidx_end+0x158b>
 8014fc7:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 8014fcb:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8014fcf:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 8014fd3:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8014fd7:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8014fdb:	7b3a2273 	blvc	8e9d9af <__exidx_end+0xe8757b>
 8014fdf:	33316522 	teqcc	r1, #142606336	; 0x8800000
 8014fe3:	78742e31 	ldmdavc	r4!, {r0, r4, r5, r9, sl, fp, sp}^
 8014fe7:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8014feb:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 8014fef:	2e314520 	cfabs64cs	mvdx4, mvdx1
 8014ff3:	2c223133 	stfcss	f3, [r2], #-204	; 0xffffff34
 8014ff7:	76656422 	strbtvc	r6, [r5], -r2, lsr #8
 8014ffb:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 8014fff:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015003:	44223a22 	strtmi	r3, [r2], #-2594	; 0xfffff5de
 8015007:	5020584d 	eorpl	r5, r0, sp, asr #16
 801500b:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 801500f:	64222c22 	strtvs	r2, [r2], #-3106	; 0xfffff3de
 8015013:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8015017:	742e7961 	strtvc	r7, [lr], #-2401	; 0xfffff69f
 801501b:	3a227478 	bcc	88b2203 <__exidx_end+0x89bdcf>
 801501f:	73694422 	cmnvc	r9, #570425344	; 0x22000000
 8015023:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015027:	46445520 	strbmi	r5, [r4], -r0, lsr #10
 801502b:	6e222c22 	cdpvs	12, 2, cr2, cr2, cr2, {1}
 801502f:	6f777465 	svcvs	0x00777465
 8015033:	742e6b72 	strtvc	r6, [lr], #-2930	; 0xfffff48e
 8015037:	3a227478 	bcc	88b221f <__exidx_end+0x89bdeb>
 801503b:	74654e22 	strbtvc	r4, [r5], #-3618	; 0xfffff1de
 801503f:	6b726f77 	blvs	9cb0e23 <__exidx_end+0x1c9a9ef>
 8015043:	72222c22 	eorvc	r2, r2, #8704	; 0x2200
 8015047:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801504b:	742e6769 	strtvc	r6, [lr], #-1897	; 0xfffff897
 801504f:	3a227478 	bcc	88b2237 <__exidx_end+0x89be03>
 8015053:	6d655222 	sfmvs	f5, 2, [r5, #-136]!	; 0xffffff78
 8015057:	2065746f 	rsbcs	r7, r5, pc, ror #8
 801505b:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801505f:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8015063:	6f697461 	svcvs	0x00697461
 8015067:	7d7d226e 	lfmvc	f2, 2, [sp, #-440]!	; 0xfffffe48
 801506b:	63727300 	cmnvs	r2, #0, 6
 801506f:	7474682f 	ldrbtvc	r6, [r4], #-2095	; 0xfffff7d1
 8015073:	672f6470 			; <UNDEFINED> instruction: 0x672f6470
 8015077:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
 801507b:	5f656c69 	svcpl	0x00656c69
 801507f:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 8015083:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8015087:	00707063 	rsbseq	r7, r0, r3, rrx
 801508b:	5f746567 	svcpl	0x00746567
 801508f:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8015093:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 8015097:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
 801509b:	28732500 	ldmdacs	r3!, {r8, sl, sp}^
 801509f:	73252029 			; <UNDEFINED> instruction: 0x73252029
 80150a3:	696c202c 	stmdbvs	ip!, {r2, r3, r5, sp}^
 80150a7:	2520656e 	strcs	r6, [r0, #-1390]!	; 0xfffffa92
 80150ab:	25203a69 	strcs	r3, [r0, #-2665]!	; 0xfffff597
 80150af:	3e2d2073 	mcrcc	0, 1, r2, cr13, cr3, {3}
 80150b3:	0a642520 	beq	991e53b <__exidx_end+0x1908107>
 80150b7:	2d2d3c00 	stccs	12, cr3, [sp, #-0]
 80150bb:	3a732520 	bcc	9cde543 <__exidx_end+0x1cc810f>
 80150bf:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 80150c3:	 			; <UNDEFINED> instruction: 0x3c000a64

080150c6 <index_html>:
 80150c6:	4f44213c 	svcmi	0x0044213c
 80150ca:	50595443 	subspl	r5, r9, r3, asr #8
 80150ce:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 80150d2:	0a3e6c6d 	beq	8fb028e <__exidx_end+0xf99e5a>
 80150d6:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 80150da:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 80150de:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 80150e2:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 80150e6:	6b6e696c 	blvs	9baf69e <__exidx_end+0x1b9926a>
 80150ea:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 80150ee:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 80150f2:	73656c79 	cmnvc	r5, #30976	; 0x7900
 80150f6:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 80150fa:	72682022 	rsbvc	r2, r8, #34	; 0x22
 80150fe:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 8015102:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8015106:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 801510a:	20227373 	eorcs	r7, r2, r3, ror r3
 801510e:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 8015112:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015116:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 801511a:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 801511e:	0a3e656c 	beq	8fae6d6 <__exidx_end+0xf982a2>
 8015122:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8015126:	0a3e6461 	beq	8fae2b2 <__exidx_end+0xf97e7e>
 801512a:	646f623c 	strbtvs	r6, [pc], #-572	; 8015132 <index_html+0x6c>
 801512e:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8015132:	6165683c 	cmnvs	r5, ip, lsr r8
 8015136:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 801513a:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 801513e:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8015142:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 8015146:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 801514a:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 801514e:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015152:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8015156:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801515a:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 801515e:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8015162:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 8015166:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801516a:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 801516e:	6f746365 	svcvs	0x00746365
 8015172:	20227972 	eorcs	r7, r2, r2, ror r9
 8015176:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801517a:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 801517e:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8015182:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8015186:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 801518a:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 801518e:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8015192:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 8015196:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 801519a:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 801519e:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 80151a2:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 80151a6:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80151aa:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 80151ae:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 80151b2:	20227478 	eorcs	r7, r2, r8, ror r4
 80151b6:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80151ba:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 80151be:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 80151c2:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 80151c6:	0a3e656c 	beq	8fae77e <__exidx_end+0xf9834a>
 80151ca:	6f663c09 	svcvs	0x00663c09
 80151ce:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 80151d2:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 80151d6:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 80151da:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 80151de:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80151e2:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 80151e6:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 80151ea:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 80151ee:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 80151f2:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 80151f6:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 80151fa:	20747069 	rsbscs	r7, r4, r9, rrx
 80151fe:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 8015202:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 8015206:	6a2e7865 	bvs	8bb33a2 <__exidx_end+0xb9cf6e>
 801520a:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 801520e:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 8015212:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 8015216:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 801521a:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 801521e:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015222:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8015226:	 	svcvs	0x0062000a

08015228 <styles_css>:
 8015228:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 801522c:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8015230:	63616220 	cmnvs	r1, #32, 4
 8015234:	6f72676b 	svcvs	0x0072676b
 8015238:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 801523c:	6f6c6f63 	svcvs	0x006c6f63
 8015240:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8015244:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8015248:	30322c30 	eorscc	r2, r2, r0, lsr ip
 801524c:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8015250:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8015254:	6f6c6f63 	svcvs	0x006c6f63
 8015258:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801525c:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8015260:	202c3535 	eorcs	r3, ip, r5, lsr r5
 8015264:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 8015268:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 801526c:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8015270:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 8015274:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8015278:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801527c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015280:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8015284:	0a3b7865 	beq	8ef3420 <__exidx_end+0xedcfec>
 8015288:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 801528c:	0a7b2069 	beq	9edd438 <__exidx_end+0x1ec7004>
 8015290:	696c2020 	stmdbvs	ip!, {r5, sp}^
 8015294:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 8015298:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 801529c:	6f6e203a 	svcvs	0x006e203a
 80152a0:	0a3b656e 	beq	8eee860 <__exidx_end+0xed842c>
 80152a4:	616d2020 	cmnvs	sp, r0, lsr #32
 80152a8:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 80152ac:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 80152b0:	70352078 	eorsvc	r2, r5, r8, ror r0
 80152b4:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 80152b8:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 80152bc:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 80152c0:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80152c4:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 80152c8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80152cc:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 80152d0:	0a3b7865 	beq	8ef346c <__exidx_end+0xedd038>
 80152d4:	6f622020 	svcvs	0x00622020
 80152d8:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 80152dc:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 80152e0:	3a737569 	bcc	9cf288c <__exidx_end+0x1cdc458>
 80152e4:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 80152e8:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80152ec:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80152f0:	203a7265 	eorscs	r7, sl, r5, ror #4
 80152f4:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80152f8:	72672064 	rsbvc	r2, r7, #100	; 0x64
 80152fc:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8015300:	0a3b7870 	beq	8ef34c8 <__exidx_end+0xedd094>
 8015304:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 8015308:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 801530c:	0a7b2072 	beq	9edd4dc <__exidx_end+0x1ec70a8>
 8015310:	69642020 	stmdbvs	r4!, {r5, sp}^
 8015314:	616c7073 	smcvs	50947	; 0xc703
 8015318:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 801531c:	3b78656c 	blcc	9e2e8d4 <__exidx_end+0x1e184a0>
 8015320:	6a20200a 	bvs	881d350 <__exidx_end+0x806f1c>
 8015324:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 8015328:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 801532c:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8015330:	203a746e 	eorscs	r7, sl, lr, ror #8
 8015334:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 8015338:	0a3b7265 	beq	8ef1cd4 <__exidx_end+0xedb8a0>
 801533c:	6f622020 	svcvs	0x00622020
 8015340:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8015344:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8015348:	3a737569 	bcc	9cf28f4 <__exidx_end+0x1cdc4c0>
 801534c:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8015350:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8015354:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8015358:	203a7265 	eorscs	r7, sl, r5, ror #4
 801535c:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8015360:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8015364:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8015368:	0a3b7870 	beq	8ef3530 <__exidx_end+0xedd0fc>
 801536c:	00000a7d 	andeq	r0, r0, sp, ror sl

08015370 <HttpContent>:
 8015370:	08014c32 	stmdaeq	r1, {r1, r4, r5, sl, fp, lr}
 8015374:	08015228 	stmdaeq	r1, {r3, r5, r9, ip, lr}
 8015378:	08014c3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, fp, lr}
 801537c:	08015388 	stmdaeq	r1, {r3, r7, r8, r9, ip, lr}
 8015380:	08014c26 	stmdaeq	r1, {r1, r2, r5, sl, fp, lr}
 8015384:	080150c6 	stmdaeq	r1, {r1, r2, r6, r7, ip, lr}

08015388 <index_js>:
 8015388:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801538c:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8015390:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8015394:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8015398:	534a7465 	movtpl	r7, #42085	; 0xa465
 801539c:	6a284e4f 	bvs	8a28ce0 <__exidx_end+0xa128ac>
 80153a0:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80153a4:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80153a8:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 80153ac:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 80153b0:	6a2f273d 	bvs	8bdf0ac <__exidx_end+0xbc8c78>
 80153b4:	2f6e6f73 	svccs	0x006e6f73
 80153b8:	202b2027 	eorcs	r2, fp, r7, lsr #32
 80153bc:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 80153c0:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 80153c4:	20797274 	rsbscs	r7, r9, r4, ror r2
 80153c8:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 80153cc:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 80153d0:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 80153d4:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 80153d8:	20746961 	rsbscs	r6, r4, r1, ror #18
 80153dc:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 80153e0:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 80153e4:	0a3b296c 	beq	8edf99c <__exidx_end+0xec9568>
 80153e8:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 80153ec:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 80153f0:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 80153f4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 80153f8:	73657220 	cmnvc	r5, #32, 4
 80153fc:	6f736a2e 	svcvs	0x00736a2e
 8015400:	3b29286e 	blcc	8a5f5c0 <__exidx_end+0xa4918c>
 8015404:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8015408:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 801540c:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 8015410:	6f727265 	svcvs	0x00727265
 8015414:	7b202972 	blvc	881f9e4 <__exidx_end+0x8095b0>
 8015418:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801541c:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 8015420:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 8015424:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 8015428:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 801542c:	3b29726f 	blcc	8a71df0 <__exidx_end+0xa5b9bc>
 8015430:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8015434:	0a0a7d0a 	beq	82b4864 <__exidx_end+0x29e430>
 8015438:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801543c:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8015440:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8015444:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 8015448:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 801544c:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8015450:	20292874 	eorcs	r2, r9, r4, ror r8
 8015454:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8015458:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801545c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8015460:	6177613d 	cmnvs	r7, sp, lsr r1
 8015464:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8015468:	534a7465 	movtpl	r7, #42085	; 0xa465
 801546c:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8015470:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8015474:	0a3b2927 	beq	8edf918 <__exidx_end+0xec94e4>
 8015478:	6f640909 	svcvs	0x00640909
 801547c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8015480:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8015484:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8015488:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801548c:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8015490:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8015494:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 8015498:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801549c:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 80154a0:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 80154a4:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 80154a8:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 80154ac:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 80154b0:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 80154b4:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 80154b8:	2b656d61 	blcs	9970a44 <__exidx_end+0x195a610>
 80154bc:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801543c <index_js+0xb4>
 80154c0:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80154c4:	2b223e69 	blcs	88a4e70 <__exidx_end+0x88ea3c>
 80154c8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80154cc:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 80154d0:	6f6e2e74 	svcvs	0x006e2e74
 80154d4:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 80154d8:	2b657079 	blcs	99716c4 <__exidx_end+0x195b290>
 80154dc:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801545c <index_js+0xd4>
 80154e0:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80154e4:	2b223e69 	blcs	88a4e90 <__exidx_end+0x88ea5c>
 80154e8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80154ec:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 80154f0:	6f6e2e74 	svcvs	0x006e2e74
 80154f4:	702e6564 	eorvc	r6, lr, r4, ror #10
 80154f8:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 80154fc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8015500:	2f3c222b 	svccs	0x003c222b
 8015504:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8015508:	0a7d0a3b 	beq	9f57dfc <__exidx_end+0x1f419c8>
 801550c:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 8015510:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 8015514:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8015518:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 801551c:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8015520:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8015524:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8015528:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 801552c:	0a7b2029 	beq	9edd5d8 <__exidx_end+0x1ec71a4>
 8015530:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8015534:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 8015538:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 801553c:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8015540:	6177613d 	cmnvs	r7, sp, lsr r1
 8015544:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8015548:	534a7465 	movtpl	r7, #42085	; 0xa465
 801554c:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8015550:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015554:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8015558:	3b292779 	blcc	8a5f344 <__exidx_end+0xa48f10>
 801555c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8015560:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8015564:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015568:	0a22223d 	beq	889de64 <__exidx_end+0x887a30>
 801556c:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8015570:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8015574:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 8015578:	73656d61 	cmnvc	r5, #6208	; 0x1840
 801557c:	6a624f3d 	bvs	98a9278 <__exidx_end+0x1892e44>
 8015580:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8015584:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 8015588:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 801558c:	6f746365 	svcvs	0x00746365
 8015590:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 8015594:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8015598:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 801559c:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 80155a0:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 80155a4:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 80155a8:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 80155ac:	6145726f 	cmpvs	r5, pc, ror #4
 80155b0:	66286863 	strtvs	r6, [r8], -r3, ror #16
 80155b4:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 80155b8:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 80155bc:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 80155c0:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80155c4:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 80155c8:	20726176 	rsbscs	r6, r2, r6, ror r1
 80155cc:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 80155d0:	203d2065 	eorscs	r2, sp, r5, rrx
 80155d4:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80155d8:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 80155dc:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 80155e0:	73656c69 	cmnvc	r5, #26880	; 0x6900
 80155e4:	6b5b5d22 	blvs	96eca74 <__exidx_end+0x16d6640>
 80155e8:	3b5d7965 	blcc	9773b84 <__exidx_end+0x175d750>
 80155ec:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80155f0:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 80155f4:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 80155f8:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 80155fc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8015600:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 8015604:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 8015608:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801560c:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 8015610:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8015614:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8015618:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 801561c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8015620:	0a3b223e 	beq	8eddf20 <__exidx_end+0xec7aec>
 8015624:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 8015628:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801562c:	6f640909 	svcvs	0x00640909
 8015630:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8015634:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8015638:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 801563c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8015640:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8015644:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8015648:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 801564c:	6f746365 	svcvs	0x00746365
 8015650:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 8015654:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 8015658:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 801565c:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8015660:	3b6c6d74 	blcc	9b30c38 <__exidx_end+0x1b1a804>
 8015664:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8015668:	5f746567 	svcpl	0x00746567
 801566c:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8015670:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8015674:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8015678:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 801567c:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8015680:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 8015684:	20636e79 	rsbcs	r6, r3, r9, ror lr
 8015688:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 801568c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8015690:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 8015694:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 8015698:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801569c:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 80156a0:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 80156a4:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 80156a8:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 80156ac:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 80156b0:	6177613d 	cmnvs	r7, sp, lsr r1
 80156b4:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80156b8:	534a7465 	movtpl	r7, #42085	; 0xa465
 80156bc:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 80156c0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80156c4:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 80156c8:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80156cc:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 80156d0:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 80156d4:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 80156d8:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 80156dc:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 80156e0:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 80156e4:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 80156e8:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 80156ec:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 80156f0:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 80156f4:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 80156f8:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 80156fc:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 8015700:	2b22563e 	blcs	88ab000 <__exidx_end+0x894bcc>
 8015704:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015708:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 801570c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015710:	2b6e6f69 	blcs	9bb14bc <__exidx_end+0x1b9b088>
 8015714:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8015694 <index_js+0x30c>
 8015718:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801571c:	2b223e69 	blcs	88a50c8 <__exidx_end+0x88ec94>
 8015720:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015724:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8015728:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 801572c:	61642e64 	cmnvs	r4, r4, ror #28
 8015730:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 8015734:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8015738:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 801573c:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 8015740:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8015744:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 8015748:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 801574c:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8015750:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 8015754:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 8015758:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 801575c:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8015760:	6f697372 	svcvs	0x00697372
 8015764:	6f622e6e 	svcvs	0x00622e6e
 8015768:	2b647261 	blcs	99320f4 <__exidx_end+0x191bcc0>
 801576c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80156ec <index_js+0x364>
 8015770:	3b223e69 	blcc	88a511c <__exidx_end+0x88ece8>
 8015774:	0a0a7d0a 	beq	82b4ba4 <__exidx_end+0x29e770>
 8015778:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801577c:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8015780:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8015784:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8015788:	745f7465 	ldrbvc	r7, [pc], #-1125	; 8015790 <index_js+0x408>
 801578c:	73287478 			; <UNDEFINED> instruction: 0x73287478
 8015790:	20296c65 	eorcs	r6, r9, r5, ror #24
 8015794:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 8015798:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 801579c:	613d7478 	teqvs	sp, r8, ror r4
 80157a0:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 80157a4:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 80157a8:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 80157ac:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 80157b0:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80157b4:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80157b8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80157bc:	3b22223d 	blcc	889e0b8 <__exidx_end+0x887c84>
 80157c0:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 80157c4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 80157c8:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 80157cc:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 80157d0:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 80157d4:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 80157d8:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 80157dc:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 80157e0:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 80157e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80157e8:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 80157ec:	0a7b2029 	beq	9edd898 <__exidx_end+0x1ec7464>
 80157f0:	61760909 	cmnvs	r6, r9, lsl #18
 80157f4:	61762072 	cmnvs	r6, r2, ror r0
 80157f8:	2065756c 	rsbcs	r7, r5, ip, ror #10
 80157fc:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 8015800:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8015804:	6b5b5d6c 	blvs	96ecdbc <__exidx_end+0x16d6988>
 8015808:	3b5d7965 	blcc	9773da4 <__exidx_end+0x175d970>
 801580c:	2009090a 	andcs	r0, r9, sl, lsl #18
 8015810:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015814:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 8015818:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 801581c:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8015820:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8015824:	2f3c222b 	svccs	0x003c222b
 8015828:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 801582c:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8015830:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 8015834:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8015838:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 801583c:	742f3c3e 	strtvc	r3, [pc], #-3134	; 8015844 <index_js+0x4bc>
 8015840:	3b223e72 	blcc	88a5210 <__exidx_end+0x88eddc>
 8015844:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 8015848:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 801584c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8015850:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8015854:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 8015858:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 801585c:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8015860:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 8015864:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 8015868:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801586c:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8015870:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8015874:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 8015878:	0a3b6c6d 	beq	8ef0a34 <__exidx_end+0xeda600>
 801587c:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8015880:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8015884:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8015888:	3b292874 	blcc	8a5fa60 <__exidx_end+0xa4962c>
 801588c:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8015890:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 8015894:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8015898:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801589c:	0a3b2928 	beq	8edfd44 <__exidx_end+0xec9910>
 80158a0:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 80158a4:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 80158a8:	6f697372 	svcvs	0x00697372
 80158ac:	3b29286e 	blcc	8a5fa6c <__exidx_end+0xa49638>
 80158b0:	0000000a 	andeq	r0, r0, sl

080158b4 <s_aStorSize>:
 80158b4:	00000060 	andeq	r0, r0, r0, rrx
 80158b8:	00000090 	muleq	r0, r0, r0
 80158bc:	00000020 	andeq	r0, r0, r0, lsr #32
 80158c0:	00000040 	andeq	r0, r0, r0, asr #32
 80158c4:	00000060 	andeq	r0, r0, r0, rrx
 80158c8:	00000040 	andeq	r0, r0, r0, asr #32
 80158cc:	00000020 	andeq	r0, r0, r0, lsr #32
 80158d0:	00000020 	andeq	r0, r0, r0, lsr #32
 80158d4:	000001e0 	andeq	r0, r0, r0, ror #3
 80158d8:	00000040 	andeq	r0, r0, r0, asr #32
 80158dc:	00000020 	andeq	r0, r0, r0, lsr #32
 80158e0:	00000060 	andeq	r0, r0, r0, rrx
 80158e4:	00000030 	andeq	r0, r0, r0, lsr r0
 80158e8:	00000020 	andeq	r0, r0, r0, lsr #32
 80158ec:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 80158f0:	00000030 	andeq	r0, r0, r0, lsr r0
 80158f4:	00000040 	andeq	r0, r0, r0, asr #32
 80158f8:	00000020 	andeq	r0, r0, r0, lsr #32
 80158fc:	00000060 	andeq	r0, r0, r0, rrx
 8015900:	00000020 	andeq	r0, r0, r0, lsr #32
 8015904:	00000400 	andeq	r0, r0, r0, lsl #8
 8015908:	00000020 	andeq	r0, r0, r0, lsr #32
 801590c:	00000020 	andeq	r0, r0, r0, lsr #32
 8015910:	00000040 	andeq	r0, r0, r0, asr #32
 8015914:	00000060 	andeq	r0, r0, r0, rrx
 8015918:	00000020 	andeq	r0, r0, r0, lsr #32
 801591c:	00000020 	andeq	r0, r0, r0, lsr #32
 8015920:	00000020 	andeq	r0, r0, r0, lsr #32

08015924 <vtable for StoreDisplayUdf>:
	...
 801592c:	0800e44d 	stmdaeq	r0, {r0, r2, r3, r6, sl, sp, lr, pc}
 8015930:	0800e495 	stmdaeq	r0, {r0, r2, r4, r7, sl, sp, lr, pc}
 8015934:	0800e471 	stmdaeq	r0, {r0, r4, r5, r6, sl, sp, lr, pc}
 8015938:	0800e451 	stmdaeq	r0, {r0, r4, r6, sl, sp, lr, pc}

0801593c <vtable for StoreE131>:
	...
 8015944:	0800e4b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, sl, sp, lr, pc}
 8015948:	0800e4fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, sl, sp, lr, pc}
 801594c:	0800e4d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, sp, lr, pc}
 8015950:	0800e4b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, sl, sp, lr, pc}

08015954 <vtable for StoreNetwork>:
	...
 801595c:	0800e51d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, sp, lr, pc}
 8015960:	0800e631 	stmdaeq	r0, {r0, r4, r5, r9, sl, sp, lr, pc}
 8015964:	0800e525 	stmdaeq	r0, {r0, r2, r5, r8, sl, sp, lr, pc}
 8015968:	0800e645 	stmdaeq	r0, {r0, r2, r6, r9, sl, sp, lr, pc}
 801596c:	0800e5d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, sl, sp, lr, pc}
 8015970:	0800e5a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, sp, lr, pc}
 8015974:	0800e579 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, sp, lr, pc}
 8015978:	0800e601 	stmdaeq	r0, {r0, r9, sl, sp, lr, pc}
 801597c:	0800e549 	stmdaeq	r0, {r0, r3, r6, r8, sl, sp, lr, pc}
 8015980:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8015984:	00000000 	andeq	r0, r0, r0
 8015988:	0800e51f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, sl, sp, lr, pc}
 801598c:	0800e63d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, sl, sp, lr, pc}
 8015990:	0800e5f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, sl, sp, lr, pc}
 8015994:	0800e5cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, sl, sp, lr, pc}
 8015998:	0800e5a1 	stmdaeq	r0, {r0, r5, r7, r8, sl, sp, lr, pc}
 801599c:	0800e629 	stmdaeq	r0, {r0, r3, r5, r9, sl, sp, lr, pc}
 80159a0:	0800e571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, sp, lr, pc}

080159a4 <vtable for StoreRemoteConfig>:
	...
 80159ac:	0800e679 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, sp, lr, pc}
 80159b0:	0800e6c1 	stmdaeq	r0, {r0, r6, r7, r9, sl, sp, lr, pc}
 80159b4:	0800e69d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, sp, lr, pc}
 80159b8:	0800e67d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, sl, sp, lr, pc}

080159bc <vtable for StoreWS28xxDmx>:
	...
 80159c4:	0800e6e1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, sp, lr, pc}
 80159c8:	0800e851 	stmdaeq	r0, {r0, r4, r6, fp, sp, lr, pc}
 80159cc:	0800e6e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sl, sp, lr, pc}
 80159d0:	0800e865 	stmdaeq	r0, {r0, r2, r5, r6, fp, sp, lr, pc}
 80159d4:	0800e81d 	stmdaeq	r0, {r0, r2, r3, r4, fp, sp, lr, pc}
 80159d8:	0800e7e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, sl, sp, lr, pc}
 80159dc:	0800e7b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, sp, lr, pc}
 80159e0:	0800e779 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, sl, sp, lr, pc}
 80159e4:	0800e741 	stmdaeq	r0, {r0, r6, r8, r9, sl, sp, lr, pc}
 80159e8:	0800e70d 	stmdaeq	r0, {r0, r2, r3, r8, r9, sl, sp, lr, pc}
 80159ec:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80159f0:	00000000 	andeq	r0, r0, r0
 80159f4:	0800e6e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, sp, lr, pc}
 80159f8:	0800e85d 	stmdaeq	r0, {r0, r2, r3, r4, r6, fp, sp, lr, pc}
 80159fc:	0800e849 	stmdaeq	r0, {r0, r3, r6, fp, sp, lr, pc}
 8015a00:	0800e815 	stmdaeq	r0, {r0, r2, r4, fp, sp, lr, pc}
 8015a04:	0800e7e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, sl, sp, lr, pc}
 8015a08:	0800e7a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, sl, sp, lr, pc}
 8015a0c:	0800e771 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, sl, sp, lr, pc}
 8015a10:	0800e739 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sl, sp, lr, pc}
 8015a14:	3a434d46 	bcc	90e8f34 <__exidx_end+0x10d2b00>
 8015a18:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 8015a1c:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8015a20:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8015a24:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8015a28:	6f742068 	svcvs	0x00742068
 8015a2c:	206c6174 	rsbcs	r6, ip, r4, ror r1
 8015a30:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 8015a34:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 8015a38:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8015a3c:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 8015a40:	6374000a 	cmnvs	r4, #10
 8015a44:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 8015a48:	3a6e6967 	bcc	9baffec <__exidx_end+0x1b99bb8>
 8015a4c:	6f6f7420 	svcvs	0x006f7420
 8015a50:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 8015a54:	6f632079 	svcvs	0x00632079
 8015a58:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 8015a5c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8015a60:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 8015a64:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 8015a68:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 8015a6c:	41000a64 	tstmi	r0, r4, ror #20
 8015a70:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 8015a74:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 8015a78:	61662070 	smcvs	25088	; 0x6200
 8015a7c:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 8015a80:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 8015a84:	61666564 	cmnvs	r6, r4, ror #10
 8015a88:	20746c75 	rsbscs	r6, r4, r5, ror ip
 8015a8c:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8015a90:	0a796177 	beq	9e6e074 <__exidx_end+0x1e57c40>
 8015a94:	50524100 	subspl	r4, r2, r0, lsl #2
 8015a98:	6f6f6c20 	svcvs	0x006f6c20
 8015a9c:	2070756b 	rsbscs	r7, r0, fp, ror #10
 8015aa0:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 8015aa4:	000a6465 	andeq	r6, sl, r5, ror #8

08015aa8 <NetworkConst::MSG_MDNS_CONFIG>:
 8015aa8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8015aac:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8015ab0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8015ab4:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

08015ab9 <NetworkConst::MSG_NETWORK_INIT>:
 8015ab9:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8015abd:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8015ac1:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 8015ac5:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 8015ac9:	6974617a 	ldmdbvs	r4!, {r1, r3, r4, r5, r6, r8, sp, lr}^
 8015acd:	32006e6f 	andcc	r6, r0, #1776	; 0x6f0
 8015ad1:	302e3432 	eorcc	r3, lr, r2, lsr r4
 8015ad5:	322e302e 	eorcc	r3, lr, #46	; 0x2e
 8015ad9:	5f003135 	svcpl	0x00003135
 8015add:	2e706374 	mrccs	3, 3, r6, cr0, cr4, {3}
 8015ae1:	61636f6c 	cmnvs	r3, ip, ror #30
 8015ae5:	735f006c 	cmpvc	pc, #108	; 0x6c
 8015ae9:	69767265 	ldmdbvs	r6!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8015aed:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8015af1:	736e645f 	cmnvc	lr, #1593835520	; 0x5f000000
 8015af5:	2e64732d 	cdpcs	3, 6, cr7, cr4, cr13, {1}
 8015af9:	7064755f 	rsbvc	r7, r4, pc, asr r5
 8015afd:	636f6c2e 	cmnvs	pc, #11776	; 0x2e00
 8015b01:	6d006c61 	stcvs	12, cr6, [r0, #-388]	; 0xfffffe7c
 8015b05:	0a534e44 	beq	94e941d <__exidx_end+0x14d2fe9>
 8015b09:	6f4e2000 	svcvs	0x004e2000
 8015b0d:	75722074 	ldrbvc	r2, [r2, #-116]!	; 0xffffff8c
 8015b11:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 8015b15:	20000a67 	andcs	r0, r0, r7, ror #20
 8015b19:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 8015b1d:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8015b21:	20000a73 	andcs	r0, r0, r3, ror sl
 8015b25:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 8015b29:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8015b2d:	7465000a 	strbtvc	r0, [r5], #-10
 8015b31:	67003068 	strvs	r3, [r0, -r8, rrx]
 8015b35:	64616769 	strbtvs	r6, [r1], #-1897	; 0xfffff897
 8015b39:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 8015b3d:	4e005f65 	cdpmi	15, 0, cr5, cr0, cr5, {3}
 8015b41:	6f777465 	svcvs	0x00777465
 8015b45:	000a6b72 	andeq	r6, sl, r2, ror fp
 8015b49:	736f4820 	cmnvc	pc, #32, 16	; 0x200000
 8015b4d:	6d616e74 	stclvs	14, cr6, [r1, #-464]!	; 0xfffffe30
 8015b51:	3a202065 	bcc	881dced <__exidx_end+0x8078b9>
 8015b55:	0a732520 	beq	9cdefdd <__exidx_end+0x1cc8ba9>
 8015b59:	66492000 	strbvs	r2, [r9], -r0
 8015b5d:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 8015b61:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015b65:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015b69:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8015b6d:	4920000a 	stmdbmi	r0!, {r1, r3}
 8015b71:	2074656e 	rsbscs	r6, r4, lr, ror #10
 8015b75:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015b79:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8015b7d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015b81:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015b85:	252f6425 	strcs	r6, [pc, #-1061]!	; 8015768 <index_js+0x3e0>
 8015b89:	20000a64 	andcs	r0, r0, r4, ror #20
 8015b8d:	6d74654e 	cfldr64vs	mvdx6, [r4, #-312]!	; 0xfffffec8
 8015b91:	206b7361 	rsbcs	r7, fp, r1, ror #6
 8015b95:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8015b99:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015b9d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015ba1:	0a64252e 	beq	991f061 <__exidx_end+0x1908c2d>
 8015ba5:	61472000 	mrsvs	r2, (UNDEF: 71)
 8015ba9:	61776574 	cmnvs	r7, r4, ror r5
 8015bad:	20202079 	eorcs	r2, r0, r9, ror r0
 8015bb1:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015bb5:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015bb9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015bbd:	20000a64 	andcs	r0, r0, r4, ror #20
 8015bc1:	616f7242 	cmnvs	pc, r2, asr #4
 8015bc5:	73616364 	cmnvc	r1, #100, 6	; 0x90000001
 8015bc9:	203a2074 	eorscs	r2, sl, r4, ror r0
 8015bcd:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015bd1:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015bd5:	0a64252e 	beq	991f095 <__exidx_end+0x1908c61>
 8015bd9:	614d2000 	mrsvs	r2, (UNDEF: 77)
 8015bdd:	20202063 	eorcs	r2, r0, r3, rrx
 8015be1:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015be5:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8015be9:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8015bed:	3a78322e 	bcc	9e224ad <__exidx_end+0x1e0c079>
 8015bf1:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8015bf5:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8015bf9:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8015bfd:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8015c01:	0a78322e 	beq	9e224c1 <__exidx_end+0x1e0c08d>
 8015c05:	6f4d2000 	svcvs	0x004d2000
 8015c09:	20206564 	eorcs	r6, r0, r4, ror #10
 8015c0d:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015c11:	6325203a 			; <UNDEFINED> instruction: 0x6325203a
 8015c15:	7453000a 	ldrbvc	r0, [r3], #-10
 8015c19:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 8015c1d:	00504920 	subseq	r4, r0, r0, lsr #18

08015c21 <NetworkParamsConst::IP_ADDRESS>:
 8015c21:	615f7069 	cmpvs	pc, r9, rrx
 8015c25:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8015c29:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08015c2c <NetworkParamsConst::DEFAULT_GATEWAY>:
 8015c2c:	61666564 	cmnvs	r6, r4, ror #10
 8015c30:	5f746c75 	svcpl	0x00746c75
 8015c34:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8015c38:	00796177 	rsbseq	r6, r9, r7, ror r1

08015c3c <NetworkParamsConst::DHCP_RETRY_TIME>:
 8015c3c:	70636864 	rsbvc	r6, r3, r4, ror #16
 8015c40:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8015c44:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8015c4c <NetworkParamsConst::HOSTNAME>
 8015c48:	00656d69 	rsbeq	r6, r5, r9, ror #26

08015c4c <NetworkParamsConst::HOSTNAME>:
 8015c4c:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8015c50:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08015c55 <NetworkParamsConst::NET_MASK>:
 8015c55:	5f74656e 	svcpl	0x0074656e
 8015c59:	6b73616d 	blvs	9cee215 <__exidx_end+0x1cd7de1>
	...

08015c5e <NetworkParamsConst::USE_DHCP>:
 8015c5e:	5f657375 	svcpl	0x00657375
 8015c62:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08015c67 <NetworkParamsConst::FILE_NAME>:
 8015c67:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8015c6b:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8015c6f:	00747874 	rsbseq	r7, r4, r4, ror r8
 8015c73:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 8015c77:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 8015c7b:	61747320 	cmnvs	r4, r0, lsr #6
 8015c7f:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8015c83:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015c87:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015c8b:	252f6425 	strcs	r6, [pc, #-1061]!	; 801586e <index_js+0x4e6>
 8015c8f:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8015c93:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 8015c97:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015c9b:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015c9f:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8015ca3:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 8015ca7:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015cab:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015caf:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8015cb3:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 8015cb7:	20657261 	rsbcs	r7, r5, r1, ror #4
 8015cbb:	2a2e2556 	bcs	8b9f21b <__exidx_end+0xb88de7>
 8015cbf:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 8015cc3:	72205043 	eorvc	r5, r0, #67	; 0x43
 8015cc7:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 8015ccb:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8015ccf:	50434844 	subpl	r4, r3, r4, asr #16
 8015cd3:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8015cd7:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8015cdb:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 8015cdf:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8015ce3:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8015ce7:	6f647475 	svcvs	0x00647475
 8015ceb:	00006e77 	andeq	r6, r0, r7, ror lr
	...

08015cf0 <pArray>:
 8015cf0:	08015d84 	stmdaeq	r1, {r2, r7, r8, sl, fp, ip, lr}
 8015cf4:	08015d40 	stmdaeq	r1, {r6, r8, sl, fp, ip, lr}
 8015cf8:	08015c21 	stmdaeq	r1, {r0, r5, sl, fp, ip, lr}
 8015cfc:	08015d8a 	stmdaeq	r1, {r1, r3, r7, r8, sl, fp, ip, lr}
 8015d00:	08015fa3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, sl, fp, ip, lr}
 8015d04:	08015d4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, sl, fp, ip, lr}
 8015d08:	08014e37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, sl, fp, lr}
 8015d0c:	08015c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, ip, lr}
 8015d10:	08015e79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, sl, fp, ip, lr}
 8015d14:	08015e89 	stmdaeq	r1, {r0, r3, r7, r9, sl, fp, ip, lr}
 8015d18:	08015e99 	stmdaeq	r1, {r0, r3, r4, r7, r9, sl, fp, ip, lr}
 8015d1c:	08015ea9 	stmdaeq	r1, {r0, r3, r5, r7, r9, sl, fp, ip, lr}
 8015d20:	08015c55 	stmdaeq	r1, {r0, r2, r4, r6, sl, fp, ip, lr}
 8015d24:	08015f91 	stmdaeq	r1, {r0, r4, r7, r8, r9, sl, fp, ip, lr}
 8015d28:	08014e37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, sl, fp, lr}
 8015d2c:	08014e37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, sl, fp, lr}
 8015d30:	08014e37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, sl, fp, lr}
 8015d34:	08014e37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, sl, fp, lr}
 8015d38:	08015c2c 	stmdaeq	r1, {r2, r3, r5, sl, fp, ip, lr}
 8015d3c:	08015d58 	stmdaeq	r1, {r3, r4, r6, r8, sl, fp, ip, lr}

08015d40 <DisplayUdfParamsConst::BOARD_NAME>:
 8015d40:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 8015d44:	616e5f64 	cmnvs	lr, r4, ror #30
 8015d48:	 	tstvs	r0, sp, ror #10

08015d4b <DisplayUdfParamsConst::ACTIVE_PORTS>:
 8015d4b:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8015d4f:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 8015d53:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

08015d58 <DisplayUdfParamsConst::DMX_DIRECTION>:
 8015d58:	5f786d64 	svcpl	0x00786d64
 8015d5c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015d60:	6f697463 	svcvs	0x00697463
 8015d64:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

08015d66 <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 8015d66:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 8015d6a:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8015d6e:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8015809 <index_js+0x481>
 8015d72:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

08015d74 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 8015d74:	70696c66 	rsbvc	r6, r9, r6, ror #24
 8015d78:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 8015d7c:	61636974 	smcvs	13972	; 0x3694
 8015d80:	00796c6c 	rsbseq	r6, r9, ip, ror #24

08015d84 <DisplayUdfParamsConst::TITLE>:
 8015d84:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8015d88:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

08015d8a <DisplayUdfParamsConst::VERSION>:
 8015d8a:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015d8e:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08015d92 <DisplayUdfParamsConst::FILE_NAME>:
 8015d92:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015d96:	2e79616c 	rpwcsez	f6, f1, #4.0
 8015d9a:	00747874 	rsbseq	r7, r4, r4, ror r8

08015d9e <DisplayUdfParamsConst::INTENSITY>:
 8015d9e:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015da2:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8015da6:	50410079 	subpl	r0, r1, r9, ror r0
 8015daa:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015dae:	726f5000 	rsbvc	r5, pc, #0
 8015db2:	63252074 			; <UNDEFINED> instruction: 0x63252074
 8015db6:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015dba:	00732520 	rsbseq	r2, r3, r0, lsr #10
 8015dbe:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 8015dc2:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8015dc6:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 8015dca:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

08015dcf <DevicesParamsConst::SPI_SPEED_HZ>:
 8015dcf:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 8015dd3:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 8015dd7:	5f646565 	svcpl	0x00646565
 8015ddb:	 			; <UNDEFINED> instruction: 0x6c007a68

08015dde <DevicesParamsConst::GROUPING_COUNT>:
 8015dde:	5f64656c 	svcpl	0x0064656c
 8015de2:	756f7267 	strbvc	r7, [pc, #-615]!	; 8015b83 <NetworkConst::MSG_NETWORK_INIT+0xca>
 8015de6:	6f635f70 	svcvs	0x00635f70
 8015dea:	00746e75 	rsbseq	r6, r4, r5, ror lr

08015dee <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 8015dee:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 8015df2:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 8015df6:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8015dfa:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 8015dfe:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

08015e00 <DevicesParamsConst::MAP>:
 8015e00:	5f64656c 	svcpl	0x0064656c
 8015e04:	5f626772 	svcpl	0x00626772
 8015e08:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8015e0c:	00676e69 	rsbeq	r6, r7, r9, ror #28

08015e10 <DevicesParamsConst::TYPE>:
 8015e10:	5f64656c 	svcpl	0x0064656c
 8015e14:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

08015e19 <DevicesParamsConst::COUNT>:
 8015e19:	5f64656c 	svcpl	0x0064656c
 8015e1d:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8015e21:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

08015e23 <DevicesParamsConst::LED_T0H>:
 8015e23:	5f64656c 	svcpl	0x0064656c
 8015e27:	00683074 	rsbeq	r3, r8, r4, ror r0

08015e2b <DevicesParamsConst::LED_T1H>:
 8015e2b:	5f64656c 	svcpl	0x0064656c
 8015e2f:	00683174 	rsbeq	r3, r8, r4, ror r1

08015e33 <DevicesParamsConst::FILE_NAME>:
 8015e33:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8015e37:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8015e3b:	00747874 	rsbseq	r7, r4, r4, ror r8
 8015e3f:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8015e43:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8015e47:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015e4b:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015e4f:	002c2264 	eoreq	r2, ip, r4, ror #4
 8015e53:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8015e57:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015e5b:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015e5f:	0a64252e 	beq	991f31f <__exidx_end+0x1908eeb>
 8015e63:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 8015e67:	0a232073 	beq	88de03b <__exidx_end+0x8c7c07>
	...

08015e6c <LightSetParamsConst::TEST_PATTERN>:
 8015e6c:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 8015e70:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 8015e74:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

08015e79 <LightSetParamsConst::UNIVERSE_PORT>:
 8015e79:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8015e7d:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8015e81:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015e85:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8015e89:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8015e8d:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8015e91:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015e95:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8015e99:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8015e9d:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8015ea1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015ea5:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8015ea9:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8015ead:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8015eb1:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015eb5:	00645f74 	rsbeq	r5, r4, r4, ror pc

08015eb9 <LightSetParamsConst::START_UNI_PORT>:
 8015eb9:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8015ebd:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8015ec1:	6f705f69 	svcvs	0x00705f69
 8015ec5:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 8015ec9:	74730000 	ldrbtvc	r0, [r3], #-0
 8015ecd:	5f747261 	svcpl	0x00747261
 8015ed1:	5f696e75 	svcpl	0x00696e75
 8015ed5:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015ed9:	0000325f 	andeq	r3, r0, pc, asr r2
 8015edd:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8015ee1:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8015ee5:	6f705f69 	svcvs	0x00705f69
 8015ee9:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 8015eed:	74730000 	ldrbtvc	r0, [r3], #-0
 8015ef1:	5f747261 	svcpl	0x00747261
 8015ef5:	5f696e75 	svcpl	0x00696e75
 8015ef9:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015efd:	0000345f 	andeq	r3, r0, pc, asr r4
 8015f01:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8015f05:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8015f09:	6f705f69 	svcvs	0x00705f69
 8015f0d:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 8015aa3 <vtable for StoreWS28xxDmx+0xe7>
 8015f11:	74730000 	ldrbtvc	r0, [r3], #-0
 8015f15:	5f747261 	svcpl	0x00747261
 8015f19:	5f696e75 	svcpl	0x00696e75
 8015f1d:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015f21:	0000365f 	andeq	r3, r0, pc, asr r6
 8015f25:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8015f29:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8015f2d:	6f705f69 	svcvs	0x00705f69
 8015f31:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 8015f35:	74730000 	ldrbtvc	r0, [r3], #-0
 8015f39:	5f747261 	svcpl	0x00747261
 8015f3d:	5f696e75 	svcpl	0x00696e75
 8015f41:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015f45:	0000385f 	andeq	r3, r0, pc, asr r8

08015f49 <LightSetParamsConst::MERGE_MODE_PORT>:
 8015f49:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8015f4d:	6f6d5f65 	svcvs	0x006d5f65
 8015f51:	705f6564 	subsvc	r6, pc, r4, ror #10
 8015f55:	5f74726f 	svcpl	0x0074726f
 8015f59:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 8015f5d:	5f656772 	svcpl	0x00656772
 8015f61:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8015f65:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015f69:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8015f6d:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8015f71:	6f6d5f65 	svcvs	0x006d5f65
 8015f75:	705f6564 	subsvc	r6, pc, r4, ror #10
 8015f79:	5f74726f 	svcpl	0x0074726f
 8015f7d:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 8015f81:	5f656772 	svcpl	0x00656772
 8015f85:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8015f89:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015f8d:	00645f74 	rsbeq	r5, r4, r4, ror pc

08015f91 <LightSetParamsConst::DMX_START_ADDRESS>:
 8015f91:	5f786d64 	svcpl	0x00786d64
 8015f95:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8015f99:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8015f9d:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 8015fa1:	 	mrcvs	0, 3, r0, cr5, cr3, {3}

08015fa3 <LightSetParamsConst::UNIVERSE>:
 8015fa3:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8015fa7:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

08015fac <LightSetParamsConst::DIRECTION>:
 8015fac:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015fb0:	6f697463 	svcvs	0x00697463
 8015fb4:	6f705f6e 	svcvs	0x00705f6e
 8015fb8:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 8015fbc:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8015fc0:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8015fc4:	5f6e6f69 	svcpl	0x006e6f69
 8015fc8:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015fcc:	0000625f 	andeq	r6, r0, pc, asr r2
 8015fd0:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015fd4:	6f697463 	svcvs	0x00697463
 8015fd8:	6f705f6e 	svcvs	0x00705f6e
 8015fdc:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 8015fe0:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8015fe4:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8015fe8:	5f6e6f69 	svcpl	0x006e6f69
 8015fec:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015ff0:	0000645f 	andeq	r6, r0, pc, asr r4
 8015ff4:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8015ff8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8015ffc:	66207961 	strtvs	r7, [r0], -r1, ror #18
 8016000:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8016004:	31485300 	mrscc	r5, (UNDEF: 120)
 8016008:	00363031 	eorseq	r3, r6, r1, lsr r0
 801600c:	31445353 	cmpcc	r4, r3, asr r3
 8016010:	00363033 	eorseq	r3, r6, r3, lsr r0
 8016014:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 8016018:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 801601c:	000a2964 	andeq	r2, sl, r4, ror #18
 8016020:	aaeeaa40 	bge	7bc0928 <__stack_size+0x7bbf128>
 8016024:	000000ee 	andeq	r0, r0, lr, ror #1

08016028 <_OledFont8x6>:
 8016028:	00000040 	andeq	r0, r0, r0, asr #32
 801602c:	40000000 	andmi	r0, r0, r0
 8016030:	005f0000 	subseq	r0, pc, r0
 8016034:	00400000 	subeq	r0, r0, r0
 8016038:	00070007 	andeq	r0, r7, r7
 801603c:	7f144000 	svcvc	0x00144000
 8016040:	00147f14 	andseq	r7, r4, r4, lsl pc
 8016044:	7f2a2440 	svcvc	0x002a2440
 8016048:	4000122a 	andmi	r1, r0, sl, lsr #4
 801604c:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8016050:	36400062 	strbcc	r0, [r0], -r2, rrx
 8016054:	50205649 	eorpl	r5, r0, r9, asr #12
 8016058:	08004000 	stmdaeq	r0, {lr}
 801605c:	00000307 	andeq	r0, r0, r7, lsl #6
 8016060:	221c0040 	andscs	r0, ip, #64	; 0x40
 8016064:	40000041 	andmi	r0, r0, r1, asr #32
 8016068:	1c224100 	stfnes	f4, [r2], #-0
 801606c:	2a400000 	bcs	9016074 <__exidx_end+0xfffc40>
 8016070:	2a1c7f1c 	bcs	8735ce8 <__exidx_end+0x71f8b4>
 8016074:	08084000 	stmdaeq	r8, {lr}
 8016078:	0008083e 	andeq	r0, r8, lr, lsr r8
 801607c:	70800040 	addvc	r0, r0, r0, asr #32
 8016080:	40000030 	andmi	r0, r0, r0, lsr r0
 8016084:	08080808 	stmdaeq	r8, {r3, fp}
 8016088:	00400008 	subeq	r0, r0, r8
 801608c:	00606000 	rsbeq	r6, r0, r0
 8016090:	10204000 	eorne	r4, r0, r0
 8016094:	00020408 	andeq	r0, r2, r8, lsl #8
 8016098:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 801609c:	40003e45 	andmi	r3, r0, r5, asr #28
 80160a0:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 80160a4:	72400000 	subvc	r0, r0, #0
 80160a8:	46494949 	strbmi	r4, [r9], -r9, asr #18
 80160ac:	41214000 			; <UNDEFINED> instruction: 0x41214000
 80160b0:	00334d49 	eorseq	r4, r3, r9, asr #26
 80160b4:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 80160b8:	4000107f 	andmi	r1, r0, pc, ror r0
 80160bc:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 80160c0:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 80160c4:	3149494a 	cmpcc	r9, sl, asr #18
 80160c8:	21414000 	mrscs	r4, (UNDEF: 65)
 80160cc:	00070911 	andeq	r0, r7, r1, lsl r9
 80160d0:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 80160d4:	40003649 	andmi	r3, r0, r9, asr #12
 80160d8:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 80160dc:	0040001e 	subeq	r0, r0, lr, lsl r0
 80160e0:	00001400 	andeq	r1, r0, r0, lsl #8
 80160e4:	40004000 	andmi	r4, r0, r0
 80160e8:	00000034 	andeq	r0, r0, r4, lsr r0
 80160ec:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 80160f0:	40004122 	andmi	r4, r0, r2, lsr #2
 80160f4:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 80160f8:	00400014 	subeq	r0, r0, r4, lsl r0
 80160fc:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 8016100:	01024000 	mrseq	r4, (UNDEF: 2)
 8016104:	00060959 	andeq	r0, r6, r9, asr r9
 8016108:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 801610c:	40004e59 	andmi	r4, r0, r9, asr lr
 8016110:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8016114:	7f40007c 	svcvc	0x0040007c
 8016118:	36494949 	strbcc	r4, [r9], -r9, asr #18
 801611c:	413e4000 	teqmi	lr, r0
 8016120:	00224141 	eoreq	r4, r2, r1, asr #2
 8016124:	41417f40 	cmpmi	r1, r0, asr #30
 8016128:	40003e41 	andmi	r3, r0, r1, asr #28
 801612c:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8016130:	7f400041 	svcvc	0x00400041
 8016134:	01090909 	tsteq	r9, r9, lsl #18
 8016138:	413e4000 	teqmi	lr, r0
 801613c:	00735141 	rsbseq	r5, r3, r1, asr #2
 8016140:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8016144:	40007f08 	andmi	r7, r0, r8, lsl #30
 8016148:	417f4100 	cmnmi	pc, r0, lsl #2
 801614c:	20400000 	subcs	r0, r0, r0
 8016150:	013f4140 	teqeq	pc, r0, asr #2
 8016154:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8016158:	00412214 	subeq	r2, r1, r4, lsl r2
 801615c:	40407f40 	submi	r7, r0, r0, asr #30
 8016160:	40004040 	andmi	r4, r0, r0, asr #32
 8016164:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 8016168:	7f40007f 	svcvc	0x0040007f
 801616c:	7f100804 	svcvc	0x00100804
 8016170:	413e4000 	teqmi	lr, r0
 8016174:	003e4141 	eorseq	r4, lr, r1, asr #2
 8016178:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 801617c:	40000609 	andmi	r0, r0, r9, lsl #12
 8016180:	2151413e 	cmpcs	r1, lr, lsr r1
 8016184:	7f40005e 	svcvc	0x0040005e
 8016188:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 801618c:	49264000 	stmdbmi	r6!, {lr}
 8016190:	00324949 	eorseq	r4, r2, r9, asr #18
 8016194:	7f010340 	svcvc	0x00010340
 8016198:	40000301 	andmi	r0, r0, r1, lsl #6
 801619c:	4040403f 	submi	r4, r0, pc, lsr r0
 80161a0:	1f40003f 	svcne	0x0040003f
 80161a4:	1f204020 	svcne	0x00204020
 80161a8:	403f4000 	eorsmi	r4, pc, r0
 80161ac:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 80161b0:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 80161b4:	40006314 	andmi	r6, r0, r4, lsl r3
 80161b8:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 80161bc:	61400003 	cmpvs	r0, r3
 80161c0:	434d4959 	movtmi	r4, #55641	; 0xd959
 80161c4:	7f004000 	svcvc	0x00004000
 80161c8:	00414141 	subeq	r4, r1, r1, asr #2
 80161cc:	08040240 	stmdaeq	r4, {r6, r9}
 80161d0:	40002010 	andmi	r2, r0, r0, lsl r0
 80161d4:	41414100 	mrsmi	r4, (UNDEF: 81)
 80161d8:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 80161dc:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 80161e0:	40404000 	submi	r4, r0, r0
 80161e4:	00404040 	subeq	r4, r0, r0, asr #32
 80161e8:	07030040 	streq	r0, [r3, -r0, asr #32]
 80161ec:	40000008 	andmi	r0, r0, r8
 80161f0:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 80161f4:	7f400040 	svcvc	0x00400040
 80161f8:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 80161fc:	44384000 	ldrtmi	r4, [r8], #-0
 8016200:	00284444 	eoreq	r4, r8, r4, asr #8
 8016204:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 8016208:	40007f28 	andmi	r7, r0, r8, lsr #30
 801620c:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 8016210:	00400018 	subeq	r0, r0, r8, lsl r0
 8016214:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 8016218:	a4184000 	ldrge	r4, [r8], #-0
 801621c:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 8016220:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8016224:	40007804 	andmi	r7, r0, r4, lsl #16
 8016228:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 801622c:	20400000 	subcs	r0, r0, r0
 8016230:	003d4040 	eorseq	r4, sp, r0, asr #32
 8016234:	107f4000 	rsbsne	r4, pc, r0
 8016238:	00004428 	andeq	r4, r0, r8, lsr #8
 801623c:	7f410040 	svcvc	0x00410040
 8016240:	40000040 	andmi	r0, r0, r0, asr #32
 8016244:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 8016248:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 801624c:	78040408 	stmdavc	r4, {r3, sl}
 8016250:	44384000 	ldrtmi	r4, [r8], #-0
 8016254:	00384444 	eorseq	r4, r8, r4, asr #8
 8016258:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 801625c:	40001824 	andmi	r1, r0, r4, lsr #16
 8016260:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8016264:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 8016268:	08040408 	stmdaeq	r4, {r3, sl}
 801626c:	54484000 	strbpl	r4, [r8], #-0
 8016270:	00245454 	eoreq	r5, r4, r4, asr r4
 8016274:	3f040440 	svccc	0x00040440
 8016278:	40002444 	andmi	r2, r0, r4, asr #8
 801627c:	2040403c 	subcs	r4, r0, ip, lsr r0
 8016280:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8016284:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 8016288:	403c4000 	eorsmi	r4, ip, r0
 801628c:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8016290:	10284440 	eorne	r4, r8, r0, asr #8
 8016294:	40004428 	andmi	r4, r0, r8, lsr #8
 8016298:	9090904c 	addsls	r9, r0, ip, asr #32
 801629c:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 80162a0:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 80162a4:	08004000 	stmdaeq	r0, {lr}
 80162a8:	00004136 	andeq	r4, r0, r6, lsr r1
 80162ac:	77000040 	strvc	r0, [r0, -r0, asr #32]
 80162b0:	40000000 	andmi	r0, r0, r0
 80162b4:	08364100 	ldmdaeq	r6!, {r8, lr}
 80162b8:	02400000 	subeq	r0, r0, #0
 80162bc:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 80162c0:	263c4000 	ldrtcs	r4, [ip], -r0
 80162c4:	003c2623 	eorseq	r2, ip, r3, lsr #12

080162c8 <oled_128x32_init>:
 80162c8:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80162cc:	4000d31f 	andmi	sp, r0, pc, lsl r3
 80162d0:	0020148d 	eoreq	r1, r0, sp, lsl #9
 80162d4:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 80162d8:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 80162dc:	a6a440db 	ssatge	r4, #5, fp, asr #1

080162e0 <oled_128x64_init>:
 80162e0:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80162e4:	4000d33f 	andmi	sp, r0, pc, lsr r3
 80162e8:	0020148d 	eoreq	r1, r0, sp, lsl #9
 80162ec:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 80162f0:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 80162f4:	a6a440db 	ssatge	r4, #5, fp, asr #1

080162f8 <vtable for Ssd1306>:
	...
 8016300:	08011881 	stmdaeq	r1, {r0, r7, fp, ip}
 8016304:	080118ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, fp, ip}
 8016308:	08011bbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, fp, ip}
 801630c:	08011b45 	stmdaeq	r1, {r0, r2, r6, r8, r9, fp, ip}
 8016310:	08011a11 	stmdaeq	r1, {r0, r4, r9, fp, ip}
 8016314:	080118cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, fp, ip}
 8016318:	080118f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, fp, ip}
 801631c:	080119e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, fp, ip}
 8016320:	080119a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, ip}
 8016324:	08011883 	stmdaeq	r1, {r0, r1, r7, fp, ip}
 8016328:	08011a4d 	stmdaeq	r1, {r0, r2, r3, r6, r9, fp, ip}
 801632c:	08011a59 	stmdaeq	r1, {r0, r3, r4, r6, r9, fp, ip}
 8016330:	08011a73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r9, fp, ip}
 8016334:	08011885 	stmdaeq	r1, {r0, r2, r7, fp, ip}
 8016338:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 801633c:	5b1b006d 	blpl	86d64f8 <__exidx_end+0x6c00c4>
 8016340:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8016344:	31335b1b 	teqcc	r3, fp, lsl fp
 8016348:	5b1b006d 	blpl	86d6504 <__exidx_end+0x6c00d0>
 801634c:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8016350:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8016354:	5b1b006d 	blpl	86d6510 <__exidx_end+0x6c00dc>
 8016358:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 801635c:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 8016360:	205d732a 	subscs	r7, sp, sl, lsr #6
 8016364:	43207325 			; <UNDEFINED> instruction: 0x43207325
 8016368:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 801636c:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8016370:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8016374:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 8016378:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 801637c:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 8016380:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8016384:	203a636f 	eorscs	r6, sl, pc, ror #6
 8016388:	000a7525 	andeq	r7, sl, r5, lsr #10
 801638c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8016390:	203a636f 	eorscs	r6, sl, pc, ror #6
 8016394:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 8016398:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 801639c:	6b636f6c 	blvs	98f2154 <__exidx_end+0x18dbd20>
 80163a0:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 80163a4:	000a7469 	andeq	r7, sl, r9, ror #8
 80163a8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80163ac:	203a636f 	eorscs	r6, sl, pc, ror #6
 80163b0:	6f6c4270 	svcvs	0x006c4270
 80163b4:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 80163b8:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 80163bc:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 80163c0:	7a697320 	bvc	9a73048 <__exidx_end+0x1a5cc14>
 80163c4:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 80163c8:	6164202c 	cmnvs	r4, ip, lsr #32
 80163cc:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 80163d0:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 80163d4:	3a656572 	bcc	996f9a4 <__exidx_end+0x1959570>
 80163d8:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 80163dc:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80163e0:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 80163e4:	203d2072 	eorscs	r2, sp, r2, ror r0
 80163e8:	202c7025 	eorcs	r7, ip, r5, lsr #32
 80163ec:	6f6c4270 	svcvs	0x006c4270
 80163f0:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 80163f4:	0a702520 	beq	9c1f87c <__exidx_end+0x1c09448>
 80163f8:	00000000 	andeq	r0, r0, r0

080163fc <days_of_month>:
 80163fc:	0000001f 	andeq	r0, r0, pc, lsl r0
 8016400:	0000001c 	andeq	r0, r0, ip, lsl r0
 8016404:	0000001f 	andeq	r0, r0, pc, lsl r0
 8016408:	0000001e 	andeq	r0, r0, lr, lsl r0
 801640c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8016410:	0000001e 	andeq	r0, r0, lr, lsl r0
 8016414:	0000001f 	andeq	r0, r0, pc, lsl r0
 8016418:	0000001f 	andeq	r0, r0, pc, lsl r0
 801641c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8016420:	0000001f 	andeq	r0, r0, pc, lsl r0
 8016424:	0000001e 	andeq	r0, r0, lr, lsl r0
 8016428:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

0801642c <__exidx_start>:
 801642c:	7fff2ea0 	svcvc	0x00ff2ea0
 8016430:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08016434 <.ARM.attributes>:
 8016434:	00002e41 	andeq	r2, r0, r1, asr #28
 8016438:	61656100 	cmnvs	r5, r0, lsl #2
 801643c:	01006962 	tsteq	r0, r2, ror #18
 8016440:	00000024 	andeq	r0, r0, r4, lsr #32
 8016444:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 8016448:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 801644c:	0600334d 	streq	r3, [r0], -sp, asr #6
 8016450:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8016454:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 8016458:	17011501 	strne	r1, [r1, -r1, lsl #10]
 801645c:	1a011803 	bne	805c470 <__exidx_end+0x4603c>
 8016460:	Address 0x0000000008016460 is out of bounds.


Disassembly of section .data:

20000000 <s_multicast_mac>:
20000000:	005e0001 	subseq	r0, lr, r1
20000004:	00000000 	andeq	r0, r0, r0

20000008 <MDNS::s_nHandle>:
20000008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000000c <next_block>:
2000000c:	20016000 	andcs	r6, r1, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <outptr>:
200000e8:	00000000 	andeq	r0, r0, r0

200000ec <guard variable for lightset::Data::Get()::instance>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <lightset::Data::Get()::instance>:
	...

20001900 <E131Bridge::s_pThis>:
20001900:	00000000 	andeq	r0, r0, r0

20001904 <s_ReceivingMask>:
20001904:	00000000 	andeq	r0, r0, r0

20001908 <WS28xxDmx::s_pThis>:
20001908:	00000000 	andeq	r0, r0, r0

2000190c <PixelPatterns::m_PortConfig>:
	...

2000192c <PixelPatterns::m_nActivePorts>:
2000192c:	00000000 	andeq	r0, r0, r0

20001930 <PixelPatterns::m_pScannerColours>:
20001930:	00000000 	andeq	r0, r0, r0

20001934 <PixelPatterns::m_nCount>:
20001934:	00000000 	andeq	r0, r0, r0

20001938 <PixelPatterns::m_pOutput>:
20001938:	00000000 	andeq	r0, r0, r0

2000193c <PixelTestPattern::s_Pattern>:
2000193c:	00000000 	andeq	r0, r0, r0

20001940 <s_tmp>:
20001940:	00000000 	andeq	r0, r0, r0

20001944 <WS28xx::s_pThis>:
20001944:	00000000 	andeq	r0, r0, r0

20001948 <RemoteConfig::s_pUdpBuffer>:
20001948:	00000000 	andeq	r0, r0, r0

2000194c <RemoteConfig::s_RemoteConfigListBin>:
	...

20001970 <RemoteConfig::s_pThis>:
20001970:	00000000 	andeq	r0, r0, r0

20001974 <SpiFlashStore::s_nWaitMillis>:
20001974:	00000000 	andeq	r0, r0, r0

20001978 <SpiFlashStore::s_SpiFlashData>:
	...

20002978 <SpiFlashStore::s_nStartAddress>:
20002978:	00000000 	andeq	r0, r0, r0

2000297c <SpiFlashStore::s_bHaveFlashChip>:
2000297c:	00000000 	andeq	r0, r0, r0

20002980 <SpiFlashStore::s_nSpiFlashStoreSize>:
20002980:	00000000 	andeq	r0, r0, r0

20002984 <SpiFlashStore::s_State>:
20002984:	00000000 	andeq	r0, r0, r0

20002988 <SpiFlashStore::s_pThis>:
20002988:	00000000 	andeq	r0, r0, r0

2000298c <SpiFlashStore::s_bIsNew>:
2000298c:	00000000 	andeq	r0, r0, r0

20002990 <StoreDisplayUdf::s_pThis>:
20002990:	00000000 	andeq	r0, r0, r0

20002994 <StoreE131::s_pThis>:
20002994:	00000000 	andeq	r0, r0, r0

20002998 <StoreNetwork::s_pThis>:
20002998:	00000000 	andeq	r0, r0, r0

2000299c <StoreRemoteConfig::s_pThis>:
2000299c:	00000000 	andeq	r0, r0, r0

200029a0 <StoreWS28xxDmx::s_pThis>:
200029a0:	00000000 	andeq	r0, r0, r0

200029a4 <FlashRom::s_pThis>:
200029a4:	00000000 	andeq	r0, r0, r0

200029a8 <flashrom::s_nAddress>:
200029a8:	00000000 	andeq	r0, r0, r0

200029ac <flashrom::s_State>:
200029ac:	00000000 	andeq	r0, r0, r0

200029b0 <flashrom::s_nPage>:
200029b0:	00000000 	andeq	r0, r0, r0

200029b4 <flashrom::s_pData>:
200029b4:	00000000 	andeq	r0, r0, r0

200029b8 <flashrom::s_isBank0>:
200029b8:	00000000 	andeq	r0, r0, r0

200029bc <flashrom::s_nLength>:
200029bc:	00000000 	andeq	r0, r0, r0

200029c0 <g_ip_info>:
	...

200029cc <g_mac_address>:
200029cc:	00000000 	andeq	r0, r0, r0
	...

200029d2 <s_is_dhcp>:
	...

200029d4 <s_p>:
200029d4:	00000000 	andeq	r0, r0, r0

200029d8 <s_ticker>:
200029d8:	00000000 	andeq	r0, r0, r0

200029dc <s_mac_address>:
	...

200029e4 <s_mac_address_arp_reply>:
	...

200029ec <s_id>:
200029ec:	00000000 	andeq	r0, r0, r0

200029f0 <s_recv_queue>:
	...

20003560 <s_tcb>:
	...

200035a4 <s_tcp>:
	...

20003b90 <broadcast_mask>:
20003b90:	00000000 	andeq	r0, r0, r0

20003b94 <gw_ip>:
20003b94:	00000000 	andeq	r0, r0, r0

20003b98 <on_network_mask>:
20003b98:	00000000 	andeq	r0, r0, r0

20003b9c <s_id>:
20003b9c:	00000000 	andeq	r0, r0, r0

20003ba0 <s_ports_allowed>:
	...

20003bc0 <s_recv_queue>:
	...

20009860 <s_send_packet>:
	...

20009e4c <MDNS::s_nRemoteIp>:
20009e4c:	00000000 	andeq	r0, r0, r0

20009e50 <MDNS::s_nRemotePort>:
20009e50:	00000000 	andeq	r0, r0, r0

20009e54 <MDNS::s_nMulticastIp>:
20009e54:	00000000 	andeq	r0, r0, r0

20009e58 <MDNS::s_AnswerLocalIp>:
	...

2000a05c <MDNS::s_ServiceRecords>:
	...

2000a07c <MDNS::s_nBytesReceived>:
2000a07c:	00000000 	andeq	r0, r0, r0

2000a080 <MDNS::s_ServiceRecordsData>:
	...

2000a284 <MDNS::s_pName>:
2000a284:	00000000 	andeq	r0, r0, r0

2000a288 <MDNS::s_pBuffer>:
2000a288:	00000000 	andeq	r0, r0, r0

2000a28c <Network::s_pThis>:
2000a28c:	00000000 	andeq	r0, r0, r0

2000a290 <NetworkParams::m_tNetworkParams>:
	...

2000a2f0 <s_arp_announce>:
	...

2000a31c <s_arp_reply>:
	...

2000a348 <s_arp_request>:
	...

2000a374 <s_arp_records>:
	...

2000a4f4 <s_entry_current>:
2000a4f4:	00000000 	andeq	r0, r0, r0

2000a4f8 <s_dhcp_allocated_gw>:
2000a4f8:	00000000 	andeq	r0, r0, r0

2000a4fc <s_dhcp_allocated_ip>:
2000a4fc:	00000000 	andeq	r0, r0, r0

2000a500 <s_dhcp_allocated_netmask>:
2000a500:	00000000 	andeq	r0, r0, r0

2000a504 <s_dhcp_message>:
	...

2000a728 <s_dhcp_server_ip>:
2000a728:	00000000 	andeq	r0, r0, r0

2000a72c <s_groups>:
	...

2000a84c <s_id>:
2000a84c:	00000000 	andeq	r0, r0, r0

2000a850 <s_joins_allowed_index>:
2000a850:	00000000 	andeq	r0, r0, r0

2000a854 <s_leave>:
	...

2000a884 <s_multicast_mac>:
	...

2000a88c <s_report>:
	...

2000a8bc <DisplayUdf::s_pThis>:
2000a8bc:	00000000 	andeq	r0, r0, r0

2000a8c0 <PropertiesConfig::s_Config>:
2000a8c0:	00000000 	andeq	r0, r0, r0

2000a8c4 <Display::s_pThis>:
2000a8c4:	00000000 	andeq	r0, r0, r0

2000a8c8 <_ClearBuffer>:
	...

2000a950 <Ssd1306::s_pThis>:
2000a950:	00000000 	andeq	r0, r0, r0

2000a954 <FirmwareVersion::s_FirmwareVersion>:
	...

2000a96a <FirmwareVersion::s_Print>:
	...

2000a9ac <FirmwareVersion::s_pThis>:
2000a9ac:	00000000 	andeq	r0, r0, r0

2000a9b0 <LedBlink::s_pThis>:
2000a9b0:	00000000 	andeq	r0, r0, r0

2000a9b4 <Hardware::s_pThis>:
2000a9b4:	00000000 	andeq	r0, r0, r0

2000a9b8 <last.0>:
	...

2000a9c0 <s_micros>:
	...

2000a9c8 <set_timer>:
2000a9c8:	00000000 	andeq	r0, r0, r0

2000a9cc <s_nSysTickMillis>:
2000a9cc:	00000000 	andeq	r0, r0, r0

2000a9d0 <enet_init_status>:
2000a9d0:	00000000 	andeq	r0, r0, r0

2000a9d4 <s_nAddress>:
2000a9d4:	00000000 	andeq	r0, r0, r0

2000a9d8 <s_TxBuffer>:
	...

200109d8 <dma_current_ptp_rxdesc>:
200109d8:	00000000 	andeq	r0, r0, r0

200109dc <dma_current_ptp_txdesc>:
200109dc:	00000000 	andeq	r0, r0, r0

200109e0 <dma_current_rxdesc>:
200109e0:	00000000 	andeq	r0, r0, r0

200109e4 <dma_current_txdesc>:
200109e4:	00000000 	andeq	r0, r0, r0

200109e8 <enet_initpara>:
	...

20010a24 <rx_buff>:
	...

200139c4 <rxdesc_tab>:
	...

20013a44 <tx_buff>:
	...

2001462c <txdesc_tab>:
	...

Disassembly of section .heap:

20016000 <heap_low>:
	...

Disassembly of section .stack:

20016800 <_sp-0x1800>:
	...
