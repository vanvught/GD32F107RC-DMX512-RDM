
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	08007e8d 	stmdaeq	r0, {r0, r2, r3, r7, r9, sl, fp, ip, sp, lr}
 8007008:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800700c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007010:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007014:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007018:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
	...
 800702c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007030:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800703c:	08012349 	stmdaeq	r1, {r0, r3, r6, r8, r9, sp}
 8007040:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007044:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007048:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800704c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007050:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007054:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007058:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800705c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007060:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007064:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007068:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800706c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007070:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007074:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007078:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800707c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007080:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007084:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007088:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800708c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007090:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007094:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007098:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800709c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070a0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070a4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070a8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070ac:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070b0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070b4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070b8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070bc:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070c0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070c4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070c8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070cc:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070d0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070d4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070d8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070dc:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070e0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070e4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070e8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070ec:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070f0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070f4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
	...
 8007100:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800710c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007110:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007114:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007118:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800711c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007120:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007124:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007128:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800712c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007130:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007134:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007138:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800713c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007140:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007144:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007148:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800714c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}

Disassembly of section .text:

08007150 <__aeabi_d2f>:
 8007150:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007154:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007158:	bf24      	itt	cs
 800715a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800715e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007162:	d90d      	bls.n	8007180 <__aeabi_d2f+0x30>
 8007164:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007168:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800716c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007170:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007174:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007178:	bf08      	it	eq
 800717a:	f020 0001 	biceq.w	r0, r0, #1
 800717e:	4770      	bx	lr
 8007180:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007184:	d121      	bne.n	80071ca <__aeabi_d2f+0x7a>
 8007186:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800718a:	bfbc      	itt	lt
 800718c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007190:	4770      	bxlt	lr
 8007192:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007196:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800719a:	f1c2 0218 	rsb	r2, r2, #24
 800719e:	f1c2 0c20 	rsb	ip, r2, #32
 80071a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80071a6:	fa20 f002 	lsr.w	r0, r0, r2
 80071aa:	bf18      	it	ne
 80071ac:	f040 0001 	orrne.w	r0, r0, #1
 80071b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80071b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80071b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80071bc:	ea40 000c 	orr.w	r0, r0, ip
 80071c0:	fa23 f302 	lsr.w	r3, r3, r2
 80071c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071c8:	e7cc      	b.n	8007164 <__aeabi_d2f+0x14>
 80071ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80071ce:	d107      	bne.n	80071e0 <__aeabi_d2f+0x90>
 80071d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80071d4:	bf1e      	ittt	ne
 80071d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80071da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80071de:	4770      	bxne	lr
 80071e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80071e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80071e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop

080071f0 <__aeabi_frsub>:
 80071f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80071f4:	e002      	b.n	80071fc <__addsf3>
 80071f6:	bf00      	nop

080071f8 <__aeabi_fsub>:
 80071f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080071fc <__addsf3>:
 80071fc:	0042      	lsls	r2, r0, #1
 80071fe:	bf1f      	itttt	ne
 8007200:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8007204:	ea92 0f03 	teqne	r2, r3
 8007208:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800720c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007210:	d06a      	beq.n	80072e8 <__addsf3+0xec>
 8007212:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8007216:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800721a:	bfc1      	itttt	gt
 800721c:	18d2      	addgt	r2, r2, r3
 800721e:	4041      	eorgt	r1, r0
 8007220:	4048      	eorgt	r0, r1
 8007222:	4041      	eorgt	r1, r0
 8007224:	bfb8      	it	lt
 8007226:	425b      	neglt	r3, r3
 8007228:	2b19      	cmp	r3, #25
 800722a:	bf88      	it	hi
 800722c:	4770      	bxhi	lr
 800722e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007232:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007236:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800723a:	bf18      	it	ne
 800723c:	4240      	negne	r0, r0
 800723e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007242:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007246:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800724a:	bf18      	it	ne
 800724c:	4249      	negne	r1, r1
 800724e:	ea92 0f03 	teq	r2, r3
 8007252:	d03f      	beq.n	80072d4 <__addsf3+0xd8>
 8007254:	f1a2 0201 	sub.w	r2, r2, #1
 8007258:	fa41 fc03 	asr.w	ip, r1, r3
 800725c:	eb10 000c 	adds.w	r0, r0, ip
 8007260:	f1c3 0320 	rsb	r3, r3, #32
 8007264:	fa01 f103 	lsl.w	r1, r1, r3
 8007268:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800726c:	d502      	bpl.n	8007274 <__addsf3+0x78>
 800726e:	4249      	negs	r1, r1
 8007270:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8007274:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007278:	d313      	bcc.n	80072a2 <__addsf3+0xa6>
 800727a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800727e:	d306      	bcc.n	800728e <__addsf3+0x92>
 8007280:	0840      	lsrs	r0, r0, #1
 8007282:	ea4f 0131 	mov.w	r1, r1, rrx
 8007286:	f102 0201 	add.w	r2, r2, #1
 800728a:	2afe      	cmp	r2, #254	; 0xfe
 800728c:	d251      	bcs.n	8007332 <__addsf3+0x136>
 800728e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8007292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007296:	bf08      	it	eq
 8007298:	f020 0001 	biceq.w	r0, r0, #1
 800729c:	ea40 0003 	orr.w	r0, r0, r3
 80072a0:	4770      	bx	lr
 80072a2:	0049      	lsls	r1, r1, #1
 80072a4:	eb40 0000 	adc.w	r0, r0, r0
 80072a8:	3a01      	subs	r2, #1
 80072aa:	bf28      	it	cs
 80072ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80072b0:	d2ed      	bcs.n	800728e <__addsf3+0x92>
 80072b2:	fab0 fc80 	clz	ip, r0
 80072b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80072ba:	ebb2 020c 	subs.w	r2, r2, ip
 80072be:	fa00 f00c 	lsl.w	r0, r0, ip
 80072c2:	bfaa      	itet	ge
 80072c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80072c8:	4252      	neglt	r2, r2
 80072ca:	4318      	orrge	r0, r3
 80072cc:	bfbc      	itt	lt
 80072ce:	40d0      	lsrlt	r0, r2
 80072d0:	4318      	orrlt	r0, r3
 80072d2:	4770      	bx	lr
 80072d4:	f092 0f00 	teq	r2, #0
 80072d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80072dc:	bf06      	itte	eq
 80072de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80072e2:	3201      	addeq	r2, #1
 80072e4:	3b01      	subne	r3, #1
 80072e6:	e7b5      	b.n	8007254 <__addsf3+0x58>
 80072e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80072ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80072f0:	bf18      	it	ne
 80072f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80072f6:	d021      	beq.n	800733c <__addsf3+0x140>
 80072f8:	ea92 0f03 	teq	r2, r3
 80072fc:	d004      	beq.n	8007308 <__addsf3+0x10c>
 80072fe:	f092 0f00 	teq	r2, #0
 8007302:	bf08      	it	eq
 8007304:	4608      	moveq	r0, r1
 8007306:	4770      	bx	lr
 8007308:	ea90 0f01 	teq	r0, r1
 800730c:	bf1c      	itt	ne
 800730e:	2000      	movne	r0, #0
 8007310:	4770      	bxne	lr
 8007312:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8007316:	d104      	bne.n	8007322 <__addsf3+0x126>
 8007318:	0040      	lsls	r0, r0, #1
 800731a:	bf28      	it	cs
 800731c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007320:	4770      	bx	lr
 8007322:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8007326:	bf3c      	itt	cc
 8007328:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800732c:	4770      	bxcc	lr
 800732e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007332:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8007336:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800733a:	4770      	bx	lr
 800733c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8007340:	bf16      	itet	ne
 8007342:	4608      	movne	r0, r1
 8007344:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8007348:	4601      	movne	r1, r0
 800734a:	0242      	lsls	r2, r0, #9
 800734c:	bf06      	itte	eq
 800734e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8007352:	ea90 0f01 	teqeq	r0, r1
 8007356:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800735a:	4770      	bx	lr

0800735c <__aeabi_ui2f>:
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	e004      	b.n	800736c <__aeabi_i2f+0x8>
 8007362:	bf00      	nop

08007364 <__aeabi_i2f>:
 8007364:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8007368:	bf48      	it	mi
 800736a:	4240      	negmi	r0, r0
 800736c:	ea5f 0c00 	movs.w	ip, r0
 8007370:	bf08      	it	eq
 8007372:	4770      	bxeq	lr
 8007374:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8007378:	4601      	mov	r1, r0
 800737a:	f04f 0000 	mov.w	r0, #0
 800737e:	e01c      	b.n	80073ba <__aeabi_l2f+0x2a>

08007380 <__aeabi_ul2f>:
 8007380:	ea50 0201 	orrs.w	r2, r0, r1
 8007384:	bf08      	it	eq
 8007386:	4770      	bxeq	lr
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	e00a      	b.n	80073a4 <__aeabi_l2f+0x14>
 800738e:	bf00      	nop

08007390 <__aeabi_l2f>:
 8007390:	ea50 0201 	orrs.w	r2, r0, r1
 8007394:	bf08      	it	eq
 8007396:	4770      	bxeq	lr
 8007398:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800739c:	d502      	bpl.n	80073a4 <__aeabi_l2f+0x14>
 800739e:	4240      	negs	r0, r0
 80073a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80073a4:	ea5f 0c01 	movs.w	ip, r1
 80073a8:	bf02      	ittt	eq
 80073aa:	4684      	moveq	ip, r0
 80073ac:	4601      	moveq	r1, r0
 80073ae:	2000      	moveq	r0, #0
 80073b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80073b4:	bf08      	it	eq
 80073b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80073ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80073be:	fabc f28c 	clz	r2, ip
 80073c2:	3a08      	subs	r2, #8
 80073c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80073c8:	db10      	blt.n	80073ec <__aeabi_l2f+0x5c>
 80073ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80073ce:	4463      	add	r3, ip
 80073d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80073d4:	f1c2 0220 	rsb	r2, r2, #32
 80073d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80073dc:	fa20 f202 	lsr.w	r2, r0, r2
 80073e0:	eb43 0002 	adc.w	r0, r3, r2
 80073e4:	bf08      	it	eq
 80073e6:	f020 0001 	biceq.w	r0, r0, #1
 80073ea:	4770      	bx	lr
 80073ec:	f102 0220 	add.w	r2, r2, #32
 80073f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80073f4:	f1c2 0220 	rsb	r2, r2, #32
 80073f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80073fc:	fa21 f202 	lsr.w	r2, r1, r2
 8007400:	eb43 0002 	adc.w	r0, r3, r2
 8007404:	bf08      	it	eq
 8007406:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800740a:	4770      	bx	lr

0800740c <__gesf2>:
 800740c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007410:	e006      	b.n	8007420 <__cmpsf2+0x4>
 8007412:	bf00      	nop

08007414 <__lesf2>:
 8007414:	f04f 0c01 	mov.w	ip, #1
 8007418:	e002      	b.n	8007420 <__cmpsf2+0x4>
 800741a:	bf00      	nop

0800741c <__cmpsf2>:
 800741c:	f04f 0c01 	mov.w	ip, #1
 8007420:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007424:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007428:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800742c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007430:	bf18      	it	ne
 8007432:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007436:	d011      	beq.n	800745c <__cmpsf2+0x40>
 8007438:	b001      	add	sp, #4
 800743a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800743e:	bf18      	it	ne
 8007440:	ea90 0f01 	teqne	r0, r1
 8007444:	bf58      	it	pl
 8007446:	ebb2 0003 	subspl.w	r0, r2, r3
 800744a:	bf88      	it	hi
 800744c:	17c8      	asrhi	r0, r1, #31
 800744e:	bf38      	it	cc
 8007450:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007454:	bf18      	it	ne
 8007456:	f040 0001 	orrne.w	r0, r0, #1
 800745a:	4770      	bx	lr
 800745c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007460:	d102      	bne.n	8007468 <__cmpsf2+0x4c>
 8007462:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007466:	d105      	bne.n	8007474 <__cmpsf2+0x58>
 8007468:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800746c:	d1e4      	bne.n	8007438 <__cmpsf2+0x1c>
 800746e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007472:	d0e1      	beq.n	8007438 <__cmpsf2+0x1c>
 8007474:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop

0800747c <__aeabi_cfrcmple>:
 800747c:	4684      	mov	ip, r0
 800747e:	4608      	mov	r0, r1
 8007480:	4661      	mov	r1, ip
 8007482:	e7ff      	b.n	8007484 <__aeabi_cfcmpeq>

08007484 <__aeabi_cfcmpeq>:
 8007484:	b50f      	push	{r0, r1, r2, r3, lr}
 8007486:	f7ff ffc9 	bl	800741c <__cmpsf2>
 800748a:	2800      	cmp	r0, #0
 800748c:	bf48      	it	mi
 800748e:	f110 0f00 	cmnmi.w	r0, #0
 8007492:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007494 <__aeabi_fcmpeq>:
 8007494:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007498:	f7ff fff4 	bl	8007484 <__aeabi_cfcmpeq>
 800749c:	bf0c      	ite	eq
 800749e:	2001      	moveq	r0, #1
 80074a0:	2000      	movne	r0, #0
 80074a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80074a6:	bf00      	nop

080074a8 <__aeabi_fcmplt>:
 80074a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80074ac:	f7ff ffea 	bl	8007484 <__aeabi_cfcmpeq>
 80074b0:	bf34      	ite	cc
 80074b2:	2001      	movcc	r0, #1
 80074b4:	2000      	movcs	r0, #0
 80074b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80074ba:	bf00      	nop

080074bc <__aeabi_fcmple>:
 80074bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80074c0:	f7ff ffe0 	bl	8007484 <__aeabi_cfcmpeq>
 80074c4:	bf94      	ite	ls
 80074c6:	2001      	movls	r0, #1
 80074c8:	2000      	movhi	r0, #0
 80074ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80074ce:	bf00      	nop

080074d0 <__aeabi_fcmpge>:
 80074d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80074d4:	f7ff ffd2 	bl	800747c <__aeabi_cfrcmple>
 80074d8:	bf94      	ite	ls
 80074da:	2001      	movls	r0, #1
 80074dc:	2000      	movhi	r0, #0
 80074de:	f85d fb08 	ldr.w	pc, [sp], #8
 80074e2:	bf00      	nop

080074e4 <__aeabi_fcmpgt>:
 80074e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80074e8:	f7ff ffc8 	bl	800747c <__aeabi_cfrcmple>
 80074ec:	bf34      	ite	cc
 80074ee:	2001      	movcc	r0, #1
 80074f0:	2000      	movcs	r0, #0
 80074f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80074f6:	bf00      	nop

080074f8 <__aeabi_f2iz>:
 80074f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80074fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007500:	d30f      	bcc.n	8007522 <__aeabi_f2iz+0x2a>
 8007502:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007506:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800750a:	d90d      	bls.n	8007528 <__aeabi_f2iz+0x30>
 800750c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007514:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007518:	fa23 f002 	lsr.w	r0, r3, r2
 800751c:	bf18      	it	ne
 800751e:	4240      	negne	r0, r0
 8007520:	4770      	bx	lr
 8007522:	f04f 0000 	mov.w	r0, #0
 8007526:	4770      	bx	lr
 8007528:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800752c:	d101      	bne.n	8007532 <__aeabi_f2iz+0x3a>
 800752e:	0242      	lsls	r2, r0, #9
 8007530:	d105      	bne.n	800753e <__aeabi_f2iz+0x46>
 8007532:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8007536:	bf08      	it	eq
 8007538:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800753c:	4770      	bx	lr
 800753e:	f04f 0000 	mov.w	r0, #0
 8007542:	4770      	bx	lr

08007544 <__aeabi_uldivmod>:
 8007544:	b953      	cbnz	r3, 800755c <__aeabi_uldivmod+0x18>
 8007546:	b94a      	cbnz	r2, 800755c <__aeabi_uldivmod+0x18>
 8007548:	2900      	cmp	r1, #0
 800754a:	bf08      	it	eq
 800754c:	2800      	cmpeq	r0, #0
 800754e:	bf1c      	itt	ne
 8007550:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007554:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007558:	f000 b976 	b.w	8007848 <__aeabi_idiv0>
 800755c:	f1ad 0c08 	sub.w	ip, sp, #8
 8007560:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007564:	f000 f806 	bl	8007574 <__udivmoddi4>
 8007568:	f8dd e004 	ldr.w	lr, [sp, #4]
 800756c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007570:	b004      	add	sp, #16
 8007572:	4770      	bx	lr

08007574 <__udivmoddi4>:
 8007574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007578:	9e08      	ldr	r6, [sp, #32]
 800757a:	460d      	mov	r5, r1
 800757c:	4604      	mov	r4, r0
 800757e:	4688      	mov	r8, r1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d14d      	bne.n	8007620 <__udivmoddi4+0xac>
 8007584:	428a      	cmp	r2, r1
 8007586:	4694      	mov	ip, r2
 8007588:	d968      	bls.n	800765c <__udivmoddi4+0xe8>
 800758a:	fab2 f282 	clz	r2, r2
 800758e:	b152      	cbz	r2, 80075a6 <__udivmoddi4+0x32>
 8007590:	fa01 f302 	lsl.w	r3, r1, r2
 8007594:	f1c2 0120 	rsb	r1, r2, #32
 8007598:	fa20 f101 	lsr.w	r1, r0, r1
 800759c:	fa0c fc02 	lsl.w	ip, ip, r2
 80075a0:	ea41 0803 	orr.w	r8, r1, r3
 80075a4:	4094      	lsls	r4, r2
 80075a6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80075aa:	fbb8 f7f1 	udiv	r7, r8, r1
 80075ae:	fa1f fe8c 	uxth.w	lr, ip
 80075b2:	fb01 8817 	mls	r8, r1, r7, r8
 80075b6:	fb07 f00e 	mul.w	r0, r7, lr
 80075ba:	0c23      	lsrs	r3, r4, #16
 80075bc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80075c0:	4298      	cmp	r0, r3
 80075c2:	d90a      	bls.n	80075da <__udivmoddi4+0x66>
 80075c4:	eb1c 0303 	adds.w	r3, ip, r3
 80075c8:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 80075cc:	f080 811e 	bcs.w	800780c <__udivmoddi4+0x298>
 80075d0:	4298      	cmp	r0, r3
 80075d2:	f240 811b 	bls.w	800780c <__udivmoddi4+0x298>
 80075d6:	3f02      	subs	r7, #2
 80075d8:	4463      	add	r3, ip
 80075da:	1a1b      	subs	r3, r3, r0
 80075dc:	fbb3 f0f1 	udiv	r0, r3, r1
 80075e0:	fb01 3310 	mls	r3, r1, r0, r3
 80075e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80075e8:	b2a4      	uxth	r4, r4
 80075ea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80075ee:	45a6      	cmp	lr, r4
 80075f0:	d90a      	bls.n	8007608 <__udivmoddi4+0x94>
 80075f2:	eb1c 0404 	adds.w	r4, ip, r4
 80075f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80075fa:	f080 8109 	bcs.w	8007810 <__udivmoddi4+0x29c>
 80075fe:	45a6      	cmp	lr, r4
 8007600:	f240 8106 	bls.w	8007810 <__udivmoddi4+0x29c>
 8007604:	4464      	add	r4, ip
 8007606:	3802      	subs	r0, #2
 8007608:	2100      	movs	r1, #0
 800760a:	eba4 040e 	sub.w	r4, r4, lr
 800760e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007612:	b11e      	cbz	r6, 800761c <__udivmoddi4+0xa8>
 8007614:	2300      	movs	r3, #0
 8007616:	40d4      	lsrs	r4, r2
 8007618:	e9c6 4300 	strd	r4, r3, [r6]
 800761c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007620:	428b      	cmp	r3, r1
 8007622:	d908      	bls.n	8007636 <__udivmoddi4+0xc2>
 8007624:	2e00      	cmp	r6, #0
 8007626:	f000 80ee 	beq.w	8007806 <__udivmoddi4+0x292>
 800762a:	2100      	movs	r1, #0
 800762c:	e9c6 0500 	strd	r0, r5, [r6]
 8007630:	4608      	mov	r0, r1
 8007632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007636:	fab3 f183 	clz	r1, r3
 800763a:	2900      	cmp	r1, #0
 800763c:	d14a      	bne.n	80076d4 <__udivmoddi4+0x160>
 800763e:	42ab      	cmp	r3, r5
 8007640:	d302      	bcc.n	8007648 <__udivmoddi4+0xd4>
 8007642:	4282      	cmp	r2, r0
 8007644:	f200 80fc 	bhi.w	8007840 <__udivmoddi4+0x2cc>
 8007648:	1a84      	subs	r4, r0, r2
 800764a:	eb65 0303 	sbc.w	r3, r5, r3
 800764e:	2001      	movs	r0, #1
 8007650:	4698      	mov	r8, r3
 8007652:	2e00      	cmp	r6, #0
 8007654:	d0e2      	beq.n	800761c <__udivmoddi4+0xa8>
 8007656:	e9c6 4800 	strd	r4, r8, [r6]
 800765a:	e7df      	b.n	800761c <__udivmoddi4+0xa8>
 800765c:	b902      	cbnz	r2, 8007660 <__udivmoddi4+0xec>
 800765e:	deff      	udf	#255	; 0xff
 8007660:	fab2 f282 	clz	r2, r2
 8007664:	2a00      	cmp	r2, #0
 8007666:	f040 8091 	bne.w	800778c <__udivmoddi4+0x218>
 800766a:	eba1 000c 	sub.w	r0, r1, ip
 800766e:	2101      	movs	r1, #1
 8007670:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007674:	fa1f fe8c 	uxth.w	lr, ip
 8007678:	fbb0 f3f7 	udiv	r3, r0, r7
 800767c:	fb07 0013 	mls	r0, r7, r3, r0
 8007680:	0c25      	lsrs	r5, r4, #16
 8007682:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8007686:	fb0e f003 	mul.w	r0, lr, r3
 800768a:	42a8      	cmp	r0, r5
 800768c:	d908      	bls.n	80076a0 <__udivmoddi4+0x12c>
 800768e:	eb1c 0505 	adds.w	r5, ip, r5
 8007692:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007696:	d202      	bcs.n	800769e <__udivmoddi4+0x12a>
 8007698:	42a8      	cmp	r0, r5
 800769a:	f200 80ce 	bhi.w	800783a <__udivmoddi4+0x2c6>
 800769e:	4643      	mov	r3, r8
 80076a0:	1a2d      	subs	r5, r5, r0
 80076a2:	fbb5 f0f7 	udiv	r0, r5, r7
 80076a6:	fb07 5510 	mls	r5, r7, r0, r5
 80076aa:	fb0e fe00 	mul.w	lr, lr, r0
 80076ae:	b2a4      	uxth	r4, r4
 80076b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80076b4:	45a6      	cmp	lr, r4
 80076b6:	d908      	bls.n	80076ca <__udivmoddi4+0x156>
 80076b8:	eb1c 0404 	adds.w	r4, ip, r4
 80076bc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80076c0:	d202      	bcs.n	80076c8 <__udivmoddi4+0x154>
 80076c2:	45a6      	cmp	lr, r4
 80076c4:	f200 80b6 	bhi.w	8007834 <__udivmoddi4+0x2c0>
 80076c8:	4628      	mov	r0, r5
 80076ca:	eba4 040e 	sub.w	r4, r4, lr
 80076ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80076d2:	e79e      	b.n	8007612 <__udivmoddi4+0x9e>
 80076d4:	f1c1 0720 	rsb	r7, r1, #32
 80076d8:	408b      	lsls	r3, r1
 80076da:	fa22 fc07 	lsr.w	ip, r2, r7
 80076de:	ea4c 0c03 	orr.w	ip, ip, r3
 80076e2:	fa25 fa07 	lsr.w	sl, r5, r7
 80076e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80076ea:	fbba f8f9 	udiv	r8, sl, r9
 80076ee:	fa20 f307 	lsr.w	r3, r0, r7
 80076f2:	fb09 aa18 	mls	sl, r9, r8, sl
 80076f6:	408d      	lsls	r5, r1
 80076f8:	fa1f fe8c 	uxth.w	lr, ip
 80076fc:	431d      	orrs	r5, r3
 80076fe:	fa00 f301 	lsl.w	r3, r0, r1
 8007702:	fb08 f00e 	mul.w	r0, r8, lr
 8007706:	0c2c      	lsrs	r4, r5, #16
 8007708:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800770c:	42a0      	cmp	r0, r4
 800770e:	fa02 f201 	lsl.w	r2, r2, r1
 8007712:	d90b      	bls.n	800772c <__udivmoddi4+0x1b8>
 8007714:	eb1c 0404 	adds.w	r4, ip, r4
 8007718:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800771c:	f080 8088 	bcs.w	8007830 <__udivmoddi4+0x2bc>
 8007720:	42a0      	cmp	r0, r4
 8007722:	f240 8085 	bls.w	8007830 <__udivmoddi4+0x2bc>
 8007726:	f1a8 0802 	sub.w	r8, r8, #2
 800772a:	4464      	add	r4, ip
 800772c:	1a24      	subs	r4, r4, r0
 800772e:	fbb4 f0f9 	udiv	r0, r4, r9
 8007732:	fb09 4410 	mls	r4, r9, r0, r4
 8007736:	fb00 fe0e 	mul.w	lr, r0, lr
 800773a:	b2ad      	uxth	r5, r5
 800773c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8007740:	45a6      	cmp	lr, r4
 8007742:	d908      	bls.n	8007756 <__udivmoddi4+0x1e2>
 8007744:	eb1c 0404 	adds.w	r4, ip, r4
 8007748:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800774c:	d26c      	bcs.n	8007828 <__udivmoddi4+0x2b4>
 800774e:	45a6      	cmp	lr, r4
 8007750:	d96a      	bls.n	8007828 <__udivmoddi4+0x2b4>
 8007752:	3802      	subs	r0, #2
 8007754:	4464      	add	r4, ip
 8007756:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800775a:	fba0 9502 	umull	r9, r5, r0, r2
 800775e:	eba4 040e 	sub.w	r4, r4, lr
 8007762:	42ac      	cmp	r4, r5
 8007764:	46c8      	mov	r8, r9
 8007766:	46ae      	mov	lr, r5
 8007768:	d356      	bcc.n	8007818 <__udivmoddi4+0x2a4>
 800776a:	d053      	beq.n	8007814 <__udivmoddi4+0x2a0>
 800776c:	2e00      	cmp	r6, #0
 800776e:	d069      	beq.n	8007844 <__udivmoddi4+0x2d0>
 8007770:	ebb3 0208 	subs.w	r2, r3, r8
 8007774:	eb64 040e 	sbc.w	r4, r4, lr
 8007778:	fa22 f301 	lsr.w	r3, r2, r1
 800777c:	fa04 f707 	lsl.w	r7, r4, r7
 8007780:	431f      	orrs	r7, r3
 8007782:	40cc      	lsrs	r4, r1
 8007784:	e9c6 7400 	strd	r7, r4, [r6]
 8007788:	2100      	movs	r1, #0
 800778a:	e747      	b.n	800761c <__udivmoddi4+0xa8>
 800778c:	fa0c fc02 	lsl.w	ip, ip, r2
 8007790:	f1c2 0120 	rsb	r1, r2, #32
 8007794:	fa25 f301 	lsr.w	r3, r5, r1
 8007798:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800779c:	fa20 f101 	lsr.w	r1, r0, r1
 80077a0:	4095      	lsls	r5, r2
 80077a2:	430d      	orrs	r5, r1
 80077a4:	fbb3 f1f7 	udiv	r1, r3, r7
 80077a8:	fb07 3311 	mls	r3, r7, r1, r3
 80077ac:	fa1f fe8c 	uxth.w	lr, ip
 80077b0:	0c28      	lsrs	r0, r5, #16
 80077b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80077b6:	fb01 f30e 	mul.w	r3, r1, lr
 80077ba:	4283      	cmp	r3, r0
 80077bc:	fa04 f402 	lsl.w	r4, r4, r2
 80077c0:	d908      	bls.n	80077d4 <__udivmoddi4+0x260>
 80077c2:	eb1c 0000 	adds.w	r0, ip, r0
 80077c6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80077ca:	d22f      	bcs.n	800782c <__udivmoddi4+0x2b8>
 80077cc:	4283      	cmp	r3, r0
 80077ce:	d92d      	bls.n	800782c <__udivmoddi4+0x2b8>
 80077d0:	3902      	subs	r1, #2
 80077d2:	4460      	add	r0, ip
 80077d4:	1ac0      	subs	r0, r0, r3
 80077d6:	fbb0 f3f7 	udiv	r3, r0, r7
 80077da:	fb07 0013 	mls	r0, r7, r3, r0
 80077de:	b2ad      	uxth	r5, r5
 80077e0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80077e4:	fb03 f00e 	mul.w	r0, r3, lr
 80077e8:	42a8      	cmp	r0, r5
 80077ea:	d908      	bls.n	80077fe <__udivmoddi4+0x28a>
 80077ec:	eb1c 0505 	adds.w	r5, ip, r5
 80077f0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80077f4:	d216      	bcs.n	8007824 <__udivmoddi4+0x2b0>
 80077f6:	42a8      	cmp	r0, r5
 80077f8:	d914      	bls.n	8007824 <__udivmoddi4+0x2b0>
 80077fa:	3b02      	subs	r3, #2
 80077fc:	4465      	add	r5, ip
 80077fe:	1a28      	subs	r0, r5, r0
 8007800:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8007804:	e738      	b.n	8007678 <__udivmoddi4+0x104>
 8007806:	4631      	mov	r1, r6
 8007808:	4630      	mov	r0, r6
 800780a:	e707      	b.n	800761c <__udivmoddi4+0xa8>
 800780c:	462f      	mov	r7, r5
 800780e:	e6e4      	b.n	80075da <__udivmoddi4+0x66>
 8007810:	4618      	mov	r0, r3
 8007812:	e6f9      	b.n	8007608 <__udivmoddi4+0x94>
 8007814:	454b      	cmp	r3, r9
 8007816:	d2a9      	bcs.n	800776c <__udivmoddi4+0x1f8>
 8007818:	ebb9 0802 	subs.w	r8, r9, r2
 800781c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8007820:	3801      	subs	r0, #1
 8007822:	e7a3      	b.n	800776c <__udivmoddi4+0x1f8>
 8007824:	4643      	mov	r3, r8
 8007826:	e7ea      	b.n	80077fe <__udivmoddi4+0x28a>
 8007828:	4628      	mov	r0, r5
 800782a:	e794      	b.n	8007756 <__udivmoddi4+0x1e2>
 800782c:	4641      	mov	r1, r8
 800782e:	e7d1      	b.n	80077d4 <__udivmoddi4+0x260>
 8007830:	46d0      	mov	r8, sl
 8007832:	e77b      	b.n	800772c <__udivmoddi4+0x1b8>
 8007834:	4464      	add	r4, ip
 8007836:	3802      	subs	r0, #2
 8007838:	e747      	b.n	80076ca <__udivmoddi4+0x156>
 800783a:	3b02      	subs	r3, #2
 800783c:	4465      	add	r5, ip
 800783e:	e72f      	b.n	80076a0 <__udivmoddi4+0x12c>
 8007840:	4608      	mov	r0, r1
 8007842:	e706      	b.n	8007652 <__udivmoddi4+0xde>
 8007844:	4631      	mov	r1, r6
 8007846:	e6e9      	b.n	800761c <__udivmoddi4+0xa8>

08007848 <__aeabi_idiv0>:
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop

0800784c <__aeabi_drsub>:
 800784c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007850:	e002      	b.n	8007858 <__adddf3>
 8007852:	bf00      	nop

08007854 <__aeabi_dsub>:
 8007854:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007858 <__adddf3>:
 8007858:	b530      	push	{r4, r5, lr}
 800785a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800785e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007862:	ea94 0f05 	teq	r4, r5
 8007866:	bf08      	it	eq
 8007868:	ea90 0f02 	teqeq	r0, r2
 800786c:	bf1f      	itttt	ne
 800786e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007872:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007876:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800787a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800787e:	f000 80e2 	beq.w	8007a46 <__adddf3+0x1ee>
 8007882:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007886:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800788a:	bfb8      	it	lt
 800788c:	426d      	neglt	r5, r5
 800788e:	dd0c      	ble.n	80078aa <__adddf3+0x52>
 8007890:	442c      	add	r4, r5
 8007892:	ea80 0202 	eor.w	r2, r0, r2
 8007896:	ea81 0303 	eor.w	r3, r1, r3
 800789a:	ea82 0000 	eor.w	r0, r2, r0
 800789e:	ea83 0101 	eor.w	r1, r3, r1
 80078a2:	ea80 0202 	eor.w	r2, r0, r2
 80078a6:	ea81 0303 	eor.w	r3, r1, r3
 80078aa:	2d36      	cmp	r5, #54	; 0x36
 80078ac:	bf88      	it	hi
 80078ae:	bd30      	pophi	{r4, r5, pc}
 80078b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80078b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80078b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80078bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80078c0:	d002      	beq.n	80078c8 <__adddf3+0x70>
 80078c2:	4240      	negs	r0, r0
 80078c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80078c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80078cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80078d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80078d4:	d002      	beq.n	80078dc <__adddf3+0x84>
 80078d6:	4252      	negs	r2, r2
 80078d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80078dc:	ea94 0f05 	teq	r4, r5
 80078e0:	f000 80a7 	beq.w	8007a32 <__adddf3+0x1da>
 80078e4:	f1a4 0401 	sub.w	r4, r4, #1
 80078e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80078ec:	db0d      	blt.n	800790a <__adddf3+0xb2>
 80078ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80078f2:	fa22 f205 	lsr.w	r2, r2, r5
 80078f6:	1880      	adds	r0, r0, r2
 80078f8:	f141 0100 	adc.w	r1, r1, #0
 80078fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8007900:	1880      	adds	r0, r0, r2
 8007902:	fa43 f305 	asr.w	r3, r3, r5
 8007906:	4159      	adcs	r1, r3
 8007908:	e00e      	b.n	8007928 <__adddf3+0xd0>
 800790a:	f1a5 0520 	sub.w	r5, r5, #32
 800790e:	f10e 0e20 	add.w	lr, lr, #32
 8007912:	2a01      	cmp	r2, #1
 8007914:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007918:	bf28      	it	cs
 800791a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800791e:	fa43 f305 	asr.w	r3, r3, r5
 8007922:	18c0      	adds	r0, r0, r3
 8007924:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007928:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800792c:	d507      	bpl.n	800793e <__adddf3+0xe6>
 800792e:	f04f 0e00 	mov.w	lr, #0
 8007932:	f1dc 0c00 	rsbs	ip, ip, #0
 8007936:	eb7e 0000 	sbcs.w	r0, lr, r0
 800793a:	eb6e 0101 	sbc.w	r1, lr, r1
 800793e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007942:	d31b      	bcc.n	800797c <__adddf3+0x124>
 8007944:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007948:	d30c      	bcc.n	8007964 <__adddf3+0x10c>
 800794a:	0849      	lsrs	r1, r1, #1
 800794c:	ea5f 0030 	movs.w	r0, r0, rrx
 8007950:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007954:	f104 0401 	add.w	r4, r4, #1
 8007958:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800795c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007960:	f080 809a 	bcs.w	8007a98 <__adddf3+0x240>
 8007964:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007968:	bf08      	it	eq
 800796a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800796e:	f150 0000 	adcs.w	r0, r0, #0
 8007972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007976:	ea41 0105 	orr.w	r1, r1, r5
 800797a:	bd30      	pop	{r4, r5, pc}
 800797c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007980:	4140      	adcs	r0, r0
 8007982:	eb41 0101 	adc.w	r1, r1, r1
 8007986:	3c01      	subs	r4, #1
 8007988:	bf28      	it	cs
 800798a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800798e:	d2e9      	bcs.n	8007964 <__adddf3+0x10c>
 8007990:	f091 0f00 	teq	r1, #0
 8007994:	bf04      	itt	eq
 8007996:	4601      	moveq	r1, r0
 8007998:	2000      	moveq	r0, #0
 800799a:	fab1 f381 	clz	r3, r1
 800799e:	bf08      	it	eq
 80079a0:	3320      	addeq	r3, #32
 80079a2:	f1a3 030b 	sub.w	r3, r3, #11
 80079a6:	f1b3 0220 	subs.w	r2, r3, #32
 80079aa:	da0c      	bge.n	80079c6 <__adddf3+0x16e>
 80079ac:	320c      	adds	r2, #12
 80079ae:	dd08      	ble.n	80079c2 <__adddf3+0x16a>
 80079b0:	f102 0c14 	add.w	ip, r2, #20
 80079b4:	f1c2 020c 	rsb	r2, r2, #12
 80079b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80079bc:	fa21 f102 	lsr.w	r1, r1, r2
 80079c0:	e00c      	b.n	80079dc <__adddf3+0x184>
 80079c2:	f102 0214 	add.w	r2, r2, #20
 80079c6:	bfd8      	it	le
 80079c8:	f1c2 0c20 	rsble	ip, r2, #32
 80079cc:	fa01 f102 	lsl.w	r1, r1, r2
 80079d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80079d4:	bfdc      	itt	le
 80079d6:	ea41 010c 	orrle.w	r1, r1, ip
 80079da:	4090      	lslle	r0, r2
 80079dc:	1ae4      	subs	r4, r4, r3
 80079de:	bfa2      	ittt	ge
 80079e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80079e4:	4329      	orrge	r1, r5
 80079e6:	bd30      	popge	{r4, r5, pc}
 80079e8:	ea6f 0404 	mvn.w	r4, r4
 80079ec:	3c1f      	subs	r4, #31
 80079ee:	da1c      	bge.n	8007a2a <__adddf3+0x1d2>
 80079f0:	340c      	adds	r4, #12
 80079f2:	dc0e      	bgt.n	8007a12 <__adddf3+0x1ba>
 80079f4:	f104 0414 	add.w	r4, r4, #20
 80079f8:	f1c4 0220 	rsb	r2, r4, #32
 80079fc:	fa20 f004 	lsr.w	r0, r0, r4
 8007a00:	fa01 f302 	lsl.w	r3, r1, r2
 8007a04:	ea40 0003 	orr.w	r0, r0, r3
 8007a08:	fa21 f304 	lsr.w	r3, r1, r4
 8007a0c:	ea45 0103 	orr.w	r1, r5, r3
 8007a10:	bd30      	pop	{r4, r5, pc}
 8007a12:	f1c4 040c 	rsb	r4, r4, #12
 8007a16:	f1c4 0220 	rsb	r2, r4, #32
 8007a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8007a1e:	fa01 f304 	lsl.w	r3, r1, r4
 8007a22:	ea40 0003 	orr.w	r0, r0, r3
 8007a26:	4629      	mov	r1, r5
 8007a28:	bd30      	pop	{r4, r5, pc}
 8007a2a:	fa21 f004 	lsr.w	r0, r1, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	bd30      	pop	{r4, r5, pc}
 8007a32:	f094 0f00 	teq	r4, #0
 8007a36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007a3a:	bf06      	itte	eq
 8007a3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007a40:	3401      	addeq	r4, #1
 8007a42:	3d01      	subne	r5, #1
 8007a44:	e74e      	b.n	80078e4 <__adddf3+0x8c>
 8007a46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007a4a:	bf18      	it	ne
 8007a4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007a50:	d029      	beq.n	8007aa6 <__adddf3+0x24e>
 8007a52:	ea94 0f05 	teq	r4, r5
 8007a56:	bf08      	it	eq
 8007a58:	ea90 0f02 	teqeq	r0, r2
 8007a5c:	d005      	beq.n	8007a6a <__adddf3+0x212>
 8007a5e:	ea54 0c00 	orrs.w	ip, r4, r0
 8007a62:	bf04      	itt	eq
 8007a64:	4619      	moveq	r1, r3
 8007a66:	4610      	moveq	r0, r2
 8007a68:	bd30      	pop	{r4, r5, pc}
 8007a6a:	ea91 0f03 	teq	r1, r3
 8007a6e:	bf1e      	ittt	ne
 8007a70:	2100      	movne	r1, #0
 8007a72:	2000      	movne	r0, #0
 8007a74:	bd30      	popne	{r4, r5, pc}
 8007a76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007a7a:	d105      	bne.n	8007a88 <__adddf3+0x230>
 8007a7c:	0040      	lsls	r0, r0, #1
 8007a7e:	4149      	adcs	r1, r1
 8007a80:	bf28      	it	cs
 8007a82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007a86:	bd30      	pop	{r4, r5, pc}
 8007a88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007a8c:	bf3c      	itt	cc
 8007a8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007a92:	bd30      	popcc	{r4, r5, pc}
 8007a94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007a98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007a9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007aa0:	f04f 0000 	mov.w	r0, #0
 8007aa4:	bd30      	pop	{r4, r5, pc}
 8007aa6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007aaa:	bf1a      	itte	ne
 8007aac:	4619      	movne	r1, r3
 8007aae:	4610      	movne	r0, r2
 8007ab0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007ab4:	bf1c      	itt	ne
 8007ab6:	460b      	movne	r3, r1
 8007ab8:	4602      	movne	r2, r0
 8007aba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007abe:	bf06      	itte	eq
 8007ac0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007ac4:	ea91 0f03 	teqeq	r1, r3
 8007ac8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007acc:	bd30      	pop	{r4, r5, pc}
 8007ace:	bf00      	nop

08007ad0 <__aeabi_ui2d>:
 8007ad0:	f090 0f00 	teq	r0, #0
 8007ad4:	bf04      	itt	eq
 8007ad6:	2100      	moveq	r1, #0
 8007ad8:	4770      	bxeq	lr
 8007ada:	b530      	push	{r4, r5, lr}
 8007adc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007ae0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007ae4:	f04f 0500 	mov.w	r5, #0
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	e750      	b.n	8007990 <__adddf3+0x138>
 8007aee:	bf00      	nop

08007af0 <__aeabi_i2d>:
 8007af0:	f090 0f00 	teq	r0, #0
 8007af4:	bf04      	itt	eq
 8007af6:	2100      	moveq	r1, #0
 8007af8:	4770      	bxeq	lr
 8007afa:	b530      	push	{r4, r5, lr}
 8007afc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007b00:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007b04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007b08:	bf48      	it	mi
 8007b0a:	4240      	negmi	r0, r0
 8007b0c:	f04f 0100 	mov.w	r1, #0
 8007b10:	e73e      	b.n	8007990 <__adddf3+0x138>
 8007b12:	bf00      	nop

08007b14 <__aeabi_f2d>:
 8007b14:	0042      	lsls	r2, r0, #1
 8007b16:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8007b1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007b22:	bf1f      	itttt	ne
 8007b24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007b28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007b2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007b30:	4770      	bxne	lr
 8007b32:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8007b36:	bf08      	it	eq
 8007b38:	4770      	bxeq	lr
 8007b3a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007b3e:	bf04      	itt	eq
 8007b40:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007b44:	4770      	bxeq	lr
 8007b46:	b530      	push	{r4, r5, lr}
 8007b48:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007b4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007b50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007b54:	e71c      	b.n	8007990 <__adddf3+0x138>
 8007b56:	bf00      	nop

08007b58 <__aeabi_ul2d>:
 8007b58:	ea50 0201 	orrs.w	r2, r0, r1
 8007b5c:	bf08      	it	eq
 8007b5e:	4770      	bxeq	lr
 8007b60:	b530      	push	{r4, r5, lr}
 8007b62:	f04f 0500 	mov.w	r5, #0
 8007b66:	e00a      	b.n	8007b7e <__aeabi_l2d+0x16>

08007b68 <__aeabi_l2d>:
 8007b68:	ea50 0201 	orrs.w	r2, r0, r1
 8007b6c:	bf08      	it	eq
 8007b6e:	4770      	bxeq	lr
 8007b70:	b530      	push	{r4, r5, lr}
 8007b72:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007b76:	d502      	bpl.n	8007b7e <__aeabi_l2d+0x16>
 8007b78:	4240      	negs	r0, r0
 8007b7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007b7e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007b82:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007b86:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007b8a:	f43f aed8 	beq.w	800793e <__adddf3+0xe6>
 8007b8e:	f04f 0203 	mov.w	r2, #3
 8007b92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007b96:	bf18      	it	ne
 8007b98:	3203      	addne	r2, #3
 8007b9a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007b9e:	bf18      	it	ne
 8007ba0:	3203      	addne	r2, #3
 8007ba2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007ba6:	f1c2 0320 	rsb	r3, r2, #32
 8007baa:	fa00 fc03 	lsl.w	ip, r0, r3
 8007bae:	fa20 f002 	lsr.w	r0, r0, r2
 8007bb2:	fa01 fe03 	lsl.w	lr, r1, r3
 8007bb6:	ea40 000e 	orr.w	r0, r0, lr
 8007bba:	fa21 f102 	lsr.w	r1, r1, r2
 8007bbe:	4414      	add	r4, r2
 8007bc0:	e6bd      	b.n	800793e <__adddf3+0xe6>
 8007bc2:	bf00      	nop

08007bc4 <__aeabi_fmul>:
 8007bc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007bc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8007bcc:	bf1e      	ittt	ne
 8007bce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8007bd2:	ea92 0f0c 	teqne	r2, ip
 8007bd6:	ea93 0f0c 	teqne	r3, ip
 8007bda:	d06f      	beq.n	8007cbc <__aeabi_fmul+0xf8>
 8007bdc:	441a      	add	r2, r3
 8007bde:	ea80 0c01 	eor.w	ip, r0, r1
 8007be2:	0240      	lsls	r0, r0, #9
 8007be4:	bf18      	it	ne
 8007be6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8007bea:	d01e      	beq.n	8007c2a <__aeabi_fmul+0x66>
 8007bec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bf0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8007bf4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8007bf8:	fba0 3101 	umull	r3, r1, r0, r1
 8007bfc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8007c00:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007c04:	bf3e      	ittt	cc
 8007c06:	0049      	lslcc	r1, r1, #1
 8007c08:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8007c0c:	005b      	lslcc	r3, r3, #1
 8007c0e:	ea40 0001 	orr.w	r0, r0, r1
 8007c12:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8007c16:	2afd      	cmp	r2, #253	; 0xfd
 8007c18:	d81d      	bhi.n	8007c56 <__aeabi_fmul+0x92>
 8007c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007c22:	bf08      	it	eq
 8007c24:	f020 0001 	biceq.w	r0, r0, #1
 8007c28:	4770      	bx	lr
 8007c2a:	f090 0f00 	teq	r0, #0
 8007c2e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8007c32:	bf08      	it	eq
 8007c34:	0249      	lsleq	r1, r1, #9
 8007c36:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8007c3a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8007c3e:	3a7f      	subs	r2, #127	; 0x7f
 8007c40:	bfc2      	ittt	gt
 8007c42:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8007c46:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8007c4a:	4770      	bxgt	lr
 8007c4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007c50:	f04f 0300 	mov.w	r3, #0
 8007c54:	3a01      	subs	r2, #1
 8007c56:	dc5d      	bgt.n	8007d14 <__aeabi_fmul+0x150>
 8007c58:	f112 0f19 	cmn.w	r2, #25
 8007c5c:	bfdc      	itt	le
 8007c5e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8007c62:	4770      	bxle	lr
 8007c64:	f1c2 0200 	rsb	r2, r2, #0
 8007c68:	0041      	lsls	r1, r0, #1
 8007c6a:	fa21 f102 	lsr.w	r1, r1, r2
 8007c6e:	f1c2 0220 	rsb	r2, r2, #32
 8007c72:	fa00 fc02 	lsl.w	ip, r0, r2
 8007c76:	ea5f 0031 	movs.w	r0, r1, rrx
 8007c7a:	f140 0000 	adc.w	r0, r0, #0
 8007c7e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8007c82:	bf08      	it	eq
 8007c84:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007c88:	4770      	bx	lr
 8007c8a:	f092 0f00 	teq	r2, #0
 8007c8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8007c92:	bf02      	ittt	eq
 8007c94:	0040      	lsleq	r0, r0, #1
 8007c96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8007c9a:	3a01      	subeq	r2, #1
 8007c9c:	d0f9      	beq.n	8007c92 <__aeabi_fmul+0xce>
 8007c9e:	ea40 000c 	orr.w	r0, r0, ip
 8007ca2:	f093 0f00 	teq	r3, #0
 8007ca6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007caa:	bf02      	ittt	eq
 8007cac:	0049      	lsleq	r1, r1, #1
 8007cae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8007cb2:	3b01      	subeq	r3, #1
 8007cb4:	d0f9      	beq.n	8007caa <__aeabi_fmul+0xe6>
 8007cb6:	ea41 010c 	orr.w	r1, r1, ip
 8007cba:	e78f      	b.n	8007bdc <__aeabi_fmul+0x18>
 8007cbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8007cc0:	ea92 0f0c 	teq	r2, ip
 8007cc4:	bf18      	it	ne
 8007cc6:	ea93 0f0c 	teqne	r3, ip
 8007cca:	d00a      	beq.n	8007ce2 <__aeabi_fmul+0x11e>
 8007ccc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8007cd0:	bf18      	it	ne
 8007cd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8007cd6:	d1d8      	bne.n	8007c8a <__aeabi_fmul+0xc6>
 8007cd8:	ea80 0001 	eor.w	r0, r0, r1
 8007cdc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007ce0:	4770      	bx	lr
 8007ce2:	f090 0f00 	teq	r0, #0
 8007ce6:	bf17      	itett	ne
 8007ce8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8007cec:	4608      	moveq	r0, r1
 8007cee:	f091 0f00 	teqne	r1, #0
 8007cf2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8007cf6:	d014      	beq.n	8007d22 <__aeabi_fmul+0x15e>
 8007cf8:	ea92 0f0c 	teq	r2, ip
 8007cfc:	d101      	bne.n	8007d02 <__aeabi_fmul+0x13e>
 8007cfe:	0242      	lsls	r2, r0, #9
 8007d00:	d10f      	bne.n	8007d22 <__aeabi_fmul+0x15e>
 8007d02:	ea93 0f0c 	teq	r3, ip
 8007d06:	d103      	bne.n	8007d10 <__aeabi_fmul+0x14c>
 8007d08:	024b      	lsls	r3, r1, #9
 8007d0a:	bf18      	it	ne
 8007d0c:	4608      	movne	r0, r1
 8007d0e:	d108      	bne.n	8007d22 <__aeabi_fmul+0x15e>
 8007d10:	ea80 0001 	eor.w	r0, r0, r1
 8007d14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007d18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007d1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007d20:	4770      	bx	lr
 8007d22:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007d26:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8007d2a:	4770      	bx	lr

08007d2c <__aeabi_fdiv>:
 8007d2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007d30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8007d34:	bf1e      	ittt	ne
 8007d36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8007d3a:	ea92 0f0c 	teqne	r2, ip
 8007d3e:	ea93 0f0c 	teqne	r3, ip
 8007d42:	d069      	beq.n	8007e18 <__aeabi_fdiv+0xec>
 8007d44:	eba2 0203 	sub.w	r2, r2, r3
 8007d48:	ea80 0c01 	eor.w	ip, r0, r1
 8007d4c:	0249      	lsls	r1, r1, #9
 8007d4e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8007d52:	d037      	beq.n	8007dc4 <__aeabi_fdiv+0x98>
 8007d54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d58:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8007d5c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8007d60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8007d64:	428b      	cmp	r3, r1
 8007d66:	bf38      	it	cc
 8007d68:	005b      	lslcc	r3, r3, #1
 8007d6a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8007d6e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8007d72:	428b      	cmp	r3, r1
 8007d74:	bf24      	itt	cs
 8007d76:	1a5b      	subcs	r3, r3, r1
 8007d78:	ea40 000c 	orrcs.w	r0, r0, ip
 8007d7c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8007d80:	bf24      	itt	cs
 8007d82:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8007d86:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007d8a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8007d8e:	bf24      	itt	cs
 8007d90:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8007d94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007d98:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8007d9c:	bf24      	itt	cs
 8007d9e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8007da2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007da6:	011b      	lsls	r3, r3, #4
 8007da8:	bf18      	it	ne
 8007daa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8007dae:	d1e0      	bne.n	8007d72 <__aeabi_fdiv+0x46>
 8007db0:	2afd      	cmp	r2, #253	; 0xfd
 8007db2:	f63f af50 	bhi.w	8007c56 <__aeabi_fmul+0x92>
 8007db6:	428b      	cmp	r3, r1
 8007db8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8007dbc:	bf08      	it	eq
 8007dbe:	f020 0001 	biceq.w	r0, r0, #1
 8007dc2:	4770      	bx	lr
 8007dc4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8007dc8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8007dcc:	327f      	adds	r2, #127	; 0x7f
 8007dce:	bfc2      	ittt	gt
 8007dd0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8007dd4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8007dd8:	4770      	bxgt	lr
 8007dda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007dde:	f04f 0300 	mov.w	r3, #0
 8007de2:	3a01      	subs	r2, #1
 8007de4:	e737      	b.n	8007c56 <__aeabi_fmul+0x92>
 8007de6:	f092 0f00 	teq	r2, #0
 8007dea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8007dee:	bf02      	ittt	eq
 8007df0:	0040      	lsleq	r0, r0, #1
 8007df2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8007df6:	3a01      	subeq	r2, #1
 8007df8:	d0f9      	beq.n	8007dee <__aeabi_fdiv+0xc2>
 8007dfa:	ea40 000c 	orr.w	r0, r0, ip
 8007dfe:	f093 0f00 	teq	r3, #0
 8007e02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007e06:	bf02      	ittt	eq
 8007e08:	0049      	lsleq	r1, r1, #1
 8007e0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8007e0e:	3b01      	subeq	r3, #1
 8007e10:	d0f9      	beq.n	8007e06 <__aeabi_fdiv+0xda>
 8007e12:	ea41 010c 	orr.w	r1, r1, ip
 8007e16:	e795      	b.n	8007d44 <__aeabi_fdiv+0x18>
 8007e18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8007e1c:	ea92 0f0c 	teq	r2, ip
 8007e20:	d108      	bne.n	8007e34 <__aeabi_fdiv+0x108>
 8007e22:	0242      	lsls	r2, r0, #9
 8007e24:	f47f af7d 	bne.w	8007d22 <__aeabi_fmul+0x15e>
 8007e28:	ea93 0f0c 	teq	r3, ip
 8007e2c:	f47f af70 	bne.w	8007d10 <__aeabi_fmul+0x14c>
 8007e30:	4608      	mov	r0, r1
 8007e32:	e776      	b.n	8007d22 <__aeabi_fmul+0x15e>
 8007e34:	ea93 0f0c 	teq	r3, ip
 8007e38:	d104      	bne.n	8007e44 <__aeabi_fdiv+0x118>
 8007e3a:	024b      	lsls	r3, r1, #9
 8007e3c:	f43f af4c 	beq.w	8007cd8 <__aeabi_fmul+0x114>
 8007e40:	4608      	mov	r0, r1
 8007e42:	e76e      	b.n	8007d22 <__aeabi_fmul+0x15e>
 8007e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8007e48:	bf18      	it	ne
 8007e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8007e4e:	d1ca      	bne.n	8007de6 <__aeabi_fdiv+0xba>
 8007e50:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8007e54:	f47f af5c 	bne.w	8007d10 <__aeabi_fmul+0x14c>
 8007e58:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8007e5c:	f47f af3c 	bne.w	8007cd8 <__aeabi_fmul+0x114>
 8007e60:	e75f      	b.n	8007d22 <__aeabi_fmul+0x15e>
 8007e62:	bf00      	nop

08007e64 <__popcountsi2>:
 8007e64:	0843      	lsrs	r3, r0, #1
 8007e66:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8007e6a:	1ac0      	subs	r0, r0, r3
 8007e6c:	0883      	lsrs	r3, r0, #2
 8007e6e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8007e72:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8007e76:	4418      	add	r0, r3
 8007e78:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8007e7c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8007e80:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8007e84:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8007e88:	0e00      	lsrs	r0, r0, #24
 8007e8a:	4770      	bx	lr

08007e8c <Reset_Handler>:
 8007e8c:	480c      	ldr	r0, [pc, #48]	; (8007ec0 <Zerobss+0x10>)
 8007e8e:	4685      	mov	sp, r0
 8007e90:	2100      	movs	r1, #0
 8007e92:	e003      	b.n	8007e9c <DataInit>

08007e94 <CopyData>:
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <Zerobss+0x14>)
 8007e96:	585b      	ldr	r3, [r3, r1]
 8007e98:	5043      	str	r3, [r0, r1]
 8007e9a:	3104      	adds	r1, #4

08007e9c <DataInit>:
 8007e9c:	480a      	ldr	r0, [pc, #40]	; (8007ec8 <Zerobss+0x18>)
 8007e9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <Zerobss+0x1c>)
 8007ea0:	1842      	adds	r2, r0, r1
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3f6      	bcc.n	8007e94 <CopyData>
 8007ea6:	4a0a      	ldr	r2, [pc, #40]	; (8007ed0 <Zerobss+0x20>)
 8007ea8:	e002      	b.n	8007eb0 <Zerobss>

08007eaa <FillZerobss>:
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f842 3b04 	str.w	r3, [r2], #4

08007eb0 <Zerobss>:
 8007eb0:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <Zerobss+0x24>)
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d3f9      	bcc.n	8007eaa <FillZerobss>
 8007eb6:	f00a fa4f 	bl	8012358 <SystemInit>
 8007eba:	f000 f8f1 	bl	80080a0 <main>
 8007ebe:	4770      	bx	lr
 8007ec0:	20018000 	andcs	r8, r1, r0
 8007ec4:	08016188 	stmdaeq	r1, {r3, r7, r8, sp, lr}
 8007ec8:	20000000 	andcs	r0, r0, r0
 8007ecc:	200000e4 	andcs	r0, r0, r4, ror #1
 8007ed0:	200000e8 	andcs	r0, r0, r8, ror #1
 8007ed4:	20015a3c 	andcs	r5, r1, ip, lsr sl

08007ed8 <ADC0_1_IRQHandler>:
 8007ed8:	e7fe      	b.n	8007ed8 <ADC0_1_IRQHandler>

08007eda <DisplayHandler::~DisplayHandler()>:
 8007eda:	4770      	bx	lr

08007edc <PixelDmxStartStop::~PixelDmxStartStop()>:
 8007edc:	4770      	bx	lr
	...

08007ee0 <PixelDmxStartStop::Start()>:
 8007ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ee4:	4b01      	ldr	r3, [pc, #4]	; (8007eec <PixelDmxStartStop::Start()+0xc>)
 8007ee6:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8007eea:	4770      	bx	lr
 8007eec:	40010000 	andmi	r0, r1, r0

08007ef0 <PixelDmxStartStop::Stop()>:
 8007ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ef4:	4b01      	ldr	r3, [pc, #4]	; (8007efc <PixelDmxStartStop::Stop()+0xc>)
 8007ef6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8007efa:	4770      	bx	lr
 8007efc:	40010000 	andmi	r0, r1, r0

08007f00 <Reboot::~Reboot()>:
 8007f00:	4770      	bx	lr
	...

08007f04 <Reboot::Run()>:
 8007f04:	b508      	push	{r3, lr}
 8007f06:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <Reboot::Run()+0x18>)
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	f000 ff75 	bl	8008df8 <E131Bridge::Stop()>
 8007f0e:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <Reboot::Run()+0x1c>)
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f16:	f004 b987 	b.w	800c228 <WS28xx::Blackout()>
 8007f1a:	bf00      	nop
 8007f1c:	20001900 	andcs	r1, r0, r0, lsl #18
 8007f20:	20001944 	andcs	r1, r0, r4, asr #18

08007f24 <Reboot::~Reboot()>:
 8007f24:	b510      	push	{r4, lr}
 8007f26:	4604      	mov	r4, r0
 8007f28:	f009 ffbe 	bl	8011ea8 <operator delete(void*)>
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	bd10      	pop	{r4, pc}

08007f30 <DisplayHandler::~DisplayHandler()>:
 8007f30:	b510      	push	{r4, lr}
 8007f32:	4604      	mov	r4, r0
 8007f34:	f009 ffb8 	bl	8011ea8 <operator delete(void*)>
 8007f38:	4620      	mov	r0, r4
 8007f3a:	bd10      	pop	{r4, pc}

08007f3c <PixelDmxStartStop::~PixelDmxStartStop()>:
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	4604      	mov	r4, r0
 8007f40:	f009 ffb2 	bl	8011ea8 <operator delete(void*)>
 8007f44:	4620      	mov	r0, r4
 8007f46:	bd10      	pop	{r4, pc}

08007f48 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8007f48:	b110      	cbz	r0, 8007f50 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 8007f4a:	6803      	ldr	r3, [r0, #0]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	4718      	bx	r3
 8007f50:	4770      	bx	lr

08007f52 <Display::PutChar(int) [clone .isra.0]>:
 8007f52:	b110      	cbz	r0, 8007f5a <Display::PutChar(int) [clone .isra.0]+0x8>
 8007f54:	6803      	ldr	r3, [r0, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	4718      	bx	r3
 8007f5a:	4770      	bx	lr

08007f5c <DisplayHandler::Print(unsigned int)>:
 8007f5c:	b538      	push	{r3, r4, r5, lr}
 8007f5e:	7903      	ldrb	r3, [r0, #4]
 8007f60:	b1f3      	cbz	r3, 8007fa0 <DisplayHandler::Print(unsigned int)+0x44>
 8007f62:	2904      	cmp	r1, #4
 8007f64:	bf98      	it	ls
 8007f66:	4b0f      	ldrls	r3, [pc, #60]	; (8007fa4 <DisplayHandler::Print(unsigned int)+0x48>)
 8007f68:	4d0f      	ldr	r5, [pc, #60]	; (8007fa8 <DisplayHandler::Print(unsigned int)+0x4c>)
 8007f6a:	bf98      	it	ls
 8007f6c:	5c5c      	ldrbls	r4, [r3, r1]
 8007f6e:	682b      	ldr	r3, [r5, #0]
 8007f70:	bf88      	it	hi
 8007f72:	2455      	movhi	r4, #85	; 0x55
 8007f74:	6998      	ldr	r0, [r3, #24]
 8007f76:	b178      	cbz	r0, 8007f98 <DisplayHandler::Print(unsigned int)+0x3c>
 8007f78:	7901      	ldrb	r1, [r0, #4]
 8007f7a:	3901      	subs	r1, #1
 8007f7c:	b2c9      	uxtb	r1, r1
 8007f7e:	b168      	cbz	r0, 8007f9c <DisplayHandler::Print(unsigned int)+0x40>
 8007f80:	7942      	ldrb	r2, [r0, #5]
 8007f82:	3a01      	subs	r2, #1
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	f7ff ffdf 	bl	8007f48 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	6998      	ldr	r0, [r3, #24]
 8007f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f94:	f7ff bfdd 	b.w	8007f52 <Display::PutChar(int) [clone .isra.0]>
 8007f98:	4601      	mov	r1, r0
 8007f9a:	e7ee      	b.n	8007f7a <DisplayHandler::Print(unsigned int)+0x1e>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	e7f0      	b.n	8007f82 <DisplayHandler::Print(unsigned int)+0x26>
 8007fa0:	bd38      	pop	{r3, r4, r5, pc}
 8007fa2:	bf00      	nop
 8007fa4:	080141b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, lr}
 8007fa8:	2000a8c0 	andcs	sl, r0, r0, asr #17

08007fac <Display::Printf(unsigned char, char const*, ...)>:
 8007fac:	b40c      	push	{r2, r3}
 8007fae:	b570      	push	{r4, r5, r6, lr}
 8007fb0:	6984      	ldr	r4, [r0, #24]
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	460e      	mov	r6, r1
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	b174      	cbz	r4, 8007fd8 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8007fba:	ab0f      	add	r3, sp, #60	; 0x3c
 8007fbc:	2120      	movs	r1, #32
 8007fbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fc0:	a802      	add	r0, sp, #8
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	f000 fe06 	bl	8008bd4 <vsnprintf>
 8007fc8:	4604      	mov	r4, r0
 8007fca:	69a8      	ldr	r0, [r5, #24]
 8007fcc:	4631      	mov	r1, r6
 8007fce:	6803      	ldr	r3, [r0, #0]
 8007fd0:	aa02      	add	r2, sp, #8
 8007fd2:	69dd      	ldr	r5, [r3, #28]
 8007fd4:	b2a3      	uxth	r3, r4
 8007fd6:	47a8      	blx	r5
 8007fd8:	4620      	mov	r0, r4
 8007fda:	b00a      	add	sp, #40	; 0x28
 8007fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007fe0:	b002      	add	sp, #8
 8007fe2:	4770      	bx	lr

08007fe4 <Display::TextStatus(char const*)>:
 8007fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe8:	4604      	mov	r4, r0
 8007fea:	6980      	ldr	r0, [r0, #24]
 8007fec:	460d      	mov	r5, r1
 8007fee:	b360      	cbz	r0, 800804a <Display::TextStatus(char const*)+0x66>
 8007ff0:	7947      	ldrb	r7, [r0, #5]
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	1e7e      	subs	r6, r7, #1
 8007ff6:	b2f6      	uxtb	r6, r6
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	f890 9004 	ldrb.w	r9, [r0, #4]
 8007ffe:	f04f 0800 	mov.w	r8, #0
 8008002:	f7ff ffa1 	bl	8007f48 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008006:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800800a:	45c1      	cmp	r9, r8
 800800c:	69a0      	ldr	r0, [r4, #24]
 800800e:	d905      	bls.n	800801c <Display::TextStatus(char const*)+0x38>
 8008010:	2120      	movs	r1, #32
 8008012:	f7ff ff9e 	bl	8007f52 <Display::PutChar(int) [clone .isra.0]>
 8008016:	f108 0801 	add.w	r8, r8, #1
 800801a:	e7f6      	b.n	800800a <Display::TextStatus(char const*)+0x26>
 800801c:	4632      	mov	r2, r6
 800801e:	2100      	movs	r1, #0
 8008020:	f7ff ff92 	bl	8007f48 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8008024:	69a0      	ldr	r0, [r4, #24]
 8008026:	b180      	cbz	r0, 800804a <Display::TextStatus(char const*)+0x66>
 8008028:	2300      	movs	r3, #0
 800802a:	7901      	ldrb	r1, [r0, #4]
 800802c:	5cea      	ldrb	r2, [r5, r3]
 800802e:	b11a      	cbz	r2, 8008038 <Display::TextStatus(char const*)+0x54>
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	4299      	cmp	r1, r3
 8008034:	4613      	mov	r3, r2
 8008036:	dcf9      	bgt.n	800802c <Display::TextStatus(char const*)+0x48>
 8008038:	6802      	ldr	r2, [r0, #0]
 800803a:	4639      	mov	r1, r7
 800803c:	69d4      	ldr	r4, [r2, #28]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	462a      	mov	r2, r5
 8008042:	46a4      	mov	ip, r4
 8008044:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008048:	4760      	bx	ip
 800804a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800804e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 800804e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008050:	4605      	mov	r5, r0
 8008052:	461e      	mov	r6, r3
 8008054:	460f      	mov	r7, r1
 8008056:	4614      	mov	r4, r2
 8008058:	f7ff ffc4 	bl	8007fe4 <Display::TextStatus(char const*)>
 800805c:	7c6b      	ldrb	r3, [r5, #17]
 800805e:	b19b      	cbz	r3, 8008088 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 8008060:	43e2      	mvns	r2, r4
 8008062:	2312      	movs	r3, #18
 8008064:	7a28      	ldrb	r0, [r5, #8]
 8008066:	f88d 3004 	strb.w	r3, [sp, #4]
 800806a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800806e:	f88d 3005 	strb.w	r3, [sp, #5]
 8008072:	f88d 2006 	strb.w	r2, [sp, #6]
 8008076:	f00a ff0d 	bl	8012e94 <gd32_i2c_set_address(unsigned char)>
 800807a:	68e8      	ldr	r0, [r5, #12]
 800807c:	f00a ff02 	bl	8012e84 <gd32_i2c_set_baudrate(unsigned int)>
 8008080:	2103      	movs	r1, #3
 8008082:	a801      	add	r0, sp, #4
 8008084:	f00a ff0c 	bl	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 8008088:	1c73      	adds	r3, r6, #1
 800808a:	d006      	beq.n	800809a <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 800808c:	4639      	mov	r1, r7
 800808e:	4630      	mov	r0, r6
 8008090:	b003      	add	sp, #12
 8008092:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008096:	f009 bdbb 	b.w	8011c10 <console_status>
 800809a:	b003      	add	sp, #12
 800809c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080080a0 <main>:
 80080a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080a4:	2501      	movs	r5, #1
 80080a6:	f6ad 6dbc 	subw	sp, sp, #3772	; 0xebc
 80080aa:	a80d      	add	r0, sp, #52	; 0x34
 80080ac:	f009 fe52 	bl	8011d54 <Hardware::Hardware()>
 80080b0:	a86d      	add	r0, sp, #436	; 0x1b4
 80080b2:	f007 fa63 	bl	800f57c <Network::Network()>
 80080b6:	a811      	add	r0, sp, #68	; 0x44
 80080b8:	f009 fe08 	bl	8011ccc <LedBlink::LedBlink()>
 80080bc:	a857      	add	r0, sp, #348	; 0x15c
 80080be:	f008 fc57 	bl	8010970 <DisplayUdf::DisplayUdf()>
 80080c2:	4a87      	ldr	r2, [pc, #540]	; (80082e0 <main+0x240>)
 80080c4:	4b87      	ldr	r3, [pc, #540]	; (80082e4 <main+0x244>)
 80080c6:	4988      	ldr	r1, [pc, #544]	; (80082e8 <main+0x248>)
 80080c8:	a805      	add	r0, sp, #20
 80080ca:	f009 fdb9 	bl	8011c40 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 80080ce:	a806      	add	r0, sp, #24
 80080d0:	f005 fe7c 	bl	800ddcc <FlashRom::FlashRom()>
 80080d4:	4e85      	ldr	r6, [pc, #532]	; (80082ec <main+0x24c>)
 80080d6:	a807      	add	r0, sp, #28
 80080d8:	f005 fb4a 	bl	800d770 <SpiFlashStore::SpiFlashStore()>
 80080dc:	4984      	ldr	r1, [pc, #528]	; (80082f0 <main+0x250>)
 80080de:	a805      	add	r0, sp, #20
 80080e0:	f009 fde6 	bl	8011cb0 <FirmwareVersion::Print(char const*)>
 80080e4:	2004      	movs	r0, #4
 80080e6:	6135      	str	r5, [r6, #16]
 80080e8:	f009 fee2 	bl	8011eb0 <operator new(unsigned int)>
 80080ec:	4b81      	ldr	r3, [pc, #516]	; (80082f4 <main+0x254>)
 80080ee:	900d      	str	r0, [sp, #52]	; 0x34
 80080f0:	6003      	str	r3, [r0, #0]
 80080f2:	2008      	movs	r0, #8
 80080f4:	f009 fedc 	bl	8011eb0 <operator new(unsigned int)>
 80080f8:	4b7f      	ldr	r3, [pc, #508]	; (80082f8 <main+0x258>)
 80080fa:	2400      	movs	r4, #0
 80080fc:	6003      	str	r3, [r0, #0]
 80080fe:	4b7f      	ldr	r3, [pc, #508]	; (80082fc <main+0x25c>)
 8008100:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	497e      	ldr	r1, [pc, #504]	; (8008300 <main+0x260>)
 8008108:	3b00      	subs	r3, #0
 800810a:	bf18      	it	ne
 800810c:	2301      	movne	r3, #1
 800810e:	9013      	str	r0, [sp, #76]	; 0x4c
 8008110:	7103      	strb	r3, [r0, #4]
 8008112:	2303      	movs	r3, #3
 8008114:	a857      	add	r0, sp, #348	; 0x15c
 8008116:	f7ff ff9a 	bl	800804e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800811a:	a80f      	add	r0, sp, #60	; 0x3c
 800811c:	f005 fd38 	bl	800db90 <StoreNetwork::StoreNetwork()>
 8008120:	ab10      	add	r3, sp, #64	; 0x40
 8008122:	a90f      	add	r1, sp, #60	; 0x3c
 8008124:	a86d      	add	r0, sp, #436	; 0x1b4
 8008126:	939a      	str	r3, [sp, #616]	; 0x268
 8008128:	f007 fa80 	bl	800f62c <Network::Init(NetworkParamsStore*)>
 800812c:	a86d      	add	r0, sp, #436	; 0x1b4
 800812e:	f007 fbad 	bl	800f88c <Network::Print()>
 8008132:	a808      	add	r0, sp, #32
 8008134:	f006 fe5c 	bl	800edf0 <MDNS::MDNS()>
 8008138:	a808      	add	r0, sp, #32
 800813a:	f006 ff1d 	bl	800ef78 <MDNS::Start()>
 800813e:	f642 1305 	movw	r3, #10501	; 0x2905
 8008142:	4621      	mov	r1, r4
 8008144:	4a6f      	ldr	r2, [pc, #444]	; (8008304 <main+0x264>)
 8008146:	e9cd 4400 	strd	r4, r4, [sp]
 800814a:	a808      	add	r0, sp, #32
 800814c:	f007 f880 	bl	800f250 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008150:	4b6d      	ldr	r3, [pc, #436]	; (8008308 <main+0x268>)
 8008152:	4621      	mov	r1, r4
 8008154:	4a6d      	ldr	r2, [pc, #436]	; (800830c <main+0x26c>)
 8008156:	e9cd 5300 	strd	r5, r3, [sp]
 800815a:	a808      	add	r0, sp, #32
 800815c:	2350      	movs	r3, #80	; 0x50
 800815e:	f007 f877 	bl	800f250 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8008162:	a808      	add	r0, sp, #32
 8008164:	f007 f9ba 	bl	800f4dc <MDNS::Print()>
 8008168:	2303      	movs	r3, #3
 800816a:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 800816e:	4968      	ldr	r1, [pc, #416]	; (8008310 <main+0x270>)
 8008170:	a857      	add	r0, sp, #348	; 0x15c
 8008172:	f7ff ff6c 	bl	800804e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008176:	a80a      	add	r0, sp, #40	; 0x28
 8008178:	f005 fc5e 	bl	800da38 <StoreE131::StoreE131()>
 800817c:	a90a      	add	r1, sp, #40	; 0x28
 800817e:	a81f      	add	r0, sp, #124	; 0x7c
 8008180:	f001 fd8c 	bl	8009c9c <E131Params::E131Params(E131ParamsStore*)>
 8008184:	f60d 0068 	addw	r0, sp, #2152	; 0x868
 8008188:	f000 fe86 	bl	8008e98 <E131Bridge::E131Bridge()>
 800818c:	a81f      	add	r0, sp, #124	; 0x7c
 800818e:	f001 fda5 	bl	8009cdc <E131Params::Load()>
 8008192:	b138      	cbz	r0, 80081a4 <main+0x104>
 8008194:	a81f      	add	r0, sp, #124	; 0x7c
 8008196:	f60d 0168 	addw	r1, sp, #2152	; 0x868
 800819a:	f001 ffe0 	bl	800a15e <E131Params::Set(E131Bridge*)>
 800819e:	a81f      	add	r0, sp, #124	; 0x7c
 80081a0:	f002 f816 	bl	800a1d0 <E131Params::Dump()>
 80081a4:	4d5b      	ldr	r5, [pc, #364]	; (8008314 <main+0x274>)
 80081a6:	ac17      	add	r4, sp, #92	; 0x5c
 80081a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80081b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80081b4:	2008      	movs	r0, #8
 80081b6:	f009 fe7b 	bl	8011eb0 <operator new(unsigned int)>
 80081ba:	4604      	mov	r4, r0
 80081bc:	f005 fdfa 	bl	800ddb4 <StoreWS28xxDmx::StoreWS28xxDmx()>
 80081c0:	4621      	mov	r1, r4
 80081c2:	a83b      	add	r0, sp, #236	; 0xec
 80081c4:	f002 fa50 	bl	800a668 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 80081c8:	a83b      	add	r0, sp, #236	; 0xec
 80081ca:	f002 fa75 	bl	800a6b8 <WS28xxDmxParams::Load()>
 80081ce:	b130      	cbz	r0, 80081de <main+0x13e>
 80081d0:	a83b      	add	r0, sp, #236	; 0xec
 80081d2:	a917      	add	r1, sp, #92	; 0x5c
 80081d4:	f002 fcf3 	bl	800abbe <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 80081d8:	a83b      	add	r0, sp, #236	; 0xec
 80081da:	f002 fd26 	bl	800ac2a <WS28xxDmxParams::Dump()>
 80081de:	a917      	add	r1, sp, #92	; 0x5c
 80081e0:	a846      	add	r0, sp, #280	; 0x118
 80081e2:	f002 f947 	bl	800a474 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 80081e6:	2004      	movs	r0, #4
 80081e8:	f009 fe62 	bl	8011eb0 <operator new(unsigned int)>
 80081ec:	4b4a      	ldr	r3, [pc, #296]	; (8008318 <main+0x278>)
 80081ee:	4604      	mov	r4, r0
 80081f0:	6003      	str	r3, [r0, #0]
 80081f2:	2203      	movs	r2, #3
 80081f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081f8:	2110      	movs	r1, #16
 80081fa:	4848      	ldr	r0, [pc, #288]	; (800831c <main+0x27c>)
 80081fc:	f00a f9b2 	bl	8012564 <gpio_init>
 8008200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008204:	4b46      	ldr	r3, [pc, #280]	; (8008320 <main+0x280>)
 8008206:	2101      	movs	r1, #1
 8008208:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800820c:	f89d 5116 	ldrb.w	r5, [sp, #278]	; 0x116
 8008210:	a809      	add	r0, sp, #36	; 0x24
 8008212:	9455      	str	r4, [sp, #340]	; 0x154
 8008214:	f002 fe24 	bl	800ae60 <PixelPatterns::PixelPatterns(unsigned int)>
 8008218:	4b42      	ldr	r3, [pc, #264]	; (8008324 <main+0x284>)
 800821a:	2d05      	cmp	r5, #5
 800821c:	601d      	str	r5, [r3, #0]
 800821e:	f340 816f 	ble.w	8008500 <main+0x460>
 8008222:	2401      	movs	r4, #1
 8008224:	f8bd 7106 	ldrh.w	r7, [sp, #262]	; 0x106
 8008228:	2201      	movs	r2, #1
 800822a:	463b      	mov	r3, r7
 800822c:	2100      	movs	r1, #0
 800822e:	f60d 0068 	addw	r0, sp, #2152	; 0x868
 8008232:	f000 fed1 	bl	8008fd8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008236:	f8dd 8134 	ldr.w	r8, [sp, #308]	; 0x134
 800823a:	45a0      	cmp	r8, r4
 800823c:	d97c      	bls.n	8008338 <main+0x298>
 800823e:	193b      	adds	r3, r7, r4
 8008240:	4621      	mov	r1, r4
 8008242:	2201      	movs	r2, #1
 8008244:	b29b      	uxth	r3, r3
 8008246:	f60d 0068 	addw	r0, sp, #2152	; 0x868
 800824a:	f000 fec5 	bl	8008fd8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800824e:	3401      	adds	r4, #1
 8008250:	e7f3      	b.n	800823a <main+0x19a>
 8008252:	2300      	movs	r3, #0
 8008254:	2264      	movs	r2, #100	; 0x64
 8008256:	4619      	mov	r1, r3
 8008258:	a809      	add	r0, sp, #36	; 0x24
 800825a:	f002 fe2d 	bl	800aeb8 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 800825e:	e7e0      	b.n	8008222 <main+0x182>
 8008260:	2200      	movs	r2, #0
 8008262:	2364      	movs	r3, #100	; 0x64
 8008264:	4611      	mov	r1, r2
 8008266:	e9cd 3200 	strd	r3, r2, [sp]
 800826a:	a809      	add	r0, sp, #36	; 0x24
 800826c:	4b2e      	ldr	r3, [pc, #184]	; (8008328 <main+0x288>)
 800826e:	f002 fe37 	bl	800aee0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008272:	e7d6      	b.n	8008222 <main+0x182>
 8008274:	2100      	movs	r1, #0
 8008276:	2364      	movs	r3, #100	; 0x64
 8008278:	4a2b      	ldr	r2, [pc, #172]	; (8008328 <main+0x288>)
 800827a:	9100      	str	r1, [sp, #0]
 800827c:	a809      	add	r0, sp, #36	; 0x24
 800827e:	f002 fe4b 	bl	800af18 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 8008282:	e7ce      	b.n	8008222 <main+0x182>
 8008284:	2364      	movs	r3, #100	; 0x64
 8008286:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800828a:	2100      	movs	r1, #0
 800828c:	a809      	add	r0, sp, #36	; 0x24
 800828e:	f002 fe5d 	bl	800af4c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8008292:	e7c6      	b.n	8008222 <main+0x182>
 8008294:	2200      	movs	r2, #0
 8008296:	2364      	movs	r3, #100	; 0x64
 8008298:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800829c:	230a      	movs	r3, #10
 800829e:	4611      	mov	r1, r2
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	a809      	add	r0, sp, #36	; 0x24
 80082a4:	4b20      	ldr	r3, [pc, #128]	; (8008328 <main+0x288>)
 80082a6:	f002 fe83 	bl	800afb0 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 80082aa:	e7ba      	b.n	8008222 <main+0x182>
 80082ac:	2400      	movs	r4, #0
 80082ae:	4627      	mov	r7, r4
 80082b0:	4b1e      	ldr	r3, [pc, #120]	; (800832c <main+0x28c>)
 80082b2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8008330 <main+0x290>
 80082b6:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8008334 <main+0x294>
 80082ba:	61dc      	str	r4, [r3, #28]
 80082bc:	f8d9 3000 	ldr.w	r3, [r9]
 80082c0:	f8d8 0000 	ldr.w	r0, [r8]
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	d907      	bls.n	80082d8 <main+0x238>
 80082c8:	2300      	movs	r3, #0
 80082ca:	4621      	mov	r1, r4
 80082cc:	461a      	mov	r2, r3
 80082ce:	9700      	str	r7, [sp, #0]
 80082d0:	f003 f94e 	bl	800b570 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80082d4:	3401      	adds	r4, #1
 80082d6:	e7f1      	b.n	80082bc <main+0x21c>
 80082d8:	f003 ff8a 	bl	800c1f0 <WS28xx::Update()>
 80082dc:	e7a1      	b.n	8008222 <main+0x182>
 80082de:	bf00      	nop
 80082e0:	080140ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, lr}
 80082e4:	080140e4 	stmdaeq	r1, {r2, r5, r6, r7, lr}
 80082e8:	080141bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, lr}
 80082ec:	40011000 	andmi	r1, r1, r0
 80082f0:	080140f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, lr}
 80082f4:	080141ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, lr}
 80082f8:	08014180 	stmdaeq	r1, {r7, r8, lr}
 80082fc:	2000a8c0 	andcs	sl, r0, r0, asr #17
 8008300:	08015817 	stmdaeq	r1, {r0, r1, r2, r4, fp, ip, lr}
 8008304:	08014130 	stmdaeq	r1, {r4, r5, r8, lr}
 8008308:	08014140 	stmdaeq	r1, {r6, r8, lr}
 800830c:	08014139 	stmdaeq	r1, {r0, r3, r4, r5, r8, lr}
 8008310:	080142bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, lr}
 8008314:	080140ac 	stmdaeq	r1, {r2, r3, r5, r7, lr}
 8008318:	08014194 	stmdaeq	r1, {r2, r4, r7, r8, lr}
 800831c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8008320:	40010000 	andmi	r0, r1, r0
 8008324:	2000193c 	andcs	r1, r0, ip, lsr r9
 8008328:	00646464 	rsbeq	r6, r4, r4, ror #8
 800832c:	2000190c 	andcs	r1, r0, ip, lsl #18
 8008330:	20001938 	andcs	r1, r0, r8, lsr r9
 8008334:	20001934 	andcs	r1, r0, r4, lsr r9
 8008338:	4b7a      	ldr	r3, [pc, #488]	; (8008524 <main+0x484>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f040 80dd 	bne.w	80084fc <main+0x45c>
 8008342:	ab46      	add	r3, sp, #280	; 0x118
 8008344:	f60d 0068 	addw	r0, sp, #2152	; 0x868
 8008348:	f8cd 386c 	str.w	r3, [sp, #2156]	; 0x86c
 800834c:	f001 fbdc 	bl	8009b08 <E131Bridge::Print()>
 8008350:	a846      	add	r0, sp, #280	; 0x118
 8008352:	f002 fc6b 	bl	800ac2c <WS28xxDmx::Print()>
 8008356:	4974      	ldr	r1, [pc, #464]	; (8008528 <main+0x488>)
 8008358:	a857      	add	r0, sp, #348	; 0x15c
 800835a:	f008 fb1f 	bl	801099c <DisplayUdf::SetTitle(char const*, ...)>
 800835e:	2202      	movs	r2, #2
 8008360:	a857      	add	r0, sp, #348	; 0x15c
 8008362:	4611      	mov	r1, r2
 8008364:	f008 fc70 	bl	8010c48 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008368:	2207      	movs	r2, #7
 800836a:	2103      	movs	r1, #3
 800836c:	a857      	add	r0, sp, #348	; 0x15c
 800836e:	f008 fc6b 	bl	8010c48 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008372:	2203      	movs	r2, #3
 8008374:	2104      	movs	r1, #4
 8008376:	a857      	add	r0, sp, #348	; 0x15c
 8008378:	f008 fc66 	bl	8010c48 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800837c:	2208      	movs	r2, #8
 800837e:	2105      	movs	r1, #5
 8008380:	a857      	add	r0, sp, #348	; 0x15c
 8008382:	f008 fc61 	bl	8010c48 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008386:	2205      	movs	r2, #5
 8008388:	2106      	movs	r1, #6
 800838a:	a857      	add	r0, sp, #348	; 0x15c
 800838c:	f008 fc5c 	bl	8010c48 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008390:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008392:	f002 ffcd 	bl	800b330 <PixelType::GetType(pixel::Type)>
 8008396:	4604      	mov	r4, r0
 8008398:	9819      	ldr	r0, [sp, #100]	; 0x64
 800839a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800839c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80083a0:	f003 f81e 	bl	800b3e0 <PixelType::GetMap(pixel::Map)>
 80083a4:	4623      	mov	r3, r4
 80083a6:	2107      	movs	r1, #7
 80083a8:	4a60      	ldr	r2, [pc, #384]	; (800852c <main+0x48c>)
 80083aa:	e9cd 8001 	strd	r8, r0, [sp, #4]
 80083ae:	9700      	str	r7, [sp, #0]
 80083b0:	a857      	add	r0, sp, #348	; 0x15c
 80083b2:	f7ff fdfb 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 80083b6:	a80b      	add	r0, sp, #44	; 0x2c
 80083b8:	f005 fb0a 	bl	800d9d0 <StoreDisplayUdf::StoreDisplayUdf()>
 80083bc:	a90b      	add	r1, sp, #44	; 0x2c
 80083be:	a831      	add	r0, sp, #196	; 0xc4
 80083c0:	f008 fc84 	bl	8010ccc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80083c4:	a831      	add	r0, sp, #196	; 0xc4
 80083c6:	f008 fc8e 	bl	8010ce6 <DisplayUdfParams::Load()>
 80083ca:	b130      	cbz	r0, 80083da <main+0x33a>
 80083cc:	a831      	add	r0, sp, #196	; 0xc4
 80083ce:	a957      	add	r1, sp, #348	; 0x15c
 80083d0:	f008 fdbf 	bl	8010f52 <DisplayUdfParams::Set(DisplayUdf*)>
 80083d4:	a831      	add	r0, sp, #196	; 0xc4
 80083d6:	f008 fdef 	bl	8010fb8 <DisplayUdfParams::Dump()>
 80083da:	f60d 0168 	addw	r1, sp, #2152	; 0x868
 80083de:	a857      	add	r0, sp, #348	; 0x15c
 80083e0:	f008 fdec 	bl	8010fbc <DisplayUdf::Show(E131Bridge*)>
 80083e4:	b17d      	cbz	r5, 8008406 <main+0x366>
 80083e6:	985d      	ldr	r0, [sp, #372]	; 0x174
 80083e8:	b118      	cbz	r0, 80083f2 <main+0x352>
 80083ea:	6803      	ldr	r3, [r0, #0]
 80083ec:	2106      	movs	r1, #6
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	4798      	blx	r3
 80083f2:	4628      	mov	r0, r5
 80083f4:	f002 fd54 	bl	800aea0 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 80083f8:	2106      	movs	r1, #6
 80083fa:	4603      	mov	r3, r0
 80083fc:	4a4c      	ldr	r2, [pc, #304]	; (8008530 <main+0x490>)
 80083fe:	9500      	str	r5, [sp, #0]
 8008400:	a857      	add	r0, sp, #348	; 0x15c
 8008402:	f7ff fdd3 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 8008406:	2203      	movs	r2, #3
 8008408:	2101      	movs	r1, #1
 800840a:	f89d 3d73 	ldrb.w	r3, [sp, #3443]	; 0xd73
 800840e:	a89f      	add	r0, sp, #636	; 0x27c
 8008410:	f004 f854 	bl	800c4bc <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008414:	a80c      	add	r0, sp, #48	; 0x30
 8008416:	f005 fbf1 	bl	800dbfc <StoreRemoteConfig::StoreRemoteConfig()>
 800841a:	a90c      	add	r1, sp, #48	; 0x30
 800841c:	a828      	add	r0, sp, #160	; 0xa0
 800841e:	f004 fb15 	bl	800ca4c <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008422:	a828      	add	r0, sp, #160	; 0xa0
 8008424:	f004 fb1c 	bl	800ca60 <RemoteConfigParams::Load()>
 8008428:	b130      	cbz	r0, 8008438 <main+0x398>
 800842a:	a828      	add	r0, sp, #160	; 0xa0
 800842c:	a99f      	add	r1, sp, #636	; 0x27c
 800842e:	f004 fc3e 	bl	800ccae <RemoteConfigParams::Set(RemoteConfig*)>
 8008432:	a828      	add	r0, sp, #160	; 0xa0
 8008434:	f004 fc5b 	bl	800ccee <RemoteConfigParams::Dump()>
 8008438:	a807      	add	r0, sp, #28
 800843a:	f005 fa45 	bl	800d8c8 <SpiFlashStore::Flash()>
 800843e:	2800      	cmp	r0, #0
 8008440:	d1fa      	bne.n	8008438 <main+0x398>
 8008442:	2303      	movs	r3, #3
 8008444:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008448:	493a      	ldr	r1, [pc, #232]	; (8008534 <main+0x494>)
 800844a:	a857      	add	r0, sp, #348	; 0x15c
 800844c:	f7ff fdff 	bl	800804e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008450:	f60d 0068 	addw	r0, sp, #2152	; 0x868
 8008454:	f000 fc94 	bl	8008d80 <E131Bridge::Start()>
 8008458:	2302      	movs	r3, #2
 800845a:	f248 0280 	movw	r2, #32896	; 0x8080
 800845e:	4936      	ldr	r1, [pc, #216]	; (8008538 <main+0x498>)
 8008460:	a857      	add	r0, sp, #348	; 0x15c
 8008462:	f7ff fdf4 	bl	800804e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008466:	2102      	movs	r1, #2
 8008468:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800846c:	f00a f850 	bl	8012510 <fwdgt_config>
 8008470:	2801      	cmp	r0, #1
 8008472:	bf0c      	ite	eq
 8008474:	2301      	moveq	r3, #1
 8008476:	2300      	movne	r3, #0
 8008478:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 800847c:	d101      	bne.n	8008482 <main+0x3e2>
 800847e:	f00a f837 	bl	80124f0 <fwdgt_enable>
 8008482:	2501      	movs	r5, #1
 8008484:	4c2d      	ldr	r4, [pc, #180]	; (800853c <main+0x49c>)
 8008486:	4f27      	ldr	r7, [pc, #156]	; (8008524 <main+0x484>)
 8008488:	f00a f83a 	bl	8012500 <fwdgt_counter_reload>
 800848c:	f005 fe76 	bl	800e17c <net_handle>
 8008490:	f60d 0068 	addw	r0, sp, #2152	; 0x868
 8008494:	f001 f8e4 	bl	8009660 <E131Bridge::Run()>
 8008498:	a89f      	add	r0, sp, #636	; 0x27c
 800849a:	f004 f9ab 	bl	800c7f4 <RemoteConfig::Run()>
 800849e:	a807      	add	r0, sp, #28
 80084a0:	f005 fa12 	bl	800d8c8 <SpiFlashStore::Flash()>
 80084a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084a6:	b172      	cbz	r2, 80084c6 <main+0x426>
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80084ac:	1a5b      	subs	r3, r3, r1
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d809      	bhi.n	80084c6 <main+0x426>
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	9316      	str	r3, [sp, #88]	; 0x58
 80084b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	f083 0201 	eor.w	r2, r3, #1
 80084be:	9215      	str	r2, [sp, #84]	; 0x54
 80084c0:	bf14      	ite	ne
 80084c2:	6135      	strne	r5, [r6, #16]
 80084c4:	6173      	streq	r3, [r6, #20]
 80084c6:	9a5c      	ldr	r2, [sp, #368]	; 0x170
 80084c8:	b17a      	cbz	r2, 80084ea <main+0x44a>
 80084ca:	f89d 316c 	ldrb.w	r3, [sp, #364]	; 0x16c
 80084ce:	b963      	cbnz	r3, 80084ea <main+0x44a>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	9958      	ldr	r1, [sp, #352]	; 0x160
 80084d4:	1a5b      	subs	r3, r3, r1
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d207      	bcs.n	80084ea <main+0x44a>
 80084da:	985d      	ldr	r0, [sp, #372]	; 0x174
 80084dc:	b128      	cbz	r0, 80084ea <main+0x44a>
 80084de:	6803      	ldr	r3, [r0, #0]
 80084e0:	2101      	movs	r1, #1
 80084e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e4:	f88d 516c 	strb.w	r5, [sp, #364]	; 0x16c
 80084e8:	4798      	blx	r3
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	b113      	cbz	r3, 80084f4 <main+0x454>
 80084ee:	a809      	add	r0, sp, #36	; 0x24
 80084f0:	f002 fef4 	bl	800b2dc <PixelPatterns::Run()>
 80084f4:	a808      	add	r0, sp, #32
 80084f6:	f006 ffcd 	bl	800f494 <MDNS::Run()>
 80084fa:	e7c5      	b.n	8008488 <main+0x3e8>
 80084fc:	2300      	movs	r3, #0
 80084fe:	e721      	b.n	8008344 <main+0x2a4>
 8008500:	2d05      	cmp	r5, #5
 8008502:	f63f ae8e 	bhi.w	8008222 <main+0x182>
 8008506:	a301      	add	r3, pc, #4	; (adr r3, 800850c <main+0x46c>)
 8008508:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 800850c:	080082ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r9, pc}
 8008510:	08008253 	stmdaeq	r0, {r0, r1, r4, r6, r9, pc}
 8008514:	08008261 	stmdaeq	r0, {r0, r5, r6, r9, pc}
 8008518:	08008275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, pc}
 800851c:	08008285 	stmdaeq	r0, {r0, r2, r7, r9, pc}
 8008520:	08008295 	stmdaeq	r0, {r0, r2, r4, r7, r9, pc}
 8008524:	2000193c 	andcs	r1, r0, ip, lsr r9
 8008528:	08014156 	stmdaeq	r1, {r1, r2, r4, r6, r8, lr}
 800852c:	08014163 	stmdaeq	r1, {r0, r1, r5, r6, r8, lr}
 8008530:	08014170 	stmdaeq	r1, {r4, r5, r6, r8, lr}
 8008534:	080142a9 	stmdaeq	r1, {r0, r3, r5, r7, r9, lr}
 8008538:	080142d4 	stmdaeq	r1, {r2, r4, r6, r7, r9, lr}
 800853c:	2000a9c4 	andcs	sl, r0, r4, asr #19

08008540 <_itostr>:
 8008540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008542:	0fc7      	lsrs	r7, r0, #31
 8008544:	b091      	sub	sp, #68	; 0x44
 8008546:	bf18      	it	ne
 8008548:	4240      	negne	r0, r0
 800854a:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 800854e:	b9c8      	cbnz	r0, 8008584 <_itostr+0x44>
 8008550:	2330      	movs	r3, #48	; 0x30
 8008552:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008556:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800855a:	b132      	cbz	r2, 800856a <_itostr+0x2a>
 800855c:	4668      	mov	r0, sp
 800855e:	2530      	movs	r5, #48	; 0x30
 8008560:	1ae6      	subs	r6, r4, r3
 8008562:	4296      	cmp	r6, r2
 8008564:	da01      	bge.n	800856a <_itostr+0x2a>
 8008566:	4283      	cmp	r3, r0
 8008568:	d81c      	bhi.n	80085a4 <_itostr+0x64>
 800856a:	b117      	cbz	r7, 8008572 <_itostr+0x32>
 800856c:	222d      	movs	r2, #45	; 0x2d
 800856e:	f803 2901 	strb.w	r2, [r3], #-1
 8008572:	3301      	adds	r3, #1
 8008574:	1ae0      	subs	r0, r4, r3
 8008576:	3901      	subs	r1, #1
 8008578:	aa10      	add	r2, sp, #64	; 0x40
 800857a:	4293      	cmp	r3, r2
 800857c:	d315      	bcc.n	80085aa <_itostr+0x6a>
 800857e:	3001      	adds	r0, #1
 8008580:	b011      	add	sp, #68	; 0x44
 8008582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008584:	4623      	mov	r3, r4
 8008586:	250a      	movs	r5, #10
 8008588:	46ec      	mov	ip, sp
 800858a:	fb90 f6f5 	sdiv	r6, r0, r5
 800858e:	fb05 0016 	mls	r0, r5, r6, r0
 8008592:	3030      	adds	r0, #48	; 0x30
 8008594:	f803 0901 	strb.w	r0, [r3], #-1
 8008598:	4630      	mov	r0, r6
 800859a:	2e00      	cmp	r6, #0
 800859c:	d0dd      	beq.n	800855a <_itostr+0x1a>
 800859e:	4563      	cmp	r3, ip
 80085a0:	d1f3      	bne.n	800858a <_itostr+0x4a>
 80085a2:	e7da      	b.n	800855a <_itostr+0x1a>
 80085a4:	f803 5901 	strb.w	r5, [r3], #-1
 80085a8:	e7da      	b.n	8008560 <_itostr+0x20>
 80085aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ae:	f801 2f01 	strb.w	r2, [r1, #1]!
 80085b2:	e7e1      	b.n	8008578 <_itostr+0x38>

080085b4 <_xputch>:
 80085b4:	4603      	mov	r3, r0
 80085b6:	b410      	push	{r4}
 80085b8:	4c08      	ldr	r4, [pc, #32]	; (80085dc <_xputch+0x28>)
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	4608      	mov	r0, r1
 80085be:	6821      	ldr	r1, [r4, #0]
 80085c0:	3201      	adds	r2, #1
 80085c2:	60da      	str	r2, [r3, #12]
 80085c4:	b139      	cbz	r1, 80085d6 <_xputch+0x22>
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	da02      	bge.n	80085d2 <_xputch+0x1e>
 80085cc:	1c4b      	adds	r3, r1, #1
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	7008      	strb	r0, [r1, #0]
 80085d2:	bc10      	pop	{r4}
 80085d4:	4770      	bx	lr
 80085d6:	bc10      	pop	{r4}
 80085d8:	f009 bad8 	b.w	8011b8c <console_putc>
 80085dc:	200000e8 	andcs	r0, r0, r8, ror #1

080085e0 <_format_int>:
 80085e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	461f      	mov	r7, r3
 80085e6:	b091      	sub	sp, #68	; 0x44
 80085e8:	ea52 0307 	orrs.w	r3, r2, r7
 80085ec:	4680      	mov	r8, r0
 80085ee:	4616      	mov	r6, r2
 80085f0:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 80085f4:	d138      	bne.n	8008668 <_format_int+0x88>
 80085f6:	2330      	movs	r3, #48	; 0x30
 80085f8:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 80085fc:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8008600:	f8d8 3000 	ldr.w	r3, [r8]
 8008604:	07d8      	lsls	r0, r3, #31
 8008606:	d508      	bpl.n	800861a <_format_int+0x3a>
 8008608:	466a      	mov	r2, sp
 800860a:	2030      	movs	r0, #48	; 0x30
 800860c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008610:	1b2e      	subs	r6, r5, r4
 8008612:	428e      	cmp	r6, r1
 8008614:	da01      	bge.n	800861a <_format_int+0x3a>
 8008616:	4294      	cmp	r4, r2
 8008618:	d843      	bhi.n	80086a2 <_format_int+0xc2>
 800861a:	0699      	lsls	r1, r3, #26
 800861c:	d508      	bpl.n	8008630 <_format_int+0x50>
 800861e:	466a      	mov	r2, sp
 8008620:	2030      	movs	r0, #48	; 0x30
 8008622:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8008626:	1b2e      	subs	r6, r5, r4
 8008628:	428e      	cmp	r6, r1
 800862a:	da01      	bge.n	8008630 <_format_int+0x50>
 800862c:	4294      	cmp	r4, r2
 800862e:	d83b      	bhi.n	80086a8 <_format_int+0xc8>
 8008630:	071a      	lsls	r2, r3, #28
 8008632:	bf44      	itt	mi
 8008634:	222d      	movmi	r2, #45	; 0x2d
 8008636:	f804 2901 	strbmi.w	r2, [r4], #-1
 800863a:	065b      	lsls	r3, r3, #25
 800863c:	d408      	bmi.n	8008650 <_format_int+0x70>
 800863e:	466b      	mov	r3, sp
 8008640:	2120      	movs	r1, #32
 8008642:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8008646:	1b28      	subs	r0, r5, r4
 8008648:	4290      	cmp	r0, r2
 800864a:	da01      	bge.n	8008650 <_format_int+0x70>
 800864c:	429c      	cmp	r4, r3
 800864e:	d82e      	bhi.n	80086ae <_format_int+0xce>
 8008650:	1b2d      	subs	r5, r5, r4
 8008652:	3401      	adds	r4, #1
 8008654:	ab10      	add	r3, sp, #64	; 0x40
 8008656:	429c      	cmp	r4, r3
 8008658:	d32c      	bcc.n	80086b4 <_format_int+0xd4>
 800865a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800865e:	42ab      	cmp	r3, r5
 8008660:	dc2e      	bgt.n	80086c0 <_format_int+0xe0>
 8008662:	b011      	add	sp, #68	; 0x44
 8008664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008668:	462c      	mov	r4, r5
 800866a:	46eb      	mov	fp, sp
 800866c:	4630      	mov	r0, r6
 800866e:	4639      	mov	r1, r7
 8008670:	220a      	movs	r2, #10
 8008672:	2300      	movs	r3, #0
 8008674:	f7fe ff66 	bl	8007544 <__aeabi_uldivmod>
 8008678:	46b2      	mov	sl, r6
 800867a:	3230      	adds	r2, #48	; 0x30
 800867c:	46b9      	mov	r9, r7
 800867e:	2300      	movs	r3, #0
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	f804 2901 	strb.w	r2, [r4], #-1
 8008688:	220a      	movs	r2, #10
 800868a:	f7fe ff5b 	bl	8007544 <__aeabi_uldivmod>
 800868e:	f1ba 0f0a 	cmp.w	sl, #10
 8008692:	f179 0300 	sbcs.w	r3, r9, #0
 8008696:	4606      	mov	r6, r0
 8008698:	460f      	mov	r7, r1
 800869a:	d3b1      	bcc.n	8008600 <_format_int+0x20>
 800869c:	455c      	cmp	r4, fp
 800869e:	d1e5      	bne.n	800866c <_format_int+0x8c>
 80086a0:	e7ae      	b.n	8008600 <_format_int+0x20>
 80086a2:	f804 0901 	strb.w	r0, [r4], #-1
 80086a6:	e7b3      	b.n	8008610 <_format_int+0x30>
 80086a8:	f804 0901 	strb.w	r0, [r4], #-1
 80086ac:	e7bb      	b.n	8008626 <_format_int+0x46>
 80086ae:	f804 1901 	strb.w	r1, [r4], #-1
 80086b2:	e7c8      	b.n	8008646 <_format_int+0x66>
 80086b4:	4640      	mov	r0, r8
 80086b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ba:	f7ff ff7b 	bl	80085b4 <_xputch>
 80086be:	e7c9      	b.n	8008654 <_format_int+0x74>
 80086c0:	2120      	movs	r1, #32
 80086c2:	4640      	mov	r0, r8
 80086c4:	f7ff ff76 	bl	80085b4 <_xputch>
 80086c8:	3501      	adds	r5, #1
 80086ca:	e7c6      	b.n	800865a <_format_int+0x7a>

080086cc <_format_hex>:
 80086cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ce:	b091      	sub	sp, #68	; 0x44
 80086d0:	4606      	mov	r6, r0
 80086d2:	6804      	ldr	r4, [r0, #0]
 80086d4:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 80086d8:	bb61      	cbnz	r1, 8008734 <_format_hex+0x68>
 80086da:	2330      	movs	r3, #48	; 0x30
 80086dc:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80086e0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80086e4:	07e5      	lsls	r5, r4, #31
 80086e6:	d507      	bpl.n	80086f8 <_format_hex+0x2c>
 80086e8:	4669      	mov	r1, sp
 80086ea:	2530      	movs	r5, #48	; 0x30
 80086ec:	6870      	ldr	r0, [r6, #4]
 80086ee:	1ad7      	subs	r7, r2, r3
 80086f0:	4287      	cmp	r7, r0
 80086f2:	da01      	bge.n	80086f8 <_format_hex+0x2c>
 80086f4:	428b      	cmp	r3, r1
 80086f6:	d831      	bhi.n	800875c <_format_hex+0x90>
 80086f8:	06a0      	lsls	r0, r4, #26
 80086fa:	d507      	bpl.n	800870c <_format_hex+0x40>
 80086fc:	4669      	mov	r1, sp
 80086fe:	2530      	movs	r5, #48	; 0x30
 8008700:	68b0      	ldr	r0, [r6, #8]
 8008702:	1ad7      	subs	r7, r2, r3
 8008704:	4287      	cmp	r7, r0
 8008706:	da01      	bge.n	800870c <_format_hex+0x40>
 8008708:	428b      	cmp	r3, r1
 800870a:	d82a      	bhi.n	8008762 <_format_hex+0x96>
 800870c:	0661      	lsls	r1, r4, #25
 800870e:	d407      	bmi.n	8008720 <_format_hex+0x54>
 8008710:	4669      	mov	r1, sp
 8008712:	2420      	movs	r4, #32
 8008714:	68b0      	ldr	r0, [r6, #8]
 8008716:	1ad5      	subs	r5, r2, r3
 8008718:	4285      	cmp	r5, r0
 800871a:	da01      	bge.n	8008720 <_format_hex+0x54>
 800871c:	428b      	cmp	r3, r1
 800871e:	d823      	bhi.n	8008768 <_format_hex+0x9c>
 8008720:	1ad5      	subs	r5, r2, r3
 8008722:	1c5c      	adds	r4, r3, #1
 8008724:	ab10      	add	r3, sp, #64	; 0x40
 8008726:	429c      	cmp	r4, r3
 8008728:	d321      	bcc.n	800876e <_format_hex+0xa2>
 800872a:	68b3      	ldr	r3, [r6, #8]
 800872c:	429d      	cmp	r5, r3
 800872e:	db24      	blt.n	800877a <_format_hex+0xae>
 8008730:	b011      	add	sp, #68	; 0x44
 8008732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008734:	f014 0f02 	tst.w	r4, #2
 8008738:	bf0c      	ite	eq
 800873a:	2757      	moveq	r7, #87	; 0x57
 800873c:	2737      	movne	r7, #55	; 0x37
 800873e:	4613      	mov	r3, r2
 8008740:	466d      	mov	r5, sp
 8008742:	f001 000f 	and.w	r0, r1, #15
 8008746:	2809      	cmp	r0, #9
 8008748:	bf94      	ite	ls
 800874a:	3030      	addls	r0, #48	; 0x30
 800874c:	19c0      	addhi	r0, r0, r7
 800874e:	0909      	lsrs	r1, r1, #4
 8008750:	f803 0901 	strb.w	r0, [r3], #-1
 8008754:	d0c6      	beq.n	80086e4 <_format_hex+0x18>
 8008756:	42ab      	cmp	r3, r5
 8008758:	d1f3      	bne.n	8008742 <_format_hex+0x76>
 800875a:	e7c3      	b.n	80086e4 <_format_hex+0x18>
 800875c:	f803 5901 	strb.w	r5, [r3], #-1
 8008760:	e7c5      	b.n	80086ee <_format_hex+0x22>
 8008762:	f803 5901 	strb.w	r5, [r3], #-1
 8008766:	e7cc      	b.n	8008702 <_format_hex+0x36>
 8008768:	f803 4901 	strb.w	r4, [r3], #-1
 800876c:	e7d3      	b.n	8008716 <_format_hex+0x4a>
 800876e:	4630      	mov	r0, r6
 8008770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008774:	f7ff ff1e 	bl	80085b4 <_xputch>
 8008778:	e7d4      	b.n	8008724 <_format_hex+0x58>
 800877a:	2120      	movs	r1, #32
 800877c:	4630      	mov	r0, r6
 800877e:	f7ff ff19 	bl	80085b4 <_xputch>
 8008782:	3501      	adds	r5, #1
 8008784:	e7d1      	b.n	800872a <_format_hex+0x5e>
	...

08008788 <_vprintf>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	4614      	mov	r4, r2
 800878e:	2200      	movs	r2, #0
 8008790:	460b      	mov	r3, r1
 8008792:	2700      	movs	r7, #0
 8008794:	b099      	sub	sp, #100	; 0x64
 8008796:	e9cd 2006 	strd	r2, r0, [sp, #24]
 800879a:	ae08      	add	r6, sp, #32
 800879c:	7819      	ldrb	r1, [r3, #0]
 800879e:	b919      	cbnz	r1, 80087a8 <_vprintf+0x20>
 80087a0:	9806      	ldr	r0, [sp, #24]
 80087a2:	b019      	add	sp, #100	; 0x64
 80087a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a8:	2925      	cmp	r1, #37	; 0x25
 80087aa:	f103 0501 	add.w	r5, r3, #1
 80087ae:	d004      	beq.n	80087ba <_vprintf+0x32>
 80087b0:	a803      	add	r0, sp, #12
 80087b2:	f7ff feff 	bl	80085b4 <_xputch>
 80087b6:	462b      	mov	r3, r5
 80087b8:	e7f0      	b.n	800879c <_vprintf+0x14>
 80087ba:	2200      	movs	r2, #0
 80087bc:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80087c0:	9205      	str	r2, [sp, #20]
 80087c2:	785a      	ldrb	r2, [r3, #1]
 80087c4:	2a30      	cmp	r2, #48	; 0x30
 80087c6:	d12b      	bne.n	8008820 <_vprintf+0x98>
 80087c8:	2220      	movs	r2, #32
 80087ca:	9203      	str	r2, [sp, #12]
 80087cc:	1c9d      	adds	r5, r3, #2
 80087ce:	2200      	movs	r2, #0
 80087d0:	46ac      	mov	ip, r5
 80087d2:	4613      	mov	r3, r2
 80087d4:	f04f 0e0a 	mov.w	lr, #10
 80087d8:	f89c 1000 	ldrb.w	r1, [ip]
 80087dc:	4665      	mov	r5, ip
 80087de:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 80087e2:	2809      	cmp	r0, #9
 80087e4:	f10c 0c01 	add.w	ip, ip, #1
 80087e8:	d91e      	bls.n	8008828 <_vprintf+0xa0>
 80087ea:	b12a      	cbz	r2, 80087f8 <_vprintf+0x70>
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	b11b      	cbz	r3, 80087f8 <_vprintf+0x70>
 80087f0:	9b03      	ldr	r3, [sp, #12]
 80087f2:	f043 0310 	orr.w	r3, r3, #16
 80087f6:	9303      	str	r3, [sp, #12]
 80087f8:	292e      	cmp	r1, #46	; 0x2e
 80087fa:	d124      	bne.n	8008846 <_vprintf+0xbe>
 80087fc:	786b      	ldrb	r3, [r5, #1]
 80087fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008800:	d016      	beq.n	8008830 <_vprintf+0xa8>
 8008802:	2100      	movs	r1, #0
 8008804:	f04f 0c0a 	mov.w	ip, #10
 8008808:	460a      	mov	r2, r1
 800880a:	1c68      	adds	r0, r5, #1
 800880c:	7803      	ldrb	r3, [r0, #0]
 800880e:	4605      	mov	r5, r0
 8008810:	3b30      	subs	r3, #48	; 0x30
 8008812:	2b09      	cmp	r3, #9
 8008814:	f100 0001 	add.w	r0, r0, #1
 8008818:	d958      	bls.n	80088cc <_vprintf+0x144>
 800881a:	b181      	cbz	r1, 800883e <_vprintf+0xb6>
 800881c:	9204      	str	r2, [sp, #16]
 800881e:	e00e      	b.n	800883e <_vprintf+0xb6>
 8008820:	2a2d      	cmp	r2, #45	; 0x2d
 8008822:	d1d4      	bne.n	80087ce <_vprintf+0x46>
 8008824:	2240      	movs	r2, #64	; 0x40
 8008826:	e7d0      	b.n	80087ca <_vprintf+0x42>
 8008828:	2201      	movs	r2, #1
 800882a:	fb0e 0303 	mla	r3, lr, r3, r0
 800882e:	e7d3      	b.n	80087d8 <_vprintf+0x50>
 8008830:	f854 3b04 	ldr.w	r3, [r4], #4
 8008834:	3502      	adds	r5, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	bfb8      	it	lt
 800883a:	425b      	neglt	r3, r3
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	9b03      	ldr	r3, [sp, #12]
 8008840:	f043 0301 	orr.w	r3, r3, #1
 8008844:	9303      	str	r3, [sp, #12]
 8008846:	782b      	ldrb	r3, [r5, #0]
 8008848:	2b6c      	cmp	r3, #108	; 0x6c
 800884a:	bf04      	itt	eq
 800884c:	9b03      	ldreq	r3, [sp, #12]
 800884e:	3501      	addeq	r5, #1
 8008850:	7829      	ldrb	r1, [r5, #0]
 8008852:	bf04      	itt	eq
 8008854:	f043 0304 	orreq.w	r3, r3, #4
 8008858:	9303      	streq	r3, [sp, #12]
 800885a:	2958      	cmp	r1, #88	; 0x58
 800885c:	f000 8173 	beq.w	8008b46 <_vprintf+0x3be>
 8008860:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8008864:	b2da      	uxtb	r2, r3
 8008866:	2a15      	cmp	r2, #21
 8008868:	d8a2      	bhi.n	80087b0 <_vprintf+0x28>
 800886a:	2b15      	cmp	r3, #21
 800886c:	d8a0      	bhi.n	80087b0 <_vprintf+0x28>
 800886e:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <_vprintf+0xec>)
 8008870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008874:	080088d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, pc}
 8008878:	080088e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, fp, pc}
 800887c:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 8008880:	08008917 	stmdaeq	r0, {r0, r1, r2, r4, r8, fp, pc}
 8008884:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 8008888:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 800888c:	080088e3 	stmdaeq	r0, {r0, r1, r5, r6, r7, fp, pc}
 8008890:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 8008894:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 8008898:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 800889c:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 80088a0:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 80088a4:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 80088a8:	08008a89 	stmdaeq	r0, {r0, r3, r7, r9, fp, pc}
 80088ac:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 80088b0:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 80088b4:	08008aaf 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r9, fp, pc}
 80088b8:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 80088bc:	08008b29 	stmdaeq	r0, {r0, r3, r5, r8, r9, fp, pc}
 80088c0:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 80088c4:	080087b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, pc}
 80088c8:	08008b4f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, r9, fp, pc}
 80088cc:	2101      	movs	r1, #1
 80088ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80088d2:	e79b      	b.n	800880c <_vprintf+0x84>
 80088d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80088d8:	a803      	add	r0, sp, #12
 80088da:	f7ff fe6b 	bl	80085b4 <_xputch>
 80088de:	3501      	adds	r5, #1
 80088e0:	e769      	b.n	80087b6 <_vprintf+0x2e>
 80088e2:	9903      	ldr	r1, [sp, #12]
 80088e4:	074a      	lsls	r2, r1, #29
 80088e6:	bf43      	ittte	mi
 80088e8:	3407      	addmi	r4, #7
 80088ea:	f024 0307 	bicmi.w	r3, r4, #7
 80088ee:	461c      	movmi	r4, r3
 80088f0:	f854 2b04 	ldrpl.w	r2, [r4], #4
 80088f4:	bf4a      	itet	mi
 80088f6:	685b      	ldrmi	r3, [r3, #4]
 80088f8:	17d3      	asrpl	r3, r2, #31
 80088fa:	f854 2b08 	ldrmi.w	r2, [r4], #8
 80088fe:	2b00      	cmp	r3, #0
 8008900:	da05      	bge.n	800890e <_vprintf+0x186>
 8008902:	f041 0108 	orr.w	r1, r1, #8
 8008906:	4252      	negs	r2, r2
 8008908:	9103      	str	r1, [sp, #12]
 800890a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800890e:	a803      	add	r0, sp, #12
 8008910:	f7ff fe66 	bl	80085e0 <_format_int>
 8008914:	e7e3      	b.n	80088de <_vprintf+0x156>
 8008916:	3407      	adds	r4, #7
 8008918:	f024 0407 	bic.w	r4, r4, #7
 800891c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008920:	f7fe fc16 	bl	8007150 <__aeabi_d2f>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	4639      	mov	r1, r7
 8008928:	07db      	lsls	r3, r3, #31
 800892a:	bf54      	ite	pl
 800892c:	f04f 0a06 	movpl.w	sl, #6
 8008930:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 8008934:	4681      	mov	r9, r0
 8008936:	f7fe fdb7 	bl	80074a8 <__aeabi_fcmplt>
 800893a:	2800      	cmp	r0, #0
 800893c:	d069      	beq.n	8008a12 <_vprintf+0x28a>
 800893e:	232d      	movs	r3, #45	; 0x2d
 8008940:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 8008944:	f88d 3020 	strb.w	r3, [sp, #32]
 8008948:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 800894c:	4648      	mov	r0, r9
 800894e:	f7fe fdd3 	bl	80074f8 <__aeabi_f2iz>
 8008952:	4659      	mov	r1, fp
 8008954:	2200      	movs	r2, #0
 8008956:	4680      	mov	r8, r0
 8008958:	f7ff fdf2 	bl	8008540 <_itostr>
 800895c:	eb0b 0200 	add.w	r2, fp, r0
 8008960:	e9cd 2000 	strd	r2, r0, [sp]
 8008964:	4640      	mov	r0, r8
 8008966:	f7fe fcfd 	bl	8007364 <__aeabi_i2f>
 800896a:	4601      	mov	r1, r0
 800896c:	4648      	mov	r0, r9
 800896e:	f7fe fc43 	bl	80071f8 <__aeabi_fsub>
 8008972:	222e      	movs	r2, #46	; 0x2e
 8008974:	4601      	mov	r1, r0
 8008976:	200a      	movs	r0, #10
 8008978:	9b00      	ldr	r3, [sp, #0]
 800897a:	f10a 0901 	add.w	r9, sl, #1
 800897e:	f103 0801 	add.w	r8, r3, #1
 8008982:	9b01      	ldr	r3, [sp, #4]
 8008984:	f80b 2003 	strb.w	r2, [fp, r3]
 8008988:	4603      	mov	r3, r0
 800898a:	f1ba 0f00 	cmp.w	sl, #0
 800898e:	dc42      	bgt.n	8008a16 <_vprintf+0x28e>
 8008990:	9100      	str	r1, [sp, #0]
 8008992:	f7fe fce7 	bl	8007364 <__aeabi_i2f>
 8008996:	9900      	ldr	r1, [sp, #0]
 8008998:	f7ff f914 	bl	8007bc4 <__aeabi_fmul>
 800899c:	f7fe fdac 	bl	80074f8 <__aeabi_f2iz>
 80089a0:	4641      	mov	r1, r8
 80089a2:	464a      	mov	r2, r9
 80089a4:	f7ff fdcc 	bl	8008540 <_itostr>
 80089a8:	4480      	add	r8, r0
 80089aa:	eba8 0806 	sub.w	r8, r8, r6
 80089ae:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80089b2:	5c73      	ldrb	r3, [r6, r1]
 80089b4:	1872      	adds	r2, r6, r1
 80089b6:	2b34      	cmp	r3, #52	; 0x34
 80089b8:	d910      	bls.n	80089dc <_vprintf+0x254>
 80089ba:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 80089be:	1e53      	subs	r3, r2, #1
 80089c0:	282e      	cmp	r0, #46	; 0x2e
 80089c2:	d02f      	beq.n	8008a24 <_vprintf+0x29c>
 80089c4:	469c      	mov	ip, r3
 80089c6:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80089ca:	4663      	mov	r3, ip
 80089cc:	f81c 0901 	ldrb.w	r0, [ip], #-1
 80089d0:	2839      	cmp	r0, #57	; 0x39
 80089d2:	d024      	beq.n	8008a1e <_vprintf+0x296>
 80089d4:	282e      	cmp	r0, #46	; 0x2e
 80089d6:	d025      	beq.n	8008a24 <_vprintf+0x29c>
 80089d8:	3001      	adds	r0, #1
 80089da:	7018      	strb	r0, [r3, #0]
 80089dc:	f101 0360 	add.w	r3, r1, #96	; 0x60
 80089e0:	446b      	add	r3, sp
 80089e2:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 80089e6:	2b2e      	cmp	r3, #46	; 0x2e
 80089e8:	bf08      	it	eq
 80089ea:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 80089ee:	4688      	mov	r8, r1
 80089f0:	4689      	mov	r9, r1
 80089f2:	9b05      	ldr	r3, [sp, #20]
 80089f4:	454b      	cmp	r3, r9
 80089f6:	dc40      	bgt.n	8008a7a <_vprintf+0x2f2>
 80089f8:	46b1      	mov	r9, r6
 80089fa:	f1b8 0f00 	cmp.w	r8, #0
 80089fe:	f77f af6e 	ble.w	80088de <_vprintf+0x156>
 8008a02:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008a06:	a803      	add	r0, sp, #12
 8008a08:	f7ff fdd4 	bl	80085b4 <_xputch>
 8008a0c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008a10:	e7f3      	b.n	80089fa <_vprintf+0x272>
 8008a12:	46b3      	mov	fp, r6
 8008a14:	e79a      	b.n	800894c <_vprintf+0x1c4>
 8008a16:	4358      	muls	r0, r3
 8008a18:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008a1c:	e7b5      	b.n	800898a <_vprintf+0x202>
 8008a1e:	f88c e001 	strb.w	lr, [ip, #1]
 8008a22:	e7d2      	b.n	80089ca <_vprintf+0x242>
 8008a24:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	7818      	ldrb	r0, [r3, #0]
 8008a2c:	2839      	cmp	r0, #57	; 0x39
 8008a2e:	d112      	bne.n	8008a56 <_vprintf+0x2ce>
 8008a30:	42b3      	cmp	r3, r6
 8008a32:	d20d      	bcs.n	8008a50 <_vprintf+0x2c8>
 8008a34:	1c98      	adds	r0, r3, #2
 8008a36:	1c59      	adds	r1, r3, #1
 8008a38:	4281      	cmp	r1, r0
 8008a3a:	eba2 0203 	sub.w	r2, r2, r3
 8008a3e:	d913      	bls.n	8008a68 <_vprintf+0x2e0>
 8008a40:	3201      	adds	r2, #1
 8008a42:	441a      	add	r2, r3
 8008a44:	428a      	cmp	r2, r1
 8008a46:	d10b      	bne.n	8008a60 <_vprintf+0x2d8>
 8008a48:	2231      	movs	r2, #49	; 0x31
 8008a4a:	4641      	mov	r1, r8
 8008a4c:	705a      	strb	r2, [r3, #1]
 8008a4e:	e7c5      	b.n	80089dc <_vprintf+0x254>
 8008a50:	f803 c901 	strb.w	ip, [r3], #-1
 8008a54:	e7e9      	b.n	8008a2a <_vprintf+0x2a2>
 8008a56:	42b3      	cmp	r3, r6
 8008a58:	d3ec      	bcc.n	8008a34 <_vprintf+0x2ac>
 8008a5a:	282d      	cmp	r0, #45	; 0x2d
 8008a5c:	d0ea      	beq.n	8008a34 <_vprintf+0x2ac>
 8008a5e:	e7bb      	b.n	80089d8 <_vprintf+0x250>
 8008a60:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008a64:	7008      	strb	r0, [r1, #0]
 8008a66:	e7ed      	b.n	8008a44 <_vprintf+0x2bc>
 8008a68:	4411      	add	r1, r2
 8008a6a:	4402      	add	r2, r0
 8008a6c:	4290      	cmp	r0, r2
 8008a6e:	d0eb      	beq.n	8008a48 <_vprintf+0x2c0>
 8008a70:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8008a74:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8008a78:	e7f8      	b.n	8008a6c <_vprintf+0x2e4>
 8008a7a:	2120      	movs	r1, #32
 8008a7c:	a803      	add	r0, sp, #12
 8008a7e:	f7ff fd99 	bl	80085b4 <_xputch>
 8008a82:	f109 0901 	add.w	r9, r9, #1
 8008a86:	e7b4      	b.n	80089f2 <_vprintf+0x26a>
 8008a88:	2308      	movs	r3, #8
 8008a8a:	9305      	str	r3, [sp, #20]
 8008a8c:	2320      	movs	r3, #32
 8008a8e:	2130      	movs	r1, #48	; 0x30
 8008a90:	f854 8b04 	ldr.w	r8, [r4], #4
 8008a94:	a803      	add	r0, sp, #12
 8008a96:	9303      	str	r3, [sp, #12]
 8008a98:	f7ff fd8c 	bl	80085b4 <_xputch>
 8008a9c:	2178      	movs	r1, #120	; 0x78
 8008a9e:	a803      	add	r0, sp, #12
 8008aa0:	f7ff fd88 	bl	80085b4 <_xputch>
 8008aa4:	4641      	mov	r1, r8
 8008aa6:	a803      	add	r0, sp, #12
 8008aa8:	f7ff fe10 	bl	80086cc <_format_hex>
 8008aac:	e717      	b.n	80088de <_vprintf+0x156>
 8008aae:	f04f 0800 	mov.w	r8, #0
 8008ab2:	f854 9b04 	ldr.w	r9, [r4], #4
 8008ab6:	f819 3008 	ldrb.w	r3, [r9, r8]
 8008aba:	b993      	cbnz	r3, 8008ae2 <_vprintf+0x35a>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	07d9      	lsls	r1, r3, #31
 8008ac0:	d503      	bpl.n	8008aca <_vprintf+0x342>
 8008ac2:	9b04      	ldr	r3, [sp, #16]
 8008ac4:	4598      	cmp	r8, r3
 8008ac6:	bfa8      	it	ge
 8008ac8:	4698      	movge	r8, r3
 8008aca:	9b03      	ldr	r3, [sp, #12]
 8008acc:	f108 0a01 	add.w	sl, r8, #1
 8008ad0:	065a      	lsls	r2, r3, #25
 8008ad2:	d403      	bmi.n	8008adc <_vprintf+0x354>
 8008ad4:	9b05      	ldr	r3, [sp, #20]
 8008ad6:	4598      	cmp	r8, r3
 8008ad8:	db06      	blt.n	8008ae8 <_vprintf+0x360>
 8008ada:	46d0      	mov	r8, sl
 8008adc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008ae0:	e00e      	b.n	8008b00 <_vprintf+0x378>
 8008ae2:	f108 0801 	add.w	r8, r8, #1
 8008ae6:	e7e6      	b.n	8008ab6 <_vprintf+0x32e>
 8008ae8:	2120      	movs	r1, #32
 8008aea:	a803      	add	r0, sp, #12
 8008aec:	f7ff fd62 	bl	80085b4 <_xputch>
 8008af0:	46d0      	mov	r8, sl
 8008af2:	e7ea      	b.n	8008aca <_vprintf+0x342>
 8008af4:	a803      	add	r0, sp, #12
 8008af6:	f7ff fd5d 	bl	80085b4 <_xputch>
 8008afa:	9b04      	ldr	r3, [sp, #16]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	9304      	str	r3, [sp, #16]
 8008b00:	9b03      	ldr	r3, [sp, #12]
 8008b02:	07db      	lsls	r3, r3, #31
 8008b04:	d501      	bpl.n	8008b0a <_vprintf+0x382>
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	b11b      	cbz	r3, 8008b12 <_vprintf+0x38a>
 8008b0a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d1f0      	bne.n	8008af4 <_vprintf+0x36c>
 8008b12:	9b05      	ldr	r3, [sp, #20]
 8008b14:	4543      	cmp	r3, r8
 8008b16:	f77f aee2 	ble.w	80088de <_vprintf+0x156>
 8008b1a:	2120      	movs	r1, #32
 8008b1c:	a803      	add	r0, sp, #12
 8008b1e:	f7ff fd49 	bl	80085b4 <_xputch>
 8008b22:	f108 0801 	add.w	r8, r8, #1
 8008b26:	e7f4      	b.n	8008b12 <_vprintf+0x38a>
 8008b28:	9b03      	ldr	r3, [sp, #12]
 8008b2a:	f013 0304 	ands.w	r3, r3, #4
 8008b2e:	bf1d      	ittte	ne
 8008b30:	3407      	addne	r4, #7
 8008b32:	f024 0307 	bicne.w	r3, r4, #7
 8008b36:	461c      	movne	r4, r3
 8008b38:	f854 2b04 	ldreq.w	r2, [r4], #4
 8008b3c:	bf1c      	itt	ne
 8008b3e:	f854 2b08 	ldrne.w	r2, [r4], #8
 8008b42:	685b      	ldrne	r3, [r3, #4]
 8008b44:	e6e3      	b.n	800890e <_vprintf+0x186>
 8008b46:	9b03      	ldr	r3, [sp, #12]
 8008b48:	f043 0302 	orr.w	r3, r3, #2
 8008b4c:	9303      	str	r3, [sp, #12]
 8008b4e:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b52:	e7a8      	b.n	8008aa6 <_vprintf+0x31e>

08008b54 <printf>:
 8008b54:	b40f      	push	{r0, r1, r2, r3}
 8008b56:	b507      	push	{r0, r1, r2, lr}
 8008b58:	aa04      	add	r2, sp, #16
 8008b5a:	f852 1b04 	ldr.w	r1, [r2], #4
 8008b5e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008b62:	9201      	str	r2, [sp, #4]
 8008b64:	f7ff fe10 	bl	8008788 <_vprintf>
 8008b68:	b003      	add	sp, #12
 8008b6a:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b6e:	b004      	add	sp, #16
 8008b70:	4770      	bx	lr
	...

08008b74 <sprintf>:
 8008b74:	b40e      	push	{r1, r2, r3}
 8008b76:	b517      	push	{r0, r1, r2, r4, lr}
 8008b78:	4c09      	ldr	r4, [pc, #36]	; (8008ba0 <sprintf+0x2c>)
 8008b7a:	aa05      	add	r2, sp, #20
 8008b7c:	f852 1b04 	ldr.w	r1, [r2], #4
 8008b80:	6020      	str	r0, [r4, #0]
 8008b82:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008b86:	9201      	str	r2, [sp, #4]
 8008b88:	f7ff fdfe 	bl	8008788 <_vprintf>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	6822      	ldr	r2, [r4, #0]
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	7013      	strb	r3, [r2, #0]
 8008b94:	b003      	add	sp, #12
 8008b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b9a:	b003      	add	sp, #12
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	200000e8 	andcs	r0, r0, r8, ror #1

08008ba4 <snprintf>:
 8008ba4:	b40c      	push	{r2, r3}
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	b513      	push	{r0, r1, r4, lr}
 8008baa:	4c09      	ldr	r4, [pc, #36]	; (8008bd0 <snprintf+0x2c>)
 8008bac:	aa04      	add	r2, sp, #16
 8008bae:	f852 1b04 	ldr.w	r1, [r2], #4
 8008bb2:	6020      	str	r0, [r4, #0]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	9201      	str	r2, [sp, #4]
 8008bb8:	f7ff fde6 	bl	8008788 <_vprintf>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	6822      	ldr	r2, [r4, #0]
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	7013      	strb	r3, [r2, #0]
 8008bc4:	b002      	add	sp, #8
 8008bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bca:	b002      	add	sp, #8
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	200000e8 	andcs	r0, r0, r8, ror #1

08008bd4 <vsnprintf>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	4c05      	ldr	r4, [pc, #20]	; (8008bf0 <vsnprintf+0x1c>)
 8008bda:	4608      	mov	r0, r1
 8008bdc:	4611      	mov	r1, r2
 8008bde:	461a      	mov	r2, r3
 8008be0:	6025      	str	r5, [r4, #0]
 8008be2:	f7ff fdd1 	bl	8008788 <_vprintf>
 8008be6:	2300      	movs	r3, #0
 8008be8:	6822      	ldr	r2, [r4, #0]
 8008bea:	6023      	str	r3, [r4, #0]
 8008bec:	7013      	strb	r3, [r2, #0]
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	200000e8 	andcs	r0, r0, r8, ror #1

08008bf4 <e131::universe_to_multicast_ip(unsigned short)>:
 8008bf4:	b513      	push	{r0, r1, r4, lr}
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	a901      	add	r1, sp, #4
 8008bfa:	4806      	ldr	r0, [pc, #24]	; (8008c14 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 8008bfc:	f009 f95c 	bl	8011eb8 <inet_aton>
 8008c00:	9801      	ldr	r0, [sp, #4]
 8008c02:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 8008c06:	0224      	lsls	r4, r4, #8
 8008c08:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8008c0c:	4320      	orrs	r0, r4
 8008c0e:	b002      	add	sp, #8
 8008c10:	bd10      	pop	{r4, pc}
 8008c12:	bf00      	nop
 8008c14:	080141c1 	stmdaeq	r1, {r0, r6, r7, r8, lr}

08008c18 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 8008c18:	f240 6304 	movw	r3, #1540	; 0x604
 8008c1c:	fb03 0101 	mla	r1, r3, r1, r0
 8008c20:	2300      	movs	r3, #0
 8008c22:	b510      	push	{r4, lr}
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d00a      	beq.n	8008c3e <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x26>
 8008c28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	f891 01ff 	ldrb.w	r0, [r1, #511]	; 0x1ff
 8008c32:	42a0      	cmp	r0, r4
 8008c34:	bf38      	it	cc
 8008c36:	4620      	movcc	r0, r4
 8008c38:	f881 03ff 	strb.w	r0, [r1, #1023]	; 0x3ff
 8008c3c:	e7f2      	b.n	8008c24 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>
 8008c3e:	bd10      	pop	{r4, pc}

08008c40 <memset.constprop.0.isra.0>:
 8008c40:	2300      	movs	r3, #0
 8008c42:	4401      	add	r1, r0
 8008c44:	4288      	cmp	r0, r1
 8008c46:	d002      	beq.n	8008c4e <memset.constprop.0.isra.0+0xe>
 8008c48:	f800 3b01 	strb.w	r3, [r0], #1
 8008c4c:	e7fa      	b.n	8008c44 <memset.constprop.0.isra.0+0x4>
 8008c4e:	4770      	bx	lr

08008c50 <memcpy.isra.0>:
 8008c50:	3801      	subs	r0, #1
 8008c52:	440a      	add	r2, r1
 8008c54:	4291      	cmp	r1, r2
 8008c56:	d004      	beq.n	8008c62 <memcpy.isra.0+0x12>
 8008c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c5c:	f800 3f01 	strb.w	r3, [r0, #1]!
 8008c60:	e7f8      	b.n	8008c54 <memcpy.isra.0+0x4>
 8008c62:	4770      	bx	lr

08008c64 <lightset::Data::Get()>:
 8008c64:	4b03      	ldr	r3, [pc, #12]	; (8008c74 <lightset::Data::Get()+0x10>)
 8008c66:	4804      	ldr	r0, [pc, #16]	; (8008c78 <lightset::Data::Get()+0x14>)
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	07d2      	lsls	r2, r2, #31
 8008c6c:	bf5c      	itt	pl
 8008c6e:	2201      	movpl	r2, #1
 8008c70:	601a      	strpl	r2, [r3, #0]
 8008c72:	4770      	bx	lr
 8008c74:	200000ec 	andcs	r0, r0, ip, ror #1
 8008c78:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08008c7c <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 8008c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c80:	4615      	mov	r5, r2
 8008c82:	460f      	mov	r7, r1
 8008c84:	4604      	mov	r4, r0
 8008c86:	f7ff ffed 	bl	8008c64 <lightset::Data::Get()>
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	f240 6004 	movw	r0, #1540	; 0x604
 8008c90:	4344      	muls	r4, r0
 8008c92:	eb06 0804 	add.w	r8, r6, r4
 8008c96:	462a      	mov	r2, r5
 8008c98:	4639      	mov	r1, r7
 8008c9a:	4640      	mov	r0, r8
 8008c9c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008ca0:	f7ff ffd6 	bl	8008c50 <memcpy.isra.0>
 8008ca4:	462a      	mov	r2, r5
 8008ca6:	4639      	mov	r1, r7
 8008ca8:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 8008cac:	1930      	adds	r0, r6, r4
 8008cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb2:	f7ff bfcd 	b.w	8008c50 <memcpy.isra.0>

08008cb6 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 8008cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cba:	4680      	mov	r8, r0
 8008cbc:	f240 6404 	movw	r4, #1540	; 0x604
 8008cc0:	4615      	mov	r5, r2
 8008cc2:	460f      	mov	r7, r1
 8008cc4:	4699      	mov	r9, r3
 8008cc6:	f7ff ffcd 	bl	8008c64 <lightset::Data::Get()>
 8008cca:	fb04 f408 	mul.w	r4, r4, r8
 8008cce:	eb00 0a04 	add.w	sl, r0, r4
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	462a      	mov	r2, r5
 8008cd6:	4639      	mov	r1, r7
 8008cd8:	4650      	mov	r0, sl
 8008cda:	f7ff ffb9 	bl	8008c50 <memcpy.isra.0>
 8008cde:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 8008ce2:	f1b9 0f00 	cmp.w	r9, #0
 8008ce6:	d106      	bne.n	8008cf6 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4641      	mov	r1, r8
 8008cec:	4630      	mov	r0, r6
 8008cee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf2:	f7ff bf91 	b.w	8008c18 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 8008cf6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008cfa:	462a      	mov	r2, r5
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	1930      	adds	r0, r6, r4
 8008d00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d04:	f7ff bfa4 	b.w	8008c50 <memcpy.isra.0>

08008d08 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 8008d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	4699      	mov	r9, r3
 8008d10:	4680      	mov	r8, r0
 8008d12:	460f      	mov	r7, r1
 8008d14:	f7ff ffa6 	bl	8008c64 <lightset::Data::Get()>
 8008d18:	f240 6404 	movw	r4, #1540	; 0x604
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	fb04 f408 	mul.w	r4, r4, r8
 8008d22:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8008d26:	4632      	mov	r2, r6
 8008d28:	4639      	mov	r1, r7
 8008d2a:	4428      	add	r0, r5
 8008d2c:	f7ff ff90 	bl	8008c50 <memcpy.isra.0>
 8008d30:	192b      	adds	r3, r5, r4
 8008d32:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 8008d36:	f1b9 0f00 	cmp.w	r9, #0
 8008d3a:	d106      	bne.n	8008d4a <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 8008d3c:	4632      	mov	r2, r6
 8008d3e:	4641      	mov	r1, r8
 8008d40:	4628      	mov	r0, r5
 8008d42:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d46:	f7ff bf67 	b.w	8008c18 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 8008d4a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008d4e:	4632      	mov	r2, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	1928      	adds	r0, r5, r4
 8008d54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d58:	f7ff bf7a 	b.w	8008c50 <memcpy.isra.0>

08008d5c <lightset::Data::IOutput(LightSet*, unsigned int) const>:
 8008d5c:	f240 6304 	movw	r3, #1540	; 0x604
 8008d60:	b470      	push	{r4, r5, r6}
 8008d62:	4605      	mov	r5, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	4353      	muls	r3, r2
 8008d68:	4611      	mov	r1, r2
 8008d6a:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8008d6e:	18ea      	adds	r2, r5, r3
 8008d70:	6803      	ldr	r3, [r0, #0]
 8008d72:	691e      	ldr	r6, [r3, #16]
 8008d74:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 8008d78:	46b4      	mov	ip, r6
 8008d7a:	192a      	adds	r2, r5, r4
 8008d7c:	bc70      	pop	{r4, r5, r6}
 8008d7e:	4760      	bx	ip

08008d80 <E131Bridge::Start()>:
 8008d80:	6943      	ldr	r3, [r0, #20]
 8008d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d84:	4604      	mov	r4, r0
 8008d86:	b35b      	cbz	r3, 8008de0 <E131Bridge::Start()+0x60>
 8008d88:	6983      	ldr	r3, [r0, #24]
 8008d8a:	b9cb      	cbnz	r3, 8008dc0 <E131Bridge::Start()+0x40>
 8008d8c:	a901      	add	r1, sp, #4
 8008d8e:	4818      	ldr	r0, [pc, #96]	; (8008df0 <E131Bridge::Start()+0x70>)
 8008d90:	f009 f892 	bl	8011eb8 <inet_aton>
 8008d94:	9b01      	ldr	r3, [sp, #4]
 8008d96:	f240 207e 	movw	r0, #638	; 0x27e
 8008d9a:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 8008d9e:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 8008da2:	6223      	str	r3, [r4, #32]
 8008da4:	f009 f884 	bl	8011eb0 <operator new(unsigned int)>
 8008da8:	61a0      	str	r0, [r4, #24]
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 fd8e 	bl	80098cc <E131Bridge::FillDataPacket()>
 8008db0:	f44f 608f 	mov.w	r0, #1144	; 0x478
 8008db4:	f009 f87c 	bl	8011eb0 <operator new(unsigned int)>
 8008db8:	61e0      	str	r0, [r4, #28]
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 fcdc 	bl	8009778 <E131Bridge::FillDiscoveryPacket()>
 8008dc0:	2500      	movs	r5, #0
 8008dc2:	270c      	movs	r7, #12
 8008dc4:	f204 6622 	addw	r6, r4, #1570	; 0x622
 8008dc8:	fb07 f305 	mul.w	r3, r7, r5
 8008dcc:	5cf3      	ldrb	r3, [r6, r3]
 8008dce:	b123      	cbz	r3, 8008dda <E131Bridge::Start()+0x5a>
 8008dd0:	6960      	ldr	r0, [r4, #20]
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	6803      	ldr	r3, [r0, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	4798      	blx	r3
 8008dda:	3501      	adds	r5, #1
 8008ddc:	2d04      	cmp	r5, #4
 8008dde:	d1f3      	bne.n	8008dc8 <E131Bridge::Start()+0x48>
 8008de0:	2102      	movs	r1, #2
 8008de2:	4b04      	ldr	r3, [pc, #16]	; (8008df4 <E131Bridge::Start()+0x74>)
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	b003      	add	sp, #12
 8008de8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8008dec:	f008 bf7e 	b.w	8011cec <LedBlink::SetMode(ledblink::Mode)>
 8008df0:	080141c1 	stmdaeq	r1, {r0, r6, r7, r8, lr}
 8008df4:	2000a9ac 	andcs	sl, r0, ip, lsr #19

08008df8 <E131Bridge::Stop()>:
 8008df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dfc:	2500      	movs	r5, #0
 8008dfe:	2301      	movs	r3, #1
 8008e00:	4604      	mov	r4, r0
 8008e02:	f240 6804 	movw	r8, #1540	; 0x604
 8008e06:	462e      	mov	r6, r5
 8008e08:	f880 34f4 	strb.w	r3, [r0, #1268]	; 0x4f4
 8008e0c:	f500 67aa 	add.w	r7, r0, #1360	; 0x550
 8008e10:	6860      	ldr	r0, [r4, #4]
 8008e12:	b118      	cbz	r0, 8008e1c <E131Bridge::Stop()+0x24>
 8008e14:	6803      	ldr	r3, [r0, #0]
 8008e16:	4629      	mov	r1, r5
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	4798      	blx	r3
 8008e1c:	f7ff ff22 	bl	8008c64 <lightset::Data::Get()>
 8008e20:	2344      	movs	r3, #68	; 0x44
 8008e22:	fb08 0005 	mla	r0, r8, r5, r0
 8008e26:	436b      	muls	r3, r5
 8008e28:	3501      	adds	r5, #1
 8008e2a:	2d04      	cmp	r5, #4
 8008e2c:	f8c0 6600 	str.w	r6, [r0, #1536]	; 0x600
 8008e30:	54fe      	strb	r6, [r7, r3]
 8008e32:	d1ed      	bne.n	8008e10 <E131Bridge::Stop()+0x18>
 8008e34:	6963      	ldr	r3, [r4, #20]
 8008e36:	b17b      	cbz	r3, 8008e58 <E131Bridge::Stop()+0x60>
 8008e38:	2500      	movs	r5, #0
 8008e3a:	270c      	movs	r7, #12
 8008e3c:	f204 6622 	addw	r6, r4, #1570	; 0x622
 8008e40:	fb07 f305 	mul.w	r3, r7, r5
 8008e44:	5cf3      	ldrb	r3, [r6, r3]
 8008e46:	b123      	cbz	r3, 8008e52 <E131Bridge::Stop()+0x5a>
 8008e48:	6960      	ldr	r0, [r4, #20]
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	6803      	ldr	r3, [r0, #0]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	4798      	blx	r3
 8008e52:	3501      	adds	r5, #1
 8008e54:	2d04      	cmp	r5, #4
 8008e56:	d1f3      	bne.n	8008e40 <E131Bridge::Stop()+0x48>
 8008e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5c:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <E131Bridge::Stop()+0x70>)
 8008e5e:	2100      	movs	r1, #0
 8008e60:	6818      	ldr	r0, [r3, #0]
 8008e62:	f008 bf43 	b.w	8011cec <LedBlink::SetMode(ledblink::Mode)>
 8008e66:	bf00      	nop
 8008e68:	2000a9ac 	andcs	sl, r0, ip, lsr #19

08008e6c <E131Bridge::SetSourceName(char const*)>:
 8008e6c:	223f      	movs	r2, #63	; 0x3f
 8008e6e:	b510      	push	{r4, lr}
 8008e70:	f100 0334 	add.w	r3, r0, #52	; 0x34
 8008e74:	3901      	subs	r1, #1
 8008e76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008e7a:	b92c      	cbnz	r4, 8008e88 <E131Bridge::SetSourceName(char const*)+0x1c>
 8008e7c:	441a      	add	r2, r3
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d006      	beq.n	8008e90 <E131Bridge::SetSourceName(char const*)+0x24>
 8008e82:	f803 4b01 	strb.w	r4, [r3], #1
 8008e86:	e7fa      	b.n	8008e7e <E131Bridge::SetSourceName(char const*)+0x12>
 8008e88:	3a01      	subs	r2, #1
 8008e8a:	f803 4b01 	strb.w	r4, [r3], #1
 8008e8e:	d1f2      	bne.n	8008e76 <E131Bridge::SetSourceName(char const*)+0xa>
 8008e90:	2300      	movs	r3, #0
 8008e92:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
 8008e96:	bd10      	pop	{r4, pc}

08008e98 <E131Bridge::E131Bridge()>:
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ea0:	e9c0 2300 	strd	r2, r3, [r0]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	2764      	movs	r7, #100	; 0x64
 8008eaa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008eae:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8008eb2:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8008eb6:	6743      	str	r3, [r0, #116]	; 0x74
 8008eb8:	4b1e      	ldr	r3, [pc, #120]	; (8008f34 <E131Bridge::E131Bridge()+0x9c>)
 8008eba:	7202      	strb	r2, [r0, #8]
 8008ebc:	b093      	sub	sp, #76	; 0x4c
 8008ebe:	6018      	str	r0, [r3, #0]
 8008ec0:	f500 65a2 	add.w	r5, r0, #1296	; 0x510
 8008ec4:	f500 62c4 	add.w	r2, r0, #1568	; 0x620
 8008ec8:	f500 66ca 	add.w	r6, r0, #1616	; 0x650
 8008ecc:	4628      	mov	r0, r5
 8008ece:	2144      	movs	r1, #68	; 0x44
 8008ed0:	f7ff feb6 	bl	8008c40 <memset.constprop.0.isra.0>
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	210c      	movs	r1, #12
 8008ed8:	f7ff feb2 	bl	8008c40 <memset.constprop.0.isra.0>
 8008edc:	320c      	adds	r2, #12
 8008ede:	f802 7c03 	strb.w	r7, [r2, #-3]
 8008ee2:	42b2      	cmp	r2, r6
 8008ee4:	f105 0544 	add.w	r5, r5, #68	; 0x44
 8008ee8:	d1f0      	bne.n	8008ecc <E131Bridge::E131Bridge()+0x34>
 8008eea:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 8008eee:	211c      	movs	r1, #28
 8008ef0:	f7ff fea6 	bl	8008c40 <memset.constprop.0.isra.0>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4d10      	ldr	r5, [pc, #64]	; (8008f38 <E131Bridge::E131Bridge()+0xa0>)
 8008ef8:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 8008efc:	4a0f      	ldr	r2, [pc, #60]	; (8008f3c <E131Bridge::E131Bridge()+0xa4>)
 8008efe:	682b      	ldr	r3, [r5, #0]
 8008f00:	2140      	movs	r1, #64	; 0x40
 8008f02:	331c      	adds	r3, #28
 8008f04:	9200      	str	r2, [sp, #0]
 8008f06:	a802      	add	r0, sp, #8
 8008f08:	4a0d      	ldr	r2, [pc, #52]	; (8008f40 <E131Bridge::E131Bridge()+0xa8>)
 8008f0a:	f7ff fe4b 	bl	8008ba4 <snprintf>
 8008f0e:	4620      	mov	r0, r4
 8008f10:	a902      	add	r1, sp, #8
 8008f12:	f7ff ffab 	bl	8008e6c <E131Bridge::SetSourceName(char const*)>
 8008f16:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 8008f1a:	6828      	ldr	r0, [r5, #0]
 8008f1c:	f006 fb5e 	bl	800f5dc <Network::Begin(unsigned short)>
 8008f20:	4621      	mov	r1, r4
 8008f22:	4b08      	ldr	r3, [pc, #32]	; (8008f44 <E131Bridge::E131Bridge()+0xac>)
 8008f24:	f841 0b24 	str.w	r0, [r1], #36
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	f008 ff63 	bl	8011df4 <Hardware::GetUuid(unsigned char*)>
 8008f2e:	4620      	mov	r0, r4
 8008f30:	b013      	add	sp, #76	; 0x4c
 8008f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f34:	20001900 	andcs	r1, r0, r0, lsl #18
 8008f38:	2000a288 	andcs	sl, r0, r8, lsl #5
 8008f3c:	080141d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, lr}
 8008f40:	080141cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, lr}
 8008f44:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0

08008f48 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	2544      	movs	r5, #68	; 0x44
 8008f50:	4610      	mov	r0, r2
 8008f52:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
 8008f56:	4299      	cmp	r1, r3
 8008f58:	d004      	beq.n	8008f64 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 8008f5a:	fb05 f603 	mul.w	r6, r5, r3
 8008f5e:	5b96      	ldrh	r6, [r2, r6]
 8008f60:	4286      	cmp	r6, r0
 8008f62:	d00e      	beq.n	8008f82 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 8008f64:	3301      	adds	r3, #1
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d1f5      	bne.n	8008f56 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 8008f6a:	4b06      	ldr	r3, [pc, #24]	; (8008f84 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 8008f6c:	6824      	ldr	r4, [r4, #0]
 8008f6e:	681d      	ldr	r5, [r3, #0]
 8008f70:	f7ff fe40 	bl	8008bf4 <e131::universe_to_multicast_ip(unsigned short)>
 8008f74:	4621      	mov	r1, r4
 8008f76:	4602      	mov	r2, r0
 8008f78:	4628      	mov	r0, r5
 8008f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f7e:	f006 bb41 	b.w	800f604 <Network::LeaveGroup(int, unsigned int)>
 8008f82:	bd70      	pop	{r4, r5, r6, pc}
 8008f84:	2000a288 	andcs	sl, r0, r8, lsl #5

08008f88 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 8008f88:	b570      	push	{r4, r5, r6, lr}
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	461d      	mov	r5, r3
 8008f8e:	b191      	cbz	r1, 8008fb6 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x2e>
 8008f90:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 8008f94:	f200 5606 	addw	r6, r0, #1286	; 0x506
 8008f98:	b99a      	cbnz	r2, 8008fc2 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 8008f9a:	4b0e      	ldr	r3, [pc, #56]	; (8008fd4 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4c>)
 8008f9c:	8035      	strh	r5, [r6, #0]
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	6826      	ldr	r6, [r4, #0]
 8008fa2:	681c      	ldr	r4, [r3, #0]
 8008fa4:	f7ff fe26 	bl	8008bf4 <e131::universe_to_multicast_ip(unsigned short)>
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4602      	mov	r2, r0
 8008fac:	4620      	mov	r0, r4
 8008fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fb2:	f006 bb24 	b.w	800f5fe <Network::JoinGroup(int, unsigned int)>
 8008fb6:	b15a      	cbz	r2, 8008fd0 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 8008fb8:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 8008fbc:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 8008fc0:	e7ea      	b.n	8008f98 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 8008fc2:	42aa      	cmp	r2, r5
 8008fc4:	d004      	beq.n	8008fd0 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 8008fc6:	2104      	movs	r1, #4
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f7ff ffbd 	bl	8008f48 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 8008fce:	e7e4      	b.n	8008f9a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x12>
 8008fd0:	bd70      	pop	{r4, r5, r6, pc}
 8008fd2:	bf00      	nop
 8008fd4:	2000a288 	andcs	sl, r0, r8, lsl #5

08008fd8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 8008fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fdc:	4604      	mov	r4, r0
 8008fde:	460d      	mov	r5, r1
 8008fe0:	461e      	mov	r6, r3
 8008fe2:	bb02      	cbnz	r2, 8009026 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 8008fe4:	2903      	cmp	r1, #3
 8008fe6:	d843      	bhi.n	8009070 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 8008fe8:	230c      	movs	r3, #12
 8008fea:	fb03 0301 	mla	r3, r3, r1, r0
 8008fee:	f893 2622 	ldrb.w	r2, [r3, #1570]	; 0x622
 8008ff2:	b12a      	cbz	r2, 8009000 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 8008ff4:	f8b3 3620 	ldrh.w	r3, [r3, #1568]	; 0x620
 8008ff8:	42b3      	cmp	r3, r6
 8008ffa:	d109      	bne.n	8009010 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 8008ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009000:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 8009004:	3201      	adds	r2, #1
 8009006:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 8009010:	210c      	movs	r1, #12
 8009012:	fb01 4405 	mla	r4, r1, r5, r4
 8009016:	4630      	mov	r0, r6
 8009018:	f8a4 6620 	strh.w	r6, [r4, #1568]	; 0x620
 800901c:	f7ff fdea 	bl	8008bf4 <e131::universe_to_multicast_ip(unsigned short)>
 8009020:	f8c4 0624 	str.w	r0, [r4, #1572]	; 0x624
 8009024:	e7ea      	b.n	8008ffc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 8009026:	2a02      	cmp	r2, #2
 8009028:	d122      	bne.n	8009070 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800902a:	2903      	cmp	r1, #3
 800902c:	d8e6      	bhi.n	8008ffc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800902e:	2344      	movs	r3, #68	; 0x44
 8009030:	fb03 0301 	mla	r3, r3, r1, r0
 8009034:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8009038:	b152      	cbz	r2, 8009050 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800903a:	2200      	movs	r2, #0
 800903c:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 8009040:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 8009044:	4632      	mov	r2, r6
 8009046:	3b01      	subs	r3, #1
 8009048:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800904c:	f7ff ff7c 	bl	8008f48 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 8009050:	210c      	movs	r1, #12
 8009052:	fb01 4505 	mla	r5, r1, r5, r4
 8009056:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0ce      	beq.n	8008ffc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800905e:	2300      	movs	r3, #0
 8009060:	f885 3622 	strb.w	r3, [r5, #1570]	; 0x622
 8009064:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 8009068:	3b01      	subs	r3, #1
 800906a:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800906e:	e7c5      	b.n	8008ffc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 8009070:	2344      	movs	r3, #68	; 0x44
 8009072:	fb03 4305 	mla	r3, r3, r5, r4
 8009076:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800907a:	b1d2      	cbz	r2, 80090b2 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800907c:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 8009080:	42b3      	cmp	r3, r6
 8009082:	d0bb      	beq.n	8008ffc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 8009084:	4632      	mov	r2, r6
 8009086:	4629      	mov	r1, r5
 8009088:	4620      	mov	r0, r4
 800908a:	f7ff ff5d 	bl	8008f48 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 8009090:	4630      	mov	r0, r6
 8009092:	681f      	ldr	r7, [r3, #0]
 8009094:	f8d4 8000 	ldr.w	r8, [r4]
 8009098:	f7ff fdac 	bl	8008bf4 <e131::universe_to_multicast_ip(unsigned short)>
 800909c:	4641      	mov	r1, r8
 800909e:	4602      	mov	r2, r0
 80090a0:	4638      	mov	r0, r7
 80090a2:	f006 faac 	bl	800f5fe <Network::JoinGroup(int, unsigned int)>
 80090a6:	2144      	movs	r1, #68	; 0x44
 80090a8:	fb01 4405 	mla	r4, r1, r5, r4
 80090ac:	f8a4 6510 	strh.w	r6, [r4, #1296]	; 0x510
 80090b0:	e7a4      	b.n	8008ffc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 80090b2:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 80090b6:	3201      	adds	r2, #1
 80090b8:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 80090c2:	e7e4      	b.n	800908e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 80090c4:	2000a288 	andcs	sl, r0, r8, lsl #5

080090c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 80090c8:	b953      	cbnz	r3, 80090e0 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 80090ca:	2903      	cmp	r1, #3
 80090cc:	d811      	bhi.n	80090f2 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 80090ce:	230c      	movs	r3, #12
 80090d0:	fb03 0001 	mla	r0, r3, r1, r0
 80090d4:	f8b0 3620 	ldrh.w	r3, [r0, #1568]	; 0x620
 80090d8:	f890 0622 	ldrb.w	r0, [r0, #1570]	; 0x622
 80090dc:	8013      	strh	r3, [r2, #0]
 80090de:	4770      	bx	lr
 80090e0:	2344      	movs	r3, #68	; 0x44
 80090e2:	fb03 0001 	mla	r0, r3, r1, r0
 80090e6:	f8b0 3510 	ldrh.w	r3, [r0, #1296]	; 0x510
 80090ea:	f890 0512 	ldrb.w	r0, [r0, #1298]	; 0x512
 80090ee:	8013      	strh	r3, [r2, #0]
 80090f0:	4770      	bx	lr
 80090f2:	4618      	mov	r0, r3
 80090f4:	4770      	bx	lr

080090f6 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 80090f6:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 80090fa:	b923      	cbnz	r3, 8009106 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 80090fc:	2301      	movs	r3, #1
 80090fe:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 8009102:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 8009106:	2344      	movs	r3, #68	; 0x44
 8009108:	fb03 0001 	mla	r0, r3, r1, r0
 800910c:	2301      	movs	r3, #1
 800910e:	f880 3551 	strb.w	r3, [r0, #1361]	; 0x551
 8009112:	4770      	bx	lr

08009114 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 8009114:	4602      	mov	r2, r0
 8009116:	2044      	movs	r0, #68	; 0x44
 8009118:	4348      	muls	r0, r1
 800911a:	b570      	push	{r4, r5, r6, lr}
 800911c:	1815      	adds	r5, r2, r0
 800911e:	460c      	mov	r4, r1
 8009120:	68d3      	ldr	r3, [r2, #12]
 8009122:	f8d5 1514 	ldr.w	r1, [r5, #1300]	; 0x514
 8009126:	1a5b      	subs	r3, r3, r1
 8009128:	f242 7110 	movw	r1, #10000	; 0x2710
 800912c:	428b      	cmp	r3, r1
 800912e:	d90a      	bls.n	8009146 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 8009130:	2600      	movs	r6, #0
 8009132:	f200 501c 	addw	r0, r0, #1308	; 0x51c
 8009136:	2110      	movs	r1, #16
 8009138:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
 800913c:	4410      	add	r0, r2
 800913e:	f7ff fd7f 	bl	8008c40 <memset.constprop.0.isra.0>
 8009142:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 8009146:	2044      	movs	r0, #68	; 0x44
 8009148:	4344      	muls	r4, r0
 800914a:	1915      	adds	r5, r2, r4
 800914c:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
 8009150:	68d3      	ldr	r3, [r2, #12]
 8009152:	1a5b      	subs	r3, r3, r1
 8009154:	f242 7110 	movw	r1, #10000	; 0x2710
 8009158:	428b      	cmp	r3, r1
 800915a:	d90a      	bls.n	8009172 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800915c:	2600      	movs	r6, #0
 800915e:	f504 64a7 	add.w	r4, r4, #1336	; 0x538
 8009162:	2110      	movs	r1, #16
 8009164:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 8009168:	1910      	adds	r0, r2, r4
 800916a:	f7ff fd69 	bl	8008c40 <memset.constprop.0.isra.0>
 800916e:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 8009172:	f892 1595 	ldrb.w	r1, [r2, #1429]	; 0x595
 8009176:	f892 3551 	ldrb.w	r3, [r2, #1361]	; 0x551
 800917a:	430b      	orrs	r3, r1
 800917c:	f892 15d9 	ldrb.w	r1, [r2, #1497]	; 0x5d9
 8009180:	430b      	orrs	r3, r1
 8009182:	d107      	bne.n	8009194 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 8009184:	f892 361d 	ldrb.w	r3, [r2, #1565]	; 0x61d
 8009188:	b923      	cbnz	r3, 8009194 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800918a:	2101      	movs	r1, #1
 800918c:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 8009190:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 8009194:	bd70      	pop	{r4, r5, r6, pc}

08009196 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 8009196:	2244      	movs	r2, #68	; 0x44
 8009198:	fb02 0101 	mla	r1, r2, r1, r0
 800919c:	68c3      	ldr	r3, [r0, #12]
 800919e:	f8d1 0530 	ldr.w	r0, [r1, #1328]	; 0x530
 80091a2:	b510      	push	{r4, lr}
 80091a4:	1a1a      	subs	r2, r3, r0
 80091a6:	f8d1 4514 	ldr.w	r4, [r1, #1300]	; 0x514
 80091aa:	f8d1 0534 	ldr.w	r0, [r1, #1332]	; 0x534
 80091ae:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 80091b2:	b171      	cbz	r1, 80091d2 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 80091b4:	1b1b      	subs	r3, r3, r4
 80091b6:	b128      	cbz	r0, 80091c4 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 80091b8:	f242 700f 	movw	r0, #9999	; 0x270f
 80091bc:	4283      	cmp	r3, r0
 80091be:	d90d      	bls.n	80091dc <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 80091c0:	4282      	cmp	r2, r0
 80091c2:	e002      	b.n	80091ca <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 80091c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80091c8:	4283      	cmp	r3, r0
 80091ca:	bf94      	ite	ls
 80091cc:	2000      	movls	r0, #0
 80091ce:	2001      	movhi	r0, #1
 80091d0:	bd10      	pop	{r4, pc}
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d0fc      	beq.n	80091d0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 80091d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80091da:	e7f1      	b.n	80091c0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 80091dc:	2000      	movs	r0, #0
 80091de:	e7f7      	b.n	80091d0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

080091e0 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 80091e0:	684a      	ldr	r2, [r1, #4]
 80091e2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80091e4:	b510      	push	{r4, lr}
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d10b      	bne.n	8009202 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x22>
 80091ea:	f100 0392 	add.w	r3, r0, #146	; 0x92
 80091ee:	3108      	adds	r1, #8
 80091f0:	30a2      	adds	r0, #162	; 0xa2
 80091f2:	4298      	cmp	r0, r3
 80091f4:	d007      	beq.n	8009206 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 80091f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091fe:	4294      	cmp	r4, r2
 8009200:	d0f7      	beq.n	80091f2 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 8009202:	2000      	movs	r0, #0
 8009204:	bd10      	pop	{r4, pc}
 8009206:	2001      	movs	r0, #1
 8009208:	e7fc      	b.n	8009204 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x24>
	...

0800920c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800920c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	2301      	movs	r3, #1
 8009212:	4605      	mov	r5, r0
 8009214:	4690      	mov	r8, r2
 8009216:	460f      	mov	r7, r1
 8009218:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800921c:	2900      	cmp	r1, #0
 800921e:	d03d      	beq.n	800929c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 8009220:	2a00      	cmp	r2, #0
 8009222:	d03b      	beq.n	800929c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 8009224:	2600      	movs	r6, #0
 8009226:	f240 6804 	movw	r8, #1540	; 0x604
 800922a:	4637      	mov	r7, r6
 800922c:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 8009230:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 8009234:	f200 541c 	addw	r4, r0, #1308	; 0x51c
 8009238:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800923c:	b1e3      	cbz	r3, 8009278 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6c>
 800923e:	6868      	ldr	r0, [r5, #4]
 8009240:	4631      	mov	r1, r6
 8009242:	6803      	ldr	r3, [r0, #0]
 8009244:	68db      	ldr	r3, [r3, #12]
 8009246:	4798      	blx	r3
 8009248:	2110      	movs	r1, #16
 800924a:	4620      	mov	r0, r4
 800924c:	f844 7c04 	str.w	r7, [r4, #-4]
 8009250:	f7ff fcf6 	bl	8008c40 <memset.constprop.0.isra.0>
 8009254:	2110      	movs	r1, #16
 8009256:	f104 001c 	add.w	r0, r4, #28
 800925a:	61a7      	str	r7, [r4, #24]
 800925c:	f7ff fcf0 	bl	8008c40 <memset.constprop.0.isra.0>
 8009260:	f7ff fd00 	bl	8008c64 <lightset::Data::Get()>
 8009264:	fb08 0006 	mla	r0, r8, r6, r0
 8009268:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800926c:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 8009270:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
 8009274:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
 8009278:	3601      	adds	r6, #1
 800927a:	2e04      	cmp	r6, #4
 800927c:	f104 0444 	add.w	r4, r4, #68	; 0x44
 8009280:	d1da      	bne.n	8009238 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 8009282:	4b25      	ldr	r3, [pc, #148]	; (8009318 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10c>)
 8009284:	2102      	movs	r1, #2
 8009286:	6818      	ldr	r0, [r3, #0]
 8009288:	f008 fd30 	bl	8011cec <LedBlink::SetMode(ledblink::Mode)>
 800928c:	f895 350d 	ldrb.w	r3, [r5, #1293]	; 0x50d
 8009290:	f023 0302 	bic.w	r3, r3, #2
 8009294:	f885 350d 	strb.w	r3, [r5, #1293]	; 0x50d
 8009298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	2600      	movs	r6, #0
 800929e:	f240 6b04 	movw	fp, #1540	; 0x604
 80092a2:	46b1      	mov	r9, r6
 80092a4:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 80092a8:	7ea3      	ldrb	r3, [r4, #26]
 80092aa:	b373      	cbz	r3, 800930a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 80092ac:	b15f      	cbz	r7, 80092c6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 80092ae:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80092b2:	b143      	cbz	r3, 80092c6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 80092b4:	2110      	movs	r1, #16
 80092b6:	f844 9c20 	str.w	r9, [r4, #-32]
 80092ba:	f1a4 001c 	sub.w	r0, r4, #28
 80092be:	f7ff fcbf 	bl	8008c40 <memset.constprop.0.isra.0>
 80092c2:	f884 9019 	strb.w	r9, [r4, #25]
 80092c6:	f1b8 0f00 	cmp.w	r8, #0
 80092ca:	d00a      	beq.n	80092e2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 80092cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80092d0:	b13b      	cbz	r3, 80092e2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 80092d2:	2110      	movs	r1, #16
 80092d4:	4620      	mov	r0, r4
 80092d6:	f844 9c04 	str.w	r9, [r4, #-4]
 80092da:	f7ff fcb1 	bl	8008c40 <memset.constprop.0.isra.0>
 80092de:	f884 9019 	strb.w	r9, [r4, #25]
 80092e2:	f895 a4f5 	ldrb.w	sl, [r5, #1269]	; 0x4f5
 80092e6:	f1ba 0f00 	cmp.w	sl, #0
 80092ea:	d10e      	bne.n	800930a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 80092ec:	6868      	ldr	r0, [r5, #4]
 80092ee:	4631      	mov	r1, r6
 80092f0:	6803      	ldr	r3, [r0, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	4798      	blx	r3
 80092f6:	f7ff fcb5 	bl	8008c64 <lightset::Data::Get()>
 80092fa:	fb0b 0006 	mla	r0, fp, r6, r0
 80092fe:	f8c0 a600 	str.w	sl, [r0, #1536]	; 0x600
 8009302:	f884 a018 	strb.w	sl, [r4, #24]
 8009306:	f884 a01a 	strb.w	sl, [r4, #26]
 800930a:	3601      	adds	r6, #1
 800930c:	2e04      	cmp	r6, #4
 800930e:	f104 0444 	add.w	r4, r4, #68	; 0x44
 8009312:	d1c9      	bne.n	80092a8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9c>
 8009314:	e7b5      	b.n	8009282 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x76>
 8009316:	bf00      	nop
 8009318:	2000a9ac 	andcs	sl, r0, ip, lsr #19

0800931c <E131Bridge::HandleDmx()>:
 800931c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	4604      	mov	r4, r0
 8009322:	2600      	movs	r6, #0
 8009324:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 8009328:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800932c:	ba7f      	rev16	r7, r7
 800932e:	b2bf      	uxth	r7, r7
 8009330:	3f01      	subs	r7, #1
 8009332:	f200 551c 	addw	r5, r0, #1308	; 0x51c
 8009336:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800933a:	b353      	cbz	r3, 8009392 <E131Bridge::HandleDmx()+0x76>
 800933c:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 8009340:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 8009344:	ba5b      	rev16	r3, r3
 8009346:	b29b      	uxth	r3, r3
 8009348:	429a      	cmp	r2, r3
 800934a:	d122      	bne.n	8009392 <E131Bridge::HandleDmx()+0x76>
 800934c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8009350:	f1a5 0108 	sub.w	r1, r5, #8
 8009354:	4620      	mov	r0, r4
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	f7ff ff42 	bl	80091e0 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800935c:	f105 0114 	add.w	r1, r5, #20
 8009360:	4682      	mov	sl, r0
 8009362:	4620      	mov	r0, r4
 8009364:	f7ff ff3c 	bl	80091e0 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 8009368:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800936c:	4680      	mov	r8, r0
 800936e:	f1ba 0f00 	cmp.w	sl, #0
 8009372:	d016      	beq.n	80093a2 <E131Bridge::HandleDmx()+0x86>
 8009374:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009378:	7c2a      	ldrb	r2, [r5, #16]
 800937a:	742b      	strb	r3, [r5, #16]
 800937c:	3313      	adds	r3, #19
 800937e:	1a9b      	subs	r3, r3, r2
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b13      	cmp	r3, #19
 8009384:	d905      	bls.n	8009392 <E131Bridge::HandleDmx()+0x76>
 8009386:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800938a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800938e:	2a00      	cmp	r2, #0
 8009390:	da10      	bge.n	80093b4 <E131Bridge::HandleDmx()+0x98>
 8009392:	3601      	adds	r6, #1
 8009394:	2e04      	cmp	r6, #4
 8009396:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800939a:	d1cc      	bne.n	8009336 <E131Bridge::HandleDmx()+0x1a>
 800939c:	b003      	add	sp, #12
 800939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d0ef      	beq.n	8009386 <E131Bridge::HandleDmx()+0x6a>
 80093a6:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 80093aa:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 80093ae:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 80093b2:	e7e3      	b.n	800937c <E131Bridge::HandleDmx()+0x60>
 80093b4:	065a      	lsls	r2, r3, #25
 80093b6:	d50b      	bpl.n	80093d0 <E131Bridge::HandleDmx()+0xb4>
 80093b8:	f1ba 0f00 	cmp.w	sl, #0
 80093bc:	d102      	bne.n	80093c4 <E131Bridge::HandleDmx()+0xa8>
 80093be:	f1b8 0f00 	cmp.w	r8, #0
 80093c2:	d0e6      	beq.n	8009392 <E131Bridge::HandleDmx()+0x76>
 80093c4:	4642      	mov	r2, r8
 80093c6:	4651      	mov	r1, sl
 80093c8:	4620      	mov	r0, r4
 80093ca:	f7ff ff1f 	bl	800920c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 80093ce:	e7e0      	b.n	8009392 <E131Bridge::HandleDmx()+0x76>
 80093d0:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 80093d4:	b133      	cbz	r3, 80093e4 <E131Bridge::HandleDmx()+0xc8>
 80093d6:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 80093da:	b91b      	cbnz	r3, 80093e4 <E131Bridge::HandleDmx()+0xc8>
 80093dc:	4631      	mov	r1, r6
 80093de:	4620      	mov	r0, r4
 80093e0:	f7ff fe98 	bl	8009114 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 80093e4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 80093e8:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d259      	bcs.n	80094a4 <E131Bridge::HandleDmx()+0x188>
 80093f0:	4631      	mov	r1, r6
 80093f2:	4620      	mov	r0, r4
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	f7ff fece 	bl	8009196 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d0c9      	beq.n	8009392 <E131Bridge::HandleDmx()+0x76>
 80093fe:	9b01      	ldr	r3, [sp, #4]
 8009400:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 8009404:	9b00      	ldr	r3, [sp, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d154      	bne.n	80094b4 <E131Bridge::HandleDmx()+0x198>
 800940a:	f1bb 0f00 	cmp.w	fp, #0
 800940e:	d15c      	bne.n	80094ca <E131Bridge::HandleDmx()+0x1ae>
 8009410:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009412:	2210      	movs	r2, #16
 8009414:	f845 3c04 	str.w	r3, [r5, #-4]
 8009418:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800941c:	4628      	mov	r0, r5
 800941e:	742b      	strb	r3, [r5, #16]
 8009420:	f104 0192 	add.w	r1, r4, #146	; 0x92
 8009424:	f7ff fc14 	bl	8008c50 <memcpy.isra.0>
 8009428:	68e3      	ldr	r3, [r4, #12]
 800942a:	463a      	mov	r2, r7
 800942c:	4649      	mov	r1, r9
 800942e:	4630      	mov	r0, r6
 8009430:	f845 3c08 	str.w	r3, [r5, #-8]
 8009434:	f7ff fc22 	bl	8008c7c <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 8009438:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800943c:	069b      	lsls	r3, r3, #26
 800943e:	f100 80ad 	bmi.w	800959c <E131Bridge::HandleDmx()+0x280>
 8009442:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 8009446:	b29a      	uxth	r2, r3
 8009448:	2a00      	cmp	r2, #0
 800944a:	f000 80ab 	beq.w	80095a4 <E131Bridge::HandleDmx()+0x288>
 800944e:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 8009452:	2a00      	cmp	r2, #0
 8009454:	f040 80a6 	bne.w	80095a4 <E131Bridge::HandleDmx()+0x288>
 8009458:	ba5b      	rev16	r3, r3
 800945a:	b29b      	uxth	r3, r3
 800945c:	f1ba 0f00 	cmp.w	sl, #0
 8009460:	f040 8099 	bne.w	8009596 <E131Bridge::HandleDmx()+0x27a>
 8009464:	f1b8 0f00 	cmp.w	r8, #0
 8009468:	f040 8095 	bne.w	8009596 <E131Bridge::HandleDmx()+0x27a>
 800946c:	69aa      	ldr	r2, [r5, #24]
 800946e:	f855 1c04 	ldr.w	r1, [r5, #-4]
 8009472:	3a00      	subs	r2, #0
 8009474:	bf18      	it	ne
 8009476:	2201      	movne	r2, #1
 8009478:	3900      	subs	r1, #0
 800947a:	bf18      	it	ne
 800947c:	2101      	movne	r1, #1
 800947e:	4620      	mov	r0, r4
 8009480:	f7ff fd82 	bl	8008f88 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 8009484:	f240 1301 	movw	r3, #257	; 0x101
 8009488:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800948c:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 8009490:	2b00      	cmp	r3, #0
 8009492:	f040 808c 	bne.w	80095ae <E131Bridge::HandleDmx()+0x292>
 8009496:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800949a:	f043 0302 	orr.w	r3, r3, #2
 800949e:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 80094a2:	e776      	b.n	8009392 <E131Bridge::HandleDmx()+0x76>
 80094a4:	d9ae      	bls.n	8009404 <E131Bridge::HandleDmx()+0xe8>
 80094a6:	2200      	movs	r2, #0
 80094a8:	f845 2c04 	str.w	r2, [r5, #-4]
 80094ac:	61aa      	str	r2, [r5, #24]
 80094ae:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 80094b2:	e7a5      	b.n	8009400 <E131Bridge::HandleDmx()+0xe4>
 80094b4:	f1ba 0f00 	cmp.w	sl, #0
 80094b8:	f000 8092 	beq.w	80095e0 <E131Bridge::HandleDmx()+0x2c4>
 80094bc:	f1bb 0f00 	cmp.w	fp, #0
 80094c0:	d15c      	bne.n	800957c <E131Bridge::HandleDmx()+0x260>
 80094c2:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 80094c6:	742b      	strb	r3, [r5, #16]
 80094c8:	e7ae      	b.n	8009428 <E131Bridge::HandleDmx()+0x10c>
 80094ca:	f1b8 0f00 	cmp.w	r8, #0
 80094ce:	d03b      	beq.n	8009548 <E131Bridge::HandleDmx()+0x22c>
 80094d0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 80094d4:	f240 6b04 	movw	fp, #1540	; 0x604
 80094d8:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 80094dc:	68e3      	ldr	r3, [r4, #12]
 80094de:	fb0b fb06 	mul.w	fp, fp, r6
 80094e2:	616b      	str	r3, [r5, #20]
 80094e4:	f7ff fbbe 	bl	8008c64 <lightset::Data::Get()>
 80094e8:	4603      	mov	r3, r0
 80094ea:	f50b 7000 	add.w	r0, fp, #512	; 0x200
 80094ee:	463a      	mov	r2, r7
 80094f0:	4649      	mov	r1, r9
 80094f2:	4418      	add	r0, r3
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	f7ff fbab 	bl	8008c50 <memcpy.isra.0>
 80094fa:	9b00      	ldr	r3, [sp, #0]
 80094fc:	f50b 6080 	add.w	r0, fp, #1024	; 0x400
 8009500:	eb03 020b 	add.w	r2, r3, fp
 8009504:	f8c2 7600 	str.w	r7, [r2, #1536]	; 0x600
 8009508:	4649      	mov	r1, r9
 800950a:	463a      	mov	r2, r7
 800950c:	4418      	add	r0, r3
 800950e:	f7ff fb9f 	bl	8008c50 <memcpy.isra.0>
 8009512:	e791      	b.n	8009438 <E131Bridge::HandleDmx()+0x11c>
 8009514:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009516:	2210      	movs	r2, #16
 8009518:	61ab      	str	r3, [r5, #24]
 800951a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800951e:	f104 0192 	add.w	r1, r4, #146	; 0x92
 8009522:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 8009526:	f105 001c 	add.w	r0, r5, #28
 800952a:	f7ff fb91 	bl	8008c50 <memcpy.isra.0>
 800952e:	68e3      	ldr	r3, [r4, #12]
 8009530:	4631      	mov	r1, r6
 8009532:	4620      	mov	r0, r4
 8009534:	616b      	str	r3, [r5, #20]
 8009536:	f7ff fdde 	bl	80090f6 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800953a:	463a      	mov	r2, r7
 800953c:	4649      	mov	r1, r9
 800953e:	4630      	mov	r0, r6
 8009540:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009542:	f7ff fbe1 	bl	8008d08 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 8009546:	e777      	b.n	8009438 <E131Bridge::HandleDmx()+0x11c>
 8009548:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800954a:	2210      	movs	r2, #16
 800954c:	f845 3c04 	str.w	r3, [r5, #-4]
 8009550:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009554:	4628      	mov	r0, r5
 8009556:	742b      	strb	r3, [r5, #16]
 8009558:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800955c:	f7ff fb78 	bl	8008c50 <memcpy.isra.0>
 8009560:	68e3      	ldr	r3, [r4, #12]
 8009562:	4631      	mov	r1, r6
 8009564:	4620      	mov	r0, r4
 8009566:	f845 3c08 	str.w	r3, [r5, #-8]
 800956a:	f7ff fdc4 	bl	80090f6 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800956e:	463a      	mov	r2, r7
 8009570:	4649      	mov	r1, r9
 8009572:	4630      	mov	r0, r6
 8009574:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009576:	f7ff fb9e 	bl	8008cb6 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800957a:	e75d      	b.n	8009438 <E131Bridge::HandleDmx()+0x11c>
 800957c:	f1b8 0f00 	cmp.w	r8, #0
 8009580:	d103      	bne.n	800958a <E131Bridge::HandleDmx()+0x26e>
 8009582:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 8009586:	742b      	strb	r3, [r5, #16]
 8009588:	e7ea      	b.n	8009560 <E131Bridge::HandleDmx()+0x244>
 800958a:	481b      	ldr	r0, [pc, #108]	; (80095f8 <E131Bridge::HandleDmx()+0x2dc>)
 800958c:	b003      	add	sp, #12
 800958e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009592:	f7ff badf 	b.w	8008b54 <printf>
 8009596:	4642      	mov	r2, r8
 8009598:	4651      	mov	r1, sl
 800959a:	e770      	b.n	800947e <E131Bridge::HandleDmx()+0x162>
 800959c:	f04f 0300 	mov.w	r3, #0
 80095a0:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 80095a4:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f47f af6f 	bne.w	800948c <E131Bridge::HandleDmx()+0x170>
 80095ae:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80095b2:	f7ff fb57 	bl	8008c64 <lightset::Data::Get()>
 80095b6:	4632      	mov	r2, r6
 80095b8:	4641      	mov	r1, r8
 80095ba:	f7ff fbcf 	bl	8008d5c <lightset::Data::IOutput(LightSet*, unsigned int) const>
 80095be:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f47f af67 	bne.w	8009496 <E131Bridge::HandleDmx()+0x17a>
 80095c8:	6860      	ldr	r0, [r4, #4]
 80095ca:	4631      	mov	r1, r6
 80095cc:	6803      	ldr	r3, [r0, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	4798      	blx	r3
 80095d2:	f04f 0301 	mov.w	r3, #1
 80095d6:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 80095da:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 80095de:	e75a      	b.n	8009496 <E131Bridge::HandleDmx()+0x17a>
 80095e0:	f1bb 0f00 	cmp.w	fp, #0
 80095e4:	d096      	beq.n	8009514 <E131Bridge::HandleDmx()+0x1f8>
 80095e6:	f1b8 0f00 	cmp.w	r8, #0
 80095ea:	d0ce      	beq.n	800958a <E131Bridge::HandleDmx()+0x26e>
 80095ec:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 80095f0:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 80095f4:	e79b      	b.n	800952e <E131Bridge::HandleDmx()+0x212>
 80095f6:	bf00      	nop
 80095f8:	080141e0 	stmdaeq	r1, {r5, r6, r7, r8, lr}

080095fc <E131Bridge::IsValidRoot()>:
 80095fc:	4a0d      	ldr	r2, [pc, #52]	; (8009634 <E131Bridge::IsValidRoot()+0x38>)
 80095fe:	b530      	push	{r4, r5, lr}
 8009600:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8009604:	f100 058c 	add.w	r5, r0, #140	; 0x8c
 8009608:	42ab      	cmp	r3, r5
 800960a:	d007      	beq.n	800961c <E131Bridge::IsValidRoot()+0x20>
 800960c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009610:	f812 1b01 	ldrb.w	r1, [r2], #1
 8009614:	428c      	cmp	r4, r1
 8009616:	d0f7      	beq.n	8009608 <E131Bridge::IsValidRoot()+0xc>
 8009618:	2000      	movs	r0, #0
 800961a:	e008      	b.n	800962e <E131Bridge::IsValidRoot()+0x32>
 800961c:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 8009620:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8009624:	d004      	beq.n	8009630 <E131Bridge::IsValidRoot()+0x34>
 8009626:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800962a:	4258      	negs	r0, r3
 800962c:	4158      	adcs	r0, r3
 800962e:	bd30      	pop	{r4, r5, pc}
 8009630:	2001      	movs	r0, #1
 8009632:	e7fc      	b.n	800962e <E131Bridge::IsValidRoot()+0x32>
 8009634:	080143c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, lr}

08009638 <E131Bridge::IsValidDataPacket()>:
 8009638:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800963c:	2b02      	cmp	r3, #2
 800963e:	d10d      	bne.n	800965c <E131Bridge::IsValidDataPacket()+0x24>
 8009640:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 8009644:	2ba1      	cmp	r3, #161	; 0xa1
 8009646:	d109      	bne.n	800965c <E131Bridge::IsValidDataPacket()+0x24>
 8009648:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800964c:	b933      	cbnz	r3, 800965c <E131Bridge::IsValidDataPacket()+0x24>
 800964e:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 8009652:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8009656:	4258      	negs	r0, r3
 8009658:	4158      	adcs	r0, r3
 800965a:	4770      	bx	lr
 800965c:	2000      	movs	r0, #0
 800965e:	4770      	bx	lr

08009660 <E131Bridge::Run()>:
 8009660:	b530      	push	{r4, r5, lr}
 8009662:	4601      	mov	r1, r0
 8009664:	4604      	mov	r4, r0
 8009666:	b085      	sub	sp, #20
 8009668:	f10d 030e 	add.w	r3, sp, #14
 800966c:	f811 0b7c 	ldrb.w	r0, [r1], #124
 8009670:	f44f 628f 	mov.w	r2, #1144	; 0x478
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800967a:	f005 fa83 	bl	800eb84 <udp_recv>
 800967e:	4b3c      	ldr	r3, [pc, #240]	; (8009770 <E131Bridge::Run()+0x110>)
 8009680:	681d      	ldr	r5, [r3, #0]
 8009682:	60e5      	str	r5, [r4, #12]
 8009684:	2800      	cmp	r0, #0
 8009686:	d13b      	bne.n	8009700 <E131Bridge::Run()+0xa0>
 8009688:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800968c:	b183      	cbz	r3, 80096b0 <E131Bridge::Run()+0x50>
 800968e:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 8009692:	bb73      	cbnz	r3, 80096f2 <E131Bridge::Run()+0x92>
 8009694:	6923      	ldr	r3, [r4, #16]
 8009696:	1aed      	subs	r5, r5, r3
 8009698:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800969c:	429d      	cmp	r5, r3
 800969e:	d928      	bls.n	80096f2 <E131Bridge::Run()+0x92>
 80096a0:	6863      	ldr	r3, [r4, #4]
 80096a2:	b9eb      	cbnz	r3, 80096e0 <E131Bridge::Run()+0x80>
 80096a4:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 80096a8:	f023 0302 	bic.w	r3, r3, #2
 80096ac:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 80096b0:	6963      	ldr	r3, [r4, #20]
 80096b2:	b12b      	cbz	r3, 80096c0 <E131Bridge::Run()+0x60>
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 f94f 	bl	8009958 <E131Bridge::HandleDmxIn()>
 80096ba:	4620      	mov	r0, r4
 80096bc:	f000 f8ca 	bl	8009854 <E131Bridge::SendDiscoveryPacket()>
 80096c0:	7a23      	ldrb	r3, [r4, #8]
 80096c2:	b15b      	cbz	r3, 80096dc <E131Bridge::Run()+0x7c>
 80096c4:	4b2b      	ldr	r3, [pc, #172]	; (8009774 <E131Bridge::Run()+0x114>)
 80096c6:	6818      	ldr	r0, [r3, #0]
 80096c8:	6843      	ldr	r3, [r0, #4]
 80096ca:	2b04      	cmp	r3, #4
 80096cc:	d006      	beq.n	80096dc <E131Bridge::Run()+0x7c>
 80096ce:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d049      	beq.n	800976a <E131Bridge::Run()+0x10a>
 80096d6:	2103      	movs	r1, #3
 80096d8:	f008 fb08 	bl	8011cec <LedBlink::SetMode(ledblink::Mode)>
 80096dc:	b005      	add	sp, #20
 80096de:	bd30      	pop	{r4, r5, pc}
 80096e0:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1dd      	bne.n	80096a4 <E131Bridge::Run()+0x44>
 80096e8:	2201      	movs	r2, #1
 80096ea:	4620      	mov	r0, r4
 80096ec:	4611      	mov	r1, r2
 80096ee:	f7ff fd8d 	bl	800920c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 80096f2:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 80096f6:	1a9b      	subs	r3, r3, r2
 80096f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096fc:	d3d8      	bcc.n	80096b0 <E131Bridge::Run()+0x50>
 80096fe:	e7d1      	b.n	80096a4 <E131Bridge::Run()+0x44>
 8009700:	4620      	mov	r0, r4
 8009702:	f7ff ff7b 	bl	80095fc <E131Bridge::IsValidRoot()>
 8009706:	2800      	cmp	r0, #0
 8009708:	d0e8      	beq.n	80096dc <E131Bridge::Run()+0x7c>
 800970a:	2300      	movs	r3, #0
 800970c:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 8009710:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 8009714:	6125      	str	r5, [r4, #16]
 8009716:	b15b      	cbz	r3, 8009730 <E131Bridge::Run()+0xd0>
 8009718:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800971c:	b943      	cbnz	r3, 8009730 <E131Bridge::Run()+0xd0>
 800971e:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 8009722:	1aad      	subs	r5, r5, r2
 8009724:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8009728:	4295      	cmp	r5, r2
 800972a:	bf88      	it	hi
 800972c:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 8009730:	6863      	ldr	r3, [r4, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d0bc      	beq.n	80096b0 <E131Bridge::Run()+0x50>
 8009736:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800973a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800973e:	ba1a      	rev	r2, r3
 8009740:	d108      	bne.n	8009754 <E131Bridge::Run()+0xf4>
 8009742:	4620      	mov	r0, r4
 8009744:	f7ff ff78 	bl	8009638 <E131Bridge::IsValidDataPacket()>
 8009748:	2800      	cmp	r0, #0
 800974a:	d0b1      	beq.n	80096b0 <E131Bridge::Run()+0x50>
 800974c:	4620      	mov	r0, r4
 800974e:	f7ff fde5 	bl	800931c <E131Bridge::HandleDmx()>
 8009752:	e7ad      	b.n	80096b0 <E131Bridge::Run()+0x50>
 8009754:	2a08      	cmp	r2, #8
 8009756:	d1ab      	bne.n	80096b0 <E131Bridge::Run()+0x50>
 8009758:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800975c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009760:	d1a6      	bne.n	80096b0 <E131Bridge::Run()+0x50>
 8009762:	4620      	mov	r0, r4
 8009764:	f000 f972 	bl	8009a4c <E131Bridge::HandleSynchronization()>
 8009768:	e7a2      	b.n	80096b0 <E131Bridge::Run()+0x50>
 800976a:	2102      	movs	r1, #2
 800976c:	e7b4      	b.n	80096d8 <E131Bridge::Run()+0x78>
 800976e:	bf00      	nop
 8009770:	2000a9c4 	andcs	sl, r0, r4, asr #19
 8009774:	2000a9ac 	andcs	sl, r0, ip, lsr #19

08009778 <E131Bridge::FillDiscoveryPacket()>:
 8009778:	2200      	movs	r2, #0
 800977a:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800977e:	b510      	push	{r4, lr}
 8009780:	333c      	adds	r3, #60	; 0x3c
 8009782:	005b      	lsls	r3, r3, #1
 8009784:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 8009788:	69c3      	ldr	r3, [r0, #28]
 800978a:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800978e:	428b      	cmp	r3, r1
 8009790:	d002      	beq.n	8009798 <E131Bridge::FillDiscoveryPacket()+0x20>
 8009792:	f803 2b01 	strb.w	r2, [r3], #1
 8009796:	e7fa      	b.n	800978e <E131Bridge::FillDiscoveryPacket()+0x16>
 8009798:	69c3      	ldr	r3, [r0, #28]
 800979a:	492d      	ldr	r1, [pc, #180]	; (8009850 <E131Bridge::FillDiscoveryPacket()+0xd8>)
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	2210      	movs	r2, #16
 80097a0:	705a      	strb	r2, [r3, #1]
 80097a2:	1d1a      	adds	r2, r3, #4
 80097a4:	3310      	adds	r3, #16
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d004      	beq.n	80097b4 <E131Bridge::FillDiscoveryPacket()+0x3c>
 80097aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ae:	f802 4b01 	strb.w	r4, [r2], #1
 80097b2:	e7f8      	b.n	80097a6 <E131Bridge::FillDiscoveryPacket()+0x2e>
 80097b4:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 80097b8:	69c3      	ldr	r3, [r0, #28]
 80097ba:	3234      	adds	r2, #52	; 0x34
 80097bc:	0052      	lsls	r2, r2, #1
 80097be:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80097c2:	ba52      	rev16	r2, r2
 80097c4:	821a      	strh	r2, [r3, #16]
 80097c6:	2200      	movs	r2, #0
 80097c8:	749a      	strb	r2, [r3, #18]
 80097ca:	74da      	strb	r2, [r3, #19]
 80097cc:	751a      	strb	r2, [r3, #20]
 80097ce:	2208      	movs	r2, #8
 80097d0:	f100 0124 	add.w	r1, r0, #36	; 0x24
 80097d4:	755a      	strb	r2, [r3, #21]
 80097d6:	f100 0434 	add.w	r4, r0, #52	; 0x34
 80097da:	3316      	adds	r3, #22
 80097dc:	42a1      	cmp	r1, r4
 80097de:	d004      	beq.n	80097ea <E131Bridge::FillDiscoveryPacket()+0x72>
 80097e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097e4:	f803 2b01 	strb.w	r2, [r3], #1
 80097e8:	e7f8      	b.n	80097dc <E131Bridge::FillDiscoveryPacket()+0x64>
 80097ea:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 80097ee:	69c3      	ldr	r3, [r0, #28]
 80097f0:	3229      	adds	r2, #41	; 0x29
 80097f2:	0052      	lsls	r2, r2, #1
 80097f4:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80097f8:	ba52      	rev16	r2, r2
 80097fa:	84da      	strh	r2, [r3, #38]	; 0x26
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009802:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8009806:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800980a:	2202      	movs	r2, #2
 800980c:	332c      	adds	r3, #44	; 0x2c
 800980e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009812:	f100 0474 	add.w	r4, r0, #116	; 0x74
 8009816:	42a1      	cmp	r1, r4
 8009818:	d004      	beq.n	8009824 <E131Bridge::FillDiscoveryPacket()+0xac>
 800981a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800981e:	f803 2b01 	strb.w	r2, [r3], #1
 8009822:	e7f8      	b.n	8009816 <E131Bridge::FillDiscoveryPacket()+0x9e>
 8009824:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 8009828:	69c2      	ldr	r2, [r0, #28]
 800982a:	3304      	adds	r3, #4
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8009832:	ba5b      	rev16	r3, r3
 8009834:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 8009838:	2300      	movs	r3, #0
 800983a:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800983e:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 8009842:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 8009846:	2301      	movs	r3, #1
 8009848:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800984c:	bd10      	pop	{r4, pc}
 800984e:	bf00      	nop
 8009850:	080143c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, lr}

08009854 <E131Bridge::SendDiscoveryPacket()>:
 8009854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009856:	f242 710f 	movw	r1, #9999	; 0x270f
 800985a:	68c2      	ldr	r2, [r0, #12]
 800985c:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 8009860:	4604      	mov	r4, r0
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	428b      	cmp	r3, r1
 8009866:	d924      	bls.n	80098b2 <E131Bridge::SendDiscoveryPacket()+0x5e>
 8009868:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800986c:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 8009870:	b1ab      	cbz	r3, 800989e <E131Bridge::SendDiscoveryPacket()+0x4a>
 8009872:	2500      	movs	r5, #0
 8009874:	462e      	mov	r6, r5
 8009876:	2300      	movs	r3, #0
 8009878:	4629      	mov	r1, r5
 800987a:	4620      	mov	r0, r4
 800987c:	f10d 020e 	add.w	r2, sp, #14
 8009880:	f7ff fc22 	bl	80090c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 8009884:	b140      	cbz	r0, 8009898 <E131Bridge::SendDiscoveryPacket()+0x44>
 8009886:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800988a:	69e2      	ldr	r2, [r4, #28]
 800988c:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 8009890:	ba5b      	rev16	r3, r3
 8009892:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8009896:	3601      	adds	r6, #1
 8009898:	3501      	adds	r5, #1
 800989a:	2d04      	cmp	r5, #4
 800989c:	d1eb      	bne.n	8009876 <E131Bridge::SendDiscoveryPacket()+0x22>
 800989e:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 80098a2:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	69e1      	ldr	r1, [r4, #28]
 80098aa:	6a23      	ldr	r3, [r4, #32]
 80098ac:	7820      	ldrb	r0, [r4, #0]
 80098ae:	f005 f9c5 	bl	800ec3c <udp_send>
 80098b2:	b004      	add	sp, #16
 80098b4:	bd70      	pop	{r4, r5, r6, pc}

080098b6 <memcpy.isra.0>:
 80098b6:	3801      	subs	r0, #1
 80098b8:	440a      	add	r2, r1
 80098ba:	4291      	cmp	r1, r2
 80098bc:	d004      	beq.n	80098c8 <memcpy.isra.0+0x12>
 80098be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098c2:	f800 3f01 	strb.w	r3, [r0, #1]!
 80098c6:	e7f8      	b.n	80098ba <memcpy.isra.0+0x4>
 80098c8:	4770      	bx	lr
	...

080098cc <E131Bridge::FillDataPacket()>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	2400      	movs	r4, #0
 80098d0:	2610      	movs	r6, #16
 80098d2:	4605      	mov	r5, r0
 80098d4:	6980      	ldr	r0, [r0, #24]
 80098d6:	220c      	movs	r2, #12
 80098d8:	7046      	strb	r6, [r0, #1]
 80098da:	7004      	strb	r4, [r0, #0]
 80098dc:	7084      	strb	r4, [r0, #2]
 80098de:	70c4      	strb	r4, [r0, #3]
 80098e0:	491c      	ldr	r1, [pc, #112]	; (8009954 <E131Bridge::FillDataPacket()+0x88>)
 80098e2:	3004      	adds	r0, #4
 80098e4:	f7ff ffe7 	bl	80098b6 <memcpy.isra.0>
 80098e8:	2304      	movs	r3, #4
 80098ea:	4632      	mov	r2, r6
 80098ec:	2602      	movs	r6, #2
 80098ee:	69a8      	ldr	r0, [r5, #24]
 80098f0:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80098f4:	7543      	strb	r3, [r0, #21]
 80098f6:	7484      	strb	r4, [r0, #18]
 80098f8:	74c4      	strb	r4, [r0, #19]
 80098fa:	7504      	strb	r4, [r0, #20]
 80098fc:	3016      	adds	r0, #22
 80098fe:	f7ff ffda 	bl	80098b6 <memcpy.isra.0>
 8009902:	69a8      	ldr	r0, [r5, #24]
 8009904:	2240      	movs	r2, #64	; 0x40
 8009906:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800990a:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800990e:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 8009912:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 8009916:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800991a:	302c      	adds	r0, #44	; 0x2c
 800991c:	f7ff ffcb 	bl	80098b6 <memcpy.isra.0>
 8009920:	22a1      	movs	r2, #161	; 0xa1
 8009922:	69ab      	ldr	r3, [r5, #24]
 8009924:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 8009928:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800992c:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 8009930:	69ab      	ldr	r3, [r5, #24]
 8009932:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 8009936:	69ab      	ldr	r3, [r5, #24]
 8009938:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800993c:	2201      	movs	r2, #1
 800993e:	69ab      	ldr	r3, [r5, #24]
 8009940:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 8009944:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 8009948:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800994c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8009950:	bd70      	pop	{r4, r5, r6, pc}
 8009952:	bf00      	nop
 8009954:	080143c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, lr}

08009958 <E131Bridge::HandleDmxIn()>:
 8009958:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800995c:	4604      	mov	r4, r0
 800995e:	4605      	mov	r5, r0
 8009960:	2600      	movs	r6, #0
 8009962:	4f39      	ldr	r7, [pc, #228]	; (8009a48 <E131Bridge::HandleDmxIn()+0xf0>)
 8009964:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 8009968:	2b00      	cmp	r3, #0
 800996a:	d053      	beq.n	8009a14 <E131Bridge::HandleDmxIn()+0xbc>
 800996c:	6960      	ldr	r0, [r4, #20]
 800996e:	4631      	mov	r1, r6
 8009970:	6803      	ldr	r3, [r0, #0]
 8009972:	aa02      	add	r2, sp, #8
 8009974:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8009978:	ab03      	add	r3, sp, #12
 800997a:	47c0      	blx	r8
 800997c:	4601      	mov	r1, r0
 800997e:	2800      	cmp	r0, #0
 8009980:	d050      	beq.n	8009a24 <E131Bridge::HandleDmxIn()+0xcc>
 8009982:	9b02      	ldr	r3, [sp, #8]
 8009984:	69a0      	ldr	r0, [r4, #24]
 8009986:	b29b      	uxth	r3, r3
 8009988:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 800998c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8009990:	ba52      	rev16	r2, r2
 8009992:	8202      	strh	r2, [r0, #16]
 8009994:	f103 0257 	add.w	r2, r3, #87	; 0x57
 8009998:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800999c:	ba52      	rev16	r2, r2
 800999e:	84c2      	strh	r2, [r0, #38]	; 0x26
 80099a0:	f895 2629 	ldrb.w	r2, [r5, #1577]	; 0x629
 80099a4:	330a      	adds	r3, #10
 80099a6:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
 80099aa:	f895 2628 	ldrb.w	r2, [r5, #1576]	; 0x628
 80099ae:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80099b2:	1c50      	adds	r0, r2, #1
 80099b4:	f885 0628 	strb.w	r0, [r5, #1576]	; 0x628
 80099b8:	69a0      	ldr	r0, [r4, #24]
 80099ba:	ba5b      	rev16	r3, r3
 80099bc:	f880 206f 	strb.w	r2, [r0, #111]	; 0x6f
 80099c0:	f8b5 2620 	ldrh.w	r2, [r5, #1568]	; 0x620
 80099c4:	69a0      	ldr	r0, [r4, #24]
 80099c6:	ba52      	rev16	r2, r2
 80099c8:	f8a0 2071 	strh.w	r2, [r0, #113]	; 0x71
 80099cc:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 80099d0:	9a02      	ldr	r2, [sp, #8]
 80099d2:	307d      	adds	r0, #125	; 0x7d
 80099d4:	f7ff ff6f 	bl	80098b6 <memcpy.isra.0>
 80099d8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80099dc:	69a1      	ldr	r1, [r4, #24]
 80099de:	ba53      	rev16	r3, r2
 80099e0:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 80099e4:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 80099e8:	327d      	adds	r2, #125	; 0x7d
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 80099f0:	b292      	uxth	r2, r2
 80099f2:	7820      	ldrb	r0, [r4, #0]
 80099f4:	f005 f922 	bl	800ec3c <udp_send>
 80099f8:	2301      	movs	r3, #1
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	40b3      	lsls	r3, r6
 80099fe:	ea33 0102 	bics.w	r1, r3, r2
 8009a02:	d007      	beq.n	8009a14 <E131Bridge::HandleDmxIn()+0xbc>
 8009a04:	4313      	orrs	r3, r2
 8009a06:	603b      	str	r3, [r7, #0]
 8009a08:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 8009a0c:	f043 0301 	orr.w	r3, r3, #1
 8009a10:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 8009a14:	3601      	adds	r6, #1
 8009a16:	2e04      	cmp	r6, #4
 8009a18:	f105 050c 	add.w	r5, r5, #12
 8009a1c:	d1a2      	bne.n	8009964 <E131Bridge::HandleDmxIn()+0xc>
 8009a1e:	b004      	add	sp, #16
 8009a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1f4      	bne.n	8009a14 <E131Bridge::HandleDmxIn()+0xbc>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	fa03 f206 	lsl.w	r2, r3, r6
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	ea23 0302 	bic.w	r3, r3, r2
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1eb      	bne.n	8009a14 <E131Bridge::HandleDmxIn()+0xbc>
 8009a3c:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 8009a40:	f023 0301 	bic.w	r3, r3, #1
 8009a44:	e7e4      	b.n	8009a10 <E131Bridge::HandleDmxIn()+0xb8>
 8009a46:	bf00      	nop
 8009a48:	20001904 	andcs	r1, r0, r4, lsl #18

08009a4c <E131Bridge::HandleSynchronization()>:
 8009a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 8009a54:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 8009a58:	ba5b      	rev16	r3, r3
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	4604      	mov	r4, r0
 8009a60:	d00a      	beq.n	8009a78 <E131Bridge::HandleSynchronization()+0x2c>
 8009a62:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d006      	beq.n	8009a78 <E131Bridge::HandleSynchronization()+0x2c>
 8009a6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a6e:	4b23      	ldr	r3, [pc, #140]	; (8009afc <E131Bridge::HandleSynchronization()+0xb0>)
 8009a70:	2102      	movs	r1, #2
 8009a72:	6818      	ldr	r0, [r3, #0]
 8009a74:	f008 b93a 	b.w	8011cec <LedBlink::SetMode(ledblink::Mode)>
 8009a78:	2500      	movs	r5, #0
 8009a7a:	4627      	mov	r7, r4
 8009a7c:	46a9      	mov	r9, r5
 8009a7e:	68e3      	ldr	r3, [r4, #12]
 8009a80:	4e1f      	ldr	r6, [pc, #124]	; (8009b00 <E131Bridge::HandleSynchronization()+0xb4>)
 8009a82:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8009b04 <E131Bridge::HandleSynchronization()+0xb8>
 8009a86:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 8009a8a:	f897 3512 	ldrb.w	r3, [r7, #1298]	; 0x512
 8009a8e:	b323      	cbz	r3, 8009ada <E131Bridge::HandleSynchronization()+0x8e>
 8009a90:	f8d8 3000 	ldr.w	r3, [r8]
 8009a94:	6860      	ldr	r0, [r4, #4]
 8009a96:	07da      	lsls	r2, r3, #31
 8009a98:	bf5c      	itt	pl
 8009a9a:	2301      	movpl	r3, #1
 8009a9c:	f8c8 3000 	strpl.w	r3, [r8]
 8009aa0:	6803      	ldr	r3, [r0, #0]
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8009aa8:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 8009aac:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 8009ab0:	47d0      	blx	sl
 8009ab2:	f897 3552 	ldrb.w	r3, [r7, #1362]	; 0x552
 8009ab6:	b93b      	cbnz	r3, 8009ac8 <E131Bridge::HandleSynchronization()+0x7c>
 8009ab8:	6860      	ldr	r0, [r4, #4]
 8009aba:	4629      	mov	r1, r5
 8009abc:	6803      	ldr	r3, [r0, #0]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	4798      	blx	r3
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	f887 3552 	strb.w	r3, [r7, #1362]	; 0x552
 8009ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8009acc:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 8009ad0:	07db      	lsls	r3, r3, #31
 8009ad2:	bf5c      	itt	pl
 8009ad4:	2301      	movpl	r3, #1
 8009ad6:	f8c8 3000 	strpl.w	r3, [r8]
 8009ada:	3501      	adds	r5, #1
 8009adc:	2d04      	cmp	r5, #4
 8009ade:	f107 0744 	add.w	r7, r7, #68	; 0x44
 8009ae2:	f206 6604 	addw	r6, r6, #1540	; 0x604
 8009ae6:	d1d0      	bne.n	8009a8a <E131Bridge::HandleSynchronization()+0x3e>
 8009ae8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009aea:	b120      	cbz	r0, 8009af6 <E131Bridge::HandleSynchronization()+0xaa>
 8009aec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	6803      	ldr	r3, [r0, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	4718      	bx	r3
 8009af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009afa:	bf00      	nop
 8009afc:	2000a9ac 	andcs	sl, r0, ip, lsr #19
 8009b00:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009b04:	200000ec 	andcs	r0, r0, ip, ror #1

08009b08 <E131Bridge::Print()>:
 8009b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0c:	2500      	movs	r5, #0
 8009b0e:	4604      	mov	r4, r0
 8009b10:	b08c      	sub	sp, #48	; 0x30
 8009b12:	a902      	add	r1, sp, #8
 8009b14:	3024      	adds	r0, #36	; 0x24
 8009b16:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8009b1a:	f000 fb9d 	bl	800a258 <uuid_unparse>
 8009b1e:	482c      	ldr	r0, [pc, #176]	; (8009bd0 <E131Bridge::Print()+0xc8>)
 8009b20:	f7ff f818 	bl	8008b54 <printf>
 8009b24:	4b2b      	ldr	r3, [pc, #172]	; (8009bd4 <E131Bridge::Print()+0xcc>)
 8009b26:	482c      	ldr	r0, [pc, #176]	; (8009bd8 <E131Bridge::Print()+0xd0>)
 8009b28:	7819      	ldrb	r1, [r3, #0]
 8009b2a:	785a      	ldrb	r2, [r3, #1]
 8009b2c:	f7ff f812 	bl	8008b54 <printf>
 8009b30:	482a      	ldr	r0, [pc, #168]	; (8009bdc <E131Bridge::Print()+0xd4>)
 8009b32:	a902      	add	r1, sp, #8
 8009b34:	f7ff f80e 	bl	8008b54 <printf>
 8009b38:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 8009b3c:	b303      	cbz	r3, 8009b80 <E131Bridge::Print()+0x78>
 8009b3e:	4828      	ldr	r0, [pc, #160]	; (8009be0 <E131Bridge::Print()+0xd8>)
 8009b40:	f7ff f808 	bl	8008b54 <printf>
 8009b44:	4e27      	ldr	r6, [pc, #156]	; (8009be4 <E131Bridge::Print()+0xdc>)
 8009b46:	4f28      	ldr	r7, [pc, #160]	; (8009be8 <E131Bridge::Print()+0xe0>)
 8009b48:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8009bec <E131Bridge::Print()+0xe4>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	4629      	mov	r1, r5
 8009b50:	4620      	mov	r0, r4
 8009b52:	f10d 0206 	add.w	r2, sp, #6
 8009b56:	f7ff fab7 	bl	80090c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 8009b5a:	b170      	cbz	r0, 8009b7a <E131Bridge::Print()+0x72>
 8009b5c:	2344      	movs	r3, #68	; 0x44
 8009b5e:	436b      	muls	r3, r5
 8009b60:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 8009b64:	58d3      	ldr	r3, [r2, r3]
 8009b66:	4629      	mov	r1, r5
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	bf0c      	ite	eq
 8009b6c:	4633      	moveq	r3, r6
 8009b6e:	463b      	movne	r3, r7
 8009b70:	4640      	mov	r0, r8
 8009b72:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009b76:	f7fe ffed 	bl	8008b54 <printf>
 8009b7a:	3501      	adds	r5, #1
 8009b7c:	2d04      	cmp	r5, #4
 8009b7e:	d1e5      	bne.n	8009b4c <E131Bridge::Print()+0x44>
 8009b80:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 8009b84:	b1d3      	cbz	r3, 8009bbc <E131Bridge::Print()+0xb4>
 8009b86:	481a      	ldr	r0, [pc, #104]	; (8009bf0 <E131Bridge::Print()+0xe8>)
 8009b88:	f7fe ffe4 	bl	8008b54 <printf>
 8009b8c:	2500      	movs	r5, #0
 8009b8e:	4e19      	ldr	r6, [pc, #100]	; (8009bf4 <E131Bridge::Print()+0xec>)
 8009b90:	2300      	movs	r3, #0
 8009b92:	4629      	mov	r1, r5
 8009b94:	4620      	mov	r0, r4
 8009b96:	f10d 0206 	add.w	r2, sp, #6
 8009b9a:	f7ff fa95 	bl	80090c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 8009b9e:	b150      	cbz	r0, 8009bb6 <E131Bridge::Print()+0xae>
 8009ba0:	230c      	movs	r3, #12
 8009ba2:	436b      	muls	r3, r5
 8009ba4:	f204 6229 	addw	r2, r4, #1577	; 0x629
 8009ba8:	5cd3      	ldrb	r3, [r2, r3]
 8009baa:	4629      	mov	r1, r5
 8009bac:	4630      	mov	r0, r6
 8009bae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009bb2:	f7fe ffcf 	bl	8008b54 <printf>
 8009bb6:	3501      	adds	r5, #1
 8009bb8:	2d04      	cmp	r5, #4
 8009bba:	d1e9      	bne.n	8009b90 <E131Bridge::Print()+0x88>
 8009bbc:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 8009bc0:	b113      	cbz	r3, 8009bc8 <E131Bridge::Print()+0xc0>
 8009bc2:	480d      	ldr	r0, [pc, #52]	; (8009bf8 <E131Bridge::Print()+0xf0>)
 8009bc4:	f7fe ffc6 	bl	8008b54 <printf>
 8009bc8:	b00c      	add	sp, #48	; 0x30
 8009bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bce:	bf00      	nop
 8009bd0:	08014215 	stmdaeq	r1, {r0, r2, r4, r9, lr}
 8009bd4:	080143d0 	stmdaeq	r1, {r4, r6, r7, r8, r9, lr}
 8009bd8:	0801421d 	stmdaeq	r1, {r0, r2, r3, r4, r9, lr}
 8009bdc:	08014230 	stmdaeq	r1, {r4, r5, r9, lr}
 8009be0:	08014240 	stmdaeq	r1, {r6, r9, lr}
 8009be4:	0801420d 	stmdaeq	r1, {r0, r2, r3, r9, lr}
 8009be8:	08014211 	stmdaeq	r1, {r0, r4, r9, lr}
 8009bec:	08014249 	stmdaeq	r1, {r0, r3, r6, r9, lr}
 8009bf0:	08014268 	stmdaeq	r1, {r3, r5, r6, r9, lr}
 8009bf4:	08014270 	stmdaeq	r1, {r4, r5, r6, r9, lr}
 8009bf8:	0801428f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r9, lr}

08009bfc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 8009bfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bfe:	88c5      	ldrh	r5, [r0, #6]
 8009c00:	8886      	ldrh	r6, [r0, #4]
 8009c02:	42b5      	cmp	r5, r6
 8009c04:	d216      	bcs.n	8009c34 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 8009c06:	4604      	mov	r4, r0
 8009c08:	6800      	ldr	r0, [r0, #0]
 8009c0a:	4428      	add	r0, r5
 8009c0c:	1b75      	subs	r5, r6, r5
 8009c0e:	7a26      	ldrb	r6, [r4, #8]
 8009c10:	b923      	cbnz	r3, 8009c1c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 8009c12:	b926      	cbnz	r6, 8009c1e <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 8009c14:	9200      	str	r2, [sp, #0]
 8009c16:	460b      	mov	r3, r1
 8009c18:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 8009c1a:	e003      	b.n	8009c24 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 8009c1c:	b166      	cbz	r6, 8009c38 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 8009c1e:	460b      	mov	r3, r1
 8009c20:	9200      	str	r2, [sp, #0]
 8009c22:	4a08      	ldr	r2, [pc, #32]	; (8009c44 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 8009c24:	4629      	mov	r1, r5
 8009c26:	f7fe ffbd 	bl	8008ba4 <snprintf>
 8009c2a:	4285      	cmp	r5, r0
 8009c2c:	bfa2      	ittt	ge
 8009c2e:	88e3      	ldrhge	r3, [r4, #6]
 8009c30:	181b      	addge	r3, r3, r0
 8009c32:	80e3      	strhge	r3, [r4, #6]
 8009c34:	b002      	add	sp, #8
 8009c36:	bd70      	pop	{r4, r5, r6, pc}
 8009c38:	9200      	str	r2, [sp, #0]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4a02      	ldr	r2, [pc, #8]	; (8009c48 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 8009c3e:	e7f1      	b.n	8009c24 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 8009c40:	080142f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, lr}
 8009c44:	080142e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, lr}
 8009c48:	080142f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, lr}

08009c4c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 8009c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c4e:	460b      	mov	r3, r1
 8009c50:	8885      	ldrh	r5, [r0, #4]
 8009c52:	88c1      	ldrh	r1, [r0, #6]
 8009c54:	42a9      	cmp	r1, r5
 8009c56:	d214      	bcs.n	8009c82 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 8009c58:	4604      	mov	r4, r0
 8009c5a:	6800      	ldr	r0, [r0, #0]
 8009c5c:	1a6d      	subs	r5, r5, r1
 8009c5e:	4408      	add	r0, r1
 8009c60:	7a21      	ldrb	r1, [r4, #8]
 8009c62:	b91a      	cbnz	r2, 8009c6c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 8009c64:	b919      	cbnz	r1, 8009c6e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 8009c66:	4a0a      	ldr	r2, [pc, #40]	; (8009c90 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 8009c68:	9100      	str	r1, [sp, #0]
 8009c6a:	e002      	b.n	8009c72 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8009c6c:	b159      	cbz	r1, 8009c86 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 8009c6e:	9200      	str	r2, [sp, #0]
 8009c70:	4a08      	ldr	r2, [pc, #32]	; (8009c94 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 8009c72:	4629      	mov	r1, r5
 8009c74:	f7fe ff96 	bl	8008ba4 <snprintf>
 8009c78:	4285      	cmp	r5, r0
 8009c7a:	bfa2      	ittt	ge
 8009c7c:	88e3      	ldrhge	r3, [r4, #6]
 8009c7e:	181b      	addge	r3, r3, r0
 8009c80:	80e3      	strhge	r3, [r4, #6]
 8009c82:	b003      	add	sp, #12
 8009c84:	bd30      	pop	{r4, r5, pc}
 8009c86:	2201      	movs	r2, #1
 8009c88:	9200      	str	r2, [sp, #0]
 8009c8a:	4a03      	ldr	r2, [pc, #12]	; (8009c98 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 8009c8c:	e7f1      	b.n	8009c72 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8009c8e:	bf00      	nop
 8009c90:	08014303 	stmdaeq	r1, {r0, r1, r8, r9, lr}
 8009c94:	080142fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, lr}
 8009c98:	08014304 	stmdaeq	r1, {r2, r8, r9, lr}

08009c9c <E131Params::E131Params(E131ParamsStore*)>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	221a      	movs	r2, #26
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	f840 1b04 	str.w	r1, [r0], #4
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	f008 f9d8 	bl	801205c <memset>
 8009cac:	2300      	movs	r3, #0
 8009cae:	2201      	movs	r2, #1
 8009cb0:	7323      	strb	r3, [r4, #12]
 8009cb2:	72e2      	strb	r2, [r4, #11]
 8009cb4:	73a3      	strb	r3, [r4, #14]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	7423      	strb	r3, [r4, #16]
 8009cba:	74a3      	strb	r3, [r4, #18]
 8009cbc:	f246 43ff 	movw	r3, #25855	; 0x64ff
 8009cc0:	7362      	strb	r2, [r4, #13]
 8009cc2:	83e3      	strh	r3, [r4, #30]
 8009cc4:	2203      	movs	r2, #3
 8009cc6:	f246 4364 	movw	r3, #25700	; 0x6464
 8009cca:	73e2      	strb	r2, [r4, #15]
 8009ccc:	8423      	strh	r3, [r4, #32]
 8009cce:	2204      	movs	r2, #4
 8009cd0:	2364      	movs	r3, #100	; 0x64
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	7462      	strb	r2, [r4, #17]
 8009cd6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8009cda:	bd10      	pop	{r4, pc}

08009cdc <E131Params::Load()>:
 8009cdc:	b508      	push	{r3, lr}
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	6043      	str	r3, [r0, #4]
 8009ce4:	6800      	ldr	r0, [r0, #0]
 8009ce6:	b120      	cbz	r0, 8009cf2 <E131Params::Load()+0x16>
 8009ce8:	6803      	ldr	r3, [r0, #0]
 8009cea:	3104      	adds	r1, #4
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	4798      	blx	r3
 8009cf0:	2001      	movs	r0, #1
 8009cf2:	bd08      	pop	{r3, pc}

08009cf4 <E131Params::Load(char const*, unsigned int)>:
 8009cf4:	6803      	ldr	r3, [r0, #0]
 8009cf6:	b1d3      	cbz	r3, 8009d2e <E131Params::Load(char const*, unsigned int)+0x3a>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cfc:	460d      	mov	r5, r1
 8009cfe:	4616      	mov	r6, r2
 8009d00:	4604      	mov	r4, r0
 8009d02:	6043      	str	r3, [r0, #4]
 8009d04:	4602      	mov	r2, r0
 8009d06:	490a      	ldr	r1, [pc, #40]	; (8009d30 <E131Params::Load(char const*, unsigned int)+0x3c>)
 8009d08:	4668      	mov	r0, sp
 8009d0a:	f007 fb1f 	bl	801134c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8009d0e:	4632      	mov	r2, r6
 8009d10:	4629      	mov	r1, r5
 8009d12:	4668      	mov	r0, sp
 8009d14:	f007 fb1e 	bl	8011354 <ReadConfigFile::Read(char const*, unsigned int)>
 8009d18:	4621      	mov	r1, r4
 8009d1a:	f851 0b04 	ldr.w	r0, [r1], #4
 8009d1e:	6803      	ldr	r3, [r0, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	4798      	blx	r3
 8009d24:	4668      	mov	r0, sp
 8009d26:	f007 fb14 	bl	8011352 <ReadConfigFile::~ReadConfigFile()>
 8009d2a:	b002      	add	sp, #8
 8009d2c:	bd70      	pop	{r4, r5, r6, pc}
 8009d2e:	4770      	bx	lr
 8009d30:	08009efd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, fp, ip, pc}

08009d34 <E131Params::callbackFunction(char const*)>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	4604      	mov	r4, r0
 8009d3a:	460e      	mov	r6, r1
 8009d3c:	2500      	movs	r5, #0
 8009d3e:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8009ee4 <E131Params::callbackFunction(char const*)+0x1b0>
 8009d42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ee8 <E131Params::callbackFunction(char const*)+0x1b4>
 8009d46:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8009eec <E131Params::callbackFunction(char const*)+0x1b8>
 8009d4a:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8009ef0 <E131Params::callbackFunction(char const*)+0x1bc>
 8009d4e:	b087      	sub	sp, #28
 8009d50:	4649      	mov	r1, r9
 8009d52:	4630      	mov	r0, r6
 8009d54:	f10d 0202 	add.w	r2, sp, #2
 8009d58:	f007 fbec 	bl	8011534 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 8009d5c:	b9c8      	cbnz	r0, 8009d92 <E131Params::callbackFunction(char const*)+0x5e>
 8009d5e:	f64f 16fe 	movw	r6, #63998	; 0xf9fe
 8009d62:	2110      	movs	r1, #16
 8009d64:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8009d68:	6863      	ldr	r3, [r4, #4]
 8009d6a:	1e42      	subs	r2, r0, #1
 8009d6c:	b292      	uxth	r2, r2
 8009d6e:	42b2      	cmp	r2, r6
 8009d70:	ea4f 0245 	mov.w	r2, r5, lsl #1
 8009d74:	fa01 f105 	lsl.w	r1, r1, r5
 8009d78:	bf85      	ittet	hi
 8009d7a:	1912      	addhi	r2, r2, r4
 8009d7c:	3501      	addhi	r5, #1
 8009d7e:	1912      	addls	r2, r2, r4
 8009d80:	f8a2 500b 	strhhi.w	r5, [r2, #11]
 8009d84:	bf8e      	itee	hi
 8009d86:	438b      	bichi	r3, r1
 8009d88:	f8a2 000b 	strhls.w	r0, [r2, #11]
 8009d8c:	430b      	orrls	r3, r1
 8009d8e:	6063      	str	r3, [r4, #4]
 8009d90:	e05e      	b.n	8009e50 <E131Params::callbackFunction(char const*)+0x11c>
 8009d92:	2712      	movs	r7, #18
 8009d94:	2303      	movs	r3, #3
 8009d96:	436f      	muls	r7, r5
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	ab01      	add	r3, sp, #4
 8009d9e:	aa02      	add	r2, sp, #8
 8009da0:	eb0a 0107 	add.w	r1, sl, r7
 8009da4:	f007 fb0a 	bl	80113bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009da8:	b9f8      	cbnz	r0, 8009dea <E131Params::callbackFunction(char const*)+0xb6>
 8009daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dae:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8009db2:	40ab      	lsls	r3, r5
 8009db4:	f041 0120 	orr.w	r1, r1, #32
 8009db8:	296c      	cmp	r1, #108	; 0x6c
 8009dba:	6862      	ldr	r2, [r4, #4]
 8009dbc:	4425      	add	r5, r4
 8009dbe:	d10f      	bne.n	8009de0 <E131Params::callbackFunction(char const*)+0xac>
 8009dc0:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8009dc4:	f041 0120 	orr.w	r1, r1, #32
 8009dc8:	2974      	cmp	r1, #116	; 0x74
 8009dca:	d109      	bne.n	8009de0 <E131Params::callbackFunction(char const*)+0xac>
 8009dcc:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8009dd0:	f041 0120 	orr.w	r1, r1, #32
 8009dd4:	2970      	cmp	r1, #112	; 0x70
 8009dd6:	d103      	bne.n	8009de0 <E131Params::callbackFunction(char const*)+0xac>
 8009dd8:	2101      	movs	r1, #1
 8009dda:	7529      	strb	r1, [r5, #20]
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	e7d6      	b.n	8009d8e <E131Params::callbackFunction(char const*)+0x5a>
 8009de0:	2100      	movs	r1, #0
 8009de2:	ea22 0303 	bic.w	r3, r2, r3
 8009de6:	7529      	strb	r1, [r5, #20]
 8009de8:	e7d1      	b.n	8009d8e <E131Params::callbackFunction(char const*)+0x5a>
 8009dea:	2305      	movs	r3, #5
 8009dec:	4630      	mov	r0, r6
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	aa02      	add	r2, sp, #8
 8009df2:	ab01      	add	r3, sp, #4
 8009df4:	eb0b 0107 	add.w	r1, fp, r7
 8009df8:	f007 fae0 	bl	80113bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009dfc:	bb58      	cbnz	r0, 8009e56 <E131Params::callbackFunction(char const*)+0x122>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	7fa2      	ldrb	r2, [r4, #30]
 8009e02:	40ab      	lsls	r3, r5
 8009e04:	ea22 0303 	bic.w	r3, r2, r3
 8009e08:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8009e0c:	77a3      	strb	r3, [r4, #30]
 8009e0e:	f042 0220 	orr.w	r2, r2, #32
 8009e12:	2a69      	cmp	r2, #105	; 0x69
 8009e14:	d117      	bne.n	8009e46 <E131Params::callbackFunction(char const*)+0x112>
 8009e16:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8009e1a:	f042 0220 	orr.w	r2, r2, #32
 8009e1e:	2a6e      	cmp	r2, #110	; 0x6e
 8009e20:	d111      	bne.n	8009e46 <E131Params::callbackFunction(char const*)+0x112>
 8009e22:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8009e26:	f042 0220 	orr.w	r2, r2, #32
 8009e2a:	2a70      	cmp	r2, #112	; 0x70
 8009e2c:	d10b      	bne.n	8009e46 <E131Params::callbackFunction(char const*)+0x112>
 8009e2e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8009e32:	f042 0220 	orr.w	r2, r2, #32
 8009e36:	2a75      	cmp	r2, #117	; 0x75
 8009e38:	d105      	bne.n	8009e46 <E131Params::callbackFunction(char const*)+0x112>
 8009e3a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8009e3e:	f042 0220 	orr.w	r2, r2, #32
 8009e42:	2a74      	cmp	r2, #116	; 0x74
 8009e44:	d004      	beq.n	8009e50 <E131Params::callbackFunction(char const*)+0x11c>
 8009e46:	2201      	movs	r2, #1
 8009e48:	fa02 f505 	lsl.w	r5, r2, r5
 8009e4c:	432b      	orrs	r3, r5
 8009e4e:	77a3      	strb	r3, [r4, #30]
 8009e50:	b007      	add	sp, #28
 8009e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e56:	4641      	mov	r1, r8
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f10d 0201 	add.w	r2, sp, #1
 8009e5e:	f007 fbb0 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009e62:	b998      	cbnz	r0, 8009e8c <E131Params::callbackFunction(char const*)+0x158>
 8009e64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009e68:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8009e6c:	40aa      	lsls	r2, r5
 8009e6e:	1e48      	subs	r0, r1, #1
 8009e70:	b2c0      	uxtb	r0, r0
 8009e72:	28c7      	cmp	r0, #199	; 0xc7
 8009e74:	6863      	ldr	r3, [r4, #4]
 8009e76:	4425      	add	r5, r4
 8009e78:	d803      	bhi.n	8009e82 <E131Params::callbackFunction(char const*)+0x14e>
 8009e7a:	2964      	cmp	r1, #100	; 0x64
 8009e7c:	d001      	beq.n	8009e82 <E131Params::callbackFunction(char const*)+0x14e>
 8009e7e:	77e9      	strb	r1, [r5, #31]
 8009e80:	e7ac      	b.n	8009ddc <E131Params::callbackFunction(char const*)+0xa8>
 8009e82:	2164      	movs	r1, #100	; 0x64
 8009e84:	ea23 0302 	bic.w	r3, r3, r2
 8009e88:	77e9      	strb	r1, [r5, #31]
 8009e8a:	e780      	b.n	8009d8e <E131Params::callbackFunction(char const*)+0x5a>
 8009e8c:	3501      	adds	r5, #1
 8009e8e:	2d04      	cmp	r5, #4
 8009e90:	f109 0910 	add.w	r9, r9, #16
 8009e94:	f108 0812 	add.w	r8, r8, #18
 8009e98:	f47f af5a 	bne.w	8009d50 <E131Params::callbackFunction(char const*)+0x1c>
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	4915      	ldr	r1, [pc, #84]	; (8009ef4 <E131Params::callbackFunction(char const*)+0x1c0>)
 8009ea0:	f10d 0201 	add.w	r2, sp, #1
 8009ea4:	f007 fb8d 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009ea8:	b948      	cbnz	r0, 8009ebe <E131Params::callbackFunction(char const*)+0x18a>
 8009eaa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009eae:	6863      	ldr	r3, [r4, #4]
 8009eb0:	b112      	cbz	r2, 8009eb8 <E131Params::callbackFunction(char const*)+0x184>
 8009eb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009eb6:	e76a      	b.n	8009d8e <E131Params::callbackFunction(char const*)+0x5a>
 8009eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ebc:	e767      	b.n	8009d8e <E131Params::callbackFunction(char const*)+0x5a>
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	490d      	ldr	r1, [pc, #52]	; (8009ef8 <E131Params::callbackFunction(char const*)+0x1c4>)
 8009ec2:	f10d 0201 	add.w	r2, sp, #1
 8009ec6:	f007 fb7c 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d1c0      	bne.n	8009e50 <E131Params::callbackFunction(char const*)+0x11c>
 8009ece:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009ed2:	6863      	ldr	r3, [r4, #4]
 8009ed4:	b112      	cbz	r2, 8009edc <E131Params::callbackFunction(char const*)+0x1a8>
 8009ed6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009eda:	e758      	b.n	8009d8e <E131Params::callbackFunction(char const*)+0x5a>
 8009edc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ee0:	e755      	b.n	8009d8e <E131Params::callbackFunction(char const*)+0x5a>
 8009ee2:	bf00      	nop
 8009ee4:	08015bcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, fp, ip, lr}
 8009ee8:	08014373 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009eec:	08015c9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, sl, fp, ip, lr}
 8009ef0:	08015d00 	stmdaeq	r1, {r8, sl, fp, ip, lr}
 8009ef4:	08014351 	stmdaeq	r1, {r0, r4, r6, r8, r9, lr}
 8009ef8:	0801433b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, r9, lr}

08009efc <E131Params::staticCallbackFunction(void*, char const*)>:
 8009efc:	f7ff bf1a 	b.w	8009d34 <E131Params::callbackFunction(char const*)>

08009f00 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
 8009f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f04:	4604      	mov	r4, r0
 8009f06:	4615      	mov	r5, r2
 8009f08:	461e      	mov	r6, r3
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	3004      	adds	r0, #4
 8009f0e:	2900      	cmp	r1, #0
 8009f10:	d045      	beq.n	8009f9e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x9e>
 8009f12:	221f      	movs	r2, #31
 8009f14:	f008 f88b 	bl	801202e <memmove>
 8009f18:	4633      	mov	r3, r6
 8009f1a:	462a      	mov	r2, r5
 8009f1c:	4978      	ldr	r1, [pc, #480]	; (800a100 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x200>)
 8009f1e:	a803      	add	r0, sp, #12
 8009f20:	f007 f974 	bl	801120c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8009f24:	2500      	movs	r5, #0
 8009f26:	4e77      	ldr	r6, [pc, #476]	; (800a104 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 8009f28:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 800a108 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x208>
 8009f2c:	4f77      	ldr	r7, [pc, #476]	; (800a10c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20c>)
 8009f2e:	7fa3      	ldrb	r3, [r4, #30]
 8009f30:	4631      	mov	r1, r6
 8009f32:	412b      	asrs	r3, r5
 8009f34:	f013 0f01 	tst.w	r3, #1
 8009f38:	ea6f 0303 	mvn.w	r3, r3
 8009f3c:	bf0c      	ite	eq
 8009f3e:	4642      	moveq	r2, r8
 8009f40:	463a      	movne	r2, r7
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	a803      	add	r0, sp, #12
 8009f48:	3501      	adds	r5, #1
 8009f4a:	f7ff fe57 	bl	8009bfc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 8009f4e:	2d04      	cmp	r5, #4
 8009f50:	f106 0612 	add.w	r6, r6, #18
 8009f54:	d1eb      	bne.n	8009f2e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2e>
 8009f56:	2600      	movs	r6, #0
 8009f58:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800a110 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x210>
 8009f5c:	4f6d      	ldr	r7, [pc, #436]	; (800a114 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x214>)
 8009f5e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800a118 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x218>
 8009f62:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800a11c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x21c>
 8009f66:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8009f6a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8009f6e:	42ab      	cmp	r3, r5
 8009f70:	d22c      	bcs.n	8009fcc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8009f72:	2110      	movs	r1, #16
 8009f74:	9803      	ldr	r0, [sp, #12]
 8009f76:	1aed      	subs	r5, r5, r3
 8009f78:	4418      	add	r0, r3
 8009f7a:	eb04 0346 	add.w	r3, r4, r6, lsl #1
 8009f7e:	f8b3 200b 	ldrh.w	r2, [r3, #11]
 8009f82:	6863      	ldr	r3, [r4, #4]
 8009f84:	40b1      	lsls	r1, r6
 8009f86:	ea31 0303 	bics.w	r3, r1, r3
 8009f8a:	f89d c014 	ldrb.w	ip, [sp, #20]
 8009f8e:	d00d      	beq.n	8009fac <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xac>
 8009f90:	f1bc 0f00 	cmp.w	ip, #0
 8009f94:	d10d      	bne.n	8009fb2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xb2>
 8009f96:	9200      	str	r2, [sp, #0]
 8009f98:	4653      	mov	r3, sl
 8009f9a:	464a      	mov	r2, r9
 8009f9c:	e00c      	b.n	8009fb8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xb8>
 8009f9e:	6823      	ldr	r3, [r4, #0]
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	68d2      	ldr	r2, [r2, #12]
 8009fa8:	4790      	blx	r2
 8009faa:	e7b5      	b.n	8009f18 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18>
 8009fac:	f1bc 0f00 	cmp.w	ip, #0
 8009fb0:	d05d      	beq.n	800a06e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x16e>
 8009fb2:	9200      	str	r2, [sp, #0]
 8009fb4:	4653      	mov	r3, sl
 8009fb6:	463a      	mov	r2, r7
 8009fb8:	4629      	mov	r1, r5
 8009fba:	f7fe fdf3 	bl	8008ba4 <snprintf>
 8009fbe:	4285      	cmp	r5, r0
 8009fc0:	bfa2      	ittt	ge
 8009fc2:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8009fc6:	18c0      	addge	r0, r0, r3
 8009fc8:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8009fcc:	3601      	adds	r6, #1
 8009fce:	2e04      	cmp	r6, #4
 8009fd0:	f10a 0a10 	add.w	sl, sl, #16
 8009fd4:	d1c7      	bne.n	8009f66 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x66>
 8009fd6:	4952      	ldr	r1, [pc, #328]	; (800a120 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x220>)
 8009fd8:	a803      	add	r0, sp, #12
 8009fda:	f007 f99d 	bl	8011318 <PropertiesBuilder::AddComment(char const*)>
 8009fde:	2500      	movs	r5, #0
 8009fe0:	f44f 7a80 	mov.w	sl, #256	; 0x100
 8009fe4:	4e4f      	ldr	r6, [pc, #316]	; (800a124 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x224>)
 8009fe6:	f8df 9140 	ldr.w	r9, [pc, #320]	; 800a128 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x228>
 8009fea:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800a12c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x22c>
 8009fee:	f104 0714 	add.w	r7, r4, #20
 8009ff2:	6861      	ldr	r1, [r4, #4]
 8009ff4:	fa0a f305 	lsl.w	r3, sl, r5
 8009ff8:	f817 2b01 	ldrb.w	r2, [r7], #1
 8009ffc:	438b      	bics	r3, r1
 8009ffe:	bf0c      	ite	eq
 800a000:	2301      	moveq	r3, #1
 800a002:	2300      	movne	r3, #0
 800a004:	4631      	mov	r1, r6
 800a006:	2a00      	cmp	r2, #0
 800a008:	bf0c      	ite	eq
 800a00a:	464a      	moveq	r2, r9
 800a00c:	4642      	movne	r2, r8
 800a00e:	a803      	add	r0, sp, #12
 800a010:	3501      	adds	r5, #1
 800a012:	f7ff fdf3 	bl	8009bfc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a016:	2d04      	cmp	r5, #4
 800a018:	f106 0612 	add.w	r6, r6, #18
 800a01c:	d1e9      	bne.n	8009ff2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xf2>
 800a01e:	4944      	ldr	r1, [pc, #272]	; (800a130 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x230>)
 800a020:	a803      	add	r0, sp, #12
 800a022:	f007 f979 	bl	8011318 <PropertiesBuilder::AddComment(char const*)>
 800a026:	2600      	movs	r6, #0
 800a028:	f8df a108 	ldr.w	sl, [pc, #264]	; 800a134 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x234>
 800a02c:	4f39      	ldr	r7, [pc, #228]	; (800a114 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x214>)
 800a02e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800a118 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x218>
 800a032:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800a11c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x21c>
 800a036:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a03a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800a03e:	42ab      	cmp	r3, r5
 800a040:	d229      	bcs.n	800a096 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x196>
 800a042:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a046:	9803      	ldr	r0, [sp, #12]
 800a048:	1aed      	subs	r5, r5, r3
 800a04a:	4418      	add	r0, r3
 800a04c:	f104 031f 	add.w	r3, r4, #31
 800a050:	5d9a      	ldrb	r2, [r3, r6]
 800a052:	6863      	ldr	r3, [r4, #4]
 800a054:	40b1      	lsls	r1, r6
 800a056:	ea31 0303 	bics.w	r3, r1, r3
 800a05a:	f89d c014 	ldrb.w	ip, [sp, #20]
 800a05e:	d00a      	beq.n	800a076 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x176>
 800a060:	f1bc 0f00 	cmp.w	ip, #0
 800a064:	d10a      	bne.n	800a07c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x17c>
 800a066:	9200      	str	r2, [sp, #0]
 800a068:	4653      	mov	r3, sl
 800a06a:	464a      	mov	r2, r9
 800a06c:	e009      	b.n	800a082 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x182>
 800a06e:	9200      	str	r2, [sp, #0]
 800a070:	4653      	mov	r3, sl
 800a072:	4642      	mov	r2, r8
 800a074:	e7a0      	b.n	8009fb8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xb8>
 800a076:	f1bc 0f00 	cmp.w	ip, #0
 800a07a:	d03d      	beq.n	800a0f8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f8>
 800a07c:	9200      	str	r2, [sp, #0]
 800a07e:	4653      	mov	r3, sl
 800a080:	463a      	mov	r2, r7
 800a082:	4629      	mov	r1, r5
 800a084:	f7fe fd8e 	bl	8008ba4 <snprintf>
 800a088:	4285      	cmp	r5, r0
 800a08a:	bfa2      	ittt	ge
 800a08c:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800a090:	18c0      	addge	r0, r0, r3
 800a092:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800a096:	3601      	adds	r6, #1
 800a098:	2e04      	cmp	r6, #4
 800a09a:	f10a 0a12 	add.w	sl, sl, #18
 800a09e:	d1ca      	bne.n	800a036 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x136>
 800a0a0:	4925      	ldr	r1, [pc, #148]	; (800a138 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x238>)
 800a0a2:	a803      	add	r0, sp, #12
 800a0a4:	f007 f938 	bl	8011318 <PropertiesBuilder::AddComment(char const*)>
 800a0a8:	6862      	ldr	r2, [r4, #4]
 800a0aa:	4924      	ldr	r1, [pc, #144]	; (800a13c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x23c>)
 800a0ac:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800a0b0:	a803      	add	r0, sp, #12
 800a0b2:	f7ff fdcb 	bl	8009c4c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a0b6:	6862      	ldr	r2, [r4, #4]
 800a0b8:	4921      	ldr	r1, [pc, #132]	; (800a140 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x240>)
 800a0ba:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800a0be:	a803      	add	r0, sp, #12
 800a0c0:	f7ff fdc4 	bl	8009c4c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a0c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a0c8:	b17b      	cbz	r3, 800a0ea <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1ea>
 800a0ca:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a0ce:	9b03      	ldr	r3, [sp, #12]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	227d      	movs	r2, #125	; 0x7d
 800a0d4:	f803 2c01 	strb.w	r2, [r3, #-1]
 800a0d8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a0dc:	9903      	ldr	r1, [sp, #12]
 800a0de:	54ca      	strb	r2, [r1, r3]
 800a0e0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	f8ad 3012 	strh.w	r3, [sp, #18]
 800a0ea:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a0ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	b006      	add	sp, #24
 800a0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f8:	9200      	str	r2, [sp, #0]
 800a0fa:	4653      	mov	r3, sl
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	e7c0      	b.n	800a082 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x182>
 800a100:	080143bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, r9, lr}
 800a104:	08015d00 	stmdaeq	r1, {r8, sl, fp, ip, lr}
 800a108:	0801430b 	stmdaeq	r1, {r0, r1, r3, r8, r9, lr}
 800a10c:	08014311 	stmdaeq	r1, {r0, r4, r8, r9, lr}
 800a110:	08015bcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, fp, ip, lr}
 800a114:	080142fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, lr}
 800a118:	08014304 	stmdaeq	r1, {r2, r8, r9, lr}
 800a11c:	08014303 	stmdaeq	r1, {r0, r1, r8, r9, lr}
 800a120:	08014320 	stmdaeq	r1, {r5, r8, r9, lr}
 800a124:	08015c9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, sl, fp, ip, lr}
 800a128:	08014318 	stmdaeq	r1, {r3, r4, r8, r9, lr}
 800a12c:	0801431c 	stmdaeq	r1, {r2, r3, r4, r8, r9, lr}
 800a130:	0801432b 	stmdaeq	r1, {r0, r1, r3, r5, r8, r9, lr}
 800a134:	08014373 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a138:	08014335 	stmdaeq	r1, {r0, r2, r4, r5, r8, r9, lr}
 800a13c:	08014351 	stmdaeq	r1, {r0, r4, r6, r8, r9, lr}
 800a140:	0801433b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, r9, lr}

0800a144 <E131Params::Save(char*, unsigned int, unsigned int&)>:
 800a144:	b513      	push	{r0, r1, r4, lr}
 800a146:	6804      	ldr	r4, [r0, #0]
 800a148:	b914      	cbnz	r4, 800a150 <E131Params::Save(char*, unsigned int, unsigned int&)+0xc>
 800a14a:	601c      	str	r4, [r3, #0]
 800a14c:	b002      	add	sp, #8
 800a14e:	bd10      	pop	{r4, pc}
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	4613      	mov	r3, r2
 800a154:	460a      	mov	r2, r1
 800a156:	2100      	movs	r1, #0
 800a158:	f7ff fed2 	bl	8009f00 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
 800a15c:	e7f6      	b.n	800a14c <E131Params::Save(char*, unsigned int, unsigned int&)+0x8>

0800a15e <E131Params::Set(E131Bridge*)>:
 800a15e:	6843      	ldr	r3, [r0, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d034      	beq.n	800a1ce <E131Params::Set(E131Bridge*)+0x70>
 800a164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a168:	2300      	movs	r3, #0
 800a16a:	f44f 7680 	mov.w	r6, #256	; 0x100
 800a16e:	f04f 0e44 	mov.w	lr, #68	; 0x44
 800a172:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800a176:	f100 0214 	add.w	r2, r0, #20
 800a17a:	f201 5c4c 	addw	ip, r1, #1356	; 0x54c
 800a17e:	6845      	ldr	r5, [r0, #4]
 800a180:	fa06 f403 	lsl.w	r4, r6, r3
 800a184:	43ac      	bics	r4, r5
 800a186:	bf02      	ittt	eq
 800a188:	fb0e f403 	muleq.w	r4, lr, r3
 800a18c:	f892 8000 	ldrbeq.w	r8, [r2]
 800a190:	f84c 8004 	streq.w	r8, [ip, r4]
 800a194:	fa07 f403 	lsl.w	r4, r7, r3
 800a198:	43ac      	bics	r4, r5
 800a19a:	d106      	bne.n	800a1aa <E131Params::Set(E131Bridge*)+0x4c>
 800a19c:	7ad5      	ldrb	r5, [r2, #11]
 800a19e:	1e6c      	subs	r4, r5, #1
 800a1a0:	b2e4      	uxtb	r4, r4
 800a1a2:	2cc7      	cmp	r4, #199	; 0xc7
 800a1a4:	bf98      	it	ls
 800a1a6:	f881 5629 	strbls.w	r5, [r1, #1577]	; 0x629
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	f102 0201 	add.w	r2, r2, #1
 800a1b2:	d1e4      	bne.n	800a17e <E131Params::Set(E131Bridge*)+0x20>
 800a1b4:	6843      	ldr	r3, [r0, #4]
 800a1b6:	04da      	lsls	r2, r3, #19
 800a1b8:	bf44      	itt	mi
 800a1ba:	2201      	movmi	r2, #1
 800a1bc:	f881 24f9 	strbmi.w	r2, [r1, #1273]	; 0x4f9
 800a1c0:	049b      	lsls	r3, r3, #18
 800a1c2:	bf44      	itt	mi
 800a1c4:	2301      	movmi	r3, #1
 800a1c6:	f881 34fa 	strbmi.w	r3, [r1, #1274]	; 0x4fa
 800a1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ce:	4770      	bx	lr

0800a1d0 <E131Params::Dump()>:
 800a1d0:	4770      	bx	lr

0800a1d2 <uuid_unparse_x>:
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	b530      	push	{r4, r5, lr}
 800a1d6:	4608      	mov	r0, r1
 800a1d8:	4611      	mov	r1, r2
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	b08f      	sub	sp, #60	; 0x3c
 800a1de:	ba12      	rev	r2, r2
 800a1e0:	920a      	str	r2, [sp, #40]	; 0x28
 800a1e2:	889a      	ldrh	r2, [r3, #4]
 800a1e4:	891c      	ldrh	r4, [r3, #8]
 800a1e6:	ba52      	rev16	r2, r2
 800a1e8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800a1ec:	88da      	ldrh	r2, [r3, #6]
 800a1ee:	ba64      	rev16	r4, r4
 800a1f0:	ba52      	rev16	r2, r2
 800a1f2:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800a1f6:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800a1fa:	f103 020a 	add.w	r2, r3, #10
 800a1fe:	f10d 0432 	add.w	r4, sp, #50	; 0x32
 800a202:	3310      	adds	r3, #16
 800a204:	4293      	cmp	r3, r2
 800a206:	d122      	bne.n	800a24e <uuid_unparse_x+0x7c>
 800a208:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800a20c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800a210:	9208      	str	r2, [sp, #32]
 800a212:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800a216:	0a1b      	lsrs	r3, r3, #8
 800a218:	9207      	str	r2, [sp, #28]
 800a21a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800a21e:	9301      	str	r3, [sp, #4]
 800a220:	9206      	str	r2, [sp, #24]
 800a222:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800a226:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800a22a:	9205      	str	r2, [sp, #20]
 800a22c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	9204      	str	r2, [sp, #16]
 800a234:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800a238:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800a23c:	9203      	str	r2, [sp, #12]
 800a23e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800a242:	9202      	str	r2, [sp, #8]
 800a244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a246:	f7fe fc95 	bl	8008b74 <sprintf>
 800a24a:	b00f      	add	sp, #60	; 0x3c
 800a24c:	bd30      	pop	{r4, r5, pc}
 800a24e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a252:	f804 5b01 	strb.w	r5, [r4], #1
 800a256:	e7d5      	b.n	800a204 <uuid_unparse_x+0x32>

0800a258 <uuid_unparse>:
 800a258:	4a01      	ldr	r2, [pc, #4]	; (800a260 <uuid_unparse+0x8>)
 800a25a:	f7ff bfba 	b.w	800a1d2 <uuid_unparse_x>
 800a25e:	bf00      	nop
 800a260:	080143d2 	stmdaeq	r1, {r1, r4, r6, r7, r8, r9, lr}

0800a264 <WS28xxDmx::GetDmxStartAddress()>:
 800a264:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 800a266:	4770      	bx	lr

0800a268 <WS28xxDmx::GetDmxFootprint()>:
 800a268:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800a26a:	4770      	bx	lr

0800a26c <WS28xxDmx::~WS28xxDmx()>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4b06      	ldr	r3, [pc, #24]	; (800a288 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 800a270:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800a272:	4604      	mov	r4, r0
 800a274:	6003      	str	r3, [r0, #0]
 800a276:	b12d      	cbz	r5, 800a284 <WS28xxDmx::~WS28xxDmx()+0x18>
 800a278:	4628      	mov	r0, r5
 800a27a:	f001 ff5b 	bl	800c134 <WS28xx::~WS28xx()>
 800a27e:	4628      	mov	r0, r5
 800a280:	f007 fe12 	bl	8011ea8 <operator delete(void*)>
 800a284:	4620      	mov	r0, r4
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	0801440c 	stmdaeq	r1, {r2, r3, sl, lr}

0800a28c <WS28xxDmx::~WS28xxDmx()>:
 800a28c:	b510      	push	{r4, lr}
 800a28e:	4604      	mov	r4, r0
 800a290:	f7ff ffec 	bl	800a26c <WS28xxDmx::~WS28xxDmx()>
 800a294:	4620      	mov	r0, r4
 800a296:	f007 fe07 	bl	8011ea8 <operator delete(void*)>
 800a29a:	4620      	mov	r0, r4
 800a29c:	bd10      	pop	{r4, pc}

0800a29e <WS28xxDmx::Blackout(bool)>:
 800a29e:	b538      	push	{r3, r4, r5, lr}
 800a2a0:	4605      	mov	r5, r0
 800a2a2:	460c      	mov	r4, r1
 800a2a4:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
 800a2a8:	f008 ffa8 	bl	80131fc <gd32_spi_dma_tx_is_active()>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d1fb      	bne.n	800a2a8 <WS28xxDmx::Blackout(bool)+0xa>
 800a2b0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800a2b2:	b11c      	cbz	r4, 800a2bc <WS28xxDmx::Blackout(bool)+0x1e>
 800a2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2b8:	f001 bfb6 	b.w	800c228 <WS28xx::Blackout()>
 800a2bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2c0:	f001 bf96 	b.w	800c1f0 <WS28xx::Update()>

0800a2c4 <WS28xxDmx::Start(unsigned int)>:
 800a2c4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a2c8:	b93b      	cbnz	r3, 800a2da <WS28xxDmx::Start(unsigned int)+0x16>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a2d0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800a2d2:	b110      	cbz	r0, 800a2da <WS28xxDmx::Start(unsigned int)+0x16>
 800a2d4:	6803      	ldr	r3, [r0, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	4718      	bx	r3
 800a2da:	4770      	bx	lr

0800a2dc <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 800a2dc:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 800a2de:	b508      	push	{r3, lr}
 800a2e0:	428a      	cmp	r2, r1
 800a2e2:	d101      	bne.n	800a2e8 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>
 800a2e4:	2001      	movs	r0, #1
 800a2e6:	bd08      	pop	{r3, pc}
 800a2e8:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 800a2ea:	440a      	add	r2, r1
 800a2ec:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a2f0:	dc0b      	bgt.n	800a30a <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800a2f2:	1e4a      	subs	r2, r1, #1
 800a2f4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a2f8:	d207      	bcs.n	800a30a <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800a2fa:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800a2fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d0f0      	beq.n	800a2e4 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800a302:	6803      	ldr	r3, [r0, #0]
 800a304:	69db      	ldr	r3, [r3, #28]
 800a306:	4798      	blx	r3
 800a308:	e7ec      	b.n	800a2e4 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800a30a:	2000      	movs	r0, #0
 800a30c:	e7eb      	b.n	800a2e6 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>

0800a30e <WS28xxDmx::Stop(unsigned int)>:
 800a30e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a312:	b510      	push	{r4, lr}
 800a314:	4604      	mov	r4, r0
 800a316:	b16b      	cbz	r3, 800a334 <WS28xxDmx::Stop(unsigned int)+0x26>
 800a318:	2300      	movs	r3, #0
 800a31a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a31e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800a320:	b108      	cbz	r0, 800a326 <WS28xxDmx::Stop(unsigned int)+0x18>
 800a322:	f001 ff81 	bl	800c228 <WS28xx::Blackout()>
 800a326:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a328:	b120      	cbz	r0, 800a334 <WS28xxDmx::Stop(unsigned int)+0x26>
 800a32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a32e:	6803      	ldr	r3, [r0, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	4718      	bx	r3
 800a334:	bd10      	pop	{r4, pc}

0800a336 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800a336:	4603      	mov	r3, r0
 800a338:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800a33a:	4288      	cmp	r0, r1
 800a33c:	f04f 0000 	mov.w	r0, #0
 800a340:	d30f      	bcc.n	800a362 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2c>
 800a342:	7090      	strb	r0, [r2, #2]
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	fbb1 f0f3 	udiv	r0, r1, r3
 800a34a:	fb03 1110 	mls	r1, r3, r0, r1
 800a34e:	2903      	cmp	r1, #3
 800a350:	d80e      	bhi.n	800a370 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 800a352:	e8df f001 	tbb	[pc, r1]
 800a356:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 800a35a:	f240 2305 	movw	r3, #517	; 0x205
 800a35e:	2001      	movs	r0, #1
 800a360:	8013      	strh	r3, [r2, #0]
 800a362:	4770      	bx	lr
 800a364:	f240 2306 	movw	r3, #518	; 0x206
 800a368:	e7f9      	b.n	800a35e <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800a36a:	f240 2307 	movw	r3, #519	; 0x207
 800a36e:	e7f6      	b.n	800a35e <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800a370:	f240 2312 	movw	r3, #530	; 0x212
 800a374:	e7f3      	b.n	800a35e <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>

0800a376 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800a376:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a37a:	b085      	sub	sp, #20
 800a37c:	4606      	mov	r6, r0
 800a37e:	4690      	mov	r8, r2
 800a380:	4699      	mov	r9, r3
 800a382:	9103      	str	r1, [sp, #12]
 800a384:	f008 ff3a 	bl	80131fc <gd32_spi_dma_tx_is_active()>
 800a388:	2800      	cmp	r0, #0
 800a38a:	d170      	bne.n	800a46e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 800a38c:	9b03      	ldr	r3, [sp, #12]
 800a38e:	6972      	ldr	r2, [r6, #20]
 800a390:	f003 0103 	and.w	r1, r3, #3
 800a394:	6a33      	ldr	r3, [r6, #32]
 800a396:	2902      	cmp	r1, #2
 800a398:	fbb9 f7f3 	udiv	r7, r9, r3
 800a39c:	d02b      	beq.n	800a3f6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x80>
 800a39e:	2903      	cmp	r1, #3
 800a3a0:	d030      	beq.n	800a404 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x8e>
 800a3a2:	2901      	cmp	r1, #1
 800a3a4:	6875      	ldr	r5, [r6, #4]
 800a3a6:	d027      	beq.n	800a3f8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 800a3a8:	4297      	cmp	r7, r2
 800a3aa:	bf28      	it	cs
 800a3ac:	4617      	movcs	r7, r2
 800a3ae:	4295      	cmp	r5, r2
 800a3b0:	d92a      	bls.n	800a408 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x92>
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	8df4      	ldrh	r4, [r6, #46]	; 0x2e
 800a3b6:	3c01      	subs	r4, #1
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	4444      	add	r4, r8
 800a3bc:	d12c      	bne.n	800a418 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa2>
 800a3be:	42af      	cmp	r7, r5
 800a3c0:	d948      	bls.n	800a454 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800a3c2:	eba4 0308 	sub.w	r3, r4, r8
 800a3c6:	4599      	cmp	r9, r3
 800a3c8:	d944      	bls.n	800a454 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800a3ca:	f04f 0a00 	mov.w	sl, #0
 800a3ce:	69b3      	ldr	r3, [r6, #24]
 800a3d0:	f894 f000 	pld	[r4]
 800a3d4:	fb03 fb05 	mul.w	fp, r3, r5
 800a3d8:	69b3      	ldr	r3, [r6, #24]
 800a3da:	4553      	cmp	r3, sl
 800a3dc:	d917      	bls.n	800a40e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x98>
 800a3de:	78a2      	ldrb	r2, [r4, #2]
 800a3e0:	7863      	ldrb	r3, [r4, #1]
 800a3e2:	9200      	str	r2, [sp, #0]
 800a3e4:	eb0b 010a 	add.w	r1, fp, sl
 800a3e8:	7822      	ldrb	r2, [r4, #0]
 800a3ea:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800a3ec:	f001 f8c0 	bl	800b570 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800a3f0:	f10a 0a01 	add.w	sl, sl, #1
 800a3f4:	e7f0      	b.n	800a3d8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x62>
 800a3f6:	68b5      	ldr	r5, [r6, #8]
 800a3f8:	442f      	add	r7, r5
 800a3fa:	4297      	cmp	r7, r2
 800a3fc:	bf28      	it	cs
 800a3fe:	4617      	movcs	r7, r2
 800a400:	4604      	mov	r4, r0
 800a402:	e7d9      	b.n	800a3b8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800a404:	68f5      	ldr	r5, [r6, #12]
 800a406:	e7f7      	b.n	800a3f8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 800a408:	4605      	mov	r5, r0
 800a40a:	4604      	mov	r4, r0
 800a40c:	e7d4      	b.n	800a3b8 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800a40e:	3501      	adds	r5, #1
 800a410:	3403      	adds	r4, #3
 800a412:	e7d4      	b.n	800a3be <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x48>
 800a414:	3501      	adds	r5, #1
 800a416:	3404      	adds	r4, #4
 800a418:	42af      	cmp	r7, r5
 800a41a:	d91b      	bls.n	800a454 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800a41c:	eba4 0308 	sub.w	r3, r4, r8
 800a420:	4599      	cmp	r9, r3
 800a422:	d917      	bls.n	800a454 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xde>
 800a424:	f04f 0a00 	mov.w	sl, #0
 800a428:	69b3      	ldr	r3, [r6, #24]
 800a42a:	f894 f000 	pld	[r4]
 800a42e:	fb03 fb05 	mul.w	fp, r3, r5
 800a432:	69b3      	ldr	r3, [r6, #24]
 800a434:	4553      	cmp	r3, sl
 800a436:	d9ed      	bls.n	800a414 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x9e>
 800a438:	78e2      	ldrb	r2, [r4, #3]
 800a43a:	7863      	ldrb	r3, [r4, #1]
 800a43c:	9201      	str	r2, [sp, #4]
 800a43e:	78a2      	ldrb	r2, [r4, #2]
 800a440:	eb0b 010a 	add.w	r1, fp, sl
 800a444:	9200      	str	r2, [sp, #0]
 800a446:	7822      	ldrb	r2, [r4, #0]
 800a448:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800a44a:	f001 fd5d 	bl	800bf08 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800a44e:	f10a 0a01 	add.w	sl, sl, #1
 800a452:	e7ee      	b.n	800a432 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xbc>
 800a454:	6933      	ldr	r3, [r6, #16]
 800a456:	9a03      	ldr	r2, [sp, #12]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d108      	bne.n	800a46e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 800a45c:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
 800a460:	b92b      	cbnz	r3, 800a46e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf8>
 800a462:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800a464:	b005      	add	sp, #20
 800a466:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46a:	f001 bec1 	b.w	800c1f0 <WS28xx::Update()>
 800a46e:	b005      	add	sp, #20
 800a470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a474 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 800a474:	22ff      	movs	r2, #255	; 0xff
 800a476:	4b1d      	ldr	r3, [pc, #116]	; (800a4ec <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x78>)
 800a478:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a47a:	6003      	str	r3, [r0, #0]
 800a47c:	2300      	movs	r3, #0
 800a47e:	460d      	mov	r5, r1
 800a480:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800a484:	2101      	movs	r1, #1
 800a486:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800a48a:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 800a48e:	8483      	strh	r3, [r0, #36]	; 0x24
 800a490:	6283      	str	r3, [r0, #40]	; 0x28
 800a492:	63c3      	str	r3, [r0, #60]	; 0x3c
 800a494:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800a498:	4b15      	ldr	r3, [pc, #84]	; (800a4f0 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x7c>)
 800a49a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800a49c:	6018      	str	r0, [r3, #0]
 800a49e:	f100 031c 	add.w	r3, r0, #28
 800a4a2:	8602      	strh	r2, [r0, #48]	; 0x30
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	f100 0314 	add.w	r3, r0, #20
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	f100 0220 	add.w	r2, r0, #32
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	1d03      	adds	r3, r0, #4
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f000 fbcd 	bl	800ac54 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 800a4ba:	201c      	movs	r0, #28
 800a4bc:	f007 fcf8 	bl	8011eb0 <operator new(unsigned int)>
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	f001 fe54 	bl	800c170 <WS28xx::WS28xx(PixelConfiguration&)>
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	6366      	str	r6, [r4, #52]	; 0x34
 800a4cc:	f001 feac 	bl	800c228 <WS28xx::Blackout()>
 800a4d0:	69ab      	ldr	r3, [r5, #24]
 800a4d2:	6a22      	ldr	r2, [r4, #32]
 800a4d4:	61a3      	str	r3, [r4, #24]
 800a4d6:	8bab      	ldrh	r3, [r5, #28]
 800a4d8:	4628      	mov	r0, r5
 800a4da:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800a4dc:	6963      	ldr	r3, [r4, #20]
 800a4de:	4353      	muls	r3, r2
 800a4e0:	8623      	strh	r3, [r4, #48]	; 0x30
 800a4e2:	f000 fc0f 	bl	800ad04 <PixelDmxConfiguration::Dump()>
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	b002      	add	sp, #8
 800a4ea:	bd70      	pop	{r4, r5, r6, pc}
 800a4ec:	0801440c 	stmdaeq	r1, {r2, r3, sl, lr}
 800a4f0:	20001908 	andcs	r1, r0, r8, lsl #18

0800a4f4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800a4f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4f6:	88c5      	ldrh	r5, [r0, #6]
 800a4f8:	8886      	ldrh	r6, [r0, #4]
 800a4fa:	42b5      	cmp	r5, r6
 800a4fc:	d216      	bcs.n	800a52c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800a4fe:	4604      	mov	r4, r0
 800a500:	6800      	ldr	r0, [r0, #0]
 800a502:	4428      	add	r0, r5
 800a504:	1b75      	subs	r5, r6, r5
 800a506:	7a26      	ldrb	r6, [r4, #8]
 800a508:	b923      	cbnz	r3, 800a514 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800a50a:	b926      	cbnz	r6, 800a516 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800a50c:	9200      	str	r2, [sp, #0]
 800a50e:	460b      	mov	r3, r1
 800a510:	4a09      	ldr	r2, [pc, #36]	; (800a538 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800a512:	e003      	b.n	800a51c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800a514:	b166      	cbz	r6, 800a530 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800a516:	460b      	mov	r3, r1
 800a518:	9200      	str	r2, [sp, #0]
 800a51a:	4a08      	ldr	r2, [pc, #32]	; (800a53c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800a51c:	4629      	mov	r1, r5
 800a51e:	f7fe fb41 	bl	8008ba4 <snprintf>
 800a522:	4285      	cmp	r5, r0
 800a524:	bfa2      	ittt	ge
 800a526:	88e3      	ldrhge	r3, [r4, #6]
 800a528:	181b      	addge	r3, r3, r0
 800a52a:	80e3      	strhge	r3, [r4, #6]
 800a52c:	b002      	add	sp, #8
 800a52e:	bd70      	pop	{r4, r5, r6, pc}
 800a530:	9200      	str	r2, [sp, #0]
 800a532:	460b      	mov	r3, r1
 800a534:	4a02      	ldr	r2, [pc, #8]	; (800a540 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a536:	e7f1      	b.n	800a51c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800a538:	08014303 	stmdaeq	r1, {r0, r1, r8, r9, lr}
 800a53c:	080142fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, lr}
 800a540:	08014304 	stmdaeq	r1, {r2, r8, r9, lr}

0800a544 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800a544:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a546:	88c5      	ldrh	r5, [r0, #6]
 800a548:	8886      	ldrh	r6, [r0, #4]
 800a54a:	42b5      	cmp	r5, r6
 800a54c:	d216      	bcs.n	800a57c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800a54e:	4604      	mov	r4, r0
 800a550:	6800      	ldr	r0, [r0, #0]
 800a552:	4428      	add	r0, r5
 800a554:	1b75      	subs	r5, r6, r5
 800a556:	7a26      	ldrb	r6, [r4, #8]
 800a558:	b923      	cbnz	r3, 800a564 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800a55a:	b926      	cbnz	r6, 800a566 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800a55c:	9200      	str	r2, [sp, #0]
 800a55e:	460b      	mov	r3, r1
 800a560:	4a09      	ldr	r2, [pc, #36]	; (800a588 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800a562:	e003      	b.n	800a56c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800a564:	b166      	cbz	r6, 800a580 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800a566:	460b      	mov	r3, r1
 800a568:	9200      	str	r2, [sp, #0]
 800a56a:	4a08      	ldr	r2, [pc, #32]	; (800a58c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800a56c:	4629      	mov	r1, r5
 800a56e:	f7fe fb19 	bl	8008ba4 <snprintf>
 800a572:	4285      	cmp	r5, r0
 800a574:	bfa2      	ittt	ge
 800a576:	88e3      	ldrhge	r3, [r4, #6]
 800a578:	181b      	addge	r3, r3, r0
 800a57a:	80e3      	strhge	r3, [r4, #6]
 800a57c:	b002      	add	sp, #8
 800a57e:	bd70      	pop	{r4, r5, r6, pc}
 800a580:	9200      	str	r2, [sp, #0]
 800a582:	460b      	mov	r3, r1
 800a584:	4a02      	ldr	r2, [pc, #8]	; (800a590 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a586:	e7f1      	b.n	800a56c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800a588:	08014303 	stmdaeq	r1, {r0, r1, r8, r9, lr}
 800a58c:	080142fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, lr}
 800a590:	08014304 	stmdaeq	r1, {r2, r8, r9, lr}

0800a594 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800a594:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a596:	88c5      	ldrh	r5, [r0, #6]
 800a598:	8886      	ldrh	r6, [r0, #4]
 800a59a:	42b5      	cmp	r5, r6
 800a59c:	d216      	bcs.n	800a5cc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800a59e:	4604      	mov	r4, r0
 800a5a0:	6800      	ldr	r0, [r0, #0]
 800a5a2:	4428      	add	r0, r5
 800a5a4:	1b75      	subs	r5, r6, r5
 800a5a6:	7a26      	ldrb	r6, [r4, #8]
 800a5a8:	b923      	cbnz	r3, 800a5b4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800a5aa:	b926      	cbnz	r6, 800a5b6 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800a5ac:	9200      	str	r2, [sp, #0]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4a09      	ldr	r2, [pc, #36]	; (800a5d8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800a5b2:	e003      	b.n	800a5bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a5b4:	b166      	cbz	r6, 800a5d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	9200      	str	r2, [sp, #0]
 800a5ba:	4a08      	ldr	r2, [pc, #32]	; (800a5dc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800a5bc:	4629      	mov	r1, r5
 800a5be:	f7fe faf1 	bl	8008ba4 <snprintf>
 800a5c2:	4285      	cmp	r5, r0
 800a5c4:	bfa2      	ittt	ge
 800a5c6:	88e3      	ldrhge	r3, [r4, #6]
 800a5c8:	181b      	addge	r3, r3, r0
 800a5ca:	80e3      	strhge	r3, [r4, #6]
 800a5cc:	b002      	add	sp, #8
 800a5ce:	bd70      	pop	{r4, r5, r6, pc}
 800a5d0:	9200      	str	r2, [sp, #0]
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4a02      	ldr	r2, [pc, #8]	; (800a5e0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a5d6:	e7f1      	b.n	800a5bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a5d8:	080142f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, lr}
 800a5dc:	080142e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, lr}
 800a5e0:	080142f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, lr}

0800a5e4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 800a5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e8:	4699      	mov	r9, r3
 800a5ea:	8885      	ldrh	r5, [r0, #4]
 800a5ec:	88c3      	ldrh	r3, [r0, #6]
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	42ab      	cmp	r3, r5
 800a5f2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800a5f6:	d227      	bcs.n	800a648 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 800a5f8:	6826      	ldr	r6, [r4, #0]
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	460f      	mov	r7, r1
 800a5fe:	f894 a008 	ldrb.w	sl, [r4, #8]
 800a602:	441e      	add	r6, r3
 800a604:	1aed      	subs	r5, r5, r3
 800a606:	f7fd fa85 	bl	8007b14 <__aeabi_f2d>
 800a60a:	f1b9 0f00 	cmp.w	r9, #0
 800a60e:	d109      	bne.n	800a624 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 800a610:	f1ba 0f00 	cmp.w	sl, #0
 800a614:	d109      	bne.n	800a62a <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 800a616:	463b      	mov	r3, r7
 800a618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a61c:	4a0f      	ldr	r2, [pc, #60]	; (800a65c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 800a61e:	f8cd 8000 	str.w	r8, [sp]
 800a622:	e008      	b.n	800a636 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800a624:	f1ba 0f00 	cmp.w	sl, #0
 800a628:	d011      	beq.n	800a64e <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 800a62a:	463b      	mov	r3, r7
 800a62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a630:	4a0b      	ldr	r2, [pc, #44]	; (800a660 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 800a632:	f8cd 8000 	str.w	r8, [sp]
 800a636:	4629      	mov	r1, r5
 800a638:	4630      	mov	r0, r6
 800a63a:	f7fe fab3 	bl	8008ba4 <snprintf>
 800a63e:	4285      	cmp	r5, r0
 800a640:	bfa2      	ittt	ge
 800a642:	88e3      	ldrhge	r3, [r4, #6]
 800a644:	181b      	addge	r3, r3, r0
 800a646:	80e3      	strhge	r3, [r4, #6]
 800a648:	b004      	add	sp, #16
 800a64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a64e:	463b      	mov	r3, r7
 800a650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a654:	4a03      	ldr	r2, [pc, #12]	; (800a664 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 800a656:	f8cd 8000 	str.w	r8, [sp]
 800a65a:	e7ec      	b.n	800a636 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800a65c:	08014443 	stmdaeq	r1, {r0, r1, r6, sl, lr}
 800a660:	08014438 	stmdaeq	r1, {r3, r4, r5, sl, lr}
 800a664:	08014444 	stmdaeq	r1, {r2, r6, sl, lr}

0800a668 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 800a668:	2200      	movs	r2, #0
 800a66a:	6001      	str	r1, [r0, #0]
 800a66c:	4910      	ldr	r1, [pc, #64]	; (800a6b0 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x48>)
 800a66e:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 800a672:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800a676:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800a67a:	81c1      	strh	r1, [r0, #14]
 800a67c:	213d      	movs	r1, #61	; 0x3d
 800a67e:	8201      	strh	r1, [r0, #16]
 800a680:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a684:	8241      	strh	r1, [r0, #18]
 800a686:	2101      	movs	r1, #1
 800a688:	7541      	strb	r1, [r0, #21]
 800a68a:	2106      	movs	r1, #6
 800a68c:	75c1      	strb	r1, [r0, #23]
 800a68e:	4909      	ldr	r1, [pc, #36]	; (800a6b4 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x4c>)
 800a690:	7302      	strb	r2, [r0, #12]
 800a692:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800a696:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 800a69a:	6201      	str	r1, [r0, #32]
 800a69c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
 800a6a0:	6241      	str	r1, [r0, #36]	; 0x24
 800a6a2:	211d      	movs	r1, #29
 800a6a4:	7582      	strb	r2, [r0, #22]
 800a6a6:	8501      	strh	r1, [r0, #40]	; 0x28
 800a6a8:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	0100aa03 	tsteq	r0, r3, lsl #20
 800a6b4:	00090005 	andeq	r0, r9, r5

0800a6b8 <WS28xxDmxParams::Load()>:
 800a6b8:	b508      	push	{r3, lr}
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	4601      	mov	r1, r0
 800a6be:	6043      	str	r3, [r0, #4]
 800a6c0:	6800      	ldr	r0, [r0, #0]
 800a6c2:	b120      	cbz	r0, 800a6ce <WS28xxDmxParams::Load()+0x16>
 800a6c4:	6803      	ldr	r3, [r0, #0]
 800a6c6:	3104      	adds	r1, #4
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	4798      	blx	r3
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	bd08      	pop	{r3, pc}

0800a6d0 <WS28xxDmxParams::Load(char const*, unsigned int)>:
 800a6d0:	6803      	ldr	r3, [r0, #0]
 800a6d2:	b1d3      	cbz	r3, 800a70a <WS28xxDmxParams::Load(char const*, unsigned int)+0x3a>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6d8:	460d      	mov	r5, r1
 800a6da:	4616      	mov	r6, r2
 800a6dc:	4604      	mov	r4, r0
 800a6de:	6043      	str	r3, [r0, #4]
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	490a      	ldr	r1, [pc, #40]	; (800a70c <WS28xxDmxParams::Load(char const*, unsigned int)+0x3c>)
 800a6e4:	4668      	mov	r0, sp
 800a6e6:	f006 fe31 	bl	801134c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800a6ea:	4632      	mov	r2, r6
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	4668      	mov	r0, sp
 800a6f0:	f006 fe30 	bl	8011354 <ReadConfigFile::Read(char const*, unsigned int)>
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	f851 0b04 	ldr.w	r0, [r1], #4
 800a6fa:	6803      	ldr	r3, [r0, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	4798      	blx	r3
 800a700:	4668      	mov	r0, sp
 800a702:	f006 fe26 	bl	8011352 <ReadConfigFile::~ReadConfigFile()>
 800a706:	b002      	add	sp, #8
 800a708:	bd70      	pop	{r4, r5, r6, pc}
 800a70a:	4770      	bx	lr
 800a70c:	0800a959 	stmdaeq	r0, {r0, r3, r4, r6, r8, fp, sp, pc}

0800a710 <WS28xxDmxParams::callbackFunction(char const*)>:
 800a710:	b530      	push	{r4, r5, lr}
 800a712:	2308      	movs	r3, #8
 800a714:	460d      	mov	r5, r1
 800a716:	b089      	sub	sp, #36	; 0x24
 800a718:	4604      	mov	r4, r0
 800a71a:	9302      	str	r3, [sp, #8]
 800a71c:	4628      	mov	r0, r5
 800a71e:	4982      	ldr	r1, [pc, #520]	; (800a928 <WS28xxDmxParams::callbackFunction(char const*)+0x218>)
 800a720:	446b      	add	r3, sp
 800a722:	aa04      	add	r2, sp, #16
 800a724:	f006 fe4a 	bl	80113bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a728:	b9a0      	cbnz	r0, 800a754 <WS28xxDmxParams::callbackFunction(char const*)+0x44>
 800a72a:	9b02      	ldr	r3, [sp, #8]
 800a72c:	3320      	adds	r3, #32
 800a72e:	446b      	add	r3, sp
 800a730:	f803 0c10 	strb.w	r0, [r3, #-16]
 800a734:	a804      	add	r0, sp, #16
 800a736:	f000 fe07 	bl	800b348 <PixelType::GetType(char const*)>
 800a73a:	280e      	cmp	r0, #14
 800a73c:	bf08      	it	eq
 800a73e:	2203      	moveq	r2, #3
 800a740:	6863      	ldr	r3, [r4, #4]
 800a742:	bf19      	ittee	ne
 800a744:	7220      	strbne	r0, [r4, #8]
 800a746:	f043 0301 	orrne.w	r3, r3, #1
 800a74a:	7222      	strbeq	r2, [r4, #8]
 800a74c:	f023 0301 	biceq.w	r3, r3, #1
 800a750:	6063      	str	r3, [r4, #4]
 800a752:	e033      	b.n	800a7bc <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800a754:	4628      	mov	r0, r5
 800a756:	4975      	ldr	r1, [pc, #468]	; (800a92c <WS28xxDmxParams::callbackFunction(char const*)+0x21c>)
 800a758:	f10d 0202 	add.w	r2, sp, #2
 800a75c:	f006 feea 	bl	8011534 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800a760:	b990      	cbnz	r0, 800a788 <WS28xxDmxParams::callbackFunction(char const*)+0x78>
 800a762:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a766:	6863      	ldr	r3, [r4, #4]
 800a768:	1e51      	subs	r1, r2, #1
 800a76a:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 800a76e:	bf2d      	iteet	cs
 800a770:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 800a774:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 800a778:	f043 0302 	orrcc.w	r3, r3, #2
 800a77c:	7262      	strbcs	r2, [r4, #9]
 800a77e:	bf24      	itt	cs
 800a780:	72a0      	strbcs	r0, [r4, #10]
 800a782:	f023 0302 	biccs.w	r3, r3, #2
 800a786:	e7e3      	b.n	800a750 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800a788:	2303      	movs	r3, #3
 800a78a:	4628      	mov	r0, r5
 800a78c:	9302      	str	r3, [sp, #8]
 800a78e:	4968      	ldr	r1, [pc, #416]	; (800a930 <WS28xxDmxParams::callbackFunction(char const*)+0x220>)
 800a790:	ab02      	add	r3, sp, #8
 800a792:	aa04      	add	r2, sp, #16
 800a794:	f006 fe12 	bl	80113bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a798:	b990      	cbnz	r0, 800a7c0 <WS28xxDmxParams::callbackFunction(char const*)+0xb0>
 800a79a:	9b02      	ldr	r3, [sp, #8]
 800a79c:	3320      	adds	r3, #32
 800a79e:	446b      	add	r3, sp
 800a7a0:	f803 0c10 	strb.w	r0, [r3, #-16]
 800a7a4:	a804      	add	r0, sp, #16
 800a7a6:	f000 fdf3 	bl	800b390 <PixelType::GetMap(char const*)>
 800a7aa:	6863      	ldr	r3, [r4, #4]
 800a7ac:	2806      	cmp	r0, #6
 800a7ae:	bf14      	ite	ne
 800a7b0:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 800a7b4:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 800a7b8:	6063      	str	r3, [r4, #4]
 800a7ba:	75e0      	strb	r0, [r4, #23]
 800a7bc:	b009      	add	sp, #36	; 0x24
 800a7be:	bd30      	pop	{r4, r5, pc}
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	495c      	ldr	r1, [pc, #368]	; (800a934 <WS28xxDmxParams::callbackFunction(char const*)+0x224>)
 800a7c4:	aa01      	add	r2, sp, #4
 800a7c6:	f006 fe12 	bl	80113ee <Sscan::Float(char const*, char const*, float&)>
 800a7ca:	b960      	cbnz	r0, 800a7e6 <WS28xxDmxParams::callbackFunction(char const*)+0xd6>
 800a7cc:	9801      	ldr	r0, [sp, #4]
 800a7ce:	f000 fe41 	bl	800b454 <PixelType::ConvertTxH(float)>
 800a7d2:	6863      	ldr	r3, [r4, #4]
 800a7d4:	b120      	cbz	r0, 800a7e0 <WS28xxDmxParams::callbackFunction(char const*)+0xd0>
 800a7d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7da:	6063      	str	r3, [r4, #4]
 800a7dc:	7620      	strb	r0, [r4, #24]
 800a7de:	e7ed      	b.n	800a7bc <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800a7e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7e4:	e7f9      	b.n	800a7da <WS28xxDmxParams::callbackFunction(char const*)+0xca>
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	4953      	ldr	r1, [pc, #332]	; (800a938 <WS28xxDmxParams::callbackFunction(char const*)+0x228>)
 800a7ea:	aa01      	add	r2, sp, #4
 800a7ec:	f006 fdff 	bl	80113ee <Sscan::Float(char const*, char const*, float&)>
 800a7f0:	b960      	cbnz	r0, 800a80c <WS28xxDmxParams::callbackFunction(char const*)+0xfc>
 800a7f2:	9801      	ldr	r0, [sp, #4]
 800a7f4:	f000 fe2e 	bl	800b454 <PixelType::ConvertTxH(float)>
 800a7f8:	6863      	ldr	r3, [r4, #4]
 800a7fa:	b120      	cbz	r0, 800a806 <WS28xxDmxParams::callbackFunction(char const*)+0xf6>
 800a7fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a800:	6063      	str	r3, [r4, #4]
 800a802:	7660      	strb	r0, [r4, #25]
 800a804:	e7da      	b.n	800a7bc <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800a806:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a80a:	e7f9      	b.n	800a800 <WS28xxDmxParams::callbackFunction(char const*)+0xf0>
 800a80c:	4628      	mov	r0, r5
 800a80e:	494b      	ldr	r1, [pc, #300]	; (800a93c <WS28xxDmxParams::callbackFunction(char const*)+0x22c>)
 800a810:	f10d 0202 	add.w	r2, sp, #2
 800a814:	f006 fe8e 	bl	8011534 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800a818:	b998      	cbnz	r0, 800a842 <WS28xxDmxParams::callbackFunction(char const*)+0x132>
 800a81a:	f240 25a6 	movw	r5, #678	; 0x2a6
 800a81e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800a822:	6863      	ldr	r3, [r4, #4]
 800a824:	1e8a      	subs	r2, r1, #2
 800a826:	b292      	uxth	r2, r2
 800a828:	42aa      	cmp	r2, r5
 800a82a:	bf81      	itttt	hi
 800a82c:	2201      	movhi	r2, #1
 800a82e:	75a0      	strbhi	r0, [r4, #22]
 800a830:	7562      	strbhi	r2, [r4, #21]
 800a832:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800a836:	bf9c      	itt	ls
 800a838:	f8a4 1015 	strhls.w	r1, [r4, #21]
 800a83c:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800a840:	e786      	b.n	800a750 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800a842:	4628      	mov	r0, r5
 800a844:	493e      	ldr	r1, [pc, #248]	; (800a940 <WS28xxDmxParams::callbackFunction(char const*)+0x230>)
 800a846:	aa03      	add	r2, sp, #12
 800a848:	f006 fe92 	bl	8011570 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 800a84c:	b960      	cbnz	r0, 800a868 <WS28xxDmxParams::callbackFunction(char const*)+0x158>
 800a84e:	9a03      	ldr	r2, [sp, #12]
 800a850:	493c      	ldr	r1, [pc, #240]	; (800a944 <WS28xxDmxParams::callbackFunction(char const*)+0x234>)
 800a852:	6863      	ldr	r3, [r4, #4]
 800a854:	428a      	cmp	r2, r1
 800a856:	bf14      	ite	ne
 800a858:	f043 0310 	orrne.w	r3, r3, #16
 800a85c:	f023 0310 	biceq.w	r3, r3, #16
 800a860:	6063      	str	r3, [r4, #4]
 800a862:	f8c4 200e 	str.w	r2, [r4, #14]
 800a866:	e7a9      	b.n	800a7bc <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800a868:	4628      	mov	r0, r5
 800a86a:	4937      	ldr	r1, [pc, #220]	; (800a948 <WS28xxDmxParams::callbackFunction(char const*)+0x238>)
 800a86c:	f10d 0201 	add.w	r2, sp, #1
 800a870:	f006 fea7 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a874:	b988      	cbnz	r0, 800a89a <WS28xxDmxParams::callbackFunction(char const*)+0x18a>
 800a876:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800a87a:	6863      	ldr	r3, [r4, #4]
 800a87c:	1e4a      	subs	r2, r1, #1
 800a87e:	b2d2      	uxtb	r2, r2
 800a880:	2afd      	cmp	r2, #253	; 0xfd
 800a882:	bf83      	ittte	hi
 800a884:	f023 0320 	bichi.w	r3, r3, #32
 800a888:	6063      	strhi	r3, [r4, #4]
 800a88a:	23ff      	movhi	r3, #255	; 0xff
 800a88c:	f043 0320 	orrls.w	r3, r3, #32
 800a890:	bf9a      	itte	ls
 800a892:	6063      	strls	r3, [r4, #4]
 800a894:	74a1      	strbls	r1, [r4, #18]
 800a896:	74a3      	strbhi	r3, [r4, #18]
 800a898:	e790      	b.n	800a7bc <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800a89a:	4628      	mov	r0, r5
 800a89c:	492b      	ldr	r1, [pc, #172]	; (800a94c <WS28xxDmxParams::callbackFunction(char const*)+0x23c>)
 800a89e:	f10d 0202 	add.w	r2, sp, #2
 800a8a2:	f006 fe47 	bl	8011534 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800a8a6:	b9b8      	cbnz	r0, 800a8d8 <WS28xxDmxParams::callbackFunction(char const*)+0x1c8>
 800a8a8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a8ac:	6863      	ldr	r3, [r4, #4]
 800a8ae:	1e91      	subs	r1, r2, #2
 800a8b0:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800a8b4:	bf83      	ittte	hi
 800a8b6:	2201      	movhi	r2, #1
 800a8b8:	72e2      	strbhi	r2, [r4, #11]
 800a8ba:	2200      	movhi	r2, #0
 800a8bc:	f8a4 200b 	strhls.w	r2, [r4, #11]
 800a8c0:	bf92      	itee	ls
 800a8c2:	f043 0304 	orrls.w	r3, r3, #4
 800a8c6:	7322      	strbhi	r2, [r4, #12]
 800a8c8:	f023 0304 	bichi.w	r3, r3, #4
 800a8cc:	e740      	b.n	800a750 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8d4:	8362      	strh	r2, [r4, #26]
 800a8d6:	e00e      	b.n	800a8f6 <WS28xxDmxParams::callbackFunction(char const*)+0x1e6>
 800a8d8:	4628      	mov	r0, r5
 800a8da:	491d      	ldr	r1, [pc, #116]	; (800a950 <WS28xxDmxParams::callbackFunction(char const*)+0x240>)
 800a8dc:	f10d 0202 	add.w	r2, sp, #2
 800a8e0:	f006 fe28 	bl	8011534 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800a8e4:	b940      	cbnz	r0, 800a8f8 <WS28xxDmxParams::callbackFunction(char const*)+0x1e8>
 800a8e6:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a8ea:	6863      	ldr	r3, [r4, #4]
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	d0ee      	beq.n	800a8ce <WS28xxDmxParams::callbackFunction(char const*)+0x1be>
 800a8f0:	8362      	strh	r2, [r4, #26]
 800a8f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a8f6:	6063      	str	r3, [r4, #4]
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	4916      	ldr	r1, [pc, #88]	; (800a954 <WS28xxDmxParams::callbackFunction(char const*)+0x244>)
 800a8fc:	f10d 0201 	add.w	r2, sp, #1
 800a900:	f006 fe5f 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a904:	2800      	cmp	r0, #0
 800a906:	f47f af59 	bne.w	800a7bc <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800a90a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800a90e:	6863      	ldr	r3, [r4, #4]
 800a910:	1e51      	subs	r1, r2, #1
 800a912:	2904      	cmp	r1, #4
 800a914:	bf99      	ittee	ls
 800a916:	f884 202a 	strbls.w	r2, [r4, #42]	; 0x2a
 800a91a:	f443 1380 	orrls.w	r3, r3, #1048576	; 0x100000
 800a91e:	f884 002a 	strbhi.w	r0, [r4, #42]	; 0x2a
 800a922:	f423 1380 	bichi.w	r3, r3, #1048576	; 0x100000
 800a926:	e713      	b.n	800a750 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800a928:	08015b64 	stmdaeq	r1, {r2, r5, r6, r8, r9, fp, ip, lr}
 800a92c:	08015b6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, fp, ip, lr}
 800a930:	08015b54 	stmdaeq	r1, {r2, r4, r6, r8, r9, fp, ip, lr}
 800a934:	08015b77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, fp, ip, lr}
 800a938:	08015b7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
 800a93c:	08015b32 	stmdaeq	r1, {r1, r4, r5, r8, r9, fp, ip, lr}
 800a940:	08015b23 	stmdaeq	r1, {r0, r1, r5, r8, r9, fp, ip, lr}
 800a944:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800a948:	08015b42 	stmdaeq	r1, {r1, r6, r8, r9, fp, ip, lr}
 800a94c:	08015ce5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sl, fp, ip, lr}
 800a950:	08015c0d 	stmdaeq	r1, {r0, r2, r3, sl, fp, ip, lr}
 800a954:	08015bc0 	stmdaeq	r1, {r6, r7, r8, r9, fp, ip, lr}

0800a958 <WS28xxDmxParams::staticCallbackFunction(void*, char const*)>:
 800a958:	f7ff beda 	b.w	800a710 <WS28xxDmxParams::callbackFunction(char const*)>

0800a95c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>:
 800a95c:	b570      	push	{r4, r5, r6, lr}
 800a95e:	4604      	mov	r4, r0
 800a960:	4615      	mov	r5, r2
 800a962:	461e      	mov	r6, r3
 800a964:	b086      	sub	sp, #24
 800a966:	3004      	adds	r0, #4
 800a968:	2900      	cmp	r1, #0
 800a96a:	f000 808e 	beq.w	800aa8a <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x12e>
 800a96e:	2227      	movs	r2, #39	; 0x27
 800a970:	f007 fb5d 	bl	801202e <memmove>
 800a974:	4633      	mov	r3, r6
 800a976:	462a      	mov	r2, r5
 800a978:	4974      	ldr	r1, [pc, #464]	; (800ab4c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 800a97a:	a803      	add	r0, sp, #12
 800a97c:	f006 fc46 	bl	801120c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800a980:	7a20      	ldrb	r0, [r4, #8]
 800a982:	f000 fcd5 	bl	800b330 <PixelType::GetType(pixel::Type)>
 800a986:	6863      	ldr	r3, [r4, #4]
 800a988:	4602      	mov	r2, r0
 800a98a:	4971      	ldr	r1, [pc, #452]	; (800ab50 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	a803      	add	r0, sp, #12
 800a992:	f7ff fdff 	bl	800a594 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a996:	6863      	ldr	r3, [r4, #4]
 800a998:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 800a99c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a9a0:	496c      	ldr	r1, [pc, #432]	; (800ab54 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 800a9a2:	a803      	add	r0, sp, #12
 800a9a4:	f7ff fdce 	bl	800a544 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800a9a8:	496b      	ldr	r1, [pc, #428]	; (800ab58 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 800a9aa:	a803      	add	r0, sp, #12
 800a9ac:	f006 fcb4 	bl	8011318 <PropertiesBuilder::AddComment(char const*)>
 800a9b0:	6863      	ldr	r3, [r4, #4]
 800a9b2:	059e      	lsls	r6, r3, #22
 800a9b4:	d403      	bmi.n	800a9be <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x62>
 800a9b6:	7a20      	ldrb	r0, [r4, #8]
 800a9b8:	f000 f9a5 	bl	800ad06 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800a9bc:	75e0      	strb	r0, [r4, #23]
 800a9be:	7de0      	ldrb	r0, [r4, #23]
 800a9c0:	f000 fd0e 	bl	800b3e0 <PixelType::GetMap(pixel::Map)>
 800a9c4:	6863      	ldr	r3, [r4, #4]
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800a9cc:	4963      	ldr	r1, [pc, #396]	; (800ab5c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x200>)
 800a9ce:	a803      	add	r0, sp, #12
 800a9d0:	f7ff fde0 	bl	800a594 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a9d4:	6863      	ldr	r3, [r4, #4]
 800a9d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a9da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9de:	d011      	beq.n	800aa04 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800a9e0:	f10d 020b 	add.w	r2, sp, #11
 800a9e4:	7a20      	ldrb	r0, [r4, #8]
 800a9e6:	f10d 010a 	add.w	r1, sp, #10
 800a9ea:	f000 f99b 	bl	800ad24 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800a9ee:	6863      	ldr	r3, [r4, #4]
 800a9f0:	055d      	lsls	r5, r3, #21
 800a9f2:	bf5c      	itt	pl
 800a9f4:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 800a9f8:	7622      	strbpl	r2, [r4, #24]
 800a9fa:	0518      	lsls	r0, r3, #20
 800a9fc:	bf5c      	itt	pl
 800a9fe:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 800aa02:	7663      	strbpl	r3, [r4, #25]
 800aa04:	4956      	ldr	r1, [pc, #344]	; (800ab60 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x204>)
 800aa06:	a803      	add	r0, sp, #12
 800aa08:	f006 fc86 	bl	8011318 <PropertiesBuilder::AddComment(char const*)>
 800aa0c:	7e20      	ldrb	r0, [r4, #24]
 800aa0e:	f000 fcf3 	bl	800b3f8 <PixelType::ConvertTxH(unsigned char)>
 800aa12:	2502      	movs	r5, #2
 800aa14:	6863      	ldr	r3, [r4, #4]
 800aa16:	4602      	mov	r2, r0
 800aa18:	4952      	ldr	r1, [pc, #328]	; (800ab64 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x208>)
 800aa1a:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800aa1e:	9500      	str	r5, [sp, #0]
 800aa20:	a803      	add	r0, sp, #12
 800aa22:	f7ff fddf 	bl	800a5e4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800aa26:	7e60      	ldrb	r0, [r4, #25]
 800aa28:	f000 fce6 	bl	800b3f8 <PixelType::ConvertTxH(unsigned char)>
 800aa2c:	6863      	ldr	r3, [r4, #4]
 800aa2e:	4602      	mov	r2, r0
 800aa30:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800aa34:	494c      	ldr	r1, [pc, #304]	; (800ab68 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800aa36:	9500      	str	r5, [sp, #0]
 800aa38:	a803      	add	r0, sp, #12
 800aa3a:	f7ff fdd3 	bl	800a5e4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800aa3e:	494b      	ldr	r1, [pc, #300]	; (800ab6c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800aa40:	a803      	add	r0, sp, #12
 800aa42:	f006 fc69 	bl	8011318 <PropertiesBuilder::AddComment(char const*)>
 800aa46:	6863      	ldr	r3, [r4, #4]
 800aa48:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 800aa4c:	4948      	ldr	r1, [pc, #288]	; (800ab70 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x214>)
 800aa4e:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800aa52:	a803      	add	r0, sp, #12
 800aa54:	f7ff fd76 	bl	800a544 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800aa58:	4946      	ldr	r1, [pc, #280]	; (800ab74 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x218>)
 800aa5a:	a803      	add	r0, sp, #12
 800aa5c:	f006 fc5c 	bl	8011318 <PropertiesBuilder::AddComment(char const*)>
 800aa60:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800aa64:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800aa68:	42a9      	cmp	r1, r5
 800aa6a:	d224      	bcs.n	800aab6 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x15a>
 800aa6c:	9803      	ldr	r0, [sp, #12]
 800aa6e:	1a6d      	subs	r5, r5, r1
 800aa70:	4408      	add	r0, r1
 800aa72:	6861      	ldr	r1, [r4, #4]
 800aa74:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800aa78:	06c9      	lsls	r1, r1, #27
 800aa7a:	f8d4 300e 	ldr.w	r3, [r4, #14]
 800aa7e:	d40b      	bmi.n	800aa98 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x13c>
 800aa80:	b962      	cbnz	r2, 800aa9c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x140>
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	4a3c      	ldr	r2, [pc, #240]	; (800ab78 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x21c>)
 800aa86:	4b3d      	ldr	r3, [pc, #244]	; (800ab7c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800aa88:	e00b      	b.n	800aaa2 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x146>
 800aa8a:	6823      	ldr	r3, [r4, #0]
 800aa8c:	4601      	mov	r1, r0
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	4618      	mov	r0, r3
 800aa92:	68d2      	ldr	r2, [r2, #12]
 800aa94:	4790      	blx	r2
 800aa96:	e76d      	b.n	800a974 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x18>
 800aa98:	2a00      	cmp	r2, #0
 800aa9a:	d053      	beq.n	800ab44 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1e8>
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	4a38      	ldr	r2, [pc, #224]	; (800ab80 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800aaa0:	4b36      	ldr	r3, [pc, #216]	; (800ab7c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	f7fe f87e 	bl	8008ba4 <snprintf>
 800aaa8:	4285      	cmp	r5, r0
 800aaaa:	bfa2      	ittt	ge
 800aaac:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800aab0:	18c0      	addge	r0, r0, r3
 800aab2:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800aab6:	4933      	ldr	r1, [pc, #204]	; (800ab84 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x228>)
 800aab8:	a803      	add	r0, sp, #12
 800aaba:	f006 fc2d 	bl	8011318 <PropertiesBuilder::AddComment(char const*)>
 800aabe:	6863      	ldr	r3, [r4, #4]
 800aac0:	7ca2      	ldrb	r2, [r4, #18]
 800aac2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800aac6:	4930      	ldr	r1, [pc, #192]	; (800ab88 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x22c>)
 800aac8:	a803      	add	r0, sp, #12
 800aaca:	f7ff fd13 	bl	800a4f4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800aace:	492f      	ldr	r1, [pc, #188]	; (800ab8c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x230>)
 800aad0:	a803      	add	r0, sp, #12
 800aad2:	f006 fc21 	bl	8011318 <PropertiesBuilder::AddComment(char const*)>
 800aad6:	6863      	ldr	r3, [r4, #4]
 800aad8:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 800aadc:	492c      	ldr	r1, [pc, #176]	; (800ab90 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x234>)
 800aade:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800aae2:	a803      	add	r0, sp, #12
 800aae4:	f7ff fd2e 	bl	800a544 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800aae8:	6863      	ldr	r3, [r4, #4]
 800aaea:	8b62      	ldrh	r2, [r4, #26]
 800aaec:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800aaf0:	4928      	ldr	r1, [pc, #160]	; (800ab94 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x238>)
 800aaf2:	a803      	add	r0, sp, #12
 800aaf4:	f7ff fd26 	bl	800a544 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800aaf8:	4927      	ldr	r1, [pc, #156]	; (800ab98 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x23c>)
 800aafa:	a803      	add	r0, sp, #12
 800aafc:	f006 fc0c 	bl	8011318 <PropertiesBuilder::AddComment(char const*)>
 800ab00:	6863      	ldr	r3, [r4, #4]
 800ab02:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800ab06:	f3c3 5300 	ubfx	r3, r3, #20, #1
 800ab0a:	4924      	ldr	r1, [pc, #144]	; (800ab9c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x240>)
 800ab0c:	a803      	add	r0, sp, #12
 800ab0e:	f7ff fcf1 	bl	800a4f4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800ab12:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ab16:	b17b      	cbz	r3, 800ab38 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1dc>
 800ab18:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	227d      	movs	r2, #125	; 0x7d
 800ab22:	f803 2c01 	strb.w	r2, [r3, #-1]
 800ab26:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ab2a:	9903      	ldr	r1, [sp, #12]
 800ab2c:	54ca      	strb	r2, [r1, r3]
 800ab2e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ab32:	3301      	adds	r3, #1
 800ab34:	f8ad 3012 	strh.w	r3, [sp, #18]
 800ab38:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ab3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	b006      	add	sp, #24
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	4a16      	ldr	r2, [pc, #88]	; (800aba0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x244>)
 800ab48:	4b0c      	ldr	r3, [pc, #48]	; (800ab7c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800ab4a:	e7aa      	b.n	800aaa2 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x146>
 800ab4c:	08015b87 	stmdaeq	r1, {r0, r1, r2, r7, r8, r9, fp, ip, lr}
 800ab50:	08015b64 	stmdaeq	r1, {r2, r5, r6, r8, r9, fp, ip, lr}
 800ab54:	08015b6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, fp, ip, lr}
 800ab58:	0801444d 	stmdaeq	r1, {r0, r2, r3, r6, sl, lr}
 800ab5c:	08015b54 	stmdaeq	r1, {r2, r4, r6, r8, r9, fp, ip, lr}
 800ab60:	08014461 	stmdaeq	r1, {r0, r5, r6, sl, lr}
 800ab64:	08015b77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, fp, ip, lr}
 800ab68:	08015b7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, r9, fp, ip, lr}
 800ab6c:	08014477 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, lr}
 800ab70:	08015b32 	stmdaeq	r1, {r1, r4, r5, r8, r9, fp, ip, lr}
 800ab74:	08014480 	stmdaeq	r1, {r7, sl, lr}
 800ab78:	08014303 	stmdaeq	r1, {r0, r1, r8, r9, lr}
 800ab7c:	08015b23 	stmdaeq	r1, {r0, r1, r5, r8, r9, fp, ip, lr}
 800ab80:	080142fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, lr}
 800ab84:	08014492 	stmdaeq	r1, {r1, r4, r7, sl, lr}
 800ab88:	08015b42 	stmdaeq	r1, {r1, r6, r8, r9, fp, ip, lr}
 800ab8c:	08015b15 	stmdaeq	r1, {r0, r2, r4, r8, r9, fp, ip, lr}
 800ab90:	08015ce5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sl, fp, ip, lr}
 800ab94:	08015c0d 	stmdaeq	r1, {r0, r2, r3, sl, fp, ip, lr}
 800ab98:	080144a0 	stmdaeq	r1, {r5, r7, sl, lr}
 800ab9c:	08015bc0 	stmdaeq	r1, {r6, r7, r8, r9, fp, ip, lr}
 800aba0:	08014304 	stmdaeq	r1, {r2, r8, r9, lr}

0800aba4 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>:
 800aba4:	b513      	push	{r0, r1, r4, lr}
 800aba6:	6804      	ldr	r4, [r0, #0]
 800aba8:	b914      	cbnz	r4, 800abb0 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800abaa:	601c      	str	r4, [r3, #0]
 800abac:	b002      	add	sp, #8
 800abae:	bd10      	pop	{r4, pc}
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	4613      	mov	r3, r2
 800abb4:	460a      	mov	r2, r1
 800abb6:	2100      	movs	r1, #0
 800abb8:	f7ff fed0 	bl	800a95c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>
 800abbc:	e7f6      	b.n	800abac <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800abbe <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 800abbe:	6843      	ldr	r3, [r0, #4]
 800abc0:	07da      	lsls	r2, r3, #31
 800abc2:	bf44      	itt	mi
 800abc4:	7a02      	ldrbmi	r2, [r0, #8]
 800abc6:	600a      	strmi	r2, [r1, #0]
 800abc8:	079a      	lsls	r2, r3, #30
 800abca:	d505      	bpl.n	800abd8 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 800abcc:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800abd0:	2a00      	cmp	r2, #0
 800abd2:	bf08      	it	eq
 800abd4:	22aa      	moveq	r2, #170	; 0xaa
 800abd6:	604a      	str	r2, [r1, #4]
 800abd8:	059a      	lsls	r2, r3, #22
 800abda:	bf44      	itt	mi
 800abdc:	7dc2      	ldrbmi	r2, [r0, #23]
 800abde:	608a      	strmi	r2, [r1, #8]
 800abe0:	055a      	lsls	r2, r3, #21
 800abe2:	bf44      	itt	mi
 800abe4:	7e02      	ldrbmi	r2, [r0, #24]
 800abe6:	740a      	strbmi	r2, [r1, #16]
 800abe8:	051a      	lsls	r2, r3, #20
 800abea:	bf44      	itt	mi
 800abec:	7e42      	ldrbmi	r2, [r0, #25]
 800abee:	744a      	strbmi	r2, [r1, #17]
 800abf0:	06da      	lsls	r2, r3, #27
 800abf2:	bf44      	itt	mi
 800abf4:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 800abf8:	60ca      	strmi	r2, [r1, #12]
 800abfa:	069a      	lsls	r2, r3, #26
 800abfc:	bf44      	itt	mi
 800abfe:	7c82      	ldrbmi	r2, [r0, #18]
 800ac00:	748a      	strbmi	r2, [r1, #18]
 800ac02:	075a      	lsls	r2, r3, #29
 800ac04:	d50b      	bpl.n	800ac1e <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x60>
 800ac06:	7ac2      	ldrb	r2, [r0, #11]
 800ac08:	b510      	push	{r4, lr}
 800ac0a:	7b04      	ldrb	r4, [r0, #12]
 800ac0c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800ac10:	838a      	strh	r2, [r1, #28]
 800ac12:	05da      	lsls	r2, r3, #23
 800ac14:	bf44      	itt	mi
 800ac16:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800ac1a:	618b      	strmi	r3, [r1, #24]
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	05db      	lsls	r3, r3, #23
 800ac20:	bf44      	itt	mi
 800ac22:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800ac26:	618b      	strmi	r3, [r1, #24]
 800ac28:	4770      	bx	lr

0800ac2a <WS28xxDmxParams::Dump()>:
 800ac2a:	4770      	bx	lr

0800ac2c <WS28xxDmx::Print()>:
 800ac2c:	b510      	push	{r4, lr}
 800ac2e:	4604      	mov	r4, r0
 800ac30:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800ac32:	f000 fc5b 	bl	800b4ec <WS28xx::Print()>
 800ac36:	4805      	ldr	r0, [pc, #20]	; (800ac4c <WS28xxDmx::Print()+0x20>)
 800ac38:	f7fd ff8c 	bl	8008b54 <printf>
 800ac3c:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800ac40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac44:	4802      	ldr	r0, [pc, #8]	; (800ac50 <WS28xxDmx::Print()+0x24>)
 800ac46:	f7fd bf85 	b.w	8008b54 <printf>
 800ac4a:	bf00      	nop
 800ac4c:	080144ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, sl, lr}
 800ac50:	080144c3 	stmdaeq	r1, {r0, r1, r6, r7, sl, lr}

0800ac54 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 800ac54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac58:	460e      	mov	r6, r1
 800ac5a:	4611      	mov	r1, r2
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	4690      	mov	r8, r2
 800ac60:	461d      	mov	r5, r3
 800ac62:	9f06      	ldr	r7, [sp, #24]
 800ac64:	f000 f86c 	bl	800ad40 <PixelConfiguration::Validate(unsigned int&)>
 800ac68:	2e01      	cmp	r6, #1
 800ac6a:	d009      	beq.n	800ac80 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800ac6c:	7ce2      	ldrb	r2, [r4, #19]
 800ac6e:	b93a      	cbnz	r2, 800ac80 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800ac70:	2e04      	cmp	r6, #4
 800ac72:	d13f      	bne.n	800acf4 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0xa0>
 800ac74:	2303      	movs	r3, #3
 800ac76:	6023      	str	r3, [r4, #0]
 800ac78:	4641      	mov	r1, r8
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 f860 	bl	800ad40 <PixelConfiguration::Validate(unsigned int&)>
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	2b07      	cmp	r3, #7
 800ac84:	bf0d      	iteet	eq
 800ac86:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800ac8a:	f44f 73aa 	movne.w	r3, #340	; 0x154
 800ac8e:	22aa      	movne	r2, #170	; 0xaa
 800ac90:	2180      	moveq	r1, #128	; 0x80
 800ac92:	bf15      	itete	ne
 800ac94:	e9c5 2300 	strdne	r2, r3, [r5]
 800ac98:	e9c5 1300 	strdeq	r1, r3, [r5]
 800ac9c:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 800aca0:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 800aca4:	69a2      	ldr	r2, [r4, #24]
 800aca6:	60ab      	str	r3, [r5, #8]
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	b10a      	cbz	r2, 800acb0 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5c>
 800acac:	429a      	cmp	r2, r3
 800acae:	d900      	bls.n	800acb2 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5e>
 800acb0:	61a3      	str	r3, [r4, #24]
 800acb2:	69a2      	ldr	r2, [r4, #24]
 800acb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800acb8:	603b      	str	r3, [r7, #0]
 800acba:	6963      	ldr	r3, [r4, #20]
 800acbc:	682a      	ldr	r2, [r5, #0]
 800acbe:	42b3      	cmp	r3, r6
 800acc0:	bf94      	ite	ls
 800acc2:	6163      	strls	r3, [r4, #20]
 800acc4:	6166      	strhi	r6, [r4, #20]
 800acc6:	1c53      	adds	r3, r2, #1
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	2e01      	cmp	r6, #1
 800accc:	fbb2 f2f3 	udiv	r2, r2, r3
 800acd0:	9b07      	ldr	r3, [sp, #28]
 800acd2:	f102 0201 	add.w	r2, r2, #1
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	bf09      	itett	eq
 800acda:	682a      	ldreq	r2, [r5, #0]
 800acdc:	6963      	ldrne	r3, [r4, #20]
 800acde:	1c53      	addeq	r3, r2, #1
 800ace0:	683a      	ldreq	r2, [r7, #0]
 800ace2:	bf16      	itet	ne
 800ace4:	435a      	mulne	r2, r3
 800ace6:	fbb2 f2f3 	udiveq	r2, r2, r3
 800acea:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 800acee:	60ea      	str	r2, [r5, #12]
 800acf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d0be      	beq.n	800ac78 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 800acfa:	3b0b      	subs	r3, #11
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	bf88      	it	hi
 800ad00:	6022      	strhi	r2, [r4, #0]
 800ad02:	e7b9      	b.n	800ac78 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

0800ad04 <PixelDmxConfiguration::Dump()>:
 800ad04:	4770      	bx	lr

0800ad06 <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 800ad06:	f020 0308 	bic.w	r3, r0, #8
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d006      	beq.n	800ad1c <PixelConfiguration::GetRgbMapping(pixel::Type)+0x16>
 800ad0e:	2808      	cmp	r0, #8
 800ad10:	d006      	beq.n	800ad20 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x1a>
 800ad12:	280a      	cmp	r0, #10
 800ad14:	bf14      	ite	ne
 800ad16:	2002      	movne	r0, #2
 800ad18:	2005      	moveq	r0, #5
 800ad1a:	4770      	bx	lr
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	4770      	bx	lr
 800ad20:	2004      	movs	r0, #4
 800ad22:	4770      	bx	lr

0800ad24 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 800ad24:	23c0      	movs	r3, #192	; 0xc0
 800ad26:	2803      	cmp	r0, #3
 800ad28:	700b      	strb	r3, [r1, #0]
 800ad2a:	d006      	beq.n	800ad3a <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 800ad2c:	3808      	subs	r0, #8
 800ad2e:	2803      	cmp	r0, #3
 800ad30:	bf34      	ite	cc
 800ad32:	23fc      	movcc	r3, #252	; 0xfc
 800ad34:	23f0      	movcs	r3, #240	; 0xf0
 800ad36:	7013      	strb	r3, [r2, #0]
 800ad38:	4770      	bx	lr
 800ad3a:	23f8      	movs	r3, #248	; 0xf8
 800ad3c:	e7fb      	b.n	800ad36 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

0800ad40 <PixelConfiguration::Validate(unsigned int&)>:
 800ad40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad42:	e9d0 5300 	ldrd	r5, r3, [r0]
 800ad46:	2d07      	cmp	r5, #7
 800ad48:	4604      	mov	r4, r0
 800ad4a:	6882      	ldr	r2, [r0, #8]
 800ad4c:	d129      	bne.n	800ada2 <PixelConfiguration::Validate(unsigned int&)+0x62>
 800ad4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad52:	bf28      	it	cs
 800ad54:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800ad58:	6043      	str	r3, [r0, #4]
 800ad5a:	2304      	movs	r3, #4
 800ad5c:	600b      	str	r3, [r1, #0]
 800ad5e:	2301      	movs	r3, #1
 800ad60:	2a06      	cmp	r2, #6
 800ad62:	74e3      	strb	r3, [r4, #19]
 800ad64:	d103      	bne.n	800ad6e <PixelConfiguration::Validate(unsigned int&)+0x2e>
 800ad66:	4628      	mov	r0, r5
 800ad68:	f7ff ffcd 	bl	800ad06 <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800ad6c:	60a0      	str	r0, [r4, #8]
 800ad6e:	7c63      	ldrb	r3, [r4, #17]
 800ad70:	7c22      	ldrb	r2, [r4, #16]
 800ad72:	4628      	mov	r0, r5
 800ad74:	429a      	cmp	r2, r3
 800ad76:	bf28      	it	cs
 800ad78:	2300      	movcs	r3, #0
 800ad7a:	f10d 0207 	add.w	r2, sp, #7
 800ad7e:	bf28      	it	cs
 800ad80:	8223      	strhcs	r3, [r4, #16]
 800ad82:	f10d 0106 	add.w	r1, sp, #6
 800ad86:	f7ff ffcd 	bl	800ad24 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800ad8a:	7c23      	ldrb	r3, [r4, #16]
 800ad8c:	b913      	cbnz	r3, 800ad94 <PixelConfiguration::Validate(unsigned int&)+0x54>
 800ad8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ad92:	7423      	strb	r3, [r4, #16]
 800ad94:	7c63      	ldrb	r3, [r4, #17]
 800ad96:	b913      	cbnz	r3, 800ad9e <PixelConfiguration::Validate(unsigned int&)+0x5e>
 800ad98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ad9c:	7463      	strb	r3, [r4, #17]
 800ad9e:	4b1a      	ldr	r3, [pc, #104]	; (800ae08 <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 800ada0:	e020      	b.n	800ade4 <PixelConfiguration::Validate(unsigned int&)+0xa4>
 800ada2:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800ada6:	bf28      	it	cs
 800ada8:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 800adac:	6043      	str	r3, [r0, #4]
 800adae:	2303      	movs	r3, #3
 800adb0:	600b      	str	r3, [r1, #0]
 800adb2:	f1a5 030b 	sub.w	r3, r5, #11
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d806      	bhi.n	800adc8 <PixelConfiguration::Validate(unsigned int&)+0x88>
 800adba:	7c83      	ldrb	r3, [r0, #18]
 800adbc:	2b1f      	cmp	r3, #31
 800adbe:	d81d      	bhi.n	800adfc <PixelConfiguration::Validate(unsigned int&)+0xbc>
 800adc0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800adc4:	74a3      	strb	r3, [r4, #18]
 800adc6:	e000      	b.n	800adca <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800adc8:	b9d5      	cbnz	r5, 800ae00 <PixelConfiguration::Validate(unsigned int&)+0xc0>
 800adca:	2300      	movs	r3, #0
 800adcc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800add0:	2a06      	cmp	r2, #6
 800add2:	bf08      	it	eq
 800add4:	60a3      	streq	r3, [r4, #8]
 800add6:	2d0d      	cmp	r5, #13
 800add8:	74e3      	strb	r3, [r4, #19]
 800adda:	8221      	strh	r1, [r4, #16]
 800addc:	68e3      	ldr	r3, [r4, #12]
 800adde:	d109      	bne.n	800adf4 <PixelConfiguration::Validate(unsigned int&)+0xb4>
 800ade0:	b913      	cbnz	r3, 800ade8 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 800ade2:	4b0a      	ldr	r3, [pc, #40]	; (800ae0c <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 800ade4:	60e3      	str	r3, [r4, #12]
 800ade6:	e003      	b.n	800adf0 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800ade8:	4a09      	ldr	r2, [pc, #36]	; (800ae10 <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d900      	bls.n	800adf0 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800adee:	60e2      	str	r2, [r4, #12]
 800adf0:	b003      	add	sp, #12
 800adf2:	bd30      	pop	{r4, r5, pc}
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0f4      	beq.n	800ade2 <PixelConfiguration::Validate(unsigned int&)+0xa2>
 800adf8:	4a06      	ldr	r2, [pc, #24]	; (800ae14 <PixelConfiguration::Validate(unsigned int&)+0xd4>)
 800adfa:	e7f6      	b.n	800adea <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800adfc:	23ff      	movs	r3, #255	; 0xff
 800adfe:	e7e1      	b.n	800adc4 <PixelConfiguration::Validate(unsigned int&)+0x84>
 800ae00:	2d0d      	cmp	r5, #13
 800ae02:	d0e2      	beq.n	800adca <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800ae04:	e7ab      	b.n	800ad5e <PixelConfiguration::Validate(unsigned int&)+0x1e>
 800ae06:	bf00      	nop
 800ae08:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 800ae0c:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800ae10:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 800ae14:	017d7840 	cmneq	sp, r0, asr #16

0800ae18 <PixelConfiguration::Dump()>:
 800ae18:	4770      	bx	lr
	...

0800ae1c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>:
 800ae1c:	b507      	push	{r0, r1, r2, lr}
 800ae1e:	b2cb      	uxtb	r3, r1
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800ae26:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800ae2a:	4601      	mov	r1, r0
 800ae2c:	4803      	ldr	r0, [pc, #12]	; (800ae3c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]+0x20>)
 800ae2e:	6800      	ldr	r0, [r0, #0]
 800ae30:	f000 fb9e 	bl	800b570 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800ae34:	b003      	add	sp, #12
 800ae36:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae3a:	bf00      	nop
 800ae3c:	20001938 	andcs	r1, r0, r8, lsr r9

0800ae40 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	2400      	movs	r4, #0
 800ae44:	4d05      	ldr	r5, [pc, #20]	; (800ae5c <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 800ae46:	682b      	ldr	r3, [r5, #0]
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	d905      	bls.n	800ae58 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x18>
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	2100      	movs	r1, #0
 800ae50:	f7ff ffe4 	bl	800ae1c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800ae54:	3401      	adds	r4, #1
 800ae56:	e7f6      	b.n	800ae46 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 800ae58:	bd38      	pop	{r3, r4, r5, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20001934 	andcs	r1, r0, r4, lsr r9

0800ae60 <PixelPatterns::PixelPatterns(unsigned int)>:
 800ae60:	2901      	cmp	r1, #1
 800ae62:	bf28      	it	cs
 800ae64:	2101      	movcs	r1, #1
 800ae66:	4b08      	ldr	r3, [pc, #32]	; (800ae88 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 800ae68:	4a08      	ldr	r2, [pc, #32]	; (800ae8c <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6013      	str	r3, [r2, #0]
 800ae6e:	4a08      	ldr	r2, [pc, #32]	; (800ae90 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 800ae70:	6011      	str	r1, [r2, #0]
 800ae72:	685a      	ldr	r2, [r3, #4]
 800ae74:	4b07      	ldr	r3, [pc, #28]	; (800ae94 <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800ae76:	601a      	str	r2, [r3, #0]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	4b07      	ldr	r3, [pc, #28]	; (800ae98 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 800ae7c:	6819      	ldr	r1, [r3, #0]
 800ae7e:	4b07      	ldr	r3, [pc, #28]	; (800ae9c <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 800ae80:	61da      	str	r2, [r3, #28]
 800ae82:	6019      	str	r1, [r3, #0]
 800ae84:	619a      	str	r2, [r3, #24]
 800ae86:	4770      	bx	lr
 800ae88:	20001944 	andcs	r1, r0, r4, asr #18
 800ae8c:	20001938 	andcs	r1, r0, r8, lsr r9
 800ae90:	2000192c 	andcs	r1, r0, ip, lsr #18
 800ae94:	20001934 	andcs	r1, r0, r4, lsr r9
 800ae98:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800ae9c:	2000190c 	andcs	r1, r0, ip, lsl #18

0800aea0 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 800aea0:	2805      	cmp	r0, #5
 800aea2:	bfdd      	ittte	le
 800aea4:	220e      	movle	r2, #14
 800aea6:	4b02      	ldrle	r3, [pc, #8]	; (800aeb0 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 800aea8:	fb02 3000 	mlale	r0, r2, r0, r3
 800aeac:	4801      	ldrgt	r0, [pc, #4]	; (800aeb4 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 800aeae:	4770      	bx	lr
 800aeb0:	080144ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, sl, lr}
 800aeb4:	080144e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, sl, lr}

0800aeb8 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	460e      	mov	r6, r1
 800aebc:	4615      	mov	r5, r2
 800aebe:	461c      	mov	r4, r3
 800aec0:	f7ff ffbe 	bl	800ae40 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800aec4:	2301      	movs	r3, #1
 800aec6:	4905      	ldr	r1, [pc, #20]	; (800aedc <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 800aec8:	22ff      	movs	r2, #255	; 0xff
 800aeca:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800aece:	61cb      	str	r3, [r1, #28]
 800aed0:	2300      	movs	r3, #0
 800aed2:	604d      	str	r5, [r1, #4]
 800aed4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800aed8:	618c      	str	r4, [r1, #24]
 800aeda:	bd70      	pop	{r4, r5, r6, pc}
 800aedc:	2000190c 	andcs	r1, r0, ip, lsl #18

0800aee0 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800aee0:	b570      	push	{r4, r5, r6, lr}
 800aee2:	460e      	mov	r6, r1
 800aee4:	461c      	mov	r4, r3
 800aee6:	4615      	mov	r5, r2
 800aee8:	f7ff ffaa 	bl	800ae40 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800aeec:	2302      	movs	r3, #2
 800aeee:	4908      	ldr	r1, [pc, #32]	; (800af10 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800aef0:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800aef4:	61cb      	str	r3, [r1, #28]
 800aef6:	9b04      	ldr	r3, [sp, #16]
 800aef8:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800aefc:	604b      	str	r3, [r1, #4]
 800aefe:	4b05      	ldr	r3, [pc, #20]	; (800af14 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	610b      	str	r3, [r1, #16]
 800af04:	2300      	movs	r3, #0
 800af06:	614b      	str	r3, [r1, #20]
 800af08:	9b05      	ldr	r3, [sp, #20]
 800af0a:	618b      	str	r3, [r1, #24]
 800af0c:	bd70      	pop	{r4, r5, r6, pc}
 800af0e:	bf00      	nop
 800af10:	2000190c 	andcs	r1, r0, ip, lsl #18
 800af14:	20001934 	andcs	r1, r0, r4, lsr r9

0800af18 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800af18:	b570      	push	{r4, r5, r6, lr}
 800af1a:	460e      	mov	r6, r1
 800af1c:	461d      	mov	r5, r3
 800af1e:	4614      	mov	r4, r2
 800af20:	f7ff ff8e 	bl	800ae40 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800af24:	2303      	movs	r3, #3
 800af26:	4907      	ldr	r1, [pc, #28]	; (800af44 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800af28:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800af2c:	61cb      	str	r3, [r1, #28]
 800af2e:	4b06      	ldr	r3, [pc, #24]	; (800af48 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800af30:	604d      	str	r5, [r1, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	608c      	str	r4, [r1, #8]
 800af36:	610b      	str	r3, [r1, #16]
 800af38:	2300      	movs	r3, #0
 800af3a:	614b      	str	r3, [r1, #20]
 800af3c:	9b04      	ldr	r3, [sp, #16]
 800af3e:	618b      	str	r3, [r1, #24]
 800af40:	bd70      	pop	{r4, r5, r6, pc}
 800af42:	bf00      	nop
 800af44:	2000190c 	andcs	r1, r0, ip, lsl #18
 800af48:	20001934 	andcs	r1, r0, r4, lsr r9

0800af4c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	460e      	mov	r6, r1
 800af50:	461d      	mov	r5, r3
 800af52:	4614      	mov	r4, r2
 800af54:	f7ff ff74 	bl	800ae40 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800af58:	2304      	movs	r3, #4
 800af5a:	4912      	ldr	r1, [pc, #72]	; (800afa4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 800af5c:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800af60:	604d      	str	r5, [r1, #4]
 800af62:	4d11      	ldr	r5, [pc, #68]	; (800afa8 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 800af64:	61cb      	str	r3, [r1, #28]
 800af66:	6828      	ldr	r0, [r5, #0]
 800af68:	608c      	str	r4, [r1, #8]
 800af6a:	1e43      	subs	r3, r0, #1
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	b29b      	uxth	r3, r3
 800af70:	610b      	str	r3, [r1, #16]
 800af72:	2300      	movs	r3, #0
 800af74:	4c0d      	ldr	r4, [pc, #52]	; (800afac <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 800af76:	614b      	str	r3, [r1, #20]
 800af78:	6823      	ldr	r3, [r4, #0]
 800af7a:	b993      	cbnz	r3, 800afa2 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 800af7c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800af80:	4298      	cmp	r0, r3
 800af82:	bf2c      	ite	cs
 800af84:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 800af88:	0080      	lslcc	r0, r0, #2
 800af8a:	f006 ff93 	bl	8011eb4 <operator new[](unsigned int)>
 800af8e:	2200      	movs	r2, #0
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	6020      	str	r0, [r4, #0]
 800af94:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800af98:	4298      	cmp	r0, r3
 800af9a:	d002      	beq.n	800afa2 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 800af9c:	f840 2b04 	str.w	r2, [r0], #4
 800afa0:	e7fa      	b.n	800af98 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 800afa2:	bd70      	pop	{r4, r5, r6, pc}
 800afa4:	2000190c 	andcs	r1, r0, ip, lsl #18
 800afa8:	20001934 	andcs	r1, r0, r4, lsr r9
 800afac:	20001930 	andcs	r1, r0, r0, lsr r9

0800afb0 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800afb0:	b570      	push	{r4, r5, r6, lr}
 800afb2:	460e      	mov	r6, r1
 800afb4:	461c      	mov	r4, r3
 800afb6:	4615      	mov	r5, r2
 800afb8:	f7ff ff42 	bl	800ae40 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800afbc:	2305      	movs	r3, #5
 800afbe:	4907      	ldr	r1, [pc, #28]	; (800afdc <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800afc0:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800afc4:	61cb      	str	r3, [r1, #28]
 800afc6:	9b05      	ldr	r3, [sp, #20]
 800afc8:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800afcc:	604b      	str	r3, [r1, #4]
 800afce:	9b04      	ldr	r3, [sp, #16]
 800afd0:	610b      	str	r3, [r1, #16]
 800afd2:	2300      	movs	r3, #0
 800afd4:	614b      	str	r3, [r1, #20]
 800afd6:	9b06      	ldr	r3, [sp, #24]
 800afd8:	618b      	str	r3, [r1, #24]
 800afda:	bd70      	pop	{r4, r5, r6, pc}
 800afdc:	2000190c 	andcs	r1, r0, ip, lsl #18

0800afe0 <PixelPatterns::Wheel(unsigned char)>:
 800afe0:	43c9      	mvns	r1, r1
 800afe2:	b2c9      	uxtb	r1, r1
 800afe4:	2954      	cmp	r1, #84	; 0x54
 800afe6:	d809      	bhi.n	800affc <PixelPatterns::Wheel(unsigned char)+0x1c>
 800afe8:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 800afec:	3801      	subs	r0, #1
 800afee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800aff2:	b2c3      	uxtb	r3, r0
 800aff4:	b2c8      	uxtb	r0, r1
 800aff6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800affa:	4770      	bx	lr
 800affc:	29a9      	cmp	r1, #169	; 0xa9
 800affe:	d80b      	bhi.n	800b018 <PixelPatterns::Wheel(unsigned char)+0x38>
 800b000:	3955      	subs	r1, #85	; 0x55
 800b002:	b2c9      	uxtb	r1, r1
 800b004:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800b008:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
 800b00c:	b2c3      	uxtb	r3, r0
 800b00e:	1e48      	subs	r0, r1, #1
 800b010:	b2c0      	uxtb	r0, r0
 800b012:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800b016:	4770      	bx	lr
 800b018:	3156      	adds	r1, #86	; 0x56
 800b01a:	b2c9      	uxtb	r1, r1
 800b01c:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 800b020:	3801      	subs	r0, #1
 800b022:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b026:	b2c3      	uxtb	r3, r0
 800b028:	b2c8      	uxtb	r0, r1
 800b02a:	0400      	lsls	r0, r0, #16
 800b02c:	e7f1      	b.n	800b012 <PixelPatterns::Wheel(unsigned char)+0x32>
	...

0800b030 <PixelPatterns::Increment(unsigned int)>:
 800b030:	4a0d      	ldr	r2, [pc, #52]	; (800b068 <PixelPatterns::Increment(unsigned int)+0x38>)
 800b032:	b510      	push	{r4, lr}
 800b034:	014c      	lsls	r4, r1, #5
 800b036:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800b03a:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800b03e:	b930      	cbnz	r0, 800b04e <PixelPatterns::Increment(unsigned int)+0x1e>
 800b040:	690a      	ldr	r2, [r1, #16]
 800b042:	3301      	adds	r3, #1
 800b044:	4293      	cmp	r3, r2
 800b046:	bf18      	it	ne
 800b048:	4618      	movne	r0, r3
 800b04a:	6148      	str	r0, [r1, #20]
 800b04c:	bd10      	pop	{r4, pc}
 800b04e:	b92b      	cbnz	r3, 800b05c <PixelPatterns::Increment(unsigned int)+0x2c>
 800b050:	4422      	add	r2, r4
 800b052:	6913      	ldr	r3, [r2, #16]
 800b054:	3b01      	subs	r3, #1
 800b056:	b29b      	uxth	r3, r3
 800b058:	6153      	str	r3, [r2, #20]
 800b05a:	e7f7      	b.n	800b04c <PixelPatterns::Increment(unsigned int)+0x1c>
 800b05c:	3b01      	subs	r3, #1
 800b05e:	614b      	str	r3, [r1, #20]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1f3      	bne.n	800b04c <PixelPatterns::Increment(unsigned int)+0x1c>
 800b064:	e7f4      	b.n	800b050 <PixelPatterns::Increment(unsigned int)+0x20>
 800b066:	bf00      	nop
 800b068:	2000190c 	andcs	r1, r0, ip, lsl #18

0800b06c <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 800b06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b070:	4604      	mov	r4, r0
 800b072:	460d      	mov	r5, r1
 800b074:	2600      	movs	r6, #0
 800b076:	4b10      	ldr	r3, [pc, #64]	; (800b0b8 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 800b078:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800b0bc <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 800b07c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b080:	695f      	ldr	r7, [r3, #20]
 800b082:	f8d8 1000 	ldr.w	r1, [r8]
 800b086:	b2b2      	uxth	r2, r6
 800b088:	4291      	cmp	r1, r2
 800b08a:	f106 0601 	add.w	r6, r6, #1
 800b08e:	d90c      	bls.n	800b0aa <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x3e>
 800b090:	0213      	lsls	r3, r2, #8
 800b092:	fbb3 f3f1 	udiv	r3, r3, r1
 800b096:	443b      	add	r3, r7
 800b098:	b2d9      	uxtb	r1, r3
 800b09a:	4620      	mov	r0, r4
 800b09c:	f7ff ffa0 	bl	800afe0 <PixelPatterns::Wheel(unsigned char)>
 800b0a0:	4601      	mov	r1, r0
 800b0a2:	4610      	mov	r0, r2
 800b0a4:	f7ff feba 	bl	800ae1c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b0a8:	e7eb      	b.n	800b082 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x16>
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b2:	f7ff bfbd 	b.w	800b030 <PixelPatterns::Increment(unsigned int)>
 800b0b6:	bf00      	nop
 800b0b8:	2000190c 	andcs	r1, r0, ip, lsl #18
 800b0bc:	20001934 	andcs	r1, r0, r4, lsr r9

0800b0c0 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 800b0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	f04f 0b00 	mov.w	fp, #0
 800b0cc:	4b12      	ldr	r3, [pc, #72]	; (800b118 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800b0ce:	f8df 904c 	ldr.w	r9, [pc, #76]	; 800b11c <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 800b0d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b0d6:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800b0da:	f8df a044 	ldr.w	sl, [pc, #68]	; 800b120 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x60>
 800b0de:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
 800b0e2:	f8d9 3000 	ldr.w	r3, [r9]
 800b0e6:	fa1f f08b 	uxth.w	r0, fp
 800b0ea:	4283      	cmp	r3, r0
 800b0ec:	d90d      	bls.n	800b10a <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x4a>
 800b0ee:	eb08 0300 	add.w	r3, r8, r0
 800b0f2:	fb0a f303 	mul.w	r3, sl, r3
 800b0f6:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800b0fa:	bf94      	ite	ls
 800b0fc:	4631      	movls	r1, r6
 800b0fe:	4639      	movhi	r1, r7
 800b100:	f7ff fe8c 	bl	800ae1c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b104:	f10b 0b01 	add.w	fp, fp, #1
 800b108:	e7eb      	b.n	800b0e2 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x22>
 800b10a:	4621      	mov	r1, r4
 800b10c:	4628      	mov	r0, r5
 800b10e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b112:	f7ff bf8d 	b.w	800b030 <PixelPatterns::Increment(unsigned int)>
 800b116:	bf00      	nop
 800b118:	2000190c 	andcs	r1, r0, ip, lsl #18
 800b11c:	20001934 	andcs	r1, r0, r4, lsr r9
 800b120:	aaaaaaab 	bge	6ab5bd4 <__stack_size+0x6ab43d4>

0800b124 <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 800b124:	b538      	push	{r3, r4, r5, lr}
 800b126:	4605      	mov	r5, r0
 800b128:	460c      	mov	r4, r1
 800b12a:	4b06      	ldr	r3, [pc, #24]	; (800b144 <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 800b12c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b130:	6899      	ldr	r1, [r3, #8]
 800b132:	6958      	ldr	r0, [r3, #20]
 800b134:	f7ff fe72 	bl	800ae1c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b138:	4621      	mov	r1, r4
 800b13a:	4628      	mov	r0, r5
 800b13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b140:	f7ff bf76 	b.w	800b030 <PixelPatterns::Increment(unsigned int)>
 800b144:	2000190c 	andcs	r1, r0, ip, lsl #18

0800b148 <PixelPatterns::ScannerUpdate(unsigned int)>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	460d      	mov	r5, r1
 800b14e:	f04f 0900 	mov.w	r9, #0
 800b152:	4a27      	ldr	r2, [pc, #156]	; (800b1f0 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 800b154:	b085      	sub	sp, #20
 800b156:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800b15a:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 800b15e:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800b162:	00b3      	lsls	r3, r6, #2
 800b164:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800b1f4 <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 800b168:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800b1f8 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 800b16c:	9002      	str	r0, [sp, #8]
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	1bbf      	subs	r7, r7, r6
 800b172:	f8db 1000 	ldr.w	r1, [fp]
 800b176:	fa1f f489 	uxth.w	r4, r9
 800b17a:	42a1      	cmp	r1, r4
 800b17c:	d930      	bls.n	800b1e0 <PixelPatterns::ScannerUpdate(unsigned int)+0x98>
 800b17e:	42a6      	cmp	r6, r4
 800b180:	d10b      	bne.n	800b19a <PixelPatterns::ScannerUpdate(unsigned int)+0x52>
 800b182:	4651      	mov	r1, sl
 800b184:	4630      	mov	r0, r6
 800b186:	f7ff fe49 	bl	800ae1c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b18a:	f8d8 1000 	ldr.w	r1, [r8]
 800b18e:	9b01      	ldr	r3, [sp, #4]
 800b190:	f841 a003 	str.w	sl, [r1, r3]
 800b194:	f109 0901 	add.w	r9, r9, #1
 800b198:	e7eb      	b.n	800b172 <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 800b19a:	42a7      	cmp	r7, r4
 800b19c:	d108      	bne.n	800b1b0 <PixelPatterns::ScannerUpdate(unsigned int)+0x68>
 800b19e:	4651      	mov	r1, sl
 800b1a0:	4638      	mov	r0, r7
 800b1a2:	f7ff fe3b 	bl	800ae1c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b1a6:	f8d8 1000 	ldr.w	r1, [r8]
 800b1aa:	f841 a024 	str.w	sl, [r1, r4, lsl #2]
 800b1ae:	e7f1      	b.n	800b194 <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 800b1b0:	f8d8 1000 	ldr.w	r1, [r8]
 800b1b4:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800b1b8:	f3c0 2146 	ubfx	r1, r0, #9, #7
 800b1bc:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 800b1c0:	0209      	lsls	r1, r1, #8
 800b1c2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800b1c6:	f3c0 0046 	ubfx	r0, r0, #1, #7
 800b1ca:	4301      	orrs	r1, r0
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	9103      	str	r1, [sp, #12]
 800b1d0:	f7ff fe24 	bl	800ae1c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b1d4:	f8d8 0000 	ldr.w	r0, [r8]
 800b1d8:	9903      	ldr	r1, [sp, #12]
 800b1da:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800b1de:	e7d9      	b.n	800b194 <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	9802      	ldr	r0, [sp, #8]
 800b1e4:	b005      	add	sp, #20
 800b1e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ea:	f7ff bf21 	b.w	800b030 <PixelPatterns::Increment(unsigned int)>
 800b1ee:	bf00      	nop
 800b1f0:	2000190c 	andcs	r1, r0, ip, lsl #18
 800b1f4:	20001934 	andcs	r1, r0, r4, lsr r9
 800b1f8:	20001930 	andcs	r1, r0, r0, lsr r9

0800b1fc <PixelPatterns::FadeUpdate(unsigned int)>:
 800b1fc:	4a21      	ldr	r2, [pc, #132]	; (800b284 <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 800b1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b202:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800b206:	4605      	mov	r5, r0
 800b208:	e9d2 3002 	ldrd	r3, r0, [r2, #8]
 800b20c:	460c      	mov	r4, r1
 800b20e:	e9d2 6104 	ldrd	r6, r1, [r2, #16]
 800b212:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800b216:	434a      	muls	r2, r1
 800b218:	1a77      	subs	r7, r6, r1
 800b21a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800b21e:	fb07 220c 	mla	r2, r7, ip, r2
 800b222:	fbb2 f2f6 	udiv	r2, r2, r6
 800b226:	0212      	lsls	r2, r2, #8
 800b228:	fa1f fc82 	uxth.w	ip, r2
 800b22c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800b230:	434a      	muls	r2, r1
 800b232:	f3c3 4e07 	ubfx	lr, r3, #16, #8
 800b236:	fb07 220e 	mla	r2, r7, lr, r2
 800b23a:	fbb2 f2f6 	udiv	r2, r2, r6
 800b23e:	0412      	lsls	r2, r2, #16
 800b240:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800b244:	ea4c 0202 	orr.w	r2, ip, r2
 800b248:	fa5f fc83 	uxtb.w	ip, r3
 800b24c:	b2c3      	uxtb	r3, r0
 800b24e:	434b      	muls	r3, r1
 800b250:	fb07 330c 	mla	r3, r7, ip, r3
 800b254:	fbb3 f3f6 	udiv	r3, r3, r6
 800b258:	2700      	movs	r7, #0
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800b288 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 800b260:	ea42 0603 	orr.w	r6, r2, r3
 800b264:	f8d8 3000 	ldr.w	r3, [r8]
 800b268:	42bb      	cmp	r3, r7
 800b26a:	d905      	bls.n	800b278 <PixelPatterns::FadeUpdate(unsigned int)+0x7c>
 800b26c:	4638      	mov	r0, r7
 800b26e:	4631      	mov	r1, r6
 800b270:	f7ff fdd4 	bl	800ae1c <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800b274:	3701      	adds	r7, #1
 800b276:	e7f5      	b.n	800b264 <PixelPatterns::FadeUpdate(unsigned int)+0x68>
 800b278:	4621      	mov	r1, r4
 800b27a:	4628      	mov	r0, r5
 800b27c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b280:	f7ff bed6 	b.w	800b030 <PixelPatterns::Increment(unsigned int)>
 800b284:	2000190c 	andcs	r1, r0, ip, lsl #18
 800b288:	20001934 	andcs	r1, r0, r4, lsr r9

0800b28c <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 800b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28e:	4b12      	ldr	r3, [pc, #72]	; (800b2d8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 800b290:	014e      	lsls	r6, r1, #5
 800b292:	599c      	ldr	r4, [r3, r6]
 800b294:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800b298:	686f      	ldr	r7, [r5, #4]
 800b29a:	1b14      	subs	r4, r2, r4
 800b29c:	42bc      	cmp	r4, r7
 800b29e:	d319      	bcc.n	800b2d4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800b2a0:	519a      	str	r2, [r3, r6]
 800b2a2:	69eb      	ldr	r3, [r5, #28]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	2b04      	cmp	r3, #4
 800b2a8:	d814      	bhi.n	800b2d4 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800b2aa:	e8df f003 	tbb	[pc, r3]
 800b2ae:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800b2b2:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800b2b6:	feda 2001 	cdp2	0, 13, cr2, cr10, cr1, {0}
 800b2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2bc:	f7ff ff00 	bl	800b0c0 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 800b2c0:	e7fa      	b.n	800b2b8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800b2c2:	f7ff ff2f 	bl	800b124 <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800b2c6:	e7f7      	b.n	800b2b8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800b2c8:	f7ff ff3e 	bl	800b148 <PixelPatterns::ScannerUpdate(unsigned int)>
 800b2cc:	e7f4      	b.n	800b2b8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800b2ce:	f7ff ff95 	bl	800b1fc <PixelPatterns::FadeUpdate(unsigned int)>
 800b2d2:	e7f1      	b.n	800b2b8 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	e7f0      	b.n	800b2ba <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 800b2d8:	2000190c 	andcs	r1, r0, ip, lsl #18

0800b2dc <PixelPatterns::Run()>:
 800b2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	f007 ff8b 	bl	80131fc <gd32_spi_dma_tx_is_active()>
 800b2e6:	4604      	mov	r4, r0
 800b2e8:	b9c8      	cbnz	r0, 800b31e <PixelPatterns::Run()+0x42>
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	4b0d      	ldr	r3, [pc, #52]	; (800b324 <PixelPatterns::Run()+0x48>)
 800b2ee:	f8df 8038 	ldr.w	r8, [pc, #56]	; 800b328 <PixelPatterns::Run()+0x4c>
 800b2f2:	681f      	ldr	r7, [r3, #0]
 800b2f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b2f8:	b2f1      	uxtb	r1, r6
 800b2fa:	428b      	cmp	r3, r1
 800b2fc:	f106 0601 	add.w	r6, r6, #1
 800b300:	d906      	bls.n	800b310 <PixelPatterns::Run()+0x34>
 800b302:	463a      	mov	r2, r7
 800b304:	4628      	mov	r0, r5
 800b306:	f7ff ffc1 	bl	800b28c <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 800b30a:	4304      	orrs	r4, r0
 800b30c:	b2e4      	uxtb	r4, r4
 800b30e:	e7f1      	b.n	800b2f4 <PixelPatterns::Run()+0x18>
 800b310:	b12c      	cbz	r4, 800b31e <PixelPatterns::Run()+0x42>
 800b312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b316:	4b05      	ldr	r3, [pc, #20]	; (800b32c <PixelPatterns::Run()+0x50>)
 800b318:	6818      	ldr	r0, [r3, #0]
 800b31a:	f000 bf69 	b.w	800c1f0 <WS28xx::Update()>
 800b31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b322:	bf00      	nop
 800b324:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800b328:	2000192c 	andcs	r1, r0, ip, lsr #18
 800b32c:	20001938 	andcs	r1, r0, r8, lsr r9

0800b330 <PixelType::GetType(pixel::Type)>:
 800b330:	280d      	cmp	r0, #13
 800b332:	bfda      	itte	le
 800b334:	4b02      	ldrle	r3, [pc, #8]	; (800b340 <PixelType::GetType(pixel::Type)+0x10>)
 800b336:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800b33a:	4802      	ldrgt	r0, [pc, #8]	; (800b344 <PixelType::GetType(pixel::Type)+0x14>)
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	08014565 	stmdaeq	r1, {r0, r2, r5, r6, r8, sl, lr}
 800b344:	080144e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, sl, lr}

0800b348 <PixelType::GetType(char const*)>:
 800b348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b34a:	4604      	mov	r4, r0
 800b34c:	2000      	movs	r0, #0
 800b34e:	490f      	ldr	r1, [pc, #60]	; (800b38c <PixelType::GetType(char const*)+0x44>)
 800b350:	1e66      	subs	r6, r4, #1
 800b352:	1e4d      	subs	r5, r1, #1
 800b354:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800b358:	461f      	mov	r7, r3
 800b35a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b35e:	2a19      	cmp	r2, #25
 800b360:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800b364:	bf98      	it	ls
 800b366:	f103 0720 	addls.w	r7, r3, #32
 800b36a:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 800b36e:	f1bc 0f19 	cmp.w	ip, #25
 800b372:	bf98      	it	ls
 800b374:	3220      	addls	r2, #32
 800b376:	42ba      	cmp	r2, r7
 800b378:	d102      	bne.n	800b380 <PixelType::GetType(char const*)+0x38>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1ea      	bne.n	800b354 <PixelType::GetType(char const*)+0xc>
 800b37e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b380:	3001      	adds	r0, #1
 800b382:	280e      	cmp	r0, #14
 800b384:	f101 0108 	add.w	r1, r1, #8
 800b388:	d1e2      	bne.n	800b350 <PixelType::GetType(char const*)+0x8>
 800b38a:	e7f8      	b.n	800b37e <PixelType::GetType(char const*)+0x36>
 800b38c:	08014565 	stmdaeq	r1, {r0, r2, r5, r6, r8, sl, lr}

0800b390 <PixelType::GetMap(char const*)>:
 800b390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b392:	4605      	mov	r5, r0
 800b394:	2000      	movs	r0, #0
 800b396:	4b11      	ldr	r3, [pc, #68]	; (800b3dc <PixelType::GetMap(char const*)+0x4c>)
 800b398:	1e5c      	subs	r4, r3, #1
 800b39a:	1e6e      	subs	r6, r5, #1
 800b39c:	f103 0c02 	add.w	ip, r3, #2
 800b3a0:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800b3a4:	4617      	mov	r7, r2
 800b3a6:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800b3aa:	2919      	cmp	r1, #25
 800b3ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b3b0:	bf98      	it	ls
 800b3b2:	f102 0720 	addls.w	r7, r2, #32
 800b3b6:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 800b3ba:	f1be 0f19 	cmp.w	lr, #25
 800b3be:	bf98      	it	ls
 800b3c0:	3120      	addls	r1, #32
 800b3c2:	42b9      	cmp	r1, r7
 800b3c4:	d005      	beq.n	800b3d2 <PixelType::GetMap(char const*)+0x42>
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	2806      	cmp	r0, #6
 800b3ca:	f103 0304 	add.w	r3, r3, #4
 800b3ce:	d1e3      	bne.n	800b398 <PixelType::GetMap(char const*)+0x8>
 800b3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3d2:	2a00      	cmp	r2, #0
 800b3d4:	d0fc      	beq.n	800b3d0 <PixelType::GetMap(char const*)+0x40>
 800b3d6:	4564      	cmp	r4, ip
 800b3d8:	d1e2      	bne.n	800b3a0 <PixelType::GetMap(char const*)+0x10>
 800b3da:	e7f9      	b.n	800b3d0 <PixelType::GetMap(char const*)+0x40>
 800b3dc:	0801454d 	stmdaeq	r1, {r0, r2, r3, r6, r8, sl, lr}

0800b3e0 <PixelType::GetMap(pixel::Map)>:
 800b3e0:	2805      	cmp	r0, #5
 800b3e2:	bfda      	itte	le
 800b3e4:	4b02      	ldrle	r3, [pc, #8]	; (800b3f0 <PixelType::GetMap(pixel::Map)+0x10>)
 800b3e6:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800b3ea:	4802      	ldrgt	r0, [pc, #8]	; (800b3f4 <PixelType::GetMap(pixel::Map)+0x14>)
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	0801454d 	stmdaeq	r1, {r0, r2, r3, r6, r8, sl, lr}
 800b3f4:	08014543 	stmdaeq	r1, {r0, r1, r6, r8, sl, lr}

0800b3f8 <PixelType::ConvertTxH(unsigned char)>:
 800b3f8:	28f0      	cmp	r0, #240	; 0xf0
 800b3fa:	d010      	beq.n	800b41e <PixelType::ConvertTxH(unsigned char)+0x26>
 800b3fc:	d807      	bhi.n	800b40e <PixelType::ConvertTxH(unsigned char)+0x16>
 800b3fe:	28c0      	cmp	r0, #192	; 0xc0
 800b400:	d00f      	beq.n	800b422 <PixelType::ConvertTxH(unsigned char)+0x2a>
 800b402:	28e0      	cmp	r0, #224	; 0xe0
 800b404:	d00f      	beq.n	800b426 <PixelType::ConvertTxH(unsigned char)+0x2e>
 800b406:	2880      	cmp	r0, #128	; 0x80
 800b408:	d113      	bne.n	800b432 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800b40a:	480b      	ldr	r0, [pc, #44]	; (800b438 <PixelType::ConvertTxH(unsigned char)+0x40>)
 800b40c:	4770      	bx	lr
 800b40e:	28fc      	cmp	r0, #252	; 0xfc
 800b410:	d00b      	beq.n	800b42a <PixelType::ConvertTxH(unsigned char)+0x32>
 800b412:	28fe      	cmp	r0, #254	; 0xfe
 800b414:	d00b      	beq.n	800b42e <PixelType::ConvertTxH(unsigned char)+0x36>
 800b416:	28f8      	cmp	r0, #248	; 0xf8
 800b418:	d10b      	bne.n	800b432 <PixelType::ConvertTxH(unsigned char)+0x3a>
 800b41a:	4808      	ldr	r0, [pc, #32]	; (800b43c <PixelType::ConvertTxH(unsigned char)+0x44>)
 800b41c:	4770      	bx	lr
 800b41e:	4808      	ldr	r0, [pc, #32]	; (800b440 <PixelType::ConvertTxH(unsigned char)+0x48>)
 800b420:	4770      	bx	lr
 800b422:	4808      	ldr	r0, [pc, #32]	; (800b444 <PixelType::ConvertTxH(unsigned char)+0x4c>)
 800b424:	4770      	bx	lr
 800b426:	4808      	ldr	r0, [pc, #32]	; (800b448 <PixelType::ConvertTxH(unsigned char)+0x50>)
 800b428:	4770      	bx	lr
 800b42a:	4808      	ldr	r0, [pc, #32]	; (800b44c <PixelType::ConvertTxH(unsigned char)+0x54>)
 800b42c:	4770      	bx	lr
 800b42e:	4808      	ldr	r0, [pc, #32]	; (800b450 <PixelType::ConvertTxH(unsigned char)+0x58>)
 800b430:	4770      	bx	lr
 800b432:	2000      	movs	r0, #0
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 800b43c:	3f480000 	svccc	0x00480000
 800b440:	3f200000 	svccc	0x00200000
 800b444:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 800b448:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 800b44c:	3f700000 	svccc	0x00700000
 800b450:	3f8c0000 	svccc	0x008c0000

0800b454 <PixelType::ConvertTxH(float)>:
 800b454:	b510      	push	{r4, lr}
 800b456:	491d      	ldr	r1, [pc, #116]	; (800b4cc <PixelType::ConvertTxH(float)+0x78>)
 800b458:	4604      	mov	r4, r0
 800b45a:	f7fc f825 	bl	80074a8 <__aeabi_fcmplt>
 800b45e:	bb30      	cbnz	r0, 800b4ae <PixelType::ConvertTxH(float)+0x5a>
 800b460:	4620      	mov	r0, r4
 800b462:	491b      	ldr	r1, [pc, #108]	; (800b4d0 <PixelType::ConvertTxH(float)+0x7c>)
 800b464:	f7fc f820 	bl	80074a8 <__aeabi_fcmplt>
 800b468:	bb18      	cbnz	r0, 800b4b2 <PixelType::ConvertTxH(float)+0x5e>
 800b46a:	4620      	mov	r0, r4
 800b46c:	4919      	ldr	r1, [pc, #100]	; (800b4d4 <PixelType::ConvertTxH(float)+0x80>)
 800b46e:	f7fc f81b 	bl	80074a8 <__aeabi_fcmplt>
 800b472:	bb00      	cbnz	r0, 800b4b6 <PixelType::ConvertTxH(float)+0x62>
 800b474:	4620      	mov	r0, r4
 800b476:	4918      	ldr	r1, [pc, #96]	; (800b4d8 <PixelType::ConvertTxH(float)+0x84>)
 800b478:	f7fc f816 	bl	80074a8 <__aeabi_fcmplt>
 800b47c:	b9e8      	cbnz	r0, 800b4ba <PixelType::ConvertTxH(float)+0x66>
 800b47e:	4620      	mov	r0, r4
 800b480:	4916      	ldr	r1, [pc, #88]	; (800b4dc <PixelType::ConvertTxH(float)+0x88>)
 800b482:	f7fc f811 	bl	80074a8 <__aeabi_fcmplt>
 800b486:	b9d0      	cbnz	r0, 800b4be <PixelType::ConvertTxH(float)+0x6a>
 800b488:	4620      	mov	r0, r4
 800b48a:	4915      	ldr	r1, [pc, #84]	; (800b4e0 <PixelType::ConvertTxH(float)+0x8c>)
 800b48c:	f7fc f80c 	bl	80074a8 <__aeabi_fcmplt>
 800b490:	b9b8      	cbnz	r0, 800b4c2 <PixelType::ConvertTxH(float)+0x6e>
 800b492:	4620      	mov	r0, r4
 800b494:	4913      	ldr	r1, [pc, #76]	; (800b4e4 <PixelType::ConvertTxH(float)+0x90>)
 800b496:	f7fc f807 	bl	80074a8 <__aeabi_fcmplt>
 800b49a:	b9a0      	cbnz	r0, 800b4c6 <PixelType::ConvertTxH(float)+0x72>
 800b49c:	4620      	mov	r0, r4
 800b49e:	4912      	ldr	r1, [pc, #72]	; (800b4e8 <PixelType::ConvertTxH(float)+0x94>)
 800b4a0:	f7fc f802 	bl	80074a8 <__aeabi_fcmplt>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	bf14      	ite	ne
 800b4a8:	20fe      	movne	r0, #254	; 0xfe
 800b4aa:	2000      	moveq	r0, #0
 800b4ac:	bd10      	pop	{r4, pc}
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	e7fc      	b.n	800b4ac <PixelType::ConvertTxH(float)+0x58>
 800b4b2:	2080      	movs	r0, #128	; 0x80
 800b4b4:	e7fa      	b.n	800b4ac <PixelType::ConvertTxH(float)+0x58>
 800b4b6:	20c0      	movs	r0, #192	; 0xc0
 800b4b8:	e7f8      	b.n	800b4ac <PixelType::ConvertTxH(float)+0x58>
 800b4ba:	20e0      	movs	r0, #224	; 0xe0
 800b4bc:	e7f6      	b.n	800b4ac <PixelType::ConvertTxH(float)+0x58>
 800b4be:	20f0      	movs	r0, #240	; 0xf0
 800b4c0:	e7f4      	b.n	800b4ac <PixelType::ConvertTxH(float)+0x58>
 800b4c2:	20f8      	movs	r0, #248	; 0xf8
 800b4c4:	e7f2      	b.n	800b4ac <PixelType::ConvertTxH(float)+0x58>
 800b4c6:	20fc      	movs	r0, #252	; 0xfc
 800b4c8:	e7f0      	b.n	800b4ac <PixelType::ConvertTxH(float)+0x58>
 800b4ca:	bf00      	nop
 800b4cc:	3da00000 	stccc	0, cr0, [r0]
 800b4d0:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
 800b4d4:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
 800b4d8:	3f0c0000 	svccc	0x000c0000
 800b4dc:	3f340000 	svccc	0x00340000
 800b4e0:	3f5c0000 	svccc	0x005c0000
 800b4e4:	3f820000 	svccc	0x00820000
 800b4e8:	3f960000 	svccc	0x00960000

0800b4ec <WS28xx::Print()>:
 800b4ec:	b513      	push	{r0, r1, r4, lr}
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	4819      	ldr	r0, [pc, #100]	; (800b558 <WS28xx::Print()+0x6c>)
 800b4f2:	f7fd fb2f 	bl	8008b54 <printf>
 800b4f6:	6820      	ldr	r0, [r4, #0]
 800b4f8:	f7ff ff1a 	bl	800b330 <PixelType::GetType(pixel::Type)>
 800b4fc:	6822      	ldr	r2, [r4, #0]
 800b4fe:	4601      	mov	r1, r0
 800b500:	4816      	ldr	r0, [pc, #88]	; (800b55c <WS28xx::Print()+0x70>)
 800b502:	f7fd fb27 	bl	8008b54 <printf>
 800b506:	6861      	ldr	r1, [r4, #4]
 800b508:	4815      	ldr	r0, [pc, #84]	; (800b560 <WS28xx::Print()+0x74>)
 800b50a:	f7fd fb23 	bl	8008b54 <printf>
 800b50e:	7ca3      	ldrb	r3, [r4, #18]
 800b510:	b1fb      	cbz	r3, 800b552 <WS28xx::Print()+0x66>
 800b512:	68a0      	ldr	r0, [r4, #8]
 800b514:	f7ff ff64 	bl	800b3e0 <PixelType::GetMap(pixel::Map)>
 800b518:	68a2      	ldr	r2, [r4, #8]
 800b51a:	4601      	mov	r1, r0
 800b51c:	4811      	ldr	r0, [pc, #68]	; (800b564 <WS28xx::Print()+0x78>)
 800b51e:	f7fd fb19 	bl	8008b54 <printf>
 800b522:	7c20      	ldrb	r0, [r4, #16]
 800b524:	f7ff ff68 	bl	800b3f8 <PixelType::ConvertTxH(unsigned char)>
 800b528:	f7fc faf4 	bl	8007b14 <__aeabi_f2d>
 800b52c:	460b      	mov	r3, r1
 800b52e:	7c21      	ldrb	r1, [r4, #16]
 800b530:	4602      	mov	r2, r0
 800b532:	9100      	str	r1, [sp, #0]
 800b534:	480c      	ldr	r0, [pc, #48]	; (800b568 <WS28xx::Print()+0x7c>)
 800b536:	f7fd fb0d 	bl	8008b54 <printf>
 800b53a:	7c60      	ldrb	r0, [r4, #17]
 800b53c:	f7ff ff5c 	bl	800b3f8 <PixelType::ConvertTxH(unsigned char)>
 800b540:	f7fc fae8 	bl	8007b14 <__aeabi_f2d>
 800b544:	460b      	mov	r3, r1
 800b546:	7c61      	ldrb	r1, [r4, #17]
 800b548:	4602      	mov	r2, r0
 800b54a:	9100      	str	r1, [sp, #0]
 800b54c:	4807      	ldr	r0, [pc, #28]	; (800b56c <WS28xx::Print()+0x80>)
 800b54e:	f7fd fb01 	bl	8008b54 <printf>
 800b552:	b002      	add	sp, #8
 800b554:	bd10      	pop	{r4, pc}
 800b556:	bf00      	nop
 800b558:	080145d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, sl, lr}
 800b55c:	080145e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, sl, lr}
 800b560:	080145fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, sl, lr}
 800b564:	0801460a 	stmdaeq	r1, {r1, r3, r9, sl, lr}
 800b568:	0801461e 	stmdaeq	r1, {r1, r2, r3, r4, r9, sl, lr}
 800b56c:	08014636 	stmdaeq	r1, {r1, r2, r4, r5, r9, sl, lr}

0800b570 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 800b570:	b530      	push	{r4, r5, lr}
 800b572:	7c84      	ldrb	r4, [r0, #18]
 800b574:	f89d c00c 	ldrb.w	ip, [sp, #12]
 800b578:	b994      	cbnz	r4, 800b5a0 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x30>
 800b57a:	6804      	ldr	r4, [r0, #0]
 800b57c:	f1a4 0e0b 	sub.w	lr, r4, #11
 800b580:	f1be 0f01 	cmp.w	lr, #1
 800b584:	d93d      	bls.n	800b602 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x92>
 800b586:	b9d4      	cbnz	r4, 800b5be <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x4e>
 800b588:	6944      	ldr	r4, [r0, #20]
 800b58a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b58e:	5462      	strb	r2, [r4, r1]
 800b590:	6942      	ldr	r2, [r0, #20]
 800b592:	440a      	add	r2, r1
 800b594:	7053      	strb	r3, [r2, #1]
 800b596:	6943      	ldr	r3, [r0, #20]
 800b598:	4419      	add	r1, r3
 800b59a:	f881 c002 	strb.w	ip, [r1, #2]
 800b59e:	bd30      	pop	{r4, r5, pc}
 800b5a0:	6884      	ldr	r4, [r0, #8]
 800b5a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800b5a6:	00c9      	lsls	r1, r1, #3
 800b5a8:	2c05      	cmp	r4, #5
 800b5aa:	f200 812d 	bhi.w	800b808 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x298>
 800b5ae:	e8df f014 	tbh	[pc, r4, lsl #1]
 800b5b2:	02ed012b 	rsceq	r0, sp, #-1073741814	; 0xc000000a
 800b5b6:	04140384 	ldreq	r0, [r4], #-900	; 0xfffffc7c
 800b5ba:	0202003b 	andeq	r0, r2, #59	; 0x3b
 800b5be:	ea6f 0e9c 	mvn.w	lr, ip, lsr #2
 800b5c2:	ea6f 1413 	mvn.w	r4, r3, lsr #4
 800b5c6:	f082 05c0 	eor.w	r5, r2, #192	; 0xc0
 800b5ca:	f00e 0e30 	and.w	lr, lr, #48	; 0x30
 800b5ce:	f004 040c 	and.w	r4, r4, #12
 800b5d2:	ea4e 1e95 	orr.w	lr, lr, r5, lsr #6
 800b5d6:	ea4e 0e04 	orr.w	lr, lr, r4
 800b5da:	6944      	ldr	r4, [r0, #20]
 800b5dc:	3101      	adds	r1, #1
 800b5de:	f06e 0e3f 	orn	lr, lr, #63	; 0x3f
 800b5e2:	f804 e021 	strb.w	lr, [r4, r1, lsl #2]
 800b5e6:	6944      	ldr	r4, [r0, #20]
 800b5e8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800b5ec:	f884 c001 	strb.w	ip, [r4, #1]
 800b5f0:	6944      	ldr	r4, [r0, #20]
 800b5f2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800b5f6:	70a3      	strb	r3, [r4, #2]
 800b5f8:	6943      	ldr	r3, [r0, #20]
 800b5fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b5fe:	70ca      	strb	r2, [r1, #3]
 800b600:	bd30      	pop	{r4, r5, pc}
 800b602:	6944      	ldr	r4, [r0, #20]
 800b604:	7cc5      	ldrb	r5, [r0, #19]
 800b606:	3101      	adds	r1, #1
 800b608:	f804 5021 	strb.w	r5, [r4, r1, lsl #2]
 800b60c:	6944      	ldr	r4, [r0, #20]
 800b60e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800b612:	7062      	strb	r2, [r4, #1]
 800b614:	6942      	ldr	r2, [r0, #20]
 800b616:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b61a:	7093      	strb	r3, [r2, #2]
 800b61c:	6943      	ldr	r3, [r0, #20]
 800b61e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b622:	f881 c003 	strb.w	ip, [r1, #3]
 800b626:	bd30      	pop	{r4, r5, pc}
 800b628:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800b62c:	bf0c      	ite	eq
 800b62e:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b632:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b636:	6945      	ldr	r5, [r0, #20]
 800b638:	1c4c      	adds	r4, r1, #1
 800b63a:	f805 e004 	strb.w	lr, [r5, r4]
 800b63e:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800b642:	bf0c      	ite	eq
 800b644:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b648:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b64c:	6945      	ldr	r5, [r0, #20]
 800b64e:	1c8c      	adds	r4, r1, #2
 800b650:	f805 e004 	strb.w	lr, [r5, r4]
 800b654:	f01c 0f20 	tst.w	ip, #32
 800b658:	bf0c      	ite	eq
 800b65a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b65e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b662:	6945      	ldr	r5, [r0, #20]
 800b664:	1ccc      	adds	r4, r1, #3
 800b666:	f805 e004 	strb.w	lr, [r5, r4]
 800b66a:	f01c 0f10 	tst.w	ip, #16
 800b66e:	bf0c      	ite	eq
 800b670:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b674:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b678:	6945      	ldr	r5, [r0, #20]
 800b67a:	1d0c      	adds	r4, r1, #4
 800b67c:	f01c 0f08 	tst.w	ip, #8
 800b680:	f805 e004 	strb.w	lr, [r5, r4]
 800b684:	bf0c      	ite	eq
 800b686:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b68a:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b68e:	6945      	ldr	r5, [r0, #20]
 800b690:	1d4c      	adds	r4, r1, #5
 800b692:	f01c 0f04 	tst.w	ip, #4
 800b696:	f805 e004 	strb.w	lr, [r5, r4]
 800b69a:	bf0c      	ite	eq
 800b69c:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b6a0:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b6a4:	6945      	ldr	r5, [r0, #20]
 800b6a6:	1d8c      	adds	r4, r1, #6
 800b6a8:	f01c 0f02 	tst.w	ip, #2
 800b6ac:	f805 e004 	strb.w	lr, [r5, r4]
 800b6b0:	bf0c      	ite	eq
 800b6b2:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b6b6:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b6ba:	6945      	ldr	r5, [r0, #20]
 800b6bc:	1dcc      	adds	r4, r1, #7
 800b6be:	f01c 0f01 	tst.w	ip, #1
 800b6c2:	f805 e004 	strb.w	lr, [r5, r4]
 800b6c6:	bf14      	ite	ne
 800b6c8:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800b6cc:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800b6d0:	6945      	ldr	r5, [r0, #20]
 800b6d2:	f101 0408 	add.w	r4, r1, #8
 800b6d6:	f805 c004 	strb.w	ip, [r5, r4]
 800b6da:	0615      	lsls	r5, r2, #24
 800b6dc:	bf54      	ite	pl
 800b6de:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b6e2:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b6e6:	6945      	ldr	r5, [r0, #20]
 800b6e8:	f101 0409 	add.w	r4, r1, #9
 800b6ec:	f805 c004 	strb.w	ip, [r5, r4]
 800b6f0:	0655      	lsls	r5, r2, #25
 800b6f2:	bf54      	ite	pl
 800b6f4:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b6f8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b6fc:	6945      	ldr	r5, [r0, #20]
 800b6fe:	f101 040a 	add.w	r4, r1, #10
 800b702:	f805 c004 	strb.w	ip, [r5, r4]
 800b706:	0695      	lsls	r5, r2, #26
 800b708:	bf54      	ite	pl
 800b70a:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b70e:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b712:	6945      	ldr	r5, [r0, #20]
 800b714:	f101 040b 	add.w	r4, r1, #11
 800b718:	f805 c004 	strb.w	ip, [r5, r4]
 800b71c:	06d5      	lsls	r5, r2, #27
 800b71e:	bf54      	ite	pl
 800b720:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b724:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b728:	6945      	ldr	r5, [r0, #20]
 800b72a:	f101 040c 	add.w	r4, r1, #12
 800b72e:	f805 c004 	strb.w	ip, [r5, r4]
 800b732:	0715      	lsls	r5, r2, #28
 800b734:	bf54      	ite	pl
 800b736:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b73a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b73e:	6945      	ldr	r5, [r0, #20]
 800b740:	f101 040d 	add.w	r4, r1, #13
 800b744:	f805 c004 	strb.w	ip, [r5, r4]
 800b748:	0755      	lsls	r5, r2, #29
 800b74a:	bf54      	ite	pl
 800b74c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b750:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b754:	6945      	ldr	r5, [r0, #20]
 800b756:	f101 040e 	add.w	r4, r1, #14
 800b75a:	f805 c004 	strb.w	ip, [r5, r4]
 800b75e:	0795      	lsls	r5, r2, #30
 800b760:	bf58      	it	pl
 800b762:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800b766:	6945      	ldr	r5, [r0, #20]
 800b768:	bf48      	it	mi
 800b76a:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800b76e:	f101 040f 	add.w	r4, r1, #15
 800b772:	f805 c004 	strb.w	ip, [r5, r4]
 800b776:	07d5      	lsls	r5, r2, #31
 800b778:	bf4c      	ite	mi
 800b77a:	7c45      	ldrbmi	r5, [r0, #17]
 800b77c:	7c05      	ldrbpl	r5, [r0, #16]
 800b77e:	6942      	ldr	r2, [r0, #20]
 800b780:	f101 0410 	add.w	r4, r1, #16
 800b784:	5515      	strb	r5, [r2, r4]
 800b786:	061c      	lsls	r4, r3, #24
 800b788:	bf54      	ite	pl
 800b78a:	7c05      	ldrbpl	r5, [r0, #16]
 800b78c:	7c45      	ldrbmi	r5, [r0, #17]
 800b78e:	6944      	ldr	r4, [r0, #20]
 800b790:	f101 0211 	add.w	r2, r1, #17
 800b794:	54a5      	strb	r5, [r4, r2]
 800b796:	065d      	lsls	r5, r3, #25
 800b798:	bf54      	ite	pl
 800b79a:	7c05      	ldrbpl	r5, [r0, #16]
 800b79c:	7c45      	ldrbmi	r5, [r0, #17]
 800b79e:	6944      	ldr	r4, [r0, #20]
 800b7a0:	f101 0212 	add.w	r2, r1, #18
 800b7a4:	54a5      	strb	r5, [r4, r2]
 800b7a6:	069c      	lsls	r4, r3, #26
 800b7a8:	bf54      	ite	pl
 800b7aa:	7c05      	ldrbpl	r5, [r0, #16]
 800b7ac:	7c45      	ldrbmi	r5, [r0, #17]
 800b7ae:	6944      	ldr	r4, [r0, #20]
 800b7b0:	f101 0213 	add.w	r2, r1, #19
 800b7b4:	54a5      	strb	r5, [r4, r2]
 800b7b6:	06dd      	lsls	r5, r3, #27
 800b7b8:	bf54      	ite	pl
 800b7ba:	7c05      	ldrbpl	r5, [r0, #16]
 800b7bc:	7c45      	ldrbmi	r5, [r0, #17]
 800b7be:	6944      	ldr	r4, [r0, #20]
 800b7c0:	f101 0214 	add.w	r2, r1, #20
 800b7c4:	54a5      	strb	r5, [r4, r2]
 800b7c6:	071c      	lsls	r4, r3, #28
 800b7c8:	bf54      	ite	pl
 800b7ca:	7c05      	ldrbpl	r5, [r0, #16]
 800b7cc:	7c45      	ldrbmi	r5, [r0, #17]
 800b7ce:	6944      	ldr	r4, [r0, #20]
 800b7d0:	f101 0215 	add.w	r2, r1, #21
 800b7d4:	54a5      	strb	r5, [r4, r2]
 800b7d6:	075d      	lsls	r5, r3, #29
 800b7d8:	bf54      	ite	pl
 800b7da:	7c05      	ldrbpl	r5, [r0, #16]
 800b7dc:	7c45      	ldrbmi	r5, [r0, #17]
 800b7de:	6944      	ldr	r4, [r0, #20]
 800b7e0:	f101 0216 	add.w	r2, r1, #22
 800b7e4:	54a5      	strb	r5, [r4, r2]
 800b7e6:	079c      	lsls	r4, r3, #30
 800b7e8:	bf54      	ite	pl
 800b7ea:	7c05      	ldrbpl	r5, [r0, #16]
 800b7ec:	7c45      	ldrbmi	r5, [r0, #17]
 800b7ee:	6944      	ldr	r4, [r0, #20]
 800b7f0:	f101 0217 	add.w	r2, r1, #23
 800b7f4:	54a5      	strb	r5, [r4, r2]
 800b7f6:	3118      	adds	r1, #24
 800b7f8:	f013 0f01 	tst.w	r3, #1
 800b7fc:	f000 80d9 	beq.w	800b9b2 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x442>
 800b800:	7c42      	ldrb	r2, [r0, #17]
 800b802:	6943      	ldr	r3, [r0, #20]
 800b804:	545a      	strb	r2, [r3, r1]
 800b806:	bd30      	pop	{r4, r5, pc}
 800b808:	0615      	lsls	r5, r2, #24
 800b80a:	bf54      	ite	pl
 800b80c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b810:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b814:	6945      	ldr	r5, [r0, #20]
 800b816:	1c4c      	adds	r4, r1, #1
 800b818:	f805 e004 	strb.w	lr, [r5, r4]
 800b81c:	0655      	lsls	r5, r2, #25
 800b81e:	bf54      	ite	pl
 800b820:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b824:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b828:	6945      	ldr	r5, [r0, #20]
 800b82a:	1c8c      	adds	r4, r1, #2
 800b82c:	f805 e004 	strb.w	lr, [r5, r4]
 800b830:	0695      	lsls	r5, r2, #26
 800b832:	bf54      	ite	pl
 800b834:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b838:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b83c:	6945      	ldr	r5, [r0, #20]
 800b83e:	1ccc      	adds	r4, r1, #3
 800b840:	f805 e004 	strb.w	lr, [r5, r4]
 800b844:	06d5      	lsls	r5, r2, #27
 800b846:	bf54      	ite	pl
 800b848:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b84c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b850:	6945      	ldr	r5, [r0, #20]
 800b852:	1d0c      	adds	r4, r1, #4
 800b854:	f805 e004 	strb.w	lr, [r5, r4]
 800b858:	0715      	lsls	r5, r2, #28
 800b85a:	bf54      	ite	pl
 800b85c:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b860:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b864:	6945      	ldr	r5, [r0, #20]
 800b866:	1d4c      	adds	r4, r1, #5
 800b868:	f805 e004 	strb.w	lr, [r5, r4]
 800b86c:	0755      	lsls	r5, r2, #29
 800b86e:	bf54      	ite	pl
 800b870:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b874:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b878:	6945      	ldr	r5, [r0, #20]
 800b87a:	1d8c      	adds	r4, r1, #6
 800b87c:	f805 e004 	strb.w	lr, [r5, r4]
 800b880:	0795      	lsls	r5, r2, #30
 800b882:	bf58      	it	pl
 800b884:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800b888:	6945      	ldr	r5, [r0, #20]
 800b88a:	bf48      	it	mi
 800b88c:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800b890:	1dcc      	adds	r4, r1, #7
 800b892:	f805 e004 	strb.w	lr, [r5, r4]
 800b896:	07d5      	lsls	r5, r2, #31
 800b898:	bf4c      	ite	mi
 800b89a:	7c45      	ldrbmi	r5, [r0, #17]
 800b89c:	7c05      	ldrbpl	r5, [r0, #16]
 800b89e:	6942      	ldr	r2, [r0, #20]
 800b8a0:	f101 0408 	add.w	r4, r1, #8
 800b8a4:	5515      	strb	r5, [r2, r4]
 800b8a6:	061c      	lsls	r4, r3, #24
 800b8a8:	bf54      	ite	pl
 800b8aa:	7c05      	ldrbpl	r5, [r0, #16]
 800b8ac:	7c45      	ldrbmi	r5, [r0, #17]
 800b8ae:	6944      	ldr	r4, [r0, #20]
 800b8b0:	f101 0209 	add.w	r2, r1, #9
 800b8b4:	54a5      	strb	r5, [r4, r2]
 800b8b6:	065d      	lsls	r5, r3, #25
 800b8b8:	bf54      	ite	pl
 800b8ba:	7c05      	ldrbpl	r5, [r0, #16]
 800b8bc:	7c45      	ldrbmi	r5, [r0, #17]
 800b8be:	6944      	ldr	r4, [r0, #20]
 800b8c0:	f101 020a 	add.w	r2, r1, #10
 800b8c4:	54a5      	strb	r5, [r4, r2]
 800b8c6:	069c      	lsls	r4, r3, #26
 800b8c8:	bf54      	ite	pl
 800b8ca:	7c05      	ldrbpl	r5, [r0, #16]
 800b8cc:	7c45      	ldrbmi	r5, [r0, #17]
 800b8ce:	6944      	ldr	r4, [r0, #20]
 800b8d0:	f101 020b 	add.w	r2, r1, #11
 800b8d4:	54a5      	strb	r5, [r4, r2]
 800b8d6:	06dd      	lsls	r5, r3, #27
 800b8d8:	bf54      	ite	pl
 800b8da:	7c05      	ldrbpl	r5, [r0, #16]
 800b8dc:	7c45      	ldrbmi	r5, [r0, #17]
 800b8de:	6944      	ldr	r4, [r0, #20]
 800b8e0:	f101 020c 	add.w	r2, r1, #12
 800b8e4:	54a5      	strb	r5, [r4, r2]
 800b8e6:	071c      	lsls	r4, r3, #28
 800b8e8:	bf54      	ite	pl
 800b8ea:	7c05      	ldrbpl	r5, [r0, #16]
 800b8ec:	7c45      	ldrbmi	r5, [r0, #17]
 800b8ee:	6944      	ldr	r4, [r0, #20]
 800b8f0:	f101 020d 	add.w	r2, r1, #13
 800b8f4:	54a5      	strb	r5, [r4, r2]
 800b8f6:	075d      	lsls	r5, r3, #29
 800b8f8:	bf54      	ite	pl
 800b8fa:	7c05      	ldrbpl	r5, [r0, #16]
 800b8fc:	7c45      	ldrbmi	r5, [r0, #17]
 800b8fe:	6944      	ldr	r4, [r0, #20]
 800b900:	f101 020e 	add.w	r2, r1, #14
 800b904:	54a5      	strb	r5, [r4, r2]
 800b906:	079c      	lsls	r4, r3, #30
 800b908:	bf58      	it	pl
 800b90a:	7c05      	ldrbpl	r5, [r0, #16]
 800b90c:	6944      	ldr	r4, [r0, #20]
 800b90e:	bf48      	it	mi
 800b910:	7c45      	ldrbmi	r5, [r0, #17]
 800b912:	f101 020f 	add.w	r2, r1, #15
 800b916:	54a5      	strb	r5, [r4, r2]
 800b918:	07db      	lsls	r3, r3, #31
 800b91a:	bf4c      	ite	mi
 800b91c:	7c44      	ldrbmi	r4, [r0, #17]
 800b91e:	7c04      	ldrbpl	r4, [r0, #16]
 800b920:	6943      	ldr	r3, [r0, #20]
 800b922:	f101 0210 	add.w	r2, r1, #16
 800b926:	549c      	strb	r4, [r3, r2]
 800b928:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800b92c:	bf0c      	ite	eq
 800b92e:	7c04      	ldrbeq	r4, [r0, #16]
 800b930:	7c44      	ldrbne	r4, [r0, #17]
 800b932:	6942      	ldr	r2, [r0, #20]
 800b934:	f101 0311 	add.w	r3, r1, #17
 800b938:	54d4      	strb	r4, [r2, r3]
 800b93a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800b93e:	bf0c      	ite	eq
 800b940:	7c04      	ldrbeq	r4, [r0, #16]
 800b942:	7c44      	ldrbne	r4, [r0, #17]
 800b944:	6942      	ldr	r2, [r0, #20]
 800b946:	f101 0312 	add.w	r3, r1, #18
 800b94a:	54d4      	strb	r4, [r2, r3]
 800b94c:	f01c 0f20 	tst.w	ip, #32
 800b950:	bf0c      	ite	eq
 800b952:	7c04      	ldrbeq	r4, [r0, #16]
 800b954:	7c44      	ldrbne	r4, [r0, #17]
 800b956:	6942      	ldr	r2, [r0, #20]
 800b958:	f101 0313 	add.w	r3, r1, #19
 800b95c:	54d4      	strb	r4, [r2, r3]
 800b95e:	f01c 0f10 	tst.w	ip, #16
 800b962:	bf0c      	ite	eq
 800b964:	7c04      	ldrbeq	r4, [r0, #16]
 800b966:	7c44      	ldrbne	r4, [r0, #17]
 800b968:	6942      	ldr	r2, [r0, #20]
 800b96a:	f101 0314 	add.w	r3, r1, #20
 800b96e:	54d4      	strb	r4, [r2, r3]
 800b970:	f01c 0f08 	tst.w	ip, #8
 800b974:	bf0c      	ite	eq
 800b976:	7c04      	ldrbeq	r4, [r0, #16]
 800b978:	7c44      	ldrbne	r4, [r0, #17]
 800b97a:	6942      	ldr	r2, [r0, #20]
 800b97c:	f101 0315 	add.w	r3, r1, #21
 800b980:	54d4      	strb	r4, [r2, r3]
 800b982:	f01c 0f04 	tst.w	ip, #4
 800b986:	bf0c      	ite	eq
 800b988:	7c04      	ldrbeq	r4, [r0, #16]
 800b98a:	7c44      	ldrbne	r4, [r0, #17]
 800b98c:	6942      	ldr	r2, [r0, #20]
 800b98e:	f101 0316 	add.w	r3, r1, #22
 800b992:	54d4      	strb	r4, [r2, r3]
 800b994:	f01c 0f02 	tst.w	ip, #2
 800b998:	bf0c      	ite	eq
 800b99a:	7c04      	ldrbeq	r4, [r0, #16]
 800b99c:	7c44      	ldrbne	r4, [r0, #17]
 800b99e:	6942      	ldr	r2, [r0, #20]
 800b9a0:	f101 0317 	add.w	r3, r1, #23
 800b9a4:	f01c 0f01 	tst.w	ip, #1
 800b9a8:	54d4      	strb	r4, [r2, r3]
 800b9aa:	f101 0118 	add.w	r1, r1, #24
 800b9ae:	f47f af27 	bne.w	800b800 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x290>
 800b9b2:	7c02      	ldrb	r2, [r0, #16]
 800b9b4:	e725      	b.n	800b802 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x292>
 800b9b6:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800b9ba:	bf0c      	ite	eq
 800b9bc:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b9c0:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b9c4:	6945      	ldr	r5, [r0, #20]
 800b9c6:	1c4c      	adds	r4, r1, #1
 800b9c8:	f805 e004 	strb.w	lr, [r5, r4]
 800b9cc:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800b9d0:	bf0c      	ite	eq
 800b9d2:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b9d6:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b9da:	6945      	ldr	r5, [r0, #20]
 800b9dc:	1c8c      	adds	r4, r1, #2
 800b9de:	f805 e004 	strb.w	lr, [r5, r4]
 800b9e2:	f01c 0f20 	tst.w	ip, #32
 800b9e6:	bf0c      	ite	eq
 800b9e8:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800b9ec:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800b9f0:	6945      	ldr	r5, [r0, #20]
 800b9f2:	1ccc      	adds	r4, r1, #3
 800b9f4:	f805 e004 	strb.w	lr, [r5, r4]
 800b9f8:	f01c 0f10 	tst.w	ip, #16
 800b9fc:	bf0c      	ite	eq
 800b9fe:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800ba02:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800ba06:	6945      	ldr	r5, [r0, #20]
 800ba08:	1d0c      	adds	r4, r1, #4
 800ba0a:	f01c 0f08 	tst.w	ip, #8
 800ba0e:	f805 e004 	strb.w	lr, [r5, r4]
 800ba12:	bf0c      	ite	eq
 800ba14:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800ba18:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800ba1c:	6945      	ldr	r5, [r0, #20]
 800ba1e:	1d4c      	adds	r4, r1, #5
 800ba20:	f01c 0f04 	tst.w	ip, #4
 800ba24:	f805 e004 	strb.w	lr, [r5, r4]
 800ba28:	bf0c      	ite	eq
 800ba2a:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800ba2e:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800ba32:	6945      	ldr	r5, [r0, #20]
 800ba34:	1d8c      	adds	r4, r1, #6
 800ba36:	f01c 0f02 	tst.w	ip, #2
 800ba3a:	f805 e004 	strb.w	lr, [r5, r4]
 800ba3e:	bf0c      	ite	eq
 800ba40:	f890 e010 	ldrbeq.w	lr, [r0, #16]
 800ba44:	f890 e011 	ldrbne.w	lr, [r0, #17]
 800ba48:	6945      	ldr	r5, [r0, #20]
 800ba4a:	1dcc      	adds	r4, r1, #7
 800ba4c:	f01c 0f01 	tst.w	ip, #1
 800ba50:	f805 e004 	strb.w	lr, [r5, r4]
 800ba54:	bf14      	ite	ne
 800ba56:	f890 c011 	ldrbne.w	ip, [r0, #17]
 800ba5a:	f890 c010 	ldrbeq.w	ip, [r0, #16]
 800ba5e:	6945      	ldr	r5, [r0, #20]
 800ba60:	f101 0408 	add.w	r4, r1, #8
 800ba64:	f805 c004 	strb.w	ip, [r5, r4]
 800ba68:	061d      	lsls	r5, r3, #24
 800ba6a:	bf54      	ite	pl
 800ba6c:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800ba70:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800ba74:	6945      	ldr	r5, [r0, #20]
 800ba76:	f101 0409 	add.w	r4, r1, #9
 800ba7a:	f805 c004 	strb.w	ip, [r5, r4]
 800ba7e:	065d      	lsls	r5, r3, #25
 800ba80:	bf54      	ite	pl
 800ba82:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800ba86:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800ba8a:	6945      	ldr	r5, [r0, #20]
 800ba8c:	f101 040a 	add.w	r4, r1, #10
 800ba90:	f805 c004 	strb.w	ip, [r5, r4]
 800ba94:	069d      	lsls	r5, r3, #26
 800ba96:	bf54      	ite	pl
 800ba98:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800ba9c:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800baa0:	6945      	ldr	r5, [r0, #20]
 800baa2:	f101 040b 	add.w	r4, r1, #11
 800baa6:	f805 c004 	strb.w	ip, [r5, r4]
 800baaa:	06dd      	lsls	r5, r3, #27
 800baac:	bf54      	ite	pl
 800baae:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800bab2:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800bab6:	6945      	ldr	r5, [r0, #20]
 800bab8:	f101 040c 	add.w	r4, r1, #12
 800babc:	f805 c004 	strb.w	ip, [r5, r4]
 800bac0:	071d      	lsls	r5, r3, #28
 800bac2:	bf54      	ite	pl
 800bac4:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800bac8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800bacc:	6945      	ldr	r5, [r0, #20]
 800bace:	f101 040d 	add.w	r4, r1, #13
 800bad2:	f805 c004 	strb.w	ip, [r5, r4]
 800bad6:	075d      	lsls	r5, r3, #29
 800bad8:	bf54      	ite	pl
 800bada:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800bade:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800bae2:	6945      	ldr	r5, [r0, #20]
 800bae4:	f101 040e 	add.w	r4, r1, #14
 800bae8:	f805 c004 	strb.w	ip, [r5, r4]
 800baec:	079d      	lsls	r5, r3, #30
 800baee:	bf58      	it	pl
 800baf0:	f890 c010 	ldrbpl.w	ip, [r0, #16]
 800baf4:	6945      	ldr	r5, [r0, #20]
 800baf6:	bf48      	it	mi
 800baf8:	f890 c011 	ldrbmi.w	ip, [r0, #17]
 800bafc:	f101 040f 	add.w	r4, r1, #15
 800bb00:	f805 c004 	strb.w	ip, [r5, r4]
 800bb04:	07dd      	lsls	r5, r3, #31
 800bb06:	bf4c      	ite	mi
 800bb08:	7c45      	ldrbmi	r5, [r0, #17]
 800bb0a:	7c05      	ldrbpl	r5, [r0, #16]
 800bb0c:	6943      	ldr	r3, [r0, #20]
 800bb0e:	f101 0410 	add.w	r4, r1, #16
 800bb12:	551d      	strb	r5, [r3, r4]
 800bb14:	0614      	lsls	r4, r2, #24
 800bb16:	bf54      	ite	pl
 800bb18:	7c05      	ldrbpl	r5, [r0, #16]
 800bb1a:	7c45      	ldrbmi	r5, [r0, #17]
 800bb1c:	6944      	ldr	r4, [r0, #20]
 800bb1e:	f101 0311 	add.w	r3, r1, #17
 800bb22:	54e5      	strb	r5, [r4, r3]
 800bb24:	0655      	lsls	r5, r2, #25
 800bb26:	bf54      	ite	pl
 800bb28:	7c05      	ldrbpl	r5, [r0, #16]
 800bb2a:	7c45      	ldrbmi	r5, [r0, #17]
 800bb2c:	6944      	ldr	r4, [r0, #20]
 800bb2e:	f101 0312 	add.w	r3, r1, #18
 800bb32:	54e5      	strb	r5, [r4, r3]
 800bb34:	0694      	lsls	r4, r2, #26
 800bb36:	bf54      	ite	pl
 800bb38:	7c05      	ldrbpl	r5, [r0, #16]
 800bb3a:	7c45      	ldrbmi	r5, [r0, #17]
 800bb3c:	6944      	ldr	r4, [r0, #20]
 800bb3e:	f101 0313 	add.w	r3, r1, #19
 800bb42:	54e5      	strb	r5, [r4, r3]
 800bb44:	06d5      	lsls	r5, r2, #27
 800bb46:	bf54      	ite	pl
 800bb48:	7c05      	ldrbpl	r5, [r0, #16]
 800bb4a:	7c45      	ldrbmi	r5, [r0, #17]
 800bb4c:	6944      	ldr	r4, [r0, #20]
 800bb4e:	f101 0314 	add.w	r3, r1, #20
 800bb52:	54e5      	strb	r5, [r4, r3]
 800bb54:	0714      	lsls	r4, r2, #28
 800bb56:	bf54      	ite	pl
 800bb58:	7c05      	ldrbpl	r5, [r0, #16]
 800bb5a:	7c45      	ldrbmi	r5, [r0, #17]
 800bb5c:	6944      	ldr	r4, [r0, #20]
 800bb5e:	f101 0315 	add.w	r3, r1, #21
 800bb62:	54e5      	strb	r5, [r4, r3]
 800bb64:	0755      	lsls	r5, r2, #29
 800bb66:	bf54      	ite	pl
 800bb68:	7c05      	ldrbpl	r5, [r0, #16]
 800bb6a:	7c45      	ldrbmi	r5, [r0, #17]
 800bb6c:	6944      	ldr	r4, [r0, #20]
 800bb6e:	f101 0316 	add.w	r3, r1, #22
 800bb72:	54e5      	strb	r5, [r4, r3]
 800bb74:	0794      	lsls	r4, r2, #30
 800bb76:	bf54      	ite	pl
 800bb78:	7c05      	ldrbpl	r5, [r0, #16]
 800bb7a:	7c45      	ldrbmi	r5, [r0, #17]
 800bb7c:	6944      	ldr	r4, [r0, #20]
 800bb7e:	f101 0317 	add.w	r3, r1, #23
 800bb82:	54e5      	strb	r5, [r4, r3]
 800bb84:	3118      	adds	r1, #24
 800bb86:	f012 0f01 	tst.w	r2, #1
 800bb8a:	e637      	b.n	800b7fc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x28c>
 800bb8c:	0615      	lsls	r5, r2, #24
 800bb8e:	bf54      	ite	pl
 800bb90:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bb94:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bb98:	6945      	ldr	r5, [r0, #20]
 800bb9a:	1c4c      	adds	r4, r1, #1
 800bb9c:	f805 e004 	strb.w	lr, [r5, r4]
 800bba0:	0655      	lsls	r5, r2, #25
 800bba2:	bf54      	ite	pl
 800bba4:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bba8:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bbac:	6945      	ldr	r5, [r0, #20]
 800bbae:	1c8c      	adds	r4, r1, #2
 800bbb0:	f805 e004 	strb.w	lr, [r5, r4]
 800bbb4:	0695      	lsls	r5, r2, #26
 800bbb6:	bf54      	ite	pl
 800bbb8:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bbbc:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bbc0:	6945      	ldr	r5, [r0, #20]
 800bbc2:	1ccc      	adds	r4, r1, #3
 800bbc4:	f805 e004 	strb.w	lr, [r5, r4]
 800bbc8:	06d5      	lsls	r5, r2, #27
 800bbca:	bf54      	ite	pl
 800bbcc:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bbd0:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bbd4:	6945      	ldr	r5, [r0, #20]
 800bbd6:	1d0c      	adds	r4, r1, #4
 800bbd8:	f805 e004 	strb.w	lr, [r5, r4]
 800bbdc:	0715      	lsls	r5, r2, #28
 800bbde:	bf54      	ite	pl
 800bbe0:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bbe4:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bbe8:	6945      	ldr	r5, [r0, #20]
 800bbea:	1d4c      	adds	r4, r1, #5
 800bbec:	f805 e004 	strb.w	lr, [r5, r4]
 800bbf0:	0755      	lsls	r5, r2, #29
 800bbf2:	bf54      	ite	pl
 800bbf4:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bbf8:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bbfc:	6945      	ldr	r5, [r0, #20]
 800bbfe:	1d8c      	adds	r4, r1, #6
 800bc00:	f805 e004 	strb.w	lr, [r5, r4]
 800bc04:	0795      	lsls	r5, r2, #30
 800bc06:	bf58      	it	pl
 800bc08:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bc0c:	6945      	ldr	r5, [r0, #20]
 800bc0e:	bf48      	it	mi
 800bc10:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bc14:	1dcc      	adds	r4, r1, #7
 800bc16:	f805 e004 	strb.w	lr, [r5, r4]
 800bc1a:	07d2      	lsls	r2, r2, #31
 800bc1c:	bf4c      	ite	mi
 800bc1e:	7c45      	ldrbmi	r5, [r0, #17]
 800bc20:	7c05      	ldrbpl	r5, [r0, #16]
 800bc22:	6942      	ldr	r2, [r0, #20]
 800bc24:	f101 0408 	add.w	r4, r1, #8
 800bc28:	5515      	strb	r5, [r2, r4]
 800bc2a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800bc2e:	bf0c      	ite	eq
 800bc30:	7c05      	ldrbeq	r5, [r0, #16]
 800bc32:	7c45      	ldrbne	r5, [r0, #17]
 800bc34:	6944      	ldr	r4, [r0, #20]
 800bc36:	f101 0209 	add.w	r2, r1, #9
 800bc3a:	54a5      	strb	r5, [r4, r2]
 800bc3c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800bc40:	bf0c      	ite	eq
 800bc42:	7c05      	ldrbeq	r5, [r0, #16]
 800bc44:	7c45      	ldrbne	r5, [r0, #17]
 800bc46:	6944      	ldr	r4, [r0, #20]
 800bc48:	f101 020a 	add.w	r2, r1, #10
 800bc4c:	54a5      	strb	r5, [r4, r2]
 800bc4e:	f01c 0f20 	tst.w	ip, #32
 800bc52:	bf0c      	ite	eq
 800bc54:	7c05      	ldrbeq	r5, [r0, #16]
 800bc56:	7c45      	ldrbne	r5, [r0, #17]
 800bc58:	6944      	ldr	r4, [r0, #20]
 800bc5a:	f101 020b 	add.w	r2, r1, #11
 800bc5e:	54a5      	strb	r5, [r4, r2]
 800bc60:	f01c 0f10 	tst.w	ip, #16
 800bc64:	bf0c      	ite	eq
 800bc66:	7c05      	ldrbeq	r5, [r0, #16]
 800bc68:	7c45      	ldrbne	r5, [r0, #17]
 800bc6a:	6944      	ldr	r4, [r0, #20]
 800bc6c:	f101 020c 	add.w	r2, r1, #12
 800bc70:	54a5      	strb	r5, [r4, r2]
 800bc72:	f01c 0f08 	tst.w	ip, #8
 800bc76:	bf0c      	ite	eq
 800bc78:	7c05      	ldrbeq	r5, [r0, #16]
 800bc7a:	7c45      	ldrbne	r5, [r0, #17]
 800bc7c:	6944      	ldr	r4, [r0, #20]
 800bc7e:	f101 020d 	add.w	r2, r1, #13
 800bc82:	54a5      	strb	r5, [r4, r2]
 800bc84:	f01c 0f04 	tst.w	ip, #4
 800bc88:	bf0c      	ite	eq
 800bc8a:	7c05      	ldrbeq	r5, [r0, #16]
 800bc8c:	7c45      	ldrbne	r5, [r0, #17]
 800bc8e:	6944      	ldr	r4, [r0, #20]
 800bc90:	f101 020e 	add.w	r2, r1, #14
 800bc94:	54a5      	strb	r5, [r4, r2]
 800bc96:	f01c 0f02 	tst.w	ip, #2
 800bc9a:	bf0c      	ite	eq
 800bc9c:	7c05      	ldrbeq	r5, [r0, #16]
 800bc9e:	7c45      	ldrbne	r5, [r0, #17]
 800bca0:	6944      	ldr	r4, [r0, #20]
 800bca2:	f101 020f 	add.w	r2, r1, #15
 800bca6:	54a5      	strb	r5, [r4, r2]
 800bca8:	f01c 0f01 	tst.w	ip, #1
 800bcac:	bf14      	ite	ne
 800bcae:	7c45      	ldrbne	r5, [r0, #17]
 800bcb0:	7c05      	ldrbeq	r5, [r0, #16]
 800bcb2:	6944      	ldr	r4, [r0, #20]
 800bcb4:	f101 0210 	add.w	r2, r1, #16
 800bcb8:	e564      	b.n	800b784 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x214>
 800bcba:	061d      	lsls	r5, r3, #24
 800bcbc:	bf54      	ite	pl
 800bcbe:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bcc2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bcc6:	6945      	ldr	r5, [r0, #20]
 800bcc8:	1c4c      	adds	r4, r1, #1
 800bcca:	f805 e004 	strb.w	lr, [r5, r4]
 800bcce:	065d      	lsls	r5, r3, #25
 800bcd0:	bf54      	ite	pl
 800bcd2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bcd6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bcda:	6945      	ldr	r5, [r0, #20]
 800bcdc:	1c8c      	adds	r4, r1, #2
 800bcde:	f805 e004 	strb.w	lr, [r5, r4]
 800bce2:	069d      	lsls	r5, r3, #26
 800bce4:	bf54      	ite	pl
 800bce6:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bcea:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bcee:	6945      	ldr	r5, [r0, #20]
 800bcf0:	1ccc      	adds	r4, r1, #3
 800bcf2:	f805 e004 	strb.w	lr, [r5, r4]
 800bcf6:	06dd      	lsls	r5, r3, #27
 800bcf8:	bf54      	ite	pl
 800bcfa:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bcfe:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bd02:	6945      	ldr	r5, [r0, #20]
 800bd04:	1d0c      	adds	r4, r1, #4
 800bd06:	f805 e004 	strb.w	lr, [r5, r4]
 800bd0a:	071d      	lsls	r5, r3, #28
 800bd0c:	bf54      	ite	pl
 800bd0e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bd12:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bd16:	6945      	ldr	r5, [r0, #20]
 800bd18:	1d4c      	adds	r4, r1, #5
 800bd1a:	f805 e004 	strb.w	lr, [r5, r4]
 800bd1e:	075d      	lsls	r5, r3, #29
 800bd20:	bf54      	ite	pl
 800bd22:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bd26:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bd2a:	6945      	ldr	r5, [r0, #20]
 800bd2c:	1d8c      	adds	r4, r1, #6
 800bd2e:	f805 e004 	strb.w	lr, [r5, r4]
 800bd32:	079d      	lsls	r5, r3, #30
 800bd34:	bf58      	it	pl
 800bd36:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bd3a:	6945      	ldr	r5, [r0, #20]
 800bd3c:	bf48      	it	mi
 800bd3e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bd42:	1dcc      	adds	r4, r1, #7
 800bd44:	f805 e004 	strb.w	lr, [r5, r4]
 800bd48:	07dd      	lsls	r5, r3, #31
 800bd4a:	bf4c      	ite	mi
 800bd4c:	7c45      	ldrbmi	r5, [r0, #17]
 800bd4e:	7c05      	ldrbpl	r5, [r0, #16]
 800bd50:	6943      	ldr	r3, [r0, #20]
 800bd52:	f101 0408 	add.w	r4, r1, #8
 800bd56:	551d      	strb	r5, [r3, r4]
 800bd58:	0614      	lsls	r4, r2, #24
 800bd5a:	bf54      	ite	pl
 800bd5c:	7c05      	ldrbpl	r5, [r0, #16]
 800bd5e:	7c45      	ldrbmi	r5, [r0, #17]
 800bd60:	6944      	ldr	r4, [r0, #20]
 800bd62:	f101 0309 	add.w	r3, r1, #9
 800bd66:	54e5      	strb	r5, [r4, r3]
 800bd68:	0655      	lsls	r5, r2, #25
 800bd6a:	bf54      	ite	pl
 800bd6c:	7c05      	ldrbpl	r5, [r0, #16]
 800bd6e:	7c45      	ldrbmi	r5, [r0, #17]
 800bd70:	6944      	ldr	r4, [r0, #20]
 800bd72:	f101 030a 	add.w	r3, r1, #10
 800bd76:	54e5      	strb	r5, [r4, r3]
 800bd78:	0694      	lsls	r4, r2, #26
 800bd7a:	bf54      	ite	pl
 800bd7c:	7c05      	ldrbpl	r5, [r0, #16]
 800bd7e:	7c45      	ldrbmi	r5, [r0, #17]
 800bd80:	6944      	ldr	r4, [r0, #20]
 800bd82:	f101 030b 	add.w	r3, r1, #11
 800bd86:	54e5      	strb	r5, [r4, r3]
 800bd88:	06d5      	lsls	r5, r2, #27
 800bd8a:	bf54      	ite	pl
 800bd8c:	7c05      	ldrbpl	r5, [r0, #16]
 800bd8e:	7c45      	ldrbmi	r5, [r0, #17]
 800bd90:	6944      	ldr	r4, [r0, #20]
 800bd92:	f101 030c 	add.w	r3, r1, #12
 800bd96:	54e5      	strb	r5, [r4, r3]
 800bd98:	0714      	lsls	r4, r2, #28
 800bd9a:	bf54      	ite	pl
 800bd9c:	7c05      	ldrbpl	r5, [r0, #16]
 800bd9e:	7c45      	ldrbmi	r5, [r0, #17]
 800bda0:	6944      	ldr	r4, [r0, #20]
 800bda2:	f101 030d 	add.w	r3, r1, #13
 800bda6:	54e5      	strb	r5, [r4, r3]
 800bda8:	0755      	lsls	r5, r2, #29
 800bdaa:	bf54      	ite	pl
 800bdac:	7c05      	ldrbpl	r5, [r0, #16]
 800bdae:	7c45      	ldrbmi	r5, [r0, #17]
 800bdb0:	6944      	ldr	r4, [r0, #20]
 800bdb2:	f101 030e 	add.w	r3, r1, #14
 800bdb6:	54e5      	strb	r5, [r4, r3]
 800bdb8:	0794      	lsls	r4, r2, #30
 800bdba:	bf58      	it	pl
 800bdbc:	7c05      	ldrbpl	r5, [r0, #16]
 800bdbe:	6944      	ldr	r4, [r0, #20]
 800bdc0:	bf48      	it	mi
 800bdc2:	7c45      	ldrbmi	r5, [r0, #17]
 800bdc4:	f101 030f 	add.w	r3, r1, #15
 800bdc8:	54e5      	strb	r5, [r4, r3]
 800bdca:	07d2      	lsls	r2, r2, #31
 800bdcc:	bf4c      	ite	mi
 800bdce:	7c44      	ldrbmi	r4, [r0, #17]
 800bdd0:	7c04      	ldrbpl	r4, [r0, #16]
 800bdd2:	6942      	ldr	r2, [r0, #20]
 800bdd4:	f101 0310 	add.w	r3, r1, #16
 800bdd8:	e5a5      	b.n	800b926 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x3b6>
 800bdda:	061d      	lsls	r5, r3, #24
 800bddc:	bf54      	ite	pl
 800bdde:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bde2:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bde6:	6945      	ldr	r5, [r0, #20]
 800bde8:	1c4c      	adds	r4, r1, #1
 800bdea:	f805 e004 	strb.w	lr, [r5, r4]
 800bdee:	065d      	lsls	r5, r3, #25
 800bdf0:	bf54      	ite	pl
 800bdf2:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800bdf6:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800bdfa:	6945      	ldr	r5, [r0, #20]
 800bdfc:	1c8c      	adds	r4, r1, #2
 800bdfe:	f805 e004 	strb.w	lr, [r5, r4]
 800be02:	069d      	lsls	r5, r3, #26
 800be04:	bf54      	ite	pl
 800be06:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800be0a:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800be0e:	6945      	ldr	r5, [r0, #20]
 800be10:	1ccc      	adds	r4, r1, #3
 800be12:	f805 e004 	strb.w	lr, [r5, r4]
 800be16:	06dd      	lsls	r5, r3, #27
 800be18:	bf54      	ite	pl
 800be1a:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800be1e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800be22:	6945      	ldr	r5, [r0, #20]
 800be24:	1d0c      	adds	r4, r1, #4
 800be26:	f805 e004 	strb.w	lr, [r5, r4]
 800be2a:	071d      	lsls	r5, r3, #28
 800be2c:	bf54      	ite	pl
 800be2e:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800be32:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800be36:	6945      	ldr	r5, [r0, #20]
 800be38:	1d4c      	adds	r4, r1, #5
 800be3a:	f805 e004 	strb.w	lr, [r5, r4]
 800be3e:	075d      	lsls	r5, r3, #29
 800be40:	bf54      	ite	pl
 800be42:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800be46:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800be4a:	6945      	ldr	r5, [r0, #20]
 800be4c:	1d8c      	adds	r4, r1, #6
 800be4e:	f805 e004 	strb.w	lr, [r5, r4]
 800be52:	079d      	lsls	r5, r3, #30
 800be54:	bf58      	it	pl
 800be56:	f890 e010 	ldrbpl.w	lr, [r0, #16]
 800be5a:	6945      	ldr	r5, [r0, #20]
 800be5c:	bf48      	it	mi
 800be5e:	f890 e011 	ldrbmi.w	lr, [r0, #17]
 800be62:	1dcc      	adds	r4, r1, #7
 800be64:	f805 e004 	strb.w	lr, [r5, r4]
 800be68:	07db      	lsls	r3, r3, #31
 800be6a:	bf4c      	ite	mi
 800be6c:	7c45      	ldrbmi	r5, [r0, #17]
 800be6e:	7c05      	ldrbpl	r5, [r0, #16]
 800be70:	6943      	ldr	r3, [r0, #20]
 800be72:	f101 0408 	add.w	r4, r1, #8
 800be76:	551d      	strb	r5, [r3, r4]
 800be78:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800be7c:	bf0c      	ite	eq
 800be7e:	7c05      	ldrbeq	r5, [r0, #16]
 800be80:	7c45      	ldrbne	r5, [r0, #17]
 800be82:	6944      	ldr	r4, [r0, #20]
 800be84:	f101 0309 	add.w	r3, r1, #9
 800be88:	54e5      	strb	r5, [r4, r3]
 800be8a:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800be8e:	bf0c      	ite	eq
 800be90:	7c05      	ldrbeq	r5, [r0, #16]
 800be92:	7c45      	ldrbne	r5, [r0, #17]
 800be94:	6944      	ldr	r4, [r0, #20]
 800be96:	f101 030a 	add.w	r3, r1, #10
 800be9a:	54e5      	strb	r5, [r4, r3]
 800be9c:	f01c 0f20 	tst.w	ip, #32
 800bea0:	bf0c      	ite	eq
 800bea2:	7c05      	ldrbeq	r5, [r0, #16]
 800bea4:	7c45      	ldrbne	r5, [r0, #17]
 800bea6:	6944      	ldr	r4, [r0, #20]
 800bea8:	f101 030b 	add.w	r3, r1, #11
 800beac:	54e5      	strb	r5, [r4, r3]
 800beae:	f01c 0f10 	tst.w	ip, #16
 800beb2:	bf0c      	ite	eq
 800beb4:	7c05      	ldrbeq	r5, [r0, #16]
 800beb6:	7c45      	ldrbne	r5, [r0, #17]
 800beb8:	6944      	ldr	r4, [r0, #20]
 800beba:	f101 030c 	add.w	r3, r1, #12
 800bebe:	54e5      	strb	r5, [r4, r3]
 800bec0:	f01c 0f08 	tst.w	ip, #8
 800bec4:	bf0c      	ite	eq
 800bec6:	7c05      	ldrbeq	r5, [r0, #16]
 800bec8:	7c45      	ldrbne	r5, [r0, #17]
 800beca:	6944      	ldr	r4, [r0, #20]
 800becc:	f101 030d 	add.w	r3, r1, #13
 800bed0:	54e5      	strb	r5, [r4, r3]
 800bed2:	f01c 0f04 	tst.w	ip, #4
 800bed6:	bf0c      	ite	eq
 800bed8:	7c05      	ldrbeq	r5, [r0, #16]
 800beda:	7c45      	ldrbne	r5, [r0, #17]
 800bedc:	6944      	ldr	r4, [r0, #20]
 800bede:	f101 030e 	add.w	r3, r1, #14
 800bee2:	54e5      	strb	r5, [r4, r3]
 800bee4:	f01c 0f02 	tst.w	ip, #2
 800bee8:	bf0c      	ite	eq
 800beea:	7c05      	ldrbeq	r5, [r0, #16]
 800beec:	7c45      	ldrbne	r5, [r0, #17]
 800beee:	6944      	ldr	r4, [r0, #20]
 800bef0:	f101 030f 	add.w	r3, r1, #15
 800bef4:	54e5      	strb	r5, [r4, r3]
 800bef6:	f01c 0f01 	tst.w	ip, #1
 800befa:	bf14      	ite	ne
 800befc:	7c45      	ldrbne	r5, [r0, #17]
 800befe:	7c05      	ldrbeq	r5, [r0, #16]
 800bf00:	6944      	ldr	r4, [r0, #20]
 800bf02:	f101 0310 	add.w	r3, r1, #16
 800bf06:	e604      	b.n	800bb12 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x5a2>

0800bf08 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	6804      	ldr	r4, [r0, #0]
 800bf0c:	f89d c010 	ldrb.w	ip, [sp, #16]
 800bf10:	2c07      	cmp	r4, #7
 800bf12:	f89d e014 	ldrb.w	lr, [sp, #20]
 800bf16:	d000      	beq.n	800bf1a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x12>
 800bf18:	bd70      	pop	{r4, r5, r6, pc}
 800bf1a:	061e      	lsls	r6, r3, #24
 800bf1c:	ea4f 1141 	mov.w	r1, r1, lsl #5
 800bf20:	bf54      	ite	pl
 800bf22:	7c06      	ldrbpl	r6, [r0, #16]
 800bf24:	7c46      	ldrbmi	r6, [r0, #17]
 800bf26:	6945      	ldr	r5, [r0, #20]
 800bf28:	1c4c      	adds	r4, r1, #1
 800bf2a:	552e      	strb	r6, [r5, r4]
 800bf2c:	065d      	lsls	r5, r3, #25
 800bf2e:	bf54      	ite	pl
 800bf30:	7c06      	ldrbpl	r6, [r0, #16]
 800bf32:	7c46      	ldrbmi	r6, [r0, #17]
 800bf34:	6945      	ldr	r5, [r0, #20]
 800bf36:	1c8c      	adds	r4, r1, #2
 800bf38:	552e      	strb	r6, [r5, r4]
 800bf3a:	069e      	lsls	r6, r3, #26
 800bf3c:	bf54      	ite	pl
 800bf3e:	7c06      	ldrbpl	r6, [r0, #16]
 800bf40:	7c46      	ldrbmi	r6, [r0, #17]
 800bf42:	6945      	ldr	r5, [r0, #20]
 800bf44:	1ccc      	adds	r4, r1, #3
 800bf46:	552e      	strb	r6, [r5, r4]
 800bf48:	06dd      	lsls	r5, r3, #27
 800bf4a:	bf54      	ite	pl
 800bf4c:	7c06      	ldrbpl	r6, [r0, #16]
 800bf4e:	7c46      	ldrbmi	r6, [r0, #17]
 800bf50:	6945      	ldr	r5, [r0, #20]
 800bf52:	1d0c      	adds	r4, r1, #4
 800bf54:	552e      	strb	r6, [r5, r4]
 800bf56:	071e      	lsls	r6, r3, #28
 800bf58:	bf54      	ite	pl
 800bf5a:	7c06      	ldrbpl	r6, [r0, #16]
 800bf5c:	7c46      	ldrbmi	r6, [r0, #17]
 800bf5e:	6945      	ldr	r5, [r0, #20]
 800bf60:	1d4c      	adds	r4, r1, #5
 800bf62:	552e      	strb	r6, [r5, r4]
 800bf64:	075d      	lsls	r5, r3, #29
 800bf66:	bf54      	ite	pl
 800bf68:	7c06      	ldrbpl	r6, [r0, #16]
 800bf6a:	7c46      	ldrbmi	r6, [r0, #17]
 800bf6c:	6945      	ldr	r5, [r0, #20]
 800bf6e:	1d8c      	adds	r4, r1, #6
 800bf70:	552e      	strb	r6, [r5, r4]
 800bf72:	079e      	lsls	r6, r3, #30
 800bf74:	6945      	ldr	r5, [r0, #20]
 800bf76:	bf54      	ite	pl
 800bf78:	7c06      	ldrbpl	r6, [r0, #16]
 800bf7a:	7c46      	ldrbmi	r6, [r0, #17]
 800bf7c:	1dcc      	adds	r4, r1, #7
 800bf7e:	552e      	strb	r6, [r5, r4]
 800bf80:	07dd      	lsls	r5, r3, #31
 800bf82:	bf4c      	ite	mi
 800bf84:	7c45      	ldrbmi	r5, [r0, #17]
 800bf86:	7c05      	ldrbpl	r5, [r0, #16]
 800bf88:	6943      	ldr	r3, [r0, #20]
 800bf8a:	f101 0408 	add.w	r4, r1, #8
 800bf8e:	551d      	strb	r5, [r3, r4]
 800bf90:	0614      	lsls	r4, r2, #24
 800bf92:	bf54      	ite	pl
 800bf94:	7c05      	ldrbpl	r5, [r0, #16]
 800bf96:	7c45      	ldrbmi	r5, [r0, #17]
 800bf98:	6944      	ldr	r4, [r0, #20]
 800bf9a:	f101 0309 	add.w	r3, r1, #9
 800bf9e:	54e5      	strb	r5, [r4, r3]
 800bfa0:	0656      	lsls	r6, r2, #25
 800bfa2:	bf54      	ite	pl
 800bfa4:	7c05      	ldrbpl	r5, [r0, #16]
 800bfa6:	7c45      	ldrbmi	r5, [r0, #17]
 800bfa8:	6944      	ldr	r4, [r0, #20]
 800bfaa:	f101 030a 	add.w	r3, r1, #10
 800bfae:	54e5      	strb	r5, [r4, r3]
 800bfb0:	0695      	lsls	r5, r2, #26
 800bfb2:	bf54      	ite	pl
 800bfb4:	7c05      	ldrbpl	r5, [r0, #16]
 800bfb6:	7c45      	ldrbmi	r5, [r0, #17]
 800bfb8:	6944      	ldr	r4, [r0, #20]
 800bfba:	f101 030b 	add.w	r3, r1, #11
 800bfbe:	54e5      	strb	r5, [r4, r3]
 800bfc0:	06d4      	lsls	r4, r2, #27
 800bfc2:	bf54      	ite	pl
 800bfc4:	7c05      	ldrbpl	r5, [r0, #16]
 800bfc6:	7c45      	ldrbmi	r5, [r0, #17]
 800bfc8:	6944      	ldr	r4, [r0, #20]
 800bfca:	f101 030c 	add.w	r3, r1, #12
 800bfce:	54e5      	strb	r5, [r4, r3]
 800bfd0:	0716      	lsls	r6, r2, #28
 800bfd2:	bf54      	ite	pl
 800bfd4:	7c05      	ldrbpl	r5, [r0, #16]
 800bfd6:	7c45      	ldrbmi	r5, [r0, #17]
 800bfd8:	6944      	ldr	r4, [r0, #20]
 800bfda:	f101 030d 	add.w	r3, r1, #13
 800bfde:	54e5      	strb	r5, [r4, r3]
 800bfe0:	0755      	lsls	r5, r2, #29
 800bfe2:	bf54      	ite	pl
 800bfe4:	7c05      	ldrbpl	r5, [r0, #16]
 800bfe6:	7c45      	ldrbmi	r5, [r0, #17]
 800bfe8:	6944      	ldr	r4, [r0, #20]
 800bfea:	f101 030e 	add.w	r3, r1, #14
 800bfee:	54e5      	strb	r5, [r4, r3]
 800bff0:	0794      	lsls	r4, r2, #30
 800bff2:	bf58      	it	pl
 800bff4:	7c05      	ldrbpl	r5, [r0, #16]
 800bff6:	6944      	ldr	r4, [r0, #20]
 800bff8:	bf48      	it	mi
 800bffa:	7c45      	ldrbmi	r5, [r0, #17]
 800bffc:	f101 030f 	add.w	r3, r1, #15
 800c000:	54e5      	strb	r5, [r4, r3]
 800c002:	07d2      	lsls	r2, r2, #31
 800c004:	bf4c      	ite	mi
 800c006:	7c44      	ldrbmi	r4, [r0, #17]
 800c008:	7c04      	ldrbpl	r4, [r0, #16]
 800c00a:	6942      	ldr	r2, [r0, #20]
 800c00c:	f101 0310 	add.w	r3, r1, #16
 800c010:	54d4      	strb	r4, [r2, r3]
 800c012:	f01c 0f80 	tst.w	ip, #128	; 0x80
 800c016:	bf0c      	ite	eq
 800c018:	7c04      	ldrbeq	r4, [r0, #16]
 800c01a:	7c44      	ldrbne	r4, [r0, #17]
 800c01c:	6942      	ldr	r2, [r0, #20]
 800c01e:	f101 0311 	add.w	r3, r1, #17
 800c022:	54d4      	strb	r4, [r2, r3]
 800c024:	f01c 0f40 	tst.w	ip, #64	; 0x40
 800c028:	bf14      	ite	ne
 800c02a:	7c44      	ldrbne	r4, [r0, #17]
 800c02c:	7c04      	ldrbeq	r4, [r0, #16]
 800c02e:	6942      	ldr	r2, [r0, #20]
 800c030:	f101 0312 	add.w	r3, r1, #18
 800c034:	54d4      	strb	r4, [r2, r3]
 800c036:	f01c 0f20 	tst.w	ip, #32
 800c03a:	bf14      	ite	ne
 800c03c:	7c44      	ldrbne	r4, [r0, #17]
 800c03e:	7c04      	ldrbeq	r4, [r0, #16]
 800c040:	6942      	ldr	r2, [r0, #20]
 800c042:	f101 0313 	add.w	r3, r1, #19
 800c046:	54d4      	strb	r4, [r2, r3]
 800c048:	f01c 0f10 	tst.w	ip, #16
 800c04c:	bf14      	ite	ne
 800c04e:	7c44      	ldrbne	r4, [r0, #17]
 800c050:	7c04      	ldrbeq	r4, [r0, #16]
 800c052:	6942      	ldr	r2, [r0, #20]
 800c054:	f101 0314 	add.w	r3, r1, #20
 800c058:	54d4      	strb	r4, [r2, r3]
 800c05a:	f01c 0f08 	tst.w	ip, #8
 800c05e:	bf14      	ite	ne
 800c060:	7c44      	ldrbne	r4, [r0, #17]
 800c062:	7c04      	ldrbeq	r4, [r0, #16]
 800c064:	6942      	ldr	r2, [r0, #20]
 800c066:	f101 0315 	add.w	r3, r1, #21
 800c06a:	54d4      	strb	r4, [r2, r3]
 800c06c:	f01c 0f04 	tst.w	ip, #4
 800c070:	bf14      	ite	ne
 800c072:	7c44      	ldrbne	r4, [r0, #17]
 800c074:	7c04      	ldrbeq	r4, [r0, #16]
 800c076:	6942      	ldr	r2, [r0, #20]
 800c078:	f101 0316 	add.w	r3, r1, #22
 800c07c:	54d4      	strb	r4, [r2, r3]
 800c07e:	f01c 0f02 	tst.w	ip, #2
 800c082:	bf14      	ite	ne
 800c084:	7c44      	ldrbne	r4, [r0, #17]
 800c086:	7c04      	ldrbeq	r4, [r0, #16]
 800c088:	6942      	ldr	r2, [r0, #20]
 800c08a:	f101 0317 	add.w	r3, r1, #23
 800c08e:	54d4      	strb	r4, [r2, r3]
 800c090:	f01c 0f01 	tst.w	ip, #1
 800c094:	bf14      	ite	ne
 800c096:	7c44      	ldrbne	r4, [r0, #17]
 800c098:	7c04      	ldrbeq	r4, [r0, #16]
 800c09a:	6942      	ldr	r2, [r0, #20]
 800c09c:	f101 0318 	add.w	r3, r1, #24
 800c0a0:	54d4      	strb	r4, [r2, r3]
 800c0a2:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800c0a6:	bf0c      	ite	eq
 800c0a8:	7c04      	ldrbeq	r4, [r0, #16]
 800c0aa:	7c44      	ldrbne	r4, [r0, #17]
 800c0ac:	6942      	ldr	r2, [r0, #20]
 800c0ae:	f101 0319 	add.w	r3, r1, #25
 800c0b2:	54d4      	strb	r4, [r2, r3]
 800c0b4:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800c0b8:	bf0c      	ite	eq
 800c0ba:	7c04      	ldrbeq	r4, [r0, #16]
 800c0bc:	7c44      	ldrbne	r4, [r0, #17]
 800c0be:	6942      	ldr	r2, [r0, #20]
 800c0c0:	f101 031a 	add.w	r3, r1, #26
 800c0c4:	54d4      	strb	r4, [r2, r3]
 800c0c6:	f01e 0f20 	tst.w	lr, #32
 800c0ca:	bf0c      	ite	eq
 800c0cc:	7c04      	ldrbeq	r4, [r0, #16]
 800c0ce:	7c44      	ldrbne	r4, [r0, #17]
 800c0d0:	6942      	ldr	r2, [r0, #20]
 800c0d2:	f101 031b 	add.w	r3, r1, #27
 800c0d6:	54d4      	strb	r4, [r2, r3]
 800c0d8:	f01e 0f10 	tst.w	lr, #16
 800c0dc:	bf0c      	ite	eq
 800c0de:	7c04      	ldrbeq	r4, [r0, #16]
 800c0e0:	7c44      	ldrbne	r4, [r0, #17]
 800c0e2:	6942      	ldr	r2, [r0, #20]
 800c0e4:	f101 031c 	add.w	r3, r1, #28
 800c0e8:	54d4      	strb	r4, [r2, r3]
 800c0ea:	f01e 0f08 	tst.w	lr, #8
 800c0ee:	bf0c      	ite	eq
 800c0f0:	7c04      	ldrbeq	r4, [r0, #16]
 800c0f2:	7c44      	ldrbne	r4, [r0, #17]
 800c0f4:	6942      	ldr	r2, [r0, #20]
 800c0f6:	f101 031d 	add.w	r3, r1, #29
 800c0fa:	54d4      	strb	r4, [r2, r3]
 800c0fc:	f01e 0f04 	tst.w	lr, #4
 800c100:	bf0c      	ite	eq
 800c102:	7c04      	ldrbeq	r4, [r0, #16]
 800c104:	7c44      	ldrbne	r4, [r0, #17]
 800c106:	6942      	ldr	r2, [r0, #20]
 800c108:	f101 031e 	add.w	r3, r1, #30
 800c10c:	54d4      	strb	r4, [r2, r3]
 800c10e:	f01e 0f02 	tst.w	lr, #2
 800c112:	6942      	ldr	r2, [r0, #20]
 800c114:	bf0c      	ite	eq
 800c116:	7c04      	ldrbeq	r4, [r0, #16]
 800c118:	7c44      	ldrbne	r4, [r0, #17]
 800c11a:	f101 031f 	add.w	r3, r1, #31
 800c11e:	54d4      	strb	r4, [r2, r3]
 800c120:	f01e 0f01 	tst.w	lr, #1
 800c124:	bf14      	ite	ne
 800c126:	7c42      	ldrbne	r2, [r0, #17]
 800c128:	7c02      	ldrbeq	r2, [r0, #16]
 800c12a:	6943      	ldr	r3, [r0, #20]
 800c12c:	3120      	adds	r1, #32
 800c12e:	545a      	strb	r2, [r3, r1]
 800c130:	bd70      	pop	{r4, r5, r6, pc}
 800c132:	bf00      	nop

0800c134 <WS28xx::~WS28xx()>:
 800c134:	2200      	movs	r2, #0
 800c136:	4b01      	ldr	r3, [pc, #4]	; (800c13c <WS28xx::~WS28xx()+0x8>)
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	4770      	bx	lr
 800c13c:	20001944 	andcs	r1, r0, r4, asr #18

0800c140 <WS28xx::SetupBuffers()>:
 800c140:	b513      	push	{r0, r1, r4, lr}
 800c142:	4604      	mov	r4, r0
 800c144:	a801      	add	r0, sp, #4
 800c146:	f007 f837 	bl	80131b8 <gd32_spi_dma_tx_prepare(unsigned int*)>
 800c14a:	9b01      	ldr	r3, [sp, #4]
 800c14c:	4a07      	ldr	r2, [pc, #28]	; (800c16c <WS28xx::SetupBuffers()+0x2c>)
 800c14e:	085b      	lsrs	r3, r3, #1
 800c150:	f023 0303 	bic.w	r3, r3, #3
 800c154:	6160      	str	r0, [r4, #20]
 800c156:	4418      	add	r0, r3
 800c158:	68e3      	ldr	r3, [r4, #12]
 800c15a:	61a0      	str	r0, [r4, #24]
 800c15c:	6013      	str	r3, [r2, #0]
 800c15e:	3303      	adds	r3, #3
 800c160:	f023 0303 	bic.w	r3, r3, #3
 800c164:	60e3      	str	r3, [r4, #12]
 800c166:	b002      	add	sp, #8
 800c168:	bd10      	pop	{r4, pc}
 800c16a:	bf00      	nop
 800c16c:	20001940 	andcs	r1, r0, r0, asr #18

0800c170 <WS28xx::WS28xx(PixelConfiguration&)>:
 800c170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c172:	23aa      	movs	r3, #170	; 0xaa
 800c174:	2203      	movs	r2, #3
 800c176:	e9c0 2300 	strd	r2, r3, [r0]
 800c17a:	2306      	movs	r3, #6
 800c17c:	6083      	str	r3, [r0, #8]
 800c17e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800c182:	8243      	strh	r3, [r0, #18]
 800c184:	2300      	movs	r3, #0
 800c186:	460d      	mov	r5, r1
 800c188:	4604      	mov	r4, r0
 800c18a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800c18e:	4b17      	ldr	r3, [pc, #92]	; (800c1ec <WS28xx::WS28xx(PixelConfiguration&)+0x7c>)
 800c190:	a901      	add	r1, sp, #4
 800c192:	6018      	str	r0, [r3, #0]
 800c194:	4628      	mov	r0, r5
 800c196:	f7fe fdd3 	bl	800ad40 <PixelConfiguration::Validate(unsigned int&)>
 800c19a:	4628      	mov	r0, r5
 800c19c:	f7fe fe3c 	bl	800ae18 <PixelConfiguration::Dump()>
 800c1a0:	68ab      	ldr	r3, [r5, #8]
 800c1a2:	686a      	ldr	r2, [r5, #4]
 800c1a4:	60a3      	str	r3, [r4, #8]
 800c1a6:	8a2b      	ldrh	r3, [r5, #16]
 800c1a8:	6829      	ldr	r1, [r5, #0]
 800c1aa:	8223      	strh	r3, [r4, #16]
 800c1ac:	7cab      	ldrb	r3, [r5, #18]
 800c1ae:	7ce8      	ldrb	r0, [r5, #19]
 800c1b0:	74e3      	strb	r3, [r4, #19]
 800c1b2:	9b01      	ldr	r3, [sp, #4]
 800c1b4:	6021      	str	r1, [r4, #0]
 800c1b6:	4353      	muls	r3, r2
 800c1b8:	6062      	str	r2, [r4, #4]
 800c1ba:	74a0      	strb	r0, [r4, #18]
 800c1bc:	b998      	cbnz	r0, 800c1e6 <WS28xx::WS28xx(PixelConfiguration&)+0x76>
 800c1be:	390b      	subs	r1, #11
 800c1c0:	2902      	cmp	r1, #2
 800c1c2:	60e3      	str	r3, [r4, #12]
 800c1c4:	bf9e      	ittt	ls
 800c1c6:	68e3      	ldrls	r3, [r4, #12]
 800c1c8:	3208      	addls	r2, #8
 800c1ca:	18d2      	addls	r2, r2, r3
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	bf98      	it	ls
 800c1d0:	60e2      	strls	r2, [r4, #12]
 800c1d2:	f7ff ffb5 	bl	800c140 <WS28xx::SetupBuffers()>
 800c1d6:	f006 ff69 	bl	80130ac <gd32_spi_dma_begin()>
 800c1da:	68e8      	ldr	r0, [r5, #12]
 800c1dc:	f006 ffd8 	bl	8013190 <gd32_spi_dma_set_speed_hz(unsigned int)>
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	b003      	add	sp, #12
 800c1e4:	bd30      	pop	{r4, r5, pc}
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	e7e8      	b.n	800c1be <WS28xx::WS28xx(PixelConfiguration&)+0x4e>
 800c1ec:	20001944 	andcs	r1, r0, r4, asr #18

0800c1f0 <WS28xx::Update()>:
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	b430      	push	{r4, r5}
 800c1f4:	4b0b      	ldr	r3, [pc, #44]	; (800c224 <WS28xx::Update()+0x34>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68c1      	ldr	r1, [r0, #12]
 800c1fa:	6944      	ldr	r4, [r0, #20]
 800c1fc:	4299      	cmp	r1, r3
 800c1fe:	d902      	bls.n	800c206 <WS28xx::Update()+0x16>
 800c200:	54e2      	strb	r2, [r4, r3]
 800c202:	3301      	adds	r3, #1
 800c204:	e7f8      	b.n	800c1f8 <WS28xx::Update()+0x8>
 800c206:	2300      	movs	r3, #0
 800c208:	6980      	ldr	r0, [r0, #24]
 800c20a:	084d      	lsrs	r5, r1, #1
 800c20c:	429d      	cmp	r5, r3
 800c20e:	d006      	beq.n	800c21e <WS28xx::Update()+0x2e>
 800c210:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800c214:	ba52      	rev16	r2, r2
 800c216:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800c21a:	3301      	adds	r3, #1
 800c21c:	e7f6      	b.n	800c20c <WS28xx::Update()+0x1c>
 800c21e:	bc30      	pop	{r4, r5}
 800c220:	f006 bfd2 	b.w	80131c8 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 800c224:	20001940 	andcs	r1, r0, r0, asr #18

0800c228 <WS28xx::Blackout()>:
 800c228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c22a:	e9d0 6305 	ldrd	r6, r3, [r0, #20]
 800c22e:	4604      	mov	r4, r0
 800c230:	6143      	str	r3, [r0, #20]
 800c232:	f3bf 8f6f 	isb	sy
 800c236:	f006 ffe1 	bl	80131fc <gd32_spi_dma_tx_is_active()>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d1f9      	bne.n	800c232 <WS28xx::Blackout()+0xa>
 800c23e:	6822      	ldr	r2, [r4, #0]
 800c240:	6963      	ldr	r3, [r4, #20]
 800c242:	3a0b      	subs	r2, #11
 800c244:	2a02      	cmp	r2, #2
 800c246:	7018      	strb	r0, [r3, #0]
 800c248:	d82a      	bhi.n	800c2a0 <WS28xx::Blackout()+0x78>
 800c24a:	4605      	mov	r5, r0
 800c24c:	4607      	mov	r7, r0
 800c24e:	7058      	strb	r0, [r3, #1]
 800c250:	7098      	strb	r0, [r3, #2]
 800c252:	70d8      	strb	r0, [r3, #3]
 800c254:	6863      	ldr	r3, [r4, #4]
 800c256:	42ab      	cmp	r3, r5
 800c258:	d908      	bls.n	800c26c <WS28xx::Blackout()+0x44>
 800c25a:	2300      	movs	r3, #0
 800c25c:	4629      	mov	r1, r5
 800c25e:	461a      	mov	r2, r3
 800c260:	4620      	mov	r0, r4
 800c262:	9700      	str	r7, [sp, #0]
 800c264:	f7ff f984 	bl	800b570 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800c268:	3501      	adds	r5, #1
 800c26a:	e7f3      	b.n	800c254 <WS28xx::Blackout()+0x2c>
 800c26c:	6821      	ldr	r1, [r4, #0]
 800c26e:	68e2      	ldr	r2, [r4, #12]
 800c270:	390b      	subs	r1, #11
 800c272:	2901      	cmp	r1, #1
 800c274:	bf94      	ite	ls
 800c276:	21ff      	movls	r1, #255	; 0xff
 800c278:	2100      	movhi	r1, #0
 800c27a:	6960      	ldr	r0, [r4, #20]
 800c27c:	3a04      	subs	r2, #4
 800c27e:	1883      	adds	r3, r0, r2
 800c280:	5481      	strb	r1, [r0, r2]
 800c282:	7059      	strb	r1, [r3, #1]
 800c284:	7099      	strb	r1, [r3, #2]
 800c286:	70d9      	strb	r1, [r3, #3]
 800c288:	4620      	mov	r0, r4
 800c28a:	f7ff ffb1 	bl	800c1f0 <WS28xx::Update()>
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f006 ffb3 	bl	80131fc <gd32_spi_dma_tx_is_active()>
 800c296:	2800      	cmp	r0, #0
 800c298:	d1f9      	bne.n	800c28e <WS28xx::Blackout()+0x66>
 800c29a:	6166      	str	r6, [r4, #20]
 800c29c:	b003      	add	sp, #12
 800c29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a0:	6963      	ldr	r3, [r4, #20]
 800c2a2:	6821      	ldr	r1, [r4, #0]
 800c2a4:	1c5a      	adds	r2, r3, #1
 800c2a6:	b101      	cbz	r1, 800c2aa <WS28xx::Blackout()+0x82>
 800c2a8:	7c21      	ldrb	r1, [r4, #16]
 800c2aa:	68e0      	ldr	r0, [r4, #12]
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	4403      	add	r3, r0
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d0e9      	beq.n	800c288 <WS28xx::Blackout()+0x60>
 800c2b4:	f802 1b01 	strb.w	r1, [r2], #1
 800c2b8:	e7fa      	b.n	800c2b0 <WS28xx::Blackout()+0x88>
	...

0800c2bc <RemoteConfig::HandleList()>:
 800c2bc:	2212      	movs	r2, #18
 800c2be:	6803      	ldr	r3, [r0, #0]
 800c2c0:	492f      	ldr	r1, [pc, #188]	; (800c380 <RemoteConfig::HandleList()+0xc4>)
 800c2c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2c6:	fb02 1103 	mla	r1, r2, r3, r1
 800c2ca:	220c      	movs	r2, #12
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	6843      	ldr	r3, [r0, #4]
 800c2d0:	482c      	ldr	r0, [pc, #176]	; (800c384 <RemoteConfig::HandleList()+0xc8>)
 800c2d2:	4e2d      	ldr	r6, [pc, #180]	; (800c388 <RemoteConfig::HandleList()+0xcc>)
 800c2d4:	fb02 0003 	mla	r0, r2, r3, r0
 800c2d8:	4b2c      	ldr	r3, [pc, #176]	; (800c38c <RemoteConfig::HandleList()+0xd0>)
 800c2da:	4f2d      	ldr	r7, [pc, #180]	; (800c390 <RemoteConfig::HandleList()+0xd4>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	6835      	ldr	r5, [r6, #0]
 800c2e0:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800c2e4:	f897 9009 	ldrb.w	r9, [r7, #9]
 800c2e8:	fa5f f38c 	uxtb.w	r3, ip
 800c2ec:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 800c2f0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800c2f4:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800c2f8:	b089      	sub	sp, #36	; 0x24
 800c2fa:	3507      	adds	r5, #7
 800c2fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800c300:	f1b9 0f00 	cmp.w	r9, #0
 800c304:	d020      	beq.n	800c348 <RemoteConfig::HandleList()+0x8c>
 800c306:	b2d2      	uxtb	r2, r2
 800c308:	3709      	adds	r7, #9
 800c30a:	9201      	str	r2, [sp, #4]
 800c30c:	fa5f f28c 	uxtb.w	r2, ip
 800c310:	e9cd 1003 	strd	r1, r0, [sp, #12]
 800c314:	9200      	str	r2, [sp, #0]
 800c316:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800c31a:	4628      	mov	r0, r5
 800c31c:	e9cd 8705 	strd	r8, r7, [sp, #20]
 800c320:	4a1c      	ldr	r2, [pc, #112]	; (800c394 <RemoteConfig::HandleList()+0xd8>)
 800c322:	f8cd e008 	str.w	lr, [sp, #8]
 800c326:	f7fc fc3d 	bl	8008ba4 <snprintf>
 800c32a:	8ba3      	ldrh	r3, [r4, #28]
 800c32c:	2b05      	cmp	r3, #5
 800c32e:	d11b      	bne.n	800c368 <RemoteConfig::HandleList()+0xac>
 800c330:	f642 1305 	movw	r3, #10501	; 0x2905
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	69a3      	ldr	r3, [r4, #24]
 800c338:	b282      	uxth	r2, r0
 800c33a:	4629      	mov	r1, r5
 800c33c:	7d20      	ldrb	r0, [r4, #20]
 800c33e:	f002 fc7d 	bl	800ec3c <udp_send>
 800c342:	b009      	add	sp, #36	; 0x24
 800c344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c348:	b2d2      	uxtb	r2, r2
 800c34a:	9201      	str	r2, [sp, #4]
 800c34c:	fa5f f28c 	uxtb.w	r2, ip
 800c350:	e9cd 0804 	strd	r0, r8, [sp, #16]
 800c354:	e9cd e102 	strd	lr, r1, [sp, #8]
 800c358:	9200      	str	r2, [sp, #0]
 800c35a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800c35e:	4628      	mov	r0, r5
 800c360:	4a0d      	ldr	r2, [pc, #52]	; (800c398 <RemoteConfig::HandleList()+0xdc>)
 800c362:	f7fc fc1f 	bl	8008ba4 <snprintf>
 800c366:	e7e0      	b.n	800c32a <RemoteConfig::HandleList()+0x6e>
 800c368:	2b06      	cmp	r3, #6
 800c36a:	d1ea      	bne.n	800c342 <RemoteConfig::HandleList()+0x86>
 800c36c:	6833      	ldr	r3, [r6, #0]
 800c36e:	799b      	ldrb	r3, [r3, #6]
 800c370:	2b2a      	cmp	r3, #42	; 0x2a
 800c372:	d1e6      	bne.n	800c342 <RemoteConfig::HandleList()+0x86>
 800c374:	f642 1305 	movw	r3, #10501	; 0x2905
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c37e:	e7db      	b.n	800c338 <RemoteConfig::HandleList()+0x7c>
 800c380:	08014705 	stmdaeq	r1, {r0, r2, r8, r9, sl, lr}
 800c384:	080147a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, r9, sl, lr}
 800c388:	20001948 	andcs	r1, r0, r8, asr #18
 800c38c:	2000a288 	andcs	sl, r0, r8, lsl #5
 800c390:	2000194c 	andcs	r1, r0, ip, asr #18
 800c394:	0801464e 	stmdaeq	r1, {r1, r2, r3, r6, r9, sl, lr}
 800c398:	08014667 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, sl, lr}

0800c39c <RemoteConfig::HandleDisplayGet()>:
 800c39c:	8b83      	ldrh	r3, [r0, #28]
 800c39e:	2b08      	cmp	r3, #8
 800c3a0:	d11b      	bne.n	800c3da <RemoteConfig::HandleDisplayGet()+0x3e>
 800c3a2:	4b0e      	ldr	r3, [pc, #56]	; (800c3dc <RemoteConfig::HandleDisplayGet()+0x40>)
 800c3a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4d0d      	ldr	r5, [pc, #52]	; (800c3e0 <RemoteConfig::HandleDisplayGet()+0x44>)
 800c3aa:	7c19      	ldrb	r1, [r3, #16]
 800c3ac:	4a0d      	ldr	r2, [pc, #52]	; (800c3e4 <RemoteConfig::HandleDisplayGet()+0x48>)
 800c3ae:	4b0e      	ldr	r3, [pc, #56]	; (800c3e8 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	2900      	cmp	r1, #0
 800c3b4:	bf18      	it	ne
 800c3b6:	4613      	movne	r3, r2
 800c3b8:	6828      	ldr	r0, [r5, #0]
 800c3ba:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c3be:	4a0b      	ldr	r2, [pc, #44]	; (800c3ec <RemoteConfig::HandleDisplayGet()+0x50>)
 800c3c0:	f7fc fbf0 	bl	8008ba4 <snprintf>
 800c3c4:	f642 1305 	movw	r3, #10501	; 0x2905
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	b282      	uxth	r2, r0
 800c3cc:	69a3      	ldr	r3, [r4, #24]
 800c3ce:	6829      	ldr	r1, [r5, #0]
 800c3d0:	7d20      	ldrb	r0, [r4, #20]
 800c3d2:	f002 fc33 	bl	800ec3c <udp_send>
 800c3d6:	b003      	add	sp, #12
 800c3d8:	bd30      	pop	{r4, r5, pc}
 800c3da:	4770      	bx	lr
 800c3dc:	2000a8c0 	andcs	sl, r0, r0, asr #17
 800c3e0:	20001948 	andcs	r1, r0, r8, asr #18
 800c3e4:	08014680 	stmdaeq	r1, {r7, r9, sl, lr}
 800c3e8:	0801467d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r9, sl, lr}
 800c3ec:	08014684 	stmdaeq	r1, {r2, r7, r9, sl, lr}

0800c3f0 <RemoteConfig::HandleVersion()>:
 800c3f0:	8b83      	ldrh	r3, [r0, #28]
 800c3f2:	2b08      	cmp	r3, #8
 800c3f4:	d114      	bne.n	800c420 <RemoteConfig::HandleVersion()+0x30>
 800c3f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3f8:	4d0a      	ldr	r5, [pc, #40]	; (800c424 <RemoteConfig::HandleVersion()+0x34>)
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c400:	4b09      	ldr	r3, [pc, #36]	; (800c428 <RemoteConfig::HandleVersion()+0x38>)
 800c402:	4a0a      	ldr	r2, [pc, #40]	; (800c42c <RemoteConfig::HandleVersion()+0x3c>)
 800c404:	6828      	ldr	r0, [r5, #0]
 800c406:	f7fc fbcd 	bl	8008ba4 <snprintf>
 800c40a:	f642 1305 	movw	r3, #10501	; 0x2905
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	b282      	uxth	r2, r0
 800c412:	69a3      	ldr	r3, [r4, #24]
 800c414:	6829      	ldr	r1, [r5, #0]
 800c416:	7d20      	ldrb	r0, [r4, #20]
 800c418:	f002 fc10 	bl	800ec3c <udp_send>
 800c41c:	b003      	add	sp, #12
 800c41e:	bd30      	pop	{r4, r5, pc}
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	20001948 	andcs	r1, r0, r8, asr #18
 800c428:	2000a966 	andcs	sl, r0, r6, ror #18
 800c42c:	08014690 	stmdaeq	r1, {r4, r7, r9, sl, lr}

0800c430 <RemoteConfig::HandleUptime()>:
 800c430:	7bc3      	ldrb	r3, [r0, #15]
 800c432:	b1e3      	cbz	r3, 800c46e <RemoteConfig::HandleUptime()+0x3e>
 800c434:	4b0e      	ldr	r3, [pc, #56]	; (800c470 <RemoteConfig::HandleUptime()+0x40>)
 800c436:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	8b83      	ldrh	r3, [r0, #28]
 800c43c:	4604      	mov	r4, r0
 800c43e:	2b07      	cmp	r3, #7
 800c440:	d113      	bne.n	800c46a <RemoteConfig::HandleUptime()+0x3a>
 800c442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c446:	4d0b      	ldr	r5, [pc, #44]	; (800c474 <RemoteConfig::HandleUptime()+0x44>)
 800c448:	fbb2 f3f3 	udiv	r3, r2, r3
 800c44c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800c450:	4a09      	ldr	r2, [pc, #36]	; (800c478 <RemoteConfig::HandleUptime()+0x48>)
 800c452:	6828      	ldr	r0, [r5, #0]
 800c454:	f7fc fba6 	bl	8008ba4 <snprintf>
 800c458:	f642 1305 	movw	r3, #10501	; 0x2905
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	b282      	uxth	r2, r0
 800c460:	69a3      	ldr	r3, [r4, #24]
 800c462:	6829      	ldr	r1, [r5, #0]
 800c464:	7d20      	ldrb	r0, [r4, #20]
 800c466:	f002 fbe9 	bl	800ec3c <udp_send>
 800c46a:	b003      	add	sp, #12
 800c46c:	bd30      	pop	{r4, r5, pc}
 800c46e:	4770      	bx	lr
 800c470:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800c474:	20001948 	andcs	r1, r0, r8, asr #18
 800c478:	0801469b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, sl, lr}

0800c47c <RemoteConfig::HandleDisplaySet()>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	8b83      	ldrh	r3, [r0, #28]
 800c480:	2b09      	cmp	r3, #9
 800c482:	d113      	bne.n	800c4ac <RemoteConfig::HandleDisplaySet()+0x30>
 800c484:	4b0a      	ldr	r3, [pc, #40]	; (800c4b0 <RemoteConfig::HandleDisplaySet()+0x34>)
 800c486:	681c      	ldr	r4, [r3, #0]
 800c488:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <RemoteConfig::HandleDisplaySet()+0x38>)
 800c48a:	69a0      	ldr	r0, [r4, #24]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	7a5d      	ldrb	r5, [r3, #9]
 800c490:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c494:	4259      	negs	r1, r3
 800c496:	4159      	adcs	r1, r3
 800c498:	b140      	cbz	r0, 800c4ac <RemoteConfig::HandleDisplaySet()+0x30>
 800c49a:	6803      	ldr	r3, [r0, #0]
 800c49c:	7421      	strb	r1, [r4, #16]
 800c49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a0:	4798      	blx	r3
 800c4a2:	2d30      	cmp	r5, #48	; 0x30
 800c4a4:	bf1e      	ittt	ne
 800c4a6:	4b04      	ldrne	r3, [pc, #16]	; (800c4b8 <RemoteConfig::HandleDisplaySet()+0x3c>)
 800c4a8:	681b      	ldrne	r3, [r3, #0]
 800c4aa:	6063      	strne	r3, [r4, #4]
 800c4ac:	bd38      	pop	{r3, r4, r5, pc}
 800c4ae:	bf00      	nop
 800c4b0:	2000a8c0 	andcs	sl, r0, r0, asr #17
 800c4b4:	20001948 	andcs	r1, r0, r8, asr #18
 800c4b8:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800c4bc <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800c4bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	2500      	movs	r5, #0
 800c4c2:	461f      	mov	r7, r3
 800c4c4:	6083      	str	r3, [r0, #8]
 800c4c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	4690      	mov	r8, r2
 800c4ce:	4689      	mov	r9, r1
 800c4d0:	f100 0a24 	add.w	sl, r0, #36	; 0x24
 800c4d4:	e9c0 1200 	strd	r1, r2, [r0]
 800c4d8:	4e12      	ldr	r6, [pc, #72]	; (800c524 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x68>)
 800c4da:	e9c0 3505 	strd	r3, r5, [r0, #20]
 800c4de:	f8df b048 	ldr.w	fp, [pc, #72]	; 800c528 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x6c>
 800c4e2:	60c5      	str	r5, [r0, #12]
 800c4e4:	8205      	strh	r5, [r0, #16]
 800c4e6:	8385      	strh	r5, [r0, #28]
 800c4e8:	6205      	str	r5, [r0, #32]
 800c4ea:	4650      	mov	r0, sl
 800c4ec:	f000 fcb0 	bl	800ce50 <HttpDaemon::HttpDaemon()>
 800c4f0:	4b0e      	ldr	r3, [pc, #56]	; (800c52c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x70>)
 800c4f2:	4631      	mov	r1, r6
 800c4f4:	f8db 0000 	ldr.w	r0, [fp]
 800c4f8:	601c      	str	r4, [r3, #0]
 800c4fa:	f003 f875 	bl	800f5e8 <Network::MacAddressCopyTo(unsigned char*)>
 800c4fe:	f642 1105 	movw	r1, #10501	; 0x2905
 800c502:	f8db 0000 	ldr.w	r0, [fp]
 800c506:	f886 9006 	strb.w	r9, [r6, #6]
 800c50a:	f886 8007 	strb.w	r8, [r6, #7]
 800c50e:	7237      	strb	r7, [r6, #8]
 800c510:	7275      	strb	r5, [r6, #9]
 800c512:	f003 f863 	bl	800f5dc <Network::Begin(unsigned short)>
 800c516:	6160      	str	r0, [r4, #20]
 800c518:	4650      	mov	r0, sl
 800c51a:	f000 fcb1 	bl	800ce80 <HttpDaemon::Start()>
 800c51e:	4620      	mov	r0, r4
 800c520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c524:	2000194c 	andcs	r1, r0, ip, asr #18
 800c528:	2000a288 	andcs	sl, r0, r8, lsl #5
 800c52c:	20001970 	andcs	r1, r0, r0, ror r9

0800c530 <RemoteConfig::GetStringNode() const>:
 800c530:	2012      	movs	r0, #18
 800c532:	4b03      	ldr	r3, [pc, #12]	; (800c540 <RemoteConfig::GetStringNode() const+0x10>)
 800c534:	799a      	ldrb	r2, [r3, #6]
 800c536:	4b03      	ldr	r3, [pc, #12]	; (800c544 <RemoteConfig::GetStringNode() const+0x14>)
 800c538:	fb00 3002 	mla	r0, r0, r2, r3
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	2000194c 	andcs	r1, r0, ip, asr #18
 800c544:	08014705 	stmdaeq	r1, {r0, r2, r8, r9, sl, lr}

0800c548 <RemoteConfig::GetStringOutput() const>:
 800c548:	200c      	movs	r0, #12
 800c54a:	4b03      	ldr	r3, [pc, #12]	; (800c558 <RemoteConfig::GetStringOutput() const+0x10>)
 800c54c:	79da      	ldrb	r2, [r3, #7]
 800c54e:	4b03      	ldr	r3, [pc, #12]	; (800c55c <RemoteConfig::GetStringOutput() const+0x14>)
 800c550:	fb00 3002 	mla	r0, r0, r2, r3
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	2000194c 	andcs	r1, r0, ip, asr #18
 800c55c:	080147a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, r9, sl, lr}

0800c560 <RemoteConfig::SetDisable(bool)>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	4604      	mov	r4, r0
 800c564:	7b03      	ldrb	r3, [r0, #12]
 800c566:	b161      	cbz	r1, 800c582 <RemoteConfig::SetDisable(bool)+0x22>
 800c568:	b953      	cbnz	r3, 800c580 <RemoteConfig::SetDisable(bool)+0x20>
 800c56a:	4b0c      	ldr	r3, [pc, #48]	; (800c59c <RemoteConfig::SetDisable(bool)+0x3c>)
 800c56c:	f642 1105 	movw	r1, #10501	; 0x2905
 800c570:	6818      	ldr	r0, [r3, #0]
 800c572:	f003 f836 	bl	800f5e2 <Network::End(unsigned short)>
 800c576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c57a:	6163      	str	r3, [r4, #20]
 800c57c:	2301      	movs	r3, #1
 800c57e:	7323      	strb	r3, [r4, #12]
 800c580:	bd38      	pop	{r3, r4, r5, pc}
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0fc      	beq.n	800c580 <RemoteConfig::SetDisable(bool)+0x20>
 800c586:	4b05      	ldr	r3, [pc, #20]	; (800c59c <RemoteConfig::SetDisable(bool)+0x3c>)
 800c588:	460d      	mov	r5, r1
 800c58a:	6818      	ldr	r0, [r3, #0]
 800c58c:	f642 1105 	movw	r1, #10501	; 0x2905
 800c590:	f003 f824 	bl	800f5dc <Network::Begin(unsigned short)>
 800c594:	7325      	strb	r5, [r4, #12]
 800c596:	6160      	str	r0, [r4, #20]
 800c598:	e7f2      	b.n	800c580 <RemoteConfig::SetDisable(bool)+0x20>
 800c59a:	bf00      	nop
 800c59c:	2000a288 	andcs	sl, r0, r8, lsl #5

0800c5a0 <RemoteConfig::SetDisplayName(char const*)>:
 800c5a0:	2217      	movs	r2, #23
 800c5a2:	4809      	ldr	r0, [pc, #36]	; (800c5c8 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800c5a4:	b508      	push	{r3, lr}
 800c5a6:	1e4b      	subs	r3, r1, #1
 800c5a8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c5ac:	b931      	cbnz	r1, 800c5bc <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800c5ae:	f005 fd55 	bl	801205c <memset>
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	4b05      	ldr	r3, [pc, #20]	; (800c5cc <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800c5b6:	f883 2020 	strb.w	r2, [r3, #32]
 800c5ba:	bd08      	pop	{r3, pc}
 800c5bc:	3a01      	subs	r2, #1
 800c5be:	f800 1b01 	strb.w	r1, [r0], #1
 800c5c2:	d1f1      	bne.n	800c5a8 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800c5c4:	e7f5      	b.n	800c5b2 <RemoteConfig::SetDisplayName(char const*)+0x12>
 800c5c6:	bf00      	nop
 800c5c8:	20001955 	andcs	r1, r0, r5, asr r9
 800c5cc:	2000194c 	andcs	r1, r0, ip, asr #18

0800c5d0 <RemoteConfig::HandleGet(void*, unsigned int)>:
 800c5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	4616      	mov	r6, r2
 800c5d6:	460d      	mov	r5, r1
 800c5d8:	4f27      	ldr	r7, [pc, #156]	; (800c678 <RemoteConfig::HandleGet(void*, unsigned int)+0xa8>)
 800c5da:	b085      	sub	sp, #20
 800c5dc:	b9a9      	cbnz	r1, 800c60a <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800c5de:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800c5e2:	6839      	ldr	r1, [r7, #0]
 800c5e4:	aa03      	add	r2, sp, #12
 800c5e6:	3105      	adds	r1, #5
 800c5e8:	9303      	str	r3, [sp, #12]
 800c5ea:	f000 fbd3 	bl	800cd94 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800c5ee:	1e03      	subs	r3, r0, #0
 800c5f0:	da1b      	bge.n	800c62a <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800c5f2:	f642 1305 	movw	r3, #10501	; 0x2905
 800c5f6:	220b      	movs	r2, #11
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	4920      	ldr	r1, [pc, #128]	; (800c67c <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800c5fc:	69a3      	ldr	r3, [r4, #24]
 800c5fe:	7d20      	ldrb	r0, [r4, #20]
 800c600:	f002 fb1c 	bl	800ec3c <udp_send>
 800c604:	200c      	movs	r0, #12
 800c606:	b005      	add	sp, #20
 800c608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c60a:	9203      	str	r2, [sp, #12]
 800c60c:	aa03      	add	r2, sp, #12
 800c60e:	6039      	str	r1, [r7, #0]
 800c610:	f000 fbc0 	bl	800cd94 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800c614:	1e03      	subs	r3, r0, #0
 800c616:	da08      	bge.n	800c62a <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800c618:	2e0b      	cmp	r6, #11
 800c61a:	4632      	mov	r2, r6
 800c61c:	4628      	mov	r0, r5
 800c61e:	bf28      	it	cs
 800c620:	220b      	movcs	r2, #11
 800c622:	4916      	ldr	r1, [pc, #88]	; (800c67c <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800c624:	f005 fcf8 	bl	8012018 <memcpy>
 800c628:	e7ec      	b.n	800c604 <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 800c62a:	201c      	movs	r0, #28
 800c62c:	4343      	muls	r3, r0
 800c62e:	4914      	ldr	r1, [pc, #80]	; (800c680 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800c630:	18ca      	adds	r2, r1, r3
 800c632:	6852      	ldr	r2, [r2, #4]
 800c634:	58cb      	ldr	r3, [r1, r3]
 800c636:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800c63a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800c63e:	07d2      	lsls	r2, r2, #31
 800c640:	bf48      	it	mi
 800c642:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800c646:	a903      	add	r1, sp, #12
 800c648:	bf48      	it	mi
 800c64a:	58d3      	ldrmi	r3, [r2, r3]
 800c64c:	4798      	blx	r3
 800c64e:	9a03      	ldr	r2, [sp, #12]
 800c650:	b955      	cbnz	r5, 800c668 <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 800c652:	f642 1305 	movw	r3, #10501	; 0x2905
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	9300      	str	r3, [sp, #0]
 800c65a:	7d20      	ldrb	r0, [r4, #20]
 800c65c:	69a3      	ldr	r3, [r4, #24]
 800c65e:	b292      	uxth	r2, r2
 800c660:	f002 faec 	bl	800ec3c <udp_send>
 800c664:	9803      	ldr	r0, [sp, #12]
 800c666:	e7ce      	b.n	800c606 <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 800c668:	42b2      	cmp	r2, r6
 800c66a:	bf28      	it	cs
 800c66c:	4632      	movcs	r2, r6
 800c66e:	4628      	mov	r0, r5
 800c670:	6839      	ldr	r1, [r7, #0]
 800c672:	f005 fcdc 	bl	801202e <memmove>
 800c676:	e7f5      	b.n	800c664 <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 800c678:	20001948 	andcs	r1, r0, r8, asr #18
 800c67c:	080146a8 	stmdaeq	r1, {r3, r5, r7, r9, sl, lr}
 800c680:	08014910 	stmdaeq	r1, {r4, r8, fp, lr}

0800c684 <RemoteConfig::HandleGetNoParams()>:
 800c684:	2200      	movs	r2, #0
 800c686:	4611      	mov	r1, r2
 800c688:	f7ff bfa2 	b.w	800c5d0 <RemoteConfig::HandleGet(void*, unsigned int)>

0800c68c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800c68c:	b510      	push	{r4, lr}
 800c68e:	460c      	mov	r4, r1
 800c690:	4b07      	ldr	r3, [pc, #28]	; (800c6b0 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800c692:	b08a      	sub	sp, #40	; 0x28
 800c694:	6819      	ldr	r1, [r3, #0]
 800c696:	a801      	add	r0, sp, #4
 800c698:	f000 f9d8 	bl	800ca4c <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800c69c:	4905      	ldr	r1, [pc, #20]	; (800c6b4 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800c69e:	4623      	mov	r3, r4
 800c6a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c6a4:	6809      	ldr	r1, [r1, #0]
 800c6a6:	a801      	add	r0, sp, #4
 800c6a8:	f000 faf4 	bl	800cc94 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800c6ac:	b00a      	add	sp, #40	; 0x28
 800c6ae:	bd10      	pop	{r4, pc}
 800c6b0:	2000299c 	mulcs	r0, ip, r9
 800c6b4:	20001948 	andcs	r1, r0, r8, asr #18

0800c6b8 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800c6b8:	b513      	push	{r0, r1, r4, lr}
 800c6ba:	460c      	mov	r4, r1
 800c6bc:	4b07      	ldr	r3, [pc, #28]	; (800c6dc <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800c6be:	a801      	add	r0, sp, #4
 800c6c0:	6819      	ldr	r1, [r3, #0]
 800c6c2:	f003 f96b 	bl	800f99c <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800c6c6:	4906      	ldr	r1, [pc, #24]	; (800c6e0 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800c6c8:	4623      	mov	r3, r4
 800c6ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c6ce:	6809      	ldr	r1, [r1, #0]
 800c6d0:	a801      	add	r0, sp, #4
 800c6d2:	f003 fb4f 	bl	800fd74 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800c6d6:	b002      	add	sp, #8
 800c6d8:	bd10      	pop	{r4, pc}
 800c6da:	bf00      	nop
 800c6dc:	20002998 	mulcs	r0, r8, r9
 800c6e0:	20001948 	andcs	r1, r0, r8, asr #18

0800c6e4 <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
 800c6e4:	b510      	push	{r4, lr}
 800c6e6:	460c      	mov	r4, r1
 800c6e8:	4b07      	ldr	r3, [pc, #28]	; (800c708 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x24>)
 800c6ea:	b08a      	sub	sp, #40	; 0x28
 800c6ec:	6819      	ldr	r1, [r3, #0]
 800c6ee:	a801      	add	r0, sp, #4
 800c6f0:	f7fd fad4 	bl	8009c9c <E131Params::E131Params(E131ParamsStore*)>
 800c6f4:	4905      	ldr	r1, [pc, #20]	; (800c70c <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x28>)
 800c6f6:	4623      	mov	r3, r4
 800c6f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c6fc:	6809      	ldr	r1, [r1, #0]
 800c6fe:	a801      	add	r0, sp, #4
 800c700:	f7fd fd20 	bl	800a144 <E131Params::Save(char*, unsigned int, unsigned int&)>
 800c704:	b00a      	add	sp, #40	; 0x28
 800c706:	bd10      	pop	{r4, pc}
 800c708:	20002994 	mulcs	r0, r4, r9
 800c70c:	20001948 	andcs	r1, r0, r8, asr #18

0800c710 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800c710:	b510      	push	{r4, lr}
 800c712:	460c      	mov	r4, r1
 800c714:	4b07      	ldr	r3, [pc, #28]	; (800c734 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x24>)
 800c716:	b08c      	sub	sp, #48	; 0x30
 800c718:	6819      	ldr	r1, [r3, #0]
 800c71a:	a801      	add	r0, sp, #4
 800c71c:	f7fd ffa4 	bl	800a668 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800c720:	4905      	ldr	r1, [pc, #20]	; (800c738 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800c722:	4623      	mov	r3, r4
 800c724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c728:	6809      	ldr	r1, [r1, #0]
 800c72a:	a801      	add	r0, sp, #4
 800c72c:	f7fe fa3a 	bl	800aba4 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>
 800c730:	b00c      	add	sp, #48	; 0x30
 800c732:	bd10      	pop	{r4, pc}
 800c734:	200029a0 	andcs	r2, r0, r0, lsr #19
 800c738:	20001948 	andcs	r1, r0, r8, asr #18

0800c73c <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800c73c:	b510      	push	{r4, lr}
 800c73e:	460c      	mov	r4, r1
 800c740:	4b07      	ldr	r3, [pc, #28]	; (800c760 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800c742:	b08a      	sub	sp, #40	; 0x28
 800c744:	6819      	ldr	r1, [r3, #0]
 800c746:	4668      	mov	r0, sp
 800c748:	f004 fac0 	bl	8010ccc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800c74c:	4905      	ldr	r1, [pc, #20]	; (800c764 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800c74e:	4623      	mov	r3, r4
 800c750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c754:	4668      	mov	r0, sp
 800c756:	6809      	ldr	r1, [r1, #0]
 800c758:	f004 fbee 	bl	8010f38 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800c75c:	b00a      	add	sp, #40	; 0x28
 800c75e:	bd10      	pop	{r4, pc}
 800c760:	20002990 	mulcs	r0, r0, r9
 800c764:	20001948 	andcs	r1, r0, r8, asr #18

0800c768 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800c768:	b530      	push	{r4, r5, lr}
 800c76a:	b085      	sub	sp, #20
 800c76c:	4604      	mov	r4, r0
 800c76e:	9201      	str	r2, [sp, #4]
 800c770:	b9c9      	cbnz	r1, 800c7a6 <RemoteConfig::HandleSet(void*, unsigned int)+0x3e>
 800c772:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c776:	9303      	str	r3, [sp, #12]
 800c778:	4b1b      	ldr	r3, [pc, #108]	; (800c7e8 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800c77a:	aa03      	add	r2, sp, #12
 800c77c:	6819      	ldr	r1, [r3, #0]
 800c77e:	3101      	adds	r1, #1
 800c780:	f000 fb08 	bl	800cd94 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800c784:	2800      	cmp	r0, #0
 800c786:	db24      	blt.n	800c7d2 <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800c788:	221c      	movs	r2, #28
 800c78a:	4b18      	ldr	r3, [pc, #96]	; (800c7ec <RemoteConfig::HandleSet(void*, unsigned int)+0x84>)
 800c78c:	fb02 3300 	mla	r3, r2, r0, r3
 800c790:	68da      	ldr	r2, [r3, #12]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	1051      	asrs	r1, r2, #1
 800c796:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800c79a:	07d2      	lsls	r2, r2, #31
 800c79c:	bf44      	itt	mi
 800c79e:	5862      	ldrmi	r2, [r4, r1]
 800c7a0:	58d3      	ldrmi	r3, [r2, r3]
 800c7a2:	4798      	blx	r3
 800c7a4:	e015      	b.n	800c7d2 <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800c7a6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	d811      	bhi.n	800c7d2 <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	460d      	mov	r5, r1
 800c7b2:	490f      	ldr	r1, [pc, #60]	; (800c7f0 <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800c7b4:	6202      	str	r2, [r0, #32]
 800c7b6:	7809      	ldrb	r1, [r1, #0]
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	07c9      	lsls	r1, r1, #31
 800c7bc:	d50b      	bpl.n	800c7d6 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800c7be:	7829      	ldrb	r1, [r5, #0]
 800c7c0:	297b      	cmp	r1, #123	; 0x7b
 800c7c2:	d108      	bne.n	800c7d6 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	b299      	uxth	r1, r3
 800c7ca:	f004 fc71 	bl	80110b0 <properties::convert_json_file(char*, unsigned short, bool)>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	dc08      	bgt.n	800c7e4 <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>
 800c7d2:	b005      	add	sp, #20
 800c7d4:	bd30      	pop	{r4, r5, pc}
 800c7d6:	83a3      	strh	r3, [r4, #28]
 800c7d8:	4b03      	ldr	r3, [pc, #12]	; (800c7e8 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800c7da:	4620      	mov	r0, r4
 800c7dc:	601d      	str	r5, [r3, #0]
 800c7de:	aa01      	add	r2, sp, #4
 800c7e0:	1c69      	adds	r1, r5, #1
 800c7e2:	e7cd      	b.n	800c780 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800c7e4:	83a0      	strh	r0, [r4, #28]
 800c7e6:	e7f7      	b.n	800c7d8 <RemoteConfig::HandleSet(void*, unsigned int)+0x70>
 800c7e8:	20001948 	andcs	r1, r0, r8, asr #18
 800c7ec:	08014910 	stmdaeq	r1, {r4, r8, fp, lr}
 800c7f0:	2000a8bc 			; <UNDEFINED> instruction: 0x2000a8bc

0800c7f4 <RemoteConfig::Run()>:
 800c7f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c7f8:	7b03      	ldrb	r3, [r0, #12]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d14f      	bne.n	800c89e <RemoteConfig::Run()+0xaa>
 800c7fe:	4604      	mov	r4, r0
 800c800:	4d3e      	ldr	r5, [pc, #248]	; (800c8fc <RemoteConfig::Run()+0x108>)
 800c802:	3024      	adds	r0, #36	; 0x24
 800c804:	f000 fdb6 	bl	800d374 <HttpDaemon::Run()>
 800c808:	4629      	mov	r1, r5
 800c80a:	7d20      	ldrb	r0, [r4, #20]
 800c80c:	f10d 030e 	add.w	r3, sp, #14
 800c810:	f104 0218 	add.w	r2, r4, #24
 800c814:	f002 f9ec 	bl	800ebf0 <udp_recv2>
 800c818:	2803      	cmp	r0, #3
 800c81a:	83a0      	strh	r0, [r4, #28]
 800c81c:	d93f      	bls.n	800c89e <RemoteConfig::Run()+0xaa>
 800c81e:	682b      	ldr	r3, [r5, #0]
 800c820:	181a      	adds	r2, r3, r0
 800c822:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800c826:	2a0a      	cmp	r2, #10
 800c828:	bf04      	itt	eq
 800c82a:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 800c82e:	83a0      	strheq	r0, [r4, #28]
 800c830:	7819      	ldrb	r1, [r3, #0]
 800c832:	293f      	cmp	r1, #63	; 0x3f
 800c834:	d139      	bne.n	800c8aa <RemoteConfig::Run()+0xb6>
 800c836:	4832      	ldr	r0, [pc, #200]	; (800c900 <RemoteConfig::Run()+0x10c>)
 800c838:	2200      	movs	r2, #0
 800c83a:	4607      	mov	r7, r0
 800c83c:	8ba1      	ldrh	r1, [r4, #28]
 800c83e:	3901      	subs	r1, #1
 800c840:	b289      	uxth	r1, r1
 800c842:	83a1      	strh	r1, [r4, #28]
 800c844:	7b86      	ldrb	r6, [r0, #14]
 800c846:	8985      	ldrh	r5, [r0, #12]
 800c848:	b17e      	cbz	r6, 800c86a <RemoteConfig::Run()+0x76>
 800c84a:	42a9      	cmp	r1, r5
 800c84c:	d80f      	bhi.n	800c86e <RemoteConfig::Run()+0x7a>
 800c84e:	3201      	adds	r2, #1
 800c850:	2a08      	cmp	r2, #8
 800c852:	f100 0010 	add.w	r0, r0, #16
 800c856:	d1f5      	bne.n	800c844 <RemoteConfig::Run()+0x50>
 800c858:	f642 1305 	movw	r3, #10501	; 0x2905
 800c85c:	9300      	str	r3, [sp, #0]
 800c85e:	69a3      	ldr	r3, [r4, #24]
 800c860:	4928      	ldr	r1, [pc, #160]	; (800c904 <RemoteConfig::Run()+0x110>)
 800c862:	7d20      	ldrb	r0, [r4, #20]
 800c864:	f002 f9ea 	bl	800ec3c <udp_send>
 800c868:	e019      	b.n	800c89e <RemoteConfig::Run()+0xaa>
 800c86a:	42a9      	cmp	r1, r5
 800c86c:	d1ef      	bne.n	800c84e <RemoteConfig::Run()+0x5a>
 800c86e:	6886      	ldr	r6, [r0, #8]
 800c870:	f103 0c01 	add.w	ip, r3, #1
 800c874:	4435      	add	r5, r6
 800c876:	42b5      	cmp	r5, r6
 800c878:	d006      	beq.n	800c888 <RemoteConfig::Run()+0x94>
 800c87a:	f81c 8b01 	ldrb.w	r8, [ip], #1
 800c87e:	f816 eb01 	ldrb.w	lr, [r6], #1
 800c882:	45f0      	cmp	r8, lr
 800c884:	d0f7      	beq.n	800c876 <RemoteConfig::Run()+0x82>
 800c886:	e7e2      	b.n	800c84e <RemoteConfig::Run()+0x5a>
 800c888:	0113      	lsls	r3, r2, #4
 800c88a:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800c88e:	6852      	ldr	r2, [r2, #4]
 800c890:	58fb      	ldr	r3, [r7, r3]
 800c892:	1051      	asrs	r1, r2, #1
 800c894:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800c898:	07d2      	lsls	r2, r2, #31
 800c89a:	d403      	bmi.n	800c8a4 <RemoteConfig::Run()+0xb0>
 800c89c:	4798      	blx	r3
 800c89e:	b004      	add	sp, #16
 800c8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a4:	5862      	ldr	r2, [r4, r1]
 800c8a6:	58d3      	ldr	r3, [r2, r3]
 800c8a8:	e7f8      	b.n	800c89c <RemoteConfig::Run()+0xa8>
 800c8aa:	7b62      	ldrb	r2, [r4, #13]
 800c8ac:	2a00      	cmp	r2, #0
 800c8ae:	d1f6      	bne.n	800c89e <RemoteConfig::Run()+0xaa>
 800c8b0:	2923      	cmp	r1, #35	; 0x23
 800c8b2:	d105      	bne.n	800c8c0 <RemoteConfig::Run()+0xcc>
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	6222      	str	r2, [r4, #32]
 800c8ba:	f7ff ff55 	bl	800c768 <RemoteConfig::HandleSet(void*, unsigned int)>
 800c8be:	e7ee      	b.n	800c89e <RemoteConfig::Run()+0xaa>
 800c8c0:	2921      	cmp	r1, #33	; 0x21
 800c8c2:	d1ec      	bne.n	800c89e <RemoteConfig::Run()+0xaa>
 800c8c4:	8ba2      	ldrh	r2, [r4, #28]
 800c8c6:	3a01      	subs	r2, #1
 800c8c8:	b292      	uxth	r2, r2
 800c8ca:	2a08      	cmp	r2, #8
 800c8cc:	83a2      	strh	r2, [r4, #28]
 800c8ce:	d90a      	bls.n	800c8e6 <RemoteConfig::Run()+0xf2>
 800c8d0:	490d      	ldr	r1, [pc, #52]	; (800c908 <RemoteConfig::Run()+0x114>)
 800c8d2:	1c5a      	adds	r2, r3, #1
 800c8d4:	3309      	adds	r3, #9
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d00c      	beq.n	800c8f4 <RemoteConfig::Run()+0x100>
 800c8da:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c8de:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c8e2:	4285      	cmp	r5, r0
 800c8e4:	d0f7      	beq.n	800c8d6 <RemoteConfig::Run()+0xe2>
 800c8e6:	f642 1305 	movw	r3, #10501	; 0x2905
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	2208      	movs	r2, #8
 800c8ee:	69a3      	ldr	r3, [r4, #24]
 800c8f0:	4906      	ldr	r1, [pc, #24]	; (800c90c <RemoteConfig::Run()+0x118>)
 800c8f2:	e7b6      	b.n	800c862 <RemoteConfig::Run()+0x6e>
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f7ff fdc1 	bl	800c47c <RemoteConfig::HandleDisplaySet()>
 800c8fa:	e7d0      	b.n	800c89e <RemoteConfig::Run()+0xaa>
 800c8fc:	20001948 	andcs	r1, r0, r8, asr #18
 800c900:	08014838 	stmdaeq	r1, {r3, r4, r5, fp, lr}
 800c904:	080146bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, sl, lr}
 800c908:	080146b4 	stmdaeq	r1, {r2, r4, r5, r7, r9, sl, lr}
 800c90c:	080146c6 	stmdaeq	r1, {r1, r2, r6, r7, r9, sl, lr}

0800c910 <RemoteConfig::HandleSetRconfig()>:
 800c910:	b510      	push	{r4, lr}
 800c912:	4604      	mov	r4, r0
 800c914:	4b08      	ldr	r3, [pc, #32]	; (800c938 <RemoteConfig::HandleSetRconfig()+0x28>)
 800c916:	b08a      	sub	sp, #40	; 0x28
 800c918:	6819      	ldr	r1, [r3, #0]
 800c91a:	a801      	add	r0, sp, #4
 800c91c:	f000 f896 	bl	800ca4c <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800c920:	4b06      	ldr	r3, [pc, #24]	; (800c93c <RemoteConfig::HandleSetRconfig()+0x2c>)
 800c922:	8ba2      	ldrh	r2, [r4, #28]
 800c924:	6819      	ldr	r1, [r3, #0]
 800c926:	a801      	add	r0, sp, #4
 800c928:	f000 f8a6 	bl	800ca78 <RemoteConfigParams::Load(char const*, unsigned int)>
 800c92c:	4621      	mov	r1, r4
 800c92e:	a801      	add	r0, sp, #4
 800c930:	f000 f9bd 	bl	800ccae <RemoteConfigParams::Set(RemoteConfig*)>
 800c934:	b00a      	add	sp, #40	; 0x28
 800c936:	bd10      	pop	{r4, pc}
 800c938:	2000299c 	mulcs	r0, ip, r9
 800c93c:	20001948 	andcs	r1, r0, r8, asr #18

0800c940 <RemoteConfig::HandleSetNetworkTxt()>:
 800c940:	b513      	push	{r0, r1, r4, lr}
 800c942:	4604      	mov	r4, r0
 800c944:	4b06      	ldr	r3, [pc, #24]	; (800c960 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800c946:	a801      	add	r0, sp, #4
 800c948:	6819      	ldr	r1, [r3, #0]
 800c94a:	f003 f827 	bl	800f99c <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800c94e:	4b05      	ldr	r3, [pc, #20]	; (800c964 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800c950:	8ba2      	ldrh	r2, [r4, #28]
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	a801      	add	r0, sp, #4
 800c956:	f003 f841 	bl	800f9dc <NetworkParams::Load(char const*, unsigned int)>
 800c95a:	b002      	add	sp, #8
 800c95c:	bd10      	pop	{r4, pc}
 800c95e:	bf00      	nop
 800c960:	20002998 	mulcs	r0, r8, r9
 800c964:	20001948 	andcs	r1, r0, r8, asr #18

0800c968 <RemoteConfig::HandleSetE131Txt()>:
 800c968:	b510      	push	{r4, lr}
 800c96a:	4604      	mov	r4, r0
 800c96c:	4b06      	ldr	r3, [pc, #24]	; (800c988 <RemoteConfig::HandleSetE131Txt()+0x20>)
 800c96e:	b08a      	sub	sp, #40	; 0x28
 800c970:	6819      	ldr	r1, [r3, #0]
 800c972:	a801      	add	r0, sp, #4
 800c974:	f7fd f992 	bl	8009c9c <E131Params::E131Params(E131ParamsStore*)>
 800c978:	4b04      	ldr	r3, [pc, #16]	; (800c98c <RemoteConfig::HandleSetE131Txt()+0x24>)
 800c97a:	8ba2      	ldrh	r2, [r4, #28]
 800c97c:	6819      	ldr	r1, [r3, #0]
 800c97e:	a801      	add	r0, sp, #4
 800c980:	f7fd f9b8 	bl	8009cf4 <E131Params::Load(char const*, unsigned int)>
 800c984:	b00a      	add	sp, #40	; 0x28
 800c986:	bd10      	pop	{r4, pc}
 800c988:	20002994 	mulcs	r0, r4, r9
 800c98c:	20001948 	andcs	r1, r0, r8, asr #18

0800c990 <RemoteConfig::HandleSetDevicesTxt()>:
 800c990:	b510      	push	{r4, lr}
 800c992:	4604      	mov	r4, r0
 800c994:	4b06      	ldr	r3, [pc, #24]	; (800c9b0 <RemoteConfig::HandleSetDevicesTxt()+0x20>)
 800c996:	b08c      	sub	sp, #48	; 0x30
 800c998:	6819      	ldr	r1, [r3, #0]
 800c99a:	a801      	add	r0, sp, #4
 800c99c:	f7fd fe64 	bl	800a668 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800c9a0:	4b04      	ldr	r3, [pc, #16]	; (800c9b4 <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 800c9a2:	8ba2      	ldrh	r2, [r4, #28]
 800c9a4:	6819      	ldr	r1, [r3, #0]
 800c9a6:	a801      	add	r0, sp, #4
 800c9a8:	f7fd fe92 	bl	800a6d0 <WS28xxDmxParams::Load(char const*, unsigned int)>
 800c9ac:	b00c      	add	sp, #48	; 0x30
 800c9ae:	bd10      	pop	{r4, pc}
 800c9b0:	200029a0 	andcs	r2, r0, r0, lsr #19
 800c9b4:	20001948 	andcs	r1, r0, r8, asr #18

0800c9b8 <RemoteConfig::HandleSetDisplayTxt()>:
 800c9b8:	b510      	push	{r4, lr}
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 800c9be:	b08a      	sub	sp, #40	; 0x28
 800c9c0:	6819      	ldr	r1, [r3, #0]
 800c9c2:	4668      	mov	r0, sp
 800c9c4:	f004 f982 	bl	8010ccc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800c9c8:	4b04      	ldr	r3, [pc, #16]	; (800c9dc <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800c9ca:	4668      	mov	r0, sp
 800c9cc:	8ba2      	ldrh	r2, [r4, #28]
 800c9ce:	6819      	ldr	r1, [r3, #0]
 800c9d0:	f004 f996 	bl	8010d00 <DisplayUdfParams::Load(char const*, unsigned int)>
 800c9d4:	b00a      	add	sp, #40	; 0x28
 800c9d6:	bd10      	pop	{r4, pc}
 800c9d8:	20002990 	mulcs	r0, r0, r9
 800c9dc:	20001948 	andcs	r1, r0, r8, asr #18

0800c9e0 <RemoteConfig::HandleFactory()>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	2400      	movs	r4, #0
 800c9e4:	4d04      	ldr	r5, [pc, #16]	; (800c9f8 <RemoteConfig::HandleFactory()+0x18>)
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	6828      	ldr	r0, [r5, #0]
 800c9ea:	3401      	adds	r4, #1
 800c9ec:	f000 fee6 	bl	800d7bc <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800c9f0:	2c1c      	cmp	r4, #28
 800c9f2:	d1f8      	bne.n	800c9e6 <RemoteConfig::HandleFactory()+0x6>
 800c9f4:	bd38      	pop	{r3, r4, r5, pc}
 800c9f6:	bf00      	nop
 800c9f8:	20002988 	andcs	r2, r0, r8, lsl #19

0800c9fc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800c9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9fe:	460b      	mov	r3, r1
 800ca00:	8885      	ldrh	r5, [r0, #4]
 800ca02:	88c1      	ldrh	r1, [r0, #6]
 800ca04:	42a9      	cmp	r1, r5
 800ca06:	d214      	bcs.n	800ca32 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800ca08:	4604      	mov	r4, r0
 800ca0a:	6800      	ldr	r0, [r0, #0]
 800ca0c:	1a6d      	subs	r5, r5, r1
 800ca0e:	4408      	add	r0, r1
 800ca10:	7a21      	ldrb	r1, [r4, #8]
 800ca12:	b91a      	cbnz	r2, 800ca1c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800ca14:	b919      	cbnz	r1, 800ca1e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800ca16:	4a0a      	ldr	r2, [pc, #40]	; (800ca40 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800ca18:	9100      	str	r1, [sp, #0]
 800ca1a:	e002      	b.n	800ca22 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800ca1c:	b159      	cbz	r1, 800ca36 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800ca1e:	9200      	str	r2, [sp, #0]
 800ca20:	4a08      	ldr	r2, [pc, #32]	; (800ca44 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800ca22:	4629      	mov	r1, r5
 800ca24:	f7fc f8be 	bl	8008ba4 <snprintf>
 800ca28:	4285      	cmp	r5, r0
 800ca2a:	bfa2      	ittt	ge
 800ca2c:	88e3      	ldrhge	r3, [r4, #6]
 800ca2e:	181b      	addge	r3, r3, r0
 800ca30:	80e3      	strhge	r3, [r4, #6]
 800ca32:	b003      	add	sp, #12
 800ca34:	bd30      	pop	{r4, r5, pc}
 800ca36:	2201      	movs	r2, #1
 800ca38:	9200      	str	r2, [sp, #0]
 800ca3a:	4a03      	ldr	r2, [pc, #12]	; (800ca48 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800ca3c:	e7f1      	b.n	800ca22 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800ca3e:	bf00      	nop
 800ca40:	08014303 	stmdaeq	r1, {r0, r1, r8, r9, lr}
 800ca44:	080142fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, lr}
 800ca48:	08014304 	stmdaeq	r1, {r2, r8, r9, lr}

0800ca4c <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800ca4c:	b510      	push	{r4, lr}
 800ca4e:	4604      	mov	r4, r0
 800ca50:	2220      	movs	r2, #32
 800ca52:	f840 1b04 	str.w	r1, [r0], #4
 800ca56:	2100      	movs	r1, #0
 800ca58:	f005 fb00 	bl	801205c <memset>
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	bd10      	pop	{r4, pc}

0800ca60 <RemoteConfigParams::Load()>:
 800ca60:	b508      	push	{r3, lr}
 800ca62:	2300      	movs	r3, #0
 800ca64:	4601      	mov	r1, r0
 800ca66:	6043      	str	r3, [r0, #4]
 800ca68:	6800      	ldr	r0, [r0, #0]
 800ca6a:	b120      	cbz	r0, 800ca76 <RemoteConfigParams::Load()+0x16>
 800ca6c:	6803      	ldr	r3, [r0, #0]
 800ca6e:	3104      	adds	r1, #4
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	4798      	blx	r3
 800ca74:	2001      	movs	r0, #1
 800ca76:	bd08      	pop	{r3, pc}

0800ca78 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800ca78:	2300      	movs	r3, #0
 800ca7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca7c:	460d      	mov	r5, r1
 800ca7e:	4616      	mov	r6, r2
 800ca80:	4604      	mov	r4, r0
 800ca82:	6043      	str	r3, [r0, #4]
 800ca84:	4602      	mov	r2, r0
 800ca86:	490a      	ldr	r1, [pc, #40]	; (800cab0 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800ca88:	4668      	mov	r0, sp
 800ca8a:	f004 fc5f 	bl	801134c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800ca8e:	4632      	mov	r2, r6
 800ca90:	4629      	mov	r1, r5
 800ca92:	4668      	mov	r0, sp
 800ca94:	f004 fc5e 	bl	8011354 <ReadConfigFile::Read(char const*, unsigned int)>
 800ca98:	4621      	mov	r1, r4
 800ca9a:	f851 0b04 	ldr.w	r0, [r1], #4
 800ca9e:	6803      	ldr	r3, [r0, #0]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	4798      	blx	r3
 800caa4:	4668      	mov	r0, sp
 800caa6:	f004 fc54 	bl	8011352 <ReadConfigFile::~ReadConfigFile()>
 800caaa:	b002      	add	sp, #8
 800caac:	bd70      	pop	{r4, r5, r6, pc}
 800caae:	bf00      	nop
 800cab0:	0800cb71 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, fp, lr, pc}

0800cab4 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800cab4:	6843      	ldr	r3, [r0, #4]
 800cab6:	b111      	cbz	r1, 800cabe <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800cab8:	4313      	orrs	r3, r2
 800caba:	6043      	str	r3, [r0, #4]
 800cabc:	4770      	bx	lr
 800cabe:	ea23 0302 	bic.w	r3, r3, r2
 800cac2:	e7fa      	b.n	800caba <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800cac4 <RemoteConfigParams::callbackFunction(char const*)>:
 800cac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cac6:	460d      	mov	r5, r1
 800cac8:	4604      	mov	r4, r0
 800caca:	4923      	ldr	r1, [pc, #140]	; (800cb58 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800cacc:	4628      	mov	r0, r5
 800cace:	f10d 0203 	add.w	r2, sp, #3
 800cad2:	f004 fd76 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cad6:	b938      	cbnz	r0, 800cae8 <RemoteConfigParams::callbackFunction(char const*)+0x24>
 800cad8:	2201      	movs	r2, #1
 800cada:	4620      	mov	r0, r4
 800cadc:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800cae0:	f7ff ffe8 	bl	800cab4 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800cae4:	b003      	add	sp, #12
 800cae6:	bd30      	pop	{r4, r5, pc}
 800cae8:	4628      	mov	r0, r5
 800caea:	491c      	ldr	r1, [pc, #112]	; (800cb5c <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800caec:	f10d 0203 	add.w	r2, sp, #3
 800caf0:	f004 fd67 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800caf4:	b908      	cbnz	r0, 800cafa <RemoteConfigParams::callbackFunction(char const*)+0x36>
 800caf6:	2202      	movs	r2, #2
 800caf8:	e7ef      	b.n	800cada <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800cafa:	4628      	mov	r0, r5
 800cafc:	4918      	ldr	r1, [pc, #96]	; (800cb60 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800cafe:	f10d 0203 	add.w	r2, sp, #3
 800cb02:	f004 fd5e 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cb06:	b908      	cbnz	r0, 800cb0c <RemoteConfigParams::callbackFunction(char const*)+0x48>
 800cb08:	2204      	movs	r2, #4
 800cb0a:	e7e6      	b.n	800cada <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	4915      	ldr	r1, [pc, #84]	; (800cb64 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800cb10:	f10d 0203 	add.w	r2, sp, #3
 800cb14:	f004 fd55 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cb18:	b908      	cbnz	r0, 800cb1e <RemoteConfigParams::callbackFunction(char const*)+0x5a>
 800cb1a:	2208      	movs	r2, #8
 800cb1c:	e7dd      	b.n	800cada <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800cb1e:	4628      	mov	r0, r5
 800cb20:	4911      	ldr	r1, [pc, #68]	; (800cb68 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800cb22:	f10d 0203 	add.w	r2, sp, #3
 800cb26:	f004 fd4c 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cb2a:	b908      	cbnz	r0, 800cb30 <RemoteConfigParams::callbackFunction(char const*)+0x6c>
 800cb2c:	2220      	movs	r2, #32
 800cb2e:	e7d4      	b.n	800cada <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800cb30:	2317      	movs	r3, #23
 800cb32:	4628      	mov	r0, r5
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	490d      	ldr	r1, [pc, #52]	; (800cb6c <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800cb38:	ab01      	add	r3, sp, #4
 800cb3a:	f104 020c 	add.w	r2, r4, #12
 800cb3e:	f004 fc3d 	bl	80113bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d1ce      	bne.n	800cae4 <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800cb46:	9b01      	ldr	r3, [sp, #4]
 800cb48:	4423      	add	r3, r4
 800cb4a:	7318      	strb	r0, [r3, #12]
 800cb4c:	6863      	ldr	r3, [r4, #4]
 800cb4e:	f043 0310 	orr.w	r3, r3, #16
 800cb52:	6063      	str	r3, [r4, #4]
 800cb54:	e7c6      	b.n	800cae4 <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800cb56:	bf00      	nop
 800cb58:	08014c78 	stmdaeq	r1, {r3, r4, r5, r6, sl, fp, lr}
 800cb5c:	08014c99 	stmdaeq	r1, {r0, r3, r4, r7, sl, fp, lr}
 800cb60:	08014ca7 	stmdaeq	r1, {r0, r1, r2, r5, r7, sl, fp, lr}
 800cb64:	08014cb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, sl, fp, lr}
 800cb68:	08014cc3 	stmdaeq	r1, {r0, r1, r6, r7, sl, fp, lr}
 800cb6c:	08014c8c 	stmdaeq	r1, {r2, r3, r7, sl, fp, lr}

0800cb70 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800cb70:	f7ff bfa8 	b.w	800cac4 <RemoteConfigParams::callbackFunction(char const*)>

0800cb74 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800cb74:	b570      	push	{r4, r5, r6, lr}
 800cb76:	4604      	mov	r4, r0
 800cb78:	4615      	mov	r5, r2
 800cb7a:	461e      	mov	r6, r3
 800cb7c:	b086      	sub	sp, #24
 800cb7e:	3004      	adds	r0, #4
 800cb80:	2900      	cmp	r1, #0
 800cb82:	d040      	beq.n	800cc06 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x92>
 800cb84:	2220      	movs	r2, #32
 800cb86:	f005 fa52 	bl	801202e <memmove>
 800cb8a:	4633      	mov	r3, r6
 800cb8c:	462a      	mov	r2, r5
 800cb8e:	4937      	ldr	r1, [pc, #220]	; (800cc6c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800cb90:	a803      	add	r0, sp, #12
 800cb92:	f004 fb3b 	bl	801120c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800cb96:	6862      	ldr	r2, [r4, #4]
 800cb98:	4935      	ldr	r1, [pc, #212]	; (800cc70 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800cb9a:	f002 0201 	and.w	r2, r2, #1
 800cb9e:	a803      	add	r0, sp, #12
 800cba0:	f7ff ff2c 	bl	800c9fc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800cba4:	6862      	ldr	r2, [r4, #4]
 800cba6:	4933      	ldr	r1, [pc, #204]	; (800cc74 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800cba8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800cbac:	a803      	add	r0, sp, #12
 800cbae:	f7ff ff25 	bl	800c9fc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800cbb2:	6862      	ldr	r2, [r4, #4]
 800cbb4:	4930      	ldr	r1, [pc, #192]	; (800cc78 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800cbb6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800cbba:	a803      	add	r0, sp, #12
 800cbbc:	f7ff ff1e 	bl	800c9fc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800cbc0:	6862      	ldr	r2, [r4, #4]
 800cbc2:	492e      	ldr	r1, [pc, #184]	; (800cc7c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800cbc4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800cbc8:	a803      	add	r0, sp, #12
 800cbca:	f7ff ff17 	bl	800c9fc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800cbce:	6862      	ldr	r2, [r4, #4]
 800cbd0:	492b      	ldr	r1, [pc, #172]	; (800cc80 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800cbd2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800cbd6:	a803      	add	r0, sp, #12
 800cbd8:	f7ff ff10 	bl	800c9fc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800cbdc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800cbe0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800cbe4:	42a9      	cmp	r1, r5
 800cbe6:	d223      	bcs.n	800cc30 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbc>
 800cbe8:	9803      	ldr	r0, [sp, #12]
 800cbea:	1a6d      	subs	r5, r5, r1
 800cbec:	4408      	add	r0, r1
 800cbee:	6861      	ldr	r1, [r4, #4]
 800cbf0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800cbf4:	06c9      	lsls	r1, r1, #27
 800cbf6:	f104 030c 	add.w	r3, r4, #12
 800cbfa:	d40b      	bmi.n	800cc14 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa0>
 800cbfc:	b95a      	cbnz	r2, 800cc16 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	4a20      	ldr	r2, [pc, #128]	; (800cc84 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800cc02:	4b21      	ldr	r3, [pc, #132]	; (800cc88 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800cc04:	e00a      	b.n	800cc1c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800cc06:	6823      	ldr	r3, [r4, #0]
 800cc08:	4601      	mov	r1, r0
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	68d2      	ldr	r2, [r2, #12]
 800cc10:	4790      	blx	r2
 800cc12:	e7ba      	b.n	800cb8a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800cc14:	b32a      	cbz	r2, 800cc62 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xee>
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	4a1c      	ldr	r2, [pc, #112]	; (800cc8c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800cc1a:	4b1b      	ldr	r3, [pc, #108]	; (800cc88 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	f7fb ffc1 	bl	8008ba4 <snprintf>
 800cc22:	4285      	cmp	r5, r0
 800cc24:	bfa2      	ittt	ge
 800cc26:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800cc2a:	18c0      	addge	r0, r0, r3
 800cc2c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800cc30:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800cc34:	b17b      	cbz	r3, 800cc56 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe2>
 800cc36:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cc3a:	9b03      	ldr	r3, [sp, #12]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	227d      	movs	r2, #125	; 0x7d
 800cc40:	f803 2c01 	strb.w	r2, [r3, #-1]
 800cc44:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cc48:	9903      	ldr	r1, [sp, #12]
 800cc4a:	54ca      	strb	r2, [r1, r3]
 800cc4c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cc50:	3301      	adds	r3, #1
 800cc52:	f8ad 3012 	strh.w	r3, [sp, #18]
 800cc56:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cc5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	b006      	add	sp, #24
 800cc60:	bd70      	pop	{r4, r5, r6, pc}
 800cc62:	9300      	str	r3, [sp, #0]
 800cc64:	4a0a      	ldr	r2, [pc, #40]	; (800cc90 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800cc66:	4b08      	ldr	r3, [pc, #32]	; (800cc88 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800cc68:	e7d8      	b.n	800cc1c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800cc6a:	bf00      	nop
 800cc6c:	08014c80 	stmdaeq	r1, {r7, sl, fp, lr}
 800cc70:	08014c78 	stmdaeq	r1, {r3, r4, r5, r6, sl, fp, lr}
 800cc74:	08014c99 	stmdaeq	r1, {r0, r3, r4, r7, sl, fp, lr}
 800cc78:	08014ca7 	stmdaeq	r1, {r0, r1, r2, r5, r7, sl, fp, lr}
 800cc7c:	08014cb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, sl, fp, lr}
 800cc80:	08014cc3 	stmdaeq	r1, {r0, r1, r6, r7, sl, fp, lr}
 800cc84:	080142f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, lr}
 800cc88:	08014c8c 	stmdaeq	r1, {r2, r3, r7, sl, fp, lr}
 800cc8c:	080142e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, lr}
 800cc90:	080142f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, lr}

0800cc94 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800cc94:	b513      	push	{r0, r1, r4, lr}
 800cc96:	6804      	ldr	r4, [r0, #0]
 800cc98:	b914      	cbnz	r4, 800cca0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800cc9a:	601c      	str	r4, [r3, #0]
 800cc9c:	b002      	add	sp, #8
 800cc9e:	bd10      	pop	{r4, pc}
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	4613      	mov	r3, r2
 800cca4:	460a      	mov	r2, r1
 800cca6:	2100      	movs	r1, #0
 800cca8:	f7ff ff64 	bl	800cb74 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800ccac:	e7f6      	b.n	800cc9c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800ccae <RemoteConfigParams::Set(RemoteConfig*)>:
 800ccae:	b538      	push	{r3, r4, r5, lr}
 800ccb0:	460c      	mov	r4, r1
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	6841      	ldr	r1, [r0, #4]
 800ccb6:	4620      	mov	r0, r4
 800ccb8:	f001 0101 	and.w	r1, r1, #1
 800ccbc:	f7ff fc50 	bl	800c560 <RemoteConfig::SetDisable(bool)>
 800ccc0:	686b      	ldr	r3, [r5, #4]
 800ccc2:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800ccc6:	7362      	strb	r2, [r4, #13]
 800ccc8:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800cccc:	73a2      	strb	r2, [r4, #14]
 800ccce:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800ccd2:	73e2      	strb	r2, [r4, #15]
 800ccd4:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800ccd8:	06db      	lsls	r3, r3, #27
 800ccda:	7422      	strb	r2, [r4, #16]
 800ccdc:	d506      	bpl.n	800ccec <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800ccde:	4620      	mov	r0, r4
 800cce0:	f105 010c 	add.w	r1, r5, #12
 800cce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cce8:	f7ff bc5a 	b.w	800c5a0 <RemoteConfig::SetDisplayName(char const*)>
 800ccec:	bd38      	pop	{r3, r4, r5, pc}

0800ccee <RemoteConfigParams::Dump()>:
 800ccee:	4770      	bx	lr

0800ccf0 <RemoteConfig::HandleReboot()>:
 800ccf0:	7b83      	ldrb	r3, [r0, #14]
 800ccf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d03d      	beq.n	800cd74 <RemoteConfig::HandleReboot()+0x84>
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	4c1f      	ldr	r4, [pc, #124]	; (800cd78 <RemoteConfig::HandleReboot()+0x88>)
 800ccfc:	7443      	strb	r3, [r0, #17]
 800ccfe:	6825      	ldr	r5, [r4, #0]
 800cd00:	69a8      	ldr	r0, [r5, #24]
 800cd02:	b138      	cbz	r0, 800cd14 <RemoteConfig::HandleReboot()+0x24>
 800cd04:	2100      	movs	r1, #0
 800cd06:	6803      	ldr	r3, [r0, #0]
 800cd08:	7429      	strb	r1, [r5, #16]
 800cd0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0c:	4798      	blx	r3
 800cd0e:	4b1b      	ldr	r3, [pc, #108]	; (800cd7c <RemoteConfig::HandleReboot()+0x8c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	606b      	str	r3, [r5, #4]
 800cd14:	4d1a      	ldr	r5, [pc, #104]	; (800cd80 <RemoteConfig::HandleReboot()+0x90>)
 800cd16:	6828      	ldr	r0, [r5, #0]
 800cd18:	f000 fdd6 	bl	800d8c8 <SpiFlashStore::Flash()>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d1fa      	bne.n	800cd16 <RemoteConfig::HandleReboot()+0x26>
 800cd20:	4b18      	ldr	r3, [pc, #96]	; (800cd84 <RemoteConfig::HandleReboot()+0x94>)
 800cd22:	6818      	ldr	r0, [r3, #0]
 800cd24:	f002 fc52 	bl	800f5cc <Network::Shutdown()>
 800cd28:	4817      	ldr	r0, [pc, #92]	; (800cd88 <RemoteConfig::HandleReboot()+0x98>)
 800cd2a:	f7fb ff13 	bl	8008b54 <printf>
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	6998      	ldr	r0, [r3, #24]
 800cd32:	b110      	cbz	r0, 800cd3a <RemoteConfig::HandleReboot()+0x4a>
 800cd34:	6803      	ldr	r3, [r0, #0]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	4798      	blx	r3
 800cd3a:	6824      	ldr	r4, [r4, #0]
 800cd3c:	4913      	ldr	r1, [pc, #76]	; (800cd8c <RemoteConfig::HandleReboot()+0x9c>)
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f7fb f950 	bl	8007fe4 <Display::TextStatus(char const*)>
 800cd44:	7c63      	ldrb	r3, [r4, #17]
 800cd46:	b18b      	cbz	r3, 800cd6c <RemoteConfig::HandleReboot()+0x7c>
 800cd48:	2312      	movs	r3, #18
 800cd4a:	f88d 3004 	strb.w	r3, [sp, #4]
 800cd4e:	23bf      	movs	r3, #191	; 0xbf
 800cd50:	7a20      	ldrb	r0, [r4, #8]
 800cd52:	f88d 3005 	strb.w	r3, [sp, #5]
 800cd56:	f88d 3006 	strb.w	r3, [sp, #6]
 800cd5a:	f006 f89b 	bl	8012e94 <gd32_i2c_set_address(unsigned char)>
 800cd5e:	68e0      	ldr	r0, [r4, #12]
 800cd60:	f006 f890 	bl	8012e84 <gd32_i2c_set_baudrate(unsigned int)>
 800cd64:	2103      	movs	r1, #3
 800cd66:	a801      	add	r0, sp, #4
 800cd68:	f006 f89a 	bl	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 800cd6c:	4b08      	ldr	r3, [pc, #32]	; (800cd90 <RemoteConfig::HandleReboot()+0xa0>)
 800cd6e:	6818      	ldr	r0, [r3, #0]
 800cd70:	f005 f85c 	bl	8011e2c <Hardware::Reboot()>
 800cd74:	b003      	add	sp, #12
 800cd76:	bd30      	pop	{r4, r5, pc}
 800cd78:	2000a8c0 	andcs	sl, r0, r0, asr #17
 800cd7c:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800cd80:	20002988 	andcs	r2, r0, r8, lsl #19
 800cd84:	2000a288 	andcs	sl, r0, r8, lsl #5
 800cd88:	080148b8 	stmdaeq	r1, {r3, r4, r5, r7, fp, lr}
 800cd8c:	080148c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, fp, lr}
 800cd90:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0

0800cd94 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800cd94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cd98:	2000      	movs	r0, #0
 800cd9a:	4d12      	ldr	r5, [pc, #72]	; (800cde4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800cd9c:	f10d 0c04 	add.w	ip, sp, #4
 800cda0:	6814      	ldr	r4, [r2, #0]
 800cda2:	7d2b      	ldrb	r3, [r5, #20]
 800cda4:	692e      	ldr	r6, [r5, #16]
 800cda6:	42a3      	cmp	r3, r4
 800cda8:	bf34      	ite	cc
 800cdaa:	4664      	movcc	r4, ip
 800cdac:	4614      	movcs	r4, r2
 800cdae:	9301      	str	r3, [sp, #4]
 800cdb0:	6827      	ldr	r7, [r4, #0]
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	3e01      	subs	r6, #1
 800cdb6:	440f      	add	r7, r1
 800cdb8:	42bc      	cmp	r4, r7
 800cdba:	d011      	beq.n	800cde0 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800cdbc:	f894 8000 	ldrb.w	r8, [r4]
 800cdc0:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800cdc4:	45f0      	cmp	r8, lr
 800cdc6:	d009      	beq.n	800cddc <RemoteConfig::GetIndex(void const*, unsigned int&)+0x48>
 800cdc8:	3001      	adds	r0, #1
 800cdca:	2805      	cmp	r0, #5
 800cdcc:	f105 051c 	add.w	r5, r5, #28
 800cdd0:	d1e6      	bne.n	800cda0 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800cdd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdd6:	b002      	add	sp, #8
 800cdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cddc:	3401      	adds	r4, #1
 800cdde:	e7eb      	b.n	800cdb8 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	e7f8      	b.n	800cdd6 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x42>
 800cde4:	08014910 	stmdaeq	r1, {r4, r8, fp, lr}

0800cde8 <strcmp>:
 800cde8:	1e43      	subs	r3, r0, #1
 800cdea:	3901      	subs	r1, #1
 800cdec:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800cdf0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cdf4:	4290      	cmp	r0, r2
 800cdf6:	d102      	bne.n	800cdfe <strcmp+0x16>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d1f7      	bne.n	800cdec <strcmp+0x4>
 800cdfc:	4770      	bx	lr
 800cdfe:	1a80      	subs	r0, r0, r2
 800ce00:	4770      	bx	lr

0800ce02 <strcasecmp>:
 800ce02:	b530      	push	{r4, r5, lr}
 800ce04:	1e42      	subs	r2, r0, #1
 800ce06:	3901      	subs	r1, #1
 800ce08:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800ce0c:	4604      	mov	r4, r0
 800ce0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce12:	2b19      	cmp	r3, #25
 800ce14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ce18:	bf98      	it	ls
 800ce1a:	f100 0420 	addls.w	r4, r0, #32
 800ce1e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800ce22:	2d19      	cmp	r5, #25
 800ce24:	bf98      	it	ls
 800ce26:	3320      	addls	r3, #32
 800ce28:	42a3      	cmp	r3, r4
 800ce2a:	d102      	bne.n	800ce32 <strcasecmp+0x30>
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	d1eb      	bne.n	800ce08 <strcasecmp+0x6>
 800ce30:	bd30      	pop	{r4, r5, pc}
 800ce32:	1ae0      	subs	r0, r4, r3
 800ce34:	e7fc      	b.n	800ce30 <strcasecmp+0x2e>
	...

0800ce38 <PropertiesConfig::EnableJSON(bool)>:
 800ce38:	4a04      	ldr	r2, [pc, #16]	; (800ce4c <PropertiesConfig::EnableJSON(bool)+0x14>)
 800ce3a:	7813      	ldrb	r3, [r2, #0]
 800ce3c:	b118      	cbz	r0, 800ce46 <PropertiesConfig::EnableJSON(bool)+0xe>
 800ce3e:	f043 0301 	orr.w	r3, r3, #1
 800ce42:	7013      	strb	r3, [r2, #0]
 800ce44:	4770      	bx	lr
 800ce46:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ce4a:	e7fa      	b.n	800ce42 <PropertiesConfig::EnableJSON(bool)+0xa>
 800ce4c:	2000a8bc 			; <UNDEFINED> instruction: 0x2000a8bc

0800ce50 <HttpDaemon::HttpDaemon()>:
 800ce50:	4a0a      	ldr	r2, [pc, #40]	; (800ce7c <HttpDaemon::HttpDaemon()+0x2c>)
 800ce52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ce56:	6002      	str	r2, [r0, #0]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800ce5e:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800ce62:	2102      	movs	r1, #2
 800ce64:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800ce68:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800ce6c:	60c2      	str	r2, [r0, #12]
 800ce6e:	8402      	strh	r2, [r0, #32]
 800ce70:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 800ce74:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	08014bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, lr}

0800ce80 <HttpDaemon::Start()>:
 800ce80:	4b04      	ldr	r3, [pc, #16]	; (800ce94 <HttpDaemon::Start()+0x14>)
 800ce82:	b510      	push	{r4, lr}
 800ce84:	2150      	movs	r1, #80	; 0x50
 800ce86:	4604      	mov	r4, r0
 800ce88:	6818      	ldr	r0, [r3, #0]
 800ce8a:	f002 fd7b 	bl	800f984 <Network::TcpBegin(unsigned short)>
 800ce8e:	6120      	str	r0, [r4, #16]
 800ce90:	bd10      	pop	{r4, pc}
 800ce92:	bf00      	nop
 800ce94:	2000a288 	andcs	sl, r0, r8, lsl #5

0800ce98 <HttpDaemon::ParseMethod(char*)>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	4604      	mov	r4, r0
 800ce9c:	4608      	mov	r0, r1
 800ce9e:	491b      	ldr	r1, [pc, #108]	; (800cf0c <HttpDaemon::ParseMethod(char*)+0x74>)
 800cea0:	f005 f90a 	bl	80120b8 <strtok>
 800cea4:	4605      	mov	r5, r0
 800cea6:	b370      	cbz	r0, 800cf06 <HttpDaemon::ParseMethod(char*)+0x6e>
 800cea8:	4919      	ldr	r1, [pc, #100]	; (800cf10 <HttpDaemon::ParseMethod(char*)+0x78>)
 800ceaa:	f7ff ff9d 	bl	800cde8 <strcmp>
 800ceae:	b940      	cbnz	r0, 800cec2 <HttpDaemon::ParseMethod(char*)+0x2a>
 800ceb0:	61e0      	str	r0, [r4, #28]
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	4915      	ldr	r1, [pc, #84]	; (800cf0c <HttpDaemon::ParseMethod(char*)+0x74>)
 800ceb6:	f005 f8ff 	bl	80120b8 <strtok>
 800ceba:	b950      	cbnz	r0, 800ced2 <HttpDaemon::ParseMethod(char*)+0x3a>
 800cebc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800cec0:	bd38      	pop	{r3, r4, r5, pc}
 800cec2:	4628      	mov	r0, r5
 800cec4:	4913      	ldr	r1, [pc, #76]	; (800cf14 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800cec6:	f7ff ff8f 	bl	800cde8 <strcmp>
 800ceca:	b9e0      	cbnz	r0, 800cf06 <HttpDaemon::ParseMethod(char*)+0x6e>
 800cecc:	2301      	movs	r3, #1
 800cece:	61e3      	str	r3, [r4, #28]
 800ced0:	e7ef      	b.n	800ceb2 <HttpDaemon::ParseMethod(char*)+0x1a>
 800ced2:	6060      	str	r0, [r4, #4]
 800ced4:	4910      	ldr	r1, [pc, #64]	; (800cf18 <HttpDaemon::ParseMethod(char*)+0x80>)
 800ced6:	2000      	movs	r0, #0
 800ced8:	f005 f8ee 	bl	80120b8 <strtok>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d0ed      	beq.n	800cebc <HttpDaemon::ParseMethod(char*)+0x24>
 800cee0:	490e      	ldr	r1, [pc, #56]	; (800cf1c <HttpDaemon::ParseMethod(char*)+0x84>)
 800cee2:	f7ff ff81 	bl	800cde8 <strcmp>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d1e8      	bne.n	800cebc <HttpDaemon::ParseMethod(char*)+0x24>
 800ceea:	490d      	ldr	r1, [pc, #52]	; (800cf20 <HttpDaemon::ParseMethod(char*)+0x88>)
 800ceec:	f005 f8e4 	bl	80120b8 <strtok>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d0e3      	beq.n	800cebc <HttpDaemon::ParseMethod(char*)+0x24>
 800cef4:	490b      	ldr	r1, [pc, #44]	; (800cf24 <HttpDaemon::ParseMethod(char*)+0x8c>)
 800cef6:	f7ff ff77 	bl	800cde8 <strcmp>
 800cefa:	2800      	cmp	r0, #0
 800cefc:	f240 10f9 	movw	r0, #505	; 0x1f9
 800cf00:	bf08      	it	eq
 800cf02:	20c8      	moveq	r0, #200	; 0xc8
 800cf04:	e7dc      	b.n	800cec0 <HttpDaemon::ParseMethod(char*)+0x28>
 800cf06:	f240 10f5 	movw	r0, #501	; 0x1f5
 800cf0a:	e7d9      	b.n	800cec0 <HttpDaemon::ParseMethod(char*)+0x28>
 800cf0c:	0801499c 	stmdaeq	r1, {r2, r3, r4, r7, r8, fp, lr}
 800cf10:	0801499e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, fp, lr}
 800cf14:	080149a2 	stmdaeq	r1, {r1, r5, r7, r8, fp, lr}
 800cf18:	08014a0c 	stmdaeq	r1, {r2, r3, r9, fp, lr}
 800cf1c:	080149a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, fp, lr}
 800cf20:	080149ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, fp, lr}
 800cf24:	080149af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, fp, lr}

0800cf28 <HttpDaemon::ParseHeaderField(char*)>:
 800cf28:	b538      	push	{r3, r4, r5, lr}
 800cf2a:	4605      	mov	r5, r0
 800cf2c:	4608      	mov	r0, r1
 800cf2e:	491d      	ldr	r1, [pc, #116]	; (800cfa4 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800cf30:	f005 f8c2 	bl	80120b8 <strtok>
 800cf34:	4604      	mov	r4, r0
 800cf36:	b910      	cbnz	r0, 800cf3e <HttpDaemon::ParseHeaderField(char*)+0x16>
 800cf38:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800cf3c:	bd38      	pop	{r3, r4, r5, pc}
 800cf3e:	491a      	ldr	r1, [pc, #104]	; (800cfa8 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800cf40:	f7ff ff5f 	bl	800ce02 <strcasecmp>
 800cf44:	b970      	cbnz	r0, 800cf64 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800cf46:	4919      	ldr	r1, [pc, #100]	; (800cfac <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800cf48:	f005 f8b6 	bl	80120b8 <strtok>
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d0f3      	beq.n	800cf38 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800cf50:	4917      	ldr	r1, [pc, #92]	; (800cfb0 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800cf52:	f7ff ff49 	bl	800cde8 <strcmp>
 800cf56:	b108      	cbz	r0, 800cf5c <HttpDaemon::ParseHeaderField(char*)+0x34>
 800cf58:	20c8      	movs	r0, #200	; 0xc8
 800cf5a:	e7ef      	b.n	800cf3c <HttpDaemon::ParseHeaderField(char*)+0x14>
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	f885 3020 	strb.w	r3, [r5, #32]
 800cf62:	e7f9      	b.n	800cf58 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800cf64:	4620      	mov	r0, r4
 800cf66:	4913      	ldr	r1, [pc, #76]	; (800cfb4 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800cf68:	f7ff ff4b 	bl	800ce02 <strcasecmp>
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	d1f2      	bne.n	800cf58 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800cf72:	4911      	ldr	r1, [pc, #68]	; (800cfb8 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800cf74:	f005 f8a0 	bl	80120b8 <strtok>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d0dd      	beq.n	800cf38 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800cf7c:	1e42      	subs	r2, r0, #1
 800cf7e:	4623      	mov	r3, r4
 800cf80:	200a      	movs	r0, #10
 800cf82:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800cf86:	b151      	cbz	r1, 800cf9e <HttpDaemon::ParseHeaderField(char*)+0x76>
 800cf88:	3930      	subs	r1, #48	; 0x30
 800cf8a:	2909      	cmp	r1, #9
 800cf8c:	d8d4      	bhi.n	800cf38 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800cf8e:	fb00 1303 	mla	r3, r0, r3, r1
 800cf92:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800cf96:	d9f4      	bls.n	800cf82 <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800cf98:	f240 109d 	movw	r0, #413	; 0x19d
 800cf9c:	e7ce      	b.n	800cf3c <HttpDaemon::ParseHeaderField(char*)+0x14>
 800cf9e:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 800cfa2:	e7d9      	b.n	800cf58 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800cfa4:	080149b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r8, fp, lr}
 800cfa8:	080149b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, fp, lr}
 800cfac:	080149c2 	stmdaeq	r1, {r1, r6, r7, r8, fp, lr}
 800cfb0:	080149c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, fp, lr}
 800cfb4:	080149d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, fp, lr}
 800cfb8:	0801499c 	stmdaeq	r1, {r2, r3, r4, r7, r8, fp, lr}

0800cfbc <HttpDaemon::ParseRequest()>:
 800cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfbe:	2400      	movs	r4, #0
 800cfc0:	4605      	mov	r5, r0
 800cfc2:	4622      	mov	r2, r4
 800cfc4:	4626      	mov	r6, r4
 800cfc6:	68c1      	ldr	r1, [r0, #12]
 800cfc8:	f880 4020 	strb.w	r4, [r0, #32]
 800cfcc:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 800cfd0:	8aab      	ldrh	r3, [r5, #20]
 800cfd2:	42a3      	cmp	r3, r4
 800cfd4:	d923      	bls.n	800d01e <HttpDaemon::ParseRequest()+0x62>
 800cfd6:	68eb      	ldr	r3, [r5, #12]
 800cfd8:	5d18      	ldrb	r0, [r3, r4]
 800cfda:	280a      	cmp	r0, #10
 800cfdc:	d10e      	bne.n	800cffc <HttpDaemon::ParseRequest()+0x40>
 800cfde:	4423      	add	r3, r4
 800cfe0:	f803 6c01 	strb.w	r6, [r3, #-1]
 800cfe4:	1c57      	adds	r7, r2, #1
 800cfe6:	b962      	cbnz	r2, 800d002 <HttpDaemon::ParseRequest()+0x46>
 800cfe8:	4628      	mov	r0, r5
 800cfea:	f7ff ff55 	bl	800ce98 <HttpDaemon::ParseMethod(char*)>
 800cfee:	28c8      	cmp	r0, #200	; 0xc8
 800cff0:	d116      	bne.n	800d020 <HttpDaemon::ParseRequest()+0x64>
 800cff2:	463a      	mov	r2, r7
 800cff4:	68e9      	ldr	r1, [r5, #12]
 800cff6:	3401      	adds	r4, #1
 800cff8:	b2a4      	uxth	r4, r4
 800cffa:	4421      	add	r1, r4
 800cffc:	3401      	adds	r4, #1
 800cffe:	b2a4      	uxth	r4, r4
 800d000:	e7e6      	b.n	800cfd0 <HttpDaemon::ParseRequest()+0x14>
 800d002:	7808      	ldrb	r0, [r1, #0]
 800d004:	b968      	cbnz	r0, 800d022 <HttpDaemon::ParseRequest()+0x66>
 800d006:	696b      	ldr	r3, [r5, #20]
 800d008:	3b01      	subs	r3, #1
 800d00a:	1b1b      	subs	r3, r3, r4
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 800d012:	b123      	cbz	r3, 800d01e <HttpDaemon::ParseRequest()+0x62>
 800d014:	68ea      	ldr	r2, [r5, #12]
 800d016:	3401      	adds	r4, #1
 800d018:	4414      	add	r4, r2
 800d01a:	60ac      	str	r4, [r5, #8]
 800d01c:	54e0      	strb	r0, [r4, r3]
 800d01e:	20c8      	movs	r0, #200	; 0xc8
 800d020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d022:	4628      	mov	r0, r5
 800d024:	f7ff ff80 	bl	800cf28 <HttpDaemon::ParseHeaderField(char*)>
 800d028:	e7e1      	b.n	800cfee <HttpDaemon::ParseRequest()+0x32>
	...

0800d02c <HttpDaemon::HandleGetTxt()>:
 800d02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d030:	6847      	ldr	r7, [r0, #4]
 800d032:	4604      	mov	r4, r0
 800d034:	1dbd      	adds	r5, r7, #6
 800d036:	462b      	mov	r3, r5
 800d038:	4618      	mov	r0, r3
 800d03a:	7802      	ldrb	r2, [r0, #0]
 800d03c:	3301      	adds	r3, #1
 800d03e:	2a00      	cmp	r2, #0
 800d040:	d1fa      	bne.n	800d038 <HttpDaemon::HandleGetTxt()+0xc>
 800d042:	1b40      	subs	r0, r0, r5
 800d044:	2804      	cmp	r0, #4
 800d046:	d925      	bls.n	800d094 <HttpDaemon::HandleGetTxt()+0x68>
 800d048:	3804      	subs	r0, #4
 800d04a:	4915      	ldr	r1, [pc, #84]	; (800d0a0 <HttpDaemon::HandleGetTxt()+0x74>)
 800d04c:	4428      	add	r0, r5
 800d04e:	f7ff fecb 	bl	800cde8 <strcmp>
 800d052:	b9f8      	cbnz	r0, 800d094 <HttpDaemon::HandleGetTxt()+0x68>
 800d054:	4b13      	ldr	r3, [pc, #76]	; (800d0a4 <HttpDaemon::HandleGetTxt()+0x78>)
 800d056:	2001      	movs	r0, #1
 800d058:	f893 8000 	ldrb.w	r8, [r3]
 800d05c:	f7ff feec 	bl	800ce38 <PropertiesConfig::EnableJSON(bool)>
 800d060:	4b11      	ldr	r3, [pc, #68]	; (800d0a8 <HttpDaemon::HandleGetTxt()+0x7c>)
 800d062:	f240 529b 	movw	r2, #1435	; 0x59b
 800d066:	4629      	mov	r1, r5
 800d068:	6818      	ldr	r0, [r3, #0]
 800d06a:	f7ff fab1 	bl	800c5d0 <RemoteConfig::HandleGet(void*, unsigned int)>
 800d06e:	4606      	mov	r6, r0
 800d070:	f008 0801 	and.w	r8, r8, #1
 800d074:	4640      	mov	r0, r8
 800d076:	f7ff fedf 	bl	800ce38 <PropertiesConfig::EnableJSON(bool)>
 800d07a:	b15e      	cbz	r6, 800d094 <HttpDaemon::HandleGetTxt()+0x68>
 800d07c:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 800d080:	3606      	adds	r6, #6
 800d082:	3422      	adds	r4, #34	; 0x22
 800d084:	443e      	add	r6, r7
 800d086:	42b5      	cmp	r5, r6
 800d088:	d008      	beq.n	800d09c <HttpDaemon::HandleGetTxt()+0x70>
 800d08a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d08e:	f804 3b01 	strb.w	r3, [r4], #1
 800d092:	e7f8      	b.n	800d086 <HttpDaemon::HandleGetTxt()+0x5a>
 800d094:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d09c:	20c8      	movs	r0, #200	; 0xc8
 800d09e:	e7fb      	b.n	800d098 <HttpDaemon::HandleGetTxt()+0x6c>
 800d0a0:	080148fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, fp, lr}
 800d0a4:	2000a8bc 			; <UNDEFINED> instruction: 0x2000a8bc
 800d0a8:	20001970 	andcs	r1, r0, r0, ror r9

0800d0ac <HttpDaemon::HandleGet()>:
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	6845      	ldr	r5, [r0, #4]
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	4943      	ldr	r1, [pc, #268]	; (800d1c0 <HttpDaemon::HandleGet()+0x114>)
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	f7ff fe97 	bl	800cde8 <strcmp>
 800d0ba:	b120      	cbz	r0, 800d0c6 <HttpDaemon::HandleGet()+0x1a>
 800d0bc:	4628      	mov	r0, r5
 800d0be:	4941      	ldr	r1, [pc, #260]	; (800d1c4 <HttpDaemon::HandleGet()+0x118>)
 800d0c0:	f7ff fe92 	bl	800cde8 <strcmp>
 800d0c4:	b960      	cbnz	r0, 800d0e0 <HttpDaemon::HandleGet()+0x34>
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	4b3f      	ldr	r3, [pc, #252]	; (800d1c8 <HttpDaemon::HandleGet()+0x11c>)
 800d0ca:	4840      	ldr	r0, [pc, #256]	; (800d1cc <HttpDaemon::HandleGet()+0x120>)
 800d0cc:	f841 3b22 	str.w	r3, [r1], #34
 800d0d0:	f000 fa7a 	bl	800d5c8 <get_file_content(char const*, char*)>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	dd1e      	ble.n	800d116 <HttpDaemon::HandleGet()+0x6a>
 800d0d8:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800d0dc:	20c8      	movs	r0, #200	; 0xc8
 800d0de:	bd70      	pop	{r4, r5, r6, pc}
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	493b      	ldr	r1, [pc, #236]	; (800d1d0 <HttpDaemon::HandleGet()+0x124>)
 800d0e4:	f7ff fe80 	bl	800cde8 <strcmp>
 800d0e8:	b928      	cbnz	r0, 800d0f6 <HttpDaemon::HandleGet()+0x4a>
 800d0ea:	4621      	mov	r1, r4
 800d0ec:	4b39      	ldr	r3, [pc, #228]	; (800d1d4 <HttpDaemon::HandleGet()+0x128>)
 800d0ee:	483a      	ldr	r0, [pc, #232]	; (800d1d8 <HttpDaemon::HandleGet()+0x12c>)
 800d0f0:	f841 3b22 	str.w	r3, [r1], #34
 800d0f4:	e7ec      	b.n	800d0d0 <HttpDaemon::HandleGet()+0x24>
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	4938      	ldr	r1, [pc, #224]	; (800d1dc <HttpDaemon::HandleGet()+0x130>)
 800d0fa:	f7ff fe75 	bl	800cde8 <strcmp>
 800d0fe:	b168      	cbz	r0, 800d11c <HttpDaemon::HandleGet()+0x70>
 800d100:	4a37      	ldr	r2, [pc, #220]	; (800d1e0 <HttpDaemon::HandleGet()+0x134>)
 800d102:	1e6b      	subs	r3, r5, #1
 800d104:	1d6e      	adds	r6, r5, #5
 800d106:	42b3      	cmp	r3, r6
 800d108:	d00e      	beq.n	800d128 <HttpDaemon::HandleGet()+0x7c>
 800d10a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d10e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d112:	4288      	cmp	r0, r1
 800d114:	d0f7      	beq.n	800d106 <HttpDaemon::HandleGet()+0x5a>
 800d116:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d11a:	e7e0      	b.n	800d0de <HttpDaemon::HandleGet()+0x32>
 800d11c:	4621      	mov	r1, r4
 800d11e:	4b31      	ldr	r3, [pc, #196]	; (800d1e4 <HttpDaemon::HandleGet()+0x138>)
 800d120:	4831      	ldr	r0, [pc, #196]	; (800d1e8 <HttpDaemon::HandleGet()+0x13c>)
 800d122:	f841 3b22 	str.w	r3, [r1], #34
 800d126:	e7d3      	b.n	800d0d0 <HttpDaemon::HandleGet()+0x24>
 800d128:	4b30      	ldr	r3, [pc, #192]	; (800d1ec <HttpDaemon::HandleGet()+0x140>)
 800d12a:	3506      	adds	r5, #6
 800d12c:	4628      	mov	r0, r5
 800d12e:	4930      	ldr	r1, [pc, #192]	; (800d1f0 <HttpDaemon::HandleGet()+0x144>)
 800d130:	6023      	str	r3, [r4, #0]
 800d132:	f7ff fe59 	bl	800cde8 <strcmp>
 800d136:	b930      	cbnz	r0, 800d146 <HttpDaemon::HandleGet()+0x9a>
 800d138:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d13c:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d140:	f000 f9ca 	bl	800d4d8 <remoteconfig::json_get_list(char*, unsigned short)>
 800d144:	e7c6      	b.n	800d0d4 <HttpDaemon::HandleGet()+0x28>
 800d146:	4628      	mov	r0, r5
 800d148:	492a      	ldr	r1, [pc, #168]	; (800d1f4 <HttpDaemon::HandleGet()+0x148>)
 800d14a:	f7ff fe4d 	bl	800cde8 <strcmp>
 800d14e:	b930      	cbnz	r0, 800d15e <HttpDaemon::HandleGet()+0xb2>
 800d150:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d154:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d158:	f000 f9f2 	bl	800d540 <remoteconfig::json_get_version(char*, unsigned short)>
 800d15c:	e7ba      	b.n	800d0d4 <HttpDaemon::HandleGet()+0x28>
 800d15e:	4628      	mov	r0, r5
 800d160:	4925      	ldr	r1, [pc, #148]	; (800d1f8 <HttpDaemon::HandleGet()+0x14c>)
 800d162:	f7ff fe41 	bl	800cde8 <strcmp>
 800d166:	b950      	cbnz	r0, 800d17e <HttpDaemon::HandleGet()+0xd2>
 800d168:	4b24      	ldr	r3, [pc, #144]	; (800d1fc <HttpDaemon::HandleGet()+0x150>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	7bdb      	ldrb	r3, [r3, #15]
 800d16e:	b31b      	cbz	r3, 800d1b8 <HttpDaemon::HandleGet()+0x10c>
 800d170:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d174:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d178:	f000 f9fe 	bl	800d578 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800d17c:	e7aa      	b.n	800d0d4 <HttpDaemon::HandleGet()+0x28>
 800d17e:	4628      	mov	r0, r5
 800d180:	491f      	ldr	r1, [pc, #124]	; (800d200 <HttpDaemon::HandleGet()+0x154>)
 800d182:	f7ff fe31 	bl	800cde8 <strcmp>
 800d186:	b930      	cbnz	r0, 800d196 <HttpDaemon::HandleGet()+0xea>
 800d188:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d18c:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d190:	f000 fa02 	bl	800d598 <remoteconfig::json_get_display(char*, unsigned short)>
 800d194:	e79e      	b.n	800d0d4 <HttpDaemon::HandleGet()+0x28>
 800d196:	4628      	mov	r0, r5
 800d198:	491a      	ldr	r1, [pc, #104]	; (800d204 <HttpDaemon::HandleGet()+0x158>)
 800d19a:	f7ff fe25 	bl	800cde8 <strcmp>
 800d19e:	b930      	cbnz	r0, 800d1ae <HttpDaemon::HandleGet()+0x102>
 800d1a0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d1a4:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d1a8:	f000 fa06 	bl	800d5b8 <remoteconfig::json_get_directory(char*, unsigned short)>
 800d1ac:	e792      	b.n	800d0d4 <HttpDaemon::HandleGet()+0x28>
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d1b4:	f7ff bf3a 	b.w	800d02c <HttpDaemon::HandleGetTxt()>
 800d1b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d1bc:	e78f      	b.n	800d0de <HttpDaemon::HandleGet()+0x32>
 800d1be:	bf00      	nop
 800d1c0:	08014a0c 	stmdaeq	r1, {r2, r3, r9, fp, lr}
 800d1c4:	080149e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, fp, lr}
 800d1c8:	08014bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, lr}
 800d1cc:	080149e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, fp, lr}
 800d1d0:	080149f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, fp, lr}
 800d1d4:	08014c18 	stmdaeq	r1, {r3, r4, sl, fp, lr}
 800d1d8:	080149f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, fp, lr}
 800d1dc:	080149fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, fp, lr}
 800d1e0:	08014a07 	stmdaeq	r1, {r0, r1, r2, r9, fp, lr}
 800d1e4:	08014c38 	stmdaeq	r1, {r3, r4, r5, sl, fp, lr}
 800d1e8:	080149fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, fp, lr}
 800d1ec:	08014c58 	stmdaeq	r1, {r3, r4, r6, sl, fp, lr}
 800d1f0:	08014a0e 	stmdaeq	r1, {r1, r2, r3, r9, fp, lr}
 800d1f4:	08014a13 	stmdaeq	r1, {r0, r1, r4, r9, fp, lr}
 800d1f8:	08014a1b 	stmdaeq	r1, {r0, r1, r3, r4, r9, fp, lr}
 800d1fc:	20001970 	andcs	r1, r0, r0, ror r9
 800d200:	08014a22 	stmdaeq	r1, {r1, r5, r9, fp, lr}
 800d204:	08014a2a 	stmdaeq	r1, {r1, r3, r5, r9, fp, lr}

0800d208 <HttpDaemon::HandlePost(bool)>:
 800d208:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d20a:	4604      	mov	r4, r0
 800d20c:	2900      	cmp	r1, #0
 800d20e:	f040 8090 	bne.w	800d332 <HttpDaemon::HandlePost(bool)+0x12a>
 800d212:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d05d      	beq.n	800d2d6 <HttpDaemon::HandlePost(bool)+0xce>
 800d21a:	6845      	ldr	r5, [r0, #4]
 800d21c:	4948      	ldr	r1, [pc, #288]	; (800d340 <HttpDaemon::HandlePost(bool)+0x138>)
 800d21e:	4628      	mov	r0, r5
 800d220:	f7ff fde2 	bl	800cde8 <strcmp>
 800d224:	2800      	cmp	r0, #0
 800d226:	bf0c      	ite	eq
 800d228:	2301      	moveq	r3, #1
 800d22a:	2300      	movne	r3, #0
 800d22c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800d230:	d055      	beq.n	800d2de <HttpDaemon::HandlePost(bool)+0xd6>
 800d232:	4628      	mov	r0, r5
 800d234:	4943      	ldr	r1, [pc, #268]	; (800d344 <HttpDaemon::HandlePost(bool)+0x13c>)
 800d236:	f7ff fdd7 	bl	800cde8 <strcmp>
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d04f      	beq.n	800d2de <HttpDaemon::HandlePost(bool)+0xd6>
 800d23e:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d242:	e04a      	b.n	800d2da <HttpDaemon::HandlePost(bool)+0xd2>
 800d244:	4940      	ldr	r1, [pc, #256]	; (800d348 <HttpDaemon::HandlePost(bool)+0x140>)
 800d246:	68a0      	ldr	r0, [r4, #8]
 800d248:	f10d 0207 	add.w	r2, sp, #7
 800d24c:	f004 f9b9 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d250:	b9e8      	cbnz	r0, 800d28e <HttpDaemon::HandlePost(bool)+0x86>
 800d252:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800d256:	4b3d      	ldr	r3, [pc, #244]	; (800d34c <HttpDaemon::HandlePost(bool)+0x144>)
 800d258:	fab6 f186 	clz	r1, r6
 800d25c:	681d      	ldr	r5, [r3, #0]
 800d25e:	0949      	lsrs	r1, r1, #5
 800d260:	69a8      	ldr	r0, [r5, #24]
 800d262:	b138      	cbz	r0, 800d274 <HttpDaemon::HandlePost(bool)+0x6c>
 800d264:	6803      	ldr	r3, [r0, #0]
 800d266:	7429      	strb	r1, [r5, #16]
 800d268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26a:	4798      	blx	r3
 800d26c:	b116      	cbz	r6, 800d274 <HttpDaemon::HandlePost(bool)+0x6c>
 800d26e:	4b38      	ldr	r3, [pc, #224]	; (800d350 <HttpDaemon::HandlePost(bool)+0x148>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	606b      	str	r3, [r5, #4]
 800d274:	4620      	mov	r0, r4
 800d276:	4b37      	ldr	r3, [pc, #220]	; (800d354 <HttpDaemon::HandlePost(bool)+0x14c>)
 800d278:	f240 519f 	movw	r1, #1439	; 0x59f
 800d27c:	4a36      	ldr	r2, [pc, #216]	; (800d358 <HttpDaemon::HandlePost(bool)+0x150>)
 800d27e:	f840 3b22 	str.w	r3, [r0], #34
 800d282:	f7fb fc8f 	bl	8008ba4 <snprintf>
 800d286:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800d28a:	20c8      	movs	r0, #200	; 0xc8
 800d28c:	e025      	b.n	800d2da <HttpDaemon::HandlePost(bool)+0xd2>
 800d28e:	4933      	ldr	r1, [pc, #204]	; (800d35c <HttpDaemon::HandlePost(bool)+0x154>)
 800d290:	68a0      	ldr	r0, [r4, #8]
 800d292:	f10d 0207 	add.w	r2, sp, #7
 800d296:	f004 f994 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d29a:	b9e0      	cbnz	r0, 800d2d6 <HttpDaemon::HandlePost(bool)+0xce>
 800d29c:	4b30      	ldr	r3, [pc, #192]	; (800d360 <HttpDaemon::HandlePost(bool)+0x158>)
 800d29e:	6818      	ldr	r0, [r3, #0]
 800d2a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d2a4:	b11b      	cbz	r3, 800d2ae <HttpDaemon::HandlePost(bool)+0xa6>
 800d2a6:	2104      	movs	r1, #4
 800d2a8:	f004 fd20 	bl	8011cec <LedBlink::SetMode(ledblink::Mode)>
 800d2ac:	e7e2      	b.n	800d274 <HttpDaemon::HandlePost(bool)+0x6c>
 800d2ae:	2102      	movs	r1, #2
 800d2b0:	e7fa      	b.n	800d2a8 <HttpDaemon::HandlePost(bool)+0xa0>
 800d2b2:	4b2c      	ldr	r3, [pc, #176]	; (800d364 <HttpDaemon::HandlePost(bool)+0x15c>)
 800d2b4:	2001      	movs	r0, #1
 800d2b6:	781d      	ldrb	r5, [r3, #0]
 800d2b8:	f7ff fdbe 	bl	800ce38 <PropertiesConfig::EnableJSON(bool)>
 800d2bc:	4b2a      	ldr	r3, [pc, #168]	; (800d368 <HttpDaemon::HandlePost(bool)+0x160>)
 800d2be:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 800d2c2:	6818      	ldr	r0, [r3, #0]
 800d2c4:	68a1      	ldr	r1, [r4, #8]
 800d2c6:	f005 0501 	and.w	r5, r5, #1
 800d2ca:	f7ff fa4d 	bl	800c768 <RemoteConfig::HandleSet(void*, unsigned int)>
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	f7ff fdb2 	bl	800ce38 <PropertiesConfig::EnableJSON(bool)>
 800d2d4:	e7ce      	b.n	800d274 <HttpDaemon::HandlePost(bool)+0x6c>
 800d2d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d2da:	b002      	add	sp, #8
 800d2dc:	bd70      	pop	{r4, r5, r6, pc}
 800d2de:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 800d2e2:	6962      	ldr	r2, [r4, #20]
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	dbd0      	blt.n	800d28a <HttpDaemon::HandlePost(bool)+0x82>
 800d2e8:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d0cc      	beq.n	800d28a <HttpDaemon::HandlePost(bool)+0x82>
 800d2f0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d0dc      	beq.n	800d2b2 <HttpDaemon::HandlePost(bool)+0xaa>
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 800d2fe:	68a0      	ldr	r0, [r4, #8]
 800d300:	f003 fed6 	bl	80110b0 <properties::convert_json_file(char*, unsigned short, bool)>
 800d304:	2800      	cmp	r0, #0
 800d306:	dde6      	ble.n	800d2d6 <HttpDaemon::HandlePost(bool)+0xce>
 800d308:	4918      	ldr	r1, [pc, #96]	; (800d36c <HttpDaemon::HandlePost(bool)+0x164>)
 800d30a:	68a0      	ldr	r0, [r4, #8]
 800d30c:	f10d 0207 	add.w	r2, sp, #7
 800d310:	f004 f957 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d314:	2800      	cmp	r0, #0
 800d316:	d195      	bne.n	800d244 <HttpDaemon::HandlePost(bool)+0x3c>
 800d318:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d0a9      	beq.n	800d274 <HttpDaemon::HandlePost(bool)+0x6c>
 800d320:	4b11      	ldr	r3, [pc, #68]	; (800d368 <HttpDaemon::HandlePost(bool)+0x160>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	7b9b      	ldrb	r3, [r3, #14]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d0d5      	beq.n	800d2d6 <HttpDaemon::HandlePost(bool)+0xce>
 800d32a:	4b11      	ldr	r3, [pc, #68]	; (800d370 <HttpDaemon::HandlePost(bool)+0x168>)
 800d32c:	6818      	ldr	r0, [r3, #0]
 800d32e:	f004 fd7d 	bl	8011e2c <Hardware::Reboot()>
 800d332:	68c3      	ldr	r3, [r0, #12]
 800d334:	6083      	str	r3, [r0, #8]
 800d336:	6943      	ldr	r3, [r0, #20]
 800d338:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 800d33c:	e7d8      	b.n	800d2f0 <HttpDaemon::HandlePost(bool)+0xe8>
 800d33e:	bf00      	nop
 800d340:	08014a34 	stmdaeq	r1, {r2, r4, r5, r9, fp, lr}
 800d344:	080149d0 	stmdaeq	r1, {r4, r6, r7, r8, fp, lr}
 800d348:	08014a22 	stmdaeq	r1, {r1, r5, r9, fp, lr}
 800d34c:	2000a8c0 	andcs	sl, r0, r0, asr #17
 800d350:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800d354:	08014bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, lr}
 800d358:	08014a51 	stmdaeq	r1, {r0, r4, r6, r9, fp, lr}
 800d35c:	08014a48 	stmdaeq	r1, {r3, r6, r9, fp, lr}
 800d360:	2000a9ac 	andcs	sl, r0, ip, lsr #19
 800d364:	2000a8bc 			; <UNDEFINED> instruction: 0x2000a8bc
 800d368:	20001970 	andcs	r1, r0, r0, ror r9
 800d36c:	08014a41 	stmdaeq	r1, {r0, r6, r9, fp, lr}
 800d370:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0

0800d374 <HttpDaemon::Run()>:
 800d374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d376:	4e4a      	ldr	r6, [pc, #296]	; (800d4a0 <HttpDaemon::Run()+0x12c>)
 800d378:	4604      	mov	r4, r0
 800d37a:	6901      	ldr	r1, [r0, #16]
 800d37c:	f100 020c 	add.w	r2, r0, #12
 800d380:	b085      	sub	sp, #20
 800d382:	6830      	ldr	r0, [r6, #0]
 800d384:	f002 fb01 	bl	800f98a <Network::TcpRead(int, unsigned char const**)>
 800d388:	6160      	str	r0, [r4, #20]
 800d38a:	2800      	cmp	r0, #0
 800d38c:	d061      	beq.n	800d452 <HttpDaemon::Run()+0xde>
 800d38e:	69a3      	ldr	r3, [r4, #24]
 800d390:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800d394:	d15f      	bne.n	800d456 <HttpDaemon::Run()+0xe2>
 800d396:	4620      	mov	r0, r4
 800d398:	f7ff fe10 	bl	800cfbc <HttpDaemon::ParseRequest()>
 800d39c:	28c8      	cmp	r0, #200	; 0xc8
 800d39e:	61a0      	str	r0, [r4, #24]
 800d3a0:	d106      	bne.n	800d3b0 <HttpDaemon::Run()+0x3c>
 800d3a2:	69e3      	ldr	r3, [r4, #28]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d147      	bne.n	800d438 <HttpDaemon::Run()+0xc4>
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f7ff fe7f 	bl	800d0ac <HttpDaemon::HandleGet()>
 800d3ae:	61a0      	str	r0, [r4, #24]
 800d3b0:	69a3      	ldr	r3, [r4, #24]
 800d3b2:	f104 0722 	add.w	r7, r4, #34	; 0x22
 800d3b6:	2bc8      	cmp	r3, #200	; 0xc8
 800d3b8:	d06f      	beq.n	800d49a <HttpDaemon::Run()+0x126>
 800d3ba:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800d3be:	d062      	beq.n	800d486 <HttpDaemon::Run()+0x112>
 800d3c0:	dc52      	bgt.n	800d468 <HttpDaemon::Run()+0xf4>
 800d3c2:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800d3c6:	d060      	beq.n	800d48a <HttpDaemon::Run()+0x116>
 800d3c8:	f240 129d 	movw	r2, #413	; 0x19d
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d05e      	beq.n	800d48e <HttpDaemon::Run()+0x11a>
 800d3d0:	4d34      	ldr	r5, [pc, #208]	; (800d4a4 <HttpDaemon::Run()+0x130>)
 800d3d2:	4a35      	ldr	r2, [pc, #212]	; (800d4a8 <HttpDaemon::Run()+0x134>)
 800d3d4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800d3d8:	bf18      	it	ne
 800d3da:	4615      	movne	r5, r2
 800d3dc:	4a33      	ldr	r2, [pc, #204]	; (800d4ac <HttpDaemon::Run()+0x138>)
 800d3de:	f240 519f 	movw	r1, #1439	; 0x59f
 800d3e2:	6022      	str	r2, [r4, #0]
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	e9cd 5500 	strd	r5, r5, [sp]
 800d3ea:	4a31      	ldr	r2, [pc, #196]	; (800d4b0 <HttpDaemon::Run()+0x13c>)
 800d3ec:	f7fb fbda 	bl	8008ba4 <snprintf>
 800d3f0:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800d3f4:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800d3f8:	f240 519f 	movw	r1, #1439	; 0x59f
 800d3fc:	9303      	str	r3, [sp, #12]
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	4a2c      	ldr	r2, [pc, #176]	; (800d4b4 <HttpDaemon::Run()+0x140>)
 800d402:	9302      	str	r3, [sp, #8]
 800d404:	4b2c      	ldr	r3, [pc, #176]	; (800d4b8 <HttpDaemon::Run()+0x144>)
 800d406:	68e0      	ldr	r0, [r4, #12]
 800d408:	e9cd 5300 	strd	r5, r3, [sp]
 800d40c:	69a3      	ldr	r3, [r4, #24]
 800d40e:	f7fb fbc9 	bl	8008ba4 <snprintf>
 800d412:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800d416:	b283      	uxth	r3, r0
 800d418:	6830      	ldr	r0, [r6, #0]
 800d41a:	f002 faba 	bl	800f992 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800d41e:	463a      	mov	r2, r7
 800d420:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800d424:	6921      	ldr	r1, [r4, #16]
 800d426:	6830      	ldr	r0, [r6, #0]
 800d428:	f002 fab3 	bl	800f992 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800d42c:	f44f 7202 	mov.w	r2, #520	; 0x208
 800d430:	2302      	movs	r3, #2
 800d432:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800d436:	e00c      	b.n	800d452 <HttpDaemon::Run()+0xde>
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d1b9      	bne.n	800d3b0 <HttpDaemon::Run()+0x3c>
 800d43c:	2100      	movs	r1, #0
 800d43e:	4620      	mov	r0, r4
 800d440:	f7ff fee2 	bl	800d208 <HttpDaemon::HandlePost(bool)>
 800d444:	28c8      	cmp	r0, #200	; 0xc8
 800d446:	61a0      	str	r0, [r4, #24]
 800d448:	d1b2      	bne.n	800d3b0 <HttpDaemon::Run()+0x3c>
 800d44a:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1ae      	bne.n	800d3b0 <HttpDaemon::Run()+0x3c>
 800d452:	b005      	add	sp, #20
 800d454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d456:	2bc8      	cmp	r3, #200	; 0xc8
 800d458:	d1aa      	bne.n	800d3b0 <HttpDaemon::Run()+0x3c>
 800d45a:	69e1      	ldr	r1, [r4, #28]
 800d45c:	2901      	cmp	r1, #1
 800d45e:	d1a7      	bne.n	800d3b0 <HttpDaemon::Run()+0x3c>
 800d460:	4620      	mov	r0, r4
 800d462:	f7ff fed1 	bl	800d208 <HttpDaemon::HandlePost(bool)>
 800d466:	e7a2      	b.n	800d3ae <HttpDaemon::Run()+0x3a>
 800d468:	f240 12f5 	movw	r2, #501	; 0x1f5
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d010      	beq.n	800d492 <HttpDaemon::Run()+0x11e>
 800d470:	f240 12f9 	movw	r2, #505	; 0x1f9
 800d474:	4293      	cmp	r3, r2
 800d476:	d00e      	beq.n	800d496 <HttpDaemon::Run()+0x122>
 800d478:	4d10      	ldr	r5, [pc, #64]	; (800d4bc <HttpDaemon::Run()+0x148>)
 800d47a:	4a0b      	ldr	r2, [pc, #44]	; (800d4a8 <HttpDaemon::Run()+0x134>)
 800d47c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d480:	bf18      	it	ne
 800d482:	4615      	movne	r5, r2
 800d484:	e7aa      	b.n	800d3dc <HttpDaemon::Run()+0x68>
 800d486:	4d0e      	ldr	r5, [pc, #56]	; (800d4c0 <HttpDaemon::Run()+0x14c>)
 800d488:	e7a8      	b.n	800d3dc <HttpDaemon::Run()+0x68>
 800d48a:	4d0e      	ldr	r5, [pc, #56]	; (800d4c4 <HttpDaemon::Run()+0x150>)
 800d48c:	e7a6      	b.n	800d3dc <HttpDaemon::Run()+0x68>
 800d48e:	4d0e      	ldr	r5, [pc, #56]	; (800d4c8 <HttpDaemon::Run()+0x154>)
 800d490:	e7a4      	b.n	800d3dc <HttpDaemon::Run()+0x68>
 800d492:	4d0e      	ldr	r5, [pc, #56]	; (800d4cc <HttpDaemon::Run()+0x158>)
 800d494:	e7a2      	b.n	800d3dc <HttpDaemon::Run()+0x68>
 800d496:	4d0e      	ldr	r5, [pc, #56]	; (800d4d0 <HttpDaemon::Run()+0x15c>)
 800d498:	e7a0      	b.n	800d3dc <HttpDaemon::Run()+0x68>
 800d49a:	4d0e      	ldr	r5, [pc, #56]	; (800d4d4 <HttpDaemon::Run()+0x160>)
 800d49c:	e7aa      	b.n	800d3f4 <HttpDaemon::Run()+0x80>
 800d49e:	bf00      	nop
 800d4a0:	2000a288 	andcs	sl, r0, r8, lsl #5
 800d4a4:	08014b12 	stmdaeq	r1, {r1, r4, r8, r9, fp, lr}
 800d4a8:	08014b1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, fp, lr}
 800d4ac:	08014bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, lr}
 800d4b0:	08014b45 	stmdaeq	r1, {r0, r2, r6, r8, r9, fp, lr}
 800d4b4:	08014ba0 	stmdaeq	r1, {r5, r7, r8, r9, fp, lr}
 800d4b8:	080141d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, lr}
 800d4bc:	08014b2c 	stmdaeq	r1, {r2, r3, r5, r8, r9, fp, lr}
 800d4c0:	08014ad0 	stmdaeq	r1, {r4, r6, r7, r9, fp, lr}
 800d4c4:	08014ac6 	stmdaeq	r1, {r1, r2, r6, r7, r9, fp, lr}
 800d4c8:	08014aad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r9, fp, lr}
 800d4cc:	08014afb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r9, fp, lr}
 800d4d0:	08014ae5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9, fp, lr}
 800d4d4:	08014b42 	stmdaeq	r1, {r1, r6, r8, r9, fp, lr}

0800d4d8 <remoteconfig::json_get_list(char*, unsigned short)>:
 800d4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4dc:	4b14      	ldr	r3, [pc, #80]	; (800d530 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800d4de:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800d534 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	b088      	sub	sp, #32
 800d4e6:	4605      	mov	r5, r0
 800d4e8:	f8d8 0000 	ldr.w	r0, [r8]
 800d4ec:	691c      	ldr	r4, [r3, #16]
 800d4ee:	460e      	mov	r6, r1
 800d4f0:	f7ff f81e 	bl	800c530 <RemoteConfig::GetStringNode() const>
 800d4f4:	4607      	mov	r7, r0
 800d4f6:	f8d8 0000 	ldr.w	r0, [r8]
 800d4fa:	f7ff f825 	bl	800c548 <RemoteConfig::GetStringOutput() const>
 800d4fe:	4b0e      	ldr	r3, [pc, #56]	; (800d538 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 800d500:	4631      	mov	r1, r6
 800d502:	7a1a      	ldrb	r2, [r3, #8]
 800d504:	3309      	adds	r3, #9
 800d506:	9303      	str	r3, [sp, #12]
 800d508:	0e23      	lsrs	r3, r4, #24
 800d50a:	9302      	str	r3, [sp, #8]
 800d50c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800d510:	9301      	str	r3, [sp, #4]
 800d512:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800d516:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	4628      	mov	r0, r5
 800d51e:	4a07      	ldr	r2, [pc, #28]	; (800d53c <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 800d520:	9704      	str	r7, [sp, #16]
 800d522:	b2e3      	uxtb	r3, r4
 800d524:	f7fb fb3e 	bl	8008ba4 <snprintf>
 800d528:	b280      	uxth	r0, r0
 800d52a:	b008      	add	sp, #32
 800d52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d530:	2000a288 	andcs	sl, r0, r8, lsl #5
 800d534:	20001970 	andcs	r1, r0, r0, ror r9
 800d538:	2000194c 	andcs	r1, r0, ip, asr #18
 800d53c:	08014cd2 	stmdaeq	r1, {r1, r4, r6, r7, sl, fp, lr}

0800d540 <remoteconfig::json_get_version(char*, unsigned short)>:
 800d540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d542:	2208      	movs	r2, #8
 800d544:	4b09      	ldr	r3, [pc, #36]	; (800d56c <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800d546:	9204      	str	r2, [sp, #16]
 800d548:	f1a3 020b 	sub.w	r2, r3, #11
 800d54c:	9203      	str	r2, [sp, #12]
 800d54e:	220b      	movs	r2, #11
 800d550:	9202      	str	r2, [sp, #8]
 800d552:	4a07      	ldr	r2, [pc, #28]	; (800d570 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800d554:	9305      	str	r3, [sp, #20]
 800d556:	3b0e      	subs	r3, #14
 800d558:	9201      	str	r2, [sp, #4]
 800d55a:	9300      	str	r3, [sp, #0]
 800d55c:	4a05      	ldr	r2, [pc, #20]	; (800d574 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800d55e:	2303      	movs	r3, #3
 800d560:	f7fb fb20 	bl	8008ba4 <snprintf>
 800d564:	b280      	uxth	r0, r0
 800d566:	b007      	add	sp, #28
 800d568:	f85d fb04 	ldr.w	pc, [sp], #4
 800d56c:	2000a95e 	andcs	sl, r0, lr, asr r9
 800d570:	080141d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, lr}
 800d574:	08014d31 	stmdaeq	r1, {r0, r4, r5, r8, sl, fp, lr}

0800d578 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800d578:	b508      	push	{r3, lr}
 800d57a:	4b05      	ldr	r3, [pc, #20]	; (800d590 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800d57c:	681a      	ldr	r2, [r3, #0]
 800d57e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d582:	fbb2 f3f3 	udiv	r3, r2, r3
 800d586:	4a03      	ldr	r2, [pc, #12]	; (800d594 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800d588:	f7fb fb0c 	bl	8008ba4 <snprintf>
 800d58c:	b280      	uxth	r0, r0
 800d58e:	bd08      	pop	{r3, pc}
 800d590:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800d594:	08014d77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, sl, fp, lr}

0800d598 <remoteconfig::json_get_display(char*, unsigned short)>:
 800d598:	b508      	push	{r3, lr}
 800d59a:	4b05      	ldr	r3, [pc, #20]	; (800d5b0 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800d59c:	4a05      	ldr	r2, [pc, #20]	; (800d5b4 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	7c1b      	ldrb	r3, [r3, #16]
 800d5a2:	f083 0301 	eor.w	r3, r3, #1
 800d5a6:	f7fb fafd 	bl	8008ba4 <snprintf>
 800d5aa:	b280      	uxth	r0, r0
 800d5ac:	bd08      	pop	{r3, pc}
 800d5ae:	bf00      	nop
 800d5b0:	2000a8c0 	andcs	sl, r0, r0, asr #17
 800d5b4:	08014d86 	stmdaeq	r1, {r1, r2, r7, r8, sl, fp, lr}

0800d5b8 <remoteconfig::json_get_directory(char*, unsigned short)>:
 800d5b8:	b508      	push	{r3, lr}
 800d5ba:	4a02      	ldr	r2, [pc, #8]	; (800d5c4 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800d5bc:	f7fb faf2 	bl	8008ba4 <snprintf>
 800d5c0:	b280      	uxth	r0, r0
 800d5c2:	bd08      	pop	{r3, pc}
 800d5c4:	08014d95 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, fp, lr}

0800d5c8 <get_file_content(char const*, char*)>:
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5cc:	4a10      	ldr	r2, [pc, #64]	; (800d610 <get_file_content(char const*, char*)+0x48>)
 800d5ce:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800d5d2:	1e46      	subs	r6, r0, #1
 800d5d4:	3c01      	subs	r4, #1
 800d5d6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800d5da:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800d5de:	42bd      	cmp	r5, r7
 800d5e0:	d10f      	bne.n	800d602 <get_file_content(char const*, char*)+0x3a>
 800d5e2:	2d00      	cmp	r5, #0
 800d5e4:	d1f7      	bne.n	800d5d6 <get_file_content(char const*, char*)+0xe>
 800d5e6:	4608      	mov	r0, r1
 800d5e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800d5f4:	f800 2b01 	strb.w	r2, [r0], #1
 800d5f8:	2a00      	cmp	r2, #0
 800d5fa:	d1f9      	bne.n	800d5f0 <get_file_content(char const*, char*)+0x28>
 800d5fc:	1a40      	subs	r0, r0, r1
 800d5fe:	3801      	subs	r0, #1
 800d600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d602:	3301      	adds	r3, #1
 800d604:	2b03      	cmp	r3, #3
 800d606:	d1e2      	bne.n	800d5ce <get_file_content(char const*, char*)+0x6>
 800d608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d60c:	e7f8      	b.n	800d600 <get_file_content(char const*, char*)+0x38>
 800d60e:	bf00      	nop
 800d610:	080150d8 	stmdaeq	r1, {r3, r4, r6, r7, ip, lr}

0800d614 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800d614:	2300      	movs	r3, #0
 800d616:	2020      	movs	r0, #32
 800d618:	b510      	push	{r4, lr}
 800d61a:	4a04      	ldr	r2, [pc, #16]	; (800d62c <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800d61c:	428b      	cmp	r3, r1
 800d61e:	d004      	beq.n	800d62a <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x16>
 800d620:	f852 4b04 	ldr.w	r4, [r2], #4
 800d624:	3301      	adds	r3, #1
 800d626:	4420      	add	r0, r4
 800d628:	e7f8      	b.n	800d61c <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800d62a:	bd10      	pop	{r4, pc}
 800d62c:	0801561c 	stmdaeq	r1, {r2, r3, r4, r9, sl, ip, lr}

0800d630 <SpiFlashStore::Init()>:
 800d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800d758 <SpiFlashStore::Init()+0x128>
 800d638:	4607      	mov	r7, r0
 800d63a:	b085      	sub	sp, #20
 800d63c:	f8d8 0000 	ldr.w	r0, [r8]
 800d640:	f000 fbe6 	bl	800de10 <FlashRom::GetSectorSize()>
 800d644:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800d648:	4605      	mov	r5, r0
 800d64a:	f040 8083 	bne.w	800d754 <SpiFlashStore::Init()+0x124>
 800d64e:	f8d8 0000 	ldr.w	r0, [r8]
 800d652:	f000 fbd5 	bl	800de00 <FlashRom::GetSize()>
 800d656:	4b41      	ldr	r3, [pc, #260]	; (800d75c <SpiFlashStore::Init()+0x12c>)
 800d658:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800d65c:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800d660:	6019      	str	r1, [r3, #0]
 800d662:	2e00      	cmp	r6, #0
 800d664:	d176      	bne.n	800d754 <SpiFlashStore::Init()+0x124>
 800d666:	4c3e      	ldr	r4, [pc, #248]	; (800d760 <SpiFlashStore::Init()+0x130>)
 800d668:	ab03      	add	r3, sp, #12
 800d66a:	9300      	str	r3, [sp, #0]
 800d66c:	462a      	mov	r2, r5
 800d66e:	4623      	mov	r3, r4
 800d670:	f8d8 0000 	ldr.w	r0, [r8]
 800d674:	f000 fbcf 	bl	800de16 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800d678:	7823      	ldrb	r3, [r4, #0]
 800d67a:	2b41      	cmp	r3, #65	; 0x41
 800d67c:	bf1c      	itt	ne
 800d67e:	2341      	movne	r3, #65	; 0x41
 800d680:	7023      	strbne	r3, [r4, #0]
 800d682:	7863      	ldrb	r3, [r4, #1]
 800d684:	bf14      	ite	ne
 800d686:	4635      	movne	r5, r6
 800d688:	2501      	moveq	r5, #1
 800d68a:	2b76      	cmp	r3, #118	; 0x76
 800d68c:	bf1c      	itt	ne
 800d68e:	2376      	movne	r3, #118	; 0x76
 800d690:	7063      	strbne	r3, [r4, #1]
 800d692:	78a3      	ldrb	r3, [r4, #2]
 800d694:	bf18      	it	ne
 800d696:	2500      	movne	r5, #0
 800d698:	2b56      	cmp	r3, #86	; 0x56
 800d69a:	bf1c      	itt	ne
 800d69c:	2356      	movne	r3, #86	; 0x56
 800d69e:	70a3      	strbne	r3, [r4, #2]
 800d6a0:	78e3      	ldrb	r3, [r4, #3]
 800d6a2:	bf18      	it	ne
 800d6a4:	2500      	movne	r5, #0
 800d6a6:	2b10      	cmp	r3, #16
 800d6a8:	d01c      	beq.n	800d6e4 <SpiFlashStore::Init()+0xb4>
 800d6aa:	2310      	movs	r3, #16
 800d6ac:	70e3      	strb	r3, [r4, #3]
 800d6ae:	2201      	movs	r2, #1
 800d6b0:	2500      	movs	r5, #0
 800d6b2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800d6b6:	4b2b      	ldr	r3, [pc, #172]	; (800d764 <SpiFlashStore::Init()+0x134>)
 800d6b8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800d768 <SpiFlashStore::Init()+0x138>
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	4631      	mov	r1, r6
 800d6c0:	4638      	mov	r0, r7
 800d6c2:	f7ff ffa7 	bl	800d614 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800d6c6:	1823      	adds	r3, r4, r0
 800d6c8:	5425      	strb	r5, [r4, r0]
 800d6ca:	705d      	strb	r5, [r3, #1]
 800d6cc:	709d      	strb	r5, [r3, #2]
 800d6ce:	70dd      	strb	r5, [r3, #3]
 800d6d0:	f858 3b04 	ldr.w	r3, [r8], #4
 800d6d4:	1d02      	adds	r2, r0, #4
 800d6d6:	4403      	add	r3, r0
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d931      	bls.n	800d740 <SpiFlashStore::Init()+0x110>
 800d6dc:	f804 9002 	strb.w	r9, [r4, r2]
 800d6e0:	3201      	adds	r2, #1
 800d6e2:	e7f9      	b.n	800d6d8 <SpiFlashStore::Init()+0xa8>
 800d6e4:	2d00      	cmp	r5, #0
 800d6e6:	d0e2      	beq.n	800d6ae <SpiFlashStore::Init()+0x7e>
 800d6e8:	f04f 0900 	mov.w	r9, #0
 800d6ec:	46c8      	mov	r8, r9
 800d6ee:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800d76c <SpiFlashStore::Init()+0x13c>
 800d6f2:	f8da b000 	ldr.w	fp, [sl]
 800d6f6:	4631      	mov	r1, r6
 800d6f8:	4638      	mov	r0, r7
 800d6fa:	f7ff ff8b 	bl	800d614 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800d6fe:	5c23      	ldrb	r3, [r4, r0]
 800d700:	2bff      	cmp	r3, #255	; 0xff
 800d702:	d114      	bne.n	800d72e <SpiFlashStore::Init()+0xfe>
 800d704:	1823      	adds	r3, r4, r0
 800d706:	785a      	ldrb	r2, [r3, #1]
 800d708:	2aff      	cmp	r2, #255	; 0xff
 800d70a:	d110      	bne.n	800d72e <SpiFlashStore::Init()+0xfe>
 800d70c:	789a      	ldrb	r2, [r3, #2]
 800d70e:	2aff      	cmp	r2, #255	; 0xff
 800d710:	d10d      	bne.n	800d72e <SpiFlashStore::Init()+0xfe>
 800d712:	78da      	ldrb	r2, [r3, #3]
 800d714:	2aff      	cmp	r2, #255	; 0xff
 800d716:	d10a      	bne.n	800d72e <SpiFlashStore::Init()+0xfe>
 800d718:	46a9      	mov	r9, r5
 800d71a:	f04f 0b01 	mov.w	fp, #1
 800d71e:	f804 8000 	strb.w	r8, [r4, r0]
 800d722:	f883 8001 	strb.w	r8, [r3, #1]
 800d726:	f883 8002 	strb.w	r8, [r3, #2]
 800d72a:	f883 8003 	strb.w	r8, [r3, #3]
 800d72e:	3601      	adds	r6, #1
 800d730:	2e1c      	cmp	r6, #28
 800d732:	d1e0      	bne.n	800d6f6 <SpiFlashStore::Init()+0xc6>
 800d734:	f1b9 0f00 	cmp.w	r9, #0
 800d738:	d008      	beq.n	800d74c <SpiFlashStore::Init()+0x11c>
 800d73a:	f8ca b000 	str.w	fp, [sl]
 800d73e:	e005      	b.n	800d74c <SpiFlashStore::Init()+0x11c>
 800d740:	3601      	adds	r6, #1
 800d742:	2e1c      	cmp	r6, #28
 800d744:	d1bb      	bne.n	800d6be <SpiFlashStore::Init()+0x8e>
 800d746:	2501      	movs	r5, #1
 800d748:	4b08      	ldr	r3, [pc, #32]	; (800d76c <SpiFlashStore::Init()+0x13c>)
 800d74a:	601d      	str	r5, [r3, #0]
 800d74c:	4628      	mov	r0, r5
 800d74e:	b005      	add	sp, #20
 800d750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d754:	2500      	movs	r5, #0
 800d756:	e7f9      	b.n	800d74c <SpiFlashStore::Init()+0x11c>
 800d758:	200029a4 	andcs	r2, r0, r4, lsr #19
 800d75c:	20002978 	andcs	r2, r0, r8, ror r9
 800d760:	20001978 	andcs	r1, r0, r8, ror r9
 800d764:	2000298c 	andcs	r2, r0, ip, lsl #19
 800d768:	0801561c 	stmdaeq	r1, {r2, r3, r4, r9, sl, ip, lr}
 800d76c:	20002984 	andcs	r2, r0, r4, lsl #19

0800d770 <SpiFlashStore::SpiFlashStore()>:
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	4b0d      	ldr	r3, [pc, #52]	; (800d7a8 <SpiFlashStore::SpiFlashStore()+0x38>)
 800d774:	4604      	mov	r4, r0
 800d776:	6018      	str	r0, [r3, #0]
 800d778:	4b0c      	ldr	r3, [pc, #48]	; (800d7ac <SpiFlashStore::SpiFlashStore()+0x3c>)
 800d77a:	4d0d      	ldr	r5, [pc, #52]	; (800d7b0 <SpiFlashStore::SpiFlashStore()+0x40>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	b113      	cbz	r3, 800d788 <SpiFlashStore::SpiFlashStore()+0x18>
 800d782:	f7ff ff55 	bl	800d630 <SpiFlashStore::Init()>
 800d786:	7028      	strb	r0, [r5, #0]
 800d788:	782b      	ldrb	r3, [r5, #0]
 800d78a:	b153      	cbz	r3, 800d7a2 <SpiFlashStore::SpiFlashStore()+0x32>
 800d78c:	2320      	movs	r3, #32
 800d78e:	2200      	movs	r2, #0
 800d790:	4908      	ldr	r1, [pc, #32]	; (800d7b4 <SpiFlashStore::SpiFlashStore()+0x44>)
 800d792:	f851 0b04 	ldr.w	r0, [r1], #4
 800d796:	3201      	adds	r2, #1
 800d798:	2a1c      	cmp	r2, #28
 800d79a:	4403      	add	r3, r0
 800d79c:	d1f9      	bne.n	800d792 <SpiFlashStore::SpiFlashStore()+0x22>
 800d79e:	4a06      	ldr	r2, [pc, #24]	; (800d7b8 <SpiFlashStore::SpiFlashStore()+0x48>)
 800d7a0:	6013      	str	r3, [r2, #0]
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	bd38      	pop	{r3, r4, r5, pc}
 800d7a6:	bf00      	nop
 800d7a8:	20002988 	andcs	r2, r0, r8, lsl #19
 800d7ac:	200029a4 	andcs	r2, r0, r4, lsr #19
 800d7b0:	2000297c 	andcs	r2, r0, ip, ror r9
 800d7b4:	0801561c 	stmdaeq	r1, {r2, r3, r4, r9, sl, ip, lr}
 800d7b8:	20002980 	andcs	r2, r0, r0, lsl #19

0800d7bc <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800d7bc:	b508      	push	{r3, lr}
 800d7be:	f7ff ff29 	bl	800d614 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	4904      	ldr	r1, [pc, #16]	; (800d7d8 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800d7c6:	1842      	adds	r2, r0, r1
 800d7c8:	540b      	strb	r3, [r1, r0]
 800d7ca:	7053      	strb	r3, [r2, #1]
 800d7cc:	7093      	strb	r3, [r2, #2]
 800d7ce:	70d3      	strb	r3, [r2, #3]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	4b02      	ldr	r3, [pc, #8]	; (800d7dc <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	bd08      	pop	{r3, pc}
 800d7d8:	20001978 	andcs	r1, r0, r8, ror r9
 800d7dc:	20002984 	andcs	r2, r0, r4, lsl #19

0800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800d7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e4:	461c      	mov	r4, r3
 800d7e6:	4b19      	ldr	r3, [pc, #100]	; (800d84c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800d7e8:	4615      	mov	r5, r2
 800d7ea:	781f      	ldrb	r7, [r3, #0]
 800d7ec:	9e07      	ldr	r6, [sp, #28]
 800d7ee:	b35f      	cbz	r7, 800d848 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800d7f0:	f7ff ff10 	bl	800d614 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800d7f4:	f04f 0c00 	mov.w	ip, #0
 800d7f8:	4a15      	ldr	r2, [pc, #84]	; (800d850 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800d7fa:	1941      	adds	r1, r0, r5
 800d7fc:	1e63      	subs	r3, r4, #1
 800d7fe:	9c06      	ldr	r4, [sp, #24]
 800d800:	4411      	add	r1, r2
 800d802:	440c      	add	r4, r1
 800d804:	42a1      	cmp	r1, r4
 800d806:	d00a      	beq.n	800d81e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3e>
 800d808:	f891 8000 	ldrb.w	r8, [r1]
 800d80c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800d810:	3101      	adds	r1, #1
 800d812:	45f0      	cmp	r8, lr
 800d814:	bf1c      	itt	ne
 800d816:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800d81a:	46bc      	movne	ip, r7
 800d81c:	e7f2      	b.n	800d804 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800d81e:	f1bc 0f00 	cmp.w	ip, #0
 800d822:	d011      	beq.n	800d848 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800d824:	4b0b      	ldr	r3, [pc, #44]	; (800d854 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800d826:	6819      	ldr	r1, [r3, #0]
 800d828:	b109      	cbz	r1, 800d82e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x4e>
 800d82a:	2906      	cmp	r1, #6
 800d82c:	d101      	bne.n	800d832 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800d82e:	2101      	movs	r1, #1
 800d830:	6019      	str	r1, [r3, #0]
 800d832:	4b09      	ldr	r3, [pc, #36]	; (800d858 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800d834:	6819      	ldr	r1, [r3, #0]
 800d836:	4b09      	ldr	r3, [pc, #36]	; (800d85c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800d838:	6019      	str	r1, [r3, #0]
 800d83a:	b12d      	cbz	r5, 800d848 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800d83c:	b126      	cbz	r6, 800d848 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800d83e:	9b08      	ldr	r3, [sp, #32]
 800d840:	4418      	add	r0, r3
 800d842:	5813      	ldr	r3, [r2, r0]
 800d844:	4333      	orrs	r3, r6
 800d846:	5013      	str	r3, [r2, r0]
 800d848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d84c:	2000297c 	andcs	r2, r0, ip, ror r9
 800d850:	20001978 	andcs	r1, r0, r8, ror r9
 800d854:	20002984 	andcs	r2, r0, r4, lsl #19
 800d858:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800d85c:	20001974 	andcs	r1, r0, r4, ror r9

0800d860 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 800d860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d864:	461d      	mov	r5, r3
 800d866:	4b15      	ldr	r3, [pc, #84]	; (800d8bc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x5c>)
 800d868:	b085      	sub	sp, #20
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	4607      	mov	r7, r0
 800d86e:	4688      	mov	r8, r1
 800d870:	4614      	mov	r4, r2
 800d872:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800d876:	b1eb      	cbz	r3, 800d8b4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 800d878:	f7ff fecc 	bl	800d614 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800d87c:	4910      	ldr	r1, [pc, #64]	; (800d8c0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x60>)
 800d87e:	4a11      	ldr	r2, [pc, #68]	; (800d8c4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x64>)
 800d880:	7809      	ldrb	r1, [r1, #0]
 800d882:	eb00 0309 	add.w	r3, r0, r9
 800d886:	189e      	adds	r6, r3, r2
 800d888:	b951      	cbnz	r1, 800d8a0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 800d88a:	589b      	ldr	r3, [r3, r2]
 800d88c:	b143      	cbz	r3, 800d8a0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 800d88e:	3c01      	subs	r4, #1
 800d890:	4435      	add	r5, r6
 800d892:	42b5      	cmp	r5, r6
 800d894:	d00e      	beq.n	800d8b4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 800d896:	f816 3b01 	ldrb.w	r3, [r6], #1
 800d89a:	f804 3f01 	strb.w	r3, [r4, #1]!
 800d89e:	e7f8      	b.n	800d892 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x32>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	464a      	mov	r2, r9
 800d8a4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800d8a8:	4641      	mov	r1, r8
 800d8aa:	4623      	mov	r3, r4
 800d8ac:	4638      	mov	r0, r7
 800d8ae:	9500      	str	r5, [sp, #0]
 800d8b0:	f7ff ff96 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800d8b4:	b005      	add	sp, #20
 800d8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8ba:	bf00      	nop
 800d8bc:	2000297c 	andcs	r2, r0, ip, ror r9
 800d8c0:	2000298c 	andcs	r2, r0, ip, lsl #19
 800d8c4:	20001978 	andcs	r1, r0, r8, ror r9

0800d8c8 <SpiFlashStore::Flash()>:
 800d8c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8ca:	4c25      	ldr	r4, [pc, #148]	; (800d960 <SpiFlashStore::Flash()+0x98>)
 800d8cc:	6820      	ldr	r0, [r4, #0]
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d043      	beq.n	800d95a <SpiFlashStore::Flash()+0x92>
 800d8d2:	3801      	subs	r0, #1
 800d8d4:	2805      	cmp	r0, #5
 800d8d6:	d831      	bhi.n	800d93c <SpiFlashStore::Flash()+0x74>
 800d8d8:	e8df f000 	tbb	[pc, r0]
 800d8dc:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800d8e0:	4b203025 	blmi	881997c <__exidx_end+0x8037f4>
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	4b20      	ldr	r3, [pc, #128]	; (800d968 <SpiFlashStore::Flash()+0xa0>)
 800d8e8:	601a      	str	r2, [r3, #0]
 800d8ea:	2302      	movs	r3, #2
 800d8ec:	6023      	str	r3, [r4, #0]
 800d8ee:	2001      	movs	r0, #1
 800d8f0:	e033      	b.n	800d95a <SpiFlashStore::Flash()+0x92>
 800d8f2:	4b1c      	ldr	r3, [pc, #112]	; (800d964 <SpiFlashStore::Flash()+0x9c>)
 800d8f4:	4a1c      	ldr	r2, [pc, #112]	; (800d968 <SpiFlashStore::Flash()+0xa0>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	6812      	ldr	r2, [r2, #0]
 800d8fa:	1a9b      	subs	r3, r3, r2
 800d8fc:	2b63      	cmp	r3, #99	; 0x63
 800d8fe:	d9f6      	bls.n	800d8ee <SpiFlashStore::Flash()+0x26>
 800d900:	2303      	movs	r3, #3
 800d902:	e7f3      	b.n	800d8ec <SpiFlashStore::Flash()+0x24>
 800d904:	4919      	ldr	r1, [pc, #100]	; (800d96c <SpiFlashStore::Flash()+0xa4>)
 800d906:	481a      	ldr	r0, [pc, #104]	; (800d970 <SpiFlashStore::Flash()+0xa8>)
 800d908:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d90c:	6809      	ldr	r1, [r1, #0]
 800d90e:	6800      	ldr	r0, [r0, #0]
 800d910:	ab03      	add	r3, sp, #12
 800d912:	f000 fa8f 	bl	800de34 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800d916:	2800      	cmp	r0, #0
 800d918:	d0e9      	beq.n	800d8ee <SpiFlashStore::Flash()+0x26>
 800d91a:	4b12      	ldr	r3, [pc, #72]	; (800d964 <SpiFlashStore::Flash()+0x9c>)
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	4b12      	ldr	r3, [pc, #72]	; (800d968 <SpiFlashStore::Flash()+0xa0>)
 800d920:	601a      	str	r2, [r3, #0]
 800d922:	2305      	movs	r3, #5
 800d924:	e7e2      	b.n	800d8ec <SpiFlashStore::Flash()+0x24>
 800d926:	4b0f      	ldr	r3, [pc, #60]	; (800d964 <SpiFlashStore::Flash()+0x9c>)
 800d928:	4a0f      	ldr	r2, [pc, #60]	; (800d968 <SpiFlashStore::Flash()+0xa0>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6812      	ldr	r2, [r2, #0]
 800d92e:	1a9b      	subs	r3, r3, r2
 800d930:	2b63      	cmp	r3, #99	; 0x63
 800d932:	d9dc      	bls.n	800d8ee <SpiFlashStore::Flash()+0x26>
 800d934:	2304      	movs	r3, #4
 800d936:	e7d9      	b.n	800d8ec <SpiFlashStore::Flash()+0x24>
 800d938:	2306      	movs	r3, #6
 800d93a:	e7d7      	b.n	800d8ec <SpiFlashStore::Flash()+0x24>
 800d93c:	ab03      	add	r3, sp, #12
 800d93e:	4a0d      	ldr	r2, [pc, #52]	; (800d974 <SpiFlashStore::Flash()+0xac>)
 800d940:	490a      	ldr	r1, [pc, #40]	; (800d96c <SpiFlashStore::Flash()+0xa4>)
 800d942:	480b      	ldr	r0, [pc, #44]	; (800d970 <SpiFlashStore::Flash()+0xa8>)
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	6812      	ldr	r2, [r2, #0]
 800d948:	4b0b      	ldr	r3, [pc, #44]	; (800d978 <SpiFlashStore::Flash()+0xb0>)
 800d94a:	6809      	ldr	r1, [r1, #0]
 800d94c:	6800      	ldr	r0, [r0, #0]
 800d94e:	f000 fb11 	bl	800df74 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800d952:	2800      	cmp	r0, #0
 800d954:	d0cb      	beq.n	800d8ee <SpiFlashStore::Flash()+0x26>
 800d956:	2000      	movs	r0, #0
 800d958:	6020      	str	r0, [r4, #0]
 800d95a:	b004      	add	sp, #16
 800d95c:	bd10      	pop	{r4, pc}
 800d95e:	bf00      	nop
 800d960:	20002984 	andcs	r2, r0, r4, lsl #19
 800d964:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800d968:	20001974 	andcs	r1, r0, r4, ror r9
 800d96c:	20002978 	andcs	r2, r0, r8, ror r9
 800d970:	200029a4 	andcs	r2, r0, r4, lsr #19
 800d974:	20002980 	andcs	r2, r0, r0, lsl #19
 800d978:	20001978 	andcs	r1, r0, r8, ror r9

0800d97c <StoreDisplayUdf::~StoreDisplayUdf()>:
 800d97c:	4770      	bx	lr
	...

0800d980 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 800d980:	2300      	movs	r3, #0
 800d982:	b507      	push	{r0, r1, r2, lr}
 800d984:	4805      	ldr	r0, [pc, #20]	; (800d99c <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	460a      	mov	r2, r1
 800d98a:	2322      	movs	r3, #34	; 0x22
 800d98c:	210f      	movs	r1, #15
 800d98e:	6800      	ldr	r0, [r0, #0]
 800d990:	f7ff ff66 	bl	800d860 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800d994:	b003      	add	sp, #12
 800d996:	f85d fb04 	ldr.w	pc, [sp], #4
 800d99a:	bf00      	nop
 800d99c:	20002988 	andcs	r2, r0, r8, lsl #19

0800d9a0 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 800d9a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	2122      	movs	r1, #34	; 0x22
 800d9a8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800d9ac:	4804      	ldr	r0, [pc, #16]	; (800d9c0 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800d9ae:	9100      	str	r1, [sp, #0]
 800d9b0:	6800      	ldr	r0, [r0, #0]
 800d9b2:	210f      	movs	r1, #15
 800d9b4:	f7ff ff14 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800d9b8:	b005      	add	sp, #20
 800d9ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9be:	bf00      	nop
 800d9c0:	20002988 	andcs	r2, r0, r8, lsl #19

0800d9c4 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800d9c4:	b510      	push	{r4, lr}
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	f004 fa6e 	bl	8011ea8 <operator delete(void*)>
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	bd10      	pop	{r4, pc}

0800d9d0 <StoreDisplayUdf::StoreDisplayUdf()>:
 800d9d0:	4a02      	ldr	r2, [pc, #8]	; (800d9dc <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800d9d2:	6002      	str	r2, [r0, #0]
 800d9d4:	4a02      	ldr	r2, [pc, #8]	; (800d9e0 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 800d9d6:	6010      	str	r0, [r2, #0]
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	08015694 	stmdaeq	r1, {r2, r4, r7, r9, sl, ip, lr}
 800d9e0:	20002990 	mulcs	r0, r0, r9

0800d9e4 <StoreE131::~StoreE131()>:
 800d9e4:	4770      	bx	lr
	...

0800d9e8 <StoreE131::Copy(e131params::Params*)>:
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	b507      	push	{r0, r1, r2, lr}
 800d9ec:	4805      	ldr	r0, [pc, #20]	; (800da04 <StoreE131::Copy(e131params::Params*)+0x1c>)
 800d9ee:	9300      	str	r3, [sp, #0]
 800d9f0:	460a      	mov	r2, r1
 800d9f2:	231f      	movs	r3, #31
 800d9f4:	2104      	movs	r1, #4
 800d9f6:	6800      	ldr	r0, [r0, #0]
 800d9f8:	f7ff ff32 	bl	800d860 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800d9fc:	b003      	add	sp, #12
 800d9fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800da02:	bf00      	nop
 800da04:	20002988 	andcs	r2, r0, r8, lsl #19

0800da08 <StoreE131::Update(e131params::Params const*)>:
 800da08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da0a:	2200      	movs	r2, #0
 800da0c:	460b      	mov	r3, r1
 800da0e:	211f      	movs	r1, #31
 800da10:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800da14:	4804      	ldr	r0, [pc, #16]	; (800da28 <StoreE131::Update(e131params::Params const*)+0x20>)
 800da16:	9100      	str	r1, [sp, #0]
 800da18:	6800      	ldr	r0, [r0, #0]
 800da1a:	2104      	movs	r1, #4
 800da1c:	f7ff fee0 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800da20:	b005      	add	sp, #20
 800da22:	f85d fb04 	ldr.w	pc, [sp], #4
 800da26:	bf00      	nop
 800da28:	20002988 	andcs	r2, r0, r8, lsl #19

0800da2c <StoreE131::~StoreE131()>:
 800da2c:	b510      	push	{r4, lr}
 800da2e:	4604      	mov	r4, r0
 800da30:	f004 fa3a 	bl	8011ea8 <operator delete(void*)>
 800da34:	4620      	mov	r0, r4
 800da36:	bd10      	pop	{r4, pc}

0800da38 <StoreE131::StoreE131()>:
 800da38:	4a02      	ldr	r2, [pc, #8]	; (800da44 <StoreE131::StoreE131()+0xc>)
 800da3a:	6002      	str	r2, [r0, #0]
 800da3c:	4a02      	ldr	r2, [pc, #8]	; (800da48 <StoreE131::StoreE131()+0x10>)
 800da3e:	6010      	str	r0, [r2, #0]
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	080156ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, sl, ip, lr}
 800da48:	20002994 	mulcs	r0, r4, r9

0800da4c <StoreNetwork::~StoreNetwork()>:
 800da4c:	4770      	bx	lr

0800da4e <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800da4e:	3804      	subs	r0, #4
 800da50:	4770      	bx	lr
	...

0800da54 <StoreNetwork::Update(TNetworkParams const*)>:
 800da54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da56:	2200      	movs	r2, #0
 800da58:	460b      	mov	r3, r1
 800da5a:	215e      	movs	r1, #94	; 0x5e
 800da5c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800da60:	4804      	ldr	r0, [pc, #16]	; (800da74 <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 800da62:	9100      	str	r1, [sp, #0]
 800da64:	6800      	ldr	r0, [r0, #0]
 800da66:	4611      	mov	r1, r2
 800da68:	f7ff feba 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800da6c:	b005      	add	sp, #20
 800da6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800da72:	bf00      	nop
 800da74:	20002988 	andcs	r2, r0, r8, lsl #19

0800da78 <StoreNetwork::SaveDhcp(bool)>:
 800da78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800da7a:	2301      	movs	r3, #1
 800da7c:	f88d 1017 	strb.w	r1, [sp, #23]
 800da80:	2100      	movs	r1, #0
 800da82:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800da86:	4805      	ldr	r0, [pc, #20]	; (800da9c <StoreNetwork::SaveDhcp(bool)+0x24>)
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	2214      	movs	r2, #20
 800da8c:	6800      	ldr	r0, [r0, #0]
 800da8e:	f10d 0317 	add.w	r3, sp, #23
 800da92:	f7ff fea5 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800da96:	b007      	add	sp, #28
 800da98:	f85d fb04 	ldr.w	pc, [sp], #4
 800da9c:	20002988 	andcs	r2, r0, r8, lsl #19

0800daa0 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800daa0:	f1a0 0004 	sub.w	r0, r0, #4
 800daa4:	e7e8      	b.n	800da78 <StoreNetwork::SaveDhcp(bool)>
 800daa6:	bf00      	nop

0800daa8 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 800daa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800daaa:	2308      	movs	r3, #8
 800daac:	9105      	str	r1, [sp, #20]
 800daae:	2100      	movs	r1, #0
 800dab0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dab4:	2304      	movs	r3, #4
 800dab6:	4805      	ldr	r0, [pc, #20]	; (800dacc <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 800dab8:	9300      	str	r3, [sp, #0]
 800daba:	220c      	movs	r2, #12
 800dabc:	6800      	ldr	r0, [r0, #0]
 800dabe:	ab05      	add	r3, sp, #20
 800dac0:	f7ff fe8e 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dac4:	b007      	add	sp, #28
 800dac6:	f85d fb04 	ldr.w	pc, [sp], #4
 800daca:	bf00      	nop
 800dacc:	20002988 	andcs	r2, r0, r8, lsl #19

0800dad0 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 800dad0:	f1a0 0004 	sub.w	r0, r0, #4
 800dad4:	e7e8      	b.n	800daa8 <StoreNetwork::SaveGatewayIp(unsigned int)>
 800dad6:	bf00      	nop

0800dad8 <StoreNetwork::SaveNetMask(unsigned int)>:
 800dad8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dada:	2304      	movs	r3, #4
 800dadc:	9105      	str	r1, [sp, #20]
 800dade:	2100      	movs	r1, #0
 800dae0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dae4:	4804      	ldr	r0, [pc, #16]	; (800daf8 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	2208      	movs	r2, #8
 800daea:	6800      	ldr	r0, [r0, #0]
 800daec:	ab05      	add	r3, sp, #20
 800daee:	f7ff fe77 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800daf2:	b007      	add	sp, #28
 800daf4:	f85d fb04 	ldr.w	pc, [sp], #4
 800daf8:	20002988 	andcs	r2, r0, r8, lsl #19

0800dafc <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 800dafc:	f1a0 0004 	sub.w	r0, r0, #4
 800db00:	e7ea      	b.n	800dad8 <StoreNetwork::SaveNetMask(unsigned int)>
 800db02:	bf00      	nop

0800db04 <StoreNetwork::SaveIp(unsigned int)>:
 800db04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800db06:	2302      	movs	r3, #2
 800db08:	9105      	str	r1, [sp, #20]
 800db0a:	2100      	movs	r1, #0
 800db0c:	2204      	movs	r2, #4
 800db0e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800db12:	4804      	ldr	r0, [pc, #16]	; (800db24 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 800db14:	9200      	str	r2, [sp, #0]
 800db16:	6800      	ldr	r0, [r0, #0]
 800db18:	ab05      	add	r3, sp, #20
 800db1a:	f7ff fe61 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800db1e:	b007      	add	sp, #28
 800db20:	f85d fb04 	ldr.w	pc, [sp], #4
 800db24:	20002988 	andcs	r2, r0, r8, lsl #19

0800db28 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 800db28:	f1a0 0004 	sub.w	r0, r0, #4
 800db2c:	e7ea      	b.n	800db04 <StoreNetwork::SaveIp(unsigned int)>
 800db2e:	bf00      	nop

0800db30 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800db30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800db32:	460b      	mov	r3, r1
 800db34:	2020      	movs	r0, #32
 800db36:	2100      	movs	r1, #0
 800db38:	2a40      	cmp	r2, #64	; 0x40
 800db3a:	bf28      	it	cs
 800db3c:	2240      	movcs	r2, #64	; 0x40
 800db3e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800db42:	4804      	ldr	r0, [pc, #16]	; (800db54 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 800db44:	9200      	str	r2, [sp, #0]
 800db46:	6800      	ldr	r0, [r0, #0]
 800db48:	2215      	movs	r2, #21
 800db4a:	f7ff fe49 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800db4e:	b005      	add	sp, #20
 800db50:	f85d fb04 	ldr.w	pc, [sp], #4
 800db54:	20002988 	andcs	r2, r0, r8, lsl #19

0800db58 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800db58:	f1a0 0004 	sub.w	r0, r0, #4
 800db5c:	e7e8      	b.n	800db30 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 800db5e:	bf00      	nop

0800db60 <StoreNetwork::~StoreNetwork()>:
 800db60:	b510      	push	{r4, lr}
 800db62:	4604      	mov	r4, r0
 800db64:	f004 f9a0 	bl	8011ea8 <operator delete(void*)>
 800db68:	4620      	mov	r0, r4
 800db6a:	bd10      	pop	{r4, pc}

0800db6c <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800db6c:	f1a0 0004 	sub.w	r0, r0, #4
 800db70:	e7f6      	b.n	800db60 <StoreNetwork::~StoreNetwork()>
	...

0800db74 <StoreNetwork::Copy(TNetworkParams*)>:
 800db74:	b507      	push	{r0, r1, r2, lr}
 800db76:	460a      	mov	r2, r1
 800db78:	2100      	movs	r1, #0
 800db7a:	4804      	ldr	r0, [pc, #16]	; (800db8c <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 800db7c:	9100      	str	r1, [sp, #0]
 800db7e:	235e      	movs	r3, #94	; 0x5e
 800db80:	6800      	ldr	r0, [r0, #0]
 800db82:	f7ff fe6d 	bl	800d860 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800db86:	b003      	add	sp, #12
 800db88:	f85d fb04 	ldr.w	pc, [sp], #4
 800db8c:	20002988 	andcs	r2, r0, r8, lsl #19

0800db90 <StoreNetwork::StoreNetwork()>:
 800db90:	4a03      	ldr	r2, [pc, #12]	; (800dba0 <StoreNetwork::StoreNetwork()+0x10>)
 800db92:	6002      	str	r2, [r0, #0]
 800db94:	322c      	adds	r2, #44	; 0x2c
 800db96:	6042      	str	r2, [r0, #4]
 800db98:	4a02      	ldr	r2, [pc, #8]	; (800dba4 <StoreNetwork::StoreNetwork()+0x14>)
 800db9a:	6010      	str	r0, [r2, #0]
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	080156c4 	stmdaeq	r1, {r2, r6, r7, r9, sl, ip, lr}
 800dba4:	20002998 	mulcs	r0, r8, r9

0800dba8 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800dba8:	4770      	bx	lr
	...

0800dbac <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 800dbac:	2300      	movs	r3, #0
 800dbae:	b507      	push	{r0, r1, r2, lr}
 800dbb0:	4805      	ldr	r0, [pc, #20]	; (800dbc8 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	460a      	mov	r2, r1
 800dbb6:	2320      	movs	r3, #32
 800dbb8:	210c      	movs	r1, #12
 800dbba:	6800      	ldr	r0, [r0, #0]
 800dbbc:	f7ff fe50 	bl	800d860 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800dbc0:	b003      	add	sp, #12
 800dbc2:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbc6:	bf00      	nop
 800dbc8:	20002988 	andcs	r2, r0, r8, lsl #19

0800dbcc <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 800dbcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbce:	2200      	movs	r2, #0
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	2120      	movs	r1, #32
 800dbd4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800dbd8:	4804      	ldr	r0, [pc, #16]	; (800dbec <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 800dbda:	9100      	str	r1, [sp, #0]
 800dbdc:	6800      	ldr	r0, [r0, #0]
 800dbde:	210c      	movs	r1, #12
 800dbe0:	f7ff fdfe 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dbe4:	b005      	add	sp, #20
 800dbe6:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbea:	bf00      	nop
 800dbec:	20002988 	andcs	r2, r0, r8, lsl #19

0800dbf0 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800dbf0:	b510      	push	{r4, lr}
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	f004 f958 	bl	8011ea8 <operator delete(void*)>
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	bd10      	pop	{r4, pc}

0800dbfc <StoreRemoteConfig::StoreRemoteConfig()>:
 800dbfc:	4a02      	ldr	r2, [pc, #8]	; (800dc08 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 800dbfe:	6002      	str	r2, [r0, #0]
 800dc00:	4a02      	ldr	r2, [pc, #8]	; (800dc0c <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 800dc02:	6010      	str	r0, [r2, #0]
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	08015714 	stmdaeq	r1, {r2, r4, r8, r9, sl, ip, lr}
 800dc0c:	2000299c 	mulcs	r0, ip, r9

0800dc10 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800dc10:	4770      	bx	lr

0800dc12 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800dc12:	3804      	subs	r0, #4
 800dc14:	4770      	bx	lr
	...

0800dc18 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 800dc18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	2127      	movs	r1, #39	; 0x27
 800dc20:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800dc24:	4804      	ldr	r0, [pc, #16]	; (800dc38 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 800dc26:	9100      	str	r1, [sp, #0]
 800dc28:	6800      	ldr	r0, [r0, #0]
 800dc2a:	2103      	movs	r1, #3
 800dc2c:	f7ff fdd8 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dc30:	b005      	add	sp, #20
 800dc32:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc36:	bf00      	nop
 800dc38:	20002988 	andcs	r2, r0, r8, lsl #19

0800dc3c <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 800dc3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dc3e:	2304      	movs	r3, #4
 800dc40:	2200      	movs	r2, #0
 800dc42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dc46:	2302      	movs	r3, #2
 800dc48:	4806      	ldr	r0, [pc, #24]	; (800dc64 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800dc50:	2207      	movs	r2, #7
 800dc52:	2103      	movs	r1, #3
 800dc54:	6800      	ldr	r0, [r0, #0]
 800dc56:	f10d 0316 	add.w	r3, sp, #22
 800dc5a:	f7ff fdc1 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dc5e:	b007      	add	sp, #28
 800dc60:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc64:	20002988 	andcs	r2, r0, r8, lsl #19

0800dc68 <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 800dc68:	f1a0 0004 	sub.w	r0, r0, #4
 800dc6c:	e7e6      	b.n	800dc3c <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 800dc6e:	bf00      	nop

0800dc70 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800dc70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dc72:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dc76:	2200      	movs	r2, #0
 800dc78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	4807      	ldr	r0, [pc, #28]	; (800dc9c <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 800dc80:	9300      	str	r3, [sp, #0]
 800dc82:	f88d 1017 	strb.w	r1, [sp, #23]
 800dc86:	2226      	movs	r2, #38	; 0x26
 800dc88:	2103      	movs	r1, #3
 800dc8a:	6800      	ldr	r0, [r0, #0]
 800dc8c:	f10d 0317 	add.w	r3, sp, #23
 800dc90:	f7ff fda6 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dc94:	b007      	add	sp, #28
 800dc96:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc9a:	bf00      	nop
 800dc9c:	20002988 	andcs	r2, r0, r8, lsl #19

0800dca0 <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800dca0:	f1a0 0004 	sub.w	r0, r0, #4
 800dca4:	e7e4      	b.n	800dc70 <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 800dca6:	bf00      	nop

0800dca8 <StoreWS28xxDmx::SaveMap(unsigned char)>:
 800dca8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dcaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dcae:	2200      	movs	r2, #0
 800dcb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	4807      	ldr	r0, [pc, #28]	; (800dcd4 <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	f88d 1017 	strb.w	r1, [sp, #23]
 800dcbe:	2213      	movs	r2, #19
 800dcc0:	2103      	movs	r1, #3
 800dcc2:	6800      	ldr	r0, [r0, #0]
 800dcc4:	f10d 0317 	add.w	r3, sp, #23
 800dcc8:	f7ff fd8a 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dccc:	b007      	add	sp, #28
 800dcce:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcd2:	bf00      	nop
 800dcd4:	20002988 	andcs	r2, r0, r8, lsl #19

0800dcd8 <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 800dcd8:	f1a0 0004 	sub.w	r0, r0, #4
 800dcdc:	e7e4      	b.n	800dca8 <StoreWS28xxDmx::SaveMap(unsigned char)>
 800dcde:	bf00      	nop

0800dce0 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 800dce0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dce6:	2200      	movs	r2, #0
 800dce8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dcec:	2302      	movs	r3, #2
 800dcee:	4807      	ldr	r0, [pc, #28]	; (800dd0c <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	f8ad 1016 	strh.w	r1, [sp, #22]
 800dcf6:	2211      	movs	r2, #17
 800dcf8:	2103      	movs	r1, #3
 800dcfa:	6800      	ldr	r0, [r0, #0]
 800dcfc:	f10d 0316 	add.w	r3, sp, #22
 800dd00:	f7ff fd6e 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dd04:	b007      	add	sp, #28
 800dd06:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd0a:	bf00      	nop
 800dd0c:	20002988 	andcs	r2, r0, r8, lsl #19

0800dd10 <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 800dd10:	f1a0 0004 	sub.w	r0, r0, #4
 800dd14:	e7e4      	b.n	800dce0 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 800dd16:	bf00      	nop

0800dd18 <StoreWS28xxDmx::SaveCount(unsigned short)>:
 800dd18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dd1a:	2302      	movs	r3, #2
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dd22:	4807      	ldr	r0, [pc, #28]	; (800dd40 <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	f8ad 1016 	strh.w	r1, [sp, #22]
 800dd2a:	2205      	movs	r2, #5
 800dd2c:	2103      	movs	r1, #3
 800dd2e:	6800      	ldr	r0, [r0, #0]
 800dd30:	f10d 0316 	add.w	r3, sp, #22
 800dd34:	f7ff fd54 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dd38:	b007      	add	sp, #28
 800dd3a:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd3e:	bf00      	nop
 800dd40:	20002988 	andcs	r2, r0, r8, lsl #19

0800dd44 <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 800dd44:	f1a0 0004 	sub.w	r0, r0, #4
 800dd48:	e7e6      	b.n	800dd18 <StoreWS28xxDmx::SaveCount(unsigned short)>
 800dd4a:	bf00      	nop

0800dd4c <StoreWS28xxDmx::SaveType(unsigned char)>:
 800dd4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dd4e:	2301      	movs	r3, #1
 800dd50:	2200      	movs	r2, #0
 800dd52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dd56:	4807      	ldr	r0, [pc, #28]	; (800dd74 <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	f88d 1017 	strb.w	r1, [sp, #23]
 800dd5e:	2204      	movs	r2, #4
 800dd60:	2103      	movs	r1, #3
 800dd62:	6800      	ldr	r0, [r0, #0]
 800dd64:	f10d 0317 	add.w	r3, sp, #23
 800dd68:	f7ff fd3a 	bl	800d7e0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800dd6c:	b007      	add	sp, #28
 800dd6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd72:	bf00      	nop
 800dd74:	20002988 	andcs	r2, r0, r8, lsl #19

0800dd78 <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 800dd78:	f1a0 0004 	sub.w	r0, r0, #4
 800dd7c:	e7e6      	b.n	800dd4c <StoreWS28xxDmx::SaveType(unsigned char)>
 800dd7e:	bf00      	nop

0800dd80 <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800dd80:	b510      	push	{r4, lr}
 800dd82:	4604      	mov	r4, r0
 800dd84:	f004 f890 	bl	8011ea8 <operator delete(void*)>
 800dd88:	4620      	mov	r0, r4
 800dd8a:	bd10      	pop	{r4, pc}

0800dd8c <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800dd8c:	f1a0 0004 	sub.w	r0, r0, #4
 800dd90:	e7f6      	b.n	800dd80 <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

0800dd94 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 800dd94:	2300      	movs	r3, #0
 800dd96:	b507      	push	{r0, r1, r2, lr}
 800dd98:	4805      	ldr	r0, [pc, #20]	; (800ddb0 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	460a      	mov	r2, r1
 800dd9e:	2327      	movs	r3, #39	; 0x27
 800dda0:	2103      	movs	r1, #3
 800dda2:	6800      	ldr	r0, [r0, #0]
 800dda4:	f7ff fd5c 	bl	800d860 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800dda8:	b003      	add	sp, #12
 800ddaa:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddae:	bf00      	nop
 800ddb0:	20002988 	andcs	r2, r0, r8, lsl #19

0800ddb4 <StoreWS28xxDmx::StoreWS28xxDmx()>:
 800ddb4:	4a03      	ldr	r2, [pc, #12]	; (800ddc4 <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 800ddb6:	6002      	str	r2, [r0, #0]
 800ddb8:	3230      	adds	r2, #48	; 0x30
 800ddba:	6042      	str	r2, [r0, #4]
 800ddbc:	4a02      	ldr	r2, [pc, #8]	; (800ddc8 <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 800ddbe:	6010      	str	r0, [r2, #0]
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	0801572c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, ip, lr}
 800ddc8:	200029a0 	andcs	r2, r0, r0, lsr #19

0800ddcc <FlashRom::FlashRom()>:
 800ddcc:	4b08      	ldr	r3, [pc, #32]	; (800ddf0 <FlashRom::FlashRom()+0x24>)
 800ddce:	b510      	push	{r4, lr}
 800ddd0:	6018      	str	r0, [r3, #0]
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	4604      	mov	r4, r0
 800ddd6:	7003      	strb	r3, [r0, #0]
 800ddd8:	4b06      	ldr	r3, [pc, #24]	; (800ddf4 <FlashRom::FlashRom()+0x28>)
 800ddda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ddde:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800dde2:	4905      	ldr	r1, [pc, #20]	; (800ddf8 <FlashRom::FlashRom()+0x2c>)
 800dde4:	029b      	lsls	r3, r3, #10
 800dde6:	4805      	ldr	r0, [pc, #20]	; (800ddfc <FlashRom::FlashRom()+0x30>)
 800dde8:	f7fa feb4 	bl	8008b54 <printf>
 800ddec:	4620      	mov	r0, r4
 800ddee:	bd10      	pop	{r4, pc}
 800ddf0:	200029a4 	andcs	r2, r0, r4, lsr #19
 800ddf4:	1ffff700 	svcne	0x00fff700
 800ddf8:	0801577c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, r9, sl, ip, lr}
 800ddfc:	08015781 	stmdaeq	r1, {r0, r7, r8, r9, sl, ip, lr}

0800de00 <FlashRom::GetSize()>:
 800de00:	4b02      	ldr	r3, [pc, #8]	; (800de0c <FlashRom::GetSize()+0xc>)
 800de02:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800de06:	0280      	lsls	r0, r0, #10
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	1ffff700 	svcne	0x00fff700

0800de10 <FlashRom::GetSectorSize()>:
 800de10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800de14:	4770      	bx	lr

0800de16 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 800de16:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800de1a:	441a      	add	r2, r3
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d004      	beq.n	800de2a <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 800de20:	f851 0b04 	ldr.w	r0, [r1], #4
 800de24:	f843 0b04 	str.w	r0, [r3], #4
 800de28:	e7f8      	b.n	800de1c <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>
 800de2a:	2200      	movs	r2, #0
 800de2c:	9b00      	ldr	r3, [sp, #0]
 800de2e:	2001      	movs	r0, #1
 800de30:	601a      	str	r2, [r3, #0]
 800de32:	4770      	bx	lr

0800de34 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 800de34:	2000      	movs	r0, #0
 800de36:	b538      	push	{r3, r4, r5, lr}
 800de38:	4c47      	ldr	r4, [pc, #284]	; (800df58 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 800de3a:	6018      	str	r0, [r3, #0]
 800de3c:	6823      	ldr	r3, [r4, #0]
 800de3e:	2b04      	cmp	r3, #4
 800de40:	f200 8082 	bhi.w	800df48 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800de44:	e8df f003 	tbb	[pc, r3]
 800de48:	78452003 	stmdavc	r5, {r0, r1, sp}^
 800de4c:	4b430080 	blmi	90ce054 <__exidx_end+0x10b7ecc>
 800de50:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800de54:	6019      	str	r1, [r3, #0]
 800de56:	4b42      	ldr	r3, [pc, #264]	; (800df60 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800de58:	601a      	str	r2, [r3, #0]
 800de5a:	4b42      	ldr	r3, [pc, #264]	; (800df64 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 800de5c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800de60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de64:	4b40      	ldr	r3, [pc, #256]	; (800df68 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800de66:	d807      	bhi.n	800de78 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 800de68:	2201      	movs	r2, #1
 800de6a:	701a      	strb	r2, [r3, #0]
 800de6c:	f004 faec 	bl	8012448 <fmc_bank0_unlock>
 800de70:	2301      	movs	r3, #1
 800de72:	6023      	str	r3, [r4, #0]
 800de74:	2000      	movs	r0, #0
 800de76:	e026      	b.n	800dec6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800de78:	4a3c      	ldr	r2, [pc, #240]	; (800df6c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 800de7a:	4291      	cmp	r1, r2
 800de7c:	d3f4      	bcc.n	800de68 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 800de7e:	2200      	movs	r2, #0
 800de80:	701a      	strb	r2, [r3, #0]
 800de82:	f004 faef 	bl	8012464 <fmc_bank1_unlock>
 800de86:	e7f3      	b.n	800de70 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800de88:	4d37      	ldr	r5, [pc, #220]	; (800df68 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800de8a:	782b      	ldrb	r3, [r5, #0]
 800de8c:	b15b      	cbz	r3, 800dea6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 800de8e:	f004 fb07 	bl	80124a0 <fmc_bank0_state_get>
 800de92:	2801      	cmp	r0, #1
 800de94:	d0ee      	beq.n	800de74 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 800de96:	7829      	ldrb	r1, [r5, #0]
 800de98:	4b35      	ldr	r3, [pc, #212]	; (800df70 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800de9a:	b939      	cbnz	r1, 800deac <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 800de9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de9e:	f022 0202 	bic.w	r2, r2, #2
 800dea2:	651a      	str	r2, [r3, #80]	; 0x50
 800dea4:	e006      	b.n	800deb4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 800dea6:	f004 fb0f 	bl	80124c8 <fmc_bank1_state_get>
 800deaa:	e7f2      	b.n	800de92 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 800deac:	691a      	ldr	r2, [r3, #16]
 800deae:	f022 0202 	bic.w	r2, r2, #2
 800deb2:	611a      	str	r2, [r3, #16]
 800deb4:	4b2a      	ldr	r3, [pc, #168]	; (800df60 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	b94b      	cbnz	r3, 800dece <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 800deba:	b129      	cbz	r1, 800dec8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 800debc:	f004 fae0 	bl	8012480 <fmc_bank0_lock>
 800dec0:	2300      	movs	r3, #0
 800dec2:	2001      	movs	r0, #1
 800dec4:	6023      	str	r3, [r4, #0]
 800dec6:	bd38      	pop	{r3, r4, r5, pc}
 800dec8:	f004 fae2 	bl	8012490 <fmc_bank1_lock>
 800decc:	e7f8      	b.n	800dec0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 800dece:	2302      	movs	r3, #2
 800ded0:	e7cf      	b.n	800de72 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 800ded2:	4923      	ldr	r1, [pc, #140]	; (800df60 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800ded4:	680b      	ldr	r3, [r1, #0]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d0ca      	beq.n	800de70 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800deda:	4b23      	ldr	r3, [pc, #140]	; (800df68 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800dedc:	4a1f      	ldr	r2, [pc, #124]	; (800df5c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 800dede:	7818      	ldrb	r0, [r3, #0]
 800dee0:	4b23      	ldr	r3, [pc, #140]	; (800df70 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800dee2:	b190      	cbz	r0, 800df0a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 800dee4:	6918      	ldr	r0, [r3, #16]
 800dee6:	f040 0002 	orr.w	r0, r0, #2
 800deea:	6118      	str	r0, [r3, #16]
 800deec:	6810      	ldr	r0, [r2, #0]
 800deee:	6158      	str	r0, [r3, #20]
 800def0:	6918      	ldr	r0, [r3, #16]
 800def2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800def6:	6118      	str	r0, [r3, #16]
 800def8:	680b      	ldr	r3, [r1, #0]
 800defa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800defe:	600b      	str	r3, [r1, #0]
 800df00:	6813      	ldr	r3, [r2, #0]
 800df02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	e7b2      	b.n	800de70 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800df0a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800df0c:	f040 0002 	orr.w	r0, r0, #2
 800df10:	6518      	str	r0, [r3, #80]	; 0x50
 800df12:	6810      	ldr	r0, [r2, #0]
 800df14:	6558      	str	r0, [r3, #84]	; 0x54
 800df16:	69dd      	ldr	r5, [r3, #28]
 800df18:	07ad      	lsls	r5, r5, #30
 800df1a:	bf48      	it	mi
 800df1c:	6158      	strmi	r0, [r3, #20]
 800df1e:	4814      	ldr	r0, [pc, #80]	; (800df70 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800df20:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800df22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df26:	6503      	str	r3, [r0, #80]	; 0x50
 800df28:	680b      	ldr	r3, [r1, #0]
 800df2a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800df2e:	600b      	str	r3, [r1, #0]
 800df30:	6813      	ldr	r3, [r2, #0]
 800df32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df36:	e7e6      	b.n	800df06 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 800df38:	4b0b      	ldr	r3, [pc, #44]	; (800df68 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800df3a:	781a      	ldrb	r2, [r3, #0]
 800df3c:	4b0c      	ldr	r3, [pc, #48]	; (800df70 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800df3e:	b132      	cbz	r2, 800df4e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 800df40:	691a      	ldr	r2, [r3, #16]
 800df42:	f022 0201 	bic.w	r2, r2, #1
 800df46:	611a      	str	r2, [r3, #16]
 800df48:	2000      	movs	r0, #0
 800df4a:	6020      	str	r0, [r4, #0]
 800df4c:	e7bb      	b.n	800dec6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800df4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df50:	f022 0201 	bic.w	r2, r2, #1
 800df54:	651a      	str	r2, [r3, #80]	; 0x50
 800df56:	e7f7      	b.n	800df48 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800df58:	200029ac 	andcs	r2, r0, ip, lsr #19
 800df5c:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 800df60:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 800df64:	1ffff700 	svcne	0x00fff700
 800df68:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 800df6c:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800df70:	40022000 	andmi	r2, r2, r0

0800df74 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 800df74:	b570      	push	{r4, r5, r6, lr}
 800df76:	2400      	movs	r4, #0
 800df78:	9804      	ldr	r0, [sp, #16]
 800df7a:	6004      	str	r4, [r0, #0]
 800df7c:	4c48      	ldr	r4, [pc, #288]	; (800e0a0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 800df7e:	6820      	ldr	r0, [r4, #0]
 800df80:	2804      	cmp	r0, #4
 800df82:	d848      	bhi.n	800e016 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 800df84:	e8df f000 	tbb	[pc, r0]
 800df88:	22847c03 	addcs	r7, r4, #768	; 0x300
 800df8c:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 800df90:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800df94:	6001      	str	r1, [r0, #0]
 800df96:	4844      	ldr	r0, [pc, #272]	; (800e0a8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800df98:	6003      	str	r3, [r0, #0]
 800df9a:	4b44      	ldr	r3, [pc, #272]	; (800e0ac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800df9c:	601a      	str	r2, [r3, #0]
 800df9e:	4b44      	ldr	r3, [pc, #272]	; (800e0b0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 800dfa0:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800dfa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dfa8:	4b42      	ldr	r3, [pc, #264]	; (800e0b4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800dfaa:	d807      	bhi.n	800dfbc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 800dfac:	2201      	movs	r2, #1
 800dfae:	701a      	strb	r2, [r3, #0]
 800dfb0:	f004 fa4a 	bl	8012448 <fmc_bank0_unlock>
 800dfb4:	2303      	movs	r3, #3
 800dfb6:	6023      	str	r3, [r4, #0]
 800dfb8:	2000      	movs	r0, #0
 800dfba:	e026      	b.n	800e00a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800dfbc:	4a3e      	ldr	r2, [pc, #248]	; (800e0b8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 800dfbe:	4291      	cmp	r1, r2
 800dfc0:	d3f4      	bcc.n	800dfac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	701a      	strb	r2, [r3, #0]
 800dfc6:	f004 fa4d 	bl	8012464 <fmc_bank1_unlock>
 800dfca:	e7f3      	b.n	800dfb4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800dfcc:	4d39      	ldr	r5, [pc, #228]	; (800e0b4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800dfce:	782b      	ldrb	r3, [r5, #0]
 800dfd0:	b15b      	cbz	r3, 800dfea <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 800dfd2:	f004 fa65 	bl	80124a0 <fmc_bank0_state_get>
 800dfd6:	2801      	cmp	r0, #1
 800dfd8:	d0ee      	beq.n	800dfb8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 800dfda:	7829      	ldrb	r1, [r5, #0]
 800dfdc:	4b37      	ldr	r3, [pc, #220]	; (800e0bc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800dfde:	b939      	cbnz	r1, 800dff0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 800dfe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dfe2:	f022 0201 	bic.w	r2, r2, #1
 800dfe6:	651a      	str	r2, [r3, #80]	; 0x50
 800dfe8:	e006      	b.n	800dff8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 800dfea:	f004 fa6d 	bl	80124c8 <fmc_bank1_state_get>
 800dfee:	e7f2      	b.n	800dfd6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 800dff0:	691a      	ldr	r2, [r3, #16]
 800dff2:	f022 0201 	bic.w	r2, r2, #1
 800dff6:	611a      	str	r2, [r3, #16]
 800dff8:	4b2c      	ldr	r3, [pc, #176]	; (800e0ac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	b94b      	cbnz	r3, 800e012 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 800dffe:	b129      	cbz	r1, 800e00c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 800e000:	f004 fa3e 	bl	8012480 <fmc_bank0_lock>
 800e004:	2300      	movs	r3, #0
 800e006:	2001      	movs	r0, #1
 800e008:	6023      	str	r3, [r4, #0]
 800e00a:	bd70      	pop	{r4, r5, r6, pc}
 800e00c:	f004 fa40 	bl	8012490 <fmc_bank1_lock>
 800e010:	e7f8      	b.n	800e004 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 800e012:	2304      	movs	r3, #4
 800e014:	e7cf      	b.n	800dfb6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 800e016:	4a25      	ldr	r2, [pc, #148]	; (800e0ac <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800e018:	6813      	ldr	r3, [r2, #0]
 800e01a:	2b03      	cmp	r3, #3
 800e01c:	d91a      	bls.n	800e054 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 800e01e:	4b25      	ldr	r3, [pc, #148]	; (800e0b4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e020:	7819      	ldrb	r1, [r3, #0]
 800e022:	4b26      	ldr	r3, [pc, #152]	; (800e0bc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800e024:	b189      	cbz	r1, 800e04a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 800e026:	6919      	ldr	r1, [r3, #16]
 800e028:	f041 0101 	orr.w	r1, r1, #1
 800e02c:	6119      	str	r1, [r3, #16]
 800e02e:	4d1e      	ldr	r5, [pc, #120]	; (800e0a8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800e030:	481c      	ldr	r0, [pc, #112]	; (800e0a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800e032:	6829      	ldr	r1, [r5, #0]
 800e034:	6803      	ldr	r3, [r0, #0]
 800e036:	f851 6b04 	ldr.w	r6, [r1], #4
 800e03a:	f843 6b04 	str.w	r6, [r3], #4
 800e03e:	6003      	str	r3, [r0, #0]
 800e040:	6813      	ldr	r3, [r2, #0]
 800e042:	6029      	str	r1, [r5, #0]
 800e044:	3b04      	subs	r3, #4
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	e7b4      	b.n	800dfb4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800e04a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e04c:	f041 0101 	orr.w	r1, r1, #1
 800e050:	6519      	str	r1, [r3, #80]	; 0x50
 800e052:	e7ec      	b.n	800e02e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 800e054:	2b00      	cmp	r3, #0
 800e056:	d0ad      	beq.n	800dfb4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800e058:	4b16      	ldr	r3, [pc, #88]	; (800e0b4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e05a:	781a      	ldrb	r2, [r3, #0]
 800e05c:	4b17      	ldr	r3, [pc, #92]	; (800e0bc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800e05e:	b152      	cbz	r2, 800e076 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 800e060:	691a      	ldr	r2, [r3, #16]
 800e062:	f042 0201 	orr.w	r2, r2, #1
 800e066:	611a      	str	r2, [r3, #16]
 800e068:	4a0f      	ldr	r2, [pc, #60]	; (800e0a8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800e06a:	4b0e      	ldr	r3, [pc, #56]	; (800e0a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800e06c:	6812      	ldr	r2, [r2, #0]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6812      	ldr	r2, [r2, #0]
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	e79e      	b.n	800dfb4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800e076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e078:	f042 0201 	orr.w	r2, r2, #1
 800e07c:	651a      	str	r2, [r3, #80]	; 0x50
 800e07e:	e7f3      	b.n	800e068 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 800e080:	4b0c      	ldr	r3, [pc, #48]	; (800e0b4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e082:	781a      	ldrb	r2, [r3, #0]
 800e084:	4b0d      	ldr	r3, [pc, #52]	; (800e0bc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800e086:	b132      	cbz	r2, 800e096 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 800e088:	691a      	ldr	r2, [r3, #16]
 800e08a:	f022 0202 	bic.w	r2, r2, #2
 800e08e:	611a      	str	r2, [r3, #16]
 800e090:	2000      	movs	r0, #0
 800e092:	6020      	str	r0, [r4, #0]
 800e094:	e7b9      	b.n	800e00a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800e096:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e098:	f022 0202 	bic.w	r2, r2, #2
 800e09c:	651a      	str	r2, [r3, #80]	; 0x50
 800e09e:	e7f7      	b.n	800e090 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 800e0a0:	200029ac 	andcs	r2, r0, ip, lsr #19
 800e0a4:	200029a8 	andcs	r2, r0, r8, lsr #19
 800e0a8:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800e0ac:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 800e0b0:	1ffff700 	svcne	0x00fff700
 800e0b4:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 800e0b8:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800e0bc:	40022000 	andmi	r2, r2, r0

0800e0c0 <net_init>:
 800e0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c4:	460c      	mov	r4, r1
 800e0c6:	4616      	mov	r6, r2
 800e0c8:	9f06      	ldr	r7, [sp, #24]
 800e0ca:	4a22      	ldr	r2, [pc, #136]	; (800e154 <net_init+0x94>)
 800e0cc:	461d      	mov	r5, r3
 800e0ce:	1e43      	subs	r3, r0, #1
 800e0d0:	3005      	adds	r0, #5
 800e0d2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e0d6:	4283      	cmp	r3, r0
 800e0d8:	f802 1b01 	strb.w	r1, [r2], #1
 800e0dc:	d1f9      	bne.n	800e0d2 <net_init+0x12>
 800e0de:	4623      	mov	r3, r4
 800e0e0:	4a1d      	ldr	r2, [pc, #116]	; (800e158 <net_init+0x98>)
 800e0e2:	f104 010c 	add.w	r1, r4, #12
 800e0e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e0ea:	428b      	cmp	r3, r1
 800e0ec:	f802 0b01 	strb.w	r0, [r2], #1
 800e0f0:	d1f9      	bne.n	800e0e6 <net_init+0x26>
 800e0f2:	f04f 0800 	mov.w	r8, #0
 800e0f6:	4918      	ldr	r1, [pc, #96]	; (800e158 <net_init+0x98>)
 800e0f8:	4816      	ldr	r0, [pc, #88]	; (800e154 <net_init+0x94>)
 800e0fa:	f002 fb68 	bl	80107ce <ip_init>
 800e0fe:	4815      	ldr	r0, [pc, #84]	; (800e154 <net_init+0x94>)
 800e100:	f000 f868 	bl	800e1d4 <rfc3927_init>
 800e104:	f887 8000 	strb.w	r8, [r7]
 800e108:	782b      	ldrb	r3, [r5, #0]
 800e10a:	b163      	cbz	r3, 800e126 <net_init+0x66>
 800e10c:	4632      	mov	r2, r6
 800e10e:	4912      	ldr	r1, [pc, #72]	; (800e158 <net_init+0x98>)
 800e110:	4810      	ldr	r0, [pc, #64]	; (800e154 <net_init+0x94>)
 800e112:	f002 f86d 	bl	80101f0 <dhcp_client>
 800e116:	4540      	cmp	r0, r8
 800e118:	da05      	bge.n	800e126 <net_init+0x66>
 800e11a:	480f      	ldr	r0, [pc, #60]	; (800e158 <net_init+0x98>)
 800e11c:	f885 8000 	strb.w	r8, [r5]
 800e120:	f000 f864 	bl	800e1ec <rfc3927>
 800e124:	7038      	strb	r0, [r7, #0]
 800e126:	490c      	ldr	r1, [pc, #48]	; (800e158 <net_init+0x98>)
 800e128:	480a      	ldr	r0, [pc, #40]	; (800e154 <net_init+0x94>)
 800e12a:	f001 fe71 	bl	800fe10 <arp_init>
 800e12e:	480a      	ldr	r0, [pc, #40]	; (800e158 <net_init+0x98>)
 800e130:	f002 fb44 	bl	80107bc <ip_set_ip>
 800e134:	f000 f9c2 	bl	800e4bc <tcp_init>
 800e138:	4a07      	ldr	r2, [pc, #28]	; (800e158 <net_init+0x98>)
 800e13a:	1e63      	subs	r3, r4, #1
 800e13c:	340b      	adds	r4, #11
 800e13e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e142:	f803 1f01 	strb.w	r1, [r3, #1]!
 800e146:	429c      	cmp	r4, r3
 800e148:	d1f9      	bne.n	800e13e <net_init+0x7e>
 800e14a:	782a      	ldrb	r2, [r5, #0]
 800e14c:	4b03      	ldr	r3, [pc, #12]	; (800e15c <net_init+0x9c>)
 800e14e:	701a      	strb	r2, [r3, #0]
 800e150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e154:	200029cc 	andcs	r2, r0, ip, asr #19
 800e158:	200029c0 	andcs	r2, r0, r0, asr #19
 800e15c:	200029d2 	ldrdcs	r2, [r0], -r2	; <UNPREDICTABLE>

0800e160 <net_shutdown>:
 800e160:	b508      	push	{r3, lr}
 800e162:	f002 fb3f 	bl	80107e4 <ip_shutdown>
 800e166:	4b04      	ldr	r3, [pc, #16]	; (800e178 <net_shutdown+0x18>)
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	b11b      	cbz	r3, 800e174 <net_shutdown+0x14>
 800e16c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e170:	f002 b946 	b.w	8010400 <dhcp_client_release>
 800e174:	bd08      	pop	{r3, pc}
 800e176:	bf00      	nop
 800e178:	200029d2 	ldrdcs	r2, [r0], -r2	; <UNPREDICTABLE>

0800e17c <net_handle>:
 800e17c:	b510      	push	{r4, lr}
 800e17e:	4c0c      	ldr	r4, [pc, #48]	; (800e1b0 <net_handle+0x34>)
 800e180:	4620      	mov	r0, r4
 800e182:	f004 fdd7 	bl	8012d34 <emac_eth_recv>
 800e186:	2800      	cmp	r0, #0
 800e188:	dd07      	ble.n	800e19a <net_handle+0x1e>
 800e18a:	6820      	ldr	r0, [r4, #0]
 800e18c:	8983      	ldrh	r3, [r0, #12]
 800e18e:	2b08      	cmp	r3, #8
 800e190:	d107      	bne.n	800e1a2 <net_handle+0x26>
 800e192:	f002 fb2e 	bl	80107f2 <ip_handle>
 800e196:	f004 fde1 	bl	8012d5c <emac_free_pkt>
 800e19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e19e:	f000 b809 	b.w	800e1b4 <net_timers_run>
 800e1a2:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e1a6:	d1f6      	bne.n	800e196 <net_handle+0x1a>
 800e1a8:	f001 feb8 	bl	800ff1c <arp_handle>
 800e1ac:	e7f3      	b.n	800e196 <net_handle+0x1a>
 800e1ae:	bf00      	nop
 800e1b0:	200029d4 	ldrdcs	r2, [r0], -r4

0800e1b4 <net_timers_run>:
 800e1b4:	4b05      	ldr	r3, [pc, #20]	; (800e1cc <net_timers_run+0x18>)
 800e1b6:	4a06      	ldr	r2, [pc, #24]	; (800e1d0 <net_timers_run+0x1c>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	6811      	ldr	r1, [r2, #0]
 800e1bc:	4299      	cmp	r1, r3
 800e1be:	d803      	bhi.n	800e1c8 <net_timers_run+0x14>
 800e1c0:	3364      	adds	r3, #100	; 0x64
 800e1c2:	6013      	str	r3, [r2, #0]
 800e1c4:	f002 ba5c 	b.w	8010680 <igmp_timer>
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800e1d0:	200029d8 	ldrdcs	r2, [r0], -r8

0800e1d4 <rfc3927_init>:
 800e1d4:	4b04      	ldr	r3, [pc, #16]	; (800e1e8 <rfc3927_init+0x14>)
 800e1d6:	1d82      	adds	r2, r0, #6
 800e1d8:	4290      	cmp	r0, r2
 800e1da:	d100      	bne.n	800e1de <rfc3927_init+0xa>
 800e1dc:	4770      	bx	lr
 800e1de:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e1e2:	f803 1b01 	strb.w	r1, [r3], #1
 800e1e6:	e7f7      	b.n	800e1d8 <rfc3927_init+0x4>
 800e1e8:	200029dc 	ldrdcs	r2, [r0], -ip

0800e1ec <rfc3927>:
 800e1ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	26ff      	movs	r6, #255	; 0xff
 800e1f4:	4b18      	ldr	r3, [pc, #96]	; (800e258 <rfc3927+0x6c>)
 800e1f6:	4f19      	ldr	r7, [pc, #100]	; (800e25c <rfc3927+0x70>)
 800e1f8:	791a      	ldrb	r2, [r3, #4]
 800e1fa:	78dc      	ldrb	r4, [r3, #3]
 800e1fc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800e260 <rfc3927+0x74>
 800e200:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800e204:	f8d7 9000 	ldr.w	r9, [r7]
 800e208:	f8df b058 	ldr.w	fp, [pc, #88]	; 800e264 <rfc3927+0x78>
 800e20c:	f8df a058 	ldr.w	sl, [pc, #88]	; 800e268 <rfc3927+0x7c>
 800e210:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800e214:	4659      	mov	r1, fp
 800e216:	4620      	mov	r0, r4
 800e218:	f001 fece 	bl	800ffb8 <arp_cache_lookup>
 800e21c:	b938      	cbnz	r0, 800e22e <rfc3927+0x42>
 800e21e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e222:	2001      	movs	r0, #1
 800e224:	602c      	str	r4, [r5, #0]
 800e226:	60ac      	str	r4, [r5, #8]
 800e228:	606b      	str	r3, [r5, #4]
 800e22a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22e:	ba24      	rev	r4, r4
 800e230:	3401      	adds	r4, #1
 800e232:	3e01      	subs	r6, #1
 800e234:	ba24      	rev	r4, r4
 800e236:	b2b6      	uxth	r6, r6
 800e238:	4554      	cmp	r4, sl
 800e23a:	bf08      	it	eq
 800e23c:	4644      	moveq	r4, r8
 800e23e:	b12e      	cbz	r6, 800e24c <rfc3927+0x60>
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	eba3 0309 	sub.w	r3, r3, r9
 800e246:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e24a:	d3e3      	bcc.n	800e214 <rfc3927+0x28>
 800e24c:	2000      	movs	r0, #0
 800e24e:	e9c5 0001 	strd	r0, r0, [r5, #4]
 800e252:	6028      	str	r0, [r5, #0]
 800e254:	e7e9      	b.n	800e22a <rfc3927+0x3e>
 800e256:	bf00      	nop
 800e258:	200029dc 	ldrdcs	r2, [r0], -ip
 800e25c:	2000a9c4 	andcs	sl, r0, r4, asr #19
 800e260:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 800e264:	200029e4 	andcs	r2, r0, r4, ror #19
 800e268:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

0800e26c <_init_tcb>:
 800e26c:	b510      	push	{r4, lr}
 800e26e:	4603      	mov	r3, r0
 800e270:	2400      	movs	r4, #0
 800e272:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800e276:	4293      	cmp	r3, r2
 800e278:	d10d      	bne.n	800e296 <_init_tcb+0x2a>
 800e27a:	4b08      	ldr	r3, [pc, #32]	; (800e29c <_init_tcb+0x30>)
 800e27c:	f640 3268 	movw	r2, #2920	; 0xb68
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	8702      	strh	r2, [r0, #56]	; 0x38
 800e284:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e288:	6283      	str	r3, [r0, #40]	; 0x28
 800e28a:	6243      	str	r3, [r0, #36]	; 0x24
 800e28c:	2301      	movs	r3, #1
 800e28e:	8001      	strh	r1, [r0, #0]
 800e290:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800e294:	bd10      	pop	{r4, pc}
 800e296:	f803 4b01 	strb.w	r4, [r3], #1
 800e29a:	e7ec      	b.n	800e276 <_init_tcb+0xa>
 800e29c:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800e2a0 <memcpy.isra.0>:
 800e2a0:	3801      	subs	r0, #1
 800e2a2:	440a      	add	r2, r1
 800e2a4:	4291      	cmp	r1, r2
 800e2a6:	d100      	bne.n	800e2aa <memcpy.isra.0+0xa>
 800e2a8:	4770      	bx	lr
 800e2aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2ae:	f800 3f01 	strb.w	r3, [r0, #1]!
 800e2b2:	e7f7      	b.n	800e2a4 <memcpy.isra.0+0x4>

0800e2b4 <_bswap32>:
 800e2b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2b6:	2204      	movs	r2, #4
 800e2b8:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 800e2bc:	4629      	mov	r1, r5
 800e2be:	4604      	mov	r4, r0
 800e2c0:	eb0d 0002 	add.w	r0, sp, r2
 800e2c4:	f7ff ffec 	bl	800e2a0 <memcpy.isra.0>
 800e2c8:	2204      	movs	r2, #4
 800e2ca:	9b01      	ldr	r3, [sp, #4]
 800e2cc:	eb0d 0102 	add.w	r1, sp, r2
 800e2d0:	ba1b      	rev	r3, r3
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	9301      	str	r3, [sp, #4]
 800e2d6:	f7ff ffe3 	bl	800e2a0 <memcpy.isra.0>
 800e2da:	2204      	movs	r2, #4
 800e2dc:	3426      	adds	r4, #38	; 0x26
 800e2de:	eb0d 0002 	add.w	r0, sp, r2
 800e2e2:	4621      	mov	r1, r4
 800e2e4:	f7ff ffdc 	bl	800e2a0 <memcpy.isra.0>
 800e2e8:	2204      	movs	r2, #4
 800e2ea:	9b01      	ldr	r3, [sp, #4]
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	ba1b      	rev	r3, r3
 800e2f0:	eb0d 0102 	add.w	r1, sp, r2
 800e2f4:	9301      	str	r3, [sp, #4]
 800e2f6:	f7ff ffd3 	bl	800e2a0 <memcpy.isra.0>
 800e2fa:	b003      	add	sp, #12
 800e2fc:	bd30      	pop	{r4, r5, pc}
	...

0800e300 <_tcp_send_package>:
 800e300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e304:	7a0b      	ldrb	r3, [r1, #8]
 800e306:	4605      	mov	r5, r0
 800e308:	f013 0f02 	tst.w	r3, #2
 800e30c:	bf0c      	ite	eq
 800e30e:	f04f 0905 	moveq.w	r9, #5
 800e312:	f04f 0906 	movne.w	r9, #6
 800e316:	f04f 0800 	mov.w	r8, #0
 800e31a:	4c4b      	ldr	r4, [pc, #300]	; (800e448 <_tcp_send_package+0x148>)
 800e31c:	460f      	mov	r7, r1
 800e31e:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 800e320:	f100 0108 	add.w	r1, r0, #8
 800e324:	2206      	movs	r2, #6
 800e326:	4620      	mov	r0, r4
 800e328:	f7ff ffba 	bl	800e2a0 <memcpy.isra.0>
 800e32c:	4a47      	ldr	r2, [pc, #284]	; (800e44c <_tcp_send_package+0x14c>)
 800e32e:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 800e332:	8813      	ldrh	r3, [r2, #0]
 800e334:	b2b6      	uxth	r6, r6
 800e336:	1c59      	adds	r1, r3, #1
 800e338:	8263      	strh	r3, [r4, #18]
 800e33a:	f105 0a04 	add.w	sl, r5, #4
 800e33e:	f106 0314 	add.w	r3, r6, #20
 800e342:	ba5b      	rev16	r3, r3
 800e344:	8011      	strh	r1, [r2, #0]
 800e346:	f104 001e 	add.w	r0, r4, #30
 800e34a:	2204      	movs	r2, #4
 800e34c:	4651      	mov	r1, sl
 800e34e:	8223      	strh	r3, [r4, #16]
 800e350:	f7ff ffa6 	bl	800e2a0 <memcpy.isra.0>
 800e354:	2114      	movs	r1, #20
 800e356:	f104 000e 	add.w	r0, r4, #14
 800e35a:	f884 8018 	strb.w	r8, [r4, #24]
 800e35e:	f884 8019 	strb.w	r8, [r4, #25]
 800e362:	f002 fa5f 	bl	8010824 <net_chksum>
 800e366:	882b      	ldrh	r3, [r5, #0]
 800e368:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800e36c:	8463      	strh	r3, [r4, #34]	; 0x22
 800e36e:	886b      	ldrh	r3, [r5, #2]
 800e370:	8320      	strh	r0, [r4, #24]
 800e372:	84a3      	strh	r3, [r4, #36]	; 0x24
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 800e378:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 800e382:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 800e386:	7a3b      	ldrb	r3, [r7, #8]
 800e388:	8622      	strh	r2, [r4, #48]	; 0x30
 800e38a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800e38e:	079b      	lsls	r3, r3, #30
 800e390:	bf48      	it	mi
 800e392:	2302      	movmi	r3, #2
 800e394:	8baa      	ldrh	r2, [r5, #28]
 800e396:	bf44      	itt	mi
 800e398:	f884 3036 	strbmi.w	r3, [r4, #54]	; 0x36
 800e39c:	2304      	movmi	r3, #4
 800e39e:	86a2      	strh	r2, [r4, #52]	; 0x34
 800e3a0:	bf41      	itttt	mi
 800e3a2:	f884 3037 	strbmi.w	r3, [r4, #55]	; 0x37
 800e3a6:	4622      	movmi	r2, r4
 800e3a8:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 800e3ac:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 800e3b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e3b2:	f884 8032 	strb.w	r8, [r4, #50]	; 0x32
 800e3b6:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
 800e3ba:	bf58      	it	pl
 800e3bc:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d13f      	bne.n	800e444 <_tcp_send_package+0x144>
 800e3c4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800e3c6:	4820      	ldr	r0, [pc, #128]	; (800e448 <_tcp_send_package+0x148>)
 800e3c8:	ba5b      	rev16	r3, r3
 800e3ca:	8463      	strh	r3, [r4, #34]	; 0x22
 800e3cc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800e3ce:	ba5b      	rev16	r3, r3
 800e3d0:	84a3      	strh	r3, [r4, #36]	; 0x24
 800e3d2:	f7ff ff6f 	bl	800e2b4 <_bswap32>
 800e3d6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800e3d8:	a801      	add	r0, sp, #4
 800e3da:	ba5b      	rev16	r3, r3
 800e3dc:	8623      	strh	r3, [r4, #48]	; 0x30
 800e3de:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800e3e0:	220c      	movs	r2, #12
 800e3e2:	ba5b      	rev16	r3, r3
 800e3e4:	491a      	ldr	r1, [pc, #104]	; (800e450 <_tcp_send_package+0x150>)
 800e3e6:	86a3      	strh	r3, [r4, #52]	; 0x34
 800e3e8:	f7ff ff5a 	bl	800e2a0 <memcpy.isra.0>
 800e3ec:	2204      	movs	r2, #4
 800e3ee:	4919      	ldr	r1, [pc, #100]	; (800e454 <_tcp_send_package+0x154>)
 800e3f0:	4817      	ldr	r0, [pc, #92]	; (800e450 <_tcp_send_package+0x150>)
 800e3f2:	f7ff ff55 	bl	800e2a0 <memcpy.isra.0>
 800e3f6:	2204      	movs	r2, #4
 800e3f8:	4651      	mov	r1, sl
 800e3fa:	4817      	ldr	r0, [pc, #92]	; (800e458 <_tcp_send_package+0x158>)
 800e3fc:	f7ff ff50 	bl	800e2a0 <memcpy.isra.0>
 800e400:	2300      	movs	r3, #0
 800e402:	77a3      	strb	r3, [r4, #30]
 800e404:	2306      	movs	r3, #6
 800e406:	f106 010c 	add.w	r1, r6, #12
 800e40a:	77e3      	strb	r3, [r4, #31]
 800e40c:	4810      	ldr	r0, [pc, #64]	; (800e450 <_tcp_send_package+0x150>)
 800e40e:	ba73      	rev16	r3, r6
 800e410:	8423      	strh	r3, [r4, #32]
 800e412:	f002 fa07 	bl	8010824 <net_chksum>
 800e416:	a901      	add	r1, sp, #4
 800e418:	4605      	mov	r5, r0
 800e41a:	220c      	movs	r2, #12
 800e41c:	480c      	ldr	r0, [pc, #48]	; (800e450 <_tcp_send_package+0x150>)
 800e41e:	f7ff ff3f 	bl	800e2a0 <memcpy.isra.0>
 800e422:	4809      	ldr	r0, [pc, #36]	; (800e448 <_tcp_send_package+0x148>)
 800e424:	f106 0122 	add.w	r1, r6, #34	; 0x22
 800e428:	8665      	strh	r5, [r4, #50]	; 0x32
 800e42a:	b004      	add	sp, #16
 800e42c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e430:	f004 bc98 	b.w	8012d64 <emac_eth_send>
 800e434:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800e436:	5cc9      	ldrb	r1, [r1, r3]
 800e438:	54d1      	strb	r1, [r2, r3]
 800e43a:	3301      	adds	r3, #1
 800e43c:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800e43e:	4299      	cmp	r1, r3
 800e440:	d8f8      	bhi.n	800e434 <_tcp_send_package+0x134>
 800e442:	e7bf      	b.n	800e3c4 <_tcp_send_package+0xc4>
 800e444:	2300      	movs	r3, #0
 800e446:	e7f9      	b.n	800e43c <_tcp_send_package+0x13c>
 800e448:	200035a0 	andcs	r3, r0, r0, lsr #11
 800e44c:	200029ea 	andcs	r2, r0, sl, ror #19
 800e450:	200035b6 			; <UNDEFINED> instruction: 0x200035b6
 800e454:	200029c0 	andcs	r2, r0, r0, asr #19
 800e458:	200035ba 			; <UNDEFINED> instruction: 0x200035ba

0800e45c <_send_reset>:
 800e45c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e45e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800e462:	4604      	mov	r4, r0
 800e464:	075a      	lsls	r2, r3, #29
 800e466:	460e      	mov	r6, r1
 800e468:	d421      	bmi.n	800e4ae <_send_reset+0x52>
 800e46a:	2204      	movs	r2, #4
 800e46c:	f013 0310 	ands.w	r3, r3, #16
 800e470:	f88d 200c 	strb.w	r2, [sp, #12]
 800e474:	d01d      	beq.n	800e4b2 <_send_reset+0x56>
 800e476:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 800e47a:	4668      	mov	r0, sp
 800e47c:	f7ff ff10 	bl	800e2a0 <memcpy.isra.0>
 800e480:	9b00      	ldr	r3, [sp, #0]
 800e482:	9301      	str	r3, [sp, #4]
 800e484:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800e488:	4668      	mov	r0, sp
 800e48a:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800e48e:	f104 0126 	add.w	r1, r4, #38	; 0x26
 800e492:	07db      	lsls	r3, r3, #31
 800e494:	f04f 0204 	mov.w	r2, #4
 800e498:	bf48      	it	mi
 800e49a:	3501      	addmi	r5, #1
 800e49c:	f7ff ff00 	bl	800e2a0 <memcpy.isra.0>
 800e4a0:	9b00      	ldr	r3, [sp, #0]
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	441d      	add	r5, r3
 800e4a6:	a901      	add	r1, sp, #4
 800e4a8:	9502      	str	r5, [sp, #8]
 800e4aa:	f7ff ff29 	bl	800e300 <_tcp_send_package>
 800e4ae:	b004      	add	sp, #16
 800e4b0:	bd70      	pop	{r4, r5, r6, pc}
 800e4b2:	9301      	str	r3, [sp, #4]
 800e4b4:	2314      	movs	r3, #20
 800e4b6:	f88d 300c 	strb.w	r3, [sp, #12]
 800e4ba:	e7e3      	b.n	800e484 <_send_reset+0x28>

0800e4bc <tcp_init>:
 800e4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4be:	2206      	movs	r2, #6
 800e4c0:	4c0e      	ldr	r4, [pc, #56]	; (800e4fc <tcp_init+0x40>)
 800e4c2:	490f      	ldr	r1, [pc, #60]	; (800e500 <tcp_init+0x44>)
 800e4c4:	18a0      	adds	r0, r4, r2
 800e4c6:	f7ff feeb 	bl	800e2a0 <memcpy.isra.0>
 800e4ca:	2308      	movs	r3, #8
 800e4cc:	2204      	movs	r2, #4
 800e4ce:	2500      	movs	r5, #0
 800e4d0:	7323      	strb	r3, [r4, #12]
 800e4d2:	4b0c      	ldr	r3, [pc, #48]	; (800e504 <tcp_init+0x48>)
 800e4d4:	eb0d 0102 	add.w	r1, sp, r2
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f104 001a 	add.w	r0, r4, #26
 800e4de:	9301      	str	r3, [sp, #4]
 800e4e0:	7365      	strb	r5, [r4, #13]
 800e4e2:	f7ff fedd 	bl	800e2a0 <memcpy.isra.0>
 800e4e6:	2345      	movs	r3, #69	; 0x45
 800e4e8:	73a3      	strb	r3, [r4, #14]
 800e4ea:	2340      	movs	r3, #64	; 0x40
 800e4ec:	7523      	strb	r3, [r4, #20]
 800e4ee:	75a3      	strb	r3, [r4, #22]
 800e4f0:	2306      	movs	r3, #6
 800e4f2:	73e5      	strb	r5, [r4, #15]
 800e4f4:	7565      	strb	r5, [r4, #21]
 800e4f6:	75e3      	strb	r3, [r4, #23]
 800e4f8:	b003      	add	sp, #12
 800e4fa:	bd30      	pop	{r4, r5, pc}
 800e4fc:	200035a0 	andcs	r3, r0, r0, lsr #11
 800e500:	200029cc 	andcs	r2, r0, ip, asr #19
 800e504:	200029c0 	andcs	r2, r0, r0, asr #19

0800e508 <tcp_handle>:
 800e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50c:	4605      	mov	r5, r0
 800e50e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800e510:	b085      	sub	sp, #20
 800e512:	ba5b      	rev16	r3, r3
 800e514:	8443      	strh	r3, [r0, #34]	; 0x22
 800e516:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800e518:	f8b0 b010 	ldrh.w	fp, [r0, #16]
 800e51c:	ba5b      	rev16	r3, r3
 800e51e:	8483      	strh	r3, [r0, #36]	; 0x24
 800e520:	f890 802e 	ldrb.w	r8, [r0, #46]	; 0x2e
 800e524:	f7ff fec6 	bl	800e2b4 <_bswap32>
 800e528:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 800e52a:	4ca6      	ldr	r4, [pc, #664]	; (800e7c4 <tcp_handle+0x2bc>)
 800e52c:	ba5b      	rev16	r3, r3
 800e52e:	862b      	strh	r3, [r5, #48]	; 0x30
 800e530:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 800e532:	8822      	ldrh	r2, [r4, #0]
 800e534:	ba5b      	rev16	r3, r3
 800e536:	86ab      	strh	r3, [r5, #52]	; 0x34
 800e538:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d14d      	bne.n	800e5da <tcp_handle+0xd2>
 800e53e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e542:	2b01      	cmp	r3, #1
 800e544:	d00d      	beq.n	800e562 <tcp_handle+0x5a>
 800e546:	2204      	movs	r2, #4
 800e548:	4668      	mov	r0, sp
 800e54a:	f105 011a 	add.w	r1, r5, #26
 800e54e:	f7ff fea7 	bl	800e2a0 <memcpy.isra.0>
 800e552:	8862      	ldrh	r2, [r4, #2]
 800e554:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800e556:	429a      	cmp	r2, r3
 800e558:	d13f      	bne.n	800e5da <tcp_handle+0xd2>
 800e55a:	6862      	ldr	r2, [r4, #4]
 800e55c:	9b00      	ldr	r3, [sp, #0]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d13b      	bne.n	800e5da <tcp_handle+0xd2>
 800e562:	2204      	movs	r2, #4
 800e564:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 800e568:	eb0d 0002 	add.w	r0, sp, r2
 800e56c:	f7ff fe98 	bl	800e2a0 <memcpy.isra.0>
 800e570:	2204      	movs	r2, #4
 800e572:	f105 0126 	add.w	r1, r5, #38	; 0x26
 800e576:	eb0d 0002 	add.w	r0, sp, r2
 800e57a:	9e01      	ldr	r6, [sp, #4]
 800e57c:	f7ff fe90 	bl	800e2a0 <memcpy.isra.0>
 800e580:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800e584:	9f01      	ldr	r7, [sp, #4]
 800e586:	2a01      	cmp	r2, #1
 800e588:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 800e58c:	d01b      	beq.n	800e5c6 <tcp_handle+0xbe>
 800e58e:	1ed3      	subs	r3, r2, #3
 800e590:	2b07      	cmp	r3, #7
 800e592:	d822      	bhi.n	800e5da <tcp_handle+0xd2>
 800e594:	ea4f 1318 	mov.w	r3, r8, lsr #4
 800e598:	f64f 78ec 	movw	r8, #65516	; 0xffec
 800e59c:	fa9b fb9b 	rev16.w	fp, fp
 800e5a0:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 800e5a4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800e5a6:	44d8      	add	r8, fp
 800e5a8:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 800e5ac:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800e5b0:	fa1f f888 	uxth.w	r8, r8
 800e5b4:	2900      	cmp	r1, #0
 800e5b6:	d142      	bne.n	800e63e <tcp_handle+0x136>
 800e5b8:	f1b8 0f00 	cmp.w	r8, #0
 800e5bc:	d16b      	bne.n	800e696 <tcp_handle+0x18e>
 800e5be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5c0:	42bb      	cmp	r3, r7
 800e5c2:	d168      	bne.n	800e696 <tcp_handle+0x18e>
 800e5c4:	e048      	b.n	800e658 <tcp_handle+0x150>
 800e5c6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800e5ca:	075a      	lsls	r2, r3, #29
 800e5cc:	d405      	bmi.n	800e5da <tcp_handle+0xd2>
 800e5ce:	06d8      	lsls	r0, r3, #27
 800e5d0:	d506      	bpl.n	800e5e0 <tcp_handle+0xd8>
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	497b      	ldr	r1, [pc, #492]	; (800e7c4 <tcp_handle+0x2bc>)
 800e5d6:	f7ff ff41 	bl	800e45c <_send_reset>
 800e5da:	b005      	add	sp, #20
 800e5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5e0:	0799      	lsls	r1, r3, #30
 800e5e2:	d5fa      	bpl.n	800e5da <tcp_handle+0xd2>
 800e5e4:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 800e5e8:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800e5ec:	4668      	mov	r0, sp
 800e5ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e5f2:	f105 011a 	add.w	r1, r5, #26
 800e5f6:	2204      	movs	r2, #4
 800e5f8:	8063      	strh	r3, [r4, #2]
 800e5fa:	f7ff fe51 	bl	800e2a0 <memcpy.isra.0>
 800e5fe:	2206      	movs	r2, #6
 800e600:	9b00      	ldr	r3, [sp, #0]
 800e602:	18a9      	adds	r1, r5, r2
 800e604:	4870      	ldr	r0, [pc, #448]	; (800e7c8 <tcp_handle+0x2c0>)
 800e606:	6063      	str	r3, [r4, #4]
 800e608:	f7ff fe4a 	bl	800e2a0 <memcpy.isra.0>
 800e60c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e60e:	1c7b      	adds	r3, r7, #1
 800e610:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800e614:	6363      	str	r3, [r4, #52]	; 0x34
 800e616:	2312      	movs	r3, #18
 800e618:	486a      	ldr	r0, [pc, #424]	; (800e7c4 <tcp_handle+0x2bc>)
 800e61a:	a901      	add	r1, sp, #4
 800e61c:	f88d 300c 	strb.w	r3, [sp, #12]
 800e620:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800e624:	63e7      	str	r7, [r4, #60]	; 0x3c
 800e626:	f8c4 a018 	str.w	sl, [r4, #24]
 800e62a:	f7ff fe69 	bl	800e300 <_tcp_send_package>
 800e62e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e630:	1c5a      	adds	r2, r3, #1
 800e632:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800e636:	2303      	movs	r3, #3
 800e638:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800e63c:	e7cd      	b.n	800e5da <tcp_handle+0xd2>
 800e63e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e640:	eba3 0c07 	sub.w	ip, r3, r7
 800e644:	f1b8 0f00 	cmp.w	r8, #0
 800e648:	d10d      	bne.n	800e666 <tcp_handle+0x15e>
 800e64a:	f1bc 0f00 	cmp.w	ip, #0
 800e64e:	dc22      	bgt.n	800e696 <tcp_handle+0x18e>
 800e650:	1afb      	subs	r3, r7, r3
 800e652:	1a5b      	subs	r3, r3, r1
 800e654:	2b00      	cmp	r3, #0
 800e656:	da1e      	bge.n	800e696 <tcp_handle+0x18e>
 800e658:	0743      	lsls	r3, r0, #29
 800e65a:	d530      	bpl.n	800e6be <tcp_handle+0x1b6>
 800e65c:	8821      	ldrh	r1, [r4, #0]
 800e65e:	4859      	ldr	r0, [pc, #356]	; (800e7c4 <tcp_handle+0x2bc>)
 800e660:	f7ff fe04 	bl	800e26c <_init_tcb>
 800e664:	e7b9      	b.n	800e5da <tcp_handle+0xd2>
 800e666:	f1bc 0f00 	cmp.w	ip, #0
 800e66a:	dc06      	bgt.n	800e67a <tcp_handle+0x172>
 800e66c:	eba7 0c03 	sub.w	ip, r7, r3
 800e670:	ebac 0c01 	sub.w	ip, ip, r1
 800e674:	f1bc 0f00 	cmp.w	ip, #0
 800e678:	dbee      	blt.n	800e658 <tcp_handle+0x150>
 800e67a:	eb08 0c07 	add.w	ip, r8, r7
 800e67e:	f103 0e01 	add.w	lr, r3, #1
 800e682:	ebae 0e0c 	sub.w	lr, lr, ip
 800e686:	f1be 0f00 	cmp.w	lr, #0
 800e68a:	dc04      	bgt.n	800e696 <tcp_handle+0x18e>
 800e68c:	43db      	mvns	r3, r3
 800e68e:	1a5b      	subs	r3, r3, r1
 800e690:	eb13 0f0c 	cmn.w	r3, ip
 800e694:	d4e0      	bmi.n	800e658 <tcp_handle+0x150>
 800e696:	0742      	lsls	r2, r0, #29
 800e698:	d505      	bpl.n	800e6a6 <tcp_handle+0x19e>
 800e69a:	8821      	ldrh	r1, [r4, #0]
 800e69c:	4849      	ldr	r0, [pc, #292]	; (800e7c4 <tcp_handle+0x2bc>)
 800e69e:	f7ff fde5 	bl	800e26c <_init_tcb>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e7c8      	b.n	800e638 <tcp_handle+0x130>
 800e6a6:	6963      	ldr	r3, [r4, #20]
 800e6a8:	9301      	str	r3, [sp, #4]
 800e6aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6ac:	9302      	str	r3, [sp, #8]
 800e6ae:	2310      	movs	r3, #16
 800e6b0:	4844      	ldr	r0, [pc, #272]	; (800e7c4 <tcp_handle+0x2bc>)
 800e6b2:	a901      	add	r1, sp, #4
 800e6b4:	f88d 300c 	strb.w	r3, [sp, #12]
 800e6b8:	f7ff fe22 	bl	800e300 <_tcp_send_package>
 800e6bc:	e78d      	b.n	800e5da <tcp_handle+0xd2>
 800e6be:	0781      	lsls	r1, r0, #30
 800e6c0:	d505      	bpl.n	800e6ce <tcp_handle+0x1c6>
 800e6c2:	2a03      	cmp	r2, #3
 800e6c4:	d0ed      	beq.n	800e6a2 <tcp_handle+0x19a>
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	493e      	ldr	r1, [pc, #248]	; (800e7c4 <tcp_handle+0x2bc>)
 800e6ca:	f7ff fec7 	bl	800e45c <_send_reset>
 800e6ce:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800e6d2:	06da      	lsls	r2, r3, #27
 800e6d4:	d581      	bpl.n	800e5da <tcp_handle+0xd2>
 800e6d6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e6da:	3b03      	subs	r3, #3
 800e6dc:	2b07      	cmp	r3, #7
 800e6de:	d818      	bhi.n	800e712 <tcp_handle+0x20a>
 800e6e0:	e8df f003 	tbb	[pc, r3]
 800e6e4:	76767604 	ldrbtvc	r7, [r6], -r4, lsl #12
 800e6e8:	a69d7676 			; <UNDEFINED> instruction: 0xa69d7676
 800e6ec:	6923      	ldr	r3, [r4, #16]
 800e6ee:	1b9b      	subs	r3, r3, r6
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	dc0a      	bgt.n	800e70a <tcp_handle+0x202>
 800e6f4:	6963      	ldr	r3, [r4, #20]
 800e6f6:	1af3      	subs	r3, r6, r3
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	dc06      	bgt.n	800e70a <tcp_handle+0x202>
 800e6fc:	2304      	movs	r3, #4
 800e6fe:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800e702:	f8c4 a018 	str.w	sl, [r4, #24]
 800e706:	6126      	str	r6, [r4, #16]
 800e708:	e796      	b.n	800e638 <tcp_handle+0x130>
 800e70a:	4628      	mov	r0, r5
 800e70c:	492d      	ldr	r1, [pc, #180]	; (800e7c4 <tcp_handle+0x2bc>)
 800e70e:	f7ff fea5 	bl	800e45c <_send_reset>
 800e712:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e716:	3b04      	subs	r3, #4
 800e718:	2b02      	cmp	r3, #2
 800e71a:	d830      	bhi.n	800e77e <tcp_handle+0x276>
 800e71c:	f1b8 0f00 	cmp.w	r8, #0
 800e720:	d02d      	beq.n	800e77e <tcp_handle+0x276>
 800e722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e724:	42bb      	cmp	r3, r7
 800e726:	f040 8092 	bne.w	800e84e <tcp_handle+0x346>
 800e72a:	f240 53b6 	movw	r3, #1462	; 0x5b6
 800e72e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800e7cc <tcp_handle+0x2c4>
 800e732:	f105 0122 	add.w	r1, r5, #34	; 0x22
 800e736:	f8ba 7000 	ldrh.w	r7, [sl]
 800e73a:	4642      	mov	r2, r8
 800e73c:	435f      	muls	r7, r3
 800e73e:	1d38      	adds	r0, r7, #4
 800e740:	4449      	add	r1, r9
 800e742:	4450      	add	r0, sl
 800e744:	f7ff fdac 	bl	800e2a0 <memcpy.isra.0>
 800e748:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800e74a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e74c:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800e750:	8722      	strh	r2, [r4, #56]	; 0x38
 800e752:	6962      	ldr	r2, [r4, #20]
 800e754:	4443      	add	r3, r8
 800e756:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800e75a:	6363      	str	r3, [r4, #52]	; 0x34
 800e75c:	2310      	movs	r3, #16
 800e75e:	4457      	add	r7, sl
 800e760:	4818      	ldr	r0, [pc, #96]	; (800e7c4 <tcp_handle+0x2bc>)
 800e762:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 800e766:	a901      	add	r1, sp, #4
 800e768:	f88d 300c 	strb.w	r3, [sp, #12]
 800e76c:	f7ff fdc8 	bl	800e300 <_tcp_send_package>
 800e770:	f8ba 3000 	ldrh.w	r3, [sl]
 800e774:	3301      	adds	r3, #1
 800e776:	f003 0301 	and.w	r3, r3, #1
 800e77a:	f8aa 3000 	strh.w	r3, [sl]
 800e77e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e782:	2b02      	cmp	r3, #2
 800e784:	f67f af29 	bls.w	800e5da <tcp_handle+0xd2>
 800e788:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800e78c:	07db      	lsls	r3, r3, #31
 800e78e:	f57f af24 	bpl.w	800e5da <tcp_handle+0xd2>
 800e792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e794:	6962      	ldr	r2, [r4, #20]
 800e796:	3301      	adds	r3, #1
 800e798:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800e79c:	6363      	str	r3, [r4, #52]	; 0x34
 800e79e:	2310      	movs	r3, #16
 800e7a0:	4808      	ldr	r0, [pc, #32]	; (800e7c4 <tcp_handle+0x2bc>)
 800e7a2:	a901      	add	r1, sp, #4
 800e7a4:	f88d 300c 	strb.w	r3, [sp, #12]
 800e7a8:	f7ff fdaa 	bl	800e300 <_tcp_send_package>
 800e7ac:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e7b0:	2b05      	cmp	r3, #5
 800e7b2:	d054      	beq.n	800e85e <tcp_handle+0x356>
 800e7b4:	d84e      	bhi.n	800e854 <tcp_handle+0x34c>
 800e7b6:	3b03      	subs	r3, #3
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	f63f af0e 	bhi.w	800e5da <tcp_handle+0xd2>
 800e7be:	2307      	movs	r3, #7
 800e7c0:	e73a      	b.n	800e638 <tcp_handle+0x130>
 800e7c2:	bf00      	nop
 800e7c4:	2000355c 	andcs	r3, r0, ip, asr r5
 800e7c8:	20003564 	andcs	r3, r0, r4, ror #10
 800e7cc:	200029ec 	andcs	r2, r0, ip, ror #19
 800e7d0:	6923      	ldr	r3, [r4, #16]
 800e7d2:	1b99      	subs	r1, r3, r6
 800e7d4:	d513      	bpl.n	800e7fe <tcp_handle+0x2f6>
 800e7d6:	6962      	ldr	r2, [r4, #20]
 800e7d8:	1ab2      	subs	r2, r6, r2
 800e7da:	2a00      	cmp	r2, #0
 800e7dc:	dc0f      	bgt.n	800e7fe <tcp_handle+0x2f6>
 800e7de:	6126      	str	r6, [r4, #16]
 800e7e0:	6a23      	ldr	r3, [r4, #32]
 800e7e2:	1bda      	subs	r2, r3, r7
 800e7e4:	2a00      	cmp	r2, #0
 800e7e6:	db05      	blt.n	800e7f4 <tcp_handle+0x2ec>
 800e7e8:	42bb      	cmp	r3, r7
 800e7ea:	d192      	bne.n	800e712 <tcp_handle+0x20a>
 800e7ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7ee:	1b9b      	subs	r3, r3, r6
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	dc8e      	bgt.n	800e712 <tcp_handle+0x20a>
 800e7f4:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800e7f8:	f8c4 a018 	str.w	sl, [r4, #24]
 800e7fc:	e789      	b.n	800e712 <tcp_handle+0x20a>
 800e7fe:	1af3      	subs	r3, r6, r3
 800e800:	2b00      	cmp	r3, #0
 800e802:	dc06      	bgt.n	800e812 <tcp_handle+0x30a>
 800e804:	2900      	cmp	r1, #0
 800e806:	dc84      	bgt.n	800e712 <tcp_handle+0x20a>
 800e808:	6963      	ldr	r3, [r4, #20]
 800e80a:	1af3      	subs	r3, r6, r3
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	dc80      	bgt.n	800e712 <tcp_handle+0x20a>
 800e810:	e7e6      	b.n	800e7e0 <tcp_handle+0x2d8>
 800e812:	6963      	ldr	r3, [r4, #20]
 800e814:	1b9a      	subs	r2, r3, r6
 800e816:	2a00      	cmp	r2, #0
 800e818:	f6bf af7b 	bge.w	800e712 <tcp_handle+0x20a>
 800e81c:	e744      	b.n	800e6a8 <tcp_handle+0x1a0>
 800e81e:	6963      	ldr	r3, [r4, #20]
 800e820:	42b3      	cmp	r3, r6
 800e822:	f47f af76 	bne.w	800e712 <tcp_handle+0x20a>
 800e826:	8821      	ldrh	r1, [r4, #0]
 800e828:	480f      	ldr	r0, [pc, #60]	; (800e868 <tcp_handle+0x360>)
 800e82a:	f7ff fd1f 	bl	800e26c <_init_tcb>
 800e82e:	e770      	b.n	800e712 <tcp_handle+0x20a>
 800e830:	6963      	ldr	r3, [r4, #20]
 800e832:	42b3      	cmp	r3, r6
 800e834:	f47f af6d 	bne.w	800e712 <tcp_handle+0x20a>
 800e838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e83a:	480b      	ldr	r0, [pc, #44]	; (800e868 <tcp_handle+0x360>)
 800e83c:	9302      	str	r3, [sp, #8]
 800e83e:	2310      	movs	r3, #16
 800e840:	a901      	add	r1, sp, #4
 800e842:	9601      	str	r6, [sp, #4]
 800e844:	f88d 300c 	strb.w	r3, [sp, #12]
 800e848:	f7ff fd5a 	bl	800e300 <_tcp_send_package>
 800e84c:	e761      	b.n	800e712 <tcp_handle+0x20a>
 800e84e:	6962      	ldr	r2, [r4, #20]
 800e850:	9201      	str	r2, [sp, #4]
 800e852:	e72b      	b.n	800e6ac <tcp_handle+0x1a4>
 800e854:	2b06      	cmp	r3, #6
 800e856:	f47f aec0 	bne.w	800e5da <tcp_handle+0xd2>
 800e85a:	230a      	movs	r3, #10
 800e85c:	e6ec      	b.n	800e638 <tcp_handle+0x130>
 800e85e:	6963      	ldr	r3, [r4, #20]
 800e860:	42b3      	cmp	r3, r6
 800e862:	d0fa      	beq.n	800e85a <tcp_handle+0x352>
 800e864:	2308      	movs	r3, #8
 800e866:	e6e7      	b.n	800e638 <tcp_handle+0x130>
 800e868:	2000355c 	andcs	r3, r0, ip, asr r5

0800e86c <tcp_begin>:
 800e86c:	b508      	push	{r3, lr}
 800e86e:	4b0a      	ldr	r3, [pc, #40]	; (800e898 <tcp_begin+0x2c>)
 800e870:	4601      	mov	r1, r0
 800e872:	881a      	ldrh	r2, [r3, #0]
 800e874:	4282      	cmp	r2, r0
 800e876:	d102      	bne.n	800e87e <tcp_begin+0x12>
 800e878:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e87c:	b130      	cbz	r0, 800e88c <tcp_begin+0x20>
 800e87e:	b12a      	cbz	r2, 800e88c <tcp_begin+0x20>
 800e880:	4806      	ldr	r0, [pc, #24]	; (800e89c <tcp_begin+0x30>)
 800e882:	f003 f9b3 	bl	8011bec <console_error>
 800e886:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e88a:	bd08      	pop	{r3, pc}
 800e88c:	4802      	ldr	r0, [pc, #8]	; (800e898 <tcp_begin+0x2c>)
 800e88e:	8019      	strh	r1, [r3, #0]
 800e890:	f7ff fcec 	bl	800e26c <_init_tcb>
 800e894:	2000      	movs	r0, #0
 800e896:	e7f8      	b.n	800e88a <tcp_begin+0x1e>
 800e898:	2000355c 	andcs	r3, r0, ip, asr r5
 800e89c:	080157b1 	stmdaeq	r1, {r0, r4, r5, r7, r8, r9, sl, ip, lr}

0800e8a0 <tcp_write>:
 800e8a0:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	bf28      	it	cs
 800e8a8:	461a      	movcs	r2, r3
 800e8aa:	2344      	movs	r3, #68	; 0x44
 800e8ac:	b530      	push	{r4, r5, lr}
 800e8ae:	4c0d      	ldr	r4, [pc, #52]	; (800e8e4 <tcp_write+0x44>)
 800e8b0:	b085      	sub	sp, #20
 800e8b2:	fb03 4400 	mla	r4, r3, r0, r4
 800e8b6:	6963      	ldr	r3, [r4, #20]
 800e8b8:	4615      	mov	r5, r2
 800e8ba:	9301      	str	r3, [sp, #4]
 800e8bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e8be:	62e1      	str	r1, [r4, #44]	; 0x2c
 800e8c0:	9302      	str	r3, [sp, #8]
 800e8c2:	2318      	movs	r3, #24
 800e8c4:	8622      	strh	r2, [r4, #48]	; 0x30
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	a901      	add	r1, sp, #4
 800e8ca:	f88d 300c 	strb.w	r3, [sp, #12]
 800e8ce:	f7ff fd17 	bl	800e300 <_tcp_send_package>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	6962      	ldr	r2, [r4, #20]
 800e8d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e8d8:	442a      	add	r2, r5
 800e8da:	8623      	strh	r3, [r4, #48]	; 0x30
 800e8dc:	6162      	str	r2, [r4, #20]
 800e8de:	b005      	add	sp, #20
 800e8e0:	bd30      	pop	{r4, r5, pc}
 800e8e2:	bf00      	nop
 800e8e4:	2000355c 	andcs	r3, r0, ip, asr r5

0800e8e8 <tcp_read>:
 800e8e8:	2344      	movs	r3, #68	; 0x44
 800e8ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8ec:	4c1c      	ldr	r4, [pc, #112]	; (800e960 <tcp_read+0x78>)
 800e8ee:	b085      	sub	sp, #20
 800e8f0:	fb03 4400 	mla	r4, r3, r0, r4
 800e8f4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800e8f8:	2b07      	cmp	r3, #7
 800e8fa:	d112      	bne.n	800e922 <tcp_read+0x3a>
 800e8fc:	6963      	ldr	r3, [r4, #20]
 800e8fe:	4620      	mov	r0, r4
 800e900:	9301      	str	r3, [sp, #4]
 800e902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e904:	a901      	add	r1, sp, #4
 800e906:	9302      	str	r3, [sp, #8]
 800e908:	2311      	movs	r3, #17
 800e90a:	f88d 300c 	strb.w	r3, [sp, #12]
 800e90e:	f7ff fcf7 	bl	800e300 <_tcp_send_package>
 800e912:	2309      	movs	r3, #9
 800e914:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800e918:	6963      	ldr	r3, [r4, #20]
 800e91a:	3301      	adds	r3, #1
 800e91c:	6163      	str	r3, [r4, #20]
 800e91e:	2000      	movs	r0, #0
 800e920:	e01b      	b.n	800e95a <tcp_read+0x72>
 800e922:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 800e926:	4358      	muls	r0, r3
 800e928:	4a0e      	ldr	r2, [pc, #56]	; (800e964 <tcp_read+0x7c>)
 800e92a:	1817      	adds	r7, r2, r0
 800e92c:	887b      	ldrh	r3, [r7, #2]
 800e92e:	5a15      	ldrh	r5, [r2, r0]
 800e930:	429d      	cmp	r5, r3
 800e932:	d0f4      	beq.n	800e91e <tcp_read+0x36>
 800e934:	f240 55b6 	movw	r5, #1462	; 0x5b6
 800e938:	435d      	muls	r5, r3
 800e93a:	1d06      	adds	r6, r0, #4
 800e93c:	442e      	add	r6, r5
 800e93e:	4416      	add	r6, r2
 800e940:	4428      	add	r0, r5
 800e942:	600e      	str	r6, [r1, #0]
 800e944:	4402      	add	r2, r0
 800e946:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 800e94a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800e94c:	3301      	adds	r3, #1
 800e94e:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	8722      	strh	r2, [r4, #56]	; 0x38
 800e958:	807b      	strh	r3, [r7, #2]
 800e95a:	b005      	add	sp, #20
 800e95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e95e:	bf00      	nop
 800e960:	2000355c 	andcs	r3, r0, ip, asr r5
 800e964:	200029ec 	andcs	r2, r0, ip, ror #19

0800e968 <memcpy.isra.0>:
 800e968:	3801      	subs	r0, #1
 800e96a:	440a      	add	r2, r1
 800e96c:	4291      	cmp	r1, r2
 800e96e:	d100      	bne.n	800e972 <memcpy.isra.0+0xa>
 800e970:	4770      	bx	lr
 800e972:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e976:	f800 3f01 	strb.w	r3, [r0, #1]!
 800e97a:	e7f7      	b.n	800e96c <memcpy.isra.0+0x4>

0800e97c <net_memcpy>:
 800e97c:	ea41 0300 	orr.w	r3, r1, r0
 800e980:	079b      	lsls	r3, r3, #30
 800e982:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e984:	d115      	bne.n	800e9b2 <net_memcpy+0x36>
 800e986:	f022 0303 	bic.w	r3, r2, #3
 800e98a:	1f04      	subs	r4, r0, #4
 800e98c:	0895      	lsrs	r5, r2, #2
 800e98e:	18ce      	adds	r6, r1, r3
 800e990:	42b1      	cmp	r1, r6
 800e992:	d109      	bne.n	800e9a8 <net_memcpy+0x2c>
 800e994:	f06f 0403 	mvn.w	r4, #3
 800e998:	fb04 2205 	mla	r2, r4, r5, r2
 800e99c:	4403      	add	r3, r0
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	440a      	add	r2, r1
 800e9a2:	4291      	cmp	r1, r2
 800e9a4:	d107      	bne.n	800e9b6 <net_memcpy+0x3a>
 800e9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9a8:	f851 7b04 	ldr.w	r7, [r1], #4
 800e9ac:	f844 7f04 	str.w	r7, [r4, #4]!
 800e9b0:	e7ee      	b.n	800e990 <net_memcpy+0x14>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	e7f3      	b.n	800e99e <net_memcpy+0x22>
 800e9b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9be:	e7f0      	b.n	800e9a2 <net_memcpy+0x26>

0800e9c0 <udp_set_ip>:
 800e9c0:	2204      	movs	r2, #4
 800e9c2:	b513      	push	{r0, r1, r4, lr}
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	6803      	ldr	r3, [r0, #0]
 800e9c8:	eb0d 0102 	add.w	r1, sp, r2
 800e9cc:	4808      	ldr	r0, [pc, #32]	; (800e9f0 <udp_set_ip+0x30>)
 800e9ce:	9301      	str	r3, [sp, #4]
 800e9d0:	f7ff ffca 	bl	800e968 <memcpy.isra.0>
 800e9d4:	6862      	ldr	r2, [r4, #4]
 800e9d6:	4b07      	ldr	r3, [pc, #28]	; (800e9f4 <udp_set_ip+0x34>)
 800e9d8:	43d1      	mvns	r1, r2
 800e9da:	6019      	str	r1, [r3, #0]
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	4013      	ands	r3, r2
 800e9e0:	4a05      	ldr	r2, [pc, #20]	; (800e9f8 <udp_set_ip+0x38>)
 800e9e2:	6013      	str	r3, [r2, #0]
 800e9e4:	68a2      	ldr	r2, [r4, #8]
 800e9e6:	4b05      	ldr	r3, [pc, #20]	; (800e9fc <udp_set_ip+0x3c>)
 800e9e8:	601a      	str	r2, [r3, #0]
 800e9ea:	b002      	add	sp, #8
 800e9ec:	bd10      	pop	{r4, pc}
 800e9ee:	bf00      	nop
 800e9f0:	20009876 	andcs	r9, r0, r6, ror r8
 800e9f4:	20003b8c 	andcs	r3, r0, ip, lsl #23
 800e9f8:	20003b94 	mulcs	r0, r4, fp
 800e9fc:	20003b90 	mulcs	r0, r0, fp

0800ea00 <udp_init>:
 800ea00:	b570      	push	{r4, r5, r6, lr}
 800ea02:	2200      	movs	r2, #0
 800ea04:	2508      	movs	r5, #8
 800ea06:	460e      	mov	r6, r1
 800ea08:	4b12      	ldr	r3, [pc, #72]	; (800ea54 <udp_init+0x54>)
 800ea0a:	4913      	ldr	r1, [pc, #76]	; (800ea58 <udp_init+0x58>)
 800ea0c:	3d01      	subs	r5, #1
 800ea0e:	801a      	strh	r2, [r3, #0]
 800ea10:	805a      	strh	r2, [r3, #2]
 800ea12:	f841 2b04 	str.w	r2, [r1], #4
 800ea16:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 800ea1a:	d1f7      	bne.n	800ea0c <udp_init+0xc>
 800ea1c:	2206      	movs	r2, #6
 800ea1e:	4c0f      	ldr	r4, [pc, #60]	; (800ea5c <udp_init+0x5c>)
 800ea20:	4b0f      	ldr	r3, [pc, #60]	; (800ea60 <udp_init+0x60>)
 800ea22:	4601      	mov	r1, r0
 800ea24:	18a0      	adds	r0, r4, r2
 800ea26:	801d      	strh	r5, [r3, #0]
 800ea28:	f7ff ff9e 	bl	800e968 <memcpy.isra.0>
 800ea2c:	2308      	movs	r3, #8
 800ea2e:	7323      	strb	r3, [r4, #12]
 800ea30:	2345      	movs	r3, #69	; 0x45
 800ea32:	73a3      	strb	r3, [r4, #14]
 800ea34:	2340      	movs	r3, #64	; 0x40
 800ea36:	7523      	strb	r3, [r4, #20]
 800ea38:	75a3      	strb	r3, [r4, #22]
 800ea3a:	2311      	movs	r3, #17
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	7365      	strb	r5, [r4, #13]
 800ea40:	73e5      	strb	r5, [r4, #15]
 800ea42:	7565      	strb	r5, [r4, #21]
 800ea44:	75e3      	strb	r3, [r4, #23]
 800ea46:	f7ff ffbb 	bl	800e9c0 <udp_set_ip>
 800ea4a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800ea4e:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 800ea52:	bd70      	pop	{r4, r5, r6, pc}
 800ea54:	20003bbc 			; <UNDEFINED> instruction: 0x20003bbc
 800ea58:	20003b9c 	mulcs	r0, ip, fp
 800ea5c:	2000985c 	andcs	r9, r0, ip, asr r8
 800ea60:	20003b98 	mulcs	r0, r8, fp

0800ea64 <udp_shutdown>:
 800ea64:	4770      	bx	lr
	...

0800ea68 <udp_handle>:
 800ea68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ea6c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800ea6e:	4607      	mov	r7, r0
 800ea70:	ba5b      	rev16	r3, r3
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 800ea78:	2a01      	cmp	r2, #1
 800ea7a:	d904      	bls.n	800ea86 <udp_handle+0x1e>
 800ea7c:	2b7b      	cmp	r3, #123	; 0x7b
 800ea7e:	d002      	beq.n	800ea86 <udp_handle+0x1e>
 800ea80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea84:	d308      	bcc.n	800ea98 <udp_handle+0x30>
 800ea86:	2400      	movs	r4, #0
 800ea88:	4a1f      	ldr	r2, [pc, #124]	; (800eb08 <udp_handle+0xa0>)
 800ea8a:	f852 1b04 	ldr.w	r1, [r2], #4
 800ea8e:	4299      	cmp	r1, r3
 800ea90:	d005      	beq.n	800ea9e <udp_handle+0x36>
 800ea92:	3401      	adds	r4, #1
 800ea94:	2c08      	cmp	r4, #8
 800ea96:	d1f8      	bne.n	800ea8a <udp_handle+0x22>
 800ea98:	b002      	add	sp, #8
 800ea9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea9e:	f640 3394 	movw	r3, #2964	; 0xb94
 800eaa2:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 800eaa4:	435c      	muls	r4, r3
 800eaa6:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800eaaa:	ba76      	rev16	r6, r6
 800eaac:	3e08      	subs	r6, #8
 800eaae:	b2b6      	uxth	r6, r6
 800eab0:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800eab4:	bf28      	it	cs
 800eab6:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 800eaba:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800eb0c <udp_handle+0xa4>
 800eabe:	1d20      	adds	r0, r4, #4
 800eac0:	f838 5004 	ldrh.w	r5, [r8, r4]
 800eac4:	4632      	mov	r2, r6
 800eac6:	435d      	muls	r5, r3
 800eac8:	4428      	add	r0, r5
 800eaca:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800eace:	4440      	add	r0, r8
 800ead0:	f7ff ff4a 	bl	800e968 <memcpy.isra.0>
 800ead4:	2204      	movs	r2, #4
 800ead6:	f107 011a 	add.w	r1, r7, #26
 800eada:	eb0d 0002 	add.w	r0, sp, r2
 800eade:	f7ff ff43 	bl	800e968 <memcpy.isra.0>
 800eae2:	9a01      	ldr	r2, [sp, #4]
 800eae4:	192b      	adds	r3, r5, r4
 800eae6:	4443      	add	r3, r8
 800eae8:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 800eaec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eaee:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 800eaf2:	ba52      	rev16	r2, r2
 800eaf4:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 800eaf8:	f838 3004 	ldrh.w	r3, [r8, r4]
 800eafc:	3301      	adds	r3, #1
 800eafe:	f003 0301 	and.w	r3, r3, #1
 800eb02:	f828 3004 	strh.w	r3, [r8, r4]
 800eb06:	e7c7      	b.n	800ea98 <udp_handle+0x30>
 800eb08:	20003b9c 	mulcs	r0, ip, fp
 800eb0c:	20003bbc 			; <UNDEFINED> instruction: 0x20003bbc

0800eb10 <udp_bind>:
 800eb10:	4a0a      	ldr	r2, [pc, #40]	; (800eb3c <udp_bind+0x2c>)
 800eb12:	4603      	mov	r3, r0
 800eb14:	b510      	push	{r4, lr}
 800eb16:	2000      	movs	r0, #0
 800eb18:	4614      	mov	r4, r2
 800eb1a:	f852 1b04 	ldr.w	r1, [r2], #4
 800eb1e:	4299      	cmp	r1, r3
 800eb20:	d008      	beq.n	800eb34 <udp_bind+0x24>
 800eb22:	b141      	cbz	r1, 800eb36 <udp_bind+0x26>
 800eb24:	3001      	adds	r0, #1
 800eb26:	2808      	cmp	r0, #8
 800eb28:	d1f7      	bne.n	800eb1a <udp_bind+0xa>
 800eb2a:	4805      	ldr	r0, [pc, #20]	; (800eb40 <udp_bind+0x30>)
 800eb2c:	f003 f85e 	bl	8011bec <console_error>
 800eb30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb34:	bd10      	pop	{r4, pc}
 800eb36:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800eb3a:	e7fb      	b.n	800eb34 <udp_bind+0x24>
 800eb3c:	20003b9c 	mulcs	r0, ip, fp
 800eb40:	080157d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, sl, ip, lr}

0800eb44 <udp_unbind>:
 800eb44:	4a0c      	ldr	r2, [pc, #48]	; (800eb78 <udp_unbind+0x34>)
 800eb46:	2300      	movs	r3, #0
 800eb48:	4611      	mov	r1, r2
 800eb4a:	b510      	push	{r4, lr}
 800eb4c:	f852 4b04 	ldr.w	r4, [r2], #4
 800eb50:	4284      	cmp	r4, r0
 800eb52:	d108      	bne.n	800eb66 <udp_unbind+0x22>
 800eb54:	2000      	movs	r0, #0
 800eb56:	f640 3294 	movw	r2, #2964	; 0xb94
 800eb5a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800eb5e:	4353      	muls	r3, r2
 800eb60:	4a06      	ldr	r2, [pc, #24]	; (800eb7c <udp_unbind+0x38>)
 800eb62:	5098      	str	r0, [r3, r2]
 800eb64:	bd10      	pop	{r4, pc}
 800eb66:	3301      	adds	r3, #1
 800eb68:	2b08      	cmp	r3, #8
 800eb6a:	d1ef      	bne.n	800eb4c <udp_unbind+0x8>
 800eb6c:	4804      	ldr	r0, [pc, #16]	; (800eb80 <udp_unbind+0x3c>)
 800eb6e:	f003 f83d 	bl	8011bec <console_error>
 800eb72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb76:	e7f5      	b.n	800eb64 <udp_unbind+0x20>
 800eb78:	20003b9c 	mulcs	r0, ip, fp
 800eb7c:	20003bbc 			; <UNDEFINED> instruction: 0x20003bbc
 800eb80:	080157d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, r9, sl, ip, lr}

0800eb84 <udp_recv>:
 800eb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb88:	4604      	mov	r4, r0
 800eb8a:	4698      	mov	r8, r3
 800eb8c:	f640 3394 	movw	r3, #2964	; 0xb94
 800eb90:	435c      	muls	r4, r3
 800eb92:	4608      	mov	r0, r1
 800eb94:	4915      	ldr	r1, [pc, #84]	; (800ebec <udp_recv+0x68>)
 800eb96:	190f      	adds	r7, r1, r4
 800eb98:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800eb9c:	5b0b      	ldrh	r3, [r1, r4]
 800eb9e:	4563      	cmp	r3, ip
 800eba0:	d021      	beq.n	800ebe6 <udp_recv+0x62>
 800eba2:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800eba6:	fb03 fc0c 	mul.w	ip, r3, ip
 800ebaa:	eb0c 0604 	add.w	r6, ip, r4
 800ebae:	440e      	add	r6, r1
 800ebb0:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 800ebb4:	3404      	adds	r4, #4
 800ebb6:	4295      	cmp	r5, r2
 800ebb8:	bf28      	it	cs
 800ebba:	4615      	movcs	r5, r2
 800ebbc:	4464      	add	r4, ip
 800ebbe:	462a      	mov	r2, r5
 800ebc0:	4421      	add	r1, r4
 800ebc2:	f7ff fedb 	bl	800e97c <net_memcpy>
 800ebc6:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 800ebca:	f8c8 3000 	str.w	r3, [r8]
 800ebce:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 800ebd2:	9b06      	ldr	r3, [sp, #24]
 800ebd4:	801a      	strh	r2, [r3, #0]
 800ebd6:	887b      	ldrh	r3, [r7, #2]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	f003 0301 	and.w	r3, r3, #1
 800ebde:	807b      	strh	r3, [r7, #2]
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe6:	2500      	movs	r5, #0
 800ebe8:	e7fa      	b.n	800ebe0 <udp_recv+0x5c>
 800ebea:	bf00      	nop
 800ebec:	20003bbc 			; <UNDEFINED> instruction: 0x20003bbc

0800ebf0 <udp_recv2>:
 800ebf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebf2:	f640 3594 	movw	r5, #2964	; 0xb94
 800ebf6:	4368      	muls	r0, r5
 800ebf8:	4c0f      	ldr	r4, [pc, #60]	; (800ec38 <udp_recv2+0x48>)
 800ebfa:	1827      	adds	r7, r4, r0
 800ebfc:	887d      	ldrh	r5, [r7, #2]
 800ebfe:	5a26      	ldrh	r6, [r4, r0]
 800ec00:	42ae      	cmp	r6, r5
 800ec02:	d017      	beq.n	800ec34 <udp_recv2+0x44>
 800ec04:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 800ec08:	fb0c f505 	mul.w	r5, ip, r5
 800ec0c:	1d06      	adds	r6, r0, #4
 800ec0e:	442e      	add	r6, r5
 800ec10:	4405      	add	r5, r0
 800ec12:	4426      	add	r6, r4
 800ec14:	442c      	add	r4, r5
 800ec16:	600e      	str	r6, [r1, #0]
 800ec18:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 800ec1c:	6011      	str	r1, [r2, #0]
 800ec1e:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 800ec22:	801a      	strh	r2, [r3, #0]
 800ec24:	887b      	ldrh	r3, [r7, #2]
 800ec26:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 800ec2a:	3301      	adds	r3, #1
 800ec2c:	f003 0301 	and.w	r3, r3, #1
 800ec30:	807b      	strh	r3, [r7, #2]
 800ec32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec34:	2000      	movs	r0, #0
 800ec36:	e7fc      	b.n	800ec32 <udp_recv2+0x42>
 800ec38:	20003bbc 			; <UNDEFINED> instruction: 0x20003bbc

0800ec3c <udp_send>:
 800ec3c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec40:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800ed78 <udp_send+0x13c>
 800ec44:	461c      	mov	r4, r3
 800ec46:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 800ec4a:	4607      	mov	r7, r0
 800ec4c:	4688      	mov	r8, r1
 800ec4e:	4616      	mov	r6, r2
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	f000 808e 	beq.w	800ed72 <udp_send+0x136>
 800ec56:	1c63      	adds	r3, r4, #1
 800ec58:	d144      	bne.n	800ece4 <udp_send+0xa8>
 800ec5a:	4848      	ldr	r0, [pc, #288]	; (800ed7c <udp_send+0x140>)
 800ec5c:	2107      	movs	r1, #7
 800ec5e:	4602      	mov	r2, r0
 800ec60:	23ff      	movs	r3, #255	; 0xff
 800ec62:	e001      	b.n	800ec68 <udp_send+0x2c>
 800ec64:	f800 3b01 	strb.w	r3, [r0], #1
 800ec68:	3901      	subs	r1, #1
 800ec6a:	d1fb      	bne.n	800ec64 <udp_send+0x28>
 800ec6c:	7793      	strb	r3, [r2, #30]
 800ec6e:	77d3      	strb	r3, [r2, #31]
 800ec70:	f882 3020 	strb.w	r3, [r2, #32]
 800ec74:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 800ec78:	2500      	movs	r5, #0
 800ec7a:	f8df a104 	ldr.w	sl, [pc, #260]	; 800ed80 <udp_send+0x144>
 800ec7e:	4c3f      	ldr	r4, [pc, #252]	; (800ed7c <udp_send+0x140>)
 800ec80:	f8ba 3000 	ldrh.w	r3, [sl]
 800ec84:	2114      	movs	r1, #20
 800ec86:	8263      	strh	r3, [r4, #18]
 800ec88:	f106 031c 	add.w	r3, r6, #28
 800ec8c:	ba5b      	rev16	r3, r3
 800ec8e:	f104 000e 	add.w	r0, r4, #14
 800ec92:	8223      	strh	r3, [r4, #16]
 800ec94:	7625      	strb	r5, [r4, #24]
 800ec96:	7665      	strb	r5, [r4, #25]
 800ec98:	f001 fdc4 	bl	8010824 <net_chksum>
 800ec9c:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 800eca0:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800eca4:	ba5b      	rev16	r3, r3
 800eca6:	8463      	strh	r3, [r4, #34]	; 0x22
 800eca8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800ecac:	4632      	mov	r2, r6
 800ecae:	ba5b      	rev16	r3, r3
 800ecb0:	84a3      	strh	r3, [r4, #36]	; 0x24
 800ecb2:	f106 0308 	add.w	r3, r6, #8
 800ecb6:	ba5b      	rev16	r3, r3
 800ecb8:	bf28      	it	cs
 800ecba:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 800ecbe:	4641      	mov	r1, r8
 800ecc0:	8320      	strh	r0, [r4, #24]
 800ecc2:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800ecc6:	84e3      	strh	r3, [r4, #38]	; 0x26
 800ecc8:	f7ff fe58 	bl	800e97c <net_memcpy>
 800eccc:	4620      	mov	r0, r4
 800ecce:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 800ecd2:	f004 f847 	bl	8012d64 <emac_eth_send>
 800ecd6:	f8ba 3000 	ldrh.w	r3, [sl]
 800ecda:	4628      	mov	r0, r5
 800ecdc:	3301      	adds	r3, #1
 800ecde:	f8aa 3000 	strh.w	r3, [sl]
 800ece2:	e037      	b.n	800ed54 <udp_send+0x118>
 800ece4:	4b27      	ldr	r3, [pc, #156]	; (800ed84 <udp_send+0x148>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	43a3      	bics	r3, r4
 800ecea:	d10f      	bne.n	800ed0c <udp_send+0xd0>
 800ecec:	2307      	movs	r3, #7
 800ecee:	21ff      	movs	r1, #255	; 0xff
 800ecf0:	4a22      	ldr	r2, [pc, #136]	; (800ed7c <udp_send+0x140>)
 800ecf2:	e001      	b.n	800ecf8 <udp_send+0xbc>
 800ecf4:	f802 1b01 	strb.w	r1, [r2], #1
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	d1fb      	bne.n	800ecf4 <udp_send+0xb8>
 800ecfc:	2204      	movs	r2, #4
 800ecfe:	4822      	ldr	r0, [pc, #136]	; (800ed88 <udp_send+0x14c>)
 800ed00:	eb0d 0102 	add.w	r1, sp, r2
 800ed04:	9401      	str	r4, [sp, #4]
 800ed06:	f7ff fe2f 	bl	800e968 <memcpy.isra.0>
 800ed0a:	e7b5      	b.n	800ec78 <udp_send+0x3c>
 800ed0c:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 800ed10:	2be0      	cmp	r3, #224	; 0xe0
 800ed12:	d10e      	bne.n	800ed32 <udp_send+0xf6>
 800ed14:	491d      	ldr	r1, [pc, #116]	; (800ed8c <udp_send+0x150>)
 800ed16:	f3c4 2306 	ubfx	r3, r4, #8, #7
 800ed1a:	70cb      	strb	r3, [r1, #3]
 800ed1c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800ed20:	710b      	strb	r3, [r1, #4]
 800ed22:	f3c4 6307 	ubfx	r3, r4, #24, #8
 800ed26:	2206      	movs	r2, #6
 800ed28:	4814      	ldr	r0, [pc, #80]	; (800ed7c <udp_send+0x140>)
 800ed2a:	714b      	strb	r3, [r1, #5]
 800ed2c:	f7ff fe1c 	bl	800e968 <memcpy.isra.0>
 800ed30:	e7e4      	b.n	800ecfc <udp_send+0xc0>
 800ed32:	4b17      	ldr	r3, [pc, #92]	; (800ed90 <udp_send+0x154>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	43a3      	bics	r3, r4
 800ed38:	d00f      	beq.n	800ed5a <udp_send+0x11e>
 800ed3a:	4d16      	ldr	r5, [pc, #88]	; (800ed94 <udp_send+0x158>)
 800ed3c:	490f      	ldr	r1, [pc, #60]	; (800ed7c <udp_send+0x140>)
 800ed3e:	6828      	ldr	r0, [r5, #0]
 800ed40:	f001 f93a 	bl	800ffb8 <arp_cache_lookup>
 800ed44:	682b      	ldr	r3, [r5, #0]
 800ed46:	4298      	cmp	r0, r3
 800ed48:	d0d8      	beq.n	800ecfc <udp_send+0xc0>
 800ed4a:	4813      	ldr	r0, [pc, #76]	; (800ed98 <udp_send+0x15c>)
 800ed4c:	f002 ff4e 	bl	8011bec <console_error>
 800ed50:	f06f 0002 	mvn.w	r0, #2
 800ed54:	b002      	add	sp, #8
 800ed56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	4907      	ldr	r1, [pc, #28]	; (800ed7c <udp_send+0x140>)
 800ed5e:	f001 f92b 	bl	800ffb8 <arp_cache_lookup>
 800ed62:	42a0      	cmp	r0, r4
 800ed64:	d0ca      	beq.n	800ecfc <udp_send+0xc0>
 800ed66:	480d      	ldr	r0, [pc, #52]	; (800ed9c <udp_send+0x160>)
 800ed68:	f002 ff40 	bl	8011bec <console_error>
 800ed6c:	f06f 0001 	mvn.w	r0, #1
 800ed70:	e7f0      	b.n	800ed54 <udp_send+0x118>
 800ed72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed76:	e7ed      	b.n	800ed54 <udp_send+0x118>
 800ed78:	20003b9c 	mulcs	r0, ip, fp
 800ed7c:	2000985c 	andcs	r9, r0, ip, asr r8
 800ed80:	20003b98 	mulcs	r0, r8, fp
 800ed84:	20003b8c 	andcs	r3, r0, ip, lsl #23
 800ed88:	2000987a 	andcs	r9, r0, sl, ror r8
 800ed8c:	20000000 	andcs	r0, r0, r0
 800ed90:	20003b94 	mulcs	r0, r4, fp
 800ed94:	20003b90 	mulcs	r0, r0, fp
 800ed98:	080157de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip, lr}
 800ed9c:	08015804 	stmdaeq	r1, {r2, fp, ip, lr}

0800eda0 <strlen>:
 800eda0:	4603      	mov	r3, r0
 800eda2:	461a      	mov	r2, r3
 800eda4:	7811      	ldrb	r1, [r2, #0]
 800eda6:	3301      	adds	r3, #1
 800eda8:	2900      	cmp	r1, #0
 800edaa:	d1fa      	bne.n	800eda2 <strlen+0x2>
 800edac:	1a10      	subs	r0, r2, r0
 800edae:	4770      	bx	lr

0800edb0 <strcmp>:
 800edb0:	1e43      	subs	r3, r0, #1
 800edb2:	3901      	subs	r1, #1
 800edb4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800edb8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800edbc:	4290      	cmp	r0, r2
 800edbe:	d102      	bne.n	800edc6 <strcmp+0x16>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d1f7      	bne.n	800edb4 <strcmp+0x4>
 800edc4:	4770      	bx	lr
 800edc6:	1a80      	subs	r0, r0, r2
 800edc8:	4770      	bx	lr

0800edca <strcpy.isra.0>:
 800edca:	3801      	subs	r0, #1
 800edcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edd0:	f800 3f01 	strb.w	r3, [r0, #1]!
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d1f9      	bne.n	800edcc <strcpy.isra.0+0x2>
 800edd8:	4770      	bx	lr

0800edda <strcat.isra.0>:
 800edda:	b538      	push	{r3, r4, r5, lr}
 800eddc:	4604      	mov	r4, r0
 800edde:	460d      	mov	r5, r1
 800ede0:	f7ff ffde 	bl	800eda0 <strlen>
 800ede4:	4629      	mov	r1, r5
 800ede6:	4420      	add	r0, r4
 800ede8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edec:	f7ff bfed 	b.w	800edca <strcpy.isra.0>

0800edf0 <MDNS::MDNS()>:
 800edf0:	b513      	push	{r0, r1, r4, lr}
 800edf2:	4604      	mov	r4, r0
 800edf4:	a901      	add	r1, sp, #4
 800edf6:	4804      	ldr	r0, [pc, #16]	; (800ee08 <MDNS::MDNS()+0x18>)
 800edf8:	f003 f85e 	bl	8011eb8 <inet_aton>
 800edfc:	4620      	mov	r0, r4
 800edfe:	4b03      	ldr	r3, [pc, #12]	; (800ee0c <MDNS::MDNS()+0x1c>)
 800ee00:	9a01      	ldr	r2, [sp, #4]
 800ee02:	601a      	str	r2, [r3, #0]
 800ee04:	b002      	add	sp, #8
 800ee06:	bd10      	pop	{r4, pc}
 800ee08:	08015824 	stmdaeq	r1, {r2, r5, fp, ip, lr}
 800ee0c:	20009e50 	andcs	r9, r0, r0, asr lr

0800ee10 <MDNS::SetName(char const*)>:
 800ee10:	b538      	push	{r3, r4, r5, lr}
 800ee12:	4d0b      	ldr	r5, [pc, #44]	; (800ee40 <MDNS::SetName(char const*)+0x30>)
 800ee14:	460c      	mov	r4, r1
 800ee16:	6828      	ldr	r0, [r5, #0]
 800ee18:	b108      	cbz	r0, 800ee1e <MDNS::SetName(char const*)+0xe>
 800ee1a:	f003 f847 	bl	8011eac <operator delete[](void*)>
 800ee1e:	4620      	mov	r0, r4
 800ee20:	f7ff ffbe 	bl	800eda0 <strlen>
 800ee24:	3007      	adds	r0, #7
 800ee26:	f003 f845 	bl	8011eb4 <operator new[](unsigned int)>
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	6028      	str	r0, [r5, #0]
 800ee2e:	f7ff ffcc 	bl	800edca <strcpy.isra.0>
 800ee32:	6828      	ldr	r0, [r5, #0]
 800ee34:	4903      	ldr	r1, [pc, #12]	; (800ee44 <MDNS::SetName(char const*)+0x34>)
 800ee36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee3a:	f7ff bfce 	b.w	800edda <strcat.isra.0>
 800ee3e:	bf00      	nop
 800ee40:	2000a280 	andcs	sl, r0, r0, lsl #5
 800ee44:	08015834 	stmdaeq	r1, {r2, r4, r5, fp, ip, lr}

0800ee48 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 800ee48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee4c:	f04f 0e00 	mov.w	lr, #0
 800ee50:	262e      	movs	r6, #46	; 0x2e
 800ee52:	4675      	mov	r5, lr
 800ee54:	4694      	mov	ip, r2
 800ee56:	4f1d      	ldr	r7, [pc, #116]	; (800eecc <MDNS::DecodeDNSNameNotation(char const*, char*)+0x84>)
 800ee58:	4a1d      	ldr	r2, [pc, #116]	; (800eed0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x88>)
 800ee5a:	780b      	ldrb	r3, [r1, #0]
 800ee5c:	1c68      	adds	r0, r5, #1
 800ee5e:	b383      	cbz	r3, 800eec2 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7a>
 800ee60:	2b3f      	cmp	r3, #63	; 0x3f
 800ee62:	d91d      	bls.n	800eea0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x58>
 800ee64:	f1be 0f00 	cmp.w	lr, #0
 800ee68:	bf08      	it	eq
 800ee6a:	4605      	moveq	r5, r0
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	7849      	ldrb	r1, [r1, #1]
 800ee70:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 800ee74:	430b      	orrs	r3, r1
 800ee76:	6811      	ldr	r1, [r2, #0]
 800ee78:	5ccc      	ldrb	r4, [r1, r3]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	440b      	add	r3, r1
 800ee7e:	42a0      	cmp	r0, r4
 800ee80:	5c19      	ldrb	r1, [r3, r0]
 800ee82:	d309      	bcc.n	800ee98 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x50>
 800ee84:	f04f 0e01 	mov.w	lr, #1
 800ee88:	1919      	adds	r1, r3, r4
 800ee8a:	4464      	add	r4, ip
 800ee8c:	780b      	ldrb	r3, [r1, #0]
 800ee8e:	b10b      	cbz	r3, 800ee94 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4c>
 800ee90:	f804 6b01 	strb.w	r6, [r4], #1
 800ee94:	46a4      	mov	ip, r4
 800ee96:	e7e0      	b.n	800ee5a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 800ee98:	f80c 1000 	strb.w	r1, [ip, r0]
 800ee9c:	3001      	adds	r0, #1
 800ee9e:	e7ee      	b.n	800ee7e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x36>
 800eea0:	4688      	mov	r8, r1
 800eea2:	eb0c 0403 	add.w	r4, ip, r3
 800eea6:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 800eeaa:	f80c 9b01 	strb.w	r9, [ip], #1
 800eeae:	4564      	cmp	r4, ip
 800eeb0:	d1f9      	bne.n	800eea6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5e>
 800eeb2:	f103 0c01 	add.w	ip, r3, #1
 800eeb6:	4461      	add	r1, ip
 800eeb8:	f1be 0f00 	cmp.w	lr, #0
 800eebc:	d1e6      	bne.n	800ee8c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 800eebe:	18c5      	adds	r5, r0, r3
 800eec0:	e7e4      	b.n	800ee8c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 800eec2:	f88c 3000 	strb.w	r3, [ip]
 800eec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eeca:	bf00      	nop
 800eecc:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 800eed0:	2000a284 	andcs	sl, r0, r4, lsl #5

0800eed4 <MDNS::FindFirstDotFromRight(char const*) const>:
 800eed4:	b510      	push	{r4, lr}
 800eed6:	4608      	mov	r0, r1
 800eed8:	460c      	mov	r4, r1
 800eeda:	f7ff ff61 	bl	800eda0 <strlen>
 800eede:	4420      	add	r0, r4
 800eee0:	42a0      	cmp	r0, r4
 800eee2:	d903      	bls.n	800eeec <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 800eee4:	f810 3901 	ldrb.w	r3, [r0], #-1
 800eee8:	2b2e      	cmp	r3, #46	; 0x2e
 800eeea:	d1f9      	bne.n	800eee0 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 800eeec:	3001      	adds	r0, #1
 800eeee:	bd10      	pop	{r4, pc}

0800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>:
 800eef0:	4610      	mov	r0, r2
 800eef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eef4:	460f      	mov	r7, r1
 800eef6:	1c44      	adds	r4, r0, #1
 800eef8:	463d      	mov	r5, r7
 800eefa:	f817 6b01 	ldrb.w	r6, [r7], #1
 800eefe:	b126      	cbz	r6, 800ef0a <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 800ef00:	2e2e      	cmp	r6, #46	; 0x2e
 800ef02:	d002      	beq.n	800ef0a <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 800ef04:	f804 6b01 	strb.w	r6, [r4], #1
 800ef08:	e7f6      	b.n	800eef8 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 800ef0a:	1a69      	subs	r1, r5, r1
 800ef0c:	7001      	strb	r1, [r0, #0]
 800ef0e:	7829      	ldrb	r1, [r5, #0]
 800ef10:	b921      	cbnz	r1, 800ef1c <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 800ef12:	b10b      	cbz	r3, 800ef18 <MDNS::WriteDnsName(char const*, char*, bool)+0x28>
 800ef14:	f804 1b01 	strb.w	r1, [r4], #1
 800ef18:	1aa0      	subs	r0, r4, r2
 800ef1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	1c69      	adds	r1, r5, #1
 800ef20:	e7e8      	b.n	800eef4 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

0800ef24 <MDNS::CreateAnswerLocalIpAddress()>:
 800ef24:	2384      	movs	r3, #132	; 0x84
 800ef26:	b510      	push	{r4, lr}
 800ef28:	4c0f      	ldr	r4, [pc, #60]	; (800ef68 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 800ef2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ef2e:	80e3      	strh	r3, [r4, #6]
 800ef30:	2300      	movs	r3, #0
 800ef32:	490e      	ldr	r1, [pc, #56]	; (800ef6c <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 800ef34:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ef38:	6809      	ldr	r1, [r1, #0]
 800ef3a:	f104 0210 	add.w	r2, r4, #16
 800ef3e:	2301      	movs	r3, #1
 800ef40:	f7ff ffd6 	bl	800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ef44:	490a      	ldr	r1, [pc, #40]	; (800ef70 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 800ef46:	1813      	adds	r3, r2, r0
 800ef48:	5011      	str	r1, [r2, r0]
 800ef4a:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800ef4e:	605a      	str	r2, [r3, #4]
 800ef50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ef54:	811a      	strh	r2, [r3, #8]
 800ef56:	4a07      	ldr	r2, [pc, #28]	; (800ef74 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 800ef58:	6812      	ldr	r2, [r2, #0]
 800ef5a:	6912      	ldr	r2, [r2, #16]
 800ef5c:	f8c3 200a 	str.w	r2, [r3, #10]
 800ef60:	1b1b      	subs	r3, r3, r4
 800ef62:	330a      	adds	r3, #10
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	bd10      	pop	{r4, pc}
 800ef68:	20009e54 	andcs	r9, r0, r4, asr lr
 800ef6c:	2000a280 	andcs	sl, r0, r0, lsl #5
 800ef70:	01800100 	orreq	r0, r0, r0, lsl #2
 800ef74:	2000a288 	andcs	sl, r0, r8, lsl #5

0800ef78 <MDNS::Start()>:
 800ef78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef7a:	4c1e      	ldr	r4, [pc, #120]	; (800eff4 <MDNS::Start()+0x7c>)
 800ef7c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800ef80:	4605      	mov	r5, r0
 800ef82:	6820      	ldr	r0, [r4, #0]
 800ef84:	f000 fb2a 	bl	800f5dc <Network::Begin(unsigned short)>
 800ef88:	4e1b      	ldr	r6, [pc, #108]	; (800eff8 <MDNS::Start()+0x80>)
 800ef8a:	4f1c      	ldr	r7, [pc, #112]	; (800effc <MDNS::Start()+0x84>)
 800ef8c:	4601      	mov	r1, r0
 800ef8e:	6030      	str	r0, [r6, #0]
 800ef90:	683a      	ldr	r2, [r7, #0]
 800ef92:	6820      	ldr	r0, [r4, #0]
 800ef94:	f000 fb33 	bl	800f5fe <Network::JoinGroup(int, unsigned int)>
 800ef98:	4b19      	ldr	r3, [pc, #100]	; (800f000 <MDNS::Start()+0x88>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	b923      	cbnz	r3, 800efa8 <MDNS::Start()+0x30>
 800ef9e:	6821      	ldr	r1, [r4, #0]
 800efa0:	4628      	mov	r0, r5
 800efa2:	311c      	adds	r1, #28
 800efa4:	f7ff ff34 	bl	800ee10 <MDNS::SetName(char const*)>
 800efa8:	4628      	mov	r0, r5
 800efaa:	f7ff ffbb 	bl	800ef24 <MDNS::CreateAnswerLocalIpAddress()>
 800efae:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800efb2:	4914      	ldr	r1, [pc, #80]	; (800f004 <MDNS::Start()+0x8c>)
 800efb4:	7830      	ldrb	r0, [r6, #0]
 800efb6:	f851 2b04 	ldr.w	r2, [r1], #4
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	b292      	uxth	r2, r2
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	f7ff fe3c 	bl	800ec3c <udp_send>
 800efc4:	223f      	movs	r2, #63	; 0x3f
 800efc6:	6820      	ldr	r0, [r4, #0]
 800efc8:	4c0f      	ldr	r4, [pc, #60]	; (800f008 <MDNS::Start()+0x90>)
 800efca:	f100 035c 	add.w	r3, r0, #92	; 0x5c
 800efce:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800efd2:	b929      	cbnz	r1, 800efe0 <MDNS::Start()+0x68>
 800efd4:	441a      	add	r2, r3
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d006      	beq.n	800efe8 <MDNS::Start()+0x70>
 800efda:	f803 1b01 	strb.w	r1, [r3], #1
 800efde:	e7fa      	b.n	800efd6 <MDNS::Start()+0x5e>
 800efe0:	3a01      	subs	r2, #1
 800efe2:	f803 1b01 	strb.w	r1, [r3], #1
 800efe6:	d1f2      	bne.n	800efce <MDNS::Start()+0x56>
 800efe8:	2300      	movs	r3, #0
 800efea:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 800efee:	b003      	add	sp, #12
 800eff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eff2:	bf00      	nop
 800eff4:	2000a288 	andcs	sl, r0, r8, lsl #5
 800eff8:	20000008 	andcs	r0, r0, r8
 800effc:	20009e50 	andcs	r9, r0, r0, asr lr
 800f000:	2000a280 	andcs	sl, r0, r0, lsl #5
 800f004:	20009e54 	andcs	r9, r0, r4, asr lr
 800f008:	08015834 	stmdaeq	r1, {r2, r4, r5, fp, ip, lr}

0800f00c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 800f00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f010:	4c1b      	ldr	r4, [pc, #108]	; (800f080 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 800f012:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 800f016:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 800f01a:	2300      	movs	r3, #0
 800f01c:	f854 100c 	ldr.w	r1, [r4, ip]
 800f020:	4607      	mov	r7, r0
 800f022:	f7ff ff65 	bl	800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f026:	2301      	movs	r3, #1
 800f028:	7bac      	ldrb	r4, [r5, #14]
 800f02a:	4616      	mov	r6, r2
 800f02c:	4915      	ldr	r1, [pc, #84]	; (800f084 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 800f02e:	4402      	add	r2, r0
 800f030:	4815      	ldr	r0, [pc, #84]	; (800f088 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 800f032:	429c      	cmp	r4, r3
 800f034:	bf18      	it	ne
 800f036:	4601      	movne	r1, r0
 800f038:	4638      	mov	r0, r7
 800f03a:	f7ff ff59 	bl	800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f03e:	4b13      	ldr	r3, [pc, #76]	; (800f08c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 800f040:	1814      	adds	r4, r2, r0
 800f042:	5013      	str	r3, [r2, r0]
 800f044:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f048:	6063      	str	r3, [r4, #4]
 800f04a:	4b11      	ldr	r3, [pc, #68]	; (800f090 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 800f04c:	f8d3 8000 	ldr.w	r8, [r3]
 800f050:	4640      	mov	r0, r8
 800f052:	f7ff fea5 	bl	800eda0 <strlen>
 800f056:	f100 0308 	add.w	r3, r0, #8
 800f05a:	ba5b      	rev16	r3, r3
 800f05c:	8123      	strh	r3, [r4, #8]
 800f05e:	2300      	movs	r3, #0
 800f060:	f8c4 300a 	str.w	r3, [r4, #10]
 800f064:	89ab      	ldrh	r3, [r5, #12]
 800f066:	f104 0210 	add.w	r2, r4, #16
 800f06a:	ba5b      	rev16	r3, r3
 800f06c:	81e3      	strh	r3, [r4, #14]
 800f06e:	4641      	mov	r1, r8
 800f070:	2301      	movs	r3, #1
 800f072:	4638      	mov	r0, r7
 800f074:	f7ff ff3c 	bl	800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f078:	4410      	add	r0, r2
 800f07a:	1b80      	subs	r0, r0, r6
 800f07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f080:	2000a058 	andcs	sl, r0, r8, asr r0
 800f084:	08015830 	stmdaeq	r1, {r4, r5, fp, ip, lr}
 800f088:	0801584d 	stmdaeq	r1, {r0, r2, r3, r6, fp, ip, lr}
 800f08c:	01802100 	orreq	r2, r0, r0, lsl #2
 800f090:	2000a280 	andcs	sl, r0, r0, lsl #5

0800f094 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 800f094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f098:	4e19      	ldr	r6, [pc, #100]	; (800f100 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 800f09a:	010f      	lsls	r7, r1, #4
 800f09c:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	59f1      	ldr	r1, [r6, r7]
 800f0a4:	4604      	mov	r4, r0
 800f0a6:	f7ff ff23 	bl	800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	7bae      	ldrb	r6, [r5, #14]
 800f0ae:	4690      	mov	r8, r2
 800f0b0:	4914      	ldr	r1, [pc, #80]	; (800f104 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 800f0b2:	4402      	add	r2, r0
 800f0b4:	4814      	ldr	r0, [pc, #80]	; (800f108 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 800f0b6:	429e      	cmp	r6, r3
 800f0b8:	bf18      	it	ne
 800f0ba:	4601      	movne	r1, r0
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f7ff ff17 	bl	800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f0c2:	4b12      	ldr	r3, [pc, #72]	; (800f10c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 800f0c4:	1816      	adds	r6, r2, r0
 800f0c6:	5013      	str	r3, [r2, r0]
 800f0c8:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f0cc:	68a8      	ldr	r0, [r5, #8]
 800f0ce:	6073      	str	r3, [r6, #4]
 800f0d0:	f106 040b 	add.w	r4, r6, #11
 800f0d4:	b938      	cbnz	r0, 800f0e6 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 800f0d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f0da:	72b0      	strb	r0, [r6, #10]
 800f0dc:	8133      	strh	r3, [r6, #8]
 800f0de:	eba4 0008 	sub.w	r0, r4, r8
 800f0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e6:	f7ff fe5b 	bl	800eda0 <strlen>
 800f0ea:	4607      	mov	r7, r0
 800f0ec:	1c43      	adds	r3, r0, #1
 800f0ee:	72b0      	strb	r0, [r6, #10]
 800f0f0:	ba5b      	rev16	r3, r3
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	68a9      	ldr	r1, [r5, #8]
 800f0f6:	8133      	strh	r3, [r6, #8]
 800f0f8:	f7ff fe67 	bl	800edca <strcpy.isra.0>
 800f0fc:	443c      	add	r4, r7
 800f0fe:	e7ee      	b.n	800f0de <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 800f100:	2000a058 	andcs	sl, r0, r8, asr r0
 800f104:	08015830 	stmdaeq	r1, {r4, r5, fp, ip, lr}
 800f108:	0801584d 	stmdaeq	r1, {r0, r2, r3, r6, fp, ip, lr}
 800f10c:	01801000 	orreq	r1, r0, r0

0800f110 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 800f110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f114:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800f178 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 800f118:	ea4f 1901 	mov.w	r9, r1, lsl #4
 800f11c:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 800f120:	6869      	ldr	r1, [r5, #4]
 800f122:	2301      	movs	r3, #1
 800f124:	4607      	mov	r7, r0
 800f126:	f7ff fee3 	bl	800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f12a:	4b14      	ldr	r3, [pc, #80]	; (800f17c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 800f12c:	f858 8009 	ldr.w	r8, [r8, r9]
 800f130:	5013      	str	r3, [r2, r0]
 800f132:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f136:	1816      	adds	r6, r2, r0
 800f138:	6073      	str	r3, [r6, #4]
 800f13a:	4640      	mov	r0, r8
 800f13c:	4614      	mov	r4, r2
 800f13e:	f7ff fe2f 	bl	800eda0 <strlen>
 800f142:	f100 030d 	add.w	r3, r0, #13
 800f146:	ba5b      	rev16	r3, r3
 800f148:	4641      	mov	r1, r8
 800f14a:	8133      	strh	r3, [r6, #8]
 800f14c:	f106 020a 	add.w	r2, r6, #10
 800f150:	2300      	movs	r3, #0
 800f152:	4638      	mov	r0, r7
 800f154:	f7ff fecc 	bl	800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f158:	2301      	movs	r3, #1
 800f15a:	4402      	add	r2, r0
 800f15c:	7bad      	ldrb	r5, [r5, #14]
 800f15e:	4808      	ldr	r0, [pc, #32]	; (800f180 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 800f160:	4908      	ldr	r1, [pc, #32]	; (800f184 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 800f162:	429d      	cmp	r5, r3
 800f164:	bf18      	it	ne
 800f166:	4601      	movne	r1, r0
 800f168:	4638      	mov	r0, r7
 800f16a:	f7ff fec1 	bl	800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f16e:	4410      	add	r0, r2
 800f170:	1b00      	subs	r0, r0, r4
 800f172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f176:	bf00      	nop
 800f178:	2000a058 	andcs	sl, r0, r8, asr r0
 800f17c:	01000c00 	tsteq	r0, r0, lsl #24
 800f180:	0801584d 	stmdaeq	r1, {r0, r2, r3, r6, fp, ip, lr}
 800f184:	08015830 	stmdaeq	r1, {r4, r5, fp, ip, lr}

0800f188 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 800f188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18a:	460f      	mov	r7, r1
 800f18c:	2301      	movs	r3, #1
 800f18e:	490f      	ldr	r1, [pc, #60]	; (800f1cc <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 800f190:	4606      	mov	r6, r0
 800f192:	f7ff fead 	bl	800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f196:	4b0e      	ldr	r3, [pc, #56]	; (800f1d0 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 800f198:	490e      	ldr	r1, [pc, #56]	; (800f1d4 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 800f19a:	5013      	str	r3, [r2, r0]
 800f19c:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f1a0:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800f1a4:	684f      	ldr	r7, [r1, #4]
 800f1a6:	1815      	adds	r5, r2, r0
 800f1a8:	606b      	str	r3, [r5, #4]
 800f1aa:	4638      	mov	r0, r7
 800f1ac:	4614      	mov	r4, r2
 800f1ae:	f7ff fdf7 	bl	800eda0 <strlen>
 800f1b2:	1c83      	adds	r3, r0, #2
 800f1b4:	ba5b      	rev16	r3, r3
 800f1b6:	812b      	strh	r3, [r5, #8]
 800f1b8:	f105 020a 	add.w	r2, r5, #10
 800f1bc:	2301      	movs	r3, #1
 800f1be:	4639      	mov	r1, r7
 800f1c0:	4630      	mov	r0, r6
 800f1c2:	f7ff fe95 	bl	800eef0 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f1c6:	4410      	add	r0, r2
 800f1c8:	1b00      	subs	r0, r0, r4
 800f1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1cc:	0801583b 	stmdaeq	r1, {r0, r1, r3, r4, r5, fp, ip, lr}
 800f1d0:	01000c00 	tsteq	r0, r0, lsl #24
 800f1d4:	2000a058 	andcs	sl, r0, r8, asr r0

0800f1d8 <MDNS::CreateMDNSMessage(unsigned int)>:
 800f1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1da:	2384      	movs	r3, #132	; 0x84
 800f1dc:	4d19      	ldr	r5, [pc, #100]	; (800f244 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 800f1de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f1e2:	80eb      	strh	r3, [r5, #6]
 800f1e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1e8:	f105 0410 	add.w	r4, r5, #16
 800f1ec:	e9c5 2302 	strd	r2, r3, [r5, #8]
 800f1f0:	4622      	mov	r2, r4
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	460f      	mov	r7, r1
 800f1f6:	f7ff ff09 	bl	800f00c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 800f1fa:	4404      	add	r4, r0
 800f1fc:	4622      	mov	r2, r4
 800f1fe:	4639      	mov	r1, r7
 800f200:	4630      	mov	r0, r6
 800f202:	f7ff ff47 	bl	800f094 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 800f206:	4404      	add	r4, r0
 800f208:	4622      	mov	r2, r4
 800f20a:	4639      	mov	r1, r7
 800f20c:	4630      	mov	r0, r6
 800f20e:	f7ff ffbb 	bl	800f188 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 800f212:	4404      	add	r4, r0
 800f214:	4622      	mov	r2, r4
 800f216:	4639      	mov	r1, r7
 800f218:	4630      	mov	r0, r6
 800f21a:	f7ff ff79 	bl	800f110 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 800f21e:	4b0a      	ldr	r3, [pc, #40]	; (800f248 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 800f220:	4404      	add	r4, r0
 800f222:	f853 2b10 	ldr.w	r2, [r3], #16
 800f226:	1e60      	subs	r0, r4, #1
 800f228:	3a0c      	subs	r2, #12
 800f22a:	4611      	mov	r1, r2
 800f22c:	3901      	subs	r1, #1
 800f22e:	d304      	bcc.n	800f23a <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 800f230:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f234:	f800 6f01 	strb.w	r6, [r0, #1]!
 800f238:	e7f8      	b.n	800f22c <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 800f23a:	4414      	add	r4, r2
 800f23c:	4a03      	ldr	r2, [pc, #12]	; (800f24c <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 800f23e:	1aa4      	subs	r4, r4, r2
 800f240:	602c      	str	r4, [r5, #0]
 800f242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f244:	2000a07c 	andcs	sl, r0, ip, ror r0
 800f248:	20009e54 	andcs	r9, r0, r4, asr lr
 800f24c:	2000a080 	andcs	sl, r0, r0, lsl #1

0800f250 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 800f250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f254:	4d3f      	ldr	r5, [pc, #252]	; (800f354 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x104>)
 800f256:	b085      	sub	sp, #20
 800f258:	682c      	ldr	r4, [r5, #0]
 800f25a:	4680      	mov	r8, r0
 800f25c:	460f      	mov	r7, r1
 800f25e:	4616      	mov	r6, r2
 800f260:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 800f264:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800f268:	b11c      	cbz	r4, 800f272 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 800f26a:	692a      	ldr	r2, [r5, #16]
 800f26c:	2a00      	cmp	r2, #0
 800f26e:	d16d      	bne.n	800f34c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfc>
 800f270:	2401      	movs	r4, #1
 800f272:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800f276:	ea4f 1904 	mov.w	r9, r4, lsl #4
 800f27a:	8193      	strh	r3, [r2, #12]
 800f27c:	f882 b00e 	strb.w	fp, [r2, #14]
 800f280:	2f00      	cmp	r7, #0
 800f282:	d153      	bne.n	800f32c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xdc>
 800f284:	4630      	mov	r0, r6
 800f286:	f7ff fd8b 	bl	800eda0 <strlen>
 800f28a:	4f33      	ldr	r7, [pc, #204]	; (800f358 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	331c      	adds	r3, #28
 800f290:	4418      	add	r0, r3
 800f292:	f7ff fd85 	bl	800eda0 <strlen>
 800f296:	3001      	adds	r0, #1
 800f298:	f002 fe0c 	bl	8011eb4 <operator new[](unsigned int)>
 800f29c:	6839      	ldr	r1, [r7, #0]
 800f29e:	f845 0009 	str.w	r0, [r5, r9]
 800f2a2:	311c      	adds	r1, #28
 800f2a4:	f7ff fd91 	bl	800edca <strcpy.isra.0>
 800f2a8:	f855 0009 	ldr.w	r0, [r5, r9]
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	f7ff fd94 	bl	800edda <strcat.isra.0>
 800f2b2:	4631      	mov	r1, r6
 800f2b4:	4640      	mov	r0, r8
 800f2b6:	f7ff fe0d 	bl	800eed4 <MDNS::FindFirstDotFromRight(char const*) const>
 800f2ba:	eb05 0709 	add.w	r7, r5, r9
 800f2be:	4605      	mov	r5, r0
 800f2c0:	f7ff fd6e 	bl	800eda0 <strlen>
 800f2c4:	300d      	adds	r0, #13
 800f2c6:	f002 fdf5 	bl	8011eb4 <operator new[](unsigned int)>
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	6078      	str	r0, [r7, #4]
 800f2ce:	f7ff fd7c 	bl	800edca <strcpy.isra.0>
 800f2d2:	4922      	ldr	r1, [pc, #136]	; (800f35c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7ff fd80 	bl	800edda <strcat.isra.0>
 800f2da:	4921      	ldr	r1, [pc, #132]	; (800f360 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 800f2dc:	4b21      	ldr	r3, [pc, #132]	; (800f364 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f1bb 0f01 	cmp.w	fp, #1
 800f2e4:	bf18      	it	ne
 800f2e6:	4619      	movne	r1, r3
 800f2e8:	f7ff fd77 	bl	800edda <strcat.isra.0>
 800f2ec:	f1ba 0f00 	cmp.w	sl, #0
 800f2f0:	d009      	beq.n	800f306 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xb6>
 800f2f2:	4650      	mov	r0, sl
 800f2f4:	f7ff fd54 	bl	800eda0 <strlen>
 800f2f8:	3001      	adds	r0, #1
 800f2fa:	f002 fddb 	bl	8011eb4 <operator new[](unsigned int)>
 800f2fe:	4651      	mov	r1, sl
 800f300:	60b8      	str	r0, [r7, #8]
 800f302:	f7ff fd62 	bl	800edca <strcpy.isra.0>
 800f306:	4621      	mov	r1, r4
 800f308:	4640      	mov	r0, r8
 800f30a:	f7ff ff65 	bl	800f1d8 <MDNS::CreateMDNSMessage(unsigned int)>
 800f30e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f312:	4915      	ldr	r1, [pc, #84]	; (800f368 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 800f314:	4815      	ldr	r0, [pc, #84]	; (800f36c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 800f316:	f851 2b04 	ldr.w	r2, [r1], #4
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	4b14      	ldr	r3, [pc, #80]	; (800f370 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 800f31e:	7800      	ldrb	r0, [r0, #0]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	b292      	uxth	r2, r2
 800f324:	f7ff fc8a 	bl	800ec3c <udp_send>
 800f328:	2001      	movs	r0, #1
 800f32a:	e010      	b.n	800f34e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 800f32c:	4638      	mov	r0, r7
 800f32e:	f7ff fd37 	bl	800eda0 <strlen>
 800f332:	9003      	str	r0, [sp, #12]
 800f334:	4630      	mov	r0, r6
 800f336:	f7ff fd33 	bl	800eda0 <strlen>
 800f33a:	9b03      	ldr	r3, [sp, #12]
 800f33c:	4418      	add	r0, r3
 800f33e:	3001      	adds	r0, #1
 800f340:	f002 fdb8 	bl	8011eb4 <operator new[](unsigned int)>
 800f344:	4639      	mov	r1, r7
 800f346:	f845 0009 	str.w	r0, [r5, r9]
 800f34a:	e7ab      	b.n	800f2a4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x54>
 800f34c:	2000      	movs	r0, #0
 800f34e:	b005      	add	sp, #20
 800f350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f354:	2000a058 	andcs	sl, r0, r8, asr r0
 800f358:	2000a288 	andcs	sl, r0, r8, lsl #5
 800f35c:	080148d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, fp, lr}
 800f360:	08015830 	stmdaeq	r1, {r4, r5, fp, ip, lr}
 800f364:	0801584d 	stmdaeq	r1, {r0, r2, r3, r6, fp, ip, lr}
 800f368:	2000a07c 	andcs	sl, r0, ip, ror r0
 800f36c:	20000008 	andcs	r0, r0, r8
 800f370:	20009e50 	andcs	r9, r0, r0, asr lr

0800f374 <MDNS::HandleRequest(unsigned short)>:
 800f374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f378:	4605      	mov	r5, r0
 800f37a:	2700      	movs	r7, #0
 800f37c:	f04f 080c 	mov.w	r8, #12
 800f380:	b0c5      	sub	sp, #276	; 0x114
 800f382:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f448 <MDNS::HandleRequest(unsigned short)+0xd4>
 800f386:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 800f44c <MDNS::HandleRequest(unsigned short)+0xd8>
 800f38a:	9103      	str	r1, [sp, #12]
 800f38c:	9b03      	ldr	r3, [sp, #12]
 800f38e:	42bb      	cmp	r3, r7
 800f390:	d956      	bls.n	800f440 <MDNS::HandleRequest(unsigned short)+0xcc>
 800f392:	f8da 1000 	ldr.w	r1, [sl]
 800f396:	aa04      	add	r2, sp, #16
 800f398:	4441      	add	r1, r8
 800f39a:	4628      	mov	r0, r5
 800f39c:	f7ff fd54 	bl	800ee48 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 800f3a0:	f8da 2000 	ldr.w	r2, [sl]
 800f3a4:	4440      	add	r0, r8
 800f3a6:	1813      	adds	r3, r2, r0
 800f3a8:	885b      	ldrh	r3, [r3, #2]
 800f3aa:	f100 0804 	add.w	r8, r0, #4
 800f3ae:	ba5b      	rev16	r3, r3
 800f3b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d13e      	bne.n	800f436 <MDNS::HandleRequest(unsigned short)+0xc2>
 800f3b8:	5a14      	ldrh	r4, [r2, r0]
 800f3ba:	4b25      	ldr	r3, [pc, #148]	; (800f450 <MDNS::HandleRequest(unsigned short)+0xdc>)
 800f3bc:	ba64      	rev16	r4, r4
 800f3be:	6818      	ldr	r0, [r3, #0]
 800f3c0:	a904      	add	r1, sp, #16
 800f3c2:	b2a4      	uxth	r4, r4
 800f3c4:	f7ff fcf4 	bl	800edb0 <strcmp>
 800f3c8:	b970      	cbnz	r0, 800f3e8 <MDNS::HandleRequest(unsigned short)+0x74>
 800f3ca:	2c01      	cmp	r4, #1
 800f3cc:	d10c      	bne.n	800f3e8 <MDNS::HandleRequest(unsigned short)+0x74>
 800f3ce:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f3d2:	4920      	ldr	r1, [pc, #128]	; (800f454 <MDNS::HandleRequest(unsigned short)+0xe0>)
 800f3d4:	4820      	ldr	r0, [pc, #128]	; (800f458 <MDNS::HandleRequest(unsigned short)+0xe4>)
 800f3d6:	f851 2b04 	ldr.w	r2, [r1], #4
 800f3da:	9300      	str	r3, [sp, #0]
 800f3dc:	4b1f      	ldr	r3, [pc, #124]	; (800f45c <MDNS::HandleRequest(unsigned short)+0xe8>)
 800f3de:	7800      	ldrb	r0, [r0, #0]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	b292      	uxth	r2, r2
 800f3e4:	f7ff fc2a 	bl	800ec3c <udp_send>
 800f3e8:	481d      	ldr	r0, [pc, #116]	; (800f460 <MDNS::HandleRequest(unsigned short)+0xec>)
 800f3ea:	a904      	add	r1, sp, #16
 800f3ec:	f7ff fce0 	bl	800edb0 <strcmp>
 800f3f0:	f04f 0900 	mov.w	r9, #0
 800f3f4:	4e1b      	ldr	r6, [pc, #108]	; (800f464 <MDNS::HandleRequest(unsigned short)+0xf0>)
 800f3f6:	9002      	str	r0, [sp, #8]
 800f3f8:	6833      	ldr	r3, [r6, #0]
 800f3fa:	b1c3      	cbz	r3, 800f42e <MDNS::HandleRequest(unsigned short)+0xba>
 800f3fc:	9b02      	ldr	r3, [sp, #8]
 800f3fe:	b123      	cbz	r3, 800f40a <MDNS::HandleRequest(unsigned short)+0x96>
 800f400:	6870      	ldr	r0, [r6, #4]
 800f402:	a904      	add	r1, sp, #16
 800f404:	f7ff fcd4 	bl	800edb0 <strcmp>
 800f408:	b988      	cbnz	r0, 800f42e <MDNS::HandleRequest(unsigned short)+0xba>
 800f40a:	2c0c      	cmp	r4, #12
 800f40c:	d10f      	bne.n	800f42e <MDNS::HandleRequest(unsigned short)+0xba>
 800f40e:	4649      	mov	r1, r9
 800f410:	4628      	mov	r0, r5
 800f412:	f7ff fee1 	bl	800f1d8 <MDNS::CreateMDNSMessage(unsigned int)>
 800f416:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f41a:	480f      	ldr	r0, [pc, #60]	; (800f458 <MDNS::HandleRequest(unsigned short)+0xe4>)
 800f41c:	9300      	str	r3, [sp, #0]
 800f41e:	4b0f      	ldr	r3, [pc, #60]	; (800f45c <MDNS::HandleRequest(unsigned short)+0xe8>)
 800f420:	f8bb 2000 	ldrh.w	r2, [fp]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	4910      	ldr	r1, [pc, #64]	; (800f468 <MDNS::HandleRequest(unsigned short)+0xf4>)
 800f428:	7800      	ldrb	r0, [r0, #0]
 800f42a:	f7ff fc07 	bl	800ec3c <udp_send>
 800f42e:	3610      	adds	r6, #16
 800f430:	f1b9 0f00 	cmp.w	r9, #0
 800f434:	d001      	beq.n	800f43a <MDNS::HandleRequest(unsigned short)+0xc6>
 800f436:	3701      	adds	r7, #1
 800f438:	e7a8      	b.n	800f38c <MDNS::HandleRequest(unsigned short)+0x18>
 800f43a:	f04f 0901 	mov.w	r9, #1
 800f43e:	e7db      	b.n	800f3f8 <MDNS::HandleRequest(unsigned short)+0x84>
 800f440:	b045      	add	sp, #276	; 0x114
 800f442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f446:	bf00      	nop
 800f448:	2000a284 	andcs	sl, r0, r4, lsl #5
 800f44c:	2000a07c 	andcs	sl, r0, ip, ror r0
 800f450:	2000a280 	andcs	sl, r0, r0, lsl #5
 800f454:	20009e54 	andcs	r9, r0, r4, asr lr
 800f458:	20000008 	andcs	r0, r0, r8
 800f45c:	20009e50 	andcs	r9, r0, r0, asr lr
 800f460:	0801583b 	stmdaeq	r1, {r0, r1, r3, r4, r5, fp, ip, lr}
 800f464:	2000a058 	andcs	sl, r0, r8, asr r0
 800f468:	2000a080 	andcs	sl, r0, r0, lsl #1

0800f46c <MDNS::Parse()>:
 800f46c:	4b08      	ldr	r3, [pc, #32]	; (800f490 <MDNS::Parse()+0x24>)
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	8853      	ldrh	r3, [r2, #2]
 800f472:	ba5b      	rev16	r3, r3
 800f474:	b299      	uxth	r1, r3
 800f476:	041b      	lsls	r3, r3, #16
 800f478:	d408      	bmi.n	800f48c <MDNS::Parse()+0x20>
 800f47a:	0b8b      	lsrs	r3, r1, #14
 800f47c:	d106      	bne.n	800f48c <MDNS::Parse()+0x20>
 800f47e:	8891      	ldrh	r1, [r2, #4]
 800f480:	b28b      	uxth	r3, r1
 800f482:	b11b      	cbz	r3, 800f48c <MDNS::Parse()+0x20>
 800f484:	ba49      	rev16	r1, r1
 800f486:	b289      	uxth	r1, r1
 800f488:	f7ff bf74 	b.w	800f374 <MDNS::HandleRequest(unsigned short)>
 800f48c:	4770      	bx	lr
 800f48e:	bf00      	nop
 800f490:	2000a284 	andcs	sl, r0, r4, lsl #5

0800f494 <MDNS::Run()>:
 800f494:	b538      	push	{r3, r4, r5, lr}
 800f496:	4d0c      	ldr	r5, [pc, #48]	; (800f4c8 <MDNS::Run()+0x34>)
 800f498:	4604      	mov	r4, r0
 800f49a:	480c      	ldr	r0, [pc, #48]	; (800f4cc <MDNS::Run()+0x38>)
 800f49c:	462b      	mov	r3, r5
 800f49e:	4a0c      	ldr	r2, [pc, #48]	; (800f4d0 <MDNS::Run()+0x3c>)
 800f4a0:	490c      	ldr	r1, [pc, #48]	; (800f4d4 <MDNS::Run()+0x40>)
 800f4a2:	7800      	ldrb	r0, [r0, #0]
 800f4a4:	f7ff fba4 	bl	800ebf0 <udp_recv2>
 800f4a8:	4b0b      	ldr	r3, [pc, #44]	; (800f4d8 <MDNS::Run()+0x44>)
 800f4aa:	882a      	ldrh	r2, [r5, #0]
 800f4ac:	8018      	strh	r0, [r3, #0]
 800f4ae:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d106      	bne.n	800f4c4 <MDNS::Run()+0x30>
 800f4b6:	280c      	cmp	r0, #12
 800f4b8:	d904      	bls.n	800f4c4 <MDNS::Run()+0x30>
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4c0:	f7ff bfd4 	b.w	800f46c <MDNS::Parse()>
 800f4c4:	bd38      	pop	{r3, r4, r5, pc}
 800f4c6:	bf00      	nop
 800f4c8:	20009e4c 	andcs	r9, r0, ip, asr #28
 800f4cc:	20000008 	andcs	r0, r0, r8
 800f4d0:	20009e48 	andcs	r9, r0, r8, asr #28
 800f4d4:	2000a284 	andcs	sl, r0, r4, lsl #5
 800f4d8:	2000a078 	andcs	sl, r0, r8, ror r0

0800f4dc <MDNS::Print()>:
 800f4dc:	b510      	push	{r4, lr}
 800f4de:	4816      	ldr	r0, [pc, #88]	; (800f538 <MDNS::Print()+0x5c>)
 800f4e0:	f7f9 fb38 	bl	8008b54 <printf>
 800f4e4:	4b15      	ldr	r3, [pc, #84]	; (800f53c <MDNS::Print()+0x60>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	d104      	bne.n	800f4f6 <MDNS::Print()+0x1a>
 800f4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4f0:	4813      	ldr	r0, [pc, #76]	; (800f540 <MDNS::Print()+0x64>)
 800f4f2:	f7f9 bb2f 	b.w	8008b54 <printf>
 800f4f6:	4b13      	ldr	r3, [pc, #76]	; (800f544 <MDNS::Print()+0x68>)
 800f4f8:	4c13      	ldr	r4, [pc, #76]	; (800f548 <MDNS::Print()+0x6c>)
 800f4fa:	6819      	ldr	r1, [r3, #0]
 800f4fc:	4813      	ldr	r0, [pc, #76]	; (800f54c <MDNS::Print()+0x70>)
 800f4fe:	f7f9 fb29 	bl	8008b54 <printf>
 800f502:	6823      	ldr	r3, [r4, #0]
 800f504:	b14b      	cbz	r3, 800f51a <MDNS::Print()+0x3e>
 800f506:	4a12      	ldr	r2, [pc, #72]	; (800f550 <MDNS::Print()+0x74>)
 800f508:	68a3      	ldr	r3, [r4, #8]
 800f50a:	6861      	ldr	r1, [r4, #4]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	bf08      	it	eq
 800f510:	4613      	moveq	r3, r2
 800f512:	4810      	ldr	r0, [pc, #64]	; (800f554 <MDNS::Print()+0x78>)
 800f514:	89a2      	ldrh	r2, [r4, #12]
 800f516:	f7f9 fb1d 	bl	8008b54 <printf>
 800f51a:	6923      	ldr	r3, [r4, #16]
 800f51c:	b15b      	cbz	r3, 800f536 <MDNS::Print()+0x5a>
 800f51e:	69a3      	ldr	r3, [r4, #24]
 800f520:	4a0b      	ldr	r2, [pc, #44]	; (800f550 <MDNS::Print()+0x74>)
 800f522:	6961      	ldr	r1, [r4, #20]
 800f524:	2b00      	cmp	r3, #0
 800f526:	bf08      	it	eq
 800f528:	4613      	moveq	r3, r2
 800f52a:	480a      	ldr	r0, [pc, #40]	; (800f554 <MDNS::Print()+0x78>)
 800f52c:	8ba2      	ldrh	r2, [r4, #28]
 800f52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f532:	f7f9 bb0f 	b.w	8008b54 <printf>
 800f536:	bd10      	pop	{r4, pc}
 800f538:	08015858 	stmdaeq	r1, {r3, r4, r6, fp, ip, lr}
 800f53c:	20000008 	andcs	r0, r0, r8
 800f540:	0801585e 	stmdaeq	r1, {r1, r2, r3, r4, r6, fp, ip, lr}
 800f544:	2000a280 	andcs	sl, r0, r0, lsl #5
 800f548:	2000a058 	andcs	sl, r0, r8, asr r0
 800f54c:	0801586c 	stmdaeq	r1, {r2, r3, r5, r6, fp, ip, lr}
 800f550:	08014bf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, lr}
 800f554:	08015878 	stmdaeq	r1, {r3, r4, r5, r6, fp, ip, lr}

0800f558 <strncpy.constprop.0.isra.0>:
 800f558:	233f      	movs	r3, #63	; 0x3f
 800f55a:	3901      	subs	r1, #1
 800f55c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f560:	b92a      	cbnz	r2, 800f56e <strncpy.constprop.0.isra.0+0x16>
 800f562:	4403      	add	r3, r0
 800f564:	4298      	cmp	r0, r3
 800f566:	d007      	beq.n	800f578 <strncpy.constprop.0.isra.0+0x20>
 800f568:	f800 2b01 	strb.w	r2, [r0], #1
 800f56c:	e7fa      	b.n	800f564 <strncpy.constprop.0.isra.0+0xc>
 800f56e:	3b01      	subs	r3, #1
 800f570:	f800 2b01 	strb.w	r2, [r0], #1
 800f574:	d1f2      	bne.n	800f55c <strncpy.constprop.0.isra.0+0x4>
 800f576:	4770      	bx	lr
 800f578:	4770      	bx	lr
	...

0800f57c <Network::Network()>:
 800f57c:	4a11      	ldr	r2, [pc, #68]	; (800f5c4 <Network::Network()+0x48>)
 800f57e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f582:	6010      	str	r0, [r2, #0]
 800f584:	2201      	movs	r2, #1
 800f586:	2300      	movs	r3, #0
 800f588:	e9c0 1200 	strd	r1, r2, [r0]
 800f58c:	2200      	movs	r2, #0
 800f58e:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 800f592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f596:	490c      	ldr	r1, [pc, #48]	; (800f5c8 <Network::Network()+0x4c>)
 800f598:	60c2      	str	r2, [r0, #12]
 800f59a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 800f59e:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 800f5a2:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 800f5a6:	6083      	str	r3, [r0, #8]
 800f5a8:	6183      	str	r3, [r0, #24]
 800f5aa:	7703      	strb	r3, [r0, #28]
 800f5ac:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 800f5b0:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 800f5b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5b8:	f802 3b01 	strb.w	r3, [r2], #1
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d1f9      	bne.n	800f5b4 <Network::Network()+0x38>
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	2000a288 	andcs	sl, r0, r8, lsl #5
 800f5c8:	08015883 	stmdaeq	r1, {r0, r1, r7, fp, ip, lr}

0800f5cc <Network::Shutdown()>:
 800f5cc:	b508      	push	{r3, lr}
 800f5ce:	30b8      	adds	r0, #184	; 0xb8
 800f5d0:	f001 fd62 	bl	8011098 <NetworkDisplay::ShowShutdown()>
 800f5d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f5d8:	f7fe bdc2 	b.w	800e160 <net_shutdown>

0800f5dc <Network::Begin(unsigned short)>:
 800f5dc:	4608      	mov	r0, r1
 800f5de:	f7ff ba97 	b.w	800eb10 <udp_bind>

0800f5e2 <Network::End(unsigned short)>:
 800f5e2:	4608      	mov	r0, r1
 800f5e4:	f7ff baae 	b.w	800eb44 <udp_unbind>

0800f5e8 <Network::MacAddressCopyTo(unsigned char*)>:
 800f5e8:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 800f5ec:	3901      	subs	r1, #1
 800f5ee:	30a2      	adds	r0, #162	; 0xa2
 800f5f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5f4:	4283      	cmp	r3, r0
 800f5f6:	f801 2f01 	strb.w	r2, [r1, #1]!
 800f5fa:	d1f9      	bne.n	800f5f0 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 800f5fc:	4770      	bx	lr

0800f5fe <Network::JoinGroup(int, unsigned int)>:
 800f5fe:	4610      	mov	r0, r2
 800f600:	f001 b858 	b.w	80106b4 <igmp_join>

0800f604 <Network::LeaveGroup(int, unsigned int)>:
 800f604:	4610      	mov	r0, r2
 800f606:	f001 b881 	b.w	801070c <igmp_leave>

0800f60a <Network::SetDefaultIp()>:
 800f60a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800f60e:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 800f612:	041b      	lsls	r3, r3, #16
 800f614:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f618:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 800f61c:	3302      	adds	r3, #2
 800f61e:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800f622:	22ff      	movs	r2, #255	; 0xff
 800f624:	6103      	str	r3, [r0, #16]
 800f626:	e9c0 3205 	strd	r3, r2, [r0, #20]
 800f62a:	4770      	bx	lr

0800f62c <Network::Init(NetworkParamsStore*)>:
 800f62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f630:	b08b      	sub	sp, #44	; 0x2c
 800f632:	4604      	mov	r4, r0
 800f634:	a806      	add	r0, sp, #24
 800f636:	f000 f9b1 	bl	800f99c <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800f63a:	a806      	add	r0, sp, #24
 800f63c:	f000 f9be 	bl	800f9bc <NetworkParams::Load()>
 800f640:	b110      	cbz	r0, 800f648 <Network::Init(NetworkParamsStore*)+0x1c>
 800f642:	a806      	add	r0, sp, #24
 800f644:	f000 fba3 	bl	800fd8e <NetworkParams::Dump()>
 800f648:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 800f64c:	f8df 8224 	ldr.w	r8, [pc, #548]	; 800f874 <Network::Init(NetworkParamsStore*)+0x248>
 800f650:	4628      	mov	r0, r5
 800f652:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 800f656:	f001 fd13 	bl	8011080 <NetworkDisplay::ShowEmacStart()>
 800f65a:	4638      	mov	r0, r7
 800f65c:	f003 fabe 	bl	8012bdc <emac_start>
 800f660:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f664:	f104 061c 	add.w	r6, r4, #28
 800f668:	9307      	str	r3, [sp, #28]
 800f66a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f66e:	9308      	str	r3, [sp, #32]
 800f670:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f674:	9309      	str	r3, [sp, #36]	; 0x24
 800f676:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f67a:	7063      	strb	r3, [r4, #1]
 800f67c:	f8d8 3000 	ldr.w	r3, [r8]
 800f680:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 800f684:	bf18      	it	ne
 800f686:	f8d8 2055 	ldrne.w	r2, [r8, #85]	; 0x55
 800f68a:	061b      	lsls	r3, r3, #24
 800f68c:	bf58      	it	pl
 800f68e:	2300      	movpl	r3, #0
 800f690:	60a2      	str	r2, [r4, #8]
 800f692:	bf48      	it	mi
 800f694:	f8d8 3059 	ldrmi.w	r3, [r8, #89]	; 0x59
 800f698:	60e3      	str	r3, [r4, #12]
 800f69a:	f898 3015 	ldrb.w	r3, [r8, #21]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d15e      	bne.n	800f760 <Network::Init(NetworkParamsStore*)+0x134>
 800f6a2:	4632      	mov	r2, r6
 800f6a4:	4874      	ldr	r0, [pc, #464]	; (800f878 <Network::Init(NetworkParamsStore*)+0x24c>)
 800f6a6:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f6aa:	f103 0c01 	add.w	ip, r3, #1
 800f6ae:	b119      	cbz	r1, 800f6b8 <Network::Init(NetworkParamsStore*)+0x8c>
 800f6b0:	4663      	mov	r3, ip
 800f6b2:	f802 1b01 	strb.w	r1, [r2], #1
 800f6b6:	e7f6      	b.n	800f6a6 <Network::Init(NetworkParamsStore*)+0x7a>
 800f6b8:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 800f6bc:	18e1      	adds	r1, r4, r3
 800f6be:	0910      	lsrs	r0, r2, #4
 800f6c0:	2a9f      	cmp	r2, #159	; 0x9f
 800f6c2:	f002 020f 	and.w	r2, r2, #15
 800f6c6:	bf94      	ite	ls
 800f6c8:	3030      	addls	r0, #48	; 0x30
 800f6ca:	3037      	addhi	r0, #55	; 0x37
 800f6cc:	2a09      	cmp	r2, #9
 800f6ce:	bf94      	ite	ls
 800f6d0:	3230      	addls	r2, #48	; 0x30
 800f6d2:	3237      	addhi	r2, #55	; 0x37
 800f6d4:	44a4      	add	ip, r4
 800f6d6:	7708      	strb	r0, [r1, #28]
 800f6d8:	f88c 201c 	strb.w	r2, [ip, #28]
 800f6dc:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 800f6e0:	f103 0e02 	add.w	lr, r3, #2
 800f6e4:	0910      	lsrs	r0, r2, #4
 800f6e6:	2a9f      	cmp	r2, #159	; 0x9f
 800f6e8:	f002 020f 	and.w	r2, r2, #15
 800f6ec:	bf94      	ite	ls
 800f6ee:	3030      	addls	r0, #48	; 0x30
 800f6f0:	3037      	addhi	r0, #55	; 0x37
 800f6f2:	f103 0903 	add.w	r9, r3, #3
 800f6f6:	2a09      	cmp	r2, #9
 800f6f8:	44a6      	add	lr, r4
 800f6fa:	f88e 001c 	strb.w	r0, [lr, #28]
 800f6fe:	bf94      	ite	ls
 800f700:	3230      	addls	r2, #48	; 0x30
 800f702:	3237      	addhi	r2, #55	; 0x37
 800f704:	eb04 0009 	add.w	r0, r4, r9
 800f708:	7702      	strb	r2, [r0, #28]
 800f70a:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 800f70e:	f103 0c04 	add.w	ip, r3, #4
 800f712:	0910      	lsrs	r0, r2, #4
 800f714:	2a9f      	cmp	r2, #159	; 0x9f
 800f716:	f002 020f 	and.w	r2, r2, #15
 800f71a:	bf94      	ite	ls
 800f71c:	3030      	addls	r0, #48	; 0x30
 800f71e:	3037      	addhi	r0, #55	; 0x37
 800f720:	3305      	adds	r3, #5
 800f722:	2a09      	cmp	r2, #9
 800f724:	4423      	add	r3, r4
 800f726:	44a4      	add	ip, r4
 800f728:	bf94      	ite	ls
 800f72a:	3230      	addls	r2, #48	; 0x30
 800f72c:	3237      	addhi	r2, #55	; 0x37
 800f72e:	f88c 001c 	strb.w	r0, [ip, #28]
 800f732:	771a      	strb	r2, [r3, #28]
 800f734:	2300      	movs	r3, #0
 800f736:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 800f73a:	7863      	ldrb	r3, [r4, #1]
 800f73c:	b95b      	cbnz	r3, 800f756 <Network::Init(NetworkParamsStore*)+0x12a>
 800f73e:	9b07      	ldr	r3, [sp, #28]
 800f740:	b9b3      	cbnz	r3, 800f770 <Network::Init(NetworkParamsStore*)+0x144>
 800f742:	4620      	mov	r0, r4
 800f744:	f7ff ff61 	bl	800f60a <Network::SetDefaultIp()>
 800f748:	6923      	ldr	r3, [r4, #16]
 800f74a:	69a2      	ldr	r2, [r4, #24]
 800f74c:	9307      	str	r3, [sp, #28]
 800f74e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f752:	7863      	ldrb	r3, [r4, #1]
 800f754:	b19b      	cbz	r3, 800f77e <Network::Init(NetworkParamsStore*)+0x152>
 800f756:	2101      	movs	r1, #1
 800f758:	4628      	mov	r0, r5
 800f75a:	f001 fca3 	bl	80110a4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800f75e:	e00e      	b.n	800f77e <Network::Init(NetworkParamsStore*)+0x152>
 800f760:	4630      	mov	r0, r6
 800f762:	4946      	ldr	r1, [pc, #280]	; (800f87c <Network::Init(NetworkParamsStore*)+0x250>)
 800f764:	f7ff fef8 	bl	800f558 <strncpy.constprop.0.isra.0>
 800f768:	2300      	movs	r3, #0
 800f76a:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 800f76e:	e7e4      	b.n	800f73a <Network::Init(NetworkParamsStore*)+0x10e>
 800f770:	69a1      	ldr	r1, [r4, #24]
 800f772:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800f776:	4053      	eors	r3, r2
 800f778:	420b      	tst	r3, r1
 800f77a:	d000      	beq.n	800f77e <Network::Init(NetworkParamsStore*)+0x152>
 800f77c:	9209      	str	r2, [sp, #36]	; 0x24
 800f77e:	1ce3      	adds	r3, r4, #3
 800f780:	f104 0901 	add.w	r9, r4, #1
 800f784:	9302      	str	r3, [sp, #8]
 800f786:	9300      	str	r3, [sp, #0]
 800f788:	4632      	mov	r2, r6
 800f78a:	464b      	mov	r3, r9
 800f78c:	4638      	mov	r0, r7
 800f78e:	a907      	add	r1, sp, #28
 800f790:	f7fe fc96 	bl	800e0c0 <net_init>
 800f794:	78e3      	ldrb	r3, [r4, #3]
 800f796:	b11b      	cbz	r3, 800f7a0 <Network::Init(NetworkParamsStore*)+0x174>
 800f798:	2104      	movs	r1, #4
 800f79a:	4628      	mov	r0, r5
 800f79c:	f001 fc82 	bl	80110a4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800f7a0:	f898 3014 	ldrb.w	r3, [r8, #20]
 800f7a4:	f898 a05d 	ldrb.w	sl, [r8, #93]	; 0x5d
 800f7a8:	9304      	str	r3, [sp, #16]
 800f7aa:	233c      	movs	r3, #60	; 0x3c
 800f7ac:	fb03 f30a 	mul.w	r3, r3, sl
 800f7b0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800f880 <Network::Init(NetworkParamsStore*)+0x254>
 800f7b4:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800f884 <Network::Init(NetworkParamsStore*)+0x258>
 800f7b8:	9303      	str	r3, [sp, #12]
 800f7ba:	78e3      	ldrb	r3, [r4, #3]
 800f7bc:	b95b      	cbnz	r3, 800f7d6 <Network::Init(NetworkParamsStore*)+0x1aa>
 800f7be:	9b07      	ldr	r3, [sp, #28]
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	6123      	str	r3, [r4, #16]
 800f7c4:	9b08      	ldr	r3, [sp, #32]
 800f7c6:	61a3      	str	r3, [r4, #24]
 800f7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7ca:	6163      	str	r3, [r4, #20]
 800f7cc:	f001 fc5e 	bl	801108c <NetworkDisplay::ShowIp()>
 800f7d0:	b00b      	add	sp, #44	; 0x2c
 800f7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7d6:	f1ba 0f00 	cmp.w	sl, #0
 800f7da:	d0f0      	beq.n	800f7be <Network::Init(NetworkParamsStore*)+0x192>
 800f7dc:	9b04      	ldr	r3, [sp, #16]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d0ed      	beq.n	800f7be <Network::Init(NetworkParamsStore*)+0x192>
 800f7e2:	2104      	movs	r1, #4
 800f7e4:	f8d8 0000 	ldr.w	r0, [r8]
 800f7e8:	f002 fa80 	bl	8011cec <LedBlink::SetMode(ledblink::Mode)>
 800f7ec:	2103      	movs	r1, #3
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f001 fc58 	bl	80110a4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	f002 fd3d 	bl	8012274 <time>
 800f7fa:	9005      	str	r0, [sp, #20]
 800f7fc:	2000      	movs	r0, #0
 800f7fe:	f002 fd39 	bl	8012274 <time>
 800f802:	9b05      	ldr	r3, [sp, #20]
 800f804:	1ac0      	subs	r0, r0, r3
 800f806:	9b03      	ldr	r3, [sp, #12]
 800f808:	4298      	cmp	r0, r3
 800f80a:	da1a      	bge.n	800f842 <Network::Init(NetworkParamsStore*)+0x216>
 800f80c:	f8d8 3000 	ldr.w	r3, [r8]
 800f810:	491d      	ldr	r1, [pc, #116]	; (800f888 <Network::Init(NetworkParamsStore*)+0x25c>)
 800f812:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800f816:	f1bc 0f00 	cmp.w	ip, #0
 800f81a:	d0ef      	beq.n	800f7fc <Network::Init(NetworkParamsStore*)+0x1d0>
 800f81c:	6808      	ldr	r0, [r1, #0]
 800f81e:	695a      	ldr	r2, [r3, #20]
 800f820:	1a80      	subs	r0, r0, r2
 800f822:	4584      	cmp	ip, r0
 800f824:	d8ea      	bhi.n	800f7fc <Network::Init(NetworkParamsStore*)+0x1d0>
 800f826:	6808      	ldr	r0, [r1, #0]
 800f828:	6158      	str	r0, [r3, #20]
 800f82a:	6918      	ldr	r0, [r3, #16]
 800f82c:	2801      	cmp	r0, #1
 800f82e:	f080 0201 	eor.w	r2, r0, #1
 800f832:	611a      	str	r2, [r3, #16]
 800f834:	bf16      	itet	ne
 800f836:	2301      	movne	r3, #1
 800f838:	f8cb 0014 	streq.w	r0, [fp, #20]
 800f83c:	f8cb 3010 	strne.w	r3, [fp, #16]
 800f840:	e7dc      	b.n	800f7fc <Network::Init(NetworkParamsStore*)+0x1d0>
 800f842:	2101      	movs	r1, #1
 800f844:	4628      	mov	r0, r5
 800f846:	f001 fc2d 	bl	80110a4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 800f84a:	2101      	movs	r1, #1
 800f84c:	f8d8 0000 	ldr.w	r0, [r8]
 800f850:	f002 fa4c 	bl	8011cec <LedBlink::SetMode(ledblink::Mode)>
 800f854:	2301      	movs	r3, #1
 800f856:	7063      	strb	r3, [r4, #1]
 800f858:	2300      	movs	r3, #0
 800f85a:	70e3      	strb	r3, [r4, #3]
 800f85c:	9b02      	ldr	r3, [sp, #8]
 800f85e:	4632      	mov	r2, r6
 800f860:	9300      	str	r3, [sp, #0]
 800f862:	4638      	mov	r0, r7
 800f864:	464b      	mov	r3, r9
 800f866:	a907      	add	r1, sp, #28
 800f868:	f7fe fc2a 	bl	800e0c0 <net_init>
 800f86c:	7863      	ldrb	r3, [r4, #1]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d0a3      	beq.n	800f7ba <Network::Init(NetworkParamsStore*)+0x18e>
 800f872:	e7a4      	b.n	800f7be <Network::Init(NetworkParamsStore*)+0x192>
 800f874:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800f878:	08015888 	stmdaeq	r1, {r3, r7, fp, ip, lr}
 800f87c:	2000a2a1 	andcs	sl, r0, r1, lsr #5
 800f880:	2000a9ac 	andcs	sl, r0, ip, lsr #19
 800f884:	40011000 	andmi	r1, r1, r0
 800f888:	2000a9c4 	andcs	sl, r0, r4, asr #19

0800f88c <Network::Print()>:
 800f88c:	b530      	push	{r4, r5, lr}
 800f88e:	4604      	mov	r4, r0
 800f890:	b085      	sub	sp, #20
 800f892:	4832      	ldr	r0, [pc, #200]	; (800f95c <Network::Print()+0xd0>)
 800f894:	f7f9 f95e 	bl	8008b54 <printf>
 800f898:	f104 011c 	add.w	r1, r4, #28
 800f89c:	4830      	ldr	r0, [pc, #192]	; (800f960 <Network::Print()+0xd4>)
 800f89e:	f7f9 f959 	bl	8008b54 <printf>
 800f8a2:	6861      	ldr	r1, [r4, #4]
 800f8a4:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 800f8a8:	482e      	ldr	r0, [pc, #184]	; (800f964 <Network::Print()+0xd8>)
 800f8aa:	f7f9 f953 	bl	8008b54 <printf>
 800f8ae:	69a0      	ldr	r0, [r4, #24]
 800f8b0:	f7f8 fad8 	bl	8007e64 <__popcountsi2>
 800f8b4:	6925      	ldr	r5, [r4, #16]
 800f8b6:	9001      	str	r0, [sp, #4]
 800f8b8:	0e2b      	lsrs	r3, r5, #24
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	f3c5 2207 	ubfx	r2, r5, #8, #8
 800f8c0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800f8c4:	b2e9      	uxtb	r1, r5
 800f8c6:	4828      	ldr	r0, [pc, #160]	; (800f968 <Network::Print()+0xdc>)
 800f8c8:	f7f9 f944 	bl	8008b54 <printf>
 800f8cc:	69a1      	ldr	r1, [r4, #24]
 800f8ce:	4827      	ldr	r0, [pc, #156]	; (800f96c <Network::Print()+0xe0>)
 800f8d0:	0e0b      	lsrs	r3, r1, #24
 800f8d2:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f8d6:	9300      	str	r3, [sp, #0]
 800f8d8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f8dc:	b2c9      	uxtb	r1, r1
 800f8de:	f7f9 f939 	bl	8008b54 <printf>
 800f8e2:	6961      	ldr	r1, [r4, #20]
 800f8e4:	4822      	ldr	r0, [pc, #136]	; (800f970 <Network::Print()+0xe4>)
 800f8e6:	0e0b      	lsrs	r3, r1, #24
 800f8e8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f8ec:	9300      	str	r3, [sp, #0]
 800f8ee:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f8f2:	b2c9      	uxtb	r1, r1
 800f8f4:	f7f9 f92e 	bl	8008b54 <printf>
 800f8f8:	69a3      	ldr	r3, [r4, #24]
 800f8fa:	6921      	ldr	r1, [r4, #16]
 800f8fc:	481d      	ldr	r0, [pc, #116]	; (800f974 <Network::Print()+0xe8>)
 800f8fe:	ea61 0103 	orn	r1, r1, r3
 800f902:	0e0b      	lsrs	r3, r1, #24
 800f904:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800f908:	9300      	str	r3, [sp, #0]
 800f90a:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f90e:	b2c9      	uxtb	r1, r1
 800f910:	f7f9 f920 	bl	8008b54 <printf>
 800f914:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 800f918:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 800f91c:	9302      	str	r3, [sp, #8]
 800f91e:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 800f922:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 800f926:	9301      	str	r3, [sp, #4]
 800f928:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 800f92c:	4812      	ldr	r0, [pc, #72]	; (800f978 <Network::Print()+0xec>)
 800f92e:	9300      	str	r3, [sp, #0]
 800f930:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 800f934:	f7f9 f90e 	bl	8008b54 <printf>
 800f938:	4b10      	ldr	r3, [pc, #64]	; (800f97c <Network::Print()+0xf0>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	78da      	ldrb	r2, [r3, #3]
 800f93e:	b952      	cbnz	r2, 800f956 <Network::Print()+0xca>
 800f940:	785b      	ldrb	r3, [r3, #1]
 800f942:	2b00      	cmp	r3, #0
 800f944:	bf14      	ite	ne
 800f946:	2144      	movne	r1, #68	; 0x44
 800f948:	2153      	moveq	r1, #83	; 0x53
 800f94a:	480d      	ldr	r0, [pc, #52]	; (800f980 <Network::Print()+0xf4>)
 800f94c:	b005      	add	sp, #20
 800f94e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f952:	f7f9 b8ff 	b.w	8008b54 <printf>
 800f956:	215a      	movs	r1, #90	; 0x5a
 800f958:	e7f7      	b.n	800f94a <Network::Print()+0xbe>
 800f95a:	bf00      	nop
 800f95c:	08015894 	stmdaeq	r1, {r2, r4, r7, fp, ip, lr}
 800f960:	0801589d 	stmdaeq	r1, {r0, r2, r3, r4, r7, fp, ip, lr}
 800f964:	080158ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, fp, ip, lr}
 800f968:	080158c3 	stmdaeq	r1, {r0, r1, r6, r7, fp, ip, lr}
 800f96c:	080158e0 	stmdaeq	r1, {r5, r6, r7, fp, ip, lr}
 800f970:	080158fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, fp, ip, lr}
 800f974:	08015914 	stmdaeq	r1, {r2, r4, r8, fp, ip, lr}
 800f978:	0801592e 	stmdaeq	r1, {r1, r2, r3, r5, r8, fp, ip, lr}
 800f97c:	2000a288 	andcs	sl, r0, r8, lsl #5
 800f980:	0801595a 	stmdaeq	r1, {r1, r3, r4, r6, r8, fp, ip, lr}

0800f984 <Network::TcpBegin(unsigned short)>:
 800f984:	4608      	mov	r0, r1
 800f986:	f7fe bf71 	b.w	800e86c <tcp_begin>

0800f98a <Network::TcpRead(int, unsigned char const**)>:
 800f98a:	4608      	mov	r0, r1
 800f98c:	4611      	mov	r1, r2
 800f98e:	f7fe bfab 	b.w	800e8e8 <tcp_read>

0800f992 <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 800f992:	4608      	mov	r0, r1
 800f994:	4611      	mov	r1, r2
 800f996:	461a      	mov	r2, r3
 800f998:	f7fe bf82 	b.w	800e8a0 <tcp_write>

0800f99c <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 800f99c:	4b06      	ldr	r3, [pc, #24]	; (800f9b8 <NetworkParams::NetworkParams(NetworkParamsStore*)+0x1c>)
 800f99e:	b510      	push	{r4, lr}
 800f9a0:	225e      	movs	r2, #94	; 0x5e
 800f9a2:	4604      	mov	r4, r0
 800f9a4:	6001      	str	r1, [r0, #0]
 800f9a6:	2100      	movs	r1, #0
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f002 fb57 	bl	801205c <memset>
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	7502      	strb	r2, [r0, #20]
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	bd10      	pop	{r4, pc}
 800f9b6:	bf00      	nop
 800f9b8:	2000a28c 	andcs	sl, r0, ip, lsl #5

0800f9bc <NetworkParams::Load()>:
 800f9bc:	b508      	push	{r3, lr}
 800f9be:	2300      	movs	r3, #0
 800f9c0:	4905      	ldr	r1, [pc, #20]	; (800f9d8 <NetworkParams::Load()+0x1c>)
 800f9c2:	6800      	ldr	r0, [r0, #0]
 800f9c4:	700b      	strb	r3, [r1, #0]
 800f9c6:	704b      	strb	r3, [r1, #1]
 800f9c8:	708b      	strb	r3, [r1, #2]
 800f9ca:	70cb      	strb	r3, [r1, #3]
 800f9cc:	b118      	cbz	r0, 800f9d6 <NetworkParams::Load()+0x1a>
 800f9ce:	6803      	ldr	r3, [r0, #0]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	4798      	blx	r3
 800f9d4:	2001      	movs	r0, #1
 800f9d6:	bd08      	pop	{r3, pc}
 800f9d8:	2000a28c 	andcs	sl, r0, ip, lsl #5

0800f9dc <NetworkParams::Load(char const*, unsigned int)>:
 800f9dc:	6803      	ldr	r3, [r0, #0]
 800f9de:	b1eb      	cbz	r3, 800fa1c <NetworkParams::Load(char const*, unsigned int)+0x40>
 800f9e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	460e      	mov	r6, r1
 800f9e6:	4617      	mov	r7, r2
 800f9e8:	4605      	mov	r5, r0
 800f9ea:	4c0d      	ldr	r4, [pc, #52]	; (800fa20 <NetworkParams::Load(char const*, unsigned int)+0x44>)
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	490d      	ldr	r1, [pc, #52]	; (800fa24 <NetworkParams::Load(char const*, unsigned int)+0x48>)
 800f9f0:	4668      	mov	r0, sp
 800f9f2:	7023      	strb	r3, [r4, #0]
 800f9f4:	7063      	strb	r3, [r4, #1]
 800f9f6:	70a3      	strb	r3, [r4, #2]
 800f9f8:	70e3      	strb	r3, [r4, #3]
 800f9fa:	f001 fca7 	bl	801134c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800f9fe:	463a      	mov	r2, r7
 800fa00:	4631      	mov	r1, r6
 800fa02:	4668      	mov	r0, sp
 800fa04:	f001 fca6 	bl	8011354 <ReadConfigFile::Read(char const*, unsigned int)>
 800fa08:	6828      	ldr	r0, [r5, #0]
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	6803      	ldr	r3, [r0, #0]
 800fa0e:	689b      	ldr	r3, [r3, #8]
 800fa10:	4798      	blx	r3
 800fa12:	4668      	mov	r0, sp
 800fa14:	f001 fc9d 	bl	8011352 <ReadConfigFile::~ReadConfigFile()>
 800fa18:	b003      	add	sp, #12
 800fa1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800fa24:	0800fb59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, fp, ip, sp, lr, pc}

0800fa28 <NetworkParams::callbackFunction(char const*)>:
 800fa28:	b530      	push	{r4, r5, lr}
 800fa2a:	460c      	mov	r4, r1
 800fa2c:	b085      	sub	sp, #20
 800fa2e:	4620      	mov	r0, r4
 800fa30:	4942      	ldr	r1, [pc, #264]	; (800fb3c <NetworkParams::callbackFunction(char const*)+0x114>)
 800fa32:	f10d 0207 	add.w	r2, sp, #7
 800fa36:	f001 fdc4 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800fa3a:	b980      	cbnz	r0, 800fa5e <NetworkParams::callbackFunction(char const*)+0x36>
 800fa3c:	4940      	ldr	r1, [pc, #256]	; (800fb40 <NetworkParams::callbackFunction(char const*)+0x118>)
 800fa3e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fa42:	680b      	ldr	r3, [r1, #0]
 800fa44:	b142      	cbz	r2, 800fa58 <NetworkParams::callbackFunction(char const*)+0x30>
 800fa46:	f023 0301 	bic.w	r3, r3, #1
 800fa4a:	3a00      	subs	r2, #0
 800fa4c:	bf18      	it	ne
 800fa4e:	2201      	movne	r2, #1
 800fa50:	600b      	str	r3, [r1, #0]
 800fa52:	750a      	strb	r2, [r1, #20]
 800fa54:	b005      	add	sp, #20
 800fa56:	bd30      	pop	{r4, r5, pc}
 800fa58:	f043 0301 	orr.w	r3, r3, #1
 800fa5c:	e7f5      	b.n	800fa4a <NetworkParams::callbackFunction(char const*)+0x22>
 800fa5e:	4620      	mov	r0, r4
 800fa60:	4938      	ldr	r1, [pc, #224]	; (800fb44 <NetworkParams::callbackFunction(char const*)+0x11c>)
 800fa62:	f10d 0207 	add.w	r2, sp, #7
 800fa66:	f001 fdac 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800fa6a:	b988      	cbnz	r0, 800fa90 <NetworkParams::callbackFunction(char const*)+0x68>
 800fa6c:	4a34      	ldr	r2, [pc, #208]	; (800fb40 <NetworkParams::callbackFunction(char const*)+0x118>)
 800fa6e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fa72:	6813      	ldr	r3, [r2, #0]
 800fa74:	1e4d      	subs	r5, r1, #1
 800fa76:	2d04      	cmp	r5, #4
 800fa78:	bf97      	itett	ls
 800fa7a:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800fa7e:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800fa82:	6013      	strls	r3, [r2, #0]
 800fa84:	f882 105d 	strbls.w	r1, [r2, #93]	; 0x5d
 800fa88:	bf84      	itt	hi
 800fa8a:	6013      	strhi	r3, [r2, #0]
 800fa8c:	f882 005d 	strbhi.w	r0, [r2, #93]	; 0x5d
 800fa90:	4620      	mov	r0, r4
 800fa92:	492d      	ldr	r1, [pc, #180]	; (800fb48 <NetworkParams::callbackFunction(char const*)+0x120>)
 800fa94:	aa02      	add	r2, sp, #8
 800fa96:	f001 fd0d 	bl	80114b4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800fa9a:	b9d0      	cbnz	r0, 800fad2 <NetworkParams::callbackFunction(char const*)+0xaa>
 800fa9c:	9b02      	ldr	r3, [sp, #8]
 800fa9e:	b2d9      	uxtb	r1, r3
 800faa0:	29ac      	cmp	r1, #172	; 0xac
 800faa2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800faa6:	d00a      	beq.n	800fabe <NetworkParams::callbackFunction(char const*)+0x96>
 800faa8:	29c0      	cmp	r1, #192	; 0xc0
 800faaa:	d00c      	beq.n	800fac6 <NetworkParams::callbackFunction(char const*)+0x9e>
 800faac:	290a      	cmp	r1, #10
 800faae:	d10d      	bne.n	800facc <NetworkParams::callbackFunction(char const*)+0xa4>
 800fab0:	4a23      	ldr	r2, [pc, #140]	; (800fb40 <NetworkParams::callbackFunction(char const*)+0x118>)
 800fab2:	6053      	str	r3, [r2, #4]
 800fab4:	6813      	ldr	r3, [r2, #0]
 800fab6:	f043 0302 	orr.w	r3, r3, #2
 800faba:	6013      	str	r3, [r2, #0]
 800fabc:	e7ca      	b.n	800fa54 <NetworkParams::callbackFunction(char const*)+0x2c>
 800fabe:	3a10      	subs	r2, #16
 800fac0:	2a0f      	cmp	r2, #15
 800fac2:	d8c7      	bhi.n	800fa54 <NetworkParams::callbackFunction(char const*)+0x2c>
 800fac4:	e7f4      	b.n	800fab0 <NetworkParams::callbackFunction(char const*)+0x88>
 800fac6:	2aa8      	cmp	r2, #168	; 0xa8
 800fac8:	d1c4      	bne.n	800fa54 <NetworkParams::callbackFunction(char const*)+0x2c>
 800faca:	e7f1      	b.n	800fab0 <NetworkParams::callbackFunction(char const*)+0x88>
 800facc:	2b00      	cmp	r3, #0
 800face:	d0ef      	beq.n	800fab0 <NetworkParams::callbackFunction(char const*)+0x88>
 800fad0:	e7c0      	b.n	800fa54 <NetworkParams::callbackFunction(char const*)+0x2c>
 800fad2:	4620      	mov	r0, r4
 800fad4:	491d      	ldr	r1, [pc, #116]	; (800fb4c <NetworkParams::callbackFunction(char const*)+0x124>)
 800fad6:	aa02      	add	r2, sp, #8
 800fad8:	f001 fcec 	bl	80114b4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800fadc:	b970      	cbnz	r0, 800fafc <NetworkParams::callbackFunction(char const*)+0xd4>
 800fade:	9a02      	ldr	r2, [sp, #8]
 800fae0:	2a00      	cmp	r2, #0
 800fae2:	d0b7      	beq.n	800fa54 <NetworkParams::callbackFunction(char const*)+0x2c>
 800fae4:	ba13      	rev	r3, r2
 800fae6:	43d9      	mvns	r1, r3
 800fae8:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 800faec:	d1b2      	bne.n	800fa54 <NetworkParams::callbackFunction(char const*)+0x2c>
 800faee:	4b14      	ldr	r3, [pc, #80]	; (800fb40 <NetworkParams::callbackFunction(char const*)+0x118>)
 800faf0:	609a      	str	r2, [r3, #8]
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	f042 0204 	orr.w	r2, r2, #4
 800faf8:	601a      	str	r2, [r3, #0]
 800fafa:	e7ab      	b.n	800fa54 <NetworkParams::callbackFunction(char const*)+0x2c>
 800fafc:	4620      	mov	r0, r4
 800fafe:	4914      	ldr	r1, [pc, #80]	; (800fb50 <NetworkParams::callbackFunction(char const*)+0x128>)
 800fb00:	aa02      	add	r2, sp, #8
 800fb02:	f001 fcd7 	bl	80114b4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800fb06:	4d0e      	ldr	r5, [pc, #56]	; (800fb40 <NetworkParams::callbackFunction(char const*)+0x118>)
 800fb08:	b930      	cbnz	r0, 800fb18 <NetworkParams::callbackFunction(char const*)+0xf0>
 800fb0a:	9b02      	ldr	r3, [sp, #8]
 800fb0c:	60eb      	str	r3, [r5, #12]
 800fb0e:	682b      	ldr	r3, [r5, #0]
 800fb10:	f043 0308 	orr.w	r3, r3, #8
 800fb14:	602b      	str	r3, [r5, #0]
 800fb16:	e79d      	b.n	800fa54 <NetworkParams::callbackFunction(char const*)+0x2c>
 800fb18:	233f      	movs	r3, #63	; 0x3f
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	9303      	str	r3, [sp, #12]
 800fb1e:	490d      	ldr	r1, [pc, #52]	; (800fb54 <NetworkParams::callbackFunction(char const*)+0x12c>)
 800fb20:	ab03      	add	r3, sp, #12
 800fb22:	f105 0215 	add.w	r2, r5, #21
 800fb26:	f001 fc49 	bl	80113bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	d192      	bne.n	800fa54 <NetworkParams::callbackFunction(char const*)+0x2c>
 800fb2e:	9b03      	ldr	r3, [sp, #12]
 800fb30:	442b      	add	r3, r5
 800fb32:	7558      	strb	r0, [r3, #21]
 800fb34:	682b      	ldr	r3, [r5, #0]
 800fb36:	f043 0320 	orr.w	r3, r3, #32
 800fb3a:	e7eb      	b.n	800fb14 <NetworkParams::callbackFunction(char const*)+0xec>
 800fb3c:	080159b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, fp, ip, lr}
 800fb40:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800fb44:	08015990 	stmdaeq	r1, {r4, r7, r8, fp, ip, lr}
 800fb48:	08015975 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, fp, ip, lr}
 800fb4c:	080159a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, fp, ip, lr}
 800fb50:	08015980 	stmdaeq	r1, {r7, r8, fp, ip, lr}
 800fb54:	080159a0 	stmdaeq	r1, {r5, r7, r8, fp, ip, lr}

0800fb58 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 800fb58:	f7ff bf66 	b.w	800fa28 <NetworkParams::callbackFunction(char const*)>

0800fb5c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 800fb5c:	b530      	push	{r4, r5, lr}
 800fb5e:	4614      	mov	r4, r2
 800fb60:	461d      	mov	r5, r3
 800fb62:	b087      	sub	sp, #28
 800fb64:	2900      	cmp	r1, #0
 800fb66:	d040      	beq.n	800fbea <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x8e>
 800fb68:	225e      	movs	r2, #94	; 0x5e
 800fb6a:	4871      	ldr	r0, [pc, #452]	; (800fd30 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 800fb6c:	f002 fa5f 	bl	801202e <memmove>
 800fb70:	4622      	mov	r2, r4
 800fb72:	462b      	mov	r3, r5
 800fb74:	496f      	ldr	r1, [pc, #444]	; (800fd34 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 800fb76:	a803      	add	r0, sp, #12
 800fb78:	f001 fb48 	bl	801120c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800fb7c:	4c6c      	ldr	r4, [pc, #432]	; (800fd30 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 800fb7e:	6823      	ldr	r3, [r4, #0]
 800fb80:	0799      	lsls	r1, r3, #30
 800fb82:	bf5f      	itttt	pl
 800fb84:	4a6c      	ldrpl	r2, [pc, #432]	; (800fd38 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 800fb86:	6812      	ldrpl	r2, [r2, #0]
 800fb88:	6912      	ldrpl	r2, [r2, #16]
 800fb8a:	6062      	strpl	r2, [r4, #4]
 800fb8c:	075a      	lsls	r2, r3, #29
 800fb8e:	bf5f      	itttt	pl
 800fb90:	4a69      	ldrpl	r2, [pc, #420]	; (800fd38 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 800fb92:	6812      	ldrpl	r2, [r2, #0]
 800fb94:	6992      	ldrpl	r2, [r2, #24]
 800fb96:	60a2      	strpl	r2, [r4, #8]
 800fb98:	071d      	lsls	r5, r3, #28
 800fb9a:	bf5f      	itttt	pl
 800fb9c:	4a66      	ldrpl	r2, [pc, #408]	; (800fd38 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 800fb9e:	6812      	ldrpl	r2, [r2, #0]
 800fba0:	6952      	ldrpl	r2, [r2, #20]
 800fba2:	60e2      	strpl	r2, [r4, #12]
 800fba4:	0698      	lsls	r0, r3, #26
 800fba6:	d40c      	bmi.n	800fbc2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x66>
 800fba8:	223f      	movs	r2, #63	; 0x3f
 800fbaa:	4b63      	ldr	r3, [pc, #396]	; (800fd38 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 800fbac:	4863      	ldr	r0, [pc, #396]	; (800fd3c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	331b      	adds	r3, #27
 800fbb2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800fbb6:	b9f1      	cbnz	r1, 800fbf6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x9a>
 800fbb8:	f002 fa50 	bl	801205c <memset>
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800fbc2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800fbc6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800fbca:	42a9      	cmp	r1, r5
 800fbcc:	d226      	bcs.n	800fc1c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc0>
 800fbce:	9803      	ldr	r0, [sp, #12]
 800fbd0:	1a6d      	subs	r5, r5, r1
 800fbd2:	4408      	add	r0, r1
 800fbd4:	6821      	ldr	r1, [r4, #0]
 800fbd6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800fbda:	07c9      	lsls	r1, r1, #31
 800fbdc:	7d23      	ldrb	r3, [r4, #20]
 800fbde:	d40f      	bmi.n	800fc00 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa4>
 800fbe0:	b97a      	cbnz	r2, 800fc02 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa6>
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	4a56      	ldr	r2, [pc, #344]	; (800fd40 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 800fbe6:	4b57      	ldr	r3, [pc, #348]	; (800fd44 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 800fbe8:	e00e      	b.n	800fc08 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xac>
 800fbea:	6800      	ldr	r0, [r0, #0]
 800fbec:	4950      	ldr	r1, [pc, #320]	; (800fd30 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 800fbee:	6803      	ldr	r3, [r0, #0]
 800fbf0:	68db      	ldr	r3, [r3, #12]
 800fbf2:	4798      	blx	r3
 800fbf4:	e7bc      	b.n	800fb70 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x14>
 800fbf6:	3a01      	subs	r2, #1
 800fbf8:	f800 1b01 	strb.w	r1, [r0], #1
 800fbfc:	d1d9      	bne.n	800fbb2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x56>
 800fbfe:	e7dd      	b.n	800fbbc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x60>
 800fc00:	b30a      	cbz	r2, 800fc46 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xea>
 800fc02:	9300      	str	r3, [sp, #0]
 800fc04:	4a50      	ldr	r2, [pc, #320]	; (800fd48 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 800fc06:	4b4f      	ldr	r3, [pc, #316]	; (800fd44 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 800fc08:	4629      	mov	r1, r5
 800fc0a:	f7f8 ffcb 	bl	8008ba4 <snprintf>
 800fc0e:	4285      	cmp	r5, r0
 800fc10:	bfa2      	ittt	ge
 800fc12:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800fc16:	18c0      	addge	r0, r0, r3
 800fc18:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800fc1c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800fc20:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800fc24:	42a9      	cmp	r1, r5
 800fc26:	d221      	bcs.n	800fc6c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x110>
 800fc28:	9803      	ldr	r0, [sp, #12]
 800fc2a:	1a6d      	subs	r5, r5, r1
 800fc2c:	4408      	add	r0, r1
 800fc2e:	6821      	ldr	r1, [r4, #0]
 800fc30:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800fc34:	05c9      	lsls	r1, r1, #23
 800fc36:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800fc3a:	d408      	bmi.n	800fc4e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf2>
 800fc3c:	b94a      	cbnz	r2, 800fc52 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf6>
 800fc3e:	9300      	str	r3, [sp, #0]
 800fc40:	4a3f      	ldr	r2, [pc, #252]	; (800fd40 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 800fc42:	4b42      	ldr	r3, [pc, #264]	; (800fd4c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 800fc44:	e008      	b.n	800fc58 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfc>
 800fc46:	9300      	str	r3, [sp, #0]
 800fc48:	4a41      	ldr	r2, [pc, #260]	; (800fd50 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800fc4a:	4b3e      	ldr	r3, [pc, #248]	; (800fd44 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 800fc4c:	e7dc      	b.n	800fc08 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xac>
 800fc4e:	2a00      	cmp	r2, #0
 800fc50:	d03e      	beq.n	800fcd0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x174>
 800fc52:	9300      	str	r3, [sp, #0]
 800fc54:	4a3c      	ldr	r2, [pc, #240]	; (800fd48 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 800fc56:	4b3d      	ldr	r3, [pc, #244]	; (800fd4c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 800fc58:	4629      	mov	r1, r5
 800fc5a:	f7f8 ffa3 	bl	8008ba4 <snprintf>
 800fc5e:	4285      	cmp	r5, r0
 800fc60:	bfa2      	ittt	ge
 800fc62:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800fc66:	18c0      	addge	r0, r0, r3
 800fc68:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800fc6c:	4939      	ldr	r1, [pc, #228]	; (800fd54 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 800fc6e:	a803      	add	r0, sp, #12
 800fc70:	f001 fb52 	bl	8011318 <PropertiesBuilder::AddComment(char const*)>
 800fc74:	6823      	ldr	r3, [r4, #0]
 800fc76:	6862      	ldr	r2, [r4, #4]
 800fc78:	4937      	ldr	r1, [pc, #220]	; (800fd58 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 800fc7a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fc7e:	a803      	add	r0, sp, #12
 800fc80:	f001 fb06 	bl	8011290 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800fc84:	6823      	ldr	r3, [r4, #0]
 800fc86:	68a2      	ldr	r2, [r4, #8]
 800fc88:	4934      	ldr	r1, [pc, #208]	; (800fd5c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x200>)
 800fc8a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fc8e:	a803      	add	r0, sp, #12
 800fc90:	f001 fafe 	bl	8011290 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800fc94:	6823      	ldr	r3, [r4, #0]
 800fc96:	4932      	ldr	r1, [pc, #200]	; (800fd60 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>)
 800fc98:	68e2      	ldr	r2, [r4, #12]
 800fc9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fc9e:	a803      	add	r0, sp, #12
 800fca0:	f001 faf6 	bl	8011290 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800fca4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800fca8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800fcac:	42a9      	cmp	r1, r5
 800fcae:	d221      	bcs.n	800fcf4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x198>
 800fcb0:	6823      	ldr	r3, [r4, #0]
 800fcb2:	9803      	ldr	r0, [sp, #12]
 800fcb4:	f013 0f20 	tst.w	r3, #32
 800fcb8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800fcbc:	4b1f      	ldr	r3, [pc, #124]	; (800fd3c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 800fcbe:	4408      	add	r0, r1
 800fcc0:	eba5 0501 	sub.w	r5, r5, r1
 800fcc4:	d108      	bne.n	800fcd8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x17c>
 800fcc6:	b942      	cbnz	r2, 800fcda <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x17e>
 800fcc8:	9300      	str	r3, [sp, #0]
 800fcca:	4a26      	ldr	r2, [pc, #152]	; (800fd64 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x208>)
 800fccc:	4b26      	ldr	r3, [pc, #152]	; (800fd68 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800fcce:	e007      	b.n	800fce0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 800fcd0:	9300      	str	r3, [sp, #0]
 800fcd2:	4a1f      	ldr	r2, [pc, #124]	; (800fd50 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800fcd4:	4b1d      	ldr	r3, [pc, #116]	; (800fd4c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 800fcd6:	e7bf      	b.n	800fc58 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfc>
 800fcd8:	b32a      	cbz	r2, 800fd26 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ca>
 800fcda:	9300      	str	r3, [sp, #0]
 800fcdc:	4a23      	ldr	r2, [pc, #140]	; (800fd6c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800fcde:	4b22      	ldr	r3, [pc, #136]	; (800fd68 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800fce0:	4629      	mov	r1, r5
 800fce2:	f7f8 ff5f 	bl	8008ba4 <snprintf>
 800fce6:	4285      	cmp	r5, r0
 800fce8:	bfa2      	ittt	ge
 800fcea:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800fcee:	18c0      	addge	r0, r0, r3
 800fcf0:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800fcf4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800fcf8:	b17b      	cbz	r3, 800fd1a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1be>
 800fcfa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800fcfe:	9b03      	ldr	r3, [sp, #12]
 800fd00:	4413      	add	r3, r2
 800fd02:	227d      	movs	r2, #125	; 0x7d
 800fd04:	f803 2c01 	strb.w	r2, [r3, #-1]
 800fd08:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fd0c:	9903      	ldr	r1, [sp, #12]
 800fd0e:	54ca      	strb	r2, [r1, r3]
 800fd10:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800fd14:	3301      	adds	r3, #1
 800fd16:	f8ad 3012 	strh.w	r3, [sp, #18]
 800fd1a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800fd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd20:	601a      	str	r2, [r3, #0]
 800fd22:	b007      	add	sp, #28
 800fd24:	bd30      	pop	{r4, r5, pc}
 800fd26:	9300      	str	r3, [sp, #0]
 800fd28:	4a11      	ldr	r2, [pc, #68]	; (800fd70 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x214>)
 800fd2a:	4b0f      	ldr	r3, [pc, #60]	; (800fd68 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800fd2c:	e7d8      	b.n	800fce0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 800fd2e:	bf00      	nop
 800fd30:	2000a28c 	andcs	sl, r0, ip, lsl #5
 800fd34:	080159bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, fp, ip, lr}
 800fd38:	2000a288 	andcs	sl, r0, r8, lsl #5
 800fd3c:	2000a2a1 	andcs	sl, r0, r1, lsr #5
 800fd40:	08014303 	stmdaeq	r1, {r0, r1, r8, r9, lr}
 800fd44:	080159b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, fp, ip, lr}
 800fd48:	080142fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, lr}
 800fd4c:	08015990 	stmdaeq	r1, {r4, r7, r8, fp, ip, lr}
 800fd50:	08014304 	stmdaeq	r1, {r2, r8, r9, lr}
 800fd54:	0801596b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, fp, ip, lr}
 800fd58:	08015975 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, fp, ip, lr}
 800fd5c:	080159a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, fp, ip, lr}
 800fd60:	08015980 	stmdaeq	r1, {r7, r8, fp, ip, lr}
 800fd64:	080142f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, lr}
 800fd68:	080159a0 	stmdaeq	r1, {r5, r7, r8, fp, ip, lr}
 800fd6c:	080142e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, lr}
 800fd70:	080142f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r9, lr}

0800fd74 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 800fd74:	b513      	push	{r0, r1, r4, lr}
 800fd76:	6804      	ldr	r4, [r0, #0]
 800fd78:	b914      	cbnz	r4, 800fd80 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800fd7a:	601c      	str	r4, [r3, #0]
 800fd7c:	b002      	add	sp, #8
 800fd7e:	bd10      	pop	{r4, pc}
 800fd80:	9300      	str	r3, [sp, #0]
 800fd82:	4613      	mov	r3, r2
 800fd84:	460a      	mov	r2, r1
 800fd86:	2100      	movs	r1, #0
 800fd88:	f7ff fee8 	bl	800fb5c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 800fd8c:	e7f6      	b.n	800fd7c <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800fd8e <NetworkParams::Dump()>:
 800fd8e:	4770      	bx	lr

0800fd90 <memcpy.isra.0>:
 800fd90:	3801      	subs	r0, #1
 800fd92:	440a      	add	r2, r1
 800fd94:	4291      	cmp	r1, r2
 800fd96:	d100      	bne.n	800fd9a <memcpy.isra.0+0xa>
 800fd98:	4770      	bx	lr
 800fd9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd9e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800fda2:	e7f7      	b.n	800fd94 <memcpy.isra.0+0x4>

0800fda4 <arp_announce>:
 800fda4:	4803      	ldr	r0, [pc, #12]	; (800fdb4 <arp_announce+0x10>)
 800fda6:	69c3      	ldr	r3, [r0, #28]
 800fda8:	b113      	cbz	r3, 800fdb0 <arp_announce+0xc>
 800fdaa:	212a      	movs	r1, #42	; 0x2a
 800fdac:	f002 bfda 	b.w	8012d64 <emac_eth_send>
 800fdb0:	4770      	bx	lr
 800fdb2:	bf00      	nop
 800fdb4:	2000a2ec 	andcs	sl, r0, ip, ror #5

0800fdb8 <arp_handle_request>:
 800fdb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fdba:	2204      	movs	r2, #4
 800fdbc:	f100 0126 	add.w	r1, r0, #38	; 0x26
 800fdc0:	4604      	mov	r4, r0
 800fdc2:	eb0d 0002 	add.w	r0, sp, r2
 800fdc6:	f7ff ffe3 	bl	800fd90 <memcpy.isra.0>
 800fdca:	4b0d      	ldr	r3, [pc, #52]	; (800fe00 <arp_handle_request+0x48>)
 800fdcc:	9a01      	ldr	r2, [sp, #4]
 800fdce:	69db      	ldr	r3, [r3, #28]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d113      	bne.n	800fdfc <arp_handle_request+0x44>
 800fdd4:	2206      	movs	r2, #6
 800fdd6:	4d0b      	ldr	r5, [pc, #44]	; (800fe04 <arp_handle_request+0x4c>)
 800fdd8:	18a1      	adds	r1, r4, r2
 800fdda:	4628      	mov	r0, r5
 800fddc:	f7ff ffd8 	bl	800fd90 <memcpy.isra.0>
 800fde0:	f104 0116 	add.w	r1, r4, #22
 800fde4:	f105 0020 	add.w	r0, r5, #32
 800fde8:	2206      	movs	r2, #6
 800fdea:	f7ff ffd1 	bl	800fd90 <memcpy.isra.0>
 800fdee:	69e3      	ldr	r3, [r4, #28]
 800fdf0:	212a      	movs	r1, #42	; 0x2a
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 800fdf8:	f002 ffb4 	bl	8012d64 <emac_eth_send>
 800fdfc:	b003      	add	sp, #12
 800fdfe:	bd30      	pop	{r4, r5, pc}
 800fe00:	2000a2ec 	andcs	sl, r0, ip, ror #5
 800fe04:	2000a318 	andcs	sl, r0, r8, lsl r3

0800fe08 <arp_handle_reply>:
 800fe08:	69c1      	ldr	r1, [r0, #28]
 800fe0a:	3016      	adds	r0, #22
 800fe0c:	f000 b8ac 	b.w	800ff68 <arp_cache_update>

0800fe10 <arp_init>:
 800fe10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe14:	4604      	mov	r4, r0
 800fe16:	460d      	mov	r5, r1
 800fe18:	f000 f88c 	bl	800ff34 <arp_cache_init>
 800fe1c:	2206      	movs	r2, #6
 800fe1e:	4621      	mov	r1, r4
 800fe20:	482e      	ldr	r0, [pc, #184]	; (800fedc <arp_init+0xcc>)
 800fe22:	682f      	ldr	r7, [r5, #0]
 800fe24:	f7ff ffb4 	bl	800fd90 <memcpy.isra.0>
 800fe28:	4b2d      	ldr	r3, [pc, #180]	; (800fee0 <arp_init+0xd0>)
 800fe2a:	2507      	movs	r5, #7
 800fe2c:	461e      	mov	r6, r3
 800fe2e:	22ff      	movs	r2, #255	; 0xff
 800fe30:	3d01      	subs	r5, #1
 800fe32:	d146      	bne.n	800fec2 <arp_init+0xb2>
 800fe34:	4b2b      	ldr	r3, [pc, #172]	; (800fee4 <arp_init+0xd4>)
 800fe36:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800fee8 <arp_init+0xd8>
 800fe3a:	2206      	movs	r2, #6
 800fe3c:	e9c6 3803 	strd	r3, r8, [r6, #12]
 800fe40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe44:	4621      	mov	r1, r4
 800fe46:	4829      	ldr	r0, [pc, #164]	; (800feec <arp_init+0xdc>)
 800fe48:	82b3      	strh	r3, [r6, #20]
 800fe4a:	f7ff ffa1 	bl	800fd90 <memcpy.isra.0>
 800fe4e:	2307      	movs	r3, #7
 800fe50:	4a27      	ldr	r2, [pc, #156]	; (800fef0 <arp_init+0xe0>)
 800fe52:	61f7      	str	r7, [r6, #28]
 800fe54:	3b01      	subs	r3, #1
 800fe56:	d137      	bne.n	800fec8 <arp_init+0xb8>
 800fe58:	2206      	movs	r2, #6
 800fe5a:	4621      	mov	r1, r4
 800fe5c:	4825      	ldr	r0, [pc, #148]	; (800fef4 <arp_init+0xe4>)
 800fe5e:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 800fe62:	f7ff ff95 	bl	800fd90 <memcpy.isra.0>
 800fe66:	4a24      	ldr	r2, [pc, #144]	; (800fef8 <arp_init+0xe8>)
 800fe68:	2306      	movs	r3, #6
 800fe6a:	4615      	mov	r5, r2
 800fe6c:	21ff      	movs	r1, #255	; 0xff
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	d22d      	bcs.n	800fece <arp_init+0xbe>
 800fe72:	4b1c      	ldr	r3, [pc, #112]	; (800fee4 <arp_init+0xd4>)
 800fe74:	2206      	movs	r2, #6
 800fe76:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800fe7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe7e:	4621      	mov	r1, r4
 800fe80:	481e      	ldr	r0, [pc, #120]	; (800fefc <arp_init+0xec>)
 800fe82:	82ab      	strh	r3, [r5, #20]
 800fe84:	f7ff ff84 	bl	800fd90 <memcpy.isra.0>
 800fe88:	2307      	movs	r3, #7
 800fe8a:	2100      	movs	r1, #0
 800fe8c:	4a1c      	ldr	r2, [pc, #112]	; (800ff00 <arp_init+0xf0>)
 800fe8e:	61ef      	str	r7, [r5, #28]
 800fe90:	3b01      	subs	r3, #1
 800fe92:	d11f      	bne.n	800fed4 <arp_init+0xc4>
 800fe94:	2206      	movs	r2, #6
 800fe96:	4d1b      	ldr	r5, [pc, #108]	; (800ff04 <arp_init+0xf4>)
 800fe98:	4621      	mov	r1, r4
 800fe9a:	18a8      	adds	r0, r5, r2
 800fe9c:	f7ff ff78 	bl	800fd90 <memcpy.isra.0>
 800fea0:	4b10      	ldr	r3, [pc, #64]	; (800fee4 <arp_init+0xd4>)
 800fea2:	4621      	mov	r1, r4
 800fea4:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800fea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800feac:	f105 0016 	add.w	r0, r5, #22
 800feb0:	2206      	movs	r2, #6
 800feb2:	82ab      	strh	r3, [r5, #20]
 800feb4:	f7ff ff6c 	bl	800fd90 <memcpy.isra.0>
 800feb8:	61ef      	str	r7, [r5, #28]
 800feba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800febe:	f7ff bf71 	b.w	800fda4 <arp_announce>
 800fec2:	f803 2b01 	strb.w	r2, [r3], #1
 800fec6:	e7b3      	b.n	800fe30 <arp_init+0x20>
 800fec8:	f802 5b01 	strb.w	r5, [r2], #1
 800fecc:	e7c2      	b.n	800fe54 <arp_init+0x44>
 800fece:	f802 1b01 	strb.w	r1, [r2], #1
 800fed2:	e7cc      	b.n	800fe6e <arp_init+0x5e>
 800fed4:	f802 1b01 	strb.w	r1, [r2], #1
 800fed8:	e7da      	b.n	800fe90 <arp_init+0x80>
 800feda:	bf00      	nop
 800fedc:	2000a2f2 	strdcs	sl, [r0], -r2
 800fee0:	2000a2ec 	andcs	sl, r0, ip, ror #5
 800fee4:	01000608 	tsteq	r0, r8, lsl #12
 800fee8:	04060008 	streq	r0, [r6], #-8
 800feec:	2000a302 	andcs	sl, r0, r2, lsl #6
 800fef0:	2000a30c 	andcs	sl, r0, ip, lsl #6
 800fef4:	2000a34a 	andcs	sl, r0, sl, asr #6
 800fef8:	2000a344 	andcs	sl, r0, r4, asr #6
 800fefc:	2000a35a 	andcs	sl, r0, sl, asr r3
 800ff00:	2000a364 	andcs	sl, r0, r4, ror #6
 800ff04:	2000a318 	andcs	sl, r0, r8, lsl r3

0800ff08 <arp_send_request>:
 800ff08:	4b03      	ldr	r3, [pc, #12]	; (800ff18 <arp_send_request+0x10>)
 800ff0a:	212a      	movs	r1, #42	; 0x2a
 800ff0c:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 800ff10:	4618      	mov	r0, r3
 800ff12:	f002 bf27 	b.w	8012d64 <emac_eth_send>
 800ff16:	bf00      	nop
 800ff18:	2000a344 	andcs	sl, r0, r4, asr #6

0800ff1c <arp_handle>:
 800ff1c:	8a83      	ldrh	r3, [r0, #20]
 800ff1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff22:	d003      	beq.n	800ff2c <arp_handle+0x10>
 800ff24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff28:	d002      	beq.n	800ff30 <arp_handle+0x14>
 800ff2a:	4770      	bx	lr
 800ff2c:	f7ff bf44 	b.w	800fdb8 <arp_handle_request>
 800ff30:	f7ff bf6a 	b.w	800fe08 <arp_handle_reply>

0800ff34 <arp_cache_init>:
 800ff34:	2300      	movs	r3, #0
 800ff36:	4618      	mov	r0, r3
 800ff38:	4a09      	ldr	r2, [pc, #36]	; (800ff60 <arp_cache_init+0x2c>)
 800ff3a:	b510      	push	{r4, lr}
 800ff3c:	8013      	strh	r3, [r2, #0]
 800ff3e:	4a09      	ldr	r2, [pc, #36]	; (800ff64 <arp_cache_init+0x30>)
 800ff40:	4611      	mov	r1, r2
 800ff42:	f842 0c04 	str.w	r0, [r2, #-4]
 800ff46:	1d94      	adds	r4, r2, #6
 800ff48:	42a1      	cmp	r1, r4
 800ff4a:	d105      	bne.n	800ff58 <arp_cache_init+0x24>
 800ff4c:	3303      	adds	r3, #3
 800ff4e:	2b60      	cmp	r3, #96	; 0x60
 800ff50:	f102 020c 	add.w	r2, r2, #12
 800ff54:	d1f4      	bne.n	800ff40 <arp_cache_init+0xc>
 800ff56:	bd10      	pop	{r4, pc}
 800ff58:	f801 0b01 	strb.w	r0, [r1], #1
 800ff5c:	e7f4      	b.n	800ff48 <arp_cache_init+0x14>
 800ff5e:	bf00      	nop
 800ff60:	2000a4f0 	strdcs	sl, [r0], -r0
 800ff64:	2000a374 	andcs	sl, r0, r4, ror r3

0800ff68 <arp_cache_update>:
 800ff68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff6a:	4e11      	ldr	r6, [pc, #68]	; (800ffb0 <arp_cache_update+0x48>)
 800ff6c:	8833      	ldrh	r3, [r6, #0]
 800ff6e:	2b20      	cmp	r3, #32
 800ff70:	d018      	beq.n	800ffa4 <arp_cache_update+0x3c>
 800ff72:	2400      	movs	r4, #0
 800ff74:	220c      	movs	r2, #12
 800ff76:	4d0f      	ldr	r5, [pc, #60]	; (800ffb4 <arp_cache_update+0x4c>)
 800ff78:	b2a7      	uxth	r7, r4
 800ff7a:	42bb      	cmp	r3, r7
 800ff7c:	d80b      	bhi.n	800ff96 <arp_cache_update+0x2e>
 800ff7e:	fb02 5203 	mla	r2, r2, r3, r5
 800ff82:	1d84      	adds	r4, r0, #6
 800ff84:	3203      	adds	r2, #3
 800ff86:	42a0      	cmp	r0, r4
 800ff88:	d10d      	bne.n	800ffa6 <arp_cache_update+0x3e>
 800ff8a:	220c      	movs	r2, #12
 800ff8c:	435a      	muls	r2, r3
 800ff8e:	3301      	adds	r3, #1
 800ff90:	50a9      	str	r1, [r5, r2]
 800ff92:	8033      	strh	r3, [r6, #0]
 800ff94:	e006      	b.n	800ffa4 <arp_cache_update+0x3c>
 800ff96:	3401      	adds	r4, #1
 800ff98:	fb02 5704 	mla	r7, r2, r4, r5
 800ff9c:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 800ffa0:	428f      	cmp	r7, r1
 800ffa2:	d1e9      	bne.n	800ff78 <arp_cache_update+0x10>
 800ffa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffa6:	f810 7b01 	ldrb.w	r7, [r0], #1
 800ffaa:	f802 7f01 	strb.w	r7, [r2, #1]!
 800ffae:	e7ea      	b.n	800ff86 <arp_cache_update+0x1e>
 800ffb0:	2000a4f0 	strdcs	sl, [r0], -r0
 800ffb4:	2000a370 	andcs	sl, r0, r0, ror r3

0800ffb8 <arp_cache_lookup>:
 800ffb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	4606      	mov	r6, r0
 800ffc0:	460c      	mov	r4, r1
 800ffc2:	200c      	movs	r0, #12
 800ffc4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 801004c <arp_cache_lookup+0x94>
 800ffc8:	fb00 f302 	mul.w	r3, r0, r2
 800ffcc:	f853 1008 	ldr.w	r1, [r3, r8]
 800ffd0:	42b1      	cmp	r1, r6
 800ffd2:	d10d      	bne.n	800fff0 <arp_cache_lookup+0x38>
 800ffd4:	3304      	adds	r3, #4
 800ffd6:	4443      	add	r3, r8
 800ffd8:	3c01      	subs	r4, #1
 800ffda:	1d9a      	adds	r2, r3, #6
 800ffdc:	4293      	cmp	r3, r2
 800ffde:	d102      	bne.n	800ffe6 <arp_cache_lookup+0x2e>
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffe6:	f813 1b01 	ldrb.w	r1, [r3], #1
 800ffea:	f804 1f01 	strb.w	r1, [r4, #1]!
 800ffee:	e7f5      	b.n	800ffdc <arp_cache_lookup+0x24>
 800fff0:	b111      	cbz	r1, 800fff8 <arp_cache_lookup+0x40>
 800fff2:	3201      	adds	r2, #1
 800fff4:	2a20      	cmp	r2, #32
 800fff6:	d1e7      	bne.n	800ffc8 <arp_cache_lookup+0x10>
 800fff8:	2704      	movs	r7, #4
 800fffa:	f8df a054 	ldr.w	sl, [pc, #84]	; 8010050 <arp_cache_lookup+0x98>
 800fffe:	f8ba 5000 	ldrh.w	r5, [sl]
 8010002:	3f01      	subs	r7, #1
 8010004:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8010008:	d101      	bne.n	801000e <arp_cache_lookup+0x56>
 801000a:	463e      	mov	r6, r7
 801000c:	e7e8      	b.n	800ffe0 <arp_cache_lookup+0x28>
 801000e:	4630      	mov	r0, r6
 8010010:	f7ff ff7a 	bl	800ff08 <arp_send_request>
 8010014:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8010018:	f1b9 0901 	subs.w	r9, r9, #1
 801001c:	f8ba 3000 	ldrh.w	r3, [sl]
 8010020:	d011      	beq.n	8010046 <arp_cache_lookup+0x8e>
 8010022:	429d      	cmp	r5, r3
 8010024:	d00c      	beq.n	8010040 <arp_cache_lookup+0x88>
 8010026:	230c      	movs	r3, #12
 8010028:	fb03 8505 	mla	r5, r3, r5, r8
 801002c:	3c01      	subs	r4, #1
 801002e:	1d2b      	adds	r3, r5, #4
 8010030:	350a      	adds	r5, #10
 8010032:	42ab      	cmp	r3, r5
 8010034:	d0d4      	beq.n	800ffe0 <arp_cache_lookup+0x28>
 8010036:	f813 2b01 	ldrb.w	r2, [r3], #1
 801003a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801003e:	e7f8      	b.n	8010032 <arp_cache_lookup+0x7a>
 8010040:	f7fe f89c 	bl	800e17c <net_handle>
 8010044:	e7e8      	b.n	8010018 <arp_cache_lookup+0x60>
 8010046:	429d      	cmp	r5, r3
 8010048:	d0db      	beq.n	8010002 <arp_cache_lookup+0x4a>
 801004a:	e7ec      	b.n	8010026 <arp_cache_lookup+0x6e>
 801004c:	2000a370 	andcs	sl, r0, r0, ror r3
 8010050:	2000a4f0 	strdcs	sl, [r0], -r0

08010054 <_parse_response>:
 8010054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010058:	460c      	mov	r4, r1
 801005a:	4e5b      	ldr	r6, [pc, #364]	; (80101c8 <_parse_response+0x174>)
 801005c:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8010060:	6837      	ldr	r7, [r6, #0]
 8010062:	b2c5      	uxtb	r5, r0
 8010064:	f10d 0826 	add.w	r8, sp, #38	; 0x26
 8010068:	f7fe f888 	bl	800e17c <net_handle>
 801006c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8010070:	4628      	mov	r0, r5
 8010072:	f8cd 8000 	str.w	r8, [sp]
 8010076:	ab0a      	add	r3, sp, #40	; 0x28
 8010078:	a90b      	add	r1, sp, #44	; 0x2c
 801007a:	f7fe fd83 	bl	800eb84 <udp_recv>
 801007e:	2800      	cmp	r0, #0
 8010080:	d05f      	beq.n	8010142 <_parse_response+0xee>
 8010082:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8010086:	2b43      	cmp	r3, #67	; 0x43
 8010088:	d15b      	bne.n	8010142 <_parse_response+0xee>
 801008a:	aa12      	add	r2, sp, #72	; 0x48
 801008c:	1e63      	subs	r3, r4, #1
 801008e:	1d61      	adds	r1, r4, #5
 8010090:	428b      	cmp	r3, r1
 8010092:	d150      	bne.n	8010136 <_parse_response+0xe2>
 8010094:	2100      	movs	r1, #0
 8010096:	ab0b      	add	r3, sp, #44	; 0x2c
 8010098:	181c      	adds	r4, r3, r0
 801009a:	4608      	mov	r0, r1
 801009c:	4b4b      	ldr	r3, [pc, #300]	; (80101cc <_parse_response+0x178>)
 801009e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80100a2:	781a      	ldrb	r2, [r3, #0]
 80100a4:	f893 b001 	ldrb.w	fp, [r3, #1]
 80100a8:	f893 c002 	ldrb.w	ip, [r3, #2]
 80100ac:	78dd      	ldrb	r5, [r3, #3]
 80100ae:	4b48      	ldr	r3, [pc, #288]	; (80101d0 <_parse_response+0x17c>)
 80100b0:	9207      	str	r2, [sp, #28]
 80100b2:	781a      	ldrb	r2, [r3, #0]
 80100b4:	789f      	ldrb	r7, [r3, #2]
 80100b6:	78de      	ldrb	r6, [r3, #3]
 80100b8:	9206      	str	r2, [sp, #24]
 80100ba:	785a      	ldrb	r2, [r3, #1]
 80100bc:	4b45      	ldr	r3, [pc, #276]	; (80101d4 <_parse_response+0x180>)
 80100be:	9203      	str	r2, [sp, #12]
 80100c0:	f893 a000 	ldrb.w	sl, [r3]
 80100c4:	f893 9001 	ldrb.w	r9, [r3, #1]
 80100c8:	f893 8002 	ldrb.w	r8, [r3, #2]
 80100cc:	f893 e003 	ldrb.w	lr, [r3, #3]
 80100d0:	ab47      	add	r3, sp, #284	; 0x11c
 80100d2:	42a3      	cmp	r3, r4
 80100d4:	d33f      	bcc.n	8010156 <_parse_response+0x102>
 80100d6:	9b04      	ldr	r3, [sp, #16]
 80100d8:	b143      	cbz	r3, 80100ec <_parse_response+0x98>
 80100da:	4b3e      	ldr	r3, [pc, #248]	; (80101d4 <_parse_response+0x180>)
 80100dc:	f883 a000 	strb.w	sl, [r3]
 80100e0:	f883 9001 	strb.w	r9, [r3, #1]
 80100e4:	f883 8002 	strb.w	r8, [r3, #2]
 80100e8:	f883 e003 	strb.w	lr, [r3, #3]
 80100ec:	9b05      	ldr	r3, [sp, #20]
 80100ee:	b133      	cbz	r3, 80100fe <_parse_response+0xaa>
 80100f0:	4b37      	ldr	r3, [pc, #220]	; (80101d0 <_parse_response+0x17c>)
 80100f2:	9a06      	ldr	r2, [sp, #24]
 80100f4:	709f      	strb	r7, [r3, #2]
 80100f6:	701a      	strb	r2, [r3, #0]
 80100f8:	9a03      	ldr	r2, [sp, #12]
 80100fa:	70de      	strb	r6, [r3, #3]
 80100fc:	705a      	strb	r2, [r3, #1]
 80100fe:	b139      	cbz	r1, 8010110 <_parse_response+0xbc>
 8010100:	4b32      	ldr	r3, [pc, #200]	; (80101cc <_parse_response+0x178>)
 8010102:	9a07      	ldr	r2, [sp, #28]
 8010104:	f883 b001 	strb.w	fp, [r3, #1]
 8010108:	701a      	strb	r2, [r3, #0]
 801010a:	f883 c002 	strb.w	ip, [r3, #2]
 801010e:	70dd      	strb	r5, [r3, #3]
 8010110:	2802      	cmp	r0, #2
 8010112:	d10c      	bne.n	801012e <_parse_response+0xda>
 8010114:	4b30      	ldr	r3, [pc, #192]	; (80101d8 <_parse_response+0x184>)
 8010116:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801011a:	701a      	strb	r2, [r3, #0]
 801011c:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8010120:	705a      	strb	r2, [r3, #1]
 8010122:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 8010126:	709a      	strb	r2, [r3, #2]
 8010128:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 801012c:	70da      	strb	r2, [r3, #3]
 801012e:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8010132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010136:	f812 cb01 	ldrb.w	ip, [r2], #1
 801013a:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801013e:	45e6      	cmp	lr, ip
 8010140:	d0a6      	beq.n	8010090 <_parse_response+0x3c>
 8010142:	6833      	ldr	r3, [r6, #0]
 8010144:	1bdb      	subs	r3, r3, r7
 8010146:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801014a:	d38b      	bcc.n	8010064 <_parse_response+0x10>
 801014c:	2800      	cmp	r0, #0
 801014e:	d1a1      	bne.n	8010094 <_parse_response+0x40>
 8010150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010154:	e7eb      	b.n	801012e <_parse_response+0xda>
 8010156:	781a      	ldrb	r2, [r3, #0]
 8010158:	2a35      	cmp	r2, #53	; 0x35
 801015a:	d011      	beq.n	8010180 <_parse_response+0x12c>
 801015c:	d808      	bhi.n	8010170 <_parse_response+0x11c>
 801015e:	2a01      	cmp	r2, #1
 8010160:	d011      	beq.n	8010186 <_parse_response+0x132>
 8010162:	2a03      	cmp	r2, #3
 8010164:	d01a      	beq.n	801019c <_parse_response+0x148>
 8010166:	b14a      	cbz	r2, 801017c <_parse_response+0x128>
 8010168:	1c9a      	adds	r2, r3, #2
 801016a:	785b      	ldrb	r3, [r3, #1]
 801016c:	4413      	add	r3, r2
 801016e:	e7b0      	b.n	80100d2 <_parse_response+0x7e>
 8010170:	2a36      	cmp	r2, #54	; 0x36
 8010172:	d01f      	beq.n	80101b4 <_parse_response+0x160>
 8010174:	2aff      	cmp	r2, #255	; 0xff
 8010176:	d1f7      	bne.n	8010168 <_parse_response+0x114>
 8010178:	4623      	mov	r3, r4
 801017a:	e7aa      	b.n	80100d2 <_parse_response+0x7e>
 801017c:	3301      	adds	r3, #1
 801017e:	e7a8      	b.n	80100d2 <_parse_response+0x7e>
 8010180:	7898      	ldrb	r0, [r3, #2]
 8010182:	3303      	adds	r3, #3
 8010184:	e7a5      	b.n	80100d2 <_parse_response+0x7e>
 8010186:	f893 a002 	ldrb.w	sl, [r3, #2]
 801018a:	f893 9003 	ldrb.w	r9, [r3, #3]
 801018e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8010192:	f893 e005 	ldrb.w	lr, [r3, #5]
 8010196:	9204      	str	r2, [sp, #16]
 8010198:	3306      	adds	r3, #6
 801019a:	e79a      	b.n	80100d2 <_parse_response+0x7e>
 801019c:	789a      	ldrb	r2, [r3, #2]
 801019e:	791f      	ldrb	r7, [r3, #4]
 80101a0:	9206      	str	r2, [sp, #24]
 80101a2:	78da      	ldrb	r2, [r3, #3]
 80101a4:	795e      	ldrb	r6, [r3, #5]
 80101a6:	9203      	str	r2, [sp, #12]
 80101a8:	785a      	ldrb	r2, [r3, #1]
 80101aa:	4413      	add	r3, r2
 80101ac:	2201      	movs	r2, #1
 80101ae:	3302      	adds	r3, #2
 80101b0:	9205      	str	r2, [sp, #20]
 80101b2:	e78e      	b.n	80100d2 <_parse_response+0x7e>
 80101b4:	789a      	ldrb	r2, [r3, #2]
 80101b6:	f893 b003 	ldrb.w	fp, [r3, #3]
 80101ba:	f893 c004 	ldrb.w	ip, [r3, #4]
 80101be:	795d      	ldrb	r5, [r3, #5]
 80101c0:	2101      	movs	r1, #1
 80101c2:	9207      	str	r2, [sp, #28]
 80101c4:	3306      	adds	r3, #6
 80101c6:	e784      	b.n	80100d2 <_parse_response+0x7e>
 80101c8:	2000a9c4 	andcs	sl, r0, r4, asr #19
 80101cc:	2000a724 	andcs	sl, r0, r4, lsr #14
 80101d0:	2000a4f4 	strdcs	sl, [r0], -r4
 80101d4:	2000a4fc 	strdcs	sl, [r0], -ip
 80101d8:	2000a4f8 	strdcs	sl, [r0], -r8

080101dc <memcpy.isra.0>:
 80101dc:	3801      	subs	r0, #1
 80101de:	440a      	add	r2, r1
 80101e0:	4291      	cmp	r1, r2
 80101e2:	d100      	bne.n	80101e6 <memcpy.isra.0+0xa>
 80101e4:	4770      	bx	lr
 80101e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101ea:	f800 3f01 	strb.w	r3, [r0, #1]!
 80101ee:	e7f7      	b.n	80101e0 <memcpy.isra.0+0x4>

080101f0 <dhcp_client>:
 80101f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f4:	b087      	sub	sp, #28
 80101f6:	9203      	str	r2, [sp, #12]
 80101f8:	4a77      	ldr	r2, [pc, #476]	; (80103d8 <dhcp_client+0x1e8>)
 80101fa:	460f      	mov	r7, r1
 80101fc:	4605      	mov	r5, r0
 80101fe:	f44f 7309 	mov.w	r3, #548	; 0x224
 8010202:	4614      	mov	r4, r2
 8010204:	2100      	movs	r1, #0
 8010206:	3b01      	subs	r3, #1
 8010208:	f802 1b01 	strb.w	r1, [r2], #1
 801020c:	d1fb      	bne.n	8010206 <dhcp_client+0x16>
 801020e:	f240 1301 	movw	r3, #257	; 0x101
 8010212:	2206      	movs	r2, #6
 8010214:	4629      	mov	r1, r5
 8010216:	4871      	ldr	r0, [pc, #452]	; (80103dc <dhcp_client+0x1ec>)
 8010218:	8023      	strh	r3, [r4, #0]
 801021a:	70a2      	strb	r2, [r4, #2]
 801021c:	f7ff ffde 	bl	80101dc <memcpy.isra.0>
 8010220:	4b6f      	ldr	r3, [pc, #444]	; (80103e0 <dhcp_client+0x1f0>)
 8010222:	2044      	movs	r0, #68	; 0x44
 8010224:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8010228:	f240 1335 	movw	r3, #309	; 0x135
 801022c:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8010230:	f7fe fc6e 	bl	800eb10 <udp_bind>
 8010234:	1e06      	subs	r6, r0, #0
 8010236:	f2c0 80c9 	blt.w	80103cc <dhcp_client+0x1dc>
 801023a:	f04f 0915 	mov.w	r9, #21
 801023e:	f8df a198 	ldr.w	sl, [pc, #408]	; 80103d8 <dhcp_client+0x1e8>
 8010242:	f1b9 0901 	subs.w	r9, r9, #1
 8010246:	d11f      	bne.n	8010288 <dhcp_client+0x98>
 8010248:	464c      	mov	r4, r9
 801024a:	2044      	movs	r0, #68	; 0x44
 801024c:	f7fe fc7a 	bl	800eb44 <udp_unbind>
 8010250:	2c00      	cmp	r4, #0
 8010252:	f000 80be 	beq.w	80103d2 <dhcp_client+0x1e2>
 8010256:	2204      	movs	r2, #4
 8010258:	4962      	ldr	r1, [pc, #392]	; (80103e4 <dhcp_client+0x1f4>)
 801025a:	a805      	add	r0, sp, #20
 801025c:	f7ff ffbe 	bl	80101dc <memcpy.isra.0>
 8010260:	9b05      	ldr	r3, [sp, #20]
 8010262:	2204      	movs	r2, #4
 8010264:	4960      	ldr	r1, [pc, #384]	; (80103e8 <dhcp_client+0x1f8>)
 8010266:	603b      	str	r3, [r7, #0]
 8010268:	a805      	add	r0, sp, #20
 801026a:	f7ff ffb7 	bl	80101dc <memcpy.isra.0>
 801026e:	9b05      	ldr	r3, [sp, #20]
 8010270:	a805      	add	r0, sp, #20
 8010272:	60bb      	str	r3, [r7, #8]
 8010274:	2204      	movs	r2, #4
 8010276:	495d      	ldr	r1, [pc, #372]	; (80103ec <dhcp_client+0x1fc>)
 8010278:	f7ff ffb0 	bl	80101dc <memcpy.isra.0>
 801027c:	2000      	movs	r0, #0
 801027e:	9b05      	ldr	r3, [sp, #20]
 8010280:	607b      	str	r3, [r7, #4]
 8010282:	b007      	add	sp, #28
 8010284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010288:	f643 5301 	movw	r3, #15617	; 0x3d01
 801028c:	f240 1807 	movw	r8, #263	; 0x107
 8010290:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8010294:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8010298:	782b      	ldrb	r3, [r5, #0]
 801029a:	4a55      	ldr	r2, [pc, #340]	; (80103f0 <dhcp_client+0x200>)
 801029c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 80102a0:	786b      	ldrb	r3, [r5, #1]
 80102a2:	fa5f fb86 	uxtb.w	fp, r6
 80102a6:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 80102aa:	78ab      	ldrb	r3, [r5, #2]
 80102ac:	4651      	mov	r1, sl
 80102ae:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 80102b2:	78eb      	ldrb	r3, [r5, #3]
 80102b4:	4658      	mov	r0, fp
 80102b6:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 80102ba:	792b      	ldrb	r3, [r5, #4]
 80102bc:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 80102c0:	796b      	ldrb	r3, [r5, #5]
 80102c2:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 80102c6:	4b4b      	ldr	r3, [pc, #300]	; (80103f4 <dhcp_client+0x204>)
 80102c8:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 80102cc:	23ff      	movs	r3, #255	; 0xff
 80102ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80102d2:	2343      	movs	r3, #67	; 0x43
 80102d4:	f240 1205 	movw	r2, #261	; 0x105
 80102d8:	9300      	str	r3, [sp, #0]
 80102da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102de:	f7fe fcad 	bl	800ec3c <udp_send>
 80102e2:	4629      	mov	r1, r5
 80102e4:	4630      	mov	r0, r6
 80102e6:	f7ff feb5 	bl	8010054 <_parse_response>
 80102ea:	2802      	cmp	r0, #2
 80102ec:	d1a9      	bne.n	8010242 <dhcp_client+0x52>
 80102ee:	f643 5303 	movw	r3, #15619	; 0x3d03
 80102f2:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 80102f6:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 80102fa:	782b      	ldrb	r3, [r5, #0]
 80102fc:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80103f8 <dhcp_client+0x208>
 8010300:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8010304:	786b      	ldrb	r3, [r5, #1]
 8010306:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 801030a:	78ab      	ldrb	r3, [r5, #2]
 801030c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8010310:	78eb      	ldrb	r3, [r5, #3]
 8010312:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8010316:	792b      	ldrb	r3, [r5, #4]
 8010318:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 801031c:	796b      	ldrb	r3, [r5, #5]
 801031e:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8010322:	f240 4332 	movw	r3, #1074	; 0x432
 8010326:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 801032a:	4b2e      	ldr	r3, [pc, #184]	; (80103e4 <dhcp_client+0x1f4>)
 801032c:	881a      	ldrh	r2, [r3, #0]
 801032e:	885b      	ldrh	r3, [r3, #2]
 8010330:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8010334:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8010338:	f240 4336 	movw	r3, #1078	; 0x436
 801033c:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8010340:	4b2e      	ldr	r3, [pc, #184]	; (80103fc <dhcp_client+0x20c>)
 8010342:	221e      	movs	r2, #30
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 801034a:	230c      	movs	r3, #12
 801034c:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8010350:	9b03      	ldr	r3, [sp, #12]
 8010352:	1e58      	subs	r0, r3, #1
 8010354:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010358:	f1a2 0e1e 	sub.w	lr, r2, #30
 801035c:	1c51      	adds	r1, r2, #1
 801035e:	bb8b      	cbnz	r3, 80103c4 <dhcp_client+0x1d4>
 8010360:	2037      	movs	r0, #55	; 0x37
 8010362:	18a3      	adds	r3, r4, r2
 8010364:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8010368:	2006      	movs	r0, #6
 801036a:	4421      	add	r1, r4
 801036c:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8010370:	2103      	movs	r1, #3
 8010372:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8010376:	210f      	movs	r1, #15
 8010378:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 801037c:	213a      	movs	r1, #58	; 0x3a
 801037e:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8010382:	213b      	movs	r1, #59	; 0x3b
 8010384:	f04f 0801 	mov.w	r8, #1
 8010388:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 801038c:	21ff      	movs	r1, #255	; 0xff
 801038e:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8010392:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8010396:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 801039a:	2343      	movs	r3, #67	; 0x43
 801039c:	32f5      	adds	r2, #245	; 0xf5
 801039e:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 80103a2:	4651      	mov	r1, sl
 80103a4:	9300      	str	r3, [sp, #0]
 80103a6:	b292      	uxth	r2, r2
 80103a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103ac:	4658      	mov	r0, fp
 80103ae:	f7fe fc45 	bl	800ec3c <udp_send>
 80103b2:	4629      	mov	r1, r5
 80103b4:	4630      	mov	r0, r6
 80103b6:	f7ff fe4d 	bl	8010054 <_parse_response>
 80103ba:	2805      	cmp	r0, #5
 80103bc:	f47f af41 	bne.w	8010242 <dhcp_client+0x52>
 80103c0:	4644      	mov	r4, r8
 80103c2:	e742      	b.n	801024a <dhcp_client+0x5a>
 80103c4:	460a      	mov	r2, r1
 80103c6:	f80c 3b01 	strb.w	r3, [ip], #1
 80103ca:	e7c3      	b.n	8010354 <dhcp_client+0x164>
 80103cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103d0:	e757      	b.n	8010282 <dhcp_client+0x92>
 80103d2:	f06f 0001 	mvn.w	r0, #1
 80103d6:	e754      	b.n	8010282 <dhcp_client+0x92>
 80103d8:	2000a500 	andcs	sl, r0, r0, lsl #10
 80103dc:	2000a51c 	andcs	sl, r0, ip, lsl r5
 80103e0:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 80103e4:	2000a4f8 	strdcs	sl, [r0], -r8
 80103e8:	2000a4f4 	strdcs	sl, [r0], -r4
 80103ec:	2000a4fc 	strdcs	sl, [r0], -ip
 80103f0:	03010637 	movweq	r0, #5687	; 0x1637
 80103f4:	3b3a0f06 	blcc	8e94014 <__exidx_end+0xe7de8c>
 80103f8:	2000a60a 	andcs	sl, r0, sl, lsl #12
 80103fc:	2000a724 	andcs	sl, r0, r4, lsr #14

08010400 <dhcp_client_release>:
 8010400:	b507      	push	{r0, r1, r2, lr}
 8010402:	2044      	movs	r0, #68	; 0x44
 8010404:	f7fe fb84 	bl	800eb10 <udp_bind>
 8010408:	f243 6307 	movw	r3, #13831	; 0x3607
 801040c:	4911      	ldr	r1, [pc, #68]	; (8010454 <dhcp_client_release+0x54>)
 801040e:	b2c0      	uxtb	r0, r0
 8010410:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8010414:	2304      	movs	r3, #4
 8010416:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 801041a:	4b0f      	ldr	r3, [pc, #60]	; (8010458 <dhcp_client_release+0x58>)
 801041c:	781a      	ldrb	r2, [r3, #0]
 801041e:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8010422:	785a      	ldrb	r2, [r3, #1]
 8010424:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8010428:	789a      	ldrb	r2, [r3, #2]
 801042a:	78db      	ldrb	r3, [r3, #3]
 801042c:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8010430:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8010434:	23ff      	movs	r3, #255	; 0xff
 8010436:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 801043a:	2343      	movs	r3, #67	; 0x43
 801043c:	22fa      	movs	r2, #250	; 0xfa
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010444:	f7fe fbfa 	bl	800ec3c <udp_send>
 8010448:	2044      	movs	r0, #68	; 0x44
 801044a:	b003      	add	sp, #12
 801044c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010450:	f7fe bb78 	b.w	800eb44 <udp_unbind>
 8010454:	2000a500 	andcs	sl, r0, r0, lsl #10
 8010458:	2000a724 	andcs	sl, r0, r4, lsr #14

0801045c <memcpy.isra.0>:
 801045c:	3801      	subs	r0, #1
 801045e:	440a      	add	r2, r1
 8010460:	4291      	cmp	r1, r2
 8010462:	d100      	bne.n	8010466 <memcpy.isra.0+0xa>
 8010464:	4770      	bx	lr
 8010466:	f811 3b01 	ldrb.w	r3, [r1], #1
 801046a:	f800 3f01 	strb.w	r3, [r0, #1]!
 801046e:	e7f7      	b.n	8010460 <memcpy.isra.0+0x4>

08010470 <_send_report>:
 8010470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010472:	491c      	ldr	r1, [pc, #112]	; (80104e4 <_send_report+0x74>)
 8010474:	4c1c      	ldr	r4, [pc, #112]	; (80104e8 <_send_report+0x78>)
 8010476:	f3c0 2306 	ubfx	r3, r0, #8, #7
 801047a:	9001      	str	r0, [sp, #4]
 801047c:	70cb      	strb	r3, [r1, #3]
 801047e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010482:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8010486:	710b      	strb	r3, [r1, #4]
 8010488:	7148      	strb	r0, [r1, #5]
 801048a:	2206      	movs	r2, #6
 801048c:	4620      	mov	r0, r4
 801048e:	f7ff ffe5 	bl	801045c <memcpy.isra.0>
 8010492:	2204      	movs	r2, #4
 8010494:	2700      	movs	r7, #0
 8010496:	4d15      	ldr	r5, [pc, #84]	; (80104ec <_send_report+0x7c>)
 8010498:	eb0d 0102 	add.w	r1, sp, r2
 801049c:	882b      	ldrh	r3, [r5, #0]
 801049e:	f104 001e 	add.w	r0, r4, #30
 80104a2:	f104 060e 	add.w	r6, r4, #14
 80104a6:	8263      	strh	r3, [r4, #18]
 80104a8:	f7ff ffd8 	bl	801045c <memcpy.isra.0>
 80104ac:	2118      	movs	r1, #24
 80104ae:	4630      	mov	r0, r6
 80104b0:	8327      	strh	r7, [r4, #24]
 80104b2:	f000 f9b7 	bl	8010824 <net_chksum>
 80104b6:	2204      	movs	r2, #4
 80104b8:	8320      	strh	r0, [r4, #24]
 80104ba:	eb0d 0102 	add.w	r1, sp, r2
 80104be:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80104c2:	f7ff ffcb 	bl	801045c <memcpy.isra.0>
 80104c6:	2120      	movs	r1, #32
 80104c8:	4630      	mov	r0, r6
 80104ca:	8527      	strh	r7, [r4, #40]	; 0x28
 80104cc:	f000 f9aa 	bl	8010824 <net_chksum>
 80104d0:	212e      	movs	r1, #46	; 0x2e
 80104d2:	8520      	strh	r0, [r4, #40]	; 0x28
 80104d4:	4620      	mov	r0, r4
 80104d6:	f002 fc45 	bl	8012d64 <emac_eth_send>
 80104da:	882b      	ldrh	r3, [r5, #0]
 80104dc:	3301      	adds	r3, #1
 80104de:	802b      	strh	r3, [r5, #0]
 80104e0:	b003      	add	sp, #12
 80104e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104e4:	2000a880 	andcs	sl, r0, r0, lsl #17
 80104e8:	2000a888 	andcs	sl, r0, r8, lsl #17
 80104ec:	2000a848 	andcs	sl, r0, r8, asr #16

080104f0 <igmp_set_ip>:
 80104f0:	b507      	push	{r0, r1, r2, lr}
 80104f2:	2204      	movs	r2, #4
 80104f4:	6803      	ldr	r3, [r0, #0]
 80104f6:	eb0d 0102 	add.w	r1, sp, r2
 80104fa:	4806      	ldr	r0, [pc, #24]	; (8010514 <igmp_set_ip+0x24>)
 80104fc:	9301      	str	r3, [sp, #4]
 80104fe:	f7ff ffad 	bl	801045c <memcpy.isra.0>
 8010502:	2204      	movs	r2, #4
 8010504:	4804      	ldr	r0, [pc, #16]	; (8010518 <igmp_set_ip+0x28>)
 8010506:	eb0d 0102 	add.w	r1, sp, r2
 801050a:	f7ff ffa7 	bl	801045c <memcpy.isra.0>
 801050e:	b003      	add	sp, #12
 8010510:	f85d fb04 	ldr.w	pc, [sp], #4
 8010514:	2000a8a2 	andcs	sl, r0, r2, lsr #17
 8010518:	2000a86a 	andcs	sl, r0, sl, ror #16

0801051c <igmp_init>:
 801051c:	2200      	movs	r2, #0
 801051e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010522:	4605      	mov	r5, r0
 8010524:	4608      	mov	r0, r1
 8010526:	4611      	mov	r1, r2
 8010528:	4b23      	ldr	r3, [pc, #140]	; (80105b8 <igmp_init+0x9c>)
 801052a:	f103 0408 	add.w	r4, r3, #8
 801052e:	42a3      	cmp	r3, r4
 8010530:	d13e      	bne.n	80105b0 <igmp_init+0x94>
 8010532:	3201      	adds	r2, #1
 8010534:	2a24      	cmp	r2, #36	; 0x24
 8010536:	d1f8      	bne.n	801052a <igmp_init+0xe>
 8010538:	2600      	movs	r6, #0
 801053a:	4b20      	ldr	r3, [pc, #128]	; (80105bc <igmp_init+0xa0>)
 801053c:	4c20      	ldr	r4, [pc, #128]	; (80105c0 <igmp_init+0xa4>)
 801053e:	601e      	str	r6, [r3, #0]
 8010540:	4b20      	ldr	r3, [pc, #128]	; (80105c4 <igmp_init+0xa8>)
 8010542:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8010546:	801e      	strh	r6, [r3, #0]
 8010548:	f7ff ffd2 	bl	80104f0 <igmp_set_ip>
 801054c:	2201      	movs	r2, #1
 801054e:	4b1e      	ldr	r3, [pc, #120]	; (80105c8 <igmp_init+0xac>)
 8010550:	4629      	mov	r1, r5
 8010552:	801a      	strh	r2, [r3, #0]
 8010554:	225e      	movs	r2, #94	; 0x5e
 8010556:	709a      	strb	r2, [r3, #2]
 8010558:	2206      	movs	r2, #6
 801055a:	18a0      	adds	r0, r4, r2
 801055c:	f7ff ff7e 	bl	801045c <memcpy.isra.0>
 8010560:	f240 4394 	movw	r3, #1172	; 0x494
 8010564:	8463      	strh	r3, [r4, #34]	; 0x22
 8010566:	2316      	movs	r3, #22
 8010568:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80105cc <igmp_init+0xb0>
 801056c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80105d0 <igmp_init+0xb4>
 8010570:	84e3      	strh	r3, [r4, #38]	; 0x26
 8010572:	f8c4 9014 	str.w	r9, [r4, #20]
 8010576:	4b17      	ldr	r3, [pc, #92]	; (80105d4 <igmp_init+0xb8>)
 8010578:	f8c4 800c 	str.w	r8, [r4, #12]
 801057c:	8227      	strh	r7, [r4, #16]
 801057e:	84a6      	strh	r6, [r4, #36]	; 0x24
 8010580:	4c15      	ldr	r4, [pc, #84]	; (80105d8 <igmp_init+0xbc>)
 8010582:	2206      	movs	r2, #6
 8010584:	6023      	str	r3, [r4, #0]
 8010586:	f44f 7300 	mov.w	r3, #512	; 0x200
 801058a:	18a0      	adds	r0, r4, r2
 801058c:	80a3      	strh	r3, [r4, #4]
 801058e:	4629      	mov	r1, r5
 8010590:	f7ff ff64 	bl	801045c <memcpy.isra.0>
 8010594:	23e0      	movs	r3, #224	; 0xe0
 8010596:	83e3      	strh	r3, [r4, #30]
 8010598:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 801059c:	4a0f      	ldr	r2, [pc, #60]	; (80105dc <igmp_init+0xc0>)
 801059e:	f8c4 9014 	str.w	r9, [r4, #20]
 80105a2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80105a6:	f8c4 800c 	str.w	r8, [r4, #12]
 80105aa:	8227      	strh	r7, [r4, #16]
 80105ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105b0:	f803 1b01 	strb.w	r1, [r3], #1
 80105b4:	e7bb      	b.n	801052e <igmp_init+0x12>
 80105b6:	bf00      	nop
 80105b8:	2000a728 	andcs	sl, r0, r8, lsr #14
 80105bc:	2000a84c 	andcs	sl, r0, ip, asr #16
 80105c0:	2000a888 	andcs	sl, r0, r8, lsl #17
 80105c4:	2000a848 	andcs	sl, r0, r8, asr #16
 80105c8:	2000a880 	andcs	sl, r0, r0, lsl #17
 80105cc:	02010040 	andeq	r0, r1, #64	; 0x40
 80105d0:	00460008 	subeq	r0, r6, r8
 80105d4:	005e0001 	subseq	r0, lr, r1
 80105d8:	2000a850 	andcs	sl, r0, r0, asr r8
 80105dc:	04940200 	ldreq	r0, [r4], #512	; 0x200

080105e0 <igmp_handle>:
 80105e0:	7b83      	ldrb	r3, [r0, #14]
 80105e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105e6:	2b45      	cmp	r3, #69	; 0x45
 80105e8:	d116      	bne.n	8010618 <igmp_handle+0x38>
 80105ea:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80105ee:	2b11      	cmp	r3, #17
 80105f0:	d112      	bne.n	8010618 <igmp_handle+0x38>
 80105f2:	4b20      	ldr	r3, [pc, #128]	; (8010674 <igmp_handle+0x94>)
 80105f4:	f100 051e 	add.w	r5, r0, #30
 80105f8:	9300      	str	r3, [sp, #0]
 80105fa:	466a      	mov	r2, sp
 80105fc:	462b      	mov	r3, r5
 80105fe:	f100 0622 	add.w	r6, r0, #34	; 0x22
 8010602:	42b3      	cmp	r3, r6
 8010604:	d10b      	bne.n	801061e <igmp_handle+0x3e>
 8010606:	2401      	movs	r4, #1
 8010608:	2100      	movs	r1, #0
 801060a:	f04f 0c01 	mov.w	ip, #1
 801060e:	4b1a      	ldr	r3, [pc, #104]	; (8010678 <igmp_handle+0x98>)
 8010610:	4a1a      	ldr	r2, [pc, #104]	; (801067c <igmp_handle+0x9c>)
 8010612:	681f      	ldr	r7, [r3, #0]
 8010614:	428f      	cmp	r7, r1
 8010616:	d10a      	bne.n	801062e <igmp_handle+0x4e>
 8010618:	b003      	add	sp, #12
 801061a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801061e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8010622:	f812 1b01 	ldrb.w	r1, [r2], #1
 8010626:	428c      	cmp	r4, r1
 8010628:	d0eb      	beq.n	8010602 <igmp_handle+0x22>
 801062a:	2400      	movs	r4, #0
 801062c:	e7ec      	b.n	8010608 <igmp_handle+0x28>
 801062e:	6813      	ldr	r3, [r2, #0]
 8010630:	9301      	str	r3, [sp, #4]
 8010632:	b924      	cbnz	r4, 801063e <igmp_handle+0x5e>
 8010634:	462b      	mov	r3, r5
 8010636:	f10d 0e04 	add.w	lr, sp, #4
 801063a:	42b3      	cmp	r3, r6
 801063c:	d10e      	bne.n	801065c <igmp_handle+0x7c>
 801063e:	f892 e005 	ldrb.w	lr, [r2, #5]
 8010642:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8010646:	f1be 0f01 	cmp.w	lr, #1
 801064a:	d110      	bne.n	801066e <igmp_handle+0x8e>
 801064c:	f892 e004 	ldrb.w	lr, [r2, #4]
 8010650:	459e      	cmp	lr, r3
 8010652:	d909      	bls.n	8010668 <igmp_handle+0x88>
 8010654:	085b      	lsrs	r3, r3, #1
 8010656:	3301      	adds	r3, #1
 8010658:	7113      	strb	r3, [r2, #4]
 801065a:	e005      	b.n	8010668 <igmp_handle+0x88>
 801065c:	f813 9b01 	ldrb.w	r9, [r3], #1
 8010660:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8010664:	45c1      	cmp	r9, r8
 8010666:	d0e8      	beq.n	801063a <igmp_handle+0x5a>
 8010668:	3101      	adds	r1, #1
 801066a:	3208      	adds	r2, #8
 801066c:	e7d2      	b.n	8010614 <igmp_handle+0x34>
 801066e:	f882 c005 	strb.w	ip, [r2, #5]
 8010672:	e7ef      	b.n	8010654 <igmp_handle+0x74>
 8010674:	010000e0 	smlatteq	r0, r0, r0, r0
 8010678:	2000a84c 	andcs	sl, r0, ip, asr #16
 801067c:	2000a728 	andcs	sl, r0, r8, lsr #14

08010680 <igmp_timer>:
 8010680:	b570      	push	{r4, r5, r6, lr}
 8010682:	2500      	movs	r5, #0
 8010684:	2602      	movs	r6, #2
 8010686:	4c0a      	ldr	r4, [pc, #40]	; (80106b0 <igmp_timer+0x30>)
 8010688:	7963      	ldrb	r3, [r4, #5]
 801068a:	2b01      	cmp	r3, #1
 801068c:	d109      	bne.n	80106a2 <igmp_timer+0x22>
 801068e:	7923      	ldrb	r3, [r4, #4]
 8010690:	b13b      	cbz	r3, 80106a2 <igmp_timer+0x22>
 8010692:	3b01      	subs	r3, #1
 8010694:	b2db      	uxtb	r3, r3
 8010696:	7123      	strb	r3, [r4, #4]
 8010698:	b91b      	cbnz	r3, 80106a2 <igmp_timer+0x22>
 801069a:	6820      	ldr	r0, [r4, #0]
 801069c:	f7ff fee8 	bl	8010470 <_send_report>
 80106a0:	7166      	strb	r6, [r4, #5]
 80106a2:	3501      	adds	r5, #1
 80106a4:	2d24      	cmp	r5, #36	; 0x24
 80106a6:	f104 0408 	add.w	r4, r4, #8
 80106aa:	d1ed      	bne.n	8010688 <igmp_timer+0x8>
 80106ac:	bd70      	pop	{r4, r5, r6, pc}
 80106ae:	bf00      	nop
 80106b0:	2000a728 	andcs	sl, r0, r8, lsr #14

080106b4 <igmp_join>:
 80106b4:	b538      	push	{r3, r4, r5, lr}
 80106b6:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 80106ba:	2be0      	cmp	r3, #224	; 0xe0
 80106bc:	d11b      	bne.n	80106f6 <igmp_join+0x42>
 80106be:	4911      	ldr	r1, [pc, #68]	; (8010704 <igmp_join+0x50>)
 80106c0:	680c      	ldr	r4, [r1, #0]
 80106c2:	2c24      	cmp	r4, #36	; 0x24
 80106c4:	d01a      	beq.n	80106fc <igmp_join+0x48>
 80106c6:	2300      	movs	r3, #0
 80106c8:	4a0f      	ldr	r2, [pc, #60]	; (8010708 <igmp_join+0x54>)
 80106ca:	429c      	cmp	r4, r3
 80106cc:	dc0d      	bgt.n	80106ea <igmp_join+0x36>
 80106ce:	f44f 7381 	mov.w	r3, #258	; 0x102
 80106d2:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 80106d6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80106da:	8093      	strh	r3, [r2, #4]
 80106dc:	1c63      	adds	r3, r4, #1
 80106de:	600b      	str	r3, [r1, #0]
 80106e0:	f7ff fec6 	bl	8010470 <_send_report>
 80106e4:	4623      	mov	r3, r4
 80106e6:	4618      	mov	r0, r3
 80106e8:	bd38      	pop	{r3, r4, r5, pc}
 80106ea:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80106ee:	4285      	cmp	r5, r0
 80106f0:	d0f9      	beq.n	80106e6 <igmp_join+0x32>
 80106f2:	3301      	adds	r3, #1
 80106f4:	e7e9      	b.n	80106ca <igmp_join+0x16>
 80106f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106fa:	e7f4      	b.n	80106e6 <igmp_join+0x32>
 80106fc:	f06f 0301 	mvn.w	r3, #1
 8010700:	e7f1      	b.n	80106e6 <igmp_join+0x32>
 8010702:	bf00      	nop
 8010704:	2000a84c 	andcs	sl, r0, ip, asr #16
 8010708:	2000a728 	andcs	sl, r0, r8, lsr #14

0801070c <igmp_leave>:
 801070c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010710:	2600      	movs	r6, #0
 8010712:	4f1c      	ldr	r7, [pc, #112]	; (8010784 <igmp_leave+0x78>)
 8010714:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8010718:	4283      	cmp	r3, r0
 801071a:	d007      	beq.n	801072c <igmp_leave+0x20>
 801071c:	3601      	adds	r6, #1
 801071e:	2e24      	cmp	r6, #36	; 0x24
 8010720:	d1f8      	bne.n	8010714 <igmp_leave+0x8>
 8010722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010726:	b002      	add	sp, #8
 8010728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801072c:	2400      	movs	r4, #0
 801072e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8010788 <igmp_leave+0x7c>
 8010732:	4d16      	ldr	r5, [pc, #88]	; (801078c <igmp_leave+0x80>)
 8010734:	f8b8 3000 	ldrh.w	r3, [r8]
 8010738:	2118      	movs	r1, #24
 801073a:	9001      	str	r0, [sp, #4]
 801073c:	4814      	ldr	r0, [pc, #80]	; (8010790 <igmp_leave+0x84>)
 801073e:	826b      	strh	r3, [r5, #18]
 8010740:	832c      	strh	r4, [r5, #24]
 8010742:	f000 f86f 	bl	8010824 <net_chksum>
 8010746:	2204      	movs	r2, #4
 8010748:	8328      	strh	r0, [r5, #24]
 801074a:	eb0d 0102 	add.w	r1, sp, r2
 801074e:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8010752:	f7ff fe83 	bl	801045c <memcpy.isra.0>
 8010756:	2120      	movs	r1, #32
 8010758:	f105 000e 	add.w	r0, r5, #14
 801075c:	852c      	strh	r4, [r5, #40]	; 0x28
 801075e:	f000 f861 	bl	8010824 <net_chksum>
 8010762:	212e      	movs	r1, #46	; 0x2e
 8010764:	8528      	strh	r0, [r5, #40]	; 0x28
 8010766:	4628      	mov	r0, r5
 8010768:	f002 fafc 	bl	8012d64 <emac_eth_send>
 801076c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010770:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8010774:	3301      	adds	r3, #1
 8010776:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 801077a:	4620      	mov	r0, r4
 801077c:	f8a8 3000 	strh.w	r3, [r8]
 8010780:	80b4      	strh	r4, [r6, #4]
 8010782:	e7d0      	b.n	8010726 <igmp_leave+0x1a>
 8010784:	2000a728 	andcs	sl, r0, r8, lsr #14
 8010788:	2000a848 	andcs	sl, r0, r8, asr #16
 801078c:	2000a850 	andcs	sl, r0, r0, asr r8
 8010790:	2000a896 	mulcs	r0, r6, r8

08010794 <igmp_shutdown>:
 8010794:	b570      	push	{r4, r5, r6, lr}
 8010796:	2500      	movs	r5, #0
 8010798:	462e      	mov	r6, r5
 801079a:	4c07      	ldr	r4, [pc, #28]	; (80107b8 <igmp_shutdown+0x24>)
 801079c:	6820      	ldr	r0, [r4, #0]
 801079e:	b120      	cbz	r0, 80107aa <igmp_shutdown+0x16>
 80107a0:	f7ff ffb4 	bl	801070c <igmp_leave>
 80107a4:	6026      	str	r6, [r4, #0]
 80107a6:	7166      	strb	r6, [r4, #5]
 80107a8:	7126      	strb	r6, [r4, #4]
 80107aa:	3501      	adds	r5, #1
 80107ac:	2d24      	cmp	r5, #36	; 0x24
 80107ae:	f104 0408 	add.w	r4, r4, #8
 80107b2:	d1f3      	bne.n	801079c <igmp_shutdown+0x8>
 80107b4:	bd70      	pop	{r4, r5, r6, pc}
 80107b6:	bf00      	nop
 80107b8:	2000a728 	andcs	sl, r0, r8, lsr #14

080107bc <ip_set_ip>:
 80107bc:	b510      	push	{r4, lr}
 80107be:	4604      	mov	r4, r0
 80107c0:	f7fe f8fe 	bl	800e9c0 <udp_set_ip>
 80107c4:	4620      	mov	r0, r4
 80107c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107ca:	f7ff be91 	b.w	80104f0 <igmp_set_ip>

080107ce <ip_init>:
 80107ce:	b538      	push	{r3, r4, r5, lr}
 80107d0:	4604      	mov	r4, r0
 80107d2:	460d      	mov	r5, r1
 80107d4:	f7fe f914 	bl	800ea00 <udp_init>
 80107d8:	4629      	mov	r1, r5
 80107da:	4620      	mov	r0, r4
 80107dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107e0:	f7ff be9c 	b.w	801051c <igmp_init>

080107e4 <ip_shutdown>:
 80107e4:	b508      	push	{r3, lr}
 80107e6:	f7ff ffd5 	bl	8010794 <igmp_shutdown>
 80107ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80107ee:	f7fe b939 	b.w	800ea64 <udp_shutdown>

080107f2 <ip_handle>:
 80107f2:	7b82      	ldrb	r2, [r0, #14]
 80107f4:	7dc3      	ldrb	r3, [r0, #23]
 80107f6:	2a45      	cmp	r2, #69	; 0x45
 80107f8:	d003      	beq.n	8010802 <ip_handle+0x10>
 80107fa:	2b02      	cmp	r3, #2
 80107fc:	d111      	bne.n	8010822 <ip_handle+0x30>
 80107fe:	f7ff beef 	b.w	80105e0 <igmp_handle>
 8010802:	2b06      	cmp	r3, #6
 8010804:	d00b      	beq.n	801081e <ip_handle+0x2c>
 8010806:	d804      	bhi.n	8010812 <ip_handle+0x20>
 8010808:	2b01      	cmp	r3, #1
 801080a:	d006      	beq.n	801081a <ip_handle+0x28>
 801080c:	2b02      	cmp	r3, #2
 801080e:	d0f6      	beq.n	80107fe <ip_handle+0xc>
 8010810:	4770      	bx	lr
 8010812:	2b11      	cmp	r3, #17
 8010814:	d105      	bne.n	8010822 <ip_handle+0x30>
 8010816:	f7fe b927 	b.w	800ea68 <udp_handle>
 801081a:	f000 b82b 	b.w	8010874 <icmp_handle>
 801081e:	f7fd be73 	b.w	800e508 <tcp_handle>
 8010822:	4770      	bx	lr

08010824 <net_chksum>:
 8010824:	2300      	movs	r3, #0
 8010826:	f021 0201 	bic.w	r2, r1, #1
 801082a:	b530      	push	{r4, r5, lr}
 801082c:	4402      	add	r2, r0
 801082e:	084c      	lsrs	r4, r1, #1
 8010830:	4290      	cmp	r0, r2
 8010832:	d10e      	bne.n	8010852 <net_chksum+0x2e>
 8010834:	f06f 0201 	mvn.w	r2, #1
 8010838:	fb02 1104 	mla	r1, r2, r4, r1
 801083c:	b121      	cbz	r1, 8010848 <net_chksum+0x24>
 801083e:	7802      	ldrb	r2, [r0, #0]
 8010840:	0212      	lsls	r2, r2, #8
 8010842:	ba52      	rev16	r2, r2
 8010844:	b292      	uxth	r2, r2
 8010846:	4413      	add	r3, r2
 8010848:	0c1a      	lsrs	r2, r3, #16
 801084a:	d106      	bne.n	801085a <net_chksum+0x36>
 801084c:	43d8      	mvns	r0, r3
 801084e:	b280      	uxth	r0, r0
 8010850:	bd30      	pop	{r4, r5, pc}
 8010852:	f830 5b02 	ldrh.w	r5, [r0], #2
 8010856:	442b      	add	r3, r5
 8010858:	e7ea      	b.n	8010830 <net_chksum+0xc>
 801085a:	b29b      	uxth	r3, r3
 801085c:	e7f3      	b.n	8010846 <net_chksum+0x22>

0801085e <memcpy.isra.0>:
 801085e:	3801      	subs	r0, #1
 8010860:	440a      	add	r2, r1
 8010862:	4291      	cmp	r1, r2
 8010864:	d100      	bne.n	8010868 <memcpy.isra.0+0xa>
 8010866:	4770      	bx	lr
 8010868:	f811 3b01 	ldrb.w	r3, [r1], #1
 801086c:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010870:	e7f7      	b.n	8010862 <memcpy.isra.0+0x4>
	...

08010874 <icmp_handle>:
 8010874:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010876:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 801087a:	4604      	mov	r4, r0
 801087c:	2b08      	cmp	r3, #8
 801087e:	d13e      	bne.n	80108fe <icmp_handle+0x8a>
 8010880:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8010884:	2d00      	cmp	r5, #0
 8010886:	d13a      	bne.n	80108fe <icmp_handle+0x8a>
 8010888:	1d86      	adds	r6, r0, #6
 801088a:	4631      	mov	r1, r6
 801088c:	2206      	movs	r2, #6
 801088e:	f7ff ffe6 	bl	801085e <memcpy.isra.0>
 8010892:	4630      	mov	r0, r6
 8010894:	2206      	movs	r2, #6
 8010896:	491b      	ldr	r1, [pc, #108]	; (8010904 <icmp_handle+0x90>)
 8010898:	f7ff ffe1 	bl	801085e <memcpy.isra.0>
 801089c:	8a63      	ldrh	r3, [r4, #18]
 801089e:	f104 061a 	add.w	r6, r4, #26
 80108a2:	43db      	mvns	r3, r3
 80108a4:	4631      	mov	r1, r6
 80108a6:	2204      	movs	r2, #4
 80108a8:	8263      	strh	r3, [r4, #18]
 80108aa:	f104 001e 	add.w	r0, r4, #30
 80108ae:	f7ff ffd6 	bl	801085e <memcpy.isra.0>
 80108b2:	2204      	movs	r2, #4
 80108b4:	4b14      	ldr	r3, [pc, #80]	; (8010908 <icmp_handle+0x94>)
 80108b6:	eb0d 0102 	add.w	r1, sp, r2
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4630      	mov	r0, r6
 80108be:	f104 060e 	add.w	r6, r4, #14
 80108c2:	9301      	str	r3, [sp, #4]
 80108c4:	f7ff ffcb 	bl	801085e <memcpy.isra.0>
 80108c8:	2114      	movs	r1, #20
 80108ca:	4630      	mov	r0, r6
 80108cc:	7625      	strb	r5, [r4, #24]
 80108ce:	7665      	strb	r5, [r4, #25]
 80108d0:	f7ff ffa8 	bl	8010824 <net_chksum>
 80108d4:	8a21      	ldrh	r1, [r4, #16]
 80108d6:	8320      	strh	r0, [r4, #24]
 80108d8:	ba49      	rev16	r1, r1
 80108da:	b289      	uxth	r1, r1
 80108dc:	4630      	mov	r0, r6
 80108de:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 80108e2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 80108e6:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 80108ea:	f7ff ff9b 	bl	8010824 <net_chksum>
 80108ee:	8a21      	ldrh	r1, [r4, #16]
 80108f0:	84a0      	strh	r0, [r4, #36]	; 0x24
 80108f2:	ba49      	rev16	r1, r1
 80108f4:	b289      	uxth	r1, r1
 80108f6:	4620      	mov	r0, r4
 80108f8:	310e      	adds	r1, #14
 80108fa:	f002 fa33 	bl	8012d64 <emac_eth_send>
 80108fe:	b002      	add	sp, #8
 8010900:	bd70      	pop	{r4, r5, r6, pc}
 8010902:	bf00      	nop
 8010904:	200029cc 	andcs	r2, r0, ip, asr #19
 8010908:	200029c0 	andcs	r2, r0, r0, asr #19

0801090c <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 801090c:	b430      	push	{r4, r5}
 801090e:	b168      	cbz	r0, 801092c <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8010910:	2300      	movs	r3, #0
 8010912:	7905      	ldrb	r5, [r0, #4]
 8010914:	5cd4      	ldrb	r4, [r2, r3]
 8010916:	b11c      	cbz	r4, 8010920 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8010918:	1c5c      	adds	r4, r3, #1
 801091a:	429d      	cmp	r5, r3
 801091c:	4623      	mov	r3, r4
 801091e:	dcf9      	bgt.n	8010914 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8010920:	6804      	ldr	r4, [r0, #0]
 8010922:	b2db      	uxtb	r3, r3
 8010924:	69e4      	ldr	r4, [r4, #28]
 8010926:	46a4      	mov	ip, r4
 8010928:	bc30      	pop	{r4, r5}
 801092a:	4760      	bx	ip
 801092c:	bc30      	pop	{r4, r5}
 801092e:	4770      	bx	lr

08010930 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8010930:	b110      	cbz	r0, 8010938 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8010932:	6803      	ldr	r3, [r0, #0]
 8010934:	691b      	ldr	r3, [r3, #16]
 8010936:	4718      	bx	r3
 8010938:	4770      	bx	lr

0801093a <Display::Status(Display7SegmentMessage)>:
 801093a:	7c43      	ldrb	r3, [r0, #17]
 801093c:	b513      	push	{r0, r1, r4, lr}
 801093e:	4604      	mov	r4, r0
 8010940:	b19b      	cbz	r3, 801096a <Display::Status(Display7SegmentMessage)+0x30>
 8010942:	43c9      	mvns	r1, r1
 8010944:	2312      	movs	r3, #18
 8010946:	7a00      	ldrb	r0, [r0, #8]
 8010948:	f88d 3004 	strb.w	r3, [sp, #4]
 801094c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8010950:	f88d 1006 	strb.w	r1, [sp, #6]
 8010954:	f88d 3005 	strb.w	r3, [sp, #5]
 8010958:	f002 fa9c 	bl	8012e94 <gd32_i2c_set_address(unsigned char)>
 801095c:	68e0      	ldr	r0, [r4, #12]
 801095e:	f002 fa91 	bl	8012e84 <gd32_i2c_set_baudrate(unsigned int)>
 8010962:	2103      	movs	r1, #3
 8010964:	a801      	add	r0, sp, #4
 8010966:	f002 fa9b 	bl	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 801096a:	b002      	add	sp, #8
 801096c:	bd10      	pop	{r4, pc}
	...

08010970 <DisplayUdf::DisplayUdf()>:
 8010970:	b510      	push	{r4, lr}
 8010972:	4604      	mov	r4, r0
 8010974:	f000 fed8 	bl	8011728 <Display::Display()>
 8010978:	2202      	movs	r2, #2
 801097a:	2300      	movs	r3, #0
 801097c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8010980:	4b05      	ldr	r3, [pc, #20]	; (8010998 <DisplayUdf::DisplayUdf()+0x28>)
 8010982:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8010986:	601c      	str	r4, [r3, #0]
 8010988:	2301      	movs	r3, #1
 801098a:	f802 3b01 	strb.w	r3, [r2], #1
 801098e:	3301      	adds	r3, #1
 8010990:	2b15      	cmp	r3, #21
 8010992:	d1fa      	bne.n	801098a <DisplayUdf::DisplayUdf()+0x1a>
 8010994:	4620      	mov	r0, r4
 8010996:	bd10      	pop	{r4, pc}
 8010998:	2000a8b8 			; <UNDEFINED> instruction: 0x2000a8b8

0801099c <DisplayUdf::SetTitle(char const*, ...)>:
 801099c:	b40e      	push	{r1, r2, r3}
 801099e:	b517      	push	{r0, r1, r2, r4, lr}
 80109a0:	ab05      	add	r3, sp, #20
 80109a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80109a6:	4604      	mov	r4, r0
 80109a8:	211f      	movs	r1, #31
 80109aa:	301c      	adds	r0, #28
 80109ac:	9301      	str	r3, [sp, #4]
 80109ae:	f7f8 f911 	bl	8008bd4 <vsnprintf>
 80109b2:	2300      	movs	r3, #0
 80109b4:	4404      	add	r4, r0
 80109b6:	7723      	strb	r3, [r4, #28]
 80109b8:	b003      	add	sp, #12
 80109ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109be:	b003      	add	sp, #12
 80109c0:	4770      	bx	lr
	...

080109c4 <DisplayUdf::ShowEmacStart()>:
 80109c4:	b510      	push	{r4, lr}
 80109c6:	4604      	mov	r4, r0
 80109c8:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80109cc:	6980      	ldr	r0, [r0, #24]
 80109ce:	f7ff ffaf 	bl	8010930 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80109d2:	4620      	mov	r0, r4
 80109d4:	4a02      	ldr	r2, [pc, #8]	; (80109e0 <DisplayUdf::ShowEmacStart()+0x1c>)
 80109d6:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80109da:	f7f7 fae7 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 80109de:	bd10      	pop	{r4, pc}
 80109e0:	080159c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, fp, ip, lr}

080109e4 <DisplayUdf::ShowIpAddress()>:
 80109e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109e8:	4604      	mov	r4, r0
 80109ea:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80109ee:	b086      	sub	sp, #24
 80109f0:	6980      	ldr	r0, [r0, #24]
 80109f2:	f7ff ff9d 	bl	8010930 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80109f6:	4b13      	ldr	r3, [pc, #76]	; (8010a44 <DisplayUdf::ShowIpAddress()+0x60>)
 80109f8:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 80109fc:	681d      	ldr	r5, [r3, #0]
 80109fe:	69a8      	ldr	r0, [r5, #24]
 8010a00:	692e      	ldr	r6, [r5, #16]
 8010a02:	f7f7 fa2f 	bl	8007e64 <__popcountsi2>
 8010a06:	78eb      	ldrb	r3, [r5, #3]
 8010a08:	fa5f f886 	uxtb.w	r8, r6
 8010a0c:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8010a10:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8010a14:	0e36      	lsrs	r6, r6, #24
 8010a16:	b99b      	cbnz	r3, 8010a40 <DisplayUdf::ShowIpAddress()+0x5c>
 8010a18:	786b      	ldrb	r3, [r5, #1]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	bf14      	ite	ne
 8010a1e:	2244      	movne	r2, #68	; 0x44
 8010a20:	2253      	moveq	r2, #83	; 0x53
 8010a22:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8010a26:	4643      	mov	r3, r8
 8010a28:	4639      	mov	r1, r7
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	e9cd a601 	strd	sl, r6, [sp, #4]
 8010a30:	4a05      	ldr	r2, [pc, #20]	; (8010a48 <DisplayUdf::ShowIpAddress()+0x64>)
 8010a32:	f8cd 9000 	str.w	r9, [sp]
 8010a36:	f7f7 fab9 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 8010a3a:	b006      	add	sp, #24
 8010a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a40:	225a      	movs	r2, #90	; 0x5a
 8010a42:	e7ee      	b.n	8010a22 <DisplayUdf::ShowIpAddress()+0x3e>
 8010a44:	2000a288 	andcs	sl, r0, r8, lsl #5
 8010a48:	080159d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, fp, ip, lr}

08010a4c <DisplayUdf::ShowNetmask()>:
 8010a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a4e:	4604      	mov	r4, r0
 8010a50:	4b0b      	ldr	r3, [pc, #44]	; (8010a80 <DisplayUdf::ShowNetmask()+0x34>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	699b      	ldr	r3, [r3, #24]
 8010a56:	0e1a      	lsrs	r2, r3, #24
 8010a58:	9202      	str	r2, [sp, #8]
 8010a5a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010a5e:	9201      	str	r2, [sp, #4]
 8010a60:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010a64:	9200      	str	r2, [sp, #0]
 8010a66:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8010a6a:	4a06      	ldr	r2, [pc, #24]	; (8010a84 <DisplayUdf::ShowNetmask()+0x38>)
 8010a6c:	b2db      	uxtb	r3, r3
 8010a6e:	f7f7 fa9d 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 8010a72:	4620      	mov	r0, r4
 8010a74:	b004      	add	sp, #16
 8010a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a7a:	f7ff bfb3 	b.w	80109e4 <DisplayUdf::ShowIpAddress()>
 8010a7e:	bf00      	nop
 8010a80:	2000a288 	andcs	sl, r0, r8, lsl #5
 8010a84:	080159e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, fp, ip, lr}

08010a88 <DisplayUdf::ShowGatewayIp()>:
 8010a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8010a90:	6980      	ldr	r0, [r0, #24]
 8010a92:	f7ff ff4d 	bl	8010930 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010a96:	4b0a      	ldr	r3, [pc, #40]	; (8010ac0 <DisplayUdf::ShowGatewayIp()+0x38>)
 8010a98:	4620      	mov	r0, r4
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8010aa0:	695b      	ldr	r3, [r3, #20]
 8010aa2:	0e1a      	lsrs	r2, r3, #24
 8010aa4:	9202      	str	r2, [sp, #8]
 8010aa6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010aaa:	9201      	str	r2, [sp, #4]
 8010aac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010ab0:	9200      	str	r2, [sp, #0]
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	4a03      	ldr	r2, [pc, #12]	; (8010ac4 <DisplayUdf::ShowGatewayIp()+0x3c>)
 8010ab6:	f7f7 fa79 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 8010aba:	b004      	add	sp, #16
 8010abc:	bd10      	pop	{r4, pc}
 8010abe:	bf00      	nop
 8010ac0:	2000a288 	andcs	sl, r0, r8, lsl #5
 8010ac4:	080159f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, fp, ip, lr}

08010ac8 <DisplayUdf::ShowHostName()>:
 8010ac8:	b510      	push	{r4, lr}
 8010aca:	4604      	mov	r4, r0
 8010acc:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8010ad0:	6980      	ldr	r0, [r0, #24]
 8010ad2:	f7ff ff2d 	bl	8010930 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010ad6:	4b05      	ldr	r3, [pc, #20]	; (8010aec <DisplayUdf::ShowHostName()+0x24>)
 8010ad8:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8010adc:	681a      	ldr	r2, [r3, #0]
 8010ade:	69a0      	ldr	r0, [r4, #24]
 8010ae0:	321c      	adds	r2, #28
 8010ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ae6:	f7ff bf11 	b.w	801090c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8010aea:	bf00      	nop
 8010aec:	2000a288 	andcs	sl, r0, r8, lsl #5

08010af0 <DisplayUdf::Show()>:
 8010af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010af2:	4604      	mov	r4, r0
 8010af4:	21ff      	movs	r1, #255	; 0xff
 8010af6:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8010afa:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8010afe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b02:	2806      	cmp	r0, #6
 8010b04:	bf88      	it	hi
 8010b06:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d1f7      	bne.n	8010afe <DisplayUdf::Show()+0xe>
 8010b0e:	2501      	movs	r5, #1
 8010b10:	4629      	mov	r1, r5
 8010b12:	3501      	adds	r5, #1
 8010b14:	69a0      	ldr	r0, [r4, #24]
 8010b16:	b2ed      	uxtb	r5, r5
 8010b18:	f7ff ff0a 	bl	8010930 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010b1c:	2d06      	cmp	r5, #6
 8010b1e:	d1f7      	bne.n	8010b10 <DisplayUdf::Show()+0x20>
 8010b20:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8010b24:	69a0      	ldr	r0, [r4, #24]
 8010b26:	f104 021c 	add.w	r2, r4, #28
 8010b2a:	f7ff feef 	bl	801090c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8010b2e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8010b32:	69a0      	ldr	r0, [r4, #24]
 8010b34:	4a0d      	ldr	r2, [pc, #52]	; (8010b6c <DisplayUdf::Show()+0x7c>)
 8010b36:	f7ff fee9 	bl	801090c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8010b3a:	4b0d      	ldr	r3, [pc, #52]	; (8010b70 <DisplayUdf::Show()+0x80>)
 8010b3c:	4a0d      	ldr	r2, [pc, #52]	; (8010b74 <DisplayUdf::Show()+0x84>)
 8010b3e:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	4620      	mov	r0, r4
 8010b46:	2303      	movs	r3, #3
 8010b48:	f7f7 fa30 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f7ff ff49 	bl	80109e4 <DisplayUdf::ShowIpAddress()>
 8010b52:	4620      	mov	r0, r4
 8010b54:	f7ff ff98 	bl	8010a88 <DisplayUdf::ShowGatewayIp()>
 8010b58:	4620      	mov	r0, r4
 8010b5a:	f7ff ff77 	bl	8010a4c <DisplayUdf::ShowNetmask()>
 8010b5e:	4620      	mov	r0, r4
 8010b60:	b003      	add	sp, #12
 8010b62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b66:	f7ff bfaf 	b.w	8010ac8 <DisplayUdf::ShowHostName()>
 8010b6a:	bf00      	nop
 8010b6c:	080141d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, lr}
 8010b70:	2000a950 	andcs	sl, r0, r0, asr r9
 8010b74:	08015a06 	stmdaeq	r1, {r1, r2, r9, fp, ip, lr}

08010b78 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8010b78:	3901      	subs	r1, #1
 8010b7a:	b510      	push	{r4, lr}
 8010b7c:	4604      	mov	r4, r0
 8010b7e:	2903      	cmp	r1, #3
 8010b80:	d814      	bhi.n	8010bac <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8010b82:	e8df f001 	tbb	[pc, r1]
 8010b86:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 8010b8a:	4b14      	ldr	r3, [pc, #80]	; (8010bdc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8010b8c:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8010b90:	6818      	ldr	r0, [r3, #0]
 8010b92:	f7ff fed2 	bl	801093a <Display::Status(Display7SegmentMessage)>
 8010b96:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8010b9a:	69a0      	ldr	r0, [r4, #24]
 8010b9c:	f7ff fec8 	bl	8010930 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010ba0:	4a0f      	ldr	r2, [pc, #60]	; (8010be0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8010ba8:	f7f7 fa00 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 8010bac:	bd10      	pop	{r4, pc}
 8010bae:	f248 0180 	movw	r1, #32896	; 0x8080
 8010bb2:	4b0a      	ldr	r3, [pc, #40]	; (8010bdc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8010bb4:	6818      	ldr	r0, [r3, #0]
 8010bb6:	f7ff fec0 	bl	801093a <Display::Status(Display7SegmentMessage)>
 8010bba:	e7f7      	b.n	8010bac <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8010bbc:	4b07      	ldr	r3, [pc, #28]	; (8010bdc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8010bbe:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8010bc2:	6818      	ldr	r0, [r3, #0]
 8010bc4:	f7ff feb9 	bl	801093a <Display::Status(Display7SegmentMessage)>
 8010bc8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8010bcc:	69a0      	ldr	r0, [r4, #24]
 8010bce:	f7ff feaf 	bl	8010930 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010bd2:	4a04      	ldr	r2, [pc, #16]	; (8010be4 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8010bd4:	e7e5      	b.n	8010ba2 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 8010bd6:	f645 3179 	movw	r1, #23417	; 0x5b79
 8010bda:	e7ea      	b.n	8010bb2 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8010bdc:	2000a8c0 	andcs	sl, r0, r0, asr #17
 8010be0:	08015a15 	stmdaeq	r1, {r0, r2, r4, r9, fp, ip, lr}
 8010be4:	08015a23 	stmdaeq	r1, {r0, r1, r5, r9, fp, ip, lr}

08010be8 <DisplayUdf::ShowShutdown()>:
 8010be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bec:	4604      	mov	r4, r0
 8010bee:	6980      	ldr	r0, [r0, #24]
 8010bf0:	b308      	cbz	r0, 8010c36 <DisplayUdf::ShowShutdown()+0x4e>
 8010bf2:	f890 8005 	ldrb.w	r8, [r0, #5]
 8010bf6:	6803      	ldr	r3, [r0, #0]
 8010bf8:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8010bfc:	b2ed      	uxtb	r5, r5
 8010bfe:	462a      	mov	r2, r5
 8010c00:	2100      	movs	r1, #0
 8010c02:	6a1b      	ldr	r3, [r3, #32]
 8010c04:	7907      	ldrb	r7, [r0, #4]
 8010c06:	2600      	movs	r6, #0
 8010c08:	4798      	blx	r3
 8010c0a:	3f01      	subs	r7, #1
 8010c0c:	42b7      	cmp	r7, r6
 8010c0e:	69a0      	ldr	r0, [r4, #24]
 8010c10:	d906      	bls.n	8010c20 <DisplayUdf::ShowShutdown()+0x38>
 8010c12:	b118      	cbz	r0, 8010c1c <DisplayUdf::ShowShutdown()+0x34>
 8010c14:	6803      	ldr	r3, [r0, #0]
 8010c16:	2120      	movs	r1, #32
 8010c18:	695b      	ldr	r3, [r3, #20]
 8010c1a:	4798      	blx	r3
 8010c1c:	3601      	adds	r6, #1
 8010c1e:	e7f5      	b.n	8010c0c <DisplayUdf::ShowShutdown()+0x24>
 8010c20:	b120      	cbz	r0, 8010c2c <DisplayUdf::ShowShutdown()+0x44>
 8010c22:	6803      	ldr	r3, [r0, #0]
 8010c24:	462a      	mov	r2, r5
 8010c26:	2100      	movs	r1, #0
 8010c28:	6a1b      	ldr	r3, [r3, #32]
 8010c2a:	4798      	blx	r3
 8010c2c:	4641      	mov	r1, r8
 8010c2e:	4a05      	ldr	r2, [pc, #20]	; (8010c44 <DisplayUdf::ShowShutdown()+0x5c>)
 8010c30:	69a0      	ldr	r0, [r4, #24]
 8010c32:	f7ff fe6b 	bl	801090c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8010c36:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f7ff fe7d 	bl	801093a <Display::Status(Display7SegmentMessage)>
 8010c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c44:	08015a31 	stmdaeq	r1, {r0, r4, r5, r9, fp, ip, lr}

08010c48 <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8010c48:	1e4b      	subs	r3, r1, #1
 8010c4a:	2b05      	cmp	r3, #5
 8010c4c:	b530      	push	{r4, r5, lr}
 8010c4e:	d80f      	bhi.n	8010c70 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8010c50:	2300      	movs	r3, #0
 8010c52:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 8010c56:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010c5a:	428d      	cmp	r5, r1
 8010c5c:	d109      	bne.n	8010c72 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8010c5e:	1884      	adds	r4, r0, r2
 8010c60:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8010c64:	4403      	add	r3, r0
 8010c66:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8010c6a:	4410      	add	r0, r2
 8010c6c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8010c70:	bd30      	pop	{r4, r5, pc}
 8010c72:	3301      	adds	r3, #1
 8010c74:	2b14      	cmp	r3, #20
 8010c76:	d1ee      	bne.n	8010c56 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8010c78:	e7f7      	b.n	8010c6a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

08010c7c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8010c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c7e:	88c5      	ldrh	r5, [r0, #6]
 8010c80:	8886      	ldrh	r6, [r0, #4]
 8010c82:	42b5      	cmp	r5, r6
 8010c84:	d216      	bcs.n	8010cb4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8010c86:	4604      	mov	r4, r0
 8010c88:	6800      	ldr	r0, [r0, #0]
 8010c8a:	4428      	add	r0, r5
 8010c8c:	1b75      	subs	r5, r6, r5
 8010c8e:	7a26      	ldrb	r6, [r4, #8]
 8010c90:	b923      	cbnz	r3, 8010c9c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8010c92:	b926      	cbnz	r6, 8010c9e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8010c94:	9200      	str	r2, [sp, #0]
 8010c96:	460b      	mov	r3, r1
 8010c98:	4a09      	ldr	r2, [pc, #36]	; (8010cc0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8010c9a:	e003      	b.n	8010ca4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8010c9c:	b166      	cbz	r6, 8010cb8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	9200      	str	r2, [sp, #0]
 8010ca2:	4a08      	ldr	r2, [pc, #32]	; (8010cc4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8010ca4:	4629      	mov	r1, r5
 8010ca6:	f7f7 ff7d 	bl	8008ba4 <snprintf>
 8010caa:	4285      	cmp	r5, r0
 8010cac:	bfa2      	ittt	ge
 8010cae:	88e3      	ldrhge	r3, [r4, #6]
 8010cb0:	181b      	addge	r3, r3, r0
 8010cb2:	80e3      	strhge	r3, [r4, #6]
 8010cb4:	b002      	add	sp, #8
 8010cb6:	bd70      	pop	{r4, r5, r6, pc}
 8010cb8:	9200      	str	r2, [sp, #0]
 8010cba:	460b      	mov	r3, r1
 8010cbc:	4a02      	ldr	r2, [pc, #8]	; (8010cc8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8010cbe:	e7f1      	b.n	8010ca4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8010cc0:	08014303 	stmdaeq	r1, {r0, r1, r8, r9, lr}
 8010cc4:	080142fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, lr}
 8010cc8:	08014304 	stmdaeq	r1, {r2, r8, r9, lr}

08010ccc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8010ccc:	b510      	push	{r4, lr}
 8010cce:	2220      	movs	r2, #32
 8010cd0:	4604      	mov	r4, r0
 8010cd2:	f840 1b04 	str.w	r1, [r0], #4
 8010cd6:	2100      	movs	r1, #0
 8010cd8:	f001 f9c0 	bl	801205c <memset>
 8010cdc:	f647 7305 	movw	r3, #32517	; 0x7f05
 8010ce0:	4620      	mov	r0, r4
 8010ce2:	84a3      	strh	r3, [r4, #36]	; 0x24
 8010ce4:	bd10      	pop	{r4, pc}

08010ce6 <DisplayUdfParams::Load()>:
 8010ce6:	b508      	push	{r3, lr}
 8010ce8:	2300      	movs	r3, #0
 8010cea:	4601      	mov	r1, r0
 8010cec:	6043      	str	r3, [r0, #4]
 8010cee:	6800      	ldr	r0, [r0, #0]
 8010cf0:	b120      	cbz	r0, 8010cfc <DisplayUdfParams::Load()+0x16>
 8010cf2:	6803      	ldr	r3, [r0, #0]
 8010cf4:	3104      	adds	r1, #4
 8010cf6:	68db      	ldr	r3, [r3, #12]
 8010cf8:	4798      	blx	r3
 8010cfa:	2001      	movs	r0, #1
 8010cfc:	bd08      	pop	{r3, pc}
	...

08010d00 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8010d00:	6803      	ldr	r3, [r0, #0]
 8010d02:	b1d3      	cbz	r3, 8010d3a <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8010d04:	2300      	movs	r3, #0
 8010d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d08:	460d      	mov	r5, r1
 8010d0a:	4616      	mov	r6, r2
 8010d0c:	4604      	mov	r4, r0
 8010d0e:	6043      	str	r3, [r0, #4]
 8010d10:	4602      	mov	r2, r0
 8010d12:	490a      	ldr	r1, [pc, #40]	; (8010d3c <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8010d14:	4668      	mov	r0, sp
 8010d16:	f000 fb19 	bl	801134c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8010d1a:	4632      	mov	r2, r6
 8010d1c:	4629      	mov	r1, r5
 8010d1e:	4668      	mov	r0, sp
 8010d20:	f000 fb18 	bl	8011354 <ReadConfigFile::Read(char const*, unsigned int)>
 8010d24:	4621      	mov	r1, r4
 8010d26:	f851 0b04 	ldr.w	r0, [r1], #4
 8010d2a:	6803      	ldr	r3, [r0, #0]
 8010d2c:	689b      	ldr	r3, [r3, #8]
 8010d2e:	4798      	blx	r3
 8010d30:	4668      	mov	r0, sp
 8010d32:	f000 fb0e 	bl	8011352 <ReadConfigFile::~ReadConfigFile()>
 8010d36:	b002      	add	sp, #8
 8010d38:	bd70      	pop	{r4, r5, r6, pc}
 8010d3a:	4770      	bx	lr
 8010d3c:	08010e05 	stmdaeq	r1, {r0, r2, r9, sl, fp}

08010d40 <DisplayUdfParams::callbackFunction(char const*)>:
 8010d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d42:	460e      	mov	r6, r1
 8010d44:	4604      	mov	r4, r0
 8010d46:	492b      	ldr	r1, [pc, #172]	; (8010df4 <DisplayUdfParams::callbackFunction(char const*)+0xb4>)
 8010d48:	4630      	mov	r0, r6
 8010d4a:	f10d 0207 	add.w	r2, sp, #7
 8010d4e:	f000 fc38 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010d52:	b968      	cbnz	r0, 8010d70 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8010d54:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010d58:	6863      	ldr	r3, [r4, #4]
 8010d5a:	2a7f      	cmp	r2, #127	; 0x7f
 8010d5c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8010d60:	bf14      	ite	ne
 8010d62:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 8010d66:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 8010d6a:	6063      	str	r3, [r4, #4]
 8010d6c:	b003      	add	sp, #12
 8010d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d70:	4630      	mov	r0, r6
 8010d72:	4921      	ldr	r1, [pc, #132]	; (8010df8 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8010d74:	f10d 0207 	add.w	r2, sp, #7
 8010d78:	f000 fc23 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010d7c:	b958      	cbnz	r0, 8010d96 <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8010d7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010d82:	6863      	ldr	r3, [r4, #4]
 8010d84:	2a05      	cmp	r2, #5
 8010d86:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8010d8a:	bf14      	ite	ne
 8010d8c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8010d90:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8010d94:	e7e9      	b.n	8010d6a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8010d96:	4630      	mov	r0, r6
 8010d98:	4918      	ldr	r1, [pc, #96]	; (8010dfc <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 8010d9a:	f10d 0207 	add.w	r2, sp, #7
 8010d9e:	f000 fc10 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010da2:	b948      	cbnz	r0, 8010db8 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8010da4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010da8:	6863      	ldr	r3, [r4, #4]
 8010daa:	b112      	cbz	r2, 8010db2 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8010dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010db0:	e7db      	b.n	8010d6a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8010db2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010db6:	e7d8      	b.n	8010d6a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8010db8:	2500      	movs	r5, #0
 8010dba:	4f11      	ldr	r7, [pc, #68]	; (8010e00 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 8010dbc:	4630      	mov	r0, r6
 8010dbe:	f857 1b04 	ldr.w	r1, [r7], #4
 8010dc2:	f10d 0207 	add.w	r2, sp, #7
 8010dc6:	f000 fbfc 	bl	80115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010dca:	b978      	cbnz	r0, 8010dec <DisplayUdfParams::callbackFunction(char const*)+0xac>
 8010dcc:	2301      	movs	r3, #1
 8010dce:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010dd2:	6862      	ldr	r2, [r4, #4]
 8010dd4:	1e4e      	subs	r6, r1, #1
 8010dd6:	2e05      	cmp	r6, #5
 8010dd8:	fa03 f305 	lsl.w	r3, r3, r5
 8010ddc:	4425      	add	r5, r4
 8010dde:	bf99      	ittee	ls
 8010de0:	7229      	strbls	r1, [r5, #8]
 8010de2:	4313      	orrls	r3, r2
 8010de4:	7228      	strbhi	r0, [r5, #8]
 8010de6:	ea22 0303 	bichi.w	r3, r2, r3
 8010dea:	e7be      	b.n	8010d6a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8010dec:	3501      	adds	r5, #1
 8010dee:	2d14      	cmp	r5, #20
 8010df0:	d1e4      	bne.n	8010dbc <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 8010df2:	e7bb      	b.n	8010d6c <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8010df4:	08015af2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, fp, ip, lr}
 8010df8:	08015aba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, fp, ip, lr}
 8010dfc:	08015ac8 	stmdaeq	r1, {r3, r6, r7, r9, fp, ip, lr}
 8010e00:	08015a44 	stmdaeq	r1, {r2, r6, r9, fp, ip, lr}

08010e04 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8010e04:	f7ff bf9c 	b.w	8010d40 <DisplayUdfParams::callbackFunction(char const*)>

08010e08 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 8010e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e0c:	4604      	mov	r4, r0
 8010e0e:	4615      	mov	r5, r2
 8010e10:	461e      	mov	r6, r3
 8010e12:	b086      	sub	sp, #24
 8010e14:	3004      	adds	r0, #4
 8010e16:	b379      	cbz	r1, 8010e78 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 8010e18:	2222      	movs	r2, #34	; 0x22
 8010e1a:	f001 f908 	bl	801202e <memmove>
 8010e1e:	462a      	mov	r2, r5
 8010e20:	4633      	mov	r3, r6
 8010e22:	493d      	ldr	r1, [pc, #244]	; (8010f18 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 8010e24:	a803      	add	r0, sp, #12
 8010e26:	f000 f9f1 	bl	801120c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8010e2a:	6863      	ldr	r3, [r4, #4]
 8010e2c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8010e30:	493a      	ldr	r1, [pc, #232]	; (8010f1c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 8010e32:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8010e36:	a803      	add	r0, sp, #12
 8010e38:	f7ff ff20 	bl	8010c7c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8010e3c:	6863      	ldr	r3, [r4, #4]
 8010e3e:	4938      	ldr	r1, [pc, #224]	; (8010f20 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 8010e40:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8010e44:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8010e48:	a803      	add	r0, sp, #12
 8010e4a:	f7ff ff17 	bl	8010c7c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8010e4e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8010e52:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8010e56:	42a9      	cmp	r1, r5
 8010e58:	d227      	bcs.n	8010eaa <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 8010e5a:	6863      	ldr	r3, [r4, #4]
 8010e5c:	9803      	ldr	r0, [sp, #12]
 8010e5e:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8010e62:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8010e66:	4408      	add	r0, r1
 8010e68:	eba5 0501 	sub.w	r5, r5, r1
 8010e6c:	d10b      	bne.n	8010e86 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8010e6e:	b962      	cbnz	r2, 8010e8a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8010e70:	9200      	str	r2, [sp, #0]
 8010e72:	4b2c      	ldr	r3, [pc, #176]	; (8010f24 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8010e74:	4a2c      	ldr	r2, [pc, #176]	; (8010f28 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8010e76:	e00e      	b.n	8010e96 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8010e78:	6823      	ldr	r3, [r4, #0]
 8010e7a:	4601      	mov	r1, r0
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	68d2      	ldr	r2, [r2, #12]
 8010e82:	4790      	blx	r2
 8010e84:	e7cb      	b.n	8010e1e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8010e86:	2a00      	cmp	r2, #0
 8010e88:	d041      	beq.n	8010f0e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8010e8a:	3b00      	subs	r3, #0
 8010e8c:	bf18      	it	ne
 8010e8e:	2301      	movne	r3, #1
 8010e90:	4a26      	ldr	r2, [pc, #152]	; (8010f2c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8010e92:	9300      	str	r3, [sp, #0]
 8010e94:	4b23      	ldr	r3, [pc, #140]	; (8010f24 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8010e96:	4629      	mov	r1, r5
 8010e98:	f7f7 fe84 	bl	8008ba4 <snprintf>
 8010e9c:	4285      	cmp	r5, r0
 8010e9e:	bfa2      	ittt	ge
 8010ea0:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8010ea4:	181b      	addge	r3, r3, r0
 8010ea6:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8010eaa:	2500      	movs	r5, #0
 8010eac:	2701      	movs	r7, #1
 8010eae:	4e20      	ldr	r6, [pc, #128]	; (8010f30 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8010eb0:	f104 0808 	add.w	r8, r4, #8
 8010eb4:	f856 1b04 	ldr.w	r1, [r6], #4
 8010eb8:	780b      	ldrb	r3, [r1, #0]
 8010eba:	b15b      	cbz	r3, 8010ed4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8010ebc:	6862      	ldr	r2, [r4, #4]
 8010ebe:	fa07 f305 	lsl.w	r3, r7, r5
 8010ec2:	4393      	bics	r3, r2
 8010ec4:	bf0c      	ite	eq
 8010ec6:	2301      	moveq	r3, #1
 8010ec8:	2300      	movne	r3, #0
 8010eca:	f818 2005 	ldrb.w	r2, [r8, r5]
 8010ece:	a803      	add	r0, sp, #12
 8010ed0:	f7ff fed4 	bl	8010c7c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8010ed4:	3501      	adds	r5, #1
 8010ed6:	2d14      	cmp	r5, #20
 8010ed8:	d1ec      	bne.n	8010eb4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 8010eda:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010ede:	b17b      	cbz	r3, 8010f00 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 8010ee0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010ee4:	9b03      	ldr	r3, [sp, #12]
 8010ee6:	4413      	add	r3, r2
 8010ee8:	227d      	movs	r2, #125	; 0x7d
 8010eea:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010eee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010ef2:	9903      	ldr	r1, [sp, #12]
 8010ef4:	54ca      	strb	r2, [r1, r3]
 8010ef6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010efa:	3301      	adds	r3, #1
 8010efc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010f00:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010f04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f06:	601a      	str	r2, [r3, #0]
 8010f08:	b006      	add	sp, #24
 8010f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f0e:	2301      	movs	r3, #1
 8010f10:	4a08      	ldr	r2, [pc, #32]	; (8010f34 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 8010f12:	9300      	str	r3, [sp, #0]
 8010f14:	4b03      	ldr	r3, [pc, #12]	; (8010f24 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8010f16:	e7be      	b.n	8010e96 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8010f18:	08015ae6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r9, fp, ip, lr}
 8010f1c:	08015af2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, fp, ip, lr}
 8010f20:	08015aba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, fp, ip, lr}
 8010f24:	08015ac8 	stmdaeq	r1, {r3, r6, r7, r9, fp, ip, lr}
 8010f28:	08014303 	stmdaeq	r1, {r0, r1, r8, r9, lr}
 8010f2c:	080142fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, lr}
 8010f30:	08015a44 	stmdaeq	r1, {r2, r6, r9, fp, ip, lr}
 8010f34:	08014304 	stmdaeq	r1, {r2, r8, r9, lr}

08010f38 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8010f38:	b513      	push	{r0, r1, r4, lr}
 8010f3a:	6804      	ldr	r4, [r0, #0]
 8010f3c:	b914      	cbnz	r4, 8010f44 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8010f3e:	601c      	str	r4, [r3, #0]
 8010f40:	b002      	add	sp, #8
 8010f42:	bd10      	pop	{r4, pc}
 8010f44:	9300      	str	r3, [sp, #0]
 8010f46:	4613      	mov	r3, r2
 8010f48:	460a      	mov	r2, r1
 8010f4a:	2100      	movs	r1, #0
 8010f4c:	f7ff ff5c 	bl	8010e08 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 8010f50:	e7f6      	b.n	8010f40 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

08010f52 <DisplayUdfParams::Set(DisplayUdf*)>:
 8010f52:	6843      	ldr	r3, [r0, #4]
 8010f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f58:	009a      	lsls	r2, r3, #2
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	460e      	mov	r6, r1
 8010f5e:	d506      	bpl.n	8010f6e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8010f60:	6988      	ldr	r0, [r1, #24]
 8010f62:	b120      	cbz	r0, 8010f6e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8010f64:	6803      	ldr	r3, [r0, #0]
 8010f66:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8010f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f6c:	4798      	blx	r3
 8010f6e:	6863      	ldr	r3, [r4, #4]
 8010f70:	69b0      	ldr	r0, [r6, #24]
 8010f72:	00db      	lsls	r3, r3, #3
 8010f74:	bf41      	itttt	mi
 8010f76:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8010f7a:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8010f7e:	4353      	mulmi	r3, r2
 8010f80:	6173      	strmi	r3, [r6, #20]
 8010f82:	6861      	ldr	r1, [r4, #4]
 8010f84:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8010f88:	b110      	cbz	r0, 8010f90 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8010f8a:	6803      	ldr	r3, [r0, #0]
 8010f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f8e:	4798      	blx	r3
 8010f90:	2500      	movs	r5, #0
 8010f92:	2701      	movs	r7, #1
 8010f94:	f104 0808 	add.w	r8, r4, #8
 8010f98:	6862      	ldr	r2, [r4, #4]
 8010f9a:	fa07 f305 	lsl.w	r3, r7, r5
 8010f9e:	4393      	bics	r3, r2
 8010fa0:	d105      	bne.n	8010fae <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8010fa2:	462a      	mov	r2, r5
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	f818 1005 	ldrb.w	r1, [r8, r5]
 8010faa:	f7ff fe4d 	bl	8010c48 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8010fae:	3501      	adds	r5, #1
 8010fb0:	2d14      	cmp	r5, #20
 8010fb2:	d1f1      	bne.n	8010f98 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8010fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010fb8 <DisplayUdfParams::Dump()>:
 8010fb8:	4770      	bx	lr
	...

08010fbc <DisplayUdf::Show(E131Bridge*)>:
 8010fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010fc0:	460e      	mov	r6, r1
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	b085      	sub	sp, #20
 8010fc6:	f7ff fd93 	bl	8010af0 <DisplayUdf::Show()>
 8010fca:	f896 250b 	ldrb.w	r2, [r6, #1291]	; 0x50b
 8010fce:	f896 350a 	ldrb.w	r3, [r6, #1290]	; 0x50a
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	4413      	add	r3, r2
 8010fd6:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8010fda:	4a21      	ldr	r2, [pc, #132]	; (8011060 <DisplayUdf::Show(E131Bridge*)+0xa4>)
 8010fdc:	f7f6 ffe6 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 8010fe0:	2500      	movs	r5, #0
 8010fe2:	4f20      	ldr	r7, [pc, #128]	; (8011064 <DisplayUdf::Show(E131Bridge*)+0xa8>)
 8010fe4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8011068 <DisplayUdf::Show(E131Bridge*)+0xac>
 8010fe8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 801106c <DisplayUdf::Show(E131Bridge*)+0xb0>
 8010fec:	2301      	movs	r3, #1
 8010fee:	4629      	mov	r1, r5
 8010ff0:	4630      	mov	r0, r6
 8010ff2:	f10d 020e 	add.w	r2, sp, #14
 8010ff6:	f7f8 f867 	bl	80090c8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 8010ffa:	b1a8      	cbz	r0, 8011028 <DisplayUdf::Show(E131Bridge*)+0x6c>
 8010ffc:	2344      	movs	r3, #68	; 0x44
 8010ffe:	436b      	muls	r3, r5
 8011000:	f206 524c 	addw	r2, r6, #1356	; 0x54c
 8011004:	58d2      	ldr	r2, [r2, r3]
 8011006:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 801100a:	2a00      	cmp	r2, #0
 801100c:	bf0c      	ite	eq
 801100e:	463b      	moveq	r3, r7
 8011010:	4643      	movne	r3, r8
 8011012:	e9cd 0300 	strd	r0, r3, [sp]
 8011016:	f104 0144 	add.w	r1, r4, #68	; 0x44
 801101a:	464a      	mov	r2, r9
 801101c:	4620      	mov	r0, r4
 801101e:	5d49      	ldrb	r1, [r1, r5]
 8011020:	f105 0341 	add.w	r3, r5, #65	; 0x41
 8011024:	f7f6 ffc2 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 8011028:	3501      	adds	r5, #1
 801102a:	2d04      	cmp	r5, #4
 801102c:	d1de      	bne.n	8010fec <DisplayUdf::Show(E131Bridge*)+0x30>
 801102e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011030:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8011034:	2a02      	cmp	r2, #2
 8011036:	d001      	beq.n	801103c <DisplayUdf::Show(E131Bridge*)+0x80>
 8011038:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801103a:	b933      	cbnz	r3, 801104a <DisplayUdf::Show(E131Bridge*)+0x8e>
 801103c:	4620      	mov	r0, r4
 801103e:	4a0c      	ldr	r2, [pc, #48]	; (8011070 <DisplayUdf::Show(E131Bridge*)+0xb4>)
 8011040:	f7f6 ffb4 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 8011044:	b005      	add	sp, #20
 8011046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801104a:	480a      	ldr	r0, [pc, #40]	; (8011074 <DisplayUdf::Show(E131Bridge*)+0xb8>)
 801104c:	9300      	str	r3, [sp, #0]
 801104e:	4b0a      	ldr	r3, [pc, #40]	; (8011078 <DisplayUdf::Show(E131Bridge*)+0xbc>)
 8011050:	2a00      	cmp	r2, #0
 8011052:	bf08      	it	eq
 8011054:	4603      	moveq	r3, r0
 8011056:	4620      	mov	r0, r4
 8011058:	4a08      	ldr	r2, [pc, #32]	; (801107c <DisplayUdf::Show(E131Bridge*)+0xc0>)
 801105a:	f7f6 ffa7 	bl	8007fac <Display::Printf(unsigned char, char const*, ...)>
 801105e:	e7f1      	b.n	8011044 <DisplayUdf::Show(E131Bridge*)+0x88>
 8011060:	08015afc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, fp, ip, lr}
 8011064:	0801420d 	stmdaeq	r1, {r0, r2, r3, r9, lr}
 8011068:	08014211 	stmdaeq	r1, {r0, r4, r9, lr}
 801106c:	08015b03 	stmdaeq	r1, {r0, r1, r8, r9, fp, ip, lr}
 8011070:	08015b12 	stmdaeq	r1, {r1, r4, r8, r9, fp, ip, lr}
 8011074:	0801432f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, r9, lr}
 8011078:	08014324 	stmdaeq	r1, {r2, r5, r8, r9, lr}
 801107c:	08015b19 	stmdaeq	r1, {r0, r3, r4, r8, r9, fp, ip, lr}

08011080 <NetworkDisplay::ShowEmacStart()>:
 8011080:	4b01      	ldr	r3, [pc, #4]	; (8011088 <NetworkDisplay::ShowEmacStart()+0x8>)
 8011082:	6818      	ldr	r0, [r3, #0]
 8011084:	f7ff bc9e 	b.w	80109c4 <DisplayUdf::ShowEmacStart()>
 8011088:	2000a8b8 			; <UNDEFINED> instruction: 0x2000a8b8

0801108c <NetworkDisplay::ShowIp()>:
 801108c:	4b01      	ldr	r3, [pc, #4]	; (8011094 <NetworkDisplay::ShowIp()+0x8>)
 801108e:	6818      	ldr	r0, [r3, #0]
 8011090:	f7ff bca8 	b.w	80109e4 <DisplayUdf::ShowIpAddress()>
 8011094:	2000a8b8 			; <UNDEFINED> instruction: 0x2000a8b8

08011098 <NetworkDisplay::ShowShutdown()>:
 8011098:	4b01      	ldr	r3, [pc, #4]	; (80110a0 <NetworkDisplay::ShowShutdown()+0x8>)
 801109a:	6818      	ldr	r0, [r3, #0]
 801109c:	f7ff bda4 	b.w	8010be8 <DisplayUdf::ShowShutdown()>
 80110a0:	2000a8b8 			; <UNDEFINED> instruction: 0x2000a8b8

080110a4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 80110a4:	4b01      	ldr	r3, [pc, #4]	; (80110ac <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 80110a6:	6818      	ldr	r0, [r3, #0]
 80110a8:	f7ff bd66 	b.w	8010b78 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80110ac:	2000a8b8 			; <UNDEFINED> instruction: 0x2000a8b8

080110b0 <properties::convert_json_file(char*, unsigned short, bool)>:
 80110b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b4:	7803      	ldrb	r3, [r0, #0]
 80110b6:	2b7b      	cmp	r3, #123	; 0x7b
 80110b8:	d170      	bne.n	801119c <properties::convert_json_file(char*, unsigned short, bool)+0xec>
 80110ba:	b322      	cbz	r2, 8011106 <properties::convert_json_file(char*, unsigned short, bool)+0x56>
 80110bc:	2301      	movs	r3, #1
 80110be:	4606      	mov	r6, r0
 80110c0:	461c      	mov	r4, r3
 80110c2:	2a00      	cmp	r2, #0
 80110c4:	bf0c      	ite	eq
 80110c6:	f04f 0c0a 	moveq.w	ip, #10
 80110ca:	f04f 0c00 	movne.w	ip, #0
 80110ce:	273d      	movs	r7, #61	; 0x3d
 80110d0:	4299      	cmp	r1, r3
 80110d2:	d960      	bls.n	8011196 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 80110d4:	4299      	cmp	r1, r3
 80110d6:	4602      	mov	r2, r0
 80110d8:	f890 e000 	ldrb.w	lr, [r0]
 80110dc:	f103 0301 	add.w	r3, r3, #1
 80110e0:	f100 0001 	add.w	r0, r0, #1
 80110e4:	d846      	bhi.n	8011174 <properties::convert_json_file(char*, unsigned short, bool)+0xc4>
 80110e6:	1aa0      	subs	r0, r4, r2
 80110e8:	4615      	mov	r5, r2
 80110ea:	1884      	adds	r4, r0, r2
 80110ec:	f812 8b01 	ldrb.w	r8, [r2], #1
 80110f0:	f103 0e01 	add.w	lr, r3, #1
 80110f4:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80110f8:	d053      	beq.n	80111a2 <properties::convert_json_file(char*, unsigned short, bool)+0xf2>
 80110fa:	4299      	cmp	r1, r3
 80110fc:	d957      	bls.n	80111ae <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 80110fe:	4673      	mov	r3, lr
 8011100:	f806 8b01 	strb.w	r8, [r6], #1
 8011104:	e7f0      	b.n	80110e8 <properties::convert_json_file(char*, unsigned short, bool)+0x38>
 8011106:	2323      	movs	r3, #35	; 0x23
 8011108:	f800 3b01 	strb.w	r3, [r0], #1
 801110c:	4605      	mov	r5, r0
 801110e:	2301      	movs	r3, #1
 8011110:	4299      	cmp	r1, r3
 8011112:	d92d      	bls.n	8011170 <properties::convert_json_file(char*, unsigned short, bool)+0xc0>
 8011114:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011118:	2c22      	cmp	r4, #34	; 0x22
 801111a:	d001      	beq.n	8011120 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 801111c:	3301      	adds	r3, #1
 801111e:	e7f7      	b.n	8011110 <properties::convert_json_file(char*, unsigned short, bool)+0x60>
 8011120:	46ac      	mov	ip, r5
 8011122:	4606      	mov	r6, r0
 8011124:	2701      	movs	r7, #1
 8011126:	f89c e000 	ldrb.w	lr, [ip]
 801112a:	4665      	mov	r5, ip
 801112c:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011130:	4630      	mov	r0, r6
 8011132:	463c      	mov	r4, r7
 8011134:	f10c 0c01 	add.w	ip, ip, #1
 8011138:	f106 0601 	add.w	r6, r6, #1
 801113c:	f107 0701 	add.w	r7, r7, #1
 8011140:	d007      	beq.n	8011152 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8011142:	3301      	adds	r3, #1
 8011144:	4299      	cmp	r1, r3
 8011146:	4665      	mov	r5, ip
 8011148:	f806 ec01 	strb.w	lr, [r6, #-1]
 801114c:	d8eb      	bhi.n	8011126 <properties::convert_json_file(char*, unsigned short, bool)+0x76>
 801114e:	463c      	mov	r4, r7
 8011150:	4630      	mov	r0, r6
 8011152:	4606      	mov	r6, r0
 8011154:	200a      	movs	r0, #10
 8011156:	3401      	adds	r4, #1
 8011158:	f806 0b01 	strb.w	r0, [r6], #1
 801115c:	4628      	mov	r0, r5
 801115e:	f815 7b01 	ldrb.w	r7, [r5], #1
 8011162:	2f7b      	cmp	r7, #123	; 0x7b
 8011164:	d0ad      	beq.n	80110c2 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 8011166:	1c5f      	adds	r7, r3, #1
 8011168:	4299      	cmp	r1, r3
 801116a:	463b      	mov	r3, r7
 801116c:	d8f6      	bhi.n	801115c <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 801116e:	e7a8      	b.n	80110c2 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 8011170:	2401      	movs	r4, #1
 8011172:	e7ee      	b.n	8011152 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8011174:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011178:	d1ac      	bne.n	80110d4 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 801117a:	4602      	mov	r2, r0
 801117c:	e7b3      	b.n	80110e6 <properties::convert_json_file(char*, unsigned short, bool)+0x36>
 801117e:	283a      	cmp	r0, #58	; 0x3a
 8011180:	d115      	bne.n	80111ae <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 8011182:	462b      	mov	r3, r5
 8011184:	e01b      	b.n	80111be <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 8011186:	4686      	mov	lr, r0
 8011188:	e027      	b.n	80111da <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
 801118a:	4673      	mov	r3, lr
 801118c:	f806 cb01 	strb.w	ip, [r6], #1
 8011190:	3401      	adds	r4, #1
 8011192:	3301      	adds	r3, #1
 8011194:	e79c      	b.n	80110d0 <properties::convert_json_file(char*, unsigned short, bool)+0x20>
 8011196:	4620      	mov	r0, r4
 8011198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801119c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111a0:	e7fa      	b.n	8011198 <properties::convert_json_file(char*, unsigned short, bool)+0xe8>
 80111a2:	4630      	mov	r0, r6
 80111a4:	f800 7b01 	strb.w	r7, [r0], #1
 80111a8:	469e      	mov	lr, r3
 80111aa:	4606      	mov	r6, r0
 80111ac:	3401      	adds	r4, #1
 80111ae:	4571      	cmp	r1, lr
 80111b0:	462b      	mov	r3, r5
 80111b2:	7828      	ldrb	r0, [r5, #0]
 80111b4:	f10e 0e01 	add.w	lr, lr, #1
 80111b8:	f105 0501 	add.w	r5, r5, #1
 80111bc:	d8df      	bhi.n	801117e <properties::convert_json_file(char*, unsigned short, bool)+0xce>
 80111be:	781d      	ldrb	r5, [r3, #0]
 80111c0:	461a      	mov	r2, r3
 80111c2:	2d2f      	cmp	r5, #47	; 0x2f
 80111c4:	4670      	mov	r0, lr
 80111c6:	f103 0301 	add.w	r3, r3, #1
 80111ca:	f10e 0e01 	add.w	lr, lr, #1
 80111ce:	d8da      	bhi.n	8011186 <properties::convert_json_file(char*, unsigned short, bool)+0xd6>
 80111d0:	4281      	cmp	r1, r0
 80111d2:	d8f4      	bhi.n	80111be <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 80111d4:	2d22      	cmp	r5, #34	; 0x22
 80111d6:	bf08      	it	eq
 80111d8:	461a      	moveq	r2, r3
 80111da:	4610      	mov	r0, r2
 80111dc:	f810 5b01 	ldrb.w	r5, [r0], #1
 80111e0:	f10e 0301 	add.w	r3, lr, #1
 80111e4:	2d22      	cmp	r5, #34	; 0x22
 80111e6:	d0d0      	beq.n	801118a <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 80111e8:	2d2c      	cmp	r5, #44	; 0x2c
 80111ea:	d0ce      	beq.n	801118a <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 80111ec:	2d7d      	cmp	r5, #125	; 0x7d
 80111ee:	d0cc      	beq.n	801118a <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 80111f0:	4571      	cmp	r1, lr
 80111f2:	d9ce      	bls.n	8011192 <properties::convert_json_file(char*, unsigned short, bool)+0xe2>
 80111f4:	f1a5 0e20 	sub.w	lr, r5, #32
 80111f8:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 80111fc:	d803      	bhi.n	8011206 <properties::convert_json_file(char*, unsigned short, bool)+0x156>
 80111fe:	4602      	mov	r2, r0
 8011200:	f806 5b01 	strb.w	r5, [r6], #1
 8011204:	3401      	adds	r4, #1
 8011206:	469e      	mov	lr, r3
 8011208:	e7e7      	b.n	80111da <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
	...

0801120c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 801120c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011210:	6002      	str	r2, [r0, #0]
 8011212:	4614      	mov	r4, r2
 8011214:	2200      	movs	r2, #0
 8011216:	4606      	mov	r6, r0
 8011218:	460f      	mov	r7, r1
 801121a:	80c2      	strh	r2, [r0, #6]
 801121c:	4a1b      	ldr	r2, [pc, #108]	; (801128c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 801121e:	8083      	strh	r3, [r0, #4]
 8011220:	7810      	ldrb	r0, [r2, #0]
 8011222:	f000 0001 	and.w	r0, r0, #1
 8011226:	7230      	strb	r0, [r6, #8]
 8011228:	463d      	mov	r5, r7
 801122a:	782a      	ldrb	r2, [r5, #0]
 801122c:	3701      	adds	r7, #1
 801122e:	2a00      	cmp	r2, #0
 8011230:	d1fa      	bne.n	8011228 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8011232:	1a6d      	subs	r5, r5, r1
 8011234:	b29b      	uxth	r3, r3
 8011236:	b1d0      	cbz	r0, 801126e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8011238:	1d2f      	adds	r7, r5, #4
 801123a:	429f      	cmp	r7, r3
 801123c:	d814      	bhi.n	8011268 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801123e:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8011242:	f04f 0922 	mov.w	r9, #34	; 0x22
 8011246:	462a      	mov	r2, r5
 8011248:	f884 8000 	strb.w	r8, [r4]
 801124c:	f884 9001 	strb.w	r9, [r4, #1]
 8011250:	1ca0      	adds	r0, r4, #2
 8011252:	f000 feec 	bl	801202e <memmove>
 8011256:	223a      	movs	r2, #58	; 0x3a
 8011258:	1963      	adds	r3, r4, r5
 801125a:	3505      	adds	r5, #5
 801125c:	f883 9002 	strb.w	r9, [r3, #2]
 8011260:	70da      	strb	r2, [r3, #3]
 8011262:	80f5      	strh	r5, [r6, #6]
 8011264:	f804 8007 	strb.w	r8, [r4, r7]
 8011268:	4630      	mov	r0, r6
 801126a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801126e:	1caf      	adds	r7, r5, #2
 8011270:	429f      	cmp	r7, r3
 8011272:	d8f9      	bhi.n	8011268 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8011274:	4620      	mov	r0, r4
 8011276:	2323      	movs	r3, #35	; 0x23
 8011278:	462a      	mov	r2, r5
 801127a:	f800 3b01 	strb.w	r3, [r0], #1
 801127e:	f000 fed6 	bl	801202e <memmove>
 8011282:	230a      	movs	r3, #10
 8011284:	442c      	add	r4, r5
 8011286:	7063      	strb	r3, [r4, #1]
 8011288:	80f7      	strh	r7, [r6, #6]
 801128a:	e7ed      	b.n	8011268 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801128c:	2000a8bc 			; <UNDEFINED> instruction: 0x2000a8bc

08011290 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8011290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011292:	469c      	mov	ip, r3
 8011294:	8885      	ldrh	r5, [r0, #4]
 8011296:	88c3      	ldrh	r3, [r0, #6]
 8011298:	b085      	sub	sp, #20
 801129a:	42ab      	cmp	r3, r5
 801129c:	d302      	bcc.n	80112a4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 801129e:	2000      	movs	r0, #0
 80112a0:	b005      	add	sp, #20
 80112a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112a4:	4604      	mov	r4, r0
 80112a6:	6800      	ldr	r0, [r0, #0]
 80112a8:	1aed      	subs	r5, r5, r3
 80112aa:	4418      	add	r0, r3
 80112ac:	b2d6      	uxtb	r6, r2
 80112ae:	f3c2 2707 	ubfx	r7, r2, #8, #8
 80112b2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80112b6:	f894 e008 	ldrb.w	lr, [r4, #8]
 80112ba:	0e12      	lsrs	r2, r2, #24
 80112bc:	f1bc 0f00 	cmp.w	ip, #0
 80112c0:	d109      	bne.n	80112d6 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 80112c2:	f1be 0f00 	cmp.w	lr, #0
 80112c6:	d109      	bne.n	80112dc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 80112c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80112cc:	e9cd 6700 	strd	r6, r7, [sp]
 80112d0:	460b      	mov	r3, r1
 80112d2:	4a0e      	ldr	r2, [pc, #56]	; (801130c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 80112d4:	e008      	b.n	80112e8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80112d6:	f1be 0f00 	cmp.w	lr, #0
 80112da:	d00f      	beq.n	80112fc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 80112dc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80112e0:	460b      	mov	r3, r1
 80112e2:	e9cd 6700 	strd	r6, r7, [sp]
 80112e6:	4a0a      	ldr	r2, [pc, #40]	; (8011310 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 80112e8:	4629      	mov	r1, r5
 80112ea:	f7f7 fc5b 	bl	8008ba4 <snprintf>
 80112ee:	4285      	cmp	r5, r0
 80112f0:	dbd5      	blt.n	801129e <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 80112f2:	88e3      	ldrh	r3, [r4, #6]
 80112f4:	4403      	add	r3, r0
 80112f6:	80e3      	strh	r3, [r4, #6]
 80112f8:	2001      	movs	r0, #1
 80112fa:	e7d1      	b.n	80112a0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 80112fc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011300:	e9cd 6700 	strd	r6, r7, [sp]
 8011304:	460b      	mov	r3, r1
 8011306:	4a03      	ldr	r2, [pc, #12]	; (8011314 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8011308:	e7ee      	b.n	80112e8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 801130a:	bf00      	nop
 801130c:	08015ba7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, r9, fp, ip, lr}
 8011310:	08015b93 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, fp, ip, lr}
 8011314:	08015ba8 	stmdaeq	r1, {r3, r5, r7, r8, r9, fp, ip, lr}

08011318 <PropertiesBuilder::AddComment(char const*)>:
 8011318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131a:	7a06      	ldrb	r6, [r0, #8]
 801131c:	b996      	cbnz	r6, 8011344 <PropertiesBuilder::AddComment(char const*)+0x2c>
 801131e:	4604      	mov	r4, r0
 8011320:	88c0      	ldrh	r0, [r0, #6]
 8011322:	88a5      	ldrh	r5, [r4, #4]
 8011324:	42a8      	cmp	r0, r5
 8011326:	d20d      	bcs.n	8011344 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8011328:	6827      	ldr	r7, [r4, #0]
 801132a:	1a2d      	subs	r5, r5, r0
 801132c:	460b      	mov	r3, r1
 801132e:	4a06      	ldr	r2, [pc, #24]	; (8011348 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8011330:	4629      	mov	r1, r5
 8011332:	4438      	add	r0, r7
 8011334:	f7f7 fc36 	bl	8008ba4 <snprintf>
 8011338:	4285      	cmp	r5, r0
 801133a:	bfa1      	itttt	ge
 801133c:	2601      	movge	r6, #1
 801133e:	88e3      	ldrhge	r3, [r4, #6]
 8011340:	18c0      	addge	r0, r0, r3
 8011342:	80e0      	strhge	r0, [r4, #6]
 8011344:	4630      	mov	r0, r6
 8011346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011348:	08015bb8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, fp, ip, lr}

0801134c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 801134c:	e9c0 1200 	strd	r1, r2, [r0]
 8011350:	4770      	bx	lr

08011352 <ReadConfigFile::~ReadConfigFile()>:
 8011352:	4770      	bx	lr

08011354 <ReadConfigFile::Read(char const*, unsigned int)>:
 8011354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011358:	4606      	mov	r6, r0
 801135a:	460d      	mov	r5, r1
 801135c:	4614      	mov	r4, r2
 801135e:	f04f 0800 	mov.w	r8, #0
 8011362:	b090      	sub	sp, #64	; 0x40
 8011364:	b33c      	cbz	r4, 80113b6 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8011366:	466b      	mov	r3, sp
 8011368:	462a      	mov	r2, r5
 801136a:	4619      	mov	r1, r3
 801136c:	7817      	ldrb	r7, [r2, #0]
 801136e:	4610      	mov	r0, r2
 8011370:	2f0d      	cmp	r7, #13
 8011372:	f102 0201 	add.w	r2, r2, #1
 8011376:	d013      	beq.n	80113a0 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 8011378:	2f0a      	cmp	r7, #10
 801137a:	d011      	beq.n	80113a0 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 801137c:	f803 7b01 	strb.w	r7, [r3], #1
 8011380:	1a58      	subs	r0, r3, r1
 8011382:	283f      	cmp	r0, #63	; 0x3f
 8011384:	4615      	mov	r5, r2
 8011386:	dc16      	bgt.n	80113b6 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8011388:	3c01      	subs	r4, #1
 801138a:	d1ef      	bne.n	801136c <ReadConfigFile::Read(char const*, unsigned int)+0x18>
 801138c:	f89d 2000 	ldrb.w	r2, [sp]
 8011390:	2a60      	cmp	r2, #96	; 0x60
 8011392:	d9e7      	bls.n	8011364 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8011394:	f883 8000 	strb.w	r8, [r3]
 8011398:	e9d6 3000 	ldrd	r3, r0, [r6]
 801139c:	4798      	blx	r3
 801139e:	e7e1      	b.n	8011364 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80113a0:	4605      	mov	r5, r0
 80113a2:	2c00      	cmp	r4, #0
 80113a4:	d0f2      	beq.n	801138c <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 80113a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113aa:	2a0d      	cmp	r2, #13
 80113ac:	d001      	beq.n	80113b2 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80113ae:	2a0a      	cmp	r2, #10
 80113b0:	d1ec      	bne.n	801138c <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 80113b2:	3c01      	subs	r4, #1
 80113b4:	e7f4      	b.n	80113a0 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 80113b6:	b010      	add	sp, #64	; 0x40
 80113b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080113bc <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 80113bc:	b570      	push	{r4, r5, r6, lr}
 80113be:	4615      	mov	r5, r2
 80113c0:	461c      	mov	r4, r3
 80113c2:	f000 f91b 	bl	80115fc <Sscan::checkName(char const*, char const*)>
 80113c6:	b160      	cbz	r0, 80113e2 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x26>
 80113c8:	2100      	movs	r1, #0
 80113ca:	5c43      	ldrb	r3, [r0, r1]
 80113cc:	6826      	ldr	r6, [r4, #0]
 80113ce:	b28a      	uxth	r2, r1
 80113d0:	b123      	cbz	r3, 80113dc <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 80113d2:	42b2      	cmp	r2, r6
 80113d4:	d207      	bcs.n	80113e6 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2a>
 80113d6:	546b      	strb	r3, [r5, r1]
 80113d8:	3101      	adds	r1, #1
 80113da:	e7f6      	b.n	80113ca <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 80113dc:	2000      	movs	r0, #0
 80113de:	6022      	str	r2, [r4, #0]
 80113e0:	bd70      	pop	{r4, r5, r6, pc}
 80113e2:	2001      	movs	r0, #1
 80113e4:	e7fc      	b.n	80113e0 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>
 80113e6:	2b0a      	cmp	r3, #10
 80113e8:	d0f8      	beq.n	80113dc <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 80113ea:	2002      	movs	r0, #2
 80113ec:	e7f8      	b.n	80113e0 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>

080113ee <Sscan::Float(char const*, char const*, float&)>:
 80113ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113f2:	4616      	mov	r6, r2
 80113f4:	f000 f902 	bl	80115fc <Sscan::checkName(char const*, char const*)>
 80113f8:	2800      	cmp	r0, #0
 80113fa:	d059      	beq.n	80114b0 <Sscan::Float(char const*, char const*, float&)+0xc2>
 80113fc:	4604      	mov	r4, r0
 80113fe:	7803      	ldrb	r3, [r0, #0]
 8011400:	2b2d      	cmp	r3, #45	; 0x2d
 8011402:	bf08      	it	eq
 8011404:	3401      	addeq	r4, #1
 8011406:	7823      	ldrb	r3, [r4, #0]
 8011408:	bf0c      	ite	eq
 801140a:	f04f 0801 	moveq.w	r8, #1
 801140e:	f04f 0800 	movne.w	r8, #0
 8011412:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8011416:	d103      	bne.n	8011420 <Sscan::Float(char const*, char const*, float&)+0x32>
 8011418:	2702      	movs	r7, #2
 801141a:	4638      	mov	r0, r7
 801141c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011420:	2000      	movs	r0, #0
 8011422:	220a      	movs	r2, #10
 8011424:	7823      	ldrb	r3, [r4, #0]
 8011426:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801142a:	2909      	cmp	r1, #9
 801142c:	d8f4      	bhi.n	8011418 <Sscan::Float(char const*, char const*, float&)+0x2a>
 801142e:	fb02 3000 	mla	r0, r2, r0, r3
 8011432:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011436:	3830      	subs	r0, #48	; 0x30
 8011438:	2b2e      	cmp	r3, #46	; 0x2e
 801143a:	d002      	beq.n	8011442 <Sscan::Float(char const*, char const*, float&)+0x54>
 801143c:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8011440:	d1f0      	bne.n	8011424 <Sscan::Float(char const*, char const*, float&)+0x36>
 8011442:	f7f5 ff8b 	bl	800735c <__aeabi_ui2f>
 8011446:	6030      	str	r0, [r6, #0]
 8011448:	7823      	ldrb	r3, [r4, #0]
 801144a:	4605      	mov	r5, r0
 801144c:	2b2e      	cmp	r3, #46	; 0x2e
 801144e:	d008      	beq.n	8011462 <Sscan::Float(char const*, char const*, float&)+0x74>
 8011450:	f1b8 0f00 	cmp.w	r8, #0
 8011454:	d101      	bne.n	801145a <Sscan::Float(char const*, char const*, float&)+0x6c>
 8011456:	2700      	movs	r7, #0
 8011458:	e7df      	b.n	801141a <Sscan::Float(char const*, char const*, float&)+0x2c>
 801145a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 801145e:	6035      	str	r5, [r6, #0]
 8011460:	e7f9      	b.n	8011456 <Sscan::Float(char const*, char const*, float&)+0x68>
 8011462:	f04f 0901 	mov.w	r9, #1
 8011466:	2000      	movs	r0, #0
 8011468:	220a      	movs	r2, #10
 801146a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801146e:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 8011472:	d007      	beq.n	8011484 <Sscan::Float(char const*, char const*, float&)+0x96>
 8011474:	3b30      	subs	r3, #48	; 0x30
 8011476:	2b09      	cmp	r3, #9
 8011478:	d8ce      	bhi.n	8011418 <Sscan::Float(char const*, char const*, float&)+0x2a>
 801147a:	fb02 3000 	mla	r0, r2, r0, r3
 801147e:	fb02 f909 	mul.w	r9, r2, r9
 8011482:	e7f2      	b.n	801146a <Sscan::Float(char const*, char const*, float&)+0x7c>
 8011484:	f7f5 ff6a 	bl	800735c <__aeabi_ui2f>
 8011488:	4604      	mov	r4, r0
 801148a:	4648      	mov	r0, r9
 801148c:	f7f5 ff66 	bl	800735c <__aeabi_ui2f>
 8011490:	4601      	mov	r1, r0
 8011492:	4620      	mov	r0, r4
 8011494:	f7f6 fc4a 	bl	8007d2c <__aeabi_fdiv>
 8011498:	4629      	mov	r1, r5
 801149a:	f7f5 feaf 	bl	80071fc <__addsf3>
 801149e:	f1b8 0f00 	cmp.w	r8, #0
 80114a2:	d101      	bne.n	80114a8 <Sscan::Float(char const*, char const*, float&)+0xba>
 80114a4:	6030      	str	r0, [r6, #0]
 80114a6:	e7d6      	b.n	8011456 <Sscan::Float(char const*, char const*, float&)+0x68>
 80114a8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80114ac:	6030      	str	r0, [r6, #0]
 80114ae:	e7b4      	b.n	801141a <Sscan::Float(char const*, char const*, float&)+0x2c>
 80114b0:	2701      	movs	r7, #1
 80114b2:	e7b2      	b.n	801141a <Sscan::Float(char const*, char const*, float&)+0x2c>

080114b4 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 80114b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114b6:	4615      	mov	r5, r2
 80114b8:	f000 f8a0 	bl	80115fc <Sscan::checkName(char const*, char const*)>
 80114bc:	b3c0      	cbz	r0, 8011530 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x7c>
 80114be:	2400      	movs	r4, #0
 80114c0:	270a      	movs	r7, #10
 80114c2:	ae01      	add	r6, sp, #4
 80114c4:	4603      	mov	r3, r0
 80114c6:	2100      	movs	r1, #0
 80114c8:	f100 0c04 	add.w	ip, r0, #4
 80114cc:	4618      	mov	r0, r3
 80114ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114d2:	2a2e      	cmp	r2, #46	; 0x2e
 80114d4:	d00e      	beq.n	80114f4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 80114d6:	b16a      	cbz	r2, 80114f4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 80114d8:	4560      	cmp	r0, ip
 80114da:	d102      	bne.n	80114e2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2e>
 80114dc:	2002      	movs	r0, #2
 80114de:	b003      	add	sp, #12
 80114e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114e2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80114e6:	2b09      	cmp	r3, #9
 80114e8:	d8f8      	bhi.n	80114dc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80114ea:	fb07 2101 	mla	r1, r7, r1, r2
 80114ee:	4603      	mov	r3, r0
 80114f0:	3930      	subs	r1, #48	; 0x30
 80114f2:	e7eb      	b.n	80114cc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x18>
 80114f4:	29ff      	cmp	r1, #255	; 0xff
 80114f6:	d8f1      	bhi.n	80114dc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80114f8:	3401      	adds	r4, #1
 80114fa:	2c03      	cmp	r4, #3
 80114fc:	f806 1b01 	strb.w	r1, [r6], #1
 8011500:	d1e0      	bne.n	80114c4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x10>
 8011502:	2400      	movs	r4, #0
 8011504:	220a      	movs	r2, #10
 8011506:	1d1e      	adds	r6, r3, #4
 8011508:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801150c:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8011510:	d007      	beq.n	8011522 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6e>
 8011512:	429e      	cmp	r6, r3
 8011514:	d0e2      	beq.n	80114dc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8011516:	3930      	subs	r1, #48	; 0x30
 8011518:	2909      	cmp	r1, #9
 801151a:	d8df      	bhi.n	80114dc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 801151c:	fb02 1404 	mla	r4, r2, r4, r1
 8011520:	e7f2      	b.n	8011508 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8011522:	2cff      	cmp	r4, #255	; 0xff
 8011524:	d8da      	bhi.n	80114dc <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8011526:	f88d 4007 	strb.w	r4, [sp, #7]
 801152a:	9b01      	ldr	r3, [sp, #4]
 801152c:	602b      	str	r3, [r5, #0]
 801152e:	e7d6      	b.n	80114de <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>
 8011530:	2001      	movs	r0, #1
 8011532:	e7d4      	b.n	80114de <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>

08011534 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8011534:	b538      	push	{r3, r4, r5, lr}
 8011536:	4615      	mov	r5, r2
 8011538:	f000 f860 	bl	80115fc <Sscan::checkName(char const*, char const*)>
 801153c:	b1a0      	cbz	r0, 8011568 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 801153e:	4604      	mov	r4, r0
 8011540:	2100      	movs	r1, #0
 8011542:	220a      	movs	r2, #10
 8011544:	7823      	ldrb	r3, [r4, #0]
 8011546:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 801154a:	2809      	cmp	r0, #9
 801154c:	d80e      	bhi.n	801156c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 801154e:	fb02 3101 	mla	r1, r2, r1, r3
 8011552:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011556:	3930      	subs	r1, #48	; 0x30
 8011558:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 801155c:	d1f2      	bne.n	8011544 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 801155e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8011562:	d203      	bcs.n	801156c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8011564:	8029      	strh	r1, [r5, #0]
 8011566:	bd38      	pop	{r3, r4, r5, pc}
 8011568:	2001      	movs	r0, #1
 801156a:	e7fc      	b.n	8011566 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 801156c:	2002      	movs	r0, #2
 801156e:	e7fa      	b.n	8011566 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08011570 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 8011570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011572:	4615      	mov	r5, r2
 8011574:	f000 f842 	bl	80115fc <Sscan::checkName(char const*, char const*)>
 8011578:	b1f8      	cbz	r0, 80115ba <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 801157a:	2300      	movs	r3, #0
 801157c:	4604      	mov	r4, r0
 801157e:	461e      	mov	r6, r3
 8011580:	270a      	movs	r7, #10
 8011582:	7822      	ldrb	r2, [r4, #0]
 8011584:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011588:	2909      	cmp	r1, #9
 801158a:	d818      	bhi.n	80115be <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 801158c:	fba3 3107 	umull	r3, r1, r3, r7
 8011590:	fb07 1106 	mla	r1, r7, r6, r1
 8011594:	3b30      	subs	r3, #48	; 0x30
 8011596:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 801159a:	18d3      	adds	r3, r2, r3
 801159c:	f141 0600 	adc.w	r6, r1, #0
 80115a0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80115a4:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 80115a8:	d1eb      	bne.n	8011582 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x12>
 80115aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115ae:	429a      	cmp	r2, r3
 80115b0:	eb70 0206 	sbcs.w	r2, r0, r6
 80115b4:	d303      	bcc.n	80115be <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 80115b6:	602b      	str	r3, [r5, #0]
 80115b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115ba:	2001      	movs	r0, #1
 80115bc:	e7fc      	b.n	80115b8 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>
 80115be:	2002      	movs	r0, #2
 80115c0:	e7fa      	b.n	80115b8 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>

080115c2 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 80115c2:	b538      	push	{r3, r4, r5, lr}
 80115c4:	4615      	mov	r5, r2
 80115c6:	f000 f819 	bl	80115fc <Sscan::checkName(char const*, char const*)>
 80115ca:	b198      	cbz	r0, 80115f4 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 80115cc:	4604      	mov	r4, r0
 80115ce:	2100      	movs	r1, #0
 80115d0:	220a      	movs	r2, #10
 80115d2:	7823      	ldrb	r3, [r4, #0]
 80115d4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80115d8:	2809      	cmp	r0, #9
 80115da:	d80d      	bhi.n	80115f8 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 80115dc:	fb02 3101 	mla	r1, r2, r1, r3
 80115e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80115e4:	3930      	subs	r1, #48	; 0x30
 80115e6:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 80115ea:	d1f2      	bne.n	80115d2 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 80115ec:	29ff      	cmp	r1, #255	; 0xff
 80115ee:	d803      	bhi.n	80115f8 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 80115f0:	7029      	strb	r1, [r5, #0]
 80115f2:	bd38      	pop	{r3, r4, r5, pc}
 80115f4:	2001      	movs	r0, #1
 80115f6:	e7fc      	b.n	80115f2 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 80115f8:	2002      	movs	r0, #2
 80115fa:	e7fa      	b.n	80115f2 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

080115fc <Sscan::checkName(char const*, char const*)>:
 80115fc:	4603      	mov	r3, r0
 80115fe:	b510      	push	{r4, lr}
 8011600:	3901      	subs	r1, #1
 8011602:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011606:	461c      	mov	r4, r3
 8011608:	f813 2b01 	ldrb.w	r2, [r3], #1
 801160c:	b120      	cbz	r0, 8011618 <Sscan::checkName(char const*, char const*)+0x1c>
 801160e:	b10a      	cbz	r2, 8011614 <Sscan::checkName(char const*, char const*)+0x18>
 8011610:	4290      	cmp	r0, r2
 8011612:	d0f6      	beq.n	8011602 <Sscan::checkName(char const*, char const*)+0x6>
 8011614:	2000      	movs	r0, #0
 8011616:	e006      	b.n	8011626 <Sscan::checkName(char const*, char const*)+0x2a>
 8011618:	2a3d      	cmp	r2, #61	; 0x3d
 801161a:	d104      	bne.n	8011626 <Sscan::checkName(char const*, char const*)+0x2a>
 801161c:	7860      	ldrb	r0, [r4, #1]
 801161e:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8011622:	d000      	beq.n	8011626 <Sscan::checkName(char const*, char const*)+0x2a>
 8011624:	1c60      	adds	r0, r4, #1
 8011626:	bd10      	pop	{r4, pc}

08011628 <Display::PrintInfo() [clone .isra.0]>:
 8011628:	b910      	cbnz	r0, 8011630 <Display::PrintInfo() [clone .isra.0]+0x8>
 801162a:	4803      	ldr	r0, [pc, #12]	; (8011638 <Display::PrintInfo() [clone .isra.0]+0x10>)
 801162c:	f000 bd3b 	b.w	80120a6 <puts>
 8011630:	6803      	ldr	r3, [r0, #0]
 8011632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011634:	4718      	bx	r3
 8011636:	bf00      	nop
 8011638:	08015d48 	stmdaeq	r1, {r3, r6, r8, sl, fp, ip, lr}

0801163c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 801163c:	b513      	push	{r0, r1, r4, lr}
 801163e:	4604      	mov	r4, r0
 8011640:	0a13      	lsrs	r3, r2, #8
 8011642:	7800      	ldrb	r0, [r0, #0]
 8011644:	f88d 1004 	strb.w	r1, [sp, #4]
 8011648:	f88d 3005 	strb.w	r3, [sp, #5]
 801164c:	f88d 2006 	strb.w	r2, [sp, #6]
 8011650:	f001 fc20 	bl	8012e94 <gd32_i2c_set_address(unsigned char)>
 8011654:	6860      	ldr	r0, [r4, #4]
 8011656:	f001 fc15 	bl	8012e84 <gd32_i2c_set_baudrate(unsigned int)>
 801165a:	2103      	movs	r1, #3
 801165c:	a801      	add	r0, sp, #4
 801165e:	f001 fc1f 	bl	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 8011662:	b002      	add	sp, #8
 8011664:	bd10      	pop	{r4, pc}

08011666 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8011666:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011668:	460d      	mov	r5, r1
 801166a:	4604      	mov	r4, r0
 801166c:	f001 fc12 	bl	8012e94 <gd32_i2c_set_address(unsigned char)>
 8011670:	4628      	mov	r0, r5
 8011672:	f001 fc07 	bl	8012e84 <gd32_i2c_set_baudrate(unsigned int)>
 8011676:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801167a:	2b07      	cmp	r3, #7
 801167c:	d902      	bls.n	8011684 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 801167e:	3c50      	subs	r4, #80	; 0x50
 8011680:	2c0f      	cmp	r4, #15
 8011682:	d809      	bhi.n	8011698 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8011684:	2101      	movs	r1, #1
 8011686:	f10d 0007 	add.w	r0, sp, #7
 801168a:	f001 fc6f 	bl	8012f6c <gd32_i2c_read(char*, unsigned int)>
 801168e:	fab0 f080 	clz	r0, r0
 8011692:	0940      	lsrs	r0, r0, #5
 8011694:	b003      	add	sp, #12
 8011696:	bd30      	pop	{r4, r5, pc}
 8011698:	2100      	movs	r1, #0
 801169a:	4608      	mov	r0, r1
 801169c:	f001 fc00 	bl	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 80116a0:	e7f5      	b.n	801168e <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

080116a2 <Display::Detect7Segment()>:
 80116a2:	b538      	push	{r3, r4, r5, lr}
 80116a4:	68c1      	ldr	r1, [r0, #12]
 80116a6:	4604      	mov	r4, r0
 80116a8:	7a00      	ldrb	r0, [r0, #8]
 80116aa:	f7ff ffdc 	bl	8011666 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 80116ae:	7460      	strb	r0, [r4, #17]
 80116b0:	b170      	cbz	r0, 80116d0 <Display::Detect7Segment()+0x2e>
 80116b2:	2200      	movs	r2, #0
 80116b4:	f104 0508 	add.w	r5, r4, #8
 80116b8:	4611      	mov	r1, r2
 80116ba:	4628      	mov	r0, r5
 80116bc:	f7ff ffbe 	bl	801163c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80116c0:	7c63      	ldrb	r3, [r4, #17]
 80116c2:	b12b      	cbz	r3, 80116d0 <Display::Detect7Segment()+0x2e>
 80116c4:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 80116c8:	2112      	movs	r1, #18
 80116ca:	4628      	mov	r0, r5
 80116cc:	f7ff ffb6 	bl	801163c <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80116d0:	bd38      	pop	{r3, r4, r5, pc}

080116d2 <Display::Detect(display::Type)>:
 80116d2:	2902      	cmp	r1, #2
 80116d4:	b538      	push	{r3, r4, r5, lr}
 80116d6:	4604      	mov	r4, r0
 80116d8:	d014      	beq.n	8011704 <Display::Detect(display::Type)+0x32>
 80116da:	2904      	cmp	r1, #4
 80116dc:	d01b      	beq.n	8011716 <Display::Detect(display::Type)+0x44>
 80116de:	69a0      	ldr	r0, [r4, #24]
 80116e0:	b168      	cbz	r0, 80116fe <Display::Detect(display::Type)+0x2c>
 80116e2:	6803      	ldr	r3, [r0, #0]
 80116e4:	689b      	ldr	r3, [r3, #8]
 80116e6:	4798      	blx	r3
 80116e8:	4603      	mov	r3, r0
 80116ea:	69a0      	ldr	r0, [r4, #24]
 80116ec:	b9ab      	cbnz	r3, 801171a <Display::Detect(display::Type)+0x48>
 80116ee:	b110      	cbz	r0, 80116f6 <Display::Detect(display::Type)+0x24>
 80116f0:	6803      	ldr	r3, [r0, #0]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	4798      	blx	r3
 80116f6:	2300      	movs	r3, #0
 80116f8:	61a3      	str	r3, [r4, #24]
 80116fa:	2304      	movs	r3, #4
 80116fc:	6023      	str	r3, [r4, #0]
 80116fe:	2300      	movs	r3, #0
 8011700:	6163      	str	r3, [r4, #20]
 8011702:	e010      	b.n	8011726 <Display::Detect(display::Type)+0x54>
 8011704:	2018      	movs	r0, #24
 8011706:	f000 fbd3 	bl	8011eb0 <operator new(unsigned int)>
 801170a:	4605      	mov	r5, r0
 801170c:	2100      	movs	r1, #0
 801170e:	f000 f89b 	bl	8011848 <Ssd1306::Ssd1306(TOledPanel)>
 8011712:	61a5      	str	r5, [r4, #24]
 8011714:	e7e3      	b.n	80116de <Display::Detect(display::Type)+0xc>
 8011716:	6001      	str	r1, [r0, #0]
 8011718:	e7e1      	b.n	80116de <Display::Detect(display::Type)+0xc>
 801171a:	6803      	ldr	r3, [r0, #0]
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	4798      	blx	r3
 8011720:	69a3      	ldr	r3, [r4, #24]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d0eb      	beq.n	80116fe <Display::Detect(display::Type)+0x2c>
 8011726:	bd38      	pop	{r3, r4, r5, pc}

08011728 <Display::Display()>:
 8011728:	2304      	movs	r3, #4
 801172a:	b510      	push	{r4, lr}
 801172c:	6003      	str	r3, [r0, #0]
 801172e:	4b0d      	ldr	r3, [pc, #52]	; (8011764 <Display::Display()+0x3c>)
 8011730:	4604      	mov	r4, r0
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	4a0c      	ldr	r2, [pc, #48]	; (8011768 <Display::Display()+0x40>)
 8011736:	6043      	str	r3, [r0, #4]
 8011738:	2321      	movs	r3, #33	; 0x21
 801173a:	7203      	strb	r3, [r0, #8]
 801173c:	4b0b      	ldr	r3, [pc, #44]	; (801176c <Display::Display()+0x44>)
 801173e:	2102      	movs	r1, #2
 8011740:	60c3      	str	r3, [r0, #12]
 8011742:	2300      	movs	r3, #0
 8011744:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8011748:	8203      	strh	r3, [r0, #16]
 801174a:	4b09      	ldr	r3, [pc, #36]	; (8011770 <Display::Display()+0x48>)
 801174c:	6018      	str	r0, [r3, #0]
 801174e:	f7ff ffc0 	bl	80116d2 <Display::Detect(display::Type)>
 8011752:	4620      	mov	r0, r4
 8011754:	f7ff ffa5 	bl	80116a2 <Display::Detect7Segment()>
 8011758:	69a0      	ldr	r0, [r4, #24]
 801175a:	f7ff ff65 	bl	8011628 <Display::PrintInfo() [clone .isra.0]>
 801175e:	4620      	mov	r0, r4
 8011760:	bd10      	pop	{r4, pc}
 8011762:	bf00      	nop
 8011764:	2000a9c4 	andcs	sl, r0, r4, asr #19
 8011768:	000493e0 	andeq	r9, r4, r0, ror #7
 801176c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8011770:	2000a8c0 	andcs	sl, r0, r0, asr #17

08011774 <Ssd1306::~Ssd1306()>:
 8011774:	4770      	bx	lr

08011776 <Ssd1306::SetCursor(unsigned int)>:
 8011776:	4770      	bx	lr

08011778 <Ssd1306::PrintInfo()>:
 8011778:	b410      	push	{r4}
 801177a:	4906      	ldr	r1, [pc, #24]	; (8011794 <Ssd1306::PrintInfo()+0x1c>)
 801177c:	7c44      	ldrb	r4, [r0, #17]
 801177e:	7903      	ldrb	r3, [r0, #4]
 8011780:	7942      	ldrb	r2, [r0, #5]
 8011782:	4805      	ldr	r0, [pc, #20]	; (8011798 <Ssd1306::PrintInfo()+0x20>)
 8011784:	2c00      	cmp	r4, #0
 8011786:	bf08      	it	eq
 8011788:	4601      	moveq	r1, r0
 801178a:	4804      	ldr	r0, [pc, #16]	; (801179c <Ssd1306::PrintInfo()+0x24>)
 801178c:	bc10      	pop	{r4}
 801178e:	f7f7 b9e1 	b.w	8008b54 <printf>
 8011792:	bf00      	nop
 8011794:	08015d59 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl, fp, ip, lr}
 8011798:	08015d60 	stmdaeq	r1, {r5, r6, r8, sl, fp, ip, lr}
 801179c:	08015d68 	stmdaeq	r1, {r3, r5, r6, r8, sl, fp, ip, lr}

080117a0 <Ssd1306::~Ssd1306()>:
 80117a0:	b510      	push	{r4, lr}
 80117a2:	4604      	mov	r4, r0
 80117a4:	f000 fb80 	bl	8011ea8 <operator delete(void*)>
 80117a8:	4620      	mov	r0, r4
 80117aa:	bd10      	pop	{r4, pc}

080117ac <HAL_I2C::Setup()>:
 80117ac:	b510      	push	{r4, lr}
 80117ae:	4604      	mov	r4, r0
 80117b0:	7800      	ldrb	r0, [r0, #0]
 80117b2:	f001 fb6f 	bl	8012e94 <gd32_i2c_set_address(unsigned char)>
 80117b6:	6860      	ldr	r0, [r4, #4]
 80117b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117bc:	f001 bb62 	b.w	8012e84 <gd32_i2c_set_baudrate(unsigned int)>

080117c0 <Ssd1306::PutChar(int)>:
 80117c0:	b510      	push	{r4, lr}
 80117c2:	f1a1 0420 	sub.w	r4, r1, #32
 80117c6:	2c5f      	cmp	r4, #95	; 0x5f
 80117c8:	bf88      	it	hi
 80117ca:	2400      	movhi	r4, #0
 80117cc:	3008      	adds	r0, #8
 80117ce:	f7ff ffed 	bl	80117ac <HAL_I2C::Setup()>
 80117d2:	4804      	ldr	r0, [pc, #16]	; (80117e4 <Ssd1306::PutChar(int)+0x24>)
 80117d4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80117d8:	4420      	add	r0, r4
 80117da:	2107      	movs	r1, #7
 80117dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117e0:	f001 bb5e 	b.w	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 80117e4:	08015d7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, fp, ip, lr}

080117e8 <Ssd1306::PutString(char const*)>:
 80117e8:	b538      	push	{r3, r4, r5, lr}
 80117ea:	4605      	mov	r5, r0
 80117ec:	1e4c      	subs	r4, r1, #1
 80117ee:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80117f2:	b119      	cbz	r1, 80117fc <Ssd1306::PutString(char const*)+0x14>
 80117f4:	4628      	mov	r0, r5
 80117f6:	f7ff ffe3 	bl	80117c0 <Ssd1306::PutChar(int)>
 80117fa:	e7f8      	b.n	80117ee <Ssd1306::PutString(char const*)+0x6>
 80117fc:	bd38      	pop	{r3, r4, r5, pc}

080117fe <Ssd1306::Text(char const*, unsigned int)>:
 80117fe:	b570      	push	{r4, r5, r6, lr}
 8011800:	7903      	ldrb	r3, [r0, #4]
 8011802:	4605      	mov	r5, r0
 8011804:	460c      	mov	r4, r1
 8011806:	4293      	cmp	r3, r2
 8011808:	bf94      	ite	ls
 801180a:	18ce      	addls	r6, r1, r3
 801180c:	188e      	addhi	r6, r1, r2
 801180e:	42b4      	cmp	r4, r6
 8011810:	d005      	beq.n	801181e <Ssd1306::Text(char const*, unsigned int)+0x20>
 8011812:	4628      	mov	r0, r5
 8011814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011818:	f7ff ffd2 	bl	80117c0 <Ssd1306::PutChar(int)>
 801181c:	e7f7      	b.n	801180e <Ssd1306::Text(char const*, unsigned int)+0x10>
 801181e:	bd70      	pop	{r4, r5, r6, pc}

08011820 <Ssd1306::InitMembers()>:
 8011820:	7c03      	ldrb	r3, [r0, #16]
 8011822:	b12b      	cbz	r3, 8011830 <Ssd1306::InitMembers()+0x10>
 8011824:	3b01      	subs	r3, #1
 8011826:	2b01      	cmp	r3, #1
 8011828:	d908      	bls.n	801183c <Ssd1306::InitMembers()+0x1c>
 801182a:	f640 0315 	movw	r3, #2069	; 0x815
 801182e:	e007      	b.n	8011840 <Ssd1306::InitMembers()+0x20>
 8011830:	f640 0315 	movw	r3, #2069	; 0x815
 8011834:	8083      	strh	r3, [r0, #4]
 8011836:	2308      	movs	r3, #8
 8011838:	6143      	str	r3, [r0, #20]
 801183a:	4770      	bx	lr
 801183c:	f240 4315 	movw	r3, #1045	; 0x415
 8011840:	8083      	strh	r3, [r0, #4]
 8011842:	2304      	movs	r3, #4
 8011844:	e7f8      	b.n	8011838 <Ssd1306::InitMembers()+0x18>
	...

08011848 <Ssd1306::Ssd1306(TOledPanel)>:
 8011848:	4a08      	ldr	r2, [pc, #32]	; (801186c <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 801184a:	b508      	push	{r3, lr}
 801184c:	6002      	str	r2, [r0, #0]
 801184e:	227f      	movs	r2, #127	; 0x7f
 8011850:	80c2      	strh	r2, [r0, #6]
 8011852:	223c      	movs	r2, #60	; 0x3c
 8011854:	7202      	strb	r2, [r0, #8]
 8011856:	4a06      	ldr	r2, [pc, #24]	; (8011870 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8011858:	7401      	strb	r1, [r0, #16]
 801185a:	60c2      	str	r2, [r0, #12]
 801185c:	2200      	movs	r2, #0
 801185e:	7442      	strb	r2, [r0, #17]
 8011860:	4a04      	ldr	r2, [pc, #16]	; (8011874 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8011862:	6010      	str	r0, [r2, #0]
 8011864:	f7ff ffdc 	bl	8011820 <Ssd1306::InitMembers()>
 8011868:	bd08      	pop	{r3, pc}
 801186a:	bf00      	nop
 801186c:	08016054 	stmdaeq	r1, {r2, r4, r6, sp, lr}
 8011870:	00061a80 	andeq	r1, r6, r0, lsl #21
 8011874:	2000a94c 	andcs	sl, r0, ip, asr #18

08011878 <Ssd1306::SendCommand(unsigned char)>:
 8011878:	2300      	movs	r3, #0
 801187a:	b507      	push	{r0, r1, r2, lr}
 801187c:	3008      	adds	r0, #8
 801187e:	f88d 3004 	strb.w	r3, [sp, #4]
 8011882:	f88d 1005 	strb.w	r1, [sp, #5]
 8011886:	f7ff ff91 	bl	80117ac <HAL_I2C::Setup()>
 801188a:	2102      	movs	r1, #2
 801188c:	a801      	add	r0, sp, #4
 801188e:	f001 fb07 	bl	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 8011892:	b003      	add	sp, #12
 8011894:	f85d fb04 	ldr.w	pc, [sp], #4

08011898 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8011898:	2914      	cmp	r1, #20
 801189a:	b570      	push	{r4, r5, r6, lr}
 801189c:	4605      	mov	r5, r0
 801189e:	4616      	mov	r6, r2
 80118a0:	d81c      	bhi.n	80118dc <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80118a2:	7943      	ldrb	r3, [r0, #5]
 80118a4:	4293      	cmp	r3, r2
 80118a6:	d919      	bls.n	80118dc <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80118a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80118ac:	7c43      	ldrb	r3, [r0, #17]
 80118ae:	004c      	lsls	r4, r1, #1
 80118b0:	b2e4      	uxtb	r4, r4
 80118b2:	b10b      	cbz	r3, 80118b8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 80118b4:	3404      	adds	r4, #4
 80118b6:	b2e4      	uxtb	r4, r4
 80118b8:	4628      	mov	r0, r5
 80118ba:	f004 010e 	and.w	r1, r4, #14
 80118be:	f7ff ffdb 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 80118c2:	0921      	lsrs	r1, r4, #4
 80118c4:	4628      	mov	r0, r5
 80118c6:	f041 0110 	orr.w	r1, r1, #16
 80118ca:	f7ff ffd5 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 80118ce:	4628      	mov	r0, r5
 80118d0:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 80118d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118d8:	f7ff bfce 	b.w	8011878 <Ssd1306::SendCommand(unsigned char)>
 80118dc:	bd70      	pop	{r4, r5, r6, pc}

080118de <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 80118de:	b570      	push	{r4, r5, r6, lr}
 80118e0:	4604      	mov	r4, r0
 80118e2:	4615      	mov	r5, r2
 80118e4:	461e      	mov	r6, r3
 80118e6:	b171      	cbz	r1, 8011906 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80118e8:	7943      	ldrb	r3, [r0, #5]
 80118ea:	428b      	cmp	r3, r1
 80118ec:	d30b      	bcc.n	8011906 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80118ee:	3901      	subs	r1, #1
 80118f0:	b2ca      	uxtb	r2, r1
 80118f2:	2100      	movs	r1, #0
 80118f4:	f7ff ffd0 	bl	8011898 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80118f8:	4632      	mov	r2, r6
 80118fa:	4629      	mov	r1, r5
 80118fc:	4620      	mov	r0, r4
 80118fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011902:	f7ff bf7c 	b.w	80117fe <Ssd1306::Text(char const*, unsigned int)>
 8011906:	bd70      	pop	{r4, r5, r6, pc}

08011908 <Ssd1306::ClearLine(unsigned char)>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	4605      	mov	r5, r0
 801190c:	b1b9      	cbz	r1, 801193e <Ssd1306::ClearLine(unsigned char)+0x36>
 801190e:	7943      	ldrb	r3, [r0, #5]
 8011910:	428b      	cmp	r3, r1
 8011912:	d314      	bcc.n	801193e <Ssd1306::ClearLine(unsigned char)+0x36>
 8011914:	3901      	subs	r1, #1
 8011916:	b2cc      	uxtb	r4, r1
 8011918:	4622      	mov	r2, r4
 801191a:	2100      	movs	r1, #0
 801191c:	f7ff ffbc 	bl	8011898 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8011920:	f105 0008 	add.w	r0, r5, #8
 8011924:	f7ff ff42 	bl	80117ac <HAL_I2C::Setup()>
 8011928:	2181      	movs	r1, #129	; 0x81
 801192a:	4805      	ldr	r0, [pc, #20]	; (8011940 <Ssd1306::ClearLine(unsigned char)+0x38>)
 801192c:	f001 fab8 	bl	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 8011930:	4622      	mov	r2, r4
 8011932:	4628      	mov	r0, r5
 8011934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011938:	2100      	movs	r1, #0
 801193a:	f7ff bfad 	b.w	8011898 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 801193e:	bd38      	pop	{r3, r4, r5, pc}
 8011940:	2000a8c4 	andcs	sl, r0, r4, asr #17

08011944 <Ssd1306::SetSleep(bool)>:
 8011944:	b111      	cbz	r1, 801194c <Ssd1306::SetSleep(bool)+0x8>
 8011946:	21ae      	movs	r1, #174	; 0xae
 8011948:	f7ff bf96 	b.w	8011878 <Ssd1306::SendCommand(unsigned char)>
 801194c:	21af      	movs	r1, #175	; 0xaf
 801194e:	e7fb      	b.n	8011948 <Ssd1306::SetSleep(bool)+0x4>

08011950 <Ssd1306::SetContrast(unsigned char)>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4604      	mov	r4, r0
 8011954:	460d      	mov	r5, r1
 8011956:	7181      	strb	r1, [r0, #6]
 8011958:	2181      	movs	r1, #129	; 0x81
 801195a:	f7ff ff8d 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 801195e:	4629      	mov	r1, r5
 8011960:	4620      	mov	r0, r4
 8011962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011966:	f7ff bf87 	b.w	8011878 <Ssd1306::SendCommand(unsigned char)>

0801196a <Ssd1306::SetFlipVertically(bool)>:
 801196a:	b510      	push	{r4, lr}
 801196c:	4604      	mov	r4, r0
 801196e:	71c1      	strb	r1, [r0, #7]
 8011970:	b141      	cbz	r1, 8011984 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8011972:	21c0      	movs	r1, #192	; 0xc0
 8011974:	f7ff ff80 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 8011978:	21a0      	movs	r1, #160	; 0xa0
 801197a:	4620      	mov	r0, r4
 801197c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011980:	f7ff bf7a 	b.w	8011878 <Ssd1306::SendCommand(unsigned char)>
 8011984:	21c8      	movs	r1, #200	; 0xc8
 8011986:	f7ff ff77 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 801198a:	21a1      	movs	r1, #161	; 0xa1
 801198c:	e7f5      	b.n	801197a <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08011990 <Ssd1306::CheckSH1106()>:
 8011990:	b570      	push	{r4, r5, r6, lr}
 8011992:	4604      	mov	r4, r0
 8011994:	b086      	sub	sp, #24
 8011996:	2100      	movs	r1, #0
 8011998:	f7ff ff6e 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 801199c:	2190      	movs	r1, #144	; 0x90
 801199e:	4620      	mov	r0, r4
 80119a0:	f7ff ff6a 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 80119a4:	21b0      	movs	r1, #176	; 0xb0
 80119a6:	4620      	mov	r0, r4
 80119a8:	f7ff ff66 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 80119ac:	4b22      	ldr	r3, [pc, #136]	; (8011a38 <Ssd1306::CheckSH1106()+0xa8>)
 80119ae:	f104 0608 	add.w	r6, r4, #8
 80119b2:	6818      	ldr	r0, [r3, #0]
 80119b4:	791b      	ldrb	r3, [r3, #4]
 80119b6:	ad02      	add	r5, sp, #8
 80119b8:	9002      	str	r0, [sp, #8]
 80119ba:	4630      	mov	r0, r6
 80119bc:	712b      	strb	r3, [r5, #4]
 80119be:	f7ff fef5 	bl	80117ac <HAL_I2C::Setup()>
 80119c2:	2105      	movs	r1, #5
 80119c4:	4628      	mov	r0, r5
 80119c6:	f001 fa6b 	bl	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 80119ca:	2100      	movs	r1, #0
 80119cc:	4620      	mov	r0, r4
 80119ce:	f7ff ff53 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 80119d2:	2190      	movs	r1, #144	; 0x90
 80119d4:	4620      	mov	r0, r4
 80119d6:	f7ff ff4f 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 80119da:	21b0      	movs	r1, #176	; 0xb0
 80119dc:	4620      	mov	r0, r4
 80119de:	f7ff ff4b 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 80119e2:	2300      	movs	r3, #0
 80119e4:	9304      	str	r3, [sp, #16]
 80119e6:	f88d 3014 	strb.w	r3, [sp, #20]
 80119ea:	2340      	movs	r3, #64	; 0x40
 80119ec:	4630      	mov	r0, r6
 80119ee:	f88d 3007 	strb.w	r3, [sp, #7]
 80119f2:	f7ff fedb 	bl	80117ac <HAL_I2C::Setup()>
 80119f6:	2101      	movs	r1, #1
 80119f8:	f10d 0007 	add.w	r0, sp, #7
 80119fc:	f001 fa50 	bl	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 8011a00:	4630      	mov	r0, r6
 8011a02:	f7ff fed3 	bl	80117ac <HAL_I2C::Setup()>
 8011a06:	2105      	movs	r1, #5
 8011a08:	a804      	add	r0, sp, #16
 8011a0a:	f001 faaf 	bl	8012f6c <gd32_i2c_read(char*, unsigned int)>
 8011a0e:	2201      	movs	r2, #1
 8011a10:	5cab      	ldrb	r3, [r5, r2]
 8011a12:	a904      	add	r1, sp, #16
 8011a14:	3201      	adds	r2, #1
 8011a16:	4411      	add	r1, r2
 8011a18:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8011a1c:	428b      	cmp	r3, r1
 8011a1e:	d006      	beq.n	8011a2e <Ssd1306::CheckSH1106()+0x9e>
 8011a20:	1a5b      	subs	r3, r3, r1
 8011a22:	fab3 f383 	clz	r3, r3
 8011a26:	095b      	lsrs	r3, r3, #5
 8011a28:	7463      	strb	r3, [r4, #17]
 8011a2a:	b006      	add	sp, #24
 8011a2c:	bd70      	pop	{r4, r5, r6, pc}
 8011a2e:	2a05      	cmp	r2, #5
 8011a30:	d1ee      	bne.n	8011a10 <Ssd1306::CheckSH1106()+0x80>
 8011a32:	2300      	movs	r3, #0
 8011a34:	e7f5      	b.n	8011a22 <Ssd1306::CheckSH1106()+0x92>
 8011a36:	bf00      	nop
 8011a38:	08015d74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, ip, lr}

08011a3c <Ssd1306::Cls()>:
 8011a3c:	7c43      	ldrb	r3, [r0, #17]
 8011a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	bf0c      	ite	eq
 8011a46:	2500      	moveq	r5, #0
 8011a48:	2504      	movne	r5, #4
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	2600      	movs	r6, #0
 8011a4e:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8011a52:	f045 0810 	orr.w	r8, r5, #16
 8011a56:	b2ff      	uxtb	r7, r7
 8011a58:	6963      	ldr	r3, [r4, #20]
 8011a5a:	4629      	mov	r1, r5
 8011a5c:	42b3      	cmp	r3, r6
 8011a5e:	4620      	mov	r0, r4
 8011a60:	d91b      	bls.n	8011a9a <Ssd1306::Cls()+0x5e>
 8011a62:	f7ff ff09 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 8011a66:	4641      	mov	r1, r8
 8011a68:	4620      	mov	r0, r4
 8011a6a:	f7ff ff05 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 8011a6e:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8011a72:	4620      	mov	r0, r4
 8011a74:	b2c9      	uxtb	r1, r1
 8011a76:	f7ff feff 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 8011a7a:	7c23      	ldrb	r3, [r4, #16]
 8011a7c:	b123      	cbz	r3, 8011a88 <Ssd1306::Cls()+0x4c>
 8011a7e:	3b01      	subs	r3, #1
 8011a80:	2b01      	cmp	r3, #1
 8011a82:	d901      	bls.n	8011a88 <Ssd1306::Cls()+0x4c>
 8011a84:	3601      	adds	r6, #1
 8011a86:	e7e7      	b.n	8011a58 <Ssd1306::Cls()+0x1c>
 8011a88:	f104 0008 	add.w	r0, r4, #8
 8011a8c:	f7ff fe8e 	bl	80117ac <HAL_I2C::Setup()>
 8011a90:	4639      	mov	r1, r7
 8011a92:	4808      	ldr	r0, [pc, #32]	; (8011ab4 <Ssd1306::Cls()+0x78>)
 8011a94:	f001 fa04 	bl	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 8011a98:	e7f4      	b.n	8011a84 <Ssd1306::Cls()+0x48>
 8011a9a:	f7ff feed 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 8011a9e:	4641      	mov	r1, r8
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f7ff fee9 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aac:	21b0      	movs	r1, #176	; 0xb0
 8011aae:	f7ff bee3 	b.w	8011878 <Ssd1306::SendCommand(unsigned char)>
 8011ab2:	bf00      	nop
 8011ab4:	2000a8c4 	andcs	sl, r0, r4, asr #17

08011ab8 <Ssd1306::Start()>:
 8011ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011aba:	7a04      	ldrb	r4, [r0, #8]
 8011abc:	68c6      	ldr	r6, [r0, #12]
 8011abe:	4605      	mov	r5, r0
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	f001 f9e7 	bl	8012e94 <gd32_i2c_set_address(unsigned char)>
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	f001 f9dc 	bl	8012e84 <gd32_i2c_set_baudrate(unsigned int)>
 8011acc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011ad0:	2b07      	cmp	r3, #7
 8011ad2:	d902      	bls.n	8011ada <Ssd1306::Start()+0x22>
 8011ad4:	3c50      	subs	r4, #80	; 0x50
 8011ad6:	2c0f      	cmp	r4, #15
 8011ad8:	d80f      	bhi.n	8011afa <Ssd1306::Start()+0x42>
 8011ada:	2101      	movs	r1, #1
 8011adc:	f10d 0007 	add.w	r0, sp, #7
 8011ae0:	f001 fa44 	bl	8012f6c <gd32_i2c_read(char*, unsigned int)>
 8011ae4:	fab0 f480 	clz	r4, r0
 8011ae8:	0964      	lsrs	r4, r4, #5
 8011aea:	b35c      	cbz	r4, 8011b44 <Ssd1306::Start()+0x8c>
 8011aec:	7c2e      	ldrb	r6, [r5, #16]
 8011aee:	b14e      	cbz	r6, 8011b04 <Ssd1306::Start()+0x4c>
 8011af0:	3e01      	subs	r6, #1
 8011af2:	2e01      	cmp	r6, #1
 8011af4:	d929      	bls.n	8011b4a <Ssd1306::Start()+0x92>
 8011af6:	2400      	movs	r4, #0
 8011af8:	e024      	b.n	8011b44 <Ssd1306::Start()+0x8c>
 8011afa:	2100      	movs	r1, #0
 8011afc:	4608      	mov	r0, r1
 8011afe:	f001 f9cf 	bl	8012ea0 <gd32_i2c_write(char const*, unsigned int)>
 8011b02:	e7ef      	b.n	8011ae4 <Ssd1306::Start()+0x2c>
 8011b04:	4f16      	ldr	r7, [pc, #88]	; (8011b60 <Ssd1306::Start()+0xa8>)
 8011b06:	4628      	mov	r0, r5
 8011b08:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011b0c:	3601      	adds	r6, #1
 8011b0e:	f7ff feb3 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 8011b12:	2e18      	cmp	r6, #24
 8011b14:	d1f7      	bne.n	8011b06 <Ssd1306::Start()+0x4e>
 8011b16:	2300      	movs	r3, #0
 8011b18:	4a12      	ldr	r2, [pc, #72]	; (8011b64 <Ssd1306::Start()+0xac>)
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	4611      	mov	r1, r2
 8011b1e:	3301      	adds	r3, #1
 8011b20:	2b86      	cmp	r3, #134	; 0x86
 8011b22:	f802 0b01 	strb.w	r0, [r2], #1
 8011b26:	d1fa      	bne.n	8011b1e <Ssd1306::Start()+0x66>
 8011b28:	2340      	movs	r3, #64	; 0x40
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	700b      	strb	r3, [r1, #0]
 8011b2e:	f7ff ff2f 	bl	8011990 <Ssd1306::CheckSH1106()>
 8011b32:	4628      	mov	r0, r5
 8011b34:	f7ff ff82 	bl	8011a3c <Ssd1306::Cls()>
 8011b38:	21af      	movs	r1, #175	; 0xaf
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	f7ff fe9c 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 8011b40:	2301      	movs	r3, #1
 8011b42:	71eb      	strb	r3, [r5, #7]
 8011b44:	4620      	mov	r0, r4
 8011b46:	b003      	add	sp, #12
 8011b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b4a:	2600      	movs	r6, #0
 8011b4c:	4f06      	ldr	r7, [pc, #24]	; (8011b68 <Ssd1306::Start()+0xb0>)
 8011b4e:	4628      	mov	r0, r5
 8011b50:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011b54:	3601      	adds	r6, #1
 8011b56:	f7ff fe8f 	bl	8011878 <Ssd1306::SendCommand(unsigned char)>
 8011b5a:	2e18      	cmp	r6, #24
 8011b5c:	d1f7      	bne.n	8011b4e <Ssd1306::Start()+0x96>
 8011b5e:	e7da      	b.n	8011b16 <Ssd1306::Start()+0x5e>
 8011b60:	08016034 	stmdaeq	r1, {r2, r4, r5, sp, lr}
 8011b64:	2000a8c4 	andcs	sl, r0, r4, asr #17
 8011b68:	0801601c 	stmdaeq	r1, {r2, r3, r4, sp, lr}

08011b6c <console_init>:
 8011b6c:	b508      	push	{r3, lr}
 8011b6e:	f000 fb8d 	bl	801228c <uart0_init>
 8011b72:	4804      	ldr	r0, [pc, #16]	; (8011b84 <console_init+0x18>)
 8011b74:	f000 fbba 	bl	80122ec <uart0_puts>
 8011b78:	4803      	ldr	r0, [pc, #12]	; (8011b88 <console_init+0x1c>)
 8011b7a:	f000 fbb7 	bl	80122ec <uart0_puts>
 8011b7e:	2000      	movs	r0, #0
 8011b80:	bd08      	pop	{r3, pc}
 8011b82:	bf00      	nop
 8011b84:	0801412a 	stmdaeq	r1, {r1, r3, r5, r8, lr}
 8011b88:	0801608c 	stmdaeq	r1, {r2, r3, r7, sp, lr}

08011b8c <console_putc>:
 8011b8c:	280a      	cmp	r0, #10
 8011b8e:	b510      	push	{r4, lr}
 8011b90:	4604      	mov	r4, r0
 8011b92:	d102      	bne.n	8011b9a <console_putc+0xe>
 8011b94:	200d      	movs	r0, #13
 8011b96:	f000 fb89 	bl	80122ac <uart0_putc>
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ba0:	f000 bb84 	b.w	80122ac <uart0_putc>

08011ba4 <console_puts>:
 8011ba4:	f000 bba2 	b.w	80122ec <uart0_puts>

08011ba8 <console_set_fg_color>:
 8011ba8:	2807      	cmp	r0, #7
 8011baa:	d810      	bhi.n	8011bce <console_set_fg_color+0x26>
 8011bac:	e8df f000 	tbb	[pc, r0]
 8011bb0:	0b090704 	bleq	82537c8 <__exidx_end+0x23d640>
 8011bb4:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8011b80 <console_init+0x14>
 8011bb8:	4806      	ldr	r0, [pc, #24]	; (8011bd4 <console_set_fg_color+0x2c>)
 8011bba:	f000 bb97 	b.w	80122ec <uart0_puts>
 8011bbe:	4806      	ldr	r0, [pc, #24]	; (8011bd8 <console_set_fg_color+0x30>)
 8011bc0:	e7fb      	b.n	8011bba <console_set_fg_color+0x12>
 8011bc2:	4806      	ldr	r0, [pc, #24]	; (8011bdc <console_set_fg_color+0x34>)
 8011bc4:	e7f9      	b.n	8011bba <console_set_fg_color+0x12>
 8011bc6:	4806      	ldr	r0, [pc, #24]	; (8011be0 <console_set_fg_color+0x38>)
 8011bc8:	e7f7      	b.n	8011bba <console_set_fg_color+0x12>
 8011bca:	4806      	ldr	r0, [pc, #24]	; (8011be4 <console_set_fg_color+0x3c>)
 8011bcc:	e7f5      	b.n	8011bba <console_set_fg_color+0x12>
 8011bce:	4806      	ldr	r0, [pc, #24]	; (8011be8 <console_set_fg_color+0x40>)
 8011bd0:	e7f3      	b.n	8011bba <console_set_fg_color+0x12>
 8011bd2:	bf00      	nop
 8011bd4:	08016092 	stmdaeq	r1, {r1, r4, r7, sp, lr}
 8011bd8:	08016098 	stmdaeq	r1, {r3, r4, r7, sp, lr}
 8011bdc:	0801609e 	stmdaeq	r1, {r1, r2, r3, r4, r7, sp, lr}
 8011be0:	080160a4 	stmdaeq	r1, {r2, r5, r7, sp, lr}
 8011be4:	0801412a 	stmdaeq	r1, {r1, r3, r5, r8, lr}
 8011be8:	080160aa 	stmdaeq	r1, {r1, r3, r5, r7, sp, lr}

08011bec <console_error>:
 8011bec:	b510      	push	{r4, lr}
 8011bee:	4604      	mov	r4, r0
 8011bf0:	4805      	ldr	r0, [pc, #20]	; (8011c08 <console_error+0x1c>)
 8011bf2:	f000 fb7b 	bl	80122ec <uart0_puts>
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f000 fb78 	bl	80122ec <uart0_puts>
 8011bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c00:	4802      	ldr	r0, [pc, #8]	; (8011c0c <console_error+0x20>)
 8011c02:	f000 bb73 	b.w	80122ec <uart0_puts>
 8011c06:	bf00      	nop
 8011c08:	08016098 	stmdaeq	r1, {r3, r4, r7, sp, lr}
 8011c0c:	0801412a 	stmdaeq	r1, {r1, r3, r5, r8, lr}

08011c10 <console_status>:
 8011c10:	b510      	push	{r4, lr}
 8011c12:	460c      	mov	r4, r1
 8011c14:	b280      	uxth	r0, r0
 8011c16:	f7ff ffc7 	bl	8011ba8 <console_set_fg_color>
 8011c1a:	4807      	ldr	r0, [pc, #28]	; (8011c38 <console_status+0x28>)
 8011c1c:	f000 fb66 	bl	80122ec <uart0_puts>
 8011c20:	4620      	mov	r0, r4
 8011c22:	f000 fb63 	bl	80122ec <uart0_puts>
 8011c26:	200a      	movs	r0, #10
 8011c28:	f7ff ffb0 	bl	8011b8c <console_putc>
 8011c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c30:	4802      	ldr	r0, [pc, #8]	; (8011c3c <console_status+0x2c>)
 8011c32:	f000 bb5b 	b.w	80122ec <uart0_puts>
 8011c36:	bf00      	nop
 8011c38:	0801608c 	stmdaeq	r1, {r2, r3, r7, sp, lr}
 8011c3c:	0801412a 	stmdaeq	r1, {r1, r3, r5, r8, lr}

08011c40 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8011c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c44:	4617      	mov	r7, r2
 8011c46:	461e      	mov	r6, r3
 8011c48:	4d14      	ldr	r5, [pc, #80]	; (8011c9c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8011c4a:	4b15      	ldr	r3, [pc, #84]	; (8011ca0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8011c4c:	b086      	sub	sp, #24
 8011c4e:	6018      	str	r0, [r3, #0]
 8011c50:	4604      	mov	r4, r0
 8011c52:	f105 0803 	add.w	r8, r5, #3
 8011c56:	2203      	movs	r2, #3
 8011c58:	4628      	mov	r0, r5
 8011c5a:	f000 f9e8 	bl	801202e <memmove>
 8011c5e:	4639      	mov	r1, r7
 8011c60:	220b      	movs	r2, #11
 8011c62:	4640      	mov	r0, r8
 8011c64:	f000 f9e3 	bl	801202e <memmove>
 8011c68:	f105 030e 	add.w	r3, r5, #14
 8011c6c:	4631      	mov	r1, r6
 8011c6e:	2208      	movs	r2, #8
 8011c70:	4618      	mov	r0, r3
 8011c72:	f000 f9dc 	bl	801202e <memmove>
 8011c76:	2308      	movs	r3, #8
 8011c78:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8011c7c:	230b      	movs	r3, #11
 8011c7e:	9302      	str	r3, [sp, #8]
 8011c80:	4b08      	ldr	r3, [pc, #32]	; (8011ca4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8011c82:	9005      	str	r0, [sp, #20]
 8011c84:	e9cd 5300 	strd	r5, r3, [sp]
 8011c88:	213f      	movs	r1, #63	; 0x3f
 8011c8a:	2303      	movs	r3, #3
 8011c8c:	4a06      	ldr	r2, [pc, #24]	; (8011ca8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8011c8e:	4807      	ldr	r0, [pc, #28]	; (8011cac <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8011c90:	f7f6 ff88 	bl	8008ba4 <snprintf>
 8011c94:	4620      	mov	r0, r4
 8011c96:	b006      	add	sp, #24
 8011c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c9c:	2000a950 	andcs	sl, r0, r0, asr r9
 8011ca0:	2000a9a8 	andcs	sl, r0, r8, lsr #19
 8011ca4:	080141d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, lr}
 8011ca8:	080160b0 	stmdaeq	r1, {r4, r5, r7, sp, lr}
 8011cac:	2000a966 	andcs	sl, r0, r6, ror #18

08011cb0 <FirmwareVersion::Print(char const*)>:
 8011cb0:	b510      	push	{r4, lr}
 8011cb2:	460c      	mov	r4, r1
 8011cb4:	4804      	ldr	r0, [pc, #16]	; (8011cc8 <FirmwareVersion::Print(char const*)+0x18>)
 8011cb6:	f000 f9f6 	bl	80120a6 <puts>
 8011cba:	b124      	cbz	r4, 8011cc6 <FirmwareVersion::Print(char const*)+0x16>
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cc2:	f000 b9f0 	b.w	80120a6 <puts>
 8011cc6:	bd10      	pop	{r4, pc}
 8011cc8:	2000a966 	andcs	sl, r0, r6, ror #18

08011ccc <LedBlink::LedBlink()>:
 8011ccc:	2200      	movs	r2, #0
 8011cce:	2105      	movs	r1, #5
 8011cd0:	e9c0 2100 	strd	r2, r1, [r0]
 8011cd4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011cd8:	6082      	str	r2, [r0, #8]
 8011cda:	e9c0 1203 	strd	r1, r2, [r0, #12]
 8011cde:	6142      	str	r2, [r0, #20]
 8011ce0:	4a01      	ldr	r2, [pc, #4]	; (8011ce8 <LedBlink::LedBlink()+0x1c>)
 8011ce2:	6010      	str	r0, [r2, #0]
 8011ce4:	4770      	bx	lr
 8011ce6:	bf00      	nop
 8011ce8:	2000a9ac 	andcs	sl, r0, ip, lsr #19

08011cec <LedBlink::SetMode(ledblink::Mode)>:
 8011cec:	6843      	ldr	r3, [r0, #4]
 8011cee:	428b      	cmp	r3, r1
 8011cf0:	d02f      	beq.n	8011d52 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8011cf2:	6041      	str	r1, [r0, #4]
 8011cf4:	2904      	cmp	r1, #4
 8011cf6:	d822      	bhi.n	8011d3e <LedBlink::SetMode(ledblink::Mode)+0x52>
 8011cf8:	e8df f001 	tbb	[pc, r1]
 8011cfc:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8011d00:	23ff001d 	mvnscs	r0, #29
 8011d04:	6003      	str	r3, [r0, #0]
 8011d06:	2300      	movs	r3, #0
 8011d08:	2201      	movs	r2, #1
 8011d0a:	60c3      	str	r3, [r0, #12]
 8011d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011d10:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8011d14:	611a      	str	r2, [r3, #16]
 8011d16:	6880      	ldr	r0, [r0, #8]
 8011d18:	b1d8      	cbz	r0, 8011d52 <LedBlink::SetMode(ledblink::Mode)+0x66>
 8011d1a:	6803      	ldr	r3, [r0, #0]
 8011d1c:	689b      	ldr	r3, [r3, #8]
 8011d1e:	4718      	bx	r3
 8011d20:	2301      	movs	r3, #1
 8011d22:	6003      	str	r3, [r0, #0]
 8011d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011d28:	60c3      	str	r3, [r0, #12]
 8011d2a:	e7f4      	b.n	8011d16 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8011d2c:	2303      	movs	r3, #3
 8011d2e:	6003      	str	r3, [r0, #0]
 8011d30:	f240 134d 	movw	r3, #333	; 0x14d
 8011d34:	e7f8      	b.n	8011d28 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8011d36:	2305      	movs	r3, #5
 8011d38:	6003      	str	r3, [r0, #0]
 8011d3a:	23c8      	movs	r3, #200	; 0xc8
 8011d3c:	e7f4      	b.n	8011d28 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8011d3e:	2300      	movs	r3, #0
 8011d40:	2201      	movs	r2, #1
 8011d42:	6003      	str	r3, [r0, #0]
 8011d44:	60c3      	str	r3, [r0, #12]
 8011d46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011d4a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8011d4e:	615a      	str	r2, [r3, #20]
 8011d50:	e7e1      	b.n	8011d16 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8011d52:	4770      	bx	lr

08011d54 <Hardware::Hardware()>:
 8011d54:	b570      	push	{r4, r5, r6, lr}
 8011d56:	2400      	movs	r4, #0
 8011d58:	4b24      	ldr	r3, [pc, #144]	; (8011dec <Hardware::Hardware()+0x98>)
 8011d5a:	4e25      	ldr	r6, [pc, #148]	; (8011df0 <Hardware::Hardware()+0x9c>)
 8011d5c:	b090      	sub	sp, #64	; 0x40
 8011d5e:	4605      	mov	r5, r0
 8011d60:	6004      	str	r4, [r0, #0]
 8011d62:	7104      	strb	r4, [r0, #4]
 8011d64:	6018      	str	r0, [r3, #0]
 8011d66:	f240 6004 	movw	r0, #1540	; 0x604
 8011d6a:	f000 fc8b 	bl	8012684 <rcu_periph_clock_enable>
 8011d6e:	2203      	movs	r2, #3
 8011d70:	2110      	movs	r1, #16
 8011d72:	4630      	mov	r0, r6
 8011d74:	2301      	movs	r3, #1
 8011d76:	f000 fbf5 	bl	8012564 <gpio_init>
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	6173      	str	r3, [r6, #20]
 8011d7e:	f7ff fef5 	bl	8011b6c <console_init>
 8011d82:	f5a6 3680 	sub.w	r6, r6, #65536	; 0x10000
 8011d86:	f000 fac1 	bl	801230c <systick_config>
 8011d8a:	f001 fb11 	bl	80133b0 <udelay_init()>
 8011d8e:	f001 fb0d 	bl	80133ac <micros_init()>
 8011d92:	f240 7004 	movw	r0, #1796	; 0x704
 8011d96:	f000 fc75 	bl	8012684 <rcu_periph_clock_enable>
 8011d9a:	4630      	mov	r0, r6
 8011d9c:	f000 fdbe 	bl	801291c <timer_deinit>
 8011da0:	236b      	movs	r3, #107	; 0x6b
 8011da2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011daa:	a903      	add	r1, sp, #12
 8011dac:	4630      	mov	r0, r6
 8011dae:	9305      	str	r3, [sp, #20]
 8011db0:	f000 fe16 	bl	80129e0 <timer_init>
 8011db4:	4630      	mov	r0, r6
 8011db6:	f000 fe6b 	bl	8012a90 <timer_enable>
 8011dba:	f000 ffd5 	bl	8012d68 <gd32_adc_init()>
 8011dbe:	230e      	movs	r3, #14
 8011dc0:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8011dc4:	237a      	movs	r3, #122	; 0x7a
 8011dc6:	a807      	add	r0, sp, #28
 8011dc8:	930c      	str	r3, [sp, #48]	; 0x30
 8011dca:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8011dce:	9407      	str	r4, [sp, #28]
 8011dd0:	940f      	str	r4, [sp, #60]	; 0x3c
 8011dd2:	f000 f9c1 	bl	8012158 <mktime>
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	e9cd 0401 	strd	r0, r4, [sp, #4]
 8011ddc:	a801      	add	r0, sp, #4
 8011dde:	f000 fa31 	bl	8012244 <settimeofday>
 8011de2:	f001 f81b 	bl	8012e1c <gd32_i2c_begin()>
 8011de6:	4628      	mov	r0, r5
 8011de8:	b010      	add	sp, #64	; 0x40
 8011dea:	bd70      	pop	{r4, r5, r6, pc}
 8011dec:	2000a9b0 			; <UNDEFINED> instruction: 0x2000a9b0
 8011df0:	40011000 	andmi	r1, r1, r0

08011df4 <Hardware::GetUuid(unsigned char*)>:
 8011df4:	4a0c      	ldr	r2, [pc, #48]	; (8011e28 <Hardware::GetUuid(unsigned char*)+0x34>)
 8011df6:	b084      	sub	sp, #16
 8011df8:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8011dfc:	9300      	str	r3, [sp, #0]
 8011dfe:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 8011e02:	9001      	str	r0, [sp, #4]
 8011e04:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 8011e08:	4403      	add	r3, r0
 8011e0a:	4413      	add	r3, r2
 8011e0c:	9202      	str	r2, [sp, #8]
 8011e0e:	466a      	mov	r2, sp
 8011e10:	9303      	str	r3, [sp, #12]
 8011e12:	1e4b      	subs	r3, r1, #1
 8011e14:	310f      	adds	r1, #15
 8011e16:	428b      	cmp	r3, r1
 8011e18:	d004      	beq.n	8011e24 <Hardware::GetUuid(unsigned char*)+0x30>
 8011e1a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8011e1e:	f803 0f01 	strb.w	r0, [r3, #1]!
 8011e22:	e7f8      	b.n	8011e16 <Hardware::GetUuid(unsigned char*)+0x22>
 8011e24:	b004      	add	sp, #16
 8011e26:	4770      	bx	lr
 8011e28:	1ffff000 	svcne	0x00fff000

08011e2c <Hardware::Reboot()>:
 8011e2c:	b508      	push	{r3, lr}
 8011e2e:	6803      	ldr	r3, [r0, #0]
 8011e30:	4604      	mov	r4, r0
 8011e32:	b153      	cbz	r3, 8011e4a <Hardware::Reboot()+0x1e>
 8011e34:	2300      	movs	r3, #0
 8011e36:	2104      	movs	r1, #4
 8011e38:	7103      	strb	r3, [r0, #4]
 8011e3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011e3e:	f000 fb67 	bl	8012510 <fwdgt_config>
 8011e42:	6820      	ldr	r0, [r4, #0]
 8011e44:	6803      	ldr	r3, [r0, #0]
 8011e46:	689b      	ldr	r3, [r3, #8]
 8011e48:	4798      	blx	r3
 8011e4a:	2102      	movs	r1, #2
 8011e4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011e50:	f000 fb5e 	bl	8012510 <fwdgt_config>
 8011e54:	2801      	cmp	r0, #1
 8011e56:	bf0c      	ite	eq
 8011e58:	2301      	moveq	r3, #1
 8011e5a:	2300      	movne	r3, #0
 8011e5c:	7123      	strb	r3, [r4, #4]
 8011e5e:	d101      	bne.n	8011e64 <Hardware::Reboot()+0x38>
 8011e60:	f000 fb46 	bl	80124f0 <fwdgt_enable>
 8011e64:	2208      	movs	r2, #8
 8011e66:	4b0d      	ldr	r3, [pc, #52]	; (8011e9c <Hardware::Reboot()+0x70>)
 8011e68:	2501      	movs	r5, #1
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	480c      	ldr	r0, [pc, #48]	; (8011ea0 <Hardware::Reboot()+0x74>)
 8011e6e:	601a      	str	r2, [r3, #0]
 8011e70:	227d      	movs	r2, #125	; 0x7d
 8011e72:	490c      	ldr	r1, [pc, #48]	; (8011ea4 <Hardware::Reboot()+0x78>)
 8011e74:	60da      	str	r2, [r3, #12]
 8011e76:	68dc      	ldr	r4, [r3, #12]
 8011e78:	b904      	cbnz	r4, 8011e7c <Hardware::Reboot()+0x50>
 8011e7a:	e7fe      	b.n	8011e7a <Hardware::Reboot()+0x4e>
 8011e7c:	6802      	ldr	r2, [r0, #0]
 8011e7e:	695e      	ldr	r6, [r3, #20]
 8011e80:	1b92      	subs	r2, r2, r6
 8011e82:	4294      	cmp	r4, r2
 8011e84:	d8f8      	bhi.n	8011e78 <Hardware::Reboot()+0x4c>
 8011e86:	6802      	ldr	r2, [r0, #0]
 8011e88:	615a      	str	r2, [r3, #20]
 8011e8a:	691a      	ldr	r2, [r3, #16]
 8011e8c:	2a01      	cmp	r2, #1
 8011e8e:	f082 0401 	eor.w	r4, r2, #1
 8011e92:	611c      	str	r4, [r3, #16]
 8011e94:	bf14      	ite	ne
 8011e96:	610d      	strne	r5, [r1, #16]
 8011e98:	614a      	streq	r2, [r1, #20]
 8011e9a:	e7ec      	b.n	8011e76 <Hardware::Reboot()+0x4a>
 8011e9c:	2000a9ac 	andcs	sl, r0, ip, lsr #19
 8011ea0:	2000a9c4 	andcs	sl, r0, r4, asr #19
 8011ea4:	40011000 	andmi	r1, r1, r0

08011ea8 <operator delete(void*)>:
 8011ea8:	f000 b890 	b.w	8011fcc <free>

08011eac <operator delete[](void*)>:
 8011eac:	f000 b88e 	b.w	8011fcc <free>

08011eb0 <operator new(unsigned int)>:
 8011eb0:	f000 b842 	b.w	8011f38 <malloc>

08011eb4 <operator new[](unsigned int)>:
 8011eb4:	f000 b840 	b.w	8011f38 <malloc>

08011eb8 <inet_aton>:
 8011eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011eba:	f04f 0c0a 	mov.w	ip, #10
 8011ebe:	2500      	movs	r5, #0
 8011ec0:	ae01      	add	r6, sp, #4
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	1d07      	adds	r7, r0, #4
 8011ec8:	e007      	b.n	8011eda <inet_aton+0x22>
 8011eca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011ece:	2b09      	cmp	r3, #9
 8011ed0:	d820      	bhi.n	8011f14 <inet_aton+0x5c>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	fb0c 4202 	mla	r2, ip, r2, r4
 8011ed8:	3a30      	subs	r2, #48	; 0x30
 8011eda:	4618      	mov	r0, r3
 8011edc:	f810 4b01 	ldrb.w	r4, [r0], #1
 8011ee0:	2c2e      	cmp	r4, #46	; 0x2e
 8011ee2:	d111      	bne.n	8011f08 <inet_aton+0x50>
 8011ee4:	3501      	adds	r5, #1
 8011ee6:	2d03      	cmp	r5, #3
 8011ee8:	f806 2b01 	strb.w	r2, [r6], #1
 8011eec:	d1e9      	bne.n	8011ec2 <inet_aton+0xa>
 8011eee:	2200      	movs	r2, #0
 8011ef0:	250a      	movs	r5, #10
 8011ef2:	1d1c      	adds	r4, r3, #4
 8011ef4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8011ef8:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8011efc:	d10d      	bne.n	8011f1a <inet_aton+0x62>
 8011efe:	f88d 2007 	strb.w	r2, [sp, #7]
 8011f02:	b9b1      	cbnz	r1, 8011f32 <inet_aton+0x7a>
 8011f04:	2001      	movs	r0, #1
 8011f06:	e006      	b.n	8011f16 <inet_aton+0x5e>
 8011f08:	2c00      	cmp	r4, #0
 8011f0a:	d0eb      	beq.n	8011ee4 <inet_aton+0x2c>
 8011f0c:	2c0a      	cmp	r4, #10
 8011f0e:	d0e9      	beq.n	8011ee4 <inet_aton+0x2c>
 8011f10:	42b8      	cmp	r0, r7
 8011f12:	d1da      	bne.n	8011eca <inet_aton+0x12>
 8011f14:	2000      	movs	r0, #0
 8011f16:	b003      	add	sp, #12
 8011f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f1a:	280a      	cmp	r0, #10
 8011f1c:	d0ef      	beq.n	8011efe <inet_aton+0x46>
 8011f1e:	42a3      	cmp	r3, r4
 8011f20:	d0f8      	beq.n	8011f14 <inet_aton+0x5c>
 8011f22:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 8011f26:	2e09      	cmp	r6, #9
 8011f28:	d8f4      	bhi.n	8011f14 <inet_aton+0x5c>
 8011f2a:	fb05 0202 	mla	r2, r5, r2, r0
 8011f2e:	3a30      	subs	r2, #48	; 0x30
 8011f30:	e7e0      	b.n	8011ef4 <inet_aton+0x3c>
 8011f32:	9b01      	ldr	r3, [sp, #4]
 8011f34:	600b      	str	r3, [r1, #0]
 8011f36:	e7e5      	b.n	8011f04 <inet_aton+0x4c>

08011f38 <malloc>:
 8011f38:	b538      	push	{r3, r4, r5, lr}
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	4601      	mov	r1, r0
 8011f3e:	481c      	ldr	r0, [pc, #112]	; (8011fb0 <malloc+0x78>)
 8011f40:	f7f6 fe08 	bl	8008b54 <printf>
 8011f44:	b17c      	cbz	r4, 8011f66 <malloc+0x2e>
 8011f46:	4b1b      	ldr	r3, [pc, #108]	; (8011fb4 <malloc+0x7c>)
 8011f48:	6818      	ldr	r0, [r3, #0]
 8011f4a:	b978      	cbnz	r0, 8011f6c <malloc+0x34>
 8011f4c:	4a1a      	ldr	r2, [pc, #104]	; (8011fb8 <malloc+0x80>)
 8011f4e:	f104 031b 	add.w	r3, r4, #27
 8011f52:	6811      	ldr	r1, [r2, #0]
 8011f54:	4819      	ldr	r0, [pc, #100]	; (8011fbc <malloc+0x84>)
 8011f56:	f023 030f 	bic.w	r3, r3, #15
 8011f5a:	440b      	add	r3, r1
 8011f5c:	4283      	cmp	r3, r0
 8011f5e:	d921      	bls.n	8011fa4 <malloc+0x6c>
 8011f60:	4817      	ldr	r0, [pc, #92]	; (8011fc0 <malloc+0x88>)
 8011f62:	f7f6 fdf7 	bl	8008b54 <printf>
 8011f66:	2500      	movs	r5, #0
 8011f68:	4628      	mov	r0, r5
 8011f6a:	bd38      	pop	{r3, r4, r5, pc}
 8011f6c:	4284      	cmp	r4, r0
 8011f6e:	d80a      	bhi.n	8011f86 <malloc+0x4e>
 8011f70:	685a      	ldr	r2, [r3, #4]
 8011f72:	6899      	ldr	r1, [r3, #8]
 8011f74:	3201      	adds	r2, #1
 8011f76:	428a      	cmp	r2, r1
 8011f78:	605a      	str	r2, [r3, #4]
 8011f7a:	d900      	bls.n	8011f7e <malloc+0x46>
 8011f7c:	609a      	str	r2, [r3, #8]
 8011f7e:	68d9      	ldr	r1, [r3, #12]
 8011f80:	b919      	cbnz	r1, 8011f8a <malloc+0x52>
 8011f82:	4604      	mov	r4, r0
 8011f84:	e7e2      	b.n	8011f4c <malloc+0x14>
 8011f86:	3310      	adds	r3, #16
 8011f88:	e7de      	b.n	8011f48 <malloc+0x10>
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	688a      	ldr	r2, [r1, #8]
 8011f8e:	60da      	str	r2, [r3, #12]
 8011f90:	2300      	movs	r3, #0
 8011f92:	f101 050c 	add.w	r5, r1, #12
 8011f96:	608b      	str	r3, [r1, #8]
 8011f98:	4622      	mov	r2, r4
 8011f9a:	462b      	mov	r3, r5
 8011f9c:	4809      	ldr	r0, [pc, #36]	; (8011fc4 <malloc+0x8c>)
 8011f9e:	f7f6 fdd9 	bl	8008b54 <printf>
 8011fa2:	e7e1      	b.n	8011f68 <malloc+0x30>
 8011fa4:	6013      	str	r3, [r2, #0]
 8011fa6:	4b08      	ldr	r3, [pc, #32]	; (8011fc8 <malloc+0x90>)
 8011fa8:	e9c1 3400 	strd	r3, r4, [r1]
 8011fac:	e7f0      	b.n	8011f90 <malloc+0x58>
 8011fae:	bf00      	nop
 8011fb0:	080160d4 	stmdaeq	r1, {r2, r4, r6, r7, sp, lr}
 8011fb4:	20000010 	andcs	r0, r0, r0, lsl r0
 8011fb8:	2000000c 	andcs	r0, r0, ip
 8011fbc:	20016800 	andcs	r6, r1, r0, lsl #16
 8011fc0:	080160e0 	stmdaeq	r1, {r5, r6, r7, sp, lr}
 8011fc4:	080160fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sp, lr}
 8011fc8:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08011fcc <free>:
 8011fcc:	b538      	push	{r3, r4, r5, lr}
 8011fce:	4604      	mov	r4, r0
 8011fd0:	b1c8      	cbz	r0, 8012006 <free+0x3a>
 8011fd2:	f1a0 050c 	sub.w	r5, r0, #12
 8011fd6:	4602      	mov	r2, r0
 8011fd8:	4629      	mov	r1, r5
 8011fda:	480c      	ldr	r0, [pc, #48]	; (801200c <free+0x40>)
 8011fdc:	f7f6 fdba 	bl	8008b54 <printf>
 8011fe0:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8011fe4:	4b0a      	ldr	r3, [pc, #40]	; (8012010 <free+0x44>)
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d10d      	bne.n	8012006 <free+0x3a>
 8011fea:	4b0a      	ldr	r3, [pc, #40]	; (8012014 <free+0x48>)
 8011fec:	681a      	ldr	r2, [r3, #0]
 8011fee:	b152      	cbz	r2, 8012006 <free+0x3a>
 8011ff0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8011ff4:	4291      	cmp	r1, r2
 8011ff6:	d107      	bne.n	8012008 <free+0x3c>
 8011ff8:	68da      	ldr	r2, [r3, #12]
 8011ffa:	f844 2c04 	str.w	r2, [r4, #-4]
 8011ffe:	685a      	ldr	r2, [r3, #4]
 8012000:	60dd      	str	r5, [r3, #12]
 8012002:	3a01      	subs	r2, #1
 8012004:	605a      	str	r2, [r3, #4]
 8012006:	bd38      	pop	{r3, r4, r5, pc}
 8012008:	3310      	adds	r3, #16
 801200a:	e7ef      	b.n	8011fec <free+0x20>
 801200c:	08016127 	stmdaeq	r1, {r0, r1, r2, r5, r8, sp, lr}
 8012010:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8012014:	20000010 	andcs	r0, r0, r0, lsl r0

08012018 <memcpy>:
 8012018:	b510      	push	{r4, lr}
 801201a:	1e43      	subs	r3, r0, #1
 801201c:	440a      	add	r2, r1
 801201e:	4291      	cmp	r1, r2
 8012020:	d100      	bne.n	8012024 <memcpy+0xc>
 8012022:	bd10      	pop	{r4, pc}
 8012024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012028:	f803 4f01 	strb.w	r4, [r3, #1]!
 801202c:	e7f7      	b.n	801201e <memcpy+0x6>

0801202e <memmove>:
 801202e:	4288      	cmp	r0, r1
 8012030:	b510      	push	{r4, lr}
 8012032:	eb01 0302 	add.w	r3, r1, r2
 8012036:	d208      	bcs.n	801204a <memmove+0x1c>
 8012038:	1e42      	subs	r2, r0, #1
 801203a:	4299      	cmp	r1, r3
 801203c:	d100      	bne.n	8012040 <memmove+0x12>
 801203e:	bd10      	pop	{r4, pc}
 8012040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012044:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012048:	e7f7      	b.n	801203a <memmove+0xc>
 801204a:	4601      	mov	r1, r0
 801204c:	4402      	add	r2, r0
 801204e:	428a      	cmp	r2, r1
 8012050:	d0f5      	beq.n	801203e <memmove+0x10>
 8012052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801205a:	e7f8      	b.n	801204e <memmove+0x20>

0801205c <memset>:
 801205c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801205e:	b1e2      	cbz	r2, 801209a <memset+0x3e>
 8012060:	4603      	mov	r3, r0
 8012062:	b2c9      	uxtb	r1, r1
 8012064:	075c      	lsls	r4, r3, #29
 8012066:	d114      	bne.n	8012092 <memset+0x36>
 8012068:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 801206c:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8012070:	463d      	mov	r5, r7
 8012072:	f022 0407 	bic.w	r4, r2, #7
 8012076:	08d6      	lsrs	r6, r2, #3
 8012078:	441c      	add	r4, r3
 801207a:	42a3      	cmp	r3, r4
 801207c:	d10e      	bne.n	801209c <memset+0x40>
 801207e:	f06f 0307 	mvn.w	r3, #7
 8012082:	fb03 2206 	mla	r2, r3, r6, r2
 8012086:	4422      	add	r2, r4
 8012088:	4294      	cmp	r4, r2
 801208a:	d006      	beq.n	801209a <memset+0x3e>
 801208c:	f804 1b01 	strb.w	r1, [r4], #1
 8012090:	e7fa      	b.n	8012088 <memset+0x2c>
 8012092:	3a01      	subs	r2, #1
 8012094:	f803 1b01 	strb.w	r1, [r3], #1
 8012098:	d1e4      	bne.n	8012064 <memset+0x8>
 801209a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801209c:	f843 7b08 	str.w	r7, [r3], #8
 80120a0:	f843 5c04 	str.w	r5, [r3, #-4]
 80120a4:	e7e9      	b.n	801207a <memset+0x1e>

080120a6 <puts>:
 80120a6:	b508      	push	{r3, lr}
 80120a8:	f7ff fd7c 	bl	8011ba4 <console_puts>
 80120ac:	200a      	movs	r0, #10
 80120ae:	f7ff fd6d 	bl	8011b8c <console_putc>
 80120b2:	2001      	movs	r0, #1
 80120b4:	bd08      	pop	{r3, pc}
	...

080120b8 <strtok>:
 80120b8:	b530      	push	{r4, r5, lr}
 80120ba:	b910      	cbnz	r0, 80120c2 <strtok+0xa>
 80120bc:	4b12      	ldr	r3, [pc, #72]	; (8012108 <strtok+0x50>)
 80120be:	6818      	ldr	r0, [r3, #0]
 80120c0:	b158      	cbz	r0, 80120da <strtok+0x22>
 80120c2:	4603      	mov	r3, r0
 80120c4:	460d      	mov	r5, r1
 80120c6:	4618      	mov	r0, r3
 80120c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80120d0:	b924      	cbnz	r4, 80120dc <strtok+0x24>
 80120d2:	b94a      	cbnz	r2, 80120e8 <strtok+0x30>
 80120d4:	4610      	mov	r0, r2
 80120d6:	4b0c      	ldr	r3, [pc, #48]	; (8012108 <strtok+0x50>)
 80120d8:	601a      	str	r2, [r3, #0]
 80120da:	bd30      	pop	{r4, r5, pc}
 80120dc:	42a2      	cmp	r2, r4
 80120de:	d1f5      	bne.n	80120cc <strtok+0x14>
 80120e0:	e7f0      	b.n	80120c4 <strtok+0xc>
 80120e2:	4613      	mov	r3, r2
 80120e4:	e00c      	b.n	8012100 <strtok+0x48>
 80120e6:	b914      	cbnz	r4, 80120ee <strtok+0x36>
 80120e8:	460d      	mov	r5, r1
 80120ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80120f2:	42a2      	cmp	r2, r4
 80120f4:	d1f7      	bne.n	80120e6 <strtok+0x2e>
 80120f6:	2a00      	cmp	r2, #0
 80120f8:	d0f3      	beq.n	80120e2 <strtok+0x2a>
 80120fa:	2200      	movs	r2, #0
 80120fc:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012100:	4a01      	ldr	r2, [pc, #4]	; (8012108 <strtok+0x50>)
 8012102:	6013      	str	r3, [r2, #0]
 8012104:	e7e9      	b.n	80120da <strtok+0x22>
 8012106:	bf00      	nop
 8012108:	2000a9b4 			; <UNDEFINED> instruction: 0x2000a9b4

0801210c <isleapyear>:
 801210c:	2264      	movs	r2, #100	; 0x64
 801210e:	fb90 f3f2 	sdiv	r3, r0, r2
 8012112:	fb02 0313 	mls	r3, r2, r3, r0
 8012116:	b94b      	cbnz	r3, 801212c <isleapyear+0x20>
 8012118:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801211c:	fb90 f2f3 	sdiv	r2, r0, r3
 8012120:	fb03 0012 	mls	r0, r3, r2, r0
 8012124:	fab0 f080 	clz	r0, r0
 8012128:	0940      	lsrs	r0, r0, #5
 801212a:	4770      	bx	lr
 801212c:	f010 0f03 	tst.w	r0, #3
 8012130:	bf0c      	ite	eq
 8012132:	2001      	moveq	r0, #1
 8012134:	2000      	movne	r0, #0
 8012136:	4770      	bx	lr

08012138 <getdaysofmonth>:
 8012138:	b510      	push	{r4, lr}
 801213a:	4604      	mov	r4, r0
 801213c:	2c01      	cmp	r4, #1
 801213e:	4608      	mov	r0, r1
 8012140:	d102      	bne.n	8012148 <getdaysofmonth+0x10>
 8012142:	f7ff ffe3 	bl	801210c <isleapyear>
 8012146:	b918      	cbnz	r0, 8012150 <getdaysofmonth+0x18>
 8012148:	4b02      	ldr	r3, [pc, #8]	; (8012154 <getdaysofmonth+0x1c>)
 801214a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801214e:	bd10      	pop	{r4, pc}
 8012150:	201d      	movs	r0, #29
 8012152:	e7fc      	b.n	801214e <getdaysofmonth+0x16>
 8012154:	08016150 	stmdaeq	r1, {r4, r6, r8, sp, lr}

08012158 <mktime>:
 8012158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801215c:	4604      	mov	r4, r0
 801215e:	2800      	cmp	r0, #0
 8012160:	d042      	beq.n	80121e8 <mktime+0x90>
 8012162:	6941      	ldr	r1, [r0, #20]
 8012164:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8012168:	2b45      	cmp	r3, #69	; 0x45
 801216a:	d83d      	bhi.n	80121e8 <mktime+0x90>
 801216c:	2600      	movs	r6, #0
 801216e:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8012172:	f240 186d 	movw	r8, #365	; 0x16d
 8012176:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 801217a:	42af      	cmp	r7, r5
 801217c:	da23      	bge.n	80121c6 <mktime+0x6e>
 801217e:	6927      	ldr	r7, [r4, #16]
 8012180:	2f0b      	cmp	r7, #11
 8012182:	d831      	bhi.n	80121e8 <mktime+0x90>
 8012184:	2500      	movs	r5, #0
 8012186:	42af      	cmp	r7, r5
 8012188:	d128      	bne.n	80121dc <mktime+0x84>
 801218a:	68e5      	ldr	r5, [r4, #12]
 801218c:	2d00      	cmp	r5, #0
 801218e:	dd2b      	ble.n	80121e8 <mktime+0x90>
 8012190:	4638      	mov	r0, r7
 8012192:	f7ff ffd1 	bl	8012138 <getdaysofmonth>
 8012196:	4285      	cmp	r5, r0
 8012198:	dc26      	bgt.n	80121e8 <mktime+0x90>
 801219a:	2318      	movs	r3, #24
 801219c:	3d01      	subs	r5, #1
 801219e:	4435      	add	r5, r6
 80121a0:	435d      	muls	r5, r3
 80121a2:	68a3      	ldr	r3, [r4, #8]
 80121a4:	2b17      	cmp	r3, #23
 80121a6:	d81f      	bhi.n	80121e8 <mktime+0x90>
 80121a8:	203c      	movs	r0, #60	; 0x3c
 80121aa:	442b      	add	r3, r5
 80121ac:	fb00 f503 	mul.w	r5, r0, r3
 80121b0:	6863      	ldr	r3, [r4, #4]
 80121b2:	2b3b      	cmp	r3, #59	; 0x3b
 80121b4:	d818      	bhi.n	80121e8 <mktime+0x90>
 80121b6:	442b      	add	r3, r5
 80121b8:	4343      	muls	r3, r0
 80121ba:	6820      	ldr	r0, [r4, #0]
 80121bc:	283b      	cmp	r0, #59	; 0x3b
 80121be:	d813      	bhi.n	80121e8 <mktime+0x90>
 80121c0:	4418      	add	r0, r3
 80121c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121c6:	4628      	mov	r0, r5
 80121c8:	f7ff ffa0 	bl	801210c <isleapyear>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	bf14      	ite	ne
 80121d0:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 80121d4:	4643      	moveq	r3, r8
 80121d6:	3501      	adds	r5, #1
 80121d8:	441e      	add	r6, r3
 80121da:	e7ce      	b.n	801217a <mktime+0x22>
 80121dc:	4628      	mov	r0, r5
 80121de:	f7ff ffab 	bl	8012138 <getdaysofmonth>
 80121e2:	3501      	adds	r5, #1
 80121e4:	4406      	add	r6, r0
 80121e6:	e7ce      	b.n	8012186 <mktime+0x2e>
 80121e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121ec:	e7e9      	b.n	80121c2 <mktime+0x6a>
	...

080121f0 <gettimeofday>:
 80121f0:	b538      	push	{r3, r4, r5, lr}
 80121f2:	4b10      	ldr	r3, [pc, #64]	; (8012234 <gettimeofday+0x44>)
 80121f4:	4a10      	ldr	r2, [pc, #64]	; (8012238 <gettimeofday+0x48>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	6814      	ldr	r4, [r2, #0]
 80121fa:	6013      	str	r3, [r2, #0]
 80121fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012200:	429c      	cmp	r4, r3
 8012202:	bf2c      	ite	cs
 8012204:	1ae4      	subcs	r4, r4, r3
 8012206:	1b1c      	subcc	r4, r3, r4
 8012208:	4354      	muls	r4, r2
 801220a:	4b0c      	ldr	r3, [pc, #48]	; (801223c <gettimeofday+0x4c>)
 801220c:	4605      	mov	r5, r0
 801220e:	e9d3 2100 	ldrd	r2, r1, [r3]
 8012212:	18a4      	adds	r4, r4, r2
 8012214:	f141 0100 	adc.w	r1, r1, #0
 8012218:	e9c3 4100 	strd	r4, r1, [r3]
 801221c:	4620      	mov	r0, r4
 801221e:	2300      	movs	r3, #0
 8012220:	4a07      	ldr	r2, [pc, #28]	; (8012240 <gettimeofday+0x50>)
 8012222:	f7f5 f98f 	bl	8007544 <__aeabi_uldivmod>
 8012226:	4b06      	ldr	r3, [pc, #24]	; (8012240 <gettimeofday+0x50>)
 8012228:	6028      	str	r0, [r5, #0]
 801222a:	fb03 4410 	mls	r4, r3, r0, r4
 801222e:	2000      	movs	r0, #0
 8012230:	606c      	str	r4, [r5, #4]
 8012232:	bd38      	pop	{r3, r4, r5, pc}
 8012234:	2000a9c4 	andcs	sl, r0, r4, asr #19
 8012238:	2000a9c0 	andcs	sl, r0, r0, asr #19
 801223c:	2000a9b8 			; <UNDEFINED> instruction: 0x2000a9b8
 8012240:	000f4240 	andeq	r4, pc, r0, asr #4

08012244 <settimeofday>:
 8012244:	4b07      	ldr	r3, [pc, #28]	; (8012264 <settimeofday+0x20>)
 8012246:	b510      	push	{r4, lr}
 8012248:	681a      	ldr	r2, [r3, #0]
 801224a:	4b07      	ldr	r3, [pc, #28]	; (8012268 <settimeofday+0x24>)
 801224c:	6804      	ldr	r4, [r0, #0]
 801224e:	601a      	str	r2, [r3, #0]
 8012250:	6843      	ldr	r3, [r0, #4]
 8012252:	4806      	ldr	r0, [pc, #24]	; (801226c <settimeofday+0x28>)
 8012254:	17da      	asrs	r2, r3, #31
 8012256:	fbc4 3200 	smlal	r3, r2, r4, r0
 801225a:	4905      	ldr	r1, [pc, #20]	; (8012270 <settimeofday+0x2c>)
 801225c:	2000      	movs	r0, #0
 801225e:	e9c1 3200 	strd	r3, r2, [r1]
 8012262:	bd10      	pop	{r4, pc}
 8012264:	2000a9c4 	andcs	sl, r0, r4, asr #19
 8012268:	2000a9c0 	andcs	sl, r0, r0, asr #19
 801226c:	000f4240 	andeq	r4, pc, r0, asr #4
 8012270:	2000a9b8 			; <UNDEFINED> instruction: 0x2000a9b8

08012274 <time>:
 8012274:	b513      	push	{r0, r1, r4, lr}
 8012276:	4604      	mov	r4, r0
 8012278:	2100      	movs	r1, #0
 801227a:	4668      	mov	r0, sp
 801227c:	f7ff ffb8 	bl	80121f0 <gettimeofday>
 8012280:	9800      	ldr	r0, [sp, #0]
 8012282:	b104      	cbz	r4, 8012286 <time+0x12>
 8012284:	6020      	str	r0, [r4, #0]
 8012286:	b002      	add	sp, #8
 8012288:	bd10      	pop	{r4, pc}
	...

0801228c <uart0_init>:
 801228c:	2301      	movs	r3, #1
 801228e:	b507      	push	{r0, r1, r2, lr}
 8012290:	2208      	movs	r2, #8
 8012292:	9300      	str	r3, [sp, #0]
 8012294:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8012298:	2300      	movs	r3, #0
 801229a:	4803      	ldr	r0, [pc, #12]	; (80122a8 <uart0_init+0x1c>)
 801229c:	f000 ffb8 	bl	8013210 <gd32_uart_begin>
 80122a0:	b003      	add	sp, #12
 80122a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80122a6:	bf00      	nop
 80122a8:	40013800 	andmi	r3, r1, r0, lsl #16

080122ac <uart0_putc>:
 80122ac:	280a      	cmp	r0, #10
 80122ae:	b538      	push	{r3, r4, r5, lr}
 80122b0:	4604      	mov	r4, r0
 80122b2:	d10a      	bne.n	80122ca <uart0_putc+0x1e>
 80122b4:	4d0b      	ldr	r5, [pc, #44]	; (80122e4 <uart0_putc+0x38>)
 80122b6:	2107      	movs	r1, #7
 80122b8:	4628      	mov	r0, r5
 80122ba:	f000 fc87 	bl	8012bcc <usart_flag_get>
 80122be:	2800      	cmp	r0, #0
 80122c0:	d0f9      	beq.n	80122b6 <uart0_putc+0xa>
 80122c2:	220d      	movs	r2, #13
 80122c4:	4b08      	ldr	r3, [pc, #32]	; (80122e8 <uart0_putc+0x3c>)
 80122c6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80122ca:	4d06      	ldr	r5, [pc, #24]	; (80122e4 <uart0_putc+0x38>)
 80122cc:	2107      	movs	r1, #7
 80122ce:	4628      	mov	r0, r5
 80122d0:	f000 fc7c 	bl	8012bcc <usart_flag_get>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	d0f9      	beq.n	80122cc <uart0_putc+0x20>
 80122d8:	4b03      	ldr	r3, [pc, #12]	; (80122e8 <uart0_putc+0x3c>)
 80122da:	b2e4      	uxtb	r4, r4
 80122dc:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 80122e0:	bd38      	pop	{r3, r4, r5, pc}
 80122e2:	bf00      	nop
 80122e4:	40013800 	andmi	r3, r1, r0, lsl #16
 80122e8:	40013000 	andmi	r3, r1, r0

080122ec <uart0_puts>:
 80122ec:	b510      	push	{r4, lr}
 80122ee:	1e44      	subs	r4, r0, #1
 80122f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80122f4:	b903      	cbnz	r3, 80122f8 <uart0_puts+0xc>
 80122f6:	bd10      	pop	{r4, pc}
 80122f8:	2b0a      	cmp	r3, #10
 80122fa:	d102      	bne.n	8012302 <uart0_puts+0x16>
 80122fc:	200d      	movs	r0, #13
 80122fe:	f7ff ffd5 	bl	80122ac <uart0_putc>
 8012302:	7820      	ldrb	r0, [r4, #0]
 8012304:	f7ff ffd2 	bl	80122ac <uart0_putc>
 8012308:	e7f2      	b.n	80122f0 <uart0_puts+0x4>
	...

0801230c <systick_config>:
 801230c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012310:	4b0b      	ldr	r3, [pc, #44]	; (8012340 <systick_config+0x34>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	fbb3 f3f2 	udiv	r3, r3, r2
 8012318:	3b01      	subs	r3, #1
 801231a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801231e:	d20d      	bcs.n	801233c <systick_config+0x30>
 8012320:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8012324:	21f0      	movs	r1, #240	; 0xf0
 8012326:	6153      	str	r3, [r2, #20]
 8012328:	4b06      	ldr	r3, [pc, #24]	; (8012344 <systick_config+0x38>)
 801232a:	2007      	movs	r0, #7
 801232c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8012330:	2100      	movs	r1, #0
 8012332:	6191      	str	r1, [r2, #24]
 8012334:	6110      	str	r0, [r2, #16]
 8012336:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 801233a:	4770      	bx	lr
 801233c:	e7fe      	b.n	801233c <systick_config+0x30>
 801233e:	bf00      	nop
 8012340:	200000e0 	andcs	r0, r0, r0, ror #1
 8012344:	e000ed00 	and	lr, r0, r0, lsl #26

08012348 <SysTick_Handler>:
 8012348:	4a02      	ldr	r2, [pc, #8]	; (8012354 <SysTick_Handler+0xc>)
 801234a:	6813      	ldr	r3, [r2, #0]
 801234c:	3301      	adds	r3, #1
 801234e:	6013      	str	r3, [r2, #0]
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop
 8012354:	2000a9c4 	andcs	sl, r0, r4, asr #19

08012358 <SystemInit>:
 8012358:	4b37      	ldr	r3, [pc, #220]	; (8012438 <SystemInit+0xe0>)
 801235a:	4838      	ldr	r0, [pc, #224]	; (801243c <SystemInit+0xe4>)
 801235c:	681a      	ldr	r2, [r3, #0]
 801235e:	f042 0201 	orr.w	r2, r2, #1
 8012362:	601a      	str	r2, [r3, #0]
 8012364:	685a      	ldr	r2, [r3, #4]
 8012366:	f022 0203 	bic.w	r2, r2, #3
 801236a:	605a      	str	r2, [r3, #4]
 801236c:	6819      	ldr	r1, [r3, #0]
 801236e:	4001      	ands	r1, r0
 8012370:	6019      	str	r1, [r3, #0]
 8012372:	685a      	ldr	r2, [r3, #4]
 8012374:	4932      	ldr	r1, [pc, #200]	; (8012440 <SystemInit+0xe8>)
 8012376:	4011      	ands	r1, r2
 8012378:	6059      	str	r1, [r3, #4]
 801237a:	681a      	ldr	r2, [r3, #0]
 801237c:	4002      	ands	r2, r0
 801237e:	601a      	str	r2, [r3, #0]
 8012380:	681a      	ldr	r2, [r3, #0]
 8012382:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012386:	601a      	str	r2, [r3, #0]
 8012388:	685a      	ldr	r2, [r3, #4]
 801238a:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 801238e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8012392:	605a      	str	r2, [r3, #4]
 8012394:	2200      	movs	r2, #0
 8012396:	62da      	str	r2, [r3, #44]	; 0x2c
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 801239e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80123a2:	601a      	str	r2, [r3, #0]
 80123a4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80123a8:	609a      	str	r2, [r3, #8]
 80123aa:	681a      	ldr	r2, [r3, #0]
 80123ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80123b0:	601a      	str	r2, [r3, #0]
 80123b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123b6:	6819      	ldr	r1, [r3, #0]
 80123b8:	0389      	lsls	r1, r1, #14
 80123ba:	d401      	bmi.n	80123c0 <SystemInit+0x68>
 80123bc:	3a01      	subs	r2, #1
 80123be:	d1fa      	bne.n	80123b6 <SystemInit+0x5e>
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	0392      	lsls	r2, r2, #14
 80123c4:	d400      	bmi.n	80123c8 <SystemInit+0x70>
 80123c6:	e7fe      	b.n	80123c6 <SystemInit+0x6e>
 80123c8:	685a      	ldr	r2, [r3, #4]
 80123ca:	605a      	str	r2, [r3, #4]
 80123cc:	685a      	ldr	r2, [r3, #4]
 80123ce:	605a      	str	r2, [r3, #4]
 80123d0:	685a      	ldr	r2, [r3, #4]
 80123d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80123d6:	605a      	str	r2, [r3, #4]
 80123d8:	685a      	ldr	r2, [r3, #4]
 80123da:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80123de:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80123e2:	605a      	str	r2, [r3, #4]
 80123e4:	685a      	ldr	r2, [r3, #4]
 80123e6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80123ea:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 80123ee:	605a      	str	r2, [r3, #4]
 80123f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80123f2:	4a14      	ldr	r2, [pc, #80]	; (8012444 <SystemInit+0xec>)
 80123f4:	400a      	ands	r2, r1
 80123f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80123f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123fa:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 80123fe:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 8012402:	62da      	str	r2, [r3, #44]	; 0x2c
 8012404:	681a      	ldr	r2, [r3, #0]
 8012406:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801240a:	601a      	str	r2, [r3, #0]
 801240c:	681a      	ldr	r2, [r3, #0]
 801240e:	0110      	lsls	r0, r2, #4
 8012410:	d5fc      	bpl.n	801240c <SystemInit+0xb4>
 8012412:	681a      	ldr	r2, [r3, #0]
 8012414:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8012418:	601a      	str	r2, [r3, #0]
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	0191      	lsls	r1, r2, #6
 801241e:	d5fc      	bpl.n	801241a <SystemInit+0xc2>
 8012420:	685a      	ldr	r2, [r3, #4]
 8012422:	f022 0203 	bic.w	r2, r2, #3
 8012426:	605a      	str	r2, [r3, #4]
 8012428:	685a      	ldr	r2, [r3, #4]
 801242a:	f042 0202 	orr.w	r2, r2, #2
 801242e:	605a      	str	r2, [r3, #4]
 8012430:	685a      	ldr	r2, [r3, #4]
 8012432:	0712      	lsls	r2, r2, #28
 8012434:	d5fc      	bpl.n	8012430 <SystemInit+0xd8>
 8012436:	4770      	bx	lr
 8012438:	40021000 	andmi	r1, r2, r0
 801243c:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 8012440:	e0ff000c 	rscs	r0, pc, ip
 8012444:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08012448 <fmc_bank0_unlock>:
 8012448:	4b04      	ldr	r3, [pc, #16]	; (801245c <fmc_bank0_unlock+0x14>)
 801244a:	691a      	ldr	r2, [r3, #16]
 801244c:	0612      	lsls	r2, r2, #24
 801244e:	bf41      	itttt	mi
 8012450:	4a03      	ldrmi	r2, [pc, #12]	; (8012460 <fmc_bank0_unlock+0x18>)
 8012452:	605a      	strmi	r2, [r3, #4]
 8012454:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8012458:	605a      	strmi	r2, [r3, #4]
 801245a:	4770      	bx	lr
 801245c:	40022000 	andmi	r2, r2, r0
 8012460:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08012464 <fmc_bank1_unlock>:
 8012464:	4b04      	ldr	r3, [pc, #16]	; (8012478 <fmc_bank1_unlock+0x14>)
 8012466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012468:	0612      	lsls	r2, r2, #24
 801246a:	bf41      	itttt	mi
 801246c:	4a03      	ldrmi	r2, [pc, #12]	; (801247c <fmc_bank1_unlock+0x18>)
 801246e:	645a      	strmi	r2, [r3, #68]	; 0x44
 8012470:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8012474:	645a      	strmi	r2, [r3, #68]	; 0x44
 8012476:	4770      	bx	lr
 8012478:	40022000 	andmi	r2, r2, r0
 801247c:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08012480 <fmc_bank0_lock>:
 8012480:	4a02      	ldr	r2, [pc, #8]	; (801248c <fmc_bank0_lock+0xc>)
 8012482:	6913      	ldr	r3, [r2, #16]
 8012484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012488:	6113      	str	r3, [r2, #16]
 801248a:	4770      	bx	lr
 801248c:	40022000 	andmi	r2, r2, r0

08012490 <fmc_bank1_lock>:
 8012490:	4a02      	ldr	r2, [pc, #8]	; (801249c <fmc_bank1_lock+0xc>)
 8012492:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8012494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012498:	6513      	str	r3, [r2, #80]	; 0x50
 801249a:	4770      	bx	lr
 801249c:	40022000 	andmi	r2, r2, r0

080124a0 <fmc_bank0_state_get>:
 80124a0:	4b08      	ldr	r3, [pc, #32]	; (80124c4 <fmc_bank0_state_get+0x24>)
 80124a2:	68da      	ldr	r2, [r3, #12]
 80124a4:	07d1      	lsls	r1, r2, #31
 80124a6:	d409      	bmi.n	80124bc <fmc_bank0_state_get+0x1c>
 80124a8:	68da      	ldr	r2, [r3, #12]
 80124aa:	06d2      	lsls	r2, r2, #27
 80124ac:	d408      	bmi.n	80124c0 <fmc_bank0_state_get+0x20>
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	f013 0f04 	tst.w	r3, #4
 80124b4:	bf0c      	ite	eq
 80124b6:	2000      	moveq	r0, #0
 80124b8:	2002      	movne	r0, #2
 80124ba:	4770      	bx	lr
 80124bc:	2001      	movs	r0, #1
 80124be:	4770      	bx	lr
 80124c0:	2003      	movs	r0, #3
 80124c2:	4770      	bx	lr
 80124c4:	40022000 	andmi	r2, r2, r0

080124c8 <fmc_bank1_state_get>:
 80124c8:	4b08      	ldr	r3, [pc, #32]	; (80124ec <fmc_bank1_state_get+0x24>)
 80124ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80124cc:	07d1      	lsls	r1, r2, #31
 80124ce:	d409      	bmi.n	80124e4 <fmc_bank1_state_get+0x1c>
 80124d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80124d2:	06d2      	lsls	r2, r2, #27
 80124d4:	d408      	bmi.n	80124e8 <fmc_bank1_state_get+0x20>
 80124d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124d8:	f013 0f04 	tst.w	r3, #4
 80124dc:	bf0c      	ite	eq
 80124de:	2000      	moveq	r0, #0
 80124e0:	2002      	movne	r0, #2
 80124e2:	4770      	bx	lr
 80124e4:	2001      	movs	r0, #1
 80124e6:	4770      	bx	lr
 80124e8:	2003      	movs	r0, #3
 80124ea:	4770      	bx	lr
 80124ec:	40022000 	andmi	r2, r2, r0

080124f0 <fwdgt_enable>:
 80124f0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80124f4:	4b01      	ldr	r3, [pc, #4]	; (80124fc <fwdgt_enable+0xc>)
 80124f6:	601a      	str	r2, [r3, #0]
 80124f8:	4770      	bx	lr
 80124fa:	bf00      	nop
 80124fc:	40003000 	andmi	r3, r0, r0

08012500 <fwdgt_counter_reload>:
 8012500:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8012504:	4b01      	ldr	r3, [pc, #4]	; (801250c <fwdgt_counter_reload+0xc>)
 8012506:	601a      	str	r2, [r3, #0]
 8012508:	4770      	bx	lr
 801250a:	bf00      	nop
 801250c:	40003000 	andmi	r3, r0, r0

08012510 <fwdgt_config>:
 8012510:	f245 5355 	movw	r3, #21845	; 0x5555
 8012514:	4a11      	ldr	r2, [pc, #68]	; (801255c <fwdgt_config+0x4c>)
 8012516:	b510      	push	{r4, lr}
 8012518:	4c11      	ldr	r4, [pc, #68]	; (8012560 <fwdgt_config+0x50>)
 801251a:	6013      	str	r3, [r2, #0]
 801251c:	68d3      	ldr	r3, [r2, #12]
 801251e:	3c01      	subs	r4, #1
 8012520:	f003 0301 	and.w	r3, r3, #1
 8012524:	d013      	beq.n	801254e <fwdgt_config+0x3e>
 8012526:	2b00      	cmp	r3, #0
 8012528:	d1f8      	bne.n	801251c <fwdgt_config+0xc>
 801252a:	6051      	str	r1, [r2, #4]
 801252c:	490c      	ldr	r1, [pc, #48]	; (8012560 <fwdgt_config+0x50>)
 801252e:	4a0b      	ldr	r2, [pc, #44]	; (801255c <fwdgt_config+0x4c>)
 8012530:	68d3      	ldr	r3, [r2, #12]
 8012532:	3901      	subs	r1, #1
 8012534:	f003 0302 	and.w	r3, r3, #2
 8012538:	d00d      	beq.n	8012556 <fwdgt_config+0x46>
 801253a:	2b00      	cmp	r3, #0
 801253c:	d1f8      	bne.n	8012530 <fwdgt_config+0x20>
 801253e:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8012542:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8012546:	6090      	str	r0, [r2, #8]
 8012548:	2001      	movs	r0, #1
 801254a:	6013      	str	r3, [r2, #0]
 801254c:	e002      	b.n	8012554 <fwdgt_config+0x44>
 801254e:	2b00      	cmp	r3, #0
 8012550:	d0eb      	beq.n	801252a <fwdgt_config+0x1a>
 8012552:	2000      	movs	r0, #0
 8012554:	bd10      	pop	{r4, pc}
 8012556:	2b00      	cmp	r3, #0
 8012558:	d1fb      	bne.n	8012552 <fwdgt_config+0x42>
 801255a:	e7f0      	b.n	801253e <fwdgt_config+0x2e>
 801255c:	40003000 	andmi	r3, r0, r0
 8012560:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08012564 <gpio_init>:
 8012564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012568:	f04f 0c0f 	mov.w	ip, #15
 801256c:	06cf      	lsls	r7, r1, #27
 801256e:	f04f 0400 	mov.w	r4, #0
 8012572:	f04f 0701 	mov.w	r7, #1
 8012576:	f001 050f 	and.w	r5, r1, #15
 801257a:	bf48      	it	mi
 801257c:	4315      	orrmi	r5, r2
 801257e:	fa23 f204 	lsr.w	r2, r3, r4
 8012582:	07d6      	lsls	r6, r2, #31
 8012584:	d510      	bpl.n	80125a8 <gpio_init+0x44>
 8012586:	00a2      	lsls	r2, r4, #2
 8012588:	6806      	ldr	r6, [r0, #0]
 801258a:	fa0c fe02 	lsl.w	lr, ip, r2
 801258e:	ea26 060e 	bic.w	r6, r6, lr
 8012592:	fa05 f202 	lsl.w	r2, r5, r2
 8012596:	2928      	cmp	r1, #40	; 0x28
 8012598:	ea42 0206 	orr.w	r2, r2, r6
 801259c:	d128      	bne.n	80125f0 <gpio_init+0x8c>
 801259e:	fa07 f604 	lsl.w	r6, r7, r4
 80125a2:	401e      	ands	r6, r3
 80125a4:	6146      	str	r6, [r0, #20]
 80125a6:	6002      	str	r2, [r0, #0]
 80125a8:	3401      	adds	r4, #1
 80125aa:	2c08      	cmp	r4, #8
 80125ac:	d1e7      	bne.n	801257e <gpio_init+0x1a>
 80125ae:	2600      	movs	r6, #0
 80125b0:	f04f 0c0f 	mov.w	ip, #15
 80125b4:	2701      	movs	r7, #1
 80125b6:	f106 0208 	add.w	r2, r6, #8
 80125ba:	fa23 f402 	lsr.w	r4, r3, r2
 80125be:	07e4      	lsls	r4, r4, #31
 80125c0:	d511      	bpl.n	80125e6 <gpio_init+0x82>
 80125c2:	00b4      	lsls	r4, r6, #2
 80125c4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80125c8:	fa0c f804 	lsl.w	r8, ip, r4
 80125cc:	ea2e 0e08 	bic.w	lr, lr, r8
 80125d0:	fa05 f404 	lsl.w	r4, r5, r4
 80125d4:	2928      	cmp	r1, #40	; 0x28
 80125d6:	ea44 040e 	orr.w	r4, r4, lr
 80125da:	d110      	bne.n	80125fe <gpio_init+0x9a>
 80125dc:	fa07 f202 	lsl.w	r2, r7, r2
 80125e0:	401a      	ands	r2, r3
 80125e2:	6142      	str	r2, [r0, #20]
 80125e4:	6044      	str	r4, [r0, #4]
 80125e6:	3601      	adds	r6, #1
 80125e8:	2e08      	cmp	r6, #8
 80125ea:	d1e4      	bne.n	80125b6 <gpio_init+0x52>
 80125ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125f0:	2948      	cmp	r1, #72	; 0x48
 80125f2:	bf02      	ittt	eq
 80125f4:	fa07 f604 	lsleq.w	r6, r7, r4
 80125f8:	401e      	andeq	r6, r3
 80125fa:	6106      	streq	r6, [r0, #16]
 80125fc:	e7d3      	b.n	80125a6 <gpio_init+0x42>
 80125fe:	2948      	cmp	r1, #72	; 0x48
 8012600:	bf02      	ittt	eq
 8012602:	fa07 f202 	lsleq.w	r2, r7, r2
 8012606:	401a      	andeq	r2, r3
 8012608:	6102      	streq	r2, [r0, #16]
 801260a:	e7eb      	b.n	80125e4 <gpio_init+0x80>

0801260c <gpio_pin_remap_config>:
 801260c:	2800      	cmp	r0, #0
 801260e:	4a16      	ldr	r2, [pc, #88]	; (8012668 <gpio_pin_remap_config+0x5c>)
 8012610:	b530      	push	{r4, r5, lr}
 8012612:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 8012616:	bfb4      	ite	lt
 8012618:	69d3      	ldrlt	r3, [r2, #28]
 801261a:	6853      	ldrge	r3, [r2, #4]
 801261c:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8012620:	b284      	uxth	r4, r0
 8012622:	d110      	bne.n	8012646 <gpio_pin_remap_config+0x3a>
 8012624:	6855      	ldr	r5, [r2, #4]
 8012626:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 801262a:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 801262e:	6055      	str	r5, [r2, #4]
 8012630:	b119      	cbz	r1, 801263a <gpio_pin_remap_config+0x2e>
 8012632:	0d42      	lsrs	r2, r0, #21
 8012634:	0112      	lsls	r2, r2, #4
 8012636:	4094      	lsls	r4, r2
 8012638:	4323      	orrs	r3, r4
 801263a:	4a0b      	ldr	r2, [pc, #44]	; (8012668 <gpio_pin_remap_config+0x5c>)
 801263c:	2800      	cmp	r0, #0
 801263e:	bfb4      	ite	lt
 8012640:	61d3      	strlt	r3, [r2, #28]
 8012642:	6053      	strge	r3, [r2, #4]
 8012644:	bd30      	pop	{r4, r5, pc}
 8012646:	02c2      	lsls	r2, r0, #11
 8012648:	bf4d      	iteet	mi
 801264a:	2203      	movmi	r2, #3
 801264c:	0d42      	lsrpl	r2, r0, #21
 801264e:	0112      	lslpl	r2, r2, #4
 8012650:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8012654:	bf4c      	ite	mi
 8012656:	40aa      	lslmi	r2, r5
 8012658:	fa04 f202 	lslpl.w	r2, r4, r2
 801265c:	ea23 0302 	bic.w	r3, r3, r2
 8012660:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8012664:	e7e4      	b.n	8012630 <gpio_pin_remap_config+0x24>
 8012666:	bf00      	nop
 8012668:	40010000 	andmi	r0, r1, r0

0801266c <gpio_ethernet_phy_select>:
 801266c:	4b04      	ldr	r3, [pc, #16]	; (8012680 <gpio_ethernet_phy_select+0x14>)
 801266e:	6859      	ldr	r1, [r3, #4]
 8012670:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8012674:	6059      	str	r1, [r3, #4]
 8012676:	685a      	ldr	r2, [r3, #4]
 8012678:	4302      	orrs	r2, r0
 801267a:	605a      	str	r2, [r3, #4]
 801267c:	4770      	bx	lr
 801267e:	bf00      	nop
 8012680:	40010000 	andmi	r0, r1, r0

08012684 <rcu_periph_clock_enable>:
 8012684:	2201      	movs	r2, #1
 8012686:	0983      	lsrs	r3, r0, #6
 8012688:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801268c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8012690:	6819      	ldr	r1, [r3, #0]
 8012692:	f000 001f 	and.w	r0, r0, #31
 8012696:	fa02 f000 	lsl.w	r0, r2, r0
 801269a:	4308      	orrs	r0, r1
 801269c:	6018      	str	r0, [r3, #0]
 801269e:	4770      	bx	lr

080126a0 <rcu_periph_clock_disable>:
 80126a0:	2101      	movs	r1, #1
 80126a2:	0983      	lsrs	r3, r0, #6
 80126a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80126a8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	f000 001f 	and.w	r0, r0, #31
 80126b2:	fa01 f000 	lsl.w	r0, r1, r0
 80126b6:	ea22 0000 	bic.w	r0, r2, r0
 80126ba:	6018      	str	r0, [r3, #0]
 80126bc:	4770      	bx	lr

080126be <rcu_periph_reset_enable>:
 80126be:	f7ff bfe1 	b.w	8012684 <rcu_periph_clock_enable>

080126c2 <rcu_periph_reset_disable>:
 80126c2:	f7ff bfed 	b.w	80126a0 <rcu_periph_clock_disable>
	...

080126c8 <rcu_ckout0_config>:
 80126c8:	4a03      	ldr	r2, [pc, #12]	; (80126d8 <rcu_ckout0_config+0x10>)
 80126ca:	6853      	ldr	r3, [r2, #4]
 80126cc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80126d0:	4303      	orrs	r3, r0
 80126d2:	6053      	str	r3, [r2, #4]
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	40021000 	andmi	r1, r2, r0

080126dc <rcu_pll2_config>:
 80126dc:	4b04      	ldr	r3, [pc, #16]	; (80126f0 <rcu_pll2_config+0x14>)
 80126de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80126e0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 80126e4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80126e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126e8:	4302      	orrs	r2, r0
 80126ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop
 80126f0:	40021000 	andmi	r1, r2, r0

080126f4 <rcu_adc_clock_config>:
 80126f4:	490c      	ldr	r1, [pc, #48]	; (8012728 <rcu_adc_clock_config+0x34>)
 80126f6:	2805      	cmp	r0, #5
 80126f8:	684b      	ldr	r3, [r1, #4]
 80126fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80126fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8012702:	d006      	beq.n	8012712 <rcu_adc_clock_config+0x1e>
 8012704:	d803      	bhi.n	801270e <rcu_adc_clock_config+0x1a>
 8012706:	2804      	cmp	r0, #4
 8012708:	d10a      	bne.n	8012720 <rcu_adc_clock_config+0x2c>
 801270a:	604b      	str	r3, [r1, #4]
 801270c:	4770      	bx	lr
 801270e:	2807      	cmp	r0, #7
 8012710:	d1fb      	bne.n	801270a <rcu_adc_clock_config+0x16>
 8012712:	4a06      	ldr	r2, [pc, #24]	; (801272c <rcu_adc_clock_config+0x38>)
 8012714:	ea02 3080 	and.w	r0, r2, r0, lsl #14
 8012718:	4303      	orrs	r3, r0
 801271a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801271e:	e7f4      	b.n	801270a <rcu_adc_clock_config+0x16>
 8012720:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8012724:	e7f1      	b.n	801270a <rcu_adc_clock_config+0x16>
 8012726:	bf00      	nop
 8012728:	40021000 	andmi	r1, r2, r0
 801272c:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08012730 <rcu_flag_get>:
 8012730:	0983      	lsrs	r3, r0, #6
 8012732:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012736:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	f000 001f 	and.w	r0, r0, #31
 8012740:	fa23 f000 	lsr.w	r0, r3, r0
 8012744:	f000 0001 	and.w	r0, r0, #1
 8012748:	4770      	bx	lr
	...

0801274c <rcu_osci_stab_wait>:
 801274c:	281a      	cmp	r0, #26
 801274e:	b508      	push	{r3, lr}
 8012750:	d051      	beq.n	80127f6 <rcu_osci_stab_wait+0xaa>
 8012752:	d806      	bhi.n	8012762 <rcu_osci_stab_wait+0x16>
 8012754:	2810      	cmp	r0, #16
 8012756:	d015      	beq.n	8012784 <rcu_osci_stab_wait+0x38>
 8012758:	2818      	cmp	r0, #24
 801275a:	d043      	beq.n	80127e4 <rcu_osci_stab_wait+0x98>
 801275c:	b368      	cbz	r0, 80127ba <rcu_osci_stab_wait+0x6e>
 801275e:	2000      	movs	r0, #0
 8012760:	bd08      	pop	{r3, pc}
 8012762:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8012766:	d01c      	beq.n	80127a2 <rcu_osci_stab_wait+0x56>
 8012768:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 801276c:	d02f      	beq.n	80127ce <rcu_osci_stab_wait+0x82>
 801276e:	281c      	cmp	r0, #28
 8012770:	d1f5      	bne.n	801275e <rcu_osci_stab_wait+0x12>
 8012772:	4a25      	ldr	r2, [pc, #148]	; (8012808 <rcu_osci_stab_wait+0xbc>)
 8012774:	201d      	movs	r0, #29
 8012776:	f7ff ffdb 	bl	8012730 <rcu_flag_get>
 801277a:	b908      	cbnz	r0, 8012780 <rcu_osci_stab_wait+0x34>
 801277c:	3a01      	subs	r2, #1
 801277e:	d1f9      	bne.n	8012774 <rcu_osci_stab_wait+0x28>
 8012780:	201d      	movs	r0, #29
 8012782:	e008      	b.n	8012796 <rcu_osci_stab_wait+0x4a>
 8012784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012788:	2011      	movs	r0, #17
 801278a:	f7ff ffd1 	bl	8012730 <rcu_flag_get>
 801278e:	b908      	cbnz	r0, 8012794 <rcu_osci_stab_wait+0x48>
 8012790:	3a01      	subs	r2, #1
 8012792:	d1f9      	bne.n	8012788 <rcu_osci_stab_wait+0x3c>
 8012794:	2011      	movs	r0, #17
 8012796:	f7ff ffcb 	bl	8012730 <rcu_flag_get>
 801279a:	3800      	subs	r0, #0
 801279c:	bf18      	it	ne
 801279e:	2001      	movne	r0, #1
 80127a0:	e7de      	b.n	8012760 <rcu_osci_stab_wait+0x14>
 80127a2:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 80127a6:	f640 0001 	movw	r0, #2049	; 0x801
 80127aa:	f7ff ffc1 	bl	8012730 <rcu_flag_get>
 80127ae:	b908      	cbnz	r0, 80127b4 <rcu_osci_stab_wait+0x68>
 80127b0:	3a01      	subs	r2, #1
 80127b2:	d1f8      	bne.n	80127a6 <rcu_osci_stab_wait+0x5a>
 80127b4:	f640 0001 	movw	r0, #2049	; 0x801
 80127b8:	e7ed      	b.n	8012796 <rcu_osci_stab_wait+0x4a>
 80127ba:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80127be:	2001      	movs	r0, #1
 80127c0:	f7ff ffb6 	bl	8012730 <rcu_flag_get>
 80127c4:	b908      	cbnz	r0, 80127ca <rcu_osci_stab_wait+0x7e>
 80127c6:	3a01      	subs	r2, #1
 80127c8:	d1f9      	bne.n	80127be <rcu_osci_stab_wait+0x72>
 80127ca:	2001      	movs	r0, #1
 80127cc:	e7e3      	b.n	8012796 <rcu_osci_stab_wait+0x4a>
 80127ce:	4a0e      	ldr	r2, [pc, #56]	; (8012808 <rcu_osci_stab_wait+0xbc>)
 80127d0:	f640 1001 	movw	r0, #2305	; 0x901
 80127d4:	f7ff ffac 	bl	8012730 <rcu_flag_get>
 80127d8:	b908      	cbnz	r0, 80127de <rcu_osci_stab_wait+0x92>
 80127da:	3a01      	subs	r2, #1
 80127dc:	d1f8      	bne.n	80127d0 <rcu_osci_stab_wait+0x84>
 80127de:	f640 1001 	movw	r0, #2305	; 0x901
 80127e2:	e7d8      	b.n	8012796 <rcu_osci_stab_wait+0x4a>
 80127e4:	4a08      	ldr	r2, [pc, #32]	; (8012808 <rcu_osci_stab_wait+0xbc>)
 80127e6:	2019      	movs	r0, #25
 80127e8:	f7ff ffa2 	bl	8012730 <rcu_flag_get>
 80127ec:	b908      	cbnz	r0, 80127f2 <rcu_osci_stab_wait+0xa6>
 80127ee:	3a01      	subs	r2, #1
 80127f0:	d1f9      	bne.n	80127e6 <rcu_osci_stab_wait+0x9a>
 80127f2:	2019      	movs	r0, #25
 80127f4:	e7cf      	b.n	8012796 <rcu_osci_stab_wait+0x4a>
 80127f6:	4a04      	ldr	r2, [pc, #16]	; (8012808 <rcu_osci_stab_wait+0xbc>)
 80127f8:	201b      	movs	r0, #27
 80127fa:	f7ff ff99 	bl	8012730 <rcu_flag_get>
 80127fe:	b908      	cbnz	r0, 8012804 <rcu_osci_stab_wait+0xb8>
 8012800:	3a01      	subs	r2, #1
 8012802:	d1f9      	bne.n	80127f8 <rcu_osci_stab_wait+0xac>
 8012804:	201b      	movs	r0, #27
 8012806:	e7c6      	b.n	8012796 <rcu_osci_stab_wait+0x4a>
 8012808:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

0801280c <rcu_osci_on>:
 801280c:	f7ff bf3a 	b.w	8012684 <rcu_periph_clock_enable>

08012810 <rcu_clock_freq_get>:
 8012810:	4b3d      	ldr	r3, [pc, #244]	; (8012908 <rcu_clock_freq_get+0xf8>)
 8012812:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012814:	4604      	mov	r4, r0
 8012816:	461f      	mov	r7, r3
 8012818:	b089      	sub	sp, #36	; 0x24
 801281a:	ad04      	add	r5, sp, #16
 801281c:	f103 0610 	add.w	r6, r3, #16
 8012820:	462a      	mov	r2, r5
 8012822:	6818      	ldr	r0, [r3, #0]
 8012824:	6859      	ldr	r1, [r3, #4]
 8012826:	3308      	adds	r3, #8
 8012828:	c203      	stmia	r2!, {r0, r1}
 801282a:	42b3      	cmp	r3, r6
 801282c:	4615      	mov	r5, r2
 801282e:	d1f7      	bne.n	8012820 <rcu_clock_freq_get+0x10>
 8012830:	466b      	mov	r3, sp
 8012832:	6938      	ldr	r0, [r7, #16]
 8012834:	6871      	ldr	r1, [r6, #4]
 8012836:	4a35      	ldr	r2, [pc, #212]	; (801290c <rcu_clock_freq_get+0xfc>)
 8012838:	c303      	stmia	r3!, {r0, r1}
 801283a:	c303      	stmia	r3!, {r0, r1}
 801283c:	6853      	ldr	r3, [r2, #4]
 801283e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012842:	2b01      	cmp	r3, #1
 8012844:	d053      	beq.n	80128ee <rcu_clock_freq_get+0xde>
 8012846:	2b02      	cmp	r3, #2
 8012848:	d153      	bne.n	80128f2 <rcu_clock_freq_get+0xe2>
 801284a:	6853      	ldr	r3, [r2, #4]
 801284c:	03dd      	lsls	r5, r3, #15
 801284e:	d523      	bpl.n	8012898 <rcu_clock_freq_get+0x88>
 8012850:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8012852:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8012856:	4b2e      	ldr	r3, [pc, #184]	; (8012910 <rcu_clock_freq_get+0x100>)
 8012858:	d00e      	beq.n	8012878 <rcu_clock_freq_get+0x68>
 801285a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801285c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 801285e:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8012862:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8012866:	3101      	adds	r1, #1
 8012868:	280f      	cmp	r0, #15
 801286a:	f100 0502 	add.w	r5, r0, #2
 801286e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012872:	bf08      	it	eq
 8012874:	2514      	moveq	r5, #20
 8012876:	436b      	muls	r3, r5
 8012878:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801287a:	f001 010f 	and.w	r1, r1, #15
 801287e:	3101      	adds	r1, #1
 8012880:	fbb3 f3f1 	udiv	r3, r3, r1
 8012884:	6851      	ldr	r1, [r2, #4]
 8012886:	6850      	ldr	r0, [r2, #4]
 8012888:	f3c1 4183 	ubfx	r1, r1, #18, #4
 801288c:	0080      	lsls	r0, r0, #2
 801288e:	d505      	bpl.n	801289c <rcu_clock_freq_get+0x8c>
 8012890:	f041 0110 	orr.w	r1, r1, #16
 8012894:	1c48      	adds	r0, r1, #1
 8012896:	e007      	b.n	80128a8 <rcu_clock_freq_get+0x98>
 8012898:	4b1e      	ldr	r3, [pc, #120]	; (8012914 <rcu_clock_freq_get+0x104>)
 801289a:	e7f3      	b.n	8012884 <rcu_clock_freq_get+0x74>
 801289c:	290f      	cmp	r1, #15
 801289e:	d0f9      	beq.n	8012894 <rcu_clock_freq_get+0x84>
 80128a0:	290d      	cmp	r1, #13
 80128a2:	f101 0002 	add.w	r0, r1, #2
 80128a6:	d01d      	beq.n	80128e4 <rcu_clock_freq_get+0xd4>
 80128a8:	4343      	muls	r3, r0
 80128aa:	6851      	ldr	r1, [r2, #4]
 80128ac:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80128b0:	3120      	adds	r1, #32
 80128b2:	4469      	add	r1, sp
 80128b4:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 80128b8:	fa23 f001 	lsr.w	r0, r3, r1
 80128bc:	6851      	ldr	r1, [r2, #4]
 80128be:	6852      	ldr	r2, [r2, #4]
 80128c0:	f3c1 2102 	ubfx	r1, r1, #8, #3
 80128c4:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 80128c8:	3120      	adds	r1, #32
 80128ca:	3220      	adds	r2, #32
 80128cc:	4469      	add	r1, sp
 80128ce:	446a      	add	r2, sp
 80128d0:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 80128d4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80128d8:	2c03      	cmp	r4, #3
 80128da:	d813      	bhi.n	8012904 <rcu_clock_freq_get+0xf4>
 80128dc:	e8df f004 	tbb	[pc, r4]
 80128e0:	100e0c0b 	andne	r0, lr, fp, lsl #24
 80128e4:	2006      	movs	r0, #6
 80128e6:	0859      	lsrs	r1, r3, #1
 80128e8:	fb00 1303 	mla	r3, r0, r3, r1
 80128ec:	e7dd      	b.n	80128aa <rcu_clock_freq_get+0x9a>
 80128ee:	4b08      	ldr	r3, [pc, #32]	; (8012910 <rcu_clock_freq_get+0x100>)
 80128f0:	e7db      	b.n	80128aa <rcu_clock_freq_get+0x9a>
 80128f2:	4b09      	ldr	r3, [pc, #36]	; (8012918 <rcu_clock_freq_get+0x108>)
 80128f4:	e7d9      	b.n	80128aa <rcu_clock_freq_get+0x9a>
 80128f6:	4618      	mov	r0, r3
 80128f8:	b009      	add	sp, #36	; 0x24
 80128fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128fc:	40c8      	lsrs	r0, r1
 80128fe:	e7fb      	b.n	80128f8 <rcu_clock_freq_get+0xe8>
 8012900:	40d0      	lsrs	r0, r2
 8012902:	e7f9      	b.n	80128f8 <rcu_clock_freq_get+0xe8>
 8012904:	2000      	movs	r0, #0
 8012906:	e7f7      	b.n	80128f8 <rcu_clock_freq_get+0xe8>
 8012908:	080140cc 	stmdaeq	r1, {r2, r3, r6, r7, lr}
 801290c:	40021000 	andmi	r1, r2, r0
 8012910:	017d7840 	cmneq	sp, r0, asr #16
 8012914:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8012918:	007a1200 	rsbseq	r1, sl, r0, lsl #4

0801291c <timer_deinit>:
 801291c:	b508      	push	{r3, lr}
 801291e:	4b2d      	ldr	r3, [pc, #180]	; (80129d4 <timer_deinit+0xb8>)
 8012920:	4298      	cmp	r0, r3
 8012922:	d048      	beq.n	80129b6 <timer_deinit+0x9a>
 8012924:	d816      	bhi.n	8012954 <timer_deinit+0x38>
 8012926:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801292a:	4298      	cmp	r0, r3
 801292c:	d03c      	beq.n	80129a8 <timer_deinit+0x8c>
 801292e:	d807      	bhi.n	8012940 <timer_deinit+0x24>
 8012930:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012934:	d02a      	beq.n	801298c <timer_deinit+0x70>
 8012936:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801293a:	4298      	cmp	r0, r3
 801293c:	d02d      	beq.n	801299a <timer_deinit+0x7e>
 801293e:	bd08      	pop	{r3, pc}
 8012940:	4b25      	ldr	r3, [pc, #148]	; (80129d8 <timer_deinit+0xbc>)
 8012942:	4298      	cmp	r0, r3
 8012944:	d1fb      	bne.n	801293e <timer_deinit+0x22>
 8012946:	f240 4003 	movw	r0, #1027	; 0x403
 801294a:	f7ff feb8 	bl	80126be <rcu_periph_reset_enable>
 801294e:	f240 4003 	movw	r0, #1027	; 0x403
 8012952:	e017      	b.n	8012984 <timer_deinit+0x68>
 8012954:	4b21      	ldr	r3, [pc, #132]	; (80129dc <timer_deinit+0xc0>)
 8012956:	4298      	cmp	r0, r3
 8012958:	d00e      	beq.n	8012978 <timer_deinit+0x5c>
 801295a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801295e:	4298      	cmp	r0, r3
 8012960:	d030      	beq.n	80129c4 <timer_deinit+0xa8>
 8012962:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8012966:	4298      	cmp	r0, r3
 8012968:	d1e9      	bne.n	801293e <timer_deinit+0x22>
 801296a:	f240 4005 	movw	r0, #1029	; 0x405
 801296e:	f7ff fea6 	bl	80126be <rcu_periph_reset_enable>
 8012972:	f240 4005 	movw	r0, #1029	; 0x405
 8012976:	e005      	b.n	8012984 <timer_deinit+0x68>
 8012978:	f240 300b 	movw	r0, #779	; 0x30b
 801297c:	f7ff fe9f 	bl	80126be <rcu_periph_reset_enable>
 8012980:	f240 300b 	movw	r0, #779	; 0x30b
 8012984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012988:	f7ff be9b 	b.w	80126c2 <rcu_periph_reset_disable>
 801298c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012990:	f7ff fe95 	bl	80126be <rcu_periph_reset_enable>
 8012994:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012998:	e7f4      	b.n	8012984 <timer_deinit+0x68>
 801299a:	f240 4001 	movw	r0, #1025	; 0x401
 801299e:	f7ff fe8e 	bl	80126be <rcu_periph_reset_enable>
 80129a2:	f240 4001 	movw	r0, #1025	; 0x401
 80129a6:	e7ed      	b.n	8012984 <timer_deinit+0x68>
 80129a8:	f240 4002 	movw	r0, #1026	; 0x402
 80129ac:	f7ff fe87 	bl	80126be <rcu_periph_reset_enable>
 80129b0:	f240 4002 	movw	r0, #1026	; 0x402
 80129b4:	e7e6      	b.n	8012984 <timer_deinit+0x68>
 80129b6:	f240 4004 	movw	r0, #1028	; 0x404
 80129ba:	f7ff fe80 	bl	80126be <rcu_periph_reset_enable>
 80129be:	f240 4004 	movw	r0, #1028	; 0x404
 80129c2:	e7df      	b.n	8012984 <timer_deinit+0x68>
 80129c4:	f240 300d 	movw	r0, #781	; 0x30d
 80129c8:	f7ff fe79 	bl	80126be <rcu_periph_reset_enable>
 80129cc:	f240 300d 	movw	r0, #781	; 0x30d
 80129d0:	e7d8      	b.n	8012984 <timer_deinit+0x68>
 80129d2:	bf00      	nop
 80129d4:	40001000 	andmi	r1, r0, r0
 80129d8:	40000c00 	andmi	r0, r0, r0, lsl #24
 80129dc:	40012c00 	andmi	r2, r1, r0, lsl #24

080129e0 <timer_init>:
 80129e0:	880b      	ldrh	r3, [r1, #0]
 80129e2:	6283      	str	r3, [r0, #40]	; 0x28
 80129e4:	4b26      	ldr	r3, [pc, #152]	; (8012a80 <timer_init+0xa0>)
 80129e6:	4298      	cmp	r0, r3
 80129e8:	d018      	beq.n	8012a1c <timer_init+0x3c>
 80129ea:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 80129ee:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80129f2:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 80129f6:	d011      	beq.n	8012a1c <timer_init+0x3c>
 80129f8:	4a22      	ldr	r2, [pc, #136]	; (8012a84 <timer_init+0xa4>)
 80129fa:	4290      	cmp	r0, r2
 80129fc:	d00e      	beq.n	8012a1c <timer_init+0x3c>
 80129fe:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8012a02:	4290      	cmp	r0, r2
 8012a04:	d00a      	beq.n	8012a1c <timer_init+0x3c>
 8012a06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012a0a:	4293      	cmp	r3, r2
 8012a0c:	d006      	beq.n	8012a1c <timer_init+0x3c>
 8012a0e:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d002      	beq.n	8012a1c <timer_init+0x3c>
 8012a16:	4b1c      	ldr	r3, [pc, #112]	; (8012a88 <timer_init+0xa8>)
 8012a18:	4298      	cmp	r0, r3
 8012a1a:	d10f      	bne.n	8012a3c <timer_init+0x5c>
 8012a1c:	6803      	ldr	r3, [r0, #0]
 8012a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a22:	6003      	str	r3, [r0, #0]
 8012a24:	884b      	ldrh	r3, [r1, #2]
 8012a26:	6802      	ldr	r2, [r0, #0]
 8012a28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	6003      	str	r3, [r0, #0]
 8012a30:	888b      	ldrh	r3, [r1, #4]
 8012a32:	6802      	ldr	r2, [r0, #0]
 8012a34:	f003 0310 	and.w	r3, r3, #16
 8012a38:	4313      	orrs	r3, r2
 8012a3a:	6003      	str	r3, [r0, #0]
 8012a3c:	688b      	ldr	r3, [r1, #8]
 8012a3e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8012a40:	4b12      	ldr	r3, [pc, #72]	; (8012a8c <timer_init+0xac>)
 8012a42:	4298      	cmp	r0, r3
 8012a44:	d003      	beq.n	8012a4e <timer_init+0x6e>
 8012a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012a4a:	4298      	cmp	r0, r3
 8012a4c:	d104      	bne.n	8012a58 <timer_init+0x78>
 8012a4e:	6943      	ldr	r3, [r0, #20]
 8012a50:	f043 0301 	orr.w	r3, r3, #1
 8012a54:	6143      	str	r3, [r0, #20]
 8012a56:	4770      	bx	lr
 8012a58:	6803      	ldr	r3, [r0, #0]
 8012a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012a5e:	6003      	str	r3, [r0, #0]
 8012a60:	898b      	ldrh	r3, [r1, #12]
 8012a62:	6802      	ldr	r2, [r0, #0]
 8012a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012a68:	4313      	orrs	r3, r2
 8012a6a:	6003      	str	r3, [r0, #0]
 8012a6c:	4b04      	ldr	r3, [pc, #16]	; (8012a80 <timer_init+0xa0>)
 8012a6e:	4298      	cmp	r0, r3
 8012a70:	d002      	beq.n	8012a78 <timer_init+0x98>
 8012a72:	4b04      	ldr	r3, [pc, #16]	; (8012a84 <timer_init+0xa4>)
 8012a74:	4298      	cmp	r0, r3
 8012a76:	d1ea      	bne.n	8012a4e <timer_init+0x6e>
 8012a78:	7b8b      	ldrb	r3, [r1, #14]
 8012a7a:	6303      	str	r3, [r0, #48]	; 0x30
 8012a7c:	e7e7      	b.n	8012a4e <timer_init+0x6e>
 8012a7e:	bf00      	nop
 8012a80:	40012c00 	andmi	r2, r1, r0, lsl #24
 8012a84:	40013400 	andmi	r3, r1, r0, lsl #8
 8012a88:	40002000 	andmi	r2, r0, r0
 8012a8c:	40001000 	andmi	r1, r0, r0

08012a90 <timer_enable>:
 8012a90:	6803      	ldr	r3, [r0, #0]
 8012a92:	f043 0301 	orr.w	r3, r3, #1
 8012a96:	6003      	str	r3, [r0, #0]
 8012a98:	4770      	bx	lr
	...

08012a9c <usart_deinit>:
 8012a9c:	b508      	push	{r3, lr}
 8012a9e:	4b1d      	ldr	r3, [pc, #116]	; (8012b14 <usart_deinit+0x78>)
 8012aa0:	4298      	cmp	r0, r3
 8012aa2:	d028      	beq.n	8012af6 <usart_deinit+0x5a>
 8012aa4:	d808      	bhi.n	8012ab8 <usart_deinit+0x1c>
 8012aa6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8012aaa:	4298      	cmp	r0, r3
 8012aac:	d015      	beq.n	8012ada <usart_deinit+0x3e>
 8012aae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012ab2:	4298      	cmp	r0, r3
 8012ab4:	d018      	beq.n	8012ae8 <usart_deinit+0x4c>
 8012ab6:	bd08      	pop	{r3, pc}
 8012ab8:	4b17      	ldr	r3, [pc, #92]	; (8012b18 <usart_deinit+0x7c>)
 8012aba:	4298      	cmp	r0, r3
 8012abc:	d022      	beq.n	8012b04 <usart_deinit+0x68>
 8012abe:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8012ac2:	4298      	cmp	r0, r3
 8012ac4:	d1f7      	bne.n	8012ab6 <usart_deinit+0x1a>
 8012ac6:	f240 300e 	movw	r0, #782	; 0x30e
 8012aca:	f7ff fdf8 	bl	80126be <rcu_periph_reset_enable>
 8012ace:	f240 300e 	movw	r0, #782	; 0x30e
 8012ad2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012ad6:	f7ff bdf4 	b.w	80126c2 <rcu_periph_reset_disable>
 8012ada:	f240 4011 	movw	r0, #1041	; 0x411
 8012ade:	f7ff fdee 	bl	80126be <rcu_periph_reset_enable>
 8012ae2:	f240 4011 	movw	r0, #1041	; 0x411
 8012ae6:	e7f4      	b.n	8012ad2 <usart_deinit+0x36>
 8012ae8:	f240 4012 	movw	r0, #1042	; 0x412
 8012aec:	f7ff fde7 	bl	80126be <rcu_periph_reset_enable>
 8012af0:	f240 4012 	movw	r0, #1042	; 0x412
 8012af4:	e7ed      	b.n	8012ad2 <usart_deinit+0x36>
 8012af6:	f240 4013 	movw	r0, #1043	; 0x413
 8012afa:	f7ff fde0 	bl	80126be <rcu_periph_reset_enable>
 8012afe:	f240 4013 	movw	r0, #1043	; 0x413
 8012b02:	e7e6      	b.n	8012ad2 <usart_deinit+0x36>
 8012b04:	f240 4014 	movw	r0, #1044	; 0x414
 8012b08:	f7ff fdd9 	bl	80126be <rcu_periph_reset_enable>
 8012b0c:	f240 4014 	movw	r0, #1044	; 0x414
 8012b10:	e7df      	b.n	8012ad2 <usart_deinit+0x36>
 8012b12:	bf00      	nop
 8012b14:	40004c00 	andmi	r4, r0, r0, lsl #24
 8012b18:	40005000 	andmi	r5, r0, r0

08012b1c <usart_baudrate_set>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4b11      	ldr	r3, [pc, #68]	; (8012b64 <usart_baudrate_set+0x48>)
 8012b20:	4604      	mov	r4, r0
 8012b22:	4298      	cmp	r0, r3
 8012b24:	460d      	mov	r5, r1
 8012b26:	d01b      	beq.n	8012b60 <usart_baudrate_set+0x44>
 8012b28:	d809      	bhi.n	8012b3e <usart_baudrate_set+0x22>
 8012b2a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8012b2e:	4298      	cmp	r0, r3
 8012b30:	d016      	beq.n	8012b60 <usart_baudrate_set+0x44>
 8012b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012b36:	4298      	cmp	r0, r3
 8012b38:	d012      	beq.n	8012b60 <usart_baudrate_set+0x44>
 8012b3a:	2000      	movs	r0, #0
 8012b3c:	e009      	b.n	8012b52 <usart_baudrate_set+0x36>
 8012b3e:	4b0a      	ldr	r3, [pc, #40]	; (8012b68 <usart_baudrate_set+0x4c>)
 8012b40:	4298      	cmp	r0, r3
 8012b42:	d00d      	beq.n	8012b60 <usart_baudrate_set+0x44>
 8012b44:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8012b48:	4298      	cmp	r0, r3
 8012b4a:	d1f6      	bne.n	8012b3a <usart_baudrate_set+0x1e>
 8012b4c:	2003      	movs	r0, #3
 8012b4e:	f7ff fe5f 	bl	8012810 <rcu_clock_freq_get>
 8012b52:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 8012b56:	fbb3 f1f5 	udiv	r1, r3, r5
 8012b5a:	b289      	uxth	r1, r1
 8012b5c:	60a1      	str	r1, [r4, #8]
 8012b5e:	bd38      	pop	{r3, r4, r5, pc}
 8012b60:	2002      	movs	r0, #2
 8012b62:	e7f4      	b.n	8012b4e <usart_baudrate_set+0x32>
 8012b64:	40004c00 	andmi	r4, r0, r0, lsl #24
 8012b68:	40005000 	andmi	r5, r0, r0

08012b6c <usart_parity_config>:
 8012b6c:	68c2      	ldr	r2, [r0, #12]
 8012b6e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8012b72:	60c2      	str	r2, [r0, #12]
 8012b74:	68c3      	ldr	r3, [r0, #12]
 8012b76:	430b      	orrs	r3, r1
 8012b78:	60c3      	str	r3, [r0, #12]
 8012b7a:	4770      	bx	lr

08012b7c <usart_word_length_set>:
 8012b7c:	68c2      	ldr	r2, [r0, #12]
 8012b7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012b82:	60c2      	str	r2, [r0, #12]
 8012b84:	68c3      	ldr	r3, [r0, #12]
 8012b86:	430b      	orrs	r3, r1
 8012b88:	60c3      	str	r3, [r0, #12]
 8012b8a:	4770      	bx	lr

08012b8c <usart_stop_bit_set>:
 8012b8c:	6902      	ldr	r2, [r0, #16]
 8012b8e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8012b92:	6102      	str	r2, [r0, #16]
 8012b94:	6903      	ldr	r3, [r0, #16]
 8012b96:	430b      	orrs	r3, r1
 8012b98:	6103      	str	r3, [r0, #16]
 8012b9a:	4770      	bx	lr

08012b9c <usart_transmit_config>:
 8012b9c:	68c3      	ldr	r3, [r0, #12]
 8012b9e:	f023 0308 	bic.w	r3, r3, #8
 8012ba2:	430b      	orrs	r3, r1
 8012ba4:	60c3      	str	r3, [r0, #12]
 8012ba6:	4770      	bx	lr

08012ba8 <usart_receive_config>:
 8012ba8:	68c3      	ldr	r3, [r0, #12]
 8012baa:	f023 0304 	bic.w	r3, r3, #4
 8012bae:	430b      	orrs	r3, r1
 8012bb0:	60c3      	str	r3, [r0, #12]
 8012bb2:	4770      	bx	lr

08012bb4 <usart_hardware_flow_rts_config>:
 8012bb4:	6943      	ldr	r3, [r0, #20]
 8012bb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012bba:	430b      	orrs	r3, r1
 8012bbc:	6143      	str	r3, [r0, #20]
 8012bbe:	4770      	bx	lr

08012bc0 <usart_hardware_flow_cts_config>:
 8012bc0:	6943      	ldr	r3, [r0, #20]
 8012bc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012bc6:	430b      	orrs	r3, r1
 8012bc8:	6143      	str	r3, [r0, #20]
 8012bca:	4770      	bx	lr

08012bcc <usart_flag_get>:
 8012bcc:	098b      	lsrs	r3, r1, #6
 8012bce:	5818      	ldr	r0, [r3, r0]
 8012bd0:	f001 011f 	and.w	r1, r1, #31
 8012bd4:	40c8      	lsrs	r0, r1
 8012bd6:	f000 0001 	and.w	r0, r0, #1
 8012bda:	4770      	bx	lr

08012bdc <emac_start>:
 8012bdc:	b510      	push	{r4, lr}
 8012bde:	4604      	mov	r4, r0
 8012be0:	f240 6002 	movw	r0, #1538	; 0x602
 8012be4:	f7ff fd4e 	bl	8012684 <rcu_periph_clock_enable>
 8012be8:	f240 6003 	movw	r0, #1539	; 0x603
 8012bec:	f7ff fd4a 	bl	8012684 <rcu_periph_clock_enable>
 8012bf0:	f240 6004 	movw	r0, #1540	; 0x604
 8012bf4:	f7ff fd46 	bl	8012684 <rcu_periph_clock_enable>
 8012bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bfc:	2203      	movs	r2, #3
 8012bfe:	2118      	movs	r1, #24
 8012c00:	4846      	ldr	r0, [pc, #280]	; (8012d1c <emac_start+0x140>)
 8012c02:	f7ff fcaf 	bl	8012564 <gpio_init>
 8012c06:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8012c0a:	f7ff fd3b 	bl	8012684 <rcu_periph_clock_enable>
 8012c0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8012c12:	f7ff fd63 	bl	80126dc <rcu_pll2_config>
 8012c16:	201c      	movs	r0, #28
 8012c18:	f7ff fdf8 	bl	801280c <rcu_osci_on>
 8012c1c:	201c      	movs	r0, #28
 8012c1e:	f7ff fd95 	bl	801274c <rcu_osci_stab_wait>
 8012c22:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8012c26:	f7ff fd4f 	bl	80126c8 <rcu_ckout0_config>
 8012c2a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8012c2e:	f7ff fd1d 	bl	801266c <gpio_ethernet_phy_select>
 8012c32:	2302      	movs	r3, #2
 8012c34:	2203      	movs	r2, #3
 8012c36:	2104      	movs	r1, #4
 8012c38:	4838      	ldr	r0, [pc, #224]	; (8012d1c <emac_start+0x140>)
 8012c3a:	f7ff fc93 	bl	8012564 <gpio_init>
 8012c3e:	2304      	movs	r3, #4
 8012c40:	2203      	movs	r2, #3
 8012c42:	2118      	movs	r1, #24
 8012c44:	4835      	ldr	r0, [pc, #212]	; (8012d1c <emac_start+0x140>)
 8012c46:	f7ff fc8d 	bl	8012564 <gpio_init>
 8012c4a:	2380      	movs	r3, #128	; 0x80
 8012c4c:	2203      	movs	r2, #3
 8012c4e:	2104      	movs	r1, #4
 8012c50:	4832      	ldr	r0, [pc, #200]	; (8012d1c <emac_start+0x140>)
 8012c52:	f7ff fc87 	bl	8012564 <gpio_init>
 8012c56:	2302      	movs	r3, #2
 8012c58:	2203      	movs	r2, #3
 8012c5a:	2118      	movs	r1, #24
 8012c5c:	4830      	ldr	r0, [pc, #192]	; (8012d20 <emac_start+0x144>)
 8012c5e:	f7ff fc81 	bl	8012564 <gpio_init>
 8012c62:	2310      	movs	r3, #16
 8012c64:	2203      	movs	r2, #3
 8012c66:	2104      	movs	r1, #4
 8012c68:	482d      	ldr	r0, [pc, #180]	; (8012d20 <emac_start+0x144>)
 8012c6a:	f7ff fc7b 	bl	8012564 <gpio_init>
 8012c6e:	2320      	movs	r3, #32
 8012c70:	2203      	movs	r2, #3
 8012c72:	2104      	movs	r1, #4
 8012c74:	482a      	ldr	r0, [pc, #168]	; (8012d20 <emac_start+0x144>)
 8012c76:	f7ff fc75 	bl	8012564 <gpio_init>
 8012c7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012c7e:	2203      	movs	r2, #3
 8012c80:	2118      	movs	r1, #24
 8012c82:	4828      	ldr	r0, [pc, #160]	; (8012d24 <emac_start+0x148>)
 8012c84:	f7ff fc6e 	bl	8012564 <gpio_init>
 8012c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c8c:	2203      	movs	r2, #3
 8012c8e:	2118      	movs	r1, #24
 8012c90:	4824      	ldr	r0, [pc, #144]	; (8012d24 <emac_start+0x148>)
 8012c92:	f7ff fc67 	bl	8012564 <gpio_init>
 8012c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012c9a:	2203      	movs	r2, #3
 8012c9c:	2118      	movs	r1, #24
 8012c9e:	4821      	ldr	r0, [pc, #132]	; (8012d24 <emac_start+0x148>)
 8012ca0:	f7ff fc60 	bl	8012564 <gpio_init>
 8012ca4:	f240 500e 	movw	r0, #1294	; 0x50e
 8012ca8:	f7ff fcec 	bl	8012684 <rcu_periph_clock_enable>
 8012cac:	f240 500f 	movw	r0, #1295	; 0x50f
 8012cb0:	f7ff fce8 	bl	8012684 <rcu_periph_clock_enable>
 8012cb4:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8012cb8:	f7ff fce4 	bl	8012684 <rcu_periph_clock_enable>
 8012cbc:	f001 f8c6 	bl	8013e4c <enet_deinit>
 8012cc0:	f000 fd20 	bl	8013704 <enet_software_reset>
 8012cc4:	b900      	cbnz	r0, 8012cc8 <emac_start+0xec>
 8012cc6:	e7fe      	b.n	8012cc6 <emac_start+0xea>
 8012cc8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012ccc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012cd0:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8012cd4:	f000 fe9a 	bl	8013a0c <enet_init>
 8012cd8:	4b13      	ldr	r3, [pc, #76]	; (8012d28 <emac_start+0x14c>)
 8012cda:	6018      	str	r0, [r3, #0]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	b903      	cbnz	r3, 8012ce2 <emac_start+0x106>
 8012ce0:	e7fe      	b.n	8012ce0 <emac_start+0x104>
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	f000 fb90 	bl	8013408 <mac_address_get>
 8012ce8:	4621      	mov	r1, r4
 8012cea:	2000      	movs	r0, #0
 8012cec:	f000 fdee 	bl	80138cc <enet_mac_address_set>
 8012cf0:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8012cf4:	f000 fd1a 	bl	801372c <enet_descriptors_chain_init>
 8012cf8:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8012cfc:	f000 fd16 	bl	801372c <enet_descriptors_chain_init>
 8012d00:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8012d04:	4809      	ldr	r0, [pc, #36]	; (8012d2c <emac_start+0x150>)
 8012d06:	f000 fddb 	bl	80138c0 <enet_transmit_checksum_config>
 8012d0a:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8012d0e:	4808      	ldr	r0, [pc, #32]	; (8012d30 <emac_start+0x154>)
 8012d10:	f000 fdd6 	bl	80138c0 <enet_transmit_checksum_config>
 8012d14:	f001 f812 	bl	8013d3c <enet_enable>
 8012d18:	2001      	movs	r0, #1
 8012d1a:	bd10      	pop	{r4, pc}
 8012d1c:	40010800 	andmi	r0, r1, r0, lsl #16
 8012d20:	40011000 	andmi	r1, r1, r0
 8012d24:	40010c00 	andmi	r0, r1, r0, lsl #24
 8012d28:	2000a9c8 	andcs	sl, r0, r8, asr #19
 8012d2c:	20015a1c 	andcs	r5, r1, ip, lsl sl
 8012d30:	20015a2c 	andcs	r5, r1, ip, lsr #20

08012d34 <emac_eth_recv>:
 8012d34:	b538      	push	{r3, r4, r5, lr}
 8012d36:	4605      	mov	r5, r0
 8012d38:	f001 f858 	bl	8013dec <enet_rxframe_size_get>
 8012d3c:	4604      	mov	r4, r0
 8012d3e:	b138      	cbz	r0, 8012d50 <emac_eth_recv+0x1c>
 8012d40:	4b05      	ldr	r3, [pc, #20]	; (8012d58 <emac_eth_recv+0x24>)
 8012d42:	2105      	movs	r1, #5
 8012d44:	6818      	ldr	r0, [r3, #0]
 8012d46:	f001 f800 	bl	8013d4a <enet_desc_information_get>
 8012d4a:	6028      	str	r0, [r5, #0]
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	bd38      	pop	{r3, r4, r5, pc}
 8012d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d54:	e7fb      	b.n	8012d4e <emac_eth_recv+0x1a>
 8012d56:	bf00      	nop
 8012d58:	200129d8 	ldrdcs	r2, [r1], -r8

08012d5c <emac_free_pkt>:
 8012d5c:	2100      	movs	r1, #0
 8012d5e:	4608      	mov	r0, r1
 8012d60:	f000 bd2c 	b.w	80137bc <enet_frame_receive>

08012d64 <emac_eth_send>:
 8012d64:	f000 bd6a 	b.w	801383c <enet_frame_transmit>

08012d68 <gd32_adc_init()>:
 8012d68:	b510      	push	{r4, lr}
 8012d6a:	f240 6009 	movw	r0, #1545	; 0x609
 8012d6e:	4c21      	ldr	r4, [pc, #132]	; (8012df4 <gd32_adc_init()+0x8c>)
 8012d70:	f7ff fc88 	bl	8012684 <rcu_periph_clock_enable>
 8012d74:	2005      	movs	r0, #5
 8012d76:	f7ff fcbd 	bl	80126f4 <rcu_adc_clock_config>
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012d82:	f000 fb63 	bl	801344c <adc_special_function_config>
 8012d86:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	2102      	movs	r1, #2
 8012d8e:	f000 fbfd 	bl	801358c <adc_external_trigger_source_config>
 8012d92:	2100      	movs	r1, #0
 8012d94:	4620      	mov	r0, r4
 8012d96:	f000 fb81 	bl	801349c <adc_data_alignment_config>
 8012d9a:	2000      	movs	r0, #0
 8012d9c:	f000 fb46 	bl	801342c <adc_mode_config>
 8012da0:	2202      	movs	r2, #2
 8012da2:	4620      	mov	r0, r4
 8012da4:	4611      	mov	r1, r2
 8012da6:	f000 fba5 	bl	80134f4 <adc_channel_length_config>
 8012daa:	4620      	mov	r0, r4
 8012dac:	2307      	movs	r3, #7
 8012dae:	2210      	movs	r2, #16
 8012db0:	2100      	movs	r1, #0
 8012db2:	f000 fbbc 	bl	801352e <adc_inserted_channel_config>
 8012db6:	2307      	movs	r3, #7
 8012db8:	4620      	mov	r0, r4
 8012dba:	2211      	movs	r2, #17
 8012dbc:	2101      	movs	r1, #1
 8012dbe:	f000 fbb6 	bl	801352e <adc_inserted_channel_config>
 8012dc2:	2201      	movs	r2, #1
 8012dc4:	2102      	movs	r1, #2
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	f000 fbf1 	bl	80135ae <adc_external_trigger_config>
 8012dcc:	f000 fb88 	bl	80134e0 <adc_tempsensor_vrefint_enable>
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	f000 fb6c 	bl	80134ae <adc_enable>
 8012dd6:	2100      	movs	r1, #0
 8012dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012ddc:	f000 fafc 	bl	80133d8 <udelay(unsigned int, unsigned int)>
 8012de0:	4620      	mov	r0, r4
 8012de2:	f000 fb6c 	bl	80134be <adc_calibration_enable>
 8012de6:	4620      	mov	r0, r4
 8012de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dec:	2102      	movs	r1, #2
 8012dee:	f000 bbf9 	b.w	80135e4 <adc_software_trigger_enable>
 8012df2:	bf00      	nop
 8012df4:	40012400 	andmi	r2, r1, r0, lsl #8

08012df8 <_stop() [clone .isra.0]>:
 8012df8:	b508      	push	{r3, lr}
 8012dfa:	4806      	ldr	r0, [pc, #24]	; (8012e14 <_stop() [clone .isra.0]+0x1c>)
 8012dfc:	f001 f8b6 	bl	8013f6c <i2c_stop_on_bus>
 8012e00:	f640 73ff 	movw	r3, #4095	; 0xfff
 8012e04:	4a04      	ldr	r2, [pc, #16]	; (8012e18 <_stop() [clone .isra.0]+0x20>)
 8012e06:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 8012e0a:	0589      	lsls	r1, r1, #22
 8012e0c:	d501      	bpl.n	8012e12 <_stop() [clone .isra.0]+0x1a>
 8012e0e:	3b01      	subs	r3, #1
 8012e10:	d1f9      	bne.n	8012e06 <_stop() [clone .isra.0]+0xe>
 8012e12:	bd08      	pop	{r3, pc}
 8012e14:	40005400 	andmi	r5, r0, r0, lsl #8
 8012e18:	40005000 	andmi	r5, r0, r0

08012e1c <gd32_i2c_begin()>:
 8012e1c:	b510      	push	{r4, lr}
 8012e1e:	f240 7015 	movw	r0, #1813	; 0x715
 8012e22:	f7ff fc2f 	bl	8012684 <rcu_periph_clock_enable>
 8012e26:	4c15      	ldr	r4, [pc, #84]	; (8012e7c <gd32_i2c_begin()+0x60>)
 8012e28:	f240 6003 	movw	r0, #1539	; 0x603
 8012e2c:	f7ff fc2a 	bl	8012684 <rcu_periph_clock_enable>
 8012e30:	f240 6003 	movw	r0, #1539	; 0x603
 8012e34:	f7ff fc26 	bl	8012684 <rcu_periph_clock_enable>
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e3e:	2203      	movs	r2, #3
 8012e40:	211c      	movs	r1, #28
 8012e42:	f7ff fb8f 	bl	8012564 <gpio_init>
 8012e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012e4a:	2203      	movs	r2, #3
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	211c      	movs	r1, #28
 8012e50:	f7ff fb88 	bl	8012564 <gpio_init>
 8012e54:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8012e58:	2101      	movs	r1, #1
 8012e5a:	2002      	movs	r0, #2
 8012e5c:	f7ff fbd6 	bl	801260c <gpio_pin_remap_config>
 8012e60:	4620      	mov	r0, r4
 8012e62:	4907      	ldr	r1, [pc, #28]	; (8012e80 <gd32_i2c_begin()+0x64>)
 8012e64:	2200      	movs	r2, #0
 8012e66:	f000 ffff 	bl	8013e68 <i2c_clock_config>
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	f001 f874 	bl	8013f58 <i2c_enable>
 8012e70:	4620      	mov	r0, r4
 8012e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e76:	2101      	movs	r1, #1
 8012e78:	f001 b854 	b.w	8013f24 <i2c_ack_config>
 8012e7c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8012e80:	00061a80 	andeq	r1, r6, r0, lsl #21

08012e84 <gd32_i2c_set_baudrate(unsigned int)>:
 8012e84:	4601      	mov	r1, r0
 8012e86:	2200      	movs	r2, #0
 8012e88:	4801      	ldr	r0, [pc, #4]	; (8012e90 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 8012e8a:	f000 bfed 	b.w	8013e68 <i2c_clock_config>
 8012e8e:	bf00      	nop
 8012e90:	40005400 	andmi	r5, r0, r0, lsl #8

08012e94 <gd32_i2c_set_address(unsigned char)>:
 8012e94:	4b01      	ldr	r3, [pc, #4]	; (8012e9c <gd32_i2c_set_address(unsigned char)+0x8>)
 8012e96:	0040      	lsls	r0, r0, #1
 8012e98:	7018      	strb	r0, [r3, #0]
 8012e9a:	4770      	bx	lr
 8012e9c:	2000a9cc 	andcs	sl, r0, ip, asr #19

08012ea0 <gd32_i2c_write(char const*, unsigned int)>:
 8012ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	460f      	mov	r7, r1
 8012ea6:	f640 75ff 	movw	r5, #4095	; 0xfff
 8012eaa:	4e2e      	ldr	r6, [pc, #184]	; (8012f64 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8012eac:	f240 6101 	movw	r1, #1537	; 0x601
 8012eb0:	4630      	mov	r0, r6
 8012eb2:	f001 f865 	bl	8013f80 <i2c_flag_get>
 8012eb6:	b138      	cbz	r0, 8012ec8 <gd32_i2c_write(char const*, unsigned int)+0x28>
 8012eb8:	3d01      	subs	r5, #1
 8012eba:	d1f7      	bne.n	8012eac <gd32_i2c_write(char const*, unsigned int)+0xc>
 8012ebc:	f7ff ff9c 	bl	8012df8 <_stop() [clone .isra.0]>
 8012ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ec4:	4240      	negs	r0, r0
 8012ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ec8:	4826      	ldr	r0, [pc, #152]	; (8012f64 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8012eca:	f001 f84a 	bl	8013f62 <i2c_start_on_bus>
 8012ece:	f640 75ff 	movw	r5, #4095	; 0xfff
 8012ed2:	4e24      	ldr	r6, [pc, #144]	; (8012f64 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8012ed4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8012ed8:	4630      	mov	r0, r6
 8012eda:	f001 f851 	bl	8013f80 <i2c_flag_get>
 8012ede:	bb68      	cbnz	r0, 8012f3c <gd32_i2c_write(char const*, unsigned int)+0x9c>
 8012ee0:	3d01      	subs	r5, #1
 8012ee2:	d1f7      	bne.n	8012ed4 <gd32_i2c_write(char const*, unsigned int)+0x34>
 8012ee4:	e7ea      	b.n	8012ebc <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8012ee6:	f240 5101 	movw	r1, #1281	; 0x501
 8012eea:	481e      	ldr	r0, [pc, #120]	; (8012f64 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8012eec:	f001 f850 	bl	8013f90 <i2c_flag_clear>
 8012ef0:	f640 75ff 	movw	r5, #4095	; 0xfff
 8012ef4:	4e1b      	ldr	r6, [pc, #108]	; (8012f64 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8012ef6:	f240 5107 	movw	r1, #1287	; 0x507
 8012efa:	4630      	mov	r0, r6
 8012efc:	f001 f840 	bl	8013f80 <i2c_flag_get>
 8012f00:	2801      	cmp	r0, #1
 8012f02:	d114      	bne.n	8012f2e <gd32_i2c_write(char const*, unsigned int)+0x8e>
 8012f04:	4e17      	ldr	r6, [pc, #92]	; (8012f64 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8012f06:	4427      	add	r7, r4
 8012f08:	42a7      	cmp	r7, r4
 8012f0a:	d013      	beq.n	8012f34 <gd32_i2c_write(char const*, unsigned int)+0x94>
 8012f0c:	4630      	mov	r0, r6
 8012f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f12:	f001 f830 	bl	8013f76 <i2c_data_transmit>
 8012f16:	f640 75ff 	movw	r5, #4095	; 0xfff
 8012f1a:	f240 5102 	movw	r1, #1282	; 0x502
 8012f1e:	4630      	mov	r0, r6
 8012f20:	f001 f82e 	bl	8013f80 <i2c_flag_get>
 8012f24:	2800      	cmp	r0, #0
 8012f26:	d1ef      	bne.n	8012f08 <gd32_i2c_write(char const*, unsigned int)+0x68>
 8012f28:	3d01      	subs	r5, #1
 8012f2a:	d1f6      	bne.n	8012f1a <gd32_i2c_write(char const*, unsigned int)+0x7a>
 8012f2c:	e7c6      	b.n	8012ebc <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8012f2e:	3d01      	subs	r5, #1
 8012f30:	d1e1      	bne.n	8012ef6 <gd32_i2c_write(char const*, unsigned int)+0x56>
 8012f32:	e7c3      	b.n	8012ebc <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8012f34:	f7ff ff60 	bl	8012df8 <_stop() [clone .isra.0]>
 8012f38:	2000      	movs	r0, #0
 8012f3a:	e7c3      	b.n	8012ec4 <gd32_i2c_write(char const*, unsigned int)+0x24>
 8012f3c:	4b0a      	ldr	r3, [pc, #40]	; (8012f68 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 8012f3e:	f06f 0201 	mvn.w	r2, #1
 8012f42:	7819      	ldrb	r1, [r3, #0]
 8012f44:	4807      	ldr	r0, [pc, #28]	; (8012f64 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8012f46:	f000 ffff 	bl	8013f48 <i2c_master_addressing>
 8012f4a:	f640 75ff 	movw	r5, #4095	; 0xfff
 8012f4e:	4e05      	ldr	r6, [pc, #20]	; (8012f64 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8012f50:	f240 5101 	movw	r1, #1281	; 0x501
 8012f54:	4630      	mov	r0, r6
 8012f56:	f001 f813 	bl	8013f80 <i2c_flag_get>
 8012f5a:	2800      	cmp	r0, #0
 8012f5c:	d1c3      	bne.n	8012ee6 <gd32_i2c_write(char const*, unsigned int)+0x46>
 8012f5e:	3d01      	subs	r5, #1
 8012f60:	d1f6      	bne.n	8012f50 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 8012f62:	e7ab      	b.n	8012ebc <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8012f64:	40005400 	andmi	r5, r0, r0, lsl #8
 8012f68:	2000a9cc 	andcs	sl, r0, ip, asr #19

08012f6c <gd32_i2c_read(char*, unsigned int)>:
 8012f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f70:	4680      	mov	r8, r0
 8012f72:	460c      	mov	r4, r1
 8012f74:	f640 76ff 	movw	r6, #4095	; 0xfff
 8012f78:	4f49      	ldr	r7, [pc, #292]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8012f7a:	f240 6101 	movw	r1, #1537	; 0x601
 8012f7e:	4638      	mov	r0, r7
 8012f80:	f000 fffe 	bl	8013f80 <i2c_flag_get>
 8012f84:	4605      	mov	r5, r0
 8012f86:	b128      	cbz	r0, 8012f94 <gd32_i2c_read(char*, unsigned int)+0x28>
 8012f88:	3e01      	subs	r6, #1
 8012f8a:	d1f6      	bne.n	8012f7a <gd32_i2c_read(char*, unsigned int)+0xe>
 8012f8c:	f7ff ff34 	bl	8012df8 <_stop() [clone .isra.0]>
 8012f90:	2504      	movs	r5, #4
 8012f92:	e082      	b.n	801309a <gd32_i2c_read(char*, unsigned int)+0x12e>
 8012f94:	2c02      	cmp	r4, #2
 8012f96:	d103      	bne.n	8012fa0 <gd32_i2c_read(char*, unsigned int)+0x34>
 8012f98:	4601      	mov	r1, r0
 8012f9a:	4841      	ldr	r0, [pc, #260]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8012f9c:	f000 ffcb 	bl	8013f36 <i2c_ackpos_config>
 8012fa0:	483f      	ldr	r0, [pc, #252]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8012fa2:	f000 ffde 	bl	8013f62 <i2c_start_on_bus>
 8012fa6:	f640 76ff 	movw	r6, #4095	; 0xfff
 8012faa:	4f3d      	ldr	r7, [pc, #244]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8012fac:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8012fb0:	4638      	mov	r0, r7
 8012fb2:	f000 ffe5 	bl	8013f80 <i2c_flag_get>
 8012fb6:	b910      	cbnz	r0, 8012fbe <gd32_i2c_read(char*, unsigned int)+0x52>
 8012fb8:	3e01      	subs	r6, #1
 8012fba:	d1f7      	bne.n	8012fac <gd32_i2c_read(char*, unsigned int)+0x40>
 8012fbc:	e7e6      	b.n	8012f8c <gd32_i2c_read(char*, unsigned int)+0x20>
 8012fbe:	4b39      	ldr	r3, [pc, #228]	; (80130a4 <gd32_i2c_read(char*, unsigned int)+0x138>)
 8012fc0:	2201      	movs	r2, #1
 8012fc2:	7819      	ldrb	r1, [r3, #0]
 8012fc4:	4836      	ldr	r0, [pc, #216]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8012fc6:	f000 ffbf 	bl	8013f48 <i2c_master_addressing>
 8012fca:	2c02      	cmp	r4, #2
 8012fcc:	d803      	bhi.n	8012fd6 <gd32_i2c_read(char*, unsigned int)+0x6a>
 8012fce:	2100      	movs	r1, #0
 8012fd0:	4833      	ldr	r0, [pc, #204]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8012fd2:	f000 ffa7 	bl	8013f24 <i2c_ack_config>
 8012fd6:	f640 76ff 	movw	r6, #4095	; 0xfff
 8012fda:	4f31      	ldr	r7, [pc, #196]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8012fdc:	f240 5101 	movw	r1, #1281	; 0x501
 8012fe0:	4638      	mov	r0, r7
 8012fe2:	f000 ffcd 	bl	8013f80 <i2c_flag_get>
 8012fe6:	b910      	cbnz	r0, 8012fee <gd32_i2c_read(char*, unsigned int)+0x82>
 8012fe8:	3e01      	subs	r6, #1
 8012fea:	d1f7      	bne.n	8012fdc <gd32_i2c_read(char*, unsigned int)+0x70>
 8012fec:	e7ce      	b.n	8012f8c <gd32_i2c_read(char*, unsigned int)+0x20>
 8012fee:	f240 5101 	movw	r1, #1281	; 0x501
 8012ff2:	482b      	ldr	r0, [pc, #172]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8012ff4:	f000 ffcc 	bl	8013f90 <i2c_flag_clear>
 8012ff8:	2c01      	cmp	r4, #1
 8012ffa:	d102      	bne.n	8013002 <gd32_i2c_read(char*, unsigned int)+0x96>
 8012ffc:	4828      	ldr	r0, [pc, #160]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8012ffe:	f000 ffb5 	bl	8013f6c <i2c_stop_on_bus>
 8013002:	f640 77ff 	movw	r7, #4095	; 0xfff
 8013006:	4e26      	ldr	r6, [pc, #152]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8013008:	b3ac      	cbz	r4, 8013076 <gd32_i2c_read(char*, unsigned int)+0x10a>
 801300a:	2c03      	cmp	r4, #3
 801300c:	d121      	bne.n	8013052 <gd32_i2c_read(char*, unsigned int)+0xe6>
 801300e:	f640 79ff 	movw	r9, #4095	; 0xfff
 8013012:	f240 5102 	movw	r1, #1282	; 0x502
 8013016:	4630      	mov	r0, r6
 8013018:	f000 ffb2 	bl	8013f80 <i2c_flag_get>
 801301c:	b918      	cbnz	r0, 8013026 <gd32_i2c_read(char*, unsigned int)+0xba>
 801301e:	f1b9 0901 	subs.w	r9, r9, #1
 8013022:	d1f6      	bne.n	8013012 <gd32_i2c_read(char*, unsigned int)+0xa6>
 8013024:	e7b2      	b.n	8012f8c <gd32_i2c_read(char*, unsigned int)+0x20>
 8013026:	2100      	movs	r1, #0
 8013028:	4630      	mov	r0, r6
 801302a:	f000 ff7b 	bl	8013f24 <i2c_ack_config>
 801302e:	f240 5106 	movw	r1, #1286	; 0x506
 8013032:	4630      	mov	r0, r6
 8013034:	f000 ffa4 	bl	8013f80 <i2c_flag_get>
 8013038:	b138      	cbz	r0, 801304a <gd32_i2c_read(char*, unsigned int)+0xde>
 801303a:	4630      	mov	r0, r6
 801303c:	f000 ff9d 	bl	8013f7a <i2c_data_receive>
 8013040:	f640 77ff 	movw	r7, #4095	; 0xfff
 8013044:	f808 0b01 	strb.w	r0, [r8], #1
 8013048:	3c01      	subs	r4, #1
 801304a:	3f01      	subs	r7, #1
 801304c:	2f00      	cmp	r7, #0
 801304e:	dcdb      	bgt.n	8013008 <gd32_i2c_read(char*, unsigned int)+0x9c>
 8013050:	e79c      	b.n	8012f8c <gd32_i2c_read(char*, unsigned int)+0x20>
 8013052:	2c02      	cmp	r4, #2
 8013054:	d1eb      	bne.n	801302e <gd32_i2c_read(char*, unsigned int)+0xc2>
 8013056:	f640 79ff 	movw	r9, #4095	; 0xfff
 801305a:	f240 5102 	movw	r1, #1282	; 0x502
 801305e:	4630      	mov	r0, r6
 8013060:	f000 ff8e 	bl	8013f80 <i2c_flag_get>
 8013064:	b918      	cbnz	r0, 801306e <gd32_i2c_read(char*, unsigned int)+0x102>
 8013066:	f1b9 0901 	subs.w	r9, r9, #1
 801306a:	d1f6      	bne.n	801305a <gd32_i2c_read(char*, unsigned int)+0xee>
 801306c:	e78e      	b.n	8012f8c <gd32_i2c_read(char*, unsigned int)+0x20>
 801306e:	4630      	mov	r0, r6
 8013070:	f000 ff7c 	bl	8013f6c <i2c_stop_on_bus>
 8013074:	e7db      	b.n	801302e <gd32_i2c_read(char*, unsigned int)+0xc2>
 8013076:	f640 73ff 	movw	r3, #4095	; 0xfff
 801307a:	4a0b      	ldr	r2, [pc, #44]	; (80130a8 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801307c:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 8013080:	0589      	lsls	r1, r1, #22
 8013082:	d502      	bpl.n	801308a <gd32_i2c_read(char*, unsigned int)+0x11e>
 8013084:	3b01      	subs	r3, #1
 8013086:	d1f9      	bne.n	801307c <gd32_i2c_read(char*, unsigned int)+0x110>
 8013088:	e782      	b.n	8012f90 <gd32_i2c_read(char*, unsigned int)+0x24>
 801308a:	2101      	movs	r1, #1
 801308c:	4804      	ldr	r0, [pc, #16]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 801308e:	f000 ff49 	bl	8013f24 <i2c_ack_config>
 8013092:	2101      	movs	r1, #1
 8013094:	4802      	ldr	r0, [pc, #8]	; (80130a0 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8013096:	f000 ff4e 	bl	8013f36 <i2c_ackpos_config>
 801309a:	4628      	mov	r0, r5
 801309c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130a0:	40005400 	andmi	r5, r0, r0, lsl #8
 80130a4:	2000a9cc 	andcs	sl, r0, ip, asr #19
 80130a8:	40005000 	andmi	r5, r0, r0

080130ac <gd32_spi_dma_begin()>:
 80130ac:	b530      	push	{r4, r5, lr}
 80130ae:	f240 6002 	movw	r0, #1538	; 0x602
 80130b2:	b089      	sub	sp, #36	; 0x24
 80130b4:	f7ff fae6 	bl	8012684 <rcu_periph_clock_enable>
 80130b8:	f240 6003 	movw	r0, #1539	; 0x603
 80130bc:	f7ff fae2 	bl	8012684 <rcu_periph_clock_enable>
 80130c0:	f240 700f 	movw	r0, #1807	; 0x70f
 80130c4:	f7ff fade 	bl	8012684 <rcu_periph_clock_enable>
 80130c8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80130cc:	f7ff fada 	bl	8012684 <rcu_periph_clock_enable>
 80130d0:	2338      	movs	r3, #56	; 0x38
 80130d2:	2203      	movs	r2, #3
 80130d4:	2118      	movs	r1, #24
 80130d6:	4827      	ldr	r0, [pc, #156]	; (8013174 <gd32_spi_dma_begin()+0xc8>)
 80130d8:	f7ff fa44 	bl	8012564 <gpio_init>
 80130dc:	4c26      	ldr	r4, [pc, #152]	; (8013178 <gd32_spi_dma_begin()+0xcc>)
 80130de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80130e2:	2203      	movs	r2, #3
 80130e4:	2118      	movs	r1, #24
 80130e6:	4825      	ldr	r0, [pc, #148]	; (801317c <gd32_spi_dma_begin()+0xd0>)
 80130e8:	f7ff fa3c 	bl	8012564 <gpio_init>
 80130ec:	2101      	movs	r1, #1
 80130ee:	4824      	ldr	r0, [pc, #144]	; (8013180 <gd32_spi_dma_begin()+0xd4>)
 80130f0:	f7ff fa8c 	bl	801260c <gpio_pin_remap_config>
 80130f4:	4620      	mov	r0, r4
 80130f6:	f000 ffca 	bl	801408e <i2s_disable>
 80130fa:	2300      	movs	r3, #0
 80130fc:	4620      	mov	r0, r4
 80130fe:	461a      	mov	r2, r3
 8013100:	4920      	ldr	r1, [pc, #128]	; (8013184 <gd32_spi_dma_begin()+0xd8>)
 8013102:	f000 ff67 	bl	8013fd4 <i2s_psc_config>
 8013106:	2300      	movs	r3, #0
 8013108:	2210      	movs	r2, #16
 801310a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801310e:	4620      	mov	r0, r4
 8013110:	f000 ff51 	bl	8013fb6 <i2s_init>
 8013114:	4620      	mov	r0, r4
 8013116:	f000 ffb5 	bl	8014084 <i2s_enable>
 801311a:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 801311e:	f240 5001 	movw	r0, #1281	; 0x501
 8013122:	f7ff faaf 	bl	8012684 <rcu_periph_clock_enable>
 8013126:	4620      	mov	r0, r4
 8013128:	2101      	movs	r1, #1
 801312a:	f000 fa69 	bl	8013600 <dma_deinit>
 801312e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013132:	2501      	movs	r5, #1
 8013134:	9304      	str	r3, [sp, #16]
 8013136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801313a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801313e:	4912      	ldr	r1, [pc, #72]	; (8013188 <gd32_spi_dma_begin()+0xdc>)
 8013140:	4620      	mov	r0, r4
 8013142:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013146:	9206      	str	r2, [sp, #24]
 8013148:	4629      	mov	r1, r5
 801314a:	aa01      	add	r2, sp, #4
 801314c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013150:	f88d 501e 	strb.w	r5, [sp, #30]
 8013154:	f000 fa70 	bl	8013638 <dma_init>
 8013158:	4629      	mov	r1, r5
 801315a:	4620      	mov	r0, r4
 801315c:	f000 faa6 	bl	80136ac <dma_circulation_disable>
 8013160:	4629      	mov	r1, r5
 8013162:	4620      	mov	r0, r4
 8013164:	f000 fab2 	bl	80136cc <dma_memory_to_memory_disable>
 8013168:	2200      	movs	r2, #0
 801316a:	4b08      	ldr	r3, [pc, #32]	; (801318c <gd32_spi_dma_begin()+0xe0>)
 801316c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8013170:	b009      	add	sp, #36	; 0x24
 8013172:	bd30      	pop	{r4, r5, pc}
 8013174:	40010c00 	andmi	r0, r1, r0, lsl #24
 8013178:	40003c00 	andmi	r3, r0, r0, lsl #24
 801317c:	40010800 	andmi	r0, r1, r0, lsl #16
 8013180:	00300400 	eorseq	r0, r0, r0, lsl #8
 8013184:	00030d40 	andeq	r0, r3, r0, asr #26
 8013188:	40003c0c 	andmi	r3, r0, ip, lsl #24
 801318c:	40020000 	andmi	r0, r2, r0

08013190 <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8013190:	b538      	push	{r3, r4, r5, lr}
 8013192:	4c08      	ldr	r4, [pc, #32]	; (80131b4 <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 8013194:	4605      	mov	r5, r0
 8013196:	4620      	mov	r0, r4
 8013198:	f000 ff79 	bl	801408e <i2s_disable>
 801319c:	2300      	movs	r3, #0
 801319e:	4620      	mov	r0, r4
 80131a0:	461a      	mov	r2, r3
 80131a2:	0969      	lsrs	r1, r5, #5
 80131a4:	f000 ff16 	bl	8013fd4 <i2s_psc_config>
 80131a8:	4620      	mov	r0, r4
 80131aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131ae:	f000 bf69 	b.w	8014084 <i2s_enable>
 80131b2:	bf00      	nop
 80131b4:	40003c00 	andmi	r3, r0, r0, lsl #24

080131b8 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 80131b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80131bc:	6003      	str	r3, [r0, #0]
 80131be:	4801      	ldr	r0, [pc, #4]	; (80131c4 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 80131c0:	4770      	bx	lr
 80131c2:	bf00      	nop
 80131c4:	2000a9d0 	ldrdcs	sl, [r0], -r0

080131c8 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 80131c8:	4a0a      	ldr	r2, [pc, #40]	; (80131f4 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 80131ca:	3101      	adds	r1, #1
 80131cc:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 80131d0:	f3c1 014f 	ubfx	r1, r1, #1, #16
 80131d4:	f023 0301 	bic.w	r3, r3, #1
 80131d8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80131dc:	f043 0301 	orr.w	r3, r3, #1
 80131e0:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 80131e4:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 80131e8:	4803      	ldr	r0, [pc, #12]	; (80131f8 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 80131ea:	2100      	movs	r1, #0
 80131ec:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 80131f0:	f000 bf52 	b.w	8014098 <spi_dma_enable>
 80131f4:	40020000 	andmi	r0, r2, r0
 80131f8:	40003c00 	andmi	r3, r0, r0, lsl #24

080131fc <gd32_spi_dma_tx_is_active()>:
 80131fc:	4b03      	ldr	r3, [pc, #12]	; (801320c <gd32_spi_dma_tx_is_active()+0x10>)
 80131fe:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8013202:	3800      	subs	r0, #0
 8013204:	bf18      	it	ne
 8013206:	2001      	movne	r0, #1
 8013208:	4770      	bx	lr
 801320a:	bf00      	nop
 801320c:	40020000 	andmi	r0, r2, r0

08013210 <gd32_uart_begin>:
 8013210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013212:	4604      	mov	r4, r0
 8013214:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8013218:	461d      	mov	r5, r3
 801321a:	460f      	mov	r7, r1
 801321c:	4616      	mov	r6, r2
 801321e:	f7ff fa31 	bl	8012684 <rcu_periph_clock_enable>
 8013222:	4b5c      	ldr	r3, [pc, #368]	; (8013394 <gd32_uart_begin+0x184>)
 8013224:	429c      	cmp	r4, r3
 8013226:	f000 8083 	beq.w	8013330 <gd32_uart_begin+0x120>
 801322a:	d857      	bhi.n	80132dc <gd32_uart_begin+0xcc>
 801322c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013230:	429c      	cmp	r4, r3
 8013232:	d06d      	beq.n	8013310 <gd32_uart_begin+0x100>
 8013234:	f240 7012 	movw	r0, #1810	; 0x712
 8013238:	f7ff fa24 	bl	8012684 <rcu_periph_clock_enable>
 801323c:	f240 6004 	movw	r0, #1540	; 0x604
 8013240:	f7ff fa20 	bl	8012684 <rcu_periph_clock_enable>
 8013244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013248:	2203      	movs	r2, #3
 801324a:	2118      	movs	r1, #24
 801324c:	4852      	ldr	r0, [pc, #328]	; (8013398 <gd32_uart_begin+0x188>)
 801324e:	f7ff f989 	bl	8012564 <gpio_init>
 8013252:	2104      	movs	r1, #4
 8013254:	4850      	ldr	r0, [pc, #320]	; (8013398 <gd32_uart_begin+0x188>)
 8013256:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801325a:	2203      	movs	r2, #3
 801325c:	f7ff f982 	bl	8012564 <gpio_init>
 8013260:	2101      	movs	r1, #1
 8013262:	484e      	ldr	r0, [pc, #312]	; (801339c <gd32_uart_begin+0x18c>)
 8013264:	f7ff f9d2 	bl	801260c <gpio_pin_remap_config>
 8013268:	4620      	mov	r0, r4
 801326a:	f7ff fc17 	bl	8012a9c <usart_deinit>
 801326e:	68e3      	ldr	r3, [r4, #12]
 8013270:	4639      	mov	r1, r7
 8013272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013276:	60e3      	str	r3, [r4, #12]
 8013278:	4620      	mov	r0, r4
 801327a:	f7ff fc4f 	bl	8012b1c <usart_baudrate_set>
 801327e:	2e09      	cmp	r6, #9
 8013280:	bf0c      	ite	eq
 8013282:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
 8013286:	2100      	movne	r1, #0
 8013288:	4620      	mov	r0, r4
 801328a:	f7ff fc77 	bl	8012b7c <usart_word_length_set>
 801328e:	9b06      	ldr	r3, [sp, #24]
 8013290:	4620      	mov	r0, r4
 8013292:	2b02      	cmp	r3, #2
 8013294:	bf0c      	ite	eq
 8013296:	f44f 5100 	moveq.w	r1, #8192	; 0x2000
 801329a:	2100      	movne	r1, #0
 801329c:	f7ff fc76 	bl	8012b8c <usart_stop_bit_set>
 80132a0:	2d01      	cmp	r5, #1
 80132a2:	d072      	beq.n	801338a <gd32_uart_begin+0x17a>
 80132a4:	2d02      	cmp	r5, #2
 80132a6:	d173      	bne.n	8013390 <gd32_uart_begin+0x180>
 80132a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80132ac:	4620      	mov	r0, r4
 80132ae:	f7ff fc5d 	bl	8012b6c <usart_parity_config>
 80132b2:	2100      	movs	r1, #0
 80132b4:	4620      	mov	r0, r4
 80132b6:	f7ff fc7d 	bl	8012bb4 <usart_hardware_flow_rts_config>
 80132ba:	2100      	movs	r1, #0
 80132bc:	4620      	mov	r0, r4
 80132be:	f7ff fc7f 	bl	8012bc0 <usart_hardware_flow_cts_config>
 80132c2:	2104      	movs	r1, #4
 80132c4:	4620      	mov	r0, r4
 80132c6:	f7ff fc6f 	bl	8012ba8 <usart_receive_config>
 80132ca:	2108      	movs	r1, #8
 80132cc:	4620      	mov	r0, r4
 80132ce:	f7ff fc65 	bl	8012b9c <usart_transmit_config>
 80132d2:	68e3      	ldr	r3, [r4, #12]
 80132d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80132d8:	60e3      	str	r3, [r4, #12]
 80132da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132dc:	4b30      	ldr	r3, [pc, #192]	; (80133a0 <gd32_uart_begin+0x190>)
 80132de:	429c      	cmp	r4, r3
 80132e0:	d03b      	beq.n	801335a <gd32_uart_begin+0x14a>
 80132e2:	f240 600e 	movw	r0, #1550	; 0x60e
 80132e6:	f7ff f9cd 	bl	8012684 <rcu_periph_clock_enable>
 80132ea:	f240 6002 	movw	r0, #1538	; 0x602
 80132ee:	f7ff f9c9 	bl	8012684 <rcu_periph_clock_enable>
 80132f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132f6:	2203      	movs	r2, #3
 80132f8:	2118      	movs	r1, #24
 80132fa:	482a      	ldr	r0, [pc, #168]	; (80133a4 <gd32_uart_begin+0x194>)
 80132fc:	f7ff f932 	bl	8012564 <gpio_init>
 8013300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013304:	2203      	movs	r2, #3
 8013306:	2104      	movs	r1, #4
 8013308:	4826      	ldr	r0, [pc, #152]	; (80133a4 <gd32_uart_begin+0x194>)
 801330a:	f7ff f92b 	bl	8012564 <gpio_init>
 801330e:	e7ab      	b.n	8013268 <gd32_uart_begin+0x58>
 8013310:	f240 7011 	movw	r0, #1809	; 0x711
 8013314:	f7ff f9b6 	bl	8012684 <rcu_periph_clock_enable>
 8013318:	f240 6002 	movw	r0, #1538	; 0x602
 801331c:	f7ff f9b2 	bl	8012684 <rcu_periph_clock_enable>
 8013320:	2304      	movs	r3, #4
 8013322:	2203      	movs	r2, #3
 8013324:	2118      	movs	r1, #24
 8013326:	481f      	ldr	r0, [pc, #124]	; (80133a4 <gd32_uart_begin+0x194>)
 8013328:	f7ff f91c 	bl	8012564 <gpio_init>
 801332c:	2308      	movs	r3, #8
 801332e:	e7e9      	b.n	8013304 <gd32_uart_begin+0xf4>
 8013330:	f240 7013 	movw	r0, #1811	; 0x713
 8013334:	f7ff f9a6 	bl	8012684 <rcu_periph_clock_enable>
 8013338:	f240 6004 	movw	r0, #1540	; 0x604
 801333c:	f7ff f9a2 	bl	8012684 <rcu_periph_clock_enable>
 8013340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013344:	2203      	movs	r2, #3
 8013346:	2118      	movs	r1, #24
 8013348:	4813      	ldr	r0, [pc, #76]	; (8013398 <gd32_uart_begin+0x188>)
 801334a:	f7ff f90b 	bl	8012564 <gpio_init>
 801334e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013352:	2203      	movs	r2, #3
 8013354:	2104      	movs	r1, #4
 8013356:	4810      	ldr	r0, [pc, #64]	; (8013398 <gd32_uart_begin+0x188>)
 8013358:	e7d7      	b.n	801330a <gd32_uart_begin+0xfa>
 801335a:	f240 7014 	movw	r0, #1812	; 0x714
 801335e:	f7ff f991 	bl	8012684 <rcu_periph_clock_enable>
 8013362:	f240 6004 	movw	r0, #1540	; 0x604
 8013366:	f7ff f98d 	bl	8012684 <rcu_periph_clock_enable>
 801336a:	f240 6005 	movw	r0, #1541	; 0x605
 801336e:	f7ff f989 	bl	8012684 <rcu_periph_clock_enable>
 8013372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013376:	2203      	movs	r2, #3
 8013378:	2118      	movs	r1, #24
 801337a:	4807      	ldr	r0, [pc, #28]	; (8013398 <gd32_uart_begin+0x188>)
 801337c:	f7ff f8f2 	bl	8012564 <gpio_init>
 8013380:	2304      	movs	r3, #4
 8013382:	2203      	movs	r2, #3
 8013384:	4619      	mov	r1, r3
 8013386:	4808      	ldr	r0, [pc, #32]	; (80133a8 <gd32_uart_begin+0x198>)
 8013388:	e7bf      	b.n	801330a <gd32_uart_begin+0xfa>
 801338a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801338e:	e78d      	b.n	80132ac <gd32_uart_begin+0x9c>
 8013390:	2100      	movs	r1, #0
 8013392:	e78b      	b.n	80132ac <gd32_uart_begin+0x9c>
 8013394:	40004c00 	andmi	r4, r0, r0, lsl #24
 8013398:	40011000 	andmi	r1, r1, r0
 801339c:	00140010 	andseq	r0, r4, r0, lsl r0
 80133a0:	40005000 	andmi	r5, r0, r0
 80133a4:	40010800 	andmi	r0, r1, r0, lsl #16
 80133a8:	40011400 	andmi	r1, r1, r0, lsl #8

080133ac <micros_init()>:
 80133ac:	4770      	bx	lr
	...

080133b0 <udelay_init()>:
 80133b0:	4a07      	ldr	r2, [pc, #28]	; (80133d0 <udelay_init()+0x20>)
 80133b2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80133b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80133ba:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80133be:	2200      	movs	r2, #0
 80133c0:	4b04      	ldr	r3, [pc, #16]	; (80133d4 <udelay_init()+0x24>)
 80133c2:	605a      	str	r2, [r3, #4]
 80133c4:	681a      	ldr	r2, [r3, #0]
 80133c6:	f042 0201 	orr.w	r2, r2, #1
 80133ca:	601a      	str	r2, [r3, #0]
 80133cc:	4770      	bx	lr
 80133ce:	bf00      	nop
 80133d0:	e000ed00 	and	lr, r0, r0, lsl #26
 80133d4:	e0001000 	and	r1, r0, r0

080133d8 <udelay(unsigned int, unsigned int)>:
 80133d8:	236c      	movs	r3, #108	; 0x6c
 80133da:	b510      	push	{r4, lr}
 80133dc:	4358      	muls	r0, r3
 80133de:	b909      	cbnz	r1, 80133e4 <udelay(unsigned int, unsigned int)+0xc>
 80133e0:	4b08      	ldr	r3, [pc, #32]	; (8013404 <udelay(unsigned int, unsigned int)+0x2c>)
 80133e2:	6859      	ldr	r1, [r3, #4]
 80133e4:	2300      	movs	r3, #0
 80133e6:	4c07      	ldr	r4, [pc, #28]	; (8013404 <udelay(unsigned int, unsigned int)+0x2c>)
 80133e8:	6862      	ldr	r2, [r4, #4]
 80133ea:	4291      	cmp	r1, r2
 80133ec:	d0fc      	beq.n	80133e8 <udelay(unsigned int, unsigned int)+0x10>
 80133ee:	bf28      	it	cs
 80133f0:	f103 33ff 	addcs.w	r3, r3, #4294967295	; 0xffffffff
 80133f4:	1a5b      	subs	r3, r3, r1
 80133f6:	4413      	add	r3, r2
 80133f8:	4283      	cmp	r3, r0
 80133fa:	d300      	bcc.n	80133fe <udelay(unsigned int, unsigned int)+0x26>
 80133fc:	bd10      	pop	{r4, pc}
 80133fe:	4611      	mov	r1, r2
 8013400:	e7f2      	b.n	80133e8 <udelay(unsigned int, unsigned int)+0x10>
 8013402:	bf00      	nop
 8013404:	e0001000 	and	r1, r0, r0

08013408 <mac_address_get>:
 8013408:	2102      	movs	r1, #2
 801340a:	4a07      	ldr	r2, [pc, #28]	; (8013428 <mac_address_get+0x20>)
 801340c:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8013410:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8013414:	7001      	strb	r1, [r0, #0]
 8013416:	7042      	strb	r2, [r0, #1]
 8013418:	0e1a      	lsrs	r2, r3, #24
 801341a:	7082      	strb	r2, [r0, #2]
 801341c:	0c1a      	lsrs	r2, r3, #16
 801341e:	70c2      	strb	r2, [r0, #3]
 8013420:	0a1a      	lsrs	r2, r3, #8
 8013422:	7102      	strb	r2, [r0, #4]
 8013424:	7143      	strb	r3, [r0, #5]
 8013426:	4770      	bx	lr
 8013428:	1ffff000 	svcne	0x00fff000

0801342c <adc_mode_config>:
 801342c:	4b06      	ldr	r3, [pc, #24]	; (8013448 <adc_mode_config+0x1c>)
 801342e:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 8013432:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 8013436:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 801343a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801343e:	4302      	orrs	r2, r0
 8013440:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8013444:	4770      	bx	lr
 8013446:	bf00      	nop
 8013448:	40012000 	andmi	r2, r1, r0

0801344c <adc_special_function_config>:
 801344c:	b510      	push	{r4, lr}
 801344e:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8013452:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 8013456:	f001 0102 	and.w	r1, r1, #2
 801345a:	b17a      	cbz	r2, 801347c <adc_special_function_config+0x30>
 801345c:	b11b      	cbz	r3, 8013466 <adc_special_function_config+0x1a>
 801345e:	6843      	ldr	r3, [r0, #4]
 8013460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013464:	6043      	str	r3, [r0, #4]
 8013466:	b11c      	cbz	r4, 8013470 <adc_special_function_config+0x24>
 8013468:	6843      	ldr	r3, [r0, #4]
 801346a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801346e:	6043      	str	r3, [r0, #4]
 8013470:	b119      	cbz	r1, 801347a <adc_special_function_config+0x2e>
 8013472:	6883      	ldr	r3, [r0, #8]
 8013474:	f043 0302 	orr.w	r3, r3, #2
 8013478:	6083      	str	r3, [r0, #8]
 801347a:	bd10      	pop	{r4, pc}
 801347c:	b11b      	cbz	r3, 8013486 <adc_special_function_config+0x3a>
 801347e:	6843      	ldr	r3, [r0, #4]
 8013480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013484:	6043      	str	r3, [r0, #4]
 8013486:	b11c      	cbz	r4, 8013490 <adc_special_function_config+0x44>
 8013488:	6843      	ldr	r3, [r0, #4]
 801348a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801348e:	6043      	str	r3, [r0, #4]
 8013490:	2900      	cmp	r1, #0
 8013492:	d0f2      	beq.n	801347a <adc_special_function_config+0x2e>
 8013494:	6883      	ldr	r3, [r0, #8]
 8013496:	f023 0302 	bic.w	r3, r3, #2
 801349a:	e7ed      	b.n	8013478 <adc_special_function_config+0x2c>

0801349c <adc_data_alignment_config>:
 801349c:	6883      	ldr	r3, [r0, #8]
 801349e:	b119      	cbz	r1, 80134a8 <adc_data_alignment_config+0xc>
 80134a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80134a4:	6083      	str	r3, [r0, #8]
 80134a6:	4770      	bx	lr
 80134a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80134ac:	e7fa      	b.n	80134a4 <adc_data_alignment_config+0x8>

080134ae <adc_enable>:
 80134ae:	6883      	ldr	r3, [r0, #8]
 80134b0:	07db      	lsls	r3, r3, #31
 80134b2:	bf5e      	ittt	pl
 80134b4:	6883      	ldrpl	r3, [r0, #8]
 80134b6:	f043 0301 	orrpl.w	r3, r3, #1
 80134ba:	6083      	strpl	r3, [r0, #8]
 80134bc:	4770      	bx	lr

080134be <adc_calibration_enable>:
 80134be:	6883      	ldr	r3, [r0, #8]
 80134c0:	f100 0208 	add.w	r2, r0, #8
 80134c4:	f043 0308 	orr.w	r3, r3, #8
 80134c8:	6083      	str	r3, [r0, #8]
 80134ca:	6813      	ldr	r3, [r2, #0]
 80134cc:	0719      	lsls	r1, r3, #28
 80134ce:	d4fc      	bmi.n	80134ca <adc_calibration_enable+0xc>
 80134d0:	6883      	ldr	r3, [r0, #8]
 80134d2:	f043 0304 	orr.w	r3, r3, #4
 80134d6:	6083      	str	r3, [r0, #8]
 80134d8:	6813      	ldr	r3, [r2, #0]
 80134da:	075b      	lsls	r3, r3, #29
 80134dc:	d4fc      	bmi.n	80134d8 <adc_calibration_enable+0x1a>
 80134de:	4770      	bx	lr

080134e0 <adc_tempsensor_vrefint_enable>:
 80134e0:	4a03      	ldr	r2, [pc, #12]	; (80134f0 <adc_tempsensor_vrefint_enable+0x10>)
 80134e2:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 80134e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80134ea:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 80134ee:	4770      	bx	lr
 80134f0:	40012000 	andmi	r2, r1, r0

080134f4 <adc_channel_length_config>:
 80134f4:	2901      	cmp	r1, #1
 80134f6:	d002      	beq.n	80134fe <adc_channel_length_config+0xa>
 80134f8:	2902      	cmp	r1, #2
 80134fa:	d00c      	beq.n	8013516 <adc_channel_length_config+0x22>
 80134fc:	4770      	bx	lr
 80134fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8013500:	3a01      	subs	r2, #1
 8013502:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013506:	62c3      	str	r3, [r0, #44]	; 0x2c
 8013508:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801350a:	0512      	lsls	r2, r2, #20
 801350c:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8013510:	431a      	orrs	r2, r3
 8013512:	62c2      	str	r2, [r0, #44]	; 0x2c
 8013514:	4770      	bx	lr
 8013516:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013518:	3a01      	subs	r2, #1
 801351a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801351e:	6383      	str	r3, [r0, #56]	; 0x38
 8013520:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8013522:	0512      	lsls	r2, r2, #20
 8013524:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8013528:	431a      	orrs	r2, r3
 801352a:	6382      	str	r2, [r0, #56]	; 0x38
 801352c:	4770      	bx	lr

0801352e <adc_inserted_channel_config>:
 801352e:	b530      	push	{r4, r5, lr}
 8013530:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8013532:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8013534:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8013538:	1a61      	subs	r1, r4, r1
 801353a:	f06f 0404 	mvn.w	r4, #4
 801353e:	4361      	muls	r1, r4
 8013540:	241f      	movs	r4, #31
 8013542:	310f      	adds	r1, #15
 8013544:	408c      	lsls	r4, r1
 8013546:	ea25 0504 	bic.w	r5, r5, r4
 801354a:	fa02 f101 	lsl.w	r1, r2, r1
 801354e:	4329      	orrs	r1, r5
 8013550:	2a09      	cmp	r2, #9
 8013552:	6381      	str	r1, [r0, #56]	; 0x38
 8013554:	d80b      	bhi.n	801356e <adc_inserted_channel_config+0x40>
 8013556:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801355a:	2207      	movs	r2, #7
 801355c:	6904      	ldr	r4, [r0, #16]
 801355e:	408a      	lsls	r2, r1
 8013560:	ea24 0402 	bic.w	r4, r4, r2
 8013564:	fa03 f201 	lsl.w	r2, r3, r1
 8013568:	4322      	orrs	r2, r4
 801356a:	6102      	str	r2, [r0, #16]
 801356c:	bd30      	pop	{r4, r5, pc}
 801356e:	2a11      	cmp	r2, #17
 8013570:	d8fc      	bhi.n	801356c <adc_inserted_channel_config+0x3e>
 8013572:	2407      	movs	r4, #7
 8013574:	3a0a      	subs	r2, #10
 8013576:	68c1      	ldr	r1, [r0, #12]
 8013578:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801357c:	4094      	lsls	r4, r2
 801357e:	ea21 0104 	bic.w	r1, r1, r4
 8013582:	fa03 f202 	lsl.w	r2, r3, r2
 8013586:	430a      	orrs	r2, r1
 8013588:	60c2      	str	r2, [r0, #12]
 801358a:	e7ef      	b.n	801356c <adc_inserted_channel_config+0x3e>

0801358c <adc_external_trigger_source_config>:
 801358c:	2901      	cmp	r1, #1
 801358e:	d002      	beq.n	8013596 <adc_external_trigger_source_config+0xa>
 8013590:	2902      	cmp	r1, #2
 8013592:	d008      	beq.n	80135a6 <adc_external_trigger_source_config+0x1a>
 8013594:	4770      	bx	lr
 8013596:	6883      	ldr	r3, [r0, #8]
 8013598:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 801359c:	6083      	str	r3, [r0, #8]
 801359e:	6883      	ldr	r3, [r0, #8]
 80135a0:	431a      	orrs	r2, r3
 80135a2:	6082      	str	r2, [r0, #8]
 80135a4:	4770      	bx	lr
 80135a6:	6883      	ldr	r3, [r0, #8]
 80135a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80135ac:	e7f6      	b.n	801359c <adc_external_trigger_source_config+0x10>

080135ae <adc_external_trigger_config>:
 80135ae:	f001 0301 	and.w	r3, r1, #1
 80135b2:	f001 0102 	and.w	r1, r1, #2
 80135b6:	b152      	cbz	r2, 80135ce <adc_external_trigger_config+0x20>
 80135b8:	b11b      	cbz	r3, 80135c2 <adc_external_trigger_config+0x14>
 80135ba:	6883      	ldr	r3, [r0, #8]
 80135bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80135c0:	6083      	str	r3, [r0, #8]
 80135c2:	b119      	cbz	r1, 80135cc <adc_external_trigger_config+0x1e>
 80135c4:	6883      	ldr	r3, [r0, #8]
 80135c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80135ca:	6083      	str	r3, [r0, #8]
 80135cc:	4770      	bx	lr
 80135ce:	b11b      	cbz	r3, 80135d8 <adc_external_trigger_config+0x2a>
 80135d0:	6883      	ldr	r3, [r0, #8]
 80135d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80135d6:	6083      	str	r3, [r0, #8]
 80135d8:	2900      	cmp	r1, #0
 80135da:	d0f7      	beq.n	80135cc <adc_external_trigger_config+0x1e>
 80135dc:	6883      	ldr	r3, [r0, #8]
 80135de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80135e2:	e7f2      	b.n	80135ca <adc_external_trigger_config+0x1c>

080135e4 <adc_software_trigger_enable>:
 80135e4:	07ca      	lsls	r2, r1, #31
 80135e6:	bf42      	ittt	mi
 80135e8:	6883      	ldrmi	r3, [r0, #8]
 80135ea:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 80135ee:	6083      	strmi	r3, [r0, #8]
 80135f0:	078b      	lsls	r3, r1, #30
 80135f2:	bf42      	ittt	mi
 80135f4:	6883      	ldrmi	r3, [r0, #8]
 80135f6:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 80135fa:	6083      	strmi	r3, [r0, #8]
 80135fc:	4770      	bx	lr
	...

08013600 <dma_deinit>:
 8013600:	4b0c      	ldr	r3, [pc, #48]	; (8013634 <dma_deinit+0x34>)
 8013602:	4298      	cmp	r0, r3
 8013604:	d102      	bne.n	801360c <dma_deinit+0xc>
 8013606:	2904      	cmp	r1, #4
 8013608:	d900      	bls.n	801360c <dma_deinit+0xc>
 801360a:	e7fe      	b.n	801360a <dma_deinit+0xa>
 801360c:	2314      	movs	r3, #20
 801360e:	fb03 0301 	mla	r3, r3, r1, r0
 8013612:	689a      	ldr	r2, [r3, #8]
 8013614:	0089      	lsls	r1, r1, #2
 8013616:	f022 0201 	bic.w	r2, r2, #1
 801361a:	609a      	str	r2, [r3, #8]
 801361c:	2200      	movs	r2, #0
 801361e:	609a      	str	r2, [r3, #8]
 8013620:	60da      	str	r2, [r3, #12]
 8013622:	611a      	str	r2, [r3, #16]
 8013624:	615a      	str	r2, [r3, #20]
 8013626:	230f      	movs	r3, #15
 8013628:	6842      	ldr	r2, [r0, #4]
 801362a:	fa03 f101 	lsl.w	r1, r3, r1
 801362e:	4311      	orrs	r1, r2
 8013630:	6041      	str	r1, [r0, #4]
 8013632:	4770      	bx	lr
 8013634:	40020400 	andmi	r0, r2, r0, lsl #8

08013638 <dma_init>:
 8013638:	4b1b      	ldr	r3, [pc, #108]	; (80136a8 <dma_init+0x70>)
 801363a:	b510      	push	{r4, lr}
 801363c:	4298      	cmp	r0, r3
 801363e:	d102      	bne.n	8013646 <dma_init+0xe>
 8013640:	2904      	cmp	r1, #4
 8013642:	d900      	bls.n	8013646 <dma_init+0xe>
 8013644:	e7fe      	b.n	8013644 <dma_init+0xc>
 8013646:	2314      	movs	r3, #20
 8013648:	fb03 0101 	mla	r1, r3, r1, r0
 801364c:	6813      	ldr	r3, [r2, #0]
 801364e:	610b      	str	r3, [r1, #16]
 8013650:	6893      	ldr	r3, [r2, #8]
 8013652:	614b      	str	r3, [r1, #20]
 8013654:	8a13      	ldrh	r3, [r2, #16]
 8013656:	60cb      	str	r3, [r1, #12]
 8013658:	68d4      	ldr	r4, [r2, #12]
 801365a:	6853      	ldr	r3, [r2, #4]
 801365c:	6888      	ldr	r0, [r1, #8]
 801365e:	4323      	orrs	r3, r4
 8013660:	6954      	ldr	r4, [r2, #20]
 8013662:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8013666:	4323      	orrs	r3, r4
 8013668:	4303      	orrs	r3, r0
 801366a:	608b      	str	r3, [r1, #8]
 801366c:	7e13      	ldrb	r3, [r2, #24]
 801366e:	2b01      	cmp	r3, #1
 8013670:	688b      	ldr	r3, [r1, #8]
 8013672:	bf0c      	ite	eq
 8013674:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8013678:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 801367c:	608b      	str	r3, [r1, #8]
 801367e:	7e53      	ldrb	r3, [r2, #25]
 8013680:	2b01      	cmp	r3, #1
 8013682:	688b      	ldr	r3, [r1, #8]
 8013684:	bf0c      	ite	eq
 8013686:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 801368a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 801368e:	608b      	str	r3, [r1, #8]
 8013690:	7e93      	ldrb	r3, [r2, #26]
 8013692:	b923      	cbnz	r3, 801369e <dma_init+0x66>
 8013694:	688b      	ldr	r3, [r1, #8]
 8013696:	f023 0310 	bic.w	r3, r3, #16
 801369a:	608b      	str	r3, [r1, #8]
 801369c:	bd10      	pop	{r4, pc}
 801369e:	688b      	ldr	r3, [r1, #8]
 80136a0:	f043 0310 	orr.w	r3, r3, #16
 80136a4:	e7f9      	b.n	801369a <dma_init+0x62>
 80136a6:	bf00      	nop
 80136a8:	40020400 	andmi	r0, r2, r0, lsl #8

080136ac <dma_circulation_disable>:
 80136ac:	4b06      	ldr	r3, [pc, #24]	; (80136c8 <dma_circulation_disable+0x1c>)
 80136ae:	4298      	cmp	r0, r3
 80136b0:	d102      	bne.n	80136b8 <dma_circulation_disable+0xc>
 80136b2:	2904      	cmp	r1, #4
 80136b4:	d900      	bls.n	80136b8 <dma_circulation_disable+0xc>
 80136b6:	e7fe      	b.n	80136b6 <dma_circulation_disable+0xa>
 80136b8:	2314      	movs	r3, #20
 80136ba:	4359      	muls	r1, r3
 80136bc:	3008      	adds	r0, #8
 80136be:	580b      	ldr	r3, [r1, r0]
 80136c0:	f023 0320 	bic.w	r3, r3, #32
 80136c4:	500b      	str	r3, [r1, r0]
 80136c6:	4770      	bx	lr
 80136c8:	40020400 	andmi	r0, r2, r0, lsl #8

080136cc <dma_memory_to_memory_disable>:
 80136cc:	4b06      	ldr	r3, [pc, #24]	; (80136e8 <dma_memory_to_memory_disable+0x1c>)
 80136ce:	4298      	cmp	r0, r3
 80136d0:	d102      	bne.n	80136d8 <dma_memory_to_memory_disable+0xc>
 80136d2:	2904      	cmp	r1, #4
 80136d4:	d900      	bls.n	80136d8 <dma_memory_to_memory_disable+0xc>
 80136d6:	e7fe      	b.n	80136d6 <dma_memory_to_memory_disable+0xa>
 80136d8:	2314      	movs	r3, #20
 80136da:	4359      	muls	r1, r3
 80136dc:	3008      	adds	r0, #8
 80136de:	580b      	ldr	r3, [r1, r0]
 80136e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80136e4:	500b      	str	r3, [r1, r0]
 80136e6:	4770      	bx	lr
 80136e8:	40020400 	andmi	r0, r2, r0, lsl #8

080136ec <enet_delay>:
 80136ec:	2300      	movs	r3, #0
 80136ee:	b082      	sub	sp, #8
 80136f0:	9301      	str	r3, [sp, #4]
 80136f2:	9001      	str	r0, [sp, #4]
 80136f4:	9b01      	ldr	r3, [sp, #4]
 80136f6:	b90b      	cbnz	r3, 80136fc <enet_delay+0x10>
 80136f8:	b002      	add	sp, #8
 80136fa:	4770      	bx	lr
 80136fc:	9b01      	ldr	r3, [sp, #4]
 80136fe:	3b01      	subs	r3, #1
 8013700:	9301      	str	r3, [sp, #4]
 8013702:	e7f7      	b.n	80136f4 <enet_delay+0x8>

08013704 <enet_software_reset>:
 8013704:	4b07      	ldr	r3, [pc, #28]	; (8013724 <enet_software_reset+0x20>)
 8013706:	681a      	ldr	r2, [r3, #0]
 8013708:	f042 0201 	orr.w	r2, r2, #1
 801370c:	601a      	str	r2, [r3, #0]
 801370e:	4a06      	ldr	r2, [pc, #24]	; (8013728 <enet_software_reset+0x24>)
 8013710:	6819      	ldr	r1, [r3, #0]
 8013712:	07c9      	lsls	r1, r1, #31
 8013714:	d501      	bpl.n	801371a <enet_software_reset+0x16>
 8013716:	3a01      	subs	r2, #1
 8013718:	d1fa      	bne.n	8013710 <enet_software_reset+0xc>
 801371a:	6818      	ldr	r0, [r3, #0]
 801371c:	43c0      	mvns	r0, r0
 801371e:	f000 0001 	and.w	r0, r0, #1
 8013722:	4770      	bx	lr
 8013724:	40029000 	andmi	r9, r2, r0
 8013728:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

0801372c <enet_descriptors_chain_init>:
 801372c:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 8013730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013732:	4a19      	ldr	r2, [pc, #100]	; (8013798 <enet_descriptors_chain_init+0x6c>)
 8013734:	d125      	bne.n	8013782 <enet_descriptors_chain_init+0x56>
 8013736:	2500      	movs	r5, #0
 8013738:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 801373c:	2002      	movs	r0, #2
 801373e:	4b17      	ldr	r3, [pc, #92]	; (801379c <enet_descriptors_chain_init+0x70>)
 8013740:	4c17      	ldr	r4, [pc, #92]	; (80137a0 <enet_descriptors_chain_init+0x74>)
 8013742:	6113      	str	r3, [r2, #16]
 8013744:	4a17      	ldr	r2, [pc, #92]	; (80137a4 <enet_descriptors_chain_init+0x78>)
 8013746:	6013      	str	r3, [r2, #0]
 8013748:	2200      	movs	r2, #0
 801374a:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 801374e:	4916      	ldr	r1, [pc, #88]	; (80137a8 <enet_descriptors_chain_init+0x7c>)
 8013750:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8013754:	600a      	str	r2, [r1, #0]
 8013756:	4915      	ldr	r1, [pc, #84]	; (80137ac <enet_descriptors_chain_init+0x80>)
 8013758:	600a      	str	r2, [r1, #0]
 801375a:	f103 0110 	add.w	r1, r3, #16
 801375e:	fb0e 4702 	mla	r7, lr, r2, r4
 8013762:	f841 7c08 	str.w	r7, [r1, #-8]
 8013766:	4594      	cmp	ip, r2
 8013768:	bf94      	ite	ls
 801376a:	461f      	movls	r7, r3
 801376c:	460f      	movhi	r7, r1
 801376e:	3201      	adds	r2, #1
 8013770:	4290      	cmp	r0, r2
 8013772:	e941 6504 	strd	r6, r5, [r1, #-16]
 8013776:	f841 7c04 	str.w	r7, [r1, #-4]
 801377a:	f101 0110 	add.w	r1, r1, #16
 801377e:	d1ee      	bne.n	801375e <enet_descriptors_chain_init+0x32>
 8013780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013782:	4b0b      	ldr	r3, [pc, #44]	; (80137b0 <enet_descriptors_chain_init+0x84>)
 8013784:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8013788:	60d3      	str	r3, [r2, #12]
 801378a:	4a0a      	ldr	r2, [pc, #40]	; (80137b4 <enet_descriptors_chain_init+0x88>)
 801378c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013790:	2006      	movs	r0, #6
 8013792:	4c09      	ldr	r4, [pc, #36]	; (80137b8 <enet_descriptors_chain_init+0x8c>)
 8013794:	6013      	str	r3, [r2, #0]
 8013796:	e7d7      	b.n	8013748 <enet_descriptors_chain_init+0x1c>
 8013798:	40029000 	andmi	r9, r2, r0
 801379c:	20015a1c 	andcs	r5, r1, ip, lsl sl
 80137a0:	20014e34 	andcs	r4, r1, r4, lsr lr
 80137a4:	200129dc 	ldrdcs	r2, [r1], -ip
 80137a8:	200129d0 	ldrdcs	r2, [r1], -r0
 80137ac:	200129d4 	ldrdcs	r2, [r1], -r4
 80137b0:	20014dd4 	ldrdcs	r4, [r1], -r4	; <UNPREDICTABLE>
 80137b4:	200129d8 	ldrdcs	r2, [r1], -r8
 80137b8:	20012a1c 	andcs	r2, r1, ip, lsl sl

080137bc <enet_frame_receive>:
 80137bc:	4a1d      	ldr	r2, [pc, #116]	; (8013834 <enet_frame_receive+0x78>)
 80137be:	b510      	push	{r4, lr}
 80137c0:	6813      	ldr	r3, [r2, #0]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	db33      	blt.n	8013830 <enet_frame_receive+0x74>
 80137c8:	b970      	cbnz	r0, 80137e8 <enet_frame_receive+0x2c>
 80137ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80137ce:	6813      	ldr	r3, [r2, #0]
 80137d0:	6019      	str	r1, [r3, #0]
 80137d2:	4919      	ldr	r1, [pc, #100]	; (8013838 <enet_frame_receive+0x7c>)
 80137d4:	6948      	ldr	r0, [r1, #20]
 80137d6:	0604      	lsls	r4, r0, #24
 80137d8:	d419      	bmi.n	801380e <enet_frame_receive+0x52>
 80137da:	6859      	ldr	r1, [r3, #4]
 80137dc:	0448      	lsls	r0, r1, #17
 80137de:	d51b      	bpl.n	8013818 <enet_frame_receive+0x5c>
 80137e0:	68db      	ldr	r3, [r3, #12]
 80137e2:	2001      	movs	r0, #1
 80137e4:	6013      	str	r3, [r2, #0]
 80137e6:	bd10      	pop	{r4, pc}
 80137e8:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 80137ec:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80137f0:	d11e      	bne.n	8013830 <enet_frame_receive+0x74>
 80137f2:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80137f6:	3b04      	subs	r3, #4
 80137f8:	428b      	cmp	r3, r1
 80137fa:	d819      	bhi.n	8013830 <enet_frame_receive+0x74>
 80137fc:	2100      	movs	r1, #0
 80137fe:	4299      	cmp	r1, r3
 8013800:	6814      	ldr	r4, [r2, #0]
 8013802:	d2e2      	bcs.n	80137ca <enet_frame_receive+0xe>
 8013804:	68a4      	ldr	r4, [r4, #8]
 8013806:	5d0c      	ldrb	r4, [r1, r4]
 8013808:	5444      	strb	r4, [r0, r1]
 801380a:	3101      	adds	r1, #1
 801380c:	e7f7      	b.n	80137fe <enet_frame_receive+0x42>
 801380e:	2080      	movs	r0, #128	; 0x80
 8013810:	6148      	str	r0, [r1, #20]
 8013812:	2000      	movs	r0, #0
 8013814:	6088      	str	r0, [r1, #8]
 8013816:	e7e0      	b.n	80137da <enet_frame_receive+0x1e>
 8013818:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 801381c:	4906      	ldr	r1, [pc, #24]	; (8013838 <enet_frame_receive+0x7c>)
 801381e:	bf05      	ittet	eq
 8013820:	3310      	addeq	r3, #16
 8013822:	6809      	ldreq	r1, [r1, #0]
 8013824:	68cb      	ldrne	r3, [r1, #12]
 8013826:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 801382a:	bf08      	it	eq
 801382c:	185b      	addeq	r3, r3, r1
 801382e:	e7d8      	b.n	80137e2 <enet_frame_receive+0x26>
 8013830:	2000      	movs	r0, #0
 8013832:	e7d8      	b.n	80137e6 <enet_frame_receive+0x2a>
 8013834:	200129d8 	ldrdcs	r2, [r1], -r8
 8013838:	40029000 	andmi	r9, r2, r0

0801383c <enet_frame_transmit>:
 801383c:	4a1e      	ldr	r2, [pc, #120]	; (80138b8 <enet_frame_transmit+0x7c>)
 801383e:	b530      	push	{r4, r5, lr}
 8013840:	6813      	ldr	r3, [r2, #0]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	db34      	blt.n	80138b2 <enet_frame_transmit+0x76>
 8013848:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801384c:	4299      	cmp	r1, r3
 801384e:	d830      	bhi.n	80138b2 <enet_frame_transmit+0x76>
 8013850:	b9e8      	cbnz	r0, 801388e <enet_frame_transmit+0x52>
 8013852:	6813      	ldr	r3, [r2, #0]
 8013854:	4819      	ldr	r0, [pc, #100]	; (80138bc <enet_frame_transmit+0x80>)
 8013856:	6059      	str	r1, [r3, #4]
 8013858:	6819      	ldr	r1, [r3, #0]
 801385a:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 801385e:	6019      	str	r1, [r3, #0]
 8013860:	6941      	ldr	r1, [r0, #20]
 8013862:	6944      	ldr	r4, [r0, #20]
 8013864:	f001 0104 	and.w	r1, r1, #4
 8013868:	f004 0420 	and.w	r4, r4, #32
 801386c:	4321      	orrs	r1, r4
 801386e:	d110      	bne.n	8013892 <enet_frame_transmit+0x56>
 8013870:	6819      	ldr	r1, [r3, #0]
 8013872:	02c8      	lsls	r0, r1, #11
 8013874:	d511      	bpl.n	801389a <enet_frame_transmit+0x5e>
 8013876:	68db      	ldr	r3, [r3, #12]
 8013878:	2001      	movs	r0, #1
 801387a:	6013      	str	r3, [r2, #0]
 801387c:	bd30      	pop	{r4, r5, pc}
 801387e:	5cc5      	ldrb	r5, [r0, r3]
 8013880:	68a4      	ldr	r4, [r4, #8]
 8013882:	551d      	strb	r5, [r3, r4]
 8013884:	3301      	adds	r3, #1
 8013886:	428b      	cmp	r3, r1
 8013888:	6814      	ldr	r4, [r2, #0]
 801388a:	d1f8      	bne.n	801387e <enet_frame_transmit+0x42>
 801388c:	e7e1      	b.n	8013852 <enet_frame_transmit+0x16>
 801388e:	2300      	movs	r3, #0
 8013890:	e7f9      	b.n	8013886 <enet_frame_transmit+0x4a>
 8013892:	6141      	str	r1, [r0, #20]
 8013894:	2100      	movs	r1, #0
 8013896:	6041      	str	r1, [r0, #4]
 8013898:	e7ea      	b.n	8013870 <enet_frame_transmit+0x34>
 801389a:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 801389e:	4907      	ldr	r1, [pc, #28]	; (80138bc <enet_frame_transmit+0x80>)
 80138a0:	bf05      	ittet	eq
 80138a2:	3310      	addeq	r3, #16
 80138a4:	6809      	ldreq	r1, [r1, #0]
 80138a6:	690b      	ldrne	r3, [r1, #16]
 80138a8:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80138ac:	bf08      	it	eq
 80138ae:	185b      	addeq	r3, r3, r1
 80138b0:	e7e2      	b.n	8013878 <enet_frame_transmit+0x3c>
 80138b2:	2000      	movs	r0, #0
 80138b4:	e7e2      	b.n	801387c <enet_frame_transmit+0x40>
 80138b6:	bf00      	nop
 80138b8:	200129dc 	ldrdcs	r2, [r1], -ip
 80138bc:	40029000 	andmi	r9, r2, r0

080138c0 <enet_transmit_checksum_config>:
 80138c0:	6803      	ldr	r3, [r0, #0]
 80138c2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80138c6:	430b      	orrs	r3, r1
 80138c8:	6003      	str	r3, [r0, #0]
 80138ca:	4770      	bx	lr

080138cc <enet_mac_address_set>:
 80138cc:	888a      	ldrh	r2, [r1, #4]
 80138ce:	4b03      	ldr	r3, [pc, #12]	; (80138dc <enet_mac_address_set+0x10>)
 80138d0:	50c2      	str	r2, [r0, r3]
 80138d2:	680a      	ldr	r2, [r1, #0]
 80138d4:	3304      	adds	r3, #4
 80138d6:	50c2      	str	r2, [r0, r3]
 80138d8:	4770      	bx	lr
 80138da:	bf00      	nop
 80138dc:	40028040 	andmi	r8, r2, r0, asr #32

080138e0 <enet_rx_enable>:
 80138e0:	4a05      	ldr	r2, [pc, #20]	; (80138f8 <enet_rx_enable+0x18>)
 80138e2:	6813      	ldr	r3, [r2, #0]
 80138e4:	f043 0304 	orr.w	r3, r3, #4
 80138e8:	6013      	str	r3, [r2, #0]
 80138ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80138ee:	6993      	ldr	r3, [r2, #24]
 80138f0:	f043 0302 	orr.w	r3, r3, #2
 80138f4:	6193      	str	r3, [r2, #24]
 80138f6:	4770      	bx	lr
 80138f8:	40028000 	andmi	r8, r2, r0

080138fc <enet_phy_write_read>:
 80138fc:	b530      	push	{r4, r5, lr}
 80138fe:	4604      	mov	r4, r0
 8013900:	4d13      	ldr	r5, [pc, #76]	; (8013950 <enet_phy_write_read+0x54>)
 8013902:	0192      	lsls	r2, r2, #6
 8013904:	6928      	ldr	r0, [r5, #16]
 8013906:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 801390a:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 801390e:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 8013912:	4302      	orrs	r2, r0
 8013914:	02c9      	lsls	r1, r1, #11
 8013916:	b289      	uxth	r1, r1
 8013918:	2c02      	cmp	r4, #2
 801391a:	ea42 0204 	orr.w	r2, r2, r4
 801391e:	ea42 0201 	orr.w	r2, r2, r1
 8013922:	bf08      	it	eq
 8013924:	8819      	ldrheq	r1, [r3, #0]
 8013926:	f042 0201 	orr.w	r2, r2, #1
 801392a:	bf08      	it	eq
 801392c:	6169      	streq	r1, [r5, #20]
 801392e:	612a      	str	r2, [r5, #16]
 8013930:	4907      	ldr	r1, [pc, #28]	; (8013950 <enet_phy_write_read+0x54>)
 8013932:	4a08      	ldr	r2, [pc, #32]	; (8013954 <enet_phy_write_read+0x58>)
 8013934:	6908      	ldr	r0, [r1, #16]
 8013936:	07c0      	lsls	r0, r0, #31
 8013938:	d501      	bpl.n	801393e <enet_phy_write_read+0x42>
 801393a:	3a01      	subs	r2, #1
 801393c:	d1fa      	bne.n	8013934 <enet_phy_write_read+0x38>
 801393e:	690a      	ldr	r2, [r1, #16]
 8013940:	43d2      	mvns	r2, r2
 8013942:	f002 0001 	and.w	r0, r2, #1
 8013946:	b90c      	cbnz	r4, 801394c <enet_phy_write_read+0x50>
 8013948:	694a      	ldr	r2, [r1, #20]
 801394a:	801a      	strh	r2, [r3, #0]
 801394c:	bd30      	pop	{r4, r5, pc}
 801394e:	bf00      	nop
 8013950:	40028000 	andmi	r8, r2, r0
 8013954:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08013958 <enet_phy_config>:
 8013958:	4b22      	ldr	r3, [pc, #136]	; (80139e4 <enet_phy_config+0x8c>)
 801395a:	b513      	push	{r0, r1, r4, lr}
 801395c:	2001      	movs	r0, #1
 801395e:	691c      	ldr	r4, [r3, #16]
 8013960:	f7fe ff56 	bl	8012810 <rcu_clock_freq_get>
 8013964:	4b20      	ldr	r3, [pc, #128]	; (80139e8 <enet_phy_config+0x90>)
 8013966:	4a21      	ldr	r2, [pc, #132]	; (80139ec <enet_phy_config+0x94>)
 8013968:	4403      	add	r3, r0
 801396a:	4293      	cmp	r3, r2
 801396c:	f024 041c 	bic.w	r4, r4, #28
 8013970:	d220      	bcs.n	80139b4 <enet_phy_config+0x5c>
 8013972:	f044 0408 	orr.w	r4, r4, #8
 8013976:	4b1b      	ldr	r3, [pc, #108]	; (80139e4 <enet_phy_config+0x8c>)
 8013978:	2200      	movs	r2, #0
 801397a:	611c      	str	r4, [r3, #16]
 801397c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013980:	2101      	movs	r1, #1
 8013982:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013986:	2002      	movs	r0, #2
 8013988:	f10d 0306 	add.w	r3, sp, #6
 801398c:	f7ff ffb6 	bl	80138fc <enet_phy_write_read>
 8013990:	b310      	cbz	r0, 80139d8 <enet_phy_config+0x80>
 8013992:	2200      	movs	r2, #0
 8013994:	4816      	ldr	r0, [pc, #88]	; (80139f0 <enet_phy_config+0x98>)
 8013996:	f7ff fea9 	bl	80136ec <enet_delay>
 801399a:	2101      	movs	r1, #1
 801399c:	4610      	mov	r0, r2
 801399e:	f10d 0306 	add.w	r3, sp, #6
 80139a2:	f7ff ffab 	bl	80138fc <enet_phy_write_read>
 80139a6:	b1b8      	cbz	r0, 80139d8 <enet_phy_config+0x80>
 80139a8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80139ac:	43c0      	mvns	r0, r0
 80139ae:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80139b2:	e012      	b.n	80139da <enet_phy_config+0x82>
 80139b4:	4b0f      	ldr	r3, [pc, #60]	; (80139f4 <enet_phy_config+0x9c>)
 80139b6:	4a10      	ldr	r2, [pc, #64]	; (80139f8 <enet_phy_config+0xa0>)
 80139b8:	4403      	add	r3, r0
 80139ba:	4293      	cmp	r3, r2
 80139bc:	d802      	bhi.n	80139c4 <enet_phy_config+0x6c>
 80139be:	f044 040c 	orr.w	r4, r4, #12
 80139c2:	e7d8      	b.n	8013976 <enet_phy_config+0x1e>
 80139c4:	4b0d      	ldr	r3, [pc, #52]	; (80139fc <enet_phy_config+0xa4>)
 80139c6:	4a0e      	ldr	r2, [pc, #56]	; (8013a00 <enet_phy_config+0xa8>)
 80139c8:	4403      	add	r3, r0
 80139ca:	4293      	cmp	r3, r2
 80139cc:	d9d3      	bls.n	8013976 <enet_phy_config+0x1e>
 80139ce:	4b0d      	ldr	r3, [pc, #52]	; (8013a04 <enet_phy_config+0xac>)
 80139d0:	4a0d      	ldr	r2, [pc, #52]	; (8013a08 <enet_phy_config+0xb0>)
 80139d2:	4403      	add	r3, r0
 80139d4:	4293      	cmp	r3, r2
 80139d6:	d902      	bls.n	80139de <enet_phy_config+0x86>
 80139d8:	2000      	movs	r0, #0
 80139da:	b002      	add	sp, #8
 80139dc:	bd10      	pop	{r4, pc}
 80139de:	f044 0404 	orr.w	r4, r4, #4
 80139e2:	e7c8      	b.n	8013976 <enet_phy_config+0x1e>
 80139e4:	40028000 	andmi	r8, r2, r0
 80139e8:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 80139ec:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 80139f0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 80139f4:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 80139f8:	017d783f 	cmneq	sp, pc, lsr r8
 80139fc:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8013a00:	01c9c37f 	biceq	ip, r9, pc, ror r3
 8013a04:	faa2b580 	blx	68c100c <__stack_size+0x68bf80c>
 8013a08:	0112a880 	tsteq	r2, r0, lsl #17

08013a0c <enet_init>:
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a10:	4604      	mov	r4, r0
 8013a12:	460d      	mov	r5, r1
 8013a14:	4616      	mov	r6, r2
 8013a16:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013a1a:	f7ff ff9d 	bl	8013958 <enet_phy_config>
 8013a1e:	2800      	cmp	r0, #0
 8013a20:	d037      	beq.n	8013a92 <enet_init+0x86>
 8013a22:	4b3b      	ldr	r3, [pc, #236]	; (8013b10 <enet_init+0x104>)
 8013a24:	4a3b      	ldr	r2, [pc, #236]	; (8013b14 <enet_init+0x108>)
 8013a26:	6819      	ldr	r1, [r3, #0]
 8013a28:	2c01      	cmp	r4, #1
 8013a2a:	ea02 0201 	and.w	r2, r2, r1
 8013a2e:	601a      	str	r2, [r3, #0]
 8013a30:	f04f 0200 	mov.w	r2, #0
 8013a34:	605a      	str	r2, [r3, #4]
 8013a36:	609a      	str	r2, [r3, #8]
 8013a38:	60da      	str	r2, [r3, #12]
 8013a3a:	6999      	ldr	r1, [r3, #24]
 8013a3c:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8013a40:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8013a44:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8013a48:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8013a4c:	6199      	str	r1, [r3, #24]
 8013a4e:	4932      	ldr	r1, [pc, #200]	; (8013b18 <enet_init+0x10c>)
 8013a50:	61da      	str	r2, [r3, #28]
 8013a52:	6988      	ldr	r0, [r1, #24]
 8013a54:	4b31      	ldr	r3, [pc, #196]	; (8013b1c <enet_init+0x110>)
 8013a56:	ea03 0300 	and.w	r3, r3, r0
 8013a5a:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8013a5e:	618b      	str	r3, [r1, #24]
 8013a60:	680b      	ldr	r3, [r1, #0]
 8013a62:	4b2f      	ldr	r3, [pc, #188]	; (8013b20 <enet_init+0x114>)
 8013a64:	600b      	str	r3, [r1, #0]
 8013a66:	d01e      	beq.n	8013aa6 <enet_init+0x9a>
 8013a68:	08e3      	lsrs	r3, r4, #3
 8013a6a:	0861      	lsrs	r1, r4, #1
 8013a6c:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8013a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a74:	430b      	orrs	r3, r1
 8013a76:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013a7a:	2101      	movs	r1, #1
 8013a7c:	2002      	movs	r0, #2
 8013a7e:	f10d 0306 	add.w	r3, sp, #6
 8013a82:	f7ff ff3b 	bl	80138fc <enet_phy_write_read>
 8013a86:	b158      	cbz	r0, 8013aa0 <enet_init+0x94>
 8013a88:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013a8c:	f7ff fe2e 	bl	80136ec <enet_delay>
 8013a90:	e05f      	b.n	8013b52 <enet_init+0x146>
 8013a92:	4824      	ldr	r0, [pc, #144]	; (8013b24 <enet_init+0x118>)
 8013a94:	f7ff fe2a 	bl	80136ec <enet_delay>
 8013a98:	f7ff ff5e 	bl	8013958 <enet_phy_config>
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	d1c0      	bne.n	8013a22 <enet_init+0x16>
 8013aa0:	2000      	movs	r0, #0
 8013aa2:	b003      	add	sp, #12
 8013aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013aa6:	4614      	mov	r4, r2
 8013aa8:	4f1f      	ldr	r7, [pc, #124]	; (8013b28 <enet_init+0x11c>)
 8013aaa:	2201      	movs	r2, #1
 8013aac:	2000      	movs	r0, #0
 8013aae:	4611      	mov	r1, r2
 8013ab0:	f10d 0306 	add.w	r3, sp, #6
 8013ab4:	f7ff ff22 	bl	80138fc <enet_phy_write_read>
 8013ab8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013abc:	3401      	adds	r4, #1
 8013abe:	f002 0204 	and.w	r2, r2, #4
 8013ac2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013ac6:	b912      	cbnz	r2, 8013ace <enet_init+0xc2>
 8013ac8:	42bc      	cmp	r4, r7
 8013aca:	d1ee      	bne.n	8013aaa <enet_init+0x9e>
 8013acc:	e7e8      	b.n	8013aa0 <enet_init+0x94>
 8013ace:	42bc      	cmp	r4, r7
 8013ad0:	d0e6      	beq.n	8013aa0 <enet_init+0x94>
 8013ad2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013ad6:	2101      	movs	r1, #1
 8013ad8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013adc:	2002      	movs	r0, #2
 8013ade:	2200      	movs	r2, #0
 8013ae0:	f7ff ff0c 	bl	80138fc <enet_phy_write_read>
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	d0db      	beq.n	8013aa0 <enet_init+0x94>
 8013ae8:	2400      	movs	r4, #0
 8013aea:	4f0f      	ldr	r7, [pc, #60]	; (8013b28 <enet_init+0x11c>)
 8013aec:	2201      	movs	r2, #1
 8013aee:	2000      	movs	r0, #0
 8013af0:	4611      	mov	r1, r2
 8013af2:	f10d 0306 	add.w	r3, sp, #6
 8013af6:	f7ff ff01 	bl	80138fc <enet_phy_write_read>
 8013afa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013afe:	3401      	adds	r4, #1
 8013b00:	f002 0220 	and.w	r2, r2, #32
 8013b04:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013b08:	b982      	cbnz	r2, 8013b2c <enet_init+0x120>
 8013b0a:	42bc      	cmp	r4, r7
 8013b0c:	d1ee      	bne.n	8013aec <enet_init+0xe0>
 8013b0e:	e7c7      	b.n	8013aa0 <enet_init+0x94>
 8013b10:	40028000 	andmi	r8, r2, r0
 8013b14:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8013b18:	40029000 	andmi	r9, r2, r0
 8013b1c:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8013b20:	02c16000 	sbceq	r6, r1, #0
 8013b24:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8013b28:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8013b2c:	42bc      	cmp	r4, r7
 8013b2e:	d0b7      	beq.n	8013aa0 <enet_init+0x94>
 8013b30:	2101      	movs	r1, #1
 8013b32:	2210      	movs	r2, #16
 8013b34:	2000      	movs	r0, #0
 8013b36:	f7ff fee1 	bl	80138fc <enet_phy_write_read>
 8013b3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013b3e:	f013 0f04 	tst.w	r3, #4
 8013b42:	bf14      	ite	ne
 8013b44:	f44f 6400 	movne.w	r4, #2048	; 0x800
 8013b48:	2400      	moveq	r4, #0
 8013b4a:	0799      	lsls	r1, r3, #30
 8013b4c:	d401      	bmi.n	8013b52 <enet_init+0x146>
 8013b4e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8013b52:	4b64      	ldr	r3, [pc, #400]	; (8013ce4 <enet_init+0x2d8>)
 8013b54:	056a      	lsls	r2, r5, #21
 8013b56:	6818      	ldr	r0, [r3, #0]
 8013b58:	f420 40b0 	bic.w	r0, r0, #22528	; 0x5800
 8013b5c:	ea44 0400 	orr.w	r4, r4, r0
 8013b60:	601c      	str	r4, [r3, #0]
 8013b62:	d50c      	bpl.n	8013b7e <enet_init+0x172>
 8013b64:	681a      	ldr	r2, [r3, #0]
 8013b66:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8013b6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013b6e:	601a      	str	r2, [r3, #0]
 8013b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b74:	6999      	ldr	r1, [r3, #24]
 8013b76:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
 8013b7a:	430d      	orrs	r5, r1
 8013b7c:	619d      	str	r5, [r3, #24]
 8013b7e:	4959      	ldr	r1, [pc, #356]	; (8013ce4 <enet_init+0x2d8>)
 8013b80:	4b59      	ldr	r3, [pc, #356]	; (8013ce8 <enet_init+0x2dc>)
 8013b82:	684a      	ldr	r2, [r1, #4]
 8013b84:	4316      	orrs	r6, r2
 8013b86:	604e      	str	r6, [r1, #4]
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	07d7      	lsls	r7, r2, #31
 8013b8c:	d510      	bpl.n	8013bb0 <enet_init+0x1a4>
 8013b8e:	685a      	ldr	r2, [r3, #4]
 8013b90:	680c      	ldr	r4, [r1, #0]
 8013b92:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8013b96:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8013b9a:	4320      	orrs	r0, r4
 8013b9c:	6008      	str	r0, [r1, #0]
 8013b9e:	4853      	ldr	r0, [pc, #332]	; (8013cec <enet_init+0x2e0>)
 8013ba0:	0892      	lsrs	r2, r2, #2
 8013ba2:	6981      	ldr	r1, [r0, #24]
 8013ba4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8013ba8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8013bac:	430a      	orrs	r2, r1
 8013bae:	6182      	str	r2, [r0, #24]
 8013bb0:	681a      	ldr	r2, [r3, #0]
 8013bb2:	0796      	lsls	r6, r2, #30
 8013bb4:	d508      	bpl.n	8013bc8 <enet_init+0x1bc>
 8013bb6:	494d      	ldr	r1, [pc, #308]	; (8013cec <enet_init+0x2e0>)
 8013bb8:	6898      	ldr	r0, [r3, #8]
 8013bba:	680a      	ldr	r2, [r1, #0]
 8013bbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8013bc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8013bc4:	4302      	orrs	r2, r0
 8013bc6:	600a      	str	r2, [r1, #0]
 8013bc8:	681a      	ldr	r2, [r3, #0]
 8013bca:	0755      	lsls	r5, r2, #29
 8013bcc:	d508      	bpl.n	8013be0 <enet_init+0x1d4>
 8013bce:	4947      	ldr	r1, [pc, #284]	; (8013cec <enet_init+0x2e0>)
 8013bd0:	68d8      	ldr	r0, [r3, #12]
 8013bd2:	680a      	ldr	r2, [r1, #0]
 8013bd4:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8013bd8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8013bdc:	4302      	orrs	r2, r0
 8013bde:	600a      	str	r2, [r1, #0]
 8013be0:	681a      	ldr	r2, [r3, #0]
 8013be2:	0714      	lsls	r4, r2, #28
 8013be4:	d508      	bpl.n	8013bf8 <enet_init+0x1ec>
 8013be6:	4941      	ldr	r1, [pc, #260]	; (8013cec <enet_init+0x2e0>)
 8013be8:	6918      	ldr	r0, [r3, #16]
 8013bea:	680a      	ldr	r2, [r1, #0]
 8013bec:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8013bf0:	f022 0202 	bic.w	r2, r2, #2
 8013bf4:	4302      	orrs	r2, r0
 8013bf6:	600a      	str	r2, [r1, #0]
 8013bf8:	681a      	ldr	r2, [r3, #0]
 8013bfa:	06d0      	lsls	r0, r2, #27
 8013bfc:	d506      	bpl.n	8013c0c <enet_init+0x200>
 8013bfe:	493b      	ldr	r1, [pc, #236]	; (8013cec <enet_init+0x2e0>)
 8013c00:	4a3b      	ldr	r2, [pc, #236]	; (8013cf0 <enet_init+0x2e4>)
 8013c02:	6988      	ldr	r0, [r1, #24]
 8013c04:	4002      	ands	r2, r0
 8013c06:	6958      	ldr	r0, [r3, #20]
 8013c08:	4302      	orrs	r2, r0
 8013c0a:	618a      	str	r2, [r1, #24]
 8013c0c:	681a      	ldr	r2, [r3, #0]
 8013c0e:	0691      	lsls	r1, r2, #26
 8013c10:	d508      	bpl.n	8013c24 <enet_init+0x218>
 8013c12:	4936      	ldr	r1, [pc, #216]	; (8013cec <enet_init+0x2e0>)
 8013c14:	6998      	ldr	r0, [r3, #24]
 8013c16:	698a      	ldr	r2, [r1, #24]
 8013c18:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8013c1c:	f022 0204 	bic.w	r2, r2, #4
 8013c20:	4302      	orrs	r2, r0
 8013c22:	618a      	str	r2, [r1, #24]
 8013c24:	681a      	ldr	r2, [r3, #0]
 8013c26:	0652      	lsls	r2, r2, #25
 8013c28:	d506      	bpl.n	8013c38 <enet_init+0x22c>
 8013c2a:	492e      	ldr	r1, [pc, #184]	; (8013ce4 <enet_init+0x2d8>)
 8013c2c:	69d8      	ldr	r0, [r3, #28]
 8013c2e:	69ca      	ldr	r2, [r1, #28]
 8013c30:	0c52      	lsrs	r2, r2, #17
 8013c32:	0452      	lsls	r2, r2, #17
 8013c34:	4302      	orrs	r2, r0
 8013c36:	61ca      	str	r2, [r1, #28]
 8013c38:	681a      	ldr	r2, [r3, #0]
 8013c3a:	0617      	lsls	r7, r2, #24
 8013c3c:	d517      	bpl.n	8013c6e <enet_init+0x262>
 8013c3e:	4c29      	ldr	r4, [pc, #164]	; (8013ce4 <enet_init+0x2d8>)
 8013c40:	6a1a      	ldr	r2, [r3, #32]
 8013c42:	69a0      	ldr	r0, [r4, #24]
 8013c44:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8013c48:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8013c4c:	0400      	lsls	r0, r0, #16
 8013c4e:	0c00      	lsrs	r0, r0, #16
 8013c50:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8013c54:	4301      	orrs	r1, r0
 8013c56:	4825      	ldr	r0, [pc, #148]	; (8013cec <enet_init+0x2e0>)
 8013c58:	61a1      	str	r1, [r4, #24]
 8013c5a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8013c5e:	0a12      	lsrs	r2, r2, #8
 8013c60:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8013c64:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8013c68:	430a      	orrs	r2, r1
 8013c6a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8013c6e:	681a      	ldr	r2, [r3, #0]
 8013c70:	05d6      	lsls	r6, r2, #23
 8013c72:	bf42      	ittt	mi
 8013c74:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8013c76:	4a1b      	ldrmi	r2, [pc, #108]	; (8013ce4 <enet_init+0x2d8>)
 8013c78:	6091      	strmi	r1, [r2, #8]
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	0595      	lsls	r5, r2, #22
 8013c7e:	bf42      	ittt	mi
 8013c80:	4a18      	ldrmi	r2, [pc, #96]	; (8013ce4 <enet_init+0x2d8>)
 8013c82:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8013c84:	60d1      	strmi	r1, [r2, #12]
 8013c86:	681a      	ldr	r2, [r3, #0]
 8013c88:	0554      	lsls	r4, r2, #21
 8013c8a:	d508      	bpl.n	8013c9e <enet_init+0x292>
 8013c8c:	4915      	ldr	r1, [pc, #84]	; (8013ce4 <enet_init+0x2d8>)
 8013c8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8013c90:	684a      	ldr	r2, [r1, #4]
 8013c92:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8013c96:	f022 0206 	bic.w	r2, r2, #6
 8013c9a:	4302      	orrs	r2, r0
 8013c9c:	604a      	str	r2, [r1, #4]
 8013c9e:	681a      	ldr	r2, [r3, #0]
 8013ca0:	0510      	lsls	r0, r2, #20
 8013ca2:	d508      	bpl.n	8013cb6 <enet_init+0x2aa>
 8013ca4:	490f      	ldr	r1, [pc, #60]	; (8013ce4 <enet_init+0x2d8>)
 8013ca6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013ca8:	680a      	ldr	r2, [r1, #0]
 8013caa:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8013cae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8013cb2:	4302      	orrs	r2, r0
 8013cb4:	600a      	str	r2, [r1, #0]
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	04d1      	lsls	r1, r2, #19
 8013cba:	d506      	bpl.n	8013cca <enet_init+0x2be>
 8013cbc:	4909      	ldr	r1, [pc, #36]	; (8013ce4 <enet_init+0x2d8>)
 8013cbe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8013cc0:	680a      	ldr	r2, [r1, #0]
 8013cc2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8013cc6:	4302      	orrs	r2, r0
 8013cc8:	600a      	str	r2, [r1, #0]
 8013cca:	681a      	ldr	r2, [r3, #0]
 8013ccc:	0492      	lsls	r2, r2, #18
 8013cce:	d506      	bpl.n	8013cde <enet_init+0x2d2>
 8013cd0:	4904      	ldr	r1, [pc, #16]	; (8013ce4 <enet_init+0x2d8>)
 8013cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cd4:	680a      	ldr	r2, [r1, #0]
 8013cd6:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8013cda:	4313      	orrs	r3, r2
 8013cdc:	600b      	str	r3, [r1, #0]
 8013cde:	2001      	movs	r0, #1
 8013ce0:	e6df      	b.n	8013aa2 <enet_init+0x96>
 8013ce2:	bf00      	nop
 8013ce4:	40028000 	andmi	r8, r2, r0
 8013ce8:	200129e0 	andcs	r2, r1, r0, ror #19
 8013cec:	40029000 	andmi	r9, r2, r0
 8013cf0:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08013cf4 <enet_txfifo_flush>:
 8013cf4:	4b06      	ldr	r3, [pc, #24]	; (8013d10 <enet_txfifo_flush+0x1c>)
 8013cf6:	4807      	ldr	r0, [pc, #28]	; (8013d14 <enet_txfifo_flush+0x20>)
 8013cf8:	699a      	ldr	r2, [r3, #24]
 8013cfa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8013cfe:	619a      	str	r2, [r3, #24]
 8013d00:	699a      	ldr	r2, [r3, #24]
 8013d02:	02d2      	lsls	r2, r2, #11
 8013d04:	d502      	bpl.n	8013d0c <enet_txfifo_flush+0x18>
 8013d06:	3801      	subs	r0, #1
 8013d08:	d1fa      	bne.n	8013d00 <enet_txfifo_flush+0xc>
 8013d0a:	4770      	bx	lr
 8013d0c:	2001      	movs	r0, #1
 8013d0e:	4770      	bx	lr
 8013d10:	40029000 	andmi	r9, r2, r0
 8013d14:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08013d18 <enet_tx_enable>:
 8013d18:	4a06      	ldr	r2, [pc, #24]	; (8013d34 <enet_tx_enable+0x1c>)
 8013d1a:	b508      	push	{r3, lr}
 8013d1c:	6813      	ldr	r3, [r2, #0]
 8013d1e:	f043 0308 	orr.w	r3, r3, #8
 8013d22:	6013      	str	r3, [r2, #0]
 8013d24:	f7ff ffe6 	bl	8013cf4 <enet_txfifo_flush>
 8013d28:	4a03      	ldr	r2, [pc, #12]	; (8013d38 <enet_tx_enable+0x20>)
 8013d2a:	6993      	ldr	r3, [r2, #24]
 8013d2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013d30:	6193      	str	r3, [r2, #24]
 8013d32:	bd08      	pop	{r3, pc}
 8013d34:	40028000 	andmi	r8, r2, r0
 8013d38:	40029000 	andmi	r9, r2, r0

08013d3c <enet_enable>:
 8013d3c:	b508      	push	{r3, lr}
 8013d3e:	f7ff ffeb 	bl	8013d18 <enet_tx_enable>
 8013d42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013d46:	f7ff bdcb 	b.w	80138e0 <enet_rx_enable>

08013d4a <enet_desc_information_get>:
 8013d4a:	2905      	cmp	r1, #5
 8013d4c:	d817      	bhi.n	8013d7e <enet_desc_information_get+0x34>
 8013d4e:	e8df f001 	tbb	[pc, r1]
 8013d52:	03091012 	movweq	r1, #36882	; 0x9012
 8013d56:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8013d5a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8013d5e:	4770      	bx	lr
 8013d60:	88c0      	ldrh	r0, [r0, #6]
 8013d62:	e7fa      	b.n	8013d5a <enet_desc_information_get+0x10>
 8013d64:	8840      	ldrh	r0, [r0, #2]
 8013d66:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8013d6a:	2804      	cmp	r0, #4
 8013d6c:	d90a      	bls.n	8013d84 <enet_desc_information_get+0x3a>
 8013d6e:	3804      	subs	r0, #4
 8013d70:	4770      	bx	lr
 8013d72:	6880      	ldr	r0, [r0, #8]
 8013d74:	4770      	bx	lr
 8013d76:	6800      	ldr	r0, [r0, #0]
 8013d78:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8013d7c:	4770      	bx	lr
 8013d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d82:	4770      	bx	lr
 8013d84:	2000      	movs	r0, #0
 8013d86:	4770      	bx	lr

08013d88 <enet_rxframe_drop>:
 8013d88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013d8c:	4814      	ldr	r0, [pc, #80]	; (8013de0 <enet_rxframe_drop+0x58>)
 8013d8e:	b510      	push	{r4, lr}
 8013d90:	6802      	ldr	r2, [r0, #0]
 8013d92:	4914      	ldr	r1, [pc, #80]	; (8013de4 <enet_rxframe_drop+0x5c>)
 8013d94:	6854      	ldr	r4, [r2, #4]
 8013d96:	6013      	str	r3, [r2, #0]
 8013d98:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8013d9c:	680b      	ldr	r3, [r1, #0]
 8013d9e:	d009      	beq.n	8013db4 <enet_rxframe_drop+0x2c>
 8013da0:	b12b      	cbz	r3, 8013dae <enet_rxframe_drop+0x26>
 8013da2:	68da      	ldr	r2, [r3, #12]
 8013da4:	6002      	str	r2, [r0, #0]
 8013da6:	681a      	ldr	r2, [r3, #0]
 8013da8:	b1ba      	cbz	r2, 8013dda <enet_rxframe_drop+0x52>
 8013daa:	600a      	str	r2, [r1, #0]
 8013dac:	bd10      	pop	{r4, pc}
 8013dae:	68d3      	ldr	r3, [r2, #12]
 8013db0:	6003      	str	r3, [r0, #0]
 8013db2:	e7fb      	b.n	8013dac <enet_rxframe_drop+0x24>
 8013db4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8013db8:	4c0b      	ldr	r4, [pc, #44]	; (8013de8 <enet_rxframe_drop+0x60>)
 8013dba:	d006      	beq.n	8013dca <enet_rxframe_drop+0x42>
 8013dbc:	68e2      	ldr	r2, [r4, #12]
 8013dbe:	6002      	str	r2, [r0, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d0f3      	beq.n	8013dac <enet_rxframe_drop+0x24>
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	600b      	str	r3, [r1, #0]
 8013dc8:	e7f0      	b.n	8013dac <enet_rxframe_drop+0x24>
 8013dca:	6824      	ldr	r4, [r4, #0]
 8013dcc:	3210      	adds	r2, #16
 8013dce:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8013dd2:	4422      	add	r2, r4
 8013dd4:	6002      	str	r2, [r0, #0]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d0e8      	beq.n	8013dac <enet_rxframe_drop+0x24>
 8013dda:	3310      	adds	r3, #16
 8013ddc:	e7f3      	b.n	8013dc6 <enet_rxframe_drop+0x3e>
 8013dde:	bf00      	nop
 8013de0:	200129d8 	ldrdcs	r2, [r1], -r8
 8013de4:	200129d0 	ldrdcs	r2, [r1], -r0
 8013de8:	40029000 	andmi	r9, r2, r0

08013dec <enet_rxframe_size_get>:
 8013dec:	b508      	push	{r3, lr}
 8013dee:	4b0c      	ldr	r3, [pc, #48]	; (8013e20 <enet_rxframe_size_get+0x34>)
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	6818      	ldr	r0, [r3, #0]
 8013df4:	2800      	cmp	r0, #0
 8013df6:	db10      	blt.n	8013e1a <enet_rxframe_size_get+0x2e>
 8013df8:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8013dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013e00:	d003      	beq.n	8013e0a <enet_rxframe_size_get+0x1e>
 8013e02:	f7ff ffc1 	bl	8013d88 <enet_rxframe_drop>
 8013e06:	2001      	movs	r0, #1
 8013e08:	bd08      	pop	{r3, pc}
 8013e0a:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8013e0e:	2b21      	cmp	r3, #33	; 0x21
 8013e10:	d0f7      	beq.n	8013e02 <enet_rxframe_size_get+0x16>
 8013e12:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8013e16:	3804      	subs	r0, #4
 8013e18:	e7f6      	b.n	8013e08 <enet_rxframe_size_get+0x1c>
 8013e1a:	2000      	movs	r0, #0
 8013e1c:	e7f4      	b.n	8013e08 <enet_rxframe_size_get+0x1c>
 8013e1e:	bf00      	nop
 8013e20:	200129d8 	ldrdcs	r2, [r1], -r8

08013e24 <enet_initpara_reset>:
 8013e24:	2200      	movs	r2, #0
 8013e26:	4b08      	ldr	r3, [pc, #32]	; (8013e48 <enet_initpara_reset+0x24>)
 8013e28:	e9c3 2200 	strd	r2, r2, [r3]
 8013e2c:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8013e30:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8013e34:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8013e38:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8013e3c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8013e40:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8013e44:	639a      	str	r2, [r3, #56]	; 0x38
 8013e46:	4770      	bx	lr
 8013e48:	200129e0 	andcs	r2, r1, r0, ror #19

08013e4c <enet_deinit>:
 8013e4c:	b508      	push	{r3, lr}
 8013e4e:	f640 200e 	movw	r0, #2574	; 0xa0e
 8013e52:	f7fe fc34 	bl	80126be <rcu_periph_reset_enable>
 8013e56:	f640 200e 	movw	r0, #2574	; 0xa0e
 8013e5a:	f7fe fc32 	bl	80126c2 <rcu_periph_reset_disable>
 8013e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013e62:	f7ff bfdf 	b.w	8013e24 <enet_initpara_reset>
	...

08013e68 <i2c_clock_config>:
 8013e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e6a:	4605      	mov	r5, r0
 8013e6c:	2002      	movs	r0, #2
 8013e6e:	460c      	mov	r4, r1
 8013e70:	4617      	mov	r7, r2
 8013e72:	f7fe fccd 	bl	8012810 <rcu_clock_freq_get>
 8013e76:	4927      	ldr	r1, [pc, #156]	; (8013f14 <i2c_clock_config+0xac>)
 8013e78:	4a27      	ldr	r2, [pc, #156]	; (8013f18 <i2c_clock_config+0xb0>)
 8013e7a:	fbb0 f1f1 	udiv	r1, r0, r1
 8013e7e:	4290      	cmp	r0, r2
 8013e80:	bf34      	ite	cc
 8013e82:	460b      	movcc	r3, r1
 8013e84:	2336      	movcs	r3, #54	; 0x36
 8013e86:	686e      	ldr	r6, [r5, #4]
 8013e88:	4a24      	ldr	r2, [pc, #144]	; (8013f1c <i2c_clock_config+0xb4>)
 8013e8a:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8013e8e:	431e      	orrs	r6, r3
 8013e90:	4294      	cmp	r4, r2
 8013e92:	606e      	str	r6, [r5, #4]
 8013e94:	d816      	bhi.n	8013ec4 <i2c_clock_config+0x5c>
 8013e96:	3101      	adds	r1, #1
 8013e98:	2935      	cmp	r1, #53	; 0x35
 8013e9a:	d90d      	bls.n	8013eb8 <i2c_clock_config+0x50>
 8013e9c:	2336      	movs	r3, #54	; 0x36
 8013e9e:	622b      	str	r3, [r5, #32]
 8013ea0:	0064      	lsls	r4, r4, #1
 8013ea2:	fbb0 f4f4 	udiv	r4, r0, r4
 8013ea6:	2c04      	cmp	r4, #4
 8013ea8:	bf38      	it	cc
 8013eaa:	2404      	movcc	r4, #4
 8013eac:	69e8      	ldr	r0, [r5, #28]
 8013eae:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8013eb2:	4304      	orrs	r4, r0
 8013eb4:	61ec      	str	r4, [r5, #28]
 8013eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013eb8:	2902      	cmp	r1, #2
 8013eba:	d801      	bhi.n	8013ec0 <i2c_clock_config+0x58>
 8013ebc:	2302      	movs	r3, #2
 8013ebe:	e7ee      	b.n	8013e9e <i2c_clock_config+0x36>
 8013ec0:	6229      	str	r1, [r5, #32]
 8013ec2:	e7ed      	b.n	8013ea0 <i2c_clock_config+0x38>
 8013ec4:	4a16      	ldr	r2, [pc, #88]	; (8013f20 <i2c_clock_config+0xb8>)
 8013ec6:	4294      	cmp	r4, r2
 8013ec8:	d8f5      	bhi.n	8013eb6 <i2c_clock_config+0x4e>
 8013eca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013ece:	4353      	muls	r3, r2
 8013ed0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ed8:	3301      	adds	r3, #1
 8013eda:	622b      	str	r3, [r5, #32]
 8013edc:	b997      	cbnz	r7, 8013f04 <i2c_clock_config+0x9c>
 8013ede:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013ee2:	fbb0 f4f4 	udiv	r4, r0, r4
 8013ee6:	69eb      	ldr	r3, [r5, #28]
 8013ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013eec:	61eb      	str	r3, [r5, #28]
 8013eee:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8013ef2:	b90b      	cbnz	r3, 8013ef8 <i2c_clock_config+0x90>
 8013ef4:	f044 0401 	orr.w	r4, r4, #1
 8013ef8:	69eb      	ldr	r3, [r5, #28]
 8013efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013efe:	61eb      	str	r3, [r5, #28]
 8013f00:	69e8      	ldr	r0, [r5, #28]
 8013f02:	e7d6      	b.n	8013eb2 <i2c_clock_config+0x4a>
 8013f04:	2119      	movs	r1, #25
 8013f06:	434c      	muls	r4, r1
 8013f08:	69eb      	ldr	r3, [r5, #28]
 8013f0a:	fbb0 f4f4 	udiv	r4, r0, r4
 8013f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013f12:	e7eb      	b.n	8013eec <i2c_clock_config+0x84>
 8013f14:	000f4240 	andeq	r4, pc, r0, asr #4
 8013f18:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8013f1c:	000186a0 	andeq	r8, r1, r0, lsr #13
 8013f20:	00061a80 	andeq	r1, r6, r0, lsl #21

08013f24 <i2c_ack_config>:
 8013f24:	6803      	ldr	r3, [r0, #0]
 8013f26:	2901      	cmp	r1, #1
 8013f28:	bf0c      	ite	eq
 8013f2a:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8013f2e:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8013f32:	6003      	str	r3, [r0, #0]
 8013f34:	4770      	bx	lr

08013f36 <i2c_ackpos_config>:
 8013f36:	6803      	ldr	r3, [r0, #0]
 8013f38:	b919      	cbnz	r1, 8013f42 <i2c_ackpos_config+0xc>
 8013f3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013f3e:	6003      	str	r3, [r0, #0]
 8013f40:	4770      	bx	lr
 8013f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013f46:	e7fa      	b.n	8013f3e <i2c_ackpos_config+0x8>

08013f48 <i2c_master_addressing>:
 8013f48:	3202      	adds	r2, #2
 8013f4a:	bf0c      	ite	eq
 8013f4c:	f021 0101 	biceq.w	r1, r1, #1
 8013f50:	f041 0101 	orrne.w	r1, r1, #1
 8013f54:	6101      	str	r1, [r0, #16]
 8013f56:	4770      	bx	lr

08013f58 <i2c_enable>:
 8013f58:	6803      	ldr	r3, [r0, #0]
 8013f5a:	f043 0301 	orr.w	r3, r3, #1
 8013f5e:	6003      	str	r3, [r0, #0]
 8013f60:	4770      	bx	lr

08013f62 <i2c_start_on_bus>:
 8013f62:	6803      	ldr	r3, [r0, #0]
 8013f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f68:	6003      	str	r3, [r0, #0]
 8013f6a:	4770      	bx	lr

08013f6c <i2c_stop_on_bus>:
 8013f6c:	6803      	ldr	r3, [r0, #0]
 8013f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013f72:	6003      	str	r3, [r0, #0]
 8013f74:	4770      	bx	lr

08013f76 <i2c_data_transmit>:
 8013f76:	6101      	str	r1, [r0, #16]
 8013f78:	4770      	bx	lr

08013f7a <i2c_data_receive>:
 8013f7a:	6900      	ldr	r0, [r0, #16]
 8013f7c:	b2c0      	uxtb	r0, r0
 8013f7e:	4770      	bx	lr

08013f80 <i2c_flag_get>:
 8013f80:	098b      	lsrs	r3, r1, #6
 8013f82:	5818      	ldr	r0, [r3, r0]
 8013f84:	f001 011f 	and.w	r1, r1, #31
 8013f88:	40c8      	lsrs	r0, r1
 8013f8a:	f000 0001 	and.w	r0, r0, #1
 8013f8e:	4770      	bx	lr

08013f90 <i2c_flag_clear>:
 8013f90:	f240 5301 	movw	r3, #1281	; 0x501
 8013f94:	4299      	cmp	r1, r3
 8013f96:	b510      	push	{r4, lr}
 8013f98:	d102      	bne.n	8013fa0 <i2c_flag_clear+0x10>
 8013f9a:	6943      	ldr	r3, [r0, #20]
 8013f9c:	6983      	ldr	r3, [r0, #24]
 8013f9e:	bd10      	pop	{r4, pc}
 8013fa0:	2201      	movs	r2, #1
 8013fa2:	098c      	lsrs	r4, r1, #6
 8013fa4:	5823      	ldr	r3, [r4, r0]
 8013fa6:	f001 011f 	and.w	r1, r1, #31
 8013faa:	fa02 f101 	lsl.w	r1, r2, r1
 8013fae:	ea23 0101 	bic.w	r1, r3, r1
 8013fb2:	5021      	str	r1, [r4, r0]
 8013fb4:	e7f3      	b.n	8013f9e <i2c_flag_clear+0xe>

08013fb6 <i2s_init>:
 8013fb6:	b510      	push	{r4, lr}
 8013fb8:	69c4      	ldr	r4, [r0, #28]
 8013fba:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 8013fbe:	f024 0408 	bic.w	r4, r4, #8
 8013fc2:	0424      	lsls	r4, r4, #16
 8013fc4:	0c24      	lsrs	r4, r4, #16
 8013fc6:	431c      	orrs	r4, r3
 8013fc8:	4314      	orrs	r4, r2
 8013fca:	430c      	orrs	r4, r1
 8013fcc:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8013fd0:	61c4      	str	r4, [r0, #28]
 8013fd2:	bd10      	pop	{r4, pc}

08013fd4 <i2s_psc_config>:
 8013fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fd8:	4698      	mov	r8, r3
 8013fda:	2302      	movs	r3, #2
 8013fdc:	6203      	str	r3, [r0, #32]
 8013fde:	4b26      	ldr	r3, [pc, #152]	; (8014078 <i2s_psc_config+0xa4>)
 8013fe0:	4617      	mov	r7, r2
 8013fe2:	4298      	cmp	r0, r3
 8013fe4:	bf0c      	ite	eq
 8013fe6:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 8013fea:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8013fee:	4a23      	ldr	r2, [pc, #140]	; (801407c <i2s_psc_config+0xa8>)
 8013ff0:	4605      	mov	r5, r0
 8013ff2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8013ff4:	460e      	mov	r6, r1
 8013ff6:	4018      	ands	r0, r3
 8013ff8:	d036      	beq.n	8014068 <i2s_psc_config+0x94>
 8013ffa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8013ffc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8014000:	1f99      	subs	r1, r3, #6
 8014002:	2908      	cmp	r1, #8
 8014004:	d82c      	bhi.n	8014060 <i2s_psc_config+0x8c>
 8014006:	3302      	adds	r3, #2
 8014008:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 801400a:	f3c0 1003 	ubfx	r0, r0, #4, #4
 801400e:	1c42      	adds	r2, r0, #1
 8014010:	481b      	ldr	r0, [pc, #108]	; (8014080 <i2s_psc_config+0xac>)
 8014012:	fbb0 f0f2 	udiv	r0, r0, r2
 8014016:	4358      	muls	r0, r3
 8014018:	0040      	lsls	r0, r0, #1
 801401a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 801401e:	f04f 010a 	mov.w	r1, #10
 8014022:	d124      	bne.n	801406e <i2s_psc_config+0x9a>
 8014024:	0a04      	lsrs	r4, r0, #8
 8014026:	434c      	muls	r4, r1
 8014028:	fbb4 f4f6 	udiv	r4, r4, r6
 801402c:	260a      	movs	r6, #10
 801402e:	3405      	adds	r4, #5
 8014030:	fbb4 f4f6 	udiv	r4, r4, r6
 8014034:	f004 0301 	and.w	r3, r4, #1
 8014038:	0864      	lsrs	r4, r4, #1
 801403a:	1ea2      	subs	r2, r4, #2
 801403c:	2afd      	cmp	r2, #253	; 0xfd
 801403e:	bf86      	itte	hi
 8014040:	2300      	movhi	r3, #0
 8014042:	2402      	movhi	r4, #2
 8014044:	021b      	lslls	r3, r3, #8
 8014046:	431c      	orrs	r4, r3
 8014048:	ea44 0408 	orr.w	r4, r4, r8
 801404c:	622c      	str	r4, [r5, #32]
 801404e:	69eb      	ldr	r3, [r5, #28]
 8014050:	f023 0307 	bic.w	r3, r3, #7
 8014054:	61eb      	str	r3, [r5, #28]
 8014056:	69ea      	ldr	r2, [r5, #28]
 8014058:	4317      	orrs	r7, r2
 801405a:	61ef      	str	r7, [r5, #28]
 801405c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014060:	2b0f      	cmp	r3, #15
 8014062:	bf08      	it	eq
 8014064:	2314      	moveq	r3, #20
 8014066:	e7cf      	b.n	8014008 <i2s_psc_config+0x34>
 8014068:	f7fe fbd2 	bl	8012810 <rcu_clock_freq_get>
 801406c:	e7d5      	b.n	801401a <i2s_psc_config+0x46>
 801406e:	b90f      	cbnz	r7, 8014074 <i2s_psc_config+0xa0>
 8014070:	0944      	lsrs	r4, r0, #5
 8014072:	e7d8      	b.n	8014026 <i2s_psc_config+0x52>
 8014074:	0984      	lsrs	r4, r0, #6
 8014076:	e7d6      	b.n	8014026 <i2s_psc_config+0x52>
 8014078:	40003800 	andmi	r3, r0, r0, lsl #16
 801407c:	40021000 	andmi	r1, r2, r0
 8014080:	017d7840 	cmneq	sp, r0, asr #16

08014084 <i2s_enable>:
 8014084:	69c3      	ldr	r3, [r0, #28]
 8014086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801408a:	61c3      	str	r3, [r0, #28]
 801408c:	4770      	bx	lr

0801408e <i2s_disable>:
 801408e:	69c3      	ldr	r3, [r0, #28]
 8014090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014094:	61c3      	str	r3, [r0, #28]
 8014096:	4770      	bx	lr

08014098 <spi_dma_enable>:
 8014098:	6843      	ldr	r3, [r0, #4]
 801409a:	b919      	cbnz	r1, 80140a4 <spi_dma_enable+0xc>
 801409c:	f043 0302 	orr.w	r3, r3, #2
 80140a0:	6043      	str	r3, [r0, #4]
 80140a2:	4770      	bx	lr
 80140a4:	f043 0301 	orr.w	r3, r3, #1
 80140a8:	e7fa      	b.n	80140a0 <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

080140ac <vtable for DisplayHandler-0xcc>:
 80140ac:	00000003 	andeq	r0, r0, r3
 80140b0:	000000aa 	andeq	r0, r0, sl, lsr #1
 80140b4:	00000006 	andeq	r0, r0, r6
 80140b8:	00000000 	andeq	r0, r0, r0
 80140bc:	01ff0000 	mvnseq	r0, r0
 80140c0:	00000001 	andeq	r0, r0, r1
 80140c4:	00000001 	andeq	r0, r0, r1
 80140c8:	00000001 	andeq	r0, r0, r1
	...
 80140d4:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
 80140d8:	09080706 	stmdbeq	r8, {r1, r2, r8, r9, sl}
 80140dc:	00000000 	andeq	r0, r0, r0
 80140e0:	04030201 	streq	r0, [r3], #-513	; 0xfffffdff
 80140e4:	343a3531 	ldrtcc	r3, [sl], #-1329	; 0xfffffacf
 80140e8:	35323a39 	ldrcc	r3, [r2, #-2617]!	; 0xfffff5c7
 80140ec:	6e614a00 	vmulvs.f32	s9, s2, s0
 80140f0:	20343120 	eorscs	r3, r4, r0, lsr #2
 80140f4:	32323032 	eorscc	r3, r2, #50	; 0x32
 80140f8:	43417300 	movtmi	r7, #4864	; 0x1300
 80140fc:	3145204e 	cmpcc	r5, lr, asr #32
 8014100:	2031332e 	eorscs	r3, r1, lr, lsr #6
 8014104:	32335b1b 	eorscc	r5, r3, #27648	; 0x6c00
 8014108:	7869506d 	stmdavc	r9!, {r0, r2, r3, r5, r6, ip, lr}^
 801410c:	63206c65 			; <UNDEFINED> instruction: 0x63206c65
 8014110:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 8014114:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 8014118:	317b2072 	cmncc	fp, r2, ror r0
 801411c:	20342078 	eorscs	r2, r4, r8, ror r0
 8014120:	76696e55 			; <UNDEFINED> instruction: 0x76696e55
 8014124:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8014128:	5b1b7d73 	blpl	86f36fc <__exidx_end+0x6dd574>
 801412c:	006d3733 	rsbeq	r3, sp, r3, lsr r7
 8014130:	6f635f2e 	svcvs	0x00635f2e
 8014134:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8014138:	685f2e00 	ldmdavs	pc, {r9, sl, fp, sp}^	; <UNPREDICTABLE>
 801413c:	00707474 	rsbseq	r7, r0, r4, ror r4
 8014140:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8014144:	4341733d 	movtmi	r7, #4925	; 0x133d
 8014148:	3145204e 	cmpcc	r5, lr, asr #32
 801414c:	2031332e 	eorscs	r3, r1, lr, lsr #6
 8014150:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8014154:	4173006c 	cmnmi	r3, ip, rrx
 8014158:	50204e43 	eorpl	r4, r0, r3, asr #28
 801415c:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8014160:	25003120 	strcs	r3, [r0, #-288]	; 0xfffffee0
 8014164:	64253a73 	strtvs	r3, [r5], #-2675	; 0xfffff58d
 8014168:	64254720 	strtvs	r4, [r5], #-1824	; 0xfffff8e0
 801416c:	00732520 	rsbseq	r2, r3, r0, lsr #10
 8014170:	253a7325 	ldrcs	r7, [sl, #-805]!	; 0xfffffcdb
 8014174:	00000075 	andeq	r0, r0, r5, ror r0

08014178 <vtable for DisplayHandler>:
	...
 8014180:	08007edb 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8014184:	08007f31 	stmdaeq	r0, {r0, r4, r5, r8, r9, sl, fp, ip, sp, lr}
 8014188:	08007f5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, fp, ip, sp, lr}

0801418c <vtable for PixelDmxStartStop>:
	...
 8014194:	08007edd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8014198:	08007f3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp, lr}
 801419c:	08007ee1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 80141a0:	08007ef1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}

080141a4 <vtable for Reboot>:
	...
 80141ac:	08007f01 	stmdaeq	r0, {r0, r8, r9, sl, fp, ip, sp, lr}
 80141b0:	08007f25 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, fp, ip, sp, lr}
 80141b4:	08007f05 	stmdaeq	r0, {r0, r2, r8, r9, sl, fp, ip, sp, lr}

080141b8 <CSWTCH.66>:
 80141b8:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 80141bc:	 	eorcc	r3, lr, r6, asr #2

080141bd <SOFTWARE_VERSION>:
 80141bd:	00302e31 	eorseq	r2, r0, r1, lsr lr
 80141c1:	2e393332 	mrccs	3, 1, r3, cr9, cr2, {1}
 80141c5:	2e353532 	mrccs	5, 1, r3, cr5, cr2, {1}
 80141c9:	00302e30 	eorseq	r2, r0, r0, lsr lr
 80141cd:	38342e25 	ldmdacc	r4!, {r0, r2, r5, r9, sl, fp, sp}
 80141d1:	73252073 			; <UNDEFINED> instruction: 0x73252073
 80141d5:	33444700 	movtcc	r4, #18176	; 0x4700
 80141d9:	30314632 	eorscc	r4, r1, r2, lsr r6
 80141dd:	30005237 	andcc	r5, r0, r7, lsr r2
 80141e1:	6f4e202e 	svcvs	0x004e202e
 80141e5:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 80141e9:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 80141ed:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 80141f1:	202c6465 	eorcs	r6, ip, r5, ror #8
 80141f5:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 80141f9:	6f687320 	svcvs	0x00687320
 80141fd:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 8014201:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 8014205:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8014209:	000a216e 	andeq	r2, sl, lr, ror #2
 801420d:	00505448 	subseq	r5, r0, r8, asr #8
 8014211:	0050544c 	subseq	r5, r0, ip, asr #8
 8014215:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8014219:	000a6567 	andeq	r6, sl, r7, ror #10
 801421d:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8014221:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8014225:	203a2065 	eorscs	r2, sl, r5, rrx
 8014229:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801422d:	20000a64 	andcs	r0, r0, r4, ror #20
 8014231:	20444943 	subcs	r4, r4, r3, asr #18
 8014235:	20202020 	eorcs	r2, r0, r0, lsr #32
 8014239:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801423d:	20000a73 	andcs	r0, r0, r3, ror sl
 8014241:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 8014245:	000a7475 	andeq	r7, sl, r5, ror r4
 8014249:	6f502020 	svcvs	0x00502020
 801424d:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
 8014251:	55206432 	strpl	r6, [r0, #-1074]!	; 0xfffffbce
 8014255:	6576696e 	ldrbvs	r6, [r6, #-2414]!	; 0xfffff692
 8014259:	20657372 	rsbcs	r7, r5, r2, ror r3
 801425d:	64332d25 	ldrtvs	r2, [r3], #-3365	; 0xfffff2db
 8014261:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 8014265:	20000a5d 	andcs	r0, r0, sp, asr sl
 8014269:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
 801426d:	20000a74 	andcs	r0, r0, r4, ror sl
 8014271:	726f5020 	rsbvc	r5, pc, #32
 8014275:	32252074 	eorcc	r2, r5, #116	; 0x74
 8014279:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 801427d:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8014281:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 8014285:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8014289:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 801428d:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 8014291:	68636e79 	stmdavs	r3!, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr}^
 8014295:	696e6f72 	stmdbvs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8014299:	6920657a 	stmdbvs	r0!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
 801429d:	69642073 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sp}^
 80142a1:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
 80142a5:	000a6465 	andeq	r6, sl, r5, ror #8

080142a9 <E131MsgConst::START>:
 80142a9:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 80142ad:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80142b1:	43417320 	movtmi	r7, #4896	; 0x1320
 80142b5:	3145204e 	cmpcc	r5, lr, asr #32
 80142b9:	0031332e 	eorseq	r3, r1, lr, lsr #6

080142bd <E131MsgConst::PARAMS>:
 80142bd:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80142c1:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80142c5:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80142c9:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 80142cd:	2e314520 	cfabs64cs	mvdx4, mvdx1
 80142d1:	 	movwvc	r3, #307	; 0x133

080142d4 <E131MsgConst::STARTED>:
 80142d4:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 80142d8:	2e314520 	cfabs64cs	mvdx4, mvdx1
 80142dc:	73203133 			; <UNDEFINED> instruction: 0x73203133
 80142e0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 80142e4:	22006465 	andcs	r6, r0, #1694498816	; 0x65000000
 80142e8:	3a227325 	bcc	88b0f84 <__exidx_end+0x89adfc>
 80142ec:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 80142f0:	2523002c 	strcs	r0, [r3, #-44]!	; 0xffffffd4
 80142f4:	73253d73 			; <UNDEFINED> instruction: 0x73253d73
 80142f8:	2522000a 	strcs	r0, [r2, #-10]!
 80142fc:	253a2273 	ldrcs	r2, [sl, #-627]!	; 0xfffffd8d
 8014300:	23002c64 	movwcs	r2, #3172	; 0xc64
 8014304:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8014308:	69000a64 	stmdbvs	r0, {r2, r5, r6, r9, fp}
 801430c:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 8014310:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 8014314:	00747570 	rsbseq	r7, r4, r0, ror r5
 8014318:	00707468 	rsbseq	r7, r0, r8, ror #8
 801431c:	0070746c 	rsbseq	r7, r0, ip, ror #8
 8014320:	20584d44 	subscs	r4, r8, r4, asr #26
 8014324:	7074754f 	rsbsvc	r7, r4, pc, asr #10
 8014328:	44007475 	strmi	r7, [r0], #-1141	; 0xfffffb8b
 801432c:	4920584d 	stmdbmi	r0!, {r0, r2, r3, r6, fp, ip, lr}
 8014330:	7475706e 	ldrbtvc	r7, [r5], #-110	; 0xffffff92
 8014334:	68744f00 	ldmdavs	r4!, {r8, r9, sl, fp, lr}^
 8014338:	 	strvs	r7, [r0], #-613	; 0xfffffd9b

0801433b <E131ParamsConst::DISABLE_MERGE_TIMEOUT>:
 801433b:	61736964 	cmnvs	r3, r4, ror #18
 801433f:	5f656c62 	svcpl	0x00656c62
 8014343:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8014347:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 801434b:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8013de6 <enet_rxframe_drop+0x5e>
 801434f:	 	stmdbvs	r4!, {r2, r4, r5, r6}^

08014351 <E131ParamsConst::DISABLE_NETWORK_DATA_LOSS_TIMEOUT>:
 8014351:	61736964 	cmnvs	r3, r4, ror #18
 8014355:	5f656c62 	svcpl	0x00656c62
 8014359:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801435d:	5f6b726f 	svcpl	0x006b726f
 8014361:	61746164 	cmnvs	r4, r4, ror #2
 8014365:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
 8014369:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801436d:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8013e08 <enet_rxframe_size_get+0x1c>
 8014371:	 	rsbsvc	r0, r0, #116	; 0x74

08014373 <E131ParamsConst::PRIORITY>:
 8014373:	6f697270 	svcvs	0x00697270
 8014377:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801437b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801437f:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8014383:	72700000 	rsbsvc	r0, r0, #0
 8014387:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801438b:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 801438f:	5f74726f 	svcpl	0x0074726f
 8014393:	00000062 	andeq	r0, r0, r2, rrx
 8014397:	6f697270 	svcvs	0x00697270
 801439b:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 801439f:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80143a3:	00635f74 	rsbeq	r5, r3, r4, ror pc
 80143a7:	72700000 	rsbsvc	r0, r0, #0
 80143ab:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 80143af:	705f7974 	subsvc	r7, pc, r4, ror r9	; <UNPREDICTABLE>
 80143b3:	5f74726f 	svcpl	0x0074726f
 80143b7:	00000064 	andeq	r0, r0, r4, rrx

080143bb <E131ParamsConst::FILE_NAME>:
 80143bb:	31333165 	teqcc	r3, r5, ror #2
 80143bf:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

080143c4 <E117Const::ACN_PACKET_IDENTIFIER>:
 80143c4:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 80143c8:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 80143cc:	00000037 	andeq	r0, r0, r7, lsr r0

080143d0 <E131BridgeConst::VERSION>:
 80143d0:	30251801 	eorcc	r1, r5, r1, lsl #16
 80143d4:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 80143d8:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 80143dc:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 80143e0:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 80143e4:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 80143e8:	30252d78 	eorcc	r2, r5, r8, ror sp
 80143ec:	30257832 	eorcc	r7, r5, r2, lsr r8
 80143f0:	30257832 	eorcc	r7, r5, r2, lsr r8
 80143f4:	30257832 	eorcc	r7, r5, r2, lsr r8
 80143f8:	30257832 	eorcc	r7, r5, r2, lsr r8
 80143fc:	30257832 	eorcc	r7, r5, r2, lsr r8
 8014400:	00007832 	andeq	r7, r0, r2, lsr r8

08014404 <vtable for WS28xxDmx>:
	...
 801440c:	0800a26d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sp, pc}
 8014410:	0800a28d 	stmdaeq	r0, {r0, r2, r3, r7, r9, sp, pc}
 8014414:	0800a2c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, pc}
 8014418:	0800a30f 	stmdaeq	r0, {r0, r1, r2, r3, r8, r9, sp, pc}
 801441c:	0800a377 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r8, r9, sp, pc}
 8014420:	0800a29f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, r9, sp, pc}
 8014424:	0800ac2d 	stmdaeq	r0, {r0, r2, r3, r5, sl, fp, sp, pc}
 8014428:	0800a2dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sp, pc}
 801442c:	0800a265 	stmdaeq	r0, {r0, r2, r5, r6, r9, sp, pc}
 8014430:	0800a269 	stmdaeq	r0, {r0, r3, r5, r6, r9, sp, pc}
 8014434:	0800a337 	stmdaeq	r0, {r0, r1, r2, r4, r5, r8, r9, sp, pc}
 8014438:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801443c:	2a2e253a 	bcs	8b9d92c <__exidx_end+0xb877a4>
 8014440:	23002c66 	movwcs	r2, #3174	; 0xc66
 8014444:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8014448:	0a662a2e 	beq	999ed08 <__exidx_end+0x1988b80>
 801444c:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8014450:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 8014454:	64206574 	strtvs	r6, [r0], #-1396	; 0xfffffa8c
 8014458:	73617461 	cmnvc	r1, #1627389952	; 0x61000000
 801445c:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8014460:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8014464:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 8014468:	74206574 	strtvc	r6, [r0], #-1396	; 0xfffffa8c
 801446c:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
 8014470:	75282067 	strvc	r2, [r8, #-103]!	; 0xffffff99
 8014474:	47002973 	smlsdxmi	r0, r3, r9, r2
 8014478:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 801447c:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8014480:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 8014484:	6162206b 	cmnvs	r2, fp, rrx
 8014488:	20646573 	rsbcs	r6, r4, r3, ror r5
 801448c:	70696863 	rsbvc	r6, r9, r3, ror #16
 8014490:	50410073 	subpl	r0, r1, r3, ror r0
 8014494:	32303141 	eorscc	r3, r0, #1073741840	; 0x40000010
 8014498:	394b532f 	stmdbcc	fp, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 801449c:	00323238 	eorseq	r3, r2, r8, lsr r2
 80144a0:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
 80144a4:	74617020 	strbtvc	r7, [r1], #-32	; 0xffffffe0
 80144a8:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 80144ac:	78695000 	stmdavc	r9!, {ip, lr}^
 80144b0:	44206c65 	strtmi	r6, [r0], #-3173	; 0xfffff39b
 80144b4:	7020584d 	eorvc	r5, r0, sp, asr #16
 80144b8:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 80144bc:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 80144c0:	20000a73 	andcs	r0, r0, r3, ror sl
 80144c4:	756f7247 	strbvc	r7, [pc, #-583]!	; 8014285 <SOFTWARE_VERSION+0xc8>
 80144c8:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 80144cc:	756f6320 	strbvc	r6, [pc, #-800]!	; 80141b4 <vtable for Reboot+0x10>
 80144d0:	3a20746e 	bcc	8831690 <__exidx_end+0x81b508>
 80144d4:	20642520 	rsbcs	r2, r4, r0, lsr #10
 80144d8:	6f72475b 	svcvs	0x0072475b
 80144dc:	20737075 	rsbscs	r7, r3, r5, ror r0
 80144e0:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80144e4:	55000a5d 	strpl	r0, [r0, #-2653]	; 0xfffff5a3
 80144e8:	6f6e6b6e 	svcvs	0x006e6b6e
 80144ec:	 	mcrmi	14, 0, r6, cr0, cr7, {3}

080144ef <s_patternName>:
 80144ef:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 80144fb:	61520000 	cmpvs	r2, r0
 80144ff:	6f626e69 	svcvs	0x00626e69
 8014503:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 8014507:	00656c63 	rsbeq	r6, r5, r3, ror #24
 801450b:	61656854 	cmnvs	r5, r4, asr r8
 801450f:	20726574 	rsbscs	r6, r2, r4, ror r5
 8014513:	73616863 	cmnvc	r1, #6488064	; 0x630000
 8014517:	6f430065 	svcvs	0x00430065
 801451b:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 801451f:	70697720 	rsbvc	r7, r9, r0, lsr #14
 8014523:	00000065 	andeq	r0, r0, r5, rrx
 8014527:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 801452b:	0072656e 	rsbseq	r6, r2, lr, ror #10
 801452f:	00000000 	andeq	r0, r0, r0
 8014533:	61460000 	mrsvs	r0, (UNDEF: 70)
 8014537:	00006564 	andeq	r6, r0, r4, ror #10
	...
 8014543:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 8014547:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 801454b:	 	ldrbmi	r0, [r2, -r4, rrx]

0801454d <PixelType::MAPS>:
 801454d:	00424752 	subeq	r4, r2, r2, asr r7
 8014551:	00474252 	subeq	r4, r7, r2, asr r2
 8014555:	00425247 	subeq	r5, r2, r7, asr #4
 8014559:	00524247 	subseq	r4, r2, r7, asr #4
 801455d:	00475242 	subeq	r5, r7, r2, asr #4
 8014561:	00524742 	subseq	r4, r2, r2, asr #14

08014565 <PixelType::TYPES>:
 8014565:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8014569:	00003130 	andeq	r3, r0, r0, lsr r1
 801456d:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8014571:	00003131 	andeq	r3, r0, r1, lsr r1
 8014575:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8014579:	00003231 	andeq	r3, r0, r1, lsr r2
 801457d:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8014581:	00423231 	subeq	r3, r2, r1, lsr r2
 8014585:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8014589:	00003331 	andeq	r3, r0, r1, lsr r3
 801458d:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8014591:	00003531 	andeq	r3, r0, r1, lsr r5
 8014595:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 8014599:	00003231 	andeq	r3, r0, r1, lsr r2
 801459d:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80145a1:	00573231 	subseq	r3, r7, r1, lsr r2
 80145a5:	31534355 	cmpcc	r3, r5, asr r3
 80145a9:	00333039 	eorseq	r3, r3, r9, lsr r0
 80145ad:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 80145b1:	00333039 	eorseq	r3, r3, r9, lsr r0
 80145b5:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 80145b9:	00003231 	andeq	r3, r0, r1, lsr r2
 80145bd:	31415041 	cmpcc	r1, r1, asr #32
 80145c1:	00003230 	andeq	r3, r0, r0, lsr r2
 80145c5:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80145c9:	00003232 	andeq	r3, r0, r2, lsr r2
 80145cd:	31383950 	teqcc	r8, r0, asr r9
 80145d1:	00000033 	andeq	r0, r0, r3, lsr r0
 80145d5:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80145d9:	6170206c 	cmnvs	r0, ip, rrx
 80145dd:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 80145e1:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 80145e5:	5420000a 	strtpl	r0, [r0], #-10
 80145e9:	20657079 	rsbcs	r7, r5, r9, ror r0
 80145ed:	3a202020 	bcc	881c675 <__exidx_end+0x8064ed>
 80145f1:	20732520 	rsbscs	r2, r3, r0, lsr #10
 80145f5:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 80145f9:	4320000a 			; <UNDEFINED> instruction: 0x4320000a
 80145fd:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 8014601:	3a202020 	bcc	881c689 <__exidx_end+0x806501>
 8014605:	0a642520 	beq	991da8d <__exidx_end+0x1907905>
 8014609:	614d2000 	mrsvs	r2, (UNDEF: 77)
 801460d:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
 8014611:	203a2067 	eorscs	r2, sl, r7, rrx
 8014615:	5b207325 	blpl	88312b1 <__exidx_end+0x81b129>
 8014619:	0a5d6425 	beq	976d6b5 <__exidx_end+0x175752d>
 801461d:	30542000 	subscc	r2, r4, r0
 8014621:	20202048 	eorcs	r2, r0, r8, asr #32
 8014625:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8014629:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 801462d:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 8014631:	0a5d5825 	beq	976a6cd <__exidx_end+0x1754545>
 8014635:	31542000 	cmpcc	r4, r0
 8014639:	20202048 	eorcs	r2, r0, r8, asr #32
 801463d:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8014641:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 8014645:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 8014649:	0a5d5825 	beq	976a6e5 <__exidx_end+0x175455d>
 801464d:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 8014651:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8014655:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8014659:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 801465d:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8014661:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 8014665:	6425000a 	strtvs	r0, [r5], #-10
 8014669:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801466d:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8014671:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 8014675:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 8014679:	000a6425 	andeq	r6, sl, r5, lsr #8
 801467d:	4f006e4f 	svcmi	0x00006e4f
 8014681:	64006666 	strvs	r6, [r0], #-1638	; 0xfffff99a
 8014685:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8014689:	253a7961 	ldrcs	r7, [sl, #-2401]!	; 0xfffff69f
 801468d:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 8014691:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8014695:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 8014699:	70750073 	rsbsvc	r0, r5, r3, ror r0
 801469d:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 80146a1:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 80146a5:	45000a73 	strmi	r0, [r0, #-2675]	; 0xfffff58d
 80146a9:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 80146ad:	65673f23 	strbvs	r3, [r7, #-3875]!	; 0xfffff0dd
 80146b1:	64000a74 	strvs	r0, [r0], #-2676	; 0xfffff58c
 80146b5:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 80146b9:	00237961 	eoreq	r7, r3, r1, ror #18
 80146bd:	4f525245 	svcmi	0x00525245
 80146c1:	0a3f2352 	beq	8fdd411 <__exidx_end+0xfc7289>
 80146c5:	52524500 	subspl	r4, r2, #0, 10
 80146c9:	2123524f 			; <UNDEFINED> instruction: 0x2123524f
 80146cd:	6572000a 	ldrbvs	r0, [r2, #-10]!
 80146d1:	746f6f62 	strbtvc	r6, [pc], #-3938	; 80146d9 <PixelType::TYPES+0x174>
 80146d5:	6c002323 	stcvs	3, cr2, [r0], {35}	; 0x23
 80146d9:	23747369 	cmncs	r4, #-1543503871	; 0xa4000001
 80146dd:	73696c00 	cmnvc	r9, #0, 24
 80146e1:	002a2374 	eoreq	r2, sl, r4, ror r3
 80146e5:	69747075 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, ip, sp, lr}^
 80146e9:	0023656d 	eoreq	r6, r3, sp, ror #10
 80146ed:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80146f1:	236e6f69 	cmncs	lr, #420	; 0x1a4
 80146f5:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 80146f9:	61660023 	cmnvs	r6, r3, lsr #32
 80146fd:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8014701:	00232379 	eoreq	r2, r3, r9, ror r3

08014705 <s_Node>:
 8014705:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8014709:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8014715:	41730000 	cmnmi	r3, r0
 8014719:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 801471d:	31332e31 	teqcc	r3, r1, lsr lr
	...
 8014729:	2043534f 	subcs	r5, r3, pc, asr #6
 801472d:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8014731:	00007265 	andeq	r7, r0, r5, ror #4
 8014735:	00000000 	andeq	r0, r0, r0
 8014739:	544c0000 	strbpl	r0, [ip], #-0
 801473d:	00000043 	andeq	r0, r0, r3, asr #32
	...
 801474d:	2043534f 	subcs	r5, r3, pc, asr #6
 8014751:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 8014755:	0000746e 	andeq	r7, r0, lr, ror #8
 8014759:	00000000 	andeq	r0, r0, r0
 801475d:	44520000 	ldrbmi	r0, [r2], #-0
 8014761:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 8014765:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 8014769:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 801476d:	0000796c 	andeq	r7, r0, ip, ror #18
 8014771:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 8014775:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8014781:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 8014785:	00004944 	andeq	r4, r0, r4, asr #18
	...
 8014795:	00504444 	subseq	r4, r0, r4, asr #8
	...

080147a7 <s_Output>:
 80147a7:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 80147b3:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 80147bf:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 80147c3:	00726f74 	rsbseq	r6, r2, r4, ror pc
 80147c7:	00000000 	andeq	r0, r0, r0
 80147cb:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80147cf:	0000006c 	andeq	r0, r0, ip, rrx
 80147d3:	00000000 	andeq	r0, r0, r0
 80147d7:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 80147db:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 80147df:	00000000 	andeq	r0, r0, r0
 80147e3:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 80147ef:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80147f3:	00006769 	andeq	r6, r0, r9, ror #14
 80147f7:	00000000 	andeq	r0, r0, r0
 80147fb:	70657453 	rsbvc	r7, r5, r3, asr r4
 80147ff:	00726570 	rsbseq	r6, r2, r0, ror r5
 8014803:	00000000 	andeq	r0, r0, r0
 8014807:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 801480b:	00007265 	andeq	r7, r0, r5, ror #4
 801480f:	00000000 	andeq	r0, r0, r0
 8014813:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8014817:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801481b:	00000000 	andeq	r0, r0, r0
 801481f:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 8014823:	00006c61 	andeq	r6, r0, r1, ror #24
 8014827:	00000000 	andeq	r0, r0, r0
 801482b:	20424752 	subcs	r4, r2, r2, asr r7
 801482f:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 8014833:	0000006c 	andeq	r0, r0, ip, rrx
	...

08014838 <RemoteConfig::s_GET>:
 8014838:	0800ccf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, sl, fp, lr, pc}
 801483c:	00000000 	andeq	r0, r0, r0
 8014840:	080146cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, sl, lr}
 8014844:	00000008 	andeq	r0, r0, r8
 8014848:	0800c2bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, lr, pc}
 801484c:	00000000 	andeq	r0, r0, r0
 8014850:	080146d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, sl, lr}
 8014854:	00000005 	andeq	r0, r0, r5
 8014858:	0800c2bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, lr, pc}
 801485c:	00000000 	andeq	r0, r0, r0
 8014860:	080146de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r9, sl, lr}
 8014864:	00000006 	andeq	r0, r0, r6
 8014868:	0800c431 	stmdaeq	r0, {r0, r4, r5, sl, lr, pc}
 801486c:	00000000 	andeq	r0, r0, r0
 8014870:	080146e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9, sl, lr}
 8014874:	00000007 	andeq	r0, r0, r7
 8014878:	0800c3f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, lr, pc}
 801487c:	00000000 	andeq	r0, r0, r0
 8014880:	080146ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9, sl, lr}
 8014884:	00000008 	andeq	r0, r0, r8
 8014888:	0800c39d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, lr, pc}
 801488c:	00000000 	andeq	r0, r0, r0
 8014890:	080146b4 	stmdaeq	r1, {r2, r4, r5, r7, r9, sl, lr}
 8014894:	00000008 	andeq	r0, r0, r8
 8014898:	0800c685 	stmdaeq	r0, {r0, r2, r7, r9, sl, lr, pc}
 801489c:	00000000 	andeq	r0, r0, r0
 80148a0:	080146f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r9, sl, lr}
 80148a4:	00010004 	andeq	r0, r1, r4
 80148a8:	0800c9e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, fp, lr, pc}
 80148ac:	00000000 	andeq	r0, r0, r0
 80148b0:	080146fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r9, sl, lr}
 80148b4:	00000009 	andeq	r0, r0, r9
 80148b8:	6f626552 	svcvs	0x00626552
 80148bc:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 80148c0:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 80148c4:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 80148c8:	6f6f6265 	svcvs	0x006f6265
 80148cc:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80148d0:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 80148d4:	6f637200 	svcvs	0x00637200
 80148d8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 80148dc:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80148e0:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 80148e4:	6b726f77 	blvs	9cb06c8 <__exidx_end+0x1c9a540>
 80148e8:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80148ec:	73696400 	cmnvc	r9, #0, 8
 80148f0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80148f4:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 80148f8:	33316500 	teqcc	r1, #0, 10
 80148fc:	78742e31 	ldmdavc	r4!, {r0, r4, r5, r9, sl, fp, sp}^
 8014900:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 8014904:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8014908:	78742e73 	ldmdavc	r4!, {r0, r1, r4, r5, r6, r9, sl, fp, sp}^
 801490c:	00000074 	andeq	r0, r0, r4, ror r0

08014910 <RemoteConfig::s_TXT>:
 8014910:	0800c68d 	stmdaeq	r0, {r0, r2, r3, r7, r9, sl, lr, pc}
 8014914:	00000000 	andeq	r0, r0, r0
 8014918:	0800c911 	stmdaeq	r0, {r0, r4, r8, fp, lr, pc}
 801491c:	00000000 	andeq	r0, r0, r0
 8014920:	080148d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, fp, lr}
 8014924:	0000000b 	andeq	r0, r0, fp
 8014928:	0000000c 	andeq	r0, r0, ip
 801492c:	0800c6b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, lr, pc}
 8014930:	00000000 	andeq	r0, r0, r0
 8014934:	0800c941 	stmdaeq	r0, {r0, r6, r8, fp, lr, pc}
 8014938:	00000000 	andeq	r0, r0, r0
 801493c:	080148e1 	stmdaeq	r1, {r0, r5, r6, r7, fp, lr}
 8014940:	0000000b 	andeq	r0, r0, fp
 8014944:	00000000 	andeq	r0, r0, r0
 8014948:	0800c73d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, lr, pc}
 801494c:	00000000 	andeq	r0, r0, r0
 8014950:	0800c9b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, fp, lr, pc}
 8014954:	00000000 	andeq	r0, r0, r0
 8014958:	080148ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, lr}
 801495c:	0000000b 	andeq	r0, r0, fp
 8014960:	0000000f 	andeq	r0, r0, pc
 8014964:	0800c6e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, lr, pc}
 8014968:	00000000 	andeq	r0, r0, r0
 801496c:	0800c969 	stmdaeq	r0, {r0, r3, r5, r6, r8, fp, lr, pc}
 8014970:	00000000 	andeq	r0, r0, r0
 8014974:	080148f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, fp, lr}
 8014978:	00000008 	andeq	r0, r0, r8
 801497c:	00000004 	andeq	r0, r0, r4
 8014980:	0800c711 	stmdaeq	r0, {r0, r4, r8, r9, sl, lr, pc}
 8014984:	00000000 	andeq	r0, r0, r0
 8014988:	0800c991 	stmdaeq	r0, {r0, r4, r7, r8, fp, lr, pc}
 801498c:	00000000 	andeq	r0, r0, r0
 8014990:	08014902 	stmdaeq	r1, {r1, r8, fp, lr}
 8014994:	0000000b 	andeq	r0, r0, fp
 8014998:	00000003 	andeq	r0, r0, r3
 801499c:	45470020 	strbmi	r0, [r7, #-32]	; 0xffffffe0
 80149a0:	4f500054 	svcmi	0x00500054
 80149a4:	48005453 	stmdami	r0, {r0, r1, r4, r6, sl, ip, lr}
 80149a8:	00505454 	subseq	r5, r0, r4, asr r4
 80149ac:	31000a20 	tstcc	r0, r0, lsr #20
 80149b0:	3a00312e 	bcc	8020e70 <__exidx_end+0xace8>
 80149b4:	6e6f4300 	cdpvs	3, 6, cr4, cr15, cr0, {0}
 80149b8:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
 80149bc:	7079542d 	rsbsvc	r5, r9, sp, lsr #8
 80149c0:	3b200065 	blcc	8814b5c <__exidx_end+0x7fe9d4>
 80149c4:	70706100 	rsbsvc	r6, r0, r0, lsl #2
 80149c8:	6163696c 	cmnvs	r3, ip, ror #18
 80149cc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80149d0:	6f736a2f 	svcvs	0x00736a2f
 80149d4:	6f43006e 	svcvs	0x0043006e
 80149d8:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 80149dc:	654c2d74 	strbvs	r2, [ip, #-3444]	; 0xfffff28c
 80149e0:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 80149e4:	6e692f00 	cdpvs	15, 6, cr2, cr9, cr0, {0}
 80149e8:	2e786564 	cdpcs	5, 7, cr6, cr8, cr4, {3}
 80149ec:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80149f0:	74732f00 	ldrbtvc	r2, [r3], #-3840	; 0xfffff100
 80149f4:	73656c79 	cmnvc	r5, #30976	; 0x7900
 80149f8:	7373632e 	cmnvc	r3, #-1207959552	; 0xb8000000
 80149fc:	6e692f00 	cdpvs	15, 6, cr2, cr9, cr0, {0}
 8014a00:	2e786564 	cdpcs	5, 7, cr6, cr8, cr4, {3}
 8014a04:	2f00736a 	svccs	0x0000736a
 8014a08:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8014a0c:	696c002f 	stmdbvs	ip!, {r0, r1, r2, r3, r5}^
 8014a10:	76007473 			; <UNDEFINED> instruction: 0x76007473
 8014a14:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8014a18:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xfffff191
 8014a1c:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8014a20:	69640065 	stmdbvs	r4!, {r0, r2, r5, r6}^
 8014a24:	616c7073 	smcvs	50947	; 0xc703
 8014a28:	69640079 	stmdbvs	r4!, {r0, r3, r4, r5, r6}^
 8014a2c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8014a30:	0079726f 	rsbseq	r7, r9, pc, ror #4
 8014a34:	6f736a2f 	svcvs	0x00736a2f
 8014a38:	63612f6e 	cmnvs	r1, #440	; 0x1b8
 8014a3c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8014a40:	62657200 	rsbvs	r7, r5, #0, 4
 8014a44:	00746f6f 	rsbseq	r6, r4, pc, ror #30
 8014a48:	6e656469 	cdpvs	4, 6, cr6, cr5, cr9, {3}
 8014a4c:	79666974 	stmdbvc	r6!, {r2, r4, r5, r6, r8, fp, sp, lr}^
 8014a50:	44213c00 	strtmi	r3, [r1], #-3072	; 0xfffff400
 8014a54:	5954434f 	ldmdbpl	r4, {r0, r1, r2, r3, r6, r8, r9, lr}^
 8014a58:	68204550 	stmdavs	r0!, {r4, r6, r8, sl, lr}
 8014a5c:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8014a60:	74683c0a 	strbtvc	r3, [r8], #-3082	; 0xfffff3f6
 8014a64:	0a3e6c6d 	beq	8fafc20 <__exidx_end+0xf99a98>
 8014a68:	6165683c 	cmnvs	r5, ip, lsr r8
 8014a6c:	743c3e64 	ldrtvc	r3, [ip], #-3684	; 0xfffff19c
 8014a70:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8014a74:	6275533e 	rsbsvs	r5, r5, #-134217728	; 0xf8000000
 8014a78:	3c74696d 			; <UNDEFINED> instruction: 0x3c74696d
 8014a7c:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8014a80:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8014a84:	6165682f 	cmnvs	r5, pc, lsr #16
 8014a88:	3c0a3e64 	stccc	14, cr3, [sl], {100}	; 0x64
 8014a8c:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8014a90:	31683c3e 	cmncc	r8, lr, lsr ip
 8014a94:	3c4b4f3e 	mcrrcc	15, 3, r4, fp, cr14
 8014a98:	3e31682f 	cdpcc	8, 3, cr6, cr1, cr15, {1}
 8014a9c:	6f622f3c 	svcvs	0x00622f3c
 8014aa0:	0a3e7964 	beq	8fb3038 <__exidx_end+0xf9ceb0>
 8014aa4:	74682f3c 	strbtvc	r2, [r8], #-3900	; 0xfffff0c4
 8014aa8:	0a3e6c6d 	beq	8fafc64 <__exidx_end+0xf99adc>
 8014aac:	71655200 	cmnvc	r5, r0, lsl #4
 8014ab0:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 8014ab4:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 8014ab8:	20797469 	rsbscs	r7, r9, r9, ror #8
 8014abc:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 8014ac0:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 8014ac4:	6f4e0065 	svcvs	0x004e0065
 8014ac8:	6f462074 	svcvs	0x00462074
 8014acc:	00646e75 	rsbeq	r6, r4, r5, ror lr
 8014ad0:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
 8014ad4:	2d747365 	ldclcs	3, cr7, [r4, #-404]!	; 0xfffffe6c
 8014ad8:	20495255 	subcs	r5, r9, r5, asr r2
 8014adc:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 8014ae0:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 8014ae4:	72655600 	rsbvc	r5, r5, #0, 12
 8014ae8:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8014aec:	746f4e20 	strbtvc	r4, [pc], #-3616	; 8014af4 <RemoteConfig::s_TXT+0x1e4>
 8014af0:	70755320 	rsbsvc	r5, r5, r0, lsr #6
 8014af4:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8014af8:	4d006465 	cfstrsmi	mvf6, [r0, #-404]	; 0xfffffe6c
 8014afc:	6f687465 	svcvs	0x00687465
 8014b00:	6f4e2064 	svcvs	0x004e2064
 8014b04:	6d492074 	stclvs	0, cr2, [r9, #-464]	; 0xfffffe30
 8014b08:	6d656c70 	stclvs	12, cr6, [r5, #-448]!	; 0xfffffe40
 8014b0c:	65746e65 	ldrbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8014b10:	61420064 	cmpvs	r2, r4, rrx
 8014b14:	65522064 	ldrbvs	r2, [r2, #-100]	; 0xffffff9c
 8014b18:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 8014b1c:	6e550074 	mrcvs	0, 2, r0, cr5, cr4, {3}
 8014b20:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 8014b24:	7245206e 	subvc	r2, r5, #110	; 0x6e
 8014b28:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8014b2c:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
 8014b30:	6c616e72 	stclvs	14, cr6, [r1], #-456	; 0xfffffe38
 8014b34:	72655320 	rsbvc	r5, r5, #32, 6	; 0x80000000
 8014b38:	20726576 	rsbscs	r6, r2, r6, ror r5
 8014b3c:	6f727245 	svcvs	0x00727245
 8014b40:	4b4f0072 	blmi	93d4d10 <__exidx_end+0x13beb88>
 8014b44:	44213c00 	strtmi	r3, [r1], #-3072	; 0xfffff400
 8014b48:	5954434f 	ldmdbpl	r4, {r0, r1, r2, r3, r6, r8, r9, lr}^
 8014b4c:	68204550 	stmdavs	r0!, {r4, r6, r8, sl, lr}
 8014b50:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8014b54:	74683c0a 	strbtvc	r3, [r8], #-3082	; 0xfffff3f6
 8014b58:	0a3e6c6d 	beq	8fafd14 <__exidx_end+0xf99b8c>
 8014b5c:	6165683c 	cmnvs	r5, ip, lsr r8
 8014b60:	743c3e64 	ldrtvc	r3, [ip], #-3684	; 0xfffff19c
 8014b64:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8014b68:	2075253e 	rsbscs	r2, r5, lr, lsr r5
 8014b6c:	2f3c7325 	svccs	0x003c7325
 8014b70:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8014b74:	2f3c3e65 	svccs	0x003c3e65
 8014b78:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 8014b7c:	623c0a3e 	eorsvs	r0, ip, #253952	; 0x3e000
 8014b80:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8014b84:	3e31683c 	mrccc	8, 1, r6, cr1, cr12, {1}
 8014b88:	2f3c7325 	svccs	0x003c7325
 8014b8c:	3c3e3168 	ldfccs	f3, [lr], #-416	; 0xfffffe60
 8014b90:	646f622f 	strbtvs	r6, [pc], #-559	; 8014b98 <RemoteConfig::s_TXT+0x288>
 8014b94:	3c0a3e79 	stccc	14, cr3, [sl], {121}	; 0x79
 8014b98:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8014b9c:	000a3e6c 	andeq	r3, sl, ip, ror #28
 8014ba0:	50545448 	subspl	r5, r4, r8, asr #8
 8014ba4:	312e312f 			; <UNDEFINED> instruction: 0x312e312f
 8014ba8:	20752520 	rsbscs	r2, r5, r0, lsr #10
 8014bac:	0a0d7325 	beq	8371848 <__exidx_end+0x35b6c0>
 8014bb0:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8014bb4:	203a7265 	eorscs	r7, sl, r5, ror #4
 8014bb8:	0a0d7325 	beq	8371854 <__exidx_end+0x35b6cc>
 8014bbc:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8014bc0:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8014bc4:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
 8014bc8:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8014bcc:	6f430a0d 	svcvs	0x00430a0d
 8014bd0:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8014bd4:	654c2d74 	strbvs	r2, [ip, #-3444]	; 0xfffff28c
 8014bd8:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
 8014bdc:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 8014be0:	6f430a0d 	svcvs	0x00430a0d
 8014be4:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 8014be8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8014bec:	6c63203a 	stclvs	0, cr2, [r3], #-232	; 0xffffff18
 8014bf0:	0d65736f 	stcleq	3, cr7, [r5, #-444]!	; 0xfffffe44
 8014bf4:	000a0d0a 	andeq	r0, sl, sl, lsl #26

08014bf8 <contentType>:
 8014bf8:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8014bfc:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8014c00:	0000006c 	andeq	r0, r0, ip, rrx
	...
 8014c18:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8014c1c:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 8014c38:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8014c3c:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8014c40:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8014c44:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 8014c58:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 8014c5c:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 8014c60:	2f6e6f69 	svccs	0x006e6f69
 8014c64:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

08014c78 <RemoteConfigConst::PARAMS_DISABLE>:
 8014c78:	61736964 	cmnvs	r3, r4, ror #18
 8014c7c:	00656c62 	rsbeq	r6, r5, r2, ror #24

08014c80 <RemoteConfigConst::PARAMS_FILE_NAME>:
 8014c80:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8014c84:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8014c88:	00747874 	rsbseq	r7, r4, r4, ror r8

08014c8c <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 8014c8c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8014c90:	5f79616c 	svcpl	0x0079616c
 8014c94:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08014c99 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 8014c99:	61736964 	cmnvs	r3, r4, ror #18
 8014c9d:	5f656c62 	svcpl	0x00656c62
 8014ca1:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 8014ca5:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08014ca7 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 8014ca7:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8014cab:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8014caf:	6f6f6265 	svcvs	0x006f6265
 8014cb3:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

08014cb5 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 8014cb5:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8014cb9:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 8014755 <s_Node+0x50>
 8014cbd:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8014cc1:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08014cc3 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8014cc3:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8014cc7:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8014ccb:	6f746361 	svcvs	0x00746361
 8014ccf:	7b007972 	blvc	803329f <__exidx_end+0x1d117>
 8014cd3:	73696c22 	cmnvc	r9, #8704	; 0x2200
 8014cd7:	7b3a2274 	blvc	8e9d6af <__exidx_end+0xe87527>
 8014cdb:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8014cdf:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8014ce3:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8014ce7:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8014ceb:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8014cef:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8014cf3:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8014cf7:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8014cfb:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8014cff:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8014d03:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8014d07:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8014d0b:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8014d0f:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8014d13:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8014d17:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8014d1b:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8014d1f:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8014d23:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8014d27:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8014d2b:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8014d2f:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8014d33:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8014d37:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8014d3b:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8014d3f:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8014d43:	616f6222 	cmnvs	pc, r2, lsr #4
 8014d47:	3a226472 	bcc	88adf17 <__exidx_end+0x897d8f>
 8014d4b:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8014d4f:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8014d53:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 8014d57:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 8014d5b:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 8014d5f:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8014d63:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8014d67:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 8014d6b:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 8014d6f:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 8014d73:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8014d77:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 8014d7b:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8014d7f:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 8014d83:	7b000a7d 	blvc	801777f <__exidx_end+0x15f7>
 8014d87:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 8014d8b:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8014d8f:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 8014d93:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8014d97:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8014d9b:	7b3a2273 	blvc	8e9d76f <__exidx_end+0xe875e7>
 8014d9f:	33316522 	teqcc	r1, #142606336	; 0x8800000
 8014da3:	78742e31 	ldmdavc	r4!, {r0, r4, r5, r9, sl, fp, sp}^
 8014da7:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8014dab:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 8014daf:	2e314520 	cfabs64cs	mvdx4, mvdx1
 8014db3:	2c223133 	stfcss	f3, [r2], #-204	; 0xffffff34
 8014db7:	76656422 	strbtvc	r6, [r5], -r2, lsr #8
 8014dbb:	73656369 	cmnvc	r5, #-1543503871	; 0xa4000001
 8014dbf:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8014dc3:	44223a22 	strtmi	r3, [r2], #-2594	; 0xfffff5de
 8014dc7:	5020584d 	eorpl	r5, r0, sp, asr #16
 8014dcb:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 8014dcf:	64222c22 	strtvs	r2, [r2], #-3106	; 0xfffff3de
 8014dd3:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8014dd7:	742e7961 	strtvc	r7, [lr], #-2401	; 0xfffff69f
 8014ddb:	3a227478 	bcc	88b1fc3 <__exidx_end+0x89be3b>
 8014ddf:	73694422 	cmnvc	r9, #570425344	; 0x22000000
 8014de3:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8014de7:	46445520 	strbmi	r5, [r4], -r0, lsr #10
 8014deb:	6e222c22 	cdpvs	12, 2, cr2, cr2, cr2, {1}
 8014def:	6f777465 	svcvs	0x00777465
 8014df3:	742e6b72 	strtvc	r6, [lr], #-2930	; 0xfffff48e
 8014df7:	3a227478 	bcc	88b1fdf <__exidx_end+0x89be57>
 8014dfb:	74654e22 	strbtvc	r4, [r5], #-3618	; 0xfffff1de
 8014dff:	6b726f77 	blvs	9cb0be3 <__exidx_end+0x1c9aa5b>
 8014e03:	72222c22 	eorvc	r2, r2, #8704	; 0x2200
 8014e07:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 8014e0b:	742e6769 	strtvc	r6, [lr], #-1897	; 0xfffff897
 8014e0f:	3a227478 	bcc	88b1ff7 <__exidx_end+0x89be6f>
 8014e13:	6d655222 	sfmvs	f5, 2, [r5, #-136]!	; 0xffffff78
 8014e17:	2065746f 	rsbcs	r7, r5, pc, ror #8
 8014e1b:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 8014e1f:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8014e23:	6f697461 	svcvs	0x00697461
 8014e27:	7d7d226e 	lfmvc	f2, 2, [sp, #-440]!	; 0xfffffe48
	...

08014e2c <index_html>:
 8014e2c:	4f44213c 	svcmi	0x0044213c
 8014e30:	50595443 	subspl	r5, r9, r3, asr #8
 8014e34:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 8014e38:	0a3e6c6d 	beq	8fafff4 <__exidx_end+0xf99e6c>
 8014e3c:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 8014e40:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8014e44:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 8014e48:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 8014e4c:	6b6e696c 	blvs	9baf404 <__exidx_end+0x1b9927c>
 8014e50:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 8014e54:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 8014e58:	73656c79 	cmnvc	r5, #30976	; 0x7900
 8014e5c:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8014e60:	72682022 	rsbvc	r2, r8, #34	; 0x22
 8014e64:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 8014e68:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8014e6c:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8014e70:	20227373 	eorcs	r7, r2, r3, ror r3
 8014e74:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 8014e78:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8014e7c:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8014e80:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8014e84:	0a3e656c 	beq	8fae43c <__exidx_end+0xf982b4>
 8014e88:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8014e8c:	0a3e6461 	beq	8fae018 <__exidx_end+0xf97e90>
 8014e90:	646f623c 	strbtvs	r6, [pc], #-572	; 8014e98 <index_html+0x6c>
 8014e94:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8014e98:	6165683c 	cmnvs	r5, ip, lsr r8
 8014e9c:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8014ea0:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8014ea4:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8014ea8:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 8014eac:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8014eb0:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8014eb4:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8014eb8:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8014ebc:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8014ec0:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8014ec4:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8014ec8:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 8014ecc:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8014ed0:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8014ed4:	6f746365 	svcvs	0x00746365
 8014ed8:	20227972 	eorcs	r7, r2, r2, ror r9
 8014edc:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8014ee0:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 8014ee4:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8014ee8:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8014eec:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8014ef0:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 8014ef4:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8014ef8:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 8014efc:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 8014f00:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 8014f04:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 8014f08:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 8014f0c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8014f10:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8014f14:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 8014f18:	20227478 	eorcs	r7, r2, r8, ror r4
 8014f1c:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8014f20:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 8014f24:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 8014f28:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 8014f2c:	0a3e656c 	beq	8fae4e4 <__exidx_end+0xf9835c>
 8014f30:	6f663c09 	svcvs	0x00663c09
 8014f34:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 8014f38:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 8014f3c:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8014f40:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 8014f44:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8014f48:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 8014f4c:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8014f50:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 8014f54:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8014f58:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8014f5c:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 8014f60:	20747069 	rsbscs	r7, r4, r9, rrx
 8014f64:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 8014f68:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 8014f6c:	6a2e7865 	bvs	8bb3108 <__exidx_end+0xb9cf80>
 8014f70:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 8014f74:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 8014f78:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 8014f7c:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 8014f80:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8014f84:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8014f88:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8014f8c:	 	svcvs	0x0062000a

08014f8e <styles_css>:
 8014f8e:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8014f92:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8014f96:	63616220 	cmnvs	r1, #32, 4
 8014f9a:	6f72676b 	svcvs	0x0072676b
 8014f9e:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 8014fa2:	6f6c6f63 	svcvs	0x006c6f63
 8014fa6:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8014faa:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8014fae:	30322c30 	eorscc	r2, r2, r0, lsr ip
 8014fb2:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8014fb6:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8014fba:	6f6c6f63 	svcvs	0x006c6f63
 8014fbe:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8014fc2:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8014fc6:	202c3535 	eorcs	r3, ip, r5, lsr r5
 8014fca:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 8014fce:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 8014fd2:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8014fd6:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 8014fda:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8014fde:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8014fe2:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8014fe6:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8014fea:	0a3b7865 	beq	8ef3186 <__exidx_end+0xedcffe>
 8014fee:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 8014ff2:	0a7b2069 	beq	9edd19e <__exidx_end+0x1ec7016>
 8014ff6:	696c2020 	stmdbvs	ip!, {r5, sp}^
 8014ffa:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 8014ffe:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 8015002:	6f6e203a 	svcvs	0x006e203a
 8015006:	0a3b656e 	beq	8eee5c6 <__exidx_end+0xed843e>
 801500a:	616d2020 	cmnvs	sp, r0, lsr #32
 801500e:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 8015012:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 8015016:	70352078 	eorsvc	r2, r5, r8, ror r0
 801501a:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 801501e:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 8015022:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8015026:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801502a:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801502e:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015032:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8015036:	0a3b7865 	beq	8ef31d2 <__exidx_end+0xedd04a>
 801503a:	6f622020 	svcvs	0x00622020
 801503e:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8015042:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8015046:	3a737569 	bcc	9cf25f2 <__exidx_end+0x1cdc46a>
 801504a:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 801504e:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8015052:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8015056:	203a7265 	eorscs	r7, sl, r5, ror #4
 801505a:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801505e:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8015062:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8015066:	0a3b7870 	beq	8ef322e <__exidx_end+0xedd0a6>
 801506a:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 801506e:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8015072:	0a7b2072 	beq	9edd242 <__exidx_end+0x1ec70ba>
 8015076:	69642020 	stmdbvs	r4!, {r5, sp}^
 801507a:	616c7073 	smcvs	50947	; 0xc703
 801507e:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 8015082:	3b78656c 	blcc	9e2e63a <__exidx_end+0x1e184b2>
 8015086:	6a20200a 	bvs	881d0b6 <__exidx_end+0x806f2e>
 801508a:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 801508e:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 8015092:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8015096:	203a746e 	eorscs	r7, sl, lr, ror #8
 801509a:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 801509e:	0a3b7265 	beq	8ef1a3a <__exidx_end+0xedb8b2>
 80150a2:	6f622020 	svcvs	0x00622020
 80150a6:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 80150aa:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 80150ae:	3a737569 	bcc	9cf265a <__exidx_end+0x1cdc4d2>
 80150b2:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 80150b6:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80150ba:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80150be:	203a7265 	eorscs	r7, sl, r5, ror #4
 80150c2:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80150c6:	72672064 	rsbvc	r2, r7, #100	; 0x64
 80150ca:	31207965 			; <UNDEFINED> instruction: 0x31207965
 80150ce:	0a3b7870 	beq	8ef3296 <__exidx_end+0xedd10e>
 80150d2:	00000a7d 	andeq	r0, r0, sp, ror sl
	...

080150d8 <HttpContent>:
 80150d8:	080149f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, fp, lr}
 80150dc:	08014f8e 	stmdaeq	r1, {r1, r2, r3, r7, r8, r9, sl, fp, lr}
 80150e0:	080149fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, fp, lr}
 80150e4:	080150f0 	stmdaeq	r1, {r4, r5, r6, r7, ip, lr}
 80150e8:	080149e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, fp, lr}
 80150ec:	08014e2c 	stmdaeq	r1, {r2, r3, r5, r9, sl, fp, lr}

080150f0 <index_js>:
 80150f0:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80150f4:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80150f8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80150fc:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8015100:	534a7465 	movtpl	r7, #42085	; 0xa465
 8015104:	6a284e4f 	bvs	8a28a48 <__exidx_end+0xa128c0>
 8015108:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801510c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8015110:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8015114:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 8015118:	6a2f273d 	bvs	8bdee14 <__exidx_end+0xbc8c8c>
 801511c:	2f6e6f73 	svccs	0x006e6f73
 8015120:	202b2027 	eorcs	r2, fp, r7, lsr #32
 8015124:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8015128:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801512c:	20797274 	rsbscs	r7, r9, r4, ror r2
 8015130:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8015134:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 8015138:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 801513c:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 8015140:	20746961 	rsbscs	r6, r4, r1, ror #18
 8015144:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 8015148:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 801514c:	0a3b296c 	beq	8edf704 <__exidx_end+0xec957c>
 8015150:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8015154:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 8015158:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 801515c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8015160:	73657220 	cmnvc	r5, #32, 4
 8015164:	6f736a2e 	svcvs	0x00736a2e
 8015168:	3b29286e 	blcc	8a5f328 <__exidx_end+0xa491a0>
 801516c:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8015170:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 8015174:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 8015178:	6f727265 	svcvs	0x00727265
 801517c:	7b202972 	blvc	881f74c <__exidx_end+0x8095c4>
 8015180:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8015184:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 8015188:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 801518c:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 8015190:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 8015194:	3b29726f 	blcc	8a71b58 <__exidx_end+0xa5b9d0>
 8015198:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 801519c:	0a0a7d0a 	beq	82b45cc <__exidx_end+0x29e444>
 80151a0:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80151a4:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80151a8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80151ac:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 80151b0:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 80151b4:	73694c72 	cmnvc	r9, #29184	; 0x7200
 80151b8:	20292874 	eorcs	r2, r9, r4, ror r8
 80151bc:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 80151c0:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80151c4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80151c8:	6177613d 	cmnvs	r7, sp, lsr r1
 80151cc:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80151d0:	534a7465 	movtpl	r7, #42085	; 0xa465
 80151d4:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 80151d8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80151dc:	0a3b2927 	beq	8edf680 <__exidx_end+0xec94f8>
 80151e0:	6f640909 	svcvs	0x00640909
 80151e4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 80151e8:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 80151ec:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 80151f0:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80151f4:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 80151f8:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 80151fc:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 8015200:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8015204:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8015208:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 801520c:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 8015210:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8015214:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 8015218:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 801521c:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 8015220:	2b656d61 	blcs	99707ac <__exidx_end+0x195a624>
 8015224:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80151a4 <index_js+0xb4>
 8015228:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801522c:	2b223e69 	blcs	88a4bd8 <__exidx_end+0x88ea50>
 8015230:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8015234:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8015238:	6f6e2e74 	svcvs	0x006e2e74
 801523c:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 8015240:	2b657079 	blcs	997142c <__exidx_end+0x195b2a4>
 8015244:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80151c4 <index_js+0xd4>
 8015248:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801524c:	2b223e69 	blcs	88a4bf8 <__exidx_end+0x88ea70>
 8015250:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8015254:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8015258:	6f6e2e74 	svcvs	0x006e2e74
 801525c:	702e6564 	eorvc	r6, lr, r4, ror #10
 8015260:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 8015264:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8015268:	2f3c222b 	svccs	0x003c222b
 801526c:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8015270:	0a7d0a3b 	beq	9f57b64 <__exidx_end+0x1f419dc>
 8015274:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 8015278:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 801527c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8015280:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8015284:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8015288:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801528c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8015290:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 8015294:	0a7b2029 	beq	9edd340 <__exidx_end+0x1ec71b8>
 8015298:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 801529c:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 80152a0:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 80152a4:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80152a8:	6177613d 	cmnvs	r7, sp, lsr r1
 80152ac:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80152b0:	534a7465 	movtpl	r7, #42085	; 0xa465
 80152b4:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 80152b8:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80152bc:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 80152c0:	3b292779 	blcc	8a5f0ac <__exidx_end+0xa48f24>
 80152c4:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80152c8:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80152cc:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80152d0:	0a22223d 	beq	889dbcc <__exidx_end+0x887a44>
 80152d4:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 80152d8:	66207465 	strtvs	r7, [r0], -r5, ror #8
 80152dc:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 80152e0:	73656d61 	cmnvc	r5, #6208	; 0x1840
 80152e4:	6a624f3d 	bvs	98a8fe0 <__exidx_end+0x1892e58>
 80152e8:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 80152ec:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 80152f0:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 80152f4:	6f746365 	svcvs	0x00746365
 80152f8:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 80152fc:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8015300:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 8015304:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8015308:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 801530c:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 8015310:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 8015314:	6145726f 	cmpvs	r5, pc, ror #4
 8015318:	66286863 	strtvs	r6, [r8], -r3, ror #16
 801531c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8015320:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8015324:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 8015328:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801532c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8015330:	20726176 	rsbscs	r6, r2, r6, ror r1
 8015334:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8015338:	203d2065 	eorscs	r2, sp, r5, rrx
 801533c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015340:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8015344:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 8015348:	73656c69 	cmnvc	r5, #26880	; 0x6900
 801534c:	6b5b5d22 	blvs	96ec7dc <__exidx_end+0x16d6654>
 8015350:	3b5d7965 	blcc	97738ec <__exidx_end+0x175d764>
 8015354:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8015358:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 801535c:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 8015360:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 8015364:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8015368:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 801536c:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 8015370:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8015374:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 8015378:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 801537c:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8015380:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 8015384:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8015388:	0a3b223e 	beq	8eddc88 <__exidx_end+0xec7b00>
 801538c:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 8015390:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8015394:	6f640909 	svcvs	0x00640909
 8015398:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 801539c:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 80153a0:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 80153a4:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80153a8:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 80153ac:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 80153b0:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 80153b4:	6f746365 	svcvs	0x00746365
 80153b8:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 80153bc:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 80153c0:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 80153c4:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 80153c8:	3b6c6d74 	blcc	9b309a0 <__exidx_end+0x1b1a818>
 80153cc:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80153d0:	5f746567 	svcpl	0x00746567
 80153d4:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 80153d8:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 80153dc:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 80153e0:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 80153e4:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 80153e8:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 80153ec:	20636e79 	rsbcs	r6, r3, r9, ror lr
 80153f0:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 80153f4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80153f8:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 80153fc:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 8015400:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8015404:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 8015408:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801540c:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8015410:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 8015414:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8015418:	6177613d 	cmnvs	r7, sp, lsr r1
 801541c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8015420:	534a7465 	movtpl	r7, #42085	; 0xa465
 8015424:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8015428:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801542c:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 8015430:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8015434:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 8015438:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801543c:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 8015440:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 8015444:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 8015448:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 801544c:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 8015450:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8015454:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8015458:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 801545c:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 8015460:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 8015464:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 8015468:	2b22563e 	blcs	88aad68 <__exidx_end+0x894be0>
 801546c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015470:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8015474:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015478:	2b6e6f69 	blcs	9bb1224 <__exidx_end+0x1b9b09c>
 801547c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80153fc <index_js+0x30c>
 8015480:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8015484:	2b223e69 	blcs	88a4e30 <__exidx_end+0x88eca8>
 8015488:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801548c:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8015490:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 8015494:	61642e64 	cmnvs	r4, r4, ror #28
 8015498:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 801549c:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 80154a0:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 80154a4:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 80154a8:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80154ac:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 80154b0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 80154b4:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 80154b8:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 80154bc:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 80154c0:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 80154c4:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 80154c8:	6f697372 	svcvs	0x00697372
 80154cc:	6f622e6e 	svcvs	0x00622e6e
 80154d0:	2b647261 	blcs	9931e5c <__exidx_end+0x191bcd4>
 80154d4:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8015454 <index_js+0x364>
 80154d8:	3b223e69 	blcc	88a4e84 <__exidx_end+0x88ecfc>
 80154dc:	0a0a7d0a 	beq	82b490c <__exidx_end+0x29e784>
 80154e0:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80154e4:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80154e8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80154ec:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 80154f0:	745f7465 	ldrbvc	r7, [pc], #-1125	; 80154f8 <index_js+0x408>
 80154f4:	73287478 			; <UNDEFINED> instruction: 0x73287478
 80154f8:	20296c65 	eorcs	r6, r9, r5, ror #24
 80154fc:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 8015500:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 8015504:	613d7478 	teqvs	sp, r8, ror r4
 8015508:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 801550c:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 8015510:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 8015514:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 8015518:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801551c:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8015520:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015524:	3b22223d 	blcc	889de20 <__exidx_end+0x887c98>
 8015528:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 801552c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 8015530:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 8015534:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 8015538:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801553c:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 8015540:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 8015544:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 8015548:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 801554c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8015550:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 8015554:	0a7b2029 	beq	9edd600 <__exidx_end+0x1ec7478>
 8015558:	61760909 	cmnvs	r6, r9, lsl #18
 801555c:	61762072 	cmnvs	r6, r2, ror r0
 8015560:	2065756c 	rsbcs	r7, r5, ip, ror #10
 8015564:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 8015568:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801556c:	6b5b5d6c 	blvs	96ecb24 <__exidx_end+0x16d699c>
 8015570:	3b5d7965 	blcc	9773b0c <__exidx_end+0x175d984>
 8015574:	2009090a 	andcs	r0, r9, sl, lsl #18
 8015578:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801557c:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 8015580:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 8015584:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8015588:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 801558c:	2f3c222b 	svccs	0x003c222b
 8015590:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 8015594:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 8015598:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 801559c:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80155a0:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 80155a4:	742f3c3e 	strtvc	r3, [pc], #-3134	; 80155ac <index_js+0x4bc>
 80155a8:	3b223e72 	blcc	88a4f78 <__exidx_end+0x88edf0>
 80155ac:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 80155b0:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 80155b4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 80155b8:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 80155bc:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 80155c0:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 80155c4:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 80155c8:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 80155cc:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 80155d0:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 80155d4:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 80155d8:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 80155dc:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 80155e0:	0a3b6c6d 	beq	8ef079c <__exidx_end+0xeda614>
 80155e4:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 80155e8:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 80155ec:	73694c72 	cmnvc	r9, #29184	; 0x7200
 80155f0:	3b292874 	blcc	8a5f7c8 <__exidx_end+0xa49640>
 80155f4:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 80155f8:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 80155fc:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8015600:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8015604:	0a3b2928 	beq	8edfaac <__exidx_end+0xec9924>
 8015608:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 801560c:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 8015610:	6f697372 	svcvs	0x00697372
 8015614:	3b29286e 	blcc	8a5f7d4 <__exidx_end+0xa4964c>
 8015618:	0000000a 	andeq	r0, r0, sl

0801561c <s_aStorSize>:
 801561c:	00000060 	andeq	r0, r0, r0, rrx
 8015620:	00000090 	muleq	r0, r0, r0
 8015624:	00000020 	andeq	r0, r0, r0, lsr #32
 8015628:	00000040 	andeq	r0, r0, r0, asr #32
 801562c:	00000060 	andeq	r0, r0, r0, rrx
 8015630:	00000040 	andeq	r0, r0, r0, asr #32
 8015634:	00000020 	andeq	r0, r0, r0, lsr #32
 8015638:	00000020 	andeq	r0, r0, r0, lsr #32
 801563c:	000001e0 	andeq	r0, r0, r0, ror #3
 8015640:	00000040 	andeq	r0, r0, r0, asr #32
 8015644:	00000020 	andeq	r0, r0, r0, lsr #32
 8015648:	00000060 	andeq	r0, r0, r0, rrx
 801564c:	00000030 	andeq	r0, r0, r0, lsr r0
 8015650:	00000020 	andeq	r0, r0, r0, lsr #32
 8015654:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 8015658:	00000030 	andeq	r0, r0, r0, lsr r0
 801565c:	00000040 	andeq	r0, r0, r0, asr #32
 8015660:	00000020 	andeq	r0, r0, r0, lsr #32
 8015664:	00000060 	andeq	r0, r0, r0, rrx
 8015668:	00000020 	andeq	r0, r0, r0, lsr #32
 801566c:	00000400 	andeq	r0, r0, r0, lsl #8
 8015670:	00000020 	andeq	r0, r0, r0, lsr #32
 8015674:	00000020 	andeq	r0, r0, r0, lsr #32
 8015678:	00000040 	andeq	r0, r0, r0, asr #32
 801567c:	00000060 	andeq	r0, r0, r0, rrx
 8015680:	00000020 	andeq	r0, r0, r0, lsr #32
 8015684:	00000020 	andeq	r0, r0, r0, lsr #32
 8015688:	00000020 	andeq	r0, r0, r0, lsr #32

0801568c <vtable for StoreDisplayUdf>:
	...
 8015694:	0800d97d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, fp, ip, lr, pc}
 8015698:	0800d9c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, fp, ip, lr, pc}
 801569c:	0800d9a1 	stmdaeq	r0, {r0, r5, r7, r8, fp, ip, lr, pc}
 80156a0:	0800d981 	stmdaeq	r0, {r0, r7, r8, fp, ip, lr, pc}

080156a4 <vtable for StoreE131>:
	...
 80156ac:	0800d9e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, fp, ip, lr, pc}
 80156b0:	0800da2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, fp, ip, lr, pc}
 80156b4:	0800da09 	stmdaeq	r0, {r0, r3, r9, fp, ip, lr, pc}
 80156b8:	0800d9e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, fp, ip, lr, pc}

080156bc <vtable for StoreNetwork>:
	...
 80156c4:	0800da4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, fp, ip, lr, pc}
 80156c8:	0800db61 	stmdaeq	r0, {r0, r5, r6, r8, r9, fp, ip, lr, pc}
 80156cc:	0800da55 	stmdaeq	r0, {r0, r2, r4, r6, r9, fp, ip, lr, pc}
 80156d0:	0800db75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, fp, ip, lr, pc}
 80156d4:	0800db05 	stmdaeq	r0, {r0, r2, r8, r9, fp, ip, lr, pc}
 80156d8:	0800dad9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, fp, ip, lr, pc}
 80156dc:	0800daa9 	stmdaeq	r0, {r0, r3, r5, r7, r9, fp, ip, lr, pc}
 80156e0:	0800db31 	stmdaeq	r0, {r0, r4, r5, r8, r9, fp, ip, lr, pc}
 80156e4:	0800da79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, fp, ip, lr, pc}
 80156e8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80156ec:	00000000 	andeq	r0, r0, r0
 80156f0:	0800da4f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r9, fp, ip, lr, pc}
 80156f4:	0800db6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, fp, ip, lr, pc}
 80156f8:	0800db29 	stmdaeq	r0, {r0, r3, r5, r8, r9, fp, ip, lr, pc}
 80156fc:	0800dafd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, fp, ip, lr, pc}
 8015700:	0800dad1 	stmdaeq	r0, {r0, r4, r6, r7, r9, fp, ip, lr, pc}
 8015704:	0800db59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, fp, ip, lr, pc}
 8015708:	0800daa1 	stmdaeq	r0, {r0, r5, r7, r9, fp, ip, lr, pc}

0801570c <vtable for StoreRemoteConfig>:
	...
 8015714:	0800dba9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, fp, ip, lr, pc}
 8015718:	0800dbf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 801571c:	0800dbcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, fp, ip, lr, pc}
 8015720:	0800dbad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, fp, ip, lr, pc}

08015724 <vtable for StoreWS28xxDmx>:
	...
 801572c:	0800dc11 	stmdaeq	r0, {r0, r4, sl, fp, ip, lr, pc}
 8015730:	0800dd81 	stmdaeq	r0, {r0, r7, r8, sl, fp, ip, lr, pc}
 8015734:	0800dc19 	stmdaeq	r0, {r0, r3, r4, sl, fp, ip, lr, pc}
 8015738:	0800dd95 	stmdaeq	r0, {r0, r2, r4, r7, r8, sl, fp, ip, lr, pc}
 801573c:	0800dd4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, sl, fp, ip, lr, pc}
 8015740:	0800dd19 	stmdaeq	r0, {r0, r3, r4, r8, sl, fp, ip, lr, pc}
 8015744:	0800dce1 	stmdaeq	r0, {r0, r5, r6, r7, sl, fp, ip, lr, pc}
 8015748:	0800dca9 	stmdaeq	r0, {r0, r3, r5, r7, sl, fp, ip, lr, pc}
 801574c:	0800dc71 	stmdaeq	r0, {r0, r4, r5, r6, sl, fp, ip, lr, pc}
 8015750:	0800dc3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, sl, fp, ip, lr, pc}
 8015754:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8015758:	00000000 	andeq	r0, r0, r0
 801575c:	0800dc13 	stmdaeq	r0, {r0, r1, r4, sl, fp, ip, lr, pc}
 8015760:	0800dd8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, sl, fp, ip, lr, pc}
 8015764:	0800dd79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, fp, ip, lr, pc}
 8015768:	0800dd45 	stmdaeq	r0, {r0, r2, r6, r8, sl, fp, ip, lr, pc}
 801576c:	0800dd11 	stmdaeq	r0, {r0, r4, r8, sl, fp, ip, lr, pc}
 8015770:	0800dcd9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, fp, ip, lr, pc}
 8015774:	0800dca1 	stmdaeq	r0, {r0, r5, r7, sl, fp, ip, lr, pc}
 8015778:	0800dc69 	stmdaeq	r0, {r0, r3, r5, r6, sl, fp, ip, lr, pc}
 801577c:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8015780:	74654400 	strbtvc	r4, [r5], #-1024	; 0xfffffc00
 8015784:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8015788:	73252064 			; <UNDEFINED> instruction: 0x73252064
 801578c:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8015790:	65732068 	ldrbvs	r2, [r3, #-104]!	; 0xffffff98
 8015794:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8015798:	7a697320 	bvc	9a72420 <__exidx_end+0x1a5c298>
 801579c:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 80157a0:	746f7420 	strbtvc	r7, [pc], #-1056	; 80157a8 <vtable for StoreWS28xxDmx+0x84>
 80157a4:	25206c61 	strcs	r6, [r0, #-3169]!	; 0xfffff39f
 80157a8:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
 80157ac:	0a736574 	beq	9ceed84 <__exidx_end+0x1cd8bfc>
 80157b0:	70637400 	rsbvc	r7, r3, r0, lsl #8
 80157b4:	6765625f 			; <UNDEFINED> instruction: 0x6765625f
 80157b8:	203a6e69 	eorscs	r6, sl, r9, ror #28
 80157bc:	206f6f74 	rsbcs	r6, pc, r4, ror pc	; <UNPREDICTABLE>
 80157c0:	796e616d 	stmdbvc	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 80157c4:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 80157c8:	7463656e 	strbtvc	r6, [r3], #-1390	; 0xfffffa92
 80157cc:	736e6f69 	cmnvc	lr, #420	; 0x1a4
 80157d0:	6e696200 	cdpvs	2, 6, cr6, cr9, cr0, {0}
 80157d4:	6e750064 	cdpvs	0, 7, cr0, cr5, cr4, {3}
 80157d8:	646e6962 	strbtvs	r6, [lr], #-2402	; 0xfffff69e
 80157dc:	5241000a 	subpl	r0, r1, #10
 80157e0:	6f6c2050 	svcvs	0x006c2050
 80157e4:	70756b6f 	rsbsvc	r6, r5, pc, ror #22
 80157e8:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
 80157ec:	2064656c 	rsbcs	r6, r4, ip, ror #10
 80157f0:	64203e2d 	strtvs	r3, [r0], #-3629	; 0xfffff1d3
 80157f4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 80157f8:	6720746c 	strvs	r7, [r0, -ip, ror #8]!
 80157fc:	77657461 	strbvc	r7, [r5, -r1, ror #8]!
 8015800:	000a7961 	andeq	r7, sl, r1, ror #18
 8015804:	20505241 	subscs	r5, r0, r1, asr #4
 8015808:	6b6f6f6c 	blvs	9bf15c0 <__exidx_end+0x1bdb438>
 801580c:	66207075 			; <UNDEFINED> instruction: 0x66207075
 8015810:	656c6961 	strbvs	r6, [ip, #-2401]!	; 0xfffff69f
 8015814:	 	vmlsmi.f32	s0, s0, s9

08015817 <NetworkConst::MSG_NETWORK_INIT>:
 8015817:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801581b:	206b726f 	rsbcs	r7, fp, pc, ror #4
 801581f:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 8015823:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 8015827:	302e302e 	eorcc	r3, lr, lr, lsr #32
 801582b:	3135322e 	teqcc	r5, lr, lsr #4
 801582f:	63745f00 	cmnvs	r4, #0, 30
 8015833:	6f6c2e70 	svcvs	0x006c2e70
 8015837:	006c6163 	rsbeq	r6, ip, r3, ror #2
 801583b:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 801583f:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8015843:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 801584b <NetworkConst::MSG_NETWORK_INIT+0x34>
 8015847:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 801584b:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 80149ef <RemoteConfig::s_TXT+0xdf>
 801584f:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 8015853:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 8015857:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 801585b:	20000a53 	andcs	r0, r0, r3, asr sl
 801585f:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8015863:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 8015867:	0a676e69 	beq	99f1213 <__exidx_end+0x19db08b>
 801586b:	614e2000 	mrsvs	r2, (UNDEF: 78)
 801586f:	3a20656d 	bcc	882ee2b <__exidx_end+0x818ca3>
 8015873:	0a732520 	beq	9cdecfb <__exidx_end+0x1cc8b73>
 8015877:	73252000 			; <UNDEFINED> instruction: 0x73252000
 801587b:	20642520 	rsbcs	r2, r4, r0, lsr #10
 801587f:	000a7325 	andeq	r7, sl, r5, lsr #6
 8015883:	30687465 	rsbcc	r7, r8, r5, ror #8
 8015887:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 801588b:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 801588f:	5f656369 	svcpl	0x00656369
 8015893:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 8015897:	6b726f77 	blvs	9cb167b <__exidx_end+0x1c9b4f3>
 801589b:	4820000a 	stmdami	r0!, {r1, r3}
 801589f:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 80158a3:	20656d61 	rsbcs	r6, r5, r1, ror #26
 80158a7:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 80158ab:	20000a73 	andcs	r0, r0, r3, ror sl
 80158af:	614e6649 	cmpvs	lr, r9, asr #12
 80158b3:	2020656d 	eorcs	r6, r0, sp, ror #10
 80158b7:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80158bb:	203a6425 	eorscs	r6, sl, r5, lsr #8
 80158bf:	000a7325 	andeq	r7, sl, r5, lsr #6
 80158c3:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 80158c7:	20202074 	eorcs	r2, r0, r4, ror r0
 80158cb:	3a202020 	bcc	881d953 <__exidx_end+0x8077cb>
 80158cf:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 80158d3:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80158d7:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80158db:	0a64252f 	beq	991ed9f <__exidx_end+0x1908c17>
 80158df:	654e2000 	strbvs	r2, [lr, #-0]
 80158e3:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 80158e7:	2020206b 	eorcs	r2, r0, fp, rrx
 80158eb:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80158ef:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80158f3:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80158f7:	20000a64 	andcs	r0, r0, r4, ror #20
 80158fb:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 80158ff:	20796177 	rsbscs	r6, r9, r7, ror r1
 8015903:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8015907:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801590b:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801590f:	0a64252e 	beq	991edcf <__exidx_end+0x1908c47>
 8015913:	72422000 	subvc	r2, r2, #0
 8015917:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 801591b:	20747361 	rsbscs	r7, r4, r1, ror #6
 801591f:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015923:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015927:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801592b:	20000a64 	andcs	r0, r0, r4, ror #20
 801592f:	2063614d 	rsbcs	r6, r3, sp, asr #2
 8015933:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015937:	203a2020 	eorscs	r2, sl, r0, lsr #32
 801593b:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801593f:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8015943:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8015947:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 801594b:	3a78322e 	bcc	9e2220b <__exidx_end+0x1e0c083>
 801594f:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8015953:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8015957:	20000a78 	andcs	r0, r0, r8, ror sl
 801595b:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 801595f:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015963:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8015967:	000a6325 	andeq	r6, sl, r5, lsr #6
 801596b:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 801596f:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 8015973:	 	rsbvc	r0, r9, r0, asr r0

08015975 <NetworkParamsConst::IP_ADDRESS>:
 8015975:	615f7069 	cmpvs	pc, r9, rrx
 8015979:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 801597d:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08015980 <NetworkParamsConst::DEFAULT_GATEWAY>:
 8015980:	61666564 	cmnvs	r6, r4, ror #10
 8015984:	5f746c75 	svcpl	0x00746c75
 8015988:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 801598c:	00796177 	rsbseq	r6, r9, r7, ror r1

08015990 <NetworkParamsConst::DHCP_RETRY_TIME>:
 8015990:	70636864 	rsbvc	r6, r3, r4, ror #16
 8015994:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8015998:	745f7972 	ldrbvc	r7, [pc], #-2418	; 80159a0 <NetworkParamsConst::HOSTNAME>
 801599c:	00656d69 	rsbeq	r6, r5, r9, ror #26

080159a0 <NetworkParamsConst::HOSTNAME>:
 80159a0:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 80159a4:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

080159a9 <NetworkParamsConst::NET_MASK>:
 80159a9:	5f74656e 	svcpl	0x0074656e
 80159ad:	6b73616d 	blvs	9cedf69 <__exidx_end+0x1cd7de1>
	...

080159b2 <NetworkParamsConst::USE_DHCP>:
 80159b2:	5f657375 	svcpl	0x00657375
 80159b6:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

080159bb <NetworkParamsConst::FILE_NAME>:
 80159bb:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 80159bf:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 80159c3:	00747874 	rsbseq	r7, r4, r4, ror r8
 80159c7:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 80159cb:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 80159cf:	61747320 	cmnvs	r4, r0, lsr #6
 80159d3:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 80159d7:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80159db:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80159df:	252f6425 	strcs	r6, [pc, #-1061]!	; 80155c2 <index_js+0x4d2>
 80159e3:	63252064 			; <UNDEFINED> instruction: 0x63252064
 80159e7:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 80159eb:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80159ef:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80159f3:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 80159f7:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 80159fb:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80159ff:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015a03:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8015a07:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 8015a0b:	20657261 	rsbcs	r7, r5, r1, ror #4
 8015a0f:	2a2e2556 	bcs	8b9ef6f <__exidx_end+0xb88de7>
 8015a13:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 8015a17:	72205043 	eorvc	r5, r0, #67	; 0x43
 8015a1b:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 8015a1f:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8015a23:	50434844 	subpl	r4, r3, r4, asr #16
 8015a27:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8015a2b:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8015a2f:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 8015a33:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8015a37:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8015a3b:	6f647475 	svcvs	0x00647475
 8015a3f:	00006e77 	andeq	r6, r0, r7, ror lr
	...

08015a44 <pArray>:
 8015a44:	08015ad8 	stmdaeq	r1, {r3, r4, r6, r7, r9, fp, ip, lr}
 8015a48:	08015a94 	stmdaeq	r1, {r2, r4, r7, r9, fp, ip, lr}
 8015a4c:	08015975 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, fp, ip, lr}
 8015a50:	08015ade 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r9, fp, ip, lr}
 8015a54:	08015cf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, sl, fp, ip, lr}
 8015a58:	08015a9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r9, fp, ip, lr}
 8015a5c:	08014bf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, lr}
 8015a60:	080159a0 	stmdaeq	r1, {r5, r7, r8, fp, ip, lr}
 8015a64:	08015bcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, fp, ip, lr}
 8015a68:	08015bdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, fp, ip, lr}
 8015a6c:	08015bed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
 8015a70:	08015bfd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
 8015a74:	080159a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, fp, ip, lr}
 8015a78:	08015ce5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sl, fp, ip, lr}
 8015a7c:	08014bf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, lr}
 8015a80:	08014bf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, lr}
 8015a84:	08014bf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, lr}
 8015a88:	08014bf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, lr}
 8015a8c:	08015980 	stmdaeq	r1, {r7, r8, fp, ip, lr}
 8015a90:	08015aac 	stmdaeq	r1, {r2, r3, r5, r7, r9, fp, ip, lr}

08015a94 <DisplayUdfParamsConst::BOARD_NAME>:
 8015a94:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 8015a98:	616e5f64 	cmnvs	lr, r4, ror #30
 8015a9c:	 	tstvs	r0, sp, ror #10

08015a9f <DisplayUdfParamsConst::ACTIVE_PORTS>:
 8015a9f:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8015aa3:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 8015aa7:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

08015aac <DisplayUdfParamsConst::DMX_DIRECTION>:
 8015aac:	5f786d64 	svcpl	0x00786d64
 8015ab0:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015ab4:	6f697463 	svcvs	0x00697463
 8015ab8:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

08015aba <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 8015aba:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 8015abe:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8015ac2:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801555d <index_js+0x46d>
 8015ac6:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

08015ac8 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 8015ac8:	70696c66 	rsbvc	r6, r9, r6, ror #24
 8015acc:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 8015ad0:	61636974 	smcvs	13972	; 0x3694
 8015ad4:	00796c6c 	rsbseq	r6, r9, ip, ror #24

08015ad8 <DisplayUdfParamsConst::TITLE>:
 8015ad8:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8015adc:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

08015ade <DisplayUdfParamsConst::VERSION>:
 8015ade:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015ae2:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08015ae6 <DisplayUdfParamsConst::FILE_NAME>:
 8015ae6:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015aea:	2e79616c 	rpwcsez	f6, f1, #4.0
 8015aee:	00747874 	rsbseq	r7, r4, r4, ror r8

08015af2 <DisplayUdfParamsConst::INTENSITY>:
 8015af2:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015af6:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8015afa:	50410079 	subpl	r0, r1, r9, ror r0
 8015afe:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015b02:	726f5000 	rsbvc	r5, pc, #0
 8015b06:	63252074 			; <UNDEFINED> instruction: 0x63252074
 8015b0a:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015b0e:	00732520 	rsbseq	r2, r3, r0, lsr #10
 8015b12:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 8015b16:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8015b1a:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 8015b1e:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

08015b23 <DevicesParamsConst::SPI_SPEED_HZ>:
 8015b23:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 8015b27:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 8015b2b:	5f646565 	svcpl	0x00646565
 8015b2f:	 			; <UNDEFINED> instruction: 0x6c007a68

08015b32 <DevicesParamsConst::GROUPING_COUNT>:
 8015b32:	5f64656c 	svcpl	0x0064656c
 8015b36:	756f7267 	strbvc	r7, [pc, #-615]!	; 80158d7 <NetworkConst::MSG_NETWORK_INIT+0xc0>
 8015b3a:	6f635f70 	svcvs	0x00635f70
 8015b3e:	00746e75 	rsbseq	r6, r4, r5, ror lr

08015b42 <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 8015b42:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 8015b46:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 8015b4a:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8015b4e:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 8015b52:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

08015b54 <DevicesParamsConst::MAP>:
 8015b54:	5f64656c 	svcpl	0x0064656c
 8015b58:	5f626772 	svcpl	0x00626772
 8015b5c:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8015b60:	00676e69 	rsbeq	r6, r7, r9, ror #28

08015b64 <DevicesParamsConst::TYPE>:
 8015b64:	5f64656c 	svcpl	0x0064656c
 8015b68:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

08015b6d <DevicesParamsConst::COUNT>:
 8015b6d:	5f64656c 	svcpl	0x0064656c
 8015b71:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8015b75:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

08015b77 <DevicesParamsConst::LED_T0H>:
 8015b77:	5f64656c 	svcpl	0x0064656c
 8015b7b:	00683074 	rsbeq	r3, r8, r4, ror r0

08015b7f <DevicesParamsConst::LED_T1H>:
 8015b7f:	5f64656c 	svcpl	0x0064656c
 8015b83:	00683174 	rsbeq	r3, r8, r4, ror r1

08015b87 <DevicesParamsConst::FILE_NAME>:
 8015b87:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8015b8b:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8015b8f:	00747874 	rsbseq	r7, r4, r4, ror r8
 8015b93:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8015b97:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8015b9b:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015b9f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015ba3:	002c2264 	eoreq	r2, ip, r4, ror #4
 8015ba7:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8015bab:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015baf:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015bb3:	0a64252e 	beq	991f073 <__exidx_end+0x1908eeb>
 8015bb7:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 8015bbb:	0a232073 	beq	88ddd8f <__exidx_end+0x8c7c07>
	...

08015bc0 <LightSetParamsConst::TEST_PATTERN>:
 8015bc0:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 8015bc4:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 8015bc8:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

08015bcd <LightSetParamsConst::UNIVERSE_PORT>:
 8015bcd:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8015bd1:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8015bd5:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015bd9:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8015bdd:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8015be1:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8015be5:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015be9:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8015bed:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8015bf1:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8015bf5:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015bf9:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8015bfd:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8015c01:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8015c05:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015c09:	00645f74 	rsbeq	r5, r4, r4, ror pc

08015c0d <LightSetParamsConst::START_UNI_PORT>:
 8015c0d:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8015c11:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8015c15:	6f705f69 	svcvs	0x00705f69
 8015c19:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 8015c1d:	74730000 	ldrbtvc	r0, [r3], #-0
 8015c21:	5f747261 	svcpl	0x00747261
 8015c25:	5f696e75 	svcpl	0x00696e75
 8015c29:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015c2d:	0000325f 	andeq	r3, r0, pc, asr r2
 8015c31:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8015c35:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8015c39:	6f705f69 	svcvs	0x00705f69
 8015c3d:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 8015c41:	74730000 	ldrbtvc	r0, [r3], #-0
 8015c45:	5f747261 	svcpl	0x00747261
 8015c49:	5f696e75 	svcpl	0x00696e75
 8015c4d:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015c51:	0000345f 	andeq	r3, r0, pc, asr r4
 8015c55:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8015c59:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8015c5d:	6f705f69 	svcvs	0x00705f69
 8015c61:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 80157f7 <vtable for StoreWS28xxDmx+0xd3>
 8015c65:	74730000 	ldrbtvc	r0, [r3], #-0
 8015c69:	5f747261 	svcpl	0x00747261
 8015c6d:	5f696e75 	svcpl	0x00696e75
 8015c71:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015c75:	0000365f 	andeq	r3, r0, pc, asr r6
 8015c79:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8015c7d:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8015c81:	6f705f69 	svcvs	0x00705f69
 8015c85:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 8015c89:	74730000 	ldrbtvc	r0, [r3], #-0
 8015c8d:	5f747261 	svcpl	0x00747261
 8015c91:	5f696e75 	svcpl	0x00696e75
 8015c95:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015c99:	0000385f 	andeq	r3, r0, pc, asr r8

08015c9d <LightSetParamsConst::MERGE_MODE_PORT>:
 8015c9d:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8015ca1:	6f6d5f65 	svcvs	0x006d5f65
 8015ca5:	705f6564 	subsvc	r6, pc, r4, ror #10
 8015ca9:	5f74726f 	svcpl	0x0074726f
 8015cad:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 8015cb1:	5f656772 	svcpl	0x00656772
 8015cb5:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8015cb9:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015cbd:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8015cc1:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8015cc5:	6f6d5f65 	svcvs	0x006d5f65
 8015cc9:	705f6564 	subsvc	r6, pc, r4, ror #10
 8015ccd:	5f74726f 	svcpl	0x0074726f
 8015cd1:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 8015cd5:	5f656772 	svcpl	0x00656772
 8015cd9:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8015cdd:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015ce1:	00645f74 	rsbeq	r5, r4, r4, ror pc

08015ce5 <LightSetParamsConst::DMX_START_ADDRESS>:
 8015ce5:	5f786d64 	svcpl	0x00786d64
 8015ce9:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8015ced:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8015cf1:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 8015cf5:	 	mrcvs	0, 3, r0, cr5, cr3, {3}

08015cf7 <LightSetParamsConst::UNIVERSE>:
 8015cf7:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8015cfb:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

08015d00 <LightSetParamsConst::DIRECTION>:
 8015d00:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015d04:	6f697463 	svcvs	0x00697463
 8015d08:	6f705f6e 	svcvs	0x00705f6e
 8015d0c:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 8015d10:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8015d14:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8015d18:	5f6e6f69 	svcpl	0x006e6f69
 8015d1c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015d20:	0000625f 	andeq	r6, r0, pc, asr r2
 8015d24:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015d28:	6f697463 	svcvs	0x00697463
 8015d2c:	6f705f6e 	svcvs	0x00705f6e
 8015d30:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 8015d34:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8015d38:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8015d3c:	5f6e6f69 	svcpl	0x006e6f69
 8015d40:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015d44:	0000645f 	andeq	r6, r0, pc, asr r4
 8015d48:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8015d4c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8015d50:	66207961 	strtvs	r7, [r0], -r1, ror #18
 8015d54:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8015d58:	31485300 	mrscc	r5, (UNDEF: 120)
 8015d5c:	00363031 	eorseq	r3, r6, r1, lsr r0
 8015d60:	31445353 	cmpcc	r4, r3, asr r3
 8015d64:	00363033 	eorseq	r3, r6, r3, lsr r0
 8015d68:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 8015d6c:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 8015d70:	000a2964 	andeq	r2, sl, r4, ror #18
 8015d74:	aaeeaa40 	bge	7bc067c <__stack_size+0x7bbee7c>
 8015d78:	000000ee 	andeq	r0, r0, lr, ror #1

08015d7c <_OledFont8x6>:
 8015d7c:	00000040 	andeq	r0, r0, r0, asr #32
 8015d80:	40000000 	andmi	r0, r0, r0
 8015d84:	005f0000 	subseq	r0, pc, r0
 8015d88:	00400000 	subeq	r0, r0, r0
 8015d8c:	00070007 	andeq	r0, r7, r7
 8015d90:	7f144000 	svcvc	0x00144000
 8015d94:	00147f14 	andseq	r7, r4, r4, lsl pc
 8015d98:	7f2a2440 	svcvc	0x002a2440
 8015d9c:	4000122a 	andmi	r1, r0, sl, lsr #4
 8015da0:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8015da4:	36400062 	strbcc	r0, [r0], -r2, rrx
 8015da8:	50205649 	eorpl	r5, r0, r9, asr #12
 8015dac:	08004000 	stmdaeq	r0, {lr}
 8015db0:	00000307 	andeq	r0, r0, r7, lsl #6
 8015db4:	221c0040 	andscs	r0, ip, #64	; 0x40
 8015db8:	40000041 	andmi	r0, r0, r1, asr #32
 8015dbc:	1c224100 	stfnes	f4, [r2], #-0
 8015dc0:	2a400000 	bcs	9015dc8 <__exidx_end+0xfffc40>
 8015dc4:	2a1c7f1c 	bcs	8735a3c <__exidx_end+0x71f8b4>
 8015dc8:	08084000 	stmdaeq	r8, {lr}
 8015dcc:	0008083e 	andeq	r0, r8, lr, lsr r8
 8015dd0:	70800040 	addvc	r0, r0, r0, asr #32
 8015dd4:	40000030 	andmi	r0, r0, r0, lsr r0
 8015dd8:	08080808 	stmdaeq	r8, {r3, fp}
 8015ddc:	00400008 	subeq	r0, r0, r8
 8015de0:	00606000 	rsbeq	r6, r0, r0
 8015de4:	10204000 	eorne	r4, r0, r0
 8015de8:	00020408 	andeq	r0, r2, r8, lsl #8
 8015dec:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 8015df0:	40003e45 	andmi	r3, r0, r5, asr #28
 8015df4:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8015df8:	72400000 	subvc	r0, r0, #0
 8015dfc:	46494949 	strbmi	r4, [r9], -r9, asr #18
 8015e00:	41214000 			; <UNDEFINED> instruction: 0x41214000
 8015e04:	00334d49 	eorseq	r4, r3, r9, asr #26
 8015e08:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8015e0c:	4000107f 	andmi	r1, r0, pc, ror r0
 8015e10:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8015e14:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8015e18:	3149494a 	cmpcc	r9, sl, asr #18
 8015e1c:	21414000 	mrscs	r4, (UNDEF: 65)
 8015e20:	00070911 	andeq	r0, r7, r1, lsl r9
 8015e24:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8015e28:	40003649 	andmi	r3, r0, r9, asr #12
 8015e2c:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 8015e30:	0040001e 	subeq	r0, r0, lr, lsl r0
 8015e34:	00001400 	andeq	r1, r0, r0, lsl #8
 8015e38:	40004000 	andmi	r4, r0, r0
 8015e3c:	00000034 	andeq	r0, r0, r4, lsr r0
 8015e40:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 8015e44:	40004122 	andmi	r4, r0, r2, lsr #2
 8015e48:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 8015e4c:	00400014 	subeq	r0, r0, r4, lsl r0
 8015e50:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 8015e54:	01024000 	mrseq	r4, (UNDEF: 2)
 8015e58:	00060959 	andeq	r0, r6, r9, asr r9
 8015e5c:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 8015e60:	40004e59 	andmi	r4, r0, r9, asr lr
 8015e64:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8015e68:	7f40007c 	svcvc	0x0040007c
 8015e6c:	36494949 	strbcc	r4, [r9], -r9, asr #18
 8015e70:	413e4000 	teqmi	lr, r0
 8015e74:	00224141 	eoreq	r4, r2, r1, asr #2
 8015e78:	41417f40 	cmpmi	r1, r0, asr #30
 8015e7c:	40003e41 	andmi	r3, r0, r1, asr #28
 8015e80:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8015e84:	7f400041 	svcvc	0x00400041
 8015e88:	01090909 	tsteq	r9, r9, lsl #18
 8015e8c:	413e4000 	teqmi	lr, r0
 8015e90:	00735141 	rsbseq	r5, r3, r1, asr #2
 8015e94:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8015e98:	40007f08 	andmi	r7, r0, r8, lsl #30
 8015e9c:	417f4100 	cmnmi	pc, r0, lsl #2
 8015ea0:	20400000 	subcs	r0, r0, r0
 8015ea4:	013f4140 	teqeq	pc, r0, asr #2
 8015ea8:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8015eac:	00412214 	subeq	r2, r1, r4, lsl r2
 8015eb0:	40407f40 	submi	r7, r0, r0, asr #30
 8015eb4:	40004040 	andmi	r4, r0, r0, asr #32
 8015eb8:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 8015ebc:	7f40007f 	svcvc	0x0040007f
 8015ec0:	7f100804 	svcvc	0x00100804
 8015ec4:	413e4000 	teqmi	lr, r0
 8015ec8:	003e4141 	eorseq	r4, lr, r1, asr #2
 8015ecc:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8015ed0:	40000609 	andmi	r0, r0, r9, lsl #12
 8015ed4:	2151413e 	cmpcs	r1, lr, lsr r1
 8015ed8:	7f40005e 	svcvc	0x0040005e
 8015edc:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 8015ee0:	49264000 	stmdbmi	r6!, {lr}
 8015ee4:	00324949 	eorseq	r4, r2, r9, asr #18
 8015ee8:	7f010340 	svcvc	0x00010340
 8015eec:	40000301 	andmi	r0, r0, r1, lsl #6
 8015ef0:	4040403f 	submi	r4, r0, pc, lsr r0
 8015ef4:	1f40003f 	svcne	0x0040003f
 8015ef8:	1f204020 	svcne	0x00204020
 8015efc:	403f4000 	eorsmi	r4, pc, r0
 8015f00:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 8015f04:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 8015f08:	40006314 	andmi	r6, r0, r4, lsl r3
 8015f0c:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 8015f10:	61400003 	cmpvs	r0, r3
 8015f14:	434d4959 	movtmi	r4, #55641	; 0xd959
 8015f18:	7f004000 	svcvc	0x00004000
 8015f1c:	00414141 	subeq	r4, r1, r1, asr #2
 8015f20:	08040240 	stmdaeq	r4, {r6, r9}
 8015f24:	40002010 	andmi	r2, r0, r0, lsl r0
 8015f28:	41414100 	mrsmi	r4, (UNDEF: 81)
 8015f2c:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 8015f30:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 8015f34:	40404000 	submi	r4, r0, r0
 8015f38:	00404040 	subeq	r4, r0, r0, asr #32
 8015f3c:	07030040 	streq	r0, [r3, -r0, asr #32]
 8015f40:	40000008 	andmi	r0, r0, r8
 8015f44:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 8015f48:	7f400040 	svcvc	0x00400040
 8015f4c:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 8015f50:	44384000 	ldrtmi	r4, [r8], #-0
 8015f54:	00284444 	eoreq	r4, r8, r4, asr #8
 8015f58:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 8015f5c:	40007f28 	andmi	r7, r0, r8, lsr #30
 8015f60:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 8015f64:	00400018 	subeq	r0, r0, r8, lsl r0
 8015f68:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 8015f6c:	a4184000 	ldrge	r4, [r8], #-0
 8015f70:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 8015f74:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8015f78:	40007804 	andmi	r7, r0, r4, lsl #16
 8015f7c:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 8015f80:	20400000 	subcs	r0, r0, r0
 8015f84:	003d4040 	eorseq	r4, sp, r0, asr #32
 8015f88:	107f4000 	rsbsne	r4, pc, r0
 8015f8c:	00004428 	andeq	r4, r0, r8, lsr #8
 8015f90:	7f410040 	svcvc	0x00410040
 8015f94:	40000040 	andmi	r0, r0, r0, asr #32
 8015f98:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 8015f9c:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8015fa0:	78040408 	stmdavc	r4, {r3, sl}
 8015fa4:	44384000 	ldrtmi	r4, [r8], #-0
 8015fa8:	00384444 	eorseq	r4, r8, r4, asr #8
 8015fac:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 8015fb0:	40001824 	andmi	r1, r0, r4, lsr #16
 8015fb4:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8015fb8:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 8015fbc:	08040408 	stmdaeq	r4, {r3, sl}
 8015fc0:	54484000 	strbpl	r4, [r8], #-0
 8015fc4:	00245454 	eoreq	r5, r4, r4, asr r4
 8015fc8:	3f040440 	svccc	0x00040440
 8015fcc:	40002444 	andmi	r2, r0, r4, asr #8
 8015fd0:	2040403c 	subcs	r4, r0, ip, lsr r0
 8015fd4:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8015fd8:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 8015fdc:	403c4000 	eorsmi	r4, ip, r0
 8015fe0:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8015fe4:	10284440 	eorne	r4, r8, r0, asr #8
 8015fe8:	40004428 	andmi	r4, r0, r8, lsr #8
 8015fec:	9090904c 	addsls	r9, r0, ip, asr #32
 8015ff0:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 8015ff4:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 8015ff8:	08004000 	stmdaeq	r0, {lr}
 8015ffc:	00004136 	andeq	r4, r0, r6, lsr r1
 8016000:	77000040 	strvc	r0, [r0, -r0, asr #32]
 8016004:	40000000 	andmi	r0, r0, r0
 8016008:	08364100 	ldmdaeq	r6!, {r8, lr}
 801600c:	02400000 	subeq	r0, r0, #0
 8016010:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 8016014:	263c4000 	ldrtcs	r4, [ip], -r0
 8016018:	003c2623 	eorseq	r2, ip, r3, lsr #12

0801601c <oled_128x32_init>:
 801601c:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8016020:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8016024:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8016028:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 801602c:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8016030:	a6a440db 	ssatge	r4, #5, fp, asr #1

08016034 <oled_128x64_init>:
 8016034:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8016038:	4000d33f 	andmi	sp, r0, pc, lsr r3
 801603c:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8016040:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 8016044:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8016048:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801604c <vtable for Ssd1306>:
	...
 8016054:	08011775 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sl, ip}
 8016058:	080117a1 	stmdaeq	r1, {r0, r5, r7, r8, r9, sl, ip}
 801605c:	08011ab9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, fp, ip}
 8016060:	08011a3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, fp, ip}
 8016064:	08011909 	stmdaeq	r1, {r0, r3, r8, fp, ip}
 8016068:	080117c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip}
 801606c:	080117e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, ip}
 8016070:	080118df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, fp, ip}
 8016074:	08011899 	stmdaeq	r1, {r0, r3, r4, r7, fp, ip}
 8016078:	08011777 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, r9, sl, ip}
 801607c:	08011945 	stmdaeq	r1, {r0, r2, r6, r8, fp, ip}
 8016080:	08011951 	stmdaeq	r1, {r0, r4, r6, r8, fp, ip}
 8016084:	0801196b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, fp, ip}
 8016088:	08011779 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, ip}
 801608c:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8016090:	5b1b006d 	blpl	86d624c <__exidx_end+0x6c00c4>
 8016094:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8016098:	31335b1b 	teqcc	r3, fp, lsl fp
 801609c:	5b1b006d 	blpl	86d6258 <__exidx_end+0x6c00d0>
 80160a0:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 80160a4:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 80160a8:	5b1b006d 	blpl	86d6264 <__exidx_end+0x6c00dc>
 80160ac:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 80160b0:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 80160b4:	205d732a 	subscs	r7, sp, sl, lsr #6
 80160b8:	43207325 			; <UNDEFINED> instruction: 0x43207325
 80160bc:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 80160c0:	2064656c 	rsbcs	r6, r4, ip, ror #10
 80160c4:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 80160c8:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 80160cc:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 80160d0:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 80160d4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80160d8:	203a636f 	eorscs	r6, sl, pc, ror #6
 80160dc:	000a7525 	andeq	r7, sl, r5, lsr #10
 80160e0:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80160e4:	203a636f 	eorscs	r6, sl, pc, ror #6
 80160e8:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 80160ec:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 80160f0:	6b636f6c 	blvs	98f1ea8 <__exidx_end+0x18dbd20>
 80160f4:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 80160f8:	000a7469 	andeq	r7, sl, r9, ror #8
 80160fc:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8016100:	203a636f 	eorscs	r6, sl, pc, ror #6
 8016104:	6f6c4270 	svcvs	0x006c4270
 8016108:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 801610c:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8016110:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 8016114:	7a697320 	bvc	9a72d9c <__exidx_end+0x1a5cc14>
 8016118:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 801611c:	6164202c 	cmnvs	r4, ip, lsr #32
 8016120:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 8016124:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 8016128:	3a656572 	bcc	996f6f8 <__exidx_end+0x1959570>
 801612c:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 8016130:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8016134:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8016138:	203d2072 	eorscs	r2, sp, r2, ror r0
 801613c:	202c7025 	eorcs	r7, ip, r5, lsr #32
 8016140:	6f6c4270 	svcvs	0x006c4270
 8016144:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 8016148:	0a702520 	beq	9c1f5d0 <__exidx_end+0x1c09448>
 801614c:	00000000 	andeq	r0, r0, r0

08016150 <days_of_month>:
 8016150:	0000001f 	andeq	r0, r0, pc, lsl r0
 8016154:	0000001c 	andeq	r0, r0, ip, lsl r0
 8016158:	0000001f 	andeq	r0, r0, pc, lsl r0
 801615c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8016160:	0000001f 	andeq	r0, r0, pc, lsl r0
 8016164:	0000001e 	andeq	r0, r0, lr, lsl r0
 8016168:	0000001f 	andeq	r0, r0, pc, lsl r0
 801616c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8016170:	0000001e 	andeq	r0, r0, lr, lsl r0
 8016174:	0000001f 	andeq	r0, r0, pc, lsl r0
 8016178:	0000001e 	andeq	r0, r0, lr, lsl r0
 801617c:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

08016180 <__exidx_start>:
 8016180:	7fff13f4 	svcvc	0x00ff13f4
 8016184:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08016188 <.ARM.attributes>:
 8016188:	00002e41 	andeq	r2, r0, r1, asr #28
 801618c:	61656100 	cmnvs	r5, r0, lsl #2
 8016190:	01006962 	tsteq	r0, r2, ror #18
 8016194:	00000024 	andeq	r0, r0, r4, lsr #32
 8016198:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 801619c:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 80161a0:	0600334d 	streq	r3, [r0], -sp, asr #6
 80161a4:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 80161a8:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 80161ac:	17011501 	strne	r1, [r1, -r1, lsl #10]
 80161b0:	1a011803 	bne	805c1c4 <__exidx_end+0x4603c>
 80161b4:	Address 0x00000000080161b4 is out of bounds.


Disassembly of section .data:

20000000 <s_multicast_mac>:
20000000:	005e0001 	subseq	r0, lr, r1
20000004:	00000000 	andeq	r0, r0, r0

20000008 <MDNS::s_nHandle>:
20000008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000000c <next_block>:
2000000c:	20016000 	andcs	r6, r1, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <outptr>:
200000e8:	00000000 	andeq	r0, r0, r0

200000ec <guard variable for lightset::Data::Get()::instance>:
200000ec:	00000000 	andeq	r0, r0, r0

200000f0 <lightset::Data::Get()::instance>:
	...

20001900 <E131Bridge::s_pThis>:
20001900:	00000000 	andeq	r0, r0, r0

20001904 <s_ReceivingMask>:
20001904:	00000000 	andeq	r0, r0, r0

20001908 <WS28xxDmx::s_pThis>:
20001908:	00000000 	andeq	r0, r0, r0

2000190c <PixelPatterns::m_PortConfig>:
	...

2000192c <PixelPatterns::m_nActivePorts>:
2000192c:	00000000 	andeq	r0, r0, r0

20001930 <PixelPatterns::m_pScannerColours>:
20001930:	00000000 	andeq	r0, r0, r0

20001934 <PixelPatterns::m_nCount>:
20001934:	00000000 	andeq	r0, r0, r0

20001938 <PixelPatterns::m_pOutput>:
20001938:	00000000 	andeq	r0, r0, r0

2000193c <PixelTestPattern::s_Pattern>:
2000193c:	00000000 	andeq	r0, r0, r0

20001940 <s_tmp>:
20001940:	00000000 	andeq	r0, r0, r0

20001944 <WS28xx::s_pThis>:
20001944:	00000000 	andeq	r0, r0, r0

20001948 <RemoteConfig::s_pUdpBuffer>:
20001948:	00000000 	andeq	r0, r0, r0

2000194c <RemoteConfig::s_RemoteConfigListBin>:
	...

20001970 <RemoteConfig::s_pThis>:
20001970:	00000000 	andeq	r0, r0, r0

20001974 <SpiFlashStore::s_nWaitMillis>:
20001974:	00000000 	andeq	r0, r0, r0

20001978 <SpiFlashStore::s_SpiFlashData>:
	...

20002978 <SpiFlashStore::s_nStartAddress>:
20002978:	00000000 	andeq	r0, r0, r0

2000297c <SpiFlashStore::s_bHaveFlashChip>:
2000297c:	00000000 	andeq	r0, r0, r0

20002980 <SpiFlashStore::s_nSpiFlashStoreSize>:
20002980:	00000000 	andeq	r0, r0, r0

20002984 <SpiFlashStore::s_State>:
20002984:	00000000 	andeq	r0, r0, r0

20002988 <SpiFlashStore::s_pThis>:
20002988:	00000000 	andeq	r0, r0, r0

2000298c <SpiFlashStore::s_bIsNew>:
2000298c:	00000000 	andeq	r0, r0, r0

20002990 <StoreDisplayUdf::s_pThis>:
20002990:	00000000 	andeq	r0, r0, r0

20002994 <StoreE131::s_pThis>:
20002994:	00000000 	andeq	r0, r0, r0

20002998 <StoreNetwork::s_pThis>:
20002998:	00000000 	andeq	r0, r0, r0

2000299c <StoreRemoteConfig::s_pThis>:
2000299c:	00000000 	andeq	r0, r0, r0

200029a0 <StoreWS28xxDmx::s_pThis>:
200029a0:	00000000 	andeq	r0, r0, r0

200029a4 <FlashRom::s_pThis>:
200029a4:	00000000 	andeq	r0, r0, r0

200029a8 <flashrom::s_nAddress>:
200029a8:	00000000 	andeq	r0, r0, r0

200029ac <flashrom::s_State>:
200029ac:	00000000 	andeq	r0, r0, r0

200029b0 <flashrom::s_nPage>:
200029b0:	00000000 	andeq	r0, r0, r0

200029b4 <flashrom::s_pData>:
200029b4:	00000000 	andeq	r0, r0, r0

200029b8 <flashrom::s_isBank0>:
200029b8:	00000000 	andeq	r0, r0, r0

200029bc <flashrom::s_nLength>:
200029bc:	00000000 	andeq	r0, r0, r0

200029c0 <g_ip_info>:
	...

200029cc <g_mac_address>:
200029cc:	00000000 	andeq	r0, r0, r0
	...

200029d2 <s_is_dhcp>:
	...

200029d4 <s_p>:
200029d4:	00000000 	andeq	r0, r0, r0

200029d8 <s_ticker>:
200029d8:	00000000 	andeq	r0, r0, r0

200029dc <s_mac_address>:
	...

200029e4 <s_mac_address_arp_reply>:
200029e4:	00000000 	andeq	r0, r0, r0
	...

200029ea <s_id>:
	...

200029ec <s_recv_queue>:
	...

2000355c <s_tcb>:
	...

200035a0 <s_tcp>:
	...

20003b8c <broadcast_mask>:
20003b8c:	00000000 	andeq	r0, r0, r0

20003b90 <gw_ip>:
20003b90:	00000000 	andeq	r0, r0, r0

20003b94 <on_network_mask>:
20003b94:	00000000 	andeq	r0, r0, r0

20003b98 <s_id>:
20003b98:	00000000 	andeq	r0, r0, r0

20003b9c <s_ports_allowed>:
	...

20003bbc <s_recv_queue>:
	...

2000985c <s_send_packet>:
	...

20009e48 <MDNS::s_nRemoteIp>:
20009e48:	00000000 	andeq	r0, r0, r0

20009e4c <MDNS::s_nRemotePort>:
20009e4c:	00000000 	andeq	r0, r0, r0

20009e50 <MDNS::s_nMulticastIp>:
20009e50:	00000000 	andeq	r0, r0, r0

20009e54 <MDNS::s_AnswerLocalIp>:
	...

2000a058 <MDNS::s_ServiceRecords>:
	...

2000a078 <MDNS::s_nBytesReceived>:
2000a078:	00000000 	andeq	r0, r0, r0

2000a07c <MDNS::s_ServiceRecordsData>:
	...

2000a280 <MDNS::s_pName>:
2000a280:	00000000 	andeq	r0, r0, r0

2000a284 <MDNS::s_pBuffer>:
2000a284:	00000000 	andeq	r0, r0, r0

2000a288 <Network::s_pThis>:
2000a288:	00000000 	andeq	r0, r0, r0

2000a28c <NetworkParams::m_tNetworkParams>:
	...

2000a2ec <s_arp_announce>:
	...

2000a318 <s_arp_reply>:
	...

2000a344 <s_arp_request>:
	...

2000a370 <s_arp_records>:
	...

2000a4f0 <s_entry_current>:
2000a4f0:	00000000 	andeq	r0, r0, r0

2000a4f4 <s_dhcp_allocated_gw>:
2000a4f4:	00000000 	andeq	r0, r0, r0

2000a4f8 <s_dhcp_allocated_ip>:
2000a4f8:	00000000 	andeq	r0, r0, r0

2000a4fc <s_dhcp_allocated_netmask>:
2000a4fc:	00000000 	andeq	r0, r0, r0

2000a500 <s_dhcp_message>:
	...

2000a724 <s_dhcp_server_ip>:
2000a724:	00000000 	andeq	r0, r0, r0

2000a728 <s_groups>:
	...

2000a848 <s_id>:
2000a848:	00000000 	andeq	r0, r0, r0

2000a84c <s_joins_allowed_index>:
2000a84c:	00000000 	andeq	r0, r0, r0

2000a850 <s_leave>:
	...

2000a880 <s_multicast_mac>:
	...

2000a888 <s_report>:
	...

2000a8b8 <DisplayUdf::s_pThis>:
2000a8b8:	00000000 	andeq	r0, r0, r0

2000a8bc <PropertiesConfig::s_Config>:
2000a8bc:	00000000 	andeq	r0, r0, r0

2000a8c0 <Display::s_pThis>:
2000a8c0:	00000000 	andeq	r0, r0, r0

2000a8c4 <_ClearBuffer>:
	...

2000a94c <Ssd1306::s_pThis>:
2000a94c:	00000000 	andeq	r0, r0, r0

2000a950 <FirmwareVersion::s_FirmwareVersion>:
	...

2000a966 <FirmwareVersion::s_Print>:
	...

2000a9a8 <FirmwareVersion::s_pThis>:
2000a9a8:	00000000 	andeq	r0, r0, r0

2000a9ac <LedBlink::s_pThis>:
2000a9ac:	00000000 	andeq	r0, r0, r0

2000a9b0 <Hardware::s_pThis>:
2000a9b0:	00000000 	andeq	r0, r0, r0

2000a9b4 <last.0>:
2000a9b4:	00000000 	andeq	r0, r0, r0

2000a9b8 <s_micros>:
	...

2000a9c0 <set_timer>:
2000a9c0:	00000000 	andeq	r0, r0, r0

2000a9c4 <s_nSysTickMillis>:
2000a9c4:	00000000 	andeq	r0, r0, r0

2000a9c8 <enet_init_status>:
2000a9c8:	00000000 	andeq	r0, r0, r0

2000a9cc <s_nAddress>:
2000a9cc:	00000000 	andeq	r0, r0, r0

2000a9d0 <s_TxBuffer>:
	...

200129d0 <dma_current_ptp_rxdesc>:
200129d0:	00000000 	andeq	r0, r0, r0

200129d4 <dma_current_ptp_txdesc>:
200129d4:	00000000 	andeq	r0, r0, r0

200129d8 <dma_current_rxdesc>:
200129d8:	00000000 	andeq	r0, r0, r0

200129dc <dma_current_txdesc>:
200129dc:	00000000 	andeq	r0, r0, r0

200129e0 <enet_initpara>:
	...

20012a1c <rx_buff>:
	...

20014dd4 <rxdesc_tab>:
	...

20014e34 <tx_buff>:
	...

20015a1c <txdesc_tab>:
	...

Disassembly of section .heap:

20016000 <heap_low>:
	...

Disassembly of section .stack:

20016800 <_sp-0x1800>:
	...
