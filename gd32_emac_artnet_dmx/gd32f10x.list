
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	08007e21 	stmdaeq	r0, {r0, r5, r9, sl, fp, ip, sp, lr}
 8007008:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800700c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007010:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007014:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007018:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
	...
 800702c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007030:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800703c:	08013575 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, sl, ip, sp}
 8007040:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007044:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007048:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800704c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007050:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007054:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007058:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800705c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007060:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007064:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007068:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800706c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007070:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007074:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007078:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800707c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007080:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007084:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007088:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800708c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007090:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007094:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007098:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800709c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070a0:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070a4:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070a8:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070ac:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070b0:	0800cc5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, sl, fp, lr, pc}
 80070b4:	0800ccfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, sl, fp, lr, pc}
 80070b8:	0800cd41 	stmdaeq	r0, {r0, r6, r8, sl, fp, lr, pc}
 80070bc:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070c0:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070c4:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070c8:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070cc:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070d0:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070d4:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070d8:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070dc:	0800ca65 	stmdaeq	r0, {r0, r2, r5, r6, r9, fp, lr, pc}
 80070e0:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070e4:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070e8:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070ec:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070f0:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 80070f4:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
	...
 8007100:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800710c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007110:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007114:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007118:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800711c:	0800cd61 	stmdaeq	r0, {r0, r5, r6, r8, sl, fp, lr, pc}
 8007120:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007124:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007128:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800712c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007130:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007134:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007138:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800713c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007140:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007144:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 8007148:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}
 800714c:	08007e6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, ip, sp, lr}

Disassembly of section .text:

08007150 <net_init>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4616      	mov	r6, r2
 8007158:	9f06      	ldr	r7, [sp, #24]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <net_init+0x94>)
 800715c:	461d      	mov	r5, r3
 800715e:	1e43      	subs	r3, r0, #1
 8007160:	3005      	adds	r0, #5
 8007162:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007166:	4283      	cmp	r3, r0
 8007168:	f802 1b01 	strb.w	r1, [r2], #1
 800716c:	d1f9      	bne.n	8007162 <net_init+0x12>
 800716e:	4623      	mov	r3, r4
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <net_init+0x98>)
 8007172:	f104 010c 	add.w	r1, r4, #12
 8007176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800717a:	428b      	cmp	r3, r1
 800717c:	f802 0b01 	strb.w	r0, [r2], #1
 8007180:	d1f9      	bne.n	8007176 <net_init+0x26>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	4918      	ldr	r1, [pc, #96]	; (80071e8 <net_init+0x98>)
 8007188:	4816      	ldr	r0, [pc, #88]	; (80071e4 <net_init+0x94>)
 800718a:	f000 f9ab 	bl	80074e4 <ip_init>
 800718e:	4815      	ldr	r0, [pc, #84]	; (80071e4 <net_init+0x94>)
 8007190:	f000 f83c 	bl	800720c <rfc3927_init>
 8007194:	f887 8000 	strb.w	r8, [r7]
 8007198:	782b      	ldrb	r3, [r5, #0]
 800719a:	b163      	cbz	r3, 80071b6 <net_init+0x66>
 800719c:	4632      	mov	r2, r6
 800719e:	4912      	ldr	r1, [pc, #72]	; (80071e8 <net_init+0x98>)
 80071a0:	4810      	ldr	r0, [pc, #64]	; (80071e4 <net_init+0x94>)
 80071a2:	f009 ff79 	bl	8011098 <dhcp_client>
 80071a6:	4540      	cmp	r0, r8
 80071a8:	da05      	bge.n	80071b6 <net_init+0x66>
 80071aa:	480f      	ldr	r0, [pc, #60]	; (80071e8 <net_init+0x98>)
 80071ac:	f885 8000 	strb.w	r8, [r5]
 80071b0:	f008 f9ce 	bl	800f550 <rfc3927>
 80071b4:	7038      	strb	r0, [r7, #0]
 80071b6:	490c      	ldr	r1, [pc, #48]	; (80071e8 <net_init+0x98>)
 80071b8:	480a      	ldr	r0, [pc, #40]	; (80071e4 <net_init+0x94>)
 80071ba:	f000 f887 	bl	80072cc <arp_init>
 80071be:	480a      	ldr	r0, [pc, #40]	; (80071e8 <net_init+0x98>)
 80071c0:	f00a f98a 	bl	80114d8 <ip_set_ip>
 80071c4:	f000 f82e 	bl	8007224 <tcp_init>
 80071c8:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <net_init+0x98>)
 80071ca:	1e63      	subs	r3, r4, #1
 80071cc:	340b      	adds	r4, #11
 80071ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80071d2:	f803 1f01 	strb.w	r1, [r3, #1]!
 80071d6:	429c      	cmp	r4, r3
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x7e>
 80071da:	782a      	ldrb	r2, [r5, #0]
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <net_init+0x9c>)
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	20002f10 	andcs	r2, r0, r0, lsl pc
 80071e8:	20002f04 	andcs	r2, r0, r4, lsl #30
 80071ec:	20002f16 	andcs	r2, r0, r6, lsl pc

080071f0 <net_shutdown>:
 80071f0:	b508      	push	{r3, lr}
 80071f2:	f000 f982 	bl	80074fa <ip_shutdown>
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <net_shutdown+0x18>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b11b      	cbz	r3, 8007204 <net_shutdown+0x14>
 80071fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007200:	f00a b852 	b.w	80112a8 <dhcp_client_release>
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	20002f16 	andcs	r2, r0, r6, lsl pc

0800720c <rfc3927_init>:
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <rfc3927_init+0x14>)
 800720e:	1d82      	adds	r2, r0, #6
 8007210:	4290      	cmp	r0, r2
 8007212:	d100      	bne.n	8007216 <rfc3927_init+0xa>
 8007214:	4770      	bx	lr
 8007216:	f810 1b01 	ldrb.w	r1, [r0], #1
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f7      	b.n	8007210 <rfc3927_init+0x4>
 8007220:	20002f20 	andcs	r2, r0, r0, lsr #30

08007224 <tcp_init>:
 8007224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007226:	2206      	movs	r2, #6
 8007228:	4c0e      	ldr	r4, [pc, #56]	; (8007264 <tcp_init+0x40>)
 800722a:	490f      	ldr	r1, [pc, #60]	; (8007268 <tcp_init+0x44>)
 800722c:	18a0      	adds	r0, r4, r2
 800722e:	f008 f9e9 	bl	800f604 <memcpy.isra.0>
 8007232:	2308      	movs	r3, #8
 8007234:	2204      	movs	r2, #4
 8007236:	2500      	movs	r5, #0
 8007238:	7323      	strb	r3, [r4, #12]
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <tcp_init+0x48>)
 800723c:	eb0d 0102 	add.w	r1, sp, r2
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f104 001a 	add.w	r0, r4, #26
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	7365      	strb	r5, [r4, #13]
 800724a:	f008 f9db 	bl	800f604 <memcpy.isra.0>
 800724e:	2345      	movs	r3, #69	; 0x45
 8007250:	73a3      	strb	r3, [r4, #14]
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	7523      	strb	r3, [r4, #20]
 8007256:	75a3      	strb	r3, [r4, #22]
 8007258:	2306      	movs	r3, #6
 800725a:	73e5      	strb	r5, [r4, #15]
 800725c:	7565      	strb	r5, [r4, #21]
 800725e:	75e3      	strb	r3, [r4, #23]
 8007260:	b003      	add	sp, #12
 8007262:	bd30      	pop	{r4, r5, pc}
 8007264:	20003ae4 	andcs	r3, r0, r4, ror #21
 8007268:	20002f10 	andcs	r2, r0, r0, lsl pc
 800726c:	20002f04 	andcs	r2, r0, r4, lsl #30

08007270 <udp_init>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	2200      	movs	r2, #0
 8007274:	2408      	movs	r4, #8
 8007276:	460e      	mov	r6, r1
 8007278:	4b0d      	ldr	r3, [pc, #52]	; (80072b0 <udp_init+0x40>)
 800727a:	490e      	ldr	r1, [pc, #56]	; (80072b4 <udp_init+0x44>)
 800727c:	3c01      	subs	r4, #1
 800727e:	801a      	strh	r2, [r3, #0]
 8007280:	805a      	strh	r2, [r3, #2]
 8007282:	f841 2b04 	str.w	r2, [r1], #4
 8007286:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 800728a:	d1f7      	bne.n	800727c <udp_init+0xc>
 800728c:	2206      	movs	r2, #6
 800728e:	4d0a      	ldr	r5, [pc, #40]	; (80072b8 <udp_init+0x48>)
 8007290:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <udp_init+0x4c>)
 8007292:	4601      	mov	r1, r0
 8007294:	18a8      	adds	r0, r5, r2
 8007296:	801c      	strh	r4, [r3, #0]
 8007298:	f008 fb40 	bl	800f91c <memcpy.isra.0>
 800729c:	4b08      	ldr	r3, [pc, #32]	; (80072c0 <udp_init+0x50>)
 800729e:	4630      	mov	r0, r6
 80072a0:	60eb      	str	r3, [r5, #12]
 80072a2:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <udp_init+0x54>)
 80072a4:	616b      	str	r3, [r5, #20]
 80072a6:	f008 fb65 	bl	800f974 <udp_set_ip>
 80072aa:	852c      	strh	r4, [r5, #40]	; 0x28
 80072ac:	bd70      	pop	{r4, r5, r6, pc}
 80072ae:	bf00      	nop
 80072b0:	20004100 	andcs	r4, r0, r0, lsl #2
 80072b4:	200040e0 	andcs	r4, r0, r0, ror #1
 80072b8:	20009da0 	andcs	r9, r0, r0, lsr #27
 80072bc:	200040dc 	ldrdcs	r4, [r0], -ip
 80072c0:	00450008 	subeq	r0, r5, r8
 80072c4:	11400040 	cmpne	r0, r0, asr #32

080072c8 <udp_shutdown>:
 80072c8:	4770      	bx	lr
	...

080072cc <arp_init>:
 80072cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d0:	4604      	mov	r4, r0
 80072d2:	460d      	mov	r5, r1
 80072d4:	f000 f876 	bl	80073c4 <arp_cache_init>
 80072d8:	2206      	movs	r2, #6
 80072da:	4621      	mov	r1, r4
 80072dc:	482e      	ldr	r0, [pc, #184]	; (8007398 <arp_init+0xcc>)
 80072de:	682f      	ldr	r7, [r5, #0]
 80072e0:	f009 fd4c 	bl	8010d7c <memcpy.isra.0>
 80072e4:	4b2d      	ldr	r3, [pc, #180]	; (800739c <arp_init+0xd0>)
 80072e6:	2507      	movs	r5, #7
 80072e8:	461e      	mov	r6, r3
 80072ea:	22ff      	movs	r2, #255	; 0xff
 80072ec:	3d01      	subs	r5, #1
 80072ee:	d146      	bne.n	800737e <arp_init+0xb2>
 80072f0:	4b2b      	ldr	r3, [pc, #172]	; (80073a0 <arp_init+0xd4>)
 80072f2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80073a4 <arp_init+0xd8>
 80072f6:	2206      	movs	r2, #6
 80072f8:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80072fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007300:	4621      	mov	r1, r4
 8007302:	4829      	ldr	r0, [pc, #164]	; (80073a8 <arp_init+0xdc>)
 8007304:	82b3      	strh	r3, [r6, #20]
 8007306:	f009 fd39 	bl	8010d7c <memcpy.isra.0>
 800730a:	2307      	movs	r3, #7
 800730c:	4a27      	ldr	r2, [pc, #156]	; (80073ac <arp_init+0xe0>)
 800730e:	61f7      	str	r7, [r6, #28]
 8007310:	3b01      	subs	r3, #1
 8007312:	d137      	bne.n	8007384 <arp_init+0xb8>
 8007314:	2206      	movs	r2, #6
 8007316:	4621      	mov	r1, r4
 8007318:	4825      	ldr	r0, [pc, #148]	; (80073b0 <arp_init+0xe4>)
 800731a:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 800731e:	f009 fd2d 	bl	8010d7c <memcpy.isra.0>
 8007322:	4a24      	ldr	r2, [pc, #144]	; (80073b4 <arp_init+0xe8>)
 8007324:	2306      	movs	r3, #6
 8007326:	4615      	mov	r5, r2
 8007328:	21ff      	movs	r1, #255	; 0xff
 800732a:	3b01      	subs	r3, #1
 800732c:	d22d      	bcs.n	800738a <arp_init+0xbe>
 800732e:	4b1c      	ldr	r3, [pc, #112]	; (80073a0 <arp_init+0xd4>)
 8007330:	2206      	movs	r2, #6
 8007332:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8007336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800733a:	4621      	mov	r1, r4
 800733c:	481e      	ldr	r0, [pc, #120]	; (80073b8 <arp_init+0xec>)
 800733e:	82ab      	strh	r3, [r5, #20]
 8007340:	f009 fd1c 	bl	8010d7c <memcpy.isra.0>
 8007344:	2307      	movs	r3, #7
 8007346:	2100      	movs	r1, #0
 8007348:	4a1c      	ldr	r2, [pc, #112]	; (80073bc <arp_init+0xf0>)
 800734a:	61ef      	str	r7, [r5, #28]
 800734c:	3b01      	subs	r3, #1
 800734e:	d11f      	bne.n	8007390 <arp_init+0xc4>
 8007350:	2206      	movs	r2, #6
 8007352:	4d1b      	ldr	r5, [pc, #108]	; (80073c0 <arp_init+0xf4>)
 8007354:	4621      	mov	r1, r4
 8007356:	18a8      	adds	r0, r5, r2
 8007358:	f009 fd10 	bl	8010d7c <memcpy.isra.0>
 800735c:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <arp_init+0xd4>)
 800735e:	4621      	mov	r1, r4
 8007360:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8007364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007368:	f105 0016 	add.w	r0, r5, #22
 800736c:	2206      	movs	r2, #6
 800736e:	82ab      	strh	r3, [r5, #20]
 8007370:	f009 fd04 	bl	8010d7c <memcpy.isra.0>
 8007374:	61ef      	str	r7, [r5, #28]
 8007376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800737a:	f009 bd09 	b.w	8010d90 <arp_announce>
 800737e:	f803 2b01 	strb.w	r2, [r3], #1
 8007382:	e7b3      	b.n	80072ec <arp_init+0x20>
 8007384:	f802 5b01 	strb.w	r5, [r2], #1
 8007388:	e7c2      	b.n	8007310 <arp_init+0x44>
 800738a:	f802 1b01 	strb.w	r1, [r2], #1
 800738e:	e7cc      	b.n	800732a <arp_init+0x5e>
 8007390:	f802 1b01 	strb.w	r1, [r2], #1
 8007394:	e7da      	b.n	800734c <arp_init+0x80>
 8007396:	bf00      	nop
 8007398:	2000a836 	andcs	sl, r0, r6, lsr r8
 800739c:	2000a830 	andcs	sl, r0, r0, lsr r8
 80073a0:	01000608 	tsteq	r0, r8, lsl #12
 80073a4:	04060008 	streq	r0, [r6], #-8
 80073a8:	2000a846 	andcs	sl, r0, r6, asr #16
 80073ac:	2000a850 	andcs	sl, r0, r0, asr r8
 80073b0:	2000a88e 	andcs	sl, r0, lr, lsl #17
 80073b4:	2000a888 	andcs	sl, r0, r8, lsl #17
 80073b8:	2000a89e 	mulcs	r0, lr, r8
 80073bc:	2000a8a8 	andcs	sl, r0, r8, lsr #17
 80073c0:	2000a85c 	andcs	sl, r0, ip, asr r8

080073c4 <arp_cache_init>:
 80073c4:	2300      	movs	r3, #0
 80073c6:	4618      	mov	r0, r3
 80073c8:	4a09      	ldr	r2, [pc, #36]	; (80073f0 <arp_cache_init+0x2c>)
 80073ca:	b510      	push	{r4, lr}
 80073cc:	8013      	strh	r3, [r2, #0]
 80073ce:	4a09      	ldr	r2, [pc, #36]	; (80073f4 <arp_cache_init+0x30>)
 80073d0:	4611      	mov	r1, r2
 80073d2:	f842 0c04 	str.w	r0, [r2, #-4]
 80073d6:	1d94      	adds	r4, r2, #6
 80073d8:	42a1      	cmp	r1, r4
 80073da:	d105      	bne.n	80073e8 <arp_cache_init+0x24>
 80073dc:	3303      	adds	r3, #3
 80073de:	2b60      	cmp	r3, #96	; 0x60
 80073e0:	f102 020c 	add.w	r2, r2, #12
 80073e4:	d1f4      	bne.n	80073d0 <arp_cache_init+0xc>
 80073e6:	bd10      	pop	{r4, pc}
 80073e8:	f801 0b01 	strb.w	r0, [r1], #1
 80073ec:	e7f4      	b.n	80073d8 <arp_cache_init+0x14>
 80073ee:	bf00      	nop
 80073f0:	2000aa34 	andcs	sl, r0, r4, lsr sl
 80073f4:	2000a8b8 			; <UNDEFINED> instruction: 0x2000a8b8

080073f8 <igmp_init>:
 80073f8:	2200      	movs	r2, #0
 80073fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073fe:	4605      	mov	r5, r0
 8007400:	4608      	mov	r0, r1
 8007402:	4611      	mov	r1, r2
 8007404:	4b23      	ldr	r3, [pc, #140]	; (8007494 <igmp_init+0x9c>)
 8007406:	f103 0408 	add.w	r4, r3, #8
 800740a:	42a3      	cmp	r3, r4
 800740c:	d13e      	bne.n	800748c <igmp_init+0x94>
 800740e:	3201      	adds	r2, #1
 8007410:	2a24      	cmp	r2, #36	; 0x24
 8007412:	d1f8      	bne.n	8007406 <igmp_init+0xe>
 8007414:	2600      	movs	r6, #0
 8007416:	4b20      	ldr	r3, [pc, #128]	; (8007498 <igmp_init+0xa0>)
 8007418:	4c20      	ldr	r4, [pc, #128]	; (800749c <igmp_init+0xa4>)
 800741a:	601e      	str	r6, [r3, #0]
 800741c:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <igmp_init+0xa8>)
 800741e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8007422:	801e      	strh	r6, [r3, #0]
 8007424:	f009 ffb8 	bl	8011398 <igmp_set_ip>
 8007428:	2201      	movs	r2, #1
 800742a:	4b1e      	ldr	r3, [pc, #120]	; (80074a4 <igmp_init+0xac>)
 800742c:	4629      	mov	r1, r5
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	225e      	movs	r2, #94	; 0x5e
 8007432:	709a      	strb	r2, [r3, #2]
 8007434:	2206      	movs	r2, #6
 8007436:	18a0      	adds	r0, r4, r2
 8007438:	f009 ff64 	bl	8011304 <memcpy.isra.0>
 800743c:	f240 4394 	movw	r3, #1172	; 0x494
 8007440:	8463      	strh	r3, [r4, #34]	; 0x22
 8007442:	2316      	movs	r3, #22
 8007444:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074a8 <igmp_init+0xb0>
 8007448:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074ac <igmp_init+0xb4>
 800744c:	84e3      	strh	r3, [r4, #38]	; 0x26
 800744e:	f8c4 9014 	str.w	r9, [r4, #20]
 8007452:	4b17      	ldr	r3, [pc, #92]	; (80074b0 <igmp_init+0xb8>)
 8007454:	f8c4 800c 	str.w	r8, [r4, #12]
 8007458:	8227      	strh	r7, [r4, #16]
 800745a:	84a6      	strh	r6, [r4, #36]	; 0x24
 800745c:	4c15      	ldr	r4, [pc, #84]	; (80074b4 <igmp_init+0xbc>)
 800745e:	2206      	movs	r2, #6
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007466:	18a0      	adds	r0, r4, r2
 8007468:	80a3      	strh	r3, [r4, #4]
 800746a:	4629      	mov	r1, r5
 800746c:	f009 ff4a 	bl	8011304 <memcpy.isra.0>
 8007470:	23e0      	movs	r3, #224	; 0xe0
 8007472:	83e3      	strh	r3, [r4, #30]
 8007474:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8007478:	4a0f      	ldr	r2, [pc, #60]	; (80074b8 <igmp_init+0xc0>)
 800747a:	f8c4 9014 	str.w	r9, [r4, #20]
 800747e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8007482:	f8c4 800c 	str.w	r8, [r4, #12]
 8007486:	8227      	strh	r7, [r4, #16]
 8007488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748c:	f803 1b01 	strb.w	r1, [r3], #1
 8007490:	e7bb      	b.n	800740a <igmp_init+0x12>
 8007492:	bf00      	nop
 8007494:	2000ac6c 	andcs	sl, r0, ip, ror #24
 8007498:	2000ad90 	mulcs	r0, r0, sp
 800749c:	2000adcc 	andcs	sl, r0, ip, asr #27
 80074a0:	2000ad8c 	andcs	sl, r0, ip, lsl #27
 80074a4:	2000adc4 	andcs	sl, r0, r4, asr #27
 80074a8:	02010040 	andeq	r0, r1, #64	; 0x40
 80074ac:	00460008 	subeq	r0, r6, r8
 80074b0:	005e0001 	subseq	r0, lr, r1
 80074b4:	2000ad94 	mulcs	r0, r4, sp
 80074b8:	04940200 	ldreq	r0, [r4], #512	; 0x200

080074bc <igmp_shutdown>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	2500      	movs	r5, #0
 80074c0:	462e      	mov	r6, r5
 80074c2:	4c07      	ldr	r4, [pc, #28]	; (80074e0 <igmp_shutdown+0x24>)
 80074c4:	6820      	ldr	r0, [r4, #0]
 80074c6:	b120      	cbz	r0, 80074d2 <igmp_shutdown+0x16>
 80074c8:	f009 ffc2 	bl	8011450 <igmp_leave>
 80074cc:	6026      	str	r6, [r4, #0]
 80074ce:	7166      	strb	r6, [r4, #5]
 80074d0:	7126      	strb	r6, [r4, #4]
 80074d2:	3501      	adds	r5, #1
 80074d4:	2d24      	cmp	r5, #36	; 0x24
 80074d6:	f104 0408 	add.w	r4, r4, #8
 80074da:	d1f3      	bne.n	80074c4 <igmp_shutdown+0x8>
 80074dc:	bd70      	pop	{r4, r5, r6, pc}
 80074de:	bf00      	nop
 80074e0:	2000ac6c 	andcs	sl, r0, ip, ror #24

080074e4 <ip_init>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4604      	mov	r4, r0
 80074e8:	460d      	mov	r5, r1
 80074ea:	f7ff fec1 	bl	8007270 <udp_init>
 80074ee:	4629      	mov	r1, r5
 80074f0:	4620      	mov	r0, r4
 80074f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f6:	f7ff bf7f 	b.w	80073f8 <igmp_init>

080074fa <ip_shutdown>:
 80074fa:	b508      	push	{r3, lr}
 80074fc:	f7ff ffde 	bl	80074bc <igmp_shutdown>
 8007500:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007504:	f7ff bee0 	b.w	80072c8 <udp_shutdown>

08007508 <console_init>:
 8007508:	b508      	push	{r3, lr}
 800750a:	f00b ffd5 	bl	80134b8 <uart0_init>
 800750e:	4804      	ldr	r0, [pc, #16]	; (8007520 <console_init+0x18>)
 8007510:	f00c f802 	bl	8013518 <uart0_puts>
 8007514:	4803      	ldr	r0, [pc, #12]	; (8007524 <console_init+0x1c>)
 8007516:	f00b ffff 	bl	8013518 <uart0_puts>
 800751a:	2000      	movs	r0, #0
 800751c:	bd08      	pop	{r3, pc}
 800751e:	bf00      	nop
 8007520:	08015282 	stmdaeq	r1, {r1, r7, r9, ip, lr}
 8007524:	08017444 	stmdaeq	r1, {r2, r6, sl, ip, sp, lr}

08007528 <net_handle>:
 8007528:	b510      	push	{r4, lr}
 800752a:	4c0c      	ldr	r4, [pc, #48]	; (800755c <net_handle+0x34>)
 800752c:	4620      	mov	r0, r4
 800752e:	f00c fe45 	bl	80141bc <emac_eth_recv>
 8007532:	2800      	cmp	r0, #0
 8007534:	dd07      	ble.n	8007546 <net_handle+0x1e>
 8007536:	6820      	ldr	r0, [r4, #0]
 8007538:	8983      	ldrh	r3, [r0, #12]
 800753a:	2b08      	cmp	r3, #8
 800753c:	d107      	bne.n	800754e <net_handle+0x26>
 800753e:	f000 fa71 	bl	8007a24 <ip_handle>
 8007542:	f00c fe4f 	bl	80141e4 <emac_free_pkt>
 8007546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800754a:	f007 bff1 	b.w	800f530 <net_timers_run>
 800754e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8007552:	d1f6      	bne.n	8007542 <net_handle+0x1a>
 8007554:	f000 fa0a 	bl	800796c <arp_handle>
 8007558:	e7f3      	b.n	8007542 <net_handle+0x1a>
 800755a:	bf00      	nop
 800755c:	20002f18 	andcs	r2, r0, r8, lsl pc

08007560 <tcp_handle>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	4605      	mov	r5, r0
 8007566:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007568:	b085      	sub	sp, #20
 800756a:	ba5b      	rev16	r3, r3
 800756c:	8443      	strh	r3, [r0, #34]	; 0x22
 800756e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8007570:	f8b0 b010 	ldrh.w	fp, [r0, #16]
 8007574:	ba5b      	rev16	r3, r3
 8007576:	8483      	strh	r3, [r0, #36]	; 0x24
 8007578:	f890 802e 	ldrb.w	r8, [r0, #46]	; 0x2e
 800757c:	f008 f84c 	bl	800f618 <_bswap32>
 8007580:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8007582:	4ca6      	ldr	r4, [pc, #664]	; (800781c <tcp_handle+0x2bc>)
 8007584:	ba5b      	rev16	r3, r3
 8007586:	862b      	strh	r3, [r5, #48]	; 0x30
 8007588:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 800758a:	8822      	ldrh	r2, [r4, #0]
 800758c:	ba5b      	rev16	r3, r3
 800758e:	86ab      	strh	r3, [r5, #52]	; 0x34
 8007590:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8007592:	429a      	cmp	r2, r3
 8007594:	d14d      	bne.n	8007632 <tcp_handle+0xd2>
 8007596:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800759a:	2b01      	cmp	r3, #1
 800759c:	d00d      	beq.n	80075ba <tcp_handle+0x5a>
 800759e:	2204      	movs	r2, #4
 80075a0:	4668      	mov	r0, sp
 80075a2:	f105 011a 	add.w	r1, r5, #26
 80075a6:	f008 f82d 	bl	800f604 <memcpy.isra.0>
 80075aa:	8862      	ldrh	r2, [r4, #2]
 80075ac:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d13f      	bne.n	8007632 <tcp_handle+0xd2>
 80075b2:	6862      	ldr	r2, [r4, #4]
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d13b      	bne.n	8007632 <tcp_handle+0xd2>
 80075ba:	2204      	movs	r2, #4
 80075bc:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 80075c0:	eb0d 0002 	add.w	r0, sp, r2
 80075c4:	f008 f81e 	bl	800f604 <memcpy.isra.0>
 80075c8:	2204      	movs	r2, #4
 80075ca:	f105 0126 	add.w	r1, r5, #38	; 0x26
 80075ce:	eb0d 0002 	add.w	r0, sp, r2
 80075d2:	9e01      	ldr	r6, [sp, #4]
 80075d4:	f008 f816 	bl	800f604 <memcpy.isra.0>
 80075d8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80075dc:	9f01      	ldr	r7, [sp, #4]
 80075de:	2a01      	cmp	r2, #1
 80075e0:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 80075e4:	d01b      	beq.n	800761e <tcp_handle+0xbe>
 80075e6:	1ed3      	subs	r3, r2, #3
 80075e8:	2b07      	cmp	r3, #7
 80075ea:	d822      	bhi.n	8007632 <tcp_handle+0xd2>
 80075ec:	ea4f 1318 	mov.w	r3, r8, lsr #4
 80075f0:	f64f 78ec 	movw	r8, #65516	; 0xffec
 80075f4:	fa9b fb9b 	rev16.w	fp, fp
 80075f8:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 80075fc:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80075fe:	44d8      	add	r8, fp
 8007600:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 8007604:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007608:	fa1f f888 	uxth.w	r8, r8
 800760c:	2900      	cmp	r1, #0
 800760e:	d142      	bne.n	8007696 <tcp_handle+0x136>
 8007610:	f1b8 0f00 	cmp.w	r8, #0
 8007614:	d16b      	bne.n	80076ee <tcp_handle+0x18e>
 8007616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007618:	42bb      	cmp	r3, r7
 800761a:	d168      	bne.n	80076ee <tcp_handle+0x18e>
 800761c:	e048      	b.n	80076b0 <tcp_handle+0x150>
 800761e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007622:	075a      	lsls	r2, r3, #29
 8007624:	d405      	bmi.n	8007632 <tcp_handle+0xd2>
 8007626:	06d8      	lsls	r0, r3, #27
 8007628:	d506      	bpl.n	8007638 <tcp_handle+0xd8>
 800762a:	4628      	mov	r0, r5
 800762c:	497b      	ldr	r1, [pc, #492]	; (800781c <tcp_handle+0x2bc>)
 800762e:	f008 f8c7 	bl	800f7c0 <_send_reset>
 8007632:	b005      	add	sp, #20
 8007634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007638:	0799      	lsls	r1, r3, #30
 800763a:	d5fa      	bpl.n	8007632 <tcp_handle+0xd2>
 800763c:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8007640:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8007644:	4668      	mov	r0, sp
 8007646:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800764a:	f105 011a 	add.w	r1, r5, #26
 800764e:	2204      	movs	r2, #4
 8007650:	8063      	strh	r3, [r4, #2]
 8007652:	f007 ffd7 	bl	800f604 <memcpy.isra.0>
 8007656:	2206      	movs	r2, #6
 8007658:	9b00      	ldr	r3, [sp, #0]
 800765a:	18a9      	adds	r1, r5, r2
 800765c:	4870      	ldr	r0, [pc, #448]	; (8007820 <tcp_handle+0x2c0>)
 800765e:	6063      	str	r3, [r4, #4]
 8007660:	f007 ffd0 	bl	800f604 <memcpy.isra.0>
 8007664:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007666:	1c7b      	adds	r3, r7, #1
 8007668:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800766c:	6363      	str	r3, [r4, #52]	; 0x34
 800766e:	2312      	movs	r3, #18
 8007670:	486a      	ldr	r0, [pc, #424]	; (800781c <tcp_handle+0x2bc>)
 8007672:	a901      	add	r1, sp, #4
 8007674:	f88d 300c 	strb.w	r3, [sp, #12]
 8007678:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800767c:	63e7      	str	r7, [r4, #60]	; 0x3c
 800767e:	f8c4 a018 	str.w	sl, [r4, #24]
 8007682:	f007 ffef 	bl	800f664 <_tcp_send_package>
 8007686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800768e:	2303      	movs	r3, #3
 8007690:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007694:	e7cd      	b.n	8007632 <tcp_handle+0xd2>
 8007696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007698:	eba3 0c07 	sub.w	ip, r3, r7
 800769c:	f1b8 0f00 	cmp.w	r8, #0
 80076a0:	d10d      	bne.n	80076be <tcp_handle+0x15e>
 80076a2:	f1bc 0f00 	cmp.w	ip, #0
 80076a6:	dc22      	bgt.n	80076ee <tcp_handle+0x18e>
 80076a8:	1afb      	subs	r3, r7, r3
 80076aa:	1a5b      	subs	r3, r3, r1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	da1e      	bge.n	80076ee <tcp_handle+0x18e>
 80076b0:	0743      	lsls	r3, r0, #29
 80076b2:	d530      	bpl.n	8007716 <tcp_handle+0x1b6>
 80076b4:	8821      	ldrh	r1, [r4, #0]
 80076b6:	4859      	ldr	r0, [pc, #356]	; (800781c <tcp_handle+0x2bc>)
 80076b8:	f007 ff8a 	bl	800f5d0 <_init_tcb>
 80076bc:	e7b9      	b.n	8007632 <tcp_handle+0xd2>
 80076be:	f1bc 0f00 	cmp.w	ip, #0
 80076c2:	dc06      	bgt.n	80076d2 <tcp_handle+0x172>
 80076c4:	eba7 0c03 	sub.w	ip, r7, r3
 80076c8:	ebac 0c01 	sub.w	ip, ip, r1
 80076cc:	f1bc 0f00 	cmp.w	ip, #0
 80076d0:	dbee      	blt.n	80076b0 <tcp_handle+0x150>
 80076d2:	eb08 0c07 	add.w	ip, r8, r7
 80076d6:	f103 0e01 	add.w	lr, r3, #1
 80076da:	ebae 0e0c 	sub.w	lr, lr, ip
 80076de:	f1be 0f00 	cmp.w	lr, #0
 80076e2:	dc04      	bgt.n	80076ee <tcp_handle+0x18e>
 80076e4:	43db      	mvns	r3, r3
 80076e6:	1a5b      	subs	r3, r3, r1
 80076e8:	eb13 0f0c 	cmn.w	r3, ip
 80076ec:	d4e0      	bmi.n	80076b0 <tcp_handle+0x150>
 80076ee:	0742      	lsls	r2, r0, #29
 80076f0:	d505      	bpl.n	80076fe <tcp_handle+0x19e>
 80076f2:	8821      	ldrh	r1, [r4, #0]
 80076f4:	4849      	ldr	r0, [pc, #292]	; (800781c <tcp_handle+0x2bc>)
 80076f6:	f007 ff6b 	bl	800f5d0 <_init_tcb>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e7c8      	b.n	8007690 <tcp_handle+0x130>
 80076fe:	6963      	ldr	r3, [r4, #20]
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007704:	9302      	str	r3, [sp, #8]
 8007706:	2310      	movs	r3, #16
 8007708:	4844      	ldr	r0, [pc, #272]	; (800781c <tcp_handle+0x2bc>)
 800770a:	a901      	add	r1, sp, #4
 800770c:	f88d 300c 	strb.w	r3, [sp, #12]
 8007710:	f007 ffa8 	bl	800f664 <_tcp_send_package>
 8007714:	e78d      	b.n	8007632 <tcp_handle+0xd2>
 8007716:	0781      	lsls	r1, r0, #30
 8007718:	d505      	bpl.n	8007726 <tcp_handle+0x1c6>
 800771a:	2a03      	cmp	r2, #3
 800771c:	d0ed      	beq.n	80076fa <tcp_handle+0x19a>
 800771e:	4628      	mov	r0, r5
 8007720:	493e      	ldr	r1, [pc, #248]	; (800781c <tcp_handle+0x2bc>)
 8007722:	f008 f84d 	bl	800f7c0 <_send_reset>
 8007726:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800772a:	06da      	lsls	r2, r3, #27
 800772c:	d581      	bpl.n	8007632 <tcp_handle+0xd2>
 800772e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007732:	3b03      	subs	r3, #3
 8007734:	2b07      	cmp	r3, #7
 8007736:	d818      	bhi.n	800776a <tcp_handle+0x20a>
 8007738:	e8df f003 	tbb	[pc, r3]
 800773c:	76767604 	ldrbtvc	r7, [r6], -r4, lsl #12
 8007740:	a69d7676 			; <UNDEFINED> instruction: 0xa69d7676
 8007744:	6923      	ldr	r3, [r4, #16]
 8007746:	1b9b      	subs	r3, r3, r6
 8007748:	2b00      	cmp	r3, #0
 800774a:	dc0a      	bgt.n	8007762 <tcp_handle+0x202>
 800774c:	6963      	ldr	r3, [r4, #20]
 800774e:	1af3      	subs	r3, r6, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	dc06      	bgt.n	8007762 <tcp_handle+0x202>
 8007754:	2304      	movs	r3, #4
 8007756:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800775a:	f8c4 a018 	str.w	sl, [r4, #24]
 800775e:	6126      	str	r6, [r4, #16]
 8007760:	e796      	b.n	8007690 <tcp_handle+0x130>
 8007762:	4628      	mov	r0, r5
 8007764:	492d      	ldr	r1, [pc, #180]	; (800781c <tcp_handle+0x2bc>)
 8007766:	f008 f82b 	bl	800f7c0 <_send_reset>
 800776a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800776e:	3b04      	subs	r3, #4
 8007770:	2b02      	cmp	r3, #2
 8007772:	d830      	bhi.n	80077d6 <tcp_handle+0x276>
 8007774:	f1b8 0f00 	cmp.w	r8, #0
 8007778:	d02d      	beq.n	80077d6 <tcp_handle+0x276>
 800777a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800777c:	42bb      	cmp	r3, r7
 800777e:	f040 8092 	bne.w	80078a6 <tcp_handle+0x346>
 8007782:	f240 53b6 	movw	r3, #1462	; 0x5b6
 8007786:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8007824 <tcp_handle+0x2c4>
 800778a:	f105 0122 	add.w	r1, r5, #34	; 0x22
 800778e:	f8ba 7000 	ldrh.w	r7, [sl]
 8007792:	4642      	mov	r2, r8
 8007794:	435f      	muls	r7, r3
 8007796:	1d38      	adds	r0, r7, #4
 8007798:	4449      	add	r1, r9
 800779a:	4450      	add	r0, sl
 800779c:	f007 ff32 	bl	800f604 <memcpy.isra.0>
 80077a0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 80077a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077a4:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 80077a8:	8722      	strh	r2, [r4, #56]	; 0x38
 80077aa:	6962      	ldr	r2, [r4, #20]
 80077ac:	4443      	add	r3, r8
 80077ae:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077b2:	6363      	str	r3, [r4, #52]	; 0x34
 80077b4:	2310      	movs	r3, #16
 80077b6:	4457      	add	r7, sl
 80077b8:	4818      	ldr	r0, [pc, #96]	; (800781c <tcp_handle+0x2bc>)
 80077ba:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 80077be:	a901      	add	r1, sp, #4
 80077c0:	f88d 300c 	strb.w	r3, [sp, #12]
 80077c4:	f007 ff4e 	bl	800f664 <_tcp_send_package>
 80077c8:	f8ba 3000 	ldrh.w	r3, [sl]
 80077cc:	3301      	adds	r3, #1
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	f8aa 3000 	strh.w	r3, [sl]
 80077d6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077da:	2b02      	cmp	r3, #2
 80077dc:	f67f af29 	bls.w	8007632 <tcp_handle+0xd2>
 80077e0:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80077e4:	07db      	lsls	r3, r3, #31
 80077e6:	f57f af24 	bpl.w	8007632 <tcp_handle+0xd2>
 80077ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077ec:	6962      	ldr	r2, [r4, #20]
 80077ee:	3301      	adds	r3, #1
 80077f0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077f4:	6363      	str	r3, [r4, #52]	; 0x34
 80077f6:	2310      	movs	r3, #16
 80077f8:	4808      	ldr	r0, [pc, #32]	; (800781c <tcp_handle+0x2bc>)
 80077fa:	a901      	add	r1, sp, #4
 80077fc:	f88d 300c 	strb.w	r3, [sp, #12]
 8007800:	f007 ff30 	bl	800f664 <_tcp_send_package>
 8007804:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007808:	2b05      	cmp	r3, #5
 800780a:	d054      	beq.n	80078b6 <tcp_handle+0x356>
 800780c:	d84e      	bhi.n	80078ac <tcp_handle+0x34c>
 800780e:	3b03      	subs	r3, #3
 8007810:	2b01      	cmp	r3, #1
 8007812:	f63f af0e 	bhi.w	8007632 <tcp_handle+0xd2>
 8007816:	2307      	movs	r3, #7
 8007818:	e73a      	b.n	8007690 <tcp_handle+0x130>
 800781a:	bf00      	nop
 800781c:	20003aa0 	andcs	r3, r0, r0, lsr #21
 8007820:	20003aa8 	andcs	r3, r0, r8, lsr #21
 8007824:	20002f30 	andcs	r2, r0, r0, lsr pc
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	1b99      	subs	r1, r3, r6
 800782c:	d513      	bpl.n	8007856 <tcp_handle+0x2f6>
 800782e:	6962      	ldr	r2, [r4, #20]
 8007830:	1ab2      	subs	r2, r6, r2
 8007832:	2a00      	cmp	r2, #0
 8007834:	dc0f      	bgt.n	8007856 <tcp_handle+0x2f6>
 8007836:	6126      	str	r6, [r4, #16]
 8007838:	6a23      	ldr	r3, [r4, #32]
 800783a:	1bda      	subs	r2, r3, r7
 800783c:	2a00      	cmp	r2, #0
 800783e:	db05      	blt.n	800784c <tcp_handle+0x2ec>
 8007840:	42bb      	cmp	r3, r7
 8007842:	d192      	bne.n	800776a <tcp_handle+0x20a>
 8007844:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007846:	1b9b      	subs	r3, r3, r6
 8007848:	2b00      	cmp	r3, #0
 800784a:	dc8e      	bgt.n	800776a <tcp_handle+0x20a>
 800784c:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007850:	f8c4 a018 	str.w	sl, [r4, #24]
 8007854:	e789      	b.n	800776a <tcp_handle+0x20a>
 8007856:	1af3      	subs	r3, r6, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc06      	bgt.n	800786a <tcp_handle+0x30a>
 800785c:	2900      	cmp	r1, #0
 800785e:	dc84      	bgt.n	800776a <tcp_handle+0x20a>
 8007860:	6963      	ldr	r3, [r4, #20]
 8007862:	1af3      	subs	r3, r6, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	dc80      	bgt.n	800776a <tcp_handle+0x20a>
 8007868:	e7e6      	b.n	8007838 <tcp_handle+0x2d8>
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	1b9a      	subs	r2, r3, r6
 800786e:	2a00      	cmp	r2, #0
 8007870:	f6bf af7b 	bge.w	800776a <tcp_handle+0x20a>
 8007874:	e744      	b.n	8007700 <tcp_handle+0x1a0>
 8007876:	6963      	ldr	r3, [r4, #20]
 8007878:	42b3      	cmp	r3, r6
 800787a:	f47f af76 	bne.w	800776a <tcp_handle+0x20a>
 800787e:	8821      	ldrh	r1, [r4, #0]
 8007880:	480f      	ldr	r0, [pc, #60]	; (80078c0 <tcp_handle+0x360>)
 8007882:	f007 fea5 	bl	800f5d0 <_init_tcb>
 8007886:	e770      	b.n	800776a <tcp_handle+0x20a>
 8007888:	6963      	ldr	r3, [r4, #20]
 800788a:	42b3      	cmp	r3, r6
 800788c:	f47f af6d 	bne.w	800776a <tcp_handle+0x20a>
 8007890:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007892:	480b      	ldr	r0, [pc, #44]	; (80078c0 <tcp_handle+0x360>)
 8007894:	9302      	str	r3, [sp, #8]
 8007896:	2310      	movs	r3, #16
 8007898:	a901      	add	r1, sp, #4
 800789a:	9601      	str	r6, [sp, #4]
 800789c:	f88d 300c 	strb.w	r3, [sp, #12]
 80078a0:	f007 fee0 	bl	800f664 <_tcp_send_package>
 80078a4:	e761      	b.n	800776a <tcp_handle+0x20a>
 80078a6:	6962      	ldr	r2, [r4, #20]
 80078a8:	9201      	str	r2, [sp, #4]
 80078aa:	e72b      	b.n	8007704 <tcp_handle+0x1a4>
 80078ac:	2b06      	cmp	r3, #6
 80078ae:	f47f aec0 	bne.w	8007632 <tcp_handle+0xd2>
 80078b2:	230a      	movs	r3, #10
 80078b4:	e6ec      	b.n	8007690 <tcp_handle+0x130>
 80078b6:	6963      	ldr	r3, [r4, #20]
 80078b8:	42b3      	cmp	r3, r6
 80078ba:	d0fa      	beq.n	80078b2 <tcp_handle+0x352>
 80078bc:	2308      	movs	r3, #8
 80078be:	e6e7      	b.n	8007690 <tcp_handle+0x130>
 80078c0:	20003aa0 	andcs	r3, r0, r0, lsr #21

080078c4 <udp_handle>:
 80078c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078c8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80078ca:	4607      	mov	r7, r0
 80078cc:	ba5b      	rev16	r3, r3
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 80078d4:	2a01      	cmp	r2, #1
 80078d6:	d904      	bls.n	80078e2 <udp_handle+0x1e>
 80078d8:	2b7b      	cmp	r3, #123	; 0x7b
 80078da:	d002      	beq.n	80078e2 <udp_handle+0x1e>
 80078dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e0:	d308      	bcc.n	80078f4 <udp_handle+0x30>
 80078e2:	2400      	movs	r4, #0
 80078e4:	4a1f      	ldr	r2, [pc, #124]	; (8007964 <udp_handle+0xa0>)
 80078e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80078ea:	4299      	cmp	r1, r3
 80078ec:	d005      	beq.n	80078fa <udp_handle+0x36>
 80078ee:	3401      	adds	r4, #1
 80078f0:	2c08      	cmp	r4, #8
 80078f2:	d1f8      	bne.n	80078e6 <udp_handle+0x22>
 80078f4:	b002      	add	sp, #8
 80078f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078fa:	f640 3394 	movw	r3, #2964	; 0xb94
 80078fe:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 8007900:	435c      	muls	r4, r3
 8007902:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 8007906:	ba76      	rev16	r6, r6
 8007908:	3e08      	subs	r6, #8
 800790a:	b2b6      	uxth	r6, r6
 800790c:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8007910:	bf28      	it	cs
 8007912:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 8007916:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8007968 <udp_handle+0xa4>
 800791a:	1d20      	adds	r0, r4, #4
 800791c:	f838 5004 	ldrh.w	r5, [r8, r4]
 8007920:	4632      	mov	r2, r6
 8007922:	435d      	muls	r5, r3
 8007924:	4428      	add	r0, r5
 8007926:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800792a:	4440      	add	r0, r8
 800792c:	f007 fff6 	bl	800f91c <memcpy.isra.0>
 8007930:	2204      	movs	r2, #4
 8007932:	f107 011a 	add.w	r1, r7, #26
 8007936:	eb0d 0002 	add.w	r0, sp, r2
 800793a:	f007 ffef 	bl	800f91c <memcpy.isra.0>
 800793e:	9a01      	ldr	r2, [sp, #4]
 8007940:	192b      	adds	r3, r5, r4
 8007942:	4443      	add	r3, r8
 8007944:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 8007948:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800794a:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 800794e:	ba52      	rev16	r2, r2
 8007950:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8007954:	f838 3004 	ldrh.w	r3, [r8, r4]
 8007958:	3301      	adds	r3, #1
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	f828 3004 	strh.w	r3, [r8, r4]
 8007962:	e7c7      	b.n	80078f4 <udp_handle+0x30>
 8007964:	200040e0 	andcs	r4, r0, r0, ror #1
 8007968:	20004100 	andcs	r4, r0, r0, lsl #2

0800796c <arp_handle>:
 800796c:	8a83      	ldrh	r3, [r0, #20]
 800796e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007972:	d003      	beq.n	800797c <arp_handle+0x10>
 8007974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007978:	d002      	beq.n	8007980 <arp_handle+0x14>
 800797a:	4770      	bx	lr
 800797c:	f009 ba12 	b.w	8010da4 <arp_handle_request>
 8007980:	f009 ba38 	b.w	8010df4 <arp_handle_reply>

08007984 <igmp_handle>:
 8007984:	7b83      	ldrb	r3, [r0, #14]
 8007986:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800798a:	2b45      	cmp	r3, #69	; 0x45
 800798c:	d116      	bne.n	80079bc <igmp_handle+0x38>
 800798e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007992:	2b11      	cmp	r3, #17
 8007994:	d112      	bne.n	80079bc <igmp_handle+0x38>
 8007996:	4b20      	ldr	r3, [pc, #128]	; (8007a18 <igmp_handle+0x94>)
 8007998:	f100 051e 	add.w	r5, r0, #30
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	466a      	mov	r2, sp
 80079a0:	462b      	mov	r3, r5
 80079a2:	f100 0622 	add.w	r6, r0, #34	; 0x22
 80079a6:	42b3      	cmp	r3, r6
 80079a8:	d10b      	bne.n	80079c2 <igmp_handle+0x3e>
 80079aa:	2401      	movs	r4, #1
 80079ac:	2100      	movs	r1, #0
 80079ae:	f04f 0c01 	mov.w	ip, #1
 80079b2:	4b1a      	ldr	r3, [pc, #104]	; (8007a1c <igmp_handle+0x98>)
 80079b4:	4a1a      	ldr	r2, [pc, #104]	; (8007a20 <igmp_handle+0x9c>)
 80079b6:	681f      	ldr	r7, [r3, #0]
 80079b8:	428f      	cmp	r7, r1
 80079ba:	d10a      	bne.n	80079d2 <igmp_handle+0x4e>
 80079bc:	b003      	add	sp, #12
 80079be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079c2:	f813 4b01 	ldrb.w	r4, [r3], #1
 80079c6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80079ca:	428c      	cmp	r4, r1
 80079cc:	d0eb      	beq.n	80079a6 <igmp_handle+0x22>
 80079ce:	2400      	movs	r4, #0
 80079d0:	e7ec      	b.n	80079ac <igmp_handle+0x28>
 80079d2:	6813      	ldr	r3, [r2, #0]
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	b924      	cbnz	r4, 80079e2 <igmp_handle+0x5e>
 80079d8:	462b      	mov	r3, r5
 80079da:	f10d 0e04 	add.w	lr, sp, #4
 80079de:	42b3      	cmp	r3, r6
 80079e0:	d10e      	bne.n	8007a00 <igmp_handle+0x7c>
 80079e2:	f892 e005 	ldrb.w	lr, [r2, #5]
 80079e6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80079ea:	f1be 0f01 	cmp.w	lr, #1
 80079ee:	d110      	bne.n	8007a12 <igmp_handle+0x8e>
 80079f0:	f892 e004 	ldrb.w	lr, [r2, #4]
 80079f4:	459e      	cmp	lr, r3
 80079f6:	d909      	bls.n	8007a0c <igmp_handle+0x88>
 80079f8:	085b      	lsrs	r3, r3, #1
 80079fa:	3301      	adds	r3, #1
 80079fc:	7113      	strb	r3, [r2, #4]
 80079fe:	e005      	b.n	8007a0c <igmp_handle+0x88>
 8007a00:	f813 9b01 	ldrb.w	r9, [r3], #1
 8007a04:	f81e 8b01 	ldrb.w	r8, [lr], #1
 8007a08:	45c1      	cmp	r9, r8
 8007a0a:	d0e8      	beq.n	80079de <igmp_handle+0x5a>
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	3208      	adds	r2, #8
 8007a10:	e7d2      	b.n	80079b8 <igmp_handle+0x34>
 8007a12:	f882 c005 	strb.w	ip, [r2, #5]
 8007a16:	e7ef      	b.n	80079f8 <igmp_handle+0x74>
 8007a18:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a1c:	2000ad90 	mulcs	r0, r0, sp
 8007a20:	2000ac6c 	andcs	sl, r0, ip, ror #24

08007a24 <ip_handle>:
 8007a24:	7b82      	ldrb	r2, [r0, #14]
 8007a26:	7dc3      	ldrb	r3, [r0, #23]
 8007a28:	2a45      	cmp	r2, #69	; 0x45
 8007a2a:	d003      	beq.n	8007a34 <ip_handle+0x10>
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d111      	bne.n	8007a54 <ip_handle+0x30>
 8007a30:	f7ff bfa8 	b.w	8007984 <igmp_handle>
 8007a34:	2b06      	cmp	r3, #6
 8007a36:	d00b      	beq.n	8007a50 <ip_handle+0x2c>
 8007a38:	d804      	bhi.n	8007a44 <ip_handle+0x20>
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d006      	beq.n	8007a4c <ip_handle+0x28>
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d0f6      	beq.n	8007a30 <ip_handle+0xc>
 8007a42:	4770      	bx	lr
 8007a44:	2b11      	cmp	r3, #17
 8007a46:	d105      	bne.n	8007a54 <ip_handle+0x30>
 8007a48:	f7ff bf3c 	b.w	80078c4 <udp_handle>
 8007a4c:	f000 b804 	b.w	8007a58 <icmp_handle>
 8007a50:	f7ff bd86 	b.w	8007560 <tcp_handle>
 8007a54:	4770      	bx	lr
	...

08007a58 <icmp_handle>:
 8007a58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a5a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007a5e:	4604      	mov	r4, r0
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d13e      	bne.n	8007ae2 <icmp_handle+0x8a>
 8007a64:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	d13a      	bne.n	8007ae2 <icmp_handle+0x8a>
 8007a6c:	1d86      	adds	r6, r0, #6
 8007a6e:	4631      	mov	r1, r6
 8007a70:	2206      	movs	r2, #6
 8007a72:	f009 fd57 	bl	8011524 <memcpy.isra.0>
 8007a76:	4630      	mov	r0, r6
 8007a78:	2206      	movs	r2, #6
 8007a7a:	491b      	ldr	r1, [pc, #108]	; (8007ae8 <icmp_handle+0x90>)
 8007a7c:	f009 fd52 	bl	8011524 <memcpy.isra.0>
 8007a80:	8a63      	ldrh	r3, [r4, #18]
 8007a82:	f104 061a 	add.w	r6, r4, #26
 8007a86:	43db      	mvns	r3, r3
 8007a88:	4631      	mov	r1, r6
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	8263      	strh	r3, [r4, #18]
 8007a8e:	f104 001e 	add.w	r0, r4, #30
 8007a92:	f009 fd47 	bl	8011524 <memcpy.isra.0>
 8007a96:	2204      	movs	r2, #4
 8007a98:	4b14      	ldr	r3, [pc, #80]	; (8007aec <icmp_handle+0x94>)
 8007a9a:	eb0d 0102 	add.w	r1, sp, r2
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f104 060e 	add.w	r6, r4, #14
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	f009 fd3c 	bl	8011524 <memcpy.isra.0>
 8007aac:	2114      	movs	r1, #20
 8007aae:	4630      	mov	r0, r6
 8007ab0:	7625      	strb	r5, [r4, #24]
 8007ab2:	7665      	strb	r5, [r4, #25]
 8007ab4:	f009 fd19 	bl	80114ea <net_chksum>
 8007ab8:	8a21      	ldrh	r1, [r4, #16]
 8007aba:	8320      	strh	r0, [r4, #24]
 8007abc:	ba49      	rev16	r1, r1
 8007abe:	b289      	uxth	r1, r1
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007ac6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007aca:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007ace:	f009 fd0c 	bl	80114ea <net_chksum>
 8007ad2:	8a21      	ldrh	r1, [r4, #16]
 8007ad4:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007ad6:	ba49      	rev16	r1, r1
 8007ad8:	b289      	uxth	r1, r1
 8007ada:	4620      	mov	r0, r4
 8007adc:	310e      	adds	r1, #14
 8007ade:	f00c fb85 	bl	80141ec <emac_eth_send>
 8007ae2:	b002      	add	sp, #8
 8007ae4:	bd70      	pop	{r4, r5, r6, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20002f10 	andcs	r2, r0, r0, lsl pc
 8007aec:	20002f04 	andcs	r2, r0, r4, lsl #30

08007af0 <__aeabi_uldivmod>:
 8007af0:	b953      	cbnz	r3, 8007b08 <__aeabi_uldivmod+0x18>
 8007af2:	b94a      	cbnz	r2, 8007b08 <__aeabi_uldivmod+0x18>
 8007af4:	2900      	cmp	r1, #0
 8007af6:	bf08      	it	eq
 8007af8:	2800      	cmpeq	r0, #0
 8007afa:	bf1c      	itt	ne
 8007afc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007b00:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007b04:	f000 b98a 	b.w	8007e1c <__aeabi_idiv0>
 8007b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8007b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007b10:	f000 f81a 	bl	8007b48 <__udivmoddi4>
 8007b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b1c:	b004      	add	sp, #16
 8007b1e:	4770      	bx	lr

08007b20 <__popcountsi2>:
 8007b20:	0843      	lsrs	r3, r0, #1
 8007b22:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8007b26:	1ac0      	subs	r0, r0, r3
 8007b28:	0883      	lsrs	r3, r0, #2
 8007b2a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8007b2e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8007b32:	4418      	add	r0, r3
 8007b34:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8007b38:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8007b3c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8007b40:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8007b44:	0e00      	lsrs	r0, r0, #24
 8007b46:	4770      	bx	lr

08007b48 <__udivmoddi4>:
 8007b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b4c:	9e08      	ldr	r6, [sp, #32]
 8007b4e:	460d      	mov	r5, r1
 8007b50:	4604      	mov	r4, r0
 8007b52:	4688      	mov	r8, r1
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d14d      	bne.n	8007bf4 <__udivmoddi4+0xac>
 8007b58:	428a      	cmp	r2, r1
 8007b5a:	4694      	mov	ip, r2
 8007b5c:	d968      	bls.n	8007c30 <__udivmoddi4+0xe8>
 8007b5e:	fab2 f282 	clz	r2, r2
 8007b62:	b152      	cbz	r2, 8007b7a <__udivmoddi4+0x32>
 8007b64:	fa01 f302 	lsl.w	r3, r1, r2
 8007b68:	f1c2 0120 	rsb	r1, r2, #32
 8007b6c:	fa20 f101 	lsr.w	r1, r0, r1
 8007b70:	fa0c fc02 	lsl.w	ip, ip, r2
 8007b74:	ea41 0803 	orr.w	r8, r1, r3
 8007b78:	4094      	lsls	r4, r2
 8007b7a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8007b7e:	fbb8 f7f1 	udiv	r7, r8, r1
 8007b82:	fa1f fe8c 	uxth.w	lr, ip
 8007b86:	fb01 8817 	mls	r8, r1, r7, r8
 8007b8a:	fb07 f00e 	mul.w	r0, r7, lr
 8007b8e:	0c23      	lsrs	r3, r4, #16
 8007b90:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007b94:	4298      	cmp	r0, r3
 8007b96:	d90a      	bls.n	8007bae <__udivmoddi4+0x66>
 8007b98:	eb1c 0303 	adds.w	r3, ip, r3
 8007b9c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8007ba0:	f080 811e 	bcs.w	8007de0 <__udivmoddi4+0x298>
 8007ba4:	4298      	cmp	r0, r3
 8007ba6:	f240 811b 	bls.w	8007de0 <__udivmoddi4+0x298>
 8007baa:	3f02      	subs	r7, #2
 8007bac:	4463      	add	r3, ip
 8007bae:	1a1b      	subs	r3, r3, r0
 8007bb0:	fbb3 f0f1 	udiv	r0, r3, r1
 8007bb4:	fb01 3310 	mls	r3, r1, r0, r3
 8007bb8:	fb00 fe0e 	mul.w	lr, r0, lr
 8007bbc:	b2a4      	uxth	r4, r4
 8007bbe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007bc2:	45a6      	cmp	lr, r4
 8007bc4:	d90a      	bls.n	8007bdc <__udivmoddi4+0x94>
 8007bc6:	eb1c 0404 	adds.w	r4, ip, r4
 8007bca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007bce:	f080 8109 	bcs.w	8007de4 <__udivmoddi4+0x29c>
 8007bd2:	45a6      	cmp	lr, r4
 8007bd4:	f240 8106 	bls.w	8007de4 <__udivmoddi4+0x29c>
 8007bd8:	4464      	add	r4, ip
 8007bda:	3802      	subs	r0, #2
 8007bdc:	2100      	movs	r1, #0
 8007bde:	eba4 040e 	sub.w	r4, r4, lr
 8007be2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007be6:	b11e      	cbz	r6, 8007bf0 <__udivmoddi4+0xa8>
 8007be8:	2300      	movs	r3, #0
 8007bea:	40d4      	lsrs	r4, r2
 8007bec:	e9c6 4300 	strd	r4, r3, [r6]
 8007bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bf4:	428b      	cmp	r3, r1
 8007bf6:	d908      	bls.n	8007c0a <__udivmoddi4+0xc2>
 8007bf8:	2e00      	cmp	r6, #0
 8007bfa:	f000 80ee 	beq.w	8007dda <__udivmoddi4+0x292>
 8007bfe:	2100      	movs	r1, #0
 8007c00:	e9c6 0500 	strd	r0, r5, [r6]
 8007c04:	4608      	mov	r0, r1
 8007c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c0a:	fab3 f183 	clz	r1, r3
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	d14a      	bne.n	8007ca8 <__udivmoddi4+0x160>
 8007c12:	42ab      	cmp	r3, r5
 8007c14:	d302      	bcc.n	8007c1c <__udivmoddi4+0xd4>
 8007c16:	4282      	cmp	r2, r0
 8007c18:	f200 80fc 	bhi.w	8007e14 <__udivmoddi4+0x2cc>
 8007c1c:	1a84      	subs	r4, r0, r2
 8007c1e:	eb65 0303 	sbc.w	r3, r5, r3
 8007c22:	2001      	movs	r0, #1
 8007c24:	4698      	mov	r8, r3
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	d0e2      	beq.n	8007bf0 <__udivmoddi4+0xa8>
 8007c2a:	e9c6 4800 	strd	r4, r8, [r6]
 8007c2e:	e7df      	b.n	8007bf0 <__udivmoddi4+0xa8>
 8007c30:	b902      	cbnz	r2, 8007c34 <__udivmoddi4+0xec>
 8007c32:	deff      	udf	#255	; 0xff
 8007c34:	fab2 f282 	clz	r2, r2
 8007c38:	2a00      	cmp	r2, #0
 8007c3a:	f040 8091 	bne.w	8007d60 <__udivmoddi4+0x218>
 8007c3e:	eba1 000c 	sub.w	r0, r1, ip
 8007c42:	2101      	movs	r1, #1
 8007c44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007c48:	fa1f fe8c 	uxth.w	lr, ip
 8007c4c:	fbb0 f3f7 	udiv	r3, r0, r7
 8007c50:	fb07 0013 	mls	r0, r7, r3, r0
 8007c54:	0c25      	lsrs	r5, r4, #16
 8007c56:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8007c5a:	fb0e f003 	mul.w	r0, lr, r3
 8007c5e:	42a8      	cmp	r0, r5
 8007c60:	d908      	bls.n	8007c74 <__udivmoddi4+0x12c>
 8007c62:	eb1c 0505 	adds.w	r5, ip, r5
 8007c66:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007c6a:	d202      	bcs.n	8007c72 <__udivmoddi4+0x12a>
 8007c6c:	42a8      	cmp	r0, r5
 8007c6e:	f200 80ce 	bhi.w	8007e0e <__udivmoddi4+0x2c6>
 8007c72:	4643      	mov	r3, r8
 8007c74:	1a2d      	subs	r5, r5, r0
 8007c76:	fbb5 f0f7 	udiv	r0, r5, r7
 8007c7a:	fb07 5510 	mls	r5, r7, r0, r5
 8007c7e:	fb0e fe00 	mul.w	lr, lr, r0
 8007c82:	b2a4      	uxth	r4, r4
 8007c84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007c88:	45a6      	cmp	lr, r4
 8007c8a:	d908      	bls.n	8007c9e <__udivmoddi4+0x156>
 8007c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8007c90:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8007c94:	d202      	bcs.n	8007c9c <__udivmoddi4+0x154>
 8007c96:	45a6      	cmp	lr, r4
 8007c98:	f200 80b6 	bhi.w	8007e08 <__udivmoddi4+0x2c0>
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	eba4 040e 	sub.w	r4, r4, lr
 8007ca2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8007ca6:	e79e      	b.n	8007be6 <__udivmoddi4+0x9e>
 8007ca8:	f1c1 0720 	rsb	r7, r1, #32
 8007cac:	408b      	lsls	r3, r1
 8007cae:	fa22 fc07 	lsr.w	ip, r2, r7
 8007cb2:	ea4c 0c03 	orr.w	ip, ip, r3
 8007cb6:	fa25 fa07 	lsr.w	sl, r5, r7
 8007cba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8007cbe:	fbba f8f9 	udiv	r8, sl, r9
 8007cc2:	fa20 f307 	lsr.w	r3, r0, r7
 8007cc6:	fb09 aa18 	mls	sl, r9, r8, sl
 8007cca:	408d      	lsls	r5, r1
 8007ccc:	fa1f fe8c 	uxth.w	lr, ip
 8007cd0:	431d      	orrs	r5, r3
 8007cd2:	fa00 f301 	lsl.w	r3, r0, r1
 8007cd6:	fb08 f00e 	mul.w	r0, r8, lr
 8007cda:	0c2c      	lsrs	r4, r5, #16
 8007cdc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007ce0:	42a0      	cmp	r0, r4
 8007ce2:	fa02 f201 	lsl.w	r2, r2, r1
 8007ce6:	d90b      	bls.n	8007d00 <__udivmoddi4+0x1b8>
 8007ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8007cec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8007cf0:	f080 8088 	bcs.w	8007e04 <__udivmoddi4+0x2bc>
 8007cf4:	42a0      	cmp	r0, r4
 8007cf6:	f240 8085 	bls.w	8007e04 <__udivmoddi4+0x2bc>
 8007cfa:	f1a8 0802 	sub.w	r8, r8, #2
 8007cfe:	4464      	add	r4, ip
 8007d00:	1a24      	subs	r4, r4, r0
 8007d02:	fbb4 f0f9 	udiv	r0, r4, r9
 8007d06:	fb09 4410 	mls	r4, r9, r0, r4
 8007d0a:	fb00 fe0e 	mul.w	lr, r0, lr
 8007d0e:	b2ad      	uxth	r5, r5
 8007d10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8007d14:	45a6      	cmp	lr, r4
 8007d16:	d908      	bls.n	8007d2a <__udivmoddi4+0x1e2>
 8007d18:	eb1c 0404 	adds.w	r4, ip, r4
 8007d1c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8007d20:	d26c      	bcs.n	8007dfc <__udivmoddi4+0x2b4>
 8007d22:	45a6      	cmp	lr, r4
 8007d24:	d96a      	bls.n	8007dfc <__udivmoddi4+0x2b4>
 8007d26:	3802      	subs	r0, #2
 8007d28:	4464      	add	r4, ip
 8007d2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8007d2e:	fba0 9502 	umull	r9, r5, r0, r2
 8007d32:	eba4 040e 	sub.w	r4, r4, lr
 8007d36:	42ac      	cmp	r4, r5
 8007d38:	46c8      	mov	r8, r9
 8007d3a:	46ae      	mov	lr, r5
 8007d3c:	d356      	bcc.n	8007dec <__udivmoddi4+0x2a4>
 8007d3e:	d053      	beq.n	8007de8 <__udivmoddi4+0x2a0>
 8007d40:	2e00      	cmp	r6, #0
 8007d42:	d069      	beq.n	8007e18 <__udivmoddi4+0x2d0>
 8007d44:	ebb3 0208 	subs.w	r2, r3, r8
 8007d48:	eb64 040e 	sbc.w	r4, r4, lr
 8007d4c:	fa22 f301 	lsr.w	r3, r2, r1
 8007d50:	fa04 f707 	lsl.w	r7, r4, r7
 8007d54:	431f      	orrs	r7, r3
 8007d56:	40cc      	lsrs	r4, r1
 8007d58:	e9c6 7400 	strd	r7, r4, [r6]
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	e747      	b.n	8007bf0 <__udivmoddi4+0xa8>
 8007d60:	fa0c fc02 	lsl.w	ip, ip, r2
 8007d64:	f1c2 0120 	rsb	r1, r2, #32
 8007d68:	fa25 f301 	lsr.w	r3, r5, r1
 8007d6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007d70:	fa20 f101 	lsr.w	r1, r0, r1
 8007d74:	4095      	lsls	r5, r2
 8007d76:	430d      	orrs	r5, r1
 8007d78:	fbb3 f1f7 	udiv	r1, r3, r7
 8007d7c:	fb07 3311 	mls	r3, r7, r1, r3
 8007d80:	fa1f fe8c 	uxth.w	lr, ip
 8007d84:	0c28      	lsrs	r0, r5, #16
 8007d86:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8007d8a:	fb01 f30e 	mul.w	r3, r1, lr
 8007d8e:	4283      	cmp	r3, r0
 8007d90:	fa04 f402 	lsl.w	r4, r4, r2
 8007d94:	d908      	bls.n	8007da8 <__udivmoddi4+0x260>
 8007d96:	eb1c 0000 	adds.w	r0, ip, r0
 8007d9a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8007d9e:	d22f      	bcs.n	8007e00 <__udivmoddi4+0x2b8>
 8007da0:	4283      	cmp	r3, r0
 8007da2:	d92d      	bls.n	8007e00 <__udivmoddi4+0x2b8>
 8007da4:	3902      	subs	r1, #2
 8007da6:	4460      	add	r0, ip
 8007da8:	1ac0      	subs	r0, r0, r3
 8007daa:	fbb0 f3f7 	udiv	r3, r0, r7
 8007dae:	fb07 0013 	mls	r0, r7, r3, r0
 8007db2:	b2ad      	uxth	r5, r5
 8007db4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8007db8:	fb03 f00e 	mul.w	r0, r3, lr
 8007dbc:	42a8      	cmp	r0, r5
 8007dbe:	d908      	bls.n	8007dd2 <__udivmoddi4+0x28a>
 8007dc0:	eb1c 0505 	adds.w	r5, ip, r5
 8007dc4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007dc8:	d216      	bcs.n	8007df8 <__udivmoddi4+0x2b0>
 8007dca:	42a8      	cmp	r0, r5
 8007dcc:	d914      	bls.n	8007df8 <__udivmoddi4+0x2b0>
 8007dce:	3b02      	subs	r3, #2
 8007dd0:	4465      	add	r5, ip
 8007dd2:	1a28      	subs	r0, r5, r0
 8007dd4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8007dd8:	e738      	b.n	8007c4c <__udivmoddi4+0x104>
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4630      	mov	r0, r6
 8007dde:	e707      	b.n	8007bf0 <__udivmoddi4+0xa8>
 8007de0:	462f      	mov	r7, r5
 8007de2:	e6e4      	b.n	8007bae <__udivmoddi4+0x66>
 8007de4:	4618      	mov	r0, r3
 8007de6:	e6f9      	b.n	8007bdc <__udivmoddi4+0x94>
 8007de8:	454b      	cmp	r3, r9
 8007dea:	d2a9      	bcs.n	8007d40 <__udivmoddi4+0x1f8>
 8007dec:	ebb9 0802 	subs.w	r8, r9, r2
 8007df0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8007df4:	3801      	subs	r0, #1
 8007df6:	e7a3      	b.n	8007d40 <__udivmoddi4+0x1f8>
 8007df8:	4643      	mov	r3, r8
 8007dfa:	e7ea      	b.n	8007dd2 <__udivmoddi4+0x28a>
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	e794      	b.n	8007d2a <__udivmoddi4+0x1e2>
 8007e00:	4641      	mov	r1, r8
 8007e02:	e7d1      	b.n	8007da8 <__udivmoddi4+0x260>
 8007e04:	46d0      	mov	r8, sl
 8007e06:	e77b      	b.n	8007d00 <__udivmoddi4+0x1b8>
 8007e08:	4464      	add	r4, ip
 8007e0a:	3802      	subs	r0, #2
 8007e0c:	e747      	b.n	8007c9e <__udivmoddi4+0x156>
 8007e0e:	3b02      	subs	r3, #2
 8007e10:	4465      	add	r5, ip
 8007e12:	e72f      	b.n	8007c74 <__udivmoddi4+0x12c>
 8007e14:	4608      	mov	r0, r1
 8007e16:	e706      	b.n	8007c26 <__udivmoddi4+0xde>
 8007e18:	4631      	mov	r1, r6
 8007e1a:	e6e9      	b.n	8007bf0 <__udivmoddi4+0xa8>

08007e1c <__aeabi_idiv0>:
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop

08007e20 <Reset_Handler>:
 8007e20:	480c      	ldr	r0, [pc, #48]	; (8007e54 <Zerobss+0x10>)
 8007e22:	4685      	mov	sp, r0
 8007e24:	2100      	movs	r1, #0
 8007e26:	e003      	b.n	8007e30 <DataInit>

08007e28 <CopyData>:
 8007e28:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <Zerobss+0x14>)
 8007e2a:	585b      	ldr	r3, [r3, r1]
 8007e2c:	5043      	str	r3, [r0, r1]
 8007e2e:	3104      	adds	r1, #4

08007e30 <DataInit>:
 8007e30:	480a      	ldr	r0, [pc, #40]	; (8007e5c <Zerobss+0x18>)
 8007e32:	4b0b      	ldr	r3, [pc, #44]	; (8007e60 <Zerobss+0x1c>)
 8007e34:	1842      	adds	r2, r0, r1
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d3f6      	bcc.n	8007e28 <CopyData>
 8007e3a:	4a0a      	ldr	r2, [pc, #40]	; (8007e64 <Zerobss+0x20>)
 8007e3c:	e002      	b.n	8007e44 <Zerobss>

08007e3e <FillZerobss>:
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f842 3b04 	str.w	r3, [r2], #4

08007e44 <Zerobss>:
 8007e44:	4b08      	ldr	r3, [pc, #32]	; (8007e68 <Zerobss+0x24>)
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d3f9      	bcc.n	8007e3e <FillZerobss>
 8007e4a:	f00b fb9b 	bl	8013584 <SystemInit>
 8007e4e:	f000 f963 	bl	8008118 <main>
 8007e52:	4770      	bx	lr
 8007e54:	20018000 	andcs	r8, r1, r0
 8007e58:	08017540 	stmdaeq	r1, {r6, r8, sl, ip, sp, lr}
 8007e5c:	20000000 	andcs	r0, r0, r0
 8007e60:	200000f8 	strdcs	r0, [r0], -r8
 8007e64:	200000f8 	strdcs	r0, [r0], -r8
 8007e68:	2000df84 	andcs	sp, r0, r4, lsl #31

08007e6c <ADC0_1_IRQHandler>:
 8007e6c:	e7fe      	b.n	8007e6c <ADC0_1_IRQHandler>

08007e6e <memcmp>:
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	3901      	subs	r1, #1
 8007e72:	4402      	add	r2, r0
 8007e74:	4290      	cmp	r0, r2
 8007e76:	d008      	beq.n	8007e8a <memcmp+0x1c>
 8007e78:	7803      	ldrb	r3, [r0, #0]
 8007e7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e7e:	42a3      	cmp	r3, r4
 8007e80:	d001      	beq.n	8007e86 <memcmp+0x18>
 8007e82:	1b18      	subs	r0, r3, r4
 8007e84:	bd10      	pop	{r4, pc}
 8007e86:	3001      	adds	r0, #1
 8007e88:	e7f4      	b.n	8007e74 <memcmp+0x6>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e7fa      	b.n	8007e84 <memcmp+0x16>

08007e8e <DisplayHandler::~DisplayHandler()>:
 8007e8e:	4770      	bx	lr

08007e90 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8007e90:	4770      	bx	lr

08007e92 <DisplayUdfHandler::ShowLongName(char const*)>:
 8007e92:	4770      	bx	lr

08007e94 <ArtNetReboot::~ArtNetReboot()>:
 8007e94:	4770      	bx	lr

08007e96 <dmxconfigudp::atoi(char const*, unsigned char)>:
 8007e96:	b530      	push	{r4, r5, lr}
 8007e98:	1e42      	subs	r2, r0, #1
 8007e9a:	240a      	movs	r4, #10
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007ea2:	3b30      	subs	r3, #48	; 0x30
 8007ea4:	b2dd      	uxtb	r5, r3
 8007ea6:	2d09      	cmp	r5, #9
 8007ea8:	d805      	bhi.n	8007eb6 <dmxconfigudp::atoi(char const*, unsigned char)+0x20>
 8007eaa:	3901      	subs	r1, #1
 8007eac:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8007eb0:	fb04 3000 	mla	r0, r4, r0, r3
 8007eb4:	d1f3      	bne.n	8007e9e <dmxconfigudp::atoi(char const*, unsigned char)+0x8>
 8007eb6:	bd30      	pop	{r4, r5, pc}

08007eb8 <ArtNetReboot::Run()>:
 8007eb8:	b510      	push	{r4, lr}
 8007eba:	4c07      	ldr	r4, [pc, #28]	; (8007ed8 <ArtNetReboot::Run()+0x20>)
 8007ebc:	6820      	ldr	r0, [r4, #0]
 8007ebe:	f000 fdd7 	bl	8008a70 <ArtNetNode::Stop()>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	6898      	ldr	r0, [r3, #8]
 8007ec6:	b128      	cbz	r0, 8007ed4 <ArtNetReboot::Run()+0x1c>
 8007ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ecc:	6803      	ldr	r3, [r0, #0]
 8007ece:	2101      	movs	r1, #1
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	4718      	bx	r3
 8007ed4:	bd10      	pop	{r4, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20001910 	andcs	r1, r0, r0, lsl r9

08007edc <ArtNetReboot::~ArtNetReboot()>:
 8007edc:	b510      	push	{r4, lr}
 8007ede:	4604      	mov	r4, r0
 8007ee0:	f00a feac 	bl	8012c3c <operator delete(void*)>
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	bd10      	pop	{r4, pc}

08007ee8 <DisplayHandler::~DisplayHandler()>:
 8007ee8:	b510      	push	{r4, lr}
 8007eea:	4604      	mov	r4, r0
 8007eec:	f00a fea6 	bl	8012c3c <operator delete(void*)>
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	bd10      	pop	{r4, pc}

08007ef4 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8007ef4:	b510      	push	{r4, lr}
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	f00a fea0 	bl	8012c3c <operator delete(void*)>
 8007efc:	4620      	mov	r0, r4
 8007efe:	bd10      	pop	{r4, pc}

08007f00 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 8007f00:	4b02      	ldr	r3, [pc, #8]	; (8007f0c <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 8007f02:	6819      	ldr	r1, [r3, #0]
 8007f04:	4b02      	ldr	r3, [pc, #8]	; (8007f10 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 8007f06:	6818      	ldr	r0, [r3, #0]
 8007f08:	f009 beac 	b.w	8011c64 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007f0c:	20001910 	andcs	r1, r0, r0, lsl r9
 8007f10:	2000adfc 	strdcs	sl, [r0], -ip

08007f14 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 8007f14:	4b02      	ldr	r3, [pc, #8]	; (8007f20 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 8007f16:	6819      	ldr	r1, [r3, #0]
 8007f18:	4b02      	ldr	r3, [pc, #8]	; (8007f24 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 8007f1a:	6818      	ldr	r0, [r3, #0]
 8007f1c:	f009 bea2 	b.w	8011c64 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007f20:	20001910 	andcs	r1, r0, r0, lsl r9
 8007f24:	2000adfc 	strdcs	sl, [r0], -ip

08007f28 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 8007f28:	4b02      	ldr	r3, [pc, #8]	; (8007f34 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 8007f2a:	6819      	ldr	r1, [r3, #0]
 8007f2c:	4b02      	ldr	r3, [pc, #8]	; (8007f38 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	f009 be98 	b.w	8011c64 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007f34:	20001910 	andcs	r1, r0, r0, lsl r9
 8007f38:	2000adfc 	strdcs	sl, [r0], -ip

08007f3c <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 8007f3c:	4b02      	ldr	r3, [pc, #8]	; (8007f48 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 8007f3e:	6819      	ldr	r1, [r3, #0]
 8007f40:	4b02      	ldr	r3, [pc, #8]	; (8007f4c <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 8007f42:	6818      	ldr	r0, [r3, #0]
 8007f44:	f009 be8e 	b.w	8011c64 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007f48:	20001910 	andcs	r1, r0, r0, lsl r9
 8007f4c:	2000adfc 	strdcs	sl, [r0], -ip

08007f50 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 8007f50:	4b02      	ldr	r3, [pc, #8]	; (8007f5c <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 8007f52:	6819      	ldr	r1, [r3, #0]
 8007f54:	4b02      	ldr	r3, [pc, #8]	; (8007f60 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	f009 be84 	b.w	8011c64 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007f5c:	20001910 	andcs	r1, r0, r0, lsl r9
 8007f60:	2000adfc 	strdcs	sl, [r0], -ip

08007f64 <DisplayUdfHandler::ShowShortName(char const*)>:
 8007f64:	4b02      	ldr	r3, [pc, #8]	; (8007f70 <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 8007f66:	6819      	ldr	r1, [r3, #0]
 8007f68:	4b02      	ldr	r3, [pc, #8]	; (8007f74 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	f009 be57 	b.w	8011c1e <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8007f70:	20001910 	andcs	r1, r0, r0, lsl r9
 8007f74:	2000adfc 	strdcs	sl, [r0], -ip

08007f78 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8007f78:	b110      	cbz	r0, 8007f80 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 8007f7a:	6803      	ldr	r3, [r0, #0]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	4718      	bx	r3
 8007f80:	4770      	bx	lr

08007f82 <Display::PutChar(int) [clone .isra.0]>:
 8007f82:	b110      	cbz	r0, 8007f8a <Display::PutChar(int) [clone .isra.0]+0x8>
 8007f84:	6803      	ldr	r3, [r0, #0]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	4718      	bx	r3
 8007f8a:	4770      	bx	lr

08007f8c <DisplayHandler::Print(unsigned int)>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	7903      	ldrb	r3, [r0, #4]
 8007f90:	b1f3      	cbz	r3, 8007fd0 <DisplayHandler::Print(unsigned int)+0x44>
 8007f92:	2904      	cmp	r1, #4
 8007f94:	bf98      	it	ls
 8007f96:	4b0f      	ldrls	r3, [pc, #60]	; (8007fd4 <DisplayHandler::Print(unsigned int)+0x48>)
 8007f98:	4d0f      	ldr	r5, [pc, #60]	; (8007fd8 <DisplayHandler::Print(unsigned int)+0x4c>)
 8007f9a:	bf98      	it	ls
 8007f9c:	5c5c      	ldrbls	r4, [r3, r1]
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	bf88      	it	hi
 8007fa2:	2455      	movhi	r4, #85	; 0x55
 8007fa4:	6998      	ldr	r0, [r3, #24]
 8007fa6:	b178      	cbz	r0, 8007fc8 <DisplayHandler::Print(unsigned int)+0x3c>
 8007fa8:	7901      	ldrb	r1, [r0, #4]
 8007faa:	3901      	subs	r1, #1
 8007fac:	b2c9      	uxtb	r1, r1
 8007fae:	b168      	cbz	r0, 8007fcc <DisplayHandler::Print(unsigned int)+0x40>
 8007fb0:	7942      	ldrb	r2, [r0, #5]
 8007fb2:	3a01      	subs	r2, #1
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	f7ff ffdf 	bl	8007f78 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8007fba:	682b      	ldr	r3, [r5, #0]
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	6998      	ldr	r0, [r3, #24]
 8007fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fc4:	f7ff bfdd 	b.w	8007f82 <Display::PutChar(int) [clone .isra.0]>
 8007fc8:	4601      	mov	r1, r0
 8007fca:	e7ee      	b.n	8007faa <DisplayHandler::Print(unsigned int)+0x1e>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	e7f0      	b.n	8007fb2 <DisplayHandler::Print(unsigned int)+0x26>
 8007fd0:	bd38      	pop	{r3, r4, r5, pc}
 8007fd2:	bf00      	nop
 8007fd4:	08015334 	stmdaeq	r1, {r2, r4, r5, r8, r9, ip, lr}
 8007fd8:	2000ae04 	andcs	sl, r0, r4, lsl #28

08007fdc <Display::SetSleep(bool)>:
 8007fdc:	b538      	push	{r3, r4, r5, lr}
 8007fde:	4604      	mov	r4, r0
 8007fe0:	6980      	ldr	r0, [r0, #24]
 8007fe2:	460d      	mov	r5, r1
 8007fe4:	b138      	cbz	r0, 8007ff6 <Display::SetSleep(bool)+0x1a>
 8007fe6:	6803      	ldr	r3, [r0, #0]
 8007fe8:	7421      	strb	r1, [r4, #16]
 8007fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fec:	4798      	blx	r3
 8007fee:	b915      	cbnz	r5, 8007ff6 <Display::SetSleep(bool)+0x1a>
 8007ff0:	4b01      	ldr	r3, [pc, #4]	; (8007ff8 <Display::SetSleep(bool)+0x1c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6063      	str	r3, [r4, #4]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	2000af0c 	andcs	sl, r0, ip, lsl #30

08007ffc <Display::TextStatus(char const*)>:
 8007ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008000:	4604      	mov	r4, r0
 8008002:	6980      	ldr	r0, [r0, #24]
 8008004:	460d      	mov	r5, r1
 8008006:	b360      	cbz	r0, 8008062 <Display::TextStatus(char const*)+0x66>
 8008008:	7947      	ldrb	r7, [r0, #5]
 800800a:	2100      	movs	r1, #0
 800800c:	1e7e      	subs	r6, r7, #1
 800800e:	b2f6      	uxtb	r6, r6
 8008010:	4632      	mov	r2, r6
 8008012:	f890 9004 	ldrb.w	r9, [r0, #4]
 8008016:	f04f 0800 	mov.w	r8, #0
 800801a:	f7ff ffad 	bl	8007f78 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800801e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008022:	45c1      	cmp	r9, r8
 8008024:	69a0      	ldr	r0, [r4, #24]
 8008026:	d905      	bls.n	8008034 <Display::TextStatus(char const*)+0x38>
 8008028:	2120      	movs	r1, #32
 800802a:	f7ff ffaa 	bl	8007f82 <Display::PutChar(int) [clone .isra.0]>
 800802e:	f108 0801 	add.w	r8, r8, #1
 8008032:	e7f6      	b.n	8008022 <Display::TextStatus(char const*)+0x26>
 8008034:	4632      	mov	r2, r6
 8008036:	2100      	movs	r1, #0
 8008038:	f7ff ff9e 	bl	8007f78 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800803c:	69a0      	ldr	r0, [r4, #24]
 800803e:	b180      	cbz	r0, 8008062 <Display::TextStatus(char const*)+0x66>
 8008040:	2300      	movs	r3, #0
 8008042:	7901      	ldrb	r1, [r0, #4]
 8008044:	5cea      	ldrb	r2, [r5, r3]
 8008046:	b11a      	cbz	r2, 8008050 <Display::TextStatus(char const*)+0x54>
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	4299      	cmp	r1, r3
 800804c:	4613      	mov	r3, r2
 800804e:	dcf9      	bgt.n	8008044 <Display::TextStatus(char const*)+0x48>
 8008050:	6802      	ldr	r2, [r0, #0]
 8008052:	4639      	mov	r1, r7
 8008054:	69d4      	ldr	r4, [r2, #28]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	462a      	mov	r2, r5
 800805a:	46a4      	mov	ip, r4
 800805c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008060:	4760      	bx	ip
 8008062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008066 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8008066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008068:	4605      	mov	r5, r0
 800806a:	461e      	mov	r6, r3
 800806c:	460f      	mov	r7, r1
 800806e:	4614      	mov	r4, r2
 8008070:	f7ff ffc4 	bl	8007ffc <Display::TextStatus(char const*)>
 8008074:	7c6b      	ldrb	r3, [r5, #17]
 8008076:	b19b      	cbz	r3, 80080a0 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 8008078:	43e2      	mvns	r2, r4
 800807a:	2312      	movs	r3, #18
 800807c:	7a28      	ldrb	r0, [r5, #8]
 800807e:	f88d 3004 	strb.w	r3, [sp, #4]
 8008082:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008086:	f88d 3005 	strb.w	r3, [sp, #5]
 800808a:	f88d 2006 	strb.w	r2, [sp, #6]
 800808e:	f00c f945 	bl	801431c <gd32_i2c_set_address(unsigned char)>
 8008092:	68e8      	ldr	r0, [r5, #12]
 8008094:	f00c f93a 	bl	801430c <gd32_i2c_set_baudrate(unsigned int)>
 8008098:	2103      	movs	r1, #3
 800809a:	a801      	add	r0, sp, #4
 800809c:	f00c f944 	bl	8014328 <gd32_i2c_write(char const*, unsigned int)>
 80080a0:	1c73      	adds	r3, r6, #1
 80080a2:	d006      	beq.n	80080b2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 80080a4:	4639      	mov	r1, r7
 80080a6:	4630      	mov	r0, r6
 80080a8:	b003      	add	sp, #12
 80080aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80080ae:	f00a bc61 	b.w	8012974 <console_status>
 80080b2:	b003      	add	sp, #12
 80080b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080b6 <RDMDevice::Init()>:
 80080b6:	b538      	push	{r3, r4, r5, lr}
 80080b8:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
 80080bc:	2301      	movs	r3, #1
 80080be:	2a20      	cmp	r2, #32
 80080c0:	bf28      	it	cs
 80080c2:	2220      	movcs	r2, #32
 80080c4:	4604      	mov	r4, r0
 80080c6:	4611      	mov	r1, r2
 80080c8:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
 80080cc:	f100 050a 	add.w	r5, r0, #10
 80080d0:	f100 0353 	add.w	r3, r0, #83	; 0x53
 80080d4:	3901      	subs	r1, #1
 80080d6:	d304      	bcc.n	80080e2 <RDMDevice::Init()+0x2c>
 80080d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80080dc:	f803 0c4a 	strb.w	r0, [r3, #-74]
 80080e0:	e7f8      	b.n	80080d4 <RDMDevice::Init()+0x1e>
 80080e2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80080e4:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
 80080e8:	b118      	cbz	r0, 80080f2 <RDMDevice::Init()+0x3c>
 80080ea:	6803      	ldr	r3, [r0, #0]
 80080ec:	4629      	mov	r1, r5
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	4798      	blx	r3
 80080f2:	4629      	mov	r1, r5
 80080f4:	f06f 0509 	mvn.w	r5, #9
 80080f8:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
 80080fc:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8008100:	1b2d      	subs	r5, r5, r4
 8008102:	186a      	adds	r2, r5, r1
 8008104:	4290      	cmp	r0, r2
 8008106:	d904      	bls.n	8008112 <RDMDevice::Init()+0x5c>
 8008108:	f811 2b01 	ldrb.w	r2, [r1], #1
 800810c:	4413      	add	r3, r2
 800810e:	b29b      	uxth	r3, r3
 8008110:	e7f7      	b.n	8008102 <RDMDevice::Init()+0x4c>
 8008112:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
 8008116:	bd38      	pop	{r3, r4, r5, pc}

08008118 <main>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	2601      	movs	r6, #1
 800811e:	f5ad 5db4 	sub.w	sp, sp, #5760	; 0x1680
 8008122:	b083      	sub	sp, #12
 8008124:	af12      	add	r7, sp, #72	; 0x48
 8008126:	f1a7 000c 	sub.w	r0, r7, #12
 800812a:	f00a fcd7 	bl	8012adc <Hardware::Hardware()>
 800812e:	a872      	add	r0, sp, #456	; 0x1c8
 8008130:	f008 f974 	bl	801041c <Network::Network()>
 8008134:	a819      	add	r0, sp, #100	; 0x64
 8008136:	f00a fc7b 	bl	8012a30 <LedBlink::LedBlink()>
 800813a:	a839      	add	r0, sp, #228	; 0xe4
 800813c:	f009 fa4a 	bl	80115d4 <DisplayUdf::DisplayUdf()>
 8008140:	ad0a      	add	r5, sp, #40	; 0x28
 8008142:	4aba      	ldr	r2, [pc, #744]	; (800842c <main+0x314>)
 8008144:	4bba      	ldr	r3, [pc, #744]	; (8008430 <main+0x318>)
 8008146:	49bb      	ldr	r1, [pc, #748]	; (8008434 <main+0x31c>)
 8008148:	a804      	add	r0, sp, #16
 800814a:	f00a fc2b 	bl	80129a4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 800814e:	f1a5 0014 	sub.w	r0, r5, #20
 8008152:	f007 f827 	bl	800f1a4 <FlashRom::FlashRom()>
 8008156:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8008438 <main+0x320>
 800815a:	a806      	add	r0, sp, #24
 800815c:	f006 fc68 	bl	800ea30 <SpiFlashStore::SpiFlashStore()>
 8008160:	49b6      	ldr	r1, [pc, #728]	; (800843c <main+0x324>)
 8008162:	a804      	add	r0, sp, #16
 8008164:	f00a fc56 	bl	8012a14 <FirmwareVersion::Print(char const*)>
 8008168:	2004      	movs	r0, #4
 800816a:	f8c9 6010 	str.w	r6, [r9, #16]
 800816e:	f00a fd69 	bl	8012c44 <operator new(unsigned int)>
 8008172:	4bb3      	ldr	r3, [pc, #716]	; (8008440 <main+0x328>)
 8008174:	2400      	movs	r4, #0
 8008176:	6003      	str	r3, [r0, #0]
 8008178:	900f      	str	r0, [sp, #60]	; 0x3c
 800817a:	2008      	movs	r0, #8
 800817c:	ab0f      	add	r3, sp, #60	; 0x3c
 800817e:	f00a fd61 	bl	8012c44 <operator new(unsigned int)>
 8008182:	4bb0      	ldr	r3, [pc, #704]	; (8008444 <main+0x32c>)
 8008184:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008188:	6003      	str	r3, [r0, #0]
 800818a:	4baf      	ldr	r3, [pc, #700]	; (8008448 <main+0x330>)
 800818c:	49af      	ldr	r1, [pc, #700]	; (800844c <main+0x334>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3b00      	subs	r3, #0
 8008192:	bf18      	it	ne
 8008194:	2301      	movne	r3, #1
 8008196:	7103      	strb	r3, [r0, #4]
 8008198:	901b      	str	r0, [sp, #108]	; 0x6c
 800819a:	ab19      	add	r3, sp, #100	; 0x64
 800819c:	a839      	add	r0, sp, #228	; 0xe4
 800819e:	2303      	movs	r3, #3
 80081a0:	f7ff ff61 	bl	8008066 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80081a4:	a811      	add	r0, sp, #68	; 0x44
 80081a6:	f006 ff5f 	bl	800f068 <StoreNetwork::StoreNetwork()>
 80081aa:	a911      	add	r1, sp, #68	; 0x44
 80081ac:	a872      	add	r0, sp, #456	; 0x1c8
 80081ae:	979f      	str	r7, [sp, #636]	; 0x27c
 80081b0:	f008 f98c 	bl	80104cc <Network::Init(NetworkParamsStore*)>
 80081b4:	a872      	add	r0, sp, #456	; 0x1c8
 80081b6:	f008 fb5f 	bl	8010878 <Network::Print()>
 80081ba:	a807      	add	r0, sp, #28
 80081bc:	f007 fd68 	bl	800fc90 <MDNS::MDNS()>
 80081c0:	a807      	add	r0, sp, #28
 80081c2:	f007 fe29 	bl	800fe18 <MDNS::Start()>
 80081c6:	f642 1305 	movw	r3, #10501	; 0x2905
 80081ca:	4621      	mov	r1, r4
 80081cc:	4aa0      	ldr	r2, [pc, #640]	; (8008450 <main+0x338>)
 80081ce:	e9cd 4400 	strd	r4, r4, [sp]
 80081d2:	a807      	add	r0, sp, #28
 80081d4:	f007 ff8c 	bl	80100f0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 80081d8:	4b9e      	ldr	r3, [pc, #632]	; (8008454 <main+0x33c>)
 80081da:	4621      	mov	r1, r4
 80081dc:	4a9e      	ldr	r2, [pc, #632]	; (8008458 <main+0x340>)
 80081de:	e9cd 6300 	strd	r6, r3, [sp]
 80081e2:	a807      	add	r0, sp, #28
 80081e4:	2350      	movs	r3, #80	; 0x50
 80081e6:	f007 ff83 	bl	80100f0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 80081ea:	a807      	add	r0, sp, #28
 80081ec:	f008 f8c6 	bl	801037c <MDNS::Print()>
 80081f0:	2303      	movs	r3, #3
 80081f2:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 80081f6:	4999      	ldr	r1, [pc, #612]	; (800845c <main+0x344>)
 80081f8:	a839      	add	r0, sp, #228	; 0xe4
 80081fa:	f7ff ff34 	bl	8008066 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80081fe:	a813      	add	r0, sp, #76	; 0x4c
 8008200:	f006 fe1a 	bl	800ee38 <StoreArtNet::StoreArtNet()>
 8008204:	a913      	add	r1, sp, #76	; 0x4c
 8008206:	a84f      	add	r0, sp, #316	; 0x13c
 8008208:	f002 f946 	bl	800a498 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800820c:	4631      	mov	r1, r6
 800820e:	f50d 6008 	add.w	r0, sp, #2176	; 0x880
 8008212:	f000 fb61 	bl	80088d8 <ArtNet4Node::ArtNet4Node(unsigned char)>
 8008216:	a84f      	add	r0, sp, #316	; 0x13c
 8008218:	f002 f962 	bl	800a4e0 <ArtNetParams::Load()>
 800821c:	b138      	cbz	r0, 800822e <main+0x116>
 800821e:	a84f      	add	r0, sp, #316	; 0x13c
 8008220:	f60d 0184 	addw	r1, sp, #2180	; 0x884
 8008224:	f002 fd13 	bl	800ac4e <ArtNetParams::Set(ArtNetNode*)>
 8008228:	a84f      	add	r0, sp, #316	; 0x13c
 800822a:	f002 fd92 	bl	800ad52 <ArtNetParams::Dump()>
 800822e:	4a8c      	ldr	r2, [pc, #560]	; (8008460 <main+0x348>)
 8008230:	ab08      	add	r3, sp, #32
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	f1a5 0308 	sub.w	r3, r5, #8
 8008238:	f8cd 38a8 	str.w	r3, [sp, #2216]	; 0x8a8
 800823c:	ab14      	add	r3, sp, #80	; 0x50
 800823e:	f8cd 38a4 	str.w	r3, [sp, #2212]	; 0x8a4
 8008242:	f89d 21b6 	ldrb.w	r2, [sp, #438]	; 0x1b6
 8008246:	ab4f      	add	r3, sp, #316	; 0x13c
 8008248:	f002 0201 	and.w	r2, r2, #1
 800824c:	2100      	movs	r1, #0
 800824e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8008252:	f60d 0084 	addw	r0, sp, #2180	; 0x884
 8008256:	f000 fedc 	bl	8009012 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800825a:	a809      	add	r0, sp, #36	; 0x24
 800825c:	f006 fe58 	bl	800ef10 <StoreDmxSend::StoreDmxSend()>
 8008260:	ab15      	add	r3, sp, #84	; 0x54
 8008262:	4618      	mov	r0, r3
 8008264:	a909      	add	r1, sp, #36	; 0x24
 8008266:	9303      	str	r3, [sp, #12]
 8008268:	f004 fa72 	bl	800c750 <DmxParams::DmxParams(DmxParamsStore*)>
 800826c:	a81f      	add	r0, sp, #124	; 0x7c
 800826e:	f004 feaf 	bl	800cfd0 <Dmx::Dmx()>
 8008272:	9803      	ldr	r0, [sp, #12]
 8008274:	f004 fa78 	bl	800c768 <DmxParams::Load()>
 8008278:	b130      	cbz	r0, 8008288 <main+0x170>
 800827a:	9803      	ldr	r0, [sp, #12]
 800827c:	f004 fbc0 	bl	800ca00 <DmxParams::Dump()>
 8008280:	9803      	ldr	r0, [sp, #12]
 8008282:	a91f      	add	r1, sp, #124	; 0x7c
 8008284:	f004 fb92 	bl	800c9ac <DmxParams::Set(Dmx*)>
 8008288:	4b76      	ldr	r3, [pc, #472]	; (8008464 <main+0x34c>)
 800828a:	4628      	mov	r0, r5
 800828c:	602b      	str	r3, [r5, #0]
 800828e:	f004 fa05 	bl	800c69c <DmxSend::Print()>
 8008292:	f89d 6f62 	ldrb.w	r6, [sp, #3938]	; 0xf62
 8008296:	b16e      	cbz	r6, 80082b4 <main+0x19c>
 8008298:	2001      	movs	r0, #1
 800829a:	f8cd 588c 	str.w	r5, [sp, #2188]	; 0x88c
 800829e:	f00a fcd1 	bl	8012c44 <operator new(unsigned int)>
 80082a2:	4b71      	ldr	r3, [pc, #452]	; (8008468 <main+0x350>)
 80082a4:	4606      	mov	r6, r0
 80082a6:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	f008 f8e6 	bl	801047c <Network::Begin(unsigned short)>
 80082b0:	4b6e      	ldr	r3, [pc, #440]	; (800846c <main+0x354>)
 80082b2:	6018      	str	r0, [r3, #0]
 80082b4:	f1a7 041c 	sub.w	r4, r7, #28
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 fa33 	bl	8008724 <DmxInput::DmxInput()>
 80082be:	f89d 3f63 	ldrb.w	r3, [sp, #3939]	; 0xf63
 80082c2:	b10b      	cbz	r3, 80082c8 <main+0x1b0>
 80082c4:	f8cd 4898 	str.w	r4, [sp, #2200]	; 0x898
 80082c8:	f89d 3f62 	ldrb.w	r3, [sp, #3938]	; 0xf62
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d038      	beq.n	8008342 <main+0x22a>
 80082d0:	ab4f      	add	r3, sp, #316	; 0x13c
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	0699      	lsls	r1, r3, #26
 80082d6:	d534      	bpl.n	8008342 <main+0x22a>
 80082d8:	2090      	movs	r0, #144	; 0x90
 80082da:	f00a fcb3 	bl	8012c44 <operator new(unsigned int)>
 80082de:	2101      	movs	r1, #1
 80082e0:	4604      	mov	r4, r0
 80082e2:	f003 fdbb 	bl	800be5c <ArtNetRdmController::ArtNetRdmController(unsigned int)>
 80082e6:	2008      	movs	r0, #8
 80082e8:	f00a fcac 	bl	8012c44 <operator new(unsigned int)>
 80082ec:	4680      	mov	r8, r0
 80082ee:	f006 ff19 	bl	800f124 <StoreRDMDevice::StoreRDMDevice()>
 80082f2:	4641      	mov	r1, r8
 80082f4:	a8a4      	add	r0, sp, #656	; 0x290
 80082f6:	f004 f8f3 	bl	800c4e0 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 80082fa:	a8a4      	add	r0, sp, #656	; 0x290
 80082fc:	f004 f902 	bl	800c504 <RDMDeviceParams::Load()>
 8008300:	f104 0804 	add.w	r8, r4, #4
 8008304:	b130      	cbz	r0, 8008314 <main+0x1fc>
 8008306:	a8a4      	add	r0, sp, #656	; 0x290
 8008308:	4641      	mov	r1, r8
 800830a:	f004 f906 	bl	800c51a <RDMDeviceParams::Set(RDMDevice*)>
 800830e:	a8a4      	add	r0, sp, #656	; 0x290
 8008310:	f004 f938 	bl	800c584 <RDMDeviceParams::Dump()>
 8008314:	4640      	mov	r0, r8
 8008316:	f7ff fece 	bl	80080b6 <RDMDevice::Init()>
 800831a:	4640      	mov	r0, r8
 800831c:	f004 f86c 	bl	800c3f8 <RDMDevice::Print()>
 8008320:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
 8008324:	4952      	ldr	r1, [pc, #328]	; (8008470 <main+0x358>)
 8008326:	2303      	movs	r3, #3
 8008328:	a839      	add	r0, sp, #228	; 0xe4
 800832a:	f7ff fe9c 	bl	8008066 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800832e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8008332:	f003 ff8f 	bl	800c254 <RDMDiscovery::Full()>
 8008336:	2200      	movs	r2, #0
 8008338:	4621      	mov	r1, r4
 800833a:	f60d 0084 	addw	r0, sp, #2180	; 0x884
 800833e:	f001 fe6c 	bl	800a01a <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>
 8008342:	f50d 6008 	add.w	r0, sp, #2176	; 0x880
 8008346:	f000 fb25 	bl	8008994 <ArtNet4Node::Print()>
 800834a:	f89d 21b6 	ldrb.w	r2, [sp, #438]	; 0x1b6
 800834e:	ab4f      	add	r3, sp, #316	; 0x13c
 8008350:	07d2      	lsls	r2, r2, #31
 8008352:	f140 8122 	bpl.w	800859a <main+0x482>
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	4a46      	ldr	r2, [pc, #280]	; (8008474 <main+0x35c>)
 800835a:	f013 0f20 	tst.w	r3, #32
 800835e:	4b46      	ldr	r3, [pc, #280]	; (8008478 <main+0x360>)
 8008360:	bf08      	it	eq
 8008362:	461a      	moveq	r2, r3
 8008364:	4945      	ldr	r1, [pc, #276]	; (800847c <main+0x364>)
 8008366:	a839      	add	r0, sp, #228	; 0xe4
 8008368:	f009 f94a 	bl	8011600 <DisplayUdf::SetTitle(char const*, ...)>
 800836c:	2206      	movs	r2, #6
 800836e:	2102      	movs	r1, #2
 8008370:	a839      	add	r0, sp, #228	; 0xe4
 8008372:	f009 fa9b 	bl	80118ac <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008376:	2202      	movs	r2, #2
 8008378:	2103      	movs	r1, #3
 800837a:	a839      	add	r0, sp, #228	; 0xe4
 800837c:	f009 fa96 	bl	80118ac <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008380:	2203      	movs	r2, #3
 8008382:	2104      	movs	r1, #4
 8008384:	a839      	add	r0, sp, #228	; 0xe4
 8008386:	f009 fa91 	bl	80118ac <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800838a:	2204      	movs	r2, #4
 800838c:	2105      	movs	r1, #5
 800838e:	a839      	add	r0, sp, #228	; 0xe4
 8008390:	f009 fa8c 	bl	80118ac <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008394:	2207      	movs	r2, #7
 8008396:	2106      	movs	r1, #6
 8008398:	a839      	add	r0, sp, #228	; 0xe4
 800839a:	f009 fa87 	bl	80118ac <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800839e:	a80c      	add	r0, sp, #48	; 0x30
 80083a0:	f006 fd82 	bl	800eea8 <StoreDisplayUdf::StoreDisplayUdf()>
 80083a4:	a90c      	add	r1, sp, #48	; 0x30
 80083a6:	a82f      	add	r0, sp, #188	; 0xbc
 80083a8:	f009 fac2 	bl	8011930 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80083ac:	a82f      	add	r0, sp, #188	; 0xbc
 80083ae:	f009 facc 	bl	801194a <DisplayUdfParams::Load()>
 80083b2:	b130      	cbz	r0, 80083c2 <main+0x2aa>
 80083b4:	a82f      	add	r0, sp, #188	; 0xbc
 80083b6:	a939      	add	r1, sp, #228	; 0xe4
 80083b8:	f009 fbfd 	bl	8011bb6 <DisplayUdfParams::Set(DisplayUdf*)>
 80083bc:	a82f      	add	r0, sp, #188	; 0xbc
 80083be:	f009 fc2d 	bl	8011c1c <DisplayUdfParams::Dump()>
 80083c2:	f60d 0184 	addw	r1, sp, #2180	; 0x884
 80083c6:	a839      	add	r0, sp, #228	; 0xe4
 80083c8:	f009 fcf8 	bl	8011dbc <DisplayUdf::Show(ArtNetNode*)>
 80083cc:	ab4f      	add	r3, sp, #316	; 0x13c
 80083ce:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80083d2:	aa4f      	add	r2, sp, #316	; 0x13c
 80083d4:	6852      	ldr	r2, [r2, #4]
 80083d6:	07db      	lsls	r3, r3, #31
 80083d8:	bf54      	ite	pl
 80083da:	f89d 3f63 	ldrbpl.w	r3, [sp, #3939]	; 0xf63
 80083de:	f89d 3f62 	ldrbmi.w	r3, [sp, #3938]	; 0xf62
 80083e2:	2100      	movs	r1, #0
 80083e4:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80083e8:	a8a4      	add	r0, sp, #656	; 0x290
 80083ea:	f005 f95b 	bl	800d6a4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 80083ee:	a80d      	add	r0, sp, #52	; 0x34
 80083f0:	f006 fece 	bl	800f190 <StoreRemoteConfig::StoreRemoteConfig()>
 80083f4:	a90d      	add	r1, sp, #52	; 0x34
 80083f6:	a826      	add	r0, sp, #152	; 0x98
 80083f8:	f005 fc56 	bl	800dca8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 80083fc:	a826      	add	r0, sp, #152	; 0x98
 80083fe:	f005 fc5d 	bl	800dcbc <RemoteConfigParams::Load()>
 8008402:	b130      	cbz	r0, 8008412 <main+0x2fa>
 8008404:	a826      	add	r0, sp, #152	; 0x98
 8008406:	a9a4      	add	r1, sp, #656	; 0x290
 8008408:	f005 fd7f 	bl	800df0a <RemoteConfigParams::Set(RemoteConfig*)>
 800840c:	a826      	add	r0, sp, #152	; 0x98
 800840e:	f005 fda0 	bl	800df52 <RemoteConfigParams::Dump()>
 8008412:	a806      	add	r0, sp, #24
 8008414:	f006 fbb8 	bl	800eb88 <SpiFlashStore::Flash()>
 8008418:	2800      	cmp	r0, #0
 800841a:	d1fa      	bne.n	8008412 <main+0x2fa>
 800841c:	2303      	movs	r3, #3
 800841e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008422:	4917      	ldr	r1, [pc, #92]	; (8008480 <main+0x368>)
 8008424:	a839      	add	r0, sp, #228	; 0xe4
 8008426:	f7ff fe1e 	bl	8008066 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800842a:	e02b      	b.n	8008484 <main+0x36c>
 800842c:	08015243 	stmdaeq	r1, {r0, r1, r6, r9, ip, lr}
 8008430:	0801523a 	stmdaeq	r1, {r1, r3, r4, r5, r9, ip, lr}
 8008434:	08015339 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, ip, lr}
 8008438:	40011000 	andmi	r1, r1, r0
 800843c:	0801524f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r9, ip, lr}
 8008440:	08015328 	stmdaeq	r1, {r3, r5, r8, r9, ip, lr}
 8008444:	080152e8 	stmdaeq	r1, {r3, r5, r6, r7, r9, ip, lr}
 8008448:	2000ae04 	andcs	sl, r0, r4, lsl #28
 800844c:	08016c8b 	stmdaeq	r1, {r0, r1, r3, r7, sl, fp, sp, lr}
 8008450:	08015288 	stmdaeq	r1, {r3, r7, r9, ip, lr}
 8008454:	08015298 	stmdaeq	r1, {r3, r4, r7, r9, ip, lr}
 8008458:	08015291 	stmdaeq	r1, {r0, r4, r7, r9, ip, lr}
 800845c:	080153a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, ip, lr}
 8008460:	080152fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, ip, lr}
 8008464:	0801599c 	stmdaeq	r1, {r2, r3, r4, r7, r8, fp, ip, lr}
 8008468:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800846c:	20000004 	andcs	r0, r0, r4
 8008470:	080153bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, ip, lr}
 8008474:	080152ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, ip, lr}
 8008478:	0801522f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, ip, lr}
 800847c:	080152af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r9, ip, lr}
 8008480:	08015398 	stmdaeq	r1, {r3, r4, r7, r8, r9, ip, lr}
 8008484:	f50d 6008 	add.w	r0, sp, #2176	; 0x880
 8008488:	f000 fa3a 	bl	8008900 <ArtNet4Node::Start()>
 800848c:	f248 0280 	movw	r2, #32896	; 0x8080
 8008490:	2302      	movs	r3, #2
 8008492:	496c      	ldr	r1, [pc, #432]	; (8008644 <main+0x52c>)
 8008494:	a839      	add	r0, sp, #228	; 0xe4
 8008496:	f7ff fde6 	bl	8008066 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800849a:	2102      	movs	r1, #2
 800849c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80084a0:	f00b f9f8 	bl	8013894 <fwdgt_config>
 80084a4:	2801      	cmp	r0, #1
 80084a6:	bf0c      	ite	eq
 80084a8:	2201      	moveq	r2, #1
 80084aa:	2200      	movne	r2, #0
 80084ac:	ab0f      	add	r3, sp, #60	; 0x3c
 80084ae:	711a      	strb	r2, [r3, #4]
 80084b0:	d101      	bne.n	80084b6 <main+0x39e>
 80084b2:	f00b f9df 	bl	8013874 <fwdgt_enable>
 80084b6:	f8df a190 	ldr.w	sl, [pc, #400]	; 8008648 <main+0x530>
 80084ba:	f8df 8190 	ldr.w	r8, [pc, #400]	; 800864c <main+0x534>
 80084be:	f00b f9e1 	bl	8013884 <fwdgt_counter_reload>
 80084c2:	f7ff f831 	bl	8007528 <net_handle>
 80084c6:	f50d 6008 	add.w	r0, sp, #2176	; 0x880
 80084ca:	f000 fa54 	bl	8008976 <ArtNet4Node::Run()>
 80084ce:	a8a4      	add	r0, sp, #656	; 0x290
 80084d0:	f005 fa9a 	bl	800da08 <RemoteConfig::Run()>
 80084d4:	a806      	add	r0, sp, #24
 80084d6:	f006 fb57 	bl	800eb88 <SpiFlashStore::Flash()>
 80084da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80084dc:	ab19      	add	r3, sp, #100	; 0x64
 80084de:	b199      	cbz	r1, 8008508 <main+0x3f0>
 80084e0:	f8da 2000 	ldr.w	r2, [sl]
 80084e4:	6958      	ldr	r0, [r3, #20]
 80084e6:	1a12      	subs	r2, r2, r0
 80084e8:	4291      	cmp	r1, r2
 80084ea:	d80d      	bhi.n	8008508 <main+0x3f0>
 80084ec:	f8da 2000 	ldr.w	r2, [sl]
 80084f0:	615a      	str	r2, [r3, #20]
 80084f2:	691a      	ldr	r2, [r3, #16]
 80084f4:	2a01      	cmp	r2, #1
 80084f6:	f082 0101 	eor.w	r1, r2, #1
 80084fa:	6119      	str	r1, [r3, #16]
 80084fc:	bf16      	itet	ne
 80084fe:	2301      	movne	r3, #1
 8008500:	f8c9 2014 	streq.w	r2, [r9, #20]
 8008504:	f8c9 3010 	strne.w	r3, [r9, #16]
 8008508:	993e      	ldr	r1, [sp, #248]	; 0xf8
 800850a:	aa39      	add	r2, sp, #228	; 0xe4
 800850c:	b161      	cbz	r1, 8008528 <main+0x410>
 800850e:	7c13      	ldrb	r3, [r2, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d144      	bne.n	800859e <main+0x486>
 8008514:	f8da 3000 	ldr.w	r3, [sl]
 8008518:	6852      	ldr	r2, [r2, #4]
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	4299      	cmp	r1, r3
 800851e:	d203      	bcs.n	8008528 <main+0x410>
 8008520:	2101      	movs	r1, #1
 8008522:	a839      	add	r0, sp, #228	; 0xe4
 8008524:	f7ff fd5a 	bl	8007fdc <Display::SetSleep(bool)>
 8008528:	b39e      	cbz	r6, 8008592 <main+0x47a>
 800852a:	f1a5 030a 	sub.w	r3, r5, #10
 800852e:	f8df b120 	ldr.w	fp, [pc, #288]	; 8008650 <main+0x538>
 8008532:	4848      	ldr	r0, [pc, #288]	; (8008654 <main+0x53c>)
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	2210      	movs	r2, #16
 8008538:	4659      	mov	r1, fp
 800853a:	7800      	ldrb	r0, [r0, #0]
 800853c:	f1a7 0310 	sub.w	r3, r7, #16
 8008540:	f007 fa72 	bl	800fa28 <udp_recv>
 8008544:	280a      	cmp	r0, #10
 8008546:	4604      	mov	r4, r0
 8008548:	d923      	bls.n	8008592 <main+0x47a>
 800854a:	2204      	movs	r2, #4
 800854c:	4659      	mov	r1, fp
 800854e:	4842      	ldr	r0, [pc, #264]	; (8008658 <main+0x540>)
 8008550:	f7ff fc8d 	bl	8007e6e <memcmp>
 8008554:	b9e8      	cbnz	r0, 8008592 <main+0x47a>
 8008556:	44a3      	add	fp, r4
 8008558:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 800855c:	2b0a      	cmp	r3, #10
 800855e:	d103      	bne.n	8008568 <main+0x450>
 8008560:	3c01      	subs	r4, #1
 8008562:	b2a4      	uxth	r4, r4
 8008564:	2c0a      	cmp	r4, #10
 8008566:	d056      	beq.n	8008616 <main+0x4fe>
 8008568:	2c0e      	cmp	r4, #14
 800856a:	d852      	bhi.n	8008612 <main+0x4fa>
 800856c:	2206      	movs	r2, #6
 800856e:	f8d8 1000 	ldr.w	r1, [r8]
 8008572:	483a      	ldr	r0, [pc, #232]	; (800865c <main+0x544>)
 8008574:	f7ff fc7b 	bl	8007e6e <memcmp>
 8008578:	2800      	cmp	r0, #0
 800857a:	d14c      	bne.n	8008616 <main+0x4fe>
 800857c:	2104      	movs	r1, #4
 800857e:	4838      	ldr	r0, [pc, #224]	; (8008660 <main+0x548>)
 8008580:	f7ff fc89 	bl	8007e96 <dmxconfigudp::atoi(char const*, unsigned char)>
 8008584:	285b      	cmp	r0, #91	; 0x5b
 8008586:	4601      	mov	r1, r0
 8008588:	d903      	bls.n	8008592 <main+0x47a>
 800858a:	4b36      	ldr	r3, [pc, #216]	; (8008664 <main+0x54c>)
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	f004 fe2d 	bl	800d1ec <Dmx::SetDmxBreakTime(unsigned int)>
 8008592:	a807      	add	r0, sp, #28
 8008594:	f007 fece 	bl	8010334 <MDNS::Run()>
 8008598:	e791      	b.n	80084be <main+0x3a6>
 800859a:	4a33      	ldr	r2, [pc, #204]	; (8008668 <main+0x550>)
 800859c:	e6e2      	b.n	8008364 <main+0x24c>
 800859e:	f009 ffb2 	bl	8012506 <display::timeout::gpio_renew()>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d0c0      	beq.n	8008528 <main+0x410>
 80085a6:	2100      	movs	r1, #0
 80085a8:	e7bb      	b.n	8008522 <main+0x40a>
 80085aa:	2c0c      	cmp	r4, #12
 80085ac:	d916      	bls.n	80085dc <main+0x4c4>
 80085ae:	2c0e      	cmp	r4, #14
 80085b0:	d82c      	bhi.n	800860c <main+0x4f4>
 80085b2:	2208      	movs	r2, #8
 80085b4:	f8d8 1000 	ldr.w	r1, [r8]
 80085b8:	482c      	ldr	r0, [pc, #176]	; (800866c <main+0x554>)
 80085ba:	f7ff fc58 	bl	8007e6e <memcmp>
 80085be:	bb28      	cbnz	r0, 800860c <main+0x4f4>
 80085c0:	2102      	movs	r1, #2
 80085c2:	482b      	ldr	r0, [pc, #172]	; (8008670 <main+0x558>)
 80085c4:	f7ff fc67 	bl	8007e96 <dmxconfigudp::atoi(char const*, unsigned char)>
 80085c8:	4601      	mov	r1, r0
 80085ca:	b110      	cbz	r0, 80085d2 <main+0x4ba>
 80085cc:	4b29      	ldr	r3, [pc, #164]	; (8008674 <main+0x55c>)
 80085ce:	fbb3 f1f0 	udiv	r1, r3, r0
 80085d2:	4b24      	ldr	r3, [pc, #144]	; (8008664 <main+0x54c>)
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	f004 fdd9 	bl	800d18c <Dmx::SetDmxPeriodTime(unsigned int)>
 80085da:	e7da      	b.n	8008592 <main+0x47a>
 80085dc:	2c0a      	cmp	r4, #10
 80085de:	d0d8      	beq.n	8008592 <main+0x47a>
 80085e0:	2206      	movs	r2, #6
 80085e2:	f8d8 1000 	ldr.w	r1, [r8]
 80085e6:	4824      	ldr	r0, [pc, #144]	; (8008678 <main+0x560>)
 80085e8:	f7ff fc41 	bl	8007e6e <memcmp>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d1d0      	bne.n	8008592 <main+0x47a>
 80085f0:	2103      	movs	r1, #3
 80085f2:	481b      	ldr	r0, [pc, #108]	; (8008660 <main+0x548>)
 80085f4:	f7ff fc4f 	bl	8007e96 <dmxconfigudp::atoi(char const*, unsigned char)>
 80085f8:	1e83      	subs	r3, r0, #2
 80085fa:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80085fe:	d8c8      	bhi.n	8008592 <main+0x47a>
 8008600:	4b18      	ldr	r3, [pc, #96]	; (8008664 <main+0x54c>)
 8008602:	b281      	uxth	r1, r0
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	f004 fe05 	bl	800d214 <Dmx::SetDmxSlots(unsigned short)>
 800860a:	e7c2      	b.n	8008592 <main+0x47a>
 800860c:	2c0d      	cmp	r4, #13
 800860e:	d0e7      	beq.n	80085e0 <main+0x4c8>
 8008610:	e7bf      	b.n	8008592 <main+0x47a>
 8008612:	2c10      	cmp	r4, #16
 8008614:	d8bd      	bhi.n	8008592 <main+0x47a>
 8008616:	2204      	movs	r2, #4
 8008618:	f8d8 1000 	ldr.w	r1, [r8]
 800861c:	4817      	ldr	r0, [pc, #92]	; (800867c <main+0x564>)
 800861e:	f7ff fc26 	bl	8007e6e <memcmp>
 8008622:	2800      	cmp	r0, #0
 8008624:	d1c1      	bne.n	80085aa <main+0x492>
 8008626:	2107      	movs	r1, #7
 8008628:	4815      	ldr	r0, [pc, #84]	; (8008680 <main+0x568>)
 800862a:	f7ff fc34 	bl	8007e96 <dmxconfigudp::atoi(char const*, unsigned char)>
 800862e:	4b15      	ldr	r3, [pc, #84]	; (8008684 <main+0x56c>)
 8008630:	f1a0 020c 	sub.w	r2, r0, #12
 8008634:	429a      	cmp	r2, r3
 8008636:	4601      	mov	r1, r0
 8008638:	d8ab      	bhi.n	8008592 <main+0x47a>
 800863a:	4b0a      	ldr	r3, [pc, #40]	; (8008664 <main+0x54c>)
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	f004 fddf 	bl	800d200 <Dmx::SetDmxMabTime(unsigned int)>
 8008642:	e7a6      	b.n	8008592 <main+0x47a>
 8008644:	080153d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, r9, ip, lr}
 8008648:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800864c:	20000000 	andcs	r0, r0, r0
 8008650:	20001a39 	andcs	r1, r0, r9, lsr sl
 8008654:	20000004 	andcs	r0, r0, r4
 8008658:	080152bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, ip, lr}
 800865c:	080152c1 	stmdaeq	r1, {r0, r6, r7, r9, ip, lr}
 8008660:	20001a43 	andcs	r1, r0, r3, asr #20
 8008664:	20001e78 	andcs	r1, r0, r8, ror lr
 8008668:	08015225 	stmdaeq	r1, {r0, r2, r5, r9, ip, lr}
 800866c:	080152cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r9, ip, lr}
 8008670:	20001a45 	andcs	r1, r0, r5, asr #20
 8008674:	000f4240 	andeq	r4, pc, r0, asr #4
 8008678:	080152d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r9, ip, lr}
 800867c:	080152c8 	stmdaeq	r1, {r3, r6, r7, r9, ip, lr}
 8008680:	20001a41 	andcs	r1, r0, r1, asr #20
 8008684:	000f4234 	andeq	r4, pc, r4, lsr r2	; <UNPREDICTABLE>

08008688 <DmxInput::~DmxInput()>:
 8008688:	4770      	bx	lr
	...

0800868c <DmxInput::Start(unsigned int)>:
 800868c:	2301      	movs	r3, #1
 800868e:	4808      	ldr	r0, [pc, #32]	; (80086b0 <DmxInput::Start(unsigned int)+0x24>)
 8008690:	fa03 f101 	lsl.w	r1, r3, r1
 8008694:	7802      	ldrb	r2, [r0, #0]
 8008696:	ea31 0c02 	bics.w	ip, r1, r2
 800869a:	d007      	beq.n	80086ac <DmxInput::Start(unsigned int)+0x20>
 800869c:	430a      	orrs	r2, r1
 800869e:	7002      	strb	r2, [r0, #0]
 80086a0:	4804      	ldr	r0, [pc, #16]	; (80086b4 <DmxInput::Start(unsigned int)+0x28>)
 80086a2:	461a      	mov	r2, r3
 80086a4:	2100      	movs	r1, #0
 80086a6:	6800      	ldr	r0, [r0, #0]
 80086a8:	f004 bc64 	b.w	800cf74 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	200000f8 	strdcs	r0, [r0], -r8
 80086b4:	20001e78 	andcs	r1, r0, r8, ror lr

080086b8 <DmxInput::Stop(unsigned int)>:
 80086b8:	2201      	movs	r2, #1
 80086ba:	4808      	ldr	r0, [pc, #32]	; (80086dc <DmxInput::Stop(unsigned int)+0x24>)
 80086bc:	fa02 f101 	lsl.w	r1, r2, r1
 80086c0:	7803      	ldrb	r3, [r0, #0]
 80086c2:	ea31 0c03 	bics.w	ip, r1, r3
 80086c6:	d108      	bne.n	80086da <DmxInput::Stop(unsigned int)+0x22>
 80086c8:	ea23 0301 	bic.w	r3, r3, r1
 80086cc:	7003      	strb	r3, [r0, #0]
 80086ce:	2300      	movs	r3, #0
 80086d0:	4803      	ldr	r0, [pc, #12]	; (80086e0 <DmxInput::Stop(unsigned int)+0x28>)
 80086d2:	4619      	mov	r1, r3
 80086d4:	6800      	ldr	r0, [r0, #0]
 80086d6:	f004 bc4d 	b.w	800cf74 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80086da:	4770      	bx	lr
 80086dc:	200000f8 	strdcs	r0, [r0], -r8
 80086e0:	20001e78 	andcs	r1, r0, r8, ror lr

080086e4 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	4f0b      	ldr	r7, [pc, #44]	; (8008714 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x30>)
 80086e8:	2100      	movs	r1, #0
 80086ea:	6838      	ldr	r0, [r7, #0]
 80086ec:	461e      	mov	r6, r3
 80086ee:	4615      	mov	r5, r2
 80086f0:	f004 fdc8 	bl	800d284 <Dmx::GetDmxAvailable(unsigned int)>
 80086f4:	2100      	movs	r1, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	6838      	ldr	r0, [r7, #0]
 80086fa:	f004 fdd7 	bl	800d2ac <Dmx::GetUpdatesPerSecond(unsigned int)>
 80086fe:	6030      	str	r0, [r6, #0]
 8008700:	b12c      	cbz	r4, 800870e <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x2a>
 8008702:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8008706:	3401      	adds	r4, #1
 8008708:	4620      	mov	r0, r4
 800870a:	602b      	str	r3, [r5, #0]
 800870c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800870e:	4623      	mov	r3, r4
 8008710:	e7fa      	b.n	8008708 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x24>
 8008712:	bf00      	nop
 8008714:	20001e78 	andcs	r1, r0, r8, ror lr

08008718 <DmxInput::~DmxInput()>:
 8008718:	b510      	push	{r4, lr}
 800871a:	4604      	mov	r4, r0
 800871c:	f00a fa8e 	bl	8012c3c <operator delete(void*)>
 8008720:	4620      	mov	r0, r4
 8008722:	bd10      	pop	{r4, pc}

08008724 <DmxInput::DmxInput()>:
 8008724:	b510      	push	{r4, lr}
 8008726:	4604      	mov	r4, r0
 8008728:	4b03      	ldr	r3, [pc, #12]	; (8008738 <DmxInput::DmxInput()+0x14>)
 800872a:	2100      	movs	r1, #0
 800872c:	6003      	str	r3, [r0, #0]
 800872e:	f7ff ffc3 	bl	80086b8 <DmxInput::Stop(unsigned int)>
 8008732:	4620      	mov	r0, r4
 8008734:	bd10      	pop	{r4, pc}
 8008736:	bf00      	nop
 8008738:	08015348 	stmdaeq	r1, {r3, r6, r8, r9, ip, lr}

0800873c <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 800873c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800873e:	4616      	mov	r6, r2
 8008740:	1d07      	adds	r7, r0, #4
 8008742:	4604      	mov	r4, r0
 8008744:	4613      	mov	r3, r2
 8008746:	4638      	mov	r0, r7
 8008748:	f10d 0206 	add.w	r2, sp, #6
 800874c:	460d      	mov	r5, r1
 800874e:	f000 fc1d 	bl	8008f8c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8008752:	b1b6      	cbz	r6, 8008782 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008754:	b1a8      	cbz	r0, 8008782 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008756:	4629      	mov	r1, r5
 8008758:	4638      	mov	r0, r7
 800875a:	f000 fd90 	bl	800927e <ArtNetNode::GetPortProtocol(unsigned int) const>
 800875e:	2801      	cmp	r0, #1
 8008760:	d10f      	bne.n	8008782 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008762:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8008766:	b123      	cbz	r3, 8008772 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x36>
 8008768:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800876c:	3301      	adds	r3, #1
 800876e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008772:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008776:	b933      	cbnz	r3, 8008786 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4a>
 8008778:	2202      	movs	r2, #2
 800877a:	4629      	mov	r1, r5
 800877c:	4638      	mov	r0, r7
 800877e:	f000 fc48 	bl	8009012 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8008782:	b003      	add	sp, #12
 8008784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008786:	1e71      	subs	r1, r6, #1
 8008788:	424a      	negs	r2, r1
 800878a:	414a      	adcs	r2, r1
 800878c:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8008790:	4629      	mov	r1, r5
 8008792:	f002 fc5b 	bl	800b04c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008796:	e7f4      	b.n	8008782 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>

08008798 <ArtNet4Node::~ArtNet4Node()>:
 8008798:	b510      	push	{r4, lr}
 800879a:	4604      	mov	r4, r0
 800879c:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 800879e:	6003      	str	r3, [r0, #0]
 80087a0:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 80087a4:	f002 fb62 	bl	800ae6c <E131Bridge::Stop()>
 80087a8:	1d20      	adds	r0, r4, #4
 80087aa:	f000 f961 	bl	8008a70 <ArtNetNode::Stop()>
 80087ae:	4620      	mov	r0, r4
 80087b0:	bd10      	pop	{r4, pc}
 80087b2:	bf00      	nop
 80087b4:	08015380 	stmdaeq	r1, {r7, r8, r9, ip, lr}

080087b8 <ArtNet4Node::HandleAddress(unsigned char)>:
 80087b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ba:	4605      	mov	r5, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	2600      	movs	r6, #0
 80087c0:	1d07      	adds	r7, r0, #4
 80087c2:	792b      	ldrb	r3, [r5, #4]
 80087c4:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 80087c8:	d224      	bcs.n	8008814 <ArtNet4Node::HandleAddress(unsigned char)+0x5c>
 80087ca:	2301      	movs	r3, #1
 80087cc:	4631      	mov	r1, r6
 80087ce:	4638      	mov	r0, r7
 80087d0:	f10d 0206 	add.w	r2, sp, #6
 80087d4:	f000 fbda 	bl	8008f8c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 80087d8:	b150      	cbz	r0, 80087f0 <ArtNet4Node::HandleAddress(unsigned char)+0x38>
 80087da:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
 80087de:	b123      	cbz	r3, 80087ea <ArtNet4Node::HandleAddress(unsigned char)+0x32>
 80087e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80087e4:	3301      	adds	r3, #1
 80087e6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80087ea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80087ee:	b90b      	cbnz	r3, 80087f4 <ArtNet4Node::HandleAddress(unsigned char)+0x3c>
 80087f0:	3601      	adds	r6, #1
 80087f2:	e7e6      	b.n	80087c2 <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 80087f4:	4631      	mov	r1, r6
 80087f6:	4638      	mov	r0, r7
 80087f8:	f000 fd41 	bl	800927e <ArtNetNode::GetPortProtocol(unsigned int) const>
 80087fc:	4602      	mov	r2, r0
 80087fe:	2a01      	cmp	r2, #1
 8008800:	bf18      	it	ne
 8008802:	2202      	movne	r2, #2
 8008804:	4631      	mov	r1, r6
 8008806:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800880a:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 800880e:	f002 fc1d 	bl	800b04c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008812:	e7ed      	b.n	80087f0 <ArtNet4Node::HandleAddress(unsigned char)+0x38>
 8008814:	2c13      	cmp	r4, #19
 8008816:	f004 0603 	and.w	r6, r4, #3
 800881a:	d80a      	bhi.n	8008832 <ArtNet4Node::HandleAddress(unsigned char)+0x7a>
 800881c:	2c0f      	cmp	r4, #15
 800881e:	d819      	bhi.n	8008854 <ArtNet4Node::HandleAddress(unsigned char)+0x9c>
 8008820:	2c02      	cmp	r4, #2
 8008822:	d015      	beq.n	8008850 <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 8008824:	3c03      	subs	r4, #3
 8008826:	2c01      	cmp	r4, #1
 8008828:	d810      	bhi.n	800884c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800882a:	2300      	movs	r3, #0
 800882c:	f885 37c0 	strb.w	r3, [r5, #1984]	; 0x7c0
 8008830:	e00c      	b.n	800884c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008832:	2c53      	cmp	r4, #83	; 0x53
 8008834:	d806      	bhi.n	8008844 <ArtNet4Node::HandleAddress(unsigned char)+0x8c>
 8008836:	2c4f      	cmp	r4, #79	; 0x4f
 8008838:	d908      	bls.n	800884c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800883a:	2144      	movs	r1, #68	; 0x44
 800883c:	2300      	movs	r3, #0
 800883e:	fb01 5506 	mla	r5, r1, r6, r5
 8008842:	e00b      	b.n	800885c <ArtNet4Node::HandleAddress(unsigned char)+0xa4>
 8008844:	3470      	adds	r4, #112	; 0x70
 8008846:	b2e4      	uxtb	r4, r4
 8008848:	2c03      	cmp	r4, #3
 800884a:	d90a      	bls.n	8008862 <ArtNet4Node::HandleAddress(unsigned char)+0xaa>
 800884c:	b003      	add	sp, #12
 800884e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008850:	2301      	movs	r3, #1
 8008852:	e7eb      	b.n	800882c <ArtNet4Node::HandleAddress(unsigned char)+0x74>
 8008854:	2144      	movs	r1, #68	; 0x44
 8008856:	2301      	movs	r3, #1
 8008858:	fb01 5506 	mla	r5, r1, r6, r5
 800885c:	f8c5 3d04 	str.w	r3, [r5, #3332]	; 0xd04
 8008860:	e7f4      	b.n	800884c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008862:	4631      	mov	r1, r6
 8008864:	1d28      	adds	r0, r5, #4
 8008866:	f000 fd0a 	bl	800927e <ArtNetNode::GetPortProtocol(unsigned int) const>
 800886a:	2801      	cmp	r0, #1
 800886c:	d1ee      	bne.n	800884c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800886e:	4631      	mov	r1, r6
 8008870:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 8008874:	b003      	add	sp, #12
 8008876:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800887a:	f002 bf01 	b.w	800b680 <E131Bridge::Clear(unsigned int)>

0800887e <ArtNet4Node::IsStatusChanged()>:
 800887e:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8008882:	f002 bef5 	b.w	800b670 <E131Bridge::IsStatusChanged()>

08008886 <ArtNet4Node::~ArtNet4Node()>:
 8008886:	b510      	push	{r4, lr}
 8008888:	4604      	mov	r4, r0
 800888a:	f7ff ff85 	bl	8008798 <ArtNet4Node::~ArtNet4Node()>
 800888e:	4620      	mov	r0, r4
 8008890:	f00a f9d4 	bl	8012c3c <operator delete(void*)>
 8008894:	4620      	mov	r0, r4
 8008896:	bd10      	pop	{r4, pc}

08008898 <ArtNet4Node::GetStatus(unsigned int)>:
 8008898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800889a:	2301      	movs	r3, #1
 800889c:	4604      	mov	r4, r0
 800889e:	f10d 0206 	add.w	r2, sp, #6
 80088a2:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 80088a6:	460d      	mov	r5, r1
 80088a8:	f002 fc48 	bl	800b13c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 80088ac:	b188      	cbz	r0, 80088d2 <ArtNet4Node::GetStatus(unsigned int)+0x3a>
 80088ae:	2144      	movs	r1, #68	; 0x44
 80088b0:	fb01 4405 	mla	r4, r1, r5, r4
 80088b4:	f894 3d0a 	ldrb.w	r3, [r4, #3338]	; 0xd0a
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f894 3d09 	ldrb.w	r3, [r4, #3337]	; 0xd09
 80088be:	bf14      	ite	ne
 80088c0:	2080      	movne	r0, #128	; 0x80
 80088c2:	2000      	moveq	r0, #0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	bf14      	ite	ne
 80088c8:	2308      	movne	r3, #8
 80088ca:	2300      	moveq	r3, #0
 80088cc:	4318      	orrs	r0, r3
 80088ce:	f040 0001 	orr.w	r0, r0, #1
 80088d2:	b003      	add	sp, #12
 80088d4:	bd30      	pop	{r4, r5, pc}
	...

080088d8 <ArtNet4Node::ArtNet4Node(unsigned char)>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	4604      	mov	r4, r0
 80088dc:	1d05      	adds	r5, r0, #4
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 f964 	bl	8008bac <ArtNetNode::ArtNetNode(unsigned char)>
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <ArtNet4Node::ArtNet4Node(unsigned char)+0x24>)
 80088e6:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80088ea:	6023      	str	r3, [r4, #0]
 80088ec:	f002 fb0e 	bl	800af0c <E131Bridge::E131Bridge()>
 80088f0:	4628      	mov	r0, r5
 80088f2:	4621      	mov	r1, r4
 80088f4:	f000 f866 	bl	80089c4 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>
 80088f8:	4620      	mov	r0, r4
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	08015380 	stmdaeq	r1, {r7, r8, r9, ip, lr}

08008900 <ArtNet4Node::Start()>:
 8008900:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008902:	4604      	mov	r4, r0
 8008904:	2500      	movs	r5, #0
 8008906:	1d06      	adds	r6, r0, #4
 8008908:	7923      	ldrb	r3, [r4, #4]
 800890a:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800890e:	d218      	bcs.n	8008942 <ArtNet4Node::Start()+0x42>
 8008910:	2301      	movs	r3, #1
 8008912:	4629      	mov	r1, r5
 8008914:	4630      	mov	r0, r6
 8008916:	f10d 0206 	add.w	r2, sp, #6
 800891a:	f000 fb37 	bl	8008f8c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800891e:	b170      	cbz	r0, 800893e <ArtNet4Node::Start()+0x3e>
 8008920:	4629      	mov	r1, r5
 8008922:	4630      	mov	r0, r6
 8008924:	f000 fcab 	bl	800927e <ArtNetNode::GetPortProtocol(unsigned int) const>
 8008928:	2801      	cmp	r0, #1
 800892a:	d108      	bne.n	800893e <ArtNet4Node::Start()+0x3e>
 800892c:	4629      	mov	r1, r5
 800892e:	4630      	mov	r0, r6
 8008930:	f000 fcd6 	bl	80092e0 <ArtNetNode::GetMergeMode(unsigned int) const>
 8008934:	2344      	movs	r3, #68	; 0x44
 8008936:	436b      	muls	r3, r5
 8008938:	f604 5204 	addw	r2, r4, #3332	; 0xd04
 800893c:	50d0      	str	r0, [r2, r3]
 800893e:	3501      	adds	r5, #1
 8008940:	e7e2      	b.n	8008908 <ArtNet4Node::Start()+0x8>
 8008942:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 8008946:	4630      	mov	r0, r6
 8008948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800894c:	bf2c      	ite	cs
 800894e:	2300      	movcs	r3, #0
 8008950:	2301      	movcc	r3, #1
 8008952:	f884 3cb1 	strb.w	r3, [r4, #3249]	; 0xcb1
 8008956:	f894 36e0 	ldrb.w	r3, [r4, #1760]	; 0x6e0
 800895a:	f884 3cb2 	strb.w	r3, [r4, #3250]	; 0xcb2
 800895e:	68e3      	ldr	r3, [r4, #12]
 8008960:	f8c4 37bc 	str.w	r3, [r4, #1980]	; 0x7bc
 8008964:	f000 f840 	bl	80089e8 <ArtNetNode::Start()>
 8008968:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800896c:	b002      	add	sp, #8
 800896e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008972:	f002 ba3f 	b.w	800adf4 <E131Bridge::Start()>

08008976 <ArtNet4Node::Run()>:
 8008976:	b510      	push	{r4, lr}
 8008978:	4604      	mov	r4, r0
 800897a:	3004      	adds	r0, #4
 800897c:	f000 fa28 	bl	8008dd0 <ArtNetNode::Run()>
 8008980:	f894 3cc3 	ldrb.w	r3, [r4, #3267]	; 0xcc3
 8008984:	b12b      	cbz	r3, 8008992 <ArtNet4Node::Run()+0x1c>
 8008986:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800898a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800898e:	f002 bed9 	b.w	800b744 <E131Bridge::Run()>
 8008992:	bd10      	pop	{r4, pc}

08008994 <ArtNet4Node::Print()>:
 8008994:	b510      	push	{r4, lr}
 8008996:	4604      	mov	r4, r0
 8008998:	3004      	adds	r0, #4
 800899a:	f001 fc2b 	bl	800a1f4 <ArtNetNode::Print()>
 800899e:	f894 36e2 	ldrb.w	r3, [r4, #1762]	; 0x6e2
 80089a2:	b15b      	cbz	r3, 80089bc <ArtNet4Node::Print()+0x28>
 80089a4:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 80089a8:	b113      	cbz	r3, 80089b0 <ArtNet4Node::Print()+0x1c>
 80089aa:	4805      	ldr	r0, [pc, #20]	; (80089c0 <ArtNet4Node::Print()+0x2c>)
 80089ac:	f00a fc42 	bl	8013234 <printf>
 80089b0:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80089b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089b8:	f003 b918 	b.w	800bbec <E131Bridge::Print()>
 80089bc:	bd10      	pop	{r4, pc}
 80089be:	bf00      	nop
 80089c0:	0801535c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, ip, lr}

080089c4 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>:
 80089c4:	61c1      	str	r1, [r0, #28]
 80089c6:	4770      	bx	lr

080089c8 <strncpy.isra.0>:
 80089c8:	3901      	subs	r1, #1
 80089ca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80089ce:	b92b      	cbnz	r3, 80089dc <strncpy.isra.0+0x14>
 80089d0:	4402      	add	r2, r0
 80089d2:	4290      	cmp	r0, r2
 80089d4:	d007      	beq.n	80089e6 <strncpy.isra.0+0x1e>
 80089d6:	f800 3b01 	strb.w	r3, [r0], #1
 80089da:	e7fa      	b.n	80089d2 <strncpy.isra.0+0xa>
 80089dc:	3a01      	subs	r2, #1
 80089de:	f800 3b01 	strb.w	r3, [r0], #1
 80089e2:	d1f2      	bne.n	80089ca <strncpy.isra.0+0x2>
 80089e4:	4770      	bx	lr
 80089e6:	4770      	bx	lr

080089e8 <ArtNetNode::Start()>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	4d1f      	ldr	r5, [pc, #124]	; (8008a68 <ArtNetNode::Start()+0x80>)
 80089ec:	f990 3096 	ldrsb.w	r3, [r0, #150]	; 0x96
 80089f0:	682a      	ldr	r2, [r5, #0]
 80089f2:	f023 0302 	bic.w	r3, r3, #2
 80089f6:	7851      	ldrb	r1, [r2, #1]
 80089f8:	4604      	mov	r4, r0
 80089fa:	2900      	cmp	r1, #0
 80089fc:	bf14      	ite	ne
 80089fe:	2102      	movne	r1, #2
 8008a00:	2100      	moveq	r1, #0
 8008a02:	430b      	orrs	r3, r1
 8008a04:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 8008a08:	7812      	ldrb	r2, [r2, #0]
 8008a0a:	f023 0304 	bic.w	r3, r3, #4
 8008a0e:	2a00      	cmp	r2, #0
 8008a10:	bf14      	ite	ne
 8008a12:	2204      	movne	r2, #4
 8008a14:	2200      	moveq	r2, #0
 8008a16:	4313      	orrs	r3, r2
 8008a18:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 8008a1c:	f001 f8dc 	bl	8009bd8 <ArtNetNode::FillPollReply()>
 8008a20:	f641 1136 	movw	r1, #6454	; 0x1936
 8008a24:	6828      	ldr	r0, [r5, #0]
 8008a26:	f007 fd29 	bl	801047c <Network::Begin(unsigned short)>
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 8008a30:	6963      	ldr	r3, [r4, #20]
 8008a32:	6060      	str	r0, [r4, #4]
 8008a34:	b16b      	cbz	r3, 8008a52 <ArtNetNode::Start()+0x6a>
 8008a36:	2500      	movs	r5, #0
 8008a38:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 8008a3c:	012b      	lsls	r3, r5, #4
 8008a3e:	5cf3      	ldrb	r3, [r6, r3]
 8008a40:	b123      	cbz	r3, 8008a4c <ArtNetNode::Start()+0x64>
 8008a42:	6960      	ldr	r0, [r4, #20]
 8008a44:	4629      	mov	r1, r5
 8008a46:	6803      	ldr	r3, [r0, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	4798      	blx	r3
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	2d04      	cmp	r5, #4
 8008a50:	d1f4      	bne.n	8008a3c <ArtNetNode::Start()+0x54>
 8008a52:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <ArtNetNode::Start()+0x84>)
 8008a54:	2102      	movs	r1, #2
 8008a56:	6818      	ldr	r0, [r3, #0]
 8008a58:	f00a f80c 	bl	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a62:	2100      	movs	r1, #0
 8008a64:	f001 b92a 	b.w	8009cbc <ArtNetNode::SendPollRelply(bool)>
 8008a68:	2000a7cc 	andcs	sl, r0, ip, asr #15
 8008a6c:	2000aef0 	strdcs	sl, [r0], -r0

08008a70 <ArtNetNode::Stop()>:
 8008a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a74:	2500      	movs	r5, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	4606      	mov	r6, r0
 8008a7a:	46a9      	mov	r9, r5
 8008a7c:	f04f 0a01 	mov.w	sl, #1
 8008a80:	4f1f      	ldr	r7, [pc, #124]	; (8008b00 <ArtNetNode::Stop()+0x90>)
 8008a82:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008b04 <ArtNetNode::Stop()+0x94>
 8008a86:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 8008a8a:	b97b      	cbnz	r3, 8008aac <ArtNetNode::Stop()+0x3c>
 8008a8c:	68a0      	ldr	r0, [r4, #8]
 8008a8e:	b118      	cbz	r0, 8008a98 <ArtNetNode::Stop()+0x28>
 8008a90:	6803      	ldr	r3, [r0, #0]
 8008a92:	4629      	mov	r1, r5
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	4798      	blx	r3
 8008a98:	f8d8 3000 	ldr.w	r3, [r8]
 8008a9c:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 8008aa0:	07db      	lsls	r3, r3, #31
 8008aa2:	bf58      	it	pl
 8008aa4:	f8c8 a000 	strpl.w	sl, [r8]
 8008aa8:	f886 9705 	strb.w	r9, [r6, #1797]	; 0x705
 8008aac:	3501      	adds	r5, #1
 8008aae:	2d04      	cmp	r5, #4
 8008ab0:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8008ab4:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8008ab8:	d1e5      	bne.n	8008a86 <ArtNetNode::Stop()+0x16>
 8008aba:	6963      	ldr	r3, [r4, #20]
 8008abc:	b16b      	cbz	r3, 8008ada <ArtNetNode::Stop()+0x6a>
 8008abe:	2500      	movs	r5, #0
 8008ac0:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 8008ac4:	012b      	lsls	r3, r5, #4
 8008ac6:	5cf3      	ldrb	r3, [r6, r3]
 8008ac8:	b123      	cbz	r3, 8008ad4 <ArtNetNode::Stop()+0x64>
 8008aca:	6960      	ldr	r0, [r4, #20]
 8008acc:	4629      	mov	r1, r5
 8008ace:	6803      	ldr	r3, [r0, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	4798      	blx	r3
 8008ad4:	3501      	adds	r5, #1
 8008ad6:	2d04      	cmp	r5, #4
 8008ad8:	d1f4      	bne.n	8008ac4 <ArtNetNode::Stop()+0x54>
 8008ada:	4b0b      	ldr	r3, [pc, #44]	; (8008b08 <ArtNetNode::Stop()+0x98>)
 8008adc:	2100      	movs	r1, #0
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	f009 ffc8 	bl	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 8008ae4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008af0:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008af4:	2300      	movs	r3, #0
 8008af6:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 8008afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008afe:	bf00      	nop
 8008b00:	20000100 	andcs	r0, r0, r0, lsl #2
 8008b04:	200000fc 	strdcs	r0, [r0], -ip
 8008b08:	2000aef0 	strdcs	sl, [r0], -r0

08008b0c <ArtNetNode::SetShortName(char const*)>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	f100 0542 	add.w	r5, r0, #66	; 0x42
 8008b12:	4604      	mov	r4, r0
 8008b14:	2211      	movs	r2, #17
 8008b16:	4628      	mov	r0, r5
 8008b18:	f7ff ff56 	bl	80089c8 <strncpy.isra.0>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 8008b22:	462b      	mov	r3, r5
 8008b24:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8008b28:	428b      	cmp	r3, r1
 8008b2a:	d004      	beq.n	8008b36 <ArtNetNode::SetShortName(char const*)+0x2a>
 8008b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b30:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8008b34:	e7f8      	b.n	8008b28 <ArtNetNode::SetShortName(char const*)+0x1c>
 8008b36:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d10d      	bne.n	8008b5a <ArtNetNode::SetShortName(char const*)+0x4e>
 8008b3e:	6a20      	ldr	r0, [r4, #32]
 8008b40:	b118      	cbz	r0, 8008b4a <ArtNetNode::SetShortName(char const*)+0x3e>
 8008b42:	6803      	ldr	r3, [r0, #0]
 8008b44:	4629      	mov	r1, r5
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	4798      	blx	r3
 8008b4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b4c:	b128      	cbz	r0, 8008b5a <ArtNetNode::SetShortName(char const*)+0x4e>
 8008b4e:	6803      	ldr	r3, [r0, #0]
 8008b50:	4629      	mov	r1, r5
 8008b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	4718      	bx	r3
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}

08008b5c <ArtNetNode::SetLongName(char const*)>:
 8008b5c:	b570      	push	{r4, r5, r6, lr}
 8008b5e:	f100 0554 	add.w	r5, r0, #84	; 0x54
 8008b62:	4604      	mov	r4, r0
 8008b64:	223f      	movs	r2, #63	; 0x3f
 8008b66:	4628      	mov	r0, r5
 8008b68:	f7ff ff2e 	bl	80089c8 <strncpy.isra.0>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 8008b72:	462b      	mov	r3, r5
 8008b74:	f104 0194 	add.w	r1, r4, #148	; 0x94
 8008b78:	428b      	cmp	r3, r1
 8008b7a:	d004      	beq.n	8008b86 <ArtNetNode::SetLongName(char const*)+0x2a>
 8008b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b80:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8008b84:	e7f8      	b.n	8008b78 <ArtNetNode::SetLongName(char const*)+0x1c>
 8008b86:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d10d      	bne.n	8008baa <ArtNetNode::SetLongName(char const*)+0x4e>
 8008b8e:	6a20      	ldr	r0, [r4, #32]
 8008b90:	b118      	cbz	r0, 8008b9a <ArtNetNode::SetLongName(char const*)+0x3e>
 8008b92:	6803      	ldr	r3, [r0, #0]
 8008b94:	4629      	mov	r1, r5
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	4798      	blx	r3
 8008b9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b9c:	b128      	cbz	r0, 8008baa <ArtNetNode::SetLongName(char const*)+0x4e>
 8008b9e:	6803      	ldr	r3, [r0, #0]
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	4718      	bx	r3
 8008baa:	bd70      	pop	{r4, r5, r6, pc}

08008bac <ArtNetNode::ArtNetNode(unsigned char)>:
 8008bac:	2300      	movs	r3, #0
 8008bae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bb2:	2901      	cmp	r1, #1
 8008bb4:	bf28      	it	cs
 8008bb6:	2101      	movcs	r1, #1
 8008bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bba:	4604      	mov	r4, r0
 8008bbc:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8008bc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bc4:	4a41      	ldr	r2, [pc, #260]	; (8008ccc <ArtNetNode::ArtNetNode(unsigned char)+0x120>)
 8008bc6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8008bca:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8008bce:	7001      	strb	r1, [r0, #0]
 8008bd0:	6010      	str	r0, [r2, #0]
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	6243      	str	r3, [r0, #36]	; 0x24
 8008bd6:	f8c0 3664 	str.w	r3, [r0, #1636]	; 0x664
 8008bda:	f8c0 3668 	str.w	r3, [r0, #1640]	; 0x668
 8008bde:	f880 366e 	strb.w	r3, [r0, #1646]	; 0x66e
 8008be2:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8008be6:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8008bea:	428a      	cmp	r2, r1
 8008bec:	d002      	beq.n	8008bf4 <ArtNetNode::ArtNetNode(unsigned char)+0x48>
 8008bee:	f802 3b01 	strb.w	r3, [r2], #1
 8008bf2:	e7fa      	b.n	8008bea <ArtNetNode::ArtNetNode(unsigned char)+0x3e>
 8008bf4:	4b36      	ldr	r3, [pc, #216]	; (8008cd0 <ArtNetNode::ArtNetNode(unsigned char)+0x124>)
 8008bf6:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8008bfa:	6818      	ldr	r0, [r3, #0]
 8008bfc:	6903      	ldr	r3, [r0, #16]
 8008bfe:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c00:	6982      	ldr	r2, [r0, #24]
 8008c02:	ea63 0302 	orn	r3, r3, r2
 8008c06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c08:	6363      	str	r3, [r4, #52]	; 0x34
 8008c0a:	f007 fc3d 	bl	8010488 <Network::MacAddressCopyTo(unsigned char*)>
 8008c0e:	23d0      	movs	r3, #208	; 0xd0
 8008c10:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008c14:	f244 0318 	movw	r3, #16408	; 0x4018
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8008c1e:	f204 61e4 	addw	r1, r4, #1764	; 0x6e4
 8008c22:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 8008c26:	428b      	cmp	r3, r1
 8008c28:	d002      	beq.n	8008c30 <ArtNetNode::ArtNetNode(unsigned char)+0x84>
 8008c2a:	f803 2b01 	strb.w	r2, [r3], #1
 8008c2e:	e7fa      	b.n	8008c26 <ArtNetNode::ArtNetNode(unsigned char)+0x7a>
 8008c30:	f240 1201 	movw	r2, #257	; 0x101
 8008c34:	f8a4 26d4 	strh.w	r2, [r4, #1748]	; 0x6d4
 8008c38:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c3c:	2500      	movs	r5, #0
 8008c3e:	2708      	movs	r7, #8
 8008c40:	f8c4 26cc 	str.w	r2, [r4, #1740]	; 0x6cc
 8008c44:	f204 7174 	addw	r1, r4, #1908	; 0x774
 8008c48:	f204 76b4 	addw	r6, r4, #1972	; 0x7b4
 8008c4c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008c50:	4283      	cmp	r3, r0
 8008c52:	d005      	beq.n	8008c60 <ArtNetNode::ArtNetNode(unsigned char)+0xb4>
 8008c54:	f803 5b01 	strb.w	r5, [r3], #1
 8008c58:	e7fa      	b.n	8008c50 <ArtNetNode::ArtNetNode(unsigned char)+0xa4>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	e7f5      	b.n	8008c4c <ArtNetNode::ArtNetNode(unsigned char)+0xa0>
 8008c60:	460a      	mov	r2, r1
 8008c62:	f101 0310 	add.w	r3, r1, #16
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d002      	beq.n	8008c70 <ArtNetNode::ArtNetNode(unsigned char)+0xc4>
 8008c6a:	f802 5b01 	strb.w	r5, [r2], #1
 8008c6e:	e7fa      	b.n	8008c66 <ArtNetNode::ArtNetNode(unsigned char)+0xba>
 8008c70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c72:	4296      	cmp	r6, r2
 8008c74:	608b      	str	r3, [r1, #8]
 8008c76:	70cf      	strb	r7, [r1, #3]
 8008c78:	d1ef      	bne.n	8008c5a <ArtNetNode::ArtNetNode(unsigned char)+0xae>
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	4915      	ldr	r1, [pc, #84]	; (8008cd4 <ArtNetNode::ArtNetNode(unsigned char)+0x128>)
 8008c7e:	f7ff ff45 	bl	8008b0c <ArtNetNode::SetShortName(char const*)>
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <ArtNetNode::ArtNetNode(unsigned char)+0x12c>)
 8008c84:	f204 657f 	addw	r5, r4, #1663	; 0x67f
 8008c88:	9302      	str	r3, [sp, #8]
 8008c8a:	2304      	movs	r3, #4
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	4b13      	ldr	r3, [pc, #76]	; (8008cdc <ArtNetNode::ArtNetNode(unsigned char)+0x130>)
 8008c90:	4a13      	ldr	r2, [pc, #76]	; (8008ce0 <ArtNetNode::ArtNetNode(unsigned char)+0x134>)
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	2140      	movs	r1, #64	; 0x40
 8008c96:	4b13      	ldr	r3, [pc, #76]	; (8008ce4 <ArtNetNode::ArtNetNode(unsigned char)+0x138>)
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f00a faf3 	bl	8013284 <snprintf>
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f7ff ff5b 	bl	8008b5c <ArtNetNode::SetLongName(char const*)>
 8008ca6:	4b10      	ldr	r3, [pc, #64]	; (8008ce8 <ArtNetNode::ArtNetNode(unsigned char)+0x13c>)
 8008ca8:	f204 606f 	addw	r0, r4, #1647	; 0x66f
 8008cac:	781a      	ldrb	r2, [r3, #0]
 8008cae:	490f      	ldr	r1, [pc, #60]	; (8008cec <ArtNetNode::ArtNetNode(unsigned char)+0x140>)
 8008cb0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8008cb4:	785b      	ldrb	r3, [r3, #1]
 8008cb6:	220f      	movs	r2, #15
 8008cb8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008cbc:	f7ff fe84 	bl	80089c8 <strncpy.isra.0>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f884 367e 	strb.w	r3, [r4, #1662]	; 0x67e
 8008cc8:	b005      	add	sp, #20
 8008cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ccc:	20001910 	andcs	r1, r0, r0, lsl r9
 8008cd0:	2000a7cc 	andcs	sl, r0, ip, asr #15
 8008cd4:	0801541e 	stmdaeq	r1, {r1, r2, r3, r4, sl, ip, lr}
 8008cd8:	080153f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, ip, lr}
 8008cdc:	08015416 	stmdaeq	r1, {r1, r2, r4, sl, ip, lr}
 8008ce0:	080153ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, ip, lr}
 8008ce4:	080153e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, ip, lr}
 8008ce8:	080156d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, sl, ip, lr}
 8008cec:	0801540d 	stmdaeq	r1, {r0, r2, r3, sl, ip, lr}

08008cf0 <ArtNetNode::SetOemValue(unsigned char const*)>:
 8008cf0:	780b      	ldrb	r3, [r1, #0]
 8008cf2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008cf6:	784b      	ldrb	r3, [r1, #1]
 8008cf8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008cfc:	4770      	bx	lr
	...

08008d00 <ArtNetNode::SetNetworkDataLossCondition()>:
 8008d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d04:	2400      	movs	r4, #0
 8008d06:	4606      	mov	r6, r0
 8008d08:	4605      	mov	r5, r0
 8008d0a:	46a0      	mov	r8, r4
 8008d0c:	46a2      	mov	sl, r4
 8008d0e:	4f1a      	ldr	r7, [pc, #104]	; (8008d78 <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 8008d10:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8008d7c <ArtNetNode::SetNetworkDataLossCondition()+0x7c>
 8008d14:	f880 46da 	strb.w	r4, [r0, #1754]	; 0x6da
 8008d18:	f880 46d9 	strb.w	r4, [r0, #1753]	; 0x6d9
 8008d1c:	7833      	ldrb	r3, [r6, #0]
 8008d1e:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8008d22:	d227      	bcs.n	8008d74 <ArtNetNode::SetNetworkDataLossCondition()+0x74>
 8008d24:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8008d28:	b953      	cbnz	r3, 8008d40 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8008d2a:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8008d2e:	b13b      	cbz	r3, 8008d40 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8008d30:	68b0      	ldr	r0, [r6, #8]
 8008d32:	b118      	cbz	r0, 8008d3c <ArtNetNode::SetNetworkDataLossCondition()+0x3c>
 8008d34:	6803      	ldr	r3, [r0, #0]
 8008d36:	4621      	mov	r1, r4
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	4798      	blx	r3
 8008d3c:	f885 8705 	strb.w	r8, [r5, #1797]	; 0x705
 8008d40:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 8008d44:	f8c5 86f0 	str.w	r8, [r5, #1776]	; 0x6f0
 8008d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d4c:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 8008d50:	f8c5 86f8 	str.w	r8, [r5, #1784]	; 0x6f8
 8008d54:	f8d9 3000 	ldr.w	r3, [r9]
 8008d58:	f8c7 a600 	str.w	sl, [r7, #1536]	; 0x600
 8008d5c:	07db      	lsls	r3, r3, #31
 8008d5e:	bf58      	it	pl
 8008d60:	2301      	movpl	r3, #1
 8008d62:	f104 0401 	add.w	r4, r4, #1
 8008d66:	bf58      	it	pl
 8008d68:	f8c9 3000 	strpl.w	r3, [r9]
 8008d6c:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8008d70:	3524      	adds	r5, #36	; 0x24
 8008d72:	e7d3      	b.n	8008d1c <ArtNetNode::SetNetworkDataLossCondition()+0x1c>
 8008d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d78:	20000100 	andcs	r0, r0, r0, lsl #2
 8008d7c:	200000fc 	strdcs	r0, [r0], -ip

08008d80 <ArtNetNode::GetType()>:
 8008d80:	f8b0 3570 	ldrh.w	r3, [r0, #1392]	; 0x570
 8008d84:	b530      	push	{r4, r5, lr}
 8008d86:	2b0b      	cmp	r3, #11
 8008d88:	d803      	bhi.n	8008d92 <ArtNetNode::GetType()+0x12>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f8a0 3572 	strh.w	r3, [r0, #1394]	; 0x572
 8008d90:	bd30      	pop	{r4, r5, pc}
 8008d92:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1f7      	bne.n	8008d8a <ArtNetNode::GetType()+0xa>
 8008d9a:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 8008d9e:	2b0e      	cmp	r3, #14
 8008da0:	d1f3      	bne.n	8008d8a <ArtNetNode::GetType()+0xa>
 8008da2:	4a0a      	ldr	r2, [pc, #40]	; (8008dcc <ArtNetNode::GetType()+0x4c>)
 8008da4:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8008da8:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
 8008dac:	42ab      	cmp	r3, r5
 8008dae:	d006      	beq.n	8008dbe <ArtNetNode::GetType()+0x3e>
 8008db0:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008db4:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008db8:	428c      	cmp	r4, r1
 8008dba:	d0f7      	beq.n	8008dac <ArtNetNode::GetType()+0x2c>
 8008dbc:	e7e5      	b.n	8008d8a <ArtNetNode::GetType()+0xa>
 8008dbe:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
 8008dc2:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 8008dc6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008dca:	e7df      	b.n	8008d8c <ArtNetNode::GetType()+0xc>
 8008dcc:	08015204 	stmdaeq	r1, {r2, r9, ip, lr}

08008dd0 <ArtNetNode::Run()>:
 8008dd0:	b530      	push	{r4, r5, lr}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	f10d 030e 	add.w	r3, sp, #14
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	4604      	mov	r4, r0
 8008ddc:	f200 536c 	addw	r3, r0, #1388	; 0x56c
 8008de0:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8008de4:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8008de8:	7900      	ldrb	r0, [r0, #4]
 8008dea:	f006 fe1d 	bl	800fa28 <udp_recv>
 8008dee:	4b65      	ldr	r3, [pc, #404]	; (8008f84 <ArtNetNode::Run()+0x1b4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f8c4 3664 	str.w	r3, [r4, #1636]	; 0x664
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d143      	bne.n	8008e82 <ArtNetNode::Run()+0xb2>
 8008dfa:	f8d4 26cc 	ldr.w	r2, [r4, #1740]	; 0x6cc
 8008dfe:	b13a      	cbz	r2, 8008e10 <ArtNetNode::Run()+0x40>
 8008e00:	f8d4 1668 	ldr.w	r1, [r4, #1640]	; 0x668
 8008e04:	1a5b      	subs	r3, r3, r1
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d802      	bhi.n	8008e10 <ArtNetNode::Run()+0x40>
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f7ff ff78 	bl	8008d00 <ArtNetNode::SetNetworkDataLossCondition()>
 8008e10:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 8008e14:	b16b      	cbz	r3, 8008e32 <ArtNetNode::Run()+0x62>
 8008e16:	69e0      	ldr	r0, [r4, #28]
 8008e18:	f894 56db 	ldrb.w	r5, [r4, #1755]	; 0x6db
 8008e1c:	b120      	cbz	r0, 8008e28 <ArtNetNode::Run()+0x58>
 8008e1e:	6803      	ldr	r3, [r0, #0]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	4798      	blx	r3
 8008e24:	4305      	orrs	r5, r0
 8008e26:	b2ed      	uxtb	r5, r5
 8008e28:	b11d      	cbz	r5, 8008e32 <ArtNetNode::Run()+0x62>
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f000 ff45 	bl	8009cbc <ArtNetNode::SendPollRelply(bool)>
 8008e32:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8008e36:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
 8008e3a:	1a9b      	subs	r3, r3, r2
 8008e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e40:	d305      	bcc.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008e42:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8008e46:	f023 0302 	bic.w	r3, r3, #2
 8008e4a:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 8008e4e:	6963      	ldr	r3, [r4, #20]
 8008e50:	b113      	cbz	r3, 8008e58 <ArtNetNode::Run()+0x88>
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 fd46 	bl	80098e4 <ArtNetNode::HandleDmxIn()>
 8008e58:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008e5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e60:	2bc0      	cmp	r3, #192	; 0xc0
 8008e62:	d10c      	bne.n	8008e7e <ArtNetNode::Run()+0xae>
 8008e64:	4b48      	ldr	r3, [pc, #288]	; (8008f88 <ArtNetNode::Run()+0x1b8>)
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	6843      	ldr	r3, [r0, #4]
 8008e6a:	2b04      	cmp	r3, #4
 8008e6c:	d007      	beq.n	8008e7e <ArtNetNode::Run()+0xae>
 8008e6e:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 8084 	beq.w	8008f80 <ArtNetNode::Run()+0x1b0>
 8008e78:	2103      	movs	r1, #3
 8008e7a:	f009 fdfb 	bl	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 8008e7e:	b005      	add	sp, #20
 8008e80:	bd30      	pop	{r4, r5, pc}
 8008e82:	f8a4 0570 	strh.w	r0, [r4, #1392]	; 0x570
 8008e86:	f8c4 3668 	str.w	r3, [r4, #1640]	; 0x668
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f7ff ff78 	bl	8008d80 <ArtNetNode::GetType()>
 8008e90:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 8008e94:	b153      	cbz	r3, 8008eac <ArtNetNode::Run()+0xdc>
 8008e96:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8008e9a:	f8d4 26d0 	ldr.w	r2, [r4, #1744]	; 0x6d0
 8008e9e:	1a9b      	subs	r3, r3, r2
 8008ea0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008ea4:	bf24      	itt	cs
 8008ea6:	2300      	movcs	r3, #0
 8008ea8:	f884 36d9 	strbcs.w	r3, [r4, #1753]	; 0x6d9
 8008eac:	f8b4 3572 	ldrh.w	r3, [r4, #1394]	; 0x572
 8008eb0:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8008eb4:	d04c      	beq.n	8008f50 <ArtNetNode::Run()+0x180>
 8008eb6:	d81d      	bhi.n	8008ef4 <ArtNetNode::Run()+0x124>
 8008eb8:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 8008ebc:	d039      	beq.n	8008f32 <ArtNetNode::Run()+0x162>
 8008ebe:	d80c      	bhi.n	8008eda <ArtNetNode::Run()+0x10a>
 8008ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ec4:	d031      	beq.n	8008f2a <ArtNetNode::Run()+0x15a>
 8008ec6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008eca:	d1c0      	bne.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008ecc:	68a3      	ldr	r3, [r4, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0bd      	beq.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f000 fc1e 	bl	8009714 <ArtNetNode::HandleDmx()>
 8008ed8:	e7b9      	b.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008eda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ede:	d02f      	beq.n	8008f40 <ArtNetNode::Run()+0x170>
 8008ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ee4:	d1b3      	bne.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008ee6:	6923      	ldr	r3, [r4, #16]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0b0      	beq.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008eec:	4620      	mov	r0, r4
 8008eee:	f001 f879 	bl	8009fe4 <ArtNetNode::HandleTodRequest()>
 8008ef2:	e7ac      	b.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008ef4:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 8008ef8:	d026      	beq.n	8008f48 <ArtNetNode::Run()+0x178>
 8008efa:	d80c      	bhi.n	8008f16 <ArtNetNode::Run()+0x146>
 8008efc:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8008f00:	d02e      	beq.n	8008f60 <ArtNetNode::Run()+0x190>
 8008f02:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 8008f06:	d1a2      	bne.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f08:	68e3      	ldr	r3, [r4, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d09f      	beq.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f001 f948 	bl	800a1a4 <ArtNetNode::HandleTimeCode()>
 8008f14:	e79b      	b.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f16:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 8008f1a:	d029      	beq.n	8008f70 <ArtNetNode::Run()+0x1a0>
 8008f1c:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8008f20:	d195      	bne.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 fd8c 	bl	8009a40 <ArtNetNode::HandleIpProg()>
 8008f28:	e791      	b.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 ff8c 	bl	8009e48 <ArtNetNode::HandlePoll()>
 8008f30:	e78d      	b.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f32:	68a3      	ldr	r3, [r4, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d08a      	beq.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f001 f8e7 	bl	800a10c <ArtNetNode::HandleSync()>
 8008f3e:	e786      	b.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 f9d3 	bl	80092ec <ArtNetNode::HandleAddress()>
 8008f46:	e782      	b.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f001 f931 	bl	800a1b0 <ArtNetNode::HandleTimeSync()>
 8008f4e:	e77e      	b.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f43f af7b 	beq.w	8008e4e <ArtNetNode::Run()+0x7e>
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f001 f809 	bl	8009f70 <ArtNetNode::HandleTodControl()>
 8008f5e:	e776      	b.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f60:	6923      	ldr	r3, [r4, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f43f af73 	beq.w	8008e4e <ArtNetNode::Run()+0x7e>
 8008f68:	4620      	mov	r0, r4
 8008f6a:	f001 f861 	bl	800a030 <ArtNetNode::HandleRdm()>
 8008f6e:	e76e      	b.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f70:	69a3      	ldr	r3, [r4, #24]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f43f af6b 	beq.w	8008e4e <ArtNetNode::Run()+0x7e>
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f001 feeb 	bl	800ad54 <ArtNetNode::HandleTrigger()>
 8008f7e:	e766      	b.n	8008e4e <ArtNetNode::Run()+0x7e>
 8008f80:	2102      	movs	r1, #2
 8008f82:	e77a      	b.n	8008e7a <ArtNetNode::Run()+0xaa>
 8008f84:	2000af0c 	andcs	sl, r0, ip, lsl #30
 8008f88:	2000aef0 	strdcs	sl, [r0], -r0

08008f8c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 8008f8c:	b93b      	cbnz	r3, 8008f9e <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 8008f8e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8008f92:	f8b0 3774 	ldrh.w	r3, [r0, #1908]	; 0x774
 8008f96:	8013      	strh	r3, [r2, #0]
 8008f98:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8008f9c:	4770      	bx	lr
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	bf01      	itttt	eq
 8008fa2:	2324      	moveq	r3, #36	; 0x24
 8008fa4:	fb03 0001 	mlaeq	r0, r3, r1, r0
 8008fa8:	f8b0 36e4 	ldrheq.w	r3, [r0, #1764]	; 0x6e4
 8008fac:	f890 06e8 	ldrbeq.w	r0, [r0, #1768]	; 0x6e8
 8008fb0:	bf0c      	ite	eq
 8008fb2:	8013      	strheq	r3, [r2, #0]
 8008fb4:	2000      	movne	r0, #0
 8008fb6:	4770      	bx	lr

08008fb8 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 8008fb8:	b94b      	cbnz	r3, 8008fce <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 8008fba:	2903      	cmp	r1, #3
 8008fbc:	d810      	bhi.n	8008fe0 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x28>
 8008fbe:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8008fc2:	f890 3776 	ldrb.w	r3, [r0, #1910]	; 0x776
 8008fc6:	7013      	strb	r3, [r2, #0]
 8008fc8:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8008fcc:	4770      	bx	lr
 8008fce:	2324      	movs	r3, #36	; 0x24
 8008fd0:	fb03 0001 	mla	r0, r3, r1, r0
 8008fd4:	f890 36e6 	ldrb.w	r3, [r0, #1766]	; 0x6e6
 8008fd8:	7013      	strb	r3, [r2, #0]
 8008fda:	f890 06e8 	ldrb.w	r0, [r0, #1768]	; 0x6e8
 8008fde:	4770      	bx	lr
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	4770      	bx	lr

08008fe4 <ArtNetNode::GetSubnetSwitch(unsigned int) const>:
 8008fe4:	4408      	add	r0, r1
 8008fe6:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8008fea:	4770      	bx	lr

08008fec <ArtNetNode::GetNetSwitch(unsigned int) const>:
 8008fec:	4408      	add	r0, r1
 8008fee:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8008ff2:	4770      	bx	lr

08008ff4 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 8008ff4:	4402      	add	r2, r0
 8008ff6:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8008ffa:	f892 003f 	ldrb.w	r0, [r2, #63]	; 0x3f
 8008ffe:	021b      	lsls	r3, r3, #8
 8009000:	0100      	lsls	r0, r0, #4
 8009002:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8009006:	b2c0      	uxtb	r0, r0
 8009008:	4318      	orrs	r0, r3
 800900a:	f001 010f 	and.w	r1, r1, #15
 800900e:	4308      	orrs	r0, r1
 8009010:	4770      	bx	lr

08009012 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 8009012:	2903      	cmp	r1, #3
 8009014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009018:	4604      	mov	r4, r0
 800901a:	460d      	mov	r5, r1
 800901c:	4617      	mov	r7, r2
 800901e:	461e      	mov	r6, r3
 8009020:	f200 80a3 	bhi.w	800916a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x158>
 8009024:	2a02      	cmp	r2, #2
 8009026:	d121      	bne.n	800906c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 8009028:	2324      	movs	r3, #36	; 0x24
 800902a:	fb03 0301 	mla	r3, r3, r1, r0
 800902e:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 8009032:	b13a      	cbz	r2, 8009044 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 8009034:	2200      	movs	r2, #0
 8009036:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 800903a:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 800903e:	3b01      	subs	r3, #1
 8009040:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 8009044:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8009048:	f895 3778 	ldrb.w	r3, [r5, #1912]	; 0x778
 800904c:	b90b      	cbnz	r3, 8009052 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 800904e:	2000      	movs	r0, #0
 8009050:	e00a      	b.n	8009068 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 8009052:	2308      	movs	r3, #8
 8009054:	2000      	movs	r0, #0
 8009056:	f885 3777 	strb.w	r3, [r5, #1911]	; 0x777
 800905a:	f885 0778 	strb.w	r0, [r5, #1912]	; 0x778
 800905e:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 8009062:	3b01      	subs	r3, #1
 8009064:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 8009068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906c:	2a00      	cmp	r2, #0
 800906e:	d13b      	bne.n	80090e8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd6>
 8009070:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 8009074:	f898 3778 	ldrb.w	r3, [r8, #1912]	; 0x778
 8009078:	b923      	cbnz	r3, 8009084 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x72>
 800907a:	f890 36df 	ldrb.w	r3, [r0, #1759]	; 0x6df
 800907e:	3301      	adds	r3, #1
 8009080:	f880 36df 	strb.w	r3, [r0, #1759]	; 0x6df
 8009084:	2301      	movs	r3, #1
 8009086:	f04f 0900 	mov.w	r9, #0
 800908a:	f888 3778 	strb.w	r3, [r8, #1912]	; 0x778
 800908e:	f006 030f 	and.w	r3, r6, #15
 8009092:	464a      	mov	r2, r9
 8009094:	f888 3776 	strb.w	r3, [r8, #1910]	; 0x776
 8009098:	4631      	mov	r1, r6
 800909a:	4620      	mov	r0, r4
 800909c:	f888 9777 	strb.w	r9, [r8, #1911]	; 0x777
 80090a0:	f7ff ffa8 	bl	8008ff4 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 80090a4:	2324      	movs	r3, #36	; 0x24
 80090a6:	fb03 4305 	mla	r3, r3, r5, r4
 80090aa:	f8a8 0774 	strh.w	r0, [r8, #1908]	; 0x774
 80090ae:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 80090b2:	b132      	cbz	r2, 80090c2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 80090b4:	f883 96e8 	strb.w	r9, [r3, #1768]	; 0x6e8
 80090b8:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 80090bc:	3b01      	subs	r3, #1
 80090be:	f884 36de 	strb.w	r3, [r4, #1758]	; 0x6de
 80090c2:	69e0      	ldr	r0, [r4, #28]
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d044      	beq.n	8009152 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x140>
 80090c8:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d13b      	bne.n	8009148 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 80090d0:	6a20      	ldr	r0, [r4, #32]
 80090d2:	2800      	cmp	r0, #0
 80090d4:	d143      	bne.n	800915e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14c>
 80090d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80090d8:	2800      	cmp	r0, #0
 80090da:	d0b8      	beq.n	800904e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 80090dc:	6803      	ldr	r3, [r0, #0]
 80090de:	4632      	mov	r2, r6
 80090e0:	4629      	mov	r1, r5
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	4798      	blx	r3
 80090e6:	e7b2      	b.n	800904e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 80090e8:	2a01      	cmp	r2, #1
 80090ea:	d1ea      	bne.n	80090c2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 80090ec:	f04f 0824 	mov.w	r8, #36	; 0x24
 80090f0:	fb08 0301 	mla	r3, r8, r1, r0
 80090f4:	f893 36e8 	ldrb.w	r3, [r3, #1768]	; 0x6e8
 80090f8:	b923      	cbnz	r3, 8009104 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf2>
 80090fa:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 80090fe:	3301      	adds	r3, #1
 8009100:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 8009104:	2301      	movs	r3, #1
 8009106:	fb08 4805 	mla	r8, r8, r5, r4
 800910a:	f888 36e8 	strb.w	r3, [r8, #1768]	; 0x6e8
 800910e:	f006 030f 	and.w	r3, r6, #15
 8009112:	2200      	movs	r2, #0
 8009114:	f888 36e6 	strb.w	r3, [r8, #1766]	; 0x6e6
 8009118:	4631      	mov	r1, r6
 800911a:	4620      	mov	r0, r4
 800911c:	f7ff ff6a 	bl	8008ff4 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8009120:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8009124:	f8a8 06e4 	strh.w	r0, [r8, #1764]	; 0x6e4
 8009128:	f893 2778 	ldrb.w	r2, [r3, #1912]	; 0x778
 800912c:	2a00      	cmp	r2, #0
 800912e:	d0c8      	beq.n	80090c2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 8009136:	2208      	movs	r2, #8
 8009138:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 800913c:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 8009140:	3b01      	subs	r3, #1
 8009142:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 8009146:	e7bc      	b.n	80090c2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8009148:	6803      	ldr	r3, [r0, #0]
 800914a:	463a      	mov	r2, r7
 800914c:	4629      	mov	r1, r5
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	4798      	blx	r3
 8009152:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8009156:	2b02      	cmp	r3, #2
 8009158:	f47f af79 	bne.w	800904e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800915c:	e7b8      	b.n	80090d0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800915e:	6803      	ldr	r3, [r0, #0]
 8009160:	4632      	mov	r2, r6
 8009162:	4629      	mov	r1, r5
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	4798      	blx	r3
 8009168:	e7b5      	b.n	80090d6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 800916a:	f06f 0004 	mvn.w	r0, #4
 800916e:	e77b      	b.n	8009068 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

08009170 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 8009170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009174:	2524      	movs	r5, #36	; 0x24
 8009176:	4604      	mov	r4, r0
 8009178:	460f      	mov	r7, r1
 800917a:	4616      	mov	r6, r2
 800917c:	1883      	adds	r3, r0, r2
 800917e:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 8009182:	0093      	lsls	r3, r2, #2
 8009184:	b2db      	uxtb	r3, r3
 8009186:	fb05 0503 	mla	r5, r5, r3, r0
 800918a:	f103 0905 	add.w	r9, r3, #5
 800918e:	f103 0801 	add.w	r8, r3, #1
 8009192:	45c8      	cmp	r8, r9
 8009194:	f105 0524 	add.w	r5, r5, #36	; 0x24
 8009198:	d009      	beq.n	80091ae <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x3e>
 800919a:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 800919e:	089a      	lsrs	r2, r3, #2
 80091a0:	4620      	mov	r0, r4
 80091a2:	f7ff ff27 	bl	8008ff4 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 80091a6:	4643      	mov	r3, r8
 80091a8:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 80091ac:	e7ef      	b.n	800918e <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x1e>
 80091ae:	6a20      	ldr	r0, [r4, #32]
 80091b0:	b150      	cbz	r0, 80091c8 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 80091b2:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d106      	bne.n	80091c8 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 80091ba:	b92e      	cbnz	r6, 80091c8 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 80091bc:	6803      	ldr	r3, [r0, #0]
 80091be:	4639      	mov	r1, r7
 80091c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	4718      	bx	r3
 80091c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080091cc <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 80091cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d0:	2524      	movs	r5, #36	; 0x24
 80091d2:	4604      	mov	r4, r0
 80091d4:	460f      	mov	r7, r1
 80091d6:	4616      	mov	r6, r2
 80091d8:	1883      	adds	r3, r0, r2
 80091da:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
 80091de:	0093      	lsls	r3, r2, #2
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	fb05 0503 	mla	r5, r5, r3, r0
 80091e6:	f103 0905 	add.w	r9, r3, #5
 80091ea:	f103 0801 	add.w	r8, r3, #1
 80091ee:	45c8      	cmp	r8, r9
 80091f0:	f105 0524 	add.w	r5, r5, #36	; 0x24
 80091f4:	d009      	beq.n	800920a <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x3e>
 80091f6:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 80091fa:	089a      	lsrs	r2, r3, #2
 80091fc:	4620      	mov	r0, r4
 80091fe:	f7ff fef9 	bl	8008ff4 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8009202:	4643      	mov	r3, r8
 8009204:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 8009208:	e7ef      	b.n	80091ea <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x1e>
 800920a:	6a20      	ldr	r0, [r4, #32]
 800920c:	b150      	cbz	r0, 8009224 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800920e:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8009212:	2b02      	cmp	r3, #2
 8009214:	d106      	bne.n	8009224 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 8009216:	b92e      	cbnz	r6, 8009224 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 8009218:	6803      	ldr	r3, [r0, #0]
 800921a:	4639      	mov	r1, r7
 800921c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	4718      	bx	r3
 8009224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009228 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 8009228:	b570      	push	{r4, r5, r6, lr}
 800922a:	4616      	mov	r6, r2
 800922c:	2224      	movs	r2, #36	; 0x24
 800922e:	fb02 0301 	mla	r3, r2, r1, r0
 8009232:	fb02 0201 	mla	r2, r2, r1, r0
 8009236:	f8c3 6700 	str.w	r6, [r3, #1792]	; 0x700
 800923a:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 800923e:	2e01      	cmp	r6, #1
 8009240:	bf0c      	ite	eq
 8009242:	f043 0301 	orreq.w	r3, r3, #1
 8009246:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800924a:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 800924e:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 8009252:	4605      	mov	r5, r0
 8009254:	2b02      	cmp	r3, #2
 8009256:	460c      	mov	r4, r1
 8009258:	d110      	bne.n	800927c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800925a:	2903      	cmp	r1, #3
 800925c:	d80e      	bhi.n	800927c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800925e:	6a00      	ldr	r0, [r0, #32]
 8009260:	b118      	cbz	r0, 800926a <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 8009262:	6803      	ldr	r3, [r0, #0]
 8009264:	4632      	mov	r2, r6
 8009266:	6a1b      	ldr	r3, [r3, #32]
 8009268:	4798      	blx	r3
 800926a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800926c:	b130      	cbz	r0, 800927c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800926e:	6803      	ldr	r3, [r0, #0]
 8009270:	4632      	mov	r2, r6
 8009272:	4621      	mov	r1, r4
 8009274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	4718      	bx	r3
 800927c:	bd70      	pop	{r4, r5, r6, pc}

0800927e <ArtNetNode::GetPortProtocol(unsigned int) const>:
 800927e:	2324      	movs	r3, #36	; 0x24
 8009280:	fb03 0001 	mla	r0, r3, r1, r0
 8009284:	f8d0 0700 	ldr.w	r0, [r0, #1792]	; 0x700
 8009288:	4770      	bx	lr

0800928a <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800928a:	b570      	push	{r4, r5, r6, lr}
 800928c:	4616      	mov	r6, r2
 800928e:	2224      	movs	r2, #36	; 0x24
 8009290:	fb02 0301 	mla	r3, r2, r1, r0
 8009294:	fb02 0201 	mla	r2, r2, r1, r0
 8009298:	f8c3 66fc 	str.w	r6, [r3, #1788]	; 0x6fc
 800929c:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 80092a0:	2e01      	cmp	r6, #1
 80092a2:	bf0c      	ite	eq
 80092a4:	f043 0302 	orreq.w	r3, r3, #2
 80092a8:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 80092ac:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 80092b0:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 80092b4:	4605      	mov	r5, r0
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	460c      	mov	r4, r1
 80092ba:	d110      	bne.n	80092de <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 80092bc:	2903      	cmp	r1, #3
 80092be:	d80e      	bhi.n	80092de <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 80092c0:	6a00      	ldr	r0, [r0, #32]
 80092c2:	b118      	cbz	r0, 80092cc <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 80092c4:	6803      	ldr	r3, [r0, #0]
 80092c6:	4632      	mov	r2, r6
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	4798      	blx	r3
 80092cc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80092ce:	b130      	cbz	r0, 80092de <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 80092d0:	6803      	ldr	r3, [r0, #0]
 80092d2:	4632      	mov	r2, r6
 80092d4:	4621      	mov	r1, r4
 80092d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	4718      	bx	r3
 80092de:	bd70      	pop	{r4, r5, r6, pc}

080092e0 <ArtNetNode::GetMergeMode(unsigned int) const>:
 80092e0:	2324      	movs	r3, #36	; 0x24
 80092e2:	fb03 0001 	mla	r0, r3, r1, r0
 80092e6:	f8d0 06fc 	ldr.w	r0, [r0, #1788]	; 0x6fc
 80092ea:	4770      	bx	lr

080092ec <ArtNetNode::HandleAddress()>:
 80092ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f0:	2301      	movs	r3, #1
 80092f2:	f880 36d4 	strb.w	r3, [r0, #1748]	; 0x6d4
 80092f6:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 80092fa:	4604      	mov	r4, r0
 80092fc:	b133      	cbz	r3, 800930c <ArtNetNode::HandleAddress()+0x20>
 80092fe:	f100 01ae 	add.w	r1, r0, #174	; 0xae
 8009302:	f7ff fc03 	bl	8008b0c <ArtNetNode::SetShortName(char const*)>
 8009306:	2306      	movs	r3, #6
 8009308:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 800930c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8009310:	b13b      	cbz	r3, 8009322 <ArtNetNode::HandleAddress()+0x36>
 8009312:	4620      	mov	r0, r4
 8009314:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 8009318:	f7ff fc20 	bl	8008b5c <ArtNetNode::SetLongName(char const*)>
 800931c:	2307      	movs	r3, #7
 800931e:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 8009322:	f894 50ad 	ldrb.w	r5, [r4, #173]	; 0xad
 8009326:	b105      	cbz	r5, 800932a <ArtNetNode::HandleAddress()+0x3e>
 8009328:	3d01      	subs	r5, #1
 800932a:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 800932e:	2900      	cmp	r1, #0
 8009330:	d13d      	bne.n	80093ae <ArtNetNode::HandleAddress()+0xc2>
 8009332:	462a      	mov	r2, r5
 8009334:	4620      	mov	r0, r4
 8009336:	f7ff ff1b 	bl	8009170 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800933a:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 800933e:	2900      	cmp	r1, #0
 8009340:	d13b      	bne.n	80093ba <ArtNetNode::HandleAddress()+0xce>
 8009342:	462a      	mov	r2, r5
 8009344:	4620      	mov	r0, r4
 8009346:	f7ff ff41 	bl	80091cc <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800934a:	00ad      	lsls	r5, r5, #2
 800934c:	b2ed      	uxtb	r5, r5
 800934e:	4627      	mov	r7, r4
 8009350:	462e      	mov	r6, r5
 8009352:	f504 7882 	add.w	r8, r4, #260	; 0x104
 8009356:	f504 7984 	add.w	r9, r4, #264	; 0x108
 800935a:	f818 3b01 	ldrb.w	r3, [r8], #1
 800935e:	2b7f      	cmp	r3, #127	; 0x7f
 8009360:	d006      	beq.n	8009370 <ArtNetNode::HandleAddress()+0x84>
 8009362:	bb83      	cbnz	r3, 80093c6 <ArtNetNode::HandleAddress()+0xda>
 8009364:	2301      	movs	r3, #1
 8009366:	2201      	movs	r2, #1
 8009368:	4631      	mov	r1, r6
 800936a:	4620      	mov	r0, r4
 800936c:	f7ff fe51 	bl	8009012 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8009370:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 8009374:	2a7f      	cmp	r2, #127	; 0x7f
 8009376:	d005      	beq.n	8009384 <ArtNetNode::HandleAddress()+0x98>
 8009378:	bb52      	cbnz	r2, 80093d0 <ArtNetNode::HandleAddress()+0xe4>
 800937a:	2301      	movs	r3, #1
 800937c:	4631      	mov	r1, r6
 800937e:	4620      	mov	r0, r4
 8009380:	f7ff fe47 	bl	8009012 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8009384:	3601      	adds	r6, #1
 8009386:	45c1      	cmp	r9, r8
 8009388:	b2f6      	uxtb	r6, r6
 800938a:	d1e6      	bne.n	800935a <ArtNetNode::HandleAddress()+0x6e>
 800938c:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 8009390:	2913      	cmp	r1, #19
 8009392:	d823      	bhi.n	80093dc <ArtNetNode::HandleAddress()+0xf0>
 8009394:	290f      	cmp	r1, #15
 8009396:	f200 8092 	bhi.w	80094be <ArtNetNode::HandleAddress()+0x1d2>
 800939a:	3901      	subs	r1, #1
 800939c:	b2cb      	uxtb	r3, r1
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d82a      	bhi.n	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 80093a2:	2903      	cmp	r1, #3
 80093a4:	d828      	bhi.n	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 80093a6:	e8df f001 	tbb	[pc, r1]
 80093aa:	7e726654 	mrcvc	6, 3, r6, cr2, cr4, {2}
 80093ae:	060f      	lsls	r7, r1, #24
 80093b0:	d5c3      	bpl.n	800933a <ArtNetNode::HandleAddress()+0x4e>
 80093b2:	462a      	mov	r2, r5
 80093b4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80093b8:	e7bc      	b.n	8009334 <ArtNetNode::HandleAddress()+0x48>
 80093ba:	060e      	lsls	r6, r1, #24
 80093bc:	d5c5      	bpl.n	800934a <ArtNetNode::HandleAddress()+0x5e>
 80093be:	462a      	mov	r2, r5
 80093c0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80093c4:	e7be      	b.n	8009344 <ArtNetNode::HandleAddress()+0x58>
 80093c6:	0618      	lsls	r0, r3, #24
 80093c8:	d5d2      	bpl.n	8009370 <ArtNetNode::HandleAddress()+0x84>
 80093ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093ce:	e7ca      	b.n	8009366 <ArtNetNode::HandleAddress()+0x7a>
 80093d0:	0611      	lsls	r1, r2, #24
 80093d2:	d5d7      	bpl.n	8009384 <ArtNetNode::HandleAddress()+0x98>
 80093d4:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80093d8:	2200      	movs	r2, #0
 80093da:	e7cf      	b.n	800937c <ArtNetNode::HandleAddress()+0x90>
 80093dc:	2973      	cmp	r1, #115	; 0x73
 80093de:	d818      	bhi.n	8009412 <ArtNetNode::HandleAddress()+0x126>
 80093e0:	296f      	cmp	r1, #111	; 0x6f
 80093e2:	d87a      	bhi.n	80094da <ArtNetNode::HandleAddress()+0x1ee>
 80093e4:	2953      	cmp	r1, #83	; 0x53
 80093e6:	d803      	bhi.n	80093f0 <ArtNetNode::HandleAddress()+0x104>
 80093e8:	294f      	cmp	r1, #79	; 0x4f
 80093ea:	d905      	bls.n	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 80093ec:	2200      	movs	r2, #0
 80093ee:	e067      	b.n	80094c0 <ArtNetNode::HandleAddress()+0x1d4>
 80093f0:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d969      	bls.n	80094cc <ArtNetNode::HandleAddress()+0x1e0>
 80093f8:	69e0      	ldr	r0, [r4, #28]
 80093fa:	b120      	cbz	r0, 8009406 <ArtNetNode::HandleAddress()+0x11a>
 80093fc:	6803      	ldr	r3, [r0, #0]
 80093fe:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	4798      	blx	r3
 8009406:	4620      	mov	r0, r4
 8009408:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800940c:	2101      	movs	r1, #1
 800940e:	f000 bc55 	b.w	8009cbc <ArtNetNode::SendPollRelply(bool)>
 8009412:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b03      	cmp	r3, #3
 800941a:	d8ed      	bhi.n	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 800941c:	4b45      	ldr	r3, [pc, #276]	; (8009534 <ArtNetNode::HandleAddress()+0x248>)
 800941e:	f001 0103 	and.w	r1, r1, #3
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	440d      	add	r5, r1
 8009426:	07d2      	lsls	r2, r2, #31
 8009428:	bf5c      	itt	pl
 800942a:	2201      	movpl	r2, #1
 800942c:	601a      	strpl	r2, [r3, #0]
 800942e:	f240 6204 	movw	r2, #1540	; 0x604
 8009432:	b2ed      	uxtb	r5, r5
 8009434:	436a      	muls	r2, r5
 8009436:	4b40      	ldr	r3, [pc, #256]	; (8009538 <ArtNetNode::HandleAddress()+0x24c>)
 8009438:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800943c:	441a      	add	r2, r3
 800943e:	4611      	mov	r1, r2
 8009440:	2600      	movs	r6, #0
 8009442:	68a0      	ldr	r0, [r4, #8]
 8009444:	f502 7700 	add.w	r7, r2, #512	; 0x200
 8009448:	42b9      	cmp	r1, r7
 800944a:	d048      	beq.n	80094de <ArtNetNode::HandleAddress()+0x1f2>
 800944c:	f801 6b01 	strb.w	r6, [r1], #1
 8009450:	e7fa      	b.n	8009448 <ArtNetNode::HandleAddress()+0x15c>
 8009452:	2300      	movs	r3, #0
 8009454:	2224      	movs	r2, #36	; 0x24
 8009456:	f884 36da 	strb.w	r3, [r4, #1754]	; 0x6da
 800945a:	7823      	ldrb	r3, [r4, #0]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	fb02 4303 	mla	r3, r2, r3, r4
 8009462:	429f      	cmp	r7, r3
 8009464:	d0c8      	beq.n	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 8009466:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 800946a:	3724      	adds	r7, #36	; 0x24
 800946c:	f022 0208 	bic.w	r2, r2, #8
 8009470:	f887 26c3 	strb.w	r2, [r7, #1731]	; 0x6c3
 8009474:	e7f5      	b.n	8009462 <ArtNetNode::HandleAddress()+0x176>
 8009476:	4b31      	ldr	r3, [pc, #196]	; (800953c <ArtNetNode::HandleAddress()+0x250>)
 8009478:	2102      	movs	r1, #2
 800947a:	6818      	ldr	r0, [r3, #0]
 800947c:	f009 fafa 	bl	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 8009480:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009484:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8009488:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800948c:	e7b4      	b.n	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 800948e:	4b2b      	ldr	r3, [pc, #172]	; (800953c <ArtNetNode::HandleAddress()+0x250>)
 8009490:	2100      	movs	r1, #0
 8009492:	6818      	ldr	r0, [r3, #0]
 8009494:	f009 faee 	bl	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 8009498:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800949c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80094a4:	e7f0      	b.n	8009488 <ArtNetNode::HandleAddress()+0x19c>
 80094a6:	4b25      	ldr	r3, [pc, #148]	; (800953c <ArtNetNode::HandleAddress()+0x250>)
 80094a8:	2104      	movs	r1, #4
 80094aa:	6818      	ldr	r0, [r3, #0]
 80094ac:	f009 fae2 	bl	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 80094b0:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80094b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094bc:	e7e4      	b.n	8009488 <ArtNetNode::HandleAddress()+0x19c>
 80094be:	2201      	movs	r2, #1
 80094c0:	4620      	mov	r0, r4
 80094c2:	f001 0103 	and.w	r1, r1, #3
 80094c6:	f7ff fee0 	bl	800928a <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 80094ca:	e795      	b.n	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 80094cc:	2200      	movs	r2, #0
 80094ce:	4620      	mov	r0, r4
 80094d0:	f001 0103 	and.w	r1, r1, #3
 80094d4:	f7ff fea8 	bl	8009228 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 80094d8:	e78e      	b.n	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 80094da:	2201      	movs	r2, #1
 80094dc:	e7f7      	b.n	80094ce <ArtNetNode::HandleAddress()+0x1e2>
 80094de:	f240 6104 	movw	r1, #1540	; 0x604
 80094e2:	fb01 3105 	mla	r1, r1, r5, r3
 80094e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094ea:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 80094ee:	6801      	ldr	r1, [r0, #0]
 80094f0:	690e      	ldr	r6, [r1, #16]
 80094f2:	4629      	mov	r1, r5
 80094f4:	47b0      	blx	r6
 80094f6:	2d03      	cmp	r5, #3
 80094f8:	f63f af7e 	bhi.w	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 80094fc:	2624      	movs	r6, #36	; 0x24
 80094fe:	fb06 4605 	mla	r6, r6, r5, r4
 8009502:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 8009506:	2b00      	cmp	r3, #0
 8009508:	f47f af76 	bne.w	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 800950c:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8009510:	2b00      	cmp	r3, #0
 8009512:	f47f af71 	bne.w	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 8009516:	68a0      	ldr	r0, [r4, #8]
 8009518:	4629      	mov	r1, r5
 800951a:	6803      	ldr	r3, [r0, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	4798      	blx	r3
 8009520:	2301      	movs	r3, #1
 8009522:	f886 3705 	strb.w	r3, [r6, #1797]	; 0x705
 8009526:	f896 36e7 	ldrb.w	r3, [r6, #1767]	; 0x6e7
 800952a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800952e:	f886 36e7 	strb.w	r3, [r6, #1767]	; 0x6e7
 8009532:	e761      	b.n	80093f8 <ArtNetNode::HandleAddress()+0x10c>
 8009534:	200000fc 	strdcs	r0, [r0], -ip
 8009538:	20000100 	andcs	r0, r0, r0, lsl #2
 800953c:	2000aef0 	strdcs	sl, [r0], -r0

08009540 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 8009540:	f240 6304 	movw	r3, #1540	; 0x604
 8009544:	fb03 0101 	mla	r1, r3, r1, r0
 8009548:	2300      	movs	r3, #0
 800954a:	b510      	push	{r4, lr}
 800954c:	4293      	cmp	r3, r2
 800954e:	d00a      	beq.n	8009566 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x26>
 8009550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009554:	3301      	adds	r3, #1
 8009556:	f891 01ff 	ldrb.w	r0, [r1, #511]	; 0x1ff
 800955a:	42a0      	cmp	r0, r4
 800955c:	bf38      	it	cc
 800955e:	4620      	movcc	r0, r4
 8009560:	f881 03ff 	strb.w	r0, [r1, #1023]	; 0x3ff
 8009564:	e7f2      	b.n	800954c <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>
 8009566:	bd10      	pop	{r4, pc}

08009568 <memcpy.isra.0>:
 8009568:	3801      	subs	r0, #1
 800956a:	440a      	add	r2, r1
 800956c:	4291      	cmp	r1, r2
 800956e:	d004      	beq.n	800957a <memcpy.isra.0+0x12>
 8009570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009574:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009578:	e7f8      	b.n	800956c <memcpy.isra.0+0x4>
 800957a:	4770      	bx	lr

0800957c <lightset::Data::Get()>:
 800957c:	4b03      	ldr	r3, [pc, #12]	; (800958c <lightset::Data::Get()+0x10>)
 800957e:	4804      	ldr	r0, [pc, #16]	; (8009590 <lightset::Data::Get()+0x14>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	07d2      	lsls	r2, r2, #31
 8009584:	bf5c      	itt	pl
 8009586:	2201      	movpl	r2, #1
 8009588:	601a      	strpl	r2, [r3, #0]
 800958a:	4770      	bx	lr
 800958c:	200000fc 	strdcs	r0, [r0], -ip
 8009590:	20000100 	andcs	r0, r0, r0, lsl #2

08009594 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 8009594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009598:	4615      	mov	r5, r2
 800959a:	460f      	mov	r7, r1
 800959c:	4604      	mov	r4, r0
 800959e:	f7ff ffed 	bl	800957c <lightset::Data::Get()>
 80095a2:	4606      	mov	r6, r0
 80095a4:	f240 6004 	movw	r0, #1540	; 0x604
 80095a8:	4344      	muls	r4, r0
 80095aa:	eb06 0804 	add.w	r8, r6, r4
 80095ae:	462a      	mov	r2, r5
 80095b0:	4639      	mov	r1, r7
 80095b2:	4640      	mov	r0, r8
 80095b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80095b8:	f7ff ffd6 	bl	8009568 <memcpy.isra.0>
 80095bc:	462a      	mov	r2, r5
 80095be:	4639      	mov	r1, r7
 80095c0:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 80095c4:	1930      	adds	r0, r6, r4
 80095c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095ca:	f7ff bfcd 	b.w	8009568 <memcpy.isra.0>

080095ce <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 80095ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d2:	4680      	mov	r8, r0
 80095d4:	f240 6404 	movw	r4, #1540	; 0x604
 80095d8:	4615      	mov	r5, r2
 80095da:	460f      	mov	r7, r1
 80095dc:	4699      	mov	r9, r3
 80095de:	f7ff ffcd 	bl	800957c <lightset::Data::Get()>
 80095e2:	fb04 f408 	mul.w	r4, r4, r8
 80095e6:	eb00 0a04 	add.w	sl, r0, r4
 80095ea:	4606      	mov	r6, r0
 80095ec:	462a      	mov	r2, r5
 80095ee:	4639      	mov	r1, r7
 80095f0:	4650      	mov	r0, sl
 80095f2:	f7ff ffb9 	bl	8009568 <memcpy.isra.0>
 80095f6:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 80095fa:	f1b9 0f00 	cmp.w	r9, #0
 80095fe:	d106      	bne.n	800960e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 8009600:	462a      	mov	r2, r5
 8009602:	4641      	mov	r1, r8
 8009604:	4630      	mov	r0, r6
 8009606:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800960a:	f7ff bf99 	b.w	8009540 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800960e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009612:	462a      	mov	r2, r5
 8009614:	4639      	mov	r1, r7
 8009616:	1930      	adds	r0, r6, r4
 8009618:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800961c:	f7ff bfa4 	b.w	8009568 <memcpy.isra.0>

08009620 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 8009620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009624:	4616      	mov	r6, r2
 8009626:	4699      	mov	r9, r3
 8009628:	4680      	mov	r8, r0
 800962a:	460f      	mov	r7, r1
 800962c:	f7ff ffa6 	bl	800957c <lightset::Data::Get()>
 8009630:	f240 6404 	movw	r4, #1540	; 0x604
 8009634:	4605      	mov	r5, r0
 8009636:	fb04 f408 	mul.w	r4, r4, r8
 800963a:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800963e:	4632      	mov	r2, r6
 8009640:	4639      	mov	r1, r7
 8009642:	4428      	add	r0, r5
 8009644:	f7ff ff90 	bl	8009568 <memcpy.isra.0>
 8009648:	192b      	adds	r3, r5, r4
 800964a:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 800964e:	f1b9 0f00 	cmp.w	r9, #0
 8009652:	d106      	bne.n	8009662 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 8009654:	4632      	mov	r2, r6
 8009656:	4641      	mov	r1, r8
 8009658:	4628      	mov	r0, r5
 800965a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800965e:	f7ff bf6f 	b.w	8009540 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 8009662:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009666:	4632      	mov	r2, r6
 8009668:	4639      	mov	r1, r7
 800966a:	1928      	adds	r0, r5, r4
 800966c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009670:	f7ff bf7a 	b.w	8009568 <memcpy.isra.0>

08009674 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 8009674:	f890 36da 	ldrb.w	r3, [r0, #1754]	; 0x6da
 8009678:	b91b      	cbnz	r3, 8009682 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800967a:	f240 1301 	movw	r3, #257	; 0x101
 800967e:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 8009682:	2324      	movs	r3, #36	; 0x24
 8009684:	fb03 0001 	mla	r0, r3, r1, r0
 8009688:	f890 36e7 	ldrb.w	r3, [r0, #1767]	; 0x6e7
 800968c:	f043 0308 	orr.w	r3, r3, #8
 8009690:	f880 36e7 	strb.w	r3, [r0, #1767]	; 0x6e7
 8009694:	4770      	bx	lr

08009696 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 8009696:	2324      	movs	r3, #36	; 0x24
 8009698:	b530      	push	{r4, r5, lr}
 800969a:	f242 7510 	movw	r5, #10000	; 0x2710
 800969e:	fb03 0301 	mla	r3, r3, r1, r0
 80096a2:	f8d0 2664 	ldr.w	r2, [r0, #1636]	; 0x664
 80096a6:	f8d3 46ec 	ldr.w	r4, [r3, #1772]	; 0x6ec
 80096aa:	1b14      	subs	r4, r2, r4
 80096ac:	42ac      	cmp	r4, r5
 80096ae:	d908      	bls.n	80096c2 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 80096b0:	2400      	movs	r4, #0
 80096b2:	f8c3 46f0 	str.w	r4, [r3, #1776]	; 0x6f0
 80096b6:	f893 46e7 	ldrb.w	r4, [r3, #1767]	; 0x6e7
 80096ba:	f024 0408 	bic.w	r4, r4, #8
 80096be:	f883 46e7 	strb.w	r4, [r3, #1767]	; 0x6e7
 80096c2:	2324      	movs	r3, #36	; 0x24
 80096c4:	fb03 0101 	mla	r1, r3, r1, r0
 80096c8:	f8d1 36f4 	ldr.w	r3, [r1, #1780]	; 0x6f4
 80096cc:	1ad2      	subs	r2, r2, r3
 80096ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d908      	bls.n	80096e8 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 80096d6:	2300      	movs	r3, #0
 80096d8:	f8c1 36f8 	str.w	r3, [r1, #1784]	; 0x6f8
 80096dc:	f891 36e7 	ldrb.w	r3, [r1, #1767]	; 0x6e7
 80096e0:	f023 0308 	bic.w	r3, r3, #8
 80096e4:	f881 36e7 	strb.w	r3, [r1, #1767]	; 0x6e7
 80096e8:	2124      	movs	r1, #36	; 0x24
 80096ea:	7803      	ldrb	r3, [r0, #0]
 80096ec:	4602      	mov	r2, r0
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	fb01 0303 	mla	r3, r1, r3, r0
 80096f4:	2100      	movs	r1, #0
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d006      	beq.n	8009708 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x72>
 80096fa:	f892 46e7 	ldrb.w	r4, [r2, #1767]	; 0x6e7
 80096fe:	3224      	adds	r2, #36	; 0x24
 8009700:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8009704:	4321      	orrs	r1, r4
 8009706:	e7f6      	b.n	80096f6 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x60>
 8009708:	b919      	cbnz	r1, 8009712 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x7c>
 800970a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800970e:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 8009712:	bd30      	pop	{r4, r5, pc}

08009714 <ArtNetNode::HandleDmx()>:
 8009714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	f8b0 70b0 	ldrh.w	r7, [r0, #176]	; 0xb0
 800971c:	4604      	mov	r4, r0
 800971e:	ba7f      	rev16	r7, r7
 8009720:	b2bf      	uxth	r7, r7
 8009722:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8009726:	bf28      	it	cs
 8009728:	f44f 7700 	movcs.w	r7, #512	; 0x200
 800972c:	4605      	mov	r5, r0
 800972e:	2600      	movs	r6, #0
 8009730:	f04f 0901 	mov.w	r9, #1
 8009734:	f100 08b2 	add.w	r8, r0, #178	; 0xb2
 8009738:	7823      	ldrb	r3, [r4, #0]
 800973a:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800973e:	f080 809f 	bcs.w	8009880 <ArtNetNode::HandleDmx()+0x16c>
 8009742:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009746:	2b00      	cmp	r3, #0
 8009748:	d056      	beq.n	80097f8 <ArtNetNode::HandleDmx()+0xe4>
 800974a:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800974e:	2b00      	cmp	r3, #0
 8009750:	d152      	bne.n	80097f8 <ArtNetNode::HandleDmx()+0xe4>
 8009752:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
 8009756:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 800975a:	429a      	cmp	r2, r3
 800975c:	d14c      	bne.n	80097f8 <ArtNetNode::HandleDmx()+0xe4>
 800975e:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 8009762:	f8d5 b6f0 	ldr.w	fp, [r5, #1776]	; 0x6f0
 8009766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800976a:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 800976e:	f894 36da 	ldrb.w	r3, [r4, #1754]	; 0x6da
 8009772:	f8d5 a6f8 	ldr.w	sl, [r5, #1784]	; 0x6f8
 8009776:	b133      	cbz	r3, 8009786 <ArtNetNode::HandleDmx()+0x72>
 8009778:	f894 36dc 	ldrb.w	r3, [r4, #1756]	; 0x6dc
 800977c:	b91b      	cbnz	r3, 8009786 <ArtNetNode::HandleDmx()+0x72>
 800977e:	4631      	mov	r1, r6
 8009780:	4620      	mov	r0, r4
 8009782:	f7ff ff88 	bl	8009696 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 8009786:	ea5b 020a 	orrs.w	r2, fp, sl
 800978a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800978e:	d136      	bne.n	80097fe <ArtNetNode::HandleDmx()+0xea>
 8009790:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 8009794:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009798:	463a      	mov	r2, r7
 800979a:	4641      	mov	r1, r8
 800979c:	4630      	mov	r0, r6
 800979e:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 80097a2:	f7ff fef7 	bl	8009594 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 80097a6:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 80097aa:	b9fb      	cbnz	r3, 80097ec <ArtNetNode::HandleDmx()+0xd8>
 80097ac:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80097b0:	f7ff fee4 	bl	800957c <lightset::Data::Get()>
 80097b4:	f240 6304 	movw	r3, #1540	; 0x604
 80097b8:	4373      	muls	r3, r6
 80097ba:	18c1      	adds	r1, r0, r3
 80097bc:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80097c0:	f8da 3000 	ldr.w	r3, [sl]
 80097c4:	4402      	add	r2, r0
 80097c6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80097ca:	4650      	mov	r0, sl
 80097cc:	f8d1 3600 	ldr.w	r3, [r1, #1536]	; 0x600
 80097d0:	4631      	mov	r1, r6
 80097d2:	47d8      	blx	fp
 80097d4:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 80097d8:	b943      	cbnz	r3, 80097ec <ArtNetNode::HandleDmx()+0xd8>
 80097da:	68a0      	ldr	r0, [r4, #8]
 80097dc:	4631      	mov	r1, r6
 80097de:	6803      	ldr	r3, [r0, #0]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	4798      	blx	r3
 80097e4:	f884 96db 	strb.w	r9, [r4, #1755]	; 0x6db
 80097e8:	f885 9705 	strb.w	r9, [r5, #1797]	; 0x705
 80097ec:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 80097f0:	f043 0302 	orr.w	r3, r3, #2
 80097f4:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 80097f8:	3601      	adds	r6, #1
 80097fa:	3524      	adds	r5, #36	; 0x24
 80097fc:	e79c      	b.n	8009738 <ArtNetNode::HandleDmx()+0x24>
 80097fe:	459b      	cmp	fp, r3
 8009800:	d104      	bne.n	800980c <ArtNetNode::HandleDmx()+0xf8>
 8009802:	f1ba 0f00 	cmp.w	sl, #0
 8009806:	d0c5      	beq.n	8009794 <ArtNetNode::HandleDmx()+0x80>
 8009808:	b11b      	cbz	r3, 8009812 <ArtNetNode::HandleDmx()+0xfe>
 800980a:	e037      	b.n	800987c <ArtNetNode::HandleDmx()+0x168>
 800980c:	f1bb 0f00 	cmp.w	fp, #0
 8009810:	d132      	bne.n	8009878 <ArtNetNode::HandleDmx()+0x164>
 8009812:	459a      	cmp	sl, r3
 8009814:	d11d      	bne.n	8009852 <ArtNetNode::HandleDmx()+0x13e>
 8009816:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800981a:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 800981e:	f7ff fead 	bl	800957c <lightset::Data::Get()>
 8009822:	f240 6304 	movw	r3, #1540	; 0x604
 8009826:	4683      	mov	fp, r0
 8009828:	fb03 fa06 	mul.w	sl, r3, r6
 800982c:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 8009830:	463a      	mov	r2, r7
 8009832:	4641      	mov	r1, r8
 8009834:	4458      	add	r0, fp
 8009836:	f7ff fe97 	bl	8009568 <memcpy.isra.0>
 800983a:	eb0b 030a 	add.w	r3, fp, sl
 800983e:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 8009842:	463a      	mov	r2, r7
 8009844:	4641      	mov	r1, r8
 8009846:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800984a:	4458      	add	r0, fp
 800984c:	f7ff fe8c 	bl	8009568 <memcpy.isra.0>
 8009850:	e7a9      	b.n	80097a6 <ArtNetNode::HandleDmx()+0x92>
 8009852:	b9bb      	cbnz	r3, 8009884 <ArtNetNode::HandleDmx()+0x170>
 8009854:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 8009858:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800985c:	4631      	mov	r1, r6
 800985e:	4620      	mov	r0, r4
 8009860:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 8009864:	f7ff ff06 	bl	8009674 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 8009868:	463a      	mov	r2, r7
 800986a:	4641      	mov	r1, r8
 800986c:	4630      	mov	r0, r6
 800986e:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 8009872:	f7ff feac 	bl	80095ce <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 8009876:	e796      	b.n	80097a6 <ArtNetNode::HandleDmx()+0x92>
 8009878:	459b      	cmp	fp, r3
 800987a:	d118      	bne.n	80098ae <ArtNetNode::HandleDmx()+0x19a>
 800987c:	459a      	cmp	sl, r3
 800987e:	d1eb      	bne.n	8009858 <ArtNetNode::HandleDmx()+0x144>
 8009880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009884:	f1ba 0f00 	cmp.w	sl, #0
 8009888:	d1e4      	bne.n	8009854 <ArtNetNode::HandleDmx()+0x140>
 800988a:	f8c5 36f8 	str.w	r3, [r5, #1784]	; 0x6f8
 800988e:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009892:	4631      	mov	r1, r6
 8009894:	4620      	mov	r0, r4
 8009896:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 800989a:	f7ff feeb 	bl	8009674 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800989e:	463a      	mov	r2, r7
 80098a0:	4641      	mov	r1, r8
 80098a2:	4630      	mov	r0, r6
 80098a4:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 80098a8:	f7ff feba 	bl	8009620 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 80098ac:	e77b      	b.n	80097a6 <ArtNetNode::HandleDmx()+0x92>
 80098ae:	f1ba 0f00 	cmp.w	sl, #0
 80098b2:	d0ea      	beq.n	800988a <ArtNetNode::HandleDmx()+0x176>
 80098b4:	459a      	cmp	sl, r3
 80098b6:	d0ea      	beq.n	800988e <ArtNetNode::HandleDmx()+0x17a>
 80098b8:	e7e2      	b.n	8009880 <ArtNetNode::HandleDmx()+0x16c>
	...

080098bc <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 80098bc:	2903      	cmp	r1, #3
 80098be:	b510      	push	{r4, lr}
 80098c0:	d80d      	bhi.n	80098de <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x22>
 80098c2:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x24>)
 80098c4:	0109      	lsls	r1, r1, #4
 80098c6:	681c      	ldr	r4, [r3, #0]
 80098c8:	4401      	add	r1, r0
 80098ca:	6923      	ldr	r3, [r4, #16]
 80098cc:	69a4      	ldr	r4, [r4, #24]
 80098ce:	4053      	eors	r3, r2
 80098d0:	4223      	tst	r3, r4
 80098d2:	bf16      	itet	ne
 80098d4:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
 80098d6:	f8c1 277c 	streq.w	r2, [r1, #1916]	; 0x77c
 80098da:	f8c1 377c 	strne.w	r3, [r1, #1916]	; 0x77c
 80098de:	bd10      	pop	{r4, pc}
 80098e0:	2000a7cc 	andcs	sl, r0, ip, asr #15

080098e4 <ArtNetNode::HandleDmxIn()>:
 80098e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098e8:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80098ec:	ab05      	add	r3, sp, #20
 80098ee:	4607      	mov	r7, r0
 80098f0:	2208      	movs	r2, #8
 80098f2:	461e      	mov	r6, r3
 80098f4:	4942      	ldr	r1, [pc, #264]	; (8009a00 <ArtNetNode::HandleDmxIn()+0x11c>)
 80098f6:	3a01      	subs	r2, #1
 80098f8:	d304      	bcc.n	8009904 <ArtNetNode::HandleDmxIn()+0x20>
 80098fa:	f811 0b01 	ldrb.w	r0, [r1], #1
 80098fe:	f803 0b01 	strb.w	r0, [r3], #1
 8009902:	e7f8      	b.n	80098f6 <ArtNetNode::HandleDmxIn()+0x12>
 8009904:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8009908:	2500      	movs	r5, #0
 800990a:	8133      	strh	r3, [r6, #8]
 800990c:	230e      	movs	r3, #14
 800990e:	463c      	mov	r4, r7
 8009910:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8009a04 <ArtNetNode::HandleDmxIn()+0x120>
 8009914:	72b5      	strb	r5, [r6, #10]
 8009916:	72f3      	strb	r3, [r6, #11]
 8009918:	f894 3778 	ldrb.w	r3, [r4, #1912]	; 0x778
 800991c:	2b00      	cmp	r3, #0
 800991e:	d049      	beq.n	80099b4 <ArtNetNode::HandleDmxIn()+0xd0>
 8009920:	6978      	ldr	r0, [r7, #20]
 8009922:	4629      	mov	r1, r5
 8009924:	6803      	ldr	r3, [r0, #0]
 8009926:	aa03      	add	r2, sp, #12
 8009928:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800992c:	ab04      	add	r3, sp, #16
 800992e:	47c8      	blx	r9
 8009930:	2800      	cmp	r0, #0
 8009932:	d048      	beq.n	80099c6 <ArtNetNode::HandleDmxIn()+0xe2>
 8009934:	f894 3780 	ldrb.w	r3, [r4, #1920]	; 0x780
 8009938:	7375      	strb	r5, [r6, #13]
 800993a:	3301      	adds	r3, #1
 800993c:	b2db      	uxtb	r3, r3
 800993e:	f884 3780 	strb.w	r3, [r4, #1920]	; 0x780
 8009942:	7333      	strb	r3, [r6, #12]
 8009944:	f8b4 3774 	ldrh.w	r3, [r4, #1908]	; 0x774
 8009948:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800994c:	81f3      	strh	r3, [r6, #14]
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	eb00 0c03 	add.w	ip, r0, r3
 8009954:	4560      	cmp	r0, ip
 8009956:	d004      	beq.n	8009962 <ArtNetNode::HandleDmxIn()+0x7e>
 8009958:	f810 1b01 	ldrb.w	r1, [r0], #1
 800995c:	f802 1b01 	strb.w	r1, [r2], #1
 8009960:	e7f8      	b.n	8009954 <ArtNetNode::HandleDmxIn()+0x70>
 8009962:	07da      	lsls	r2, r3, #31
 8009964:	d504      	bpl.n	8009970 <ArtNetNode::HandleDmxIn()+0x8c>
 8009966:	2100      	movs	r1, #0
 8009968:	18f2      	adds	r2, r6, r3
 800996a:	3301      	adds	r3, #1
 800996c:	7491      	strb	r1, [r2, #18]
 800996e:	9303      	str	r3, [sp, #12]
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	4631      	mov	r1, r6
 8009974:	0a1a      	lsrs	r2, r3, #8
 8009976:	7473      	strb	r3, [r6, #17]
 8009978:	2380      	movs	r3, #128	; 0x80
 800997a:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 800997e:	f641 1336 	movw	r3, #6454	; 0x1936
 8009982:	7432      	strb	r2, [r6, #16]
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	f240 2212 	movw	r2, #530	; 0x212
 800998a:	f8d4 377c 	ldr.w	r3, [r4, #1916]	; 0x77c
 800998e:	7938      	ldrb	r0, [r7, #4]
 8009990:	f006 f8a6 	bl	800fae0 <udp_send>
 8009994:	2301      	movs	r3, #1
 8009996:	f8d8 2000 	ldr.w	r2, [r8]
 800999a:	40ab      	lsls	r3, r5
 800999c:	ea33 0102 	bics.w	r1, r3, r2
 80099a0:	d008      	beq.n	80099b4 <ArtNetNode::HandleDmxIn()+0xd0>
 80099a2:	4313      	orrs	r3, r2
 80099a4:	f8c8 3000 	str.w	r3, [r8]
 80099a8:	f897 36dd 	ldrb.w	r3, [r7, #1757]	; 0x6dd
 80099ac:	f043 0301 	orr.w	r3, r3, #1
 80099b0:	f887 36dd 	strb.w	r3, [r7, #1757]	; 0x6dd
 80099b4:	3501      	adds	r5, #1
 80099b6:	2d04      	cmp	r5, #4
 80099b8:	f104 0410 	add.w	r4, r4, #16
 80099bc:	d1ac      	bne.n	8009918 <ArtNetNode::HandleDmxIn()+0x34>
 80099be:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 80099c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099c6:	f994 2777 	ldrsb.w	r2, [r4, #1911]	; 0x777
 80099ca:	f894 3777 	ldrb.w	r3, [r4, #1911]	; 0x777
 80099ce:	2a00      	cmp	r2, #0
 80099d0:	daf0      	bge.n	80099b4 <ArtNetNode::HandleDmxIn()+0xd0>
 80099d2:	9a04      	ldr	r2, [sp, #16]
 80099d4:	2a00      	cmp	r2, #0
 80099d6:	d1ed      	bne.n	80099b4 <ArtNetNode::HandleDmxIn()+0xd0>
 80099d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099dc:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 80099e0:	2301      	movs	r3, #1
 80099e2:	fa03 f205 	lsl.w	r2, r3, r5
 80099e6:	f8d8 3000 	ldr.w	r3, [r8]
 80099ea:	ea23 0302 	bic.w	r3, r3, r2
 80099ee:	f8c8 3000 	str.w	r3, [r8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1de      	bne.n	80099b4 <ArtNetNode::HandleDmxIn()+0xd0>
 80099f6:	f897 36dd 	ldrb.w	r3, [r7, #1757]	; 0x6dd
 80099fa:	f023 0301 	bic.w	r3, r3, #1
 80099fe:	e7d7      	b.n	80099b0 <ArtNetNode::HandleDmxIn()+0xcc>
 8009a00:	0801542f 	stmdaeq	r1, {r0, r1, r2, r3, r5, sl, ip, lr}
 8009a04:	20001914 	andcs	r1, r0, r4, lsl r9

08009a08 <memcmp.constprop.0>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	4c07      	ldr	r4, [pc, #28]	; (8009a28 <memcmp.constprop.0+0x20>)
 8009a0c:	1e42      	subs	r2, r0, #1
 8009a0e:	3003      	adds	r0, #3
 8009a10:	4282      	cmp	r2, r0
 8009a12:	d007      	beq.n	8009a24 <memcmp.constprop.0+0x1c>
 8009a14:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a1c:	428b      	cmp	r3, r1
 8009a1e:	d0f7      	beq.n	8009a10 <memcmp.constprop.0+0x8>
 8009a20:	1a58      	subs	r0, r3, r1
 8009a22:	bd10      	pop	{r4, pc}
 8009a24:	2000      	movs	r0, #0
 8009a26:	e7fc      	b.n	8009a22 <memcmp.constprop.0+0x1a>
 8009a28:	20001918 	andcs	r1, r0, r8, lsl r9

08009a2c <memcpy.constprop.0.isra.0>:
 8009a2c:	3801      	subs	r0, #1
 8009a2e:	1d0a      	adds	r2, r1, #4
 8009a30:	4291      	cmp	r1, r2
 8009a32:	d004      	beq.n	8009a3e <memcpy.constprop.0.isra.0+0x12>
 8009a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a38:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009a3c:	e7f8      	b.n	8009a30 <memcpy.constprop.0.isra.0+0x4>
 8009a3e:	4770      	bx	lr

08009a40 <ArtNetNode::HandleIpProg()>:
 8009a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8009a48:	b085      	sub	sp, #20
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	9303      	str	r3, [sp, #12]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	4d5a      	ldr	r5, [pc, #360]	; (8009bbc <ArtNetNode::HandleIpProg()+0x17c>)
 8009a52:	f890 70ae 	ldrb.w	r7, [r0, #174]	; 0xae
 8009a56:	6828      	ldr	r0, [r5, #0]
 8009a58:	f890 b001 	ldrb.w	fp, [r0, #1]
 8009a5c:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 8009a60:	f06f 0306 	mvn.w	r3, #6
 8009a64:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 8009a68:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 8009a6c:	2bc0      	cmp	r3, #192	; 0xc0
 8009a6e:	d101      	bne.n	8009a74 <ArtNetNode::HandleIpProg()+0x34>
 8009a70:	f006 feb8 	bl	80107e4 <Network::EnableDhcp()>
 8009a74:	f007 0388 	and.w	r3, r7, #136	; 0x88
 8009a78:	2b88      	cmp	r3, #136	; 0x88
 8009a7a:	d103      	bne.n	8009a84 <ArtNetNode::HandleIpProg()+0x44>
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	6828      	ldr	r0, [r5, #0]
 8009a80:	f006 fe54 	bl	801072c <Network::SetIp(unsigned int)>
 8009a84:	f007 0384 	and.w	r3, r7, #132	; 0x84
 8009a88:	2b84      	cmp	r3, #132	; 0x84
 8009a8a:	4e4d      	ldr	r6, [pc, #308]	; (8009bc0 <ArtNetNode::HandleIpProg()+0x180>)
 8009a8c:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
 8009a90:	d107      	bne.n	8009aa2 <ArtNetNode::HandleIpProg()+0x62>
 8009a92:	4641      	mov	r1, r8
 8009a94:	4630      	mov	r0, r6
 8009a96:	f7ff ffc9 	bl	8009a2c <memcpy.constprop.0.isra.0>
 8009a9a:	6831      	ldr	r1, [r6, #0]
 8009a9c:	6828      	ldr	r0, [r5, #0]
 8009a9e:	f006 fe45 	bl	801072c <Network::SetIp(unsigned int)>
 8009aa2:	f007 0382 	and.w	r3, r7, #130	; 0x82
 8009aa6:	2b82      	cmp	r3, #130	; 0x82
 8009aa8:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
 8009aac:	d107      	bne.n	8009abe <ArtNetNode::HandleIpProg()+0x7e>
 8009aae:	4649      	mov	r1, r9
 8009ab0:	4843      	ldr	r0, [pc, #268]	; (8009bc0 <ArtNetNode::HandleIpProg()+0x180>)
 8009ab2:	f7ff ffbb 	bl	8009a2c <memcpy.constprop.0.isra.0>
 8009ab6:	6831      	ldr	r1, [r6, #0]
 8009ab8:	6828      	ldr	r0, [r5, #0]
 8009aba:	f006 fe65 	bl	8010788 <Network::SetNetmask(unsigned int)>
 8009abe:	f007 0790 	and.w	r7, r7, #144	; 0x90
 8009ac2:	2f90      	cmp	r7, #144	; 0x90
 8009ac4:	f104 0aba 	add.w	sl, r4, #186	; 0xba
 8009ac8:	d107      	bne.n	8009ada <ArtNetNode::HandleIpProg()+0x9a>
 8009aca:	4651      	mov	r1, sl
 8009acc:	483c      	ldr	r0, [pc, #240]	; (8009bc0 <ArtNetNode::HandleIpProg()+0x180>)
 8009ace:	f7ff ffad 	bl	8009a2c <memcpy.constprop.0.isra.0>
 8009ad2:	6831      	ldr	r1, [r6, #0]
 8009ad4:	6828      	ldr	r0, [r5, #0]
 8009ad6:	f006 fe6d 	bl	80107b4 <Network::SetGatewayIp(unsigned int)>
 8009ada:	2200      	movs	r2, #0
 8009adc:	6829      	ldr	r1, [r5, #0]
 8009ade:	7848      	ldrb	r0, [r1, #1]
 8009ae0:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
 8009ae4:	4290      	cmp	r0, r2
 8009ae6:	bf0c      	ite	eq
 8009ae8:	4610      	moveq	r0, r2
 8009aea:	2040      	movne	r0, #64	; 0x40
 8009aec:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
 8009af0:	7848      	ldrb	r0, [r1, #1]
 8009af2:	6909      	ldr	r1, [r1, #16]
 8009af4:	ea8b 0b00 	eor.w	fp, fp, r0
 8009af8:	4640      	mov	r0, r8
 8009afa:	6031      	str	r1, [r6, #0]
 8009afc:	f7ff ff84 	bl	8009a08 <memcmp.constprop.0>
 8009b00:	492f      	ldr	r1, [pc, #188]	; (8009bc0 <ArtNetNode::HandleIpProg()+0x180>)
 8009b02:	4607      	mov	r7, r0
 8009b04:	4640      	mov	r0, r8
 8009b06:	f7ff ff91 	bl	8009a2c <memcpy.constprop.0.isra.0>
 8009b0a:	6829      	ldr	r1, [r5, #0]
 8009b0c:	4648      	mov	r0, r9
 8009b0e:	6989      	ldr	r1, [r1, #24]
 8009b10:	6031      	str	r1, [r6, #0]
 8009b12:	f7ff ff79 	bl	8009a08 <memcmp.constprop.0>
 8009b16:	492a      	ldr	r1, [pc, #168]	; (8009bc0 <ArtNetNode::HandleIpProg()+0x180>)
 8009b18:	9003      	str	r0, [sp, #12]
 8009b1a:	4648      	mov	r0, r9
 8009b1c:	f7ff ff86 	bl	8009a2c <memcpy.constprop.0.isra.0>
 8009b20:	6829      	ldr	r1, [r5, #0]
 8009b22:	4650      	mov	r0, sl
 8009b24:	6949      	ldr	r1, [r1, #20]
 8009b26:	6031      	str	r1, [r6, #0]
 8009b28:	f7ff ff6e 	bl	8009a08 <memcmp.constprop.0>
 8009b2c:	9b03      	ldr	r3, [sp, #12]
 8009b2e:	4924      	ldr	r1, [pc, #144]	; (8009bc0 <ArtNetNode::HandleIpProg()+0x180>)
 8009b30:	431f      	orrs	r7, r3
 8009b32:	ea57 0300 	orrs.w	r3, r7, r0
 8009b36:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8009b3a:	bf0c      	ite	eq
 8009b3c:	465e      	moveq	r6, fp
 8009b3e:	f04b 0601 	orrne.w	r6, fp, #1
 8009b42:	f7ff ff73 	bl	8009a2c <memcpy.constprop.0.isra.0>
 8009b46:	2200      	movs	r2, #0
 8009b48:	f641 1336 	movw	r3, #6454	; 0x1936
 8009b4c:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 8009b50:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	2222      	movs	r2, #34	; 0x22
 8009b58:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 8009b5c:	7920      	ldrb	r0, [r4, #4]
 8009b5e:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8009b62:	f005 ffbd 	bl	800fae0 <udp_send>
 8009b66:	b336      	cbz	r6, 8009bb6 <ArtNetNode::HandleIpProg()+0x176>
 8009b68:	682a      	ldr	r2, [r5, #0]
 8009b6a:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 8009b6e:	6913      	ldr	r3, [r2, #16]
 8009b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b72:	6991      	ldr	r1, [r2, #24]
 8009b74:	7852      	ldrb	r2, [r2, #1]
 8009b76:	ea63 0301 	orn	r3, r3, r1
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	bf14      	ite	ne
 8009b7e:	2202      	movne	r2, #2
 8009b80:	2200      	moveq	r2, #0
 8009b82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b84:	f994 3096 	ldrsb.w	r3, [r4, #150]	; 0x96
 8009b88:	4641      	mov	r1, r8
 8009b8a:	f023 0302 	bic.w	r3, r3, #2
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 8009b94:	f7ff ff4a 	bl	8009a2c <memcpy.constprop.0.isra.0>
 8009b98:	4641      	mov	r1, r8
 8009b9a:	f204 6043 	addw	r0, r4, #1603	; 0x643
 8009b9e:	f7ff ff45 	bl	8009a2c <memcpy.constprop.0.isra.0>
 8009ba2:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 8009ba6:	b133      	cbz	r3, 8009bb6 <ArtNetNode::HandleIpProg()+0x176>
 8009ba8:	2101      	movs	r1, #1
 8009baa:	4620      	mov	r0, r4
 8009bac:	b005      	add	sp, #20
 8009bae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb2:	f000 b883 	b.w	8009cbc <ArtNetNode::SendPollRelply(bool)>
 8009bb6:	b005      	add	sp, #20
 8009bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbc:	2000a7cc 	andcs	sl, r0, ip, asr #15
 8009bc0:	20001918 	andcs	r1, r0, r8, lsl r9

08009bc4 <memcpy.isra.0>:
 8009bc4:	3801      	subs	r0, #1
 8009bc6:	440a      	add	r2, r1
 8009bc8:	4291      	cmp	r1, r2
 8009bca:	d004      	beq.n	8009bd6 <memcpy.isra.0+0x12>
 8009bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bd0:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009bd4:	e7f8      	b.n	8009bc8 <memcpy.isra.0+0x4>
 8009bd6:	4770      	bx	lr

08009bd8 <ArtNetNode::FillPollReply()>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4604      	mov	r4, r0
 8009bdc:	f200 5074 	addw	r0, r0, #1396	; 0x574
 8009be0:	4603      	mov	r3, r0
 8009be2:	2200      	movs	r2, #0
 8009be4:	f204 6163 	addw	r1, r4, #1635	; 0x663
 8009be8:	4299      	cmp	r1, r3
 8009bea:	d002      	beq.n	8009bf2 <ArtNetNode::FillPollReply()+0x1a>
 8009bec:	f803 2b01 	strb.w	r2, [r3], #1
 8009bf0:	e7fa      	b.n	8009be8 <ArtNetNode::FillPollReply()+0x10>
 8009bf2:	2208      	movs	r2, #8
 8009bf4:	492d      	ldr	r1, [pc, #180]	; (8009cac <ArtNetNode::FillPollReply()+0xd4>)
 8009bf6:	f7ff ffe5 	bl	8009bc4 <memcpy.isra.0>
 8009bfa:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8009bfe:	4d2c      	ldr	r5, [pc, #176]	; (8009cb0 <ArtNetNode::FillPollReply()+0xd8>)
 8009c00:	f8a4 357c 	strh.w	r3, [r4, #1404]	; 0x57c
 8009c04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009c06:	4629      	mov	r1, r5
 8009c08:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 8009c0c:	2204      	movs	r2, #4
 8009c0e:	602b      	str	r3, [r5, #0]
 8009c10:	f7ff ffd8 	bl	8009bc4 <memcpy.isra.0>
 8009c14:	f641 1336 	movw	r3, #6454	; 0x1936
 8009c18:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
 8009c1c:	4b25      	ldr	r3, [pc, #148]	; (8009cb4 <ArtNetNode::FillPollReply()+0xdc>)
 8009c1e:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8009c22:	781a      	ldrb	r2, [r3, #0]
 8009c24:	f204 508e 	addw	r0, r4, #1422	; 0x58e
 8009c28:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 8009c2c:	785b      	ldrb	r3, [r3, #1]
 8009c2e:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 8009c32:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8009c36:	f8a4 3588 	strh.w	r3, [r4, #1416]	; 0x588
 8009c3a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009c3e:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 8009c42:	4b1d      	ldr	r3, [pc, #116]	; (8009cb8 <ArtNetNode::FillPollReply()+0xe0>)
 8009c44:	785a      	ldrb	r2, [r3, #1]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	f884 258c 	strb.w	r2, [r4, #1420]	; 0x58c
 8009c4c:	f884 358d 	strb.w	r3, [r4, #1421]	; 0x58d
 8009c50:	2212      	movs	r2, #18
 8009c52:	f7ff ffb7 	bl	8009bc4 <memcpy.isra.0>
 8009c56:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8009c5a:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
 8009c5e:	2240      	movs	r2, #64	; 0x40
 8009c60:	f7ff ffb0 	bl	8009bc4 <memcpy.isra.0>
 8009c64:	2300      	movs	r3, #0
 8009c66:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8009c6a:	f884 363c 	strb.w	r3, [r4, #1596]	; 0x63c
 8009c6e:	f204 603d 	addw	r0, r4, #1597	; 0x63d
 8009c72:	2206      	movs	r2, #6
 8009c74:	f7ff ffa6 	bl	8009bc4 <memcpy.isra.0>
 8009c78:	4629      	mov	r1, r5
 8009c7a:	f204 6043 	addw	r0, r4, #1603	; 0x643
 8009c7e:	2204      	movs	r2, #4
 8009c80:	f7ff ffa0 	bl	8009bc4 <memcpy.isra.0>
 8009c84:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8009c88:	f104 0198 	add.w	r1, r4, #152	; 0x98
 8009c8c:	f884 3648 	strb.w	r3, [r4, #1608]	; 0x648
 8009c90:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 8009c94:	f204 604e 	addw	r0, r4, #1614	; 0x64e
 8009c98:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
 8009c9c:	2304      	movs	r3, #4
 8009c9e:	2206      	movs	r2, #6
 8009ca0:	f884 3621 	strb.w	r3, [r4, #1569]	; 0x621
 8009ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ca8:	f7ff bf8c 	b.w	8009bc4 <memcpy.isra.0>
 8009cac:	0801544a 	stmdaeq	r1, {r1, r3, r6, sl, ip, lr}
 8009cb0:	2000191c 	andcs	r1, r0, ip, lsl r9
 8009cb4:	080156d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, sl, ip, lr}
 8009cb8:	080156d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, ip, lr}

08009cbc <ArtNetNode::SendPollRelply(bool)>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	b941      	cbnz	r1, 8009cd8 <ArtNetNode::SendPollRelply(bool)+0x1c>
 8009cc6:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	bf02      	ittt	eq
 8009cce:	f8d0 36c0 	ldreq.w	r3, [r0, #1728]	; 0x6c0
 8009cd2:	3301      	addeq	r3, #1
 8009cd4:	f8c0 36c0 	streq.w	r3, [r0, #1728]	; 0x6c0
 8009cd8:	f04f 0900 	mov.w	r9, #0
 8009cdc:	46c8      	mov	r8, r9
 8009cde:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009ce2:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 8009ce6:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 8009cea:	9303      	str	r3, [sp, #12]
 8009cec:	7823      	ldrb	r3, [r4, #0]
 8009cee:	4543      	cmp	r3, r8
 8009cf0:	f340 80a1 	ble.w	8009e36 <ArtNetNode::SendPollRelply(bool)+0x17a>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	9a03      	ldr	r2, [sp, #12]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2590      	movs	r5, #144	; 0x90
 8009cfc:	f884 3586 	strb.w	r3, [r4, #1414]	; 0x586
 8009d00:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009d04:	4649      	mov	r1, r9
 8009d06:	f884 3587 	strb.w	r3, [r4, #1415]	; 0x587
 8009d0a:	f108 0301 	add.w	r3, r8, #1
 8009d0e:	f884 3647 	strb.w	r3, [r4, #1607]	; 0x647
 8009d12:	fa5f f389 	uxtb.w	r3, r9
 8009d16:	2bfb      	cmp	r3, #251	; 0xfb
 8009d18:	9203      	str	r2, [sp, #12]
 8009d1a:	f04f 0a00 	mov.w	sl, #0
 8009d1e:	bf8c      	ite	hi
 8009d20:	2201      	movhi	r2, #1
 8009d22:	2205      	movls	r2, #5
 8009d24:	fb05 4508 	mla	r5, r5, r8, r4
 8009d28:	eb04 1b88 	add.w	fp, r4, r8, lsl #6
 8009d2c:	f204 6722 	addw	r7, r4, #1570	; 0x622
 8009d30:	2a01      	cmp	r2, #1
 8009d32:	d061      	beq.n	8009df8 <ArtNetNode::SendPollRelply(bool)+0x13c>
 8009d34:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8009d38:	f895 66e7 	ldrb.w	r6, [r5, #1767]	; 0x6e7
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d144      	bne.n	8009dca <ArtNetNode::SendPollRelply(bool)+0x10e>
 8009d40:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	; 0x6f0
 8009d44:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 8009d48:	b14b      	cbz	r3, 8009d5e <ArtNetNode::SendPollRelply(bool)+0xa2>
 8009d4a:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009d4e:	f8d5 06ec 	ldr.w	r0, [r5, #1772]	; 0x6ec
 8009d52:	1a1b      	subs	r3, r3, r0
 8009d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d58:	bf38      	it	cc
 8009d5a:	f046 0680 	orrcc.w	r6, r6, #128	; 0x80
 8009d5e:	f8d5 36f8 	ldr.w	r3, [r5, #1784]	; 0x6f8
 8009d62:	b14b      	cbz	r3, 8009d78 <ArtNetNode::SendPollRelply(bool)+0xbc>
 8009d64:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009d68:	f8d5 06f4 	ldr.w	r0, [r5, #1780]	; 0x6f4
 8009d6c:	1a1b      	subs	r3, r3, r0
 8009d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d72:	d201      	bcs.n	8009d78 <ArtNetNode::SendPollRelply(bool)+0xbc>
 8009d74:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8009d78:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009d7c:	f885 66e7 	strb.w	r6, [r5, #1767]	; 0x6e7
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d037      	beq.n	8009df4 <ArtNetNode::SendPollRelply(bool)+0x138>
 8009d84:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8009d88:	f10a 0a01 	add.w	sl, sl, #1
 8009d8c:	703b      	strb	r3, [r7, #0]
 8009d8e:	723e      	strb	r6, [r7, #8]
 8009d90:	f895 36e6 	ldrb.w	r3, [r5, #1766]	; 0x6e6
 8009d94:	743b      	strb	r3, [r7, #16]
 8009d96:	b2cb      	uxtb	r3, r1
 8009d98:	2b03      	cmp	r3, #3
 8009d9a:	d80e      	bhi.n	8009dba <ArtNetNode::SendPollRelply(bool)+0xfe>
 8009d9c:	f89b 3778 	ldrb.w	r3, [fp, #1912]	; 0x778
 8009da0:	b12b      	cbz	r3, 8009dae <ArtNetNode::SendPollRelply(bool)+0xf2>
 8009da2:	783b      	ldrb	r3, [r7, #0]
 8009da4:	f10a 0a01 	add.w	sl, sl, #1
 8009da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dac:	703b      	strb	r3, [r7, #0]
 8009dae:	f89b 3777 	ldrb.w	r3, [fp, #1911]	; 0x777
 8009db2:	713b      	strb	r3, [r7, #4]
 8009db4:	f89b 3776 	ldrb.w	r3, [fp, #1910]	; 0x776
 8009db8:	733b      	strb	r3, [r7, #12]
 8009dba:	1e53      	subs	r3, r2, #1
 8009dbc:	3101      	adds	r1, #1
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	f10b 0b10 	add.w	fp, fp, #16
 8009dc4:	3701      	adds	r7, #1
 8009dc6:	3524      	adds	r5, #36	; 0x24
 8009dc8:	e7b2      	b.n	8009d30 <ArtNetNode::SendPollRelply(bool)+0x74>
 8009dca:	69e0      	ldr	r0, [r4, #28]
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d0d3      	beq.n	8009d78 <ArtNetNode::SendPollRelply(bool)+0xbc>
 8009dd0:	6803      	ldr	r3, [r0, #0]
 8009dd2:	9205      	str	r2, [sp, #20]
 8009dd4:	9104      	str	r1, [sp, #16]
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	4798      	blx	r3
 8009dda:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009dde:	f000 0089 	and.w	r0, r0, #137	; 0x89
 8009de2:	f006 0676 	and.w	r6, r6, #118	; 0x76
 8009de6:	4306      	orrs	r6, r0
 8009de8:	f010 0001 	ands.w	r0, r0, #1
 8009dec:	bf08      	it	eq
 8009dee:	f8c5 0700 	streq.w	r0, [r5, #1792]	; 0x700
 8009df2:	e7c1      	b.n	8009d78 <ArtNetNode::SendPollRelply(bool)+0xbc>
 8009df4:	703b      	strb	r3, [r7, #0]
 8009df6:	e7ca      	b.n	8009d8e <ArtNetNode::SendPollRelply(bool)+0xd2>
 8009df8:	f204 636f 	addw	r3, r4, #1647	; 0x66f
 8009dfc:	9301      	str	r3, [sp, #4]
 8009dfe:	f8d4 36c0 	ldr.w	r3, [r4, #1728]	; 0x6c0
 8009e02:	2140      	movs	r1, #64	; 0x40
 8009e04:	4a0f      	ldr	r2, [pc, #60]	; (8009e44 <ArtNetNode::SendPollRelply(bool)+0x188>)
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	f884 a621 	strb.w	sl, [r4, #1569]	; 0x621
 8009e0c:	f894 36d4 	ldrb.w	r3, [r4, #1748]	; 0x6d4
 8009e10:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8009e14:	f009 fa36 	bl	8013284 <snprintf>
 8009e18:	f641 1336 	movw	r3, #6454	; 0x1936
 8009e1c:	22ef      	movs	r2, #239	; 0xef
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	7920      	ldrb	r0, [r4, #4]
 8009e22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009e24:	f204 5174 	addw	r1, r4, #1396	; 0x574
 8009e28:	f005 fe5a 	bl	800fae0 <udp_send>
 8009e2c:	f108 0801 	add.w	r8, r8, #1
 8009e30:	f109 0904 	add.w	r9, r9, #4
 8009e34:	e75a      	b.n	8009cec <ArtNetNode::SendPollRelply(bool)+0x30>
 8009e36:	2300      	movs	r3, #0
 8009e38:	f884 36db 	strb.w	r3, [r4, #1755]	; 0x6db
 8009e3c:	b007      	add	sp, #28
 8009e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e42:	bf00      	nop
 8009e44:	08015437 	stmdaeq	r1, {r0, r1, r2, r4, r5, sl, ip, lr}

08009e48 <ArtNetNode::HandlePoll()>:
 8009e48:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8009e4c:	b410      	push	{r4}
 8009e4e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8009e52:	f880 26d6 	strb.w	r2, [r0, #1750]	; 0x6d6
 8009e56:	f013 0204 	ands.w	r2, r3, #4
 8009e5a:	d02e      	beq.n	8009eba <ArtNetNode::HandlePoll()+0x72>
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	f8d0 16c8 	ldr.w	r1, [r0, #1736]	; 0x6c8
 8009e62:	f890 46d8 	ldrb.w	r4, [r0, #1752]	; 0x6d8
 8009e66:	f880 26d7 	strb.w	r2, [r0, #1751]	; 0x6d7
 8009e6a:	b979      	cbnz	r1, 8009e8c <ArtNetNode::HandlePoll()+0x44>
 8009e6c:	f8d0 256c 	ldr.w	r2, [r0, #1388]	; 0x56c
 8009e70:	f8c0 26c8 	str.w	r2, [r0, #1736]	; 0x6c8
 8009e74:	b19c      	cbz	r4, 8009e9e <ArtNetNode::HandlePoll()+0x56>
 8009e76:	f890 36e0 	ldrb.w	r3, [r0, #1760]	; 0x6e0
 8009e7a:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	bf28      	it	cs
 8009e82:	4613      	movcs	r3, r2
 8009e84:	f880 36e0 	strb.w	r3, [r0, #1760]	; 0x6e0
 8009e88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009e8a:	e010      	b.n	8009eae <ArtNetNode::HandlePoll()+0x66>
 8009e8c:	2c00      	cmp	r4, #0
 8009e8e:	d1f2      	bne.n	8009e76 <ArtNetNode::HandlePoll()+0x2e>
 8009e90:	f8d0 456c 	ldr.w	r4, [r0, #1388]	; 0x56c
 8009e94:	42a1      	cmp	r1, r4
 8009e96:	d002      	beq.n	8009e9e <ArtNetNode::HandlePoll()+0x56>
 8009e98:	f880 26d8 	strb.w	r2, [r0, #1752]	; 0x6d8
 8009e9c:	e7eb      	b.n	8009e76 <ArtNetNode::HandlePoll()+0x2e>
 8009e9e:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8009ea2:	071b      	lsls	r3, r3, #28
 8009ea4:	f880 26e0 	strb.w	r2, [r0, #1760]	; 0x6e0
 8009ea8:	d5ee      	bpl.n	8009e88 <ArtNetNode::HandlePoll()+0x40>
 8009eaa:	f8d0 356c 	ldr.w	r3, [r0, #1388]	; 0x56c
 8009eae:	f8c0 36c4 	str.w	r3, [r0, #1732]	; 0x6c4
 8009eb2:	2101      	movs	r1, #1
 8009eb4:	bc10      	pop	{r4}
 8009eb6:	f7ff bf01 	b.w	8009cbc <ArtNetNode::SendPollRelply(bool)>
 8009eba:	f880 26d7 	strb.w	r2, [r0, #1751]	; 0x6d7
 8009ebe:	f8c0 26c4 	str.w	r2, [r0, #1732]	; 0x6c4
 8009ec2:	e7f6      	b.n	8009eb2 <ArtNetNode::HandlePoll()+0x6a>

08009ec4 <ArtNetNode::SendTod(unsigned int)>:
 8009ec4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8009ec8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009ecc:	2500      	movs	r5, #0
 8009ece:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	4688      	mov	r8, r1
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 8009edc:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
 8009ee0:	6900      	ldr	r0, [r0, #16]
 8009ee2:	088f      	lsrs	r7, r1, #2
 8009ee4:	6803      	ldr	r3, [r0, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	4798      	blx	r3
 8009eea:	f008 0303 	and.w	r3, r8, #3
 8009eee:	3301      	adds	r3, #1
 8009ef0:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8009ef4:	1c7b      	adds	r3, r7, #1
 8009ef6:	b2ff      	uxtb	r7, r7
 8009ef8:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 8009efc:	f884 50af 	strb.w	r5, [r4, #175]	; 0xaf
 8009f00:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8009f04:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
 8009f08:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 8009f0c:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
 8009f10:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8009f14:	4427      	add	r7, r4
 8009f16:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009f1a:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 8009f1e:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 8009f22:	2324      	movs	r3, #36	; 0x24
 8009f24:	fb03 4308 	mla	r3, r3, r8, r4
 8009f28:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 8009f2c:	b2c6      	uxtb	r6, r0
 8009f2e:	6920      	ldr	r0, [r4, #16]
 8009f30:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 8009f34:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
 8009f38:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 8009f3c:	f884 60b9 	strb.w	r6, [r4, #185]	; 0xb9
 8009f40:	f884 60bb 	strb.w	r6, [r4, #187]	; 0xbb
 8009f44:	6803      	ldr	r3, [r0, #0]
 8009f46:	4641      	mov	r1, r8
 8009f48:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	4798      	blx	r3
 8009f50:	2206      	movs	r2, #6
 8009f52:	f641 1336 	movw	r3, #6454	; 0x1936
 8009f56:	4372      	muls	r2, r6
 8009f58:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8009f5c:	9300      	str	r3, [sp, #0]
 8009f5e:	4629      	mov	r1, r5
 8009f60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009f62:	7920      	ldrb	r0, [r4, #4]
 8009f64:	321c      	adds	r2, #28
 8009f66:	f005 fdbb 	bl	800fae0 <udp_send>
 8009f6a:	b002      	add	sp, #8
 8009f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f70 <ArtNetNode::HandleTodControl()>:
 8009f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f72:	4604      	mov	r4, r0
 8009f74:	4606      	mov	r6, r0
 8009f76:	2500      	movs	r5, #0
 8009f78:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009f7c:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 8009f80:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8009f84:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 8009f88:	42bb      	cmp	r3, r7
 8009f8a:	d125      	bne.n	8009fd8 <ArtNetNode::HandleTodControl()+0x68>
 8009f8c:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 8009f90:	b313      	cbz	r3, 8009fd8 <ArtNetNode::HandleTodControl()+0x68>
 8009f92:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8009f96:	b13b      	cbz	r3, 8009fa8 <ArtNetNode::HandleTodControl()+0x38>
 8009f98:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 8009f9c:	b923      	cbnz	r3, 8009fa8 <ArtNetNode::HandleTodControl()+0x38>
 8009f9e:	68a0      	ldr	r0, [r4, #8]
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	6803      	ldr	r3, [r0, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	4798      	blx	r3
 8009fa8:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d104      	bne.n	8009fba <ArtNetNode::HandleTodControl()+0x4a>
 8009fb0:	6920      	ldr	r0, [r4, #16]
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	6803      	ldr	r3, [r0, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	4798      	blx	r3
 8009fba:	4629      	mov	r1, r5
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f7ff ff81 	bl	8009ec4 <ArtNetNode::SendTod(unsigned int)>
 8009fc2:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8009fc6:	b13b      	cbz	r3, 8009fd8 <ArtNetNode::HandleTodControl()+0x68>
 8009fc8:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 8009fcc:	b923      	cbnz	r3, 8009fd8 <ArtNetNode::HandleTodControl()+0x68>
 8009fce:	68a0      	ldr	r0, [r4, #8]
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	6803      	ldr	r3, [r0, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	4798      	blx	r3
 8009fd8:	3501      	adds	r5, #1
 8009fda:	2d04      	cmp	r5, #4
 8009fdc:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8009fe0:	d1d0      	bne.n	8009f84 <ArtNetNode::HandleTodControl()+0x14>
 8009fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fe4 <ArtNetNode::HandleTodRequest()>:
 8009fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	4606      	mov	r6, r0
 8009fea:	2500      	movs	r5, #0
 8009fec:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009ff0:	f890 70b8 	ldrb.w	r7, [r0, #184]	; 0xb8
 8009ff4:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8009ff8:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 8009ffc:	42bb      	cmp	r3, r7
 8009ffe:	d106      	bne.n	800a00e <ArtNetNode::HandleTodRequest()+0x2a>
 800a000:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 800a004:	b11b      	cbz	r3, 800a00e <ArtNetNode::HandleTodRequest()+0x2a>
 800a006:	4629      	mov	r1, r5
 800a008:	4620      	mov	r0, r4
 800a00a:	f7ff ff5b 	bl	8009ec4 <ArtNetNode::SendTod(unsigned int)>
 800a00e:	3501      	adds	r5, #1
 800a010:	2d04      	cmp	r5, #4
 800a012:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800a016:	d1ef      	bne.n	8009ff8 <ArtNetNode::HandleTodRequest()+0x14>
 800a018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a01a <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>:
 800a01a:	b141      	cbz	r1, 800a02e <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x14>
 800a01c:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
 800a020:	6101      	str	r1, [r0, #16]
 800a022:	f043 0302 	orr.w	r3, r3, #2
 800a026:	f880 266e 	strb.w	r2, [r0, #1646]	; 0x66e
 800a02a:	f880 3095 	strb.w	r3, [r0, #149]	; 0x95
 800a02e:	4770      	bx	lr

0800a030 <ArtNetNode::HandleRdm()>:
 800a030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	4604      	mov	r4, r0
 800a036:	4605      	mov	r5, r0
 800a038:	2600      	movs	r6, #0
 800a03a:	f04f 0b01 	mov.w	fp, #1
 800a03e:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800a042:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 800a046:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800a108 <ArtNetNode::HandleRdm()+0xd8>
 800a04a:	f100 09a0 	add.w	r9, r0, #160	; 0xa0
 800a04e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800a052:	f100 08b8 	add.w	r8, r0, #184	; 0xb8
 800a056:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 800a05a:	42bb      	cmp	r3, r7
 800a05c:	d148      	bne.n	800a0f0 <ArtNetNode::HandleRdm()+0xc0>
 800a05e:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800a062:	2b00      	cmp	r3, #0
 800a064:	d044      	beq.n	800a0f0 <ArtNetNode::HandleRdm()+0xc0>
 800a066:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800a06a:	b9c3      	cbnz	r3, 800a09e <ArtNetNode::HandleRdm()+0x6e>
 800a06c:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800a070:	2b01      	cmp	r3, #1
 800a072:	d10c      	bne.n	800a08e <ArtNetNode::HandleRdm()+0x5e>
 800a074:	69e0      	ldr	r0, [r4, #28]
 800a076:	b150      	cbz	r0, 800a08e <ArtNetNode::HandleRdm()+0x5e>
 800a078:	6803      	ldr	r3, [r0, #0]
 800a07a:	4631      	mov	r1, r6
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	4798      	blx	r3
 800a080:	f010 0f89 	tst.w	r0, #137	; 0x89
 800a084:	bf14      	ite	ne
 800a086:	2301      	movne	r3, #1
 800a088:	2300      	moveq	r3, #0
 800a08a:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 800a08e:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800a092:	b123      	cbz	r3, 800a09e <ArtNetNode::HandleRdm()+0x6e>
 800a094:	68a0      	ldr	r0, [r4, #8]
 800a096:	4631      	mov	r1, r6
 800a098:	6803      	ldr	r3, [r0, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	4798      	blx	r3
 800a09e:	6920      	ldr	r0, [r4, #16]
 800a0a0:	4642      	mov	r2, r8
 800a0a2:	6803      	ldr	r3, [r0, #0]
 800a0a4:	4631      	mov	r1, r6
 800a0a6:	695b      	ldr	r3, [r3, #20]
 800a0a8:	4798      	blx	r3
 800a0aa:	b348      	cbz	r0, 800a100 <ArtNetNode::HandleRdm()+0xd0>
 800a0ac:	4641      	mov	r1, r8
 800a0ae:	f884 b0ac 	strb.w	fp, [r4, #172]	; 0xac
 800a0b2:	7882      	ldrb	r2, [r0, #2]
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	1c53      	adds	r3, r2, #1
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	d304      	bcc.n	800a0c6 <ArtNetNode::HandleRdm()+0x96>
 800a0bc:	f810 cb01 	ldrb.w	ip, [r0], #1
 800a0c0:	f801 cb01 	strb.w	ip, [r1], #1
 800a0c4:	e7f8      	b.n	800a0b8 <ArtNetNode::HandleRdm()+0x88>
 800a0c6:	f641 1336 	movw	r3, #6454	; 0x1936
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	9300      	str	r3, [sp, #0]
 800a0ce:	7920      	ldrb	r0, [r4, #4]
 800a0d0:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800a0d4:	3219      	adds	r2, #25
 800a0d6:	f005 fd03 	bl	800fae0 <udp_send>
 800a0da:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800a0de:	b13b      	cbz	r3, 800a0f0 <ArtNetNode::HandleRdm()+0xc0>
 800a0e0:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800a0e4:	b923      	cbnz	r3, 800a0f0 <ArtNetNode::HandleRdm()+0xc0>
 800a0e6:	68a0      	ldr	r0, [r4, #8]
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	6803      	ldr	r3, [r0, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	4798      	blx	r3
 800a0f0:	3601      	adds	r6, #1
 800a0f2:	2e04      	cmp	r6, #4
 800a0f4:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800a0f8:	d1ad      	bne.n	800a056 <ArtNetNode::HandleRdm()+0x26>
 800a0fa:	b003      	add	sp, #12
 800a0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a100:	4650      	mov	r0, sl
 800a102:	f009 f897 	bl	8013234 <printf>
 800a106:	e7e8      	b.n	800a0da <ArtNetNode::HandleRdm()+0xaa>
 800a108:	08015452 	stmdaeq	r1, {r1, r4, r6, sl, ip, lr}

0800a10c <ArtNetNode::HandleSync()>:
 800a10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	2600      	movs	r6, #0
 800a112:	2301      	movs	r3, #1
 800a114:	4604      	mov	r4, r0
 800a116:	4605      	mov	r5, r0
 800a118:	46b1      	mov	r9, r6
 800a11a:	f880 36d9 	strb.w	r3, [r0, #1753]	; 0x6d9
 800a11e:	4b1e      	ldr	r3, [pc, #120]	; (800a198 <ArtNetNode::HandleSync()+0x8c>)
 800a120:	4f1e      	ldr	r7, [pc, #120]	; (800a19c <ArtNetNode::HandleSync()+0x90>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800a1a0 <ArtNetNode::HandleSync()+0x94>
 800a128:	f8c0 36d0 	str.w	r3, [r0, #1744]	; 0x6d0
 800a12c:	7823      	ldrb	r3, [r4, #0]
 800a12e:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800a132:	d22f      	bcs.n	800a194 <ArtNetNode::HandleSync()+0x88>
 800a134:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800a138:	bb3b      	cbnz	r3, 800a18a <ArtNetNode::HandleSync()+0x7e>
 800a13a:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800a13e:	b323      	cbz	r3, 800a18a <ArtNetNode::HandleSync()+0x7e>
 800a140:	f8d8 3000 	ldr.w	r3, [r8]
 800a144:	68a0      	ldr	r0, [r4, #8]
 800a146:	07da      	lsls	r2, r3, #31
 800a148:	bf5c      	itt	pl
 800a14a:	2301      	movpl	r3, #1
 800a14c:	f8c8 3000 	strpl.w	r3, [r8]
 800a150:	6803      	ldr	r3, [r0, #0]
 800a152:	4631      	mov	r1, r6
 800a154:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800a158:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 800a15c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 800a160:	47d0      	blx	sl
 800a162:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800a166:	b93b      	cbnz	r3, 800a178 <ArtNetNode::HandleSync()+0x6c>
 800a168:	68a0      	ldr	r0, [r4, #8]
 800a16a:	4631      	mov	r1, r6
 800a16c:	6803      	ldr	r3, [r0, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	4798      	blx	r3
 800a172:	2301      	movs	r3, #1
 800a174:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 800a178:	f8d8 3000 	ldr.w	r3, [r8]
 800a17c:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 800a180:	07db      	lsls	r3, r3, #31
 800a182:	bf5c      	itt	pl
 800a184:	2301      	movpl	r3, #1
 800a186:	f8c8 3000 	strpl.w	r3, [r8]
 800a18a:	3601      	adds	r6, #1
 800a18c:	f207 6704 	addw	r7, r7, #1540	; 0x604
 800a190:	3524      	adds	r5, #36	; 0x24
 800a192:	e7cb      	b.n	800a12c <ArtNetNode::HandleSync()+0x20>
 800a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a198:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800a19c:	20000100 	andcs	r0, r0, r0, lsl #2
 800a1a0:	200000fc 	strdcs	r0, [r0], -ip

0800a1a4 <ArtNetNode::HandleTimeCode()>:
 800a1a4:	4601      	mov	r1, r0
 800a1a6:	68c0      	ldr	r0, [r0, #12]
 800a1a8:	31ae      	adds	r1, #174	; 0xae
 800a1aa:	6803      	ldr	r3, [r0, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	4718      	bx	r3

0800a1b0 <ArtNetNode::HandleTimeSync()>:
 800a1b0:	b500      	push	{lr}
 800a1b2:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800a1b6:	b08b      	sub	sp, #44	; 0x2c
 800a1b8:	9301      	str	r3, [sp, #4]
 800a1ba:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 800a1be:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
 800a1c2:	9302      	str	r3, [sp, #8]
 800a1c4:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800a1c8:	a901      	add	r1, sp, #4
 800a1ca:	9303      	str	r3, [sp, #12]
 800a1cc:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
 800a1d0:	9304      	str	r3, [sp, #16]
 800a1d2:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
 800a1d6:	9305      	str	r3, [sp, #20]
 800a1d8:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800a1dc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a1e0:	9306      	str	r3, [sp, #24]
 800a1e2:	4b03      	ldr	r3, [pc, #12]	; (800a1f0 <ArtNetNode::HandleTimeSync()+0x40>)
 800a1e4:	6818      	ldr	r0, [r3, #0]
 800a1e6:	f008 fce9 	bl	8012bbc <Hardware::SetTime(tm const*)>
 800a1ea:	b00b      	add	sp, #44	; 0x2c
 800a1ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1f0:	2000aef4 	strdcs	sl, [r0], -r4

0800a1f4 <ArtNetNode::Print()>:
 800a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f8:	4605      	mov	r5, r0
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	b08b      	sub	sp, #44	; 0x2c
 800a1fe:	f815 2b42 	ldrb.w	r2, [r5], #66
 800a202:	2104      	movs	r1, #4
 800a204:	4853      	ldr	r0, [pc, #332]	; (800a354 <ArtNetNode::Print()+0x160>)
 800a206:	f009 f815 	bl	8013234 <printf>
 800a20a:	4b53      	ldr	r3, [pc, #332]	; (800a358 <ArtNetNode::Print()+0x164>)
 800a20c:	4853      	ldr	r0, [pc, #332]	; (800a35c <ArtNetNode::Print()+0x168>)
 800a20e:	7819      	ldrb	r1, [r3, #0]
 800a210:	785a      	ldrb	r2, [r3, #1]
 800a212:	f009 f80f 	bl	8013234 <printf>
 800a216:	4629      	mov	r1, r5
 800a218:	4851      	ldr	r0, [pc, #324]	; (800a360 <ArtNetNode::Print()+0x16c>)
 800a21a:	f009 f80b 	bl	8013234 <printf>
 800a21e:	4851      	ldr	r0, [pc, #324]	; (800a364 <ArtNetNode::Print()+0x170>)
 800a220:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a224:	f009 f806 	bl	8013234 <printf>
 800a228:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d044      	beq.n	800a2ba <ArtNetNode::Print()+0xc6>
 800a230:	484d      	ldr	r0, [pc, #308]	; (800a368 <ArtNetNode::Print()+0x174>)
 800a232:	f008 ffff 	bl	8013234 <printf>
 800a236:	4626      	mov	r6, r4
 800a238:	2500      	movs	r5, #0
 800a23a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800a36c <ArtNetNode::Print()+0x178>
 800a23e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800a370 <ArtNetNode::Print()+0x17c>
 800a242:	7823      	ldrb	r3, [r4, #0]
 800a244:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800a248:	d237      	bcs.n	800a2ba <ArtNetNode::Print()+0xc6>
 800a24a:	2301      	movs	r3, #1
 800a24c:	4629      	mov	r1, r5
 800a24e:	4620      	mov	r0, r4
 800a250:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800a254:	f7fe feb0 	bl	8008fb8 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800a258:	b360      	cbz	r0, 800a2b4 <ArtNetNode::Print()+0xc0>
 800a25a:	eb04 0395 	add.w	r3, r4, r5, lsr #2
 800a25e:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
 800a262:	f893 b03f 	ldrb.w	fp, [r3, #63]	; 0x3f
 800a266:	4629      	mov	r1, r5
 800a268:	2301      	movs	r3, #1
 800a26a:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800a26e:	4620      	mov	r0, r4
 800a270:	f7fe fe8c 	bl	8008f8c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a274:	f8d6 06fc 	ldr.w	r0, [r6, #1788]	; 0x6fc
 800a278:	493e      	ldr	r1, [pc, #248]	; (800a374 <ArtNetNode::Print()+0x180>)
 800a27a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a27e:	2800      	cmp	r0, #0
 800a280:	bf18      	it	ne
 800a282:	4641      	movne	r1, r8
 800a284:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800a288:	08af      	lsrs	r7, r5, #2
 800a28a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a28e:	e9cd b300 	strd	fp, r3, [sp]
 800a292:	463a      	mov	r2, r7
 800a294:	4653      	mov	r3, sl
 800a296:	4629      	mov	r1, r5
 800a298:	4648      	mov	r0, r9
 800a29a:	f008 ffcb 	bl	8013234 <printf>
 800a29e:	f8d6 1700 	ldr.w	r1, [r6, #1792]	; 0x700
 800a2a2:	4a35      	ldr	r2, [pc, #212]	; (800a378 <ArtNetNode::Print()+0x184>)
 800a2a4:	4b35      	ldr	r3, [pc, #212]	; (800a37c <ArtNetNode::Print()+0x188>)
 800a2a6:	4836      	ldr	r0, [pc, #216]	; (800a380 <ArtNetNode::Print()+0x18c>)
 800a2a8:	2900      	cmp	r1, #0
 800a2aa:	bf0c      	ite	eq
 800a2ac:	4611      	moveq	r1, r2
 800a2ae:	4619      	movne	r1, r3
 800a2b0:	f008 ffc0 	bl	8013234 <printf>
 800a2b4:	3501      	adds	r5, #1
 800a2b6:	3624      	adds	r6, #36	; 0x24
 800a2b8:	e7c3      	b.n	800a242 <ArtNetNode::Print()+0x4e>
 800a2ba:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d045      	beq.n	800a34e <ArtNetNode::Print()+0x15a>
 800a2c2:	4830      	ldr	r0, [pc, #192]	; (800a384 <ArtNetNode::Print()+0x190>)
 800a2c4:	f008 ffb6 	bl	8013234 <printf>
 800a2c8:	f04f 0b00 	mov.w	fp, #0
 800a2cc:	4e2e      	ldr	r6, [pc, #184]	; (800a388 <ArtNetNode::Print()+0x194>)
 800a2ce:	4f2f      	ldr	r7, [pc, #188]	; (800a38c <ArtNetNode::Print()+0x198>)
 800a2d0:	7823      	ldrb	r3, [r4, #0]
 800a2d2:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
 800a2d6:	d23a      	bcs.n	800a34e <ArtNetNode::Print()+0x15a>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4659      	mov	r1, fp
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800a2e2:	f7fe fe69 	bl	8008fb8 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800a2e6:	b378      	cbz	r0, 800a348 <ArtNetNode::Print()+0x154>
 800a2e8:	eb04 039b 	add.w	r3, r4, fp, lsr #2
 800a2ec:	f893 903e 	ldrb.w	r9, [r3, #62]	; 0x3e
 800a2f0:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
 800a2f4:	eb04 130b 	add.w	r3, r4, fp, lsl #4
 800a2f8:	f8d3 577c 	ldr.w	r5, [r3, #1916]	; 0x77c
 800a2fc:	ea4f 089b 	mov.w	r8, fp, lsr #2
 800a300:	b925      	cbnz	r5, 800a30c <ArtNetNode::Print()+0x118>
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	699a      	ldr	r2, [r3, #24]
 800a306:	691d      	ldr	r5, [r3, #16]
 800a308:	ea65 0502 	orn	r5, r5, r2
 800a30c:	2300      	movs	r3, #0
 800a30e:	4659      	mov	r1, fp
 800a310:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800a314:	4620      	mov	r0, r4
 800a316:	f7fe fe39 	bl	8008f8c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a31a:	0e2b      	lsrs	r3, r5, #24
 800a31c:	9306      	str	r3, [sp, #24]
 800a31e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800a322:	9305      	str	r3, [sp, #20]
 800a324:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a328:	9304      	str	r3, [sp, #16]
 800a32a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a32e:	b2ed      	uxtb	r5, r5
 800a330:	9302      	str	r3, [sp, #8]
 800a332:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a336:	4642      	mov	r2, r8
 800a338:	e9cd a300 	strd	sl, r3, [sp]
 800a33c:	4659      	mov	r1, fp
 800a33e:	464b      	mov	r3, r9
 800a340:	4630      	mov	r0, r6
 800a342:	9503      	str	r5, [sp, #12]
 800a344:	f008 ff76 	bl	8013234 <printf>
 800a348:	f10b 0b01 	add.w	fp, fp, #1
 800a34c:	e7c0      	b.n	800a2d0 <ArtNetNode::Print()+0xdc>
 800a34e:	b00b      	add	sp, #44	; 0x2c
 800a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a354:	08015478 	stmdaeq	r1, {r3, r4, r5, r6, sl, ip, lr}
 800a358:	080156d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, sl, ip, lr}
 800a35c:	08015486 	stmdaeq	r1, {r1, r2, r7, sl, ip, lr}
 800a360:	0801549b 	stmdaeq	r1, {r0, r1, r3, r4, r7, sl, ip, lr}
 800a364:	080154ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, sl, ip, lr}
 800a368:	080154bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, sl, ip, lr}
 800a36c:	08015467 	stmdaeq	r1, {r0, r1, r2, r5, r6, sl, ip, lr}
 800a370:	080154c8 	stmdaeq	r1, {r3, r6, r7, sl, ip, lr}
 800a374:	08015463 	stmdaeq	r1, {r0, r1, r5, r6, sl, ip, lr}
 800a378:	0801546b 	stmdaeq	r1, {r0, r1, r3, r5, r6, sl, ip, lr}
 800a37c:	08015473 	stmdaeq	r1, {r0, r1, r4, r5, r6, sl, ip, lr}
 800a380:	080154f0 	stmdaeq	r1, {r4, r5, r6, r7, sl, ip, lr}
 800a384:	080154f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, sl, ip, lr}
 800a388:	080154ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, sl, ip, lr}
 800a38c:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800a390 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800a390:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a392:	88c5      	ldrh	r5, [r0, #6]
 800a394:	8886      	ldrh	r6, [r0, #4]
 800a396:	42b5      	cmp	r5, r6
 800a398:	d216      	bcs.n	800a3c8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800a39a:	4604      	mov	r4, r0
 800a39c:	6800      	ldr	r0, [r0, #0]
 800a39e:	4428      	add	r0, r5
 800a3a0:	1b75      	subs	r5, r6, r5
 800a3a2:	7a26      	ldrb	r6, [r4, #8]
 800a3a4:	b923      	cbnz	r3, 800a3b0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800a3a6:	b926      	cbnz	r6, 800a3b2 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800a3a8:	9200      	str	r2, [sp, #0]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4a09      	ldr	r2, [pc, #36]	; (800a3d4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800a3ae:	e003      	b.n	800a3b8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800a3b0:	b166      	cbz	r6, 800a3cc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	9200      	str	r2, [sp, #0]
 800a3b6:	4a08      	ldr	r2, [pc, #32]	; (800a3d8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	f008 ff63 	bl	8013284 <snprintf>
 800a3be:	4285      	cmp	r5, r0
 800a3c0:	bfa2      	ittt	ge
 800a3c2:	88e3      	ldrhge	r3, [r4, #6]
 800a3c4:	181b      	addge	r3, r3, r0
 800a3c6:	80e3      	strhge	r3, [r4, #6]
 800a3c8:	b002      	add	sp, #8
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}
 800a3cc:	9200      	str	r2, [sp, #0]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	4a02      	ldr	r2, [pc, #8]	; (800a3dc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a3d2:	e7f1      	b.n	800a3b8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800a3d4:	0801553b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, ip, lr}
 800a3d8:	08015532 	stmdaeq	r1, {r1, r4, r5, r8, sl, ip, lr}
 800a3dc:	0801553c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr}

0800a3e0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800a3e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3e2:	88c5      	ldrh	r5, [r0, #6]
 800a3e4:	8886      	ldrh	r6, [r0, #4]
 800a3e6:	42b5      	cmp	r5, r6
 800a3e8:	d216      	bcs.n	800a418 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	6800      	ldr	r0, [r0, #0]
 800a3ee:	4428      	add	r0, r5
 800a3f0:	1b75      	subs	r5, r6, r5
 800a3f2:	7a26      	ldrb	r6, [r4, #8]
 800a3f4:	b923      	cbnz	r3, 800a400 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800a3f6:	b926      	cbnz	r6, 800a402 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800a3f8:	9200      	str	r2, [sp, #0]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4a09      	ldr	r2, [pc, #36]	; (800a424 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800a3fe:	e003      	b.n	800a408 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a400:	b166      	cbz	r6, 800a41c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800a402:	460b      	mov	r3, r1
 800a404:	9200      	str	r2, [sp, #0]
 800a406:	4a08      	ldr	r2, [pc, #32]	; (800a428 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800a408:	4629      	mov	r1, r5
 800a40a:	f008 ff3b 	bl	8013284 <snprintf>
 800a40e:	4285      	cmp	r5, r0
 800a410:	bfa2      	ittt	ge
 800a412:	88e3      	ldrhge	r3, [r4, #6]
 800a414:	181b      	addge	r3, r3, r0
 800a416:	80e3      	strhge	r3, [r4, #6]
 800a418:	b002      	add	sp, #8
 800a41a:	bd70      	pop	{r4, r5, r6, pc}
 800a41c:	9200      	str	r2, [sp, #0]
 800a41e:	460b      	mov	r3, r1
 800a420:	4a02      	ldr	r2, [pc, #8]	; (800a42c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a422:	e7f1      	b.n	800a408 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a424:	0801554e 	stmdaeq	r1, {r1, r2, r3, r6, r8, sl, ip, lr}
 800a428:	08015543 	stmdaeq	r1, {r0, r1, r6, r8, sl, ip, lr}
 800a42c:	0801554f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, sl, ip, lr}

0800a430 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800a430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a432:	460b      	mov	r3, r1
 800a434:	8885      	ldrh	r5, [r0, #4]
 800a436:	88c1      	ldrh	r1, [r0, #6]
 800a438:	42a9      	cmp	r1, r5
 800a43a:	d214      	bcs.n	800a466 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800a43c:	4604      	mov	r4, r0
 800a43e:	6800      	ldr	r0, [r0, #0]
 800a440:	1a6d      	subs	r5, r5, r1
 800a442:	4408      	add	r0, r1
 800a444:	7a21      	ldrb	r1, [r4, #8]
 800a446:	b91a      	cbnz	r2, 800a450 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800a448:	b919      	cbnz	r1, 800a452 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800a44a:	4a0a      	ldr	r2, [pc, #40]	; (800a474 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800a44c:	9100      	str	r1, [sp, #0]
 800a44e:	e002      	b.n	800a456 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800a450:	b159      	cbz	r1, 800a46a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800a452:	9200      	str	r2, [sp, #0]
 800a454:	4a08      	ldr	r2, [pc, #32]	; (800a478 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800a456:	4629      	mov	r1, r5
 800a458:	f008 ff14 	bl	8013284 <snprintf>
 800a45c:	4285      	cmp	r5, r0
 800a45e:	bfa2      	ittt	ge
 800a460:	88e3      	ldrhge	r3, [r4, #6]
 800a462:	181b      	addge	r3, r3, r0
 800a464:	80e3      	strhge	r3, [r4, #6]
 800a466:	b003      	add	sp, #12
 800a468:	bd30      	pop	{r4, r5, pc}
 800a46a:	2201      	movs	r2, #1
 800a46c:	9200      	str	r2, [sp, #0]
 800a46e:	4a03      	ldr	r2, [pc, #12]	; (800a47c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800a470:	e7f1      	b.n	800a456 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800a472:	bf00      	nop
 800a474:	0801553b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, ip, lr}
 800a478:	08015532 	stmdaeq	r1, {r1, r4, r5, r8, sl, ip, lr}
 800a47c:	0801553c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr}

0800a480 <strncpy.isra.0>:
 800a480:	1e4b      	subs	r3, r1, #1
 800a482:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a486:	b909      	cbnz	r1, 800a48c <strncpy.isra.0+0xc>
 800a488:	f008 bcb2 	b.w	8012df0 <memset>
 800a48c:	3a01      	subs	r2, #1
 800a48e:	f800 1b01 	strb.w	r1, [r0], #1
 800a492:	d1f6      	bne.n	800a482 <strncpy.isra.0+0x2>
 800a494:	4770      	bx	lr
	...

0800a498 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800a498:	b510      	push	{r4, lr}
 800a49a:	2287      	movs	r2, #135	; 0x87
 800a49c:	4604      	mov	r4, r0
 800a49e:	f840 1b04 	str.w	r1, [r0], #4
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	f008 fca4 	bl	8012df0 <memset>
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800a4ae:	f240 3302 	movw	r3, #770	; 0x302
 800a4b2:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800a4b6:	2304      	movs	r3, #4
 800a4b8:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800a4bc:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x44>)
 800a4be:	4620      	mov	r0, r4
 800a4c0:	785a      	ldrb	r2, [r3, #1]
 800a4c2:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 800a4cc:	230a      	movs	r3, #10
 800a4ce:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800a4d2:	23ff      	movs	r3, #255	; 0xff
 800a4d4:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800a4d8:	bd10      	pop	{r4, pc}
 800a4da:	bf00      	nop
 800a4dc:	080156d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, sl, ip, lr}

0800a4e0 <ArtNetParams::Load()>:
 800a4e0:	b508      	push	{r3, lr}
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	4601      	mov	r1, r0
 800a4e6:	6043      	str	r3, [r0, #4]
 800a4e8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800a4ec:	6800      	ldr	r0, [r0, #0]
 800a4ee:	b120      	cbz	r0, 800a4fa <ArtNetParams::Load()+0x1a>
 800a4f0:	6803      	ldr	r3, [r0, #0]
 800a4f2:	3104      	adds	r1, #4
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	4798      	blx	r3
 800a4f8:	2001      	movs	r0, #1
 800a4fa:	bd08      	pop	{r3, pc}

0800a4fc <ArtNetParams::Load(char const*, unsigned int)>:
 800a4fc:	6803      	ldr	r3, [r0, #0]
 800a4fe:	b1e3      	cbz	r3, 800a53a <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800a500:	2300      	movs	r3, #0
 800a502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a504:	460d      	mov	r5, r1
 800a506:	4616      	mov	r6, r2
 800a508:	4604      	mov	r4, r0
 800a50a:	6043      	str	r3, [r0, #4]
 800a50c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800a510:	4602      	mov	r2, r0
 800a512:	490a      	ldr	r1, [pc, #40]	; (800a53c <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800a514:	4668      	mov	r0, sp
 800a516:	f007 fe31 	bl	801217c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800a51a:	4632      	mov	r2, r6
 800a51c:	4629      	mov	r1, r5
 800a51e:	4668      	mov	r0, sp
 800a520:	f007 fe30 	bl	8012184 <ReadConfigFile::Read(char const*, unsigned int)>
 800a524:	4621      	mov	r1, r4
 800a526:	f851 0b04 	ldr.w	r0, [r1], #4
 800a52a:	6803      	ldr	r3, [r0, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	4798      	blx	r3
 800a530:	4668      	mov	r0, sp
 800a532:	f007 fe26 	bl	8012182 <ReadConfigFile::~ReadConfigFile()>
 800a536:	b002      	add	sp, #8
 800a538:	bd70      	pop	{r4, r5, r6, pc}
 800a53a:	4770      	bx	lr
 800a53c:	0800a905 	stmdaeq	r0, {r0, r2, r8, fp, sp, pc}

0800a540 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800a540:	6843      	ldr	r3, [r0, #4]
 800a542:	b111      	cbz	r1, 800a54a <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800a544:	4313      	orrs	r3, r2
 800a546:	6043      	str	r3, [r0, #4]
 800a548:	4770      	bx	lr
 800a54a:	ea23 0302 	bic.w	r3, r3, r2
 800a54e:	e7fa      	b.n	800a546 <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800a550 <ArtNetParams::callbackFunction(char const*)>:
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a554:	460e      	mov	r6, r1
 800a556:	b0a5      	sub	sp, #148	; 0x94
 800a558:	4604      	mov	r4, r0
 800a55a:	49a7      	ldr	r1, [pc, #668]	; (800a7f8 <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 800a55c:	4630      	mov	r0, r6
 800a55e:	f10d 0205 	add.w	r2, sp, #5
 800a562:	f007 fee5 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a566:	b930      	cbnz	r0, 800a576 <ArtNetParams::callbackFunction(char const*)+0x26>
 800a568:	2220      	movs	r2, #32
 800a56a:	4620      	mov	r0, r4
 800a56c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800a570:	f7ff ffe6 	bl	800a540 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800a574:	e010      	b.n	800a598 <ArtNetParams::callbackFunction(char const*)+0x48>
 800a576:	2311      	movs	r3, #17
 800a578:	4630      	mov	r0, r6
 800a57a:	9303      	str	r3, [sp, #12]
 800a57c:	499f      	ldr	r1, [pc, #636]	; (800a7fc <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 800a57e:	ab03      	add	r3, sp, #12
 800a580:	f104 0210 	add.w	r2, r4, #16
 800a584:	f007 fe32 	bl	80121ec <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a588:	b948      	cbnz	r0, 800a59e <ArtNetParams::callbackFunction(char const*)+0x4e>
 800a58a:	9b03      	ldr	r3, [sp, #12]
 800a58c:	4423      	add	r3, r4
 800a58e:	7418      	strb	r0, [r3, #16]
 800a590:	6863      	ldr	r3, [r4, #4]
 800a592:	f043 0302 	orr.w	r3, r3, #2
 800a596:	6063      	str	r3, [r4, #4]
 800a598:	b025      	add	sp, #148	; 0x94
 800a59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59e:	233f      	movs	r3, #63	; 0x3f
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	9303      	str	r3, [sp, #12]
 800a5a4:	4996      	ldr	r1, [pc, #600]	; (800a800 <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 800a5a6:	ab03      	add	r3, sp, #12
 800a5a8:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800a5ac:	f007 fe1e 	bl	80121ec <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a5b0:	b938      	cbnz	r0, 800a5c2 <ArtNetParams::callbackFunction(char const*)+0x72>
 800a5b2:	9b03      	ldr	r3, [sp, #12]
 800a5b4:	4423      	add	r3, r4
 800a5b6:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800a5ba:	6863      	ldr	r3, [r4, #4]
 800a5bc:	f043 0301 	orr.w	r3, r3, #1
 800a5c0:	e7e9      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	498f      	ldr	r1, [pc, #572]	; (800a804 <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800a5c6:	f10d 0206 	add.w	r2, sp, #6
 800a5ca:	f007 fe28 	bl	801221e <Sscan::HexUint16(char const*, char const*, unsigned short&)>
 800a5ce:	b940      	cbnz	r0, 800a5e2 <ArtNetParams::callbackFunction(char const*)+0x92>
 800a5d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a5d4:	ba5b      	rev16	r3, r3
 800a5d6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800a5da:	6863      	ldr	r3, [r4, #4]
 800a5dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a5e0:	e7d9      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	4988      	ldr	r1, [pc, #544]	; (800a808 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800a5e6:	f10d 0205 	add.w	r2, sp, #5
 800a5ea:	f007 fea1 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a5ee:	b958      	cbnz	r0, 800a608 <ArtNetParams::callbackFunction(char const*)+0xb8>
 800a5f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a5f4:	6863      	ldr	r3, [r4, #4]
 800a5f6:	2a0a      	cmp	r2, #10
 800a5f8:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 800a5fc:	bf14      	ite	ne
 800a5fe:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800a602:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 800a606:	e7c6      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a608:	4630      	mov	r0, r6
 800a60a:	4980      	ldr	r1, [pc, #512]	; (800a80c <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800a60c:	f10d 0205 	add.w	r2, sp, #5
 800a610:	f007 fe8e 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a614:	b910      	cbnz	r0, 800a61c <ArtNetParams::callbackFunction(char const*)+0xcc>
 800a616:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a61a:	e7a6      	b.n	800a56a <ArtNetParams::callbackFunction(char const*)+0x1a>
 800a61c:	4630      	mov	r0, r6
 800a61e:	497c      	ldr	r1, [pc, #496]	; (800a810 <ArtNetParams::callbackFunction(char const*)+0x2c0>)
 800a620:	f10d 0205 	add.w	r2, sp, #5
 800a624:	f007 fe84 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a628:	b950      	cbnz	r0, 800a640 <ArtNetParams::callbackFunction(char const*)+0xf0>
 800a62a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a62e:	6863      	ldr	r3, [r4, #4]
 800a630:	7222      	strb	r2, [r4, #8]
 800a632:	b112      	cbz	r2, 800a63a <ArtNetParams::callbackFunction(char const*)+0xea>
 800a634:	f043 0304 	orr.w	r3, r3, #4
 800a638:	e7ad      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a63a:	f023 0304 	bic.w	r3, r3, #4
 800a63e:	e7aa      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a640:	4630      	mov	r0, r6
 800a642:	4974      	ldr	r1, [pc, #464]	; (800a814 <ArtNetParams::callbackFunction(char const*)+0x2c4>)
 800a644:	f10d 0205 	add.w	r2, sp, #5
 800a648:	f007 fe72 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a64c:	b950      	cbnz	r0, 800a664 <ArtNetParams::callbackFunction(char const*)+0x114>
 800a64e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a652:	6863      	ldr	r3, [r4, #4]
 800a654:	7262      	strb	r2, [r4, #9]
 800a656:	b112      	cbz	r2, 800a65e <ArtNetParams::callbackFunction(char const*)+0x10e>
 800a658:	f043 0308 	orr.w	r3, r3, #8
 800a65c:	e79b      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a65e:	f023 0308 	bic.w	r3, r3, #8
 800a662:	e798      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a664:	2303      	movs	r3, #3
 800a666:	4630      	mov	r0, r6
 800a668:	9303      	str	r3, [sp, #12]
 800a66a:	496b      	ldr	r1, [pc, #428]	; (800a818 <ArtNetParams::callbackFunction(char const*)+0x2c8>)
 800a66c:	ab03      	add	r3, sp, #12
 800a66e:	aa04      	add	r2, sp, #16
 800a670:	f007 fdbc 	bl	80121ec <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a674:	b9f0      	cbnz	r0, 800a6b4 <ArtNetParams::callbackFunction(char const*)+0x164>
 800a676:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800a67a:	6863      	ldr	r3, [r4, #4]
 800a67c:	f042 0220 	orr.w	r2, r2, #32
 800a680:	2a6c      	cmp	r2, #108	; 0x6c
 800a682:	d111      	bne.n	800a6a8 <ArtNetParams::callbackFunction(char const*)+0x158>
 800a684:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800a688:	f042 0220 	orr.w	r2, r2, #32
 800a68c:	2a74      	cmp	r2, #116	; 0x74
 800a68e:	d10b      	bne.n	800a6a8 <ArtNetParams::callbackFunction(char const*)+0x158>
 800a690:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800a694:	f042 0220 	orr.w	r2, r2, #32
 800a698:	2a70      	cmp	r2, #112	; 0x70
 800a69a:	d105      	bne.n	800a6a8 <ArtNetParams::callbackFunction(char const*)+0x158>
 800a69c:	2201      	movs	r2, #1
 800a69e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6a2:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800a6a6:	e776      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a6ae:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800a6b2:	e770      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	9303      	str	r3, [sp, #12]
 800a6ba:	4958      	ldr	r1, [pc, #352]	; (800a81c <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800a6bc:	ab03      	add	r3, sp, #12
 800a6be:	aa04      	add	r2, sp, #16
 800a6c0:	f007 fd94 	bl	80121ec <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a6c4:	b9c0      	cbnz	r0, 800a6f8 <ArtNetParams::callbackFunction(char const*)+0x1a8>
 800a6c6:	2304      	movs	r3, #4
 800a6c8:	4a55      	ldr	r2, [pc, #340]	; (800a820 <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800a6ca:	a904      	add	r1, sp, #16
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	d30c      	bcc.n	800a6ea <ArtNetParams::callbackFunction(char const*)+0x19a>
 800a6d0:	f811 5b01 	ldrb.w	r5, [r1], #1
 800a6d4:	f812 0b01 	ldrb.w	r0, [r2], #1
 800a6d8:	4285      	cmp	r5, r0
 800a6da:	d0f7      	beq.n	800a6cc <ArtNetParams::callbackFunction(char const*)+0x17c>
 800a6dc:	2200      	movs	r2, #0
 800a6de:	6863      	ldr	r3, [r4, #4]
 800a6e0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
 800a6e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a6e8:	e755      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 800a6f0:	6863      	ldr	r3, [r4, #4]
 800a6f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a6f6:	e74e      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a6f8:	2500      	movs	r5, #0
 800a6fa:	4f4a      	ldr	r7, [pc, #296]	; (800a824 <ArtNetParams::callbackFunction(char const*)+0x2d4>)
 800a6fc:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800a828 <ArtNetParams::callbackFunction(char const*)+0x2d8>
 800a700:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a82c <ArtNetParams::callbackFunction(char const*)+0x2dc>
 800a704:	f8df a128 	ldr.w	sl, [pc, #296]	; 800a830 <ArtNetParams::callbackFunction(char const*)+0x2e0>
 800a708:	4639      	mov	r1, r7
 800a70a:	4630      	mov	r0, r6
 800a70c:	f10d 0205 	add.w	r2, sp, #5
 800a710:	f007 fe0e 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a714:	b9a0      	cbnz	r0, 800a740 <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800a716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a71a:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800a71e:	6862      	ldr	r2, [r4, #4]
 800a720:	280f      	cmp	r0, #15
 800a722:	fa03 f305 	lsl.w	r3, r3, r5
 800a726:	eb04 0105 	add.w	r1, r4, r5
 800a72a:	d803      	bhi.n	800a734 <ArtNetParams::callbackFunction(char const*)+0x1e4>
 800a72c:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800a730:	4313      	orrs	r3, r2
 800a732:	e730      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a734:	3501      	adds	r5, #1
 800a736:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800a73a:	ea22 0303 	bic.w	r3, r2, r3
 800a73e:	e72a      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a740:	f04f 0b12 	mov.w	fp, #18
 800a744:	2303      	movs	r3, #3
 800a746:	fb0b fb05 	mul.w	fp, fp, r5
 800a74a:	9303      	str	r3, [sp, #12]
 800a74c:	4630      	mov	r0, r6
 800a74e:	ab03      	add	r3, sp, #12
 800a750:	aa04      	add	r2, sp, #16
 800a752:	eb08 010b 	add.w	r1, r8, fp
 800a756:	f007 fd49 	bl	80121ec <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a75a:	b9f0      	cbnz	r0, 800a79a <ArtNetParams::callbackFunction(char const*)+0x24a>
 800a75c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a760:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800a764:	40ab      	lsls	r3, r5
 800a766:	f041 0120 	orr.w	r1, r1, #32
 800a76a:	296c      	cmp	r1, #108	; 0x6c
 800a76c:	6862      	ldr	r2, [r4, #4]
 800a76e:	4425      	add	r5, r4
 800a770:	d10f      	bne.n	800a792 <ArtNetParams::callbackFunction(char const*)+0x242>
 800a772:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800a776:	f041 0120 	orr.w	r1, r1, #32
 800a77a:	2974      	cmp	r1, #116	; 0x74
 800a77c:	d109      	bne.n	800a792 <ArtNetParams::callbackFunction(char const*)+0x242>
 800a77e:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800a782:	f041 0120 	orr.w	r1, r1, #32
 800a786:	2970      	cmp	r1, #112	; 0x70
 800a788:	d103      	bne.n	800a792 <ArtNetParams::callbackFunction(char const*)+0x242>
 800a78a:	2101      	movs	r1, #1
 800a78c:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800a790:	e7ce      	b.n	800a730 <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800a792:	2100      	movs	r1, #0
 800a794:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800a798:	e7cf      	b.n	800a73a <ArtNetParams::callbackFunction(char const*)+0x1ea>
 800a79a:	2304      	movs	r3, #4
 800a79c:	4630      	mov	r0, r6
 800a79e:	9303      	str	r3, [sp, #12]
 800a7a0:	aa04      	add	r2, sp, #16
 800a7a2:	ab03      	add	r3, sp, #12
 800a7a4:	eb09 1105 	add.w	r1, r9, r5, lsl #4
 800a7a8:	f007 fd20 	bl	80121ec <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a7ac:	2305      	movs	r3, #5
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d140      	bne.n	800a834 <ArtNetParams::callbackFunction(char const*)+0x2e4>
 800a7b2:	4a1b      	ldr	r2, [pc, #108]	; (800a820 <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800a7b4:	a904      	add	r1, sp, #16
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	d012      	beq.n	800a7e0 <ArtNetParams::callbackFunction(char const*)+0x290>
 800a7ba:	f811 6b01 	ldrb.w	r6, [r1], #1
 800a7be:	f812 0b01 	ldrb.w	r0, [r2], #1
 800a7c2:	4286      	cmp	r6, r0
 800a7c4:	d0f7      	beq.n	800a7b6 <ArtNetParams::callbackFunction(char const*)+0x266>
 800a7c6:	2100      	movs	r1, #0
 800a7c8:	1962      	adds	r2, r4, r5
 800a7ca:	6863      	ldr	r3, [r4, #4]
 800a7cc:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 800a7d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a7d4:	fa02 f505 	lsl.w	r5, r2, r5
 800a7d8:	ea23 0505 	bic.w	r5, r3, r5
 800a7dc:	6065      	str	r5, [r4, #4]
 800a7de:	e6db      	b.n	800a598 <ArtNetParams::callbackFunction(char const*)+0x48>
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	1963      	adds	r3, r4, r5
 800a7e4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800a7e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a7ec:	fa03 f505 	lsl.w	r5, r3, r5
 800a7f0:	6863      	ldr	r3, [r4, #4]
 800a7f2:	432b      	orrs	r3, r5
 800a7f4:	e6cf      	b.n	800a596 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a7f6:	bf00      	nop
 800a7f8:	080155ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, sl, ip, lr}
 800a7fc:	0801561b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sl, ip, lr}
 800a800:	08015607 	stmdaeq	r1, {r0, r1, r2, r9, sl, ip, lr}
 800a804:	08015611 	stmdaeq	r1, {r0, r4, r9, sl, ip, lr}
 800a808:	0801569c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sl, ip, lr}
 800a80c:	08015686 	stmdaeq	r1, {r1, r2, r7, r9, sl, ip, lr}
 800a810:	080156b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r9, sl, ip, lr}
 800a814:	080156ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, sl, ip, lr}
 800a818:	0801700b 	stmdaeq	r1, {r0, r1, r3, ip, sp, lr}
 800a81c:	080156c1 	stmdaeq	r1, {r0, r6, r7, r9, sl, ip, lr}
 800a820:	08015556 	stmdaeq	r1, {r1, r2, r4, r6, r8, sl, ip, lr}
 800a824:	08017016 	stmdaeq	r1, {r1, r2, r4, ip, sp, lr}
 800a828:	08017056 	stmdaeq	r1, {r1, r2, r4, r6, ip, sp, lr}
 800a82c:	080155c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, sl, ip, lr}
 800a830:	080170b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, ip, sp, lr}
 800a834:	9303      	str	r3, [sp, #12]
 800a836:	4630      	mov	r0, r6
 800a838:	ab03      	add	r3, sp, #12
 800a83a:	aa04      	add	r2, sp, #16
 800a83c:	eb0a 010b 	add.w	r1, sl, fp
 800a840:	f007 fcd4 	bl	80121ec <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a844:	bb68      	cbnz	r0, 800a8a2 <ArtNetParams::callbackFunction(char const*)+0x352>
 800a846:	2301      	movs	r3, #1
 800a848:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 800a84c:	40ab      	lsls	r3, r5
 800a84e:	ea22 0303 	bic.w	r3, r2, r3
 800a852:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800a856:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800a85a:	f042 0220 	orr.w	r2, r2, #32
 800a85e:	2a69      	cmp	r2, #105	; 0x69
 800a860:	d118      	bne.n	800a894 <ArtNetParams::callbackFunction(char const*)+0x344>
 800a862:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800a866:	f042 0220 	orr.w	r2, r2, #32
 800a86a:	2a6e      	cmp	r2, #110	; 0x6e
 800a86c:	d112      	bne.n	800a894 <ArtNetParams::callbackFunction(char const*)+0x344>
 800a86e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800a872:	f042 0220 	orr.w	r2, r2, #32
 800a876:	2a70      	cmp	r2, #112	; 0x70
 800a878:	d10c      	bne.n	800a894 <ArtNetParams::callbackFunction(char const*)+0x344>
 800a87a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800a87e:	f042 0220 	orr.w	r2, r2, #32
 800a882:	2a75      	cmp	r2, #117	; 0x75
 800a884:	d106      	bne.n	800a894 <ArtNetParams::callbackFunction(char const*)+0x344>
 800a886:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800a88a:	f042 0220 	orr.w	r2, r2, #32
 800a88e:	2a74      	cmp	r2, #116	; 0x74
 800a890:	f43f ae82 	beq.w	800a598 <ArtNetParams::callbackFunction(char const*)+0x48>
 800a894:	2201      	movs	r2, #1
 800a896:	fa02 f505 	lsl.w	r5, r2, r5
 800a89a:	432b      	orrs	r3, r5
 800a89c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800a8a0:	e67a      	b.n	800a598 <ArtNetParams::callbackFunction(char const*)+0x48>
 800a8a2:	2118      	movs	r1, #24
 800a8a4:	4b15      	ldr	r3, [pc, #84]	; (800a8fc <ArtNetParams::callbackFunction(char const*)+0x3ac>)
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	fb01 3105 	mla	r1, r1, r5, r3
 800a8ac:	aa02      	add	r2, sp, #8
 800a8ae:	f007 fce1 	bl	8012274 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800a8b2:	b968      	cbnz	r0, 800a8d0 <ArtNetParams::callbackFunction(char const*)+0x380>
 800a8b4:	9902      	ldr	r1, [sp, #8]
 800a8b6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8ba:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800a8be:	2301      	movs	r3, #1
 800a8c0:	40ab      	lsls	r3, r5
 800a8c2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	b1a1      	cbz	r1, 800a8f4 <ArtNetParams::callbackFunction(char const*)+0x3a4>
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800a8d0:	3501      	adds	r5, #1
 800a8d2:	2d04      	cmp	r5, #4
 800a8d4:	f107 0710 	add.w	r7, r7, #16
 800a8d8:	f47f af16 	bne.w	800a708 <ArtNetParams::callbackFunction(char const*)+0x1b8>
 800a8dc:	4630      	mov	r0, r6
 800a8de:	4908      	ldr	r1, [pc, #32]	; (800a900 <ArtNetParams::callbackFunction(char const*)+0x3b0>)
 800a8e0:	f10d 0205 	add.w	r2, sp, #5
 800a8e4:	f007 fd24 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	f47f ae55 	bne.w	800a598 <ArtNetParams::callbackFunction(char const*)+0x48>
 800a8ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a8f2:	e63a      	b.n	800a56a <ArtNetParams::callbackFunction(char const*)+0x1a>
 800a8f4:	ea22 0303 	bic.w	r3, r2, r3
 800a8f8:	e7e8      	b.n	800a8cc <ArtNetParams::callbackFunction(char const*)+0x37c>
 800a8fa:	bf00      	nop
 800a8fc:	08015626 	stmdaeq	r1, {r1, r2, r5, r9, sl, ip, lr}
 800a900:	080155b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, sl, ip, lr}

0800a904 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800a904:	f7ff be24 	b.w	800a550 <ArtNetParams::callbackFunction(char const*)>

0800a908 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800a908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a90c:	4604      	mov	r4, r0
 800a90e:	4615      	mov	r5, r2
 800a910:	461e      	mov	r6, r3
 800a912:	b086      	sub	sp, #24
 800a914:	3004      	adds	r0, #4
 800a916:	2900      	cmp	r1, #0
 800a918:	f000 814b 	beq.w	800abb2 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2aa>
 800a91c:	2287      	movs	r2, #135	; 0x87
 800a91e:	f008 fa50 	bl	8012dc2 <memmove>
 800a922:	4633      	mov	r3, r6
 800a924:	462a      	mov	r2, r5
 800a926:	49a6      	ldr	r1, [pc, #664]	; (800abc0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800a928:	a803      	add	r0, sp, #12
 800a92a:	f007 fb57 	bl	8011fdc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800a92e:	2500      	movs	r5, #0
 800a930:	4ea4      	ldr	r6, [pc, #656]	; (800abc4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800a932:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800abc8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>
 800a936:	4fa5      	ldr	r7, [pc, #660]	; (800abcc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800a938:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800a93c:	4631      	mov	r1, r6
 800a93e:	412b      	asrs	r3, r5
 800a940:	f013 0f01 	tst.w	r3, #1
 800a944:	ea6f 0303 	mvn.w	r3, r3
 800a948:	bf0c      	ite	eq
 800a94a:	4642      	moveq	r2, r8
 800a94c:	463a      	movne	r2, r7
 800a94e:	f003 0301 	and.w	r3, r3, #1
 800a952:	a803      	add	r0, sp, #12
 800a954:	3501      	adds	r5, #1
 800a956:	f7ff fd43 	bl	800a3e0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a95a:	2d04      	cmp	r5, #4
 800a95c:	f106 0612 	add.w	r6, r6, #18
 800a960:	d1ea      	bne.n	800a938 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30>
 800a962:	6863      	ldr	r3, [r4, #4]
 800a964:	7a22      	ldrb	r2, [r4, #8]
 800a966:	499a      	ldr	r1, [pc, #616]	; (800abd0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800a968:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a96c:	a803      	add	r0, sp, #12
 800a96e:	f7ff fd0f 	bl	800a390 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a972:	6863      	ldr	r3, [r4, #4]
 800a974:	7a62      	ldrb	r2, [r4, #9]
 800a976:	4997      	ldr	r1, [pc, #604]	; (800abd4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800a978:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a97c:	a803      	add	r0, sp, #12
 800a97e:	f7ff fd07 	bl	800a390 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a982:	4995      	ldr	r1, [pc, #596]	; (800abd8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800a984:	a803      	add	r0, sp, #12
 800a986:	f007 fbaf 	bl	80120e8 <PropertiesBuilder::AddComment(char const*)>
 800a98a:	2500      	movs	r5, #0
 800a98c:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800a990:	4e92      	ldr	r6, [pc, #584]	; (800abdc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800a992:	f104 076b 	add.w	r7, r4, #107	; 0x6b
 800a996:	6862      	ldr	r2, [r4, #4]
 800a998:	fa08 f305 	lsl.w	r3, r8, r5
 800a99c:	4393      	bics	r3, r2
 800a99e:	bf0c      	ite	eq
 800a9a0:	2301      	moveq	r3, #1
 800a9a2:	2300      	movne	r3, #0
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a9aa:	a803      	add	r0, sp, #12
 800a9ac:	3501      	adds	r5, #1
 800a9ae:	f7ff fcef 	bl	800a390 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a9b2:	2d04      	cmp	r5, #4
 800a9b4:	f106 0610 	add.w	r6, r6, #16
 800a9b8:	d1ed      	bne.n	800a996 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800a9ba:	4989      	ldr	r1, [pc, #548]	; (800abe0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800a9bc:	a803      	add	r0, sp, #12
 800a9be:	f007 fb93 	bl	80120e8 <PropertiesBuilder::AddComment(char const*)>
 800a9c2:	6863      	ldr	r3, [r4, #4]
 800a9c4:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800a9c8:	f013 0501 	ands.w	r5, r3, #1
 800a9cc:	d108      	bne.n	800a9e0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xd8>
 800a9ce:	4b85      	ldr	r3, [pc, #532]	; (800abe4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800a9d0:	223f      	movs	r2, #63	; 0x3f
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	3154      	adds	r1, #84	; 0x54
 800a9d8:	f7ff fd52 	bl	800a480 <strncpy.isra.0>
 800a9dc:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800a9e0:	6863      	ldr	r3, [r4, #4]
 800a9e2:	4632      	mov	r2, r6
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	497f      	ldr	r1, [pc, #508]	; (800abe8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 800a9ea:	a803      	add	r0, sp, #12
 800a9ec:	f7ff fcf8 	bl	800a3e0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a9f0:	6863      	ldr	r3, [r4, #4]
 800a9f2:	f104 0610 	add.w	r6, r4, #16
 800a9f6:	f013 0502 	ands.w	r5, r3, #2
 800a9fa:	d108      	bne.n	800aa0e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 800a9fc:	4b79      	ldr	r3, [pc, #484]	; (800abe4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800a9fe:	2211      	movs	r2, #17
 800aa00:	6819      	ldr	r1, [r3, #0]
 800aa02:	4630      	mov	r0, r6
 800aa04:	3142      	adds	r1, #66	; 0x42
 800aa06:	f7ff fd3b 	bl	800a480 <strncpy.isra.0>
 800aa0a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800aa0e:	6863      	ldr	r3, [r4, #4]
 800aa10:	4632      	mov	r2, r6
 800aa12:	4976      	ldr	r1, [pc, #472]	; (800abec <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 800aa14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800aa18:	a803      	add	r0, sp, #12
 800aa1a:	f7ff fce1 	bl	800a3e0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800aa1e:	2104      	movs	r1, #4
 800aa20:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800aa24:	6863      	ldr	r3, [r4, #4]
 800aa26:	ba52      	rev16	r2, r2
 800aa28:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800aa2c:	b292      	uxth	r2, r2
 800aa2e:	9100      	str	r1, [sp, #0]
 800aa30:	a803      	add	r0, sp, #12
 800aa32:	496f      	ldr	r1, [pc, #444]	; (800abf0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e8>)
 800aa34:	f007 fb72 	bl	801211c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>
 800aa38:	496e      	ldr	r1, [pc, #440]	; (800abf4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ec>)
 800aa3a:	a803      	add	r0, sp, #12
 800aa3c:	f007 fb54 	bl	80120e8 <PropertiesBuilder::AddComment(char const*)>
 800aa40:	6862      	ldr	r2, [r4, #4]
 800aa42:	496d      	ldr	r1, [pc, #436]	; (800abf8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f0>)
 800aa44:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800aa48:	a803      	add	r0, sp, #12
 800aa4a:	f7ff fcf1 	bl	800a430 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800aa4e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800abfc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f4>
 800aa52:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800aa56:	6863      	ldr	r3, [r4, #4]
 800aa58:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac00 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f8>
 800aa5c:	4969      	ldr	r1, [pc, #420]	; (800ac04 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2fc>)
 800aa5e:	2a00      	cmp	r2, #0
 800aa60:	bf0c      	ite	eq
 800aa62:	464a      	moveq	r2, r9
 800aa64:	4642      	movne	r2, r8
 800aa66:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800aa6a:	a803      	add	r0, sp, #12
 800aa6c:	f7ff fcb8 	bl	800a3e0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800aa70:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 800aa74:	6863      	ldr	r3, [r4, #4]
 800aa76:	4964      	ldr	r1, [pc, #400]	; (800ac08 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800aa78:	4a64      	ldr	r2, [pc, #400]	; (800ac0c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800aa7a:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	bf18      	it	ne
 800aa82:	460a      	movne	r2, r1
 800aa84:	4962      	ldr	r1, [pc, #392]	; (800ac10 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x308>)
 800aa86:	a803      	add	r0, sp, #12
 800aa88:	f7ff fcaa 	bl	800a3e0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800aa8c:	2500      	movs	r5, #0
 800aa8e:	4e61      	ldr	r6, [pc, #388]	; (800ac14 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30c>)
 800aa90:	f8df a184 	ldr.w	sl, [pc, #388]	; 800ac18 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x310>
 800aa94:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800aa98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa9c:	6861      	ldr	r1, [r4, #4]
 800aa9e:	40ab      	lsls	r3, r5
 800aaa0:	438b      	bics	r3, r1
 800aaa2:	f04f 0112 	mov.w	r1, #18
 800aaa6:	f817 2b01 	ldrb.w	r2, [r7], #1
 800aaaa:	bf0c      	ite	eq
 800aaac:	2301      	moveq	r3, #1
 800aaae:	2300      	movne	r3, #0
 800aab0:	fb01 a105 	mla	r1, r1, r5, sl
 800aab4:	2a00      	cmp	r2, #0
 800aab6:	bf0c      	ite	eq
 800aab8:	464a      	moveq	r2, r9
 800aaba:	4642      	movne	r2, r8
 800aabc:	a803      	add	r0, sp, #12
 800aabe:	f7ff fc8f 	bl	800a3e0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800aac2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aac6:	6862      	ldr	r2, [r4, #4]
 800aac8:	40ab      	lsls	r3, r5
 800aaca:	4393      	bics	r3, r2
 800aacc:	7938      	ldrb	r0, [r7, #4]
 800aace:	494e      	ldr	r1, [pc, #312]	; (800ac08 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800aad0:	4a4e      	ldr	r2, [pc, #312]	; (800ac0c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800aad2:	bf0c      	ite	eq
 800aad4:	2301      	moveq	r3, #1
 800aad6:	2300      	movne	r3, #0
 800aad8:	3501      	adds	r5, #1
 800aada:	2800      	cmp	r0, #0
 800aadc:	bf18      	it	ne
 800aade:	460a      	movne	r2, r1
 800aae0:	4631      	mov	r1, r6
 800aae2:	a803      	add	r0, sp, #12
 800aae4:	f7ff fc7c 	bl	800a3e0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800aae8:	2d04      	cmp	r5, #4
 800aaea:	f106 0610 	add.w	r6, r6, #16
 800aaee:	d1d3      	bne.n	800aa98 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x190>
 800aaf0:	6863      	ldr	r3, [r4, #4]
 800aaf2:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 800aaf6:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800aafa:	4948      	ldr	r1, [pc, #288]	; (800ac1c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x314>)
 800aafc:	a803      	add	r0, sp, #12
 800aafe:	f7ff fc47 	bl	800a390 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800ab02:	6862      	ldr	r2, [r4, #4]
 800ab04:	4946      	ldr	r1, [pc, #280]	; (800ac20 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x318>)
 800ab06:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800ab0a:	a803      	add	r0, sp, #12
 800ab0c:	f7ff fc90 	bl	800a430 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800ab10:	4944      	ldr	r1, [pc, #272]	; (800ac24 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x31c>)
 800ab12:	a803      	add	r0, sp, #12
 800ab14:	f007 fae8 	bl	80120e8 <PropertiesBuilder::AddComment(char const*)>
 800ab18:	2500      	movs	r5, #0
 800ab1a:	2601      	movs	r6, #1
 800ab1c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800ac28 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x320>
 800ab20:	4f30      	ldr	r7, [pc, #192]	; (800abe4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800ab22:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800ab26:	fa06 f305 	lsl.w	r3, r6, r5
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	401a      	ands	r2, r3
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	bf0c      	ite	eq
 800ab32:	2301      	moveq	r3, #1
 800ab34:	2300      	movne	r3, #0
 800ab36:	f105 021c 	add.w	r2, r5, #28
 800ab3a:	d008      	beq.n	800ab4e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800ab3c:	6839      	ldr	r1, [r7, #0]
 800ab3e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800ab42:	f8d1 077c 	ldr.w	r0, [r1, #1916]	; 0x77c
 800ab46:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800ab4a:	f8c1 000b 	str.w	r0, [r1, #11]
 800ab4e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ab52:	4641      	mov	r1, r8
 800ab54:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800ab58:	a803      	add	r0, sp, #12
 800ab5a:	3501      	adds	r5, #1
 800ab5c:	f007 fa80 	bl	8012060 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800ab60:	2d04      	cmp	r5, #4
 800ab62:	f108 0818 	add.w	r8, r8, #24
 800ab66:	d1dc      	bne.n	800ab22 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x21a>
 800ab68:	4930      	ldr	r1, [pc, #192]	; (800ac2c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x324>)
 800ab6a:	a803      	add	r0, sp, #12
 800ab6c:	f007 fabc 	bl	80120e8 <PropertiesBuilder::AddComment(char const*)>
 800ab70:	6862      	ldr	r2, [r4, #4]
 800ab72:	492f      	ldr	r1, [pc, #188]	; (800ac30 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x328>)
 800ab74:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 800ab78:	a803      	add	r0, sp, #12
 800ab7a:	f7ff fc59 	bl	800a430 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800ab7e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800ab82:	b17b      	cbz	r3, 800aba4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>
 800ab84:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800ab88:	9b03      	ldr	r3, [sp, #12]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	227d      	movs	r2, #125	; 0x7d
 800ab8e:	f803 2c01 	strb.w	r2, [r3, #-1]
 800ab92:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ab96:	9903      	ldr	r1, [sp, #12]
 800ab98:	54ca      	strb	r2, [r1, r3]
 800ab9a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	f8ad 3012 	strh.w	r3, [sp, #18]
 800aba4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800aba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	b006      	add	sp, #24
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	4601      	mov	r1, r0
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	4618      	mov	r0, r3
 800abba:	68d2      	ldr	r2, [r2, #12]
 800abbc:	4790      	blx	r2
 800abbe:	e6b0      	b.n	800a922 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800abc0:	080156ca 	stmdaeq	r1, {r1, r3, r6, r7, r9, sl, ip, lr}
 800abc4:	080170b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, ip, sp, lr}
 800abc8:	0801555b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, sl, ip, lr}
 800abcc:	08015561 	stmdaeq	r1, {r0, r5, r6, r8, sl, ip, lr}
 800abd0:	080156b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r9, sl, ip, lr}
 800abd4:	080156ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, sl, ip, lr}
 800abd8:	08015577 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, sl, ip, lr}
 800abdc:	08017016 	stmdaeq	r1, {r1, r2, r4, ip, sp, lr}
 800abe0:	08015590 	stmdaeq	r1, {r4, r7, r8, sl, ip, lr}
 800abe4:	20001910 	andcs	r1, r0, r0, lsl r9
 800abe8:	08015607 	stmdaeq	r1, {r0, r1, r2, r9, sl, ip, lr}
 800abec:	0801561b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sl, ip, lr}
 800abf0:	08015611 	stmdaeq	r1, {r0, r4, r9, sl, ip, lr}
 800abf4:	08015595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, ip, lr}
 800abf8:	080155ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, sl, ip, lr}
 800abfc:	08015568 	stmdaeq	r1, {r3, r5, r6, r8, sl, ip, lr}
 800ac00:	0801556c 	stmdaeq	r1, {r2, r3, r5, r6, r8, sl, ip, lr}
 800ac04:	0801700b 	stmdaeq	r1, {r0, r1, r3, ip, sp, lr}
 800ac08:	08015556 	stmdaeq	r1, {r1, r2, r4, r6, r8, sl, ip, lr}
 800ac0c:	08015570 	stmdaeq	r1, {r4, r5, r6, r8, sl, ip, lr}
 800ac10:	080156c1 	stmdaeq	r1, {r0, r6, r7, r9, sl, ip, lr}
 800ac14:	080155c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, sl, ip, lr}
 800ac18:	08017056 	stmdaeq	r1, {r1, r2, r4, r6, ip, sp, lr}
 800ac1c:	0801569c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sl, ip, lr}
 800ac20:	08015686 	stmdaeq	r1, {r1, r2, r7, r9, sl, ip, lr}
 800ac24:	08015225 	stmdaeq	r1, {r0, r2, r5, r9, ip, lr}
 800ac28:	08015626 	stmdaeq	r1, {r1, r2, r5, r9, sl, ip, lr}
 800ac2c:	080155a4 	stmdaeq	r1, {r2, r5, r7, r8, sl, ip, lr}
 800ac30:	080155b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, sl, ip, lr}

0800ac34 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800ac34:	b513      	push	{r0, r1, r4, lr}
 800ac36:	6804      	ldr	r4, [r0, #0]
 800ac38:	b914      	cbnz	r4, 800ac40 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800ac3a:	601c      	str	r4, [r3, #0]
 800ac3c:	b002      	add	sp, #8
 800ac3e:	bd10      	pop	{r4, pc}
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	4613      	mov	r3, r2
 800ac44:	460a      	mov	r2, r1
 800ac46:	2100      	movs	r1, #0
 800ac48:	f7ff fe5e 	bl	800a908 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800ac4c:	e7f6      	b.n	800ac3c <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800ac4e <ArtNetParams::Set(ArtNetNode*)>:
 800ac4e:	6843      	ldr	r3, [r0, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d07d      	beq.n	800ad50 <ArtNetParams::Set(ArtNetNode*)+0x102>
 800ac54:	079a      	lsls	r2, r3, #30
 800ac56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	d504      	bpl.n	800ac6a <ArtNetParams::Set(ArtNetNode*)+0x1c>
 800ac60:	f100 0110 	add.w	r1, r0, #16
 800ac64:	4628      	mov	r0, r5
 800ac66:	f7fd ff51 	bl	8008b0c <ArtNetNode::SetShortName(char const*)>
 800ac6a:	6863      	ldr	r3, [r4, #4]
 800ac6c:	07db      	lsls	r3, r3, #31
 800ac6e:	d504      	bpl.n	800ac7a <ArtNetParams::Set(ArtNetNode*)+0x2c>
 800ac70:	4628      	mov	r0, r5
 800ac72:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800ac76:	f7fd ff71 	bl	8008b5c <ArtNetNode::SetLongName(char const*)>
 800ac7a:	6863      	ldr	r3, [r4, #4]
 800ac7c:	075f      	lsls	r7, r3, #29
 800ac7e:	d504      	bpl.n	800ac8a <ArtNetParams::Set(ArtNetNode*)+0x3c>
 800ac80:	2200      	movs	r2, #0
 800ac82:	4628      	mov	r0, r5
 800ac84:	7a21      	ldrb	r1, [r4, #8]
 800ac86:	f7fe faa1 	bl	80091cc <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800ac8a:	6863      	ldr	r3, [r4, #4]
 800ac8c:	071e      	lsls	r6, r3, #28
 800ac8e:	d504      	bpl.n	800ac9a <ArtNetParams::Set(ArtNetNode*)+0x4c>
 800ac90:	2200      	movs	r2, #0
 800ac92:	4628      	mov	r0, r5
 800ac94:	7a61      	ldrb	r1, [r4, #9]
 800ac96:	f7fe fa6b 	bl	8009170 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800ac9a:	6863      	ldr	r3, [r4, #4]
 800ac9c:	0558      	lsls	r0, r3, #21
 800ac9e:	d504      	bpl.n	800acaa <ArtNetParams::Set(ArtNetNode*)+0x5c>
 800aca0:	4628      	mov	r0, r5
 800aca2:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800aca6:	f7fe f823 	bl	8008cf0 <ArtNetNode::SetOemValue(unsigned char const*)>
 800acaa:	6863      	ldr	r3, [r4, #4]
 800acac:	2600      	movs	r6, #0
 800acae:	0519      	lsls	r1, r3, #20
 800acb0:	bf44      	itt	mi
 800acb2:	f44f 727a 	movmi.w	r2, #1000	; 0x3e8
 800acb6:	f894 3066 	ldrbmi.w	r3, [r4, #102]	; 0x66
 800acba:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 800acbe:	bf44      	itt	mi
 800acc0:	4353      	mulmi	r3, r2
 800acc2:	f8c5 36cc 	strmi.w	r3, [r5, #1740]	; 0x6cc
 800acc6:	6863      	ldr	r3, [r4, #4]
 800acc8:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800accc:	04da      	lsls	r2, r3, #19
 800acce:	bf48      	it	mi
 800acd0:	2301      	movmi	r3, #1
 800acd2:	f04f 0a01 	mov.w	sl, #1
 800acd6:	bf48      	it	mi
 800acd8:	f885 36dc 	strbmi.w	r3, [r5, #1756]	; 0x6dc
 800acdc:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800ace0:	6863      	ldr	r3, [r4, #4]
 800ace2:	fa08 f206 	lsl.w	r2, r8, r6
 800ace6:	ea32 0303 	bics.w	r3, r2, r3
 800acea:	bf0c      	ite	eq
 800acec:	783a      	ldrbeq	r2, [r7, #0]
 800acee:	f894 206f 	ldrbne.w	r2, [r4, #111]	; 0x6f
 800acf2:	4631      	mov	r1, r6
 800acf4:	4628      	mov	r0, r5
 800acf6:	f7fe fac8 	bl	800928a <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800acfa:	6863      	ldr	r3, [r4, #4]
 800acfc:	fa09 f206 	lsl.w	r2, r9, r6
 800ad00:	ea32 0303 	bics.w	r3, r2, r3
 800ad04:	bf0c      	ite	eq
 800ad06:	797a      	ldrbeq	r2, [r7, #5]
 800ad08:	f894 2074 	ldrbne.w	r2, [r4, #116]	; 0x74
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	4628      	mov	r0, r5
 800ad10:	f7fe fa8a 	bl	8009228 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800ad14:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800ad18:	fa0a f306 	lsl.w	r3, sl, r6
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	4393      	bics	r3, r2
 800ad20:	d109      	bne.n	800ad36 <ArtNetParams::Set(ArtNetNode*)+0xe8>
 800ad22:	f106 031c 	add.w	r3, r6, #28
 800ad26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800ad32:	f7fe fdc3 	bl	80098bc <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800ad36:	3601      	adds	r6, #1
 800ad38:	2e04      	cmp	r6, #4
 800ad3a:	f107 0701 	add.w	r7, r7, #1
 800ad3e:	d1cf      	bne.n	800ace0 <ArtNetParams::Set(ArtNetNode*)+0x92>
 800ad40:	6863      	ldr	r3, [r4, #4]
 800ad42:	011b      	lsls	r3, r3, #4
 800ad44:	bf44      	itt	mi
 800ad46:	2301      	movmi	r3, #1
 800ad48:	f885 309e 	strbmi.w	r3, [r5, #158]	; 0x9e
 800ad4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad50:	4770      	bx	lr

0800ad52 <ArtNetParams::Dump()>:
 800ad52:	4770      	bx	lr

0800ad54 <ArtNetNode::HandleTrigger()>:
 800ad54:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800ad58:	4601      	mov	r1, r0
 800ad5a:	2bff      	cmp	r3, #255	; 0xff
 800ad5c:	d103      	bne.n	800ad66 <ArtNetNode::HandleTrigger()+0x12>
 800ad5e:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
 800ad62:	2aff      	cmp	r2, #255	; 0xff
 800ad64:	d009      	beq.n	800ad7a <ArtNetNode::HandleTrigger()+0x26>
 800ad66:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d10a      	bne.n	800ad84 <ArtNetNode::HandleTrigger()+0x30>
 800ad6e:	f891 20af 	ldrb.w	r2, [r1, #175]	; 0xaf
 800ad72:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d104      	bne.n	800ad84 <ArtNetNode::HandleTrigger()+0x30>
 800ad7a:	6988      	ldr	r0, [r1, #24]
 800ad7c:	31b0      	adds	r1, #176	; 0xb0
 800ad7e:	6803      	ldr	r3, [r0, #0]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	4718      	bx	r3
 800ad84:	4770      	bx	lr
	...

0800ad88 <e131::universe_to_multicast_ip(unsigned short)>:
 800ad88:	b513      	push	{r0, r1, r4, lr}
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	a901      	add	r1, sp, #4
 800ad8e:	4806      	ldr	r0, [pc, #24]	; (800ada8 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800ad90:	f007 ff5c 	bl	8012c4c <inet_aton>
 800ad94:	9801      	ldr	r0, [sp, #4]
 800ad96:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800ad9a:	0224      	lsls	r4, r4, #8
 800ad9c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800ada0:	4320      	orrs	r0, r4
 800ada2:	b002      	add	sp, #8
 800ada4:	bd10      	pop	{r4, pc}
 800ada6:	bf00      	nop
 800ada8:	080156db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, sl, ip, lr}

0800adac <memset.constprop.0.isra.0>:
 800adac:	2300      	movs	r3, #0
 800adae:	4401      	add	r1, r0
 800adb0:	4288      	cmp	r0, r1
 800adb2:	d002      	beq.n	800adba <memset.constprop.0.isra.0+0xe>
 800adb4:	f800 3b01 	strb.w	r3, [r0], #1
 800adb8:	e7fa      	b.n	800adb0 <memset.constprop.0.isra.0+0x4>
 800adba:	4770      	bx	lr

0800adbc <memcpy.isra.0>:
 800adbc:	3801      	subs	r0, #1
 800adbe:	440a      	add	r2, r1
 800adc0:	4291      	cmp	r1, r2
 800adc2:	d004      	beq.n	800adce <memcpy.isra.0+0x12>
 800adc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adc8:	f800 3f01 	strb.w	r3, [r0, #1]!
 800adcc:	e7f8      	b.n	800adc0 <memcpy.isra.0+0x4>
 800adce:	4770      	bx	lr

0800add0 <lightset::Data::IOutput(LightSet*, unsigned int) const>:
 800add0:	f240 6304 	movw	r3, #1540	; 0x604
 800add4:	b470      	push	{r4, r5, r6}
 800add6:	4605      	mov	r5, r0
 800add8:	4608      	mov	r0, r1
 800adda:	4353      	muls	r3, r2
 800addc:	4611      	mov	r1, r2
 800adde:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800ade2:	18ea      	adds	r2, r5, r3
 800ade4:	6803      	ldr	r3, [r0, #0]
 800ade6:	691e      	ldr	r6, [r3, #16]
 800ade8:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800adec:	46b4      	mov	ip, r6
 800adee:	192a      	adds	r2, r5, r4
 800adf0:	bc70      	pop	{r4, r5, r6}
 800adf2:	4760      	bx	ip

0800adf4 <E131Bridge::Start()>:
 800adf4:	6943      	ldr	r3, [r0, #20]
 800adf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adf8:	4604      	mov	r4, r0
 800adfa:	b35b      	cbz	r3, 800ae54 <E131Bridge::Start()+0x60>
 800adfc:	6983      	ldr	r3, [r0, #24]
 800adfe:	b9cb      	cbnz	r3, 800ae34 <E131Bridge::Start()+0x40>
 800ae00:	a901      	add	r1, sp, #4
 800ae02:	4818      	ldr	r0, [pc, #96]	; (800ae64 <E131Bridge::Start()+0x70>)
 800ae04:	f007 ff22 	bl	8012c4c <inet_aton>
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	f240 207e 	movw	r0, #638	; 0x27e
 800ae0e:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800ae12:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800ae16:	6223      	str	r3, [r4, #32]
 800ae18:	f007 ff14 	bl	8012c44 <operator new(unsigned int)>
 800ae1c:	61a0      	str	r0, [r4, #24]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 fdc6 	bl	800b9b0 <E131Bridge::FillDataPacket()>
 800ae24:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800ae28:	f007 ff0c 	bl	8012c44 <operator new(unsigned int)>
 800ae2c:	61e0      	str	r0, [r4, #28]
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f000 fd14 	bl	800b85c <E131Bridge::FillDiscoveryPacket()>
 800ae34:	2500      	movs	r5, #0
 800ae36:	270c      	movs	r7, #12
 800ae38:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800ae3c:	fb07 f305 	mul.w	r3, r7, r5
 800ae40:	5cf3      	ldrb	r3, [r6, r3]
 800ae42:	b123      	cbz	r3, 800ae4e <E131Bridge::Start()+0x5a>
 800ae44:	6960      	ldr	r0, [r4, #20]
 800ae46:	4629      	mov	r1, r5
 800ae48:	6803      	ldr	r3, [r0, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	4798      	blx	r3
 800ae4e:	3501      	adds	r5, #1
 800ae50:	2d04      	cmp	r5, #4
 800ae52:	d1f3      	bne.n	800ae3c <E131Bridge::Start()+0x48>
 800ae54:	2102      	movs	r1, #2
 800ae56:	4b04      	ldr	r3, [pc, #16]	; (800ae68 <E131Bridge::Start()+0x74>)
 800ae58:	6818      	ldr	r0, [r3, #0]
 800ae5a:	b003      	add	sp, #12
 800ae5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ae60:	f007 be08 	b.w	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 800ae64:	080156db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, sl, ip, lr}
 800ae68:	2000aef0 	strdcs	sl, [r0], -r0

0800ae6c <E131Bridge::Stop()>:
 800ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae70:	2500      	movs	r5, #0
 800ae72:	2301      	movs	r3, #1
 800ae74:	4604      	mov	r4, r0
 800ae76:	f240 6804 	movw	r8, #1540	; 0x604
 800ae7a:	462e      	mov	r6, r5
 800ae7c:	f880 34f4 	strb.w	r3, [r0, #1268]	; 0x4f4
 800ae80:	f500 67aa 	add.w	r7, r0, #1360	; 0x550
 800ae84:	6860      	ldr	r0, [r4, #4]
 800ae86:	b118      	cbz	r0, 800ae90 <E131Bridge::Stop()+0x24>
 800ae88:	6803      	ldr	r3, [r0, #0]
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	4798      	blx	r3
 800ae90:	f7fe fb74 	bl	800957c <lightset::Data::Get()>
 800ae94:	2344      	movs	r3, #68	; 0x44
 800ae96:	fb08 0005 	mla	r0, r8, r5, r0
 800ae9a:	436b      	muls	r3, r5
 800ae9c:	3501      	adds	r5, #1
 800ae9e:	2d04      	cmp	r5, #4
 800aea0:	f8c0 6600 	str.w	r6, [r0, #1536]	; 0x600
 800aea4:	54fe      	strb	r6, [r7, r3]
 800aea6:	d1ed      	bne.n	800ae84 <E131Bridge::Stop()+0x18>
 800aea8:	6963      	ldr	r3, [r4, #20]
 800aeaa:	b17b      	cbz	r3, 800aecc <E131Bridge::Stop()+0x60>
 800aeac:	2500      	movs	r5, #0
 800aeae:	270c      	movs	r7, #12
 800aeb0:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800aeb4:	fb07 f305 	mul.w	r3, r7, r5
 800aeb8:	5cf3      	ldrb	r3, [r6, r3]
 800aeba:	b123      	cbz	r3, 800aec6 <E131Bridge::Stop()+0x5a>
 800aebc:	6960      	ldr	r0, [r4, #20]
 800aebe:	4629      	mov	r1, r5
 800aec0:	6803      	ldr	r3, [r0, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	4798      	blx	r3
 800aec6:	3501      	adds	r5, #1
 800aec8:	2d04      	cmp	r5, #4
 800aeca:	d1f3      	bne.n	800aeb4 <E131Bridge::Stop()+0x48>
 800aecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aed0:	4b02      	ldr	r3, [pc, #8]	; (800aedc <E131Bridge::Stop()+0x70>)
 800aed2:	2100      	movs	r1, #0
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	f007 bdcd 	b.w	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 800aeda:	bf00      	nop
 800aedc:	2000aef0 	strdcs	sl, [r0], -r0

0800aee0 <E131Bridge::SetSourceName(char const*)>:
 800aee0:	223f      	movs	r2, #63	; 0x3f
 800aee2:	b510      	push	{r4, lr}
 800aee4:	f100 0334 	add.w	r3, r0, #52	; 0x34
 800aee8:	3901      	subs	r1, #1
 800aeea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aeee:	b92c      	cbnz	r4, 800aefc <E131Bridge::SetSourceName(char const*)+0x1c>
 800aef0:	441a      	add	r2, r3
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d006      	beq.n	800af04 <E131Bridge::SetSourceName(char const*)+0x24>
 800aef6:	f803 4b01 	strb.w	r4, [r3], #1
 800aefa:	e7fa      	b.n	800aef2 <E131Bridge::SetSourceName(char const*)+0x12>
 800aefc:	3a01      	subs	r2, #1
 800aefe:	f803 4b01 	strb.w	r4, [r3], #1
 800af02:	d1f2      	bne.n	800aeea <E131Bridge::SetSourceName(char const*)+0xa>
 800af04:	2300      	movs	r3, #0
 800af06:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
 800af0a:	bd10      	pop	{r4, pc}

0800af0c <E131Bridge::E131Bridge()>:
 800af0c:	2300      	movs	r3, #0
 800af0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af12:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af14:	e9c0 2300 	strd	r2, r3, [r0]
 800af18:	2201      	movs	r2, #1
 800af1a:	4604      	mov	r4, r0
 800af1c:	2764      	movs	r7, #100	; 0x64
 800af1e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af22:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800af26:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800af2a:	6743      	str	r3, [r0, #116]	; 0x74
 800af2c:	4b1e      	ldr	r3, [pc, #120]	; (800afa8 <E131Bridge::E131Bridge()+0x9c>)
 800af2e:	7202      	strb	r2, [r0, #8]
 800af30:	b093      	sub	sp, #76	; 0x4c
 800af32:	6018      	str	r0, [r3, #0]
 800af34:	f500 65a2 	add.w	r5, r0, #1296	; 0x510
 800af38:	f500 62c4 	add.w	r2, r0, #1568	; 0x620
 800af3c:	f500 66ca 	add.w	r6, r0, #1616	; 0x650
 800af40:	4628      	mov	r0, r5
 800af42:	2144      	movs	r1, #68	; 0x44
 800af44:	f7ff ff32 	bl	800adac <memset.constprop.0.isra.0>
 800af48:	4610      	mov	r0, r2
 800af4a:	210c      	movs	r1, #12
 800af4c:	f7ff ff2e 	bl	800adac <memset.constprop.0.isra.0>
 800af50:	320c      	adds	r2, #12
 800af52:	f802 7c03 	strb.w	r7, [r2, #-3]
 800af56:	42b2      	cmp	r2, r6
 800af58:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800af5c:	d1f0      	bne.n	800af40 <E131Bridge::E131Bridge()+0x34>
 800af5e:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800af62:	211c      	movs	r1, #28
 800af64:	f7ff ff22 	bl	800adac <memset.constprop.0.isra.0>
 800af68:	2301      	movs	r3, #1
 800af6a:	4d10      	ldr	r5, [pc, #64]	; (800afac <E131Bridge::E131Bridge()+0xa0>)
 800af6c:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800af70:	4a0f      	ldr	r2, [pc, #60]	; (800afb0 <E131Bridge::E131Bridge()+0xa4>)
 800af72:	682b      	ldr	r3, [r5, #0]
 800af74:	2140      	movs	r1, #64	; 0x40
 800af76:	331c      	adds	r3, #28
 800af78:	9200      	str	r2, [sp, #0]
 800af7a:	a802      	add	r0, sp, #8
 800af7c:	4a0d      	ldr	r2, [pc, #52]	; (800afb4 <E131Bridge::E131Bridge()+0xa8>)
 800af7e:	f008 f981 	bl	8013284 <snprintf>
 800af82:	4620      	mov	r0, r4
 800af84:	a902      	add	r1, sp, #8
 800af86:	f7ff ffab 	bl	800aee0 <E131Bridge::SetSourceName(char const*)>
 800af8a:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800af8e:	6828      	ldr	r0, [r5, #0]
 800af90:	f005 fa74 	bl	801047c <Network::Begin(unsigned short)>
 800af94:	4621      	mov	r1, r4
 800af96:	4b08      	ldr	r3, [pc, #32]	; (800afb8 <E131Bridge::E131Bridge()+0xac>)
 800af98:	f841 0b24 	str.w	r0, [r1], #36
 800af9c:	6818      	ldr	r0, [r3, #0]
 800af9e:	f007 fdf1 	bl	8012b84 <Hardware::GetUuid(unsigned char*)>
 800afa2:	4620      	mov	r0, r4
 800afa4:	b013      	add	sp, #76	; 0x4c
 800afa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa8:	20001920 	andcs	r1, r0, r0, lsr #18
 800afac:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800afb0:	080153e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, ip, lr}
 800afb4:	080156e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, sl, ip, lr}
 800afb8:	2000aef4 	strdcs	sl, [r0], -r4

0800afbc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	4604      	mov	r4, r0
 800afc0:	2300      	movs	r3, #0
 800afc2:	2544      	movs	r5, #68	; 0x44
 800afc4:	4610      	mov	r0, r2
 800afc6:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
 800afca:	4299      	cmp	r1, r3
 800afcc:	d004      	beq.n	800afd8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800afce:	fb05 f603 	mul.w	r6, r5, r3
 800afd2:	5b96      	ldrh	r6, [r2, r6]
 800afd4:	4286      	cmp	r6, r0
 800afd6:	d00e      	beq.n	800aff6 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 800afd8:	3301      	adds	r3, #1
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d1f5      	bne.n	800afca <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 800afde:	4b06      	ldr	r3, [pc, #24]	; (800aff8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 800afe0:	6824      	ldr	r4, [r4, #0]
 800afe2:	681d      	ldr	r5, [r3, #0]
 800afe4:	f7ff fed0 	bl	800ad88 <e131::universe_to_multicast_ip(unsigned short)>
 800afe8:	4621      	mov	r1, r4
 800afea:	4602      	mov	r2, r0
 800afec:	4628      	mov	r0, r5
 800afee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aff2:	f005 ba57 	b.w	80104a4 <Network::LeaveGroup(int, unsigned int)>
 800aff6:	bd70      	pop	{r4, r5, r6, pc}
 800aff8:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800affc <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800affc:	b570      	push	{r4, r5, r6, lr}
 800affe:	4604      	mov	r4, r0
 800b000:	461d      	mov	r5, r3
 800b002:	b191      	cbz	r1, 800b02a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x2e>
 800b004:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800b008:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800b00c:	b99a      	cbnz	r2, 800b036 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800b00e:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4c>)
 800b010:	8035      	strh	r5, [r6, #0]
 800b012:	4628      	mov	r0, r5
 800b014:	6826      	ldr	r6, [r4, #0]
 800b016:	681c      	ldr	r4, [r3, #0]
 800b018:	f7ff feb6 	bl	800ad88 <e131::universe_to_multicast_ip(unsigned short)>
 800b01c:	4631      	mov	r1, r6
 800b01e:	4602      	mov	r2, r0
 800b020:	4620      	mov	r0, r4
 800b022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b026:	f005 ba3a 	b.w	801049e <Network::JoinGroup(int, unsigned int)>
 800b02a:	b15a      	cbz	r2, 800b044 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800b02c:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800b030:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800b034:	e7ea      	b.n	800b00c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800b036:	42aa      	cmp	r2, r5
 800b038:	d004      	beq.n	800b044 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800b03a:	2104      	movs	r1, #4
 800b03c:	4620      	mov	r0, r4
 800b03e:	f7ff ffbd 	bl	800afbc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800b042:	e7e4      	b.n	800b00e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x12>
 800b044:	bd70      	pop	{r4, r5, r6, pc}
 800b046:	bf00      	nop
 800b048:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800b04c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b050:	4604      	mov	r4, r0
 800b052:	460d      	mov	r5, r1
 800b054:	461e      	mov	r6, r3
 800b056:	bb02      	cbnz	r2, 800b09a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800b058:	2903      	cmp	r1, #3
 800b05a:	d843      	bhi.n	800b0e4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800b05c:	230c      	movs	r3, #12
 800b05e:	fb03 0301 	mla	r3, r3, r1, r0
 800b062:	f893 2622 	ldrb.w	r2, [r3, #1570]	; 0x622
 800b066:	b12a      	cbz	r2, 800b074 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800b068:	f8b3 3620 	ldrh.w	r3, [r3, #1568]	; 0x620
 800b06c:	42b3      	cmp	r3, r6
 800b06e:	d109      	bne.n	800b084 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800b070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b074:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800b078:	3201      	adds	r2, #1
 800b07a:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 800b084:	210c      	movs	r1, #12
 800b086:	fb01 4405 	mla	r4, r1, r5, r4
 800b08a:	4630      	mov	r0, r6
 800b08c:	f8a4 6620 	strh.w	r6, [r4, #1568]	; 0x620
 800b090:	f7ff fe7a 	bl	800ad88 <e131::universe_to_multicast_ip(unsigned short)>
 800b094:	f8c4 0624 	str.w	r0, [r4, #1572]	; 0x624
 800b098:	e7ea      	b.n	800b070 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b09a:	2a02      	cmp	r2, #2
 800b09c:	d122      	bne.n	800b0e4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800b09e:	2903      	cmp	r1, #3
 800b0a0:	d8e6      	bhi.n	800b070 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b0a2:	2344      	movs	r3, #68	; 0x44
 800b0a4:	fb03 0301 	mla	r3, r3, r1, r0
 800b0a8:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800b0ac:	b152      	cbz	r2, 800b0c4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800b0b4:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800b0b8:	4632      	mov	r2, r6
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800b0c0:	f7ff ff7c 	bl	800afbc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800b0c4:	210c      	movs	r1, #12
 800b0c6:	fb01 4505 	mla	r5, r1, r5, r4
 800b0ca:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0ce      	beq.n	800b070 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f885 3622 	strb.w	r3, [r5, #1570]	; 0x622
 800b0d8:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800b0e2:	e7c5      	b.n	800b070 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b0e4:	2344      	movs	r3, #68	; 0x44
 800b0e6:	fb03 4305 	mla	r3, r3, r5, r4
 800b0ea:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800b0ee:	b1d2      	cbz	r2, 800b126 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800b0f0:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 800b0f4:	42b3      	cmp	r3, r6
 800b0f6:	d0bb      	beq.n	800b070 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b0f8:	4632      	mov	r2, r6
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f7ff ff5d 	bl	800afbc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800b102:	4b0d      	ldr	r3, [pc, #52]	; (800b138 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800b104:	4630      	mov	r0, r6
 800b106:	681f      	ldr	r7, [r3, #0]
 800b108:	f8d4 8000 	ldr.w	r8, [r4]
 800b10c:	f7ff fe3c 	bl	800ad88 <e131::universe_to_multicast_ip(unsigned short)>
 800b110:	4641      	mov	r1, r8
 800b112:	4602      	mov	r2, r0
 800b114:	4638      	mov	r0, r7
 800b116:	f005 f9c2 	bl	801049e <Network::JoinGroup(int, unsigned int)>
 800b11a:	2144      	movs	r1, #68	; 0x44
 800b11c:	fb01 4405 	mla	r4, r1, r5, r4
 800b120:	f8a4 6510 	strh.w	r6, [r4, #1296]	; 0x510
 800b124:	e7a4      	b.n	800b070 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800b126:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800b12a:	3201      	adds	r2, #1
 800b12c:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800b130:	2201      	movs	r2, #1
 800b132:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800b136:	e7e4      	b.n	800b102 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800b138:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800b13c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800b13c:	b953      	cbnz	r3, 800b154 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800b13e:	2903      	cmp	r1, #3
 800b140:	d811      	bhi.n	800b166 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800b142:	230c      	movs	r3, #12
 800b144:	fb03 0001 	mla	r0, r3, r1, r0
 800b148:	f8b0 3620 	ldrh.w	r3, [r0, #1568]	; 0x620
 800b14c:	f890 0622 	ldrb.w	r0, [r0, #1570]	; 0x622
 800b150:	8013      	strh	r3, [r2, #0]
 800b152:	4770      	bx	lr
 800b154:	2344      	movs	r3, #68	; 0x44
 800b156:	fb03 0001 	mla	r0, r3, r1, r0
 800b15a:	f8b0 3510 	ldrh.w	r3, [r0, #1296]	; 0x510
 800b15e:	f890 0512 	ldrb.w	r0, [r0, #1298]	; 0x512
 800b162:	8013      	strh	r3, [r2, #0]
 800b164:	4770      	bx	lr
 800b166:	4618      	mov	r0, r3
 800b168:	4770      	bx	lr

0800b16a <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800b16a:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800b16e:	b923      	cbnz	r3, 800b17a <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800b170:	2301      	movs	r3, #1
 800b172:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800b176:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800b17a:	2344      	movs	r3, #68	; 0x44
 800b17c:	fb03 0001 	mla	r0, r3, r1, r0
 800b180:	2301      	movs	r3, #1
 800b182:	f880 3551 	strb.w	r3, [r0, #1361]	; 0x551
 800b186:	4770      	bx	lr

0800b188 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800b188:	4602      	mov	r2, r0
 800b18a:	2044      	movs	r0, #68	; 0x44
 800b18c:	4348      	muls	r0, r1
 800b18e:	b570      	push	{r4, r5, r6, lr}
 800b190:	1815      	adds	r5, r2, r0
 800b192:	460c      	mov	r4, r1
 800b194:	68d3      	ldr	r3, [r2, #12]
 800b196:	f8d5 1514 	ldr.w	r1, [r5, #1300]	; 0x514
 800b19a:	1a5b      	subs	r3, r3, r1
 800b19c:	f242 7110 	movw	r1, #10000	; 0x2710
 800b1a0:	428b      	cmp	r3, r1
 800b1a2:	d90a      	bls.n	800b1ba <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800b1a4:	2600      	movs	r6, #0
 800b1a6:	f200 501c 	addw	r0, r0, #1308	; 0x51c
 800b1aa:	2110      	movs	r1, #16
 800b1ac:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
 800b1b0:	4410      	add	r0, r2
 800b1b2:	f7ff fdfb 	bl	800adac <memset.constprop.0.isra.0>
 800b1b6:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800b1ba:	2044      	movs	r0, #68	; 0x44
 800b1bc:	4344      	muls	r4, r0
 800b1be:	1915      	adds	r5, r2, r4
 800b1c0:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
 800b1c4:	68d3      	ldr	r3, [r2, #12]
 800b1c6:	1a5b      	subs	r3, r3, r1
 800b1c8:	f242 7110 	movw	r1, #10000	; 0x2710
 800b1cc:	428b      	cmp	r3, r1
 800b1ce:	d90a      	bls.n	800b1e6 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800b1d0:	2600      	movs	r6, #0
 800b1d2:	f504 64a7 	add.w	r4, r4, #1336	; 0x538
 800b1d6:	2110      	movs	r1, #16
 800b1d8:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 800b1dc:	1910      	adds	r0, r2, r4
 800b1de:	f7ff fde5 	bl	800adac <memset.constprop.0.isra.0>
 800b1e2:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800b1e6:	f892 1595 	ldrb.w	r1, [r2, #1429]	; 0x595
 800b1ea:	f892 3551 	ldrb.w	r3, [r2, #1361]	; 0x551
 800b1ee:	430b      	orrs	r3, r1
 800b1f0:	f892 15d9 	ldrb.w	r1, [r2, #1497]	; 0x5d9
 800b1f4:	430b      	orrs	r3, r1
 800b1f6:	d107      	bne.n	800b208 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800b1f8:	f892 361d 	ldrb.w	r3, [r2, #1565]	; 0x61d
 800b1fc:	b923      	cbnz	r3, 800b208 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800b1fe:	2101      	movs	r1, #1
 800b200:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800b204:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800b208:	bd70      	pop	{r4, r5, r6, pc}

0800b20a <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800b20a:	2244      	movs	r2, #68	; 0x44
 800b20c:	fb02 0101 	mla	r1, r2, r1, r0
 800b210:	68c3      	ldr	r3, [r0, #12]
 800b212:	f8d1 0530 	ldr.w	r0, [r1, #1328]	; 0x530
 800b216:	b510      	push	{r4, lr}
 800b218:	1a1a      	subs	r2, r3, r0
 800b21a:	f8d1 4514 	ldr.w	r4, [r1, #1300]	; 0x514
 800b21e:	f8d1 0534 	ldr.w	r0, [r1, #1332]	; 0x534
 800b222:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800b226:	b171      	cbz	r1, 800b246 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800b228:	1b1b      	subs	r3, r3, r4
 800b22a:	b128      	cbz	r0, 800b238 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800b22c:	f242 700f 	movw	r0, #9999	; 0x270f
 800b230:	4283      	cmp	r3, r0
 800b232:	d90d      	bls.n	800b250 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800b234:	4282      	cmp	r2, r0
 800b236:	e002      	b.n	800b23e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800b238:	f242 7010 	movw	r0, #10000	; 0x2710
 800b23c:	4283      	cmp	r3, r0
 800b23e:	bf94      	ite	ls
 800b240:	2000      	movls	r0, #0
 800b242:	2001      	movhi	r0, #1
 800b244:	bd10      	pop	{r4, pc}
 800b246:	2800      	cmp	r0, #0
 800b248:	d0fc      	beq.n	800b244 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800b24a:	f242 7010 	movw	r0, #10000	; 0x2710
 800b24e:	e7f1      	b.n	800b234 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800b250:	2000      	movs	r0, #0
 800b252:	e7f7      	b.n	800b244 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800b254 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800b254:	684a      	ldr	r2, [r1, #4]
 800b256:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b258:	b510      	push	{r4, lr}
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d10b      	bne.n	800b276 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x22>
 800b25e:	f100 0392 	add.w	r3, r0, #146	; 0x92
 800b262:	3108      	adds	r1, #8
 800b264:	30a2      	adds	r0, #162	; 0xa2
 800b266:	4298      	cmp	r0, r3
 800b268:	d007      	beq.n	800b27a <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800b26a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b26e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b272:	4294      	cmp	r4, r2
 800b274:	d0f7      	beq.n	800b266 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800b276:	2000      	movs	r0, #0
 800b278:	bd10      	pop	{r4, pc}
 800b27a:	2001      	movs	r0, #1
 800b27c:	e7fc      	b.n	800b278 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x24>
	...

0800b280 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800b280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	2301      	movs	r3, #1
 800b286:	4605      	mov	r5, r0
 800b288:	4690      	mov	r8, r2
 800b28a:	460f      	mov	r7, r1
 800b28c:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800b290:	2900      	cmp	r1, #0
 800b292:	d03d      	beq.n	800b310 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800b294:	2a00      	cmp	r2, #0
 800b296:	d03b      	beq.n	800b310 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800b298:	2600      	movs	r6, #0
 800b29a:	f240 6804 	movw	r8, #1540	; 0x604
 800b29e:	4637      	mov	r7, r6
 800b2a0:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800b2a4:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800b2a8:	f200 541c 	addw	r4, r0, #1308	; 0x51c
 800b2ac:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800b2b0:	b1e3      	cbz	r3, 800b2ec <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6c>
 800b2b2:	6868      	ldr	r0, [r5, #4]
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	6803      	ldr	r3, [r0, #0]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	4798      	blx	r3
 800b2bc:	2110      	movs	r1, #16
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f844 7c04 	str.w	r7, [r4, #-4]
 800b2c4:	f7ff fd72 	bl	800adac <memset.constprop.0.isra.0>
 800b2c8:	2110      	movs	r1, #16
 800b2ca:	f104 001c 	add.w	r0, r4, #28
 800b2ce:	61a7      	str	r7, [r4, #24]
 800b2d0:	f7ff fd6c 	bl	800adac <memset.constprop.0.isra.0>
 800b2d4:	f7fe f952 	bl	800957c <lightset::Data::Get()>
 800b2d8:	fb08 0006 	mla	r0, r8, r6, r0
 800b2dc:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800b2e0:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800b2e4:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
 800b2e8:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
 800b2ec:	3601      	adds	r6, #1
 800b2ee:	2e04      	cmp	r6, #4
 800b2f0:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800b2f4:	d1da      	bne.n	800b2ac <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800b2f6:	4b25      	ldr	r3, [pc, #148]	; (800b38c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10c>)
 800b2f8:	2102      	movs	r1, #2
 800b2fa:	6818      	ldr	r0, [r3, #0]
 800b2fc:	f007 fbba 	bl	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 800b300:	f895 350d 	ldrb.w	r3, [r5, #1293]	; 0x50d
 800b304:	f023 0302 	bic.w	r3, r3, #2
 800b308:	f885 350d 	strb.w	r3, [r5, #1293]	; 0x50d
 800b30c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b310:	2600      	movs	r6, #0
 800b312:	f240 6b04 	movw	fp, #1540	; 0x604
 800b316:	46b1      	mov	r9, r6
 800b318:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800b31c:	7ea3      	ldrb	r3, [r4, #26]
 800b31e:	b373      	cbz	r3, 800b37e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800b320:	b15f      	cbz	r7, 800b33a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800b322:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800b326:	b143      	cbz	r3, 800b33a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800b328:	2110      	movs	r1, #16
 800b32a:	f844 9c20 	str.w	r9, [r4, #-32]
 800b32e:	f1a4 001c 	sub.w	r0, r4, #28
 800b332:	f7ff fd3b 	bl	800adac <memset.constprop.0.isra.0>
 800b336:	f884 9019 	strb.w	r9, [r4, #25]
 800b33a:	f1b8 0f00 	cmp.w	r8, #0
 800b33e:	d00a      	beq.n	800b356 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800b340:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b344:	b13b      	cbz	r3, 800b356 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800b346:	2110      	movs	r1, #16
 800b348:	4620      	mov	r0, r4
 800b34a:	f844 9c04 	str.w	r9, [r4, #-4]
 800b34e:	f7ff fd2d 	bl	800adac <memset.constprop.0.isra.0>
 800b352:	f884 9019 	strb.w	r9, [r4, #25]
 800b356:	f895 a4f5 	ldrb.w	sl, [r5, #1269]	; 0x4f5
 800b35a:	f1ba 0f00 	cmp.w	sl, #0
 800b35e:	d10e      	bne.n	800b37e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800b360:	6868      	ldr	r0, [r5, #4]
 800b362:	4631      	mov	r1, r6
 800b364:	6803      	ldr	r3, [r0, #0]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	4798      	blx	r3
 800b36a:	f7fe f907 	bl	800957c <lightset::Data::Get()>
 800b36e:	fb0b 0006 	mla	r0, fp, r6, r0
 800b372:	f8c0 a600 	str.w	sl, [r0, #1536]	; 0x600
 800b376:	f884 a018 	strb.w	sl, [r4, #24]
 800b37a:	f884 a01a 	strb.w	sl, [r4, #26]
 800b37e:	3601      	adds	r6, #1
 800b380:	2e04      	cmp	r6, #4
 800b382:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800b386:	d1c9      	bne.n	800b31c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9c>
 800b388:	e7b5      	b.n	800b2f6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x76>
 800b38a:	bf00      	nop
 800b38c:	2000aef0 	strdcs	sl, [r0], -r0

0800b390 <E131Bridge::HandleDmx()>:
 800b390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	4604      	mov	r4, r0
 800b396:	2600      	movs	r6, #0
 800b398:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800b39c:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800b3a0:	ba7f      	rev16	r7, r7
 800b3a2:	b2bf      	uxth	r7, r7
 800b3a4:	3f01      	subs	r7, #1
 800b3a6:	f200 551c 	addw	r5, r0, #1308	; 0x51c
 800b3aa:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800b3ae:	b353      	cbz	r3, 800b406 <E131Bridge::HandleDmx()+0x76>
 800b3b0:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800b3b4:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800b3b8:	ba5b      	rev16	r3, r3
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d122      	bne.n	800b406 <E131Bridge::HandleDmx()+0x76>
 800b3c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b3c4:	f1a5 0108 	sub.w	r1, r5, #8
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	f7ff ff42 	bl	800b254 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800b3d0:	f105 0114 	add.w	r1, r5, #20
 800b3d4:	4682      	mov	sl, r0
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7ff ff3c 	bl	800b254 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800b3dc:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800b3e0:	4680      	mov	r8, r0
 800b3e2:	f1ba 0f00 	cmp.w	sl, #0
 800b3e6:	d016      	beq.n	800b416 <E131Bridge::HandleDmx()+0x86>
 800b3e8:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b3ec:	7c2a      	ldrb	r2, [r5, #16]
 800b3ee:	742b      	strb	r3, [r5, #16]
 800b3f0:	3313      	adds	r3, #19
 800b3f2:	1a9b      	subs	r3, r3, r2
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	2b13      	cmp	r3, #19
 800b3f8:	d905      	bls.n	800b406 <E131Bridge::HandleDmx()+0x76>
 800b3fa:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800b3fe:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800b402:	2a00      	cmp	r2, #0
 800b404:	da10      	bge.n	800b428 <E131Bridge::HandleDmx()+0x98>
 800b406:	3601      	adds	r6, #1
 800b408:	2e04      	cmp	r6, #4
 800b40a:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800b40e:	d1cc      	bne.n	800b3aa <E131Bridge::HandleDmx()+0x1a>
 800b410:	b003      	add	sp, #12
 800b412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b416:	2800      	cmp	r0, #0
 800b418:	d0ef      	beq.n	800b3fa <E131Bridge::HandleDmx()+0x6a>
 800b41a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b41e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800b422:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800b426:	e7e3      	b.n	800b3f0 <E131Bridge::HandleDmx()+0x60>
 800b428:	065a      	lsls	r2, r3, #25
 800b42a:	d50b      	bpl.n	800b444 <E131Bridge::HandleDmx()+0xb4>
 800b42c:	f1ba 0f00 	cmp.w	sl, #0
 800b430:	d102      	bne.n	800b438 <E131Bridge::HandleDmx()+0xa8>
 800b432:	f1b8 0f00 	cmp.w	r8, #0
 800b436:	d0e6      	beq.n	800b406 <E131Bridge::HandleDmx()+0x76>
 800b438:	4642      	mov	r2, r8
 800b43a:	4651      	mov	r1, sl
 800b43c:	4620      	mov	r0, r4
 800b43e:	f7ff ff1f 	bl	800b280 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800b442:	e7e0      	b.n	800b406 <E131Bridge::HandleDmx()+0x76>
 800b444:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800b448:	b133      	cbz	r3, 800b458 <E131Bridge::HandleDmx()+0xc8>
 800b44a:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800b44e:	b91b      	cbnz	r3, 800b458 <E131Bridge::HandleDmx()+0xc8>
 800b450:	4631      	mov	r1, r6
 800b452:	4620      	mov	r0, r4
 800b454:	f7ff fe98 	bl	800b188 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800b458:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800b45c:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800b460:	4293      	cmp	r3, r2
 800b462:	d259      	bcs.n	800b518 <E131Bridge::HandleDmx()+0x188>
 800b464:	4631      	mov	r1, r6
 800b466:	4620      	mov	r0, r4
 800b468:	9301      	str	r3, [sp, #4]
 800b46a:	f7ff fece 	bl	800b20a <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d0c9      	beq.n	800b406 <E131Bridge::HandleDmx()+0x76>
 800b472:	9b01      	ldr	r3, [sp, #4]
 800b474:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800b478:	9b00      	ldr	r3, [sp, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d154      	bne.n	800b528 <E131Bridge::HandleDmx()+0x198>
 800b47e:	f1bb 0f00 	cmp.w	fp, #0
 800b482:	d15c      	bne.n	800b53e <E131Bridge::HandleDmx()+0x1ae>
 800b484:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b486:	2210      	movs	r2, #16
 800b488:	f845 3c04 	str.w	r3, [r5, #-4]
 800b48c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b490:	4628      	mov	r0, r5
 800b492:	742b      	strb	r3, [r5, #16]
 800b494:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800b498:	f7ff fc90 	bl	800adbc <memcpy.isra.0>
 800b49c:	68e3      	ldr	r3, [r4, #12]
 800b49e:	463a      	mov	r2, r7
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f845 3c08 	str.w	r3, [r5, #-8]
 800b4a8:	f7fe f874 	bl	8009594 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800b4ac:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800b4b0:	069b      	lsls	r3, r3, #26
 800b4b2:	f100 80ad 	bmi.w	800b610 <E131Bridge::HandleDmx()+0x280>
 800b4b6:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	2a00      	cmp	r2, #0
 800b4be:	f000 80ab 	beq.w	800b618 <E131Bridge::HandleDmx()+0x288>
 800b4c2:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800b4c6:	2a00      	cmp	r2, #0
 800b4c8:	f040 80a6 	bne.w	800b618 <E131Bridge::HandleDmx()+0x288>
 800b4cc:	ba5b      	rev16	r3, r3
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	f1ba 0f00 	cmp.w	sl, #0
 800b4d4:	f040 8099 	bne.w	800b60a <E131Bridge::HandleDmx()+0x27a>
 800b4d8:	f1b8 0f00 	cmp.w	r8, #0
 800b4dc:	f040 8095 	bne.w	800b60a <E131Bridge::HandleDmx()+0x27a>
 800b4e0:	69aa      	ldr	r2, [r5, #24]
 800b4e2:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800b4e6:	3a00      	subs	r2, #0
 800b4e8:	bf18      	it	ne
 800b4ea:	2201      	movne	r2, #1
 800b4ec:	3900      	subs	r1, #0
 800b4ee:	bf18      	it	ne
 800b4f0:	2101      	movne	r1, #1
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f7ff fd82 	bl	800affc <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800b4f8:	f240 1301 	movw	r3, #257	; 0x101
 800b4fc:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800b500:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800b504:	2b00      	cmp	r3, #0
 800b506:	f040 808c 	bne.w	800b622 <E131Bridge::HandleDmx()+0x292>
 800b50a:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b50e:	f043 0302 	orr.w	r3, r3, #2
 800b512:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800b516:	e776      	b.n	800b406 <E131Bridge::HandleDmx()+0x76>
 800b518:	d9ae      	bls.n	800b478 <E131Bridge::HandleDmx()+0xe8>
 800b51a:	2200      	movs	r2, #0
 800b51c:	f845 2c04 	str.w	r2, [r5, #-4]
 800b520:	61aa      	str	r2, [r5, #24]
 800b522:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800b526:	e7a5      	b.n	800b474 <E131Bridge::HandleDmx()+0xe4>
 800b528:	f1ba 0f00 	cmp.w	sl, #0
 800b52c:	f000 8092 	beq.w	800b654 <E131Bridge::HandleDmx()+0x2c4>
 800b530:	f1bb 0f00 	cmp.w	fp, #0
 800b534:	d15c      	bne.n	800b5f0 <E131Bridge::HandleDmx()+0x260>
 800b536:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b53a:	742b      	strb	r3, [r5, #16]
 800b53c:	e7ae      	b.n	800b49c <E131Bridge::HandleDmx()+0x10c>
 800b53e:	f1b8 0f00 	cmp.w	r8, #0
 800b542:	d03b      	beq.n	800b5bc <E131Bridge::HandleDmx()+0x22c>
 800b544:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b548:	f240 6b04 	movw	fp, #1540	; 0x604
 800b54c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800b550:	68e3      	ldr	r3, [r4, #12]
 800b552:	fb0b fb06 	mul.w	fp, fp, r6
 800b556:	616b      	str	r3, [r5, #20]
 800b558:	f7fe f810 	bl	800957c <lightset::Data::Get()>
 800b55c:	4603      	mov	r3, r0
 800b55e:	f50b 7000 	add.w	r0, fp, #512	; 0x200
 800b562:	463a      	mov	r2, r7
 800b564:	4649      	mov	r1, r9
 800b566:	4418      	add	r0, r3
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	f7ff fc27 	bl	800adbc <memcpy.isra.0>
 800b56e:	9b00      	ldr	r3, [sp, #0]
 800b570:	f50b 6080 	add.w	r0, fp, #1024	; 0x400
 800b574:	eb03 020b 	add.w	r2, r3, fp
 800b578:	f8c2 7600 	str.w	r7, [r2, #1536]	; 0x600
 800b57c:	4649      	mov	r1, r9
 800b57e:	463a      	mov	r2, r7
 800b580:	4418      	add	r0, r3
 800b582:	f7ff fc1b 	bl	800adbc <memcpy.isra.0>
 800b586:	e791      	b.n	800b4ac <E131Bridge::HandleDmx()+0x11c>
 800b588:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b58a:	2210      	movs	r2, #16
 800b58c:	61ab      	str	r3, [r5, #24]
 800b58e:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b592:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800b596:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800b59a:	f105 001c 	add.w	r0, r5, #28
 800b59e:	f7ff fc0d 	bl	800adbc <memcpy.isra.0>
 800b5a2:	68e3      	ldr	r3, [r4, #12]
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	616b      	str	r3, [r5, #20]
 800b5aa:	f7ff fdde 	bl	800b16a <E131Bridge::UpdateMergeStatus(unsigned int)>
 800b5ae:	463a      	mov	r2, r7
 800b5b0:	4649      	mov	r1, r9
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b5b6:	f7fe f833 	bl	8009620 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b5ba:	e777      	b.n	800b4ac <E131Bridge::HandleDmx()+0x11c>
 800b5bc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b5be:	2210      	movs	r2, #16
 800b5c0:	f845 3c04 	str.w	r3, [r5, #-4]
 800b5c4:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	742b      	strb	r3, [r5, #16]
 800b5cc:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800b5d0:	f7ff fbf4 	bl	800adbc <memcpy.isra.0>
 800b5d4:	68e3      	ldr	r3, [r4, #12]
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f845 3c08 	str.w	r3, [r5, #-8]
 800b5de:	f7ff fdc4 	bl	800b16a <E131Bridge::UpdateMergeStatus(unsigned int)>
 800b5e2:	463a      	mov	r2, r7
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b5ea:	f7fd fff0 	bl	80095ce <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b5ee:	e75d      	b.n	800b4ac <E131Bridge::HandleDmx()+0x11c>
 800b5f0:	f1b8 0f00 	cmp.w	r8, #0
 800b5f4:	d103      	bne.n	800b5fe <E131Bridge::HandleDmx()+0x26e>
 800b5f6:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b5fa:	742b      	strb	r3, [r5, #16]
 800b5fc:	e7ea      	b.n	800b5d4 <E131Bridge::HandleDmx()+0x244>
 800b5fe:	481b      	ldr	r0, [pc, #108]	; (800b66c <E131Bridge::HandleDmx()+0x2dc>)
 800b600:	b003      	add	sp, #12
 800b602:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b606:	f007 be15 	b.w	8013234 <printf>
 800b60a:	4642      	mov	r2, r8
 800b60c:	4651      	mov	r1, sl
 800b60e:	e770      	b.n	800b4f2 <E131Bridge::HandleDmx()+0x162>
 800b610:	f04f 0300 	mov.w	r3, #0
 800b614:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800b618:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f47f af6f 	bne.w	800b500 <E131Bridge::HandleDmx()+0x170>
 800b622:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b626:	f7fd ffa9 	bl	800957c <lightset::Data::Get()>
 800b62a:	4632      	mov	r2, r6
 800b62c:	4641      	mov	r1, r8
 800b62e:	f7ff fbcf 	bl	800add0 <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800b632:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800b636:	2b00      	cmp	r3, #0
 800b638:	f47f af67 	bne.w	800b50a <E131Bridge::HandleDmx()+0x17a>
 800b63c:	6860      	ldr	r0, [r4, #4]
 800b63e:	4631      	mov	r1, r6
 800b640:	6803      	ldr	r3, [r0, #0]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	4798      	blx	r3
 800b646:	f04f 0301 	mov.w	r3, #1
 800b64a:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800b64e:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800b652:	e75a      	b.n	800b50a <E131Bridge::HandleDmx()+0x17a>
 800b654:	f1bb 0f00 	cmp.w	fp, #0
 800b658:	d096      	beq.n	800b588 <E131Bridge::HandleDmx()+0x1f8>
 800b65a:	f1b8 0f00 	cmp.w	r8, #0
 800b65e:	d0ce      	beq.n	800b5fe <E131Bridge::HandleDmx()+0x26e>
 800b660:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b664:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800b668:	e79b      	b.n	800b5a2 <E131Bridge::HandleDmx()+0x212>
 800b66a:	bf00      	nop
 800b66c:	080156f0 	stmdaeq	r1, {r4, r5, r6, r7, r9, sl, ip, lr}

0800b670 <E131Bridge::IsStatusChanged()>:
 800b670:	4603      	mov	r3, r0
 800b672:	f890 04f8 	ldrb.w	r0, [r0, #1272]	; 0x4f8
 800b676:	b110      	cbz	r0, 800b67e <E131Bridge::IsStatusChanged()+0xe>
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800b67e:	4770      	bx	lr

0800b680 <E131Bridge::Clear(unsigned int)>:
 800b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b682:	460d      	mov	r5, r1
 800b684:	4604      	mov	r4, r0
 800b686:	6847      	ldr	r7, [r0, #4]
 800b688:	f7fd ff78 	bl	800957c <lightset::Data::Get()>
 800b68c:	f240 6204 	movw	r2, #1540	; 0x604
 800b690:	4606      	mov	r6, r0
 800b692:	436a      	muls	r2, r5
 800b694:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800b698:	4430      	add	r0, r6
 800b69a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b69e:	f7ff fb85 	bl	800adac <memset.constprop.0.isra.0>
 800b6a2:	4432      	add	r2, r6
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	2644      	movs	r6, #68	; 0x44
 800b6a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6ac:	fb06 4605 	mla	r6, r6, r5, r4
 800b6b0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 800b6b4:	4639      	mov	r1, r7
 800b6b6:	462a      	mov	r2, r5
 800b6b8:	f7ff fb8a 	bl	800add0 <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800b6bc:	f896 3512 	ldrb.w	r3, [r6, #1298]	; 0x512
 800b6c0:	b153      	cbz	r3, 800b6d8 <E131Bridge::Clear(unsigned int)+0x58>
 800b6c2:	f896 3552 	ldrb.w	r3, [r6, #1362]	; 0x552
 800b6c6:	b93b      	cbnz	r3, 800b6d8 <E131Bridge::Clear(unsigned int)+0x58>
 800b6c8:	6860      	ldr	r0, [r4, #4]
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	6803      	ldr	r3, [r0, #0]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	4798      	blx	r3
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	f886 3552 	strb.w	r3, [r6, #1362]	; 0x552
 800b6d8:	2300      	movs	r3, #0
 800b6da:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800b6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6e0 <E131Bridge::IsValidRoot()>:
 800b6e0:	4a0d      	ldr	r2, [pc, #52]	; (800b718 <E131Bridge::IsValidRoot()+0x38>)
 800b6e2:	b530      	push	{r4, r5, lr}
 800b6e4:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800b6e8:	f100 058c 	add.w	r5, r0, #140	; 0x8c
 800b6ec:	42ab      	cmp	r3, r5
 800b6ee:	d007      	beq.n	800b700 <E131Bridge::IsValidRoot()+0x20>
 800b6f0:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b6f4:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b6f8:	428c      	cmp	r4, r1
 800b6fa:	d0f7      	beq.n	800b6ec <E131Bridge::IsValidRoot()+0xc>
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	e008      	b.n	800b712 <E131Bridge::IsValidRoot()+0x32>
 800b700:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800b704:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800b708:	d004      	beq.n	800b714 <E131Bridge::IsValidRoot()+0x34>
 800b70a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800b70e:	4258      	negs	r0, r3
 800b710:	4158      	adcs	r0, r3
 800b712:	bd30      	pop	{r4, r5, pc}
 800b714:	2001      	movs	r0, #1
 800b716:	e7fc      	b.n	800b712 <E131Bridge::IsValidRoot()+0x32>
 800b718:	080157a0 	stmdaeq	r1, {r5, r7, r8, r9, sl, ip, lr}

0800b71c <E131Bridge::IsValidDataPacket()>:
 800b71c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800b720:	2b02      	cmp	r3, #2
 800b722:	d10d      	bne.n	800b740 <E131Bridge::IsValidDataPacket()+0x24>
 800b724:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800b728:	2ba1      	cmp	r3, #161	; 0xa1
 800b72a:	d109      	bne.n	800b740 <E131Bridge::IsValidDataPacket()+0x24>
 800b72c:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800b730:	b933      	cbnz	r3, 800b740 <E131Bridge::IsValidDataPacket()+0x24>
 800b732:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800b736:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800b73a:	4258      	negs	r0, r3
 800b73c:	4158      	adcs	r0, r3
 800b73e:	4770      	bx	lr
 800b740:	2000      	movs	r0, #0
 800b742:	4770      	bx	lr

0800b744 <E131Bridge::Run()>:
 800b744:	b530      	push	{r4, r5, lr}
 800b746:	4601      	mov	r1, r0
 800b748:	4604      	mov	r4, r0
 800b74a:	b085      	sub	sp, #20
 800b74c:	f10d 030e 	add.w	r3, sp, #14
 800b750:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800b754:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800b75e:	f004 f963 	bl	800fa28 <udp_recv>
 800b762:	4b3c      	ldr	r3, [pc, #240]	; (800b854 <E131Bridge::Run()+0x110>)
 800b764:	681d      	ldr	r5, [r3, #0]
 800b766:	60e5      	str	r5, [r4, #12]
 800b768:	2800      	cmp	r0, #0
 800b76a:	d13b      	bne.n	800b7e4 <E131Bridge::Run()+0xa0>
 800b76c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800b770:	b183      	cbz	r3, 800b794 <E131Bridge::Run()+0x50>
 800b772:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800b776:	bb73      	cbnz	r3, 800b7d6 <E131Bridge::Run()+0x92>
 800b778:	6923      	ldr	r3, [r4, #16]
 800b77a:	1aed      	subs	r5, r5, r3
 800b77c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800b780:	429d      	cmp	r5, r3
 800b782:	d928      	bls.n	800b7d6 <E131Bridge::Run()+0x92>
 800b784:	6863      	ldr	r3, [r4, #4]
 800b786:	b9eb      	cbnz	r3, 800b7c4 <E131Bridge::Run()+0x80>
 800b788:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b78c:	f023 0302 	bic.w	r3, r3, #2
 800b790:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800b794:	6963      	ldr	r3, [r4, #20]
 800b796:	b12b      	cbz	r3, 800b7a4 <E131Bridge::Run()+0x60>
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 f94f 	bl	800ba3c <E131Bridge::HandleDmxIn()>
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f000 f8ca 	bl	800b938 <E131Bridge::SendDiscoveryPacket()>
 800b7a4:	7a23      	ldrb	r3, [r4, #8]
 800b7a6:	b15b      	cbz	r3, 800b7c0 <E131Bridge::Run()+0x7c>
 800b7a8:	4b2b      	ldr	r3, [pc, #172]	; (800b858 <E131Bridge::Run()+0x114>)
 800b7aa:	6818      	ldr	r0, [r3, #0]
 800b7ac:	6843      	ldr	r3, [r0, #4]
 800b7ae:	2b04      	cmp	r3, #4
 800b7b0:	d006      	beq.n	800b7c0 <E131Bridge::Run()+0x7c>
 800b7b2:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d049      	beq.n	800b84e <E131Bridge::Run()+0x10a>
 800b7ba:	2103      	movs	r1, #3
 800b7bc:	f007 f95a 	bl	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 800b7c0:	b005      	add	sp, #20
 800b7c2:	bd30      	pop	{r4, r5, pc}
 800b7c4:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1dd      	bne.n	800b788 <E131Bridge::Run()+0x44>
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	f7ff fd55 	bl	800b280 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800b7d6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800b7da:	1a9b      	subs	r3, r3, r2
 800b7dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b7e0:	d3d8      	bcc.n	800b794 <E131Bridge::Run()+0x50>
 800b7e2:	e7d1      	b.n	800b788 <E131Bridge::Run()+0x44>
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f7ff ff7b 	bl	800b6e0 <E131Bridge::IsValidRoot()>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d0e8      	beq.n	800b7c0 <E131Bridge::Run()+0x7c>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800b7f4:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800b7f8:	6125      	str	r5, [r4, #16]
 800b7fa:	b15b      	cbz	r3, 800b814 <E131Bridge::Run()+0xd0>
 800b7fc:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800b800:	b943      	cbnz	r3, 800b814 <E131Bridge::Run()+0xd0>
 800b802:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800b806:	1aad      	subs	r5, r5, r2
 800b808:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800b80c:	4295      	cmp	r5, r2
 800b80e:	bf88      	it	hi
 800b810:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800b814:	6863      	ldr	r3, [r4, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d0bc      	beq.n	800b794 <E131Bridge::Run()+0x50>
 800b81a:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800b81e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b822:	ba1a      	rev	r2, r3
 800b824:	d108      	bne.n	800b838 <E131Bridge::Run()+0xf4>
 800b826:	4620      	mov	r0, r4
 800b828:	f7ff ff78 	bl	800b71c <E131Bridge::IsValidDataPacket()>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d0b1      	beq.n	800b794 <E131Bridge::Run()+0x50>
 800b830:	4620      	mov	r0, r4
 800b832:	f7ff fdad 	bl	800b390 <E131Bridge::HandleDmx()>
 800b836:	e7ad      	b.n	800b794 <E131Bridge::Run()+0x50>
 800b838:	2a08      	cmp	r2, #8
 800b83a:	d1ab      	bne.n	800b794 <E131Bridge::Run()+0x50>
 800b83c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b844:	d1a6      	bne.n	800b794 <E131Bridge::Run()+0x50>
 800b846:	4620      	mov	r0, r4
 800b848:	f000 f972 	bl	800bb30 <E131Bridge::HandleSynchronization()>
 800b84c:	e7a2      	b.n	800b794 <E131Bridge::Run()+0x50>
 800b84e:	2102      	movs	r1, #2
 800b850:	e7b4      	b.n	800b7bc <E131Bridge::Run()+0x78>
 800b852:	bf00      	nop
 800b854:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800b858:	2000aef0 	strdcs	sl, [r0], -r0

0800b85c <E131Bridge::FillDiscoveryPacket()>:
 800b85c:	2200      	movs	r2, #0
 800b85e:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800b862:	b510      	push	{r4, lr}
 800b864:	333c      	adds	r3, #60	; 0x3c
 800b866:	005b      	lsls	r3, r3, #1
 800b868:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800b86c:	69c3      	ldr	r3, [r0, #28]
 800b86e:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800b872:	428b      	cmp	r3, r1
 800b874:	d002      	beq.n	800b87c <E131Bridge::FillDiscoveryPacket()+0x20>
 800b876:	f803 2b01 	strb.w	r2, [r3], #1
 800b87a:	e7fa      	b.n	800b872 <E131Bridge::FillDiscoveryPacket()+0x16>
 800b87c:	69c3      	ldr	r3, [r0, #28]
 800b87e:	492d      	ldr	r1, [pc, #180]	; (800b934 <E131Bridge::FillDiscoveryPacket()+0xd8>)
 800b880:	701a      	strb	r2, [r3, #0]
 800b882:	2210      	movs	r2, #16
 800b884:	705a      	strb	r2, [r3, #1]
 800b886:	1d1a      	adds	r2, r3, #4
 800b888:	3310      	adds	r3, #16
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d004      	beq.n	800b898 <E131Bridge::FillDiscoveryPacket()+0x3c>
 800b88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b892:	f802 4b01 	strb.w	r4, [r2], #1
 800b896:	e7f8      	b.n	800b88a <E131Bridge::FillDiscoveryPacket()+0x2e>
 800b898:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800b89c:	69c3      	ldr	r3, [r0, #28]
 800b89e:	3234      	adds	r2, #52	; 0x34
 800b8a0:	0052      	lsls	r2, r2, #1
 800b8a2:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800b8a6:	ba52      	rev16	r2, r2
 800b8a8:	821a      	strh	r2, [r3, #16]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	749a      	strb	r2, [r3, #18]
 800b8ae:	74da      	strb	r2, [r3, #19]
 800b8b0:	751a      	strb	r2, [r3, #20]
 800b8b2:	2208      	movs	r2, #8
 800b8b4:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800b8b8:	755a      	strb	r2, [r3, #21]
 800b8ba:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800b8be:	3316      	adds	r3, #22
 800b8c0:	42a1      	cmp	r1, r4
 800b8c2:	d004      	beq.n	800b8ce <E131Bridge::FillDiscoveryPacket()+0x72>
 800b8c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8c8:	f803 2b01 	strb.w	r2, [r3], #1
 800b8cc:	e7f8      	b.n	800b8c0 <E131Bridge::FillDiscoveryPacket()+0x64>
 800b8ce:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800b8d2:	69c3      	ldr	r3, [r0, #28]
 800b8d4:	3229      	adds	r2, #41	; 0x29
 800b8d6:	0052      	lsls	r2, r2, #1
 800b8d8:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800b8dc:	ba52      	rev16	r2, r2
 800b8de:	84da      	strh	r2, [r3, #38]	; 0x26
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b8e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800b8ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	332c      	adds	r3, #44	; 0x2c
 800b8f2:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b8f6:	f100 0474 	add.w	r4, r0, #116	; 0x74
 800b8fa:	42a1      	cmp	r1, r4
 800b8fc:	d004      	beq.n	800b908 <E131Bridge::FillDiscoveryPacket()+0xac>
 800b8fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b902:	f803 2b01 	strb.w	r2, [r3], #1
 800b906:	e7f8      	b.n	800b8fa <E131Bridge::FillDiscoveryPacket()+0x9e>
 800b908:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800b90c:	69c2      	ldr	r2, [r0, #28]
 800b90e:	3304      	adds	r3, #4
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800b916:	ba5b      	rev16	r3, r3
 800b918:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800b91c:	2300      	movs	r3, #0
 800b91e:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800b922:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800b926:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800b92a:	2301      	movs	r3, #1
 800b92c:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800b930:	bd10      	pop	{r4, pc}
 800b932:	bf00      	nop
 800b934:	080157a0 	stmdaeq	r1, {r5, r7, r8, r9, sl, ip, lr}

0800b938 <E131Bridge::SendDiscoveryPacket()>:
 800b938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b93a:	f242 710f 	movw	r1, #9999	; 0x270f
 800b93e:	68c2      	ldr	r2, [r0, #12]
 800b940:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800b944:	4604      	mov	r4, r0
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	428b      	cmp	r3, r1
 800b94a:	d924      	bls.n	800b996 <E131Bridge::SendDiscoveryPacket()+0x5e>
 800b94c:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800b950:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800b954:	b1ab      	cbz	r3, 800b982 <E131Bridge::SendDiscoveryPacket()+0x4a>
 800b956:	2500      	movs	r5, #0
 800b958:	462e      	mov	r6, r5
 800b95a:	2300      	movs	r3, #0
 800b95c:	4629      	mov	r1, r5
 800b95e:	4620      	mov	r0, r4
 800b960:	f10d 020e 	add.w	r2, sp, #14
 800b964:	f7ff fbea 	bl	800b13c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800b968:	b140      	cbz	r0, 800b97c <E131Bridge::SendDiscoveryPacket()+0x44>
 800b96a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b96e:	69e2      	ldr	r2, [r4, #28]
 800b970:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800b974:	ba5b      	rev16	r3, r3
 800b976:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800b97a:	3601      	adds	r6, #1
 800b97c:	3501      	adds	r5, #1
 800b97e:	2d04      	cmp	r5, #4
 800b980:	d1eb      	bne.n	800b95a <E131Bridge::SendDiscoveryPacket()+0x22>
 800b982:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800b986:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	69e1      	ldr	r1, [r4, #28]
 800b98e:	6a23      	ldr	r3, [r4, #32]
 800b990:	7820      	ldrb	r0, [r4, #0]
 800b992:	f004 f8a5 	bl	800fae0 <udp_send>
 800b996:	b004      	add	sp, #16
 800b998:	bd70      	pop	{r4, r5, r6, pc}

0800b99a <memcpy.isra.0>:
 800b99a:	3801      	subs	r0, #1
 800b99c:	440a      	add	r2, r1
 800b99e:	4291      	cmp	r1, r2
 800b9a0:	d004      	beq.n	800b9ac <memcpy.isra.0+0x12>
 800b9a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9a6:	f800 3f01 	strb.w	r3, [r0, #1]!
 800b9aa:	e7f8      	b.n	800b99e <memcpy.isra.0+0x4>
 800b9ac:	4770      	bx	lr
	...

0800b9b0 <E131Bridge::FillDataPacket()>:
 800b9b0:	b570      	push	{r4, r5, r6, lr}
 800b9b2:	2400      	movs	r4, #0
 800b9b4:	2610      	movs	r6, #16
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	6980      	ldr	r0, [r0, #24]
 800b9ba:	220c      	movs	r2, #12
 800b9bc:	7046      	strb	r6, [r0, #1]
 800b9be:	7004      	strb	r4, [r0, #0]
 800b9c0:	7084      	strb	r4, [r0, #2]
 800b9c2:	70c4      	strb	r4, [r0, #3]
 800b9c4:	491c      	ldr	r1, [pc, #112]	; (800ba38 <E131Bridge::FillDataPacket()+0x88>)
 800b9c6:	3004      	adds	r0, #4
 800b9c8:	f7ff ffe7 	bl	800b99a <memcpy.isra.0>
 800b9cc:	2304      	movs	r3, #4
 800b9ce:	4632      	mov	r2, r6
 800b9d0:	2602      	movs	r6, #2
 800b9d2:	69a8      	ldr	r0, [r5, #24]
 800b9d4:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800b9d8:	7543      	strb	r3, [r0, #21]
 800b9da:	7484      	strb	r4, [r0, #18]
 800b9dc:	74c4      	strb	r4, [r0, #19]
 800b9de:	7504      	strb	r4, [r0, #20]
 800b9e0:	3016      	adds	r0, #22
 800b9e2:	f7ff ffda 	bl	800b99a <memcpy.isra.0>
 800b9e6:	69a8      	ldr	r0, [r5, #24]
 800b9e8:	2240      	movs	r2, #64	; 0x40
 800b9ea:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800b9ee:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800b9f2:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800b9f6:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800b9fa:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800b9fe:	302c      	adds	r0, #44	; 0x2c
 800ba00:	f7ff ffcb 	bl	800b99a <memcpy.isra.0>
 800ba04:	22a1      	movs	r2, #161	; 0xa1
 800ba06:	69ab      	ldr	r3, [r5, #24]
 800ba08:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800ba0c:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800ba10:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800ba14:	69ab      	ldr	r3, [r5, #24]
 800ba16:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800ba1a:	69ab      	ldr	r3, [r5, #24]
 800ba1c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800ba20:	2201      	movs	r2, #1
 800ba22:	69ab      	ldr	r3, [r5, #24]
 800ba24:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800ba28:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800ba2c:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800ba30:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800ba34:	bd70      	pop	{r4, r5, r6, pc}
 800ba36:	bf00      	nop
 800ba38:	080157a0 	stmdaeq	r1, {r5, r7, r8, r9, sl, ip, lr}

0800ba3c <E131Bridge::HandleDmxIn()>:
 800ba3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ba40:	4604      	mov	r4, r0
 800ba42:	4605      	mov	r5, r0
 800ba44:	2600      	movs	r6, #0
 800ba46:	4f39      	ldr	r7, [pc, #228]	; (800bb2c <E131Bridge::HandleDmxIn()+0xf0>)
 800ba48:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d053      	beq.n	800baf8 <E131Bridge::HandleDmxIn()+0xbc>
 800ba50:	6960      	ldr	r0, [r4, #20]
 800ba52:	4631      	mov	r1, r6
 800ba54:	6803      	ldr	r3, [r0, #0]
 800ba56:	aa02      	add	r2, sp, #8
 800ba58:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800ba5c:	ab03      	add	r3, sp, #12
 800ba5e:	47c0      	blx	r8
 800ba60:	4601      	mov	r1, r0
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d050      	beq.n	800bb08 <E131Bridge::HandleDmxIn()+0xcc>
 800ba66:	9b02      	ldr	r3, [sp, #8]
 800ba68:	69a0      	ldr	r0, [r4, #24]
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 800ba70:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800ba74:	ba52      	rev16	r2, r2
 800ba76:	8202      	strh	r2, [r0, #16]
 800ba78:	f103 0257 	add.w	r2, r3, #87	; 0x57
 800ba7c:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800ba80:	ba52      	rev16	r2, r2
 800ba82:	84c2      	strh	r2, [r0, #38]	; 0x26
 800ba84:	f895 2629 	ldrb.w	r2, [r5, #1577]	; 0x629
 800ba88:	330a      	adds	r3, #10
 800ba8a:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
 800ba8e:	f895 2628 	ldrb.w	r2, [r5, #1576]	; 0x628
 800ba92:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800ba96:	1c50      	adds	r0, r2, #1
 800ba98:	f885 0628 	strb.w	r0, [r5, #1576]	; 0x628
 800ba9c:	69a0      	ldr	r0, [r4, #24]
 800ba9e:	ba5b      	rev16	r3, r3
 800baa0:	f880 206f 	strb.w	r2, [r0, #111]	; 0x6f
 800baa4:	f8b5 2620 	ldrh.w	r2, [r5, #1568]	; 0x620
 800baa8:	69a0      	ldr	r0, [r4, #24]
 800baaa:	ba52      	rev16	r2, r2
 800baac:	f8a0 2071 	strh.w	r2, [r0, #113]	; 0x71
 800bab0:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800bab4:	9a02      	ldr	r2, [sp, #8]
 800bab6:	307d      	adds	r0, #125	; 0x7d
 800bab8:	f7ff ff6f 	bl	800b99a <memcpy.isra.0>
 800babc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800bac0:	69a1      	ldr	r1, [r4, #24]
 800bac2:	ba53      	rev16	r3, r2
 800bac4:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800bac8:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800bacc:	327d      	adds	r2, #125	; 0x7d
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 800bad4:	b292      	uxth	r2, r2
 800bad6:	7820      	ldrb	r0, [r4, #0]
 800bad8:	f004 f802 	bl	800fae0 <udp_send>
 800badc:	2301      	movs	r3, #1
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	40b3      	lsls	r3, r6
 800bae2:	ea33 0102 	bics.w	r1, r3, r2
 800bae6:	d007      	beq.n	800baf8 <E131Bridge::HandleDmxIn()+0xbc>
 800bae8:	4313      	orrs	r3, r2
 800baea:	603b      	str	r3, [r7, #0]
 800baec:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800baf0:	f043 0301 	orr.w	r3, r3, #1
 800baf4:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800baf8:	3601      	adds	r6, #1
 800bafa:	2e04      	cmp	r6, #4
 800bafc:	f105 050c 	add.w	r5, r5, #12
 800bb00:	d1a2      	bne.n	800ba48 <E131Bridge::HandleDmxIn()+0xc>
 800bb02:	b004      	add	sp, #16
 800bb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb08:	9b03      	ldr	r3, [sp, #12]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1f4      	bne.n	800baf8 <E131Bridge::HandleDmxIn()+0xbc>
 800bb0e:	2301      	movs	r3, #1
 800bb10:	fa03 f206 	lsl.w	r2, r3, r6
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	ea23 0302 	bic.w	r3, r3, r2
 800bb1a:	603b      	str	r3, [r7, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d1eb      	bne.n	800baf8 <E131Bridge::HandleDmxIn()+0xbc>
 800bb20:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800bb24:	f023 0301 	bic.w	r3, r3, #1
 800bb28:	e7e4      	b.n	800baf4 <E131Bridge::HandleDmxIn()+0xb8>
 800bb2a:	bf00      	nop
 800bb2c:	20001924 	andcs	r1, r0, r4, lsr #18

0800bb30 <E131Bridge::HandleSynchronization()>:
 800bb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb34:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800bb38:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800bb3c:	ba5b      	rev16	r3, r3
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	429a      	cmp	r2, r3
 800bb42:	4604      	mov	r4, r0
 800bb44:	d00a      	beq.n	800bb5c <E131Bridge::HandleSynchronization()+0x2c>
 800bb46:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d006      	beq.n	800bb5c <E131Bridge::HandleSynchronization()+0x2c>
 800bb4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb52:	4b23      	ldr	r3, [pc, #140]	; (800bbe0 <E131Bridge::HandleSynchronization()+0xb0>)
 800bb54:	2102      	movs	r1, #2
 800bb56:	6818      	ldr	r0, [r3, #0]
 800bb58:	f006 bf8c 	b.w	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 800bb5c:	2500      	movs	r5, #0
 800bb5e:	4627      	mov	r7, r4
 800bb60:	46a9      	mov	r9, r5
 800bb62:	68e3      	ldr	r3, [r4, #12]
 800bb64:	4e1f      	ldr	r6, [pc, #124]	; (800bbe4 <E131Bridge::HandleSynchronization()+0xb4>)
 800bb66:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800bbe8 <E131Bridge::HandleSynchronization()+0xb8>
 800bb6a:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800bb6e:	f897 3512 	ldrb.w	r3, [r7, #1298]	; 0x512
 800bb72:	b323      	cbz	r3, 800bbbe <E131Bridge::HandleSynchronization()+0x8e>
 800bb74:	f8d8 3000 	ldr.w	r3, [r8]
 800bb78:	6860      	ldr	r0, [r4, #4]
 800bb7a:	07da      	lsls	r2, r3, #31
 800bb7c:	bf5c      	itt	pl
 800bb7e:	2301      	movpl	r3, #1
 800bb80:	f8c8 3000 	strpl.w	r3, [r8]
 800bb84:	6803      	ldr	r3, [r0, #0]
 800bb86:	4629      	mov	r1, r5
 800bb88:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800bb8c:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800bb90:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800bb94:	47d0      	blx	sl
 800bb96:	f897 3552 	ldrb.w	r3, [r7, #1362]	; 0x552
 800bb9a:	b93b      	cbnz	r3, 800bbac <E131Bridge::HandleSynchronization()+0x7c>
 800bb9c:	6860      	ldr	r0, [r4, #4]
 800bb9e:	4629      	mov	r1, r5
 800bba0:	6803      	ldr	r3, [r0, #0]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	4798      	blx	r3
 800bba6:	2301      	movs	r3, #1
 800bba8:	f887 3552 	strb.w	r3, [r7, #1362]	; 0x552
 800bbac:	f8d8 3000 	ldr.w	r3, [r8]
 800bbb0:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800bbb4:	07db      	lsls	r3, r3, #31
 800bbb6:	bf5c      	itt	pl
 800bbb8:	2301      	movpl	r3, #1
 800bbba:	f8c8 3000 	strpl.w	r3, [r8]
 800bbbe:	3501      	adds	r5, #1
 800bbc0:	2d04      	cmp	r5, #4
 800bbc2:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800bbc6:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800bbca:	d1d0      	bne.n	800bb6e <E131Bridge::HandleSynchronization()+0x3e>
 800bbcc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800bbce:	b120      	cbz	r0, 800bbda <E131Bridge::HandleSynchronization()+0xaa>
 800bbd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd4:	6803      	ldr	r3, [r0, #0]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	4718      	bx	r3
 800bbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbde:	bf00      	nop
 800bbe0:	2000aef0 	strdcs	sl, [r0], -r0
 800bbe4:	20000100 	andcs	r0, r0, r0, lsl #2
 800bbe8:	200000fc 	strdcs	r0, [r0], -ip

0800bbec <E131Bridge::Print()>:
 800bbec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf0:	2500      	movs	r5, #0
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	b08c      	sub	sp, #48	; 0x30
 800bbf6:	a902      	add	r1, sp, #8
 800bbf8:	3024      	adds	r0, #36	; 0x24
 800bbfa:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800bbfe:	f000 f8b3 	bl	800bd68 <uuid_unparse>
 800bc02:	482c      	ldr	r0, [pc, #176]	; (800bcb4 <E131Bridge::Print()+0xc8>)
 800bc04:	f007 fb16 	bl	8013234 <printf>
 800bc08:	4b2b      	ldr	r3, [pc, #172]	; (800bcb8 <E131Bridge::Print()+0xcc>)
 800bc0a:	482c      	ldr	r0, [pc, #176]	; (800bcbc <E131Bridge::Print()+0xd0>)
 800bc0c:	7819      	ldrb	r1, [r3, #0]
 800bc0e:	785a      	ldrb	r2, [r3, #1]
 800bc10:	f007 fb10 	bl	8013234 <printf>
 800bc14:	482a      	ldr	r0, [pc, #168]	; (800bcc0 <E131Bridge::Print()+0xd4>)
 800bc16:	a902      	add	r1, sp, #8
 800bc18:	f007 fb0c 	bl	8013234 <printf>
 800bc1c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800bc20:	b303      	cbz	r3, 800bc64 <E131Bridge::Print()+0x78>
 800bc22:	4828      	ldr	r0, [pc, #160]	; (800bcc4 <E131Bridge::Print()+0xd8>)
 800bc24:	f007 fb06 	bl	8013234 <printf>
 800bc28:	4e27      	ldr	r6, [pc, #156]	; (800bcc8 <E131Bridge::Print()+0xdc>)
 800bc2a:	4f28      	ldr	r7, [pc, #160]	; (800bccc <E131Bridge::Print()+0xe0>)
 800bc2c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800bcd0 <E131Bridge::Print()+0xe4>
 800bc30:	2301      	movs	r3, #1
 800bc32:	4629      	mov	r1, r5
 800bc34:	4620      	mov	r0, r4
 800bc36:	f10d 0206 	add.w	r2, sp, #6
 800bc3a:	f7ff fa7f 	bl	800b13c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800bc3e:	b170      	cbz	r0, 800bc5e <E131Bridge::Print()+0x72>
 800bc40:	2344      	movs	r3, #68	; 0x44
 800bc42:	436b      	muls	r3, r5
 800bc44:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 800bc48:	58d3      	ldr	r3, [r2, r3]
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	bf0c      	ite	eq
 800bc50:	4633      	moveq	r3, r6
 800bc52:	463b      	movne	r3, r7
 800bc54:	4640      	mov	r0, r8
 800bc56:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bc5a:	f007 faeb 	bl	8013234 <printf>
 800bc5e:	3501      	adds	r5, #1
 800bc60:	2d04      	cmp	r5, #4
 800bc62:	d1e5      	bne.n	800bc30 <E131Bridge::Print()+0x44>
 800bc64:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800bc68:	b1d3      	cbz	r3, 800bca0 <E131Bridge::Print()+0xb4>
 800bc6a:	481a      	ldr	r0, [pc, #104]	; (800bcd4 <E131Bridge::Print()+0xe8>)
 800bc6c:	f007 fae2 	bl	8013234 <printf>
 800bc70:	2500      	movs	r5, #0
 800bc72:	4e19      	ldr	r6, [pc, #100]	; (800bcd8 <E131Bridge::Print()+0xec>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4629      	mov	r1, r5
 800bc78:	4620      	mov	r0, r4
 800bc7a:	f10d 0206 	add.w	r2, sp, #6
 800bc7e:	f7ff fa5d 	bl	800b13c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800bc82:	b150      	cbz	r0, 800bc9a <E131Bridge::Print()+0xae>
 800bc84:	230c      	movs	r3, #12
 800bc86:	436b      	muls	r3, r5
 800bc88:	f204 6229 	addw	r2, r4, #1577	; 0x629
 800bc8c:	5cd3      	ldrb	r3, [r2, r3]
 800bc8e:	4629      	mov	r1, r5
 800bc90:	4630      	mov	r0, r6
 800bc92:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bc96:	f007 facd 	bl	8013234 <printf>
 800bc9a:	3501      	adds	r5, #1
 800bc9c:	2d04      	cmp	r5, #4
 800bc9e:	d1e9      	bne.n	800bc74 <E131Bridge::Print()+0x88>
 800bca0:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800bca4:	b113      	cbz	r3, 800bcac <E131Bridge::Print()+0xc0>
 800bca6:	480d      	ldr	r0, [pc, #52]	; (800bcdc <E131Bridge::Print()+0xf0>)
 800bca8:	f007 fac4 	bl	8013234 <printf>
 800bcac:	b00c      	add	sp, #48	; 0x30
 800bcae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcb2:	bf00      	nop
 800bcb4:	0801571d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, sl, ip, lr}
 800bcb8:	080157ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, sl, ip, lr}
 800bcbc:	08015725 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl, ip, lr}
 800bcc0:	08015738 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, ip, lr}
 800bcc4:	080154bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, sl, ip, lr}
 800bcc8:	08015463 	stmdaeq	r1, {r0, r1, r5, r6, sl, ip, lr}
 800bccc:	08015467 	stmdaeq	r1, {r0, r1, r2, r5, r6, sl, ip, lr}
 800bcd0:	08015748 	stmdaeq	r1, {r3, r6, r8, r9, sl, ip, lr}
 800bcd4:	080154f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, sl, ip, lr}
 800bcd8:	08015767 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, sl, ip, lr}
 800bcdc:	08015786 	stmdaeq	r1, {r1, r2, r7, r8, r9, sl, ip, lr}

0800bce0 <uuid_unparse_x>:
 800bce0:	4603      	mov	r3, r0
 800bce2:	b530      	push	{r4, r5, lr}
 800bce4:	4608      	mov	r0, r1
 800bce6:	4611      	mov	r1, r2
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	b08f      	sub	sp, #60	; 0x3c
 800bcec:	ba12      	rev	r2, r2
 800bcee:	920a      	str	r2, [sp, #40]	; 0x28
 800bcf0:	889a      	ldrh	r2, [r3, #4]
 800bcf2:	891c      	ldrh	r4, [r3, #8]
 800bcf4:	ba52      	rev16	r2, r2
 800bcf6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800bcfa:	88da      	ldrh	r2, [r3, #6]
 800bcfc:	ba64      	rev16	r4, r4
 800bcfe:	ba52      	rev16	r2, r2
 800bd00:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800bd04:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800bd08:	f103 020a 	add.w	r2, r3, #10
 800bd0c:	f10d 0432 	add.w	r4, sp, #50	; 0x32
 800bd10:	3310      	adds	r3, #16
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d122      	bne.n	800bd5c <uuid_unparse_x+0x7c>
 800bd16:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800bd1a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800bd1e:	9208      	str	r2, [sp, #32]
 800bd20:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800bd24:	0a1b      	lsrs	r3, r3, #8
 800bd26:	9207      	str	r2, [sp, #28]
 800bd28:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800bd2c:	9301      	str	r3, [sp, #4]
 800bd2e:	9206      	str	r2, [sp, #24]
 800bd30:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800bd34:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800bd38:	9205      	str	r2, [sp, #20]
 800bd3a:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	9204      	str	r2, [sp, #16]
 800bd42:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800bd46:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800bd4a:	9203      	str	r2, [sp, #12]
 800bd4c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800bd50:	9202      	str	r2, [sp, #8]
 800bd52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd54:	f007 fa7e 	bl	8013254 <sprintf>
 800bd58:	b00f      	add	sp, #60	; 0x3c
 800bd5a:	bd30      	pop	{r4, r5, pc}
 800bd5c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bd60:	f804 5b01 	strb.w	r5, [r4], #1
 800bd64:	e7d5      	b.n	800bd12 <uuid_unparse_x+0x32>
	...

0800bd68 <uuid_unparse>:
 800bd68:	4a01      	ldr	r2, [pc, #4]	; (800bd70 <uuid_unparse+0x8>)
 800bd6a:	f7ff bfb9 	b.w	800bce0 <uuid_unparse_x>
 800bd6e:	bf00      	nop
 800bd70:	080157ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, sl, ip, lr}

0800bd74 <ArtNetRdmController::GetUidCount(unsigned int)>:
 800bd74:	3120      	adds	r1, #32
 800bd76:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800bd7a:	6818      	ldr	r0, [r3, #0]
 800bd7c:	4770      	bx	lr

0800bd7e <ArtNetRdmController::Copy(unsigned int, unsigned char*)>:
 800bd7e:	b530      	push	{r4, r5, lr}
 800bd80:	2300      	movs	r3, #0
 800bd82:	2506      	movs	r5, #6
 800bd84:	3120      	adds	r1, #32
 800bd86:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800bd8a:	6844      	ldr	r4, [r0, #4]
 800bd8c:	6801      	ldr	r1, [r0, #0]
 800bd8e:	4369      	muls	r1, r5
 800bd90:	4299      	cmp	r1, r3
 800bd92:	d903      	bls.n	800bd9c <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x1e>
 800bd94:	5ce1      	ldrb	r1, [r4, r3]
 800bd96:	54d1      	strb	r1, [r2, r3]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	e7f7      	b.n	800bd8c <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0xe>
 800bd9c:	bd30      	pop	{r4, r5, pc}
	...

0800bda0 <ArtNetRdmController::~ArtNetRdmController()>:
 800bda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda4:	2600      	movs	r6, #0
 800bda6:	4604      	mov	r4, r0
 800bda8:	4605      	mov	r5, r0
 800bdaa:	46b0      	mov	r8, r6
 800bdac:	4b0d      	ldr	r3, [pc, #52]	; (800bde4 <ArtNetRdmController::~ArtNetRdmController()+0x44>)
 800bdae:	f8df 9038 	ldr.w	r9, [pc, #56]	; 800bde8 <ArtNetRdmController::~ArtNetRdmController()+0x48>
 800bdb2:	f844 3b80 	str.w	r3, [r4], #128
 800bdb6:	f8d9 3000 	ldr.w	r3, [r9]
 800bdba:	42b3      	cmp	r3, r6
 800bdbc:	d90f      	bls.n	800bdde <ArtNetRdmController::~ArtNetRdmController()+0x3e>
 800bdbe:	6827      	ldr	r7, [r4, #0]
 800bdc0:	b157      	cbz	r7, 800bdd8 <ArtNetRdmController::~ArtNetRdmController()+0x38>
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f8c7 8000 	str.w	r8, [r7]
 800bdc8:	b108      	cbz	r0, 800bdce <ArtNetRdmController::~ArtNetRdmController()+0x2e>
 800bdca:	f006 ff39 	bl	8012c40 <operator delete[](void*)>
 800bdce:	4638      	mov	r0, r7
 800bdd0:	f006 ff34 	bl	8012c3c <operator delete(void*)>
 800bdd4:	f8c4 8000 	str.w	r8, [r4]
 800bdd8:	3601      	adds	r6, #1
 800bdda:	3404      	adds	r4, #4
 800bddc:	e7eb      	b.n	800bdb6 <ArtNetRdmController::~ArtNetRdmController()+0x16>
 800bdde:	4628      	mov	r0, r5
 800bde0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde4:	080157f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, sl, ip, lr}
 800bde8:	20001a28 	andcs	r1, r0, r8, lsr #20

0800bdec <ArtNetRdmController::~ArtNetRdmController()>:
 800bdec:	b510      	push	{r4, lr}
 800bdee:	4604      	mov	r4, r0
 800bdf0:	f7ff ffd6 	bl	800bda0 <ArtNetRdmController::~ArtNetRdmController()>
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f006 ff21 	bl	8012c3c <operator delete(void*)>
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	bd10      	pop	{r4, pc}

0800bdfe <ArtNetRdmController::Full(unsigned int)>:
 800bdfe:	3120      	adds	r1, #32
 800be00:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800be04:	f000 ba26 	b.w	800c254 <RDMDiscovery::Full()>

0800be08 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)>:
 800be08:	b538      	push	{r3, r4, r5, lr}
 800be0a:	460d      	mov	r5, r1
 800be0c:	4614      	mov	r4, r2
 800be0e:	b1f2      	cbz	r2, 800be4e <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x46>
 800be10:	f007 fd38 	bl	8013884 <fwdgt_counter_reload>
 800be14:	4628      	mov	r0, r5
 800be16:	f000 fdf5 	bl	800ca04 <Rdm::Receive(unsigned int)>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d1f8      	bne.n	800be10 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x8>
 800be1e:	4621      	mov	r1, r4
 800be20:	7863      	ldrb	r3, [r4, #1]
 800be22:	4a0c      	ldr	r2, [pc, #48]	; (800be54 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x4c>)
 800be24:	3b01      	subs	r3, #1
 800be26:	1cd8      	adds	r0, r3, #3
 800be28:	d004      	beq.n	800be34 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x2c>
 800be2a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800be2e:	f802 0b01 	strb.w	r0, [r2], #1
 800be32:	e7f7      	b.n	800be24 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x1c>
 800be34:	7862      	ldrb	r2, [r4, #1]
 800be36:	4628      	mov	r0, r5
 800be38:	4907      	ldr	r1, [pc, #28]	; (800be58 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x50>)
 800be3a:	3202      	adds	r2, #2
 800be3c:	f000 fdf2 	bl	800ca24 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800be40:	4628      	mov	r0, r5
 800be42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be46:	f64e 2160 	movw	r1, #60000	; 0xea60
 800be4a:	f000 bde3 	b.w	800ca14 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800be4e:	4610      	mov	r0, r2
 800be50:	bd38      	pop	{r3, r4, r5, pc}
 800be52:	bf00      	nop
 800be54:	20001929 	andcs	r1, r0, r9, lsr #18
 800be58:	20001928 	andcs	r1, r0, r8, lsr #18

0800be5c <ArtNetRdmController::ArtNetRdmController(unsigned int)>:
 800be5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be60:	4605      	mov	r5, r0
 800be62:	f04f 0a00 	mov.w	sl, #0
 800be66:	462e      	mov	r6, r5
 800be68:	460f      	mov	r7, r1
 800be6a:	46d1      	mov	r9, sl
 800be6c:	f100 0804 	add.w	r8, r0, #4
 800be70:	4640      	mov	r0, r8
 800be72:	f000 fb03 	bl	800c47c <RDMDeviceController::RDMDeviceController()>
 800be76:	4b1b      	ldr	r3, [pc, #108]	; (800bee4 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x88>)
 800be78:	f846 3b80 	str.w	r3, [r6], #128
 800be7c:	4b1a      	ldr	r3, [pc, #104]	; (800bee8 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x8c>)
 800be7e:	601f      	str	r7, [r3, #0]
 800be80:	45ba      	cmp	sl, r7
 800be82:	d029      	beq.n	800bed8 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x7c>
 800be84:	f44f 7090 	mov.w	r0, #288	; 0x120
 800be88:	f006 fedc 	bl	8012c44 <operator new(unsigned int)>
 800be8c:	4604      	mov	r4, r0
 800be8e:	f8c0 9000 	str.w	r9, [r0]
 800be92:	2030      	movs	r0, #48	; 0x30
 800be94:	f006 fed8 	bl	8012c48 <operator new[](unsigned int)>
 800be98:	2200      	movs	r2, #0
 800be9a:	6060      	str	r0, [r4, #4]
 800be9c:	6863      	ldr	r3, [r4, #4]
 800be9e:	4813      	ldr	r0, [pc, #76]	; (800beec <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x90>)
 800bea0:	4413      	add	r3, r2
 800bea2:	1e59      	subs	r1, r3, #1
 800bea4:	3305      	adds	r3, #5
 800bea6:	428b      	cmp	r3, r1
 800bea8:	d004      	beq.n	800beb4 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x58>
 800beaa:	f810 cb01 	ldrb.w	ip, [r0], #1
 800beae:	f801 cf01 	strb.w	ip, [r1, #1]!
 800beb2:	e7f8      	b.n	800bea6 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x4a>
 800beb4:	3206      	adds	r2, #6
 800beb6:	2a30      	cmp	r2, #48	; 0x30
 800beb8:	d1f0      	bne.n	800be9c <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x40>
 800beba:	f104 000c 	add.w	r0, r4, #12
 800bebe:	f8c4 a008 	str.w	sl, [r4, #8]
 800bec2:	f000 fb6b 	bl	800c59c <RDMMessage::RDMMessage()>
 800bec6:	4641      	mov	r1, r8
 800bec8:	4620      	mov	r0, r4
 800beca:	f846 4b04 	str.w	r4, [r6], #4
 800bece:	f000 f84c 	bl	800bf6a <RDMDiscovery::SetUid(unsigned char const*)>
 800bed2:	f10a 0a01 	add.w	sl, sl, #1
 800bed6:	e7d3      	b.n	800be80 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x24>
 800bed8:	22cc      	movs	r2, #204	; 0xcc
 800beda:	4b05      	ldr	r3, [pc, #20]	; (800bef0 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x94>)
 800bedc:	4628      	mov	r0, r5
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bee4:	080157f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, sl, ip, lr}
 800bee8:	20001a28 	andcs	r1, r0, r8, lsr #20
 800beec:	080157e0 	stmdaeq	r1, {r5, r6, r7, r8, r9, sl, ip, lr}
 800bef0:	20001928 	andcs	r1, r0, r8, lsr #18

0800bef4 <memcmp.constprop.0>:
 800bef4:	b510      	push	{r4, lr}
 800bef6:	1e4a      	subs	r2, r1, #1
 800bef8:	1e43      	subs	r3, r0, #1
 800befa:	3105      	adds	r1, #5
 800befc:	428a      	cmp	r2, r1
 800befe:	d007      	beq.n	800bf10 <memcmp.constprop.0+0x1c>
 800bf00:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800bf04:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800bf08:	42a0      	cmp	r0, r4
 800bf0a:	d0f7      	beq.n	800befc <memcmp.constprop.0+0x8>
 800bf0c:	1b00      	subs	r0, r0, r4
 800bf0e:	bd10      	pop	{r4, pc}
 800bf10:	2000      	movs	r0, #0
 800bf12:	e7fc      	b.n	800bf0e <memcmp.constprop.0+0x1a>

0800bf14 <memcpy.constprop.0.isra.0>:
 800bf14:	3801      	subs	r0, #1
 800bf16:	1d8a      	adds	r2, r1, #6
 800bf18:	4291      	cmp	r1, r2
 800bf1a:	d004      	beq.n	800bf26 <memcpy.constprop.0.isra.0+0x12>
 800bf1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf20:	f800 3f01 	strb.w	r3, [r0, #1]!
 800bf24:	e7f8      	b.n	800bf18 <memcpy.constprop.0.isra.0+0x4>
 800bf26:	4770      	bx	lr

0800bf28 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>:
 800bf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf2c:	6805      	ldr	r5, [r0, #0]
 800bf2e:	4604      	mov	r4, r0
 800bf30:	2d08      	cmp	r5, #8
 800bf32:	460e      	mov	r6, r1
 800bf34:	d017      	beq.n	800bf66 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800bf36:	2700      	movs	r7, #0
 800bf38:	f04f 0906 	mov.w	r9, #6
 800bf3c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800bf40:	42bd      	cmp	r5, r7
 800bf42:	d007      	beq.n	800bf54 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x2c>
 800bf44:	4631      	mov	r1, r6
 800bf46:	fb09 8007 	mla	r0, r9, r7, r8
 800bf4a:	f7ff ffd3 	bl	800bef4 <memcmp.constprop.0>
 800bf4e:	b150      	cbz	r0, 800bf66 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800bf50:	3701      	adds	r7, #1
 800bf52:	e7f5      	b.n	800bf40 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x18>
 800bf54:	1c6b      	adds	r3, r5, #1
 800bf56:	4631      	mov	r1, r6
 800bf58:	fb09 8005 	mla	r0, r9, r5, r8
 800bf5c:	6023      	str	r3, [r4, #0]
 800bf5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf62:	f7ff bfd7 	b.w	800bf14 <memcpy.constprop.0.isra.0>
 800bf66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800bf6a <RDMDiscovery::SetUid(unsigned char const*)>:
 800bf6a:	b538      	push	{r3, r4, r5, lr}
 800bf6c:	4604      	mov	r4, r0
 800bf6e:	460d      	mov	r5, r1
 800bf70:	f200 100b 	addw	r0, r0, #267	; 0x10b
 800bf74:	f7ff ffce 	bl	800bf14 <memcpy.constprop.0.isra.0>
 800bf78:	4629      	mov	r1, r5
 800bf7a:	f104 000c 	add.w	r0, r4, #12
 800bf7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf82:	f000 bb29 	b.w	800c5d8 <RDMMessage::SetSrcUid(unsigned char const*)>

0800bf86 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>:
 800bf86:	780b      	ldrb	r3, [r1, #0]
 800bf88:	b530      	push	{r4, r5, lr}
 800bf8a:	2bfe      	cmp	r3, #254	; 0xfe
 800bf8c:	d001      	beq.n	800bf92 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xc>
 800bf8e:	2000      	movs	r0, #0
 800bf90:	bd30      	pop	{r4, r5, pc}
 800bf92:	7a48      	ldrb	r0, [r1, #9]
 800bf94:	7a0b      	ldrb	r3, [r1, #8]
 800bf96:	1e54      	subs	r4, r2, #1
 800bf98:	4003      	ands	r3, r0
 800bf9a:	7013      	strb	r3, [r2, #0]
 800bf9c:	7ac8      	ldrb	r0, [r1, #11]
 800bf9e:	7a8b      	ldrb	r3, [r1, #10]
 800bfa0:	3205      	adds	r2, #5
 800bfa2:	4003      	ands	r3, r0
 800bfa4:	f802 3c04 	strb.w	r3, [r2, #-4]
 800bfa8:	7b48      	ldrb	r0, [r1, #13]
 800bfaa:	7b0b      	ldrb	r3, [r1, #12]
 800bfac:	4003      	ands	r3, r0
 800bfae:	f802 3c03 	strb.w	r3, [r2, #-3]
 800bfb2:	7bc8      	ldrb	r0, [r1, #15]
 800bfb4:	7b8b      	ldrb	r3, [r1, #14]
 800bfb6:	4003      	ands	r3, r0
 800bfb8:	f802 3c02 	strb.w	r3, [r2, #-2]
 800bfbc:	7c48      	ldrb	r0, [r1, #17]
 800bfbe:	7c0b      	ldrb	r3, [r1, #16]
 800bfc0:	4003      	ands	r3, r0
 800bfc2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bfc6:	7cc8      	ldrb	r0, [r1, #19]
 800bfc8:	7c8b      	ldrb	r3, [r1, #18]
 800bfca:	4003      	ands	r3, r0
 800bfcc:	7013      	strb	r3, [r2, #0]
 800bfce:	7d4b      	ldrb	r3, [r1, #21]
 800bfd0:	7d08      	ldrb	r0, [r1, #20]
 800bfd2:	4018      	ands	r0, r3
 800bfd4:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800bfd8:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800bfdc:	442b      	add	r3, r5
 800bfde:	4294      	cmp	r4, r2
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	d1f9      	bne.n	800bfd8 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x52>
 800bfe4:	ebb0 2f13 	cmp.w	r0, r3, lsr #8
 800bfe8:	d1d1      	bne.n	800bf8e <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x8>
 800bfea:	7d88      	ldrb	r0, [r1, #22]
 800bfec:	7dca      	ldrb	r2, [r1, #23]
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	4010      	ands	r0, r2
 800bff2:	1ac3      	subs	r3, r0, r3
 800bff4:	4258      	negs	r0, r3
 800bff6:	4158      	adcs	r0, r3
 800bff8:	e7ca      	b.n	800bf90 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xa>
	...

0800bffc <RDMDiscovery::QuickFind(unsigned char const*)>:
 800bffc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bffe:	4605      	mov	r5, r0
 800c000:	460e      	mov	r6, r1
 800c002:	f105 040c 	add.w	r4, r5, #12
 800c006:	f007 fc3d 	bl	8013884 <fwdgt_counter_reload>
 800c00a:	2110      	movs	r1, #16
 800c00c:	4620      	mov	r0, r4
 800c00e:	f000 faeb 	bl	800c5e8 <RDMMessage::SetCc(unsigned char)>
 800c012:	2102      	movs	r1, #2
 800c014:	4620      	mov	r0, r4
 800c016:	f000 fae9 	bl	800c5ec <RDMMessage::SetPid(unsigned short)>
 800c01a:	4631      	mov	r1, r6
 800c01c:	4620      	mov	r0, r4
 800c01e:	f000 fadf 	bl	800c5e0 <RDMMessage::SetDstUid(unsigned char const*)>
 800c022:	2200      	movs	r2, #0
 800c024:	4620      	mov	r0, r4
 800c026:	4611      	mov	r1, r2
 800c028:	f000 fae4 	bl	800c5f4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800c02c:	4620      	mov	r0, r4
 800c02e:	68a9      	ldr	r1, [r5, #8]
 800c030:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800c034:	f000 faf0 	bl	800c618 <RDMMessage::Send(unsigned int, unsigned int)>
 800c038:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800c03c:	68a8      	ldr	r0, [r5, #8]
 800c03e:	f000 fce9 	bl	800ca14 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c042:	b160      	cbz	r0, 800c05e <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800c044:	7d03      	ldrb	r3, [r0, #20]
 800c046:	2b11      	cmp	r3, #17
 800c048:	d109      	bne.n	800c05e <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800c04a:	f100 0109 	add.w	r1, r0, #9
 800c04e:	4630      	mov	r0, r6
 800c050:	f7ff ff50 	bl	800bef4 <memcmp.constprop.0>
 800c054:	b918      	cbnz	r0, 800c05e <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800c056:	4631      	mov	r1, r6
 800c058:	4628      	mov	r0, r5
 800c05a:	f7ff ff65 	bl	800bf28 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800c05e:	f007 fc11 	bl	8013884 <fwdgt_counter_reload>
 800c062:	4620      	mov	r0, r4
 800c064:	491a      	ldr	r1, [pc, #104]	; (800c0d0 <RDMDiscovery::QuickFind(unsigned char const*)+0xd4>)
 800c066:	f000 fabb 	bl	800c5e0 <RDMMessage::SetDstUid(unsigned char const*)>
 800c06a:	4620      	mov	r0, r4
 800c06c:	2110      	movs	r1, #16
 800c06e:	f000 fabb 	bl	800c5e8 <RDMMessage::SetCc(unsigned char)>
 800c072:	4620      	mov	r0, r4
 800c074:	2101      	movs	r1, #1
 800c076:	f000 fab9 	bl	800c5ec <RDMMessage::SetPid(unsigned short)>
 800c07a:	4620      	mov	r0, r4
 800c07c:	220c      	movs	r2, #12
 800c07e:	f205 1111 	addw	r1, r5, #273	; 0x111
 800c082:	f000 fab7 	bl	800c5f4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800c086:	4620      	mov	r0, r4
 800c088:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800c08c:	68a9      	ldr	r1, [r5, #8]
 800c08e:	f000 fac3 	bl	800c618 <RDMMessage::Send(unsigned int, unsigned int)>
 800c092:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800c096:	68a8      	ldr	r0, [r5, #8]
 800c098:	f000 fcbc 	bl	800ca14 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c09c:	4604      	mov	r4, r0
 800c09e:	f007 fbf1 	bl	8013884 <fwdgt_counter_reload>
 800c0a2:	b14c      	cbz	r4, 800c0b8 <RDMDiscovery::QuickFind(unsigned char const*)+0xbc>
 800c0a4:	466a      	mov	r2, sp
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f7ff ff6c 	bl	800bf86 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800c0ae:	b130      	cbz	r0, 800c0be <RDMDiscovery::QuickFind(unsigned char const*)+0xc2>
 800c0b0:	4669      	mov	r1, sp
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f7ff ffa2 	bl	800bffc <RDMDiscovery::QuickFind(unsigned char const*)>
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	b002      	add	sp, #8
 800c0bc:	bd70      	pop	{r4, r5, r6, pc}
 800c0be:	466a      	mov	r2, sp
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f7ff ff60 	bl	800bf86 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800c0c6:	f080 0001 	eor.w	r0, r0, #1
 800c0ca:	b2c0      	uxtb	r0, r0
 800c0cc:	e7f5      	b.n	800c0ba <RDMDiscovery::QuickFind(unsigned char const*)+0xbe>
 800c0ce:	bf00      	nop
 800c0d0:	08015808 	stmdaeq	r1, {r3, fp, ip, lr}

0800c0d4 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>:
 800c0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d8:	4691      	mov	r9, r2
 800c0da:	469b      	mov	fp, r3
 800c0dc:	b085      	sub	sp, #20
 800c0de:	4605      	mov	r5, r0
 800c0e0:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 800c0e4:	f007 fbce 	bl	8013884 <fwdgt_counter_reload>
 800c0e8:	45c3      	cmp	fp, r8
 800c0ea:	bf08      	it	eq
 800c0ec:	45b9      	cmpeq	r9, r7
 800c0ee:	ea4f 430b 	mov.w	r3, fp, lsl #16
 800c0f2:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800c0f6:	ea4f 4209 	mov.w	r2, r9, lsl #16
 800c0fa:	4c54      	ldr	r4, [pc, #336]	; (800c24c <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x178>)
 800c0fc:	f105 060c 	add.w	r6, r5, #12
 800c100:	ba12      	rev	r2, r2
 800c102:	ba1b      	rev	r3, r3
 800c104:	d136      	bne.n	800c174 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0xa0>
 800c106:	4621      	mov	r1, r4
 800c108:	a802      	add	r0, sp, #8
 800c10a:	e9c4 3200 	strd	r3, r2, [r4]
 800c10e:	f7ff ff01 	bl	800bf14 <memcpy.constprop.0.isra.0>
 800c112:	2110      	movs	r1, #16
 800c114:	4630      	mov	r0, r6
 800c116:	f000 fa67 	bl	800c5e8 <RDMMessage::SetCc(unsigned char)>
 800c11a:	2102      	movs	r1, #2
 800c11c:	4630      	mov	r0, r6
 800c11e:	f000 fa65 	bl	800c5ec <RDMMessage::SetPid(unsigned short)>
 800c122:	4630      	mov	r0, r6
 800c124:	a902      	add	r1, sp, #8
 800c126:	f000 fa5b 	bl	800c5e0 <RDMMessage::SetDstUid(unsigned char const*)>
 800c12a:	2200      	movs	r2, #0
 800c12c:	4630      	mov	r0, r6
 800c12e:	4611      	mov	r1, r2
 800c130:	f000 fa60 	bl	800c5f4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800c134:	4630      	mov	r0, r6
 800c136:	68a9      	ldr	r1, [r5, #8]
 800c138:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800c13c:	f000 fa6c 	bl	800c618 <RDMMessage::Send(unsigned int, unsigned int)>
 800c140:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800c144:	68a8      	ldr	r0, [r5, #8]
 800c146:	f000 fc65 	bl	800ca14 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d07c      	beq.n	800c248 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x174>
 800c14e:	7d03      	ldrb	r3, [r0, #20]
 800c150:	2b11      	cmp	r3, #17
 800c152:	d003      	beq.n	800c15c <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x88>
 800c154:	2000      	movs	r0, #0
 800c156:	b005      	add	sp, #20
 800c158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15c:	f100 0109 	add.w	r1, r0, #9
 800c160:	a802      	add	r0, sp, #8
 800c162:	f7ff fec7 	bl	800bef4 <memcmp.constprop.0>
 800c166:	2800      	cmp	r0, #0
 800c168:	d1f4      	bne.n	800c154 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800c16a:	4628      	mov	r0, r5
 800c16c:	a902      	add	r1, sp, #8
 800c16e:	f7ff fedb 	bl	800bf28 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800c172:	e7ef      	b.n	800c154 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800c174:	f205 1a11 	addw	sl, r5, #273	; 0x111
 800c178:	4621      	mov	r1, r4
 800c17a:	4650      	mov	r0, sl
 800c17c:	e9c4 3200 	strd	r3, r2, [r4]
 800c180:	f7ff fec8 	bl	800bf14 <memcpy.constprop.0.isra.0>
 800c184:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800c188:	ea43 4317 	orr.w	r3, r3, r7, lsr #16
 800c18c:	043a      	lsls	r2, r7, #16
 800c18e:	ba1b      	rev	r3, r3
 800c190:	ba12      	rev	r2, r2
 800c192:	4621      	mov	r1, r4
 800c194:	f205 1017 	addw	r0, r5, #279	; 0x117
 800c198:	e9c4 3200 	strd	r3, r2, [r4]
 800c19c:	f7ff feba 	bl	800bf14 <memcpy.constprop.0.isra.0>
 800c1a0:	4630      	mov	r0, r6
 800c1a2:	492b      	ldr	r1, [pc, #172]	; (800c250 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x17c>)
 800c1a4:	f000 fa1c 	bl	800c5e0 <RDMMessage::SetDstUid(unsigned char const*)>
 800c1a8:	2110      	movs	r1, #16
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f000 fa1c 	bl	800c5e8 <RDMMessage::SetCc(unsigned char)>
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f000 fa1a 	bl	800c5ec <RDMMessage::SetPid(unsigned short)>
 800c1b8:	220c      	movs	r2, #12
 800c1ba:	4651      	mov	r1, sl
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f000 fa19 	bl	800c5f4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800c1c2:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	68a9      	ldr	r1, [r5, #8]
 800c1ca:	f000 fa25 	bl	800c618 <RDMMessage::Send(unsigned int, unsigned int)>
 800c1ce:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800c1d2:	68a8      	ldr	r0, [r5, #8]
 800c1d4:	f000 fc1e 	bl	800ca14 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c1d8:	4601      	mov	r1, r0
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d0ba      	beq.n	800c154 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800c1de:	4628      	mov	r0, r5
 800c1e0:	aa02      	add	r2, sp, #8
 800c1e2:	f7ff fed0 	bl	800bf86 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800c1e6:	bb40      	cbnz	r0, 800c23a <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x166>
 800c1e8:	ea4f 0a58 	mov.w	sl, r8, lsr #1
 800c1ec:	ea4f 035b 	mov.w	r3, fp, lsr #1
 800c1f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1f4:	f40a 4a80 	and.w	sl, sl, #16384	; 0x4000
 800c1f8:	eb19 0607 	adds.w	r6, r9, r7
 800c1fc:	449a      	add	sl, r3
 800c1fe:	f3c8 020e 	ubfx	r2, r8, #0, #15
 800c202:	f3cb 030e 	ubfx	r3, fp, #0, #15
 800c206:	eb43 0302 	adc.w	r3, r3, r2
 800c20a:	0876      	lsrs	r6, r6, #1
 800c20c:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
 800c210:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 800c214:	464a      	mov	r2, r9
 800c216:	465b      	mov	r3, fp
 800c218:	4628      	mov	r0, r5
 800c21a:	e9cd 6a00 	strd	r6, sl, [sp]
 800c21e:	f7ff ff59 	bl	800c0d4 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800c222:	1c72      	adds	r2, r6, #1
 800c224:	4604      	mov	r4, r0
 800c226:	e9cd 7800 	strd	r7, r8, [sp]
 800c22a:	4628      	mov	r0, r5
 800c22c:	f14a 0300 	adc.w	r3, sl, #0
 800c230:	f7ff ff50 	bl	800c0d4 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800c234:	4320      	orrs	r0, r4
 800c236:	b2c0      	uxtb	r0, r0
 800c238:	e78d      	b.n	800c156 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800c23a:	4628      	mov	r0, r5
 800c23c:	a902      	add	r1, sp, #8
 800c23e:	f7ff fedd 	bl	800bffc <RDMDiscovery::QuickFind(unsigned char const*)>
 800c242:	2800      	cmp	r0, #0
 800c244:	d1d0      	bne.n	800c1e8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x114>
 800c246:	e785      	b.n	800c154 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800c248:	2001      	movs	r0, #1
 800c24a:	e784      	b.n	800c156 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800c24c:	20001a30 	andcs	r1, r0, r0, lsr sl
 800c250:	08015808 	stmdaeq	r1, {r3, fp, ip, lr}

0800c254 <RDMDiscovery::Full()>:
 800c254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c256:	4604      	mov	r4, r0
 800c258:	2500      	movs	r5, #0
 800c25a:	2606      	movs	r6, #6
 800c25c:	4f2a      	ldr	r7, [pc, #168]	; (800c308 <RDMDiscovery::Full()+0xb4>)
 800c25e:	6823      	ldr	r3, [r4, #0]
 800c260:	42ab      	cmp	r3, r5
 800c262:	d907      	bls.n	800c274 <RDMDiscovery::Full()+0x20>
 800c264:	6860      	ldr	r0, [r4, #4]
 800c266:	4639      	mov	r1, r7
 800c268:	fb06 0005 	mla	r0, r6, r5, r0
 800c26c:	f7ff fe52 	bl	800bf14 <memcpy.constprop.0.isra.0>
 800c270:	3501      	adds	r5, #1
 800c272:	e7f4      	b.n	800c25e <RDMDiscovery::Full()+0xa>
 800c274:	2600      	movs	r6, #0
 800c276:	4625      	mov	r5, r4
 800c278:	f845 6b0c 	str.w	r6, [r5], #12
 800c27c:	f007 fb02 	bl	8013884 <fwdgt_counter_reload>
 800c280:	4628      	mov	r0, r5
 800c282:	4921      	ldr	r1, [pc, #132]	; (800c308 <RDMDiscovery::Full()+0xb4>)
 800c284:	f000 f9ac 	bl	800c5e0 <RDMMessage::SetDstUid(unsigned char const*)>
 800c288:	4628      	mov	r0, r5
 800c28a:	2110      	movs	r1, #16
 800c28c:	f000 f9ac 	bl	800c5e8 <RDMMessage::SetCc(unsigned char)>
 800c290:	4628      	mov	r0, r5
 800c292:	2103      	movs	r1, #3
 800c294:	f000 f9aa 	bl	800c5ec <RDMMessage::SetPid(unsigned short)>
 800c298:	4632      	mov	r2, r6
 800c29a:	4631      	mov	r1, r6
 800c29c:	4628      	mov	r0, r5
 800c29e:	f000 f9a9 	bl	800c5f4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800c2a2:	4632      	mov	r2, r6
 800c2a4:	4628      	mov	r0, r5
 800c2a6:	68a1      	ldr	r1, [r4, #8]
 800c2a8:	f000 f9b6 	bl	800c618 <RDMMessage::Send(unsigned int, unsigned int)>
 800c2ac:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800c2b0:	68a0      	ldr	r0, [r4, #8]
 800c2b2:	f000 fbaf 	bl	800ca14 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c2b6:	f007 fae5 	bl	8013884 <fwdgt_counter_reload>
 800c2ba:	4631      	mov	r1, r6
 800c2bc:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800c2c0:	f008 fa26 	bl	8014710 <udelay(unsigned int, unsigned int)>
 800c2c4:	f007 fade 	bl	8013884 <fwdgt_counter_reload>
 800c2c8:	4632      	mov	r2, r6
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	68a1      	ldr	r1, [r4, #8]
 800c2ce:	f000 f9a3 	bl	800c618 <RDMMessage::Send(unsigned int, unsigned int)>
 800c2d2:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800c2d6:	68a0      	ldr	r0, [r4, #8]
 800c2d8:	f000 fb9c 	bl	800ca14 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800c2dc:	f007 fad2 	bl	8013884 <fwdgt_counter_reload>
 800c2e0:	4631      	mov	r1, r6
 800c2e2:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800c2e6:	f008 fa13 	bl	8014710 <udelay(unsigned int, unsigned int)>
 800c2ea:	f007 facb 	bl	8013884 <fwdgt_counter_reload>
 800c2ee:	f06f 0201 	mvn.w	r2, #1
 800c2f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	e9cd 2300 	strd	r2, r3, [sp]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	2300      	movs	r3, #0
 800c300:	f7ff fee8 	bl	800c0d4 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800c304:	b003      	add	sp, #12
 800c306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c308:	08015808 	stmdaeq	r1, {r3, fp, ip, lr}

0800c30c <RDMDevice::RDMDevice()>:
 800c30c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c30e:	4b35      	ldr	r3, [pc, #212]	; (800c3e4 <RDMDevice::RDMDevice()+0xd8>)
 800c310:	4a35      	ldr	r2, [pc, #212]	; (800c3e8 <RDMDevice::RDMDevice()+0xdc>)
 800c312:	7859      	ldrb	r1, [r3, #1]
 800c314:	4604      	mov	r4, r0
 800c316:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
 800c31a:	7818      	ldrb	r0, [r3, #0]
 800c31c:	2300      	movs	r3, #0
 800c31e:	4615      	mov	r5, r2
 800c320:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
 800c324:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800c328:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800c32c:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
 800c330:	67a3      	str	r3, [r4, #120]	; 0x78
 800c332:	4613      	mov	r3, r2
 800c334:	781e      	ldrb	r6, [r3, #0]
 800c336:	3201      	adds	r2, #1
 800c338:	2e00      	cmp	r6, #0
 800c33a:	d1fa      	bne.n	800c332 <RDMDevice::RDMDevice()+0x26>
 800c33c:	1b5b      	subs	r3, r3, r5
 800c33e:	2b20      	cmp	r3, #32
 800c340:	bf28      	it	cs
 800c342:	2320      	movcs	r3, #32
 800c344:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 800c348:	462e      	mov	r6, r5
 800c34a:	461a      	mov	r2, r3
 800c34c:	4f26      	ldr	r7, [pc, #152]	; (800c3e8 <RDMDevice::RDMDevice()+0xdc>)
 800c34e:	3a01      	subs	r2, #1
 800c350:	d304      	bcc.n	800c35c <RDMDevice::RDMDevice()+0x50>
 800c352:	f817 cb01 	ldrb.w	ip, [r7], #1
 800c356:	f806 cb01 	strb.w	ip, [r6], #1
 800c35a:	e7f8      	b.n	800c34e <RDMDevice::RDMDevice()+0x42>
 800c35c:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800c360:	4b22      	ldr	r3, [pc, #136]	; (800c3ec <RDMDevice::RDMDevice()+0xe0>)
 800c362:	7020      	strb	r0, [r4, #0]
 800c364:	7061      	strb	r1, [r4, #1]
 800c366:	6818      	ldr	r0, [r3, #0]
 800c368:	4669      	mov	r1, sp
 800c36a:	f004 f88d 	bl	8010488 <Network::MacAddressCopyTo(unsigned char*)>
 800c36e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c372:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c376:	70a3      	strb	r3, [r4, #2]
 800c378:	7263      	strb	r3, [r4, #9]
 800c37a:	4b1d      	ldr	r3, [pc, #116]	; (800c3f0 <RDMDevice::RDMDevice()+0xe4>)
 800c37c:	70e2      	strb	r2, [r4, #3]
 800c37e:	7222      	strb	r2, [r4, #8]
 800c380:	461a      	mov	r2, r3
 800c382:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c386:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800c38a:	7121      	strb	r1, [r4, #4]
 800c38c:	7160      	strb	r0, [r4, #5]
 800c38e:	71a0      	strb	r0, [r4, #6]
 800c390:	71e1      	strb	r1, [r4, #7]
 800c392:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c396:	2900      	cmp	r1, #0
 800c398:	d1fb      	bne.n	800c392 <RDMDevice::RDMDevice()+0x86>
 800c39a:	1a9b      	subs	r3, r3, r2
 800c39c:	2b20      	cmp	r3, #32
 800c39e:	bf28      	it	cs
 800c3a0:	2320      	movcs	r3, #32
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	4912      	ldr	r1, [pc, #72]	; (800c3f0 <RDMDevice::RDMDevice()+0xe4>)
 800c3a6:	3a01      	subs	r2, #1
 800c3a8:	d304      	bcc.n	800c3b4 <RDMDevice::RDMDevice()+0xa8>
 800c3aa:	f811 0b01 	ldrb.w	r0, [r1], #1
 800c3ae:	f805 0b01 	strb.w	r0, [r5], #1
 800c3b2:	e7f8      	b.n	800c3a6 <RDMDevice::RDMDevice()+0x9a>
 800c3b4:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800c3b8:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 800c3bc:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c3be:	2314      	movs	r3, #20
 800c3c0:	4a0c      	ldr	r2, [pc, #48]	; (800c3f4 <RDMDevice::RDMDevice()+0xe8>)
 800c3c2:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800c3c6:	f104 0067 	add.w	r0, r4, #103	; 0x67
 800c3ca:	f104 0353 	add.w	r3, r4, #83	; 0x53
 800c3ce:	4298      	cmp	r0, r3
 800c3d0:	d004      	beq.n	800c3dc <RDMDevice::RDMDevice()+0xd0>
 800c3d2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c3d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c3da:	e7f8      	b.n	800c3ce <RDMDevice::RDMDevice()+0xc2>
 800c3dc:	4620      	mov	r0, r4
 800c3de:	b003      	add	sp, #12
 800c3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	0801591a 	stmdaeq	r1, {r1, r3, r4, r8, fp, ip, lr}
 800c3e8:	0801591c 	stmdaeq	r1, {r2, r3, r4, r8, fp, ip, lr}
 800c3ec:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800c3f0:	080153f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, ip, lr}
 800c3f4:	080158e2 	stmdaeq	r1, {r1, r5, r6, r7, fp, ip, lr}

0800c3f8 <RDMDevice::Print()>:
 800c3f8:	b513      	push	{r0, r1, r4, lr}
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	4818      	ldr	r0, [pc, #96]	; (800c460 <RDMDevice::Print()+0x68>)
 800c3fe:	f006 ff19 	bl	8013234 <printf>
 800c402:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800c406:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800c40a:	4816      	ldr	r0, [pc, #88]	; (800c464 <RDMDevice::Print()+0x6c>)
 800c40c:	f006 ff12 	bl	8013234 <printf>
 800c410:	7862      	ldrb	r2, [r4, #1]
 800c412:	7821      	ldrb	r1, [r4, #0]
 800c414:	4814      	ldr	r0, [pc, #80]	; (800c468 <RDMDevice::Print()+0x70>)
 800c416:	f006 ff0d 	bl	8013234 <printf>
 800c41a:	79a3      	ldrb	r3, [r4, #6]
 800c41c:	7a22      	ldrb	r2, [r4, #8]
 800c41e:	7a61      	ldrb	r1, [r4, #9]
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	4812      	ldr	r0, [pc, #72]	; (800c46c <RDMDevice::Print()+0x74>)
 800c424:	79e3      	ldrb	r3, [r4, #7]
 800c426:	f006 ff05 	bl	8013234 <printf>
 800c42a:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800c42e:	f104 020a 	add.w	r2, r4, #10
 800c432:	480f      	ldr	r0, [pc, #60]	; (800c470 <RDMDevice::Print()+0x78>)
 800c434:	f006 fefe 	bl	8013234 <printf>
 800c438:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 800c43c:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800c440:	0a09      	lsrs	r1, r1, #8
 800c442:	480c      	ldr	r0, [pc, #48]	; (800c474 <RDMDevice::Print()+0x7c>)
 800c444:	f006 fef6 	bl	8013234 <printf>
 800c448:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800c44c:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800c450:	4809      	ldr	r0, [pc, #36]	; (800c478 <RDMDevice::Print()+0x80>)
 800c452:	0a09      	lsrs	r1, r1, #8
 800c454:	b002      	add	sp, #8
 800c456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c45a:	f006 beeb 	b.w	8013234 <printf>
 800c45e:	bf00      	nop
 800c460:	0801580e 	stmdaeq	r1, {r1, r2, r3, fp, ip, lr}
 800c464:	08015828 	stmdaeq	r1, {r3, r5, fp, ip, lr}
 800c468:	08015843 	stmdaeq	r1, {r0, r1, r6, fp, ip, lr}
 800c46c:	08015862 	stmdaeq	r1, {r1, r5, r6, fp, ip, lr}
 800c470:	08015889 	stmdaeq	r1, {r0, r3, r7, fp, ip, lr}
 800c474:	080158a4 	stmdaeq	r1, {r2, r5, r7, fp, ip, lr}
 800c478:	080158c3 	stmdaeq	r1, {r0, r1, r6, r7, fp, ip, lr}

0800c47c <RDMDeviceController::RDMDeviceController()>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	4604      	mov	r4, r0
 800c480:	f7ff ff44 	bl	800c30c <RDMDevice::RDMDevice()>
 800c484:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800c488:	b1b3      	cbz	r3, 800c4b8 <RDMDeviceController::RDMDeviceController()+0x3c>
 800c48a:	f104 010a 	add.w	r1, r4, #10
 800c48e:	460b      	mov	r3, r1
 800c490:	4a11      	ldr	r2, [pc, #68]	; (800c4d8 <RDMDeviceController::RDMDeviceController()+0x5c>)
 800c492:	f104 0523 	add.w	r5, r4, #35	; 0x23
 800c496:	429d      	cmp	r5, r3
 800c498:	d004      	beq.n	800c4a4 <RDMDeviceController::RDMDeviceController()+0x28>
 800c49a:	f812 0b01 	ldrb.w	r0, [r2], #1
 800c49e:	f803 0b01 	strb.w	r0, [r3], #1
 800c4a2:	e7f8      	b.n	800c496 <RDMDeviceController::RDMDeviceController()+0x1a>
 800c4a4:	2219      	movs	r2, #25
 800c4a6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c4a8:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
 800c4ac:	b110      	cbz	r0, 800c4b4 <RDMDeviceController::RDMDeviceController()+0x38>
 800c4ae:	6803      	ldr	r3, [r0, #0]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	4798      	blx	r3
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	4a07      	ldr	r2, [pc, #28]	; (800c4d8 <RDMDeviceController::RDMDeviceController()+0x5c>)
 800c4ba:	f104 0353 	add.w	r3, r4, #83	; 0x53
 800c4be:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 800c4c2:	4283      	cmp	r3, r0
 800c4c4:	d004      	beq.n	800c4d0 <RDMDeviceController::RDMDeviceController()+0x54>
 800c4c6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ce:	e7f8      	b.n	800c4c2 <RDMDeviceController::RDMDeviceController()+0x46>
 800c4d0:	2319      	movs	r3, #25
 800c4d2:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800c4d6:	e7ed      	b.n	800c4b4 <RDMDeviceController::RDMDeviceController()+0x38>
 800c4d8:	080158f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, fp, ip, lr}

0800c4dc <memcpy.isra.0>:
 800c4dc:	f006 bc66 	b.w	8012dac <memcpy>

0800c4e0 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800c4e0:	b510      	push	{r4, lr}
 800c4e2:	6001      	str	r1, [r0, #0]
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	6041      	str	r1, [r0, #4]
 800c4ea:	2220      	movs	r2, #32
 800c4ec:	3008      	adds	r0, #8
 800c4ee:	f006 fc7f 	bl	8012df0 <memset>
 800c4f2:	4b03      	ldr	r3, [pc, #12]	; (800c500 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4f8:	237f      	movs	r3, #127	; 0x7f
 800c4fa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800c4fe:	bd10      	pop	{r4, pc}
 800c500:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800c504 <RDMDeviceParams::Load()>:
 800c504:	4601      	mov	r1, r0
 800c506:	6800      	ldr	r0, [r0, #0]
 800c508:	b130      	cbz	r0, 800c518 <RDMDeviceParams::Load()+0x14>
 800c50a:	b508      	push	{r3, lr}
 800c50c:	6803      	ldr	r3, [r0, #0]
 800c50e:	3104      	adds	r1, #4
 800c510:	68db      	ldr	r3, [r3, #12]
 800c512:	4798      	blx	r3
 800c514:	2001      	movs	r0, #1
 800c516:	bd08      	pop	{r3, pc}
 800c518:	4770      	bx	lr

0800c51a <RDMDeviceParams::Set(RDMDevice*)>:
 800c51a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51c:	6843      	ldr	r3, [r0, #4]
 800c51e:	460c      	mov	r4, r1
 800c520:	07d9      	lsls	r1, r3, #31
 800c522:	4605      	mov	r5, r0
 800c524:	d518      	bpl.n	800c558 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800c526:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 800c52a:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800c52e:	2e20      	cmp	r6, #32
 800c530:	bf28      	it	cs
 800c532:	2620      	movcs	r6, #32
 800c534:	f100 0108 	add.w	r1, r0, #8
 800c538:	b1e3      	cbz	r3, 800c574 <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 800c53a:	f104 070a 	add.w	r7, r4, #10
 800c53e:	4638      	mov	r0, r7
 800c540:	4632      	mov	r2, r6
 800c542:	f7ff ffcb 	bl	800c4dc <memcpy.isra.0>
 800c546:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800c548:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800c54c:	b120      	cbz	r0, 800c558 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800c54e:	6803      	ldr	r3, [r0, #0]
 800c550:	4632      	mov	r2, r6
 800c552:	4639      	mov	r1, r7
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	4798      	blx	r3
 800c558:	686b      	ldr	r3, [r5, #4]
 800c55a:	079a      	lsls	r2, r3, #30
 800c55c:	bf44      	itt	mi
 800c55e:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800c562:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 800c566:	075b      	lsls	r3, r3, #29
 800c568:	bf44      	itt	mi
 800c56a:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800c56e:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 800c572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c574:	4632      	mov	r2, r6
 800c576:	f104 0053 	add.w	r0, r4, #83	; 0x53
 800c57a:	f7ff ffaf 	bl	800c4dc <memcpy.isra.0>
 800c57e:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
 800c582:	e7e9      	b.n	800c558 <RDMDeviceParams::Set(RDMDevice*)+0x3e>

0800c584 <RDMDeviceParams::Dump()>:
 800c584:	4770      	bx	lr

0800c586 <memcpy.isra.0>:
 800c586:	3801      	subs	r0, #1
 800c588:	440a      	add	r2, r1
 800c58a:	4291      	cmp	r1, r2
 800c58c:	d004      	beq.n	800c598 <memcpy.isra.0+0x12>
 800c58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c592:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c596:	e7f8      	b.n	800c58a <memcpy.isra.0+0x4>
 800c598:	4770      	bx	lr
	...

0800c59c <RDMMessage::RDMMessage()>:
 800c59c:	23cc      	movs	r3, #204	; 0xcc
 800c59e:	b570      	push	{r4, r5, r6, lr}
 800c5a0:	7003      	strb	r3, [r0, #0]
 800c5a2:	2501      	movs	r5, #1
 800c5a4:	2318      	movs	r3, #24
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	4e0a      	ldr	r6, [pc, #40]	; (800c5d4 <RDMMessage::RDMMessage()+0x38>)
 800c5aa:	7083      	strb	r3, [r0, #2]
 800c5ac:	7045      	strb	r5, [r0, #1]
 800c5ae:	4631      	mov	r1, r6
 800c5b0:	2206      	movs	r2, #6
 800c5b2:	3009      	adds	r0, #9
 800c5b4:	f7ff ffe7 	bl	800c586 <memcpy.isra.0>
 800c5b8:	1ce0      	adds	r0, r4, #3
 800c5ba:	2206      	movs	r2, #6
 800c5bc:	4631      	mov	r1, r6
 800c5be:	f7ff ffe2 	bl	800c586 <memcpy.isra.0>
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	7425      	strb	r5, [r4, #16]
 800c5c8:	7463      	strb	r3, [r4, #17]
 800c5ca:	74a3      	strb	r3, [r4, #18]
 800c5cc:	74e3      	strb	r3, [r4, #19]
 800c5ce:	75e3      	strb	r3, [r4, #23]
 800c5d0:	bd70      	pop	{r4, r5, r6, pc}
 800c5d2:	bf00      	nop
 800c5d4:	08015914 	stmdaeq	r1, {r2, r4, r8, fp, ip, lr}

0800c5d8 <RDMMessage::SetSrcUid(unsigned char const*)>:
 800c5d8:	2206      	movs	r2, #6
 800c5da:	3009      	adds	r0, #9
 800c5dc:	f7ff bfd3 	b.w	800c586 <memcpy.isra.0>

0800c5e0 <RDMMessage::SetDstUid(unsigned char const*)>:
 800c5e0:	2206      	movs	r2, #6
 800c5e2:	3003      	adds	r0, #3
 800c5e4:	f7ff bfcf 	b.w	800c586 <memcpy.isra.0>

0800c5e8 <RDMMessage::SetCc(unsigned char)>:
 800c5e8:	7501      	strb	r1, [r0, #20]
 800c5ea:	4770      	bx	lr

0800c5ec <RDMMessage::SetPid(unsigned short)>:
 800c5ec:	0a0b      	lsrs	r3, r1, #8
 800c5ee:	7543      	strb	r3, [r0, #21]
 800c5f0:	7581      	strb	r1, [r0, #22]
 800c5f2:	4770      	bx	lr

0800c5f4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>:
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	7883      	ldrb	r3, [r0, #2]
 800c5fa:	7dc0      	ldrb	r0, [r0, #23]
 800c5fc:	4615      	mov	r5, r2
 800c5fe:	1a1b      	subs	r3, r3, r0
 800c600:	70a3      	strb	r3, [r4, #2]
 800c602:	75e2      	strb	r2, [r4, #23]
 800c604:	b121      	cbz	r1, 800c610 <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800c606:	b11a      	cbz	r2, 800c610 <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800c608:	f104 0018 	add.w	r0, r4, #24
 800c60c:	f7ff ffbb 	bl	800c586 <memcpy.isra.0>
 800c610:	78a2      	ldrb	r2, [r4, #2]
 800c612:	4415      	add	r5, r2
 800c614:	70a5      	strb	r5, [r4, #2]
 800c616:	bd38      	pop	{r3, r4, r5, pc}

0800c618 <RDMMessage::Send(unsigned int, unsigned int)>:
 800c618:	460b      	mov	r3, r1
 800c61a:	4601      	mov	r1, r0
 800c61c:	4618      	mov	r0, r3
 800c61e:	f000 beb7 	b.w	800d390 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>

0800c622 <LightSet::Blackout(bool)>:
 800c622:	4770      	bx	lr

0800c624 <DmxSend::~DmxSend()>:
 800c624:	4770      	bx	lr
	...

0800c628 <DmxSend::Start(unsigned int)>:
 800c628:	2301      	movs	r3, #1
 800c62a:	b410      	push	{r4}
 800c62c:	4c08      	ldr	r4, [pc, #32]	; (800c650 <DmxSend::Start(unsigned int)+0x28>)
 800c62e:	fa03 f001 	lsl.w	r0, r3, r1
 800c632:	7822      	ldrb	r2, [r4, #0]
 800c634:	ea30 0c02 	bics.w	ip, r0, r2
 800c638:	d007      	beq.n	800c64a <DmxSend::Start(unsigned int)+0x22>
 800c63a:	4302      	orrs	r2, r0
 800c63c:	4805      	ldr	r0, [pc, #20]	; (800c654 <DmxSend::Start(unsigned int)+0x2c>)
 800c63e:	7022      	strb	r2, [r4, #0]
 800c640:	6800      	ldr	r0, [r0, #0]
 800c642:	2200      	movs	r2, #0
 800c644:	bc10      	pop	{r4}
 800c646:	f000 bc95 	b.w	800cf74 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800c64a:	bc10      	pop	{r4}
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	20001a38 	andcs	r1, r0, r8, lsr sl
 800c654:	20001e78 	andcs	r1, r0, r8, ror lr

0800c658 <DmxSend::Stop(unsigned int)>:
 800c658:	2201      	movs	r2, #1
 800c65a:	b410      	push	{r4}
 800c65c:	4809      	ldr	r0, [pc, #36]	; (800c684 <DmxSend::Stop(unsigned int)+0x2c>)
 800c65e:	408a      	lsls	r2, r1
 800c660:	7803      	ldrb	r3, [r0, #0]
 800c662:	ea03 0402 	and.w	r4, r3, r2
 800c666:	439a      	bics	r2, r3
 800c668:	d109      	bne.n	800c67e <DmxSend::Stop(unsigned int)+0x26>
 800c66a:	ea23 0304 	bic.w	r3, r3, r4
 800c66e:	7003      	strb	r3, [r0, #0]
 800c670:	2300      	movs	r3, #0
 800c672:	4805      	ldr	r0, [pc, #20]	; (800c688 <DmxSend::Stop(unsigned int)+0x30>)
 800c674:	461a      	mov	r2, r3
 800c676:	6800      	ldr	r0, [r0, #0]
 800c678:	bc10      	pop	{r4}
 800c67a:	f000 bc7b 	b.w	800cf74 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800c67e:	bc10      	pop	{r4}
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	20001a38 	andcs	r1, r0, r8, lsr sl
 800c688:	20001e78 	andcs	r1, r0, r8, ror lr

0800c68c <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800c68c:	b11b      	cbz	r3, 800c696 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xa>
 800c68e:	4802      	ldr	r0, [pc, #8]	; (800c698 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xc>)
 800c690:	6800      	ldr	r0, [r0, #0]
 800c692:	f000 bdcf 	b.w	800d234 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>
 800c696:	4770      	bx	lr
 800c698:	20001e78 	andcs	r1, r0, r8, ror lr

0800c69c <DmxSend::Print()>:
 800c69c:	b510      	push	{r4, lr}
 800c69e:	4c0e      	ldr	r4, [pc, #56]	; (800c6d8 <DmxSend::Print()+0x3c>)
 800c6a0:	480e      	ldr	r0, [pc, #56]	; (800c6dc <DmxSend::Print()+0x40>)
 800c6a2:	f006 fdc7 	bl	8013234 <printf>
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	480d      	ldr	r0, [pc, #52]	; (800c6e0 <DmxSend::Print()+0x44>)
 800c6aa:	6819      	ldr	r1, [r3, #0]
 800c6ac:	f006 fdc2 	bl	8013234 <printf>
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	480c      	ldr	r0, [pc, #48]	; (800c6e4 <DmxSend::Print()+0x48>)
 800c6b4:	6859      	ldr	r1, [r3, #4]
 800c6b6:	f006 fdbd 	bl	8013234 <printf>
 800c6ba:	6823      	ldr	r3, [r4, #0]
 800c6bc:	490a      	ldr	r1, [pc, #40]	; (800c6e8 <DmxSend::Print()+0x4c>)
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	480a      	ldr	r0, [pc, #40]	; (800c6ec <DmxSend::Print()+0x50>)
 800c6c2:	fbb1 f1f3 	udiv	r1, r1, r3
 800c6c6:	f006 fdb5 	bl	8013234 <printf>
 800c6ca:	6823      	ldr	r3, [r4, #0]
 800c6cc:	4808      	ldr	r0, [pc, #32]	; (800c6f0 <DmxSend::Print()+0x54>)
 800c6ce:	8a19      	ldrh	r1, [r3, #16]
 800c6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d4:	f006 bdae 	b.w	8013234 <printf>
 800c6d8:	20001e78 	andcs	r1, r0, r8, ror lr
 800c6dc:	08015938 	stmdaeq	r1, {r3, r4, r5, r8, fp, ip, lr}
 800c6e0:	08015942 	stmdaeq	r1, {r1, r6, r8, fp, ip, lr}
 800c6e4:	08015956 	stmdaeq	r1, {r1, r2, r4, r6, r8, fp, ip, lr}
 800c6e8:	000f4240 	andeq	r4, pc, r0, asr #4
 800c6ec:	0801596a 	stmdaeq	r1, {r1, r3, r5, r6, r8, fp, ip, lr}
 800c6f0:	0801597e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, fp, ip, lr}

0800c6f4 <DmxSend::~DmxSend()>:
 800c6f4:	b510      	push	{r4, lr}
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	f006 faa0 	bl	8012c3c <operator delete(void*)>
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	bd10      	pop	{r4, pc}

0800c700 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800c700:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c702:	88c5      	ldrh	r5, [r0, #6]
 800c704:	8886      	ldrh	r6, [r0, #4]
 800c706:	42b5      	cmp	r5, r6
 800c708:	d216      	bcs.n	800c738 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800c70a:	4604      	mov	r4, r0
 800c70c:	6800      	ldr	r0, [r0, #0]
 800c70e:	4428      	add	r0, r5
 800c710:	1b75      	subs	r5, r6, r5
 800c712:	7a26      	ldrb	r6, [r4, #8]
 800c714:	b923      	cbnz	r3, 800c720 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800c716:	b926      	cbnz	r6, 800c722 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800c718:	9200      	str	r2, [sp, #0]
 800c71a:	460b      	mov	r3, r1
 800c71c:	4a09      	ldr	r2, [pc, #36]	; (800c744 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800c71e:	e003      	b.n	800c728 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800c720:	b166      	cbz	r6, 800c73c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800c722:	460b      	mov	r3, r1
 800c724:	9200      	str	r2, [sp, #0]
 800c726:	4a08      	ldr	r2, [pc, #32]	; (800c748 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800c728:	4629      	mov	r1, r5
 800c72a:	f006 fdab 	bl	8013284 <snprintf>
 800c72e:	4285      	cmp	r5, r0
 800c730:	bfa2      	ittt	ge
 800c732:	88e3      	ldrhge	r3, [r4, #6]
 800c734:	181b      	addge	r3, r3, r0
 800c736:	80e3      	strhge	r3, [r4, #6]
 800c738:	b002      	add	sp, #8
 800c73a:	bd70      	pop	{r4, r5, r6, pc}
 800c73c:	9200      	str	r2, [sp, #0]
 800c73e:	460b      	mov	r3, r1
 800c740:	4a02      	ldr	r2, [pc, #8]	; (800c74c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800c742:	e7f1      	b.n	800c728 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800c744:	0801553b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, ip, lr}
 800c748:	08015532 	stmdaeq	r1, {r1, r4, r5, r8, sl, ip, lr}
 800c74c:	0801553c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr}

0800c750 <DmxParams::DmxParams(DmxParamsStore*)>:
 800c750:	6001      	str	r1, [r0, #0]
 800c752:	2100      	movs	r1, #0
 800c754:	4a03      	ldr	r2, [pc, #12]	; (800c764 <DmxParams::DmxParams(DmxParamsStore*)+0x14>)
 800c756:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800c75a:	f64f 7228 	movw	r2, #65320	; 0xff28
 800c75e:	8182      	strh	r2, [r0, #12]
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	000c00b0 	strheq	r0, [ip], -r0	; <UNPREDICTABLE>

0800c768 <DmxParams::Load()>:
 800c768:	b508      	push	{r3, lr}
 800c76a:	2300      	movs	r3, #0
 800c76c:	4601      	mov	r1, r0
 800c76e:	6043      	str	r3, [r0, #4]
 800c770:	6800      	ldr	r0, [r0, #0]
 800c772:	b120      	cbz	r0, 800c77e <DmxParams::Load()+0x16>
 800c774:	6803      	ldr	r3, [r0, #0]
 800c776:	3104      	adds	r1, #4
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	4798      	blx	r3
 800c77c:	2001      	movs	r0, #1
 800c77e:	bd08      	pop	{r3, pc}

0800c780 <DmxParams::Load(char const*, unsigned int)>:
 800c780:	6803      	ldr	r3, [r0, #0]
 800c782:	b1d3      	cbz	r3, 800c7ba <DmxParams::Load(char const*, unsigned int)+0x3a>
 800c784:	2300      	movs	r3, #0
 800c786:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c788:	460d      	mov	r5, r1
 800c78a:	4616      	mov	r6, r2
 800c78c:	4604      	mov	r4, r0
 800c78e:	6043      	str	r3, [r0, #4]
 800c790:	4602      	mov	r2, r0
 800c792:	490a      	ldr	r1, [pc, #40]	; (800c7bc <DmxParams::Load(char const*, unsigned int)+0x3c>)
 800c794:	4668      	mov	r0, sp
 800c796:	f005 fcf1 	bl	801217c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800c79a:	4632      	mov	r2, r6
 800c79c:	4629      	mov	r1, r5
 800c79e:	4668      	mov	r0, sp
 800c7a0:	f005 fcf0 	bl	8012184 <ReadConfigFile::Read(char const*, unsigned int)>
 800c7a4:	4621      	mov	r1, r4
 800c7a6:	f851 0b04 	ldr.w	r0, [r1], #4
 800c7aa:	6803      	ldr	r3, [r0, #0]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	4798      	blx	r3
 800c7b0:	4668      	mov	r0, sp
 800c7b2:	f005 fce6 	bl	8012182 <ReadConfigFile::~ReadConfigFile()>
 800c7b6:	b002      	add	sp, #8
 800c7b8:	bd70      	pop	{r4, r5, r6, pc}
 800c7ba:	4770      	bx	lr
 800c7bc:	0800c88d 	stmdaeq	r0, {r0, r2, r3, r7, fp, lr, pc}

0800c7c0 <DmxParams::callbackFunction(char const*)>:
 800c7c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7c2:	460d      	mov	r5, r1
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	492d      	ldr	r1, [pc, #180]	; (800c87c <DmxParams::callbackFunction(char const*)+0xbc>)
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	f10d 0206 	add.w	r2, sp, #6
 800c7ce:	f005 fd91 	bl	80122f4 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c7d2:	b988      	cbnz	r0, 800c7f8 <DmxParams::callbackFunction(char const*)+0x38>
 800c7d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c7d8:	6863      	ldr	r3, [r4, #4]
 800c7da:	2a5b      	cmp	r2, #91	; 0x5b
 800c7dc:	d907      	bls.n	800c7ee <DmxParams::callbackFunction(char const*)+0x2e>
 800c7de:	2ab0      	cmp	r2, #176	; 0xb0
 800c7e0:	d005      	beq.n	800c7ee <DmxParams::callbackFunction(char const*)+0x2e>
 800c7e2:	8122      	strh	r2, [r4, #8]
 800c7e4:	f043 0301 	orr.w	r3, r3, #1
 800c7e8:	6063      	str	r3, [r4, #4]
 800c7ea:	b003      	add	sp, #12
 800c7ec:	bd30      	pop	{r4, r5, pc}
 800c7ee:	22b0      	movs	r2, #176	; 0xb0
 800c7f0:	f023 0301 	bic.w	r3, r3, #1
 800c7f4:	8122      	strh	r2, [r4, #8]
 800c7f6:	e7f7      	b.n	800c7e8 <DmxParams::callbackFunction(char const*)+0x28>
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	4921      	ldr	r1, [pc, #132]	; (800c880 <DmxParams::callbackFunction(char const*)+0xc0>)
 800c7fc:	f10d 0206 	add.w	r2, sp, #6
 800c800:	f005 fd78 	bl	80122f4 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c804:	b968      	cbnz	r0, 800c822 <DmxParams::callbackFunction(char const*)+0x62>
 800c806:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c80a:	6863      	ldr	r3, [r4, #4]
 800c80c:	2a0c      	cmp	r2, #12
 800c80e:	bf93      	iteet	ls
 800c810:	220c      	movls	r2, #12
 800c812:	8162      	strhhi	r2, [r4, #10]
 800c814:	f043 0302 	orrhi.w	r3, r3, #2
 800c818:	8162      	strhls	r2, [r4, #10]
 800c81a:	bf98      	it	ls
 800c81c:	f023 0302 	bicls.w	r3, r3, #2
 800c820:	e7e2      	b.n	800c7e8 <DmxParams::callbackFunction(char const*)+0x28>
 800c822:	4628      	mov	r0, r5
 800c824:	4917      	ldr	r1, [pc, #92]	; (800c884 <DmxParams::callbackFunction(char const*)+0xc4>)
 800c826:	f10d 0205 	add.w	r2, sp, #5
 800c82a:	f005 fd81 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c82e:	b950      	cbnz	r0, 800c846 <DmxParams::callbackFunction(char const*)+0x86>
 800c830:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c834:	6863      	ldr	r3, [r4, #4]
 800c836:	2a28      	cmp	r2, #40	; 0x28
 800c838:	7322      	strb	r2, [r4, #12]
 800c83a:	bf14      	ite	ne
 800c83c:	f043 0304 	orrne.w	r3, r3, #4
 800c840:	f023 0304 	biceq.w	r3, r3, #4
 800c844:	e7d0      	b.n	800c7e8 <DmxParams::callbackFunction(char const*)+0x28>
 800c846:	4628      	mov	r0, r5
 800c848:	490f      	ldr	r1, [pc, #60]	; (800c888 <DmxParams::callbackFunction(char const*)+0xc8>)
 800c84a:	f10d 0206 	add.w	r2, sp, #6
 800c84e:	f005 fd51 	bl	80122f4 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c852:	2800      	cmp	r0, #0
 800c854:	d1c9      	bne.n	800c7ea <DmxParams::callbackFunction(char const*)+0x2a>
 800c856:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c85a:	6863      	ldr	r3, [r4, #4]
 800c85c:	1e91      	subs	r1, r2, #2
 800c85e:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800c862:	bf2f      	iteee	cs
 800c864:	22ff      	movcs	r2, #255	; 0xff
 800c866:	0852      	lsrcc	r2, r2, #1
 800c868:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800c86c:	7362      	strbcc	r2, [r4, #13]
 800c86e:	bf32      	itee	cc
 800c870:	f043 0308 	orrcc.w	r3, r3, #8
 800c874:	7362      	strbcs	r2, [r4, #13]
 800c876:	f023 0308 	biccs.w	r3, r3, #8
 800c87a:	e7b5      	b.n	800c7e8 <DmxParams::callbackFunction(char const*)+0x28>
 800c87c:	080159c8 	stmdaeq	r1, {r3, r6, r7, r8, fp, ip, lr}
 800c880:	080159ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, fp, ip, lr}
 800c884:	080159df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, fp, ip, lr}
 800c888:	080159d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, fp, ip, lr}

0800c88c <DmxParams::staticCallbackFunction(void*, char const*)>:
 800c88c:	f7ff bf98 	b.w	800c7c0 <DmxParams::callbackFunction(char const*)>

0800c890 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	4604      	mov	r4, r0
 800c894:	4615      	mov	r5, r2
 800c896:	461e      	mov	r6, r3
 800c898:	b086      	sub	sp, #24
 800c89a:	3004      	adds	r0, #4
 800c89c:	b361      	cbz	r1, 800c8f8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x68>
 800c89e:	220a      	movs	r2, #10
 800c8a0:	f006 fa8f 	bl	8012dc2 <memmove>
 800c8a4:	462a      	mov	r2, r5
 800c8a6:	4633      	mov	r3, r6
 800c8a8:	4931      	ldr	r1, [pc, #196]	; (800c970 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe0>)
 800c8aa:	a803      	add	r0, sp, #12
 800c8ac:	f005 fb96 	bl	8011fdc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800c8b0:	6863      	ldr	r3, [r4, #4]
 800c8b2:	8922      	ldrh	r2, [r4, #8]
 800c8b4:	492f      	ldr	r1, [pc, #188]	; (800c974 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe4>)
 800c8b6:	f003 0301 	and.w	r3, r3, #1
 800c8ba:	a803      	add	r0, sp, #12
 800c8bc:	f7ff ff20 	bl	800c700 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800c8c0:	6863      	ldr	r3, [r4, #4]
 800c8c2:	492d      	ldr	r1, [pc, #180]	; (800c978 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe8>)
 800c8c4:	8962      	ldrh	r2, [r4, #10]
 800c8c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c8ca:	a803      	add	r0, sp, #12
 800c8cc:	f7ff ff18 	bl	800c700 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800c8d0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800c8d4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800c8d8:	42a9      	cmp	r1, r5
 800c8da:	d222      	bcs.n	800c922 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x92>
 800c8dc:	9803      	ldr	r0, [sp, #12]
 800c8de:	1a6d      	subs	r5, r5, r1
 800c8e0:	4408      	add	r0, r1
 800c8e2:	6861      	ldr	r1, [r4, #4]
 800c8e4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800c8e8:	0749      	lsls	r1, r1, #29
 800c8ea:	7b23      	ldrb	r3, [r4, #12]
 800c8ec:	d40b      	bmi.n	800c906 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x76>
 800c8ee:	b95a      	cbnz	r2, 800c908 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x78>
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	4a22      	ldr	r2, [pc, #136]	; (800c97c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xec>)
 800c8f4:	4b22      	ldr	r3, [pc, #136]	; (800c980 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 800c8f6:	e00a      	b.n	800c90e <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7e>
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	4601      	mov	r1, r0
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	4618      	mov	r0, r3
 800c900:	68d2      	ldr	r2, [r2, #12]
 800c902:	4790      	blx	r2
 800c904:	e7ce      	b.n	800c8a4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x14>
 800c906:	b37a      	cbz	r2, 800c968 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xd8>
 800c908:	9300      	str	r3, [sp, #0]
 800c90a:	4a1e      	ldr	r2, [pc, #120]	; (800c984 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800c90c:	4b1c      	ldr	r3, [pc, #112]	; (800c980 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 800c90e:	4629      	mov	r1, r5
 800c910:	f006 fcb8 	bl	8013284 <snprintf>
 800c914:	4285      	cmp	r5, r0
 800c916:	bfa2      	ittt	ge
 800c918:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800c91c:	18c0      	addge	r0, r0, r3
 800c91e:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800c922:	7b62      	ldrb	r2, [r4, #13]
 800c924:	6863      	ldr	r3, [r4, #4]
 800c926:	3201      	adds	r2, #1
 800c928:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c92c:	4916      	ldr	r1, [pc, #88]	; (800c988 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800c92e:	0052      	lsls	r2, r2, #1
 800c930:	a803      	add	r0, sp, #12
 800c932:	f7ff fee5 	bl	800c700 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800c936:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800c93a:	b17b      	cbz	r3, 800c95c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xcc>
 800c93c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800c940:	9b03      	ldr	r3, [sp, #12]
 800c942:	4413      	add	r3, r2
 800c944:	227d      	movs	r2, #125	; 0x7d
 800c946:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c94a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800c94e:	9903      	ldr	r1, [sp, #12]
 800c950:	54ca      	strb	r2, [r1, r3]
 800c952:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800c956:	3301      	adds	r3, #1
 800c958:	f8ad 3012 	strh.w	r3, [sp, #18]
 800c95c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800c960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c962:	601a      	str	r2, [r3, #0]
 800c964:	b006      	add	sp, #24
 800c966:	bd70      	pop	{r4, r5, r6, pc}
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	4a08      	ldr	r2, [pc, #32]	; (800c98c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800c96c:	4b04      	ldr	r3, [pc, #16]	; (800c980 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 800c96e:	e7ce      	b.n	800c90e <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7e>
 800c970:	080159f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, fp, ip, lr}
 800c974:	080159c8 	stmdaeq	r1, {r3, r6, r7, r8, fp, ip, lr}
 800c978:	080159ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, fp, ip, lr}
 800c97c:	0801553b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, ip, lr}
 800c980:	080159df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, fp, ip, lr}
 800c984:	08015532 	stmdaeq	r1, {r1, r4, r5, r8, sl, ip, lr}
 800c988:	080159d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, fp, ip, lr}
 800c98c:	0801553c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr}

0800c990 <DmxParams::Save(char*, unsigned int, unsigned int&)>:
 800c990:	b513      	push	{r0, r1, r4, lr}
 800c992:	6804      	ldr	r4, [r0, #0]
 800c994:	b914      	cbnz	r4, 800c99c <DmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800c996:	601c      	str	r4, [r3, #0]
 800c998:	b002      	add	sp, #8
 800c99a:	bd10      	pop	{r4, pc}
 800c99c:	9300      	str	r3, [sp, #0]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	460a      	mov	r2, r1
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	f7ff ff74 	bl	800c890 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>
 800c9a8:	e7f6      	b.n	800c998 <DmxParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800c9ac <DmxParams::Set(Dmx*)>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	6843      	ldr	r3, [r0, #4]
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	07d8      	lsls	r0, r3, #31
 800c9b4:	460d      	mov	r5, r1
 800c9b6:	d503      	bpl.n	800c9c0 <DmxParams::Set(Dmx*)+0x14>
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	8921      	ldrh	r1, [r4, #8]
 800c9bc:	f000 fc16 	bl	800d1ec <Dmx::SetDmxBreakTime(unsigned int)>
 800c9c0:	6863      	ldr	r3, [r4, #4]
 800c9c2:	0799      	lsls	r1, r3, #30
 800c9c4:	d503      	bpl.n	800c9ce <DmxParams::Set(Dmx*)+0x22>
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	8961      	ldrh	r1, [r4, #10]
 800c9ca:	f000 fc19 	bl	800d200 <Dmx::SetDmxMabTime(unsigned int)>
 800c9ce:	6863      	ldr	r3, [r4, #4]
 800c9d0:	075a      	lsls	r2, r3, #29
 800c9d2:	d507      	bpl.n	800c9e4 <DmxParams::Set(Dmx*)+0x38>
 800c9d4:	7b21      	ldrb	r1, [r4, #12]
 800c9d6:	b111      	cbz	r1, 800c9de <DmxParams::Set(Dmx*)+0x32>
 800c9d8:	4b08      	ldr	r3, [pc, #32]	; (800c9fc <DmxParams::Set(Dmx*)+0x50>)
 800c9da:	fbb3 f1f1 	udiv	r1, r3, r1
 800c9de:	4628      	mov	r0, r5
 800c9e0:	f000 fbd4 	bl	800d18c <Dmx::SetDmxPeriodTime(unsigned int)>
 800c9e4:	6863      	ldr	r3, [r4, #4]
 800c9e6:	071b      	lsls	r3, r3, #28
 800c9e8:	d507      	bpl.n	800c9fa <DmxParams::Set(Dmx*)+0x4e>
 800c9ea:	7b61      	ldrb	r1, [r4, #13]
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9f2:	3101      	adds	r1, #1
 800c9f4:	0049      	lsls	r1, r1, #1
 800c9f6:	f000 bc0d 	b.w	800d214 <Dmx::SetDmxSlots(unsigned short)>
 800c9fa:	bd38      	pop	{r3, r4, r5, pc}
 800c9fc:	000f4240 	andeq	r4, pc, r0, asr #4

0800ca00 <DmxParams::Dump()>:
 800ca00:	4770      	bx	lr
	...

0800ca04 <Rdm::Receive(unsigned int)>:
 800ca04:	4b02      	ldr	r3, [pc, #8]	; (800ca10 <Rdm::Receive(unsigned int)+0xc>)
 800ca06:	4601      	mov	r1, r0
 800ca08:	6818      	ldr	r0, [r3, #0]
 800ca0a:	f000 bc9d 	b.w	800d348 <Dmx::RdmReceive(unsigned int)>
 800ca0e:	bf00      	nop
 800ca10:	20001e78 	andcs	r1, r0, r8, ror lr

0800ca14 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>:
 800ca14:	4b02      	ldr	r3, [pc, #8]	; (800ca20 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)+0xc>)
 800ca16:	460a      	mov	r2, r1
 800ca18:	4601      	mov	r1, r0
 800ca1a:	6818      	ldr	r0, [r3, #0]
 800ca1c:	f000 bca6 	b.w	800d36c <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>
 800ca20:	20001e78 	andcs	r1, r0, r8, ror lr

0800ca24 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800ca24:	2300      	movs	r3, #0
 800ca26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	460e      	mov	r6, r1
 800ca2e:	4617      	mov	r7, r2
 800ca30:	4d0b      	ldr	r5, [pc, #44]	; (800ca60 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 800ca32:	461a      	mov	r2, r3
 800ca34:	4601      	mov	r1, r0
 800ca36:	6828      	ldr	r0, [r5, #0]
 800ca38:	f000 fa9c 	bl	800cf74 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800ca3c:	463b      	mov	r3, r7
 800ca3e:	4632      	mov	r2, r6
 800ca40:	4621      	mov	r1, r4
 800ca42:	6828      	ldr	r0, [r5, #0]
 800ca44:	f000 fc3a 	bl	800d2bc <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 800ca48:	2100      	movs	r1, #0
 800ca4a:	2004      	movs	r0, #4
 800ca4c:	f007 fe60 	bl	8014710 <udelay(unsigned int, unsigned int)>
 800ca50:	2301      	movs	r3, #1
 800ca52:	4621      	mov	r1, r4
 800ca54:	6828      	ldr	r0, [r5, #0]
 800ca56:	461a      	mov	r2, r3
 800ca58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca5c:	f000 ba8a 	b.w	800cf74 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800ca60:	20001e78 	andcs	r1, r0, r8, ror lr

0800ca64 <USART2_IRQHandler>:
 800ca64:	b510      	push	{r4, lr}
 800ca66:	f3bf 8f5f 	dmb	sy
 800ca6a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800ca6e:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800ca72:	f013 0f02 	tst.w	r3, #2
 800ca76:	4b74      	ldr	r3, [pc, #464]	; (800cc48 <USART2_IRQHandler+0x1e4>)
 800ca78:	d00e      	beq.n	800ca98 <USART2_IRQHandler+0x34>
 800ca7a:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
 800ca7e:	f021 0102 	bic.w	r1, r1, #2
 800ca82:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
 800ca86:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800ca90:	2202      	movs	r2, #2
 800ca92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800ca96:	bd10      	pop	{r4, pc}
 800ca98:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800ca9c:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 800caa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800caa4:	290a      	cmp	r1, #10
 800caa6:	f200 80ca 	bhi.w	800cc3e <USART2_IRQHandler+0x1da>
 800caaa:	e8df f001 	tbb	[pc, r1]
 800caae:	c810c806 	ldmdagt	r0, {r1, r2, fp, lr, pc}
 800cab2:	6d5f482c 	ldclvs	8, cr4, [pc, #-176]	; 800ca08 <Rdm::Receive(unsigned int)+0x4>
 800cab6:	00ac9886 	adceq	r9, ip, r6, lsl #17
 800caba:	2108      	movs	r1, #8
 800cabc:	701a      	strb	r2, [r3, #0]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800cac4:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800cac8:	f3bf 8f5f 	dmb	sy
 800cacc:	e7e3      	b.n	800ca96 <USART2_IRQHandler+0x32>
 800cace:	b11a      	cbz	r2, 800cad8 <USART2_IRQHandler+0x74>
 800cad0:	2acc      	cmp	r2, #204	; 0xcc
 800cad2:	d012      	beq.n	800cafa <USART2_IRQHandler+0x96>
 800cad4:	2200      	movs	r2, #0
 800cad6:	e00d      	b.n	800caf4 <USART2_IRQHandler+0x90>
 800cad8:	701a      	strb	r2, [r3, #0]
 800cada:	2201      	movs	r2, #1
 800cadc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800cae0:	4a5a      	ldr	r2, [pc, #360]	; (800cc4c <USART2_IRQHandler+0x1e8>)
 800cae2:	6851      	ldr	r1, [r2, #4]
 800cae4:	3101      	adds	r1, #1
 800cae6:	6051      	str	r1, [r2, #4]
 800cae8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800caec:	f8d1 1424 	ldr.w	r1, [r1, #1060]	; 0x424
 800caf0:	60d1      	str	r1, [r2, #12]
 800caf2:	2204      	movs	r2, #4
 800caf4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800caf8:	e7e6      	b.n	800cac8 <USART2_IRQHandler+0x64>
 800cafa:	701a      	strb	r2, [r3, #0]
 800cafc:	4a54      	ldr	r2, [pc, #336]	; (800cc50 <USART2_IRQHandler+0x1ec>)
 800cafe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800cb02:	2205      	movs	r2, #5
 800cb04:	e7f6      	b.n	800caf4 <USART2_IRQHandler+0x90>
 800cb06:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800cb0a:	b288      	uxth	r0, r1
 800cb0c:	541a      	strb	r2, [r3, r0]
 800cb0e:	1c4a      	adds	r2, r1, #1
 800cb10:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800cb14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800cb18:	d904      	bls.n	800cb24 <USART2_IRQHandler+0xc0>
 800cb1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800cb22:	e7d7      	b.n	800cad4 <USART2_IRQHandler+0x70>
 800cb24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cb28:	4848      	ldr	r0, [pc, #288]	; (800cc4c <USART2_IRQHandler+0x1e8>)
 800cb2a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
 800cb2e:	68c3      	ldr	r3, [r0, #12]
 800cb30:	60c1      	str	r1, [r0, #12]
 800cb32:	ebc3 0341 	rsb	r3, r3, r1, lsl #1
 800cb36:	3304      	adds	r3, #4
 800cb38:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 800cb3c:	e7c4      	b.n	800cac8 <USART2_IRQHandler+0x64>
 800cb3e:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 800cb42:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 800cb46:	541a      	strb	r2, [r3, r0]
 800cb48:	1c41      	adds	r1, r0, #1
 800cb4a:	3817      	subs	r0, #23
 800cb4c:	b289      	uxth	r1, r1
 800cb4e:	4422      	add	r2, r4
 800cb50:	28e7      	cmp	r0, #231	; 0xe7
 800cb52:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800cb56:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800cb5a:	d804      	bhi.n	800cb66 <USART2_IRQHandler+0x102>
 800cb5c:	789a      	ldrb	r2, [r3, #2]
 800cb5e:	428a      	cmp	r2, r1
 800cb60:	d101      	bne.n	800cb66 <USART2_IRQHandler+0x102>
 800cb62:	2206      	movs	r2, #6
 800cb64:	e7c6      	b.n	800caf4 <USART2_IRQHandler+0x90>
 800cb66:	29ff      	cmp	r1, #255	; 0xff
 800cb68:	d9ae      	bls.n	800cac8 <USART2_IRQHandler+0x64>
 800cb6a:	e7b3      	b.n	800cad4 <USART2_IRQHandler+0x70>
 800cb6c:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800cb70:	545a      	strb	r2, [r3, r1]
 800cb72:	3101      	adds	r1, #1
 800cb74:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800cb78:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 800cb7c:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 800cb80:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800cb84:	2207      	movs	r2, #7
 800cb86:	e7b5      	b.n	800caf4 <USART2_IRQHandler+0x90>
 800cb88:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800cb8c:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800cb90:	545a      	strb	r2, [r3, r1]
 800cb92:	1a82      	subs	r2, r0, r2
 800cb94:	b292      	uxth	r2, r2
 800cb96:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800cb9a:	b912      	cbnz	r2, 800cba2 <USART2_IRQHandler+0x13e>
 800cb9c:	785a      	ldrb	r2, [r3, #1]
 800cb9e:	2a01      	cmp	r2, #1
 800cba0:	d001      	beq.n	800cba6 <USART2_IRQHandler+0x142>
 800cba2:	2200      	movs	r2, #0
 800cba4:	e7bb      	b.n	800cb1e <USART2_IRQHandler+0xba>
 800cba6:	3101      	adds	r1, #1
 800cba8:	4a2a      	ldr	r2, [pc, #168]	; (800cc54 <USART2_IRQHandler+0x1f0>)
 800cbaa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800cbae:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800cbb2:	6851      	ldr	r1, [r2, #4]
 800cbb4:	4a28      	ldr	r2, [pc, #160]	; (800cc58 <USART2_IRQHandler+0x1f4>)
 800cbb6:	6011      	str	r1, [r2, #0]
 800cbb8:	e78c      	b.n	800cad4 <USART2_IRQHandler+0x70>
 800cbba:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800cbbe:	2aaa      	cmp	r2, #170	; 0xaa
 800cbc0:	545a      	strb	r2, [r3, r1]
 800cbc2:	f101 0101 	add.w	r1, r1, #1
 800cbc6:	b289      	uxth	r1, r1
 800cbc8:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800cbcc:	d002      	beq.n	800cbd4 <USART2_IRQHandler+0x170>
 800cbce:	2909      	cmp	r1, #9
 800cbd0:	f47f af7a 	bne.w	800cac8 <USART2_IRQHandler+0x64>
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800cbda:	2209      	movs	r2, #9
 800cbdc:	e78a      	b.n	800caf4 <USART2_IRQHandler+0x90>
 800cbde:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800cbe2:	545a      	strb	r2, [r3, r1]
 800cbe4:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 800cbe8:	3101      	adds	r1, #1
 800cbea:	3201      	adds	r2, #1
 800cbec:	b292      	uxth	r2, r2
 800cbee:	2a0c      	cmp	r2, #12
 800cbf0:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800cbf4:	d002      	beq.n	800cbfc <USART2_IRQHandler+0x198>
 800cbf6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800cbfa:	e765      	b.n	800cac8 <USART2_IRQHandler+0x64>
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800cc02:	220a      	movs	r2, #10
 800cc04:	e776      	b.n	800caf4 <USART2_IRQHandler+0x90>
 800cc06:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800cc0a:	545a      	strb	r2, [r3, r1]
 800cc0c:	1c4a      	adds	r2, r1, #1
 800cc0e:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800cc12:	b292      	uxth	r2, r2
 800cc14:	3101      	adds	r1, #1
 800cc16:	b289      	uxth	r1, r1
 800cc18:	2904      	cmp	r1, #4
 800cc1a:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800cc1e:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 800cc22:	f47f af51 	bne.w	800cac8 <USART2_IRQHandler+0x64>
 800cc26:	2100      	movs	r1, #0
 800cc28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cc2c:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800cc30:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800cc34:	4b07      	ldr	r3, [pc, #28]	; (800cc54 <USART2_IRQHandler+0x1f0>)
 800cc36:	685a      	ldr	r2, [r3, #4]
 800cc38:	4b07      	ldr	r3, [pc, #28]	; (800cc58 <USART2_IRQHandler+0x1f4>)
 800cc3a:	601a      	str	r2, [r3, #0]
 800cc3c:	e744      	b.n	800cac8 <USART2_IRQHandler+0x64>
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800cc44:	e756      	b.n	800caf4 <USART2_IRQHandler+0x90>
 800cc46:	bf00      	nop
 800cc48:	20001a4c 	andcs	r1, r0, ip, asr #20
 800cc4c:	20001e68 	andcs	r1, r0, r8, ror #28
 800cc50:	00cc0001 	sbceq	r0, ip, r1
 800cc54:	e0001000 	and	r1, r0, r0
 800cc58:	20001e7c 	andcs	r1, r0, ip, ror lr

0800cc5c <TIMER1_IRQHandler>:
 800cc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc5e:	f3bf 8f5f 	dmb	sy
 800cc62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc66:	691c      	ldr	r4, [r3, #16]
 800cc68:	4e1f      	ldr	r6, [pc, #124]	; (800cce8 <TIMER1_IRQHandler+0x8c>)
 800cc6a:	07a7      	lsls	r7, r4, #30
 800cc6c:	8835      	ldrh	r5, [r6, #0]
 800cc6e:	d518      	bpl.n	800cca2 <TIMER1_IRQHandler+0x46>
 800cc70:	4f1e      	ldr	r7, [pc, #120]	; (800ccec <TIMER1_IRQHandler+0x90>)
 800cc72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc76:	2203      	movs	r2, #3
 800cc78:	2110      	movs	r1, #16
 800cc7a:	4638      	mov	r0, r7
 800cc7c:	f006 fe34 	bl	80138e8 <gpio_init>
 800cc80:	07ed      	lsls	r5, r5, #31
 800cc82:	d506      	bpl.n	800cc92 <TIMER1_IRQHandler+0x36>
 800cc84:	8833      	ldrh	r3, [r6, #0]
 800cc86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc8a:	8033      	strh	r3, [r6, #0]
 800cc8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc90:	617b      	str	r3, [r7, #20]
 800cc92:	4621      	mov	r1, r4
 800cc94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800cc98:	f007 f911 	bl	8013ebe <timer_interrupt_flag_clear>
 800cc9c:	f3bf 8f5f 	dmb	sy
 800cca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cca2:	0760      	lsls	r0, r4, #29
 800cca4:	d509      	bpl.n	800ccba <TIMER1_IRQHandler+0x5e>
 800cca6:	05e9      	lsls	r1, r5, #23
 800cca8:	d5f3      	bpl.n	800cc92 <TIMER1_IRQHandler+0x36>
 800ccaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccae:	2203      	movs	r2, #3
 800ccb0:	2118      	movs	r1, #24
 800ccb2:	480e      	ldr	r0, [pc, #56]	; (800ccec <TIMER1_IRQHandler+0x90>)
 800ccb4:	f006 fe18 	bl	80138e8 <gpio_init>
 800ccb8:	e7eb      	b.n	800cc92 <TIMER1_IRQHandler+0x36>
 800ccba:	0722      	lsls	r2, r4, #28
 800ccbc:	d5e9      	bpl.n	800cc92 <TIMER1_IRQHandler+0x36>
 800ccbe:	05eb      	lsls	r3, r5, #23
 800ccc0:	d5e7      	bpl.n	800cc92 <TIMER1_IRQHandler+0x36>
 800ccc2:	4b0b      	ldr	r3, [pc, #44]	; (800ccf0 <TIMER1_IRQHandler+0x94>)
 800ccc4:	2180      	movs	r1, #128	; 0x80
 800ccc6:	69da      	ldr	r2, [r3, #28]
 800ccc8:	480a      	ldr	r0, [pc, #40]	; (800ccf4 <TIMER1_IRQHandler+0x98>)
 800ccca:	f022 0201 	bic.w	r2, r2, #1
 800ccce:	61da      	str	r2, [r3, #28]
 800ccd0:	4a09      	ldr	r2, [pc, #36]	; (800ccf8 <TIMER1_IRQHandler+0x9c>)
 800ccd2:	629a      	str	r2, [r3, #40]	; 0x28
 800ccd4:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 800ccd8:	621a      	str	r2, [r3, #32]
 800ccda:	69da      	ldr	r2, [r3, #28]
 800ccdc:	f042 0201 	orr.w	r2, r2, #1
 800cce0:	61da      	str	r2, [r3, #28]
 800cce2:	f007 f98b 	bl	8013ffc <usart_dma_transmit_config>
 800cce6:	e7d4      	b.n	800cc92 <TIMER1_IRQHandler+0x36>
 800cce8:	20001e64 	andcs	r1, r0, r4, ror #28
 800ccec:	40011000 	andmi	r1, r1, r0
 800ccf0:	40020000 	andmi	r0, r2, r0
 800ccf4:	40004800 	andmi	r4, r0, r0, lsl #16
 800ccf8:	20001c5c 	andcs	r1, r0, ip, asr ip

0800ccfc <TIMER2_IRQHandler>:
 800ccfc:	b508      	push	{r3, lr}
 800ccfe:	f3bf 8f5f 	dmb	sy
 800cd02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd06:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 800cd0a:	078b      	lsls	r3, r1, #30
 800cd0c:	d50d      	bpl.n	800cd2a <TIMER2_IRQHandler+0x2e>
 800cd0e:	4b0a      	ldr	r3, [pc, #40]	; (800cd38 <TIMER2_IRQHandler+0x3c>)
 800cd10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800cd14:	2a04      	cmp	r2, #4
 800cd16:	d108      	bne.n	800cd2a <TIMER2_IRQHandler+0x2e>
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800cd1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cd22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800cd2a:	4804      	ldr	r0, [pc, #16]	; (800cd3c <TIMER2_IRQHandler+0x40>)
 800cd2c:	f007 f8c7 	bl	8013ebe <timer_interrupt_flag_clear>
 800cd30:	f3bf 8f5f 	dmb	sy
 800cd34:	bd08      	pop	{r3, pc}
 800cd36:	bf00      	nop
 800cd38:	20001a4c 	andcs	r1, r0, ip, asr #20
 800cd3c:	40000400 	andmi	r0, r0, r0, lsl #8

0800cd40 <TIMER3_IRQHandler>:
 800cd40:	b508      	push	{r3, lr}
 800cd42:	f3bf 8f5f 	dmb	sy
 800cd46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd4a:	4804      	ldr	r0, [pc, #16]	; (800cd5c <TIMER3_IRQHandler+0x1c>)
 800cd4c:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 800cd50:	f007 f8b5 	bl	8013ebe <timer_interrupt_flag_clear>
 800cd54:	f3bf 8f5f 	dmb	sy
 800cd58:	bd08      	pop	{r3, pc}
 800cd5a:	bf00      	nop
 800cd5c:	40000800 	andmi	r0, r0, r0, lsl #16

0800cd60 <TIMER6_IRQHandler>:
 800cd60:	b508      	push	{r3, lr}
 800cd62:	f3bf 8f5f 	dmb	sy
 800cd66:	4b07      	ldr	r3, [pc, #28]	; (800cd84 <TIMER6_IRQHandler+0x24>)
 800cd68:	4807      	ldr	r0, [pc, #28]	; (800cd88 <TIMER6_IRQHandler+0x28>)
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	6899      	ldr	r1, [r3, #8]
 800cd6e:	1a52      	subs	r2, r2, r1
 800cd70:	601a      	str	r2, [r3, #0]
 800cd72:	685a      	ldr	r2, [r3, #4]
 800cd74:	2101      	movs	r1, #1
 800cd76:	609a      	str	r2, [r3, #8]
 800cd78:	f007 f8a1 	bl	8013ebe <timer_interrupt_flag_clear>
 800cd7c:	f3bf 8f5f 	dmb	sy
 800cd80:	bd08      	pop	{r3, pc}
 800cd82:	bf00      	nop
 800cd84:	20001e68 	andcs	r1, r0, r8, ror #28
 800cd88:	40001400 	andmi	r1, r0, r0, lsl #8

0800cd8c <Dmx::ClearData(unsigned int)>:
 800cd8c:	f44f 7301 	mov.w	r3, #516	; 0x204
 800cd90:	b510      	push	{r4, lr}
 800cd92:	2400      	movs	r4, #0
 800cd94:	4a08      	ldr	r2, [pc, #32]	; (800cdb8 <Dmx::ClearData(unsigned int)+0x2c>)
 800cd96:	fb03 2301 	mla	r3, r3, r1, r2
 800cd9a:	f203 2002 	addw	r0, r3, #514	; 0x202
 800cd9e:	f823 4b02 	strh.w	r4, [r3], #2
 800cda2:	4283      	cmp	r3, r0
 800cda4:	d1fb      	bne.n	800cd9e <Dmx::ClearData(unsigned int)+0x12>
 800cda6:	f44f 7301 	mov.w	r3, #516	; 0x204
 800cdaa:	fb03 2201 	mla	r2, r3, r1, r2
 800cdae:	f240 2301 	movw	r3, #513	; 0x201
 800cdb2:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 800cdb6:	bd10      	pop	{r4, pc}
 800cdb8:	20001c5c 	andcs	r1, r0, ip, asr ip

0800cdbc <Dmx::StartData(unsigned int, unsigned int)>:
 800cdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdbe:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800cdc2:	6943      	ldr	r3, [r0, #20]
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	4615      	mov	r5, r2
 800cdc8:	b085      	sub	sp, #20
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d16a      	bne.n	800cea4 <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 800cdce:	4e47      	ldr	r6, [pc, #284]	; (800ceec <Dmx::StartData(unsigned int, unsigned int)+0x130>)
 800cdd0:	8834      	ldrh	r4, [r6, #0]
 800cdd2:	2c00      	cmp	r4, #0
 800cdd4:	d15b      	bne.n	800ce8e <Dmx::StartData(unsigned int, unsigned int)+0xd2>
 800cdd6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800cdda:	f006 fe1d 	bl	8013a18 <rcu_periph_clock_enable>
 800cdde:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800cde2:	f006 ff75 	bl	8013cd0 <timer_deinit>
 800cde6:	236b      	movs	r3, #107	; 0x6b
 800cde8:	9300      	str	r3, [sp, #0]
 800cdea:	4b41      	ldr	r3, [pc, #260]	; (800cef0 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 800cdec:	4669      	mov	r1, sp
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800cdf4:	9302      	str	r3, [sp, #8]
 800cdf6:	f8ad 4004 	strh.w	r4, [sp, #4]
 800cdfa:	f8ad 400c 	strh.w	r4, [sp, #12]
 800cdfe:	f88d 400e 	strb.w	r4, [sp, #14]
 800ce02:	f006 ffc7 	bl	8013d94 <timer_init>
 800ce06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ce0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ce0e:	f007 f859 	bl	8013ec4 <timer_flag_clear>
 800ce12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ce16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ce1a:	f007 f850 	bl	8013ebe <timer_interrupt_flag_clear>
 800ce1e:	2210      	movs	r2, #16
 800ce20:	4621      	mov	r1, r4
 800ce22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ce26:	f007 f812 	bl	8013e4e <timer_channel_output_mode_config>
 800ce2a:	2210      	movs	r2, #16
 800ce2c:	2101      	movs	r1, #1
 800ce2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ce32:	f007 f80c 	bl	8013e4e <timer_channel_output_mode_config>
 800ce36:	4f2f      	ldr	r7, [pc, #188]	; (800cef4 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 800ce38:	2210      	movs	r2, #16
 800ce3a:	2102      	movs	r1, #2
 800ce3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ce40:	f007 f805 	bl	8013e4e <timer_channel_output_mode_config>
 800ce44:	4622      	mov	r2, r4
 800ce46:	4621      	mov	r1, r4
 800ce48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ce4c:	f007 f825 	bl	8013e9a <timer_channel_output_pulse_value_config>
 800ce50:	2101      	movs	r1, #1
 800ce52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ce56:	883a      	ldrh	r2, [r7, #0]
 800ce58:	f007 f81f 	bl	8013e9a <timer_channel_output_pulse_value_config>
 800ce5c:	4b26      	ldr	r3, [pc, #152]	; (800cef8 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2102      	movs	r1, #2
 800ce64:	441a      	add	r2, r3
 800ce66:	b292      	uxth	r2, r2
 800ce68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ce6c:	f007 f815 	bl	8013e9a <timer_channel_output_pulse_value_config>
 800ce70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ce74:	210e      	movs	r1, #14
 800ce76:	f007 f81e 	bl	8013eb6 <timer_interrupt_enable>
 800ce7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce7e:	4b1f      	ldr	r3, [pc, #124]	; (800cefc <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 800ce80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ce84:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 800ce88:	601a      	str	r2, [r3, #0]
 800ce8a:	f006 ffdb 	bl	8013e44 <timer_enable>
 800ce8e:	2201      	movs	r2, #1
 800ce90:	8831      	ldrh	r1, [r6, #0]
 800ce92:	fa02 f305 	lsl.w	r3, r2, r5
 800ce96:	430b      	orrs	r3, r1
 800ce98:	8033      	strh	r3, [r6, #0]
 800ce9a:	4b19      	ldr	r3, [pc, #100]	; (800cf00 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 800ce9c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cea0:	b005      	add	sp, #20
 800cea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cea4:	f44f 7204 	mov.w	r2, #528	; 0x210
 800cea8:	4b16      	ldr	r3, [pc, #88]	; (800cf04 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800ceaa:	fb02 3305 	mla	r3, r2, r5, r3
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800ceb4:	2107      	movs	r1, #7
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f007 f8a6 	bl	8014008 <usart_flag_get>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	d0f9      	beq.n	800ceb4 <Dmx::StartData(unsigned int, unsigned int)+0xf8>
 800cec0:	4620      	mov	r0, r4
 800cec2:	4911      	ldr	r1, [pc, #68]	; (800cf08 <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 800cec4:	f007 f8c1 	bl	801404a <usart_interrupt_flag_clear>
 800cec8:	f240 3105 	movw	r1, #773	; 0x305
 800cecc:	4620      	mov	r0, r4
 800cece:	f007 f8a3 	bl	8014018 <usart_interrupt_enable>
 800ced2:	2202      	movs	r2, #2
 800ced4:	4b0a      	ldr	r3, [pc, #40]	; (800cf00 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 800ced6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ceda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cede:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800cee2:	f043 0302 	orr.w	r3, r3, #2
 800cee6:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800ceea:	e7d9      	b.n	800cea0 <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 800ceec:	20001e64 	andcs	r1, r0, r4, ror #28
 800cef0:	20000008 	andcs	r0, r0, r8
 800cef4:	20000010 	andcs	r0, r0, r0, lsl r0
 800cef8:	2000000c 	andcs	r0, r0, ip
 800cefc:	e000e100 	and	lr, r0, r0, lsl #2
 800cf00:	20001e60 	andcs	r1, r0, r0, ror #28
 800cf04:	20001a4c 	andcs	r1, r0, ip, asr #20
 800cf08:	00050305 	andeq	r0, r5, r5, lsl #6

0800cf0c <Dmx::StopData(unsigned int, unsigned int)>:
 800cf0c:	b538      	push	{r3, r4, r5, lr}
 800cf0e:	4d16      	ldr	r5, [pc, #88]	; (800cf68 <Dmx::StopData(unsigned int, unsigned int)+0x5c>)
 800cf10:	4614      	mov	r4, r2
 800cf12:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800cf16:	4603      	mov	r3, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	b17a      	cbz	r2, 800cf3c <Dmx::StopData(unsigned int, unsigned int)+0x30>
 800cf1c:	695b      	ldr	r3, [r3, #20]
 800cf1e:	b973      	cbnz	r3, 800cf3e <Dmx::StopData(unsigned int, unsigned int)+0x32>
 800cf20:	2201      	movs	r2, #1
 800cf22:	4912      	ldr	r1, [pc, #72]	; (800cf6c <Dmx::StopData(unsigned int, unsigned int)+0x60>)
 800cf24:	f104 0308 	add.w	r3, r4, #8
 800cf28:	fa02 f303 	lsl.w	r3, r2, r3
 800cf2c:	40a2      	lsls	r2, r4
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	880a      	ldrh	r2, [r1, #0]
 800cf32:	4013      	ands	r3, r2
 800cf34:	800b      	strh	r3, [r1, #0]
 800cf36:	2300      	movs	r3, #0
 800cf38:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800cf3c:	bd38      	pop	{r3, r4, r5, pc}
 800cf3e:	f240 3105 	movw	r1, #773	; 0x305
 800cf42:	f007 f875 	bl	8014030 <usart_interrupt_disable>
 800cf46:	f44f 7204 	mov.w	r2, #528	; 0x210
 800cf4a:	4b09      	ldr	r3, [pc, #36]	; (800cf70 <Dmx::StopData(unsigned int, unsigned int)+0x64>)
 800cf4c:	fb02 3304 	mla	r3, r2, r4, r3
 800cf50:	2200      	movs	r2, #0
 800cf52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800cf56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cf5a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800cf5e:	f023 0302 	bic.w	r3, r3, #2
 800cf62:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800cf66:	e7e6      	b.n	800cf36 <Dmx::StopData(unsigned int, unsigned int)+0x2a>
 800cf68:	20001e60 	andcs	r1, r0, r0, ror #28
 800cf6c:	20001e64 	andcs	r1, r0, r4, ror #28
 800cf70:	20001a4c 	andcs	r1, r0, ip, asr #20

0800cf74 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 800cf74:	b570      	push	{r4, r5, r6, lr}
 800cf76:	461d      	mov	r5, r3
 800cf78:	6943      	ldr	r3, [r0, #20]
 800cf7a:	4606      	mov	r6, r0
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	4614      	mov	r4, r2
 800cf80:	d014      	beq.n	800cfac <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 800cf82:	6142      	str	r2, [r0, #20]
 800cf84:	4910      	ldr	r1, [pc, #64]	; (800cfc8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800cf86:	2200      	movs	r2, #0
 800cf88:	f7ff ffc0 	bl	800cf0c <Dmx::StopData(unsigned int, unsigned int)>
 800cf8c:	b934      	cbnz	r4, 800cf9c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 800cf8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cf92:	4b0e      	ldr	r3, [pc, #56]	; (800cfcc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800cf94:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800cf98:	b94d      	cbnz	r5, 800cfae <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 800cf9a:	bd70      	pop	{r4, r5, r6, pc}
 800cf9c:	2c01      	cmp	r4, #1
 800cf9e:	d1fb      	bne.n	800cf98 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800cfa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cfa4:	4b09      	ldr	r3, [pc, #36]	; (800cfcc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800cfa6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800cfaa:	e7f5      	b.n	800cf98 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800cfac:	b135      	cbz	r5, 800cfbc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 800cfae:	4630      	mov	r0, r6
 800cfb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	4904      	ldr	r1, [pc, #16]	; (800cfc8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800cfb8:	f7ff bf00 	b.w	800cdbc <Dmx::StartData(unsigned int, unsigned int)>
 800cfbc:	462a      	mov	r2, r5
 800cfbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cfc2:	4901      	ldr	r1, [pc, #4]	; (800cfc8 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800cfc4:	f7ff bfa2 	b.w	800cf0c <Dmx::StopData(unsigned int, unsigned int)>
 800cfc8:	40004800 	andmi	r4, r0, r0, lsl #16
 800cfcc:	40010000 	andmi	r0, r1, r0

0800cfd0 <Dmx::Dmx()>:
 800cfd0:	225c      	movs	r2, #92	; 0x5c
 800cfd2:	230c      	movs	r3, #12
 800cfd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfd8:	e9c0 2300 	strd	r2, r3, [r0]
 800cfdc:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800cfe0:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800cfe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfe8:	2400      	movs	r4, #0
 800cfea:	4605      	mov	r5, r0
 800cfec:	8203      	strh	r3, [r0, #16]
 800cfee:	4b5d      	ldr	r3, [pc, #372]	; (800d164 <Dmx::Dmx()+0x194>)
 800cff0:	b08b      	sub	sp, #44	; 0x2c
 800cff2:	6018      	str	r0, [r3, #0]
 800cff4:	4b5c      	ldr	r3, [pc, #368]	; (800d168 <Dmx::Dmx()+0x198>)
 800cff6:	2203      	movs	r2, #3
 800cff8:	801c      	strh	r4, [r3, #0]
 800cffa:	2110      	movs	r1, #16
 800cffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d000:	485a      	ldr	r0, [pc, #360]	; (800d16c <Dmx::Dmx()+0x19c>)
 800d002:	f006 fc71 	bl	80138e8 <gpio_init>
 800d006:	4621      	mov	r1, r4
 800d008:	4628      	mov	r0, r5
 800d00a:	f7ff febf 	bl	800cd8c <Dmx::ClearData(unsigned int)>
 800d00e:	4b58      	ldr	r3, [pc, #352]	; (800d170 <Dmx::Dmx()+0x1a0>)
 800d010:	2201      	movs	r2, #1
 800d012:	4628      	mov	r0, r5
 800d014:	601c      	str	r4, [r3, #0]
 800d016:	4623      	mov	r3, r4
 800d018:	f7ff ffac 	bl	800cf74 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800d01c:	4b55      	ldr	r3, [pc, #340]	; (800d174 <Dmx::Dmx()+0x1a4>)
 800d01e:	4e56      	ldr	r6, [pc, #344]	; (800d178 <Dmx::Dmx()+0x1a8>)
 800d020:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 800d024:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800d028:	f006 fcf6 	bl	8013a18 <rcu_periph_clock_enable>
 800d02c:	f240 5001 	movw	r0, #1281	; 0x501
 800d030:	f006 fcf2 	bl	8013a18 <rcu_periph_clock_enable>
 800d034:	4630      	mov	r0, r6
 800d036:	2101      	movs	r1, #1
 800d038:	f006 fb52 	bl	80136e0 <dma_deinit>
 800d03c:	4b4f      	ldr	r3, [pc, #316]	; (800d17c <Dmx::Dmx()+0x1ac>)
 800d03e:	2701      	movs	r7, #1
 800d040:	e9cd 3403 	strd	r3, r4, [sp, #12]
 800d044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d048:	9308      	str	r3, [sp, #32]
 800d04a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d04e:	aa03      	add	r2, sp, #12
 800d050:	4639      	mov	r1, r7
 800d052:	4630      	mov	r0, r6
 800d054:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800d058:	9406      	str	r4, [sp, #24]
 800d05a:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800d05e:	f006 fb5b 	bl	8013718 <dma_init>
 800d062:	4639      	mov	r1, r7
 800d064:	4630      	mov	r0, r6
 800d066:	f006 fb91 	bl	801378c <dma_circulation_disable>
 800d06a:	4639      	mov	r1, r7
 800d06c:	4630      	mov	r0, r6
 800d06e:	f006 fb9d 	bl	80137ac <dma_memory_to_memory_disable>
 800d072:	f5a6 36fe 	sub.w	r6, r6, #130048	; 0x1fc00
 800d076:	f240 7001 	movw	r0, #1793	; 0x701
 800d07a:	f006 fccd 	bl	8013a18 <rcu_periph_clock_enable>
 800d07e:	4630      	mov	r0, r6
 800d080:	f006 fe26 	bl	8013cd0 <timer_deinit>
 800d084:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800d088:	236b      	movs	r3, #107	; 0x6b
 800d08a:	4630      	mov	r0, r6
 800d08c:	a903      	add	r1, sp, #12
 800d08e:	9303      	str	r3, [sp, #12]
 800d090:	f8ad 4010 	strh.w	r4, [sp, #16]
 800d094:	f8cd 9014 	str.w	r9, [sp, #20]
 800d098:	f8ad 4018 	strh.w	r4, [sp, #24]
 800d09c:	f88d 401a 	strb.w	r4, [sp, #26]
 800d0a0:	f006 fe78 	bl	8013d94 <timer_init>
 800d0a4:	4649      	mov	r1, r9
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	f006 ff0c 	bl	8013ec4 <timer_flag_clear>
 800d0ac:	4649      	mov	r1, r9
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	f006 ff05 	bl	8013ebe <timer_interrupt_flag_clear>
 800d0b4:	4621      	mov	r1, r4
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	2210      	movs	r2, #16
 800d0ba:	f006 fec8 	bl	8013e4e <timer_channel_output_mode_config>
 800d0be:	4639      	mov	r1, r7
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	2210      	movs	r2, #16
 800d0c4:	f006 fec3 	bl	8013e4e <timer_channel_output_mode_config>
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	2210      	movs	r2, #16
 800d0cc:	2102      	movs	r1, #2
 800d0ce:	f006 febe 	bl	8013e4e <timer_channel_output_mode_config>
 800d0d2:	2210      	movs	r2, #16
 800d0d4:	2103      	movs	r1, #3
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	f006 feb9 	bl	8013e4e <timer_channel_output_mode_config>
 800d0dc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800d0e0:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800d180 <Dmx::Dmx()+0x1b0>
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 800d0ea:	f8c8 3000 	str.w	r3, [r8]
 800d0ee:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800d0f2:	f006 fea7 	bl	8013e44 <timer_enable>
 800d0f6:	f240 7005 	movw	r0, #1797	; 0x705
 800d0fa:	f006 fc8d 	bl	8013a18 <rcu_periph_clock_enable>
 800d0fe:	4630      	mov	r0, r6
 800d100:	f006 fde6 	bl	8013cd0 <timer_deinit>
 800d104:	f642 232f 	movw	r3, #10799	; 0x2a2f
 800d108:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d10c:	f242 7310 	movw	r3, #10000	; 0x2710
 800d110:	4630      	mov	r0, r6
 800d112:	a903      	add	r1, sp, #12
 800d114:	9305      	str	r3, [sp, #20]
 800d116:	f006 fe3d 	bl	8013d94 <timer_init>
 800d11a:	4649      	mov	r1, r9
 800d11c:	4630      	mov	r0, r6
 800d11e:	f006 fed1 	bl	8013ec4 <timer_flag_clear>
 800d122:	4649      	mov	r1, r9
 800d124:	4630      	mov	r0, r6
 800d126:	f006 feca 	bl	8013ebe <timer_interrupt_flag_clear>
 800d12a:	4639      	mov	r1, r7
 800d12c:	4630      	mov	r0, r6
 800d12e:	f006 fec2 	bl	8013eb6 <timer_interrupt_enable>
 800d132:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d136:	4630      	mov	r0, r6
 800d138:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 800d13c:	f8c8 3004 	str.w	r3, [r8, #4]
 800d140:	f006 fe80 	bl	8013e44 <timer_enable>
 800d144:	2302      	movs	r3, #2
 800d146:	2208      	movs	r2, #8
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	490e      	ldr	r1, [pc, #56]	; (800d184 <Dmx::Dmx()+0x1b4>)
 800d14c:	4623      	mov	r3, r4
 800d14e:	480e      	ldr	r0, [pc, #56]	; (800d188 <Dmx::Dmx()+0x1b8>)
 800d150:	f007 f9f0 	bl	8014534 <gd32_uart_begin>
 800d154:	2380      	movs	r3, #128	; 0x80
 800d156:	4628      	mov	r0, r5
 800d158:	f8c8 3004 	str.w	r3, [r8, #4]
 800d15c:	b00b      	add	sp, #44	; 0x2c
 800d15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d162:	bf00      	nop
 800d164:	20001e78 	andcs	r1, r0, r8, ror lr
 800d168:	20001e64 	andcs	r1, r0, r4, ror #28
 800d16c:	40010c00 	andmi	r0, r1, r0, lsl #24
 800d170:	20001e60 	andcs	r1, r0, r0, ror #28
 800d174:	20001a4c 	andcs	r1, r0, ip, asr #20
 800d178:	40020000 	andmi	r0, r2, r0
 800d17c:	40004804 	andmi	r4, r0, r4, lsl #16
 800d180:	e000e100 	and	lr, r0, r0, lsl #2
 800d184:	0003d090 	muleq	r3, r0, r0
 800d188:	40004800 	andmi	r4, r0, r0, lsl #16

0800d18c <Dmx::SetDmxPeriodTime(unsigned int)>:
 800d18c:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <Dmx::SetDmxPeriodTime(unsigned int)+0x50>)
 800d18e:	b570      	push	{r4, r5, r6, lr}
 800d190:	60c1      	str	r1, [r0, #12]
 800d192:	f8b3 0202 	ldrh.w	r0, [r3, #514]	; 0x202
 800d196:	232c      	movs	r3, #44	; 0x2c
 800d198:	f64f 76d3 	movw	r6, #65491	; 0xffd3
 800d19c:	4d10      	ldr	r5, [pc, #64]	; (800d1e0 <Dmx::SetDmxPeriodTime(unsigned int)+0x54>)
 800d19e:	4c11      	ldr	r4, [pc, #68]	; (800d1e4 <Dmx::SetDmxPeriodTime(unsigned int)+0x58>)
 800d1a0:	4358      	muls	r0, r3
 800d1a2:	682a      	ldr	r2, [r5, #0]
 800d1a4:	6823      	ldr	r3, [r4, #0]
 800d1a6:	4413      	add	r3, r2
 800d1a8:	4403      	add	r3, r0
 800d1aa:	42b3      	cmp	r3, r6
 800d1ac:	d908      	bls.n	800d1c0 <Dmx::SetDmxPeriodTime(unsigned int)+0x34>
 800d1ae:	2ab0      	cmp	r2, #176	; 0xb0
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	bf28      	it	cs
 800d1b4:	23b0      	movcs	r3, #176	; 0xb0
 800d1b6:	220c      	movs	r2, #12
 800d1b8:	602b      	str	r3, [r5, #0]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	6022      	str	r2, [r4, #0]
 800d1be:	4403      	add	r3, r0
 800d1c0:	4a09      	ldr	r2, [pc, #36]	; (800d1e8 <Dmx::SetDmxPeriodTime(unsigned int)+0x5c>)
 800d1c2:	b109      	cbz	r1, 800d1c8 <Dmx::SetDmxPeriodTime(unsigned int)+0x3c>
 800d1c4:	428b      	cmp	r3, r1
 800d1c6:	d907      	bls.n	800d1d8 <Dmx::SetDmxPeriodTime(unsigned int)+0x4c>
 800d1c8:	f240 41b4 	movw	r1, #1204	; 0x4b4
 800d1cc:	332c      	adds	r3, #44	; 0x2c
 800d1ce:	428b      	cmp	r3, r1
 800d1d0:	bf2c      	ite	cs
 800d1d2:	6013      	strcs	r3, [r2, #0]
 800d1d4:	6011      	strcc	r1, [r2, #0]
 800d1d6:	e000      	b.n	800d1da <Dmx::SetDmxPeriodTime(unsigned int)+0x4e>
 800d1d8:	6011      	str	r1, [r2, #0]
 800d1da:	bd70      	pop	{r4, r5, r6, pc}
 800d1dc:	20001c5c 	andcs	r1, r0, ip, asr ip
 800d1e0:	20000010 	andcs	r0, r0, r0, lsl r0
 800d1e4:	2000000c 	andcs	r0, r0, ip
 800d1e8:	20000008 	andcs	r0, r0, r8

0800d1ec <Dmx::SetDmxBreakTime(unsigned int)>:
 800d1ec:	295c      	cmp	r1, #92	; 0x5c
 800d1ee:	bf38      	it	cc
 800d1f0:	215c      	movcc	r1, #92	; 0x5c
 800d1f2:	4b02      	ldr	r3, [pc, #8]	; (800d1fc <Dmx::SetDmxBreakTime(unsigned int)+0x10>)
 800d1f4:	6019      	str	r1, [r3, #0]
 800d1f6:	68c1      	ldr	r1, [r0, #12]
 800d1f8:	f7ff bfc8 	b.w	800d18c <Dmx::SetDmxPeriodTime(unsigned int)>
 800d1fc:	20000010 	andcs	r0, r0, r0, lsl r0

0800d200 <Dmx::SetDmxMabTime(unsigned int)>:
 800d200:	290c      	cmp	r1, #12
 800d202:	bf38      	it	cc
 800d204:	210c      	movcc	r1, #12
 800d206:	4b02      	ldr	r3, [pc, #8]	; (800d210 <Dmx::SetDmxMabTime(unsigned int)+0x10>)
 800d208:	6019      	str	r1, [r3, #0]
 800d20a:	68c1      	ldr	r1, [r0, #12]
 800d20c:	f7ff bfbe 	b.w	800d18c <Dmx::SetDmxPeriodTime(unsigned int)>
 800d210:	2000000c 	andcs	r0, r0, ip

0800d214 <Dmx::SetDmxSlots(unsigned short)>:
 800d214:	1e8b      	subs	r3, r1, #2
 800d216:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800d21a:	d809      	bhi.n	800d230 <Dmx::SetDmxSlots(unsigned short)+0x1c>
 800d21c:	6983      	ldr	r3, [r0, #24]
 800d21e:	8201      	strh	r1, [r0, #16]
 800d220:	b11b      	cbz	r3, 800d22a <Dmx::SetDmxSlots(unsigned short)+0x16>
 800d222:	4299      	cmp	r1, r3
 800d224:	bf94      	ite	ls
 800d226:	6181      	strls	r1, [r0, #24]
 800d228:	6183      	strhi	r3, [r0, #24]
 800d22a:	68c1      	ldr	r1, [r0, #12]
 800d22c:	f7ff bfae 	b.w	800d18c <Dmx::SetDmxPeriodTime(unsigned int)>
 800d230:	4770      	bx	lr
	...

0800d234 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>:
 800d234:	b4f0      	push	{r4, r5, r6, r7}
 800d236:	8a04      	ldrh	r4, [r0, #16]
 800d238:	4d11      	ldr	r5, [pc, #68]	; (800d280 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x4c>)
 800d23a:	42a3      	cmp	r3, r4
 800d23c:	bf28      	it	cs
 800d23e:	4623      	movcs	r3, r4
 800d240:	f44f 7401 	mov.w	r4, #516	; 0x204
 800d244:	434c      	muls	r4, r1
 800d246:	1c5f      	adds	r7, r3, #1
 800d248:	192e      	adds	r6, r5, r4
 800d24a:	f892 f000 	pld	[r2]
 800d24e:	3401      	adds	r4, #1
 800d250:	f8a6 7202 	strh.w	r7, [r6, #514]	; 0x202
 800d254:	442c      	add	r4, r5
 800d256:	18d6      	adds	r6, r2, r3
 800d258:	4296      	cmp	r6, r2
 800d25a:	d004      	beq.n	800d266 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x32>
 800d25c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d260:	f804 5b01 	strb.w	r5, [r4], #1
 800d264:	e7f8      	b.n	800d258 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x24>
 800d266:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d26a:	698a      	ldr	r2, [r1, #24]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d004      	beq.n	800d27a <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x46>
 800d270:	bcf0      	pop	{r4, r5, r6, r7}
 800d272:	618b      	str	r3, [r1, #24]
 800d274:	68c1      	ldr	r1, [r0, #12]
 800d276:	f7ff bf89 	b.w	800d18c <Dmx::SetDmxPeriodTime(unsigned int)>
 800d27a:	bcf0      	pop	{r4, r5, r6, r7}
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	20001c5c 	andcs	r1, r0, ip, asr ip

0800d284 <Dmx::GetDmxAvailable(unsigned int)>:
 800d284:	f44f 7304 	mov.w	r3, #528	; 0x210
 800d288:	4807      	ldr	r0, [pc, #28]	; (800d2a8 <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 800d28a:	fb03 0001 	mla	r0, r3, r1, r0
 800d28e:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800d292:	f413 4100 	ands.w	r1, r3, #32768	; 0x8000
 800d296:	bf1b      	ittet	ne
 800d298:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800d29c:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800d2a0:	4608      	moveq	r0, r1
 800d2a2:	f8c0 3204 	strne.w	r3, [r0, #516]	; 0x204
 800d2a6:	4770      	bx	lr
 800d2a8:	20001a4c 	andcs	r1, r0, ip, asr #20

0800d2ac <Dmx::GetUpdatesPerSecond(unsigned int)>:
 800d2ac:	f3bf 8f5f 	dmb	sy
 800d2b0:	4b01      	ldr	r3, [pc, #4]	; (800d2b8 <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 800d2b2:	0109      	lsls	r1, r1, #4
 800d2b4:	5858      	ldr	r0, [r3, r1]
 800d2b6:	4770      	bx	lr
 800d2b8:	20001e68 	andcs	r1, r0, r8, ror #28

0800d2bc <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800d2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2be:	4614      	mov	r4, r2
 800d2c0:	461d      	mov	r5, r3
 800d2c2:	4e1f      	ldr	r6, [pc, #124]	; (800d340 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800d2c4:	2106      	movs	r1, #6
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	f006 fe9e 	bl	8014008 <usart_flag_get>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d0f9      	beq.n	800d2c4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 800d2d0:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800d2d4:	4e1b      	ldr	r6, [pc, #108]	; (800d344 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 800d2d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2da:	2203      	movs	r2, #3
 800d2dc:	4630      	mov	r0, r6
 800d2de:	2110      	movs	r1, #16
 800d2e0:	f006 fb02 	bl	80138e8 <gpio_init>
 800d2e4:	6177      	str	r7, [r6, #20]
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	20b0      	movs	r0, #176	; 0xb0
 800d2ea:	f007 fa11 	bl	8014710 <udelay(unsigned int, unsigned int)>
 800d2ee:	463b      	mov	r3, r7
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	2203      	movs	r2, #3
 800d2f4:	2118      	movs	r1, #24
 800d2f6:	f006 faf7 	bl	80138e8 <gpio_init>
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	200c      	movs	r0, #12
 800d2fe:	f007 fa07 	bl	8014710 <udelay(unsigned int, unsigned int)>
 800d302:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 800d306:	4f0e      	ldr	r7, [pc, #56]	; (800d340 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800d308:	4425      	add	r5, r4
 800d30a:	42ac      	cmp	r4, r5
 800d30c:	d10b      	bne.n	800d326 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800d30e:	f04f 2440 	mov.w	r4, #1073758208	; 0x40004000
 800d312:	4d0b      	ldr	r5, [pc, #44]	; (800d340 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800d314:	2106      	movs	r1, #6
 800d316:	4628      	mov	r0, r5
 800d318:	f006 fe76 	bl	8014008 <usart_flag_get>
 800d31c:	2801      	cmp	r0, #1
 800d31e:	d00d      	beq.n	800d33c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x80>
 800d320:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800d324:	e7f6      	b.n	800d314 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x58>
 800d326:	2107      	movs	r1, #7
 800d328:	4638      	mov	r0, r7
 800d32a:	f006 fe6d 	bl	8014008 <usart_flag_get>
 800d32e:	2800      	cmp	r0, #0
 800d330:	d0f9      	beq.n	800d326 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800d332:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d336:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 800d33a:	e7e6      	b.n	800d30a <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x4e>
 800d33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d33e:	bf00      	nop
 800d340:	40004800 	andmi	r4, r0, r0, lsl #16
 800d344:	40011000 	andmi	r1, r1, r0

0800d348 <Dmx::RdmReceive(unsigned int)>:
 800d348:	f44f 7304 	mov.w	r3, #528	; 0x210
 800d34c:	4806      	ldr	r0, [pc, #24]	; (800d368 <Dmx::RdmReceive(unsigned int)+0x20>)
 800d34e:	fb03 0101 	mla	r1, r3, r1, r0
 800d352:	f8b1 3204 	ldrh.w	r3, [r1, #516]	; 0x204
 800d356:	f413 4080 	ands.w	r0, r3, #16384	; 0x4000
 800d35a:	bf1e      	ittt	ne
 800d35c:	2300      	movne	r3, #0
 800d35e:	4608      	movne	r0, r1
 800d360:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	20001a4c 	andcs	r1, r0, ip, asr #20

0800d36c <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>:
 800d36c:	2300      	movs	r3, #0
 800d36e:	b570      	push	{r4, r5, r6, lr}
 800d370:	4604      	mov	r4, r0
 800d372:	460d      	mov	r5, r1
 800d374:	4e05      	ldr	r6, [pc, #20]	; (800d38c <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x20>)
 800d376:	6273      	str	r3, [r6, #36]	; 0x24
 800d378:	4629      	mov	r1, r5
 800d37a:	4620      	mov	r0, r4
 800d37c:	f7ff ffe4 	bl	800d348 <Dmx::RdmReceive(unsigned int)>
 800d380:	b910      	cbnz	r0, 800d388 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x1c>
 800d382:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d384:	4293      	cmp	r3, r2
 800d386:	d3f7      	bcc.n	800d378 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0xc>
 800d388:	bd70      	pop	{r4, r5, r6, pc}
 800d38a:	bf00      	nop
 800d38c:	40001000 	andmi	r1, r0, r0

0800d390 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	4604      	mov	r4, r0
 800d394:	b192      	cbz	r2, 800d3bc <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x2c>
 800d396:	256c      	movs	r5, #108	; 0x6c
 800d398:	4e19      	ldr	r6, [pc, #100]	; (800d400 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800d39a:	4b1a      	ldr	r3, [pc, #104]	; (800d404 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x74>)
 800d39c:	6870      	ldr	r0, [r6, #4]
 800d39e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d3a2:	fbb0 f0f5 	udiv	r0, r0, r5
 800d3a6:	1ac7      	subs	r7, r0, r3
 800d3a8:	42ba      	cmp	r2, r7
 800d3aa:	d907      	bls.n	800d3bc <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x2c>
 800d3ac:	1a1b      	subs	r3, r3, r0
 800d3ae:	4413      	add	r3, r2
 800d3b0:	6872      	ldr	r2, [r6, #4]
 800d3b2:	fbb2 f2f5 	udiv	r2, r2, r5
 800d3b6:	1a12      	subs	r2, r2, r0
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d3f9      	bcc.n	800d3b0 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x20>
 800d3bc:	4d12      	ldr	r5, [pc, #72]	; (800d408 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x78>)
 800d3be:	460a      	mov	r2, r1
 800d3c0:	5d2b      	ldrb	r3, [r5, r4]
 800d3c2:	7888      	ldrb	r0, [r1, #2]
 800d3c4:	73cb      	strb	r3, [r1, #15]
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	1847      	adds	r7, r0, r1
 800d3ca:	42ba      	cmp	r2, r7
 800d3cc:	d004      	beq.n	800d3d8 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x48>
 800d3ce:	f812 6b01 	ldrb.w	r6, [r2], #1
 800d3d2:	4433      	add	r3, r6
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	e7f8      	b.n	800d3ca <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x3a>
 800d3d8:	0a1e      	lsrs	r6, r3, #8
 800d3da:	540e      	strb	r6, [r1, r0]
 800d3dc:	7053      	strb	r3, [r2, #1]
 800d3de:	788a      	ldrb	r2, [r1, #2]
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	3202      	adds	r2, #2
 800d3e4:	f7ff fb1e 	bl	800ca24 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800d3e8:	226c      	movs	r2, #108	; 0x6c
 800d3ea:	4b05      	ldr	r3, [pc, #20]	; (800d400 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3f2:	4a04      	ldr	r2, [pc, #16]	; (800d404 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x74>)
 800d3f4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d3f8:	5d2b      	ldrb	r3, [r5, r4]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	552b      	strb	r3, [r5, r4]
 800d3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d400:	e0001000 	and	r1, r0, r0
 800d404:	20001e80 	andcs	r1, r0, r0, lsl #29
 800d408:	20001e84 	andcs	r1, r0, r4, lsl #29

0800d40c <RemoteConfig::HandleList()>:
 800d40c:	2212      	movs	r2, #18
 800d40e:	6803      	ldr	r3, [r0, #0]
 800d410:	4931      	ldr	r1, [pc, #196]	; (800d4d8 <RemoteConfig::HandleList()+0xcc>)
 800d412:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d416:	fb02 1103 	mla	r1, r2, r3, r1
 800d41a:	220c      	movs	r2, #12
 800d41c:	4604      	mov	r4, r0
 800d41e:	6843      	ldr	r3, [r0, #4]
 800d420:	482e      	ldr	r0, [pc, #184]	; (800d4dc <RemoteConfig::HandleList()+0xd0>)
 800d422:	4e2f      	ldr	r6, [pc, #188]	; (800d4e0 <RemoteConfig::HandleList()+0xd4>)
 800d424:	fb02 0003 	mla	r0, r2, r3, r0
 800d428:	4b2e      	ldr	r3, [pc, #184]	; (800d4e4 <RemoteConfig::HandleList()+0xd8>)
 800d42a:	4f2f      	ldr	r7, [pc, #188]	; (800d4e8 <RemoteConfig::HandleList()+0xdc>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	6835      	ldr	r5, [r6, #0]
 800d430:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800d434:	f897 9009 	ldrb.w	r9, [r7, #9]
 800d438:	fa5f f38c 	uxtb.w	r3, ip
 800d43c:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 800d440:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800d444:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800d448:	b089      	sub	sp, #36	; 0x24
 800d44a:	3507      	adds	r5, #7
 800d44c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800d450:	f1b9 0f00 	cmp.w	r9, #0
 800d454:	d023      	beq.n	800d49e <RemoteConfig::HandleList()+0x92>
 800d456:	b2d2      	uxtb	r2, r2
 800d458:	3709      	adds	r7, #9
 800d45a:	9201      	str	r2, [sp, #4]
 800d45c:	fa5f f28c 	uxtb.w	r2, ip
 800d460:	e9cd 1003 	strd	r1, r0, [sp, #12]
 800d464:	9200      	str	r2, [sp, #0]
 800d466:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800d46a:	4628      	mov	r0, r5
 800d46c:	e9cd 8705 	strd	r8, r7, [sp, #20]
 800d470:	4a1e      	ldr	r2, [pc, #120]	; (800d4ec <RemoteConfig::HandleList()+0xe0>)
 800d472:	f8cd e008 	str.w	lr, [sp, #8]
 800d476:	f005 ff05 	bl	8013284 <snprintf>
 800d47a:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800d47e:	2b05      	cmp	r3, #5
 800d480:	d11d      	bne.n	800d4be <RemoteConfig::HandleList()+0xb2>
 800d482:	f642 1305 	movw	r3, #10501	; 0x2905
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d48c:	b282      	uxth	r2, r0
 800d48e:	4629      	mov	r1, r5
 800d490:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d494:	f002 fb24 	bl	800fae0 <udp_send>
 800d498:	b009      	add	sp, #36	; 0x24
 800d49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d49e:	b2d2      	uxtb	r2, r2
 800d4a0:	9201      	str	r2, [sp, #4]
 800d4a2:	fa5f f28c 	uxtb.w	r2, ip
 800d4a6:	e9cd 0804 	strd	r0, r8, [sp, #16]
 800d4aa:	e9cd e102 	strd	lr, r1, [sp, #8]
 800d4ae:	9200      	str	r2, [sp, #0]
 800d4b0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	4a0e      	ldr	r2, [pc, #56]	; (800d4f0 <RemoteConfig::HandleList()+0xe4>)
 800d4b8:	f005 fee4 	bl	8013284 <snprintf>
 800d4bc:	e7dd      	b.n	800d47a <RemoteConfig::HandleList()+0x6e>
 800d4be:	2b06      	cmp	r3, #6
 800d4c0:	d1ea      	bne.n	800d498 <RemoteConfig::HandleList()+0x8c>
 800d4c2:	6833      	ldr	r3, [r6, #0]
 800d4c4:	799b      	ldrb	r3, [r3, #6]
 800d4c6:	2b2a      	cmp	r3, #42	; 0x2a
 800d4c8:	d1e6      	bne.n	800d498 <RemoteConfig::HandleList()+0x8c>
 800d4ca:	f642 1305 	movw	r3, #10501	; 0x2905
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4d4:	e7da      	b.n	800d48c <RemoteConfig::HandleList()+0x80>
 800d4d6:	bf00      	nop
 800d4d8:	08015ac6 	stmdaeq	r1, {r1, r2, r6, r7, r9, fp, ip, lr}
 800d4dc:	08015b68 	stmdaeq	r1, {r3, r5, r6, r8, r9, fp, ip, lr}
 800d4e0:	20001e88 	andcs	r1, r0, r8, lsl #29
 800d4e4:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800d4e8:	20001e8c 	andcs	r1, r0, ip, lsl #29
 800d4ec:	08015a00 	stmdaeq	r1, {r9, fp, ip, lr}
 800d4f0:	08015a19 	stmdaeq	r1, {r0, r3, r4, r9, fp, ip, lr}

0800d4f4 <RemoteConfig::HandleDisplayGet()>:
 800d4f4:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800d4f8:	2b08      	cmp	r3, #8
 800d4fa:	d11d      	bne.n	800d538 <RemoteConfig::HandleDisplayGet()+0x44>
 800d4fc:	4b0f      	ldr	r3, [pc, #60]	; (800d53c <RemoteConfig::HandleDisplayGet()+0x48>)
 800d4fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	4d0f      	ldr	r5, [pc, #60]	; (800d540 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800d504:	7c19      	ldrb	r1, [r3, #16]
 800d506:	4a0f      	ldr	r2, [pc, #60]	; (800d544 <RemoteConfig::HandleDisplayGet()+0x50>)
 800d508:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <RemoteConfig::HandleDisplayGet()+0x54>)
 800d50a:	4604      	mov	r4, r0
 800d50c:	2900      	cmp	r1, #0
 800d50e:	bf18      	it	ne
 800d510:	4613      	movne	r3, r2
 800d512:	6828      	ldr	r0, [r5, #0]
 800d514:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800d518:	4a0c      	ldr	r2, [pc, #48]	; (800d54c <RemoteConfig::HandleDisplayGet()+0x58>)
 800d51a:	f005 feb3 	bl	8013284 <snprintf>
 800d51e:	f642 1305 	movw	r3, #10501	; 0x2905
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	b282      	uxth	r2, r0
 800d526:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d52a:	6829      	ldr	r1, [r5, #0]
 800d52c:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d530:	f002 fad6 	bl	800fae0 <udp_send>
 800d534:	b003      	add	sp, #12
 800d536:	bd30      	pop	{r4, r5, pc}
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop
 800d53c:	2000ae04 	andcs	sl, r0, r4, lsl #28
 800d540:	20001e88 	andcs	r1, r0, r8, lsl #29
 800d544:	08015a32 	stmdaeq	r1, {r1, r4, r5, r9, fp, ip, lr}
 800d548:	08015a2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, fp, ip, lr}
 800d54c:	08015a36 	stmdaeq	r1, {r1, r2, r4, r5, r9, fp, ip, lr}

0800d550 <RemoteConfig::HandleTftpSet()>:
 800d550:	f8d0 25e4 	ldr.w	r2, [r0, #1508]	; 0x5e4
 800d554:	2a06      	cmp	r2, #6
 800d556:	d109      	bne.n	800d56c <RemoteConfig::HandleTftpSet()+0x1c>
 800d558:	4a05      	ldr	r2, [pc, #20]	; (800d570 <RemoteConfig::HandleTftpSet()+0x20>)
 800d55a:	6812      	ldr	r2, [r2, #0]
 800d55c:	7992      	ldrb	r2, [r2, #6]
 800d55e:	3a30      	subs	r2, #48	; 0x30
 800d560:	bf18      	it	ne
 800d562:	2201      	movne	r2, #1
 800d564:	f880 25ec 	strb.w	r2, [r0, #1516]	; 0x5ec
 800d568:	f000 bd72 	b.w	800e050 <RemoteConfig::PlatformHandleTftpSet()>
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	20001e88 	andcs	r1, r0, r8, lsl #29

0800d574 <RemoteConfig::HandleTftpGet()>:
 800d574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d576:	4604      	mov	r4, r0
 800d578:	f000 fd72 	bl	800e060 <RemoteConfig::PlatformHandleTftpGet()>
 800d57c:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800d580:	2b05      	cmp	r3, #5
 800d582:	d118      	bne.n	800d5b6 <RemoteConfig::HandleTftpGet()+0x42>
 800d584:	f894 15ec 	ldrb.w	r1, [r4, #1516]	; 0x5ec
 800d588:	4d0c      	ldr	r5, [pc, #48]	; (800d5bc <RemoteConfig::HandleTftpGet()+0x48>)
 800d58a:	4a0d      	ldr	r2, [pc, #52]	; (800d5c0 <RemoteConfig::HandleTftpGet()+0x4c>)
 800d58c:	4b0d      	ldr	r3, [pc, #52]	; (800d5c4 <RemoteConfig::HandleTftpGet()+0x50>)
 800d58e:	6828      	ldr	r0, [r5, #0]
 800d590:	2900      	cmp	r1, #0
 800d592:	bf08      	it	eq
 800d594:	4613      	moveq	r3, r2
 800d596:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800d59a:	4a0b      	ldr	r2, [pc, #44]	; (800d5c8 <RemoteConfig::HandleTftpGet()+0x54>)
 800d59c:	f005 fe72 	bl	8013284 <snprintf>
 800d5a0:	f642 1305 	movw	r3, #10501	; 0x2905
 800d5a4:	b282      	uxth	r2, r0
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	6829      	ldr	r1, [r5, #0]
 800d5aa:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d5ae:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d5b2:	f002 fa95 	bl	800fae0 <udp_send>
 800d5b6:	b003      	add	sp, #12
 800d5b8:	bd30      	pop	{r4, r5, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20001e88 	andcs	r1, r0, r8, lsl #29
 800d5c0:	08015a32 	stmdaeq	r1, {r1, r4, r5, r9, fp, ip, lr}
 800d5c4:	08015a2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, fp, ip, lr}
 800d5c8:	08015a42 	stmdaeq	r1, {r1, r6, r9, fp, ip, lr}

0800d5cc <RemoteConfig::HandleVersion()>:
 800d5cc:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800d5d0:	2b08      	cmp	r3, #8
 800d5d2:	d116      	bne.n	800d602 <RemoteConfig::HandleVersion()+0x36>
 800d5d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5d6:	4d0b      	ldr	r5, [pc, #44]	; (800d604 <RemoteConfig::HandleVersion()+0x38>)
 800d5d8:	4604      	mov	r4, r0
 800d5da:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800d5de:	4b0a      	ldr	r3, [pc, #40]	; (800d608 <RemoteConfig::HandleVersion()+0x3c>)
 800d5e0:	4a0a      	ldr	r2, [pc, #40]	; (800d60c <RemoteConfig::HandleVersion()+0x40>)
 800d5e2:	6828      	ldr	r0, [r5, #0]
 800d5e4:	f005 fe4e 	bl	8013284 <snprintf>
 800d5e8:	f642 1305 	movw	r3, #10501	; 0x2905
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	b282      	uxth	r2, r0
 800d5f0:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d5f4:	6829      	ldr	r1, [r5, #0]
 800d5f6:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d5fa:	f002 fa71 	bl	800fae0 <udp_send>
 800d5fe:	b003      	add	sp, #12
 800d600:	bd30      	pop	{r4, r5, pc}
 800d602:	4770      	bx	lr
 800d604:	20001e88 	andcs	r1, r0, r8, lsl #29
 800d608:	2000aeaa 	andcs	sl, r0, sl, lsr #29
 800d60c:	08015a4b 	stmdaeq	r1, {r0, r1, r3, r6, r9, fp, ip, lr}

0800d610 <RemoteConfig::HandleUptime()>:
 800d610:	f890 35d7 	ldrb.w	r3, [r0, #1495]	; 0x5d7
 800d614:	b1fb      	cbz	r3, 800d656 <RemoteConfig::HandleUptime()+0x46>
 800d616:	4b10      	ldr	r3, [pc, #64]	; (800d658 <RemoteConfig::HandleUptime()+0x48>)
 800d618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800d620:	4604      	mov	r4, r0
 800d622:	2b07      	cmp	r3, #7
 800d624:	d115      	bne.n	800d652 <RemoteConfig::HandleUptime()+0x42>
 800d626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d62a:	4d0c      	ldr	r5, [pc, #48]	; (800d65c <RemoteConfig::HandleUptime()+0x4c>)
 800d62c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d630:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800d634:	4a0a      	ldr	r2, [pc, #40]	; (800d660 <RemoteConfig::HandleUptime()+0x50>)
 800d636:	6828      	ldr	r0, [r5, #0]
 800d638:	f005 fe24 	bl	8013284 <snprintf>
 800d63c:	f642 1305 	movw	r3, #10501	; 0x2905
 800d640:	9300      	str	r3, [sp, #0]
 800d642:	b282      	uxth	r2, r0
 800d644:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d648:	6829      	ldr	r1, [r5, #0]
 800d64a:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d64e:	f002 fa47 	bl	800fae0 <udp_send>
 800d652:	b003      	add	sp, #12
 800d654:	bd30      	pop	{r4, r5, pc}
 800d656:	4770      	bx	lr
 800d658:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800d65c:	20001e88 	andcs	r1, r0, r8, lsl #29
 800d660:	08015a56 	stmdaeq	r1, {r1, r2, r4, r6, r9, fp, ip, lr}

0800d664 <RemoteConfig::HandleDisplaySet()>:
 800d664:	b538      	push	{r3, r4, r5, lr}
 800d666:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800d66a:	2b09      	cmp	r3, #9
 800d66c:	d113      	bne.n	800d696 <RemoteConfig::HandleDisplaySet()+0x32>
 800d66e:	4b0a      	ldr	r3, [pc, #40]	; (800d698 <RemoteConfig::HandleDisplaySet()+0x34>)
 800d670:	681c      	ldr	r4, [r3, #0]
 800d672:	4b0a      	ldr	r3, [pc, #40]	; (800d69c <RemoteConfig::HandleDisplaySet()+0x38>)
 800d674:	69a0      	ldr	r0, [r4, #24]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	7a5d      	ldrb	r5, [r3, #9]
 800d67a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d67e:	4259      	negs	r1, r3
 800d680:	4159      	adcs	r1, r3
 800d682:	b140      	cbz	r0, 800d696 <RemoteConfig::HandleDisplaySet()+0x32>
 800d684:	6803      	ldr	r3, [r0, #0]
 800d686:	7421      	strb	r1, [r4, #16]
 800d688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d68a:	4798      	blx	r3
 800d68c:	2d30      	cmp	r5, #48	; 0x30
 800d68e:	bf1e      	ittt	ne
 800d690:	4b03      	ldrne	r3, [pc, #12]	; (800d6a0 <RemoteConfig::HandleDisplaySet()+0x3c>)
 800d692:	681b      	ldrne	r3, [r3, #0]
 800d694:	6063      	strne	r3, [r4, #4]
 800d696:	bd38      	pop	{r3, r4, r5, pc}
 800d698:	2000ae04 	andcs	sl, r0, r4, lsl #28
 800d69c:	20001e88 	andcs	r1, r0, r8, lsl #29
 800d6a0:	2000af0c 	andcs	sl, r0, ip, lsl #30

0800d6a4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800d6a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a8:	f100 0a0c 	add.w	sl, r0, #12
 800d6ac:	4604      	mov	r4, r0
 800d6ae:	e9c0 1200 	strd	r1, r2, [r0]
 800d6b2:	6083      	str	r3, [r0, #8]
 800d6b4:	4650      	mov	r0, sl
 800d6b6:	4690      	mov	r8, r2
 800d6b8:	4689      	mov	r9, r1
 800d6ba:	461f      	mov	r7, r3
 800d6bc:	f000 fd10 	bl	800e0e0 <HttpDaemon::HttpDaemon()>
 800d6c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6c4:	2500      	movs	r5, #0
 800d6c6:	4e16      	ldr	r6, [pc, #88]	; (800d720 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x7c>)
 800d6c8:	f8df b058 	ldr.w	fp, [pc, #88]	; 800d724 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x80>
 800d6cc:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800d6d0:	4b15      	ldr	r3, [pc, #84]	; (800d728 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x84>)
 800d6d2:	4631      	mov	r1, r6
 800d6d4:	f8db 0000 	ldr.w	r0, [fp]
 800d6d8:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 800d6dc:	f8a4 55d8 	strh.w	r5, [r4, #1496]	; 0x5d8
 800d6e0:	f8c4 55e0 	str.w	r5, [r4, #1504]	; 0x5e0
 800d6e4:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
 800d6e8:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
 800d6ec:	f884 55ec 	strb.w	r5, [r4, #1516]	; 0x5ec
 800d6f0:	601c      	str	r4, [r3, #0]
 800d6f2:	f002 fec9 	bl	8010488 <Network::MacAddressCopyTo(unsigned char*)>
 800d6f6:	f642 1105 	movw	r1, #10501	; 0x2905
 800d6fa:	f8db 0000 	ldr.w	r0, [fp]
 800d6fe:	f886 9006 	strb.w	r9, [r6, #6]
 800d702:	f886 8007 	strb.w	r8, [r6, #7]
 800d706:	7237      	strb	r7, [r6, #8]
 800d708:	7275      	strb	r5, [r6, #9]
 800d70a:	f002 feb7 	bl	801047c <Network::Begin(unsigned short)>
 800d70e:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800d712:	4650      	mov	r0, sl
 800d714:	f000 fcfc 	bl	800e110 <HttpDaemon::Start()>
 800d718:	4620      	mov	r0, r4
 800d71a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d71e:	bf00      	nop
 800d720:	20001e8c 	andcs	r1, r0, ip, lsl #29
 800d724:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800d728:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0

0800d72c <RemoteConfig::GetStringNode() const>:
 800d72c:	2012      	movs	r0, #18
 800d72e:	4b03      	ldr	r3, [pc, #12]	; (800d73c <RemoteConfig::GetStringNode() const+0x10>)
 800d730:	799a      	ldrb	r2, [r3, #6]
 800d732:	4b03      	ldr	r3, [pc, #12]	; (800d740 <RemoteConfig::GetStringNode() const+0x14>)
 800d734:	fb00 3002 	mla	r0, r0, r2, r3
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	20001e8c 	andcs	r1, r0, ip, lsl #29
 800d740:	08015ac6 	stmdaeq	r1, {r1, r2, r6, r7, r9, fp, ip, lr}

0800d744 <RemoteConfig::GetStringOutput() const>:
 800d744:	200c      	movs	r0, #12
 800d746:	4b03      	ldr	r3, [pc, #12]	; (800d754 <RemoteConfig::GetStringOutput() const+0x10>)
 800d748:	79da      	ldrb	r2, [r3, #7]
 800d74a:	4b03      	ldr	r3, [pc, #12]	; (800d758 <RemoteConfig::GetStringOutput() const+0x14>)
 800d74c:	fb00 3002 	mla	r0, r0, r2, r3
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	20001e8c 	andcs	r1, r0, ip, lsl #29
 800d758:	08015b68 	stmdaeq	r1, {r3, r5, r6, r8, r9, fp, ip, lr}

0800d75c <RemoteConfig::SetDisable(bool)>:
 800d75c:	b538      	push	{r3, r4, r5, lr}
 800d75e:	4604      	mov	r4, r0
 800d760:	f890 35d4 	ldrb.w	r3, [r0, #1492]	; 0x5d4
 800d764:	b171      	cbz	r1, 800d784 <RemoteConfig::SetDisable(bool)+0x28>
 800d766:	b963      	cbnz	r3, 800d782 <RemoteConfig::SetDisable(bool)+0x26>
 800d768:	4b0d      	ldr	r3, [pc, #52]	; (800d7a0 <RemoteConfig::SetDisable(bool)+0x44>)
 800d76a:	f642 1105 	movw	r1, #10501	; 0x2905
 800d76e:	6818      	ldr	r0, [r3, #0]
 800d770:	f002 fe87 	bl	8010482 <Network::End(unsigned short)>
 800d774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d778:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800d77c:	2301      	movs	r3, #1
 800d77e:	f884 35d4 	strb.w	r3, [r4, #1492]	; 0x5d4
 800d782:	bd38      	pop	{r3, r4, r5, pc}
 800d784:	2b00      	cmp	r3, #0
 800d786:	d0fc      	beq.n	800d782 <RemoteConfig::SetDisable(bool)+0x26>
 800d788:	4b05      	ldr	r3, [pc, #20]	; (800d7a0 <RemoteConfig::SetDisable(bool)+0x44>)
 800d78a:	460d      	mov	r5, r1
 800d78c:	6818      	ldr	r0, [r3, #0]
 800d78e:	f642 1105 	movw	r1, #10501	; 0x2905
 800d792:	f002 fe73 	bl	801047c <Network::Begin(unsigned short)>
 800d796:	f884 55d4 	strb.w	r5, [r4, #1492]	; 0x5d4
 800d79a:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800d79e:	e7f0      	b.n	800d782 <RemoteConfig::SetDisable(bool)+0x26>
 800d7a0:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800d7a4 <RemoteConfig::SetDisplayName(char const*)>:
 800d7a4:	2217      	movs	r2, #23
 800d7a6:	4809      	ldr	r0, [pc, #36]	; (800d7cc <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800d7a8:	b508      	push	{r3, lr}
 800d7aa:	1e4b      	subs	r3, r1, #1
 800d7ac:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d7b0:	b931      	cbnz	r1, 800d7c0 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800d7b2:	f005 fb1d 	bl	8012df0 <memset>
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	4b05      	ldr	r3, [pc, #20]	; (800d7d0 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800d7ba:	f883 2020 	strb.w	r2, [r3, #32]
 800d7be:	bd08      	pop	{r3, pc}
 800d7c0:	3a01      	subs	r2, #1
 800d7c2:	f800 1b01 	strb.w	r1, [r0], #1
 800d7c6:	d1f1      	bne.n	800d7ac <RemoteConfig::SetDisplayName(char const*)+0x8>
 800d7c8:	e7f5      	b.n	800d7b6 <RemoteConfig::SetDisplayName(char const*)+0x12>
 800d7ca:	bf00      	nop
 800d7cc:	20001e95 	mulcs	r0, r5, lr
 800d7d0:	20001e8c 	andcs	r1, r0, ip, lsl #29

0800d7d4 <RemoteConfig::HandleGet(void*, unsigned int)>:
 800d7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	4616      	mov	r6, r2
 800d7da:	460d      	mov	r5, r1
 800d7dc:	4f29      	ldr	r7, [pc, #164]	; (800d884 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800d7de:	b085      	sub	sp, #20
 800d7e0:	b9b9      	cbnz	r1, 800d812 <RemoteConfig::HandleGet(void*, unsigned int)+0x3e>
 800d7e2:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	aa03      	add	r2, sp, #12
 800d7ea:	3105      	adds	r1, #5
 800d7ec:	9303      	str	r3, [sp, #12]
 800d7ee:	f000 fc05 	bl	800dffc <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d7f2:	1e03      	subs	r3, r0, #0
 800d7f4:	da1d      	bge.n	800d832 <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800d7f6:	f642 1305 	movw	r3, #10501	; 0x2905
 800d7fa:	220b      	movs	r2, #11
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	4922      	ldr	r1, [pc, #136]	; (800d888 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800d800:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d804:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d808:	f002 f96a 	bl	800fae0 <udp_send>
 800d80c:	200c      	movs	r0, #12
 800d80e:	b005      	add	sp, #20
 800d810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d812:	9203      	str	r2, [sp, #12]
 800d814:	aa03      	add	r2, sp, #12
 800d816:	6039      	str	r1, [r7, #0]
 800d818:	f000 fbf0 	bl	800dffc <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d81c:	1e03      	subs	r3, r0, #0
 800d81e:	da08      	bge.n	800d832 <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800d820:	2e0b      	cmp	r6, #11
 800d822:	4632      	mov	r2, r6
 800d824:	4628      	mov	r0, r5
 800d826:	bf28      	it	cs
 800d828:	220b      	movcs	r2, #11
 800d82a:	4917      	ldr	r1, [pc, #92]	; (800d888 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800d82c:	f005 fabe 	bl	8012dac <memcpy>
 800d830:	e7ec      	b.n	800d80c <RemoteConfig::HandleGet(void*, unsigned int)+0x38>
 800d832:	201c      	movs	r0, #28
 800d834:	4343      	muls	r3, r0
 800d836:	4915      	ldr	r1, [pc, #84]	; (800d88c <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800d838:	18ca      	adds	r2, r1, r3
 800d83a:	6852      	ldr	r2, [r2, #4]
 800d83c:	58cb      	ldr	r3, [r1, r3]
 800d83e:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800d842:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d846:	07d2      	lsls	r2, r2, #31
 800d848:	bf48      	it	mi
 800d84a:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800d84e:	a903      	add	r1, sp, #12
 800d850:	bf48      	it	mi
 800d852:	58d3      	ldrmi	r3, [r2, r3]
 800d854:	4798      	blx	r3
 800d856:	9a03      	ldr	r2, [sp, #12]
 800d858:	b965      	cbnz	r5, 800d874 <RemoteConfig::HandleGet(void*, unsigned int)+0xa0>
 800d85a:	f642 1305 	movw	r3, #10501	; 0x2905
 800d85e:	6839      	ldr	r1, [r7, #0]
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d866:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d86a:	b292      	uxth	r2, r2
 800d86c:	f002 f938 	bl	800fae0 <udp_send>
 800d870:	9803      	ldr	r0, [sp, #12]
 800d872:	e7cc      	b.n	800d80e <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800d874:	42b2      	cmp	r2, r6
 800d876:	bf28      	it	cs
 800d878:	4632      	movcs	r2, r6
 800d87a:	4628      	mov	r0, r5
 800d87c:	6839      	ldr	r1, [r7, #0]
 800d87e:	f005 faa0 	bl	8012dc2 <memmove>
 800d882:	e7f5      	b.n	800d870 <RemoteConfig::HandleGet(void*, unsigned int)+0x9c>
 800d884:	20001e88 	andcs	r1, r0, r8, lsl #29
 800d888:	08015a63 	stmdaeq	r1, {r0, r1, r5, r6, r9, fp, ip, lr}
 800d88c:	08015d00 	stmdaeq	r1, {r8, sl, fp, ip, lr}

0800d890 <RemoteConfig::HandleGetNoParams()>:
 800d890:	2200      	movs	r2, #0
 800d892:	4611      	mov	r1, r2
 800d894:	f7ff bf9e 	b.w	800d7d4 <RemoteConfig::HandleGet(void*, unsigned int)>

0800d898 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800d898:	b510      	push	{r4, lr}
 800d89a:	460c      	mov	r4, r1
 800d89c:	4b07      	ldr	r3, [pc, #28]	; (800d8bc <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800d89e:	b08a      	sub	sp, #40	; 0x28
 800d8a0:	6819      	ldr	r1, [r3, #0]
 800d8a2:	a801      	add	r0, sp, #4
 800d8a4:	f000 fa00 	bl	800dca8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800d8a8:	4905      	ldr	r1, [pc, #20]	; (800d8c0 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800d8aa:	4623      	mov	r3, r4
 800d8ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d8b0:	6809      	ldr	r1, [r1, #0]
 800d8b2:	a801      	add	r0, sp, #4
 800d8b4:	f000 fb1c 	bl	800def0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800d8b8:	b00a      	add	sp, #40	; 0x28
 800d8ba:	bd10      	pop	{r4, pc}
 800d8bc:	20002ee4 	andcs	r2, r0, r4, ror #29
 800d8c0:	20001e88 	andcs	r1, r0, r8, lsl #29

0800d8c4 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800d8c4:	b513      	push	{r0, r1, r4, lr}
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	4b07      	ldr	r3, [pc, #28]	; (800d8e8 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800d8ca:	a801      	add	r0, sp, #4
 800d8cc:	6819      	ldr	r1, [r3, #0]
 800d8ce:	f003 f85b 	bl	8010988 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800d8d2:	4906      	ldr	r1, [pc, #24]	; (800d8ec <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800d8d4:	4623      	mov	r3, r4
 800d8d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d8da:	6809      	ldr	r1, [r1, #0]
 800d8dc:	a801      	add	r0, sp, #4
 800d8de:	f003 fa3f 	bl	8010d60 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800d8e2:	b002      	add	sp, #8
 800d8e4:	bd10      	pop	{r4, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20002edc 	ldrdcs	r2, [r0], -ip
 800d8ec:	20001e88 	andcs	r1, r0, r8, lsl #29

0800d8f0 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800d8f0:	b510      	push	{r4, lr}
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	4b07      	ldr	r3, [pc, #28]	; (800d914 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 800d8f6:	b0a4      	sub	sp, #144	; 0x90
 800d8f8:	6819      	ldr	r1, [r3, #0]
 800d8fa:	a801      	add	r0, sp, #4
 800d8fc:	f7fc fdcc 	bl	800a498 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800d900:	4905      	ldr	r1, [pc, #20]	; (800d918 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800d902:	4623      	mov	r3, r4
 800d904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d908:	6809      	ldr	r1, [r1, #0]
 800d90a:	a801      	add	r0, sp, #4
 800d90c:	f7fd f992 	bl	800ac34 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800d910:	b024      	add	sp, #144	; 0x90
 800d912:	bd10      	pop	{r4, pc}
 800d914:	20002ed0 	ldrdcs	r2, [r0], -r0
 800d918:	20001e88 	andcs	r1, r0, r8, lsl #29

0800d91c <RemoteConfig::HandleGetParamsTxt(unsigned int&)>:
 800d91c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d91e:	460c      	mov	r4, r1
 800d920:	4b07      	ldr	r3, [pc, #28]	; (800d940 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x24>)
 800d922:	4668      	mov	r0, sp
 800d924:	6819      	ldr	r1, [r3, #0]
 800d926:	f7fe ff13 	bl	800c750 <DmxParams::DmxParams(DmxParamsStore*)>
 800d92a:	4906      	ldr	r1, [pc, #24]	; (800d944 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x28>)
 800d92c:	4623      	mov	r3, r4
 800d92e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d932:	4668      	mov	r0, sp
 800d934:	6809      	ldr	r1, [r1, #0]
 800d936:	f7ff f82b 	bl	800c990 <DmxParams::Save(char*, unsigned int, unsigned int&)>
 800d93a:	b004      	add	sp, #16
 800d93c:	bd10      	pop	{r4, pc}
 800d93e:	bf00      	nop
 800d940:	20002ed8 	ldrdcs	r2, [r0], -r8
 800d944:	20001e88 	andcs	r1, r0, r8, lsl #29

0800d948 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800d948:	b510      	push	{r4, lr}
 800d94a:	460c      	mov	r4, r1
 800d94c:	4b07      	ldr	r3, [pc, #28]	; (800d96c <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800d94e:	b08a      	sub	sp, #40	; 0x28
 800d950:	6819      	ldr	r1, [r3, #0]
 800d952:	4668      	mov	r0, sp
 800d954:	f003 ffec 	bl	8011930 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800d958:	4905      	ldr	r1, [pc, #20]	; (800d970 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800d95a:	4623      	mov	r3, r4
 800d95c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d960:	4668      	mov	r0, sp
 800d962:	6809      	ldr	r1, [r1, #0]
 800d964:	f004 f91a 	bl	8011b9c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800d968:	b00a      	add	sp, #40	; 0x28
 800d96a:	bd10      	pop	{r4, pc}
 800d96c:	20002ed4 	ldrdcs	r2, [r0], -r4
 800d970:	20001e88 	andcs	r1, r0, r8, lsl #29

0800d974 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800d974:	b530      	push	{r4, r5, lr}
 800d976:	b085      	sub	sp, #20
 800d978:	4604      	mov	r4, r0
 800d97a:	9201      	str	r2, [sp, #4]
 800d97c:	b9c9      	cbnz	r1, 800d9b2 <RemoteConfig::HandleSet(void*, unsigned int)+0x3e>
 800d97e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800d982:	9303      	str	r3, [sp, #12]
 800d984:	4b1d      	ldr	r3, [pc, #116]	; (800d9fc <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800d986:	aa03      	add	r2, sp, #12
 800d988:	6819      	ldr	r1, [r3, #0]
 800d98a:	3101      	adds	r1, #1
 800d98c:	f000 fb36 	bl	800dffc <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d990:	2800      	cmp	r0, #0
 800d992:	db24      	blt.n	800d9de <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800d994:	221c      	movs	r2, #28
 800d996:	4b1a      	ldr	r3, [pc, #104]	; (800da00 <RemoteConfig::HandleSet(void*, unsigned int)+0x8c>)
 800d998:	fb02 3300 	mla	r3, r2, r0, r3
 800d99c:	68da      	ldr	r2, [r3, #12]
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	1051      	asrs	r1, r2, #1
 800d9a2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d9a6:	07d2      	lsls	r2, r2, #31
 800d9a8:	bf44      	itt	mi
 800d9aa:	5862      	ldrmi	r2, [r4, r1]
 800d9ac:	58d3      	ldrmi	r3, [r2, r3]
 800d9ae:	4798      	blx	r3
 800d9b0:	e015      	b.n	800d9de <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800d9b2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d9b6:	460d      	mov	r5, r1
 800d9b8:	4611      	mov	r1, r2
 800d9ba:	d810      	bhi.n	800d9de <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800d9bc:	2200      	movs	r2, #0
 800d9be:	4b11      	ldr	r3, [pc, #68]	; (800da04 <RemoteConfig::HandleSet(void*, unsigned int)+0x90>)
 800d9c0:	f8c0 25e8 	str.w	r2, [r0, #1512]	; 0x5e8
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	07d8      	lsls	r0, r3, #31
 800d9c8:	d50b      	bpl.n	800d9e2 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800d9ca:	782b      	ldrb	r3, [r5, #0]
 800d9cc:	2b7b      	cmp	r3, #123	; 0x7b
 800d9ce:	d108      	bne.n	800d9e2 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800d9d0:	3901      	subs	r1, #1
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	b289      	uxth	r1, r1
 800d9d6:	f004 fa53 	bl	8011e80 <properties::convert_json_file(char*, unsigned short, bool)>
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	dc09      	bgt.n	800d9f2 <RemoteConfig::HandleSet(void*, unsigned int)+0x7e>
 800d9de:	b005      	add	sp, #20
 800d9e0:	bd30      	pop	{r4, r5, pc}
 800d9e2:	f8c4 15e4 	str.w	r1, [r4, #1508]	; 0x5e4
 800d9e6:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	601d      	str	r5, [r3, #0]
 800d9ec:	aa01      	add	r2, sp, #4
 800d9ee:	1c69      	adds	r1, r5, #1
 800d9f0:	e7cc      	b.n	800d98c <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800d9f2:	b280      	uxth	r0, r0
 800d9f4:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800d9f8:	e7f5      	b.n	800d9e6 <RemoteConfig::HandleSet(void*, unsigned int)+0x72>
 800d9fa:	bf00      	nop
 800d9fc:	20001e88 	andcs	r1, r0, r8, lsl #29
 800da00:	08015d00 	stmdaeq	r1, {r8, sl, fp, ip, lr}
 800da04:	2000ae00 	andcs	sl, r0, r0, lsl #28

0800da08 <RemoteConfig::Run()>:
 800da08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800da0c:	f890 35d4 	ldrb.w	r3, [r0, #1492]	; 0x5d4
 800da10:	2b00      	cmp	r3, #0
 800da12:	d15e      	bne.n	800dad2 <RemoteConfig::Run()+0xca>
 800da14:	4604      	mov	r4, r0
 800da16:	4d4b      	ldr	r5, [pc, #300]	; (800db44 <RemoteConfig::Run()+0x13c>)
 800da18:	300c      	adds	r0, #12
 800da1a:	f000 fdf3 	bl	800e604 <HttpDaemon::Run()>
 800da1e:	4629      	mov	r1, r5
 800da20:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800da24:	f10d 030e 	add.w	r3, sp, #14
 800da28:	f504 62bc 	add.w	r2, r4, #1504	; 0x5e0
 800da2c:	f002 f832 	bl	800fa94 <udp_recv2>
 800da30:	2803      	cmp	r0, #3
 800da32:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800da36:	d94c      	bls.n	800dad2 <RemoteConfig::Run()+0xca>
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	3801      	subs	r0, #1
 800da3c:	5c1a      	ldrb	r2, [r3, r0]
 800da3e:	2a0a      	cmp	r2, #10
 800da40:	bf08      	it	eq
 800da42:	f8c4 05e4 	streq.w	r0, [r4, #1508]	; 0x5e4
 800da46:	7819      	ldrb	r1, [r3, #0]
 800da48:	293f      	cmp	r1, #63	; 0x3f
 800da4a:	d137      	bne.n	800dabc <RemoteConfig::Run()+0xb4>
 800da4c:	493e      	ldr	r1, [pc, #248]	; (800db48 <RemoteConfig::Run()+0x140>)
 800da4e:	2200      	movs	r2, #0
 800da50:	460f      	mov	r7, r1
 800da52:	f8d4 05e4 	ldr.w	r0, [r4, #1508]	; 0x5e4
 800da56:	3801      	subs	r0, #1
 800da58:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800da5c:	7b8e      	ldrb	r6, [r1, #14]
 800da5e:	898d      	ldrh	r5, [r1, #12]
 800da60:	b176      	cbz	r6, 800da80 <RemoteConfig::Run()+0x78>
 800da62:	4285      	cmp	r5, r0
 800da64:	d30e      	bcc.n	800da84 <RemoteConfig::Run()+0x7c>
 800da66:	3201      	adds	r2, #1
 800da68:	2a09      	cmp	r2, #9
 800da6a:	f101 0110 	add.w	r1, r1, #16
 800da6e:	d1f5      	bne.n	800da5c <RemoteConfig::Run()+0x54>
 800da70:	f642 1305 	movw	r3, #10501	; 0x2905
 800da74:	9300      	str	r3, [sp, #0]
 800da76:	2208      	movs	r2, #8
 800da78:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800da7c:	4933      	ldr	r1, [pc, #204]	; (800db4c <RemoteConfig::Run()+0x144>)
 800da7e:	e054      	b.n	800db2a <RemoteConfig::Run()+0x122>
 800da80:	4285      	cmp	r5, r0
 800da82:	d1f0      	bne.n	800da66 <RemoteConfig::Run()+0x5e>
 800da84:	688e      	ldr	r6, [r1, #8]
 800da86:	f103 0c01 	add.w	ip, r3, #1
 800da8a:	4435      	add	r5, r6
 800da8c:	42b5      	cmp	r5, r6
 800da8e:	d006      	beq.n	800da9e <RemoteConfig::Run()+0x96>
 800da90:	f81c 8b01 	ldrb.w	r8, [ip], #1
 800da94:	f816 eb01 	ldrb.w	lr, [r6], #1
 800da98:	45f0      	cmp	r8, lr
 800da9a:	d0f7      	beq.n	800da8c <RemoteConfig::Run()+0x84>
 800da9c:	e7e3      	b.n	800da66 <RemoteConfig::Run()+0x5e>
 800da9e:	0113      	lsls	r3, r2, #4
 800daa0:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800daa4:	6852      	ldr	r2, [r2, #4]
 800daa6:	58fb      	ldr	r3, [r7, r3]
 800daa8:	1051      	asrs	r1, r2, #1
 800daaa:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800daae:	07d2      	lsls	r2, r2, #31
 800dab0:	d401      	bmi.n	800dab6 <RemoteConfig::Run()+0xae>
 800dab2:	4798      	blx	r3
 800dab4:	e00d      	b.n	800dad2 <RemoteConfig::Run()+0xca>
 800dab6:	5862      	ldr	r2, [r4, r1]
 800dab8:	58d3      	ldr	r3, [r2, r3]
 800daba:	e7fa      	b.n	800dab2 <RemoteConfig::Run()+0xaa>
 800dabc:	f894 25d5 	ldrb.w	r2, [r4, #1493]	; 0x5d5
 800dac0:	b93a      	cbnz	r2, 800dad2 <RemoteConfig::Run()+0xca>
 800dac2:	2923      	cmp	r1, #35	; 0x23
 800dac4:	d108      	bne.n	800dad8 <RemoteConfig::Run()+0xd0>
 800dac6:	4611      	mov	r1, r2
 800dac8:	4620      	mov	r0, r4
 800daca:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
 800dace:	f7ff ff51 	bl	800d974 <RemoteConfig::HandleSet(void*, unsigned int)>
 800dad2:	b004      	add	sp, #16
 800dad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad8:	2921      	cmp	r1, #33	; 0x21
 800dada:	d1fa      	bne.n	800dad2 <RemoteConfig::Run()+0xca>
 800dadc:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800dae0:	3a01      	subs	r2, #1
 800dae2:	2a05      	cmp	r2, #5
 800dae4:	f8c4 25e4 	str.w	r2, [r4, #1508]	; 0x5e4
 800dae8:	d918      	bls.n	800db1c <RemoteConfig::Run()+0x114>
 800daea:	1c59      	adds	r1, r3, #1
 800daec:	4608      	mov	r0, r1
 800daee:	4d18      	ldr	r5, [pc, #96]	; (800db50 <RemoteConfig::Run()+0x148>)
 800daf0:	f103 0c06 	add.w	ip, r3, #6
 800daf4:	4560      	cmp	r0, ip
 800daf6:	d01d      	beq.n	800db34 <RemoteConfig::Run()+0x12c>
 800daf8:	f810 7b01 	ldrb.w	r7, [r0], #1
 800dafc:	f815 6b01 	ldrb.w	r6, [r5], #1
 800db00:	42b7      	cmp	r7, r6
 800db02:	d0f7      	beq.n	800daf4 <RemoteConfig::Run()+0xec>
 800db04:	2a08      	cmp	r2, #8
 800db06:	d909      	bls.n	800db1c <RemoteConfig::Run()+0x114>
 800db08:	4a12      	ldr	r2, [pc, #72]	; (800db54 <RemoteConfig::Run()+0x14c>)
 800db0a:	3309      	adds	r3, #9
 800db0c:	428b      	cmp	r3, r1
 800db0e:	d017      	beq.n	800db40 <RemoteConfig::Run()+0x138>
 800db10:	f811 5b01 	ldrb.w	r5, [r1], #1
 800db14:	f812 0b01 	ldrb.w	r0, [r2], #1
 800db18:	4285      	cmp	r5, r0
 800db1a:	d0f7      	beq.n	800db0c <RemoteConfig::Run()+0x104>
 800db1c:	f642 1305 	movw	r3, #10501	; 0x2905
 800db20:	2208      	movs	r2, #8
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800db28:	490b      	ldr	r1, [pc, #44]	; (800db58 <RemoteConfig::Run()+0x150>)
 800db2a:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800db2e:	f001 ffd7 	bl	800fae0 <udp_send>
 800db32:	e7ce      	b.n	800dad2 <RemoteConfig::Run()+0xca>
 800db34:	2300      	movs	r3, #0
 800db36:	4a09      	ldr	r2, [pc, #36]	; (800db5c <RemoteConfig::Run()+0x154>)
 800db38:	011b      	lsls	r3, r3, #4
 800db3a:	4620      	mov	r0, r4
 800db3c:	58d3      	ldr	r3, [r2, r3]
 800db3e:	e7b8      	b.n	800dab2 <RemoteConfig::Run()+0xaa>
 800db40:	2301      	movs	r3, #1
 800db42:	e7f8      	b.n	800db36 <RemoteConfig::Run()+0x12e>
 800db44:	20001e88 	andcs	r1, r0, r8, lsl #29
 800db48:	08015bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
 800db4c:	08015a87 	stmdaeq	r1, {r0, r1, r2, r7, r9, fp, ip, lr}
 800db50:	08015a6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r9, fp, ip, lr}
 800db54:	08015a75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, fp, ip, lr}
 800db58:	08015a7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, fp, ip, lr}
 800db5c:	08015c88 	stmdaeq	r1, {r3, r7, sl, fp, ip, lr}

0800db60 <RemoteConfig::HandleSetRconfig()>:
 800db60:	b510      	push	{r4, lr}
 800db62:	4604      	mov	r4, r0
 800db64:	4b09      	ldr	r3, [pc, #36]	; (800db8c <RemoteConfig::HandleSetRconfig()+0x2c>)
 800db66:	b08a      	sub	sp, #40	; 0x28
 800db68:	6819      	ldr	r1, [r3, #0]
 800db6a:	a801      	add	r0, sp, #4
 800db6c:	f000 f89c 	bl	800dca8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800db70:	4b07      	ldr	r3, [pc, #28]	; (800db90 <RemoteConfig::HandleSetRconfig()+0x30>)
 800db72:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800db76:	6819      	ldr	r1, [r3, #0]
 800db78:	a801      	add	r0, sp, #4
 800db7a:	f000 f8ab 	bl	800dcd4 <RemoteConfigParams::Load(char const*, unsigned int)>
 800db7e:	4621      	mov	r1, r4
 800db80:	a801      	add	r0, sp, #4
 800db82:	f000 f9c2 	bl	800df0a <RemoteConfigParams::Set(RemoteConfig*)>
 800db86:	b00a      	add	sp, #40	; 0x28
 800db88:	bd10      	pop	{r4, pc}
 800db8a:	bf00      	nop
 800db8c:	20002ee4 	andcs	r2, r0, r4, ror #29
 800db90:	20001e88 	andcs	r1, r0, r8, lsl #29

0800db94 <RemoteConfig::HandleSetNetworkTxt()>:
 800db94:	b513      	push	{r0, r1, r4, lr}
 800db96:	4604      	mov	r4, r0
 800db98:	4b06      	ldr	r3, [pc, #24]	; (800dbb4 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800db9a:	a801      	add	r0, sp, #4
 800db9c:	6819      	ldr	r1, [r3, #0]
 800db9e:	f002 fef3 	bl	8010988 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800dba2:	4b05      	ldr	r3, [pc, #20]	; (800dbb8 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800dba4:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800dba8:	6819      	ldr	r1, [r3, #0]
 800dbaa:	a801      	add	r0, sp, #4
 800dbac:	f002 ff0c 	bl	80109c8 <NetworkParams::Load(char const*, unsigned int)>
 800dbb0:	b002      	add	sp, #8
 800dbb2:	bd10      	pop	{r4, pc}
 800dbb4:	20002edc 	ldrdcs	r2, [r0], -ip
 800dbb8:	20001e88 	andcs	r1, r0, r8, lsl #29

0800dbbc <RemoteConfig::HandleSetArtnetTxt()>:
 800dbbc:	b510      	push	{r4, lr}
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	4b07      	ldr	r3, [pc, #28]	; (800dbe0 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800dbc2:	b0a4      	sub	sp, #144	; 0x90
 800dbc4:	6819      	ldr	r1, [r3, #0]
 800dbc6:	a801      	add	r0, sp, #4
 800dbc8:	f7fc fc66 	bl	800a498 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800dbcc:	4b05      	ldr	r3, [pc, #20]	; (800dbe4 <RemoteConfig::HandleSetArtnetTxt()+0x28>)
 800dbce:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800dbd2:	6819      	ldr	r1, [r3, #0]
 800dbd4:	a801      	add	r0, sp, #4
 800dbd6:	f7fc fc91 	bl	800a4fc <ArtNetParams::Load(char const*, unsigned int)>
 800dbda:	b024      	add	sp, #144	; 0x90
 800dbdc:	bd10      	pop	{r4, pc}
 800dbde:	bf00      	nop
 800dbe0:	20002ed0 	ldrdcs	r2, [r0], -r0
 800dbe4:	20001e88 	andcs	r1, r0, r8, lsl #29

0800dbe8 <RemoteConfig::HandleSetParamsTxt()>:
 800dbe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbea:	4604      	mov	r4, r0
 800dbec:	4b06      	ldr	r3, [pc, #24]	; (800dc08 <RemoteConfig::HandleSetParamsTxt()+0x20>)
 800dbee:	4668      	mov	r0, sp
 800dbf0:	6819      	ldr	r1, [r3, #0]
 800dbf2:	f7fe fdad 	bl	800c750 <DmxParams::DmxParams(DmxParamsStore*)>
 800dbf6:	4b05      	ldr	r3, [pc, #20]	; (800dc0c <RemoteConfig::HandleSetParamsTxt()+0x24>)
 800dbf8:	4668      	mov	r0, sp
 800dbfa:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800dbfe:	6819      	ldr	r1, [r3, #0]
 800dc00:	f7fe fdbe 	bl	800c780 <DmxParams::Load(char const*, unsigned int)>
 800dc04:	b004      	add	sp, #16
 800dc06:	bd10      	pop	{r4, pc}
 800dc08:	20002ed8 	ldrdcs	r2, [r0], -r8
 800dc0c:	20001e88 	andcs	r1, r0, r8, lsl #29

0800dc10 <RemoteConfig::HandleSetDisplayTxt()>:
 800dc10:	b510      	push	{r4, lr}
 800dc12:	4604      	mov	r4, r0
 800dc14:	4b07      	ldr	r3, [pc, #28]	; (800dc34 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800dc16:	b08a      	sub	sp, #40	; 0x28
 800dc18:	6819      	ldr	r1, [r3, #0]
 800dc1a:	4668      	mov	r0, sp
 800dc1c:	f003 fe88 	bl	8011930 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800dc20:	4b05      	ldr	r3, [pc, #20]	; (800dc38 <RemoteConfig::HandleSetDisplayTxt()+0x28>)
 800dc22:	4668      	mov	r0, sp
 800dc24:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800dc28:	6819      	ldr	r1, [r3, #0]
 800dc2a:	f003 fe9b 	bl	8011964 <DisplayUdfParams::Load(char const*, unsigned int)>
 800dc2e:	b00a      	add	sp, #40	; 0x28
 800dc30:	bd10      	pop	{r4, pc}
 800dc32:	bf00      	nop
 800dc34:	20002ed4 	ldrdcs	r2, [r0], -r4
 800dc38:	20001e88 	andcs	r1, r0, r8, lsl #29

0800dc3c <RemoteConfig::HandleFactory()>:
 800dc3c:	b538      	push	{r3, r4, r5, lr}
 800dc3e:	2400      	movs	r4, #0
 800dc40:	4d04      	ldr	r5, [pc, #16]	; (800dc54 <RemoteConfig::HandleFactory()+0x18>)
 800dc42:	4621      	mov	r1, r4
 800dc44:	6828      	ldr	r0, [r5, #0]
 800dc46:	3401      	adds	r4, #1
 800dc48:	f000 ff18 	bl	800ea7c <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800dc4c:	2c1c      	cmp	r4, #28
 800dc4e:	d1f8      	bne.n	800dc42 <RemoteConfig::HandleFactory()+0x6>
 800dc50:	bd38      	pop	{r3, r4, r5, pc}
 800dc52:	bf00      	nop
 800dc54:	20002ec8 	andcs	r2, r0, r8, asr #29

0800dc58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800dc58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc5a:	460b      	mov	r3, r1
 800dc5c:	8885      	ldrh	r5, [r0, #4]
 800dc5e:	88c1      	ldrh	r1, [r0, #6]
 800dc60:	42a9      	cmp	r1, r5
 800dc62:	d214      	bcs.n	800dc8e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800dc64:	4604      	mov	r4, r0
 800dc66:	6800      	ldr	r0, [r0, #0]
 800dc68:	1a6d      	subs	r5, r5, r1
 800dc6a:	4408      	add	r0, r1
 800dc6c:	7a21      	ldrb	r1, [r4, #8]
 800dc6e:	b91a      	cbnz	r2, 800dc78 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800dc70:	b919      	cbnz	r1, 800dc7a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800dc72:	4a0a      	ldr	r2, [pc, #40]	; (800dc9c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800dc74:	9100      	str	r1, [sp, #0]
 800dc76:	e002      	b.n	800dc7e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800dc78:	b159      	cbz	r1, 800dc92 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800dc7a:	9200      	str	r2, [sp, #0]
 800dc7c:	4a08      	ldr	r2, [pc, #32]	; (800dca0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800dc7e:	4629      	mov	r1, r5
 800dc80:	f005 fb00 	bl	8013284 <snprintf>
 800dc84:	4285      	cmp	r5, r0
 800dc86:	bfa2      	ittt	ge
 800dc88:	88e3      	ldrhge	r3, [r4, #6]
 800dc8a:	181b      	addge	r3, r3, r0
 800dc8c:	80e3      	strhge	r3, [r4, #6]
 800dc8e:	b003      	add	sp, #12
 800dc90:	bd30      	pop	{r4, r5, pc}
 800dc92:	2201      	movs	r2, #1
 800dc94:	9200      	str	r2, [sp, #0]
 800dc96:	4a03      	ldr	r2, [pc, #12]	; (800dca4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800dc98:	e7f1      	b.n	800dc7e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800dc9a:	bf00      	nop
 800dc9c:	0801553b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, ip, lr}
 800dca0:	08015532 	stmdaeq	r1, {r1, r4, r5, r8, sl, ip, lr}
 800dca4:	0801553c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr}

0800dca8 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800dca8:	b510      	push	{r4, lr}
 800dcaa:	4604      	mov	r4, r0
 800dcac:	2220      	movs	r2, #32
 800dcae:	f840 1b04 	str.w	r1, [r0], #4
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	f005 f89c 	bl	8012df0 <memset>
 800dcb8:	4620      	mov	r0, r4
 800dcba:	bd10      	pop	{r4, pc}

0800dcbc <RemoteConfigParams::Load()>:
 800dcbc:	b508      	push	{r3, lr}
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	4601      	mov	r1, r0
 800dcc2:	6043      	str	r3, [r0, #4]
 800dcc4:	6800      	ldr	r0, [r0, #0]
 800dcc6:	b120      	cbz	r0, 800dcd2 <RemoteConfigParams::Load()+0x16>
 800dcc8:	6803      	ldr	r3, [r0, #0]
 800dcca:	3104      	adds	r1, #4
 800dccc:	68db      	ldr	r3, [r3, #12]
 800dcce:	4798      	blx	r3
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	bd08      	pop	{r3, pc}

0800dcd4 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dcd8:	460d      	mov	r5, r1
 800dcda:	4616      	mov	r6, r2
 800dcdc:	4604      	mov	r4, r0
 800dcde:	6043      	str	r3, [r0, #4]
 800dce0:	4602      	mov	r2, r0
 800dce2:	490a      	ldr	r1, [pc, #40]	; (800dd0c <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800dce4:	4668      	mov	r0, sp
 800dce6:	f004 fa49 	bl	801217c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800dcea:	4632      	mov	r2, r6
 800dcec:	4629      	mov	r1, r5
 800dcee:	4668      	mov	r0, sp
 800dcf0:	f004 fa48 	bl	8012184 <ReadConfigFile::Read(char const*, unsigned int)>
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	f851 0b04 	ldr.w	r0, [r1], #4
 800dcfa:	6803      	ldr	r3, [r0, #0]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	4798      	blx	r3
 800dd00:	4668      	mov	r0, sp
 800dd02:	f004 fa3e 	bl	8012182 <ReadConfigFile::~ReadConfigFile()>
 800dd06:	b002      	add	sp, #8
 800dd08:	bd70      	pop	{r4, r5, r6, pc}
 800dd0a:	bf00      	nop
 800dd0c:	0800ddcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, sl, fp, ip, lr, pc}

0800dd10 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800dd10:	6843      	ldr	r3, [r0, #4]
 800dd12:	b111      	cbz	r1, 800dd1a <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800dd14:	4313      	orrs	r3, r2
 800dd16:	6043      	str	r3, [r0, #4]
 800dd18:	4770      	bx	lr
 800dd1a:	ea23 0302 	bic.w	r3, r3, r2
 800dd1e:	e7fa      	b.n	800dd16 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800dd20 <RemoteConfigParams::callbackFunction(char const*)>:
 800dd20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd22:	460d      	mov	r5, r1
 800dd24:	4604      	mov	r4, r0
 800dd26:	4923      	ldr	r1, [pc, #140]	; (800ddb4 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800dd28:	4628      	mov	r0, r5
 800dd2a:	f10d 0203 	add.w	r2, sp, #3
 800dd2e:	f004 faff 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dd32:	b938      	cbnz	r0, 800dd44 <RemoteConfigParams::callbackFunction(char const*)+0x24>
 800dd34:	2201      	movs	r2, #1
 800dd36:	4620      	mov	r0, r4
 800dd38:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800dd3c:	f7ff ffe8 	bl	800dd10 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800dd40:	b003      	add	sp, #12
 800dd42:	bd30      	pop	{r4, r5, pc}
 800dd44:	4628      	mov	r0, r5
 800dd46:	491c      	ldr	r1, [pc, #112]	; (800ddb8 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800dd48:	f10d 0203 	add.w	r2, sp, #3
 800dd4c:	f004 faf0 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dd50:	b908      	cbnz	r0, 800dd56 <RemoteConfigParams::callbackFunction(char const*)+0x36>
 800dd52:	2202      	movs	r2, #2
 800dd54:	e7ef      	b.n	800dd36 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800dd56:	4628      	mov	r0, r5
 800dd58:	4918      	ldr	r1, [pc, #96]	; (800ddbc <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800dd5a:	f10d 0203 	add.w	r2, sp, #3
 800dd5e:	f004 fae7 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dd62:	b908      	cbnz	r0, 800dd68 <RemoteConfigParams::callbackFunction(char const*)+0x48>
 800dd64:	2204      	movs	r2, #4
 800dd66:	e7e6      	b.n	800dd36 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800dd68:	4628      	mov	r0, r5
 800dd6a:	4915      	ldr	r1, [pc, #84]	; (800ddc0 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800dd6c:	f10d 0203 	add.w	r2, sp, #3
 800dd70:	f004 fade 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dd74:	b908      	cbnz	r0, 800dd7a <RemoteConfigParams::callbackFunction(char const*)+0x5a>
 800dd76:	2208      	movs	r2, #8
 800dd78:	e7dd      	b.n	800dd36 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	4911      	ldr	r1, [pc, #68]	; (800ddc4 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800dd7e:	f10d 0203 	add.w	r2, sp, #3
 800dd82:	f004 fad5 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dd86:	b908      	cbnz	r0, 800dd8c <RemoteConfigParams::callbackFunction(char const*)+0x6c>
 800dd88:	2220      	movs	r2, #32
 800dd8a:	e7d4      	b.n	800dd36 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800dd8c:	2317      	movs	r3, #23
 800dd8e:	4628      	mov	r0, r5
 800dd90:	9301      	str	r3, [sp, #4]
 800dd92:	490d      	ldr	r1, [pc, #52]	; (800ddc8 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800dd94:	ab01      	add	r3, sp, #4
 800dd96:	f104 020c 	add.w	r2, r4, #12
 800dd9a:	f004 fa27 	bl	80121ec <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d1ce      	bne.n	800dd40 <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800dda2:	9b01      	ldr	r3, [sp, #4]
 800dda4:	4423      	add	r3, r4
 800dda6:	7318      	strb	r0, [r3, #12]
 800dda8:	6863      	ldr	r3, [r4, #4]
 800ddaa:	f043 0310 	orr.w	r3, r3, #16
 800ddae:	6063      	str	r3, [r4, #4]
 800ddb0:	e7c6      	b.n	800dd40 <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800ddb2:	bf00      	nop
 800ddb4:	08016066 	stmdaeq	r1, {r1, r2, r5, r6, sp, lr}
 800ddb8:	08016087 	stmdaeq	r1, {r0, r1, r2, r7, sp, lr}
 800ddbc:	08016095 	stmdaeq	r1, {r0, r2, r4, r7, sp, lr}
 800ddc0:	080160a3 	stmdaeq	r1, {r0, r1, r5, r7, sp, lr}
 800ddc4:	080160b1 	stmdaeq	r1, {r0, r4, r5, r7, sp, lr}
 800ddc8:	0801607a 	stmdaeq	r1, {r1, r3, r4, r5, r6, sp, lr}

0800ddcc <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800ddcc:	f7ff bfa8 	b.w	800dd20 <RemoteConfigParams::callbackFunction(char const*)>

0800ddd0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800ddd0:	b570      	push	{r4, r5, r6, lr}
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	4615      	mov	r5, r2
 800ddd6:	461e      	mov	r6, r3
 800ddd8:	b086      	sub	sp, #24
 800ddda:	3004      	adds	r0, #4
 800dddc:	2900      	cmp	r1, #0
 800ddde:	d040      	beq.n	800de62 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x92>
 800dde0:	2220      	movs	r2, #32
 800dde2:	f004 ffee 	bl	8012dc2 <memmove>
 800dde6:	4633      	mov	r3, r6
 800dde8:	462a      	mov	r2, r5
 800ddea:	4937      	ldr	r1, [pc, #220]	; (800dec8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800ddec:	a803      	add	r0, sp, #12
 800ddee:	f004 f8f5 	bl	8011fdc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800ddf2:	6862      	ldr	r2, [r4, #4]
 800ddf4:	4935      	ldr	r1, [pc, #212]	; (800decc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800ddf6:	f002 0201 	and.w	r2, r2, #1
 800ddfa:	a803      	add	r0, sp, #12
 800ddfc:	f7ff ff2c 	bl	800dc58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800de00:	6862      	ldr	r2, [r4, #4]
 800de02:	4933      	ldr	r1, [pc, #204]	; (800ded0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800de04:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800de08:	a803      	add	r0, sp, #12
 800de0a:	f7ff ff25 	bl	800dc58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800de0e:	6862      	ldr	r2, [r4, #4]
 800de10:	4930      	ldr	r1, [pc, #192]	; (800ded4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800de12:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800de16:	a803      	add	r0, sp, #12
 800de18:	f7ff ff1e 	bl	800dc58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800de1c:	6862      	ldr	r2, [r4, #4]
 800de1e:	492e      	ldr	r1, [pc, #184]	; (800ded8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800de20:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800de24:	a803      	add	r0, sp, #12
 800de26:	f7ff ff17 	bl	800dc58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800de2a:	6862      	ldr	r2, [r4, #4]
 800de2c:	492b      	ldr	r1, [pc, #172]	; (800dedc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800de2e:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800de32:	a803      	add	r0, sp, #12
 800de34:	f7ff ff10 	bl	800dc58 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800de38:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800de3c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800de40:	42a9      	cmp	r1, r5
 800de42:	d223      	bcs.n	800de8c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbc>
 800de44:	9803      	ldr	r0, [sp, #12]
 800de46:	1a6d      	subs	r5, r5, r1
 800de48:	4408      	add	r0, r1
 800de4a:	6861      	ldr	r1, [r4, #4]
 800de4c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800de50:	06c9      	lsls	r1, r1, #27
 800de52:	f104 030c 	add.w	r3, r4, #12
 800de56:	d40b      	bmi.n	800de70 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa0>
 800de58:	b95a      	cbnz	r2, 800de72 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	4a20      	ldr	r2, [pc, #128]	; (800dee0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800de5e:	4b21      	ldr	r3, [pc, #132]	; (800dee4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800de60:	e00a      	b.n	800de78 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800de62:	6823      	ldr	r3, [r4, #0]
 800de64:	4601      	mov	r1, r0
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	4618      	mov	r0, r3
 800de6a:	68d2      	ldr	r2, [r2, #12]
 800de6c:	4790      	blx	r2
 800de6e:	e7ba      	b.n	800dde6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800de70:	b32a      	cbz	r2, 800debe <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xee>
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	4a1c      	ldr	r2, [pc, #112]	; (800dee8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800de76:	4b1b      	ldr	r3, [pc, #108]	; (800dee4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800de78:	4629      	mov	r1, r5
 800de7a:	f005 fa03 	bl	8013284 <snprintf>
 800de7e:	4285      	cmp	r5, r0
 800de80:	bfa2      	ittt	ge
 800de82:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800de86:	18c0      	addge	r0, r0, r3
 800de88:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800de8c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800de90:	b17b      	cbz	r3, 800deb2 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe2>
 800de92:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800de96:	9b03      	ldr	r3, [sp, #12]
 800de98:	4413      	add	r3, r2
 800de9a:	227d      	movs	r2, #125	; 0x7d
 800de9c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800dea0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800dea4:	9903      	ldr	r1, [sp, #12]
 800dea6:	54ca      	strb	r2, [r1, r3]
 800dea8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800deac:	3301      	adds	r3, #1
 800deae:	f8ad 3012 	strh.w	r3, [sp, #18]
 800deb2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800deb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	b006      	add	sp, #24
 800debc:	bd70      	pop	{r4, r5, r6, pc}
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	4a0a      	ldr	r2, [pc, #40]	; (800deec <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800dec2:	4b08      	ldr	r3, [pc, #32]	; (800dee4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800dec4:	e7d8      	b.n	800de78 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800dec6:	bf00      	nop
 800dec8:	0801606e 	stmdaeq	r1, {r1, r2, r3, r5, r6, sp, lr}
 800decc:	08016066 	stmdaeq	r1, {r1, r2, r5, r6, sp, lr}
 800ded0:	08016087 	stmdaeq	r1, {r0, r1, r2, r7, sp, lr}
 800ded4:	08016095 	stmdaeq	r1, {r0, r2, r4, r7, sp, lr}
 800ded8:	080160a3 	stmdaeq	r1, {r0, r1, r5, r7, sp, lr}
 800dedc:	080160b1 	stmdaeq	r1, {r0, r4, r5, r7, sp, lr}
 800dee0:	0801554e 	stmdaeq	r1, {r1, r2, r3, r6, r8, sl, ip, lr}
 800dee4:	0801607a 	stmdaeq	r1, {r1, r3, r4, r5, r6, sp, lr}
 800dee8:	08015543 	stmdaeq	r1, {r0, r1, r6, r8, sl, ip, lr}
 800deec:	0801554f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, sl, ip, lr}

0800def0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800def0:	b513      	push	{r0, r1, r4, lr}
 800def2:	6804      	ldr	r4, [r0, #0]
 800def4:	b914      	cbnz	r4, 800defc <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800def6:	601c      	str	r4, [r3, #0]
 800def8:	b002      	add	sp, #8
 800defa:	bd10      	pop	{r4, pc}
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	4613      	mov	r3, r2
 800df00:	460a      	mov	r2, r1
 800df02:	2100      	movs	r1, #0
 800df04:	f7ff ff64 	bl	800ddd0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800df08:	e7f6      	b.n	800def8 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800df0a <RemoteConfigParams::Set(RemoteConfig*)>:
 800df0a:	b538      	push	{r3, r4, r5, lr}
 800df0c:	460c      	mov	r4, r1
 800df0e:	4605      	mov	r5, r0
 800df10:	6841      	ldr	r1, [r0, #4]
 800df12:	4620      	mov	r0, r4
 800df14:	f001 0101 	and.w	r1, r1, #1
 800df18:	f7ff fc20 	bl	800d75c <RemoteConfig::SetDisable(bool)>
 800df1c:	686b      	ldr	r3, [r5, #4]
 800df1e:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800df22:	f884 25d5 	strb.w	r2, [r4, #1493]	; 0x5d5
 800df26:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800df2a:	f884 25d6 	strb.w	r2, [r4, #1494]	; 0x5d6
 800df2e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800df32:	f884 25d7 	strb.w	r2, [r4, #1495]	; 0x5d7
 800df36:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800df3a:	06db      	lsls	r3, r3, #27
 800df3c:	f884 25d8 	strb.w	r2, [r4, #1496]	; 0x5d8
 800df40:	d506      	bpl.n	800df50 <RemoteConfigParams::Set(RemoteConfig*)+0x46>
 800df42:	4620      	mov	r0, r4
 800df44:	f105 010c 	add.w	r1, r5, #12
 800df48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df4c:	f7ff bc2a 	b.w	800d7a4 <RemoteConfig::SetDisplayName(char const*)>
 800df50:	bd38      	pop	{r3, r4, r5, pc}

0800df52 <RemoteConfigParams::Dump()>:
 800df52:	4770      	bx	lr

0800df54 <RemoteConfig::HandleReboot()>:
 800df54:	f890 35d6 	ldrb.w	r3, [r0, #1494]	; 0x5d6
 800df58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d03e      	beq.n	800dfdc <RemoteConfig::HandleReboot()+0x88>
 800df5e:	2301      	movs	r3, #1
 800df60:	4c1f      	ldr	r4, [pc, #124]	; (800dfe0 <RemoteConfig::HandleReboot()+0x8c>)
 800df62:	f880 35d9 	strb.w	r3, [r0, #1497]	; 0x5d9
 800df66:	6825      	ldr	r5, [r4, #0]
 800df68:	69a8      	ldr	r0, [r5, #24]
 800df6a:	b138      	cbz	r0, 800df7c <RemoteConfig::HandleReboot()+0x28>
 800df6c:	2100      	movs	r1, #0
 800df6e:	6803      	ldr	r3, [r0, #0]
 800df70:	7429      	strb	r1, [r5, #16]
 800df72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df74:	4798      	blx	r3
 800df76:	4b1b      	ldr	r3, [pc, #108]	; (800dfe4 <RemoteConfig::HandleReboot()+0x90>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	606b      	str	r3, [r5, #4]
 800df7c:	4d1a      	ldr	r5, [pc, #104]	; (800dfe8 <RemoteConfig::HandleReboot()+0x94>)
 800df7e:	6828      	ldr	r0, [r5, #0]
 800df80:	f000 fe02 	bl	800eb88 <SpiFlashStore::Flash()>
 800df84:	2800      	cmp	r0, #0
 800df86:	d1fa      	bne.n	800df7e <RemoteConfig::HandleReboot()+0x2a>
 800df88:	4b18      	ldr	r3, [pc, #96]	; (800dfec <RemoteConfig::HandleReboot()+0x98>)
 800df8a:	6818      	ldr	r0, [r3, #0]
 800df8c:	f002 fa6e 	bl	801046c <Network::Shutdown()>
 800df90:	4817      	ldr	r0, [pc, #92]	; (800dff0 <RemoteConfig::HandleReboot()+0x9c>)
 800df92:	f005 f94f 	bl	8013234 <printf>
 800df96:	6823      	ldr	r3, [r4, #0]
 800df98:	6998      	ldr	r0, [r3, #24]
 800df9a:	b110      	cbz	r0, 800dfa2 <RemoteConfig::HandleReboot()+0x4e>
 800df9c:	6803      	ldr	r3, [r0, #0]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	4798      	blx	r3
 800dfa2:	6824      	ldr	r4, [r4, #0]
 800dfa4:	4913      	ldr	r1, [pc, #76]	; (800dff4 <RemoteConfig::HandleReboot()+0xa0>)
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f7fa f828 	bl	8007ffc <Display::TextStatus(char const*)>
 800dfac:	7c63      	ldrb	r3, [r4, #17]
 800dfae:	b18b      	cbz	r3, 800dfd4 <RemoteConfig::HandleReboot()+0x80>
 800dfb0:	2312      	movs	r3, #18
 800dfb2:	f88d 3004 	strb.w	r3, [sp, #4]
 800dfb6:	23bf      	movs	r3, #191	; 0xbf
 800dfb8:	7a20      	ldrb	r0, [r4, #8]
 800dfba:	f88d 3005 	strb.w	r3, [sp, #5]
 800dfbe:	f88d 3006 	strb.w	r3, [sp, #6]
 800dfc2:	f006 f9ab 	bl	801431c <gd32_i2c_set_address(unsigned char)>
 800dfc6:	68e0      	ldr	r0, [r4, #12]
 800dfc8:	f006 f9a0 	bl	801430c <gd32_i2c_set_baudrate(unsigned int)>
 800dfcc:	2103      	movs	r1, #3
 800dfce:	a801      	add	r0, sp, #4
 800dfd0:	f006 f9aa 	bl	8014328 <gd32_i2c_write(char const*, unsigned int)>
 800dfd4:	4b08      	ldr	r3, [pc, #32]	; (800dff8 <RemoteConfig::HandleReboot()+0xa4>)
 800dfd6:	6818      	ldr	r0, [r3, #0]
 800dfd8:	f004 fdf2 	bl	8012bc0 <Hardware::Reboot()>
 800dfdc:	b003      	add	sp, #12
 800dfde:	bd30      	pop	{r4, r5, pc}
 800dfe0:	2000ae04 	andcs	sl, r0, r4, lsl #28
 800dfe4:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800dfe8:	20002ec8 	andcs	r2, r0, r8, asr #29
 800dfec:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800dff0:	08015ca8 	stmdaeq	r1, {r3, r5, r7, sl, fp, ip, lr}
 800dff4:	08015cb7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, sl, fp, ip, lr}
 800dff8:	2000aef4 	strdcs	sl, [r0], -r4

0800dffc <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800dffc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e000:	2000      	movs	r0, #0
 800e002:	4d12      	ldr	r5, [pc, #72]	; (800e04c <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800e004:	f10d 0c04 	add.w	ip, sp, #4
 800e008:	6814      	ldr	r4, [r2, #0]
 800e00a:	7d2b      	ldrb	r3, [r5, #20]
 800e00c:	692e      	ldr	r6, [r5, #16]
 800e00e:	42a3      	cmp	r3, r4
 800e010:	bf34      	ite	cc
 800e012:	4664      	movcc	r4, ip
 800e014:	4614      	movcs	r4, r2
 800e016:	9301      	str	r3, [sp, #4]
 800e018:	6827      	ldr	r7, [r4, #0]
 800e01a:	460c      	mov	r4, r1
 800e01c:	3e01      	subs	r6, #1
 800e01e:	440f      	add	r7, r1
 800e020:	42bc      	cmp	r4, r7
 800e022:	d011      	beq.n	800e048 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800e024:	f894 8000 	ldrb.w	r8, [r4]
 800e028:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800e02c:	45f0      	cmp	r8, lr
 800e02e:	d009      	beq.n	800e044 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x48>
 800e030:	3001      	adds	r0, #1
 800e032:	2805      	cmp	r0, #5
 800e034:	f105 051c 	add.w	r5, r5, #28
 800e038:	d1e6      	bne.n	800e008 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800e03a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e03e:	b002      	add	sp, #8
 800e040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e044:	3401      	adds	r4, #1
 800e046:	e7eb      	b.n	800e020 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800e048:	6013      	str	r3, [r2, #0]
 800e04a:	e7f8      	b.n	800e03e <RemoteConfig::GetIndex(void const*, unsigned int&)+0x42>
 800e04c:	08015d00 	stmdaeq	r1, {r8, sl, fp, ip, lr}

0800e050 <RemoteConfig::PlatformHandleTftpSet()>:
 800e050:	f890 15ec 	ldrb.w	r1, [r0, #1516]	; 0x5ec
 800e054:	b109      	cbz	r1, 800e05a <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800e056:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800e05a:	2002      	movs	r0, #2
 800e05c:	f005 bb12 	b.w	8013684 <bkp_data_write>

0800e060 <RemoteConfig::PlatformHandleTftpGet()>:
 800e060:	b510      	push	{r4, lr}
 800e062:	4604      	mov	r4, r0
 800e064:	2002      	movs	r0, #2
 800e066:	f005 fb23 	bl	80136b0 <bkp_data_read>
 800e06a:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800e06e:	1ac3      	subs	r3, r0, r3
 800e070:	4258      	negs	r0, r3
 800e072:	4158      	adcs	r0, r3
 800e074:	f884 05ec 	strb.w	r0, [r4, #1516]	; 0x5ec
 800e078:	bd10      	pop	{r4, pc}

0800e07a <strcmp>:
 800e07a:	1e43      	subs	r3, r0, #1
 800e07c:	3901      	subs	r1, #1
 800e07e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800e082:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e086:	4290      	cmp	r0, r2
 800e088:	d102      	bne.n	800e090 <strcmp+0x16>
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d1f7      	bne.n	800e07e <strcmp+0x4>
 800e08e:	4770      	bx	lr
 800e090:	1a80      	subs	r0, r0, r2
 800e092:	4770      	bx	lr

0800e094 <strcasecmp>:
 800e094:	b530      	push	{r4, r5, lr}
 800e096:	1e42      	subs	r2, r0, #1
 800e098:	3901      	subs	r1, #1
 800e09a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e09e:	4604      	mov	r4, r0
 800e0a0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e0a4:	2b19      	cmp	r3, #25
 800e0a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e0aa:	bf98      	it	ls
 800e0ac:	f100 0420 	addls.w	r4, r0, #32
 800e0b0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800e0b4:	2d19      	cmp	r5, #25
 800e0b6:	bf98      	it	ls
 800e0b8:	3320      	addls	r3, #32
 800e0ba:	42a3      	cmp	r3, r4
 800e0bc:	d102      	bne.n	800e0c4 <strcasecmp+0x30>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	d1eb      	bne.n	800e09a <strcasecmp+0x6>
 800e0c2:	bd30      	pop	{r4, r5, pc}
 800e0c4:	1ae0      	subs	r0, r4, r3
 800e0c6:	e7fc      	b.n	800e0c2 <strcasecmp+0x2e>

0800e0c8 <PropertiesConfig::EnableJSON(bool)>:
 800e0c8:	4a04      	ldr	r2, [pc, #16]	; (800e0dc <PropertiesConfig::EnableJSON(bool)+0x14>)
 800e0ca:	7813      	ldrb	r3, [r2, #0]
 800e0cc:	b118      	cbz	r0, 800e0d6 <PropertiesConfig::EnableJSON(bool)+0xe>
 800e0ce:	f043 0301 	orr.w	r3, r3, #1
 800e0d2:	7013      	strb	r3, [r2, #0]
 800e0d4:	4770      	bx	lr
 800e0d6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e0da:	e7fa      	b.n	800e0d2 <PropertiesConfig::EnableJSON(bool)+0xa>
 800e0dc:	2000ae00 	andcs	sl, r0, r0, lsl #28

0800e0e0 <HttpDaemon::HttpDaemon()>:
 800e0e0:	4a0a      	ldr	r2, [pc, #40]	; (800e10c <HttpDaemon::HttpDaemon()+0x2c>)
 800e0e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e0e6:	6002      	str	r2, [r0, #0]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800e0ee:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800e0f2:	2102      	movs	r1, #2
 800e0f4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800e0f8:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800e0fc:	60c2      	str	r2, [r0, #12]
 800e0fe:	8402      	strh	r2, [r0, #32]
 800e100:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 800e104:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop
 800e10c:	08015fe6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}

0800e110 <HttpDaemon::Start()>:
 800e110:	4b04      	ldr	r3, [pc, #16]	; (800e124 <HttpDaemon::Start()+0x14>)
 800e112:	b510      	push	{r4, lr}
 800e114:	2150      	movs	r1, #80	; 0x50
 800e116:	4604      	mov	r4, r0
 800e118:	6818      	ldr	r0, [r3, #0]
 800e11a:	f002 fc29 	bl	8010970 <Network::TcpBegin(unsigned short)>
 800e11e:	6120      	str	r0, [r4, #16]
 800e120:	bd10      	pop	{r4, pc}
 800e122:	bf00      	nop
 800e124:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800e128 <HttpDaemon::ParseMethod(char*)>:
 800e128:	b538      	push	{r3, r4, r5, lr}
 800e12a:	4604      	mov	r4, r0
 800e12c:	4608      	mov	r0, r1
 800e12e:	491b      	ldr	r1, [pc, #108]	; (800e19c <HttpDaemon::ParseMethod(char*)+0x74>)
 800e130:	f005 f8d8 	bl	80132e4 <strtok>
 800e134:	4605      	mov	r5, r0
 800e136:	b370      	cbz	r0, 800e196 <HttpDaemon::ParseMethod(char*)+0x6e>
 800e138:	4919      	ldr	r1, [pc, #100]	; (800e1a0 <HttpDaemon::ParseMethod(char*)+0x78>)
 800e13a:	f7ff ff9e 	bl	800e07a <strcmp>
 800e13e:	b940      	cbnz	r0, 800e152 <HttpDaemon::ParseMethod(char*)+0x2a>
 800e140:	61e0      	str	r0, [r4, #28]
 800e142:	2000      	movs	r0, #0
 800e144:	4915      	ldr	r1, [pc, #84]	; (800e19c <HttpDaemon::ParseMethod(char*)+0x74>)
 800e146:	f005 f8cd 	bl	80132e4 <strtok>
 800e14a:	b950      	cbnz	r0, 800e162 <HttpDaemon::ParseMethod(char*)+0x3a>
 800e14c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e150:	bd38      	pop	{r3, r4, r5, pc}
 800e152:	4628      	mov	r0, r5
 800e154:	4913      	ldr	r1, [pc, #76]	; (800e1a4 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800e156:	f7ff ff90 	bl	800e07a <strcmp>
 800e15a:	b9e0      	cbnz	r0, 800e196 <HttpDaemon::ParseMethod(char*)+0x6e>
 800e15c:	2301      	movs	r3, #1
 800e15e:	61e3      	str	r3, [r4, #28]
 800e160:	e7ef      	b.n	800e142 <HttpDaemon::ParseMethod(char*)+0x1a>
 800e162:	6060      	str	r0, [r4, #4]
 800e164:	4910      	ldr	r1, [pc, #64]	; (800e1a8 <HttpDaemon::ParseMethod(char*)+0x80>)
 800e166:	2000      	movs	r0, #0
 800e168:	f005 f8bc 	bl	80132e4 <strtok>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	d0ed      	beq.n	800e14c <HttpDaemon::ParseMethod(char*)+0x24>
 800e170:	490e      	ldr	r1, [pc, #56]	; (800e1ac <HttpDaemon::ParseMethod(char*)+0x84>)
 800e172:	f7ff ff82 	bl	800e07a <strcmp>
 800e176:	2800      	cmp	r0, #0
 800e178:	d1e8      	bne.n	800e14c <HttpDaemon::ParseMethod(char*)+0x24>
 800e17a:	490d      	ldr	r1, [pc, #52]	; (800e1b0 <HttpDaemon::ParseMethod(char*)+0x88>)
 800e17c:	f005 f8b2 	bl	80132e4 <strtok>
 800e180:	2800      	cmp	r0, #0
 800e182:	d0e3      	beq.n	800e14c <HttpDaemon::ParseMethod(char*)+0x24>
 800e184:	490b      	ldr	r1, [pc, #44]	; (800e1b4 <HttpDaemon::ParseMethod(char*)+0x8c>)
 800e186:	f7ff ff78 	bl	800e07a <strcmp>
 800e18a:	2800      	cmp	r0, #0
 800e18c:	f240 10f9 	movw	r0, #505	; 0x1f9
 800e190:	bf08      	it	eq
 800e192:	20c8      	moveq	r0, #200	; 0xc8
 800e194:	e7dc      	b.n	800e150 <HttpDaemon::ParseMethod(char*)+0x28>
 800e196:	f240 10f5 	movw	r0, #501	; 0x1f5
 800e19a:	e7d9      	b.n	800e150 <HttpDaemon::ParseMethod(char*)+0x28>
 800e19c:	08016f73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 800e1a0:	08015d8c 	stmdaeq	r1, {r2, r3, r7, r8, sl, fp, ip, lr}
 800e1a4:	08015d90 	stmdaeq	r1, {r4, r7, r8, sl, fp, ip, lr}
 800e1a8:	08015dfa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 800e1ac:	08015d95 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, fp, ip, lr}
 800e1b0:	08015d9a 	stmdaeq	r1, {r1, r3, r4, r7, r8, sl, fp, ip, lr}
 800e1b4:	08015d9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, fp, ip, lr}

0800e1b8 <HttpDaemon::ParseHeaderField(char*)>:
 800e1b8:	b538      	push	{r3, r4, r5, lr}
 800e1ba:	4605      	mov	r5, r0
 800e1bc:	4608      	mov	r0, r1
 800e1be:	491d      	ldr	r1, [pc, #116]	; (800e234 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800e1c0:	f005 f890 	bl	80132e4 <strtok>
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	b910      	cbnz	r0, 800e1ce <HttpDaemon::ParseHeaderField(char*)+0x16>
 800e1c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e1cc:	bd38      	pop	{r3, r4, r5, pc}
 800e1ce:	491a      	ldr	r1, [pc, #104]	; (800e238 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800e1d0:	f7ff ff60 	bl	800e094 <strcasecmp>
 800e1d4:	b970      	cbnz	r0, 800e1f4 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800e1d6:	4919      	ldr	r1, [pc, #100]	; (800e23c <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800e1d8:	f005 f884 	bl	80132e4 <strtok>
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	d0f3      	beq.n	800e1c8 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800e1e0:	4917      	ldr	r1, [pc, #92]	; (800e240 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800e1e2:	f7ff ff4a 	bl	800e07a <strcmp>
 800e1e6:	b108      	cbz	r0, 800e1ec <HttpDaemon::ParseHeaderField(char*)+0x34>
 800e1e8:	20c8      	movs	r0, #200	; 0xc8
 800e1ea:	e7ef      	b.n	800e1cc <HttpDaemon::ParseHeaderField(char*)+0x14>
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	f885 3020 	strb.w	r3, [r5, #32]
 800e1f2:	e7f9      	b.n	800e1e8 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	4913      	ldr	r1, [pc, #76]	; (800e244 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800e1f8:	f7ff ff4c 	bl	800e094 <strcasecmp>
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	2800      	cmp	r0, #0
 800e200:	d1f2      	bne.n	800e1e8 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800e202:	4911      	ldr	r1, [pc, #68]	; (800e248 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800e204:	f005 f86e 	bl	80132e4 <strtok>
 800e208:	2800      	cmp	r0, #0
 800e20a:	d0dd      	beq.n	800e1c8 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800e20c:	1e42      	subs	r2, r0, #1
 800e20e:	4623      	mov	r3, r4
 800e210:	200a      	movs	r0, #10
 800e212:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800e216:	b151      	cbz	r1, 800e22e <HttpDaemon::ParseHeaderField(char*)+0x76>
 800e218:	3930      	subs	r1, #48	; 0x30
 800e21a:	2909      	cmp	r1, #9
 800e21c:	d8d4      	bhi.n	800e1c8 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800e21e:	fb00 1303 	mla	r3, r0, r3, r1
 800e222:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800e226:	d9f4      	bls.n	800e212 <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800e228:	f240 109d 	movw	r0, #413	; 0x19d
 800e22c:	e7ce      	b.n	800e1cc <HttpDaemon::ParseHeaderField(char*)+0x14>
 800e22e:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 800e232:	e7d9      	b.n	800e1e8 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800e234:	08015da1 	stmdaeq	r1, {r0, r5, r7, r8, sl, fp, ip, lr}
 800e238:	08015da3 	stmdaeq	r1, {r0, r1, r5, r7, r8, sl, fp, ip, lr}
 800e23c:	08015db0 	stmdaeq	r1, {r4, r5, r7, r8, sl, fp, ip, lr}
 800e240:	08015db3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r8, sl, fp, ip, lr}
 800e244:	08015dc4 	stmdaeq	r1, {r2, r6, r7, r8, sl, fp, ip, lr}
 800e248:	08016f73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}

0800e24c <HttpDaemon::ParseRequest()>:
 800e24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e24e:	2400      	movs	r4, #0
 800e250:	4605      	mov	r5, r0
 800e252:	4622      	mov	r2, r4
 800e254:	4626      	mov	r6, r4
 800e256:	68c1      	ldr	r1, [r0, #12]
 800e258:	f880 4020 	strb.w	r4, [r0, #32]
 800e25c:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 800e260:	8aab      	ldrh	r3, [r5, #20]
 800e262:	42a3      	cmp	r3, r4
 800e264:	d923      	bls.n	800e2ae <HttpDaemon::ParseRequest()+0x62>
 800e266:	68eb      	ldr	r3, [r5, #12]
 800e268:	5d18      	ldrb	r0, [r3, r4]
 800e26a:	280a      	cmp	r0, #10
 800e26c:	d10e      	bne.n	800e28c <HttpDaemon::ParseRequest()+0x40>
 800e26e:	4423      	add	r3, r4
 800e270:	f803 6c01 	strb.w	r6, [r3, #-1]
 800e274:	1c57      	adds	r7, r2, #1
 800e276:	b962      	cbnz	r2, 800e292 <HttpDaemon::ParseRequest()+0x46>
 800e278:	4628      	mov	r0, r5
 800e27a:	f7ff ff55 	bl	800e128 <HttpDaemon::ParseMethod(char*)>
 800e27e:	28c8      	cmp	r0, #200	; 0xc8
 800e280:	d116      	bne.n	800e2b0 <HttpDaemon::ParseRequest()+0x64>
 800e282:	463a      	mov	r2, r7
 800e284:	68e9      	ldr	r1, [r5, #12]
 800e286:	3401      	adds	r4, #1
 800e288:	b2a4      	uxth	r4, r4
 800e28a:	4421      	add	r1, r4
 800e28c:	3401      	adds	r4, #1
 800e28e:	b2a4      	uxth	r4, r4
 800e290:	e7e6      	b.n	800e260 <HttpDaemon::ParseRequest()+0x14>
 800e292:	7808      	ldrb	r0, [r1, #0]
 800e294:	b968      	cbnz	r0, 800e2b2 <HttpDaemon::ParseRequest()+0x66>
 800e296:	696b      	ldr	r3, [r5, #20]
 800e298:	3b01      	subs	r3, #1
 800e29a:	1b1b      	subs	r3, r3, r4
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 800e2a2:	b123      	cbz	r3, 800e2ae <HttpDaemon::ParseRequest()+0x62>
 800e2a4:	68ea      	ldr	r2, [r5, #12]
 800e2a6:	3401      	adds	r4, #1
 800e2a8:	4414      	add	r4, r2
 800e2aa:	60ac      	str	r4, [r5, #8]
 800e2ac:	54e0      	strb	r0, [r4, r3]
 800e2ae:	20c8      	movs	r0, #200	; 0xc8
 800e2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	f7ff ff80 	bl	800e1b8 <HttpDaemon::ParseHeaderField(char*)>
 800e2b8:	e7e1      	b.n	800e27e <HttpDaemon::ParseRequest()+0x32>
	...

0800e2bc <HttpDaemon::HandleGetTxt()>:
 800e2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c0:	6847      	ldr	r7, [r0, #4]
 800e2c2:	4604      	mov	r4, r0
 800e2c4:	1dbd      	adds	r5, r7, #6
 800e2c6:	462b      	mov	r3, r5
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	7802      	ldrb	r2, [r0, #0]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	2a00      	cmp	r2, #0
 800e2d0:	d1fa      	bne.n	800e2c8 <HttpDaemon::HandleGetTxt()+0xc>
 800e2d2:	1b40      	subs	r0, r0, r5
 800e2d4:	2804      	cmp	r0, #4
 800e2d6:	d925      	bls.n	800e324 <HttpDaemon::HandleGetTxt()+0x68>
 800e2d8:	3804      	subs	r0, #4
 800e2da:	4915      	ldr	r1, [pc, #84]	; (800e330 <HttpDaemon::HandleGetTxt()+0x74>)
 800e2dc:	4428      	add	r0, r5
 800e2de:	f7ff fecc 	bl	800e07a <strcmp>
 800e2e2:	b9f8      	cbnz	r0, 800e324 <HttpDaemon::HandleGetTxt()+0x68>
 800e2e4:	4b13      	ldr	r3, [pc, #76]	; (800e334 <HttpDaemon::HandleGetTxt()+0x78>)
 800e2e6:	2001      	movs	r0, #1
 800e2e8:	f893 8000 	ldrb.w	r8, [r3]
 800e2ec:	f7ff feec 	bl	800e0c8 <PropertiesConfig::EnableJSON(bool)>
 800e2f0:	4b11      	ldr	r3, [pc, #68]	; (800e338 <HttpDaemon::HandleGetTxt()+0x7c>)
 800e2f2:	f240 529b 	movw	r2, #1435	; 0x59b
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	6818      	ldr	r0, [r3, #0]
 800e2fa:	f7ff fa6b 	bl	800d7d4 <RemoteConfig::HandleGet(void*, unsigned int)>
 800e2fe:	4606      	mov	r6, r0
 800e300:	f008 0801 	and.w	r8, r8, #1
 800e304:	4640      	mov	r0, r8
 800e306:	f7ff fedf 	bl	800e0c8 <PropertiesConfig::EnableJSON(bool)>
 800e30a:	b15e      	cbz	r6, 800e324 <HttpDaemon::HandleGetTxt()+0x68>
 800e30c:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 800e310:	3606      	adds	r6, #6
 800e312:	3422      	adds	r4, #34	; 0x22
 800e314:	443e      	add	r6, r7
 800e316:	42b5      	cmp	r5, r6
 800e318:	d008      	beq.n	800e32c <HttpDaemon::HandleGetTxt()+0x70>
 800e31a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e31e:	f804 3b01 	strb.w	r3, [r4], #1
 800e322:	e7f8      	b.n	800e316 <HttpDaemon::HandleGetTxt()+0x5a>
 800e324:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e32c:	20c8      	movs	r0, #200	; 0xc8
 800e32e:	e7fb      	b.n	800e328 <HttpDaemon::HandleGetTxt()+0x6c>
 800e330:	08015ccc 	stmdaeq	r1, {r2, r3, r6, r7, sl, fp, ip, lr}
 800e334:	2000ae00 	andcs	sl, r0, r0, lsl #28
 800e338:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0

0800e33c <HttpDaemon::HandleGet()>:
 800e33c:	b570      	push	{r4, r5, r6, lr}
 800e33e:	6845      	ldr	r5, [r0, #4]
 800e340:	4604      	mov	r4, r0
 800e342:	4943      	ldr	r1, [pc, #268]	; (800e450 <HttpDaemon::HandleGet()+0x114>)
 800e344:	4628      	mov	r0, r5
 800e346:	f7ff fe98 	bl	800e07a <strcmp>
 800e34a:	b120      	cbz	r0, 800e356 <HttpDaemon::HandleGet()+0x1a>
 800e34c:	4628      	mov	r0, r5
 800e34e:	4941      	ldr	r1, [pc, #260]	; (800e454 <HttpDaemon::HandleGet()+0x118>)
 800e350:	f7ff fe93 	bl	800e07a <strcmp>
 800e354:	b960      	cbnz	r0, 800e370 <HttpDaemon::HandleGet()+0x34>
 800e356:	4621      	mov	r1, r4
 800e358:	4b3f      	ldr	r3, [pc, #252]	; (800e458 <HttpDaemon::HandleGet()+0x11c>)
 800e35a:	4840      	ldr	r0, [pc, #256]	; (800e45c <HttpDaemon::HandleGet()+0x120>)
 800e35c:	f841 3b22 	str.w	r3, [r1], #34
 800e360:	f000 fa7a 	bl	800e858 <get_file_content(char const*, char*)>
 800e364:	2800      	cmp	r0, #0
 800e366:	dd1e      	ble.n	800e3a6 <HttpDaemon::HandleGet()+0x6a>
 800e368:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800e36c:	20c8      	movs	r0, #200	; 0xc8
 800e36e:	bd70      	pop	{r4, r5, r6, pc}
 800e370:	4628      	mov	r0, r5
 800e372:	493b      	ldr	r1, [pc, #236]	; (800e460 <HttpDaemon::HandleGet()+0x124>)
 800e374:	f7ff fe81 	bl	800e07a <strcmp>
 800e378:	b928      	cbnz	r0, 800e386 <HttpDaemon::HandleGet()+0x4a>
 800e37a:	4621      	mov	r1, r4
 800e37c:	4b39      	ldr	r3, [pc, #228]	; (800e464 <HttpDaemon::HandleGet()+0x128>)
 800e37e:	483a      	ldr	r0, [pc, #232]	; (800e468 <HttpDaemon::HandleGet()+0x12c>)
 800e380:	f841 3b22 	str.w	r3, [r1], #34
 800e384:	e7ec      	b.n	800e360 <HttpDaemon::HandleGet()+0x24>
 800e386:	4628      	mov	r0, r5
 800e388:	4938      	ldr	r1, [pc, #224]	; (800e46c <HttpDaemon::HandleGet()+0x130>)
 800e38a:	f7ff fe76 	bl	800e07a <strcmp>
 800e38e:	b168      	cbz	r0, 800e3ac <HttpDaemon::HandleGet()+0x70>
 800e390:	4a37      	ldr	r2, [pc, #220]	; (800e470 <HttpDaemon::HandleGet()+0x134>)
 800e392:	1e6b      	subs	r3, r5, #1
 800e394:	1d6e      	adds	r6, r5, #5
 800e396:	42b3      	cmp	r3, r6
 800e398:	d00e      	beq.n	800e3b8 <HttpDaemon::HandleGet()+0x7c>
 800e39a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e39e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800e3a2:	4288      	cmp	r0, r1
 800e3a4:	d0f7      	beq.n	800e396 <HttpDaemon::HandleGet()+0x5a>
 800e3a6:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800e3aa:	e7e0      	b.n	800e36e <HttpDaemon::HandleGet()+0x32>
 800e3ac:	4621      	mov	r1, r4
 800e3ae:	4b31      	ldr	r3, [pc, #196]	; (800e474 <HttpDaemon::HandleGet()+0x138>)
 800e3b0:	4831      	ldr	r0, [pc, #196]	; (800e478 <HttpDaemon::HandleGet()+0x13c>)
 800e3b2:	f841 3b22 	str.w	r3, [r1], #34
 800e3b6:	e7d3      	b.n	800e360 <HttpDaemon::HandleGet()+0x24>
 800e3b8:	4b30      	ldr	r3, [pc, #192]	; (800e47c <HttpDaemon::HandleGet()+0x140>)
 800e3ba:	3506      	adds	r5, #6
 800e3bc:	4628      	mov	r0, r5
 800e3be:	4930      	ldr	r1, [pc, #192]	; (800e480 <HttpDaemon::HandleGet()+0x144>)
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	f7ff fe5a 	bl	800e07a <strcmp>
 800e3c6:	b930      	cbnz	r0, 800e3d6 <HttpDaemon::HandleGet()+0x9a>
 800e3c8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800e3cc:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800e3d0:	f000 f9ca 	bl	800e768 <remoteconfig::json_get_list(char*, unsigned short)>
 800e3d4:	e7c6      	b.n	800e364 <HttpDaemon::HandleGet()+0x28>
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	492a      	ldr	r1, [pc, #168]	; (800e484 <HttpDaemon::HandleGet()+0x148>)
 800e3da:	f7ff fe4e 	bl	800e07a <strcmp>
 800e3de:	b930      	cbnz	r0, 800e3ee <HttpDaemon::HandleGet()+0xb2>
 800e3e0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800e3e4:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800e3e8:	f000 f9f2 	bl	800e7d0 <remoteconfig::json_get_version(char*, unsigned short)>
 800e3ec:	e7ba      	b.n	800e364 <HttpDaemon::HandleGet()+0x28>
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	4925      	ldr	r1, [pc, #148]	; (800e488 <HttpDaemon::HandleGet()+0x14c>)
 800e3f2:	f7ff fe42 	bl	800e07a <strcmp>
 800e3f6:	b958      	cbnz	r0, 800e410 <HttpDaemon::HandleGet()+0xd4>
 800e3f8:	4b24      	ldr	r3, [pc, #144]	; (800e48c <HttpDaemon::HandleGet()+0x150>)
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f893 35d7 	ldrb.w	r3, [r3, #1495]	; 0x5d7
 800e400:	b31b      	cbz	r3, 800e44a <HttpDaemon::HandleGet()+0x10e>
 800e402:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800e406:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800e40a:	f000 f9fd 	bl	800e808 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800e40e:	e7a9      	b.n	800e364 <HttpDaemon::HandleGet()+0x28>
 800e410:	4628      	mov	r0, r5
 800e412:	491f      	ldr	r1, [pc, #124]	; (800e490 <HttpDaemon::HandleGet()+0x154>)
 800e414:	f7ff fe31 	bl	800e07a <strcmp>
 800e418:	b930      	cbnz	r0, 800e428 <HttpDaemon::HandleGet()+0xec>
 800e41a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800e41e:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800e422:	f000 fa01 	bl	800e828 <remoteconfig::json_get_display(char*, unsigned short)>
 800e426:	e79d      	b.n	800e364 <HttpDaemon::HandleGet()+0x28>
 800e428:	4628      	mov	r0, r5
 800e42a:	491a      	ldr	r1, [pc, #104]	; (800e494 <HttpDaemon::HandleGet()+0x158>)
 800e42c:	f7ff fe25 	bl	800e07a <strcmp>
 800e430:	b930      	cbnz	r0, 800e440 <HttpDaemon::HandleGet()+0x104>
 800e432:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800e436:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800e43a:	f000 fa05 	bl	800e848 <remoteconfig::json_get_directory(char*, unsigned short)>
 800e43e:	e791      	b.n	800e364 <HttpDaemon::HandleGet()+0x28>
 800e440:	4620      	mov	r0, r4
 800e442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e446:	f7ff bf39 	b.w	800e2bc <HttpDaemon::HandleGetTxt()>
 800e44a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e44e:	e78e      	b.n	800e36e <HttpDaemon::HandleGet()+0x32>
 800e450:	08015dfa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 800e454:	08015dd3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, sl, fp, ip, lr}
 800e458:	08015fe6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800e45c:	08015dd4 	stmdaeq	r1, {r2, r4, r6, r7, r8, sl, fp, ip, lr}
 800e460:	08015ddf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, sl, fp, ip, lr}
 800e464:	08016006 	stmdaeq	r1, {r1, r2, sp, lr}
 800e468:	08015de0 	stmdaeq	r1, {r5, r6, r7, r8, sl, fp, ip, lr}
 800e46c:	08015deb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, sl, fp, ip, lr}
 800e470:	08015df5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 800e474:	08016026 	stmdaeq	r1, {r1, r2, r5, sp, lr}
 800e478:	08015dec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, sl, fp, ip, lr}
 800e47c:	08016046 	stmdaeq	r1, {r1, r2, r6, sp, lr}
 800e480:	08015dfc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 800e484:	08015e01 	stmdaeq	r1, {r0, r9, sl, fp, ip, lr}
 800e488:	08015e09 	stmdaeq	r1, {r0, r3, r9, sl, fp, ip, lr}
 800e48c:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0
 800e490:	08015e10 	stmdaeq	r1, {r4, r9, sl, fp, ip, lr}
 800e494:	08015e18 	stmdaeq	r1, {r3, r4, r9, sl, fp, ip, lr}

0800e498 <HttpDaemon::HandlePost(bool)>:
 800e498:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e49a:	4604      	mov	r4, r0
 800e49c:	2900      	cmp	r1, #0
 800e49e:	f040 8091 	bne.w	800e5c4 <HttpDaemon::HandlePost(bool)+0x12c>
 800e4a2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d05d      	beq.n	800e566 <HttpDaemon::HandlePost(bool)+0xce>
 800e4aa:	6845      	ldr	r5, [r0, #4]
 800e4ac:	4948      	ldr	r1, [pc, #288]	; (800e5d0 <HttpDaemon::HandlePost(bool)+0x138>)
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f7ff fde3 	bl	800e07a <strcmp>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	bf0c      	ite	eq
 800e4b8:	2301      	moveq	r3, #1
 800e4ba:	2300      	movne	r3, #0
 800e4bc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800e4c0:	d055      	beq.n	800e56e <HttpDaemon::HandlePost(bool)+0xd6>
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	4943      	ldr	r1, [pc, #268]	; (800e5d4 <HttpDaemon::HandlePost(bool)+0x13c>)
 800e4c6:	f7ff fdd8 	bl	800e07a <strcmp>
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	d04f      	beq.n	800e56e <HttpDaemon::HandlePost(bool)+0xd6>
 800e4ce:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800e4d2:	e04a      	b.n	800e56a <HttpDaemon::HandlePost(bool)+0xd2>
 800e4d4:	4940      	ldr	r1, [pc, #256]	; (800e5d8 <HttpDaemon::HandlePost(bool)+0x140>)
 800e4d6:	68a0      	ldr	r0, [r4, #8]
 800e4d8:	f10d 0207 	add.w	r2, sp, #7
 800e4dc:	f003 ff28 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e4e0:	b9e8      	cbnz	r0, 800e51e <HttpDaemon::HandlePost(bool)+0x86>
 800e4e2:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800e4e6:	4b3d      	ldr	r3, [pc, #244]	; (800e5dc <HttpDaemon::HandlePost(bool)+0x144>)
 800e4e8:	fab6 f186 	clz	r1, r6
 800e4ec:	681d      	ldr	r5, [r3, #0]
 800e4ee:	0949      	lsrs	r1, r1, #5
 800e4f0:	69a8      	ldr	r0, [r5, #24]
 800e4f2:	b138      	cbz	r0, 800e504 <HttpDaemon::HandlePost(bool)+0x6c>
 800e4f4:	6803      	ldr	r3, [r0, #0]
 800e4f6:	7429      	strb	r1, [r5, #16]
 800e4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4fa:	4798      	blx	r3
 800e4fc:	b116      	cbz	r6, 800e504 <HttpDaemon::HandlePost(bool)+0x6c>
 800e4fe:	4b38      	ldr	r3, [pc, #224]	; (800e5e0 <HttpDaemon::HandlePost(bool)+0x148>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	606b      	str	r3, [r5, #4]
 800e504:	4620      	mov	r0, r4
 800e506:	4b37      	ldr	r3, [pc, #220]	; (800e5e4 <HttpDaemon::HandlePost(bool)+0x14c>)
 800e508:	f240 519f 	movw	r1, #1439	; 0x59f
 800e50c:	4a36      	ldr	r2, [pc, #216]	; (800e5e8 <HttpDaemon::HandlePost(bool)+0x150>)
 800e50e:	f840 3b22 	str.w	r3, [r0], #34
 800e512:	f004 feb7 	bl	8013284 <snprintf>
 800e516:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800e51a:	20c8      	movs	r0, #200	; 0xc8
 800e51c:	e025      	b.n	800e56a <HttpDaemon::HandlePost(bool)+0xd2>
 800e51e:	4933      	ldr	r1, [pc, #204]	; (800e5ec <HttpDaemon::HandlePost(bool)+0x154>)
 800e520:	68a0      	ldr	r0, [r4, #8]
 800e522:	f10d 0207 	add.w	r2, sp, #7
 800e526:	f003 ff03 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e52a:	b9e0      	cbnz	r0, 800e566 <HttpDaemon::HandlePost(bool)+0xce>
 800e52c:	4b30      	ldr	r3, [pc, #192]	; (800e5f0 <HttpDaemon::HandlePost(bool)+0x158>)
 800e52e:	6818      	ldr	r0, [r3, #0]
 800e530:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e534:	b11b      	cbz	r3, 800e53e <HttpDaemon::HandlePost(bool)+0xa6>
 800e536:	2104      	movs	r1, #4
 800e538:	f004 fa9c 	bl	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 800e53c:	e7e2      	b.n	800e504 <HttpDaemon::HandlePost(bool)+0x6c>
 800e53e:	2102      	movs	r1, #2
 800e540:	e7fa      	b.n	800e538 <HttpDaemon::HandlePost(bool)+0xa0>
 800e542:	4b2c      	ldr	r3, [pc, #176]	; (800e5f4 <HttpDaemon::HandlePost(bool)+0x15c>)
 800e544:	2001      	movs	r0, #1
 800e546:	781d      	ldrb	r5, [r3, #0]
 800e548:	f7ff fdbe 	bl	800e0c8 <PropertiesConfig::EnableJSON(bool)>
 800e54c:	4b2a      	ldr	r3, [pc, #168]	; (800e5f8 <HttpDaemon::HandlePost(bool)+0x160>)
 800e54e:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 800e552:	6818      	ldr	r0, [r3, #0]
 800e554:	68a1      	ldr	r1, [r4, #8]
 800e556:	f005 0501 	and.w	r5, r5, #1
 800e55a:	f7ff fa0b 	bl	800d974 <RemoteConfig::HandleSet(void*, unsigned int)>
 800e55e:	4628      	mov	r0, r5
 800e560:	f7ff fdb2 	bl	800e0c8 <PropertiesConfig::EnableJSON(bool)>
 800e564:	e7ce      	b.n	800e504 <HttpDaemon::HandlePost(bool)+0x6c>
 800e566:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e56a:	b002      	add	sp, #8
 800e56c:	bd70      	pop	{r4, r5, r6, pc}
 800e56e:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 800e572:	6962      	ldr	r2, [r4, #20]
 800e574:	429a      	cmp	r2, r3
 800e576:	dbd0      	blt.n	800e51a <HttpDaemon::HandlePost(bool)+0x82>
 800e578:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d0cc      	beq.n	800e51a <HttpDaemon::HandlePost(bool)+0x82>
 800e580:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800e584:	2b00      	cmp	r3, #0
 800e586:	d0dc      	beq.n	800e542 <HttpDaemon::HandlePost(bool)+0xaa>
 800e588:	2201      	movs	r2, #1
 800e58a:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 800e58e:	68a0      	ldr	r0, [r4, #8]
 800e590:	f003 fc76 	bl	8011e80 <properties::convert_json_file(char*, unsigned short, bool)>
 800e594:	2800      	cmp	r0, #0
 800e596:	dde6      	ble.n	800e566 <HttpDaemon::HandlePost(bool)+0xce>
 800e598:	4918      	ldr	r1, [pc, #96]	; (800e5fc <HttpDaemon::HandlePost(bool)+0x164>)
 800e59a:	68a0      	ldr	r0, [r4, #8]
 800e59c:	f10d 0207 	add.w	r2, sp, #7
 800e5a0:	f003 fec6 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	d195      	bne.n	800e4d4 <HttpDaemon::HandlePost(bool)+0x3c>
 800e5a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d0a9      	beq.n	800e504 <HttpDaemon::HandlePost(bool)+0x6c>
 800e5b0:	4b11      	ldr	r3, [pc, #68]	; (800e5f8 <HttpDaemon::HandlePost(bool)+0x160>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f893 35d6 	ldrb.w	r3, [r3, #1494]	; 0x5d6
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d0d4      	beq.n	800e566 <HttpDaemon::HandlePost(bool)+0xce>
 800e5bc:	4b10      	ldr	r3, [pc, #64]	; (800e600 <HttpDaemon::HandlePost(bool)+0x168>)
 800e5be:	6818      	ldr	r0, [r3, #0]
 800e5c0:	f004 fafe 	bl	8012bc0 <Hardware::Reboot()>
 800e5c4:	68c3      	ldr	r3, [r0, #12]
 800e5c6:	6083      	str	r3, [r0, #8]
 800e5c8:	6943      	ldr	r3, [r0, #20]
 800e5ca:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 800e5ce:	e7d7      	b.n	800e580 <HttpDaemon::HandlePost(bool)+0xe8>
 800e5d0:	08015e22 	stmdaeq	r1, {r1, r5, r9, sl, fp, ip, lr}
 800e5d4:	08015dbe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, sl, fp, ip, lr}
 800e5d8:	08015e10 	stmdaeq	r1, {r4, r9, sl, fp, ip, lr}
 800e5dc:	2000ae04 	andcs	sl, r0, r4, lsl #28
 800e5e0:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800e5e4:	08015fe6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800e5e8:	08015e3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r9, sl, fp, ip, lr}
 800e5ec:	08015e36 	stmdaeq	r1, {r1, r2, r4, r5, r9, sl, fp, ip, lr}
 800e5f0:	2000aef0 	strdcs	sl, [r0], -r0
 800e5f4:	2000ae00 	andcs	sl, r0, r0, lsl #28
 800e5f8:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0
 800e5fc:	08015e2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, fp, ip, lr}
 800e600:	2000aef4 	strdcs	sl, [r0], -r4

0800e604 <HttpDaemon::Run()>:
 800e604:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e606:	4e4a      	ldr	r6, [pc, #296]	; (800e730 <HttpDaemon::Run()+0x12c>)
 800e608:	4604      	mov	r4, r0
 800e60a:	6901      	ldr	r1, [r0, #16]
 800e60c:	f100 020c 	add.w	r2, r0, #12
 800e610:	b085      	sub	sp, #20
 800e612:	6830      	ldr	r0, [r6, #0]
 800e614:	f002 f9af 	bl	8010976 <Network::TcpRead(int, unsigned char const**)>
 800e618:	6160      	str	r0, [r4, #20]
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d061      	beq.n	800e6e2 <HttpDaemon::Run()+0xde>
 800e61e:	69a3      	ldr	r3, [r4, #24]
 800e620:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800e624:	d15f      	bne.n	800e6e6 <HttpDaemon::Run()+0xe2>
 800e626:	4620      	mov	r0, r4
 800e628:	f7ff fe10 	bl	800e24c <HttpDaemon::ParseRequest()>
 800e62c:	28c8      	cmp	r0, #200	; 0xc8
 800e62e:	61a0      	str	r0, [r4, #24]
 800e630:	d106      	bne.n	800e640 <HttpDaemon::Run()+0x3c>
 800e632:	69e3      	ldr	r3, [r4, #28]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d147      	bne.n	800e6c8 <HttpDaemon::Run()+0xc4>
 800e638:	4620      	mov	r0, r4
 800e63a:	f7ff fe7f 	bl	800e33c <HttpDaemon::HandleGet()>
 800e63e:	61a0      	str	r0, [r4, #24]
 800e640:	69a3      	ldr	r3, [r4, #24]
 800e642:	f104 0722 	add.w	r7, r4, #34	; 0x22
 800e646:	2bc8      	cmp	r3, #200	; 0xc8
 800e648:	d06f      	beq.n	800e72a <HttpDaemon::Run()+0x126>
 800e64a:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800e64e:	d062      	beq.n	800e716 <HttpDaemon::Run()+0x112>
 800e650:	dc52      	bgt.n	800e6f8 <HttpDaemon::Run()+0xf4>
 800e652:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800e656:	d060      	beq.n	800e71a <HttpDaemon::Run()+0x116>
 800e658:	f240 129d 	movw	r2, #413	; 0x19d
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d05e      	beq.n	800e71e <HttpDaemon::Run()+0x11a>
 800e660:	4d34      	ldr	r5, [pc, #208]	; (800e734 <HttpDaemon::Run()+0x130>)
 800e662:	4a35      	ldr	r2, [pc, #212]	; (800e738 <HttpDaemon::Run()+0x134>)
 800e664:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e668:	bf18      	it	ne
 800e66a:	4615      	movne	r5, r2
 800e66c:	4a33      	ldr	r2, [pc, #204]	; (800e73c <HttpDaemon::Run()+0x138>)
 800e66e:	f240 519f 	movw	r1, #1439	; 0x59f
 800e672:	6022      	str	r2, [r4, #0]
 800e674:	4638      	mov	r0, r7
 800e676:	e9cd 5500 	strd	r5, r5, [sp]
 800e67a:	4a31      	ldr	r2, [pc, #196]	; (800e740 <HttpDaemon::Run()+0x13c>)
 800e67c:	f004 fe02 	bl	8013284 <snprintf>
 800e680:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800e684:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800e688:	f240 519f 	movw	r1, #1439	; 0x59f
 800e68c:	9303      	str	r3, [sp, #12]
 800e68e:	6823      	ldr	r3, [r4, #0]
 800e690:	4a2c      	ldr	r2, [pc, #176]	; (800e744 <HttpDaemon::Run()+0x140>)
 800e692:	9302      	str	r3, [sp, #8]
 800e694:	4b2c      	ldr	r3, [pc, #176]	; (800e748 <HttpDaemon::Run()+0x144>)
 800e696:	68e0      	ldr	r0, [r4, #12]
 800e698:	e9cd 5300 	strd	r5, r3, [sp]
 800e69c:	69a3      	ldr	r3, [r4, #24]
 800e69e:	f004 fdf1 	bl	8013284 <snprintf>
 800e6a2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800e6a6:	b283      	uxth	r3, r0
 800e6a8:	6830      	ldr	r0, [r6, #0]
 800e6aa:	f002 f968 	bl	801097e <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800e6ae:	463a      	mov	r2, r7
 800e6b0:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800e6b4:	6921      	ldr	r1, [r4, #16]
 800e6b6:	6830      	ldr	r0, [r6, #0]
 800e6b8:	f002 f961 	bl	801097e <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800e6bc:	f44f 7202 	mov.w	r2, #520	; 0x208
 800e6c0:	2302      	movs	r3, #2
 800e6c2:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800e6c6:	e00c      	b.n	800e6e2 <HttpDaemon::Run()+0xde>
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d1b9      	bne.n	800e640 <HttpDaemon::Run()+0x3c>
 800e6cc:	2100      	movs	r1, #0
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f7ff fee2 	bl	800e498 <HttpDaemon::HandlePost(bool)>
 800e6d4:	28c8      	cmp	r0, #200	; 0xc8
 800e6d6:	61a0      	str	r0, [r4, #24]
 800e6d8:	d1b2      	bne.n	800e640 <HttpDaemon::Run()+0x3c>
 800e6da:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d1ae      	bne.n	800e640 <HttpDaemon::Run()+0x3c>
 800e6e2:	b005      	add	sp, #20
 800e6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6e6:	2bc8      	cmp	r3, #200	; 0xc8
 800e6e8:	d1aa      	bne.n	800e640 <HttpDaemon::Run()+0x3c>
 800e6ea:	69e1      	ldr	r1, [r4, #28]
 800e6ec:	2901      	cmp	r1, #1
 800e6ee:	d1a7      	bne.n	800e640 <HttpDaemon::Run()+0x3c>
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	f7ff fed1 	bl	800e498 <HttpDaemon::HandlePost(bool)>
 800e6f6:	e7a2      	b.n	800e63e <HttpDaemon::Run()+0x3a>
 800e6f8:	f240 12f5 	movw	r2, #501	; 0x1f5
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	d010      	beq.n	800e722 <HttpDaemon::Run()+0x11e>
 800e700:	f240 12f9 	movw	r2, #505	; 0x1f9
 800e704:	4293      	cmp	r3, r2
 800e706:	d00e      	beq.n	800e726 <HttpDaemon::Run()+0x122>
 800e708:	4d10      	ldr	r5, [pc, #64]	; (800e74c <HttpDaemon::Run()+0x148>)
 800e70a:	4a0b      	ldr	r2, [pc, #44]	; (800e738 <HttpDaemon::Run()+0x134>)
 800e70c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e710:	bf18      	it	ne
 800e712:	4615      	movne	r5, r2
 800e714:	e7aa      	b.n	800e66c <HttpDaemon::Run()+0x68>
 800e716:	4d0e      	ldr	r5, [pc, #56]	; (800e750 <HttpDaemon::Run()+0x14c>)
 800e718:	e7a8      	b.n	800e66c <HttpDaemon::Run()+0x68>
 800e71a:	4d0e      	ldr	r5, [pc, #56]	; (800e754 <HttpDaemon::Run()+0x150>)
 800e71c:	e7a6      	b.n	800e66c <HttpDaemon::Run()+0x68>
 800e71e:	4d0e      	ldr	r5, [pc, #56]	; (800e758 <HttpDaemon::Run()+0x154>)
 800e720:	e7a4      	b.n	800e66c <HttpDaemon::Run()+0x68>
 800e722:	4d0e      	ldr	r5, [pc, #56]	; (800e75c <HttpDaemon::Run()+0x158>)
 800e724:	e7a2      	b.n	800e66c <HttpDaemon::Run()+0x68>
 800e726:	4d0e      	ldr	r5, [pc, #56]	; (800e760 <HttpDaemon::Run()+0x15c>)
 800e728:	e7a0      	b.n	800e66c <HttpDaemon::Run()+0x68>
 800e72a:	4d0e      	ldr	r5, [pc, #56]	; (800e764 <HttpDaemon::Run()+0x160>)
 800e72c:	e7aa      	b.n	800e684 <HttpDaemon::Run()+0x80>
 800e72e:	bf00      	nop
 800e730:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800e734:	08015f00 	stmdaeq	r1, {r8, r9, sl, fp, ip, lr}
 800e738:	08015f0c 	stmdaeq	r1, {r2, r3, r8, r9, sl, fp, ip, lr}
 800e73c:	08015fe6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800e740:	08015f33 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, sl, fp, ip, lr}
 800e744:	08015f8e 	stmdaeq	r1, {r1, r2, r3, r7, r8, r9, sl, fp, ip, lr}
 800e748:	080153e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, ip, lr}
 800e74c:	08015f1a 	stmdaeq	r1, {r1, r3, r4, r8, r9, sl, fp, ip, lr}
 800e750:	08015ebe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r9, sl, fp, ip, lr}
 800e754:	08015eb4 	stmdaeq	r1, {r2, r4, r5, r7, r9, sl, fp, ip, lr}
 800e758:	08015e9b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, sl, fp, ip, lr}
 800e75c:	08015ee9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl, fp, ip, lr}
 800e760:	08015ed3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r9, sl, fp, ip, lr}
 800e764:	08015f30 	stmdaeq	r1, {r4, r5, r8, r9, sl, fp, ip, lr}

0800e768 <remoteconfig::json_get_list(char*, unsigned short)>:
 800e768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e76c:	4b14      	ldr	r3, [pc, #80]	; (800e7c0 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800e76e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800e7c4 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	b088      	sub	sp, #32
 800e776:	4605      	mov	r5, r0
 800e778:	f8d8 0000 	ldr.w	r0, [r8]
 800e77c:	691c      	ldr	r4, [r3, #16]
 800e77e:	460e      	mov	r6, r1
 800e780:	f7fe ffd4 	bl	800d72c <RemoteConfig::GetStringNode() const>
 800e784:	4607      	mov	r7, r0
 800e786:	f8d8 0000 	ldr.w	r0, [r8]
 800e78a:	f7fe ffdb 	bl	800d744 <RemoteConfig::GetStringOutput() const>
 800e78e:	4b0e      	ldr	r3, [pc, #56]	; (800e7c8 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 800e790:	4631      	mov	r1, r6
 800e792:	7a1a      	ldrb	r2, [r3, #8]
 800e794:	3309      	adds	r3, #9
 800e796:	9303      	str	r3, [sp, #12]
 800e798:	0e23      	lsrs	r3, r4, #24
 800e79a:	9302      	str	r3, [sp, #8]
 800e79c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800e7a0:	9301      	str	r3, [sp, #4]
 800e7a2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800e7a6:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800e7aa:	9300      	str	r3, [sp, #0]
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	4a07      	ldr	r2, [pc, #28]	; (800e7cc <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 800e7b0:	9704      	str	r7, [sp, #16]
 800e7b2:	b2e3      	uxtb	r3, r4
 800e7b4:	f004 fd66 	bl	8013284 <snprintf>
 800e7b8:	b280      	uxth	r0, r0
 800e7ba:	b008      	add	sp, #32
 800e7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c0:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800e7c4:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0
 800e7c8:	20001e8c 	andcs	r1, r0, ip, lsl #29
 800e7cc:	080160c0 	stmdaeq	r1, {r6, r7, sp, lr}

0800e7d0 <remoteconfig::json_get_version(char*, unsigned short)>:
 800e7d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e7d2:	2208      	movs	r2, #8
 800e7d4:	4b09      	ldr	r3, [pc, #36]	; (800e7fc <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800e7d6:	9204      	str	r2, [sp, #16]
 800e7d8:	f1a3 020b 	sub.w	r2, r3, #11
 800e7dc:	9203      	str	r2, [sp, #12]
 800e7de:	220b      	movs	r2, #11
 800e7e0:	9202      	str	r2, [sp, #8]
 800e7e2:	4a07      	ldr	r2, [pc, #28]	; (800e800 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800e7e4:	9305      	str	r3, [sp, #20]
 800e7e6:	3b0e      	subs	r3, #14
 800e7e8:	9201      	str	r2, [sp, #4]
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	4a05      	ldr	r2, [pc, #20]	; (800e804 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	f004 fd48 	bl	8013284 <snprintf>
 800e7f4:	b280      	uxth	r0, r0
 800e7f6:	b007      	add	sp, #28
 800e7f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7fc:	2000aea2 	andcs	sl, r0, r2, lsr #29
 800e800:	080153e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, ip, lr}
 800e804:	0801611f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, sp, lr}

0800e808 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800e808:	b508      	push	{r3, lr}
 800e80a:	4b05      	ldr	r3, [pc, #20]	; (800e820 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e812:	fbb2 f3f3 	udiv	r3, r2, r3
 800e816:	4a03      	ldr	r2, [pc, #12]	; (800e824 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800e818:	f004 fd34 	bl	8013284 <snprintf>
 800e81c:	b280      	uxth	r0, r0
 800e81e:	bd08      	pop	{r3, pc}
 800e820:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800e824:	08016165 	stmdaeq	r1, {r0, r2, r5, r6, r8, sp, lr}

0800e828 <remoteconfig::json_get_display(char*, unsigned short)>:
 800e828:	b508      	push	{r3, lr}
 800e82a:	4b05      	ldr	r3, [pc, #20]	; (800e840 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800e82c:	4a05      	ldr	r2, [pc, #20]	; (800e844 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	7c1b      	ldrb	r3, [r3, #16]
 800e832:	f083 0301 	eor.w	r3, r3, #1
 800e836:	f004 fd25 	bl	8013284 <snprintf>
 800e83a:	b280      	uxth	r0, r0
 800e83c:	bd08      	pop	{r3, pc}
 800e83e:	bf00      	nop
 800e840:	2000ae04 	andcs	sl, r0, r4, lsl #28
 800e844:	08016174 	stmdaeq	r1, {r2, r4, r5, r6, r8, sp, lr}

0800e848 <remoteconfig::json_get_directory(char*, unsigned short)>:
 800e848:	b508      	push	{r3, lr}
 800e84a:	4a02      	ldr	r2, [pc, #8]	; (800e854 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800e84c:	f004 fd1a 	bl	8013284 <snprintf>
 800e850:	b280      	uxth	r0, r0
 800e852:	bd08      	pop	{r3, pc}
 800e854:	08016183 	stmdaeq	r1, {r0, r1, r7, r8, sp, lr}

0800e858 <get_file_content(char const*, char*)>:
 800e858:	2300      	movs	r3, #0
 800e85a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e85c:	4a18      	ldr	r2, [pc, #96]	; (800e8c0 <get_file_content(char const*, char*)+0x68>)
 800e85e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800e862:	1e46      	subs	r6, r0, #1
 800e864:	1e6f      	subs	r7, r5, #1
 800e866:	f816 cf01 	ldrb.w	ip, [r6, #1]!
 800e86a:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 800e86e:	4564      	cmp	r4, ip
 800e870:	d119      	bne.n	800e8a6 <get_file_content(char const*, char*)+0x4e>
 800e872:	2c00      	cmp	r4, #0
 800e874:	d1f7      	bne.n	800e866 <get_file_content(char const*, char*)+0xe>
 800e876:	460c      	mov	r4, r1
 800e878:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	3b01      	subs	r3, #1
 800e880:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e884:	f804 2b01 	strb.w	r2, [r4], #1
 800e888:	2a00      	cmp	r2, #0
 800e88a:	d1f9      	bne.n	800e880 <get_file_content(char const*, char*)+0x28>
 800e88c:	1a64      	subs	r4, r4, r1
 800e88e:	3c01      	subs	r4, #1
 800e890:	232e      	movs	r3, #46	; 0x2e
 800e892:	e9cd 5400 	strd	r5, r4, [sp]
 800e896:	4a0b      	ldr	r2, [pc, #44]	; (800e8c4 <get_file_content(char const*, char*)+0x6c>)
 800e898:	490b      	ldr	r1, [pc, #44]	; (800e8c8 <get_file_content(char const*, char*)+0x70>)
 800e89a:	480c      	ldr	r0, [pc, #48]	; (800e8cc <get_file_content(char const*, char*)+0x74>)
 800e89c:	f004 fcca 	bl	8013234 <printf>
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	b003      	add	sp, #12
 800e8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	2b03      	cmp	r3, #3
 800e8aa:	d1d8      	bne.n	800e85e <get_file_content(char const*, char*)+0x6>
 800e8ac:	2333      	movs	r3, #51	; 0x33
 800e8ae:	4a06      	ldr	r2, [pc, #24]	; (800e8c8 <get_file_content(char const*, char*)+0x70>)
 800e8b0:	4904      	ldr	r1, [pc, #16]	; (800e8c4 <get_file_content(char const*, char*)+0x6c>)
 800e8b2:	4807      	ldr	r0, [pc, #28]	; (800e8d0 <get_file_content(char const*, char*)+0x78>)
 800e8b4:	f004 fcbe 	bl	8013234 <printf>
 800e8b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e8bc:	e7f0      	b.n	800e8a0 <get_file_content(char const*, char*)+0x48>
 800e8be:	bf00      	nop
 800e8c0:	08016520 	stmdaeq	r1, {r5, r8, sl, sp, lr}
 800e8c4:	0801621b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sp, lr}
 800e8c8:	0801623a 	stmdaeq	r1, {r1, r3, r4, r5, r9, sp, lr}
 800e8cc:	0801624b 	stmdaeq	r1, {r0, r1, r3, r6, r9, sp, lr}
 800e8d0:	08016267 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, sp, lr}

0800e8d4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	2020      	movs	r0, #32
 800e8d8:	b510      	push	{r4, lr}
 800e8da:	4a04      	ldr	r2, [pc, #16]	; (800e8ec <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800e8dc:	428b      	cmp	r3, r1
 800e8de:	d004      	beq.n	800e8ea <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x16>
 800e8e0:	f852 4b04 	ldr.w	r4, [r2], #4
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	4420      	add	r0, r4
 800e8e8:	e7f8      	b.n	800e8dc <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800e8ea:	bd10      	pop	{r4, pc}
 800e8ec:	08016a64 	stmdaeq	r1, {r2, r5, r6, r9, fp, sp, lr}

0800e8f0 <SpiFlashStore::Init()>:
 800e8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f4:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800ea18 <SpiFlashStore::Init()+0x128>
 800e8f8:	4607      	mov	r7, r0
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	f8d8 0000 	ldr.w	r0, [r8]
 800e900:	f000 fc70 	bl	800f1e4 <FlashRom::GetSectorSize() const>
 800e904:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e908:	4605      	mov	r5, r0
 800e90a:	f040 8083 	bne.w	800ea14 <SpiFlashStore::Init()+0x124>
 800e90e:	f8d8 0000 	ldr.w	r0, [r8]
 800e912:	f000 fc5f 	bl	800f1d4 <FlashRom::GetSize() const>
 800e916:	4b41      	ldr	r3, [pc, #260]	; (800ea1c <SpiFlashStore::Init()+0x12c>)
 800e918:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800e91c:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800e920:	6019      	str	r1, [r3, #0]
 800e922:	2e00      	cmp	r6, #0
 800e924:	d176      	bne.n	800ea14 <SpiFlashStore::Init()+0x124>
 800e926:	4c3e      	ldr	r4, [pc, #248]	; (800ea20 <SpiFlashStore::Init()+0x130>)
 800e928:	ab03      	add	r3, sp, #12
 800e92a:	9300      	str	r3, [sp, #0]
 800e92c:	462a      	mov	r2, r5
 800e92e:	4623      	mov	r3, r4
 800e930:	f8d8 0000 	ldr.w	r0, [r8]
 800e934:	f000 fc59 	bl	800f1ea <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800e938:	7823      	ldrb	r3, [r4, #0]
 800e93a:	2b41      	cmp	r3, #65	; 0x41
 800e93c:	bf1c      	itt	ne
 800e93e:	2341      	movne	r3, #65	; 0x41
 800e940:	7023      	strbne	r3, [r4, #0]
 800e942:	7863      	ldrb	r3, [r4, #1]
 800e944:	bf14      	ite	ne
 800e946:	4635      	movne	r5, r6
 800e948:	2501      	moveq	r5, #1
 800e94a:	2b76      	cmp	r3, #118	; 0x76
 800e94c:	bf1c      	itt	ne
 800e94e:	2376      	movne	r3, #118	; 0x76
 800e950:	7063      	strbne	r3, [r4, #1]
 800e952:	78a3      	ldrb	r3, [r4, #2]
 800e954:	bf18      	it	ne
 800e956:	2500      	movne	r5, #0
 800e958:	2b56      	cmp	r3, #86	; 0x56
 800e95a:	bf1c      	itt	ne
 800e95c:	2356      	movne	r3, #86	; 0x56
 800e95e:	70a3      	strbne	r3, [r4, #2]
 800e960:	78e3      	ldrb	r3, [r4, #3]
 800e962:	bf18      	it	ne
 800e964:	2500      	movne	r5, #0
 800e966:	2b10      	cmp	r3, #16
 800e968:	d01c      	beq.n	800e9a4 <SpiFlashStore::Init()+0xb4>
 800e96a:	2310      	movs	r3, #16
 800e96c:	70e3      	strb	r3, [r4, #3]
 800e96e:	2201      	movs	r2, #1
 800e970:	2500      	movs	r5, #0
 800e972:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800e976:	4b2b      	ldr	r3, [pc, #172]	; (800ea24 <SpiFlashStore::Init()+0x134>)
 800e978:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800ea28 <SpiFlashStore::Init()+0x138>
 800e97c:	701a      	strb	r2, [r3, #0]
 800e97e:	4631      	mov	r1, r6
 800e980:	4638      	mov	r0, r7
 800e982:	f7ff ffa7 	bl	800e8d4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e986:	1823      	adds	r3, r4, r0
 800e988:	5425      	strb	r5, [r4, r0]
 800e98a:	705d      	strb	r5, [r3, #1]
 800e98c:	709d      	strb	r5, [r3, #2]
 800e98e:	70dd      	strb	r5, [r3, #3]
 800e990:	f858 3b04 	ldr.w	r3, [r8], #4
 800e994:	1d02      	adds	r2, r0, #4
 800e996:	4403      	add	r3, r0
 800e998:	4293      	cmp	r3, r2
 800e99a:	d931      	bls.n	800ea00 <SpiFlashStore::Init()+0x110>
 800e99c:	f804 9002 	strb.w	r9, [r4, r2]
 800e9a0:	3201      	adds	r2, #1
 800e9a2:	e7f9      	b.n	800e998 <SpiFlashStore::Init()+0xa8>
 800e9a4:	2d00      	cmp	r5, #0
 800e9a6:	d0e2      	beq.n	800e96e <SpiFlashStore::Init()+0x7e>
 800e9a8:	f04f 0900 	mov.w	r9, #0
 800e9ac:	46c8      	mov	r8, r9
 800e9ae:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800ea2c <SpiFlashStore::Init()+0x13c>
 800e9b2:	f8da b000 	ldr.w	fp, [sl]
 800e9b6:	4631      	mov	r1, r6
 800e9b8:	4638      	mov	r0, r7
 800e9ba:	f7ff ff8b 	bl	800e8d4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e9be:	5c23      	ldrb	r3, [r4, r0]
 800e9c0:	2bff      	cmp	r3, #255	; 0xff
 800e9c2:	d114      	bne.n	800e9ee <SpiFlashStore::Init()+0xfe>
 800e9c4:	1823      	adds	r3, r4, r0
 800e9c6:	785a      	ldrb	r2, [r3, #1]
 800e9c8:	2aff      	cmp	r2, #255	; 0xff
 800e9ca:	d110      	bne.n	800e9ee <SpiFlashStore::Init()+0xfe>
 800e9cc:	789a      	ldrb	r2, [r3, #2]
 800e9ce:	2aff      	cmp	r2, #255	; 0xff
 800e9d0:	d10d      	bne.n	800e9ee <SpiFlashStore::Init()+0xfe>
 800e9d2:	78da      	ldrb	r2, [r3, #3]
 800e9d4:	2aff      	cmp	r2, #255	; 0xff
 800e9d6:	d10a      	bne.n	800e9ee <SpiFlashStore::Init()+0xfe>
 800e9d8:	46a9      	mov	r9, r5
 800e9da:	f04f 0b01 	mov.w	fp, #1
 800e9de:	f804 8000 	strb.w	r8, [r4, r0]
 800e9e2:	f883 8001 	strb.w	r8, [r3, #1]
 800e9e6:	f883 8002 	strb.w	r8, [r3, #2]
 800e9ea:	f883 8003 	strb.w	r8, [r3, #3]
 800e9ee:	3601      	adds	r6, #1
 800e9f0:	2e1c      	cmp	r6, #28
 800e9f2:	d1e0      	bne.n	800e9b6 <SpiFlashStore::Init()+0xc6>
 800e9f4:	f1b9 0f00 	cmp.w	r9, #0
 800e9f8:	d008      	beq.n	800ea0c <SpiFlashStore::Init()+0x11c>
 800e9fa:	f8ca b000 	str.w	fp, [sl]
 800e9fe:	e005      	b.n	800ea0c <SpiFlashStore::Init()+0x11c>
 800ea00:	3601      	adds	r6, #1
 800ea02:	2e1c      	cmp	r6, #28
 800ea04:	d1bb      	bne.n	800e97e <SpiFlashStore::Init()+0x8e>
 800ea06:	2501      	movs	r5, #1
 800ea08:	4b08      	ldr	r3, [pc, #32]	; (800ea2c <SpiFlashStore::Init()+0x13c>)
 800ea0a:	601d      	str	r5, [r3, #0]
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	b005      	add	sp, #20
 800ea10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea14:	2500      	movs	r5, #0
 800ea16:	e7f9      	b.n	800ea0c <SpiFlashStore::Init()+0x11c>
 800ea18:	20002ee8 	andcs	r2, r0, r8, ror #29
 800ea1c:	20002eb8 			; <UNDEFINED> instruction: 0x20002eb8
 800ea20:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
 800ea24:	20002ecc 	andcs	r2, r0, ip, asr #29
 800ea28:	08016a64 	stmdaeq	r1, {r2, r5, r6, r9, fp, sp, lr}
 800ea2c:	20002ec4 	andcs	r2, r0, r4, asr #29

0800ea30 <SpiFlashStore::SpiFlashStore()>:
 800ea30:	b538      	push	{r3, r4, r5, lr}
 800ea32:	4b0d      	ldr	r3, [pc, #52]	; (800ea68 <SpiFlashStore::SpiFlashStore()+0x38>)
 800ea34:	4604      	mov	r4, r0
 800ea36:	6018      	str	r0, [r3, #0]
 800ea38:	4b0c      	ldr	r3, [pc, #48]	; (800ea6c <SpiFlashStore::SpiFlashStore()+0x3c>)
 800ea3a:	4d0d      	ldr	r5, [pc, #52]	; (800ea70 <SpiFlashStore::SpiFlashStore()+0x40>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	b113      	cbz	r3, 800ea48 <SpiFlashStore::SpiFlashStore()+0x18>
 800ea42:	f7ff ff55 	bl	800e8f0 <SpiFlashStore::Init()>
 800ea46:	7028      	strb	r0, [r5, #0]
 800ea48:	782b      	ldrb	r3, [r5, #0]
 800ea4a:	b153      	cbz	r3, 800ea62 <SpiFlashStore::SpiFlashStore()+0x32>
 800ea4c:	2320      	movs	r3, #32
 800ea4e:	2200      	movs	r2, #0
 800ea50:	4908      	ldr	r1, [pc, #32]	; (800ea74 <SpiFlashStore::SpiFlashStore()+0x44>)
 800ea52:	f851 0b04 	ldr.w	r0, [r1], #4
 800ea56:	3201      	adds	r2, #1
 800ea58:	2a1c      	cmp	r2, #28
 800ea5a:	4403      	add	r3, r0
 800ea5c:	d1f9      	bne.n	800ea52 <SpiFlashStore::SpiFlashStore()+0x22>
 800ea5e:	4a06      	ldr	r2, [pc, #24]	; (800ea78 <SpiFlashStore::SpiFlashStore()+0x48>)
 800ea60:	6013      	str	r3, [r2, #0]
 800ea62:	4620      	mov	r0, r4
 800ea64:	bd38      	pop	{r3, r4, r5, pc}
 800ea66:	bf00      	nop
 800ea68:	20002ec8 	andcs	r2, r0, r8, asr #29
 800ea6c:	20002ee8 	andcs	r2, r0, r8, ror #29
 800ea70:	20002ebc 			; <UNDEFINED> instruction: 0x20002ebc
 800ea74:	08016a64 	stmdaeq	r1, {r2, r5, r6, r9, fp, sp, lr}
 800ea78:	20002ec0 	andcs	r2, r0, r0, asr #29

0800ea7c <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800ea7c:	b508      	push	{r3, lr}
 800ea7e:	f7ff ff29 	bl	800e8d4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800ea82:	2300      	movs	r3, #0
 800ea84:	4904      	ldr	r1, [pc, #16]	; (800ea98 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800ea86:	1842      	adds	r2, r0, r1
 800ea88:	540b      	strb	r3, [r1, r0]
 800ea8a:	7053      	strb	r3, [r2, #1]
 800ea8c:	7093      	strb	r3, [r2, #2]
 800ea8e:	70d3      	strb	r3, [r2, #3]
 800ea90:	2201      	movs	r2, #1
 800ea92:	4b02      	ldr	r3, [pc, #8]	; (800ea9c <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800ea94:	601a      	str	r2, [r3, #0]
 800ea96:	bd08      	pop	{r3, pc}
 800ea98:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
 800ea9c:	20002ec4 	andcs	r2, r0, r4, asr #29

0800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800eaa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa4:	461c      	mov	r4, r3
 800eaa6:	4b19      	ldr	r3, [pc, #100]	; (800eb0c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800eaa8:	4615      	mov	r5, r2
 800eaaa:	781f      	ldrb	r7, [r3, #0]
 800eaac:	9e07      	ldr	r6, [sp, #28]
 800eaae:	b35f      	cbz	r7, 800eb08 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800eab0:	f7ff ff10 	bl	800e8d4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800eab4:	f04f 0c00 	mov.w	ip, #0
 800eab8:	4a15      	ldr	r2, [pc, #84]	; (800eb10 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800eaba:	1941      	adds	r1, r0, r5
 800eabc:	1e63      	subs	r3, r4, #1
 800eabe:	9c06      	ldr	r4, [sp, #24]
 800eac0:	4411      	add	r1, r2
 800eac2:	440c      	add	r4, r1
 800eac4:	42a1      	cmp	r1, r4
 800eac6:	d00a      	beq.n	800eade <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3e>
 800eac8:	f891 8000 	ldrb.w	r8, [r1]
 800eacc:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800ead0:	3101      	adds	r1, #1
 800ead2:	45f0      	cmp	r8, lr
 800ead4:	bf1c      	itt	ne
 800ead6:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800eada:	46bc      	movne	ip, r7
 800eadc:	e7f2      	b.n	800eac4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800eade:	f1bc 0f00 	cmp.w	ip, #0
 800eae2:	d011      	beq.n	800eb08 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800eae4:	4b0b      	ldr	r3, [pc, #44]	; (800eb14 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800eae6:	6819      	ldr	r1, [r3, #0]
 800eae8:	b109      	cbz	r1, 800eaee <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x4e>
 800eaea:	2906      	cmp	r1, #6
 800eaec:	d101      	bne.n	800eaf2 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800eaee:	2101      	movs	r1, #1
 800eaf0:	6019      	str	r1, [r3, #0]
 800eaf2:	4b09      	ldr	r3, [pc, #36]	; (800eb18 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800eaf4:	6819      	ldr	r1, [r3, #0]
 800eaf6:	4b09      	ldr	r3, [pc, #36]	; (800eb1c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800eaf8:	6019      	str	r1, [r3, #0]
 800eafa:	b12d      	cbz	r5, 800eb08 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800eafc:	b126      	cbz	r6, 800eb08 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800eafe:	9b08      	ldr	r3, [sp, #32]
 800eb00:	4418      	add	r0, r3
 800eb02:	5813      	ldr	r3, [r2, r0]
 800eb04:	4333      	orrs	r3, r6
 800eb06:	5013      	str	r3, [r2, r0]
 800eb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb0c:	20002ebc 			; <UNDEFINED> instruction: 0x20002ebc
 800eb10:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
 800eb14:	20002ec4 	andcs	r2, r0, r4, asr #29
 800eb18:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800eb1c:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4

0800eb20 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 800eb20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb24:	461d      	mov	r5, r3
 800eb26:	4b15      	ldr	r3, [pc, #84]	; (800eb7c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x5c>)
 800eb28:	b085      	sub	sp, #20
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	4607      	mov	r7, r0
 800eb2e:	4688      	mov	r8, r1
 800eb30:	4614      	mov	r4, r2
 800eb32:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800eb36:	b1eb      	cbz	r3, 800eb74 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 800eb38:	f7ff fecc 	bl	800e8d4 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800eb3c:	4910      	ldr	r1, [pc, #64]	; (800eb80 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x60>)
 800eb3e:	4a11      	ldr	r2, [pc, #68]	; (800eb84 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x64>)
 800eb40:	7809      	ldrb	r1, [r1, #0]
 800eb42:	eb00 0309 	add.w	r3, r0, r9
 800eb46:	189e      	adds	r6, r3, r2
 800eb48:	b951      	cbnz	r1, 800eb60 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 800eb4a:	589b      	ldr	r3, [r3, r2]
 800eb4c:	b143      	cbz	r3, 800eb60 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 800eb4e:	3c01      	subs	r4, #1
 800eb50:	4435      	add	r5, r6
 800eb52:	42b5      	cmp	r5, r6
 800eb54:	d00e      	beq.n	800eb74 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 800eb56:	f816 3b01 	ldrb.w	r3, [r6], #1
 800eb5a:	f804 3f01 	strb.w	r3, [r4, #1]!
 800eb5e:	e7f8      	b.n	800eb52 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x32>
 800eb60:	2300      	movs	r3, #0
 800eb62:	464a      	mov	r2, r9
 800eb64:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800eb68:	4641      	mov	r1, r8
 800eb6a:	4623      	mov	r3, r4
 800eb6c:	4638      	mov	r0, r7
 800eb6e:	9500      	str	r5, [sp, #0]
 800eb70:	f7ff ff96 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eb74:	b005      	add	sp, #20
 800eb76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb7a:	bf00      	nop
 800eb7c:	20002ebc 			; <UNDEFINED> instruction: 0x20002ebc
 800eb80:	20002ecc 	andcs	r2, r0, ip, asr #29
 800eb84:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8

0800eb88 <SpiFlashStore::Flash()>:
 800eb88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb8a:	4c25      	ldr	r4, [pc, #148]	; (800ec20 <SpiFlashStore::Flash()+0x98>)
 800eb8c:	6820      	ldr	r0, [r4, #0]
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d043      	beq.n	800ec1a <SpiFlashStore::Flash()+0x92>
 800eb92:	3801      	subs	r0, #1
 800eb94:	2805      	cmp	r0, #5
 800eb96:	d831      	bhi.n	800ebfc <SpiFlashStore::Flash()+0x74>
 800eb98:	e8df f000 	tbb	[pc, r0]
 800eb9c:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800eba0:	4b203025 	blmi	881ac3c <__exidx_end+0x8036fc>
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	4b20      	ldr	r3, [pc, #128]	; (800ec28 <SpiFlashStore::Flash()+0xa0>)
 800eba8:	601a      	str	r2, [r3, #0]
 800ebaa:	2302      	movs	r3, #2
 800ebac:	6023      	str	r3, [r4, #0]
 800ebae:	2001      	movs	r0, #1
 800ebb0:	e033      	b.n	800ec1a <SpiFlashStore::Flash()+0x92>
 800ebb2:	4b1c      	ldr	r3, [pc, #112]	; (800ec24 <SpiFlashStore::Flash()+0x9c>)
 800ebb4:	4a1c      	ldr	r2, [pc, #112]	; (800ec28 <SpiFlashStore::Flash()+0xa0>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	6812      	ldr	r2, [r2, #0]
 800ebba:	1a9b      	subs	r3, r3, r2
 800ebbc:	2b63      	cmp	r3, #99	; 0x63
 800ebbe:	d9f6      	bls.n	800ebae <SpiFlashStore::Flash()+0x26>
 800ebc0:	2303      	movs	r3, #3
 800ebc2:	e7f3      	b.n	800ebac <SpiFlashStore::Flash()+0x24>
 800ebc4:	4919      	ldr	r1, [pc, #100]	; (800ec2c <SpiFlashStore::Flash()+0xa4>)
 800ebc6:	481a      	ldr	r0, [pc, #104]	; (800ec30 <SpiFlashStore::Flash()+0xa8>)
 800ebc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ebcc:	6809      	ldr	r1, [r1, #0]
 800ebce:	6800      	ldr	r0, [r0, #0]
 800ebd0:	ab03      	add	r3, sp, #12
 800ebd2:	f000 fb19 	bl	800f208 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	d0e9      	beq.n	800ebae <SpiFlashStore::Flash()+0x26>
 800ebda:	4b12      	ldr	r3, [pc, #72]	; (800ec24 <SpiFlashStore::Flash()+0x9c>)
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	4b12      	ldr	r3, [pc, #72]	; (800ec28 <SpiFlashStore::Flash()+0xa0>)
 800ebe0:	601a      	str	r2, [r3, #0]
 800ebe2:	2305      	movs	r3, #5
 800ebe4:	e7e2      	b.n	800ebac <SpiFlashStore::Flash()+0x24>
 800ebe6:	4b0f      	ldr	r3, [pc, #60]	; (800ec24 <SpiFlashStore::Flash()+0x9c>)
 800ebe8:	4a0f      	ldr	r2, [pc, #60]	; (800ec28 <SpiFlashStore::Flash()+0xa0>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	6812      	ldr	r2, [r2, #0]
 800ebee:	1a9b      	subs	r3, r3, r2
 800ebf0:	2b63      	cmp	r3, #99	; 0x63
 800ebf2:	d9dc      	bls.n	800ebae <SpiFlashStore::Flash()+0x26>
 800ebf4:	2304      	movs	r3, #4
 800ebf6:	e7d9      	b.n	800ebac <SpiFlashStore::Flash()+0x24>
 800ebf8:	2306      	movs	r3, #6
 800ebfa:	e7d7      	b.n	800ebac <SpiFlashStore::Flash()+0x24>
 800ebfc:	ab03      	add	r3, sp, #12
 800ebfe:	4a0d      	ldr	r2, [pc, #52]	; (800ec34 <SpiFlashStore::Flash()+0xac>)
 800ec00:	490a      	ldr	r1, [pc, #40]	; (800ec2c <SpiFlashStore::Flash()+0xa4>)
 800ec02:	480b      	ldr	r0, [pc, #44]	; (800ec30 <SpiFlashStore::Flash()+0xa8>)
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	6812      	ldr	r2, [r2, #0]
 800ec08:	4b0b      	ldr	r3, [pc, #44]	; (800ec38 <SpiFlashStore::Flash()+0xb0>)
 800ec0a:	6809      	ldr	r1, [r1, #0]
 800ec0c:	6800      	ldr	r0, [r0, #0]
 800ec0e:	f000 fb9b 	bl	800f348 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d0cb      	beq.n	800ebae <SpiFlashStore::Flash()+0x26>
 800ec16:	2000      	movs	r0, #0
 800ec18:	6020      	str	r0, [r4, #0]
 800ec1a:	b004      	add	sp, #16
 800ec1c:	bd10      	pop	{r4, pc}
 800ec1e:	bf00      	nop
 800ec20:	20002ec4 	andcs	r2, r0, r4, asr #29
 800ec24:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800ec28:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4
 800ec2c:	20002eb8 			; <UNDEFINED> instruction: 0x20002eb8
 800ec30:	20002ee8 	andcs	r2, r0, r8, ror #29
 800ec34:	20002ec0 	andcs	r2, r0, r0, asr #29
 800ec38:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8

0800ec3c <StoreArtNet::~StoreArtNet()>:
 800ec3c:	4770      	bx	lr

0800ec3e <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800ec3e:	3804      	subs	r0, #4
 800ec40:	4770      	bx	lr
	...

0800ec44 <StoreArtNet::Update(artnetparams::Params const*)>:
 800ec44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec46:	2200      	movs	r2, #0
 800ec48:	460b      	mov	r3, r1
 800ec4a:	2187      	movs	r1, #135	; 0x87
 800ec4c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ec50:	4804      	ldr	r0, [pc, #16]	; (800ec64 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 800ec52:	9100      	str	r1, [sp, #0]
 800ec54:	6800      	ldr	r0, [r0, #0]
 800ec56:	2101      	movs	r1, #1
 800ec58:	f7ff ff22 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ec5c:	b005      	add	sp, #20
 800ec5e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec62:	bf00      	nop
 800ec64:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ec68 <StoreArtNet::SaveShortName(char const*)>:
 800ec68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec6a:	460b      	mov	r3, r1
 800ec6c:	2202      	movs	r2, #2
 800ec6e:	2100      	movs	r1, #0
 800ec70:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ec74:	2212      	movs	r2, #18
 800ec76:	4805      	ldr	r0, [pc, #20]	; (800ec8c <StoreArtNet::SaveShortName(char const*)+0x24>)
 800ec78:	9200      	str	r2, [sp, #0]
 800ec7a:	2101      	movs	r1, #1
 800ec7c:	220c      	movs	r2, #12
 800ec7e:	6800      	ldr	r0, [r0, #0]
 800ec80:	f7ff ff0e 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ec84:	b005      	add	sp, #20
 800ec86:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec8a:	bf00      	nop
 800ec8c:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ec90 <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 800ec90:	f1a0 0004 	sub.w	r0, r0, #4
 800ec94:	f7ff bfe8 	b.w	800ec68 <StoreArtNet::SaveShortName(char const*)>

0800ec98 <StoreArtNet::SaveLongName(char const*)>:
 800ec98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	2101      	movs	r1, #1
 800eca0:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800eca4:	2240      	movs	r2, #64	; 0x40
 800eca6:	4804      	ldr	r0, [pc, #16]	; (800ecb8 <StoreArtNet::SaveLongName(char const*)+0x20>)
 800eca8:	9200      	str	r2, [sp, #0]
 800ecaa:	6800      	ldr	r0, [r0, #0]
 800ecac:	221e      	movs	r2, #30
 800ecae:	f7ff fef7 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ecb2:	b005      	add	sp, #20
 800ecb4:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecb8:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ecbc <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 800ecbc:	f1a0 0004 	sub.w	r0, r0, #4
 800ecc0:	f7ff bfea 	b.w	800ec98 <StoreArtNet::SaveLongName(char const*)>

0800ecc4 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800ecc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	9302      	str	r3, [sp, #8]
 800ecca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ecce:	4608      	mov	r0, r1
 800ecd0:	408b      	lsls	r3, r1
 800ecd2:	2101      	movs	r1, #1
 800ecd4:	f88d 2017 	strb.w	r2, [sp, #23]
 800ecd8:	f100 0267 	add.w	r2, r0, #103	; 0x67
 800ecdc:	4805      	ldr	r0, [pc, #20]	; (800ecf4 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x30>)
 800ecde:	9301      	str	r3, [sp, #4]
 800ece0:	9100      	str	r1, [sp, #0]
 800ece2:	6800      	ldr	r0, [r0, #0]
 800ece4:	f10d 0317 	add.w	r3, sp, #23
 800ece8:	f7ff feda 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ecec:	b007      	add	sp, #28
 800ecee:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecf2:	bf00      	nop
 800ecf4:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ecf8 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800ecf8:	f1a0 0004 	sub.w	r0, r0, #4
 800ecfc:	f7ff bfe2 	b.w	800ecc4 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

0800ed00 <StoreArtNet::SaveNetSwitch(unsigned char)>:
 800ed00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ed02:	2204      	movs	r2, #4
 800ed04:	2300      	movs	r3, #0
 800ed06:	f88d 1017 	strb.w	r1, [sp, #23]
 800ed0a:	2101      	movs	r1, #1
 800ed0c:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800ed10:	4804      	ldr	r0, [pc, #16]	; (800ed24 <StoreArtNet::SaveNetSwitch(unsigned char)+0x24>)
 800ed12:	9100      	str	r1, [sp, #0]
 800ed14:	6800      	ldr	r0, [r0, #0]
 800ed16:	f10d 0317 	add.w	r3, sp, #23
 800ed1a:	f7ff fec1 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ed1e:	b007      	add	sp, #28
 800ed20:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed24:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ed28 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned char)>:
 800ed28:	f1a0 0004 	sub.w	r0, r0, #4
 800ed2c:	f7ff bfe8 	b.w	800ed00 <StoreArtNet::SaveNetSwitch(unsigned char)>

0800ed30 <StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800ed30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ed32:	2308      	movs	r3, #8
 800ed34:	2200      	movs	r2, #0
 800ed36:	f88d 1017 	strb.w	r1, [sp, #23]
 800ed3a:	2101      	movs	r1, #1
 800ed3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ed40:	4805      	ldr	r0, [pc, #20]	; (800ed58 <StoreArtNet::SaveSubnetSwitch(unsigned char)+0x28>)
 800ed42:	9100      	str	r1, [sp, #0]
 800ed44:	2205      	movs	r2, #5
 800ed46:	6800      	ldr	r0, [r0, #0]
 800ed48:	f10d 0317 	add.w	r3, sp, #23
 800ed4c:	f7ff fea8 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ed50:	b007      	add	sp, #28
 800ed52:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed56:	bf00      	nop
 800ed58:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ed5c <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800ed5c:	f1a0 0004 	sub.w	r0, r0, #4
 800ed60:	f7ff bfe6 	b.w	800ed30 <StoreArtNet::SaveSubnetSwitch(unsigned char)>

0800ed64 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800ed64:	b530      	push	{r4, r5, lr}
 800ed66:	b087      	sub	sp, #28
 800ed68:	460c      	mov	r4, r1
 800ed6a:	4d0f      	ldr	r5, [pc, #60]	; (800eda8 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x44>)
 800ed6c:	9205      	str	r2, [sp, #20]
 800ed6e:	b951      	cbnz	r1, 800ed86 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x22>
 800ed70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ed74:	9102      	str	r1, [sp, #8]
 800ed76:	2101      	movs	r1, #1
 800ed78:	226b      	movs	r2, #107	; 0x6b
 800ed7a:	e9cd 1300 	strd	r1, r3, [sp]
 800ed7e:	6828      	ldr	r0, [r5, #0]
 800ed80:	ab05      	add	r3, sp, #20
 800ed82:	f7ff fe8d 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ed86:	2300      	movs	r3, #0
 800ed88:	9302      	str	r3, [sp, #8]
 800ed8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ed8e:	2101      	movs	r1, #1
 800ed90:	40a3      	lsls	r3, r4
 800ed92:	9301      	str	r3, [sp, #4]
 800ed94:	6828      	ldr	r0, [r5, #0]
 800ed96:	9100      	str	r1, [sp, #0]
 800ed98:	ab05      	add	r3, sp, #20
 800ed9a:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 800ed9e:	f7ff fe7f 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eda2:	b007      	add	sp, #28
 800eda4:	bd30      	pop	{r4, r5, pc}
 800eda6:	bf00      	nop
 800eda8:	20002ec8 	andcs	r2, r0, r8, asr #29

0800edac <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800edac:	f1a0 0004 	sub.w	r0, r0, #4
 800edb0:	f7ff bfd8 	b.w	800ed64 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

0800edb4 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800edb4:	b530      	push	{r4, r5, lr}
 800edb6:	b087      	sub	sp, #28
 800edb8:	460c      	mov	r4, r1
 800edba:	4d0f      	ldr	r5, [pc, #60]	; (800edf8 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x44>)
 800edbc:	9205      	str	r2, [sp, #20]
 800edbe:	b951      	cbnz	r1, 800edd6 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x22>
 800edc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800edc4:	9102      	str	r1, [sp, #8]
 800edc6:	2101      	movs	r1, #1
 800edc8:	2270      	movs	r2, #112	; 0x70
 800edca:	e9cd 1300 	strd	r1, r3, [sp]
 800edce:	6828      	ldr	r0, [r5, #0]
 800edd0:	ab05      	add	r3, sp, #20
 800edd2:	f7ff fe65 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800edd6:	2300      	movs	r3, #0
 800edd8:	9302      	str	r3, [sp, #8]
 800edda:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800edde:	2101      	movs	r1, #1
 800ede0:	40a3      	lsls	r3, r4
 800ede2:	9301      	str	r3, [sp, #4]
 800ede4:	6828      	ldr	r0, [r5, #0]
 800ede6:	9100      	str	r1, [sp, #0]
 800ede8:	ab05      	add	r3, sp, #20
 800edea:	f104 0271 	add.w	r2, r4, #113	; 0x71
 800edee:	f7ff fe57 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800edf2:	b007      	add	sp, #28
 800edf4:	bd30      	pop	{r4, r5, pc}
 800edf6:	bf00      	nop
 800edf8:	20002ec8 	andcs	r2, r0, r8, asr #29

0800edfc <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800edfc:	f1a0 0004 	sub.w	r0, r0, #4
 800ee00:	f7ff bfd8 	b.w	800edb4 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

0800ee04 <StoreArtNet::~StoreArtNet()>:
 800ee04:	b510      	push	{r4, lr}
 800ee06:	4604      	mov	r4, r0
 800ee08:	f003 ff18 	bl	8012c3c <operator delete(void*)>
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	bd10      	pop	{r4, pc}

0800ee10 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800ee10:	f1a0 0004 	sub.w	r0, r0, #4
 800ee14:	e7f6      	b.n	800ee04 <StoreArtNet::~StoreArtNet()>
	...

0800ee18 <StoreArtNet::Copy(artnetparams::Params*)>:
 800ee18:	2300      	movs	r3, #0
 800ee1a:	b507      	push	{r0, r1, r2, lr}
 800ee1c:	4805      	ldr	r0, [pc, #20]	; (800ee34 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 800ee1e:	9300      	str	r3, [sp, #0]
 800ee20:	460a      	mov	r2, r1
 800ee22:	2387      	movs	r3, #135	; 0x87
 800ee24:	2101      	movs	r1, #1
 800ee26:	6800      	ldr	r0, [r0, #0]
 800ee28:	f7ff fe7a 	bl	800eb20 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800ee2c:	b003      	add	sp, #12
 800ee2e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee32:	bf00      	nop
 800ee34:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ee38 <StoreArtNet::StoreArtNet()>:
 800ee38:	4a04      	ldr	r2, [pc, #16]	; (800ee4c <StoreArtNet::StoreArtNet()+0x14>)
 800ee3a:	f102 0108 	add.w	r1, r2, #8
 800ee3e:	323c      	adds	r2, #60	; 0x3c
 800ee40:	6042      	str	r2, [r0, #4]
 800ee42:	4a03      	ldr	r2, [pc, #12]	; (800ee50 <StoreArtNet::StoreArtNet()+0x18>)
 800ee44:	6001      	str	r1, [r0, #0]
 800ee46:	6010      	str	r0, [r2, #0]
 800ee48:	4770      	bx	lr
 800ee4a:	bf00      	nop
 800ee4c:	08016ad4 	stmdaeq	r1, {r2, r4, r6, r7, r9, fp, sp, lr}
 800ee50:	20002ed0 	ldrdcs	r2, [r0], -r0

0800ee54 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800ee54:	4770      	bx	lr
	...

0800ee58 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 800ee58:	2300      	movs	r3, #0
 800ee5a:	b507      	push	{r0, r1, r2, lr}
 800ee5c:	4805      	ldr	r0, [pc, #20]	; (800ee74 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	460a      	mov	r2, r1
 800ee62:	2322      	movs	r3, #34	; 0x22
 800ee64:	210f      	movs	r1, #15
 800ee66:	6800      	ldr	r0, [r0, #0]
 800ee68:	f7ff fe5a 	bl	800eb20 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800ee6c:	b003      	add	sp, #12
 800ee6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee72:	bf00      	nop
 800ee74:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ee78 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 800ee78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	460b      	mov	r3, r1
 800ee7e:	2122      	movs	r1, #34	; 0x22
 800ee80:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ee84:	4804      	ldr	r0, [pc, #16]	; (800ee98 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800ee86:	9100      	str	r1, [sp, #0]
 800ee88:	6800      	ldr	r0, [r0, #0]
 800ee8a:	210f      	movs	r1, #15
 800ee8c:	f7ff fe08 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ee90:	b005      	add	sp, #20
 800ee92:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee96:	bf00      	nop
 800ee98:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ee9c <StoreDisplayUdf::~StoreDisplayUdf()>:
 800ee9c:	b510      	push	{r4, lr}
 800ee9e:	4604      	mov	r4, r0
 800eea0:	f003 fecc 	bl	8012c3c <operator delete(void*)>
 800eea4:	4620      	mov	r0, r4
 800eea6:	bd10      	pop	{r4, pc}

0800eea8 <StoreDisplayUdf::StoreDisplayUdf()>:
 800eea8:	4a02      	ldr	r2, [pc, #8]	; (800eeb4 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800eeaa:	6002      	str	r2, [r0, #0]
 800eeac:	4a02      	ldr	r2, [pc, #8]	; (800eeb8 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 800eeae:	6010      	str	r0, [r2, #0]
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop
 800eeb4:	08016b3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, fp, sp, lr}
 800eeb8:	20002ed4 	ldrdcs	r2, [r0], -r4

0800eebc <StoreDmxSend::~StoreDmxSend()>:
 800eebc:	4770      	bx	lr
	...

0800eec0 <StoreDmxSend::Copy(TDmxParams*)>:
 800eec0:	2300      	movs	r3, #0
 800eec2:	b507      	push	{r0, r1, r2, lr}
 800eec4:	4805      	ldr	r0, [pc, #20]	; (800eedc <StoreDmxSend::Copy(TDmxParams*)+0x1c>)
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	460a      	mov	r2, r1
 800eeca:	230a      	movs	r3, #10
 800eecc:	2102      	movs	r1, #2
 800eece:	6800      	ldr	r0, [r0, #0]
 800eed0:	f7ff fe26 	bl	800eb20 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800eed4:	b003      	add	sp, #12
 800eed6:	f85d fb04 	ldr.w	pc, [sp], #4
 800eeda:	bf00      	nop
 800eedc:	20002ec8 	andcs	r2, r0, r8, asr #29

0800eee0 <StoreDmxSend::Update(TDmxParams const*)>:
 800eee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eee2:	2200      	movs	r2, #0
 800eee4:	460b      	mov	r3, r1
 800eee6:	210a      	movs	r1, #10
 800eee8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800eeec:	4804      	ldr	r0, [pc, #16]	; (800ef00 <StoreDmxSend::Update(TDmxParams const*)+0x20>)
 800eeee:	9100      	str	r1, [sp, #0]
 800eef0:	6800      	ldr	r0, [r0, #0]
 800eef2:	2102      	movs	r1, #2
 800eef4:	f7ff fdd4 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eef8:	b005      	add	sp, #20
 800eefa:	f85d fb04 	ldr.w	pc, [sp], #4
 800eefe:	bf00      	nop
 800ef00:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ef04 <StoreDmxSend::~StoreDmxSend()>:
 800ef04:	b510      	push	{r4, lr}
 800ef06:	4604      	mov	r4, r0
 800ef08:	f003 fe98 	bl	8012c3c <operator delete(void*)>
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	bd10      	pop	{r4, pc}

0800ef10 <StoreDmxSend::StoreDmxSend()>:
 800ef10:	4a02      	ldr	r2, [pc, #8]	; (800ef1c <StoreDmxSend::StoreDmxSend()+0xc>)
 800ef12:	6002      	str	r2, [r0, #0]
 800ef14:	4a02      	ldr	r2, [pc, #8]	; (800ef20 <StoreDmxSend::StoreDmxSend()+0x10>)
 800ef16:	6010      	str	r0, [r2, #0]
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	08016b54 	stmdaeq	r1, {r2, r4, r6, r8, r9, fp, sp, lr}
 800ef20:	20002ed8 	ldrdcs	r2, [r0], -r8

0800ef24 <StoreNetwork::~StoreNetwork()>:
 800ef24:	4770      	bx	lr

0800ef26 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800ef26:	3804      	subs	r0, #4
 800ef28:	4770      	bx	lr
	...

0800ef2c <StoreNetwork::Update(TNetworkParams const*)>:
 800ef2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef2e:	2200      	movs	r2, #0
 800ef30:	460b      	mov	r3, r1
 800ef32:	215e      	movs	r1, #94	; 0x5e
 800ef34:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ef38:	4804      	ldr	r0, [pc, #16]	; (800ef4c <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 800ef3a:	9100      	str	r1, [sp, #0]
 800ef3c:	6800      	ldr	r0, [r0, #0]
 800ef3e:	4611      	mov	r1, r2
 800ef40:	f7ff fdae 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ef44:	b005      	add	sp, #20
 800ef46:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef4a:	bf00      	nop
 800ef4c:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ef50 <StoreNetwork::SaveDhcp(bool)>:
 800ef50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ef52:	2301      	movs	r3, #1
 800ef54:	f88d 1017 	strb.w	r1, [sp, #23]
 800ef58:	2100      	movs	r1, #0
 800ef5a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ef5e:	4805      	ldr	r0, [pc, #20]	; (800ef74 <StoreNetwork::SaveDhcp(bool)+0x24>)
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	2214      	movs	r2, #20
 800ef64:	6800      	ldr	r0, [r0, #0]
 800ef66:	f10d 0317 	add.w	r3, sp, #23
 800ef6a:	f7ff fd99 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ef6e:	b007      	add	sp, #28
 800ef70:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef74:	20002ec8 	andcs	r2, r0, r8, asr #29

0800ef78 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800ef78:	f1a0 0004 	sub.w	r0, r0, #4
 800ef7c:	e7e8      	b.n	800ef50 <StoreNetwork::SaveDhcp(bool)>
 800ef7e:	bf00      	nop

0800ef80 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 800ef80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ef82:	2308      	movs	r3, #8
 800ef84:	9105      	str	r1, [sp, #20]
 800ef86:	2100      	movs	r1, #0
 800ef88:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ef8c:	2304      	movs	r3, #4
 800ef8e:	4805      	ldr	r0, [pc, #20]	; (800efa4 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 800ef90:	9300      	str	r3, [sp, #0]
 800ef92:	220c      	movs	r2, #12
 800ef94:	6800      	ldr	r0, [r0, #0]
 800ef96:	ab05      	add	r3, sp, #20
 800ef98:	f7ff fd82 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ef9c:	b007      	add	sp, #28
 800ef9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800efa2:	bf00      	nop
 800efa4:	20002ec8 	andcs	r2, r0, r8, asr #29

0800efa8 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 800efa8:	f1a0 0004 	sub.w	r0, r0, #4
 800efac:	e7e8      	b.n	800ef80 <StoreNetwork::SaveGatewayIp(unsigned int)>
 800efae:	bf00      	nop

0800efb0 <StoreNetwork::SaveNetMask(unsigned int)>:
 800efb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800efb2:	2304      	movs	r3, #4
 800efb4:	9105      	str	r1, [sp, #20]
 800efb6:	2100      	movs	r1, #0
 800efb8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800efbc:	4804      	ldr	r0, [pc, #16]	; (800efd0 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 800efbe:	9300      	str	r3, [sp, #0]
 800efc0:	2208      	movs	r2, #8
 800efc2:	6800      	ldr	r0, [r0, #0]
 800efc4:	ab05      	add	r3, sp, #20
 800efc6:	f7ff fd6b 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800efca:	b007      	add	sp, #28
 800efcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800efd0:	20002ec8 	andcs	r2, r0, r8, asr #29

0800efd4 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 800efd4:	f1a0 0004 	sub.w	r0, r0, #4
 800efd8:	e7ea      	b.n	800efb0 <StoreNetwork::SaveNetMask(unsigned int)>
 800efda:	bf00      	nop

0800efdc <StoreNetwork::SaveIp(unsigned int)>:
 800efdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800efde:	2302      	movs	r3, #2
 800efe0:	9105      	str	r1, [sp, #20]
 800efe2:	2100      	movs	r1, #0
 800efe4:	2204      	movs	r2, #4
 800efe6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800efea:	4804      	ldr	r0, [pc, #16]	; (800effc <StoreNetwork::SaveIp(unsigned int)+0x20>)
 800efec:	9200      	str	r2, [sp, #0]
 800efee:	6800      	ldr	r0, [r0, #0]
 800eff0:	ab05      	add	r3, sp, #20
 800eff2:	f7ff fd55 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eff6:	b007      	add	sp, #28
 800eff8:	f85d fb04 	ldr.w	pc, [sp], #4
 800effc:	20002ec8 	andcs	r2, r0, r8, asr #29

0800f000 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 800f000:	f1a0 0004 	sub.w	r0, r0, #4
 800f004:	e7ea      	b.n	800efdc <StoreNetwork::SaveIp(unsigned int)>
 800f006:	bf00      	nop

0800f008 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800f008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f00a:	460b      	mov	r3, r1
 800f00c:	2020      	movs	r0, #32
 800f00e:	2100      	movs	r1, #0
 800f010:	2a40      	cmp	r2, #64	; 0x40
 800f012:	bf28      	it	cs
 800f014:	2240      	movcs	r2, #64	; 0x40
 800f016:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800f01a:	4804      	ldr	r0, [pc, #16]	; (800f02c <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 800f01c:	9200      	str	r2, [sp, #0]
 800f01e:	6800      	ldr	r0, [r0, #0]
 800f020:	2215      	movs	r2, #21
 800f022:	f7ff fd3d 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f026:	b005      	add	sp, #20
 800f028:	f85d fb04 	ldr.w	pc, [sp], #4
 800f02c:	20002ec8 	andcs	r2, r0, r8, asr #29

0800f030 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800f030:	f1a0 0004 	sub.w	r0, r0, #4
 800f034:	e7e8      	b.n	800f008 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 800f036:	bf00      	nop

0800f038 <StoreNetwork::~StoreNetwork()>:
 800f038:	b510      	push	{r4, lr}
 800f03a:	4604      	mov	r4, r0
 800f03c:	f003 fdfe 	bl	8012c3c <operator delete(void*)>
 800f040:	4620      	mov	r0, r4
 800f042:	bd10      	pop	{r4, pc}

0800f044 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800f044:	f1a0 0004 	sub.w	r0, r0, #4
 800f048:	e7f6      	b.n	800f038 <StoreNetwork::~StoreNetwork()>
	...

0800f04c <StoreNetwork::Copy(TNetworkParams*)>:
 800f04c:	b507      	push	{r0, r1, r2, lr}
 800f04e:	460a      	mov	r2, r1
 800f050:	2100      	movs	r1, #0
 800f052:	4804      	ldr	r0, [pc, #16]	; (800f064 <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 800f054:	9100      	str	r1, [sp, #0]
 800f056:	235e      	movs	r3, #94	; 0x5e
 800f058:	6800      	ldr	r0, [r0, #0]
 800f05a:	f7ff fd61 	bl	800eb20 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800f05e:	b003      	add	sp, #12
 800f060:	f85d fb04 	ldr.w	pc, [sp], #4
 800f064:	20002ec8 	andcs	r2, r0, r8, asr #29

0800f068 <StoreNetwork::StoreNetwork()>:
 800f068:	4a03      	ldr	r2, [pc, #12]	; (800f078 <StoreNetwork::StoreNetwork()+0x10>)
 800f06a:	6002      	str	r2, [r0, #0]
 800f06c:	322c      	adds	r2, #44	; 0x2c
 800f06e:	6042      	str	r2, [r0, #4]
 800f070:	4a02      	ldr	r2, [pc, #8]	; (800f07c <StoreNetwork::StoreNetwork()+0x14>)
 800f072:	6010      	str	r0, [r2, #0]
 800f074:	4770      	bx	lr
 800f076:	bf00      	nop
 800f078:	08016b6c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, fp, sp, lr}
 800f07c:	20002edc 	ldrdcs	r2, [r0], -ip

0800f080 <StoreRDMDevice::~StoreRDMDevice()>:
 800f080:	4770      	bx	lr

0800f082 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800f082:	3804      	subs	r0, #4
 800f084:	4770      	bx	lr
	...

0800f088 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 800f088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f08a:	2200      	movs	r2, #0
 800f08c:	460b      	mov	r3, r1
 800f08e:	2129      	movs	r1, #41	; 0x29
 800f090:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800f094:	4804      	ldr	r0, [pc, #16]	; (800f0a8 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 800f096:	9100      	str	r1, [sp, #0]
 800f098:	6800      	ldr	r0, [r0, #0]
 800f09a:	210b      	movs	r1, #11
 800f09c:	f7ff fd00 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f0a0:	b005      	add	sp, #20
 800f0a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0a6:	bf00      	nop
 800f0a8:	20002ec8 	andcs	r2, r0, r8, asr #29

0800f0ac <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800f0ac:	b570      	push	{r4, r5, r6, lr}
 800f0ae:	2401      	movs	r4, #1
 800f0b0:	2600      	movs	r6, #0
 800f0b2:	4d0c      	ldr	r5, [pc, #48]	; (800f0e4 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 800f0b4:	b086      	sub	sp, #24
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	6828      	ldr	r0, [r5, #0]
 800f0ba:	f88d 2017 	strb.w	r2, [sp, #23]
 800f0be:	9200      	str	r2, [sp, #0]
 800f0c0:	210b      	movs	r1, #11
 800f0c2:	2204      	movs	r2, #4
 800f0c4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800f0c8:	f7ff fcea 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f0cc:	2224      	movs	r2, #36	; 0x24
 800f0ce:	210b      	movs	r1, #11
 800f0d0:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800f0d4:	6828      	ldr	r0, [r5, #0]
 800f0d6:	9400      	str	r4, [sp, #0]
 800f0d8:	f10d 0317 	add.w	r3, sp, #23
 800f0dc:	f7ff fce0 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f0e0:	b006      	add	sp, #24
 800f0e2:	bd70      	pop	{r4, r5, r6, pc}
 800f0e4:	20002ec8 	andcs	r2, r0, r8, asr #29

0800f0e8 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800f0e8:	f1a0 0004 	sub.w	r0, r0, #4
 800f0ec:	e7de      	b.n	800f0ac <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 800f0ee:	bf00      	nop

0800f0f0 <StoreRDMDevice::~StoreRDMDevice()>:
 800f0f0:	b510      	push	{r4, lr}
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	f003 fda2 	bl	8012c3c <operator delete(void*)>
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	bd10      	pop	{r4, pc}

0800f0fc <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800f0fc:	f1a0 0004 	sub.w	r0, r0, #4
 800f100:	e7f6      	b.n	800f0f0 <StoreRDMDevice::~StoreRDMDevice()>
	...

0800f104 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 800f104:	2300      	movs	r3, #0
 800f106:	b507      	push	{r0, r1, r2, lr}
 800f108:	4805      	ldr	r0, [pc, #20]	; (800f120 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x1c>)
 800f10a:	9300      	str	r3, [sp, #0]
 800f10c:	460a      	mov	r2, r1
 800f10e:	2329      	movs	r3, #41	; 0x29
 800f110:	210b      	movs	r1, #11
 800f112:	6800      	ldr	r0, [r0, #0]
 800f114:	f7ff fd04 	bl	800eb20 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800f118:	b003      	add	sp, #12
 800f11a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f11e:	bf00      	nop
 800f120:	20002ec8 	andcs	r2, r0, r8, asr #29

0800f124 <StoreRDMDevice::StoreRDMDevice()>:
 800f124:	4a03      	ldr	r2, [pc, #12]	; (800f134 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 800f126:	6002      	str	r2, [r0, #0]
 800f128:	321c      	adds	r2, #28
 800f12a:	6042      	str	r2, [r0, #4]
 800f12c:	4a02      	ldr	r2, [pc, #8]	; (800f138 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 800f12e:	6010      	str	r0, [r2, #0]
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	08016bbc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
 800f138:	20002ee0 	andcs	r2, r0, r0, ror #29

0800f13c <StoreRemoteConfig::~StoreRemoteConfig()>:
 800f13c:	4770      	bx	lr
	...

0800f140 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 800f140:	2300      	movs	r3, #0
 800f142:	b507      	push	{r0, r1, r2, lr}
 800f144:	4805      	ldr	r0, [pc, #20]	; (800f15c <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	460a      	mov	r2, r1
 800f14a:	2320      	movs	r3, #32
 800f14c:	210c      	movs	r1, #12
 800f14e:	6800      	ldr	r0, [r0, #0]
 800f150:	f7ff fce6 	bl	800eb20 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800f154:	b003      	add	sp, #12
 800f156:	f85d fb04 	ldr.w	pc, [sp], #4
 800f15a:	bf00      	nop
 800f15c:	20002ec8 	andcs	r2, r0, r8, asr #29

0800f160 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 800f160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f162:	2200      	movs	r2, #0
 800f164:	460b      	mov	r3, r1
 800f166:	2120      	movs	r1, #32
 800f168:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800f16c:	4804      	ldr	r0, [pc, #16]	; (800f180 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 800f16e:	9100      	str	r1, [sp, #0]
 800f170:	6800      	ldr	r0, [r0, #0]
 800f172:	210c      	movs	r1, #12
 800f174:	f7ff fc94 	bl	800eaa0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f178:	b005      	add	sp, #20
 800f17a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f17e:	bf00      	nop
 800f180:	20002ec8 	andcs	r2, r0, r8, asr #29

0800f184 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800f184:	b510      	push	{r4, lr}
 800f186:	4604      	mov	r4, r0
 800f188:	f003 fd58 	bl	8012c3c <operator delete(void*)>
 800f18c:	4620      	mov	r0, r4
 800f18e:	bd10      	pop	{r4, pc}

0800f190 <StoreRemoteConfig::StoreRemoteConfig()>:
 800f190:	4a02      	ldr	r2, [pc, #8]	; (800f19c <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 800f192:	6002      	str	r2, [r0, #0]
 800f194:	4a02      	ldr	r2, [pc, #8]	; (800f1a0 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 800f196:	6010      	str	r0, [r2, #0]
 800f198:	4770      	bx	lr
 800f19a:	bf00      	nop
 800f19c:	08016bec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, fp, sp, lr}
 800f1a0:	20002ee4 	andcs	r2, r0, r4, ror #29

0800f1a4 <FlashRom::FlashRom()>:
 800f1a4:	4b07      	ldr	r3, [pc, #28]	; (800f1c4 <FlashRom::FlashRom()+0x20>)
 800f1a6:	b510      	push	{r4, lr}
 800f1a8:	6018      	str	r0, [r3, #0]
 800f1aa:	2301      	movs	r3, #1
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	7003      	strb	r3, [r0, #0]
 800f1b0:	4b05      	ldr	r3, [pc, #20]	; (800f1c8 <FlashRom::FlashRom()+0x24>)
 800f1b2:	4906      	ldr	r1, [pc, #24]	; (800f1cc <FlashRom::FlashRom()+0x28>)
 800f1b4:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800f1b8:	4805      	ldr	r0, [pc, #20]	; (800f1d0 <FlashRom::FlashRom()+0x2c>)
 800f1ba:	029a      	lsls	r2, r3, #10
 800f1bc:	f004 f83a 	bl	8013234 <printf>
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	bd10      	pop	{r4, pc}
 800f1c4:	20002ee8 	andcs	r2, r0, r8, ror #29
 800f1c8:	1ffff700 	svcne	0x00fff700
 800f1cc:	080153e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, ip, lr}
 800f1d0:	08016bfc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, fp, sp, lr}

0800f1d4 <FlashRom::GetSize() const>:
 800f1d4:	4b02      	ldr	r3, [pc, #8]	; (800f1e0 <FlashRom::GetSize() const+0xc>)
 800f1d6:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800f1da:	0280      	lsls	r0, r0, #10
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop
 800f1e0:	1ffff700 	svcne	0x00fff700

0800f1e4 <FlashRom::GetSectorSize() const>:
 800f1e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f1e8:	4770      	bx	lr

0800f1ea <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 800f1ea:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800f1ee:	441a      	add	r2, r3
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	d004      	beq.n	800f1fe <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 800f1f4:	f851 0b04 	ldr.w	r0, [r1], #4
 800f1f8:	f843 0b04 	str.w	r0, [r3], #4
 800f1fc:	e7f8      	b.n	800f1f0 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>
 800f1fe:	2200      	movs	r2, #0
 800f200:	9b00      	ldr	r3, [sp, #0]
 800f202:	2001      	movs	r0, #1
 800f204:	601a      	str	r2, [r3, #0]
 800f206:	4770      	bx	lr

0800f208 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 800f208:	2000      	movs	r0, #0
 800f20a:	b538      	push	{r3, r4, r5, lr}
 800f20c:	4c47      	ldr	r4, [pc, #284]	; (800f32c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 800f20e:	6018      	str	r0, [r3, #0]
 800f210:	6823      	ldr	r3, [r4, #0]
 800f212:	2b04      	cmp	r3, #4
 800f214:	f200 8082 	bhi.w	800f31c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800f218:	e8df f003 	tbb	[pc, r3]
 800f21c:	78452003 	stmdavc	r5, {r0, r1, sp}^
 800f220:	4b430080 	blmi	90cf428 <__exidx_end+0x10b7ee8>
 800f224:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800f228:	6019      	str	r1, [r3, #0]
 800f22a:	4b42      	ldr	r3, [pc, #264]	; (800f334 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800f22c:	601a      	str	r2, [r3, #0]
 800f22e:	4b42      	ldr	r3, [pc, #264]	; (800f338 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 800f230:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800f234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f238:	4b40      	ldr	r3, [pc, #256]	; (800f33c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800f23a:	d807      	bhi.n	800f24c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 800f23c:	2201      	movs	r2, #1
 800f23e:	701a      	strb	r2, [r3, #0]
 800f240:	f004 fac4 	bl	80137cc <fmc_bank0_unlock>
 800f244:	2301      	movs	r3, #1
 800f246:	6023      	str	r3, [r4, #0]
 800f248:	2000      	movs	r0, #0
 800f24a:	e026      	b.n	800f29a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800f24c:	4a3c      	ldr	r2, [pc, #240]	; (800f340 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 800f24e:	4291      	cmp	r1, r2
 800f250:	d3f4      	bcc.n	800f23c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 800f252:	2200      	movs	r2, #0
 800f254:	701a      	strb	r2, [r3, #0]
 800f256:	f004 fac7 	bl	80137e8 <fmc_bank1_unlock>
 800f25a:	e7f3      	b.n	800f244 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800f25c:	4d37      	ldr	r5, [pc, #220]	; (800f33c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800f25e:	782b      	ldrb	r3, [r5, #0]
 800f260:	b15b      	cbz	r3, 800f27a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 800f262:	f004 fadf 	bl	8013824 <fmc_bank0_state_get>
 800f266:	2801      	cmp	r0, #1
 800f268:	d0ee      	beq.n	800f248 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 800f26a:	7829      	ldrb	r1, [r5, #0]
 800f26c:	4b35      	ldr	r3, [pc, #212]	; (800f344 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800f26e:	b939      	cbnz	r1, 800f280 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 800f270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f272:	f022 0202 	bic.w	r2, r2, #2
 800f276:	651a      	str	r2, [r3, #80]	; 0x50
 800f278:	e006      	b.n	800f288 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 800f27a:	f004 fae7 	bl	801384c <fmc_bank1_state_get>
 800f27e:	e7f2      	b.n	800f266 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 800f280:	691a      	ldr	r2, [r3, #16]
 800f282:	f022 0202 	bic.w	r2, r2, #2
 800f286:	611a      	str	r2, [r3, #16]
 800f288:	4b2a      	ldr	r3, [pc, #168]	; (800f334 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	b94b      	cbnz	r3, 800f2a2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 800f28e:	b129      	cbz	r1, 800f29c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 800f290:	f004 fab8 	bl	8013804 <fmc_bank0_lock>
 800f294:	2300      	movs	r3, #0
 800f296:	2001      	movs	r0, #1
 800f298:	6023      	str	r3, [r4, #0]
 800f29a:	bd38      	pop	{r3, r4, r5, pc}
 800f29c:	f004 faba 	bl	8013814 <fmc_bank1_lock>
 800f2a0:	e7f8      	b.n	800f294 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 800f2a2:	2302      	movs	r3, #2
 800f2a4:	e7cf      	b.n	800f246 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 800f2a6:	4923      	ldr	r1, [pc, #140]	; (800f334 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800f2a8:	680b      	ldr	r3, [r1, #0]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d0ca      	beq.n	800f244 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800f2ae:	4b23      	ldr	r3, [pc, #140]	; (800f33c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800f2b0:	4a1f      	ldr	r2, [pc, #124]	; (800f330 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 800f2b2:	7818      	ldrb	r0, [r3, #0]
 800f2b4:	4b23      	ldr	r3, [pc, #140]	; (800f344 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800f2b6:	b190      	cbz	r0, 800f2de <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 800f2b8:	6918      	ldr	r0, [r3, #16]
 800f2ba:	f040 0002 	orr.w	r0, r0, #2
 800f2be:	6118      	str	r0, [r3, #16]
 800f2c0:	6810      	ldr	r0, [r2, #0]
 800f2c2:	6158      	str	r0, [r3, #20]
 800f2c4:	6918      	ldr	r0, [r3, #16]
 800f2c6:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800f2ca:	6118      	str	r0, [r3, #16]
 800f2cc:	680b      	ldr	r3, [r1, #0]
 800f2ce:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800f2d2:	600b      	str	r3, [r1, #0]
 800f2d4:	6813      	ldr	r3, [r2, #0]
 800f2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2da:	6013      	str	r3, [r2, #0]
 800f2dc:	e7b2      	b.n	800f244 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800f2de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f2e0:	f040 0002 	orr.w	r0, r0, #2
 800f2e4:	6518      	str	r0, [r3, #80]	; 0x50
 800f2e6:	6810      	ldr	r0, [r2, #0]
 800f2e8:	6558      	str	r0, [r3, #84]	; 0x54
 800f2ea:	69dd      	ldr	r5, [r3, #28]
 800f2ec:	07ad      	lsls	r5, r5, #30
 800f2ee:	bf48      	it	mi
 800f2f0:	6158      	strmi	r0, [r3, #20]
 800f2f2:	4814      	ldr	r0, [pc, #80]	; (800f344 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800f2f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2fa:	6503      	str	r3, [r0, #80]	; 0x50
 800f2fc:	680b      	ldr	r3, [r1, #0]
 800f2fe:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800f302:	600b      	str	r3, [r1, #0]
 800f304:	6813      	ldr	r3, [r2, #0]
 800f306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f30a:	e7e6      	b.n	800f2da <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 800f30c:	4b0b      	ldr	r3, [pc, #44]	; (800f33c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800f30e:	781a      	ldrb	r2, [r3, #0]
 800f310:	4b0c      	ldr	r3, [pc, #48]	; (800f344 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800f312:	b132      	cbz	r2, 800f322 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 800f314:	691a      	ldr	r2, [r3, #16]
 800f316:	f022 0201 	bic.w	r2, r2, #1
 800f31a:	611a      	str	r2, [r3, #16]
 800f31c:	2000      	movs	r0, #0
 800f31e:	6020      	str	r0, [r4, #0]
 800f320:	e7bb      	b.n	800f29a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800f322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f324:	f022 0201 	bic.w	r2, r2, #1
 800f328:	651a      	str	r2, [r3, #80]	; 0x50
 800f32a:	e7f7      	b.n	800f31c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800f32c:	20002ef0 	strdcs	r2, [r0], -r0
 800f330:	20002ef4 	strdcs	r2, [r0], -r4
 800f334:	20002f00 	andcs	r2, r0, r0, lsl #30
 800f338:	1ffff700 	svcne	0x00fff700
 800f33c:	20002efc 	strdcs	r2, [r0], -ip
 800f340:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800f344:	40022000 	andmi	r2, r2, r0

0800f348 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 800f348:	b570      	push	{r4, r5, r6, lr}
 800f34a:	2400      	movs	r4, #0
 800f34c:	9804      	ldr	r0, [sp, #16]
 800f34e:	6004      	str	r4, [r0, #0]
 800f350:	4c48      	ldr	r4, [pc, #288]	; (800f474 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 800f352:	6820      	ldr	r0, [r4, #0]
 800f354:	2804      	cmp	r0, #4
 800f356:	d848      	bhi.n	800f3ea <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 800f358:	e8df f000 	tbb	[pc, r0]
 800f35c:	22847c03 	addcs	r7, r4, #768	; 0x300
 800f360:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 800f364:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800f368:	6001      	str	r1, [r0, #0]
 800f36a:	4844      	ldr	r0, [pc, #272]	; (800f47c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800f36c:	6003      	str	r3, [r0, #0]
 800f36e:	4b44      	ldr	r3, [pc, #272]	; (800f480 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800f370:	601a      	str	r2, [r3, #0]
 800f372:	4b44      	ldr	r3, [pc, #272]	; (800f484 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 800f374:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800f378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f37c:	4b42      	ldr	r3, [pc, #264]	; (800f488 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f37e:	d807      	bhi.n	800f390 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 800f380:	2201      	movs	r2, #1
 800f382:	701a      	strb	r2, [r3, #0]
 800f384:	f004 fa22 	bl	80137cc <fmc_bank0_unlock>
 800f388:	2303      	movs	r3, #3
 800f38a:	6023      	str	r3, [r4, #0]
 800f38c:	2000      	movs	r0, #0
 800f38e:	e026      	b.n	800f3de <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800f390:	4a3e      	ldr	r2, [pc, #248]	; (800f48c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 800f392:	4291      	cmp	r1, r2
 800f394:	d3f4      	bcc.n	800f380 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 800f396:	2200      	movs	r2, #0
 800f398:	701a      	strb	r2, [r3, #0]
 800f39a:	f004 fa25 	bl	80137e8 <fmc_bank1_unlock>
 800f39e:	e7f3      	b.n	800f388 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f3a0:	4d39      	ldr	r5, [pc, #228]	; (800f488 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f3a2:	782b      	ldrb	r3, [r5, #0]
 800f3a4:	b15b      	cbz	r3, 800f3be <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 800f3a6:	f004 fa3d 	bl	8013824 <fmc_bank0_state_get>
 800f3aa:	2801      	cmp	r0, #1
 800f3ac:	d0ee      	beq.n	800f38c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 800f3ae:	7829      	ldrb	r1, [r5, #0]
 800f3b0:	4b37      	ldr	r3, [pc, #220]	; (800f490 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f3b2:	b939      	cbnz	r1, 800f3c4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 800f3b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3b6:	f022 0201 	bic.w	r2, r2, #1
 800f3ba:	651a      	str	r2, [r3, #80]	; 0x50
 800f3bc:	e006      	b.n	800f3cc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 800f3be:	f004 fa45 	bl	801384c <fmc_bank1_state_get>
 800f3c2:	e7f2      	b.n	800f3aa <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 800f3c4:	691a      	ldr	r2, [r3, #16]
 800f3c6:	f022 0201 	bic.w	r2, r2, #1
 800f3ca:	611a      	str	r2, [r3, #16]
 800f3cc:	4b2c      	ldr	r3, [pc, #176]	; (800f480 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	b94b      	cbnz	r3, 800f3e6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 800f3d2:	b129      	cbz	r1, 800f3e0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 800f3d4:	f004 fa16 	bl	8013804 <fmc_bank0_lock>
 800f3d8:	2300      	movs	r3, #0
 800f3da:	2001      	movs	r0, #1
 800f3dc:	6023      	str	r3, [r4, #0]
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	f004 fa18 	bl	8013814 <fmc_bank1_lock>
 800f3e4:	e7f8      	b.n	800f3d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 800f3e6:	2304      	movs	r3, #4
 800f3e8:	e7cf      	b.n	800f38a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 800f3ea:	4a25      	ldr	r2, [pc, #148]	; (800f480 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800f3ec:	6813      	ldr	r3, [r2, #0]
 800f3ee:	2b03      	cmp	r3, #3
 800f3f0:	d91a      	bls.n	800f428 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 800f3f2:	4b25      	ldr	r3, [pc, #148]	; (800f488 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f3f4:	7819      	ldrb	r1, [r3, #0]
 800f3f6:	4b26      	ldr	r3, [pc, #152]	; (800f490 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f3f8:	b189      	cbz	r1, 800f41e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 800f3fa:	6919      	ldr	r1, [r3, #16]
 800f3fc:	f041 0101 	orr.w	r1, r1, #1
 800f400:	6119      	str	r1, [r3, #16]
 800f402:	4d1e      	ldr	r5, [pc, #120]	; (800f47c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800f404:	481c      	ldr	r0, [pc, #112]	; (800f478 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800f406:	6829      	ldr	r1, [r5, #0]
 800f408:	6803      	ldr	r3, [r0, #0]
 800f40a:	f851 6b04 	ldr.w	r6, [r1], #4
 800f40e:	f843 6b04 	str.w	r6, [r3], #4
 800f412:	6003      	str	r3, [r0, #0]
 800f414:	6813      	ldr	r3, [r2, #0]
 800f416:	6029      	str	r1, [r5, #0]
 800f418:	3b04      	subs	r3, #4
 800f41a:	6013      	str	r3, [r2, #0]
 800f41c:	e7b4      	b.n	800f388 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f41e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f420:	f041 0101 	orr.w	r1, r1, #1
 800f424:	6519      	str	r1, [r3, #80]	; 0x50
 800f426:	e7ec      	b.n	800f402 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d0ad      	beq.n	800f388 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f42c:	4b16      	ldr	r3, [pc, #88]	; (800f488 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f42e:	781a      	ldrb	r2, [r3, #0]
 800f430:	4b17      	ldr	r3, [pc, #92]	; (800f490 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f432:	b152      	cbz	r2, 800f44a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 800f434:	691a      	ldr	r2, [r3, #16]
 800f436:	f042 0201 	orr.w	r2, r2, #1
 800f43a:	611a      	str	r2, [r3, #16]
 800f43c:	4a0f      	ldr	r2, [pc, #60]	; (800f47c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800f43e:	4b0e      	ldr	r3, [pc, #56]	; (800f478 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800f440:	6812      	ldr	r2, [r2, #0]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	6812      	ldr	r2, [r2, #0]
 800f446:	601a      	str	r2, [r3, #0]
 800f448:	e79e      	b.n	800f388 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f44a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f44c:	f042 0201 	orr.w	r2, r2, #1
 800f450:	651a      	str	r2, [r3, #80]	; 0x50
 800f452:	e7f3      	b.n	800f43c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 800f454:	4b0c      	ldr	r3, [pc, #48]	; (800f488 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f456:	781a      	ldrb	r2, [r3, #0]
 800f458:	4b0d      	ldr	r3, [pc, #52]	; (800f490 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f45a:	b132      	cbz	r2, 800f46a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 800f45c:	691a      	ldr	r2, [r3, #16]
 800f45e:	f022 0202 	bic.w	r2, r2, #2
 800f462:	611a      	str	r2, [r3, #16]
 800f464:	2000      	movs	r0, #0
 800f466:	6020      	str	r0, [r4, #0]
 800f468:	e7b9      	b.n	800f3de <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800f46a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f46c:	f022 0202 	bic.w	r2, r2, #2
 800f470:	651a      	str	r2, [r3, #80]	; 0x50
 800f472:	e7f7      	b.n	800f464 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 800f474:	20002ef0 	strdcs	r2, [r0], -r0
 800f478:	20002eec 	andcs	r2, r0, ip, ror #29
 800f47c:	20002ef8 	strdcs	r2, [r0], -r8
 800f480:	20002f00 	andcs	r2, r0, r0, lsl #30
 800f484:	1ffff700 	svcne	0x00fff700
 800f488:	20002efc 	strdcs	r2, [r0], -ip
 800f48c:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800f490:	40022000 	andmi	r2, r2, r0

0800f494 <net_set_ip>:
 800f494:	b510      	push	{r4, lr}
 800f496:	4c05      	ldr	r4, [pc, #20]	; (800f4ac <net_set_ip+0x18>)
 800f498:	6020      	str	r0, [r4, #0]
 800f49a:	4621      	mov	r1, r4
 800f49c:	4804      	ldr	r0, [pc, #16]	; (800f4b0 <net_set_ip+0x1c>)
 800f49e:	f7f7 ff15 	bl	80072cc <arp_init>
 800f4a2:	4620      	mov	r0, r4
 800f4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4a8:	f002 b816 	b.w	80114d8 <ip_set_ip>
 800f4ac:	20002f04 	andcs	r2, r0, r4, lsl #30
 800f4b0:	20002f10 	andcs	r2, r0, r0, lsl pc

0800f4b4 <net_set_gw>:
 800f4b4:	4b02      	ldr	r3, [pc, #8]	; (800f4c0 <net_set_gw+0xc>)
 800f4b6:	6098      	str	r0, [r3, #8]
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f002 b80d 	b.w	80114d8 <ip_set_ip>
 800f4be:	bf00      	nop
 800f4c0:	20002f04 	andcs	r2, r0, r4, lsl #30

0800f4c4 <net_set_dhcp>:
 800f4c4:	b570      	push	{r4, r5, r6, lr}
 800f4c6:	2400      	movs	r4, #0
 800f4c8:	4605      	mov	r5, r0
 800f4ca:	7014      	strb	r4, [r2, #0]
 800f4cc:	4616      	mov	r6, r2
 800f4ce:	4810      	ldr	r0, [pc, #64]	; (800f510 <net_set_dhcp+0x4c>)
 800f4d0:	460a      	mov	r2, r1
 800f4d2:	4910      	ldr	r1, [pc, #64]	; (800f514 <net_set_dhcp+0x50>)
 800f4d4:	f001 fde0 	bl	8011098 <dhcp_client>
 800f4d8:	42a0      	cmp	r0, r4
 800f4da:	da17      	bge.n	800f50c <net_set_dhcp+0x48>
 800f4dc:	480d      	ldr	r0, [pc, #52]	; (800f514 <net_set_dhcp+0x50>)
 800f4de:	f000 f837 	bl	800f550 <rfc3927>
 800f4e2:	7030      	strb	r0, [r6, #0]
 800f4e4:	490b      	ldr	r1, [pc, #44]	; (800f514 <net_set_dhcp+0x50>)
 800f4e6:	480a      	ldr	r0, [pc, #40]	; (800f510 <net_set_dhcp+0x4c>)
 800f4e8:	f7f7 fef0 	bl	80072cc <arp_init>
 800f4ec:	4809      	ldr	r0, [pc, #36]	; (800f514 <net_set_dhcp+0x50>)
 800f4ee:	f001 fff3 	bl	80114d8 <ip_set_ip>
 800f4f2:	4a08      	ldr	r2, [pc, #32]	; (800f514 <net_set_dhcp+0x50>)
 800f4f4:	1e6b      	subs	r3, r5, #1
 800f4f6:	350b      	adds	r5, #11
 800f4f8:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f4fc:	f803 1f01 	strb.w	r1, [r3, #1]!
 800f500:	42ab      	cmp	r3, r5
 800f502:	d1f9      	bne.n	800f4f8 <net_set_dhcp+0x34>
 800f504:	4b04      	ldr	r3, [pc, #16]	; (800f518 <net_set_dhcp+0x54>)
 800f506:	4620      	mov	r0, r4
 800f508:	701c      	strb	r4, [r3, #0]
 800f50a:	bd70      	pop	{r4, r5, r6, pc}
 800f50c:	2401      	movs	r4, #1
 800f50e:	e7e9      	b.n	800f4e4 <net_set_dhcp+0x20>
 800f510:	20002f10 	andcs	r2, r0, r0, lsl pc
 800f514:	20002f04 	andcs	r2, r0, r4, lsl #30
 800f518:	20002f16 	andcs	r2, r0, r6, lsl pc

0800f51c <net_dhcp_release>:
 800f51c:	b508      	push	{r3, lr}
 800f51e:	f001 fec3 	bl	80112a8 <dhcp_client_release>
 800f522:	2200      	movs	r2, #0
 800f524:	4b01      	ldr	r3, [pc, #4]	; (800f52c <net_dhcp_release+0x10>)
 800f526:	701a      	strb	r2, [r3, #0]
 800f528:	bd08      	pop	{r3, pc}
 800f52a:	bf00      	nop
 800f52c:	20002f16 	andcs	r2, r0, r6, lsl pc

0800f530 <net_timers_run>:
 800f530:	4b05      	ldr	r3, [pc, #20]	; (800f548 <net_timers_run+0x18>)
 800f532:	4a06      	ldr	r2, [pc, #24]	; (800f54c <net_timers_run+0x1c>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	6811      	ldr	r1, [r2, #0]
 800f538:	4299      	cmp	r1, r3
 800f53a:	d803      	bhi.n	800f544 <net_timers_run+0x14>
 800f53c:	3364      	adds	r3, #100	; 0x64
 800f53e:	6013      	str	r3, [r2, #0]
 800f540:	f001 bf40 	b.w	80113c4 <igmp_timer>
 800f544:	4770      	bx	lr
 800f546:	bf00      	nop
 800f548:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800f54c:	20002f1c 	andcs	r2, r0, ip, lsl pc

0800f550 <rfc3927>:
 800f550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f554:	4605      	mov	r5, r0
 800f556:	26ff      	movs	r6, #255	; 0xff
 800f558:	4b18      	ldr	r3, [pc, #96]	; (800f5bc <rfc3927+0x6c>)
 800f55a:	4f19      	ldr	r7, [pc, #100]	; (800f5c0 <rfc3927+0x70>)
 800f55c:	791a      	ldrb	r2, [r3, #4]
 800f55e:	78dc      	ldrb	r4, [r3, #3]
 800f560:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800f5c4 <rfc3927+0x74>
 800f564:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800f568:	f8d7 9000 	ldr.w	r9, [r7]
 800f56c:	f8df b058 	ldr.w	fp, [pc, #88]	; 800f5c8 <rfc3927+0x78>
 800f570:	f8df a058 	ldr.w	sl, [pc, #88]	; 800f5cc <rfc3927+0x7c>
 800f574:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800f578:	4659      	mov	r1, fp
 800f57a:	4620      	mov	r0, r4
 800f57c:	f001 fc70 	bl	8010e60 <arp_cache_lookup>
 800f580:	b938      	cbnz	r0, 800f592 <rfc3927+0x42>
 800f582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f586:	2001      	movs	r0, #1
 800f588:	602c      	str	r4, [r5, #0]
 800f58a:	60ac      	str	r4, [r5, #8]
 800f58c:	606b      	str	r3, [r5, #4]
 800f58e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f592:	ba24      	rev	r4, r4
 800f594:	3401      	adds	r4, #1
 800f596:	3e01      	subs	r6, #1
 800f598:	ba24      	rev	r4, r4
 800f59a:	b2b6      	uxth	r6, r6
 800f59c:	4554      	cmp	r4, sl
 800f59e:	bf08      	it	eq
 800f5a0:	4644      	moveq	r4, r8
 800f5a2:	b12e      	cbz	r6, 800f5b0 <rfc3927+0x60>
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	eba3 0309 	sub.w	r3, r3, r9
 800f5aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f5ae:	d3e3      	bcc.n	800f578 <rfc3927+0x28>
 800f5b0:	2000      	movs	r0, #0
 800f5b2:	e9c5 0001 	strd	r0, r0, [r5, #4]
 800f5b6:	6028      	str	r0, [r5, #0]
 800f5b8:	e7e9      	b.n	800f58e <rfc3927+0x3e>
 800f5ba:	bf00      	nop
 800f5bc:	20002f20 	andcs	r2, r0, r0, lsr #30
 800f5c0:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800f5c4:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 800f5c8:	20002f28 	andcs	r2, r0, r8, lsr #30
 800f5cc:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

0800f5d0 <_init_tcb>:
 800f5d0:	b510      	push	{r4, lr}
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2400      	movs	r4, #0
 800f5d6:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d10d      	bne.n	800f5fa <_init_tcb+0x2a>
 800f5de:	4b08      	ldr	r3, [pc, #32]	; (800f600 <_init_tcb+0x30>)
 800f5e0:	f640 3268 	movw	r2, #2920	; 0xb68
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	8702      	strh	r2, [r0, #56]	; 0x38
 800f5e8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5ec:	6283      	str	r3, [r0, #40]	; 0x28
 800f5ee:	6243      	str	r3, [r0, #36]	; 0x24
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	8001      	strh	r1, [r0, #0]
 800f5f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800f5f8:	bd10      	pop	{r4, pc}
 800f5fa:	f803 4b01 	strb.w	r4, [r3], #1
 800f5fe:	e7ec      	b.n	800f5da <_init_tcb+0xa>
 800f600:	2000af0c 	andcs	sl, r0, ip, lsl #30

0800f604 <memcpy.isra.0>:
 800f604:	3801      	subs	r0, #1
 800f606:	440a      	add	r2, r1
 800f608:	4291      	cmp	r1, r2
 800f60a:	d100      	bne.n	800f60e <memcpy.isra.0+0xa>
 800f60c:	4770      	bx	lr
 800f60e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f612:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f616:	e7f7      	b.n	800f608 <memcpy.isra.0+0x4>

0800f618 <_bswap32>:
 800f618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f61a:	2204      	movs	r2, #4
 800f61c:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 800f620:	4629      	mov	r1, r5
 800f622:	4604      	mov	r4, r0
 800f624:	eb0d 0002 	add.w	r0, sp, r2
 800f628:	f7ff ffec 	bl	800f604 <memcpy.isra.0>
 800f62c:	2204      	movs	r2, #4
 800f62e:	9b01      	ldr	r3, [sp, #4]
 800f630:	eb0d 0102 	add.w	r1, sp, r2
 800f634:	ba1b      	rev	r3, r3
 800f636:	4628      	mov	r0, r5
 800f638:	9301      	str	r3, [sp, #4]
 800f63a:	f7ff ffe3 	bl	800f604 <memcpy.isra.0>
 800f63e:	2204      	movs	r2, #4
 800f640:	3426      	adds	r4, #38	; 0x26
 800f642:	eb0d 0002 	add.w	r0, sp, r2
 800f646:	4621      	mov	r1, r4
 800f648:	f7ff ffdc 	bl	800f604 <memcpy.isra.0>
 800f64c:	2204      	movs	r2, #4
 800f64e:	9b01      	ldr	r3, [sp, #4]
 800f650:	4620      	mov	r0, r4
 800f652:	ba1b      	rev	r3, r3
 800f654:	eb0d 0102 	add.w	r1, sp, r2
 800f658:	9301      	str	r3, [sp, #4]
 800f65a:	f7ff ffd3 	bl	800f604 <memcpy.isra.0>
 800f65e:	b003      	add	sp, #12
 800f660:	bd30      	pop	{r4, r5, pc}
	...

0800f664 <_tcp_send_package>:
 800f664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f668:	7a0b      	ldrb	r3, [r1, #8]
 800f66a:	4605      	mov	r5, r0
 800f66c:	f013 0f02 	tst.w	r3, #2
 800f670:	bf0c      	ite	eq
 800f672:	f04f 0905 	moveq.w	r9, #5
 800f676:	f04f 0906 	movne.w	r9, #6
 800f67a:	f04f 0800 	mov.w	r8, #0
 800f67e:	4c4b      	ldr	r4, [pc, #300]	; (800f7ac <_tcp_send_package+0x148>)
 800f680:	460f      	mov	r7, r1
 800f682:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 800f684:	f100 0108 	add.w	r1, r0, #8
 800f688:	2206      	movs	r2, #6
 800f68a:	4620      	mov	r0, r4
 800f68c:	f7ff ffba 	bl	800f604 <memcpy.isra.0>
 800f690:	4a47      	ldr	r2, [pc, #284]	; (800f7b0 <_tcp_send_package+0x14c>)
 800f692:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 800f696:	8813      	ldrh	r3, [r2, #0]
 800f698:	b2b6      	uxth	r6, r6
 800f69a:	1c59      	adds	r1, r3, #1
 800f69c:	8263      	strh	r3, [r4, #18]
 800f69e:	f105 0a04 	add.w	sl, r5, #4
 800f6a2:	f106 0314 	add.w	r3, r6, #20
 800f6a6:	ba5b      	rev16	r3, r3
 800f6a8:	8011      	strh	r1, [r2, #0]
 800f6aa:	f104 001e 	add.w	r0, r4, #30
 800f6ae:	2204      	movs	r2, #4
 800f6b0:	4651      	mov	r1, sl
 800f6b2:	8223      	strh	r3, [r4, #16]
 800f6b4:	f7ff ffa6 	bl	800f604 <memcpy.isra.0>
 800f6b8:	2114      	movs	r1, #20
 800f6ba:	f104 000e 	add.w	r0, r4, #14
 800f6be:	f884 8018 	strb.w	r8, [r4, #24]
 800f6c2:	f884 8019 	strb.w	r8, [r4, #25]
 800f6c6:	f001 ff10 	bl	80114ea <net_chksum>
 800f6ca:	882b      	ldrh	r3, [r5, #0]
 800f6cc:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800f6d0:	8463      	strh	r3, [r4, #34]	; 0x22
 800f6d2:	886b      	ldrh	r3, [r5, #2]
 800f6d4:	8320      	strh	r0, [r4, #24]
 800f6d6:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 800f6dc:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 800f6e6:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 800f6ea:	7a3b      	ldrb	r3, [r7, #8]
 800f6ec:	8622      	strh	r2, [r4, #48]	; 0x30
 800f6ee:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800f6f2:	079b      	lsls	r3, r3, #30
 800f6f4:	bf48      	it	mi
 800f6f6:	2302      	movmi	r3, #2
 800f6f8:	8baa      	ldrh	r2, [r5, #28]
 800f6fa:	bf44      	itt	mi
 800f6fc:	f884 3036 	strbmi.w	r3, [r4, #54]	; 0x36
 800f700:	2304      	movmi	r3, #4
 800f702:	86a2      	strh	r2, [r4, #52]	; 0x34
 800f704:	bf41      	itttt	mi
 800f706:	f884 3037 	strbmi.w	r3, [r4, #55]	; 0x37
 800f70a:	4622      	movmi	r2, r4
 800f70c:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 800f710:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 800f714:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f716:	f884 8032 	strb.w	r8, [r4, #50]	; 0x32
 800f71a:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
 800f71e:	bf58      	it	pl
 800f720:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 800f724:	2b00      	cmp	r3, #0
 800f726:	d13f      	bne.n	800f7a8 <_tcp_send_package+0x144>
 800f728:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800f72a:	4820      	ldr	r0, [pc, #128]	; (800f7ac <_tcp_send_package+0x148>)
 800f72c:	ba5b      	rev16	r3, r3
 800f72e:	8463      	strh	r3, [r4, #34]	; 0x22
 800f730:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800f732:	ba5b      	rev16	r3, r3
 800f734:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f736:	f7ff ff6f 	bl	800f618 <_bswap32>
 800f73a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800f73c:	a801      	add	r0, sp, #4
 800f73e:	ba5b      	rev16	r3, r3
 800f740:	8623      	strh	r3, [r4, #48]	; 0x30
 800f742:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f744:	220c      	movs	r2, #12
 800f746:	ba5b      	rev16	r3, r3
 800f748:	491a      	ldr	r1, [pc, #104]	; (800f7b4 <_tcp_send_package+0x150>)
 800f74a:	86a3      	strh	r3, [r4, #52]	; 0x34
 800f74c:	f7ff ff5a 	bl	800f604 <memcpy.isra.0>
 800f750:	2204      	movs	r2, #4
 800f752:	4919      	ldr	r1, [pc, #100]	; (800f7b8 <_tcp_send_package+0x154>)
 800f754:	4817      	ldr	r0, [pc, #92]	; (800f7b4 <_tcp_send_package+0x150>)
 800f756:	f7ff ff55 	bl	800f604 <memcpy.isra.0>
 800f75a:	2204      	movs	r2, #4
 800f75c:	4651      	mov	r1, sl
 800f75e:	4817      	ldr	r0, [pc, #92]	; (800f7bc <_tcp_send_package+0x158>)
 800f760:	f7ff ff50 	bl	800f604 <memcpy.isra.0>
 800f764:	2300      	movs	r3, #0
 800f766:	77a3      	strb	r3, [r4, #30]
 800f768:	2306      	movs	r3, #6
 800f76a:	f106 010c 	add.w	r1, r6, #12
 800f76e:	77e3      	strb	r3, [r4, #31]
 800f770:	4810      	ldr	r0, [pc, #64]	; (800f7b4 <_tcp_send_package+0x150>)
 800f772:	ba73      	rev16	r3, r6
 800f774:	8423      	strh	r3, [r4, #32]
 800f776:	f001 feb8 	bl	80114ea <net_chksum>
 800f77a:	a901      	add	r1, sp, #4
 800f77c:	4605      	mov	r5, r0
 800f77e:	220c      	movs	r2, #12
 800f780:	480c      	ldr	r0, [pc, #48]	; (800f7b4 <_tcp_send_package+0x150>)
 800f782:	f7ff ff3f 	bl	800f604 <memcpy.isra.0>
 800f786:	4809      	ldr	r0, [pc, #36]	; (800f7ac <_tcp_send_package+0x148>)
 800f788:	f106 0122 	add.w	r1, r6, #34	; 0x22
 800f78c:	8665      	strh	r5, [r4, #50]	; 0x32
 800f78e:	b004      	add	sp, #16
 800f790:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f794:	f004 bd2a 	b.w	80141ec <emac_eth_send>
 800f798:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800f79a:	5cc9      	ldrb	r1, [r1, r3]
 800f79c:	54d1      	strb	r1, [r2, r3]
 800f79e:	3301      	adds	r3, #1
 800f7a0:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800f7a2:	4299      	cmp	r1, r3
 800f7a4:	d8f8      	bhi.n	800f798 <_tcp_send_package+0x134>
 800f7a6:	e7bf      	b.n	800f728 <_tcp_send_package+0xc4>
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	e7f9      	b.n	800f7a0 <_tcp_send_package+0x13c>
 800f7ac:	20003ae4 	andcs	r3, r0, r4, ror #21
 800f7b0:	20002f2e 	andcs	r2, r0, lr, lsr #30
 800f7b4:	20003afa 	strdcs	r3, [r0], -sl
 800f7b8:	20002f04 	andcs	r2, r0, r4, lsl #30
 800f7bc:	20003afe 	strdcs	r3, [r0], -lr

0800f7c0 <_send_reset>:
 800f7c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f7c2:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	075a      	lsls	r2, r3, #29
 800f7ca:	460e      	mov	r6, r1
 800f7cc:	d421      	bmi.n	800f812 <_send_reset+0x52>
 800f7ce:	2204      	movs	r2, #4
 800f7d0:	f013 0310 	ands.w	r3, r3, #16
 800f7d4:	f88d 200c 	strb.w	r2, [sp, #12]
 800f7d8:	d01d      	beq.n	800f816 <_send_reset+0x56>
 800f7da:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 800f7de:	4668      	mov	r0, sp
 800f7e0:	f7ff ff10 	bl	800f604 <memcpy.isra.0>
 800f7e4:	9b00      	ldr	r3, [sp, #0]
 800f7e6:	9301      	str	r3, [sp, #4]
 800f7e8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800f7ec:	4668      	mov	r0, sp
 800f7ee:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800f7f2:	f104 0126 	add.w	r1, r4, #38	; 0x26
 800f7f6:	07db      	lsls	r3, r3, #31
 800f7f8:	f04f 0204 	mov.w	r2, #4
 800f7fc:	bf48      	it	mi
 800f7fe:	3501      	addmi	r5, #1
 800f800:	f7ff ff00 	bl	800f604 <memcpy.isra.0>
 800f804:	9b00      	ldr	r3, [sp, #0]
 800f806:	4630      	mov	r0, r6
 800f808:	441d      	add	r5, r3
 800f80a:	a901      	add	r1, sp, #4
 800f80c:	9502      	str	r5, [sp, #8]
 800f80e:	f7ff ff29 	bl	800f664 <_tcp_send_package>
 800f812:	b004      	add	sp, #16
 800f814:	bd70      	pop	{r4, r5, r6, pc}
 800f816:	9301      	str	r3, [sp, #4]
 800f818:	2314      	movs	r3, #20
 800f81a:	f88d 300c 	strb.w	r3, [sp, #12]
 800f81e:	e7e3      	b.n	800f7e8 <_send_reset+0x28>

0800f820 <tcp_begin>:
 800f820:	b508      	push	{r3, lr}
 800f822:	4b0a      	ldr	r3, [pc, #40]	; (800f84c <tcp_begin+0x2c>)
 800f824:	4601      	mov	r1, r0
 800f826:	881a      	ldrh	r2, [r3, #0]
 800f828:	4282      	cmp	r2, r0
 800f82a:	d102      	bne.n	800f832 <tcp_begin+0x12>
 800f82c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f830:	b130      	cbz	r0, 800f840 <tcp_begin+0x20>
 800f832:	b12a      	cbz	r2, 800f840 <tcp_begin+0x20>
 800f834:	4806      	ldr	r0, [pc, #24]	; (800f850 <tcp_begin+0x30>)
 800f836:	f003 f88b 	bl	8012950 <console_error>
 800f83a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f83e:	bd08      	pop	{r3, pc}
 800f840:	4802      	ldr	r0, [pc, #8]	; (800f84c <tcp_begin+0x2c>)
 800f842:	8019      	strh	r1, [r3, #0]
 800f844:	f7ff fec4 	bl	800f5d0 <_init_tcb>
 800f848:	2000      	movs	r0, #0
 800f84a:	e7f8      	b.n	800f83e <tcp_begin+0x1e>
 800f84c:	20003aa0 	andcs	r3, r0, r0, lsr #21
 800f850:	08016c25 	stmdaeq	r1, {r0, r2, r5, sl, fp, sp, lr}

0800f854 <tcp_write>:
 800f854:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800f858:	429a      	cmp	r2, r3
 800f85a:	bf28      	it	cs
 800f85c:	461a      	movcs	r2, r3
 800f85e:	2344      	movs	r3, #68	; 0x44
 800f860:	b530      	push	{r4, r5, lr}
 800f862:	4c0d      	ldr	r4, [pc, #52]	; (800f898 <tcp_write+0x44>)
 800f864:	b085      	sub	sp, #20
 800f866:	fb03 4400 	mla	r4, r3, r0, r4
 800f86a:	6963      	ldr	r3, [r4, #20]
 800f86c:	4615      	mov	r5, r2
 800f86e:	9301      	str	r3, [sp, #4]
 800f870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f872:	62e1      	str	r1, [r4, #44]	; 0x2c
 800f874:	9302      	str	r3, [sp, #8]
 800f876:	2318      	movs	r3, #24
 800f878:	8622      	strh	r2, [r4, #48]	; 0x30
 800f87a:	4620      	mov	r0, r4
 800f87c:	a901      	add	r1, sp, #4
 800f87e:	f88d 300c 	strb.w	r3, [sp, #12]
 800f882:	f7ff feef 	bl	800f664 <_tcp_send_package>
 800f886:	2300      	movs	r3, #0
 800f888:	6962      	ldr	r2, [r4, #20]
 800f88a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f88c:	442a      	add	r2, r5
 800f88e:	8623      	strh	r3, [r4, #48]	; 0x30
 800f890:	6162      	str	r2, [r4, #20]
 800f892:	b005      	add	sp, #20
 800f894:	bd30      	pop	{r4, r5, pc}
 800f896:	bf00      	nop
 800f898:	20003aa0 	andcs	r3, r0, r0, lsr #21

0800f89c <tcp_read>:
 800f89c:	2344      	movs	r3, #68	; 0x44
 800f89e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8a0:	4c1c      	ldr	r4, [pc, #112]	; (800f914 <tcp_read+0x78>)
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	fb03 4400 	mla	r4, r3, r0, r4
 800f8a8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f8ac:	2b07      	cmp	r3, #7
 800f8ae:	d112      	bne.n	800f8d6 <tcp_read+0x3a>
 800f8b0:	6963      	ldr	r3, [r4, #20]
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	9301      	str	r3, [sp, #4]
 800f8b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8b8:	a901      	add	r1, sp, #4
 800f8ba:	9302      	str	r3, [sp, #8]
 800f8bc:	2311      	movs	r3, #17
 800f8be:	f88d 300c 	strb.w	r3, [sp, #12]
 800f8c2:	f7ff fecf 	bl	800f664 <_tcp_send_package>
 800f8c6:	2309      	movs	r3, #9
 800f8c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f8cc:	6963      	ldr	r3, [r4, #20]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	6163      	str	r3, [r4, #20]
 800f8d2:	2000      	movs	r0, #0
 800f8d4:	e01b      	b.n	800f90e <tcp_read+0x72>
 800f8d6:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 800f8da:	4358      	muls	r0, r3
 800f8dc:	4a0e      	ldr	r2, [pc, #56]	; (800f918 <tcp_read+0x7c>)
 800f8de:	1817      	adds	r7, r2, r0
 800f8e0:	887b      	ldrh	r3, [r7, #2]
 800f8e2:	5a15      	ldrh	r5, [r2, r0]
 800f8e4:	429d      	cmp	r5, r3
 800f8e6:	d0f4      	beq.n	800f8d2 <tcp_read+0x36>
 800f8e8:	f240 55b6 	movw	r5, #1462	; 0x5b6
 800f8ec:	435d      	muls	r5, r3
 800f8ee:	1d06      	adds	r6, r0, #4
 800f8f0:	442e      	add	r6, r5
 800f8f2:	4416      	add	r6, r2
 800f8f4:	4428      	add	r0, r5
 800f8f6:	600e      	str	r6, [r1, #0]
 800f8f8:	4402      	add	r2, r0
 800f8fa:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 800f8fe:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800f900:	3301      	adds	r3, #1
 800f902:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800f906:	f003 0301 	and.w	r3, r3, #1
 800f90a:	8722      	strh	r2, [r4, #56]	; 0x38
 800f90c:	807b      	strh	r3, [r7, #2]
 800f90e:	b005      	add	sp, #20
 800f910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f912:	bf00      	nop
 800f914:	20003aa0 	andcs	r3, r0, r0, lsr #21
 800f918:	20002f30 	andcs	r2, r0, r0, lsr pc

0800f91c <memcpy.isra.0>:
 800f91c:	3801      	subs	r0, #1
 800f91e:	440a      	add	r2, r1
 800f920:	4291      	cmp	r1, r2
 800f922:	d100      	bne.n	800f926 <memcpy.isra.0+0xa>
 800f924:	4770      	bx	lr
 800f926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f92a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f92e:	e7f7      	b.n	800f920 <memcpy.isra.0+0x4>

0800f930 <net_memcpy>:
 800f930:	ea41 0300 	orr.w	r3, r1, r0
 800f934:	079b      	lsls	r3, r3, #30
 800f936:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f938:	d115      	bne.n	800f966 <net_memcpy+0x36>
 800f93a:	f022 0303 	bic.w	r3, r2, #3
 800f93e:	1f04      	subs	r4, r0, #4
 800f940:	0895      	lsrs	r5, r2, #2
 800f942:	18ce      	adds	r6, r1, r3
 800f944:	42b1      	cmp	r1, r6
 800f946:	d109      	bne.n	800f95c <net_memcpy+0x2c>
 800f948:	f06f 0403 	mvn.w	r4, #3
 800f94c:	fb04 2205 	mla	r2, r4, r5, r2
 800f950:	4403      	add	r3, r0
 800f952:	3b01      	subs	r3, #1
 800f954:	440a      	add	r2, r1
 800f956:	4291      	cmp	r1, r2
 800f958:	d107      	bne.n	800f96a <net_memcpy+0x3a>
 800f95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f95c:	f851 7b04 	ldr.w	r7, [r1], #4
 800f960:	f844 7f04 	str.w	r7, [r4, #4]!
 800f964:	e7ee      	b.n	800f944 <net_memcpy+0x14>
 800f966:	4603      	mov	r3, r0
 800f968:	e7f3      	b.n	800f952 <net_memcpy+0x22>
 800f96a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f96e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f972:	e7f0      	b.n	800f956 <net_memcpy+0x26>

0800f974 <udp_set_ip>:
 800f974:	2204      	movs	r2, #4
 800f976:	b513      	push	{r0, r1, r4, lr}
 800f978:	4604      	mov	r4, r0
 800f97a:	6803      	ldr	r3, [r0, #0]
 800f97c:	eb0d 0102 	add.w	r1, sp, r2
 800f980:	4808      	ldr	r0, [pc, #32]	; (800f9a4 <udp_set_ip+0x30>)
 800f982:	9301      	str	r3, [sp, #4]
 800f984:	f7ff ffca 	bl	800f91c <memcpy.isra.0>
 800f988:	6862      	ldr	r2, [r4, #4]
 800f98a:	4b07      	ldr	r3, [pc, #28]	; (800f9a8 <udp_set_ip+0x34>)
 800f98c:	43d1      	mvns	r1, r2
 800f98e:	6019      	str	r1, [r3, #0]
 800f990:	6823      	ldr	r3, [r4, #0]
 800f992:	4013      	ands	r3, r2
 800f994:	4a05      	ldr	r2, [pc, #20]	; (800f9ac <udp_set_ip+0x38>)
 800f996:	6013      	str	r3, [r2, #0]
 800f998:	68a2      	ldr	r2, [r4, #8]
 800f99a:	4b05      	ldr	r3, [pc, #20]	; (800f9b0 <udp_set_ip+0x3c>)
 800f99c:	601a      	str	r2, [r3, #0]
 800f99e:	b002      	add	sp, #8
 800f9a0:	bd10      	pop	{r4, pc}
 800f9a2:	bf00      	nop
 800f9a4:	20009dba 			; <UNDEFINED> instruction: 0x20009dba
 800f9a8:	200040d0 	ldrdcs	r4, [r0], -r0
 800f9ac:	200040d8 	ldrdcs	r4, [r0], -r8
 800f9b0:	200040d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>

0800f9b4 <udp_bind>:
 800f9b4:	4a0a      	ldr	r2, [pc, #40]	; (800f9e0 <udp_bind+0x2c>)
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	b510      	push	{r4, lr}
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	4614      	mov	r4, r2
 800f9be:	f852 1b04 	ldr.w	r1, [r2], #4
 800f9c2:	4299      	cmp	r1, r3
 800f9c4:	d008      	beq.n	800f9d8 <udp_bind+0x24>
 800f9c6:	b141      	cbz	r1, 800f9da <udp_bind+0x26>
 800f9c8:	3001      	adds	r0, #1
 800f9ca:	2808      	cmp	r0, #8
 800f9cc:	d1f7      	bne.n	800f9be <udp_bind+0xa>
 800f9ce:	4805      	ldr	r0, [pc, #20]	; (800f9e4 <udp_bind+0x30>)
 800f9d0:	f002 ffbe 	bl	8012950 <console_error>
 800f9d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9d8:	bd10      	pop	{r4, pc}
 800f9da:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800f9de:	e7fb      	b.n	800f9d8 <udp_bind+0x24>
 800f9e0:	200040e0 	andcs	r4, r0, r0, ror #1
 800f9e4:	08016c45 	stmdaeq	r1, {r0, r2, r6, sl, fp, sp, lr}

0800f9e8 <udp_unbind>:
 800f9e8:	4a0c      	ldr	r2, [pc, #48]	; (800fa1c <udp_unbind+0x34>)
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	4611      	mov	r1, r2
 800f9ee:	b510      	push	{r4, lr}
 800f9f0:	f852 4b04 	ldr.w	r4, [r2], #4
 800f9f4:	4284      	cmp	r4, r0
 800f9f6:	d108      	bne.n	800fa0a <udp_unbind+0x22>
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	f640 3294 	movw	r2, #2964	; 0xb94
 800f9fe:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800fa02:	4353      	muls	r3, r2
 800fa04:	4a06      	ldr	r2, [pc, #24]	; (800fa20 <udp_unbind+0x38>)
 800fa06:	5098      	str	r0, [r3, r2]
 800fa08:	bd10      	pop	{r4, pc}
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	2b08      	cmp	r3, #8
 800fa0e:	d1ef      	bne.n	800f9f0 <udp_unbind+0x8>
 800fa10:	4804      	ldr	r0, [pc, #16]	; (800fa24 <udp_unbind+0x3c>)
 800fa12:	f002 ff9d 	bl	8012950 <console_error>
 800fa16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa1a:	e7f5      	b.n	800fa08 <udp_unbind+0x20>
 800fa1c:	200040e0 	andcs	r4, r0, r0, ror #1
 800fa20:	20004100 	andcs	r4, r0, r0, lsl #2
 800fa24:	08016c4a 	stmdaeq	r1, {r1, r3, r6, sl, fp, sp, lr}

0800fa28 <udp_recv>:
 800fa28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa2c:	4604      	mov	r4, r0
 800fa2e:	4698      	mov	r8, r3
 800fa30:	f640 3394 	movw	r3, #2964	; 0xb94
 800fa34:	435c      	muls	r4, r3
 800fa36:	4608      	mov	r0, r1
 800fa38:	4915      	ldr	r1, [pc, #84]	; (800fa90 <udp_recv+0x68>)
 800fa3a:	190f      	adds	r7, r1, r4
 800fa3c:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800fa40:	5b0b      	ldrh	r3, [r1, r4]
 800fa42:	4563      	cmp	r3, ip
 800fa44:	d021      	beq.n	800fa8a <udp_recv+0x62>
 800fa46:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800fa4a:	fb03 fc0c 	mul.w	ip, r3, ip
 800fa4e:	eb0c 0604 	add.w	r6, ip, r4
 800fa52:	440e      	add	r6, r1
 800fa54:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 800fa58:	3404      	adds	r4, #4
 800fa5a:	4295      	cmp	r5, r2
 800fa5c:	bf28      	it	cs
 800fa5e:	4615      	movcs	r5, r2
 800fa60:	4464      	add	r4, ip
 800fa62:	462a      	mov	r2, r5
 800fa64:	4421      	add	r1, r4
 800fa66:	f7ff ff63 	bl	800f930 <net_memcpy>
 800fa6a:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 800fa6e:	f8c8 3000 	str.w	r3, [r8]
 800fa72:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 800fa76:	9b06      	ldr	r3, [sp, #24]
 800fa78:	801a      	strh	r2, [r3, #0]
 800fa7a:	887b      	ldrh	r3, [r7, #2]
 800fa7c:	3301      	adds	r3, #1
 800fa7e:	f003 0301 	and.w	r3, r3, #1
 800fa82:	807b      	strh	r3, [r7, #2]
 800fa84:	4628      	mov	r0, r5
 800fa86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa8a:	2500      	movs	r5, #0
 800fa8c:	e7fa      	b.n	800fa84 <udp_recv+0x5c>
 800fa8e:	bf00      	nop
 800fa90:	20004100 	andcs	r4, r0, r0, lsl #2

0800fa94 <udp_recv2>:
 800fa94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa96:	f640 3594 	movw	r5, #2964	; 0xb94
 800fa9a:	4368      	muls	r0, r5
 800fa9c:	4c0f      	ldr	r4, [pc, #60]	; (800fadc <udp_recv2+0x48>)
 800fa9e:	1827      	adds	r7, r4, r0
 800faa0:	887d      	ldrh	r5, [r7, #2]
 800faa2:	5a26      	ldrh	r6, [r4, r0]
 800faa4:	42ae      	cmp	r6, r5
 800faa6:	d017      	beq.n	800fad8 <udp_recv2+0x44>
 800faa8:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 800faac:	fb0c f505 	mul.w	r5, ip, r5
 800fab0:	1d06      	adds	r6, r0, #4
 800fab2:	442e      	add	r6, r5
 800fab4:	4405      	add	r5, r0
 800fab6:	4426      	add	r6, r4
 800fab8:	442c      	add	r4, r5
 800faba:	600e      	str	r6, [r1, #0]
 800fabc:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 800fac0:	6011      	str	r1, [r2, #0]
 800fac2:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 800fac6:	801a      	strh	r2, [r3, #0]
 800fac8:	887b      	ldrh	r3, [r7, #2]
 800faca:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 800face:	3301      	adds	r3, #1
 800fad0:	f003 0301 	and.w	r3, r3, #1
 800fad4:	807b      	strh	r3, [r7, #2]
 800fad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fad8:	2000      	movs	r0, #0
 800fada:	e7fc      	b.n	800fad6 <udp_recv2+0x42>
 800fadc:	20004100 	andcs	r4, r0, r0, lsl #2

0800fae0 <udp_send>:
 800fae0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fae4:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800fc18 <udp_send+0x138>
 800fae8:	461c      	mov	r4, r3
 800faea:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 800faee:	4607      	mov	r7, r0
 800faf0:	4688      	mov	r8, r1
 800faf2:	4616      	mov	r6, r2
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f000 808b 	beq.w	800fc10 <udp_send+0x130>
 800fafa:	1c63      	adds	r3, r4, #1
 800fafc:	d141      	bne.n	800fb82 <udp_send+0xa2>
 800fafe:	4a47      	ldr	r2, [pc, #284]	; (800fc1c <udp_send+0x13c>)
 800fb00:	2307      	movs	r3, #7
 800fb02:	4611      	mov	r1, r2
 800fb04:	20ff      	movs	r0, #255	; 0xff
 800fb06:	e001      	b.n	800fb0c <udp_send+0x2c>
 800fb08:	f802 0b01 	strb.w	r0, [r2], #1
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	d1fb      	bne.n	800fb08 <udp_send+0x28>
 800fb10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb14:	83cb      	strh	r3, [r1, #30]
 800fb16:	840b      	strh	r3, [r1, #32]
 800fb18:	2500      	movs	r5, #0
 800fb1a:	f8df a104 	ldr.w	sl, [pc, #260]	; 800fc20 <udp_send+0x140>
 800fb1e:	4c3f      	ldr	r4, [pc, #252]	; (800fc1c <udp_send+0x13c>)
 800fb20:	f8ba 3000 	ldrh.w	r3, [sl]
 800fb24:	2114      	movs	r1, #20
 800fb26:	8263      	strh	r3, [r4, #18]
 800fb28:	f106 031c 	add.w	r3, r6, #28
 800fb2c:	ba5b      	rev16	r3, r3
 800fb2e:	f104 000e 	add.w	r0, r4, #14
 800fb32:	8223      	strh	r3, [r4, #16]
 800fb34:	8325      	strh	r5, [r4, #24]
 800fb36:	f001 fcd8 	bl	80114ea <net_chksum>
 800fb3a:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 800fb3e:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800fb42:	ba5b      	rev16	r3, r3
 800fb44:	8463      	strh	r3, [r4, #34]	; 0x22
 800fb46:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800fb4a:	4632      	mov	r2, r6
 800fb4c:	ba5b      	rev16	r3, r3
 800fb4e:	84a3      	strh	r3, [r4, #36]	; 0x24
 800fb50:	f106 0308 	add.w	r3, r6, #8
 800fb54:	ba5b      	rev16	r3, r3
 800fb56:	bf28      	it	cs
 800fb58:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 800fb5c:	4641      	mov	r1, r8
 800fb5e:	8320      	strh	r0, [r4, #24]
 800fb60:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800fb64:	84e3      	strh	r3, [r4, #38]	; 0x26
 800fb66:	f7ff fee3 	bl	800f930 <net_memcpy>
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 800fb70:	f004 fb3c 	bl	80141ec <emac_eth_send>
 800fb74:	f8ba 3000 	ldrh.w	r3, [sl]
 800fb78:	4628      	mov	r0, r5
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	f8aa 3000 	strh.w	r3, [sl]
 800fb80:	e037      	b.n	800fbf2 <udp_send+0x112>
 800fb82:	4b28      	ldr	r3, [pc, #160]	; (800fc24 <udp_send+0x144>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	43a3      	bics	r3, r4
 800fb88:	d10f      	bne.n	800fbaa <udp_send+0xca>
 800fb8a:	2307      	movs	r3, #7
 800fb8c:	21ff      	movs	r1, #255	; 0xff
 800fb8e:	4a23      	ldr	r2, [pc, #140]	; (800fc1c <udp_send+0x13c>)
 800fb90:	e001      	b.n	800fb96 <udp_send+0xb6>
 800fb92:	f802 1b01 	strb.w	r1, [r2], #1
 800fb96:	3b01      	subs	r3, #1
 800fb98:	d1fb      	bne.n	800fb92 <udp_send+0xb2>
 800fb9a:	2204      	movs	r2, #4
 800fb9c:	4822      	ldr	r0, [pc, #136]	; (800fc28 <udp_send+0x148>)
 800fb9e:	eb0d 0102 	add.w	r1, sp, r2
 800fba2:	9401      	str	r4, [sp, #4]
 800fba4:	f7ff feba 	bl	800f91c <memcpy.isra.0>
 800fba8:	e7b6      	b.n	800fb18 <udp_send+0x38>
 800fbaa:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 800fbae:	2be0      	cmp	r3, #224	; 0xe0
 800fbb0:	d10e      	bne.n	800fbd0 <udp_send+0xf0>
 800fbb2:	491e      	ldr	r1, [pc, #120]	; (800fc2c <udp_send+0x14c>)
 800fbb4:	f3c4 2306 	ubfx	r3, r4, #8, #7
 800fbb8:	70cb      	strb	r3, [r1, #3]
 800fbba:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800fbbe:	710b      	strb	r3, [r1, #4]
 800fbc0:	f3c4 6307 	ubfx	r3, r4, #24, #8
 800fbc4:	2206      	movs	r2, #6
 800fbc6:	4815      	ldr	r0, [pc, #84]	; (800fc1c <udp_send+0x13c>)
 800fbc8:	714b      	strb	r3, [r1, #5]
 800fbca:	f7ff fea7 	bl	800f91c <memcpy.isra.0>
 800fbce:	e7e4      	b.n	800fb9a <udp_send+0xba>
 800fbd0:	4b17      	ldr	r3, [pc, #92]	; (800fc30 <udp_send+0x150>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	43a3      	bics	r3, r4
 800fbd6:	d00f      	beq.n	800fbf8 <udp_send+0x118>
 800fbd8:	4d16      	ldr	r5, [pc, #88]	; (800fc34 <udp_send+0x154>)
 800fbda:	4910      	ldr	r1, [pc, #64]	; (800fc1c <udp_send+0x13c>)
 800fbdc:	6828      	ldr	r0, [r5, #0]
 800fbde:	f001 f93f 	bl	8010e60 <arp_cache_lookup>
 800fbe2:	682b      	ldr	r3, [r5, #0]
 800fbe4:	4298      	cmp	r0, r3
 800fbe6:	d0d8      	beq.n	800fb9a <udp_send+0xba>
 800fbe8:	4813      	ldr	r0, [pc, #76]	; (800fc38 <udp_send+0x158>)
 800fbea:	f002 feb1 	bl	8012950 <console_error>
 800fbee:	f06f 0002 	mvn.w	r0, #2
 800fbf2:	b002      	add	sp, #8
 800fbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	4908      	ldr	r1, [pc, #32]	; (800fc1c <udp_send+0x13c>)
 800fbfc:	f001 f930 	bl	8010e60 <arp_cache_lookup>
 800fc00:	42a0      	cmp	r0, r4
 800fc02:	d0ca      	beq.n	800fb9a <udp_send+0xba>
 800fc04:	480d      	ldr	r0, [pc, #52]	; (800fc3c <udp_send+0x15c>)
 800fc06:	f002 fea3 	bl	8012950 <console_error>
 800fc0a:	f06f 0001 	mvn.w	r0, #1
 800fc0e:	e7f0      	b.n	800fbf2 <udp_send+0x112>
 800fc10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc14:	e7ed      	b.n	800fbf2 <udp_send+0x112>
 800fc16:	bf00      	nop
 800fc18:	200040e0 	andcs	r4, r0, r0, ror #1
 800fc1c:	20009da0 	andcs	r9, r0, r0, lsr #27
 800fc20:	200040dc 	ldrdcs	r4, [r0], -ip
 800fc24:	200040d0 	ldrdcs	r4, [r0], -r0
 800fc28:	20009dbe 			; <UNDEFINED> instruction: 0x20009dbe
 800fc2c:	20000014 	andcs	r0, r0, r4, lsl r0
 800fc30:	200040d8 	ldrdcs	r4, [r0], -r8
 800fc34:	200040d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
 800fc38:	08016c52 	stmdaeq	r1, {r1, r4, r6, sl, fp, sp, lr}
 800fc3c:	08016c78 	stmdaeq	r1, {r3, r4, r5, r6, sl, fp, sp, lr}

0800fc40 <strlen>:
 800fc40:	4603      	mov	r3, r0
 800fc42:	461a      	mov	r2, r3
 800fc44:	7811      	ldrb	r1, [r2, #0]
 800fc46:	3301      	adds	r3, #1
 800fc48:	2900      	cmp	r1, #0
 800fc4a:	d1fa      	bne.n	800fc42 <strlen+0x2>
 800fc4c:	1a10      	subs	r0, r2, r0
 800fc4e:	4770      	bx	lr

0800fc50 <strcmp>:
 800fc50:	1e43      	subs	r3, r0, #1
 800fc52:	3901      	subs	r1, #1
 800fc54:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800fc58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fc5c:	4290      	cmp	r0, r2
 800fc5e:	d102      	bne.n	800fc66 <strcmp+0x16>
 800fc60:	2800      	cmp	r0, #0
 800fc62:	d1f7      	bne.n	800fc54 <strcmp+0x4>
 800fc64:	4770      	bx	lr
 800fc66:	1a80      	subs	r0, r0, r2
 800fc68:	4770      	bx	lr

0800fc6a <strcpy.isra.0>:
 800fc6a:	3801      	subs	r0, #1
 800fc6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc70:	f800 3f01 	strb.w	r3, [r0, #1]!
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d1f9      	bne.n	800fc6c <strcpy.isra.0+0x2>
 800fc78:	4770      	bx	lr

0800fc7a <strcat.isra.0>:
 800fc7a:	b538      	push	{r3, r4, r5, lr}
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	460d      	mov	r5, r1
 800fc80:	f7ff ffde 	bl	800fc40 <strlen>
 800fc84:	4629      	mov	r1, r5
 800fc86:	4420      	add	r0, r4
 800fc88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc8c:	f7ff bfed 	b.w	800fc6a <strcpy.isra.0>

0800fc90 <MDNS::MDNS()>:
 800fc90:	b513      	push	{r0, r1, r4, lr}
 800fc92:	4604      	mov	r4, r0
 800fc94:	a901      	add	r1, sp, #4
 800fc96:	4804      	ldr	r0, [pc, #16]	; (800fca8 <MDNS::MDNS()+0x18>)
 800fc98:	f002 ffd8 	bl	8012c4c <inet_aton>
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4b03      	ldr	r3, [pc, #12]	; (800fcac <MDNS::MDNS()+0x1c>)
 800fca0:	9a01      	ldr	r2, [sp, #4]
 800fca2:	601a      	str	r2, [r3, #0]
 800fca4:	b002      	add	sp, #8
 800fca6:	bd10      	pop	{r4, pc}
 800fca8:	08016c98 	stmdaeq	r1, {r3, r4, r7, sl, fp, sp, lr}
 800fcac:	2000a394 	mulcs	r0, r4, r3

0800fcb0 <MDNS::SetName(char const*)>:
 800fcb0:	b538      	push	{r3, r4, r5, lr}
 800fcb2:	4d0b      	ldr	r5, [pc, #44]	; (800fce0 <MDNS::SetName(char const*)+0x30>)
 800fcb4:	460c      	mov	r4, r1
 800fcb6:	6828      	ldr	r0, [r5, #0]
 800fcb8:	b108      	cbz	r0, 800fcbe <MDNS::SetName(char const*)+0xe>
 800fcba:	f002 ffc1 	bl	8012c40 <operator delete[](void*)>
 800fcbe:	4620      	mov	r0, r4
 800fcc0:	f7ff ffbe 	bl	800fc40 <strlen>
 800fcc4:	3007      	adds	r0, #7
 800fcc6:	f002 ffbf 	bl	8012c48 <operator new[](unsigned int)>
 800fcca:	4621      	mov	r1, r4
 800fccc:	6028      	str	r0, [r5, #0]
 800fcce:	f7ff ffcc 	bl	800fc6a <strcpy.isra.0>
 800fcd2:	6828      	ldr	r0, [r5, #0]
 800fcd4:	4903      	ldr	r1, [pc, #12]	; (800fce4 <MDNS::SetName(char const*)+0x34>)
 800fcd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcda:	f7ff bfce 	b.w	800fc7a <strcat.isra.0>
 800fcde:	bf00      	nop
 800fce0:	2000a7c4 	andcs	sl, r0, r4, asr #15
 800fce4:	08016ca8 	stmdaeq	r1, {r3, r5, r7, sl, fp, sp, lr}

0800fce8 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 800fce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcec:	f04f 0e00 	mov.w	lr, #0
 800fcf0:	262e      	movs	r6, #46	; 0x2e
 800fcf2:	4675      	mov	r5, lr
 800fcf4:	4694      	mov	ip, r2
 800fcf6:	4f1d      	ldr	r7, [pc, #116]	; (800fd6c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x84>)
 800fcf8:	4a1d      	ldr	r2, [pc, #116]	; (800fd70 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x88>)
 800fcfa:	780b      	ldrb	r3, [r1, #0]
 800fcfc:	1c68      	adds	r0, r5, #1
 800fcfe:	b383      	cbz	r3, 800fd62 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7a>
 800fd00:	2b3f      	cmp	r3, #63	; 0x3f
 800fd02:	d91d      	bls.n	800fd40 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x58>
 800fd04:	f1be 0f00 	cmp.w	lr, #0
 800fd08:	bf08      	it	eq
 800fd0a:	4605      	moveq	r5, r0
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	7849      	ldrb	r1, [r1, #1]
 800fd10:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 800fd14:	430b      	orrs	r3, r1
 800fd16:	6811      	ldr	r1, [r2, #0]
 800fd18:	5ccc      	ldrb	r4, [r1, r3]
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	440b      	add	r3, r1
 800fd1e:	42a0      	cmp	r0, r4
 800fd20:	5c19      	ldrb	r1, [r3, r0]
 800fd22:	d309      	bcc.n	800fd38 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x50>
 800fd24:	f04f 0e01 	mov.w	lr, #1
 800fd28:	1919      	adds	r1, r3, r4
 800fd2a:	4464      	add	r4, ip
 800fd2c:	780b      	ldrb	r3, [r1, #0]
 800fd2e:	b10b      	cbz	r3, 800fd34 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4c>
 800fd30:	f804 6b01 	strb.w	r6, [r4], #1
 800fd34:	46a4      	mov	ip, r4
 800fd36:	e7e0      	b.n	800fcfa <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 800fd38:	f80c 1000 	strb.w	r1, [ip, r0]
 800fd3c:	3001      	adds	r0, #1
 800fd3e:	e7ee      	b.n	800fd1e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x36>
 800fd40:	4688      	mov	r8, r1
 800fd42:	eb0c 0403 	add.w	r4, ip, r3
 800fd46:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 800fd4a:	f80c 9b01 	strb.w	r9, [ip], #1
 800fd4e:	4564      	cmp	r4, ip
 800fd50:	d1f9      	bne.n	800fd46 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5e>
 800fd52:	f103 0c01 	add.w	ip, r3, #1
 800fd56:	4461      	add	r1, ip
 800fd58:	f1be 0f00 	cmp.w	lr, #0
 800fd5c:	d1e6      	bne.n	800fd2c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 800fd5e:	18c5      	adds	r5, r0, r3
 800fd60:	e7e4      	b.n	800fd2c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 800fd62:	f88c 3000 	strb.w	r3, [ip]
 800fd66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd6a:	bf00      	nop
 800fd6c:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 800fd70:	2000a7c8 	andcs	sl, r0, r8, asr #15

0800fd74 <MDNS::FindFirstDotFromRight(char const*) const>:
 800fd74:	b510      	push	{r4, lr}
 800fd76:	4608      	mov	r0, r1
 800fd78:	460c      	mov	r4, r1
 800fd7a:	f7ff ff61 	bl	800fc40 <strlen>
 800fd7e:	4420      	add	r0, r4
 800fd80:	42a0      	cmp	r0, r4
 800fd82:	d903      	bls.n	800fd8c <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 800fd84:	f810 3901 	ldrb.w	r3, [r0], #-1
 800fd88:	2b2e      	cmp	r3, #46	; 0x2e
 800fd8a:	d1f9      	bne.n	800fd80 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 800fd8c:	3001      	adds	r0, #1
 800fd8e:	bd10      	pop	{r4, pc}

0800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>:
 800fd90:	4610      	mov	r0, r2
 800fd92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd94:	460f      	mov	r7, r1
 800fd96:	1c44      	adds	r4, r0, #1
 800fd98:	463d      	mov	r5, r7
 800fd9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fd9e:	b126      	cbz	r6, 800fdaa <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 800fda0:	2e2e      	cmp	r6, #46	; 0x2e
 800fda2:	d002      	beq.n	800fdaa <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 800fda4:	f804 6b01 	strb.w	r6, [r4], #1
 800fda8:	e7f6      	b.n	800fd98 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 800fdaa:	1a69      	subs	r1, r5, r1
 800fdac:	7001      	strb	r1, [r0, #0]
 800fdae:	7829      	ldrb	r1, [r5, #0]
 800fdb0:	b921      	cbnz	r1, 800fdbc <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 800fdb2:	b10b      	cbz	r3, 800fdb8 <MDNS::WriteDnsName(char const*, char*, bool)+0x28>
 800fdb4:	f804 1b01 	strb.w	r1, [r4], #1
 800fdb8:	1aa0      	subs	r0, r4, r2
 800fdba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	1c69      	adds	r1, r5, #1
 800fdc0:	e7e8      	b.n	800fd94 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

0800fdc4 <MDNS::CreateAnswerLocalIpAddress()>:
 800fdc4:	2384      	movs	r3, #132	; 0x84
 800fdc6:	b510      	push	{r4, lr}
 800fdc8:	4c0f      	ldr	r4, [pc, #60]	; (800fe08 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 800fdca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fdce:	80e3      	strh	r3, [r4, #6]
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	490e      	ldr	r1, [pc, #56]	; (800fe0c <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 800fdd4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800fdd8:	6809      	ldr	r1, [r1, #0]
 800fdda:	f104 0210 	add.w	r2, r4, #16
 800fdde:	2301      	movs	r3, #1
 800fde0:	f7ff ffd6 	bl	800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>
 800fde4:	490a      	ldr	r1, [pc, #40]	; (800fe10 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 800fde6:	1813      	adds	r3, r2, r0
 800fde8:	5011      	str	r1, [r2, r0]
 800fdea:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800fdee:	605a      	str	r2, [r3, #4]
 800fdf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fdf4:	811a      	strh	r2, [r3, #8]
 800fdf6:	4a07      	ldr	r2, [pc, #28]	; (800fe14 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 800fdf8:	6812      	ldr	r2, [r2, #0]
 800fdfa:	6912      	ldr	r2, [r2, #16]
 800fdfc:	f8c3 200a 	str.w	r2, [r3, #10]
 800fe00:	1b1b      	subs	r3, r3, r4
 800fe02:	330a      	adds	r3, #10
 800fe04:	6023      	str	r3, [r4, #0]
 800fe06:	bd10      	pop	{r4, pc}
 800fe08:	2000a398 	mulcs	r0, r8, r3
 800fe0c:	2000a7c4 	andcs	sl, r0, r4, asr #15
 800fe10:	01800100 	orreq	r0, r0, r0, lsl #2
 800fe14:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800fe18 <MDNS::Start()>:
 800fe18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe1a:	4c1e      	ldr	r4, [pc, #120]	; (800fe94 <MDNS::Start()+0x7c>)
 800fe1c:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800fe20:	4605      	mov	r5, r0
 800fe22:	6820      	ldr	r0, [r4, #0]
 800fe24:	f000 fb2a 	bl	801047c <Network::Begin(unsigned short)>
 800fe28:	4e1b      	ldr	r6, [pc, #108]	; (800fe98 <MDNS::Start()+0x80>)
 800fe2a:	4f1c      	ldr	r7, [pc, #112]	; (800fe9c <MDNS::Start()+0x84>)
 800fe2c:	4601      	mov	r1, r0
 800fe2e:	6030      	str	r0, [r6, #0]
 800fe30:	683a      	ldr	r2, [r7, #0]
 800fe32:	6820      	ldr	r0, [r4, #0]
 800fe34:	f000 fb33 	bl	801049e <Network::JoinGroup(int, unsigned int)>
 800fe38:	4b19      	ldr	r3, [pc, #100]	; (800fea0 <MDNS::Start()+0x88>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	b923      	cbnz	r3, 800fe48 <MDNS::Start()+0x30>
 800fe3e:	6821      	ldr	r1, [r4, #0]
 800fe40:	4628      	mov	r0, r5
 800fe42:	311c      	adds	r1, #28
 800fe44:	f7ff ff34 	bl	800fcb0 <MDNS::SetName(char const*)>
 800fe48:	4628      	mov	r0, r5
 800fe4a:	f7ff ffbb 	bl	800fdc4 <MDNS::CreateAnswerLocalIpAddress()>
 800fe4e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fe52:	4914      	ldr	r1, [pc, #80]	; (800fea4 <MDNS::Start()+0x8c>)
 800fe54:	7830      	ldrb	r0, [r6, #0]
 800fe56:	f851 2b04 	ldr.w	r2, [r1], #4
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	b292      	uxth	r2, r2
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	f7ff fe3e 	bl	800fae0 <udp_send>
 800fe64:	223f      	movs	r2, #63	; 0x3f
 800fe66:	6820      	ldr	r0, [r4, #0]
 800fe68:	4c0f      	ldr	r4, [pc, #60]	; (800fea8 <MDNS::Start()+0x90>)
 800fe6a:	f100 035c 	add.w	r3, r0, #92	; 0x5c
 800fe6e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800fe72:	b929      	cbnz	r1, 800fe80 <MDNS::Start()+0x68>
 800fe74:	441a      	add	r2, r3
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d006      	beq.n	800fe88 <MDNS::Start()+0x70>
 800fe7a:	f803 1b01 	strb.w	r1, [r3], #1
 800fe7e:	e7fa      	b.n	800fe76 <MDNS::Start()+0x5e>
 800fe80:	3a01      	subs	r2, #1
 800fe82:	f803 1b01 	strb.w	r1, [r3], #1
 800fe86:	d1f2      	bne.n	800fe6e <MDNS::Start()+0x56>
 800fe88:	2300      	movs	r3, #0
 800fe8a:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 800fe8e:	b003      	add	sp, #12
 800fe90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe92:	bf00      	nop
 800fe94:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800fe98:	2000001c 	andcs	r0, r0, ip, lsl r0
 800fe9c:	2000a394 	mulcs	r0, r4, r3
 800fea0:	2000a7c4 	andcs	sl, r0, r4, asr #15
 800fea4:	2000a398 	mulcs	r0, r8, r3
 800fea8:	08016ca8 	stmdaeq	r1, {r3, r5, r7, sl, fp, sp, lr}

0800feac <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 800feac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feb0:	4c1b      	ldr	r4, [pc, #108]	; (800ff20 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 800feb2:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 800feb6:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 800feba:	2300      	movs	r3, #0
 800febc:	f854 100c 	ldr.w	r1, [r4, ip]
 800fec0:	4607      	mov	r7, r0
 800fec2:	f7ff ff65 	bl	800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>
 800fec6:	2301      	movs	r3, #1
 800fec8:	7bac      	ldrb	r4, [r5, #14]
 800feca:	4616      	mov	r6, r2
 800fecc:	4915      	ldr	r1, [pc, #84]	; (800ff24 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 800fece:	4402      	add	r2, r0
 800fed0:	4815      	ldr	r0, [pc, #84]	; (800ff28 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 800fed2:	429c      	cmp	r4, r3
 800fed4:	bf18      	it	ne
 800fed6:	4601      	movne	r1, r0
 800fed8:	4638      	mov	r0, r7
 800feda:	f7ff ff59 	bl	800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>
 800fede:	4b13      	ldr	r3, [pc, #76]	; (800ff2c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 800fee0:	1814      	adds	r4, r2, r0
 800fee2:	5013      	str	r3, [r2, r0]
 800fee4:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800fee8:	6063      	str	r3, [r4, #4]
 800feea:	4b11      	ldr	r3, [pc, #68]	; (800ff30 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 800feec:	f8d3 8000 	ldr.w	r8, [r3]
 800fef0:	4640      	mov	r0, r8
 800fef2:	f7ff fea5 	bl	800fc40 <strlen>
 800fef6:	f100 0308 	add.w	r3, r0, #8
 800fefa:	ba5b      	rev16	r3, r3
 800fefc:	8123      	strh	r3, [r4, #8]
 800fefe:	2300      	movs	r3, #0
 800ff00:	f8c4 300a 	str.w	r3, [r4, #10]
 800ff04:	89ab      	ldrh	r3, [r5, #12]
 800ff06:	f104 0210 	add.w	r2, r4, #16
 800ff0a:	ba5b      	rev16	r3, r3
 800ff0c:	81e3      	strh	r3, [r4, #14]
 800ff0e:	4641      	mov	r1, r8
 800ff10:	2301      	movs	r3, #1
 800ff12:	4638      	mov	r0, r7
 800ff14:	f7ff ff3c 	bl	800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ff18:	4410      	add	r0, r2
 800ff1a:	1b80      	subs	r0, r0, r6
 800ff1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff20:	2000a59c 	mulcs	r0, ip, r5
 800ff24:	08016ca4 	stmdaeq	r1, {r2, r5, r7, sl, fp, sp, lr}
 800ff28:	08016cc1 	stmdaeq	r1, {r0, r6, r7, sl, fp, sp, lr}
 800ff2c:	01802100 	orreq	r2, r0, r0, lsl #2
 800ff30:	2000a7c4 	andcs	sl, r0, r4, asr #15

0800ff34 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 800ff34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff38:	4e19      	ldr	r6, [pc, #100]	; (800ffa0 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 800ff3a:	010f      	lsls	r7, r1, #4
 800ff3c:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800ff40:	2300      	movs	r3, #0
 800ff42:	59f1      	ldr	r1, [r6, r7]
 800ff44:	4604      	mov	r4, r0
 800ff46:	f7ff ff23 	bl	800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	7bae      	ldrb	r6, [r5, #14]
 800ff4e:	4690      	mov	r8, r2
 800ff50:	4914      	ldr	r1, [pc, #80]	; (800ffa4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 800ff52:	4402      	add	r2, r0
 800ff54:	4814      	ldr	r0, [pc, #80]	; (800ffa8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 800ff56:	429e      	cmp	r6, r3
 800ff58:	bf18      	it	ne
 800ff5a:	4601      	movne	r1, r0
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	f7ff ff17 	bl	800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ff62:	4b12      	ldr	r3, [pc, #72]	; (800ffac <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 800ff64:	1816      	adds	r6, r2, r0
 800ff66:	5013      	str	r3, [r2, r0]
 800ff68:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800ff6c:	68a8      	ldr	r0, [r5, #8]
 800ff6e:	6073      	str	r3, [r6, #4]
 800ff70:	f106 040b 	add.w	r4, r6, #11
 800ff74:	b938      	cbnz	r0, 800ff86 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 800ff76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff7a:	72b0      	strb	r0, [r6, #10]
 800ff7c:	8133      	strh	r3, [r6, #8]
 800ff7e:	eba4 0008 	sub.w	r0, r4, r8
 800ff82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff86:	f7ff fe5b 	bl	800fc40 <strlen>
 800ff8a:	4607      	mov	r7, r0
 800ff8c:	1c43      	adds	r3, r0, #1
 800ff8e:	72b0      	strb	r0, [r6, #10]
 800ff90:	ba5b      	rev16	r3, r3
 800ff92:	4620      	mov	r0, r4
 800ff94:	68a9      	ldr	r1, [r5, #8]
 800ff96:	8133      	strh	r3, [r6, #8]
 800ff98:	f7ff fe67 	bl	800fc6a <strcpy.isra.0>
 800ff9c:	443c      	add	r4, r7
 800ff9e:	e7ee      	b.n	800ff7e <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 800ffa0:	2000a59c 	mulcs	r0, ip, r5
 800ffa4:	08016ca4 	stmdaeq	r1, {r2, r5, r7, sl, fp, sp, lr}
 800ffa8:	08016cc1 	stmdaeq	r1, {r0, r6, r7, sl, fp, sp, lr}
 800ffac:	01801000 	orreq	r1, r0, r0

0800ffb0 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 800ffb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffb4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8010018 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 800ffb8:	ea4f 1901 	mov.w	r9, r1, lsl #4
 800ffbc:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 800ffc0:	6869      	ldr	r1, [r5, #4]
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	4607      	mov	r7, r0
 800ffc6:	f7ff fee3 	bl	800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>
 800ffca:	4b14      	ldr	r3, [pc, #80]	; (801001c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 800ffcc:	f858 8009 	ldr.w	r8, [r8, r9]
 800ffd0:	5013      	str	r3, [r2, r0]
 800ffd2:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800ffd6:	1816      	adds	r6, r2, r0
 800ffd8:	6073      	str	r3, [r6, #4]
 800ffda:	4640      	mov	r0, r8
 800ffdc:	4614      	mov	r4, r2
 800ffde:	f7ff fe2f 	bl	800fc40 <strlen>
 800ffe2:	f100 030d 	add.w	r3, r0, #13
 800ffe6:	ba5b      	rev16	r3, r3
 800ffe8:	4641      	mov	r1, r8
 800ffea:	8133      	strh	r3, [r6, #8]
 800ffec:	f106 020a 	add.w	r2, r6, #10
 800fff0:	2300      	movs	r3, #0
 800fff2:	4638      	mov	r0, r7
 800fff4:	f7ff fecc 	bl	800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>
 800fff8:	2301      	movs	r3, #1
 800fffa:	4402      	add	r2, r0
 800fffc:	7bad      	ldrb	r5, [r5, #14]
 800fffe:	4808      	ldr	r0, [pc, #32]	; (8010020 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 8010000:	4908      	ldr	r1, [pc, #32]	; (8010024 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 8010002:	429d      	cmp	r5, r3
 8010004:	bf18      	it	ne
 8010006:	4601      	movne	r1, r0
 8010008:	4638      	mov	r0, r7
 801000a:	f7ff fec1 	bl	800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>
 801000e:	4410      	add	r0, r2
 8010010:	1b00      	subs	r0, r0, r4
 8010012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010016:	bf00      	nop
 8010018:	2000a59c 	mulcs	r0, ip, r5
 801001c:	01000c00 	tsteq	r0, r0, lsl #24
 8010020:	08016cc1 	stmdaeq	r1, {r0, r6, r7, sl, fp, sp, lr}
 8010024:	08016ca4 	stmdaeq	r1, {r2, r5, r7, sl, fp, sp, lr}

08010028 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 8010028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801002a:	460f      	mov	r7, r1
 801002c:	2301      	movs	r3, #1
 801002e:	490f      	ldr	r1, [pc, #60]	; (801006c <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 8010030:	4606      	mov	r6, r0
 8010032:	f7ff fead 	bl	800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010036:	4b0e      	ldr	r3, [pc, #56]	; (8010070 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8010038:	490e      	ldr	r1, [pc, #56]	; (8010074 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 801003a:	5013      	str	r3, [r2, r0]
 801003c:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010040:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8010044:	684f      	ldr	r7, [r1, #4]
 8010046:	1815      	adds	r5, r2, r0
 8010048:	606b      	str	r3, [r5, #4]
 801004a:	4638      	mov	r0, r7
 801004c:	4614      	mov	r4, r2
 801004e:	f7ff fdf7 	bl	800fc40 <strlen>
 8010052:	1c83      	adds	r3, r0, #2
 8010054:	ba5b      	rev16	r3, r3
 8010056:	812b      	strh	r3, [r5, #8]
 8010058:	f105 020a 	add.w	r2, r5, #10
 801005c:	2301      	movs	r3, #1
 801005e:	4639      	mov	r1, r7
 8010060:	4630      	mov	r0, r6
 8010062:	f7ff fe95 	bl	800fd90 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010066:	4410      	add	r0, r2
 8010068:	1b00      	subs	r0, r0, r4
 801006a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801006c:	08016caf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, sl, fp, sp, lr}
 8010070:	01000c00 	tsteq	r0, r0, lsl #24
 8010074:	2000a59c 	mulcs	r0, ip, r5

08010078 <MDNS::CreateMDNSMessage(unsigned int)>:
 8010078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801007a:	2384      	movs	r3, #132	; 0x84
 801007c:	4d19      	ldr	r5, [pc, #100]	; (80100e4 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 801007e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8010082:	80eb      	strh	r3, [r5, #6]
 8010084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010088:	f105 0410 	add.w	r4, r5, #16
 801008c:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8010090:	4622      	mov	r2, r4
 8010092:	4606      	mov	r6, r0
 8010094:	460f      	mov	r7, r1
 8010096:	f7ff ff09 	bl	800feac <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 801009a:	4404      	add	r4, r0
 801009c:	4622      	mov	r2, r4
 801009e:	4639      	mov	r1, r7
 80100a0:	4630      	mov	r0, r6
 80100a2:	f7ff ff47 	bl	800ff34 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 80100a6:	4404      	add	r4, r0
 80100a8:	4622      	mov	r2, r4
 80100aa:	4639      	mov	r1, r7
 80100ac:	4630      	mov	r0, r6
 80100ae:	f7ff ffbb 	bl	8010028 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 80100b2:	4404      	add	r4, r0
 80100b4:	4622      	mov	r2, r4
 80100b6:	4639      	mov	r1, r7
 80100b8:	4630      	mov	r0, r6
 80100ba:	f7ff ff79 	bl	800ffb0 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 80100be:	4b0a      	ldr	r3, [pc, #40]	; (80100e8 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 80100c0:	4404      	add	r4, r0
 80100c2:	f853 2b10 	ldr.w	r2, [r3], #16
 80100c6:	1e60      	subs	r0, r4, #1
 80100c8:	3a0c      	subs	r2, #12
 80100ca:	4611      	mov	r1, r2
 80100cc:	3901      	subs	r1, #1
 80100ce:	d304      	bcc.n	80100da <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 80100d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80100d4:	f800 6f01 	strb.w	r6, [r0, #1]!
 80100d8:	e7f8      	b.n	80100cc <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 80100da:	4414      	add	r4, r2
 80100dc:	4a03      	ldr	r2, [pc, #12]	; (80100ec <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 80100de:	1aa4      	subs	r4, r4, r2
 80100e0:	602c      	str	r4, [r5, #0]
 80100e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100e4:	2000a5c0 	andcs	sl, r0, r0, asr #11
 80100e8:	2000a398 	mulcs	r0, r8, r3
 80100ec:	2000a5c4 	andcs	sl, r0, r4, asr #11

080100f0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 80100f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f4:	4d3f      	ldr	r5, [pc, #252]	; (80101f4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x104>)
 80100f6:	b085      	sub	sp, #20
 80100f8:	682c      	ldr	r4, [r5, #0]
 80100fa:	4680      	mov	r8, r0
 80100fc:	460f      	mov	r7, r1
 80100fe:	4616      	mov	r6, r2
 8010100:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8010104:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8010108:	b11c      	cbz	r4, 8010112 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 801010a:	692a      	ldr	r2, [r5, #16]
 801010c:	2a00      	cmp	r2, #0
 801010e:	d16d      	bne.n	80101ec <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfc>
 8010110:	2401      	movs	r4, #1
 8010112:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8010116:	ea4f 1904 	mov.w	r9, r4, lsl #4
 801011a:	8193      	strh	r3, [r2, #12]
 801011c:	f882 b00e 	strb.w	fp, [r2, #14]
 8010120:	2f00      	cmp	r7, #0
 8010122:	d153      	bne.n	80101cc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xdc>
 8010124:	4630      	mov	r0, r6
 8010126:	f7ff fd8b 	bl	800fc40 <strlen>
 801012a:	4f33      	ldr	r7, [pc, #204]	; (80101f8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	331c      	adds	r3, #28
 8010130:	4418      	add	r0, r3
 8010132:	f7ff fd85 	bl	800fc40 <strlen>
 8010136:	3001      	adds	r0, #1
 8010138:	f002 fd86 	bl	8012c48 <operator new[](unsigned int)>
 801013c:	6839      	ldr	r1, [r7, #0]
 801013e:	f845 0009 	str.w	r0, [r5, r9]
 8010142:	311c      	adds	r1, #28
 8010144:	f7ff fd91 	bl	800fc6a <strcpy.isra.0>
 8010148:	f855 0009 	ldr.w	r0, [r5, r9]
 801014c:	4631      	mov	r1, r6
 801014e:	f7ff fd94 	bl	800fc7a <strcat.isra.0>
 8010152:	4631      	mov	r1, r6
 8010154:	4640      	mov	r0, r8
 8010156:	f7ff fe0d 	bl	800fd74 <MDNS::FindFirstDotFromRight(char const*) const>
 801015a:	eb05 0709 	add.w	r7, r5, r9
 801015e:	4605      	mov	r5, r0
 8010160:	f7ff fd6e 	bl	800fc40 <strlen>
 8010164:	300d      	adds	r0, #13
 8010166:	f002 fd6f 	bl	8012c48 <operator new[](unsigned int)>
 801016a:	4629      	mov	r1, r5
 801016c:	6078      	str	r0, [r7, #4]
 801016e:	f7ff fd7c 	bl	800fc6a <strcpy.isra.0>
 8010172:	4922      	ldr	r1, [pc, #136]	; (80101fc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f7ff fd80 	bl	800fc7a <strcat.isra.0>
 801017a:	4921      	ldr	r1, [pc, #132]	; (8010200 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 801017c:	4b21      	ldr	r3, [pc, #132]	; (8010204 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f1bb 0f01 	cmp.w	fp, #1
 8010184:	bf18      	it	ne
 8010186:	4619      	movne	r1, r3
 8010188:	f7ff fd77 	bl	800fc7a <strcat.isra.0>
 801018c:	f1ba 0f00 	cmp.w	sl, #0
 8010190:	d009      	beq.n	80101a6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xb6>
 8010192:	4650      	mov	r0, sl
 8010194:	f7ff fd54 	bl	800fc40 <strlen>
 8010198:	3001      	adds	r0, #1
 801019a:	f002 fd55 	bl	8012c48 <operator new[](unsigned int)>
 801019e:	4651      	mov	r1, sl
 80101a0:	60b8      	str	r0, [r7, #8]
 80101a2:	f7ff fd62 	bl	800fc6a <strcpy.isra.0>
 80101a6:	4621      	mov	r1, r4
 80101a8:	4640      	mov	r0, r8
 80101aa:	f7ff ff65 	bl	8010078 <MDNS::CreateMDNSMessage(unsigned int)>
 80101ae:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80101b2:	4915      	ldr	r1, [pc, #84]	; (8010208 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 80101b4:	4815      	ldr	r0, [pc, #84]	; (801020c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 80101b6:	f851 2b04 	ldr.w	r2, [r1], #4
 80101ba:	9300      	str	r3, [sp, #0]
 80101bc:	4b14      	ldr	r3, [pc, #80]	; (8010210 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 80101be:	7800      	ldrb	r0, [r0, #0]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	b292      	uxth	r2, r2
 80101c4:	f7ff fc8c 	bl	800fae0 <udp_send>
 80101c8:	2001      	movs	r0, #1
 80101ca:	e010      	b.n	80101ee <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 80101cc:	4638      	mov	r0, r7
 80101ce:	f7ff fd37 	bl	800fc40 <strlen>
 80101d2:	9003      	str	r0, [sp, #12]
 80101d4:	4630      	mov	r0, r6
 80101d6:	f7ff fd33 	bl	800fc40 <strlen>
 80101da:	9b03      	ldr	r3, [sp, #12]
 80101dc:	4418      	add	r0, r3
 80101de:	3001      	adds	r0, #1
 80101e0:	f002 fd32 	bl	8012c48 <operator new[](unsigned int)>
 80101e4:	4639      	mov	r1, r7
 80101e6:	f845 0009 	str.w	r0, [r5, r9]
 80101ea:	e7ab      	b.n	8010144 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x54>
 80101ec:	2000      	movs	r0, #0
 80101ee:	b005      	add	sp, #20
 80101f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101f4:	2000a59c 	mulcs	r0, ip, r5
 80101f8:	2000a7cc 	andcs	sl, r0, ip, asr #15
 80101fc:	08015cc3 	stmdaeq	r1, {r0, r1, r6, r7, sl, fp, ip, lr}
 8010200:	08016ca4 	stmdaeq	r1, {r2, r5, r7, sl, fp, sp, lr}
 8010204:	08016cc1 	stmdaeq	r1, {r0, r6, r7, sl, fp, sp, lr}
 8010208:	2000a5c0 	andcs	sl, r0, r0, asr #11
 801020c:	2000001c 	andcs	r0, r0, ip, lsl r0
 8010210:	2000a394 	mulcs	r0, r4, r3

08010214 <MDNS::HandleRequest(unsigned short)>:
 8010214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010218:	4605      	mov	r5, r0
 801021a:	2700      	movs	r7, #0
 801021c:	f04f 080c 	mov.w	r8, #12
 8010220:	b0c5      	sub	sp, #276	; 0x114
 8010222:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80102e8 <MDNS::HandleRequest(unsigned short)+0xd4>
 8010226:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80102ec <MDNS::HandleRequest(unsigned short)+0xd8>
 801022a:	9103      	str	r1, [sp, #12]
 801022c:	9b03      	ldr	r3, [sp, #12]
 801022e:	42bb      	cmp	r3, r7
 8010230:	d956      	bls.n	80102e0 <MDNS::HandleRequest(unsigned short)+0xcc>
 8010232:	f8da 1000 	ldr.w	r1, [sl]
 8010236:	aa04      	add	r2, sp, #16
 8010238:	4441      	add	r1, r8
 801023a:	4628      	mov	r0, r5
 801023c:	f7ff fd54 	bl	800fce8 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8010240:	f8da 2000 	ldr.w	r2, [sl]
 8010244:	4440      	add	r0, r8
 8010246:	1813      	adds	r3, r2, r0
 8010248:	885b      	ldrh	r3, [r3, #2]
 801024a:	f100 0804 	add.w	r8, r0, #4
 801024e:	ba5b      	rev16	r3, r3
 8010250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010254:	2b01      	cmp	r3, #1
 8010256:	d13e      	bne.n	80102d6 <MDNS::HandleRequest(unsigned short)+0xc2>
 8010258:	5a14      	ldrh	r4, [r2, r0]
 801025a:	4b25      	ldr	r3, [pc, #148]	; (80102f0 <MDNS::HandleRequest(unsigned short)+0xdc>)
 801025c:	ba64      	rev16	r4, r4
 801025e:	6818      	ldr	r0, [r3, #0]
 8010260:	a904      	add	r1, sp, #16
 8010262:	b2a4      	uxth	r4, r4
 8010264:	f7ff fcf4 	bl	800fc50 <strcmp>
 8010268:	b970      	cbnz	r0, 8010288 <MDNS::HandleRequest(unsigned short)+0x74>
 801026a:	2c01      	cmp	r4, #1
 801026c:	d10c      	bne.n	8010288 <MDNS::HandleRequest(unsigned short)+0x74>
 801026e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010272:	4920      	ldr	r1, [pc, #128]	; (80102f4 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8010274:	4820      	ldr	r0, [pc, #128]	; (80102f8 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8010276:	f851 2b04 	ldr.w	r2, [r1], #4
 801027a:	9300      	str	r3, [sp, #0]
 801027c:	4b1f      	ldr	r3, [pc, #124]	; (80102fc <MDNS::HandleRequest(unsigned short)+0xe8>)
 801027e:	7800      	ldrb	r0, [r0, #0]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	b292      	uxth	r2, r2
 8010284:	f7ff fc2c 	bl	800fae0 <udp_send>
 8010288:	481d      	ldr	r0, [pc, #116]	; (8010300 <MDNS::HandleRequest(unsigned short)+0xec>)
 801028a:	a904      	add	r1, sp, #16
 801028c:	f7ff fce0 	bl	800fc50 <strcmp>
 8010290:	f04f 0900 	mov.w	r9, #0
 8010294:	4e1b      	ldr	r6, [pc, #108]	; (8010304 <MDNS::HandleRequest(unsigned short)+0xf0>)
 8010296:	9002      	str	r0, [sp, #8]
 8010298:	6833      	ldr	r3, [r6, #0]
 801029a:	b1c3      	cbz	r3, 80102ce <MDNS::HandleRequest(unsigned short)+0xba>
 801029c:	9b02      	ldr	r3, [sp, #8]
 801029e:	b123      	cbz	r3, 80102aa <MDNS::HandleRequest(unsigned short)+0x96>
 80102a0:	6870      	ldr	r0, [r6, #4]
 80102a2:	a904      	add	r1, sp, #16
 80102a4:	f7ff fcd4 	bl	800fc50 <strcmp>
 80102a8:	b988      	cbnz	r0, 80102ce <MDNS::HandleRequest(unsigned short)+0xba>
 80102aa:	2c0c      	cmp	r4, #12
 80102ac:	d10f      	bne.n	80102ce <MDNS::HandleRequest(unsigned short)+0xba>
 80102ae:	4649      	mov	r1, r9
 80102b0:	4628      	mov	r0, r5
 80102b2:	f7ff fee1 	bl	8010078 <MDNS::CreateMDNSMessage(unsigned int)>
 80102b6:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80102ba:	480f      	ldr	r0, [pc, #60]	; (80102f8 <MDNS::HandleRequest(unsigned short)+0xe4>)
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	4b0f      	ldr	r3, [pc, #60]	; (80102fc <MDNS::HandleRequest(unsigned short)+0xe8>)
 80102c0:	f8bb 2000 	ldrh.w	r2, [fp]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	4910      	ldr	r1, [pc, #64]	; (8010308 <MDNS::HandleRequest(unsigned short)+0xf4>)
 80102c8:	7800      	ldrb	r0, [r0, #0]
 80102ca:	f7ff fc09 	bl	800fae0 <udp_send>
 80102ce:	3610      	adds	r6, #16
 80102d0:	f1b9 0f00 	cmp.w	r9, #0
 80102d4:	d001      	beq.n	80102da <MDNS::HandleRequest(unsigned short)+0xc6>
 80102d6:	3701      	adds	r7, #1
 80102d8:	e7a8      	b.n	801022c <MDNS::HandleRequest(unsigned short)+0x18>
 80102da:	f04f 0901 	mov.w	r9, #1
 80102de:	e7db      	b.n	8010298 <MDNS::HandleRequest(unsigned short)+0x84>
 80102e0:	b045      	add	sp, #276	; 0x114
 80102e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e6:	bf00      	nop
 80102e8:	2000a7c8 	andcs	sl, r0, r8, asr #15
 80102ec:	2000a5c0 	andcs	sl, r0, r0, asr #11
 80102f0:	2000a7c4 	andcs	sl, r0, r4, asr #15
 80102f4:	2000a398 	mulcs	r0, r8, r3
 80102f8:	2000001c 	andcs	r0, r0, ip, lsl r0
 80102fc:	2000a394 	mulcs	r0, r4, r3
 8010300:	08016caf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, sl, fp, sp, lr}
 8010304:	2000a59c 	mulcs	r0, ip, r5
 8010308:	2000a5c4 	andcs	sl, r0, r4, asr #11

0801030c <MDNS::Parse()>:
 801030c:	4b08      	ldr	r3, [pc, #32]	; (8010330 <MDNS::Parse()+0x24>)
 801030e:	681a      	ldr	r2, [r3, #0]
 8010310:	8853      	ldrh	r3, [r2, #2]
 8010312:	ba5b      	rev16	r3, r3
 8010314:	b299      	uxth	r1, r3
 8010316:	041b      	lsls	r3, r3, #16
 8010318:	d408      	bmi.n	801032c <MDNS::Parse()+0x20>
 801031a:	0b8b      	lsrs	r3, r1, #14
 801031c:	d106      	bne.n	801032c <MDNS::Parse()+0x20>
 801031e:	8891      	ldrh	r1, [r2, #4]
 8010320:	b28b      	uxth	r3, r1
 8010322:	b11b      	cbz	r3, 801032c <MDNS::Parse()+0x20>
 8010324:	ba49      	rev16	r1, r1
 8010326:	b289      	uxth	r1, r1
 8010328:	f7ff bf74 	b.w	8010214 <MDNS::HandleRequest(unsigned short)>
 801032c:	4770      	bx	lr
 801032e:	bf00      	nop
 8010330:	2000a7c8 	andcs	sl, r0, r8, asr #15

08010334 <MDNS::Run()>:
 8010334:	b538      	push	{r3, r4, r5, lr}
 8010336:	4d0c      	ldr	r5, [pc, #48]	; (8010368 <MDNS::Run()+0x34>)
 8010338:	4604      	mov	r4, r0
 801033a:	480c      	ldr	r0, [pc, #48]	; (801036c <MDNS::Run()+0x38>)
 801033c:	462b      	mov	r3, r5
 801033e:	4a0c      	ldr	r2, [pc, #48]	; (8010370 <MDNS::Run()+0x3c>)
 8010340:	490c      	ldr	r1, [pc, #48]	; (8010374 <MDNS::Run()+0x40>)
 8010342:	7800      	ldrb	r0, [r0, #0]
 8010344:	f7ff fba6 	bl	800fa94 <udp_recv2>
 8010348:	4b0b      	ldr	r3, [pc, #44]	; (8010378 <MDNS::Run()+0x44>)
 801034a:	882a      	ldrh	r2, [r5, #0]
 801034c:	8018      	strh	r0, [r3, #0]
 801034e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010352:	429a      	cmp	r2, r3
 8010354:	d106      	bne.n	8010364 <MDNS::Run()+0x30>
 8010356:	280c      	cmp	r0, #12
 8010358:	d904      	bls.n	8010364 <MDNS::Run()+0x30>
 801035a:	4620      	mov	r0, r4
 801035c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010360:	f7ff bfd4 	b.w	801030c <MDNS::Parse()>
 8010364:	bd38      	pop	{r3, r4, r5, pc}
 8010366:	bf00      	nop
 8010368:	2000a390 	mulcs	r0, r0, r3
 801036c:	2000001c 	andcs	r0, r0, ip, lsl r0
 8010370:	2000a38c 	andcs	sl, r0, ip, lsl #7
 8010374:	2000a7c8 	andcs	sl, r0, r8, asr #15
 8010378:	2000a5bc 			; <UNDEFINED> instruction: 0x2000a5bc

0801037c <MDNS::Print()>:
 801037c:	b510      	push	{r4, lr}
 801037e:	4816      	ldr	r0, [pc, #88]	; (80103d8 <MDNS::Print()+0x5c>)
 8010380:	f002 ff58 	bl	8013234 <printf>
 8010384:	4b15      	ldr	r3, [pc, #84]	; (80103dc <MDNS::Print()+0x60>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	3301      	adds	r3, #1
 801038a:	d104      	bne.n	8010396 <MDNS::Print()+0x1a>
 801038c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010390:	4813      	ldr	r0, [pc, #76]	; (80103e0 <MDNS::Print()+0x64>)
 8010392:	f002 bf4f 	b.w	8013234 <printf>
 8010396:	4b13      	ldr	r3, [pc, #76]	; (80103e4 <MDNS::Print()+0x68>)
 8010398:	4c13      	ldr	r4, [pc, #76]	; (80103e8 <MDNS::Print()+0x6c>)
 801039a:	6819      	ldr	r1, [r3, #0]
 801039c:	4813      	ldr	r0, [pc, #76]	; (80103ec <MDNS::Print()+0x70>)
 801039e:	f002 ff49 	bl	8013234 <printf>
 80103a2:	6823      	ldr	r3, [r4, #0]
 80103a4:	b14b      	cbz	r3, 80103ba <MDNS::Print()+0x3e>
 80103a6:	4a12      	ldr	r2, [pc, #72]	; (80103f0 <MDNS::Print()+0x74>)
 80103a8:	68a3      	ldr	r3, [r4, #8]
 80103aa:	6861      	ldr	r1, [r4, #4]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	bf08      	it	eq
 80103b0:	4613      	moveq	r3, r2
 80103b2:	4810      	ldr	r0, [pc, #64]	; (80103f4 <MDNS::Print()+0x78>)
 80103b4:	89a2      	ldrh	r2, [r4, #12]
 80103b6:	f002 ff3d 	bl	8013234 <printf>
 80103ba:	6923      	ldr	r3, [r4, #16]
 80103bc:	b15b      	cbz	r3, 80103d6 <MDNS::Print()+0x5a>
 80103be:	69a3      	ldr	r3, [r4, #24]
 80103c0:	4a0b      	ldr	r2, [pc, #44]	; (80103f0 <MDNS::Print()+0x74>)
 80103c2:	6961      	ldr	r1, [r4, #20]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	bf08      	it	eq
 80103c8:	4613      	moveq	r3, r2
 80103ca:	480a      	ldr	r0, [pc, #40]	; (80103f4 <MDNS::Print()+0x78>)
 80103cc:	8ba2      	ldrh	r2, [r4, #28]
 80103ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103d2:	f002 bf2f 	b.w	8013234 <printf>
 80103d6:	bd10      	pop	{r4, pc}
 80103d8:	08016ccc 	stmdaeq	r1, {r2, r3, r6, r7, sl, fp, sp, lr}
 80103dc:	2000001c 	andcs	r0, r0, ip, lsl r0
 80103e0:	08016cd2 	stmdaeq	r1, {r1, r4, r6, r7, sl, fp, sp, lr}
 80103e4:	2000a7c4 	andcs	sl, r0, r4, asr #15
 80103e8:	2000a59c 	mulcs	r0, ip, r5
 80103ec:	08016ce0 	stmdaeq	r1, {r5, r6, r7, sl, fp, sp, lr}
 80103f0:	08015fe5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80103f4:	08016cec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sl, fp, sp, lr}

080103f8 <strncpy.constprop.0.isra.0>:
 80103f8:	233f      	movs	r3, #63	; 0x3f
 80103fa:	3901      	subs	r1, #1
 80103fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010400:	b92a      	cbnz	r2, 801040e <strncpy.constprop.0.isra.0+0x16>
 8010402:	4403      	add	r3, r0
 8010404:	4298      	cmp	r0, r3
 8010406:	d007      	beq.n	8010418 <strncpy.constprop.0.isra.0+0x20>
 8010408:	f800 2b01 	strb.w	r2, [r0], #1
 801040c:	e7fa      	b.n	8010404 <strncpy.constprop.0.isra.0+0xc>
 801040e:	3b01      	subs	r3, #1
 8010410:	f800 2b01 	strb.w	r2, [r0], #1
 8010414:	d1f2      	bne.n	80103fc <strncpy.constprop.0.isra.0+0x4>
 8010416:	4770      	bx	lr
 8010418:	4770      	bx	lr
	...

0801041c <Network::Network()>:
 801041c:	4a11      	ldr	r2, [pc, #68]	; (8010464 <Network::Network()+0x48>)
 801041e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010422:	6010      	str	r0, [r2, #0]
 8010424:	2201      	movs	r2, #1
 8010426:	2300      	movs	r3, #0
 8010428:	e9c0 1200 	strd	r1, r2, [r0]
 801042c:	2200      	movs	r2, #0
 801042e:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 8010432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010436:	490c      	ldr	r1, [pc, #48]	; (8010468 <Network::Network()+0x4c>)
 8010438:	60c2      	str	r2, [r0, #12]
 801043a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 801043e:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 8010442:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 8010446:	6083      	str	r3, [r0, #8]
 8010448:	6183      	str	r3, [r0, #24]
 801044a:	7703      	strb	r3, [r0, #28]
 801044c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8010450:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 8010454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010458:	f802 3b01 	strb.w	r3, [r2], #1
 801045c:	2b00      	cmp	r3, #0
 801045e:	d1f9      	bne.n	8010454 <Network::Network()+0x38>
 8010460:	4770      	bx	lr
 8010462:	bf00      	nop
 8010464:	2000a7cc 	andcs	sl, r0, ip, asr #15
 8010468:	08016cf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, sl, fp, sp, lr}

0801046c <Network::Shutdown()>:
 801046c:	b508      	push	{r3, lr}
 801046e:	30b8      	adds	r0, #184	; 0xb8
 8010470:	f001 fcfa 	bl	8011e68 <NetworkDisplay::ShowShutdown()>
 8010474:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010478:	f7f6 beba 	b.w	80071f0 <net_shutdown>

0801047c <Network::Begin(unsigned short)>:
 801047c:	4608      	mov	r0, r1
 801047e:	f7ff ba99 	b.w	800f9b4 <udp_bind>

08010482 <Network::End(unsigned short)>:
 8010482:	4608      	mov	r0, r1
 8010484:	f7ff bab0 	b.w	800f9e8 <udp_unbind>

08010488 <Network::MacAddressCopyTo(unsigned char*)>:
 8010488:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 801048c:	3901      	subs	r1, #1
 801048e:	30a2      	adds	r0, #162	; 0xa2
 8010490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010494:	4283      	cmp	r3, r0
 8010496:	f801 2f01 	strb.w	r2, [r1, #1]!
 801049a:	d1f9      	bne.n	8010490 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 801049c:	4770      	bx	lr

0801049e <Network::JoinGroup(int, unsigned int)>:
 801049e:	4610      	mov	r0, r2
 80104a0:	f000 bfaa 	b.w	80113f8 <igmp_join>

080104a4 <Network::LeaveGroup(int, unsigned int)>:
 80104a4:	4610      	mov	r0, r2
 80104a6:	f000 bfd3 	b.w	8011450 <igmp_leave>

080104aa <Network::SetDefaultIp()>:
 80104aa:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80104ae:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 80104b2:	041b      	lsls	r3, r3, #16
 80104b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80104b8:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 80104bc:	3302      	adds	r3, #2
 80104be:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80104c2:	22ff      	movs	r2, #255	; 0xff
 80104c4:	6103      	str	r3, [r0, #16]
 80104c6:	e9c0 3205 	strd	r3, r2, [r0, #20]
 80104ca:	4770      	bx	lr

080104cc <Network::Init(NetworkParamsStore*)>:
 80104cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d0:	b08b      	sub	sp, #44	; 0x2c
 80104d2:	4604      	mov	r4, r0
 80104d4:	a806      	add	r0, sp, #24
 80104d6:	f000 fa57 	bl	8010988 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 80104da:	a806      	add	r0, sp, #24
 80104dc:	f000 fa64 	bl	80109a8 <NetworkParams::Load()>
 80104e0:	b110      	cbz	r0, 80104e8 <Network::Init(NetworkParamsStore*)+0x1c>
 80104e2:	a806      	add	r0, sp, #24
 80104e4:	f000 fc49 	bl	8010d7a <NetworkParams::Dump()>
 80104e8:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 80104ec:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8010714 <Network::Init(NetworkParamsStore*)+0x248>
 80104f0:	4628      	mov	r0, r5
 80104f2:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 80104f6:	f001 fc9f 	bl	8011e38 <NetworkDisplay::ShowEmacStart()>
 80104fa:	4638      	mov	r0, r7
 80104fc:	f003 fdb2 	bl	8014064 <emac_start>
 8010500:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010504:	f104 061c 	add.w	r6, r4, #28
 8010508:	9307      	str	r3, [sp, #28]
 801050a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801050e:	9308      	str	r3, [sp, #32]
 8010510:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010514:	9309      	str	r3, [sp, #36]	; 0x24
 8010516:	f898 3014 	ldrb.w	r3, [r8, #20]
 801051a:	7063      	strb	r3, [r4, #1]
 801051c:	f8d8 3000 	ldr.w	r3, [r8]
 8010520:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8010524:	bf18      	it	ne
 8010526:	f8d8 2055 	ldrne.w	r2, [r8, #85]	; 0x55
 801052a:	061b      	lsls	r3, r3, #24
 801052c:	bf58      	it	pl
 801052e:	2300      	movpl	r3, #0
 8010530:	60a2      	str	r2, [r4, #8]
 8010532:	bf48      	it	mi
 8010534:	f8d8 3059 	ldrmi.w	r3, [r8, #89]	; 0x59
 8010538:	60e3      	str	r3, [r4, #12]
 801053a:	f898 3015 	ldrb.w	r3, [r8, #21]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d15e      	bne.n	8010600 <Network::Init(NetworkParamsStore*)+0x134>
 8010542:	4632      	mov	r2, r6
 8010544:	4874      	ldr	r0, [pc, #464]	; (8010718 <Network::Init(NetworkParamsStore*)+0x24c>)
 8010546:	f810 1b01 	ldrb.w	r1, [r0], #1
 801054a:	f103 0c01 	add.w	ip, r3, #1
 801054e:	b119      	cbz	r1, 8010558 <Network::Init(NetworkParamsStore*)+0x8c>
 8010550:	4663      	mov	r3, ip
 8010552:	f802 1b01 	strb.w	r1, [r2], #1
 8010556:	e7f6      	b.n	8010546 <Network::Init(NetworkParamsStore*)+0x7a>
 8010558:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 801055c:	18e1      	adds	r1, r4, r3
 801055e:	0910      	lsrs	r0, r2, #4
 8010560:	2a9f      	cmp	r2, #159	; 0x9f
 8010562:	f002 020f 	and.w	r2, r2, #15
 8010566:	bf94      	ite	ls
 8010568:	3030      	addls	r0, #48	; 0x30
 801056a:	3037      	addhi	r0, #55	; 0x37
 801056c:	2a09      	cmp	r2, #9
 801056e:	bf94      	ite	ls
 8010570:	3230      	addls	r2, #48	; 0x30
 8010572:	3237      	addhi	r2, #55	; 0x37
 8010574:	44a4      	add	ip, r4
 8010576:	7708      	strb	r0, [r1, #28]
 8010578:	f88c 201c 	strb.w	r2, [ip, #28]
 801057c:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 8010580:	f103 0e02 	add.w	lr, r3, #2
 8010584:	0910      	lsrs	r0, r2, #4
 8010586:	2a9f      	cmp	r2, #159	; 0x9f
 8010588:	f002 020f 	and.w	r2, r2, #15
 801058c:	bf94      	ite	ls
 801058e:	3030      	addls	r0, #48	; 0x30
 8010590:	3037      	addhi	r0, #55	; 0x37
 8010592:	f103 0903 	add.w	r9, r3, #3
 8010596:	2a09      	cmp	r2, #9
 8010598:	44a6      	add	lr, r4
 801059a:	f88e 001c 	strb.w	r0, [lr, #28]
 801059e:	bf94      	ite	ls
 80105a0:	3230      	addls	r2, #48	; 0x30
 80105a2:	3237      	addhi	r2, #55	; 0x37
 80105a4:	eb04 0009 	add.w	r0, r4, r9
 80105a8:	7702      	strb	r2, [r0, #28]
 80105aa:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 80105ae:	f103 0c04 	add.w	ip, r3, #4
 80105b2:	0910      	lsrs	r0, r2, #4
 80105b4:	2a9f      	cmp	r2, #159	; 0x9f
 80105b6:	f002 020f 	and.w	r2, r2, #15
 80105ba:	bf94      	ite	ls
 80105bc:	3030      	addls	r0, #48	; 0x30
 80105be:	3037      	addhi	r0, #55	; 0x37
 80105c0:	3305      	adds	r3, #5
 80105c2:	2a09      	cmp	r2, #9
 80105c4:	4423      	add	r3, r4
 80105c6:	44a4      	add	ip, r4
 80105c8:	bf94      	ite	ls
 80105ca:	3230      	addls	r2, #48	; 0x30
 80105cc:	3237      	addhi	r2, #55	; 0x37
 80105ce:	f88c 001c 	strb.w	r0, [ip, #28]
 80105d2:	771a      	strb	r2, [r3, #28]
 80105d4:	2300      	movs	r3, #0
 80105d6:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 80105da:	7863      	ldrb	r3, [r4, #1]
 80105dc:	b95b      	cbnz	r3, 80105f6 <Network::Init(NetworkParamsStore*)+0x12a>
 80105de:	9b07      	ldr	r3, [sp, #28]
 80105e0:	b9b3      	cbnz	r3, 8010610 <Network::Init(NetworkParamsStore*)+0x144>
 80105e2:	4620      	mov	r0, r4
 80105e4:	f7ff ff61 	bl	80104aa <Network::SetDefaultIp()>
 80105e8:	6923      	ldr	r3, [r4, #16]
 80105ea:	69a2      	ldr	r2, [r4, #24]
 80105ec:	9307      	str	r3, [sp, #28]
 80105ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80105f2:	7863      	ldrb	r3, [r4, #1]
 80105f4:	b19b      	cbz	r3, 801061e <Network::Init(NetworkParamsStore*)+0x152>
 80105f6:	2101      	movs	r1, #1
 80105f8:	4628      	mov	r0, r5
 80105fa:	f001 fc3b 	bl	8011e74 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80105fe:	e00e      	b.n	801061e <Network::Init(NetworkParamsStore*)+0x152>
 8010600:	4630      	mov	r0, r6
 8010602:	4946      	ldr	r1, [pc, #280]	; (801071c <Network::Init(NetworkParamsStore*)+0x250>)
 8010604:	f7ff fef8 	bl	80103f8 <strncpy.constprop.0.isra.0>
 8010608:	2300      	movs	r3, #0
 801060a:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801060e:	e7e4      	b.n	80105da <Network::Init(NetworkParamsStore*)+0x10e>
 8010610:	69a1      	ldr	r1, [r4, #24]
 8010612:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8010616:	4053      	eors	r3, r2
 8010618:	420b      	tst	r3, r1
 801061a:	d000      	beq.n	801061e <Network::Init(NetworkParamsStore*)+0x152>
 801061c:	9209      	str	r2, [sp, #36]	; 0x24
 801061e:	1ce3      	adds	r3, r4, #3
 8010620:	f104 0901 	add.w	r9, r4, #1
 8010624:	9302      	str	r3, [sp, #8]
 8010626:	9300      	str	r3, [sp, #0]
 8010628:	4632      	mov	r2, r6
 801062a:	464b      	mov	r3, r9
 801062c:	4638      	mov	r0, r7
 801062e:	a907      	add	r1, sp, #28
 8010630:	f7f6 fd8e 	bl	8007150 <net_init>
 8010634:	78e3      	ldrb	r3, [r4, #3]
 8010636:	b11b      	cbz	r3, 8010640 <Network::Init(NetworkParamsStore*)+0x174>
 8010638:	2104      	movs	r1, #4
 801063a:	4628      	mov	r0, r5
 801063c:	f001 fc1a 	bl	8011e74 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010640:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010644:	f898 a05d 	ldrb.w	sl, [r8, #93]	; 0x5d
 8010648:	9304      	str	r3, [sp, #16]
 801064a:	233c      	movs	r3, #60	; 0x3c
 801064c:	fb03 f30a 	mul.w	r3, r3, sl
 8010650:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8010720 <Network::Init(NetworkParamsStore*)+0x254>
 8010654:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8010724 <Network::Init(NetworkParamsStore*)+0x258>
 8010658:	9303      	str	r3, [sp, #12]
 801065a:	78e3      	ldrb	r3, [r4, #3]
 801065c:	b95b      	cbnz	r3, 8010676 <Network::Init(NetworkParamsStore*)+0x1aa>
 801065e:	9b07      	ldr	r3, [sp, #28]
 8010660:	4628      	mov	r0, r5
 8010662:	6123      	str	r3, [r4, #16]
 8010664:	9b08      	ldr	r3, [sp, #32]
 8010666:	61a3      	str	r3, [r4, #24]
 8010668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801066a:	6163      	str	r3, [r4, #20]
 801066c:	f001 fbea 	bl	8011e44 <NetworkDisplay::ShowIp()>
 8010670:	b00b      	add	sp, #44	; 0x2c
 8010672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010676:	f1ba 0f00 	cmp.w	sl, #0
 801067a:	d0f0      	beq.n	801065e <Network::Init(NetworkParamsStore*)+0x192>
 801067c:	9b04      	ldr	r3, [sp, #16]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d0ed      	beq.n	801065e <Network::Init(NetworkParamsStore*)+0x192>
 8010682:	2104      	movs	r1, #4
 8010684:	f8d8 0000 	ldr.w	r0, [r8]
 8010688:	f002 f9f4 	bl	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 801068c:	2103      	movs	r1, #3
 801068e:	4628      	mov	r0, r5
 8010690:	f001 fbf0 	bl	8011e74 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010694:	2000      	movs	r0, #0
 8010696:	f002 ff03 	bl	80134a0 <time>
 801069a:	9005      	str	r0, [sp, #20]
 801069c:	2000      	movs	r0, #0
 801069e:	f002 feff 	bl	80134a0 <time>
 80106a2:	9b05      	ldr	r3, [sp, #20]
 80106a4:	1ac0      	subs	r0, r0, r3
 80106a6:	9b03      	ldr	r3, [sp, #12]
 80106a8:	4298      	cmp	r0, r3
 80106aa:	da1a      	bge.n	80106e2 <Network::Init(NetworkParamsStore*)+0x216>
 80106ac:	f8d8 3000 	ldr.w	r3, [r8]
 80106b0:	491d      	ldr	r1, [pc, #116]	; (8010728 <Network::Init(NetworkParamsStore*)+0x25c>)
 80106b2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80106b6:	f1bc 0f00 	cmp.w	ip, #0
 80106ba:	d0ef      	beq.n	801069c <Network::Init(NetworkParamsStore*)+0x1d0>
 80106bc:	6808      	ldr	r0, [r1, #0]
 80106be:	695a      	ldr	r2, [r3, #20]
 80106c0:	1a80      	subs	r0, r0, r2
 80106c2:	4584      	cmp	ip, r0
 80106c4:	d8ea      	bhi.n	801069c <Network::Init(NetworkParamsStore*)+0x1d0>
 80106c6:	6808      	ldr	r0, [r1, #0]
 80106c8:	6158      	str	r0, [r3, #20]
 80106ca:	6918      	ldr	r0, [r3, #16]
 80106cc:	2801      	cmp	r0, #1
 80106ce:	f080 0201 	eor.w	r2, r0, #1
 80106d2:	611a      	str	r2, [r3, #16]
 80106d4:	bf16      	itet	ne
 80106d6:	2301      	movne	r3, #1
 80106d8:	f8cb 0014 	streq.w	r0, [fp, #20]
 80106dc:	f8cb 3010 	strne.w	r3, [fp, #16]
 80106e0:	e7dc      	b.n	801069c <Network::Init(NetworkParamsStore*)+0x1d0>
 80106e2:	2101      	movs	r1, #1
 80106e4:	4628      	mov	r0, r5
 80106e6:	f001 fbc5 	bl	8011e74 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80106ea:	2101      	movs	r1, #1
 80106ec:	f8d8 0000 	ldr.w	r0, [r8]
 80106f0:	f002 f9c0 	bl	8012a74 <LedBlink::SetMode(ledblink::Mode)>
 80106f4:	2301      	movs	r3, #1
 80106f6:	7063      	strb	r3, [r4, #1]
 80106f8:	2300      	movs	r3, #0
 80106fa:	70e3      	strb	r3, [r4, #3]
 80106fc:	9b02      	ldr	r3, [sp, #8]
 80106fe:	4632      	mov	r2, r6
 8010700:	9300      	str	r3, [sp, #0]
 8010702:	4638      	mov	r0, r7
 8010704:	464b      	mov	r3, r9
 8010706:	a907      	add	r1, sp, #28
 8010708:	f7f6 fd22 	bl	8007150 <net_init>
 801070c:	7863      	ldrb	r3, [r4, #1]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d0a3      	beq.n	801065a <Network::Init(NetworkParamsStore*)+0x18e>
 8010712:	e7a4      	b.n	801065e <Network::Init(NetworkParamsStore*)+0x192>
 8010714:	2000a7d0 	ldrdcs	sl, [r0], -r0
 8010718:	08016cfc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, fp, sp, lr}
 801071c:	2000a7e5 	andcs	sl, r0, r5, ror #15
 8010720:	2000aef0 	strdcs	sl, [r0], -r0
 8010724:	40011000 	andmi	r1, r1, r0
 8010728:	2000af0c 	andcs	sl, r0, ip, lsl #30

0801072c <Network::SetIp(unsigned int)>:
 801072c:	7843      	ldrb	r3, [r0, #1]
 801072e:	b570      	push	{r4, r5, r6, lr}
 8010730:	4604      	mov	r4, r0
 8010732:	460d      	mov	r5, r1
 8010734:	2600      	movs	r6, #0
 8010736:	b113      	cbz	r3, 801073e <Network::SetIp(unsigned int)+0x12>
 8010738:	7046      	strb	r6, [r0, #1]
 801073a:	f7fe feef 	bl	800f51c <net_dhcp_release>
 801073e:	70e6      	strb	r6, [r4, #3]
 8010740:	b975      	cbnz	r5, 8010760 <Network::SetIp(unsigned int)+0x34>
 8010742:	4620      	mov	r0, r4
 8010744:	f7ff feb1 	bl	80104aa <Network::SetDefaultIp()>
 8010748:	6920      	ldr	r0, [r4, #16]
 801074a:	f7fe fea3 	bl	800f494 <net_set_ip>
 801074e:	34b8      	adds	r4, #184	; 0xb8
 8010750:	4620      	mov	r0, r4
 8010752:	f001 fb77 	bl	8011e44 <NetworkDisplay::ShowIp()>
 8010756:	4620      	mov	r0, r4
 8010758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801075c:	f001 bb78 	b.w	8011e50 <NetworkDisplay::ShowNetMask()>
 8010760:	4628      	mov	r0, r5
 8010762:	f7fe fe97 	bl	800f494 <net_set_ip>
 8010766:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801076a:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801076e:	2800      	cmp	r0, #0
 8010770:	d0ed      	beq.n	801074e <Network::SetIp(unsigned int)+0x22>
 8010772:	6803      	ldr	r3, [r0, #0]
 8010774:	4629      	mov	r1, r5
 8010776:	689b      	ldr	r3, [r3, #8]
 8010778:	4798      	blx	r3
 801077a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801077e:	2100      	movs	r1, #0
 8010780:	6803      	ldr	r3, [r0, #0]
 8010782:	699b      	ldr	r3, [r3, #24]
 8010784:	4798      	blx	r3
 8010786:	e7e2      	b.n	801074e <Network::SetIp(unsigned int)+0x22>

08010788 <Network::SetNetmask(unsigned int)>:
 8010788:	6982      	ldr	r2, [r0, #24]
 801078a:	b510      	push	{r4, lr}
 801078c:	428a      	cmp	r2, r1
 801078e:	4604      	mov	r4, r0
 8010790:	d00f      	beq.n	80107b2 <Network::SetNetmask(unsigned int)+0x2a>
 8010792:	6181      	str	r1, [r0, #24]
 8010794:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 8010798:	b110      	cbz	r0, 80107a0 <Network::SetNetmask(unsigned int)+0x18>
 801079a:	6803      	ldr	r3, [r0, #0]
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	4798      	blx	r3
 80107a0:	34b8      	adds	r4, #184	; 0xb8
 80107a2:	4620      	mov	r0, r4
 80107a4:	f001 fb4e 	bl	8011e44 <NetworkDisplay::ShowIp()>
 80107a8:	4620      	mov	r0, r4
 80107aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107ae:	f001 bb4f 	b.w	8011e50 <NetworkDisplay::ShowNetMask()>
 80107b2:	bd10      	pop	{r4, pc}

080107b4 <Network::SetGatewayIp(unsigned int)>:
 80107b4:	b538      	push	{r3, r4, r5, lr}
 80107b6:	6943      	ldr	r3, [r0, #20]
 80107b8:	4604      	mov	r4, r0
 80107ba:	428b      	cmp	r3, r1
 80107bc:	460d      	mov	r5, r1
 80107be:	d00f      	beq.n	80107e0 <Network::SetGatewayIp(unsigned int)+0x2c>
 80107c0:	4608      	mov	r0, r1
 80107c2:	f7fe fe77 	bl	800f4b4 <net_set_gw>
 80107c6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80107ca:	b118      	cbz	r0, 80107d4 <Network::SetGatewayIp(unsigned int)+0x20>
 80107cc:	6803      	ldr	r3, [r0, #0]
 80107ce:	4629      	mov	r1, r5
 80107d0:	691b      	ldr	r3, [r3, #16]
 80107d2:	4798      	blx	r3
 80107d4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80107d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107dc:	f001 bb3e 	b.w	8011e5c <NetworkDisplay::ShowGatewayIp()>
 80107e0:	bd38      	pop	{r3, r4, r5, pc}
	...

080107e4 <Network::EnableDhcp()>:
 80107e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107e6:	4e23      	ldr	r6, [pc, #140]	; (8010874 <Network::EnableDhcp()+0x90>)
 80107e8:	4604      	mov	r4, r0
 80107ea:	6833      	ldr	r3, [r6, #0]
 80107ec:	b085      	sub	sp, #20
 80107ee:	791f      	ldrb	r7, [r3, #4]
 80107f0:	b137      	cbz	r7, 8010800 <Network::EnableDhcp()+0x1c>
 80107f2:	2200      	movs	r2, #0
 80107f4:	2104      	movs	r1, #4
 80107f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80107fa:	711a      	strb	r2, [r3, #4]
 80107fc:	f003 f84a 	bl	8013894 <fwdgt_config>
 8010800:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8010804:	2101      	movs	r1, #1
 8010806:	4628      	mov	r0, r5
 8010808:	f001 fb34 	bl	8011e74 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801080c:	1ce2      	adds	r2, r4, #3
 801080e:	f104 011c 	add.w	r1, r4, #28
 8010812:	a801      	add	r0, sp, #4
 8010814:	f7fe fe56 	bl	800f4c4 <net_set_dhcp>
 8010818:	78e3      	ldrb	r3, [r4, #3]
 801081a:	7060      	strb	r0, [r4, #1]
 801081c:	b343      	cbz	r3, 8010870 <Network::EnableDhcp()+0x8c>
 801081e:	2104      	movs	r1, #4
 8010820:	4628      	mov	r0, r5
 8010822:	f001 fb27 	bl	8011e74 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010826:	b16f      	cbz	r7, 8010844 <Network::EnableDhcp()+0x60>
 8010828:	2102      	movs	r1, #2
 801082a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801082e:	6836      	ldr	r6, [r6, #0]
 8010830:	f003 f830 	bl	8013894 <fwdgt_config>
 8010834:	2801      	cmp	r0, #1
 8010836:	bf0c      	ite	eq
 8010838:	2301      	moveq	r3, #1
 801083a:	2300      	movne	r3, #0
 801083c:	7133      	strb	r3, [r6, #4]
 801083e:	d101      	bne.n	8010844 <Network::EnableDhcp()+0x60>
 8010840:	f003 f818 	bl	8013874 <fwdgt_enable>
 8010844:	9b01      	ldr	r3, [sp, #4]
 8010846:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801084a:	6123      	str	r3, [r4, #16]
 801084c:	9b02      	ldr	r3, [sp, #8]
 801084e:	61a3      	str	r3, [r4, #24]
 8010850:	9b03      	ldr	r3, [sp, #12]
 8010852:	6163      	str	r3, [r4, #20]
 8010854:	b118      	cbz	r0, 801085e <Network::EnableDhcp()+0x7a>
 8010856:	6803      	ldr	r3, [r0, #0]
 8010858:	7861      	ldrb	r1, [r4, #1]
 801085a:	699b      	ldr	r3, [r3, #24]
 801085c:	4798      	blx	r3
 801085e:	4628      	mov	r0, r5
 8010860:	f001 faf0 	bl	8011e44 <NetworkDisplay::ShowIp()>
 8010864:	4628      	mov	r0, r5
 8010866:	f001 faf3 	bl	8011e50 <NetworkDisplay::ShowNetMask()>
 801086a:	7860      	ldrb	r0, [r4, #1]
 801086c:	b005      	add	sp, #20
 801086e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010870:	2102      	movs	r1, #2
 8010872:	e7d5      	b.n	8010820 <Network::EnableDhcp()+0x3c>
 8010874:	2000aef4 	strdcs	sl, [r0], -r4

08010878 <Network::Print()>:
 8010878:	b530      	push	{r4, r5, lr}
 801087a:	4604      	mov	r4, r0
 801087c:	b085      	sub	sp, #20
 801087e:	4832      	ldr	r0, [pc, #200]	; (8010948 <Network::Print()+0xd0>)
 8010880:	f002 fcd8 	bl	8013234 <printf>
 8010884:	f104 011c 	add.w	r1, r4, #28
 8010888:	4830      	ldr	r0, [pc, #192]	; (801094c <Network::Print()+0xd4>)
 801088a:	f002 fcd3 	bl	8013234 <printf>
 801088e:	6861      	ldr	r1, [r4, #4]
 8010890:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 8010894:	482e      	ldr	r0, [pc, #184]	; (8010950 <Network::Print()+0xd8>)
 8010896:	f002 fccd 	bl	8013234 <printf>
 801089a:	69a0      	ldr	r0, [r4, #24]
 801089c:	f7f7 f940 	bl	8007b20 <__popcountsi2>
 80108a0:	6925      	ldr	r5, [r4, #16]
 80108a2:	9001      	str	r0, [sp, #4]
 80108a4:	0e2b      	lsrs	r3, r5, #24
 80108a6:	9300      	str	r3, [sp, #0]
 80108a8:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80108ac:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80108b0:	b2e9      	uxtb	r1, r5
 80108b2:	4828      	ldr	r0, [pc, #160]	; (8010954 <Network::Print()+0xdc>)
 80108b4:	f002 fcbe 	bl	8013234 <printf>
 80108b8:	69a1      	ldr	r1, [r4, #24]
 80108ba:	4827      	ldr	r0, [pc, #156]	; (8010958 <Network::Print()+0xe0>)
 80108bc:	0e0b      	lsrs	r3, r1, #24
 80108be:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80108c8:	b2c9      	uxtb	r1, r1
 80108ca:	f002 fcb3 	bl	8013234 <printf>
 80108ce:	6961      	ldr	r1, [r4, #20]
 80108d0:	4822      	ldr	r0, [pc, #136]	; (801095c <Network::Print()+0xe4>)
 80108d2:	0e0b      	lsrs	r3, r1, #24
 80108d4:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80108d8:	9300      	str	r3, [sp, #0]
 80108da:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80108de:	b2c9      	uxtb	r1, r1
 80108e0:	f002 fca8 	bl	8013234 <printf>
 80108e4:	69a3      	ldr	r3, [r4, #24]
 80108e6:	6921      	ldr	r1, [r4, #16]
 80108e8:	481d      	ldr	r0, [pc, #116]	; (8010960 <Network::Print()+0xe8>)
 80108ea:	ea61 0103 	orn	r1, r1, r3
 80108ee:	0e0b      	lsrs	r3, r1, #24
 80108f0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80108f4:	9300      	str	r3, [sp, #0]
 80108f6:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80108fa:	b2c9      	uxtb	r1, r1
 80108fc:	f002 fc9a 	bl	8013234 <printf>
 8010900:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8010904:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 8010908:	9302      	str	r3, [sp, #8]
 801090a:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 801090e:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 8010912:	9301      	str	r3, [sp, #4]
 8010914:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8010918:	4812      	ldr	r0, [pc, #72]	; (8010964 <Network::Print()+0xec>)
 801091a:	9300      	str	r3, [sp, #0]
 801091c:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8010920:	f002 fc88 	bl	8013234 <printf>
 8010924:	4b10      	ldr	r3, [pc, #64]	; (8010968 <Network::Print()+0xf0>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	78da      	ldrb	r2, [r3, #3]
 801092a:	b952      	cbnz	r2, 8010942 <Network::Print()+0xca>
 801092c:	785b      	ldrb	r3, [r3, #1]
 801092e:	2b00      	cmp	r3, #0
 8010930:	bf14      	ite	ne
 8010932:	2144      	movne	r1, #68	; 0x44
 8010934:	2153      	moveq	r1, #83	; 0x53
 8010936:	480d      	ldr	r0, [pc, #52]	; (801096c <Network::Print()+0xf4>)
 8010938:	b005      	add	sp, #20
 801093a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801093e:	f002 bc79 	b.w	8013234 <printf>
 8010942:	215a      	movs	r1, #90	; 0x5a
 8010944:	e7f7      	b.n	8010936 <Network::Print()+0xbe>
 8010946:	bf00      	nop
 8010948:	08016d08 	stmdaeq	r1, {r3, r8, sl, fp, sp, lr}
 801094c:	08016d11 	stmdaeq	r1, {r0, r4, r8, sl, fp, sp, lr}
 8010950:	08016d22 	stmdaeq	r1, {r1, r5, r8, sl, fp, sp, lr}
 8010954:	08016d37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, sl, fp, sp, lr}
 8010958:	08016d54 	stmdaeq	r1, {r2, r4, r6, r8, sl, fp, sp, lr}
 801095c:	08016d6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
 8010960:	08016d88 	stmdaeq	r1, {r3, r7, r8, sl, fp, sp, lr}
 8010964:	08016da2 	stmdaeq	r1, {r1, r5, r7, r8, sl, fp, sp, lr}
 8010968:	2000a7cc 	andcs	sl, r0, ip, asr #15
 801096c:	08016dce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, sl, fp, sp, lr}

08010970 <Network::TcpBegin(unsigned short)>:
 8010970:	4608      	mov	r0, r1
 8010972:	f7fe bf55 	b.w	800f820 <tcp_begin>

08010976 <Network::TcpRead(int, unsigned char const**)>:
 8010976:	4608      	mov	r0, r1
 8010978:	4611      	mov	r1, r2
 801097a:	f7fe bf8f 	b.w	800f89c <tcp_read>

0801097e <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 801097e:	4608      	mov	r0, r1
 8010980:	4611      	mov	r1, r2
 8010982:	461a      	mov	r2, r3
 8010984:	f7fe bf66 	b.w	800f854 <tcp_write>

08010988 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 8010988:	4b06      	ldr	r3, [pc, #24]	; (80109a4 <NetworkParams::NetworkParams(NetworkParamsStore*)+0x1c>)
 801098a:	b510      	push	{r4, lr}
 801098c:	225e      	movs	r2, #94	; 0x5e
 801098e:	4604      	mov	r4, r0
 8010990:	6001      	str	r1, [r0, #0]
 8010992:	2100      	movs	r1, #0
 8010994:	4618      	mov	r0, r3
 8010996:	f002 fa2b 	bl	8012df0 <memset>
 801099a:	2201      	movs	r2, #1
 801099c:	7502      	strb	r2, [r0, #20]
 801099e:	4620      	mov	r0, r4
 80109a0:	bd10      	pop	{r4, pc}
 80109a2:	bf00      	nop
 80109a4:	2000a7d0 	ldrdcs	sl, [r0], -r0

080109a8 <NetworkParams::Load()>:
 80109a8:	b508      	push	{r3, lr}
 80109aa:	2300      	movs	r3, #0
 80109ac:	4905      	ldr	r1, [pc, #20]	; (80109c4 <NetworkParams::Load()+0x1c>)
 80109ae:	6800      	ldr	r0, [r0, #0]
 80109b0:	700b      	strb	r3, [r1, #0]
 80109b2:	704b      	strb	r3, [r1, #1]
 80109b4:	708b      	strb	r3, [r1, #2]
 80109b6:	70cb      	strb	r3, [r1, #3]
 80109b8:	b118      	cbz	r0, 80109c2 <NetworkParams::Load()+0x1a>
 80109ba:	6803      	ldr	r3, [r0, #0]
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	4798      	blx	r3
 80109c0:	2001      	movs	r0, #1
 80109c2:	bd08      	pop	{r3, pc}
 80109c4:	2000a7d0 	ldrdcs	sl, [r0], -r0

080109c8 <NetworkParams::Load(char const*, unsigned int)>:
 80109c8:	6803      	ldr	r3, [r0, #0]
 80109ca:	b1eb      	cbz	r3, 8010a08 <NetworkParams::Load(char const*, unsigned int)+0x40>
 80109cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109ce:	2300      	movs	r3, #0
 80109d0:	460e      	mov	r6, r1
 80109d2:	4617      	mov	r7, r2
 80109d4:	4605      	mov	r5, r0
 80109d6:	4c0d      	ldr	r4, [pc, #52]	; (8010a0c <NetworkParams::Load(char const*, unsigned int)+0x44>)
 80109d8:	4602      	mov	r2, r0
 80109da:	490d      	ldr	r1, [pc, #52]	; (8010a10 <NetworkParams::Load(char const*, unsigned int)+0x48>)
 80109dc:	4668      	mov	r0, sp
 80109de:	7023      	strb	r3, [r4, #0]
 80109e0:	7063      	strb	r3, [r4, #1]
 80109e2:	70a3      	strb	r3, [r4, #2]
 80109e4:	70e3      	strb	r3, [r4, #3]
 80109e6:	f001 fbc9 	bl	801217c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80109ea:	463a      	mov	r2, r7
 80109ec:	4631      	mov	r1, r6
 80109ee:	4668      	mov	r0, sp
 80109f0:	f001 fbc8 	bl	8012184 <ReadConfigFile::Read(char const*, unsigned int)>
 80109f4:	6828      	ldr	r0, [r5, #0]
 80109f6:	4621      	mov	r1, r4
 80109f8:	6803      	ldr	r3, [r0, #0]
 80109fa:	689b      	ldr	r3, [r3, #8]
 80109fc:	4798      	blx	r3
 80109fe:	4668      	mov	r0, sp
 8010a00:	f001 fbbf 	bl	8012182 <ReadConfigFile::~ReadConfigFile()>
 8010a04:	b003      	add	sp, #12
 8010a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop
 8010a0c:	2000a7d0 	ldrdcs	sl, [r0], -r0
 8010a10:	08010b45 	stmdaeq	r1, {r0, r2, r6, r8, r9, fp}

08010a14 <NetworkParams::callbackFunction(char const*)>:
 8010a14:	b530      	push	{r4, r5, lr}
 8010a16:	460c      	mov	r4, r1
 8010a18:	b085      	sub	sp, #20
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	4942      	ldr	r1, [pc, #264]	; (8010b28 <NetworkParams::callbackFunction(char const*)+0x114>)
 8010a1e:	f10d 0207 	add.w	r2, sp, #7
 8010a22:	f001 fc85 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010a26:	b980      	cbnz	r0, 8010a4a <NetworkParams::callbackFunction(char const*)+0x36>
 8010a28:	4940      	ldr	r1, [pc, #256]	; (8010b2c <NetworkParams::callbackFunction(char const*)+0x118>)
 8010a2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010a2e:	680b      	ldr	r3, [r1, #0]
 8010a30:	b142      	cbz	r2, 8010a44 <NetworkParams::callbackFunction(char const*)+0x30>
 8010a32:	f023 0301 	bic.w	r3, r3, #1
 8010a36:	3a00      	subs	r2, #0
 8010a38:	bf18      	it	ne
 8010a3a:	2201      	movne	r2, #1
 8010a3c:	600b      	str	r3, [r1, #0]
 8010a3e:	750a      	strb	r2, [r1, #20]
 8010a40:	b005      	add	sp, #20
 8010a42:	bd30      	pop	{r4, r5, pc}
 8010a44:	f043 0301 	orr.w	r3, r3, #1
 8010a48:	e7f5      	b.n	8010a36 <NetworkParams::callbackFunction(char const*)+0x22>
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	4938      	ldr	r1, [pc, #224]	; (8010b30 <NetworkParams::callbackFunction(char const*)+0x11c>)
 8010a4e:	f10d 0207 	add.w	r2, sp, #7
 8010a52:	f001 fc6d 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010a56:	b988      	cbnz	r0, 8010a7c <NetworkParams::callbackFunction(char const*)+0x68>
 8010a58:	4a34      	ldr	r2, [pc, #208]	; (8010b2c <NetworkParams::callbackFunction(char const*)+0x118>)
 8010a5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010a5e:	6813      	ldr	r3, [r2, #0]
 8010a60:	1e4d      	subs	r5, r1, #1
 8010a62:	2d04      	cmp	r5, #4
 8010a64:	bf97      	itett	ls
 8010a66:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8010a6a:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 8010a6e:	6013      	strls	r3, [r2, #0]
 8010a70:	f882 105d 	strbls.w	r1, [r2, #93]	; 0x5d
 8010a74:	bf84      	itt	hi
 8010a76:	6013      	strhi	r3, [r2, #0]
 8010a78:	f882 005d 	strbhi.w	r0, [r2, #93]	; 0x5d
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	492d      	ldr	r1, [pc, #180]	; (8010b34 <NetworkParams::callbackFunction(char const*)+0x120>)
 8010a80:	aa02      	add	r2, sp, #8
 8010a82:	f001 fbf7 	bl	8012274 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010a86:	b9d0      	cbnz	r0, 8010abe <NetworkParams::callbackFunction(char const*)+0xaa>
 8010a88:	9b02      	ldr	r3, [sp, #8]
 8010a8a:	b2d9      	uxtb	r1, r3
 8010a8c:	29ac      	cmp	r1, #172	; 0xac
 8010a8e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010a92:	d00a      	beq.n	8010aaa <NetworkParams::callbackFunction(char const*)+0x96>
 8010a94:	29c0      	cmp	r1, #192	; 0xc0
 8010a96:	d00c      	beq.n	8010ab2 <NetworkParams::callbackFunction(char const*)+0x9e>
 8010a98:	290a      	cmp	r1, #10
 8010a9a:	d10d      	bne.n	8010ab8 <NetworkParams::callbackFunction(char const*)+0xa4>
 8010a9c:	4a23      	ldr	r2, [pc, #140]	; (8010b2c <NetworkParams::callbackFunction(char const*)+0x118>)
 8010a9e:	6053      	str	r3, [r2, #4]
 8010aa0:	6813      	ldr	r3, [r2, #0]
 8010aa2:	f043 0302 	orr.w	r3, r3, #2
 8010aa6:	6013      	str	r3, [r2, #0]
 8010aa8:	e7ca      	b.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010aaa:	3a10      	subs	r2, #16
 8010aac:	2a0f      	cmp	r2, #15
 8010aae:	d8c7      	bhi.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010ab0:	e7f4      	b.n	8010a9c <NetworkParams::callbackFunction(char const*)+0x88>
 8010ab2:	2aa8      	cmp	r2, #168	; 0xa8
 8010ab4:	d1c4      	bne.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010ab6:	e7f1      	b.n	8010a9c <NetworkParams::callbackFunction(char const*)+0x88>
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d0ef      	beq.n	8010a9c <NetworkParams::callbackFunction(char const*)+0x88>
 8010abc:	e7c0      	b.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010abe:	4620      	mov	r0, r4
 8010ac0:	491d      	ldr	r1, [pc, #116]	; (8010b38 <NetworkParams::callbackFunction(char const*)+0x124>)
 8010ac2:	aa02      	add	r2, sp, #8
 8010ac4:	f001 fbd6 	bl	8012274 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010ac8:	b970      	cbnz	r0, 8010ae8 <NetworkParams::callbackFunction(char const*)+0xd4>
 8010aca:	9a02      	ldr	r2, [sp, #8]
 8010acc:	2a00      	cmp	r2, #0
 8010ace:	d0b7      	beq.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010ad0:	ba13      	rev	r3, r2
 8010ad2:	43d9      	mvns	r1, r3
 8010ad4:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 8010ad8:	d1b2      	bne.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010ada:	4b14      	ldr	r3, [pc, #80]	; (8010b2c <NetworkParams::callbackFunction(char const*)+0x118>)
 8010adc:	609a      	str	r2, [r3, #8]
 8010ade:	681a      	ldr	r2, [r3, #0]
 8010ae0:	f042 0204 	orr.w	r2, r2, #4
 8010ae4:	601a      	str	r2, [r3, #0]
 8010ae6:	e7ab      	b.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010ae8:	4620      	mov	r0, r4
 8010aea:	4914      	ldr	r1, [pc, #80]	; (8010b3c <NetworkParams::callbackFunction(char const*)+0x128>)
 8010aec:	aa02      	add	r2, sp, #8
 8010aee:	f001 fbc1 	bl	8012274 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010af2:	4d0e      	ldr	r5, [pc, #56]	; (8010b2c <NetworkParams::callbackFunction(char const*)+0x118>)
 8010af4:	b930      	cbnz	r0, 8010b04 <NetworkParams::callbackFunction(char const*)+0xf0>
 8010af6:	9b02      	ldr	r3, [sp, #8]
 8010af8:	60eb      	str	r3, [r5, #12]
 8010afa:	682b      	ldr	r3, [r5, #0]
 8010afc:	f043 0308 	orr.w	r3, r3, #8
 8010b00:	602b      	str	r3, [r5, #0]
 8010b02:	e79d      	b.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010b04:	233f      	movs	r3, #63	; 0x3f
 8010b06:	4620      	mov	r0, r4
 8010b08:	9303      	str	r3, [sp, #12]
 8010b0a:	490d      	ldr	r1, [pc, #52]	; (8010b40 <NetworkParams::callbackFunction(char const*)+0x12c>)
 8010b0c:	ab03      	add	r3, sp, #12
 8010b0e:	f105 0215 	add.w	r2, r5, #21
 8010b12:	f001 fb6b 	bl	80121ec <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8010b16:	2800      	cmp	r0, #0
 8010b18:	d192      	bne.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010b1a:	9b03      	ldr	r3, [sp, #12]
 8010b1c:	442b      	add	r3, r5
 8010b1e:	7558      	strb	r0, [r3, #21]
 8010b20:	682b      	ldr	r3, [r5, #0]
 8010b22:	f043 0320 	orr.w	r3, r3, #32
 8010b26:	e7eb      	b.n	8010b00 <NetworkParams::callbackFunction(char const*)+0xec>
 8010b28:	08016e26 	stmdaeq	r1, {r1, r2, r5, r9, sl, fp, sp, lr}
 8010b2c:	2000a7d0 	ldrdcs	sl, [r0], -r0
 8010b30:	08016e04 	stmdaeq	r1, {r2, r9, sl, fp, sp, lr}
 8010b34:	08016de9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, sl, fp, sp, lr}
 8010b38:	08016e1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sl, fp, sp, lr}
 8010b3c:	08016df4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 8010b40:	08016e14 	stmdaeq	r1, {r2, r4, r9, sl, fp, sp, lr}

08010b44 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8010b44:	f7ff bf66 	b.w	8010a14 <NetworkParams::callbackFunction(char const*)>

08010b48 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 8010b48:	b530      	push	{r4, r5, lr}
 8010b4a:	4614      	mov	r4, r2
 8010b4c:	461d      	mov	r5, r3
 8010b4e:	b087      	sub	sp, #28
 8010b50:	2900      	cmp	r1, #0
 8010b52:	d040      	beq.n	8010bd6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x8e>
 8010b54:	225e      	movs	r2, #94	; 0x5e
 8010b56:	4871      	ldr	r0, [pc, #452]	; (8010d1c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 8010b58:	f002 f933 	bl	8012dc2 <memmove>
 8010b5c:	4622      	mov	r2, r4
 8010b5e:	462b      	mov	r3, r5
 8010b60:	496f      	ldr	r1, [pc, #444]	; (8010d20 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 8010b62:	a803      	add	r0, sp, #12
 8010b64:	f001 fa3a 	bl	8011fdc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8010b68:	4c6c      	ldr	r4, [pc, #432]	; (8010d1c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 8010b6a:	6823      	ldr	r3, [r4, #0]
 8010b6c:	0799      	lsls	r1, r3, #30
 8010b6e:	bf5f      	itttt	pl
 8010b70:	4a6c      	ldrpl	r2, [pc, #432]	; (8010d24 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8010b72:	6812      	ldrpl	r2, [r2, #0]
 8010b74:	6912      	ldrpl	r2, [r2, #16]
 8010b76:	6062      	strpl	r2, [r4, #4]
 8010b78:	075a      	lsls	r2, r3, #29
 8010b7a:	bf5f      	itttt	pl
 8010b7c:	4a69      	ldrpl	r2, [pc, #420]	; (8010d24 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8010b7e:	6812      	ldrpl	r2, [r2, #0]
 8010b80:	6992      	ldrpl	r2, [r2, #24]
 8010b82:	60a2      	strpl	r2, [r4, #8]
 8010b84:	071d      	lsls	r5, r3, #28
 8010b86:	bf5f      	itttt	pl
 8010b88:	4a66      	ldrpl	r2, [pc, #408]	; (8010d24 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8010b8a:	6812      	ldrpl	r2, [r2, #0]
 8010b8c:	6952      	ldrpl	r2, [r2, #20]
 8010b8e:	60e2      	strpl	r2, [r4, #12]
 8010b90:	0698      	lsls	r0, r3, #26
 8010b92:	d40c      	bmi.n	8010bae <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x66>
 8010b94:	223f      	movs	r2, #63	; 0x3f
 8010b96:	4b63      	ldr	r3, [pc, #396]	; (8010d24 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8010b98:	4863      	ldr	r0, [pc, #396]	; (8010d28 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	331b      	adds	r3, #27
 8010b9e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010ba2:	b9f1      	cbnz	r1, 8010be2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x9a>
 8010ba4:	f002 f924 	bl	8012df0 <memset>
 8010ba8:	2300      	movs	r3, #0
 8010baa:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8010bae:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8010bb2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8010bb6:	42a9      	cmp	r1, r5
 8010bb8:	d226      	bcs.n	8010c08 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc0>
 8010bba:	9803      	ldr	r0, [sp, #12]
 8010bbc:	1a6d      	subs	r5, r5, r1
 8010bbe:	4408      	add	r0, r1
 8010bc0:	6821      	ldr	r1, [r4, #0]
 8010bc2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8010bc6:	07c9      	lsls	r1, r1, #31
 8010bc8:	7d23      	ldrb	r3, [r4, #20]
 8010bca:	d40f      	bmi.n	8010bec <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa4>
 8010bcc:	b97a      	cbnz	r2, 8010bee <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa6>
 8010bce:	9300      	str	r3, [sp, #0]
 8010bd0:	4a56      	ldr	r2, [pc, #344]	; (8010d2c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8010bd2:	4b57      	ldr	r3, [pc, #348]	; (8010d30 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8010bd4:	e00e      	b.n	8010bf4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xac>
 8010bd6:	6800      	ldr	r0, [r0, #0]
 8010bd8:	4950      	ldr	r1, [pc, #320]	; (8010d1c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 8010bda:	6803      	ldr	r3, [r0, #0]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	4798      	blx	r3
 8010be0:	e7bc      	b.n	8010b5c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x14>
 8010be2:	3a01      	subs	r2, #1
 8010be4:	f800 1b01 	strb.w	r1, [r0], #1
 8010be8:	d1d9      	bne.n	8010b9e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x56>
 8010bea:	e7dd      	b.n	8010ba8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x60>
 8010bec:	b30a      	cbz	r2, 8010c32 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xea>
 8010bee:	9300      	str	r3, [sp, #0]
 8010bf0:	4a50      	ldr	r2, [pc, #320]	; (8010d34 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8010bf2:	4b4f      	ldr	r3, [pc, #316]	; (8010d30 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8010bf4:	4629      	mov	r1, r5
 8010bf6:	f002 fb45 	bl	8013284 <snprintf>
 8010bfa:	4285      	cmp	r5, r0
 8010bfc:	bfa2      	ittt	ge
 8010bfe:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8010c02:	18c0      	addge	r0, r0, r3
 8010c04:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8010c08:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8010c0c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8010c10:	42a9      	cmp	r1, r5
 8010c12:	d221      	bcs.n	8010c58 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x110>
 8010c14:	9803      	ldr	r0, [sp, #12]
 8010c16:	1a6d      	subs	r5, r5, r1
 8010c18:	4408      	add	r0, r1
 8010c1a:	6821      	ldr	r1, [r4, #0]
 8010c1c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8010c20:	05c9      	lsls	r1, r1, #23
 8010c22:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8010c26:	d408      	bmi.n	8010c3a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf2>
 8010c28:	b94a      	cbnz	r2, 8010c3e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf6>
 8010c2a:	9300      	str	r3, [sp, #0]
 8010c2c:	4a3f      	ldr	r2, [pc, #252]	; (8010d2c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8010c2e:	4b42      	ldr	r3, [pc, #264]	; (8010d38 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8010c30:	e008      	b.n	8010c44 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfc>
 8010c32:	9300      	str	r3, [sp, #0]
 8010c34:	4a41      	ldr	r2, [pc, #260]	; (8010d3c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8010c36:	4b3e      	ldr	r3, [pc, #248]	; (8010d30 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8010c38:	e7dc      	b.n	8010bf4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xac>
 8010c3a:	2a00      	cmp	r2, #0
 8010c3c:	d03e      	beq.n	8010cbc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x174>
 8010c3e:	9300      	str	r3, [sp, #0]
 8010c40:	4a3c      	ldr	r2, [pc, #240]	; (8010d34 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8010c42:	4b3d      	ldr	r3, [pc, #244]	; (8010d38 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8010c44:	4629      	mov	r1, r5
 8010c46:	f002 fb1d 	bl	8013284 <snprintf>
 8010c4a:	4285      	cmp	r5, r0
 8010c4c:	bfa2      	ittt	ge
 8010c4e:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8010c52:	18c0      	addge	r0, r0, r3
 8010c54:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8010c58:	4939      	ldr	r1, [pc, #228]	; (8010d40 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 8010c5a:	a803      	add	r0, sp, #12
 8010c5c:	f001 fa44 	bl	80120e8 <PropertiesBuilder::AddComment(char const*)>
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	6862      	ldr	r2, [r4, #4]
 8010c64:	4937      	ldr	r1, [pc, #220]	; (8010d44 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 8010c66:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010c6a:	a803      	add	r0, sp, #12
 8010c6c:	f001 f9f8 	bl	8012060 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010c70:	6823      	ldr	r3, [r4, #0]
 8010c72:	68a2      	ldr	r2, [r4, #8]
 8010c74:	4934      	ldr	r1, [pc, #208]	; (8010d48 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x200>)
 8010c76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010c7a:	a803      	add	r0, sp, #12
 8010c7c:	f001 f9f0 	bl	8012060 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010c80:	6823      	ldr	r3, [r4, #0]
 8010c82:	4932      	ldr	r1, [pc, #200]	; (8010d4c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>)
 8010c84:	68e2      	ldr	r2, [r4, #12]
 8010c86:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010c8a:	a803      	add	r0, sp, #12
 8010c8c:	f001 f9e8 	bl	8012060 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010c90:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8010c94:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8010c98:	42a9      	cmp	r1, r5
 8010c9a:	d221      	bcs.n	8010ce0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x198>
 8010c9c:	6823      	ldr	r3, [r4, #0]
 8010c9e:	9803      	ldr	r0, [sp, #12]
 8010ca0:	f013 0f20 	tst.w	r3, #32
 8010ca4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8010ca8:	4b1f      	ldr	r3, [pc, #124]	; (8010d28 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8010caa:	4408      	add	r0, r1
 8010cac:	eba5 0501 	sub.w	r5, r5, r1
 8010cb0:	d108      	bne.n	8010cc4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x17c>
 8010cb2:	b942      	cbnz	r2, 8010cc6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x17e>
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	4a26      	ldr	r2, [pc, #152]	; (8010d50 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x208>)
 8010cb8:	4b26      	ldr	r3, [pc, #152]	; (8010d54 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 8010cba:	e007      	b.n	8010ccc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 8010cbc:	9300      	str	r3, [sp, #0]
 8010cbe:	4a1f      	ldr	r2, [pc, #124]	; (8010d3c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8010cc0:	4b1d      	ldr	r3, [pc, #116]	; (8010d38 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8010cc2:	e7bf      	b.n	8010c44 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfc>
 8010cc4:	b32a      	cbz	r2, 8010d12 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ca>
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	4a23      	ldr	r2, [pc, #140]	; (8010d58 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 8010cca:	4b22      	ldr	r3, [pc, #136]	; (8010d54 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 8010ccc:	4629      	mov	r1, r5
 8010cce:	f002 fad9 	bl	8013284 <snprintf>
 8010cd2:	4285      	cmp	r5, r0
 8010cd4:	bfa2      	ittt	ge
 8010cd6:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8010cda:	18c0      	addge	r0, r0, r3
 8010cdc:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8010ce0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010ce4:	b17b      	cbz	r3, 8010d06 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1be>
 8010ce6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010cea:	9b03      	ldr	r3, [sp, #12]
 8010cec:	4413      	add	r3, r2
 8010cee:	227d      	movs	r2, #125	; 0x7d
 8010cf0:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010cf4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010cf8:	9903      	ldr	r1, [sp, #12]
 8010cfa:	54ca      	strb	r2, [r1, r3]
 8010cfc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010d00:	3301      	adds	r3, #1
 8010d02:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010d06:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d0c:	601a      	str	r2, [r3, #0]
 8010d0e:	b007      	add	sp, #28
 8010d10:	bd30      	pop	{r4, r5, pc}
 8010d12:	9300      	str	r3, [sp, #0]
 8010d14:	4a11      	ldr	r2, [pc, #68]	; (8010d5c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x214>)
 8010d16:	4b0f      	ldr	r3, [pc, #60]	; (8010d54 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 8010d18:	e7d8      	b.n	8010ccc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 8010d1a:	bf00      	nop
 8010d1c:	2000a7d0 	ldrdcs	sl, [r0], -r0
 8010d20:	08016e2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, sl, fp, sp, lr}
 8010d24:	2000a7cc 	andcs	sl, r0, ip, asr #15
 8010d28:	2000a7e5 	andcs	sl, r0, r5, ror #15
 8010d2c:	0801553b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, ip, lr}
 8010d30:	08016e26 	stmdaeq	r1, {r1, r2, r5, r9, sl, fp, sp, lr}
 8010d34:	08015532 	stmdaeq	r1, {r1, r4, r5, r8, sl, ip, lr}
 8010d38:	08016e04 	stmdaeq	r1, {r2, r9, sl, fp, sp, lr}
 8010d3c:	0801553c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr}
 8010d40:	08016ddf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, sl, fp, sp, lr}
 8010d44:	08016de9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, sl, fp, sp, lr}
 8010d48:	08016e1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sl, fp, sp, lr}
 8010d4c:	08016df4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 8010d50:	0801554e 	stmdaeq	r1, {r1, r2, r3, r6, r8, sl, ip, lr}
 8010d54:	08016e14 	stmdaeq	r1, {r2, r4, r9, sl, fp, sp, lr}
 8010d58:	08015543 	stmdaeq	r1, {r0, r1, r6, r8, sl, ip, lr}
 8010d5c:	0801554f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, sl, ip, lr}

08010d60 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 8010d60:	b513      	push	{r0, r1, r4, lr}
 8010d62:	6804      	ldr	r4, [r0, #0]
 8010d64:	b914      	cbnz	r4, 8010d6c <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8010d66:	601c      	str	r4, [r3, #0]
 8010d68:	b002      	add	sp, #8
 8010d6a:	bd10      	pop	{r4, pc}
 8010d6c:	9300      	str	r3, [sp, #0]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	460a      	mov	r2, r1
 8010d72:	2100      	movs	r1, #0
 8010d74:	f7ff fee8 	bl	8010b48 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 8010d78:	e7f6      	b.n	8010d68 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

08010d7a <NetworkParams::Dump()>:
 8010d7a:	4770      	bx	lr

08010d7c <memcpy.isra.0>:
 8010d7c:	3801      	subs	r0, #1
 8010d7e:	440a      	add	r2, r1
 8010d80:	4291      	cmp	r1, r2
 8010d82:	d100      	bne.n	8010d86 <memcpy.isra.0+0xa>
 8010d84:	4770      	bx	lr
 8010d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d8a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010d8e:	e7f7      	b.n	8010d80 <memcpy.isra.0+0x4>

08010d90 <arp_announce>:
 8010d90:	4803      	ldr	r0, [pc, #12]	; (8010da0 <arp_announce+0x10>)
 8010d92:	69c3      	ldr	r3, [r0, #28]
 8010d94:	b113      	cbz	r3, 8010d9c <arp_announce+0xc>
 8010d96:	212a      	movs	r1, #42	; 0x2a
 8010d98:	f003 ba28 	b.w	80141ec <emac_eth_send>
 8010d9c:	4770      	bx	lr
 8010d9e:	bf00      	nop
 8010da0:	2000a830 	andcs	sl, r0, r0, lsr r8

08010da4 <arp_handle_request>:
 8010da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010da6:	2204      	movs	r2, #4
 8010da8:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8010dac:	4604      	mov	r4, r0
 8010dae:	eb0d 0002 	add.w	r0, sp, r2
 8010db2:	f7ff ffe3 	bl	8010d7c <memcpy.isra.0>
 8010db6:	4b0d      	ldr	r3, [pc, #52]	; (8010dec <arp_handle_request+0x48>)
 8010db8:	9a01      	ldr	r2, [sp, #4]
 8010dba:	69db      	ldr	r3, [r3, #28]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d113      	bne.n	8010de8 <arp_handle_request+0x44>
 8010dc0:	2206      	movs	r2, #6
 8010dc2:	4d0b      	ldr	r5, [pc, #44]	; (8010df0 <arp_handle_request+0x4c>)
 8010dc4:	18a1      	adds	r1, r4, r2
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f7ff ffd8 	bl	8010d7c <memcpy.isra.0>
 8010dcc:	f104 0116 	add.w	r1, r4, #22
 8010dd0:	f105 0020 	add.w	r0, r5, #32
 8010dd4:	2206      	movs	r2, #6
 8010dd6:	f7ff ffd1 	bl	8010d7c <memcpy.isra.0>
 8010dda:	69e3      	ldr	r3, [r4, #28]
 8010ddc:	212a      	movs	r1, #42	; 0x2a
 8010dde:	4628      	mov	r0, r5
 8010de0:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8010de4:	f003 fa02 	bl	80141ec <emac_eth_send>
 8010de8:	b003      	add	sp, #12
 8010dea:	bd30      	pop	{r4, r5, pc}
 8010dec:	2000a830 	andcs	sl, r0, r0, lsr r8
 8010df0:	2000a85c 	andcs	sl, r0, ip, asr r8

08010df4 <arp_handle_reply>:
 8010df4:	69c1      	ldr	r1, [r0, #28]
 8010df6:	3016      	adds	r0, #22
 8010df8:	f000 b80a 	b.w	8010e10 <arp_cache_update>

08010dfc <arp_send_request>:
 8010dfc:	4b03      	ldr	r3, [pc, #12]	; (8010e0c <arp_send_request+0x10>)
 8010dfe:	212a      	movs	r1, #42	; 0x2a
 8010e00:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8010e04:	4618      	mov	r0, r3
 8010e06:	f003 b9f1 	b.w	80141ec <emac_eth_send>
 8010e0a:	bf00      	nop
 8010e0c:	2000a888 	andcs	sl, r0, r8, lsl #17

08010e10 <arp_cache_update>:
 8010e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e12:	4e11      	ldr	r6, [pc, #68]	; (8010e58 <arp_cache_update+0x48>)
 8010e14:	8833      	ldrh	r3, [r6, #0]
 8010e16:	2b20      	cmp	r3, #32
 8010e18:	d018      	beq.n	8010e4c <arp_cache_update+0x3c>
 8010e1a:	2400      	movs	r4, #0
 8010e1c:	220c      	movs	r2, #12
 8010e1e:	4d0f      	ldr	r5, [pc, #60]	; (8010e5c <arp_cache_update+0x4c>)
 8010e20:	b2a7      	uxth	r7, r4
 8010e22:	42bb      	cmp	r3, r7
 8010e24:	d80b      	bhi.n	8010e3e <arp_cache_update+0x2e>
 8010e26:	fb02 5203 	mla	r2, r2, r3, r5
 8010e2a:	1d84      	adds	r4, r0, #6
 8010e2c:	3203      	adds	r2, #3
 8010e2e:	42a0      	cmp	r0, r4
 8010e30:	d10d      	bne.n	8010e4e <arp_cache_update+0x3e>
 8010e32:	220c      	movs	r2, #12
 8010e34:	435a      	muls	r2, r3
 8010e36:	3301      	adds	r3, #1
 8010e38:	50a9      	str	r1, [r5, r2]
 8010e3a:	8033      	strh	r3, [r6, #0]
 8010e3c:	e006      	b.n	8010e4c <arp_cache_update+0x3c>
 8010e3e:	3401      	adds	r4, #1
 8010e40:	fb02 5704 	mla	r7, r2, r4, r5
 8010e44:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 8010e48:	428f      	cmp	r7, r1
 8010e4a:	d1e9      	bne.n	8010e20 <arp_cache_update+0x10>
 8010e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e4e:	f810 7b01 	ldrb.w	r7, [r0], #1
 8010e52:	f802 7f01 	strb.w	r7, [r2, #1]!
 8010e56:	e7ea      	b.n	8010e2e <arp_cache_update+0x1e>
 8010e58:	2000aa34 	andcs	sl, r0, r4, lsr sl
 8010e5c:	2000a8b4 			; <UNDEFINED> instruction: 0x2000a8b4

08010e60 <arp_cache_lookup>:
 8010e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e64:	2200      	movs	r2, #0
 8010e66:	4606      	mov	r6, r0
 8010e68:	460c      	mov	r4, r1
 8010e6a:	200c      	movs	r0, #12
 8010e6c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8010ef4 <arp_cache_lookup+0x94>
 8010e70:	fb00 f302 	mul.w	r3, r0, r2
 8010e74:	f853 1008 	ldr.w	r1, [r3, r8]
 8010e78:	42b1      	cmp	r1, r6
 8010e7a:	d10d      	bne.n	8010e98 <arp_cache_lookup+0x38>
 8010e7c:	3304      	adds	r3, #4
 8010e7e:	4443      	add	r3, r8
 8010e80:	3c01      	subs	r4, #1
 8010e82:	1d9a      	adds	r2, r3, #6
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d102      	bne.n	8010e8e <arp_cache_lookup+0x2e>
 8010e88:	4630      	mov	r0, r6
 8010e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e8e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010e92:	f804 1f01 	strb.w	r1, [r4, #1]!
 8010e96:	e7f5      	b.n	8010e84 <arp_cache_lookup+0x24>
 8010e98:	b111      	cbz	r1, 8010ea0 <arp_cache_lookup+0x40>
 8010e9a:	3201      	adds	r2, #1
 8010e9c:	2a20      	cmp	r2, #32
 8010e9e:	d1e7      	bne.n	8010e70 <arp_cache_lookup+0x10>
 8010ea0:	2704      	movs	r7, #4
 8010ea2:	f8df a054 	ldr.w	sl, [pc, #84]	; 8010ef8 <arp_cache_lookup+0x98>
 8010ea6:	f8ba 5000 	ldrh.w	r5, [sl]
 8010eaa:	3f01      	subs	r7, #1
 8010eac:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8010eb0:	d101      	bne.n	8010eb6 <arp_cache_lookup+0x56>
 8010eb2:	463e      	mov	r6, r7
 8010eb4:	e7e8      	b.n	8010e88 <arp_cache_lookup+0x28>
 8010eb6:	4630      	mov	r0, r6
 8010eb8:	f7ff ffa0 	bl	8010dfc <arp_send_request>
 8010ebc:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8010ec0:	f1b9 0901 	subs.w	r9, r9, #1
 8010ec4:	f8ba 3000 	ldrh.w	r3, [sl]
 8010ec8:	d011      	beq.n	8010eee <arp_cache_lookup+0x8e>
 8010eca:	429d      	cmp	r5, r3
 8010ecc:	d00c      	beq.n	8010ee8 <arp_cache_lookup+0x88>
 8010ece:	230c      	movs	r3, #12
 8010ed0:	fb03 8505 	mla	r5, r3, r5, r8
 8010ed4:	3c01      	subs	r4, #1
 8010ed6:	1d2b      	adds	r3, r5, #4
 8010ed8:	350a      	adds	r5, #10
 8010eda:	42ab      	cmp	r3, r5
 8010edc:	d0d4      	beq.n	8010e88 <arp_cache_lookup+0x28>
 8010ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ee2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010ee6:	e7f8      	b.n	8010eda <arp_cache_lookup+0x7a>
 8010ee8:	f7f6 fb1e 	bl	8007528 <net_handle>
 8010eec:	e7e8      	b.n	8010ec0 <arp_cache_lookup+0x60>
 8010eee:	429d      	cmp	r5, r3
 8010ef0:	d0db      	beq.n	8010eaa <arp_cache_lookup+0x4a>
 8010ef2:	e7ec      	b.n	8010ece <arp_cache_lookup+0x6e>
 8010ef4:	2000a8b4 			; <UNDEFINED> instruction: 0x2000a8b4
 8010ef8:	2000aa34 	andcs	sl, r0, r4, lsr sl

08010efc <_parse_response>:
 8010efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f00:	460c      	mov	r4, r1
 8010f02:	4e5b      	ldr	r6, [pc, #364]	; (8011070 <_parse_response+0x174>)
 8010f04:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8010f08:	6837      	ldr	r7, [r6, #0]
 8010f0a:	b2c5      	uxtb	r5, r0
 8010f0c:	f10d 0826 	add.w	r8, sp, #38	; 0x26
 8010f10:	f7f6 fb0a 	bl	8007528 <net_handle>
 8010f14:	f44f 7209 	mov.w	r2, #548	; 0x224
 8010f18:	4628      	mov	r0, r5
 8010f1a:	f8cd 8000 	str.w	r8, [sp]
 8010f1e:	ab0a      	add	r3, sp, #40	; 0x28
 8010f20:	a90b      	add	r1, sp, #44	; 0x2c
 8010f22:	f7fe fd81 	bl	800fa28 <udp_recv>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d05f      	beq.n	8010fea <_parse_response+0xee>
 8010f2a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8010f2e:	2b43      	cmp	r3, #67	; 0x43
 8010f30:	d15b      	bne.n	8010fea <_parse_response+0xee>
 8010f32:	aa12      	add	r2, sp, #72	; 0x48
 8010f34:	1e63      	subs	r3, r4, #1
 8010f36:	1d61      	adds	r1, r4, #5
 8010f38:	428b      	cmp	r3, r1
 8010f3a:	d150      	bne.n	8010fde <_parse_response+0xe2>
 8010f3c:	2100      	movs	r1, #0
 8010f3e:	ab0b      	add	r3, sp, #44	; 0x2c
 8010f40:	181c      	adds	r4, r3, r0
 8010f42:	4608      	mov	r0, r1
 8010f44:	4b4b      	ldr	r3, [pc, #300]	; (8011074 <_parse_response+0x178>)
 8010f46:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8010f4a:	781a      	ldrb	r2, [r3, #0]
 8010f4c:	f893 b001 	ldrb.w	fp, [r3, #1]
 8010f50:	f893 c002 	ldrb.w	ip, [r3, #2]
 8010f54:	78dd      	ldrb	r5, [r3, #3]
 8010f56:	4b48      	ldr	r3, [pc, #288]	; (8011078 <_parse_response+0x17c>)
 8010f58:	9207      	str	r2, [sp, #28]
 8010f5a:	781a      	ldrb	r2, [r3, #0]
 8010f5c:	789f      	ldrb	r7, [r3, #2]
 8010f5e:	78de      	ldrb	r6, [r3, #3]
 8010f60:	9206      	str	r2, [sp, #24]
 8010f62:	785a      	ldrb	r2, [r3, #1]
 8010f64:	4b45      	ldr	r3, [pc, #276]	; (801107c <_parse_response+0x180>)
 8010f66:	9203      	str	r2, [sp, #12]
 8010f68:	f893 a000 	ldrb.w	sl, [r3]
 8010f6c:	f893 9001 	ldrb.w	r9, [r3, #1]
 8010f70:	f893 8002 	ldrb.w	r8, [r3, #2]
 8010f74:	f893 e003 	ldrb.w	lr, [r3, #3]
 8010f78:	ab47      	add	r3, sp, #284	; 0x11c
 8010f7a:	42a3      	cmp	r3, r4
 8010f7c:	d33f      	bcc.n	8010ffe <_parse_response+0x102>
 8010f7e:	9b04      	ldr	r3, [sp, #16]
 8010f80:	b143      	cbz	r3, 8010f94 <_parse_response+0x98>
 8010f82:	4b3e      	ldr	r3, [pc, #248]	; (801107c <_parse_response+0x180>)
 8010f84:	f883 a000 	strb.w	sl, [r3]
 8010f88:	f883 9001 	strb.w	r9, [r3, #1]
 8010f8c:	f883 8002 	strb.w	r8, [r3, #2]
 8010f90:	f883 e003 	strb.w	lr, [r3, #3]
 8010f94:	9b05      	ldr	r3, [sp, #20]
 8010f96:	b133      	cbz	r3, 8010fa6 <_parse_response+0xaa>
 8010f98:	4b37      	ldr	r3, [pc, #220]	; (8011078 <_parse_response+0x17c>)
 8010f9a:	9a06      	ldr	r2, [sp, #24]
 8010f9c:	709f      	strb	r7, [r3, #2]
 8010f9e:	701a      	strb	r2, [r3, #0]
 8010fa0:	9a03      	ldr	r2, [sp, #12]
 8010fa2:	70de      	strb	r6, [r3, #3]
 8010fa4:	705a      	strb	r2, [r3, #1]
 8010fa6:	b139      	cbz	r1, 8010fb8 <_parse_response+0xbc>
 8010fa8:	4b32      	ldr	r3, [pc, #200]	; (8011074 <_parse_response+0x178>)
 8010faa:	9a07      	ldr	r2, [sp, #28]
 8010fac:	f883 b001 	strb.w	fp, [r3, #1]
 8010fb0:	701a      	strb	r2, [r3, #0]
 8010fb2:	f883 c002 	strb.w	ip, [r3, #2]
 8010fb6:	70dd      	strb	r5, [r3, #3]
 8010fb8:	2802      	cmp	r0, #2
 8010fba:	d10c      	bne.n	8010fd6 <_parse_response+0xda>
 8010fbc:	4b30      	ldr	r3, [pc, #192]	; (8011080 <_parse_response+0x184>)
 8010fbe:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8010fc2:	701a      	strb	r2, [r3, #0]
 8010fc4:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8010fc8:	705a      	strb	r2, [r3, #1]
 8010fca:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 8010fce:	709a      	strb	r2, [r3, #2]
 8010fd0:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8010fd4:	70da      	strb	r2, [r3, #3]
 8010fd6:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8010fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fde:	f812 cb01 	ldrb.w	ip, [r2], #1
 8010fe2:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010fe6:	45e6      	cmp	lr, ip
 8010fe8:	d0a6      	beq.n	8010f38 <_parse_response+0x3c>
 8010fea:	6833      	ldr	r3, [r6, #0]
 8010fec:	1bdb      	subs	r3, r3, r7
 8010fee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010ff2:	d38b      	bcc.n	8010f0c <_parse_response+0x10>
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	d1a1      	bne.n	8010f3c <_parse_response+0x40>
 8010ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ffc:	e7eb      	b.n	8010fd6 <_parse_response+0xda>
 8010ffe:	781a      	ldrb	r2, [r3, #0]
 8011000:	2a35      	cmp	r2, #53	; 0x35
 8011002:	d011      	beq.n	8011028 <_parse_response+0x12c>
 8011004:	d808      	bhi.n	8011018 <_parse_response+0x11c>
 8011006:	2a01      	cmp	r2, #1
 8011008:	d011      	beq.n	801102e <_parse_response+0x132>
 801100a:	2a03      	cmp	r2, #3
 801100c:	d01a      	beq.n	8011044 <_parse_response+0x148>
 801100e:	b14a      	cbz	r2, 8011024 <_parse_response+0x128>
 8011010:	1c9a      	adds	r2, r3, #2
 8011012:	785b      	ldrb	r3, [r3, #1]
 8011014:	4413      	add	r3, r2
 8011016:	e7b0      	b.n	8010f7a <_parse_response+0x7e>
 8011018:	2a36      	cmp	r2, #54	; 0x36
 801101a:	d01f      	beq.n	801105c <_parse_response+0x160>
 801101c:	2aff      	cmp	r2, #255	; 0xff
 801101e:	d1f7      	bne.n	8011010 <_parse_response+0x114>
 8011020:	4623      	mov	r3, r4
 8011022:	e7aa      	b.n	8010f7a <_parse_response+0x7e>
 8011024:	3301      	adds	r3, #1
 8011026:	e7a8      	b.n	8010f7a <_parse_response+0x7e>
 8011028:	7898      	ldrb	r0, [r3, #2]
 801102a:	3303      	adds	r3, #3
 801102c:	e7a5      	b.n	8010f7a <_parse_response+0x7e>
 801102e:	f893 a002 	ldrb.w	sl, [r3, #2]
 8011032:	f893 9003 	ldrb.w	r9, [r3, #3]
 8011036:	f893 8004 	ldrb.w	r8, [r3, #4]
 801103a:	f893 e005 	ldrb.w	lr, [r3, #5]
 801103e:	9204      	str	r2, [sp, #16]
 8011040:	3306      	adds	r3, #6
 8011042:	e79a      	b.n	8010f7a <_parse_response+0x7e>
 8011044:	789a      	ldrb	r2, [r3, #2]
 8011046:	791f      	ldrb	r7, [r3, #4]
 8011048:	9206      	str	r2, [sp, #24]
 801104a:	78da      	ldrb	r2, [r3, #3]
 801104c:	795e      	ldrb	r6, [r3, #5]
 801104e:	9203      	str	r2, [sp, #12]
 8011050:	785a      	ldrb	r2, [r3, #1]
 8011052:	4413      	add	r3, r2
 8011054:	2201      	movs	r2, #1
 8011056:	3302      	adds	r3, #2
 8011058:	9205      	str	r2, [sp, #20]
 801105a:	e78e      	b.n	8010f7a <_parse_response+0x7e>
 801105c:	789a      	ldrb	r2, [r3, #2]
 801105e:	f893 b003 	ldrb.w	fp, [r3, #3]
 8011062:	f893 c004 	ldrb.w	ip, [r3, #4]
 8011066:	795d      	ldrb	r5, [r3, #5]
 8011068:	2101      	movs	r1, #1
 801106a:	9207      	str	r2, [sp, #28]
 801106c:	3306      	adds	r3, #6
 801106e:	e784      	b.n	8010f7a <_parse_response+0x7e>
 8011070:	2000af0c 	andcs	sl, r0, ip, lsl #30
 8011074:	2000ac68 	andcs	sl, r0, r8, ror #24
 8011078:	2000aa38 	andcs	sl, r0, r8, lsr sl
 801107c:	2000aa40 	andcs	sl, r0, r0, asr #20
 8011080:	2000aa3c 	andcs	sl, r0, ip, lsr sl

08011084 <memcpy.isra.0>:
 8011084:	3801      	subs	r0, #1
 8011086:	440a      	add	r2, r1
 8011088:	4291      	cmp	r1, r2
 801108a:	d100      	bne.n	801108e <memcpy.isra.0+0xa>
 801108c:	4770      	bx	lr
 801108e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011092:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011096:	e7f7      	b.n	8011088 <memcpy.isra.0+0x4>

08011098 <dhcp_client>:
 8011098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801109c:	b087      	sub	sp, #28
 801109e:	9203      	str	r2, [sp, #12]
 80110a0:	4a77      	ldr	r2, [pc, #476]	; (8011280 <dhcp_client+0x1e8>)
 80110a2:	460f      	mov	r7, r1
 80110a4:	4605      	mov	r5, r0
 80110a6:	f44f 7309 	mov.w	r3, #548	; 0x224
 80110aa:	4614      	mov	r4, r2
 80110ac:	2100      	movs	r1, #0
 80110ae:	3b01      	subs	r3, #1
 80110b0:	f802 1b01 	strb.w	r1, [r2], #1
 80110b4:	d1fb      	bne.n	80110ae <dhcp_client+0x16>
 80110b6:	f240 1301 	movw	r3, #257	; 0x101
 80110ba:	2206      	movs	r2, #6
 80110bc:	4629      	mov	r1, r5
 80110be:	4871      	ldr	r0, [pc, #452]	; (8011284 <dhcp_client+0x1ec>)
 80110c0:	8023      	strh	r3, [r4, #0]
 80110c2:	70a2      	strb	r2, [r4, #2]
 80110c4:	f7ff ffde 	bl	8011084 <memcpy.isra.0>
 80110c8:	4b6f      	ldr	r3, [pc, #444]	; (8011288 <dhcp_client+0x1f0>)
 80110ca:	2044      	movs	r0, #68	; 0x44
 80110cc:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80110d0:	f240 1335 	movw	r3, #309	; 0x135
 80110d4:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 80110d8:	f7fe fc6c 	bl	800f9b4 <udp_bind>
 80110dc:	1e06      	subs	r6, r0, #0
 80110de:	f2c0 80c9 	blt.w	8011274 <dhcp_client+0x1dc>
 80110e2:	f04f 0915 	mov.w	r9, #21
 80110e6:	f8df a198 	ldr.w	sl, [pc, #408]	; 8011280 <dhcp_client+0x1e8>
 80110ea:	f1b9 0901 	subs.w	r9, r9, #1
 80110ee:	d11f      	bne.n	8011130 <dhcp_client+0x98>
 80110f0:	464c      	mov	r4, r9
 80110f2:	2044      	movs	r0, #68	; 0x44
 80110f4:	f7fe fc78 	bl	800f9e8 <udp_unbind>
 80110f8:	2c00      	cmp	r4, #0
 80110fa:	f000 80be 	beq.w	801127a <dhcp_client+0x1e2>
 80110fe:	2204      	movs	r2, #4
 8011100:	4962      	ldr	r1, [pc, #392]	; (801128c <dhcp_client+0x1f4>)
 8011102:	a805      	add	r0, sp, #20
 8011104:	f7ff ffbe 	bl	8011084 <memcpy.isra.0>
 8011108:	9b05      	ldr	r3, [sp, #20]
 801110a:	2204      	movs	r2, #4
 801110c:	4960      	ldr	r1, [pc, #384]	; (8011290 <dhcp_client+0x1f8>)
 801110e:	603b      	str	r3, [r7, #0]
 8011110:	a805      	add	r0, sp, #20
 8011112:	f7ff ffb7 	bl	8011084 <memcpy.isra.0>
 8011116:	9b05      	ldr	r3, [sp, #20]
 8011118:	a805      	add	r0, sp, #20
 801111a:	60bb      	str	r3, [r7, #8]
 801111c:	2204      	movs	r2, #4
 801111e:	495d      	ldr	r1, [pc, #372]	; (8011294 <dhcp_client+0x1fc>)
 8011120:	f7ff ffb0 	bl	8011084 <memcpy.isra.0>
 8011124:	2000      	movs	r0, #0
 8011126:	9b05      	ldr	r3, [sp, #20]
 8011128:	607b      	str	r3, [r7, #4]
 801112a:	b007      	add	sp, #28
 801112c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011130:	f643 5301 	movw	r3, #15617	; 0x3d01
 8011134:	f240 1807 	movw	r8, #263	; 0x107
 8011138:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 801113c:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8011140:	782b      	ldrb	r3, [r5, #0]
 8011142:	4a55      	ldr	r2, [pc, #340]	; (8011298 <dhcp_client+0x200>)
 8011144:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8011148:	786b      	ldrb	r3, [r5, #1]
 801114a:	fa5f fb86 	uxtb.w	fp, r6
 801114e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8011152:	78ab      	ldrb	r3, [r5, #2]
 8011154:	4651      	mov	r1, sl
 8011156:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 801115a:	78eb      	ldrb	r3, [r5, #3]
 801115c:	4658      	mov	r0, fp
 801115e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8011162:	792b      	ldrb	r3, [r5, #4]
 8011164:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8011168:	796b      	ldrb	r3, [r5, #5]
 801116a:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 801116e:	4b4b      	ldr	r3, [pc, #300]	; (801129c <dhcp_client+0x204>)
 8011170:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8011174:	23ff      	movs	r3, #255	; 0xff
 8011176:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 801117a:	2343      	movs	r3, #67	; 0x43
 801117c:	f240 1205 	movw	r2, #261	; 0x105
 8011180:	9300      	str	r3, [sp, #0]
 8011182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011186:	f7fe fcab 	bl	800fae0 <udp_send>
 801118a:	4629      	mov	r1, r5
 801118c:	4630      	mov	r0, r6
 801118e:	f7ff feb5 	bl	8010efc <_parse_response>
 8011192:	2802      	cmp	r0, #2
 8011194:	d1a9      	bne.n	80110ea <dhcp_client+0x52>
 8011196:	f643 5303 	movw	r3, #15619	; 0x3d03
 801119a:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 801119e:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 80111a2:	782b      	ldrb	r3, [r5, #0]
 80111a4:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80112a0 <dhcp_client+0x208>
 80111a8:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 80111ac:	786b      	ldrb	r3, [r5, #1]
 80111ae:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 80111b2:	78ab      	ldrb	r3, [r5, #2]
 80111b4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 80111b8:	78eb      	ldrb	r3, [r5, #3]
 80111ba:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 80111be:	792b      	ldrb	r3, [r5, #4]
 80111c0:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 80111c4:	796b      	ldrb	r3, [r5, #5]
 80111c6:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 80111ca:	f240 4332 	movw	r3, #1074	; 0x432
 80111ce:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 80111d2:	4b2e      	ldr	r3, [pc, #184]	; (801128c <dhcp_client+0x1f4>)
 80111d4:	881a      	ldrh	r2, [r3, #0]
 80111d6:	885b      	ldrh	r3, [r3, #2]
 80111d8:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 80111dc:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 80111e0:	f240 4336 	movw	r3, #1078	; 0x436
 80111e4:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 80111e8:	4b2e      	ldr	r3, [pc, #184]	; (80112a4 <dhcp_client+0x20c>)
 80111ea:	221e      	movs	r2, #30
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 80111f2:	230c      	movs	r3, #12
 80111f4:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 80111f8:	9b03      	ldr	r3, [sp, #12]
 80111fa:	1e58      	subs	r0, r3, #1
 80111fc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011200:	f1a2 0e1e 	sub.w	lr, r2, #30
 8011204:	1c51      	adds	r1, r2, #1
 8011206:	bb8b      	cbnz	r3, 801126c <dhcp_client+0x1d4>
 8011208:	2037      	movs	r0, #55	; 0x37
 801120a:	18a3      	adds	r3, r4, r2
 801120c:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8011210:	2006      	movs	r0, #6
 8011212:	4421      	add	r1, r4
 8011214:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8011218:	2103      	movs	r1, #3
 801121a:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 801121e:	210f      	movs	r1, #15
 8011220:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8011224:	213a      	movs	r1, #58	; 0x3a
 8011226:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 801122a:	213b      	movs	r1, #59	; 0x3b
 801122c:	f04f 0801 	mov.w	r8, #1
 8011230:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8011234:	21ff      	movs	r1, #255	; 0xff
 8011236:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 801123a:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 801123e:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8011242:	2343      	movs	r3, #67	; 0x43
 8011244:	32f5      	adds	r2, #245	; 0xf5
 8011246:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 801124a:	4651      	mov	r1, sl
 801124c:	9300      	str	r3, [sp, #0]
 801124e:	b292      	uxth	r2, r2
 8011250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011254:	4658      	mov	r0, fp
 8011256:	f7fe fc43 	bl	800fae0 <udp_send>
 801125a:	4629      	mov	r1, r5
 801125c:	4630      	mov	r0, r6
 801125e:	f7ff fe4d 	bl	8010efc <_parse_response>
 8011262:	2805      	cmp	r0, #5
 8011264:	f47f af41 	bne.w	80110ea <dhcp_client+0x52>
 8011268:	4644      	mov	r4, r8
 801126a:	e742      	b.n	80110f2 <dhcp_client+0x5a>
 801126c:	460a      	mov	r2, r1
 801126e:	f80c 3b01 	strb.w	r3, [ip], #1
 8011272:	e7c3      	b.n	80111fc <dhcp_client+0x164>
 8011274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011278:	e757      	b.n	801112a <dhcp_client+0x92>
 801127a:	f06f 0001 	mvn.w	r0, #1
 801127e:	e754      	b.n	801112a <dhcp_client+0x92>
 8011280:	2000aa44 	andcs	sl, r0, r4, asr #20
 8011284:	2000aa60 	andcs	sl, r0, r0, ror #20
 8011288:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 801128c:	2000aa3c 	andcs	sl, r0, ip, lsr sl
 8011290:	2000aa38 	andcs	sl, r0, r8, lsr sl
 8011294:	2000aa40 	andcs	sl, r0, r0, asr #20
 8011298:	03010637 	movweq	r0, #5687	; 0x1637
 801129c:	3b3a0f06 	blcc	8e94ebc <__exidx_end+0xe7d97c>
 80112a0:	2000ab4e 	andcs	sl, r0, lr, asr #22
 80112a4:	2000ac68 	andcs	sl, r0, r8, ror #24

080112a8 <dhcp_client_release>:
 80112a8:	b507      	push	{r0, r1, r2, lr}
 80112aa:	2044      	movs	r0, #68	; 0x44
 80112ac:	f7fe fb82 	bl	800f9b4 <udp_bind>
 80112b0:	f243 6307 	movw	r3, #13831	; 0x3607
 80112b4:	4911      	ldr	r1, [pc, #68]	; (80112fc <dhcp_client_release+0x54>)
 80112b6:	b2c0      	uxtb	r0, r0
 80112b8:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 80112bc:	2304      	movs	r3, #4
 80112be:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 80112c2:	4b0f      	ldr	r3, [pc, #60]	; (8011300 <dhcp_client_release+0x58>)
 80112c4:	781a      	ldrb	r2, [r3, #0]
 80112c6:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 80112ca:	785a      	ldrb	r2, [r3, #1]
 80112cc:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 80112d0:	789a      	ldrb	r2, [r3, #2]
 80112d2:	78db      	ldrb	r3, [r3, #3]
 80112d4:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 80112d8:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 80112dc:	23ff      	movs	r3, #255	; 0xff
 80112de:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 80112e2:	2343      	movs	r3, #67	; 0x43
 80112e4:	22fa      	movs	r2, #250	; 0xfa
 80112e6:	9300      	str	r3, [sp, #0]
 80112e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80112ec:	f7fe fbf8 	bl	800fae0 <udp_send>
 80112f0:	2044      	movs	r0, #68	; 0x44
 80112f2:	b003      	add	sp, #12
 80112f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80112f8:	f7fe bb76 	b.w	800f9e8 <udp_unbind>
 80112fc:	2000aa44 	andcs	sl, r0, r4, asr #20
 8011300:	2000ac68 	andcs	sl, r0, r8, ror #24

08011304 <memcpy.isra.0>:
 8011304:	3801      	subs	r0, #1
 8011306:	440a      	add	r2, r1
 8011308:	4291      	cmp	r1, r2
 801130a:	d100      	bne.n	801130e <memcpy.isra.0+0xa>
 801130c:	4770      	bx	lr
 801130e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011312:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011316:	e7f7      	b.n	8011308 <memcpy.isra.0+0x4>

08011318 <_send_report>:
 8011318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801131a:	491c      	ldr	r1, [pc, #112]	; (801138c <_send_report+0x74>)
 801131c:	4c1c      	ldr	r4, [pc, #112]	; (8011390 <_send_report+0x78>)
 801131e:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8011322:	9001      	str	r0, [sp, #4]
 8011324:	70cb      	strb	r3, [r1, #3]
 8011326:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801132a:	f3c0 6007 	ubfx	r0, r0, #24, #8
 801132e:	710b      	strb	r3, [r1, #4]
 8011330:	7148      	strb	r0, [r1, #5]
 8011332:	2206      	movs	r2, #6
 8011334:	4620      	mov	r0, r4
 8011336:	f7ff ffe5 	bl	8011304 <memcpy.isra.0>
 801133a:	2204      	movs	r2, #4
 801133c:	2700      	movs	r7, #0
 801133e:	4d15      	ldr	r5, [pc, #84]	; (8011394 <_send_report+0x7c>)
 8011340:	eb0d 0102 	add.w	r1, sp, r2
 8011344:	882b      	ldrh	r3, [r5, #0]
 8011346:	f104 001e 	add.w	r0, r4, #30
 801134a:	f104 060e 	add.w	r6, r4, #14
 801134e:	8263      	strh	r3, [r4, #18]
 8011350:	f7ff ffd8 	bl	8011304 <memcpy.isra.0>
 8011354:	2118      	movs	r1, #24
 8011356:	4630      	mov	r0, r6
 8011358:	8327      	strh	r7, [r4, #24]
 801135a:	f000 f8c6 	bl	80114ea <net_chksum>
 801135e:	2204      	movs	r2, #4
 8011360:	8320      	strh	r0, [r4, #24]
 8011362:	eb0d 0102 	add.w	r1, sp, r2
 8011366:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801136a:	f7ff ffcb 	bl	8011304 <memcpy.isra.0>
 801136e:	2120      	movs	r1, #32
 8011370:	4630      	mov	r0, r6
 8011372:	8527      	strh	r7, [r4, #40]	; 0x28
 8011374:	f000 f8b9 	bl	80114ea <net_chksum>
 8011378:	212e      	movs	r1, #46	; 0x2e
 801137a:	8520      	strh	r0, [r4, #40]	; 0x28
 801137c:	4620      	mov	r0, r4
 801137e:	f002 ff35 	bl	80141ec <emac_eth_send>
 8011382:	882b      	ldrh	r3, [r5, #0]
 8011384:	3301      	adds	r3, #1
 8011386:	802b      	strh	r3, [r5, #0]
 8011388:	b003      	add	sp, #12
 801138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801138c:	2000adc4 	andcs	sl, r0, r4, asr #27
 8011390:	2000adcc 	andcs	sl, r0, ip, asr #27
 8011394:	2000ad8c 	andcs	sl, r0, ip, lsl #27

08011398 <igmp_set_ip>:
 8011398:	b507      	push	{r0, r1, r2, lr}
 801139a:	2204      	movs	r2, #4
 801139c:	6803      	ldr	r3, [r0, #0]
 801139e:	eb0d 0102 	add.w	r1, sp, r2
 80113a2:	4806      	ldr	r0, [pc, #24]	; (80113bc <igmp_set_ip+0x24>)
 80113a4:	9301      	str	r3, [sp, #4]
 80113a6:	f7ff ffad 	bl	8011304 <memcpy.isra.0>
 80113aa:	2204      	movs	r2, #4
 80113ac:	4804      	ldr	r0, [pc, #16]	; (80113c0 <igmp_set_ip+0x28>)
 80113ae:	eb0d 0102 	add.w	r1, sp, r2
 80113b2:	f7ff ffa7 	bl	8011304 <memcpy.isra.0>
 80113b6:	b003      	add	sp, #12
 80113b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80113bc:	2000ade6 	andcs	sl, r0, r6, ror #27
 80113c0:	2000adae 	andcs	sl, r0, lr, lsr #27

080113c4 <igmp_timer>:
 80113c4:	b570      	push	{r4, r5, r6, lr}
 80113c6:	2500      	movs	r5, #0
 80113c8:	2602      	movs	r6, #2
 80113ca:	4c0a      	ldr	r4, [pc, #40]	; (80113f4 <igmp_timer+0x30>)
 80113cc:	7963      	ldrb	r3, [r4, #5]
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d109      	bne.n	80113e6 <igmp_timer+0x22>
 80113d2:	7923      	ldrb	r3, [r4, #4]
 80113d4:	b13b      	cbz	r3, 80113e6 <igmp_timer+0x22>
 80113d6:	3b01      	subs	r3, #1
 80113d8:	b2db      	uxtb	r3, r3
 80113da:	7123      	strb	r3, [r4, #4]
 80113dc:	b91b      	cbnz	r3, 80113e6 <igmp_timer+0x22>
 80113de:	6820      	ldr	r0, [r4, #0]
 80113e0:	f7ff ff9a 	bl	8011318 <_send_report>
 80113e4:	7166      	strb	r6, [r4, #5]
 80113e6:	3501      	adds	r5, #1
 80113e8:	2d24      	cmp	r5, #36	; 0x24
 80113ea:	f104 0408 	add.w	r4, r4, #8
 80113ee:	d1ed      	bne.n	80113cc <igmp_timer+0x8>
 80113f0:	bd70      	pop	{r4, r5, r6, pc}
 80113f2:	bf00      	nop
 80113f4:	2000ac6c 	andcs	sl, r0, ip, ror #24

080113f8 <igmp_join>:
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 80113fe:	2be0      	cmp	r3, #224	; 0xe0
 8011400:	d11b      	bne.n	801143a <igmp_join+0x42>
 8011402:	4911      	ldr	r1, [pc, #68]	; (8011448 <igmp_join+0x50>)
 8011404:	680c      	ldr	r4, [r1, #0]
 8011406:	2c24      	cmp	r4, #36	; 0x24
 8011408:	d01a      	beq.n	8011440 <igmp_join+0x48>
 801140a:	2300      	movs	r3, #0
 801140c:	4a0f      	ldr	r2, [pc, #60]	; (801144c <igmp_join+0x54>)
 801140e:	429c      	cmp	r4, r3
 8011410:	dc0d      	bgt.n	801142e <igmp_join+0x36>
 8011412:	f44f 7381 	mov.w	r3, #258	; 0x102
 8011416:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 801141a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801141e:	8093      	strh	r3, [r2, #4]
 8011420:	1c63      	adds	r3, r4, #1
 8011422:	600b      	str	r3, [r1, #0]
 8011424:	f7ff ff78 	bl	8011318 <_send_report>
 8011428:	4623      	mov	r3, r4
 801142a:	4618      	mov	r0, r3
 801142c:	bd38      	pop	{r3, r4, r5, pc}
 801142e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8011432:	4285      	cmp	r5, r0
 8011434:	d0f9      	beq.n	801142a <igmp_join+0x32>
 8011436:	3301      	adds	r3, #1
 8011438:	e7e9      	b.n	801140e <igmp_join+0x16>
 801143a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801143e:	e7f4      	b.n	801142a <igmp_join+0x32>
 8011440:	f06f 0301 	mvn.w	r3, #1
 8011444:	e7f1      	b.n	801142a <igmp_join+0x32>
 8011446:	bf00      	nop
 8011448:	2000ad90 	mulcs	r0, r0, sp
 801144c:	2000ac6c 	andcs	sl, r0, ip, ror #24

08011450 <igmp_leave>:
 8011450:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011454:	2600      	movs	r6, #0
 8011456:	4f1c      	ldr	r7, [pc, #112]	; (80114c8 <igmp_leave+0x78>)
 8011458:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 801145c:	4283      	cmp	r3, r0
 801145e:	d007      	beq.n	8011470 <igmp_leave+0x20>
 8011460:	3601      	adds	r6, #1
 8011462:	2e24      	cmp	r6, #36	; 0x24
 8011464:	d1f8      	bne.n	8011458 <igmp_leave+0x8>
 8011466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801146a:	b002      	add	sp, #8
 801146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011470:	2400      	movs	r4, #0
 8011472:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80114cc <igmp_leave+0x7c>
 8011476:	4d16      	ldr	r5, [pc, #88]	; (80114d0 <igmp_leave+0x80>)
 8011478:	f8b8 3000 	ldrh.w	r3, [r8]
 801147c:	2118      	movs	r1, #24
 801147e:	9001      	str	r0, [sp, #4]
 8011480:	4814      	ldr	r0, [pc, #80]	; (80114d4 <igmp_leave+0x84>)
 8011482:	826b      	strh	r3, [r5, #18]
 8011484:	832c      	strh	r4, [r5, #24]
 8011486:	f000 f830 	bl	80114ea <net_chksum>
 801148a:	2204      	movs	r2, #4
 801148c:	8328      	strh	r0, [r5, #24]
 801148e:	eb0d 0102 	add.w	r1, sp, r2
 8011492:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8011496:	f7ff ff35 	bl	8011304 <memcpy.isra.0>
 801149a:	2120      	movs	r1, #32
 801149c:	f105 000e 	add.w	r0, r5, #14
 80114a0:	852c      	strh	r4, [r5, #40]	; 0x28
 80114a2:	f000 f822 	bl	80114ea <net_chksum>
 80114a6:	212e      	movs	r1, #46	; 0x2e
 80114a8:	8528      	strh	r0, [r5, #40]	; 0x28
 80114aa:	4628      	mov	r0, r5
 80114ac:	f002 fe9e 	bl	80141ec <emac_eth_send>
 80114b0:	f8b8 3000 	ldrh.w	r3, [r8]
 80114b4:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 80114b8:	3301      	adds	r3, #1
 80114ba:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 80114be:	4620      	mov	r0, r4
 80114c0:	f8a8 3000 	strh.w	r3, [r8]
 80114c4:	80b4      	strh	r4, [r6, #4]
 80114c6:	e7d0      	b.n	801146a <igmp_leave+0x1a>
 80114c8:	2000ac6c 	andcs	sl, r0, ip, ror #24
 80114cc:	2000ad8c 	andcs	sl, r0, ip, lsl #27
 80114d0:	2000ad94 	mulcs	r0, r4, sp
 80114d4:	2000adda 	ldrdcs	sl, [r0], -sl	; <UNPREDICTABLE>

080114d8 <ip_set_ip>:
 80114d8:	b510      	push	{r4, lr}
 80114da:	4604      	mov	r4, r0
 80114dc:	f7fe fa4a 	bl	800f974 <udp_set_ip>
 80114e0:	4620      	mov	r0, r4
 80114e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114e6:	f7ff bf57 	b.w	8011398 <igmp_set_ip>

080114ea <net_chksum>:
 80114ea:	2300      	movs	r3, #0
 80114ec:	f021 0201 	bic.w	r2, r1, #1
 80114f0:	b530      	push	{r4, r5, lr}
 80114f2:	4402      	add	r2, r0
 80114f4:	084c      	lsrs	r4, r1, #1
 80114f6:	4290      	cmp	r0, r2
 80114f8:	d10e      	bne.n	8011518 <net_chksum+0x2e>
 80114fa:	f06f 0201 	mvn.w	r2, #1
 80114fe:	fb02 1104 	mla	r1, r2, r4, r1
 8011502:	b121      	cbz	r1, 801150e <net_chksum+0x24>
 8011504:	7802      	ldrb	r2, [r0, #0]
 8011506:	0212      	lsls	r2, r2, #8
 8011508:	ba52      	rev16	r2, r2
 801150a:	b292      	uxth	r2, r2
 801150c:	4413      	add	r3, r2
 801150e:	0c1a      	lsrs	r2, r3, #16
 8011510:	d106      	bne.n	8011520 <net_chksum+0x36>
 8011512:	43d8      	mvns	r0, r3
 8011514:	b280      	uxth	r0, r0
 8011516:	bd30      	pop	{r4, r5, pc}
 8011518:	f830 5b02 	ldrh.w	r5, [r0], #2
 801151c:	442b      	add	r3, r5
 801151e:	e7ea      	b.n	80114f6 <net_chksum+0xc>
 8011520:	b29b      	uxth	r3, r3
 8011522:	e7f3      	b.n	801150c <net_chksum+0x22>

08011524 <memcpy.isra.0>:
 8011524:	3801      	subs	r0, #1
 8011526:	440a      	add	r2, r1
 8011528:	4291      	cmp	r1, r2
 801152a:	d100      	bne.n	801152e <memcpy.isra.0+0xa>
 801152c:	4770      	bx	lr
 801152e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011532:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011536:	e7f7      	b.n	8011528 <memcpy.isra.0+0x4>

08011538 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8011538:	b430      	push	{r4, r5}
 801153a:	b168      	cbz	r0, 8011558 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 801153c:	2300      	movs	r3, #0
 801153e:	7905      	ldrb	r5, [r0, #4]
 8011540:	5cd4      	ldrb	r4, [r2, r3]
 8011542:	b11c      	cbz	r4, 801154c <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8011544:	1c5c      	adds	r4, r3, #1
 8011546:	429d      	cmp	r5, r3
 8011548:	4623      	mov	r3, r4
 801154a:	dcf9      	bgt.n	8011540 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 801154c:	6804      	ldr	r4, [r0, #0]
 801154e:	b2db      	uxtb	r3, r3
 8011550:	69e4      	ldr	r4, [r4, #28]
 8011552:	46a4      	mov	ip, r4
 8011554:	bc30      	pop	{r4, r5}
 8011556:	4760      	bx	ip
 8011558:	bc30      	pop	{r4, r5}
 801155a:	4770      	bx	lr

0801155c <Display::ClearLine(unsigned char) [clone .isra.0]>:
 801155c:	b110      	cbz	r0, 8011564 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 801155e:	6803      	ldr	r3, [r0, #0]
 8011560:	691b      	ldr	r3, [r3, #16]
 8011562:	4718      	bx	r3
 8011564:	4770      	bx	lr

08011566 <Display::Printf(unsigned char, char const*, ...)>:
 8011566:	b40c      	push	{r2, r3}
 8011568:	b570      	push	{r4, r5, r6, lr}
 801156a:	6984      	ldr	r4, [r0, #24]
 801156c:	4605      	mov	r5, r0
 801156e:	460e      	mov	r6, r1
 8011570:	b08a      	sub	sp, #40	; 0x28
 8011572:	b174      	cbz	r4, 8011592 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8011574:	ab0f      	add	r3, sp, #60	; 0x3c
 8011576:	2120      	movs	r1, #32
 8011578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801157a:	a802      	add	r0, sp, #8
 801157c:	9301      	str	r3, [sp, #4]
 801157e:	f001 fe99 	bl	80132b4 <vsnprintf>
 8011582:	4604      	mov	r4, r0
 8011584:	69a8      	ldr	r0, [r5, #24]
 8011586:	4631      	mov	r1, r6
 8011588:	6803      	ldr	r3, [r0, #0]
 801158a:	aa02      	add	r2, sp, #8
 801158c:	69dd      	ldr	r5, [r3, #28]
 801158e:	b2a3      	uxth	r3, r4
 8011590:	47a8      	blx	r5
 8011592:	4620      	mov	r0, r4
 8011594:	b00a      	add	sp, #40	; 0x28
 8011596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801159a:	b002      	add	sp, #8
 801159c:	4770      	bx	lr

0801159e <Display::Status(Display7SegmentMessage)>:
 801159e:	7c43      	ldrb	r3, [r0, #17]
 80115a0:	b513      	push	{r0, r1, r4, lr}
 80115a2:	4604      	mov	r4, r0
 80115a4:	b19b      	cbz	r3, 80115ce <Display::Status(Display7SegmentMessage)+0x30>
 80115a6:	43c9      	mvns	r1, r1
 80115a8:	2312      	movs	r3, #18
 80115aa:	7a00      	ldrb	r0, [r0, #8]
 80115ac:	f88d 3004 	strb.w	r3, [sp, #4]
 80115b0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80115b4:	f88d 1006 	strb.w	r1, [sp, #6]
 80115b8:	f88d 3005 	strb.w	r3, [sp, #5]
 80115bc:	f002 feae 	bl	801431c <gd32_i2c_set_address(unsigned char)>
 80115c0:	68e0      	ldr	r0, [r4, #12]
 80115c2:	f002 fea3 	bl	801430c <gd32_i2c_set_baudrate(unsigned int)>
 80115c6:	2103      	movs	r1, #3
 80115c8:	a801      	add	r0, sp, #4
 80115ca:	f002 fead 	bl	8014328 <gd32_i2c_write(char const*, unsigned int)>
 80115ce:	b002      	add	sp, #8
 80115d0:	bd10      	pop	{r4, pc}
	...

080115d4 <DisplayUdf::DisplayUdf()>:
 80115d4:	b510      	push	{r4, lr}
 80115d6:	4604      	mov	r4, r0
 80115d8:	f000 ff6a 	bl	80124b0 <Display::Display()>
 80115dc:	2202      	movs	r2, #2
 80115de:	2300      	movs	r3, #0
 80115e0:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 80115e4:	4b05      	ldr	r3, [pc, #20]	; (80115fc <DisplayUdf::DisplayUdf()+0x28>)
 80115e6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80115ea:	601c      	str	r4, [r3, #0]
 80115ec:	2301      	movs	r3, #1
 80115ee:	f802 3b01 	strb.w	r3, [r2], #1
 80115f2:	3301      	adds	r3, #1
 80115f4:	2b15      	cmp	r3, #21
 80115f6:	d1fa      	bne.n	80115ee <DisplayUdf::DisplayUdf()+0x1a>
 80115f8:	4620      	mov	r0, r4
 80115fa:	bd10      	pop	{r4, pc}
 80115fc:	2000adfc 	strdcs	sl, [r0], -ip

08011600 <DisplayUdf::SetTitle(char const*, ...)>:
 8011600:	b40e      	push	{r1, r2, r3}
 8011602:	b517      	push	{r0, r1, r2, r4, lr}
 8011604:	ab05      	add	r3, sp, #20
 8011606:	f853 2b04 	ldr.w	r2, [r3], #4
 801160a:	4604      	mov	r4, r0
 801160c:	211f      	movs	r1, #31
 801160e:	301c      	adds	r0, #28
 8011610:	9301      	str	r3, [sp, #4]
 8011612:	f001 fe4f 	bl	80132b4 <vsnprintf>
 8011616:	2300      	movs	r3, #0
 8011618:	4404      	add	r4, r0
 801161a:	7723      	strb	r3, [r4, #28]
 801161c:	b003      	add	sp, #12
 801161e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011622:	b003      	add	sp, #12
 8011624:	4770      	bx	lr
	...

08011628 <DisplayUdf::ShowEmacStart()>:
 8011628:	b510      	push	{r4, lr}
 801162a:	4604      	mov	r4, r0
 801162c:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8011630:	6980      	ldr	r0, [r0, #24]
 8011632:	f7ff ff93 	bl	801155c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011636:	4620      	mov	r0, r4
 8011638:	4a02      	ldr	r2, [pc, #8]	; (8011644 <DisplayUdf::ShowEmacStart()+0x1c>)
 801163a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801163e:	f7ff ff92 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 8011642:	bd10      	pop	{r4, pc}
 8011644:	08016e3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r9, sl, fp, sp, lr}

08011648 <DisplayUdf::ShowIpAddress()>:
 8011648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801164c:	4604      	mov	r4, r0
 801164e:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8011652:	b086      	sub	sp, #24
 8011654:	6980      	ldr	r0, [r0, #24]
 8011656:	f7ff ff81 	bl	801155c <Display::ClearLine(unsigned char) [clone .isra.0]>
 801165a:	4b13      	ldr	r3, [pc, #76]	; (80116a8 <DisplayUdf::ShowIpAddress()+0x60>)
 801165c:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 8011660:	681d      	ldr	r5, [r3, #0]
 8011662:	69a8      	ldr	r0, [r5, #24]
 8011664:	692e      	ldr	r6, [r5, #16]
 8011666:	f7f6 fa5b 	bl	8007b20 <__popcountsi2>
 801166a:	78eb      	ldrb	r3, [r5, #3]
 801166c:	fa5f f886 	uxtb.w	r8, r6
 8011670:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8011674:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8011678:	0e36      	lsrs	r6, r6, #24
 801167a:	b99b      	cbnz	r3, 80116a4 <DisplayUdf::ShowIpAddress()+0x5c>
 801167c:	786b      	ldrb	r3, [r5, #1]
 801167e:	2b00      	cmp	r3, #0
 8011680:	bf14      	ite	ne
 8011682:	2244      	movne	r2, #68	; 0x44
 8011684:	2253      	moveq	r2, #83	; 0x53
 8011686:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801168a:	4643      	mov	r3, r8
 801168c:	4639      	mov	r1, r7
 801168e:	4620      	mov	r0, r4
 8011690:	e9cd a601 	strd	sl, r6, [sp, #4]
 8011694:	4a05      	ldr	r2, [pc, #20]	; (80116ac <DisplayUdf::ShowIpAddress()+0x64>)
 8011696:	f8cd 9000 	str.w	r9, [sp]
 801169a:	f7ff ff64 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 801169e:	b006      	add	sp, #24
 80116a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a4:	225a      	movs	r2, #90	; 0x5a
 80116a6:	e7ee      	b.n	8011686 <DisplayUdf::ShowIpAddress()+0x3e>
 80116a8:	2000a7cc 	andcs	sl, r0, ip, asr #15
 80116ac:	08016e4a 	stmdaeq	r1, {r1, r3, r6, r9, sl, fp, sp, lr}

080116b0 <DisplayUdf::ShowNetmask()>:
 80116b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116b2:	4604      	mov	r4, r0
 80116b4:	4b0b      	ldr	r3, [pc, #44]	; (80116e4 <DisplayUdf::ShowNetmask()+0x34>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	699b      	ldr	r3, [r3, #24]
 80116ba:	0e1a      	lsrs	r2, r3, #24
 80116bc:	9202      	str	r2, [sp, #8]
 80116be:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80116c2:	9201      	str	r2, [sp, #4]
 80116c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80116c8:	9200      	str	r2, [sp, #0]
 80116ca:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 80116ce:	4a06      	ldr	r2, [pc, #24]	; (80116e8 <DisplayUdf::ShowNetmask()+0x38>)
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	f7ff ff48 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 80116d6:	4620      	mov	r0, r4
 80116d8:	b004      	add	sp, #16
 80116da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116de:	f7ff bfb3 	b.w	8011648 <DisplayUdf::ShowIpAddress()>
 80116e2:	bf00      	nop
 80116e4:	2000a7cc 	andcs	sl, r0, ip, asr #15
 80116e8:	08016e5c 	stmdaeq	r1, {r2, r3, r4, r6, r9, sl, fp, sp, lr}

080116ec <DisplayUdf::ShowGatewayIp()>:
 80116ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116ee:	4604      	mov	r4, r0
 80116f0:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 80116f4:	6980      	ldr	r0, [r0, #24]
 80116f6:	f7ff ff31 	bl	801155c <Display::ClearLine(unsigned char) [clone .isra.0]>
 80116fa:	4b0a      	ldr	r3, [pc, #40]	; (8011724 <DisplayUdf::ShowGatewayIp()+0x38>)
 80116fc:	4620      	mov	r0, r4
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8011704:	695b      	ldr	r3, [r3, #20]
 8011706:	0e1a      	lsrs	r2, r3, #24
 8011708:	9202      	str	r2, [sp, #8]
 801170a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801170e:	9201      	str	r2, [sp, #4]
 8011710:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011714:	9200      	str	r2, [sp, #0]
 8011716:	b2db      	uxtb	r3, r3
 8011718:	4a03      	ldr	r2, [pc, #12]	; (8011728 <DisplayUdf::ShowGatewayIp()+0x3c>)
 801171a:	f7ff ff24 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 801171e:	b004      	add	sp, #16
 8011720:	bd10      	pop	{r4, pc}
 8011722:	bf00      	nop
 8011724:	2000a7cc 	andcs	sl, r0, ip, asr #15
 8011728:	08016e6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, sl, fp, sp, lr}

0801172c <DisplayUdf::ShowHostName()>:
 801172c:	b510      	push	{r4, lr}
 801172e:	4604      	mov	r4, r0
 8011730:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8011734:	6980      	ldr	r0, [r0, #24]
 8011736:	f7ff ff11 	bl	801155c <Display::ClearLine(unsigned char) [clone .isra.0]>
 801173a:	4b05      	ldr	r3, [pc, #20]	; (8011750 <DisplayUdf::ShowHostName()+0x24>)
 801173c:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	69a0      	ldr	r0, [r4, #24]
 8011744:	321c      	adds	r2, #28
 8011746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801174a:	f7ff bef5 	b.w	8011538 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801174e:	bf00      	nop
 8011750:	2000a7cc 	andcs	sl, r0, ip, asr #15

08011754 <DisplayUdf::Show()>:
 8011754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011756:	4604      	mov	r4, r0
 8011758:	21ff      	movs	r1, #255	; 0xff
 801175a:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 801175e:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8011762:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011766:	2806      	cmp	r0, #6
 8011768:	bf88      	it	hi
 801176a:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 801176e:	429a      	cmp	r2, r3
 8011770:	d1f7      	bne.n	8011762 <DisplayUdf::Show()+0xe>
 8011772:	2501      	movs	r5, #1
 8011774:	4629      	mov	r1, r5
 8011776:	3501      	adds	r5, #1
 8011778:	69a0      	ldr	r0, [r4, #24]
 801177a:	b2ed      	uxtb	r5, r5
 801177c:	f7ff feee 	bl	801155c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011780:	2d06      	cmp	r5, #6
 8011782:	d1f7      	bne.n	8011774 <DisplayUdf::Show()+0x20>
 8011784:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8011788:	69a0      	ldr	r0, [r4, #24]
 801178a:	f104 021c 	add.w	r2, r4, #28
 801178e:	f7ff fed3 	bl	8011538 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8011792:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8011796:	69a0      	ldr	r0, [r4, #24]
 8011798:	4a0d      	ldr	r2, [pc, #52]	; (80117d0 <DisplayUdf::Show()+0x7c>)
 801179a:	f7ff fecd 	bl	8011538 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801179e:	4b0d      	ldr	r3, [pc, #52]	; (80117d4 <DisplayUdf::Show()+0x80>)
 80117a0:	4a0d      	ldr	r2, [pc, #52]	; (80117d8 <DisplayUdf::Show()+0x84>)
 80117a2:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80117a6:	9300      	str	r3, [sp, #0]
 80117a8:	4620      	mov	r0, r4
 80117aa:	2303      	movs	r3, #3
 80117ac:	f7ff fedb 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 80117b0:	4620      	mov	r0, r4
 80117b2:	f7ff ff49 	bl	8011648 <DisplayUdf::ShowIpAddress()>
 80117b6:	4620      	mov	r0, r4
 80117b8:	f7ff ff98 	bl	80116ec <DisplayUdf::ShowGatewayIp()>
 80117bc:	4620      	mov	r0, r4
 80117be:	f7ff ff77 	bl	80116b0 <DisplayUdf::ShowNetmask()>
 80117c2:	4620      	mov	r0, r4
 80117c4:	b003      	add	sp, #12
 80117c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80117ca:	f7ff bfaf 	b.w	801172c <DisplayUdf::ShowHostName()>
 80117ce:	bf00      	nop
 80117d0:	080153e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, ip, lr}
 80117d4:	2000ae94 	mulcs	r0, r4, lr
 80117d8:	08016e7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r9, sl, fp, sp, lr}

080117dc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 80117dc:	3901      	subs	r1, #1
 80117de:	b510      	push	{r4, lr}
 80117e0:	4604      	mov	r4, r0
 80117e2:	2903      	cmp	r1, #3
 80117e4:	d814      	bhi.n	8011810 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 80117e6:	e8df f001 	tbb	[pc, r1]
 80117ea:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 80117ee:	4b14      	ldr	r3, [pc, #80]	; (8011840 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80117f0:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 80117f4:	6818      	ldr	r0, [r3, #0]
 80117f6:	f7ff fed2 	bl	801159e <Display::Status(Display7SegmentMessage)>
 80117fa:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80117fe:	69a0      	ldr	r0, [r4, #24]
 8011800:	f7ff feac 	bl	801155c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011804:	4a0f      	ldr	r2, [pc, #60]	; (8011844 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 8011806:	4620      	mov	r0, r4
 8011808:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801180c:	f7ff feab 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 8011810:	bd10      	pop	{r4, pc}
 8011812:	f248 0180 	movw	r1, #32896	; 0x8080
 8011816:	4b0a      	ldr	r3, [pc, #40]	; (8011840 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011818:	6818      	ldr	r0, [r3, #0]
 801181a:	f7ff fec0 	bl	801159e <Display::Status(Display7SegmentMessage)>
 801181e:	e7f7      	b.n	8011810 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8011820:	4b07      	ldr	r3, [pc, #28]	; (8011840 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011822:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8011826:	6818      	ldr	r0, [r3, #0]
 8011828:	f7ff feb9 	bl	801159e <Display::Status(Display7SegmentMessage)>
 801182c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011830:	69a0      	ldr	r0, [r4, #24]
 8011832:	f7ff fe93 	bl	801155c <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011836:	4a04      	ldr	r2, [pc, #16]	; (8011848 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8011838:	e7e5      	b.n	8011806 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 801183a:	f645 3179 	movw	r1, #23417	; 0x5b79
 801183e:	e7ea      	b.n	8011816 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8011840:	2000ae04 	andcs	sl, r0, r4, lsl #28
 8011844:	08016e89 	stmdaeq	r1, {r0, r3, r7, r9, sl, fp, sp, lr}
 8011848:	08016e97 	stmdaeq	r1, {r0, r1, r2, r4, r7, r9, sl, fp, sp, lr}

0801184c <DisplayUdf::ShowShutdown()>:
 801184c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011850:	4604      	mov	r4, r0
 8011852:	6980      	ldr	r0, [r0, #24]
 8011854:	b308      	cbz	r0, 801189a <DisplayUdf::ShowShutdown()+0x4e>
 8011856:	f890 8005 	ldrb.w	r8, [r0, #5]
 801185a:	6803      	ldr	r3, [r0, #0]
 801185c:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8011860:	b2ed      	uxtb	r5, r5
 8011862:	462a      	mov	r2, r5
 8011864:	2100      	movs	r1, #0
 8011866:	6a1b      	ldr	r3, [r3, #32]
 8011868:	7907      	ldrb	r7, [r0, #4]
 801186a:	2600      	movs	r6, #0
 801186c:	4798      	blx	r3
 801186e:	3f01      	subs	r7, #1
 8011870:	42b7      	cmp	r7, r6
 8011872:	69a0      	ldr	r0, [r4, #24]
 8011874:	d906      	bls.n	8011884 <DisplayUdf::ShowShutdown()+0x38>
 8011876:	b118      	cbz	r0, 8011880 <DisplayUdf::ShowShutdown()+0x34>
 8011878:	6803      	ldr	r3, [r0, #0]
 801187a:	2120      	movs	r1, #32
 801187c:	695b      	ldr	r3, [r3, #20]
 801187e:	4798      	blx	r3
 8011880:	3601      	adds	r6, #1
 8011882:	e7f5      	b.n	8011870 <DisplayUdf::ShowShutdown()+0x24>
 8011884:	b120      	cbz	r0, 8011890 <DisplayUdf::ShowShutdown()+0x44>
 8011886:	6803      	ldr	r3, [r0, #0]
 8011888:	462a      	mov	r2, r5
 801188a:	2100      	movs	r1, #0
 801188c:	6a1b      	ldr	r3, [r3, #32]
 801188e:	4798      	blx	r3
 8011890:	4641      	mov	r1, r8
 8011892:	4a05      	ldr	r2, [pc, #20]	; (80118a8 <DisplayUdf::ShowShutdown()+0x5c>)
 8011894:	69a0      	ldr	r0, [r4, #24]
 8011896:	f7ff fe4f 	bl	8011538 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801189a:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 801189e:	4620      	mov	r0, r4
 80118a0:	f7ff fe7d 	bl	801159e <Display::Status(Display7SegmentMessage)>
 80118a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118a8:	08016ea5 	stmdaeq	r1, {r0, r2, r5, r7, r9, sl, fp, sp, lr}

080118ac <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 80118ac:	1e4b      	subs	r3, r1, #1
 80118ae:	2b05      	cmp	r3, #5
 80118b0:	b530      	push	{r4, r5, lr}
 80118b2:	d80f      	bhi.n	80118d4 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 80118b4:	2300      	movs	r3, #0
 80118b6:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 80118ba:	f814 5b01 	ldrb.w	r5, [r4], #1
 80118be:	428d      	cmp	r5, r1
 80118c0:	d109      	bne.n	80118d6 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 80118c2:	1884      	adds	r4, r0, r2
 80118c4:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 80118c8:	4403      	add	r3, r0
 80118ca:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 80118ce:	4410      	add	r0, r2
 80118d0:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 80118d4:	bd30      	pop	{r4, r5, pc}
 80118d6:	3301      	adds	r3, #1
 80118d8:	2b14      	cmp	r3, #20
 80118da:	d1ee      	bne.n	80118ba <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 80118dc:	e7f7      	b.n	80118ce <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

080118e0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 80118e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80118e2:	88c5      	ldrh	r5, [r0, #6]
 80118e4:	8886      	ldrh	r6, [r0, #4]
 80118e6:	42b5      	cmp	r5, r6
 80118e8:	d216      	bcs.n	8011918 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 80118ea:	4604      	mov	r4, r0
 80118ec:	6800      	ldr	r0, [r0, #0]
 80118ee:	4428      	add	r0, r5
 80118f0:	1b75      	subs	r5, r6, r5
 80118f2:	7a26      	ldrb	r6, [r4, #8]
 80118f4:	b923      	cbnz	r3, 8011900 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 80118f6:	b926      	cbnz	r6, 8011902 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 80118f8:	9200      	str	r2, [sp, #0]
 80118fa:	460b      	mov	r3, r1
 80118fc:	4a09      	ldr	r2, [pc, #36]	; (8011924 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 80118fe:	e003      	b.n	8011908 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011900:	b166      	cbz	r6, 801191c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8011902:	460b      	mov	r3, r1
 8011904:	9200      	str	r2, [sp, #0]
 8011906:	4a08      	ldr	r2, [pc, #32]	; (8011928 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8011908:	4629      	mov	r1, r5
 801190a:	f001 fcbb 	bl	8013284 <snprintf>
 801190e:	4285      	cmp	r5, r0
 8011910:	bfa2      	ittt	ge
 8011912:	88e3      	ldrhge	r3, [r4, #6]
 8011914:	181b      	addge	r3, r3, r0
 8011916:	80e3      	strhge	r3, [r4, #6]
 8011918:	b002      	add	sp, #8
 801191a:	bd70      	pop	{r4, r5, r6, pc}
 801191c:	9200      	str	r2, [sp, #0]
 801191e:	460b      	mov	r3, r1
 8011920:	4a02      	ldr	r2, [pc, #8]	; (801192c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011922:	e7f1      	b.n	8011908 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011924:	0801553b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, ip, lr}
 8011928:	08015532 	stmdaeq	r1, {r1, r4, r5, r8, sl, ip, lr}
 801192c:	0801553c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr}

08011930 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8011930:	b510      	push	{r4, lr}
 8011932:	2220      	movs	r2, #32
 8011934:	4604      	mov	r4, r0
 8011936:	f840 1b04 	str.w	r1, [r0], #4
 801193a:	2100      	movs	r1, #0
 801193c:	f001 fa58 	bl	8012df0 <memset>
 8011940:	f647 7305 	movw	r3, #32517	; 0x7f05
 8011944:	4620      	mov	r0, r4
 8011946:	84a3      	strh	r3, [r4, #36]	; 0x24
 8011948:	bd10      	pop	{r4, pc}

0801194a <DisplayUdfParams::Load()>:
 801194a:	b508      	push	{r3, lr}
 801194c:	2300      	movs	r3, #0
 801194e:	4601      	mov	r1, r0
 8011950:	6043      	str	r3, [r0, #4]
 8011952:	6800      	ldr	r0, [r0, #0]
 8011954:	b120      	cbz	r0, 8011960 <DisplayUdfParams::Load()+0x16>
 8011956:	6803      	ldr	r3, [r0, #0]
 8011958:	3104      	adds	r1, #4
 801195a:	68db      	ldr	r3, [r3, #12]
 801195c:	4798      	blx	r3
 801195e:	2001      	movs	r0, #1
 8011960:	bd08      	pop	{r3, pc}
	...

08011964 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8011964:	6803      	ldr	r3, [r0, #0]
 8011966:	b1d3      	cbz	r3, 801199e <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8011968:	2300      	movs	r3, #0
 801196a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801196c:	460d      	mov	r5, r1
 801196e:	4616      	mov	r6, r2
 8011970:	4604      	mov	r4, r0
 8011972:	6043      	str	r3, [r0, #4]
 8011974:	4602      	mov	r2, r0
 8011976:	490a      	ldr	r1, [pc, #40]	; (80119a0 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8011978:	4668      	mov	r0, sp
 801197a:	f000 fbff 	bl	801217c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801197e:	4632      	mov	r2, r6
 8011980:	4629      	mov	r1, r5
 8011982:	4668      	mov	r0, sp
 8011984:	f000 fbfe 	bl	8012184 <ReadConfigFile::Read(char const*, unsigned int)>
 8011988:	4621      	mov	r1, r4
 801198a:	f851 0b04 	ldr.w	r0, [r1], #4
 801198e:	6803      	ldr	r3, [r0, #0]
 8011990:	689b      	ldr	r3, [r3, #8]
 8011992:	4798      	blx	r3
 8011994:	4668      	mov	r0, sp
 8011996:	f000 fbf4 	bl	8012182 <ReadConfigFile::~ReadConfigFile()>
 801199a:	b002      	add	sp, #8
 801199c:	bd70      	pop	{r4, r5, r6, pc}
 801199e:	4770      	bx	lr
 80119a0:	08011a69 	stmdaeq	r1, {r0, r3, r5, r6, r9, fp, ip}

080119a4 <DisplayUdfParams::callbackFunction(char const*)>:
 80119a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119a6:	460e      	mov	r6, r1
 80119a8:	4604      	mov	r4, r0
 80119aa:	492b      	ldr	r1, [pc, #172]	; (8011a58 <DisplayUdfParams::callbackFunction(char const*)+0xb4>)
 80119ac:	4630      	mov	r0, r6
 80119ae:	f10d 0207 	add.w	r2, sp, #7
 80119b2:	f000 fcbd 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80119b6:	b968      	cbnz	r0, 80119d4 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 80119b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80119bc:	6863      	ldr	r3, [r4, #4]
 80119be:	2a7f      	cmp	r2, #127	; 0x7f
 80119c0:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80119c4:	bf14      	ite	ne
 80119c6:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 80119ca:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 80119ce:	6063      	str	r3, [r4, #4]
 80119d0:	b003      	add	sp, #12
 80119d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119d4:	4630      	mov	r0, r6
 80119d6:	4921      	ldr	r1, [pc, #132]	; (8011a5c <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 80119d8:	f10d 0207 	add.w	r2, sp, #7
 80119dc:	f000 fca8 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80119e0:	b958      	cbnz	r0, 80119fa <DisplayUdfParams::callbackFunction(char const*)+0x56>
 80119e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80119e6:	6863      	ldr	r3, [r4, #4]
 80119e8:	2a05      	cmp	r2, #5
 80119ea:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80119ee:	bf14      	ite	ne
 80119f0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80119f4:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 80119f8:	e7e9      	b.n	80119ce <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80119fa:	4630      	mov	r0, r6
 80119fc:	4918      	ldr	r1, [pc, #96]	; (8011a60 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 80119fe:	f10d 0207 	add.w	r2, sp, #7
 8011a02:	f000 fc95 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011a06:	b948      	cbnz	r0, 8011a1c <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8011a08:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011a0c:	6863      	ldr	r3, [r4, #4]
 8011a0e:	b112      	cbz	r2, 8011a16 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8011a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011a14:	e7db      	b.n	80119ce <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011a16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011a1a:	e7d8      	b.n	80119ce <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011a1c:	2500      	movs	r5, #0
 8011a1e:	4f11      	ldr	r7, [pc, #68]	; (8011a64 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 8011a20:	4630      	mov	r0, r6
 8011a22:	f857 1b04 	ldr.w	r1, [r7], #4
 8011a26:	f10d 0207 	add.w	r2, sp, #7
 8011a2a:	f000 fc81 	bl	8012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011a2e:	b978      	cbnz	r0, 8011a50 <DisplayUdfParams::callbackFunction(char const*)+0xac>
 8011a30:	2301      	movs	r3, #1
 8011a32:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011a36:	6862      	ldr	r2, [r4, #4]
 8011a38:	1e4e      	subs	r6, r1, #1
 8011a3a:	2e05      	cmp	r6, #5
 8011a3c:	fa03 f305 	lsl.w	r3, r3, r5
 8011a40:	4425      	add	r5, r4
 8011a42:	bf99      	ittee	ls
 8011a44:	7229      	strbls	r1, [r5, #8]
 8011a46:	4313      	orrls	r3, r2
 8011a48:	7228      	strbhi	r0, [r5, #8]
 8011a4a:	ea22 0303 	bichi.w	r3, r2, r3
 8011a4e:	e7be      	b.n	80119ce <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011a50:	3501      	adds	r5, #1
 8011a52:	2d14      	cmp	r5, #20
 8011a54:	d1e4      	bne.n	8011a20 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 8011a56:	e7bb      	b.n	80119d0 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8011a58:	08016f66 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}
 8011a5c:	08016f2e 	stmdaeq	r1, {r1, r2, r3, r5, r8, r9, sl, fp, sp, lr}
 8011a60:	08016f3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, sl, fp, sp, lr}
 8011a64:	08016eb8 	stmdaeq	r1, {r3, r4, r5, r7, r9, sl, fp, sp, lr}

08011a68 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8011a68:	f7ff bf9c 	b.w	80119a4 <DisplayUdfParams::callbackFunction(char const*)>

08011a6c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 8011a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a70:	4604      	mov	r4, r0
 8011a72:	4615      	mov	r5, r2
 8011a74:	461e      	mov	r6, r3
 8011a76:	b086      	sub	sp, #24
 8011a78:	3004      	adds	r0, #4
 8011a7a:	b379      	cbz	r1, 8011adc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 8011a7c:	2222      	movs	r2, #34	; 0x22
 8011a7e:	f001 f9a0 	bl	8012dc2 <memmove>
 8011a82:	462a      	mov	r2, r5
 8011a84:	4633      	mov	r3, r6
 8011a86:	493d      	ldr	r1, [pc, #244]	; (8011b7c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 8011a88:	a803      	add	r0, sp, #12
 8011a8a:	f000 faa7 	bl	8011fdc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8011a8e:	6863      	ldr	r3, [r4, #4]
 8011a90:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8011a94:	493a      	ldr	r1, [pc, #232]	; (8011b80 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 8011a96:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8011a9a:	a803      	add	r0, sp, #12
 8011a9c:	f7ff ff20 	bl	80118e0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8011aa0:	6863      	ldr	r3, [r4, #4]
 8011aa2:	4938      	ldr	r1, [pc, #224]	; (8011b84 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 8011aa4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8011aa8:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8011aac:	a803      	add	r0, sp, #12
 8011aae:	f7ff ff17 	bl	80118e0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8011ab2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8011ab6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8011aba:	42a9      	cmp	r1, r5
 8011abc:	d227      	bcs.n	8011b0e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 8011abe:	6863      	ldr	r3, [r4, #4]
 8011ac0:	9803      	ldr	r0, [sp, #12]
 8011ac2:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8011ac6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8011aca:	4408      	add	r0, r1
 8011acc:	eba5 0501 	sub.w	r5, r5, r1
 8011ad0:	d10b      	bne.n	8011aea <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8011ad2:	b962      	cbnz	r2, 8011aee <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8011ad4:	9200      	str	r2, [sp, #0]
 8011ad6:	4b2c      	ldr	r3, [pc, #176]	; (8011b88 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8011ad8:	4a2c      	ldr	r2, [pc, #176]	; (8011b8c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8011ada:	e00e      	b.n	8011afa <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8011adc:	6823      	ldr	r3, [r4, #0]
 8011ade:	4601      	mov	r1, r0
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	68d2      	ldr	r2, [r2, #12]
 8011ae6:	4790      	blx	r2
 8011ae8:	e7cb      	b.n	8011a82 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8011aea:	2a00      	cmp	r2, #0
 8011aec:	d041      	beq.n	8011b72 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8011aee:	3b00      	subs	r3, #0
 8011af0:	bf18      	it	ne
 8011af2:	2301      	movne	r3, #1
 8011af4:	4a26      	ldr	r2, [pc, #152]	; (8011b90 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8011af6:	9300      	str	r3, [sp, #0]
 8011af8:	4b23      	ldr	r3, [pc, #140]	; (8011b88 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8011afa:	4629      	mov	r1, r5
 8011afc:	f001 fbc2 	bl	8013284 <snprintf>
 8011b00:	4285      	cmp	r5, r0
 8011b02:	bfa2      	ittt	ge
 8011b04:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8011b08:	181b      	addge	r3, r3, r0
 8011b0a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8011b0e:	2500      	movs	r5, #0
 8011b10:	2701      	movs	r7, #1
 8011b12:	4e20      	ldr	r6, [pc, #128]	; (8011b94 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8011b14:	f104 0808 	add.w	r8, r4, #8
 8011b18:	f856 1b04 	ldr.w	r1, [r6], #4
 8011b1c:	780b      	ldrb	r3, [r1, #0]
 8011b1e:	b15b      	cbz	r3, 8011b38 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8011b20:	6862      	ldr	r2, [r4, #4]
 8011b22:	fa07 f305 	lsl.w	r3, r7, r5
 8011b26:	4393      	bics	r3, r2
 8011b28:	bf0c      	ite	eq
 8011b2a:	2301      	moveq	r3, #1
 8011b2c:	2300      	movne	r3, #0
 8011b2e:	f818 2005 	ldrb.w	r2, [r8, r5]
 8011b32:	a803      	add	r0, sp, #12
 8011b34:	f7ff fed4 	bl	80118e0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8011b38:	3501      	adds	r5, #1
 8011b3a:	2d14      	cmp	r5, #20
 8011b3c:	d1ec      	bne.n	8011b18 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 8011b3e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8011b42:	b17b      	cbz	r3, 8011b64 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 8011b44:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011b48:	9b03      	ldr	r3, [sp, #12]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	227d      	movs	r2, #125	; 0x7d
 8011b4e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011b52:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011b56:	9903      	ldr	r1, [sp, #12]
 8011b58:	54ca      	strb	r2, [r1, r3]
 8011b5a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011b5e:	3301      	adds	r3, #1
 8011b60:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011b64:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b6a:	601a      	str	r2, [r3, #0]
 8011b6c:	b006      	add	sp, #24
 8011b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b72:	2301      	movs	r3, #1
 8011b74:	4a08      	ldr	r2, [pc, #32]	; (8011b98 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 8011b76:	9300      	str	r3, [sp, #0]
 8011b78:	4b03      	ldr	r3, [pc, #12]	; (8011b88 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8011b7a:	e7be      	b.n	8011afa <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8011b7c:	08016f5a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, sl, fp, sp, lr}
 8011b80:	08016f66 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, sl, fp, sp, lr}
 8011b84:	08016f2e 	stmdaeq	r1, {r1, r2, r3, r5, r8, r9, sl, fp, sp, lr}
 8011b88:	08016f3c 	stmdaeq	r1, {r2, r3, r4, r5, r8, r9, sl, fp, sp, lr}
 8011b8c:	0801553b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, ip, lr}
 8011b90:	08015532 	stmdaeq	r1, {r1, r4, r5, r8, sl, ip, lr}
 8011b94:	08016eb8 	stmdaeq	r1, {r3, r4, r5, r7, r9, sl, fp, sp, lr}
 8011b98:	0801553c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr}

08011b9c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8011b9c:	b513      	push	{r0, r1, r4, lr}
 8011b9e:	6804      	ldr	r4, [r0, #0]
 8011ba0:	b914      	cbnz	r4, 8011ba8 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8011ba2:	601c      	str	r4, [r3, #0]
 8011ba4:	b002      	add	sp, #8
 8011ba6:	bd10      	pop	{r4, pc}
 8011ba8:	9300      	str	r3, [sp, #0]
 8011baa:	4613      	mov	r3, r2
 8011bac:	460a      	mov	r2, r1
 8011bae:	2100      	movs	r1, #0
 8011bb0:	f7ff ff5c 	bl	8011a6c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 8011bb4:	e7f6      	b.n	8011ba4 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

08011bb6 <DisplayUdfParams::Set(DisplayUdf*)>:
 8011bb6:	6843      	ldr	r3, [r0, #4]
 8011bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bbc:	009a      	lsls	r2, r3, #2
 8011bbe:	4604      	mov	r4, r0
 8011bc0:	460e      	mov	r6, r1
 8011bc2:	d506      	bpl.n	8011bd2 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8011bc4:	6988      	ldr	r0, [r1, #24]
 8011bc6:	b120      	cbz	r0, 8011bd2 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8011bc8:	6803      	ldr	r3, [r0, #0]
 8011bca:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8011bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd0:	4798      	blx	r3
 8011bd2:	6863      	ldr	r3, [r4, #4]
 8011bd4:	69b0      	ldr	r0, [r6, #24]
 8011bd6:	00db      	lsls	r3, r3, #3
 8011bd8:	bf41      	itttt	mi
 8011bda:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8011bde:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8011be2:	4353      	mulmi	r3, r2
 8011be4:	6173      	strmi	r3, [r6, #20]
 8011be6:	6861      	ldr	r1, [r4, #4]
 8011be8:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8011bec:	b110      	cbz	r0, 8011bf4 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8011bee:	6803      	ldr	r3, [r0, #0]
 8011bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bf2:	4798      	blx	r3
 8011bf4:	2500      	movs	r5, #0
 8011bf6:	2701      	movs	r7, #1
 8011bf8:	f104 0808 	add.w	r8, r4, #8
 8011bfc:	6862      	ldr	r2, [r4, #4]
 8011bfe:	fa07 f305 	lsl.w	r3, r7, r5
 8011c02:	4393      	bics	r3, r2
 8011c04:	d105      	bne.n	8011c12 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8011c06:	462a      	mov	r2, r5
 8011c08:	4630      	mov	r0, r6
 8011c0a:	f818 1005 	ldrb.w	r1, [r8, r5]
 8011c0e:	f7ff fe4d 	bl	80118ac <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8011c12:	3501      	adds	r5, #1
 8011c14:	2d14      	cmp	r5, #20
 8011c16:	d1f1      	bne.n	8011bfc <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8011c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011c1c <DisplayUdfParams::Dump()>:
 8011c1c:	4770      	bx	lr

08011c1e <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8011c1e:	b570      	push	{r4, r5, r6, lr}
 8011c20:	4605      	mov	r5, r0
 8011c22:	6980      	ldr	r0, [r0, #24]
 8011c24:	460c      	mov	r4, r1
 8011c26:	b120      	cbz	r0, 8011c32 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 8011c28:	6803      	ldr	r3, [r0, #0]
 8011c2a:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8011c2e:	691b      	ldr	r3, [r3, #16]
 8011c30:	4798      	blx	r3
 8011c32:	69a8      	ldr	r0, [r5, #24]
 8011c34:	f104 0242 	add.w	r2, r4, #66	; 0x42
 8011c38:	b190      	cbz	r0, 8011c60 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	7906      	ldrb	r6, [r0, #4]
 8011c3e:	3441      	adds	r4, #65	; 0x41
 8011c40:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8011c44:	b119      	cbz	r1, 8011c4e <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 8011c46:	1c59      	adds	r1, r3, #1
 8011c48:	429e      	cmp	r6, r3
 8011c4a:	460b      	mov	r3, r1
 8011c4c:	dcf8      	bgt.n	8011c40 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 8011c4e:	6801      	ldr	r1, [r0, #0]
 8011c50:	b2db      	uxtb	r3, r3
 8011c52:	69cc      	ldr	r4, [r1, #28]
 8011c54:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8011c58:	46a4      	mov	ip, r4
 8011c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c5e:	4760      	bx	ip
 8011c60:	bd70      	pop	{r4, r5, r6, pc}
	...

08011c64 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 8011c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c68:	460c      	mov	r4, r1
 8011c6a:	b08b      	sub	sp, #44	; 0x2c
 8011c6c:	4606      	mov	r6, r0
 8011c6e:	2301      	movs	r3, #1
 8011c70:	2100      	movs	r1, #0
 8011c72:	4620      	mov	r0, r4
 8011c74:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8011c78:	f7f7 f99e 	bl	8008fb8 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8011c7c:	b350      	cbz	r0, 8011cd4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x70>
 8011c7e:	2100      	movs	r1, #0
 8011c80:	4620      	mov	r0, r4
 8011c82:	f896 9040 	ldrb.w	r9, [r6, #64]	; 0x40
 8011c86:	f7f7 f9b1 	bl	8008fec <ArtNetNode::GetNetSwitch(unsigned int) const>
 8011c8a:	2100      	movs	r1, #0
 8011c8c:	4605      	mov	r5, r0
 8011c8e:	4620      	mov	r0, r4
 8011c90:	f7f7 f9a8 	bl	8008fe4 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8011c94:	2100      	movs	r1, #0
 8011c96:	4607      	mov	r7, r0
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f89d a027 	ldrb.w	sl, [sp, #39]	; 0x27
 8011c9e:	f7f7 fb1f 	bl	80092e0 <ArtNetNode::GetMergeMode(unsigned int) const>
 8011ca2:	4a2d      	ldr	r2, [pc, #180]	; (8011d58 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8011ca4:	4b2d      	ldr	r3, [pc, #180]	; (8011d5c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 8011ca6:	2100      	movs	r1, #0
 8011ca8:	2800      	cmp	r0, #0
 8011caa:	bf0c      	ite	eq
 8011cac:	4690      	moveq	r8, r2
 8011cae:	4698      	movne	r8, r3
 8011cb0:	4620      	mov	r0, r4
 8011cb2:	f7f7 fae4 	bl	800927e <ArtNetNode::GetPortProtocol(unsigned int) const>
 8011cb6:	4a2a      	ldr	r2, [pc, #168]	; (8011d60 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 8011cb8:	4b2a      	ldr	r3, [pc, #168]	; (8011d64 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>)
 8011cba:	4649      	mov	r1, r9
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	bf18      	it	ne
 8011cc0:	4613      	movne	r3, r2
 8011cc2:	e9cd 7a00 	strd	r7, sl, [sp]
 8011cc6:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8011cca:	4630      	mov	r0, r6
 8011ccc:	462b      	mov	r3, r5
 8011cce:	4a26      	ldr	r2, [pc, #152]	; (8011d68 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x104>)
 8011cd0:	f7ff fc49 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 8011cd4:	2500      	movs	r5, #0
 8011cd6:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8011d64 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>
 8011cda:	4629      	mov	r1, r5
 8011cdc:	2301      	movs	r3, #1
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8011ce4:	f7f7 f968 	bl	8008fb8 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8011ce8:	46a9      	mov	r9, r5
 8011cea:	3501      	adds	r5, #1
 8011cec:	b378      	cbz	r0, 8011d4e <DisplayUdf::ShowUniverse(ArtNetNode*)+0xea>
 8011cee:	f106 0343 	add.w	r3, r6, #67	; 0x43
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	f813 b005 	ldrb.w	fp, [r3, r5]
 8011cfa:	f7f7 f977 	bl	8008fec <ArtNetNode::GetNetSwitch(unsigned int) const>
 8011cfe:	2100      	movs	r1, #0
 8011d00:	4607      	mov	r7, r0
 8011d02:	4620      	mov	r0, r4
 8011d04:	f7f7 f96e 	bl	8008fe4 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8011d08:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8011d0c:	4680      	mov	r8, r0
 8011d0e:	4649      	mov	r1, r9
 8011d10:	4620      	mov	r0, r4
 8011d12:	9307      	str	r3, [sp, #28]
 8011d14:	f7f7 fae4 	bl	80092e0 <ArtNetNode::GetMergeMode(unsigned int) const>
 8011d18:	4b10      	ldr	r3, [pc, #64]	; (8011d5c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 8011d1a:	4a0f      	ldr	r2, [pc, #60]	; (8011d58 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8011d1c:	4649      	mov	r1, r9
 8011d1e:	2800      	cmp	r0, #0
 8011d20:	bf18      	it	ne
 8011d22:	461a      	movne	r2, r3
 8011d24:	4620      	mov	r0, r4
 8011d26:	9206      	str	r2, [sp, #24]
 8011d28:	f7f7 faa9 	bl	800927e <ArtNetNode::GetPortProtocol(unsigned int) const>
 8011d2c:	490c      	ldr	r1, [pc, #48]	; (8011d60 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 8011d2e:	9a06      	ldr	r2, [sp, #24]
 8011d30:	2800      	cmp	r0, #0
 8011d32:	bf08      	it	eq
 8011d34:	4651      	moveq	r1, sl
 8011d36:	9b07      	ldr	r3, [sp, #28]
 8011d38:	9104      	str	r1, [sp, #16]
 8011d3a:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8011d3e:	9203      	str	r2, [sp, #12]
 8011d40:	462b      	mov	r3, r5
 8011d42:	4659      	mov	r1, fp
 8011d44:	4630      	mov	r0, r6
 8011d46:	4a09      	ldr	r2, [pc, #36]	; (8011d6c <DisplayUdf::ShowUniverse(ArtNetNode*)+0x108>)
 8011d48:	9700      	str	r7, [sp, #0]
 8011d4a:	f7ff fc0c 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 8011d4e:	2d04      	cmp	r5, #4
 8011d50:	d1c3      	bne.n	8011cda <DisplayUdf::ShowUniverse(ArtNetNode*)+0x76>
 8011d52:	b00b      	add	sp, #44	; 0x2c
 8011d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d58:	08015463 	stmdaeq	r1, {r0, r1, r5, r6, sl, ip, lr}
 8011d5c:	08015467 	stmdaeq	r1, {r0, r1, r2, r5, r6, sl, ip, lr}
 8011d60:	08015473 	stmdaeq	r1, {r0, r1, r4, r5, r6, sl, ip, lr}
 8011d64:	08016f70 	stmdaeq	r1, {r4, r5, r6, r8, r9, sl, fp, sp, lr}
 8011d68:	08016f75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 8011d6c:	08016f89 	stmdaeq	r1, {r0, r3, r7, r8, r9, sl, fp, sp, lr}

08011d70 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 8011d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d74:	4606      	mov	r6, r0
 8011d76:	2541      	movs	r5, #65	; 0x41
 8011d78:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8011db8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 8011d7c:	b085      	sub	sp, #20
 8011d7e:	f100 084a 	add.w	r8, r0, #74	; 0x4a
 8011d82:	f501 775b 	add.w	r7, r1, #876	; 0x36c
 8011d86:	012b      	lsls	r3, r5, #4
 8011d88:	58fc      	ldr	r4, [r7, r3]
 8011d8a:	464a      	mov	r2, r9
 8011d8c:	0e23      	lsrs	r3, r4, #24
 8011d8e:	9303      	str	r3, [sp, #12]
 8011d90:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8011d94:	9302      	str	r3, [sp, #8]
 8011d96:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8011d9a:	b2e4      	uxtb	r4, r4
 8011d9c:	9301      	str	r3, [sp, #4]
 8011d9e:	9400      	str	r4, [sp, #0]
 8011da0:	462b      	mov	r3, r5
 8011da2:	4630      	mov	r0, r6
 8011da4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011da8:	3501      	adds	r5, #1
 8011daa:	f7ff fbdc 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 8011dae:	2d45      	cmp	r5, #69	; 0x45
 8011db0:	d1e9      	bne.n	8011d86 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 8011db2:	b005      	add	sp, #20
 8011db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011db8:	08016f9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, sl, fp, sp, lr}

08011dbc <DisplayUdf::Show(ArtNetNode*)>:
 8011dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011dbe:	4604      	mov	r4, r0
 8011dc0:	460d      	mov	r5, r1
 8011dc2:	f7ff fcc7 	bl	8011754 <DisplayUdf::Show()>
 8011dc6:	4629      	mov	r1, r5
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f7ff ff28 	bl	8011c1e <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8011dce:	4629      	mov	r1, r5
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f7ff ff47 	bl	8011c64 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8011dd6:	4629      	mov	r1, r5
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f7ff ffc9 	bl	8011d70 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 8011dde:	f895 26de 	ldrb.w	r2, [r5, #1758]	; 0x6de
 8011de2:	f895 36df 	ldrb.w	r3, [r5, #1759]	; 0x6df
 8011de6:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8011dea:	4413      	add	r3, r2
 8011dec:	4620      	mov	r0, r4
 8011dee:	4a0d      	ldr	r2, [pc, #52]	; (8011e24 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 8011df0:	f7ff fbb9 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 8011df4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011df6:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8011dfa:	2a02      	cmp	r2, #2
 8011dfc:	d001      	beq.n	8011e02 <DisplayUdf::Show(ArtNetNode*)+0x46>
 8011dfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011e00:	b92b      	cbnz	r3, 8011e0e <DisplayUdf::Show(ArtNetNode*)+0x52>
 8011e02:	4620      	mov	r0, r4
 8011e04:	4a08      	ldr	r2, [pc, #32]	; (8011e28 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 8011e06:	f7ff fbae 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 8011e0a:	b003      	add	sp, #12
 8011e0c:	bd30      	pop	{r4, r5, pc}
 8011e0e:	4807      	ldr	r0, [pc, #28]	; (8011e2c <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8011e10:	9300      	str	r3, [sp, #0]
 8011e12:	4b07      	ldr	r3, [pc, #28]	; (8011e30 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8011e14:	2a00      	cmp	r2, #0
 8011e16:	bf08      	it	eq
 8011e18:	4603      	moveq	r3, r0
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	4a05      	ldr	r2, [pc, #20]	; (8011e34 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8011e1e:	f7ff fba2 	bl	8011566 <Display::Printf(unsigned char, char const*, ...)>
 8011e22:	e7f2      	b.n	8011e0a <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8011e24:	08016faf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, sl, fp, sp, lr}
 8011e28:	08016fb6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r8, r9, sl, fp, sp, lr}
 8011e2c:	08015229 	stmdaeq	r1, {r0, r3, r5, r9, ip, lr}
 8011e30:	0801559d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, ip, lr}
 8011e34:	08016fbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp, lr}

08011e38 <NetworkDisplay::ShowEmacStart()>:
 8011e38:	4b01      	ldr	r3, [pc, #4]	; (8011e40 <NetworkDisplay::ShowEmacStart()+0x8>)
 8011e3a:	6818      	ldr	r0, [r3, #0]
 8011e3c:	f7ff bbf4 	b.w	8011628 <DisplayUdf::ShowEmacStart()>
 8011e40:	2000adfc 	strdcs	sl, [r0], -ip

08011e44 <NetworkDisplay::ShowIp()>:
 8011e44:	4b01      	ldr	r3, [pc, #4]	; (8011e4c <NetworkDisplay::ShowIp()+0x8>)
 8011e46:	6818      	ldr	r0, [r3, #0]
 8011e48:	f7ff bbfe 	b.w	8011648 <DisplayUdf::ShowIpAddress()>
 8011e4c:	2000adfc 	strdcs	sl, [r0], -ip

08011e50 <NetworkDisplay::ShowNetMask()>:
 8011e50:	4b01      	ldr	r3, [pc, #4]	; (8011e58 <NetworkDisplay::ShowNetMask()+0x8>)
 8011e52:	6818      	ldr	r0, [r3, #0]
 8011e54:	f7ff bc2c 	b.w	80116b0 <DisplayUdf::ShowNetmask()>
 8011e58:	2000adfc 	strdcs	sl, [r0], -ip

08011e5c <NetworkDisplay::ShowGatewayIp()>:
 8011e5c:	4b01      	ldr	r3, [pc, #4]	; (8011e64 <NetworkDisplay::ShowGatewayIp()+0x8>)
 8011e5e:	6818      	ldr	r0, [r3, #0]
 8011e60:	f7ff bc44 	b.w	80116ec <DisplayUdf::ShowGatewayIp()>
 8011e64:	2000adfc 	strdcs	sl, [r0], -ip

08011e68 <NetworkDisplay::ShowShutdown()>:
 8011e68:	4b01      	ldr	r3, [pc, #4]	; (8011e70 <NetworkDisplay::ShowShutdown()+0x8>)
 8011e6a:	6818      	ldr	r0, [r3, #0]
 8011e6c:	f7ff bcee 	b.w	801184c <DisplayUdf::ShowShutdown()>
 8011e70:	2000adfc 	strdcs	sl, [r0], -ip

08011e74 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8011e74:	4b01      	ldr	r3, [pc, #4]	; (8011e7c <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 8011e76:	6818      	ldr	r0, [r3, #0]
 8011e78:	f7ff bcb0 	b.w	80117dc <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011e7c:	2000adfc 	strdcs	sl, [r0], -ip

08011e80 <properties::convert_json_file(char*, unsigned short, bool)>:
 8011e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e84:	7803      	ldrb	r3, [r0, #0]
 8011e86:	2b7b      	cmp	r3, #123	; 0x7b
 8011e88:	d170      	bne.n	8011f6c <properties::convert_json_file(char*, unsigned short, bool)+0xec>
 8011e8a:	b322      	cbz	r2, 8011ed6 <properties::convert_json_file(char*, unsigned short, bool)+0x56>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	4606      	mov	r6, r0
 8011e90:	461c      	mov	r4, r3
 8011e92:	2a00      	cmp	r2, #0
 8011e94:	bf0c      	ite	eq
 8011e96:	f04f 0c0a 	moveq.w	ip, #10
 8011e9a:	f04f 0c00 	movne.w	ip, #0
 8011e9e:	273d      	movs	r7, #61	; 0x3d
 8011ea0:	4299      	cmp	r1, r3
 8011ea2:	d960      	bls.n	8011f66 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 8011ea4:	4299      	cmp	r1, r3
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	f890 e000 	ldrb.w	lr, [r0]
 8011eac:	f103 0301 	add.w	r3, r3, #1
 8011eb0:	f100 0001 	add.w	r0, r0, #1
 8011eb4:	d846      	bhi.n	8011f44 <properties::convert_json_file(char*, unsigned short, bool)+0xc4>
 8011eb6:	1aa0      	subs	r0, r4, r2
 8011eb8:	4615      	mov	r5, r2
 8011eba:	1884      	adds	r4, r0, r2
 8011ebc:	f812 8b01 	ldrb.w	r8, [r2], #1
 8011ec0:	f103 0e01 	add.w	lr, r3, #1
 8011ec4:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 8011ec8:	d053      	beq.n	8011f72 <properties::convert_json_file(char*, unsigned short, bool)+0xf2>
 8011eca:	4299      	cmp	r1, r3
 8011ecc:	d957      	bls.n	8011f7e <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 8011ece:	4673      	mov	r3, lr
 8011ed0:	f806 8b01 	strb.w	r8, [r6], #1
 8011ed4:	e7f0      	b.n	8011eb8 <properties::convert_json_file(char*, unsigned short, bool)+0x38>
 8011ed6:	2323      	movs	r3, #35	; 0x23
 8011ed8:	f800 3b01 	strb.w	r3, [r0], #1
 8011edc:	4605      	mov	r5, r0
 8011ede:	2301      	movs	r3, #1
 8011ee0:	4299      	cmp	r1, r3
 8011ee2:	d92d      	bls.n	8011f40 <properties::convert_json_file(char*, unsigned short, bool)+0xc0>
 8011ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ee8:	2c22      	cmp	r4, #34	; 0x22
 8011eea:	d001      	beq.n	8011ef0 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8011eec:	3301      	adds	r3, #1
 8011eee:	e7f7      	b.n	8011ee0 <properties::convert_json_file(char*, unsigned short, bool)+0x60>
 8011ef0:	46ac      	mov	ip, r5
 8011ef2:	4606      	mov	r6, r0
 8011ef4:	2701      	movs	r7, #1
 8011ef6:	f89c e000 	ldrb.w	lr, [ip]
 8011efa:	4665      	mov	r5, ip
 8011efc:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011f00:	4630      	mov	r0, r6
 8011f02:	463c      	mov	r4, r7
 8011f04:	f10c 0c01 	add.w	ip, ip, #1
 8011f08:	f106 0601 	add.w	r6, r6, #1
 8011f0c:	f107 0701 	add.w	r7, r7, #1
 8011f10:	d007      	beq.n	8011f22 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8011f12:	3301      	adds	r3, #1
 8011f14:	4299      	cmp	r1, r3
 8011f16:	4665      	mov	r5, ip
 8011f18:	f806 ec01 	strb.w	lr, [r6, #-1]
 8011f1c:	d8eb      	bhi.n	8011ef6 <properties::convert_json_file(char*, unsigned short, bool)+0x76>
 8011f1e:	463c      	mov	r4, r7
 8011f20:	4630      	mov	r0, r6
 8011f22:	4606      	mov	r6, r0
 8011f24:	200a      	movs	r0, #10
 8011f26:	3401      	adds	r4, #1
 8011f28:	f806 0b01 	strb.w	r0, [r6], #1
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	f815 7b01 	ldrb.w	r7, [r5], #1
 8011f32:	2f7b      	cmp	r7, #123	; 0x7b
 8011f34:	d0ad      	beq.n	8011e92 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 8011f36:	1c5f      	adds	r7, r3, #1
 8011f38:	4299      	cmp	r1, r3
 8011f3a:	463b      	mov	r3, r7
 8011f3c:	d8f6      	bhi.n	8011f2c <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8011f3e:	e7a8      	b.n	8011e92 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 8011f40:	2401      	movs	r4, #1
 8011f42:	e7ee      	b.n	8011f22 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8011f44:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011f48:	d1ac      	bne.n	8011ea4 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	e7b3      	b.n	8011eb6 <properties::convert_json_file(char*, unsigned short, bool)+0x36>
 8011f4e:	283a      	cmp	r0, #58	; 0x3a
 8011f50:	d115      	bne.n	8011f7e <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 8011f52:	462b      	mov	r3, r5
 8011f54:	e01b      	b.n	8011f8e <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 8011f56:	4686      	mov	lr, r0
 8011f58:	e027      	b.n	8011faa <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
 8011f5a:	4673      	mov	r3, lr
 8011f5c:	f806 cb01 	strb.w	ip, [r6], #1
 8011f60:	3401      	adds	r4, #1
 8011f62:	3301      	adds	r3, #1
 8011f64:	e79c      	b.n	8011ea0 <properties::convert_json_file(char*, unsigned short, bool)+0x20>
 8011f66:	4620      	mov	r0, r4
 8011f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f70:	e7fa      	b.n	8011f68 <properties::convert_json_file(char*, unsigned short, bool)+0xe8>
 8011f72:	4630      	mov	r0, r6
 8011f74:	f800 7b01 	strb.w	r7, [r0], #1
 8011f78:	469e      	mov	lr, r3
 8011f7a:	4606      	mov	r6, r0
 8011f7c:	3401      	adds	r4, #1
 8011f7e:	4571      	cmp	r1, lr
 8011f80:	462b      	mov	r3, r5
 8011f82:	7828      	ldrb	r0, [r5, #0]
 8011f84:	f10e 0e01 	add.w	lr, lr, #1
 8011f88:	f105 0501 	add.w	r5, r5, #1
 8011f8c:	d8df      	bhi.n	8011f4e <properties::convert_json_file(char*, unsigned short, bool)+0xce>
 8011f8e:	781d      	ldrb	r5, [r3, #0]
 8011f90:	461a      	mov	r2, r3
 8011f92:	2d2f      	cmp	r5, #47	; 0x2f
 8011f94:	4670      	mov	r0, lr
 8011f96:	f103 0301 	add.w	r3, r3, #1
 8011f9a:	f10e 0e01 	add.w	lr, lr, #1
 8011f9e:	d8da      	bhi.n	8011f56 <properties::convert_json_file(char*, unsigned short, bool)+0xd6>
 8011fa0:	4281      	cmp	r1, r0
 8011fa2:	d8f4      	bhi.n	8011f8e <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 8011fa4:	2d22      	cmp	r5, #34	; 0x22
 8011fa6:	bf08      	it	eq
 8011fa8:	461a      	moveq	r2, r3
 8011faa:	4610      	mov	r0, r2
 8011fac:	f810 5b01 	ldrb.w	r5, [r0], #1
 8011fb0:	f10e 0301 	add.w	r3, lr, #1
 8011fb4:	2d22      	cmp	r5, #34	; 0x22
 8011fb6:	d0d0      	beq.n	8011f5a <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 8011fb8:	2d2c      	cmp	r5, #44	; 0x2c
 8011fba:	d0ce      	beq.n	8011f5a <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 8011fbc:	2d7d      	cmp	r5, #125	; 0x7d
 8011fbe:	d0cc      	beq.n	8011f5a <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 8011fc0:	4571      	cmp	r1, lr
 8011fc2:	d9ce      	bls.n	8011f62 <properties::convert_json_file(char*, unsigned short, bool)+0xe2>
 8011fc4:	f1a5 0e20 	sub.w	lr, r5, #32
 8011fc8:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 8011fcc:	d803      	bhi.n	8011fd6 <properties::convert_json_file(char*, unsigned short, bool)+0x156>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	f806 5b01 	strb.w	r5, [r6], #1
 8011fd4:	3401      	adds	r4, #1
 8011fd6:	469e      	mov	lr, r3
 8011fd8:	e7e7      	b.n	8011faa <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
	...

08011fdc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 8011fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fe0:	6002      	str	r2, [r0, #0]
 8011fe2:	4614      	mov	r4, r2
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	4606      	mov	r6, r0
 8011fe8:	460f      	mov	r7, r1
 8011fea:	80c2      	strh	r2, [r0, #6]
 8011fec:	4a1b      	ldr	r2, [pc, #108]	; (801205c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 8011fee:	8083      	strh	r3, [r0, #4]
 8011ff0:	7810      	ldrb	r0, [r2, #0]
 8011ff2:	f000 0001 	and.w	r0, r0, #1
 8011ff6:	7230      	strb	r0, [r6, #8]
 8011ff8:	463d      	mov	r5, r7
 8011ffa:	782a      	ldrb	r2, [r5, #0]
 8011ffc:	3701      	adds	r7, #1
 8011ffe:	2a00      	cmp	r2, #0
 8012000:	d1fa      	bne.n	8011ff8 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8012002:	1a6d      	subs	r5, r5, r1
 8012004:	b29b      	uxth	r3, r3
 8012006:	b1d0      	cbz	r0, 801203e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8012008:	1d2f      	adds	r7, r5, #4
 801200a:	429f      	cmp	r7, r3
 801200c:	d814      	bhi.n	8012038 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801200e:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8012012:	f04f 0922 	mov.w	r9, #34	; 0x22
 8012016:	462a      	mov	r2, r5
 8012018:	f884 8000 	strb.w	r8, [r4]
 801201c:	f884 9001 	strb.w	r9, [r4, #1]
 8012020:	1ca0      	adds	r0, r4, #2
 8012022:	f000 fece 	bl	8012dc2 <memmove>
 8012026:	223a      	movs	r2, #58	; 0x3a
 8012028:	1963      	adds	r3, r4, r5
 801202a:	3505      	adds	r5, #5
 801202c:	f883 9002 	strb.w	r9, [r3, #2]
 8012030:	70da      	strb	r2, [r3, #3]
 8012032:	80f5      	strh	r5, [r6, #6]
 8012034:	f804 8007 	strb.w	r8, [r4, r7]
 8012038:	4630      	mov	r0, r6
 801203a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801203e:	1caf      	adds	r7, r5, #2
 8012040:	429f      	cmp	r7, r3
 8012042:	d8f9      	bhi.n	8012038 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8012044:	4620      	mov	r0, r4
 8012046:	2323      	movs	r3, #35	; 0x23
 8012048:	462a      	mov	r2, r5
 801204a:	f800 3b01 	strb.w	r3, [r0], #1
 801204e:	f000 feb8 	bl	8012dc2 <memmove>
 8012052:	230a      	movs	r3, #10
 8012054:	442c      	add	r4, r5
 8012056:	7063      	strb	r3, [r4, #1]
 8012058:	80f7      	strh	r7, [r6, #6]
 801205a:	e7ed      	b.n	8012038 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801205c:	2000ae00 	andcs	sl, r0, r0, lsl #28

08012060 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8012060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012062:	469c      	mov	ip, r3
 8012064:	8885      	ldrh	r5, [r0, #4]
 8012066:	88c3      	ldrh	r3, [r0, #6]
 8012068:	b085      	sub	sp, #20
 801206a:	42ab      	cmp	r3, r5
 801206c:	d302      	bcc.n	8012074 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 801206e:	2000      	movs	r0, #0
 8012070:	b005      	add	sp, #20
 8012072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012074:	4604      	mov	r4, r0
 8012076:	6800      	ldr	r0, [r0, #0]
 8012078:	1aed      	subs	r5, r5, r3
 801207a:	4418      	add	r0, r3
 801207c:	b2d6      	uxtb	r6, r2
 801207e:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8012082:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8012086:	f894 e008 	ldrb.w	lr, [r4, #8]
 801208a:	0e12      	lsrs	r2, r2, #24
 801208c:	f1bc 0f00 	cmp.w	ip, #0
 8012090:	d109      	bne.n	80120a6 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 8012092:	f1be 0f00 	cmp.w	lr, #0
 8012096:	d109      	bne.n	80120ac <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8012098:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801209c:	e9cd 6700 	strd	r6, r7, [sp]
 80120a0:	460b      	mov	r3, r1
 80120a2:	4a0e      	ldr	r2, [pc, #56]	; (80120dc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 80120a4:	e008      	b.n	80120b8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80120a6:	f1be 0f00 	cmp.w	lr, #0
 80120aa:	d00f      	beq.n	80120cc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 80120ac:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80120b0:	460b      	mov	r3, r1
 80120b2:	e9cd 6700 	strd	r6, r7, [sp]
 80120b6:	4a0a      	ldr	r2, [pc, #40]	; (80120e0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 80120b8:	4629      	mov	r1, r5
 80120ba:	f001 f8e3 	bl	8013284 <snprintf>
 80120be:	4285      	cmp	r5, r0
 80120c0:	dbd5      	blt.n	801206e <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 80120c2:	88e3      	ldrh	r3, [r4, #6]
 80120c4:	4403      	add	r3, r0
 80120c6:	80e3      	strh	r3, [r4, #6]
 80120c8:	2001      	movs	r0, #1
 80120ca:	e7d1      	b.n	8012070 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 80120cc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80120d0:	e9cd 6700 	strd	r6, r7, [sp]
 80120d4:	460b      	mov	r3, r1
 80120d6:	4a03      	ldr	r2, [pc, #12]	; (80120e4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 80120d8:	e7ee      	b.n	80120b8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80120da:	bf00      	nop
 80120dc:	08016fdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
 80120e0:	08016fc7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, r9, sl, fp, sp, lr}
 80120e4:	08016fdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}

080120e8 <PropertiesBuilder::AddComment(char const*)>:
 80120e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ea:	7a06      	ldrb	r6, [r0, #8]
 80120ec:	b996      	cbnz	r6, 8012114 <PropertiesBuilder::AddComment(char const*)+0x2c>
 80120ee:	4604      	mov	r4, r0
 80120f0:	88c0      	ldrh	r0, [r0, #6]
 80120f2:	88a5      	ldrh	r5, [r4, #4]
 80120f4:	42a8      	cmp	r0, r5
 80120f6:	d20d      	bcs.n	8012114 <PropertiesBuilder::AddComment(char const*)+0x2c>
 80120f8:	6827      	ldr	r7, [r4, #0]
 80120fa:	1a2d      	subs	r5, r5, r0
 80120fc:	460b      	mov	r3, r1
 80120fe:	4a06      	ldr	r2, [pc, #24]	; (8012118 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8012100:	4629      	mov	r1, r5
 8012102:	4438      	add	r0, r7
 8012104:	f001 f8be 	bl	8013284 <snprintf>
 8012108:	4285      	cmp	r5, r0
 801210a:	bfa1      	itttt	ge
 801210c:	2601      	movge	r6, #1
 801210e:	88e3      	ldrhge	r3, [r4, #6]
 8012110:	18c0      	addge	r0, r0, r3
 8012112:	80e0      	strhge	r0, [r4, #6]
 8012114:	4630      	mov	r0, r6
 8012116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012118:	08016fec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, sl, fp, sp, lr}

0801211c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
 801211c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801211e:	88c5      	ldrh	r5, [r0, #6]
 8012120:	8887      	ldrh	r7, [r0, #4]
 8012122:	9e08      	ldr	r6, [sp, #32]
 8012124:	42bd      	cmp	r5, r7
 8012126:	d302      	bcc.n	801212e <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x12>
 8012128:	2000      	movs	r0, #0
 801212a:	b003      	add	sp, #12
 801212c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801212e:	4604      	mov	r4, r0
 8012130:	6800      	ldr	r0, [r0, #0]
 8012132:	4428      	add	r0, r5
 8012134:	1b7d      	subs	r5, r7, r5
 8012136:	7a27      	ldrb	r7, [r4, #8]
 8012138:	b92b      	cbnz	r3, 8012146 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2a>
 801213a:	b92f      	cbnz	r7, 8012148 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2c>
 801213c:	e9cd 6200 	strd	r6, r2, [sp]
 8012140:	460b      	mov	r3, r1
 8012142:	4a0b      	ldr	r2, [pc, #44]	; (8012170 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x54>)
 8012144:	e004      	b.n	8012150 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8012146:	b16f      	cbz	r7, 8012164 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x48>
 8012148:	460b      	mov	r3, r1
 801214a:	e9cd 6200 	strd	r6, r2, [sp]
 801214e:	4a09      	ldr	r2, [pc, #36]	; (8012174 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x58>)
 8012150:	4629      	mov	r1, r5
 8012152:	f001 f897 	bl	8013284 <snprintf>
 8012156:	4285      	cmp	r5, r0
 8012158:	dbe6      	blt.n	8012128 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xc>
 801215a:	88e3      	ldrh	r3, [r4, #6]
 801215c:	4403      	add	r3, r0
 801215e:	80e3      	strh	r3, [r4, #6]
 8012160:	2001      	movs	r0, #1
 8012162:	e7e2      	b.n	801212a <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xe>
 8012164:	e9cd 6200 	strd	r6, r2, [sp]
 8012168:	460b      	mov	r3, r1
 801216a:	4a03      	ldr	r2, [pc, #12]	; (8012178 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5c>)
 801216c:	e7f0      	b.n	8012150 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 801216e:	bf00      	nop
 8012170:	08017001 	stmdaeq	r1, {r0, ip, sp, lr}
 8012174:	08016ff4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
 8012178:	08017002 	stmdaeq	r1, {r1, ip, sp, lr}

0801217c <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 801217c:	e9c0 1200 	strd	r1, r2, [r0]
 8012180:	4770      	bx	lr

08012182 <ReadConfigFile::~ReadConfigFile()>:
 8012182:	4770      	bx	lr

08012184 <ReadConfigFile::Read(char const*, unsigned int)>:
 8012184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012188:	4606      	mov	r6, r0
 801218a:	460d      	mov	r5, r1
 801218c:	4614      	mov	r4, r2
 801218e:	f04f 0800 	mov.w	r8, #0
 8012192:	b090      	sub	sp, #64	; 0x40
 8012194:	b33c      	cbz	r4, 80121e6 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8012196:	466b      	mov	r3, sp
 8012198:	462a      	mov	r2, r5
 801219a:	4619      	mov	r1, r3
 801219c:	7817      	ldrb	r7, [r2, #0]
 801219e:	4610      	mov	r0, r2
 80121a0:	2f0d      	cmp	r7, #13
 80121a2:	f102 0201 	add.w	r2, r2, #1
 80121a6:	d013      	beq.n	80121d0 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 80121a8:	2f0a      	cmp	r7, #10
 80121aa:	d011      	beq.n	80121d0 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 80121ac:	f803 7b01 	strb.w	r7, [r3], #1
 80121b0:	1a58      	subs	r0, r3, r1
 80121b2:	283f      	cmp	r0, #63	; 0x3f
 80121b4:	4615      	mov	r5, r2
 80121b6:	dc16      	bgt.n	80121e6 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80121b8:	3c01      	subs	r4, #1
 80121ba:	d1ef      	bne.n	801219c <ReadConfigFile::Read(char const*, unsigned int)+0x18>
 80121bc:	f89d 2000 	ldrb.w	r2, [sp]
 80121c0:	2a60      	cmp	r2, #96	; 0x60
 80121c2:	d9e7      	bls.n	8012194 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80121c4:	f883 8000 	strb.w	r8, [r3]
 80121c8:	e9d6 3000 	ldrd	r3, r0, [r6]
 80121cc:	4798      	blx	r3
 80121ce:	e7e1      	b.n	8012194 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80121d0:	4605      	mov	r5, r0
 80121d2:	2c00      	cmp	r4, #0
 80121d4:	d0f2      	beq.n	80121bc <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 80121d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121da:	2a0d      	cmp	r2, #13
 80121dc:	d001      	beq.n	80121e2 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80121de:	2a0a      	cmp	r2, #10
 80121e0:	d1ec      	bne.n	80121bc <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 80121e2:	3c01      	subs	r4, #1
 80121e4:	e7f4      	b.n	80121d0 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 80121e6:	b010      	add	sp, #64	; 0x40
 80121e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121ec <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 80121ec:	b570      	push	{r4, r5, r6, lr}
 80121ee:	4615      	mov	r5, r2
 80121f0:	461c      	mov	r4, r3
 80121f2:	f000 f8ba 	bl	801236a <Sscan::checkName(char const*, char const*)>
 80121f6:	b160      	cbz	r0, 8012212 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x26>
 80121f8:	2100      	movs	r1, #0
 80121fa:	5c43      	ldrb	r3, [r0, r1]
 80121fc:	6826      	ldr	r6, [r4, #0]
 80121fe:	b28a      	uxth	r2, r1
 8012200:	b123      	cbz	r3, 801220c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 8012202:	42b2      	cmp	r2, r6
 8012204:	d207      	bcs.n	8012216 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2a>
 8012206:	546b      	strb	r3, [r5, r1]
 8012208:	3101      	adds	r1, #1
 801220a:	e7f6      	b.n	80121fa <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 801220c:	2000      	movs	r0, #0
 801220e:	6022      	str	r2, [r4, #0]
 8012210:	bd70      	pop	{r4, r5, r6, pc}
 8012212:	2001      	movs	r0, #1
 8012214:	e7fc      	b.n	8012210 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>
 8012216:	2b0a      	cmp	r3, #10
 8012218:	d0f8      	beq.n	801220c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 801221a:	2002      	movs	r0, #2
 801221c:	e7f8      	b.n	8012210 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>

0801221e <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
 801221e:	b538      	push	{r3, r4, r5, lr}
 8012220:	4614      	mov	r4, r2
 8012222:	f000 f8a2 	bl	801236a <Sscan::checkName(char const*, char const*)>
 8012226:	b908      	cbnz	r0, 801222c <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xe>
 8012228:	2001      	movs	r0, #1
 801222a:	bd38      	pop	{r3, r4, r5, pc}
 801222c:	2100      	movs	r1, #0
 801222e:	4602      	mov	r2, r0
 8012230:	8021      	strh	r1, [r4, #0]
 8012232:	5c50      	ldrb	r0, [r2, r1]
 8012234:	b1b0      	cbz	r0, 8012264 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x46>
 8012236:	2904      	cmp	r1, #4
 8012238:	d018      	beq.n	801226c <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x4e>
 801223a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801223e:	2b09      	cmp	r3, #9
 8012240:	d904      	bls.n	801224c <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x2e>
 8012242:	f040 0520 	orr.w	r5, r0, #32
 8012246:	3d61      	subs	r5, #97	; 0x61
 8012248:	2d05      	cmp	r5, #5
 801224a:	d8ed      	bhi.n	8012228 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 801224c:	2839      	cmp	r0, #57	; 0x39
 801224e:	bf84      	itt	hi
 8012250:	f040 0320 	orrhi.w	r3, r0, #32
 8012254:	3b57      	subhi	r3, #87	; 0x57
 8012256:	8820      	ldrh	r0, [r4, #0]
 8012258:	b2db      	uxtb	r3, r3
 801225a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 801225e:	8023      	strh	r3, [r4, #0]
 8012260:	3101      	adds	r1, #1
 8012262:	e7e6      	b.n	8012232 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x14>
 8012264:	2904      	cmp	r1, #4
 8012266:	bf18      	it	ne
 8012268:	2002      	movne	r0, #2
 801226a:	e7de      	b.n	801222a <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>
 801226c:	3820      	subs	r0, #32
 801226e:	bf18      	it	ne
 8012270:	2001      	movne	r0, #1
 8012272:	e7da      	b.n	801222a <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>

08012274 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 8012274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012276:	4615      	mov	r5, r2
 8012278:	f000 f877 	bl	801236a <Sscan::checkName(char const*, char const*)>
 801227c:	b3c0      	cbz	r0, 80122f0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x7c>
 801227e:	2400      	movs	r4, #0
 8012280:	270a      	movs	r7, #10
 8012282:	ae01      	add	r6, sp, #4
 8012284:	4603      	mov	r3, r0
 8012286:	2100      	movs	r1, #0
 8012288:	f100 0c04 	add.w	ip, r0, #4
 801228c:	4618      	mov	r0, r3
 801228e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012292:	2a2e      	cmp	r2, #46	; 0x2e
 8012294:	d00e      	beq.n	80122b4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 8012296:	b16a      	cbz	r2, 80122b4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 8012298:	4560      	cmp	r0, ip
 801229a:	d102      	bne.n	80122a2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2e>
 801229c:	2002      	movs	r0, #2
 801229e:	b003      	add	sp, #12
 80122a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122a2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80122a6:	2b09      	cmp	r3, #9
 80122a8:	d8f8      	bhi.n	801229c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80122aa:	fb07 2101 	mla	r1, r7, r1, r2
 80122ae:	4603      	mov	r3, r0
 80122b0:	3930      	subs	r1, #48	; 0x30
 80122b2:	e7eb      	b.n	801228c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x18>
 80122b4:	29ff      	cmp	r1, #255	; 0xff
 80122b6:	d8f1      	bhi.n	801229c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80122b8:	3401      	adds	r4, #1
 80122ba:	2c03      	cmp	r4, #3
 80122bc:	f806 1b01 	strb.w	r1, [r6], #1
 80122c0:	d1e0      	bne.n	8012284 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x10>
 80122c2:	2400      	movs	r4, #0
 80122c4:	220a      	movs	r2, #10
 80122c6:	1d1e      	adds	r6, r3, #4
 80122c8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80122cc:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 80122d0:	d007      	beq.n	80122e2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6e>
 80122d2:	429e      	cmp	r6, r3
 80122d4:	d0e2      	beq.n	801229c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80122d6:	3930      	subs	r1, #48	; 0x30
 80122d8:	2909      	cmp	r1, #9
 80122da:	d8df      	bhi.n	801229c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80122dc:	fb02 1404 	mla	r4, r2, r4, r1
 80122e0:	e7f2      	b.n	80122c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 80122e2:	2cff      	cmp	r4, #255	; 0xff
 80122e4:	d8da      	bhi.n	801229c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80122e6:	f88d 4007 	strb.w	r4, [sp, #7]
 80122ea:	9b01      	ldr	r3, [sp, #4]
 80122ec:	602b      	str	r3, [r5, #0]
 80122ee:	e7d6      	b.n	801229e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>
 80122f0:	2001      	movs	r0, #1
 80122f2:	e7d4      	b.n	801229e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>

080122f4 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 80122f4:	b538      	push	{r3, r4, r5, lr}
 80122f6:	4615      	mov	r5, r2
 80122f8:	f000 f837 	bl	801236a <Sscan::checkName(char const*, char const*)>
 80122fc:	b1a0      	cbz	r0, 8012328 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 80122fe:	4604      	mov	r4, r0
 8012300:	2100      	movs	r1, #0
 8012302:	220a      	movs	r2, #10
 8012304:	7823      	ldrb	r3, [r4, #0]
 8012306:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 801230a:	2809      	cmp	r0, #9
 801230c:	d80e      	bhi.n	801232c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 801230e:	fb02 3101 	mla	r1, r2, r1, r3
 8012312:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012316:	3930      	subs	r1, #48	; 0x30
 8012318:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 801231c:	d1f2      	bne.n	8012304 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 801231e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8012322:	d203      	bcs.n	801232c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8012324:	8029      	strh	r1, [r5, #0]
 8012326:	bd38      	pop	{r3, r4, r5, pc}
 8012328:	2001      	movs	r0, #1
 801232a:	e7fc      	b.n	8012326 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 801232c:	2002      	movs	r0, #2
 801232e:	e7fa      	b.n	8012326 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08012330 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8012330:	b538      	push	{r3, r4, r5, lr}
 8012332:	4615      	mov	r5, r2
 8012334:	f000 f819 	bl	801236a <Sscan::checkName(char const*, char const*)>
 8012338:	b198      	cbz	r0, 8012362 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 801233a:	4604      	mov	r4, r0
 801233c:	2100      	movs	r1, #0
 801233e:	220a      	movs	r2, #10
 8012340:	7823      	ldrb	r3, [r4, #0]
 8012342:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8012346:	2809      	cmp	r0, #9
 8012348:	d80d      	bhi.n	8012366 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 801234a:	fb02 3101 	mla	r1, r2, r1, r3
 801234e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012352:	3930      	subs	r1, #48	; 0x30
 8012354:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8012358:	d1f2      	bne.n	8012340 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 801235a:	29ff      	cmp	r1, #255	; 0xff
 801235c:	d803      	bhi.n	8012366 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 801235e:	7029      	strb	r1, [r5, #0]
 8012360:	bd38      	pop	{r3, r4, r5, pc}
 8012362:	2001      	movs	r0, #1
 8012364:	e7fc      	b.n	8012360 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 8012366:	2002      	movs	r0, #2
 8012368:	e7fa      	b.n	8012360 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

0801236a <Sscan::checkName(char const*, char const*)>:
 801236a:	4603      	mov	r3, r0
 801236c:	b510      	push	{r4, lr}
 801236e:	3901      	subs	r1, #1
 8012370:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012374:	461c      	mov	r4, r3
 8012376:	f813 2b01 	ldrb.w	r2, [r3], #1
 801237a:	b120      	cbz	r0, 8012386 <Sscan::checkName(char const*, char const*)+0x1c>
 801237c:	b10a      	cbz	r2, 8012382 <Sscan::checkName(char const*, char const*)+0x18>
 801237e:	4290      	cmp	r0, r2
 8012380:	d0f6      	beq.n	8012370 <Sscan::checkName(char const*, char const*)+0x6>
 8012382:	2000      	movs	r0, #0
 8012384:	e006      	b.n	8012394 <Sscan::checkName(char const*, char const*)+0x2a>
 8012386:	2a3d      	cmp	r2, #61	; 0x3d
 8012388:	d104      	bne.n	8012394 <Sscan::checkName(char const*, char const*)+0x2a>
 801238a:	7860      	ldrb	r0, [r4, #1]
 801238c:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8012390:	d000      	beq.n	8012394 <Sscan::checkName(char const*, char const*)+0x2a>
 8012392:	1c60      	adds	r0, r4, #1
 8012394:	bd10      	pop	{r4, pc}

08012396 <LightSet::GetDmxStartAddress()>:
 8012396:	2001      	movs	r0, #1
 8012398:	4770      	bx	lr

0801239a <LightSet::GetDmxFootprint()>:
 801239a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801239e:	4770      	bx	lr

080123a0 <LightSet::SetDmxStartAddress(unsigned short)>:
 80123a0:	2000      	movs	r0, #0
 80123a2:	4770      	bx	lr

080123a4 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 80123a4:	2300      	movs	r3, #0
 80123a6:	2001      	movs	r0, #1
 80123a8:	7093      	strb	r3, [r2, #2]
 80123aa:	8010      	strh	r0, [r2, #0]
 80123ac:	4770      	bx	lr
	...

080123b0 <Display::PrintInfo() [clone .isra.0]>:
 80123b0:	b910      	cbnz	r0, 80123b8 <Display::PrintInfo() [clone .isra.0]+0x8>
 80123b2:	4803      	ldr	r0, [pc, #12]	; (80123c0 <Display::PrintInfo() [clone .isra.0]+0x10>)
 80123b4:	f000 bf8e 	b.w	80132d4 <puts>
 80123b8:	6803      	ldr	r3, [r0, #0]
 80123ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123bc:	4718      	bx	r3
 80123be:	bf00      	nop
 80123c0:	08017101 	stmdaeq	r1, {r0, r8, ip, sp, lr}

080123c4 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 80123c4:	b513      	push	{r0, r1, r4, lr}
 80123c6:	4604      	mov	r4, r0
 80123c8:	0a13      	lsrs	r3, r2, #8
 80123ca:	7800      	ldrb	r0, [r0, #0]
 80123cc:	f88d 1004 	strb.w	r1, [sp, #4]
 80123d0:	f88d 3005 	strb.w	r3, [sp, #5]
 80123d4:	f88d 2006 	strb.w	r2, [sp, #6]
 80123d8:	f001 ffa0 	bl	801431c <gd32_i2c_set_address(unsigned char)>
 80123dc:	6860      	ldr	r0, [r4, #4]
 80123de:	f001 ff95 	bl	801430c <gd32_i2c_set_baudrate(unsigned int)>
 80123e2:	2103      	movs	r1, #3
 80123e4:	a801      	add	r0, sp, #4
 80123e6:	f001 ff9f 	bl	8014328 <gd32_i2c_write(char const*, unsigned int)>
 80123ea:	b002      	add	sp, #8
 80123ec:	bd10      	pop	{r4, pc}

080123ee <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 80123ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123f0:	460d      	mov	r5, r1
 80123f2:	4604      	mov	r4, r0
 80123f4:	f001 ff92 	bl	801431c <gd32_i2c_set_address(unsigned char)>
 80123f8:	4628      	mov	r0, r5
 80123fa:	f001 ff87 	bl	801430c <gd32_i2c_set_baudrate(unsigned int)>
 80123fe:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012402:	2b07      	cmp	r3, #7
 8012404:	d902      	bls.n	801240c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8012406:	3c50      	subs	r4, #80	; 0x50
 8012408:	2c0f      	cmp	r4, #15
 801240a:	d809      	bhi.n	8012420 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 801240c:	2101      	movs	r1, #1
 801240e:	f10d 0007 	add.w	r0, sp, #7
 8012412:	f001 ffef 	bl	80143f4 <gd32_i2c_read(char*, unsigned int)>
 8012416:	fab0 f080 	clz	r0, r0
 801241a:	0940      	lsrs	r0, r0, #5
 801241c:	b003      	add	sp, #12
 801241e:	bd30      	pop	{r4, r5, pc}
 8012420:	2100      	movs	r1, #0
 8012422:	4608      	mov	r0, r1
 8012424:	f001 ff80 	bl	8014328 <gd32_i2c_write(char const*, unsigned int)>
 8012428:	e7f5      	b.n	8012416 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

0801242a <Display::Detect7Segment()>:
 801242a:	b538      	push	{r3, r4, r5, lr}
 801242c:	68c1      	ldr	r1, [r0, #12]
 801242e:	4604      	mov	r4, r0
 8012430:	7a00      	ldrb	r0, [r0, #8]
 8012432:	f7ff ffdc 	bl	80123ee <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8012436:	7460      	strb	r0, [r4, #17]
 8012438:	b170      	cbz	r0, 8012458 <Display::Detect7Segment()+0x2e>
 801243a:	2200      	movs	r2, #0
 801243c:	f104 0508 	add.w	r5, r4, #8
 8012440:	4611      	mov	r1, r2
 8012442:	4628      	mov	r0, r5
 8012444:	f7ff ffbe 	bl	80123c4 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8012448:	7c63      	ldrb	r3, [r4, #17]
 801244a:	b12b      	cbz	r3, 8012458 <Display::Detect7Segment()+0x2e>
 801244c:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8012450:	2112      	movs	r1, #18
 8012452:	4628      	mov	r0, r5
 8012454:	f7ff ffb6 	bl	80123c4 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8012458:	bd38      	pop	{r3, r4, r5, pc}

0801245a <Display::Detect(display::Type)>:
 801245a:	2902      	cmp	r1, #2
 801245c:	b538      	push	{r3, r4, r5, lr}
 801245e:	4604      	mov	r4, r0
 8012460:	d014      	beq.n	801248c <Display::Detect(display::Type)+0x32>
 8012462:	2904      	cmp	r1, #4
 8012464:	d01b      	beq.n	801249e <Display::Detect(display::Type)+0x44>
 8012466:	69a0      	ldr	r0, [r4, #24]
 8012468:	b168      	cbz	r0, 8012486 <Display::Detect(display::Type)+0x2c>
 801246a:	6803      	ldr	r3, [r0, #0]
 801246c:	689b      	ldr	r3, [r3, #8]
 801246e:	4798      	blx	r3
 8012470:	4603      	mov	r3, r0
 8012472:	69a0      	ldr	r0, [r4, #24]
 8012474:	b9ab      	cbnz	r3, 80124a2 <Display::Detect(display::Type)+0x48>
 8012476:	b110      	cbz	r0, 801247e <Display::Detect(display::Type)+0x24>
 8012478:	6803      	ldr	r3, [r0, #0]
 801247a:	685b      	ldr	r3, [r3, #4]
 801247c:	4798      	blx	r3
 801247e:	2300      	movs	r3, #0
 8012480:	61a3      	str	r3, [r4, #24]
 8012482:	2304      	movs	r3, #4
 8012484:	6023      	str	r3, [r4, #0]
 8012486:	2300      	movs	r3, #0
 8012488:	6163      	str	r3, [r4, #20]
 801248a:	e010      	b.n	80124ae <Display::Detect(display::Type)+0x54>
 801248c:	2018      	movs	r0, #24
 801248e:	f000 fbd9 	bl	8012c44 <operator new(unsigned int)>
 8012492:	4605      	mov	r5, r0
 8012494:	2100      	movs	r1, #0
 8012496:	f000 f8a3 	bl	80125e0 <Ssd1306::Ssd1306(TOledPanel)>
 801249a:	61a5      	str	r5, [r4, #24]
 801249c:	e7e3      	b.n	8012466 <Display::Detect(display::Type)+0xc>
 801249e:	6001      	str	r1, [r0, #0]
 80124a0:	e7e1      	b.n	8012466 <Display::Detect(display::Type)+0xc>
 80124a2:	6803      	ldr	r3, [r0, #0]
 80124a4:	68db      	ldr	r3, [r3, #12]
 80124a6:	4798      	blx	r3
 80124a8:	69a3      	ldr	r3, [r4, #24]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d0eb      	beq.n	8012486 <Display::Detect(display::Type)+0x2c>
 80124ae:	bd38      	pop	{r3, r4, r5, pc}

080124b0 <Display::Display()>:
 80124b0:	2304      	movs	r3, #4
 80124b2:	b510      	push	{r4, lr}
 80124b4:	6003      	str	r3, [r0, #0]
 80124b6:	4b0f      	ldr	r3, [pc, #60]	; (80124f4 <Display::Display()+0x44>)
 80124b8:	4604      	mov	r4, r0
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	4a0e      	ldr	r2, [pc, #56]	; (80124f8 <Display::Display()+0x48>)
 80124be:	6043      	str	r3, [r0, #4]
 80124c0:	2321      	movs	r3, #33	; 0x21
 80124c2:	7203      	strb	r3, [r0, #8]
 80124c4:	4b0d      	ldr	r3, [pc, #52]	; (80124fc <Display::Display()+0x4c>)
 80124c6:	2102      	movs	r1, #2
 80124c8:	60c3      	str	r3, [r0, #12]
 80124ca:	2300      	movs	r3, #0
 80124cc:	e9c0 2305 	strd	r2, r3, [r0, #20]
 80124d0:	8203      	strh	r3, [r0, #16]
 80124d2:	4b0b      	ldr	r3, [pc, #44]	; (8012500 <Display::Display()+0x50>)
 80124d4:	6018      	str	r0, [r3, #0]
 80124d6:	f7ff ffc0 	bl	801245a <Display::Detect(display::Type)>
 80124da:	4620      	mov	r0, r4
 80124dc:	f7ff ffa5 	bl	801242a <Display::Detect7Segment()>
 80124e0:	69a3      	ldr	r3, [r4, #24]
 80124e2:	b10b      	cbz	r3, 80124e8 <Display::Display()+0x38>
 80124e4:	f000 f80e 	bl	8012504 <display::timeout::gpio_init()>
 80124e8:	69a0      	ldr	r0, [r4, #24]
 80124ea:	f7ff ff61 	bl	80123b0 <Display::PrintInfo() [clone .isra.0]>
 80124ee:	4620      	mov	r0, r4
 80124f0:	bd10      	pop	{r4, pc}
 80124f2:	bf00      	nop
 80124f4:	2000af0c 	andcs	sl, r0, ip, lsl #30
 80124f8:	000493e0 	andeq	r9, r4, r0, ror #7
 80124fc:	00061a80 	andeq	r1, r6, r0, lsl #21
 8012500:	2000ae04 	andcs	sl, r0, r4, lsl #28

08012504 <display::timeout::gpio_init()>:
 8012504:	4770      	bx	lr

08012506 <display::timeout::gpio_renew()>:
 8012506:	2000      	movs	r0, #0
 8012508:	4770      	bx	lr

0801250a <Ssd1306::~Ssd1306()>:
 801250a:	4770      	bx	lr

0801250c <Ssd1306::SetCursor(unsigned int)>:
 801250c:	4770      	bx	lr
	...

08012510 <Ssd1306::PrintInfo()>:
 8012510:	b410      	push	{r4}
 8012512:	4906      	ldr	r1, [pc, #24]	; (801252c <Ssd1306::PrintInfo()+0x1c>)
 8012514:	7c44      	ldrb	r4, [r0, #17]
 8012516:	7903      	ldrb	r3, [r0, #4]
 8012518:	7942      	ldrb	r2, [r0, #5]
 801251a:	4805      	ldr	r0, [pc, #20]	; (8012530 <Ssd1306::PrintInfo()+0x20>)
 801251c:	2c00      	cmp	r4, #0
 801251e:	bf08      	it	eq
 8012520:	4601      	moveq	r1, r0
 8012522:	4804      	ldr	r0, [pc, #16]	; (8012534 <Ssd1306::PrintInfo()+0x24>)
 8012524:	bc10      	pop	{r4}
 8012526:	f000 be85 	b.w	8013234 <printf>
 801252a:	bf00      	nop
 801252c:	08017112 	stmdaeq	r1, {r1, r4, r8, ip, sp, lr}
 8012530:	08017119 	stmdaeq	r1, {r0, r3, r4, r8, ip, sp, lr}
 8012534:	08017121 	stmdaeq	r1, {r0, r5, r8, ip, sp, lr}

08012538 <Ssd1306::~Ssd1306()>:
 8012538:	b510      	push	{r4, lr}
 801253a:	4604      	mov	r4, r0
 801253c:	f000 fb7e 	bl	8012c3c <operator delete(void*)>
 8012540:	4620      	mov	r0, r4
 8012542:	bd10      	pop	{r4, pc}

08012544 <HAL_I2C::Setup()>:
 8012544:	b510      	push	{r4, lr}
 8012546:	4604      	mov	r4, r0
 8012548:	7800      	ldrb	r0, [r0, #0]
 801254a:	f001 fee7 	bl	801431c <gd32_i2c_set_address(unsigned char)>
 801254e:	6860      	ldr	r0, [r4, #4]
 8012550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012554:	f001 beda 	b.w	801430c <gd32_i2c_set_baudrate(unsigned int)>

08012558 <Ssd1306::PutChar(int)>:
 8012558:	b510      	push	{r4, lr}
 801255a:	f1a1 0420 	sub.w	r4, r1, #32
 801255e:	2c5f      	cmp	r4, #95	; 0x5f
 8012560:	bf88      	it	hi
 8012562:	2400      	movhi	r4, #0
 8012564:	3008      	adds	r0, #8
 8012566:	f7ff ffed 	bl	8012544 <HAL_I2C::Setup()>
 801256a:	4804      	ldr	r0, [pc, #16]	; (801257c <Ssd1306::PutChar(int)+0x24>)
 801256c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8012570:	4420      	add	r0, r4
 8012572:	2107      	movs	r1, #7
 8012574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012578:	f001 bed6 	b.w	8014328 <gd32_i2c_write(char const*, unsigned int)>
 801257c:	08017134 	stmdaeq	r1, {r2, r4, r5, r8, ip, sp, lr}

08012580 <Ssd1306::PutString(char const*)>:
 8012580:	b538      	push	{r3, r4, r5, lr}
 8012582:	4605      	mov	r5, r0
 8012584:	1e4c      	subs	r4, r1, #1
 8012586:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801258a:	b119      	cbz	r1, 8012594 <Ssd1306::PutString(char const*)+0x14>
 801258c:	4628      	mov	r0, r5
 801258e:	f7ff ffe3 	bl	8012558 <Ssd1306::PutChar(int)>
 8012592:	e7f8      	b.n	8012586 <Ssd1306::PutString(char const*)+0x6>
 8012594:	bd38      	pop	{r3, r4, r5, pc}

08012596 <Ssd1306::Text(char const*, unsigned int)>:
 8012596:	b570      	push	{r4, r5, r6, lr}
 8012598:	7903      	ldrb	r3, [r0, #4]
 801259a:	4605      	mov	r5, r0
 801259c:	460c      	mov	r4, r1
 801259e:	4293      	cmp	r3, r2
 80125a0:	bf94      	ite	ls
 80125a2:	18ce      	addls	r6, r1, r3
 80125a4:	188e      	addhi	r6, r1, r2
 80125a6:	42b4      	cmp	r4, r6
 80125a8:	d005      	beq.n	80125b6 <Ssd1306::Text(char const*, unsigned int)+0x20>
 80125aa:	4628      	mov	r0, r5
 80125ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125b0:	f7ff ffd2 	bl	8012558 <Ssd1306::PutChar(int)>
 80125b4:	e7f7      	b.n	80125a6 <Ssd1306::Text(char const*, unsigned int)+0x10>
 80125b6:	bd70      	pop	{r4, r5, r6, pc}

080125b8 <Ssd1306::InitMembers()>:
 80125b8:	7c03      	ldrb	r3, [r0, #16]
 80125ba:	b12b      	cbz	r3, 80125c8 <Ssd1306::InitMembers()+0x10>
 80125bc:	3b01      	subs	r3, #1
 80125be:	2b01      	cmp	r3, #1
 80125c0:	d908      	bls.n	80125d4 <Ssd1306::InitMembers()+0x1c>
 80125c2:	f640 0315 	movw	r3, #2069	; 0x815
 80125c6:	e007      	b.n	80125d8 <Ssd1306::InitMembers()+0x20>
 80125c8:	f640 0315 	movw	r3, #2069	; 0x815
 80125cc:	8083      	strh	r3, [r0, #4]
 80125ce:	2308      	movs	r3, #8
 80125d0:	6143      	str	r3, [r0, #20]
 80125d2:	4770      	bx	lr
 80125d4:	f240 4315 	movw	r3, #1045	; 0x415
 80125d8:	8083      	strh	r3, [r0, #4]
 80125da:	2304      	movs	r3, #4
 80125dc:	e7f8      	b.n	80125d0 <Ssd1306::InitMembers()+0x18>
	...

080125e0 <Ssd1306::Ssd1306(TOledPanel)>:
 80125e0:	4a08      	ldr	r2, [pc, #32]	; (8012604 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 80125e2:	b508      	push	{r3, lr}
 80125e4:	6002      	str	r2, [r0, #0]
 80125e6:	227f      	movs	r2, #127	; 0x7f
 80125e8:	80c2      	strh	r2, [r0, #6]
 80125ea:	223c      	movs	r2, #60	; 0x3c
 80125ec:	7202      	strb	r2, [r0, #8]
 80125ee:	4a06      	ldr	r2, [pc, #24]	; (8012608 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 80125f0:	7401      	strb	r1, [r0, #16]
 80125f2:	60c2      	str	r2, [r0, #12]
 80125f4:	2200      	movs	r2, #0
 80125f6:	7442      	strb	r2, [r0, #17]
 80125f8:	4a04      	ldr	r2, [pc, #16]	; (801260c <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 80125fa:	6010      	str	r0, [r2, #0]
 80125fc:	f7ff ffdc 	bl	80125b8 <Ssd1306::InitMembers()>
 8012600:	bd08      	pop	{r3, pc}
 8012602:	bf00      	nop
 8012604:	0801740c 	stmdaeq	r1, {r2, r3, sl, ip, sp, lr}
 8012608:	00061a80 	andeq	r1, r6, r0, lsl #21
 801260c:	2000ae90 	mulcs	r0, r0, lr

08012610 <Ssd1306::SendCommand(unsigned char)>:
 8012610:	2300      	movs	r3, #0
 8012612:	b507      	push	{r0, r1, r2, lr}
 8012614:	3008      	adds	r0, #8
 8012616:	f88d 3004 	strb.w	r3, [sp, #4]
 801261a:	f88d 1005 	strb.w	r1, [sp, #5]
 801261e:	f7ff ff91 	bl	8012544 <HAL_I2C::Setup()>
 8012622:	2102      	movs	r1, #2
 8012624:	a801      	add	r0, sp, #4
 8012626:	f001 fe7f 	bl	8014328 <gd32_i2c_write(char const*, unsigned int)>
 801262a:	b003      	add	sp, #12
 801262c:	f85d fb04 	ldr.w	pc, [sp], #4

08012630 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8012630:	2914      	cmp	r1, #20
 8012632:	b570      	push	{r4, r5, r6, lr}
 8012634:	4605      	mov	r5, r0
 8012636:	4616      	mov	r6, r2
 8012638:	d81c      	bhi.n	8012674 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 801263a:	7943      	ldrb	r3, [r0, #5]
 801263c:	4293      	cmp	r3, r2
 801263e:	d919      	bls.n	8012674 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8012640:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012644:	7c43      	ldrb	r3, [r0, #17]
 8012646:	004c      	lsls	r4, r1, #1
 8012648:	b2e4      	uxtb	r4, r4
 801264a:	b10b      	cbz	r3, 8012650 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 801264c:	3404      	adds	r4, #4
 801264e:	b2e4      	uxtb	r4, r4
 8012650:	4628      	mov	r0, r5
 8012652:	f004 010e 	and.w	r1, r4, #14
 8012656:	f7ff ffdb 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 801265a:	0921      	lsrs	r1, r4, #4
 801265c:	4628      	mov	r0, r5
 801265e:	f041 0110 	orr.w	r1, r1, #16
 8012662:	f7ff ffd5 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 8012666:	4628      	mov	r0, r5
 8012668:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 801266c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012670:	f7ff bfce 	b.w	8012610 <Ssd1306::SendCommand(unsigned char)>
 8012674:	bd70      	pop	{r4, r5, r6, pc}

08012676 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8012676:	b570      	push	{r4, r5, r6, lr}
 8012678:	4604      	mov	r4, r0
 801267a:	4615      	mov	r5, r2
 801267c:	461e      	mov	r6, r3
 801267e:	b171      	cbz	r1, 801269e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8012680:	7943      	ldrb	r3, [r0, #5]
 8012682:	428b      	cmp	r3, r1
 8012684:	d30b      	bcc.n	801269e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8012686:	3901      	subs	r1, #1
 8012688:	b2ca      	uxtb	r2, r1
 801268a:	2100      	movs	r1, #0
 801268c:	f7ff ffd0 	bl	8012630 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8012690:	4632      	mov	r2, r6
 8012692:	4629      	mov	r1, r5
 8012694:	4620      	mov	r0, r4
 8012696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801269a:	f7ff bf7c 	b.w	8012596 <Ssd1306::Text(char const*, unsigned int)>
 801269e:	bd70      	pop	{r4, r5, r6, pc}

080126a0 <Ssd1306::ClearLine(unsigned char)>:
 80126a0:	b538      	push	{r3, r4, r5, lr}
 80126a2:	4605      	mov	r5, r0
 80126a4:	b1b9      	cbz	r1, 80126d6 <Ssd1306::ClearLine(unsigned char)+0x36>
 80126a6:	7943      	ldrb	r3, [r0, #5]
 80126a8:	428b      	cmp	r3, r1
 80126aa:	d314      	bcc.n	80126d6 <Ssd1306::ClearLine(unsigned char)+0x36>
 80126ac:	3901      	subs	r1, #1
 80126ae:	b2cc      	uxtb	r4, r1
 80126b0:	4622      	mov	r2, r4
 80126b2:	2100      	movs	r1, #0
 80126b4:	f7ff ffbc 	bl	8012630 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80126b8:	f105 0008 	add.w	r0, r5, #8
 80126bc:	f7ff ff42 	bl	8012544 <HAL_I2C::Setup()>
 80126c0:	2181      	movs	r1, #129	; 0x81
 80126c2:	4805      	ldr	r0, [pc, #20]	; (80126d8 <Ssd1306::ClearLine(unsigned char)+0x38>)
 80126c4:	f001 fe30 	bl	8014328 <gd32_i2c_write(char const*, unsigned int)>
 80126c8:	4622      	mov	r2, r4
 80126ca:	4628      	mov	r0, r5
 80126cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126d0:	2100      	movs	r1, #0
 80126d2:	f7ff bfad 	b.w	8012630 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80126d6:	bd38      	pop	{r3, r4, r5, pc}
 80126d8:	2000ae08 	andcs	sl, r0, r8, lsl #28

080126dc <Ssd1306::SetSleep(bool)>:
 80126dc:	b111      	cbz	r1, 80126e4 <Ssd1306::SetSleep(bool)+0x8>
 80126de:	21ae      	movs	r1, #174	; 0xae
 80126e0:	f7ff bf96 	b.w	8012610 <Ssd1306::SendCommand(unsigned char)>
 80126e4:	21af      	movs	r1, #175	; 0xaf
 80126e6:	e7fb      	b.n	80126e0 <Ssd1306::SetSleep(bool)+0x4>

080126e8 <Ssd1306::SetContrast(unsigned char)>:
 80126e8:	b538      	push	{r3, r4, r5, lr}
 80126ea:	4604      	mov	r4, r0
 80126ec:	460d      	mov	r5, r1
 80126ee:	7181      	strb	r1, [r0, #6]
 80126f0:	2181      	movs	r1, #129	; 0x81
 80126f2:	f7ff ff8d 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 80126f6:	4629      	mov	r1, r5
 80126f8:	4620      	mov	r0, r4
 80126fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126fe:	f7ff bf87 	b.w	8012610 <Ssd1306::SendCommand(unsigned char)>

08012702 <Ssd1306::SetFlipVertically(bool)>:
 8012702:	b510      	push	{r4, lr}
 8012704:	4604      	mov	r4, r0
 8012706:	71c1      	strb	r1, [r0, #7]
 8012708:	b141      	cbz	r1, 801271c <Ssd1306::SetFlipVertically(bool)+0x1a>
 801270a:	21c0      	movs	r1, #192	; 0xc0
 801270c:	f7ff ff80 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 8012710:	21a0      	movs	r1, #160	; 0xa0
 8012712:	4620      	mov	r0, r4
 8012714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012718:	f7ff bf7a 	b.w	8012610 <Ssd1306::SendCommand(unsigned char)>
 801271c:	21c8      	movs	r1, #200	; 0xc8
 801271e:	f7ff ff77 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 8012722:	21a1      	movs	r1, #161	; 0xa1
 8012724:	e7f5      	b.n	8012712 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08012728 <Ssd1306::CheckSH1106()>:
 8012728:	b570      	push	{r4, r5, r6, lr}
 801272a:	4604      	mov	r4, r0
 801272c:	b086      	sub	sp, #24
 801272e:	2100      	movs	r1, #0
 8012730:	f7ff ff6e 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 8012734:	2190      	movs	r1, #144	; 0x90
 8012736:	4620      	mov	r0, r4
 8012738:	f7ff ff6a 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 801273c:	21b0      	movs	r1, #176	; 0xb0
 801273e:	4620      	mov	r0, r4
 8012740:	f7ff ff66 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 8012744:	4b22      	ldr	r3, [pc, #136]	; (80127d0 <Ssd1306::CheckSH1106()+0xa8>)
 8012746:	f104 0608 	add.w	r6, r4, #8
 801274a:	6818      	ldr	r0, [r3, #0]
 801274c:	791b      	ldrb	r3, [r3, #4]
 801274e:	ad02      	add	r5, sp, #8
 8012750:	9002      	str	r0, [sp, #8]
 8012752:	4630      	mov	r0, r6
 8012754:	712b      	strb	r3, [r5, #4]
 8012756:	f7ff fef5 	bl	8012544 <HAL_I2C::Setup()>
 801275a:	2105      	movs	r1, #5
 801275c:	4628      	mov	r0, r5
 801275e:	f001 fde3 	bl	8014328 <gd32_i2c_write(char const*, unsigned int)>
 8012762:	2100      	movs	r1, #0
 8012764:	4620      	mov	r0, r4
 8012766:	f7ff ff53 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 801276a:	2190      	movs	r1, #144	; 0x90
 801276c:	4620      	mov	r0, r4
 801276e:	f7ff ff4f 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 8012772:	21b0      	movs	r1, #176	; 0xb0
 8012774:	4620      	mov	r0, r4
 8012776:	f7ff ff4b 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 801277a:	2300      	movs	r3, #0
 801277c:	9304      	str	r3, [sp, #16]
 801277e:	f88d 3014 	strb.w	r3, [sp, #20]
 8012782:	2340      	movs	r3, #64	; 0x40
 8012784:	4630      	mov	r0, r6
 8012786:	f88d 3007 	strb.w	r3, [sp, #7]
 801278a:	f7ff fedb 	bl	8012544 <HAL_I2C::Setup()>
 801278e:	2101      	movs	r1, #1
 8012790:	f10d 0007 	add.w	r0, sp, #7
 8012794:	f001 fdc8 	bl	8014328 <gd32_i2c_write(char const*, unsigned int)>
 8012798:	4630      	mov	r0, r6
 801279a:	f7ff fed3 	bl	8012544 <HAL_I2C::Setup()>
 801279e:	2105      	movs	r1, #5
 80127a0:	a804      	add	r0, sp, #16
 80127a2:	f001 fe27 	bl	80143f4 <gd32_i2c_read(char*, unsigned int)>
 80127a6:	2201      	movs	r2, #1
 80127a8:	5cab      	ldrb	r3, [r5, r2]
 80127aa:	a904      	add	r1, sp, #16
 80127ac:	3201      	adds	r2, #1
 80127ae:	4411      	add	r1, r2
 80127b0:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80127b4:	428b      	cmp	r3, r1
 80127b6:	d006      	beq.n	80127c6 <Ssd1306::CheckSH1106()+0x9e>
 80127b8:	1a5b      	subs	r3, r3, r1
 80127ba:	fab3 f383 	clz	r3, r3
 80127be:	095b      	lsrs	r3, r3, #5
 80127c0:	7463      	strb	r3, [r4, #17]
 80127c2:	b006      	add	sp, #24
 80127c4:	bd70      	pop	{r4, r5, r6, pc}
 80127c6:	2a05      	cmp	r2, #5
 80127c8:	d1ee      	bne.n	80127a8 <Ssd1306::CheckSH1106()+0x80>
 80127ca:	2300      	movs	r3, #0
 80127cc:	e7f5      	b.n	80127ba <Ssd1306::CheckSH1106()+0x92>
 80127ce:	bf00      	nop
 80127d0:	0801712d 	stmdaeq	r1, {r0, r2, r3, r5, r8, ip, sp, lr}

080127d4 <Ssd1306::Cls()>:
 80127d4:	7c43      	ldrb	r3, [r0, #17]
 80127d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127da:	2b00      	cmp	r3, #0
 80127dc:	bf0c      	ite	eq
 80127de:	2500      	moveq	r5, #0
 80127e0:	2504      	movne	r5, #4
 80127e2:	4604      	mov	r4, r0
 80127e4:	2600      	movs	r6, #0
 80127e6:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 80127ea:	f045 0810 	orr.w	r8, r5, #16
 80127ee:	b2ff      	uxtb	r7, r7
 80127f0:	6963      	ldr	r3, [r4, #20]
 80127f2:	4629      	mov	r1, r5
 80127f4:	42b3      	cmp	r3, r6
 80127f6:	4620      	mov	r0, r4
 80127f8:	d91b      	bls.n	8012832 <Ssd1306::Cls()+0x5e>
 80127fa:	f7ff ff09 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 80127fe:	4641      	mov	r1, r8
 8012800:	4620      	mov	r0, r4
 8012802:	f7ff ff05 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 8012806:	f066 014f 	orn	r1, r6, #79	; 0x4f
 801280a:	4620      	mov	r0, r4
 801280c:	b2c9      	uxtb	r1, r1
 801280e:	f7ff feff 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 8012812:	7c23      	ldrb	r3, [r4, #16]
 8012814:	b123      	cbz	r3, 8012820 <Ssd1306::Cls()+0x4c>
 8012816:	3b01      	subs	r3, #1
 8012818:	2b01      	cmp	r3, #1
 801281a:	d901      	bls.n	8012820 <Ssd1306::Cls()+0x4c>
 801281c:	3601      	adds	r6, #1
 801281e:	e7e7      	b.n	80127f0 <Ssd1306::Cls()+0x1c>
 8012820:	f104 0008 	add.w	r0, r4, #8
 8012824:	f7ff fe8e 	bl	8012544 <HAL_I2C::Setup()>
 8012828:	4639      	mov	r1, r7
 801282a:	4808      	ldr	r0, [pc, #32]	; (801284c <Ssd1306::Cls()+0x78>)
 801282c:	f001 fd7c 	bl	8014328 <gd32_i2c_write(char const*, unsigned int)>
 8012830:	e7f4      	b.n	801281c <Ssd1306::Cls()+0x48>
 8012832:	f7ff feed 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 8012836:	4641      	mov	r1, r8
 8012838:	4620      	mov	r0, r4
 801283a:	f7ff fee9 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 801283e:	4620      	mov	r0, r4
 8012840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012844:	21b0      	movs	r1, #176	; 0xb0
 8012846:	f7ff bee3 	b.w	8012610 <Ssd1306::SendCommand(unsigned char)>
 801284a:	bf00      	nop
 801284c:	2000ae08 	andcs	sl, r0, r8, lsl #28

08012850 <Ssd1306::Start()>:
 8012850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012852:	7a04      	ldrb	r4, [r0, #8]
 8012854:	68c6      	ldr	r6, [r0, #12]
 8012856:	4605      	mov	r5, r0
 8012858:	4620      	mov	r0, r4
 801285a:	f001 fd5f 	bl	801431c <gd32_i2c_set_address(unsigned char)>
 801285e:	4630      	mov	r0, r6
 8012860:	f001 fd54 	bl	801430c <gd32_i2c_set_baudrate(unsigned int)>
 8012864:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012868:	2b07      	cmp	r3, #7
 801286a:	d902      	bls.n	8012872 <Ssd1306::Start()+0x22>
 801286c:	3c50      	subs	r4, #80	; 0x50
 801286e:	2c0f      	cmp	r4, #15
 8012870:	d80f      	bhi.n	8012892 <Ssd1306::Start()+0x42>
 8012872:	2101      	movs	r1, #1
 8012874:	f10d 0007 	add.w	r0, sp, #7
 8012878:	f001 fdbc 	bl	80143f4 <gd32_i2c_read(char*, unsigned int)>
 801287c:	fab0 f480 	clz	r4, r0
 8012880:	0964      	lsrs	r4, r4, #5
 8012882:	b35c      	cbz	r4, 80128dc <Ssd1306::Start()+0x8c>
 8012884:	7c2e      	ldrb	r6, [r5, #16]
 8012886:	b14e      	cbz	r6, 801289c <Ssd1306::Start()+0x4c>
 8012888:	3e01      	subs	r6, #1
 801288a:	2e01      	cmp	r6, #1
 801288c:	d929      	bls.n	80128e2 <Ssd1306::Start()+0x92>
 801288e:	2400      	movs	r4, #0
 8012890:	e024      	b.n	80128dc <Ssd1306::Start()+0x8c>
 8012892:	2100      	movs	r1, #0
 8012894:	4608      	mov	r0, r1
 8012896:	f001 fd47 	bl	8014328 <gd32_i2c_write(char const*, unsigned int)>
 801289a:	e7ef      	b.n	801287c <Ssd1306::Start()+0x2c>
 801289c:	4f16      	ldr	r7, [pc, #88]	; (80128f8 <Ssd1306::Start()+0xa8>)
 801289e:	4628      	mov	r0, r5
 80128a0:	f817 1b01 	ldrb.w	r1, [r7], #1
 80128a4:	3601      	adds	r6, #1
 80128a6:	f7ff feb3 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 80128aa:	2e18      	cmp	r6, #24
 80128ac:	d1f7      	bne.n	801289e <Ssd1306::Start()+0x4e>
 80128ae:	2300      	movs	r3, #0
 80128b0:	4a12      	ldr	r2, [pc, #72]	; (80128fc <Ssd1306::Start()+0xac>)
 80128b2:	4618      	mov	r0, r3
 80128b4:	4611      	mov	r1, r2
 80128b6:	3301      	adds	r3, #1
 80128b8:	2b86      	cmp	r3, #134	; 0x86
 80128ba:	f802 0b01 	strb.w	r0, [r2], #1
 80128be:	d1fa      	bne.n	80128b6 <Ssd1306::Start()+0x66>
 80128c0:	2340      	movs	r3, #64	; 0x40
 80128c2:	4628      	mov	r0, r5
 80128c4:	700b      	strb	r3, [r1, #0]
 80128c6:	f7ff ff2f 	bl	8012728 <Ssd1306::CheckSH1106()>
 80128ca:	4628      	mov	r0, r5
 80128cc:	f7ff ff82 	bl	80127d4 <Ssd1306::Cls()>
 80128d0:	21af      	movs	r1, #175	; 0xaf
 80128d2:	4628      	mov	r0, r5
 80128d4:	f7ff fe9c 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 80128d8:	2301      	movs	r3, #1
 80128da:	71eb      	strb	r3, [r5, #7]
 80128dc:	4620      	mov	r0, r4
 80128de:	b003      	add	sp, #12
 80128e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128e2:	2600      	movs	r6, #0
 80128e4:	4f06      	ldr	r7, [pc, #24]	; (8012900 <Ssd1306::Start()+0xb0>)
 80128e6:	4628      	mov	r0, r5
 80128e8:	f817 1b01 	ldrb.w	r1, [r7], #1
 80128ec:	3601      	adds	r6, #1
 80128ee:	f7ff fe8f 	bl	8012610 <Ssd1306::SendCommand(unsigned char)>
 80128f2:	2e18      	cmp	r6, #24
 80128f4:	d1f7      	bne.n	80128e6 <Ssd1306::Start()+0x96>
 80128f6:	e7da      	b.n	80128ae <Ssd1306::Start()+0x5e>
 80128f8:	080173ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, ip, sp, lr}
 80128fc:	2000ae08 	andcs	sl, r0, r8, lsl #28
 8012900:	080173d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, ip, sp, lr}

08012904 <console_putc>:
 8012904:	f000 bde8 	b.w	80134d8 <uart0_putc>

08012908 <console_puts>:
 8012908:	f000 be06 	b.w	8013518 <uart0_puts>

0801290c <console_set_fg_color>:
 801290c:	2807      	cmp	r0, #7
 801290e:	d810      	bhi.n	8012932 <console_set_fg_color+0x26>
 8012910:	e8df f000 	tbb	[pc, r0]
 8012914:	0b090704 	bleq	825452c <__exidx_end+0x23cfec>
 8012918:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 80128e4 <Ssd1306::Start()+0x94>
 801291c:	4806      	ldr	r0, [pc, #24]	; (8012938 <console_set_fg_color+0x2c>)
 801291e:	f000 bdfb 	b.w	8013518 <uart0_puts>
 8012922:	4806      	ldr	r0, [pc, #24]	; (801293c <console_set_fg_color+0x30>)
 8012924:	e7fb      	b.n	801291e <console_set_fg_color+0x12>
 8012926:	4806      	ldr	r0, [pc, #24]	; (8012940 <console_set_fg_color+0x34>)
 8012928:	e7f9      	b.n	801291e <console_set_fg_color+0x12>
 801292a:	4806      	ldr	r0, [pc, #24]	; (8012944 <console_set_fg_color+0x38>)
 801292c:	e7f7      	b.n	801291e <console_set_fg_color+0x12>
 801292e:	4806      	ldr	r0, [pc, #24]	; (8012948 <console_set_fg_color+0x3c>)
 8012930:	e7f5      	b.n	801291e <console_set_fg_color+0x12>
 8012932:	4806      	ldr	r0, [pc, #24]	; (801294c <console_set_fg_color+0x40>)
 8012934:	e7f3      	b.n	801291e <console_set_fg_color+0x12>
 8012936:	bf00      	nop
 8012938:	0801744a 	stmdaeq	r1, {r1, r3, r6, sl, ip, sp, lr}
 801293c:	08017450 	stmdaeq	r1, {r4, r6, sl, ip, sp, lr}
 8012940:	08017456 	stmdaeq	r1, {r1, r2, r4, r6, sl, ip, sp, lr}
 8012944:	0801745c 	stmdaeq	r1, {r2, r3, r4, r6, sl, ip, sp, lr}
 8012948:	08015282 	stmdaeq	r1, {r1, r7, r9, ip, lr}
 801294c:	08017462 	stmdaeq	r1, {r1, r5, r6, sl, ip, sp, lr}

08012950 <console_error>:
 8012950:	b510      	push	{r4, lr}
 8012952:	4604      	mov	r4, r0
 8012954:	4805      	ldr	r0, [pc, #20]	; (801296c <console_error+0x1c>)
 8012956:	f000 fddf 	bl	8013518 <uart0_puts>
 801295a:	4620      	mov	r0, r4
 801295c:	f000 fddc 	bl	8013518 <uart0_puts>
 8012960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012964:	4802      	ldr	r0, [pc, #8]	; (8012970 <console_error+0x20>)
 8012966:	f000 bdd7 	b.w	8013518 <uart0_puts>
 801296a:	bf00      	nop
 801296c:	08017450 	stmdaeq	r1, {r4, r6, sl, ip, sp, lr}
 8012970:	08015282 	stmdaeq	r1, {r1, r7, r9, ip, lr}

08012974 <console_status>:
 8012974:	b510      	push	{r4, lr}
 8012976:	460c      	mov	r4, r1
 8012978:	b280      	uxth	r0, r0
 801297a:	f7ff ffc7 	bl	801290c <console_set_fg_color>
 801297e:	4807      	ldr	r0, [pc, #28]	; (801299c <console_status+0x28>)
 8012980:	f000 fdca 	bl	8013518 <uart0_puts>
 8012984:	4620      	mov	r0, r4
 8012986:	f000 fdc7 	bl	8013518 <uart0_puts>
 801298a:	200a      	movs	r0, #10
 801298c:	f000 fda4 	bl	80134d8 <uart0_putc>
 8012990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012994:	4802      	ldr	r0, [pc, #8]	; (80129a0 <console_status+0x2c>)
 8012996:	f000 bdbf 	b.w	8013518 <uart0_puts>
 801299a:	bf00      	nop
 801299c:	08017444 	stmdaeq	r1, {r2, r6, sl, ip, sp, lr}
 80129a0:	08015282 	stmdaeq	r1, {r1, r7, r9, ip, lr}

080129a4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 80129a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129a8:	4617      	mov	r7, r2
 80129aa:	461e      	mov	r6, r3
 80129ac:	4d14      	ldr	r5, [pc, #80]	; (8012a00 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 80129ae:	4b15      	ldr	r3, [pc, #84]	; (8012a04 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 80129b0:	b086      	sub	sp, #24
 80129b2:	6018      	str	r0, [r3, #0]
 80129b4:	4604      	mov	r4, r0
 80129b6:	f105 0803 	add.w	r8, r5, #3
 80129ba:	2203      	movs	r2, #3
 80129bc:	4628      	mov	r0, r5
 80129be:	f000 fa00 	bl	8012dc2 <memmove>
 80129c2:	4639      	mov	r1, r7
 80129c4:	220b      	movs	r2, #11
 80129c6:	4640      	mov	r0, r8
 80129c8:	f000 f9fb 	bl	8012dc2 <memmove>
 80129cc:	f105 030e 	add.w	r3, r5, #14
 80129d0:	4631      	mov	r1, r6
 80129d2:	2208      	movs	r2, #8
 80129d4:	4618      	mov	r0, r3
 80129d6:	f000 f9f4 	bl	8012dc2 <memmove>
 80129da:	2308      	movs	r3, #8
 80129dc:	e9cd 8303 	strd	r8, r3, [sp, #12]
 80129e0:	230b      	movs	r3, #11
 80129e2:	9302      	str	r3, [sp, #8]
 80129e4:	4b08      	ldr	r3, [pc, #32]	; (8012a08 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 80129e6:	9005      	str	r0, [sp, #20]
 80129e8:	e9cd 5300 	strd	r5, r3, [sp]
 80129ec:	213f      	movs	r1, #63	; 0x3f
 80129ee:	2303      	movs	r3, #3
 80129f0:	4a06      	ldr	r2, [pc, #24]	; (8012a0c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 80129f2:	4807      	ldr	r0, [pc, #28]	; (8012a10 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 80129f4:	f000 fc46 	bl	8013284 <snprintf>
 80129f8:	4620      	mov	r0, r4
 80129fa:	b006      	add	sp, #24
 80129fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a00:	2000ae94 	mulcs	r0, r4, lr
 8012a04:	2000aeec 	andcs	sl, r0, ip, ror #29
 8012a08:	080153e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, r9, ip, lr}
 8012a0c:	08017468 	stmdaeq	r1, {r3, r5, r6, sl, ip, sp, lr}
 8012a10:	2000aeaa 	andcs	sl, r0, sl, lsr #29

08012a14 <FirmwareVersion::Print(char const*)>:
 8012a14:	b510      	push	{r4, lr}
 8012a16:	460c      	mov	r4, r1
 8012a18:	4804      	ldr	r0, [pc, #16]	; (8012a2c <FirmwareVersion::Print(char const*)+0x18>)
 8012a1a:	f000 fc5b 	bl	80132d4 <puts>
 8012a1e:	b124      	cbz	r4, 8012a2a <FirmwareVersion::Print(char const*)+0x16>
 8012a20:	4620      	mov	r0, r4
 8012a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a26:	f000 bc55 	b.w	80132d4 <puts>
 8012a2a:	bd10      	pop	{r4, pc}
 8012a2c:	2000aeaa 	andcs	sl, r0, sl, lsr #29

08012a30 <LedBlink::LedBlink()>:
 8012a30:	b538      	push	{r3, r4, r5, lr}
 8012a32:	2205      	movs	r2, #5
 8012a34:	2300      	movs	r3, #0
 8012a36:	e9c0 3200 	strd	r3, r2, [r0]
 8012a3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8012a3e:	6083      	str	r3, [r0, #8]
 8012a40:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8012a44:	6143      	str	r3, [r0, #20]
 8012a46:	4b09      	ldr	r3, [pc, #36]	; (8012a6c <LedBlink::LedBlink()+0x3c>)
 8012a48:	4d09      	ldr	r5, [pc, #36]	; (8012a70 <LedBlink::LedBlink()+0x40>)
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	6018      	str	r0, [r3, #0]
 8012a4e:	f240 6004 	movw	r0, #1540	; 0x604
 8012a52:	f000 ffe1 	bl	8013a18 <rcu_periph_clock_enable>
 8012a56:	4628      	mov	r0, r5
 8012a58:	2301      	movs	r3, #1
 8012a5a:	2203      	movs	r2, #3
 8012a5c:	2110      	movs	r1, #16
 8012a5e:	f000 ff43 	bl	80138e8 <gpio_init>
 8012a62:	2301      	movs	r3, #1
 8012a64:	4620      	mov	r0, r4
 8012a66:	616b      	str	r3, [r5, #20]
 8012a68:	bd38      	pop	{r3, r4, r5, pc}
 8012a6a:	bf00      	nop
 8012a6c:	2000aef0 	strdcs	sl, [r0], -r0
 8012a70:	40011000 	andmi	r1, r1, r0

08012a74 <LedBlink::SetMode(ledblink::Mode)>:
 8012a74:	6843      	ldr	r3, [r0, #4]
 8012a76:	428b      	cmp	r3, r1
 8012a78:	d02f      	beq.n	8012ada <LedBlink::SetMode(ledblink::Mode)+0x66>
 8012a7a:	6041      	str	r1, [r0, #4]
 8012a7c:	2904      	cmp	r1, #4
 8012a7e:	d822      	bhi.n	8012ac6 <LedBlink::SetMode(ledblink::Mode)+0x52>
 8012a80:	e8df f001 	tbb	[pc, r1]
 8012a84:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8012a88:	23ff001d 	mvnscs	r0, #29
 8012a8c:	6003      	str	r3, [r0, #0]
 8012a8e:	2300      	movs	r3, #0
 8012a90:	2201      	movs	r2, #1
 8012a92:	60c3      	str	r3, [r0, #12]
 8012a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012a98:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8012a9c:	611a      	str	r2, [r3, #16]
 8012a9e:	6880      	ldr	r0, [r0, #8]
 8012aa0:	b1d8      	cbz	r0, 8012ada <LedBlink::SetMode(ledblink::Mode)+0x66>
 8012aa2:	6803      	ldr	r3, [r0, #0]
 8012aa4:	689b      	ldr	r3, [r3, #8]
 8012aa6:	4718      	bx	r3
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	6003      	str	r3, [r0, #0]
 8012aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012ab0:	60c3      	str	r3, [r0, #12]
 8012ab2:	e7f4      	b.n	8012a9e <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8012ab4:	2303      	movs	r3, #3
 8012ab6:	6003      	str	r3, [r0, #0]
 8012ab8:	f240 134d 	movw	r3, #333	; 0x14d
 8012abc:	e7f8      	b.n	8012ab0 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8012abe:	2305      	movs	r3, #5
 8012ac0:	6003      	str	r3, [r0, #0]
 8012ac2:	23c8      	movs	r3, #200	; 0xc8
 8012ac4:	e7f4      	b.n	8012ab0 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	2201      	movs	r2, #1
 8012aca:	6003      	str	r3, [r0, #0]
 8012acc:	60c3      	str	r3, [r0, #12]
 8012ace:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012ad2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8012ad6:	615a      	str	r2, [r3, #20]
 8012ad8:	e7e1      	b.n	8012a9e <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8012ada:	4770      	bx	lr

08012adc <Hardware::Hardware()>:
 8012adc:	b570      	push	{r4, r5, r6, lr}
 8012ade:	2400      	movs	r4, #0
 8012ae0:	4b26      	ldr	r3, [pc, #152]	; (8012b7c <Hardware::Hardware()+0xa0>)
 8012ae2:	b090      	sub	sp, #64	; 0x40
 8012ae4:	6004      	str	r4, [r0, #0]
 8012ae6:	7104      	strb	r4, [r0, #4]
 8012ae8:	4e25      	ldr	r6, [pc, #148]	; (8012b80 <Hardware::Hardware()+0xa4>)
 8012aea:	6018      	str	r0, [r3, #0]
 8012aec:	4605      	mov	r5, r0
 8012aee:	f7f4 fd0b 	bl	8007508 <console_init>
 8012af2:	f000 fd21 	bl	8013538 <systick_config>
 8012af6:	f001 fdf7 	bl	80146e8 <udelay_init()>
 8012afa:	f001 fdf3 	bl	80146e4 <micros_init()>
 8012afe:	f240 7004 	movw	r0, #1796	; 0x704
 8012b02:	f000 ff89 	bl	8013a18 <rcu_periph_clock_enable>
 8012b06:	4630      	mov	r0, r6
 8012b08:	f001 f8e2 	bl	8013cd0 <timer_deinit>
 8012b0c:	236b      	movs	r3, #107	; 0x6b
 8012b0e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b16:	a903      	add	r1, sp, #12
 8012b18:	4630      	mov	r0, r6
 8012b1a:	9305      	str	r3, [sp, #20]
 8012b1c:	f001 f93a 	bl	8013d94 <timer_init>
 8012b20:	4630      	mov	r0, r6
 8012b22:	f001 f98f 	bl	8013e44 <timer_enable>
 8012b26:	f001 fb63 	bl	80141f0 <gd32_adc_init()>
 8012b2a:	2217      	movs	r2, #23
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012b32:	237a      	movs	r3, #122	; 0x7a
 8012b34:	a807      	add	r0, sp, #28
 8012b36:	930c      	str	r3, [sp, #48]	; 0x30
 8012b38:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8012b3c:	9407      	str	r4, [sp, #28]
 8012b3e:	940f      	str	r4, [sp, #60]	; 0x3c
 8012b40:	f000 fc20 	bl	8013384 <mktime>
 8012b44:	4621      	mov	r1, r4
 8012b46:	e9cd 0401 	strd	r0, r4, [sp, #4]
 8012b4a:	a801      	add	r0, sp, #4
 8012b4c:	f000 fc90 	bl	8013470 <settimeofday>
 8012b50:	f240 701b 	movw	r0, #1819	; 0x71b
 8012b54:	f000 ff60 	bl	8013a18 <rcu_periph_clock_enable>
 8012b58:	f240 701c 	movw	r0, #1820	; 0x71c
 8012b5c:	f000 ff5c 	bl	8013a18 <rcu_periph_clock_enable>
 8012b60:	f000 ff52 	bl	8013a08 <pmu_backup_write_enable>
 8012b64:	f000 fd86 	bl	8013674 <bkp_deinit>
 8012b68:	4621      	mov	r1, r4
 8012b6a:	2002      	movs	r0, #2
 8012b6c:	f000 fd8a 	bl	8013684 <bkp_data_write>
 8012b70:	f001 fb98 	bl	80142a4 <gd32_i2c_begin()>
 8012b74:	4628      	mov	r0, r5
 8012b76:	b010      	add	sp, #64	; 0x40
 8012b78:	bd70      	pop	{r4, r5, r6, pc}
 8012b7a:	bf00      	nop
 8012b7c:	2000aef4 	strdcs	sl, [r0], -r4
 8012b80:	40001000 	andmi	r1, r0, r0

08012b84 <Hardware::GetUuid(unsigned char*)>:
 8012b84:	4a0c      	ldr	r2, [pc, #48]	; (8012bb8 <Hardware::GetUuid(unsigned char*)+0x34>)
 8012b86:	b084      	sub	sp, #16
 8012b88:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8012b8c:	9300      	str	r3, [sp, #0]
 8012b8e:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 8012b92:	9001      	str	r0, [sp, #4]
 8012b94:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 8012b98:	4403      	add	r3, r0
 8012b9a:	4413      	add	r3, r2
 8012b9c:	9202      	str	r2, [sp, #8]
 8012b9e:	466a      	mov	r2, sp
 8012ba0:	9303      	str	r3, [sp, #12]
 8012ba2:	1e4b      	subs	r3, r1, #1
 8012ba4:	310f      	adds	r1, #15
 8012ba6:	428b      	cmp	r3, r1
 8012ba8:	d004      	beq.n	8012bb4 <Hardware::GetUuid(unsigned char*)+0x30>
 8012baa:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012bae:	f803 0f01 	strb.w	r0, [r3, #1]!
 8012bb2:	e7f8      	b.n	8012ba6 <Hardware::GetUuid(unsigned char*)+0x22>
 8012bb4:	b004      	add	sp, #16
 8012bb6:	4770      	bx	lr
 8012bb8:	1ffff000 	svcne	0x00fff000

08012bbc <Hardware::SetTime(tm const*)>:
 8012bbc:	2000      	movs	r0, #0
 8012bbe:	4770      	bx	lr

08012bc0 <Hardware::Reboot()>:
 8012bc0:	b508      	push	{r3, lr}
 8012bc2:	6803      	ldr	r3, [r0, #0]
 8012bc4:	4604      	mov	r4, r0
 8012bc6:	b153      	cbz	r3, 8012bde <Hardware::Reboot()+0x1e>
 8012bc8:	2300      	movs	r3, #0
 8012bca:	2104      	movs	r1, #4
 8012bcc:	7103      	strb	r3, [r0, #4]
 8012bce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012bd2:	f000 fe5f 	bl	8013894 <fwdgt_config>
 8012bd6:	6820      	ldr	r0, [r4, #0]
 8012bd8:	6803      	ldr	r3, [r0, #0]
 8012bda:	689b      	ldr	r3, [r3, #8]
 8012bdc:	4798      	blx	r3
 8012bde:	2102      	movs	r1, #2
 8012be0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012be4:	f000 fe56 	bl	8013894 <fwdgt_config>
 8012be8:	2801      	cmp	r0, #1
 8012bea:	bf0c      	ite	eq
 8012bec:	2301      	moveq	r3, #1
 8012bee:	2300      	movne	r3, #0
 8012bf0:	7123      	strb	r3, [r4, #4]
 8012bf2:	d101      	bne.n	8012bf8 <Hardware::Reboot()+0x38>
 8012bf4:	f000 fe3e 	bl	8013874 <fwdgt_enable>
 8012bf8:	2208      	movs	r2, #8
 8012bfa:	4b0d      	ldr	r3, [pc, #52]	; (8012c30 <Hardware::Reboot()+0x70>)
 8012bfc:	2501      	movs	r5, #1
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	480c      	ldr	r0, [pc, #48]	; (8012c34 <Hardware::Reboot()+0x74>)
 8012c02:	601a      	str	r2, [r3, #0]
 8012c04:	227d      	movs	r2, #125	; 0x7d
 8012c06:	490c      	ldr	r1, [pc, #48]	; (8012c38 <Hardware::Reboot()+0x78>)
 8012c08:	60da      	str	r2, [r3, #12]
 8012c0a:	68dc      	ldr	r4, [r3, #12]
 8012c0c:	b904      	cbnz	r4, 8012c10 <Hardware::Reboot()+0x50>
 8012c0e:	e7fe      	b.n	8012c0e <Hardware::Reboot()+0x4e>
 8012c10:	6802      	ldr	r2, [r0, #0]
 8012c12:	695e      	ldr	r6, [r3, #20]
 8012c14:	1b92      	subs	r2, r2, r6
 8012c16:	4294      	cmp	r4, r2
 8012c18:	d8f8      	bhi.n	8012c0c <Hardware::Reboot()+0x4c>
 8012c1a:	6802      	ldr	r2, [r0, #0]
 8012c1c:	615a      	str	r2, [r3, #20]
 8012c1e:	691a      	ldr	r2, [r3, #16]
 8012c20:	2a01      	cmp	r2, #1
 8012c22:	f082 0401 	eor.w	r4, r2, #1
 8012c26:	611c      	str	r4, [r3, #16]
 8012c28:	bf14      	ite	ne
 8012c2a:	610d      	strne	r5, [r1, #16]
 8012c2c:	614a      	streq	r2, [r1, #20]
 8012c2e:	e7ec      	b.n	8012c0a <Hardware::Reboot()+0x4a>
 8012c30:	2000aef0 	strdcs	sl, [r0], -r0
 8012c34:	2000af0c 	andcs	sl, r0, ip, lsl #30
 8012c38:	40011000 	andmi	r1, r1, r0

08012c3c <operator delete(void*)>:
 8012c3c:	f000 b890 	b.w	8012d60 <free>

08012c40 <operator delete[](void*)>:
 8012c40:	f000 b88e 	b.w	8012d60 <free>

08012c44 <operator new(unsigned int)>:
 8012c44:	f000 b842 	b.w	8012ccc <malloc>

08012c48 <operator new[](unsigned int)>:
 8012c48:	f000 b840 	b.w	8012ccc <malloc>

08012c4c <inet_aton>:
 8012c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c4e:	f04f 0c0a 	mov.w	ip, #10
 8012c52:	2500      	movs	r5, #0
 8012c54:	ae01      	add	r6, sp, #4
 8012c56:	4603      	mov	r3, r0
 8012c58:	2200      	movs	r2, #0
 8012c5a:	1d07      	adds	r7, r0, #4
 8012c5c:	e007      	b.n	8012c6e <inet_aton+0x22>
 8012c5e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012c62:	2b09      	cmp	r3, #9
 8012c64:	d820      	bhi.n	8012ca8 <inet_aton+0x5c>
 8012c66:	4603      	mov	r3, r0
 8012c68:	fb0c 4202 	mla	r2, ip, r2, r4
 8012c6c:	3a30      	subs	r2, #48	; 0x30
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f810 4b01 	ldrb.w	r4, [r0], #1
 8012c74:	2c2e      	cmp	r4, #46	; 0x2e
 8012c76:	d111      	bne.n	8012c9c <inet_aton+0x50>
 8012c78:	3501      	adds	r5, #1
 8012c7a:	2d03      	cmp	r5, #3
 8012c7c:	f806 2b01 	strb.w	r2, [r6], #1
 8012c80:	d1e9      	bne.n	8012c56 <inet_aton+0xa>
 8012c82:	2200      	movs	r2, #0
 8012c84:	250a      	movs	r5, #10
 8012c86:	1d1c      	adds	r4, r3, #4
 8012c88:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8012c8c:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8012c90:	d10d      	bne.n	8012cae <inet_aton+0x62>
 8012c92:	f88d 2007 	strb.w	r2, [sp, #7]
 8012c96:	b9b1      	cbnz	r1, 8012cc6 <inet_aton+0x7a>
 8012c98:	2001      	movs	r0, #1
 8012c9a:	e006      	b.n	8012caa <inet_aton+0x5e>
 8012c9c:	2c00      	cmp	r4, #0
 8012c9e:	d0eb      	beq.n	8012c78 <inet_aton+0x2c>
 8012ca0:	2c0a      	cmp	r4, #10
 8012ca2:	d0e9      	beq.n	8012c78 <inet_aton+0x2c>
 8012ca4:	42b8      	cmp	r0, r7
 8012ca6:	d1da      	bne.n	8012c5e <inet_aton+0x12>
 8012ca8:	2000      	movs	r0, #0
 8012caa:	b003      	add	sp, #12
 8012cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cae:	280a      	cmp	r0, #10
 8012cb0:	d0ef      	beq.n	8012c92 <inet_aton+0x46>
 8012cb2:	42a3      	cmp	r3, r4
 8012cb4:	d0f8      	beq.n	8012ca8 <inet_aton+0x5c>
 8012cb6:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 8012cba:	2e09      	cmp	r6, #9
 8012cbc:	d8f4      	bhi.n	8012ca8 <inet_aton+0x5c>
 8012cbe:	fb05 0202 	mla	r2, r5, r2, r0
 8012cc2:	3a30      	subs	r2, #48	; 0x30
 8012cc4:	e7e0      	b.n	8012c88 <inet_aton+0x3c>
 8012cc6:	9b01      	ldr	r3, [sp, #4]
 8012cc8:	600b      	str	r3, [r1, #0]
 8012cca:	e7e5      	b.n	8012c98 <inet_aton+0x4c>

08012ccc <malloc>:
 8012ccc:	b538      	push	{r3, r4, r5, lr}
 8012cce:	4604      	mov	r4, r0
 8012cd0:	4601      	mov	r1, r0
 8012cd2:	481c      	ldr	r0, [pc, #112]	; (8012d44 <malloc+0x78>)
 8012cd4:	f000 faae 	bl	8013234 <printf>
 8012cd8:	b17c      	cbz	r4, 8012cfa <malloc+0x2e>
 8012cda:	4b1b      	ldr	r3, [pc, #108]	; (8012d48 <malloc+0x7c>)
 8012cdc:	6818      	ldr	r0, [r3, #0]
 8012cde:	b978      	cbnz	r0, 8012d00 <malloc+0x34>
 8012ce0:	4a1a      	ldr	r2, [pc, #104]	; (8012d4c <malloc+0x80>)
 8012ce2:	f104 031b 	add.w	r3, r4, #27
 8012ce6:	6811      	ldr	r1, [r2, #0]
 8012ce8:	4819      	ldr	r0, [pc, #100]	; (8012d50 <malloc+0x84>)
 8012cea:	f023 030f 	bic.w	r3, r3, #15
 8012cee:	440b      	add	r3, r1
 8012cf0:	4283      	cmp	r3, r0
 8012cf2:	d921      	bls.n	8012d38 <malloc+0x6c>
 8012cf4:	4817      	ldr	r0, [pc, #92]	; (8012d54 <malloc+0x88>)
 8012cf6:	f000 fa9d 	bl	8013234 <printf>
 8012cfa:	2500      	movs	r5, #0
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	bd38      	pop	{r3, r4, r5, pc}
 8012d00:	4284      	cmp	r4, r0
 8012d02:	d80a      	bhi.n	8012d1a <malloc+0x4e>
 8012d04:	685a      	ldr	r2, [r3, #4]
 8012d06:	6899      	ldr	r1, [r3, #8]
 8012d08:	3201      	adds	r2, #1
 8012d0a:	428a      	cmp	r2, r1
 8012d0c:	605a      	str	r2, [r3, #4]
 8012d0e:	d900      	bls.n	8012d12 <malloc+0x46>
 8012d10:	609a      	str	r2, [r3, #8]
 8012d12:	68d9      	ldr	r1, [r3, #12]
 8012d14:	b919      	cbnz	r1, 8012d1e <malloc+0x52>
 8012d16:	4604      	mov	r4, r0
 8012d18:	e7e2      	b.n	8012ce0 <malloc+0x14>
 8012d1a:	3310      	adds	r3, #16
 8012d1c:	e7de      	b.n	8012cdc <malloc+0x10>
 8012d1e:	4604      	mov	r4, r0
 8012d20:	688a      	ldr	r2, [r1, #8]
 8012d22:	60da      	str	r2, [r3, #12]
 8012d24:	2300      	movs	r3, #0
 8012d26:	f101 050c 	add.w	r5, r1, #12
 8012d2a:	608b      	str	r3, [r1, #8]
 8012d2c:	4622      	mov	r2, r4
 8012d2e:	462b      	mov	r3, r5
 8012d30:	4809      	ldr	r0, [pc, #36]	; (8012d58 <malloc+0x8c>)
 8012d32:	f000 fa7f 	bl	8013234 <printf>
 8012d36:	e7e1      	b.n	8012cfc <malloc+0x30>
 8012d38:	6013      	str	r3, [r2, #0]
 8012d3a:	4b08      	ldr	r3, [pc, #32]	; (8012d5c <malloc+0x90>)
 8012d3c:	e9c1 3400 	strd	r3, r4, [r1]
 8012d40:	e7f0      	b.n	8012d24 <malloc+0x58>
 8012d42:	bf00      	nop
 8012d44:	0801748c 	stmdaeq	r1, {r2, r3, r7, sl, ip, sp, lr}
 8012d48:	20000024 	andcs	r0, r0, r4, lsr #32
 8012d4c:	20000020 	andcs	r0, r0, r0, lsr #32
 8012d50:	20016800 	andcs	r6, r1, r0, lsl #16
 8012d54:	08017498 	stmdaeq	r1, {r3, r4, r7, sl, ip, sp, lr}
 8012d58:	080174b4 	stmdaeq	r1, {r2, r4, r5, r7, sl, ip, sp, lr}
 8012d5c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08012d60 <free>:
 8012d60:	b538      	push	{r3, r4, r5, lr}
 8012d62:	4604      	mov	r4, r0
 8012d64:	b1c8      	cbz	r0, 8012d9a <free+0x3a>
 8012d66:	f1a0 050c 	sub.w	r5, r0, #12
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	4629      	mov	r1, r5
 8012d6e:	480c      	ldr	r0, [pc, #48]	; (8012da0 <free+0x40>)
 8012d70:	f000 fa60 	bl	8013234 <printf>
 8012d74:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8012d78:	4b0a      	ldr	r3, [pc, #40]	; (8012da4 <free+0x44>)
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d10d      	bne.n	8012d9a <free+0x3a>
 8012d7e:	4b0a      	ldr	r3, [pc, #40]	; (8012da8 <free+0x48>)
 8012d80:	681a      	ldr	r2, [r3, #0]
 8012d82:	b152      	cbz	r2, 8012d9a <free+0x3a>
 8012d84:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8012d88:	4291      	cmp	r1, r2
 8012d8a:	d107      	bne.n	8012d9c <free+0x3c>
 8012d8c:	68da      	ldr	r2, [r3, #12]
 8012d8e:	f844 2c04 	str.w	r2, [r4, #-4]
 8012d92:	685a      	ldr	r2, [r3, #4]
 8012d94:	60dd      	str	r5, [r3, #12]
 8012d96:	3a01      	subs	r2, #1
 8012d98:	605a      	str	r2, [r3, #4]
 8012d9a:	bd38      	pop	{r3, r4, r5, pc}
 8012d9c:	3310      	adds	r3, #16
 8012d9e:	e7ef      	b.n	8012d80 <free+0x20>
 8012da0:	080174df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, sl, ip, sp, lr}
 8012da4:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8012da8:	20000024 	andcs	r0, r0, r4, lsr #32

08012dac <memcpy>:
 8012dac:	b510      	push	{r4, lr}
 8012dae:	1e43      	subs	r3, r0, #1
 8012db0:	440a      	add	r2, r1
 8012db2:	4291      	cmp	r1, r2
 8012db4:	d100      	bne.n	8012db8 <memcpy+0xc>
 8012db6:	bd10      	pop	{r4, pc}
 8012db8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012dbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012dc0:	e7f7      	b.n	8012db2 <memcpy+0x6>

08012dc2 <memmove>:
 8012dc2:	4288      	cmp	r0, r1
 8012dc4:	b510      	push	{r4, lr}
 8012dc6:	eb01 0302 	add.w	r3, r1, r2
 8012dca:	d208      	bcs.n	8012dde <memmove+0x1c>
 8012dcc:	1e42      	subs	r2, r0, #1
 8012dce:	4299      	cmp	r1, r3
 8012dd0:	d100      	bne.n	8012dd4 <memmove+0x12>
 8012dd2:	bd10      	pop	{r4, pc}
 8012dd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012dd8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012ddc:	e7f7      	b.n	8012dce <memmove+0xc>
 8012dde:	4601      	mov	r1, r0
 8012de0:	4402      	add	r2, r0
 8012de2:	428a      	cmp	r2, r1
 8012de4:	d0f5      	beq.n	8012dd2 <memmove+0x10>
 8012de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012dee:	e7f8      	b.n	8012de2 <memmove+0x20>

08012df0 <memset>:
 8012df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012df2:	b1e2      	cbz	r2, 8012e2e <memset+0x3e>
 8012df4:	4603      	mov	r3, r0
 8012df6:	b2c9      	uxtb	r1, r1
 8012df8:	075c      	lsls	r4, r3, #29
 8012dfa:	d114      	bne.n	8012e26 <memset+0x36>
 8012dfc:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8012e00:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8012e04:	463d      	mov	r5, r7
 8012e06:	f022 0407 	bic.w	r4, r2, #7
 8012e0a:	08d6      	lsrs	r6, r2, #3
 8012e0c:	441c      	add	r4, r3
 8012e0e:	42a3      	cmp	r3, r4
 8012e10:	d10e      	bne.n	8012e30 <memset+0x40>
 8012e12:	f06f 0307 	mvn.w	r3, #7
 8012e16:	fb03 2206 	mla	r2, r3, r6, r2
 8012e1a:	4422      	add	r2, r4
 8012e1c:	4294      	cmp	r4, r2
 8012e1e:	d006      	beq.n	8012e2e <memset+0x3e>
 8012e20:	f804 1b01 	strb.w	r1, [r4], #1
 8012e24:	e7fa      	b.n	8012e1c <memset+0x2c>
 8012e26:	3a01      	subs	r2, #1
 8012e28:	f803 1b01 	strb.w	r1, [r3], #1
 8012e2c:	d1e4      	bne.n	8012df8 <memset+0x8>
 8012e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e30:	f843 7b08 	str.w	r7, [r3], #8
 8012e34:	f843 5c04 	str.w	r5, [r3, #-4]
 8012e38:	e7e9      	b.n	8012e0e <memset+0x1e>
	...

08012e3c <_xputch>:
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	b410      	push	{r4}
 8012e40:	4c08      	ldr	r4, [pc, #32]	; (8012e64 <_xputch+0x28>)
 8012e42:	68da      	ldr	r2, [r3, #12]
 8012e44:	4608      	mov	r0, r1
 8012e46:	6821      	ldr	r1, [r4, #0]
 8012e48:	3201      	adds	r2, #1
 8012e4a:	60da      	str	r2, [r3, #12]
 8012e4c:	b139      	cbz	r1, 8012e5e <_xputch+0x22>
 8012e4e:	691b      	ldr	r3, [r3, #16]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	da02      	bge.n	8012e5a <_xputch+0x1e>
 8012e54:	1c4b      	adds	r3, r1, #1
 8012e56:	6023      	str	r3, [r4, #0]
 8012e58:	7008      	strb	r0, [r1, #0]
 8012e5a:	bc10      	pop	{r4}
 8012e5c:	4770      	bx	lr
 8012e5e:	bc10      	pop	{r4}
 8012e60:	f7ff bd50 	b.w	8012904 <console_putc>
 8012e64:	2000aef8 	strdcs	sl, [r0], -r8

08012e68 <_format_int>:
 8012e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e6c:	461f      	mov	r7, r3
 8012e6e:	b091      	sub	sp, #68	; 0x44
 8012e70:	ea52 0307 	orrs.w	r3, r2, r7
 8012e74:	4680      	mov	r8, r0
 8012e76:	4616      	mov	r6, r2
 8012e78:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8012e7c:	d138      	bne.n	8012ef0 <_format_int+0x88>
 8012e7e:	2330      	movs	r3, #48	; 0x30
 8012e80:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8012e84:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8012e88:	f8d8 3000 	ldr.w	r3, [r8]
 8012e8c:	07d8      	lsls	r0, r3, #31
 8012e8e:	d508      	bpl.n	8012ea2 <_format_int+0x3a>
 8012e90:	466a      	mov	r2, sp
 8012e92:	2030      	movs	r0, #48	; 0x30
 8012e94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012e98:	1b2e      	subs	r6, r5, r4
 8012e9a:	428e      	cmp	r6, r1
 8012e9c:	da01      	bge.n	8012ea2 <_format_int+0x3a>
 8012e9e:	4294      	cmp	r4, r2
 8012ea0:	d843      	bhi.n	8012f2a <_format_int+0xc2>
 8012ea2:	0699      	lsls	r1, r3, #26
 8012ea4:	d508      	bpl.n	8012eb8 <_format_int+0x50>
 8012ea6:	466a      	mov	r2, sp
 8012ea8:	2030      	movs	r0, #48	; 0x30
 8012eaa:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012eae:	1b2e      	subs	r6, r5, r4
 8012eb0:	428e      	cmp	r6, r1
 8012eb2:	da01      	bge.n	8012eb8 <_format_int+0x50>
 8012eb4:	4294      	cmp	r4, r2
 8012eb6:	d83b      	bhi.n	8012f30 <_format_int+0xc8>
 8012eb8:	071a      	lsls	r2, r3, #28
 8012eba:	bf44      	itt	mi
 8012ebc:	222d      	movmi	r2, #45	; 0x2d
 8012ebe:	f804 2901 	strbmi.w	r2, [r4], #-1
 8012ec2:	065b      	lsls	r3, r3, #25
 8012ec4:	d408      	bmi.n	8012ed8 <_format_int+0x70>
 8012ec6:	466b      	mov	r3, sp
 8012ec8:	2120      	movs	r1, #32
 8012eca:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012ece:	1b28      	subs	r0, r5, r4
 8012ed0:	4290      	cmp	r0, r2
 8012ed2:	da01      	bge.n	8012ed8 <_format_int+0x70>
 8012ed4:	429c      	cmp	r4, r3
 8012ed6:	d82e      	bhi.n	8012f36 <_format_int+0xce>
 8012ed8:	1b2d      	subs	r5, r5, r4
 8012eda:	3401      	adds	r4, #1
 8012edc:	ab10      	add	r3, sp, #64	; 0x40
 8012ede:	429c      	cmp	r4, r3
 8012ee0:	d32c      	bcc.n	8012f3c <_format_int+0xd4>
 8012ee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012ee6:	42ab      	cmp	r3, r5
 8012ee8:	dc2e      	bgt.n	8012f48 <_format_int+0xe0>
 8012eea:	b011      	add	sp, #68	; 0x44
 8012eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ef0:	462c      	mov	r4, r5
 8012ef2:	46eb      	mov	fp, sp
 8012ef4:	4630      	mov	r0, r6
 8012ef6:	4639      	mov	r1, r7
 8012ef8:	220a      	movs	r2, #10
 8012efa:	2300      	movs	r3, #0
 8012efc:	f7f4 fdf8 	bl	8007af0 <__aeabi_uldivmod>
 8012f00:	46b2      	mov	sl, r6
 8012f02:	3230      	adds	r2, #48	; 0x30
 8012f04:	46b9      	mov	r9, r7
 8012f06:	2300      	movs	r3, #0
 8012f08:	4630      	mov	r0, r6
 8012f0a:	4639      	mov	r1, r7
 8012f0c:	f804 2901 	strb.w	r2, [r4], #-1
 8012f10:	220a      	movs	r2, #10
 8012f12:	f7f4 fded 	bl	8007af0 <__aeabi_uldivmod>
 8012f16:	f1ba 0f0a 	cmp.w	sl, #10
 8012f1a:	f179 0300 	sbcs.w	r3, r9, #0
 8012f1e:	4606      	mov	r6, r0
 8012f20:	460f      	mov	r7, r1
 8012f22:	d3b1      	bcc.n	8012e88 <_format_int+0x20>
 8012f24:	455c      	cmp	r4, fp
 8012f26:	d1e5      	bne.n	8012ef4 <_format_int+0x8c>
 8012f28:	e7ae      	b.n	8012e88 <_format_int+0x20>
 8012f2a:	f804 0901 	strb.w	r0, [r4], #-1
 8012f2e:	e7b3      	b.n	8012e98 <_format_int+0x30>
 8012f30:	f804 0901 	strb.w	r0, [r4], #-1
 8012f34:	e7bb      	b.n	8012eae <_format_int+0x46>
 8012f36:	f804 1901 	strb.w	r1, [r4], #-1
 8012f3a:	e7c8      	b.n	8012ece <_format_int+0x66>
 8012f3c:	4640      	mov	r0, r8
 8012f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f42:	f7ff ff7b 	bl	8012e3c <_xputch>
 8012f46:	e7c9      	b.n	8012edc <_format_int+0x74>
 8012f48:	2120      	movs	r1, #32
 8012f4a:	4640      	mov	r0, r8
 8012f4c:	f7ff ff76 	bl	8012e3c <_xputch>
 8012f50:	3501      	adds	r5, #1
 8012f52:	e7c6      	b.n	8012ee2 <_format_int+0x7a>

08012f54 <_format_hex>:
 8012f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f56:	b091      	sub	sp, #68	; 0x44
 8012f58:	4606      	mov	r6, r0
 8012f5a:	6804      	ldr	r4, [r0, #0]
 8012f5c:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8012f60:	bb61      	cbnz	r1, 8012fbc <_format_hex+0x68>
 8012f62:	2330      	movs	r3, #48	; 0x30
 8012f64:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8012f68:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8012f6c:	07e5      	lsls	r5, r4, #31
 8012f6e:	d507      	bpl.n	8012f80 <_format_hex+0x2c>
 8012f70:	4669      	mov	r1, sp
 8012f72:	2530      	movs	r5, #48	; 0x30
 8012f74:	6870      	ldr	r0, [r6, #4]
 8012f76:	1ad7      	subs	r7, r2, r3
 8012f78:	4287      	cmp	r7, r0
 8012f7a:	da01      	bge.n	8012f80 <_format_hex+0x2c>
 8012f7c:	428b      	cmp	r3, r1
 8012f7e:	d831      	bhi.n	8012fe4 <_format_hex+0x90>
 8012f80:	06a0      	lsls	r0, r4, #26
 8012f82:	d507      	bpl.n	8012f94 <_format_hex+0x40>
 8012f84:	4669      	mov	r1, sp
 8012f86:	2530      	movs	r5, #48	; 0x30
 8012f88:	68b0      	ldr	r0, [r6, #8]
 8012f8a:	1ad7      	subs	r7, r2, r3
 8012f8c:	4287      	cmp	r7, r0
 8012f8e:	da01      	bge.n	8012f94 <_format_hex+0x40>
 8012f90:	428b      	cmp	r3, r1
 8012f92:	d82a      	bhi.n	8012fea <_format_hex+0x96>
 8012f94:	0661      	lsls	r1, r4, #25
 8012f96:	d407      	bmi.n	8012fa8 <_format_hex+0x54>
 8012f98:	4669      	mov	r1, sp
 8012f9a:	2420      	movs	r4, #32
 8012f9c:	68b0      	ldr	r0, [r6, #8]
 8012f9e:	1ad5      	subs	r5, r2, r3
 8012fa0:	4285      	cmp	r5, r0
 8012fa2:	da01      	bge.n	8012fa8 <_format_hex+0x54>
 8012fa4:	428b      	cmp	r3, r1
 8012fa6:	d823      	bhi.n	8012ff0 <_format_hex+0x9c>
 8012fa8:	1ad5      	subs	r5, r2, r3
 8012faa:	1c5c      	adds	r4, r3, #1
 8012fac:	ab10      	add	r3, sp, #64	; 0x40
 8012fae:	429c      	cmp	r4, r3
 8012fb0:	d321      	bcc.n	8012ff6 <_format_hex+0xa2>
 8012fb2:	68b3      	ldr	r3, [r6, #8]
 8012fb4:	429d      	cmp	r5, r3
 8012fb6:	db24      	blt.n	8013002 <_format_hex+0xae>
 8012fb8:	b011      	add	sp, #68	; 0x44
 8012fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fbc:	f014 0f02 	tst.w	r4, #2
 8012fc0:	bf0c      	ite	eq
 8012fc2:	2757      	moveq	r7, #87	; 0x57
 8012fc4:	2737      	movne	r7, #55	; 0x37
 8012fc6:	4613      	mov	r3, r2
 8012fc8:	466d      	mov	r5, sp
 8012fca:	f001 000f 	and.w	r0, r1, #15
 8012fce:	2809      	cmp	r0, #9
 8012fd0:	bf94      	ite	ls
 8012fd2:	3030      	addls	r0, #48	; 0x30
 8012fd4:	19c0      	addhi	r0, r0, r7
 8012fd6:	0909      	lsrs	r1, r1, #4
 8012fd8:	f803 0901 	strb.w	r0, [r3], #-1
 8012fdc:	d0c6      	beq.n	8012f6c <_format_hex+0x18>
 8012fde:	42ab      	cmp	r3, r5
 8012fe0:	d1f3      	bne.n	8012fca <_format_hex+0x76>
 8012fe2:	e7c3      	b.n	8012f6c <_format_hex+0x18>
 8012fe4:	f803 5901 	strb.w	r5, [r3], #-1
 8012fe8:	e7c5      	b.n	8012f76 <_format_hex+0x22>
 8012fea:	f803 5901 	strb.w	r5, [r3], #-1
 8012fee:	e7cc      	b.n	8012f8a <_format_hex+0x36>
 8012ff0:	f803 4901 	strb.w	r4, [r3], #-1
 8012ff4:	e7d3      	b.n	8012f9e <_format_hex+0x4a>
 8012ff6:	4630      	mov	r0, r6
 8012ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ffc:	f7ff ff1e 	bl	8012e3c <_xputch>
 8013000:	e7d4      	b.n	8012fac <_format_hex+0x58>
 8013002:	2120      	movs	r1, #32
 8013004:	4630      	mov	r0, r6
 8013006:	f7ff ff19 	bl	8012e3c <_xputch>
 801300a:	3501      	adds	r5, #1
 801300c:	e7d1      	b.n	8012fb2 <_format_hex+0x5e>
	...

08013010 <_vprintf>:
 8013010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013014:	2700      	movs	r7, #0
 8013016:	460b      	mov	r3, r1
 8013018:	4614      	mov	r4, r2
 801301a:	f04f 080a 	mov.w	r8, #10
 801301e:	b086      	sub	sp, #24
 8013020:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8013024:	7819      	ldrb	r1, [r3, #0]
 8013026:	b919      	cbnz	r1, 8013030 <_vprintf+0x20>
 8013028:	9804      	ldr	r0, [sp, #16]
 801302a:	b006      	add	sp, #24
 801302c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013030:	2925      	cmp	r1, #37	; 0x25
 8013032:	f103 0501 	add.w	r5, r3, #1
 8013036:	d004      	beq.n	8013042 <_vprintf+0x32>
 8013038:	a801      	add	r0, sp, #4
 801303a:	f7ff feff 	bl	8012e3c <_xputch>
 801303e:	462b      	mov	r3, r5
 8013040:	e7f0      	b.n	8013024 <_vprintf+0x14>
 8013042:	785a      	ldrb	r2, [r3, #1]
 8013044:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8013048:	2a30      	cmp	r2, #48	; 0x30
 801304a:	9703      	str	r7, [sp, #12]
 801304c:	d126      	bne.n	801309c <_vprintf+0x8c>
 801304e:	2220      	movs	r2, #32
 8013050:	9201      	str	r2, [sp, #4]
 8013052:	1c9d      	adds	r5, r3, #2
 8013054:	2200      	movs	r2, #0
 8013056:	462e      	mov	r6, r5
 8013058:	4613      	mov	r3, r2
 801305a:	7831      	ldrb	r1, [r6, #0]
 801305c:	4635      	mov	r5, r6
 801305e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8013062:	2809      	cmp	r0, #9
 8013064:	f106 0601 	add.w	r6, r6, #1
 8013068:	d91c      	bls.n	80130a4 <_vprintf+0x94>
 801306a:	b12a      	cbz	r2, 8013078 <_vprintf+0x68>
 801306c:	9303      	str	r3, [sp, #12]
 801306e:	b11b      	cbz	r3, 8013078 <_vprintf+0x68>
 8013070:	9b01      	ldr	r3, [sp, #4]
 8013072:	f043 0310 	orr.w	r3, r3, #16
 8013076:	9301      	str	r3, [sp, #4]
 8013078:	292e      	cmp	r1, #46	; 0x2e
 801307a:	d122      	bne.n	80130c2 <_vprintf+0xb2>
 801307c:	786b      	ldrb	r3, [r5, #1]
 801307e:	2b2a      	cmp	r3, #42	; 0x2a
 8013080:	d014      	beq.n	80130ac <_vprintf+0x9c>
 8013082:	2100      	movs	r1, #0
 8013084:	460a      	mov	r2, r1
 8013086:	1c68      	adds	r0, r5, #1
 8013088:	7803      	ldrb	r3, [r0, #0]
 801308a:	4605      	mov	r5, r0
 801308c:	3b30      	subs	r3, #48	; 0x30
 801308e:	2b09      	cmp	r3, #9
 8013090:	f100 0001 	add.w	r0, r0, #1
 8013094:	d92f      	bls.n	80130f6 <_vprintf+0xe6>
 8013096:	b181      	cbz	r1, 80130ba <_vprintf+0xaa>
 8013098:	9202      	str	r2, [sp, #8]
 801309a:	e00e      	b.n	80130ba <_vprintf+0xaa>
 801309c:	2a2d      	cmp	r2, #45	; 0x2d
 801309e:	d1d9      	bne.n	8013054 <_vprintf+0x44>
 80130a0:	2240      	movs	r2, #64	; 0x40
 80130a2:	e7d5      	b.n	8013050 <_vprintf+0x40>
 80130a4:	2201      	movs	r2, #1
 80130a6:	fb08 0303 	mla	r3, r8, r3, r0
 80130aa:	e7d6      	b.n	801305a <_vprintf+0x4a>
 80130ac:	f854 3b04 	ldr.w	r3, [r4], #4
 80130b0:	3502      	adds	r5, #2
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	bfb8      	it	lt
 80130b6:	425b      	neglt	r3, r3
 80130b8:	9302      	str	r3, [sp, #8]
 80130ba:	9b01      	ldr	r3, [sp, #4]
 80130bc:	f043 0301 	orr.w	r3, r3, #1
 80130c0:	9301      	str	r3, [sp, #4]
 80130c2:	782b      	ldrb	r3, [r5, #0]
 80130c4:	2b6c      	cmp	r3, #108	; 0x6c
 80130c6:	bf04      	itt	eq
 80130c8:	9b01      	ldreq	r3, [sp, #4]
 80130ca:	3501      	addeq	r5, #1
 80130cc:	7829      	ldrb	r1, [r5, #0]
 80130ce:	bf04      	itt	eq
 80130d0:	f043 0304 	orreq.w	r3, r3, #4
 80130d4:	9301      	streq	r3, [sp, #4]
 80130d6:	2978      	cmp	r1, #120	; 0x78
 80130d8:	d8ae      	bhi.n	8013038 <_vprintf+0x28>
 80130da:	296f      	cmp	r1, #111	; 0x6f
 80130dc:	d80f      	bhi.n	80130fe <_vprintf+0xee>
 80130de:	2963      	cmp	r1, #99	; 0x63
 80130e0:	d045      	beq.n	801316e <_vprintf+0x15e>
 80130e2:	d825      	bhi.n	8013130 <_vprintf+0x120>
 80130e4:	2958      	cmp	r1, #88	; 0x58
 80130e6:	d1a7      	bne.n	8013038 <_vprintf+0x28>
 80130e8:	9b01      	ldr	r3, [sp, #4]
 80130ea:	f043 0302 	orr.w	r3, r3, #2
 80130ee:	9301      	str	r3, [sp, #4]
 80130f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80130f4:	e051      	b.n	801319a <_vprintf+0x18a>
 80130f6:	2101      	movs	r1, #1
 80130f8:	fb08 3202 	mla	r2, r8, r2, r3
 80130fc:	e7c4      	b.n	8013088 <_vprintf+0x78>
 80130fe:	f1a1 0370 	sub.w	r3, r1, #112	; 0x70
 8013102:	2b08      	cmp	r3, #8
 8013104:	d898      	bhi.n	8013038 <_vprintf+0x28>
 8013106:	a201      	add	r2, pc, #4	; (adr r2, 801310c <_vprintf+0xfc>)
 8013108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801310c:	0801317d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, ip, sp}
 8013110:	08013039 	stmdaeq	r1, {r0, r3, r4, r5, ip, sp}
 8013114:	08013039 	stmdaeq	r1, {r0, r3, r4, r5, ip, sp}
 8013118:	080131a3 	stmdaeq	r1, {r0, r1, r5, r7, r8, ip, sp}
 801311c:	08013039 	stmdaeq	r1, {r0, r3, r4, r5, ip, sp}
 8013120:	08013215 	stmdaeq	r1, {r0, r2, r4, r9, ip, sp}
 8013124:	08013039 	stmdaeq	r1, {r0, r3, r4, r5, ip, sp}
 8013128:	08013039 	stmdaeq	r1, {r0, r3, r4, r5, ip, sp}
 801312c:	080130f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, ip, sp}
 8013130:	2964      	cmp	r1, #100	; 0x64
 8013132:	d002      	beq.n	801313a <_vprintf+0x12a>
 8013134:	2969      	cmp	r1, #105	; 0x69
 8013136:	f47f af7f 	bne.w	8013038 <_vprintf+0x28>
 801313a:	9901      	ldr	r1, [sp, #4]
 801313c:	074e      	lsls	r6, r1, #29
 801313e:	bf43      	ittte	mi
 8013140:	3407      	addmi	r4, #7
 8013142:	f024 0307 	bicmi.w	r3, r4, #7
 8013146:	461c      	movmi	r4, r3
 8013148:	f854 2b04 	ldrpl.w	r2, [r4], #4
 801314c:	bf4a      	itet	mi
 801314e:	685b      	ldrmi	r3, [r3, #4]
 8013150:	17d3      	asrpl	r3, r2, #31
 8013152:	f854 2b08 	ldrmi.w	r2, [r4], #8
 8013156:	2b00      	cmp	r3, #0
 8013158:	da05      	bge.n	8013166 <_vprintf+0x156>
 801315a:	f041 0108 	orr.w	r1, r1, #8
 801315e:	4252      	negs	r2, r2
 8013160:	9101      	str	r1, [sp, #4]
 8013162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8013166:	a801      	add	r0, sp, #4
 8013168:	f7ff fe7e 	bl	8012e68 <_format_int>
 801316c:	e004      	b.n	8013178 <_vprintf+0x168>
 801316e:	f854 1b04 	ldr.w	r1, [r4], #4
 8013172:	a801      	add	r0, sp, #4
 8013174:	f7ff fe62 	bl	8012e3c <_xputch>
 8013178:	3501      	adds	r5, #1
 801317a:	e760      	b.n	801303e <_vprintf+0x2e>
 801317c:	2308      	movs	r3, #8
 801317e:	9303      	str	r3, [sp, #12]
 8013180:	2320      	movs	r3, #32
 8013182:	2130      	movs	r1, #48	; 0x30
 8013184:	f854 6b04 	ldr.w	r6, [r4], #4
 8013188:	a801      	add	r0, sp, #4
 801318a:	9301      	str	r3, [sp, #4]
 801318c:	f7ff fe56 	bl	8012e3c <_xputch>
 8013190:	2178      	movs	r1, #120	; 0x78
 8013192:	a801      	add	r0, sp, #4
 8013194:	f7ff fe52 	bl	8012e3c <_xputch>
 8013198:	4631      	mov	r1, r6
 801319a:	a801      	add	r0, sp, #4
 801319c:	f7ff feda 	bl	8012f54 <_format_hex>
 80131a0:	e7ea      	b.n	8013178 <_vprintf+0x168>
 80131a2:	2600      	movs	r6, #0
 80131a4:	f854 9b04 	ldr.w	r9, [r4], #4
 80131a8:	f819 3006 	ldrb.w	r3, [r9, r6]
 80131ac:	b993      	cbnz	r3, 80131d4 <_vprintf+0x1c4>
 80131ae:	9b01      	ldr	r3, [sp, #4]
 80131b0:	07d9      	lsls	r1, r3, #31
 80131b2:	d503      	bpl.n	80131bc <_vprintf+0x1ac>
 80131b4:	9b02      	ldr	r3, [sp, #8]
 80131b6:	429e      	cmp	r6, r3
 80131b8:	bfa8      	it	ge
 80131ba:	461e      	movge	r6, r3
 80131bc:	9b01      	ldr	r3, [sp, #4]
 80131be:	f106 0a01 	add.w	sl, r6, #1
 80131c2:	065a      	lsls	r2, r3, #25
 80131c4:	d403      	bmi.n	80131ce <_vprintf+0x1be>
 80131c6:	9b03      	ldr	r3, [sp, #12]
 80131c8:	429e      	cmp	r6, r3
 80131ca:	db05      	blt.n	80131d8 <_vprintf+0x1c8>
 80131cc:	4656      	mov	r6, sl
 80131ce:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80131d2:	e00d      	b.n	80131f0 <_vprintf+0x1e0>
 80131d4:	3601      	adds	r6, #1
 80131d6:	e7e7      	b.n	80131a8 <_vprintf+0x198>
 80131d8:	2120      	movs	r1, #32
 80131da:	a801      	add	r0, sp, #4
 80131dc:	f7ff fe2e 	bl	8012e3c <_xputch>
 80131e0:	4656      	mov	r6, sl
 80131e2:	e7eb      	b.n	80131bc <_vprintf+0x1ac>
 80131e4:	a801      	add	r0, sp, #4
 80131e6:	f7ff fe29 	bl	8012e3c <_xputch>
 80131ea:	9b02      	ldr	r3, [sp, #8]
 80131ec:	3b01      	subs	r3, #1
 80131ee:	9302      	str	r3, [sp, #8]
 80131f0:	9b01      	ldr	r3, [sp, #4]
 80131f2:	07db      	lsls	r3, r3, #31
 80131f4:	d501      	bpl.n	80131fa <_vprintf+0x1ea>
 80131f6:	9b02      	ldr	r3, [sp, #8]
 80131f8:	b11b      	cbz	r3, 8013202 <_vprintf+0x1f2>
 80131fa:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80131fe:	2900      	cmp	r1, #0
 8013200:	d1f0      	bne.n	80131e4 <_vprintf+0x1d4>
 8013202:	9b03      	ldr	r3, [sp, #12]
 8013204:	42b3      	cmp	r3, r6
 8013206:	ddb7      	ble.n	8013178 <_vprintf+0x168>
 8013208:	2120      	movs	r1, #32
 801320a:	a801      	add	r0, sp, #4
 801320c:	f7ff fe16 	bl	8012e3c <_xputch>
 8013210:	3601      	adds	r6, #1
 8013212:	e7f6      	b.n	8013202 <_vprintf+0x1f2>
 8013214:	9b01      	ldr	r3, [sp, #4]
 8013216:	f013 0304 	ands.w	r3, r3, #4
 801321a:	bf1d      	ittte	ne
 801321c:	3407      	addne	r4, #7
 801321e:	f024 0307 	bicne.w	r3, r4, #7
 8013222:	461c      	movne	r4, r3
 8013224:	f854 2b04 	ldreq.w	r2, [r4], #4
 8013228:	bf1c      	itt	ne
 801322a:	f854 2b08 	ldrne.w	r2, [r4], #8
 801322e:	685b      	ldrne	r3, [r3, #4]
 8013230:	e799      	b.n	8013166 <_vprintf+0x156>
 8013232:	bf00      	nop

08013234 <printf>:
 8013234:	b40f      	push	{r0, r1, r2, r3}
 8013236:	b507      	push	{r0, r1, r2, lr}
 8013238:	aa04      	add	r2, sp, #16
 801323a:	f852 1b04 	ldr.w	r1, [r2], #4
 801323e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013242:	9201      	str	r2, [sp, #4]
 8013244:	f7ff fee4 	bl	8013010 <_vprintf>
 8013248:	b003      	add	sp, #12
 801324a:	f85d eb04 	ldr.w	lr, [sp], #4
 801324e:	b004      	add	sp, #16
 8013250:	4770      	bx	lr
	...

08013254 <sprintf>:
 8013254:	b40e      	push	{r1, r2, r3}
 8013256:	b517      	push	{r0, r1, r2, r4, lr}
 8013258:	4c09      	ldr	r4, [pc, #36]	; (8013280 <sprintf+0x2c>)
 801325a:	aa05      	add	r2, sp, #20
 801325c:	f852 1b04 	ldr.w	r1, [r2], #4
 8013260:	6020      	str	r0, [r4, #0]
 8013262:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013266:	9201      	str	r2, [sp, #4]
 8013268:	f7ff fed2 	bl	8013010 <_vprintf>
 801326c:	2300      	movs	r3, #0
 801326e:	6822      	ldr	r2, [r4, #0]
 8013270:	6023      	str	r3, [r4, #0]
 8013272:	7013      	strb	r3, [r2, #0]
 8013274:	b003      	add	sp, #12
 8013276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801327a:	b003      	add	sp, #12
 801327c:	4770      	bx	lr
 801327e:	bf00      	nop
 8013280:	2000aef8 	strdcs	sl, [r0], -r8

08013284 <snprintf>:
 8013284:	b40c      	push	{r2, r3}
 8013286:	460b      	mov	r3, r1
 8013288:	b513      	push	{r0, r1, r4, lr}
 801328a:	4c09      	ldr	r4, [pc, #36]	; (80132b0 <snprintf+0x2c>)
 801328c:	aa04      	add	r2, sp, #16
 801328e:	f852 1b04 	ldr.w	r1, [r2], #4
 8013292:	6020      	str	r0, [r4, #0]
 8013294:	4618      	mov	r0, r3
 8013296:	9201      	str	r2, [sp, #4]
 8013298:	f7ff feba 	bl	8013010 <_vprintf>
 801329c:	2300      	movs	r3, #0
 801329e:	6822      	ldr	r2, [r4, #0]
 80132a0:	6023      	str	r3, [r4, #0]
 80132a2:	7013      	strb	r3, [r2, #0]
 80132a4:	b002      	add	sp, #8
 80132a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132aa:	b002      	add	sp, #8
 80132ac:	4770      	bx	lr
 80132ae:	bf00      	nop
 80132b0:	2000aef8 	strdcs	sl, [r0], -r8

080132b4 <vsnprintf>:
 80132b4:	b538      	push	{r3, r4, r5, lr}
 80132b6:	4605      	mov	r5, r0
 80132b8:	4c05      	ldr	r4, [pc, #20]	; (80132d0 <vsnprintf+0x1c>)
 80132ba:	4608      	mov	r0, r1
 80132bc:	4611      	mov	r1, r2
 80132be:	461a      	mov	r2, r3
 80132c0:	6025      	str	r5, [r4, #0]
 80132c2:	f7ff fea5 	bl	8013010 <_vprintf>
 80132c6:	2300      	movs	r3, #0
 80132c8:	6822      	ldr	r2, [r4, #0]
 80132ca:	6023      	str	r3, [r4, #0]
 80132cc:	7013      	strb	r3, [r2, #0]
 80132ce:	bd38      	pop	{r3, r4, r5, pc}
 80132d0:	2000aef8 	strdcs	sl, [r0], -r8

080132d4 <puts>:
 80132d4:	b508      	push	{r3, lr}
 80132d6:	f7ff fb17 	bl	8012908 <console_puts>
 80132da:	200a      	movs	r0, #10
 80132dc:	f7ff fb12 	bl	8012904 <console_putc>
 80132e0:	2001      	movs	r0, #1
 80132e2:	bd08      	pop	{r3, pc}

080132e4 <strtok>:
 80132e4:	b530      	push	{r4, r5, lr}
 80132e6:	b910      	cbnz	r0, 80132ee <strtok+0xa>
 80132e8:	4b12      	ldr	r3, [pc, #72]	; (8013334 <strtok+0x50>)
 80132ea:	6818      	ldr	r0, [r3, #0]
 80132ec:	b158      	cbz	r0, 8013306 <strtok+0x22>
 80132ee:	4603      	mov	r3, r0
 80132f0:	460d      	mov	r5, r1
 80132f2:	4618      	mov	r0, r3
 80132f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80132fc:	b924      	cbnz	r4, 8013308 <strtok+0x24>
 80132fe:	b94a      	cbnz	r2, 8013314 <strtok+0x30>
 8013300:	4610      	mov	r0, r2
 8013302:	4b0c      	ldr	r3, [pc, #48]	; (8013334 <strtok+0x50>)
 8013304:	601a      	str	r2, [r3, #0]
 8013306:	bd30      	pop	{r4, r5, pc}
 8013308:	42a2      	cmp	r2, r4
 801330a:	d1f5      	bne.n	80132f8 <strtok+0x14>
 801330c:	e7f0      	b.n	80132f0 <strtok+0xc>
 801330e:	4613      	mov	r3, r2
 8013310:	e00c      	b.n	801332c <strtok+0x48>
 8013312:	b914      	cbnz	r4, 801331a <strtok+0x36>
 8013314:	460d      	mov	r5, r1
 8013316:	f813 2b01 	ldrb.w	r2, [r3], #1
 801331a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801331e:	42a2      	cmp	r2, r4
 8013320:	d1f7      	bne.n	8013312 <strtok+0x2e>
 8013322:	2a00      	cmp	r2, #0
 8013324:	d0f3      	beq.n	801330e <strtok+0x2a>
 8013326:	2200      	movs	r2, #0
 8013328:	f803 2c01 	strb.w	r2, [r3, #-1]
 801332c:	4a01      	ldr	r2, [pc, #4]	; (8013334 <strtok+0x50>)
 801332e:	6013      	str	r3, [r2, #0]
 8013330:	e7e9      	b.n	8013306 <strtok+0x22>
 8013332:	bf00      	nop
 8013334:	2000aefc 	strdcs	sl, [r0], -ip

08013338 <isleapyear>:
 8013338:	2264      	movs	r2, #100	; 0x64
 801333a:	fb90 f3f2 	sdiv	r3, r0, r2
 801333e:	fb02 0313 	mls	r3, r2, r3, r0
 8013342:	b94b      	cbnz	r3, 8013358 <isleapyear+0x20>
 8013344:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013348:	fb90 f2f3 	sdiv	r2, r0, r3
 801334c:	fb03 0012 	mls	r0, r3, r2, r0
 8013350:	fab0 f080 	clz	r0, r0
 8013354:	0940      	lsrs	r0, r0, #5
 8013356:	4770      	bx	lr
 8013358:	f010 0f03 	tst.w	r0, #3
 801335c:	bf0c      	ite	eq
 801335e:	2001      	moveq	r0, #1
 8013360:	2000      	movne	r0, #0
 8013362:	4770      	bx	lr

08013364 <getdaysofmonth>:
 8013364:	b510      	push	{r4, lr}
 8013366:	4604      	mov	r4, r0
 8013368:	2c01      	cmp	r4, #1
 801336a:	4608      	mov	r0, r1
 801336c:	d102      	bne.n	8013374 <getdaysofmonth+0x10>
 801336e:	f7ff ffe3 	bl	8013338 <isleapyear>
 8013372:	b918      	cbnz	r0, 801337c <getdaysofmonth+0x18>
 8013374:	4b02      	ldr	r3, [pc, #8]	; (8013380 <getdaysofmonth+0x1c>)
 8013376:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801337a:	bd10      	pop	{r4, pc}
 801337c:	201d      	movs	r0, #29
 801337e:	e7fc      	b.n	801337a <getdaysofmonth+0x16>
 8013380:	08017508 	stmdaeq	r1, {r3, r8, sl, ip, sp, lr}

08013384 <mktime>:
 8013384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013388:	4604      	mov	r4, r0
 801338a:	2800      	cmp	r0, #0
 801338c:	d042      	beq.n	8013414 <mktime+0x90>
 801338e:	6941      	ldr	r1, [r0, #20]
 8013390:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8013394:	2b45      	cmp	r3, #69	; 0x45
 8013396:	d83d      	bhi.n	8013414 <mktime+0x90>
 8013398:	2600      	movs	r6, #0
 801339a:	f240 75b2 	movw	r5, #1970	; 0x7b2
 801339e:	f240 186d 	movw	r8, #365	; 0x16d
 80133a2:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 80133a6:	42af      	cmp	r7, r5
 80133a8:	da23      	bge.n	80133f2 <mktime+0x6e>
 80133aa:	6927      	ldr	r7, [r4, #16]
 80133ac:	2f0b      	cmp	r7, #11
 80133ae:	d831      	bhi.n	8013414 <mktime+0x90>
 80133b0:	2500      	movs	r5, #0
 80133b2:	42af      	cmp	r7, r5
 80133b4:	d128      	bne.n	8013408 <mktime+0x84>
 80133b6:	68e5      	ldr	r5, [r4, #12]
 80133b8:	2d00      	cmp	r5, #0
 80133ba:	dd2b      	ble.n	8013414 <mktime+0x90>
 80133bc:	4638      	mov	r0, r7
 80133be:	f7ff ffd1 	bl	8013364 <getdaysofmonth>
 80133c2:	4285      	cmp	r5, r0
 80133c4:	dc26      	bgt.n	8013414 <mktime+0x90>
 80133c6:	2318      	movs	r3, #24
 80133c8:	3d01      	subs	r5, #1
 80133ca:	4435      	add	r5, r6
 80133cc:	435d      	muls	r5, r3
 80133ce:	68a3      	ldr	r3, [r4, #8]
 80133d0:	2b17      	cmp	r3, #23
 80133d2:	d81f      	bhi.n	8013414 <mktime+0x90>
 80133d4:	203c      	movs	r0, #60	; 0x3c
 80133d6:	442b      	add	r3, r5
 80133d8:	fb00 f503 	mul.w	r5, r0, r3
 80133dc:	6863      	ldr	r3, [r4, #4]
 80133de:	2b3b      	cmp	r3, #59	; 0x3b
 80133e0:	d818      	bhi.n	8013414 <mktime+0x90>
 80133e2:	442b      	add	r3, r5
 80133e4:	4343      	muls	r3, r0
 80133e6:	6820      	ldr	r0, [r4, #0]
 80133e8:	283b      	cmp	r0, #59	; 0x3b
 80133ea:	d813      	bhi.n	8013414 <mktime+0x90>
 80133ec:	4418      	add	r0, r3
 80133ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133f2:	4628      	mov	r0, r5
 80133f4:	f7ff ffa0 	bl	8013338 <isleapyear>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	bf14      	ite	ne
 80133fc:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8013400:	4643      	moveq	r3, r8
 8013402:	3501      	adds	r5, #1
 8013404:	441e      	add	r6, r3
 8013406:	e7ce      	b.n	80133a6 <mktime+0x22>
 8013408:	4628      	mov	r0, r5
 801340a:	f7ff ffab 	bl	8013364 <getdaysofmonth>
 801340e:	3501      	adds	r5, #1
 8013410:	4406      	add	r6, r0
 8013412:	e7ce      	b.n	80133b2 <mktime+0x2e>
 8013414:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013418:	e7e9      	b.n	80133ee <mktime+0x6a>
	...

0801341c <gettimeofday>:
 801341c:	b538      	push	{r3, r4, r5, lr}
 801341e:	4b10      	ldr	r3, [pc, #64]	; (8013460 <gettimeofday+0x44>)
 8013420:	4a10      	ldr	r2, [pc, #64]	; (8013464 <gettimeofday+0x48>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	6814      	ldr	r4, [r2, #0]
 8013426:	6013      	str	r3, [r2, #0]
 8013428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801342c:	429c      	cmp	r4, r3
 801342e:	bf2c      	ite	cs
 8013430:	1ae4      	subcs	r4, r4, r3
 8013432:	1b1c      	subcc	r4, r3, r4
 8013434:	4354      	muls	r4, r2
 8013436:	4b0c      	ldr	r3, [pc, #48]	; (8013468 <gettimeofday+0x4c>)
 8013438:	4605      	mov	r5, r0
 801343a:	e9d3 2100 	ldrd	r2, r1, [r3]
 801343e:	18a4      	adds	r4, r4, r2
 8013440:	f141 0100 	adc.w	r1, r1, #0
 8013444:	e9c3 4100 	strd	r4, r1, [r3]
 8013448:	4620      	mov	r0, r4
 801344a:	2300      	movs	r3, #0
 801344c:	4a07      	ldr	r2, [pc, #28]	; (801346c <gettimeofday+0x50>)
 801344e:	f7f4 fb4f 	bl	8007af0 <__aeabi_uldivmod>
 8013452:	4b06      	ldr	r3, [pc, #24]	; (801346c <gettimeofday+0x50>)
 8013454:	6028      	str	r0, [r5, #0]
 8013456:	fb03 4410 	mls	r4, r3, r0, r4
 801345a:	2000      	movs	r0, #0
 801345c:	606c      	str	r4, [r5, #4]
 801345e:	bd38      	pop	{r3, r4, r5, pc}
 8013460:	2000af0c 	andcs	sl, r0, ip, lsl #30
 8013464:	2000af08 	andcs	sl, r0, r8, lsl #30
 8013468:	2000af00 	andcs	sl, r0, r0, lsl #30
 801346c:	000f4240 	andeq	r4, pc, r0, asr #4

08013470 <settimeofday>:
 8013470:	4b07      	ldr	r3, [pc, #28]	; (8013490 <settimeofday+0x20>)
 8013472:	b510      	push	{r4, lr}
 8013474:	681a      	ldr	r2, [r3, #0]
 8013476:	4b07      	ldr	r3, [pc, #28]	; (8013494 <settimeofday+0x24>)
 8013478:	6804      	ldr	r4, [r0, #0]
 801347a:	601a      	str	r2, [r3, #0]
 801347c:	6843      	ldr	r3, [r0, #4]
 801347e:	4806      	ldr	r0, [pc, #24]	; (8013498 <settimeofday+0x28>)
 8013480:	17da      	asrs	r2, r3, #31
 8013482:	fbc4 3200 	smlal	r3, r2, r4, r0
 8013486:	4905      	ldr	r1, [pc, #20]	; (801349c <settimeofday+0x2c>)
 8013488:	2000      	movs	r0, #0
 801348a:	e9c1 3200 	strd	r3, r2, [r1]
 801348e:	bd10      	pop	{r4, pc}
 8013490:	2000af0c 	andcs	sl, r0, ip, lsl #30
 8013494:	2000af08 	andcs	sl, r0, r8, lsl #30
 8013498:	000f4240 	andeq	r4, pc, r0, asr #4
 801349c:	2000af00 	andcs	sl, r0, r0, lsl #30

080134a0 <time>:
 80134a0:	b513      	push	{r0, r1, r4, lr}
 80134a2:	4604      	mov	r4, r0
 80134a4:	2100      	movs	r1, #0
 80134a6:	4668      	mov	r0, sp
 80134a8:	f7ff ffb8 	bl	801341c <gettimeofday>
 80134ac:	9800      	ldr	r0, [sp, #0]
 80134ae:	b104      	cbz	r4, 80134b2 <time+0x12>
 80134b0:	6020      	str	r0, [r4, #0]
 80134b2:	b002      	add	sp, #8
 80134b4:	bd10      	pop	{r4, pc}
	...

080134b8 <uart0_init>:
 80134b8:	2301      	movs	r3, #1
 80134ba:	b507      	push	{r0, r1, r2, lr}
 80134bc:	2208      	movs	r2, #8
 80134be:	9300      	str	r3, [sp, #0]
 80134c0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80134c4:	2300      	movs	r3, #0
 80134c6:	4803      	ldr	r0, [pc, #12]	; (80134d4 <uart0_init+0x1c>)
 80134c8:	f001 f834 	bl	8014534 <gd32_uart_begin>
 80134cc:	b003      	add	sp, #12
 80134ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80134d2:	bf00      	nop
 80134d4:	40013800 	andmi	r3, r1, r0, lsl #16

080134d8 <uart0_putc>:
 80134d8:	280a      	cmp	r0, #10
 80134da:	b538      	push	{r3, r4, r5, lr}
 80134dc:	4604      	mov	r4, r0
 80134de:	d10a      	bne.n	80134f6 <uart0_putc+0x1e>
 80134e0:	4d0b      	ldr	r5, [pc, #44]	; (8013510 <uart0_putc+0x38>)
 80134e2:	2107      	movs	r1, #7
 80134e4:	4628      	mov	r0, r5
 80134e6:	f000 fd8f 	bl	8014008 <usart_flag_get>
 80134ea:	2800      	cmp	r0, #0
 80134ec:	d0f9      	beq.n	80134e2 <uart0_putc+0xa>
 80134ee:	220d      	movs	r2, #13
 80134f0:	4b08      	ldr	r3, [pc, #32]	; (8013514 <uart0_putc+0x3c>)
 80134f2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80134f6:	4d06      	ldr	r5, [pc, #24]	; (8013510 <uart0_putc+0x38>)
 80134f8:	2107      	movs	r1, #7
 80134fa:	4628      	mov	r0, r5
 80134fc:	f000 fd84 	bl	8014008 <usart_flag_get>
 8013500:	2800      	cmp	r0, #0
 8013502:	d0f9      	beq.n	80134f8 <uart0_putc+0x20>
 8013504:	4b03      	ldr	r3, [pc, #12]	; (8013514 <uart0_putc+0x3c>)
 8013506:	b2e4      	uxtb	r4, r4
 8013508:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 801350c:	bd38      	pop	{r3, r4, r5, pc}
 801350e:	bf00      	nop
 8013510:	40013800 	andmi	r3, r1, r0, lsl #16
 8013514:	40013000 	andmi	r3, r1, r0

08013518 <uart0_puts>:
 8013518:	b510      	push	{r4, lr}
 801351a:	1e44      	subs	r4, r0, #1
 801351c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013520:	b903      	cbnz	r3, 8013524 <uart0_puts+0xc>
 8013522:	bd10      	pop	{r4, pc}
 8013524:	2b0a      	cmp	r3, #10
 8013526:	d102      	bne.n	801352e <uart0_puts+0x16>
 8013528:	200d      	movs	r0, #13
 801352a:	f7ff ffd5 	bl	80134d8 <uart0_putc>
 801352e:	7820      	ldrb	r0, [r4, #0]
 8013530:	f7ff ffd2 	bl	80134d8 <uart0_putc>
 8013534:	e7f2      	b.n	801351c <uart0_puts+0x4>
	...

08013538 <systick_config>:
 8013538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801353c:	4b0b      	ldr	r3, [pc, #44]	; (801356c <systick_config+0x34>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	fbb3 f3f2 	udiv	r3, r3, r2
 8013544:	3b01      	subs	r3, #1
 8013546:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801354a:	d20d      	bcs.n	8013568 <systick_config+0x30>
 801354c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8013550:	21f0      	movs	r1, #240	; 0xf0
 8013552:	6153      	str	r3, [r2, #20]
 8013554:	4b06      	ldr	r3, [pc, #24]	; (8013570 <systick_config+0x38>)
 8013556:	2007      	movs	r0, #7
 8013558:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 801355c:	2100      	movs	r1, #0
 801355e:	6191      	str	r1, [r2, #24]
 8013560:	6110      	str	r0, [r2, #16]
 8013562:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8013566:	4770      	bx	lr
 8013568:	e7fe      	b.n	8013568 <systick_config+0x30>
 801356a:	bf00      	nop
 801356c:	200000f4 	strdcs	r0, [r0], -r4
 8013570:	e000ed00 	and	lr, r0, r0, lsl #26

08013574 <SysTick_Handler>:
 8013574:	4a02      	ldr	r2, [pc, #8]	; (8013580 <SysTick_Handler+0xc>)
 8013576:	6813      	ldr	r3, [r2, #0]
 8013578:	3301      	adds	r3, #1
 801357a:	6013      	str	r3, [r2, #0]
 801357c:	4770      	bx	lr
 801357e:	bf00      	nop
 8013580:	2000af0c 	andcs	sl, r0, ip, lsl #30

08013584 <SystemInit>:
 8013584:	4b37      	ldr	r3, [pc, #220]	; (8013664 <SystemInit+0xe0>)
 8013586:	4838      	ldr	r0, [pc, #224]	; (8013668 <SystemInit+0xe4>)
 8013588:	681a      	ldr	r2, [r3, #0]
 801358a:	f042 0201 	orr.w	r2, r2, #1
 801358e:	601a      	str	r2, [r3, #0]
 8013590:	685a      	ldr	r2, [r3, #4]
 8013592:	f022 0203 	bic.w	r2, r2, #3
 8013596:	605a      	str	r2, [r3, #4]
 8013598:	6819      	ldr	r1, [r3, #0]
 801359a:	4001      	ands	r1, r0
 801359c:	6019      	str	r1, [r3, #0]
 801359e:	685a      	ldr	r2, [r3, #4]
 80135a0:	4932      	ldr	r1, [pc, #200]	; (801366c <SystemInit+0xe8>)
 80135a2:	4011      	ands	r1, r2
 80135a4:	6059      	str	r1, [r3, #4]
 80135a6:	681a      	ldr	r2, [r3, #0]
 80135a8:	4002      	ands	r2, r0
 80135aa:	601a      	str	r2, [r3, #0]
 80135ac:	681a      	ldr	r2, [r3, #0]
 80135ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80135b2:	601a      	str	r2, [r3, #0]
 80135b4:	685a      	ldr	r2, [r3, #4]
 80135b6:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 80135ba:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80135be:	605a      	str	r2, [r3, #4]
 80135c0:	2200      	movs	r2, #0
 80135c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80135c4:	681a      	ldr	r2, [r3, #0]
 80135c6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80135ca:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80135ce:	601a      	str	r2, [r3, #0]
 80135d0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80135d4:	609a      	str	r2, [r3, #8]
 80135d6:	681a      	ldr	r2, [r3, #0]
 80135d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80135dc:	601a      	str	r2, [r3, #0]
 80135de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135e2:	6819      	ldr	r1, [r3, #0]
 80135e4:	0389      	lsls	r1, r1, #14
 80135e6:	d401      	bmi.n	80135ec <SystemInit+0x68>
 80135e8:	3a01      	subs	r2, #1
 80135ea:	d1fa      	bne.n	80135e2 <SystemInit+0x5e>
 80135ec:	681a      	ldr	r2, [r3, #0]
 80135ee:	0392      	lsls	r2, r2, #14
 80135f0:	d400      	bmi.n	80135f4 <SystemInit+0x70>
 80135f2:	e7fe      	b.n	80135f2 <SystemInit+0x6e>
 80135f4:	685a      	ldr	r2, [r3, #4]
 80135f6:	605a      	str	r2, [r3, #4]
 80135f8:	685a      	ldr	r2, [r3, #4]
 80135fa:	605a      	str	r2, [r3, #4]
 80135fc:	685a      	ldr	r2, [r3, #4]
 80135fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013602:	605a      	str	r2, [r3, #4]
 8013604:	685a      	ldr	r2, [r3, #4]
 8013606:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 801360a:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 801360e:	605a      	str	r2, [r3, #4]
 8013610:	685a      	ldr	r2, [r3, #4]
 8013612:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8013616:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 801361a:	605a      	str	r2, [r3, #4]
 801361c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801361e:	4a14      	ldr	r2, [pc, #80]	; (8013670 <SystemInit+0xec>)
 8013620:	400a      	ands	r2, r1
 8013622:	62da      	str	r2, [r3, #44]	; 0x2c
 8013624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013626:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 801362a:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 801362e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013636:	601a      	str	r2, [r3, #0]
 8013638:	681a      	ldr	r2, [r3, #0]
 801363a:	0110      	lsls	r0, r2, #4
 801363c:	d5fc      	bpl.n	8013638 <SystemInit+0xb4>
 801363e:	681a      	ldr	r2, [r3, #0]
 8013640:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8013644:	601a      	str	r2, [r3, #0]
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	0191      	lsls	r1, r2, #6
 801364a:	d5fc      	bpl.n	8013646 <SystemInit+0xc2>
 801364c:	685a      	ldr	r2, [r3, #4]
 801364e:	f022 0203 	bic.w	r2, r2, #3
 8013652:	605a      	str	r2, [r3, #4]
 8013654:	685a      	ldr	r2, [r3, #4]
 8013656:	f042 0202 	orr.w	r2, r2, #2
 801365a:	605a      	str	r2, [r3, #4]
 801365c:	685a      	ldr	r2, [r3, #4]
 801365e:	0712      	lsls	r2, r2, #28
 8013660:	d5fc      	bpl.n	801365c <SystemInit+0xd8>
 8013662:	4770      	bx	lr
 8013664:	40021000 	andmi	r1, r2, r0
 8013668:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 801366c:	e0ff000c 	rscs	r0, pc, ip
 8013670:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08013674 <bkp_deinit>:
 8013674:	b508      	push	{r3, lr}
 8013676:	f000 f9f1 	bl	8013a5c <rcu_bkp_reset_enable>
 801367a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801367e:	f000 b9f5 	b.w	8013a6c <rcu_bkp_reset_disable>
	...

08013684 <bkp_data_write>:
 8013684:	f1a0 030b 	sub.w	r3, r0, #11
 8013688:	2b1f      	cmp	r3, #31
 801368a:	d804      	bhi.n	8013696 <bkp_data_write+0x12>
 801368c:	4b07      	ldr	r3, [pc, #28]	; (80136ac <bkp_data_write+0x28>)
 801368e:	4403      	add	r3, r0
 8013690:	009b      	lsls	r3, r3, #2
 8013692:	8019      	strh	r1, [r3, #0]
 8013694:	4770      	bx	lr
 8013696:	1e43      	subs	r3, r0, #1
 8013698:	2b09      	cmp	r3, #9
 801369a:	bf9f      	itttt	ls
 801369c:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 80136a0:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 80136a4:	0080      	lslls	r0, r0, #2
 80136a6:	8001      	strhls	r1, [r0, #0]
 80136a8:	4770      	bx	lr
 80136aa:	bf00      	nop
 80136ac:	10001b05 	andne	r1, r0, r5, lsl #22

080136b0 <bkp_data_read>:
 80136b0:	f1a0 030b 	sub.w	r3, r0, #11
 80136b4:	2b1f      	cmp	r3, #31
 80136b6:	d805      	bhi.n	80136c4 <bkp_data_read+0x14>
 80136b8:	4b08      	ldr	r3, [pc, #32]	; (80136dc <bkp_data_read+0x2c>)
 80136ba:	4403      	add	r3, r0
 80136bc:	009b      	lsls	r3, r3, #2
 80136be:	8818      	ldrh	r0, [r3, #0]
 80136c0:	b280      	uxth	r0, r0
 80136c2:	4770      	bx	lr
 80136c4:	1e43      	subs	r3, r0, #1
 80136c6:	2b09      	cmp	r3, #9
 80136c8:	d806      	bhi.n	80136d8 <bkp_data_read+0x28>
 80136ca:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 80136ce:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 80136d2:	0080      	lsls	r0, r0, #2
 80136d4:	8800      	ldrh	r0, [r0, #0]
 80136d6:	e7f3      	b.n	80136c0 <bkp_data_read+0x10>
 80136d8:	2000      	movs	r0, #0
 80136da:	4770      	bx	lr
 80136dc:	10001b05 	andne	r1, r0, r5, lsl #22

080136e0 <dma_deinit>:
 80136e0:	4b0c      	ldr	r3, [pc, #48]	; (8013714 <dma_deinit+0x34>)
 80136e2:	4298      	cmp	r0, r3
 80136e4:	d102      	bne.n	80136ec <dma_deinit+0xc>
 80136e6:	2904      	cmp	r1, #4
 80136e8:	d900      	bls.n	80136ec <dma_deinit+0xc>
 80136ea:	e7fe      	b.n	80136ea <dma_deinit+0xa>
 80136ec:	2314      	movs	r3, #20
 80136ee:	fb03 0301 	mla	r3, r3, r1, r0
 80136f2:	689a      	ldr	r2, [r3, #8]
 80136f4:	0089      	lsls	r1, r1, #2
 80136f6:	f022 0201 	bic.w	r2, r2, #1
 80136fa:	609a      	str	r2, [r3, #8]
 80136fc:	2200      	movs	r2, #0
 80136fe:	609a      	str	r2, [r3, #8]
 8013700:	60da      	str	r2, [r3, #12]
 8013702:	611a      	str	r2, [r3, #16]
 8013704:	615a      	str	r2, [r3, #20]
 8013706:	230f      	movs	r3, #15
 8013708:	6842      	ldr	r2, [r0, #4]
 801370a:	fa03 f101 	lsl.w	r1, r3, r1
 801370e:	4311      	orrs	r1, r2
 8013710:	6041      	str	r1, [r0, #4]
 8013712:	4770      	bx	lr
 8013714:	40020400 	andmi	r0, r2, r0, lsl #8

08013718 <dma_init>:
 8013718:	4b1b      	ldr	r3, [pc, #108]	; (8013788 <dma_init+0x70>)
 801371a:	b510      	push	{r4, lr}
 801371c:	4298      	cmp	r0, r3
 801371e:	d102      	bne.n	8013726 <dma_init+0xe>
 8013720:	2904      	cmp	r1, #4
 8013722:	d900      	bls.n	8013726 <dma_init+0xe>
 8013724:	e7fe      	b.n	8013724 <dma_init+0xc>
 8013726:	2314      	movs	r3, #20
 8013728:	fb03 0101 	mla	r1, r3, r1, r0
 801372c:	6813      	ldr	r3, [r2, #0]
 801372e:	610b      	str	r3, [r1, #16]
 8013730:	6893      	ldr	r3, [r2, #8]
 8013732:	614b      	str	r3, [r1, #20]
 8013734:	8a13      	ldrh	r3, [r2, #16]
 8013736:	60cb      	str	r3, [r1, #12]
 8013738:	68d4      	ldr	r4, [r2, #12]
 801373a:	6853      	ldr	r3, [r2, #4]
 801373c:	6888      	ldr	r0, [r1, #8]
 801373e:	4323      	orrs	r3, r4
 8013740:	6954      	ldr	r4, [r2, #20]
 8013742:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8013746:	4323      	orrs	r3, r4
 8013748:	4303      	orrs	r3, r0
 801374a:	608b      	str	r3, [r1, #8]
 801374c:	7e13      	ldrb	r3, [r2, #24]
 801374e:	2b01      	cmp	r3, #1
 8013750:	688b      	ldr	r3, [r1, #8]
 8013752:	bf0c      	ite	eq
 8013754:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8013758:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 801375c:	608b      	str	r3, [r1, #8]
 801375e:	7e53      	ldrb	r3, [r2, #25]
 8013760:	2b01      	cmp	r3, #1
 8013762:	688b      	ldr	r3, [r1, #8]
 8013764:	bf0c      	ite	eq
 8013766:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 801376a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 801376e:	608b      	str	r3, [r1, #8]
 8013770:	7e93      	ldrb	r3, [r2, #26]
 8013772:	b923      	cbnz	r3, 801377e <dma_init+0x66>
 8013774:	688b      	ldr	r3, [r1, #8]
 8013776:	f023 0310 	bic.w	r3, r3, #16
 801377a:	608b      	str	r3, [r1, #8]
 801377c:	bd10      	pop	{r4, pc}
 801377e:	688b      	ldr	r3, [r1, #8]
 8013780:	f043 0310 	orr.w	r3, r3, #16
 8013784:	e7f9      	b.n	801377a <dma_init+0x62>
 8013786:	bf00      	nop
 8013788:	40020400 	andmi	r0, r2, r0, lsl #8

0801378c <dma_circulation_disable>:
 801378c:	4b06      	ldr	r3, [pc, #24]	; (80137a8 <dma_circulation_disable+0x1c>)
 801378e:	4298      	cmp	r0, r3
 8013790:	d102      	bne.n	8013798 <dma_circulation_disable+0xc>
 8013792:	2904      	cmp	r1, #4
 8013794:	d900      	bls.n	8013798 <dma_circulation_disable+0xc>
 8013796:	e7fe      	b.n	8013796 <dma_circulation_disable+0xa>
 8013798:	2314      	movs	r3, #20
 801379a:	4359      	muls	r1, r3
 801379c:	3008      	adds	r0, #8
 801379e:	580b      	ldr	r3, [r1, r0]
 80137a0:	f023 0320 	bic.w	r3, r3, #32
 80137a4:	500b      	str	r3, [r1, r0]
 80137a6:	4770      	bx	lr
 80137a8:	40020400 	andmi	r0, r2, r0, lsl #8

080137ac <dma_memory_to_memory_disable>:
 80137ac:	4b06      	ldr	r3, [pc, #24]	; (80137c8 <dma_memory_to_memory_disable+0x1c>)
 80137ae:	4298      	cmp	r0, r3
 80137b0:	d102      	bne.n	80137b8 <dma_memory_to_memory_disable+0xc>
 80137b2:	2904      	cmp	r1, #4
 80137b4:	d900      	bls.n	80137b8 <dma_memory_to_memory_disable+0xc>
 80137b6:	e7fe      	b.n	80137b6 <dma_memory_to_memory_disable+0xa>
 80137b8:	2314      	movs	r3, #20
 80137ba:	4359      	muls	r1, r3
 80137bc:	3008      	adds	r0, #8
 80137be:	580b      	ldr	r3, [r1, r0]
 80137c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80137c4:	500b      	str	r3, [r1, r0]
 80137c6:	4770      	bx	lr
 80137c8:	40020400 	andmi	r0, r2, r0, lsl #8

080137cc <fmc_bank0_unlock>:
 80137cc:	4b04      	ldr	r3, [pc, #16]	; (80137e0 <fmc_bank0_unlock+0x14>)
 80137ce:	691a      	ldr	r2, [r3, #16]
 80137d0:	0612      	lsls	r2, r2, #24
 80137d2:	bf41      	itttt	mi
 80137d4:	4a03      	ldrmi	r2, [pc, #12]	; (80137e4 <fmc_bank0_unlock+0x18>)
 80137d6:	605a      	strmi	r2, [r3, #4]
 80137d8:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80137dc:	605a      	strmi	r2, [r3, #4]
 80137de:	4770      	bx	lr
 80137e0:	40022000 	andmi	r2, r2, r0
 80137e4:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080137e8 <fmc_bank1_unlock>:
 80137e8:	4b04      	ldr	r3, [pc, #16]	; (80137fc <fmc_bank1_unlock+0x14>)
 80137ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137ec:	0612      	lsls	r2, r2, #24
 80137ee:	bf41      	itttt	mi
 80137f0:	4a03      	ldrmi	r2, [pc, #12]	; (8013800 <fmc_bank1_unlock+0x18>)
 80137f2:	645a      	strmi	r2, [r3, #68]	; 0x44
 80137f4:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80137f8:	645a      	strmi	r2, [r3, #68]	; 0x44
 80137fa:	4770      	bx	lr
 80137fc:	40022000 	andmi	r2, r2, r0
 8013800:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08013804 <fmc_bank0_lock>:
 8013804:	4a02      	ldr	r2, [pc, #8]	; (8013810 <fmc_bank0_lock+0xc>)
 8013806:	6913      	ldr	r3, [r2, #16]
 8013808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801380c:	6113      	str	r3, [r2, #16]
 801380e:	4770      	bx	lr
 8013810:	40022000 	andmi	r2, r2, r0

08013814 <fmc_bank1_lock>:
 8013814:	4a02      	ldr	r2, [pc, #8]	; (8013820 <fmc_bank1_lock+0xc>)
 8013816:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8013818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801381c:	6513      	str	r3, [r2, #80]	; 0x50
 801381e:	4770      	bx	lr
 8013820:	40022000 	andmi	r2, r2, r0

08013824 <fmc_bank0_state_get>:
 8013824:	4b08      	ldr	r3, [pc, #32]	; (8013848 <fmc_bank0_state_get+0x24>)
 8013826:	68da      	ldr	r2, [r3, #12]
 8013828:	07d1      	lsls	r1, r2, #31
 801382a:	d409      	bmi.n	8013840 <fmc_bank0_state_get+0x1c>
 801382c:	68da      	ldr	r2, [r3, #12]
 801382e:	06d2      	lsls	r2, r2, #27
 8013830:	d408      	bmi.n	8013844 <fmc_bank0_state_get+0x20>
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	f013 0f04 	tst.w	r3, #4
 8013838:	bf0c      	ite	eq
 801383a:	2000      	moveq	r0, #0
 801383c:	2002      	movne	r0, #2
 801383e:	4770      	bx	lr
 8013840:	2001      	movs	r0, #1
 8013842:	4770      	bx	lr
 8013844:	2003      	movs	r0, #3
 8013846:	4770      	bx	lr
 8013848:	40022000 	andmi	r2, r2, r0

0801384c <fmc_bank1_state_get>:
 801384c:	4b08      	ldr	r3, [pc, #32]	; (8013870 <fmc_bank1_state_get+0x24>)
 801384e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013850:	07d1      	lsls	r1, r2, #31
 8013852:	d409      	bmi.n	8013868 <fmc_bank1_state_get+0x1c>
 8013854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013856:	06d2      	lsls	r2, r2, #27
 8013858:	d408      	bmi.n	801386c <fmc_bank1_state_get+0x20>
 801385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801385c:	f013 0f04 	tst.w	r3, #4
 8013860:	bf0c      	ite	eq
 8013862:	2000      	moveq	r0, #0
 8013864:	2002      	movne	r0, #2
 8013866:	4770      	bx	lr
 8013868:	2001      	movs	r0, #1
 801386a:	4770      	bx	lr
 801386c:	2003      	movs	r0, #3
 801386e:	4770      	bx	lr
 8013870:	40022000 	andmi	r2, r2, r0

08013874 <fwdgt_enable>:
 8013874:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8013878:	4b01      	ldr	r3, [pc, #4]	; (8013880 <fwdgt_enable+0xc>)
 801387a:	601a      	str	r2, [r3, #0]
 801387c:	4770      	bx	lr
 801387e:	bf00      	nop
 8013880:	40003000 	andmi	r3, r0, r0

08013884 <fwdgt_counter_reload>:
 8013884:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8013888:	4b01      	ldr	r3, [pc, #4]	; (8013890 <fwdgt_counter_reload+0xc>)
 801388a:	601a      	str	r2, [r3, #0]
 801388c:	4770      	bx	lr
 801388e:	bf00      	nop
 8013890:	40003000 	andmi	r3, r0, r0

08013894 <fwdgt_config>:
 8013894:	f245 5355 	movw	r3, #21845	; 0x5555
 8013898:	4a11      	ldr	r2, [pc, #68]	; (80138e0 <fwdgt_config+0x4c>)
 801389a:	b510      	push	{r4, lr}
 801389c:	4c11      	ldr	r4, [pc, #68]	; (80138e4 <fwdgt_config+0x50>)
 801389e:	6013      	str	r3, [r2, #0]
 80138a0:	68d3      	ldr	r3, [r2, #12]
 80138a2:	3c01      	subs	r4, #1
 80138a4:	f003 0301 	and.w	r3, r3, #1
 80138a8:	d013      	beq.n	80138d2 <fwdgt_config+0x3e>
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d1f8      	bne.n	80138a0 <fwdgt_config+0xc>
 80138ae:	6051      	str	r1, [r2, #4]
 80138b0:	490c      	ldr	r1, [pc, #48]	; (80138e4 <fwdgt_config+0x50>)
 80138b2:	4a0b      	ldr	r2, [pc, #44]	; (80138e0 <fwdgt_config+0x4c>)
 80138b4:	68d3      	ldr	r3, [r2, #12]
 80138b6:	3901      	subs	r1, #1
 80138b8:	f003 0302 	and.w	r3, r3, #2
 80138bc:	d00d      	beq.n	80138da <fwdgt_config+0x46>
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d1f8      	bne.n	80138b4 <fwdgt_config+0x20>
 80138c2:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80138c6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80138ca:	6090      	str	r0, [r2, #8]
 80138cc:	2001      	movs	r0, #1
 80138ce:	6013      	str	r3, [r2, #0]
 80138d0:	e002      	b.n	80138d8 <fwdgt_config+0x44>
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d0eb      	beq.n	80138ae <fwdgt_config+0x1a>
 80138d6:	2000      	movs	r0, #0
 80138d8:	bd10      	pop	{r4, pc}
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d1fb      	bne.n	80138d6 <fwdgt_config+0x42>
 80138de:	e7f0      	b.n	80138c2 <fwdgt_config+0x2e>
 80138e0:	40003000 	andmi	r3, r0, r0
 80138e4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080138e8 <gpio_init>:
 80138e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138ec:	f04f 0c0f 	mov.w	ip, #15
 80138f0:	06cf      	lsls	r7, r1, #27
 80138f2:	f04f 0400 	mov.w	r4, #0
 80138f6:	f04f 0701 	mov.w	r7, #1
 80138fa:	f001 050f 	and.w	r5, r1, #15
 80138fe:	bf48      	it	mi
 8013900:	4315      	orrmi	r5, r2
 8013902:	fa23 f204 	lsr.w	r2, r3, r4
 8013906:	07d6      	lsls	r6, r2, #31
 8013908:	d510      	bpl.n	801392c <gpio_init+0x44>
 801390a:	00a2      	lsls	r2, r4, #2
 801390c:	6806      	ldr	r6, [r0, #0]
 801390e:	fa0c fe02 	lsl.w	lr, ip, r2
 8013912:	ea26 060e 	bic.w	r6, r6, lr
 8013916:	fa05 f202 	lsl.w	r2, r5, r2
 801391a:	2928      	cmp	r1, #40	; 0x28
 801391c:	ea42 0206 	orr.w	r2, r2, r6
 8013920:	d128      	bne.n	8013974 <gpio_init+0x8c>
 8013922:	fa07 f604 	lsl.w	r6, r7, r4
 8013926:	401e      	ands	r6, r3
 8013928:	6146      	str	r6, [r0, #20]
 801392a:	6002      	str	r2, [r0, #0]
 801392c:	3401      	adds	r4, #1
 801392e:	2c08      	cmp	r4, #8
 8013930:	d1e7      	bne.n	8013902 <gpio_init+0x1a>
 8013932:	2600      	movs	r6, #0
 8013934:	f04f 0c0f 	mov.w	ip, #15
 8013938:	2701      	movs	r7, #1
 801393a:	f106 0208 	add.w	r2, r6, #8
 801393e:	fa23 f402 	lsr.w	r4, r3, r2
 8013942:	07e4      	lsls	r4, r4, #31
 8013944:	d511      	bpl.n	801396a <gpio_init+0x82>
 8013946:	00b4      	lsls	r4, r6, #2
 8013948:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801394c:	fa0c f804 	lsl.w	r8, ip, r4
 8013950:	ea2e 0e08 	bic.w	lr, lr, r8
 8013954:	fa05 f404 	lsl.w	r4, r5, r4
 8013958:	2928      	cmp	r1, #40	; 0x28
 801395a:	ea44 040e 	orr.w	r4, r4, lr
 801395e:	d110      	bne.n	8013982 <gpio_init+0x9a>
 8013960:	fa07 f202 	lsl.w	r2, r7, r2
 8013964:	401a      	ands	r2, r3
 8013966:	6142      	str	r2, [r0, #20]
 8013968:	6044      	str	r4, [r0, #4]
 801396a:	3601      	adds	r6, #1
 801396c:	2e08      	cmp	r6, #8
 801396e:	d1e4      	bne.n	801393a <gpio_init+0x52>
 8013970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013974:	2948      	cmp	r1, #72	; 0x48
 8013976:	bf02      	ittt	eq
 8013978:	fa07 f604 	lsleq.w	r6, r7, r4
 801397c:	401e      	andeq	r6, r3
 801397e:	6106      	streq	r6, [r0, #16]
 8013980:	e7d3      	b.n	801392a <gpio_init+0x42>
 8013982:	2948      	cmp	r1, #72	; 0x48
 8013984:	bf02      	ittt	eq
 8013986:	fa07 f202 	lsleq.w	r2, r7, r2
 801398a:	401a      	andeq	r2, r3
 801398c:	6102      	streq	r2, [r0, #16]
 801398e:	e7eb      	b.n	8013968 <gpio_init+0x80>

08013990 <gpio_pin_remap_config>:
 8013990:	2800      	cmp	r0, #0
 8013992:	4a16      	ldr	r2, [pc, #88]	; (80139ec <gpio_pin_remap_config+0x5c>)
 8013994:	b530      	push	{r4, r5, lr}
 8013996:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 801399a:	bfb4      	ite	lt
 801399c:	69d3      	ldrlt	r3, [r2, #28]
 801399e:	6853      	ldrge	r3, [r2, #4]
 80139a0:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 80139a4:	b284      	uxth	r4, r0
 80139a6:	d110      	bne.n	80139ca <gpio_pin_remap_config+0x3a>
 80139a8:	6855      	ldr	r5, [r2, #4]
 80139aa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80139ae:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 80139b2:	6055      	str	r5, [r2, #4]
 80139b4:	b119      	cbz	r1, 80139be <gpio_pin_remap_config+0x2e>
 80139b6:	0d42      	lsrs	r2, r0, #21
 80139b8:	0112      	lsls	r2, r2, #4
 80139ba:	4094      	lsls	r4, r2
 80139bc:	4323      	orrs	r3, r4
 80139be:	4a0b      	ldr	r2, [pc, #44]	; (80139ec <gpio_pin_remap_config+0x5c>)
 80139c0:	2800      	cmp	r0, #0
 80139c2:	bfb4      	ite	lt
 80139c4:	61d3      	strlt	r3, [r2, #28]
 80139c6:	6053      	strge	r3, [r2, #4]
 80139c8:	bd30      	pop	{r4, r5, pc}
 80139ca:	02c2      	lsls	r2, r0, #11
 80139cc:	bf4d      	iteet	mi
 80139ce:	2203      	movmi	r2, #3
 80139d0:	0d42      	lsrpl	r2, r0, #21
 80139d2:	0112      	lslpl	r2, r2, #4
 80139d4:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 80139d8:	bf4c      	ite	mi
 80139da:	40aa      	lslmi	r2, r5
 80139dc:	fa04 f202 	lslpl.w	r2, r4, r2
 80139e0:	ea23 0302 	bic.w	r3, r3, r2
 80139e4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80139e8:	e7e4      	b.n	80139b4 <gpio_pin_remap_config+0x24>
 80139ea:	bf00      	nop
 80139ec:	40010000 	andmi	r0, r1, r0

080139f0 <gpio_ethernet_phy_select>:
 80139f0:	4b04      	ldr	r3, [pc, #16]	; (8013a04 <gpio_ethernet_phy_select+0x14>)
 80139f2:	6859      	ldr	r1, [r3, #4]
 80139f4:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80139f8:	6059      	str	r1, [r3, #4]
 80139fa:	685a      	ldr	r2, [r3, #4]
 80139fc:	4302      	orrs	r2, r0
 80139fe:	605a      	str	r2, [r3, #4]
 8013a00:	4770      	bx	lr
 8013a02:	bf00      	nop
 8013a04:	40010000 	andmi	r0, r1, r0

08013a08 <pmu_backup_write_enable>:
 8013a08:	4a02      	ldr	r2, [pc, #8]	; (8013a14 <pmu_backup_write_enable+0xc>)
 8013a0a:	6813      	ldr	r3, [r2, #0]
 8013a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013a10:	6013      	str	r3, [r2, #0]
 8013a12:	4770      	bx	lr
 8013a14:	40007000 	andmi	r7, r0, r0

08013a18 <rcu_periph_clock_enable>:
 8013a18:	2201      	movs	r2, #1
 8013a1a:	0983      	lsrs	r3, r0, #6
 8013a1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013a20:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8013a24:	6819      	ldr	r1, [r3, #0]
 8013a26:	f000 001f 	and.w	r0, r0, #31
 8013a2a:	fa02 f000 	lsl.w	r0, r2, r0
 8013a2e:	4308      	orrs	r0, r1
 8013a30:	6018      	str	r0, [r3, #0]
 8013a32:	4770      	bx	lr

08013a34 <rcu_periph_clock_disable>:
 8013a34:	2101      	movs	r1, #1
 8013a36:	0983      	lsrs	r3, r0, #6
 8013a38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013a3c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8013a40:	681a      	ldr	r2, [r3, #0]
 8013a42:	f000 001f 	and.w	r0, r0, #31
 8013a46:	fa01 f000 	lsl.w	r0, r1, r0
 8013a4a:	ea22 0000 	bic.w	r0, r2, r0
 8013a4e:	6018      	str	r0, [r3, #0]
 8013a50:	4770      	bx	lr

08013a52 <rcu_periph_reset_enable>:
 8013a52:	f7ff bfe1 	b.w	8013a18 <rcu_periph_clock_enable>

08013a56 <rcu_periph_reset_disable>:
 8013a56:	f7ff bfed 	b.w	8013a34 <rcu_periph_clock_disable>
	...

08013a5c <rcu_bkp_reset_enable>:
 8013a5c:	4a02      	ldr	r2, [pc, #8]	; (8013a68 <rcu_bkp_reset_enable+0xc>)
 8013a5e:	6a13      	ldr	r3, [r2, #32]
 8013a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013a64:	6213      	str	r3, [r2, #32]
 8013a66:	4770      	bx	lr
 8013a68:	40021000 	andmi	r1, r2, r0

08013a6c <rcu_bkp_reset_disable>:
 8013a6c:	4a02      	ldr	r2, [pc, #8]	; (8013a78 <rcu_bkp_reset_disable+0xc>)
 8013a6e:	6a13      	ldr	r3, [r2, #32]
 8013a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013a74:	6213      	str	r3, [r2, #32]
 8013a76:	4770      	bx	lr
 8013a78:	40021000 	andmi	r1, r2, r0

08013a7c <rcu_ckout0_config>:
 8013a7c:	4a03      	ldr	r2, [pc, #12]	; (8013a8c <rcu_ckout0_config+0x10>)
 8013a7e:	6853      	ldr	r3, [r2, #4]
 8013a80:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8013a84:	4303      	orrs	r3, r0
 8013a86:	6053      	str	r3, [r2, #4]
 8013a88:	4770      	bx	lr
 8013a8a:	bf00      	nop
 8013a8c:	40021000 	andmi	r1, r2, r0

08013a90 <rcu_pll2_config>:
 8013a90:	4b04      	ldr	r3, [pc, #16]	; (8013aa4 <rcu_pll2_config+0x14>)
 8013a92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013a94:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8013a98:	62d9      	str	r1, [r3, #44]	; 0x2c
 8013a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a9c:	4302      	orrs	r2, r0
 8013a9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013aa0:	4770      	bx	lr
 8013aa2:	bf00      	nop
 8013aa4:	40021000 	andmi	r1, r2, r0

08013aa8 <rcu_adc_clock_config>:
 8013aa8:	490c      	ldr	r1, [pc, #48]	; (8013adc <rcu_adc_clock_config+0x34>)
 8013aaa:	2805      	cmp	r0, #5
 8013aac:	684b      	ldr	r3, [r1, #4]
 8013aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013ab2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8013ab6:	d006      	beq.n	8013ac6 <rcu_adc_clock_config+0x1e>
 8013ab8:	d803      	bhi.n	8013ac2 <rcu_adc_clock_config+0x1a>
 8013aba:	2804      	cmp	r0, #4
 8013abc:	d10a      	bne.n	8013ad4 <rcu_adc_clock_config+0x2c>
 8013abe:	604b      	str	r3, [r1, #4]
 8013ac0:	4770      	bx	lr
 8013ac2:	2807      	cmp	r0, #7
 8013ac4:	d1fb      	bne.n	8013abe <rcu_adc_clock_config+0x16>
 8013ac6:	4a06      	ldr	r2, [pc, #24]	; (8013ae0 <rcu_adc_clock_config+0x38>)
 8013ac8:	ea02 3080 	and.w	r0, r2, r0, lsl #14
 8013acc:	4303      	orrs	r3, r0
 8013ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ad2:	e7f4      	b.n	8013abe <rcu_adc_clock_config+0x16>
 8013ad4:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8013ad8:	e7f1      	b.n	8013abe <rcu_adc_clock_config+0x16>
 8013ada:	bf00      	nop
 8013adc:	40021000 	andmi	r1, r2, r0
 8013ae0:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08013ae4 <rcu_flag_get>:
 8013ae4:	0983      	lsrs	r3, r0, #6
 8013ae6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013aea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	f000 001f 	and.w	r0, r0, #31
 8013af4:	fa23 f000 	lsr.w	r0, r3, r0
 8013af8:	f000 0001 	and.w	r0, r0, #1
 8013afc:	4770      	bx	lr
	...

08013b00 <rcu_osci_stab_wait>:
 8013b00:	281a      	cmp	r0, #26
 8013b02:	b508      	push	{r3, lr}
 8013b04:	d051      	beq.n	8013baa <rcu_osci_stab_wait+0xaa>
 8013b06:	d806      	bhi.n	8013b16 <rcu_osci_stab_wait+0x16>
 8013b08:	2810      	cmp	r0, #16
 8013b0a:	d015      	beq.n	8013b38 <rcu_osci_stab_wait+0x38>
 8013b0c:	2818      	cmp	r0, #24
 8013b0e:	d043      	beq.n	8013b98 <rcu_osci_stab_wait+0x98>
 8013b10:	b368      	cbz	r0, 8013b6e <rcu_osci_stab_wait+0x6e>
 8013b12:	2000      	movs	r0, #0
 8013b14:	bd08      	pop	{r3, pc}
 8013b16:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8013b1a:	d01c      	beq.n	8013b56 <rcu_osci_stab_wait+0x56>
 8013b1c:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8013b20:	d02f      	beq.n	8013b82 <rcu_osci_stab_wait+0x82>
 8013b22:	281c      	cmp	r0, #28
 8013b24:	d1f5      	bne.n	8013b12 <rcu_osci_stab_wait+0x12>
 8013b26:	4a25      	ldr	r2, [pc, #148]	; (8013bbc <rcu_osci_stab_wait+0xbc>)
 8013b28:	201d      	movs	r0, #29
 8013b2a:	f7ff ffdb 	bl	8013ae4 <rcu_flag_get>
 8013b2e:	b908      	cbnz	r0, 8013b34 <rcu_osci_stab_wait+0x34>
 8013b30:	3a01      	subs	r2, #1
 8013b32:	d1f9      	bne.n	8013b28 <rcu_osci_stab_wait+0x28>
 8013b34:	201d      	movs	r0, #29
 8013b36:	e008      	b.n	8013b4a <rcu_osci_stab_wait+0x4a>
 8013b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b3c:	2011      	movs	r0, #17
 8013b3e:	f7ff ffd1 	bl	8013ae4 <rcu_flag_get>
 8013b42:	b908      	cbnz	r0, 8013b48 <rcu_osci_stab_wait+0x48>
 8013b44:	3a01      	subs	r2, #1
 8013b46:	d1f9      	bne.n	8013b3c <rcu_osci_stab_wait+0x3c>
 8013b48:	2011      	movs	r0, #17
 8013b4a:	f7ff ffcb 	bl	8013ae4 <rcu_flag_get>
 8013b4e:	3800      	subs	r0, #0
 8013b50:	bf18      	it	ne
 8013b52:	2001      	movne	r0, #1
 8013b54:	e7de      	b.n	8013b14 <rcu_osci_stab_wait+0x14>
 8013b56:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8013b5a:	f640 0001 	movw	r0, #2049	; 0x801
 8013b5e:	f7ff ffc1 	bl	8013ae4 <rcu_flag_get>
 8013b62:	b908      	cbnz	r0, 8013b68 <rcu_osci_stab_wait+0x68>
 8013b64:	3a01      	subs	r2, #1
 8013b66:	d1f8      	bne.n	8013b5a <rcu_osci_stab_wait+0x5a>
 8013b68:	f640 0001 	movw	r0, #2049	; 0x801
 8013b6c:	e7ed      	b.n	8013b4a <rcu_osci_stab_wait+0x4a>
 8013b6e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8013b72:	2001      	movs	r0, #1
 8013b74:	f7ff ffb6 	bl	8013ae4 <rcu_flag_get>
 8013b78:	b908      	cbnz	r0, 8013b7e <rcu_osci_stab_wait+0x7e>
 8013b7a:	3a01      	subs	r2, #1
 8013b7c:	d1f9      	bne.n	8013b72 <rcu_osci_stab_wait+0x72>
 8013b7e:	2001      	movs	r0, #1
 8013b80:	e7e3      	b.n	8013b4a <rcu_osci_stab_wait+0x4a>
 8013b82:	4a0e      	ldr	r2, [pc, #56]	; (8013bbc <rcu_osci_stab_wait+0xbc>)
 8013b84:	f640 1001 	movw	r0, #2305	; 0x901
 8013b88:	f7ff ffac 	bl	8013ae4 <rcu_flag_get>
 8013b8c:	b908      	cbnz	r0, 8013b92 <rcu_osci_stab_wait+0x92>
 8013b8e:	3a01      	subs	r2, #1
 8013b90:	d1f8      	bne.n	8013b84 <rcu_osci_stab_wait+0x84>
 8013b92:	f640 1001 	movw	r0, #2305	; 0x901
 8013b96:	e7d8      	b.n	8013b4a <rcu_osci_stab_wait+0x4a>
 8013b98:	4a08      	ldr	r2, [pc, #32]	; (8013bbc <rcu_osci_stab_wait+0xbc>)
 8013b9a:	2019      	movs	r0, #25
 8013b9c:	f7ff ffa2 	bl	8013ae4 <rcu_flag_get>
 8013ba0:	b908      	cbnz	r0, 8013ba6 <rcu_osci_stab_wait+0xa6>
 8013ba2:	3a01      	subs	r2, #1
 8013ba4:	d1f9      	bne.n	8013b9a <rcu_osci_stab_wait+0x9a>
 8013ba6:	2019      	movs	r0, #25
 8013ba8:	e7cf      	b.n	8013b4a <rcu_osci_stab_wait+0x4a>
 8013baa:	4a04      	ldr	r2, [pc, #16]	; (8013bbc <rcu_osci_stab_wait+0xbc>)
 8013bac:	201b      	movs	r0, #27
 8013bae:	f7ff ff99 	bl	8013ae4 <rcu_flag_get>
 8013bb2:	b908      	cbnz	r0, 8013bb8 <rcu_osci_stab_wait+0xb8>
 8013bb4:	3a01      	subs	r2, #1
 8013bb6:	d1f9      	bne.n	8013bac <rcu_osci_stab_wait+0xac>
 8013bb8:	201b      	movs	r0, #27
 8013bba:	e7c6      	b.n	8013b4a <rcu_osci_stab_wait+0x4a>
 8013bbc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08013bc0 <rcu_osci_on>:
 8013bc0:	f7ff bf2a 	b.w	8013a18 <rcu_periph_clock_enable>

08013bc4 <rcu_clock_freq_get>:
 8013bc4:	4b3d      	ldr	r3, [pc, #244]	; (8013cbc <rcu_clock_freq_get+0xf8>)
 8013bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bc8:	4604      	mov	r4, r0
 8013bca:	461f      	mov	r7, r3
 8013bcc:	b089      	sub	sp, #36	; 0x24
 8013bce:	ad04      	add	r5, sp, #16
 8013bd0:	f103 0610 	add.w	r6, r3, #16
 8013bd4:	462a      	mov	r2, r5
 8013bd6:	6818      	ldr	r0, [r3, #0]
 8013bd8:	6859      	ldr	r1, [r3, #4]
 8013bda:	3308      	adds	r3, #8
 8013bdc:	c203      	stmia	r2!, {r0, r1}
 8013bde:	42b3      	cmp	r3, r6
 8013be0:	4615      	mov	r5, r2
 8013be2:	d1f7      	bne.n	8013bd4 <rcu_clock_freq_get+0x10>
 8013be4:	466b      	mov	r3, sp
 8013be6:	6938      	ldr	r0, [r7, #16]
 8013be8:	6871      	ldr	r1, [r6, #4]
 8013bea:	4a35      	ldr	r2, [pc, #212]	; (8013cc0 <rcu_clock_freq_get+0xfc>)
 8013bec:	c303      	stmia	r3!, {r0, r1}
 8013bee:	c303      	stmia	r3!, {r0, r1}
 8013bf0:	6853      	ldr	r3, [r2, #4]
 8013bf2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013bf6:	2b01      	cmp	r3, #1
 8013bf8:	d053      	beq.n	8013ca2 <rcu_clock_freq_get+0xde>
 8013bfa:	2b02      	cmp	r3, #2
 8013bfc:	d153      	bne.n	8013ca6 <rcu_clock_freq_get+0xe2>
 8013bfe:	6853      	ldr	r3, [r2, #4]
 8013c00:	03dd      	lsls	r5, r3, #15
 8013c02:	d523      	bpl.n	8013c4c <rcu_clock_freq_get+0x88>
 8013c04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8013c06:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8013c0a:	4b2e      	ldr	r3, [pc, #184]	; (8013cc4 <rcu_clock_freq_get+0x100>)
 8013c0c:	d00e      	beq.n	8013c2c <rcu_clock_freq_get+0x68>
 8013c0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8013c10:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8013c12:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8013c16:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8013c1a:	3101      	adds	r1, #1
 8013c1c:	280f      	cmp	r0, #15
 8013c1e:	f100 0502 	add.w	r5, r0, #2
 8013c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8013c26:	bf08      	it	eq
 8013c28:	2514      	moveq	r5, #20
 8013c2a:	436b      	muls	r3, r5
 8013c2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8013c2e:	f001 010f 	and.w	r1, r1, #15
 8013c32:	3101      	adds	r1, #1
 8013c34:	fbb3 f3f1 	udiv	r3, r3, r1
 8013c38:	6851      	ldr	r1, [r2, #4]
 8013c3a:	6850      	ldr	r0, [r2, #4]
 8013c3c:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8013c40:	0080      	lsls	r0, r0, #2
 8013c42:	d505      	bpl.n	8013c50 <rcu_clock_freq_get+0x8c>
 8013c44:	f041 0110 	orr.w	r1, r1, #16
 8013c48:	1c48      	adds	r0, r1, #1
 8013c4a:	e007      	b.n	8013c5c <rcu_clock_freq_get+0x98>
 8013c4c:	4b1e      	ldr	r3, [pc, #120]	; (8013cc8 <rcu_clock_freq_get+0x104>)
 8013c4e:	e7f3      	b.n	8013c38 <rcu_clock_freq_get+0x74>
 8013c50:	290f      	cmp	r1, #15
 8013c52:	d0f9      	beq.n	8013c48 <rcu_clock_freq_get+0x84>
 8013c54:	290d      	cmp	r1, #13
 8013c56:	f101 0002 	add.w	r0, r1, #2
 8013c5a:	d01d      	beq.n	8013c98 <rcu_clock_freq_get+0xd4>
 8013c5c:	4343      	muls	r3, r0
 8013c5e:	6851      	ldr	r1, [r2, #4]
 8013c60:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8013c64:	3120      	adds	r1, #32
 8013c66:	4469      	add	r1, sp
 8013c68:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 8013c6c:	fa23 f001 	lsr.w	r0, r3, r1
 8013c70:	6851      	ldr	r1, [r2, #4]
 8013c72:	6852      	ldr	r2, [r2, #4]
 8013c74:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8013c78:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8013c7c:	3120      	adds	r1, #32
 8013c7e:	3220      	adds	r2, #32
 8013c80:	4469      	add	r1, sp
 8013c82:	446a      	add	r2, sp
 8013c84:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8013c88:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8013c8c:	2c03      	cmp	r4, #3
 8013c8e:	d813      	bhi.n	8013cb8 <rcu_clock_freq_get+0xf4>
 8013c90:	e8df f004 	tbb	[pc, r4]
 8013c94:	100e0c0b 	andne	r0, lr, fp, lsl #24
 8013c98:	2006      	movs	r0, #6
 8013c9a:	0859      	lsrs	r1, r3, #1
 8013c9c:	fb00 1303 	mla	r3, r0, r3, r1
 8013ca0:	e7dd      	b.n	8013c5e <rcu_clock_freq_get+0x9a>
 8013ca2:	4b08      	ldr	r3, [pc, #32]	; (8013cc4 <rcu_clock_freq_get+0x100>)
 8013ca4:	e7db      	b.n	8013c5e <rcu_clock_freq_get+0x9a>
 8013ca6:	4b09      	ldr	r3, [pc, #36]	; (8013ccc <rcu_clock_freq_get+0x108>)
 8013ca8:	e7d9      	b.n	8013c5e <rcu_clock_freq_get+0x9a>
 8013caa:	4618      	mov	r0, r3
 8013cac:	b009      	add	sp, #36	; 0x24
 8013cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cb0:	40c8      	lsrs	r0, r1
 8013cb2:	e7fb      	b.n	8013cac <rcu_clock_freq_get+0xe8>
 8013cb4:	40d0      	lsrs	r0, r2
 8013cb6:	e7f9      	b.n	8013cac <rcu_clock_freq_get+0xe8>
 8013cb8:	2000      	movs	r0, #0
 8013cba:	e7f7      	b.n	8013cac <rcu_clock_freq_get+0xe8>
 8013cbc:	0801520d 	stmdaeq	r1, {r0, r2, r3, r9, ip, lr}
 8013cc0:	40021000 	andmi	r1, r2, r0
 8013cc4:	017d7840 	cmneq	sp, r0, asr #16
 8013cc8:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8013ccc:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08013cd0 <timer_deinit>:
 8013cd0:	b508      	push	{r3, lr}
 8013cd2:	4b2d      	ldr	r3, [pc, #180]	; (8013d88 <timer_deinit+0xb8>)
 8013cd4:	4298      	cmp	r0, r3
 8013cd6:	d048      	beq.n	8013d6a <timer_deinit+0x9a>
 8013cd8:	d816      	bhi.n	8013d08 <timer_deinit+0x38>
 8013cda:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013cde:	4298      	cmp	r0, r3
 8013ce0:	d03c      	beq.n	8013d5c <timer_deinit+0x8c>
 8013ce2:	d807      	bhi.n	8013cf4 <timer_deinit+0x24>
 8013ce4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8013ce8:	d02a      	beq.n	8013d40 <timer_deinit+0x70>
 8013cea:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013cee:	4298      	cmp	r0, r3
 8013cf0:	d02d      	beq.n	8013d4e <timer_deinit+0x7e>
 8013cf2:	bd08      	pop	{r3, pc}
 8013cf4:	4b25      	ldr	r3, [pc, #148]	; (8013d8c <timer_deinit+0xbc>)
 8013cf6:	4298      	cmp	r0, r3
 8013cf8:	d1fb      	bne.n	8013cf2 <timer_deinit+0x22>
 8013cfa:	f240 4003 	movw	r0, #1027	; 0x403
 8013cfe:	f7ff fea8 	bl	8013a52 <rcu_periph_reset_enable>
 8013d02:	f240 4003 	movw	r0, #1027	; 0x403
 8013d06:	e017      	b.n	8013d38 <timer_deinit+0x68>
 8013d08:	4b21      	ldr	r3, [pc, #132]	; (8013d90 <timer_deinit+0xc0>)
 8013d0a:	4298      	cmp	r0, r3
 8013d0c:	d00e      	beq.n	8013d2c <timer_deinit+0x5c>
 8013d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d12:	4298      	cmp	r0, r3
 8013d14:	d030      	beq.n	8013d78 <timer_deinit+0xa8>
 8013d16:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8013d1a:	4298      	cmp	r0, r3
 8013d1c:	d1e9      	bne.n	8013cf2 <timer_deinit+0x22>
 8013d1e:	f240 4005 	movw	r0, #1029	; 0x405
 8013d22:	f7ff fe96 	bl	8013a52 <rcu_periph_reset_enable>
 8013d26:	f240 4005 	movw	r0, #1029	; 0x405
 8013d2a:	e005      	b.n	8013d38 <timer_deinit+0x68>
 8013d2c:	f240 300b 	movw	r0, #779	; 0x30b
 8013d30:	f7ff fe8f 	bl	8013a52 <rcu_periph_reset_enable>
 8013d34:	f240 300b 	movw	r0, #779	; 0x30b
 8013d38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013d3c:	f7ff be8b 	b.w	8013a56 <rcu_periph_reset_disable>
 8013d40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013d44:	f7ff fe85 	bl	8013a52 <rcu_periph_reset_enable>
 8013d48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013d4c:	e7f4      	b.n	8013d38 <timer_deinit+0x68>
 8013d4e:	f240 4001 	movw	r0, #1025	; 0x401
 8013d52:	f7ff fe7e 	bl	8013a52 <rcu_periph_reset_enable>
 8013d56:	f240 4001 	movw	r0, #1025	; 0x401
 8013d5a:	e7ed      	b.n	8013d38 <timer_deinit+0x68>
 8013d5c:	f240 4002 	movw	r0, #1026	; 0x402
 8013d60:	f7ff fe77 	bl	8013a52 <rcu_periph_reset_enable>
 8013d64:	f240 4002 	movw	r0, #1026	; 0x402
 8013d68:	e7e6      	b.n	8013d38 <timer_deinit+0x68>
 8013d6a:	f240 4004 	movw	r0, #1028	; 0x404
 8013d6e:	f7ff fe70 	bl	8013a52 <rcu_periph_reset_enable>
 8013d72:	f240 4004 	movw	r0, #1028	; 0x404
 8013d76:	e7df      	b.n	8013d38 <timer_deinit+0x68>
 8013d78:	f240 300d 	movw	r0, #781	; 0x30d
 8013d7c:	f7ff fe69 	bl	8013a52 <rcu_periph_reset_enable>
 8013d80:	f240 300d 	movw	r0, #781	; 0x30d
 8013d84:	e7d8      	b.n	8013d38 <timer_deinit+0x68>
 8013d86:	bf00      	nop
 8013d88:	40001000 	andmi	r1, r0, r0
 8013d8c:	40000c00 	andmi	r0, r0, r0, lsl #24
 8013d90:	40012c00 	andmi	r2, r1, r0, lsl #24

08013d94 <timer_init>:
 8013d94:	880b      	ldrh	r3, [r1, #0]
 8013d96:	6283      	str	r3, [r0, #40]	; 0x28
 8013d98:	4b26      	ldr	r3, [pc, #152]	; (8013e34 <timer_init+0xa0>)
 8013d9a:	4298      	cmp	r0, r3
 8013d9c:	d018      	beq.n	8013dd0 <timer_init+0x3c>
 8013d9e:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8013da2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8013da6:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8013daa:	d011      	beq.n	8013dd0 <timer_init+0x3c>
 8013dac:	4a22      	ldr	r2, [pc, #136]	; (8013e38 <timer_init+0xa4>)
 8013dae:	4290      	cmp	r0, r2
 8013db0:	d00e      	beq.n	8013dd0 <timer_init+0x3c>
 8013db2:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8013db6:	4290      	cmp	r0, r2
 8013db8:	d00a      	beq.n	8013dd0 <timer_init+0x3c>
 8013dba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	d006      	beq.n	8013dd0 <timer_init+0x3c>
 8013dc2:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8013dc6:	4293      	cmp	r3, r2
 8013dc8:	d002      	beq.n	8013dd0 <timer_init+0x3c>
 8013dca:	4b1c      	ldr	r3, [pc, #112]	; (8013e3c <timer_init+0xa8>)
 8013dcc:	4298      	cmp	r0, r3
 8013dce:	d10f      	bne.n	8013df0 <timer_init+0x5c>
 8013dd0:	6803      	ldr	r3, [r0, #0]
 8013dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013dd6:	6003      	str	r3, [r0, #0]
 8013dd8:	884b      	ldrh	r3, [r1, #2]
 8013dda:	6802      	ldr	r2, [r0, #0]
 8013ddc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013de0:	4313      	orrs	r3, r2
 8013de2:	6003      	str	r3, [r0, #0]
 8013de4:	888b      	ldrh	r3, [r1, #4]
 8013de6:	6802      	ldr	r2, [r0, #0]
 8013de8:	f003 0310 	and.w	r3, r3, #16
 8013dec:	4313      	orrs	r3, r2
 8013dee:	6003      	str	r3, [r0, #0]
 8013df0:	688b      	ldr	r3, [r1, #8]
 8013df2:	62c3      	str	r3, [r0, #44]	; 0x2c
 8013df4:	4b12      	ldr	r3, [pc, #72]	; (8013e40 <timer_init+0xac>)
 8013df6:	4298      	cmp	r0, r3
 8013df8:	d003      	beq.n	8013e02 <timer_init+0x6e>
 8013dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013dfe:	4298      	cmp	r0, r3
 8013e00:	d104      	bne.n	8013e0c <timer_init+0x78>
 8013e02:	6943      	ldr	r3, [r0, #20]
 8013e04:	f043 0301 	orr.w	r3, r3, #1
 8013e08:	6143      	str	r3, [r0, #20]
 8013e0a:	4770      	bx	lr
 8013e0c:	6803      	ldr	r3, [r0, #0]
 8013e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013e12:	6003      	str	r3, [r0, #0]
 8013e14:	898b      	ldrh	r3, [r1, #12]
 8013e16:	6802      	ldr	r2, [r0, #0]
 8013e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013e1c:	4313      	orrs	r3, r2
 8013e1e:	6003      	str	r3, [r0, #0]
 8013e20:	4b04      	ldr	r3, [pc, #16]	; (8013e34 <timer_init+0xa0>)
 8013e22:	4298      	cmp	r0, r3
 8013e24:	d002      	beq.n	8013e2c <timer_init+0x98>
 8013e26:	4b04      	ldr	r3, [pc, #16]	; (8013e38 <timer_init+0xa4>)
 8013e28:	4298      	cmp	r0, r3
 8013e2a:	d1ea      	bne.n	8013e02 <timer_init+0x6e>
 8013e2c:	7b8b      	ldrb	r3, [r1, #14]
 8013e2e:	6303      	str	r3, [r0, #48]	; 0x30
 8013e30:	e7e7      	b.n	8013e02 <timer_init+0x6e>
 8013e32:	bf00      	nop
 8013e34:	40012c00 	andmi	r2, r1, r0, lsl #24
 8013e38:	40013400 	andmi	r3, r1, r0, lsl #8
 8013e3c:	40002000 	andmi	r2, r0, r0
 8013e40:	40001000 	andmi	r1, r0, r0

08013e44 <timer_enable>:
 8013e44:	6803      	ldr	r3, [r0, #0]
 8013e46:	f043 0301 	orr.w	r3, r3, #1
 8013e4a:	6003      	str	r3, [r0, #0]
 8013e4c:	4770      	bx	lr

08013e4e <timer_channel_output_mode_config>:
 8013e4e:	2903      	cmp	r1, #3
 8013e50:	d81a      	bhi.n	8013e88 <timer_channel_output_mode_config+0x3a>
 8013e52:	e8df f001 	tbb	[pc, r1]
 8013e56:	1a120a02 	bne	8496666 <__exidx_end+0x47f126>
 8013e5a:	6983      	ldr	r3, [r0, #24]
 8013e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013e60:	6183      	str	r3, [r0, #24]
 8013e62:	6983      	ldr	r3, [r0, #24]
 8013e64:	431a      	orrs	r2, r3
 8013e66:	6182      	str	r2, [r0, #24]
 8013e68:	4770      	bx	lr
 8013e6a:	6983      	ldr	r3, [r0, #24]
 8013e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013e70:	6183      	str	r3, [r0, #24]
 8013e72:	6983      	ldr	r3, [r0, #24]
 8013e74:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8013e78:	e7f5      	b.n	8013e66 <timer_channel_output_mode_config+0x18>
 8013e7a:	69c3      	ldr	r3, [r0, #28]
 8013e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013e80:	61c3      	str	r3, [r0, #28]
 8013e82:	69c3      	ldr	r3, [r0, #28]
 8013e84:	431a      	orrs	r2, r3
 8013e86:	61c2      	str	r2, [r0, #28]
 8013e88:	4770      	bx	lr
 8013e8a:	69c3      	ldr	r3, [r0, #28]
 8013e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013e90:	61c3      	str	r3, [r0, #28]
 8013e92:	69c3      	ldr	r3, [r0, #28]
 8013e94:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8013e98:	e7f5      	b.n	8013e86 <timer_channel_output_mode_config+0x38>

08013e9a <timer_channel_output_pulse_value_config>:
 8013e9a:	2903      	cmp	r1, #3
 8013e9c:	d80a      	bhi.n	8013eb4 <timer_channel_output_pulse_value_config+0x1a>
 8013e9e:	e8df f001 	tbb	[pc, r1]
 8013ea2:	08060402 	stmdaeq	r6, {r1, sl}
 8013ea6:	6342      	str	r2, [r0, #52]	; 0x34
 8013ea8:	4770      	bx	lr
 8013eaa:	6382      	str	r2, [r0, #56]	; 0x38
 8013eac:	4770      	bx	lr
 8013eae:	63c2      	str	r2, [r0, #60]	; 0x3c
 8013eb0:	4770      	bx	lr
 8013eb2:	6402      	str	r2, [r0, #64]	; 0x40
 8013eb4:	4770      	bx	lr

08013eb6 <timer_interrupt_enable>:
 8013eb6:	68c3      	ldr	r3, [r0, #12]
 8013eb8:	430b      	orrs	r3, r1
 8013eba:	60c3      	str	r3, [r0, #12]
 8013ebc:	4770      	bx	lr

08013ebe <timer_interrupt_flag_clear>:
 8013ebe:	43c9      	mvns	r1, r1
 8013ec0:	6101      	str	r1, [r0, #16]
 8013ec2:	4770      	bx	lr

08013ec4 <timer_flag_clear>:
 8013ec4:	43c9      	mvns	r1, r1
 8013ec6:	6101      	str	r1, [r0, #16]
 8013ec8:	4770      	bx	lr
	...

08013ecc <usart_deinit>:
 8013ecc:	b508      	push	{r3, lr}
 8013ece:	4b1d      	ldr	r3, [pc, #116]	; (8013f44 <usart_deinit+0x78>)
 8013ed0:	4298      	cmp	r0, r3
 8013ed2:	d028      	beq.n	8013f26 <usart_deinit+0x5a>
 8013ed4:	d808      	bhi.n	8013ee8 <usart_deinit+0x1c>
 8013ed6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013eda:	4298      	cmp	r0, r3
 8013edc:	d015      	beq.n	8013f0a <usart_deinit+0x3e>
 8013ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013ee2:	4298      	cmp	r0, r3
 8013ee4:	d018      	beq.n	8013f18 <usart_deinit+0x4c>
 8013ee6:	bd08      	pop	{r3, pc}
 8013ee8:	4b17      	ldr	r3, [pc, #92]	; (8013f48 <usart_deinit+0x7c>)
 8013eea:	4298      	cmp	r0, r3
 8013eec:	d022      	beq.n	8013f34 <usart_deinit+0x68>
 8013eee:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8013ef2:	4298      	cmp	r0, r3
 8013ef4:	d1f7      	bne.n	8013ee6 <usart_deinit+0x1a>
 8013ef6:	f240 300e 	movw	r0, #782	; 0x30e
 8013efa:	f7ff fdaa 	bl	8013a52 <rcu_periph_reset_enable>
 8013efe:	f240 300e 	movw	r0, #782	; 0x30e
 8013f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013f06:	f7ff bda6 	b.w	8013a56 <rcu_periph_reset_disable>
 8013f0a:	f240 4011 	movw	r0, #1041	; 0x411
 8013f0e:	f7ff fda0 	bl	8013a52 <rcu_periph_reset_enable>
 8013f12:	f240 4011 	movw	r0, #1041	; 0x411
 8013f16:	e7f4      	b.n	8013f02 <usart_deinit+0x36>
 8013f18:	f240 4012 	movw	r0, #1042	; 0x412
 8013f1c:	f7ff fd99 	bl	8013a52 <rcu_periph_reset_enable>
 8013f20:	f240 4012 	movw	r0, #1042	; 0x412
 8013f24:	e7ed      	b.n	8013f02 <usart_deinit+0x36>
 8013f26:	f240 4013 	movw	r0, #1043	; 0x413
 8013f2a:	f7ff fd92 	bl	8013a52 <rcu_periph_reset_enable>
 8013f2e:	f240 4013 	movw	r0, #1043	; 0x413
 8013f32:	e7e6      	b.n	8013f02 <usart_deinit+0x36>
 8013f34:	f240 4014 	movw	r0, #1044	; 0x414
 8013f38:	f7ff fd8b 	bl	8013a52 <rcu_periph_reset_enable>
 8013f3c:	f240 4014 	movw	r0, #1044	; 0x414
 8013f40:	e7df      	b.n	8013f02 <usart_deinit+0x36>
 8013f42:	bf00      	nop
 8013f44:	40004c00 	andmi	r4, r0, r0, lsl #24
 8013f48:	40005000 	andmi	r5, r0, r0

08013f4c <usart_baudrate_set>:
 8013f4c:	b538      	push	{r3, r4, r5, lr}
 8013f4e:	4b11      	ldr	r3, [pc, #68]	; (8013f94 <usart_baudrate_set+0x48>)
 8013f50:	4604      	mov	r4, r0
 8013f52:	4298      	cmp	r0, r3
 8013f54:	460d      	mov	r5, r1
 8013f56:	d01b      	beq.n	8013f90 <usart_baudrate_set+0x44>
 8013f58:	d809      	bhi.n	8013f6e <usart_baudrate_set+0x22>
 8013f5a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013f5e:	4298      	cmp	r0, r3
 8013f60:	d016      	beq.n	8013f90 <usart_baudrate_set+0x44>
 8013f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013f66:	4298      	cmp	r0, r3
 8013f68:	d012      	beq.n	8013f90 <usart_baudrate_set+0x44>
 8013f6a:	2000      	movs	r0, #0
 8013f6c:	e009      	b.n	8013f82 <usart_baudrate_set+0x36>
 8013f6e:	4b0a      	ldr	r3, [pc, #40]	; (8013f98 <usart_baudrate_set+0x4c>)
 8013f70:	4298      	cmp	r0, r3
 8013f72:	d00d      	beq.n	8013f90 <usart_baudrate_set+0x44>
 8013f74:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8013f78:	4298      	cmp	r0, r3
 8013f7a:	d1f6      	bne.n	8013f6a <usart_baudrate_set+0x1e>
 8013f7c:	2003      	movs	r0, #3
 8013f7e:	f7ff fe21 	bl	8013bc4 <rcu_clock_freq_get>
 8013f82:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 8013f86:	fbb3 f1f5 	udiv	r1, r3, r5
 8013f8a:	b289      	uxth	r1, r1
 8013f8c:	60a1      	str	r1, [r4, #8]
 8013f8e:	bd38      	pop	{r3, r4, r5, pc}
 8013f90:	2002      	movs	r0, #2
 8013f92:	e7f4      	b.n	8013f7e <usart_baudrate_set+0x32>
 8013f94:	40004c00 	andmi	r4, r0, r0, lsl #24
 8013f98:	40005000 	andmi	r5, r0, r0

08013f9c <usart_parity_config>:
 8013f9c:	68c2      	ldr	r2, [r0, #12]
 8013f9e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8013fa2:	60c2      	str	r2, [r0, #12]
 8013fa4:	68c3      	ldr	r3, [r0, #12]
 8013fa6:	430b      	orrs	r3, r1
 8013fa8:	60c3      	str	r3, [r0, #12]
 8013faa:	4770      	bx	lr

08013fac <usart_word_length_set>:
 8013fac:	68c2      	ldr	r2, [r0, #12]
 8013fae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013fb2:	60c2      	str	r2, [r0, #12]
 8013fb4:	68c3      	ldr	r3, [r0, #12]
 8013fb6:	430b      	orrs	r3, r1
 8013fb8:	60c3      	str	r3, [r0, #12]
 8013fba:	4770      	bx	lr

08013fbc <usart_stop_bit_set>:
 8013fbc:	6902      	ldr	r2, [r0, #16]
 8013fbe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8013fc2:	6102      	str	r2, [r0, #16]
 8013fc4:	6903      	ldr	r3, [r0, #16]
 8013fc6:	430b      	orrs	r3, r1
 8013fc8:	6103      	str	r3, [r0, #16]
 8013fca:	4770      	bx	lr

08013fcc <usart_transmit_config>:
 8013fcc:	68c3      	ldr	r3, [r0, #12]
 8013fce:	f023 0308 	bic.w	r3, r3, #8
 8013fd2:	430b      	orrs	r3, r1
 8013fd4:	60c3      	str	r3, [r0, #12]
 8013fd6:	4770      	bx	lr

08013fd8 <usart_receive_config>:
 8013fd8:	68c3      	ldr	r3, [r0, #12]
 8013fda:	f023 0304 	bic.w	r3, r3, #4
 8013fde:	430b      	orrs	r3, r1
 8013fe0:	60c3      	str	r3, [r0, #12]
 8013fe2:	4770      	bx	lr

08013fe4 <usart_hardware_flow_rts_config>:
 8013fe4:	6943      	ldr	r3, [r0, #20]
 8013fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013fea:	430b      	orrs	r3, r1
 8013fec:	6143      	str	r3, [r0, #20]
 8013fee:	4770      	bx	lr

08013ff0 <usart_hardware_flow_cts_config>:
 8013ff0:	6943      	ldr	r3, [r0, #20]
 8013ff2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013ff6:	430b      	orrs	r3, r1
 8013ff8:	6143      	str	r3, [r0, #20]
 8013ffa:	4770      	bx	lr

08013ffc <usart_dma_transmit_config>:
 8013ffc:	6943      	ldr	r3, [r0, #20]
 8013ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014002:	430b      	orrs	r3, r1
 8014004:	6143      	str	r3, [r0, #20]
 8014006:	4770      	bx	lr

08014008 <usart_flag_get>:
 8014008:	098b      	lsrs	r3, r1, #6
 801400a:	5818      	ldr	r0, [r3, r0]
 801400c:	f001 011f 	and.w	r1, r1, #31
 8014010:	40c8      	lsrs	r0, r1
 8014012:	f000 0001 	and.w	r0, r0, #1
 8014016:	4770      	bx	lr

08014018 <usart_interrupt_enable>:
 8014018:	2301      	movs	r3, #1
 801401a:	b510      	push	{r4, lr}
 801401c:	f3c1 1289 	ubfx	r2, r1, #6, #10
 8014020:	5814      	ldr	r4, [r2, r0]
 8014022:	f001 011f 	and.w	r1, r1, #31
 8014026:	fa03 f101 	lsl.w	r1, r3, r1
 801402a:	4321      	orrs	r1, r4
 801402c:	5011      	str	r1, [r2, r0]
 801402e:	bd10      	pop	{r4, pc}

08014030 <usart_interrupt_disable>:
 8014030:	2201      	movs	r2, #1
 8014032:	b510      	push	{r4, lr}
 8014034:	f3c1 1489 	ubfx	r4, r1, #6, #10
 8014038:	5823      	ldr	r3, [r4, r0]
 801403a:	f001 011f 	and.w	r1, r1, #31
 801403e:	fa02 f101 	lsl.w	r1, r2, r1
 8014042:	ea23 0101 	bic.w	r1, r3, r1
 8014046:	5021      	str	r1, [r4, r0]
 8014048:	bd10      	pop	{r4, pc}

0801404a <usart_interrupt_flag_clear>:
 801404a:	2201      	movs	r2, #1
 801404c:	b510      	push	{r4, lr}
 801404e:	0d8c      	lsrs	r4, r1, #22
 8014050:	5823      	ldr	r3, [r4, r0]
 8014052:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8014056:	fa02 f101 	lsl.w	r1, r2, r1
 801405a:	ea23 0101 	bic.w	r1, r3, r1
 801405e:	5021      	str	r1, [r4, r0]
 8014060:	bd10      	pop	{r4, pc}
	...

08014064 <emac_start>:
 8014064:	b510      	push	{r4, lr}
 8014066:	4604      	mov	r4, r0
 8014068:	f240 6002 	movw	r0, #1538	; 0x602
 801406c:	f7ff fcd4 	bl	8013a18 <rcu_periph_clock_enable>
 8014070:	f240 6003 	movw	r0, #1539	; 0x603
 8014074:	f7ff fcd0 	bl	8013a18 <rcu_periph_clock_enable>
 8014078:	f240 6004 	movw	r0, #1540	; 0x604
 801407c:	f7ff fccc 	bl	8013a18 <rcu_periph_clock_enable>
 8014080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014084:	2203      	movs	r2, #3
 8014086:	2118      	movs	r1, #24
 8014088:	4846      	ldr	r0, [pc, #280]	; (80141a4 <emac_start+0x140>)
 801408a:	f7ff fc2d 	bl	80138e8 <gpio_init>
 801408e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8014092:	f7ff fcc1 	bl	8013a18 <rcu_periph_clock_enable>
 8014096:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801409a:	f7ff fcf9 	bl	8013a90 <rcu_pll2_config>
 801409e:	201c      	movs	r0, #28
 80140a0:	f7ff fd8e 	bl	8013bc0 <rcu_osci_on>
 80140a4:	201c      	movs	r0, #28
 80140a6:	f7ff fd2b 	bl	8013b00 <rcu_osci_stab_wait>
 80140aa:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 80140ae:	f7ff fce5 	bl	8013a7c <rcu_ckout0_config>
 80140b2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80140b6:	f7ff fc9b 	bl	80139f0 <gpio_ethernet_phy_select>
 80140ba:	2302      	movs	r3, #2
 80140bc:	2203      	movs	r2, #3
 80140be:	2104      	movs	r1, #4
 80140c0:	4838      	ldr	r0, [pc, #224]	; (80141a4 <emac_start+0x140>)
 80140c2:	f7ff fc11 	bl	80138e8 <gpio_init>
 80140c6:	2304      	movs	r3, #4
 80140c8:	2203      	movs	r2, #3
 80140ca:	2118      	movs	r1, #24
 80140cc:	4835      	ldr	r0, [pc, #212]	; (80141a4 <emac_start+0x140>)
 80140ce:	f7ff fc0b 	bl	80138e8 <gpio_init>
 80140d2:	2380      	movs	r3, #128	; 0x80
 80140d4:	2203      	movs	r2, #3
 80140d6:	2104      	movs	r1, #4
 80140d8:	4832      	ldr	r0, [pc, #200]	; (80141a4 <emac_start+0x140>)
 80140da:	f7ff fc05 	bl	80138e8 <gpio_init>
 80140de:	2302      	movs	r3, #2
 80140e0:	2203      	movs	r2, #3
 80140e2:	2118      	movs	r1, #24
 80140e4:	4830      	ldr	r0, [pc, #192]	; (80141a8 <emac_start+0x144>)
 80140e6:	f7ff fbff 	bl	80138e8 <gpio_init>
 80140ea:	2310      	movs	r3, #16
 80140ec:	2203      	movs	r2, #3
 80140ee:	2104      	movs	r1, #4
 80140f0:	482d      	ldr	r0, [pc, #180]	; (80141a8 <emac_start+0x144>)
 80140f2:	f7ff fbf9 	bl	80138e8 <gpio_init>
 80140f6:	2320      	movs	r3, #32
 80140f8:	2203      	movs	r2, #3
 80140fa:	2104      	movs	r1, #4
 80140fc:	482a      	ldr	r0, [pc, #168]	; (80141a8 <emac_start+0x144>)
 80140fe:	f7ff fbf3 	bl	80138e8 <gpio_init>
 8014102:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014106:	2203      	movs	r2, #3
 8014108:	2118      	movs	r1, #24
 801410a:	4828      	ldr	r0, [pc, #160]	; (80141ac <emac_start+0x148>)
 801410c:	f7ff fbec 	bl	80138e8 <gpio_init>
 8014110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014114:	2203      	movs	r2, #3
 8014116:	2118      	movs	r1, #24
 8014118:	4824      	ldr	r0, [pc, #144]	; (80141ac <emac_start+0x148>)
 801411a:	f7ff fbe5 	bl	80138e8 <gpio_init>
 801411e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014122:	2203      	movs	r2, #3
 8014124:	2118      	movs	r1, #24
 8014126:	4821      	ldr	r0, [pc, #132]	; (80141ac <emac_start+0x148>)
 8014128:	f7ff fbde 	bl	80138e8 <gpio_init>
 801412c:	f240 500e 	movw	r0, #1294	; 0x50e
 8014130:	f7ff fc72 	bl	8013a18 <rcu_periph_clock_enable>
 8014134:	f240 500f 	movw	r0, #1295	; 0x50f
 8014138:	f7ff fc6e 	bl	8013a18 <rcu_periph_clock_enable>
 801413c:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8014140:	f7ff fc6a 	bl	8013a18 <rcu_periph_clock_enable>
 8014144:	f000 ffa8 	bl	8015098 <enet_deinit>
 8014148:	f000 fc02 	bl	8014950 <enet_software_reset>
 801414c:	b900      	cbnz	r0, 8014150 <emac_start+0xec>
 801414e:	e7fe      	b.n	801414e <emac_start+0xea>
 8014150:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014154:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014158:	2001      	movs	r0, #1
 801415a:	f000 fd7d 	bl	8014c58 <enet_init>
 801415e:	4b14      	ldr	r3, [pc, #80]	; (80141b0 <emac_start+0x14c>)
 8014160:	6018      	str	r0, [r3, #0]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	b903      	cbnz	r3, 8014168 <emac_start+0x104>
 8014166:	e7fe      	b.n	8014166 <emac_start+0x102>
 8014168:	4620      	mov	r0, r4
 801416a:	f000 fae9 	bl	8014740 <mac_address_get>
 801416e:	4621      	mov	r1, r4
 8014170:	2000      	movs	r0, #0
 8014172:	f000 fcd1 	bl	8014b18 <enet_mac_address_set>
 8014176:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 801417a:	f000 fbfd 	bl	8014978 <enet_descriptors_chain_init>
 801417e:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8014182:	f000 fbf9 	bl	8014978 <enet_descriptors_chain_init>
 8014186:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 801418a:	480a      	ldr	r0, [pc, #40]	; (80141b4 <emac_start+0x150>)
 801418c:	f000 fcbe 	bl	8014b0c <enet_transmit_checksum_config>
 8014190:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8014194:	4808      	ldr	r0, [pc, #32]	; (80141b8 <emac_start+0x154>)
 8014196:	f000 fcb9 	bl	8014b0c <enet_transmit_checksum_config>
 801419a:	f000 fef5 	bl	8014f88 <enet_enable>
 801419e:	2001      	movs	r0, #1
 80141a0:	bd10      	pop	{r4, pc}
 80141a2:	bf00      	nop
 80141a4:	40010800 	andmi	r0, r1, r0, lsl #16
 80141a8:	40011000 	andmi	r1, r1, r0
 80141ac:	40010c00 	andmi	r0, r1, r0, lsl #24
 80141b0:	2000af10 	andcs	sl, r0, r0, lsl pc
 80141b4:	2000df64 	andcs	sp, r0, r4, ror #30
 80141b8:	2000df74 	andcs	sp, r0, r4, ror pc

080141bc <emac_eth_recv>:
 80141bc:	b538      	push	{r3, r4, r5, lr}
 80141be:	4605      	mov	r5, r0
 80141c0:	f000 ff3a 	bl	8015038 <enet_rxframe_size_get>
 80141c4:	4604      	mov	r4, r0
 80141c6:	b138      	cbz	r0, 80141d8 <emac_eth_recv+0x1c>
 80141c8:	4b05      	ldr	r3, [pc, #20]	; (80141e0 <emac_eth_recv+0x24>)
 80141ca:	2105      	movs	r1, #5
 80141cc:	6818      	ldr	r0, [r3, #0]
 80141ce:	f000 fee2 	bl	8014f96 <enet_desc_information_get>
 80141d2:	6028      	str	r0, [r5, #0]
 80141d4:	4620      	mov	r0, r4
 80141d6:	bd38      	pop	{r3, r4, r5, pc}
 80141d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141dc:	e7fb      	b.n	80141d6 <emac_eth_recv+0x1a>
 80141de:	bf00      	nop
 80141e0:	2000af20 	andcs	sl, r0, r0, lsr #30

080141e4 <emac_free_pkt>:
 80141e4:	2100      	movs	r1, #0
 80141e6:	4608      	mov	r0, r1
 80141e8:	f000 bc0e 	b.w	8014a08 <enet_frame_receive>

080141ec <emac_eth_send>:
 80141ec:	f000 bc4c 	b.w	8014a88 <enet_frame_transmit>

080141f0 <gd32_adc_init()>:
 80141f0:	b510      	push	{r4, lr}
 80141f2:	f240 6009 	movw	r0, #1545	; 0x609
 80141f6:	4c21      	ldr	r4, [pc, #132]	; (801427c <gd32_adc_init()+0x8c>)
 80141f8:	f7ff fc0e 	bl	8013a18 <rcu_periph_clock_enable>
 80141fc:	2005      	movs	r0, #5
 80141fe:	f7ff fc53 	bl	8013aa8 <rcu_adc_clock_config>
 8014202:	4620      	mov	r0, r4
 8014204:	2201      	movs	r2, #1
 8014206:	f44f 7180 	mov.w	r1, #256	; 0x100
 801420a:	f000 fabb 	bl	8014784 <adc_special_function_config>
 801420e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8014212:	4620      	mov	r0, r4
 8014214:	2102      	movs	r1, #2
 8014216:	f000 fb55 	bl	80148c4 <adc_external_trigger_source_config>
 801421a:	2100      	movs	r1, #0
 801421c:	4620      	mov	r0, r4
 801421e:	f000 fad9 	bl	80147d4 <adc_data_alignment_config>
 8014222:	2000      	movs	r0, #0
 8014224:	f000 fa9e 	bl	8014764 <adc_mode_config>
 8014228:	2202      	movs	r2, #2
 801422a:	4620      	mov	r0, r4
 801422c:	4611      	mov	r1, r2
 801422e:	f000 fafd 	bl	801482c <adc_channel_length_config>
 8014232:	4620      	mov	r0, r4
 8014234:	2307      	movs	r3, #7
 8014236:	2210      	movs	r2, #16
 8014238:	2100      	movs	r1, #0
 801423a:	f000 fb14 	bl	8014866 <adc_inserted_channel_config>
 801423e:	2307      	movs	r3, #7
 8014240:	4620      	mov	r0, r4
 8014242:	2211      	movs	r2, #17
 8014244:	2101      	movs	r1, #1
 8014246:	f000 fb0e 	bl	8014866 <adc_inserted_channel_config>
 801424a:	2201      	movs	r2, #1
 801424c:	2102      	movs	r1, #2
 801424e:	4620      	mov	r0, r4
 8014250:	f000 fb49 	bl	80148e6 <adc_external_trigger_config>
 8014254:	f000 fae0 	bl	8014818 <adc_tempsensor_vrefint_enable>
 8014258:	4620      	mov	r0, r4
 801425a:	f000 fac4 	bl	80147e6 <adc_enable>
 801425e:	2100      	movs	r1, #0
 8014260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014264:	f000 fa54 	bl	8014710 <udelay(unsigned int, unsigned int)>
 8014268:	4620      	mov	r0, r4
 801426a:	f000 fac4 	bl	80147f6 <adc_calibration_enable>
 801426e:	4620      	mov	r0, r4
 8014270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014274:	2102      	movs	r1, #2
 8014276:	f000 bb51 	b.w	801491c <adc_software_trigger_enable>
 801427a:	bf00      	nop
 801427c:	40012400 	andmi	r2, r1, r0, lsl #8

08014280 <_stop() [clone .isra.0]>:
 8014280:	b508      	push	{r3, lr}
 8014282:	4806      	ldr	r0, [pc, #24]	; (801429c <_stop() [clone .isra.0]+0x1c>)
 8014284:	f000 ff98 	bl	80151b8 <i2c_stop_on_bus>
 8014288:	f640 73ff 	movw	r3, #4095	; 0xfff
 801428c:	4a04      	ldr	r2, [pc, #16]	; (80142a0 <_stop() [clone .isra.0]+0x20>)
 801428e:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 8014292:	0589      	lsls	r1, r1, #22
 8014294:	d501      	bpl.n	801429a <_stop() [clone .isra.0]+0x1a>
 8014296:	3b01      	subs	r3, #1
 8014298:	d1f9      	bne.n	801428e <_stop() [clone .isra.0]+0xe>
 801429a:	bd08      	pop	{r3, pc}
 801429c:	40005400 	andmi	r5, r0, r0, lsl #8
 80142a0:	40005000 	andmi	r5, r0, r0

080142a4 <gd32_i2c_begin()>:
 80142a4:	b510      	push	{r4, lr}
 80142a6:	f240 7015 	movw	r0, #1813	; 0x715
 80142aa:	f7ff fbb5 	bl	8013a18 <rcu_periph_clock_enable>
 80142ae:	4c15      	ldr	r4, [pc, #84]	; (8014304 <gd32_i2c_begin()+0x60>)
 80142b0:	f240 6003 	movw	r0, #1539	; 0x603
 80142b4:	f7ff fbb0 	bl	8013a18 <rcu_periph_clock_enable>
 80142b8:	f240 6003 	movw	r0, #1539	; 0x603
 80142bc:	f7ff fbac 	bl	8013a18 <rcu_periph_clock_enable>
 80142c0:	4620      	mov	r0, r4
 80142c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80142c6:	2203      	movs	r2, #3
 80142c8:	211c      	movs	r1, #28
 80142ca:	f7ff fb0d 	bl	80138e8 <gpio_init>
 80142ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80142d2:	2203      	movs	r2, #3
 80142d4:	4620      	mov	r0, r4
 80142d6:	211c      	movs	r1, #28
 80142d8:	f7ff fb06 	bl	80138e8 <gpio_init>
 80142dc:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 80142e0:	2101      	movs	r1, #1
 80142e2:	2002      	movs	r0, #2
 80142e4:	f7ff fb54 	bl	8013990 <gpio_pin_remap_config>
 80142e8:	4620      	mov	r0, r4
 80142ea:	4907      	ldr	r1, [pc, #28]	; (8014308 <gd32_i2c_begin()+0x64>)
 80142ec:	2200      	movs	r2, #0
 80142ee:	f000 fee1 	bl	80150b4 <i2c_clock_config>
 80142f2:	4620      	mov	r0, r4
 80142f4:	f000 ff56 	bl	80151a4 <i2c_enable>
 80142f8:	4620      	mov	r0, r4
 80142fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142fe:	2101      	movs	r1, #1
 8014300:	f000 bf36 	b.w	8015170 <i2c_ack_config>
 8014304:	40010c00 	andmi	r0, r1, r0, lsl #24
 8014308:	00061a80 	andeq	r1, r6, r0, lsl #21

0801430c <gd32_i2c_set_baudrate(unsigned int)>:
 801430c:	4601      	mov	r1, r0
 801430e:	2200      	movs	r2, #0
 8014310:	4801      	ldr	r0, [pc, #4]	; (8014318 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 8014312:	f000 becf 	b.w	80150b4 <i2c_clock_config>
 8014316:	bf00      	nop
 8014318:	40005400 	andmi	r5, r0, r0, lsl #8

0801431c <gd32_i2c_set_address(unsigned char)>:
 801431c:	4b01      	ldr	r3, [pc, #4]	; (8014324 <gd32_i2c_set_address(unsigned char)+0x8>)
 801431e:	0040      	lsls	r0, r0, #1
 8014320:	7018      	strb	r0, [r3, #0]
 8014322:	4770      	bx	lr
 8014324:	2000af14 	andcs	sl, r0, r4, lsl pc

08014328 <gd32_i2c_write(char const*, unsigned int)>:
 8014328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801432a:	4604      	mov	r4, r0
 801432c:	460f      	mov	r7, r1
 801432e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014332:	4e2e      	ldr	r6, [pc, #184]	; (80143ec <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014334:	f240 6101 	movw	r1, #1537	; 0x601
 8014338:	4630      	mov	r0, r6
 801433a:	f000 ff47 	bl	80151cc <i2c_flag_get>
 801433e:	b138      	cbz	r0, 8014350 <gd32_i2c_write(char const*, unsigned int)+0x28>
 8014340:	3d01      	subs	r5, #1
 8014342:	d1f7      	bne.n	8014334 <gd32_i2c_write(char const*, unsigned int)+0xc>
 8014344:	f7ff ff9c 	bl	8014280 <_stop() [clone .isra.0]>
 8014348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801434c:	4240      	negs	r0, r0
 801434e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014350:	4826      	ldr	r0, [pc, #152]	; (80143ec <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014352:	f000 ff2c 	bl	80151ae <i2c_start_on_bus>
 8014356:	f640 75ff 	movw	r5, #4095	; 0xfff
 801435a:	4e24      	ldr	r6, [pc, #144]	; (80143ec <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801435c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014360:	4630      	mov	r0, r6
 8014362:	f000 ff33 	bl	80151cc <i2c_flag_get>
 8014366:	bb68      	cbnz	r0, 80143c4 <gd32_i2c_write(char const*, unsigned int)+0x9c>
 8014368:	3d01      	subs	r5, #1
 801436a:	d1f7      	bne.n	801435c <gd32_i2c_write(char const*, unsigned int)+0x34>
 801436c:	e7ea      	b.n	8014344 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 801436e:	f240 5101 	movw	r1, #1281	; 0x501
 8014372:	481e      	ldr	r0, [pc, #120]	; (80143ec <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014374:	f000 ff32 	bl	80151dc <i2c_flag_clear>
 8014378:	f640 75ff 	movw	r5, #4095	; 0xfff
 801437c:	4e1b      	ldr	r6, [pc, #108]	; (80143ec <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801437e:	f240 5107 	movw	r1, #1287	; 0x507
 8014382:	4630      	mov	r0, r6
 8014384:	f000 ff22 	bl	80151cc <i2c_flag_get>
 8014388:	2801      	cmp	r0, #1
 801438a:	d114      	bne.n	80143b6 <gd32_i2c_write(char const*, unsigned int)+0x8e>
 801438c:	4e17      	ldr	r6, [pc, #92]	; (80143ec <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801438e:	4427      	add	r7, r4
 8014390:	42a7      	cmp	r7, r4
 8014392:	d013      	beq.n	80143bc <gd32_i2c_write(char const*, unsigned int)+0x94>
 8014394:	4630      	mov	r0, r6
 8014396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801439a:	f000 ff12 	bl	80151c2 <i2c_data_transmit>
 801439e:	f640 75ff 	movw	r5, #4095	; 0xfff
 80143a2:	f240 5102 	movw	r1, #1282	; 0x502
 80143a6:	4630      	mov	r0, r6
 80143a8:	f000 ff10 	bl	80151cc <i2c_flag_get>
 80143ac:	2800      	cmp	r0, #0
 80143ae:	d1ef      	bne.n	8014390 <gd32_i2c_write(char const*, unsigned int)+0x68>
 80143b0:	3d01      	subs	r5, #1
 80143b2:	d1f6      	bne.n	80143a2 <gd32_i2c_write(char const*, unsigned int)+0x7a>
 80143b4:	e7c6      	b.n	8014344 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 80143b6:	3d01      	subs	r5, #1
 80143b8:	d1e1      	bne.n	801437e <gd32_i2c_write(char const*, unsigned int)+0x56>
 80143ba:	e7c3      	b.n	8014344 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 80143bc:	f7ff ff60 	bl	8014280 <_stop() [clone .isra.0]>
 80143c0:	2000      	movs	r0, #0
 80143c2:	e7c3      	b.n	801434c <gd32_i2c_write(char const*, unsigned int)+0x24>
 80143c4:	4b0a      	ldr	r3, [pc, #40]	; (80143f0 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 80143c6:	f06f 0201 	mvn.w	r2, #1
 80143ca:	7819      	ldrb	r1, [r3, #0]
 80143cc:	4807      	ldr	r0, [pc, #28]	; (80143ec <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80143ce:	f000 fee1 	bl	8015194 <i2c_master_addressing>
 80143d2:	f640 75ff 	movw	r5, #4095	; 0xfff
 80143d6:	4e05      	ldr	r6, [pc, #20]	; (80143ec <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80143d8:	f240 5101 	movw	r1, #1281	; 0x501
 80143dc:	4630      	mov	r0, r6
 80143de:	f000 fef5 	bl	80151cc <i2c_flag_get>
 80143e2:	2800      	cmp	r0, #0
 80143e4:	d1c3      	bne.n	801436e <gd32_i2c_write(char const*, unsigned int)+0x46>
 80143e6:	3d01      	subs	r5, #1
 80143e8:	d1f6      	bne.n	80143d8 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 80143ea:	e7ab      	b.n	8014344 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 80143ec:	40005400 	andmi	r5, r0, r0, lsl #8
 80143f0:	2000af14 	andcs	sl, r0, r4, lsl pc

080143f4 <gd32_i2c_read(char*, unsigned int)>:
 80143f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143f8:	4680      	mov	r8, r0
 80143fa:	460c      	mov	r4, r1
 80143fc:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014400:	4f49      	ldr	r7, [pc, #292]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014402:	f240 6101 	movw	r1, #1537	; 0x601
 8014406:	4638      	mov	r0, r7
 8014408:	f000 fee0 	bl	80151cc <i2c_flag_get>
 801440c:	4605      	mov	r5, r0
 801440e:	b128      	cbz	r0, 801441c <gd32_i2c_read(char*, unsigned int)+0x28>
 8014410:	3e01      	subs	r6, #1
 8014412:	d1f6      	bne.n	8014402 <gd32_i2c_read(char*, unsigned int)+0xe>
 8014414:	f7ff ff34 	bl	8014280 <_stop() [clone .isra.0]>
 8014418:	2504      	movs	r5, #4
 801441a:	e082      	b.n	8014522 <gd32_i2c_read(char*, unsigned int)+0x12e>
 801441c:	2c02      	cmp	r4, #2
 801441e:	d103      	bne.n	8014428 <gd32_i2c_read(char*, unsigned int)+0x34>
 8014420:	4601      	mov	r1, r0
 8014422:	4841      	ldr	r0, [pc, #260]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014424:	f000 fead 	bl	8015182 <i2c_ackpos_config>
 8014428:	483f      	ldr	r0, [pc, #252]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 801442a:	f000 fec0 	bl	80151ae <i2c_start_on_bus>
 801442e:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014432:	4f3d      	ldr	r7, [pc, #244]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014434:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014438:	4638      	mov	r0, r7
 801443a:	f000 fec7 	bl	80151cc <i2c_flag_get>
 801443e:	b910      	cbnz	r0, 8014446 <gd32_i2c_read(char*, unsigned int)+0x52>
 8014440:	3e01      	subs	r6, #1
 8014442:	d1f7      	bne.n	8014434 <gd32_i2c_read(char*, unsigned int)+0x40>
 8014444:	e7e6      	b.n	8014414 <gd32_i2c_read(char*, unsigned int)+0x20>
 8014446:	4b39      	ldr	r3, [pc, #228]	; (801452c <gd32_i2c_read(char*, unsigned int)+0x138>)
 8014448:	2201      	movs	r2, #1
 801444a:	7819      	ldrb	r1, [r3, #0]
 801444c:	4836      	ldr	r0, [pc, #216]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 801444e:	f000 fea1 	bl	8015194 <i2c_master_addressing>
 8014452:	2c02      	cmp	r4, #2
 8014454:	d803      	bhi.n	801445e <gd32_i2c_read(char*, unsigned int)+0x6a>
 8014456:	2100      	movs	r1, #0
 8014458:	4833      	ldr	r0, [pc, #204]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 801445a:	f000 fe89 	bl	8015170 <i2c_ack_config>
 801445e:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014462:	4f31      	ldr	r7, [pc, #196]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014464:	f240 5101 	movw	r1, #1281	; 0x501
 8014468:	4638      	mov	r0, r7
 801446a:	f000 feaf 	bl	80151cc <i2c_flag_get>
 801446e:	b910      	cbnz	r0, 8014476 <gd32_i2c_read(char*, unsigned int)+0x82>
 8014470:	3e01      	subs	r6, #1
 8014472:	d1f7      	bne.n	8014464 <gd32_i2c_read(char*, unsigned int)+0x70>
 8014474:	e7ce      	b.n	8014414 <gd32_i2c_read(char*, unsigned int)+0x20>
 8014476:	f240 5101 	movw	r1, #1281	; 0x501
 801447a:	482b      	ldr	r0, [pc, #172]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 801447c:	f000 feae 	bl	80151dc <i2c_flag_clear>
 8014480:	2c01      	cmp	r4, #1
 8014482:	d102      	bne.n	801448a <gd32_i2c_read(char*, unsigned int)+0x96>
 8014484:	4828      	ldr	r0, [pc, #160]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014486:	f000 fe97 	bl	80151b8 <i2c_stop_on_bus>
 801448a:	f640 77ff 	movw	r7, #4095	; 0xfff
 801448e:	4e26      	ldr	r6, [pc, #152]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014490:	b3ac      	cbz	r4, 80144fe <gd32_i2c_read(char*, unsigned int)+0x10a>
 8014492:	2c03      	cmp	r4, #3
 8014494:	d121      	bne.n	80144da <gd32_i2c_read(char*, unsigned int)+0xe6>
 8014496:	f640 79ff 	movw	r9, #4095	; 0xfff
 801449a:	f240 5102 	movw	r1, #1282	; 0x502
 801449e:	4630      	mov	r0, r6
 80144a0:	f000 fe94 	bl	80151cc <i2c_flag_get>
 80144a4:	b918      	cbnz	r0, 80144ae <gd32_i2c_read(char*, unsigned int)+0xba>
 80144a6:	f1b9 0901 	subs.w	r9, r9, #1
 80144aa:	d1f6      	bne.n	801449a <gd32_i2c_read(char*, unsigned int)+0xa6>
 80144ac:	e7b2      	b.n	8014414 <gd32_i2c_read(char*, unsigned int)+0x20>
 80144ae:	2100      	movs	r1, #0
 80144b0:	4630      	mov	r0, r6
 80144b2:	f000 fe5d 	bl	8015170 <i2c_ack_config>
 80144b6:	f240 5106 	movw	r1, #1286	; 0x506
 80144ba:	4630      	mov	r0, r6
 80144bc:	f000 fe86 	bl	80151cc <i2c_flag_get>
 80144c0:	b138      	cbz	r0, 80144d2 <gd32_i2c_read(char*, unsigned int)+0xde>
 80144c2:	4630      	mov	r0, r6
 80144c4:	f000 fe7f 	bl	80151c6 <i2c_data_receive>
 80144c8:	f640 77ff 	movw	r7, #4095	; 0xfff
 80144cc:	f808 0b01 	strb.w	r0, [r8], #1
 80144d0:	3c01      	subs	r4, #1
 80144d2:	3f01      	subs	r7, #1
 80144d4:	2f00      	cmp	r7, #0
 80144d6:	dcdb      	bgt.n	8014490 <gd32_i2c_read(char*, unsigned int)+0x9c>
 80144d8:	e79c      	b.n	8014414 <gd32_i2c_read(char*, unsigned int)+0x20>
 80144da:	2c02      	cmp	r4, #2
 80144dc:	d1eb      	bne.n	80144b6 <gd32_i2c_read(char*, unsigned int)+0xc2>
 80144de:	f640 79ff 	movw	r9, #4095	; 0xfff
 80144e2:	f240 5102 	movw	r1, #1282	; 0x502
 80144e6:	4630      	mov	r0, r6
 80144e8:	f000 fe70 	bl	80151cc <i2c_flag_get>
 80144ec:	b918      	cbnz	r0, 80144f6 <gd32_i2c_read(char*, unsigned int)+0x102>
 80144ee:	f1b9 0901 	subs.w	r9, r9, #1
 80144f2:	d1f6      	bne.n	80144e2 <gd32_i2c_read(char*, unsigned int)+0xee>
 80144f4:	e78e      	b.n	8014414 <gd32_i2c_read(char*, unsigned int)+0x20>
 80144f6:	4630      	mov	r0, r6
 80144f8:	f000 fe5e 	bl	80151b8 <i2c_stop_on_bus>
 80144fc:	e7db      	b.n	80144b6 <gd32_i2c_read(char*, unsigned int)+0xc2>
 80144fe:	f640 73ff 	movw	r3, #4095	; 0xfff
 8014502:	4a0b      	ldr	r2, [pc, #44]	; (8014530 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8014504:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 8014508:	0589      	lsls	r1, r1, #22
 801450a:	d502      	bpl.n	8014512 <gd32_i2c_read(char*, unsigned int)+0x11e>
 801450c:	3b01      	subs	r3, #1
 801450e:	d1f9      	bne.n	8014504 <gd32_i2c_read(char*, unsigned int)+0x110>
 8014510:	e782      	b.n	8014418 <gd32_i2c_read(char*, unsigned int)+0x24>
 8014512:	2101      	movs	r1, #1
 8014514:	4804      	ldr	r0, [pc, #16]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014516:	f000 fe2b 	bl	8015170 <i2c_ack_config>
 801451a:	2101      	movs	r1, #1
 801451c:	4802      	ldr	r0, [pc, #8]	; (8014528 <gd32_i2c_read(char*, unsigned int)+0x134>)
 801451e:	f000 fe30 	bl	8015182 <i2c_ackpos_config>
 8014522:	4628      	mov	r0, r5
 8014524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014528:	40005400 	andmi	r5, r0, r0, lsl #8
 801452c:	2000af14 	andcs	sl, r0, r4, lsl pc
 8014530:	40005000 	andmi	r5, r0, r0

08014534 <gd32_uart_begin>:
 8014534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014536:	461d      	mov	r5, r3
 8014538:	4b63      	ldr	r3, [pc, #396]	; (80146c8 <gd32_uart_begin+0x194>)
 801453a:	4604      	mov	r4, r0
 801453c:	4298      	cmp	r0, r3
 801453e:	460f      	mov	r7, r1
 8014540:	4616      	mov	r6, r2
 8014542:	d03b      	beq.n	80145bc <gd32_uart_begin+0x88>
 8014544:	d80a      	bhi.n	801455c <gd32_uart_begin+0x28>
 8014546:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801454a:	4298      	cmp	r0, r3
 801454c:	d02f      	beq.n	80145ae <gd32_uart_begin+0x7a>
 801454e:	f240 7012 	movw	r0, #1810	; 0x712
 8014552:	f7ff fa61 	bl	8013a18 <rcu_periph_clock_enable>
 8014556:	f240 6004 	movw	r0, #1540	; 0x604
 801455a:	e008      	b.n	801456e <gd32_uart_begin+0x3a>
 801455c:	4b5b      	ldr	r3, [pc, #364]	; (80146cc <gd32_uart_begin+0x198>)
 801455e:	4298      	cmp	r0, r3
 8014560:	d02f      	beq.n	80145c2 <gd32_uart_begin+0x8e>
 8014562:	f240 600e 	movw	r0, #1550	; 0x60e
 8014566:	f7ff fa57 	bl	8013a18 <rcu_periph_clock_enable>
 801456a:	f240 6003 	movw	r0, #1539	; 0x603
 801456e:	f7ff fa53 	bl	8013a18 <rcu_periph_clock_enable>
 8014572:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8014576:	f7ff fa4f 	bl	8013a18 <rcu_periph_clock_enable>
 801457a:	4b53      	ldr	r3, [pc, #332]	; (80146c8 <gd32_uart_begin+0x194>)
 801457c:	429c      	cmp	r4, r3
 801457e:	f000 8085 	beq.w	801468c <gd32_uart_begin+0x158>
 8014582:	d829      	bhi.n	80145d8 <gd32_uart_begin+0xa4>
 8014584:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014588:	429c      	cmp	r4, r3
 801458a:	d072      	beq.n	8014672 <gd32_uart_begin+0x13e>
 801458c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014590:	2203      	movs	r2, #3
 8014592:	2118      	movs	r1, #24
 8014594:	484e      	ldr	r0, [pc, #312]	; (80146d0 <gd32_uart_begin+0x19c>)
 8014596:	f7ff f9a7 	bl	80138e8 <gpio_init>
 801459a:	2104      	movs	r1, #4
 801459c:	484c      	ldr	r0, [pc, #304]	; (80146d0 <gd32_uart_begin+0x19c>)
 801459e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80145a2:	2203      	movs	r2, #3
 80145a4:	f7ff f9a0 	bl	80138e8 <gpio_init>
 80145a8:	2101      	movs	r1, #1
 80145aa:	484a      	ldr	r0, [pc, #296]	; (80146d4 <gd32_uart_begin+0x1a0>)
 80145ac:	e025      	b.n	80145fa <gd32_uart_begin+0xc6>
 80145ae:	f240 7011 	movw	r0, #1809	; 0x711
 80145b2:	f7ff fa31 	bl	8013a18 <rcu_periph_clock_enable>
 80145b6:	f240 6002 	movw	r0, #1538	; 0x602
 80145ba:	e7d8      	b.n	801456e <gd32_uart_begin+0x3a>
 80145bc:	f240 7013 	movw	r0, #1811	; 0x713
 80145c0:	e7c7      	b.n	8014552 <gd32_uart_begin+0x1e>
 80145c2:	f240 7014 	movw	r0, #1812	; 0x714
 80145c6:	f7ff fa27 	bl	8013a18 <rcu_periph_clock_enable>
 80145ca:	f240 6004 	movw	r0, #1540	; 0x604
 80145ce:	f7ff fa23 	bl	8013a18 <rcu_periph_clock_enable>
 80145d2:	f240 6005 	movw	r0, #1541	; 0x605
 80145d6:	e7ca      	b.n	801456e <gd32_uart_begin+0x3a>
 80145d8:	4b3c      	ldr	r3, [pc, #240]	; (80146cc <gd32_uart_begin+0x198>)
 80145da:	429c      	cmp	r4, r3
 80145dc:	d063      	beq.n	80146a6 <gd32_uart_begin+0x172>
 80145de:	2340      	movs	r3, #64	; 0x40
 80145e0:	2203      	movs	r2, #3
 80145e2:	2118      	movs	r1, #24
 80145e4:	483c      	ldr	r0, [pc, #240]	; (80146d8 <gd32_uart_begin+0x1a4>)
 80145e6:	f7ff f97f 	bl	80138e8 <gpio_init>
 80145ea:	2104      	movs	r1, #4
 80145ec:	483a      	ldr	r0, [pc, #232]	; (80146d8 <gd32_uart_begin+0x1a4>)
 80145ee:	2380      	movs	r3, #128	; 0x80
 80145f0:	2203      	movs	r2, #3
 80145f2:	f7ff f979 	bl	80138e8 <gpio_init>
 80145f6:	2101      	movs	r1, #1
 80145f8:	2004      	movs	r0, #4
 80145fa:	f7ff f9c9 	bl	8013990 <gpio_pin_remap_config>
 80145fe:	4620      	mov	r0, r4
 8014600:	f7ff fc64 	bl	8013ecc <usart_deinit>
 8014604:	68e3      	ldr	r3, [r4, #12]
 8014606:	4639      	mov	r1, r7
 8014608:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801460c:	60e3      	str	r3, [r4, #12]
 801460e:	4620      	mov	r0, r4
 8014610:	f7ff fc9c 	bl	8013f4c <usart_baudrate_set>
 8014614:	2e09      	cmp	r6, #9
 8014616:	bf0c      	ite	eq
 8014618:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
 801461c:	2100      	movne	r1, #0
 801461e:	4620      	mov	r0, r4
 8014620:	f7ff fcc4 	bl	8013fac <usart_word_length_set>
 8014624:	9b06      	ldr	r3, [sp, #24]
 8014626:	4620      	mov	r0, r4
 8014628:	2b02      	cmp	r3, #2
 801462a:	bf0c      	ite	eq
 801462c:	f44f 5100 	moveq.w	r1, #8192	; 0x2000
 8014630:	2100      	movne	r1, #0
 8014632:	f7ff fcc3 	bl	8013fbc <usart_stop_bit_set>
 8014636:	2d01      	cmp	r5, #1
 8014638:	d041      	beq.n	80146be <gd32_uart_begin+0x18a>
 801463a:	2d02      	cmp	r5, #2
 801463c:	d142      	bne.n	80146c4 <gd32_uart_begin+0x190>
 801463e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014642:	4620      	mov	r0, r4
 8014644:	f7ff fcaa 	bl	8013f9c <usart_parity_config>
 8014648:	2100      	movs	r1, #0
 801464a:	4620      	mov	r0, r4
 801464c:	f7ff fcca 	bl	8013fe4 <usart_hardware_flow_rts_config>
 8014650:	2100      	movs	r1, #0
 8014652:	4620      	mov	r0, r4
 8014654:	f7ff fccc 	bl	8013ff0 <usart_hardware_flow_cts_config>
 8014658:	2104      	movs	r1, #4
 801465a:	4620      	mov	r0, r4
 801465c:	f7ff fcbc 	bl	8013fd8 <usart_receive_config>
 8014660:	2108      	movs	r1, #8
 8014662:	4620      	mov	r0, r4
 8014664:	f7ff fcb2 	bl	8013fcc <usart_transmit_config>
 8014668:	68e3      	ldr	r3, [r4, #12]
 801466a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801466e:	60e3      	str	r3, [r4, #12]
 8014670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014672:	2304      	movs	r3, #4
 8014674:	2203      	movs	r2, #3
 8014676:	2118      	movs	r1, #24
 8014678:	4818      	ldr	r0, [pc, #96]	; (80146dc <gd32_uart_begin+0x1a8>)
 801467a:	f7ff f935 	bl	80138e8 <gpio_init>
 801467e:	2308      	movs	r3, #8
 8014680:	2203      	movs	r2, #3
 8014682:	2104      	movs	r1, #4
 8014684:	4815      	ldr	r0, [pc, #84]	; (80146dc <gd32_uart_begin+0x1a8>)
 8014686:	f7ff f92f 	bl	80138e8 <gpio_init>
 801468a:	e7b8      	b.n	80145fe <gd32_uart_begin+0xca>
 801468c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014690:	2203      	movs	r2, #3
 8014692:	2118      	movs	r1, #24
 8014694:	480e      	ldr	r0, [pc, #56]	; (80146d0 <gd32_uart_begin+0x19c>)
 8014696:	f7ff f927 	bl	80138e8 <gpio_init>
 801469a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801469e:	2203      	movs	r2, #3
 80146a0:	2104      	movs	r1, #4
 80146a2:	480b      	ldr	r0, [pc, #44]	; (80146d0 <gd32_uart_begin+0x19c>)
 80146a4:	e7ef      	b.n	8014686 <gd32_uart_begin+0x152>
 80146a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80146aa:	2203      	movs	r2, #3
 80146ac:	2118      	movs	r1, #24
 80146ae:	4808      	ldr	r0, [pc, #32]	; (80146d0 <gd32_uart_begin+0x19c>)
 80146b0:	f7ff f91a 	bl	80138e8 <gpio_init>
 80146b4:	2304      	movs	r3, #4
 80146b6:	2203      	movs	r2, #3
 80146b8:	4619      	mov	r1, r3
 80146ba:	4809      	ldr	r0, [pc, #36]	; (80146e0 <gd32_uart_begin+0x1ac>)
 80146bc:	e7e3      	b.n	8014686 <gd32_uart_begin+0x152>
 80146be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80146c2:	e7be      	b.n	8014642 <gd32_uart_begin+0x10e>
 80146c4:	2100      	movs	r1, #0
 80146c6:	e7bc      	b.n	8014642 <gd32_uart_begin+0x10e>
 80146c8:	40004c00 	andmi	r4, r0, r0, lsl #24
 80146cc:	40005000 	andmi	r5, r0, r0
 80146d0:	40011000 	andmi	r1, r1, r0
 80146d4:	00140010 	andseq	r0, r4, r0, lsl r0
 80146d8:	40010c00 	andmi	r0, r1, r0, lsl #24
 80146dc:	40010800 	andmi	r0, r1, r0, lsl #16
 80146e0:	40011400 	andmi	r1, r1, r0, lsl #8

080146e4 <micros_init()>:
 80146e4:	4770      	bx	lr
	...

080146e8 <udelay_init()>:
 80146e8:	4a07      	ldr	r2, [pc, #28]	; (8014708 <udelay_init()+0x20>)
 80146ea:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80146ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80146f2:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80146f6:	2200      	movs	r2, #0
 80146f8:	4b04      	ldr	r3, [pc, #16]	; (801470c <udelay_init()+0x24>)
 80146fa:	605a      	str	r2, [r3, #4]
 80146fc:	681a      	ldr	r2, [r3, #0]
 80146fe:	f042 0201 	orr.w	r2, r2, #1
 8014702:	601a      	str	r2, [r3, #0]
 8014704:	4770      	bx	lr
 8014706:	bf00      	nop
 8014708:	e000ed00 	and	lr, r0, r0, lsl #26
 801470c:	e0001000 	and	r1, r0, r0

08014710 <udelay(unsigned int, unsigned int)>:
 8014710:	236c      	movs	r3, #108	; 0x6c
 8014712:	b510      	push	{r4, lr}
 8014714:	4358      	muls	r0, r3
 8014716:	b909      	cbnz	r1, 801471c <udelay(unsigned int, unsigned int)+0xc>
 8014718:	4b08      	ldr	r3, [pc, #32]	; (801473c <udelay(unsigned int, unsigned int)+0x2c>)
 801471a:	6859      	ldr	r1, [r3, #4]
 801471c:	2300      	movs	r3, #0
 801471e:	4c07      	ldr	r4, [pc, #28]	; (801473c <udelay(unsigned int, unsigned int)+0x2c>)
 8014720:	6862      	ldr	r2, [r4, #4]
 8014722:	4291      	cmp	r1, r2
 8014724:	d0fc      	beq.n	8014720 <udelay(unsigned int, unsigned int)+0x10>
 8014726:	bf28      	it	cs
 8014728:	f103 33ff 	addcs.w	r3, r3, #4294967295	; 0xffffffff
 801472c:	1a5b      	subs	r3, r3, r1
 801472e:	4413      	add	r3, r2
 8014730:	4283      	cmp	r3, r0
 8014732:	d300      	bcc.n	8014736 <udelay(unsigned int, unsigned int)+0x26>
 8014734:	bd10      	pop	{r4, pc}
 8014736:	4611      	mov	r1, r2
 8014738:	e7f2      	b.n	8014720 <udelay(unsigned int, unsigned int)+0x10>
 801473a:	bf00      	nop
 801473c:	e0001000 	and	r1, r0, r0

08014740 <mac_address_get>:
 8014740:	2102      	movs	r1, #2
 8014742:	4a07      	ldr	r2, [pc, #28]	; (8014760 <mac_address_get+0x20>)
 8014744:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8014748:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 801474c:	7001      	strb	r1, [r0, #0]
 801474e:	7042      	strb	r2, [r0, #1]
 8014750:	0e1a      	lsrs	r2, r3, #24
 8014752:	7082      	strb	r2, [r0, #2]
 8014754:	0c1a      	lsrs	r2, r3, #16
 8014756:	70c2      	strb	r2, [r0, #3]
 8014758:	0a1a      	lsrs	r2, r3, #8
 801475a:	7102      	strb	r2, [r0, #4]
 801475c:	7143      	strb	r3, [r0, #5]
 801475e:	4770      	bx	lr
 8014760:	1ffff000 	svcne	0x00fff000

08014764 <adc_mode_config>:
 8014764:	4b06      	ldr	r3, [pc, #24]	; (8014780 <adc_mode_config+0x1c>)
 8014766:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 801476a:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 801476e:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 8014772:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014776:	4302      	orrs	r2, r0
 8014778:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801477c:	4770      	bx	lr
 801477e:	bf00      	nop
 8014780:	40012000 	andmi	r2, r1, r0

08014784 <adc_special_function_config>:
 8014784:	b510      	push	{r4, lr}
 8014786:	f401 7380 	and.w	r3, r1, #256	; 0x100
 801478a:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 801478e:	f001 0102 	and.w	r1, r1, #2
 8014792:	b17a      	cbz	r2, 80147b4 <adc_special_function_config+0x30>
 8014794:	b11b      	cbz	r3, 801479e <adc_special_function_config+0x1a>
 8014796:	6843      	ldr	r3, [r0, #4]
 8014798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801479c:	6043      	str	r3, [r0, #4]
 801479e:	b11c      	cbz	r4, 80147a8 <adc_special_function_config+0x24>
 80147a0:	6843      	ldr	r3, [r0, #4]
 80147a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80147a6:	6043      	str	r3, [r0, #4]
 80147a8:	b119      	cbz	r1, 80147b2 <adc_special_function_config+0x2e>
 80147aa:	6883      	ldr	r3, [r0, #8]
 80147ac:	f043 0302 	orr.w	r3, r3, #2
 80147b0:	6083      	str	r3, [r0, #8]
 80147b2:	bd10      	pop	{r4, pc}
 80147b4:	b11b      	cbz	r3, 80147be <adc_special_function_config+0x3a>
 80147b6:	6843      	ldr	r3, [r0, #4]
 80147b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80147bc:	6043      	str	r3, [r0, #4]
 80147be:	b11c      	cbz	r4, 80147c8 <adc_special_function_config+0x44>
 80147c0:	6843      	ldr	r3, [r0, #4]
 80147c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80147c6:	6043      	str	r3, [r0, #4]
 80147c8:	2900      	cmp	r1, #0
 80147ca:	d0f2      	beq.n	80147b2 <adc_special_function_config+0x2e>
 80147cc:	6883      	ldr	r3, [r0, #8]
 80147ce:	f023 0302 	bic.w	r3, r3, #2
 80147d2:	e7ed      	b.n	80147b0 <adc_special_function_config+0x2c>

080147d4 <adc_data_alignment_config>:
 80147d4:	6883      	ldr	r3, [r0, #8]
 80147d6:	b119      	cbz	r1, 80147e0 <adc_data_alignment_config+0xc>
 80147d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80147dc:	6083      	str	r3, [r0, #8]
 80147de:	4770      	bx	lr
 80147e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80147e4:	e7fa      	b.n	80147dc <adc_data_alignment_config+0x8>

080147e6 <adc_enable>:
 80147e6:	6883      	ldr	r3, [r0, #8]
 80147e8:	07db      	lsls	r3, r3, #31
 80147ea:	bf5e      	ittt	pl
 80147ec:	6883      	ldrpl	r3, [r0, #8]
 80147ee:	f043 0301 	orrpl.w	r3, r3, #1
 80147f2:	6083      	strpl	r3, [r0, #8]
 80147f4:	4770      	bx	lr

080147f6 <adc_calibration_enable>:
 80147f6:	6883      	ldr	r3, [r0, #8]
 80147f8:	f100 0208 	add.w	r2, r0, #8
 80147fc:	f043 0308 	orr.w	r3, r3, #8
 8014800:	6083      	str	r3, [r0, #8]
 8014802:	6813      	ldr	r3, [r2, #0]
 8014804:	0719      	lsls	r1, r3, #28
 8014806:	d4fc      	bmi.n	8014802 <adc_calibration_enable+0xc>
 8014808:	6883      	ldr	r3, [r0, #8]
 801480a:	f043 0304 	orr.w	r3, r3, #4
 801480e:	6083      	str	r3, [r0, #8]
 8014810:	6813      	ldr	r3, [r2, #0]
 8014812:	075b      	lsls	r3, r3, #29
 8014814:	d4fc      	bmi.n	8014810 <adc_calibration_enable+0x1a>
 8014816:	4770      	bx	lr

08014818 <adc_tempsensor_vrefint_enable>:
 8014818:	4a03      	ldr	r2, [pc, #12]	; (8014828 <adc_tempsensor_vrefint_enable+0x10>)
 801481a:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 801481e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014822:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8014826:	4770      	bx	lr
 8014828:	40012000 	andmi	r2, r1, r0

0801482c <adc_channel_length_config>:
 801482c:	2901      	cmp	r1, #1
 801482e:	d002      	beq.n	8014836 <adc_channel_length_config+0xa>
 8014830:	2902      	cmp	r1, #2
 8014832:	d00c      	beq.n	801484e <adc_channel_length_config+0x22>
 8014834:	4770      	bx	lr
 8014836:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014838:	3a01      	subs	r2, #1
 801483a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801483e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8014840:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014842:	0512      	lsls	r2, r2, #20
 8014844:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8014848:	431a      	orrs	r2, r3
 801484a:	62c2      	str	r2, [r0, #44]	; 0x2c
 801484c:	4770      	bx	lr
 801484e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014850:	3a01      	subs	r2, #1
 8014852:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8014856:	6383      	str	r3, [r0, #56]	; 0x38
 8014858:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801485a:	0512      	lsls	r2, r2, #20
 801485c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8014860:	431a      	orrs	r2, r3
 8014862:	6382      	str	r2, [r0, #56]	; 0x38
 8014864:	4770      	bx	lr

08014866 <adc_inserted_channel_config>:
 8014866:	b530      	push	{r4, r5, lr}
 8014868:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801486a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 801486c:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8014870:	1a61      	subs	r1, r4, r1
 8014872:	f06f 0404 	mvn.w	r4, #4
 8014876:	4361      	muls	r1, r4
 8014878:	241f      	movs	r4, #31
 801487a:	310f      	adds	r1, #15
 801487c:	408c      	lsls	r4, r1
 801487e:	ea25 0504 	bic.w	r5, r5, r4
 8014882:	fa02 f101 	lsl.w	r1, r2, r1
 8014886:	4329      	orrs	r1, r5
 8014888:	2a09      	cmp	r2, #9
 801488a:	6381      	str	r1, [r0, #56]	; 0x38
 801488c:	d80b      	bhi.n	80148a6 <adc_inserted_channel_config+0x40>
 801488e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8014892:	2207      	movs	r2, #7
 8014894:	6904      	ldr	r4, [r0, #16]
 8014896:	408a      	lsls	r2, r1
 8014898:	ea24 0402 	bic.w	r4, r4, r2
 801489c:	fa03 f201 	lsl.w	r2, r3, r1
 80148a0:	4322      	orrs	r2, r4
 80148a2:	6102      	str	r2, [r0, #16]
 80148a4:	bd30      	pop	{r4, r5, pc}
 80148a6:	2a11      	cmp	r2, #17
 80148a8:	d8fc      	bhi.n	80148a4 <adc_inserted_channel_config+0x3e>
 80148aa:	2407      	movs	r4, #7
 80148ac:	3a0a      	subs	r2, #10
 80148ae:	68c1      	ldr	r1, [r0, #12]
 80148b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80148b4:	4094      	lsls	r4, r2
 80148b6:	ea21 0104 	bic.w	r1, r1, r4
 80148ba:	fa03 f202 	lsl.w	r2, r3, r2
 80148be:	430a      	orrs	r2, r1
 80148c0:	60c2      	str	r2, [r0, #12]
 80148c2:	e7ef      	b.n	80148a4 <adc_inserted_channel_config+0x3e>

080148c4 <adc_external_trigger_source_config>:
 80148c4:	2901      	cmp	r1, #1
 80148c6:	d002      	beq.n	80148ce <adc_external_trigger_source_config+0xa>
 80148c8:	2902      	cmp	r1, #2
 80148ca:	d008      	beq.n	80148de <adc_external_trigger_source_config+0x1a>
 80148cc:	4770      	bx	lr
 80148ce:	6883      	ldr	r3, [r0, #8]
 80148d0:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80148d4:	6083      	str	r3, [r0, #8]
 80148d6:	6883      	ldr	r3, [r0, #8]
 80148d8:	431a      	orrs	r2, r3
 80148da:	6082      	str	r2, [r0, #8]
 80148dc:	4770      	bx	lr
 80148de:	6883      	ldr	r3, [r0, #8]
 80148e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80148e4:	e7f6      	b.n	80148d4 <adc_external_trigger_source_config+0x10>

080148e6 <adc_external_trigger_config>:
 80148e6:	f001 0301 	and.w	r3, r1, #1
 80148ea:	f001 0102 	and.w	r1, r1, #2
 80148ee:	b152      	cbz	r2, 8014906 <adc_external_trigger_config+0x20>
 80148f0:	b11b      	cbz	r3, 80148fa <adc_external_trigger_config+0x14>
 80148f2:	6883      	ldr	r3, [r0, #8]
 80148f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80148f8:	6083      	str	r3, [r0, #8]
 80148fa:	b119      	cbz	r1, 8014904 <adc_external_trigger_config+0x1e>
 80148fc:	6883      	ldr	r3, [r0, #8]
 80148fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014902:	6083      	str	r3, [r0, #8]
 8014904:	4770      	bx	lr
 8014906:	b11b      	cbz	r3, 8014910 <adc_external_trigger_config+0x2a>
 8014908:	6883      	ldr	r3, [r0, #8]
 801490a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801490e:	6083      	str	r3, [r0, #8]
 8014910:	2900      	cmp	r1, #0
 8014912:	d0f7      	beq.n	8014904 <adc_external_trigger_config+0x1e>
 8014914:	6883      	ldr	r3, [r0, #8]
 8014916:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801491a:	e7f2      	b.n	8014902 <adc_external_trigger_config+0x1c>

0801491c <adc_software_trigger_enable>:
 801491c:	07ca      	lsls	r2, r1, #31
 801491e:	bf42      	ittt	mi
 8014920:	6883      	ldrmi	r3, [r0, #8]
 8014922:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8014926:	6083      	strmi	r3, [r0, #8]
 8014928:	078b      	lsls	r3, r1, #30
 801492a:	bf42      	ittt	mi
 801492c:	6883      	ldrmi	r3, [r0, #8]
 801492e:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8014932:	6083      	strmi	r3, [r0, #8]
 8014934:	4770      	bx	lr

08014936 <enet_delay>:
 8014936:	2300      	movs	r3, #0
 8014938:	b082      	sub	sp, #8
 801493a:	9301      	str	r3, [sp, #4]
 801493c:	9001      	str	r0, [sp, #4]
 801493e:	9b01      	ldr	r3, [sp, #4]
 8014940:	b90b      	cbnz	r3, 8014946 <enet_delay+0x10>
 8014942:	b002      	add	sp, #8
 8014944:	4770      	bx	lr
 8014946:	9b01      	ldr	r3, [sp, #4]
 8014948:	3b01      	subs	r3, #1
 801494a:	9301      	str	r3, [sp, #4]
 801494c:	e7f7      	b.n	801493e <enet_delay+0x8>
	...

08014950 <enet_software_reset>:
 8014950:	4b07      	ldr	r3, [pc, #28]	; (8014970 <enet_software_reset+0x20>)
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	f042 0201 	orr.w	r2, r2, #1
 8014958:	601a      	str	r2, [r3, #0]
 801495a:	4a06      	ldr	r2, [pc, #24]	; (8014974 <enet_software_reset+0x24>)
 801495c:	6819      	ldr	r1, [r3, #0]
 801495e:	07c9      	lsls	r1, r1, #31
 8014960:	d501      	bpl.n	8014966 <enet_software_reset+0x16>
 8014962:	3a01      	subs	r2, #1
 8014964:	d1fa      	bne.n	801495c <enet_software_reset+0xc>
 8014966:	6818      	ldr	r0, [r3, #0]
 8014968:	43c0      	mvns	r0, r0
 801496a:	f000 0001 	and.w	r0, r0, #1
 801496e:	4770      	bx	lr
 8014970:	40029000 	andmi	r9, r2, r0
 8014974:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014978 <enet_descriptors_chain_init>:
 8014978:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 801497c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801497e:	4a19      	ldr	r2, [pc, #100]	; (80149e4 <enet_descriptors_chain_init+0x6c>)
 8014980:	d125      	bne.n	80149ce <enet_descriptors_chain_init+0x56>
 8014982:	2500      	movs	r5, #0
 8014984:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8014988:	2002      	movs	r0, #2
 801498a:	4b17      	ldr	r3, [pc, #92]	; (80149e8 <enet_descriptors_chain_init+0x70>)
 801498c:	4c17      	ldr	r4, [pc, #92]	; (80149ec <enet_descriptors_chain_init+0x74>)
 801498e:	6113      	str	r3, [r2, #16]
 8014990:	4a17      	ldr	r2, [pc, #92]	; (80149f0 <enet_descriptors_chain_init+0x78>)
 8014992:	6013      	str	r3, [r2, #0]
 8014994:	2200      	movs	r2, #0
 8014996:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 801499a:	4916      	ldr	r1, [pc, #88]	; (80149f4 <enet_descriptors_chain_init+0x7c>)
 801499c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80149a0:	600a      	str	r2, [r1, #0]
 80149a2:	4915      	ldr	r1, [pc, #84]	; (80149f8 <enet_descriptors_chain_init+0x80>)
 80149a4:	600a      	str	r2, [r1, #0]
 80149a6:	f103 0110 	add.w	r1, r3, #16
 80149aa:	fb0e 4702 	mla	r7, lr, r2, r4
 80149ae:	f841 7c08 	str.w	r7, [r1, #-8]
 80149b2:	4594      	cmp	ip, r2
 80149b4:	bf94      	ite	ls
 80149b6:	461f      	movls	r7, r3
 80149b8:	460f      	movhi	r7, r1
 80149ba:	3201      	adds	r2, #1
 80149bc:	4290      	cmp	r0, r2
 80149be:	e941 6504 	strd	r6, r5, [r1, #-16]
 80149c2:	f841 7c04 	str.w	r7, [r1, #-4]
 80149c6:	f101 0110 	add.w	r1, r1, #16
 80149ca:	d1ee      	bne.n	80149aa <enet_descriptors_chain_init+0x32>
 80149cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149ce:	4b0b      	ldr	r3, [pc, #44]	; (80149fc <enet_descriptors_chain_init+0x84>)
 80149d0:	f244 55f4 	movw	r5, #17908	; 0x45f4
 80149d4:	60d3      	str	r3, [r2, #12]
 80149d6:	4a0a      	ldr	r2, [pc, #40]	; (8014a00 <enet_descriptors_chain_init+0x88>)
 80149d8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80149dc:	2006      	movs	r0, #6
 80149de:	4c09      	ldr	r4, [pc, #36]	; (8014a04 <enet_descriptors_chain_init+0x8c>)
 80149e0:	6013      	str	r3, [r2, #0]
 80149e2:	e7d7      	b.n	8014994 <enet_descriptors_chain_init+0x1c>
 80149e4:	40029000 	andmi	r9, r2, r0
 80149e8:	2000df64 	andcs	sp, r0, r4, ror #30
 80149ec:	2000d37c 	andcs	sp, r0, ip, ror r3
 80149f0:	2000af24 	andcs	sl, r0, r4, lsr #30
 80149f4:	2000af18 	andcs	sl, r0, r8, lsl pc
 80149f8:	2000af1c 	andcs	sl, r0, ip, lsl pc
 80149fc:	2000d31c 	andcs	sp, r0, ip, lsl r3
 8014a00:	2000af20 	andcs	sl, r0, r0, lsr #30
 8014a04:	2000af64 	andcs	sl, r0, r4, ror #30

08014a08 <enet_frame_receive>:
 8014a08:	4a1d      	ldr	r2, [pc, #116]	; (8014a80 <enet_frame_receive+0x78>)
 8014a0a:	b510      	push	{r4, lr}
 8014a0c:	6813      	ldr	r3, [r2, #0]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	db33      	blt.n	8014a7c <enet_frame_receive+0x74>
 8014a14:	b970      	cbnz	r0, 8014a34 <enet_frame_receive+0x2c>
 8014a16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8014a1a:	6813      	ldr	r3, [r2, #0]
 8014a1c:	6019      	str	r1, [r3, #0]
 8014a1e:	4919      	ldr	r1, [pc, #100]	; (8014a84 <enet_frame_receive+0x7c>)
 8014a20:	6948      	ldr	r0, [r1, #20]
 8014a22:	0604      	lsls	r4, r0, #24
 8014a24:	d419      	bmi.n	8014a5a <enet_frame_receive+0x52>
 8014a26:	6859      	ldr	r1, [r3, #4]
 8014a28:	0448      	lsls	r0, r1, #17
 8014a2a:	d51b      	bpl.n	8014a64 <enet_frame_receive+0x5c>
 8014a2c:	68db      	ldr	r3, [r3, #12]
 8014a2e:	2001      	movs	r0, #1
 8014a30:	6013      	str	r3, [r2, #0]
 8014a32:	bd10      	pop	{r4, pc}
 8014a34:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 8014a38:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8014a3c:	d11e      	bne.n	8014a7c <enet_frame_receive+0x74>
 8014a3e:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8014a42:	3b04      	subs	r3, #4
 8014a44:	428b      	cmp	r3, r1
 8014a46:	d819      	bhi.n	8014a7c <enet_frame_receive+0x74>
 8014a48:	2100      	movs	r1, #0
 8014a4a:	4299      	cmp	r1, r3
 8014a4c:	6814      	ldr	r4, [r2, #0]
 8014a4e:	d2e2      	bcs.n	8014a16 <enet_frame_receive+0xe>
 8014a50:	68a4      	ldr	r4, [r4, #8]
 8014a52:	5d0c      	ldrb	r4, [r1, r4]
 8014a54:	5444      	strb	r4, [r0, r1]
 8014a56:	3101      	adds	r1, #1
 8014a58:	e7f7      	b.n	8014a4a <enet_frame_receive+0x42>
 8014a5a:	2080      	movs	r0, #128	; 0x80
 8014a5c:	6148      	str	r0, [r1, #20]
 8014a5e:	2000      	movs	r0, #0
 8014a60:	6088      	str	r0, [r1, #8]
 8014a62:	e7e0      	b.n	8014a26 <enet_frame_receive+0x1e>
 8014a64:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8014a68:	4906      	ldr	r1, [pc, #24]	; (8014a84 <enet_frame_receive+0x7c>)
 8014a6a:	bf05      	ittet	eq
 8014a6c:	3310      	addeq	r3, #16
 8014a6e:	6809      	ldreq	r1, [r1, #0]
 8014a70:	68cb      	ldrne	r3, [r1, #12]
 8014a72:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8014a76:	bf08      	it	eq
 8014a78:	185b      	addeq	r3, r3, r1
 8014a7a:	e7d8      	b.n	8014a2e <enet_frame_receive+0x26>
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	e7d8      	b.n	8014a32 <enet_frame_receive+0x2a>
 8014a80:	2000af20 	andcs	sl, r0, r0, lsr #30
 8014a84:	40029000 	andmi	r9, r2, r0

08014a88 <enet_frame_transmit>:
 8014a88:	4a1e      	ldr	r2, [pc, #120]	; (8014b04 <enet_frame_transmit+0x7c>)
 8014a8a:	b530      	push	{r4, r5, lr}
 8014a8c:	6813      	ldr	r3, [r2, #0]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	db34      	blt.n	8014afe <enet_frame_transmit+0x76>
 8014a94:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8014a98:	4299      	cmp	r1, r3
 8014a9a:	d830      	bhi.n	8014afe <enet_frame_transmit+0x76>
 8014a9c:	b9e8      	cbnz	r0, 8014ada <enet_frame_transmit+0x52>
 8014a9e:	6813      	ldr	r3, [r2, #0]
 8014aa0:	4819      	ldr	r0, [pc, #100]	; (8014b08 <enet_frame_transmit+0x80>)
 8014aa2:	6059      	str	r1, [r3, #4]
 8014aa4:	6819      	ldr	r1, [r3, #0]
 8014aa6:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8014aaa:	6019      	str	r1, [r3, #0]
 8014aac:	6941      	ldr	r1, [r0, #20]
 8014aae:	6944      	ldr	r4, [r0, #20]
 8014ab0:	f001 0104 	and.w	r1, r1, #4
 8014ab4:	f004 0420 	and.w	r4, r4, #32
 8014ab8:	4321      	orrs	r1, r4
 8014aba:	d110      	bne.n	8014ade <enet_frame_transmit+0x56>
 8014abc:	6819      	ldr	r1, [r3, #0]
 8014abe:	02c8      	lsls	r0, r1, #11
 8014ac0:	d511      	bpl.n	8014ae6 <enet_frame_transmit+0x5e>
 8014ac2:	68db      	ldr	r3, [r3, #12]
 8014ac4:	2001      	movs	r0, #1
 8014ac6:	6013      	str	r3, [r2, #0]
 8014ac8:	bd30      	pop	{r4, r5, pc}
 8014aca:	5cc5      	ldrb	r5, [r0, r3]
 8014acc:	68a4      	ldr	r4, [r4, #8]
 8014ace:	551d      	strb	r5, [r3, r4]
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	428b      	cmp	r3, r1
 8014ad4:	6814      	ldr	r4, [r2, #0]
 8014ad6:	d1f8      	bne.n	8014aca <enet_frame_transmit+0x42>
 8014ad8:	e7e1      	b.n	8014a9e <enet_frame_transmit+0x16>
 8014ada:	2300      	movs	r3, #0
 8014adc:	e7f9      	b.n	8014ad2 <enet_frame_transmit+0x4a>
 8014ade:	6141      	str	r1, [r0, #20]
 8014ae0:	2100      	movs	r1, #0
 8014ae2:	6041      	str	r1, [r0, #4]
 8014ae4:	e7ea      	b.n	8014abc <enet_frame_transmit+0x34>
 8014ae6:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8014aea:	4907      	ldr	r1, [pc, #28]	; (8014b08 <enet_frame_transmit+0x80>)
 8014aec:	bf05      	ittet	eq
 8014aee:	3310      	addeq	r3, #16
 8014af0:	6809      	ldreq	r1, [r1, #0]
 8014af2:	690b      	ldrne	r3, [r1, #16]
 8014af4:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8014af8:	bf08      	it	eq
 8014afa:	185b      	addeq	r3, r3, r1
 8014afc:	e7e2      	b.n	8014ac4 <enet_frame_transmit+0x3c>
 8014afe:	2000      	movs	r0, #0
 8014b00:	e7e2      	b.n	8014ac8 <enet_frame_transmit+0x40>
 8014b02:	bf00      	nop
 8014b04:	2000af24 	andcs	sl, r0, r4, lsr #30
 8014b08:	40029000 	andmi	r9, r2, r0

08014b0c <enet_transmit_checksum_config>:
 8014b0c:	6803      	ldr	r3, [r0, #0]
 8014b0e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8014b12:	430b      	orrs	r3, r1
 8014b14:	6003      	str	r3, [r0, #0]
 8014b16:	4770      	bx	lr

08014b18 <enet_mac_address_set>:
 8014b18:	888a      	ldrh	r2, [r1, #4]
 8014b1a:	4b03      	ldr	r3, [pc, #12]	; (8014b28 <enet_mac_address_set+0x10>)
 8014b1c:	50c2      	str	r2, [r0, r3]
 8014b1e:	680a      	ldr	r2, [r1, #0]
 8014b20:	3304      	adds	r3, #4
 8014b22:	50c2      	str	r2, [r0, r3]
 8014b24:	4770      	bx	lr
 8014b26:	bf00      	nop
 8014b28:	40028040 	andmi	r8, r2, r0, asr #32

08014b2c <enet_rx_enable>:
 8014b2c:	4a05      	ldr	r2, [pc, #20]	; (8014b44 <enet_rx_enable+0x18>)
 8014b2e:	6813      	ldr	r3, [r2, #0]
 8014b30:	f043 0304 	orr.w	r3, r3, #4
 8014b34:	6013      	str	r3, [r2, #0]
 8014b36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014b3a:	6993      	ldr	r3, [r2, #24]
 8014b3c:	f043 0302 	orr.w	r3, r3, #2
 8014b40:	6193      	str	r3, [r2, #24]
 8014b42:	4770      	bx	lr
 8014b44:	40028000 	andmi	r8, r2, r0

08014b48 <enet_phy_write_read>:
 8014b48:	b530      	push	{r4, r5, lr}
 8014b4a:	4604      	mov	r4, r0
 8014b4c:	4d13      	ldr	r5, [pc, #76]	; (8014b9c <enet_phy_write_read+0x54>)
 8014b4e:	0192      	lsls	r2, r2, #6
 8014b50:	6928      	ldr	r0, [r5, #16]
 8014b52:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8014b56:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 8014b5a:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 8014b5e:	4302      	orrs	r2, r0
 8014b60:	02c9      	lsls	r1, r1, #11
 8014b62:	b289      	uxth	r1, r1
 8014b64:	2c02      	cmp	r4, #2
 8014b66:	ea42 0204 	orr.w	r2, r2, r4
 8014b6a:	ea42 0201 	orr.w	r2, r2, r1
 8014b6e:	bf08      	it	eq
 8014b70:	8819      	ldrheq	r1, [r3, #0]
 8014b72:	f042 0201 	orr.w	r2, r2, #1
 8014b76:	bf08      	it	eq
 8014b78:	6169      	streq	r1, [r5, #20]
 8014b7a:	612a      	str	r2, [r5, #16]
 8014b7c:	4907      	ldr	r1, [pc, #28]	; (8014b9c <enet_phy_write_read+0x54>)
 8014b7e:	4a08      	ldr	r2, [pc, #32]	; (8014ba0 <enet_phy_write_read+0x58>)
 8014b80:	6908      	ldr	r0, [r1, #16]
 8014b82:	07c0      	lsls	r0, r0, #31
 8014b84:	d501      	bpl.n	8014b8a <enet_phy_write_read+0x42>
 8014b86:	3a01      	subs	r2, #1
 8014b88:	d1fa      	bne.n	8014b80 <enet_phy_write_read+0x38>
 8014b8a:	690a      	ldr	r2, [r1, #16]
 8014b8c:	43d2      	mvns	r2, r2
 8014b8e:	f002 0001 	and.w	r0, r2, #1
 8014b92:	b90c      	cbnz	r4, 8014b98 <enet_phy_write_read+0x50>
 8014b94:	694a      	ldr	r2, [r1, #20]
 8014b96:	801a      	strh	r2, [r3, #0]
 8014b98:	bd30      	pop	{r4, r5, pc}
 8014b9a:	bf00      	nop
 8014b9c:	40028000 	andmi	r8, r2, r0
 8014ba0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014ba4 <enet_phy_config>:
 8014ba4:	4b22      	ldr	r3, [pc, #136]	; (8014c30 <enet_phy_config+0x8c>)
 8014ba6:	b513      	push	{r0, r1, r4, lr}
 8014ba8:	2001      	movs	r0, #1
 8014baa:	691c      	ldr	r4, [r3, #16]
 8014bac:	f7ff f80a 	bl	8013bc4 <rcu_clock_freq_get>
 8014bb0:	4b20      	ldr	r3, [pc, #128]	; (8014c34 <enet_phy_config+0x90>)
 8014bb2:	4a21      	ldr	r2, [pc, #132]	; (8014c38 <enet_phy_config+0x94>)
 8014bb4:	4403      	add	r3, r0
 8014bb6:	4293      	cmp	r3, r2
 8014bb8:	f024 041c 	bic.w	r4, r4, #28
 8014bbc:	d220      	bcs.n	8014c00 <enet_phy_config+0x5c>
 8014bbe:	f044 0408 	orr.w	r4, r4, #8
 8014bc2:	4b1b      	ldr	r3, [pc, #108]	; (8014c30 <enet_phy_config+0x8c>)
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	611c      	str	r4, [r3, #16]
 8014bc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014bcc:	2101      	movs	r1, #1
 8014bce:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014bd2:	2002      	movs	r0, #2
 8014bd4:	f10d 0306 	add.w	r3, sp, #6
 8014bd8:	f7ff ffb6 	bl	8014b48 <enet_phy_write_read>
 8014bdc:	b310      	cbz	r0, 8014c24 <enet_phy_config+0x80>
 8014bde:	2200      	movs	r2, #0
 8014be0:	4816      	ldr	r0, [pc, #88]	; (8014c3c <enet_phy_config+0x98>)
 8014be2:	f7ff fea8 	bl	8014936 <enet_delay>
 8014be6:	2101      	movs	r1, #1
 8014be8:	4610      	mov	r0, r2
 8014bea:	f10d 0306 	add.w	r3, sp, #6
 8014bee:	f7ff ffab 	bl	8014b48 <enet_phy_write_read>
 8014bf2:	b1b8      	cbz	r0, 8014c24 <enet_phy_config+0x80>
 8014bf4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014bf8:	43c0      	mvns	r0, r0
 8014bfa:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8014bfe:	e012      	b.n	8014c26 <enet_phy_config+0x82>
 8014c00:	4b0f      	ldr	r3, [pc, #60]	; (8014c40 <enet_phy_config+0x9c>)
 8014c02:	4a10      	ldr	r2, [pc, #64]	; (8014c44 <enet_phy_config+0xa0>)
 8014c04:	4403      	add	r3, r0
 8014c06:	4293      	cmp	r3, r2
 8014c08:	d802      	bhi.n	8014c10 <enet_phy_config+0x6c>
 8014c0a:	f044 040c 	orr.w	r4, r4, #12
 8014c0e:	e7d8      	b.n	8014bc2 <enet_phy_config+0x1e>
 8014c10:	4b0d      	ldr	r3, [pc, #52]	; (8014c48 <enet_phy_config+0xa4>)
 8014c12:	4a0e      	ldr	r2, [pc, #56]	; (8014c4c <enet_phy_config+0xa8>)
 8014c14:	4403      	add	r3, r0
 8014c16:	4293      	cmp	r3, r2
 8014c18:	d9d3      	bls.n	8014bc2 <enet_phy_config+0x1e>
 8014c1a:	4b0d      	ldr	r3, [pc, #52]	; (8014c50 <enet_phy_config+0xac>)
 8014c1c:	4a0d      	ldr	r2, [pc, #52]	; (8014c54 <enet_phy_config+0xb0>)
 8014c1e:	4403      	add	r3, r0
 8014c20:	4293      	cmp	r3, r2
 8014c22:	d902      	bls.n	8014c2a <enet_phy_config+0x86>
 8014c24:	2000      	movs	r0, #0
 8014c26:	b002      	add	sp, #8
 8014c28:	bd10      	pop	{r4, pc}
 8014c2a:	f044 0404 	orr.w	r4, r4, #4
 8014c2e:	e7c8      	b.n	8014bc2 <enet_phy_config+0x1e>
 8014c30:	40028000 	andmi	r8, r2, r0
 8014c34:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8014c38:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8014c3c:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8014c40:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8014c44:	017d783f 	cmneq	sp, pc, lsr r8
 8014c48:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8014c4c:	01c9c37f 	biceq	ip, r9, pc, ror r3
 8014c50:	faa2b580 	blx	68c2258 <__stack_size+0x68c0a58>
 8014c54:	0112a880 	tsteq	r2, r0, lsl #17

08014c58 <enet_init>:
 8014c58:	2300      	movs	r3, #0
 8014c5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c5c:	4604      	mov	r4, r0
 8014c5e:	460d      	mov	r5, r1
 8014c60:	4616      	mov	r6, r2
 8014c62:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014c66:	f7ff ff9d 	bl	8014ba4 <enet_phy_config>
 8014c6a:	2800      	cmp	r0, #0
 8014c6c:	d037      	beq.n	8014cde <enet_init+0x86>
 8014c6e:	4b3b      	ldr	r3, [pc, #236]	; (8014d5c <enet_init+0x104>)
 8014c70:	4a3b      	ldr	r2, [pc, #236]	; (8014d60 <enet_init+0x108>)
 8014c72:	6819      	ldr	r1, [r3, #0]
 8014c74:	2c01      	cmp	r4, #1
 8014c76:	ea02 0201 	and.w	r2, r2, r1
 8014c7a:	601a      	str	r2, [r3, #0]
 8014c7c:	f04f 0200 	mov.w	r2, #0
 8014c80:	605a      	str	r2, [r3, #4]
 8014c82:	609a      	str	r2, [r3, #8]
 8014c84:	60da      	str	r2, [r3, #12]
 8014c86:	6999      	ldr	r1, [r3, #24]
 8014c88:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8014c8c:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8014c90:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8014c94:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8014c98:	6199      	str	r1, [r3, #24]
 8014c9a:	4932      	ldr	r1, [pc, #200]	; (8014d64 <enet_init+0x10c>)
 8014c9c:	61da      	str	r2, [r3, #28]
 8014c9e:	6988      	ldr	r0, [r1, #24]
 8014ca0:	4b31      	ldr	r3, [pc, #196]	; (8014d68 <enet_init+0x110>)
 8014ca2:	ea03 0300 	and.w	r3, r3, r0
 8014ca6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8014caa:	618b      	str	r3, [r1, #24]
 8014cac:	680b      	ldr	r3, [r1, #0]
 8014cae:	4b2f      	ldr	r3, [pc, #188]	; (8014d6c <enet_init+0x114>)
 8014cb0:	600b      	str	r3, [r1, #0]
 8014cb2:	d01e      	beq.n	8014cf2 <enet_init+0x9a>
 8014cb4:	08e3      	lsrs	r3, r4, #3
 8014cb6:	0861      	lsrs	r1, r4, #1
 8014cb8:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8014cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014cc0:	430b      	orrs	r3, r1
 8014cc2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014cc6:	2101      	movs	r1, #1
 8014cc8:	2002      	movs	r0, #2
 8014cca:	f10d 0306 	add.w	r3, sp, #6
 8014cce:	f7ff ff3b 	bl	8014b48 <enet_phy_write_read>
 8014cd2:	b158      	cbz	r0, 8014cec <enet_init+0x94>
 8014cd4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014cd8:	f7ff fe2d 	bl	8014936 <enet_delay>
 8014cdc:	e05f      	b.n	8014d9e <enet_init+0x146>
 8014cde:	4824      	ldr	r0, [pc, #144]	; (8014d70 <enet_init+0x118>)
 8014ce0:	f7ff fe29 	bl	8014936 <enet_delay>
 8014ce4:	f7ff ff5e 	bl	8014ba4 <enet_phy_config>
 8014ce8:	2800      	cmp	r0, #0
 8014cea:	d1c0      	bne.n	8014c6e <enet_init+0x16>
 8014cec:	2000      	movs	r0, #0
 8014cee:	b003      	add	sp, #12
 8014cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cf2:	4614      	mov	r4, r2
 8014cf4:	4f1f      	ldr	r7, [pc, #124]	; (8014d74 <enet_init+0x11c>)
 8014cf6:	2201      	movs	r2, #1
 8014cf8:	2000      	movs	r0, #0
 8014cfa:	4611      	mov	r1, r2
 8014cfc:	f10d 0306 	add.w	r3, sp, #6
 8014d00:	f7ff ff22 	bl	8014b48 <enet_phy_write_read>
 8014d04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014d08:	3401      	adds	r4, #1
 8014d0a:	f002 0204 	and.w	r2, r2, #4
 8014d0e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014d12:	b912      	cbnz	r2, 8014d1a <enet_init+0xc2>
 8014d14:	42bc      	cmp	r4, r7
 8014d16:	d1ee      	bne.n	8014cf6 <enet_init+0x9e>
 8014d18:	e7e8      	b.n	8014cec <enet_init+0x94>
 8014d1a:	42bc      	cmp	r4, r7
 8014d1c:	d0e6      	beq.n	8014cec <enet_init+0x94>
 8014d1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014d22:	2101      	movs	r1, #1
 8014d24:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014d28:	2002      	movs	r0, #2
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	f7ff ff0c 	bl	8014b48 <enet_phy_write_read>
 8014d30:	2800      	cmp	r0, #0
 8014d32:	d0db      	beq.n	8014cec <enet_init+0x94>
 8014d34:	2400      	movs	r4, #0
 8014d36:	4f0f      	ldr	r7, [pc, #60]	; (8014d74 <enet_init+0x11c>)
 8014d38:	2201      	movs	r2, #1
 8014d3a:	2000      	movs	r0, #0
 8014d3c:	4611      	mov	r1, r2
 8014d3e:	f10d 0306 	add.w	r3, sp, #6
 8014d42:	f7ff ff01 	bl	8014b48 <enet_phy_write_read>
 8014d46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014d4a:	3401      	adds	r4, #1
 8014d4c:	f002 0220 	and.w	r2, r2, #32
 8014d50:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014d54:	b982      	cbnz	r2, 8014d78 <enet_init+0x120>
 8014d56:	42bc      	cmp	r4, r7
 8014d58:	d1ee      	bne.n	8014d38 <enet_init+0xe0>
 8014d5a:	e7c7      	b.n	8014cec <enet_init+0x94>
 8014d5c:	40028000 	andmi	r8, r2, r0
 8014d60:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8014d64:	40029000 	andmi	r9, r2, r0
 8014d68:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8014d6c:	02c16000 	sbceq	r6, r1, #0
 8014d70:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8014d74:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8014d78:	42bc      	cmp	r4, r7
 8014d7a:	d0b7      	beq.n	8014cec <enet_init+0x94>
 8014d7c:	2101      	movs	r1, #1
 8014d7e:	2210      	movs	r2, #16
 8014d80:	2000      	movs	r0, #0
 8014d82:	f7ff fee1 	bl	8014b48 <enet_phy_write_read>
 8014d86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014d8a:	f013 0f04 	tst.w	r3, #4
 8014d8e:	bf14      	ite	ne
 8014d90:	f44f 6400 	movne.w	r4, #2048	; 0x800
 8014d94:	2400      	moveq	r4, #0
 8014d96:	0799      	lsls	r1, r3, #30
 8014d98:	d401      	bmi.n	8014d9e <enet_init+0x146>
 8014d9a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8014d9e:	4b64      	ldr	r3, [pc, #400]	; (8014f30 <enet_init+0x2d8>)
 8014da0:	056a      	lsls	r2, r5, #21
 8014da2:	6818      	ldr	r0, [r3, #0]
 8014da4:	f420 40b0 	bic.w	r0, r0, #22528	; 0x5800
 8014da8:	ea44 0400 	orr.w	r4, r4, r0
 8014dac:	601c      	str	r4, [r3, #0]
 8014dae:	d50c      	bpl.n	8014dca <enet_init+0x172>
 8014db0:	681a      	ldr	r2, [r3, #0]
 8014db2:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8014db6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014dba:	601a      	str	r2, [r3, #0]
 8014dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014dc0:	6999      	ldr	r1, [r3, #24]
 8014dc2:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
 8014dc6:	430d      	orrs	r5, r1
 8014dc8:	619d      	str	r5, [r3, #24]
 8014dca:	4959      	ldr	r1, [pc, #356]	; (8014f30 <enet_init+0x2d8>)
 8014dcc:	4b59      	ldr	r3, [pc, #356]	; (8014f34 <enet_init+0x2dc>)
 8014dce:	684a      	ldr	r2, [r1, #4]
 8014dd0:	4316      	orrs	r6, r2
 8014dd2:	604e      	str	r6, [r1, #4]
 8014dd4:	681a      	ldr	r2, [r3, #0]
 8014dd6:	07d7      	lsls	r7, r2, #31
 8014dd8:	d510      	bpl.n	8014dfc <enet_init+0x1a4>
 8014dda:	685a      	ldr	r2, [r3, #4]
 8014ddc:	680c      	ldr	r4, [r1, #0]
 8014dde:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8014de2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8014de6:	4320      	orrs	r0, r4
 8014de8:	6008      	str	r0, [r1, #0]
 8014dea:	4853      	ldr	r0, [pc, #332]	; (8014f38 <enet_init+0x2e0>)
 8014dec:	0892      	lsrs	r2, r2, #2
 8014dee:	6981      	ldr	r1, [r0, #24]
 8014df0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8014df4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8014df8:	430a      	orrs	r2, r1
 8014dfa:	6182      	str	r2, [r0, #24]
 8014dfc:	681a      	ldr	r2, [r3, #0]
 8014dfe:	0796      	lsls	r6, r2, #30
 8014e00:	d508      	bpl.n	8014e14 <enet_init+0x1bc>
 8014e02:	494d      	ldr	r1, [pc, #308]	; (8014f38 <enet_init+0x2e0>)
 8014e04:	6898      	ldr	r0, [r3, #8]
 8014e06:	680a      	ldr	r2, [r1, #0]
 8014e08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8014e0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014e10:	4302      	orrs	r2, r0
 8014e12:	600a      	str	r2, [r1, #0]
 8014e14:	681a      	ldr	r2, [r3, #0]
 8014e16:	0755      	lsls	r5, r2, #29
 8014e18:	d508      	bpl.n	8014e2c <enet_init+0x1d4>
 8014e1a:	4947      	ldr	r1, [pc, #284]	; (8014f38 <enet_init+0x2e0>)
 8014e1c:	68d8      	ldr	r0, [r3, #12]
 8014e1e:	680a      	ldr	r2, [r1, #0]
 8014e20:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8014e24:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8014e28:	4302      	orrs	r2, r0
 8014e2a:	600a      	str	r2, [r1, #0]
 8014e2c:	681a      	ldr	r2, [r3, #0]
 8014e2e:	0714      	lsls	r4, r2, #28
 8014e30:	d508      	bpl.n	8014e44 <enet_init+0x1ec>
 8014e32:	4941      	ldr	r1, [pc, #260]	; (8014f38 <enet_init+0x2e0>)
 8014e34:	6918      	ldr	r0, [r3, #16]
 8014e36:	680a      	ldr	r2, [r1, #0]
 8014e38:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8014e3c:	f022 0202 	bic.w	r2, r2, #2
 8014e40:	4302      	orrs	r2, r0
 8014e42:	600a      	str	r2, [r1, #0]
 8014e44:	681a      	ldr	r2, [r3, #0]
 8014e46:	06d0      	lsls	r0, r2, #27
 8014e48:	d506      	bpl.n	8014e58 <enet_init+0x200>
 8014e4a:	493b      	ldr	r1, [pc, #236]	; (8014f38 <enet_init+0x2e0>)
 8014e4c:	4a3b      	ldr	r2, [pc, #236]	; (8014f3c <enet_init+0x2e4>)
 8014e4e:	6988      	ldr	r0, [r1, #24]
 8014e50:	4002      	ands	r2, r0
 8014e52:	6958      	ldr	r0, [r3, #20]
 8014e54:	4302      	orrs	r2, r0
 8014e56:	618a      	str	r2, [r1, #24]
 8014e58:	681a      	ldr	r2, [r3, #0]
 8014e5a:	0691      	lsls	r1, r2, #26
 8014e5c:	d508      	bpl.n	8014e70 <enet_init+0x218>
 8014e5e:	4936      	ldr	r1, [pc, #216]	; (8014f38 <enet_init+0x2e0>)
 8014e60:	6998      	ldr	r0, [r3, #24]
 8014e62:	698a      	ldr	r2, [r1, #24]
 8014e64:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8014e68:	f022 0204 	bic.w	r2, r2, #4
 8014e6c:	4302      	orrs	r2, r0
 8014e6e:	618a      	str	r2, [r1, #24]
 8014e70:	681a      	ldr	r2, [r3, #0]
 8014e72:	0652      	lsls	r2, r2, #25
 8014e74:	d506      	bpl.n	8014e84 <enet_init+0x22c>
 8014e76:	492e      	ldr	r1, [pc, #184]	; (8014f30 <enet_init+0x2d8>)
 8014e78:	69d8      	ldr	r0, [r3, #28]
 8014e7a:	69ca      	ldr	r2, [r1, #28]
 8014e7c:	0c52      	lsrs	r2, r2, #17
 8014e7e:	0452      	lsls	r2, r2, #17
 8014e80:	4302      	orrs	r2, r0
 8014e82:	61ca      	str	r2, [r1, #28]
 8014e84:	681a      	ldr	r2, [r3, #0]
 8014e86:	0617      	lsls	r7, r2, #24
 8014e88:	d517      	bpl.n	8014eba <enet_init+0x262>
 8014e8a:	4c29      	ldr	r4, [pc, #164]	; (8014f30 <enet_init+0x2d8>)
 8014e8c:	6a1a      	ldr	r2, [r3, #32]
 8014e8e:	69a0      	ldr	r0, [r4, #24]
 8014e90:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8014e94:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8014e98:	0400      	lsls	r0, r0, #16
 8014e9a:	0c00      	lsrs	r0, r0, #16
 8014e9c:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8014ea0:	4301      	orrs	r1, r0
 8014ea2:	4825      	ldr	r0, [pc, #148]	; (8014f38 <enet_init+0x2e0>)
 8014ea4:	61a1      	str	r1, [r4, #24]
 8014ea6:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8014eaa:	0a12      	lsrs	r2, r2, #8
 8014eac:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8014eb0:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8014eb4:	430a      	orrs	r2, r1
 8014eb6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8014eba:	681a      	ldr	r2, [r3, #0]
 8014ebc:	05d6      	lsls	r6, r2, #23
 8014ebe:	bf42      	ittt	mi
 8014ec0:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8014ec2:	4a1b      	ldrmi	r2, [pc, #108]	; (8014f30 <enet_init+0x2d8>)
 8014ec4:	6091      	strmi	r1, [r2, #8]
 8014ec6:	681a      	ldr	r2, [r3, #0]
 8014ec8:	0595      	lsls	r5, r2, #22
 8014eca:	bf42      	ittt	mi
 8014ecc:	4a18      	ldrmi	r2, [pc, #96]	; (8014f30 <enet_init+0x2d8>)
 8014ece:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8014ed0:	60d1      	strmi	r1, [r2, #12]
 8014ed2:	681a      	ldr	r2, [r3, #0]
 8014ed4:	0554      	lsls	r4, r2, #21
 8014ed6:	d508      	bpl.n	8014eea <enet_init+0x292>
 8014ed8:	4915      	ldr	r1, [pc, #84]	; (8014f30 <enet_init+0x2d8>)
 8014eda:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8014edc:	684a      	ldr	r2, [r1, #4]
 8014ede:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8014ee2:	f022 0206 	bic.w	r2, r2, #6
 8014ee6:	4302      	orrs	r2, r0
 8014ee8:	604a      	str	r2, [r1, #4]
 8014eea:	681a      	ldr	r2, [r3, #0]
 8014eec:	0510      	lsls	r0, r2, #20
 8014eee:	d508      	bpl.n	8014f02 <enet_init+0x2aa>
 8014ef0:	490f      	ldr	r1, [pc, #60]	; (8014f30 <enet_init+0x2d8>)
 8014ef2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014ef4:	680a      	ldr	r2, [r1, #0]
 8014ef6:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8014efa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8014efe:	4302      	orrs	r2, r0
 8014f00:	600a      	str	r2, [r1, #0]
 8014f02:	681a      	ldr	r2, [r3, #0]
 8014f04:	04d1      	lsls	r1, r2, #19
 8014f06:	d506      	bpl.n	8014f16 <enet_init+0x2be>
 8014f08:	4909      	ldr	r1, [pc, #36]	; (8014f30 <enet_init+0x2d8>)
 8014f0a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014f0c:	680a      	ldr	r2, [r1, #0]
 8014f0e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8014f12:	4302      	orrs	r2, r0
 8014f14:	600a      	str	r2, [r1, #0]
 8014f16:	681a      	ldr	r2, [r3, #0]
 8014f18:	0492      	lsls	r2, r2, #18
 8014f1a:	d506      	bpl.n	8014f2a <enet_init+0x2d2>
 8014f1c:	4904      	ldr	r1, [pc, #16]	; (8014f30 <enet_init+0x2d8>)
 8014f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f20:	680a      	ldr	r2, [r1, #0]
 8014f22:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8014f26:	4313      	orrs	r3, r2
 8014f28:	600b      	str	r3, [r1, #0]
 8014f2a:	2001      	movs	r0, #1
 8014f2c:	e6df      	b.n	8014cee <enet_init+0x96>
 8014f2e:	bf00      	nop
 8014f30:	40028000 	andmi	r8, r2, r0
 8014f34:	2000af28 	andcs	sl, r0, r8, lsr #30
 8014f38:	40029000 	andmi	r9, r2, r0
 8014f3c:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08014f40 <enet_txfifo_flush>:
 8014f40:	4b06      	ldr	r3, [pc, #24]	; (8014f5c <enet_txfifo_flush+0x1c>)
 8014f42:	4807      	ldr	r0, [pc, #28]	; (8014f60 <enet_txfifo_flush+0x20>)
 8014f44:	699a      	ldr	r2, [r3, #24]
 8014f46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014f4a:	619a      	str	r2, [r3, #24]
 8014f4c:	699a      	ldr	r2, [r3, #24]
 8014f4e:	02d2      	lsls	r2, r2, #11
 8014f50:	d502      	bpl.n	8014f58 <enet_txfifo_flush+0x18>
 8014f52:	3801      	subs	r0, #1
 8014f54:	d1fa      	bne.n	8014f4c <enet_txfifo_flush+0xc>
 8014f56:	4770      	bx	lr
 8014f58:	2001      	movs	r0, #1
 8014f5a:	4770      	bx	lr
 8014f5c:	40029000 	andmi	r9, r2, r0
 8014f60:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014f64 <enet_tx_enable>:
 8014f64:	4a06      	ldr	r2, [pc, #24]	; (8014f80 <enet_tx_enable+0x1c>)
 8014f66:	b508      	push	{r3, lr}
 8014f68:	6813      	ldr	r3, [r2, #0]
 8014f6a:	f043 0308 	orr.w	r3, r3, #8
 8014f6e:	6013      	str	r3, [r2, #0]
 8014f70:	f7ff ffe6 	bl	8014f40 <enet_txfifo_flush>
 8014f74:	4a03      	ldr	r2, [pc, #12]	; (8014f84 <enet_tx_enable+0x20>)
 8014f76:	6993      	ldr	r3, [r2, #24]
 8014f78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014f7c:	6193      	str	r3, [r2, #24]
 8014f7e:	bd08      	pop	{r3, pc}
 8014f80:	40028000 	andmi	r8, r2, r0
 8014f84:	40029000 	andmi	r9, r2, r0

08014f88 <enet_enable>:
 8014f88:	b508      	push	{r3, lr}
 8014f8a:	f7ff ffeb 	bl	8014f64 <enet_tx_enable>
 8014f8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014f92:	f7ff bdcb 	b.w	8014b2c <enet_rx_enable>

08014f96 <enet_desc_information_get>:
 8014f96:	2905      	cmp	r1, #5
 8014f98:	d817      	bhi.n	8014fca <enet_desc_information_get+0x34>
 8014f9a:	e8df f001 	tbb	[pc, r1]
 8014f9e:	03091012 	movweq	r1, #36882	; 0x9012
 8014fa2:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8014fa6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8014faa:	4770      	bx	lr
 8014fac:	88c0      	ldrh	r0, [r0, #6]
 8014fae:	e7fa      	b.n	8014fa6 <enet_desc_information_get+0x10>
 8014fb0:	8840      	ldrh	r0, [r0, #2]
 8014fb2:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8014fb6:	2804      	cmp	r0, #4
 8014fb8:	d90a      	bls.n	8014fd0 <enet_desc_information_get+0x3a>
 8014fba:	3804      	subs	r0, #4
 8014fbc:	4770      	bx	lr
 8014fbe:	6880      	ldr	r0, [r0, #8]
 8014fc0:	4770      	bx	lr
 8014fc2:	6800      	ldr	r0, [r0, #0]
 8014fc4:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8014fc8:	4770      	bx	lr
 8014fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fce:	4770      	bx	lr
 8014fd0:	2000      	movs	r0, #0
 8014fd2:	4770      	bx	lr

08014fd4 <enet_rxframe_drop>:
 8014fd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014fd8:	4814      	ldr	r0, [pc, #80]	; (801502c <enet_rxframe_drop+0x58>)
 8014fda:	b510      	push	{r4, lr}
 8014fdc:	6802      	ldr	r2, [r0, #0]
 8014fde:	4914      	ldr	r1, [pc, #80]	; (8015030 <enet_rxframe_drop+0x5c>)
 8014fe0:	6854      	ldr	r4, [r2, #4]
 8014fe2:	6013      	str	r3, [r2, #0]
 8014fe4:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8014fe8:	680b      	ldr	r3, [r1, #0]
 8014fea:	d009      	beq.n	8015000 <enet_rxframe_drop+0x2c>
 8014fec:	b12b      	cbz	r3, 8014ffa <enet_rxframe_drop+0x26>
 8014fee:	68da      	ldr	r2, [r3, #12]
 8014ff0:	6002      	str	r2, [r0, #0]
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	b1ba      	cbz	r2, 8015026 <enet_rxframe_drop+0x52>
 8014ff6:	600a      	str	r2, [r1, #0]
 8014ff8:	bd10      	pop	{r4, pc}
 8014ffa:	68d3      	ldr	r3, [r2, #12]
 8014ffc:	6003      	str	r3, [r0, #0]
 8014ffe:	e7fb      	b.n	8014ff8 <enet_rxframe_drop+0x24>
 8015000:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8015004:	4c0b      	ldr	r4, [pc, #44]	; (8015034 <enet_rxframe_drop+0x60>)
 8015006:	d006      	beq.n	8015016 <enet_rxframe_drop+0x42>
 8015008:	68e2      	ldr	r2, [r4, #12]
 801500a:	6002      	str	r2, [r0, #0]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d0f3      	beq.n	8014ff8 <enet_rxframe_drop+0x24>
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	600b      	str	r3, [r1, #0]
 8015014:	e7f0      	b.n	8014ff8 <enet_rxframe_drop+0x24>
 8015016:	6824      	ldr	r4, [r4, #0]
 8015018:	3210      	adds	r2, #16
 801501a:	f3c4 0484 	ubfx	r4, r4, #2, #5
 801501e:	4422      	add	r2, r4
 8015020:	6002      	str	r2, [r0, #0]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d0e8      	beq.n	8014ff8 <enet_rxframe_drop+0x24>
 8015026:	3310      	adds	r3, #16
 8015028:	e7f3      	b.n	8015012 <enet_rxframe_drop+0x3e>
 801502a:	bf00      	nop
 801502c:	2000af20 	andcs	sl, r0, r0, lsr #30
 8015030:	2000af18 	andcs	sl, r0, r8, lsl pc
 8015034:	40029000 	andmi	r9, r2, r0

08015038 <enet_rxframe_size_get>:
 8015038:	b508      	push	{r3, lr}
 801503a:	4b0c      	ldr	r3, [pc, #48]	; (801506c <enet_rxframe_size_get+0x34>)
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	6818      	ldr	r0, [r3, #0]
 8015040:	2800      	cmp	r0, #0
 8015042:	db10      	blt.n	8015066 <enet_rxframe_size_get+0x2e>
 8015044:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8015048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801504c:	d003      	beq.n	8015056 <enet_rxframe_size_get+0x1e>
 801504e:	f7ff ffc1 	bl	8014fd4 <enet_rxframe_drop>
 8015052:	2001      	movs	r0, #1
 8015054:	bd08      	pop	{r3, pc}
 8015056:	f000 0321 	and.w	r3, r0, #33	; 0x21
 801505a:	2b21      	cmp	r3, #33	; 0x21
 801505c:	d0f7      	beq.n	801504e <enet_rxframe_size_get+0x16>
 801505e:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8015062:	3804      	subs	r0, #4
 8015064:	e7f6      	b.n	8015054 <enet_rxframe_size_get+0x1c>
 8015066:	2000      	movs	r0, #0
 8015068:	e7f4      	b.n	8015054 <enet_rxframe_size_get+0x1c>
 801506a:	bf00      	nop
 801506c:	2000af20 	andcs	sl, r0, r0, lsr #30

08015070 <enet_initpara_reset>:
 8015070:	2200      	movs	r2, #0
 8015072:	4b08      	ldr	r3, [pc, #32]	; (8015094 <enet_initpara_reset+0x24>)
 8015074:	e9c3 2200 	strd	r2, r2, [r3]
 8015078:	e9c3 2202 	strd	r2, r2, [r3, #8]
 801507c:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8015080:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8015084:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8015088:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 801508c:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8015090:	639a      	str	r2, [r3, #56]	; 0x38
 8015092:	4770      	bx	lr
 8015094:	2000af28 	andcs	sl, r0, r8, lsr #30

08015098 <enet_deinit>:
 8015098:	b508      	push	{r3, lr}
 801509a:	f640 200e 	movw	r0, #2574	; 0xa0e
 801509e:	f7fe fcd8 	bl	8013a52 <rcu_periph_reset_enable>
 80150a2:	f640 200e 	movw	r0, #2574	; 0xa0e
 80150a6:	f7fe fcd6 	bl	8013a56 <rcu_periph_reset_disable>
 80150aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80150ae:	f7ff bfdf 	b.w	8015070 <enet_initpara_reset>
	...

080150b4 <i2c_clock_config>:
 80150b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150b6:	4605      	mov	r5, r0
 80150b8:	2002      	movs	r0, #2
 80150ba:	460c      	mov	r4, r1
 80150bc:	4617      	mov	r7, r2
 80150be:	f7fe fd81 	bl	8013bc4 <rcu_clock_freq_get>
 80150c2:	4927      	ldr	r1, [pc, #156]	; (8015160 <i2c_clock_config+0xac>)
 80150c4:	4a27      	ldr	r2, [pc, #156]	; (8015164 <i2c_clock_config+0xb0>)
 80150c6:	fbb0 f1f1 	udiv	r1, r0, r1
 80150ca:	4290      	cmp	r0, r2
 80150cc:	bf34      	ite	cc
 80150ce:	460b      	movcc	r3, r1
 80150d0:	2336      	movcs	r3, #54	; 0x36
 80150d2:	686e      	ldr	r6, [r5, #4]
 80150d4:	4a24      	ldr	r2, [pc, #144]	; (8015168 <i2c_clock_config+0xb4>)
 80150d6:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80150da:	431e      	orrs	r6, r3
 80150dc:	4294      	cmp	r4, r2
 80150de:	606e      	str	r6, [r5, #4]
 80150e0:	d816      	bhi.n	8015110 <i2c_clock_config+0x5c>
 80150e2:	3101      	adds	r1, #1
 80150e4:	2935      	cmp	r1, #53	; 0x35
 80150e6:	d90d      	bls.n	8015104 <i2c_clock_config+0x50>
 80150e8:	2336      	movs	r3, #54	; 0x36
 80150ea:	622b      	str	r3, [r5, #32]
 80150ec:	0064      	lsls	r4, r4, #1
 80150ee:	fbb0 f4f4 	udiv	r4, r0, r4
 80150f2:	2c04      	cmp	r4, #4
 80150f4:	bf38      	it	cc
 80150f6:	2404      	movcc	r4, #4
 80150f8:	69e8      	ldr	r0, [r5, #28]
 80150fa:	f3c4 040b 	ubfx	r4, r4, #0, #12
 80150fe:	4304      	orrs	r4, r0
 8015100:	61ec      	str	r4, [r5, #28]
 8015102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015104:	2902      	cmp	r1, #2
 8015106:	d801      	bhi.n	801510c <i2c_clock_config+0x58>
 8015108:	2302      	movs	r3, #2
 801510a:	e7ee      	b.n	80150ea <i2c_clock_config+0x36>
 801510c:	6229      	str	r1, [r5, #32]
 801510e:	e7ed      	b.n	80150ec <i2c_clock_config+0x38>
 8015110:	4a16      	ldr	r2, [pc, #88]	; (801516c <i2c_clock_config+0xb8>)
 8015112:	4294      	cmp	r4, r2
 8015114:	d8f5      	bhi.n	8015102 <i2c_clock_config+0x4e>
 8015116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801511a:	4353      	muls	r3, r2
 801511c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015120:	fbb3 f3f2 	udiv	r3, r3, r2
 8015124:	3301      	adds	r3, #1
 8015126:	622b      	str	r3, [r5, #32]
 8015128:	b997      	cbnz	r7, 8015150 <i2c_clock_config+0x9c>
 801512a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801512e:	fbb0 f4f4 	udiv	r4, r0, r4
 8015132:	69eb      	ldr	r3, [r5, #28]
 8015134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015138:	61eb      	str	r3, [r5, #28]
 801513a:	f3c4 030b 	ubfx	r3, r4, #0, #12
 801513e:	b90b      	cbnz	r3, 8015144 <i2c_clock_config+0x90>
 8015140:	f044 0401 	orr.w	r4, r4, #1
 8015144:	69eb      	ldr	r3, [r5, #28]
 8015146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801514a:	61eb      	str	r3, [r5, #28]
 801514c:	69e8      	ldr	r0, [r5, #28]
 801514e:	e7d6      	b.n	80150fe <i2c_clock_config+0x4a>
 8015150:	2119      	movs	r1, #25
 8015152:	434c      	muls	r4, r1
 8015154:	69eb      	ldr	r3, [r5, #28]
 8015156:	fbb0 f4f4 	udiv	r4, r0, r4
 801515a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801515e:	e7eb      	b.n	8015138 <i2c_clock_config+0x84>
 8015160:	000f4240 	andeq	r4, pc, r0, asr #4
 8015164:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8015168:	000186a0 	andeq	r8, r1, r0, lsr #13
 801516c:	00061a80 	andeq	r1, r6, r0, lsl #21

08015170 <i2c_ack_config>:
 8015170:	6803      	ldr	r3, [r0, #0]
 8015172:	2901      	cmp	r1, #1
 8015174:	bf0c      	ite	eq
 8015176:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 801517a:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 801517e:	6003      	str	r3, [r0, #0]
 8015180:	4770      	bx	lr

08015182 <i2c_ackpos_config>:
 8015182:	6803      	ldr	r3, [r0, #0]
 8015184:	b919      	cbnz	r1, 801518e <i2c_ackpos_config+0xc>
 8015186:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801518a:	6003      	str	r3, [r0, #0]
 801518c:	4770      	bx	lr
 801518e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015192:	e7fa      	b.n	801518a <i2c_ackpos_config+0x8>

08015194 <i2c_master_addressing>:
 8015194:	3202      	adds	r2, #2
 8015196:	bf0c      	ite	eq
 8015198:	f021 0101 	biceq.w	r1, r1, #1
 801519c:	f041 0101 	orrne.w	r1, r1, #1
 80151a0:	6101      	str	r1, [r0, #16]
 80151a2:	4770      	bx	lr

080151a4 <i2c_enable>:
 80151a4:	6803      	ldr	r3, [r0, #0]
 80151a6:	f043 0301 	orr.w	r3, r3, #1
 80151aa:	6003      	str	r3, [r0, #0]
 80151ac:	4770      	bx	lr

080151ae <i2c_start_on_bus>:
 80151ae:	6803      	ldr	r3, [r0, #0]
 80151b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80151b4:	6003      	str	r3, [r0, #0]
 80151b6:	4770      	bx	lr

080151b8 <i2c_stop_on_bus>:
 80151b8:	6803      	ldr	r3, [r0, #0]
 80151ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80151be:	6003      	str	r3, [r0, #0]
 80151c0:	4770      	bx	lr

080151c2 <i2c_data_transmit>:
 80151c2:	6101      	str	r1, [r0, #16]
 80151c4:	4770      	bx	lr

080151c6 <i2c_data_receive>:
 80151c6:	6900      	ldr	r0, [r0, #16]
 80151c8:	b2c0      	uxtb	r0, r0
 80151ca:	4770      	bx	lr

080151cc <i2c_flag_get>:
 80151cc:	098b      	lsrs	r3, r1, #6
 80151ce:	5818      	ldr	r0, [r3, r0]
 80151d0:	f001 011f 	and.w	r1, r1, #31
 80151d4:	40c8      	lsrs	r0, r1
 80151d6:	f000 0001 	and.w	r0, r0, #1
 80151da:	4770      	bx	lr

080151dc <i2c_flag_clear>:
 80151dc:	f240 5301 	movw	r3, #1281	; 0x501
 80151e0:	4299      	cmp	r1, r3
 80151e2:	b510      	push	{r4, lr}
 80151e4:	d102      	bne.n	80151ec <i2c_flag_clear+0x10>
 80151e6:	6943      	ldr	r3, [r0, #20]
 80151e8:	6983      	ldr	r3, [r0, #24]
 80151ea:	bd10      	pop	{r4, pc}
 80151ec:	2201      	movs	r2, #1
 80151ee:	098c      	lsrs	r4, r1, #6
 80151f0:	5823      	ldr	r3, [r4, r0]
 80151f2:	f001 011f 	and.w	r1, r1, #31
 80151f6:	fa02 f101 	lsl.w	r1, r2, r1
 80151fa:	ea23 0101 	bic.w	r1, r3, r1
 80151fe:	5021      	str	r1, [r4, r0]
 8015200:	e7f3      	b.n	80151ea <i2c_flag_clear+0xe>
	...

Disassembly of section .rodata:

08015204 <vtable for DisplayHandler-0xdc>:
 8015204:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015208:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8015214:	03020100 	movweq	r0, #8448	; 0x2100
 8015218:	08070604 	stmdaeq	r7, {r2, r9, sl}
 801521c:	00000009 	andeq	r0, r0, r9
 8015220:	03020100 	movweq	r0, #8448	; 0x2100
 8015224:	584d4404 	stmdapl	sp, {r2, sl, lr}^
 8015228:	706e4920 	rsbvc	r4, lr, r0, lsr #18
 801522c:	44007475 	strmi	r7, [r0], #-1141	; 0xfffffb8b
 8015230:	4f20584d 	svcmi	0x0020584d
 8015234:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8015238:	39310074 	ldmdbcc	r1!, {r2, r4, r5, r6}
 801523c:	3a36353a 	bcc	8da272c <__exidx_end+0xd8b1ec>
 8015240:	46003734 			; <UNDEFINED> instruction: 0x46003734
 8015244:	32206265 	eorcc	r6, r0, #1342177286	; 0x50000006
 8015248:	30322033 	eorscc	r2, r2, r3, lsr r0
 801524c:	41003232 	tstmi	r0, r2, lsr r2
 8015250:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 8015254:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 8015258:	646f4e20 	strbtvs	r4, [pc], #-3616	; 8015260 <_etext+0x5c>
 801525c:	5b1b2065 	blpl	86dd3f8 <__exidx_end+0x6c5eb8>
 8015260:	446d3233 	strbtmi	r3, [sp], #-563	; 0xfffffdcd
 8015264:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 8015268:	63204d44 			; <UNDEFINED> instruction: 0x63204d44
 801526c:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 8015270:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 8015274:	317b2072 	cmncc	fp, r2, ror r0
 8015278:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 801527c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015280:	5b1b7d65 	blpl	86f481c <__exidx_end+0x6dd2dc>
 8015284:	006d3733 	rsbeq	r3, sp, r3, lsr r7
 8015288:	6f635f2e 	svcvs	0x00635f2e
 801528c:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8015290:	685f2e00 	ldmdavs	pc, {r9, sl, fp, sp}^	; <UNPREDICTABLE>
 8015294:	00707474 	rsbseq	r7, r0, r4, ror r4
 8015298:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 801529c:	7472413d 	ldrbtvc	r4, [r2], #-317	; 0xfffffec3
 80152a0:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 80152a4:	44203420 	strtmi	r3, [r0], #-1056	; 0xfffffbe0
 80152a8:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 80152ac:	41004d44 	tstmi	r0, r4, asr #26
 80152b0:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 80152b4:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 80152b8:	00732520 	rsbseq	r2, r3, r0, lsr #10
 80152bc:	21786d64 	cmncs	r8, r4, ror #26
 80152c0:	65726200 	ldrbvs	r6, [r2, #-512]!	; 0xfffffe00
 80152c4:	00236b61 	eoreq	r6, r3, r1, ror #22
 80152c8:	2362616d 	cmncs	r2, #1073741851	; 0x4000001b
 80152cc:	66657200 	strbtvs	r7, [r5], -r0, lsl #4
 80152d0:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 80152d4:	6c730023 	ldclvs	0, cr0, [r3], #-140	; 0xffffff74
 80152d8:	2373746f 	cmncs	r3, #1862270976	; 0x6f000000
 80152dc:	00000000 	andeq	r0, r0, r0

080152e0 <vtable for DisplayHandler>:
	...
 80152e8:	08007e8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r9, sl, fp, ip, sp, lr}
 80152ec:	08007ee9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 80152f0:	08007f8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}

080152f4 <vtable for DisplayUdfHandler>:
	...
 80152fc:	08007e91 	stmdaeq	r0, {r0, r4, r7, r9, sl, fp, ip, sp, lr}
 8015300:	08007ef5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 8015304:	08007f65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 8015308:	08007e93 	stmdaeq	r0, {r0, r1, r4, r7, r9, sl, fp, ip, sp, lr}
 801530c:	08007f51 	stmdaeq	r0, {r0, r4, r6, r8, r9, sl, fp, ip, sp, lr}
 8015310:	08007f3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip, sp, lr}
 8015314:	08007f29 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, fp, ip, sp, lr}
 8015318:	08007f15 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, fp, ip, sp, lr}
 801531c:	08007f01 	stmdaeq	r0, {r0, r8, r9, sl, fp, ip, sp, lr}

08015320 <vtable for ArtNetReboot>:
	...
 8015328:	08007e95 	stmdaeq	r0, {r0, r2, r4, r7, r9, sl, fp, ip, sp, lr}
 801532c:	08007edd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8015330:	08007eb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, fp, ip, sp, lr}

08015334 <CSWTCH.100>:
 8015334:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8015338:	 			; <UNDEFINED> instruction: 0x312e3146

08015339 <SOFTWARE_VERSION>:
 8015339:	00312e31 	eorseq	r2, r1, r1, lsr lr
 801533d:	 	andeq	r0, r0, r0

08015340 <vtable for DmxInput>:
	...
 8015348:	08008689 	stmdaeq	r0, {r0, r3, r7, r9, sl, pc}
 801534c:	08008719 	stmdaeq	r0, {r0, r3, r4, r8, r9, sl, pc}
 8015350:	0800868d 	stmdaeq	r0, {r0, r2, r3, r7, r9, sl, pc}
 8015354:	080086b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r9, sl, pc}
 8015358:	080086e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, pc}
 801535c:	6e552020 	cdpvs	0, 5, cr2, cr5, cr0, {1}
 8015360:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8015364:	20736573 	rsbscs	r6, r3, r3, ror r5
 8015368:	20657261 	rsbcs	r7, r5, r1, ror #4
 801536c:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8015370:	20646570 	rsbcs	r6, r4, r0, ror r5
 8015374:	000a312b 	andeq	r3, sl, fp, lsr #2

08015378 <vtable for ArtNet4Node>:
	...
 8015380:	08008799 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, sl, pc}
 8015384:	08008887 	stmdaeq	r0, {r0, r1, r2, r7, fp, pc}
 8015388:	0800873d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, sl, pc}
 801538c:	080087b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, sl, pc}
 8015390:	08008899 	stmdaeq	r0, {r0, r3, r4, r7, fp, pc}
 8015394:	0800887f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, fp, pc}

08015398 <ArtNetMsgConst::START>:
 8015398:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 801539c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80153a0:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 80153a4:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

080153a9 <ArtNetMsgConst::PARAMS>:
 80153a9:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80153ad:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80153b1:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80153b5:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80153b9:	0074654e 	rsbseq	r6, r4, lr, asr #10

080153bd <ArtNetMsgConst::RDM_RUN>:
 80153bd:	6e6e7552 	mcrvs	5, 3, r7, cr14, cr2, {2}
 80153c1:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80153c5:	204d4452 	subcs	r4, sp, r2, asr r4
 80153c9:	63736944 	cmnvs	r3, #68, 18	; 0x110000
 80153cd:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 80153d1:	 	subvc	r0, r1, #121	; 0x79

080153d3 <ArtNetMsgConst::STARTED>:
 80153d3:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80153d7:	2074654e 	rsbscs	r6, r4, lr, asr #10
 80153db:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 80153df:	00646574 	rsbeq	r6, r4, r4, ror r5
 80153e3:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 80153e7:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 80153eb:	73250052 			; <UNDEFINED> instruction: 0x73250052
 80153ef:	20732520 	rsbscs	r2, r3, r0, lsr #10
 80153f3:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 80153f7:	74680073 	strbtvc	r0, [r8], #-115	; 0xffffff8d
 80153fb:	2f3a7074 	svccs	0x003a7074
 80153ff:	3364672f 	cmncc	r4, #12320768	; 0xbc0000
 8015403:	6d642d32 	stclvs	13, cr2, [r4, #-200]!	; 0xffffff38
 8015407:	726f2e78 	rsbvc	r2, pc, #120, 28	; 0x780
 801540b:	6d450067 	stclvs	0, cr0, [r5, #-412]	; 0xfffffe64
 801540f:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 8015413:	 	tstmi	r0, r5, ror #8

08015416 <artnet::NODE_ID>:
 8015416:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801541a:	0074654e 	rsbseq	r6, r4, lr, asr #10

0801541e <defaults::SHORT_NAME>:
 801541e:	20567641 	subscs	r7, r6, r1, asr #12
 8015422:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015426:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801542a:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

0801542f <artnet::NODE_ID>:
 801542f:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015433:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8015437:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 801543b:	30255b20 	eorcc	r5, r5, r0, lsr #22
 801543f:	205d6434 	subscs	r6, sp, r4, lsr r4
 8015443:	41207325 			; <UNDEFINED> instruction: 0x41207325
 8015447:	 	tstmi	r0, r6, ror r6

0801544a <artnet::NODE_ID>:
 801544a:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801544e:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8015452:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 8015456:	72204d44 	eorvc	r4, r0, #68, 26	; 0x1100
 801545a:	6f707365 	svcvs	0x00707365
 801545e:	0a65736e 	beq	997221e <__exidx_end+0x195acde>
 8015462:	50544800 	subspl	r4, r4, r0, lsl #16
 8015466:	50544c00 	subspl	r4, r4, r0, lsl #24
 801546a:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 801546e:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8015472:	43417300 	movtmi	r7, #4864	; 0x1300
 8015476:	6f4e004e 	svcvs	0x004e004e
 801547a:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
 801547e:	255b2064 	ldrbcs	r2, [fp, #-100]	; 0xffffff9c
 8015482:	000a5d75 	andeq	r5, sl, r5, ror sp
 8015486:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 801548a:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 801548e:	20202065 	eorcs	r2, r0, r5, rrx
 8015492:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015496:	0a64252e 	beq	991e956 <__exidx_end+0x1907416>
 801549a:	68532000 	ldmdavs	r3, {sp}^
 801549e:	2074726f 	rsbscs	r7, r4, pc, ror #4
 80154a2:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 80154a6:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 80154aa:	20000a73 	andcs	r0, r0, r3, ror sl
 80154ae:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 80154b2:	6d616e20 	stclvs	14, cr6, [r1, #-128]!	; 0xffffff80
 80154b6:	3a202065 	bcc	881d652 <__exidx_end+0x806112>
 80154ba:	0a732520 	beq	9cde942 <__exidx_end+0x1cc7402>
 80154be:	754f2000 	strbvc	r2, [pc, #-0]	; 80154c6 <artnet::NODE_ID+0x7c>
 80154c2:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 80154c6:	2020000a 	eorcs	r0, r0, sl
 80154ca:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 80154ce:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 80154d2:	3a642520 	bcc	991e95a <__exidx_end+0x190741a>
 80154d6:	322d255b 	eorcc	r2, sp, #381681664	; 0x16c00000
 80154da:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 80154de:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 80154e2:	5d64322d 	sfmpl	f3, 2, [r4, #-180]!	; 0xffffff4c
 80154e6:	7534253a 	ldrvc	r2, [r4, #-1338]!	; 0xfffffac6
 80154ea:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 80154ee:	7b20005d 	blvc	881566a <__exidx_end+0x7fe12a>
 80154f2:	0a7d7325 	beq	9f7218e <__exidx_end+0x1f5ac4e>
 80154f6:	6e492000 	cdpvs	0, 4, cr2, cr9, cr0, {0}
 80154fa:	0a747570 	beq	9d32ac2 <__exidx_end+0x1d1b582>
 80154fe:	50202000 	eorpl	r2, r0, r0
 8015502:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8015506:	20643225 	rsbcs	r3, r4, r5, lsr #4
 801550a:	5b3a6425 	blpl	8eae5a6 <__exidx_end+0xe97066>
 801550e:	64322d25 	ldrtvs	r2, [r2], #-3365	; 0xfffff2db
 8015512:	322d253a 	eorcc	r2, sp, #243269632	; 0xe800000
 8015516:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 801551a:	3a5d6432 	bcc	976e5ea <__exidx_end+0x17570aa>
 801551e:	20753425 	rsbscs	r3, r5, r5, lsr #8
 8015522:	25203e2d 	strcs	r3, [r0, #-3629]!	; 0xfffff1d3
 8015526:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801552a:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801552e:	000a6425 	andeq	r6, sl, r5, lsr #8
 8015532:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8015536:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 801553a:	73252300 			; <UNDEFINED> instruction: 0x73252300
 801553e:	0a64253d 	beq	991ea3a <__exidx_end+0x19074fa>
 8015542:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8015546:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801554a:	002c2273 	eoreq	r2, ip, r3, ror r2
 801554e:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8015552:	000a7325 	andeq	r7, sl, r5, lsr #6
 8015556:	6e636173 	mcrvs	1, 3, r6, cr3, cr3, {3}
 801555a:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 801555e:	6f007475 	svcvs	0x00007475
 8015562:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8015566:	74680074 	strbtvc	r0, [r8], #-116	; 0xffffff8c
 801556a:	746c0070 	strbtvc	r0, [ip], #-112	; 0xffffff90
 801556e:	72610070 	rsbvc	r0, r1, #112	; 0x70
 8015572:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
 8015576:	6c754d00 	ldclvs	13, cr4, [r5], #-0
 801557a:	70206974 	eorvc	r6, r0, r4, ror r9
 801557e:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8015582:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 8015586:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801558a:	6f697461 	svcvs	0x00697461
 801558e:	6f4e006e 	svcvs	0x004e006e
 8015592:	44006564 	strmi	r6, [r0], #-1380	; 0xfffffa9c
 8015596:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 801559a:	4f204d44 	svcmi	0x00204d44
 801559e:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 80155a2:	72410074 	subvc	r0, r1, #116	; 0x74
 80155a6:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 80155aa:	00342074 	eorseq	r2, r4, r4, ror r0

080155ae <ArtNetParamsConst::ENABLE_RDM>:
 80155ae:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80155b2:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 80155b6:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

080155b9 <ArtNetParamsConst::MAP_UNIVERSE0>:
 80155b9:	5f70616d 	svcpl	0x0070616d
 80155bd:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80155c1:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80155c5:	 	rsbsvc	r0, r0, #48	; 0x30

080155c7 <ArtNetParamsConst::PROTOCOL_PORT>:
 80155c7:	746f7270 	strbtvc	r7, [pc], #-624	; 80155cf <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 80155cb:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8015414 <ArtNetMsgConst::STARTED+0x41>
 80155cf:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80155d3:	00615f74 	rsbeq	r5, r1, r4, ror pc
 80155d7:	746f7270 	strbtvc	r7, [pc], #-624	; 80155df <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 80155db:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8015424 <defaults::SHORT_NAME+0x6>
 80155df:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80155e3:	00625f74 	rsbeq	r5, r2, r4, ror pc
 80155e7:	746f7270 	strbtvc	r7, [pc], #-624	; 80155ef <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 80155eb:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8015434 <artnet::NODE_ID+0x5>
 80155ef:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80155f3:	00635f74 	rsbeq	r5, r3, r4, ror pc
 80155f7:	746f7270 	strbtvc	r7, [pc], #-624	; 80155ff <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 80155fb:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8015444 <artnet::NODE_ID+0x15>
 80155ff:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8015603:	00645f74 	rsbeq	r5, r4, r4, ror pc

08015607 <ArtNetParamsConst::NODE_LONG_NAME>:
 8015607:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 801560b:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 801560f:	 	strbvs	r0, [pc, #-101]!	; 80155b2 <ArtNetParamsConst::ENABLE_RDM+0x4>

08015611 <ArtNetParamsConst::NODE_OEM_VALUE>:
 8015611:	5f6d656f 	svcpl	0x006d656f
 8015615:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8015619:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

0801561b <ArtNetParamsConst::NODE_SHORT_NAME>:
 801561b:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 801561f:	616e5f74 	smcvs	58868	; 0xe5f4
 8015623:	 	strvs	r6, [r0], #-1389	; 0xfffffa93

08015626 <ArtNetParamsConst::DESTINATION_IP_PORT>:
 8015626:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801562a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801562e:	5f6e6f69 	svcpl	0x006e6f69
 8015632:	705f7069 	subsvc	r7, pc, r9, rrx
 8015636:	5f74726f 	svcpl	0x0074726f
 801563a:	00000061 	andeq	r0, r0, r1, rrx
 801563e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8015642:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8015646:	5f6e6f69 	svcpl	0x006e6f69
 801564a:	705f7069 	subsvc	r7, pc, r9, rrx
 801564e:	5f74726f 	svcpl	0x0074726f
 8015652:	00000062 	andeq	r0, r0, r2, rrx
 8015656:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801565a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801565e:	5f6e6f69 	svcpl	0x006e6f69
 8015662:	705f7069 	subsvc	r7, pc, r9, rrx
 8015666:	5f74726f 	svcpl	0x0074726f
 801566a:	00000063 	andeq	r0, r0, r3, rrx
 801566e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8015672:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8015676:	5f6e6f69 	svcpl	0x006e6f69
 801567a:	705f7069 	subsvc	r7, pc, r9, rrx
 801567e:	5f74726f 	svcpl	0x0074726f
 8015682:	00000064 	andeq	r0, r0, r4, rrx

08015686 <ArtNetParamsConst::DISABLE_MERGE_TIMEOUT>:
 8015686:	61736964 	cmnvs	r3, r4, ror #18
 801568a:	5f656c62 	svcpl	0x00656c62
 801568e:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8015692:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 8015696:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8015131 <i2c_clock_config+0x7d>
 801569a:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

0801569c <ArtNetParamsConst::NODE_NETWORK_DATA_LOSS_TIMEOUT>:
 801569c:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 80156a0:	5f6b726f 	svcpl	0x006b726f
 80156a4:	61746164 	cmnvs	r4, r4, ror #2
 80156a8:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
 80156ac:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 80156b0:	756f656d 	strbvc	r6, [pc, #-1389]!	; 801514b <i2c_clock_config+0x97>
 80156b4:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

080156b6 <ArtNetParamsConst::NET>:
 80156b6:	0074656e 	rsbseq	r6, r4, lr, ror #10

080156ba <ArtNetParamsConst::SUBNET>:
 80156ba:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 80156be:	 	andvc	r7, r0, r5, ror #8

080156c1 <ArtNetParamsConst::PROTOCOL>:
 80156c1:	746f7270 	strbtvc	r7, [pc], #-624	; 80156c9 <ArtNetParamsConst::PROTOCOL+0x8>
 80156c5:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8015510 <artnet::NODE_ID+0xc6>
	...

080156ca <ArtNetParamsConst::FILE_NAME>:
 80156ca:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 80156ce:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 80156d2:	 			; <UNDEFINED> instruction: 0xff007478

080156d5 <ArtNetConst::OEM_ID>:
 80156d5:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

080156d7 <ArtNetConst::ESTA_ID>:
 80156d7:	 	strcc	r0, [r1, #-80]	; 0xffffffb0

080156d9 <ArtNetConst::VERSION>:
 80156d9:	33323501 	teqcc	r2, #4194304	; 0x400000
 80156dd:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 80156e1:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 80156e5:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 80156e9:	20733834 	rsbscs	r3, r3, r4, lsr r8
 80156ed:	30007325 	andcc	r7, r0, r5, lsr #6
 80156f1:	6f4e202e 	svcvs	0x004e202e
 80156f5:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 80156f9:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 80156fd:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 8015701:	202c6465 	eorcs	r6, ip, r5, ror #8
 8015705:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 8015709:	6f687320 	svcvs	0x00687320
 801570d:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 8015711:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 8015715:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8015719:	000a216e 	andeq	r2, sl, lr, ror #2
 801571d:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8015721:	000a6567 	andeq	r6, sl, r7, ror #10
 8015725:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8015729:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 801572d:	203a2065 	eorscs	r2, sl, r5, rrx
 8015731:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015735:	20000a64 	andcs	r0, r0, r4, ror #20
 8015739:	20444943 	subcs	r4, r4, r3, asr #18
 801573d:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015741:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8015745:	20000a73 	andcs	r0, r0, r3, ror sl
 8015749:	726f5020 	rsbvc	r5, pc, #32
 801574d:	32252074 	eorcc	r2, r5, #116	; 0x74
 8015751:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 8015755:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8015759:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 801575d:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8015761:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8015765:	2020000a 	eorcs	r0, r0, sl
 8015769:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 801576d:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8015771:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8015775:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015779:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 801577d:	5b206433 	blpl	882e851 <__exidx_end+0x817311>
 8015781:	0a5d6425 	beq	976e81d <__exidx_end+0x17572dd>
 8015785:	79532000 	ldmdbvc	r3, {sp}^
 8015789:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 801578d:	7a696e6f 	bvc	9a71151 <__exidx_end+0x1a59c11>
 8015791:	73692065 	cmnvc	r9, #101	; 0x65
 8015795:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8015799:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801579d:	 	tstmi	r0, r4, ror #20

080157a0 <E117Const::ACN_PACKET_IDENTIFIER>:
 80157a0:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 80157a4:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 80157a8:	00000037 	andeq	r0, r0, r7, lsr r0

080157ac <E131BridgeConst::VERSION>:
 80157ac:	30251801 	eorcc	r1, r5, r1, lsl #16
 80157b0:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 80157b4:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 80157b8:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 80157bc:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 80157c0:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 80157c4:	30252d78 	eorcc	r2, r5, r8, ror sp
 80157c8:	30257832 	eorcc	r7, r5, r2, lsr r8
 80157cc:	30257832 	eorcc	r7, r5, r2, lsr r8
 80157d0:	30257832 	eorcc	r7, r5, r2, lsr r8
 80157d4:	30257832 	eorcc	r7, r5, r2, lsr r8
 80157d8:	30257832 	eorcc	r7, r5, r2, lsr r8
 80157dc:	00007832 	andeq	r7, r0, r2, lsr r8

080157e0 <UID_ALL>:
 80157e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 80157e4:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

080157e8 <vtable for ArtNetRdmController>:
	...
 80157f0:	0800bda1 	stmdaeq	r0, {r0, r5, r7, r8, sl, fp, ip, sp, pc}
 80157f4:	0800bded 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 80157f8:	0800bdff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, sp, pc}
 80157fc:	0800bd75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, sl, fp, ip, sp, pc}
 8015800:	0800bd7f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r8, sl, fp, ip, sp, pc}
 8015804:	0800be09 	stmdaeq	r0, {r0, r3, r9, sl, fp, ip, sp, pc}

08015808 <UID_ALL>:
 8015808:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 801580c:	4452ffff 	ldrbmi	pc, [r2], #-4095	; 0xfffff001	; <UNPREDICTABLE>
 8015810:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 8015814:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8015818:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801581c:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8015820:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8015824:	000a6e6f 	andeq	r6, sl, pc, ror #28
 8015828:	6e614d20 	cdpvs	13, 6, cr4, cr1, cr0, {1}
 801582c:	63616675 	cmnvs	r1, #122683392	; 0x7500000
 8015830:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 8015834:	614e2072 	hvcvs	57858	; 0xe202
 8015838:	3a20656d 	bcc	882edf4 <__exidx_end+0x8178b4>
 801583c:	2a2e2520 	bcs	8b9ecc4 <__exidx_end+0xb87784>
 8015840:	20000a73 	andcs	r0, r0, r3, ror sl
 8015844:	756e614d 	strbvc	r6, [lr, #-333]!	; 0xfffffeb3
 8015848:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 801584c:	72657275 	rsbvc	r7, r5, #1342177287	; 0x50000007
 8015850:	20444920 	subcs	r4, r4, r0, lsr #18
 8015854:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8015858:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801585c:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8015860:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 8015864:	61697265 	cmnvs	r9, r5, ror #4
 8015868:	754e206c 	strbvc	r2, [lr, #-108]	; 0xffffff94
 801586c:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 8015870:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015874:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8015878:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 801587c:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8015880:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8015884:	0a58322e 	beq	9622144 <__exidx_end+0x160ac04>
 8015888:	6f522000 	svcvs	0x00522000
 801588c:	6c20746f 	cfstrsvs	mvf7, [r0], #-444	; 0xfffffe44
 8015890:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
 8015894:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015898:	20202020 	eorcs	r2, r0, r0, lsr #32
 801589c:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 80158a0:	000a732a 	andeq	r7, sl, sl, lsr #6
 80158a4:	6f725020 	svcvs	0x00725020
 80158a8:	74637564 	strbtvc	r7, [r3], #-1380	; 0xfffffa9c
 80158ac:	74614320 	strbtvc	r4, [r1], #-800	; 0xfffffce0
 80158b0:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
 80158b4:	3a202079 	bcc	881daa0 <__exidx_end+0x806560>
 80158b8:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 80158bc:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 80158c0:	20000a58 	andcs	r0, r0, r8, asr sl
 80158c4:	646f7250 	strbtvs	r7, [pc], #-592	; 80158cc <UID_ALL+0xc4>
 80158c8:	20746375 	rsbscs	r6, r4, r5, ror r3
 80158cc:	61746544 	cmnvs	r4, r4, asr #10
 80158d0:	20206c69 	eorcs	r6, r0, r9, ror #24
 80158d4:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80158d8:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 80158dc:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 80158e0:	 	strbmi	r0, [r7], #-10

080158e2 <DEVICE_LABEL>:
 80158e2:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 80158e6:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 80158ea:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 80158ee:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 80158f2:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	...

080158f7 <DEVICE_LABEL>:
 80158f7:	61676947 	cmnvs	r7, r7, asr #18
 80158fb:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 80158ff:	52206563 	eorpl	r6, r0, #415236096	; 0x18c00000
 8015903:	43204d44 			; <UNDEFINED> instruction: 0x43204d44
 8015907:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 801590b:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 801590f:	00000072 	andeq	r0, r0, r2, ror r0
	...

08015914 <UID_ALL>:
 8015914:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8015918:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

0801591a <RDMConst::MANUFACTURER_ID>:
 801591a:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

0801591c <RDMConst::MANUFACTURER_NAME>:
 801591c:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8015920:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 8015924:	6f2e7777 	svcvs	0x002e7777
 8015928:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 801592c:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 8015930:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 8015934:	0067726f 	rsbeq	r7, r7, pc, ror #4
 8015938:	20584d44 	subscs	r4, r8, r4, asr #26
 801593c:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
 8015940:	4220000a 	eormi	r0, r0, #10
 8015944:	6b616572 	blvs	986ef14 <__exidx_end+0x18579d4>
 8015948:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 801594c:	20202065 	eorcs	r2, r0, r5, rrx
 8015950:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015954:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 8015958:	74204241 	strtvc	r4, [r0], #-577	; 0xfffffdbf
 801595c:	20656d69 	rsbcs	r6, r5, r9, ror #26
 8015960:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015964:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015968:	5220000a 	eorpl	r0, r0, #10
 801596c:	65726665 	ldrbvs	r6, [r2, #-1637]!	; 0xfffff99b
 8015970:	72206873 	eorvc	r6, r0, #7536640	; 0x730000
 8015974:	20657461 	rsbcs	r7, r5, r1, ror #8
 8015978:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801597c:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 8015980:	73746f6c 	cmnvc	r4, #108, 30	; 0x1b0
 8015984:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015988:	20202020 	eorcs	r2, r0, r0, lsr #32
 801598c:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015990:	0000000a 	andeq	r0, r0, sl

08015994 <vtable for DmxSend>:
	...
 801599c:	0800c625 	stmdaeq	r0, {r0, r2, r5, r9, sl, lr, pc}
 80159a0:	0800c6f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, sl, lr, pc}
 80159a4:	0800c629 	stmdaeq	r0, {r0, r3, r5, r9, sl, lr, pc}
 80159a8:	0800c659 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, lr, pc}
 80159ac:	0800c68d 	stmdaeq	r0, {r0, r2, r3, r7, r9, sl, lr, pc}
 80159b0:	0800c623 	stmdaeq	r0, {r0, r1, r5, r9, sl, lr, pc}
 80159b4:	0800c69d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, lr, pc}
 80159b8:	080123a1 	stmdaeq	r1, {r0, r5, r7, r8, r9, sp}
 80159bc:	08012397 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, r9, sp}
 80159c0:	0801239b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, r9, sp}
 80159c4:	080123a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, sp}

080159c8 <DmxParamsConst::BREAK_TIME>:
 80159c8:	61657262 	cmnvs	r5, r2, ror #4
 80159cc:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 80159d0:	 	movwvc	r6, #1389	; 0x56d

080159d3 <DmxParamsConst::SLOTS_COUNT>:
 80159d3:	746f6c73 	strbtvc	r6, [pc], #-3187	; 80159db <DmxParamsConst::SLOTS_COUNT+0x8>
 80159d7:	6f635f73 	svcvs	0x00635f73
 80159db:	00746e75 	rsbseq	r6, r4, r5, ror lr

080159df <DmxParamsConst::REFRESH_RATE>:
 80159df:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 80159e3:	5f687365 	svcpl	0x00687365
 80159e7:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	...

080159ec <DmxParamsConst::MAB_TIME>:
 80159ec:	5f62616d 	svcpl	0x0062616d
 80159f0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	...

080159f5 <DmxParamsConst::FILE_NAME>:
 80159f5:	61726170 	cmnvs	r2, r0, ror r1
 80159f9:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 80159fd:	25007478 	strcs	r7, [r0, #-1144]	; 0xfffffb88
 8015a01:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015a05:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015a09:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 8015a0d:	73252c73 			; <UNDEFINED> instruction: 0x73252c73
 8015a11:	2c64252c 	cfstr64cs	mvdx2, [r4], #-176	; 0xffffff50
 8015a15:	000a7325 	andeq	r7, sl, r5, lsr #6
 8015a19:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015a1d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015a21:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 8015a25:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8015a29:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 8015a2d:	6e4f000a 	cdpvs	0, 4, cr0, cr15, cr10, {0}
 8015a31:	66664f00 	strbtvs	r4, [r6], -r0, lsl #30
 8015a35:	73696400 	cmnvc	r9, #0, 8
 8015a39:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015a3d:	0a73253a 	beq	9cdef2d <__exidx_end+0x1cc79ed>
 8015a41:	74667400 	strbtvc	r7, [r6], #-1024	; 0xfffffc00
 8015a45:	73253a70 			; <UNDEFINED> instruction: 0x73253a70
 8015a49:	6576000a 	ldrbvs	r0, [r6, #-10]!
 8015a4d:	6f697372 	svcvs	0x00697372
 8015a51:	73253a6e 			; <UNDEFINED> instruction: 0x73253a6e
 8015a55:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8015a59:	3a656d69 	bcc	9971005 <__exidx_end+0x1959ac5>
 8015a5d:	73752520 	cmnvc	r5, #32, 10	; 0x8000000
 8015a61:	5245000a 	subpl	r0, r5, #10
 8015a65:	23524f52 	cmpcs	r2, #328	; 0x148
 8015a69:	7465673f 	strbtvc	r6, [r5], #-1855	; 0xfffff8c1
 8015a6d:	6674000a 	ldrbtvs	r0, [r4], -sl
 8015a71:	00237074 	eoreq	r7, r3, r4, ror r0
 8015a75:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015a79:	2379616c 	cmncs	r9, #108, 2
 8015a7d:	52524500 	subspl	r4, r2, #0, 10
 8015a81:	2123524f 			; <UNDEFINED> instruction: 0x2123524f
 8015a85:	5245000a 	subpl	r0, r5, #10
 8015a89:	23524f52 	cmpcs	r2, #328	; 0x148
 8015a8d:	72000a3f 	andvc	r0, r0, #258048	; 0x3f000
 8015a91:	6f6f6265 	svcvs	0x006f6265
 8015a95:	00232374 	eoreq	r2, r3, r4, ror r3
 8015a99:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8015a9d:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 8015aa1:	2a237473 	bcs	88f2c75 <__exidx_end+0x8db735>
 8015aa5:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8015aa9:	23656d69 	cmncs	r5, #6720	; 0x1a40
 8015aad:	72657600 	rsbvc	r7, r5, #0, 12
 8015ab1:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8015ab5:	65670023 	strbvs	r0, [r7, #-35]!	; 0xffffffdd
 8015ab9:	66002374 			; <UNDEFINED> instruction: 0x66002374
 8015abd:	6f746361 	svcvs	0x00746361
 8015ac1:	23237972 			; <UNDEFINED> instruction: 0x23237972
	...

08015ac6 <s_Node>:
 8015ac6:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015aca:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8015ad6:	41730000 	cmnmi	r3, r0
 8015ada:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 8015ade:	31332e31 	teqcc	r3, r1, lsr lr
	...
 8015aea:	2043534f 	subcs	r5, r3, pc, asr #6
 8015aee:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8015af2:	00007265 	andeq	r7, r0, r5, ror #4
 8015af6:	00000000 	andeq	r0, r0, r0
 8015afa:	544c0000 	strbpl	r0, [ip], #-0
 8015afe:	00000043 	andeq	r0, r0, r3, asr #32
	...
 8015b0e:	2043534f 	subcs	r5, r3, pc, asr #6
 8015b12:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 8015b16:	0000746e 	andeq	r7, r0, lr, ror #8
 8015b1a:	00000000 	andeq	r0, r0, r0
 8015b1e:	44520000 	ldrbmi	r0, [r2], #-0
 8015b22:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 8015b26:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 8015b2a:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8015b2e:	0000796c 	andeq	r7, r0, ip, ror #18
 8015b32:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 8015b36:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8015b42:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 8015b46:	00004944 	andeq	r4, r0, r4, asr #18
	...
 8015b56:	00504444 	subseq	r4, r0, r4, asr #8
	...

08015b68 <s_Output>:
 8015b68:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 8015b74:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 8015b80:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 8015b84:	00726f74 	rsbseq	r6, r2, r4, ror pc
 8015b88:	00000000 	andeq	r0, r0, r0
 8015b8c:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8015b90:	0000006c 	andeq	r0, r0, ip, rrx
 8015b94:	00000000 	andeq	r0, r0, r0
 8015b98:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 8015b9c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 8015ba0:	00000000 	andeq	r0, r0, r0
 8015ba4:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 8015bb0:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8015bb4:	00006769 	andeq	r6, r0, r9, ror #14
 8015bb8:	00000000 	andeq	r0, r0, r0
 8015bbc:	70657453 	rsbvc	r7, r5, r3, asr r4
 8015bc0:	00726570 	rsbseq	r6, r2, r0, ror r5
 8015bc4:	00000000 	andeq	r0, r0, r0
 8015bc8:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 8015bcc:	00007265 	andeq	r7, r0, r5, ror #4
 8015bd0:	00000000 	andeq	r0, r0, r0
 8015bd4:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015bd8:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8015bdc:	00000000 	andeq	r0, r0, r0
 8015be0:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 8015be4:	00006c61 	andeq	r6, r0, r1, ror #24
 8015be8:	00000000 	andeq	r0, r0, r0
 8015bec:	20424752 	subcs	r4, r2, r2, asr r7
 8015bf0:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 8015bf4:	0000006c 	andeq	r0, r0, ip, rrx

08015bf8 <RemoteConfig::s_GET>:
 8015bf8:	0800df55 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, fp, ip, lr, pc}
 8015bfc:	00000000 	andeq	r0, r0, r0
 8015c00:	08015a90 	stmdaeq	r1, {r4, r7, r9, fp, ip, lr}
 8015c04:	00000008 	andeq	r0, r0, r8
 8015c08:	0800d40d 	stmdaeq	r0, {r0, r2, r3, sl, ip, lr, pc}
 8015c0c:	00000000 	andeq	r0, r0, r0
 8015c10:	08015a99 	stmdaeq	r1, {r0, r3, r4, r7, r9, fp, ip, lr}
 8015c14:	00000005 	andeq	r0, r0, r5
 8015c18:	0800d40d 	stmdaeq	r0, {r0, r2, r3, sl, ip, lr, pc}
 8015c1c:	00000000 	andeq	r0, r0, r0
 8015c20:	08015a9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r9, fp, ip, lr}
 8015c24:	00000006 	andeq	r0, r0, r6
 8015c28:	0800d611 	stmdaeq	r0, {r0, r4, r9, sl, ip, lr, pc}
 8015c2c:	00000000 	andeq	r0, r0, r0
 8015c30:	08015aa6 	stmdaeq	r1, {r1, r2, r5, r7, r9, fp, ip, lr}
 8015c34:	00000007 	andeq	r0, r0, r7
 8015c38:	0800d5cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, sl, ip, lr, pc}
 8015c3c:	00000000 	andeq	r0, r0, r0
 8015c40:	08015aae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r9, fp, ip, lr}
 8015c44:	00000008 	andeq	r0, r0, r8
 8015c48:	0800d4f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sl, ip, lr, pc}
 8015c4c:	00000000 	andeq	r0, r0, r0
 8015c50:	08015a75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, fp, ip, lr}
 8015c54:	00000008 	andeq	r0, r0, r8
 8015c58:	0800d891 	stmdaeq	r0, {r0, r4, r7, fp, ip, lr, pc}
 8015c5c:	00000000 	andeq	r0, r0, r0
 8015c60:	08015ab7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, fp, ip, lr}
 8015c64:	00010004 	andeq	r0, r1, r4
 8015c68:	0800d575 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, sl, ip, lr, pc}
 8015c6c:	00000000 	andeq	r0, r0, r0
 8015c70:	08015a6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r9, fp, ip, lr}
 8015c74:	00000005 	andeq	r0, r0, r5
 8015c78:	0800dc3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, sl, fp, ip, lr, pc}
 8015c7c:	00000000 	andeq	r0, r0, r0
 8015c80:	08015abc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, fp, ip, lr}
 8015c84:	00000009 	andeq	r0, r0, r9

08015c88 <RemoteConfig::s_SET>:
 8015c88:	0800d551 	stmdaeq	r0, {r0, r4, r6, r8, sl, ip, lr, pc}
 8015c8c:	00000000 	andeq	r0, r0, r0
 8015c90:	08015a6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r9, fp, ip, lr}
 8015c94:	00010005 	andeq	r0, r1, r5
 8015c98:	0800d665 	stmdaeq	r0, {r0, r2, r5, r6, r9, sl, ip, lr, pc}
 8015c9c:	00000000 	andeq	r0, r0, r0
 8015ca0:	08015a75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, fp, ip, lr}
 8015ca4:	00010008 	andeq	r0, r1, r8
 8015ca8:	6f626552 	svcvs	0x00626552
 8015cac:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 8015cb0:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 8015cb4:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 8015cb8:	6f6f6265 	svcvs	0x006f6265
 8015cbc:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8015cc0:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 8015cc4:	6f637200 	svcvs	0x00637200
 8015cc8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8015ccc:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015cd0:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 8015cd4:	6b726f77 	blvs	9cb1ab8 <__exidx_end+0x1c9a578>
 8015cd8:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015cdc:	73696400 	cmnvc	r9, #0, 8
 8015ce0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015ce4:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015ce8:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 8015cec:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8015cf0:	00747874 	rsbseq	r7, r4, r4, ror r8
 8015cf4:	61726170 	cmnvs	r2, r0, ror r1
 8015cf8:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8015cfc:	00007478 	andeq	r7, r0, r8, ror r4

08015d00 <RemoteConfig::s_TXT>:
 8015d00:	0800d899 	stmdaeq	r0, {r0, r3, r4, r7, fp, ip, lr, pc}
 8015d04:	00000000 	andeq	r0, r0, r0
 8015d08:	0800db61 	stmdaeq	r0, {r0, r5, r6, r8, r9, fp, ip, lr, pc}
 8015d0c:	00000000 	andeq	r0, r0, r0
 8015d10:	08015cc5 	stmdaeq	r1, {r0, r2, r6, r7, sl, fp, ip, lr}
 8015d14:	0000000b 	andeq	r0, r0, fp
 8015d18:	0000000c 	andeq	r0, r0, ip
 8015d1c:	0800d8c5 	stmdaeq	r0, {r0, r2, r6, r7, fp, ip, lr, pc}
 8015d20:	00000000 	andeq	r0, r0, r0
 8015d24:	0800db95 	stmdaeq	r0, {r0, r2, r4, r7, r8, r9, fp, ip, lr, pc}
 8015d28:	00000000 	andeq	r0, r0, r0
 8015d2c:	08015cd1 	stmdaeq	r1, {r0, r4, r6, r7, sl, fp, ip, lr}
 8015d30:	0000000b 	andeq	r0, r0, fp
 8015d34:	00000000 	andeq	r0, r0, r0
 8015d38:	0800d949 	stmdaeq	r0, {r0, r3, r6, r8, fp, ip, lr, pc}
 8015d3c:	00000000 	andeq	r0, r0, r0
 8015d40:	0800dc11 	stmdaeq	r0, {r0, r4, sl, fp, ip, lr, pc}
 8015d44:	00000000 	andeq	r0, r0, r0
 8015d48:	08015cdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, fp, ip, lr}
 8015d4c:	0000000b 	andeq	r0, r0, fp
 8015d50:	0000000f 	andeq	r0, r0, pc
 8015d54:	0800d8f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, fp, ip, lr, pc}
 8015d58:	00000000 	andeq	r0, r0, r0
 8015d5c:	0800dbbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, fp, ip, lr, pc}
 8015d60:	00000000 	andeq	r0, r0, r0
 8015d64:	08015ce9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl, fp, ip, lr}
 8015d68:	0000000a 	andeq	r0, r0, sl
 8015d6c:	00000001 	andeq	r0, r0, r1
 8015d70:	0800d91d 	stmdaeq	r0, {r0, r2, r3, r4, r8, fp, ip, lr, pc}
 8015d74:	00000000 	andeq	r0, r0, r0
 8015d78:	0800dbe9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, fp, ip, lr, pc}
 8015d7c:	00000000 	andeq	r0, r0, r0
 8015d80:	08015cf4 	stmdaeq	r1, {r2, r4, r5, r6, r7, sl, fp, ip, lr}
 8015d84:	0000000a 	andeq	r0, r0, sl
 8015d88:	00000002 	andeq	r0, r0, r2
 8015d8c:	00544547 	subseq	r4, r4, r7, asr #10
 8015d90:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 8015d94:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 8015d98:	0a200050 	beq	8815ee0 <__exidx_end+0x7fe9a0>
 8015d9c:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 8015da0:	43003a00 	movwmi	r3, #2560	; 0xa00
 8015da4:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8015da8:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 8015dac:	00657079 	rsbeq	r7, r5, r9, ror r0
 8015db0:	61003b20 	tstvs	r0, r0, lsr #22
 8015db4:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 8015db8:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 8015dbc:	6a2f6e6f 	bvs	8bf1780 <__exidx_end+0xbda240>
 8015dc0:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 8015dc4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8015dc8:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8015dcc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8015dd0:	2f006874 	svccs	0x00006874
 8015dd4:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015dd8:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8015ddc:	2f006c6d 	svccs	0x00006c6d
 8015de0:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8015de4:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8015de8:	2f007373 	svccs	0x00007373
 8015dec:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015df0:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 8015df4:	736a2f00 	cmnvc	sl, #0, 30
 8015df8:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8015dfc:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8015e00:	72657600 	rsbvc	r7, r5, #0, 12
 8015e04:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8015e08:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8015e0c:	00656d69 	rsbeq	r6, r5, r9, ror #26
 8015e10:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015e14:	0079616c 	rsbseq	r6, r9, ip, ror #2
 8015e18:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015e1c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8015e20:	6a2f0079 	bvs	8bd600c <__exidx_end+0xbbeacc>
 8015e24:	2f6e6f73 	svccs	0x006e6f73
 8015e28:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8015e2c:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 8015e30:	6f6f6265 	svcvs	0x006f6265
 8015e34:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 8015e38:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 8015e3c:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 8015e40:	434f4421 	movtmi	r4, #62497	; 0xf421
 8015e44:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8015e48:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8015e4c:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8015e50:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015e54:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8015e58:	3e646165 	powccsz	f6, f4, f5
 8015e5c:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015e60:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 8015e64:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 8015e68:	742f3c74 	strtvc	r3, [pc], #-3188	; 8015e70 <RemoteConfig::s_TXT+0x170>
 8015e6c:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8015e70:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015e74:	3e646165 	powccsz	f6, f4, f5
 8015e78:	6f623c0a 	svcvs	0x00623c0a
 8015e7c:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 8015e80:	4f3e3168 	svcmi	0x003e3168
 8015e84:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015e88:	2f3c3e31 	svccs	0x003c3e31
 8015e8c:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8015e90:	2f3c0a3e 	svccs	0x003c0a3e
 8015e94:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015e98:	52000a3e 	andpl	r0, r0, #253952	; 0x3e000
 8015e9c:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 8015ea0:	45207473 	strmi	r7, [r0, #-1139]!	; 0xfffffb8d
 8015ea4:	7469746e 	strbtvc	r7, [r9], #-1134	; 0xfffffb92
 8015ea8:	6f542079 	svcvs	0x00542079
 8015eac:	614c206f 	cmpvs	ip, pc, rrx
 8015eb0:	00656772 	rsbeq	r6, r5, r2, ror r7
 8015eb4:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8015eb8:	6e756f46 	cdpvs	15, 7, cr6, cr5, cr6, {2}
 8015ebc:	65520064 	ldrbvs	r0, [r2, #-100]	; 0xffffff9c
 8015ec0:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 8015ec4:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 8015ec8:	6f542049 	svcvs	0x00542049
 8015ecc:	6f4c206f 	svcvs	0x004c206f
 8015ed0:	5600676e 	strpl	r6, [r0], -lr, ror #14
 8015ed4:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8015ed8:	4e206e6f 	cdpmi	14, 2, cr6, cr0, cr15, {3}
 8015edc:	5320746f 			; <UNDEFINED> instruction: 0x5320746f
 8015ee0:	6f707075 	svcvs	0x00707075
 8015ee4:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
 8015ee8:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 8015eec:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8015ef0:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8015ef4:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 8015ef8:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8015efc:	00646574 	rsbeq	r6, r4, r4, ror r5
 8015f00:	20646142 	rsbcs	r6, r4, r2, asr #2
 8015f04:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
 8015f08:	00747365 	rsbseq	r7, r4, r5, ror #6
 8015f0c:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 8015f10:	206e776f 	rsbcs	r7, lr, pc, ror #14
 8015f14:	6f727245 	svcvs	0x00727245
 8015f18:	6e490072 	mcrvs	0, 2, r0, cr9, cr2, {3}
 8015f1c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 8015f20:	53206c61 			; <UNDEFINED> instruction: 0x53206c61
 8015f24:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 8015f28:	72452072 	subvc	r2, r5, #114	; 0x72
 8015f2c:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8015f30:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 8015f34:	434f4421 	movtmi	r4, #62497	; 0xf421
 8015f38:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8015f3c:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8015f40:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8015f44:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015f48:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8015f4c:	3e646165 	powccsz	f6, f4, f5
 8015f50:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015f54:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 8015f58:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8015f5c:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8015f60:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 8015f64:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8015f68:	0a3e6461 	beq	8faf0f4 <__exidx_end+0xf97bb4>
 8015f6c:	646f623c 	strbtvs	r6, [pc], #-572	; 8015f74 <RemoteConfig::s_TXT+0x274>
 8015f70:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8015f74:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 8015f78:	31682f3c 	cmncc	r8, ip, lsr pc
 8015f7c:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 8015f80:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8015f84:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015f88:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8015f8c:	5448000a 	strbpl	r0, [r8], #-10
 8015f90:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 8015f94:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 8015f98:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8015f9c:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 8015fa0:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 8015fa4:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8015fa8:	6f430a0d 	svcvs	0x00430a0d
 8015fac:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8015fb0:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 8015fb4:	203a6570 	eorscs	r6, sl, r0, ror r5
 8015fb8:	0a0d7325 	beq	8372c54 <__exidx_end+0x35b714>
 8015fbc:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8015fc0:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8015fc4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8015fc8:	203a6874 	eorscs	r6, sl, r4, ror r8
 8015fcc:	0a0d7525 	beq	8373468 <__exidx_end+0x35bf28>
 8015fd0:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 8015fd4:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8015fd8:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8015fdc:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 8015fe0:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 8015fe4:	 	ldrbvs	r0, [r4, #-10]!

08015fe6 <contentType>:
 8015fe6:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8015fea:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8015fee:	0000006c 	andeq	r0, r0, ip, rrx
	...
 8016006:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801600a:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 8016026:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 801602a:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 801602e:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8016032:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 8016046:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 801604a:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 801604e:	2f6e6f69 	svccs	0x006e6f69
 8016052:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

08016066 <RemoteConfigConst::PARAMS_DISABLE>:
 8016066:	61736964 	cmnvs	r3, r4, ror #18
 801606a:	00656c62 	rsbeq	r6, r5, r2, ror #24

0801606e <RemoteConfigConst::PARAMS_FILE_NAME>:
 801606e:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8016072:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8016076:	00747874 	rsbseq	r7, r4, r4, ror r8

0801607a <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 801607a:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801607e:	5f79616c 	svcpl	0x0079616c
 8016082:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08016087 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 8016087:	61736964 	cmnvs	r3, r4, ror #18
 801608b:	5f656c62 	svcpl	0x00656c62
 801608f:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 8016093:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08016095 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 8016095:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016099:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 801609d:	6f6f6265 	svcvs	0x006f6265
 80160a1:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

080160a3 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 80160a3:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80160a7:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 8015b43 <s_Node+0x7d>
 80160ab:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 80160af:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

080160b1 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 80160b1:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80160b5:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 80160b9:	6f746361 	svcvs	0x00746361
 80160bd:	7b007972 	blvc	803468d <__exidx_end+0x1d14d>
 80160c1:	73696c22 	cmnvc	r9, #8704	; 0x2200
 80160c5:	7b3a2274 	blvc	8e9ea9d <__exidx_end+0xe8755d>
 80160c9:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 80160cd:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 80160d1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80160d5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80160d9:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 80160dd:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 80160e1:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80160e5:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 80160e9:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 80160ed:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 80160f1:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 80160f5:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80160f9:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 80160fd:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8016101:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8016105:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8016109:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801610d:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8016111:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8016115:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8016119:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 801611d:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8016121:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016125:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8016129:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 801612d:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8016131:	616f6222 	cmnvs	pc, r2, lsr #4
 8016135:	3a226472 	bcc	88af305 <__exidx_end+0x897dc5>
 8016139:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801613d:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8016141:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 8016145:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 8016149:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 801614d:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8016151:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8016155:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 8016159:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 801615d:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 8016161:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8016165:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 8016169:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 801616d:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 8016171:	7b000a7d 	blvc	8018b6d <__exidx_end+0x162d>
 8016175:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 8016179:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801617d:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 8016181:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8016185:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8016189:	7b3a2273 	blvc	8e9eb5d <__exidx_end+0xe8761d>
 801618d:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 8016191:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8016195:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016199:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 801619d:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 80161a1:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 80161a5:	61726170 	cmnvs	r2, r0, ror r1
 80161a9:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 80161ad:	3a227478 	bcc	88b3395 <__exidx_end+0x89be55>
 80161b1:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 80161b5:	61725420 	cmnvs	r2, r0, lsr #8
 80161b9:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 80161bd:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 80161c1:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80161c5:	2e79616c 	rpwcsez	f6, f1, #4.0
 80161c9:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 80161cd:	6944223a 	stmdbvs	r4, {r1, r3, r4, r5, r9, sp}^
 80161d1:	616c7073 	smcvs	50947	; 0xc703
 80161d5:	44552079 	ldrbmi	r2, [r5], #-121	; 0xffffff87
 80161d9:	222c2246 	eorcs	r2, ip, #1610612740	; 0x60000004
 80161dd:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 80161e1:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 80161e5:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 80161e9:	654e223a 	strbvs	r2, [lr, #-570]	; 0xfffffdc6
 80161ed:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 80161f1:	222c226b 	eorcs	r2, ip, #-1342177274	; 0xb0000006
 80161f5:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 80161f9:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 80161fd:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016201:	6552223a 	ldrbvs	r2, [r2, #-570]	; 0xfffffdc6
 8016205:	65746f6d 	ldrbvs	r6, [r4, #-3949]!	; 0xfffff093
 8016209:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801620d:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8016211:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8016215:	7d226e6f 	stcvc	14, cr6, [r2, #-444]!	; 0xfffffe44
 8016219:	7273007d 	rsbsvc	r0, r3, #125	; 0x7d
 801621d:	74682f63 	strbtvc	r2, [r8], #-3939	; 0xfffff09d
 8016221:	2f647074 	svccs	0x00647074
 8016225:	5f746567 	svcpl	0x00746567
 8016229:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801622d:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 8016231:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
 8016235:	7070632e 	rsbsvc	r6, r0, lr, lsr #6
 8016239:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 801623d:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
 8016241:	6f635f65 	svcvs	0x00635f65
 8016245:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8016249:	73250074 			; <UNDEFINED> instruction: 0x73250074
 801624d:	25202928 	strcs	r2, [r0, #-2344]!	; 0xfffff6d8
 8016251:	6c202c73 	stcvs	12, cr2, [r0], #-460	; 0xfffffe34
 8016255:	20656e69 	rsbcs	r6, r5, r9, ror #28
 8016259:	203a6925 	eorscs	r6, sl, r5, lsr #18
 801625d:	2d207325 	stccs	3, cr7, [r0, #-148]!	; 0xffffff6c
 8016261:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 8016265:	2d3c000a 	ldccs	0, cr0, [ip, #-40]!	; 0xffffffd8
 8016269:	7325202d 			; <UNDEFINED> instruction: 0x7325202d
 801626d:	3a73253a 	bcc	9cdf75d <__exidx_end+0x1cc821d>
 8016271:	000a6425 	andeq	r6, sl, r5, lsr #8

08016275 <index_html>:
 8016275:	4f44213c 	svcmi	0x0044213c
 8016279:	50595443 	subspl	r5, r9, r3, asr #8
 801627d:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 8016281:	0a3e6c6d 	beq	8fb143d <__exidx_end+0xf99efd>
 8016285:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 8016289:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801628d:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 8016291:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 8016295:	6b6e696c 	blvs	9bb084d <__exidx_end+0x1b9930d>
 8016299:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 801629d:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 80162a1:	73656c79 	cmnvc	r5, #30976	; 0x7900
 80162a5:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 80162a9:	72682022 	rsbvc	r2, r8, #34	; 0x22
 80162ad:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 80162b1:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 80162b5:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 80162b9:	20227373 	eorcs	r7, r2, r3, ror r3
 80162bd:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 80162c1:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 80162c5:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 80162c9:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 80162cd:	0a3e656c 	beq	8faf885 <__exidx_end+0xf98345>
 80162d1:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 80162d5:	0a3e6461 	beq	8faf461 <__exidx_end+0xf97f21>
 80162d9:	646f623c 	strbtvs	r6, [pc], #-572	; 80162e1 <index_html+0x6c>
 80162dd:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 80162e1:	6165683c 	cmnvs	r5, ip, lsr r8
 80162e5:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 80162e9:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 80162ed:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 80162f1:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 80162f5:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 80162f9:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 80162fd:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8016301:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8016305:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8016309:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 801630d:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8016311:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 8016315:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8016319:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 801631d:	6f746365 	svcvs	0x00746365
 8016321:	20227972 	eorcs	r7, r2, r2, ror r9
 8016325:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8016329:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 801632d:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8016331:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016335:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8016339:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 801633d:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8016341:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 8016345:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 8016349:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 801634d:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 8016351:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 8016355:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016359:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 801635d:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 8016361:	20227478 	eorcs	r7, r2, r8, ror r4
 8016365:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8016369:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 801636d:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 8016371:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 8016375:	0a3e656c 	beq	8faf92d <__exidx_end+0xf983ed>
 8016379:	6f663c09 	svcvs	0x00663c09
 801637d:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 8016381:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 8016385:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8016389:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 801638d:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016391:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 8016395:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8016399:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 801639d:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 80163a1:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 80163a5:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 80163a9:	20747069 	rsbscs	r7, r4, r9, rrx
 80163ad:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 80163b1:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 80163b5:	6a2e7865 	bvs	8bb4551 <__exidx_end+0xb9d011>
 80163b9:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 80163bd:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 80163c1:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 80163c5:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 80163c9:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 80163cd:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80163d1:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 80163d5:	 	svcvs	0x0062000a

080163d7 <styles_css>:
 80163d7:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80163db:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80163df:	63616220 	cmnvs	r1, #32, 4
 80163e3:	6f72676b 	svcvs	0x0072676b
 80163e7:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 80163eb:	6f6c6f63 	svcvs	0x006c6f63
 80163ef:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 80163f3:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 80163f7:	30322c30 	eorscc	r2, r2, r0, lsr ip
 80163fb:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 80163ff:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8016403:	6f6c6f63 	svcvs	0x006c6f63
 8016407:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801640b:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801640f:	202c3535 	eorcs	r3, ip, r5, lsr r5
 8016413:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 8016417:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 801641b:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 801641f:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 8016423:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8016427:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801642b:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801642f:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8016433:	0a3b7865 	beq	8ef45cf <__exidx_end+0xedd08f>
 8016437:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 801643b:	0a7b2069 	beq	9ede5e7 <__exidx_end+0x1ec70a7>
 801643f:	696c2020 	stmdbvs	ip!, {r5, sp}^
 8016443:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 8016447:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 801644b:	6f6e203a 	svcvs	0x006e203a
 801644f:	0a3b656e 	beq	8eefa0f <__exidx_end+0xed84cf>
 8016453:	616d2020 	cmnvs	sp, r0, lsr #32
 8016457:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 801645b:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 801645f:	70352078 	eorsvc	r2, r5, r8, ror r0
 8016463:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 8016467:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 801646b:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 801646f:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8016473:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016477:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801647b:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 801647f:	0a3b7865 	beq	8ef461b <__exidx_end+0xedd0db>
 8016483:	6f622020 	svcvs	0x00622020
 8016487:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 801648b:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801648f:	3a737569 	bcc	9cf3a3b <__exidx_end+0x1cdc4fb>
 8016493:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8016497:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801649b:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801649f:	203a7265 	eorscs	r7, sl, r5, ror #4
 80164a3:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80164a7:	72672064 	rsbvc	r2, r7, #100	; 0x64
 80164ab:	31207965 			; <UNDEFINED> instruction: 0x31207965
 80164af:	0a3b7870 	beq	8ef4677 <__exidx_end+0xedd137>
 80164b3:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 80164b7:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 80164bb:	0a7b2072 	beq	9ede68b <__exidx_end+0x1ec714b>
 80164bf:	69642020 	stmdbvs	r4!, {r5, sp}^
 80164c3:	616c7073 	smcvs	50947	; 0xc703
 80164c7:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 80164cb:	3b78656c 	blcc	9e2fa83 <__exidx_end+0x1e18543>
 80164cf:	6a20200a 	bvs	881e4ff <__exidx_end+0x806fbf>
 80164d3:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 80164d7:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 80164db:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 80164df:	203a746e 	eorscs	r7, sl, lr, ror #8
 80164e3:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 80164e7:	0a3b7265 	beq	8ef2e83 <__exidx_end+0xedb943>
 80164eb:	6f622020 	svcvs	0x00622020
 80164ef:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 80164f3:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 80164f7:	3a737569 	bcc	9cf3aa3 <__exidx_end+0x1cdc563>
 80164fb:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 80164ff:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8016503:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8016507:	203a7265 	eorscs	r7, sl, r5, ror #4
 801650b:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801650f:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8016513:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8016517:	0a3b7870 	beq	8ef46df <__exidx_end+0xedd19f>
 801651b:	00000a7d 	andeq	r0, r0, sp, ror sl
	...

08016520 <HttpContent>:
 8016520:	08015de0 	stmdaeq	r1, {r5, r6, r7, r8, sl, fp, ip, lr}
 8016524:	080163d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, r9, sp, lr}
 8016528:	08015dec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, sl, fp, ip, lr}
 801652c:	08016538 	stmdaeq	r1, {r3, r4, r5, r8, sl, sp, lr}
 8016530:	08015dd4 	stmdaeq	r1, {r2, r4, r6, r7, r8, sl, fp, ip, lr}
 8016534:	08016275 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, sp, lr}

08016538 <index_js>:
 8016538:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801653c:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8016540:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8016544:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8016548:	534a7465 	movtpl	r7, #42085	; 0xa465
 801654c:	6a284e4f 	bvs	8a29e90 <__exidx_end+0xa12950>
 8016550:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016554:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8016558:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 801655c:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 8016560:	6a2f273d 	bvs	8be025c <__exidx_end+0xbc8d1c>
 8016564:	2f6e6f73 	svccs	0x006e6f73
 8016568:	202b2027 	eorcs	r2, fp, r7, lsr #32
 801656c:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8016570:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8016574:	20797274 	rsbscs	r7, r9, r4, ror r2
 8016578:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 801657c:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 8016580:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 8016584:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 8016588:	20746961 	rsbscs	r6, r4, r1, ror #18
 801658c:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 8016590:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 8016594:	0a3b296c 	beq	8ee0b4c <__exidx_end+0xec960c>
 8016598:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 801659c:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 80165a0:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 80165a4:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 80165a8:	73657220 	cmnvc	r5, #32, 4
 80165ac:	6f736a2e 	svcvs	0x00736a2e
 80165b0:	3b29286e 	blcc	8a60770 <__exidx_end+0xa49230>
 80165b4:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 80165b8:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 80165bc:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 80165c0:	6f727265 	svcvs	0x00727265
 80165c4:	7b202972 	blvc	8820b94 <__exidx_end+0x809654>
 80165c8:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80165cc:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 80165d0:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 80165d4:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 80165d8:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 80165dc:	3b29726f 	blcc	8a72fa0 <__exidx_end+0xa5ba60>
 80165e0:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 80165e4:	0a0a7d0a 	beq	82b5a14 <__exidx_end+0x29e4d4>
 80165e8:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80165ec:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80165f0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80165f4:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 80165f8:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 80165fc:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8016600:	20292874 	eorcs	r2, r9, r4, ror r8
 8016604:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8016608:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801660c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016610:	6177613d 	cmnvs	r7, sp, lsr r1
 8016614:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8016618:	534a7465 	movtpl	r7, #42085	; 0xa465
 801661c:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016620:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016624:	0a3b2927 	beq	8ee0ac8 <__exidx_end+0xec9588>
 8016628:	6f640909 	svcvs	0x00640909
 801662c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8016630:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8016634:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8016638:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 801663c:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8016640:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8016644:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 8016648:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 801664c:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8016650:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8016654:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 8016658:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 801665c:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 8016660:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 8016664:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 8016668:	2b656d61 	blcs	9971bf4 <__exidx_end+0x195a6b4>
 801666c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80165ec <index_js+0xb4>
 8016670:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8016674:	2b223e69 	blcs	88a6020 <__exidx_end+0x88eae0>
 8016678:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801667c:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8016680:	6f6e2e74 	svcvs	0x006e2e74
 8016684:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 8016688:	2b657079 	blcs	9972874 <__exidx_end+0x195b334>
 801668c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801660c <index_js+0xd4>
 8016690:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8016694:	2b223e69 	blcs	88a6040 <__exidx_end+0x88eb00>
 8016698:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801669c:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 80166a0:	6f6e2e74 	svcvs	0x006e2e74
 80166a4:	702e6564 	eorvc	r6, lr, r4, ror #10
 80166a8:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 80166ac:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 80166b0:	2f3c222b 	svccs	0x003c222b
 80166b4:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 80166b8:	0a7d0a3b 	beq	9f58fac <__exidx_end+0x1f41a6c>
 80166bc:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 80166c0:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 80166c4:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 80166c8:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 80166cc:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 80166d0:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80166d4:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 80166d8:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 80166dc:	0a7b2029 	beq	9ede788 <__exidx_end+0x1ec7248>
 80166e0:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 80166e4:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 80166e8:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 80166ec:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80166f0:	6177613d 	cmnvs	r7, sp, lsr r1
 80166f4:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80166f8:	534a7465 	movtpl	r7, #42085	; 0xa465
 80166fc:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016700:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016704:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8016708:	3b292779 	blcc	8a604f4 <__exidx_end+0xa48fb4>
 801670c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8016710:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8016714:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016718:	0a22223d 	beq	889f014 <__exidx_end+0x887ad4>
 801671c:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8016720:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8016724:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 8016728:	73656d61 	cmnvc	r5, #6208	; 0x1840
 801672c:	6a624f3d 	bvs	98aa428 <__exidx_end+0x1892ee8>
 8016730:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8016734:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 8016738:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 801673c:	6f746365 	svcvs	0x00746365
 8016740:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 8016744:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8016748:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 801674c:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8016750:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 8016754:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 8016758:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 801675c:	6145726f 	cmpvs	r5, pc, ror #4
 8016760:	66286863 	strtvs	r6, [r8], -r3, ror #16
 8016764:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8016768:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 801676c:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 8016770:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8016774:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8016778:	20726176 	rsbscs	r6, r2, r6, ror r1
 801677c:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8016780:	203d2065 	eorscs	r2, sp, r5, rrx
 8016784:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016788:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801678c:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 8016790:	73656c69 	cmnvc	r5, #26880	; 0x6900
 8016794:	6b5b5d22 	blvs	96edc24 <__exidx_end+0x16d66e4>
 8016798:	3b5d7965 	blcc	9774d34 <__exidx_end+0x175d7f4>
 801679c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80167a0:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 80167a4:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 80167a8:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 80167ac:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80167b0:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 80167b4:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 80167b8:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 80167bc:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 80167c0:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80167c4:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80167c8:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 80167cc:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80167d0:	0a3b223e 	beq	8edf0d0 <__exidx_end+0xec7b90>
 80167d4:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 80167d8:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80167dc:	6f640909 	svcvs	0x00640909
 80167e0:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 80167e4:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 80167e8:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 80167ec:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80167f0:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 80167f4:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 80167f8:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 80167fc:	6f746365 	svcvs	0x00746365
 8016800:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 8016804:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 8016808:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 801680c:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8016810:	3b6c6d74 	blcc	9b31de8 <__exidx_end+0x1b1a8a8>
 8016814:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8016818:	5f746567 	svcpl	0x00746567
 801681c:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8016820:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8016824:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016828:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 801682c:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8016830:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 8016834:	20636e79 	rsbcs	r6, r3, r9, ror lr
 8016838:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 801683c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8016840:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 8016844:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 8016848:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801684c:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 8016850:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8016854:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8016858:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 801685c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8016860:	6177613d 	cmnvs	r7, sp, lsr r1
 8016864:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8016868:	534a7465 	movtpl	r7, #42085	; 0xa465
 801686c:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016870:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016874:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 8016878:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801687c:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 8016880:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 8016884:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 8016888:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 801688c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 8016890:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 8016894:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 8016898:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 801689c:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 80168a0:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 80168a4:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 80168a8:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 80168ac:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 80168b0:	2b22563e 	blcs	88ac1b0 <__exidx_end+0x894c70>
 80168b4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80168b8:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 80168bc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80168c0:	2b6e6f69 	blcs	9bb266c <__exidx_end+0x1b9b12c>
 80168c4:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8016844 <index_js+0x30c>
 80168c8:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80168cc:	2b223e69 	blcs	88a6278 <__exidx_end+0x88ed38>
 80168d0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80168d4:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 80168d8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 80168dc:	61642e64 	cmnvs	r4, r4, ror #28
 80168e0:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 80168e4:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 80168e8:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 80168ec:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 80168f0:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80168f4:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 80168f8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 80168fc:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8016900:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 8016904:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 8016908:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 801690c:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8016910:	6f697372 	svcvs	0x00697372
 8016914:	6f622e6e 	svcvs	0x00622e6e
 8016918:	2b647261 	blcs	99332a4 <__exidx_end+0x191bd64>
 801691c:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801689c <index_js+0x364>
 8016920:	3b223e69 	blcc	88a62cc <__exidx_end+0x88ed8c>
 8016924:	0a0a7d0a 	beq	82b5d54 <__exidx_end+0x29e814>
 8016928:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 801692c:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8016930:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8016934:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8016938:	745f7465 	ldrbvc	r7, [pc], #-1125	; 8016940 <index_js+0x408>
 801693c:	73287478 			; <UNDEFINED> instruction: 0x73287478
 8016940:	20296c65 	eorcs	r6, r9, r5, ror #24
 8016944:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 8016948:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 801694c:	613d7478 	teqvs	sp, r8, ror r4
 8016950:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8016954:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 8016958:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 801695c:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 8016960:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8016964:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8016968:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801696c:	3b22223d 	blcc	889f268 <__exidx_end+0x887d28>
 8016970:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 8016974:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 8016978:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 801697c:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 8016980:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8016984:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 8016988:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 801698c:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 8016990:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8016994:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8016998:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 801699c:	0a7b2029 	beq	9edea48 <__exidx_end+0x1ec7508>
 80169a0:	61760909 	cmnvs	r6, r9, lsl #18
 80169a4:	61762072 	cmnvs	r6, r2, ror r0
 80169a8:	2065756c 	rsbcs	r7, r5, ip, ror #10
 80169ac:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 80169b0:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 80169b4:	6b5b5d6c 	blvs	96edf6c <__exidx_end+0x16d6a2c>
 80169b8:	3b5d7965 	blcc	9774f54 <__exidx_end+0x175da14>
 80169bc:	2009090a 	andcs	r0, r9, sl, lsl #18
 80169c0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80169c4:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 80169c8:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 80169cc:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80169d0:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 80169d4:	2f3c222b 	svccs	0x003c222b
 80169d8:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 80169dc:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80169e0:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80169e4:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80169e8:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 80169ec:	742f3c3e 	strtvc	r3, [pc], #-3134	; 80169f4 <index_js+0x4bc>
 80169f0:	3b223e72 	blcc	88a63c0 <__exidx_end+0x88ee80>
 80169f4:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 80169f8:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 80169fc:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8016a00:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8016a04:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 8016a08:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 8016a0c:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8016a10:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 8016a14:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 8016a18:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8016a1c:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8016a20:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8016a24:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 8016a28:	0a3b6c6d 	beq	8ef1be4 <__exidx_end+0xeda6a4>
 8016a2c:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8016a30:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8016a34:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8016a38:	3b292874 	blcc	8a60c10 <__exidx_end+0xa496d0>
 8016a3c:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8016a40:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 8016a44:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8016a48:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016a4c:	0a3b2928 	beq	8ee0ef4 <__exidx_end+0xec99b4>
 8016a50:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8016a54:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 8016a58:	6f697372 	svcvs	0x00697372
 8016a5c:	3b29286e 	blcc	8a60c1c <__exidx_end+0xa496dc>
 8016a60:	0000000a 	andeq	r0, r0, sl

08016a64 <s_aStorSize>:
 8016a64:	00000060 	andeq	r0, r0, r0, rrx
 8016a68:	00000090 	muleq	r0, r0, r0
 8016a6c:	00000020 	andeq	r0, r0, r0, lsr #32
 8016a70:	00000040 	andeq	r0, r0, r0, asr #32
 8016a74:	00000060 	andeq	r0, r0, r0, rrx
 8016a78:	00000040 	andeq	r0, r0, r0, asr #32
 8016a7c:	00000020 	andeq	r0, r0, r0, lsr #32
 8016a80:	00000020 	andeq	r0, r0, r0, lsr #32
 8016a84:	000001e0 	andeq	r0, r0, r0, ror #3
 8016a88:	00000040 	andeq	r0, r0, r0, asr #32
 8016a8c:	00000020 	andeq	r0, r0, r0, lsr #32
 8016a90:	00000060 	andeq	r0, r0, r0, rrx
 8016a94:	00000030 	andeq	r0, r0, r0, lsr r0
 8016a98:	00000020 	andeq	r0, r0, r0, lsr #32
 8016a9c:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 8016aa0:	00000030 	andeq	r0, r0, r0, lsr r0
 8016aa4:	00000040 	andeq	r0, r0, r0, asr #32
 8016aa8:	00000020 	andeq	r0, r0, r0, lsr #32
 8016aac:	00000060 	andeq	r0, r0, r0, rrx
 8016ab0:	00000020 	andeq	r0, r0, r0, lsr #32
 8016ab4:	00000400 	andeq	r0, r0, r0, lsl #8
 8016ab8:	00000020 	andeq	r0, r0, r0, lsr #32
 8016abc:	00000020 	andeq	r0, r0, r0, lsr #32
 8016ac0:	00000040 	andeq	r0, r0, r0, asr #32
 8016ac4:	00000060 	andeq	r0, r0, r0, rrx
 8016ac8:	00000020 	andeq	r0, r0, r0, lsr #32
 8016acc:	00000020 	andeq	r0, r0, r0, lsr #32
 8016ad0:	00000020 	andeq	r0, r0, r0, lsr #32

08016ad4 <vtable for StoreArtNet>:
	...
 8016adc:	0800ec3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, sl, fp, sp, lr, pc}
 8016ae0:	0800ee05 	stmdaeq	r0, {r0, r2, r9, sl, fp, sp, lr, pc}
 8016ae4:	0800ec45 	stmdaeq	r0, {r0, r2, r6, sl, fp, sp, lr, pc}
 8016ae8:	0800ee19 	stmdaeq	r0, {r0, r3, r4, r9, sl, fp, sp, lr, pc}
 8016aec:	0800ec69 	stmdaeq	r0, {r0, r3, r5, r6, sl, fp, sp, lr, pc}
 8016af0:	0800ec99 	stmdaeq	r0, {r0, r3, r4, r7, sl, fp, sp, lr, pc}
 8016af4:	0800ecc5 	stmdaeq	r0, {r0, r2, r6, r7, sl, fp, sp, lr, pc}
 8016af8:	0800ed01 	stmdaeq	r0, {r0, r8, sl, fp, sp, lr, pc}
 8016afc:	0800ed31 	stmdaeq	r0, {r0, r4, r5, r8, sl, fp, sp, lr, pc}
 8016b00:	0800ed65 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl, fp, sp, lr, pc}
 8016b04:	0800edb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, fp, sp, lr, pc}
 8016b08:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8016b0c:	00000000 	andeq	r0, r0, r0
 8016b10:	0800ec3f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, sl, fp, sp, lr, pc}
 8016b14:	0800ee11 	stmdaeq	r0, {r0, r4, r9, sl, fp, sp, lr, pc}
 8016b18:	0800ec91 	stmdaeq	r0, {r0, r4, r7, sl, fp, sp, lr, pc}
 8016b1c:	0800ecbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, fp, sp, lr, pc}
 8016b20:	0800ecf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl, fp, sp, lr, pc}
 8016b24:	0800ed29 	stmdaeq	r0, {r0, r3, r5, r8, sl, fp, sp, lr, pc}
 8016b28:	0800ed5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, sl, fp, sp, lr, pc}
 8016b2c:	0800edad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, sl, fp, sp, lr, pc}
 8016b30:	0800edfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, sp, lr, pc}

08016b34 <vtable for StoreDisplayUdf>:
	...
 8016b3c:	0800ee55 	stmdaeq	r0, {r0, r2, r4, r6, r9, sl, fp, sp, lr, pc}
 8016b40:	0800ee9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, fp, sp, lr, pc}
 8016b44:	0800ee79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr, pc}
 8016b48:	0800ee59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, sp, lr, pc}

08016b4c <vtable for StoreDmxSend>:
	...
 8016b54:	0800eebd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sl, fp, sp, lr, pc}
 8016b58:	0800ef05 	stmdaeq	r0, {r0, r2, r8, r9, sl, fp, sp, lr, pc}
 8016b5c:	0800eee1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, fp, sp, lr, pc}
 8016b60:	0800eec1 	stmdaeq	r0, {r0, r6, r7, r9, sl, fp, sp, lr, pc}

08016b64 <vtable for StoreNetwork>:
	...
 8016b6c:	0800ef25 	stmdaeq	r0, {r0, r2, r5, r8, r9, sl, fp, sp, lr, pc}
 8016b70:	0800f039 	stmdaeq	r0, {r0, r3, r4, r5, ip, sp, lr, pc}
 8016b74:	0800ef2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, sl, fp, sp, lr, pc}
 8016b78:	0800f04d 	stmdaeq	r0, {r0, r2, r3, r6, ip, sp, lr, pc}
 8016b7c:	0800efdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8016b80:	0800efb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8016b84:	0800ef81 	stmdaeq	r0, {r0, r7, r8, r9, sl, fp, sp, lr, pc}
 8016b88:	0800f009 	stmdaeq	r0, {r0, r3, ip, sp, lr, pc}
 8016b8c:	0800ef51 	stmdaeq	r0, {r0, r4, r6, r8, r9, sl, fp, sp, lr, pc}
 8016b90:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8016b94:	00000000 	andeq	r0, r0, r0
 8016b98:	0800ef27 	stmdaeq	r0, {r0, r1, r2, r5, r8, r9, sl, fp, sp, lr, pc}
 8016b9c:	0800f045 	stmdaeq	r0, {r0, r2, r6, ip, sp, lr, pc}
 8016ba0:	0800f001 	stmdaeq	r0, {r0, ip, sp, lr, pc}
 8016ba4:	0800efd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8016ba8:	0800efa9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8016bac:	0800f031 	stmdaeq	r0, {r0, r4, r5, ip, sp, lr, pc}
 8016bb0:	0800ef79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, sl, fp, sp, lr, pc}

08016bb4 <vtable for StoreRDMDevice>:
	...
 8016bbc:	0800f081 	stmdaeq	r0, {r0, r7, ip, sp, lr, pc}
 8016bc0:	0800f0f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, ip, sp, lr, pc}
 8016bc4:	0800f089 	stmdaeq	r0, {r0, r3, r7, ip, sp, lr, pc}
 8016bc8:	0800f105 	stmdaeq	r0, {r0, r2, r8, ip, sp, lr, pc}
 8016bcc:	0800f0ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, ip, sp, lr, pc}
 8016bd0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8016bd4:	00000000 	andeq	r0, r0, r0
 8016bd8:	0800f083 	stmdaeq	r0, {r0, r1, r7, ip, sp, lr, pc}
 8016bdc:	0800f0fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, ip, sp, lr, pc}
 8016be0:	0800f0e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, ip, sp, lr, pc}

08016be4 <vtable for StoreRemoteConfig>:
	...
 8016bec:	0800f13d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, ip, sp, lr, pc}
 8016bf0:	0800f185 	stmdaeq	r0, {r0, r2, r7, r8, ip, sp, lr, pc}
 8016bf4:	0800f161 	stmdaeq	r0, {r0, r5, r6, r8, ip, sp, lr, pc}
 8016bf8:	0800f141 	stmdaeq	r0, {r0, r6, r8, ip, sp, lr, pc}
 8016bfc:	65746544 	ldrbvs	r6, [r4, #-1348]!	; 0xfffffabc
 8016c00:	64657463 	strbtvs	r7, [r5], #-1123	; 0xfffffb9d
 8016c04:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8016c08:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
 8016c0c:	746f7420 	strbtvc	r7, [pc], #-1056	; 8016c14 <vtable for StoreRemoteConfig+0x30>
 8016c10:	25206c61 	strcs	r6, [r0, #-3169]!	; 0xfffff39f
 8016c14:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
 8016c18:	20736574 	rsbscs	r6, r3, r4, ror r5
 8016c1c:	2064255b 	rsbcs	r2, r4, fp, asr r5
 8016c20:	0a5d426b 	beq	97675d4 <__exidx_end+0x1750094>
 8016c24:	70637400 	rsbvc	r7, r3, r0, lsl #8
 8016c28:	6765625f 			; <UNDEFINED> instruction: 0x6765625f
 8016c2c:	203a6e69 	eorscs	r6, sl, r9, ror #28
 8016c30:	206f6f74 	rsbcs	r6, pc, r4, ror pc	; <UNPREDICTABLE>
 8016c34:	796e616d 	stmdbvc	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 8016c38:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8016c3c:	7463656e 	strbtvc	r6, [r3], #-1390	; 0xfffffa92
 8016c40:	736e6f69 	cmnvc	lr, #420	; 0x1a4
 8016c44:	6e696200 	cdpvs	2, 6, cr6, cr9, cr0, {0}
 8016c48:	6e750064 	cdpvs	0, 7, cr0, cr5, cr4, {3}
 8016c4c:	646e6962 	strbtvs	r6, [lr], #-2402	; 0xfffff69e
 8016c50:	5241000a 	subpl	r0, r1, #10
 8016c54:	6f6c2050 	svcvs	0x006c2050
 8016c58:	70756b6f 	rsbsvc	r6, r5, pc, ror #22
 8016c5c:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
 8016c60:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8016c64:	64203e2d 	strtvs	r3, [r0], #-3629	; 0xfffff1d3
 8016c68:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 8016c6c:	6720746c 	strvs	r7, [r0, -ip, ror #8]!
 8016c70:	77657461 	strbvc	r7, [r5, -r1, ror #8]!
 8016c74:	000a7961 	andeq	r7, sl, r1, ror #18
 8016c78:	20505241 	subscs	r5, r0, r1, asr #4
 8016c7c:	6b6f6f6c 	blvs	9bf2a34 <__exidx_end+0x1bdb4f4>
 8016c80:	66207075 			; <UNDEFINED> instruction: 0x66207075
 8016c84:	656c6961 	strbvs	r6, [ip, #-2401]!	; 0xfffff69f
 8016c88:	 	vmlsmi.f32	s0, s0, s9

08016c8b <NetworkConst::MSG_NETWORK_INIT>:
 8016c8b:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8016c8f:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8016c93:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 8016c97:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 8016c9b:	302e302e 	eorcc	r3, lr, lr, lsr #32
 8016c9f:	3135322e 	teqcc	r5, lr, lsr #4
 8016ca3:	63745f00 	cmnvs	r4, #0, 30
 8016ca7:	6f6c2e70 	svcvs	0x006c2e70
 8016cab:	006c6163 	rsbeq	r6, ip, r3, ror #2
 8016caf:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 8016cb3:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8016cb7:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 8016cbf <NetworkConst::MSG_NETWORK_INIT+0x34>
 8016cbb:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 8016cbf:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 8015e63 <RemoteConfig::s_TXT+0x163>
 8016cc3:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 8016cc7:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 8016ccb:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 8016ccf:	20000a53 	andcs	r0, r0, r3, asr sl
 8016cd3:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8016cd7:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 8016cdb:	0a676e69 	beq	99f2687 <__exidx_end+0x19db147>
 8016cdf:	614e2000 	mrsvs	r2, (UNDEF: 78)
 8016ce3:	3a20656d 	bcc	883029f <__exidx_end+0x818d5f>
 8016ce7:	0a732520 	beq	9ce016f <__exidx_end+0x1cc8c2f>
 8016ceb:	73252000 			; <UNDEFINED> instruction: 0x73252000
 8016cef:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8016cf3:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016cf7:	30687465 	rsbcc	r7, r8, r5, ror #8
 8016cfb:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 8016cff:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 8016d03:	5f656369 	svcpl	0x00656369
 8016d07:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 8016d0b:	6b726f77 	blvs	9cb2aef <__exidx_end+0x1c9b5af>
 8016d0f:	4820000a 	stmdami	r0!, {r1, r3}
 8016d13:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 8016d17:	20656d61 	rsbcs	r6, r5, r1, ror #26
 8016d1b:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016d1f:	20000a73 	andcs	r0, r0, r3, ror sl
 8016d23:	614e6649 	cmpvs	lr, r9, asr #12
 8016d27:	2020656d 	eorcs	r6, r0, sp, ror #10
 8016d2b:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016d2f:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8016d33:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016d37:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 8016d3b:	20202074 	eorcs	r2, r0, r4, ror r0
 8016d3f:	3a202020 	bcc	881edc7 <__exidx_end+0x807887>
 8016d43:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8016d47:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016d4b:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016d4f:	0a64252f 	beq	9920213 <__exidx_end+0x1908cd3>
 8016d53:	654e2000 	strbvs	r2, [lr, #-0]
 8016d57:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 8016d5b:	2020206b 	eorcs	r2, r0, fp, rrx
 8016d5f:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016d63:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016d67:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016d6b:	20000a64 	andcs	r0, r0, r4, ror #20
 8016d6f:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 8016d73:	20796177 	rsbscs	r6, r9, r7, ror r1
 8016d77:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016d7b:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016d7f:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016d83:	0a64252e 	beq	9920243 <__exidx_end+0x1908d03>
 8016d87:	72422000 	subvc	r2, r2, #0
 8016d8b:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 8016d8f:	20747361 	rsbscs	r7, r4, r1, ror #6
 8016d93:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016d97:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016d9b:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016d9f:	20000a64 	andcs	r0, r0, r4, ror #20
 8016da3:	2063614d 	rsbcs	r6, r3, sp, asr #2
 8016da7:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016dab:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016daf:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016db3:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8016db7:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8016dbb:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8016dbf:	3a78322e 	bcc	9e2367f <__exidx_end+0x1e0c13f>
 8016dc3:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016dc7:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8016dcb:	20000a78 	andcs	r0, r0, r8, ror sl
 8016dcf:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 8016dd3:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016dd7:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016ddb:	000a6325 	andeq	r6, sl, r5, lsr #6
 8016ddf:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 8016de3:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 8016de7:	 	rsbvc	r0, r9, r0, asr r0

08016de9 <NetworkParamsConst::IP_ADDRESS>:
 8016de9:	615f7069 	cmpvs	pc, r9, rrx
 8016ded:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8016df1:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08016df4 <NetworkParamsConst::DEFAULT_GATEWAY>:
 8016df4:	61666564 	cmnvs	r6, r4, ror #10
 8016df8:	5f746c75 	svcpl	0x00746c75
 8016dfc:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8016e00:	00796177 	rsbseq	r6, r9, r7, ror r1

08016e04 <NetworkParamsConst::DHCP_RETRY_TIME>:
 8016e04:	70636864 	rsbvc	r6, r3, r4, ror #16
 8016e08:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8016e0c:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8016e14 <NetworkParamsConst::HOSTNAME>
 8016e10:	00656d69 	rsbeq	r6, r5, r9, ror #26

08016e14 <NetworkParamsConst::HOSTNAME>:
 8016e14:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8016e18:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08016e1d <NetworkParamsConst::NET_MASK>:
 8016e1d:	5f74656e 	svcpl	0x0074656e
 8016e21:	6b73616d 	blvs	9cef3dd <__exidx_end+0x1cd7e9d>
	...

08016e26 <NetworkParamsConst::USE_DHCP>:
 8016e26:	5f657375 	svcpl	0x00657375
 8016e2a:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08016e2f <NetworkParamsConst::FILE_NAME>:
 8016e2f:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8016e33:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8016e37:	00747874 	rsbseq	r7, r4, r4, ror r8
 8016e3b:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 8016e3f:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 8016e43:	61747320 	cmnvs	r4, r0, lsr #6
 8016e47:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8016e4b:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016e4f:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016e53:	252f6425 	strcs	r6, [pc, #-1061]!	; 8016a36 <index_js+0x4fe>
 8016e57:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8016e5b:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 8016e5f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016e63:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016e67:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8016e6b:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 8016e6f:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016e73:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016e77:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8016e7b:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 8016e7f:	20657261 	rsbcs	r7, r5, r1, ror #4
 8016e83:	2a2e2556 	bcs	8ba03e3 <__exidx_end+0xb88ea3>
 8016e87:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 8016e8b:	72205043 	eorvc	r5, r0, #67	; 0x43
 8016e8f:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 8016e93:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8016e97:	50434844 	subpl	r4, r3, r4, asr #16
 8016e9b:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8016e9f:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8016ea3:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 8016ea7:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8016eab:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8016eaf:	6f647475 	svcvs	0x00647475
 8016eb3:	00006e77 	andeq	r6, r0, r7, ror lr
	...

08016eb8 <pArray>:
 8016eb8:	08016f4c 	stmdaeq	r1, {r2, r3, r6, r8, r9, sl, fp, sp, lr}
 8016ebc:	08016f08 	stmdaeq	r1, {r3, r8, r9, sl, fp, sp, lr}
 8016ec0:	08016de9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, sl, fp, sp, lr}
 8016ec4:	08016f52 	stmdaeq	r1, {r1, r4, r6, r8, r9, sl, fp, sp, lr}
 8016ec8:	080170b0 	stmdaeq	r1, {r4, r5, r7, ip, sp, lr}
 8016ecc:	08016f13 	stmdaeq	r1, {r0, r1, r4, r8, r9, sl, fp, sp, lr}
 8016ed0:	0801561b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sl, ip, lr}
 8016ed4:	08016e14 	stmdaeq	r1, {r2, r4, r9, sl, fp, sp, lr}
 8016ed8:	08017016 	stmdaeq	r1, {r1, r2, r4, ip, sp, lr}
 8016edc:	08017026 	stmdaeq	r1, {r1, r2, r5, ip, sp, lr}
 8016ee0:	08017036 	stmdaeq	r1, {r1, r2, r4, r5, ip, sp, lr}
 8016ee4:	08017046 	stmdaeq	r1, {r1, r2, r6, ip, sp, lr}
 8016ee8:	08016e1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sl, fp, sp, lr}
 8016eec:	0801709e 	stmdaeq	r1, {r1, r2, r3, r4, r7, ip, sp, lr}
 8016ef0:	08015626 	stmdaeq	r1, {r1, r2, r5, r9, sl, ip, lr}
 8016ef4:	0801563e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r9, sl, ip, lr}
 8016ef8:	08015656 	stmdaeq	r1, {r1, r2, r4, r6, r9, sl, ip, lr}
 8016efc:	0801566e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r9, sl, ip, lr}
 8016f00:	08016df4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 8016f04:	08016f20 	stmdaeq	r1, {r5, r8, r9, sl, fp, sp, lr}

08016f08 <DisplayUdfParamsConst::BOARD_NAME>:
 8016f08:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 8016f0c:	616e5f64 	cmnvs	lr, r4, ror #30
 8016f10:	 	tstvs	r0, sp, ror #10

08016f13 <DisplayUdfParamsConst::ACTIVE_PORTS>:
 8016f13:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8016f17:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 8016f1b:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

08016f20 <DisplayUdfParamsConst::DMX_DIRECTION>:
 8016f20:	5f786d64 	svcpl	0x00786d64
 8016f24:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016f28:	6f697463 	svcvs	0x00697463
 8016f2c:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

08016f2e <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 8016f2e:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 8016f32:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016f36:	756f656d 	strbvc	r6, [pc, #-1389]!	; 80169d1 <index_js+0x499>
 8016f3a:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

08016f3c <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 8016f3c:	70696c66 	rsbvc	r6, r9, r6, ror #24
 8016f40:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 8016f44:	61636974 	smcvs	13972	; 0x3694
 8016f48:	00796c6c 	rsbseq	r6, r9, ip, ror #24

08016f4c <DisplayUdfParamsConst::TITLE>:
 8016f4c:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8016f50:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

08016f52 <DisplayUdfParamsConst::VERSION>:
 8016f52:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016f56:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08016f5a <DisplayUdfParamsConst::FILE_NAME>:
 8016f5a:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8016f5e:	2e79616c 	rpwcsez	f6, f1, #4.0
 8016f62:	00747874 	rsbseq	r7, r4, r4, ror r8

08016f66 <DisplayUdfParamsConst::INTENSITY>:
 8016f66:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8016f6a:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8016f6e:	20200079 	eorcs	r0, r0, r9, ror r0
 8016f72:	4f002020 	svcmi	0x00002020
 8016f76:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8016f7a:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8016f7e:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 8016f82:	20632520 	rsbcs	r2, r3, r0, lsr #10
 8016f86:	4f007325 	svcmi	0x00007325
 8016f8a:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8016f8e:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 8016f92:	3a64253a 	bcc	9920482 <__exidx_end+0x1908f42>
 8016f96:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8016f9a:	73252063 			; <UNDEFINED> instruction: 0x73252063
 8016f9e:	3a632500 	bcc	98e03a6 <__exidx_end+0x18c8e66>
 8016fa2:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8016fa6:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016faa:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016fae:	3a504100 	bcc	94273b6 <__exidx_end+0x140fe76>
 8016fb2:	00642520 	rsbeq	r2, r4, r0, lsr #10
 8016fb6:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 8016fba:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8016fbe:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 8016fc2:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 8016fc6:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8016fca:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016fce:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016fd2:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016fd6:	2c226425 	cfstrscs	mvf6, [r2], #-148	; 0xffffff6c
 8016fda:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8016fde:	2e64253d 	mcrcs	5, 3, r2, cr4, cr13, {1}
 8016fe2:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016fe6:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016fea:	2023000a 	eorcs	r0, r3, sl
 8016fee:	23207325 			; <UNDEFINED> instruction: 0x23207325
 8016ff2:	2522000a 	strcs	r0, [r2, #-10]!
 8016ff6:	223a2273 	eorscs	r2, sl, #805306375	; 0x30000007
 8016ffa:	782a2e25 	stmdavc	sl!, {r0, r2, r5, r9, sl, fp, sp}
 8016ffe:	23002c22 	movwcs	r2, #3106	; 0xc22
 8017002:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8017006:	0a782a2e 	beq	9e218c6 <__exidx_end+0x1e0a386>
	...

0801700b <LightSetParamsConst::MERGE_MODE>:
 801700b:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801700f:	6f6d5f65 	svcvs	0x006d5f65
 8017013:	 	strvc	r6, [r0, #-1380]	; 0xfffffa9c

08017016 <LightSetParamsConst::UNIVERSE_PORT>:
 8017016:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801701a:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801701e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017022:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8017026:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801702a:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801702e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017032:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8017036:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801703a:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801703e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017042:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8017046:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801704a:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801704e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017052:	00645f74 	rsbeq	r5, r4, r4, ror pc

08017056 <LightSetParamsConst::MERGE_MODE_PORT>:
 8017056:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801705a:	6f6d5f65 	svcvs	0x006d5f65
 801705e:	705f6564 	subsvc	r6, pc, r4, ror #10
 8017062:	5f74726f 	svcpl	0x0074726f
 8017066:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 801706a:	5f656772 	svcpl	0x00656772
 801706e:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8017072:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017076:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801707a:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801707e:	6f6d5f65 	svcvs	0x006d5f65
 8017082:	705f6564 	subsvc	r6, pc, r4, ror #10
 8017086:	5f74726f 	svcpl	0x0074726f
 801708a:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 801708e:	5f656772 	svcpl	0x00656772
 8017092:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8017096:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801709a:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801709e <LightSetParamsConst::DMX_START_ADDRESS>:
 801709e:	5f786d64 	svcpl	0x00786d64
 80170a2:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 80170a6:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 80170aa:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 80170ae:	 	mrcvs	0, 3, r0, cr5, cr3, {3}

080170b0 <LightSetParamsConst::UNIVERSE>:
 80170b0:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80170b4:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

080170b9 <LightSetParamsConst::DIRECTION>:
 80170b9:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80170bd:	6f697463 	svcvs	0x00697463
 80170c1:	6f705f6e 	svcvs	0x00705f6e
 80170c5:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 80170c9:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 80170cd:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 80170d1:	5f6e6f69 	svcpl	0x006e6f69
 80170d5:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 80170d9:	0000625f 	andeq	r6, r0, pc, asr r2
 80170dd:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80170e1:	6f697463 	svcvs	0x00697463
 80170e5:	6f705f6e 	svcvs	0x00705f6e
 80170e9:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 80170ed:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 80170f1:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 80170f5:	5f6e6f69 	svcpl	0x006e6f69
 80170f9:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 80170fd:	0000645f 	andeq	r6, r0, pc, asr r4
 8017101:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8017105:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8017109:	66207961 	strtvs	r7, [r0], -r1, ror #18
 801710d:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8017111:	31485300 	mrscc	r5, (UNDEF: 120)
 8017115:	00363031 	eorseq	r3, r6, r1, lsr r0
 8017119:	31445353 	cmpcc	r4, r3, asr r3
 801711d:	00363033 	eorseq	r3, r6, r3, lsr r0
 8017121:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 8017125:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 8017129:	000a2964 	andeq	r2, sl, r4, ror #18
 801712d:	aaeeaa40 	bge	7bc1a35 <__stack_size+0x7bc0235>
 8017131:	 	andmi	r0, r0, lr, ror #1

08017134 <_OledFont8x6>:
 8017134:	00000040 	andeq	r0, r0, r0, asr #32
 8017138:	40000000 	andmi	r0, r0, r0
 801713c:	005f0000 	subseq	r0, pc, r0
 8017140:	00400000 	subeq	r0, r0, r0
 8017144:	00070007 	andeq	r0, r7, r7
 8017148:	7f144000 	svcvc	0x00144000
 801714c:	00147f14 	andseq	r7, r4, r4, lsl pc
 8017150:	7f2a2440 	svcvc	0x002a2440
 8017154:	4000122a 	andmi	r1, r0, sl, lsr #4
 8017158:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 801715c:	36400062 	strbcc	r0, [r0], -r2, rrx
 8017160:	50205649 	eorpl	r5, r0, r9, asr #12
 8017164:	08004000 	stmdaeq	r0, {lr}
 8017168:	00000307 	andeq	r0, r0, r7, lsl #6
 801716c:	221c0040 	andscs	r0, ip, #64	; 0x40
 8017170:	40000041 	andmi	r0, r0, r1, asr #32
 8017174:	1c224100 	stfnes	f4, [r2], #-0
 8017178:	2a400000 	bcs	9017180 <__exidx_end+0xfffc40>
 801717c:	2a1c7f1c 	bcs	8736df4 <__exidx_end+0x71f8b4>
 8017180:	08084000 	stmdaeq	r8, {lr}
 8017184:	0008083e 	andeq	r0, r8, lr, lsr r8
 8017188:	70800040 	addvc	r0, r0, r0, asr #32
 801718c:	40000030 	andmi	r0, r0, r0, lsr r0
 8017190:	08080808 	stmdaeq	r8, {r3, fp}
 8017194:	00400008 	subeq	r0, r0, r8
 8017198:	00606000 	rsbeq	r6, r0, r0
 801719c:	10204000 	eorne	r4, r0, r0
 80171a0:	00020408 	andeq	r0, r2, r8, lsl #8
 80171a4:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 80171a8:	40003e45 	andmi	r3, r0, r5, asr #28
 80171ac:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 80171b0:	72400000 	subvc	r0, r0, #0
 80171b4:	46494949 	strbmi	r4, [r9], -r9, asr #18
 80171b8:	41214000 			; <UNDEFINED> instruction: 0x41214000
 80171bc:	00334d49 	eorseq	r4, r3, r9, asr #26
 80171c0:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 80171c4:	4000107f 	andmi	r1, r0, pc, ror r0
 80171c8:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 80171cc:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 80171d0:	3149494a 	cmpcc	r9, sl, asr #18
 80171d4:	21414000 	mrscs	r4, (UNDEF: 65)
 80171d8:	00070911 	andeq	r0, r7, r1, lsl r9
 80171dc:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 80171e0:	40003649 	andmi	r3, r0, r9, asr #12
 80171e4:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 80171e8:	0040001e 	subeq	r0, r0, lr, lsl r0
 80171ec:	00001400 	andeq	r1, r0, r0, lsl #8
 80171f0:	40004000 	andmi	r4, r0, r0
 80171f4:	00000034 	andeq	r0, r0, r4, lsr r0
 80171f8:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 80171fc:	40004122 	andmi	r4, r0, r2, lsr #2
 8017200:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 8017204:	00400014 	subeq	r0, r0, r4, lsl r0
 8017208:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 801720c:	01024000 	mrseq	r4, (UNDEF: 2)
 8017210:	00060959 	andeq	r0, r6, r9, asr r9
 8017214:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 8017218:	40004e59 	andmi	r4, r0, r9, asr lr
 801721c:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8017220:	7f40007c 	svcvc	0x0040007c
 8017224:	36494949 	strbcc	r4, [r9], -r9, asr #18
 8017228:	413e4000 	teqmi	lr, r0
 801722c:	00224141 	eoreq	r4, r2, r1, asr #2
 8017230:	41417f40 	cmpmi	r1, r0, asr #30
 8017234:	40003e41 	andmi	r3, r0, r1, asr #28
 8017238:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 801723c:	7f400041 	svcvc	0x00400041
 8017240:	01090909 	tsteq	r9, r9, lsl #18
 8017244:	413e4000 	teqmi	lr, r0
 8017248:	00735141 	rsbseq	r5, r3, r1, asr #2
 801724c:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8017250:	40007f08 	andmi	r7, r0, r8, lsl #30
 8017254:	417f4100 	cmnmi	pc, r0, lsl #2
 8017258:	20400000 	subcs	r0, r0, r0
 801725c:	013f4140 	teqeq	pc, r0, asr #2
 8017260:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8017264:	00412214 	subeq	r2, r1, r4, lsl r2
 8017268:	40407f40 	submi	r7, r0, r0, asr #30
 801726c:	40004040 	andmi	r4, r0, r0, asr #32
 8017270:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 8017274:	7f40007f 	svcvc	0x0040007f
 8017278:	7f100804 	svcvc	0x00100804
 801727c:	413e4000 	teqmi	lr, r0
 8017280:	003e4141 	eorseq	r4, lr, r1, asr #2
 8017284:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8017288:	40000609 	andmi	r0, r0, r9, lsl #12
 801728c:	2151413e 	cmpcs	r1, lr, lsr r1
 8017290:	7f40005e 	svcvc	0x0040005e
 8017294:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 8017298:	49264000 	stmdbmi	r6!, {lr}
 801729c:	00324949 	eorseq	r4, r2, r9, asr #18
 80172a0:	7f010340 	svcvc	0x00010340
 80172a4:	40000301 	andmi	r0, r0, r1, lsl #6
 80172a8:	4040403f 	submi	r4, r0, pc, lsr r0
 80172ac:	1f40003f 	svcne	0x0040003f
 80172b0:	1f204020 	svcne	0x00204020
 80172b4:	403f4000 	eorsmi	r4, pc, r0
 80172b8:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 80172bc:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 80172c0:	40006314 	andmi	r6, r0, r4, lsl r3
 80172c4:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 80172c8:	61400003 	cmpvs	r0, r3
 80172cc:	434d4959 	movtmi	r4, #55641	; 0xd959
 80172d0:	7f004000 	svcvc	0x00004000
 80172d4:	00414141 	subeq	r4, r1, r1, asr #2
 80172d8:	08040240 	stmdaeq	r4, {r6, r9}
 80172dc:	40002010 	andmi	r2, r0, r0, lsl r0
 80172e0:	41414100 	mrsmi	r4, (UNDEF: 81)
 80172e4:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 80172e8:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 80172ec:	40404000 	submi	r4, r0, r0
 80172f0:	00404040 	subeq	r4, r0, r0, asr #32
 80172f4:	07030040 	streq	r0, [r3, -r0, asr #32]
 80172f8:	40000008 	andmi	r0, r0, r8
 80172fc:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 8017300:	7f400040 	svcvc	0x00400040
 8017304:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 8017308:	44384000 	ldrtmi	r4, [r8], #-0
 801730c:	00284444 	eoreq	r4, r8, r4, asr #8
 8017310:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 8017314:	40007f28 	andmi	r7, r0, r8, lsr #30
 8017318:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 801731c:	00400018 	subeq	r0, r0, r8, lsl r0
 8017320:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 8017324:	a4184000 	ldrge	r4, [r8], #-0
 8017328:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 801732c:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8017330:	40007804 	andmi	r7, r0, r4, lsl #16
 8017334:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 8017338:	20400000 	subcs	r0, r0, r0
 801733c:	003d4040 	eorseq	r4, sp, r0, asr #32
 8017340:	107f4000 	rsbsne	r4, pc, r0
 8017344:	00004428 	andeq	r4, r0, r8, lsr #8
 8017348:	7f410040 	svcvc	0x00410040
 801734c:	40000040 	andmi	r0, r0, r0, asr #32
 8017350:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 8017354:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8017358:	78040408 	stmdavc	r4, {r3, sl}
 801735c:	44384000 	ldrtmi	r4, [r8], #-0
 8017360:	00384444 	eorseq	r4, r8, r4, asr #8
 8017364:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 8017368:	40001824 	andmi	r1, r0, r4, lsr #16
 801736c:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8017370:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 8017374:	08040408 	stmdaeq	r4, {r3, sl}
 8017378:	54484000 	strbpl	r4, [r8], #-0
 801737c:	00245454 	eoreq	r5, r4, r4, asr r4
 8017380:	3f040440 	svccc	0x00040440
 8017384:	40002444 	andmi	r2, r0, r4, asr #8
 8017388:	2040403c 	subcs	r4, r0, ip, lsr r0
 801738c:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8017390:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 8017394:	403c4000 	eorsmi	r4, ip, r0
 8017398:	003c4030 	eorseq	r4, ip, r0, lsr r0
 801739c:	10284440 	eorne	r4, r8, r0, asr #8
 80173a0:	40004428 	andmi	r4, r0, r8, lsr #8
 80173a4:	9090904c 	addsls	r9, r0, ip, asr #32
 80173a8:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 80173ac:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 80173b0:	08004000 	stmdaeq	r0, {lr}
 80173b4:	00004136 	andeq	r4, r0, r6, lsr r1
 80173b8:	77000040 	strvc	r0, [r0, -r0, asr #32]
 80173bc:	40000000 	andmi	r0, r0, r0
 80173c0:	08364100 	ldmdaeq	r6!, {r8, lr}
 80173c4:	02400000 	subeq	r0, r0, #0
 80173c8:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 80173cc:	263c4000 	ldrtcs	r4, [ip], -r0
 80173d0:	003c2623 	eorseq	r2, ip, r3, lsr #12

080173d4 <oled_128x32_init>:
 80173d4:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80173d8:	4000d31f 	andmi	sp, r0, pc, lsl r3
 80173dc:	0020148d 	eoreq	r1, r0, sp, lsl #9
 80173e0:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 80173e4:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 80173e8:	a6a440db 	ssatge	r4, #5, fp, asr #1

080173ec <oled_128x64_init>:
 80173ec:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80173f0:	4000d33f 	andmi	sp, r0, pc, lsr r3
 80173f4:	0020148d 	eoreq	r1, r0, sp, lsl #9
 80173f8:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 80173fc:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8017400:	a6a440db 	ssatge	r4, #5, fp, asr #1

08017404 <vtable for Ssd1306>:
	...
 801740c:	0801250b 	stmdaeq	r1, {r0, r1, r3, r8, sl, sp}
 8017410:	08012539 	stmdaeq	r1, {r0, r3, r4, r5, r8, sl, sp}
 8017414:	08012851 	stmdaeq	r1, {r0, r4, r6, fp, sp}
 8017418:	080127d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, sl, sp}
 801741c:	080126a1 	stmdaeq	r1, {r0, r5, r7, r9, sl, sp}
 8017420:	08012559 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl, sp}
 8017424:	08012581 	stmdaeq	r1, {r0, r7, r8, sl, sp}
 8017428:	08012677 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r9, sl, sp}
 801742c:	08012631 	stmdaeq	r1, {r0, r4, r5, r9, sl, sp}
 8017430:	0801250d 	stmdaeq	r1, {r0, r2, r3, r8, sl, sp}
 8017434:	080126dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, sl, sp}
 8017438:	080126e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl, sp}
 801743c:	08012703 	stmdaeq	r1, {r0, r1, r8, r9, sl, sp}
 8017440:	08012511 	stmdaeq	r1, {r0, r4, r8, sl, sp}
 8017444:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8017448:	5b1b006d 	blpl	86d7604 <__exidx_end+0x6c00c4>
 801744c:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8017450:	31335b1b 	teqcc	r3, fp, lsl fp
 8017454:	5b1b006d 	blpl	86d7610 <__exidx_end+0x6c00d0>
 8017458:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 801745c:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8017460:	5b1b006d 	blpl	86d761c <__exidx_end+0x6c00dc>
 8017464:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 8017468:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 801746c:	205d732a 	subscs	r7, sp, sl, lsr #6
 8017470:	43207325 			; <UNDEFINED> instruction: 0x43207325
 8017474:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 8017478:	2064656c 	rsbcs	r6, r4, ip, ror #10
 801747c:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8017480:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 8017484:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 8017488:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 801748c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8017490:	203a636f 	eorscs	r6, sl, pc, ror #6
 8017494:	000a7525 	andeq	r7, sl, r5, lsr #10
 8017498:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801749c:	203a636f 	eorscs	r6, sl, pc, ror #6
 80174a0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 80174a4:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 80174a8:	6b636f6c 	blvs	98f3260 <__exidx_end+0x18dbd20>
 80174ac:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 80174b0:	000a7469 	andeq	r7, sl, r9, ror #8
 80174b4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80174b8:	203a636f 	eorscs	r6, sl, pc, ror #6
 80174bc:	6f6c4270 	svcvs	0x006c4270
 80174c0:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 80174c4:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 80174c8:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 80174cc:	7a697320 	bvc	9a74154 <__exidx_end+0x1a5cc14>
 80174d0:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 80174d4:	6164202c 	cmnvs	r4, ip, lsr #32
 80174d8:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 80174dc:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 80174e0:	3a656572 	bcc	9970ab0 <__exidx_end+0x1959570>
 80174e4:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 80174e8:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80174ec:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 80174f0:	203d2072 	eorscs	r2, sp, r2, ror r0
 80174f4:	202c7025 	eorcs	r7, ip, r5, lsr #32
 80174f8:	6f6c4270 	svcvs	0x006c4270
 80174fc:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 8017500:	0a702520 	beq	9c20988 <__exidx_end+0x1c09448>
 8017504:	00000000 	andeq	r0, r0, r0

08017508 <days_of_month>:
 8017508:	0000001f 	andeq	r0, r0, pc, lsl r0
 801750c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8017510:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017514:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017518:	0000001f 	andeq	r0, r0, pc, lsl r0
 801751c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017520:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017524:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017528:	0000001e 	andeq	r0, r0, lr, lsl r0
 801752c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017530:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017534:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

08017538 <__exidx_start>:
 8017538:	7fff0610 	svcvc	0x00ff0610
 801753c:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08017540 <.ARM.attributes>:
 8017540:	00002e41 	andeq	r2, r0, r1, asr #28
 8017544:	61656100 	cmnvs	r5, r0, lsl #2
 8017548:	01006962 	tsteq	r0, r2, ror #18
 801754c:	00000024 	andeq	r0, r0, r4, lsr #32
 8017550:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 8017554:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 8017558:	0600334d 	streq	r3, [r0], -sp, asr #6
 801755c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8017560:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 8017564:	17011501 	strne	r1, [r1, -r1, lsl #10]
 8017568:	1a011803 	bne	805d57c <__exidx_end+0x4603c>
 801756c:	Address 0x000000000801756c is out of bounds.


Disassembly of section .data:

20000000 <DmxConfigUdp::Run()::pCmd>:
20000000:	20001a3d 	andcs	r1, r0, sp, lsr sl

20000004 <DmxConfigUdp::s_nHandle>:
20000004:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000008 <s_nDmxTransmitPeriod>:
20000008:	000061a8 	andeq	r6, r0, r8, lsr #3

2000000c <s_nDmxTransmitMabTime>:
2000000c:	0000000c 	andeq	r0, r0, ip

20000010 <s_nDmxTransmitBreakTime>:
20000010:	0000005c 	andeq	r0, r0, ip, asr r0

20000014 <s_multicast_mac>:
20000014:	005e0001 	subseq	r0, lr, r1
20000018:	00000000 	andeq	r0, r0, r0

2000001c <MDNS::s_nHandle>:
2000001c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000020 <next_block>:
20000020:	20016000 	andcs	r6, r1, r0

20000024 <s_block_bucket>:
20000024:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000034:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000044:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000054:	00000060 	andeq	r0, r0, r0, rrx
	...
20000064:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000074:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000084:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000094:	00000180 	andeq	r0, r0, r0, lsl #3
	...
200000a4:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000b4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000c4:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000d4:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000f4 <SystemCoreClock>:
200000f4:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000f8 <DmxInput::s_nStarted>:
200000f8:	00000000 	andeq	r0, r0, r0

200000fc <guard variable for lightset::Data::Get()::instance>:
200000fc:	00000000 	andeq	r0, r0, r0

20000100 <lightset::Data::Get()::instance>:
	...

20001910 <ArtNetNode::s_pThis>:
20001910:	00000000 	andeq	r0, r0, r0

20001914 <s_ReceivingMask>:
20001914:	00000000 	andeq	r0, r0, r0

20001918 <ip>:
20001918:	00000000 	andeq	r0, r0, r0

2000191c <ip>:
2000191c:	00000000 	andeq	r0, r0, r0

20001920 <E131Bridge::s_pThis>:
20001920:	00000000 	andeq	r0, r0, r0

20001924 <s_ReceivingMask>:
20001924:	00000000 	andeq	r0, r0, r0

20001928 <ArtNetRdmController::s_rdmMessage>:
	...

20001a28 <ArtNetRdmController::s_nPorts>:
	...

20001a30 <uuid_cast>:
	...

20001a38 <DmxSend::s_nStarted>:
	...

20001a39 <DmxConfigUdp::s_Buffer>:
	...

20001a4c <s_RxBuffer>:
	...

20001c5c <s_TxBuffer>:
	...

20001e60 <sv_PortState>:
20001e60:	00000000 	andeq	r0, r0, r0

20001e64 <s_nUartsSending>:
20001e64:	00000000 	andeq	r0, r0, r0

20001e68 <sv_nRxDmxPackets>:
	...

20001e78 <Dmx::s_pThis>:
20001e78:	00000000 	andeq	r0, r0, r0

20001e7c <gv_RdmDataReceiveEnd>:
20001e7c:	00000000 	andeq	r0, r0, r0

20001e80 <s_nLastSendMicros>:
20001e80:	00000000 	andeq	r0, r0, r0

20001e84 <s_TransactionNumber>:
20001e84:	00000000 	andeq	r0, r0, r0

20001e88 <RemoteConfig::s_pUdpBuffer>:
20001e88:	00000000 	andeq	r0, r0, r0

20001e8c <RemoteConfig::s_RemoteConfigListBin>:
	...

20001eb0 <RemoteConfig::s_pThis>:
20001eb0:	00000000 	andeq	r0, r0, r0

20001eb4 <SpiFlashStore::s_nWaitMillis>:
20001eb4:	00000000 	andeq	r0, r0, r0

20001eb8 <SpiFlashStore::s_SpiFlashData>:
	...

20002eb8 <SpiFlashStore::s_nStartAddress>:
20002eb8:	00000000 	andeq	r0, r0, r0

20002ebc <SpiFlashStore::s_bHaveFlashChip>:
20002ebc:	00000000 	andeq	r0, r0, r0

20002ec0 <SpiFlashStore::s_nSpiFlashStoreSize>:
20002ec0:	00000000 	andeq	r0, r0, r0

20002ec4 <SpiFlashStore::s_State>:
20002ec4:	00000000 	andeq	r0, r0, r0

20002ec8 <SpiFlashStore::s_pThis>:
20002ec8:	00000000 	andeq	r0, r0, r0

20002ecc <SpiFlashStore::s_bIsNew>:
20002ecc:	00000000 	andeq	r0, r0, r0

20002ed0 <StoreArtNet::s_pThis>:
20002ed0:	00000000 	andeq	r0, r0, r0

20002ed4 <StoreDisplayUdf::s_pThis>:
20002ed4:	00000000 	andeq	r0, r0, r0

20002ed8 <StoreDmxSend::s_pThis>:
20002ed8:	00000000 	andeq	r0, r0, r0

20002edc <StoreNetwork::s_pThis>:
20002edc:	00000000 	andeq	r0, r0, r0

20002ee0 <StoreRDMDevice::s_pThis>:
20002ee0:	00000000 	andeq	r0, r0, r0

20002ee4 <StoreRemoteConfig::s_pThis>:
20002ee4:	00000000 	andeq	r0, r0, r0

20002ee8 <FlashRom::s_pThis>:
20002ee8:	00000000 	andeq	r0, r0, r0

20002eec <flashrom::s_nAddress>:
20002eec:	00000000 	andeq	r0, r0, r0

20002ef0 <flashrom::s_State>:
20002ef0:	00000000 	andeq	r0, r0, r0

20002ef4 <flashrom::s_nPage>:
20002ef4:	00000000 	andeq	r0, r0, r0

20002ef8 <flashrom::s_pData>:
20002ef8:	00000000 	andeq	r0, r0, r0

20002efc <flashrom::s_isBank0>:
20002efc:	00000000 	andeq	r0, r0, r0

20002f00 <flashrom::s_nLength>:
20002f00:	00000000 	andeq	r0, r0, r0

20002f04 <g_ip_info>:
	...

20002f10 <g_mac_address>:
20002f10:	00000000 	andeq	r0, r0, r0
	...

20002f16 <s_is_dhcp>:
	...

20002f18 <s_p>:
20002f18:	00000000 	andeq	r0, r0, r0

20002f1c <s_ticker>:
20002f1c:	00000000 	andeq	r0, r0, r0

20002f20 <s_mac_address>:
	...

20002f28 <s_mac_address_arp_reply>:
20002f28:	00000000 	andeq	r0, r0, r0
	...

20002f2e <s_id>:
	...

20002f30 <s_recv_queue>:
	...

20003aa0 <s_tcb>:
	...

20003ae4 <s_tcp>:
	...

200040d0 <broadcast_mask>:
200040d0:	00000000 	andeq	r0, r0, r0

200040d4 <gw_ip>:
200040d4:	00000000 	andeq	r0, r0, r0

200040d8 <on_network_mask>:
200040d8:	00000000 	andeq	r0, r0, r0

200040dc <s_id>:
200040dc:	00000000 	andeq	r0, r0, r0

200040e0 <s_ports_allowed>:
	...

20004100 <s_recv_queue>:
	...

20009da0 <s_send_packet>:
	...

2000a38c <MDNS::s_nRemoteIp>:
2000a38c:	00000000 	andeq	r0, r0, r0

2000a390 <MDNS::s_nRemotePort>:
2000a390:	00000000 	andeq	r0, r0, r0

2000a394 <MDNS::s_nMulticastIp>:
2000a394:	00000000 	andeq	r0, r0, r0

2000a398 <MDNS::s_AnswerLocalIp>:
	...

2000a59c <MDNS::s_ServiceRecords>:
	...

2000a5bc <MDNS::s_nBytesReceived>:
2000a5bc:	00000000 	andeq	r0, r0, r0

2000a5c0 <MDNS::s_ServiceRecordsData>:
	...

2000a7c4 <MDNS::s_pName>:
2000a7c4:	00000000 	andeq	r0, r0, r0

2000a7c8 <MDNS::s_pBuffer>:
2000a7c8:	00000000 	andeq	r0, r0, r0

2000a7cc <Network::s_pThis>:
2000a7cc:	00000000 	andeq	r0, r0, r0

2000a7d0 <NetworkParams::m_tNetworkParams>:
	...

2000a830 <s_arp_announce>:
	...

2000a85c <s_arp_reply>:
	...

2000a888 <s_arp_request>:
	...

2000a8b4 <s_arp_records>:
	...

2000aa34 <s_entry_current>:
2000aa34:	00000000 	andeq	r0, r0, r0

2000aa38 <s_dhcp_allocated_gw>:
2000aa38:	00000000 	andeq	r0, r0, r0

2000aa3c <s_dhcp_allocated_ip>:
2000aa3c:	00000000 	andeq	r0, r0, r0

2000aa40 <s_dhcp_allocated_netmask>:
2000aa40:	00000000 	andeq	r0, r0, r0

2000aa44 <s_dhcp_message>:
	...

2000ac68 <s_dhcp_server_ip>:
2000ac68:	00000000 	andeq	r0, r0, r0

2000ac6c <s_groups>:
	...

2000ad8c <s_id>:
2000ad8c:	00000000 	andeq	r0, r0, r0

2000ad90 <s_joins_allowed_index>:
2000ad90:	00000000 	andeq	r0, r0, r0

2000ad94 <s_leave>:
	...

2000adc4 <s_multicast_mac>:
	...

2000adcc <s_report>:
	...

2000adfc <DisplayUdf::s_pThis>:
2000adfc:	00000000 	andeq	r0, r0, r0

2000ae00 <PropertiesConfig::s_Config>:
2000ae00:	00000000 	andeq	r0, r0, r0

2000ae04 <Display::s_pThis>:
2000ae04:	00000000 	andeq	r0, r0, r0

2000ae08 <_ClearBuffer>:
	...

2000ae90 <Ssd1306::s_pThis>:
2000ae90:	00000000 	andeq	r0, r0, r0

2000ae94 <FirmwareVersion::s_FirmwareVersion>:
	...

2000aeaa <FirmwareVersion::s_Print>:
	...

2000aeec <FirmwareVersion::s_pThis>:
2000aeec:	00000000 	andeq	r0, r0, r0

2000aef0 <LedBlink::s_pThis>:
2000aef0:	00000000 	andeq	r0, r0, r0

2000aef4 <Hardware::s_pThis>:
2000aef4:	00000000 	andeq	r0, r0, r0

2000aef8 <outptr>:
2000aef8:	00000000 	andeq	r0, r0, r0

2000aefc <last.0>:
2000aefc:	00000000 	andeq	r0, r0, r0

2000af00 <s_micros>:
	...

2000af08 <set_timer>:
2000af08:	00000000 	andeq	r0, r0, r0

2000af0c <s_nSysTickMillis>:
2000af0c:	00000000 	andeq	r0, r0, r0

2000af10 <enet_init_status>:
2000af10:	00000000 	andeq	r0, r0, r0

2000af14 <s_nAddress>:
2000af14:	00000000 	andeq	r0, r0, r0

2000af18 <dma_current_ptp_rxdesc>:
2000af18:	00000000 	andeq	r0, r0, r0

2000af1c <dma_current_ptp_txdesc>:
2000af1c:	00000000 	andeq	r0, r0, r0

2000af20 <dma_current_rxdesc>:
2000af20:	00000000 	andeq	r0, r0, r0

2000af24 <dma_current_txdesc>:
2000af24:	00000000 	andeq	r0, r0, r0

2000af28 <enet_initpara>:
	...

2000af64 <rx_buff>:
	...

2000d31c <rxdesc_tab>:
	...

2000d37c <tx_buff>:
	...

2000df64 <txdesc_tab>:
	...

Disassembly of section .heap:

20016000 <heap_low>:
	...

Disassembly of section .stack:

20016800 <_sp-0x1800>:
	...
