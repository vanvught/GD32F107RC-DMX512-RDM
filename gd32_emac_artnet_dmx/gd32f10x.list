
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	08007481 	stmdaeq	r0, {r0, r7, sl, ip, sp, lr}
 8007008:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800700c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007010:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007014:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007018:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
	...
 800702c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007030:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800703c:	080133c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, ip, sp}
 8007040:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007044:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007048:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800704c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007050:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007054:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007058:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800705c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007060:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007064:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007068:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800706c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007070:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007074:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007078:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800707c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007080:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007084:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007088:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800708c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007090:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007094:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007098:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800709c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070a0:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070a4:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070a8:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070ac:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070b0:	0800c281 	stmdaeq	r0, {r0, r7, r9, lr, pc}
 80070b4:	0800c321 	stmdaeq	r0, {r0, r5, r8, r9, lr, pc}
 80070b8:	0800c365 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, lr, pc}
 80070bc:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070c0:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070c4:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070c8:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070cc:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070d0:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070d4:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070d8:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070dc:	0800c089 	stmdaeq	r0, {r0, r3, r7, lr, pc}
 80070e0:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070e4:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070e8:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070ec:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070f0:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 80070f4:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
	...
 8007100:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800710c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007110:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007114:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007118:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800711c:	0800c385 	stmdaeq	r0, {r0, r2, r7, r8, r9, lr, pc}
 8007120:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007124:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007128:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800712c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007130:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007134:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007138:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800713c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007140:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007144:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 8007148:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}
 800714c:	080074cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, sl, ip, sp, lr}

Disassembly of section .text:

08007150 <__aeabi_uldivmod>:
 8007150:	b953      	cbnz	r3, 8007168 <__aeabi_uldivmod+0x18>
 8007152:	b94a      	cbnz	r2, 8007168 <__aeabi_uldivmod+0x18>
 8007154:	2900      	cmp	r1, #0
 8007156:	bf08      	it	eq
 8007158:	2800      	cmpeq	r0, #0
 800715a:	bf1c      	itt	ne
 800715c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007160:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007164:	f000 b98a 	b.w	800747c <__aeabi_idiv0>
 8007168:	f1ad 0c08 	sub.w	ip, sp, #8
 800716c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007170:	f000 f81a 	bl	80071a8 <__udivmoddi4>
 8007174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800717c:	b004      	add	sp, #16
 800717e:	4770      	bx	lr

08007180 <__popcountsi2>:
 8007180:	0843      	lsrs	r3, r0, #1
 8007182:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8007186:	1ac0      	subs	r0, r0, r3
 8007188:	0883      	lsrs	r3, r0, #2
 800718a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800718e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8007192:	4418      	add	r0, r3
 8007194:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8007198:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 800719c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80071a0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80071a4:	0e00      	lsrs	r0, r0, #24
 80071a6:	4770      	bx	lr

080071a8 <__udivmoddi4>:
 80071a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ac:	9e08      	ldr	r6, [sp, #32]
 80071ae:	460d      	mov	r5, r1
 80071b0:	4604      	mov	r4, r0
 80071b2:	4688      	mov	r8, r1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d14d      	bne.n	8007254 <__udivmoddi4+0xac>
 80071b8:	428a      	cmp	r2, r1
 80071ba:	4694      	mov	ip, r2
 80071bc:	d968      	bls.n	8007290 <__udivmoddi4+0xe8>
 80071be:	fab2 f282 	clz	r2, r2
 80071c2:	b152      	cbz	r2, 80071da <__udivmoddi4+0x32>
 80071c4:	fa01 f302 	lsl.w	r3, r1, r2
 80071c8:	f1c2 0120 	rsb	r1, r2, #32
 80071cc:	fa20 f101 	lsr.w	r1, r0, r1
 80071d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80071d4:	ea41 0803 	orr.w	r8, r1, r3
 80071d8:	4094      	lsls	r4, r2
 80071da:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80071de:	fbb8 f7f1 	udiv	r7, r8, r1
 80071e2:	fa1f fe8c 	uxth.w	lr, ip
 80071e6:	fb01 8817 	mls	r8, r1, r7, r8
 80071ea:	fb07 f00e 	mul.w	r0, r7, lr
 80071ee:	0c23      	lsrs	r3, r4, #16
 80071f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80071f4:	4298      	cmp	r0, r3
 80071f6:	d90a      	bls.n	800720e <__udivmoddi4+0x66>
 80071f8:	eb1c 0303 	adds.w	r3, ip, r3
 80071fc:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8007200:	f080 811e 	bcs.w	8007440 <__udivmoddi4+0x298>
 8007204:	4298      	cmp	r0, r3
 8007206:	f240 811b 	bls.w	8007440 <__udivmoddi4+0x298>
 800720a:	3f02      	subs	r7, #2
 800720c:	4463      	add	r3, ip
 800720e:	1a1b      	subs	r3, r3, r0
 8007210:	fbb3 f0f1 	udiv	r0, r3, r1
 8007214:	fb01 3310 	mls	r3, r1, r0, r3
 8007218:	fb00 fe0e 	mul.w	lr, r0, lr
 800721c:	b2a4      	uxth	r4, r4
 800721e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007222:	45a6      	cmp	lr, r4
 8007224:	d90a      	bls.n	800723c <__udivmoddi4+0x94>
 8007226:	eb1c 0404 	adds.w	r4, ip, r4
 800722a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800722e:	f080 8109 	bcs.w	8007444 <__udivmoddi4+0x29c>
 8007232:	45a6      	cmp	lr, r4
 8007234:	f240 8106 	bls.w	8007444 <__udivmoddi4+0x29c>
 8007238:	4464      	add	r4, ip
 800723a:	3802      	subs	r0, #2
 800723c:	2100      	movs	r1, #0
 800723e:	eba4 040e 	sub.w	r4, r4, lr
 8007242:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007246:	b11e      	cbz	r6, 8007250 <__udivmoddi4+0xa8>
 8007248:	2300      	movs	r3, #0
 800724a:	40d4      	lsrs	r4, r2
 800724c:	e9c6 4300 	strd	r4, r3, [r6]
 8007250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007254:	428b      	cmp	r3, r1
 8007256:	d908      	bls.n	800726a <__udivmoddi4+0xc2>
 8007258:	2e00      	cmp	r6, #0
 800725a:	f000 80ee 	beq.w	800743a <__udivmoddi4+0x292>
 800725e:	2100      	movs	r1, #0
 8007260:	e9c6 0500 	strd	r0, r5, [r6]
 8007264:	4608      	mov	r0, r1
 8007266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726a:	fab3 f183 	clz	r1, r3
 800726e:	2900      	cmp	r1, #0
 8007270:	d14a      	bne.n	8007308 <__udivmoddi4+0x160>
 8007272:	42ab      	cmp	r3, r5
 8007274:	d302      	bcc.n	800727c <__udivmoddi4+0xd4>
 8007276:	4282      	cmp	r2, r0
 8007278:	f200 80fc 	bhi.w	8007474 <__udivmoddi4+0x2cc>
 800727c:	1a84      	subs	r4, r0, r2
 800727e:	eb65 0303 	sbc.w	r3, r5, r3
 8007282:	2001      	movs	r0, #1
 8007284:	4698      	mov	r8, r3
 8007286:	2e00      	cmp	r6, #0
 8007288:	d0e2      	beq.n	8007250 <__udivmoddi4+0xa8>
 800728a:	e9c6 4800 	strd	r4, r8, [r6]
 800728e:	e7df      	b.n	8007250 <__udivmoddi4+0xa8>
 8007290:	b902      	cbnz	r2, 8007294 <__udivmoddi4+0xec>
 8007292:	deff      	udf	#255	; 0xff
 8007294:	fab2 f282 	clz	r2, r2
 8007298:	2a00      	cmp	r2, #0
 800729a:	f040 8091 	bne.w	80073c0 <__udivmoddi4+0x218>
 800729e:	eba1 000c 	sub.w	r0, r1, ip
 80072a2:	2101      	movs	r1, #1
 80072a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80072a8:	fa1f fe8c 	uxth.w	lr, ip
 80072ac:	fbb0 f3f7 	udiv	r3, r0, r7
 80072b0:	fb07 0013 	mls	r0, r7, r3, r0
 80072b4:	0c25      	lsrs	r5, r4, #16
 80072b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80072ba:	fb0e f003 	mul.w	r0, lr, r3
 80072be:	42a8      	cmp	r0, r5
 80072c0:	d908      	bls.n	80072d4 <__udivmoddi4+0x12c>
 80072c2:	eb1c 0505 	adds.w	r5, ip, r5
 80072c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80072ca:	d202      	bcs.n	80072d2 <__udivmoddi4+0x12a>
 80072cc:	42a8      	cmp	r0, r5
 80072ce:	f200 80ce 	bhi.w	800746e <__udivmoddi4+0x2c6>
 80072d2:	4643      	mov	r3, r8
 80072d4:	1a2d      	subs	r5, r5, r0
 80072d6:	fbb5 f0f7 	udiv	r0, r5, r7
 80072da:	fb07 5510 	mls	r5, r7, r0, r5
 80072de:	fb0e fe00 	mul.w	lr, lr, r0
 80072e2:	b2a4      	uxth	r4, r4
 80072e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80072e8:	45a6      	cmp	lr, r4
 80072ea:	d908      	bls.n	80072fe <__udivmoddi4+0x156>
 80072ec:	eb1c 0404 	adds.w	r4, ip, r4
 80072f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80072f4:	d202      	bcs.n	80072fc <__udivmoddi4+0x154>
 80072f6:	45a6      	cmp	lr, r4
 80072f8:	f200 80b6 	bhi.w	8007468 <__udivmoddi4+0x2c0>
 80072fc:	4628      	mov	r0, r5
 80072fe:	eba4 040e 	sub.w	r4, r4, lr
 8007302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8007306:	e79e      	b.n	8007246 <__udivmoddi4+0x9e>
 8007308:	f1c1 0720 	rsb	r7, r1, #32
 800730c:	408b      	lsls	r3, r1
 800730e:	fa22 fc07 	lsr.w	ip, r2, r7
 8007312:	ea4c 0c03 	orr.w	ip, ip, r3
 8007316:	fa25 fa07 	lsr.w	sl, r5, r7
 800731a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800731e:	fbba f8f9 	udiv	r8, sl, r9
 8007322:	fa20 f307 	lsr.w	r3, r0, r7
 8007326:	fb09 aa18 	mls	sl, r9, r8, sl
 800732a:	408d      	lsls	r5, r1
 800732c:	fa1f fe8c 	uxth.w	lr, ip
 8007330:	431d      	orrs	r5, r3
 8007332:	fa00 f301 	lsl.w	r3, r0, r1
 8007336:	fb08 f00e 	mul.w	r0, r8, lr
 800733a:	0c2c      	lsrs	r4, r5, #16
 800733c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007340:	42a0      	cmp	r0, r4
 8007342:	fa02 f201 	lsl.w	r2, r2, r1
 8007346:	d90b      	bls.n	8007360 <__udivmoddi4+0x1b8>
 8007348:	eb1c 0404 	adds.w	r4, ip, r4
 800734c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8007350:	f080 8088 	bcs.w	8007464 <__udivmoddi4+0x2bc>
 8007354:	42a0      	cmp	r0, r4
 8007356:	f240 8085 	bls.w	8007464 <__udivmoddi4+0x2bc>
 800735a:	f1a8 0802 	sub.w	r8, r8, #2
 800735e:	4464      	add	r4, ip
 8007360:	1a24      	subs	r4, r4, r0
 8007362:	fbb4 f0f9 	udiv	r0, r4, r9
 8007366:	fb09 4410 	mls	r4, r9, r0, r4
 800736a:	fb00 fe0e 	mul.w	lr, r0, lr
 800736e:	b2ad      	uxth	r5, r5
 8007370:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8007374:	45a6      	cmp	lr, r4
 8007376:	d908      	bls.n	800738a <__udivmoddi4+0x1e2>
 8007378:	eb1c 0404 	adds.w	r4, ip, r4
 800737c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8007380:	d26c      	bcs.n	800745c <__udivmoddi4+0x2b4>
 8007382:	45a6      	cmp	lr, r4
 8007384:	d96a      	bls.n	800745c <__udivmoddi4+0x2b4>
 8007386:	3802      	subs	r0, #2
 8007388:	4464      	add	r4, ip
 800738a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800738e:	fba0 9502 	umull	r9, r5, r0, r2
 8007392:	eba4 040e 	sub.w	r4, r4, lr
 8007396:	42ac      	cmp	r4, r5
 8007398:	46c8      	mov	r8, r9
 800739a:	46ae      	mov	lr, r5
 800739c:	d356      	bcc.n	800744c <__udivmoddi4+0x2a4>
 800739e:	d053      	beq.n	8007448 <__udivmoddi4+0x2a0>
 80073a0:	2e00      	cmp	r6, #0
 80073a2:	d069      	beq.n	8007478 <__udivmoddi4+0x2d0>
 80073a4:	ebb3 0208 	subs.w	r2, r3, r8
 80073a8:	eb64 040e 	sbc.w	r4, r4, lr
 80073ac:	fa22 f301 	lsr.w	r3, r2, r1
 80073b0:	fa04 f707 	lsl.w	r7, r4, r7
 80073b4:	431f      	orrs	r7, r3
 80073b6:	40cc      	lsrs	r4, r1
 80073b8:	e9c6 7400 	strd	r7, r4, [r6]
 80073bc:	2100      	movs	r1, #0
 80073be:	e747      	b.n	8007250 <__udivmoddi4+0xa8>
 80073c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80073c4:	f1c2 0120 	rsb	r1, r2, #32
 80073c8:	fa25 f301 	lsr.w	r3, r5, r1
 80073cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80073d0:	fa20 f101 	lsr.w	r1, r0, r1
 80073d4:	4095      	lsls	r5, r2
 80073d6:	430d      	orrs	r5, r1
 80073d8:	fbb3 f1f7 	udiv	r1, r3, r7
 80073dc:	fb07 3311 	mls	r3, r7, r1, r3
 80073e0:	fa1f fe8c 	uxth.w	lr, ip
 80073e4:	0c28      	lsrs	r0, r5, #16
 80073e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80073ea:	fb01 f30e 	mul.w	r3, r1, lr
 80073ee:	4283      	cmp	r3, r0
 80073f0:	fa04 f402 	lsl.w	r4, r4, r2
 80073f4:	d908      	bls.n	8007408 <__udivmoddi4+0x260>
 80073f6:	eb1c 0000 	adds.w	r0, ip, r0
 80073fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80073fe:	d22f      	bcs.n	8007460 <__udivmoddi4+0x2b8>
 8007400:	4283      	cmp	r3, r0
 8007402:	d92d      	bls.n	8007460 <__udivmoddi4+0x2b8>
 8007404:	3902      	subs	r1, #2
 8007406:	4460      	add	r0, ip
 8007408:	1ac0      	subs	r0, r0, r3
 800740a:	fbb0 f3f7 	udiv	r3, r0, r7
 800740e:	fb07 0013 	mls	r0, r7, r3, r0
 8007412:	b2ad      	uxth	r5, r5
 8007414:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8007418:	fb03 f00e 	mul.w	r0, r3, lr
 800741c:	42a8      	cmp	r0, r5
 800741e:	d908      	bls.n	8007432 <__udivmoddi4+0x28a>
 8007420:	eb1c 0505 	adds.w	r5, ip, r5
 8007424:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007428:	d216      	bcs.n	8007458 <__udivmoddi4+0x2b0>
 800742a:	42a8      	cmp	r0, r5
 800742c:	d914      	bls.n	8007458 <__udivmoddi4+0x2b0>
 800742e:	3b02      	subs	r3, #2
 8007430:	4465      	add	r5, ip
 8007432:	1a28      	subs	r0, r5, r0
 8007434:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8007438:	e738      	b.n	80072ac <__udivmoddi4+0x104>
 800743a:	4631      	mov	r1, r6
 800743c:	4630      	mov	r0, r6
 800743e:	e707      	b.n	8007250 <__udivmoddi4+0xa8>
 8007440:	462f      	mov	r7, r5
 8007442:	e6e4      	b.n	800720e <__udivmoddi4+0x66>
 8007444:	4618      	mov	r0, r3
 8007446:	e6f9      	b.n	800723c <__udivmoddi4+0x94>
 8007448:	454b      	cmp	r3, r9
 800744a:	d2a9      	bcs.n	80073a0 <__udivmoddi4+0x1f8>
 800744c:	ebb9 0802 	subs.w	r8, r9, r2
 8007450:	eb65 0e0c 	sbc.w	lr, r5, ip
 8007454:	3801      	subs	r0, #1
 8007456:	e7a3      	b.n	80073a0 <__udivmoddi4+0x1f8>
 8007458:	4643      	mov	r3, r8
 800745a:	e7ea      	b.n	8007432 <__udivmoddi4+0x28a>
 800745c:	4628      	mov	r0, r5
 800745e:	e794      	b.n	800738a <__udivmoddi4+0x1e2>
 8007460:	4641      	mov	r1, r8
 8007462:	e7d1      	b.n	8007408 <__udivmoddi4+0x260>
 8007464:	46d0      	mov	r8, sl
 8007466:	e77b      	b.n	8007360 <__udivmoddi4+0x1b8>
 8007468:	4464      	add	r4, ip
 800746a:	3802      	subs	r0, #2
 800746c:	e747      	b.n	80072fe <__udivmoddi4+0x156>
 800746e:	3b02      	subs	r3, #2
 8007470:	4465      	add	r5, ip
 8007472:	e72f      	b.n	80072d4 <__udivmoddi4+0x12c>
 8007474:	4608      	mov	r0, r1
 8007476:	e706      	b.n	8007286 <__udivmoddi4+0xde>
 8007478:	4631      	mov	r1, r6
 800747a:	e6e9      	b.n	8007250 <__udivmoddi4+0xa8>

0800747c <__aeabi_idiv0>:
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop

08007480 <Reset_Handler>:
 8007480:	480c      	ldr	r0, [pc, #48]	; (80074b4 <Zerobss+0x10>)
 8007482:	4685      	mov	sp, r0
 8007484:	2100      	movs	r1, #0
 8007486:	e003      	b.n	8007490 <DataInit>

08007488 <CopyData>:
 8007488:	4b0b      	ldr	r3, [pc, #44]	; (80074b8 <Zerobss+0x14>)
 800748a:	585b      	ldr	r3, [r3, r1]
 800748c:	5043      	str	r3, [r0, r1]
 800748e:	3104      	adds	r1, #4

08007490 <DataInit>:
 8007490:	480a      	ldr	r0, [pc, #40]	; (80074bc <Zerobss+0x18>)
 8007492:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <Zerobss+0x1c>)
 8007494:	1842      	adds	r2, r0, r1
 8007496:	429a      	cmp	r2, r3
 8007498:	d3f6      	bcc.n	8007488 <CopyData>
 800749a:	4a0a      	ldr	r2, [pc, #40]	; (80074c4 <Zerobss+0x20>)
 800749c:	e002      	b.n	80074a4 <Zerobss>

0800749e <FillZerobss>:
 800749e:	2300      	movs	r3, #0
 80074a0:	f842 3b04 	str.w	r3, [r2], #4

080074a4 <Zerobss>:
 80074a4:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <Zerobss+0x24>)
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d3f9      	bcc.n	800749e <FillZerobss>
 80074aa:	f00b ff91 	bl	80133d0 <SystemInit>
 80074ae:	f000 f953 	bl	8007758 <main>
 80074b2:	4770      	bx	lr
 80074b4:	20018000 	andcs	r8, r1, r0
 80074b8:	08017250 	stmdaeq	r1, {r4, r6, r9, ip, sp, lr}
 80074bc:	20000000 	andcs	r0, r0, r0
 80074c0:	200000f8 	strdcs	r0, [r0], -r8
 80074c4:	200000f8 	strdcs	r0, [r0], -r8
 80074c8:	2000df84 	andcs	sp, r0, r4, lsl #31

080074cc <ADC0_1_IRQHandler>:
 80074cc:	e7fe      	b.n	80074cc <ADC0_1_IRQHandler>

080074ce <memcmp>:
 80074ce:	b510      	push	{r4, lr}
 80074d0:	3901      	subs	r1, #1
 80074d2:	4402      	add	r2, r0
 80074d4:	4290      	cmp	r0, r2
 80074d6:	d008      	beq.n	80074ea <memcmp+0x1c>
 80074d8:	7803      	ldrb	r3, [r0, #0]
 80074da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80074de:	42a3      	cmp	r3, r4
 80074e0:	d001      	beq.n	80074e6 <memcmp+0x18>
 80074e2:	1b18      	subs	r0, r3, r4
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	3001      	adds	r0, #1
 80074e8:	e7f4      	b.n	80074d4 <memcmp+0x6>
 80074ea:	2000      	movs	r0, #0
 80074ec:	e7fa      	b.n	80074e4 <memcmp+0x16>

080074ee <DisplayHandler::~DisplayHandler()>:
 80074ee:	4770      	bx	lr

080074f0 <DisplayUdfHandler::~DisplayUdfHandler()>:
 80074f0:	4770      	bx	lr

080074f2 <DisplayUdfHandler::ShowLongName(char const*)>:
 80074f2:	4770      	bx	lr

080074f4 <ArtNetReboot::~ArtNetReboot()>:
 80074f4:	4770      	bx	lr

080074f6 <dmxconfigudp::atoi(char const*, unsigned char)>:
 80074f6:	b530      	push	{r4, r5, lr}
 80074f8:	1e42      	subs	r2, r0, #1
 80074fa:	240a      	movs	r4, #10
 80074fc:	2000      	movs	r0, #0
 80074fe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007502:	3b30      	subs	r3, #48	; 0x30
 8007504:	b2dd      	uxtb	r5, r3
 8007506:	2d09      	cmp	r5, #9
 8007508:	d805      	bhi.n	8007516 <dmxconfigudp::atoi(char const*, unsigned char)+0x20>
 800750a:	3901      	subs	r1, #1
 800750c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8007510:	fb04 3000 	mla	r0, r4, r0, r3
 8007514:	d1f3      	bne.n	80074fe <dmxconfigudp::atoi(char const*, unsigned char)+0x8>
 8007516:	bd30      	pop	{r4, r5, pc}

08007518 <ArtNetReboot::Run()>:
 8007518:	b510      	push	{r4, lr}
 800751a:	4c07      	ldr	r4, [pc, #28]	; (8007538 <ArtNetReboot::Run()+0x20>)
 800751c:	6820      	ldr	r0, [r4, #0]
 800751e:	f000 fdb9 	bl	8008094 <ArtNetNode::Stop()>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	6898      	ldr	r0, [r3, #8]
 8007526:	b128      	cbz	r0, 8007534 <ArtNetReboot::Run()+0x1c>
 8007528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800752c:	6803      	ldr	r3, [r0, #0]
 800752e:	2101      	movs	r1, #1
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	4718      	bx	r3
 8007534:	bd10      	pop	{r4, pc}
 8007536:	bf00      	nop
 8007538:	20001910 	andcs	r1, r0, r0, lsl r9

0800753c <ArtNetReboot::~ArtNetReboot()>:
 800753c:	b510      	push	{r4, lr}
 800753e:	4604      	mov	r4, r0
 8007540:	f00b faa2 	bl	8012a88 <operator delete(void*)>
 8007544:	4620      	mov	r0, r4
 8007546:	bd10      	pop	{r4, pc}

08007548 <DisplayHandler::~DisplayHandler()>:
 8007548:	b510      	push	{r4, lr}
 800754a:	4604      	mov	r4, r0
 800754c:	f00b fa9c 	bl	8012a88 <operator delete(void*)>
 8007550:	4620      	mov	r0, r4
 8007552:	bd10      	pop	{r4, pc}

08007554 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8007554:	b510      	push	{r4, lr}
 8007556:	4604      	mov	r4, r0
 8007558:	f00b fa96 	bl	8012a88 <operator delete(void*)>
 800755c:	4620      	mov	r0, r4
 800755e:	bd10      	pop	{r4, pc}

08007560 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 8007560:	4b02      	ldr	r3, [pc, #8]	; (800756c <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 8007562:	6819      	ldr	r1, [r3, #0]
 8007564:	4b02      	ldr	r3, [pc, #8]	; (8007570 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	f00a baa6 	b.w	8011ab8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 800756c:	20001910 	andcs	r1, r0, r0, lsl r9
 8007570:	2000adfc 	strdcs	sl, [r0], -ip

08007574 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 8007574:	4b02      	ldr	r3, [pc, #8]	; (8007580 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 8007576:	6819      	ldr	r1, [r3, #0]
 8007578:	4b02      	ldr	r3, [pc, #8]	; (8007584 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	f00a ba9c 	b.w	8011ab8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007580:	20001910 	andcs	r1, r0, r0, lsl r9
 8007584:	2000adfc 	strdcs	sl, [r0], -ip

08007588 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 8007588:	4b02      	ldr	r3, [pc, #8]	; (8007594 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 800758a:	6819      	ldr	r1, [r3, #0]
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	f00a ba92 	b.w	8011ab8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007594:	20001910 	andcs	r1, r0, r0, lsl r9
 8007598:	2000adfc 	strdcs	sl, [r0], -ip

0800759c <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 800759c:	4b02      	ldr	r3, [pc, #8]	; (80075a8 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 800759e:	6819      	ldr	r1, [r3, #0]
 80075a0:	4b02      	ldr	r3, [pc, #8]	; (80075ac <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	f00a ba88 	b.w	8011ab8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80075a8:	20001910 	andcs	r1, r0, r0, lsl r9
 80075ac:	2000adfc 	strdcs	sl, [r0], -ip

080075b0 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 80075b0:	4b02      	ldr	r3, [pc, #8]	; (80075bc <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	4b02      	ldr	r3, [pc, #8]	; (80075c0 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	f00a ba7e 	b.w	8011ab8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 80075bc:	20001910 	andcs	r1, r0, r0, lsl r9
 80075c0:	2000adfc 	strdcs	sl, [r0], -ip

080075c4 <DisplayUdfHandler::ShowShortName(char const*)>:
 80075c4:	4b02      	ldr	r3, [pc, #8]	; (80075d0 <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 80075c6:	6819      	ldr	r1, [r3, #0]
 80075c8:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	f00a ba51 	b.w	8011a72 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 80075d0:	20001910 	andcs	r1, r0, r0, lsl r9
 80075d4:	2000adfc 	strdcs	sl, [r0], -ip

080075d8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 80075d8:	b110      	cbz	r0, 80075e0 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 80075da:	6803      	ldr	r3, [r0, #0]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	4718      	bx	r3
 80075e0:	4770      	bx	lr

080075e2 <Display::PutChar(int) [clone .isra.0]>:
 80075e2:	b110      	cbz	r0, 80075ea <Display::PutChar(int) [clone .isra.0]+0x8>
 80075e4:	6803      	ldr	r3, [r0, #0]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	4718      	bx	r3
 80075ea:	4770      	bx	lr

080075ec <DisplayHandler::Print(unsigned int)>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	7903      	ldrb	r3, [r0, #4]
 80075f0:	b1f3      	cbz	r3, 8007630 <DisplayHandler::Print(unsigned int)+0x44>
 80075f2:	2904      	cmp	r1, #4
 80075f4:	bf98      	it	ls
 80075f6:	4b0f      	ldrls	r3, [pc, #60]	; (8007634 <DisplayHandler::Print(unsigned int)+0x48>)
 80075f8:	4d0f      	ldr	r5, [pc, #60]	; (8007638 <DisplayHandler::Print(unsigned int)+0x4c>)
 80075fa:	bf98      	it	ls
 80075fc:	5c5c      	ldrbls	r4, [r3, r1]
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	bf88      	it	hi
 8007602:	2455      	movhi	r4, #85	; 0x55
 8007604:	6998      	ldr	r0, [r3, #24]
 8007606:	b178      	cbz	r0, 8007628 <DisplayHandler::Print(unsigned int)+0x3c>
 8007608:	7901      	ldrb	r1, [r0, #4]
 800760a:	3901      	subs	r1, #1
 800760c:	b2c9      	uxtb	r1, r1
 800760e:	b168      	cbz	r0, 800762c <DisplayHandler::Print(unsigned int)+0x40>
 8007610:	7942      	ldrb	r2, [r0, #5]
 8007612:	3a01      	subs	r2, #1
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	f7ff ffdf 	bl	80075d8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800761a:	682b      	ldr	r3, [r5, #0]
 800761c:	4621      	mov	r1, r4
 800761e:	6998      	ldr	r0, [r3, #24]
 8007620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007624:	f7ff bfdd 	b.w	80075e2 <Display::PutChar(int) [clone .isra.0]>
 8007628:	4601      	mov	r1, r0
 800762a:	e7ee      	b.n	800760a <DisplayHandler::Print(unsigned int)+0x1e>
 800762c:	4602      	mov	r2, r0
 800762e:	e7f0      	b.n	8007612 <DisplayHandler::Print(unsigned int)+0x26>
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	080150d0 	stmdaeq	r1, {r4, r6, r7, ip, lr}
 8007638:	2000ae04 	andcs	sl, r0, r4, lsl #28

0800763c <Display::TextStatus(char const*)>:
 800763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007640:	4604      	mov	r4, r0
 8007642:	6980      	ldr	r0, [r0, #24]
 8007644:	460d      	mov	r5, r1
 8007646:	b360      	cbz	r0, 80076a2 <Display::TextStatus(char const*)+0x66>
 8007648:	7947      	ldrb	r7, [r0, #5]
 800764a:	2100      	movs	r1, #0
 800764c:	1e7e      	subs	r6, r7, #1
 800764e:	b2f6      	uxtb	r6, r6
 8007650:	4632      	mov	r2, r6
 8007652:	f890 9004 	ldrb.w	r9, [r0, #4]
 8007656:	f04f 0800 	mov.w	r8, #0
 800765a:	f7ff ffbd 	bl	80075d8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800765e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007662:	45c1      	cmp	r9, r8
 8007664:	69a0      	ldr	r0, [r4, #24]
 8007666:	d905      	bls.n	8007674 <Display::TextStatus(char const*)+0x38>
 8007668:	2120      	movs	r1, #32
 800766a:	f7ff ffba 	bl	80075e2 <Display::PutChar(int) [clone .isra.0]>
 800766e:	f108 0801 	add.w	r8, r8, #1
 8007672:	e7f6      	b.n	8007662 <Display::TextStatus(char const*)+0x26>
 8007674:	4632      	mov	r2, r6
 8007676:	2100      	movs	r1, #0
 8007678:	f7ff ffae 	bl	80075d8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 800767c:	69a0      	ldr	r0, [r4, #24]
 800767e:	b180      	cbz	r0, 80076a2 <Display::TextStatus(char const*)+0x66>
 8007680:	2300      	movs	r3, #0
 8007682:	7901      	ldrb	r1, [r0, #4]
 8007684:	5cea      	ldrb	r2, [r5, r3]
 8007686:	b11a      	cbz	r2, 8007690 <Display::TextStatus(char const*)+0x54>
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	4299      	cmp	r1, r3
 800768c:	4613      	mov	r3, r2
 800768e:	dcf9      	bgt.n	8007684 <Display::TextStatus(char const*)+0x48>
 8007690:	6802      	ldr	r2, [r0, #0]
 8007692:	4639      	mov	r1, r7
 8007694:	69d4      	ldr	r4, [r2, #28]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	462a      	mov	r2, r5
 800769a:	46a4      	mov	ip, r4
 800769c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a0:	4760      	bx	ip
 80076a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080076a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 80076a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076a8:	4605      	mov	r5, r0
 80076aa:	461e      	mov	r6, r3
 80076ac:	460f      	mov	r7, r1
 80076ae:	4614      	mov	r4, r2
 80076b0:	f7ff ffc4 	bl	800763c <Display::TextStatus(char const*)>
 80076b4:	7c6b      	ldrb	r3, [r5, #17]
 80076b6:	b19b      	cbz	r3, 80076e0 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 80076b8:	43e2      	mvns	r2, r4
 80076ba:	2312      	movs	r3, #18
 80076bc:	7a28      	ldrb	r0, [r5, #8]
 80076be:	f88d 3004 	strb.w	r3, [sp, #4]
 80076c2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80076c6:	f88d 3005 	strb.w	r3, [sp, #5]
 80076ca:	f88d 2006 	strb.w	r2, [sp, #6]
 80076ce:	f00c fcfd 	bl	80140cc <gd32_i2c_set_address(unsigned char)>
 80076d2:	68e8      	ldr	r0, [r5, #12]
 80076d4:	f00c fcf2 	bl	80140bc <gd32_i2c_set_baudrate(unsigned int)>
 80076d8:	2103      	movs	r1, #3
 80076da:	a801      	add	r0, sp, #4
 80076dc:	f00c fcfc 	bl	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 80076e0:	1c73      	adds	r3, r6, #1
 80076e2:	d006      	beq.n	80076f2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 80076e4:	4639      	mov	r1, r7
 80076e6:	4630      	mov	r0, r6
 80076e8:	b003      	add	sp, #12
 80076ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80076ee:	f00b b87d 	b.w	80127ec <console_status>
 80076f2:	b003      	add	sp, #12
 80076f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076f6 <RDMDevice::Init()>:
 80076f6:	b538      	push	{r3, r4, r5, lr}
 80076f8:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
 80076fc:	2301      	movs	r3, #1
 80076fe:	2a20      	cmp	r2, #32
 8007700:	bf28      	it	cs
 8007702:	2220      	movcs	r2, #32
 8007704:	4604      	mov	r4, r0
 8007706:	4611      	mov	r1, r2
 8007708:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
 800770c:	f100 050a 	add.w	r5, r0, #10
 8007710:	f100 0353 	add.w	r3, r0, #83	; 0x53
 8007714:	3901      	subs	r1, #1
 8007716:	d304      	bcc.n	8007722 <RDMDevice::Init()+0x2c>
 8007718:	f813 0b01 	ldrb.w	r0, [r3], #1
 800771c:	f803 0c4a 	strb.w	r0, [r3, #-74]
 8007720:	e7f8      	b.n	8007714 <RDMDevice::Init()+0x1e>
 8007722:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007724:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
 8007728:	b118      	cbz	r0, 8007732 <RDMDevice::Init()+0x3c>
 800772a:	6803      	ldr	r3, [r0, #0]
 800772c:	4629      	mov	r1, r5
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	4798      	blx	r3
 8007732:	4629      	mov	r1, r5
 8007734:	f06f 0509 	mvn.w	r5, #9
 8007738:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
 800773c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8007740:	1b2d      	subs	r5, r5, r4
 8007742:	186a      	adds	r2, r5, r1
 8007744:	4290      	cmp	r0, r2
 8007746:	d904      	bls.n	8007752 <RDMDevice::Init()+0x5c>
 8007748:	f811 2b01 	ldrb.w	r2, [r1], #1
 800774c:	4413      	add	r3, r2
 800774e:	b29b      	uxth	r3, r3
 8007750:	e7f7      	b.n	8007742 <RDMDevice::Init()+0x4c>
 8007752:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
 8007756:	bd38      	pop	{r3, r4, r5, pc}

08007758 <main>:
 8007758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800775c:	2501      	movs	r5, #1
 800775e:	f5ad 5db4 	sub.w	sp, sp, #5760	; 0x1680
 8007762:	b081      	sub	sp, #4
 8007764:	a80e      	add	r0, sp, #56	; 0x38
 8007766:	f00b f8e3 	bl	8012930 <Hardware::Hardware()>
 800776a:	a871      	add	r0, sp, #452	; 0x1c4
 800776c:	f008 fba0 	bl	800feb0 <Network::Network()>
 8007770:	a818      	add	r0, sp, #96	; 0x60
 8007772:	f00b f899 	bl	80128a8 <LedBlink::LedBlink()>
 8007776:	a838      	add	r0, sp, #224	; 0xe0
 8007778:	f009 fe56 	bl	8011428 <DisplayUdf::DisplayUdf()>
 800777c:	4ab9      	ldr	r2, [pc, #740]	; (8007a64 <main+0x30c>)
 800777e:	4bba      	ldr	r3, [pc, #744]	; (8007a68 <main+0x310>)
 8007780:	49ba      	ldr	r1, [pc, #744]	; (8007a6c <main+0x314>)
 8007782:	a803      	add	r0, sp, #12
 8007784:	f00b f84a 	bl	801281c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8007788:	a804      	add	r0, sp, #16
 800778a:	f006 ff6b 	bl	800e664 <FlashRom::FlashRom()>
 800778e:	f8df 82e0 	ldr.w	r8, [pc, #736]	; 8007a70 <main+0x318>
 8007792:	a805      	add	r0, sp, #20
 8007794:	f006 fbac 	bl	800def0 <SpiFlashStore::SpiFlashStore()>
 8007798:	49b6      	ldr	r1, [pc, #728]	; (8007a74 <main+0x31c>)
 800779a:	a803      	add	r0, sp, #12
 800779c:	f00b f876 	bl	801288c <FirmwareVersion::Print(char const*)>
 80077a0:	2004      	movs	r0, #4
 80077a2:	f8c8 5010 	str.w	r5, [r8, #16]
 80077a6:	f00b f973 	bl	8012a90 <operator new(unsigned int)>
 80077aa:	4bb3      	ldr	r3, [pc, #716]	; (8007a78 <main+0x320>)
 80077ac:	2400      	movs	r4, #0
 80077ae:	6003      	str	r3, [r0, #0]
 80077b0:	900e      	str	r0, [sp, #56]	; 0x38
 80077b2:	2008      	movs	r0, #8
 80077b4:	ab0e      	add	r3, sp, #56	; 0x38
 80077b6:	f00b f96b 	bl	8012a90 <operator new(unsigned int)>
 80077ba:	4bb0      	ldr	r3, [pc, #704]	; (8007a7c <main+0x324>)
 80077bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80077c0:	6003      	str	r3, [r0, #0]
 80077c2:	4baf      	ldr	r3, [pc, #700]	; (8007a80 <main+0x328>)
 80077c4:	49af      	ldr	r1, [pc, #700]	; (8007a84 <main+0x32c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	901a      	str	r0, [sp, #104]	; 0x68
 80077ca:	3b00      	subs	r3, #0
 80077cc:	bf18      	it	ne
 80077ce:	2301      	movne	r3, #1
 80077d0:	7103      	strb	r3, [r0, #4]
 80077d2:	2303      	movs	r3, #3
 80077d4:	a838      	add	r0, sp, #224	; 0xe0
 80077d6:	f7ff ff66 	bl	80076a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80077da:	a810      	add	r0, sp, #64	; 0x40
 80077dc:	f006 fea4 	bl	800e528 <StoreNetwork::StoreNetwork()>
 80077e0:	ab71      	add	r3, sp, #452	; 0x1c4
 80077e2:	4618      	mov	r0, r3
 80077e4:	aa11      	add	r2, sp, #68	; 0x44
 80077e6:	a910      	add	r1, sp, #64	; 0x40
 80077e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80077ec:	f008 fbb8 	bl	800ff60 <Network::Init(NetworkParamsStore*)>
 80077f0:	a871      	add	r0, sp, #452	; 0x1c4
 80077f2:	f008 fd8b 	bl	801030c <Network::Print()>
 80077f6:	a806      	add	r0, sp, #24
 80077f8:	f007 ff94 	bl	800f724 <MDNS::MDNS()>
 80077fc:	a806      	add	r0, sp, #24
 80077fe:	f008 f855 	bl	800f8ac <MDNS::Start()>
 8007802:	f642 1305 	movw	r3, #10501	; 0x2905
 8007806:	4621      	mov	r1, r4
 8007808:	4a9f      	ldr	r2, [pc, #636]	; (8007a88 <main+0x330>)
 800780a:	e9cd 4400 	strd	r4, r4, [sp]
 800780e:	a806      	add	r0, sp, #24
 8007810:	f008 f9b8 	bl	800fb84 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8007814:	4b9d      	ldr	r3, [pc, #628]	; (8007a8c <main+0x334>)
 8007816:	4621      	mov	r1, r4
 8007818:	4a9d      	ldr	r2, [pc, #628]	; (8007a90 <main+0x338>)
 800781a:	e9cd 5300 	strd	r5, r3, [sp]
 800781e:	a806      	add	r0, sp, #24
 8007820:	2350      	movs	r3, #80	; 0x50
 8007822:	f008 f9af 	bl	800fb84 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8007826:	a806      	add	r0, sp, #24
 8007828:	f008 faf2 	bl	800fe10 <MDNS::Print()>
 800782c:	2303      	movs	r3, #3
 800782e:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 8007832:	4998      	ldr	r1, [pc, #608]	; (8007a94 <main+0x33c>)
 8007834:	a838      	add	r0, sp, #224	; 0xe0
 8007836:	f7ff ff36 	bl	80076a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800783a:	a812      	add	r0, sp, #72	; 0x48
 800783c:	f006 fd5c 	bl	800e2f8 <StoreArtNet::StoreArtNet()>
 8007840:	a912      	add	r1, sp, #72	; 0x48
 8007842:	a84e      	add	r0, sp, #312	; 0x138
 8007844:	f002 f93a 	bl	8009abc <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8007848:	4629      	mov	r1, r5
 800784a:	f60d 0078 	addw	r0, sp, #2168	; 0x878
 800784e:	f000 fb55 	bl	8007efc <ArtNet4Node::ArtNet4Node(unsigned char)>
 8007852:	a84e      	add	r0, sp, #312	; 0x138
 8007854:	f002 f956 	bl	8009b04 <ArtNetParams::Load()>
 8007858:	b138      	cbz	r0, 800786a <main+0x112>
 800785a:	a84e      	add	r0, sp, #312	; 0x138
 800785c:	f60d 017c 	addw	r1, sp, #2172	; 0x87c
 8007860:	f002 fd07 	bl	800a272 <ArtNetParams::Set(ArtNetNode*)>
 8007864:	a84e      	add	r0, sp, #312	; 0x138
 8007866:	f002 fd86 	bl	800a376 <ArtNetParams::Dump()>
 800786a:	4a8b      	ldr	r2, [pc, #556]	; (8007a98 <main+0x340>)
 800786c:	ab07      	add	r3, sp, #28
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	ab07      	add	r3, sp, #28
 8007872:	f8cd 38a0 	str.w	r3, [sp, #2208]	; 0x8a0
 8007876:	ab13      	add	r3, sp, #76	; 0x4c
 8007878:	f8cd 389c 	str.w	r3, [sp, #2204]	; 0x89c
 800787c:	f89d 21b2 	ldrb.w	r2, [sp, #434]	; 0x1b2
 8007880:	ab4e      	add	r3, sp, #312	; 0x138
 8007882:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8007886:	f002 0201 	and.w	r2, r2, #1
 800788a:	2100      	movs	r1, #0
 800788c:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
 8007890:	f000 fed1 	bl	8008636 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8007894:	a808      	add	r0, sp, #32
 8007896:	f006 fd9b 	bl	800e3d0 <StoreDmxSend::StoreDmxSend()>
 800789a:	a908      	add	r1, sp, #32
 800789c:	a814      	add	r0, sp, #80	; 0x50
 800789e:	f004 fa69 	bl	800bd74 <DmxParams::DmxParams(DmxParamsStore*)>
 80078a2:	a81e      	add	r0, sp, #120	; 0x78
 80078a4:	f004 fea6 	bl	800c5f4 <Dmx::Dmx()>
 80078a8:	a814      	add	r0, sp, #80	; 0x50
 80078aa:	f004 fa6f 	bl	800bd8c <DmxParams::Load()>
 80078ae:	b130      	cbz	r0, 80078be <main+0x166>
 80078b0:	a814      	add	r0, sp, #80	; 0x50
 80078b2:	f004 fbb7 	bl	800c024 <DmxParams::Dump()>
 80078b6:	a91e      	add	r1, sp, #120	; 0x78
 80078b8:	a814      	add	r0, sp, #80	; 0x50
 80078ba:	f004 fb89 	bl	800bfd0 <DmxParams::Set(Dmx*)>
 80078be:	4a77      	ldr	r2, [pc, #476]	; (8007a9c <main+0x344>)
 80078c0:	ac09      	add	r4, sp, #36	; 0x24
 80078c2:	4620      	mov	r0, r4
 80078c4:	9209      	str	r2, [sp, #36]	; 0x24
 80078c6:	ab09      	add	r3, sp, #36	; 0x24
 80078c8:	f004 f9fa 	bl	800bcc0 <DmxSend::Print()>
 80078cc:	f89d 5f5a 	ldrb.w	r5, [sp, #3930]	; 0xf5a
 80078d0:	b16d      	cbz	r5, 80078ee <main+0x196>
 80078d2:	2001      	movs	r0, #1
 80078d4:	f8cd 4884 	str.w	r4, [sp, #2180]	; 0x884
 80078d8:	f00b f8da 	bl	8012a90 <operator new(unsigned int)>
 80078dc:	4b70      	ldr	r3, [pc, #448]	; (8007aa0 <main+0x348>)
 80078de:	4605      	mov	r5, r0
 80078e0:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	f008 fb13 	bl	800ff10 <Network::Begin(unsigned short)>
 80078ea:	4b6e      	ldr	r3, [pc, #440]	; (8007aa4 <main+0x34c>)
 80078ec:	6018      	str	r0, [r3, #0]
 80078ee:	ac0a      	add	r4, sp, #40	; 0x28
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fa29 	bl	8007d48 <DmxInput::DmxInput()>
 80078f6:	f89d 3f5b 	ldrb.w	r3, [sp, #3931]	; 0xf5b
 80078fa:	b10b      	cbz	r3, 8007900 <main+0x1a8>
 80078fc:	f8cd 4890 	str.w	r4, [sp, #2192]	; 0x890
 8007900:	f89d 3f5a 	ldrb.w	r3, [sp, #3930]	; 0xf5a
 8007904:	2b00      	cmp	r3, #0
 8007906:	d037      	beq.n	8007978 <main+0x220>
 8007908:	ab4e      	add	r3, sp, #312	; 0x138
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	0699      	lsls	r1, r3, #26
 800790e:	d533      	bpl.n	8007978 <main+0x220>
 8007910:	2090      	movs	r0, #144	; 0x90
 8007912:	f00b f8bd 	bl	8012a90 <operator new(unsigned int)>
 8007916:	2101      	movs	r1, #1
 8007918:	4604      	mov	r4, r0
 800791a:	f003 fdb1 	bl	800b480 <ArtNetRdmController::ArtNetRdmController(unsigned int)>
 800791e:	2008      	movs	r0, #8
 8007920:	f00b f8b6 	bl	8012a90 <operator new(unsigned int)>
 8007924:	4606      	mov	r6, r0
 8007926:	f006 fe5d 	bl	800e5e4 <StoreRDMDevice::StoreRDMDevice()>
 800792a:	4631      	mov	r1, r6
 800792c:	a8a3      	add	r0, sp, #652	; 0x28c
 800792e:	f004 f8e9 	bl	800bb04 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8007932:	a8a3      	add	r0, sp, #652	; 0x28c
 8007934:	f004 f8f8 	bl	800bb28 <RDMDeviceParams::Load()>
 8007938:	1d26      	adds	r6, r4, #4
 800793a:	b130      	cbz	r0, 800794a <main+0x1f2>
 800793c:	a8a3      	add	r0, sp, #652	; 0x28c
 800793e:	4631      	mov	r1, r6
 8007940:	f004 f8fd 	bl	800bb3e <RDMDeviceParams::Set(RDMDevice*)>
 8007944:	a8a3      	add	r0, sp, #652	; 0x28c
 8007946:	f004 f92f 	bl	800bba8 <RDMDeviceParams::Dump()>
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff fed3 	bl	80076f6 <RDMDevice::Init()>
 8007950:	4630      	mov	r0, r6
 8007952:	f004 f863 	bl	800ba1c <RDMDevice::Print()>
 8007956:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
 800795a:	4953      	ldr	r1, [pc, #332]	; (8007aa8 <main+0x350>)
 800795c:	2303      	movs	r3, #3
 800795e:	a838      	add	r0, sp, #224	; 0xe0
 8007960:	f7ff fea1 	bl	80076a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007964:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8007968:	f003 ff86 	bl	800b878 <RDMDiscovery::Full()>
 800796c:	2200      	movs	r2, #0
 800796e:	4621      	mov	r1, r4
 8007970:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
 8007974:	f001 fe63 	bl	800963e <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>
 8007978:	f60d 0078 	addw	r0, sp, #2168	; 0x878
 800797c:	f000 fb1c 	bl	8007fb8 <ArtNet4Node::Print()>
 8007980:	f89d 21b2 	ldrb.w	r2, [sp, #434]	; 0x1b2
 8007984:	ab4e      	add	r3, sp, #312	; 0x138
 8007986:	07d2      	lsls	r2, r2, #31
 8007988:	f140 8122 	bpl.w	8007bd0 <main+0x478>
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4a47      	ldr	r2, [pc, #284]	; (8007aac <main+0x354>)
 8007990:	f013 0f20 	tst.w	r3, #32
 8007994:	4b46      	ldr	r3, [pc, #280]	; (8007ab0 <main+0x358>)
 8007996:	bf08      	it	eq
 8007998:	461a      	moveq	r2, r3
 800799a:	4946      	ldr	r1, [pc, #280]	; (8007ab4 <main+0x35c>)
 800799c:	a838      	add	r0, sp, #224	; 0xe0
 800799e:	f009 fd59 	bl	8011454 <DisplayUdf::SetTitle(char const*, ...)>
 80079a2:	2206      	movs	r2, #6
 80079a4:	2102      	movs	r1, #2
 80079a6:	a838      	add	r0, sp, #224	; 0xe0
 80079a8:	f009 feaa 	bl	8011700 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80079ac:	2202      	movs	r2, #2
 80079ae:	2103      	movs	r1, #3
 80079b0:	a838      	add	r0, sp, #224	; 0xe0
 80079b2:	f009 fea5 	bl	8011700 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80079b6:	2203      	movs	r2, #3
 80079b8:	2104      	movs	r1, #4
 80079ba:	a838      	add	r0, sp, #224	; 0xe0
 80079bc:	f009 fea0 	bl	8011700 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80079c0:	2204      	movs	r2, #4
 80079c2:	2105      	movs	r1, #5
 80079c4:	a838      	add	r0, sp, #224	; 0xe0
 80079c6:	f009 fe9b 	bl	8011700 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80079ca:	2207      	movs	r2, #7
 80079cc:	2106      	movs	r1, #6
 80079ce:	a838      	add	r0, sp, #224	; 0xe0
 80079d0:	f009 fe96 	bl	8011700 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80079d4:	a80b      	add	r0, sp, #44	; 0x2c
 80079d6:	f006 fcc7 	bl	800e368 <StoreDisplayUdf::StoreDisplayUdf()>
 80079da:	a90b      	add	r1, sp, #44	; 0x2c
 80079dc:	a82e      	add	r0, sp, #184	; 0xb8
 80079de:	f009 fed1 	bl	8011784 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80079e2:	a82e      	add	r0, sp, #184	; 0xb8
 80079e4:	f009 fedb 	bl	801179e <DisplayUdfParams::Load()>
 80079e8:	b130      	cbz	r0, 80079f8 <main+0x2a0>
 80079ea:	a82e      	add	r0, sp, #184	; 0xb8
 80079ec:	a938      	add	r1, sp, #224	; 0xe0
 80079ee:	f00a f80c 	bl	8011a0a <DisplayUdfParams::Set(DisplayUdf*)>
 80079f2:	a82e      	add	r0, sp, #184	; 0xb8
 80079f4:	f00a f83c 	bl	8011a70 <DisplayUdfParams::Dump()>
 80079f8:	f60d 017c 	addw	r1, sp, #2172	; 0x87c
 80079fc:	a838      	add	r0, sp, #224	; 0xe0
 80079fe:	f00a f907 	bl	8011c10 <DisplayUdf::Show(ArtNetNode*)>
 8007a02:	ab4e      	add	r3, sp, #312	; 0x138
 8007a04:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8007a08:	aa4e      	add	r2, sp, #312	; 0x138
 8007a0a:	6852      	ldr	r2, [r2, #4]
 8007a0c:	07db      	lsls	r3, r3, #31
 8007a0e:	bf54      	ite	pl
 8007a10:	f89d 3f5b 	ldrbpl.w	r3, [sp, #3931]	; 0xf5b
 8007a14:	f89d 3f5a 	ldrbmi.w	r3, [sp, #3930]	; 0xf5a
 8007a18:	2100      	movs	r1, #0
 8007a1a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8007a1e:	a8a3      	add	r0, sp, #652	; 0x28c
 8007a20:	f005 f90c 	bl	800cc3c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8007a24:	a80c      	add	r0, sp, #48	; 0x30
 8007a26:	f006 fe13 	bl	800e650 <StoreRemoteConfig::StoreRemoteConfig()>
 8007a2a:	a90c      	add	r1, sp, #48	; 0x30
 8007a2c:	a825      	add	r0, sp, #148	; 0x94
 8007a2e:	f005 fbcd 	bl	800d1cc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8007a32:	a825      	add	r0, sp, #148	; 0x94
 8007a34:	f005 fbd4 	bl	800d1e0 <RemoteConfigParams::Load()>
 8007a38:	b130      	cbz	r0, 8007a48 <main+0x2f0>
 8007a3a:	a825      	add	r0, sp, #148	; 0x94
 8007a3c:	a9a3      	add	r1, sp, #652	; 0x28c
 8007a3e:	f005 fcf6 	bl	800d42e <RemoteConfigParams::Set(RemoteConfig*)>
 8007a42:	a825      	add	r0, sp, #148	; 0x94
 8007a44:	f005 fd13 	bl	800d46e <RemoteConfigParams::Dump()>
 8007a48:	a805      	add	r0, sp, #20
 8007a4a:	f006 fafd 	bl	800e048 <SpiFlashStore::Flash()>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d1fa      	bne.n	8007a48 <main+0x2f0>
 8007a52:	2303      	movs	r3, #3
 8007a54:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8007a58:	4917      	ldr	r1, [pc, #92]	; (8007ab8 <main+0x360>)
 8007a5a:	a838      	add	r0, sp, #224	; 0xe0
 8007a5c:	f7ff fe23 	bl	80076a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007a60:	e02c      	b.n	8007abc <main+0x364>
 8007a62:	bf00      	nop
 8007a64:	08014fdf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	08014fd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, r9, sl, fp, lr}
 8007a6c:	080150d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, ip, lr}
 8007a70:	40011000 	andmi	r1, r1, r0
 8007a74:	08014feb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	080150c4 	stmdaeq	r1, {r2, r6, r7, ip, lr}
 8007a7c:	08015084 	stmdaeq	r1, {r2, r7, ip, lr}
 8007a80:	2000ae04 	andcs	sl, r0, r4, lsl #28
 8007a84:	0801699b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, fp, sp, lr}
 8007a88:	08015024 	stmdaeq	r1, {r2, r5, ip, lr}
 8007a8c:	08015034 	stmdaeq	r1, {r2, r4, r5, ip, lr}
 8007a90:	0801502d 	stmdaeq	r1, {r0, r2, r3, r5, ip, lr}
 8007a94:	08015145 	stmdaeq	r1, {r0, r2, r6, r8, ip, lr}
 8007a98:	08015098 	stmdaeq	r1, {r3, r4, r7, ip, lr}
 8007a9c:	08015738 	stmdaeq	r1, {r3, r4, r5, r8, r9, sl, ip, lr}
 8007aa0:	2000a7cc 	andcs	sl, r0, ip, asr #15
 8007aa4:	20000004 	andcs	r0, r0, r4
 8007aa8:	08015159 	stmdaeq	r1, {r0, r3, r4, r6, r8, ip, lr}
 8007aac:	08015047 	stmdaeq	r1, {r0, r1, r2, r6, ip, lr}
 8007ab0:	08014fcb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	0801504b 	stmdaeq	r1, {r0, r1, r3, r6, ip, lr}
 8007ab8:	08015134 	stmdaeq	r1, {r2, r4, r5, r8, ip, lr}
 8007abc:	f60d 0078 	addw	r0, sp, #2168	; 0x878
 8007ac0:	f000 fa30 	bl	8007f24 <ArtNet4Node::Start()>
 8007ac4:	f248 0280 	movw	r2, #32896	; 0x8080
 8007ac8:	2302      	movs	r3, #2
 8007aca:	4967      	ldr	r1, [pc, #412]	; (8007c68 <main+0x510>)
 8007acc:	a838      	add	r0, sp, #224	; 0xe0
 8007ace:	f7ff fdea 	bl	80076a6 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007ad2:	2102      	movs	r1, #2
 8007ad4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007ad8:	f00b fdcc 	bl	8013674 <fwdgt_config>
 8007adc:	2801      	cmp	r0, #1
 8007ade:	bf0c      	ite	eq
 8007ae0:	2201      	moveq	r2, #1
 8007ae2:	2200      	movne	r2, #0
 8007ae4:	ab0e      	add	r3, sp, #56	; 0x38
 8007ae6:	711a      	strb	r2, [r3, #4]
 8007ae8:	d101      	bne.n	8007aee <main+0x396>
 8007aea:	f00b fdb3 	bl	8013654 <fwdgt_enable>
 8007aee:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007c6c <main+0x514>
 8007af2:	4f5f      	ldr	r7, [pc, #380]	; (8007c70 <main+0x518>)
 8007af4:	f00b fdb6 	bl	8013664 <fwdgt_counter_reload>
 8007af8:	f006 ffda 	bl	800eab0 <net_handle>
 8007afc:	f60d 0078 	addw	r0, sp, #2168	; 0x878
 8007b00:	f000 fa4b 	bl	8007f9a <ArtNet4Node::Run()>
 8007b04:	a8a3      	add	r0, sp, #652	; 0x28c
 8007b06:	f005 fa35 	bl	800cf74 <RemoteConfig::Run()>
 8007b0a:	a805      	add	r0, sp, #20
 8007b0c:	f006 fa9c 	bl	800e048 <SpiFlashStore::Flash()>
 8007b10:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b12:	b1a2      	cbz	r2, 8007b3e <main+0x3e6>
 8007b14:	f8d9 3000 	ldr.w	r3, [r9]
 8007b18:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007b1a:	1a5b      	subs	r3, r3, r1
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d80e      	bhi.n	8007b3e <main+0x3e6>
 8007b20:	f8d9 3000 	ldr.w	r3, [r9]
 8007b24:	931d      	str	r3, [sp, #116]	; 0x74
 8007b26:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	f083 0201 	eor.w	r2, r3, #1
 8007b2e:	bf18      	it	ne
 8007b30:	2301      	movne	r3, #1
 8007b32:	921c      	str	r2, [sp, #112]	; 0x70
 8007b34:	bf14      	ite	ne
 8007b36:	f8c8 3010 	strne.w	r3, [r8, #16]
 8007b3a:	f8c8 3014 	streq.w	r3, [r8, #20]
 8007b3e:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 8007b40:	b182      	cbz	r2, 8007b64 <main+0x40c>
 8007b42:	f89d 30f0 	ldrb.w	r3, [sp, #240]	; 0xf0
 8007b46:	b96b      	cbnz	r3, 8007b64 <main+0x40c>
 8007b48:	f8d9 3000 	ldr.w	r3, [r9]
 8007b4c:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8007b4e:	1a5b      	subs	r3, r3, r1
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d207      	bcs.n	8007b64 <main+0x40c>
 8007b54:	983e      	ldr	r0, [sp, #248]	; 0xf8
 8007b56:	b128      	cbz	r0, 8007b64 <main+0x40c>
 8007b58:	2101      	movs	r1, #1
 8007b5a:	6803      	ldr	r3, [r0, #0]
 8007b5c:	f88d 10f0 	strb.w	r1, [sp, #240]	; 0xf0
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	4798      	blx	r3
 8007b64:	b385      	cbz	r5, 8007bc8 <main+0x470>
 8007b66:	f10d 031a 	add.w	r3, sp, #26
 8007b6a:	4e42      	ldr	r6, [pc, #264]	; (8007c74 <main+0x51c>)
 8007b6c:	4842      	ldr	r0, [pc, #264]	; (8007c78 <main+0x520>)
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	2210      	movs	r2, #16
 8007b72:	4631      	mov	r1, r6
 8007b74:	7800      	ldrb	r0, [r0, #0]
 8007b76:	ab0d      	add	r3, sp, #52	; 0x34
 8007b78:	f007 fc9e 	bl	800f4b8 <udp_recv>
 8007b7c:	280a      	cmp	r0, #10
 8007b7e:	4604      	mov	r4, r0
 8007b80:	d922      	bls.n	8007bc8 <main+0x470>
 8007b82:	2204      	movs	r2, #4
 8007b84:	4631      	mov	r1, r6
 8007b86:	483d      	ldr	r0, [pc, #244]	; (8007c7c <main+0x524>)
 8007b88:	f7ff fca1 	bl	80074ce <memcmp>
 8007b8c:	b9e0      	cbnz	r0, 8007bc8 <main+0x470>
 8007b8e:	4426      	add	r6, r4
 8007b90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b94:	2b0a      	cmp	r3, #10
 8007b96:	d103      	bne.n	8007ba0 <main+0x448>
 8007b98:	3c01      	subs	r4, #1
 8007b9a:	b2a4      	uxth	r4, r4
 8007b9c:	2c0a      	cmp	r4, #10
 8007b9e:	d04d      	beq.n	8007c3c <main+0x4e4>
 8007ba0:	2c0e      	cmp	r4, #14
 8007ba2:	d849      	bhi.n	8007c38 <main+0x4e0>
 8007ba4:	2206      	movs	r2, #6
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	4835      	ldr	r0, [pc, #212]	; (8007c80 <main+0x528>)
 8007baa:	f7ff fc90 	bl	80074ce <memcmp>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d144      	bne.n	8007c3c <main+0x4e4>
 8007bb2:	2104      	movs	r1, #4
 8007bb4:	4833      	ldr	r0, [pc, #204]	; (8007c84 <main+0x52c>)
 8007bb6:	f7ff fc9e 	bl	80074f6 <dmxconfigudp::atoi(char const*, unsigned char)>
 8007bba:	285b      	cmp	r0, #91	; 0x5b
 8007bbc:	4601      	mov	r1, r0
 8007bbe:	d903      	bls.n	8007bc8 <main+0x470>
 8007bc0:	4b31      	ldr	r3, [pc, #196]	; (8007c88 <main+0x530>)
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	f004 fe2a 	bl	800c81c <Dmx::SetDmxBreakTime(unsigned int)>
 8007bc8:	a806      	add	r0, sp, #24
 8007bca:	f008 f8fd 	bl	800fdc8 <MDNS::Run()>
 8007bce:	e791      	b.n	8007af4 <main+0x39c>
 8007bd0:	4a2e      	ldr	r2, [pc, #184]	; (8007c8c <main+0x534>)
 8007bd2:	e6e2      	b.n	800799a <main+0x242>
 8007bd4:	2c0c      	cmp	r4, #12
 8007bd6:	d915      	bls.n	8007c04 <main+0x4ac>
 8007bd8:	2c0e      	cmp	r4, #14
 8007bda:	d82a      	bhi.n	8007c32 <main+0x4da>
 8007bdc:	2208      	movs	r2, #8
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	482b      	ldr	r0, [pc, #172]	; (8007c90 <main+0x538>)
 8007be2:	f7ff fc74 	bl	80074ce <memcmp>
 8007be6:	bb20      	cbnz	r0, 8007c32 <main+0x4da>
 8007be8:	2102      	movs	r1, #2
 8007bea:	482a      	ldr	r0, [pc, #168]	; (8007c94 <main+0x53c>)
 8007bec:	f7ff fc83 	bl	80074f6 <dmxconfigudp::atoi(char const*, unsigned char)>
 8007bf0:	4601      	mov	r1, r0
 8007bf2:	b110      	cbz	r0, 8007bfa <main+0x4a2>
 8007bf4:	4b28      	ldr	r3, [pc, #160]	; (8007c98 <main+0x540>)
 8007bf6:	fbb3 f1f0 	udiv	r1, r3, r0
 8007bfa:	4b23      	ldr	r3, [pc, #140]	; (8007c88 <main+0x530>)
 8007bfc:	6818      	ldr	r0, [r3, #0]
 8007bfe:	f004 fddd 	bl	800c7bc <Dmx::SetDmxPeriodTime(unsigned int)>
 8007c02:	e7e1      	b.n	8007bc8 <main+0x470>
 8007c04:	2c0a      	cmp	r4, #10
 8007c06:	d0df      	beq.n	8007bc8 <main+0x470>
 8007c08:	2206      	movs	r2, #6
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	4823      	ldr	r0, [pc, #140]	; (8007c9c <main+0x544>)
 8007c0e:	f7ff fc5e 	bl	80074ce <memcmp>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d1d8      	bne.n	8007bc8 <main+0x470>
 8007c16:	2103      	movs	r1, #3
 8007c18:	481a      	ldr	r0, [pc, #104]	; (8007c84 <main+0x52c>)
 8007c1a:	f7ff fc6c 	bl	80074f6 <dmxconfigudp::atoi(char const*, unsigned char)>
 8007c1e:	1e83      	subs	r3, r0, #2
 8007c20:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8007c24:	d8d0      	bhi.n	8007bc8 <main+0x470>
 8007c26:	4b18      	ldr	r3, [pc, #96]	; (8007c88 <main+0x530>)
 8007c28:	b281      	uxth	r1, r0
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	f004 fe0a 	bl	800c844 <Dmx::SetDmxSlots(unsigned short)>
 8007c30:	e7ca      	b.n	8007bc8 <main+0x470>
 8007c32:	2c0d      	cmp	r4, #13
 8007c34:	d0e8      	beq.n	8007c08 <main+0x4b0>
 8007c36:	e7c7      	b.n	8007bc8 <main+0x470>
 8007c38:	2c10      	cmp	r4, #16
 8007c3a:	d8c5      	bhi.n	8007bc8 <main+0x470>
 8007c3c:	2204      	movs	r2, #4
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	4817      	ldr	r0, [pc, #92]	; (8007ca0 <main+0x548>)
 8007c42:	f7ff fc44 	bl	80074ce <memcmp>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d1c4      	bne.n	8007bd4 <main+0x47c>
 8007c4a:	2107      	movs	r1, #7
 8007c4c:	4815      	ldr	r0, [pc, #84]	; (8007ca4 <main+0x54c>)
 8007c4e:	f7ff fc52 	bl	80074f6 <dmxconfigudp::atoi(char const*, unsigned char)>
 8007c52:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <main+0x550>)
 8007c54:	f1a0 020c 	sub.w	r2, r0, #12
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	4601      	mov	r1, r0
 8007c5c:	d8b4      	bhi.n	8007bc8 <main+0x470>
 8007c5e:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <main+0x530>)
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	f004 fde5 	bl	800c830 <Dmx::SetDmxMabTime(unsigned int)>
 8007c66:	e7af      	b.n	8007bc8 <main+0x470>
 8007c68:	0801516f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, ip, lr}
 8007c6c:	2000af0c 	andcs	sl, r0, ip, lsl #30
 8007c70:	20000000 	andcs	r0, r0, r0
 8007c74:	20001a39 	andcs	r1, r0, r9, lsr sl
 8007c78:	20000004 	andcs	r0, r0, r4
 8007c7c:	08015058 	stmdaeq	r1, {r3, r4, r6, ip, lr}
 8007c80:	0801505d 	stmdaeq	r1, {r0, r2, r3, r4, r6, ip, lr}
 8007c84:	20001a43 	andcs	r1, r0, r3, asr #20
 8007c88:	20001e78 	andcs	r1, r0, r8, ror lr
 8007c8c:	08014fc1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	08015069 	stmdaeq	r1, {r0, r3, r5, r6, ip, lr}
 8007c94:	20001a45 	andcs	r1, r0, r5, asr #20
 8007c98:	000f4240 	andeq	r4, pc, r0, asr #4
 8007c9c:	08015072 	stmdaeq	r1, {r1, r4, r5, r6, ip, lr}
 8007ca0:	08015064 	stmdaeq	r1, {r2, r5, r6, ip, lr}
 8007ca4:	20001a41 	andcs	r1, r0, r1, asr #20
 8007ca8:	000f4234 	andeq	r4, pc, r4, lsr r2	; <UNPREDICTABLE>

08007cac <DmxInput::~DmxInput()>:
 8007cac:	4770      	bx	lr
	...

08007cb0 <DmxInput::Start(unsigned int)>:
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4808      	ldr	r0, [pc, #32]	; (8007cd4 <DmxInput::Start(unsigned int)+0x24>)
 8007cb4:	fa03 f101 	lsl.w	r1, r3, r1
 8007cb8:	7802      	ldrb	r2, [r0, #0]
 8007cba:	ea31 0c02 	bics.w	ip, r1, r2
 8007cbe:	d007      	beq.n	8007cd0 <DmxInput::Start(unsigned int)+0x20>
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	7002      	strb	r2, [r0, #0]
 8007cc4:	4804      	ldr	r0, [pc, #16]	; (8007cd8 <DmxInput::Start(unsigned int)+0x28>)
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	f004 bc64 	b.w	800c598 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	200000f8 	strdcs	r0, [r0], -r8
 8007cd8:	20001e78 	andcs	r1, r0, r8, ror lr

08007cdc <DmxInput::Stop(unsigned int)>:
 8007cdc:	2201      	movs	r2, #1
 8007cde:	4808      	ldr	r0, [pc, #32]	; (8007d00 <DmxInput::Stop(unsigned int)+0x24>)
 8007ce0:	fa02 f101 	lsl.w	r1, r2, r1
 8007ce4:	7803      	ldrb	r3, [r0, #0]
 8007ce6:	ea31 0c03 	bics.w	ip, r1, r3
 8007cea:	d108      	bne.n	8007cfe <DmxInput::Stop(unsigned int)+0x22>
 8007cec:	ea23 0301 	bic.w	r3, r3, r1
 8007cf0:	7003      	strb	r3, [r0, #0]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	4803      	ldr	r0, [pc, #12]	; (8007d04 <DmxInput::Stop(unsigned int)+0x28>)
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6800      	ldr	r0, [r0, #0]
 8007cfa:	f004 bc4d 	b.w	800c598 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8007cfe:	4770      	bx	lr
 8007d00:	200000f8 	strdcs	r0, [r0], -r8
 8007d04:	20001e78 	andcs	r1, r0, r8, ror lr

08007d08 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	4f0b      	ldr	r7, [pc, #44]	; (8007d38 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x30>)
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	6838      	ldr	r0, [r7, #0]
 8007d10:	461e      	mov	r6, r3
 8007d12:	4615      	mov	r5, r2
 8007d14:	f004 fdce 	bl	800c8b4 <Dmx::GetDmxAvailable(unsigned int)>
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	6838      	ldr	r0, [r7, #0]
 8007d1e:	f004 fddd 	bl	800c8dc <Dmx::GetUpdatesPerSecond(unsigned int)>
 8007d22:	6030      	str	r0, [r6, #0]
 8007d24:	b12c      	cbz	r4, 8007d32 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x2a>
 8007d26:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8007d2a:	3401      	adds	r4, #1
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	602b      	str	r3, [r5, #0]
 8007d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d32:	4623      	mov	r3, r4
 8007d34:	e7fa      	b.n	8007d2c <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x24>
 8007d36:	bf00      	nop
 8007d38:	20001e78 	andcs	r1, r0, r8, ror lr

08007d3c <DmxInput::~DmxInput()>:
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	4604      	mov	r4, r0
 8007d40:	f00a fea2 	bl	8012a88 <operator delete(void*)>
 8007d44:	4620      	mov	r0, r4
 8007d46:	bd10      	pop	{r4, pc}

08007d48 <DmxInput::DmxInput()>:
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	4b03      	ldr	r3, [pc, #12]	; (8007d5c <DmxInput::DmxInput()+0x14>)
 8007d4e:	2100      	movs	r1, #0
 8007d50:	6003      	str	r3, [r0, #0]
 8007d52:	f7ff ffc3 	bl	8007cdc <DmxInput::Stop(unsigned int)>
 8007d56:	4620      	mov	r0, r4
 8007d58:	bd10      	pop	{r4, pc}
 8007d5a:	bf00      	nop
 8007d5c:	080150e4 	stmdaeq	r1, {r2, r5, r6, r7, ip, lr}

08007d60 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 8007d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d62:	4616      	mov	r6, r2
 8007d64:	1d07      	adds	r7, r0, #4
 8007d66:	4604      	mov	r4, r0
 8007d68:	4613      	mov	r3, r2
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	f10d 0206 	add.w	r2, sp, #6
 8007d70:	460d      	mov	r5, r1
 8007d72:	f000 fc1d 	bl	80085b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8007d76:	b1b6      	cbz	r6, 8007da6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8007d78:	b1a8      	cbz	r0, 8007da6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f000 fd90 	bl	80088a2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8007d82:	2801      	cmp	r0, #1
 8007d84:	d10f      	bne.n	8007da6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8007d86:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8007d8a:	b123      	cbz	r3, 8007d96 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x36>
 8007d8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007d90:	3301      	adds	r3, #1
 8007d92:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007d96:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007d9a:	b933      	cbnz	r3, 8007daa <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4a>
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	4629      	mov	r1, r5
 8007da0:	4638      	mov	r0, r7
 8007da2:	f000 fc48 	bl	8008636 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8007da6:	b003      	add	sp, #12
 8007da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007daa:	1e71      	subs	r1, r6, #1
 8007dac:	424a      	negs	r2, r1
 8007dae:	414a      	adcs	r2, r1
 8007db0:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8007db4:	4629      	mov	r1, r5
 8007db6:	f002 fc5b 	bl	800a670 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8007dba:	e7f4      	b.n	8007da6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>

08007dbc <ArtNet4Node::~ArtNet4Node()>:
 8007dbc:	b510      	push	{r4, lr}
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 8007dc2:	6003      	str	r3, [r0, #0]
 8007dc4:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8007dc8:	f002 fb62 	bl	800a490 <E131Bridge::Stop()>
 8007dcc:	1d20      	adds	r0, r4, #4
 8007dce:	f000 f961 	bl	8008094 <ArtNetNode::Stop()>
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	bd10      	pop	{r4, pc}
 8007dd6:	bf00      	nop
 8007dd8:	0801511c 	stmdaeq	r1, {r2, r3, r4, r8, ip, lr}

08007ddc <ArtNet4Node::HandleAddress(unsigned char)>:
 8007ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dde:	4605      	mov	r5, r0
 8007de0:	460c      	mov	r4, r1
 8007de2:	2600      	movs	r6, #0
 8007de4:	1d07      	adds	r7, r0, #4
 8007de6:	792b      	ldrb	r3, [r5, #4]
 8007de8:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8007dec:	d224      	bcs.n	8007e38 <ArtNet4Node::HandleAddress(unsigned char)+0x5c>
 8007dee:	2301      	movs	r3, #1
 8007df0:	4631      	mov	r1, r6
 8007df2:	4638      	mov	r0, r7
 8007df4:	f10d 0206 	add.w	r2, sp, #6
 8007df8:	f000 fbda 	bl	80085b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8007dfc:	b150      	cbz	r0, 8007e14 <ArtNet4Node::HandleAddress(unsigned char)+0x38>
 8007dfe:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
 8007e02:	b123      	cbz	r3, 8007e0e <ArtNet4Node::HandleAddress(unsigned char)+0x32>
 8007e04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007e0e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007e12:	b90b      	cbnz	r3, 8007e18 <ArtNet4Node::HandleAddress(unsigned char)+0x3c>
 8007e14:	3601      	adds	r6, #1
 8007e16:	e7e6      	b.n	8007de6 <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 8007e18:	4631      	mov	r1, r6
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	f000 fd41 	bl	80088a2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8007e20:	4602      	mov	r2, r0
 8007e22:	2a01      	cmp	r2, #1
 8007e24:	bf18      	it	ne
 8007e26:	2202      	movne	r2, #2
 8007e28:	4631      	mov	r1, r6
 8007e2a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007e2e:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 8007e32:	f002 fc1d 	bl	800a670 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8007e36:	e7ed      	b.n	8007e14 <ArtNet4Node::HandleAddress(unsigned char)+0x38>
 8007e38:	2c13      	cmp	r4, #19
 8007e3a:	f004 0603 	and.w	r6, r4, #3
 8007e3e:	d80a      	bhi.n	8007e56 <ArtNet4Node::HandleAddress(unsigned char)+0x7a>
 8007e40:	2c0f      	cmp	r4, #15
 8007e42:	d819      	bhi.n	8007e78 <ArtNet4Node::HandleAddress(unsigned char)+0x9c>
 8007e44:	2c02      	cmp	r4, #2
 8007e46:	d015      	beq.n	8007e74 <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 8007e48:	3c03      	subs	r4, #3
 8007e4a:	2c01      	cmp	r4, #1
 8007e4c:	d810      	bhi.n	8007e70 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f885 37c0 	strb.w	r3, [r5, #1984]	; 0x7c0
 8007e54:	e00c      	b.n	8007e70 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8007e56:	2c53      	cmp	r4, #83	; 0x53
 8007e58:	d806      	bhi.n	8007e68 <ArtNet4Node::HandleAddress(unsigned char)+0x8c>
 8007e5a:	2c4f      	cmp	r4, #79	; 0x4f
 8007e5c:	d908      	bls.n	8007e70 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8007e5e:	2144      	movs	r1, #68	; 0x44
 8007e60:	2300      	movs	r3, #0
 8007e62:	fb01 5506 	mla	r5, r1, r6, r5
 8007e66:	e00b      	b.n	8007e80 <ArtNet4Node::HandleAddress(unsigned char)+0xa4>
 8007e68:	3470      	adds	r4, #112	; 0x70
 8007e6a:	b2e4      	uxtb	r4, r4
 8007e6c:	2c03      	cmp	r4, #3
 8007e6e:	d90a      	bls.n	8007e86 <ArtNet4Node::HandleAddress(unsigned char)+0xaa>
 8007e70:	b003      	add	sp, #12
 8007e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e74:	2301      	movs	r3, #1
 8007e76:	e7eb      	b.n	8007e50 <ArtNet4Node::HandleAddress(unsigned char)+0x74>
 8007e78:	2144      	movs	r1, #68	; 0x44
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	fb01 5506 	mla	r5, r1, r6, r5
 8007e80:	f8c5 3d04 	str.w	r3, [r5, #3332]	; 0xd04
 8007e84:	e7f4      	b.n	8007e70 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8007e86:	4631      	mov	r1, r6
 8007e88:	1d28      	adds	r0, r5, #4
 8007e8a:	f000 fd0a 	bl	80088a2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8007e8e:	2801      	cmp	r0, #1
 8007e90:	d1ee      	bne.n	8007e70 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8007e92:	4631      	mov	r1, r6
 8007e94:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 8007e98:	b003      	add	sp, #12
 8007e9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007e9e:	f002 bf01 	b.w	800aca4 <E131Bridge::Clear(unsigned int)>

08007ea2 <ArtNet4Node::IsStatusChanged()>:
 8007ea2:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8007ea6:	f002 bef5 	b.w	800ac94 <E131Bridge::IsStatusChanged()>

08007eaa <ArtNet4Node::~ArtNet4Node()>:
 8007eaa:	b510      	push	{r4, lr}
 8007eac:	4604      	mov	r4, r0
 8007eae:	f7ff ff85 	bl	8007dbc <ArtNet4Node::~ArtNet4Node()>
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f00a fde8 	bl	8012a88 <operator delete(void*)>
 8007eb8:	4620      	mov	r0, r4
 8007eba:	bd10      	pop	{r4, pc}

08007ebc <ArtNet4Node::GetStatus(unsigned int)>:
 8007ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4604      	mov	r4, r0
 8007ec2:	f10d 0206 	add.w	r2, sp, #6
 8007ec6:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 8007eca:	460d      	mov	r5, r1
 8007ecc:	f002 fc48 	bl	800a760 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 8007ed0:	b188      	cbz	r0, 8007ef6 <ArtNet4Node::GetStatus(unsigned int)+0x3a>
 8007ed2:	2144      	movs	r1, #68	; 0x44
 8007ed4:	fb01 4405 	mla	r4, r1, r5, r4
 8007ed8:	f894 3d0a 	ldrb.w	r3, [r4, #3338]	; 0xd0a
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f894 3d09 	ldrb.w	r3, [r4, #3337]	; 0xd09
 8007ee2:	bf14      	ite	ne
 8007ee4:	2080      	movne	r0, #128	; 0x80
 8007ee6:	2000      	moveq	r0, #0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	bf14      	ite	ne
 8007eec:	2308      	movne	r3, #8
 8007eee:	2300      	moveq	r3, #0
 8007ef0:	4318      	orrs	r0, r3
 8007ef2:	f040 0001 	orr.w	r0, r0, #1
 8007ef6:	b003      	add	sp, #12
 8007ef8:	bd30      	pop	{r4, r5, pc}
	...

08007efc <ArtNet4Node::ArtNet4Node(unsigned char)>:
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	4604      	mov	r4, r0
 8007f00:	1d05      	adds	r5, r0, #4
 8007f02:	4628      	mov	r0, r5
 8007f04:	f000 f964 	bl	80081d0 <ArtNetNode::ArtNetNode(unsigned char)>
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <ArtNet4Node::ArtNet4Node(unsigned char)+0x24>)
 8007f0a:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8007f0e:	6023      	str	r3, [r4, #0]
 8007f10:	f002 fb0e 	bl	800a530 <E131Bridge::E131Bridge()>
 8007f14:	4628      	mov	r0, r5
 8007f16:	4621      	mov	r1, r4
 8007f18:	f000 f866 	bl	8007fe8 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	0801511c 	stmdaeq	r1, {r2, r3, r4, r8, ip, lr}

08007f24 <ArtNet4Node::Start()>:
 8007f24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f26:	4604      	mov	r4, r0
 8007f28:	2500      	movs	r5, #0
 8007f2a:	1d06      	adds	r6, r0, #4
 8007f2c:	7923      	ldrb	r3, [r4, #4]
 8007f2e:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 8007f32:	d218      	bcs.n	8007f66 <ArtNet4Node::Start()+0x42>
 8007f34:	2301      	movs	r3, #1
 8007f36:	4629      	mov	r1, r5
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f10d 0206 	add.w	r2, sp, #6
 8007f3e:	f000 fb37 	bl	80085b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8007f42:	b170      	cbz	r0, 8007f62 <ArtNet4Node::Start()+0x3e>
 8007f44:	4629      	mov	r1, r5
 8007f46:	4630      	mov	r0, r6
 8007f48:	f000 fcab 	bl	80088a2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8007f4c:	2801      	cmp	r0, #1
 8007f4e:	d108      	bne.n	8007f62 <ArtNet4Node::Start()+0x3e>
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f000 fcd6 	bl	8008904 <ArtNetNode::GetMergeMode(unsigned int) const>
 8007f58:	2344      	movs	r3, #68	; 0x44
 8007f5a:	436b      	muls	r3, r5
 8007f5c:	f604 5204 	addw	r2, r4, #3332	; 0xd04
 8007f60:	50d0      	str	r0, [r2, r3]
 8007f62:	3501      	adds	r5, #1
 8007f64:	e7e2      	b.n	8007f2c <ArtNet4Node::Start()+0x8>
 8007f66:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f70:	bf2c      	ite	cs
 8007f72:	2300      	movcs	r3, #0
 8007f74:	2301      	movcc	r3, #1
 8007f76:	f884 3cb1 	strb.w	r3, [r4, #3249]	; 0xcb1
 8007f7a:	f894 36e0 	ldrb.w	r3, [r4, #1760]	; 0x6e0
 8007f7e:	f884 3cb2 	strb.w	r3, [r4, #3250]	; 0xcb2
 8007f82:	68e3      	ldr	r3, [r4, #12]
 8007f84:	f8c4 37bc 	str.w	r3, [r4, #1980]	; 0x7bc
 8007f88:	f000 f840 	bl	800800c <ArtNetNode::Start()>
 8007f8c:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8007f90:	b002      	add	sp, #8
 8007f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f96:	f002 ba3f 	b.w	800a418 <E131Bridge::Start()>

08007f9a <ArtNet4Node::Run()>:
 8007f9a:	b510      	push	{r4, lr}
 8007f9c:	4604      	mov	r4, r0
 8007f9e:	3004      	adds	r0, #4
 8007fa0:	f000 fa28 	bl	80083f4 <ArtNetNode::Run()>
 8007fa4:	f894 3cc3 	ldrb.w	r3, [r4, #3267]	; 0xcc3
 8007fa8:	b12b      	cbz	r3, 8007fb6 <ArtNet4Node::Run()+0x1c>
 8007faa:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8007fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb2:	f002 bed9 	b.w	800ad68 <E131Bridge::Run()>
 8007fb6:	bd10      	pop	{r4, pc}

08007fb8 <ArtNet4Node::Print()>:
 8007fb8:	b510      	push	{r4, lr}
 8007fba:	4604      	mov	r4, r0
 8007fbc:	3004      	adds	r0, #4
 8007fbe:	f001 fc2b 	bl	8009818 <ArtNetNode::Print()>
 8007fc2:	f894 36e2 	ldrb.w	r3, [r4, #1762]	; 0x6e2
 8007fc6:	b15b      	cbz	r3, 8007fe0 <ArtNet4Node::Print()+0x28>
 8007fc8:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8007fcc:	b113      	cbz	r3, 8007fd4 <ArtNet4Node::Print()+0x1c>
 8007fce:	4805      	ldr	r0, [pc, #20]	; (8007fe4 <ArtNet4Node::Print()+0x2c>)
 8007fd0:	f00b f856 	bl	8013080 <printf>
 8007fd4:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 8007fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fdc:	f003 b918 	b.w	800b210 <E131Bridge::Print()>
 8007fe0:	bd10      	pop	{r4, pc}
 8007fe2:	bf00      	nop
 8007fe4:	080150f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, ip, lr}

08007fe8 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>:
 8007fe8:	61c1      	str	r1, [r0, #28]
 8007fea:	4770      	bx	lr

08007fec <strncpy.isra.0>:
 8007fec:	3901      	subs	r1, #1
 8007fee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007ff2:	b92b      	cbnz	r3, 8008000 <strncpy.isra.0+0x14>
 8007ff4:	4402      	add	r2, r0
 8007ff6:	4290      	cmp	r0, r2
 8007ff8:	d007      	beq.n	800800a <strncpy.isra.0+0x1e>
 8007ffa:	f800 3b01 	strb.w	r3, [r0], #1
 8007ffe:	e7fa      	b.n	8007ff6 <strncpy.isra.0+0xa>
 8008000:	3a01      	subs	r2, #1
 8008002:	f800 3b01 	strb.w	r3, [r0], #1
 8008006:	d1f2      	bne.n	8007fee <strncpy.isra.0+0x2>
 8008008:	4770      	bx	lr
 800800a:	4770      	bx	lr

0800800c <ArtNetNode::Start()>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4d1f      	ldr	r5, [pc, #124]	; (800808c <ArtNetNode::Start()+0x80>)
 8008010:	f990 3096 	ldrsb.w	r3, [r0, #150]	; 0x96
 8008014:	682a      	ldr	r2, [r5, #0]
 8008016:	f023 0302 	bic.w	r3, r3, #2
 800801a:	7851      	ldrb	r1, [r2, #1]
 800801c:	4604      	mov	r4, r0
 800801e:	2900      	cmp	r1, #0
 8008020:	bf14      	ite	ne
 8008022:	2102      	movne	r1, #2
 8008024:	2100      	moveq	r1, #0
 8008026:	430b      	orrs	r3, r1
 8008028:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 800802c:	7812      	ldrb	r2, [r2, #0]
 800802e:	f023 0304 	bic.w	r3, r3, #4
 8008032:	2a00      	cmp	r2, #0
 8008034:	bf14      	ite	ne
 8008036:	2204      	movne	r2, #4
 8008038:	2200      	moveq	r2, #0
 800803a:	4313      	orrs	r3, r2
 800803c:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 8008040:	f001 f8dc 	bl	80091fc <ArtNetNode::FillPollReply()>
 8008044:	f641 1136 	movw	r1, #6454	; 0x1936
 8008048:	6828      	ldr	r0, [r5, #0]
 800804a:	f007 ff61 	bl	800ff10 <Network::Begin(unsigned short)>
 800804e:	2302      	movs	r3, #2
 8008050:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 8008054:	6963      	ldr	r3, [r4, #20]
 8008056:	6060      	str	r0, [r4, #4]
 8008058:	b16b      	cbz	r3, 8008076 <ArtNetNode::Start()+0x6a>
 800805a:	2500      	movs	r5, #0
 800805c:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 8008060:	012b      	lsls	r3, r5, #4
 8008062:	5cf3      	ldrb	r3, [r6, r3]
 8008064:	b123      	cbz	r3, 8008070 <ArtNetNode::Start()+0x64>
 8008066:	6960      	ldr	r0, [r4, #20]
 8008068:	4629      	mov	r1, r5
 800806a:	6803      	ldr	r3, [r0, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	4798      	blx	r3
 8008070:	3501      	adds	r5, #1
 8008072:	2d04      	cmp	r5, #4
 8008074:	d1f4      	bne.n	8008060 <ArtNetNode::Start()+0x54>
 8008076:	4b06      	ldr	r3, [pc, #24]	; (8008090 <ArtNetNode::Start()+0x84>)
 8008078:	2102      	movs	r1, #2
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	f00a fc24 	bl	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 8008080:	4620      	mov	r0, r4
 8008082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008086:	2100      	movs	r1, #0
 8008088:	f001 b92a 	b.w	80092e0 <ArtNetNode::SendPollRelply(bool)>
 800808c:	2000a7cc 	andcs	sl, r0, ip, asr #15
 8008090:	2000aef0 	strdcs	sl, [r0], -r0

08008094 <ArtNetNode::Stop()>:
 8008094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008098:	2500      	movs	r5, #0
 800809a:	4604      	mov	r4, r0
 800809c:	4606      	mov	r6, r0
 800809e:	46a9      	mov	r9, r5
 80080a0:	f04f 0a01 	mov.w	sl, #1
 80080a4:	4f1f      	ldr	r7, [pc, #124]	; (8008124 <ArtNetNode::Stop()+0x90>)
 80080a6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008128 <ArtNetNode::Stop()+0x94>
 80080aa:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 80080ae:	b97b      	cbnz	r3, 80080d0 <ArtNetNode::Stop()+0x3c>
 80080b0:	68a0      	ldr	r0, [r4, #8]
 80080b2:	b118      	cbz	r0, 80080bc <ArtNetNode::Stop()+0x28>
 80080b4:	6803      	ldr	r3, [r0, #0]
 80080b6:	4629      	mov	r1, r5
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	4798      	blx	r3
 80080bc:	f8d8 3000 	ldr.w	r3, [r8]
 80080c0:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 80080c4:	07db      	lsls	r3, r3, #31
 80080c6:	bf58      	it	pl
 80080c8:	f8c8 a000 	strpl.w	sl, [r8]
 80080cc:	f886 9705 	strb.w	r9, [r6, #1797]	; 0x705
 80080d0:	3501      	adds	r5, #1
 80080d2:	2d04      	cmp	r5, #4
 80080d4:	f106 0624 	add.w	r6, r6, #36	; 0x24
 80080d8:	f207 6704 	addw	r7, r7, #1540	; 0x604
 80080dc:	d1e5      	bne.n	80080aa <ArtNetNode::Stop()+0x16>
 80080de:	6963      	ldr	r3, [r4, #20]
 80080e0:	b16b      	cbz	r3, 80080fe <ArtNetNode::Stop()+0x6a>
 80080e2:	2500      	movs	r5, #0
 80080e4:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 80080e8:	012b      	lsls	r3, r5, #4
 80080ea:	5cf3      	ldrb	r3, [r6, r3]
 80080ec:	b123      	cbz	r3, 80080f8 <ArtNetNode::Stop()+0x64>
 80080ee:	6960      	ldr	r0, [r4, #20]
 80080f0:	4629      	mov	r1, r5
 80080f2:	6803      	ldr	r3, [r0, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	4798      	blx	r3
 80080f8:	3501      	adds	r5, #1
 80080fa:	2d04      	cmp	r5, #4
 80080fc:	d1f4      	bne.n	80080e8 <ArtNetNode::Stop()+0x54>
 80080fe:	4b0b      	ldr	r3, [pc, #44]	; (800812c <ArtNetNode::Stop()+0x98>)
 8008100:	2100      	movs	r1, #0
 8008102:	6818      	ldr	r0, [r3, #0]
 8008104:	f00a fbe0 	bl	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 8008108:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800810c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008110:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008114:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008118:	2300      	movs	r3, #0
 800811a:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 800811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008122:	bf00      	nop
 8008124:	20000100 	andcs	r0, r0, r0, lsl #2
 8008128:	200000fc 	strdcs	r0, [r0], -ip
 800812c:	2000aef0 	strdcs	sl, [r0], -r0

08008130 <ArtNetNode::SetShortName(char const*)>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	f100 0542 	add.w	r5, r0, #66	; 0x42
 8008136:	4604      	mov	r4, r0
 8008138:	2211      	movs	r2, #17
 800813a:	4628      	mov	r0, r5
 800813c:	f7ff ff56 	bl	8007fec <strncpy.isra.0>
 8008140:	2300      	movs	r3, #0
 8008142:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 8008146:	462b      	mov	r3, r5
 8008148:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800814c:	428b      	cmp	r3, r1
 800814e:	d004      	beq.n	800815a <ArtNetNode::SetShortName(char const*)+0x2a>
 8008150:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008154:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8008158:	e7f8      	b.n	800814c <ArtNetNode::SetShortName(char const*)+0x1c>
 800815a:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800815e:	2b02      	cmp	r3, #2
 8008160:	d10d      	bne.n	800817e <ArtNetNode::SetShortName(char const*)+0x4e>
 8008162:	6a20      	ldr	r0, [r4, #32]
 8008164:	b118      	cbz	r0, 800816e <ArtNetNode::SetShortName(char const*)+0x3e>
 8008166:	6803      	ldr	r3, [r0, #0]
 8008168:	4629      	mov	r1, r5
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	4798      	blx	r3
 800816e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008170:	b128      	cbz	r0, 800817e <ArtNetNode::SetShortName(char const*)+0x4e>
 8008172:	6803      	ldr	r3, [r0, #0]
 8008174:	4629      	mov	r1, r5
 8008176:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	4718      	bx	r3
 800817e:	bd70      	pop	{r4, r5, r6, pc}

08008180 <ArtNetNode::SetLongName(char const*)>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	f100 0554 	add.w	r5, r0, #84	; 0x54
 8008186:	4604      	mov	r4, r0
 8008188:	223f      	movs	r2, #63	; 0x3f
 800818a:	4628      	mov	r0, r5
 800818c:	f7ff ff2e 	bl	8007fec <strncpy.isra.0>
 8008190:	2300      	movs	r3, #0
 8008192:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 8008196:	462b      	mov	r3, r5
 8008198:	f104 0194 	add.w	r1, r4, #148	; 0x94
 800819c:	428b      	cmp	r3, r1
 800819e:	d004      	beq.n	80081aa <ArtNetNode::SetLongName(char const*)+0x2a>
 80081a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a4:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 80081a8:	e7f8      	b.n	800819c <ArtNetNode::SetLongName(char const*)+0x1c>
 80081aa:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d10d      	bne.n	80081ce <ArtNetNode::SetLongName(char const*)+0x4e>
 80081b2:	6a20      	ldr	r0, [r4, #32]
 80081b4:	b118      	cbz	r0, 80081be <ArtNetNode::SetLongName(char const*)+0x3e>
 80081b6:	6803      	ldr	r3, [r0, #0]
 80081b8:	4629      	mov	r1, r5
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	4798      	blx	r3
 80081be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081c0:	b128      	cbz	r0, 80081ce <ArtNetNode::SetLongName(char const*)+0x4e>
 80081c2:	6803      	ldr	r3, [r0, #0]
 80081c4:	4629      	mov	r1, r5
 80081c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	4718      	bx	r3
 80081ce:	bd70      	pop	{r4, r5, r6, pc}

080081d0 <ArtNetNode::ArtNetNode(unsigned char)>:
 80081d0:	2300      	movs	r3, #0
 80081d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081d6:	2901      	cmp	r1, #1
 80081d8:	bf28      	it	cs
 80081da:	2101      	movcs	r1, #1
 80081dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081de:	4604      	mov	r4, r0
 80081e0:	e9c0 2301 	strd	r2, r3, [r0, #4]
 80081e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081e8:	4a41      	ldr	r2, [pc, #260]	; (80082f0 <ArtNetNode::ArtNetNode(unsigned char)+0x120>)
 80081ea:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80081ee:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80081f2:	7001      	strb	r1, [r0, #0]
 80081f4:	6010      	str	r0, [r2, #0]
 80081f6:	b085      	sub	sp, #20
 80081f8:	6243      	str	r3, [r0, #36]	; 0x24
 80081fa:	f8c0 3664 	str.w	r3, [r0, #1636]	; 0x664
 80081fe:	f8c0 3668 	str.w	r3, [r0, #1640]	; 0x668
 8008202:	f880 366e 	strb.w	r3, [r0, #1646]	; 0x66e
 8008206:	f100 0228 	add.w	r2, r0, #40	; 0x28
 800820a:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 800820e:	428a      	cmp	r2, r1
 8008210:	d002      	beq.n	8008218 <ArtNetNode::ArtNetNode(unsigned char)+0x48>
 8008212:	f802 3b01 	strb.w	r3, [r2], #1
 8008216:	e7fa      	b.n	800820e <ArtNetNode::ArtNetNode(unsigned char)+0x3e>
 8008218:	4b36      	ldr	r3, [pc, #216]	; (80082f4 <ArtNetNode::ArtNetNode(unsigned char)+0x124>)
 800821a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	6903      	ldr	r3, [r0, #16]
 8008222:	62a3      	str	r3, [r4, #40]	; 0x28
 8008224:	6982      	ldr	r2, [r0, #24]
 8008226:	ea63 0302 	orn	r3, r3, r2
 800822a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800822c:	6363      	str	r3, [r4, #52]	; 0x34
 800822e:	f007 fe75 	bl	800ff1c <Network::MacAddressCopyTo(unsigned char*)>
 8008232:	23d0      	movs	r3, #208	; 0xd0
 8008234:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008238:	f244 0318 	movw	r3, #16408	; 0x4018
 800823c:	2200      	movs	r2, #0
 800823e:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8008242:	f204 61e4 	addw	r1, r4, #1764	; 0x6e4
 8008246:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 800824a:	428b      	cmp	r3, r1
 800824c:	d002      	beq.n	8008254 <ArtNetNode::ArtNetNode(unsigned char)+0x84>
 800824e:	f803 2b01 	strb.w	r2, [r3], #1
 8008252:	e7fa      	b.n	800824a <ArtNetNode::ArtNetNode(unsigned char)+0x7a>
 8008254:	f240 1201 	movw	r2, #257	; 0x101
 8008258:	f8a4 26d4 	strh.w	r2, [r4, #1748]	; 0x6d4
 800825c:	f242 7210 	movw	r2, #10000	; 0x2710
 8008260:	2500      	movs	r5, #0
 8008262:	2708      	movs	r7, #8
 8008264:	f8c4 26cc 	str.w	r2, [r4, #1740]	; 0x6cc
 8008268:	f204 7174 	addw	r1, r4, #1908	; 0x774
 800826c:	f204 76b4 	addw	r6, r4, #1972	; 0x7b4
 8008270:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008274:	4283      	cmp	r3, r0
 8008276:	d005      	beq.n	8008284 <ArtNetNode::ArtNetNode(unsigned char)+0xb4>
 8008278:	f803 5b01 	strb.w	r5, [r3], #1
 800827c:	e7fa      	b.n	8008274 <ArtNetNode::ArtNetNode(unsigned char)+0xa4>
 800827e:	4603      	mov	r3, r0
 8008280:	4611      	mov	r1, r2
 8008282:	e7f5      	b.n	8008270 <ArtNetNode::ArtNetNode(unsigned char)+0xa0>
 8008284:	460a      	mov	r2, r1
 8008286:	f101 0310 	add.w	r3, r1, #16
 800828a:	429a      	cmp	r2, r3
 800828c:	d002      	beq.n	8008294 <ArtNetNode::ArtNetNode(unsigned char)+0xc4>
 800828e:	f802 5b01 	strb.w	r5, [r2], #1
 8008292:	e7fa      	b.n	800828a <ArtNetNode::ArtNetNode(unsigned char)+0xba>
 8008294:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008296:	4296      	cmp	r6, r2
 8008298:	608b      	str	r3, [r1, #8]
 800829a:	70cf      	strb	r7, [r1, #3]
 800829c:	d1ef      	bne.n	800827e <ArtNetNode::ArtNetNode(unsigned char)+0xae>
 800829e:	4620      	mov	r0, r4
 80082a0:	4915      	ldr	r1, [pc, #84]	; (80082f8 <ArtNetNode::ArtNetNode(unsigned char)+0x128>)
 80082a2:	f7ff ff45 	bl	8008130 <ArtNetNode::SetShortName(char const*)>
 80082a6:	4b15      	ldr	r3, [pc, #84]	; (80082fc <ArtNetNode::ArtNetNode(unsigned char)+0x12c>)
 80082a8:	f204 657f 	addw	r5, r4, #1663	; 0x67f
 80082ac:	9302      	str	r3, [sp, #8]
 80082ae:	2304      	movs	r3, #4
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	4b13      	ldr	r3, [pc, #76]	; (8008300 <ArtNetNode::ArtNetNode(unsigned char)+0x130>)
 80082b4:	4a13      	ldr	r2, [pc, #76]	; (8008304 <ArtNetNode::ArtNetNode(unsigned char)+0x134>)
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	2140      	movs	r1, #64	; 0x40
 80082ba:	4b13      	ldr	r3, [pc, #76]	; (8008308 <ArtNetNode::ArtNetNode(unsigned char)+0x138>)
 80082bc:	4628      	mov	r0, r5
 80082be:	f00a ff07 	bl	80130d0 <snprintf>
 80082c2:	4629      	mov	r1, r5
 80082c4:	4620      	mov	r0, r4
 80082c6:	f7ff ff5b 	bl	8008180 <ArtNetNode::SetLongName(char const*)>
 80082ca:	4b10      	ldr	r3, [pc, #64]	; (800830c <ArtNetNode::ArtNetNode(unsigned char)+0x13c>)
 80082cc:	f204 606f 	addw	r0, r4, #1647	; 0x66f
 80082d0:	781a      	ldrb	r2, [r3, #0]
 80082d2:	490f      	ldr	r1, [pc, #60]	; (8008310 <ArtNetNode::ArtNetNode(unsigned char)+0x140>)
 80082d4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 80082d8:	785b      	ldrb	r3, [r3, #1]
 80082da:	220f      	movs	r2, #15
 80082dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80082e0:	f7ff fe84 	bl	8007fec <strncpy.isra.0>
 80082e4:	2300      	movs	r3, #0
 80082e6:	4620      	mov	r0, r4
 80082e8:	f884 367e 	strb.w	r3, [r4, #1662]	; 0x67e
 80082ec:	b005      	add	sp, #20
 80082ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f0:	20001910 	andcs	r1, r0, r0, lsl r9
 80082f4:	2000a7cc 	andcs	sl, r0, ip, asr #15
 80082f8:	080151ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, ip, lr}
 80082fc:	08015195 	stmdaeq	r1, {r0, r2, r4, r7, r8, ip, lr}
 8008300:	080151b2 	stmdaeq	r1, {r1, r4, r5, r7, r8, ip, lr}
 8008304:	08015189 	stmdaeq	r1, {r0, r3, r7, r8, ip, lr}
 8008308:	0801517f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, ip, lr}
 800830c:	08015471 	stmdaeq	r1, {r0, r4, r5, r6, sl, ip, lr}
 8008310:	080151a9 	stmdaeq	r1, {r0, r3, r5, r7, r8, ip, lr}

08008314 <ArtNetNode::SetOemValue(unsigned char const*)>:
 8008314:	780b      	ldrb	r3, [r1, #0]
 8008316:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800831a:	784b      	ldrb	r3, [r1, #1]
 800831c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008320:	4770      	bx	lr
	...

08008324 <ArtNetNode::SetNetworkDataLossCondition()>:
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008328:	2400      	movs	r4, #0
 800832a:	4606      	mov	r6, r0
 800832c:	4605      	mov	r5, r0
 800832e:	46a0      	mov	r8, r4
 8008330:	46a2      	mov	sl, r4
 8008332:	4f1a      	ldr	r7, [pc, #104]	; (800839c <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 8008334:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80083a0 <ArtNetNode::SetNetworkDataLossCondition()+0x7c>
 8008338:	f880 46da 	strb.w	r4, [r0, #1754]	; 0x6da
 800833c:	f880 46d9 	strb.w	r4, [r0, #1753]	; 0x6d9
 8008340:	7833      	ldrb	r3, [r6, #0]
 8008342:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8008346:	d227      	bcs.n	8008398 <ArtNetNode::SetNetworkDataLossCondition()+0x74>
 8008348:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800834c:	b953      	cbnz	r3, 8008364 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 800834e:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8008352:	b13b      	cbz	r3, 8008364 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8008354:	68b0      	ldr	r0, [r6, #8]
 8008356:	b118      	cbz	r0, 8008360 <ArtNetNode::SetNetworkDataLossCondition()+0x3c>
 8008358:	6803      	ldr	r3, [r0, #0]
 800835a:	4621      	mov	r1, r4
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	4798      	blx	r3
 8008360:	f885 8705 	strb.w	r8, [r5, #1797]	; 0x705
 8008364:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 8008368:	f8c5 86f0 	str.w	r8, [r5, #1776]	; 0x6f0
 800836c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008370:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 8008374:	f8c5 86f8 	str.w	r8, [r5, #1784]	; 0x6f8
 8008378:	f8d9 3000 	ldr.w	r3, [r9]
 800837c:	f8c7 a600 	str.w	sl, [r7, #1536]	; 0x600
 8008380:	07db      	lsls	r3, r3, #31
 8008382:	bf58      	it	pl
 8008384:	2301      	movpl	r3, #1
 8008386:	f104 0401 	add.w	r4, r4, #1
 800838a:	bf58      	it	pl
 800838c:	f8c9 3000 	strpl.w	r3, [r9]
 8008390:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8008394:	3524      	adds	r5, #36	; 0x24
 8008396:	e7d3      	b.n	8008340 <ArtNetNode::SetNetworkDataLossCondition()+0x1c>
 8008398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800839c:	20000100 	andcs	r0, r0, r0, lsl #2
 80083a0:	200000fc 	strdcs	r0, [r0], -ip

080083a4 <ArtNetNode::GetType()>:
 80083a4:	f8b0 3570 	ldrh.w	r3, [r0, #1392]	; 0x570
 80083a8:	b530      	push	{r4, r5, lr}
 80083aa:	2b0b      	cmp	r3, #11
 80083ac:	d803      	bhi.n	80083b6 <ArtNetNode::GetType()+0x12>
 80083ae:	2300      	movs	r3, #0
 80083b0:	f8a0 3572 	strh.w	r3, [r0, #1394]	; 0x572
 80083b4:	bd30      	pop	{r4, r5, pc}
 80083b6:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1f7      	bne.n	80083ae <ArtNetNode::GetType()+0xa>
 80083be:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 80083c2:	2b0e      	cmp	r3, #14
 80083c4:	d1f3      	bne.n	80083ae <ArtNetNode::GetType()+0xa>
 80083c6:	4a0a      	ldr	r2, [pc, #40]	; (80083f0 <ArtNetNode::GetType()+0x4c>)
 80083c8:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 80083cc:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
 80083d0:	42ab      	cmp	r3, r5
 80083d2:	d006      	beq.n	80083e2 <ArtNetNode::GetType()+0x3e>
 80083d4:	f813 4b01 	ldrb.w	r4, [r3], #1
 80083d8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80083dc:	428c      	cmp	r4, r1
 80083de:	d0f7      	beq.n	80083d0 <ArtNetNode::GetType()+0x2c>
 80083e0:	e7e5      	b.n	80083ae <ArtNetNode::GetType()+0xa>
 80083e2:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
 80083e6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 80083ea:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80083ee:	e7df      	b.n	80083b0 <ArtNetNode::GetType()+0xc>
 80083f0:	08014fa0 	stmdaeq	r1, {r5, r7, r8, r9, sl, fp, lr}

080083f4 <ArtNetNode::Run()>:
 80083f4:	b530      	push	{r4, r5, lr}
 80083f6:	b085      	sub	sp, #20
 80083f8:	f10d 030e 	add.w	r3, sp, #14
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	4604      	mov	r4, r0
 8008400:	f200 536c 	addw	r3, r0, #1388	; 0x56c
 8008404:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8008408:	f240 42cc 	movw	r2, #1228	; 0x4cc
 800840c:	7900      	ldrb	r0, [r0, #4]
 800840e:	f007 f853 	bl	800f4b8 <udp_recv>
 8008412:	4b65      	ldr	r3, [pc, #404]	; (80085a8 <ArtNetNode::Run()+0x1b4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f8c4 3664 	str.w	r3, [r4, #1636]	; 0x664
 800841a:	2800      	cmp	r0, #0
 800841c:	d143      	bne.n	80084a6 <ArtNetNode::Run()+0xb2>
 800841e:	f8d4 26cc 	ldr.w	r2, [r4, #1740]	; 0x6cc
 8008422:	b13a      	cbz	r2, 8008434 <ArtNetNode::Run()+0x40>
 8008424:	f8d4 1668 	ldr.w	r1, [r4, #1640]	; 0x668
 8008428:	1a5b      	subs	r3, r3, r1
 800842a:	429a      	cmp	r2, r3
 800842c:	d802      	bhi.n	8008434 <ArtNetNode::Run()+0x40>
 800842e:	4620      	mov	r0, r4
 8008430:	f7ff ff78 	bl	8008324 <ArtNetNode::SetNetworkDataLossCondition()>
 8008434:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 8008438:	b16b      	cbz	r3, 8008456 <ArtNetNode::Run()+0x62>
 800843a:	69e0      	ldr	r0, [r4, #28]
 800843c:	f894 56db 	ldrb.w	r5, [r4, #1755]	; 0x6db
 8008440:	b120      	cbz	r0, 800844c <ArtNetNode::Run()+0x58>
 8008442:	6803      	ldr	r3, [r0, #0]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	4798      	blx	r3
 8008448:	4305      	orrs	r5, r0
 800844a:	b2ed      	uxtb	r5, r5
 800844c:	b11d      	cbz	r5, 8008456 <ArtNetNode::Run()+0x62>
 800844e:	2100      	movs	r1, #0
 8008450:	4620      	mov	r0, r4
 8008452:	f000 ff45 	bl	80092e0 <ArtNetNode::SendPollRelply(bool)>
 8008456:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800845a:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
 800845e:	1a9b      	subs	r3, r3, r2
 8008460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008464:	d305      	bcc.n	8008472 <ArtNetNode::Run()+0x7e>
 8008466:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 800846a:	f023 0302 	bic.w	r3, r3, #2
 800846e:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 8008472:	6963      	ldr	r3, [r4, #20]
 8008474:	b113      	cbz	r3, 800847c <ArtNetNode::Run()+0x88>
 8008476:	4620      	mov	r0, r4
 8008478:	f000 fd46 	bl	8008f08 <ArtNetNode::HandleDmxIn()>
 800847c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008480:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008484:	2bc0      	cmp	r3, #192	; 0xc0
 8008486:	d10c      	bne.n	80084a2 <ArtNetNode::Run()+0xae>
 8008488:	4b48      	ldr	r3, [pc, #288]	; (80085ac <ArtNetNode::Run()+0x1b8>)
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	6843      	ldr	r3, [r0, #4]
 800848e:	2b04      	cmp	r3, #4
 8008490:	d007      	beq.n	80084a2 <ArtNetNode::Run()+0xae>
 8008492:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 8084 	beq.w	80085a4 <ArtNetNode::Run()+0x1b0>
 800849c:	2103      	movs	r1, #3
 800849e:	f00a fa13 	bl	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 80084a2:	b005      	add	sp, #20
 80084a4:	bd30      	pop	{r4, r5, pc}
 80084a6:	f8a4 0570 	strh.w	r0, [r4, #1392]	; 0x570
 80084aa:	f8c4 3668 	str.w	r3, [r4, #1640]	; 0x668
 80084ae:	4620      	mov	r0, r4
 80084b0:	f7ff ff78 	bl	80083a4 <ArtNetNode::GetType()>
 80084b4:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 80084b8:	b153      	cbz	r3, 80084d0 <ArtNetNode::Run()+0xdc>
 80084ba:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 80084be:	f8d4 26d0 	ldr.w	r2, [r4, #1744]	; 0x6d0
 80084c2:	1a9b      	subs	r3, r3, r2
 80084c4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80084c8:	bf24      	itt	cs
 80084ca:	2300      	movcs	r3, #0
 80084cc:	f884 36d9 	strbcs.w	r3, [r4, #1753]	; 0x6d9
 80084d0:	f8b4 3572 	ldrh.w	r3, [r4, #1394]	; 0x572
 80084d4:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 80084d8:	d04c      	beq.n	8008574 <ArtNetNode::Run()+0x180>
 80084da:	d81d      	bhi.n	8008518 <ArtNetNode::Run()+0x124>
 80084dc:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 80084e0:	d039      	beq.n	8008556 <ArtNetNode::Run()+0x162>
 80084e2:	d80c      	bhi.n	80084fe <ArtNetNode::Run()+0x10a>
 80084e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084e8:	d031      	beq.n	800854e <ArtNetNode::Run()+0x15a>
 80084ea:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80084ee:	d1c0      	bne.n	8008472 <ArtNetNode::Run()+0x7e>
 80084f0:	68a3      	ldr	r3, [r4, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d0bd      	beq.n	8008472 <ArtNetNode::Run()+0x7e>
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 fc1e 	bl	8008d38 <ArtNetNode::HandleDmx()>
 80084fc:	e7b9      	b.n	8008472 <ArtNetNode::Run()+0x7e>
 80084fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008502:	d02f      	beq.n	8008564 <ArtNetNode::Run()+0x170>
 8008504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008508:	d1b3      	bne.n	8008472 <ArtNetNode::Run()+0x7e>
 800850a:	6923      	ldr	r3, [r4, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0b0      	beq.n	8008472 <ArtNetNode::Run()+0x7e>
 8008510:	4620      	mov	r0, r4
 8008512:	f001 f879 	bl	8009608 <ArtNetNode::HandleTodRequest()>
 8008516:	e7ac      	b.n	8008472 <ArtNetNode::Run()+0x7e>
 8008518:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800851c:	d026      	beq.n	800856c <ArtNetNode::Run()+0x178>
 800851e:	d80c      	bhi.n	800853a <ArtNetNode::Run()+0x146>
 8008520:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8008524:	d02e      	beq.n	8008584 <ArtNetNode::Run()+0x190>
 8008526:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 800852a:	d1a2      	bne.n	8008472 <ArtNetNode::Run()+0x7e>
 800852c:	68e3      	ldr	r3, [r4, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d09f      	beq.n	8008472 <ArtNetNode::Run()+0x7e>
 8008532:	4620      	mov	r0, r4
 8008534:	f001 f948 	bl	80097c8 <ArtNetNode::HandleTimeCode()>
 8008538:	e79b      	b.n	8008472 <ArtNetNode::Run()+0x7e>
 800853a:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800853e:	d029      	beq.n	8008594 <ArtNetNode::Run()+0x1a0>
 8008540:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8008544:	d195      	bne.n	8008472 <ArtNetNode::Run()+0x7e>
 8008546:	4620      	mov	r0, r4
 8008548:	f000 fd8c 	bl	8009064 <ArtNetNode::HandleIpProg()>
 800854c:	e791      	b.n	8008472 <ArtNetNode::Run()+0x7e>
 800854e:	4620      	mov	r0, r4
 8008550:	f000 ff8c 	bl	800946c <ArtNetNode::HandlePoll()>
 8008554:	e78d      	b.n	8008472 <ArtNetNode::Run()+0x7e>
 8008556:	68a3      	ldr	r3, [r4, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d08a      	beq.n	8008472 <ArtNetNode::Run()+0x7e>
 800855c:	4620      	mov	r0, r4
 800855e:	f001 f8e7 	bl	8009730 <ArtNetNode::HandleSync()>
 8008562:	e786      	b.n	8008472 <ArtNetNode::Run()+0x7e>
 8008564:	4620      	mov	r0, r4
 8008566:	f000 f9d3 	bl	8008910 <ArtNetNode::HandleAddress()>
 800856a:	e782      	b.n	8008472 <ArtNetNode::Run()+0x7e>
 800856c:	4620      	mov	r0, r4
 800856e:	f001 f931 	bl	80097d4 <ArtNetNode::HandleTimeSync()>
 8008572:	e77e      	b.n	8008472 <ArtNetNode::Run()+0x7e>
 8008574:	6923      	ldr	r3, [r4, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f43f af7b 	beq.w	8008472 <ArtNetNode::Run()+0x7e>
 800857c:	4620      	mov	r0, r4
 800857e:	f001 f809 	bl	8009594 <ArtNetNode::HandleTodControl()>
 8008582:	e776      	b.n	8008472 <ArtNetNode::Run()+0x7e>
 8008584:	6923      	ldr	r3, [r4, #16]
 8008586:	2b00      	cmp	r3, #0
 8008588:	f43f af73 	beq.w	8008472 <ArtNetNode::Run()+0x7e>
 800858c:	4620      	mov	r0, r4
 800858e:	f001 f861 	bl	8009654 <ArtNetNode::HandleRdm()>
 8008592:	e76e      	b.n	8008472 <ArtNetNode::Run()+0x7e>
 8008594:	69a3      	ldr	r3, [r4, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f43f af6b 	beq.w	8008472 <ArtNetNode::Run()+0x7e>
 800859c:	4620      	mov	r0, r4
 800859e:	f001 feeb 	bl	800a378 <ArtNetNode::HandleTrigger()>
 80085a2:	e766      	b.n	8008472 <ArtNetNode::Run()+0x7e>
 80085a4:	2102      	movs	r1, #2
 80085a6:	e77a      	b.n	800849e <ArtNetNode::Run()+0xaa>
 80085a8:	2000af0c 	andcs	sl, r0, ip, lsl #30
 80085ac:	2000aef0 	strdcs	sl, [r0], -r0

080085b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 80085b0:	b93b      	cbnz	r3, 80085c2 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 80085b2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80085b6:	f8b0 3774 	ldrh.w	r3, [r0, #1908]	; 0x774
 80085ba:	8013      	strh	r3, [r2, #0]
 80085bc:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 80085c0:	4770      	bx	lr
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	bf01      	itttt	eq
 80085c6:	2324      	moveq	r3, #36	; 0x24
 80085c8:	fb03 0001 	mlaeq	r0, r3, r1, r0
 80085cc:	f8b0 36e4 	ldrheq.w	r3, [r0, #1764]	; 0x6e4
 80085d0:	f890 06e8 	ldrbeq.w	r0, [r0, #1768]	; 0x6e8
 80085d4:	bf0c      	ite	eq
 80085d6:	8013      	strheq	r3, [r2, #0]
 80085d8:	2000      	movne	r0, #0
 80085da:	4770      	bx	lr

080085dc <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 80085dc:	b94b      	cbnz	r3, 80085f2 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 80085de:	2903      	cmp	r1, #3
 80085e0:	d810      	bhi.n	8008604 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x28>
 80085e2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 80085e6:	f890 3776 	ldrb.w	r3, [r0, #1910]	; 0x776
 80085ea:	7013      	strb	r3, [r2, #0]
 80085ec:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 80085f0:	4770      	bx	lr
 80085f2:	2324      	movs	r3, #36	; 0x24
 80085f4:	fb03 0001 	mla	r0, r3, r1, r0
 80085f8:	f890 36e6 	ldrb.w	r3, [r0, #1766]	; 0x6e6
 80085fc:	7013      	strb	r3, [r2, #0]
 80085fe:	f890 06e8 	ldrb.w	r0, [r0, #1768]	; 0x6e8
 8008602:	4770      	bx	lr
 8008604:	4618      	mov	r0, r3
 8008606:	4770      	bx	lr

08008608 <ArtNetNode::GetSubnetSwitch(unsigned int) const>:
 8008608:	4408      	add	r0, r1
 800860a:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 800860e:	4770      	bx	lr

08008610 <ArtNetNode::GetNetSwitch(unsigned int) const>:
 8008610:	4408      	add	r0, r1
 8008612:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8008616:	4770      	bx	lr

08008618 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 8008618:	4402      	add	r2, r0
 800861a:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 800861e:	f892 003f 	ldrb.w	r0, [r2, #63]	; 0x3f
 8008622:	021b      	lsls	r3, r3, #8
 8008624:	0100      	lsls	r0, r0, #4
 8008626:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800862a:	b2c0      	uxtb	r0, r0
 800862c:	4318      	orrs	r0, r3
 800862e:	f001 010f 	and.w	r1, r1, #15
 8008632:	4308      	orrs	r0, r1
 8008634:	4770      	bx	lr

08008636 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 8008636:	2903      	cmp	r1, #3
 8008638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800863c:	4604      	mov	r4, r0
 800863e:	460d      	mov	r5, r1
 8008640:	4617      	mov	r7, r2
 8008642:	461e      	mov	r6, r3
 8008644:	f200 80a3 	bhi.w	800878e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x158>
 8008648:	2a02      	cmp	r2, #2
 800864a:	d121      	bne.n	8008690 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 800864c:	2324      	movs	r3, #36	; 0x24
 800864e:	fb03 0301 	mla	r3, r3, r1, r0
 8008652:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 8008656:	b13a      	cbz	r2, 8008668 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 8008658:	2200      	movs	r2, #0
 800865a:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 800865e:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 8008662:	3b01      	subs	r3, #1
 8008664:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 8008668:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800866c:	f895 3778 	ldrb.w	r3, [r5, #1912]	; 0x778
 8008670:	b90b      	cbnz	r3, 8008676 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 8008672:	2000      	movs	r0, #0
 8008674:	e00a      	b.n	800868c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 8008676:	2308      	movs	r3, #8
 8008678:	2000      	movs	r0, #0
 800867a:	f885 3777 	strb.w	r3, [r5, #1911]	; 0x777
 800867e:	f885 0778 	strb.w	r0, [r5, #1912]	; 0x778
 8008682:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 8008686:	3b01      	subs	r3, #1
 8008688:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 800868c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008690:	2a00      	cmp	r2, #0
 8008692:	d13b      	bne.n	800870c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd6>
 8008694:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 8008698:	f898 3778 	ldrb.w	r3, [r8, #1912]	; 0x778
 800869c:	b923      	cbnz	r3, 80086a8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x72>
 800869e:	f890 36df 	ldrb.w	r3, [r0, #1759]	; 0x6df
 80086a2:	3301      	adds	r3, #1
 80086a4:	f880 36df 	strb.w	r3, [r0, #1759]	; 0x6df
 80086a8:	2301      	movs	r3, #1
 80086aa:	f04f 0900 	mov.w	r9, #0
 80086ae:	f888 3778 	strb.w	r3, [r8, #1912]	; 0x778
 80086b2:	f006 030f 	and.w	r3, r6, #15
 80086b6:	464a      	mov	r2, r9
 80086b8:	f888 3776 	strb.w	r3, [r8, #1910]	; 0x776
 80086bc:	4631      	mov	r1, r6
 80086be:	4620      	mov	r0, r4
 80086c0:	f888 9777 	strb.w	r9, [r8, #1911]	; 0x777
 80086c4:	f7ff ffa8 	bl	8008618 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 80086c8:	2324      	movs	r3, #36	; 0x24
 80086ca:	fb03 4305 	mla	r3, r3, r5, r4
 80086ce:	f8a8 0774 	strh.w	r0, [r8, #1908]	; 0x774
 80086d2:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 80086d6:	b132      	cbz	r2, 80086e6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 80086d8:	f883 96e8 	strb.w	r9, [r3, #1768]	; 0x6e8
 80086dc:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 80086e0:	3b01      	subs	r3, #1
 80086e2:	f884 36de 	strb.w	r3, [r4, #1758]	; 0x6de
 80086e6:	69e0      	ldr	r0, [r4, #28]
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d044      	beq.n	8008776 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x140>
 80086ec:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d13b      	bne.n	800876c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 80086f4:	6a20      	ldr	r0, [r4, #32]
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d143      	bne.n	8008782 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14c>
 80086fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d0b8      	beq.n	8008672 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8008700:	6803      	ldr	r3, [r0, #0]
 8008702:	4632      	mov	r2, r6
 8008704:	4629      	mov	r1, r5
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	4798      	blx	r3
 800870a:	e7b2      	b.n	8008672 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 800870c:	2a01      	cmp	r2, #1
 800870e:	d1ea      	bne.n	80086e6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8008710:	f04f 0824 	mov.w	r8, #36	; 0x24
 8008714:	fb08 0301 	mla	r3, r8, r1, r0
 8008718:	f893 36e8 	ldrb.w	r3, [r3, #1768]	; 0x6e8
 800871c:	b923      	cbnz	r3, 8008728 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf2>
 800871e:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 8008722:	3301      	adds	r3, #1
 8008724:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 8008728:	2301      	movs	r3, #1
 800872a:	fb08 4805 	mla	r8, r8, r5, r4
 800872e:	f888 36e8 	strb.w	r3, [r8, #1768]	; 0x6e8
 8008732:	f006 030f 	and.w	r3, r6, #15
 8008736:	2200      	movs	r2, #0
 8008738:	f888 36e6 	strb.w	r3, [r8, #1766]	; 0x6e6
 800873c:	4631      	mov	r1, r6
 800873e:	4620      	mov	r0, r4
 8008740:	f7ff ff6a 	bl	8008618 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8008744:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8008748:	f8a8 06e4 	strh.w	r0, [r8, #1764]	; 0x6e4
 800874c:	f893 2778 	ldrb.w	r2, [r3, #1912]	; 0x778
 8008750:	2a00      	cmp	r2, #0
 8008752:	d0c8      	beq.n	80086e6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 800875a:	2208      	movs	r2, #8
 800875c:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 8008760:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 8008764:	3b01      	subs	r3, #1
 8008766:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 800876a:	e7bc      	b.n	80086e6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 800876c:	6803      	ldr	r3, [r0, #0]
 800876e:	463a      	mov	r2, r7
 8008770:	4629      	mov	r1, r5
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	4798      	blx	r3
 8008776:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800877a:	2b02      	cmp	r3, #2
 800877c:	f47f af79 	bne.w	8008672 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8008780:	e7b8      	b.n	80086f4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 8008782:	6803      	ldr	r3, [r0, #0]
 8008784:	4632      	mov	r2, r6
 8008786:	4629      	mov	r1, r5
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	4798      	blx	r3
 800878c:	e7b5      	b.n	80086fa <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 800878e:	f06f 0004 	mvn.w	r0, #4
 8008792:	e77b      	b.n	800868c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

08008794 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 8008794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008798:	2524      	movs	r5, #36	; 0x24
 800879a:	4604      	mov	r4, r0
 800879c:	460f      	mov	r7, r1
 800879e:	4616      	mov	r6, r2
 80087a0:	1883      	adds	r3, r0, r2
 80087a2:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 80087a6:	0093      	lsls	r3, r2, #2
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	fb05 0503 	mla	r5, r5, r3, r0
 80087ae:	f103 0905 	add.w	r9, r3, #5
 80087b2:	f103 0801 	add.w	r8, r3, #1
 80087b6:	45c8      	cmp	r8, r9
 80087b8:	f105 0524 	add.w	r5, r5, #36	; 0x24
 80087bc:	d009      	beq.n	80087d2 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x3e>
 80087be:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 80087c2:	089a      	lsrs	r2, r3, #2
 80087c4:	4620      	mov	r0, r4
 80087c6:	f7ff ff27 	bl	8008618 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 80087ca:	4643      	mov	r3, r8
 80087cc:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 80087d0:	e7ef      	b.n	80087b2 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x1e>
 80087d2:	6a20      	ldr	r0, [r4, #32]
 80087d4:	b150      	cbz	r0, 80087ec <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 80087d6:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d106      	bne.n	80087ec <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 80087de:	b92e      	cbnz	r6, 80087ec <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 80087e0:	6803      	ldr	r3, [r0, #0]
 80087e2:	4639      	mov	r1, r7
 80087e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	4718      	bx	r3
 80087ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080087f0 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 80087f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f4:	2524      	movs	r5, #36	; 0x24
 80087f6:	4604      	mov	r4, r0
 80087f8:	460f      	mov	r7, r1
 80087fa:	4616      	mov	r6, r2
 80087fc:	1883      	adds	r3, r0, r2
 80087fe:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
 8008802:	0093      	lsls	r3, r2, #2
 8008804:	b2db      	uxtb	r3, r3
 8008806:	fb05 0503 	mla	r5, r5, r3, r0
 800880a:	f103 0905 	add.w	r9, r3, #5
 800880e:	f103 0801 	add.w	r8, r3, #1
 8008812:	45c8      	cmp	r8, r9
 8008814:	f105 0524 	add.w	r5, r5, #36	; 0x24
 8008818:	d009      	beq.n	800882e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x3e>
 800881a:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 800881e:	089a      	lsrs	r2, r3, #2
 8008820:	4620      	mov	r0, r4
 8008822:	f7ff fef9 	bl	8008618 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8008826:	4643      	mov	r3, r8
 8008828:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 800882c:	e7ef      	b.n	800880e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x1e>
 800882e:	6a20      	ldr	r0, [r4, #32]
 8008830:	b150      	cbz	r0, 8008848 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 8008832:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8008836:	2b02      	cmp	r3, #2
 8008838:	d106      	bne.n	8008848 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800883a:	b92e      	cbnz	r6, 8008848 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800883c:	6803      	ldr	r3, [r0, #0]
 800883e:	4639      	mov	r1, r7
 8008840:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	4718      	bx	r3
 8008848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800884c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	4616      	mov	r6, r2
 8008850:	2224      	movs	r2, #36	; 0x24
 8008852:	fb02 0301 	mla	r3, r2, r1, r0
 8008856:	fb02 0201 	mla	r2, r2, r1, r0
 800885a:	f8c3 6700 	str.w	r6, [r3, #1792]	; 0x700
 800885e:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 8008862:	2e01      	cmp	r6, #1
 8008864:	bf0c      	ite	eq
 8008866:	f043 0301 	orreq.w	r3, r3, #1
 800886a:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800886e:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 8008872:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 8008876:	4605      	mov	r5, r0
 8008878:	2b02      	cmp	r3, #2
 800887a:	460c      	mov	r4, r1
 800887c:	d110      	bne.n	80088a0 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 800887e:	2903      	cmp	r1, #3
 8008880:	d80e      	bhi.n	80088a0 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 8008882:	6a00      	ldr	r0, [r0, #32]
 8008884:	b118      	cbz	r0, 800888e <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 8008886:	6803      	ldr	r3, [r0, #0]
 8008888:	4632      	mov	r2, r6
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	4798      	blx	r3
 800888e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008890:	b130      	cbz	r0, 80088a0 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 8008892:	6803      	ldr	r3, [r0, #0]
 8008894:	4632      	mov	r2, r6
 8008896:	4621      	mov	r1, r4
 8008898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	4718      	bx	r3
 80088a0:	bd70      	pop	{r4, r5, r6, pc}

080088a2 <ArtNetNode::GetPortProtocol(unsigned int) const>:
 80088a2:	2324      	movs	r3, #36	; 0x24
 80088a4:	fb03 0001 	mla	r0, r3, r1, r0
 80088a8:	f8d0 0700 	ldr.w	r0, [r0, #1792]	; 0x700
 80088ac:	4770      	bx	lr

080088ae <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 80088ae:	b570      	push	{r4, r5, r6, lr}
 80088b0:	4616      	mov	r6, r2
 80088b2:	2224      	movs	r2, #36	; 0x24
 80088b4:	fb02 0301 	mla	r3, r2, r1, r0
 80088b8:	fb02 0201 	mla	r2, r2, r1, r0
 80088bc:	f8c3 66fc 	str.w	r6, [r3, #1788]	; 0x6fc
 80088c0:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 80088c4:	2e01      	cmp	r6, #1
 80088c6:	bf0c      	ite	eq
 80088c8:	f043 0302 	orreq.w	r3, r3, #2
 80088cc:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 80088d0:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 80088d4:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 80088d8:	4605      	mov	r5, r0
 80088da:	2b02      	cmp	r3, #2
 80088dc:	460c      	mov	r4, r1
 80088de:	d110      	bne.n	8008902 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 80088e0:	2903      	cmp	r1, #3
 80088e2:	d80e      	bhi.n	8008902 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 80088e4:	6a00      	ldr	r0, [r0, #32]
 80088e6:	b118      	cbz	r0, 80088f0 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 80088e8:	6803      	ldr	r3, [r0, #0]
 80088ea:	4632      	mov	r2, r6
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	4798      	blx	r3
 80088f0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80088f2:	b130      	cbz	r0, 8008902 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 80088f4:	6803      	ldr	r3, [r0, #0]
 80088f6:	4632      	mov	r2, r6
 80088f8:	4621      	mov	r1, r4
 80088fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	4718      	bx	r3
 8008902:	bd70      	pop	{r4, r5, r6, pc}

08008904 <ArtNetNode::GetMergeMode(unsigned int) const>:
 8008904:	2324      	movs	r3, #36	; 0x24
 8008906:	fb03 0001 	mla	r0, r3, r1, r0
 800890a:	f8d0 06fc 	ldr.w	r0, [r0, #1788]	; 0x6fc
 800890e:	4770      	bx	lr

08008910 <ArtNetNode::HandleAddress()>:
 8008910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008914:	2301      	movs	r3, #1
 8008916:	f880 36d4 	strb.w	r3, [r0, #1748]	; 0x6d4
 800891a:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800891e:	4604      	mov	r4, r0
 8008920:	b133      	cbz	r3, 8008930 <ArtNetNode::HandleAddress()+0x20>
 8008922:	f100 01ae 	add.w	r1, r0, #174	; 0xae
 8008926:	f7ff fc03 	bl	8008130 <ArtNetNode::SetShortName(char const*)>
 800892a:	2306      	movs	r3, #6
 800892c:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 8008930:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8008934:	b13b      	cbz	r3, 8008946 <ArtNetNode::HandleAddress()+0x36>
 8008936:	4620      	mov	r0, r4
 8008938:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 800893c:	f7ff fc20 	bl	8008180 <ArtNetNode::SetLongName(char const*)>
 8008940:	2307      	movs	r3, #7
 8008942:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 8008946:	f894 50ad 	ldrb.w	r5, [r4, #173]	; 0xad
 800894a:	b105      	cbz	r5, 800894e <ArtNetNode::HandleAddress()+0x3e>
 800894c:	3d01      	subs	r5, #1
 800894e:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 8008952:	2900      	cmp	r1, #0
 8008954:	d13d      	bne.n	80089d2 <ArtNetNode::HandleAddress()+0xc2>
 8008956:	462a      	mov	r2, r5
 8008958:	4620      	mov	r0, r4
 800895a:	f7ff ff1b 	bl	8008794 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800895e:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 8008962:	2900      	cmp	r1, #0
 8008964:	d13b      	bne.n	80089de <ArtNetNode::HandleAddress()+0xce>
 8008966:	462a      	mov	r2, r5
 8008968:	4620      	mov	r0, r4
 800896a:	f7ff ff41 	bl	80087f0 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800896e:	00ad      	lsls	r5, r5, #2
 8008970:	b2ed      	uxtb	r5, r5
 8008972:	4627      	mov	r7, r4
 8008974:	462e      	mov	r6, r5
 8008976:	f504 7882 	add.w	r8, r4, #260	; 0x104
 800897a:	f504 7984 	add.w	r9, r4, #264	; 0x108
 800897e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008982:	2b7f      	cmp	r3, #127	; 0x7f
 8008984:	d006      	beq.n	8008994 <ArtNetNode::HandleAddress()+0x84>
 8008986:	bb83      	cbnz	r3, 80089ea <ArtNetNode::HandleAddress()+0xda>
 8008988:	2301      	movs	r3, #1
 800898a:	2201      	movs	r2, #1
 800898c:	4631      	mov	r1, r6
 800898e:	4620      	mov	r0, r4
 8008990:	f7ff fe51 	bl	8008636 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8008994:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 8008998:	2a7f      	cmp	r2, #127	; 0x7f
 800899a:	d005      	beq.n	80089a8 <ArtNetNode::HandleAddress()+0x98>
 800899c:	bb52      	cbnz	r2, 80089f4 <ArtNetNode::HandleAddress()+0xe4>
 800899e:	2301      	movs	r3, #1
 80089a0:	4631      	mov	r1, r6
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7ff fe47 	bl	8008636 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 80089a8:	3601      	adds	r6, #1
 80089aa:	45c1      	cmp	r9, r8
 80089ac:	b2f6      	uxtb	r6, r6
 80089ae:	d1e6      	bne.n	800897e <ArtNetNode::HandleAddress()+0x6e>
 80089b0:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 80089b4:	2913      	cmp	r1, #19
 80089b6:	d823      	bhi.n	8008a00 <ArtNetNode::HandleAddress()+0xf0>
 80089b8:	290f      	cmp	r1, #15
 80089ba:	f200 8092 	bhi.w	8008ae2 <ArtNetNode::HandleAddress()+0x1d2>
 80089be:	3901      	subs	r1, #1
 80089c0:	b2cb      	uxtb	r3, r1
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d82a      	bhi.n	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 80089c6:	2903      	cmp	r1, #3
 80089c8:	d828      	bhi.n	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 80089ca:	e8df f001 	tbb	[pc, r1]
 80089ce:	7e726654 	mrcvc	6, 3, r6, cr2, cr4, {2}
 80089d2:	060f      	lsls	r7, r1, #24
 80089d4:	d5c3      	bpl.n	800895e <ArtNetNode::HandleAddress()+0x4e>
 80089d6:	462a      	mov	r2, r5
 80089d8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80089dc:	e7bc      	b.n	8008958 <ArtNetNode::HandleAddress()+0x48>
 80089de:	060e      	lsls	r6, r1, #24
 80089e0:	d5c5      	bpl.n	800896e <ArtNetNode::HandleAddress()+0x5e>
 80089e2:	462a      	mov	r2, r5
 80089e4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80089e8:	e7be      	b.n	8008968 <ArtNetNode::HandleAddress()+0x58>
 80089ea:	0618      	lsls	r0, r3, #24
 80089ec:	d5d2      	bpl.n	8008994 <ArtNetNode::HandleAddress()+0x84>
 80089ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f2:	e7ca      	b.n	800898a <ArtNetNode::HandleAddress()+0x7a>
 80089f4:	0611      	lsls	r1, r2, #24
 80089f6:	d5d7      	bpl.n	80089a8 <ArtNetNode::HandleAddress()+0x98>
 80089f8:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80089fc:	2200      	movs	r2, #0
 80089fe:	e7cf      	b.n	80089a0 <ArtNetNode::HandleAddress()+0x90>
 8008a00:	2973      	cmp	r1, #115	; 0x73
 8008a02:	d818      	bhi.n	8008a36 <ArtNetNode::HandleAddress()+0x126>
 8008a04:	296f      	cmp	r1, #111	; 0x6f
 8008a06:	d87a      	bhi.n	8008afe <ArtNetNode::HandleAddress()+0x1ee>
 8008a08:	2953      	cmp	r1, #83	; 0x53
 8008a0a:	d803      	bhi.n	8008a14 <ArtNetNode::HandleAddress()+0x104>
 8008a0c:	294f      	cmp	r1, #79	; 0x4f
 8008a0e:	d905      	bls.n	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 8008a10:	2200      	movs	r2, #0
 8008a12:	e067      	b.n	8008ae4 <ArtNetNode::HandleAddress()+0x1d4>
 8008a14:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d969      	bls.n	8008af0 <ArtNetNode::HandleAddress()+0x1e0>
 8008a1c:	69e0      	ldr	r0, [r4, #28]
 8008a1e:	b120      	cbz	r0, 8008a2a <ArtNetNode::HandleAddress()+0x11a>
 8008a20:	6803      	ldr	r3, [r0, #0]
 8008a22:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	4798      	blx	r3
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a30:	2101      	movs	r1, #1
 8008a32:	f000 bc55 	b.w	80092e0 <ArtNetNode::SendPollRelply(bool)>
 8008a36:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d8ed      	bhi.n	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 8008a40:	4b45      	ldr	r3, [pc, #276]	; (8008b58 <ArtNetNode::HandleAddress()+0x248>)
 8008a42:	f001 0103 	and.w	r1, r1, #3
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	440d      	add	r5, r1
 8008a4a:	07d2      	lsls	r2, r2, #31
 8008a4c:	bf5c      	itt	pl
 8008a4e:	2201      	movpl	r2, #1
 8008a50:	601a      	strpl	r2, [r3, #0]
 8008a52:	f240 6204 	movw	r2, #1540	; 0x604
 8008a56:	b2ed      	uxtb	r5, r5
 8008a58:	436a      	muls	r2, r5
 8008a5a:	4b40      	ldr	r3, [pc, #256]	; (8008b5c <ArtNetNode::HandleAddress()+0x24c>)
 8008a5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a60:	441a      	add	r2, r3
 8008a62:	4611      	mov	r1, r2
 8008a64:	2600      	movs	r6, #0
 8008a66:	68a0      	ldr	r0, [r4, #8]
 8008a68:	f502 7700 	add.w	r7, r2, #512	; 0x200
 8008a6c:	42b9      	cmp	r1, r7
 8008a6e:	d048      	beq.n	8008b02 <ArtNetNode::HandleAddress()+0x1f2>
 8008a70:	f801 6b01 	strb.w	r6, [r1], #1
 8008a74:	e7fa      	b.n	8008a6c <ArtNetNode::HandleAddress()+0x15c>
 8008a76:	2300      	movs	r3, #0
 8008a78:	2224      	movs	r2, #36	; 0x24
 8008a7a:	f884 36da 	strb.w	r3, [r4, #1754]	; 0x6da
 8008a7e:	7823      	ldrb	r3, [r4, #0]
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	fb02 4303 	mla	r3, r2, r3, r4
 8008a86:	429f      	cmp	r7, r3
 8008a88:	d0c8      	beq.n	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 8008a8a:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 8008a8e:	3724      	adds	r7, #36	; 0x24
 8008a90:	f022 0208 	bic.w	r2, r2, #8
 8008a94:	f887 26c3 	strb.w	r2, [r7, #1731]	; 0x6c3
 8008a98:	e7f5      	b.n	8008a86 <ArtNetNode::HandleAddress()+0x176>
 8008a9a:	4b31      	ldr	r3, [pc, #196]	; (8008b60 <ArtNetNode::HandleAddress()+0x250>)
 8008a9c:	2102      	movs	r1, #2
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	f009 ff12 	bl	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 8008aa4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008aa8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8008aac:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008ab0:	e7b4      	b.n	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 8008ab2:	4b2b      	ldr	r3, [pc, #172]	; (8008b60 <ArtNetNode::HandleAddress()+0x250>)
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	f009 ff06 	bl	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 8008abc:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ac8:	e7f0      	b.n	8008aac <ArtNetNode::HandleAddress()+0x19c>
 8008aca:	4b25      	ldr	r3, [pc, #148]	; (8008b60 <ArtNetNode::HandleAddress()+0x250>)
 8008acc:	2104      	movs	r1, #4
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	f009 fefa 	bl	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 8008ad4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ae0:	e7e4      	b.n	8008aac <ArtNetNode::HandleAddress()+0x19c>
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f001 0103 	and.w	r1, r1, #3
 8008aea:	f7ff fee0 	bl	80088ae <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 8008aee:	e795      	b.n	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 8008af0:	2200      	movs	r2, #0
 8008af2:	4620      	mov	r0, r4
 8008af4:	f001 0103 	and.w	r1, r1, #3
 8008af8:	f7ff fea8 	bl	800884c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 8008afc:	e78e      	b.n	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 8008afe:	2201      	movs	r2, #1
 8008b00:	e7f7      	b.n	8008af2 <ArtNetNode::HandleAddress()+0x1e2>
 8008b02:	f240 6104 	movw	r1, #1540	; 0x604
 8008b06:	fb01 3105 	mla	r1, r1, r5, r3
 8008b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b0e:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 8008b12:	6801      	ldr	r1, [r0, #0]
 8008b14:	690e      	ldr	r6, [r1, #16]
 8008b16:	4629      	mov	r1, r5
 8008b18:	47b0      	blx	r6
 8008b1a:	2d03      	cmp	r5, #3
 8008b1c:	f63f af7e 	bhi.w	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 8008b20:	2624      	movs	r6, #36	; 0x24
 8008b22:	fb06 4605 	mla	r6, r6, r5, r4
 8008b26:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f47f af76 	bne.w	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 8008b30:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f47f af71 	bne.w	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 8008b3a:	68a0      	ldr	r0, [r4, #8]
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	6803      	ldr	r3, [r0, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	4798      	blx	r3
 8008b44:	2301      	movs	r3, #1
 8008b46:	f886 3705 	strb.w	r3, [r6, #1797]	; 0x705
 8008b4a:	f896 36e7 	ldrb.w	r3, [r6, #1767]	; 0x6e7
 8008b4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b52:	f886 36e7 	strb.w	r3, [r6, #1767]	; 0x6e7
 8008b56:	e761      	b.n	8008a1c <ArtNetNode::HandleAddress()+0x10c>
 8008b58:	200000fc 	strdcs	r0, [r0], -ip
 8008b5c:	20000100 	andcs	r0, r0, r0, lsl #2
 8008b60:	2000aef0 	strdcs	sl, [r0], -r0

08008b64 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 8008b64:	f240 6304 	movw	r3, #1540	; 0x604
 8008b68:	fb03 0101 	mla	r1, r3, r1, r0
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	b510      	push	{r4, lr}
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00a      	beq.n	8008b8a <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x26>
 8008b74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b78:	3301      	adds	r3, #1
 8008b7a:	f891 01ff 	ldrb.w	r0, [r1, #511]	; 0x1ff
 8008b7e:	42a0      	cmp	r0, r4
 8008b80:	bf38      	it	cc
 8008b82:	4620      	movcc	r0, r4
 8008b84:	f881 03ff 	strb.w	r0, [r1, #1023]	; 0x3ff
 8008b88:	e7f2      	b.n	8008b70 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>
 8008b8a:	bd10      	pop	{r4, pc}

08008b8c <memcpy.isra.0>:
 8008b8c:	3801      	subs	r0, #1
 8008b8e:	440a      	add	r2, r1
 8008b90:	4291      	cmp	r1, r2
 8008b92:	d004      	beq.n	8008b9e <memcpy.isra.0+0x12>
 8008b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b98:	f800 3f01 	strb.w	r3, [r0, #1]!
 8008b9c:	e7f8      	b.n	8008b90 <memcpy.isra.0+0x4>
 8008b9e:	4770      	bx	lr

08008ba0 <lightset::Data::Get()>:
 8008ba0:	4b03      	ldr	r3, [pc, #12]	; (8008bb0 <lightset::Data::Get()+0x10>)
 8008ba2:	4804      	ldr	r0, [pc, #16]	; (8008bb4 <lightset::Data::Get()+0x14>)
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	07d2      	lsls	r2, r2, #31
 8008ba8:	bf5c      	itt	pl
 8008baa:	2201      	movpl	r2, #1
 8008bac:	601a      	strpl	r2, [r3, #0]
 8008bae:	4770      	bx	lr
 8008bb0:	200000fc 	strdcs	r0, [r0], -ip
 8008bb4:	20000100 	andcs	r0, r0, r0, lsl #2

08008bb8 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 8008bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bbc:	4615      	mov	r5, r2
 8008bbe:	460f      	mov	r7, r1
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	f7ff ffed 	bl	8008ba0 <lightset::Data::Get()>
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	f240 6004 	movw	r0, #1540	; 0x604
 8008bcc:	4344      	muls	r4, r0
 8008bce:	eb06 0804 	add.w	r8, r6, r4
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008bdc:	f7ff ffd6 	bl	8008b8c <memcpy.isra.0>
 8008be0:	462a      	mov	r2, r5
 8008be2:	4639      	mov	r1, r7
 8008be4:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 8008be8:	1930      	adds	r0, r6, r4
 8008bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bee:	f7ff bfcd 	b.w	8008b8c <memcpy.isra.0>

08008bf2 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 8008bf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf6:	4680      	mov	r8, r0
 8008bf8:	f240 6404 	movw	r4, #1540	; 0x604
 8008bfc:	4615      	mov	r5, r2
 8008bfe:	460f      	mov	r7, r1
 8008c00:	4699      	mov	r9, r3
 8008c02:	f7ff ffcd 	bl	8008ba0 <lightset::Data::Get()>
 8008c06:	fb04 f408 	mul.w	r4, r4, r8
 8008c0a:	eb00 0a04 	add.w	sl, r0, r4
 8008c0e:	4606      	mov	r6, r0
 8008c10:	462a      	mov	r2, r5
 8008c12:	4639      	mov	r1, r7
 8008c14:	4650      	mov	r0, sl
 8008c16:	f7ff ffb9 	bl	8008b8c <memcpy.isra.0>
 8008c1a:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 8008c1e:	f1b9 0f00 	cmp.w	r9, #0
 8008c22:	d106      	bne.n	8008c32 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 8008c24:	462a      	mov	r2, r5
 8008c26:	4641      	mov	r1, r8
 8008c28:	4630      	mov	r0, r6
 8008c2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2e:	f7ff bf99 	b.w	8008b64 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 8008c32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c36:	462a      	mov	r2, r5
 8008c38:	4639      	mov	r1, r7
 8008c3a:	1930      	adds	r0, r6, r4
 8008c3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	f7ff bfa4 	b.w	8008b8c <memcpy.isra.0>

08008c44 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 8008c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c48:	4616      	mov	r6, r2
 8008c4a:	4699      	mov	r9, r3
 8008c4c:	4680      	mov	r8, r0
 8008c4e:	460f      	mov	r7, r1
 8008c50:	f7ff ffa6 	bl	8008ba0 <lightset::Data::Get()>
 8008c54:	f240 6404 	movw	r4, #1540	; 0x604
 8008c58:	4605      	mov	r5, r0
 8008c5a:	fb04 f408 	mul.w	r4, r4, r8
 8008c5e:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8008c62:	4632      	mov	r2, r6
 8008c64:	4639      	mov	r1, r7
 8008c66:	4428      	add	r0, r5
 8008c68:	f7ff ff90 	bl	8008b8c <memcpy.isra.0>
 8008c6c:	192b      	adds	r3, r5, r4
 8008c6e:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 8008c72:	f1b9 0f00 	cmp.w	r9, #0
 8008c76:	d106      	bne.n	8008c86 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 8008c78:	4632      	mov	r2, r6
 8008c7a:	4641      	mov	r1, r8
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c82:	f7ff bf6f 	b.w	8008b64 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 8008c86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8008c8a:	4632      	mov	r2, r6
 8008c8c:	4639      	mov	r1, r7
 8008c8e:	1928      	adds	r0, r5, r4
 8008c90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c94:	f7ff bf7a 	b.w	8008b8c <memcpy.isra.0>

08008c98 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 8008c98:	f890 36da 	ldrb.w	r3, [r0, #1754]	; 0x6da
 8008c9c:	b91b      	cbnz	r3, 8008ca6 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 8008c9e:	f240 1301 	movw	r3, #257	; 0x101
 8008ca2:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 8008ca6:	2324      	movs	r3, #36	; 0x24
 8008ca8:	fb03 0001 	mla	r0, r3, r1, r0
 8008cac:	f890 36e7 	ldrb.w	r3, [r0, #1767]	; 0x6e7
 8008cb0:	f043 0308 	orr.w	r3, r3, #8
 8008cb4:	f880 36e7 	strb.w	r3, [r0, #1767]	; 0x6e7
 8008cb8:	4770      	bx	lr

08008cba <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 8008cba:	2324      	movs	r3, #36	; 0x24
 8008cbc:	b530      	push	{r4, r5, lr}
 8008cbe:	f242 7510 	movw	r5, #10000	; 0x2710
 8008cc2:	fb03 0301 	mla	r3, r3, r1, r0
 8008cc6:	f8d0 2664 	ldr.w	r2, [r0, #1636]	; 0x664
 8008cca:	f8d3 46ec 	ldr.w	r4, [r3, #1772]	; 0x6ec
 8008cce:	1b14      	subs	r4, r2, r4
 8008cd0:	42ac      	cmp	r4, r5
 8008cd2:	d908      	bls.n	8008ce6 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 8008cd4:	2400      	movs	r4, #0
 8008cd6:	f8c3 46f0 	str.w	r4, [r3, #1776]	; 0x6f0
 8008cda:	f893 46e7 	ldrb.w	r4, [r3, #1767]	; 0x6e7
 8008cde:	f024 0408 	bic.w	r4, r4, #8
 8008ce2:	f883 46e7 	strb.w	r4, [r3, #1767]	; 0x6e7
 8008ce6:	2324      	movs	r3, #36	; 0x24
 8008ce8:	fb03 0101 	mla	r1, r3, r1, r0
 8008cec:	f8d1 36f4 	ldr.w	r3, [r1, #1780]	; 0x6f4
 8008cf0:	1ad2      	subs	r2, r2, r3
 8008cf2:	f242 7310 	movw	r3, #10000	; 0x2710
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d908      	bls.n	8008d0c <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	f8c1 36f8 	str.w	r3, [r1, #1784]	; 0x6f8
 8008d00:	f891 36e7 	ldrb.w	r3, [r1, #1767]	; 0x6e7
 8008d04:	f023 0308 	bic.w	r3, r3, #8
 8008d08:	f881 36e7 	strb.w	r3, [r1, #1767]	; 0x6e7
 8008d0c:	2124      	movs	r1, #36	; 0x24
 8008d0e:	7803      	ldrb	r3, [r0, #0]
 8008d10:	4602      	mov	r2, r0
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	fb01 0303 	mla	r3, r1, r3, r0
 8008d18:	2100      	movs	r1, #0
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d006      	beq.n	8008d2c <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x72>
 8008d1e:	f892 46e7 	ldrb.w	r4, [r2, #1767]	; 0x6e7
 8008d22:	3224      	adds	r2, #36	; 0x24
 8008d24:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8008d28:	4321      	orrs	r1, r4
 8008d2a:	e7f6      	b.n	8008d1a <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x60>
 8008d2c:	b919      	cbnz	r1, 8008d36 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x7c>
 8008d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d32:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 8008d36:	bd30      	pop	{r4, r5, pc}

08008d38 <ArtNetNode::HandleDmx()>:
 8008d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	f8b0 70b0 	ldrh.w	r7, [r0, #176]	; 0xb0
 8008d40:	4604      	mov	r4, r0
 8008d42:	ba7f      	rev16	r7, r7
 8008d44:	b2bf      	uxth	r7, r7
 8008d46:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8008d4a:	bf28      	it	cs
 8008d4c:	f44f 7700 	movcs.w	r7, #512	; 0x200
 8008d50:	4605      	mov	r5, r0
 8008d52:	2600      	movs	r6, #0
 8008d54:	f04f 0901 	mov.w	r9, #1
 8008d58:	f100 08b2 	add.w	r8, r0, #178	; 0xb2
 8008d5c:	7823      	ldrb	r3, [r4, #0]
 8008d5e:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8008d62:	f080 809f 	bcs.w	8008ea4 <ArtNetNode::HandleDmx()+0x16c>
 8008d66:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d056      	beq.n	8008e1c <ArtNetNode::HandleDmx()+0xe4>
 8008d6e:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d152      	bne.n	8008e1c <ArtNetNode::HandleDmx()+0xe4>
 8008d76:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
 8008d7a:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d14c      	bne.n	8008e1c <ArtNetNode::HandleDmx()+0xe4>
 8008d82:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 8008d86:	f8d5 b6f0 	ldr.w	fp, [r5, #1776]	; 0x6f0
 8008d8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d8e:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 8008d92:	f894 36da 	ldrb.w	r3, [r4, #1754]	; 0x6da
 8008d96:	f8d5 a6f8 	ldr.w	sl, [r5, #1784]	; 0x6f8
 8008d9a:	b133      	cbz	r3, 8008daa <ArtNetNode::HandleDmx()+0x72>
 8008d9c:	f894 36dc 	ldrb.w	r3, [r4, #1756]	; 0x6dc
 8008da0:	b91b      	cbnz	r3, 8008daa <ArtNetNode::HandleDmx()+0x72>
 8008da2:	4631      	mov	r1, r6
 8008da4:	4620      	mov	r0, r4
 8008da6:	f7ff ff88 	bl	8008cba <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 8008daa:	ea5b 020a 	orrs.w	r2, fp, sl
 8008dae:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 8008db2:	d136      	bne.n	8008e22 <ArtNetNode::HandleDmx()+0xea>
 8008db4:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 8008db8:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8008dbc:	463a      	mov	r2, r7
 8008dbe:	4641      	mov	r1, r8
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 8008dc6:	f7ff fef7 	bl	8008bb8 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 8008dca:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 8008dce:	b9fb      	cbnz	r3, 8008e10 <ArtNetNode::HandleDmx()+0xd8>
 8008dd0:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8008dd4:	f7ff fee4 	bl	8008ba0 <lightset::Data::Get()>
 8008dd8:	f240 6304 	movw	r3, #1540	; 0x604
 8008ddc:	4373      	muls	r3, r6
 8008dde:	18c1      	adds	r1, r0, r3
 8008de0:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8008de4:	f8da 3000 	ldr.w	r3, [sl]
 8008de8:	4402      	add	r2, r0
 8008dea:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8008dee:	4650      	mov	r0, sl
 8008df0:	f8d1 3600 	ldr.w	r3, [r1, #1536]	; 0x600
 8008df4:	4631      	mov	r1, r6
 8008df6:	47d8      	blx	fp
 8008df8:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8008dfc:	b943      	cbnz	r3, 8008e10 <ArtNetNode::HandleDmx()+0xd8>
 8008dfe:	68a0      	ldr	r0, [r4, #8]
 8008e00:	4631      	mov	r1, r6
 8008e02:	6803      	ldr	r3, [r0, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	4798      	blx	r3
 8008e08:	f884 96db 	strb.w	r9, [r4, #1755]	; 0x6db
 8008e0c:	f885 9705 	strb.w	r9, [r5, #1797]	; 0x705
 8008e10:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8008e14:	f043 0302 	orr.w	r3, r3, #2
 8008e18:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 8008e1c:	3601      	adds	r6, #1
 8008e1e:	3524      	adds	r5, #36	; 0x24
 8008e20:	e79c      	b.n	8008d5c <ArtNetNode::HandleDmx()+0x24>
 8008e22:	459b      	cmp	fp, r3
 8008e24:	d104      	bne.n	8008e30 <ArtNetNode::HandleDmx()+0xf8>
 8008e26:	f1ba 0f00 	cmp.w	sl, #0
 8008e2a:	d0c5      	beq.n	8008db8 <ArtNetNode::HandleDmx()+0x80>
 8008e2c:	b11b      	cbz	r3, 8008e36 <ArtNetNode::HandleDmx()+0xfe>
 8008e2e:	e037      	b.n	8008ea0 <ArtNetNode::HandleDmx()+0x168>
 8008e30:	f1bb 0f00 	cmp.w	fp, #0
 8008e34:	d132      	bne.n	8008e9c <ArtNetNode::HandleDmx()+0x164>
 8008e36:	459a      	cmp	sl, r3
 8008e38:	d11d      	bne.n	8008e76 <ArtNetNode::HandleDmx()+0x13e>
 8008e3a:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8008e3e:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 8008e42:	f7ff fead 	bl	8008ba0 <lightset::Data::Get()>
 8008e46:	f240 6304 	movw	r3, #1540	; 0x604
 8008e4a:	4683      	mov	fp, r0
 8008e4c:	fb03 fa06 	mul.w	sl, r3, r6
 8008e50:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 8008e54:	463a      	mov	r2, r7
 8008e56:	4641      	mov	r1, r8
 8008e58:	4458      	add	r0, fp
 8008e5a:	f7ff fe97 	bl	8008b8c <memcpy.isra.0>
 8008e5e:	eb0b 030a 	add.w	r3, fp, sl
 8008e62:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 8008e66:	463a      	mov	r2, r7
 8008e68:	4641      	mov	r1, r8
 8008e6a:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 8008e6e:	4458      	add	r0, fp
 8008e70:	f7ff fe8c 	bl	8008b8c <memcpy.isra.0>
 8008e74:	e7a9      	b.n	8008dca <ArtNetNode::HandleDmx()+0x92>
 8008e76:	b9bb      	cbnz	r3, 8008ea8 <ArtNetNode::HandleDmx()+0x170>
 8008e78:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 8008e7c:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8008e80:	4631      	mov	r1, r6
 8008e82:	4620      	mov	r0, r4
 8008e84:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 8008e88:	f7ff ff06 	bl	8008c98 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 8008e8c:	463a      	mov	r2, r7
 8008e8e:	4641      	mov	r1, r8
 8008e90:	4630      	mov	r0, r6
 8008e92:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 8008e96:	f7ff feac 	bl	8008bf2 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 8008e9a:	e796      	b.n	8008dca <ArtNetNode::HandleDmx()+0x92>
 8008e9c:	459b      	cmp	fp, r3
 8008e9e:	d118      	bne.n	8008ed2 <ArtNetNode::HandleDmx()+0x19a>
 8008ea0:	459a      	cmp	sl, r3
 8008ea2:	d1eb      	bne.n	8008e7c <ArtNetNode::HandleDmx()+0x144>
 8008ea4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea8:	f1ba 0f00 	cmp.w	sl, #0
 8008eac:	d1e4      	bne.n	8008e78 <ArtNetNode::HandleDmx()+0x140>
 8008eae:	f8c5 36f8 	str.w	r3, [r5, #1784]	; 0x6f8
 8008eb2:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 8008ebe:	f7ff feeb 	bl	8008c98 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 8008ec2:	463a      	mov	r2, r7
 8008ec4:	4641      	mov	r1, r8
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 8008ecc:	f7ff feba 	bl	8008c44 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 8008ed0:	e77b      	b.n	8008dca <ArtNetNode::HandleDmx()+0x92>
 8008ed2:	f1ba 0f00 	cmp.w	sl, #0
 8008ed6:	d0ea      	beq.n	8008eae <ArtNetNode::HandleDmx()+0x176>
 8008ed8:	459a      	cmp	sl, r3
 8008eda:	d0ea      	beq.n	8008eb2 <ArtNetNode::HandleDmx()+0x17a>
 8008edc:	e7e2      	b.n	8008ea4 <ArtNetNode::HandleDmx()+0x16c>
	...

08008ee0 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 8008ee0:	2903      	cmp	r1, #3
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	d80d      	bhi.n	8008f02 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x22>
 8008ee6:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x24>)
 8008ee8:	0109      	lsls	r1, r1, #4
 8008eea:	681c      	ldr	r4, [r3, #0]
 8008eec:	4401      	add	r1, r0
 8008eee:	6923      	ldr	r3, [r4, #16]
 8008ef0:	69a4      	ldr	r4, [r4, #24]
 8008ef2:	4053      	eors	r3, r2
 8008ef4:	4223      	tst	r3, r4
 8008ef6:	bf16      	itet	ne
 8008ef8:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
 8008efa:	f8c1 277c 	streq.w	r2, [r1, #1916]	; 0x77c
 8008efe:	f8c1 377c 	strne.w	r3, [r1, #1916]	; 0x77c
 8008f02:	bd10      	pop	{r4, pc}
 8008f04:	2000a7cc 	andcs	sl, r0, ip, asr #15

08008f08 <ArtNetNode::HandleDmxIn()>:
 8008f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f0c:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8008f10:	ab05      	add	r3, sp, #20
 8008f12:	4607      	mov	r7, r0
 8008f14:	2208      	movs	r2, #8
 8008f16:	461e      	mov	r6, r3
 8008f18:	4942      	ldr	r1, [pc, #264]	; (8009024 <ArtNetNode::HandleDmxIn()+0x11c>)
 8008f1a:	3a01      	subs	r2, #1
 8008f1c:	d304      	bcc.n	8008f28 <ArtNetNode::HandleDmxIn()+0x20>
 8008f1e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008f22:	f803 0b01 	strb.w	r0, [r3], #1
 8008f26:	e7f8      	b.n	8008f1a <ArtNetNode::HandleDmxIn()+0x12>
 8008f28:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8008f2c:	2500      	movs	r5, #0
 8008f2e:	8133      	strh	r3, [r6, #8]
 8008f30:	230e      	movs	r3, #14
 8008f32:	463c      	mov	r4, r7
 8008f34:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8009028 <ArtNetNode::HandleDmxIn()+0x120>
 8008f38:	72b5      	strb	r5, [r6, #10]
 8008f3a:	72f3      	strb	r3, [r6, #11]
 8008f3c:	f894 3778 	ldrb.w	r3, [r4, #1912]	; 0x778
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d049      	beq.n	8008fd8 <ArtNetNode::HandleDmxIn()+0xd0>
 8008f44:	6978      	ldr	r0, [r7, #20]
 8008f46:	4629      	mov	r1, r5
 8008f48:	6803      	ldr	r3, [r0, #0]
 8008f4a:	aa03      	add	r2, sp, #12
 8008f4c:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8008f50:	ab04      	add	r3, sp, #16
 8008f52:	47c8      	blx	r9
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d048      	beq.n	8008fea <ArtNetNode::HandleDmxIn()+0xe2>
 8008f58:	f894 3780 	ldrb.w	r3, [r4, #1920]	; 0x780
 8008f5c:	7375      	strb	r5, [r6, #13]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	f884 3780 	strb.w	r3, [r4, #1920]	; 0x780
 8008f66:	7333      	strb	r3, [r6, #12]
 8008f68:	f8b4 3774 	ldrh.w	r3, [r4, #1908]	; 0x774
 8008f6c:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8008f70:	81f3      	strh	r3, [r6, #14]
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	eb00 0c03 	add.w	ip, r0, r3
 8008f78:	4560      	cmp	r0, ip
 8008f7a:	d004      	beq.n	8008f86 <ArtNetNode::HandleDmxIn()+0x7e>
 8008f7c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008f80:	f802 1b01 	strb.w	r1, [r2], #1
 8008f84:	e7f8      	b.n	8008f78 <ArtNetNode::HandleDmxIn()+0x70>
 8008f86:	07da      	lsls	r2, r3, #31
 8008f88:	d504      	bpl.n	8008f94 <ArtNetNode::HandleDmxIn()+0x8c>
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	18f2      	adds	r2, r6, r3
 8008f8e:	3301      	adds	r3, #1
 8008f90:	7491      	strb	r1, [r2, #18]
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	9b03      	ldr	r3, [sp, #12]
 8008f96:	4631      	mov	r1, r6
 8008f98:	0a1a      	lsrs	r2, r3, #8
 8008f9a:	7473      	strb	r3, [r6, #17]
 8008f9c:	2380      	movs	r3, #128	; 0x80
 8008f9e:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 8008fa2:	f641 1336 	movw	r3, #6454	; 0x1936
 8008fa6:	7432      	strb	r2, [r6, #16]
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	f240 2212 	movw	r2, #530	; 0x212
 8008fae:	f8d4 377c 	ldr.w	r3, [r4, #1916]	; 0x77c
 8008fb2:	7938      	ldrb	r0, [r7, #4]
 8008fb4:	f006 fadc 	bl	800f570 <udp_send>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	f8d8 2000 	ldr.w	r2, [r8]
 8008fbe:	40ab      	lsls	r3, r5
 8008fc0:	ea33 0102 	bics.w	r1, r3, r2
 8008fc4:	d008      	beq.n	8008fd8 <ArtNetNode::HandleDmxIn()+0xd0>
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	f8c8 3000 	str.w	r3, [r8]
 8008fcc:	f897 36dd 	ldrb.w	r3, [r7, #1757]	; 0x6dd
 8008fd0:	f043 0301 	orr.w	r3, r3, #1
 8008fd4:	f887 36dd 	strb.w	r3, [r7, #1757]	; 0x6dd
 8008fd8:	3501      	adds	r5, #1
 8008fda:	2d04      	cmp	r5, #4
 8008fdc:	f104 0410 	add.w	r4, r4, #16
 8008fe0:	d1ac      	bne.n	8008f3c <ArtNetNode::HandleDmxIn()+0x34>
 8008fe2:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 8008fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fea:	f994 2777 	ldrsb.w	r2, [r4, #1911]	; 0x777
 8008fee:	f894 3777 	ldrb.w	r3, [r4, #1911]	; 0x777
 8008ff2:	2a00      	cmp	r2, #0
 8008ff4:	daf0      	bge.n	8008fd8 <ArtNetNode::HandleDmxIn()+0xd0>
 8008ff6:	9a04      	ldr	r2, [sp, #16]
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	d1ed      	bne.n	8008fd8 <ArtNetNode::HandleDmxIn()+0xd0>
 8008ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009000:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 8009004:	2301      	movs	r3, #1
 8009006:	fa03 f205 	lsl.w	r2, r3, r5
 800900a:	f8d8 3000 	ldr.w	r3, [r8]
 800900e:	ea23 0302 	bic.w	r3, r3, r2
 8009012:	f8c8 3000 	str.w	r3, [r8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1de      	bne.n	8008fd8 <ArtNetNode::HandleDmxIn()+0xd0>
 800901a:	f897 36dd 	ldrb.w	r3, [r7, #1757]	; 0x6dd
 800901e:	f023 0301 	bic.w	r3, r3, #1
 8009022:	e7d7      	b.n	8008fd4 <ArtNetNode::HandleDmxIn()+0xcc>
 8009024:	080151cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, ip, lr}
 8009028:	20001914 	andcs	r1, r0, r4, lsl r9

0800902c <memcmp.constprop.0>:
 800902c:	b510      	push	{r4, lr}
 800902e:	4c07      	ldr	r4, [pc, #28]	; (800904c <memcmp.constprop.0+0x20>)
 8009030:	1e42      	subs	r2, r0, #1
 8009032:	3003      	adds	r0, #3
 8009034:	4282      	cmp	r2, r0
 8009036:	d007      	beq.n	8009048 <memcmp.constprop.0+0x1c>
 8009038:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800903c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009040:	428b      	cmp	r3, r1
 8009042:	d0f7      	beq.n	8009034 <memcmp.constprop.0+0x8>
 8009044:	1a58      	subs	r0, r3, r1
 8009046:	bd10      	pop	{r4, pc}
 8009048:	2000      	movs	r0, #0
 800904a:	e7fc      	b.n	8009046 <memcmp.constprop.0+0x1a>
 800904c:	20001918 	andcs	r1, r0, r8, lsl r9

08009050 <memcpy.constprop.0.isra.0>:
 8009050:	3801      	subs	r0, #1
 8009052:	1d0a      	adds	r2, r1, #4
 8009054:	4291      	cmp	r1, r2
 8009056:	d004      	beq.n	8009062 <memcpy.constprop.0.isra.0+0x12>
 8009058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800905c:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009060:	e7f8      	b.n	8009054 <memcpy.constprop.0.isra.0+0x4>
 8009062:	4770      	bx	lr

08009064 <ArtNetNode::HandleIpProg()>:
 8009064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 800906c:	b085      	sub	sp, #20
 800906e:	4604      	mov	r4, r0
 8009070:	9303      	str	r3, [sp, #12]
 8009072:	2300      	movs	r3, #0
 8009074:	4d5a      	ldr	r5, [pc, #360]	; (80091e0 <ArtNetNode::HandleIpProg()+0x17c>)
 8009076:	f890 70ae 	ldrb.w	r7, [r0, #174]	; 0xae
 800907a:	6828      	ldr	r0, [r5, #0]
 800907c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8009080:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 8009084:	f06f 0306 	mvn.w	r3, #6
 8009088:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800908c:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 8009090:	2bc0      	cmp	r3, #192	; 0xc0
 8009092:	d101      	bne.n	8009098 <ArtNetNode::HandleIpProg()+0x34>
 8009094:	f007 f8f0 	bl	8010278 <Network::EnableDhcp()>
 8009098:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800909c:	2b88      	cmp	r3, #136	; 0x88
 800909e:	d103      	bne.n	80090a8 <ArtNetNode::HandleIpProg()+0x44>
 80090a0:	2100      	movs	r1, #0
 80090a2:	6828      	ldr	r0, [r5, #0]
 80090a4:	f007 f88c 	bl	80101c0 <Network::SetIp(unsigned int)>
 80090a8:	f007 0384 	and.w	r3, r7, #132	; 0x84
 80090ac:	2b84      	cmp	r3, #132	; 0x84
 80090ae:	4e4d      	ldr	r6, [pc, #308]	; (80091e4 <ArtNetNode::HandleIpProg()+0x180>)
 80090b0:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
 80090b4:	d107      	bne.n	80090c6 <ArtNetNode::HandleIpProg()+0x62>
 80090b6:	4641      	mov	r1, r8
 80090b8:	4630      	mov	r0, r6
 80090ba:	f7ff ffc9 	bl	8009050 <memcpy.constprop.0.isra.0>
 80090be:	6831      	ldr	r1, [r6, #0]
 80090c0:	6828      	ldr	r0, [r5, #0]
 80090c2:	f007 f87d 	bl	80101c0 <Network::SetIp(unsigned int)>
 80090c6:	f007 0382 	and.w	r3, r7, #130	; 0x82
 80090ca:	2b82      	cmp	r3, #130	; 0x82
 80090cc:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
 80090d0:	d107      	bne.n	80090e2 <ArtNetNode::HandleIpProg()+0x7e>
 80090d2:	4649      	mov	r1, r9
 80090d4:	4843      	ldr	r0, [pc, #268]	; (80091e4 <ArtNetNode::HandleIpProg()+0x180>)
 80090d6:	f7ff ffbb 	bl	8009050 <memcpy.constprop.0.isra.0>
 80090da:	6831      	ldr	r1, [r6, #0]
 80090dc:	6828      	ldr	r0, [r5, #0]
 80090de:	f007 f89d 	bl	801021c <Network::SetNetmask(unsigned int)>
 80090e2:	f007 0790 	and.w	r7, r7, #144	; 0x90
 80090e6:	2f90      	cmp	r7, #144	; 0x90
 80090e8:	f104 0aba 	add.w	sl, r4, #186	; 0xba
 80090ec:	d107      	bne.n	80090fe <ArtNetNode::HandleIpProg()+0x9a>
 80090ee:	4651      	mov	r1, sl
 80090f0:	483c      	ldr	r0, [pc, #240]	; (80091e4 <ArtNetNode::HandleIpProg()+0x180>)
 80090f2:	f7ff ffad 	bl	8009050 <memcpy.constprop.0.isra.0>
 80090f6:	6831      	ldr	r1, [r6, #0]
 80090f8:	6828      	ldr	r0, [r5, #0]
 80090fa:	f007 f8a5 	bl	8010248 <Network::SetGatewayIp(unsigned int)>
 80090fe:	2200      	movs	r2, #0
 8009100:	6829      	ldr	r1, [r5, #0]
 8009102:	7848      	ldrb	r0, [r1, #1]
 8009104:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
 8009108:	4290      	cmp	r0, r2
 800910a:	bf0c      	ite	eq
 800910c:	4610      	moveq	r0, r2
 800910e:	2040      	movne	r0, #64	; 0x40
 8009110:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
 8009114:	7848      	ldrb	r0, [r1, #1]
 8009116:	6909      	ldr	r1, [r1, #16]
 8009118:	ea8b 0b00 	eor.w	fp, fp, r0
 800911c:	4640      	mov	r0, r8
 800911e:	6031      	str	r1, [r6, #0]
 8009120:	f7ff ff84 	bl	800902c <memcmp.constprop.0>
 8009124:	492f      	ldr	r1, [pc, #188]	; (80091e4 <ArtNetNode::HandleIpProg()+0x180>)
 8009126:	4607      	mov	r7, r0
 8009128:	4640      	mov	r0, r8
 800912a:	f7ff ff91 	bl	8009050 <memcpy.constprop.0.isra.0>
 800912e:	6829      	ldr	r1, [r5, #0]
 8009130:	4648      	mov	r0, r9
 8009132:	6989      	ldr	r1, [r1, #24]
 8009134:	6031      	str	r1, [r6, #0]
 8009136:	f7ff ff79 	bl	800902c <memcmp.constprop.0>
 800913a:	492a      	ldr	r1, [pc, #168]	; (80091e4 <ArtNetNode::HandleIpProg()+0x180>)
 800913c:	9003      	str	r0, [sp, #12]
 800913e:	4648      	mov	r0, r9
 8009140:	f7ff ff86 	bl	8009050 <memcpy.constprop.0.isra.0>
 8009144:	6829      	ldr	r1, [r5, #0]
 8009146:	4650      	mov	r0, sl
 8009148:	6949      	ldr	r1, [r1, #20]
 800914a:	6031      	str	r1, [r6, #0]
 800914c:	f7ff ff6e 	bl	800902c <memcmp.constprop.0>
 8009150:	9b03      	ldr	r3, [sp, #12]
 8009152:	4924      	ldr	r1, [pc, #144]	; (80091e4 <ArtNetNode::HandleIpProg()+0x180>)
 8009154:	431f      	orrs	r7, r3
 8009156:	ea57 0300 	orrs.w	r3, r7, r0
 800915a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800915e:	bf0c      	ite	eq
 8009160:	465e      	moveq	r6, fp
 8009162:	f04b 0601 	orrne.w	r6, fp, #1
 8009166:	f7ff ff73 	bl	8009050 <memcpy.constprop.0.isra.0>
 800916a:	2200      	movs	r2, #0
 800916c:	f641 1336 	movw	r3, #6454	; 0x1936
 8009170:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 8009174:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	2222      	movs	r2, #34	; 0x22
 800917c:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 8009180:	7920      	ldrb	r0, [r4, #4]
 8009182:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8009186:	f006 f9f3 	bl	800f570 <udp_send>
 800918a:	b336      	cbz	r6, 80091da <ArtNetNode::HandleIpProg()+0x176>
 800918c:	682a      	ldr	r2, [r5, #0]
 800918e:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 8009192:	6913      	ldr	r3, [r2, #16]
 8009194:	62a3      	str	r3, [r4, #40]	; 0x28
 8009196:	6991      	ldr	r1, [r2, #24]
 8009198:	7852      	ldrb	r2, [r2, #1]
 800919a:	ea63 0301 	orn	r3, r3, r1
 800919e:	2a00      	cmp	r2, #0
 80091a0:	bf14      	ite	ne
 80091a2:	2202      	movne	r2, #2
 80091a4:	2200      	moveq	r2, #0
 80091a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091a8:	f994 3096 	ldrsb.w	r3, [r4, #150]	; 0x96
 80091ac:	4641      	mov	r1, r8
 80091ae:	f023 0302 	bic.w	r3, r3, #2
 80091b2:	4313      	orrs	r3, r2
 80091b4:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 80091b8:	f7ff ff4a 	bl	8009050 <memcpy.constprop.0.isra.0>
 80091bc:	4641      	mov	r1, r8
 80091be:	f204 6043 	addw	r0, r4, #1603	; 0x643
 80091c2:	f7ff ff45 	bl	8009050 <memcpy.constprop.0.isra.0>
 80091c6:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 80091ca:	b133      	cbz	r3, 80091da <ArtNetNode::HandleIpProg()+0x176>
 80091cc:	2101      	movs	r1, #1
 80091ce:	4620      	mov	r0, r4
 80091d0:	b005      	add	sp, #20
 80091d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d6:	f000 b883 	b.w	80092e0 <ArtNetNode::SendPollRelply(bool)>
 80091da:	b005      	add	sp, #20
 80091dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091e0:	2000a7cc 	andcs	sl, r0, ip, asr #15
 80091e4:	20001918 	andcs	r1, r0, r8, lsl r9

080091e8 <memcpy.isra.0>:
 80091e8:	3801      	subs	r0, #1
 80091ea:	440a      	add	r2, r1
 80091ec:	4291      	cmp	r1, r2
 80091ee:	d004      	beq.n	80091fa <memcpy.isra.0+0x12>
 80091f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f4:	f800 3f01 	strb.w	r3, [r0, #1]!
 80091f8:	e7f8      	b.n	80091ec <memcpy.isra.0+0x4>
 80091fa:	4770      	bx	lr

080091fc <ArtNetNode::FillPollReply()>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4604      	mov	r4, r0
 8009200:	f200 5074 	addw	r0, r0, #1396	; 0x574
 8009204:	4603      	mov	r3, r0
 8009206:	2200      	movs	r2, #0
 8009208:	f204 6163 	addw	r1, r4, #1635	; 0x663
 800920c:	4299      	cmp	r1, r3
 800920e:	d002      	beq.n	8009216 <ArtNetNode::FillPollReply()+0x1a>
 8009210:	f803 2b01 	strb.w	r2, [r3], #1
 8009214:	e7fa      	b.n	800920c <ArtNetNode::FillPollReply()+0x10>
 8009216:	2208      	movs	r2, #8
 8009218:	492d      	ldr	r1, [pc, #180]	; (80092d0 <ArtNetNode::FillPollReply()+0xd4>)
 800921a:	f7ff ffe5 	bl	80091e8 <memcpy.isra.0>
 800921e:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8009222:	4d2c      	ldr	r5, [pc, #176]	; (80092d4 <ArtNetNode::FillPollReply()+0xd8>)
 8009224:	f8a4 357c 	strh.w	r3, [r4, #1404]	; 0x57c
 8009228:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800922a:	4629      	mov	r1, r5
 800922c:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 8009230:	2204      	movs	r2, #4
 8009232:	602b      	str	r3, [r5, #0]
 8009234:	f7ff ffd8 	bl	80091e8 <memcpy.isra.0>
 8009238:	f641 1336 	movw	r3, #6454	; 0x1936
 800923c:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
 8009240:	4b25      	ldr	r3, [pc, #148]	; (80092d8 <ArtNetNode::FillPollReply()+0xdc>)
 8009242:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8009246:	781a      	ldrb	r2, [r3, #0]
 8009248:	f204 508e 	addw	r0, r4, #1422	; 0x58e
 800924c:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 8009250:	785b      	ldrb	r3, [r3, #1]
 8009252:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 8009256:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800925a:	f8a4 3588 	strh.w	r3, [r4, #1416]	; 0x588
 800925e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009262:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 8009266:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <ArtNetNode::FillPollReply()+0xe0>)
 8009268:	785a      	ldrb	r2, [r3, #1]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	f884 258c 	strb.w	r2, [r4, #1420]	; 0x58c
 8009270:	f884 358d 	strb.w	r3, [r4, #1421]	; 0x58d
 8009274:	2212      	movs	r2, #18
 8009276:	f7ff ffb7 	bl	80091e8 <memcpy.isra.0>
 800927a:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800927e:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
 8009282:	2240      	movs	r2, #64	; 0x40
 8009284:	f7ff ffb0 	bl	80091e8 <memcpy.isra.0>
 8009288:	2300      	movs	r3, #0
 800928a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800928e:	f884 363c 	strb.w	r3, [r4, #1596]	; 0x63c
 8009292:	f204 603d 	addw	r0, r4, #1597	; 0x63d
 8009296:	2206      	movs	r2, #6
 8009298:	f7ff ffa6 	bl	80091e8 <memcpy.isra.0>
 800929c:	4629      	mov	r1, r5
 800929e:	f204 6043 	addw	r0, r4, #1603	; 0x643
 80092a2:	2204      	movs	r2, #4
 80092a4:	f7ff ffa0 	bl	80091e8 <memcpy.isra.0>
 80092a8:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 80092ac:	f104 0198 	add.w	r1, r4, #152	; 0x98
 80092b0:	f884 3648 	strb.w	r3, [r4, #1608]	; 0x648
 80092b4:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 80092b8:	f204 604e 	addw	r0, r4, #1614	; 0x64e
 80092bc:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
 80092c0:	2304      	movs	r3, #4
 80092c2:	2206      	movs	r2, #6
 80092c4:	f884 3621 	strb.w	r3, [r4, #1569]	; 0x621
 80092c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092cc:	f7ff bf8c 	b.w	80091e8 <memcpy.isra.0>
 80092d0:	080151e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r8, ip, lr}
 80092d4:	2000191c 	andcs	r1, r0, ip, lsl r9
 80092d8:	08015475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, ip, lr}
 80092dc:	08015473 	stmdaeq	r1, {r0, r1, r4, r5, r6, sl, ip, lr}

080092e0 <ArtNetNode::SendPollRelply(bool)>:
 80092e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	4604      	mov	r4, r0
 80092e6:	b087      	sub	sp, #28
 80092e8:	b941      	cbnz	r1, 80092fc <ArtNetNode::SendPollRelply(bool)+0x1c>
 80092ea:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	bf02      	ittt	eq
 80092f2:	f8d0 36c0 	ldreq.w	r3, [r0, #1728]	; 0x6c0
 80092f6:	3301      	addeq	r3, #1
 80092f8:	f8c0 36c0 	streq.w	r3, [r0, #1728]	; 0x6c0
 80092fc:	f04f 0900 	mov.w	r9, #0
 8009300:	46c8      	mov	r8, r9
 8009302:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009306:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 800930a:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 800930e:	9303      	str	r3, [sp, #12]
 8009310:	7823      	ldrb	r3, [r4, #0]
 8009312:	4543      	cmp	r3, r8
 8009314:	f340 80a1 	ble.w	800945a <ArtNetNode::SendPollRelply(bool)+0x17a>
 8009318:	9b03      	ldr	r3, [sp, #12]
 800931a:	9a03      	ldr	r2, [sp, #12]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2590      	movs	r5, #144	; 0x90
 8009320:	f884 3586 	strb.w	r3, [r4, #1414]	; 0x586
 8009324:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009328:	4649      	mov	r1, r9
 800932a:	f884 3587 	strb.w	r3, [r4, #1415]	; 0x587
 800932e:	f108 0301 	add.w	r3, r8, #1
 8009332:	f884 3647 	strb.w	r3, [r4, #1607]	; 0x647
 8009336:	fa5f f389 	uxtb.w	r3, r9
 800933a:	2bfb      	cmp	r3, #251	; 0xfb
 800933c:	9203      	str	r2, [sp, #12]
 800933e:	f04f 0a00 	mov.w	sl, #0
 8009342:	bf8c      	ite	hi
 8009344:	2201      	movhi	r2, #1
 8009346:	2205      	movls	r2, #5
 8009348:	fb05 4508 	mla	r5, r5, r8, r4
 800934c:	eb04 1b88 	add.w	fp, r4, r8, lsl #6
 8009350:	f204 6722 	addw	r7, r4, #1570	; 0x622
 8009354:	2a01      	cmp	r2, #1
 8009356:	d061      	beq.n	800941c <ArtNetNode::SendPollRelply(bool)+0x13c>
 8009358:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800935c:	f895 66e7 	ldrb.w	r6, [r5, #1767]	; 0x6e7
 8009360:	2b00      	cmp	r3, #0
 8009362:	d144      	bne.n	80093ee <ArtNetNode::SendPollRelply(bool)+0x10e>
 8009364:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	; 0x6f0
 8009368:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 800936c:	b14b      	cbz	r3, 8009382 <ArtNetNode::SendPollRelply(bool)+0xa2>
 800936e:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009372:	f8d5 06ec 	ldr.w	r0, [r5, #1772]	; 0x6ec
 8009376:	1a1b      	subs	r3, r3, r0
 8009378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800937c:	bf38      	it	cc
 800937e:	f046 0680 	orrcc.w	r6, r6, #128	; 0x80
 8009382:	f8d5 36f8 	ldr.w	r3, [r5, #1784]	; 0x6f8
 8009386:	b14b      	cbz	r3, 800939c <ArtNetNode::SendPollRelply(bool)+0xbc>
 8009388:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800938c:	f8d5 06f4 	ldr.w	r0, [r5, #1780]	; 0x6f4
 8009390:	1a1b      	subs	r3, r3, r0
 8009392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009396:	d201      	bcs.n	800939c <ArtNetNode::SendPollRelply(bool)+0xbc>
 8009398:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 800939c:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 80093a0:	f885 66e7 	strb.w	r6, [r5, #1767]	; 0x6e7
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d037      	beq.n	8009418 <ArtNetNode::SendPollRelply(bool)+0x138>
 80093a8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80093ac:	f10a 0a01 	add.w	sl, sl, #1
 80093b0:	703b      	strb	r3, [r7, #0]
 80093b2:	723e      	strb	r6, [r7, #8]
 80093b4:	f895 36e6 	ldrb.w	r3, [r5, #1766]	; 0x6e6
 80093b8:	743b      	strb	r3, [r7, #16]
 80093ba:	b2cb      	uxtb	r3, r1
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d80e      	bhi.n	80093de <ArtNetNode::SendPollRelply(bool)+0xfe>
 80093c0:	f89b 3778 	ldrb.w	r3, [fp, #1912]	; 0x778
 80093c4:	b12b      	cbz	r3, 80093d2 <ArtNetNode::SendPollRelply(bool)+0xf2>
 80093c6:	783b      	ldrb	r3, [r7, #0]
 80093c8:	f10a 0a01 	add.w	sl, sl, #1
 80093cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d0:	703b      	strb	r3, [r7, #0]
 80093d2:	f89b 3777 	ldrb.w	r3, [fp, #1911]	; 0x777
 80093d6:	713b      	strb	r3, [r7, #4]
 80093d8:	f89b 3776 	ldrb.w	r3, [fp, #1910]	; 0x776
 80093dc:	733b      	strb	r3, [r7, #12]
 80093de:	1e53      	subs	r3, r2, #1
 80093e0:	3101      	adds	r1, #1
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	f10b 0b10 	add.w	fp, fp, #16
 80093e8:	3701      	adds	r7, #1
 80093ea:	3524      	adds	r5, #36	; 0x24
 80093ec:	e7b2      	b.n	8009354 <ArtNetNode::SendPollRelply(bool)+0x74>
 80093ee:	69e0      	ldr	r0, [r4, #28]
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d0d3      	beq.n	800939c <ArtNetNode::SendPollRelply(bool)+0xbc>
 80093f4:	6803      	ldr	r3, [r0, #0]
 80093f6:	9205      	str	r2, [sp, #20]
 80093f8:	9104      	str	r1, [sp, #16]
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	4798      	blx	r3
 80093fe:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009402:	f000 0089 	and.w	r0, r0, #137	; 0x89
 8009406:	f006 0676 	and.w	r6, r6, #118	; 0x76
 800940a:	4306      	orrs	r6, r0
 800940c:	f010 0001 	ands.w	r0, r0, #1
 8009410:	bf08      	it	eq
 8009412:	f8c5 0700 	streq.w	r0, [r5, #1792]	; 0x700
 8009416:	e7c1      	b.n	800939c <ArtNetNode::SendPollRelply(bool)+0xbc>
 8009418:	703b      	strb	r3, [r7, #0]
 800941a:	e7ca      	b.n	80093b2 <ArtNetNode::SendPollRelply(bool)+0xd2>
 800941c:	f204 636f 	addw	r3, r4, #1647	; 0x66f
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	f8d4 36c0 	ldr.w	r3, [r4, #1728]	; 0x6c0
 8009426:	2140      	movs	r1, #64	; 0x40
 8009428:	4a0f      	ldr	r2, [pc, #60]	; (8009468 <ArtNetNode::SendPollRelply(bool)+0x188>)
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	f884 a621 	strb.w	sl, [r4, #1569]	; 0x621
 8009430:	f894 36d4 	ldrb.w	r3, [r4, #1748]	; 0x6d4
 8009434:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8009438:	f009 fe4a 	bl	80130d0 <snprintf>
 800943c:	f641 1336 	movw	r3, #6454	; 0x1936
 8009440:	22ef      	movs	r2, #239	; 0xef
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	7920      	ldrb	r0, [r4, #4]
 8009446:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009448:	f204 5174 	addw	r1, r4, #1396	; 0x574
 800944c:	f006 f890 	bl	800f570 <udp_send>
 8009450:	f108 0801 	add.w	r8, r8, #1
 8009454:	f109 0904 	add.w	r9, r9, #4
 8009458:	e75a      	b.n	8009310 <ArtNetNode::SendPollRelply(bool)+0x30>
 800945a:	2300      	movs	r3, #0
 800945c:	f884 36db 	strb.w	r3, [r4, #1755]	; 0x6db
 8009460:	b007      	add	sp, #28
 8009462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009466:	bf00      	nop
 8009468:	080151d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, ip, lr}

0800946c <ArtNetNode::HandlePoll()>:
 800946c:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8009470:	b410      	push	{r4}
 8009472:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8009476:	f880 26d6 	strb.w	r2, [r0, #1750]	; 0x6d6
 800947a:	f013 0204 	ands.w	r2, r3, #4
 800947e:	d02e      	beq.n	80094de <ArtNetNode::HandlePoll()+0x72>
 8009480:	2201      	movs	r2, #1
 8009482:	f8d0 16c8 	ldr.w	r1, [r0, #1736]	; 0x6c8
 8009486:	f890 46d8 	ldrb.w	r4, [r0, #1752]	; 0x6d8
 800948a:	f880 26d7 	strb.w	r2, [r0, #1751]	; 0x6d7
 800948e:	b979      	cbnz	r1, 80094b0 <ArtNetNode::HandlePoll()+0x44>
 8009490:	f8d0 256c 	ldr.w	r2, [r0, #1388]	; 0x56c
 8009494:	f8c0 26c8 	str.w	r2, [r0, #1736]	; 0x6c8
 8009498:	b19c      	cbz	r4, 80094c2 <ArtNetNode::HandlePoll()+0x56>
 800949a:	f890 36e0 	ldrb.w	r3, [r0, #1760]	; 0x6e0
 800949e:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80094a2:	4293      	cmp	r3, r2
 80094a4:	bf28      	it	cs
 80094a6:	4613      	movcs	r3, r2
 80094a8:	f880 36e0 	strb.w	r3, [r0, #1760]	; 0x6e0
 80094ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80094ae:	e010      	b.n	80094d2 <ArtNetNode::HandlePoll()+0x66>
 80094b0:	2c00      	cmp	r4, #0
 80094b2:	d1f2      	bne.n	800949a <ArtNetNode::HandlePoll()+0x2e>
 80094b4:	f8d0 456c 	ldr.w	r4, [r0, #1388]	; 0x56c
 80094b8:	42a1      	cmp	r1, r4
 80094ba:	d002      	beq.n	80094c2 <ArtNetNode::HandlePoll()+0x56>
 80094bc:	f880 26d8 	strb.w	r2, [r0, #1752]	; 0x6d8
 80094c0:	e7eb      	b.n	800949a <ArtNetNode::HandlePoll()+0x2e>
 80094c2:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 80094c6:	071b      	lsls	r3, r3, #28
 80094c8:	f880 26e0 	strb.w	r2, [r0, #1760]	; 0x6e0
 80094cc:	d5ee      	bpl.n	80094ac <ArtNetNode::HandlePoll()+0x40>
 80094ce:	f8d0 356c 	ldr.w	r3, [r0, #1388]	; 0x56c
 80094d2:	f8c0 36c4 	str.w	r3, [r0, #1732]	; 0x6c4
 80094d6:	2101      	movs	r1, #1
 80094d8:	bc10      	pop	{r4}
 80094da:	f7ff bf01 	b.w	80092e0 <ArtNetNode::SendPollRelply(bool)>
 80094de:	f880 26d7 	strb.w	r2, [r0, #1751]	; 0x6d7
 80094e2:	f8c0 26c4 	str.w	r2, [r0, #1732]	; 0x6c4
 80094e6:	e7f6      	b.n	80094d6 <ArtNetNode::HandlePoll()+0x6a>

080094e8 <ArtNetNode::SendTod(unsigned int)>:
 80094e8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80094ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80094f0:	2500      	movs	r5, #0
 80094f2:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
 80094f6:	2301      	movs	r3, #1
 80094f8:	4688      	mov	r8, r1
 80094fa:	4604      	mov	r4, r0
 80094fc:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 8009500:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
 8009504:	6900      	ldr	r0, [r0, #16]
 8009506:	088f      	lsrs	r7, r1, #2
 8009508:	6803      	ldr	r3, [r0, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	4798      	blx	r3
 800950e:	f008 0303 	and.w	r3, r8, #3
 8009512:	3301      	adds	r3, #1
 8009514:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8009518:	1c7b      	adds	r3, r7, #1
 800951a:	b2ff      	uxtb	r7, r7
 800951c:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 8009520:	f884 50af 	strb.w	r5, [r4, #175]	; 0xaf
 8009524:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8009528:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
 800952c:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 8009530:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
 8009534:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8009538:	4427      	add	r7, r4
 800953a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800953e:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 8009542:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 8009546:	2324      	movs	r3, #36	; 0x24
 8009548:	fb03 4308 	mla	r3, r3, r8, r4
 800954c:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 8009550:	b2c6      	uxtb	r6, r0
 8009552:	6920      	ldr	r0, [r4, #16]
 8009554:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 8009558:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
 800955c:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 8009560:	f884 60b9 	strb.w	r6, [r4, #185]	; 0xb9
 8009564:	f884 60bb 	strb.w	r6, [r4, #187]	; 0xbb
 8009568:	6803      	ldr	r3, [r0, #0]
 800956a:	4641      	mov	r1, r8
 800956c:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	4798      	blx	r3
 8009574:	2206      	movs	r2, #6
 8009576:	f641 1336 	movw	r3, #6454	; 0x1936
 800957a:	4372      	muls	r2, r6
 800957c:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	4629      	mov	r1, r5
 8009584:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009586:	7920      	ldrb	r0, [r4, #4]
 8009588:	321c      	adds	r2, #28
 800958a:	f005 fff1 	bl	800f570 <udp_send>
 800958e:	b002      	add	sp, #8
 8009590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009594 <ArtNetNode::HandleTodControl()>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	4604      	mov	r4, r0
 8009598:	4606      	mov	r6, r0
 800959a:	2500      	movs	r5, #0
 800959c:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 80095a0:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 80095a4:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 80095a8:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 80095ac:	42bb      	cmp	r3, r7
 80095ae:	d125      	bne.n	80095fc <ArtNetNode::HandleTodControl()+0x68>
 80095b0:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 80095b4:	b313      	cbz	r3, 80095fc <ArtNetNode::HandleTodControl()+0x68>
 80095b6:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 80095ba:	b13b      	cbz	r3, 80095cc <ArtNetNode::HandleTodControl()+0x38>
 80095bc:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 80095c0:	b923      	cbnz	r3, 80095cc <ArtNetNode::HandleTodControl()+0x38>
 80095c2:	68a0      	ldr	r0, [r4, #8]
 80095c4:	4629      	mov	r1, r5
 80095c6:	6803      	ldr	r3, [r0, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	4798      	blx	r3
 80095cc:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d104      	bne.n	80095de <ArtNetNode::HandleTodControl()+0x4a>
 80095d4:	6920      	ldr	r0, [r4, #16]
 80095d6:	4629      	mov	r1, r5
 80095d8:	6803      	ldr	r3, [r0, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	4798      	blx	r3
 80095de:	4629      	mov	r1, r5
 80095e0:	4620      	mov	r0, r4
 80095e2:	f7ff ff81 	bl	80094e8 <ArtNetNode::SendTod(unsigned int)>
 80095e6:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 80095ea:	b13b      	cbz	r3, 80095fc <ArtNetNode::HandleTodControl()+0x68>
 80095ec:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 80095f0:	b923      	cbnz	r3, 80095fc <ArtNetNode::HandleTodControl()+0x68>
 80095f2:	68a0      	ldr	r0, [r4, #8]
 80095f4:	4629      	mov	r1, r5
 80095f6:	6803      	ldr	r3, [r0, #0]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	4798      	blx	r3
 80095fc:	3501      	adds	r5, #1
 80095fe:	2d04      	cmp	r5, #4
 8009600:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8009604:	d1d0      	bne.n	80095a8 <ArtNetNode::HandleTodControl()+0x14>
 8009606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009608 <ArtNetNode::HandleTodRequest()>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	4604      	mov	r4, r0
 800960c:	4606      	mov	r6, r0
 800960e:	2500      	movs	r5, #0
 8009610:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009614:	f890 70b8 	ldrb.w	r7, [r0, #184]	; 0xb8
 8009618:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 800961c:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 8009620:	42bb      	cmp	r3, r7
 8009622:	d106      	bne.n	8009632 <ArtNetNode::HandleTodRequest()+0x2a>
 8009624:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 8009628:	b11b      	cbz	r3, 8009632 <ArtNetNode::HandleTodRequest()+0x2a>
 800962a:	4629      	mov	r1, r5
 800962c:	4620      	mov	r0, r4
 800962e:	f7ff ff5b 	bl	80094e8 <ArtNetNode::SendTod(unsigned int)>
 8009632:	3501      	adds	r5, #1
 8009634:	2d04      	cmp	r5, #4
 8009636:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800963a:	d1ef      	bne.n	800961c <ArtNetNode::HandleTodRequest()+0x14>
 800963c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800963e <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>:
 800963e:	b141      	cbz	r1, 8009652 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x14>
 8009640:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
 8009644:	6101      	str	r1, [r0, #16]
 8009646:	f043 0302 	orr.w	r3, r3, #2
 800964a:	f880 266e 	strb.w	r2, [r0, #1646]	; 0x66e
 800964e:	f880 3095 	strb.w	r3, [r0, #149]	; 0x95
 8009652:	4770      	bx	lr

08009654 <ArtNetNode::HandleRdm()>:
 8009654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009658:	4604      	mov	r4, r0
 800965a:	4605      	mov	r5, r0
 800965c:	2600      	movs	r6, #0
 800965e:	f04f 0b01 	mov.w	fp, #1
 8009662:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009666:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 800966a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800972c <ArtNetNode::HandleRdm()+0xd8>
 800966e:	f100 09a0 	add.w	r9, r0, #160	; 0xa0
 8009672:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8009676:	f100 08b8 	add.w	r8, r0, #184	; 0xb8
 800967a:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 800967e:	42bb      	cmp	r3, r7
 8009680:	d148      	bne.n	8009714 <ArtNetNode::HandleRdm()+0xc0>
 8009682:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009686:	2b00      	cmp	r3, #0
 8009688:	d044      	beq.n	8009714 <ArtNetNode::HandleRdm()+0xc0>
 800968a:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 800968e:	b9c3      	cbnz	r3, 80096c2 <ArtNetNode::HandleRdm()+0x6e>
 8009690:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8009694:	2b01      	cmp	r3, #1
 8009696:	d10c      	bne.n	80096b2 <ArtNetNode::HandleRdm()+0x5e>
 8009698:	69e0      	ldr	r0, [r4, #28]
 800969a:	b150      	cbz	r0, 80096b2 <ArtNetNode::HandleRdm()+0x5e>
 800969c:	6803      	ldr	r3, [r0, #0]
 800969e:	4631      	mov	r1, r6
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	4798      	blx	r3
 80096a4:	f010 0f89 	tst.w	r0, #137	; 0x89
 80096a8:	bf14      	ite	ne
 80096aa:	2301      	movne	r3, #1
 80096ac:	2300      	moveq	r3, #0
 80096ae:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 80096b2:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 80096b6:	b123      	cbz	r3, 80096c2 <ArtNetNode::HandleRdm()+0x6e>
 80096b8:	68a0      	ldr	r0, [r4, #8]
 80096ba:	4631      	mov	r1, r6
 80096bc:	6803      	ldr	r3, [r0, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	4798      	blx	r3
 80096c2:	6920      	ldr	r0, [r4, #16]
 80096c4:	4642      	mov	r2, r8
 80096c6:	6803      	ldr	r3, [r0, #0]
 80096c8:	4631      	mov	r1, r6
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	4798      	blx	r3
 80096ce:	b348      	cbz	r0, 8009724 <ArtNetNode::HandleRdm()+0xd0>
 80096d0:	4641      	mov	r1, r8
 80096d2:	f884 b0ac 	strb.w	fp, [r4, #172]	; 0xac
 80096d6:	7882      	ldrb	r2, [r0, #2]
 80096d8:	3001      	adds	r0, #1
 80096da:	1c53      	adds	r3, r2, #1
 80096dc:	3b01      	subs	r3, #1
 80096de:	d304      	bcc.n	80096ea <ArtNetNode::HandleRdm()+0x96>
 80096e0:	f810 cb01 	ldrb.w	ip, [r0], #1
 80096e4:	f801 cb01 	strb.w	ip, [r1], #1
 80096e8:	e7f8      	b.n	80096dc <ArtNetNode::HandleRdm()+0x88>
 80096ea:	f641 1336 	movw	r3, #6454	; 0x1936
 80096ee:	4649      	mov	r1, r9
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	7920      	ldrb	r0, [r4, #4]
 80096f4:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 80096f8:	3219      	adds	r2, #25
 80096fa:	f005 ff39 	bl	800f570 <udp_send>
 80096fe:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8009702:	b13b      	cbz	r3, 8009714 <ArtNetNode::HandleRdm()+0xc0>
 8009704:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 8009708:	b923      	cbnz	r3, 8009714 <ArtNetNode::HandleRdm()+0xc0>
 800970a:	68a0      	ldr	r0, [r4, #8]
 800970c:	4631      	mov	r1, r6
 800970e:	6803      	ldr	r3, [r0, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	4798      	blx	r3
 8009714:	3601      	adds	r6, #1
 8009716:	2e04      	cmp	r6, #4
 8009718:	f105 0524 	add.w	r5, r5, #36	; 0x24
 800971c:	d1ad      	bne.n	800967a <ArtNetNode::HandleRdm()+0x26>
 800971e:	b003      	add	sp, #12
 8009720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009724:	4650      	mov	r0, sl
 8009726:	f009 fcab 	bl	8013080 <printf>
 800972a:	e7e8      	b.n	80096fe <ArtNetNode::HandleRdm()+0xaa>
 800972c:	080151ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, ip, lr}

08009730 <ArtNetNode::HandleSync()>:
 8009730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009734:	2600      	movs	r6, #0
 8009736:	2301      	movs	r3, #1
 8009738:	4604      	mov	r4, r0
 800973a:	4605      	mov	r5, r0
 800973c:	46b1      	mov	r9, r6
 800973e:	f880 36d9 	strb.w	r3, [r0, #1753]	; 0x6d9
 8009742:	4b1e      	ldr	r3, [pc, #120]	; (80097bc <ArtNetNode::HandleSync()+0x8c>)
 8009744:	4f1e      	ldr	r7, [pc, #120]	; (80097c0 <ArtNetNode::HandleSync()+0x90>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80097c4 <ArtNetNode::HandleSync()+0x94>
 800974c:	f8c0 36d0 	str.w	r3, [r0, #1744]	; 0x6d0
 8009750:	7823      	ldrb	r3, [r4, #0]
 8009752:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8009756:	d22f      	bcs.n	80097b8 <ArtNetNode::HandleSync()+0x88>
 8009758:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800975c:	bb3b      	cbnz	r3, 80097ae <ArtNetNode::HandleSync()+0x7e>
 800975e:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009762:	b323      	cbz	r3, 80097ae <ArtNetNode::HandleSync()+0x7e>
 8009764:	f8d8 3000 	ldr.w	r3, [r8]
 8009768:	68a0      	ldr	r0, [r4, #8]
 800976a:	07da      	lsls	r2, r3, #31
 800976c:	bf5c      	itt	pl
 800976e:	2301      	movpl	r3, #1
 8009770:	f8c8 3000 	strpl.w	r3, [r8]
 8009774:	6803      	ldr	r3, [r0, #0]
 8009776:	4631      	mov	r1, r6
 8009778:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800977c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8009780:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8009784:	47d0      	blx	sl
 8009786:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800978a:	b93b      	cbnz	r3, 800979c <ArtNetNode::HandleSync()+0x6c>
 800978c:	68a0      	ldr	r0, [r4, #8]
 800978e:	4631      	mov	r1, r6
 8009790:	6803      	ldr	r3, [r0, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	4798      	blx	r3
 8009796:	2301      	movs	r3, #1
 8009798:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 800979c:	f8d8 3000 	ldr.w	r3, [r8]
 80097a0:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 80097a4:	07db      	lsls	r3, r3, #31
 80097a6:	bf5c      	itt	pl
 80097a8:	2301      	movpl	r3, #1
 80097aa:	f8c8 3000 	strpl.w	r3, [r8]
 80097ae:	3601      	adds	r6, #1
 80097b0:	f207 6704 	addw	r7, r7, #1540	; 0x604
 80097b4:	3524      	adds	r5, #36	; 0x24
 80097b6:	e7cb      	b.n	8009750 <ArtNetNode::HandleSync()+0x20>
 80097b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097bc:	2000af0c 	andcs	sl, r0, ip, lsl #30
 80097c0:	20000100 	andcs	r0, r0, r0, lsl #2
 80097c4:	200000fc 	strdcs	r0, [r0], -ip

080097c8 <ArtNetNode::HandleTimeCode()>:
 80097c8:	4601      	mov	r1, r0
 80097ca:	68c0      	ldr	r0, [r0, #12]
 80097cc:	31ae      	adds	r1, #174	; 0xae
 80097ce:	6803      	ldr	r3, [r0, #0]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	4718      	bx	r3

080097d4 <ArtNetNode::HandleTimeSync()>:
 80097d4:	b500      	push	{lr}
 80097d6:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 80097da:	b08b      	sub	sp, #44	; 0x2c
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 80097e2:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
 80097e6:	9302      	str	r3, [sp, #8]
 80097e8:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 80097ec:	a901      	add	r1, sp, #4
 80097ee:	9303      	str	r3, [sp, #12]
 80097f0:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
 80097f4:	9304      	str	r3, [sp, #16]
 80097f6:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
 80097fa:	9305      	str	r3, [sp, #20]
 80097fc:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009800:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009804:	9306      	str	r3, [sp, #24]
 8009806:	4b03      	ldr	r3, [pc, #12]	; (8009814 <ArtNetNode::HandleTimeSync()+0x40>)
 8009808:	6818      	ldr	r0, [r3, #0]
 800980a:	f009 f8fd 	bl	8012a08 <Hardware::SetTime(tm const*)>
 800980e:	b00b      	add	sp, #44	; 0x2c
 8009810:	f85d fb04 	ldr.w	pc, [sp], #4
 8009814:	2000aef4 	strdcs	sl, [r0], -r4

08009818 <ArtNetNode::Print()>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	4605      	mov	r5, r0
 800981e:	4604      	mov	r4, r0
 8009820:	b08b      	sub	sp, #44	; 0x2c
 8009822:	f815 2b42 	ldrb.w	r2, [r5], #66
 8009826:	2104      	movs	r1, #4
 8009828:	4853      	ldr	r0, [pc, #332]	; (8009978 <ArtNetNode::Print()+0x160>)
 800982a:	f009 fc29 	bl	8013080 <printf>
 800982e:	4b53      	ldr	r3, [pc, #332]	; (800997c <ArtNetNode::Print()+0x164>)
 8009830:	4853      	ldr	r0, [pc, #332]	; (8009980 <ArtNetNode::Print()+0x168>)
 8009832:	7819      	ldrb	r1, [r3, #0]
 8009834:	785a      	ldrb	r2, [r3, #1]
 8009836:	f009 fc23 	bl	8013080 <printf>
 800983a:	4629      	mov	r1, r5
 800983c:	4851      	ldr	r0, [pc, #324]	; (8009984 <ArtNetNode::Print()+0x16c>)
 800983e:	f009 fc1f 	bl	8013080 <printf>
 8009842:	4851      	ldr	r0, [pc, #324]	; (8009988 <ArtNetNode::Print()+0x170>)
 8009844:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8009848:	f009 fc1a 	bl	8013080 <printf>
 800984c:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 8009850:	2b00      	cmp	r3, #0
 8009852:	d044      	beq.n	80098de <ArtNetNode::Print()+0xc6>
 8009854:	484d      	ldr	r0, [pc, #308]	; (800998c <ArtNetNode::Print()+0x174>)
 8009856:	f009 fc13 	bl	8013080 <printf>
 800985a:	4626      	mov	r6, r4
 800985c:	2500      	movs	r5, #0
 800985e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8009990 <ArtNetNode::Print()+0x178>
 8009862:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8009994 <ArtNetNode::Print()+0x17c>
 8009866:	7823      	ldrb	r3, [r4, #0]
 8009868:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800986c:	d237      	bcs.n	80098de <ArtNetNode::Print()+0xc6>
 800986e:	2301      	movs	r3, #1
 8009870:	4629      	mov	r1, r5
 8009872:	4620      	mov	r0, r4
 8009874:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 8009878:	f7fe feb0 	bl	80085dc <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800987c:	b360      	cbz	r0, 80098d8 <ArtNetNode::Print()+0xc0>
 800987e:	eb04 0395 	add.w	r3, r4, r5, lsr #2
 8009882:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
 8009886:	f893 b03f 	ldrb.w	fp, [r3, #63]	; 0x3f
 800988a:	4629      	mov	r1, r5
 800988c:	2301      	movs	r3, #1
 800988e:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8009892:	4620      	mov	r0, r4
 8009894:	f7fe fe8c 	bl	80085b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009898:	f8d6 06fc 	ldr.w	r0, [r6, #1788]	; 0x6fc
 800989c:	493e      	ldr	r1, [pc, #248]	; (8009998 <ArtNetNode::Print()+0x180>)
 800989e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80098a2:	2800      	cmp	r0, #0
 80098a4:	bf18      	it	ne
 80098a6:	4641      	movne	r1, r8
 80098a8:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 80098ac:	08af      	lsrs	r7, r5, #2
 80098ae:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80098b2:	e9cd b300 	strd	fp, r3, [sp]
 80098b6:	463a      	mov	r2, r7
 80098b8:	4653      	mov	r3, sl
 80098ba:	4629      	mov	r1, r5
 80098bc:	4648      	mov	r0, r9
 80098be:	f009 fbdf 	bl	8013080 <printf>
 80098c2:	f8d6 1700 	ldr.w	r1, [r6, #1792]	; 0x700
 80098c6:	4a35      	ldr	r2, [pc, #212]	; (800999c <ArtNetNode::Print()+0x184>)
 80098c8:	4b35      	ldr	r3, [pc, #212]	; (80099a0 <ArtNetNode::Print()+0x188>)
 80098ca:	4836      	ldr	r0, [pc, #216]	; (80099a4 <ArtNetNode::Print()+0x18c>)
 80098cc:	2900      	cmp	r1, #0
 80098ce:	bf0c      	ite	eq
 80098d0:	4611      	moveq	r1, r2
 80098d2:	4619      	movne	r1, r3
 80098d4:	f009 fbd4 	bl	8013080 <printf>
 80098d8:	3501      	adds	r5, #1
 80098da:	3624      	adds	r6, #36	; 0x24
 80098dc:	e7c3      	b.n	8009866 <ArtNetNode::Print()+0x4e>
 80098de:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d045      	beq.n	8009972 <ArtNetNode::Print()+0x15a>
 80098e6:	4830      	ldr	r0, [pc, #192]	; (80099a8 <ArtNetNode::Print()+0x190>)
 80098e8:	f009 fbca 	bl	8013080 <printf>
 80098ec:	f04f 0b00 	mov.w	fp, #0
 80098f0:	4e2e      	ldr	r6, [pc, #184]	; (80099ac <ArtNetNode::Print()+0x194>)
 80098f2:	4f2f      	ldr	r7, [pc, #188]	; (80099b0 <ArtNetNode::Print()+0x198>)
 80098f4:	7823      	ldrb	r3, [r4, #0]
 80098f6:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
 80098fa:	d23a      	bcs.n	8009972 <ArtNetNode::Print()+0x15a>
 80098fc:	2300      	movs	r3, #0
 80098fe:	4659      	mov	r1, fp
 8009900:	4620      	mov	r0, r4
 8009902:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 8009906:	f7fe fe69 	bl	80085dc <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800990a:	b378      	cbz	r0, 800996c <ArtNetNode::Print()+0x154>
 800990c:	eb04 039b 	add.w	r3, r4, fp, lsr #2
 8009910:	f893 903e 	ldrb.w	r9, [r3, #62]	; 0x3e
 8009914:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
 8009918:	eb04 130b 	add.w	r3, r4, fp, lsl #4
 800991c:	f8d3 577c 	ldr.w	r5, [r3, #1916]	; 0x77c
 8009920:	ea4f 089b 	mov.w	r8, fp, lsr #2
 8009924:	b925      	cbnz	r5, 8009930 <ArtNetNode::Print()+0x118>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	699a      	ldr	r2, [r3, #24]
 800992a:	691d      	ldr	r5, [r3, #16]
 800992c:	ea65 0502 	orn	r5, r5, r2
 8009930:	2300      	movs	r3, #0
 8009932:	4659      	mov	r1, fp
 8009934:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8009938:	4620      	mov	r0, r4
 800993a:	f7fe fe39 	bl	80085b0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800993e:	0e2b      	lsrs	r3, r5, #24
 8009940:	9306      	str	r3, [sp, #24]
 8009942:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8009946:	9305      	str	r3, [sp, #20]
 8009948:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009952:	b2ed      	uxtb	r5, r5
 8009954:	9302      	str	r3, [sp, #8]
 8009956:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800995a:	4642      	mov	r2, r8
 800995c:	e9cd a300 	strd	sl, r3, [sp]
 8009960:	4659      	mov	r1, fp
 8009962:	464b      	mov	r3, r9
 8009964:	4630      	mov	r0, r6
 8009966:	9503      	str	r5, [sp, #12]
 8009968:	f009 fb8a 	bl	8013080 <printf>
 800996c:	f10b 0b01 	add.w	fp, fp, #1
 8009970:	e7c0      	b.n	80098f4 <ArtNetNode::Print()+0xdc>
 8009972:	b00b      	add	sp, #44	; 0x2c
 8009974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009978:	08015214 	stmdaeq	r1, {r2, r4, r9, ip, lr}
 800997c:	08015475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, ip, lr}
 8009980:	08015222 	stmdaeq	r1, {r1, r5, r9, ip, lr}
 8009984:	08015237 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, ip, lr}
 8009988:	08015249 	stmdaeq	r1, {r0, r3, r6, r9, ip, lr}
 800998c:	0801525b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, ip, lr}
 8009990:	08015203 	stmdaeq	r1, {r0, r1, r9, ip, lr}
 8009994:	08015264 	stmdaeq	r1, {r2, r5, r6, r9, ip, lr}
 8009998:	080151ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, ip, lr}
 800999c:	08015207 	stmdaeq	r1, {r0, r1, r2, r9, ip, lr}
 80099a0:	0801520f 	stmdaeq	r1, {r0, r1, r2, r3, r9, ip, lr}
 80099a4:	0801528c 	stmdaeq	r1, {r2, r3, r7, r9, ip, lr}
 80099a8:	08015293 	stmdaeq	r1, {r0, r1, r4, r7, r9, ip, lr}
 80099ac:	0801529b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r9, ip, lr}
 80099b0:	2000a7cc 	andcs	sl, r0, ip, asr #15

080099b4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 80099b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099b6:	88c5      	ldrh	r5, [r0, #6]
 80099b8:	8886      	ldrh	r6, [r0, #4]
 80099ba:	42b5      	cmp	r5, r6
 80099bc:	d216      	bcs.n	80099ec <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 80099be:	4604      	mov	r4, r0
 80099c0:	6800      	ldr	r0, [r0, #0]
 80099c2:	4428      	add	r0, r5
 80099c4:	1b75      	subs	r5, r6, r5
 80099c6:	7a26      	ldrb	r6, [r4, #8]
 80099c8:	b923      	cbnz	r3, 80099d4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 80099ca:	b926      	cbnz	r6, 80099d6 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 80099cc:	9200      	str	r2, [sp, #0]
 80099ce:	460b      	mov	r3, r1
 80099d0:	4a09      	ldr	r2, [pc, #36]	; (80099f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 80099d2:	e003      	b.n	80099dc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 80099d4:	b166      	cbz	r6, 80099f0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 80099d6:	460b      	mov	r3, r1
 80099d8:	9200      	str	r2, [sp, #0]
 80099da:	4a08      	ldr	r2, [pc, #32]	; (80099fc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 80099dc:	4629      	mov	r1, r5
 80099de:	f009 fb77 	bl	80130d0 <snprintf>
 80099e2:	4285      	cmp	r5, r0
 80099e4:	bfa2      	ittt	ge
 80099e6:	88e3      	ldrhge	r3, [r4, #6]
 80099e8:	181b      	addge	r3, r3, r0
 80099ea:	80e3      	strhge	r3, [r4, #6]
 80099ec:	b002      	add	sp, #8
 80099ee:	bd70      	pop	{r4, r5, r6, pc}
 80099f0:	9200      	str	r2, [sp, #0]
 80099f2:	460b      	mov	r3, r1
 80099f4:	4a02      	ldr	r2, [pc, #8]	; (8009a00 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 80099f6:	e7f1      	b.n	80099dc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 80099f8:	080152d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, ip, lr}
 80099fc:	080152ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, ip, lr}
 8009a00:	080152d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, lr}

08009a04 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 8009a04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a06:	88c5      	ldrh	r5, [r0, #6]
 8009a08:	8886      	ldrh	r6, [r0, #4]
 8009a0a:	42b5      	cmp	r5, r6
 8009a0c:	d216      	bcs.n	8009a3c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 8009a0e:	4604      	mov	r4, r0
 8009a10:	6800      	ldr	r0, [r0, #0]
 8009a12:	4428      	add	r0, r5
 8009a14:	1b75      	subs	r5, r6, r5
 8009a16:	7a26      	ldrb	r6, [r4, #8]
 8009a18:	b923      	cbnz	r3, 8009a24 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 8009a1a:	b926      	cbnz	r6, 8009a26 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 8009a1c:	9200      	str	r2, [sp, #0]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 8009a22:	e003      	b.n	8009a2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 8009a24:	b166      	cbz	r6, 8009a40 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 8009a26:	460b      	mov	r3, r1
 8009a28:	9200      	str	r2, [sp, #0]
 8009a2a:	4a08      	ldr	r2, [pc, #32]	; (8009a4c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	f009 fb4f 	bl	80130d0 <snprintf>
 8009a32:	4285      	cmp	r5, r0
 8009a34:	bfa2      	ittt	ge
 8009a36:	88e3      	ldrhge	r3, [r4, #6]
 8009a38:	181b      	addge	r3, r3, r0
 8009a3a:	80e3      	strhge	r3, [r4, #6]
 8009a3c:	b002      	add	sp, #8
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
 8009a40:	9200      	str	r2, [sp, #0]
 8009a42:	460b      	mov	r3, r1
 8009a44:	4a02      	ldr	r2, [pc, #8]	; (8009a50 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 8009a46:	e7f1      	b.n	8009a2c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 8009a48:	080152ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r9, ip, lr}
 8009a4c:	080152df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r9, ip, lr}
 8009a50:	080152eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, ip, lr}

08009a54 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 8009a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a56:	460b      	mov	r3, r1
 8009a58:	8885      	ldrh	r5, [r0, #4]
 8009a5a:	88c1      	ldrh	r1, [r0, #6]
 8009a5c:	42a9      	cmp	r1, r5
 8009a5e:	d214      	bcs.n	8009a8a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 8009a60:	4604      	mov	r4, r0
 8009a62:	6800      	ldr	r0, [r0, #0]
 8009a64:	1a6d      	subs	r5, r5, r1
 8009a66:	4408      	add	r0, r1
 8009a68:	7a21      	ldrb	r1, [r4, #8]
 8009a6a:	b91a      	cbnz	r2, 8009a74 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 8009a6c:	b919      	cbnz	r1, 8009a76 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 8009a6e:	4a0a      	ldr	r2, [pc, #40]	; (8009a98 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 8009a70:	9100      	str	r1, [sp, #0]
 8009a72:	e002      	b.n	8009a7a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8009a74:	b159      	cbz	r1, 8009a8e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 8009a76:	9200      	str	r2, [sp, #0]
 8009a78:	4a08      	ldr	r2, [pc, #32]	; (8009a9c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	f009 fb28 	bl	80130d0 <snprintf>
 8009a80:	4285      	cmp	r5, r0
 8009a82:	bfa2      	ittt	ge
 8009a84:	88e3      	ldrhge	r3, [r4, #6]
 8009a86:	181b      	addge	r3, r3, r0
 8009a88:	80e3      	strhge	r3, [r4, #6]
 8009a8a:	b003      	add	sp, #12
 8009a8c:	bd30      	pop	{r4, r5, pc}
 8009a8e:	2201      	movs	r2, #1
 8009a90:	9200      	str	r2, [sp, #0]
 8009a92:	4a03      	ldr	r2, [pc, #12]	; (8009aa0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 8009a94:	e7f1      	b.n	8009a7a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8009a96:	bf00      	nop
 8009a98:	080152d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, ip, lr}
 8009a9c:	080152ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, ip, lr}
 8009aa0:	080152d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, lr}

08009aa4 <strncpy.isra.0>:
 8009aa4:	1e4b      	subs	r3, r1, #1
 8009aa6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8009aaa:	b909      	cbnz	r1, 8009ab0 <strncpy.isra.0+0xc>
 8009aac:	f009 b8c6 	b.w	8012c3c <memset>
 8009ab0:	3a01      	subs	r2, #1
 8009ab2:	f800 1b01 	strb.w	r1, [r0], #1
 8009ab6:	d1f6      	bne.n	8009aa6 <strncpy.isra.0+0x2>
 8009ab8:	4770      	bx	lr
	...

08009abc <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 8009abc:	b510      	push	{r4, lr}
 8009abe:	2287      	movs	r2, #135	; 0x87
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	f840 1b04 	str.w	r1, [r0], #4
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	f009 f8b8 	bl	8012c3c <memset>
 8009acc:	2301      	movs	r3, #1
 8009ace:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8009ad2:	f240 3302 	movw	r3, #770	; 0x302
 8009ad6:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 8009ada:	2304      	movs	r3, #4
 8009adc:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 8009ae0:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x44>)
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	785a      	ldrb	r2, [r3, #1]
 8009ae6:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 8009af0:	230a      	movs	r3, #10
 8009af2:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 8009af6:	23ff      	movs	r3, #255	; 0xff
 8009af8:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 8009afc:	bd10      	pop	{r4, pc}
 8009afe:	bf00      	nop
 8009b00:	08015471 	stmdaeq	r1, {r0, r4, r5, r6, sl, ip, lr}

08009b04 <ArtNetParams::Load()>:
 8009b04:	b508      	push	{r3, lr}
 8009b06:	2300      	movs	r3, #0
 8009b08:	4601      	mov	r1, r0
 8009b0a:	6043      	str	r3, [r0, #4]
 8009b0c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 8009b10:	6800      	ldr	r0, [r0, #0]
 8009b12:	b120      	cbz	r0, 8009b1e <ArtNetParams::Load()+0x1a>
 8009b14:	6803      	ldr	r3, [r0, #0]
 8009b16:	3104      	adds	r1, #4
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	4798      	blx	r3
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	bd08      	pop	{r3, pc}

08009b20 <ArtNetParams::Load(char const*, unsigned int)>:
 8009b20:	6803      	ldr	r3, [r0, #0]
 8009b22:	b1e3      	cbz	r3, 8009b5e <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 8009b24:	2300      	movs	r3, #0
 8009b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b28:	460d      	mov	r5, r1
 8009b2a:	4616      	mov	r6, r2
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	6043      	str	r3, [r0, #4]
 8009b30:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 8009b34:	4602      	mov	r2, r0
 8009b36:	490a      	ldr	r1, [pc, #40]	; (8009b60 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 8009b38:	4668      	mov	r0, sp
 8009b3a:	f008 fa49 	bl	8011fd0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8009b3e:	4632      	mov	r2, r6
 8009b40:	4629      	mov	r1, r5
 8009b42:	4668      	mov	r0, sp
 8009b44:	f008 fa48 	bl	8011fd8 <ReadConfigFile::Read(char const*, unsigned int)>
 8009b48:	4621      	mov	r1, r4
 8009b4a:	f851 0b04 	ldr.w	r0, [r1], #4
 8009b4e:	6803      	ldr	r3, [r0, #0]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	4798      	blx	r3
 8009b54:	4668      	mov	r0, sp
 8009b56:	f008 fa3e 	bl	8011fd6 <ReadConfigFile::~ReadConfigFile()>
 8009b5a:	b002      	add	sp, #8
 8009b5c:	bd70      	pop	{r4, r5, r6, pc}
 8009b5e:	4770      	bx	lr
 8009b60:	08009f29 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, fp, ip, pc}

08009b64 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 8009b64:	6843      	ldr	r3, [r0, #4]
 8009b66:	b111      	cbz	r1, 8009b6e <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	6043      	str	r3, [r0, #4]
 8009b6c:	4770      	bx	lr
 8009b6e:	ea23 0302 	bic.w	r3, r3, r2
 8009b72:	e7fa      	b.n	8009b6a <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

08009b74 <ArtNetParams::callbackFunction(char const*)>:
 8009b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	460e      	mov	r6, r1
 8009b7a:	b0a5      	sub	sp, #148	; 0x94
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	49a7      	ldr	r1, [pc, #668]	; (8009e1c <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 8009b80:	4630      	mov	r0, r6
 8009b82:	f10d 0205 	add.w	r2, sp, #5
 8009b86:	f008 fafd 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009b8a:	b930      	cbnz	r0, 8009b9a <ArtNetParams::callbackFunction(char const*)+0x26>
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8009b94:	f7ff ffe6 	bl	8009b64 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 8009b98:	e010      	b.n	8009bbc <ArtNetParams::callbackFunction(char const*)+0x48>
 8009b9a:	2311      	movs	r3, #17
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	9303      	str	r3, [sp, #12]
 8009ba0:	499f      	ldr	r1, [pc, #636]	; (8009e20 <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 8009ba2:	ab03      	add	r3, sp, #12
 8009ba4:	f104 0210 	add.w	r2, r4, #16
 8009ba8:	f008 fa4a 	bl	8012040 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009bac:	b948      	cbnz	r0, 8009bc2 <ArtNetParams::callbackFunction(char const*)+0x4e>
 8009bae:	9b03      	ldr	r3, [sp, #12]
 8009bb0:	4423      	add	r3, r4
 8009bb2:	7418      	strb	r0, [r3, #16]
 8009bb4:	6863      	ldr	r3, [r4, #4]
 8009bb6:	f043 0302 	orr.w	r3, r3, #2
 8009bba:	6063      	str	r3, [r4, #4]
 8009bbc:	b025      	add	sp, #148	; 0x94
 8009bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc2:	233f      	movs	r3, #63	; 0x3f
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	4996      	ldr	r1, [pc, #600]	; (8009e24 <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 8009bca:	ab03      	add	r3, sp, #12
 8009bcc:	f104 0222 	add.w	r2, r4, #34	; 0x22
 8009bd0:	f008 fa36 	bl	8012040 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009bd4:	b938      	cbnz	r0, 8009be6 <ArtNetParams::callbackFunction(char const*)+0x72>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	4423      	add	r3, r4
 8009bda:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 8009bde:	6863      	ldr	r3, [r4, #4]
 8009be0:	f043 0301 	orr.w	r3, r3, #1
 8009be4:	e7e9      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009be6:	4630      	mov	r0, r6
 8009be8:	498f      	ldr	r1, [pc, #572]	; (8009e28 <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 8009bea:	f10d 0206 	add.w	r2, sp, #6
 8009bee:	f008 fa40 	bl	8012072 <Sscan::HexUint16(char const*, char const*, unsigned short&)>
 8009bf2:	b940      	cbnz	r0, 8009c06 <ArtNetParams::callbackFunction(char const*)+0x92>
 8009bf4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009bf8:	ba5b      	rev16	r3, r3
 8009bfa:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8009bfe:	6863      	ldr	r3, [r4, #4]
 8009c00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c04:	e7d9      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009c06:	4630      	mov	r0, r6
 8009c08:	4988      	ldr	r1, [pc, #544]	; (8009e2c <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 8009c0a:	f10d 0205 	add.w	r2, sp, #5
 8009c0e:	f008 fab9 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009c12:	b958      	cbnz	r0, 8009c2c <ArtNetParams::callbackFunction(char const*)+0xb8>
 8009c14:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009c18:	6863      	ldr	r3, [r4, #4]
 8009c1a:	2a0a      	cmp	r2, #10
 8009c1c:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 8009c20:	bf14      	ite	ne
 8009c22:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 8009c26:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 8009c2a:	e7c6      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	4980      	ldr	r1, [pc, #512]	; (8009e30 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 8009c30:	f10d 0205 	add.w	r2, sp, #5
 8009c34:	f008 faa6 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009c38:	b910      	cbnz	r0, 8009c40 <ArtNetParams::callbackFunction(char const*)+0xcc>
 8009c3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c3e:	e7a6      	b.n	8009b8e <ArtNetParams::callbackFunction(char const*)+0x1a>
 8009c40:	4630      	mov	r0, r6
 8009c42:	497c      	ldr	r1, [pc, #496]	; (8009e34 <ArtNetParams::callbackFunction(char const*)+0x2c0>)
 8009c44:	f10d 0205 	add.w	r2, sp, #5
 8009c48:	f008 fa9c 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009c4c:	b950      	cbnz	r0, 8009c64 <ArtNetParams::callbackFunction(char const*)+0xf0>
 8009c4e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009c52:	6863      	ldr	r3, [r4, #4]
 8009c54:	7222      	strb	r2, [r4, #8]
 8009c56:	b112      	cbz	r2, 8009c5e <ArtNetParams::callbackFunction(char const*)+0xea>
 8009c58:	f043 0304 	orr.w	r3, r3, #4
 8009c5c:	e7ad      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009c5e:	f023 0304 	bic.w	r3, r3, #4
 8009c62:	e7aa      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009c64:	4630      	mov	r0, r6
 8009c66:	4974      	ldr	r1, [pc, #464]	; (8009e38 <ArtNetParams::callbackFunction(char const*)+0x2c4>)
 8009c68:	f10d 0205 	add.w	r2, sp, #5
 8009c6c:	f008 fa8a 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009c70:	b950      	cbnz	r0, 8009c88 <ArtNetParams::callbackFunction(char const*)+0x114>
 8009c72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009c76:	6863      	ldr	r3, [r4, #4]
 8009c78:	7262      	strb	r2, [r4, #9]
 8009c7a:	b112      	cbz	r2, 8009c82 <ArtNetParams::callbackFunction(char const*)+0x10e>
 8009c7c:	f043 0308 	orr.w	r3, r3, #8
 8009c80:	e79b      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009c82:	f023 0308 	bic.w	r3, r3, #8
 8009c86:	e798      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009c88:	2303      	movs	r3, #3
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	9303      	str	r3, [sp, #12]
 8009c8e:	496b      	ldr	r1, [pc, #428]	; (8009e3c <ArtNetParams::callbackFunction(char const*)+0x2c8>)
 8009c90:	ab03      	add	r3, sp, #12
 8009c92:	aa04      	add	r2, sp, #16
 8009c94:	f008 f9d4 	bl	8012040 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009c98:	b9f0      	cbnz	r0, 8009cd8 <ArtNetParams::callbackFunction(char const*)+0x164>
 8009c9a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8009c9e:	6863      	ldr	r3, [r4, #4]
 8009ca0:	f042 0220 	orr.w	r2, r2, #32
 8009ca4:	2a6c      	cmp	r2, #108	; 0x6c
 8009ca6:	d111      	bne.n	8009ccc <ArtNetParams::callbackFunction(char const*)+0x158>
 8009ca8:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8009cac:	f042 0220 	orr.w	r2, r2, #32
 8009cb0:	2a74      	cmp	r2, #116	; 0x74
 8009cb2:	d10b      	bne.n	8009ccc <ArtNetParams::callbackFunction(char const*)+0x158>
 8009cb4:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8009cb8:	f042 0220 	orr.w	r2, r2, #32
 8009cbc:	2a70      	cmp	r2, #112	; 0x70
 8009cbe:	d105      	bne.n	8009ccc <ArtNetParams::callbackFunction(char const*)+0x158>
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cc6:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 8009cca:	e776      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009cd2:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 8009cd6:	e770      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009cd8:	2304      	movs	r3, #4
 8009cda:	4630      	mov	r0, r6
 8009cdc:	9303      	str	r3, [sp, #12]
 8009cde:	4958      	ldr	r1, [pc, #352]	; (8009e40 <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 8009ce0:	ab03      	add	r3, sp, #12
 8009ce2:	aa04      	add	r2, sp, #16
 8009ce4:	f008 f9ac 	bl	8012040 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009ce8:	b9c0      	cbnz	r0, 8009d1c <ArtNetParams::callbackFunction(char const*)+0x1a8>
 8009cea:	2304      	movs	r3, #4
 8009cec:	4a55      	ldr	r2, [pc, #340]	; (8009e44 <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 8009cee:	a904      	add	r1, sp, #16
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	d30c      	bcc.n	8009d0e <ArtNetParams::callbackFunction(char const*)+0x19a>
 8009cf4:	f811 5b01 	ldrb.w	r5, [r1], #1
 8009cf8:	f812 0b01 	ldrb.w	r0, [r2], #1
 8009cfc:	4285      	cmp	r5, r0
 8009cfe:	d0f7      	beq.n	8009cf0 <ArtNetParams::callbackFunction(char const*)+0x17c>
 8009d00:	2200      	movs	r2, #0
 8009d02:	6863      	ldr	r3, [r4, #4]
 8009d04:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
 8009d08:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009d0c:	e755      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 8009d14:	6863      	ldr	r3, [r4, #4]
 8009d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d1a:	e74e      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009d1c:	2500      	movs	r5, #0
 8009d1e:	4f4a      	ldr	r7, [pc, #296]	; (8009e48 <ArtNetParams::callbackFunction(char const*)+0x2d4>)
 8009d20:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8009e4c <ArtNetParams::callbackFunction(char const*)+0x2d8>
 8009d24:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009e50 <ArtNetParams::callbackFunction(char const*)+0x2dc>
 8009d28:	f8df a128 	ldr.w	sl, [pc, #296]	; 8009e54 <ArtNetParams::callbackFunction(char const*)+0x2e0>
 8009d2c:	4639      	mov	r1, r7
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f10d 0205 	add.w	r2, sp, #5
 8009d34:	f008 fa26 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009d38:	b9a0      	cbnz	r0, 8009d64 <ArtNetParams::callbackFunction(char const*)+0x1f0>
 8009d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d3e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8009d42:	6862      	ldr	r2, [r4, #4]
 8009d44:	280f      	cmp	r0, #15
 8009d46:	fa03 f305 	lsl.w	r3, r3, r5
 8009d4a:	eb04 0105 	add.w	r1, r4, r5
 8009d4e:	d803      	bhi.n	8009d58 <ArtNetParams::callbackFunction(char const*)+0x1e4>
 8009d50:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 8009d54:	4313      	orrs	r3, r2
 8009d56:	e730      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009d58:	3501      	adds	r5, #1
 8009d5a:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 8009d5e:	ea22 0303 	bic.w	r3, r2, r3
 8009d62:	e72a      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009d64:	f04f 0b12 	mov.w	fp, #18
 8009d68:	2303      	movs	r3, #3
 8009d6a:	fb0b fb05 	mul.w	fp, fp, r5
 8009d6e:	9303      	str	r3, [sp, #12]
 8009d70:	4630      	mov	r0, r6
 8009d72:	ab03      	add	r3, sp, #12
 8009d74:	aa04      	add	r2, sp, #16
 8009d76:	eb08 010b 	add.w	r1, r8, fp
 8009d7a:	f008 f961 	bl	8012040 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009d7e:	b9f0      	cbnz	r0, 8009dbe <ArtNetParams::callbackFunction(char const*)+0x24a>
 8009d80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d84:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8009d88:	40ab      	lsls	r3, r5
 8009d8a:	f041 0120 	orr.w	r1, r1, #32
 8009d8e:	296c      	cmp	r1, #108	; 0x6c
 8009d90:	6862      	ldr	r2, [r4, #4]
 8009d92:	4425      	add	r5, r4
 8009d94:	d10f      	bne.n	8009db6 <ArtNetParams::callbackFunction(char const*)+0x242>
 8009d96:	f89d 1011 	ldrb.w	r1, [sp, #17]
 8009d9a:	f041 0120 	orr.w	r1, r1, #32
 8009d9e:	2974      	cmp	r1, #116	; 0x74
 8009da0:	d109      	bne.n	8009db6 <ArtNetParams::callbackFunction(char const*)+0x242>
 8009da2:	f89d 1012 	ldrb.w	r1, [sp, #18]
 8009da6:	f041 0120 	orr.w	r1, r1, #32
 8009daa:	2970      	cmp	r1, #112	; 0x70
 8009dac:	d103      	bne.n	8009db6 <ArtNetParams::callbackFunction(char const*)+0x242>
 8009dae:	2101      	movs	r1, #1
 8009db0:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 8009db4:	e7ce      	b.n	8009d54 <ArtNetParams::callbackFunction(char const*)+0x1e0>
 8009db6:	2100      	movs	r1, #0
 8009db8:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 8009dbc:	e7cf      	b.n	8009d5e <ArtNetParams::callbackFunction(char const*)+0x1ea>
 8009dbe:	2304      	movs	r3, #4
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	9303      	str	r3, [sp, #12]
 8009dc4:	aa04      	add	r2, sp, #16
 8009dc6:	ab03      	add	r3, sp, #12
 8009dc8:	eb09 1105 	add.w	r1, r9, r5, lsl #4
 8009dcc:	f008 f938 	bl	8012040 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009dd0:	2305      	movs	r3, #5
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d140      	bne.n	8009e58 <ArtNetParams::callbackFunction(char const*)+0x2e4>
 8009dd6:	4a1b      	ldr	r2, [pc, #108]	; (8009e44 <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 8009dd8:	a904      	add	r1, sp, #16
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	d012      	beq.n	8009e04 <ArtNetParams::callbackFunction(char const*)+0x290>
 8009dde:	f811 6b01 	ldrb.w	r6, [r1], #1
 8009de2:	f812 0b01 	ldrb.w	r0, [r2], #1
 8009de6:	4286      	cmp	r6, r0
 8009de8:	d0f7      	beq.n	8009dda <ArtNetParams::callbackFunction(char const*)+0x266>
 8009dea:	2100      	movs	r1, #0
 8009dec:	1962      	adds	r2, r4, r5
 8009dee:	6863      	ldr	r3, [r4, #4]
 8009df0:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 8009df4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009df8:	fa02 f505 	lsl.w	r5, r2, r5
 8009dfc:	ea23 0505 	bic.w	r5, r3, r5
 8009e00:	6065      	str	r5, [r4, #4]
 8009e02:	e6db      	b.n	8009bbc <ArtNetParams::callbackFunction(char const*)+0x48>
 8009e04:	2201      	movs	r2, #1
 8009e06:	1963      	adds	r3, r4, r5
 8009e08:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8009e0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009e10:	fa03 f505 	lsl.w	r5, r3, r5
 8009e14:	6863      	ldr	r3, [r4, #4]
 8009e16:	432b      	orrs	r3, r5
 8009e18:	e6cf      	b.n	8009bba <ArtNetParams::callbackFunction(char const*)+0x46>
 8009e1a:	bf00      	nop
 8009e1c:	0801534a 	stmdaeq	r1, {r1, r3, r6, r8, r9, ip, lr}
 8009e20:	080153b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, r9, ip, lr}
 8009e24:	080153a3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, ip, lr}
 8009e28:	080153ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, ip, lr}
 8009e2c:	08015438 	stmdaeq	r1, {r3, r4, r5, sl, ip, lr}
 8009e30:	08015422 	stmdaeq	r1, {r1, r5, sl, ip, lr}
 8009e34:	08015452 	stmdaeq	r1, {r1, r4, r6, sl, ip, lr}
 8009e38:	08015456 	stmdaeq	r1, {r1, r2, r4, r6, sl, ip, lr}
 8009e3c:	08016d1b 	stmdaeq	r1, {r0, r1, r3, r4, r8, sl, fp, sp, lr}
 8009e40:	0801545d 	stmdaeq	r1, {r0, r2, r3, r4, r6, sl, ip, lr}
 8009e44:	080152f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, ip, lr}
 8009e48:	08016d26 	stmdaeq	r1, {r1, r2, r5, r8, sl, fp, sp, lr}
 8009e4c:	08016d66 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, fp, sp, lr}
 8009e50:	08015363 	stmdaeq	r1, {r0, r1, r5, r6, r8, r9, ip, lr}
 8009e54:	08016dc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, sl, fp, sp, lr}
 8009e58:	9303      	str	r3, [sp, #12]
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	ab03      	add	r3, sp, #12
 8009e5e:	aa04      	add	r2, sp, #16
 8009e60:	eb0a 010b 	add.w	r1, sl, fp
 8009e64:	f008 f8ec 	bl	8012040 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8009e68:	bb68      	cbnz	r0, 8009ec6 <ArtNetParams::callbackFunction(char const*)+0x352>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 8009e70:	40ab      	lsls	r3, r5
 8009e72:	ea22 0303 	bic.w	r3, r2, r3
 8009e76:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8009e7a:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 8009e7e:	f042 0220 	orr.w	r2, r2, #32
 8009e82:	2a69      	cmp	r2, #105	; 0x69
 8009e84:	d118      	bne.n	8009eb8 <ArtNetParams::callbackFunction(char const*)+0x344>
 8009e86:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8009e8a:	f042 0220 	orr.w	r2, r2, #32
 8009e8e:	2a6e      	cmp	r2, #110	; 0x6e
 8009e90:	d112      	bne.n	8009eb8 <ArtNetParams::callbackFunction(char const*)+0x344>
 8009e92:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8009e96:	f042 0220 	orr.w	r2, r2, #32
 8009e9a:	2a70      	cmp	r2, #112	; 0x70
 8009e9c:	d10c      	bne.n	8009eb8 <ArtNetParams::callbackFunction(char const*)+0x344>
 8009e9e:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8009ea2:	f042 0220 	orr.w	r2, r2, #32
 8009ea6:	2a75      	cmp	r2, #117	; 0x75
 8009ea8:	d106      	bne.n	8009eb8 <ArtNetParams::callbackFunction(char const*)+0x344>
 8009eaa:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8009eae:	f042 0220 	orr.w	r2, r2, #32
 8009eb2:	2a74      	cmp	r2, #116	; 0x74
 8009eb4:	f43f ae82 	beq.w	8009bbc <ArtNetParams::callbackFunction(char const*)+0x48>
 8009eb8:	2201      	movs	r2, #1
 8009eba:	fa02 f505 	lsl.w	r5, r2, r5
 8009ebe:	432b      	orrs	r3, r5
 8009ec0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 8009ec4:	e67a      	b.n	8009bbc <ArtNetParams::callbackFunction(char const*)+0x48>
 8009ec6:	2118      	movs	r1, #24
 8009ec8:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <ArtNetParams::callbackFunction(char const*)+0x3ac>)
 8009eca:	4630      	mov	r0, r6
 8009ecc:	fb01 3105 	mla	r1, r1, r5, r3
 8009ed0:	aa02      	add	r2, sp, #8
 8009ed2:	f008 f8f9 	bl	80120c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8009ed6:	b968      	cbnz	r0, 8009ef4 <ArtNetParams::callbackFunction(char const*)+0x380>
 8009ed8:	9902      	ldr	r1, [sp, #8]
 8009eda:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ede:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	40ab      	lsls	r3, r5
 8009ee6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	b1a1      	cbz	r1, 8009f18 <ArtNetParams::callbackFunction(char const*)+0x3a4>
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8009ef4:	3501      	adds	r5, #1
 8009ef6:	2d04      	cmp	r5, #4
 8009ef8:	f107 0710 	add.w	r7, r7, #16
 8009efc:	f47f af16 	bne.w	8009d2c <ArtNetParams::callbackFunction(char const*)+0x1b8>
 8009f00:	4630      	mov	r0, r6
 8009f02:	4908      	ldr	r1, [pc, #32]	; (8009f24 <ArtNetParams::callbackFunction(char const*)+0x3b0>)
 8009f04:	f10d 0205 	add.w	r2, sp, #5
 8009f08:	f008 f93c 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f47f ae55 	bne.w	8009bbc <ArtNetParams::callbackFunction(char const*)+0x48>
 8009f12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009f16:	e63a      	b.n	8009b8e <ArtNetParams::callbackFunction(char const*)+0x1a>
 8009f18:	ea22 0303 	bic.w	r3, r2, r3
 8009f1c:	e7e8      	b.n	8009ef0 <ArtNetParams::callbackFunction(char const*)+0x37c>
 8009f1e:	bf00      	nop
 8009f20:	080153c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, ip, lr}
 8009f24:	08015355 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, ip, lr}

08009f28 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 8009f28:	f7ff be24 	b.w	8009b74 <ArtNetParams::callbackFunction(char const*)>

08009f2c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 8009f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f30:	4604      	mov	r4, r0
 8009f32:	4615      	mov	r5, r2
 8009f34:	461e      	mov	r6, r3
 8009f36:	b086      	sub	sp, #24
 8009f38:	3004      	adds	r0, #4
 8009f3a:	2900      	cmp	r1, #0
 8009f3c:	f000 814b 	beq.w	800a1d6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2aa>
 8009f40:	2287      	movs	r2, #135	; 0x87
 8009f42:	f008 fe64 	bl	8012c0e <memmove>
 8009f46:	4633      	mov	r3, r6
 8009f48:	462a      	mov	r2, r5
 8009f4a:	49a6      	ldr	r1, [pc, #664]	; (800a1e4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 8009f4c:	a803      	add	r0, sp, #12
 8009f4e:	f007 ff6f 	bl	8011e30 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8009f52:	2500      	movs	r5, #0
 8009f54:	4ea4      	ldr	r6, [pc, #656]	; (800a1e8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 8009f56:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800a1ec <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>
 8009f5a:	4fa5      	ldr	r7, [pc, #660]	; (800a1f0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 8009f5c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 8009f60:	4631      	mov	r1, r6
 8009f62:	412b      	asrs	r3, r5
 8009f64:	f013 0f01 	tst.w	r3, #1
 8009f68:	ea6f 0303 	mvn.w	r3, r3
 8009f6c:	bf0c      	ite	eq
 8009f6e:	4642      	moveq	r2, r8
 8009f70:	463a      	movne	r2, r7
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	a803      	add	r0, sp, #12
 8009f78:	3501      	adds	r5, #1
 8009f7a:	f7ff fd43 	bl	8009a04 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 8009f7e:	2d04      	cmp	r5, #4
 8009f80:	f106 0612 	add.w	r6, r6, #18
 8009f84:	d1ea      	bne.n	8009f5c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30>
 8009f86:	6863      	ldr	r3, [r4, #4]
 8009f88:	7a22      	ldrb	r2, [r4, #8]
 8009f8a:	499a      	ldr	r1, [pc, #616]	; (800a1f4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 8009f8c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009f90:	a803      	add	r0, sp, #12
 8009f92:	f7ff fd0f 	bl	80099b4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8009f96:	6863      	ldr	r3, [r4, #4]
 8009f98:	7a62      	ldrb	r2, [r4, #9]
 8009f9a:	4997      	ldr	r1, [pc, #604]	; (800a1f8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 8009f9c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8009fa0:	a803      	add	r0, sp, #12
 8009fa2:	f7ff fd07 	bl	80099b4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8009fa6:	4995      	ldr	r1, [pc, #596]	; (800a1fc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 8009fa8:	a803      	add	r0, sp, #12
 8009faa:	f007 ffc7 	bl	8011f3c <PropertiesBuilder::AddComment(char const*)>
 8009fae:	2500      	movs	r5, #0
 8009fb0:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 8009fb4:	4e92      	ldr	r6, [pc, #584]	; (800a200 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 8009fb6:	f104 076b 	add.w	r7, r4, #107	; 0x6b
 8009fba:	6862      	ldr	r2, [r4, #4]
 8009fbc:	fa08 f305 	lsl.w	r3, r8, r5
 8009fc0:	4393      	bics	r3, r2
 8009fc2:	bf0c      	ite	eq
 8009fc4:	2301      	moveq	r3, #1
 8009fc6:	2300      	movne	r3, #0
 8009fc8:	4631      	mov	r1, r6
 8009fca:	f817 2b01 	ldrb.w	r2, [r7], #1
 8009fce:	a803      	add	r0, sp, #12
 8009fd0:	3501      	adds	r5, #1
 8009fd2:	f7ff fcef 	bl	80099b4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8009fd6:	2d04      	cmp	r5, #4
 8009fd8:	f106 0610 	add.w	r6, r6, #16
 8009fdc:	d1ed      	bne.n	8009fba <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8009fde:	4989      	ldr	r1, [pc, #548]	; (800a204 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 8009fe0:	a803      	add	r0, sp, #12
 8009fe2:	f007 ffab 	bl	8011f3c <PropertiesBuilder::AddComment(char const*)>
 8009fe6:	6863      	ldr	r3, [r4, #4]
 8009fe8:	f104 0622 	add.w	r6, r4, #34	; 0x22
 8009fec:	f013 0501 	ands.w	r5, r3, #1
 8009ff0:	d108      	bne.n	800a004 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xd8>
 8009ff2:	4b85      	ldr	r3, [pc, #532]	; (800a208 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 8009ff4:	223f      	movs	r2, #63	; 0x3f
 8009ff6:	6819      	ldr	r1, [r3, #0]
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	3154      	adds	r1, #84	; 0x54
 8009ffc:	f7ff fd52 	bl	8009aa4 <strncpy.isra.0>
 800a000:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800a004:	6863      	ldr	r3, [r4, #4]
 800a006:	4632      	mov	r2, r6
 800a008:	f003 0301 	and.w	r3, r3, #1
 800a00c:	497f      	ldr	r1, [pc, #508]	; (800a20c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 800a00e:	a803      	add	r0, sp, #12
 800a010:	f7ff fcf8 	bl	8009a04 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a014:	6863      	ldr	r3, [r4, #4]
 800a016:	f104 0610 	add.w	r6, r4, #16
 800a01a:	f013 0502 	ands.w	r5, r3, #2
 800a01e:	d108      	bne.n	800a032 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 800a020:	4b79      	ldr	r3, [pc, #484]	; (800a208 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800a022:	2211      	movs	r2, #17
 800a024:	6819      	ldr	r1, [r3, #0]
 800a026:	4630      	mov	r0, r6
 800a028:	3142      	adds	r1, #66	; 0x42
 800a02a:	f7ff fd3b 	bl	8009aa4 <strncpy.isra.0>
 800a02e:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800a032:	6863      	ldr	r3, [r4, #4]
 800a034:	4632      	mov	r2, r6
 800a036:	4976      	ldr	r1, [pc, #472]	; (800a210 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 800a038:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a03c:	a803      	add	r0, sp, #12
 800a03e:	f7ff fce1 	bl	8009a04 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a042:	2104      	movs	r1, #4
 800a044:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800a048:	6863      	ldr	r3, [r4, #4]
 800a04a:	ba52      	rev16	r2, r2
 800a04c:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800a050:	b292      	uxth	r2, r2
 800a052:	9100      	str	r1, [sp, #0]
 800a054:	a803      	add	r0, sp, #12
 800a056:	496f      	ldr	r1, [pc, #444]	; (800a214 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e8>)
 800a058:	f007 ff8a 	bl	8011f70 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>
 800a05c:	496e      	ldr	r1, [pc, #440]	; (800a218 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ec>)
 800a05e:	a803      	add	r0, sp, #12
 800a060:	f007 ff6c 	bl	8011f3c <PropertiesBuilder::AddComment(char const*)>
 800a064:	6862      	ldr	r2, [r4, #4]
 800a066:	496d      	ldr	r1, [pc, #436]	; (800a21c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f0>)
 800a068:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800a06c:	a803      	add	r0, sp, #12
 800a06e:	f7ff fcf1 	bl	8009a54 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a072:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800a220 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f4>
 800a076:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800a07a:	6863      	ldr	r3, [r4, #4]
 800a07c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a224 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f8>
 800a080:	4969      	ldr	r1, [pc, #420]	; (800a228 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2fc>)
 800a082:	2a00      	cmp	r2, #0
 800a084:	bf0c      	ite	eq
 800a086:	464a      	moveq	r2, r9
 800a088:	4642      	movne	r2, r8
 800a08a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800a08e:	a803      	add	r0, sp, #12
 800a090:	f7ff fcb8 	bl	8009a04 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a094:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	4964      	ldr	r1, [pc, #400]	; (800a22c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800a09c:	4a64      	ldr	r2, [pc, #400]	; (800a230 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800a09e:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	bf18      	it	ne
 800a0a6:	460a      	movne	r2, r1
 800a0a8:	4962      	ldr	r1, [pc, #392]	; (800a234 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x308>)
 800a0aa:	a803      	add	r0, sp, #12
 800a0ac:	f7ff fcaa 	bl	8009a04 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a0b0:	2500      	movs	r5, #0
 800a0b2:	4e61      	ldr	r6, [pc, #388]	; (800a238 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30c>)
 800a0b4:	f8df a184 	ldr.w	sl, [pc, #388]	; 800a23c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x310>
 800a0b8:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800a0bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a0c0:	6861      	ldr	r1, [r4, #4]
 800a0c2:	40ab      	lsls	r3, r5
 800a0c4:	438b      	bics	r3, r1
 800a0c6:	f04f 0112 	mov.w	r1, #18
 800a0ca:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a0ce:	bf0c      	ite	eq
 800a0d0:	2301      	moveq	r3, #1
 800a0d2:	2300      	movne	r3, #0
 800a0d4:	fb01 a105 	mla	r1, r1, r5, sl
 800a0d8:	2a00      	cmp	r2, #0
 800a0da:	bf0c      	ite	eq
 800a0dc:	464a      	moveq	r2, r9
 800a0de:	4642      	movne	r2, r8
 800a0e0:	a803      	add	r0, sp, #12
 800a0e2:	f7ff fc8f 	bl	8009a04 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a0e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a0ea:	6862      	ldr	r2, [r4, #4]
 800a0ec:	40ab      	lsls	r3, r5
 800a0ee:	4393      	bics	r3, r2
 800a0f0:	7938      	ldrb	r0, [r7, #4]
 800a0f2:	494e      	ldr	r1, [pc, #312]	; (800a22c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800a0f4:	4a4e      	ldr	r2, [pc, #312]	; (800a230 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800a0f6:	bf0c      	ite	eq
 800a0f8:	2301      	moveq	r3, #1
 800a0fa:	2300      	movne	r3, #0
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	2800      	cmp	r0, #0
 800a100:	bf18      	it	ne
 800a102:	460a      	movne	r2, r1
 800a104:	4631      	mov	r1, r6
 800a106:	a803      	add	r0, sp, #12
 800a108:	f7ff fc7c 	bl	8009a04 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a10c:	2d04      	cmp	r5, #4
 800a10e:	f106 0610 	add.w	r6, r6, #16
 800a112:	d1d3      	bne.n	800a0bc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x190>
 800a114:	6863      	ldr	r3, [r4, #4]
 800a116:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 800a11a:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800a11e:	4948      	ldr	r1, [pc, #288]	; (800a240 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x314>)
 800a120:	a803      	add	r0, sp, #12
 800a122:	f7ff fc47 	bl	80099b4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a126:	6862      	ldr	r2, [r4, #4]
 800a128:	4946      	ldr	r1, [pc, #280]	; (800a244 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x318>)
 800a12a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800a12e:	a803      	add	r0, sp, #12
 800a130:	f7ff fc90 	bl	8009a54 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a134:	4944      	ldr	r1, [pc, #272]	; (800a248 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x31c>)
 800a136:	a803      	add	r0, sp, #12
 800a138:	f007 ff00 	bl	8011f3c <PropertiesBuilder::AddComment(char const*)>
 800a13c:	2500      	movs	r5, #0
 800a13e:	2601      	movs	r6, #1
 800a140:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800a24c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x320>
 800a144:	4f30      	ldr	r7, [pc, #192]	; (800a208 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800a146:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800a14a:	fa06 f305 	lsl.w	r3, r6, r5
 800a14e:	b29b      	uxth	r3, r3
 800a150:	401a      	ands	r2, r3
 800a152:	4293      	cmp	r3, r2
 800a154:	bf0c      	ite	eq
 800a156:	2301      	moveq	r3, #1
 800a158:	2300      	movne	r3, #0
 800a15a:	f105 021c 	add.w	r2, r5, #28
 800a15e:	d008      	beq.n	800a172 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800a166:	f8d1 077c 	ldr.w	r0, [r1, #1916]	; 0x77c
 800a16a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800a16e:	f8c1 000b 	str.w	r0, [r1, #11]
 800a172:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a176:	4641      	mov	r1, r8
 800a178:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800a17c:	a803      	add	r0, sp, #12
 800a17e:	3501      	adds	r5, #1
 800a180:	f007 fe98 	bl	8011eb4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800a184:	2d04      	cmp	r5, #4
 800a186:	f108 0818 	add.w	r8, r8, #24
 800a18a:	d1dc      	bne.n	800a146 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x21a>
 800a18c:	4930      	ldr	r1, [pc, #192]	; (800a250 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x324>)
 800a18e:	a803      	add	r0, sp, #12
 800a190:	f007 fed4 	bl	8011f3c <PropertiesBuilder::AddComment(char const*)>
 800a194:	6862      	ldr	r2, [r4, #4]
 800a196:	492f      	ldr	r1, [pc, #188]	; (800a254 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x328>)
 800a198:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 800a19c:	a803      	add	r0, sp, #12
 800a19e:	f7ff fc59 	bl	8009a54 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a1a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a1a6:	b17b      	cbz	r3, 800a1c8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>
 800a1a8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a1ac:	9b03      	ldr	r3, [sp, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	227d      	movs	r2, #125	; 0x7d
 800a1b2:	f803 2c01 	strb.w	r2, [r3, #-1]
 800a1b6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a1ba:	9903      	ldr	r1, [sp, #12]
 800a1bc:	54ca      	strb	r2, [r1, r3]
 800a1be:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	f8ad 3012 	strh.w	r3, [sp, #18]
 800a1c8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a1cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	b006      	add	sp, #24
 800a1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	4601      	mov	r1, r0
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	68d2      	ldr	r2, [r2, #12]
 800a1e0:	4790      	blx	r2
 800a1e2:	e6b0      	b.n	8009f46 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800a1e4:	08015466 	stmdaeq	r1, {r1, r2, r5, r6, sl, ip, lr}
 800a1e8:	08016dc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, sl, fp, sp, lr}
 800a1ec:	080152f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r9, ip, lr}
 800a1f0:	080152fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, ip, lr}
 800a1f4:	08015452 	stmdaeq	r1, {r1, r4, r6, sl, ip, lr}
 800a1f8:	08015456 	stmdaeq	r1, {r1, r2, r4, r6, sl, ip, lr}
 800a1fc:	08015313 	stmdaeq	r1, {r0, r1, r4, r8, r9, ip, lr}
 800a200:	08016d26 	stmdaeq	r1, {r1, r2, r5, r8, sl, fp, sp, lr}
 800a204:	0801532c 	stmdaeq	r1, {r2, r3, r5, r8, r9, ip, lr}
 800a208:	20001910 	andcs	r1, r0, r0, lsl r9
 800a20c:	080153a3 	stmdaeq	r1, {r0, r1, r5, r7, r8, r9, ip, lr}
 800a210:	080153b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, r9, ip, lr}
 800a214:	080153ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, ip, lr}
 800a218:	08015331 	stmdaeq	r1, {r0, r4, r5, r8, r9, ip, lr}
 800a21c:	0801534a 	stmdaeq	r1, {r1, r3, r6, r8, r9, ip, lr}
 800a220:	08015304 	stmdaeq	r1, {r2, r8, r9, ip, lr}
 800a224:	08015308 	stmdaeq	r1, {r3, r8, r9, ip, lr}
 800a228:	08016d1b 	stmdaeq	r1, {r0, r1, r3, r4, r8, sl, fp, sp, lr}
 800a22c:	080152f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, ip, lr}
 800a230:	0801530c 	stmdaeq	r1, {r2, r3, r8, r9, ip, lr}
 800a234:	0801545d 	stmdaeq	r1, {r0, r2, r3, r4, r6, sl, ip, lr}
 800a238:	08015363 	stmdaeq	r1, {r0, r1, r5, r6, r8, r9, ip, lr}
 800a23c:	08016d66 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, fp, sp, lr}
 800a240:	08015438 	stmdaeq	r1, {r3, r4, r5, sl, ip, lr}
 800a244:	08015422 	stmdaeq	r1, {r1, r5, sl, ip, lr}
 800a248:	08014fc1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	080153c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, ip, lr}
 800a250:	08015340 	stmdaeq	r1, {r6, r8, r9, ip, lr}
 800a254:	08015355 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, ip, lr}

0800a258 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800a258:	b513      	push	{r0, r1, r4, lr}
 800a25a:	6804      	ldr	r4, [r0, #0]
 800a25c:	b914      	cbnz	r4, 800a264 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800a25e:	601c      	str	r4, [r3, #0]
 800a260:	b002      	add	sp, #8
 800a262:	bd10      	pop	{r4, pc}
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	4613      	mov	r3, r2
 800a268:	460a      	mov	r2, r1
 800a26a:	2100      	movs	r1, #0
 800a26c:	f7ff fe5e 	bl	8009f2c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800a270:	e7f6      	b.n	800a260 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800a272 <ArtNetParams::Set(ArtNetNode*)>:
 800a272:	6843      	ldr	r3, [r0, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d07d      	beq.n	800a374 <ArtNetParams::Set(ArtNetNode*)+0x102>
 800a278:	079a      	lsls	r2, r3, #30
 800a27a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a27e:	4604      	mov	r4, r0
 800a280:	460d      	mov	r5, r1
 800a282:	d504      	bpl.n	800a28e <ArtNetParams::Set(ArtNetNode*)+0x1c>
 800a284:	f100 0110 	add.w	r1, r0, #16
 800a288:	4628      	mov	r0, r5
 800a28a:	f7fd ff51 	bl	8008130 <ArtNetNode::SetShortName(char const*)>
 800a28e:	6863      	ldr	r3, [r4, #4]
 800a290:	07db      	lsls	r3, r3, #31
 800a292:	d504      	bpl.n	800a29e <ArtNetParams::Set(ArtNetNode*)+0x2c>
 800a294:	4628      	mov	r0, r5
 800a296:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800a29a:	f7fd ff71 	bl	8008180 <ArtNetNode::SetLongName(char const*)>
 800a29e:	6863      	ldr	r3, [r4, #4]
 800a2a0:	075f      	lsls	r7, r3, #29
 800a2a2:	d504      	bpl.n	800a2ae <ArtNetParams::Set(ArtNetNode*)+0x3c>
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	7a21      	ldrb	r1, [r4, #8]
 800a2aa:	f7fe faa1 	bl	80087f0 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800a2ae:	6863      	ldr	r3, [r4, #4]
 800a2b0:	071e      	lsls	r6, r3, #28
 800a2b2:	d504      	bpl.n	800a2be <ArtNetParams::Set(ArtNetNode*)+0x4c>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	7a61      	ldrb	r1, [r4, #9]
 800a2ba:	f7fe fa6b 	bl	8008794 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800a2be:	6863      	ldr	r3, [r4, #4]
 800a2c0:	0558      	lsls	r0, r3, #21
 800a2c2:	d504      	bpl.n	800a2ce <ArtNetParams::Set(ArtNetNode*)+0x5c>
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800a2ca:	f7fe f823 	bl	8008314 <ArtNetNode::SetOemValue(unsigned char const*)>
 800a2ce:	6863      	ldr	r3, [r4, #4]
 800a2d0:	2600      	movs	r6, #0
 800a2d2:	0519      	lsls	r1, r3, #20
 800a2d4:	bf44      	itt	mi
 800a2d6:	f44f 727a 	movmi.w	r2, #1000	; 0x3e8
 800a2da:	f894 3066 	ldrbmi.w	r3, [r4, #102]	; 0x66
 800a2de:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 800a2e2:	bf44      	itt	mi
 800a2e4:	4353      	mulmi	r3, r2
 800a2e6:	f8c5 36cc 	strmi.w	r3, [r5, #1740]	; 0x6cc
 800a2ea:	6863      	ldr	r3, [r4, #4]
 800a2ec:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800a2f0:	04da      	lsls	r2, r3, #19
 800a2f2:	bf48      	it	mi
 800a2f4:	2301      	movmi	r3, #1
 800a2f6:	f04f 0a01 	mov.w	sl, #1
 800a2fa:	bf48      	it	mi
 800a2fc:	f885 36dc 	strbmi.w	r3, [r5, #1756]	; 0x6dc
 800a300:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800a304:	6863      	ldr	r3, [r4, #4]
 800a306:	fa08 f206 	lsl.w	r2, r8, r6
 800a30a:	ea32 0303 	bics.w	r3, r2, r3
 800a30e:	bf0c      	ite	eq
 800a310:	783a      	ldrbeq	r2, [r7, #0]
 800a312:	f894 206f 	ldrbne.w	r2, [r4, #111]	; 0x6f
 800a316:	4631      	mov	r1, r6
 800a318:	4628      	mov	r0, r5
 800a31a:	f7fe fac8 	bl	80088ae <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800a31e:	6863      	ldr	r3, [r4, #4]
 800a320:	fa09 f206 	lsl.w	r2, r9, r6
 800a324:	ea32 0303 	bics.w	r3, r2, r3
 800a328:	bf0c      	ite	eq
 800a32a:	797a      	ldrbeq	r2, [r7, #5]
 800a32c:	f894 2074 	ldrbne.w	r2, [r4, #116]	; 0x74
 800a330:	4631      	mov	r1, r6
 800a332:	4628      	mov	r0, r5
 800a334:	f7fe fa8a 	bl	800884c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800a338:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800a33c:	fa0a f306 	lsl.w	r3, sl, r6
 800a340:	b29b      	uxth	r3, r3
 800a342:	4393      	bics	r3, r2
 800a344:	d109      	bne.n	800a35a <ArtNetParams::Set(ArtNetNode*)+0xe8>
 800a346:	f106 031c 	add.w	r3, r6, #28
 800a34a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a34e:	4631      	mov	r1, r6
 800a350:	4628      	mov	r0, r5
 800a352:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800a356:	f7fe fdc3 	bl	8008ee0 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800a35a:	3601      	adds	r6, #1
 800a35c:	2e04      	cmp	r6, #4
 800a35e:	f107 0701 	add.w	r7, r7, #1
 800a362:	d1cf      	bne.n	800a304 <ArtNetParams::Set(ArtNetNode*)+0x92>
 800a364:	6863      	ldr	r3, [r4, #4]
 800a366:	011b      	lsls	r3, r3, #4
 800a368:	bf44      	itt	mi
 800a36a:	2301      	movmi	r3, #1
 800a36c:	f885 309e 	strbmi.w	r3, [r5, #158]	; 0x9e
 800a370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a374:	4770      	bx	lr

0800a376 <ArtNetParams::Dump()>:
 800a376:	4770      	bx	lr

0800a378 <ArtNetNode::HandleTrigger()>:
 800a378:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800a37c:	4601      	mov	r1, r0
 800a37e:	2bff      	cmp	r3, #255	; 0xff
 800a380:	d103      	bne.n	800a38a <ArtNetNode::HandleTrigger()+0x12>
 800a382:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
 800a386:	2aff      	cmp	r2, #255	; 0xff
 800a388:	d009      	beq.n	800a39e <ArtNetNode::HandleTrigger()+0x26>
 800a38a:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
 800a38e:	429a      	cmp	r2, r3
 800a390:	d10a      	bne.n	800a3a8 <ArtNetNode::HandleTrigger()+0x30>
 800a392:	f891 20af 	ldrb.w	r2, [r1, #175]	; 0xaf
 800a396:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d104      	bne.n	800a3a8 <ArtNetNode::HandleTrigger()+0x30>
 800a39e:	6988      	ldr	r0, [r1, #24]
 800a3a0:	31b0      	adds	r1, #176	; 0xb0
 800a3a2:	6803      	ldr	r3, [r0, #0]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	4718      	bx	r3
 800a3a8:	4770      	bx	lr
	...

0800a3ac <e131::universe_to_multicast_ip(unsigned short)>:
 800a3ac:	b513      	push	{r0, r1, r4, lr}
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	a901      	add	r1, sp, #4
 800a3b2:	4806      	ldr	r0, [pc, #24]	; (800a3cc <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800a3b4:	f008 fb70 	bl	8012a98 <inet_aton>
 800a3b8:	9801      	ldr	r0, [sp, #4]
 800a3ba:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800a3be:	0224      	lsls	r4, r4, #8
 800a3c0:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800a3c4:	4320      	orrs	r0, r4
 800a3c6:	b002      	add	sp, #8
 800a3c8:	bd10      	pop	{r4, pc}
 800a3ca:	bf00      	nop
 800a3cc:	08015477 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, ip, lr}

0800a3d0 <memset.constprop.0.isra.0>:
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	4401      	add	r1, r0
 800a3d4:	4288      	cmp	r0, r1
 800a3d6:	d002      	beq.n	800a3de <memset.constprop.0.isra.0+0xe>
 800a3d8:	f800 3b01 	strb.w	r3, [r0], #1
 800a3dc:	e7fa      	b.n	800a3d4 <memset.constprop.0.isra.0+0x4>
 800a3de:	4770      	bx	lr

0800a3e0 <memcpy.isra.0>:
 800a3e0:	3801      	subs	r0, #1
 800a3e2:	440a      	add	r2, r1
 800a3e4:	4291      	cmp	r1, r2
 800a3e6:	d004      	beq.n	800a3f2 <memcpy.isra.0+0x12>
 800a3e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3ec:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a3f0:	e7f8      	b.n	800a3e4 <memcpy.isra.0+0x4>
 800a3f2:	4770      	bx	lr

0800a3f4 <lightset::Data::IOutput(LightSet*, unsigned int) const>:
 800a3f4:	f240 6304 	movw	r3, #1540	; 0x604
 800a3f8:	b470      	push	{r4, r5, r6}
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	4353      	muls	r3, r2
 800a400:	4611      	mov	r1, r2
 800a402:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800a406:	18ea      	adds	r2, r5, r3
 800a408:	6803      	ldr	r3, [r0, #0]
 800a40a:	691e      	ldr	r6, [r3, #16]
 800a40c:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800a410:	46b4      	mov	ip, r6
 800a412:	192a      	adds	r2, r5, r4
 800a414:	bc70      	pop	{r4, r5, r6}
 800a416:	4760      	bx	ip

0800a418 <E131Bridge::Start()>:
 800a418:	6943      	ldr	r3, [r0, #20]
 800a41a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a41c:	4604      	mov	r4, r0
 800a41e:	b35b      	cbz	r3, 800a478 <E131Bridge::Start()+0x60>
 800a420:	6983      	ldr	r3, [r0, #24]
 800a422:	b9cb      	cbnz	r3, 800a458 <E131Bridge::Start()+0x40>
 800a424:	a901      	add	r1, sp, #4
 800a426:	4818      	ldr	r0, [pc, #96]	; (800a488 <E131Bridge::Start()+0x70>)
 800a428:	f008 fb36 	bl	8012a98 <inet_aton>
 800a42c:	9b01      	ldr	r3, [sp, #4]
 800a42e:	f240 207e 	movw	r0, #638	; 0x27e
 800a432:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800a436:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800a43a:	6223      	str	r3, [r4, #32]
 800a43c:	f008 fb28 	bl	8012a90 <operator new(unsigned int)>
 800a440:	61a0      	str	r0, [r4, #24]
 800a442:	4620      	mov	r0, r4
 800a444:	f000 fdc6 	bl	800afd4 <E131Bridge::FillDataPacket()>
 800a448:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800a44c:	f008 fb20 	bl	8012a90 <operator new(unsigned int)>
 800a450:	61e0      	str	r0, [r4, #28]
 800a452:	4620      	mov	r0, r4
 800a454:	f000 fd14 	bl	800ae80 <E131Bridge::FillDiscoveryPacket()>
 800a458:	2500      	movs	r5, #0
 800a45a:	270c      	movs	r7, #12
 800a45c:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800a460:	fb07 f305 	mul.w	r3, r7, r5
 800a464:	5cf3      	ldrb	r3, [r6, r3]
 800a466:	b123      	cbz	r3, 800a472 <E131Bridge::Start()+0x5a>
 800a468:	6960      	ldr	r0, [r4, #20]
 800a46a:	4629      	mov	r1, r5
 800a46c:	6803      	ldr	r3, [r0, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	4798      	blx	r3
 800a472:	3501      	adds	r5, #1
 800a474:	2d04      	cmp	r5, #4
 800a476:	d1f3      	bne.n	800a460 <E131Bridge::Start()+0x48>
 800a478:	2102      	movs	r1, #2
 800a47a:	4b04      	ldr	r3, [pc, #16]	; (800a48c <E131Bridge::Start()+0x74>)
 800a47c:	6818      	ldr	r0, [r3, #0]
 800a47e:	b003      	add	sp, #12
 800a480:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a484:	f008 ba20 	b.w	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 800a488:	08015477 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, ip, lr}
 800a48c:	2000aef0 	strdcs	sl, [r0], -r0

0800a490 <E131Bridge::Stop()>:
 800a490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a494:	2500      	movs	r5, #0
 800a496:	2301      	movs	r3, #1
 800a498:	4604      	mov	r4, r0
 800a49a:	f240 6804 	movw	r8, #1540	; 0x604
 800a49e:	462e      	mov	r6, r5
 800a4a0:	f880 34f4 	strb.w	r3, [r0, #1268]	; 0x4f4
 800a4a4:	f500 67aa 	add.w	r7, r0, #1360	; 0x550
 800a4a8:	6860      	ldr	r0, [r4, #4]
 800a4aa:	b118      	cbz	r0, 800a4b4 <E131Bridge::Stop()+0x24>
 800a4ac:	6803      	ldr	r3, [r0, #0]
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	4798      	blx	r3
 800a4b4:	f7fe fb74 	bl	8008ba0 <lightset::Data::Get()>
 800a4b8:	2344      	movs	r3, #68	; 0x44
 800a4ba:	fb08 0005 	mla	r0, r8, r5, r0
 800a4be:	436b      	muls	r3, r5
 800a4c0:	3501      	adds	r5, #1
 800a4c2:	2d04      	cmp	r5, #4
 800a4c4:	f8c0 6600 	str.w	r6, [r0, #1536]	; 0x600
 800a4c8:	54fe      	strb	r6, [r7, r3]
 800a4ca:	d1ed      	bne.n	800a4a8 <E131Bridge::Stop()+0x18>
 800a4cc:	6963      	ldr	r3, [r4, #20]
 800a4ce:	b17b      	cbz	r3, 800a4f0 <E131Bridge::Stop()+0x60>
 800a4d0:	2500      	movs	r5, #0
 800a4d2:	270c      	movs	r7, #12
 800a4d4:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800a4d8:	fb07 f305 	mul.w	r3, r7, r5
 800a4dc:	5cf3      	ldrb	r3, [r6, r3]
 800a4de:	b123      	cbz	r3, 800a4ea <E131Bridge::Stop()+0x5a>
 800a4e0:	6960      	ldr	r0, [r4, #20]
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	6803      	ldr	r3, [r0, #0]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	4798      	blx	r3
 800a4ea:	3501      	adds	r5, #1
 800a4ec:	2d04      	cmp	r5, #4
 800a4ee:	d1f3      	bne.n	800a4d8 <E131Bridge::Stop()+0x48>
 800a4f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4f4:	4b02      	ldr	r3, [pc, #8]	; (800a500 <E131Bridge::Stop()+0x70>)
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	f008 b9e5 	b.w	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 800a4fe:	bf00      	nop
 800a500:	2000aef0 	strdcs	sl, [r0], -r0

0800a504 <E131Bridge::SetSourceName(char const*)>:
 800a504:	223f      	movs	r2, #63	; 0x3f
 800a506:	b510      	push	{r4, lr}
 800a508:	f100 0334 	add.w	r3, r0, #52	; 0x34
 800a50c:	3901      	subs	r1, #1
 800a50e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a512:	b92c      	cbnz	r4, 800a520 <E131Bridge::SetSourceName(char const*)+0x1c>
 800a514:	441a      	add	r2, r3
 800a516:	4293      	cmp	r3, r2
 800a518:	d006      	beq.n	800a528 <E131Bridge::SetSourceName(char const*)+0x24>
 800a51a:	f803 4b01 	strb.w	r4, [r3], #1
 800a51e:	e7fa      	b.n	800a516 <E131Bridge::SetSourceName(char const*)+0x12>
 800a520:	3a01      	subs	r2, #1
 800a522:	f803 4b01 	strb.w	r4, [r3], #1
 800a526:	d1f2      	bne.n	800a50e <E131Bridge::SetSourceName(char const*)+0xa>
 800a528:	2300      	movs	r3, #0
 800a52a:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
 800a52e:	bd10      	pop	{r4, pc}

0800a530 <E131Bridge::E131Bridge()>:
 800a530:	2300      	movs	r3, #0
 800a532:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a536:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a538:	e9c0 2300 	strd	r2, r3, [r0]
 800a53c:	2201      	movs	r2, #1
 800a53e:	4604      	mov	r4, r0
 800a540:	2764      	movs	r7, #100	; 0x64
 800a542:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a546:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800a54a:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800a54e:	6743      	str	r3, [r0, #116]	; 0x74
 800a550:	4b1e      	ldr	r3, [pc, #120]	; (800a5cc <E131Bridge::E131Bridge()+0x9c>)
 800a552:	7202      	strb	r2, [r0, #8]
 800a554:	b093      	sub	sp, #76	; 0x4c
 800a556:	6018      	str	r0, [r3, #0]
 800a558:	f500 65a2 	add.w	r5, r0, #1296	; 0x510
 800a55c:	f500 62c4 	add.w	r2, r0, #1568	; 0x620
 800a560:	f500 66ca 	add.w	r6, r0, #1616	; 0x650
 800a564:	4628      	mov	r0, r5
 800a566:	2144      	movs	r1, #68	; 0x44
 800a568:	f7ff ff32 	bl	800a3d0 <memset.constprop.0.isra.0>
 800a56c:	4610      	mov	r0, r2
 800a56e:	210c      	movs	r1, #12
 800a570:	f7ff ff2e 	bl	800a3d0 <memset.constprop.0.isra.0>
 800a574:	320c      	adds	r2, #12
 800a576:	f802 7c03 	strb.w	r7, [r2, #-3]
 800a57a:	42b2      	cmp	r2, r6
 800a57c:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800a580:	d1f0      	bne.n	800a564 <E131Bridge::E131Bridge()+0x34>
 800a582:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800a586:	211c      	movs	r1, #28
 800a588:	f7ff ff22 	bl	800a3d0 <memset.constprop.0.isra.0>
 800a58c:	2301      	movs	r3, #1
 800a58e:	4d10      	ldr	r5, [pc, #64]	; (800a5d0 <E131Bridge::E131Bridge()+0xa0>)
 800a590:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800a594:	4a0f      	ldr	r2, [pc, #60]	; (800a5d4 <E131Bridge::E131Bridge()+0xa4>)
 800a596:	682b      	ldr	r3, [r5, #0]
 800a598:	2140      	movs	r1, #64	; 0x40
 800a59a:	331c      	adds	r3, #28
 800a59c:	9200      	str	r2, [sp, #0]
 800a59e:	a802      	add	r0, sp, #8
 800a5a0:	4a0d      	ldr	r2, [pc, #52]	; (800a5d8 <E131Bridge::E131Bridge()+0xa8>)
 800a5a2:	f008 fd95 	bl	80130d0 <snprintf>
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	a902      	add	r1, sp, #8
 800a5aa:	f7ff ffab 	bl	800a504 <E131Bridge::SetSourceName(char const*)>
 800a5ae:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800a5b2:	6828      	ldr	r0, [r5, #0]
 800a5b4:	f005 fcac 	bl	800ff10 <Network::Begin(unsigned short)>
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	4b08      	ldr	r3, [pc, #32]	; (800a5dc <E131Bridge::E131Bridge()+0xac>)
 800a5bc:	f841 0b24 	str.w	r0, [r1], #36
 800a5c0:	6818      	ldr	r0, [r3, #0]
 800a5c2:	f008 fa05 	bl	80129d0 <Hardware::GetUuid(unsigned char*)>
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	b013      	add	sp, #76	; 0x4c
 800a5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5cc:	20001920 	andcs	r1, r0, r0, lsr #18
 800a5d0:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800a5d4:	0801517f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, ip, lr}
 800a5d8:	08015483 	stmdaeq	r1, {r0, r1, r7, sl, ip, lr}
 800a5dc:	2000aef4 	strdcs	sl, [r0], -r4

0800a5e0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800a5e0:	b570      	push	{r4, r5, r6, lr}
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	2544      	movs	r5, #68	; 0x44
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
 800a5ee:	4299      	cmp	r1, r3
 800a5f0:	d004      	beq.n	800a5fc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800a5f2:	fb05 f603 	mul.w	r6, r5, r3
 800a5f6:	5b96      	ldrh	r6, [r2, r6]
 800a5f8:	4286      	cmp	r6, r0
 800a5fa:	d00e      	beq.n	800a61a <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	d1f5      	bne.n	800a5ee <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 800a602:	4b06      	ldr	r3, [pc, #24]	; (800a61c <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 800a604:	6824      	ldr	r4, [r4, #0]
 800a606:	681d      	ldr	r5, [r3, #0]
 800a608:	f7ff fed0 	bl	800a3ac <e131::universe_to_multicast_ip(unsigned short)>
 800a60c:	4621      	mov	r1, r4
 800a60e:	4602      	mov	r2, r0
 800a610:	4628      	mov	r0, r5
 800a612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a616:	f005 bc8f 	b.w	800ff38 <Network::LeaveGroup(int, unsigned int)>
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800a620 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	4604      	mov	r4, r0
 800a624:	461d      	mov	r5, r3
 800a626:	b191      	cbz	r1, 800a64e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x2e>
 800a628:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800a62c:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800a630:	b99a      	cbnz	r2, 800a65a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800a632:	4b0e      	ldr	r3, [pc, #56]	; (800a66c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4c>)
 800a634:	8035      	strh	r5, [r6, #0]
 800a636:	4628      	mov	r0, r5
 800a638:	6826      	ldr	r6, [r4, #0]
 800a63a:	681c      	ldr	r4, [r3, #0]
 800a63c:	f7ff feb6 	bl	800a3ac <e131::universe_to_multicast_ip(unsigned short)>
 800a640:	4631      	mov	r1, r6
 800a642:	4602      	mov	r2, r0
 800a644:	4620      	mov	r0, r4
 800a646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a64a:	f005 bc72 	b.w	800ff32 <Network::JoinGroup(int, unsigned int)>
 800a64e:	b15a      	cbz	r2, 800a668 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800a650:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800a654:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800a658:	e7ea      	b.n	800a630 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800a65a:	42aa      	cmp	r2, r5
 800a65c:	d004      	beq.n	800a668 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800a65e:	2104      	movs	r1, #4
 800a660:	4620      	mov	r0, r4
 800a662:	f7ff ffbd 	bl	800a5e0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800a666:	e7e4      	b.n	800a632 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x12>
 800a668:	bd70      	pop	{r4, r5, r6, pc}
 800a66a:	bf00      	nop
 800a66c:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800a670 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800a670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a674:	4604      	mov	r4, r0
 800a676:	460d      	mov	r5, r1
 800a678:	461e      	mov	r6, r3
 800a67a:	bb02      	cbnz	r2, 800a6be <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800a67c:	2903      	cmp	r1, #3
 800a67e:	d843      	bhi.n	800a708 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800a680:	230c      	movs	r3, #12
 800a682:	fb03 0301 	mla	r3, r3, r1, r0
 800a686:	f893 2622 	ldrb.w	r2, [r3, #1570]	; 0x622
 800a68a:	b12a      	cbz	r2, 800a698 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800a68c:	f8b3 3620 	ldrh.w	r3, [r3, #1568]	; 0x620
 800a690:	42b3      	cmp	r3, r6
 800a692:	d109      	bne.n	800a6a8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800a694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a698:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800a69c:	3201      	adds	r2, #1
 800a69e:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 800a6a8:	210c      	movs	r1, #12
 800a6aa:	fb01 4405 	mla	r4, r1, r5, r4
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f8a4 6620 	strh.w	r6, [r4, #1568]	; 0x620
 800a6b4:	f7ff fe7a 	bl	800a3ac <e131::universe_to_multicast_ip(unsigned short)>
 800a6b8:	f8c4 0624 	str.w	r0, [r4, #1572]	; 0x624
 800a6bc:	e7ea      	b.n	800a694 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800a6be:	2a02      	cmp	r2, #2
 800a6c0:	d122      	bne.n	800a708 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800a6c2:	2903      	cmp	r1, #3
 800a6c4:	d8e6      	bhi.n	800a694 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800a6c6:	2344      	movs	r3, #68	; 0x44
 800a6c8:	fb03 0301 	mla	r3, r3, r1, r0
 800a6cc:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800a6d0:	b152      	cbz	r2, 800a6e8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800a6d8:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800a6dc:	4632      	mov	r2, r6
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800a6e4:	f7ff ff7c 	bl	800a5e0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800a6e8:	210c      	movs	r1, #12
 800a6ea:	fb01 4505 	mla	r5, r1, r5, r4
 800a6ee:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0ce      	beq.n	800a694 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f885 3622 	strb.w	r3, [r5, #1570]	; 0x622
 800a6fc:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800a700:	3b01      	subs	r3, #1
 800a702:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800a706:	e7c5      	b.n	800a694 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800a708:	2344      	movs	r3, #68	; 0x44
 800a70a:	fb03 4305 	mla	r3, r3, r5, r4
 800a70e:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800a712:	b1d2      	cbz	r2, 800a74a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800a714:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 800a718:	42b3      	cmp	r3, r6
 800a71a:	d0bb      	beq.n	800a694 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800a71c:	4632      	mov	r2, r6
 800a71e:	4629      	mov	r1, r5
 800a720:	4620      	mov	r0, r4
 800a722:	f7ff ff5d 	bl	800a5e0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800a726:	4b0d      	ldr	r3, [pc, #52]	; (800a75c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800a728:	4630      	mov	r0, r6
 800a72a:	681f      	ldr	r7, [r3, #0]
 800a72c:	f8d4 8000 	ldr.w	r8, [r4]
 800a730:	f7ff fe3c 	bl	800a3ac <e131::universe_to_multicast_ip(unsigned short)>
 800a734:	4641      	mov	r1, r8
 800a736:	4602      	mov	r2, r0
 800a738:	4638      	mov	r0, r7
 800a73a:	f005 fbfa 	bl	800ff32 <Network::JoinGroup(int, unsigned int)>
 800a73e:	2144      	movs	r1, #68	; 0x44
 800a740:	fb01 4405 	mla	r4, r1, r5, r4
 800a744:	f8a4 6510 	strh.w	r6, [r4, #1296]	; 0x510
 800a748:	e7a4      	b.n	800a694 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800a74a:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800a74e:	3201      	adds	r2, #1
 800a750:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800a754:	2201      	movs	r2, #1
 800a756:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800a75a:	e7e4      	b.n	800a726 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800a75c:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800a760 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800a760:	b953      	cbnz	r3, 800a778 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800a762:	2903      	cmp	r1, #3
 800a764:	d811      	bhi.n	800a78a <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800a766:	230c      	movs	r3, #12
 800a768:	fb03 0001 	mla	r0, r3, r1, r0
 800a76c:	f8b0 3620 	ldrh.w	r3, [r0, #1568]	; 0x620
 800a770:	f890 0622 	ldrb.w	r0, [r0, #1570]	; 0x622
 800a774:	8013      	strh	r3, [r2, #0]
 800a776:	4770      	bx	lr
 800a778:	2344      	movs	r3, #68	; 0x44
 800a77a:	fb03 0001 	mla	r0, r3, r1, r0
 800a77e:	f8b0 3510 	ldrh.w	r3, [r0, #1296]	; 0x510
 800a782:	f890 0512 	ldrb.w	r0, [r0, #1298]	; 0x512
 800a786:	8013      	strh	r3, [r2, #0]
 800a788:	4770      	bx	lr
 800a78a:	4618      	mov	r0, r3
 800a78c:	4770      	bx	lr

0800a78e <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800a78e:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800a792:	b923      	cbnz	r3, 800a79e <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800a794:	2301      	movs	r3, #1
 800a796:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800a79a:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800a79e:	2344      	movs	r3, #68	; 0x44
 800a7a0:	fb03 0001 	mla	r0, r3, r1, r0
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	f880 3551 	strb.w	r3, [r0, #1361]	; 0x551
 800a7aa:	4770      	bx	lr

0800a7ac <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	2044      	movs	r0, #68	; 0x44
 800a7b0:	4348      	muls	r0, r1
 800a7b2:	b570      	push	{r4, r5, r6, lr}
 800a7b4:	1815      	adds	r5, r2, r0
 800a7b6:	460c      	mov	r4, r1
 800a7b8:	68d3      	ldr	r3, [r2, #12]
 800a7ba:	f8d5 1514 	ldr.w	r1, [r5, #1300]	; 0x514
 800a7be:	1a5b      	subs	r3, r3, r1
 800a7c0:	f242 7110 	movw	r1, #10000	; 0x2710
 800a7c4:	428b      	cmp	r3, r1
 800a7c6:	d90a      	bls.n	800a7de <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800a7c8:	2600      	movs	r6, #0
 800a7ca:	f200 501c 	addw	r0, r0, #1308	; 0x51c
 800a7ce:	2110      	movs	r1, #16
 800a7d0:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
 800a7d4:	4410      	add	r0, r2
 800a7d6:	f7ff fdfb 	bl	800a3d0 <memset.constprop.0.isra.0>
 800a7da:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800a7de:	2044      	movs	r0, #68	; 0x44
 800a7e0:	4344      	muls	r4, r0
 800a7e2:	1915      	adds	r5, r2, r4
 800a7e4:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
 800a7e8:	68d3      	ldr	r3, [r2, #12]
 800a7ea:	1a5b      	subs	r3, r3, r1
 800a7ec:	f242 7110 	movw	r1, #10000	; 0x2710
 800a7f0:	428b      	cmp	r3, r1
 800a7f2:	d90a      	bls.n	800a80a <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800a7f4:	2600      	movs	r6, #0
 800a7f6:	f504 64a7 	add.w	r4, r4, #1336	; 0x538
 800a7fa:	2110      	movs	r1, #16
 800a7fc:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 800a800:	1910      	adds	r0, r2, r4
 800a802:	f7ff fde5 	bl	800a3d0 <memset.constprop.0.isra.0>
 800a806:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800a80a:	f892 1595 	ldrb.w	r1, [r2, #1429]	; 0x595
 800a80e:	f892 3551 	ldrb.w	r3, [r2, #1361]	; 0x551
 800a812:	430b      	orrs	r3, r1
 800a814:	f892 15d9 	ldrb.w	r1, [r2, #1497]	; 0x5d9
 800a818:	430b      	orrs	r3, r1
 800a81a:	d107      	bne.n	800a82c <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800a81c:	f892 361d 	ldrb.w	r3, [r2, #1565]	; 0x61d
 800a820:	b923      	cbnz	r3, 800a82c <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800a822:	2101      	movs	r1, #1
 800a824:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800a828:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800a82c:	bd70      	pop	{r4, r5, r6, pc}

0800a82e <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800a82e:	2244      	movs	r2, #68	; 0x44
 800a830:	fb02 0101 	mla	r1, r2, r1, r0
 800a834:	68c3      	ldr	r3, [r0, #12]
 800a836:	f8d1 0530 	ldr.w	r0, [r1, #1328]	; 0x530
 800a83a:	b510      	push	{r4, lr}
 800a83c:	1a1a      	subs	r2, r3, r0
 800a83e:	f8d1 4514 	ldr.w	r4, [r1, #1300]	; 0x514
 800a842:	f8d1 0534 	ldr.w	r0, [r1, #1332]	; 0x534
 800a846:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800a84a:	b171      	cbz	r1, 800a86a <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800a84c:	1b1b      	subs	r3, r3, r4
 800a84e:	b128      	cbz	r0, 800a85c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800a850:	f242 700f 	movw	r0, #9999	; 0x270f
 800a854:	4283      	cmp	r3, r0
 800a856:	d90d      	bls.n	800a874 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800a858:	4282      	cmp	r2, r0
 800a85a:	e002      	b.n	800a862 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800a85c:	f242 7010 	movw	r0, #10000	; 0x2710
 800a860:	4283      	cmp	r3, r0
 800a862:	bf94      	ite	ls
 800a864:	2000      	movls	r0, #0
 800a866:	2001      	movhi	r0, #1
 800a868:	bd10      	pop	{r4, pc}
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d0fc      	beq.n	800a868 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800a86e:	f242 7010 	movw	r0, #10000	; 0x2710
 800a872:	e7f1      	b.n	800a858 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800a874:	2000      	movs	r0, #0
 800a876:	e7f7      	b.n	800a868 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800a878 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800a878:	684a      	ldr	r2, [r1, #4]
 800a87a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800a87c:	b510      	push	{r4, lr}
 800a87e:	429a      	cmp	r2, r3
 800a880:	d10b      	bne.n	800a89a <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x22>
 800a882:	f100 0392 	add.w	r3, r0, #146	; 0x92
 800a886:	3108      	adds	r1, #8
 800a888:	30a2      	adds	r0, #162	; 0xa2
 800a88a:	4298      	cmp	r0, r3
 800a88c:	d007      	beq.n	800a89e <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800a88e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a896:	4294      	cmp	r4, r2
 800a898:	d0f7      	beq.n	800a88a <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800a89a:	2000      	movs	r0, #0
 800a89c:	bd10      	pop	{r4, pc}
 800a89e:	2001      	movs	r0, #1
 800a8a0:	e7fc      	b.n	800a89c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x24>
	...

0800a8a4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800a8a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	4690      	mov	r8, r2
 800a8ae:	460f      	mov	r7, r1
 800a8b0:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	d03d      	beq.n	800a934 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800a8b8:	2a00      	cmp	r2, #0
 800a8ba:	d03b      	beq.n	800a934 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800a8bc:	2600      	movs	r6, #0
 800a8be:	f240 6804 	movw	r8, #1540	; 0x604
 800a8c2:	4637      	mov	r7, r6
 800a8c4:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800a8c8:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800a8cc:	f200 541c 	addw	r4, r0, #1308	; 0x51c
 800a8d0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a8d4:	b1e3      	cbz	r3, 800a910 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6c>
 800a8d6:	6868      	ldr	r0, [r5, #4]
 800a8d8:	4631      	mov	r1, r6
 800a8da:	6803      	ldr	r3, [r0, #0]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	4798      	blx	r3
 800a8e0:	2110      	movs	r1, #16
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f844 7c04 	str.w	r7, [r4, #-4]
 800a8e8:	f7ff fd72 	bl	800a3d0 <memset.constprop.0.isra.0>
 800a8ec:	2110      	movs	r1, #16
 800a8ee:	f104 001c 	add.w	r0, r4, #28
 800a8f2:	61a7      	str	r7, [r4, #24]
 800a8f4:	f7ff fd6c 	bl	800a3d0 <memset.constprop.0.isra.0>
 800a8f8:	f7fe f952 	bl	8008ba0 <lightset::Data::Get()>
 800a8fc:	fb08 0006 	mla	r0, r8, r6, r0
 800a900:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800a904:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800a908:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
 800a90c:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
 800a910:	3601      	adds	r6, #1
 800a912:	2e04      	cmp	r6, #4
 800a914:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800a918:	d1da      	bne.n	800a8d0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800a91a:	4b25      	ldr	r3, [pc, #148]	; (800a9b0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10c>)
 800a91c:	2102      	movs	r1, #2
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	f007 ffd2 	bl	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 800a924:	f895 350d 	ldrb.w	r3, [r5, #1293]	; 0x50d
 800a928:	f023 0302 	bic.w	r3, r3, #2
 800a92c:	f885 350d 	strb.w	r3, [r5, #1293]	; 0x50d
 800a930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a934:	2600      	movs	r6, #0
 800a936:	f240 6b04 	movw	fp, #1540	; 0x604
 800a93a:	46b1      	mov	r9, r6
 800a93c:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800a940:	7ea3      	ldrb	r3, [r4, #26]
 800a942:	b373      	cbz	r3, 800a9a2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800a944:	b15f      	cbz	r7, 800a95e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800a946:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800a94a:	b143      	cbz	r3, 800a95e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800a94c:	2110      	movs	r1, #16
 800a94e:	f844 9c20 	str.w	r9, [r4, #-32]
 800a952:	f1a4 001c 	sub.w	r0, r4, #28
 800a956:	f7ff fd3b 	bl	800a3d0 <memset.constprop.0.isra.0>
 800a95a:	f884 9019 	strb.w	r9, [r4, #25]
 800a95e:	f1b8 0f00 	cmp.w	r8, #0
 800a962:	d00a      	beq.n	800a97a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800a964:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a968:	b13b      	cbz	r3, 800a97a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800a96a:	2110      	movs	r1, #16
 800a96c:	4620      	mov	r0, r4
 800a96e:	f844 9c04 	str.w	r9, [r4, #-4]
 800a972:	f7ff fd2d 	bl	800a3d0 <memset.constprop.0.isra.0>
 800a976:	f884 9019 	strb.w	r9, [r4, #25]
 800a97a:	f895 a4f5 	ldrb.w	sl, [r5, #1269]	; 0x4f5
 800a97e:	f1ba 0f00 	cmp.w	sl, #0
 800a982:	d10e      	bne.n	800a9a2 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800a984:	6868      	ldr	r0, [r5, #4]
 800a986:	4631      	mov	r1, r6
 800a988:	6803      	ldr	r3, [r0, #0]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	4798      	blx	r3
 800a98e:	f7fe f907 	bl	8008ba0 <lightset::Data::Get()>
 800a992:	fb0b 0006 	mla	r0, fp, r6, r0
 800a996:	f8c0 a600 	str.w	sl, [r0, #1536]	; 0x600
 800a99a:	f884 a018 	strb.w	sl, [r4, #24]
 800a99e:	f884 a01a 	strb.w	sl, [r4, #26]
 800a9a2:	3601      	adds	r6, #1
 800a9a4:	2e04      	cmp	r6, #4
 800a9a6:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800a9aa:	d1c9      	bne.n	800a940 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9c>
 800a9ac:	e7b5      	b.n	800a91a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x76>
 800a9ae:	bf00      	nop
 800a9b0:	2000aef0 	strdcs	sl, [r0], -r0

0800a9b4 <E131Bridge::HandleDmx()>:
 800a9b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	2600      	movs	r6, #0
 800a9bc:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800a9c0:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800a9c4:	ba7f      	rev16	r7, r7
 800a9c6:	b2bf      	uxth	r7, r7
 800a9c8:	3f01      	subs	r7, #1
 800a9ca:	f200 551c 	addw	r5, r0, #1308	; 0x51c
 800a9ce:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800a9d2:	b353      	cbz	r3, 800aa2a <E131Bridge::HandleDmx()+0x76>
 800a9d4:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800a9d8:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800a9dc:	ba5b      	rev16	r3, r3
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d122      	bne.n	800aa2a <E131Bridge::HandleDmx()+0x76>
 800a9e4:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800a9e8:	f1a5 0108 	sub.w	r1, r5, #8
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	f7ff ff42 	bl	800a878 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800a9f4:	f105 0114 	add.w	r1, r5, #20
 800a9f8:	4682      	mov	sl, r0
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f7ff ff3c 	bl	800a878 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800aa00:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800aa04:	4680      	mov	r8, r0
 800aa06:	f1ba 0f00 	cmp.w	sl, #0
 800aa0a:	d016      	beq.n	800aa3a <E131Bridge::HandleDmx()+0x86>
 800aa0c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800aa10:	7c2a      	ldrb	r2, [r5, #16]
 800aa12:	742b      	strb	r3, [r5, #16]
 800aa14:	3313      	adds	r3, #19
 800aa16:	1a9b      	subs	r3, r3, r2
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b13      	cmp	r3, #19
 800aa1c:	d905      	bls.n	800aa2a <E131Bridge::HandleDmx()+0x76>
 800aa1e:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800aa22:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800aa26:	2a00      	cmp	r2, #0
 800aa28:	da10      	bge.n	800aa4c <E131Bridge::HandleDmx()+0x98>
 800aa2a:	3601      	adds	r6, #1
 800aa2c:	2e04      	cmp	r6, #4
 800aa2e:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800aa32:	d1cc      	bne.n	800a9ce <E131Bridge::HandleDmx()+0x1a>
 800aa34:	b003      	add	sp, #12
 800aa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d0ef      	beq.n	800aa1e <E131Bridge::HandleDmx()+0x6a>
 800aa3e:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800aa42:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800aa46:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800aa4a:	e7e3      	b.n	800aa14 <E131Bridge::HandleDmx()+0x60>
 800aa4c:	065a      	lsls	r2, r3, #25
 800aa4e:	d50b      	bpl.n	800aa68 <E131Bridge::HandleDmx()+0xb4>
 800aa50:	f1ba 0f00 	cmp.w	sl, #0
 800aa54:	d102      	bne.n	800aa5c <E131Bridge::HandleDmx()+0xa8>
 800aa56:	f1b8 0f00 	cmp.w	r8, #0
 800aa5a:	d0e6      	beq.n	800aa2a <E131Bridge::HandleDmx()+0x76>
 800aa5c:	4642      	mov	r2, r8
 800aa5e:	4651      	mov	r1, sl
 800aa60:	4620      	mov	r0, r4
 800aa62:	f7ff ff1f 	bl	800a8a4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800aa66:	e7e0      	b.n	800aa2a <E131Bridge::HandleDmx()+0x76>
 800aa68:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800aa6c:	b133      	cbz	r3, 800aa7c <E131Bridge::HandleDmx()+0xc8>
 800aa6e:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800aa72:	b91b      	cbnz	r3, 800aa7c <E131Bridge::HandleDmx()+0xc8>
 800aa74:	4631      	mov	r1, r6
 800aa76:	4620      	mov	r0, r4
 800aa78:	f7ff fe98 	bl	800a7ac <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800aa7c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800aa80:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d259      	bcs.n	800ab3c <E131Bridge::HandleDmx()+0x188>
 800aa88:	4631      	mov	r1, r6
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	f7ff fece 	bl	800a82e <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d0c9      	beq.n	800aa2a <E131Bridge::HandleDmx()+0x76>
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800aa9c:	9b00      	ldr	r3, [sp, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d154      	bne.n	800ab4c <E131Bridge::HandleDmx()+0x198>
 800aaa2:	f1bb 0f00 	cmp.w	fp, #0
 800aaa6:	d15c      	bne.n	800ab62 <E131Bridge::HandleDmx()+0x1ae>
 800aaa8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800aaaa:	2210      	movs	r2, #16
 800aaac:	f845 3c04 	str.w	r3, [r5, #-4]
 800aab0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800aab4:	4628      	mov	r0, r5
 800aab6:	742b      	strb	r3, [r5, #16]
 800aab8:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800aabc:	f7ff fc90 	bl	800a3e0 <memcpy.isra.0>
 800aac0:	68e3      	ldr	r3, [r4, #12]
 800aac2:	463a      	mov	r2, r7
 800aac4:	4649      	mov	r1, r9
 800aac6:	4630      	mov	r0, r6
 800aac8:	f845 3c08 	str.w	r3, [r5, #-8]
 800aacc:	f7fe f874 	bl	8008bb8 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800aad0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800aad4:	069b      	lsls	r3, r3, #26
 800aad6:	f100 80ad 	bmi.w	800ac34 <E131Bridge::HandleDmx()+0x280>
 800aada:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800aade:	b29a      	uxth	r2, r3
 800aae0:	2a00      	cmp	r2, #0
 800aae2:	f000 80ab 	beq.w	800ac3c <E131Bridge::HandleDmx()+0x288>
 800aae6:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800aaea:	2a00      	cmp	r2, #0
 800aaec:	f040 80a6 	bne.w	800ac3c <E131Bridge::HandleDmx()+0x288>
 800aaf0:	ba5b      	rev16	r3, r3
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	f1ba 0f00 	cmp.w	sl, #0
 800aaf8:	f040 8099 	bne.w	800ac2e <E131Bridge::HandleDmx()+0x27a>
 800aafc:	f1b8 0f00 	cmp.w	r8, #0
 800ab00:	f040 8095 	bne.w	800ac2e <E131Bridge::HandleDmx()+0x27a>
 800ab04:	69aa      	ldr	r2, [r5, #24]
 800ab06:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800ab0a:	3a00      	subs	r2, #0
 800ab0c:	bf18      	it	ne
 800ab0e:	2201      	movne	r2, #1
 800ab10:	3900      	subs	r1, #0
 800ab12:	bf18      	it	ne
 800ab14:	2101      	movne	r1, #1
 800ab16:	4620      	mov	r0, r4
 800ab18:	f7ff fd82 	bl	800a620 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800ab1c:	f240 1301 	movw	r3, #257	; 0x101
 800ab20:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800ab24:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f040 808c 	bne.w	800ac46 <E131Bridge::HandleDmx()+0x292>
 800ab2e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800ab32:	f043 0302 	orr.w	r3, r3, #2
 800ab36:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800ab3a:	e776      	b.n	800aa2a <E131Bridge::HandleDmx()+0x76>
 800ab3c:	d9ae      	bls.n	800aa9c <E131Bridge::HandleDmx()+0xe8>
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f845 2c04 	str.w	r2, [r5, #-4]
 800ab44:	61aa      	str	r2, [r5, #24]
 800ab46:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800ab4a:	e7a5      	b.n	800aa98 <E131Bridge::HandleDmx()+0xe4>
 800ab4c:	f1ba 0f00 	cmp.w	sl, #0
 800ab50:	f000 8092 	beq.w	800ac78 <E131Bridge::HandleDmx()+0x2c4>
 800ab54:	f1bb 0f00 	cmp.w	fp, #0
 800ab58:	d15c      	bne.n	800ac14 <E131Bridge::HandleDmx()+0x260>
 800ab5a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ab5e:	742b      	strb	r3, [r5, #16]
 800ab60:	e7ae      	b.n	800aac0 <E131Bridge::HandleDmx()+0x10c>
 800ab62:	f1b8 0f00 	cmp.w	r8, #0
 800ab66:	d03b      	beq.n	800abe0 <E131Bridge::HandleDmx()+0x22c>
 800ab68:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ab6c:	f240 6b04 	movw	fp, #1540	; 0x604
 800ab70:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ab74:	68e3      	ldr	r3, [r4, #12]
 800ab76:	fb0b fb06 	mul.w	fp, fp, r6
 800ab7a:	616b      	str	r3, [r5, #20]
 800ab7c:	f7fe f810 	bl	8008ba0 <lightset::Data::Get()>
 800ab80:	4603      	mov	r3, r0
 800ab82:	f50b 7000 	add.w	r0, fp, #512	; 0x200
 800ab86:	463a      	mov	r2, r7
 800ab88:	4649      	mov	r1, r9
 800ab8a:	4418      	add	r0, r3
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	f7ff fc27 	bl	800a3e0 <memcpy.isra.0>
 800ab92:	9b00      	ldr	r3, [sp, #0]
 800ab94:	f50b 6080 	add.w	r0, fp, #1024	; 0x400
 800ab98:	eb03 020b 	add.w	r2, r3, fp
 800ab9c:	f8c2 7600 	str.w	r7, [r2, #1536]	; 0x600
 800aba0:	4649      	mov	r1, r9
 800aba2:	463a      	mov	r2, r7
 800aba4:	4418      	add	r0, r3
 800aba6:	f7ff fc1b 	bl	800a3e0 <memcpy.isra.0>
 800abaa:	e791      	b.n	800aad0 <E131Bridge::HandleDmx()+0x11c>
 800abac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800abae:	2210      	movs	r2, #16
 800abb0:	61ab      	str	r3, [r5, #24]
 800abb2:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800abb6:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800abba:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800abbe:	f105 001c 	add.w	r0, r5, #28
 800abc2:	f7ff fc0d 	bl	800a3e0 <memcpy.isra.0>
 800abc6:	68e3      	ldr	r3, [r4, #12]
 800abc8:	4631      	mov	r1, r6
 800abca:	4620      	mov	r0, r4
 800abcc:	616b      	str	r3, [r5, #20]
 800abce:	f7ff fdde 	bl	800a78e <E131Bridge::UpdateMergeStatus(unsigned int)>
 800abd2:	463a      	mov	r2, r7
 800abd4:	4649      	mov	r1, r9
 800abd6:	4630      	mov	r0, r6
 800abd8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800abda:	f7fe f833 	bl	8008c44 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800abde:	e777      	b.n	800aad0 <E131Bridge::HandleDmx()+0x11c>
 800abe0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800abe2:	2210      	movs	r2, #16
 800abe4:	f845 3c04 	str.w	r3, [r5, #-4]
 800abe8:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800abec:	4628      	mov	r0, r5
 800abee:	742b      	strb	r3, [r5, #16]
 800abf0:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800abf4:	f7ff fbf4 	bl	800a3e0 <memcpy.isra.0>
 800abf8:	68e3      	ldr	r3, [r4, #12]
 800abfa:	4631      	mov	r1, r6
 800abfc:	4620      	mov	r0, r4
 800abfe:	f845 3c08 	str.w	r3, [r5, #-8]
 800ac02:	f7ff fdc4 	bl	800a78e <E131Bridge::UpdateMergeStatus(unsigned int)>
 800ac06:	463a      	mov	r2, r7
 800ac08:	4649      	mov	r1, r9
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800ac0e:	f7fd fff0 	bl	8008bf2 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800ac12:	e75d      	b.n	800aad0 <E131Bridge::HandleDmx()+0x11c>
 800ac14:	f1b8 0f00 	cmp.w	r8, #0
 800ac18:	d103      	bne.n	800ac22 <E131Bridge::HandleDmx()+0x26e>
 800ac1a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ac1e:	742b      	strb	r3, [r5, #16]
 800ac20:	e7ea      	b.n	800abf8 <E131Bridge::HandleDmx()+0x244>
 800ac22:	481b      	ldr	r0, [pc, #108]	; (800ac90 <E131Bridge::HandleDmx()+0x2dc>)
 800ac24:	b003      	add	sp, #12
 800ac26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2a:	f008 ba29 	b.w	8013080 <printf>
 800ac2e:	4642      	mov	r2, r8
 800ac30:	4651      	mov	r1, sl
 800ac32:	e770      	b.n	800ab16 <E131Bridge::HandleDmx()+0x162>
 800ac34:	f04f 0300 	mov.w	r3, #0
 800ac38:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800ac3c:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f47f af6f 	bne.w	800ab24 <E131Bridge::HandleDmx()+0x170>
 800ac46:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800ac4a:	f7fd ffa9 	bl	8008ba0 <lightset::Data::Get()>
 800ac4e:	4632      	mov	r2, r6
 800ac50:	4641      	mov	r1, r8
 800ac52:	f7ff fbcf 	bl	800a3f4 <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800ac56:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f47f af67 	bne.w	800ab2e <E131Bridge::HandleDmx()+0x17a>
 800ac60:	6860      	ldr	r0, [r4, #4]
 800ac62:	4631      	mov	r1, r6
 800ac64:	6803      	ldr	r3, [r0, #0]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	4798      	blx	r3
 800ac6a:	f04f 0301 	mov.w	r3, #1
 800ac6e:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800ac72:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800ac76:	e75a      	b.n	800ab2e <E131Bridge::HandleDmx()+0x17a>
 800ac78:	f1bb 0f00 	cmp.w	fp, #0
 800ac7c:	d096      	beq.n	800abac <E131Bridge::HandleDmx()+0x1f8>
 800ac7e:	f1b8 0f00 	cmp.w	r8, #0
 800ac82:	d0ce      	beq.n	800ac22 <E131Bridge::HandleDmx()+0x26e>
 800ac84:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800ac88:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800ac8c:	e79b      	b.n	800abc6 <E131Bridge::HandleDmx()+0x212>
 800ac8e:	bf00      	nop
 800ac90:	0801548c 	stmdaeq	r1, {r2, r3, r7, sl, ip, lr}

0800ac94 <E131Bridge::IsStatusChanged()>:
 800ac94:	4603      	mov	r3, r0
 800ac96:	f890 04f8 	ldrb.w	r0, [r0, #1272]	; 0x4f8
 800ac9a:	b110      	cbz	r0, 800aca2 <E131Bridge::IsStatusChanged()+0xe>
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800aca2:	4770      	bx	lr

0800aca4 <E131Bridge::Clear(unsigned int)>:
 800aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca6:	460d      	mov	r5, r1
 800aca8:	4604      	mov	r4, r0
 800acaa:	6847      	ldr	r7, [r0, #4]
 800acac:	f7fd ff78 	bl	8008ba0 <lightset::Data::Get()>
 800acb0:	f240 6204 	movw	r2, #1540	; 0x604
 800acb4:	4606      	mov	r6, r0
 800acb6:	436a      	muls	r2, r5
 800acb8:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800acbc:	4430      	add	r0, r6
 800acbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800acc2:	f7ff fb85 	bl	800a3d0 <memset.constprop.0.isra.0>
 800acc6:	4432      	add	r2, r6
 800acc8:	4630      	mov	r0, r6
 800acca:	2644      	movs	r6, #68	; 0x44
 800accc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800acd0:	fb06 4605 	mla	r6, r6, r5, r4
 800acd4:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 800acd8:	4639      	mov	r1, r7
 800acda:	462a      	mov	r2, r5
 800acdc:	f7ff fb8a 	bl	800a3f4 <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800ace0:	f896 3512 	ldrb.w	r3, [r6, #1298]	; 0x512
 800ace4:	b153      	cbz	r3, 800acfc <E131Bridge::Clear(unsigned int)+0x58>
 800ace6:	f896 3552 	ldrb.w	r3, [r6, #1362]	; 0x552
 800acea:	b93b      	cbnz	r3, 800acfc <E131Bridge::Clear(unsigned int)+0x58>
 800acec:	6860      	ldr	r0, [r4, #4]
 800acee:	4629      	mov	r1, r5
 800acf0:	6803      	ldr	r3, [r0, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	4798      	blx	r3
 800acf6:	2301      	movs	r3, #1
 800acf8:	f886 3552 	strb.w	r3, [r6, #1362]	; 0x552
 800acfc:	2300      	movs	r3, #0
 800acfe:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800ad02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad04 <E131Bridge::IsValidRoot()>:
 800ad04:	4a0d      	ldr	r2, [pc, #52]	; (800ad3c <E131Bridge::IsValidRoot()+0x38>)
 800ad06:	b530      	push	{r4, r5, lr}
 800ad08:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800ad0c:	f100 058c 	add.w	r5, r0, #140	; 0x8c
 800ad10:	42ab      	cmp	r3, r5
 800ad12:	d007      	beq.n	800ad24 <E131Bridge::IsValidRoot()+0x20>
 800ad14:	f813 4b01 	ldrb.w	r4, [r3], #1
 800ad18:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ad1c:	428c      	cmp	r4, r1
 800ad1e:	d0f7      	beq.n	800ad10 <E131Bridge::IsValidRoot()+0xc>
 800ad20:	2000      	movs	r0, #0
 800ad22:	e008      	b.n	800ad36 <E131Bridge::IsValidRoot()+0x32>
 800ad24:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800ad28:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800ad2c:	d004      	beq.n	800ad38 <E131Bridge::IsValidRoot()+0x34>
 800ad2e:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800ad32:	4258      	negs	r0, r3
 800ad34:	4158      	adcs	r0, r3
 800ad36:	bd30      	pop	{r4, r5, pc}
 800ad38:	2001      	movs	r0, #1
 800ad3a:	e7fc      	b.n	800ad36 <E131Bridge::IsValidRoot()+0x32>
 800ad3c:	0801553c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr}

0800ad40 <E131Bridge::IsValidDataPacket()>:
 800ad40:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d10d      	bne.n	800ad64 <E131Bridge::IsValidDataPacket()+0x24>
 800ad48:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800ad4c:	2ba1      	cmp	r3, #161	; 0xa1
 800ad4e:	d109      	bne.n	800ad64 <E131Bridge::IsValidDataPacket()+0x24>
 800ad50:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800ad54:	b933      	cbnz	r3, 800ad64 <E131Bridge::IsValidDataPacket()+0x24>
 800ad56:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800ad5a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800ad5e:	4258      	negs	r0, r3
 800ad60:	4158      	adcs	r0, r3
 800ad62:	4770      	bx	lr
 800ad64:	2000      	movs	r0, #0
 800ad66:	4770      	bx	lr

0800ad68 <E131Bridge::Run()>:
 800ad68:	b530      	push	{r4, r5, lr}
 800ad6a:	4601      	mov	r1, r0
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	b085      	sub	sp, #20
 800ad70:	f10d 030e 	add.w	r3, sp, #14
 800ad74:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800ad78:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800ad82:	f004 fb99 	bl	800f4b8 <udp_recv>
 800ad86:	4b3c      	ldr	r3, [pc, #240]	; (800ae78 <E131Bridge::Run()+0x110>)
 800ad88:	681d      	ldr	r5, [r3, #0]
 800ad8a:	60e5      	str	r5, [r4, #12]
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	d13b      	bne.n	800ae08 <E131Bridge::Run()+0xa0>
 800ad90:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800ad94:	b183      	cbz	r3, 800adb8 <E131Bridge::Run()+0x50>
 800ad96:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800ad9a:	bb73      	cbnz	r3, 800adfa <E131Bridge::Run()+0x92>
 800ad9c:	6923      	ldr	r3, [r4, #16]
 800ad9e:	1aed      	subs	r5, r5, r3
 800ada0:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800ada4:	429d      	cmp	r5, r3
 800ada6:	d928      	bls.n	800adfa <E131Bridge::Run()+0x92>
 800ada8:	6863      	ldr	r3, [r4, #4]
 800adaa:	b9eb      	cbnz	r3, 800ade8 <E131Bridge::Run()+0x80>
 800adac:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800adb0:	f023 0302 	bic.w	r3, r3, #2
 800adb4:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800adb8:	6963      	ldr	r3, [r4, #20]
 800adba:	b12b      	cbz	r3, 800adc8 <E131Bridge::Run()+0x60>
 800adbc:	4620      	mov	r0, r4
 800adbe:	f000 f94f 	bl	800b060 <E131Bridge::HandleDmxIn()>
 800adc2:	4620      	mov	r0, r4
 800adc4:	f000 f8ca 	bl	800af5c <E131Bridge::SendDiscoveryPacket()>
 800adc8:	7a23      	ldrb	r3, [r4, #8]
 800adca:	b15b      	cbz	r3, 800ade4 <E131Bridge::Run()+0x7c>
 800adcc:	4b2b      	ldr	r3, [pc, #172]	; (800ae7c <E131Bridge::Run()+0x114>)
 800adce:	6818      	ldr	r0, [r3, #0]
 800add0:	6843      	ldr	r3, [r0, #4]
 800add2:	2b04      	cmp	r3, #4
 800add4:	d006      	beq.n	800ade4 <E131Bridge::Run()+0x7c>
 800add6:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800adda:	2b00      	cmp	r3, #0
 800addc:	d049      	beq.n	800ae72 <E131Bridge::Run()+0x10a>
 800adde:	2103      	movs	r1, #3
 800ade0:	f007 fd72 	bl	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 800ade4:	b005      	add	sp, #20
 800ade6:	bd30      	pop	{r4, r5, pc}
 800ade8:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1dd      	bne.n	800adac <E131Bridge::Run()+0x44>
 800adf0:	2201      	movs	r2, #1
 800adf2:	4620      	mov	r0, r4
 800adf4:	4611      	mov	r1, r2
 800adf6:	f7ff fd55 	bl	800a8a4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800adfa:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800adfe:	1a9b      	subs	r3, r3, r2
 800ae00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae04:	d3d8      	bcc.n	800adb8 <E131Bridge::Run()+0x50>
 800ae06:	e7d1      	b.n	800adac <E131Bridge::Run()+0x44>
 800ae08:	4620      	mov	r0, r4
 800ae0a:	f7ff ff7b 	bl	800ad04 <E131Bridge::IsValidRoot()>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d0e8      	beq.n	800ade4 <E131Bridge::Run()+0x7c>
 800ae12:	2300      	movs	r3, #0
 800ae14:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800ae18:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800ae1c:	6125      	str	r5, [r4, #16]
 800ae1e:	b15b      	cbz	r3, 800ae38 <E131Bridge::Run()+0xd0>
 800ae20:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800ae24:	b943      	cbnz	r3, 800ae38 <E131Bridge::Run()+0xd0>
 800ae26:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800ae2a:	1aad      	subs	r5, r5, r2
 800ae2c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800ae30:	4295      	cmp	r5, r2
 800ae32:	bf88      	it	hi
 800ae34:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800ae38:	6863      	ldr	r3, [r4, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d0bc      	beq.n	800adb8 <E131Bridge::Run()+0x50>
 800ae3e:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800ae42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ae46:	ba1a      	rev	r2, r3
 800ae48:	d108      	bne.n	800ae5c <E131Bridge::Run()+0xf4>
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f7ff ff78 	bl	800ad40 <E131Bridge::IsValidDataPacket()>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d0b1      	beq.n	800adb8 <E131Bridge::Run()+0x50>
 800ae54:	4620      	mov	r0, r4
 800ae56:	f7ff fdad 	bl	800a9b4 <E131Bridge::HandleDmx()>
 800ae5a:	e7ad      	b.n	800adb8 <E131Bridge::Run()+0x50>
 800ae5c:	2a08      	cmp	r2, #8
 800ae5e:	d1ab      	bne.n	800adb8 <E131Bridge::Run()+0x50>
 800ae60:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800ae64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae68:	d1a6      	bne.n	800adb8 <E131Bridge::Run()+0x50>
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 f972 	bl	800b154 <E131Bridge::HandleSynchronization()>
 800ae70:	e7a2      	b.n	800adb8 <E131Bridge::Run()+0x50>
 800ae72:	2102      	movs	r1, #2
 800ae74:	e7b4      	b.n	800ade0 <E131Bridge::Run()+0x78>
 800ae76:	bf00      	nop
 800ae78:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800ae7c:	2000aef0 	strdcs	sl, [r0], -r0

0800ae80 <E131Bridge::FillDiscoveryPacket()>:
 800ae80:	2200      	movs	r2, #0
 800ae82:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800ae86:	b510      	push	{r4, lr}
 800ae88:	333c      	adds	r3, #60	; 0x3c
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800ae90:	69c3      	ldr	r3, [r0, #28]
 800ae92:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800ae96:	428b      	cmp	r3, r1
 800ae98:	d002      	beq.n	800aea0 <E131Bridge::FillDiscoveryPacket()+0x20>
 800ae9a:	f803 2b01 	strb.w	r2, [r3], #1
 800ae9e:	e7fa      	b.n	800ae96 <E131Bridge::FillDiscoveryPacket()+0x16>
 800aea0:	69c3      	ldr	r3, [r0, #28]
 800aea2:	492d      	ldr	r1, [pc, #180]	; (800af58 <E131Bridge::FillDiscoveryPacket()+0xd8>)
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	2210      	movs	r2, #16
 800aea8:	705a      	strb	r2, [r3, #1]
 800aeaa:	1d1a      	adds	r2, r3, #4
 800aeac:	3310      	adds	r3, #16
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d004      	beq.n	800aebc <E131Bridge::FillDiscoveryPacket()+0x3c>
 800aeb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeb6:	f802 4b01 	strb.w	r4, [r2], #1
 800aeba:	e7f8      	b.n	800aeae <E131Bridge::FillDiscoveryPacket()+0x2e>
 800aebc:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800aec0:	69c3      	ldr	r3, [r0, #28]
 800aec2:	3234      	adds	r2, #52	; 0x34
 800aec4:	0052      	lsls	r2, r2, #1
 800aec6:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800aeca:	ba52      	rev16	r2, r2
 800aecc:	821a      	strh	r2, [r3, #16]
 800aece:	2200      	movs	r2, #0
 800aed0:	749a      	strb	r2, [r3, #18]
 800aed2:	74da      	strb	r2, [r3, #19]
 800aed4:	751a      	strb	r2, [r3, #20]
 800aed6:	2208      	movs	r2, #8
 800aed8:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800aedc:	755a      	strb	r2, [r3, #21]
 800aede:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800aee2:	3316      	adds	r3, #22
 800aee4:	42a1      	cmp	r1, r4
 800aee6:	d004      	beq.n	800aef2 <E131Bridge::FillDiscoveryPacket()+0x72>
 800aee8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeec:	f803 2b01 	strb.w	r2, [r3], #1
 800aef0:	e7f8      	b.n	800aee4 <E131Bridge::FillDiscoveryPacket()+0x64>
 800aef2:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800aef6:	69c3      	ldr	r3, [r0, #28]
 800aef8:	3229      	adds	r2, #41	; 0x29
 800aefa:	0052      	lsls	r2, r2, #1
 800aefc:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800af00:	ba52      	rev16	r2, r2
 800af02:	84da      	strh	r2, [r3, #38]	; 0x26
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800af0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800af0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800af12:	2202      	movs	r2, #2
 800af14:	332c      	adds	r3, #44	; 0x2c
 800af16:	f803 2c01 	strb.w	r2, [r3, #-1]
 800af1a:	f100 0474 	add.w	r4, r0, #116	; 0x74
 800af1e:	42a1      	cmp	r1, r4
 800af20:	d004      	beq.n	800af2c <E131Bridge::FillDiscoveryPacket()+0xac>
 800af22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af26:	f803 2b01 	strb.w	r2, [r3], #1
 800af2a:	e7f8      	b.n	800af1e <E131Bridge::FillDiscoveryPacket()+0x9e>
 800af2c:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800af30:	69c2      	ldr	r2, [r0, #28]
 800af32:	3304      	adds	r3, #4
 800af34:	005b      	lsls	r3, r3, #1
 800af36:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800af3a:	ba5b      	rev16	r3, r3
 800af3c:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800af40:	2300      	movs	r3, #0
 800af42:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800af46:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800af4a:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800af4e:	2301      	movs	r3, #1
 800af50:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800af54:	bd10      	pop	{r4, pc}
 800af56:	bf00      	nop
 800af58:	0801553c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr}

0800af5c <E131Bridge::SendDiscoveryPacket()>:
 800af5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800af5e:	f242 710f 	movw	r1, #9999	; 0x270f
 800af62:	68c2      	ldr	r2, [r0, #12]
 800af64:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800af68:	4604      	mov	r4, r0
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	428b      	cmp	r3, r1
 800af6e:	d924      	bls.n	800afba <E131Bridge::SendDiscoveryPacket()+0x5e>
 800af70:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800af74:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800af78:	b1ab      	cbz	r3, 800afa6 <E131Bridge::SendDiscoveryPacket()+0x4a>
 800af7a:	2500      	movs	r5, #0
 800af7c:	462e      	mov	r6, r5
 800af7e:	2300      	movs	r3, #0
 800af80:	4629      	mov	r1, r5
 800af82:	4620      	mov	r0, r4
 800af84:	f10d 020e 	add.w	r2, sp, #14
 800af88:	f7ff fbea 	bl	800a760 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800af8c:	b140      	cbz	r0, 800afa0 <E131Bridge::SendDiscoveryPacket()+0x44>
 800af8e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800af92:	69e2      	ldr	r2, [r4, #28]
 800af94:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800af98:	ba5b      	rev16	r3, r3
 800af9a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800af9e:	3601      	adds	r6, #1
 800afa0:	3501      	adds	r5, #1
 800afa2:	2d04      	cmp	r5, #4
 800afa4:	d1eb      	bne.n	800af7e <E131Bridge::SendDiscoveryPacket()+0x22>
 800afa6:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800afaa:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	69e1      	ldr	r1, [r4, #28]
 800afb2:	6a23      	ldr	r3, [r4, #32]
 800afb4:	7820      	ldrb	r0, [r4, #0]
 800afb6:	f004 fadb 	bl	800f570 <udp_send>
 800afba:	b004      	add	sp, #16
 800afbc:	bd70      	pop	{r4, r5, r6, pc}

0800afbe <memcpy.isra.0>:
 800afbe:	3801      	subs	r0, #1
 800afc0:	440a      	add	r2, r1
 800afc2:	4291      	cmp	r1, r2
 800afc4:	d004      	beq.n	800afd0 <memcpy.isra.0+0x12>
 800afc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afca:	f800 3f01 	strb.w	r3, [r0, #1]!
 800afce:	e7f8      	b.n	800afc2 <memcpy.isra.0+0x4>
 800afd0:	4770      	bx	lr
	...

0800afd4 <E131Bridge::FillDataPacket()>:
 800afd4:	b570      	push	{r4, r5, r6, lr}
 800afd6:	2400      	movs	r4, #0
 800afd8:	2610      	movs	r6, #16
 800afda:	4605      	mov	r5, r0
 800afdc:	6980      	ldr	r0, [r0, #24]
 800afde:	220c      	movs	r2, #12
 800afe0:	7046      	strb	r6, [r0, #1]
 800afe2:	7004      	strb	r4, [r0, #0]
 800afe4:	7084      	strb	r4, [r0, #2]
 800afe6:	70c4      	strb	r4, [r0, #3]
 800afe8:	491c      	ldr	r1, [pc, #112]	; (800b05c <E131Bridge::FillDataPacket()+0x88>)
 800afea:	3004      	adds	r0, #4
 800afec:	f7ff ffe7 	bl	800afbe <memcpy.isra.0>
 800aff0:	2304      	movs	r3, #4
 800aff2:	4632      	mov	r2, r6
 800aff4:	2602      	movs	r6, #2
 800aff6:	69a8      	ldr	r0, [r5, #24]
 800aff8:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800affc:	7543      	strb	r3, [r0, #21]
 800affe:	7484      	strb	r4, [r0, #18]
 800b000:	74c4      	strb	r4, [r0, #19]
 800b002:	7504      	strb	r4, [r0, #20]
 800b004:	3016      	adds	r0, #22
 800b006:	f7ff ffda 	bl	800afbe <memcpy.isra.0>
 800b00a:	69a8      	ldr	r0, [r5, #24]
 800b00c:	2240      	movs	r2, #64	; 0x40
 800b00e:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800b012:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800b016:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800b01a:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800b01e:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800b022:	302c      	adds	r0, #44	; 0x2c
 800b024:	f7ff ffcb 	bl	800afbe <memcpy.isra.0>
 800b028:	22a1      	movs	r2, #161	; 0xa1
 800b02a:	69ab      	ldr	r3, [r5, #24]
 800b02c:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800b030:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800b034:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800b038:	69ab      	ldr	r3, [r5, #24]
 800b03a:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800b03e:	69ab      	ldr	r3, [r5, #24]
 800b040:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800b044:	2201      	movs	r2, #1
 800b046:	69ab      	ldr	r3, [r5, #24]
 800b048:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800b04c:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800b050:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800b054:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800b058:	bd70      	pop	{r4, r5, r6, pc}
 800b05a:	bf00      	nop
 800b05c:	0801553c 	stmdaeq	r1, {r2, r3, r4, r5, r8, sl, ip, lr}

0800b060 <E131Bridge::HandleDmxIn()>:
 800b060:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b064:	4604      	mov	r4, r0
 800b066:	4605      	mov	r5, r0
 800b068:	2600      	movs	r6, #0
 800b06a:	4f39      	ldr	r7, [pc, #228]	; (800b150 <E131Bridge::HandleDmxIn()+0xf0>)
 800b06c:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800b070:	2b00      	cmp	r3, #0
 800b072:	d053      	beq.n	800b11c <E131Bridge::HandleDmxIn()+0xbc>
 800b074:	6960      	ldr	r0, [r4, #20]
 800b076:	4631      	mov	r1, r6
 800b078:	6803      	ldr	r3, [r0, #0]
 800b07a:	aa02      	add	r2, sp, #8
 800b07c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800b080:	ab03      	add	r3, sp, #12
 800b082:	47c0      	blx	r8
 800b084:	4601      	mov	r1, r0
 800b086:	2800      	cmp	r0, #0
 800b088:	d050      	beq.n	800b12c <E131Bridge::HandleDmxIn()+0xcc>
 800b08a:	9b02      	ldr	r3, [sp, #8]
 800b08c:	69a0      	ldr	r0, [r4, #24]
 800b08e:	b29b      	uxth	r3, r3
 800b090:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 800b094:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800b098:	ba52      	rev16	r2, r2
 800b09a:	8202      	strh	r2, [r0, #16]
 800b09c:	f103 0257 	add.w	r2, r3, #87	; 0x57
 800b0a0:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800b0a4:	ba52      	rev16	r2, r2
 800b0a6:	84c2      	strh	r2, [r0, #38]	; 0x26
 800b0a8:	f895 2629 	ldrb.w	r2, [r5, #1577]	; 0x629
 800b0ac:	330a      	adds	r3, #10
 800b0ae:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
 800b0b2:	f895 2628 	ldrb.w	r2, [r5, #1576]	; 0x628
 800b0b6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800b0ba:	1c50      	adds	r0, r2, #1
 800b0bc:	f885 0628 	strb.w	r0, [r5, #1576]	; 0x628
 800b0c0:	69a0      	ldr	r0, [r4, #24]
 800b0c2:	ba5b      	rev16	r3, r3
 800b0c4:	f880 206f 	strb.w	r2, [r0, #111]	; 0x6f
 800b0c8:	f8b5 2620 	ldrh.w	r2, [r5, #1568]	; 0x620
 800b0cc:	69a0      	ldr	r0, [r4, #24]
 800b0ce:	ba52      	rev16	r2, r2
 800b0d0:	f8a0 2071 	strh.w	r2, [r0, #113]	; 0x71
 800b0d4:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800b0d8:	9a02      	ldr	r2, [sp, #8]
 800b0da:	307d      	adds	r0, #125	; 0x7d
 800b0dc:	f7ff ff6f 	bl	800afbe <memcpy.isra.0>
 800b0e0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800b0e4:	69a1      	ldr	r1, [r4, #24]
 800b0e6:	ba53      	rev16	r3, r2
 800b0e8:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800b0ec:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800b0f0:	327d      	adds	r2, #125	; 0x7d
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 800b0f8:	b292      	uxth	r2, r2
 800b0fa:	7820      	ldrb	r0, [r4, #0]
 800b0fc:	f004 fa38 	bl	800f570 <udp_send>
 800b100:	2301      	movs	r3, #1
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	40b3      	lsls	r3, r6
 800b106:	ea33 0102 	bics.w	r1, r3, r2
 800b10a:	d007      	beq.n	800b11c <E131Bridge::HandleDmxIn()+0xbc>
 800b10c:	4313      	orrs	r3, r2
 800b10e:	603b      	str	r3, [r7, #0]
 800b110:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b114:	f043 0301 	orr.w	r3, r3, #1
 800b118:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800b11c:	3601      	adds	r6, #1
 800b11e:	2e04      	cmp	r6, #4
 800b120:	f105 050c 	add.w	r5, r5, #12
 800b124:	d1a2      	bne.n	800b06c <E131Bridge::HandleDmxIn()+0xc>
 800b126:	b004      	add	sp, #16
 800b128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b12c:	9b03      	ldr	r3, [sp, #12]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1f4      	bne.n	800b11c <E131Bridge::HandleDmxIn()+0xbc>
 800b132:	2301      	movs	r3, #1
 800b134:	fa03 f206 	lsl.w	r2, r3, r6
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	ea23 0302 	bic.w	r3, r3, r2
 800b13e:	603b      	str	r3, [r7, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1eb      	bne.n	800b11c <E131Bridge::HandleDmxIn()+0xbc>
 800b144:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b148:	f023 0301 	bic.w	r3, r3, #1
 800b14c:	e7e4      	b.n	800b118 <E131Bridge::HandleDmxIn()+0xb8>
 800b14e:	bf00      	nop
 800b150:	20001924 	andcs	r1, r0, r4, lsr #18

0800b154 <E131Bridge::HandleSynchronization()>:
 800b154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b158:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800b15c:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800b160:	ba5b      	rev16	r3, r3
 800b162:	b29b      	uxth	r3, r3
 800b164:	429a      	cmp	r2, r3
 800b166:	4604      	mov	r4, r0
 800b168:	d00a      	beq.n	800b180 <E131Bridge::HandleSynchronization()+0x2c>
 800b16a:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800b16e:	429a      	cmp	r2, r3
 800b170:	d006      	beq.n	800b180 <E131Bridge::HandleSynchronization()+0x2c>
 800b172:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b176:	4b23      	ldr	r3, [pc, #140]	; (800b204 <E131Bridge::HandleSynchronization()+0xb0>)
 800b178:	2102      	movs	r1, #2
 800b17a:	6818      	ldr	r0, [r3, #0]
 800b17c:	f007 bba4 	b.w	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 800b180:	2500      	movs	r5, #0
 800b182:	4627      	mov	r7, r4
 800b184:	46a9      	mov	r9, r5
 800b186:	68e3      	ldr	r3, [r4, #12]
 800b188:	4e1f      	ldr	r6, [pc, #124]	; (800b208 <E131Bridge::HandleSynchronization()+0xb4>)
 800b18a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800b20c <E131Bridge::HandleSynchronization()+0xb8>
 800b18e:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800b192:	f897 3512 	ldrb.w	r3, [r7, #1298]	; 0x512
 800b196:	b323      	cbz	r3, 800b1e2 <E131Bridge::HandleSynchronization()+0x8e>
 800b198:	f8d8 3000 	ldr.w	r3, [r8]
 800b19c:	6860      	ldr	r0, [r4, #4]
 800b19e:	07da      	lsls	r2, r3, #31
 800b1a0:	bf5c      	itt	pl
 800b1a2:	2301      	movpl	r3, #1
 800b1a4:	f8c8 3000 	strpl.w	r3, [r8]
 800b1a8:	6803      	ldr	r3, [r0, #0]
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800b1b0:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800b1b4:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800b1b8:	47d0      	blx	sl
 800b1ba:	f897 3552 	ldrb.w	r3, [r7, #1362]	; 0x552
 800b1be:	b93b      	cbnz	r3, 800b1d0 <E131Bridge::HandleSynchronization()+0x7c>
 800b1c0:	6860      	ldr	r0, [r4, #4]
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	6803      	ldr	r3, [r0, #0]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	4798      	blx	r3
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	f887 3552 	strb.w	r3, [r7, #1362]	; 0x552
 800b1d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b1d4:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800b1d8:	07db      	lsls	r3, r3, #31
 800b1da:	bf5c      	itt	pl
 800b1dc:	2301      	movpl	r3, #1
 800b1de:	f8c8 3000 	strpl.w	r3, [r8]
 800b1e2:	3501      	adds	r5, #1
 800b1e4:	2d04      	cmp	r5, #4
 800b1e6:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800b1ea:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800b1ee:	d1d0      	bne.n	800b192 <E131Bridge::HandleSynchronization()+0x3e>
 800b1f0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800b1f2:	b120      	cbz	r0, 800b1fe <E131Bridge::HandleSynchronization()+0xaa>
 800b1f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f8:	6803      	ldr	r3, [r0, #0]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	4718      	bx	r3
 800b1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b202:	bf00      	nop
 800b204:	2000aef0 	strdcs	sl, [r0], -r0
 800b208:	20000100 	andcs	r0, r0, r0, lsl #2
 800b20c:	200000fc 	strdcs	r0, [r0], -ip

0800b210 <E131Bridge::Print()>:
 800b210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b214:	2500      	movs	r5, #0
 800b216:	4604      	mov	r4, r0
 800b218:	b08c      	sub	sp, #48	; 0x30
 800b21a:	a902      	add	r1, sp, #8
 800b21c:	3024      	adds	r0, #36	; 0x24
 800b21e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800b222:	f000 f8b3 	bl	800b38c <uuid_unparse>
 800b226:	482c      	ldr	r0, [pc, #176]	; (800b2d8 <E131Bridge::Print()+0xc8>)
 800b228:	f007 ff2a 	bl	8013080 <printf>
 800b22c:	4b2b      	ldr	r3, [pc, #172]	; (800b2dc <E131Bridge::Print()+0xcc>)
 800b22e:	482c      	ldr	r0, [pc, #176]	; (800b2e0 <E131Bridge::Print()+0xd0>)
 800b230:	7819      	ldrb	r1, [r3, #0]
 800b232:	785a      	ldrb	r2, [r3, #1]
 800b234:	f007 ff24 	bl	8013080 <printf>
 800b238:	482a      	ldr	r0, [pc, #168]	; (800b2e4 <E131Bridge::Print()+0xd4>)
 800b23a:	a902      	add	r1, sp, #8
 800b23c:	f007 ff20 	bl	8013080 <printf>
 800b240:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800b244:	b303      	cbz	r3, 800b288 <E131Bridge::Print()+0x78>
 800b246:	4828      	ldr	r0, [pc, #160]	; (800b2e8 <E131Bridge::Print()+0xd8>)
 800b248:	f007 ff1a 	bl	8013080 <printf>
 800b24c:	4e27      	ldr	r6, [pc, #156]	; (800b2ec <E131Bridge::Print()+0xdc>)
 800b24e:	4f28      	ldr	r7, [pc, #160]	; (800b2f0 <E131Bridge::Print()+0xe0>)
 800b250:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800b2f4 <E131Bridge::Print()+0xe4>
 800b254:	2301      	movs	r3, #1
 800b256:	4629      	mov	r1, r5
 800b258:	4620      	mov	r0, r4
 800b25a:	f10d 0206 	add.w	r2, sp, #6
 800b25e:	f7ff fa7f 	bl	800a760 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800b262:	b170      	cbz	r0, 800b282 <E131Bridge::Print()+0x72>
 800b264:	2344      	movs	r3, #68	; 0x44
 800b266:	436b      	muls	r3, r5
 800b268:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 800b26c:	58d3      	ldr	r3, [r2, r3]
 800b26e:	4629      	mov	r1, r5
 800b270:	2b00      	cmp	r3, #0
 800b272:	bf0c      	ite	eq
 800b274:	4633      	moveq	r3, r6
 800b276:	463b      	movne	r3, r7
 800b278:	4640      	mov	r0, r8
 800b27a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b27e:	f007 feff 	bl	8013080 <printf>
 800b282:	3501      	adds	r5, #1
 800b284:	2d04      	cmp	r5, #4
 800b286:	d1e5      	bne.n	800b254 <E131Bridge::Print()+0x44>
 800b288:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800b28c:	b1d3      	cbz	r3, 800b2c4 <E131Bridge::Print()+0xb4>
 800b28e:	481a      	ldr	r0, [pc, #104]	; (800b2f8 <E131Bridge::Print()+0xe8>)
 800b290:	f007 fef6 	bl	8013080 <printf>
 800b294:	2500      	movs	r5, #0
 800b296:	4e19      	ldr	r6, [pc, #100]	; (800b2fc <E131Bridge::Print()+0xec>)
 800b298:	2300      	movs	r3, #0
 800b29a:	4629      	mov	r1, r5
 800b29c:	4620      	mov	r0, r4
 800b29e:	f10d 0206 	add.w	r2, sp, #6
 800b2a2:	f7ff fa5d 	bl	800a760 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800b2a6:	b150      	cbz	r0, 800b2be <E131Bridge::Print()+0xae>
 800b2a8:	230c      	movs	r3, #12
 800b2aa:	436b      	muls	r3, r5
 800b2ac:	f204 6229 	addw	r2, r4, #1577	; 0x629
 800b2b0:	5cd3      	ldrb	r3, [r2, r3]
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b2ba:	f007 fee1 	bl	8013080 <printf>
 800b2be:	3501      	adds	r5, #1
 800b2c0:	2d04      	cmp	r5, #4
 800b2c2:	d1e9      	bne.n	800b298 <E131Bridge::Print()+0x88>
 800b2c4:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800b2c8:	b113      	cbz	r3, 800b2d0 <E131Bridge::Print()+0xc0>
 800b2ca:	480d      	ldr	r0, [pc, #52]	; (800b300 <E131Bridge::Print()+0xf0>)
 800b2cc:	f007 fed8 	bl	8013080 <printf>
 800b2d0:	b00c      	add	sp, #48	; 0x30
 800b2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d6:	bf00      	nop
 800b2d8:	080154b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, sl, ip, lr}
 800b2dc:	08015548 	stmdaeq	r1, {r3, r6, r8, sl, ip, lr}
 800b2e0:	080154c1 	stmdaeq	r1, {r0, r6, r7, sl, ip, lr}
 800b2e4:	080154d4 	stmdaeq	r1, {r2, r4, r6, r7, sl, ip, lr}
 800b2e8:	0801525b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, ip, lr}
 800b2ec:	080151ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, ip, lr}
 800b2f0:	08015203 	stmdaeq	r1, {r0, r1, r9, ip, lr}
 800b2f4:	080154e4 	stmdaeq	r1, {r2, r5, r6, r7, sl, ip, lr}
 800b2f8:	08015293 	stmdaeq	r1, {r0, r1, r4, r7, r9, ip, lr}
 800b2fc:	08015503 	stmdaeq	r1, {r0, r1, r8, sl, ip, lr}
 800b300:	08015522 	stmdaeq	r1, {r1, r5, r8, sl, ip, lr}

0800b304 <uuid_unparse_x>:
 800b304:	4603      	mov	r3, r0
 800b306:	b530      	push	{r4, r5, lr}
 800b308:	4608      	mov	r0, r1
 800b30a:	4611      	mov	r1, r2
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	b08f      	sub	sp, #60	; 0x3c
 800b310:	ba12      	rev	r2, r2
 800b312:	920a      	str	r2, [sp, #40]	; 0x28
 800b314:	889a      	ldrh	r2, [r3, #4]
 800b316:	891c      	ldrh	r4, [r3, #8]
 800b318:	ba52      	rev16	r2, r2
 800b31a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800b31e:	88da      	ldrh	r2, [r3, #6]
 800b320:	ba64      	rev16	r4, r4
 800b322:	ba52      	rev16	r2, r2
 800b324:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800b328:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800b32c:	f103 020a 	add.w	r2, r3, #10
 800b330:	f10d 0432 	add.w	r4, sp, #50	; 0x32
 800b334:	3310      	adds	r3, #16
 800b336:	4293      	cmp	r3, r2
 800b338:	d122      	bne.n	800b380 <uuid_unparse_x+0x7c>
 800b33a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800b33e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b342:	9208      	str	r2, [sp, #32]
 800b344:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800b348:	0a1b      	lsrs	r3, r3, #8
 800b34a:	9207      	str	r2, [sp, #28]
 800b34c:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	9206      	str	r2, [sp, #24]
 800b354:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800b358:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800b35c:	9205      	str	r2, [sp, #20]
 800b35e:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	9204      	str	r2, [sp, #16]
 800b366:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800b36a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800b36e:	9203      	str	r2, [sp, #12]
 800b370:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800b374:	9202      	str	r2, [sp, #8]
 800b376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b378:	f007 fe92 	bl	80130a0 <sprintf>
 800b37c:	b00f      	add	sp, #60	; 0x3c
 800b37e:	bd30      	pop	{r4, r5, pc}
 800b380:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b384:	f804 5b01 	strb.w	r5, [r4], #1
 800b388:	e7d5      	b.n	800b336 <uuid_unparse_x+0x32>
	...

0800b38c <uuid_unparse>:
 800b38c:	4a01      	ldr	r2, [pc, #4]	; (800b394 <uuid_unparse+0x8>)
 800b38e:	f7ff bfb9 	b.w	800b304 <uuid_unparse_x>
 800b392:	bf00      	nop
 800b394:	0801554a 	stmdaeq	r1, {r1, r3, r6, r8, sl, ip, lr}

0800b398 <ArtNetRdmController::GetUidCount(unsigned int)>:
 800b398:	3120      	adds	r1, #32
 800b39a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800b39e:	6818      	ldr	r0, [r3, #0]
 800b3a0:	4770      	bx	lr

0800b3a2 <ArtNetRdmController::Copy(unsigned int, unsigned char*)>:
 800b3a2:	b530      	push	{r4, r5, lr}
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	2506      	movs	r5, #6
 800b3a8:	3120      	adds	r1, #32
 800b3aa:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800b3ae:	6844      	ldr	r4, [r0, #4]
 800b3b0:	6801      	ldr	r1, [r0, #0]
 800b3b2:	4369      	muls	r1, r5
 800b3b4:	4299      	cmp	r1, r3
 800b3b6:	d903      	bls.n	800b3c0 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x1e>
 800b3b8:	5ce1      	ldrb	r1, [r4, r3]
 800b3ba:	54d1      	strb	r1, [r2, r3]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	e7f7      	b.n	800b3b0 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0xe>
 800b3c0:	bd30      	pop	{r4, r5, pc}
	...

0800b3c4 <ArtNetRdmController::~ArtNetRdmController()>:
 800b3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c8:	2600      	movs	r6, #0
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	46b0      	mov	r8, r6
 800b3d0:	4b0d      	ldr	r3, [pc, #52]	; (800b408 <ArtNetRdmController::~ArtNetRdmController()+0x44>)
 800b3d2:	f8df 9038 	ldr.w	r9, [pc, #56]	; 800b40c <ArtNetRdmController::~ArtNetRdmController()+0x48>
 800b3d6:	f844 3b80 	str.w	r3, [r4], #128
 800b3da:	f8d9 3000 	ldr.w	r3, [r9]
 800b3de:	42b3      	cmp	r3, r6
 800b3e0:	d90f      	bls.n	800b402 <ArtNetRdmController::~ArtNetRdmController()+0x3e>
 800b3e2:	6827      	ldr	r7, [r4, #0]
 800b3e4:	b157      	cbz	r7, 800b3fc <ArtNetRdmController::~ArtNetRdmController()+0x38>
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f8c7 8000 	str.w	r8, [r7]
 800b3ec:	b108      	cbz	r0, 800b3f2 <ArtNetRdmController::~ArtNetRdmController()+0x2e>
 800b3ee:	f007 fb4d 	bl	8012a8c <operator delete[](void*)>
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	f007 fb48 	bl	8012a88 <operator delete(void*)>
 800b3f8:	f8c4 8000 	str.w	r8, [r4]
 800b3fc:	3601      	adds	r6, #1
 800b3fe:	3404      	adds	r4, #4
 800b400:	e7eb      	b.n	800b3da <ArtNetRdmController::~ArtNetRdmController()+0x16>
 800b402:	4628      	mov	r0, r5
 800b404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b408:	0801558c 	stmdaeq	r1, {r2, r3, r7, r8, sl, ip, lr}
 800b40c:	20001a28 	andcs	r1, r0, r8, lsr #20

0800b410 <ArtNetRdmController::~ArtNetRdmController()>:
 800b410:	b510      	push	{r4, lr}
 800b412:	4604      	mov	r4, r0
 800b414:	f7ff ffd6 	bl	800b3c4 <ArtNetRdmController::~ArtNetRdmController()>
 800b418:	4620      	mov	r0, r4
 800b41a:	f007 fb35 	bl	8012a88 <operator delete(void*)>
 800b41e:	4620      	mov	r0, r4
 800b420:	bd10      	pop	{r4, pc}

0800b422 <ArtNetRdmController::Full(unsigned int)>:
 800b422:	3120      	adds	r1, #32
 800b424:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800b428:	f000 ba26 	b.w	800b878 <RDMDiscovery::Full()>

0800b42c <ArtNetRdmController::Handler(unsigned int, unsigned char const*)>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	460d      	mov	r5, r1
 800b430:	4614      	mov	r4, r2
 800b432:	b1f2      	cbz	r2, 800b472 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x46>
 800b434:	f008 f916 	bl	8013664 <fwdgt_counter_reload>
 800b438:	4628      	mov	r0, r5
 800b43a:	f000 fdf5 	bl	800c028 <Rdm::Receive(unsigned int)>
 800b43e:	2800      	cmp	r0, #0
 800b440:	d1f8      	bne.n	800b434 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x8>
 800b442:	4621      	mov	r1, r4
 800b444:	7863      	ldrb	r3, [r4, #1]
 800b446:	4a0c      	ldr	r2, [pc, #48]	; (800b478 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x4c>)
 800b448:	3b01      	subs	r3, #1
 800b44a:	1cd8      	adds	r0, r3, #3
 800b44c:	d004      	beq.n	800b458 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x2c>
 800b44e:	f811 0b01 	ldrb.w	r0, [r1], #1
 800b452:	f802 0b01 	strb.w	r0, [r2], #1
 800b456:	e7f7      	b.n	800b448 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x1c>
 800b458:	7862      	ldrb	r2, [r4, #1]
 800b45a:	4628      	mov	r0, r5
 800b45c:	4907      	ldr	r1, [pc, #28]	; (800b47c <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x50>)
 800b45e:	3202      	adds	r2, #2
 800b460:	f000 fdf2 	bl	800c048 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800b464:	4628      	mov	r0, r5
 800b466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b46a:	f64e 2160 	movw	r1, #60000	; 0xea60
 800b46e:	f000 bde3 	b.w	800c038 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800b472:	4610      	mov	r0, r2
 800b474:	bd38      	pop	{r3, r4, r5, pc}
 800b476:	bf00      	nop
 800b478:	20001929 	andcs	r1, r0, r9, lsr #18
 800b47c:	20001928 	andcs	r1, r0, r8, lsr #18

0800b480 <ArtNetRdmController::ArtNetRdmController(unsigned int)>:
 800b480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b484:	4605      	mov	r5, r0
 800b486:	f04f 0a00 	mov.w	sl, #0
 800b48a:	462e      	mov	r6, r5
 800b48c:	460f      	mov	r7, r1
 800b48e:	46d1      	mov	r9, sl
 800b490:	f100 0804 	add.w	r8, r0, #4
 800b494:	4640      	mov	r0, r8
 800b496:	f000 fb03 	bl	800baa0 <RDMDeviceController::RDMDeviceController()>
 800b49a:	4b1b      	ldr	r3, [pc, #108]	; (800b508 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x88>)
 800b49c:	f846 3b80 	str.w	r3, [r6], #128
 800b4a0:	4b1a      	ldr	r3, [pc, #104]	; (800b50c <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x8c>)
 800b4a2:	601f      	str	r7, [r3, #0]
 800b4a4:	45ba      	cmp	sl, r7
 800b4a6:	d029      	beq.n	800b4fc <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x7c>
 800b4a8:	f44f 7090 	mov.w	r0, #288	; 0x120
 800b4ac:	f007 faf0 	bl	8012a90 <operator new(unsigned int)>
 800b4b0:	4604      	mov	r4, r0
 800b4b2:	f8c0 9000 	str.w	r9, [r0]
 800b4b6:	2030      	movs	r0, #48	; 0x30
 800b4b8:	f007 faec 	bl	8012a94 <operator new[](unsigned int)>
 800b4bc:	2200      	movs	r2, #0
 800b4be:	6060      	str	r0, [r4, #4]
 800b4c0:	6863      	ldr	r3, [r4, #4]
 800b4c2:	4813      	ldr	r0, [pc, #76]	; (800b510 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x90>)
 800b4c4:	4413      	add	r3, r2
 800b4c6:	1e59      	subs	r1, r3, #1
 800b4c8:	3305      	adds	r3, #5
 800b4ca:	428b      	cmp	r3, r1
 800b4cc:	d004      	beq.n	800b4d8 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x58>
 800b4ce:	f810 cb01 	ldrb.w	ip, [r0], #1
 800b4d2:	f801 cf01 	strb.w	ip, [r1, #1]!
 800b4d6:	e7f8      	b.n	800b4ca <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x4a>
 800b4d8:	3206      	adds	r2, #6
 800b4da:	2a30      	cmp	r2, #48	; 0x30
 800b4dc:	d1f0      	bne.n	800b4c0 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x40>
 800b4de:	f104 000c 	add.w	r0, r4, #12
 800b4e2:	f8c4 a008 	str.w	sl, [r4, #8]
 800b4e6:	f000 fb6b 	bl	800bbc0 <RDMMessage::RDMMessage()>
 800b4ea:	4641      	mov	r1, r8
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	f846 4b04 	str.w	r4, [r6], #4
 800b4f2:	f000 f84c 	bl	800b58e <RDMDiscovery::SetUid(unsigned char const*)>
 800b4f6:	f10a 0a01 	add.w	sl, sl, #1
 800b4fa:	e7d3      	b.n	800b4a4 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x24>
 800b4fc:	22cc      	movs	r2, #204	; 0xcc
 800b4fe:	4b05      	ldr	r3, [pc, #20]	; (800b514 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x94>)
 800b500:	4628      	mov	r0, r5
 800b502:	701a      	strb	r2, [r3, #0]
 800b504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b508:	0801558c 	stmdaeq	r1, {r2, r3, r7, r8, sl, ip, lr}
 800b50c:	20001a28 	andcs	r1, r0, r8, lsr #20
 800b510:	0801557c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, sl, ip, lr}
 800b514:	20001928 	andcs	r1, r0, r8, lsr #18

0800b518 <memcmp.constprop.0>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	1e4a      	subs	r2, r1, #1
 800b51c:	1e43      	subs	r3, r0, #1
 800b51e:	3105      	adds	r1, #5
 800b520:	428a      	cmp	r2, r1
 800b522:	d007      	beq.n	800b534 <memcmp.constprop.0+0x1c>
 800b524:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800b528:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800b52c:	42a0      	cmp	r0, r4
 800b52e:	d0f7      	beq.n	800b520 <memcmp.constprop.0+0x8>
 800b530:	1b00      	subs	r0, r0, r4
 800b532:	bd10      	pop	{r4, pc}
 800b534:	2000      	movs	r0, #0
 800b536:	e7fc      	b.n	800b532 <memcmp.constprop.0+0x1a>

0800b538 <memcpy.constprop.0.isra.0>:
 800b538:	3801      	subs	r0, #1
 800b53a:	1d8a      	adds	r2, r1, #6
 800b53c:	4291      	cmp	r1, r2
 800b53e:	d004      	beq.n	800b54a <memcpy.constprop.0.isra.0+0x12>
 800b540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b544:	f800 3f01 	strb.w	r3, [r0, #1]!
 800b548:	e7f8      	b.n	800b53c <memcpy.constprop.0.isra.0+0x4>
 800b54a:	4770      	bx	lr

0800b54c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>:
 800b54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b550:	6805      	ldr	r5, [r0, #0]
 800b552:	4604      	mov	r4, r0
 800b554:	2d08      	cmp	r5, #8
 800b556:	460e      	mov	r6, r1
 800b558:	d017      	beq.n	800b58a <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800b55a:	2700      	movs	r7, #0
 800b55c:	f04f 0906 	mov.w	r9, #6
 800b560:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b564:	42bd      	cmp	r5, r7
 800b566:	d007      	beq.n	800b578 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x2c>
 800b568:	4631      	mov	r1, r6
 800b56a:	fb09 8007 	mla	r0, r9, r7, r8
 800b56e:	f7ff ffd3 	bl	800b518 <memcmp.constprop.0>
 800b572:	b150      	cbz	r0, 800b58a <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800b574:	3701      	adds	r7, #1
 800b576:	e7f5      	b.n	800b564 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x18>
 800b578:	1c6b      	adds	r3, r5, #1
 800b57a:	4631      	mov	r1, r6
 800b57c:	fb09 8005 	mla	r0, r9, r5, r8
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b586:	f7ff bfd7 	b.w	800b538 <memcpy.constprop.0.isra.0>
 800b58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b58e <RDMDiscovery::SetUid(unsigned char const*)>:
 800b58e:	b538      	push	{r3, r4, r5, lr}
 800b590:	4604      	mov	r4, r0
 800b592:	460d      	mov	r5, r1
 800b594:	f200 100b 	addw	r0, r0, #267	; 0x10b
 800b598:	f7ff ffce 	bl	800b538 <memcpy.constprop.0.isra.0>
 800b59c:	4629      	mov	r1, r5
 800b59e:	f104 000c 	add.w	r0, r4, #12
 800b5a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5a6:	f000 bb29 	b.w	800bbfc <RDMMessage::SetSrcUid(unsigned char const*)>

0800b5aa <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>:
 800b5aa:	780b      	ldrb	r3, [r1, #0]
 800b5ac:	b530      	push	{r4, r5, lr}
 800b5ae:	2bfe      	cmp	r3, #254	; 0xfe
 800b5b0:	d001      	beq.n	800b5b6 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xc>
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	bd30      	pop	{r4, r5, pc}
 800b5b6:	7a48      	ldrb	r0, [r1, #9]
 800b5b8:	7a0b      	ldrb	r3, [r1, #8]
 800b5ba:	1e54      	subs	r4, r2, #1
 800b5bc:	4003      	ands	r3, r0
 800b5be:	7013      	strb	r3, [r2, #0]
 800b5c0:	7ac8      	ldrb	r0, [r1, #11]
 800b5c2:	7a8b      	ldrb	r3, [r1, #10]
 800b5c4:	3205      	adds	r2, #5
 800b5c6:	4003      	ands	r3, r0
 800b5c8:	f802 3c04 	strb.w	r3, [r2, #-4]
 800b5cc:	7b48      	ldrb	r0, [r1, #13]
 800b5ce:	7b0b      	ldrb	r3, [r1, #12]
 800b5d0:	4003      	ands	r3, r0
 800b5d2:	f802 3c03 	strb.w	r3, [r2, #-3]
 800b5d6:	7bc8      	ldrb	r0, [r1, #15]
 800b5d8:	7b8b      	ldrb	r3, [r1, #14]
 800b5da:	4003      	ands	r3, r0
 800b5dc:	f802 3c02 	strb.w	r3, [r2, #-2]
 800b5e0:	7c48      	ldrb	r0, [r1, #17]
 800b5e2:	7c0b      	ldrb	r3, [r1, #16]
 800b5e4:	4003      	ands	r3, r0
 800b5e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b5ea:	7cc8      	ldrb	r0, [r1, #19]
 800b5ec:	7c8b      	ldrb	r3, [r1, #18]
 800b5ee:	4003      	ands	r3, r0
 800b5f0:	7013      	strb	r3, [r2, #0]
 800b5f2:	7d4b      	ldrb	r3, [r1, #21]
 800b5f4:	7d08      	ldrb	r0, [r1, #20]
 800b5f6:	4018      	ands	r0, r3
 800b5f8:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800b5fc:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800b600:	442b      	add	r3, r5
 800b602:	4294      	cmp	r4, r2
 800b604:	b29b      	uxth	r3, r3
 800b606:	d1f9      	bne.n	800b5fc <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x52>
 800b608:	ebb0 2f13 	cmp.w	r0, r3, lsr #8
 800b60c:	d1d1      	bne.n	800b5b2 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x8>
 800b60e:	7d88      	ldrb	r0, [r1, #22]
 800b610:	7dca      	ldrb	r2, [r1, #23]
 800b612:	b2db      	uxtb	r3, r3
 800b614:	4010      	ands	r0, r2
 800b616:	1ac3      	subs	r3, r0, r3
 800b618:	4258      	negs	r0, r3
 800b61a:	4158      	adcs	r0, r3
 800b61c:	e7ca      	b.n	800b5b4 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xa>
	...

0800b620 <RDMDiscovery::QuickFind(unsigned char const*)>:
 800b620:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b622:	4605      	mov	r5, r0
 800b624:	460e      	mov	r6, r1
 800b626:	f105 040c 	add.w	r4, r5, #12
 800b62a:	f008 f81b 	bl	8013664 <fwdgt_counter_reload>
 800b62e:	2110      	movs	r1, #16
 800b630:	4620      	mov	r0, r4
 800b632:	f000 faeb 	bl	800bc0c <RDMMessage::SetCc(unsigned char)>
 800b636:	2102      	movs	r1, #2
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 fae9 	bl	800bc10 <RDMMessage::SetPid(unsigned short)>
 800b63e:	4631      	mov	r1, r6
 800b640:	4620      	mov	r0, r4
 800b642:	f000 fadf 	bl	800bc04 <RDMMessage::SetDstUid(unsigned char const*)>
 800b646:	2200      	movs	r2, #0
 800b648:	4620      	mov	r0, r4
 800b64a:	4611      	mov	r1, r2
 800b64c:	f000 fae4 	bl	800bc18 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800b650:	4620      	mov	r0, r4
 800b652:	68a9      	ldr	r1, [r5, #8]
 800b654:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800b658:	f000 faf0 	bl	800bc3c <RDMMessage::Send(unsigned int, unsigned int)>
 800b65c:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800b660:	68a8      	ldr	r0, [r5, #8]
 800b662:	f000 fce9 	bl	800c038 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800b666:	b160      	cbz	r0, 800b682 <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800b668:	7d03      	ldrb	r3, [r0, #20]
 800b66a:	2b11      	cmp	r3, #17
 800b66c:	d109      	bne.n	800b682 <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800b66e:	f100 0109 	add.w	r1, r0, #9
 800b672:	4630      	mov	r0, r6
 800b674:	f7ff ff50 	bl	800b518 <memcmp.constprop.0>
 800b678:	b918      	cbnz	r0, 800b682 <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800b67a:	4631      	mov	r1, r6
 800b67c:	4628      	mov	r0, r5
 800b67e:	f7ff ff65 	bl	800b54c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800b682:	f007 ffef 	bl	8013664 <fwdgt_counter_reload>
 800b686:	4620      	mov	r0, r4
 800b688:	491a      	ldr	r1, [pc, #104]	; (800b6f4 <RDMDiscovery::QuickFind(unsigned char const*)+0xd4>)
 800b68a:	f000 fabb 	bl	800bc04 <RDMMessage::SetDstUid(unsigned char const*)>
 800b68e:	4620      	mov	r0, r4
 800b690:	2110      	movs	r1, #16
 800b692:	f000 fabb 	bl	800bc0c <RDMMessage::SetCc(unsigned char)>
 800b696:	4620      	mov	r0, r4
 800b698:	2101      	movs	r1, #1
 800b69a:	f000 fab9 	bl	800bc10 <RDMMessage::SetPid(unsigned short)>
 800b69e:	4620      	mov	r0, r4
 800b6a0:	220c      	movs	r2, #12
 800b6a2:	f205 1111 	addw	r1, r5, #273	; 0x111
 800b6a6:	f000 fab7 	bl	800bc18 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800b6b0:	68a9      	ldr	r1, [r5, #8]
 800b6b2:	f000 fac3 	bl	800bc3c <RDMMessage::Send(unsigned int, unsigned int)>
 800b6b6:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800b6ba:	68a8      	ldr	r0, [r5, #8]
 800b6bc:	f000 fcbc 	bl	800c038 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800b6c0:	4604      	mov	r4, r0
 800b6c2:	f007 ffcf 	bl	8013664 <fwdgt_counter_reload>
 800b6c6:	b14c      	cbz	r4, 800b6dc <RDMDiscovery::QuickFind(unsigned char const*)+0xbc>
 800b6c8:	466a      	mov	r2, sp
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f7ff ff6c 	bl	800b5aa <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800b6d2:	b130      	cbz	r0, 800b6e2 <RDMDiscovery::QuickFind(unsigned char const*)+0xc2>
 800b6d4:	4669      	mov	r1, sp
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f7ff ffa2 	bl	800b620 <RDMDiscovery::QuickFind(unsigned char const*)>
 800b6dc:	2000      	movs	r0, #0
 800b6de:	b002      	add	sp, #8
 800b6e0:	bd70      	pop	{r4, r5, r6, pc}
 800b6e2:	466a      	mov	r2, sp
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f7ff ff60 	bl	800b5aa <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800b6ea:	f080 0001 	eor.w	r0, r0, #1
 800b6ee:	b2c0      	uxtb	r0, r0
 800b6f0:	e7f5      	b.n	800b6de <RDMDiscovery::QuickFind(unsigned char const*)+0xbe>
 800b6f2:	bf00      	nop
 800b6f4:	080155a4 	stmdaeq	r1, {r2, r5, r7, r8, sl, ip, lr}

0800b6f8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	4691      	mov	r9, r2
 800b6fe:	469b      	mov	fp, r3
 800b700:	b085      	sub	sp, #20
 800b702:	4605      	mov	r5, r0
 800b704:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 800b708:	f007 ffac 	bl	8013664 <fwdgt_counter_reload>
 800b70c:	45c3      	cmp	fp, r8
 800b70e:	bf08      	it	eq
 800b710:	45b9      	cmpeq	r9, r7
 800b712:	ea4f 430b 	mov.w	r3, fp, lsl #16
 800b716:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800b71a:	ea4f 4209 	mov.w	r2, r9, lsl #16
 800b71e:	4c54      	ldr	r4, [pc, #336]	; (800b870 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x178>)
 800b720:	f105 060c 	add.w	r6, r5, #12
 800b724:	ba12      	rev	r2, r2
 800b726:	ba1b      	rev	r3, r3
 800b728:	d136      	bne.n	800b798 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0xa0>
 800b72a:	4621      	mov	r1, r4
 800b72c:	a802      	add	r0, sp, #8
 800b72e:	e9c4 3200 	strd	r3, r2, [r4]
 800b732:	f7ff ff01 	bl	800b538 <memcpy.constprop.0.isra.0>
 800b736:	2110      	movs	r1, #16
 800b738:	4630      	mov	r0, r6
 800b73a:	f000 fa67 	bl	800bc0c <RDMMessage::SetCc(unsigned char)>
 800b73e:	2102      	movs	r1, #2
 800b740:	4630      	mov	r0, r6
 800b742:	f000 fa65 	bl	800bc10 <RDMMessage::SetPid(unsigned short)>
 800b746:	4630      	mov	r0, r6
 800b748:	a902      	add	r1, sp, #8
 800b74a:	f000 fa5b 	bl	800bc04 <RDMMessage::SetDstUid(unsigned char const*)>
 800b74e:	2200      	movs	r2, #0
 800b750:	4630      	mov	r0, r6
 800b752:	4611      	mov	r1, r2
 800b754:	f000 fa60 	bl	800bc18 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800b758:	4630      	mov	r0, r6
 800b75a:	68a9      	ldr	r1, [r5, #8]
 800b75c:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800b760:	f000 fa6c 	bl	800bc3c <RDMMessage::Send(unsigned int, unsigned int)>
 800b764:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800b768:	68a8      	ldr	r0, [r5, #8]
 800b76a:	f000 fc65 	bl	800c038 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d07c      	beq.n	800b86c <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x174>
 800b772:	7d03      	ldrb	r3, [r0, #20]
 800b774:	2b11      	cmp	r3, #17
 800b776:	d003      	beq.n	800b780 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x88>
 800b778:	2000      	movs	r0, #0
 800b77a:	b005      	add	sp, #20
 800b77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b780:	f100 0109 	add.w	r1, r0, #9
 800b784:	a802      	add	r0, sp, #8
 800b786:	f7ff fec7 	bl	800b518 <memcmp.constprop.0>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d1f4      	bne.n	800b778 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800b78e:	4628      	mov	r0, r5
 800b790:	a902      	add	r1, sp, #8
 800b792:	f7ff fedb 	bl	800b54c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800b796:	e7ef      	b.n	800b778 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800b798:	f205 1a11 	addw	sl, r5, #273	; 0x111
 800b79c:	4621      	mov	r1, r4
 800b79e:	4650      	mov	r0, sl
 800b7a0:	e9c4 3200 	strd	r3, r2, [r4]
 800b7a4:	f7ff fec8 	bl	800b538 <memcpy.constprop.0.isra.0>
 800b7a8:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800b7ac:	ea43 4317 	orr.w	r3, r3, r7, lsr #16
 800b7b0:	043a      	lsls	r2, r7, #16
 800b7b2:	ba1b      	rev	r3, r3
 800b7b4:	ba12      	rev	r2, r2
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	f205 1017 	addw	r0, r5, #279	; 0x117
 800b7bc:	e9c4 3200 	strd	r3, r2, [r4]
 800b7c0:	f7ff feba 	bl	800b538 <memcpy.constprop.0.isra.0>
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	492b      	ldr	r1, [pc, #172]	; (800b874 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x17c>)
 800b7c8:	f000 fa1c 	bl	800bc04 <RDMMessage::SetDstUid(unsigned char const*)>
 800b7cc:	2110      	movs	r1, #16
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f000 fa1c 	bl	800bc0c <RDMMessage::SetCc(unsigned char)>
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f000 fa1a 	bl	800bc10 <RDMMessage::SetPid(unsigned short)>
 800b7dc:	220c      	movs	r2, #12
 800b7de:	4651      	mov	r1, sl
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f000 fa19 	bl	800bc18 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800b7e6:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	68a9      	ldr	r1, [r5, #8]
 800b7ee:	f000 fa25 	bl	800bc3c <RDMMessage::Send(unsigned int, unsigned int)>
 800b7f2:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800b7f6:	68a8      	ldr	r0, [r5, #8]
 800b7f8:	f000 fc1e 	bl	800c038 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800b7fc:	4601      	mov	r1, r0
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d0ba      	beq.n	800b778 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800b802:	4628      	mov	r0, r5
 800b804:	aa02      	add	r2, sp, #8
 800b806:	f7ff fed0 	bl	800b5aa <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800b80a:	bb40      	cbnz	r0, 800b85e <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x166>
 800b80c:	ea4f 0a58 	mov.w	sl, r8, lsr #1
 800b810:	ea4f 035b 	mov.w	r3, fp, lsr #1
 800b814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b818:	f40a 4a80 	and.w	sl, sl, #16384	; 0x4000
 800b81c:	eb19 0607 	adds.w	r6, r9, r7
 800b820:	449a      	add	sl, r3
 800b822:	f3c8 020e 	ubfx	r2, r8, #0, #15
 800b826:	f3cb 030e 	ubfx	r3, fp, #0, #15
 800b82a:	eb43 0302 	adc.w	r3, r3, r2
 800b82e:	0876      	lsrs	r6, r6, #1
 800b830:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
 800b834:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 800b838:	464a      	mov	r2, r9
 800b83a:	465b      	mov	r3, fp
 800b83c:	4628      	mov	r0, r5
 800b83e:	e9cd 6a00 	strd	r6, sl, [sp]
 800b842:	f7ff ff59 	bl	800b6f8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800b846:	1c72      	adds	r2, r6, #1
 800b848:	4604      	mov	r4, r0
 800b84a:	e9cd 7800 	strd	r7, r8, [sp]
 800b84e:	4628      	mov	r0, r5
 800b850:	f14a 0300 	adc.w	r3, sl, #0
 800b854:	f7ff ff50 	bl	800b6f8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800b858:	4320      	orrs	r0, r4
 800b85a:	b2c0      	uxtb	r0, r0
 800b85c:	e78d      	b.n	800b77a <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800b85e:	4628      	mov	r0, r5
 800b860:	a902      	add	r1, sp, #8
 800b862:	f7ff fedd 	bl	800b620 <RDMDiscovery::QuickFind(unsigned char const*)>
 800b866:	2800      	cmp	r0, #0
 800b868:	d1d0      	bne.n	800b80c <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x114>
 800b86a:	e785      	b.n	800b778 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800b86c:	2001      	movs	r0, #1
 800b86e:	e784      	b.n	800b77a <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800b870:	20001a30 	andcs	r1, r0, r0, lsr sl
 800b874:	080155a4 	stmdaeq	r1, {r2, r5, r7, r8, sl, ip, lr}

0800b878 <RDMDiscovery::Full()>:
 800b878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b87a:	4604      	mov	r4, r0
 800b87c:	2500      	movs	r5, #0
 800b87e:	2606      	movs	r6, #6
 800b880:	4f2a      	ldr	r7, [pc, #168]	; (800b92c <RDMDiscovery::Full()+0xb4>)
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	42ab      	cmp	r3, r5
 800b886:	d907      	bls.n	800b898 <RDMDiscovery::Full()+0x20>
 800b888:	6860      	ldr	r0, [r4, #4]
 800b88a:	4639      	mov	r1, r7
 800b88c:	fb06 0005 	mla	r0, r6, r5, r0
 800b890:	f7ff fe52 	bl	800b538 <memcpy.constprop.0.isra.0>
 800b894:	3501      	adds	r5, #1
 800b896:	e7f4      	b.n	800b882 <RDMDiscovery::Full()+0xa>
 800b898:	2600      	movs	r6, #0
 800b89a:	4625      	mov	r5, r4
 800b89c:	f845 6b0c 	str.w	r6, [r5], #12
 800b8a0:	f007 fee0 	bl	8013664 <fwdgt_counter_reload>
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	4921      	ldr	r1, [pc, #132]	; (800b92c <RDMDiscovery::Full()+0xb4>)
 800b8a8:	f000 f9ac 	bl	800bc04 <RDMMessage::SetDstUid(unsigned char const*)>
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	2110      	movs	r1, #16
 800b8b0:	f000 f9ac 	bl	800bc0c <RDMMessage::SetCc(unsigned char)>
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	2103      	movs	r1, #3
 800b8b8:	f000 f9aa 	bl	800bc10 <RDMMessage::SetPid(unsigned short)>
 800b8bc:	4632      	mov	r2, r6
 800b8be:	4631      	mov	r1, r6
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	f000 f9a9 	bl	800bc18 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800b8c6:	4632      	mov	r2, r6
 800b8c8:	4628      	mov	r0, r5
 800b8ca:	68a1      	ldr	r1, [r4, #8]
 800b8cc:	f000 f9b6 	bl	800bc3c <RDMMessage::Send(unsigned int, unsigned int)>
 800b8d0:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800b8d4:	68a0      	ldr	r0, [r4, #8]
 800b8d6:	f000 fbaf 	bl	800c038 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800b8da:	f007 fec3 	bl	8013664 <fwdgt_counter_reload>
 800b8de:	4631      	mov	r1, r6
 800b8e0:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800b8e4:	f008 fde2 	bl	80144ac <udelay(unsigned int, unsigned int)>
 800b8e8:	f007 febc 	bl	8013664 <fwdgt_counter_reload>
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	4628      	mov	r0, r5
 800b8f0:	68a1      	ldr	r1, [r4, #8]
 800b8f2:	f000 f9a3 	bl	800bc3c <RDMMessage::Send(unsigned int, unsigned int)>
 800b8f6:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800b8fa:	68a0      	ldr	r0, [r4, #8]
 800b8fc:	f000 fb9c 	bl	800c038 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800b900:	f007 feb0 	bl	8013664 <fwdgt_counter_reload>
 800b904:	4631      	mov	r1, r6
 800b906:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800b90a:	f008 fdcf 	bl	80144ac <udelay(unsigned int, unsigned int)>
 800b90e:	f007 fea9 	bl	8013664 <fwdgt_counter_reload>
 800b912:	f06f 0201 	mvn.w	r2, #1
 800b916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b91a:	4620      	mov	r0, r4
 800b91c:	e9cd 2300 	strd	r2, r3, [sp]
 800b920:	2200      	movs	r2, #0
 800b922:	2300      	movs	r3, #0
 800b924:	f7ff fee8 	bl	800b6f8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800b928:	b003      	add	sp, #12
 800b92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b92c:	080155a4 	stmdaeq	r1, {r2, r5, r7, r8, sl, ip, lr}

0800b930 <RDMDevice::RDMDevice()>:
 800b930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b932:	4b35      	ldr	r3, [pc, #212]	; (800ba08 <RDMDevice::RDMDevice()+0xd8>)
 800b934:	4a35      	ldr	r2, [pc, #212]	; (800ba0c <RDMDevice::RDMDevice()+0xdc>)
 800b936:	7859      	ldrb	r1, [r3, #1]
 800b938:	4604      	mov	r4, r0
 800b93a:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
 800b93e:	7818      	ldrb	r0, [r3, #0]
 800b940:	2300      	movs	r3, #0
 800b942:	4615      	mov	r5, r2
 800b944:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
 800b948:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800b94c:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800b950:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
 800b954:	67a3      	str	r3, [r4, #120]	; 0x78
 800b956:	4613      	mov	r3, r2
 800b958:	781e      	ldrb	r6, [r3, #0]
 800b95a:	3201      	adds	r2, #1
 800b95c:	2e00      	cmp	r6, #0
 800b95e:	d1fa      	bne.n	800b956 <RDMDevice::RDMDevice()+0x26>
 800b960:	1b5b      	subs	r3, r3, r5
 800b962:	2b20      	cmp	r3, #32
 800b964:	bf28      	it	cs
 800b966:	2320      	movcs	r3, #32
 800b968:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 800b96c:	462e      	mov	r6, r5
 800b96e:	461a      	mov	r2, r3
 800b970:	4f26      	ldr	r7, [pc, #152]	; (800ba0c <RDMDevice::RDMDevice()+0xdc>)
 800b972:	3a01      	subs	r2, #1
 800b974:	d304      	bcc.n	800b980 <RDMDevice::RDMDevice()+0x50>
 800b976:	f817 cb01 	ldrb.w	ip, [r7], #1
 800b97a:	f806 cb01 	strb.w	ip, [r6], #1
 800b97e:	e7f8      	b.n	800b972 <RDMDevice::RDMDevice()+0x42>
 800b980:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800b984:	4b22      	ldr	r3, [pc, #136]	; (800ba10 <RDMDevice::RDMDevice()+0xe0>)
 800b986:	7020      	strb	r0, [r4, #0]
 800b988:	7061      	strb	r1, [r4, #1]
 800b98a:	6818      	ldr	r0, [r3, #0]
 800b98c:	4669      	mov	r1, sp
 800b98e:	f004 fac5 	bl	800ff1c <Network::MacAddressCopyTo(unsigned char*)>
 800b992:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b996:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b99a:	70a3      	strb	r3, [r4, #2]
 800b99c:	7263      	strb	r3, [r4, #9]
 800b99e:	4b1d      	ldr	r3, [pc, #116]	; (800ba14 <RDMDevice::RDMDevice()+0xe4>)
 800b9a0:	70e2      	strb	r2, [r4, #3]
 800b9a2:	7222      	strb	r2, [r4, #8]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b9aa:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800b9ae:	7121      	strb	r1, [r4, #4]
 800b9b0:	7160      	strb	r0, [r4, #5]
 800b9b2:	71a0      	strb	r0, [r4, #6]
 800b9b4:	71e1      	strb	r1, [r4, #7]
 800b9b6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b9ba:	2900      	cmp	r1, #0
 800b9bc:	d1fb      	bne.n	800b9b6 <RDMDevice::RDMDevice()+0x86>
 800b9be:	1a9b      	subs	r3, r3, r2
 800b9c0:	2b20      	cmp	r3, #32
 800b9c2:	bf28      	it	cs
 800b9c4:	2320      	movcs	r3, #32
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	4912      	ldr	r1, [pc, #72]	; (800ba14 <RDMDevice::RDMDevice()+0xe4>)
 800b9ca:	3a01      	subs	r2, #1
 800b9cc:	d304      	bcc.n	800b9d8 <RDMDevice::RDMDevice()+0xa8>
 800b9ce:	f811 0b01 	ldrb.w	r0, [r1], #1
 800b9d2:	f805 0b01 	strb.w	r0, [r5], #1
 800b9d6:	e7f8      	b.n	800b9ca <RDMDevice::RDMDevice()+0x9a>
 800b9d8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800b9dc:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 800b9e0:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b9e2:	2314      	movs	r3, #20
 800b9e4:	4a0c      	ldr	r2, [pc, #48]	; (800ba18 <RDMDevice::RDMDevice()+0xe8>)
 800b9e6:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800b9ea:	f104 0067 	add.w	r0, r4, #103	; 0x67
 800b9ee:	f104 0353 	add.w	r3, r4, #83	; 0x53
 800b9f2:	4298      	cmp	r0, r3
 800b9f4:	d004      	beq.n	800ba00 <RDMDevice::RDMDevice()+0xd0>
 800b9f6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b9fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b9fe:	e7f8      	b.n	800b9f2 <RDMDevice::RDMDevice()+0xc2>
 800ba00:	4620      	mov	r0, r4
 800ba02:	b003      	add	sp, #12
 800ba04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba06:	bf00      	nop
 800ba08:	080156b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r9, sl, ip, lr}
 800ba0c:	080156b8 	stmdaeq	r1, {r3, r4, r5, r7, r9, sl, ip, lr}
 800ba10:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800ba14:	08015195 	stmdaeq	r1, {r0, r2, r4, r7, r8, ip, lr}
 800ba18:	0801567e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, sl, ip, lr}

0800ba1c <RDMDevice::Print()>:
 800ba1c:	b513      	push	{r0, r1, r4, lr}
 800ba1e:	4604      	mov	r4, r0
 800ba20:	4818      	ldr	r0, [pc, #96]	; (800ba84 <RDMDevice::Print()+0x68>)
 800ba22:	f007 fb2d 	bl	8013080 <printf>
 800ba26:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800ba2a:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800ba2e:	4816      	ldr	r0, [pc, #88]	; (800ba88 <RDMDevice::Print()+0x6c>)
 800ba30:	f007 fb26 	bl	8013080 <printf>
 800ba34:	7862      	ldrb	r2, [r4, #1]
 800ba36:	7821      	ldrb	r1, [r4, #0]
 800ba38:	4814      	ldr	r0, [pc, #80]	; (800ba8c <RDMDevice::Print()+0x70>)
 800ba3a:	f007 fb21 	bl	8013080 <printf>
 800ba3e:	79a3      	ldrb	r3, [r4, #6]
 800ba40:	7a22      	ldrb	r2, [r4, #8]
 800ba42:	7a61      	ldrb	r1, [r4, #9]
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	4812      	ldr	r0, [pc, #72]	; (800ba90 <RDMDevice::Print()+0x74>)
 800ba48:	79e3      	ldrb	r3, [r4, #7]
 800ba4a:	f007 fb19 	bl	8013080 <printf>
 800ba4e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800ba52:	f104 020a 	add.w	r2, r4, #10
 800ba56:	480f      	ldr	r0, [pc, #60]	; (800ba94 <RDMDevice::Print()+0x78>)
 800ba58:	f007 fb12 	bl	8013080 <printf>
 800ba5c:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 800ba60:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800ba64:	0a09      	lsrs	r1, r1, #8
 800ba66:	480c      	ldr	r0, [pc, #48]	; (800ba98 <RDMDevice::Print()+0x7c>)
 800ba68:	f007 fb0a 	bl	8013080 <printf>
 800ba6c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800ba70:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800ba74:	4809      	ldr	r0, [pc, #36]	; (800ba9c <RDMDevice::Print()+0x80>)
 800ba76:	0a09      	lsrs	r1, r1, #8
 800ba78:	b002      	add	sp, #8
 800ba7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba7e:	f007 baff 	b.w	8013080 <printf>
 800ba82:	bf00      	nop
 800ba84:	080155aa 	stmdaeq	r1, {r1, r3, r5, r7, r8, sl, ip, lr}
 800ba88:	080155c4 	stmdaeq	r1, {r2, r6, r7, r8, sl, ip, lr}
 800ba8c:	080155df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, sl, ip, lr}
 800ba90:	080155fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, sl, ip, lr}
 800ba94:	08015625 	stmdaeq	r1, {r0, r2, r5, r9, sl, ip, lr}
 800ba98:	08015640 	stmdaeq	r1, {r6, r9, sl, ip, lr}
 800ba9c:	0801565f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r9, sl, ip, lr}

0800baa0 <RDMDeviceController::RDMDeviceController()>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4604      	mov	r4, r0
 800baa4:	f7ff ff44 	bl	800b930 <RDMDevice::RDMDevice()>
 800baa8:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800baac:	b1b3      	cbz	r3, 800badc <RDMDeviceController::RDMDeviceController()+0x3c>
 800baae:	f104 010a 	add.w	r1, r4, #10
 800bab2:	460b      	mov	r3, r1
 800bab4:	4a11      	ldr	r2, [pc, #68]	; (800bafc <RDMDeviceController::RDMDeviceController()+0x5c>)
 800bab6:	f104 0523 	add.w	r5, r4, #35	; 0x23
 800baba:	429d      	cmp	r5, r3
 800babc:	d004      	beq.n	800bac8 <RDMDeviceController::RDMDeviceController()+0x28>
 800babe:	f812 0b01 	ldrb.w	r0, [r2], #1
 800bac2:	f803 0b01 	strb.w	r0, [r3], #1
 800bac6:	e7f8      	b.n	800baba <RDMDeviceController::RDMDeviceController()+0x1a>
 800bac8:	2219      	movs	r2, #25
 800baca:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800bacc:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
 800bad0:	b110      	cbz	r0, 800bad8 <RDMDeviceController::RDMDeviceController()+0x38>
 800bad2:	6803      	ldr	r3, [r0, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	4798      	blx	r3
 800bad8:	4620      	mov	r0, r4
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	4a07      	ldr	r2, [pc, #28]	; (800bafc <RDMDeviceController::RDMDeviceController()+0x5c>)
 800bade:	f104 0353 	add.w	r3, r4, #83	; 0x53
 800bae2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 800bae6:	4283      	cmp	r3, r0
 800bae8:	d004      	beq.n	800baf4 <RDMDeviceController::RDMDeviceController()+0x54>
 800baea:	f812 1b01 	ldrb.w	r1, [r2], #1
 800baee:	f803 1b01 	strb.w	r1, [r3], #1
 800baf2:	e7f8      	b.n	800bae6 <RDMDeviceController::RDMDeviceController()+0x46>
 800baf4:	2319      	movs	r3, #25
 800baf6:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800bafa:	e7ed      	b.n	800bad8 <RDMDeviceController::RDMDeviceController()+0x38>
 800bafc:	08015693 	stmdaeq	r1, {r0, r1, r4, r7, r9, sl, ip, lr}

0800bb00 <memcpy.isra.0>:
 800bb00:	f007 b87a 	b.w	8012bf8 <memcpy>

0800bb04 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800bb04:	b510      	push	{r4, lr}
 800bb06:	6001      	str	r1, [r0, #0]
 800bb08:	2100      	movs	r1, #0
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	6041      	str	r1, [r0, #4]
 800bb0e:	2220      	movs	r2, #32
 800bb10:	3008      	adds	r0, #8
 800bb12:	f007 f893 	bl	8012c3c <memset>
 800bb16:	4b03      	ldr	r3, [pc, #12]	; (800bb24 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800bb18:	4620      	mov	r0, r4
 800bb1a:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb1c:	237f      	movs	r3, #127	; 0x7f
 800bb1e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800bb22:	bd10      	pop	{r4, pc}
 800bb24:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800bb28 <RDMDeviceParams::Load()>:
 800bb28:	4601      	mov	r1, r0
 800bb2a:	6800      	ldr	r0, [r0, #0]
 800bb2c:	b130      	cbz	r0, 800bb3c <RDMDeviceParams::Load()+0x14>
 800bb2e:	b508      	push	{r3, lr}
 800bb30:	6803      	ldr	r3, [r0, #0]
 800bb32:	3104      	adds	r1, #4
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	4798      	blx	r3
 800bb38:	2001      	movs	r0, #1
 800bb3a:	bd08      	pop	{r3, pc}
 800bb3c:	4770      	bx	lr

0800bb3e <RDMDeviceParams::Set(RDMDevice*)>:
 800bb3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb40:	6843      	ldr	r3, [r0, #4]
 800bb42:	460c      	mov	r4, r1
 800bb44:	07d9      	lsls	r1, r3, #31
 800bb46:	4605      	mov	r5, r0
 800bb48:	d518      	bpl.n	800bb7c <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800bb4a:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 800bb4e:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800bb52:	2e20      	cmp	r6, #32
 800bb54:	bf28      	it	cs
 800bb56:	2620      	movcs	r6, #32
 800bb58:	f100 0108 	add.w	r1, r0, #8
 800bb5c:	b1e3      	cbz	r3, 800bb98 <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 800bb5e:	f104 070a 	add.w	r7, r4, #10
 800bb62:	4638      	mov	r0, r7
 800bb64:	4632      	mov	r2, r6
 800bb66:	f7ff ffcb 	bl	800bb00 <memcpy.isra.0>
 800bb6a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800bb6c:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800bb70:	b120      	cbz	r0, 800bb7c <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800bb72:	6803      	ldr	r3, [r0, #0]
 800bb74:	4632      	mov	r2, r6
 800bb76:	4639      	mov	r1, r7
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	4798      	blx	r3
 800bb7c:	686b      	ldr	r3, [r5, #4]
 800bb7e:	079a      	lsls	r2, r3, #30
 800bb80:	bf44      	itt	mi
 800bb82:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800bb86:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 800bb8a:	075b      	lsls	r3, r3, #29
 800bb8c:	bf44      	itt	mi
 800bb8e:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800bb92:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 800bb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb98:	4632      	mov	r2, r6
 800bb9a:	f104 0053 	add.w	r0, r4, #83	; 0x53
 800bb9e:	f7ff ffaf 	bl	800bb00 <memcpy.isra.0>
 800bba2:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
 800bba6:	e7e9      	b.n	800bb7c <RDMDeviceParams::Set(RDMDevice*)+0x3e>

0800bba8 <RDMDeviceParams::Dump()>:
 800bba8:	4770      	bx	lr

0800bbaa <memcpy.isra.0>:
 800bbaa:	3801      	subs	r0, #1
 800bbac:	440a      	add	r2, r1
 800bbae:	4291      	cmp	r1, r2
 800bbb0:	d004      	beq.n	800bbbc <memcpy.isra.0+0x12>
 800bbb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbb6:	f800 3f01 	strb.w	r3, [r0, #1]!
 800bbba:	e7f8      	b.n	800bbae <memcpy.isra.0+0x4>
 800bbbc:	4770      	bx	lr
	...

0800bbc0 <RDMMessage::RDMMessage()>:
 800bbc0:	23cc      	movs	r3, #204	; 0xcc
 800bbc2:	b570      	push	{r4, r5, r6, lr}
 800bbc4:	7003      	strb	r3, [r0, #0]
 800bbc6:	2501      	movs	r5, #1
 800bbc8:	2318      	movs	r3, #24
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4e0a      	ldr	r6, [pc, #40]	; (800bbf8 <RDMMessage::RDMMessage()+0x38>)
 800bbce:	7083      	strb	r3, [r0, #2]
 800bbd0:	7045      	strb	r5, [r0, #1]
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	2206      	movs	r2, #6
 800bbd6:	3009      	adds	r0, #9
 800bbd8:	f7ff ffe7 	bl	800bbaa <memcpy.isra.0>
 800bbdc:	1ce0      	adds	r0, r4, #3
 800bbde:	2206      	movs	r2, #6
 800bbe0:	4631      	mov	r1, r6
 800bbe2:	f7ff ffe2 	bl	800bbaa <memcpy.isra.0>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	4620      	mov	r0, r4
 800bbea:	7425      	strb	r5, [r4, #16]
 800bbec:	7463      	strb	r3, [r4, #17]
 800bbee:	74a3      	strb	r3, [r4, #18]
 800bbf0:	74e3      	strb	r3, [r4, #19]
 800bbf2:	75e3      	strb	r3, [r4, #23]
 800bbf4:	bd70      	pop	{r4, r5, r6, pc}
 800bbf6:	bf00      	nop
 800bbf8:	080156b0 	stmdaeq	r1, {r4, r5, r7, r9, sl, ip, lr}

0800bbfc <RDMMessage::SetSrcUid(unsigned char const*)>:
 800bbfc:	2206      	movs	r2, #6
 800bbfe:	3009      	adds	r0, #9
 800bc00:	f7ff bfd3 	b.w	800bbaa <memcpy.isra.0>

0800bc04 <RDMMessage::SetDstUid(unsigned char const*)>:
 800bc04:	2206      	movs	r2, #6
 800bc06:	3003      	adds	r0, #3
 800bc08:	f7ff bfcf 	b.w	800bbaa <memcpy.isra.0>

0800bc0c <RDMMessage::SetCc(unsigned char)>:
 800bc0c:	7501      	strb	r1, [r0, #20]
 800bc0e:	4770      	bx	lr

0800bc10 <RDMMessage::SetPid(unsigned short)>:
 800bc10:	0a0b      	lsrs	r3, r1, #8
 800bc12:	7543      	strb	r3, [r0, #21]
 800bc14:	7581      	strb	r1, [r0, #22]
 800bc16:	4770      	bx	lr

0800bc18 <RDMMessage::SetPd(unsigned char const*, unsigned char)>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4604      	mov	r4, r0
 800bc1c:	7883      	ldrb	r3, [r0, #2]
 800bc1e:	7dc0      	ldrb	r0, [r0, #23]
 800bc20:	4615      	mov	r5, r2
 800bc22:	1a1b      	subs	r3, r3, r0
 800bc24:	70a3      	strb	r3, [r4, #2]
 800bc26:	75e2      	strb	r2, [r4, #23]
 800bc28:	b121      	cbz	r1, 800bc34 <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800bc2a:	b11a      	cbz	r2, 800bc34 <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800bc2c:	f104 0018 	add.w	r0, r4, #24
 800bc30:	f7ff ffbb 	bl	800bbaa <memcpy.isra.0>
 800bc34:	78a2      	ldrb	r2, [r4, #2]
 800bc36:	4415      	add	r5, r2
 800bc38:	70a5      	strb	r5, [r4, #2]
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}

0800bc3c <RDMMessage::Send(unsigned int, unsigned int)>:
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4601      	mov	r1, r0
 800bc40:	4618      	mov	r0, r3
 800bc42:	f000 bebd 	b.w	800c9c0 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>

0800bc46 <LightSet::Blackout(bool)>:
 800bc46:	4770      	bx	lr

0800bc48 <DmxSend::~DmxSend()>:
 800bc48:	4770      	bx	lr
	...

0800bc4c <DmxSend::Start(unsigned int)>:
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	b410      	push	{r4}
 800bc50:	4c08      	ldr	r4, [pc, #32]	; (800bc74 <DmxSend::Start(unsigned int)+0x28>)
 800bc52:	fa03 f001 	lsl.w	r0, r3, r1
 800bc56:	7822      	ldrb	r2, [r4, #0]
 800bc58:	ea30 0c02 	bics.w	ip, r0, r2
 800bc5c:	d007      	beq.n	800bc6e <DmxSend::Start(unsigned int)+0x22>
 800bc5e:	4302      	orrs	r2, r0
 800bc60:	4805      	ldr	r0, [pc, #20]	; (800bc78 <DmxSend::Start(unsigned int)+0x2c>)
 800bc62:	7022      	strb	r2, [r4, #0]
 800bc64:	6800      	ldr	r0, [r0, #0]
 800bc66:	2200      	movs	r2, #0
 800bc68:	bc10      	pop	{r4}
 800bc6a:	f000 bc95 	b.w	800c598 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800bc6e:	bc10      	pop	{r4}
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	20001a38 	andcs	r1, r0, r8, lsr sl
 800bc78:	20001e78 	andcs	r1, r0, r8, ror lr

0800bc7c <DmxSend::Stop(unsigned int)>:
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	b410      	push	{r4}
 800bc80:	4809      	ldr	r0, [pc, #36]	; (800bca8 <DmxSend::Stop(unsigned int)+0x2c>)
 800bc82:	408a      	lsls	r2, r1
 800bc84:	7803      	ldrb	r3, [r0, #0]
 800bc86:	ea03 0402 	and.w	r4, r3, r2
 800bc8a:	439a      	bics	r2, r3
 800bc8c:	d109      	bne.n	800bca2 <DmxSend::Stop(unsigned int)+0x26>
 800bc8e:	ea23 0304 	bic.w	r3, r3, r4
 800bc92:	7003      	strb	r3, [r0, #0]
 800bc94:	2300      	movs	r3, #0
 800bc96:	4805      	ldr	r0, [pc, #20]	; (800bcac <DmxSend::Stop(unsigned int)+0x30>)
 800bc98:	461a      	mov	r2, r3
 800bc9a:	6800      	ldr	r0, [r0, #0]
 800bc9c:	bc10      	pop	{r4}
 800bc9e:	f000 bc7b 	b.w	800c598 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800bca2:	bc10      	pop	{r4}
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	20001a38 	andcs	r1, r0, r8, lsr sl
 800bcac:	20001e78 	andcs	r1, r0, r8, ror lr

0800bcb0 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800bcb0:	b11b      	cbz	r3, 800bcba <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xa>
 800bcb2:	4802      	ldr	r0, [pc, #8]	; (800bcbc <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xc>)
 800bcb4:	6800      	ldr	r0, [r0, #0]
 800bcb6:	f000 bdd5 	b.w	800c864 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>
 800bcba:	4770      	bx	lr
 800bcbc:	20001e78 	andcs	r1, r0, r8, ror lr

0800bcc0 <DmxSend::Print()>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	4c0e      	ldr	r4, [pc, #56]	; (800bcfc <DmxSend::Print()+0x3c>)
 800bcc4:	480e      	ldr	r0, [pc, #56]	; (800bd00 <DmxSend::Print()+0x40>)
 800bcc6:	f007 f9db 	bl	8013080 <printf>
 800bcca:	6823      	ldr	r3, [r4, #0]
 800bccc:	480d      	ldr	r0, [pc, #52]	; (800bd04 <DmxSend::Print()+0x44>)
 800bcce:	6819      	ldr	r1, [r3, #0]
 800bcd0:	f007 f9d6 	bl	8013080 <printf>
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	480c      	ldr	r0, [pc, #48]	; (800bd08 <DmxSend::Print()+0x48>)
 800bcd8:	6859      	ldr	r1, [r3, #4]
 800bcda:	f007 f9d1 	bl	8013080 <printf>
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	490a      	ldr	r1, [pc, #40]	; (800bd0c <DmxSend::Print()+0x4c>)
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	480a      	ldr	r0, [pc, #40]	; (800bd10 <DmxSend::Print()+0x50>)
 800bce6:	fbb1 f1f3 	udiv	r1, r1, r3
 800bcea:	f007 f9c9 	bl	8013080 <printf>
 800bcee:	6823      	ldr	r3, [r4, #0]
 800bcf0:	4808      	ldr	r0, [pc, #32]	; (800bd14 <DmxSend::Print()+0x54>)
 800bcf2:	8a19      	ldrh	r1, [r3, #16]
 800bcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcf8:	f007 b9c2 	b.w	8013080 <printf>
 800bcfc:	20001e78 	andcs	r1, r0, r8, ror lr
 800bd00:	080156d4 	stmdaeq	r1, {r2, r4, r6, r7, r9, sl, ip, lr}
 800bd04:	080156de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r9, sl, ip, lr}
 800bd08:	080156f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, sl, ip, lr}
 800bd0c:	000f4240 	andeq	r4, pc, r0, asr #4
 800bd10:	08015706 	stmdaeq	r1, {r1, r2, r8, r9, sl, ip, lr}
 800bd14:	0801571a 	stmdaeq	r1, {r1, r3, r4, r8, r9, sl, ip, lr}

0800bd18 <DmxSend::~DmxSend()>:
 800bd18:	b510      	push	{r4, lr}
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	f006 feb4 	bl	8012a88 <operator delete(void*)>
 800bd20:	4620      	mov	r0, r4
 800bd22:	bd10      	pop	{r4, pc}

0800bd24 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800bd24:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd26:	88c5      	ldrh	r5, [r0, #6]
 800bd28:	8886      	ldrh	r6, [r0, #4]
 800bd2a:	42b5      	cmp	r5, r6
 800bd2c:	d216      	bcs.n	800bd5c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800bd2e:	4604      	mov	r4, r0
 800bd30:	6800      	ldr	r0, [r0, #0]
 800bd32:	4428      	add	r0, r5
 800bd34:	1b75      	subs	r5, r6, r5
 800bd36:	7a26      	ldrb	r6, [r4, #8]
 800bd38:	b923      	cbnz	r3, 800bd44 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800bd3a:	b926      	cbnz	r6, 800bd46 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800bd3c:	9200      	str	r2, [sp, #0]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4a09      	ldr	r2, [pc, #36]	; (800bd68 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800bd42:	e003      	b.n	800bd4c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800bd44:	b166      	cbz	r6, 800bd60 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800bd46:	460b      	mov	r3, r1
 800bd48:	9200      	str	r2, [sp, #0]
 800bd4a:	4a08      	ldr	r2, [pc, #32]	; (800bd6c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	f007 f9bf 	bl	80130d0 <snprintf>
 800bd52:	4285      	cmp	r5, r0
 800bd54:	bfa2      	ittt	ge
 800bd56:	88e3      	ldrhge	r3, [r4, #6]
 800bd58:	181b      	addge	r3, r3, r0
 800bd5a:	80e3      	strhge	r3, [r4, #6]
 800bd5c:	b002      	add	sp, #8
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	9200      	str	r2, [sp, #0]
 800bd62:	460b      	mov	r3, r1
 800bd64:	4a02      	ldr	r2, [pc, #8]	; (800bd70 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800bd66:	e7f1      	b.n	800bd4c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800bd68:	080152d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, ip, lr}
 800bd6c:	080152ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, ip, lr}
 800bd70:	080152d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, lr}

0800bd74 <DmxParams::DmxParams(DmxParamsStore*)>:
 800bd74:	6001      	str	r1, [r0, #0]
 800bd76:	2100      	movs	r1, #0
 800bd78:	4a03      	ldr	r2, [pc, #12]	; (800bd88 <DmxParams::DmxParams(DmxParamsStore*)+0x14>)
 800bd7a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800bd7e:	f64f 7228 	movw	r2, #65320	; 0xff28
 800bd82:	8182      	strh	r2, [r0, #12]
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	000c00b0 	strheq	r0, [ip], -r0	; <UNPREDICTABLE>

0800bd8c <DmxParams::Load()>:
 800bd8c:	b508      	push	{r3, lr}
 800bd8e:	2300      	movs	r3, #0
 800bd90:	4601      	mov	r1, r0
 800bd92:	6043      	str	r3, [r0, #4]
 800bd94:	6800      	ldr	r0, [r0, #0]
 800bd96:	b120      	cbz	r0, 800bda2 <DmxParams::Load()+0x16>
 800bd98:	6803      	ldr	r3, [r0, #0]
 800bd9a:	3104      	adds	r1, #4
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	4798      	blx	r3
 800bda0:	2001      	movs	r0, #1
 800bda2:	bd08      	pop	{r3, pc}

0800bda4 <DmxParams::Load(char const*, unsigned int)>:
 800bda4:	6803      	ldr	r3, [r0, #0]
 800bda6:	b1d3      	cbz	r3, 800bdde <DmxParams::Load(char const*, unsigned int)+0x3a>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdac:	460d      	mov	r5, r1
 800bdae:	4616      	mov	r6, r2
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	6043      	str	r3, [r0, #4]
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	490a      	ldr	r1, [pc, #40]	; (800bde0 <DmxParams::Load(char const*, unsigned int)+0x3c>)
 800bdb8:	4668      	mov	r0, sp
 800bdba:	f006 f909 	bl	8011fd0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800bdbe:	4632      	mov	r2, r6
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	4668      	mov	r0, sp
 800bdc4:	f006 f908 	bl	8011fd8 <ReadConfigFile::Read(char const*, unsigned int)>
 800bdc8:	4621      	mov	r1, r4
 800bdca:	f851 0b04 	ldr.w	r0, [r1], #4
 800bdce:	6803      	ldr	r3, [r0, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	4798      	blx	r3
 800bdd4:	4668      	mov	r0, sp
 800bdd6:	f006 f8fe 	bl	8011fd6 <ReadConfigFile::~ReadConfigFile()>
 800bdda:	b002      	add	sp, #8
 800bddc:	bd70      	pop	{r4, r5, r6, pc}
 800bdde:	4770      	bx	lr
 800bde0:	0800beb1 	stmdaeq	r0, {r0, r4, r5, r7, r9, sl, fp, ip, sp, pc}

0800bde4 <DmxParams::callbackFunction(char const*)>:
 800bde4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bde6:	460d      	mov	r5, r1
 800bde8:	4604      	mov	r4, r0
 800bdea:	492d      	ldr	r1, [pc, #180]	; (800bea0 <DmxParams::callbackFunction(char const*)+0xbc>)
 800bdec:	4628      	mov	r0, r5
 800bdee:	f10d 0206 	add.w	r2, sp, #6
 800bdf2:	f006 f9a9 	bl	8012148 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800bdf6:	b988      	cbnz	r0, 800be1c <DmxParams::callbackFunction(char const*)+0x38>
 800bdf8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bdfc:	6863      	ldr	r3, [r4, #4]
 800bdfe:	2a5b      	cmp	r2, #91	; 0x5b
 800be00:	d907      	bls.n	800be12 <DmxParams::callbackFunction(char const*)+0x2e>
 800be02:	2ab0      	cmp	r2, #176	; 0xb0
 800be04:	d005      	beq.n	800be12 <DmxParams::callbackFunction(char const*)+0x2e>
 800be06:	8122      	strh	r2, [r4, #8]
 800be08:	f043 0301 	orr.w	r3, r3, #1
 800be0c:	6063      	str	r3, [r4, #4]
 800be0e:	b003      	add	sp, #12
 800be10:	bd30      	pop	{r4, r5, pc}
 800be12:	22b0      	movs	r2, #176	; 0xb0
 800be14:	f023 0301 	bic.w	r3, r3, #1
 800be18:	8122      	strh	r2, [r4, #8]
 800be1a:	e7f7      	b.n	800be0c <DmxParams::callbackFunction(char const*)+0x28>
 800be1c:	4628      	mov	r0, r5
 800be1e:	4921      	ldr	r1, [pc, #132]	; (800bea4 <DmxParams::callbackFunction(char const*)+0xc0>)
 800be20:	f10d 0206 	add.w	r2, sp, #6
 800be24:	f006 f990 	bl	8012148 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800be28:	b968      	cbnz	r0, 800be46 <DmxParams::callbackFunction(char const*)+0x62>
 800be2a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800be2e:	6863      	ldr	r3, [r4, #4]
 800be30:	2a0c      	cmp	r2, #12
 800be32:	bf93      	iteet	ls
 800be34:	220c      	movls	r2, #12
 800be36:	8162      	strhhi	r2, [r4, #10]
 800be38:	f043 0302 	orrhi.w	r3, r3, #2
 800be3c:	8162      	strhls	r2, [r4, #10]
 800be3e:	bf98      	it	ls
 800be40:	f023 0302 	bicls.w	r3, r3, #2
 800be44:	e7e2      	b.n	800be0c <DmxParams::callbackFunction(char const*)+0x28>
 800be46:	4628      	mov	r0, r5
 800be48:	4917      	ldr	r1, [pc, #92]	; (800bea8 <DmxParams::callbackFunction(char const*)+0xc4>)
 800be4a:	f10d 0205 	add.w	r2, sp, #5
 800be4e:	f006 f999 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800be52:	b950      	cbnz	r0, 800be6a <DmxParams::callbackFunction(char const*)+0x86>
 800be54:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800be58:	6863      	ldr	r3, [r4, #4]
 800be5a:	2a28      	cmp	r2, #40	; 0x28
 800be5c:	7322      	strb	r2, [r4, #12]
 800be5e:	bf14      	ite	ne
 800be60:	f043 0304 	orrne.w	r3, r3, #4
 800be64:	f023 0304 	biceq.w	r3, r3, #4
 800be68:	e7d0      	b.n	800be0c <DmxParams::callbackFunction(char const*)+0x28>
 800be6a:	4628      	mov	r0, r5
 800be6c:	490f      	ldr	r1, [pc, #60]	; (800beac <DmxParams::callbackFunction(char const*)+0xc8>)
 800be6e:	f10d 0206 	add.w	r2, sp, #6
 800be72:	f006 f969 	bl	8012148 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800be76:	2800      	cmp	r0, #0
 800be78:	d1c9      	bne.n	800be0e <DmxParams::callbackFunction(char const*)+0x2a>
 800be7a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800be7e:	6863      	ldr	r3, [r4, #4]
 800be80:	1e91      	subs	r1, r2, #2
 800be82:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800be86:	bf2f      	iteee	cs
 800be88:	22ff      	movcs	r2, #255	; 0xff
 800be8a:	0852      	lsrcc	r2, r2, #1
 800be8c:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800be90:	7362      	strbcc	r2, [r4, #13]
 800be92:	bf32      	itee	cc
 800be94:	f043 0308 	orrcc.w	r3, r3, #8
 800be98:	7362      	strbcs	r2, [r4, #13]
 800be9a:	f023 0308 	biccs.w	r3, r3, #8
 800be9e:	e7b5      	b.n	800be0c <DmxParams::callbackFunction(char const*)+0x28>
 800bea0:	08015764 	stmdaeq	r1, {r2, r5, r6, r8, r9, sl, ip, lr}
 800bea4:	08015788 	stmdaeq	r1, {r3, r7, r8, r9, sl, ip, lr}
 800bea8:	0801577b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, sl, ip, lr}
 800beac:	0801576f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}

0800beb0 <DmxParams::staticCallbackFunction(void*, char const*)>:
 800beb0:	f7ff bf98 	b.w	800bde4 <DmxParams::callbackFunction(char const*)>

0800beb4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>:
 800beb4:	b570      	push	{r4, r5, r6, lr}
 800beb6:	4604      	mov	r4, r0
 800beb8:	4615      	mov	r5, r2
 800beba:	461e      	mov	r6, r3
 800bebc:	b086      	sub	sp, #24
 800bebe:	3004      	adds	r0, #4
 800bec0:	b361      	cbz	r1, 800bf1c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x68>
 800bec2:	220a      	movs	r2, #10
 800bec4:	f006 fea3 	bl	8012c0e <memmove>
 800bec8:	462a      	mov	r2, r5
 800beca:	4633      	mov	r3, r6
 800becc:	4931      	ldr	r1, [pc, #196]	; (800bf94 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe0>)
 800bece:	a803      	add	r0, sp, #12
 800bed0:	f005 ffae 	bl	8011e30 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800bed4:	6863      	ldr	r3, [r4, #4]
 800bed6:	8922      	ldrh	r2, [r4, #8]
 800bed8:	492f      	ldr	r1, [pc, #188]	; (800bf98 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe4>)
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	a803      	add	r0, sp, #12
 800bee0:	f7ff ff20 	bl	800bd24 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800bee4:	6863      	ldr	r3, [r4, #4]
 800bee6:	492d      	ldr	r1, [pc, #180]	; (800bf9c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe8>)
 800bee8:	8962      	ldrh	r2, [r4, #10]
 800beea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800beee:	a803      	add	r0, sp, #12
 800bef0:	f7ff ff18 	bl	800bd24 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800bef4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800bef8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800befc:	42a9      	cmp	r1, r5
 800befe:	d222      	bcs.n	800bf46 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x92>
 800bf00:	9803      	ldr	r0, [sp, #12]
 800bf02:	1a6d      	subs	r5, r5, r1
 800bf04:	4408      	add	r0, r1
 800bf06:	6861      	ldr	r1, [r4, #4]
 800bf08:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800bf0c:	0749      	lsls	r1, r1, #29
 800bf0e:	7b23      	ldrb	r3, [r4, #12]
 800bf10:	d40b      	bmi.n	800bf2a <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x76>
 800bf12:	b95a      	cbnz	r2, 800bf2c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x78>
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	4a22      	ldr	r2, [pc, #136]	; (800bfa0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xec>)
 800bf18:	4b22      	ldr	r3, [pc, #136]	; (800bfa4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 800bf1a:	e00a      	b.n	800bf32 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7e>
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	4601      	mov	r1, r0
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	4618      	mov	r0, r3
 800bf24:	68d2      	ldr	r2, [r2, #12]
 800bf26:	4790      	blx	r2
 800bf28:	e7ce      	b.n	800bec8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x14>
 800bf2a:	b37a      	cbz	r2, 800bf8c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xd8>
 800bf2c:	9300      	str	r3, [sp, #0]
 800bf2e:	4a1e      	ldr	r2, [pc, #120]	; (800bfa8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800bf30:	4b1c      	ldr	r3, [pc, #112]	; (800bfa4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 800bf32:	4629      	mov	r1, r5
 800bf34:	f007 f8cc 	bl	80130d0 <snprintf>
 800bf38:	4285      	cmp	r5, r0
 800bf3a:	bfa2      	ittt	ge
 800bf3c:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800bf40:	18c0      	addge	r0, r0, r3
 800bf42:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800bf46:	7b62      	ldrb	r2, [r4, #13]
 800bf48:	6863      	ldr	r3, [r4, #4]
 800bf4a:	3201      	adds	r2, #1
 800bf4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bf50:	4916      	ldr	r1, [pc, #88]	; (800bfac <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800bf52:	0052      	lsls	r2, r2, #1
 800bf54:	a803      	add	r0, sp, #12
 800bf56:	f7ff fee5 	bl	800bd24 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800bf5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800bf5e:	b17b      	cbz	r3, 800bf80 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xcc>
 800bf60:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800bf64:	9b03      	ldr	r3, [sp, #12]
 800bf66:	4413      	add	r3, r2
 800bf68:	227d      	movs	r2, #125	; 0x7d
 800bf6a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800bf6e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800bf72:	9903      	ldr	r1, [sp, #12]
 800bf74:	54ca      	strb	r2, [r1, r3]
 800bf76:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	f8ad 3012 	strh.w	r3, [sp, #18]
 800bf80:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800bf84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf86:	601a      	str	r2, [r3, #0]
 800bf88:	b006      	add	sp, #24
 800bf8a:	bd70      	pop	{r4, r5, r6, pc}
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	4a08      	ldr	r2, [pc, #32]	; (800bfb0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800bf90:	4b04      	ldr	r3, [pc, #16]	; (800bfa4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 800bf92:	e7ce      	b.n	800bf32 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7e>
 800bf94:	08015791 	stmdaeq	r1, {r0, r4, r7, r8, r9, sl, ip, lr}
 800bf98:	08015764 	stmdaeq	r1, {r2, r5, r6, r8, r9, sl, ip, lr}
 800bf9c:	08015788 	stmdaeq	r1, {r3, r7, r8, r9, sl, ip, lr}
 800bfa0:	080152d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, ip, lr}
 800bfa4:	0801577b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, sl, ip, lr}
 800bfa8:	080152ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, ip, lr}
 800bfac:	0801576f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}
 800bfb0:	080152d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, lr}

0800bfb4 <DmxParams::Save(char*, unsigned int, unsigned int&)>:
 800bfb4:	b513      	push	{r0, r1, r4, lr}
 800bfb6:	6804      	ldr	r4, [r0, #0]
 800bfb8:	b914      	cbnz	r4, 800bfc0 <DmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800bfba:	601c      	str	r4, [r3, #0]
 800bfbc:	b002      	add	sp, #8
 800bfbe:	bd10      	pop	{r4, pc}
 800bfc0:	9300      	str	r3, [sp, #0]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	460a      	mov	r2, r1
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	f7ff ff74 	bl	800beb4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>
 800bfcc:	e7f6      	b.n	800bfbc <DmxParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800bfd0 <DmxParams::Set(Dmx*)>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	6843      	ldr	r3, [r0, #4]
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	07d8      	lsls	r0, r3, #31
 800bfd8:	460d      	mov	r5, r1
 800bfda:	d503      	bpl.n	800bfe4 <DmxParams::Set(Dmx*)+0x14>
 800bfdc:	4628      	mov	r0, r5
 800bfde:	8921      	ldrh	r1, [r4, #8]
 800bfe0:	f000 fc1c 	bl	800c81c <Dmx::SetDmxBreakTime(unsigned int)>
 800bfe4:	6863      	ldr	r3, [r4, #4]
 800bfe6:	0799      	lsls	r1, r3, #30
 800bfe8:	d503      	bpl.n	800bff2 <DmxParams::Set(Dmx*)+0x22>
 800bfea:	4628      	mov	r0, r5
 800bfec:	8961      	ldrh	r1, [r4, #10]
 800bfee:	f000 fc1f 	bl	800c830 <Dmx::SetDmxMabTime(unsigned int)>
 800bff2:	6863      	ldr	r3, [r4, #4]
 800bff4:	075a      	lsls	r2, r3, #29
 800bff6:	d507      	bpl.n	800c008 <DmxParams::Set(Dmx*)+0x38>
 800bff8:	7b21      	ldrb	r1, [r4, #12]
 800bffa:	b111      	cbz	r1, 800c002 <DmxParams::Set(Dmx*)+0x32>
 800bffc:	4b08      	ldr	r3, [pc, #32]	; (800c020 <DmxParams::Set(Dmx*)+0x50>)
 800bffe:	fbb3 f1f1 	udiv	r1, r3, r1
 800c002:	4628      	mov	r0, r5
 800c004:	f000 fbda 	bl	800c7bc <Dmx::SetDmxPeriodTime(unsigned int)>
 800c008:	6863      	ldr	r3, [r4, #4]
 800c00a:	071b      	lsls	r3, r3, #28
 800c00c:	d507      	bpl.n	800c01e <DmxParams::Set(Dmx*)+0x4e>
 800c00e:	7b61      	ldrb	r1, [r4, #13]
 800c010:	4628      	mov	r0, r5
 800c012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c016:	3101      	adds	r1, #1
 800c018:	0049      	lsls	r1, r1, #1
 800c01a:	f000 bc13 	b.w	800c844 <Dmx::SetDmxSlots(unsigned short)>
 800c01e:	bd38      	pop	{r3, r4, r5, pc}
 800c020:	000f4240 	andeq	r4, pc, r0, asr #4

0800c024 <DmxParams::Dump()>:
 800c024:	4770      	bx	lr
	...

0800c028 <Rdm::Receive(unsigned int)>:
 800c028:	4b02      	ldr	r3, [pc, #8]	; (800c034 <Rdm::Receive(unsigned int)+0xc>)
 800c02a:	4601      	mov	r1, r0
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	f000 bca3 	b.w	800c978 <Dmx::RdmReceive(unsigned int)>
 800c032:	bf00      	nop
 800c034:	20001e78 	andcs	r1, r0, r8, ror lr

0800c038 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>:
 800c038:	4b02      	ldr	r3, [pc, #8]	; (800c044 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)+0xc>)
 800c03a:	460a      	mov	r2, r1
 800c03c:	4601      	mov	r1, r0
 800c03e:	6818      	ldr	r0, [r3, #0]
 800c040:	f000 bcac 	b.w	800c99c <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>
 800c044:	20001e78 	andcs	r1, r0, r8, ror lr

0800c048 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800c048:	2300      	movs	r3, #0
 800c04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04e:	4604      	mov	r4, r0
 800c050:	460e      	mov	r6, r1
 800c052:	4617      	mov	r7, r2
 800c054:	4d0b      	ldr	r5, [pc, #44]	; (800c084 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 800c056:	461a      	mov	r2, r3
 800c058:	4601      	mov	r1, r0
 800c05a:	6828      	ldr	r0, [r5, #0]
 800c05c:	f000 fa9c 	bl	800c598 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800c060:	463b      	mov	r3, r7
 800c062:	4632      	mov	r2, r6
 800c064:	4621      	mov	r1, r4
 800c066:	6828      	ldr	r0, [r5, #0]
 800c068:	f000 fc40 	bl	800c8ec <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 800c06c:	2100      	movs	r1, #0
 800c06e:	2004      	movs	r0, #4
 800c070:	f008 fa1c 	bl	80144ac <udelay(unsigned int, unsigned int)>
 800c074:	2301      	movs	r3, #1
 800c076:	4621      	mov	r1, r4
 800c078:	6828      	ldr	r0, [r5, #0]
 800c07a:	461a      	mov	r2, r3
 800c07c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c080:	f000 ba8a 	b.w	800c598 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800c084:	20001e78 	andcs	r1, r0, r8, ror lr

0800c088 <USART2_IRQHandler>:
 800c088:	b510      	push	{r4, lr}
 800c08a:	f3bf 8f5f 	dmb	sy
 800c08e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800c092:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800c096:	f013 0f02 	tst.w	r3, #2
 800c09a:	4b74      	ldr	r3, [pc, #464]	; (800c26c <USART2_IRQHandler+0x1e4>)
 800c09c:	d00e      	beq.n	800c0bc <USART2_IRQHandler+0x34>
 800c09e:	f8d2 1800 	ldr.w	r1, [r2, #2048]	; 0x800
 800c0a2:	f021 0102 	bic.w	r1, r1, #2
 800c0a6:	f8c2 1800 	str.w	r1, [r2, #2048]	; 0x800
 800c0aa:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c0b4:	2202      	movs	r2, #2
 800c0b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c0ba:	bd10      	pop	{r4, pc}
 800c0bc:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800c0c0:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 800c0c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0c8:	290a      	cmp	r1, #10
 800c0ca:	f200 80ca 	bhi.w	800c262 <USART2_IRQHandler+0x1da>
 800c0ce:	e8df f001 	tbb	[pc, r1]
 800c0d2:	c810c806 	ldmdagt	r0, {r1, r2, fp, lr, pc}
 800c0d6:	6d5f482c 	ldclvs	8, cr4, [pc, #-176]	; 800c02c <Rdm::Receive(unsigned int)+0x4>
 800c0da:	00ac9886 	adceq	r9, ip, r6, lsl #17
 800c0de:	2108      	movs	r1, #8
 800c0e0:	701a      	strb	r2, [r3, #0]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800c0e8:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800c0ec:	f3bf 8f5f 	dmb	sy
 800c0f0:	e7e3      	b.n	800c0ba <USART2_IRQHandler+0x32>
 800c0f2:	b11a      	cbz	r2, 800c0fc <USART2_IRQHandler+0x74>
 800c0f4:	2acc      	cmp	r2, #204	; 0xcc
 800c0f6:	d012      	beq.n	800c11e <USART2_IRQHandler+0x96>
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	e00d      	b.n	800c118 <USART2_IRQHandler+0x90>
 800c0fc:	701a      	strb	r2, [r3, #0]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c104:	4a5a      	ldr	r2, [pc, #360]	; (800c270 <USART2_IRQHandler+0x1e8>)
 800c106:	6851      	ldr	r1, [r2, #4]
 800c108:	3101      	adds	r1, #1
 800c10a:	6051      	str	r1, [r2, #4]
 800c10c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c110:	f8d1 1424 	ldr.w	r1, [r1, #1060]	; 0x424
 800c114:	60d1      	str	r1, [r2, #12]
 800c116:	2204      	movs	r2, #4
 800c118:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c11c:	e7e6      	b.n	800c0ec <USART2_IRQHandler+0x64>
 800c11e:	701a      	strb	r2, [r3, #0]
 800c120:	4a54      	ldr	r2, [pc, #336]	; (800c274 <USART2_IRQHandler+0x1ec>)
 800c122:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c126:	2205      	movs	r2, #5
 800c128:	e7f6      	b.n	800c118 <USART2_IRQHandler+0x90>
 800c12a:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800c12e:	b288      	uxth	r0, r1
 800c130:	541a      	strb	r2, [r3, r0]
 800c132:	1c4a      	adds	r2, r1, #1
 800c134:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800c138:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c13c:	d904      	bls.n	800c148 <USART2_IRQHandler+0xc0>
 800c13e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c142:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c146:	e7d7      	b.n	800c0f8 <USART2_IRQHandler+0x70>
 800c148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c14c:	4848      	ldr	r0, [pc, #288]	; (800c270 <USART2_IRQHandler+0x1e8>)
 800c14e:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
 800c152:	68c3      	ldr	r3, [r0, #12]
 800c154:	60c1      	str	r1, [r0, #12]
 800c156:	ebc3 0341 	rsb	r3, r3, r1, lsl #1
 800c15a:	3304      	adds	r3, #4
 800c15c:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 800c160:	e7c4      	b.n	800c0ec <USART2_IRQHandler+0x64>
 800c162:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 800c166:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 800c16a:	541a      	strb	r2, [r3, r0]
 800c16c:	1c41      	adds	r1, r0, #1
 800c16e:	3817      	subs	r0, #23
 800c170:	b289      	uxth	r1, r1
 800c172:	4422      	add	r2, r4
 800c174:	28e7      	cmp	r0, #231	; 0xe7
 800c176:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800c17a:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800c17e:	d804      	bhi.n	800c18a <USART2_IRQHandler+0x102>
 800c180:	789a      	ldrb	r2, [r3, #2]
 800c182:	428a      	cmp	r2, r1
 800c184:	d101      	bne.n	800c18a <USART2_IRQHandler+0x102>
 800c186:	2206      	movs	r2, #6
 800c188:	e7c6      	b.n	800c118 <USART2_IRQHandler+0x90>
 800c18a:	29ff      	cmp	r1, #255	; 0xff
 800c18c:	d9ae      	bls.n	800c0ec <USART2_IRQHandler+0x64>
 800c18e:	e7b3      	b.n	800c0f8 <USART2_IRQHandler+0x70>
 800c190:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800c194:	545a      	strb	r2, [r3, r1]
 800c196:	3101      	adds	r1, #1
 800c198:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800c19c:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 800c1a0:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 800c1a4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800c1a8:	2207      	movs	r2, #7
 800c1aa:	e7b5      	b.n	800c118 <USART2_IRQHandler+0x90>
 800c1ac:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 800c1b0:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800c1b4:	545a      	strb	r2, [r3, r1]
 800c1b6:	1a82      	subs	r2, r0, r2
 800c1b8:	b292      	uxth	r2, r2
 800c1ba:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800c1be:	b912      	cbnz	r2, 800c1c6 <USART2_IRQHandler+0x13e>
 800c1c0:	785a      	ldrb	r2, [r3, #1]
 800c1c2:	2a01      	cmp	r2, #1
 800c1c4:	d001      	beq.n	800c1ca <USART2_IRQHandler+0x142>
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	e7bb      	b.n	800c142 <USART2_IRQHandler+0xba>
 800c1ca:	3101      	adds	r1, #1
 800c1cc:	4a2a      	ldr	r2, [pc, #168]	; (800c278 <USART2_IRQHandler+0x1f0>)
 800c1ce:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800c1d2:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800c1d6:	6851      	ldr	r1, [r2, #4]
 800c1d8:	4a28      	ldr	r2, [pc, #160]	; (800c27c <USART2_IRQHandler+0x1f4>)
 800c1da:	6011      	str	r1, [r2, #0]
 800c1dc:	e78c      	b.n	800c0f8 <USART2_IRQHandler+0x70>
 800c1de:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800c1e2:	2aaa      	cmp	r2, #170	; 0xaa
 800c1e4:	545a      	strb	r2, [r3, r1]
 800c1e6:	f101 0101 	add.w	r1, r1, #1
 800c1ea:	b289      	uxth	r1, r1
 800c1ec:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800c1f0:	d002      	beq.n	800c1f8 <USART2_IRQHandler+0x170>
 800c1f2:	2909      	cmp	r1, #9
 800c1f4:	f47f af7a 	bne.w	800c0ec <USART2_IRQHandler+0x64>
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800c1fe:	2209      	movs	r2, #9
 800c200:	e78a      	b.n	800c118 <USART2_IRQHandler+0x90>
 800c202:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800c206:	545a      	strb	r2, [r3, r1]
 800c208:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 800c20c:	3101      	adds	r1, #1
 800c20e:	3201      	adds	r2, #1
 800c210:	b292      	uxth	r2, r2
 800c212:	2a0c      	cmp	r2, #12
 800c214:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800c218:	d002      	beq.n	800c220 <USART2_IRQHandler+0x198>
 800c21a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800c21e:	e765      	b.n	800c0ec <USART2_IRQHandler+0x64>
 800c220:	2200      	movs	r2, #0
 800c222:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800c226:	220a      	movs	r2, #10
 800c228:	e776      	b.n	800c118 <USART2_IRQHandler+0x90>
 800c22a:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800c22e:	545a      	strb	r2, [r3, r1]
 800c230:	1c4a      	adds	r2, r1, #1
 800c232:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800c236:	b292      	uxth	r2, r2
 800c238:	3101      	adds	r1, #1
 800c23a:	b289      	uxth	r1, r1
 800c23c:	2904      	cmp	r1, #4
 800c23e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800c242:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 800c246:	f47f af51 	bne.w	800c0ec <USART2_IRQHandler+0x64>
 800c24a:	2100      	movs	r1, #0
 800c24c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c250:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800c254:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800c258:	4b07      	ldr	r3, [pc, #28]	; (800c278 <USART2_IRQHandler+0x1f0>)
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	4b07      	ldr	r3, [pc, #28]	; (800c27c <USART2_IRQHandler+0x1f4>)
 800c25e:	601a      	str	r2, [r3, #0]
 800c260:	e744      	b.n	800c0ec <USART2_IRQHandler+0x64>
 800c262:	2200      	movs	r2, #0
 800c264:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c268:	e756      	b.n	800c118 <USART2_IRQHandler+0x90>
 800c26a:	bf00      	nop
 800c26c:	20001a4c 	andcs	r1, r0, ip, asr #20
 800c270:	20001e68 	andcs	r1, r0, r8, ror #28
 800c274:	00cc0001 	sbceq	r0, ip, r1
 800c278:	e0001000 	and	r1, r0, r0
 800c27c:	20001e7c 	andcs	r1, r0, ip, ror lr

0800c280 <TIMER1_IRQHandler>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	f3bf 8f5f 	dmb	sy
 800c286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c28a:	691c      	ldr	r4, [r3, #16]
 800c28c:	4e1f      	ldr	r6, [pc, #124]	; (800c30c <TIMER1_IRQHandler+0x8c>)
 800c28e:	07a7      	lsls	r7, r4, #30
 800c290:	8835      	ldrh	r5, [r6, #0]
 800c292:	d518      	bpl.n	800c2c6 <TIMER1_IRQHandler+0x46>
 800c294:	4f1e      	ldr	r7, [pc, #120]	; (800c310 <TIMER1_IRQHandler+0x90>)
 800c296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c29a:	2203      	movs	r2, #3
 800c29c:	2110      	movs	r1, #16
 800c29e:	4638      	mov	r0, r7
 800c2a0:	f007 fa12 	bl	80136c8 <gpio_init>
 800c2a4:	07ed      	lsls	r5, r5, #31
 800c2a6:	d506      	bpl.n	800c2b6 <TIMER1_IRQHandler+0x36>
 800c2a8:	8833      	ldrh	r3, [r6, #0]
 800c2aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2ae:	8033      	strh	r3, [r6, #0]
 800c2b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2b4:	617b      	str	r3, [r7, #20]
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c2bc:	f007 fcd7 	bl	8013c6e <timer_interrupt_flag_clear>
 800c2c0:	f3bf 8f5f 	dmb	sy
 800c2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2c6:	0760      	lsls	r0, r4, #29
 800c2c8:	d509      	bpl.n	800c2de <TIMER1_IRQHandler+0x5e>
 800c2ca:	05e9      	lsls	r1, r5, #23
 800c2cc:	d5f3      	bpl.n	800c2b6 <TIMER1_IRQHandler+0x36>
 800c2ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2d2:	2203      	movs	r2, #3
 800c2d4:	2118      	movs	r1, #24
 800c2d6:	480e      	ldr	r0, [pc, #56]	; (800c310 <TIMER1_IRQHandler+0x90>)
 800c2d8:	f007 f9f6 	bl	80136c8 <gpio_init>
 800c2dc:	e7eb      	b.n	800c2b6 <TIMER1_IRQHandler+0x36>
 800c2de:	0722      	lsls	r2, r4, #28
 800c2e0:	d5e9      	bpl.n	800c2b6 <TIMER1_IRQHandler+0x36>
 800c2e2:	05eb      	lsls	r3, r5, #23
 800c2e4:	d5e7      	bpl.n	800c2b6 <TIMER1_IRQHandler+0x36>
 800c2e6:	4b0b      	ldr	r3, [pc, #44]	; (800c314 <TIMER1_IRQHandler+0x94>)
 800c2e8:	2180      	movs	r1, #128	; 0x80
 800c2ea:	69da      	ldr	r2, [r3, #28]
 800c2ec:	480a      	ldr	r0, [pc, #40]	; (800c318 <TIMER1_IRQHandler+0x98>)
 800c2ee:	f022 0201 	bic.w	r2, r2, #1
 800c2f2:	61da      	str	r2, [r3, #28]
 800c2f4:	4a09      	ldr	r2, [pc, #36]	; (800c31c <TIMER1_IRQHandler+0x9c>)
 800c2f6:	629a      	str	r2, [r3, #40]	; 0x28
 800c2f8:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 800c2fc:	621a      	str	r2, [r3, #32]
 800c2fe:	69da      	ldr	r2, [r3, #28]
 800c300:	f042 0201 	orr.w	r2, r2, #1
 800c304:	61da      	str	r2, [r3, #28]
 800c306:	f007 fd51 	bl	8013dac <usart_dma_transmit_config>
 800c30a:	e7d4      	b.n	800c2b6 <TIMER1_IRQHandler+0x36>
 800c30c:	20001e64 	andcs	r1, r0, r4, ror #28
 800c310:	40011000 	andmi	r1, r1, r0
 800c314:	40020000 	andmi	r0, r2, r0
 800c318:	40004800 	andmi	r4, r0, r0, lsl #16
 800c31c:	20001c5c 	andcs	r1, r0, ip, asr ip

0800c320 <TIMER2_IRQHandler>:
 800c320:	b508      	push	{r3, lr}
 800c322:	f3bf 8f5f 	dmb	sy
 800c326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c32a:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 800c32e:	078b      	lsls	r3, r1, #30
 800c330:	d50d      	bpl.n	800c34e <TIMER2_IRQHandler+0x2e>
 800c332:	4b0a      	ldr	r3, [pc, #40]	; (800c35c <TIMER2_IRQHandler+0x3c>)
 800c334:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800c338:	2a04      	cmp	r2, #4
 800c33a:	d108      	bne.n	800c34e <TIMER2_IRQHandler+0x2e>
 800c33c:	2200      	movs	r2, #0
 800c33e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c342:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c34a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c34e:	4804      	ldr	r0, [pc, #16]	; (800c360 <TIMER2_IRQHandler+0x40>)
 800c350:	f007 fc8d 	bl	8013c6e <timer_interrupt_flag_clear>
 800c354:	f3bf 8f5f 	dmb	sy
 800c358:	bd08      	pop	{r3, pc}
 800c35a:	bf00      	nop
 800c35c:	20001a4c 	andcs	r1, r0, ip, asr #20
 800c360:	40000400 	andmi	r0, r0, r0, lsl #8

0800c364 <TIMER3_IRQHandler>:
 800c364:	b508      	push	{r3, lr}
 800c366:	f3bf 8f5f 	dmb	sy
 800c36a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c36e:	4804      	ldr	r0, [pc, #16]	; (800c380 <TIMER3_IRQHandler+0x1c>)
 800c370:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 800c374:	f007 fc7b 	bl	8013c6e <timer_interrupt_flag_clear>
 800c378:	f3bf 8f5f 	dmb	sy
 800c37c:	bd08      	pop	{r3, pc}
 800c37e:	bf00      	nop
 800c380:	40000800 	andmi	r0, r0, r0, lsl #16

0800c384 <TIMER6_IRQHandler>:
 800c384:	b508      	push	{r3, lr}
 800c386:	f3bf 8f5f 	dmb	sy
 800c38a:	4b07      	ldr	r3, [pc, #28]	; (800c3a8 <TIMER6_IRQHandler+0x24>)
 800c38c:	4807      	ldr	r0, [pc, #28]	; (800c3ac <TIMER6_IRQHandler+0x28>)
 800c38e:	685a      	ldr	r2, [r3, #4]
 800c390:	6899      	ldr	r1, [r3, #8]
 800c392:	1a52      	subs	r2, r2, r1
 800c394:	601a      	str	r2, [r3, #0]
 800c396:	685a      	ldr	r2, [r3, #4]
 800c398:	2101      	movs	r1, #1
 800c39a:	609a      	str	r2, [r3, #8]
 800c39c:	f007 fc67 	bl	8013c6e <timer_interrupt_flag_clear>
 800c3a0:	f3bf 8f5f 	dmb	sy
 800c3a4:	bd08      	pop	{r3, pc}
 800c3a6:	bf00      	nop
 800c3a8:	20001e68 	andcs	r1, r0, r8, ror #28
 800c3ac:	40001400 	andmi	r1, r0, r0, lsl #8

0800c3b0 <Dmx::ClearData(unsigned int)>:
 800c3b0:	f44f 7301 	mov.w	r3, #516	; 0x204
 800c3b4:	b510      	push	{r4, lr}
 800c3b6:	2400      	movs	r4, #0
 800c3b8:	4a08      	ldr	r2, [pc, #32]	; (800c3dc <Dmx::ClearData(unsigned int)+0x2c>)
 800c3ba:	fb03 2301 	mla	r3, r3, r1, r2
 800c3be:	f203 2002 	addw	r0, r3, #514	; 0x202
 800c3c2:	f823 4b02 	strh.w	r4, [r3], #2
 800c3c6:	4283      	cmp	r3, r0
 800c3c8:	d1fb      	bne.n	800c3c2 <Dmx::ClearData(unsigned int)+0x12>
 800c3ca:	f44f 7301 	mov.w	r3, #516	; 0x204
 800c3ce:	fb03 2201 	mla	r2, r3, r1, r2
 800c3d2:	f240 2301 	movw	r3, #513	; 0x201
 800c3d6:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 800c3da:	bd10      	pop	{r4, pc}
 800c3dc:	20001c5c 	andcs	r1, r0, ip, asr ip

0800c3e0 <Dmx::StartData(unsigned int, unsigned int)>:
 800c3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800c3e6:	6943      	ldr	r3, [r0, #20]
 800c3e8:	460c      	mov	r4, r1
 800c3ea:	4615      	mov	r5, r2
 800c3ec:	b085      	sub	sp, #20
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d16a      	bne.n	800c4c8 <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 800c3f2:	4e48      	ldr	r6, [pc, #288]	; (800c514 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 800c3f4:	8834      	ldrh	r4, [r6, #0]
 800c3f6:	2c00      	cmp	r4, #0
 800c3f8:	d15b      	bne.n	800c4b2 <Dmx::StartData(unsigned int, unsigned int)+0xd2>
 800c3fa:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800c3fe:	f007 f9f3 	bl	80137e8 <rcu_periph_clock_enable>
 800c402:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c406:	f007 fb3b 	bl	8013a80 <timer_deinit>
 800c40a:	236b      	movs	r3, #107	; 0x6b
 800c40c:	9300      	str	r3, [sp, #0]
 800c40e:	4b42      	ldr	r3, [pc, #264]	; (800c518 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 800c410:	4669      	mov	r1, sp
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c418:	9302      	str	r3, [sp, #8]
 800c41a:	f8ad 4004 	strh.w	r4, [sp, #4]
 800c41e:	f8ad 400c 	strh.w	r4, [sp, #12]
 800c422:	f88d 400e 	strb.w	r4, [sp, #14]
 800c426:	f007 fb8d 	bl	8013b44 <timer_init>
 800c42a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c42e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c432:	f007 fc1f 	bl	8013c74 <timer_flag_clear>
 800c436:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c43a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c43e:	f007 fc16 	bl	8013c6e <timer_interrupt_flag_clear>
 800c442:	2210      	movs	r2, #16
 800c444:	4621      	mov	r1, r4
 800c446:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c44a:	f007 fbd8 	bl	8013bfe <timer_channel_output_mode_config>
 800c44e:	2210      	movs	r2, #16
 800c450:	2101      	movs	r1, #1
 800c452:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c456:	f007 fbd2 	bl	8013bfe <timer_channel_output_mode_config>
 800c45a:	4f30      	ldr	r7, [pc, #192]	; (800c51c <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 800c45c:	2210      	movs	r2, #16
 800c45e:	2102      	movs	r1, #2
 800c460:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c464:	f007 fbcb 	bl	8013bfe <timer_channel_output_mode_config>
 800c468:	4622      	mov	r2, r4
 800c46a:	4621      	mov	r1, r4
 800c46c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c470:	f007 fbeb 	bl	8013c4a <timer_channel_output_pulse_value_config>
 800c474:	2101      	movs	r1, #1
 800c476:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c47a:	883a      	ldrh	r2, [r7, #0]
 800c47c:	f007 fbe5 	bl	8013c4a <timer_channel_output_pulse_value_config>
 800c480:	4b27      	ldr	r3, [pc, #156]	; (800c520 <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 800c482:	683a      	ldr	r2, [r7, #0]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2102      	movs	r1, #2
 800c488:	441a      	add	r2, r3
 800c48a:	b292      	uxth	r2, r2
 800c48c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c490:	f007 fbdb 	bl	8013c4a <timer_channel_output_pulse_value_config>
 800c494:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c498:	210e      	movs	r1, #14
 800c49a:	f007 fbe4 	bl	8013c66 <timer_interrupt_enable>
 800c49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4a2:	4b20      	ldr	r3, [pc, #128]	; (800c524 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 800c4a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c4a8:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 800c4ac:	601a      	str	r2, [r3, #0]
 800c4ae:	f007 fba1 	bl	8013bf4 <timer_enable>
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	8831      	ldrh	r1, [r6, #0]
 800c4b6:	fa02 f305 	lsl.w	r3, r2, r5
 800c4ba:	430b      	orrs	r3, r1
 800c4bc:	8033      	strh	r3, [r6, #0]
 800c4be:	4b1a      	ldr	r3, [pc, #104]	; (800c528 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800c4c0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4c4:	b005      	add	sp, #20
 800c4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c8:	f44f 7204 	mov.w	r2, #528	; 0x210
 800c4cc:	4b17      	ldr	r3, [pc, #92]	; (800c52c <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 800c4ce:	fb02 3305 	mla	r3, r2, r5, r3
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c4d8:	2107      	movs	r1, #7
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f007 fc6c 	bl	8013db8 <usart_flag_get>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d0f9      	beq.n	800c4d8 <Dmx::StartData(unsigned int, unsigned int)+0xf8>
 800c4e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f007 fc86 	bl	8013dfa <usart_interrupt_flag_clear>
 800c4ee:	f240 3105 	movw	r1, #773	; 0x305
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f007 fc68 	bl	8013dc8 <usart_interrupt_enable>
 800c4f8:	2202      	movs	r2, #2
 800c4fa:	4b0b      	ldr	r3, [pc, #44]	; (800c528 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800c4fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c500:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c504:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800c508:	f043 0302 	orr.w	r3, r3, #2
 800c50c:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800c510:	e7d8      	b.n	800c4c4 <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 800c512:	bf00      	nop
 800c514:	20001e64 	andcs	r1, r0, r4, ror #28
 800c518:	20000008 	andcs	r0, r0, r8
 800c51c:	20000010 	andcs	r0, r0, r0, lsl r0
 800c520:	2000000c 	andcs	r0, r0, ip
 800c524:	e000e100 	and	lr, r0, r0, lsl #2
 800c528:	20001e60 	andcs	r1, r0, r0, ror #28
 800c52c:	20001a4c 	andcs	r1, r0, ip, asr #20

0800c530 <Dmx::StopData(unsigned int, unsigned int)>:
 800c530:	b538      	push	{r3, r4, r5, lr}
 800c532:	4d16      	ldr	r5, [pc, #88]	; (800c58c <Dmx::StopData(unsigned int, unsigned int)+0x5c>)
 800c534:	4614      	mov	r4, r2
 800c536:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800c53a:	4603      	mov	r3, r0
 800c53c:	4608      	mov	r0, r1
 800c53e:	b17a      	cbz	r2, 800c560 <Dmx::StopData(unsigned int, unsigned int)+0x30>
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	b973      	cbnz	r3, 800c562 <Dmx::StopData(unsigned int, unsigned int)+0x32>
 800c544:	2201      	movs	r2, #1
 800c546:	4912      	ldr	r1, [pc, #72]	; (800c590 <Dmx::StopData(unsigned int, unsigned int)+0x60>)
 800c548:	f104 0308 	add.w	r3, r4, #8
 800c54c:	fa02 f303 	lsl.w	r3, r2, r3
 800c550:	40a2      	lsls	r2, r4
 800c552:	4313      	orrs	r3, r2
 800c554:	880a      	ldrh	r2, [r1, #0]
 800c556:	4013      	ands	r3, r2
 800c558:	800b      	strh	r3, [r1, #0]
 800c55a:	2300      	movs	r3, #0
 800c55c:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800c560:	bd38      	pop	{r3, r4, r5, pc}
 800c562:	f240 3105 	movw	r1, #773	; 0x305
 800c566:	f007 fc3b 	bl	8013de0 <usart_interrupt_disable>
 800c56a:	f44f 7204 	mov.w	r2, #528	; 0x210
 800c56e:	4b09      	ldr	r3, [pc, #36]	; (800c594 <Dmx::StopData(unsigned int, unsigned int)+0x64>)
 800c570:	fb02 3304 	mla	r3, r2, r4, r3
 800c574:	2200      	movs	r2, #0
 800c576:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c57a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c57e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800c582:	f023 0302 	bic.w	r3, r3, #2
 800c586:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800c58a:	e7e6      	b.n	800c55a <Dmx::StopData(unsigned int, unsigned int)+0x2a>
 800c58c:	20001e60 	andcs	r1, r0, r0, ror #28
 800c590:	20001e64 	andcs	r1, r0, r4, ror #28
 800c594:	20001a4c 	andcs	r1, r0, ip, asr #20

0800c598 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 800c598:	b570      	push	{r4, r5, r6, lr}
 800c59a:	461d      	mov	r5, r3
 800c59c:	6943      	ldr	r3, [r0, #20]
 800c59e:	4606      	mov	r6, r0
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	4614      	mov	r4, r2
 800c5a4:	d014      	beq.n	800c5d0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 800c5a6:	6142      	str	r2, [r0, #20]
 800c5a8:	4910      	ldr	r1, [pc, #64]	; (800c5ec <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f7ff ffc0 	bl	800c530 <Dmx::StopData(unsigned int, unsigned int)>
 800c5b0:	b934      	cbnz	r4, 800c5c0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 800c5b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5b6:	4b0e      	ldr	r3, [pc, #56]	; (800c5f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800c5b8:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800c5bc:	b94d      	cbnz	r5, 800c5d2 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 800c5be:	bd70      	pop	{r4, r5, r6, pc}
 800c5c0:	2c01      	cmp	r4, #1
 800c5c2:	d1fb      	bne.n	800c5bc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800c5c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5c8:	4b09      	ldr	r3, [pc, #36]	; (800c5f0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800c5ca:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800c5ce:	e7f5      	b.n	800c5bc <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800c5d0:	b135      	cbz	r5, 800c5e0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5d8:	2200      	movs	r2, #0
 800c5da:	4904      	ldr	r1, [pc, #16]	; (800c5ec <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800c5dc:	f7ff bf00 	b.w	800c3e0 <Dmx::StartData(unsigned int, unsigned int)>
 800c5e0:	462a      	mov	r2, r5
 800c5e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5e6:	4901      	ldr	r1, [pc, #4]	; (800c5ec <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800c5e8:	f7ff bfa2 	b.w	800c530 <Dmx::StopData(unsigned int, unsigned int)>
 800c5ec:	40004800 	andmi	r4, r0, r0, lsl #16
 800c5f0:	40010000 	andmi	r0, r1, r0

0800c5f4 <Dmx::Dmx()>:
 800c5f4:	225c      	movs	r2, #92	; 0x5c
 800c5f6:	230c      	movs	r3, #12
 800c5f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5fc:	e9c0 2300 	strd	r2, r3, [r0]
 800c600:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800c604:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800c608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c60c:	2400      	movs	r4, #0
 800c60e:	4605      	mov	r5, r0
 800c610:	8203      	strh	r3, [r0, #16]
 800c612:	4b5f      	ldr	r3, [pc, #380]	; (800c790 <Dmx::Dmx()+0x19c>)
 800c614:	b08b      	sub	sp, #44	; 0x2c
 800c616:	6018      	str	r0, [r3, #0]
 800c618:	4b5e      	ldr	r3, [pc, #376]	; (800c794 <Dmx::Dmx()+0x1a0>)
 800c61a:	2203      	movs	r2, #3
 800c61c:	801c      	strh	r4, [r3, #0]
 800c61e:	2110      	movs	r1, #16
 800c620:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c624:	485c      	ldr	r0, [pc, #368]	; (800c798 <Dmx::Dmx()+0x1a4>)
 800c626:	f007 f84f 	bl	80136c8 <gpio_init>
 800c62a:	4621      	mov	r1, r4
 800c62c:	4628      	mov	r0, r5
 800c62e:	f7ff febf 	bl	800c3b0 <Dmx::ClearData(unsigned int)>
 800c632:	4b5a      	ldr	r3, [pc, #360]	; (800c79c <Dmx::Dmx()+0x1a8>)
 800c634:	2201      	movs	r2, #1
 800c636:	4628      	mov	r0, r5
 800c638:	601c      	str	r4, [r3, #0]
 800c63a:	4623      	mov	r3, r4
 800c63c:	f7ff ffac 	bl	800c598 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800c640:	4b57      	ldr	r3, [pc, #348]	; (800c7a0 <Dmx::Dmx()+0x1ac>)
 800c642:	4e58      	ldr	r6, [pc, #352]	; (800c7a4 <Dmx::Dmx()+0x1b0>)
 800c644:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 800c648:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800c64c:	f007 f8cc 	bl	80137e8 <rcu_periph_clock_enable>
 800c650:	f240 5001 	movw	r0, #1281	; 0x501
 800c654:	f007 f8c8 	bl	80137e8 <rcu_periph_clock_enable>
 800c658:	4630      	mov	r0, r6
 800c65a:	2101      	movs	r1, #1
 800c65c:	f006 ff30 	bl	80134c0 <dma_deinit>
 800c660:	4b51      	ldr	r3, [pc, #324]	; (800c7a8 <Dmx::Dmx()+0x1b4>)
 800c662:	2701      	movs	r7, #1
 800c664:	e9cd 3405 	strd	r3, r4, [sp, #20]
 800c668:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 800c66c:	aa03      	add	r2, sp, #12
 800c66e:	9307      	str	r3, [sp, #28]
 800c670:	4b4e      	ldr	r3, [pc, #312]	; (800c7ac <Dmx::Dmx()+0x1b8>)
 800c672:	4639      	mov	r1, r7
 800c674:	e9cd 3403 	strd	r3, r4, [sp, #12]
 800c678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c67c:	9308      	str	r3, [sp, #32]
 800c67e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c682:	4630      	mov	r0, r6
 800c684:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800c688:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800c68c:	f006 ff34 	bl	80134f8 <dma_init>
 800c690:	4639      	mov	r1, r7
 800c692:	4630      	mov	r0, r6
 800c694:	f006 ff6a 	bl	801356c <dma_circulation_disable>
 800c698:	4639      	mov	r1, r7
 800c69a:	4630      	mov	r0, r6
 800c69c:	f006 ff76 	bl	801358c <dma_memory_to_memory_disable>
 800c6a0:	f5a6 36fe 	sub.w	r6, r6, #130048	; 0x1fc00
 800c6a4:	f240 7001 	movw	r0, #1793	; 0x701
 800c6a8:	f007 f89e 	bl	80137e8 <rcu_periph_clock_enable>
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	f007 f9e7 	bl	8013a80 <timer_deinit>
 800c6b2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800c6b6:	236b      	movs	r3, #107	; 0x6b
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	a903      	add	r1, sp, #12
 800c6bc:	9303      	str	r3, [sp, #12]
 800c6be:	f8ad 4010 	strh.w	r4, [sp, #16]
 800c6c2:	f8cd 9014 	str.w	r9, [sp, #20]
 800c6c6:	f8ad 4018 	strh.w	r4, [sp, #24]
 800c6ca:	f88d 401a 	strb.w	r4, [sp, #26]
 800c6ce:	f007 fa39 	bl	8013b44 <timer_init>
 800c6d2:	4649      	mov	r1, r9
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	f007 facd 	bl	8013c74 <timer_flag_clear>
 800c6da:	4649      	mov	r1, r9
 800c6dc:	4630      	mov	r0, r6
 800c6de:	f007 fac6 	bl	8013c6e <timer_interrupt_flag_clear>
 800c6e2:	4621      	mov	r1, r4
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	2210      	movs	r2, #16
 800c6e8:	f007 fa89 	bl	8013bfe <timer_channel_output_mode_config>
 800c6ec:	4639      	mov	r1, r7
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	2210      	movs	r2, #16
 800c6f2:	f007 fa84 	bl	8013bfe <timer_channel_output_mode_config>
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	2210      	movs	r2, #16
 800c6fa:	2102      	movs	r1, #2
 800c6fc:	f007 fa7f 	bl	8013bfe <timer_channel_output_mode_config>
 800c700:	2210      	movs	r2, #16
 800c702:	2103      	movs	r1, #3
 800c704:	4630      	mov	r0, r6
 800c706:	f007 fa7a 	bl	8013bfe <timer_channel_output_mode_config>
 800c70a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800c70e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800c7b0 <Dmx::Dmx()+0x1bc>
 800c712:	4630      	mov	r0, r6
 800c714:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 800c718:	f8c8 3000 	str.w	r3, [r8]
 800c71c:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800c720:	f007 fa68 	bl	8013bf4 <timer_enable>
 800c724:	f240 7005 	movw	r0, #1797	; 0x705
 800c728:	f007 f85e 	bl	80137e8 <rcu_periph_clock_enable>
 800c72c:	4630      	mov	r0, r6
 800c72e:	f007 f9a7 	bl	8013a80 <timer_deinit>
 800c732:	f642 232f 	movw	r3, #10799	; 0x2a2f
 800c736:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c73a:	f242 7310 	movw	r3, #10000	; 0x2710
 800c73e:	4630      	mov	r0, r6
 800c740:	a903      	add	r1, sp, #12
 800c742:	9305      	str	r3, [sp, #20]
 800c744:	f007 f9fe 	bl	8013b44 <timer_init>
 800c748:	4649      	mov	r1, r9
 800c74a:	4630      	mov	r0, r6
 800c74c:	f007 fa92 	bl	8013c74 <timer_flag_clear>
 800c750:	4649      	mov	r1, r9
 800c752:	4630      	mov	r0, r6
 800c754:	f007 fa8b 	bl	8013c6e <timer_interrupt_flag_clear>
 800c758:	4639      	mov	r1, r7
 800c75a:	4630      	mov	r0, r6
 800c75c:	f007 fa83 	bl	8013c66 <timer_interrupt_enable>
 800c760:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c764:	4630      	mov	r0, r6
 800c766:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 800c76a:	f8c8 3004 	str.w	r3, [r8, #4]
 800c76e:	f007 fa41 	bl	8013bf4 <timer_enable>
 800c772:	2302      	movs	r3, #2
 800c774:	2208      	movs	r2, #8
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	490e      	ldr	r1, [pc, #56]	; (800c7b4 <Dmx::Dmx()+0x1c0>)
 800c77a:	4623      	mov	r3, r4
 800c77c:	480e      	ldr	r0, [pc, #56]	; (800c7b8 <Dmx::Dmx()+0x1c4>)
 800c77e:	f007 fdb1 	bl	80142e4 <gd32_uart_begin>
 800c782:	2380      	movs	r3, #128	; 0x80
 800c784:	4628      	mov	r0, r5
 800c786:	f8c8 3004 	str.w	r3, [r8, #4]
 800c78a:	b00b      	add	sp, #44	; 0x2c
 800c78c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c790:	20001e78 	andcs	r1, r0, r8, ror lr
 800c794:	20001e64 	andcs	r1, r0, r4, ror #28
 800c798:	40010c00 	andmi	r0, r1, r0, lsl #24
 800c79c:	20001e60 	andcs	r1, r0, r0, ror #28
 800c7a0:	20001a4c 	andcs	r1, r0, ip, asr #20
 800c7a4:	40020000 	andmi	r0, r2, r0
 800c7a8:	20001c5c 	andcs	r1, r0, ip, asr ip
 800c7ac:	40004804 	andmi	r4, r0, r4, lsl #16
 800c7b0:	e000e100 	and	lr, r0, r0, lsl #2
 800c7b4:	0003d090 	muleq	r3, r0, r0
 800c7b8:	40004800 	andmi	r4, r0, r0, lsl #16

0800c7bc <Dmx::SetDmxPeriodTime(unsigned int)>:
 800c7bc:	4b13      	ldr	r3, [pc, #76]	; (800c80c <Dmx::SetDmxPeriodTime(unsigned int)+0x50>)
 800c7be:	b570      	push	{r4, r5, r6, lr}
 800c7c0:	60c1      	str	r1, [r0, #12]
 800c7c2:	f8b3 0202 	ldrh.w	r0, [r3, #514]	; 0x202
 800c7c6:	232c      	movs	r3, #44	; 0x2c
 800c7c8:	f64f 76d3 	movw	r6, #65491	; 0xffd3
 800c7cc:	4d10      	ldr	r5, [pc, #64]	; (800c810 <Dmx::SetDmxPeriodTime(unsigned int)+0x54>)
 800c7ce:	4c11      	ldr	r4, [pc, #68]	; (800c814 <Dmx::SetDmxPeriodTime(unsigned int)+0x58>)
 800c7d0:	4358      	muls	r0, r3
 800c7d2:	682a      	ldr	r2, [r5, #0]
 800c7d4:	6823      	ldr	r3, [r4, #0]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	4403      	add	r3, r0
 800c7da:	42b3      	cmp	r3, r6
 800c7dc:	d908      	bls.n	800c7f0 <Dmx::SetDmxPeriodTime(unsigned int)+0x34>
 800c7de:	2ab0      	cmp	r2, #176	; 0xb0
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	bf28      	it	cs
 800c7e4:	23b0      	movcs	r3, #176	; 0xb0
 800c7e6:	220c      	movs	r2, #12
 800c7e8:	602b      	str	r3, [r5, #0]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	6022      	str	r2, [r4, #0]
 800c7ee:	4403      	add	r3, r0
 800c7f0:	4a09      	ldr	r2, [pc, #36]	; (800c818 <Dmx::SetDmxPeriodTime(unsigned int)+0x5c>)
 800c7f2:	b109      	cbz	r1, 800c7f8 <Dmx::SetDmxPeriodTime(unsigned int)+0x3c>
 800c7f4:	428b      	cmp	r3, r1
 800c7f6:	d907      	bls.n	800c808 <Dmx::SetDmxPeriodTime(unsigned int)+0x4c>
 800c7f8:	f240 41b4 	movw	r1, #1204	; 0x4b4
 800c7fc:	332c      	adds	r3, #44	; 0x2c
 800c7fe:	428b      	cmp	r3, r1
 800c800:	bf2c      	ite	cs
 800c802:	6013      	strcs	r3, [r2, #0]
 800c804:	6011      	strcc	r1, [r2, #0]
 800c806:	e000      	b.n	800c80a <Dmx::SetDmxPeriodTime(unsigned int)+0x4e>
 800c808:	6011      	str	r1, [r2, #0]
 800c80a:	bd70      	pop	{r4, r5, r6, pc}
 800c80c:	20001c5c 	andcs	r1, r0, ip, asr ip
 800c810:	20000010 	andcs	r0, r0, r0, lsl r0
 800c814:	2000000c 	andcs	r0, r0, ip
 800c818:	20000008 	andcs	r0, r0, r8

0800c81c <Dmx::SetDmxBreakTime(unsigned int)>:
 800c81c:	295c      	cmp	r1, #92	; 0x5c
 800c81e:	bf38      	it	cc
 800c820:	215c      	movcc	r1, #92	; 0x5c
 800c822:	4b02      	ldr	r3, [pc, #8]	; (800c82c <Dmx::SetDmxBreakTime(unsigned int)+0x10>)
 800c824:	6019      	str	r1, [r3, #0]
 800c826:	68c1      	ldr	r1, [r0, #12]
 800c828:	f7ff bfc8 	b.w	800c7bc <Dmx::SetDmxPeriodTime(unsigned int)>
 800c82c:	20000010 	andcs	r0, r0, r0, lsl r0

0800c830 <Dmx::SetDmxMabTime(unsigned int)>:
 800c830:	290c      	cmp	r1, #12
 800c832:	bf38      	it	cc
 800c834:	210c      	movcc	r1, #12
 800c836:	4b02      	ldr	r3, [pc, #8]	; (800c840 <Dmx::SetDmxMabTime(unsigned int)+0x10>)
 800c838:	6019      	str	r1, [r3, #0]
 800c83a:	68c1      	ldr	r1, [r0, #12]
 800c83c:	f7ff bfbe 	b.w	800c7bc <Dmx::SetDmxPeriodTime(unsigned int)>
 800c840:	2000000c 	andcs	r0, r0, ip

0800c844 <Dmx::SetDmxSlots(unsigned short)>:
 800c844:	1e8b      	subs	r3, r1, #2
 800c846:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800c84a:	d809      	bhi.n	800c860 <Dmx::SetDmxSlots(unsigned short)+0x1c>
 800c84c:	6983      	ldr	r3, [r0, #24]
 800c84e:	8201      	strh	r1, [r0, #16]
 800c850:	b11b      	cbz	r3, 800c85a <Dmx::SetDmxSlots(unsigned short)+0x16>
 800c852:	4299      	cmp	r1, r3
 800c854:	bf94      	ite	ls
 800c856:	6181      	strls	r1, [r0, #24]
 800c858:	6183      	strhi	r3, [r0, #24]
 800c85a:	68c1      	ldr	r1, [r0, #12]
 800c85c:	f7ff bfae 	b.w	800c7bc <Dmx::SetDmxPeriodTime(unsigned int)>
 800c860:	4770      	bx	lr
	...

0800c864 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>:
 800c864:	b4f0      	push	{r4, r5, r6, r7}
 800c866:	8a04      	ldrh	r4, [r0, #16]
 800c868:	4d11      	ldr	r5, [pc, #68]	; (800c8b0 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x4c>)
 800c86a:	42a3      	cmp	r3, r4
 800c86c:	bf28      	it	cs
 800c86e:	4623      	movcs	r3, r4
 800c870:	f44f 7401 	mov.w	r4, #516	; 0x204
 800c874:	434c      	muls	r4, r1
 800c876:	1c5f      	adds	r7, r3, #1
 800c878:	192e      	adds	r6, r5, r4
 800c87a:	f892 f000 	pld	[r2]
 800c87e:	3401      	adds	r4, #1
 800c880:	f8a6 7202 	strh.w	r7, [r6, #514]	; 0x202
 800c884:	442c      	add	r4, r5
 800c886:	18d6      	adds	r6, r2, r3
 800c888:	4296      	cmp	r6, r2
 800c88a:	d004      	beq.n	800c896 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x32>
 800c88c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c890:	f804 5b01 	strb.w	r5, [r4], #1
 800c894:	e7f8      	b.n	800c888 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x24>
 800c896:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c89a:	698a      	ldr	r2, [r1, #24]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d004      	beq.n	800c8aa <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x46>
 800c8a0:	bcf0      	pop	{r4, r5, r6, r7}
 800c8a2:	618b      	str	r3, [r1, #24]
 800c8a4:	68c1      	ldr	r1, [r0, #12]
 800c8a6:	f7ff bf89 	b.w	800c7bc <Dmx::SetDmxPeriodTime(unsigned int)>
 800c8aa:	bcf0      	pop	{r4, r5, r6, r7}
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	20001c5c 	andcs	r1, r0, ip, asr ip

0800c8b4 <Dmx::GetDmxAvailable(unsigned int)>:
 800c8b4:	f44f 7304 	mov.w	r3, #528	; 0x210
 800c8b8:	4807      	ldr	r0, [pc, #28]	; (800c8d8 <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 800c8ba:	fb03 0001 	mla	r0, r3, r1, r0
 800c8be:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800c8c2:	f413 4100 	ands.w	r1, r3, #32768	; 0x8000
 800c8c6:	bf1b      	ittet	ne
 800c8c8:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800c8cc:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800c8d0:	4608      	moveq	r0, r1
 800c8d2:	f8c0 3204 	strne.w	r3, [r0, #516]	; 0x204
 800c8d6:	4770      	bx	lr
 800c8d8:	20001a4c 	andcs	r1, r0, ip, asr #20

0800c8dc <Dmx::GetUpdatesPerSecond(unsigned int)>:
 800c8dc:	f3bf 8f5f 	dmb	sy
 800c8e0:	4b01      	ldr	r3, [pc, #4]	; (800c8e8 <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 800c8e2:	0109      	lsls	r1, r1, #4
 800c8e4:	5858      	ldr	r0, [r3, r1]
 800c8e6:	4770      	bx	lr
 800c8e8:	20001e68 	andcs	r1, r0, r8, ror #28

0800c8ec <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	4614      	mov	r4, r2
 800c8f0:	461d      	mov	r5, r3
 800c8f2:	4e1f      	ldr	r6, [pc, #124]	; (800c970 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800c8f4:	2106      	movs	r1, #6
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f007 fa5e 	bl	8013db8 <usart_flag_get>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d0f9      	beq.n	800c8f4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 800c900:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800c904:	4e1b      	ldr	r6, [pc, #108]	; (800c974 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 800c906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c90a:	2203      	movs	r2, #3
 800c90c:	4630      	mov	r0, r6
 800c90e:	2110      	movs	r1, #16
 800c910:	f006 feda 	bl	80136c8 <gpio_init>
 800c914:	6177      	str	r7, [r6, #20]
 800c916:	2100      	movs	r1, #0
 800c918:	20b0      	movs	r0, #176	; 0xb0
 800c91a:	f007 fdc7 	bl	80144ac <udelay(unsigned int, unsigned int)>
 800c91e:	463b      	mov	r3, r7
 800c920:	4630      	mov	r0, r6
 800c922:	2203      	movs	r2, #3
 800c924:	2118      	movs	r1, #24
 800c926:	f006 fecf 	bl	80136c8 <gpio_init>
 800c92a:	2100      	movs	r1, #0
 800c92c:	200c      	movs	r0, #12
 800c92e:	f007 fdbd 	bl	80144ac <udelay(unsigned int, unsigned int)>
 800c932:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 800c936:	4f0e      	ldr	r7, [pc, #56]	; (800c970 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800c938:	4425      	add	r5, r4
 800c93a:	42ac      	cmp	r4, r5
 800c93c:	d10b      	bne.n	800c956 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800c93e:	f04f 2440 	mov.w	r4, #1073758208	; 0x40004000
 800c942:	4d0b      	ldr	r5, [pc, #44]	; (800c970 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800c944:	2106      	movs	r1, #6
 800c946:	4628      	mov	r0, r5
 800c948:	f007 fa36 	bl	8013db8 <usart_flag_get>
 800c94c:	2801      	cmp	r0, #1
 800c94e:	d00d      	beq.n	800c96c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x80>
 800c950:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800c954:	e7f6      	b.n	800c944 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x58>
 800c956:	2107      	movs	r1, #7
 800c958:	4638      	mov	r0, r7
 800c95a:	f007 fa2d 	bl	8013db8 <usart_flag_get>
 800c95e:	2800      	cmp	r0, #0
 800c960:	d0f9      	beq.n	800c956 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x6a>
 800c962:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c966:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 800c96a:	e7e6      	b.n	800c93a <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x4e>
 800c96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c96e:	bf00      	nop
 800c970:	40004800 	andmi	r4, r0, r0, lsl #16
 800c974:	40011000 	andmi	r1, r1, r0

0800c978 <Dmx::RdmReceive(unsigned int)>:
 800c978:	f44f 7304 	mov.w	r3, #528	; 0x210
 800c97c:	4806      	ldr	r0, [pc, #24]	; (800c998 <Dmx::RdmReceive(unsigned int)+0x20>)
 800c97e:	fb03 0101 	mla	r1, r3, r1, r0
 800c982:	f8b1 3204 	ldrh.w	r3, [r1, #516]	; 0x204
 800c986:	f413 4080 	ands.w	r0, r3, #16384	; 0x4000
 800c98a:	bf1e      	ittt	ne
 800c98c:	2300      	movne	r3, #0
 800c98e:	4608      	movne	r0, r1
 800c990:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800c994:	4770      	bx	lr
 800c996:	bf00      	nop
 800c998:	20001a4c 	andcs	r1, r0, ip, asr #20

0800c99c <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>:
 800c99c:	2300      	movs	r3, #0
 800c99e:	b570      	push	{r4, r5, r6, lr}
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	4e05      	ldr	r6, [pc, #20]	; (800c9bc <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x20>)
 800c9a6:	6273      	str	r3, [r6, #36]	; 0x24
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	4620      	mov	r0, r4
 800c9ac:	f7ff ffe4 	bl	800c978 <Dmx::RdmReceive(unsigned int)>
 800c9b0:	b910      	cbnz	r0, 800c9b8 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x1c>
 800c9b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d3f7      	bcc.n	800c9a8 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0xc>
 800c9b8:	bd70      	pop	{r4, r5, r6, pc}
 800c9ba:	bf00      	nop
 800c9bc:	40001000 	andmi	r1, r0, r0

0800c9c0 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>:
 800c9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	b192      	cbz	r2, 800c9ec <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x2c>
 800c9c6:	256c      	movs	r5, #108	; 0x6c
 800c9c8:	4e19      	ldr	r6, [pc, #100]	; (800ca30 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800c9ca:	4b1a      	ldr	r3, [pc, #104]	; (800ca34 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x74>)
 800c9cc:	6870      	ldr	r0, [r6, #4]
 800c9ce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c9d2:	fbb0 f0f5 	udiv	r0, r0, r5
 800c9d6:	1ac7      	subs	r7, r0, r3
 800c9d8:	42ba      	cmp	r2, r7
 800c9da:	d907      	bls.n	800c9ec <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x2c>
 800c9dc:	1a1b      	subs	r3, r3, r0
 800c9de:	4413      	add	r3, r2
 800c9e0:	6872      	ldr	r2, [r6, #4]
 800c9e2:	fbb2 f2f5 	udiv	r2, r2, r5
 800c9e6:	1a12      	subs	r2, r2, r0
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d3f9      	bcc.n	800c9e0 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x20>
 800c9ec:	4d12      	ldr	r5, [pc, #72]	; (800ca38 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x78>)
 800c9ee:	460a      	mov	r2, r1
 800c9f0:	5d2b      	ldrb	r3, [r5, r4]
 800c9f2:	7888      	ldrb	r0, [r1, #2]
 800c9f4:	73cb      	strb	r3, [r1, #15]
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	1847      	adds	r7, r0, r1
 800c9fa:	42ba      	cmp	r2, r7
 800c9fc:	d004      	beq.n	800ca08 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x48>
 800c9fe:	f812 6b01 	ldrb.w	r6, [r2], #1
 800ca02:	4433      	add	r3, r6
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	e7f8      	b.n	800c9fa <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x3a>
 800ca08:	0a1e      	lsrs	r6, r3, #8
 800ca0a:	540e      	strb	r6, [r1, r0]
 800ca0c:	7053      	strb	r3, [r2, #1]
 800ca0e:	788a      	ldrb	r2, [r1, #2]
 800ca10:	4620      	mov	r0, r4
 800ca12:	3202      	adds	r2, #2
 800ca14:	f7ff fb18 	bl	800c048 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800ca18:	226c      	movs	r2, #108	; 0x6c
 800ca1a:	4b05      	ldr	r3, [pc, #20]	; (800ca30 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca22:	4a04      	ldr	r2, [pc, #16]	; (800ca34 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x74>)
 800ca24:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ca28:	5d2b      	ldrb	r3, [r5, r4]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	552b      	strb	r3, [r5, r4]
 800ca2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca30:	e0001000 	and	r1, r0, r0
 800ca34:	20001e80 	andcs	r1, r0, r0, lsl #29
 800ca38:	20001e84 	andcs	r1, r0, r4, lsl #29

0800ca3c <RemoteConfig::HandleList()>:
 800ca3c:	2212      	movs	r2, #18
 800ca3e:	6803      	ldr	r3, [r0, #0]
 800ca40:	492f      	ldr	r1, [pc, #188]	; (800cb00 <RemoteConfig::HandleList()+0xc4>)
 800ca42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca46:	fb02 1103 	mla	r1, r2, r3, r1
 800ca4a:	220c      	movs	r2, #12
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	6843      	ldr	r3, [r0, #4]
 800ca50:	482c      	ldr	r0, [pc, #176]	; (800cb04 <RemoteConfig::HandleList()+0xc8>)
 800ca52:	4e2d      	ldr	r6, [pc, #180]	; (800cb08 <RemoteConfig::HandleList()+0xcc>)
 800ca54:	fb02 0003 	mla	r0, r2, r3, r0
 800ca58:	4b2c      	ldr	r3, [pc, #176]	; (800cb0c <RemoteConfig::HandleList()+0xd0>)
 800ca5a:	4f2d      	ldr	r7, [pc, #180]	; (800cb10 <RemoteConfig::HandleList()+0xd4>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	6835      	ldr	r5, [r6, #0]
 800ca60:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800ca64:	f897 9009 	ldrb.w	r9, [r7, #9]
 800ca68:	fa5f f38c 	uxtb.w	r3, ip
 800ca6c:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 800ca70:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800ca74:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800ca78:	b089      	sub	sp, #36	; 0x24
 800ca7a:	3507      	adds	r5, #7
 800ca7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800ca80:	f1b9 0f00 	cmp.w	r9, #0
 800ca84:	d020      	beq.n	800cac8 <RemoteConfig::HandleList()+0x8c>
 800ca86:	b2d2      	uxtb	r2, r2
 800ca88:	3709      	adds	r7, #9
 800ca8a:	9201      	str	r2, [sp, #4]
 800ca8c:	fa5f f28c 	uxtb.w	r2, ip
 800ca90:	e9cd 1003 	strd	r1, r0, [sp, #12]
 800ca94:	9200      	str	r2, [sp, #0]
 800ca96:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	e9cd 8705 	strd	r8, r7, [sp, #20]
 800caa0:	4a1c      	ldr	r2, [pc, #112]	; (800cb14 <RemoteConfig::HandleList()+0xd8>)
 800caa2:	f8cd e008 	str.w	lr, [sp, #8]
 800caa6:	f006 fb13 	bl	80130d0 <snprintf>
 800caaa:	8ba3      	ldrh	r3, [r4, #28]
 800caac:	2b05      	cmp	r3, #5
 800caae:	d11b      	bne.n	800cae8 <RemoteConfig::HandleList()+0xac>
 800cab0:	f642 1305 	movw	r3, #10501	; 0x2905
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	69a3      	ldr	r3, [r4, #24]
 800cab8:	b282      	uxth	r2, r0
 800caba:	4629      	mov	r1, r5
 800cabc:	7d20      	ldrb	r0, [r4, #20]
 800cabe:	f002 fd57 	bl	800f570 <udp_send>
 800cac2:	b009      	add	sp, #36	; 0x24
 800cac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cac8:	b2d2      	uxtb	r2, r2
 800caca:	9201      	str	r2, [sp, #4]
 800cacc:	fa5f f28c 	uxtb.w	r2, ip
 800cad0:	e9cd 0804 	strd	r0, r8, [sp, #16]
 800cad4:	e9cd e102 	strd	lr, r1, [sp, #8]
 800cad8:	9200      	str	r2, [sp, #0]
 800cada:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800cade:	4628      	mov	r0, r5
 800cae0:	4a0d      	ldr	r2, [pc, #52]	; (800cb18 <RemoteConfig::HandleList()+0xdc>)
 800cae2:	f006 faf5 	bl	80130d0 <snprintf>
 800cae6:	e7e0      	b.n	800caaa <RemoteConfig::HandleList()+0x6e>
 800cae8:	2b06      	cmp	r3, #6
 800caea:	d1ea      	bne.n	800cac2 <RemoteConfig::HandleList()+0x86>
 800caec:	6833      	ldr	r3, [r6, #0]
 800caee:	799b      	ldrb	r3, [r3, #6]
 800caf0:	2b2a      	cmp	r3, #42	; 0x2a
 800caf2:	d1e6      	bne.n	800cac2 <RemoteConfig::HandleList()+0x86>
 800caf4:	f642 1305 	movw	r3, #10501	; 0x2905
 800caf8:	9300      	str	r3, [sp, #0]
 800cafa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cafe:	e7db      	b.n	800cab8 <RemoteConfig::HandleList()+0x7c>
 800cb00:	08015853 	stmdaeq	r1, {r0, r1, r4, r6, fp, ip, lr}
 800cb04:	080158f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, fp, ip, lr}
 800cb08:	20001e88 	andcs	r1, r0, r8, lsl #29
 800cb0c:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800cb10:	20001e8c 	andcs	r1, r0, ip, lsl #29
 800cb14:	0801579c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, ip, lr}
 800cb18:	080157b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, ip, lr}

0800cb1c <RemoteConfig::HandleDisplayGet()>:
 800cb1c:	8b83      	ldrh	r3, [r0, #28]
 800cb1e:	2b08      	cmp	r3, #8
 800cb20:	d11b      	bne.n	800cb5a <RemoteConfig::HandleDisplayGet()+0x3e>
 800cb22:	4b0e      	ldr	r3, [pc, #56]	; (800cb5c <RemoteConfig::HandleDisplayGet()+0x40>)
 800cb24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4d0d      	ldr	r5, [pc, #52]	; (800cb60 <RemoteConfig::HandleDisplayGet()+0x44>)
 800cb2a:	7c19      	ldrb	r1, [r3, #16]
 800cb2c:	4a0d      	ldr	r2, [pc, #52]	; (800cb64 <RemoteConfig::HandleDisplayGet()+0x48>)
 800cb2e:	4b0e      	ldr	r3, [pc, #56]	; (800cb68 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800cb30:	4604      	mov	r4, r0
 800cb32:	2900      	cmp	r1, #0
 800cb34:	bf18      	it	ne
 800cb36:	4613      	movne	r3, r2
 800cb38:	6828      	ldr	r0, [r5, #0]
 800cb3a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800cb3e:	4a0b      	ldr	r2, [pc, #44]	; (800cb6c <RemoteConfig::HandleDisplayGet()+0x50>)
 800cb40:	f006 fac6 	bl	80130d0 <snprintf>
 800cb44:	f642 1305 	movw	r3, #10501	; 0x2905
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	b282      	uxth	r2, r0
 800cb4c:	69a3      	ldr	r3, [r4, #24]
 800cb4e:	6829      	ldr	r1, [r5, #0]
 800cb50:	7d20      	ldrb	r0, [r4, #20]
 800cb52:	f002 fd0d 	bl	800f570 <udp_send>
 800cb56:	b003      	add	sp, #12
 800cb58:	bd30      	pop	{r4, r5, pc}
 800cb5a:	4770      	bx	lr
 800cb5c:	2000ae04 	andcs	sl, r0, r4, lsl #28
 800cb60:	20001e88 	andcs	r1, r0, r8, lsl #29
 800cb64:	080157ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, r9, sl, ip, lr}
 800cb68:	080157cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, sl, ip, lr}
 800cb6c:	080157d2 	stmdaeq	r1, {r1, r4, r6, r7, r8, r9, sl, ip, lr}

0800cb70 <RemoteConfig::HandleVersion()>:
 800cb70:	8b83      	ldrh	r3, [r0, #28]
 800cb72:	2b08      	cmp	r3, #8
 800cb74:	d114      	bne.n	800cba0 <RemoteConfig::HandleVersion()+0x30>
 800cb76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb78:	4d0a      	ldr	r5, [pc, #40]	; (800cba4 <RemoteConfig::HandleVersion()+0x34>)
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800cb80:	4b09      	ldr	r3, [pc, #36]	; (800cba8 <RemoteConfig::HandleVersion()+0x38>)
 800cb82:	4a0a      	ldr	r2, [pc, #40]	; (800cbac <RemoteConfig::HandleVersion()+0x3c>)
 800cb84:	6828      	ldr	r0, [r5, #0]
 800cb86:	f006 faa3 	bl	80130d0 <snprintf>
 800cb8a:	f642 1305 	movw	r3, #10501	; 0x2905
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	b282      	uxth	r2, r0
 800cb92:	69a3      	ldr	r3, [r4, #24]
 800cb94:	6829      	ldr	r1, [r5, #0]
 800cb96:	7d20      	ldrb	r0, [r4, #20]
 800cb98:	f002 fcea 	bl	800f570 <udp_send>
 800cb9c:	b003      	add	sp, #12
 800cb9e:	bd30      	pop	{r4, r5, pc}
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	20001e88 	andcs	r1, r0, r8, lsl #29
 800cba8:	2000aeaa 	andcs	sl, r0, sl, lsr #29
 800cbac:	080157de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip, lr}

0800cbb0 <RemoteConfig::HandleUptime()>:
 800cbb0:	7bc3      	ldrb	r3, [r0, #15]
 800cbb2:	b1e3      	cbz	r3, 800cbee <RemoteConfig::HandleUptime()+0x3e>
 800cbb4:	4b0e      	ldr	r3, [pc, #56]	; (800cbf0 <RemoteConfig::HandleUptime()+0x40>)
 800cbb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	8b83      	ldrh	r3, [r0, #28]
 800cbbc:	4604      	mov	r4, r0
 800cbbe:	2b07      	cmp	r3, #7
 800cbc0:	d113      	bne.n	800cbea <RemoteConfig::HandleUptime()+0x3a>
 800cbc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cbc6:	4d0b      	ldr	r5, [pc, #44]	; (800cbf4 <RemoteConfig::HandleUptime()+0x44>)
 800cbc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbcc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800cbd0:	4a09      	ldr	r2, [pc, #36]	; (800cbf8 <RemoteConfig::HandleUptime()+0x48>)
 800cbd2:	6828      	ldr	r0, [r5, #0]
 800cbd4:	f006 fa7c 	bl	80130d0 <snprintf>
 800cbd8:	f642 1305 	movw	r3, #10501	; 0x2905
 800cbdc:	9300      	str	r3, [sp, #0]
 800cbde:	b282      	uxth	r2, r0
 800cbe0:	69a3      	ldr	r3, [r4, #24]
 800cbe2:	6829      	ldr	r1, [r5, #0]
 800cbe4:	7d20      	ldrb	r0, [r4, #20]
 800cbe6:	f002 fcc3 	bl	800f570 <udp_send>
 800cbea:	b003      	add	sp, #12
 800cbec:	bd30      	pop	{r4, r5, pc}
 800cbee:	4770      	bx	lr
 800cbf0:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800cbf4:	20001e88 	andcs	r1, r0, r8, lsl #29
 800cbf8:	080157e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, sl, ip, lr}

0800cbfc <RemoteConfig::HandleDisplaySet()>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	8b83      	ldrh	r3, [r0, #28]
 800cc00:	2b09      	cmp	r3, #9
 800cc02:	d113      	bne.n	800cc2c <RemoteConfig::HandleDisplaySet()+0x30>
 800cc04:	4b0a      	ldr	r3, [pc, #40]	; (800cc30 <RemoteConfig::HandleDisplaySet()+0x34>)
 800cc06:	681c      	ldr	r4, [r3, #0]
 800cc08:	4b0a      	ldr	r3, [pc, #40]	; (800cc34 <RemoteConfig::HandleDisplaySet()+0x38>)
 800cc0a:	69a0      	ldr	r0, [r4, #24]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	7a5d      	ldrb	r5, [r3, #9]
 800cc10:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800cc14:	4259      	negs	r1, r3
 800cc16:	4159      	adcs	r1, r3
 800cc18:	b140      	cbz	r0, 800cc2c <RemoteConfig::HandleDisplaySet()+0x30>
 800cc1a:	6803      	ldr	r3, [r0, #0]
 800cc1c:	7421      	strb	r1, [r4, #16]
 800cc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc20:	4798      	blx	r3
 800cc22:	2d30      	cmp	r5, #48	; 0x30
 800cc24:	bf1e      	ittt	ne
 800cc26:	4b04      	ldrne	r3, [pc, #16]	; (800cc38 <RemoteConfig::HandleDisplaySet()+0x3c>)
 800cc28:	681b      	ldrne	r3, [r3, #0]
 800cc2a:	6063      	strne	r3, [r4, #4]
 800cc2c:	bd38      	pop	{r3, r4, r5, pc}
 800cc2e:	bf00      	nop
 800cc30:	2000ae04 	andcs	sl, r0, r4, lsl #28
 800cc34:	20001e88 	andcs	r1, r0, r8, lsl #29
 800cc38:	2000af0c 	andcs	sl, r0, ip, lsl #30

0800cc3c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800cc3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc40:	2500      	movs	r5, #0
 800cc42:	461f      	mov	r7, r3
 800cc44:	6083      	str	r3, [r0, #8]
 800cc46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	4690      	mov	r8, r2
 800cc4e:	4689      	mov	r9, r1
 800cc50:	f100 0a24 	add.w	sl, r0, #36	; 0x24
 800cc54:	e9c0 1200 	strd	r1, r2, [r0]
 800cc58:	4e12      	ldr	r6, [pc, #72]	; (800cca4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x68>)
 800cc5a:	e9c0 3505 	strd	r3, r5, [r0, #20]
 800cc5e:	f8df b048 	ldr.w	fp, [pc, #72]	; 800cca8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x6c>
 800cc62:	60c5      	str	r5, [r0, #12]
 800cc64:	8205      	strh	r5, [r0, #16]
 800cc66:	8385      	strh	r5, [r0, #28]
 800cc68:	6205      	str	r5, [r0, #32]
 800cc6a:	4650      	mov	r0, sl
 800cc6c:	f000 fcb0 	bl	800d5d0 <HttpDaemon::HttpDaemon()>
 800cc70:	4b0e      	ldr	r3, [pc, #56]	; (800ccac <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x70>)
 800cc72:	4631      	mov	r1, r6
 800cc74:	f8db 0000 	ldr.w	r0, [fp]
 800cc78:	601c      	str	r4, [r3, #0]
 800cc7a:	f003 f94f 	bl	800ff1c <Network::MacAddressCopyTo(unsigned char*)>
 800cc7e:	f642 1105 	movw	r1, #10501	; 0x2905
 800cc82:	f8db 0000 	ldr.w	r0, [fp]
 800cc86:	f886 9006 	strb.w	r9, [r6, #6]
 800cc8a:	f886 8007 	strb.w	r8, [r6, #7]
 800cc8e:	7237      	strb	r7, [r6, #8]
 800cc90:	7275      	strb	r5, [r6, #9]
 800cc92:	f003 f93d 	bl	800ff10 <Network::Begin(unsigned short)>
 800cc96:	6160      	str	r0, [r4, #20]
 800cc98:	4650      	mov	r0, sl
 800cc9a:	f000 fcb1 	bl	800d600 <HttpDaemon::Start()>
 800cc9e:	4620      	mov	r0, r4
 800cca0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca4:	20001e8c 	andcs	r1, r0, ip, lsl #29
 800cca8:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800ccac:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0

0800ccb0 <RemoteConfig::GetStringNode() const>:
 800ccb0:	2012      	movs	r0, #18
 800ccb2:	4b03      	ldr	r3, [pc, #12]	; (800ccc0 <RemoteConfig::GetStringNode() const+0x10>)
 800ccb4:	799a      	ldrb	r2, [r3, #6]
 800ccb6:	4b03      	ldr	r3, [pc, #12]	; (800ccc4 <RemoteConfig::GetStringNode() const+0x14>)
 800ccb8:	fb00 3002 	mla	r0, r0, r2, r3
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	20001e8c 	andcs	r1, r0, ip, lsl #29
 800ccc4:	08015853 	stmdaeq	r1, {r0, r1, r4, r6, fp, ip, lr}

0800ccc8 <RemoteConfig::GetStringOutput() const>:
 800ccc8:	200c      	movs	r0, #12
 800ccca:	4b03      	ldr	r3, [pc, #12]	; (800ccd8 <RemoteConfig::GetStringOutput() const+0x10>)
 800cccc:	79da      	ldrb	r2, [r3, #7]
 800ccce:	4b03      	ldr	r3, [pc, #12]	; (800ccdc <RemoteConfig::GetStringOutput() const+0x14>)
 800ccd0:	fb00 3002 	mla	r0, r0, r2, r3
 800ccd4:	4770      	bx	lr
 800ccd6:	bf00      	nop
 800ccd8:	20001e8c 	andcs	r1, r0, ip, lsl #29
 800ccdc:	080158f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, fp, ip, lr}

0800cce0 <RemoteConfig::SetDisable(bool)>:
 800cce0:	b538      	push	{r3, r4, r5, lr}
 800cce2:	4604      	mov	r4, r0
 800cce4:	7b03      	ldrb	r3, [r0, #12]
 800cce6:	b161      	cbz	r1, 800cd02 <RemoteConfig::SetDisable(bool)+0x22>
 800cce8:	b953      	cbnz	r3, 800cd00 <RemoteConfig::SetDisable(bool)+0x20>
 800ccea:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <RemoteConfig::SetDisable(bool)+0x3c>)
 800ccec:	f642 1105 	movw	r1, #10501	; 0x2905
 800ccf0:	6818      	ldr	r0, [r3, #0]
 800ccf2:	f003 f910 	bl	800ff16 <Network::End(unsigned short)>
 800ccf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccfa:	6163      	str	r3, [r4, #20]
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	7323      	strb	r3, [r4, #12]
 800cd00:	bd38      	pop	{r3, r4, r5, pc}
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d0fc      	beq.n	800cd00 <RemoteConfig::SetDisable(bool)+0x20>
 800cd06:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <RemoteConfig::SetDisable(bool)+0x3c>)
 800cd08:	460d      	mov	r5, r1
 800cd0a:	6818      	ldr	r0, [r3, #0]
 800cd0c:	f642 1105 	movw	r1, #10501	; 0x2905
 800cd10:	f003 f8fe 	bl	800ff10 <Network::Begin(unsigned short)>
 800cd14:	7325      	strb	r5, [r4, #12]
 800cd16:	6160      	str	r0, [r4, #20]
 800cd18:	e7f2      	b.n	800cd00 <RemoteConfig::SetDisable(bool)+0x20>
 800cd1a:	bf00      	nop
 800cd1c:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800cd20 <RemoteConfig::SetDisplayName(char const*)>:
 800cd20:	2217      	movs	r2, #23
 800cd22:	4809      	ldr	r0, [pc, #36]	; (800cd48 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800cd24:	b508      	push	{r3, lr}
 800cd26:	1e4b      	subs	r3, r1, #1
 800cd28:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800cd2c:	b931      	cbnz	r1, 800cd3c <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800cd2e:	f005 ff85 	bl	8012c3c <memset>
 800cd32:	2200      	movs	r2, #0
 800cd34:	4b05      	ldr	r3, [pc, #20]	; (800cd4c <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800cd36:	f883 2020 	strb.w	r2, [r3, #32]
 800cd3a:	bd08      	pop	{r3, pc}
 800cd3c:	3a01      	subs	r2, #1
 800cd3e:	f800 1b01 	strb.w	r1, [r0], #1
 800cd42:	d1f1      	bne.n	800cd28 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800cd44:	e7f5      	b.n	800cd32 <RemoteConfig::SetDisplayName(char const*)+0x12>
 800cd46:	bf00      	nop
 800cd48:	20001e95 	mulcs	r0, r5, lr
 800cd4c:	20001e8c 	andcs	r1, r0, ip, lsl #29

0800cd50 <RemoteConfig::HandleGet(void*, unsigned int)>:
 800cd50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd52:	4604      	mov	r4, r0
 800cd54:	4616      	mov	r6, r2
 800cd56:	460d      	mov	r5, r1
 800cd58:	4f27      	ldr	r7, [pc, #156]	; (800cdf8 <RemoteConfig::HandleGet(void*, unsigned int)+0xa8>)
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	b9a9      	cbnz	r1, 800cd8a <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800cd5e:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800cd62:	6839      	ldr	r1, [r7, #0]
 800cd64:	aa03      	add	r2, sp, #12
 800cd66:	3105      	adds	r1, #5
 800cd68:	9303      	str	r3, [sp, #12]
 800cd6a:	f000 fbd3 	bl	800d514 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800cd6e:	1e03      	subs	r3, r0, #0
 800cd70:	da1b      	bge.n	800cdaa <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800cd72:	f642 1305 	movw	r3, #10501	; 0x2905
 800cd76:	220b      	movs	r2, #11
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	4920      	ldr	r1, [pc, #128]	; (800cdfc <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800cd7c:	69a3      	ldr	r3, [r4, #24]
 800cd7e:	7d20      	ldrb	r0, [r4, #20]
 800cd80:	f002 fbf6 	bl	800f570 <udp_send>
 800cd84:	200c      	movs	r0, #12
 800cd86:	b005      	add	sp, #20
 800cd88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd8a:	9203      	str	r2, [sp, #12]
 800cd8c:	aa03      	add	r2, sp, #12
 800cd8e:	6039      	str	r1, [r7, #0]
 800cd90:	f000 fbc0 	bl	800d514 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800cd94:	1e03      	subs	r3, r0, #0
 800cd96:	da08      	bge.n	800cdaa <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800cd98:	2e0b      	cmp	r6, #11
 800cd9a:	4632      	mov	r2, r6
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	bf28      	it	cs
 800cda0:	220b      	movcs	r2, #11
 800cda2:	4916      	ldr	r1, [pc, #88]	; (800cdfc <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800cda4:	f005 ff28 	bl	8012bf8 <memcpy>
 800cda8:	e7ec      	b.n	800cd84 <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 800cdaa:	201c      	movs	r0, #28
 800cdac:	4343      	muls	r3, r0
 800cdae:	4914      	ldr	r1, [pc, #80]	; (800ce00 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800cdb0:	18ca      	adds	r2, r1, r3
 800cdb2:	6852      	ldr	r2, [r2, #4]
 800cdb4:	58cb      	ldr	r3, [r1, r3]
 800cdb6:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800cdba:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800cdbe:	07d2      	lsls	r2, r2, #31
 800cdc0:	bf48      	it	mi
 800cdc2:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800cdc6:	a903      	add	r1, sp, #12
 800cdc8:	bf48      	it	mi
 800cdca:	58d3      	ldrmi	r3, [r2, r3]
 800cdcc:	4798      	blx	r3
 800cdce:	9a03      	ldr	r2, [sp, #12]
 800cdd0:	b955      	cbnz	r5, 800cde8 <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 800cdd2:	f642 1305 	movw	r3, #10501	; 0x2905
 800cdd6:	6839      	ldr	r1, [r7, #0]
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	7d20      	ldrb	r0, [r4, #20]
 800cddc:	69a3      	ldr	r3, [r4, #24]
 800cdde:	b292      	uxth	r2, r2
 800cde0:	f002 fbc6 	bl	800f570 <udp_send>
 800cde4:	9803      	ldr	r0, [sp, #12]
 800cde6:	e7ce      	b.n	800cd86 <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 800cde8:	42b2      	cmp	r2, r6
 800cdea:	bf28      	it	cs
 800cdec:	4632      	movcs	r2, r6
 800cdee:	4628      	mov	r0, r5
 800cdf0:	6839      	ldr	r1, [r7, #0]
 800cdf2:	f005 ff0c 	bl	8012c0e <memmove>
 800cdf6:	e7f5      	b.n	800cde4 <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 800cdf8:	20001e88 	andcs	r1, r0, r8, lsl #29
 800cdfc:	080157f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, lr}
 800ce00:	08015a60 	stmdaeq	r1, {r5, r6, r9, fp, ip, lr}

0800ce04 <RemoteConfig::HandleGetNoParams()>:
 800ce04:	2200      	movs	r2, #0
 800ce06:	4611      	mov	r1, r2
 800ce08:	f7ff bfa2 	b.w	800cd50 <RemoteConfig::HandleGet(void*, unsigned int)>

0800ce0c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800ce0c:	b510      	push	{r4, lr}
 800ce0e:	460c      	mov	r4, r1
 800ce10:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800ce12:	b08a      	sub	sp, #40	; 0x28
 800ce14:	6819      	ldr	r1, [r3, #0]
 800ce16:	a801      	add	r0, sp, #4
 800ce18:	f000 f9d8 	bl	800d1cc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800ce1c:	4905      	ldr	r1, [pc, #20]	; (800ce34 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800ce1e:	4623      	mov	r3, r4
 800ce20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce24:	6809      	ldr	r1, [r1, #0]
 800ce26:	a801      	add	r0, sp, #4
 800ce28:	f000 faf4 	bl	800d414 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800ce2c:	b00a      	add	sp, #40	; 0x28
 800ce2e:	bd10      	pop	{r4, pc}
 800ce30:	20002ee4 	andcs	r2, r0, r4, ror #29
 800ce34:	20001e88 	andcs	r1, r0, r8, lsl #29

0800ce38 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800ce38:	b513      	push	{r0, r1, r4, lr}
 800ce3a:	460c      	mov	r4, r1
 800ce3c:	4b07      	ldr	r3, [pc, #28]	; (800ce5c <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800ce3e:	a801      	add	r0, sp, #4
 800ce40:	6819      	ldr	r1, [r3, #0]
 800ce42:	f003 faeb 	bl	801041c <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800ce46:	4906      	ldr	r1, [pc, #24]	; (800ce60 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800ce48:	4623      	mov	r3, r4
 800ce4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce4e:	6809      	ldr	r1, [r1, #0]
 800ce50:	a801      	add	r0, sp, #4
 800ce52:	f003 fccf 	bl	80107f4 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800ce56:	b002      	add	sp, #8
 800ce58:	bd10      	pop	{r4, pc}
 800ce5a:	bf00      	nop
 800ce5c:	20002edc 	ldrdcs	r2, [r0], -ip
 800ce60:	20001e88 	andcs	r1, r0, r8, lsl #29

0800ce64 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800ce64:	b510      	push	{r4, lr}
 800ce66:	460c      	mov	r4, r1
 800ce68:	4b07      	ldr	r3, [pc, #28]	; (800ce88 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 800ce6a:	b0a4      	sub	sp, #144	; 0x90
 800ce6c:	6819      	ldr	r1, [r3, #0]
 800ce6e:	a801      	add	r0, sp, #4
 800ce70:	f7fc fe24 	bl	8009abc <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800ce74:	4905      	ldr	r1, [pc, #20]	; (800ce8c <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800ce76:	4623      	mov	r3, r4
 800ce78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce7c:	6809      	ldr	r1, [r1, #0]
 800ce7e:	a801      	add	r0, sp, #4
 800ce80:	f7fd f9ea 	bl	800a258 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800ce84:	b024      	add	sp, #144	; 0x90
 800ce86:	bd10      	pop	{r4, pc}
 800ce88:	20002ed0 	ldrdcs	r2, [r0], -r0
 800ce8c:	20001e88 	andcs	r1, r0, r8, lsl #29

0800ce90 <RemoteConfig::HandleGetParamsTxt(unsigned int&)>:
 800ce90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce92:	460c      	mov	r4, r1
 800ce94:	4b07      	ldr	r3, [pc, #28]	; (800ceb4 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x24>)
 800ce96:	4668      	mov	r0, sp
 800ce98:	6819      	ldr	r1, [r3, #0]
 800ce9a:	f7fe ff6b 	bl	800bd74 <DmxParams::DmxParams(DmxParamsStore*)>
 800ce9e:	4906      	ldr	r1, [pc, #24]	; (800ceb8 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x28>)
 800cea0:	4623      	mov	r3, r4
 800cea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cea6:	4668      	mov	r0, sp
 800cea8:	6809      	ldr	r1, [r1, #0]
 800ceaa:	f7ff f883 	bl	800bfb4 <DmxParams::Save(char*, unsigned int, unsigned int&)>
 800ceae:	b004      	add	sp, #16
 800ceb0:	bd10      	pop	{r4, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20002ed8 	ldrdcs	r2, [r0], -r8
 800ceb8:	20001e88 	andcs	r1, r0, r8, lsl #29

0800cebc <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800cebc:	b510      	push	{r4, lr}
 800cebe:	460c      	mov	r4, r1
 800cec0:	4b07      	ldr	r3, [pc, #28]	; (800cee0 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800cec2:	b08a      	sub	sp, #40	; 0x28
 800cec4:	6819      	ldr	r1, [r3, #0]
 800cec6:	4668      	mov	r0, sp
 800cec8:	f004 fc5c 	bl	8011784 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800cecc:	4905      	ldr	r1, [pc, #20]	; (800cee4 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800cece:	4623      	mov	r3, r4
 800ced0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ced4:	4668      	mov	r0, sp
 800ced6:	6809      	ldr	r1, [r1, #0]
 800ced8:	f004 fd8a 	bl	80119f0 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800cedc:	b00a      	add	sp, #40	; 0x28
 800cede:	bd10      	pop	{r4, pc}
 800cee0:	20002ed4 	ldrdcs	r2, [r0], -r4
 800cee4:	20001e88 	andcs	r1, r0, r8, lsl #29

0800cee8 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800cee8:	b530      	push	{r4, r5, lr}
 800ceea:	b085      	sub	sp, #20
 800ceec:	4604      	mov	r4, r0
 800ceee:	9201      	str	r2, [sp, #4]
 800cef0:	b9c9      	cbnz	r1, 800cf26 <RemoteConfig::HandleSet(void*, unsigned int)+0x3e>
 800cef2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800cef6:	9303      	str	r3, [sp, #12]
 800cef8:	4b1b      	ldr	r3, [pc, #108]	; (800cf68 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800cefa:	aa03      	add	r2, sp, #12
 800cefc:	6819      	ldr	r1, [r3, #0]
 800cefe:	3101      	adds	r1, #1
 800cf00:	f000 fb08 	bl	800d514 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	db24      	blt.n	800cf52 <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800cf08:	221c      	movs	r2, #28
 800cf0a:	4b18      	ldr	r3, [pc, #96]	; (800cf6c <RemoteConfig::HandleSet(void*, unsigned int)+0x84>)
 800cf0c:	fb02 3300 	mla	r3, r2, r0, r3
 800cf10:	68da      	ldr	r2, [r3, #12]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	1051      	asrs	r1, r2, #1
 800cf16:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800cf1a:	07d2      	lsls	r2, r2, #31
 800cf1c:	bf44      	itt	mi
 800cf1e:	5862      	ldrmi	r2, [r4, r1]
 800cf20:	58d3      	ldrmi	r3, [r2, r3]
 800cf22:	4798      	blx	r3
 800cf24:	e015      	b.n	800cf52 <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800cf26:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	d811      	bhi.n	800cf52 <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800cf2e:	2200      	movs	r2, #0
 800cf30:	460d      	mov	r5, r1
 800cf32:	490f      	ldr	r1, [pc, #60]	; (800cf70 <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800cf34:	6202      	str	r2, [r0, #32]
 800cf36:	7809      	ldrb	r1, [r1, #0]
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	07c9      	lsls	r1, r1, #31
 800cf3c:	d50b      	bpl.n	800cf56 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800cf3e:	7829      	ldrb	r1, [r5, #0]
 800cf40:	297b      	cmp	r1, #123	; 0x7b
 800cf42:	d108      	bne.n	800cf56 <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800cf44:	3b01      	subs	r3, #1
 800cf46:	4628      	mov	r0, r5
 800cf48:	b299      	uxth	r1, r3
 800cf4a:	f004 fec3 	bl	8011cd4 <properties::convert_json_file(char*, unsigned short, bool)>
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	dc08      	bgt.n	800cf64 <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>
 800cf52:	b005      	add	sp, #20
 800cf54:	bd30      	pop	{r4, r5, pc}
 800cf56:	83a3      	strh	r3, [r4, #28]
 800cf58:	4b03      	ldr	r3, [pc, #12]	; (800cf68 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	601d      	str	r5, [r3, #0]
 800cf5e:	aa01      	add	r2, sp, #4
 800cf60:	1c69      	adds	r1, r5, #1
 800cf62:	e7cd      	b.n	800cf00 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800cf64:	83a0      	strh	r0, [r4, #28]
 800cf66:	e7f7      	b.n	800cf58 <RemoteConfig::HandleSet(void*, unsigned int)+0x70>
 800cf68:	20001e88 	andcs	r1, r0, r8, lsl #29
 800cf6c:	08015a60 	stmdaeq	r1, {r5, r6, r9, fp, ip, lr}
 800cf70:	2000ae00 	andcs	sl, r0, r0, lsl #28

0800cf74 <RemoteConfig::Run()>:
 800cf74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800cf78:	7b03      	ldrb	r3, [r0, #12]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d14f      	bne.n	800d01e <RemoteConfig::Run()+0xaa>
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4d3e      	ldr	r5, [pc, #248]	; (800d07c <RemoteConfig::Run()+0x108>)
 800cf82:	3024      	adds	r0, #36	; 0x24
 800cf84:	f000 fdb6 	bl	800daf4 <HttpDaemon::Run()>
 800cf88:	4629      	mov	r1, r5
 800cf8a:	7d20      	ldrb	r0, [r4, #20]
 800cf8c:	f10d 030e 	add.w	r3, sp, #14
 800cf90:	f104 0218 	add.w	r2, r4, #24
 800cf94:	f002 fac6 	bl	800f524 <udp_recv2>
 800cf98:	2803      	cmp	r0, #3
 800cf9a:	83a0      	strh	r0, [r4, #28]
 800cf9c:	d93f      	bls.n	800d01e <RemoteConfig::Run()+0xaa>
 800cf9e:	682b      	ldr	r3, [r5, #0]
 800cfa0:	181a      	adds	r2, r3, r0
 800cfa2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800cfa6:	2a0a      	cmp	r2, #10
 800cfa8:	bf04      	itt	eq
 800cfaa:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 800cfae:	83a0      	strheq	r0, [r4, #28]
 800cfb0:	7819      	ldrb	r1, [r3, #0]
 800cfb2:	293f      	cmp	r1, #63	; 0x3f
 800cfb4:	d139      	bne.n	800d02a <RemoteConfig::Run()+0xb6>
 800cfb6:	4832      	ldr	r0, [pc, #200]	; (800d080 <RemoteConfig::Run()+0x10c>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	4607      	mov	r7, r0
 800cfbc:	8ba1      	ldrh	r1, [r4, #28]
 800cfbe:	3901      	subs	r1, #1
 800cfc0:	b289      	uxth	r1, r1
 800cfc2:	83a1      	strh	r1, [r4, #28]
 800cfc4:	7b86      	ldrb	r6, [r0, #14]
 800cfc6:	8985      	ldrh	r5, [r0, #12]
 800cfc8:	b17e      	cbz	r6, 800cfea <RemoteConfig::Run()+0x76>
 800cfca:	42a9      	cmp	r1, r5
 800cfcc:	d80f      	bhi.n	800cfee <RemoteConfig::Run()+0x7a>
 800cfce:	3201      	adds	r2, #1
 800cfd0:	2a08      	cmp	r2, #8
 800cfd2:	f100 0010 	add.w	r0, r0, #16
 800cfd6:	d1f5      	bne.n	800cfc4 <RemoteConfig::Run()+0x50>
 800cfd8:	f642 1305 	movw	r3, #10501	; 0x2905
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	69a3      	ldr	r3, [r4, #24]
 800cfe0:	4928      	ldr	r1, [pc, #160]	; (800d084 <RemoteConfig::Run()+0x110>)
 800cfe2:	7d20      	ldrb	r0, [r4, #20]
 800cfe4:	f002 fac4 	bl	800f570 <udp_send>
 800cfe8:	e019      	b.n	800d01e <RemoteConfig::Run()+0xaa>
 800cfea:	42a9      	cmp	r1, r5
 800cfec:	d1ef      	bne.n	800cfce <RemoteConfig::Run()+0x5a>
 800cfee:	6886      	ldr	r6, [r0, #8]
 800cff0:	f103 0c01 	add.w	ip, r3, #1
 800cff4:	4435      	add	r5, r6
 800cff6:	42b5      	cmp	r5, r6
 800cff8:	d006      	beq.n	800d008 <RemoteConfig::Run()+0x94>
 800cffa:	f81c 8b01 	ldrb.w	r8, [ip], #1
 800cffe:	f816 eb01 	ldrb.w	lr, [r6], #1
 800d002:	45f0      	cmp	r8, lr
 800d004:	d0f7      	beq.n	800cff6 <RemoteConfig::Run()+0x82>
 800d006:	e7e2      	b.n	800cfce <RemoteConfig::Run()+0x5a>
 800d008:	0113      	lsls	r3, r2, #4
 800d00a:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800d00e:	6852      	ldr	r2, [r2, #4]
 800d010:	58fb      	ldr	r3, [r7, r3]
 800d012:	1051      	asrs	r1, r2, #1
 800d014:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d018:	07d2      	lsls	r2, r2, #31
 800d01a:	d403      	bmi.n	800d024 <RemoteConfig::Run()+0xb0>
 800d01c:	4798      	blx	r3
 800d01e:	b004      	add	sp, #16
 800d020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d024:	5862      	ldr	r2, [r4, r1]
 800d026:	58d3      	ldr	r3, [r2, r3]
 800d028:	e7f8      	b.n	800d01c <RemoteConfig::Run()+0xa8>
 800d02a:	7b62      	ldrb	r2, [r4, #13]
 800d02c:	2a00      	cmp	r2, #0
 800d02e:	d1f6      	bne.n	800d01e <RemoteConfig::Run()+0xaa>
 800d030:	2923      	cmp	r1, #35	; 0x23
 800d032:	d105      	bne.n	800d040 <RemoteConfig::Run()+0xcc>
 800d034:	4611      	mov	r1, r2
 800d036:	4620      	mov	r0, r4
 800d038:	6222      	str	r2, [r4, #32]
 800d03a:	f7ff ff55 	bl	800cee8 <RemoteConfig::HandleSet(void*, unsigned int)>
 800d03e:	e7ee      	b.n	800d01e <RemoteConfig::Run()+0xaa>
 800d040:	2921      	cmp	r1, #33	; 0x21
 800d042:	d1ec      	bne.n	800d01e <RemoteConfig::Run()+0xaa>
 800d044:	8ba2      	ldrh	r2, [r4, #28]
 800d046:	3a01      	subs	r2, #1
 800d048:	b292      	uxth	r2, r2
 800d04a:	2a08      	cmp	r2, #8
 800d04c:	83a2      	strh	r2, [r4, #28]
 800d04e:	d90a      	bls.n	800d066 <RemoteConfig::Run()+0xf2>
 800d050:	490d      	ldr	r1, [pc, #52]	; (800d088 <RemoteConfig::Run()+0x114>)
 800d052:	1c5a      	adds	r2, r3, #1
 800d054:	3309      	adds	r3, #9
 800d056:	4293      	cmp	r3, r2
 800d058:	d00c      	beq.n	800d074 <RemoteConfig::Run()+0x100>
 800d05a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d05e:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d062:	4285      	cmp	r5, r0
 800d064:	d0f7      	beq.n	800d056 <RemoteConfig::Run()+0xe2>
 800d066:	f642 1305 	movw	r3, #10501	; 0x2905
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	2208      	movs	r2, #8
 800d06e:	69a3      	ldr	r3, [r4, #24]
 800d070:	4906      	ldr	r1, [pc, #24]	; (800d08c <RemoteConfig::Run()+0x118>)
 800d072:	e7b6      	b.n	800cfe2 <RemoteConfig::Run()+0x6e>
 800d074:	4620      	mov	r0, r4
 800d076:	f7ff fdc1 	bl	800cbfc <RemoteConfig::HandleDisplaySet()>
 800d07a:	e7d0      	b.n	800d01e <RemoteConfig::Run()+0xaa>
 800d07c:	20001e88 	andcs	r1, r0, r8, lsl #29
 800d080:	08015988 	stmdaeq	r1, {r3, r7, r8, fp, ip, lr}
 800d084:	0801580b 	stmdaeq	r1, {r0, r1, r3, fp, ip, lr}
 800d088:	08015802 	stmdaeq	r1, {r1, fp, ip, lr}
 800d08c:	08015814 	stmdaeq	r1, {r2, r4, fp, ip, lr}

0800d090 <RemoteConfig::HandleSetRconfig()>:
 800d090:	b510      	push	{r4, lr}
 800d092:	4604      	mov	r4, r0
 800d094:	4b08      	ldr	r3, [pc, #32]	; (800d0b8 <RemoteConfig::HandleSetRconfig()+0x28>)
 800d096:	b08a      	sub	sp, #40	; 0x28
 800d098:	6819      	ldr	r1, [r3, #0]
 800d09a:	a801      	add	r0, sp, #4
 800d09c:	f000 f896 	bl	800d1cc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800d0a0:	4b06      	ldr	r3, [pc, #24]	; (800d0bc <RemoteConfig::HandleSetRconfig()+0x2c>)
 800d0a2:	8ba2      	ldrh	r2, [r4, #28]
 800d0a4:	6819      	ldr	r1, [r3, #0]
 800d0a6:	a801      	add	r0, sp, #4
 800d0a8:	f000 f8a6 	bl	800d1f8 <RemoteConfigParams::Load(char const*, unsigned int)>
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	a801      	add	r0, sp, #4
 800d0b0:	f000 f9bd 	bl	800d42e <RemoteConfigParams::Set(RemoteConfig*)>
 800d0b4:	b00a      	add	sp, #40	; 0x28
 800d0b6:	bd10      	pop	{r4, pc}
 800d0b8:	20002ee4 	andcs	r2, r0, r4, ror #29
 800d0bc:	20001e88 	andcs	r1, r0, r8, lsl #29

0800d0c0 <RemoteConfig::HandleSetNetworkTxt()>:
 800d0c0:	b513      	push	{r0, r1, r4, lr}
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	4b06      	ldr	r3, [pc, #24]	; (800d0e0 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800d0c6:	a801      	add	r0, sp, #4
 800d0c8:	6819      	ldr	r1, [r3, #0]
 800d0ca:	f003 f9a7 	bl	801041c <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800d0ce:	4b05      	ldr	r3, [pc, #20]	; (800d0e4 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800d0d0:	8ba2      	ldrh	r2, [r4, #28]
 800d0d2:	6819      	ldr	r1, [r3, #0]
 800d0d4:	a801      	add	r0, sp, #4
 800d0d6:	f003 f9c1 	bl	801045c <NetworkParams::Load(char const*, unsigned int)>
 800d0da:	b002      	add	sp, #8
 800d0dc:	bd10      	pop	{r4, pc}
 800d0de:	bf00      	nop
 800d0e0:	20002edc 	ldrdcs	r2, [r0], -ip
 800d0e4:	20001e88 	andcs	r1, r0, r8, lsl #29

0800d0e8 <RemoteConfig::HandleSetArtnetTxt()>:
 800d0e8:	b510      	push	{r4, lr}
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	4b06      	ldr	r3, [pc, #24]	; (800d108 <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 800d0ee:	b0a4      	sub	sp, #144	; 0x90
 800d0f0:	6819      	ldr	r1, [r3, #0]
 800d0f2:	a801      	add	r0, sp, #4
 800d0f4:	f7fc fce2 	bl	8009abc <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800d0f8:	4b04      	ldr	r3, [pc, #16]	; (800d10c <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800d0fa:	8ba2      	ldrh	r2, [r4, #28]
 800d0fc:	6819      	ldr	r1, [r3, #0]
 800d0fe:	a801      	add	r0, sp, #4
 800d100:	f7fc fd0e 	bl	8009b20 <ArtNetParams::Load(char const*, unsigned int)>
 800d104:	b024      	add	sp, #144	; 0x90
 800d106:	bd10      	pop	{r4, pc}
 800d108:	20002ed0 	ldrdcs	r2, [r0], -r0
 800d10c:	20001e88 	andcs	r1, r0, r8, lsl #29

0800d110 <RemoteConfig::HandleSetParamsTxt()>:
 800d110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d112:	4604      	mov	r4, r0
 800d114:	4b06      	ldr	r3, [pc, #24]	; (800d130 <RemoteConfig::HandleSetParamsTxt()+0x20>)
 800d116:	4668      	mov	r0, sp
 800d118:	6819      	ldr	r1, [r3, #0]
 800d11a:	f7fe fe2b 	bl	800bd74 <DmxParams::DmxParams(DmxParamsStore*)>
 800d11e:	4b05      	ldr	r3, [pc, #20]	; (800d134 <RemoteConfig::HandleSetParamsTxt()+0x24>)
 800d120:	4668      	mov	r0, sp
 800d122:	8ba2      	ldrh	r2, [r4, #28]
 800d124:	6819      	ldr	r1, [r3, #0]
 800d126:	f7fe fe3d 	bl	800bda4 <DmxParams::Load(char const*, unsigned int)>
 800d12a:	b004      	add	sp, #16
 800d12c:	bd10      	pop	{r4, pc}
 800d12e:	bf00      	nop
 800d130:	20002ed8 	ldrdcs	r2, [r0], -r8
 800d134:	20001e88 	andcs	r1, r0, r8, lsl #29

0800d138 <RemoteConfig::HandleSetDisplayTxt()>:
 800d138:	b510      	push	{r4, lr}
 800d13a:	4604      	mov	r4, r0
 800d13c:	4b06      	ldr	r3, [pc, #24]	; (800d158 <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 800d13e:	b08a      	sub	sp, #40	; 0x28
 800d140:	6819      	ldr	r1, [r3, #0]
 800d142:	4668      	mov	r0, sp
 800d144:	f004 fb1e 	bl	8011784 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800d148:	4b04      	ldr	r3, [pc, #16]	; (800d15c <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800d14a:	4668      	mov	r0, sp
 800d14c:	8ba2      	ldrh	r2, [r4, #28]
 800d14e:	6819      	ldr	r1, [r3, #0]
 800d150:	f004 fb32 	bl	80117b8 <DisplayUdfParams::Load(char const*, unsigned int)>
 800d154:	b00a      	add	sp, #40	; 0x28
 800d156:	bd10      	pop	{r4, pc}
 800d158:	20002ed4 	ldrdcs	r2, [r0], -r4
 800d15c:	20001e88 	andcs	r1, r0, r8, lsl #29

0800d160 <RemoteConfig::HandleFactory()>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	2400      	movs	r4, #0
 800d164:	4d04      	ldr	r5, [pc, #16]	; (800d178 <RemoteConfig::HandleFactory()+0x18>)
 800d166:	4621      	mov	r1, r4
 800d168:	6828      	ldr	r0, [r5, #0]
 800d16a:	3401      	adds	r4, #1
 800d16c:	f000 fee6 	bl	800df3c <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800d170:	2c1c      	cmp	r4, #28
 800d172:	d1f8      	bne.n	800d166 <RemoteConfig::HandleFactory()+0x6>
 800d174:	bd38      	pop	{r3, r4, r5, pc}
 800d176:	bf00      	nop
 800d178:	20002ec8 	andcs	r2, r0, r8, asr #29

0800d17c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800d17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d17e:	460b      	mov	r3, r1
 800d180:	8885      	ldrh	r5, [r0, #4]
 800d182:	88c1      	ldrh	r1, [r0, #6]
 800d184:	42a9      	cmp	r1, r5
 800d186:	d214      	bcs.n	800d1b2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800d188:	4604      	mov	r4, r0
 800d18a:	6800      	ldr	r0, [r0, #0]
 800d18c:	1a6d      	subs	r5, r5, r1
 800d18e:	4408      	add	r0, r1
 800d190:	7a21      	ldrb	r1, [r4, #8]
 800d192:	b91a      	cbnz	r2, 800d19c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800d194:	b919      	cbnz	r1, 800d19e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800d196:	4a0a      	ldr	r2, [pc, #40]	; (800d1c0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800d198:	9100      	str	r1, [sp, #0]
 800d19a:	e002      	b.n	800d1a2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d19c:	b159      	cbz	r1, 800d1b6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800d19e:	9200      	str	r2, [sp, #0]
 800d1a0:	4a08      	ldr	r2, [pc, #32]	; (800d1c4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800d1a2:	4629      	mov	r1, r5
 800d1a4:	f005 ff94 	bl	80130d0 <snprintf>
 800d1a8:	4285      	cmp	r5, r0
 800d1aa:	bfa2      	ittt	ge
 800d1ac:	88e3      	ldrhge	r3, [r4, #6]
 800d1ae:	181b      	addge	r3, r3, r0
 800d1b0:	80e3      	strhge	r3, [r4, #6]
 800d1b2:	b003      	add	sp, #12
 800d1b4:	bd30      	pop	{r4, r5, pc}
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	9200      	str	r2, [sp, #0]
 800d1ba:	4a03      	ldr	r2, [pc, #12]	; (800d1c8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800d1bc:	e7f1      	b.n	800d1a2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d1be:	bf00      	nop
 800d1c0:	080152d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, ip, lr}
 800d1c4:	080152ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, ip, lr}
 800d1c8:	080152d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, lr}

0800d1cc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800d1cc:	b510      	push	{r4, lr}
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	2220      	movs	r2, #32
 800d1d2:	f840 1b04 	str.w	r1, [r0], #4
 800d1d6:	2100      	movs	r1, #0
 800d1d8:	f005 fd30 	bl	8012c3c <memset>
 800d1dc:	4620      	mov	r0, r4
 800d1de:	bd10      	pop	{r4, pc}

0800d1e0 <RemoteConfigParams::Load()>:
 800d1e0:	b508      	push	{r3, lr}
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	4601      	mov	r1, r0
 800d1e6:	6043      	str	r3, [r0, #4]
 800d1e8:	6800      	ldr	r0, [r0, #0]
 800d1ea:	b120      	cbz	r0, 800d1f6 <RemoteConfigParams::Load()+0x16>
 800d1ec:	6803      	ldr	r3, [r0, #0]
 800d1ee:	3104      	adds	r1, #4
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	4798      	blx	r3
 800d1f4:	2001      	movs	r0, #1
 800d1f6:	bd08      	pop	{r3, pc}

0800d1f8 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1fc:	460d      	mov	r5, r1
 800d1fe:	4616      	mov	r6, r2
 800d200:	4604      	mov	r4, r0
 800d202:	6043      	str	r3, [r0, #4]
 800d204:	4602      	mov	r2, r0
 800d206:	490a      	ldr	r1, [pc, #40]	; (800d230 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800d208:	4668      	mov	r0, sp
 800d20a:	f004 fee1 	bl	8011fd0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800d20e:	4632      	mov	r2, r6
 800d210:	4629      	mov	r1, r5
 800d212:	4668      	mov	r0, sp
 800d214:	f004 fee0 	bl	8011fd8 <ReadConfigFile::Read(char const*, unsigned int)>
 800d218:	4621      	mov	r1, r4
 800d21a:	f851 0b04 	ldr.w	r0, [r1], #4
 800d21e:	6803      	ldr	r3, [r0, #0]
 800d220:	689b      	ldr	r3, [r3, #8]
 800d222:	4798      	blx	r3
 800d224:	4668      	mov	r0, sp
 800d226:	f004 fed6 	bl	8011fd6 <ReadConfigFile::~ReadConfigFile()>
 800d22a:	b002      	add	sp, #8
 800d22c:	bd70      	pop	{r4, r5, r6, pc}
 800d22e:	bf00      	nop
 800d230:	0800d2f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, ip, lr, pc}

0800d234 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800d234:	6843      	ldr	r3, [r0, #4]
 800d236:	b111      	cbz	r1, 800d23e <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800d238:	4313      	orrs	r3, r2
 800d23a:	6043      	str	r3, [r0, #4]
 800d23c:	4770      	bx	lr
 800d23e:	ea23 0302 	bic.w	r3, r3, r2
 800d242:	e7fa      	b.n	800d23a <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800d244 <RemoteConfigParams::callbackFunction(char const*)>:
 800d244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d246:	460d      	mov	r5, r1
 800d248:	4604      	mov	r4, r0
 800d24a:	4923      	ldr	r1, [pc, #140]	; (800d2d8 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800d24c:	4628      	mov	r0, r5
 800d24e:	f10d 0203 	add.w	r2, sp, #3
 800d252:	f004 ff97 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d256:	b938      	cbnz	r0, 800d268 <RemoteConfigParams::callbackFunction(char const*)+0x24>
 800d258:	2201      	movs	r2, #1
 800d25a:	4620      	mov	r0, r4
 800d25c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800d260:	f7ff ffe8 	bl	800d234 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800d264:	b003      	add	sp, #12
 800d266:	bd30      	pop	{r4, r5, pc}
 800d268:	4628      	mov	r0, r5
 800d26a:	491c      	ldr	r1, [pc, #112]	; (800d2dc <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800d26c:	f10d 0203 	add.w	r2, sp, #3
 800d270:	f004 ff88 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d274:	b908      	cbnz	r0, 800d27a <RemoteConfigParams::callbackFunction(char const*)+0x36>
 800d276:	2202      	movs	r2, #2
 800d278:	e7ef      	b.n	800d25a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d27a:	4628      	mov	r0, r5
 800d27c:	4918      	ldr	r1, [pc, #96]	; (800d2e0 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800d27e:	f10d 0203 	add.w	r2, sp, #3
 800d282:	f004 ff7f 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d286:	b908      	cbnz	r0, 800d28c <RemoteConfigParams::callbackFunction(char const*)+0x48>
 800d288:	2204      	movs	r2, #4
 800d28a:	e7e6      	b.n	800d25a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d28c:	4628      	mov	r0, r5
 800d28e:	4915      	ldr	r1, [pc, #84]	; (800d2e4 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800d290:	f10d 0203 	add.w	r2, sp, #3
 800d294:	f004 ff76 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d298:	b908      	cbnz	r0, 800d29e <RemoteConfigParams::callbackFunction(char const*)+0x5a>
 800d29a:	2208      	movs	r2, #8
 800d29c:	e7dd      	b.n	800d25a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d29e:	4628      	mov	r0, r5
 800d2a0:	4911      	ldr	r1, [pc, #68]	; (800d2e8 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800d2a2:	f10d 0203 	add.w	r2, sp, #3
 800d2a6:	f004 ff6d 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d2aa:	b908      	cbnz	r0, 800d2b0 <RemoteConfigParams::callbackFunction(char const*)+0x6c>
 800d2ac:	2220      	movs	r2, #32
 800d2ae:	e7d4      	b.n	800d25a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d2b0:	2317      	movs	r3, #23
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	9301      	str	r3, [sp, #4]
 800d2b6:	490d      	ldr	r1, [pc, #52]	; (800d2ec <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800d2b8:	ab01      	add	r3, sp, #4
 800d2ba:	f104 020c 	add.w	r2, r4, #12
 800d2be:	f004 febf 	bl	8012040 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	d1ce      	bne.n	800d264 <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800d2c6:	9b01      	ldr	r3, [sp, #4]
 800d2c8:	4423      	add	r3, r4
 800d2ca:	7318      	strb	r0, [r3, #12]
 800d2cc:	6863      	ldr	r3, [r4, #4]
 800d2ce:	f043 0310 	orr.w	r3, r3, #16
 800d2d2:	6063      	str	r3, [r4, #4]
 800d2d4:	e7c6      	b.n	800d264 <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800d2d6:	bf00      	nop
 800d2d8:	08015dc6 	stmdaeq	r1, {r1, r2, r6, r7, r8, sl, fp, ip, lr}
 800d2dc:	08015de7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, sl, fp, ip, lr}
 800d2e0:	08015df5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 800d2e4:	08015e03 	stmdaeq	r1, {r0, r1, r9, sl, fp, ip, lr}
 800d2e8:	08015e11 	stmdaeq	r1, {r0, r4, r9, sl, fp, ip, lr}
 800d2ec:	08015dda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, sl, fp, ip, lr}

0800d2f0 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800d2f0:	f7ff bfa8 	b.w	800d244 <RemoteConfigParams::callbackFunction(char const*)>

0800d2f4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	4615      	mov	r5, r2
 800d2fa:	461e      	mov	r6, r3
 800d2fc:	b086      	sub	sp, #24
 800d2fe:	3004      	adds	r0, #4
 800d300:	2900      	cmp	r1, #0
 800d302:	d040      	beq.n	800d386 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x92>
 800d304:	2220      	movs	r2, #32
 800d306:	f005 fc82 	bl	8012c0e <memmove>
 800d30a:	4633      	mov	r3, r6
 800d30c:	462a      	mov	r2, r5
 800d30e:	4937      	ldr	r1, [pc, #220]	; (800d3ec <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800d310:	a803      	add	r0, sp, #12
 800d312:	f004 fd8d 	bl	8011e30 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800d316:	6862      	ldr	r2, [r4, #4]
 800d318:	4935      	ldr	r1, [pc, #212]	; (800d3f0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800d31a:	f002 0201 	and.w	r2, r2, #1
 800d31e:	a803      	add	r0, sp, #12
 800d320:	f7ff ff2c 	bl	800d17c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d324:	6862      	ldr	r2, [r4, #4]
 800d326:	4933      	ldr	r1, [pc, #204]	; (800d3f4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800d328:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800d32c:	a803      	add	r0, sp, #12
 800d32e:	f7ff ff25 	bl	800d17c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d332:	6862      	ldr	r2, [r4, #4]
 800d334:	4930      	ldr	r1, [pc, #192]	; (800d3f8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800d336:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800d33a:	a803      	add	r0, sp, #12
 800d33c:	f7ff ff1e 	bl	800d17c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d340:	6862      	ldr	r2, [r4, #4]
 800d342:	492e      	ldr	r1, [pc, #184]	; (800d3fc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800d344:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800d348:	a803      	add	r0, sp, #12
 800d34a:	f7ff ff17 	bl	800d17c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d34e:	6862      	ldr	r2, [r4, #4]
 800d350:	492b      	ldr	r1, [pc, #172]	; (800d400 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800d352:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800d356:	a803      	add	r0, sp, #12
 800d358:	f7ff ff10 	bl	800d17c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d35c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800d360:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800d364:	42a9      	cmp	r1, r5
 800d366:	d223      	bcs.n	800d3b0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbc>
 800d368:	9803      	ldr	r0, [sp, #12]
 800d36a:	1a6d      	subs	r5, r5, r1
 800d36c:	4408      	add	r0, r1
 800d36e:	6861      	ldr	r1, [r4, #4]
 800d370:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800d374:	06c9      	lsls	r1, r1, #27
 800d376:	f104 030c 	add.w	r3, r4, #12
 800d37a:	d40b      	bmi.n	800d394 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa0>
 800d37c:	b95a      	cbnz	r2, 800d396 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	4a20      	ldr	r2, [pc, #128]	; (800d404 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800d382:	4b21      	ldr	r3, [pc, #132]	; (800d408 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800d384:	e00a      	b.n	800d39c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800d386:	6823      	ldr	r3, [r4, #0]
 800d388:	4601      	mov	r1, r0
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	4618      	mov	r0, r3
 800d38e:	68d2      	ldr	r2, [r2, #12]
 800d390:	4790      	blx	r2
 800d392:	e7ba      	b.n	800d30a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800d394:	b32a      	cbz	r2, 800d3e2 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xee>
 800d396:	9300      	str	r3, [sp, #0]
 800d398:	4a1c      	ldr	r2, [pc, #112]	; (800d40c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800d39a:	4b1b      	ldr	r3, [pc, #108]	; (800d408 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800d39c:	4629      	mov	r1, r5
 800d39e:	f005 fe97 	bl	80130d0 <snprintf>
 800d3a2:	4285      	cmp	r5, r0
 800d3a4:	bfa2      	ittt	ge
 800d3a6:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800d3aa:	18c0      	addge	r0, r0, r3
 800d3ac:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800d3b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d3b4:	b17b      	cbz	r3, 800d3d6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe2>
 800d3b6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d3ba:	9b03      	ldr	r3, [sp, #12]
 800d3bc:	4413      	add	r3, r2
 800d3be:	227d      	movs	r2, #125	; 0x7d
 800d3c0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d3c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d3c8:	9903      	ldr	r1, [sp, #12]
 800d3ca:	54ca      	strb	r2, [r1, r3]
 800d3cc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	f8ad 3012 	strh.w	r3, [sp, #18]
 800d3d6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3dc:	601a      	str	r2, [r3, #0]
 800d3de:	b006      	add	sp, #24
 800d3e0:	bd70      	pop	{r4, r5, r6, pc}
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	4a0a      	ldr	r2, [pc, #40]	; (800d410 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800d3e6:	4b08      	ldr	r3, [pc, #32]	; (800d408 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800d3e8:	e7d8      	b.n	800d39c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800d3ea:	bf00      	nop
 800d3ec:	08015dce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r8, sl, fp, ip, lr}
 800d3f0:	08015dc6 	stmdaeq	r1, {r1, r2, r6, r7, r8, sl, fp, ip, lr}
 800d3f4:	08015de7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, sl, fp, ip, lr}
 800d3f8:	08015df5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 800d3fc:	08015e03 	stmdaeq	r1, {r0, r1, r9, sl, fp, ip, lr}
 800d400:	08015e11 	stmdaeq	r1, {r0, r4, r9, sl, fp, ip, lr}
 800d404:	080152ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r9, ip, lr}
 800d408:	08015dda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, sl, fp, ip, lr}
 800d40c:	080152df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r9, ip, lr}
 800d410:	080152eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, ip, lr}

0800d414 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800d414:	b513      	push	{r0, r1, r4, lr}
 800d416:	6804      	ldr	r4, [r0, #0]
 800d418:	b914      	cbnz	r4, 800d420 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800d41a:	601c      	str	r4, [r3, #0]
 800d41c:	b002      	add	sp, #8
 800d41e:	bd10      	pop	{r4, pc}
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	4613      	mov	r3, r2
 800d424:	460a      	mov	r2, r1
 800d426:	2100      	movs	r1, #0
 800d428:	f7ff ff64 	bl	800d2f4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800d42c:	e7f6      	b.n	800d41c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800d42e <RemoteConfigParams::Set(RemoteConfig*)>:
 800d42e:	b538      	push	{r3, r4, r5, lr}
 800d430:	460c      	mov	r4, r1
 800d432:	4605      	mov	r5, r0
 800d434:	6841      	ldr	r1, [r0, #4]
 800d436:	4620      	mov	r0, r4
 800d438:	f001 0101 	and.w	r1, r1, #1
 800d43c:	f7ff fc50 	bl	800cce0 <RemoteConfig::SetDisable(bool)>
 800d440:	686b      	ldr	r3, [r5, #4]
 800d442:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800d446:	7362      	strb	r2, [r4, #13]
 800d448:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800d44c:	73a2      	strb	r2, [r4, #14]
 800d44e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800d452:	73e2      	strb	r2, [r4, #15]
 800d454:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800d458:	06db      	lsls	r3, r3, #27
 800d45a:	7422      	strb	r2, [r4, #16]
 800d45c:	d506      	bpl.n	800d46c <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800d45e:	4620      	mov	r0, r4
 800d460:	f105 010c 	add.w	r1, r5, #12
 800d464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d468:	f7ff bc5a 	b.w	800cd20 <RemoteConfig::SetDisplayName(char const*)>
 800d46c:	bd38      	pop	{r3, r4, r5, pc}

0800d46e <RemoteConfigParams::Dump()>:
 800d46e:	4770      	bx	lr

0800d470 <RemoteConfig::HandleReboot()>:
 800d470:	7b83      	ldrb	r3, [r0, #14]
 800d472:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d474:	2b00      	cmp	r3, #0
 800d476:	d03d      	beq.n	800d4f4 <RemoteConfig::HandleReboot()+0x84>
 800d478:	2301      	movs	r3, #1
 800d47a:	4c1f      	ldr	r4, [pc, #124]	; (800d4f8 <RemoteConfig::HandleReboot()+0x88>)
 800d47c:	7443      	strb	r3, [r0, #17]
 800d47e:	6825      	ldr	r5, [r4, #0]
 800d480:	69a8      	ldr	r0, [r5, #24]
 800d482:	b138      	cbz	r0, 800d494 <RemoteConfig::HandleReboot()+0x24>
 800d484:	2100      	movs	r1, #0
 800d486:	6803      	ldr	r3, [r0, #0]
 800d488:	7429      	strb	r1, [r5, #16]
 800d48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d48c:	4798      	blx	r3
 800d48e:	4b1b      	ldr	r3, [pc, #108]	; (800d4fc <RemoteConfig::HandleReboot()+0x8c>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	606b      	str	r3, [r5, #4]
 800d494:	4d1a      	ldr	r5, [pc, #104]	; (800d500 <RemoteConfig::HandleReboot()+0x90>)
 800d496:	6828      	ldr	r0, [r5, #0]
 800d498:	f000 fdd6 	bl	800e048 <SpiFlashStore::Flash()>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	d1fa      	bne.n	800d496 <RemoteConfig::HandleReboot()+0x26>
 800d4a0:	4b18      	ldr	r3, [pc, #96]	; (800d504 <RemoteConfig::HandleReboot()+0x94>)
 800d4a2:	6818      	ldr	r0, [r3, #0]
 800d4a4:	f002 fd2c 	bl	800ff00 <Network::Shutdown()>
 800d4a8:	4817      	ldr	r0, [pc, #92]	; (800d508 <RemoteConfig::HandleReboot()+0x98>)
 800d4aa:	f005 fde9 	bl	8013080 <printf>
 800d4ae:	6823      	ldr	r3, [r4, #0]
 800d4b0:	6998      	ldr	r0, [r3, #24]
 800d4b2:	b110      	cbz	r0, 800d4ba <RemoteConfig::HandleReboot()+0x4a>
 800d4b4:	6803      	ldr	r3, [r0, #0]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	4798      	blx	r3
 800d4ba:	6824      	ldr	r4, [r4, #0]
 800d4bc:	4913      	ldr	r1, [pc, #76]	; (800d50c <RemoteConfig::HandleReboot()+0x9c>)
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f7fa f8bc 	bl	800763c <Display::TextStatus(char const*)>
 800d4c4:	7c63      	ldrb	r3, [r4, #17]
 800d4c6:	b18b      	cbz	r3, 800d4ec <RemoteConfig::HandleReboot()+0x7c>
 800d4c8:	2312      	movs	r3, #18
 800d4ca:	f88d 3004 	strb.w	r3, [sp, #4]
 800d4ce:	23bf      	movs	r3, #191	; 0xbf
 800d4d0:	7a20      	ldrb	r0, [r4, #8]
 800d4d2:	f88d 3005 	strb.w	r3, [sp, #5]
 800d4d6:	f88d 3006 	strb.w	r3, [sp, #6]
 800d4da:	f006 fdf7 	bl	80140cc <gd32_i2c_set_address(unsigned char)>
 800d4de:	68e0      	ldr	r0, [r4, #12]
 800d4e0:	f006 fdec 	bl	80140bc <gd32_i2c_set_baudrate(unsigned int)>
 800d4e4:	2103      	movs	r1, #3
 800d4e6:	a801      	add	r0, sp, #4
 800d4e8:	f006 fdf6 	bl	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 800d4ec:	4b08      	ldr	r3, [pc, #32]	; (800d510 <RemoteConfig::HandleReboot()+0xa0>)
 800d4ee:	6818      	ldr	r0, [r3, #0]
 800d4f0:	f005 fa8c 	bl	8012a0c <Hardware::Reboot()>
 800d4f4:	b003      	add	sp, #12
 800d4f6:	bd30      	pop	{r4, r5, pc}
 800d4f8:	2000ae04 	andcs	sl, r0, r4, lsl #28
 800d4fc:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800d500:	20002ec8 	andcs	r2, r0, r8, asr #29
 800d504:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800d508:	08015a08 	stmdaeq	r1, {r3, r9, fp, ip, lr}
 800d50c:	08015a17 	stmdaeq	r1, {r0, r1, r2, r4, r9, fp, ip, lr}
 800d510:	2000aef4 	strdcs	sl, [r0], -r4

0800d514 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800d514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d518:	2000      	movs	r0, #0
 800d51a:	4d12      	ldr	r5, [pc, #72]	; (800d564 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800d51c:	f10d 0c04 	add.w	ip, sp, #4
 800d520:	6814      	ldr	r4, [r2, #0]
 800d522:	7d2b      	ldrb	r3, [r5, #20]
 800d524:	692e      	ldr	r6, [r5, #16]
 800d526:	42a3      	cmp	r3, r4
 800d528:	bf34      	ite	cc
 800d52a:	4664      	movcc	r4, ip
 800d52c:	4614      	movcs	r4, r2
 800d52e:	9301      	str	r3, [sp, #4]
 800d530:	6827      	ldr	r7, [r4, #0]
 800d532:	460c      	mov	r4, r1
 800d534:	3e01      	subs	r6, #1
 800d536:	440f      	add	r7, r1
 800d538:	42bc      	cmp	r4, r7
 800d53a:	d011      	beq.n	800d560 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800d53c:	f894 8000 	ldrb.w	r8, [r4]
 800d540:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800d544:	45f0      	cmp	r8, lr
 800d546:	d009      	beq.n	800d55c <RemoteConfig::GetIndex(void const*, unsigned int&)+0x48>
 800d548:	3001      	adds	r0, #1
 800d54a:	2805      	cmp	r0, #5
 800d54c:	f105 051c 	add.w	r5, r5, #28
 800d550:	d1e6      	bne.n	800d520 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800d552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d556:	b002      	add	sp, #8
 800d558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d55c:	3401      	adds	r4, #1
 800d55e:	e7eb      	b.n	800d538 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800d560:	6013      	str	r3, [r2, #0]
 800d562:	e7f8      	b.n	800d556 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x42>
 800d564:	08015a60 	stmdaeq	r1, {r5, r6, r9, fp, ip, lr}

0800d568 <strcmp>:
 800d568:	1e43      	subs	r3, r0, #1
 800d56a:	3901      	subs	r1, #1
 800d56c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d570:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d574:	4290      	cmp	r0, r2
 800d576:	d102      	bne.n	800d57e <strcmp+0x16>
 800d578:	2800      	cmp	r0, #0
 800d57a:	d1f7      	bne.n	800d56c <strcmp+0x4>
 800d57c:	4770      	bx	lr
 800d57e:	1a80      	subs	r0, r0, r2
 800d580:	4770      	bx	lr

0800d582 <strcasecmp>:
 800d582:	b530      	push	{r4, r5, lr}
 800d584:	1e42      	subs	r2, r0, #1
 800d586:	3901      	subs	r1, #1
 800d588:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d58c:	4604      	mov	r4, r0
 800d58e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d592:	2b19      	cmp	r3, #25
 800d594:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d598:	bf98      	it	ls
 800d59a:	f100 0420 	addls.w	r4, r0, #32
 800d59e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800d5a2:	2d19      	cmp	r5, #25
 800d5a4:	bf98      	it	ls
 800d5a6:	3320      	addls	r3, #32
 800d5a8:	42a3      	cmp	r3, r4
 800d5aa:	d102      	bne.n	800d5b2 <strcasecmp+0x30>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d1eb      	bne.n	800d588 <strcasecmp+0x6>
 800d5b0:	bd30      	pop	{r4, r5, pc}
 800d5b2:	1ae0      	subs	r0, r4, r3
 800d5b4:	e7fc      	b.n	800d5b0 <strcasecmp+0x2e>
	...

0800d5b8 <PropertiesConfig::EnableJSON(bool)>:
 800d5b8:	4a04      	ldr	r2, [pc, #16]	; (800d5cc <PropertiesConfig::EnableJSON(bool)+0x14>)
 800d5ba:	7813      	ldrb	r3, [r2, #0]
 800d5bc:	b118      	cbz	r0, 800d5c6 <PropertiesConfig::EnableJSON(bool)+0xe>
 800d5be:	f043 0301 	orr.w	r3, r3, #1
 800d5c2:	7013      	strb	r3, [r2, #0]
 800d5c4:	4770      	bx	lr
 800d5c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d5ca:	e7fa      	b.n	800d5c2 <PropertiesConfig::EnableJSON(bool)+0xa>
 800d5cc:	2000ae00 	andcs	sl, r0, r0, lsl #28

0800d5d0 <HttpDaemon::HttpDaemon()>:
 800d5d0:	4a0a      	ldr	r2, [pc, #40]	; (800d5fc <HttpDaemon::HttpDaemon()+0x2c>)
 800d5d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d5d6:	6002      	str	r2, [r0, #0]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800d5de:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800d5e2:	2102      	movs	r1, #2
 800d5e4:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800d5e8:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800d5ec:	60c2      	str	r2, [r0, #12]
 800d5ee:	8402      	strh	r2, [r0, #32]
 800d5f0:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 800d5f4:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 800d5f8:	4770      	bx	lr
 800d5fa:	bf00      	nop
 800d5fc:	08015d46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, ip, lr}

0800d600 <HttpDaemon::Start()>:
 800d600:	4b04      	ldr	r3, [pc, #16]	; (800d614 <HttpDaemon::Start()+0x14>)
 800d602:	b510      	push	{r4, lr}
 800d604:	2150      	movs	r1, #80	; 0x50
 800d606:	4604      	mov	r4, r0
 800d608:	6818      	ldr	r0, [r3, #0]
 800d60a:	f002 fefb 	bl	8010404 <Network::TcpBegin(unsigned short)>
 800d60e:	6120      	str	r0, [r4, #16]
 800d610:	bd10      	pop	{r4, pc}
 800d612:	bf00      	nop
 800d614:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800d618 <HttpDaemon::ParseMethod(char*)>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4604      	mov	r4, r0
 800d61c:	4608      	mov	r0, r1
 800d61e:	491b      	ldr	r1, [pc, #108]	; (800d68c <HttpDaemon::ParseMethod(char*)+0x74>)
 800d620:	f005 fd86 	bl	8013130 <strtok>
 800d624:	4605      	mov	r5, r0
 800d626:	b370      	cbz	r0, 800d686 <HttpDaemon::ParseMethod(char*)+0x6e>
 800d628:	4919      	ldr	r1, [pc, #100]	; (800d690 <HttpDaemon::ParseMethod(char*)+0x78>)
 800d62a:	f7ff ff9d 	bl	800d568 <strcmp>
 800d62e:	b940      	cbnz	r0, 800d642 <HttpDaemon::ParseMethod(char*)+0x2a>
 800d630:	61e0      	str	r0, [r4, #28]
 800d632:	2000      	movs	r0, #0
 800d634:	4915      	ldr	r1, [pc, #84]	; (800d68c <HttpDaemon::ParseMethod(char*)+0x74>)
 800d636:	f005 fd7b 	bl	8013130 <strtok>
 800d63a:	b950      	cbnz	r0, 800d652 <HttpDaemon::ParseMethod(char*)+0x3a>
 800d63c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d640:	bd38      	pop	{r3, r4, r5, pc}
 800d642:	4628      	mov	r0, r5
 800d644:	4913      	ldr	r1, [pc, #76]	; (800d694 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800d646:	f7ff ff8f 	bl	800d568 <strcmp>
 800d64a:	b9e0      	cbnz	r0, 800d686 <HttpDaemon::ParseMethod(char*)+0x6e>
 800d64c:	2301      	movs	r3, #1
 800d64e:	61e3      	str	r3, [r4, #28]
 800d650:	e7ef      	b.n	800d632 <HttpDaemon::ParseMethod(char*)+0x1a>
 800d652:	6060      	str	r0, [r4, #4]
 800d654:	4910      	ldr	r1, [pc, #64]	; (800d698 <HttpDaemon::ParseMethod(char*)+0x80>)
 800d656:	2000      	movs	r0, #0
 800d658:	f005 fd6a 	bl	8013130 <strtok>
 800d65c:	2800      	cmp	r0, #0
 800d65e:	d0ed      	beq.n	800d63c <HttpDaemon::ParseMethod(char*)+0x24>
 800d660:	490e      	ldr	r1, [pc, #56]	; (800d69c <HttpDaemon::ParseMethod(char*)+0x84>)
 800d662:	f7ff ff81 	bl	800d568 <strcmp>
 800d666:	2800      	cmp	r0, #0
 800d668:	d1e8      	bne.n	800d63c <HttpDaemon::ParseMethod(char*)+0x24>
 800d66a:	490d      	ldr	r1, [pc, #52]	; (800d6a0 <HttpDaemon::ParseMethod(char*)+0x88>)
 800d66c:	f005 fd60 	bl	8013130 <strtok>
 800d670:	2800      	cmp	r0, #0
 800d672:	d0e3      	beq.n	800d63c <HttpDaemon::ParseMethod(char*)+0x24>
 800d674:	490b      	ldr	r1, [pc, #44]	; (800d6a4 <HttpDaemon::ParseMethod(char*)+0x8c>)
 800d676:	f7ff ff77 	bl	800d568 <strcmp>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	f240 10f9 	movw	r0, #505	; 0x1f9
 800d680:	bf08      	it	eq
 800d682:	20c8      	moveq	r0, #200	; 0xc8
 800d684:	e7dc      	b.n	800d640 <HttpDaemon::ParseMethod(char*)+0x28>
 800d686:	f240 10f5 	movw	r0, #501	; 0x1f5
 800d68a:	e7d9      	b.n	800d640 <HttpDaemon::ParseMethod(char*)+0x28>
 800d68c:	08016c83 	stmdaeq	r1, {r0, r1, r7, sl, fp, sp, lr}
 800d690:	08015aec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, fp, ip, lr}
 800d694:	08015af0 	stmdaeq	r1, {r4, r5, r6, r7, r9, fp, ip, lr}
 800d698:	08015b5a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, fp, ip, lr}
 800d69c:	08015af5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, fp, ip, lr}
 800d6a0:	08015afa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, fp, ip, lr}
 800d6a4:	08015afd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r9, fp, ip, lr}

0800d6a8 <HttpDaemon::ParseHeaderField(char*)>:
 800d6a8:	b538      	push	{r3, r4, r5, lr}
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	4608      	mov	r0, r1
 800d6ae:	491d      	ldr	r1, [pc, #116]	; (800d724 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800d6b0:	f005 fd3e 	bl	8013130 <strtok>
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	b910      	cbnz	r0, 800d6be <HttpDaemon::ParseHeaderField(char*)+0x16>
 800d6b8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d6bc:	bd38      	pop	{r3, r4, r5, pc}
 800d6be:	491a      	ldr	r1, [pc, #104]	; (800d728 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800d6c0:	f7ff ff5f 	bl	800d582 <strcasecmp>
 800d6c4:	b970      	cbnz	r0, 800d6e4 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800d6c6:	4919      	ldr	r1, [pc, #100]	; (800d72c <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800d6c8:	f005 fd32 	bl	8013130 <strtok>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d0f3      	beq.n	800d6b8 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800d6d0:	4917      	ldr	r1, [pc, #92]	; (800d730 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800d6d2:	f7ff ff49 	bl	800d568 <strcmp>
 800d6d6:	b108      	cbz	r0, 800d6dc <HttpDaemon::ParseHeaderField(char*)+0x34>
 800d6d8:	20c8      	movs	r0, #200	; 0xc8
 800d6da:	e7ef      	b.n	800d6bc <HttpDaemon::ParseHeaderField(char*)+0x14>
 800d6dc:	2301      	movs	r3, #1
 800d6de:	f885 3020 	strb.w	r3, [r5, #32]
 800d6e2:	e7f9      	b.n	800d6d8 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	4913      	ldr	r1, [pc, #76]	; (800d734 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800d6e8:	f7ff ff4b 	bl	800d582 <strcasecmp>
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d1f2      	bne.n	800d6d8 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800d6f2:	4911      	ldr	r1, [pc, #68]	; (800d738 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800d6f4:	f005 fd1c 	bl	8013130 <strtok>
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	d0dd      	beq.n	800d6b8 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800d6fc:	1e42      	subs	r2, r0, #1
 800d6fe:	4623      	mov	r3, r4
 800d700:	200a      	movs	r0, #10
 800d702:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800d706:	b151      	cbz	r1, 800d71e <HttpDaemon::ParseHeaderField(char*)+0x76>
 800d708:	3930      	subs	r1, #48	; 0x30
 800d70a:	2909      	cmp	r1, #9
 800d70c:	d8d4      	bhi.n	800d6b8 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800d70e:	fb00 1303 	mla	r3, r0, r3, r1
 800d712:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800d716:	d9f4      	bls.n	800d702 <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800d718:	f240 109d 	movw	r0, #413	; 0x19d
 800d71c:	e7ce      	b.n	800d6bc <HttpDaemon::ParseHeaderField(char*)+0x14>
 800d71e:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 800d722:	e7d9      	b.n	800d6d8 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800d724:	08015b01 	stmdaeq	r1, {r0, r8, r9, fp, ip, lr}
 800d728:	08015b03 	stmdaeq	r1, {r0, r1, r8, r9, fp, ip, lr}
 800d72c:	08015b10 	stmdaeq	r1, {r4, r8, r9, fp, ip, lr}
 800d730:	08015b13 	stmdaeq	r1, {r0, r1, r4, r8, r9, fp, ip, lr}
 800d734:	08015b24 	stmdaeq	r1, {r2, r5, r8, r9, fp, ip, lr}
 800d738:	08016c83 	stmdaeq	r1, {r0, r1, r7, sl, fp, sp, lr}

0800d73c <HttpDaemon::ParseRequest()>:
 800d73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73e:	2400      	movs	r4, #0
 800d740:	4605      	mov	r5, r0
 800d742:	4622      	mov	r2, r4
 800d744:	4626      	mov	r6, r4
 800d746:	68c1      	ldr	r1, [r0, #12]
 800d748:	f880 4020 	strb.w	r4, [r0, #32]
 800d74c:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 800d750:	8aab      	ldrh	r3, [r5, #20]
 800d752:	42a3      	cmp	r3, r4
 800d754:	d923      	bls.n	800d79e <HttpDaemon::ParseRequest()+0x62>
 800d756:	68eb      	ldr	r3, [r5, #12]
 800d758:	5d18      	ldrb	r0, [r3, r4]
 800d75a:	280a      	cmp	r0, #10
 800d75c:	d10e      	bne.n	800d77c <HttpDaemon::ParseRequest()+0x40>
 800d75e:	4423      	add	r3, r4
 800d760:	f803 6c01 	strb.w	r6, [r3, #-1]
 800d764:	1c57      	adds	r7, r2, #1
 800d766:	b962      	cbnz	r2, 800d782 <HttpDaemon::ParseRequest()+0x46>
 800d768:	4628      	mov	r0, r5
 800d76a:	f7ff ff55 	bl	800d618 <HttpDaemon::ParseMethod(char*)>
 800d76e:	28c8      	cmp	r0, #200	; 0xc8
 800d770:	d116      	bne.n	800d7a0 <HttpDaemon::ParseRequest()+0x64>
 800d772:	463a      	mov	r2, r7
 800d774:	68e9      	ldr	r1, [r5, #12]
 800d776:	3401      	adds	r4, #1
 800d778:	b2a4      	uxth	r4, r4
 800d77a:	4421      	add	r1, r4
 800d77c:	3401      	adds	r4, #1
 800d77e:	b2a4      	uxth	r4, r4
 800d780:	e7e6      	b.n	800d750 <HttpDaemon::ParseRequest()+0x14>
 800d782:	7808      	ldrb	r0, [r1, #0]
 800d784:	b968      	cbnz	r0, 800d7a2 <HttpDaemon::ParseRequest()+0x66>
 800d786:	696b      	ldr	r3, [r5, #20]
 800d788:	3b01      	subs	r3, #1
 800d78a:	1b1b      	subs	r3, r3, r4
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 800d792:	b123      	cbz	r3, 800d79e <HttpDaemon::ParseRequest()+0x62>
 800d794:	68ea      	ldr	r2, [r5, #12]
 800d796:	3401      	adds	r4, #1
 800d798:	4414      	add	r4, r2
 800d79a:	60ac      	str	r4, [r5, #8]
 800d79c:	54e0      	strb	r0, [r4, r3]
 800d79e:	20c8      	movs	r0, #200	; 0xc8
 800d7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	f7ff ff80 	bl	800d6a8 <HttpDaemon::ParseHeaderField(char*)>
 800d7a8:	e7e1      	b.n	800d76e <HttpDaemon::ParseRequest()+0x32>
	...

0800d7ac <HttpDaemon::HandleGetTxt()>:
 800d7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b0:	6847      	ldr	r7, [r0, #4]
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	1dbd      	adds	r5, r7, #6
 800d7b6:	462b      	mov	r3, r5
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	7802      	ldrb	r2, [r0, #0]
 800d7bc:	3301      	adds	r3, #1
 800d7be:	2a00      	cmp	r2, #0
 800d7c0:	d1fa      	bne.n	800d7b8 <HttpDaemon::HandleGetTxt()+0xc>
 800d7c2:	1b40      	subs	r0, r0, r5
 800d7c4:	2804      	cmp	r0, #4
 800d7c6:	d925      	bls.n	800d814 <HttpDaemon::HandleGetTxt()+0x68>
 800d7c8:	3804      	subs	r0, #4
 800d7ca:	4915      	ldr	r1, [pc, #84]	; (800d820 <HttpDaemon::HandleGetTxt()+0x74>)
 800d7cc:	4428      	add	r0, r5
 800d7ce:	f7ff fecb 	bl	800d568 <strcmp>
 800d7d2:	b9f8      	cbnz	r0, 800d814 <HttpDaemon::HandleGetTxt()+0x68>
 800d7d4:	4b13      	ldr	r3, [pc, #76]	; (800d824 <HttpDaemon::HandleGetTxt()+0x78>)
 800d7d6:	2001      	movs	r0, #1
 800d7d8:	f893 8000 	ldrb.w	r8, [r3]
 800d7dc:	f7ff feec 	bl	800d5b8 <PropertiesConfig::EnableJSON(bool)>
 800d7e0:	4b11      	ldr	r3, [pc, #68]	; (800d828 <HttpDaemon::HandleGetTxt()+0x7c>)
 800d7e2:	f240 529b 	movw	r2, #1435	; 0x59b
 800d7e6:	4629      	mov	r1, r5
 800d7e8:	6818      	ldr	r0, [r3, #0]
 800d7ea:	f7ff fab1 	bl	800cd50 <RemoteConfig::HandleGet(void*, unsigned int)>
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	f008 0801 	and.w	r8, r8, #1
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	f7ff fedf 	bl	800d5b8 <PropertiesConfig::EnableJSON(bool)>
 800d7fa:	b15e      	cbz	r6, 800d814 <HttpDaemon::HandleGetTxt()+0x68>
 800d7fc:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 800d800:	3606      	adds	r6, #6
 800d802:	3422      	adds	r4, #34	; 0x22
 800d804:	443e      	add	r6, r7
 800d806:	42b5      	cmp	r5, r6
 800d808:	d008      	beq.n	800d81c <HttpDaemon::HandleGetTxt()+0x70>
 800d80a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d80e:	f804 3b01 	strb.w	r3, [r4], #1
 800d812:	e7f8      	b.n	800d806 <HttpDaemon::HandleGetTxt()+0x5a>
 800d814:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d81c:	20c8      	movs	r0, #200	; 0xc8
 800d81e:	e7fb      	b.n	800d818 <HttpDaemon::HandleGetTxt()+0x6c>
 800d820:	08015a2c 	stmdaeq	r1, {r2, r3, r5, r9, fp, ip, lr}
 800d824:	2000ae00 	andcs	sl, r0, r0, lsl #28
 800d828:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0

0800d82c <HttpDaemon::HandleGet()>:
 800d82c:	b570      	push	{r4, r5, r6, lr}
 800d82e:	6845      	ldr	r5, [r0, #4]
 800d830:	4604      	mov	r4, r0
 800d832:	4943      	ldr	r1, [pc, #268]	; (800d940 <HttpDaemon::HandleGet()+0x114>)
 800d834:	4628      	mov	r0, r5
 800d836:	f7ff fe97 	bl	800d568 <strcmp>
 800d83a:	b120      	cbz	r0, 800d846 <HttpDaemon::HandleGet()+0x1a>
 800d83c:	4628      	mov	r0, r5
 800d83e:	4941      	ldr	r1, [pc, #260]	; (800d944 <HttpDaemon::HandleGet()+0x118>)
 800d840:	f7ff fe92 	bl	800d568 <strcmp>
 800d844:	b960      	cbnz	r0, 800d860 <HttpDaemon::HandleGet()+0x34>
 800d846:	4621      	mov	r1, r4
 800d848:	4b3f      	ldr	r3, [pc, #252]	; (800d948 <HttpDaemon::HandleGet()+0x11c>)
 800d84a:	4840      	ldr	r0, [pc, #256]	; (800d94c <HttpDaemon::HandleGet()+0x120>)
 800d84c:	f841 3b22 	str.w	r3, [r1], #34
 800d850:	f000 fa7a 	bl	800dd48 <get_file_content(char const*, char*)>
 800d854:	2800      	cmp	r0, #0
 800d856:	dd1e      	ble.n	800d896 <HttpDaemon::HandleGet()+0x6a>
 800d858:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800d85c:	20c8      	movs	r0, #200	; 0xc8
 800d85e:	bd70      	pop	{r4, r5, r6, pc}
 800d860:	4628      	mov	r0, r5
 800d862:	493b      	ldr	r1, [pc, #236]	; (800d950 <HttpDaemon::HandleGet()+0x124>)
 800d864:	f7ff fe80 	bl	800d568 <strcmp>
 800d868:	b928      	cbnz	r0, 800d876 <HttpDaemon::HandleGet()+0x4a>
 800d86a:	4621      	mov	r1, r4
 800d86c:	4b39      	ldr	r3, [pc, #228]	; (800d954 <HttpDaemon::HandleGet()+0x128>)
 800d86e:	483a      	ldr	r0, [pc, #232]	; (800d958 <HttpDaemon::HandleGet()+0x12c>)
 800d870:	f841 3b22 	str.w	r3, [r1], #34
 800d874:	e7ec      	b.n	800d850 <HttpDaemon::HandleGet()+0x24>
 800d876:	4628      	mov	r0, r5
 800d878:	4938      	ldr	r1, [pc, #224]	; (800d95c <HttpDaemon::HandleGet()+0x130>)
 800d87a:	f7ff fe75 	bl	800d568 <strcmp>
 800d87e:	b168      	cbz	r0, 800d89c <HttpDaemon::HandleGet()+0x70>
 800d880:	4a37      	ldr	r2, [pc, #220]	; (800d960 <HttpDaemon::HandleGet()+0x134>)
 800d882:	1e6b      	subs	r3, r5, #1
 800d884:	1d6e      	adds	r6, r5, #5
 800d886:	42b3      	cmp	r3, r6
 800d888:	d00e      	beq.n	800d8a8 <HttpDaemon::HandleGet()+0x7c>
 800d88a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d88e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d892:	4288      	cmp	r0, r1
 800d894:	d0f7      	beq.n	800d886 <HttpDaemon::HandleGet()+0x5a>
 800d896:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d89a:	e7e0      	b.n	800d85e <HttpDaemon::HandleGet()+0x32>
 800d89c:	4621      	mov	r1, r4
 800d89e:	4b31      	ldr	r3, [pc, #196]	; (800d964 <HttpDaemon::HandleGet()+0x138>)
 800d8a0:	4831      	ldr	r0, [pc, #196]	; (800d968 <HttpDaemon::HandleGet()+0x13c>)
 800d8a2:	f841 3b22 	str.w	r3, [r1], #34
 800d8a6:	e7d3      	b.n	800d850 <HttpDaemon::HandleGet()+0x24>
 800d8a8:	4b30      	ldr	r3, [pc, #192]	; (800d96c <HttpDaemon::HandleGet()+0x140>)
 800d8aa:	3506      	adds	r5, #6
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	4930      	ldr	r1, [pc, #192]	; (800d970 <HttpDaemon::HandleGet()+0x144>)
 800d8b0:	6023      	str	r3, [r4, #0]
 800d8b2:	f7ff fe59 	bl	800d568 <strcmp>
 800d8b6:	b930      	cbnz	r0, 800d8c6 <HttpDaemon::HandleGet()+0x9a>
 800d8b8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d8bc:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d8c0:	f000 f9ca 	bl	800dc58 <remoteconfig::json_get_list(char*, unsigned short)>
 800d8c4:	e7c6      	b.n	800d854 <HttpDaemon::HandleGet()+0x28>
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	492a      	ldr	r1, [pc, #168]	; (800d974 <HttpDaemon::HandleGet()+0x148>)
 800d8ca:	f7ff fe4d 	bl	800d568 <strcmp>
 800d8ce:	b930      	cbnz	r0, 800d8de <HttpDaemon::HandleGet()+0xb2>
 800d8d0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d8d4:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d8d8:	f000 f9f2 	bl	800dcc0 <remoteconfig::json_get_version(char*, unsigned short)>
 800d8dc:	e7ba      	b.n	800d854 <HttpDaemon::HandleGet()+0x28>
 800d8de:	4628      	mov	r0, r5
 800d8e0:	4925      	ldr	r1, [pc, #148]	; (800d978 <HttpDaemon::HandleGet()+0x14c>)
 800d8e2:	f7ff fe41 	bl	800d568 <strcmp>
 800d8e6:	b950      	cbnz	r0, 800d8fe <HttpDaemon::HandleGet()+0xd2>
 800d8e8:	4b24      	ldr	r3, [pc, #144]	; (800d97c <HttpDaemon::HandleGet()+0x150>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	7bdb      	ldrb	r3, [r3, #15]
 800d8ee:	b31b      	cbz	r3, 800d938 <HttpDaemon::HandleGet()+0x10c>
 800d8f0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d8f4:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d8f8:	f000 f9fe 	bl	800dcf8 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800d8fc:	e7aa      	b.n	800d854 <HttpDaemon::HandleGet()+0x28>
 800d8fe:	4628      	mov	r0, r5
 800d900:	491f      	ldr	r1, [pc, #124]	; (800d980 <HttpDaemon::HandleGet()+0x154>)
 800d902:	f7ff fe31 	bl	800d568 <strcmp>
 800d906:	b930      	cbnz	r0, 800d916 <HttpDaemon::HandleGet()+0xea>
 800d908:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d90c:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d910:	f000 fa02 	bl	800dd18 <remoteconfig::json_get_display(char*, unsigned short)>
 800d914:	e79e      	b.n	800d854 <HttpDaemon::HandleGet()+0x28>
 800d916:	4628      	mov	r0, r5
 800d918:	491a      	ldr	r1, [pc, #104]	; (800d984 <HttpDaemon::HandleGet()+0x158>)
 800d91a:	f7ff fe25 	bl	800d568 <strcmp>
 800d91e:	b930      	cbnz	r0, 800d92e <HttpDaemon::HandleGet()+0x102>
 800d920:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800d924:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800d928:	f000 fa06 	bl	800dd38 <remoteconfig::json_get_directory(char*, unsigned short)>
 800d92c:	e792      	b.n	800d854 <HttpDaemon::HandleGet()+0x28>
 800d92e:	4620      	mov	r0, r4
 800d930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d934:	f7ff bf3a 	b.w	800d7ac <HttpDaemon::HandleGetTxt()>
 800d938:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d93c:	e78f      	b.n	800d85e <HttpDaemon::HandleGet()+0x32>
 800d93e:	bf00      	nop
 800d940:	08015b5a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, fp, ip, lr}
 800d944:	08015b33 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, fp, ip, lr}
 800d948:	08015d46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, ip, lr}
 800d94c:	08015b34 	stmdaeq	r1, {r2, r4, r5, r8, r9, fp, ip, lr}
 800d950:	08015b3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, fp, ip, lr}
 800d954:	08015d66 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, fp, ip, lr}
 800d958:	08015b40 	stmdaeq	r1, {r6, r8, r9, fp, ip, lr}
 800d95c:	08015b4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, fp, ip, lr}
 800d960:	08015b55 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, fp, ip, lr}
 800d964:	08015d86 	stmdaeq	r1, {r1, r2, r7, r8, sl, fp, ip, lr}
 800d968:	08015b4c 	stmdaeq	r1, {r2, r3, r6, r8, r9, fp, ip, lr}
 800d96c:	08015da6 	stmdaeq	r1, {r1, r2, r5, r7, r8, sl, fp, ip, lr}
 800d970:	08015b5c 	stmdaeq	r1, {r2, r3, r4, r6, r8, r9, fp, ip, lr}
 800d974:	08015b61 	stmdaeq	r1, {r0, r5, r6, r8, r9, fp, ip, lr}
 800d978:	08015b69 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, fp, ip, lr}
 800d97c:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0
 800d980:	08015b70 	stmdaeq	r1, {r4, r5, r6, r8, r9, fp, ip, lr}
 800d984:	08015b78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, fp, ip, lr}

0800d988 <HttpDaemon::HandlePost(bool)>:
 800d988:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d98a:	4604      	mov	r4, r0
 800d98c:	2900      	cmp	r1, #0
 800d98e:	f040 8090 	bne.w	800dab2 <HttpDaemon::HandlePost(bool)+0x12a>
 800d992:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d05d      	beq.n	800da56 <HttpDaemon::HandlePost(bool)+0xce>
 800d99a:	6845      	ldr	r5, [r0, #4]
 800d99c:	4948      	ldr	r1, [pc, #288]	; (800dac0 <HttpDaemon::HandlePost(bool)+0x138>)
 800d99e:	4628      	mov	r0, r5
 800d9a0:	f7ff fde2 	bl	800d568 <strcmp>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	bf0c      	ite	eq
 800d9a8:	2301      	moveq	r3, #1
 800d9aa:	2300      	movne	r3, #0
 800d9ac:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800d9b0:	d055      	beq.n	800da5e <HttpDaemon::HandlePost(bool)+0xd6>
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	4943      	ldr	r1, [pc, #268]	; (800dac4 <HttpDaemon::HandlePost(bool)+0x13c>)
 800d9b6:	f7ff fdd7 	bl	800d568 <strcmp>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d04f      	beq.n	800da5e <HttpDaemon::HandlePost(bool)+0xd6>
 800d9be:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d9c2:	e04a      	b.n	800da5a <HttpDaemon::HandlePost(bool)+0xd2>
 800d9c4:	4940      	ldr	r1, [pc, #256]	; (800dac8 <HttpDaemon::HandlePost(bool)+0x140>)
 800d9c6:	68a0      	ldr	r0, [r4, #8]
 800d9c8:	f10d 0207 	add.w	r2, sp, #7
 800d9cc:	f004 fbda 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d9d0:	b9e8      	cbnz	r0, 800da0e <HttpDaemon::HandlePost(bool)+0x86>
 800d9d2:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800d9d6:	4b3d      	ldr	r3, [pc, #244]	; (800dacc <HttpDaemon::HandlePost(bool)+0x144>)
 800d9d8:	fab6 f186 	clz	r1, r6
 800d9dc:	681d      	ldr	r5, [r3, #0]
 800d9de:	0949      	lsrs	r1, r1, #5
 800d9e0:	69a8      	ldr	r0, [r5, #24]
 800d9e2:	b138      	cbz	r0, 800d9f4 <HttpDaemon::HandlePost(bool)+0x6c>
 800d9e4:	6803      	ldr	r3, [r0, #0]
 800d9e6:	7429      	strb	r1, [r5, #16]
 800d9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9ea:	4798      	blx	r3
 800d9ec:	b116      	cbz	r6, 800d9f4 <HttpDaemon::HandlePost(bool)+0x6c>
 800d9ee:	4b38      	ldr	r3, [pc, #224]	; (800dad0 <HttpDaemon::HandlePost(bool)+0x148>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	606b      	str	r3, [r5, #4]
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	4b37      	ldr	r3, [pc, #220]	; (800dad4 <HttpDaemon::HandlePost(bool)+0x14c>)
 800d9f8:	f240 519f 	movw	r1, #1439	; 0x59f
 800d9fc:	4a36      	ldr	r2, [pc, #216]	; (800dad8 <HttpDaemon::HandlePost(bool)+0x150>)
 800d9fe:	f840 3b22 	str.w	r3, [r0], #34
 800da02:	f005 fb65 	bl	80130d0 <snprintf>
 800da06:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800da0a:	20c8      	movs	r0, #200	; 0xc8
 800da0c:	e025      	b.n	800da5a <HttpDaemon::HandlePost(bool)+0xd2>
 800da0e:	4933      	ldr	r1, [pc, #204]	; (800dadc <HttpDaemon::HandlePost(bool)+0x154>)
 800da10:	68a0      	ldr	r0, [r4, #8]
 800da12:	f10d 0207 	add.w	r2, sp, #7
 800da16:	f004 fbb5 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800da1a:	b9e0      	cbnz	r0, 800da56 <HttpDaemon::HandlePost(bool)+0xce>
 800da1c:	4b30      	ldr	r3, [pc, #192]	; (800dae0 <HttpDaemon::HandlePost(bool)+0x158>)
 800da1e:	6818      	ldr	r0, [r3, #0]
 800da20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800da24:	b11b      	cbz	r3, 800da2e <HttpDaemon::HandlePost(bool)+0xa6>
 800da26:	2104      	movs	r1, #4
 800da28:	f004 ff4e 	bl	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 800da2c:	e7e2      	b.n	800d9f4 <HttpDaemon::HandlePost(bool)+0x6c>
 800da2e:	2102      	movs	r1, #2
 800da30:	e7fa      	b.n	800da28 <HttpDaemon::HandlePost(bool)+0xa0>
 800da32:	4b2c      	ldr	r3, [pc, #176]	; (800dae4 <HttpDaemon::HandlePost(bool)+0x15c>)
 800da34:	2001      	movs	r0, #1
 800da36:	781d      	ldrb	r5, [r3, #0]
 800da38:	f7ff fdbe 	bl	800d5b8 <PropertiesConfig::EnableJSON(bool)>
 800da3c:	4b2a      	ldr	r3, [pc, #168]	; (800dae8 <HttpDaemon::HandlePost(bool)+0x160>)
 800da3e:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 800da42:	6818      	ldr	r0, [r3, #0]
 800da44:	68a1      	ldr	r1, [r4, #8]
 800da46:	f005 0501 	and.w	r5, r5, #1
 800da4a:	f7ff fa4d 	bl	800cee8 <RemoteConfig::HandleSet(void*, unsigned int)>
 800da4e:	4628      	mov	r0, r5
 800da50:	f7ff fdb2 	bl	800d5b8 <PropertiesConfig::EnableJSON(bool)>
 800da54:	e7ce      	b.n	800d9f4 <HttpDaemon::HandlePost(bool)+0x6c>
 800da56:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800da5a:	b002      	add	sp, #8
 800da5c:	bd70      	pop	{r4, r5, r6, pc}
 800da5e:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 800da62:	6962      	ldr	r2, [r4, #20]
 800da64:	429a      	cmp	r2, r3
 800da66:	dbd0      	blt.n	800da0a <HttpDaemon::HandlePost(bool)+0x82>
 800da68:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d0cc      	beq.n	800da0a <HttpDaemon::HandlePost(bool)+0x82>
 800da70:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800da74:	2b00      	cmp	r3, #0
 800da76:	d0dc      	beq.n	800da32 <HttpDaemon::HandlePost(bool)+0xaa>
 800da78:	2201      	movs	r2, #1
 800da7a:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 800da7e:	68a0      	ldr	r0, [r4, #8]
 800da80:	f004 f928 	bl	8011cd4 <properties::convert_json_file(char*, unsigned short, bool)>
 800da84:	2800      	cmp	r0, #0
 800da86:	dde6      	ble.n	800da56 <HttpDaemon::HandlePost(bool)+0xce>
 800da88:	4918      	ldr	r1, [pc, #96]	; (800daec <HttpDaemon::HandlePost(bool)+0x164>)
 800da8a:	68a0      	ldr	r0, [r4, #8]
 800da8c:	f10d 0207 	add.w	r2, sp, #7
 800da90:	f004 fb78 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800da94:	2800      	cmp	r0, #0
 800da96:	d195      	bne.n	800d9c4 <HttpDaemon::HandlePost(bool)+0x3c>
 800da98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d0a9      	beq.n	800d9f4 <HttpDaemon::HandlePost(bool)+0x6c>
 800daa0:	4b11      	ldr	r3, [pc, #68]	; (800dae8 <HttpDaemon::HandlePost(bool)+0x160>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	7b9b      	ldrb	r3, [r3, #14]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d0d5      	beq.n	800da56 <HttpDaemon::HandlePost(bool)+0xce>
 800daaa:	4b11      	ldr	r3, [pc, #68]	; (800daf0 <HttpDaemon::HandlePost(bool)+0x168>)
 800daac:	6818      	ldr	r0, [r3, #0]
 800daae:	f004 ffad 	bl	8012a0c <Hardware::Reboot()>
 800dab2:	68c3      	ldr	r3, [r0, #12]
 800dab4:	6083      	str	r3, [r0, #8]
 800dab6:	6943      	ldr	r3, [r0, #20]
 800dab8:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 800dabc:	e7d8      	b.n	800da70 <HttpDaemon::HandlePost(bool)+0xe8>
 800dabe:	bf00      	nop
 800dac0:	08015b82 	stmdaeq	r1, {r1, r7, r8, r9, fp, ip, lr}
 800dac4:	08015b1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, fp, ip, lr}
 800dac8:	08015b70 	stmdaeq	r1, {r4, r5, r6, r8, r9, fp, ip, lr}
 800dacc:	2000ae04 	andcs	sl, r0, r4, lsl #28
 800dad0:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800dad4:	08015d46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, ip, lr}
 800dad8:	08015b9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, fp, ip, lr}
 800dadc:	08015b96 	stmdaeq	r1, {r1, r2, r4, r7, r8, r9, fp, ip, lr}
 800dae0:	2000aef0 	strdcs	sl, [r0], -r0
 800dae4:	2000ae00 	andcs	sl, r0, r0, lsl #28
 800dae8:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0
 800daec:	08015b8f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, fp, ip, lr}
 800daf0:	2000aef4 	strdcs	sl, [r0], -r4

0800daf4 <HttpDaemon::Run()>:
 800daf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daf6:	4e4a      	ldr	r6, [pc, #296]	; (800dc20 <HttpDaemon::Run()+0x12c>)
 800daf8:	4604      	mov	r4, r0
 800dafa:	6901      	ldr	r1, [r0, #16]
 800dafc:	f100 020c 	add.w	r2, r0, #12
 800db00:	b085      	sub	sp, #20
 800db02:	6830      	ldr	r0, [r6, #0]
 800db04:	f002 fc81 	bl	801040a <Network::TcpRead(int, unsigned char const**)>
 800db08:	6160      	str	r0, [r4, #20]
 800db0a:	2800      	cmp	r0, #0
 800db0c:	d061      	beq.n	800dbd2 <HttpDaemon::Run()+0xde>
 800db0e:	69a3      	ldr	r3, [r4, #24]
 800db10:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800db14:	d15f      	bne.n	800dbd6 <HttpDaemon::Run()+0xe2>
 800db16:	4620      	mov	r0, r4
 800db18:	f7ff fe10 	bl	800d73c <HttpDaemon::ParseRequest()>
 800db1c:	28c8      	cmp	r0, #200	; 0xc8
 800db1e:	61a0      	str	r0, [r4, #24]
 800db20:	d106      	bne.n	800db30 <HttpDaemon::Run()+0x3c>
 800db22:	69e3      	ldr	r3, [r4, #28]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d147      	bne.n	800dbb8 <HttpDaemon::Run()+0xc4>
 800db28:	4620      	mov	r0, r4
 800db2a:	f7ff fe7f 	bl	800d82c <HttpDaemon::HandleGet()>
 800db2e:	61a0      	str	r0, [r4, #24]
 800db30:	69a3      	ldr	r3, [r4, #24]
 800db32:	f104 0722 	add.w	r7, r4, #34	; 0x22
 800db36:	2bc8      	cmp	r3, #200	; 0xc8
 800db38:	d06f      	beq.n	800dc1a <HttpDaemon::Run()+0x126>
 800db3a:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800db3e:	d062      	beq.n	800dc06 <HttpDaemon::Run()+0x112>
 800db40:	dc52      	bgt.n	800dbe8 <HttpDaemon::Run()+0xf4>
 800db42:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800db46:	d060      	beq.n	800dc0a <HttpDaemon::Run()+0x116>
 800db48:	f240 129d 	movw	r2, #413	; 0x19d
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d05e      	beq.n	800dc0e <HttpDaemon::Run()+0x11a>
 800db50:	4d34      	ldr	r5, [pc, #208]	; (800dc24 <HttpDaemon::Run()+0x130>)
 800db52:	4a35      	ldr	r2, [pc, #212]	; (800dc28 <HttpDaemon::Run()+0x134>)
 800db54:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800db58:	bf18      	it	ne
 800db5a:	4615      	movne	r5, r2
 800db5c:	4a33      	ldr	r2, [pc, #204]	; (800dc2c <HttpDaemon::Run()+0x138>)
 800db5e:	f240 519f 	movw	r1, #1439	; 0x59f
 800db62:	6022      	str	r2, [r4, #0]
 800db64:	4638      	mov	r0, r7
 800db66:	e9cd 5500 	strd	r5, r5, [sp]
 800db6a:	4a31      	ldr	r2, [pc, #196]	; (800dc30 <HttpDaemon::Run()+0x13c>)
 800db6c:	f005 fab0 	bl	80130d0 <snprintf>
 800db70:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800db74:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800db78:	f240 519f 	movw	r1, #1439	; 0x59f
 800db7c:	9303      	str	r3, [sp, #12]
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	4a2c      	ldr	r2, [pc, #176]	; (800dc34 <HttpDaemon::Run()+0x140>)
 800db82:	9302      	str	r3, [sp, #8]
 800db84:	4b2c      	ldr	r3, [pc, #176]	; (800dc38 <HttpDaemon::Run()+0x144>)
 800db86:	68e0      	ldr	r0, [r4, #12]
 800db88:	e9cd 5300 	strd	r5, r3, [sp]
 800db8c:	69a3      	ldr	r3, [r4, #24]
 800db8e:	f005 fa9f 	bl	80130d0 <snprintf>
 800db92:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800db96:	b283      	uxth	r3, r0
 800db98:	6830      	ldr	r0, [r6, #0]
 800db9a:	f002 fc3a 	bl	8010412 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800db9e:	463a      	mov	r2, r7
 800dba0:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800dba4:	6921      	ldr	r1, [r4, #16]
 800dba6:	6830      	ldr	r0, [r6, #0]
 800dba8:	f002 fc33 	bl	8010412 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800dbac:	f44f 7202 	mov.w	r2, #520	; 0x208
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800dbb6:	e00c      	b.n	800dbd2 <HttpDaemon::Run()+0xde>
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d1b9      	bne.n	800db30 <HttpDaemon::Run()+0x3c>
 800dbbc:	2100      	movs	r1, #0
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	f7ff fee2 	bl	800d988 <HttpDaemon::HandlePost(bool)>
 800dbc4:	28c8      	cmp	r0, #200	; 0xc8
 800dbc6:	61a0      	str	r0, [r4, #24]
 800dbc8:	d1b2      	bne.n	800db30 <HttpDaemon::Run()+0x3c>
 800dbca:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1ae      	bne.n	800db30 <HttpDaemon::Run()+0x3c>
 800dbd2:	b005      	add	sp, #20
 800dbd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbd6:	2bc8      	cmp	r3, #200	; 0xc8
 800dbd8:	d1aa      	bne.n	800db30 <HttpDaemon::Run()+0x3c>
 800dbda:	69e1      	ldr	r1, [r4, #28]
 800dbdc:	2901      	cmp	r1, #1
 800dbde:	d1a7      	bne.n	800db30 <HttpDaemon::Run()+0x3c>
 800dbe0:	4620      	mov	r0, r4
 800dbe2:	f7ff fed1 	bl	800d988 <HttpDaemon::HandlePost(bool)>
 800dbe6:	e7a2      	b.n	800db2e <HttpDaemon::Run()+0x3a>
 800dbe8:	f240 12f5 	movw	r2, #501	; 0x1f5
 800dbec:	4293      	cmp	r3, r2
 800dbee:	d010      	beq.n	800dc12 <HttpDaemon::Run()+0x11e>
 800dbf0:	f240 12f9 	movw	r2, #505	; 0x1f9
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d00e      	beq.n	800dc16 <HttpDaemon::Run()+0x122>
 800dbf8:	4d10      	ldr	r5, [pc, #64]	; (800dc3c <HttpDaemon::Run()+0x148>)
 800dbfa:	4a0b      	ldr	r2, [pc, #44]	; (800dc28 <HttpDaemon::Run()+0x134>)
 800dbfc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800dc00:	bf18      	it	ne
 800dc02:	4615      	movne	r5, r2
 800dc04:	e7aa      	b.n	800db5c <HttpDaemon::Run()+0x68>
 800dc06:	4d0e      	ldr	r5, [pc, #56]	; (800dc40 <HttpDaemon::Run()+0x14c>)
 800dc08:	e7a8      	b.n	800db5c <HttpDaemon::Run()+0x68>
 800dc0a:	4d0e      	ldr	r5, [pc, #56]	; (800dc44 <HttpDaemon::Run()+0x150>)
 800dc0c:	e7a6      	b.n	800db5c <HttpDaemon::Run()+0x68>
 800dc0e:	4d0e      	ldr	r5, [pc, #56]	; (800dc48 <HttpDaemon::Run()+0x154>)
 800dc10:	e7a4      	b.n	800db5c <HttpDaemon::Run()+0x68>
 800dc12:	4d0e      	ldr	r5, [pc, #56]	; (800dc4c <HttpDaemon::Run()+0x158>)
 800dc14:	e7a2      	b.n	800db5c <HttpDaemon::Run()+0x68>
 800dc16:	4d0e      	ldr	r5, [pc, #56]	; (800dc50 <HttpDaemon::Run()+0x15c>)
 800dc18:	e7a0      	b.n	800db5c <HttpDaemon::Run()+0x68>
 800dc1a:	4d0e      	ldr	r5, [pc, #56]	; (800dc54 <HttpDaemon::Run()+0x160>)
 800dc1c:	e7aa      	b.n	800db74 <HttpDaemon::Run()+0x80>
 800dc1e:	bf00      	nop
 800dc20:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800dc24:	08015c60 	stmdaeq	r1, {r5, r6, sl, fp, ip, lr}
 800dc28:	08015c6c 	stmdaeq	r1, {r2, r3, r5, r6, sl, fp, ip, lr}
 800dc2c:	08015d46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, ip, lr}
 800dc30:	08015c93 	stmdaeq	r1, {r0, r1, r4, r7, sl, fp, ip, lr}
 800dc34:	08015cee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, sl, fp, ip, lr}
 800dc38:	0801517f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, ip, lr}
 800dc3c:	08015c7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, sl, fp, ip, lr}
 800dc40:	08015c1e 	stmdaeq	r1, {r1, r2, r3, r4, sl, fp, ip, lr}
 800dc44:	08015c14 	stmdaeq	r1, {r2, r4, sl, fp, ip, lr}
 800dc48:	08015bfb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
 800dc4c:	08015c49 	stmdaeq	r1, {r0, r3, r6, sl, fp, ip, lr}
 800dc50:	08015c33 	stmdaeq	r1, {r0, r1, r4, r5, sl, fp, ip, lr}
 800dc54:	08015c90 	stmdaeq	r1, {r4, r7, sl, fp, ip, lr}

0800dc58 <remoteconfig::json_get_list(char*, unsigned short)>:
 800dc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc5c:	4b14      	ldr	r3, [pc, #80]	; (800dcb0 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800dc5e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800dcb4 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	b088      	sub	sp, #32
 800dc66:	4605      	mov	r5, r0
 800dc68:	f8d8 0000 	ldr.w	r0, [r8]
 800dc6c:	691c      	ldr	r4, [r3, #16]
 800dc6e:	460e      	mov	r6, r1
 800dc70:	f7ff f81e 	bl	800ccb0 <RemoteConfig::GetStringNode() const>
 800dc74:	4607      	mov	r7, r0
 800dc76:	f8d8 0000 	ldr.w	r0, [r8]
 800dc7a:	f7ff f825 	bl	800ccc8 <RemoteConfig::GetStringOutput() const>
 800dc7e:	4b0e      	ldr	r3, [pc, #56]	; (800dcb8 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 800dc80:	4631      	mov	r1, r6
 800dc82:	7a1a      	ldrb	r2, [r3, #8]
 800dc84:	3309      	adds	r3, #9
 800dc86:	9303      	str	r3, [sp, #12]
 800dc88:	0e23      	lsrs	r3, r4, #24
 800dc8a:	9302      	str	r3, [sp, #8]
 800dc8c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800dc90:	9301      	str	r3, [sp, #4]
 800dc92:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800dc96:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	4a07      	ldr	r2, [pc, #28]	; (800dcbc <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 800dca0:	9704      	str	r7, [sp, #16]
 800dca2:	b2e3      	uxtb	r3, r4
 800dca4:	f005 fa14 	bl	80130d0 <snprintf>
 800dca8:	b280      	uxth	r0, r0
 800dcaa:	b008      	add	sp, #32
 800dcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb0:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800dcb4:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0
 800dcb8:	20001e8c 	andcs	r1, r0, ip, lsl #29
 800dcbc:	08015e20 	stmdaeq	r1, {r5, r9, sl, fp, ip, lr}

0800dcc0 <remoteconfig::json_get_version(char*, unsigned short)>:
 800dcc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dcc2:	2208      	movs	r2, #8
 800dcc4:	4b09      	ldr	r3, [pc, #36]	; (800dcec <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800dcc6:	9204      	str	r2, [sp, #16]
 800dcc8:	f1a3 020b 	sub.w	r2, r3, #11
 800dccc:	9203      	str	r2, [sp, #12]
 800dcce:	220b      	movs	r2, #11
 800dcd0:	9202      	str	r2, [sp, #8]
 800dcd2:	4a07      	ldr	r2, [pc, #28]	; (800dcf0 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800dcd4:	9305      	str	r3, [sp, #20]
 800dcd6:	3b0e      	subs	r3, #14
 800dcd8:	9201      	str	r2, [sp, #4]
 800dcda:	9300      	str	r3, [sp, #0]
 800dcdc:	4a05      	ldr	r2, [pc, #20]	; (800dcf4 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800dcde:	2303      	movs	r3, #3
 800dce0:	f005 f9f6 	bl	80130d0 <snprintf>
 800dce4:	b280      	uxth	r0, r0
 800dce6:	b007      	add	sp, #28
 800dce8:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcec:	2000aea2 	andcs	sl, r0, r2, lsr #29
 800dcf0:	0801517f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, ip, lr}
 800dcf4:	08015e7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, lr}

0800dcf8 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800dcf8:	b508      	push	{r3, lr}
 800dcfa:	4b05      	ldr	r3, [pc, #20]	; (800dd10 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dd02:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd06:	4a03      	ldr	r2, [pc, #12]	; (800dd14 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800dd08:	f005 f9e2 	bl	80130d0 <snprintf>
 800dd0c:	b280      	uxth	r0, r0
 800dd0e:	bd08      	pop	{r3, pc}
 800dd10:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800dd14:	08015ec5 	stmdaeq	r1, {r0, r2, r6, r7, r9, sl, fp, ip, lr}

0800dd18 <remoteconfig::json_get_display(char*, unsigned short)>:
 800dd18:	b508      	push	{r3, lr}
 800dd1a:	4b05      	ldr	r3, [pc, #20]	; (800dd30 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800dd1c:	4a05      	ldr	r2, [pc, #20]	; (800dd34 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	7c1b      	ldrb	r3, [r3, #16]
 800dd22:	f083 0301 	eor.w	r3, r3, #1
 800dd26:	f005 f9d3 	bl	80130d0 <snprintf>
 800dd2a:	b280      	uxth	r0, r0
 800dd2c:	bd08      	pop	{r3, pc}
 800dd2e:	bf00      	nop
 800dd30:	2000ae04 	andcs	sl, r0, r4, lsl #28
 800dd34:	08015ed4 	stmdaeq	r1, {r2, r4, r6, r7, r9, sl, fp, ip, lr}

0800dd38 <remoteconfig::json_get_directory(char*, unsigned short)>:
 800dd38:	b508      	push	{r3, lr}
 800dd3a:	4a02      	ldr	r2, [pc, #8]	; (800dd44 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800dd3c:	f005 f9c8 	bl	80130d0 <snprintf>
 800dd40:	b280      	uxth	r0, r0
 800dd42:	bd08      	pop	{r3, pc}
 800dd44:	08015ee3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r9, sl, fp, ip, lr}

0800dd48 <get_file_content(char const*, char*)>:
 800dd48:	2300      	movs	r3, #0
 800dd4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd4c:	4a10      	ldr	r2, [pc, #64]	; (800dd90 <get_file_content(char const*, char*)+0x48>)
 800dd4e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800dd52:	1e46      	subs	r6, r0, #1
 800dd54:	3c01      	subs	r4, #1
 800dd56:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800dd5a:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800dd5e:	42bd      	cmp	r5, r7
 800dd60:	d10f      	bne.n	800dd82 <get_file_content(char const*, char*)+0x3a>
 800dd62:	2d00      	cmp	r5, #0
 800dd64:	d1f7      	bne.n	800dd56 <get_file_content(char const*, char*)+0xe>
 800dd66:	4608      	mov	r0, r1
 800dd68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800dd74:	f800 2b01 	strb.w	r2, [r0], #1
 800dd78:	2a00      	cmp	r2, #0
 800dd7a:	d1f9      	bne.n	800dd70 <get_file_content(char const*, char*)+0x28>
 800dd7c:	1a40      	subs	r0, r0, r1
 800dd7e:	3801      	subs	r0, #1
 800dd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd82:	3301      	adds	r3, #1
 800dd84:	2b03      	cmp	r3, #3
 800dd86:	d1e2      	bne.n	800dd4e <get_file_content(char const*, char*)+0x6>
 800dd88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd8c:	e7f8      	b.n	800dd80 <get_file_content(char const*, char*)+0x38>
 800dd8e:	bf00      	nop
 800dd90:	08016224 	stmdaeq	r1, {r2, r5, r9, sp, lr}

0800dd94 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800dd94:	2300      	movs	r3, #0
 800dd96:	2020      	movs	r0, #32
 800dd98:	b510      	push	{r4, lr}
 800dd9a:	4a04      	ldr	r2, [pc, #16]	; (800ddac <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800dd9c:	428b      	cmp	r3, r1
 800dd9e:	d004      	beq.n	800ddaa <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x16>
 800dda0:	f852 4b04 	ldr.w	r4, [r2], #4
 800dda4:	3301      	adds	r3, #1
 800dda6:	4420      	add	r0, r4
 800dda8:	e7f8      	b.n	800dd9c <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800ddaa:	bd10      	pop	{r4, pc}
 800ddac:	08016768 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, sp, lr}

0800ddb0 <SpiFlashStore::Init()>:
 800ddb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb4:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800ded8 <SpiFlashStore::Init()+0x128>
 800ddb8:	4607      	mov	r7, r0
 800ddba:	b085      	sub	sp, #20
 800ddbc:	f8d8 0000 	ldr.w	r0, [r8]
 800ddc0:	f000 fc72 	bl	800e6a8 <FlashRom::GetSectorSize()>
 800ddc4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800ddc8:	4605      	mov	r5, r0
 800ddca:	f040 8083 	bne.w	800ded4 <SpiFlashStore::Init()+0x124>
 800ddce:	f8d8 0000 	ldr.w	r0, [r8]
 800ddd2:	f000 fc61 	bl	800e698 <FlashRom::GetSize()>
 800ddd6:	4b41      	ldr	r3, [pc, #260]	; (800dedc <SpiFlashStore::Init()+0x12c>)
 800ddd8:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800dddc:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800dde0:	6019      	str	r1, [r3, #0]
 800dde2:	2e00      	cmp	r6, #0
 800dde4:	d176      	bne.n	800ded4 <SpiFlashStore::Init()+0x124>
 800dde6:	4c3e      	ldr	r4, [pc, #248]	; (800dee0 <SpiFlashStore::Init()+0x130>)
 800dde8:	ab03      	add	r3, sp, #12
 800ddea:	9300      	str	r3, [sp, #0]
 800ddec:	462a      	mov	r2, r5
 800ddee:	4623      	mov	r3, r4
 800ddf0:	f8d8 0000 	ldr.w	r0, [r8]
 800ddf4:	f000 fc5b 	bl	800e6ae <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800ddf8:	7823      	ldrb	r3, [r4, #0]
 800ddfa:	2b41      	cmp	r3, #65	; 0x41
 800ddfc:	bf1c      	itt	ne
 800ddfe:	2341      	movne	r3, #65	; 0x41
 800de00:	7023      	strbne	r3, [r4, #0]
 800de02:	7863      	ldrb	r3, [r4, #1]
 800de04:	bf14      	ite	ne
 800de06:	4635      	movne	r5, r6
 800de08:	2501      	moveq	r5, #1
 800de0a:	2b76      	cmp	r3, #118	; 0x76
 800de0c:	bf1c      	itt	ne
 800de0e:	2376      	movne	r3, #118	; 0x76
 800de10:	7063      	strbne	r3, [r4, #1]
 800de12:	78a3      	ldrb	r3, [r4, #2]
 800de14:	bf18      	it	ne
 800de16:	2500      	movne	r5, #0
 800de18:	2b56      	cmp	r3, #86	; 0x56
 800de1a:	bf1c      	itt	ne
 800de1c:	2356      	movne	r3, #86	; 0x56
 800de1e:	70a3      	strbne	r3, [r4, #2]
 800de20:	78e3      	ldrb	r3, [r4, #3]
 800de22:	bf18      	it	ne
 800de24:	2500      	movne	r5, #0
 800de26:	2b10      	cmp	r3, #16
 800de28:	d01c      	beq.n	800de64 <SpiFlashStore::Init()+0xb4>
 800de2a:	2310      	movs	r3, #16
 800de2c:	70e3      	strb	r3, [r4, #3]
 800de2e:	2201      	movs	r2, #1
 800de30:	2500      	movs	r5, #0
 800de32:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800de36:	4b2b      	ldr	r3, [pc, #172]	; (800dee4 <SpiFlashStore::Init()+0x134>)
 800de38:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800dee8 <SpiFlashStore::Init()+0x138>
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	4631      	mov	r1, r6
 800de40:	4638      	mov	r0, r7
 800de42:	f7ff ffa7 	bl	800dd94 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800de46:	1823      	adds	r3, r4, r0
 800de48:	5425      	strb	r5, [r4, r0]
 800de4a:	705d      	strb	r5, [r3, #1]
 800de4c:	709d      	strb	r5, [r3, #2]
 800de4e:	70dd      	strb	r5, [r3, #3]
 800de50:	f858 3b04 	ldr.w	r3, [r8], #4
 800de54:	1d02      	adds	r2, r0, #4
 800de56:	4403      	add	r3, r0
 800de58:	4293      	cmp	r3, r2
 800de5a:	d931      	bls.n	800dec0 <SpiFlashStore::Init()+0x110>
 800de5c:	f804 9002 	strb.w	r9, [r4, r2]
 800de60:	3201      	adds	r2, #1
 800de62:	e7f9      	b.n	800de58 <SpiFlashStore::Init()+0xa8>
 800de64:	2d00      	cmp	r5, #0
 800de66:	d0e2      	beq.n	800de2e <SpiFlashStore::Init()+0x7e>
 800de68:	f04f 0900 	mov.w	r9, #0
 800de6c:	46c8      	mov	r8, r9
 800de6e:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800deec <SpiFlashStore::Init()+0x13c>
 800de72:	f8da b000 	ldr.w	fp, [sl]
 800de76:	4631      	mov	r1, r6
 800de78:	4638      	mov	r0, r7
 800de7a:	f7ff ff8b 	bl	800dd94 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800de7e:	5c23      	ldrb	r3, [r4, r0]
 800de80:	2bff      	cmp	r3, #255	; 0xff
 800de82:	d114      	bne.n	800deae <SpiFlashStore::Init()+0xfe>
 800de84:	1823      	adds	r3, r4, r0
 800de86:	785a      	ldrb	r2, [r3, #1]
 800de88:	2aff      	cmp	r2, #255	; 0xff
 800de8a:	d110      	bne.n	800deae <SpiFlashStore::Init()+0xfe>
 800de8c:	789a      	ldrb	r2, [r3, #2]
 800de8e:	2aff      	cmp	r2, #255	; 0xff
 800de90:	d10d      	bne.n	800deae <SpiFlashStore::Init()+0xfe>
 800de92:	78da      	ldrb	r2, [r3, #3]
 800de94:	2aff      	cmp	r2, #255	; 0xff
 800de96:	d10a      	bne.n	800deae <SpiFlashStore::Init()+0xfe>
 800de98:	46a9      	mov	r9, r5
 800de9a:	f04f 0b01 	mov.w	fp, #1
 800de9e:	f804 8000 	strb.w	r8, [r4, r0]
 800dea2:	f883 8001 	strb.w	r8, [r3, #1]
 800dea6:	f883 8002 	strb.w	r8, [r3, #2]
 800deaa:	f883 8003 	strb.w	r8, [r3, #3]
 800deae:	3601      	adds	r6, #1
 800deb0:	2e1c      	cmp	r6, #28
 800deb2:	d1e0      	bne.n	800de76 <SpiFlashStore::Init()+0xc6>
 800deb4:	f1b9 0f00 	cmp.w	r9, #0
 800deb8:	d008      	beq.n	800decc <SpiFlashStore::Init()+0x11c>
 800deba:	f8ca b000 	str.w	fp, [sl]
 800debe:	e005      	b.n	800decc <SpiFlashStore::Init()+0x11c>
 800dec0:	3601      	adds	r6, #1
 800dec2:	2e1c      	cmp	r6, #28
 800dec4:	d1bb      	bne.n	800de3e <SpiFlashStore::Init()+0x8e>
 800dec6:	2501      	movs	r5, #1
 800dec8:	4b08      	ldr	r3, [pc, #32]	; (800deec <SpiFlashStore::Init()+0x13c>)
 800deca:	601d      	str	r5, [r3, #0]
 800decc:	4628      	mov	r0, r5
 800dece:	b005      	add	sp, #20
 800ded0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ded4:	2500      	movs	r5, #0
 800ded6:	e7f9      	b.n	800decc <SpiFlashStore::Init()+0x11c>
 800ded8:	20002ee8 	andcs	r2, r0, r8, ror #29
 800dedc:	20002eb8 			; <UNDEFINED> instruction: 0x20002eb8
 800dee0:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
 800dee4:	20002ecc 	andcs	r2, r0, ip, asr #29
 800dee8:	08016768 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, sp, lr}
 800deec:	20002ec4 	andcs	r2, r0, r4, asr #29

0800def0 <SpiFlashStore::SpiFlashStore()>:
 800def0:	b538      	push	{r3, r4, r5, lr}
 800def2:	4b0d      	ldr	r3, [pc, #52]	; (800df28 <SpiFlashStore::SpiFlashStore()+0x38>)
 800def4:	4604      	mov	r4, r0
 800def6:	6018      	str	r0, [r3, #0]
 800def8:	4b0c      	ldr	r3, [pc, #48]	; (800df2c <SpiFlashStore::SpiFlashStore()+0x3c>)
 800defa:	4d0d      	ldr	r5, [pc, #52]	; (800df30 <SpiFlashStore::SpiFlashStore()+0x40>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	b113      	cbz	r3, 800df08 <SpiFlashStore::SpiFlashStore()+0x18>
 800df02:	f7ff ff55 	bl	800ddb0 <SpiFlashStore::Init()>
 800df06:	7028      	strb	r0, [r5, #0]
 800df08:	782b      	ldrb	r3, [r5, #0]
 800df0a:	b153      	cbz	r3, 800df22 <SpiFlashStore::SpiFlashStore()+0x32>
 800df0c:	2320      	movs	r3, #32
 800df0e:	2200      	movs	r2, #0
 800df10:	4908      	ldr	r1, [pc, #32]	; (800df34 <SpiFlashStore::SpiFlashStore()+0x44>)
 800df12:	f851 0b04 	ldr.w	r0, [r1], #4
 800df16:	3201      	adds	r2, #1
 800df18:	2a1c      	cmp	r2, #28
 800df1a:	4403      	add	r3, r0
 800df1c:	d1f9      	bne.n	800df12 <SpiFlashStore::SpiFlashStore()+0x22>
 800df1e:	4a06      	ldr	r2, [pc, #24]	; (800df38 <SpiFlashStore::SpiFlashStore()+0x48>)
 800df20:	6013      	str	r3, [r2, #0]
 800df22:	4620      	mov	r0, r4
 800df24:	bd38      	pop	{r3, r4, r5, pc}
 800df26:	bf00      	nop
 800df28:	20002ec8 	andcs	r2, r0, r8, asr #29
 800df2c:	20002ee8 	andcs	r2, r0, r8, ror #29
 800df30:	20002ebc 			; <UNDEFINED> instruction: 0x20002ebc
 800df34:	08016768 	stmdaeq	r1, {r3, r5, r6, r8, r9, sl, sp, lr}
 800df38:	20002ec0 	andcs	r2, r0, r0, asr #29

0800df3c <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800df3c:	b508      	push	{r3, lr}
 800df3e:	f7ff ff29 	bl	800dd94 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800df42:	2300      	movs	r3, #0
 800df44:	4904      	ldr	r1, [pc, #16]	; (800df58 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800df46:	1842      	adds	r2, r0, r1
 800df48:	540b      	strb	r3, [r1, r0]
 800df4a:	7053      	strb	r3, [r2, #1]
 800df4c:	7093      	strb	r3, [r2, #2]
 800df4e:	70d3      	strb	r3, [r2, #3]
 800df50:	2201      	movs	r2, #1
 800df52:	4b02      	ldr	r3, [pc, #8]	; (800df5c <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	bd08      	pop	{r3, pc}
 800df58:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
 800df5c:	20002ec4 	andcs	r2, r0, r4, asr #29

0800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800df60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df64:	461c      	mov	r4, r3
 800df66:	4b19      	ldr	r3, [pc, #100]	; (800dfcc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800df68:	4615      	mov	r5, r2
 800df6a:	781f      	ldrb	r7, [r3, #0]
 800df6c:	9e07      	ldr	r6, [sp, #28]
 800df6e:	b35f      	cbz	r7, 800dfc8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800df70:	f7ff ff10 	bl	800dd94 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800df74:	f04f 0c00 	mov.w	ip, #0
 800df78:	4a15      	ldr	r2, [pc, #84]	; (800dfd0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800df7a:	1941      	adds	r1, r0, r5
 800df7c:	1e63      	subs	r3, r4, #1
 800df7e:	9c06      	ldr	r4, [sp, #24]
 800df80:	4411      	add	r1, r2
 800df82:	440c      	add	r4, r1
 800df84:	42a1      	cmp	r1, r4
 800df86:	d00a      	beq.n	800df9e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3e>
 800df88:	f891 8000 	ldrb.w	r8, [r1]
 800df8c:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800df90:	3101      	adds	r1, #1
 800df92:	45f0      	cmp	r8, lr
 800df94:	bf1c      	itt	ne
 800df96:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800df9a:	46bc      	movne	ip, r7
 800df9c:	e7f2      	b.n	800df84 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800df9e:	f1bc 0f00 	cmp.w	ip, #0
 800dfa2:	d011      	beq.n	800dfc8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800dfa4:	4b0b      	ldr	r3, [pc, #44]	; (800dfd4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800dfa6:	6819      	ldr	r1, [r3, #0]
 800dfa8:	b109      	cbz	r1, 800dfae <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x4e>
 800dfaa:	2906      	cmp	r1, #6
 800dfac:	d101      	bne.n	800dfb2 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800dfae:	2101      	movs	r1, #1
 800dfb0:	6019      	str	r1, [r3, #0]
 800dfb2:	4b09      	ldr	r3, [pc, #36]	; (800dfd8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800dfb4:	6819      	ldr	r1, [r3, #0]
 800dfb6:	4b09      	ldr	r3, [pc, #36]	; (800dfdc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800dfb8:	6019      	str	r1, [r3, #0]
 800dfba:	b12d      	cbz	r5, 800dfc8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800dfbc:	b126      	cbz	r6, 800dfc8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800dfbe:	9b08      	ldr	r3, [sp, #32]
 800dfc0:	4418      	add	r0, r3
 800dfc2:	5813      	ldr	r3, [r2, r0]
 800dfc4:	4333      	orrs	r3, r6
 800dfc6:	5013      	str	r3, [r2, r0]
 800dfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfcc:	20002ebc 			; <UNDEFINED> instruction: 0x20002ebc
 800dfd0:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8
 800dfd4:	20002ec4 	andcs	r2, r0, r4, asr #29
 800dfd8:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800dfdc:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4

0800dfe0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 800dfe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfe4:	461d      	mov	r5, r3
 800dfe6:	4b15      	ldr	r3, [pc, #84]	; (800e03c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x5c>)
 800dfe8:	b085      	sub	sp, #20
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	4607      	mov	r7, r0
 800dfee:	4688      	mov	r8, r1
 800dff0:	4614      	mov	r4, r2
 800dff2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800dff6:	b1eb      	cbz	r3, 800e034 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 800dff8:	f7ff fecc 	bl	800dd94 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800dffc:	4910      	ldr	r1, [pc, #64]	; (800e040 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x60>)
 800dffe:	4a11      	ldr	r2, [pc, #68]	; (800e044 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x64>)
 800e000:	7809      	ldrb	r1, [r1, #0]
 800e002:	eb00 0309 	add.w	r3, r0, r9
 800e006:	189e      	adds	r6, r3, r2
 800e008:	b951      	cbnz	r1, 800e020 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 800e00a:	589b      	ldr	r3, [r3, r2]
 800e00c:	b143      	cbz	r3, 800e020 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 800e00e:	3c01      	subs	r4, #1
 800e010:	4435      	add	r5, r6
 800e012:	42b5      	cmp	r5, r6
 800e014:	d00e      	beq.n	800e034 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 800e016:	f816 3b01 	ldrb.w	r3, [r6], #1
 800e01a:	f804 3f01 	strb.w	r3, [r4, #1]!
 800e01e:	e7f8      	b.n	800e012 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x32>
 800e020:	2300      	movs	r3, #0
 800e022:	464a      	mov	r2, r9
 800e024:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800e028:	4641      	mov	r1, r8
 800e02a:	4623      	mov	r3, r4
 800e02c:	4638      	mov	r0, r7
 800e02e:	9500      	str	r5, [sp, #0]
 800e030:	f7ff ff96 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e034:	b005      	add	sp, #20
 800e036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e03a:	bf00      	nop
 800e03c:	20002ebc 			; <UNDEFINED> instruction: 0x20002ebc
 800e040:	20002ecc 	andcs	r2, r0, ip, asr #29
 800e044:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8

0800e048 <SpiFlashStore::Flash()>:
 800e048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e04a:	4c25      	ldr	r4, [pc, #148]	; (800e0e0 <SpiFlashStore::Flash()+0x98>)
 800e04c:	6820      	ldr	r0, [r4, #0]
 800e04e:	2800      	cmp	r0, #0
 800e050:	d043      	beq.n	800e0da <SpiFlashStore::Flash()+0x92>
 800e052:	3801      	subs	r0, #1
 800e054:	2805      	cmp	r0, #5
 800e056:	d831      	bhi.n	800e0bc <SpiFlashStore::Flash()+0x74>
 800e058:	e8df f000 	tbb	[pc, r0]
 800e05c:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800e060:	4b203025 	blmi	881a0fc <__exidx_end+0x802eac>
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	4b20      	ldr	r3, [pc, #128]	; (800e0e8 <SpiFlashStore::Flash()+0xa0>)
 800e068:	601a      	str	r2, [r3, #0]
 800e06a:	2302      	movs	r3, #2
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	2001      	movs	r0, #1
 800e070:	e033      	b.n	800e0da <SpiFlashStore::Flash()+0x92>
 800e072:	4b1c      	ldr	r3, [pc, #112]	; (800e0e4 <SpiFlashStore::Flash()+0x9c>)
 800e074:	4a1c      	ldr	r2, [pc, #112]	; (800e0e8 <SpiFlashStore::Flash()+0xa0>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	6812      	ldr	r2, [r2, #0]
 800e07a:	1a9b      	subs	r3, r3, r2
 800e07c:	2b63      	cmp	r3, #99	; 0x63
 800e07e:	d9f6      	bls.n	800e06e <SpiFlashStore::Flash()+0x26>
 800e080:	2303      	movs	r3, #3
 800e082:	e7f3      	b.n	800e06c <SpiFlashStore::Flash()+0x24>
 800e084:	4919      	ldr	r1, [pc, #100]	; (800e0ec <SpiFlashStore::Flash()+0xa4>)
 800e086:	481a      	ldr	r0, [pc, #104]	; (800e0f0 <SpiFlashStore::Flash()+0xa8>)
 800e088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e08c:	6809      	ldr	r1, [r1, #0]
 800e08e:	6800      	ldr	r0, [r0, #0]
 800e090:	ab03      	add	r3, sp, #12
 800e092:	f000 fb1b 	bl	800e6cc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800e096:	2800      	cmp	r0, #0
 800e098:	d0e9      	beq.n	800e06e <SpiFlashStore::Flash()+0x26>
 800e09a:	4b12      	ldr	r3, [pc, #72]	; (800e0e4 <SpiFlashStore::Flash()+0x9c>)
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	4b12      	ldr	r3, [pc, #72]	; (800e0e8 <SpiFlashStore::Flash()+0xa0>)
 800e0a0:	601a      	str	r2, [r3, #0]
 800e0a2:	2305      	movs	r3, #5
 800e0a4:	e7e2      	b.n	800e06c <SpiFlashStore::Flash()+0x24>
 800e0a6:	4b0f      	ldr	r3, [pc, #60]	; (800e0e4 <SpiFlashStore::Flash()+0x9c>)
 800e0a8:	4a0f      	ldr	r2, [pc, #60]	; (800e0e8 <SpiFlashStore::Flash()+0xa0>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	6812      	ldr	r2, [r2, #0]
 800e0ae:	1a9b      	subs	r3, r3, r2
 800e0b0:	2b63      	cmp	r3, #99	; 0x63
 800e0b2:	d9dc      	bls.n	800e06e <SpiFlashStore::Flash()+0x26>
 800e0b4:	2304      	movs	r3, #4
 800e0b6:	e7d9      	b.n	800e06c <SpiFlashStore::Flash()+0x24>
 800e0b8:	2306      	movs	r3, #6
 800e0ba:	e7d7      	b.n	800e06c <SpiFlashStore::Flash()+0x24>
 800e0bc:	ab03      	add	r3, sp, #12
 800e0be:	4a0d      	ldr	r2, [pc, #52]	; (800e0f4 <SpiFlashStore::Flash()+0xac>)
 800e0c0:	490a      	ldr	r1, [pc, #40]	; (800e0ec <SpiFlashStore::Flash()+0xa4>)
 800e0c2:	480b      	ldr	r0, [pc, #44]	; (800e0f0 <SpiFlashStore::Flash()+0xa8>)
 800e0c4:	9300      	str	r3, [sp, #0]
 800e0c6:	6812      	ldr	r2, [r2, #0]
 800e0c8:	4b0b      	ldr	r3, [pc, #44]	; (800e0f8 <SpiFlashStore::Flash()+0xb0>)
 800e0ca:	6809      	ldr	r1, [r1, #0]
 800e0cc:	6800      	ldr	r0, [r0, #0]
 800e0ce:	f000 fb9d 	bl	800e80c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	d0cb      	beq.n	800e06e <SpiFlashStore::Flash()+0x26>
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	6020      	str	r0, [r4, #0]
 800e0da:	b004      	add	sp, #16
 800e0dc:	bd10      	pop	{r4, pc}
 800e0de:	bf00      	nop
 800e0e0:	20002ec4 	andcs	r2, r0, r4, asr #29
 800e0e4:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800e0e8:	20001eb4 			; <UNDEFINED> instruction: 0x20001eb4
 800e0ec:	20002eb8 			; <UNDEFINED> instruction: 0x20002eb8
 800e0f0:	20002ee8 	andcs	r2, r0, r8, ror #29
 800e0f4:	20002ec0 	andcs	r2, r0, r0, asr #29
 800e0f8:	20001eb8 			; <UNDEFINED> instruction: 0x20001eb8

0800e0fc <StoreArtNet::~StoreArtNet()>:
 800e0fc:	4770      	bx	lr

0800e0fe <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800e0fe:	3804      	subs	r0, #4
 800e100:	4770      	bx	lr
	...

0800e104 <StoreArtNet::Update(artnetparams::Params const*)>:
 800e104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e106:	2200      	movs	r2, #0
 800e108:	460b      	mov	r3, r1
 800e10a:	2187      	movs	r1, #135	; 0x87
 800e10c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e110:	4804      	ldr	r0, [pc, #16]	; (800e124 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 800e112:	9100      	str	r1, [sp, #0]
 800e114:	6800      	ldr	r0, [r0, #0]
 800e116:	2101      	movs	r1, #1
 800e118:	f7ff ff22 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e11c:	b005      	add	sp, #20
 800e11e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e122:	bf00      	nop
 800e124:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e128 <StoreArtNet::SaveShortName(char const*)>:
 800e128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e12a:	460b      	mov	r3, r1
 800e12c:	2202      	movs	r2, #2
 800e12e:	2100      	movs	r1, #0
 800e130:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e134:	2212      	movs	r2, #18
 800e136:	4805      	ldr	r0, [pc, #20]	; (800e14c <StoreArtNet::SaveShortName(char const*)+0x24>)
 800e138:	9200      	str	r2, [sp, #0]
 800e13a:	2101      	movs	r1, #1
 800e13c:	220c      	movs	r2, #12
 800e13e:	6800      	ldr	r0, [r0, #0]
 800e140:	f7ff ff0e 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e144:	b005      	add	sp, #20
 800e146:	f85d fb04 	ldr.w	pc, [sp], #4
 800e14a:	bf00      	nop
 800e14c:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e150 <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 800e150:	f1a0 0004 	sub.w	r0, r0, #4
 800e154:	f7ff bfe8 	b.w	800e128 <StoreArtNet::SaveShortName(char const*)>

0800e158 <StoreArtNet::SaveLongName(char const*)>:
 800e158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e15a:	460b      	mov	r3, r1
 800e15c:	2200      	movs	r2, #0
 800e15e:	2101      	movs	r1, #1
 800e160:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800e164:	2240      	movs	r2, #64	; 0x40
 800e166:	4804      	ldr	r0, [pc, #16]	; (800e178 <StoreArtNet::SaveLongName(char const*)+0x20>)
 800e168:	9200      	str	r2, [sp, #0]
 800e16a:	6800      	ldr	r0, [r0, #0]
 800e16c:	221e      	movs	r2, #30
 800e16e:	f7ff fef7 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e172:	b005      	add	sp, #20
 800e174:	f85d fb04 	ldr.w	pc, [sp], #4
 800e178:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e17c <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 800e17c:	f1a0 0004 	sub.w	r0, r0, #4
 800e180:	f7ff bfea 	b.w	800e158 <StoreArtNet::SaveLongName(char const*)>

0800e184 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800e184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e186:	2300      	movs	r3, #0
 800e188:	9302      	str	r3, [sp, #8]
 800e18a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e18e:	4608      	mov	r0, r1
 800e190:	408b      	lsls	r3, r1
 800e192:	2101      	movs	r1, #1
 800e194:	f88d 2017 	strb.w	r2, [sp, #23]
 800e198:	f100 0267 	add.w	r2, r0, #103	; 0x67
 800e19c:	4805      	ldr	r0, [pc, #20]	; (800e1b4 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x30>)
 800e19e:	9301      	str	r3, [sp, #4]
 800e1a0:	9100      	str	r1, [sp, #0]
 800e1a2:	6800      	ldr	r0, [r0, #0]
 800e1a4:	f10d 0317 	add.w	r3, sp, #23
 800e1a8:	f7ff feda 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e1ac:	b007      	add	sp, #28
 800e1ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1b2:	bf00      	nop
 800e1b4:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e1b8 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800e1b8:	f1a0 0004 	sub.w	r0, r0, #4
 800e1bc:	f7ff bfe2 	b.w	800e184 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

0800e1c0 <StoreArtNet::SaveNetSwitch(unsigned char)>:
 800e1c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e1c2:	2204      	movs	r2, #4
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	f88d 1017 	strb.w	r1, [sp, #23]
 800e1ca:	2101      	movs	r1, #1
 800e1cc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800e1d0:	4804      	ldr	r0, [pc, #16]	; (800e1e4 <StoreArtNet::SaveNetSwitch(unsigned char)+0x24>)
 800e1d2:	9100      	str	r1, [sp, #0]
 800e1d4:	6800      	ldr	r0, [r0, #0]
 800e1d6:	f10d 0317 	add.w	r3, sp, #23
 800e1da:	f7ff fec1 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e1de:	b007      	add	sp, #28
 800e1e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1e4:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e1e8 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned char)>:
 800e1e8:	f1a0 0004 	sub.w	r0, r0, #4
 800e1ec:	f7ff bfe8 	b.w	800e1c0 <StoreArtNet::SaveNetSwitch(unsigned char)>

0800e1f0 <StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800e1f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e1f2:	2308      	movs	r3, #8
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f88d 1017 	strb.w	r1, [sp, #23]
 800e1fa:	2101      	movs	r1, #1
 800e1fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e200:	4805      	ldr	r0, [pc, #20]	; (800e218 <StoreArtNet::SaveSubnetSwitch(unsigned char)+0x28>)
 800e202:	9100      	str	r1, [sp, #0]
 800e204:	2205      	movs	r2, #5
 800e206:	6800      	ldr	r0, [r0, #0]
 800e208:	f10d 0317 	add.w	r3, sp, #23
 800e20c:	f7ff fea8 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e210:	b007      	add	sp, #28
 800e212:	f85d fb04 	ldr.w	pc, [sp], #4
 800e216:	bf00      	nop
 800e218:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e21c <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800e21c:	f1a0 0004 	sub.w	r0, r0, #4
 800e220:	f7ff bfe6 	b.w	800e1f0 <StoreArtNet::SaveSubnetSwitch(unsigned char)>

0800e224 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800e224:	b530      	push	{r4, r5, lr}
 800e226:	b087      	sub	sp, #28
 800e228:	460c      	mov	r4, r1
 800e22a:	4d0f      	ldr	r5, [pc, #60]	; (800e268 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x44>)
 800e22c:	9205      	str	r2, [sp, #20]
 800e22e:	b951      	cbnz	r1, 800e246 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x22>
 800e230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e234:	9102      	str	r1, [sp, #8]
 800e236:	2101      	movs	r1, #1
 800e238:	226b      	movs	r2, #107	; 0x6b
 800e23a:	e9cd 1300 	strd	r1, r3, [sp]
 800e23e:	6828      	ldr	r0, [r5, #0]
 800e240:	ab05      	add	r3, sp, #20
 800e242:	f7ff fe8d 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e246:	2300      	movs	r3, #0
 800e248:	9302      	str	r3, [sp, #8]
 800e24a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e24e:	2101      	movs	r1, #1
 800e250:	40a3      	lsls	r3, r4
 800e252:	9301      	str	r3, [sp, #4]
 800e254:	6828      	ldr	r0, [r5, #0]
 800e256:	9100      	str	r1, [sp, #0]
 800e258:	ab05      	add	r3, sp, #20
 800e25a:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 800e25e:	f7ff fe7f 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e262:	b007      	add	sp, #28
 800e264:	bd30      	pop	{r4, r5, pc}
 800e266:	bf00      	nop
 800e268:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e26c <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800e26c:	f1a0 0004 	sub.w	r0, r0, #4
 800e270:	f7ff bfd8 	b.w	800e224 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

0800e274 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800e274:	b530      	push	{r4, r5, lr}
 800e276:	b087      	sub	sp, #28
 800e278:	460c      	mov	r4, r1
 800e27a:	4d0f      	ldr	r5, [pc, #60]	; (800e2b8 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x44>)
 800e27c:	9205      	str	r2, [sp, #20]
 800e27e:	b951      	cbnz	r1, 800e296 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x22>
 800e280:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e284:	9102      	str	r1, [sp, #8]
 800e286:	2101      	movs	r1, #1
 800e288:	2270      	movs	r2, #112	; 0x70
 800e28a:	e9cd 1300 	strd	r1, r3, [sp]
 800e28e:	6828      	ldr	r0, [r5, #0]
 800e290:	ab05      	add	r3, sp, #20
 800e292:	f7ff fe65 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e296:	2300      	movs	r3, #0
 800e298:	9302      	str	r3, [sp, #8]
 800e29a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e29e:	2101      	movs	r1, #1
 800e2a0:	40a3      	lsls	r3, r4
 800e2a2:	9301      	str	r3, [sp, #4]
 800e2a4:	6828      	ldr	r0, [r5, #0]
 800e2a6:	9100      	str	r1, [sp, #0]
 800e2a8:	ab05      	add	r3, sp, #20
 800e2aa:	f104 0271 	add.w	r2, r4, #113	; 0x71
 800e2ae:	f7ff fe57 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e2b2:	b007      	add	sp, #28
 800e2b4:	bd30      	pop	{r4, r5, pc}
 800e2b6:	bf00      	nop
 800e2b8:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e2bc <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800e2bc:	f1a0 0004 	sub.w	r0, r0, #4
 800e2c0:	f7ff bfd8 	b.w	800e274 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

0800e2c4 <StoreArtNet::~StoreArtNet()>:
 800e2c4:	b510      	push	{r4, lr}
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	f004 fbde 	bl	8012a88 <operator delete(void*)>
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	bd10      	pop	{r4, pc}

0800e2d0 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800e2d0:	f1a0 0004 	sub.w	r0, r0, #4
 800e2d4:	e7f6      	b.n	800e2c4 <StoreArtNet::~StoreArtNet()>
	...

0800e2d8 <StoreArtNet::Copy(artnetparams::Params*)>:
 800e2d8:	2300      	movs	r3, #0
 800e2da:	b507      	push	{r0, r1, r2, lr}
 800e2dc:	4805      	ldr	r0, [pc, #20]	; (800e2f4 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 800e2de:	9300      	str	r3, [sp, #0]
 800e2e0:	460a      	mov	r2, r1
 800e2e2:	2387      	movs	r3, #135	; 0x87
 800e2e4:	2101      	movs	r1, #1
 800e2e6:	6800      	ldr	r0, [r0, #0]
 800e2e8:	f7ff fe7a 	bl	800dfe0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e2ec:	b003      	add	sp, #12
 800e2ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2f2:	bf00      	nop
 800e2f4:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e2f8 <StoreArtNet::StoreArtNet()>:
 800e2f8:	4a04      	ldr	r2, [pc, #16]	; (800e30c <StoreArtNet::StoreArtNet()+0x14>)
 800e2fa:	f102 0108 	add.w	r1, r2, #8
 800e2fe:	323c      	adds	r2, #60	; 0x3c
 800e300:	6042      	str	r2, [r0, #4]
 800e302:	4a03      	ldr	r2, [pc, #12]	; (800e310 <StoreArtNet::StoreArtNet()+0x18>)
 800e304:	6001      	str	r1, [r0, #0]
 800e306:	6010      	str	r0, [r2, #0]
 800e308:	4770      	bx	lr
 800e30a:	bf00      	nop
 800e30c:	080167d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, sl, sp, lr}
 800e310:	20002ed0 	ldrdcs	r2, [r0], -r0

0800e314 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800e314:	4770      	bx	lr
	...

0800e318 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 800e318:	2300      	movs	r3, #0
 800e31a:	b507      	push	{r0, r1, r2, lr}
 800e31c:	4805      	ldr	r0, [pc, #20]	; (800e334 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	460a      	mov	r2, r1
 800e322:	2322      	movs	r3, #34	; 0x22
 800e324:	210f      	movs	r1, #15
 800e326:	6800      	ldr	r0, [r0, #0]
 800e328:	f7ff fe5a 	bl	800dfe0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e32c:	b003      	add	sp, #12
 800e32e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e332:	bf00      	nop
 800e334:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e338 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 800e338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e33a:	2200      	movs	r2, #0
 800e33c:	460b      	mov	r3, r1
 800e33e:	2122      	movs	r1, #34	; 0x22
 800e340:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e344:	4804      	ldr	r0, [pc, #16]	; (800e358 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800e346:	9100      	str	r1, [sp, #0]
 800e348:	6800      	ldr	r0, [r0, #0]
 800e34a:	210f      	movs	r1, #15
 800e34c:	f7ff fe08 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e350:	b005      	add	sp, #20
 800e352:	f85d fb04 	ldr.w	pc, [sp], #4
 800e356:	bf00      	nop
 800e358:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e35c <StoreDisplayUdf::~StoreDisplayUdf()>:
 800e35c:	b510      	push	{r4, lr}
 800e35e:	4604      	mov	r4, r0
 800e360:	f004 fb92 	bl	8012a88 <operator delete(void*)>
 800e364:	4620      	mov	r0, r4
 800e366:	bd10      	pop	{r4, pc}

0800e368 <StoreDisplayUdf::StoreDisplayUdf()>:
 800e368:	4a02      	ldr	r2, [pc, #8]	; (800e374 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800e36a:	6002      	str	r2, [r0, #0]
 800e36c:	4a02      	ldr	r2, [pc, #8]	; (800e378 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 800e36e:	6010      	str	r0, [r2, #0]
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	08016840 	stmdaeq	r1, {r6, fp, sp, lr}
 800e378:	20002ed4 	ldrdcs	r2, [r0], -r4

0800e37c <StoreDmxSend::~StoreDmxSend()>:
 800e37c:	4770      	bx	lr
	...

0800e380 <StoreDmxSend::Copy(TDmxParams*)>:
 800e380:	2300      	movs	r3, #0
 800e382:	b507      	push	{r0, r1, r2, lr}
 800e384:	4805      	ldr	r0, [pc, #20]	; (800e39c <StoreDmxSend::Copy(TDmxParams*)+0x1c>)
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	460a      	mov	r2, r1
 800e38a:	230a      	movs	r3, #10
 800e38c:	2102      	movs	r1, #2
 800e38e:	6800      	ldr	r0, [r0, #0]
 800e390:	f7ff fe26 	bl	800dfe0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e394:	b003      	add	sp, #12
 800e396:	f85d fb04 	ldr.w	pc, [sp], #4
 800e39a:	bf00      	nop
 800e39c:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e3a0 <StoreDmxSend::Update(TDmxParams const*)>:
 800e3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	210a      	movs	r1, #10
 800e3a8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e3ac:	4804      	ldr	r0, [pc, #16]	; (800e3c0 <StoreDmxSend::Update(TDmxParams const*)+0x20>)
 800e3ae:	9100      	str	r1, [sp, #0]
 800e3b0:	6800      	ldr	r0, [r0, #0]
 800e3b2:	2102      	movs	r1, #2
 800e3b4:	f7ff fdd4 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e3b8:	b005      	add	sp, #20
 800e3ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3be:	bf00      	nop
 800e3c0:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e3c4 <StoreDmxSend::~StoreDmxSend()>:
 800e3c4:	b510      	push	{r4, lr}
 800e3c6:	4604      	mov	r4, r0
 800e3c8:	f004 fb5e 	bl	8012a88 <operator delete(void*)>
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	bd10      	pop	{r4, pc}

0800e3d0 <StoreDmxSend::StoreDmxSend()>:
 800e3d0:	4a02      	ldr	r2, [pc, #8]	; (800e3dc <StoreDmxSend::StoreDmxSend()+0xc>)
 800e3d2:	6002      	str	r2, [r0, #0]
 800e3d4:	4a02      	ldr	r2, [pc, #8]	; (800e3e0 <StoreDmxSend::StoreDmxSend()+0x10>)
 800e3d6:	6010      	str	r0, [r2, #0]
 800e3d8:	4770      	bx	lr
 800e3da:	bf00      	nop
 800e3dc:	08016858 	stmdaeq	r1, {r3, r4, r6, fp, sp, lr}
 800e3e0:	20002ed8 	ldrdcs	r2, [r0], -r8

0800e3e4 <StoreNetwork::~StoreNetwork()>:
 800e3e4:	4770      	bx	lr

0800e3e6 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800e3e6:	3804      	subs	r0, #4
 800e3e8:	4770      	bx	lr
	...

0800e3ec <StoreNetwork::Update(TNetworkParams const*)>:
 800e3ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	215e      	movs	r1, #94	; 0x5e
 800e3f4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e3f8:	4804      	ldr	r0, [pc, #16]	; (800e40c <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 800e3fa:	9100      	str	r1, [sp, #0]
 800e3fc:	6800      	ldr	r0, [r0, #0]
 800e3fe:	4611      	mov	r1, r2
 800e400:	f7ff fdae 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e404:	b005      	add	sp, #20
 800e406:	f85d fb04 	ldr.w	pc, [sp], #4
 800e40a:	bf00      	nop
 800e40c:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e410 <StoreNetwork::SaveDhcp(bool)>:
 800e410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e412:	2301      	movs	r3, #1
 800e414:	f88d 1017 	strb.w	r1, [sp, #23]
 800e418:	2100      	movs	r1, #0
 800e41a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e41e:	4805      	ldr	r0, [pc, #20]	; (800e434 <StoreNetwork::SaveDhcp(bool)+0x24>)
 800e420:	9300      	str	r3, [sp, #0]
 800e422:	2214      	movs	r2, #20
 800e424:	6800      	ldr	r0, [r0, #0]
 800e426:	f10d 0317 	add.w	r3, sp, #23
 800e42a:	f7ff fd99 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e42e:	b007      	add	sp, #28
 800e430:	f85d fb04 	ldr.w	pc, [sp], #4
 800e434:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e438 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800e438:	f1a0 0004 	sub.w	r0, r0, #4
 800e43c:	e7e8      	b.n	800e410 <StoreNetwork::SaveDhcp(bool)>
 800e43e:	bf00      	nop

0800e440 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 800e440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e442:	2308      	movs	r3, #8
 800e444:	9105      	str	r1, [sp, #20]
 800e446:	2100      	movs	r1, #0
 800e448:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e44c:	2304      	movs	r3, #4
 800e44e:	4805      	ldr	r0, [pc, #20]	; (800e464 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 800e450:	9300      	str	r3, [sp, #0]
 800e452:	220c      	movs	r2, #12
 800e454:	6800      	ldr	r0, [r0, #0]
 800e456:	ab05      	add	r3, sp, #20
 800e458:	f7ff fd82 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e45c:	b007      	add	sp, #28
 800e45e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e462:	bf00      	nop
 800e464:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e468 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 800e468:	f1a0 0004 	sub.w	r0, r0, #4
 800e46c:	e7e8      	b.n	800e440 <StoreNetwork::SaveGatewayIp(unsigned int)>
 800e46e:	bf00      	nop

0800e470 <StoreNetwork::SaveNetMask(unsigned int)>:
 800e470:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e472:	2304      	movs	r3, #4
 800e474:	9105      	str	r1, [sp, #20]
 800e476:	2100      	movs	r1, #0
 800e478:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e47c:	4804      	ldr	r0, [pc, #16]	; (800e490 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	2208      	movs	r2, #8
 800e482:	6800      	ldr	r0, [r0, #0]
 800e484:	ab05      	add	r3, sp, #20
 800e486:	f7ff fd6b 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e48a:	b007      	add	sp, #28
 800e48c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e490:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e494 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 800e494:	f1a0 0004 	sub.w	r0, r0, #4
 800e498:	e7ea      	b.n	800e470 <StoreNetwork::SaveNetMask(unsigned int)>
 800e49a:	bf00      	nop

0800e49c <StoreNetwork::SaveIp(unsigned int)>:
 800e49c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e49e:	2302      	movs	r3, #2
 800e4a0:	9105      	str	r1, [sp, #20]
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	2204      	movs	r2, #4
 800e4a6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e4aa:	4804      	ldr	r0, [pc, #16]	; (800e4bc <StoreNetwork::SaveIp(unsigned int)+0x20>)
 800e4ac:	9200      	str	r2, [sp, #0]
 800e4ae:	6800      	ldr	r0, [r0, #0]
 800e4b0:	ab05      	add	r3, sp, #20
 800e4b2:	f7ff fd55 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e4b6:	b007      	add	sp, #28
 800e4b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4bc:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e4c0 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 800e4c0:	f1a0 0004 	sub.w	r0, r0, #4
 800e4c4:	e7ea      	b.n	800e49c <StoreNetwork::SaveIp(unsigned int)>
 800e4c6:	bf00      	nop

0800e4c8 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800e4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	2020      	movs	r0, #32
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	2a40      	cmp	r2, #64	; 0x40
 800e4d2:	bf28      	it	cs
 800e4d4:	2240      	movcs	r2, #64	; 0x40
 800e4d6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e4da:	4804      	ldr	r0, [pc, #16]	; (800e4ec <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 800e4dc:	9200      	str	r2, [sp, #0]
 800e4de:	6800      	ldr	r0, [r0, #0]
 800e4e0:	2215      	movs	r2, #21
 800e4e2:	f7ff fd3d 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e4e6:	b005      	add	sp, #20
 800e4e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4ec:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e4f0 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800e4f0:	f1a0 0004 	sub.w	r0, r0, #4
 800e4f4:	e7e8      	b.n	800e4c8 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 800e4f6:	bf00      	nop

0800e4f8 <StoreNetwork::~StoreNetwork()>:
 800e4f8:	b510      	push	{r4, lr}
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	f004 fac4 	bl	8012a88 <operator delete(void*)>
 800e500:	4620      	mov	r0, r4
 800e502:	bd10      	pop	{r4, pc}

0800e504 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800e504:	f1a0 0004 	sub.w	r0, r0, #4
 800e508:	e7f6      	b.n	800e4f8 <StoreNetwork::~StoreNetwork()>
	...

0800e50c <StoreNetwork::Copy(TNetworkParams*)>:
 800e50c:	b507      	push	{r0, r1, r2, lr}
 800e50e:	460a      	mov	r2, r1
 800e510:	2100      	movs	r1, #0
 800e512:	4804      	ldr	r0, [pc, #16]	; (800e524 <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 800e514:	9100      	str	r1, [sp, #0]
 800e516:	235e      	movs	r3, #94	; 0x5e
 800e518:	6800      	ldr	r0, [r0, #0]
 800e51a:	f7ff fd61 	bl	800dfe0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e51e:	b003      	add	sp, #12
 800e520:	f85d fb04 	ldr.w	pc, [sp], #4
 800e524:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e528 <StoreNetwork::StoreNetwork()>:
 800e528:	4a03      	ldr	r2, [pc, #12]	; (800e538 <StoreNetwork::StoreNetwork()+0x10>)
 800e52a:	6002      	str	r2, [r0, #0]
 800e52c:	322c      	adds	r2, #44	; 0x2c
 800e52e:	6042      	str	r2, [r0, #4]
 800e530:	4a02      	ldr	r2, [pc, #8]	; (800e53c <StoreNetwork::StoreNetwork()+0x14>)
 800e532:	6010      	str	r0, [r2, #0]
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	08016870 	stmdaeq	r1, {r4, r5, r6, fp, sp, lr}
 800e53c:	20002edc 	ldrdcs	r2, [r0], -ip

0800e540 <StoreRDMDevice::~StoreRDMDevice()>:
 800e540:	4770      	bx	lr

0800e542 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800e542:	3804      	subs	r0, #4
 800e544:	4770      	bx	lr
	...

0800e548 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 800e548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e54a:	2200      	movs	r2, #0
 800e54c:	460b      	mov	r3, r1
 800e54e:	2129      	movs	r1, #41	; 0x29
 800e550:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e554:	4804      	ldr	r0, [pc, #16]	; (800e568 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 800e556:	9100      	str	r1, [sp, #0]
 800e558:	6800      	ldr	r0, [r0, #0]
 800e55a:	210b      	movs	r1, #11
 800e55c:	f7ff fd00 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e560:	b005      	add	sp, #20
 800e562:	f85d fb04 	ldr.w	pc, [sp], #4
 800e566:	bf00      	nop
 800e568:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e56c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800e56c:	b570      	push	{r4, r5, r6, lr}
 800e56e:	2401      	movs	r4, #1
 800e570:	2600      	movs	r6, #0
 800e572:	4d0c      	ldr	r5, [pc, #48]	; (800e5a4 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 800e574:	b086      	sub	sp, #24
 800e576:	460b      	mov	r3, r1
 800e578:	6828      	ldr	r0, [r5, #0]
 800e57a:	f88d 2017 	strb.w	r2, [sp, #23]
 800e57e:	9200      	str	r2, [sp, #0]
 800e580:	210b      	movs	r1, #11
 800e582:	2204      	movs	r2, #4
 800e584:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800e588:	f7ff fcea 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e58c:	2224      	movs	r2, #36	; 0x24
 800e58e:	210b      	movs	r1, #11
 800e590:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800e594:	6828      	ldr	r0, [r5, #0]
 800e596:	9400      	str	r4, [sp, #0]
 800e598:	f10d 0317 	add.w	r3, sp, #23
 800e59c:	f7ff fce0 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e5a0:	b006      	add	sp, #24
 800e5a2:	bd70      	pop	{r4, r5, r6, pc}
 800e5a4:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e5a8 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800e5a8:	f1a0 0004 	sub.w	r0, r0, #4
 800e5ac:	e7de      	b.n	800e56c <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 800e5ae:	bf00      	nop

0800e5b0 <StoreRDMDevice::~StoreRDMDevice()>:
 800e5b0:	b510      	push	{r4, lr}
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	f004 fa68 	bl	8012a88 <operator delete(void*)>
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	bd10      	pop	{r4, pc}

0800e5bc <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800e5bc:	f1a0 0004 	sub.w	r0, r0, #4
 800e5c0:	e7f6      	b.n	800e5b0 <StoreRDMDevice::~StoreRDMDevice()>
	...

0800e5c4 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	b507      	push	{r0, r1, r2, lr}
 800e5c8:	4805      	ldr	r0, [pc, #20]	; (800e5e0 <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x1c>)
 800e5ca:	9300      	str	r3, [sp, #0]
 800e5cc:	460a      	mov	r2, r1
 800e5ce:	2329      	movs	r3, #41	; 0x29
 800e5d0:	210b      	movs	r1, #11
 800e5d2:	6800      	ldr	r0, [r0, #0]
 800e5d4:	f7ff fd04 	bl	800dfe0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e5d8:	b003      	add	sp, #12
 800e5da:	f85d fb04 	ldr.w	pc, [sp], #4
 800e5de:	bf00      	nop
 800e5e0:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e5e4 <StoreRDMDevice::StoreRDMDevice()>:
 800e5e4:	4a03      	ldr	r2, [pc, #12]	; (800e5f4 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 800e5e6:	6002      	str	r2, [r0, #0]
 800e5e8:	321c      	adds	r2, #28
 800e5ea:	6042      	str	r2, [r0, #4]
 800e5ec:	4a02      	ldr	r2, [pc, #8]	; (800e5f8 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 800e5ee:	6010      	str	r0, [r2, #0]
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop
 800e5f4:	080168c0 	stmdaeq	r1, {r6, r7, fp, sp, lr}
 800e5f8:	20002ee0 	andcs	r2, r0, r0, ror #29

0800e5fc <StoreRemoteConfig::~StoreRemoteConfig()>:
 800e5fc:	4770      	bx	lr
	...

0800e600 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 800e600:	2300      	movs	r3, #0
 800e602:	b507      	push	{r0, r1, r2, lr}
 800e604:	4805      	ldr	r0, [pc, #20]	; (800e61c <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 800e606:	9300      	str	r3, [sp, #0]
 800e608:	460a      	mov	r2, r1
 800e60a:	2320      	movs	r3, #32
 800e60c:	210c      	movs	r1, #12
 800e60e:	6800      	ldr	r0, [r0, #0]
 800e610:	f7ff fce6 	bl	800dfe0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e614:	b003      	add	sp, #12
 800e616:	f85d fb04 	ldr.w	pc, [sp], #4
 800e61a:	bf00      	nop
 800e61c:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e620 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 800e620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e622:	2200      	movs	r2, #0
 800e624:	460b      	mov	r3, r1
 800e626:	2120      	movs	r1, #32
 800e628:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e62c:	4804      	ldr	r0, [pc, #16]	; (800e640 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 800e62e:	9100      	str	r1, [sp, #0]
 800e630:	6800      	ldr	r0, [r0, #0]
 800e632:	210c      	movs	r1, #12
 800e634:	f7ff fc94 	bl	800df60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e638:	b005      	add	sp, #20
 800e63a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e63e:	bf00      	nop
 800e640:	20002ec8 	andcs	r2, r0, r8, asr #29

0800e644 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800e644:	b510      	push	{r4, lr}
 800e646:	4604      	mov	r4, r0
 800e648:	f004 fa1e 	bl	8012a88 <operator delete(void*)>
 800e64c:	4620      	mov	r0, r4
 800e64e:	bd10      	pop	{r4, pc}

0800e650 <StoreRemoteConfig::StoreRemoteConfig()>:
 800e650:	4a02      	ldr	r2, [pc, #8]	; (800e65c <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 800e652:	6002      	str	r2, [r0, #0]
 800e654:	4a02      	ldr	r2, [pc, #8]	; (800e660 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 800e656:	6010      	str	r0, [r2, #0]
 800e658:	4770      	bx	lr
 800e65a:	bf00      	nop
 800e65c:	080168f0 	stmdaeq	r1, {r4, r5, r6, r7, fp, sp, lr}
 800e660:	20002ee4 	andcs	r2, r0, r4, ror #29

0800e664 <FlashRom::FlashRom()>:
 800e664:	4b08      	ldr	r3, [pc, #32]	; (800e688 <FlashRom::FlashRom()+0x24>)
 800e666:	b510      	push	{r4, lr}
 800e668:	6018      	str	r0, [r3, #0]
 800e66a:	2301      	movs	r3, #1
 800e66c:	4604      	mov	r4, r0
 800e66e:	7003      	strb	r3, [r0, #0]
 800e670:	4b06      	ldr	r3, [pc, #24]	; (800e68c <FlashRom::FlashRom()+0x28>)
 800e672:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e676:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800e67a:	4905      	ldr	r1, [pc, #20]	; (800e690 <FlashRom::FlashRom()+0x2c>)
 800e67c:	029b      	lsls	r3, r3, #10
 800e67e:	4805      	ldr	r0, [pc, #20]	; (800e694 <FlashRom::FlashRom()+0x30>)
 800e680:	f004 fcfe 	bl	8013080 <printf>
 800e684:	4620      	mov	r0, r4
 800e686:	bd10      	pop	{r4, pc}
 800e688:	20002ee8 	andcs	r2, r0, r8, ror #29
 800e68c:	1ffff700 	svcne	0x00fff700
 800e690:	08016900 	stmdaeq	r1, {r8, fp, sp, lr}
 800e694:	08016905 	stmdaeq	r1, {r0, r2, r8, fp, sp, lr}

0800e698 <FlashRom::GetSize()>:
 800e698:	4b02      	ldr	r3, [pc, #8]	; (800e6a4 <FlashRom::GetSize()+0xc>)
 800e69a:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800e69e:	0280      	lsls	r0, r0, #10
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	1ffff700 	svcne	0x00fff700

0800e6a8 <FlashRom::GetSectorSize()>:
 800e6a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e6ac:	4770      	bx	lr

0800e6ae <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 800e6ae:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800e6b2:	441a      	add	r2, r3
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d004      	beq.n	800e6c2 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 800e6b8:	f851 0b04 	ldr.w	r0, [r1], #4
 800e6bc:	f843 0b04 	str.w	r0, [r3], #4
 800e6c0:	e7f8      	b.n	800e6b4 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	9b00      	ldr	r3, [sp, #0]
 800e6c6:	2001      	movs	r0, #1
 800e6c8:	601a      	str	r2, [r3, #0]
 800e6ca:	4770      	bx	lr

0800e6cc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 800e6cc:	2000      	movs	r0, #0
 800e6ce:	b538      	push	{r3, r4, r5, lr}
 800e6d0:	4c47      	ldr	r4, [pc, #284]	; (800e7f0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 800e6d2:	6018      	str	r0, [r3, #0]
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	2b04      	cmp	r3, #4
 800e6d8:	f200 8082 	bhi.w	800e7e0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800e6dc:	e8df f003 	tbb	[pc, r3]
 800e6e0:	78452003 	stmdavc	r5, {r0, r1, sp}^
 800e6e4:	4b430080 	blmi	90ce8ec <__exidx_end+0x10b769c>
 800e6e8:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800e6ec:	6019      	str	r1, [r3, #0]
 800e6ee:	4b42      	ldr	r3, [pc, #264]	; (800e7f8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800e6f0:	601a      	str	r2, [r3, #0]
 800e6f2:	4b42      	ldr	r3, [pc, #264]	; (800e7fc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 800e6f4:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800e6f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6fc:	4b40      	ldr	r3, [pc, #256]	; (800e800 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800e6fe:	d807      	bhi.n	800e710 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 800e700:	2201      	movs	r2, #1
 800e702:	701a      	strb	r2, [r3, #0]
 800e704:	f004 ff52 	bl	80135ac <fmc_bank0_unlock>
 800e708:	2301      	movs	r3, #1
 800e70a:	6023      	str	r3, [r4, #0]
 800e70c:	2000      	movs	r0, #0
 800e70e:	e026      	b.n	800e75e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800e710:	4a3c      	ldr	r2, [pc, #240]	; (800e804 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 800e712:	4291      	cmp	r1, r2
 800e714:	d3f4      	bcc.n	800e700 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 800e716:	2200      	movs	r2, #0
 800e718:	701a      	strb	r2, [r3, #0]
 800e71a:	f004 ff55 	bl	80135c8 <fmc_bank1_unlock>
 800e71e:	e7f3      	b.n	800e708 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800e720:	4d37      	ldr	r5, [pc, #220]	; (800e800 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800e722:	782b      	ldrb	r3, [r5, #0]
 800e724:	b15b      	cbz	r3, 800e73e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 800e726:	f004 ff6d 	bl	8013604 <fmc_bank0_state_get>
 800e72a:	2801      	cmp	r0, #1
 800e72c:	d0ee      	beq.n	800e70c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 800e72e:	7829      	ldrb	r1, [r5, #0]
 800e730:	4b35      	ldr	r3, [pc, #212]	; (800e808 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800e732:	b939      	cbnz	r1, 800e744 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 800e734:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e736:	f022 0202 	bic.w	r2, r2, #2
 800e73a:	651a      	str	r2, [r3, #80]	; 0x50
 800e73c:	e006      	b.n	800e74c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 800e73e:	f004 ff75 	bl	801362c <fmc_bank1_state_get>
 800e742:	e7f2      	b.n	800e72a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 800e744:	691a      	ldr	r2, [r3, #16]
 800e746:	f022 0202 	bic.w	r2, r2, #2
 800e74a:	611a      	str	r2, [r3, #16]
 800e74c:	4b2a      	ldr	r3, [pc, #168]	; (800e7f8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	b94b      	cbnz	r3, 800e766 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 800e752:	b129      	cbz	r1, 800e760 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 800e754:	f004 ff46 	bl	80135e4 <fmc_bank0_lock>
 800e758:	2300      	movs	r3, #0
 800e75a:	2001      	movs	r0, #1
 800e75c:	6023      	str	r3, [r4, #0]
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
 800e760:	f004 ff48 	bl	80135f4 <fmc_bank1_lock>
 800e764:	e7f8      	b.n	800e758 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 800e766:	2302      	movs	r3, #2
 800e768:	e7cf      	b.n	800e70a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 800e76a:	4923      	ldr	r1, [pc, #140]	; (800e7f8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800e76c:	680b      	ldr	r3, [r1, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d0ca      	beq.n	800e708 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800e772:	4b23      	ldr	r3, [pc, #140]	; (800e800 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800e774:	4a1f      	ldr	r2, [pc, #124]	; (800e7f4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 800e776:	7818      	ldrb	r0, [r3, #0]
 800e778:	4b23      	ldr	r3, [pc, #140]	; (800e808 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800e77a:	b190      	cbz	r0, 800e7a2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 800e77c:	6918      	ldr	r0, [r3, #16]
 800e77e:	f040 0002 	orr.w	r0, r0, #2
 800e782:	6118      	str	r0, [r3, #16]
 800e784:	6810      	ldr	r0, [r2, #0]
 800e786:	6158      	str	r0, [r3, #20]
 800e788:	6918      	ldr	r0, [r3, #16]
 800e78a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800e78e:	6118      	str	r0, [r3, #16]
 800e790:	680b      	ldr	r3, [r1, #0]
 800e792:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800e796:	600b      	str	r3, [r1, #0]
 800e798:	6813      	ldr	r3, [r2, #0]
 800e79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e79e:	6013      	str	r3, [r2, #0]
 800e7a0:	e7b2      	b.n	800e708 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800e7a2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e7a4:	f040 0002 	orr.w	r0, r0, #2
 800e7a8:	6518      	str	r0, [r3, #80]	; 0x50
 800e7aa:	6810      	ldr	r0, [r2, #0]
 800e7ac:	6558      	str	r0, [r3, #84]	; 0x54
 800e7ae:	69dd      	ldr	r5, [r3, #28]
 800e7b0:	07ad      	lsls	r5, r5, #30
 800e7b2:	bf48      	it	mi
 800e7b4:	6158      	strmi	r0, [r3, #20]
 800e7b6:	4814      	ldr	r0, [pc, #80]	; (800e808 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800e7b8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7be:	6503      	str	r3, [r0, #80]	; 0x50
 800e7c0:	680b      	ldr	r3, [r1, #0]
 800e7c2:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800e7c6:	600b      	str	r3, [r1, #0]
 800e7c8:	6813      	ldr	r3, [r2, #0]
 800e7ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e7ce:	e7e6      	b.n	800e79e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 800e7d0:	4b0b      	ldr	r3, [pc, #44]	; (800e800 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800e7d2:	781a      	ldrb	r2, [r3, #0]
 800e7d4:	4b0c      	ldr	r3, [pc, #48]	; (800e808 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800e7d6:	b132      	cbz	r2, 800e7e6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 800e7d8:	691a      	ldr	r2, [r3, #16]
 800e7da:	f022 0201 	bic.w	r2, r2, #1
 800e7de:	611a      	str	r2, [r3, #16]
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	6020      	str	r0, [r4, #0]
 800e7e4:	e7bb      	b.n	800e75e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800e7e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7e8:	f022 0201 	bic.w	r2, r2, #1
 800e7ec:	651a      	str	r2, [r3, #80]	; 0x50
 800e7ee:	e7f7      	b.n	800e7e0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800e7f0:	20002ef0 	strdcs	r2, [r0], -r0
 800e7f4:	20002ef4 	strdcs	r2, [r0], -r4
 800e7f8:	20002f00 	andcs	r2, r0, r0, lsl #30
 800e7fc:	1ffff700 	svcne	0x00fff700
 800e800:	20002efc 	strdcs	r2, [r0], -ip
 800e804:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800e808:	40022000 	andmi	r2, r2, r0

0800e80c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 800e80c:	b570      	push	{r4, r5, r6, lr}
 800e80e:	2400      	movs	r4, #0
 800e810:	9804      	ldr	r0, [sp, #16]
 800e812:	6004      	str	r4, [r0, #0]
 800e814:	4c48      	ldr	r4, [pc, #288]	; (800e938 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 800e816:	6820      	ldr	r0, [r4, #0]
 800e818:	2804      	cmp	r0, #4
 800e81a:	d848      	bhi.n	800e8ae <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 800e81c:	e8df f000 	tbb	[pc, r0]
 800e820:	22847c03 	addcs	r7, r4, #768	; 0x300
 800e824:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 800e828:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800e82c:	6001      	str	r1, [r0, #0]
 800e82e:	4844      	ldr	r0, [pc, #272]	; (800e940 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800e830:	6003      	str	r3, [r0, #0]
 800e832:	4b44      	ldr	r3, [pc, #272]	; (800e944 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800e834:	601a      	str	r2, [r3, #0]
 800e836:	4b44      	ldr	r3, [pc, #272]	; (800e948 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 800e838:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800e83c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e840:	4b42      	ldr	r3, [pc, #264]	; (800e94c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e842:	d807      	bhi.n	800e854 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 800e844:	2201      	movs	r2, #1
 800e846:	701a      	strb	r2, [r3, #0]
 800e848:	f004 feb0 	bl	80135ac <fmc_bank0_unlock>
 800e84c:	2303      	movs	r3, #3
 800e84e:	6023      	str	r3, [r4, #0]
 800e850:	2000      	movs	r0, #0
 800e852:	e026      	b.n	800e8a2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800e854:	4a3e      	ldr	r2, [pc, #248]	; (800e950 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 800e856:	4291      	cmp	r1, r2
 800e858:	d3f4      	bcc.n	800e844 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 800e85a:	2200      	movs	r2, #0
 800e85c:	701a      	strb	r2, [r3, #0]
 800e85e:	f004 feb3 	bl	80135c8 <fmc_bank1_unlock>
 800e862:	e7f3      	b.n	800e84c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800e864:	4d39      	ldr	r5, [pc, #228]	; (800e94c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e866:	782b      	ldrb	r3, [r5, #0]
 800e868:	b15b      	cbz	r3, 800e882 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 800e86a:	f004 fecb 	bl	8013604 <fmc_bank0_state_get>
 800e86e:	2801      	cmp	r0, #1
 800e870:	d0ee      	beq.n	800e850 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 800e872:	7829      	ldrb	r1, [r5, #0]
 800e874:	4b37      	ldr	r3, [pc, #220]	; (800e954 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800e876:	b939      	cbnz	r1, 800e888 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 800e878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e87a:	f022 0201 	bic.w	r2, r2, #1
 800e87e:	651a      	str	r2, [r3, #80]	; 0x50
 800e880:	e006      	b.n	800e890 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 800e882:	f004 fed3 	bl	801362c <fmc_bank1_state_get>
 800e886:	e7f2      	b.n	800e86e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 800e888:	691a      	ldr	r2, [r3, #16]
 800e88a:	f022 0201 	bic.w	r2, r2, #1
 800e88e:	611a      	str	r2, [r3, #16]
 800e890:	4b2c      	ldr	r3, [pc, #176]	; (800e944 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	b94b      	cbnz	r3, 800e8aa <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 800e896:	b129      	cbz	r1, 800e8a4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 800e898:	f004 fea4 	bl	80135e4 <fmc_bank0_lock>
 800e89c:	2300      	movs	r3, #0
 800e89e:	2001      	movs	r0, #1
 800e8a0:	6023      	str	r3, [r4, #0]
 800e8a2:	bd70      	pop	{r4, r5, r6, pc}
 800e8a4:	f004 fea6 	bl	80135f4 <fmc_bank1_lock>
 800e8a8:	e7f8      	b.n	800e89c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 800e8aa:	2304      	movs	r3, #4
 800e8ac:	e7cf      	b.n	800e84e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 800e8ae:	4a25      	ldr	r2, [pc, #148]	; (800e944 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800e8b0:	6813      	ldr	r3, [r2, #0]
 800e8b2:	2b03      	cmp	r3, #3
 800e8b4:	d91a      	bls.n	800e8ec <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 800e8b6:	4b25      	ldr	r3, [pc, #148]	; (800e94c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e8b8:	7819      	ldrb	r1, [r3, #0]
 800e8ba:	4b26      	ldr	r3, [pc, #152]	; (800e954 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800e8bc:	b189      	cbz	r1, 800e8e2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 800e8be:	6919      	ldr	r1, [r3, #16]
 800e8c0:	f041 0101 	orr.w	r1, r1, #1
 800e8c4:	6119      	str	r1, [r3, #16]
 800e8c6:	4d1e      	ldr	r5, [pc, #120]	; (800e940 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800e8c8:	481c      	ldr	r0, [pc, #112]	; (800e93c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800e8ca:	6829      	ldr	r1, [r5, #0]
 800e8cc:	6803      	ldr	r3, [r0, #0]
 800e8ce:	f851 6b04 	ldr.w	r6, [r1], #4
 800e8d2:	f843 6b04 	str.w	r6, [r3], #4
 800e8d6:	6003      	str	r3, [r0, #0]
 800e8d8:	6813      	ldr	r3, [r2, #0]
 800e8da:	6029      	str	r1, [r5, #0]
 800e8dc:	3b04      	subs	r3, #4
 800e8de:	6013      	str	r3, [r2, #0]
 800e8e0:	e7b4      	b.n	800e84c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800e8e2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e8e4:	f041 0101 	orr.w	r1, r1, #1
 800e8e8:	6519      	str	r1, [r3, #80]	; 0x50
 800e8ea:	e7ec      	b.n	800e8c6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d0ad      	beq.n	800e84c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800e8f0:	4b16      	ldr	r3, [pc, #88]	; (800e94c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e8f2:	781a      	ldrb	r2, [r3, #0]
 800e8f4:	4b17      	ldr	r3, [pc, #92]	; (800e954 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800e8f6:	b152      	cbz	r2, 800e90e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 800e8f8:	691a      	ldr	r2, [r3, #16]
 800e8fa:	f042 0201 	orr.w	r2, r2, #1
 800e8fe:	611a      	str	r2, [r3, #16]
 800e900:	4a0f      	ldr	r2, [pc, #60]	; (800e940 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800e902:	4b0e      	ldr	r3, [pc, #56]	; (800e93c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800e904:	6812      	ldr	r2, [r2, #0]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6812      	ldr	r2, [r2, #0]
 800e90a:	601a      	str	r2, [r3, #0]
 800e90c:	e79e      	b.n	800e84c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800e90e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e910:	f042 0201 	orr.w	r2, r2, #1
 800e914:	651a      	str	r2, [r3, #80]	; 0x50
 800e916:	e7f3      	b.n	800e900 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 800e918:	4b0c      	ldr	r3, [pc, #48]	; (800e94c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800e91a:	781a      	ldrb	r2, [r3, #0]
 800e91c:	4b0d      	ldr	r3, [pc, #52]	; (800e954 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800e91e:	b132      	cbz	r2, 800e92e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 800e920:	691a      	ldr	r2, [r3, #16]
 800e922:	f022 0202 	bic.w	r2, r2, #2
 800e926:	611a      	str	r2, [r3, #16]
 800e928:	2000      	movs	r0, #0
 800e92a:	6020      	str	r0, [r4, #0]
 800e92c:	e7b9      	b.n	800e8a2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800e92e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e930:	f022 0202 	bic.w	r2, r2, #2
 800e934:	651a      	str	r2, [r3, #80]	; 0x50
 800e936:	e7f7      	b.n	800e928 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 800e938:	20002ef0 	strdcs	r2, [r0], -r0
 800e93c:	20002eec 	andcs	r2, r0, ip, ror #29
 800e940:	20002ef8 	strdcs	r2, [r0], -r8
 800e944:	20002f00 	andcs	r2, r0, r0, lsl #30
 800e948:	1ffff700 	svcne	0x00fff700
 800e94c:	20002efc 	strdcs	r2, [r0], -ip
 800e950:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800e954:	40022000 	andmi	r2, r2, r0

0800e958 <net_init>:
 800e958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e95c:	460c      	mov	r4, r1
 800e95e:	4616      	mov	r6, r2
 800e960:	9f06      	ldr	r7, [sp, #24]
 800e962:	4a22      	ldr	r2, [pc, #136]	; (800e9ec <net_init+0x94>)
 800e964:	461d      	mov	r5, r3
 800e966:	1e43      	subs	r3, r0, #1
 800e968:	3005      	adds	r0, #5
 800e96a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800e96e:	4283      	cmp	r3, r0
 800e970:	f802 1b01 	strb.w	r1, [r2], #1
 800e974:	d1f9      	bne.n	800e96a <net_init+0x12>
 800e976:	4623      	mov	r3, r4
 800e978:	4a1d      	ldr	r2, [pc, #116]	; (800e9f0 <net_init+0x98>)
 800e97a:	f104 010c 	add.w	r1, r4, #12
 800e97e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e982:	428b      	cmp	r3, r1
 800e984:	f802 0b01 	strb.w	r0, [r2], #1
 800e988:	d1f9      	bne.n	800e97e <net_init+0x26>
 800e98a:	f04f 0800 	mov.w	r8, #0
 800e98e:	4918      	ldr	r1, [pc, #96]	; (800e9f0 <net_init+0x98>)
 800e990:	4816      	ldr	r0, [pc, #88]	; (800e9ec <net_init+0x94>)
 800e992:	f002 fc5c 	bl	801124e <ip_init>
 800e996:	4815      	ldr	r0, [pc, #84]	; (800e9ec <net_init+0x94>)
 800e998:	f000 f8b6 	bl	800eb08 <rfc3927_init>
 800e99c:	f887 8000 	strb.w	r8, [r7]
 800e9a0:	782b      	ldrb	r3, [r5, #0]
 800e9a2:	b163      	cbz	r3, 800e9be <net_init+0x66>
 800e9a4:	4632      	mov	r2, r6
 800e9a6:	4912      	ldr	r1, [pc, #72]	; (800e9f0 <net_init+0x98>)
 800e9a8:	4810      	ldr	r0, [pc, #64]	; (800e9ec <net_init+0x94>)
 800e9aa:	f002 f961 	bl	8010c70 <dhcp_client>
 800e9ae:	4540      	cmp	r0, r8
 800e9b0:	da05      	bge.n	800e9be <net_init+0x66>
 800e9b2:	480f      	ldr	r0, [pc, #60]	; (800e9f0 <net_init+0x98>)
 800e9b4:	f885 8000 	strb.w	r8, [r5]
 800e9b8:	f000 f8b2 	bl	800eb20 <rfc3927>
 800e9bc:	7038      	strb	r0, [r7, #0]
 800e9be:	490c      	ldr	r1, [pc, #48]	; (800e9f0 <net_init+0x98>)
 800e9c0:	480a      	ldr	r0, [pc, #40]	; (800e9ec <net_init+0x94>)
 800e9c2:	f001 ff65 	bl	8010890 <arp_init>
 800e9c6:	480a      	ldr	r0, [pc, #40]	; (800e9f0 <net_init+0x98>)
 800e9c8:	f002 fc38 	bl	801123c <ip_set_ip>
 800e9cc:	f000 fa10 	bl	800edf0 <tcp_init>
 800e9d0:	4a07      	ldr	r2, [pc, #28]	; (800e9f0 <net_init+0x98>)
 800e9d2:	1e63      	subs	r3, r4, #1
 800e9d4:	340b      	adds	r4, #11
 800e9d6:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e9da:	f803 1f01 	strb.w	r1, [r3, #1]!
 800e9de:	429c      	cmp	r4, r3
 800e9e0:	d1f9      	bne.n	800e9d6 <net_init+0x7e>
 800e9e2:	782a      	ldrb	r2, [r5, #0]
 800e9e4:	4b03      	ldr	r3, [pc, #12]	; (800e9f4 <net_init+0x9c>)
 800e9e6:	701a      	strb	r2, [r3, #0]
 800e9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ec:	20002f10 	andcs	r2, r0, r0, lsl pc
 800e9f0:	20002f04 	andcs	r2, r0, r4, lsl #30
 800e9f4:	20002f16 	andcs	r2, r0, r6, lsl pc

0800e9f8 <net_shutdown>:
 800e9f8:	b508      	push	{r3, lr}
 800e9fa:	f002 fc33 	bl	8011264 <ip_shutdown>
 800e9fe:	4b04      	ldr	r3, [pc, #16]	; (800ea10 <net_shutdown+0x18>)
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	b11b      	cbz	r3, 800ea0c <net_shutdown+0x14>
 800ea04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ea08:	f002 ba3a 	b.w	8010e80 <dhcp_client_release>
 800ea0c:	bd08      	pop	{r3, pc}
 800ea0e:	bf00      	nop
 800ea10:	20002f16 	andcs	r2, r0, r6, lsl pc

0800ea14 <net_set_ip>:
 800ea14:	b510      	push	{r4, lr}
 800ea16:	4c05      	ldr	r4, [pc, #20]	; (800ea2c <net_set_ip+0x18>)
 800ea18:	6020      	str	r0, [r4, #0]
 800ea1a:	4621      	mov	r1, r4
 800ea1c:	4804      	ldr	r0, [pc, #16]	; (800ea30 <net_set_ip+0x1c>)
 800ea1e:	f001 ff37 	bl	8010890 <arp_init>
 800ea22:	4620      	mov	r0, r4
 800ea24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea28:	f002 bc08 	b.w	801123c <ip_set_ip>
 800ea2c:	20002f04 	andcs	r2, r0, r4, lsl #30
 800ea30:	20002f10 	andcs	r2, r0, r0, lsl pc

0800ea34 <net_set_gw>:
 800ea34:	4b02      	ldr	r3, [pc, #8]	; (800ea40 <net_set_gw+0xc>)
 800ea36:	6098      	str	r0, [r3, #8]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f002 bbff 	b.w	801123c <ip_set_ip>
 800ea3e:	bf00      	nop
 800ea40:	20002f04 	andcs	r2, r0, r4, lsl #30

0800ea44 <net_set_dhcp>:
 800ea44:	b570      	push	{r4, r5, r6, lr}
 800ea46:	2400      	movs	r4, #0
 800ea48:	4605      	mov	r5, r0
 800ea4a:	7014      	strb	r4, [r2, #0]
 800ea4c:	4616      	mov	r6, r2
 800ea4e:	4810      	ldr	r0, [pc, #64]	; (800ea90 <net_set_dhcp+0x4c>)
 800ea50:	460a      	mov	r2, r1
 800ea52:	4910      	ldr	r1, [pc, #64]	; (800ea94 <net_set_dhcp+0x50>)
 800ea54:	f002 f90c 	bl	8010c70 <dhcp_client>
 800ea58:	42a0      	cmp	r0, r4
 800ea5a:	da17      	bge.n	800ea8c <net_set_dhcp+0x48>
 800ea5c:	480d      	ldr	r0, [pc, #52]	; (800ea94 <net_set_dhcp+0x50>)
 800ea5e:	f000 f85f 	bl	800eb20 <rfc3927>
 800ea62:	7030      	strb	r0, [r6, #0]
 800ea64:	490b      	ldr	r1, [pc, #44]	; (800ea94 <net_set_dhcp+0x50>)
 800ea66:	480a      	ldr	r0, [pc, #40]	; (800ea90 <net_set_dhcp+0x4c>)
 800ea68:	f001 ff12 	bl	8010890 <arp_init>
 800ea6c:	4809      	ldr	r0, [pc, #36]	; (800ea94 <net_set_dhcp+0x50>)
 800ea6e:	f002 fbe5 	bl	801123c <ip_set_ip>
 800ea72:	4a08      	ldr	r2, [pc, #32]	; (800ea94 <net_set_dhcp+0x50>)
 800ea74:	1e6b      	subs	r3, r5, #1
 800ea76:	350b      	adds	r5, #11
 800ea78:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ea7c:	f803 1f01 	strb.w	r1, [r3, #1]!
 800ea80:	42ab      	cmp	r3, r5
 800ea82:	d1f9      	bne.n	800ea78 <net_set_dhcp+0x34>
 800ea84:	4b04      	ldr	r3, [pc, #16]	; (800ea98 <net_set_dhcp+0x54>)
 800ea86:	4620      	mov	r0, r4
 800ea88:	701c      	strb	r4, [r3, #0]
 800ea8a:	bd70      	pop	{r4, r5, r6, pc}
 800ea8c:	2401      	movs	r4, #1
 800ea8e:	e7e9      	b.n	800ea64 <net_set_dhcp+0x20>
 800ea90:	20002f10 	andcs	r2, r0, r0, lsl pc
 800ea94:	20002f04 	andcs	r2, r0, r4, lsl #30
 800ea98:	20002f16 	andcs	r2, r0, r6, lsl pc

0800ea9c <net_dhcp_release>:
 800ea9c:	b508      	push	{r3, lr}
 800ea9e:	f002 f9ef 	bl	8010e80 <dhcp_client_release>
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	4b01      	ldr	r3, [pc, #4]	; (800eaac <net_dhcp_release+0x10>)
 800eaa6:	701a      	strb	r2, [r3, #0]
 800eaa8:	bd08      	pop	{r3, pc}
 800eaaa:	bf00      	nop
 800eaac:	20002f16 	andcs	r2, r0, r6, lsl pc

0800eab0 <net_handle>:
 800eab0:	b510      	push	{r4, lr}
 800eab2:	4c0c      	ldr	r4, [pc, #48]	; (800eae4 <net_handle+0x34>)
 800eab4:	4620      	mov	r0, r4
 800eab6:	f005 fa59 	bl	8013f6c <emac_eth_recv>
 800eaba:	2800      	cmp	r0, #0
 800eabc:	dd07      	ble.n	800eace <net_handle+0x1e>
 800eabe:	6820      	ldr	r0, [r4, #0]
 800eac0:	8983      	ldrh	r3, [r0, #12]
 800eac2:	2b08      	cmp	r3, #8
 800eac4:	d107      	bne.n	800ead6 <net_handle+0x26>
 800eac6:	f002 fbd4 	bl	8011272 <ip_handle>
 800eaca:	f005 fa63 	bl	8013f94 <emac_free_pkt>
 800eace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ead2:	f000 b809 	b.w	800eae8 <net_timers_run>
 800ead6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800eada:	d1f6      	bne.n	800eaca <net_handle+0x1a>
 800eadc:	f001 ff5e 	bl	801099c <arp_handle>
 800eae0:	e7f3      	b.n	800eaca <net_handle+0x1a>
 800eae2:	bf00      	nop
 800eae4:	20002f18 	andcs	r2, r0, r8, lsl pc

0800eae8 <net_timers_run>:
 800eae8:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <net_timers_run+0x18>)
 800eaea:	4a06      	ldr	r2, [pc, #24]	; (800eb04 <net_timers_run+0x1c>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	6811      	ldr	r1, [r2, #0]
 800eaf0:	4299      	cmp	r1, r3
 800eaf2:	d803      	bhi.n	800eafc <net_timers_run+0x14>
 800eaf4:	3364      	adds	r3, #100	; 0x64
 800eaf6:	6013      	str	r3, [r2, #0]
 800eaf8:	f002 bb02 	b.w	8011100 <igmp_timer>
 800eafc:	4770      	bx	lr
 800eafe:	bf00      	nop
 800eb00:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800eb04:	20002f1c 	andcs	r2, r0, ip, lsl pc

0800eb08 <rfc3927_init>:
 800eb08:	4b04      	ldr	r3, [pc, #16]	; (800eb1c <rfc3927_init+0x14>)
 800eb0a:	1d82      	adds	r2, r0, #6
 800eb0c:	4290      	cmp	r0, r2
 800eb0e:	d100      	bne.n	800eb12 <rfc3927_init+0xa>
 800eb10:	4770      	bx	lr
 800eb12:	f810 1b01 	ldrb.w	r1, [r0], #1
 800eb16:	f803 1b01 	strb.w	r1, [r3], #1
 800eb1a:	e7f7      	b.n	800eb0c <rfc3927_init+0x4>
 800eb1c:	20002f20 	andcs	r2, r0, r0, lsr #30

0800eb20 <rfc3927>:
 800eb20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb24:	4605      	mov	r5, r0
 800eb26:	26ff      	movs	r6, #255	; 0xff
 800eb28:	4b18      	ldr	r3, [pc, #96]	; (800eb8c <rfc3927+0x6c>)
 800eb2a:	4f19      	ldr	r7, [pc, #100]	; (800eb90 <rfc3927+0x70>)
 800eb2c:	791a      	ldrb	r2, [r3, #4]
 800eb2e:	78dc      	ldrb	r4, [r3, #3]
 800eb30:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800eb94 <rfc3927+0x74>
 800eb34:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800eb38:	f8d7 9000 	ldr.w	r9, [r7]
 800eb3c:	f8df b058 	ldr.w	fp, [pc, #88]	; 800eb98 <rfc3927+0x78>
 800eb40:	f8df a058 	ldr.w	sl, [pc, #88]	; 800eb9c <rfc3927+0x7c>
 800eb44:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800eb48:	4659      	mov	r1, fp
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	f001 ff74 	bl	8010a38 <arp_cache_lookup>
 800eb50:	b938      	cbnz	r0, 800eb62 <rfc3927+0x42>
 800eb52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb56:	2001      	movs	r0, #1
 800eb58:	602c      	str	r4, [r5, #0]
 800eb5a:	60ac      	str	r4, [r5, #8]
 800eb5c:	606b      	str	r3, [r5, #4]
 800eb5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb62:	ba24      	rev	r4, r4
 800eb64:	3401      	adds	r4, #1
 800eb66:	3e01      	subs	r6, #1
 800eb68:	ba24      	rev	r4, r4
 800eb6a:	b2b6      	uxth	r6, r6
 800eb6c:	4554      	cmp	r4, sl
 800eb6e:	bf08      	it	eq
 800eb70:	4644      	moveq	r4, r8
 800eb72:	b12e      	cbz	r6, 800eb80 <rfc3927+0x60>
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	eba3 0309 	sub.w	r3, r3, r9
 800eb7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800eb7e:	d3e3      	bcc.n	800eb48 <rfc3927+0x28>
 800eb80:	2000      	movs	r0, #0
 800eb82:	e9c5 0001 	strd	r0, r0, [r5, #4]
 800eb86:	6028      	str	r0, [r5, #0]
 800eb88:	e7e9      	b.n	800eb5e <rfc3927+0x3e>
 800eb8a:	bf00      	nop
 800eb8c:	20002f20 	andcs	r2, r0, r0, lsr #30
 800eb90:	2000af0c 	andcs	sl, r0, ip, lsl #30
 800eb94:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 800eb98:	20002f28 	andcs	r2, r0, r8, lsr #30
 800eb9c:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

0800eba0 <_init_tcb>:
 800eba0:	b510      	push	{r4, lr}
 800eba2:	4603      	mov	r3, r0
 800eba4:	2400      	movs	r4, #0
 800eba6:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d10d      	bne.n	800ebca <_init_tcb+0x2a>
 800ebae:	4b08      	ldr	r3, [pc, #32]	; (800ebd0 <_init_tcb+0x30>)
 800ebb0:	f640 3268 	movw	r2, #2920	; 0xb68
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	8702      	strh	r2, [r0, #56]	; 0x38
 800ebb8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebbc:	6283      	str	r3, [r0, #40]	; 0x28
 800ebbe:	6243      	str	r3, [r0, #36]	; 0x24
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	8001      	strh	r1, [r0, #0]
 800ebc4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800ebc8:	bd10      	pop	{r4, pc}
 800ebca:	f803 4b01 	strb.w	r4, [r3], #1
 800ebce:	e7ec      	b.n	800ebaa <_init_tcb+0xa>
 800ebd0:	2000af0c 	andcs	sl, r0, ip, lsl #30

0800ebd4 <memcpy.isra.0>:
 800ebd4:	3801      	subs	r0, #1
 800ebd6:	440a      	add	r2, r1
 800ebd8:	4291      	cmp	r1, r2
 800ebda:	d100      	bne.n	800ebde <memcpy.isra.0+0xa>
 800ebdc:	4770      	bx	lr
 800ebde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebe2:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ebe6:	e7f7      	b.n	800ebd8 <memcpy.isra.0+0x4>

0800ebe8 <_bswap32>:
 800ebe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebea:	2204      	movs	r2, #4
 800ebec:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	eb0d 0002 	add.w	r0, sp, r2
 800ebf8:	f7ff ffec 	bl	800ebd4 <memcpy.isra.0>
 800ebfc:	2204      	movs	r2, #4
 800ebfe:	9b01      	ldr	r3, [sp, #4]
 800ec00:	eb0d 0102 	add.w	r1, sp, r2
 800ec04:	ba1b      	rev	r3, r3
 800ec06:	4628      	mov	r0, r5
 800ec08:	9301      	str	r3, [sp, #4]
 800ec0a:	f7ff ffe3 	bl	800ebd4 <memcpy.isra.0>
 800ec0e:	2204      	movs	r2, #4
 800ec10:	3426      	adds	r4, #38	; 0x26
 800ec12:	eb0d 0002 	add.w	r0, sp, r2
 800ec16:	4621      	mov	r1, r4
 800ec18:	f7ff ffdc 	bl	800ebd4 <memcpy.isra.0>
 800ec1c:	2204      	movs	r2, #4
 800ec1e:	9b01      	ldr	r3, [sp, #4]
 800ec20:	4620      	mov	r0, r4
 800ec22:	ba1b      	rev	r3, r3
 800ec24:	eb0d 0102 	add.w	r1, sp, r2
 800ec28:	9301      	str	r3, [sp, #4]
 800ec2a:	f7ff ffd3 	bl	800ebd4 <memcpy.isra.0>
 800ec2e:	b003      	add	sp, #12
 800ec30:	bd30      	pop	{r4, r5, pc}
	...

0800ec34 <_tcp_send_package>:
 800ec34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec38:	7a0b      	ldrb	r3, [r1, #8]
 800ec3a:	4605      	mov	r5, r0
 800ec3c:	f013 0f02 	tst.w	r3, #2
 800ec40:	bf0c      	ite	eq
 800ec42:	f04f 0905 	moveq.w	r9, #5
 800ec46:	f04f 0906 	movne.w	r9, #6
 800ec4a:	f04f 0800 	mov.w	r8, #0
 800ec4e:	4c4b      	ldr	r4, [pc, #300]	; (800ed7c <_tcp_send_package+0x148>)
 800ec50:	460f      	mov	r7, r1
 800ec52:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 800ec54:	f100 0108 	add.w	r1, r0, #8
 800ec58:	2206      	movs	r2, #6
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	f7ff ffba 	bl	800ebd4 <memcpy.isra.0>
 800ec60:	4a47      	ldr	r2, [pc, #284]	; (800ed80 <_tcp_send_package+0x14c>)
 800ec62:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 800ec66:	8813      	ldrh	r3, [r2, #0]
 800ec68:	b2b6      	uxth	r6, r6
 800ec6a:	1c59      	adds	r1, r3, #1
 800ec6c:	8263      	strh	r3, [r4, #18]
 800ec6e:	f105 0a04 	add.w	sl, r5, #4
 800ec72:	f106 0314 	add.w	r3, r6, #20
 800ec76:	ba5b      	rev16	r3, r3
 800ec78:	8011      	strh	r1, [r2, #0]
 800ec7a:	f104 001e 	add.w	r0, r4, #30
 800ec7e:	2204      	movs	r2, #4
 800ec80:	4651      	mov	r1, sl
 800ec82:	8223      	strh	r3, [r4, #16]
 800ec84:	f7ff ffa6 	bl	800ebd4 <memcpy.isra.0>
 800ec88:	2114      	movs	r1, #20
 800ec8a:	f104 000e 	add.w	r0, r4, #14
 800ec8e:	f884 8018 	strb.w	r8, [r4, #24]
 800ec92:	f884 8019 	strb.w	r8, [r4, #25]
 800ec96:	f002 fb05 	bl	80112a4 <net_chksum>
 800ec9a:	882b      	ldrh	r3, [r5, #0]
 800ec9c:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800eca0:	8463      	strh	r3, [r4, #34]	; 0x22
 800eca2:	886b      	ldrh	r3, [r5, #2]
 800eca4:	8320      	strh	r0, [r4, #24]
 800eca6:	84a3      	strh	r3, [r4, #36]	; 0x24
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 800ecac:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 800ecb6:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 800ecba:	7a3b      	ldrb	r3, [r7, #8]
 800ecbc:	8622      	strh	r2, [r4, #48]	; 0x30
 800ecbe:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800ecc2:	079b      	lsls	r3, r3, #30
 800ecc4:	bf48      	it	mi
 800ecc6:	2302      	movmi	r3, #2
 800ecc8:	8baa      	ldrh	r2, [r5, #28]
 800ecca:	bf44      	itt	mi
 800eccc:	f884 3036 	strbmi.w	r3, [r4, #54]	; 0x36
 800ecd0:	2304      	movmi	r3, #4
 800ecd2:	86a2      	strh	r2, [r4, #52]	; 0x34
 800ecd4:	bf41      	itttt	mi
 800ecd6:	f884 3037 	strbmi.w	r3, [r4, #55]	; 0x37
 800ecda:	4622      	movmi	r2, r4
 800ecdc:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 800ece0:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 800ece4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ece6:	f884 8032 	strb.w	r8, [r4, #50]	; 0x32
 800ecea:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
 800ecee:	bf58      	it	pl
 800ecf0:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d13f      	bne.n	800ed78 <_tcp_send_package+0x144>
 800ecf8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800ecfa:	4820      	ldr	r0, [pc, #128]	; (800ed7c <_tcp_send_package+0x148>)
 800ecfc:	ba5b      	rev16	r3, r3
 800ecfe:	8463      	strh	r3, [r4, #34]	; 0x22
 800ed00:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800ed02:	ba5b      	rev16	r3, r3
 800ed04:	84a3      	strh	r3, [r4, #36]	; 0x24
 800ed06:	f7ff ff6f 	bl	800ebe8 <_bswap32>
 800ed0a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800ed0c:	a801      	add	r0, sp, #4
 800ed0e:	ba5b      	rev16	r3, r3
 800ed10:	8623      	strh	r3, [r4, #48]	; 0x30
 800ed12:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800ed14:	220c      	movs	r2, #12
 800ed16:	ba5b      	rev16	r3, r3
 800ed18:	491a      	ldr	r1, [pc, #104]	; (800ed84 <_tcp_send_package+0x150>)
 800ed1a:	86a3      	strh	r3, [r4, #52]	; 0x34
 800ed1c:	f7ff ff5a 	bl	800ebd4 <memcpy.isra.0>
 800ed20:	2204      	movs	r2, #4
 800ed22:	4919      	ldr	r1, [pc, #100]	; (800ed88 <_tcp_send_package+0x154>)
 800ed24:	4817      	ldr	r0, [pc, #92]	; (800ed84 <_tcp_send_package+0x150>)
 800ed26:	f7ff ff55 	bl	800ebd4 <memcpy.isra.0>
 800ed2a:	2204      	movs	r2, #4
 800ed2c:	4651      	mov	r1, sl
 800ed2e:	4817      	ldr	r0, [pc, #92]	; (800ed8c <_tcp_send_package+0x158>)
 800ed30:	f7ff ff50 	bl	800ebd4 <memcpy.isra.0>
 800ed34:	2300      	movs	r3, #0
 800ed36:	77a3      	strb	r3, [r4, #30]
 800ed38:	2306      	movs	r3, #6
 800ed3a:	f106 010c 	add.w	r1, r6, #12
 800ed3e:	77e3      	strb	r3, [r4, #31]
 800ed40:	4810      	ldr	r0, [pc, #64]	; (800ed84 <_tcp_send_package+0x150>)
 800ed42:	ba73      	rev16	r3, r6
 800ed44:	8423      	strh	r3, [r4, #32]
 800ed46:	f002 faad 	bl	80112a4 <net_chksum>
 800ed4a:	a901      	add	r1, sp, #4
 800ed4c:	4605      	mov	r5, r0
 800ed4e:	220c      	movs	r2, #12
 800ed50:	480c      	ldr	r0, [pc, #48]	; (800ed84 <_tcp_send_package+0x150>)
 800ed52:	f7ff ff3f 	bl	800ebd4 <memcpy.isra.0>
 800ed56:	4809      	ldr	r0, [pc, #36]	; (800ed7c <_tcp_send_package+0x148>)
 800ed58:	f106 0122 	add.w	r1, r6, #34	; 0x22
 800ed5c:	8665      	strh	r5, [r4, #50]	; 0x32
 800ed5e:	b004      	add	sp, #16
 800ed60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed64:	f005 b91a 	b.w	8013f9c <emac_eth_send>
 800ed68:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800ed6a:	5cc9      	ldrb	r1, [r1, r3]
 800ed6c:	54d1      	strb	r1, [r2, r3]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800ed72:	4299      	cmp	r1, r3
 800ed74:	d8f8      	bhi.n	800ed68 <_tcp_send_package+0x134>
 800ed76:	e7bf      	b.n	800ecf8 <_tcp_send_package+0xc4>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	e7f9      	b.n	800ed70 <_tcp_send_package+0x13c>
 800ed7c:	20003ae4 	andcs	r3, r0, r4, ror #21
 800ed80:	20002f2e 	andcs	r2, r0, lr, lsr #30
 800ed84:	20003afa 	strdcs	r3, [r0], -sl
 800ed88:	20002f04 	andcs	r2, r0, r4, lsl #30
 800ed8c:	20003afe 	strdcs	r3, [r0], -lr

0800ed90 <_send_reset>:
 800ed90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ed92:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800ed96:	4604      	mov	r4, r0
 800ed98:	075a      	lsls	r2, r3, #29
 800ed9a:	460e      	mov	r6, r1
 800ed9c:	d421      	bmi.n	800ede2 <_send_reset+0x52>
 800ed9e:	2204      	movs	r2, #4
 800eda0:	f013 0310 	ands.w	r3, r3, #16
 800eda4:	f88d 200c 	strb.w	r2, [sp, #12]
 800eda8:	d01d      	beq.n	800ede6 <_send_reset+0x56>
 800edaa:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 800edae:	4668      	mov	r0, sp
 800edb0:	f7ff ff10 	bl	800ebd4 <memcpy.isra.0>
 800edb4:	9b00      	ldr	r3, [sp, #0]
 800edb6:	9301      	str	r3, [sp, #4]
 800edb8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800edbc:	4668      	mov	r0, sp
 800edbe:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800edc2:	f104 0126 	add.w	r1, r4, #38	; 0x26
 800edc6:	07db      	lsls	r3, r3, #31
 800edc8:	f04f 0204 	mov.w	r2, #4
 800edcc:	bf48      	it	mi
 800edce:	3501      	addmi	r5, #1
 800edd0:	f7ff ff00 	bl	800ebd4 <memcpy.isra.0>
 800edd4:	9b00      	ldr	r3, [sp, #0]
 800edd6:	4630      	mov	r0, r6
 800edd8:	441d      	add	r5, r3
 800edda:	a901      	add	r1, sp, #4
 800eddc:	9502      	str	r5, [sp, #8]
 800edde:	f7ff ff29 	bl	800ec34 <_tcp_send_package>
 800ede2:	b004      	add	sp, #16
 800ede4:	bd70      	pop	{r4, r5, r6, pc}
 800ede6:	9301      	str	r3, [sp, #4]
 800ede8:	2314      	movs	r3, #20
 800edea:	f88d 300c 	strb.w	r3, [sp, #12]
 800edee:	e7e3      	b.n	800edb8 <_send_reset+0x28>

0800edf0 <tcp_init>:
 800edf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edf2:	2206      	movs	r2, #6
 800edf4:	4c0e      	ldr	r4, [pc, #56]	; (800ee30 <tcp_init+0x40>)
 800edf6:	490f      	ldr	r1, [pc, #60]	; (800ee34 <tcp_init+0x44>)
 800edf8:	18a0      	adds	r0, r4, r2
 800edfa:	f7ff feeb 	bl	800ebd4 <memcpy.isra.0>
 800edfe:	2308      	movs	r3, #8
 800ee00:	2204      	movs	r2, #4
 800ee02:	2500      	movs	r5, #0
 800ee04:	7323      	strb	r3, [r4, #12]
 800ee06:	4b0c      	ldr	r3, [pc, #48]	; (800ee38 <tcp_init+0x48>)
 800ee08:	eb0d 0102 	add.w	r1, sp, r2
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f104 001a 	add.w	r0, r4, #26
 800ee12:	9301      	str	r3, [sp, #4]
 800ee14:	7365      	strb	r5, [r4, #13]
 800ee16:	f7ff fedd 	bl	800ebd4 <memcpy.isra.0>
 800ee1a:	2345      	movs	r3, #69	; 0x45
 800ee1c:	73a3      	strb	r3, [r4, #14]
 800ee1e:	2340      	movs	r3, #64	; 0x40
 800ee20:	7523      	strb	r3, [r4, #20]
 800ee22:	75a3      	strb	r3, [r4, #22]
 800ee24:	2306      	movs	r3, #6
 800ee26:	73e5      	strb	r5, [r4, #15]
 800ee28:	7565      	strb	r5, [r4, #21]
 800ee2a:	75e3      	strb	r3, [r4, #23]
 800ee2c:	b003      	add	sp, #12
 800ee2e:	bd30      	pop	{r4, r5, pc}
 800ee30:	20003ae4 	andcs	r3, r0, r4, ror #21
 800ee34:	20002f10 	andcs	r2, r0, r0, lsl pc
 800ee38:	20002f04 	andcs	r2, r0, r4, lsl #30

0800ee3c <tcp_handle>:
 800ee3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee40:	4605      	mov	r5, r0
 800ee42:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800ee44:	b085      	sub	sp, #20
 800ee46:	ba5b      	rev16	r3, r3
 800ee48:	8443      	strh	r3, [r0, #34]	; 0x22
 800ee4a:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800ee4c:	f8b0 b010 	ldrh.w	fp, [r0, #16]
 800ee50:	ba5b      	rev16	r3, r3
 800ee52:	8483      	strh	r3, [r0, #36]	; 0x24
 800ee54:	f890 802e 	ldrb.w	r8, [r0, #46]	; 0x2e
 800ee58:	f7ff fec6 	bl	800ebe8 <_bswap32>
 800ee5c:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 800ee5e:	4ca6      	ldr	r4, [pc, #664]	; (800f0f8 <tcp_handle+0x2bc>)
 800ee60:	ba5b      	rev16	r3, r3
 800ee62:	862b      	strh	r3, [r5, #48]	; 0x30
 800ee64:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 800ee66:	8822      	ldrh	r2, [r4, #0]
 800ee68:	ba5b      	rev16	r3, r3
 800ee6a:	86ab      	strh	r3, [r5, #52]	; 0x34
 800ee6c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d14d      	bne.n	800ef0e <tcp_handle+0xd2>
 800ee72:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d00d      	beq.n	800ee96 <tcp_handle+0x5a>
 800ee7a:	2204      	movs	r2, #4
 800ee7c:	4668      	mov	r0, sp
 800ee7e:	f105 011a 	add.w	r1, r5, #26
 800ee82:	f7ff fea7 	bl	800ebd4 <memcpy.isra.0>
 800ee86:	8862      	ldrh	r2, [r4, #2]
 800ee88:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d13f      	bne.n	800ef0e <tcp_handle+0xd2>
 800ee8e:	6862      	ldr	r2, [r4, #4]
 800ee90:	9b00      	ldr	r3, [sp, #0]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d13b      	bne.n	800ef0e <tcp_handle+0xd2>
 800ee96:	2204      	movs	r2, #4
 800ee98:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 800ee9c:	eb0d 0002 	add.w	r0, sp, r2
 800eea0:	f7ff fe98 	bl	800ebd4 <memcpy.isra.0>
 800eea4:	2204      	movs	r2, #4
 800eea6:	f105 0126 	add.w	r1, r5, #38	; 0x26
 800eeaa:	eb0d 0002 	add.w	r0, sp, r2
 800eeae:	9e01      	ldr	r6, [sp, #4]
 800eeb0:	f7ff fe90 	bl	800ebd4 <memcpy.isra.0>
 800eeb4:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800eeb8:	9f01      	ldr	r7, [sp, #4]
 800eeba:	2a01      	cmp	r2, #1
 800eebc:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 800eec0:	d01b      	beq.n	800eefa <tcp_handle+0xbe>
 800eec2:	1ed3      	subs	r3, r2, #3
 800eec4:	2b07      	cmp	r3, #7
 800eec6:	d822      	bhi.n	800ef0e <tcp_handle+0xd2>
 800eec8:	ea4f 1318 	mov.w	r3, r8, lsr #4
 800eecc:	f64f 78ec 	movw	r8, #65516	; 0xffec
 800eed0:	fa9b fb9b 	rev16.w	fp, fp
 800eed4:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 800eed8:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800eeda:	44d8      	add	r8, fp
 800eedc:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 800eee0:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800eee4:	fa1f f888 	uxth.w	r8, r8
 800eee8:	2900      	cmp	r1, #0
 800eeea:	d142      	bne.n	800ef72 <tcp_handle+0x136>
 800eeec:	f1b8 0f00 	cmp.w	r8, #0
 800eef0:	d16b      	bne.n	800efca <tcp_handle+0x18e>
 800eef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eef4:	42bb      	cmp	r3, r7
 800eef6:	d168      	bne.n	800efca <tcp_handle+0x18e>
 800eef8:	e048      	b.n	800ef8c <tcp_handle+0x150>
 800eefa:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800eefe:	075a      	lsls	r2, r3, #29
 800ef00:	d405      	bmi.n	800ef0e <tcp_handle+0xd2>
 800ef02:	06d8      	lsls	r0, r3, #27
 800ef04:	d506      	bpl.n	800ef14 <tcp_handle+0xd8>
 800ef06:	4628      	mov	r0, r5
 800ef08:	497b      	ldr	r1, [pc, #492]	; (800f0f8 <tcp_handle+0x2bc>)
 800ef0a:	f7ff ff41 	bl	800ed90 <_send_reset>
 800ef0e:	b005      	add	sp, #20
 800ef10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef14:	0799      	lsls	r1, r3, #30
 800ef16:	d5fa      	bpl.n	800ef0e <tcp_handle+0xd2>
 800ef18:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 800ef1c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800ef20:	4668      	mov	r0, sp
 800ef22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ef26:	f105 011a 	add.w	r1, r5, #26
 800ef2a:	2204      	movs	r2, #4
 800ef2c:	8063      	strh	r3, [r4, #2]
 800ef2e:	f7ff fe51 	bl	800ebd4 <memcpy.isra.0>
 800ef32:	2206      	movs	r2, #6
 800ef34:	9b00      	ldr	r3, [sp, #0]
 800ef36:	18a9      	adds	r1, r5, r2
 800ef38:	4870      	ldr	r0, [pc, #448]	; (800f0fc <tcp_handle+0x2c0>)
 800ef3a:	6063      	str	r3, [r4, #4]
 800ef3c:	f7ff fe4a 	bl	800ebd4 <memcpy.isra.0>
 800ef40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ef42:	1c7b      	adds	r3, r7, #1
 800ef44:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800ef48:	6363      	str	r3, [r4, #52]	; 0x34
 800ef4a:	2312      	movs	r3, #18
 800ef4c:	486a      	ldr	r0, [pc, #424]	; (800f0f8 <tcp_handle+0x2bc>)
 800ef4e:	a901      	add	r1, sp, #4
 800ef50:	f88d 300c 	strb.w	r3, [sp, #12]
 800ef54:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800ef58:	63e7      	str	r7, [r4, #60]	; 0x3c
 800ef5a:	f8c4 a018 	str.w	sl, [r4, #24]
 800ef5e:	f7ff fe69 	bl	800ec34 <_tcp_send_package>
 800ef62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ef64:	1c5a      	adds	r2, r3, #1
 800ef66:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800ef6a:	2303      	movs	r3, #3
 800ef6c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ef70:	e7cd      	b.n	800ef0e <tcp_handle+0xd2>
 800ef72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef74:	eba3 0c07 	sub.w	ip, r3, r7
 800ef78:	f1b8 0f00 	cmp.w	r8, #0
 800ef7c:	d10d      	bne.n	800ef9a <tcp_handle+0x15e>
 800ef7e:	f1bc 0f00 	cmp.w	ip, #0
 800ef82:	dc22      	bgt.n	800efca <tcp_handle+0x18e>
 800ef84:	1afb      	subs	r3, r7, r3
 800ef86:	1a5b      	subs	r3, r3, r1
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	da1e      	bge.n	800efca <tcp_handle+0x18e>
 800ef8c:	0743      	lsls	r3, r0, #29
 800ef8e:	d530      	bpl.n	800eff2 <tcp_handle+0x1b6>
 800ef90:	8821      	ldrh	r1, [r4, #0]
 800ef92:	4859      	ldr	r0, [pc, #356]	; (800f0f8 <tcp_handle+0x2bc>)
 800ef94:	f7ff fe04 	bl	800eba0 <_init_tcb>
 800ef98:	e7b9      	b.n	800ef0e <tcp_handle+0xd2>
 800ef9a:	f1bc 0f00 	cmp.w	ip, #0
 800ef9e:	dc06      	bgt.n	800efae <tcp_handle+0x172>
 800efa0:	eba7 0c03 	sub.w	ip, r7, r3
 800efa4:	ebac 0c01 	sub.w	ip, ip, r1
 800efa8:	f1bc 0f00 	cmp.w	ip, #0
 800efac:	dbee      	blt.n	800ef8c <tcp_handle+0x150>
 800efae:	eb08 0c07 	add.w	ip, r8, r7
 800efb2:	f103 0e01 	add.w	lr, r3, #1
 800efb6:	ebae 0e0c 	sub.w	lr, lr, ip
 800efba:	f1be 0f00 	cmp.w	lr, #0
 800efbe:	dc04      	bgt.n	800efca <tcp_handle+0x18e>
 800efc0:	43db      	mvns	r3, r3
 800efc2:	1a5b      	subs	r3, r3, r1
 800efc4:	eb13 0f0c 	cmn.w	r3, ip
 800efc8:	d4e0      	bmi.n	800ef8c <tcp_handle+0x150>
 800efca:	0742      	lsls	r2, r0, #29
 800efcc:	d505      	bpl.n	800efda <tcp_handle+0x19e>
 800efce:	8821      	ldrh	r1, [r4, #0]
 800efd0:	4849      	ldr	r0, [pc, #292]	; (800f0f8 <tcp_handle+0x2bc>)
 800efd2:	f7ff fde5 	bl	800eba0 <_init_tcb>
 800efd6:	2301      	movs	r3, #1
 800efd8:	e7c8      	b.n	800ef6c <tcp_handle+0x130>
 800efda:	6963      	ldr	r3, [r4, #20]
 800efdc:	9301      	str	r3, [sp, #4]
 800efde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efe0:	9302      	str	r3, [sp, #8]
 800efe2:	2310      	movs	r3, #16
 800efe4:	4844      	ldr	r0, [pc, #272]	; (800f0f8 <tcp_handle+0x2bc>)
 800efe6:	a901      	add	r1, sp, #4
 800efe8:	f88d 300c 	strb.w	r3, [sp, #12]
 800efec:	f7ff fe22 	bl	800ec34 <_tcp_send_package>
 800eff0:	e78d      	b.n	800ef0e <tcp_handle+0xd2>
 800eff2:	0781      	lsls	r1, r0, #30
 800eff4:	d505      	bpl.n	800f002 <tcp_handle+0x1c6>
 800eff6:	2a03      	cmp	r2, #3
 800eff8:	d0ed      	beq.n	800efd6 <tcp_handle+0x19a>
 800effa:	4628      	mov	r0, r5
 800effc:	493e      	ldr	r1, [pc, #248]	; (800f0f8 <tcp_handle+0x2bc>)
 800effe:	f7ff fec7 	bl	800ed90 <_send_reset>
 800f002:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800f006:	06da      	lsls	r2, r3, #27
 800f008:	d581      	bpl.n	800ef0e <tcp_handle+0xd2>
 800f00a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f00e:	3b03      	subs	r3, #3
 800f010:	2b07      	cmp	r3, #7
 800f012:	d818      	bhi.n	800f046 <tcp_handle+0x20a>
 800f014:	e8df f003 	tbb	[pc, r3]
 800f018:	76767604 	ldrbtvc	r7, [r6], -r4, lsl #12
 800f01c:	a69d7676 			; <UNDEFINED> instruction: 0xa69d7676
 800f020:	6923      	ldr	r3, [r4, #16]
 800f022:	1b9b      	subs	r3, r3, r6
 800f024:	2b00      	cmp	r3, #0
 800f026:	dc0a      	bgt.n	800f03e <tcp_handle+0x202>
 800f028:	6963      	ldr	r3, [r4, #20]
 800f02a:	1af3      	subs	r3, r6, r3
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	dc06      	bgt.n	800f03e <tcp_handle+0x202>
 800f030:	2304      	movs	r3, #4
 800f032:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800f036:	f8c4 a018 	str.w	sl, [r4, #24]
 800f03a:	6126      	str	r6, [r4, #16]
 800f03c:	e796      	b.n	800ef6c <tcp_handle+0x130>
 800f03e:	4628      	mov	r0, r5
 800f040:	492d      	ldr	r1, [pc, #180]	; (800f0f8 <tcp_handle+0x2bc>)
 800f042:	f7ff fea5 	bl	800ed90 <_send_reset>
 800f046:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f04a:	3b04      	subs	r3, #4
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d830      	bhi.n	800f0b2 <tcp_handle+0x276>
 800f050:	f1b8 0f00 	cmp.w	r8, #0
 800f054:	d02d      	beq.n	800f0b2 <tcp_handle+0x276>
 800f056:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f058:	42bb      	cmp	r3, r7
 800f05a:	f040 8092 	bne.w	800f182 <tcp_handle+0x346>
 800f05e:	f240 53b6 	movw	r3, #1462	; 0x5b6
 800f062:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800f100 <tcp_handle+0x2c4>
 800f066:	f105 0122 	add.w	r1, r5, #34	; 0x22
 800f06a:	f8ba 7000 	ldrh.w	r7, [sl]
 800f06e:	4642      	mov	r2, r8
 800f070:	435f      	muls	r7, r3
 800f072:	1d38      	adds	r0, r7, #4
 800f074:	4449      	add	r1, r9
 800f076:	4450      	add	r0, sl
 800f078:	f7ff fdac 	bl	800ebd4 <memcpy.isra.0>
 800f07c:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800f07e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f080:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800f084:	8722      	strh	r2, [r4, #56]	; 0x38
 800f086:	6962      	ldr	r2, [r4, #20]
 800f088:	4443      	add	r3, r8
 800f08a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800f08e:	6363      	str	r3, [r4, #52]	; 0x34
 800f090:	2310      	movs	r3, #16
 800f092:	4457      	add	r7, sl
 800f094:	4818      	ldr	r0, [pc, #96]	; (800f0f8 <tcp_handle+0x2bc>)
 800f096:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 800f09a:	a901      	add	r1, sp, #4
 800f09c:	f88d 300c 	strb.w	r3, [sp, #12]
 800f0a0:	f7ff fdc8 	bl	800ec34 <_tcp_send_package>
 800f0a4:	f8ba 3000 	ldrh.w	r3, [sl]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	f003 0301 	and.w	r3, r3, #1
 800f0ae:	f8aa 3000 	strh.w	r3, [sl]
 800f0b2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f0b6:	2b02      	cmp	r3, #2
 800f0b8:	f67f af29 	bls.w	800ef0e <tcp_handle+0xd2>
 800f0bc:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800f0c0:	07db      	lsls	r3, r3, #31
 800f0c2:	f57f af24 	bpl.w	800ef0e <tcp_handle+0xd2>
 800f0c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0c8:	6962      	ldr	r2, [r4, #20]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800f0d0:	6363      	str	r3, [r4, #52]	; 0x34
 800f0d2:	2310      	movs	r3, #16
 800f0d4:	4808      	ldr	r0, [pc, #32]	; (800f0f8 <tcp_handle+0x2bc>)
 800f0d6:	a901      	add	r1, sp, #4
 800f0d8:	f88d 300c 	strb.w	r3, [sp, #12]
 800f0dc:	f7ff fdaa 	bl	800ec34 <_tcp_send_package>
 800f0e0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f0e4:	2b05      	cmp	r3, #5
 800f0e6:	d054      	beq.n	800f192 <tcp_handle+0x356>
 800f0e8:	d84e      	bhi.n	800f188 <tcp_handle+0x34c>
 800f0ea:	3b03      	subs	r3, #3
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	f63f af0e 	bhi.w	800ef0e <tcp_handle+0xd2>
 800f0f2:	2307      	movs	r3, #7
 800f0f4:	e73a      	b.n	800ef6c <tcp_handle+0x130>
 800f0f6:	bf00      	nop
 800f0f8:	20003aa0 	andcs	r3, r0, r0, lsr #21
 800f0fc:	20003aa8 	andcs	r3, r0, r8, lsr #21
 800f100:	20002f30 	andcs	r2, r0, r0, lsr pc
 800f104:	6923      	ldr	r3, [r4, #16]
 800f106:	1b99      	subs	r1, r3, r6
 800f108:	d513      	bpl.n	800f132 <tcp_handle+0x2f6>
 800f10a:	6962      	ldr	r2, [r4, #20]
 800f10c:	1ab2      	subs	r2, r6, r2
 800f10e:	2a00      	cmp	r2, #0
 800f110:	dc0f      	bgt.n	800f132 <tcp_handle+0x2f6>
 800f112:	6126      	str	r6, [r4, #16]
 800f114:	6a23      	ldr	r3, [r4, #32]
 800f116:	1bda      	subs	r2, r3, r7
 800f118:	2a00      	cmp	r2, #0
 800f11a:	db05      	blt.n	800f128 <tcp_handle+0x2ec>
 800f11c:	42bb      	cmp	r3, r7
 800f11e:	d192      	bne.n	800f046 <tcp_handle+0x20a>
 800f120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f122:	1b9b      	subs	r3, r3, r6
 800f124:	2b00      	cmp	r3, #0
 800f126:	dc8e      	bgt.n	800f046 <tcp_handle+0x20a>
 800f128:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800f12c:	f8c4 a018 	str.w	sl, [r4, #24]
 800f130:	e789      	b.n	800f046 <tcp_handle+0x20a>
 800f132:	1af3      	subs	r3, r6, r3
 800f134:	2b00      	cmp	r3, #0
 800f136:	dc06      	bgt.n	800f146 <tcp_handle+0x30a>
 800f138:	2900      	cmp	r1, #0
 800f13a:	dc84      	bgt.n	800f046 <tcp_handle+0x20a>
 800f13c:	6963      	ldr	r3, [r4, #20]
 800f13e:	1af3      	subs	r3, r6, r3
 800f140:	2b00      	cmp	r3, #0
 800f142:	dc80      	bgt.n	800f046 <tcp_handle+0x20a>
 800f144:	e7e6      	b.n	800f114 <tcp_handle+0x2d8>
 800f146:	6963      	ldr	r3, [r4, #20]
 800f148:	1b9a      	subs	r2, r3, r6
 800f14a:	2a00      	cmp	r2, #0
 800f14c:	f6bf af7b 	bge.w	800f046 <tcp_handle+0x20a>
 800f150:	e744      	b.n	800efdc <tcp_handle+0x1a0>
 800f152:	6963      	ldr	r3, [r4, #20]
 800f154:	42b3      	cmp	r3, r6
 800f156:	f47f af76 	bne.w	800f046 <tcp_handle+0x20a>
 800f15a:	8821      	ldrh	r1, [r4, #0]
 800f15c:	480f      	ldr	r0, [pc, #60]	; (800f19c <tcp_handle+0x360>)
 800f15e:	f7ff fd1f 	bl	800eba0 <_init_tcb>
 800f162:	e770      	b.n	800f046 <tcp_handle+0x20a>
 800f164:	6963      	ldr	r3, [r4, #20]
 800f166:	42b3      	cmp	r3, r6
 800f168:	f47f af6d 	bne.w	800f046 <tcp_handle+0x20a>
 800f16c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f16e:	480b      	ldr	r0, [pc, #44]	; (800f19c <tcp_handle+0x360>)
 800f170:	9302      	str	r3, [sp, #8]
 800f172:	2310      	movs	r3, #16
 800f174:	a901      	add	r1, sp, #4
 800f176:	9601      	str	r6, [sp, #4]
 800f178:	f88d 300c 	strb.w	r3, [sp, #12]
 800f17c:	f7ff fd5a 	bl	800ec34 <_tcp_send_package>
 800f180:	e761      	b.n	800f046 <tcp_handle+0x20a>
 800f182:	6962      	ldr	r2, [r4, #20]
 800f184:	9201      	str	r2, [sp, #4]
 800f186:	e72b      	b.n	800efe0 <tcp_handle+0x1a4>
 800f188:	2b06      	cmp	r3, #6
 800f18a:	f47f aec0 	bne.w	800ef0e <tcp_handle+0xd2>
 800f18e:	230a      	movs	r3, #10
 800f190:	e6ec      	b.n	800ef6c <tcp_handle+0x130>
 800f192:	6963      	ldr	r3, [r4, #20]
 800f194:	42b3      	cmp	r3, r6
 800f196:	d0fa      	beq.n	800f18e <tcp_handle+0x352>
 800f198:	2308      	movs	r3, #8
 800f19a:	e6e7      	b.n	800ef6c <tcp_handle+0x130>
 800f19c:	20003aa0 	andcs	r3, r0, r0, lsr #21

0800f1a0 <tcp_begin>:
 800f1a0:	b508      	push	{r3, lr}
 800f1a2:	4b0a      	ldr	r3, [pc, #40]	; (800f1cc <tcp_begin+0x2c>)
 800f1a4:	4601      	mov	r1, r0
 800f1a6:	881a      	ldrh	r2, [r3, #0]
 800f1a8:	4282      	cmp	r2, r0
 800f1aa:	d102      	bne.n	800f1b2 <tcp_begin+0x12>
 800f1ac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f1b0:	b130      	cbz	r0, 800f1c0 <tcp_begin+0x20>
 800f1b2:	b12a      	cbz	r2, 800f1c0 <tcp_begin+0x20>
 800f1b4:	4806      	ldr	r0, [pc, #24]	; (800f1d0 <tcp_begin+0x30>)
 800f1b6:	f003 fb07 	bl	80127c8 <console_error>
 800f1ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1be:	bd08      	pop	{r3, pc}
 800f1c0:	4802      	ldr	r0, [pc, #8]	; (800f1cc <tcp_begin+0x2c>)
 800f1c2:	8019      	strh	r1, [r3, #0]
 800f1c4:	f7ff fcec 	bl	800eba0 <_init_tcb>
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	e7f8      	b.n	800f1be <tcp_begin+0x1e>
 800f1cc:	20003aa0 	andcs	r3, r0, r0, lsr #21
 800f1d0:	08016935 	stmdaeq	r1, {r0, r2, r4, r5, r8, fp, sp, lr}

0800f1d4 <tcp_write>:
 800f1d4:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	bf28      	it	cs
 800f1dc:	461a      	movcs	r2, r3
 800f1de:	2344      	movs	r3, #68	; 0x44
 800f1e0:	b530      	push	{r4, r5, lr}
 800f1e2:	4c0d      	ldr	r4, [pc, #52]	; (800f218 <tcp_write+0x44>)
 800f1e4:	b085      	sub	sp, #20
 800f1e6:	fb03 4400 	mla	r4, r3, r0, r4
 800f1ea:	6963      	ldr	r3, [r4, #20]
 800f1ec:	4615      	mov	r5, r2
 800f1ee:	9301      	str	r3, [sp, #4]
 800f1f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1f2:	62e1      	str	r1, [r4, #44]	; 0x2c
 800f1f4:	9302      	str	r3, [sp, #8]
 800f1f6:	2318      	movs	r3, #24
 800f1f8:	8622      	strh	r2, [r4, #48]	; 0x30
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	a901      	add	r1, sp, #4
 800f1fe:	f88d 300c 	strb.w	r3, [sp, #12]
 800f202:	f7ff fd17 	bl	800ec34 <_tcp_send_package>
 800f206:	2300      	movs	r3, #0
 800f208:	6962      	ldr	r2, [r4, #20]
 800f20a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f20c:	442a      	add	r2, r5
 800f20e:	8623      	strh	r3, [r4, #48]	; 0x30
 800f210:	6162      	str	r2, [r4, #20]
 800f212:	b005      	add	sp, #20
 800f214:	bd30      	pop	{r4, r5, pc}
 800f216:	bf00      	nop
 800f218:	20003aa0 	andcs	r3, r0, r0, lsr #21

0800f21c <tcp_read>:
 800f21c:	2344      	movs	r3, #68	; 0x44
 800f21e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f220:	4c1c      	ldr	r4, [pc, #112]	; (800f294 <tcp_read+0x78>)
 800f222:	b085      	sub	sp, #20
 800f224:	fb03 4400 	mla	r4, r3, r0, r4
 800f228:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f22c:	2b07      	cmp	r3, #7
 800f22e:	d112      	bne.n	800f256 <tcp_read+0x3a>
 800f230:	6963      	ldr	r3, [r4, #20]
 800f232:	4620      	mov	r0, r4
 800f234:	9301      	str	r3, [sp, #4]
 800f236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f238:	a901      	add	r1, sp, #4
 800f23a:	9302      	str	r3, [sp, #8]
 800f23c:	2311      	movs	r3, #17
 800f23e:	f88d 300c 	strb.w	r3, [sp, #12]
 800f242:	f7ff fcf7 	bl	800ec34 <_tcp_send_package>
 800f246:	2309      	movs	r3, #9
 800f248:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f24c:	6963      	ldr	r3, [r4, #20]
 800f24e:	3301      	adds	r3, #1
 800f250:	6163      	str	r3, [r4, #20]
 800f252:	2000      	movs	r0, #0
 800f254:	e01b      	b.n	800f28e <tcp_read+0x72>
 800f256:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 800f25a:	4358      	muls	r0, r3
 800f25c:	4a0e      	ldr	r2, [pc, #56]	; (800f298 <tcp_read+0x7c>)
 800f25e:	1817      	adds	r7, r2, r0
 800f260:	887b      	ldrh	r3, [r7, #2]
 800f262:	5a15      	ldrh	r5, [r2, r0]
 800f264:	429d      	cmp	r5, r3
 800f266:	d0f4      	beq.n	800f252 <tcp_read+0x36>
 800f268:	f240 55b6 	movw	r5, #1462	; 0x5b6
 800f26c:	435d      	muls	r5, r3
 800f26e:	1d06      	adds	r6, r0, #4
 800f270:	442e      	add	r6, r5
 800f272:	4416      	add	r6, r2
 800f274:	4428      	add	r0, r5
 800f276:	600e      	str	r6, [r1, #0]
 800f278:	4402      	add	r2, r0
 800f27a:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 800f27e:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800f280:	3301      	adds	r3, #1
 800f282:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800f286:	f003 0301 	and.w	r3, r3, #1
 800f28a:	8722      	strh	r2, [r4, #56]	; 0x38
 800f28c:	807b      	strh	r3, [r7, #2]
 800f28e:	b005      	add	sp, #20
 800f290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f292:	bf00      	nop
 800f294:	20003aa0 	andcs	r3, r0, r0, lsr #21
 800f298:	20002f30 	andcs	r2, r0, r0, lsr pc

0800f29c <memcpy.isra.0>:
 800f29c:	3801      	subs	r0, #1
 800f29e:	440a      	add	r2, r1
 800f2a0:	4291      	cmp	r1, r2
 800f2a2:	d100      	bne.n	800f2a6 <memcpy.isra.0+0xa>
 800f2a4:	4770      	bx	lr
 800f2a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2aa:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f2ae:	e7f7      	b.n	800f2a0 <memcpy.isra.0+0x4>

0800f2b0 <net_memcpy>:
 800f2b0:	ea41 0300 	orr.w	r3, r1, r0
 800f2b4:	079b      	lsls	r3, r3, #30
 800f2b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2b8:	d115      	bne.n	800f2e6 <net_memcpy+0x36>
 800f2ba:	f022 0303 	bic.w	r3, r2, #3
 800f2be:	1f04      	subs	r4, r0, #4
 800f2c0:	0895      	lsrs	r5, r2, #2
 800f2c2:	18ce      	adds	r6, r1, r3
 800f2c4:	42b1      	cmp	r1, r6
 800f2c6:	d109      	bne.n	800f2dc <net_memcpy+0x2c>
 800f2c8:	f06f 0403 	mvn.w	r4, #3
 800f2cc:	fb04 2205 	mla	r2, r4, r5, r2
 800f2d0:	4403      	add	r3, r0
 800f2d2:	3b01      	subs	r3, #1
 800f2d4:	440a      	add	r2, r1
 800f2d6:	4291      	cmp	r1, r2
 800f2d8:	d107      	bne.n	800f2ea <net_memcpy+0x3a>
 800f2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2dc:	f851 7b04 	ldr.w	r7, [r1], #4
 800f2e0:	f844 7f04 	str.w	r7, [r4, #4]!
 800f2e4:	e7ee      	b.n	800f2c4 <net_memcpy+0x14>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	e7f3      	b.n	800f2d2 <net_memcpy+0x22>
 800f2ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2f2:	e7f0      	b.n	800f2d6 <net_memcpy+0x26>

0800f2f4 <udp_set_ip>:
 800f2f4:	2204      	movs	r2, #4
 800f2f6:	b513      	push	{r0, r1, r4, lr}
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	6803      	ldr	r3, [r0, #0]
 800f2fc:	eb0d 0102 	add.w	r1, sp, r2
 800f300:	4808      	ldr	r0, [pc, #32]	; (800f324 <udp_set_ip+0x30>)
 800f302:	9301      	str	r3, [sp, #4]
 800f304:	f7ff ffca 	bl	800f29c <memcpy.isra.0>
 800f308:	6862      	ldr	r2, [r4, #4]
 800f30a:	4b07      	ldr	r3, [pc, #28]	; (800f328 <udp_set_ip+0x34>)
 800f30c:	43d1      	mvns	r1, r2
 800f30e:	6019      	str	r1, [r3, #0]
 800f310:	6823      	ldr	r3, [r4, #0]
 800f312:	4013      	ands	r3, r2
 800f314:	4a05      	ldr	r2, [pc, #20]	; (800f32c <udp_set_ip+0x38>)
 800f316:	6013      	str	r3, [r2, #0]
 800f318:	68a2      	ldr	r2, [r4, #8]
 800f31a:	4b05      	ldr	r3, [pc, #20]	; (800f330 <udp_set_ip+0x3c>)
 800f31c:	601a      	str	r2, [r3, #0]
 800f31e:	b002      	add	sp, #8
 800f320:	bd10      	pop	{r4, pc}
 800f322:	bf00      	nop
 800f324:	20009dba 			; <UNDEFINED> instruction: 0x20009dba
 800f328:	200040d0 	ldrdcs	r4, [r0], -r0
 800f32c:	200040d8 	ldrdcs	r4, [r0], -r8
 800f330:	200040d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>

0800f334 <udp_init>:
 800f334:	b570      	push	{r4, r5, r6, lr}
 800f336:	2200      	movs	r2, #0
 800f338:	2508      	movs	r5, #8
 800f33a:	460e      	mov	r6, r1
 800f33c:	4b12      	ldr	r3, [pc, #72]	; (800f388 <udp_init+0x54>)
 800f33e:	4913      	ldr	r1, [pc, #76]	; (800f38c <udp_init+0x58>)
 800f340:	3d01      	subs	r5, #1
 800f342:	801a      	strh	r2, [r3, #0]
 800f344:	805a      	strh	r2, [r3, #2]
 800f346:	f841 2b04 	str.w	r2, [r1], #4
 800f34a:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 800f34e:	d1f7      	bne.n	800f340 <udp_init+0xc>
 800f350:	2206      	movs	r2, #6
 800f352:	4c0f      	ldr	r4, [pc, #60]	; (800f390 <udp_init+0x5c>)
 800f354:	4b0f      	ldr	r3, [pc, #60]	; (800f394 <udp_init+0x60>)
 800f356:	4601      	mov	r1, r0
 800f358:	18a0      	adds	r0, r4, r2
 800f35a:	801d      	strh	r5, [r3, #0]
 800f35c:	f7ff ff9e 	bl	800f29c <memcpy.isra.0>
 800f360:	2308      	movs	r3, #8
 800f362:	7323      	strb	r3, [r4, #12]
 800f364:	2345      	movs	r3, #69	; 0x45
 800f366:	73a3      	strb	r3, [r4, #14]
 800f368:	2340      	movs	r3, #64	; 0x40
 800f36a:	7523      	strb	r3, [r4, #20]
 800f36c:	75a3      	strb	r3, [r4, #22]
 800f36e:	2311      	movs	r3, #17
 800f370:	4630      	mov	r0, r6
 800f372:	7365      	strb	r5, [r4, #13]
 800f374:	73e5      	strb	r5, [r4, #15]
 800f376:	7565      	strb	r5, [r4, #21]
 800f378:	75e3      	strb	r3, [r4, #23]
 800f37a:	f7ff ffbb 	bl	800f2f4 <udp_set_ip>
 800f37e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800f382:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 800f386:	bd70      	pop	{r4, r5, r6, pc}
 800f388:	20004100 	andcs	r4, r0, r0, lsl #2
 800f38c:	200040e0 	andcs	r4, r0, r0, ror #1
 800f390:	20009da0 	andcs	r9, r0, r0, lsr #27
 800f394:	200040dc 	ldrdcs	r4, [r0], -ip

0800f398 <udp_shutdown>:
 800f398:	4770      	bx	lr
	...

0800f39c <udp_handle>:
 800f39c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f3a0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800f3a2:	4607      	mov	r7, r0
 800f3a4:	ba5b      	rev16	r3, r3
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 800f3ac:	2a01      	cmp	r2, #1
 800f3ae:	d904      	bls.n	800f3ba <udp_handle+0x1e>
 800f3b0:	2b7b      	cmp	r3, #123	; 0x7b
 800f3b2:	d002      	beq.n	800f3ba <udp_handle+0x1e>
 800f3b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f3b8:	d308      	bcc.n	800f3cc <udp_handle+0x30>
 800f3ba:	2400      	movs	r4, #0
 800f3bc:	4a1f      	ldr	r2, [pc, #124]	; (800f43c <udp_handle+0xa0>)
 800f3be:	f852 1b04 	ldr.w	r1, [r2], #4
 800f3c2:	4299      	cmp	r1, r3
 800f3c4:	d005      	beq.n	800f3d2 <udp_handle+0x36>
 800f3c6:	3401      	adds	r4, #1
 800f3c8:	2c08      	cmp	r4, #8
 800f3ca:	d1f8      	bne.n	800f3be <udp_handle+0x22>
 800f3cc:	b002      	add	sp, #8
 800f3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3d2:	f640 3394 	movw	r3, #2964	; 0xb94
 800f3d6:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 800f3d8:	435c      	muls	r4, r3
 800f3da:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800f3de:	ba76      	rev16	r6, r6
 800f3e0:	3e08      	subs	r6, #8
 800f3e2:	b2b6      	uxth	r6, r6
 800f3e4:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800f3e8:	bf28      	it	cs
 800f3ea:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 800f3ee:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800f440 <udp_handle+0xa4>
 800f3f2:	1d20      	adds	r0, r4, #4
 800f3f4:	f838 5004 	ldrh.w	r5, [r8, r4]
 800f3f8:	4632      	mov	r2, r6
 800f3fa:	435d      	muls	r5, r3
 800f3fc:	4428      	add	r0, r5
 800f3fe:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800f402:	4440      	add	r0, r8
 800f404:	f7ff ff4a 	bl	800f29c <memcpy.isra.0>
 800f408:	2204      	movs	r2, #4
 800f40a:	f107 011a 	add.w	r1, r7, #26
 800f40e:	eb0d 0002 	add.w	r0, sp, r2
 800f412:	f7ff ff43 	bl	800f29c <memcpy.isra.0>
 800f416:	9a01      	ldr	r2, [sp, #4]
 800f418:	192b      	adds	r3, r5, r4
 800f41a:	4443      	add	r3, r8
 800f41c:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 800f420:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f422:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 800f426:	ba52      	rev16	r2, r2
 800f428:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 800f42c:	f838 3004 	ldrh.w	r3, [r8, r4]
 800f430:	3301      	adds	r3, #1
 800f432:	f003 0301 	and.w	r3, r3, #1
 800f436:	f828 3004 	strh.w	r3, [r8, r4]
 800f43a:	e7c7      	b.n	800f3cc <udp_handle+0x30>
 800f43c:	200040e0 	andcs	r4, r0, r0, ror #1
 800f440:	20004100 	andcs	r4, r0, r0, lsl #2

0800f444 <udp_bind>:
 800f444:	4a0a      	ldr	r2, [pc, #40]	; (800f470 <udp_bind+0x2c>)
 800f446:	4603      	mov	r3, r0
 800f448:	b510      	push	{r4, lr}
 800f44a:	2000      	movs	r0, #0
 800f44c:	4614      	mov	r4, r2
 800f44e:	f852 1b04 	ldr.w	r1, [r2], #4
 800f452:	4299      	cmp	r1, r3
 800f454:	d008      	beq.n	800f468 <udp_bind+0x24>
 800f456:	b141      	cbz	r1, 800f46a <udp_bind+0x26>
 800f458:	3001      	adds	r0, #1
 800f45a:	2808      	cmp	r0, #8
 800f45c:	d1f7      	bne.n	800f44e <udp_bind+0xa>
 800f45e:	4805      	ldr	r0, [pc, #20]	; (800f474 <udp_bind+0x30>)
 800f460:	f003 f9b2 	bl	80127c8 <console_error>
 800f464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f468:	bd10      	pop	{r4, pc}
 800f46a:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800f46e:	e7fb      	b.n	800f468 <udp_bind+0x24>
 800f470:	200040e0 	andcs	r4, r0, r0, ror #1
 800f474:	08016955 	stmdaeq	r1, {r0, r2, r4, r6, r8, fp, sp, lr}

0800f478 <udp_unbind>:
 800f478:	4a0c      	ldr	r2, [pc, #48]	; (800f4ac <udp_unbind+0x34>)
 800f47a:	2300      	movs	r3, #0
 800f47c:	4611      	mov	r1, r2
 800f47e:	b510      	push	{r4, lr}
 800f480:	f852 4b04 	ldr.w	r4, [r2], #4
 800f484:	4284      	cmp	r4, r0
 800f486:	d108      	bne.n	800f49a <udp_unbind+0x22>
 800f488:	2000      	movs	r0, #0
 800f48a:	f640 3294 	movw	r2, #2964	; 0xb94
 800f48e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800f492:	4353      	muls	r3, r2
 800f494:	4a06      	ldr	r2, [pc, #24]	; (800f4b0 <udp_unbind+0x38>)
 800f496:	5098      	str	r0, [r3, r2]
 800f498:	bd10      	pop	{r4, pc}
 800f49a:	3301      	adds	r3, #1
 800f49c:	2b08      	cmp	r3, #8
 800f49e:	d1ef      	bne.n	800f480 <udp_unbind+0x8>
 800f4a0:	4804      	ldr	r0, [pc, #16]	; (800f4b4 <udp_unbind+0x3c>)
 800f4a2:	f003 f991 	bl	80127c8 <console_error>
 800f4a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4aa:	e7f5      	b.n	800f498 <udp_unbind+0x20>
 800f4ac:	200040e0 	andcs	r4, r0, r0, ror #1
 800f4b0:	20004100 	andcs	r4, r0, r0, lsl #2
 800f4b4:	0801695a 	stmdaeq	r1, {r1, r3, r4, r6, r8, fp, sp, lr}

0800f4b8 <udp_recv>:
 800f4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4bc:	4604      	mov	r4, r0
 800f4be:	4698      	mov	r8, r3
 800f4c0:	f640 3394 	movw	r3, #2964	; 0xb94
 800f4c4:	435c      	muls	r4, r3
 800f4c6:	4608      	mov	r0, r1
 800f4c8:	4915      	ldr	r1, [pc, #84]	; (800f520 <udp_recv+0x68>)
 800f4ca:	190f      	adds	r7, r1, r4
 800f4cc:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800f4d0:	5b0b      	ldrh	r3, [r1, r4]
 800f4d2:	4563      	cmp	r3, ip
 800f4d4:	d021      	beq.n	800f51a <udp_recv+0x62>
 800f4d6:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800f4da:	fb03 fc0c 	mul.w	ip, r3, ip
 800f4de:	eb0c 0604 	add.w	r6, ip, r4
 800f4e2:	440e      	add	r6, r1
 800f4e4:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 800f4e8:	3404      	adds	r4, #4
 800f4ea:	4295      	cmp	r5, r2
 800f4ec:	bf28      	it	cs
 800f4ee:	4615      	movcs	r5, r2
 800f4f0:	4464      	add	r4, ip
 800f4f2:	462a      	mov	r2, r5
 800f4f4:	4421      	add	r1, r4
 800f4f6:	f7ff fedb 	bl	800f2b0 <net_memcpy>
 800f4fa:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 800f4fe:	f8c8 3000 	str.w	r3, [r8]
 800f502:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 800f506:	9b06      	ldr	r3, [sp, #24]
 800f508:	801a      	strh	r2, [r3, #0]
 800f50a:	887b      	ldrh	r3, [r7, #2]
 800f50c:	3301      	adds	r3, #1
 800f50e:	f003 0301 	and.w	r3, r3, #1
 800f512:	807b      	strh	r3, [r7, #2]
 800f514:	4628      	mov	r0, r5
 800f516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f51a:	2500      	movs	r5, #0
 800f51c:	e7fa      	b.n	800f514 <udp_recv+0x5c>
 800f51e:	bf00      	nop
 800f520:	20004100 	andcs	r4, r0, r0, lsl #2

0800f524 <udp_recv2>:
 800f524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f526:	f640 3594 	movw	r5, #2964	; 0xb94
 800f52a:	4368      	muls	r0, r5
 800f52c:	4c0f      	ldr	r4, [pc, #60]	; (800f56c <udp_recv2+0x48>)
 800f52e:	1827      	adds	r7, r4, r0
 800f530:	887d      	ldrh	r5, [r7, #2]
 800f532:	5a26      	ldrh	r6, [r4, r0]
 800f534:	42ae      	cmp	r6, r5
 800f536:	d017      	beq.n	800f568 <udp_recv2+0x44>
 800f538:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 800f53c:	fb0c f505 	mul.w	r5, ip, r5
 800f540:	1d06      	adds	r6, r0, #4
 800f542:	442e      	add	r6, r5
 800f544:	4405      	add	r5, r0
 800f546:	4426      	add	r6, r4
 800f548:	442c      	add	r4, r5
 800f54a:	600e      	str	r6, [r1, #0]
 800f54c:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 800f550:	6011      	str	r1, [r2, #0]
 800f552:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 800f556:	801a      	strh	r2, [r3, #0]
 800f558:	887b      	ldrh	r3, [r7, #2]
 800f55a:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 800f55e:	3301      	adds	r3, #1
 800f560:	f003 0301 	and.w	r3, r3, #1
 800f564:	807b      	strh	r3, [r7, #2]
 800f566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f568:	2000      	movs	r0, #0
 800f56a:	e7fc      	b.n	800f566 <udp_recv2+0x42>
 800f56c:	20004100 	andcs	r4, r0, r0, lsl #2

0800f570 <udp_send>:
 800f570:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f574:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800f6ac <udp_send+0x13c>
 800f578:	461c      	mov	r4, r3
 800f57a:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 800f57e:	4607      	mov	r7, r0
 800f580:	4688      	mov	r8, r1
 800f582:	4616      	mov	r6, r2
 800f584:	2b00      	cmp	r3, #0
 800f586:	f000 808e 	beq.w	800f6a6 <udp_send+0x136>
 800f58a:	1c63      	adds	r3, r4, #1
 800f58c:	d144      	bne.n	800f618 <udp_send+0xa8>
 800f58e:	4848      	ldr	r0, [pc, #288]	; (800f6b0 <udp_send+0x140>)
 800f590:	2107      	movs	r1, #7
 800f592:	4602      	mov	r2, r0
 800f594:	23ff      	movs	r3, #255	; 0xff
 800f596:	e001      	b.n	800f59c <udp_send+0x2c>
 800f598:	f800 3b01 	strb.w	r3, [r0], #1
 800f59c:	3901      	subs	r1, #1
 800f59e:	d1fb      	bne.n	800f598 <udp_send+0x28>
 800f5a0:	7793      	strb	r3, [r2, #30]
 800f5a2:	77d3      	strb	r3, [r2, #31]
 800f5a4:	f882 3020 	strb.w	r3, [r2, #32]
 800f5a8:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 800f5ac:	2500      	movs	r5, #0
 800f5ae:	f8df a104 	ldr.w	sl, [pc, #260]	; 800f6b4 <udp_send+0x144>
 800f5b2:	4c3f      	ldr	r4, [pc, #252]	; (800f6b0 <udp_send+0x140>)
 800f5b4:	f8ba 3000 	ldrh.w	r3, [sl]
 800f5b8:	2114      	movs	r1, #20
 800f5ba:	8263      	strh	r3, [r4, #18]
 800f5bc:	f106 031c 	add.w	r3, r6, #28
 800f5c0:	ba5b      	rev16	r3, r3
 800f5c2:	f104 000e 	add.w	r0, r4, #14
 800f5c6:	8223      	strh	r3, [r4, #16]
 800f5c8:	7625      	strb	r5, [r4, #24]
 800f5ca:	7665      	strb	r5, [r4, #25]
 800f5cc:	f001 fe6a 	bl	80112a4 <net_chksum>
 800f5d0:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 800f5d4:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800f5d8:	ba5b      	rev16	r3, r3
 800f5da:	8463      	strh	r3, [r4, #34]	; 0x22
 800f5dc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800f5e0:	4632      	mov	r2, r6
 800f5e2:	ba5b      	rev16	r3, r3
 800f5e4:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f5e6:	f106 0308 	add.w	r3, r6, #8
 800f5ea:	ba5b      	rev16	r3, r3
 800f5ec:	bf28      	it	cs
 800f5ee:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 800f5f2:	4641      	mov	r1, r8
 800f5f4:	8320      	strh	r0, [r4, #24]
 800f5f6:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800f5fa:	84e3      	strh	r3, [r4, #38]	; 0x26
 800f5fc:	f7ff fe58 	bl	800f2b0 <net_memcpy>
 800f600:	4620      	mov	r0, r4
 800f602:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 800f606:	f004 fcc9 	bl	8013f9c <emac_eth_send>
 800f60a:	f8ba 3000 	ldrh.w	r3, [sl]
 800f60e:	4628      	mov	r0, r5
 800f610:	3301      	adds	r3, #1
 800f612:	f8aa 3000 	strh.w	r3, [sl]
 800f616:	e037      	b.n	800f688 <udp_send+0x118>
 800f618:	4b27      	ldr	r3, [pc, #156]	; (800f6b8 <udp_send+0x148>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	43a3      	bics	r3, r4
 800f61e:	d10f      	bne.n	800f640 <udp_send+0xd0>
 800f620:	2307      	movs	r3, #7
 800f622:	21ff      	movs	r1, #255	; 0xff
 800f624:	4a22      	ldr	r2, [pc, #136]	; (800f6b0 <udp_send+0x140>)
 800f626:	e001      	b.n	800f62c <udp_send+0xbc>
 800f628:	f802 1b01 	strb.w	r1, [r2], #1
 800f62c:	3b01      	subs	r3, #1
 800f62e:	d1fb      	bne.n	800f628 <udp_send+0xb8>
 800f630:	2204      	movs	r2, #4
 800f632:	4822      	ldr	r0, [pc, #136]	; (800f6bc <udp_send+0x14c>)
 800f634:	eb0d 0102 	add.w	r1, sp, r2
 800f638:	9401      	str	r4, [sp, #4]
 800f63a:	f7ff fe2f 	bl	800f29c <memcpy.isra.0>
 800f63e:	e7b5      	b.n	800f5ac <udp_send+0x3c>
 800f640:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 800f644:	2be0      	cmp	r3, #224	; 0xe0
 800f646:	d10e      	bne.n	800f666 <udp_send+0xf6>
 800f648:	491d      	ldr	r1, [pc, #116]	; (800f6c0 <udp_send+0x150>)
 800f64a:	f3c4 2306 	ubfx	r3, r4, #8, #7
 800f64e:	70cb      	strb	r3, [r1, #3]
 800f650:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800f654:	710b      	strb	r3, [r1, #4]
 800f656:	f3c4 6307 	ubfx	r3, r4, #24, #8
 800f65a:	2206      	movs	r2, #6
 800f65c:	4814      	ldr	r0, [pc, #80]	; (800f6b0 <udp_send+0x140>)
 800f65e:	714b      	strb	r3, [r1, #5]
 800f660:	f7ff fe1c 	bl	800f29c <memcpy.isra.0>
 800f664:	e7e4      	b.n	800f630 <udp_send+0xc0>
 800f666:	4b17      	ldr	r3, [pc, #92]	; (800f6c4 <udp_send+0x154>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	43a3      	bics	r3, r4
 800f66c:	d00f      	beq.n	800f68e <udp_send+0x11e>
 800f66e:	4d16      	ldr	r5, [pc, #88]	; (800f6c8 <udp_send+0x158>)
 800f670:	490f      	ldr	r1, [pc, #60]	; (800f6b0 <udp_send+0x140>)
 800f672:	6828      	ldr	r0, [r5, #0]
 800f674:	f001 f9e0 	bl	8010a38 <arp_cache_lookup>
 800f678:	682b      	ldr	r3, [r5, #0]
 800f67a:	4298      	cmp	r0, r3
 800f67c:	d0d8      	beq.n	800f630 <udp_send+0xc0>
 800f67e:	4813      	ldr	r0, [pc, #76]	; (800f6cc <udp_send+0x15c>)
 800f680:	f003 f8a2 	bl	80127c8 <console_error>
 800f684:	f06f 0002 	mvn.w	r0, #2
 800f688:	b002      	add	sp, #8
 800f68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f68e:	4620      	mov	r0, r4
 800f690:	4907      	ldr	r1, [pc, #28]	; (800f6b0 <udp_send+0x140>)
 800f692:	f001 f9d1 	bl	8010a38 <arp_cache_lookup>
 800f696:	42a0      	cmp	r0, r4
 800f698:	d0ca      	beq.n	800f630 <udp_send+0xc0>
 800f69a:	480d      	ldr	r0, [pc, #52]	; (800f6d0 <udp_send+0x160>)
 800f69c:	f003 f894 	bl	80127c8 <console_error>
 800f6a0:	f06f 0001 	mvn.w	r0, #1
 800f6a4:	e7f0      	b.n	800f688 <udp_send+0x118>
 800f6a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6aa:	e7ed      	b.n	800f688 <udp_send+0x118>
 800f6ac:	200040e0 	andcs	r4, r0, r0, ror #1
 800f6b0:	20009da0 	andcs	r9, r0, r0, lsr #27
 800f6b4:	200040dc 	ldrdcs	r4, [r0], -ip
 800f6b8:	200040d0 	ldrdcs	r4, [r0], -r0
 800f6bc:	20009dbe 			; <UNDEFINED> instruction: 0x20009dbe
 800f6c0:	20000014 	andcs	r0, r0, r4, lsl r0
 800f6c4:	200040d8 	ldrdcs	r4, [r0], -r8
 800f6c8:	200040d4 	ldrdcs	r4, [r0], -r4	; <UNPREDICTABLE>
 800f6cc:	08016962 	stmdaeq	r1, {r1, r5, r6, r8, fp, sp, lr}
 800f6d0:	08016988 	stmdaeq	r1, {r3, r7, r8, fp, sp, lr}

0800f6d4 <strlen>:
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	7811      	ldrb	r1, [r2, #0]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	2900      	cmp	r1, #0
 800f6de:	d1fa      	bne.n	800f6d6 <strlen+0x2>
 800f6e0:	1a10      	subs	r0, r2, r0
 800f6e2:	4770      	bx	lr

0800f6e4 <strcmp>:
 800f6e4:	1e43      	subs	r3, r0, #1
 800f6e6:	3901      	subs	r1, #1
 800f6e8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800f6ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f6f0:	4290      	cmp	r0, r2
 800f6f2:	d102      	bne.n	800f6fa <strcmp+0x16>
 800f6f4:	2800      	cmp	r0, #0
 800f6f6:	d1f7      	bne.n	800f6e8 <strcmp+0x4>
 800f6f8:	4770      	bx	lr
 800f6fa:	1a80      	subs	r0, r0, r2
 800f6fc:	4770      	bx	lr

0800f6fe <strcpy.isra.0>:
 800f6fe:	3801      	subs	r0, #1
 800f700:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f704:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d1f9      	bne.n	800f700 <strcpy.isra.0+0x2>
 800f70c:	4770      	bx	lr

0800f70e <strcat.isra.0>:
 800f70e:	b538      	push	{r3, r4, r5, lr}
 800f710:	4604      	mov	r4, r0
 800f712:	460d      	mov	r5, r1
 800f714:	f7ff ffde 	bl	800f6d4 <strlen>
 800f718:	4629      	mov	r1, r5
 800f71a:	4420      	add	r0, r4
 800f71c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f720:	f7ff bfed 	b.w	800f6fe <strcpy.isra.0>

0800f724 <MDNS::MDNS()>:
 800f724:	b513      	push	{r0, r1, r4, lr}
 800f726:	4604      	mov	r4, r0
 800f728:	a901      	add	r1, sp, #4
 800f72a:	4804      	ldr	r0, [pc, #16]	; (800f73c <MDNS::MDNS()+0x18>)
 800f72c:	f003 f9b4 	bl	8012a98 <inet_aton>
 800f730:	4620      	mov	r0, r4
 800f732:	4b03      	ldr	r3, [pc, #12]	; (800f740 <MDNS::MDNS()+0x1c>)
 800f734:	9a01      	ldr	r2, [sp, #4]
 800f736:	601a      	str	r2, [r3, #0]
 800f738:	b002      	add	sp, #8
 800f73a:	bd10      	pop	{r4, pc}
 800f73c:	080169a8 	stmdaeq	r1, {r3, r5, r7, r8, fp, sp, lr}
 800f740:	2000a394 	mulcs	r0, r4, r3

0800f744 <MDNS::SetName(char const*)>:
 800f744:	b538      	push	{r3, r4, r5, lr}
 800f746:	4d0b      	ldr	r5, [pc, #44]	; (800f774 <MDNS::SetName(char const*)+0x30>)
 800f748:	460c      	mov	r4, r1
 800f74a:	6828      	ldr	r0, [r5, #0]
 800f74c:	b108      	cbz	r0, 800f752 <MDNS::SetName(char const*)+0xe>
 800f74e:	f003 f99d 	bl	8012a8c <operator delete[](void*)>
 800f752:	4620      	mov	r0, r4
 800f754:	f7ff ffbe 	bl	800f6d4 <strlen>
 800f758:	3007      	adds	r0, #7
 800f75a:	f003 f99b 	bl	8012a94 <operator new[](unsigned int)>
 800f75e:	4621      	mov	r1, r4
 800f760:	6028      	str	r0, [r5, #0]
 800f762:	f7ff ffcc 	bl	800f6fe <strcpy.isra.0>
 800f766:	6828      	ldr	r0, [r5, #0]
 800f768:	4903      	ldr	r1, [pc, #12]	; (800f778 <MDNS::SetName(char const*)+0x34>)
 800f76a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f76e:	f7ff bfce 	b.w	800f70e <strcat.isra.0>
 800f772:	bf00      	nop
 800f774:	2000a7c4 	andcs	sl, r0, r4, asr #15
 800f778:	080169b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, fp, sp, lr}

0800f77c <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 800f77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f780:	f04f 0e00 	mov.w	lr, #0
 800f784:	262e      	movs	r6, #46	; 0x2e
 800f786:	4675      	mov	r5, lr
 800f788:	4694      	mov	ip, r2
 800f78a:	4f1d      	ldr	r7, [pc, #116]	; (800f800 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x84>)
 800f78c:	4a1d      	ldr	r2, [pc, #116]	; (800f804 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x88>)
 800f78e:	780b      	ldrb	r3, [r1, #0]
 800f790:	1c68      	adds	r0, r5, #1
 800f792:	b383      	cbz	r3, 800f7f6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7a>
 800f794:	2b3f      	cmp	r3, #63	; 0x3f
 800f796:	d91d      	bls.n	800f7d4 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x58>
 800f798:	f1be 0f00 	cmp.w	lr, #0
 800f79c:	bf08      	it	eq
 800f79e:	4605      	moveq	r5, r0
 800f7a0:	2000      	movs	r0, #0
 800f7a2:	7849      	ldrb	r1, [r1, #1]
 800f7a4:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 800f7a8:	430b      	orrs	r3, r1
 800f7aa:	6811      	ldr	r1, [r2, #0]
 800f7ac:	5ccc      	ldrb	r4, [r1, r3]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	440b      	add	r3, r1
 800f7b2:	42a0      	cmp	r0, r4
 800f7b4:	5c19      	ldrb	r1, [r3, r0]
 800f7b6:	d309      	bcc.n	800f7cc <MDNS::DecodeDNSNameNotation(char const*, char*)+0x50>
 800f7b8:	f04f 0e01 	mov.w	lr, #1
 800f7bc:	1919      	adds	r1, r3, r4
 800f7be:	4464      	add	r4, ip
 800f7c0:	780b      	ldrb	r3, [r1, #0]
 800f7c2:	b10b      	cbz	r3, 800f7c8 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4c>
 800f7c4:	f804 6b01 	strb.w	r6, [r4], #1
 800f7c8:	46a4      	mov	ip, r4
 800f7ca:	e7e0      	b.n	800f78e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 800f7cc:	f80c 1000 	strb.w	r1, [ip, r0]
 800f7d0:	3001      	adds	r0, #1
 800f7d2:	e7ee      	b.n	800f7b2 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x36>
 800f7d4:	4688      	mov	r8, r1
 800f7d6:	eb0c 0403 	add.w	r4, ip, r3
 800f7da:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 800f7de:	f80c 9b01 	strb.w	r9, [ip], #1
 800f7e2:	4564      	cmp	r4, ip
 800f7e4:	d1f9      	bne.n	800f7da <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5e>
 800f7e6:	f103 0c01 	add.w	ip, r3, #1
 800f7ea:	4461      	add	r1, ip
 800f7ec:	f1be 0f00 	cmp.w	lr, #0
 800f7f0:	d1e6      	bne.n	800f7c0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 800f7f2:	18c5      	adds	r5, r0, r3
 800f7f4:	e7e4      	b.n	800f7c0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 800f7f6:	f88c 3000 	strb.w	r3, [ip]
 800f7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7fe:	bf00      	nop
 800f800:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 800f804:	2000a7c8 	andcs	sl, r0, r8, asr #15

0800f808 <MDNS::FindFirstDotFromRight(char const*) const>:
 800f808:	b510      	push	{r4, lr}
 800f80a:	4608      	mov	r0, r1
 800f80c:	460c      	mov	r4, r1
 800f80e:	f7ff ff61 	bl	800f6d4 <strlen>
 800f812:	4420      	add	r0, r4
 800f814:	42a0      	cmp	r0, r4
 800f816:	d903      	bls.n	800f820 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 800f818:	f810 3901 	ldrb.w	r3, [r0], #-1
 800f81c:	2b2e      	cmp	r3, #46	; 0x2e
 800f81e:	d1f9      	bne.n	800f814 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 800f820:	3001      	adds	r0, #1
 800f822:	bd10      	pop	{r4, pc}

0800f824 <MDNS::WriteDnsName(char const*, char*, bool)>:
 800f824:	4610      	mov	r0, r2
 800f826:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f828:	460f      	mov	r7, r1
 800f82a:	1c44      	adds	r4, r0, #1
 800f82c:	463d      	mov	r5, r7
 800f82e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f832:	b126      	cbz	r6, 800f83e <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 800f834:	2e2e      	cmp	r6, #46	; 0x2e
 800f836:	d002      	beq.n	800f83e <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 800f838:	f804 6b01 	strb.w	r6, [r4], #1
 800f83c:	e7f6      	b.n	800f82c <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 800f83e:	1a69      	subs	r1, r5, r1
 800f840:	7001      	strb	r1, [r0, #0]
 800f842:	7829      	ldrb	r1, [r5, #0]
 800f844:	b921      	cbnz	r1, 800f850 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 800f846:	b10b      	cbz	r3, 800f84c <MDNS::WriteDnsName(char const*, char*, bool)+0x28>
 800f848:	f804 1b01 	strb.w	r1, [r4], #1
 800f84c:	1aa0      	subs	r0, r4, r2
 800f84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f850:	4620      	mov	r0, r4
 800f852:	1c69      	adds	r1, r5, #1
 800f854:	e7e8      	b.n	800f828 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

0800f858 <MDNS::CreateAnswerLocalIpAddress()>:
 800f858:	2384      	movs	r3, #132	; 0x84
 800f85a:	b510      	push	{r4, lr}
 800f85c:	4c0f      	ldr	r4, [pc, #60]	; (800f89c <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 800f85e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f862:	80e3      	strh	r3, [r4, #6]
 800f864:	2300      	movs	r3, #0
 800f866:	490e      	ldr	r1, [pc, #56]	; (800f8a0 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 800f868:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f86c:	6809      	ldr	r1, [r1, #0]
 800f86e:	f104 0210 	add.w	r2, r4, #16
 800f872:	2301      	movs	r3, #1
 800f874:	f7ff ffd6 	bl	800f824 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f878:	490a      	ldr	r1, [pc, #40]	; (800f8a4 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 800f87a:	1813      	adds	r3, r2, r0
 800f87c:	5011      	str	r1, [r2, r0]
 800f87e:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800f882:	605a      	str	r2, [r3, #4]
 800f884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f888:	811a      	strh	r2, [r3, #8]
 800f88a:	4a07      	ldr	r2, [pc, #28]	; (800f8a8 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 800f88c:	6812      	ldr	r2, [r2, #0]
 800f88e:	6912      	ldr	r2, [r2, #16]
 800f890:	f8c3 200a 	str.w	r2, [r3, #10]
 800f894:	1b1b      	subs	r3, r3, r4
 800f896:	330a      	adds	r3, #10
 800f898:	6023      	str	r3, [r4, #0]
 800f89a:	bd10      	pop	{r4, pc}
 800f89c:	2000a398 	mulcs	r0, r8, r3
 800f8a0:	2000a7c4 	andcs	sl, r0, r4, asr #15
 800f8a4:	01800100 	orreq	r0, r0, r0, lsl #2
 800f8a8:	2000a7cc 	andcs	sl, r0, ip, asr #15

0800f8ac <MDNS::Start()>:
 800f8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8ae:	4c1e      	ldr	r4, [pc, #120]	; (800f928 <MDNS::Start()+0x7c>)
 800f8b0:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800f8b4:	4605      	mov	r5, r0
 800f8b6:	6820      	ldr	r0, [r4, #0]
 800f8b8:	f000 fb2a 	bl	800ff10 <Network::Begin(unsigned short)>
 800f8bc:	4e1b      	ldr	r6, [pc, #108]	; (800f92c <MDNS::Start()+0x80>)
 800f8be:	4f1c      	ldr	r7, [pc, #112]	; (800f930 <MDNS::Start()+0x84>)
 800f8c0:	4601      	mov	r1, r0
 800f8c2:	6030      	str	r0, [r6, #0]
 800f8c4:	683a      	ldr	r2, [r7, #0]
 800f8c6:	6820      	ldr	r0, [r4, #0]
 800f8c8:	f000 fb33 	bl	800ff32 <Network::JoinGroup(int, unsigned int)>
 800f8cc:	4b19      	ldr	r3, [pc, #100]	; (800f934 <MDNS::Start()+0x88>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	b923      	cbnz	r3, 800f8dc <MDNS::Start()+0x30>
 800f8d2:	6821      	ldr	r1, [r4, #0]
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	311c      	adds	r1, #28
 800f8d8:	f7ff ff34 	bl	800f744 <MDNS::SetName(char const*)>
 800f8dc:	4628      	mov	r0, r5
 800f8de:	f7ff ffbb 	bl	800f858 <MDNS::CreateAnswerLocalIpAddress()>
 800f8e2:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f8e6:	4914      	ldr	r1, [pc, #80]	; (800f938 <MDNS::Start()+0x8c>)
 800f8e8:	7830      	ldrb	r0, [r6, #0]
 800f8ea:	f851 2b04 	ldr.w	r2, [r1], #4
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	b292      	uxth	r2, r2
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	f7ff fe3c 	bl	800f570 <udp_send>
 800f8f8:	223f      	movs	r2, #63	; 0x3f
 800f8fa:	6820      	ldr	r0, [r4, #0]
 800f8fc:	4c0f      	ldr	r4, [pc, #60]	; (800f93c <MDNS::Start()+0x90>)
 800f8fe:	f100 035c 	add.w	r3, r0, #92	; 0x5c
 800f902:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800f906:	b929      	cbnz	r1, 800f914 <MDNS::Start()+0x68>
 800f908:	441a      	add	r2, r3
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d006      	beq.n	800f91c <MDNS::Start()+0x70>
 800f90e:	f803 1b01 	strb.w	r1, [r3], #1
 800f912:	e7fa      	b.n	800f90a <MDNS::Start()+0x5e>
 800f914:	3a01      	subs	r2, #1
 800f916:	f803 1b01 	strb.w	r1, [r3], #1
 800f91a:	d1f2      	bne.n	800f902 <MDNS::Start()+0x56>
 800f91c:	2300      	movs	r3, #0
 800f91e:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 800f922:	b003      	add	sp, #12
 800f924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f926:	bf00      	nop
 800f928:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800f92c:	2000001c 	andcs	r0, r0, ip, lsl r0
 800f930:	2000a394 	mulcs	r0, r4, r3
 800f934:	2000a7c4 	andcs	sl, r0, r4, asr #15
 800f938:	2000a398 	mulcs	r0, r8, r3
 800f93c:	080169b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, fp, sp, lr}

0800f940 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 800f940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f944:	4c1b      	ldr	r4, [pc, #108]	; (800f9b4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 800f946:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 800f94a:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 800f94e:	2300      	movs	r3, #0
 800f950:	f854 100c 	ldr.w	r1, [r4, ip]
 800f954:	4607      	mov	r7, r0
 800f956:	f7ff ff65 	bl	800f824 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f95a:	2301      	movs	r3, #1
 800f95c:	7bac      	ldrb	r4, [r5, #14]
 800f95e:	4616      	mov	r6, r2
 800f960:	4915      	ldr	r1, [pc, #84]	; (800f9b8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 800f962:	4402      	add	r2, r0
 800f964:	4815      	ldr	r0, [pc, #84]	; (800f9bc <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 800f966:	429c      	cmp	r4, r3
 800f968:	bf18      	it	ne
 800f96a:	4601      	movne	r1, r0
 800f96c:	4638      	mov	r0, r7
 800f96e:	f7ff ff59 	bl	800f824 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f972:	4b13      	ldr	r3, [pc, #76]	; (800f9c0 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 800f974:	1814      	adds	r4, r2, r0
 800f976:	5013      	str	r3, [r2, r0]
 800f978:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f97c:	6063      	str	r3, [r4, #4]
 800f97e:	4b11      	ldr	r3, [pc, #68]	; (800f9c4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 800f980:	f8d3 8000 	ldr.w	r8, [r3]
 800f984:	4640      	mov	r0, r8
 800f986:	f7ff fea5 	bl	800f6d4 <strlen>
 800f98a:	f100 0308 	add.w	r3, r0, #8
 800f98e:	ba5b      	rev16	r3, r3
 800f990:	8123      	strh	r3, [r4, #8]
 800f992:	2300      	movs	r3, #0
 800f994:	f8c4 300a 	str.w	r3, [r4, #10]
 800f998:	89ab      	ldrh	r3, [r5, #12]
 800f99a:	f104 0210 	add.w	r2, r4, #16
 800f99e:	ba5b      	rev16	r3, r3
 800f9a0:	81e3      	strh	r3, [r4, #14]
 800f9a2:	4641      	mov	r1, r8
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	f7ff ff3c 	bl	800f824 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f9ac:	4410      	add	r0, r2
 800f9ae:	1b80      	subs	r0, r0, r6
 800f9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b4:	2000a59c 	mulcs	r0, ip, r5
 800f9b8:	080169b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, fp, sp, lr}
 800f9bc:	080169d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, fp, sp, lr}
 800f9c0:	01802100 	orreq	r2, r0, r0, lsl #2
 800f9c4:	2000a7c4 	andcs	sl, r0, r4, asr #15

0800f9c8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 800f9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9cc:	4e19      	ldr	r6, [pc, #100]	; (800fa34 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 800f9ce:	010f      	lsls	r7, r1, #4
 800f9d0:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	59f1      	ldr	r1, [r6, r7]
 800f9d8:	4604      	mov	r4, r0
 800f9da:	f7ff ff23 	bl	800f824 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f9de:	2301      	movs	r3, #1
 800f9e0:	7bae      	ldrb	r6, [r5, #14]
 800f9e2:	4690      	mov	r8, r2
 800f9e4:	4914      	ldr	r1, [pc, #80]	; (800fa38 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 800f9e6:	4402      	add	r2, r0
 800f9e8:	4814      	ldr	r0, [pc, #80]	; (800fa3c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 800f9ea:	429e      	cmp	r6, r3
 800f9ec:	bf18      	it	ne
 800f9ee:	4601      	movne	r1, r0
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f7ff ff17 	bl	800f824 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f9f6:	4b12      	ldr	r3, [pc, #72]	; (800fa40 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 800f9f8:	1816      	adds	r6, r2, r0
 800f9fa:	5013      	str	r3, [r2, r0]
 800f9fc:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800fa00:	68a8      	ldr	r0, [r5, #8]
 800fa02:	6073      	str	r3, [r6, #4]
 800fa04:	f106 040b 	add.w	r4, r6, #11
 800fa08:	b938      	cbnz	r0, 800fa1a <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 800fa0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa0e:	72b0      	strb	r0, [r6, #10]
 800fa10:	8133      	strh	r3, [r6, #8]
 800fa12:	eba4 0008 	sub.w	r0, r4, r8
 800fa16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa1a:	f7ff fe5b 	bl	800f6d4 <strlen>
 800fa1e:	4607      	mov	r7, r0
 800fa20:	1c43      	adds	r3, r0, #1
 800fa22:	72b0      	strb	r0, [r6, #10]
 800fa24:	ba5b      	rev16	r3, r3
 800fa26:	4620      	mov	r0, r4
 800fa28:	68a9      	ldr	r1, [r5, #8]
 800fa2a:	8133      	strh	r3, [r6, #8]
 800fa2c:	f7ff fe67 	bl	800f6fe <strcpy.isra.0>
 800fa30:	443c      	add	r4, r7
 800fa32:	e7ee      	b.n	800fa12 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 800fa34:	2000a59c 	mulcs	r0, ip, r5
 800fa38:	080169b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, fp, sp, lr}
 800fa3c:	080169d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, fp, sp, lr}
 800fa40:	01801000 	orreq	r1, r0, r0

0800fa44 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 800fa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa48:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800faac <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 800fa4c:	ea4f 1901 	mov.w	r9, r1, lsl #4
 800fa50:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 800fa54:	6869      	ldr	r1, [r5, #4]
 800fa56:	2301      	movs	r3, #1
 800fa58:	4607      	mov	r7, r0
 800fa5a:	f7ff fee3 	bl	800f824 <MDNS::WriteDnsName(char const*, char*, bool)>
 800fa5e:	4b14      	ldr	r3, [pc, #80]	; (800fab0 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 800fa60:	f858 8009 	ldr.w	r8, [r8, r9]
 800fa64:	5013      	str	r3, [r2, r0]
 800fa66:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800fa6a:	1816      	adds	r6, r2, r0
 800fa6c:	6073      	str	r3, [r6, #4]
 800fa6e:	4640      	mov	r0, r8
 800fa70:	4614      	mov	r4, r2
 800fa72:	f7ff fe2f 	bl	800f6d4 <strlen>
 800fa76:	f100 030d 	add.w	r3, r0, #13
 800fa7a:	ba5b      	rev16	r3, r3
 800fa7c:	4641      	mov	r1, r8
 800fa7e:	8133      	strh	r3, [r6, #8]
 800fa80:	f106 020a 	add.w	r2, r6, #10
 800fa84:	2300      	movs	r3, #0
 800fa86:	4638      	mov	r0, r7
 800fa88:	f7ff fecc 	bl	800f824 <MDNS::WriteDnsName(char const*, char*, bool)>
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	4402      	add	r2, r0
 800fa90:	7bad      	ldrb	r5, [r5, #14]
 800fa92:	4808      	ldr	r0, [pc, #32]	; (800fab4 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 800fa94:	4908      	ldr	r1, [pc, #32]	; (800fab8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 800fa96:	429d      	cmp	r5, r3
 800fa98:	bf18      	it	ne
 800fa9a:	4601      	movne	r1, r0
 800fa9c:	4638      	mov	r0, r7
 800fa9e:	f7ff fec1 	bl	800f824 <MDNS::WriteDnsName(char const*, char*, bool)>
 800faa2:	4410      	add	r0, r2
 800faa4:	1b00      	subs	r0, r0, r4
 800faa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faaa:	bf00      	nop
 800faac:	2000a59c 	mulcs	r0, ip, r5
 800fab0:	01000c00 	tsteq	r0, r0, lsl #24
 800fab4:	080169d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, fp, sp, lr}
 800fab8:	080169b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, fp, sp, lr}

0800fabc <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 800fabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fabe:	460f      	mov	r7, r1
 800fac0:	2301      	movs	r3, #1
 800fac2:	490f      	ldr	r1, [pc, #60]	; (800fb00 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 800fac4:	4606      	mov	r6, r0
 800fac6:	f7ff fead 	bl	800f824 <MDNS::WriteDnsName(char const*, char*, bool)>
 800faca:	4b0e      	ldr	r3, [pc, #56]	; (800fb04 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 800facc:	490e      	ldr	r1, [pc, #56]	; (800fb08 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 800face:	5013      	str	r3, [r2, r0]
 800fad0:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800fad4:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800fad8:	684f      	ldr	r7, [r1, #4]
 800fada:	1815      	adds	r5, r2, r0
 800fadc:	606b      	str	r3, [r5, #4]
 800fade:	4638      	mov	r0, r7
 800fae0:	4614      	mov	r4, r2
 800fae2:	f7ff fdf7 	bl	800f6d4 <strlen>
 800fae6:	1c83      	adds	r3, r0, #2
 800fae8:	ba5b      	rev16	r3, r3
 800faea:	812b      	strh	r3, [r5, #8]
 800faec:	f105 020a 	add.w	r2, r5, #10
 800faf0:	2301      	movs	r3, #1
 800faf2:	4639      	mov	r1, r7
 800faf4:	4630      	mov	r0, r6
 800faf6:	f7ff fe95 	bl	800f824 <MDNS::WriteDnsName(char const*, char*, bool)>
 800fafa:	4410      	add	r0, r2
 800fafc:	1b00      	subs	r0, r0, r4
 800fafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb00:	080169bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, fp, sp, lr}
 800fb04:	01000c00 	tsteq	r0, r0, lsl #24
 800fb08:	2000a59c 	mulcs	r0, ip, r5

0800fb0c <MDNS::CreateMDNSMessage(unsigned int)>:
 800fb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb0e:	2384      	movs	r3, #132	; 0x84
 800fb10:	4d19      	ldr	r5, [pc, #100]	; (800fb78 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 800fb12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800fb16:	80eb      	strh	r3, [r5, #6]
 800fb18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb1c:	f105 0410 	add.w	r4, r5, #16
 800fb20:	e9c5 2302 	strd	r2, r3, [r5, #8]
 800fb24:	4622      	mov	r2, r4
 800fb26:	4606      	mov	r6, r0
 800fb28:	460f      	mov	r7, r1
 800fb2a:	f7ff ff09 	bl	800f940 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 800fb2e:	4404      	add	r4, r0
 800fb30:	4622      	mov	r2, r4
 800fb32:	4639      	mov	r1, r7
 800fb34:	4630      	mov	r0, r6
 800fb36:	f7ff ff47 	bl	800f9c8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 800fb3a:	4404      	add	r4, r0
 800fb3c:	4622      	mov	r2, r4
 800fb3e:	4639      	mov	r1, r7
 800fb40:	4630      	mov	r0, r6
 800fb42:	f7ff ffbb 	bl	800fabc <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 800fb46:	4404      	add	r4, r0
 800fb48:	4622      	mov	r2, r4
 800fb4a:	4639      	mov	r1, r7
 800fb4c:	4630      	mov	r0, r6
 800fb4e:	f7ff ff79 	bl	800fa44 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 800fb52:	4b0a      	ldr	r3, [pc, #40]	; (800fb7c <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 800fb54:	4404      	add	r4, r0
 800fb56:	f853 2b10 	ldr.w	r2, [r3], #16
 800fb5a:	1e60      	subs	r0, r4, #1
 800fb5c:	3a0c      	subs	r2, #12
 800fb5e:	4611      	mov	r1, r2
 800fb60:	3901      	subs	r1, #1
 800fb62:	d304      	bcc.n	800fb6e <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 800fb64:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fb68:	f800 6f01 	strb.w	r6, [r0, #1]!
 800fb6c:	e7f8      	b.n	800fb60 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 800fb6e:	4414      	add	r4, r2
 800fb70:	4a03      	ldr	r2, [pc, #12]	; (800fb80 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 800fb72:	1aa4      	subs	r4, r4, r2
 800fb74:	602c      	str	r4, [r5, #0]
 800fb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb78:	2000a5c0 	andcs	sl, r0, r0, asr #11
 800fb7c:	2000a398 	mulcs	r0, r8, r3
 800fb80:	2000a5c4 	andcs	sl, r0, r4, asr #11

0800fb84 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 800fb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb88:	4d3f      	ldr	r5, [pc, #252]	; (800fc88 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x104>)
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	682c      	ldr	r4, [r5, #0]
 800fb8e:	4680      	mov	r8, r0
 800fb90:	460f      	mov	r7, r1
 800fb92:	4616      	mov	r6, r2
 800fb94:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 800fb98:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800fb9c:	b11c      	cbz	r4, 800fba6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 800fb9e:	692a      	ldr	r2, [r5, #16]
 800fba0:	2a00      	cmp	r2, #0
 800fba2:	d16d      	bne.n	800fc80 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfc>
 800fba4:	2401      	movs	r4, #1
 800fba6:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800fbaa:	ea4f 1904 	mov.w	r9, r4, lsl #4
 800fbae:	8193      	strh	r3, [r2, #12]
 800fbb0:	f882 b00e 	strb.w	fp, [r2, #14]
 800fbb4:	2f00      	cmp	r7, #0
 800fbb6:	d153      	bne.n	800fc60 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xdc>
 800fbb8:	4630      	mov	r0, r6
 800fbba:	f7ff fd8b 	bl	800f6d4 <strlen>
 800fbbe:	4f33      	ldr	r7, [pc, #204]	; (800fc8c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	331c      	adds	r3, #28
 800fbc4:	4418      	add	r0, r3
 800fbc6:	f7ff fd85 	bl	800f6d4 <strlen>
 800fbca:	3001      	adds	r0, #1
 800fbcc:	f002 ff62 	bl	8012a94 <operator new[](unsigned int)>
 800fbd0:	6839      	ldr	r1, [r7, #0]
 800fbd2:	f845 0009 	str.w	r0, [r5, r9]
 800fbd6:	311c      	adds	r1, #28
 800fbd8:	f7ff fd91 	bl	800f6fe <strcpy.isra.0>
 800fbdc:	f855 0009 	ldr.w	r0, [r5, r9]
 800fbe0:	4631      	mov	r1, r6
 800fbe2:	f7ff fd94 	bl	800f70e <strcat.isra.0>
 800fbe6:	4631      	mov	r1, r6
 800fbe8:	4640      	mov	r0, r8
 800fbea:	f7ff fe0d 	bl	800f808 <MDNS::FindFirstDotFromRight(char const*) const>
 800fbee:	eb05 0709 	add.w	r7, r5, r9
 800fbf2:	4605      	mov	r5, r0
 800fbf4:	f7ff fd6e 	bl	800f6d4 <strlen>
 800fbf8:	300d      	adds	r0, #13
 800fbfa:	f002 ff4b 	bl	8012a94 <operator new[](unsigned int)>
 800fbfe:	4629      	mov	r1, r5
 800fc00:	6078      	str	r0, [r7, #4]
 800fc02:	f7ff fd7c 	bl	800f6fe <strcpy.isra.0>
 800fc06:	4922      	ldr	r1, [pc, #136]	; (800fc90 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f7ff fd80 	bl	800f70e <strcat.isra.0>
 800fc0e:	4921      	ldr	r1, [pc, #132]	; (800fc94 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 800fc10:	4b21      	ldr	r3, [pc, #132]	; (800fc98 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f1bb 0f01 	cmp.w	fp, #1
 800fc18:	bf18      	it	ne
 800fc1a:	4619      	movne	r1, r3
 800fc1c:	f7ff fd77 	bl	800f70e <strcat.isra.0>
 800fc20:	f1ba 0f00 	cmp.w	sl, #0
 800fc24:	d009      	beq.n	800fc3a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xb6>
 800fc26:	4650      	mov	r0, sl
 800fc28:	f7ff fd54 	bl	800f6d4 <strlen>
 800fc2c:	3001      	adds	r0, #1
 800fc2e:	f002 ff31 	bl	8012a94 <operator new[](unsigned int)>
 800fc32:	4651      	mov	r1, sl
 800fc34:	60b8      	str	r0, [r7, #8]
 800fc36:	f7ff fd62 	bl	800f6fe <strcpy.isra.0>
 800fc3a:	4621      	mov	r1, r4
 800fc3c:	4640      	mov	r0, r8
 800fc3e:	f7ff ff65 	bl	800fb0c <MDNS::CreateMDNSMessage(unsigned int)>
 800fc42:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fc46:	4915      	ldr	r1, [pc, #84]	; (800fc9c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 800fc48:	4815      	ldr	r0, [pc, #84]	; (800fca0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 800fc4a:	f851 2b04 	ldr.w	r2, [r1], #4
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	4b14      	ldr	r3, [pc, #80]	; (800fca4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 800fc52:	7800      	ldrb	r0, [r0, #0]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	b292      	uxth	r2, r2
 800fc58:	f7ff fc8a 	bl	800f570 <udp_send>
 800fc5c:	2001      	movs	r0, #1
 800fc5e:	e010      	b.n	800fc82 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 800fc60:	4638      	mov	r0, r7
 800fc62:	f7ff fd37 	bl	800f6d4 <strlen>
 800fc66:	9003      	str	r0, [sp, #12]
 800fc68:	4630      	mov	r0, r6
 800fc6a:	f7ff fd33 	bl	800f6d4 <strlen>
 800fc6e:	9b03      	ldr	r3, [sp, #12]
 800fc70:	4418      	add	r0, r3
 800fc72:	3001      	adds	r0, #1
 800fc74:	f002 ff0e 	bl	8012a94 <operator new[](unsigned int)>
 800fc78:	4639      	mov	r1, r7
 800fc7a:	f845 0009 	str.w	r0, [r5, r9]
 800fc7e:	e7ab      	b.n	800fbd8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x54>
 800fc80:	2000      	movs	r0, #0
 800fc82:	b005      	add	sp, #20
 800fc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc88:	2000a59c 	mulcs	r0, ip, r5
 800fc8c:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800fc90:	08015a23 	stmdaeq	r1, {r0, r1, r5, r9, fp, ip, lr}
 800fc94:	080169b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, fp, sp, lr}
 800fc98:	080169d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, fp, sp, lr}
 800fc9c:	2000a5c0 	andcs	sl, r0, r0, asr #11
 800fca0:	2000001c 	andcs	r0, r0, ip, lsl r0
 800fca4:	2000a394 	mulcs	r0, r4, r3

0800fca8 <MDNS::HandleRequest(unsigned short)>:
 800fca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcac:	4605      	mov	r5, r0
 800fcae:	2700      	movs	r7, #0
 800fcb0:	f04f 080c 	mov.w	r8, #12
 800fcb4:	b0c5      	sub	sp, #276	; 0x114
 800fcb6:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fd7c <MDNS::HandleRequest(unsigned short)+0xd4>
 800fcba:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 800fd80 <MDNS::HandleRequest(unsigned short)+0xd8>
 800fcbe:	9103      	str	r1, [sp, #12]
 800fcc0:	9b03      	ldr	r3, [sp, #12]
 800fcc2:	42bb      	cmp	r3, r7
 800fcc4:	d956      	bls.n	800fd74 <MDNS::HandleRequest(unsigned short)+0xcc>
 800fcc6:	f8da 1000 	ldr.w	r1, [sl]
 800fcca:	aa04      	add	r2, sp, #16
 800fccc:	4441      	add	r1, r8
 800fcce:	4628      	mov	r0, r5
 800fcd0:	f7ff fd54 	bl	800f77c <MDNS::DecodeDNSNameNotation(char const*, char*)>
 800fcd4:	f8da 2000 	ldr.w	r2, [sl]
 800fcd8:	4440      	add	r0, r8
 800fcda:	1813      	adds	r3, r2, r0
 800fcdc:	885b      	ldrh	r3, [r3, #2]
 800fcde:	f100 0804 	add.w	r8, r0, #4
 800fce2:	ba5b      	rev16	r3, r3
 800fce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d13e      	bne.n	800fd6a <MDNS::HandleRequest(unsigned short)+0xc2>
 800fcec:	5a14      	ldrh	r4, [r2, r0]
 800fcee:	4b25      	ldr	r3, [pc, #148]	; (800fd84 <MDNS::HandleRequest(unsigned short)+0xdc>)
 800fcf0:	ba64      	rev16	r4, r4
 800fcf2:	6818      	ldr	r0, [r3, #0]
 800fcf4:	a904      	add	r1, sp, #16
 800fcf6:	b2a4      	uxth	r4, r4
 800fcf8:	f7ff fcf4 	bl	800f6e4 <strcmp>
 800fcfc:	b970      	cbnz	r0, 800fd1c <MDNS::HandleRequest(unsigned short)+0x74>
 800fcfe:	2c01      	cmp	r4, #1
 800fd00:	d10c      	bne.n	800fd1c <MDNS::HandleRequest(unsigned short)+0x74>
 800fd02:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fd06:	4920      	ldr	r1, [pc, #128]	; (800fd88 <MDNS::HandleRequest(unsigned short)+0xe0>)
 800fd08:	4820      	ldr	r0, [pc, #128]	; (800fd8c <MDNS::HandleRequest(unsigned short)+0xe4>)
 800fd0a:	f851 2b04 	ldr.w	r2, [r1], #4
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	4b1f      	ldr	r3, [pc, #124]	; (800fd90 <MDNS::HandleRequest(unsigned short)+0xe8>)
 800fd12:	7800      	ldrb	r0, [r0, #0]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	b292      	uxth	r2, r2
 800fd18:	f7ff fc2a 	bl	800f570 <udp_send>
 800fd1c:	481d      	ldr	r0, [pc, #116]	; (800fd94 <MDNS::HandleRequest(unsigned short)+0xec>)
 800fd1e:	a904      	add	r1, sp, #16
 800fd20:	f7ff fce0 	bl	800f6e4 <strcmp>
 800fd24:	f04f 0900 	mov.w	r9, #0
 800fd28:	4e1b      	ldr	r6, [pc, #108]	; (800fd98 <MDNS::HandleRequest(unsigned short)+0xf0>)
 800fd2a:	9002      	str	r0, [sp, #8]
 800fd2c:	6833      	ldr	r3, [r6, #0]
 800fd2e:	b1c3      	cbz	r3, 800fd62 <MDNS::HandleRequest(unsigned short)+0xba>
 800fd30:	9b02      	ldr	r3, [sp, #8]
 800fd32:	b123      	cbz	r3, 800fd3e <MDNS::HandleRequest(unsigned short)+0x96>
 800fd34:	6870      	ldr	r0, [r6, #4]
 800fd36:	a904      	add	r1, sp, #16
 800fd38:	f7ff fcd4 	bl	800f6e4 <strcmp>
 800fd3c:	b988      	cbnz	r0, 800fd62 <MDNS::HandleRequest(unsigned short)+0xba>
 800fd3e:	2c0c      	cmp	r4, #12
 800fd40:	d10f      	bne.n	800fd62 <MDNS::HandleRequest(unsigned short)+0xba>
 800fd42:	4649      	mov	r1, r9
 800fd44:	4628      	mov	r0, r5
 800fd46:	f7ff fee1 	bl	800fb0c <MDNS::CreateMDNSMessage(unsigned int)>
 800fd4a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fd4e:	480f      	ldr	r0, [pc, #60]	; (800fd8c <MDNS::HandleRequest(unsigned short)+0xe4>)
 800fd50:	9300      	str	r3, [sp, #0]
 800fd52:	4b0f      	ldr	r3, [pc, #60]	; (800fd90 <MDNS::HandleRequest(unsigned short)+0xe8>)
 800fd54:	f8bb 2000 	ldrh.w	r2, [fp]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4910      	ldr	r1, [pc, #64]	; (800fd9c <MDNS::HandleRequest(unsigned short)+0xf4>)
 800fd5c:	7800      	ldrb	r0, [r0, #0]
 800fd5e:	f7ff fc07 	bl	800f570 <udp_send>
 800fd62:	3610      	adds	r6, #16
 800fd64:	f1b9 0f00 	cmp.w	r9, #0
 800fd68:	d001      	beq.n	800fd6e <MDNS::HandleRequest(unsigned short)+0xc6>
 800fd6a:	3701      	adds	r7, #1
 800fd6c:	e7a8      	b.n	800fcc0 <MDNS::HandleRequest(unsigned short)+0x18>
 800fd6e:	f04f 0901 	mov.w	r9, #1
 800fd72:	e7db      	b.n	800fd2c <MDNS::HandleRequest(unsigned short)+0x84>
 800fd74:	b045      	add	sp, #276	; 0x114
 800fd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd7a:	bf00      	nop
 800fd7c:	2000a7c8 	andcs	sl, r0, r8, asr #15
 800fd80:	2000a5c0 	andcs	sl, r0, r0, asr #11
 800fd84:	2000a7c4 	andcs	sl, r0, r4, asr #15
 800fd88:	2000a398 	mulcs	r0, r8, r3
 800fd8c:	2000001c 	andcs	r0, r0, ip, lsl r0
 800fd90:	2000a394 	mulcs	r0, r4, r3
 800fd94:	080169bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, fp, sp, lr}
 800fd98:	2000a59c 	mulcs	r0, ip, r5
 800fd9c:	2000a5c4 	andcs	sl, r0, r4, asr #11

0800fda0 <MDNS::Parse()>:
 800fda0:	4b08      	ldr	r3, [pc, #32]	; (800fdc4 <MDNS::Parse()+0x24>)
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	8853      	ldrh	r3, [r2, #2]
 800fda6:	ba5b      	rev16	r3, r3
 800fda8:	b299      	uxth	r1, r3
 800fdaa:	041b      	lsls	r3, r3, #16
 800fdac:	d408      	bmi.n	800fdc0 <MDNS::Parse()+0x20>
 800fdae:	0b8b      	lsrs	r3, r1, #14
 800fdb0:	d106      	bne.n	800fdc0 <MDNS::Parse()+0x20>
 800fdb2:	8891      	ldrh	r1, [r2, #4]
 800fdb4:	b28b      	uxth	r3, r1
 800fdb6:	b11b      	cbz	r3, 800fdc0 <MDNS::Parse()+0x20>
 800fdb8:	ba49      	rev16	r1, r1
 800fdba:	b289      	uxth	r1, r1
 800fdbc:	f7ff bf74 	b.w	800fca8 <MDNS::HandleRequest(unsigned short)>
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	2000a7c8 	andcs	sl, r0, r8, asr #15

0800fdc8 <MDNS::Run()>:
 800fdc8:	b538      	push	{r3, r4, r5, lr}
 800fdca:	4d0c      	ldr	r5, [pc, #48]	; (800fdfc <MDNS::Run()+0x34>)
 800fdcc:	4604      	mov	r4, r0
 800fdce:	480c      	ldr	r0, [pc, #48]	; (800fe00 <MDNS::Run()+0x38>)
 800fdd0:	462b      	mov	r3, r5
 800fdd2:	4a0c      	ldr	r2, [pc, #48]	; (800fe04 <MDNS::Run()+0x3c>)
 800fdd4:	490c      	ldr	r1, [pc, #48]	; (800fe08 <MDNS::Run()+0x40>)
 800fdd6:	7800      	ldrb	r0, [r0, #0]
 800fdd8:	f7ff fba4 	bl	800f524 <udp_recv2>
 800fddc:	4b0b      	ldr	r3, [pc, #44]	; (800fe0c <MDNS::Run()+0x44>)
 800fdde:	882a      	ldrh	r2, [r5, #0]
 800fde0:	8018      	strh	r0, [r3, #0]
 800fde2:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d106      	bne.n	800fdf8 <MDNS::Run()+0x30>
 800fdea:	280c      	cmp	r0, #12
 800fdec:	d904      	bls.n	800fdf8 <MDNS::Run()+0x30>
 800fdee:	4620      	mov	r0, r4
 800fdf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdf4:	f7ff bfd4 	b.w	800fda0 <MDNS::Parse()>
 800fdf8:	bd38      	pop	{r3, r4, r5, pc}
 800fdfa:	bf00      	nop
 800fdfc:	2000a390 	mulcs	r0, r0, r3
 800fe00:	2000001c 	andcs	r0, r0, ip, lsl r0
 800fe04:	2000a38c 	andcs	sl, r0, ip, lsl #7
 800fe08:	2000a7c8 	andcs	sl, r0, r8, asr #15
 800fe0c:	2000a5bc 			; <UNDEFINED> instruction: 0x2000a5bc

0800fe10 <MDNS::Print()>:
 800fe10:	b510      	push	{r4, lr}
 800fe12:	4816      	ldr	r0, [pc, #88]	; (800fe6c <MDNS::Print()+0x5c>)
 800fe14:	f003 f934 	bl	8013080 <printf>
 800fe18:	4b15      	ldr	r3, [pc, #84]	; (800fe70 <MDNS::Print()+0x60>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	d104      	bne.n	800fe2a <MDNS::Print()+0x1a>
 800fe20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe24:	4813      	ldr	r0, [pc, #76]	; (800fe74 <MDNS::Print()+0x64>)
 800fe26:	f003 b92b 	b.w	8013080 <printf>
 800fe2a:	4b13      	ldr	r3, [pc, #76]	; (800fe78 <MDNS::Print()+0x68>)
 800fe2c:	4c13      	ldr	r4, [pc, #76]	; (800fe7c <MDNS::Print()+0x6c>)
 800fe2e:	6819      	ldr	r1, [r3, #0]
 800fe30:	4813      	ldr	r0, [pc, #76]	; (800fe80 <MDNS::Print()+0x70>)
 800fe32:	f003 f925 	bl	8013080 <printf>
 800fe36:	6823      	ldr	r3, [r4, #0]
 800fe38:	b14b      	cbz	r3, 800fe4e <MDNS::Print()+0x3e>
 800fe3a:	4a12      	ldr	r2, [pc, #72]	; (800fe84 <MDNS::Print()+0x74>)
 800fe3c:	68a3      	ldr	r3, [r4, #8]
 800fe3e:	6861      	ldr	r1, [r4, #4]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	bf08      	it	eq
 800fe44:	4613      	moveq	r3, r2
 800fe46:	4810      	ldr	r0, [pc, #64]	; (800fe88 <MDNS::Print()+0x78>)
 800fe48:	89a2      	ldrh	r2, [r4, #12]
 800fe4a:	f003 f919 	bl	8013080 <printf>
 800fe4e:	6923      	ldr	r3, [r4, #16]
 800fe50:	b15b      	cbz	r3, 800fe6a <MDNS::Print()+0x5a>
 800fe52:	69a3      	ldr	r3, [r4, #24]
 800fe54:	4a0b      	ldr	r2, [pc, #44]	; (800fe84 <MDNS::Print()+0x74>)
 800fe56:	6961      	ldr	r1, [r4, #20]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	bf08      	it	eq
 800fe5c:	4613      	moveq	r3, r2
 800fe5e:	480a      	ldr	r0, [pc, #40]	; (800fe88 <MDNS::Print()+0x78>)
 800fe60:	8ba2      	ldrh	r2, [r4, #28]
 800fe62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe66:	f003 b90b 	b.w	8013080 <printf>
 800fe6a:	bd10      	pop	{r4, pc}
 800fe6c:	080169dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, fp, sp, lr}
 800fe70:	2000001c 	andcs	r0, r0, ip, lsl r0
 800fe74:	080169e2 	stmdaeq	r1, {r1, r5, r6, r7, r8, fp, sp, lr}
 800fe78:	2000a7c4 	andcs	sl, r0, r4, asr #15
 800fe7c:	2000a59c 	mulcs	r0, ip, r5
 800fe80:	080169f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, fp, sp, lr}
 800fe84:	08015d45 	stmdaeq	r1, {r0, r2, r6, r8, sl, fp, ip, lr}
 800fe88:	080169fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, fp, sp, lr}

0800fe8c <strncpy.constprop.0.isra.0>:
 800fe8c:	233f      	movs	r3, #63	; 0x3f
 800fe8e:	3901      	subs	r1, #1
 800fe90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fe94:	b92a      	cbnz	r2, 800fea2 <strncpy.constprop.0.isra.0+0x16>
 800fe96:	4403      	add	r3, r0
 800fe98:	4298      	cmp	r0, r3
 800fe9a:	d007      	beq.n	800feac <strncpy.constprop.0.isra.0+0x20>
 800fe9c:	f800 2b01 	strb.w	r2, [r0], #1
 800fea0:	e7fa      	b.n	800fe98 <strncpy.constprop.0.isra.0+0xc>
 800fea2:	3b01      	subs	r3, #1
 800fea4:	f800 2b01 	strb.w	r2, [r0], #1
 800fea8:	d1f2      	bne.n	800fe90 <strncpy.constprop.0.isra.0+0x4>
 800feaa:	4770      	bx	lr
 800feac:	4770      	bx	lr
	...

0800feb0 <Network::Network()>:
 800feb0:	4a11      	ldr	r2, [pc, #68]	; (800fef8 <Network::Network()+0x48>)
 800feb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800feb6:	6010      	str	r0, [r2, #0]
 800feb8:	2201      	movs	r2, #1
 800feba:	2300      	movs	r3, #0
 800febc:	e9c0 1200 	strd	r1, r2, [r0]
 800fec0:	2200      	movs	r2, #0
 800fec2:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 800fec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800feca:	490c      	ldr	r1, [pc, #48]	; (800fefc <Network::Network()+0x4c>)
 800fecc:	60c2      	str	r2, [r0, #12]
 800fece:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 800fed2:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 800fed6:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 800feda:	6083      	str	r3, [r0, #8]
 800fedc:	6183      	str	r3, [r0, #24]
 800fede:	7703      	strb	r3, [r0, #28]
 800fee0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 800fee4:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 800fee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800feec:	f802 3b01 	strb.w	r3, [r2], #1
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d1f9      	bne.n	800fee8 <Network::Network()+0x38>
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop
 800fef8:	2000a7cc 	andcs	sl, r0, ip, asr #15
 800fefc:	08016a07 	stmdaeq	r1, {r0, r1, r2, r9, fp, sp, lr}

0800ff00 <Network::Shutdown()>:
 800ff00:	b508      	push	{r3, lr}
 800ff02:	30b8      	adds	r0, #184	; 0xb8
 800ff04:	f001 feda 	bl	8011cbc <NetworkDisplay::ShowShutdown()>
 800ff08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ff0c:	f7fe bd74 	b.w	800e9f8 <net_shutdown>

0800ff10 <Network::Begin(unsigned short)>:
 800ff10:	4608      	mov	r0, r1
 800ff12:	f7ff ba97 	b.w	800f444 <udp_bind>

0800ff16 <Network::End(unsigned short)>:
 800ff16:	4608      	mov	r0, r1
 800ff18:	f7ff baae 	b.w	800f478 <udp_unbind>

0800ff1c <Network::MacAddressCopyTo(unsigned char*)>:
 800ff1c:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 800ff20:	3901      	subs	r1, #1
 800ff22:	30a2      	adds	r0, #162	; 0xa2
 800ff24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff28:	4283      	cmp	r3, r0
 800ff2a:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ff2e:	d1f9      	bne.n	800ff24 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 800ff30:	4770      	bx	lr

0800ff32 <Network::JoinGroup(int, unsigned int)>:
 800ff32:	4610      	mov	r0, r2
 800ff34:	f001 b8fe 	b.w	8011134 <igmp_join>

0800ff38 <Network::LeaveGroup(int, unsigned int)>:
 800ff38:	4610      	mov	r0, r2
 800ff3a:	f001 b927 	b.w	801118c <igmp_leave>

0800ff3e <Network::SetDefaultIp()>:
 800ff3e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800ff42:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 800ff46:	041b      	lsls	r3, r3, #16
 800ff48:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ff4c:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 800ff50:	3302      	adds	r3, #2
 800ff52:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800ff56:	22ff      	movs	r2, #255	; 0xff
 800ff58:	6103      	str	r3, [r0, #16]
 800ff5a:	e9c0 3205 	strd	r3, r2, [r0, #20]
 800ff5e:	4770      	bx	lr

0800ff60 <Network::Init(NetworkParamsStore*)>:
 800ff60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff64:	b08b      	sub	sp, #44	; 0x2c
 800ff66:	4604      	mov	r4, r0
 800ff68:	a806      	add	r0, sp, #24
 800ff6a:	f000 fa57 	bl	801041c <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800ff6e:	a806      	add	r0, sp, #24
 800ff70:	f000 fa64 	bl	801043c <NetworkParams::Load()>
 800ff74:	b110      	cbz	r0, 800ff7c <Network::Init(NetworkParamsStore*)+0x1c>
 800ff76:	a806      	add	r0, sp, #24
 800ff78:	f000 fc49 	bl	801080e <NetworkParams::Dump()>
 800ff7c:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 800ff80:	f8df 8224 	ldr.w	r8, [pc, #548]	; 80101a8 <Network::Init(NetworkParamsStore*)+0x248>
 800ff84:	4628      	mov	r0, r5
 800ff86:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 800ff8a:	f001 fe7f 	bl	8011c8c <NetworkDisplay::ShowEmacStart()>
 800ff8e:	4638      	mov	r0, r7
 800ff90:	f003 ff40 	bl	8013e14 <emac_start>
 800ff94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff98:	f104 061c 	add.w	r6, r4, #28
 800ff9c:	9307      	str	r3, [sp, #28]
 800ff9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ffa2:	9308      	str	r3, [sp, #32]
 800ffa4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ffa8:	9309      	str	r3, [sp, #36]	; 0x24
 800ffaa:	f898 3014 	ldrb.w	r3, [r8, #20]
 800ffae:	7063      	strb	r3, [r4, #1]
 800ffb0:	f8d8 3000 	ldr.w	r3, [r8]
 800ffb4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 800ffb8:	bf18      	it	ne
 800ffba:	f8d8 2055 	ldrne.w	r2, [r8, #85]	; 0x55
 800ffbe:	061b      	lsls	r3, r3, #24
 800ffc0:	bf58      	it	pl
 800ffc2:	2300      	movpl	r3, #0
 800ffc4:	60a2      	str	r2, [r4, #8]
 800ffc6:	bf48      	it	mi
 800ffc8:	f8d8 3059 	ldrmi.w	r3, [r8, #89]	; 0x59
 800ffcc:	60e3      	str	r3, [r4, #12]
 800ffce:	f898 3015 	ldrb.w	r3, [r8, #21]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d15e      	bne.n	8010094 <Network::Init(NetworkParamsStore*)+0x134>
 800ffd6:	4632      	mov	r2, r6
 800ffd8:	4874      	ldr	r0, [pc, #464]	; (80101ac <Network::Init(NetworkParamsStore*)+0x24c>)
 800ffda:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ffde:	f103 0c01 	add.w	ip, r3, #1
 800ffe2:	b119      	cbz	r1, 800ffec <Network::Init(NetworkParamsStore*)+0x8c>
 800ffe4:	4663      	mov	r3, ip
 800ffe6:	f802 1b01 	strb.w	r1, [r2], #1
 800ffea:	e7f6      	b.n	800ffda <Network::Init(NetworkParamsStore*)+0x7a>
 800ffec:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 800fff0:	18e1      	adds	r1, r4, r3
 800fff2:	0910      	lsrs	r0, r2, #4
 800fff4:	2a9f      	cmp	r2, #159	; 0x9f
 800fff6:	f002 020f 	and.w	r2, r2, #15
 800fffa:	bf94      	ite	ls
 800fffc:	3030      	addls	r0, #48	; 0x30
 800fffe:	3037      	addhi	r0, #55	; 0x37
 8010000:	2a09      	cmp	r2, #9
 8010002:	bf94      	ite	ls
 8010004:	3230      	addls	r2, #48	; 0x30
 8010006:	3237      	addhi	r2, #55	; 0x37
 8010008:	44a4      	add	ip, r4
 801000a:	7708      	strb	r0, [r1, #28]
 801000c:	f88c 201c 	strb.w	r2, [ip, #28]
 8010010:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 8010014:	f103 0e02 	add.w	lr, r3, #2
 8010018:	0910      	lsrs	r0, r2, #4
 801001a:	2a9f      	cmp	r2, #159	; 0x9f
 801001c:	f002 020f 	and.w	r2, r2, #15
 8010020:	bf94      	ite	ls
 8010022:	3030      	addls	r0, #48	; 0x30
 8010024:	3037      	addhi	r0, #55	; 0x37
 8010026:	f103 0903 	add.w	r9, r3, #3
 801002a:	2a09      	cmp	r2, #9
 801002c:	44a6      	add	lr, r4
 801002e:	f88e 001c 	strb.w	r0, [lr, #28]
 8010032:	bf94      	ite	ls
 8010034:	3230      	addls	r2, #48	; 0x30
 8010036:	3237      	addhi	r2, #55	; 0x37
 8010038:	eb04 0009 	add.w	r0, r4, r9
 801003c:	7702      	strb	r2, [r0, #28]
 801003e:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8010042:	f103 0c04 	add.w	ip, r3, #4
 8010046:	0910      	lsrs	r0, r2, #4
 8010048:	2a9f      	cmp	r2, #159	; 0x9f
 801004a:	f002 020f 	and.w	r2, r2, #15
 801004e:	bf94      	ite	ls
 8010050:	3030      	addls	r0, #48	; 0x30
 8010052:	3037      	addhi	r0, #55	; 0x37
 8010054:	3305      	adds	r3, #5
 8010056:	2a09      	cmp	r2, #9
 8010058:	4423      	add	r3, r4
 801005a:	44a4      	add	ip, r4
 801005c:	bf94      	ite	ls
 801005e:	3230      	addls	r2, #48	; 0x30
 8010060:	3237      	addhi	r2, #55	; 0x37
 8010062:	f88c 001c 	strb.w	r0, [ip, #28]
 8010066:	771a      	strb	r2, [r3, #28]
 8010068:	2300      	movs	r3, #0
 801006a:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 801006e:	7863      	ldrb	r3, [r4, #1]
 8010070:	b95b      	cbnz	r3, 801008a <Network::Init(NetworkParamsStore*)+0x12a>
 8010072:	9b07      	ldr	r3, [sp, #28]
 8010074:	b9b3      	cbnz	r3, 80100a4 <Network::Init(NetworkParamsStore*)+0x144>
 8010076:	4620      	mov	r0, r4
 8010078:	f7ff ff61 	bl	800ff3e <Network::SetDefaultIp()>
 801007c:	6923      	ldr	r3, [r4, #16]
 801007e:	69a2      	ldr	r2, [r4, #24]
 8010080:	9307      	str	r3, [sp, #28]
 8010082:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010086:	7863      	ldrb	r3, [r4, #1]
 8010088:	b19b      	cbz	r3, 80100b2 <Network::Init(NetworkParamsStore*)+0x152>
 801008a:	2101      	movs	r1, #1
 801008c:	4628      	mov	r0, r5
 801008e:	f001 fe1b 	bl	8011cc8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010092:	e00e      	b.n	80100b2 <Network::Init(NetworkParamsStore*)+0x152>
 8010094:	4630      	mov	r0, r6
 8010096:	4946      	ldr	r1, [pc, #280]	; (80101b0 <Network::Init(NetworkParamsStore*)+0x250>)
 8010098:	f7ff fef8 	bl	800fe8c <strncpy.constprop.0.isra.0>
 801009c:	2300      	movs	r3, #0
 801009e:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 80100a2:	e7e4      	b.n	801006e <Network::Init(NetworkParamsStore*)+0x10e>
 80100a4:	69a1      	ldr	r1, [r4, #24]
 80100a6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80100aa:	4053      	eors	r3, r2
 80100ac:	420b      	tst	r3, r1
 80100ae:	d000      	beq.n	80100b2 <Network::Init(NetworkParamsStore*)+0x152>
 80100b0:	9209      	str	r2, [sp, #36]	; 0x24
 80100b2:	1ce3      	adds	r3, r4, #3
 80100b4:	f104 0901 	add.w	r9, r4, #1
 80100b8:	9302      	str	r3, [sp, #8]
 80100ba:	9300      	str	r3, [sp, #0]
 80100bc:	4632      	mov	r2, r6
 80100be:	464b      	mov	r3, r9
 80100c0:	4638      	mov	r0, r7
 80100c2:	a907      	add	r1, sp, #28
 80100c4:	f7fe fc48 	bl	800e958 <net_init>
 80100c8:	78e3      	ldrb	r3, [r4, #3]
 80100ca:	b11b      	cbz	r3, 80100d4 <Network::Init(NetworkParamsStore*)+0x174>
 80100cc:	2104      	movs	r1, #4
 80100ce:	4628      	mov	r0, r5
 80100d0:	f001 fdfa 	bl	8011cc8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80100d4:	f898 3014 	ldrb.w	r3, [r8, #20]
 80100d8:	f898 a05d 	ldrb.w	sl, [r8, #93]	; 0x5d
 80100dc:	9304      	str	r3, [sp, #16]
 80100de:	233c      	movs	r3, #60	; 0x3c
 80100e0:	fb03 f30a 	mul.w	r3, r3, sl
 80100e4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80101b4 <Network::Init(NetworkParamsStore*)+0x254>
 80100e8:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 80101b8 <Network::Init(NetworkParamsStore*)+0x258>
 80100ec:	9303      	str	r3, [sp, #12]
 80100ee:	78e3      	ldrb	r3, [r4, #3]
 80100f0:	b95b      	cbnz	r3, 801010a <Network::Init(NetworkParamsStore*)+0x1aa>
 80100f2:	9b07      	ldr	r3, [sp, #28]
 80100f4:	4628      	mov	r0, r5
 80100f6:	6123      	str	r3, [r4, #16]
 80100f8:	9b08      	ldr	r3, [sp, #32]
 80100fa:	61a3      	str	r3, [r4, #24]
 80100fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100fe:	6163      	str	r3, [r4, #20]
 8010100:	f001 fdca 	bl	8011c98 <NetworkDisplay::ShowIp()>
 8010104:	b00b      	add	sp, #44	; 0x2c
 8010106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801010a:	f1ba 0f00 	cmp.w	sl, #0
 801010e:	d0f0      	beq.n	80100f2 <Network::Init(NetworkParamsStore*)+0x192>
 8010110:	9b04      	ldr	r3, [sp, #16]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d0ed      	beq.n	80100f2 <Network::Init(NetworkParamsStore*)+0x192>
 8010116:	2104      	movs	r1, #4
 8010118:	f8d8 0000 	ldr.w	r0, [r8]
 801011c:	f002 fbd4 	bl	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 8010120:	2103      	movs	r1, #3
 8010122:	4628      	mov	r0, r5
 8010124:	f001 fdd0 	bl	8011cc8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010128:	2000      	movs	r0, #0
 801012a:	f003 f8df 	bl	80132ec <time>
 801012e:	9005      	str	r0, [sp, #20]
 8010130:	2000      	movs	r0, #0
 8010132:	f003 f8db 	bl	80132ec <time>
 8010136:	9b05      	ldr	r3, [sp, #20]
 8010138:	1ac0      	subs	r0, r0, r3
 801013a:	9b03      	ldr	r3, [sp, #12]
 801013c:	4298      	cmp	r0, r3
 801013e:	da1a      	bge.n	8010176 <Network::Init(NetworkParamsStore*)+0x216>
 8010140:	f8d8 3000 	ldr.w	r3, [r8]
 8010144:	491d      	ldr	r1, [pc, #116]	; (80101bc <Network::Init(NetworkParamsStore*)+0x25c>)
 8010146:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801014a:	f1bc 0f00 	cmp.w	ip, #0
 801014e:	d0ef      	beq.n	8010130 <Network::Init(NetworkParamsStore*)+0x1d0>
 8010150:	6808      	ldr	r0, [r1, #0]
 8010152:	695a      	ldr	r2, [r3, #20]
 8010154:	1a80      	subs	r0, r0, r2
 8010156:	4584      	cmp	ip, r0
 8010158:	d8ea      	bhi.n	8010130 <Network::Init(NetworkParamsStore*)+0x1d0>
 801015a:	6808      	ldr	r0, [r1, #0]
 801015c:	6158      	str	r0, [r3, #20]
 801015e:	6918      	ldr	r0, [r3, #16]
 8010160:	2801      	cmp	r0, #1
 8010162:	f080 0201 	eor.w	r2, r0, #1
 8010166:	611a      	str	r2, [r3, #16]
 8010168:	bf16      	itet	ne
 801016a:	2301      	movne	r3, #1
 801016c:	f8cb 0014 	streq.w	r0, [fp, #20]
 8010170:	f8cb 3010 	strne.w	r3, [fp, #16]
 8010174:	e7dc      	b.n	8010130 <Network::Init(NetworkParamsStore*)+0x1d0>
 8010176:	2101      	movs	r1, #1
 8010178:	4628      	mov	r0, r5
 801017a:	f001 fda5 	bl	8011cc8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801017e:	2101      	movs	r1, #1
 8010180:	f8d8 0000 	ldr.w	r0, [r8]
 8010184:	f002 fba0 	bl	80128c8 <LedBlink::SetMode(ledblink::Mode)>
 8010188:	2301      	movs	r3, #1
 801018a:	7063      	strb	r3, [r4, #1]
 801018c:	2300      	movs	r3, #0
 801018e:	70e3      	strb	r3, [r4, #3]
 8010190:	9b02      	ldr	r3, [sp, #8]
 8010192:	4632      	mov	r2, r6
 8010194:	9300      	str	r3, [sp, #0]
 8010196:	4638      	mov	r0, r7
 8010198:	464b      	mov	r3, r9
 801019a:	a907      	add	r1, sp, #28
 801019c:	f7fe fbdc 	bl	800e958 <net_init>
 80101a0:	7863      	ldrb	r3, [r4, #1]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d0a3      	beq.n	80100ee <Network::Init(NetworkParamsStore*)+0x18e>
 80101a6:	e7a4      	b.n	80100f2 <Network::Init(NetworkParamsStore*)+0x192>
 80101a8:	2000a7d0 	ldrdcs	sl, [r0], -r0
 80101ac:	08016a0c 	stmdaeq	r1, {r2, r3, r9, fp, sp, lr}
 80101b0:	2000a7e5 	andcs	sl, r0, r5, ror #15
 80101b4:	2000aef0 	strdcs	sl, [r0], -r0
 80101b8:	40011000 	andmi	r1, r1, r0
 80101bc:	2000af0c 	andcs	sl, r0, ip, lsl #30

080101c0 <Network::SetIp(unsigned int)>:
 80101c0:	7843      	ldrb	r3, [r0, #1]
 80101c2:	b570      	push	{r4, r5, r6, lr}
 80101c4:	4604      	mov	r4, r0
 80101c6:	460d      	mov	r5, r1
 80101c8:	2600      	movs	r6, #0
 80101ca:	b113      	cbz	r3, 80101d2 <Network::SetIp(unsigned int)+0x12>
 80101cc:	7046      	strb	r6, [r0, #1]
 80101ce:	f7fe fc65 	bl	800ea9c <net_dhcp_release>
 80101d2:	70e6      	strb	r6, [r4, #3]
 80101d4:	b975      	cbnz	r5, 80101f4 <Network::SetIp(unsigned int)+0x34>
 80101d6:	4620      	mov	r0, r4
 80101d8:	f7ff feb1 	bl	800ff3e <Network::SetDefaultIp()>
 80101dc:	6920      	ldr	r0, [r4, #16]
 80101de:	f7fe fc19 	bl	800ea14 <net_set_ip>
 80101e2:	34b8      	adds	r4, #184	; 0xb8
 80101e4:	4620      	mov	r0, r4
 80101e6:	f001 fd57 	bl	8011c98 <NetworkDisplay::ShowIp()>
 80101ea:	4620      	mov	r0, r4
 80101ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101f0:	f001 bd58 	b.w	8011ca4 <NetworkDisplay::ShowNetMask()>
 80101f4:	4628      	mov	r0, r5
 80101f6:	f7fe fc0d 	bl	800ea14 <net_set_ip>
 80101fa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80101fe:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010202:	2800      	cmp	r0, #0
 8010204:	d0ed      	beq.n	80101e2 <Network::SetIp(unsigned int)+0x22>
 8010206:	6803      	ldr	r3, [r0, #0]
 8010208:	4629      	mov	r1, r5
 801020a:	689b      	ldr	r3, [r3, #8]
 801020c:	4798      	blx	r3
 801020e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8010212:	2100      	movs	r1, #0
 8010214:	6803      	ldr	r3, [r0, #0]
 8010216:	699b      	ldr	r3, [r3, #24]
 8010218:	4798      	blx	r3
 801021a:	e7e2      	b.n	80101e2 <Network::SetIp(unsigned int)+0x22>

0801021c <Network::SetNetmask(unsigned int)>:
 801021c:	6982      	ldr	r2, [r0, #24]
 801021e:	b510      	push	{r4, lr}
 8010220:	428a      	cmp	r2, r1
 8010222:	4604      	mov	r4, r0
 8010224:	d00f      	beq.n	8010246 <Network::SetNetmask(unsigned int)+0x2a>
 8010226:	6181      	str	r1, [r0, #24]
 8010228:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 801022c:	b110      	cbz	r0, 8010234 <Network::SetNetmask(unsigned int)+0x18>
 801022e:	6803      	ldr	r3, [r0, #0]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	4798      	blx	r3
 8010234:	34b8      	adds	r4, #184	; 0xb8
 8010236:	4620      	mov	r0, r4
 8010238:	f001 fd2e 	bl	8011c98 <NetworkDisplay::ShowIp()>
 801023c:	4620      	mov	r0, r4
 801023e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010242:	f001 bd2f 	b.w	8011ca4 <NetworkDisplay::ShowNetMask()>
 8010246:	bd10      	pop	{r4, pc}

08010248 <Network::SetGatewayIp(unsigned int)>:
 8010248:	b538      	push	{r3, r4, r5, lr}
 801024a:	6943      	ldr	r3, [r0, #20]
 801024c:	4604      	mov	r4, r0
 801024e:	428b      	cmp	r3, r1
 8010250:	460d      	mov	r5, r1
 8010252:	d00f      	beq.n	8010274 <Network::SetGatewayIp(unsigned int)+0x2c>
 8010254:	4608      	mov	r0, r1
 8010256:	f7fe fbed 	bl	800ea34 <net_set_gw>
 801025a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 801025e:	b118      	cbz	r0, 8010268 <Network::SetGatewayIp(unsigned int)+0x20>
 8010260:	6803      	ldr	r3, [r0, #0]
 8010262:	4629      	mov	r1, r5
 8010264:	691b      	ldr	r3, [r3, #16]
 8010266:	4798      	blx	r3
 8010268:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 801026c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010270:	f001 bd1e 	b.w	8011cb0 <NetworkDisplay::ShowGatewayIp()>
 8010274:	bd38      	pop	{r3, r4, r5, pc}
	...

08010278 <Network::EnableDhcp()>:
 8010278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801027a:	4e23      	ldr	r6, [pc, #140]	; (8010308 <Network::EnableDhcp()+0x90>)
 801027c:	4604      	mov	r4, r0
 801027e:	6833      	ldr	r3, [r6, #0]
 8010280:	b085      	sub	sp, #20
 8010282:	791f      	ldrb	r7, [r3, #4]
 8010284:	b137      	cbz	r7, 8010294 <Network::EnableDhcp()+0x1c>
 8010286:	2200      	movs	r2, #0
 8010288:	2104      	movs	r1, #4
 801028a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801028e:	711a      	strb	r2, [r3, #4]
 8010290:	f003 f9f0 	bl	8013674 <fwdgt_config>
 8010294:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8010298:	2101      	movs	r1, #1
 801029a:	4628      	mov	r0, r5
 801029c:	f001 fd14 	bl	8011cc8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80102a0:	1ce2      	adds	r2, r4, #3
 80102a2:	f104 011c 	add.w	r1, r4, #28
 80102a6:	a801      	add	r0, sp, #4
 80102a8:	f7fe fbcc 	bl	800ea44 <net_set_dhcp>
 80102ac:	78e3      	ldrb	r3, [r4, #3]
 80102ae:	7060      	strb	r0, [r4, #1]
 80102b0:	b343      	cbz	r3, 8010304 <Network::EnableDhcp()+0x8c>
 80102b2:	2104      	movs	r1, #4
 80102b4:	4628      	mov	r0, r5
 80102b6:	f001 fd07 	bl	8011cc8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80102ba:	b16f      	cbz	r7, 80102d8 <Network::EnableDhcp()+0x60>
 80102bc:	2102      	movs	r1, #2
 80102be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80102c2:	6836      	ldr	r6, [r6, #0]
 80102c4:	f003 f9d6 	bl	8013674 <fwdgt_config>
 80102c8:	2801      	cmp	r0, #1
 80102ca:	bf0c      	ite	eq
 80102cc:	2301      	moveq	r3, #1
 80102ce:	2300      	movne	r3, #0
 80102d0:	7133      	strb	r3, [r6, #4]
 80102d2:	d101      	bne.n	80102d8 <Network::EnableDhcp()+0x60>
 80102d4:	f003 f9be 	bl	8013654 <fwdgt_enable>
 80102d8:	9b01      	ldr	r3, [sp, #4]
 80102da:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80102de:	6123      	str	r3, [r4, #16]
 80102e0:	9b02      	ldr	r3, [sp, #8]
 80102e2:	61a3      	str	r3, [r4, #24]
 80102e4:	9b03      	ldr	r3, [sp, #12]
 80102e6:	6163      	str	r3, [r4, #20]
 80102e8:	b118      	cbz	r0, 80102f2 <Network::EnableDhcp()+0x7a>
 80102ea:	6803      	ldr	r3, [r0, #0]
 80102ec:	7861      	ldrb	r1, [r4, #1]
 80102ee:	699b      	ldr	r3, [r3, #24]
 80102f0:	4798      	blx	r3
 80102f2:	4628      	mov	r0, r5
 80102f4:	f001 fcd0 	bl	8011c98 <NetworkDisplay::ShowIp()>
 80102f8:	4628      	mov	r0, r5
 80102fa:	f001 fcd3 	bl	8011ca4 <NetworkDisplay::ShowNetMask()>
 80102fe:	7860      	ldrb	r0, [r4, #1]
 8010300:	b005      	add	sp, #20
 8010302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010304:	2102      	movs	r1, #2
 8010306:	e7d5      	b.n	80102b4 <Network::EnableDhcp()+0x3c>
 8010308:	2000aef4 	strdcs	sl, [r0], -r4

0801030c <Network::Print()>:
 801030c:	b530      	push	{r4, r5, lr}
 801030e:	4604      	mov	r4, r0
 8010310:	b085      	sub	sp, #20
 8010312:	4832      	ldr	r0, [pc, #200]	; (80103dc <Network::Print()+0xd0>)
 8010314:	f002 feb4 	bl	8013080 <printf>
 8010318:	f104 011c 	add.w	r1, r4, #28
 801031c:	4830      	ldr	r0, [pc, #192]	; (80103e0 <Network::Print()+0xd4>)
 801031e:	f002 feaf 	bl	8013080 <printf>
 8010322:	6861      	ldr	r1, [r4, #4]
 8010324:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 8010328:	482e      	ldr	r0, [pc, #184]	; (80103e4 <Network::Print()+0xd8>)
 801032a:	f002 fea9 	bl	8013080 <printf>
 801032e:	69a0      	ldr	r0, [r4, #24]
 8010330:	f7f6 ff26 	bl	8007180 <__popcountsi2>
 8010334:	6925      	ldr	r5, [r4, #16]
 8010336:	9001      	str	r0, [sp, #4]
 8010338:	0e2b      	lsrs	r3, r5, #24
 801033a:	9300      	str	r3, [sp, #0]
 801033c:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8010340:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8010344:	b2e9      	uxtb	r1, r5
 8010346:	4828      	ldr	r0, [pc, #160]	; (80103e8 <Network::Print()+0xdc>)
 8010348:	f002 fe9a 	bl	8013080 <printf>
 801034c:	69a1      	ldr	r1, [r4, #24]
 801034e:	4827      	ldr	r0, [pc, #156]	; (80103ec <Network::Print()+0xe0>)
 8010350:	0e0b      	lsrs	r3, r1, #24
 8010352:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010356:	9300      	str	r3, [sp, #0]
 8010358:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801035c:	b2c9      	uxtb	r1, r1
 801035e:	f002 fe8f 	bl	8013080 <printf>
 8010362:	6961      	ldr	r1, [r4, #20]
 8010364:	4822      	ldr	r0, [pc, #136]	; (80103f0 <Network::Print()+0xe4>)
 8010366:	0e0b      	lsrs	r3, r1, #24
 8010368:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801036c:	9300      	str	r3, [sp, #0]
 801036e:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010372:	b2c9      	uxtb	r1, r1
 8010374:	f002 fe84 	bl	8013080 <printf>
 8010378:	69a3      	ldr	r3, [r4, #24]
 801037a:	6921      	ldr	r1, [r4, #16]
 801037c:	481d      	ldr	r0, [pc, #116]	; (80103f4 <Network::Print()+0xe8>)
 801037e:	ea61 0103 	orn	r1, r1, r3
 8010382:	0e0b      	lsrs	r3, r1, #24
 8010384:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010388:	9300      	str	r3, [sp, #0]
 801038a:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801038e:	b2c9      	uxtb	r1, r1
 8010390:	f002 fe76 	bl	8013080 <printf>
 8010394:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8010398:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 801039c:	9302      	str	r3, [sp, #8]
 801039e:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 80103a2:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 80103a6:	9301      	str	r3, [sp, #4]
 80103a8:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 80103ac:	4812      	ldr	r0, [pc, #72]	; (80103f8 <Network::Print()+0xec>)
 80103ae:	9300      	str	r3, [sp, #0]
 80103b0:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 80103b4:	f002 fe64 	bl	8013080 <printf>
 80103b8:	4b10      	ldr	r3, [pc, #64]	; (80103fc <Network::Print()+0xf0>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	78da      	ldrb	r2, [r3, #3]
 80103be:	b952      	cbnz	r2, 80103d6 <Network::Print()+0xca>
 80103c0:	785b      	ldrb	r3, [r3, #1]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	bf14      	ite	ne
 80103c6:	2144      	movne	r1, #68	; 0x44
 80103c8:	2153      	moveq	r1, #83	; 0x53
 80103ca:	480d      	ldr	r0, [pc, #52]	; (8010400 <Network::Print()+0xf4>)
 80103cc:	b005      	add	sp, #20
 80103ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80103d2:	f002 be55 	b.w	8013080 <printf>
 80103d6:	215a      	movs	r1, #90	; 0x5a
 80103d8:	e7f7      	b.n	80103ca <Network::Print()+0xbe>
 80103da:	bf00      	nop
 80103dc:	08016a18 	stmdaeq	r1, {r3, r4, r9, fp, sp, lr}
 80103e0:	08016a21 	stmdaeq	r1, {r0, r5, r9, fp, sp, lr}
 80103e4:	08016a32 	stmdaeq	r1, {r1, r4, r5, r9, fp, sp, lr}
 80103e8:	08016a47 	stmdaeq	r1, {r0, r1, r2, r6, r9, fp, sp, lr}
 80103ec:	08016a64 	stmdaeq	r1, {r2, r5, r6, r9, fp, sp, lr}
 80103f0:	08016a7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, fp, sp, lr}
 80103f4:	08016a98 	stmdaeq	r1, {r3, r4, r7, r9, fp, sp, lr}
 80103f8:	08016ab2 	stmdaeq	r1, {r1, r4, r5, r7, r9, fp, sp, lr}
 80103fc:	2000a7cc 	andcs	sl, r0, ip, asr #15
 8010400:	08016ade 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r9, fp, sp, lr}

08010404 <Network::TcpBegin(unsigned short)>:
 8010404:	4608      	mov	r0, r1
 8010406:	f7fe becb 	b.w	800f1a0 <tcp_begin>

0801040a <Network::TcpRead(int, unsigned char const**)>:
 801040a:	4608      	mov	r0, r1
 801040c:	4611      	mov	r1, r2
 801040e:	f7fe bf05 	b.w	800f21c <tcp_read>

08010412 <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 8010412:	4608      	mov	r0, r1
 8010414:	4611      	mov	r1, r2
 8010416:	461a      	mov	r2, r3
 8010418:	f7fe bedc 	b.w	800f1d4 <tcp_write>

0801041c <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 801041c:	4b06      	ldr	r3, [pc, #24]	; (8010438 <NetworkParams::NetworkParams(NetworkParamsStore*)+0x1c>)
 801041e:	b510      	push	{r4, lr}
 8010420:	225e      	movs	r2, #94	; 0x5e
 8010422:	4604      	mov	r4, r0
 8010424:	6001      	str	r1, [r0, #0]
 8010426:	2100      	movs	r1, #0
 8010428:	4618      	mov	r0, r3
 801042a:	f002 fc07 	bl	8012c3c <memset>
 801042e:	2201      	movs	r2, #1
 8010430:	7502      	strb	r2, [r0, #20]
 8010432:	4620      	mov	r0, r4
 8010434:	bd10      	pop	{r4, pc}
 8010436:	bf00      	nop
 8010438:	2000a7d0 	ldrdcs	sl, [r0], -r0

0801043c <NetworkParams::Load()>:
 801043c:	b508      	push	{r3, lr}
 801043e:	2300      	movs	r3, #0
 8010440:	4905      	ldr	r1, [pc, #20]	; (8010458 <NetworkParams::Load()+0x1c>)
 8010442:	6800      	ldr	r0, [r0, #0]
 8010444:	700b      	strb	r3, [r1, #0]
 8010446:	704b      	strb	r3, [r1, #1]
 8010448:	708b      	strb	r3, [r1, #2]
 801044a:	70cb      	strb	r3, [r1, #3]
 801044c:	b118      	cbz	r0, 8010456 <NetworkParams::Load()+0x1a>
 801044e:	6803      	ldr	r3, [r0, #0]
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	4798      	blx	r3
 8010454:	2001      	movs	r0, #1
 8010456:	bd08      	pop	{r3, pc}
 8010458:	2000a7d0 	ldrdcs	sl, [r0], -r0

0801045c <NetworkParams::Load(char const*, unsigned int)>:
 801045c:	6803      	ldr	r3, [r0, #0]
 801045e:	b1eb      	cbz	r3, 801049c <NetworkParams::Load(char const*, unsigned int)+0x40>
 8010460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010462:	2300      	movs	r3, #0
 8010464:	460e      	mov	r6, r1
 8010466:	4617      	mov	r7, r2
 8010468:	4605      	mov	r5, r0
 801046a:	4c0d      	ldr	r4, [pc, #52]	; (80104a0 <NetworkParams::Load(char const*, unsigned int)+0x44>)
 801046c:	4602      	mov	r2, r0
 801046e:	490d      	ldr	r1, [pc, #52]	; (80104a4 <NetworkParams::Load(char const*, unsigned int)+0x48>)
 8010470:	4668      	mov	r0, sp
 8010472:	7023      	strb	r3, [r4, #0]
 8010474:	7063      	strb	r3, [r4, #1]
 8010476:	70a3      	strb	r3, [r4, #2]
 8010478:	70e3      	strb	r3, [r4, #3]
 801047a:	f001 fda9 	bl	8011fd0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801047e:	463a      	mov	r2, r7
 8010480:	4631      	mov	r1, r6
 8010482:	4668      	mov	r0, sp
 8010484:	f001 fda8 	bl	8011fd8 <ReadConfigFile::Read(char const*, unsigned int)>
 8010488:	6828      	ldr	r0, [r5, #0]
 801048a:	4621      	mov	r1, r4
 801048c:	6803      	ldr	r3, [r0, #0]
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	4798      	blx	r3
 8010492:	4668      	mov	r0, sp
 8010494:	f001 fd9f 	bl	8011fd6 <ReadConfigFile::~ReadConfigFile()>
 8010498:	b003      	add	sp, #12
 801049a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop
 80104a0:	2000a7d0 	ldrdcs	sl, [r0], -r0
 80104a4:	080105d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, sl}

080104a8 <NetworkParams::callbackFunction(char const*)>:
 80104a8:	b530      	push	{r4, r5, lr}
 80104aa:	460c      	mov	r4, r1
 80104ac:	b085      	sub	sp, #20
 80104ae:	4620      	mov	r0, r4
 80104b0:	4942      	ldr	r1, [pc, #264]	; (80105bc <NetworkParams::callbackFunction(char const*)+0x114>)
 80104b2:	f10d 0207 	add.w	r2, sp, #7
 80104b6:	f001 fe65 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80104ba:	b980      	cbnz	r0, 80104de <NetworkParams::callbackFunction(char const*)+0x36>
 80104bc:	4940      	ldr	r1, [pc, #256]	; (80105c0 <NetworkParams::callbackFunction(char const*)+0x118>)
 80104be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80104c2:	680b      	ldr	r3, [r1, #0]
 80104c4:	b142      	cbz	r2, 80104d8 <NetworkParams::callbackFunction(char const*)+0x30>
 80104c6:	f023 0301 	bic.w	r3, r3, #1
 80104ca:	3a00      	subs	r2, #0
 80104cc:	bf18      	it	ne
 80104ce:	2201      	movne	r2, #1
 80104d0:	600b      	str	r3, [r1, #0]
 80104d2:	750a      	strb	r2, [r1, #20]
 80104d4:	b005      	add	sp, #20
 80104d6:	bd30      	pop	{r4, r5, pc}
 80104d8:	f043 0301 	orr.w	r3, r3, #1
 80104dc:	e7f5      	b.n	80104ca <NetworkParams::callbackFunction(char const*)+0x22>
 80104de:	4620      	mov	r0, r4
 80104e0:	4938      	ldr	r1, [pc, #224]	; (80105c4 <NetworkParams::callbackFunction(char const*)+0x11c>)
 80104e2:	f10d 0207 	add.w	r2, sp, #7
 80104e6:	f001 fe4d 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80104ea:	b988      	cbnz	r0, 8010510 <NetworkParams::callbackFunction(char const*)+0x68>
 80104ec:	4a34      	ldr	r2, [pc, #208]	; (80105c0 <NetworkParams::callbackFunction(char const*)+0x118>)
 80104ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80104f2:	6813      	ldr	r3, [r2, #0]
 80104f4:	1e4d      	subs	r5, r1, #1
 80104f6:	2d04      	cmp	r5, #4
 80104f8:	bf97      	itett	ls
 80104fa:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 80104fe:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 8010502:	6013      	strls	r3, [r2, #0]
 8010504:	f882 105d 	strbls.w	r1, [r2, #93]	; 0x5d
 8010508:	bf84      	itt	hi
 801050a:	6013      	strhi	r3, [r2, #0]
 801050c:	f882 005d 	strbhi.w	r0, [r2, #93]	; 0x5d
 8010510:	4620      	mov	r0, r4
 8010512:	492d      	ldr	r1, [pc, #180]	; (80105c8 <NetworkParams::callbackFunction(char const*)+0x120>)
 8010514:	aa02      	add	r2, sp, #8
 8010516:	f001 fdd7 	bl	80120c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 801051a:	b9d0      	cbnz	r0, 8010552 <NetworkParams::callbackFunction(char const*)+0xaa>
 801051c:	9b02      	ldr	r3, [sp, #8]
 801051e:	b2d9      	uxtb	r1, r3
 8010520:	29ac      	cmp	r1, #172	; 0xac
 8010522:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010526:	d00a      	beq.n	801053e <NetworkParams::callbackFunction(char const*)+0x96>
 8010528:	29c0      	cmp	r1, #192	; 0xc0
 801052a:	d00c      	beq.n	8010546 <NetworkParams::callbackFunction(char const*)+0x9e>
 801052c:	290a      	cmp	r1, #10
 801052e:	d10d      	bne.n	801054c <NetworkParams::callbackFunction(char const*)+0xa4>
 8010530:	4a23      	ldr	r2, [pc, #140]	; (80105c0 <NetworkParams::callbackFunction(char const*)+0x118>)
 8010532:	6053      	str	r3, [r2, #4]
 8010534:	6813      	ldr	r3, [r2, #0]
 8010536:	f043 0302 	orr.w	r3, r3, #2
 801053a:	6013      	str	r3, [r2, #0]
 801053c:	e7ca      	b.n	80104d4 <NetworkParams::callbackFunction(char const*)+0x2c>
 801053e:	3a10      	subs	r2, #16
 8010540:	2a0f      	cmp	r2, #15
 8010542:	d8c7      	bhi.n	80104d4 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010544:	e7f4      	b.n	8010530 <NetworkParams::callbackFunction(char const*)+0x88>
 8010546:	2aa8      	cmp	r2, #168	; 0xa8
 8010548:	d1c4      	bne.n	80104d4 <NetworkParams::callbackFunction(char const*)+0x2c>
 801054a:	e7f1      	b.n	8010530 <NetworkParams::callbackFunction(char const*)+0x88>
 801054c:	2b00      	cmp	r3, #0
 801054e:	d0ef      	beq.n	8010530 <NetworkParams::callbackFunction(char const*)+0x88>
 8010550:	e7c0      	b.n	80104d4 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010552:	4620      	mov	r0, r4
 8010554:	491d      	ldr	r1, [pc, #116]	; (80105cc <NetworkParams::callbackFunction(char const*)+0x124>)
 8010556:	aa02      	add	r2, sp, #8
 8010558:	f001 fdb6 	bl	80120c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 801055c:	b970      	cbnz	r0, 801057c <NetworkParams::callbackFunction(char const*)+0xd4>
 801055e:	9a02      	ldr	r2, [sp, #8]
 8010560:	2a00      	cmp	r2, #0
 8010562:	d0b7      	beq.n	80104d4 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010564:	ba13      	rev	r3, r2
 8010566:	43d9      	mvns	r1, r3
 8010568:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 801056c:	d1b2      	bne.n	80104d4 <NetworkParams::callbackFunction(char const*)+0x2c>
 801056e:	4b14      	ldr	r3, [pc, #80]	; (80105c0 <NetworkParams::callbackFunction(char const*)+0x118>)
 8010570:	609a      	str	r2, [r3, #8]
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	f042 0204 	orr.w	r2, r2, #4
 8010578:	601a      	str	r2, [r3, #0]
 801057a:	e7ab      	b.n	80104d4 <NetworkParams::callbackFunction(char const*)+0x2c>
 801057c:	4620      	mov	r0, r4
 801057e:	4914      	ldr	r1, [pc, #80]	; (80105d0 <NetworkParams::callbackFunction(char const*)+0x128>)
 8010580:	aa02      	add	r2, sp, #8
 8010582:	f001 fda1 	bl	80120c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010586:	4d0e      	ldr	r5, [pc, #56]	; (80105c0 <NetworkParams::callbackFunction(char const*)+0x118>)
 8010588:	b930      	cbnz	r0, 8010598 <NetworkParams::callbackFunction(char const*)+0xf0>
 801058a:	9b02      	ldr	r3, [sp, #8]
 801058c:	60eb      	str	r3, [r5, #12]
 801058e:	682b      	ldr	r3, [r5, #0]
 8010590:	f043 0308 	orr.w	r3, r3, #8
 8010594:	602b      	str	r3, [r5, #0]
 8010596:	e79d      	b.n	80104d4 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010598:	233f      	movs	r3, #63	; 0x3f
 801059a:	4620      	mov	r0, r4
 801059c:	9303      	str	r3, [sp, #12]
 801059e:	490d      	ldr	r1, [pc, #52]	; (80105d4 <NetworkParams::callbackFunction(char const*)+0x12c>)
 80105a0:	ab03      	add	r3, sp, #12
 80105a2:	f105 0215 	add.w	r2, r5, #21
 80105a6:	f001 fd4b 	bl	8012040 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 80105aa:	2800      	cmp	r0, #0
 80105ac:	d192      	bne.n	80104d4 <NetworkParams::callbackFunction(char const*)+0x2c>
 80105ae:	9b03      	ldr	r3, [sp, #12]
 80105b0:	442b      	add	r3, r5
 80105b2:	7558      	strb	r0, [r3, #21]
 80105b4:	682b      	ldr	r3, [r5, #0]
 80105b6:	f043 0320 	orr.w	r3, r3, #32
 80105ba:	e7eb      	b.n	8010594 <NetworkParams::callbackFunction(char const*)+0xec>
 80105bc:	08016b36 	stmdaeq	r1, {r1, r2, r4, r5, r8, r9, fp, sp, lr}
 80105c0:	2000a7d0 	ldrdcs	sl, [r0], -r0
 80105c4:	08016b14 	stmdaeq	r1, {r2, r4, r8, r9, fp, sp, lr}
 80105c8:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 80105cc:	08016b2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, fp, sp, lr}
 80105d0:	08016b04 	stmdaeq	r1, {r2, r8, r9, fp, sp, lr}
 80105d4:	08016b24 	stmdaeq	r1, {r2, r5, r8, r9, fp, sp, lr}

080105d8 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 80105d8:	f7ff bf66 	b.w	80104a8 <NetworkParams::callbackFunction(char const*)>

080105dc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 80105dc:	b530      	push	{r4, r5, lr}
 80105de:	4614      	mov	r4, r2
 80105e0:	461d      	mov	r5, r3
 80105e2:	b087      	sub	sp, #28
 80105e4:	2900      	cmp	r1, #0
 80105e6:	d040      	beq.n	801066a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x8e>
 80105e8:	225e      	movs	r2, #94	; 0x5e
 80105ea:	4871      	ldr	r0, [pc, #452]	; (80107b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 80105ec:	f002 fb0f 	bl	8012c0e <memmove>
 80105f0:	4622      	mov	r2, r4
 80105f2:	462b      	mov	r3, r5
 80105f4:	496f      	ldr	r1, [pc, #444]	; (80107b4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 80105f6:	a803      	add	r0, sp, #12
 80105f8:	f001 fc1a 	bl	8011e30 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80105fc:	4c6c      	ldr	r4, [pc, #432]	; (80107b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 80105fe:	6823      	ldr	r3, [r4, #0]
 8010600:	0799      	lsls	r1, r3, #30
 8010602:	bf5f      	itttt	pl
 8010604:	4a6c      	ldrpl	r2, [pc, #432]	; (80107b8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8010606:	6812      	ldrpl	r2, [r2, #0]
 8010608:	6912      	ldrpl	r2, [r2, #16]
 801060a:	6062      	strpl	r2, [r4, #4]
 801060c:	075a      	lsls	r2, r3, #29
 801060e:	bf5f      	itttt	pl
 8010610:	4a69      	ldrpl	r2, [pc, #420]	; (80107b8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8010612:	6812      	ldrpl	r2, [r2, #0]
 8010614:	6992      	ldrpl	r2, [r2, #24]
 8010616:	60a2      	strpl	r2, [r4, #8]
 8010618:	071d      	lsls	r5, r3, #28
 801061a:	bf5f      	itttt	pl
 801061c:	4a66      	ldrpl	r2, [pc, #408]	; (80107b8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 801061e:	6812      	ldrpl	r2, [r2, #0]
 8010620:	6952      	ldrpl	r2, [r2, #20]
 8010622:	60e2      	strpl	r2, [r4, #12]
 8010624:	0698      	lsls	r0, r3, #26
 8010626:	d40c      	bmi.n	8010642 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x66>
 8010628:	223f      	movs	r2, #63	; 0x3f
 801062a:	4b63      	ldr	r3, [pc, #396]	; (80107b8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 801062c:	4863      	ldr	r0, [pc, #396]	; (80107bc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	331b      	adds	r3, #27
 8010632:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010636:	b9f1      	cbnz	r1, 8010676 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x9a>
 8010638:	f002 fb00 	bl	8012c3c <memset>
 801063c:	2300      	movs	r3, #0
 801063e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8010642:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8010646:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801064a:	42a9      	cmp	r1, r5
 801064c:	d226      	bcs.n	801069c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc0>
 801064e:	9803      	ldr	r0, [sp, #12]
 8010650:	1a6d      	subs	r5, r5, r1
 8010652:	4408      	add	r0, r1
 8010654:	6821      	ldr	r1, [r4, #0]
 8010656:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801065a:	07c9      	lsls	r1, r1, #31
 801065c:	7d23      	ldrb	r3, [r4, #20]
 801065e:	d40f      	bmi.n	8010680 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa4>
 8010660:	b97a      	cbnz	r2, 8010682 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa6>
 8010662:	9300      	str	r3, [sp, #0]
 8010664:	4a56      	ldr	r2, [pc, #344]	; (80107c0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8010666:	4b57      	ldr	r3, [pc, #348]	; (80107c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8010668:	e00e      	b.n	8010688 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xac>
 801066a:	6800      	ldr	r0, [r0, #0]
 801066c:	4950      	ldr	r1, [pc, #320]	; (80107b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d4>)
 801066e:	6803      	ldr	r3, [r0, #0]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	4798      	blx	r3
 8010674:	e7bc      	b.n	80105f0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x14>
 8010676:	3a01      	subs	r2, #1
 8010678:	f800 1b01 	strb.w	r1, [r0], #1
 801067c:	d1d9      	bne.n	8010632 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x56>
 801067e:	e7dd      	b.n	801063c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x60>
 8010680:	b30a      	cbz	r2, 80106c6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xea>
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	4a50      	ldr	r2, [pc, #320]	; (80107c8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8010686:	4b4f      	ldr	r3, [pc, #316]	; (80107c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8010688:	4629      	mov	r1, r5
 801068a:	f002 fd21 	bl	80130d0 <snprintf>
 801068e:	4285      	cmp	r5, r0
 8010690:	bfa2      	ittt	ge
 8010692:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8010696:	18c0      	addge	r0, r0, r3
 8010698:	f8ad 0012 	strhge.w	r0, [sp, #18]
 801069c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80106a0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80106a4:	42a9      	cmp	r1, r5
 80106a6:	d221      	bcs.n	80106ec <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x110>
 80106a8:	9803      	ldr	r0, [sp, #12]
 80106aa:	1a6d      	subs	r5, r5, r1
 80106ac:	4408      	add	r0, r1
 80106ae:	6821      	ldr	r1, [r4, #0]
 80106b0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80106b4:	05c9      	lsls	r1, r1, #23
 80106b6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80106ba:	d408      	bmi.n	80106ce <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf2>
 80106bc:	b94a      	cbnz	r2, 80106d2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf6>
 80106be:	9300      	str	r3, [sp, #0]
 80106c0:	4a3f      	ldr	r2, [pc, #252]	; (80107c0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80106c2:	4b42      	ldr	r3, [pc, #264]	; (80107cc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80106c4:	e008      	b.n	80106d8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfc>
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	4a41      	ldr	r2, [pc, #260]	; (80107d0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 80106ca:	4b3e      	ldr	r3, [pc, #248]	; (80107c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 80106cc:	e7dc      	b.n	8010688 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xac>
 80106ce:	2a00      	cmp	r2, #0
 80106d0:	d03e      	beq.n	8010750 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x174>
 80106d2:	9300      	str	r3, [sp, #0]
 80106d4:	4a3c      	ldr	r2, [pc, #240]	; (80107c8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 80106d6:	4b3d      	ldr	r3, [pc, #244]	; (80107cc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80106d8:	4629      	mov	r1, r5
 80106da:	f002 fcf9 	bl	80130d0 <snprintf>
 80106de:	4285      	cmp	r5, r0
 80106e0:	bfa2      	ittt	ge
 80106e2:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80106e6:	18c0      	addge	r0, r0, r3
 80106e8:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80106ec:	4939      	ldr	r1, [pc, #228]	; (80107d4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 80106ee:	a803      	add	r0, sp, #12
 80106f0:	f001 fc24 	bl	8011f3c <PropertiesBuilder::AddComment(char const*)>
 80106f4:	6823      	ldr	r3, [r4, #0]
 80106f6:	6862      	ldr	r2, [r4, #4]
 80106f8:	4937      	ldr	r1, [pc, #220]	; (80107d8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 80106fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80106fe:	a803      	add	r0, sp, #12
 8010700:	f001 fbd8 	bl	8011eb4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010704:	6823      	ldr	r3, [r4, #0]
 8010706:	68a2      	ldr	r2, [r4, #8]
 8010708:	4934      	ldr	r1, [pc, #208]	; (80107dc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x200>)
 801070a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801070e:	a803      	add	r0, sp, #12
 8010710:	f001 fbd0 	bl	8011eb4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010714:	6823      	ldr	r3, [r4, #0]
 8010716:	4932      	ldr	r1, [pc, #200]	; (80107e0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>)
 8010718:	68e2      	ldr	r2, [r4, #12]
 801071a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801071e:	a803      	add	r0, sp, #12
 8010720:	f001 fbc8 	bl	8011eb4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010724:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8010728:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801072c:	42a9      	cmp	r1, r5
 801072e:	d221      	bcs.n	8010774 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x198>
 8010730:	6823      	ldr	r3, [r4, #0]
 8010732:	9803      	ldr	r0, [sp, #12]
 8010734:	f013 0f20 	tst.w	r3, #32
 8010738:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801073c:	4b1f      	ldr	r3, [pc, #124]	; (80107bc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 801073e:	4408      	add	r0, r1
 8010740:	eba5 0501 	sub.w	r5, r5, r1
 8010744:	d108      	bne.n	8010758 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x17c>
 8010746:	b942      	cbnz	r2, 801075a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x17e>
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	4a26      	ldr	r2, [pc, #152]	; (80107e4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x208>)
 801074c:	4b26      	ldr	r3, [pc, #152]	; (80107e8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 801074e:	e007      	b.n	8010760 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 8010750:	9300      	str	r3, [sp, #0]
 8010752:	4a1f      	ldr	r2, [pc, #124]	; (80107d0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8010754:	4b1d      	ldr	r3, [pc, #116]	; (80107cc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8010756:	e7bf      	b.n	80106d8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfc>
 8010758:	b32a      	cbz	r2, 80107a6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ca>
 801075a:	9300      	str	r3, [sp, #0]
 801075c:	4a23      	ldr	r2, [pc, #140]	; (80107ec <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 801075e:	4b22      	ldr	r3, [pc, #136]	; (80107e8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 8010760:	4629      	mov	r1, r5
 8010762:	f002 fcb5 	bl	80130d0 <snprintf>
 8010766:	4285      	cmp	r5, r0
 8010768:	bfa2      	ittt	ge
 801076a:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801076e:	18c0      	addge	r0, r0, r3
 8010770:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8010774:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010778:	b17b      	cbz	r3, 801079a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1be>
 801077a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801077e:	9b03      	ldr	r3, [sp, #12]
 8010780:	4413      	add	r3, r2
 8010782:	227d      	movs	r2, #125	; 0x7d
 8010784:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010788:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801078c:	9903      	ldr	r1, [sp, #12]
 801078e:	54ca      	strb	r2, [r1, r3]
 8010790:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010794:	3301      	adds	r3, #1
 8010796:	f8ad 3012 	strh.w	r3, [sp, #18]
 801079a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801079e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107a0:	601a      	str	r2, [r3, #0]
 80107a2:	b007      	add	sp, #28
 80107a4:	bd30      	pop	{r4, r5, pc}
 80107a6:	9300      	str	r3, [sp, #0]
 80107a8:	4a11      	ldr	r2, [pc, #68]	; (80107f0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x214>)
 80107aa:	4b0f      	ldr	r3, [pc, #60]	; (80107e8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 80107ac:	e7d8      	b.n	8010760 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x184>
 80107ae:	bf00      	nop
 80107b0:	2000a7d0 	ldrdcs	sl, [r0], -r0
 80107b4:	08016b3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, fp, sp, lr}
 80107b8:	2000a7cc 	andcs	sl, r0, ip, asr #15
 80107bc:	2000a7e5 	andcs	sl, r0, r5, ror #15
 80107c0:	080152d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, ip, lr}
 80107c4:	08016b36 	stmdaeq	r1, {r1, r2, r4, r5, r8, r9, fp, sp, lr}
 80107c8:	080152ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, ip, lr}
 80107cc:	08016b14 	stmdaeq	r1, {r2, r4, r8, r9, fp, sp, lr}
 80107d0:	080152d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, lr}
 80107d4:	08016aef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r9, fp, sp, lr}
 80107d8:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 80107dc:	08016b2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, fp, sp, lr}
 80107e0:	08016b04 	stmdaeq	r1, {r2, r8, r9, fp, sp, lr}
 80107e4:	080152ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r9, ip, lr}
 80107e8:	08016b24 	stmdaeq	r1, {r2, r5, r8, r9, fp, sp, lr}
 80107ec:	080152df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r9, ip, lr}
 80107f0:	080152eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, ip, lr}

080107f4 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 80107f4:	b513      	push	{r0, r1, r4, lr}
 80107f6:	6804      	ldr	r4, [r0, #0]
 80107f8:	b914      	cbnz	r4, 8010800 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80107fa:	601c      	str	r4, [r3, #0]
 80107fc:	b002      	add	sp, #8
 80107fe:	bd10      	pop	{r4, pc}
 8010800:	9300      	str	r3, [sp, #0]
 8010802:	4613      	mov	r3, r2
 8010804:	460a      	mov	r2, r1
 8010806:	2100      	movs	r1, #0
 8010808:	f7ff fee8 	bl	80105dc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 801080c:	e7f6      	b.n	80107fc <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

0801080e <NetworkParams::Dump()>:
 801080e:	4770      	bx	lr

08010810 <memcpy.isra.0>:
 8010810:	3801      	subs	r0, #1
 8010812:	440a      	add	r2, r1
 8010814:	4291      	cmp	r1, r2
 8010816:	d100      	bne.n	801081a <memcpy.isra.0+0xa>
 8010818:	4770      	bx	lr
 801081a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801081e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010822:	e7f7      	b.n	8010814 <memcpy.isra.0+0x4>

08010824 <arp_announce>:
 8010824:	4803      	ldr	r0, [pc, #12]	; (8010834 <arp_announce+0x10>)
 8010826:	69c3      	ldr	r3, [r0, #28]
 8010828:	b113      	cbz	r3, 8010830 <arp_announce+0xc>
 801082a:	212a      	movs	r1, #42	; 0x2a
 801082c:	f003 bbb6 	b.w	8013f9c <emac_eth_send>
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	2000a830 	andcs	sl, r0, r0, lsr r8

08010838 <arp_handle_request>:
 8010838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801083a:	2204      	movs	r2, #4
 801083c:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8010840:	4604      	mov	r4, r0
 8010842:	eb0d 0002 	add.w	r0, sp, r2
 8010846:	f7ff ffe3 	bl	8010810 <memcpy.isra.0>
 801084a:	4b0d      	ldr	r3, [pc, #52]	; (8010880 <arp_handle_request+0x48>)
 801084c:	9a01      	ldr	r2, [sp, #4]
 801084e:	69db      	ldr	r3, [r3, #28]
 8010850:	429a      	cmp	r2, r3
 8010852:	d113      	bne.n	801087c <arp_handle_request+0x44>
 8010854:	2206      	movs	r2, #6
 8010856:	4d0b      	ldr	r5, [pc, #44]	; (8010884 <arp_handle_request+0x4c>)
 8010858:	18a1      	adds	r1, r4, r2
 801085a:	4628      	mov	r0, r5
 801085c:	f7ff ffd8 	bl	8010810 <memcpy.isra.0>
 8010860:	f104 0116 	add.w	r1, r4, #22
 8010864:	f105 0020 	add.w	r0, r5, #32
 8010868:	2206      	movs	r2, #6
 801086a:	f7ff ffd1 	bl	8010810 <memcpy.isra.0>
 801086e:	69e3      	ldr	r3, [r4, #28]
 8010870:	212a      	movs	r1, #42	; 0x2a
 8010872:	4628      	mov	r0, r5
 8010874:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8010878:	f003 fb90 	bl	8013f9c <emac_eth_send>
 801087c:	b003      	add	sp, #12
 801087e:	bd30      	pop	{r4, r5, pc}
 8010880:	2000a830 	andcs	sl, r0, r0, lsr r8
 8010884:	2000a85c 	andcs	sl, r0, ip, asr r8

08010888 <arp_handle_reply>:
 8010888:	69c1      	ldr	r1, [r0, #28]
 801088a:	3016      	adds	r0, #22
 801088c:	f000 b8ac 	b.w	80109e8 <arp_cache_update>

08010890 <arp_init>:
 8010890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010894:	4604      	mov	r4, r0
 8010896:	460d      	mov	r5, r1
 8010898:	f000 f88c 	bl	80109b4 <arp_cache_init>
 801089c:	2206      	movs	r2, #6
 801089e:	4621      	mov	r1, r4
 80108a0:	482e      	ldr	r0, [pc, #184]	; (801095c <arp_init+0xcc>)
 80108a2:	682f      	ldr	r7, [r5, #0]
 80108a4:	f7ff ffb4 	bl	8010810 <memcpy.isra.0>
 80108a8:	4b2d      	ldr	r3, [pc, #180]	; (8010960 <arp_init+0xd0>)
 80108aa:	2507      	movs	r5, #7
 80108ac:	461e      	mov	r6, r3
 80108ae:	22ff      	movs	r2, #255	; 0xff
 80108b0:	3d01      	subs	r5, #1
 80108b2:	d146      	bne.n	8010942 <arp_init+0xb2>
 80108b4:	4b2b      	ldr	r3, [pc, #172]	; (8010964 <arp_init+0xd4>)
 80108b6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8010968 <arp_init+0xd8>
 80108ba:	2206      	movs	r2, #6
 80108bc:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80108c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108c4:	4621      	mov	r1, r4
 80108c6:	4829      	ldr	r0, [pc, #164]	; (801096c <arp_init+0xdc>)
 80108c8:	82b3      	strh	r3, [r6, #20]
 80108ca:	f7ff ffa1 	bl	8010810 <memcpy.isra.0>
 80108ce:	2307      	movs	r3, #7
 80108d0:	4a27      	ldr	r2, [pc, #156]	; (8010970 <arp_init+0xe0>)
 80108d2:	61f7      	str	r7, [r6, #28]
 80108d4:	3b01      	subs	r3, #1
 80108d6:	d137      	bne.n	8010948 <arp_init+0xb8>
 80108d8:	2206      	movs	r2, #6
 80108da:	4621      	mov	r1, r4
 80108dc:	4825      	ldr	r0, [pc, #148]	; (8010974 <arp_init+0xe4>)
 80108de:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 80108e2:	f7ff ff95 	bl	8010810 <memcpy.isra.0>
 80108e6:	4a24      	ldr	r2, [pc, #144]	; (8010978 <arp_init+0xe8>)
 80108e8:	2306      	movs	r3, #6
 80108ea:	4615      	mov	r5, r2
 80108ec:	21ff      	movs	r1, #255	; 0xff
 80108ee:	3b01      	subs	r3, #1
 80108f0:	d22d      	bcs.n	801094e <arp_init+0xbe>
 80108f2:	4b1c      	ldr	r3, [pc, #112]	; (8010964 <arp_init+0xd4>)
 80108f4:	2206      	movs	r2, #6
 80108f6:	e9c5 3803 	strd	r3, r8, [r5, #12]
 80108fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80108fe:	4621      	mov	r1, r4
 8010900:	481e      	ldr	r0, [pc, #120]	; (801097c <arp_init+0xec>)
 8010902:	82ab      	strh	r3, [r5, #20]
 8010904:	f7ff ff84 	bl	8010810 <memcpy.isra.0>
 8010908:	2307      	movs	r3, #7
 801090a:	2100      	movs	r1, #0
 801090c:	4a1c      	ldr	r2, [pc, #112]	; (8010980 <arp_init+0xf0>)
 801090e:	61ef      	str	r7, [r5, #28]
 8010910:	3b01      	subs	r3, #1
 8010912:	d11f      	bne.n	8010954 <arp_init+0xc4>
 8010914:	2206      	movs	r2, #6
 8010916:	4d1b      	ldr	r5, [pc, #108]	; (8010984 <arp_init+0xf4>)
 8010918:	4621      	mov	r1, r4
 801091a:	18a8      	adds	r0, r5, r2
 801091c:	f7ff ff78 	bl	8010810 <memcpy.isra.0>
 8010920:	4b10      	ldr	r3, [pc, #64]	; (8010964 <arp_init+0xd4>)
 8010922:	4621      	mov	r1, r4
 8010924:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8010928:	f44f 7300 	mov.w	r3, #512	; 0x200
 801092c:	f105 0016 	add.w	r0, r5, #22
 8010930:	2206      	movs	r2, #6
 8010932:	82ab      	strh	r3, [r5, #20]
 8010934:	f7ff ff6c 	bl	8010810 <memcpy.isra.0>
 8010938:	61ef      	str	r7, [r5, #28]
 801093a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801093e:	f7ff bf71 	b.w	8010824 <arp_announce>
 8010942:	f803 2b01 	strb.w	r2, [r3], #1
 8010946:	e7b3      	b.n	80108b0 <arp_init+0x20>
 8010948:	f802 5b01 	strb.w	r5, [r2], #1
 801094c:	e7c2      	b.n	80108d4 <arp_init+0x44>
 801094e:	f802 1b01 	strb.w	r1, [r2], #1
 8010952:	e7cc      	b.n	80108ee <arp_init+0x5e>
 8010954:	f802 1b01 	strb.w	r1, [r2], #1
 8010958:	e7da      	b.n	8010910 <arp_init+0x80>
 801095a:	bf00      	nop
 801095c:	2000a836 	andcs	sl, r0, r6, lsr r8
 8010960:	2000a830 	andcs	sl, r0, r0, lsr r8
 8010964:	01000608 	tsteq	r0, r8, lsl #12
 8010968:	04060008 	streq	r0, [r6], #-8
 801096c:	2000a846 	andcs	sl, r0, r6, asr #16
 8010970:	2000a850 	andcs	sl, r0, r0, asr r8
 8010974:	2000a88e 	andcs	sl, r0, lr, lsl #17
 8010978:	2000a888 	andcs	sl, r0, r8, lsl #17
 801097c:	2000a89e 	mulcs	r0, lr, r8
 8010980:	2000a8a8 	andcs	sl, r0, r8, lsr #17
 8010984:	2000a85c 	andcs	sl, r0, ip, asr r8

08010988 <arp_send_request>:
 8010988:	4b03      	ldr	r3, [pc, #12]	; (8010998 <arp_send_request+0x10>)
 801098a:	212a      	movs	r1, #42	; 0x2a
 801098c:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8010990:	4618      	mov	r0, r3
 8010992:	f003 bb03 	b.w	8013f9c <emac_eth_send>
 8010996:	bf00      	nop
 8010998:	2000a888 	andcs	sl, r0, r8, lsl #17

0801099c <arp_handle>:
 801099c:	8a83      	ldrh	r3, [r0, #20]
 801099e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109a2:	d003      	beq.n	80109ac <arp_handle+0x10>
 80109a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80109a8:	d002      	beq.n	80109b0 <arp_handle+0x14>
 80109aa:	4770      	bx	lr
 80109ac:	f7ff bf44 	b.w	8010838 <arp_handle_request>
 80109b0:	f7ff bf6a 	b.w	8010888 <arp_handle_reply>

080109b4 <arp_cache_init>:
 80109b4:	2300      	movs	r3, #0
 80109b6:	4618      	mov	r0, r3
 80109b8:	4a09      	ldr	r2, [pc, #36]	; (80109e0 <arp_cache_init+0x2c>)
 80109ba:	b510      	push	{r4, lr}
 80109bc:	8013      	strh	r3, [r2, #0]
 80109be:	4a09      	ldr	r2, [pc, #36]	; (80109e4 <arp_cache_init+0x30>)
 80109c0:	4611      	mov	r1, r2
 80109c2:	f842 0c04 	str.w	r0, [r2, #-4]
 80109c6:	1d94      	adds	r4, r2, #6
 80109c8:	42a1      	cmp	r1, r4
 80109ca:	d105      	bne.n	80109d8 <arp_cache_init+0x24>
 80109cc:	3303      	adds	r3, #3
 80109ce:	2b60      	cmp	r3, #96	; 0x60
 80109d0:	f102 020c 	add.w	r2, r2, #12
 80109d4:	d1f4      	bne.n	80109c0 <arp_cache_init+0xc>
 80109d6:	bd10      	pop	{r4, pc}
 80109d8:	f801 0b01 	strb.w	r0, [r1], #1
 80109dc:	e7f4      	b.n	80109c8 <arp_cache_init+0x14>
 80109de:	bf00      	nop
 80109e0:	2000aa34 	andcs	sl, r0, r4, lsr sl
 80109e4:	2000a8b8 			; <UNDEFINED> instruction: 0x2000a8b8

080109e8 <arp_cache_update>:
 80109e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109ea:	4e11      	ldr	r6, [pc, #68]	; (8010a30 <arp_cache_update+0x48>)
 80109ec:	8833      	ldrh	r3, [r6, #0]
 80109ee:	2b20      	cmp	r3, #32
 80109f0:	d018      	beq.n	8010a24 <arp_cache_update+0x3c>
 80109f2:	2400      	movs	r4, #0
 80109f4:	220c      	movs	r2, #12
 80109f6:	4d0f      	ldr	r5, [pc, #60]	; (8010a34 <arp_cache_update+0x4c>)
 80109f8:	b2a7      	uxth	r7, r4
 80109fa:	42bb      	cmp	r3, r7
 80109fc:	d80b      	bhi.n	8010a16 <arp_cache_update+0x2e>
 80109fe:	fb02 5203 	mla	r2, r2, r3, r5
 8010a02:	1d84      	adds	r4, r0, #6
 8010a04:	3203      	adds	r2, #3
 8010a06:	42a0      	cmp	r0, r4
 8010a08:	d10d      	bne.n	8010a26 <arp_cache_update+0x3e>
 8010a0a:	220c      	movs	r2, #12
 8010a0c:	435a      	muls	r2, r3
 8010a0e:	3301      	adds	r3, #1
 8010a10:	50a9      	str	r1, [r5, r2]
 8010a12:	8033      	strh	r3, [r6, #0]
 8010a14:	e006      	b.n	8010a24 <arp_cache_update+0x3c>
 8010a16:	3401      	adds	r4, #1
 8010a18:	fb02 5704 	mla	r7, r2, r4, r5
 8010a1c:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 8010a20:	428f      	cmp	r7, r1
 8010a22:	d1e9      	bne.n	80109f8 <arp_cache_update+0x10>
 8010a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a26:	f810 7b01 	ldrb.w	r7, [r0], #1
 8010a2a:	f802 7f01 	strb.w	r7, [r2, #1]!
 8010a2e:	e7ea      	b.n	8010a06 <arp_cache_update+0x1e>
 8010a30:	2000aa34 	andcs	sl, r0, r4, lsr sl
 8010a34:	2000a8b4 			; <UNDEFINED> instruction: 0x2000a8b4

08010a38 <arp_cache_lookup>:
 8010a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	4606      	mov	r6, r0
 8010a40:	460c      	mov	r4, r1
 8010a42:	200c      	movs	r0, #12
 8010a44:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8010acc <arp_cache_lookup+0x94>
 8010a48:	fb00 f302 	mul.w	r3, r0, r2
 8010a4c:	f853 1008 	ldr.w	r1, [r3, r8]
 8010a50:	42b1      	cmp	r1, r6
 8010a52:	d10d      	bne.n	8010a70 <arp_cache_lookup+0x38>
 8010a54:	3304      	adds	r3, #4
 8010a56:	4443      	add	r3, r8
 8010a58:	3c01      	subs	r4, #1
 8010a5a:	1d9a      	adds	r2, r3, #6
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d102      	bne.n	8010a66 <arp_cache_lookup+0x2e>
 8010a60:	4630      	mov	r0, r6
 8010a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a66:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010a6a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8010a6e:	e7f5      	b.n	8010a5c <arp_cache_lookup+0x24>
 8010a70:	b111      	cbz	r1, 8010a78 <arp_cache_lookup+0x40>
 8010a72:	3201      	adds	r2, #1
 8010a74:	2a20      	cmp	r2, #32
 8010a76:	d1e7      	bne.n	8010a48 <arp_cache_lookup+0x10>
 8010a78:	2704      	movs	r7, #4
 8010a7a:	f8df a054 	ldr.w	sl, [pc, #84]	; 8010ad0 <arp_cache_lookup+0x98>
 8010a7e:	f8ba 5000 	ldrh.w	r5, [sl]
 8010a82:	3f01      	subs	r7, #1
 8010a84:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8010a88:	d101      	bne.n	8010a8e <arp_cache_lookup+0x56>
 8010a8a:	463e      	mov	r6, r7
 8010a8c:	e7e8      	b.n	8010a60 <arp_cache_lookup+0x28>
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f7ff ff7a 	bl	8010988 <arp_send_request>
 8010a94:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8010a98:	f1b9 0901 	subs.w	r9, r9, #1
 8010a9c:	f8ba 3000 	ldrh.w	r3, [sl]
 8010aa0:	d011      	beq.n	8010ac6 <arp_cache_lookup+0x8e>
 8010aa2:	429d      	cmp	r5, r3
 8010aa4:	d00c      	beq.n	8010ac0 <arp_cache_lookup+0x88>
 8010aa6:	230c      	movs	r3, #12
 8010aa8:	fb03 8505 	mla	r5, r3, r5, r8
 8010aac:	3c01      	subs	r4, #1
 8010aae:	1d2b      	adds	r3, r5, #4
 8010ab0:	350a      	adds	r5, #10
 8010ab2:	42ab      	cmp	r3, r5
 8010ab4:	d0d4      	beq.n	8010a60 <arp_cache_lookup+0x28>
 8010ab6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010aba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010abe:	e7f8      	b.n	8010ab2 <arp_cache_lookup+0x7a>
 8010ac0:	f7fd fff6 	bl	800eab0 <net_handle>
 8010ac4:	e7e8      	b.n	8010a98 <arp_cache_lookup+0x60>
 8010ac6:	429d      	cmp	r5, r3
 8010ac8:	d0db      	beq.n	8010a82 <arp_cache_lookup+0x4a>
 8010aca:	e7ec      	b.n	8010aa6 <arp_cache_lookup+0x6e>
 8010acc:	2000a8b4 			; <UNDEFINED> instruction: 0x2000a8b4
 8010ad0:	2000aa34 	andcs	sl, r0, r4, lsr sl

08010ad4 <_parse_response>:
 8010ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad8:	460c      	mov	r4, r1
 8010ada:	4e5b      	ldr	r6, [pc, #364]	; (8010c48 <_parse_response+0x174>)
 8010adc:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 8010ae0:	6837      	ldr	r7, [r6, #0]
 8010ae2:	b2c5      	uxtb	r5, r0
 8010ae4:	f10d 0826 	add.w	r8, sp, #38	; 0x26
 8010ae8:	f7fd ffe2 	bl	800eab0 <net_handle>
 8010aec:	f44f 7209 	mov.w	r2, #548	; 0x224
 8010af0:	4628      	mov	r0, r5
 8010af2:	f8cd 8000 	str.w	r8, [sp]
 8010af6:	ab0a      	add	r3, sp, #40	; 0x28
 8010af8:	a90b      	add	r1, sp, #44	; 0x2c
 8010afa:	f7fe fcdd 	bl	800f4b8 <udp_recv>
 8010afe:	2800      	cmp	r0, #0
 8010b00:	d05f      	beq.n	8010bc2 <_parse_response+0xee>
 8010b02:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8010b06:	2b43      	cmp	r3, #67	; 0x43
 8010b08:	d15b      	bne.n	8010bc2 <_parse_response+0xee>
 8010b0a:	aa12      	add	r2, sp, #72	; 0x48
 8010b0c:	1e63      	subs	r3, r4, #1
 8010b0e:	1d61      	adds	r1, r4, #5
 8010b10:	428b      	cmp	r3, r1
 8010b12:	d150      	bne.n	8010bb6 <_parse_response+0xe2>
 8010b14:	2100      	movs	r1, #0
 8010b16:	ab0b      	add	r3, sp, #44	; 0x2c
 8010b18:	181c      	adds	r4, r3, r0
 8010b1a:	4608      	mov	r0, r1
 8010b1c:	4b4b      	ldr	r3, [pc, #300]	; (8010c4c <_parse_response+0x178>)
 8010b1e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8010b22:	781a      	ldrb	r2, [r3, #0]
 8010b24:	f893 b001 	ldrb.w	fp, [r3, #1]
 8010b28:	f893 c002 	ldrb.w	ip, [r3, #2]
 8010b2c:	78dd      	ldrb	r5, [r3, #3]
 8010b2e:	4b48      	ldr	r3, [pc, #288]	; (8010c50 <_parse_response+0x17c>)
 8010b30:	9207      	str	r2, [sp, #28]
 8010b32:	781a      	ldrb	r2, [r3, #0]
 8010b34:	789f      	ldrb	r7, [r3, #2]
 8010b36:	78de      	ldrb	r6, [r3, #3]
 8010b38:	9206      	str	r2, [sp, #24]
 8010b3a:	785a      	ldrb	r2, [r3, #1]
 8010b3c:	4b45      	ldr	r3, [pc, #276]	; (8010c54 <_parse_response+0x180>)
 8010b3e:	9203      	str	r2, [sp, #12]
 8010b40:	f893 a000 	ldrb.w	sl, [r3]
 8010b44:	f893 9001 	ldrb.w	r9, [r3, #1]
 8010b48:	f893 8002 	ldrb.w	r8, [r3, #2]
 8010b4c:	f893 e003 	ldrb.w	lr, [r3, #3]
 8010b50:	ab47      	add	r3, sp, #284	; 0x11c
 8010b52:	42a3      	cmp	r3, r4
 8010b54:	d33f      	bcc.n	8010bd6 <_parse_response+0x102>
 8010b56:	9b04      	ldr	r3, [sp, #16]
 8010b58:	b143      	cbz	r3, 8010b6c <_parse_response+0x98>
 8010b5a:	4b3e      	ldr	r3, [pc, #248]	; (8010c54 <_parse_response+0x180>)
 8010b5c:	f883 a000 	strb.w	sl, [r3]
 8010b60:	f883 9001 	strb.w	r9, [r3, #1]
 8010b64:	f883 8002 	strb.w	r8, [r3, #2]
 8010b68:	f883 e003 	strb.w	lr, [r3, #3]
 8010b6c:	9b05      	ldr	r3, [sp, #20]
 8010b6e:	b133      	cbz	r3, 8010b7e <_parse_response+0xaa>
 8010b70:	4b37      	ldr	r3, [pc, #220]	; (8010c50 <_parse_response+0x17c>)
 8010b72:	9a06      	ldr	r2, [sp, #24]
 8010b74:	709f      	strb	r7, [r3, #2]
 8010b76:	701a      	strb	r2, [r3, #0]
 8010b78:	9a03      	ldr	r2, [sp, #12]
 8010b7a:	70de      	strb	r6, [r3, #3]
 8010b7c:	705a      	strb	r2, [r3, #1]
 8010b7e:	b139      	cbz	r1, 8010b90 <_parse_response+0xbc>
 8010b80:	4b32      	ldr	r3, [pc, #200]	; (8010c4c <_parse_response+0x178>)
 8010b82:	9a07      	ldr	r2, [sp, #28]
 8010b84:	f883 b001 	strb.w	fp, [r3, #1]
 8010b88:	701a      	strb	r2, [r3, #0]
 8010b8a:	f883 c002 	strb.w	ip, [r3, #2]
 8010b8e:	70dd      	strb	r5, [r3, #3]
 8010b90:	2802      	cmp	r0, #2
 8010b92:	d10c      	bne.n	8010bae <_parse_response+0xda>
 8010b94:	4b30      	ldr	r3, [pc, #192]	; (8010c58 <_parse_response+0x184>)
 8010b96:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8010b9a:	701a      	strb	r2, [r3, #0]
 8010b9c:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8010ba0:	705a      	strb	r2, [r3, #1]
 8010ba2:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 8010ba6:	709a      	strb	r2, [r3, #2]
 8010ba8:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 8010bac:	70da      	strb	r2, [r3, #3]
 8010bae:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 8010bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bb6:	f812 cb01 	ldrb.w	ip, [r2], #1
 8010bba:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010bbe:	45e6      	cmp	lr, ip
 8010bc0:	d0a6      	beq.n	8010b10 <_parse_response+0x3c>
 8010bc2:	6833      	ldr	r3, [r6, #0]
 8010bc4:	1bdb      	subs	r3, r3, r7
 8010bc6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010bca:	d38b      	bcc.n	8010ae4 <_parse_response+0x10>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d1a1      	bne.n	8010b14 <_parse_response+0x40>
 8010bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bd4:	e7eb      	b.n	8010bae <_parse_response+0xda>
 8010bd6:	781a      	ldrb	r2, [r3, #0]
 8010bd8:	2a35      	cmp	r2, #53	; 0x35
 8010bda:	d011      	beq.n	8010c00 <_parse_response+0x12c>
 8010bdc:	d808      	bhi.n	8010bf0 <_parse_response+0x11c>
 8010bde:	2a01      	cmp	r2, #1
 8010be0:	d011      	beq.n	8010c06 <_parse_response+0x132>
 8010be2:	2a03      	cmp	r2, #3
 8010be4:	d01a      	beq.n	8010c1c <_parse_response+0x148>
 8010be6:	b14a      	cbz	r2, 8010bfc <_parse_response+0x128>
 8010be8:	1c9a      	adds	r2, r3, #2
 8010bea:	785b      	ldrb	r3, [r3, #1]
 8010bec:	4413      	add	r3, r2
 8010bee:	e7b0      	b.n	8010b52 <_parse_response+0x7e>
 8010bf0:	2a36      	cmp	r2, #54	; 0x36
 8010bf2:	d01f      	beq.n	8010c34 <_parse_response+0x160>
 8010bf4:	2aff      	cmp	r2, #255	; 0xff
 8010bf6:	d1f7      	bne.n	8010be8 <_parse_response+0x114>
 8010bf8:	4623      	mov	r3, r4
 8010bfa:	e7aa      	b.n	8010b52 <_parse_response+0x7e>
 8010bfc:	3301      	adds	r3, #1
 8010bfe:	e7a8      	b.n	8010b52 <_parse_response+0x7e>
 8010c00:	7898      	ldrb	r0, [r3, #2]
 8010c02:	3303      	adds	r3, #3
 8010c04:	e7a5      	b.n	8010b52 <_parse_response+0x7e>
 8010c06:	f893 a002 	ldrb.w	sl, [r3, #2]
 8010c0a:	f893 9003 	ldrb.w	r9, [r3, #3]
 8010c0e:	f893 8004 	ldrb.w	r8, [r3, #4]
 8010c12:	f893 e005 	ldrb.w	lr, [r3, #5]
 8010c16:	9204      	str	r2, [sp, #16]
 8010c18:	3306      	adds	r3, #6
 8010c1a:	e79a      	b.n	8010b52 <_parse_response+0x7e>
 8010c1c:	789a      	ldrb	r2, [r3, #2]
 8010c1e:	791f      	ldrb	r7, [r3, #4]
 8010c20:	9206      	str	r2, [sp, #24]
 8010c22:	78da      	ldrb	r2, [r3, #3]
 8010c24:	795e      	ldrb	r6, [r3, #5]
 8010c26:	9203      	str	r2, [sp, #12]
 8010c28:	785a      	ldrb	r2, [r3, #1]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	2201      	movs	r2, #1
 8010c2e:	3302      	adds	r3, #2
 8010c30:	9205      	str	r2, [sp, #20]
 8010c32:	e78e      	b.n	8010b52 <_parse_response+0x7e>
 8010c34:	789a      	ldrb	r2, [r3, #2]
 8010c36:	f893 b003 	ldrb.w	fp, [r3, #3]
 8010c3a:	f893 c004 	ldrb.w	ip, [r3, #4]
 8010c3e:	795d      	ldrb	r5, [r3, #5]
 8010c40:	2101      	movs	r1, #1
 8010c42:	9207      	str	r2, [sp, #28]
 8010c44:	3306      	adds	r3, #6
 8010c46:	e784      	b.n	8010b52 <_parse_response+0x7e>
 8010c48:	2000af0c 	andcs	sl, r0, ip, lsl #30
 8010c4c:	2000ac68 	andcs	sl, r0, r8, ror #24
 8010c50:	2000aa38 	andcs	sl, r0, r8, lsr sl
 8010c54:	2000aa40 	andcs	sl, r0, r0, asr #20
 8010c58:	2000aa3c 	andcs	sl, r0, ip, lsr sl

08010c5c <memcpy.isra.0>:
 8010c5c:	3801      	subs	r0, #1
 8010c5e:	440a      	add	r2, r1
 8010c60:	4291      	cmp	r1, r2
 8010c62:	d100      	bne.n	8010c66 <memcpy.isra.0+0xa>
 8010c64:	4770      	bx	lr
 8010c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c6a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010c6e:	e7f7      	b.n	8010c60 <memcpy.isra.0+0x4>

08010c70 <dhcp_client>:
 8010c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c74:	b087      	sub	sp, #28
 8010c76:	9203      	str	r2, [sp, #12]
 8010c78:	4a77      	ldr	r2, [pc, #476]	; (8010e58 <dhcp_client+0x1e8>)
 8010c7a:	460f      	mov	r7, r1
 8010c7c:	4605      	mov	r5, r0
 8010c7e:	f44f 7309 	mov.w	r3, #548	; 0x224
 8010c82:	4614      	mov	r4, r2
 8010c84:	2100      	movs	r1, #0
 8010c86:	3b01      	subs	r3, #1
 8010c88:	f802 1b01 	strb.w	r1, [r2], #1
 8010c8c:	d1fb      	bne.n	8010c86 <dhcp_client+0x16>
 8010c8e:	f240 1301 	movw	r3, #257	; 0x101
 8010c92:	2206      	movs	r2, #6
 8010c94:	4629      	mov	r1, r5
 8010c96:	4871      	ldr	r0, [pc, #452]	; (8010e5c <dhcp_client+0x1ec>)
 8010c98:	8023      	strh	r3, [r4, #0]
 8010c9a:	70a2      	strb	r2, [r4, #2]
 8010c9c:	f7ff ffde 	bl	8010c5c <memcpy.isra.0>
 8010ca0:	4b6f      	ldr	r3, [pc, #444]	; (8010e60 <dhcp_client+0x1f0>)
 8010ca2:	2044      	movs	r0, #68	; 0x44
 8010ca4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8010ca8:	f240 1335 	movw	r3, #309	; 0x135
 8010cac:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8010cb0:	f7fe fbc8 	bl	800f444 <udp_bind>
 8010cb4:	1e06      	subs	r6, r0, #0
 8010cb6:	f2c0 80c9 	blt.w	8010e4c <dhcp_client+0x1dc>
 8010cba:	f04f 0915 	mov.w	r9, #21
 8010cbe:	f8df a198 	ldr.w	sl, [pc, #408]	; 8010e58 <dhcp_client+0x1e8>
 8010cc2:	f1b9 0901 	subs.w	r9, r9, #1
 8010cc6:	d11f      	bne.n	8010d08 <dhcp_client+0x98>
 8010cc8:	464c      	mov	r4, r9
 8010cca:	2044      	movs	r0, #68	; 0x44
 8010ccc:	f7fe fbd4 	bl	800f478 <udp_unbind>
 8010cd0:	2c00      	cmp	r4, #0
 8010cd2:	f000 80be 	beq.w	8010e52 <dhcp_client+0x1e2>
 8010cd6:	2204      	movs	r2, #4
 8010cd8:	4962      	ldr	r1, [pc, #392]	; (8010e64 <dhcp_client+0x1f4>)
 8010cda:	a805      	add	r0, sp, #20
 8010cdc:	f7ff ffbe 	bl	8010c5c <memcpy.isra.0>
 8010ce0:	9b05      	ldr	r3, [sp, #20]
 8010ce2:	2204      	movs	r2, #4
 8010ce4:	4960      	ldr	r1, [pc, #384]	; (8010e68 <dhcp_client+0x1f8>)
 8010ce6:	603b      	str	r3, [r7, #0]
 8010ce8:	a805      	add	r0, sp, #20
 8010cea:	f7ff ffb7 	bl	8010c5c <memcpy.isra.0>
 8010cee:	9b05      	ldr	r3, [sp, #20]
 8010cf0:	a805      	add	r0, sp, #20
 8010cf2:	60bb      	str	r3, [r7, #8]
 8010cf4:	2204      	movs	r2, #4
 8010cf6:	495d      	ldr	r1, [pc, #372]	; (8010e6c <dhcp_client+0x1fc>)
 8010cf8:	f7ff ffb0 	bl	8010c5c <memcpy.isra.0>
 8010cfc:	2000      	movs	r0, #0
 8010cfe:	9b05      	ldr	r3, [sp, #20]
 8010d00:	607b      	str	r3, [r7, #4]
 8010d02:	b007      	add	sp, #28
 8010d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d08:	f643 5301 	movw	r3, #15617	; 0x3d01
 8010d0c:	f240 1807 	movw	r8, #263	; 0x107
 8010d10:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8010d14:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8010d18:	782b      	ldrb	r3, [r5, #0]
 8010d1a:	4a55      	ldr	r2, [pc, #340]	; (8010e70 <dhcp_client+0x200>)
 8010d1c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8010d20:	786b      	ldrb	r3, [r5, #1]
 8010d22:	fa5f fb86 	uxtb.w	fp, r6
 8010d26:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8010d2a:	78ab      	ldrb	r3, [r5, #2]
 8010d2c:	4651      	mov	r1, sl
 8010d2e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8010d32:	78eb      	ldrb	r3, [r5, #3]
 8010d34:	4658      	mov	r0, fp
 8010d36:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8010d3a:	792b      	ldrb	r3, [r5, #4]
 8010d3c:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8010d40:	796b      	ldrb	r3, [r5, #5]
 8010d42:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8010d46:	4b4b      	ldr	r3, [pc, #300]	; (8010e74 <dhcp_client+0x204>)
 8010d48:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8010d4c:	23ff      	movs	r3, #255	; 0xff
 8010d4e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8010d52:	2343      	movs	r3, #67	; 0x43
 8010d54:	f240 1205 	movw	r2, #261	; 0x105
 8010d58:	9300      	str	r3, [sp, #0]
 8010d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d5e:	f7fe fc07 	bl	800f570 <udp_send>
 8010d62:	4629      	mov	r1, r5
 8010d64:	4630      	mov	r0, r6
 8010d66:	f7ff feb5 	bl	8010ad4 <_parse_response>
 8010d6a:	2802      	cmp	r0, #2
 8010d6c:	d1a9      	bne.n	8010cc2 <dhcp_client+0x52>
 8010d6e:	f643 5303 	movw	r3, #15619	; 0x3d03
 8010d72:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8010d76:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8010d7a:	782b      	ldrb	r3, [r5, #0]
 8010d7c:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8010e78 <dhcp_client+0x208>
 8010d80:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8010d84:	786b      	ldrb	r3, [r5, #1]
 8010d86:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8010d8a:	78ab      	ldrb	r3, [r5, #2]
 8010d8c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8010d90:	78eb      	ldrb	r3, [r5, #3]
 8010d92:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8010d96:	792b      	ldrb	r3, [r5, #4]
 8010d98:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8010d9c:	796b      	ldrb	r3, [r5, #5]
 8010d9e:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8010da2:	f240 4332 	movw	r3, #1074	; 0x432
 8010da6:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8010daa:	4b2e      	ldr	r3, [pc, #184]	; (8010e64 <dhcp_client+0x1f4>)
 8010dac:	881a      	ldrh	r2, [r3, #0]
 8010dae:	885b      	ldrh	r3, [r3, #2]
 8010db0:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8010db4:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8010db8:	f240 4336 	movw	r3, #1078	; 0x436
 8010dbc:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8010dc0:	4b2e      	ldr	r3, [pc, #184]	; (8010e7c <dhcp_client+0x20c>)
 8010dc2:	221e      	movs	r2, #30
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8010dca:	230c      	movs	r3, #12
 8010dcc:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8010dd0:	9b03      	ldr	r3, [sp, #12]
 8010dd2:	1e58      	subs	r0, r3, #1
 8010dd4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010dd8:	f1a2 0e1e 	sub.w	lr, r2, #30
 8010ddc:	1c51      	adds	r1, r2, #1
 8010dde:	bb8b      	cbnz	r3, 8010e44 <dhcp_client+0x1d4>
 8010de0:	2037      	movs	r0, #55	; 0x37
 8010de2:	18a3      	adds	r3, r4, r2
 8010de4:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8010de8:	2006      	movs	r0, #6
 8010dea:	4421      	add	r1, r4
 8010dec:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8010df0:	2103      	movs	r1, #3
 8010df2:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8010df6:	210f      	movs	r1, #15
 8010df8:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8010dfc:	213a      	movs	r1, #58	; 0x3a
 8010dfe:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8010e02:	213b      	movs	r1, #59	; 0x3b
 8010e04:	f04f 0801 	mov.w	r8, #1
 8010e08:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8010e0c:	21ff      	movs	r1, #255	; 0xff
 8010e0e:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8010e12:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8010e16:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8010e1a:	2343      	movs	r3, #67	; 0x43
 8010e1c:	32f5      	adds	r2, #245	; 0xf5
 8010e1e:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8010e22:	4651      	mov	r1, sl
 8010e24:	9300      	str	r3, [sp, #0]
 8010e26:	b292      	uxth	r2, r2
 8010e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e2c:	4658      	mov	r0, fp
 8010e2e:	f7fe fb9f 	bl	800f570 <udp_send>
 8010e32:	4629      	mov	r1, r5
 8010e34:	4630      	mov	r0, r6
 8010e36:	f7ff fe4d 	bl	8010ad4 <_parse_response>
 8010e3a:	2805      	cmp	r0, #5
 8010e3c:	f47f af41 	bne.w	8010cc2 <dhcp_client+0x52>
 8010e40:	4644      	mov	r4, r8
 8010e42:	e742      	b.n	8010cca <dhcp_client+0x5a>
 8010e44:	460a      	mov	r2, r1
 8010e46:	f80c 3b01 	strb.w	r3, [ip], #1
 8010e4a:	e7c3      	b.n	8010dd4 <dhcp_client+0x164>
 8010e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010e50:	e757      	b.n	8010d02 <dhcp_client+0x92>
 8010e52:	f06f 0001 	mvn.w	r0, #1
 8010e56:	e754      	b.n	8010d02 <dhcp_client+0x92>
 8010e58:	2000aa44 	andcs	sl, r0, r4, asr #20
 8010e5c:	2000aa60 	andcs	sl, r0, r0, ror #20
 8010e60:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8010e64:	2000aa3c 	andcs	sl, r0, ip, lsr sl
 8010e68:	2000aa38 	andcs	sl, r0, r8, lsr sl
 8010e6c:	2000aa40 	andcs	sl, r0, r0, asr #20
 8010e70:	03010637 	movweq	r0, #5687	; 0x1637
 8010e74:	3b3a0f06 	blcc	8e94a94 <__exidx_end+0xe7d844>
 8010e78:	2000ab4e 	andcs	sl, r0, lr, asr #22
 8010e7c:	2000ac68 	andcs	sl, r0, r8, ror #24

08010e80 <dhcp_client_release>:
 8010e80:	b507      	push	{r0, r1, r2, lr}
 8010e82:	2044      	movs	r0, #68	; 0x44
 8010e84:	f7fe fade 	bl	800f444 <udp_bind>
 8010e88:	f243 6307 	movw	r3, #13831	; 0x3607
 8010e8c:	4911      	ldr	r1, [pc, #68]	; (8010ed4 <dhcp_client_release+0x54>)
 8010e8e:	b2c0      	uxtb	r0, r0
 8010e90:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8010e94:	2304      	movs	r3, #4
 8010e96:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8010e9a:	4b0f      	ldr	r3, [pc, #60]	; (8010ed8 <dhcp_client_release+0x58>)
 8010e9c:	781a      	ldrb	r2, [r3, #0]
 8010e9e:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8010ea2:	785a      	ldrb	r2, [r3, #1]
 8010ea4:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8010ea8:	789a      	ldrb	r2, [r3, #2]
 8010eaa:	78db      	ldrb	r3, [r3, #3]
 8010eac:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8010eb0:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8010eb4:	23ff      	movs	r3, #255	; 0xff
 8010eb6:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 8010eba:	2343      	movs	r3, #67	; 0x43
 8010ebc:	22fa      	movs	r2, #250	; 0xfa
 8010ebe:	9300      	str	r3, [sp, #0]
 8010ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ec4:	f7fe fb54 	bl	800f570 <udp_send>
 8010ec8:	2044      	movs	r0, #68	; 0x44
 8010eca:	b003      	add	sp, #12
 8010ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ed0:	f7fe bad2 	b.w	800f478 <udp_unbind>
 8010ed4:	2000aa44 	andcs	sl, r0, r4, asr #20
 8010ed8:	2000ac68 	andcs	sl, r0, r8, ror #24

08010edc <memcpy.isra.0>:
 8010edc:	3801      	subs	r0, #1
 8010ede:	440a      	add	r2, r1
 8010ee0:	4291      	cmp	r1, r2
 8010ee2:	d100      	bne.n	8010ee6 <memcpy.isra.0+0xa>
 8010ee4:	4770      	bx	lr
 8010ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010eea:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010eee:	e7f7      	b.n	8010ee0 <memcpy.isra.0+0x4>

08010ef0 <_send_report>:
 8010ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ef2:	491c      	ldr	r1, [pc, #112]	; (8010f64 <_send_report+0x74>)
 8010ef4:	4c1c      	ldr	r4, [pc, #112]	; (8010f68 <_send_report+0x78>)
 8010ef6:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8010efa:	9001      	str	r0, [sp, #4]
 8010efc:	70cb      	strb	r3, [r1, #3]
 8010efe:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010f02:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8010f06:	710b      	strb	r3, [r1, #4]
 8010f08:	7148      	strb	r0, [r1, #5]
 8010f0a:	2206      	movs	r2, #6
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	f7ff ffe5 	bl	8010edc <memcpy.isra.0>
 8010f12:	2204      	movs	r2, #4
 8010f14:	2700      	movs	r7, #0
 8010f16:	4d15      	ldr	r5, [pc, #84]	; (8010f6c <_send_report+0x7c>)
 8010f18:	eb0d 0102 	add.w	r1, sp, r2
 8010f1c:	882b      	ldrh	r3, [r5, #0]
 8010f1e:	f104 001e 	add.w	r0, r4, #30
 8010f22:	f104 060e 	add.w	r6, r4, #14
 8010f26:	8263      	strh	r3, [r4, #18]
 8010f28:	f7ff ffd8 	bl	8010edc <memcpy.isra.0>
 8010f2c:	2118      	movs	r1, #24
 8010f2e:	4630      	mov	r0, r6
 8010f30:	8327      	strh	r7, [r4, #24]
 8010f32:	f000 f9b7 	bl	80112a4 <net_chksum>
 8010f36:	2204      	movs	r2, #4
 8010f38:	8320      	strh	r0, [r4, #24]
 8010f3a:	eb0d 0102 	add.w	r1, sp, r2
 8010f3e:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8010f42:	f7ff ffcb 	bl	8010edc <memcpy.isra.0>
 8010f46:	2120      	movs	r1, #32
 8010f48:	4630      	mov	r0, r6
 8010f4a:	8527      	strh	r7, [r4, #40]	; 0x28
 8010f4c:	f000 f9aa 	bl	80112a4 <net_chksum>
 8010f50:	212e      	movs	r1, #46	; 0x2e
 8010f52:	8520      	strh	r0, [r4, #40]	; 0x28
 8010f54:	4620      	mov	r0, r4
 8010f56:	f003 f821 	bl	8013f9c <emac_eth_send>
 8010f5a:	882b      	ldrh	r3, [r5, #0]
 8010f5c:	3301      	adds	r3, #1
 8010f5e:	802b      	strh	r3, [r5, #0]
 8010f60:	b003      	add	sp, #12
 8010f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f64:	2000adc4 	andcs	sl, r0, r4, asr #27
 8010f68:	2000adcc 	andcs	sl, r0, ip, asr #27
 8010f6c:	2000ad8c 	andcs	sl, r0, ip, lsl #27

08010f70 <igmp_set_ip>:
 8010f70:	b507      	push	{r0, r1, r2, lr}
 8010f72:	2204      	movs	r2, #4
 8010f74:	6803      	ldr	r3, [r0, #0]
 8010f76:	eb0d 0102 	add.w	r1, sp, r2
 8010f7a:	4806      	ldr	r0, [pc, #24]	; (8010f94 <igmp_set_ip+0x24>)
 8010f7c:	9301      	str	r3, [sp, #4]
 8010f7e:	f7ff ffad 	bl	8010edc <memcpy.isra.0>
 8010f82:	2204      	movs	r2, #4
 8010f84:	4804      	ldr	r0, [pc, #16]	; (8010f98 <igmp_set_ip+0x28>)
 8010f86:	eb0d 0102 	add.w	r1, sp, r2
 8010f8a:	f7ff ffa7 	bl	8010edc <memcpy.isra.0>
 8010f8e:	b003      	add	sp, #12
 8010f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f94:	2000ade6 	andcs	sl, r0, r6, ror #27
 8010f98:	2000adae 	andcs	sl, r0, lr, lsr #27

08010f9c <igmp_init>:
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fa2:	4605      	mov	r5, r0
 8010fa4:	4608      	mov	r0, r1
 8010fa6:	4611      	mov	r1, r2
 8010fa8:	4b23      	ldr	r3, [pc, #140]	; (8011038 <igmp_init+0x9c>)
 8010faa:	f103 0408 	add.w	r4, r3, #8
 8010fae:	42a3      	cmp	r3, r4
 8010fb0:	d13e      	bne.n	8011030 <igmp_init+0x94>
 8010fb2:	3201      	adds	r2, #1
 8010fb4:	2a24      	cmp	r2, #36	; 0x24
 8010fb6:	d1f8      	bne.n	8010faa <igmp_init+0xe>
 8010fb8:	2600      	movs	r6, #0
 8010fba:	4b20      	ldr	r3, [pc, #128]	; (801103c <igmp_init+0xa0>)
 8010fbc:	4c20      	ldr	r4, [pc, #128]	; (8011040 <igmp_init+0xa4>)
 8010fbe:	601e      	str	r6, [r3, #0]
 8010fc0:	4b20      	ldr	r3, [pc, #128]	; (8011044 <igmp_init+0xa8>)
 8010fc2:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 8010fc6:	801e      	strh	r6, [r3, #0]
 8010fc8:	f7ff ffd2 	bl	8010f70 <igmp_set_ip>
 8010fcc:	2201      	movs	r2, #1
 8010fce:	4b1e      	ldr	r3, [pc, #120]	; (8011048 <igmp_init+0xac>)
 8010fd0:	4629      	mov	r1, r5
 8010fd2:	801a      	strh	r2, [r3, #0]
 8010fd4:	225e      	movs	r2, #94	; 0x5e
 8010fd6:	709a      	strb	r2, [r3, #2]
 8010fd8:	2206      	movs	r2, #6
 8010fda:	18a0      	adds	r0, r4, r2
 8010fdc:	f7ff ff7e 	bl	8010edc <memcpy.isra.0>
 8010fe0:	f240 4394 	movw	r3, #1172	; 0x494
 8010fe4:	8463      	strh	r3, [r4, #34]	; 0x22
 8010fe6:	2316      	movs	r3, #22
 8010fe8:	f8df 9060 	ldr.w	r9, [pc, #96]	; 801104c <igmp_init+0xb0>
 8010fec:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8011050 <igmp_init+0xb4>
 8010ff0:	84e3      	strh	r3, [r4, #38]	; 0x26
 8010ff2:	f8c4 9014 	str.w	r9, [r4, #20]
 8010ff6:	4b17      	ldr	r3, [pc, #92]	; (8011054 <igmp_init+0xb8>)
 8010ff8:	f8c4 800c 	str.w	r8, [r4, #12]
 8010ffc:	8227      	strh	r7, [r4, #16]
 8010ffe:	84a6      	strh	r6, [r4, #36]	; 0x24
 8011000:	4c15      	ldr	r4, [pc, #84]	; (8011058 <igmp_init+0xbc>)
 8011002:	2206      	movs	r2, #6
 8011004:	6023      	str	r3, [r4, #0]
 8011006:	f44f 7300 	mov.w	r3, #512	; 0x200
 801100a:	18a0      	adds	r0, r4, r2
 801100c:	80a3      	strh	r3, [r4, #4]
 801100e:	4629      	mov	r1, r5
 8011010:	f7ff ff64 	bl	8010edc <memcpy.isra.0>
 8011014:	23e0      	movs	r3, #224	; 0xe0
 8011016:	83e3      	strh	r3, [r4, #30]
 8011018:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 801101c:	4a0f      	ldr	r2, [pc, #60]	; (801105c <igmp_init+0xc0>)
 801101e:	f8c4 9014 	str.w	r9, [r4, #20]
 8011022:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8011026:	f8c4 800c 	str.w	r8, [r4, #12]
 801102a:	8227      	strh	r7, [r4, #16]
 801102c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011030:	f803 1b01 	strb.w	r1, [r3], #1
 8011034:	e7bb      	b.n	8010fae <igmp_init+0x12>
 8011036:	bf00      	nop
 8011038:	2000ac6c 	andcs	sl, r0, ip, ror #24
 801103c:	2000ad90 	mulcs	r0, r0, sp
 8011040:	2000adcc 	andcs	sl, r0, ip, asr #27
 8011044:	2000ad8c 	andcs	sl, r0, ip, lsl #27
 8011048:	2000adc4 	andcs	sl, r0, r4, asr #27
 801104c:	02010040 	andeq	r0, r1, #64	; 0x40
 8011050:	00460008 	subeq	r0, r6, r8
 8011054:	005e0001 	subseq	r0, lr, r1
 8011058:	2000ad94 	mulcs	r0, r4, sp
 801105c:	04940200 	ldreq	r0, [r4], #512	; 0x200

08011060 <igmp_handle>:
 8011060:	7b83      	ldrb	r3, [r0, #14]
 8011062:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011066:	2b45      	cmp	r3, #69	; 0x45
 8011068:	d116      	bne.n	8011098 <igmp_handle+0x38>
 801106a:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 801106e:	2b11      	cmp	r3, #17
 8011070:	d112      	bne.n	8011098 <igmp_handle+0x38>
 8011072:	4b20      	ldr	r3, [pc, #128]	; (80110f4 <igmp_handle+0x94>)
 8011074:	f100 051e 	add.w	r5, r0, #30
 8011078:	9300      	str	r3, [sp, #0]
 801107a:	466a      	mov	r2, sp
 801107c:	462b      	mov	r3, r5
 801107e:	f100 0622 	add.w	r6, r0, #34	; 0x22
 8011082:	42b3      	cmp	r3, r6
 8011084:	d10b      	bne.n	801109e <igmp_handle+0x3e>
 8011086:	2401      	movs	r4, #1
 8011088:	2100      	movs	r1, #0
 801108a:	f04f 0c01 	mov.w	ip, #1
 801108e:	4b1a      	ldr	r3, [pc, #104]	; (80110f8 <igmp_handle+0x98>)
 8011090:	4a1a      	ldr	r2, [pc, #104]	; (80110fc <igmp_handle+0x9c>)
 8011092:	681f      	ldr	r7, [r3, #0]
 8011094:	428f      	cmp	r7, r1
 8011096:	d10a      	bne.n	80110ae <igmp_handle+0x4e>
 8011098:	b003      	add	sp, #12
 801109a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801109e:	f813 4b01 	ldrb.w	r4, [r3], #1
 80110a2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80110a6:	428c      	cmp	r4, r1
 80110a8:	d0eb      	beq.n	8011082 <igmp_handle+0x22>
 80110aa:	2400      	movs	r4, #0
 80110ac:	e7ec      	b.n	8011088 <igmp_handle+0x28>
 80110ae:	6813      	ldr	r3, [r2, #0]
 80110b0:	9301      	str	r3, [sp, #4]
 80110b2:	b924      	cbnz	r4, 80110be <igmp_handle+0x5e>
 80110b4:	462b      	mov	r3, r5
 80110b6:	f10d 0e04 	add.w	lr, sp, #4
 80110ba:	42b3      	cmp	r3, r6
 80110bc:	d10e      	bne.n	80110dc <igmp_handle+0x7c>
 80110be:	f892 e005 	ldrb.w	lr, [r2, #5]
 80110c2:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80110c6:	f1be 0f01 	cmp.w	lr, #1
 80110ca:	d110      	bne.n	80110ee <igmp_handle+0x8e>
 80110cc:	f892 e004 	ldrb.w	lr, [r2, #4]
 80110d0:	459e      	cmp	lr, r3
 80110d2:	d909      	bls.n	80110e8 <igmp_handle+0x88>
 80110d4:	085b      	lsrs	r3, r3, #1
 80110d6:	3301      	adds	r3, #1
 80110d8:	7113      	strb	r3, [r2, #4]
 80110da:	e005      	b.n	80110e8 <igmp_handle+0x88>
 80110dc:	f813 9b01 	ldrb.w	r9, [r3], #1
 80110e0:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80110e4:	45c1      	cmp	r9, r8
 80110e6:	d0e8      	beq.n	80110ba <igmp_handle+0x5a>
 80110e8:	3101      	adds	r1, #1
 80110ea:	3208      	adds	r2, #8
 80110ec:	e7d2      	b.n	8011094 <igmp_handle+0x34>
 80110ee:	f882 c005 	strb.w	ip, [r2, #5]
 80110f2:	e7ef      	b.n	80110d4 <igmp_handle+0x74>
 80110f4:	010000e0 	smlatteq	r0, r0, r0, r0
 80110f8:	2000ad90 	mulcs	r0, r0, sp
 80110fc:	2000ac6c 	andcs	sl, r0, ip, ror #24

08011100 <igmp_timer>:
 8011100:	b570      	push	{r4, r5, r6, lr}
 8011102:	2500      	movs	r5, #0
 8011104:	2602      	movs	r6, #2
 8011106:	4c0a      	ldr	r4, [pc, #40]	; (8011130 <igmp_timer+0x30>)
 8011108:	7963      	ldrb	r3, [r4, #5]
 801110a:	2b01      	cmp	r3, #1
 801110c:	d109      	bne.n	8011122 <igmp_timer+0x22>
 801110e:	7923      	ldrb	r3, [r4, #4]
 8011110:	b13b      	cbz	r3, 8011122 <igmp_timer+0x22>
 8011112:	3b01      	subs	r3, #1
 8011114:	b2db      	uxtb	r3, r3
 8011116:	7123      	strb	r3, [r4, #4]
 8011118:	b91b      	cbnz	r3, 8011122 <igmp_timer+0x22>
 801111a:	6820      	ldr	r0, [r4, #0]
 801111c:	f7ff fee8 	bl	8010ef0 <_send_report>
 8011120:	7166      	strb	r6, [r4, #5]
 8011122:	3501      	adds	r5, #1
 8011124:	2d24      	cmp	r5, #36	; 0x24
 8011126:	f104 0408 	add.w	r4, r4, #8
 801112a:	d1ed      	bne.n	8011108 <igmp_timer+0x8>
 801112c:	bd70      	pop	{r4, r5, r6, pc}
 801112e:	bf00      	nop
 8011130:	2000ac6c 	andcs	sl, r0, ip, ror #24

08011134 <igmp_join>:
 8011134:	b538      	push	{r3, r4, r5, lr}
 8011136:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 801113a:	2be0      	cmp	r3, #224	; 0xe0
 801113c:	d11b      	bne.n	8011176 <igmp_join+0x42>
 801113e:	4911      	ldr	r1, [pc, #68]	; (8011184 <igmp_join+0x50>)
 8011140:	680c      	ldr	r4, [r1, #0]
 8011142:	2c24      	cmp	r4, #36	; 0x24
 8011144:	d01a      	beq.n	801117c <igmp_join+0x48>
 8011146:	2300      	movs	r3, #0
 8011148:	4a0f      	ldr	r2, [pc, #60]	; (8011188 <igmp_join+0x54>)
 801114a:	429c      	cmp	r4, r3
 801114c:	dc0d      	bgt.n	801116a <igmp_join+0x36>
 801114e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8011152:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 8011156:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801115a:	8093      	strh	r3, [r2, #4]
 801115c:	1c63      	adds	r3, r4, #1
 801115e:	600b      	str	r3, [r1, #0]
 8011160:	f7ff fec6 	bl	8010ef0 <_send_report>
 8011164:	4623      	mov	r3, r4
 8011166:	4618      	mov	r0, r3
 8011168:	bd38      	pop	{r3, r4, r5, pc}
 801116a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 801116e:	4285      	cmp	r5, r0
 8011170:	d0f9      	beq.n	8011166 <igmp_join+0x32>
 8011172:	3301      	adds	r3, #1
 8011174:	e7e9      	b.n	801114a <igmp_join+0x16>
 8011176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801117a:	e7f4      	b.n	8011166 <igmp_join+0x32>
 801117c:	f06f 0301 	mvn.w	r3, #1
 8011180:	e7f1      	b.n	8011166 <igmp_join+0x32>
 8011182:	bf00      	nop
 8011184:	2000ad90 	mulcs	r0, r0, sp
 8011188:	2000ac6c 	andcs	sl, r0, ip, ror #24

0801118c <igmp_leave>:
 801118c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011190:	2600      	movs	r6, #0
 8011192:	4f1c      	ldr	r7, [pc, #112]	; (8011204 <igmp_leave+0x78>)
 8011194:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8011198:	4283      	cmp	r3, r0
 801119a:	d007      	beq.n	80111ac <igmp_leave+0x20>
 801119c:	3601      	adds	r6, #1
 801119e:	2e24      	cmp	r6, #36	; 0x24
 80111a0:	d1f8      	bne.n	8011194 <igmp_leave+0x8>
 80111a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80111a6:	b002      	add	sp, #8
 80111a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ac:	2400      	movs	r4, #0
 80111ae:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8011208 <igmp_leave+0x7c>
 80111b2:	4d16      	ldr	r5, [pc, #88]	; (801120c <igmp_leave+0x80>)
 80111b4:	f8b8 3000 	ldrh.w	r3, [r8]
 80111b8:	2118      	movs	r1, #24
 80111ba:	9001      	str	r0, [sp, #4]
 80111bc:	4814      	ldr	r0, [pc, #80]	; (8011210 <igmp_leave+0x84>)
 80111be:	826b      	strh	r3, [r5, #18]
 80111c0:	832c      	strh	r4, [r5, #24]
 80111c2:	f000 f86f 	bl	80112a4 <net_chksum>
 80111c6:	2204      	movs	r2, #4
 80111c8:	8328      	strh	r0, [r5, #24]
 80111ca:	eb0d 0102 	add.w	r1, sp, r2
 80111ce:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 80111d2:	f7ff fe83 	bl	8010edc <memcpy.isra.0>
 80111d6:	2120      	movs	r1, #32
 80111d8:	f105 000e 	add.w	r0, r5, #14
 80111dc:	852c      	strh	r4, [r5, #40]	; 0x28
 80111de:	f000 f861 	bl	80112a4 <net_chksum>
 80111e2:	212e      	movs	r1, #46	; 0x2e
 80111e4:	8528      	strh	r0, [r5, #40]	; 0x28
 80111e6:	4628      	mov	r0, r5
 80111e8:	f002 fed8 	bl	8013f9c <emac_eth_send>
 80111ec:	f8b8 3000 	ldrh.w	r3, [r8]
 80111f0:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 80111f4:	3301      	adds	r3, #1
 80111f6:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 80111fa:	4620      	mov	r0, r4
 80111fc:	f8a8 3000 	strh.w	r3, [r8]
 8011200:	80b4      	strh	r4, [r6, #4]
 8011202:	e7d0      	b.n	80111a6 <igmp_leave+0x1a>
 8011204:	2000ac6c 	andcs	sl, r0, ip, ror #24
 8011208:	2000ad8c 	andcs	sl, r0, ip, lsl #27
 801120c:	2000ad94 	mulcs	r0, r4, sp
 8011210:	2000adda 	ldrdcs	sl, [r0], -sl	; <UNPREDICTABLE>

08011214 <igmp_shutdown>:
 8011214:	b570      	push	{r4, r5, r6, lr}
 8011216:	2500      	movs	r5, #0
 8011218:	462e      	mov	r6, r5
 801121a:	4c07      	ldr	r4, [pc, #28]	; (8011238 <igmp_shutdown+0x24>)
 801121c:	6820      	ldr	r0, [r4, #0]
 801121e:	b120      	cbz	r0, 801122a <igmp_shutdown+0x16>
 8011220:	f7ff ffb4 	bl	801118c <igmp_leave>
 8011224:	6026      	str	r6, [r4, #0]
 8011226:	7166      	strb	r6, [r4, #5]
 8011228:	7126      	strb	r6, [r4, #4]
 801122a:	3501      	adds	r5, #1
 801122c:	2d24      	cmp	r5, #36	; 0x24
 801122e:	f104 0408 	add.w	r4, r4, #8
 8011232:	d1f3      	bne.n	801121c <igmp_shutdown+0x8>
 8011234:	bd70      	pop	{r4, r5, r6, pc}
 8011236:	bf00      	nop
 8011238:	2000ac6c 	andcs	sl, r0, ip, ror #24

0801123c <ip_set_ip>:
 801123c:	b510      	push	{r4, lr}
 801123e:	4604      	mov	r4, r0
 8011240:	f7fe f858 	bl	800f2f4 <udp_set_ip>
 8011244:	4620      	mov	r0, r4
 8011246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801124a:	f7ff be91 	b.w	8010f70 <igmp_set_ip>

0801124e <ip_init>:
 801124e:	b538      	push	{r3, r4, r5, lr}
 8011250:	4604      	mov	r4, r0
 8011252:	460d      	mov	r5, r1
 8011254:	f7fe f86e 	bl	800f334 <udp_init>
 8011258:	4629      	mov	r1, r5
 801125a:	4620      	mov	r0, r4
 801125c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011260:	f7ff be9c 	b.w	8010f9c <igmp_init>

08011264 <ip_shutdown>:
 8011264:	b508      	push	{r3, lr}
 8011266:	f7ff ffd5 	bl	8011214 <igmp_shutdown>
 801126a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801126e:	f7fe b893 	b.w	800f398 <udp_shutdown>

08011272 <ip_handle>:
 8011272:	7b82      	ldrb	r2, [r0, #14]
 8011274:	7dc3      	ldrb	r3, [r0, #23]
 8011276:	2a45      	cmp	r2, #69	; 0x45
 8011278:	d003      	beq.n	8011282 <ip_handle+0x10>
 801127a:	2b02      	cmp	r3, #2
 801127c:	d111      	bne.n	80112a2 <ip_handle+0x30>
 801127e:	f7ff beef 	b.w	8011060 <igmp_handle>
 8011282:	2b06      	cmp	r3, #6
 8011284:	d00b      	beq.n	801129e <ip_handle+0x2c>
 8011286:	d804      	bhi.n	8011292 <ip_handle+0x20>
 8011288:	2b01      	cmp	r3, #1
 801128a:	d006      	beq.n	801129a <ip_handle+0x28>
 801128c:	2b02      	cmp	r3, #2
 801128e:	d0f6      	beq.n	801127e <ip_handle+0xc>
 8011290:	4770      	bx	lr
 8011292:	2b11      	cmp	r3, #17
 8011294:	d105      	bne.n	80112a2 <ip_handle+0x30>
 8011296:	f7fe b881 	b.w	800f39c <udp_handle>
 801129a:	f000 b82b 	b.w	80112f4 <icmp_handle>
 801129e:	f7fd bdcd 	b.w	800ee3c <tcp_handle>
 80112a2:	4770      	bx	lr

080112a4 <net_chksum>:
 80112a4:	2300      	movs	r3, #0
 80112a6:	f021 0201 	bic.w	r2, r1, #1
 80112aa:	b530      	push	{r4, r5, lr}
 80112ac:	4402      	add	r2, r0
 80112ae:	084c      	lsrs	r4, r1, #1
 80112b0:	4290      	cmp	r0, r2
 80112b2:	d10e      	bne.n	80112d2 <net_chksum+0x2e>
 80112b4:	f06f 0201 	mvn.w	r2, #1
 80112b8:	fb02 1104 	mla	r1, r2, r4, r1
 80112bc:	b121      	cbz	r1, 80112c8 <net_chksum+0x24>
 80112be:	7802      	ldrb	r2, [r0, #0]
 80112c0:	0212      	lsls	r2, r2, #8
 80112c2:	ba52      	rev16	r2, r2
 80112c4:	b292      	uxth	r2, r2
 80112c6:	4413      	add	r3, r2
 80112c8:	0c1a      	lsrs	r2, r3, #16
 80112ca:	d106      	bne.n	80112da <net_chksum+0x36>
 80112cc:	43d8      	mvns	r0, r3
 80112ce:	b280      	uxth	r0, r0
 80112d0:	bd30      	pop	{r4, r5, pc}
 80112d2:	f830 5b02 	ldrh.w	r5, [r0], #2
 80112d6:	442b      	add	r3, r5
 80112d8:	e7ea      	b.n	80112b0 <net_chksum+0xc>
 80112da:	b29b      	uxth	r3, r3
 80112dc:	e7f3      	b.n	80112c6 <net_chksum+0x22>

080112de <memcpy.isra.0>:
 80112de:	3801      	subs	r0, #1
 80112e0:	440a      	add	r2, r1
 80112e2:	4291      	cmp	r1, r2
 80112e4:	d100      	bne.n	80112e8 <memcpy.isra.0+0xa>
 80112e6:	4770      	bx	lr
 80112e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112ec:	f800 3f01 	strb.w	r3, [r0, #1]!
 80112f0:	e7f7      	b.n	80112e2 <memcpy.isra.0+0x4>
	...

080112f4 <icmp_handle>:
 80112f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80112f6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80112fa:	4604      	mov	r4, r0
 80112fc:	2b08      	cmp	r3, #8
 80112fe:	d13e      	bne.n	801137e <icmp_handle+0x8a>
 8011300:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8011304:	2d00      	cmp	r5, #0
 8011306:	d13a      	bne.n	801137e <icmp_handle+0x8a>
 8011308:	1d86      	adds	r6, r0, #6
 801130a:	4631      	mov	r1, r6
 801130c:	2206      	movs	r2, #6
 801130e:	f7ff ffe6 	bl	80112de <memcpy.isra.0>
 8011312:	4630      	mov	r0, r6
 8011314:	2206      	movs	r2, #6
 8011316:	491b      	ldr	r1, [pc, #108]	; (8011384 <icmp_handle+0x90>)
 8011318:	f7ff ffe1 	bl	80112de <memcpy.isra.0>
 801131c:	8a63      	ldrh	r3, [r4, #18]
 801131e:	f104 061a 	add.w	r6, r4, #26
 8011322:	43db      	mvns	r3, r3
 8011324:	4631      	mov	r1, r6
 8011326:	2204      	movs	r2, #4
 8011328:	8263      	strh	r3, [r4, #18]
 801132a:	f104 001e 	add.w	r0, r4, #30
 801132e:	f7ff ffd6 	bl	80112de <memcpy.isra.0>
 8011332:	2204      	movs	r2, #4
 8011334:	4b14      	ldr	r3, [pc, #80]	; (8011388 <icmp_handle+0x94>)
 8011336:	eb0d 0102 	add.w	r1, sp, r2
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4630      	mov	r0, r6
 801133e:	f104 060e 	add.w	r6, r4, #14
 8011342:	9301      	str	r3, [sp, #4]
 8011344:	f7ff ffcb 	bl	80112de <memcpy.isra.0>
 8011348:	2114      	movs	r1, #20
 801134a:	4630      	mov	r0, r6
 801134c:	7625      	strb	r5, [r4, #24]
 801134e:	7665      	strb	r5, [r4, #25]
 8011350:	f7ff ffa8 	bl	80112a4 <net_chksum>
 8011354:	8a21      	ldrh	r1, [r4, #16]
 8011356:	8320      	strh	r0, [r4, #24]
 8011358:	ba49      	rev16	r1, r1
 801135a:	b289      	uxth	r1, r1
 801135c:	4630      	mov	r0, r6
 801135e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8011362:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8011366:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 801136a:	f7ff ff9b 	bl	80112a4 <net_chksum>
 801136e:	8a21      	ldrh	r1, [r4, #16]
 8011370:	84a0      	strh	r0, [r4, #36]	; 0x24
 8011372:	ba49      	rev16	r1, r1
 8011374:	b289      	uxth	r1, r1
 8011376:	4620      	mov	r0, r4
 8011378:	310e      	adds	r1, #14
 801137a:	f002 fe0f 	bl	8013f9c <emac_eth_send>
 801137e:	b002      	add	sp, #8
 8011380:	bd70      	pop	{r4, r5, r6, pc}
 8011382:	bf00      	nop
 8011384:	20002f10 	andcs	r2, r0, r0, lsl pc
 8011388:	20002f04 	andcs	r2, r0, r4, lsl #30

0801138c <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 801138c:	b430      	push	{r4, r5}
 801138e:	b168      	cbz	r0, 80113ac <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8011390:	2300      	movs	r3, #0
 8011392:	7905      	ldrb	r5, [r0, #4]
 8011394:	5cd4      	ldrb	r4, [r2, r3]
 8011396:	b11c      	cbz	r4, 80113a0 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8011398:	1c5c      	adds	r4, r3, #1
 801139a:	429d      	cmp	r5, r3
 801139c:	4623      	mov	r3, r4
 801139e:	dcf9      	bgt.n	8011394 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 80113a0:	6804      	ldr	r4, [r0, #0]
 80113a2:	b2db      	uxtb	r3, r3
 80113a4:	69e4      	ldr	r4, [r4, #28]
 80113a6:	46a4      	mov	ip, r4
 80113a8:	bc30      	pop	{r4, r5}
 80113aa:	4760      	bx	ip
 80113ac:	bc30      	pop	{r4, r5}
 80113ae:	4770      	bx	lr

080113b0 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 80113b0:	b110      	cbz	r0, 80113b8 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 80113b2:	6803      	ldr	r3, [r0, #0]
 80113b4:	691b      	ldr	r3, [r3, #16]
 80113b6:	4718      	bx	r3
 80113b8:	4770      	bx	lr

080113ba <Display::Printf(unsigned char, char const*, ...)>:
 80113ba:	b40c      	push	{r2, r3}
 80113bc:	b570      	push	{r4, r5, r6, lr}
 80113be:	6984      	ldr	r4, [r0, #24]
 80113c0:	4605      	mov	r5, r0
 80113c2:	460e      	mov	r6, r1
 80113c4:	b08a      	sub	sp, #40	; 0x28
 80113c6:	b174      	cbz	r4, 80113e6 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 80113c8:	ab0f      	add	r3, sp, #60	; 0x3c
 80113ca:	2120      	movs	r1, #32
 80113cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80113ce:	a802      	add	r0, sp, #8
 80113d0:	9301      	str	r3, [sp, #4]
 80113d2:	f001 fe95 	bl	8013100 <vsnprintf>
 80113d6:	4604      	mov	r4, r0
 80113d8:	69a8      	ldr	r0, [r5, #24]
 80113da:	4631      	mov	r1, r6
 80113dc:	6803      	ldr	r3, [r0, #0]
 80113de:	aa02      	add	r2, sp, #8
 80113e0:	69dd      	ldr	r5, [r3, #28]
 80113e2:	b2a3      	uxth	r3, r4
 80113e4:	47a8      	blx	r5
 80113e6:	4620      	mov	r0, r4
 80113e8:	b00a      	add	sp, #40	; 0x28
 80113ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113ee:	b002      	add	sp, #8
 80113f0:	4770      	bx	lr

080113f2 <Display::Status(Display7SegmentMessage)>:
 80113f2:	7c43      	ldrb	r3, [r0, #17]
 80113f4:	b513      	push	{r0, r1, r4, lr}
 80113f6:	4604      	mov	r4, r0
 80113f8:	b19b      	cbz	r3, 8011422 <Display::Status(Display7SegmentMessage)+0x30>
 80113fa:	43c9      	mvns	r1, r1
 80113fc:	2312      	movs	r3, #18
 80113fe:	7a00      	ldrb	r0, [r0, #8]
 8011400:	f88d 3004 	strb.w	r3, [sp, #4]
 8011404:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8011408:	f88d 1006 	strb.w	r1, [sp, #6]
 801140c:	f88d 3005 	strb.w	r3, [sp, #5]
 8011410:	f002 fe5c 	bl	80140cc <gd32_i2c_set_address(unsigned char)>
 8011414:	68e0      	ldr	r0, [r4, #12]
 8011416:	f002 fe51 	bl	80140bc <gd32_i2c_set_baudrate(unsigned int)>
 801141a:	2103      	movs	r1, #3
 801141c:	a801      	add	r0, sp, #4
 801141e:	f002 fe5b 	bl	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 8011422:	b002      	add	sp, #8
 8011424:	bd10      	pop	{r4, pc}
	...

08011428 <DisplayUdf::DisplayUdf()>:
 8011428:	b510      	push	{r4, lr}
 801142a:	4604      	mov	r4, r0
 801142c:	f000 ff6a 	bl	8012304 <Display::Display()>
 8011430:	2202      	movs	r2, #2
 8011432:	2300      	movs	r3, #0
 8011434:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8011438:	4b05      	ldr	r3, [pc, #20]	; (8011450 <DisplayUdf::DisplayUdf()+0x28>)
 801143a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801143e:	601c      	str	r4, [r3, #0]
 8011440:	2301      	movs	r3, #1
 8011442:	f802 3b01 	strb.w	r3, [r2], #1
 8011446:	3301      	adds	r3, #1
 8011448:	2b15      	cmp	r3, #21
 801144a:	d1fa      	bne.n	8011442 <DisplayUdf::DisplayUdf()+0x1a>
 801144c:	4620      	mov	r0, r4
 801144e:	bd10      	pop	{r4, pc}
 8011450:	2000adfc 	strdcs	sl, [r0], -ip

08011454 <DisplayUdf::SetTitle(char const*, ...)>:
 8011454:	b40e      	push	{r1, r2, r3}
 8011456:	b517      	push	{r0, r1, r2, r4, lr}
 8011458:	ab05      	add	r3, sp, #20
 801145a:	f853 2b04 	ldr.w	r2, [r3], #4
 801145e:	4604      	mov	r4, r0
 8011460:	211f      	movs	r1, #31
 8011462:	301c      	adds	r0, #28
 8011464:	9301      	str	r3, [sp, #4]
 8011466:	f001 fe4b 	bl	8013100 <vsnprintf>
 801146a:	2300      	movs	r3, #0
 801146c:	4404      	add	r4, r0
 801146e:	7723      	strb	r3, [r4, #28]
 8011470:	b003      	add	sp, #12
 8011472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011476:	b003      	add	sp, #12
 8011478:	4770      	bx	lr
	...

0801147c <DisplayUdf::ShowEmacStart()>:
 801147c:	b510      	push	{r4, lr}
 801147e:	4604      	mov	r4, r0
 8011480:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8011484:	6980      	ldr	r0, [r0, #24]
 8011486:	f7ff ff93 	bl	80113b0 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801148a:	4620      	mov	r0, r4
 801148c:	4a02      	ldr	r2, [pc, #8]	; (8011498 <DisplayUdf::ShowEmacStart()+0x1c>)
 801148e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011492:	f7ff ff92 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 8011496:	bd10      	pop	{r4, pc}
 8011498:	08016b4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, r9, fp, sp, lr}

0801149c <DisplayUdf::ShowIpAddress()>:
 801149c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114a0:	4604      	mov	r4, r0
 80114a2:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80114a6:	b086      	sub	sp, #24
 80114a8:	6980      	ldr	r0, [r0, #24]
 80114aa:	f7ff ff81 	bl	80113b0 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80114ae:	4b13      	ldr	r3, [pc, #76]	; (80114fc <DisplayUdf::ShowIpAddress()+0x60>)
 80114b0:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 80114b4:	681d      	ldr	r5, [r3, #0]
 80114b6:	69a8      	ldr	r0, [r5, #24]
 80114b8:	692e      	ldr	r6, [r5, #16]
 80114ba:	f7f5 fe61 	bl	8007180 <__popcountsi2>
 80114be:	78eb      	ldrb	r3, [r5, #3]
 80114c0:	fa5f f886 	uxtb.w	r8, r6
 80114c4:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80114c8:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 80114cc:	0e36      	lsrs	r6, r6, #24
 80114ce:	b99b      	cbnz	r3, 80114f8 <DisplayUdf::ShowIpAddress()+0x5c>
 80114d0:	786b      	ldrb	r3, [r5, #1]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	bf14      	ite	ne
 80114d6:	2244      	movne	r2, #68	; 0x44
 80114d8:	2253      	moveq	r2, #83	; 0x53
 80114da:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80114de:	4643      	mov	r3, r8
 80114e0:	4639      	mov	r1, r7
 80114e2:	4620      	mov	r0, r4
 80114e4:	e9cd a601 	strd	sl, r6, [sp, #4]
 80114e8:	4a05      	ldr	r2, [pc, #20]	; (8011500 <DisplayUdf::ShowIpAddress()+0x64>)
 80114ea:	f8cd 9000 	str.w	r9, [sp]
 80114ee:	f7ff ff64 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 80114f2:	b006      	add	sp, #24
 80114f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114f8:	225a      	movs	r2, #90	; 0x5a
 80114fa:	e7ee      	b.n	80114da <DisplayUdf::ShowIpAddress()+0x3e>
 80114fc:	2000a7cc 	andcs	sl, r0, ip, asr #15
 8011500:	08016b5a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, fp, sp, lr}

08011504 <DisplayUdf::ShowNetmask()>:
 8011504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011506:	4604      	mov	r4, r0
 8011508:	4b0b      	ldr	r3, [pc, #44]	; (8011538 <DisplayUdf::ShowNetmask()+0x34>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	699b      	ldr	r3, [r3, #24]
 801150e:	0e1a      	lsrs	r2, r3, #24
 8011510:	9202      	str	r2, [sp, #8]
 8011512:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011516:	9201      	str	r2, [sp, #4]
 8011518:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801151c:	9200      	str	r2, [sp, #0]
 801151e:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8011522:	4a06      	ldr	r2, [pc, #24]	; (801153c <DisplayUdf::ShowNetmask()+0x38>)
 8011524:	b2db      	uxtb	r3, r3
 8011526:	f7ff ff48 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 801152a:	4620      	mov	r0, r4
 801152c:	b004      	add	sp, #16
 801152e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011532:	f7ff bfb3 	b.w	801149c <DisplayUdf::ShowIpAddress()>
 8011536:	bf00      	nop
 8011538:	2000a7cc 	andcs	sl, r0, ip, asr #15
 801153c:	08016b6c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, fp, sp, lr}

08011540 <DisplayUdf::ShowGatewayIp()>:
 8011540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011542:	4604      	mov	r4, r0
 8011544:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8011548:	6980      	ldr	r0, [r0, #24]
 801154a:	f7ff ff31 	bl	80113b0 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801154e:	4b0a      	ldr	r3, [pc, #40]	; (8011578 <DisplayUdf::ShowGatewayIp()+0x38>)
 8011550:	4620      	mov	r0, r4
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8011558:	695b      	ldr	r3, [r3, #20]
 801155a:	0e1a      	lsrs	r2, r3, #24
 801155c:	9202      	str	r2, [sp, #8]
 801155e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011562:	9201      	str	r2, [sp, #4]
 8011564:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011568:	9200      	str	r2, [sp, #0]
 801156a:	b2db      	uxtb	r3, r3
 801156c:	4a03      	ldr	r2, [pc, #12]	; (801157c <DisplayUdf::ShowGatewayIp()+0x3c>)
 801156e:	f7ff ff24 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 8011572:	b004      	add	sp, #16
 8011574:	bd10      	pop	{r4, pc}
 8011576:	bf00      	nop
 8011578:	2000a7cc 	andcs	sl, r0, ip, asr #15
 801157c:	08016b7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, fp, sp, lr}

08011580 <DisplayUdf::ShowHostName()>:
 8011580:	b510      	push	{r4, lr}
 8011582:	4604      	mov	r4, r0
 8011584:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8011588:	6980      	ldr	r0, [r0, #24]
 801158a:	f7ff ff11 	bl	80113b0 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801158e:	4b05      	ldr	r3, [pc, #20]	; (80115a4 <DisplayUdf::ShowHostName()+0x24>)
 8011590:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	69a0      	ldr	r0, [r4, #24]
 8011598:	321c      	adds	r2, #28
 801159a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801159e:	f7ff bef5 	b.w	801138c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80115a2:	bf00      	nop
 80115a4:	2000a7cc 	andcs	sl, r0, ip, asr #15

080115a8 <DisplayUdf::Show()>:
 80115a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80115aa:	4604      	mov	r4, r0
 80115ac:	21ff      	movs	r1, #255	; 0xff
 80115ae:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 80115b2:	f100 0250 	add.w	r2, r0, #80	; 0x50
 80115b6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80115ba:	2806      	cmp	r0, #6
 80115bc:	bf88      	it	hi
 80115be:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d1f7      	bne.n	80115b6 <DisplayUdf::Show()+0xe>
 80115c6:	2501      	movs	r5, #1
 80115c8:	4629      	mov	r1, r5
 80115ca:	3501      	adds	r5, #1
 80115cc:	69a0      	ldr	r0, [r4, #24]
 80115ce:	b2ed      	uxtb	r5, r5
 80115d0:	f7ff feee 	bl	80113b0 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80115d4:	2d06      	cmp	r5, #6
 80115d6:	d1f7      	bne.n	80115c8 <DisplayUdf::Show()+0x20>
 80115d8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80115dc:	69a0      	ldr	r0, [r4, #24]
 80115de:	f104 021c 	add.w	r2, r4, #28
 80115e2:	f7ff fed3 	bl	801138c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80115e6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80115ea:	69a0      	ldr	r0, [r4, #24]
 80115ec:	4a0d      	ldr	r2, [pc, #52]	; (8011624 <DisplayUdf::Show()+0x7c>)
 80115ee:	f7ff fecd 	bl	801138c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80115f2:	4b0d      	ldr	r3, [pc, #52]	; (8011628 <DisplayUdf::Show()+0x80>)
 80115f4:	4a0d      	ldr	r2, [pc, #52]	; (801162c <DisplayUdf::Show()+0x84>)
 80115f6:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80115fa:	9300      	str	r3, [sp, #0]
 80115fc:	4620      	mov	r0, r4
 80115fe:	2303      	movs	r3, #3
 8011600:	f7ff fedb 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 8011604:	4620      	mov	r0, r4
 8011606:	f7ff ff49 	bl	801149c <DisplayUdf::ShowIpAddress()>
 801160a:	4620      	mov	r0, r4
 801160c:	f7ff ff98 	bl	8011540 <DisplayUdf::ShowGatewayIp()>
 8011610:	4620      	mov	r0, r4
 8011612:	f7ff ff77 	bl	8011504 <DisplayUdf::ShowNetmask()>
 8011616:	4620      	mov	r0, r4
 8011618:	b003      	add	sp, #12
 801161a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801161e:	f7ff bfaf 	b.w	8011580 <DisplayUdf::ShowHostName()>
 8011622:	bf00      	nop
 8011624:	0801517f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, ip, lr}
 8011628:	2000ae94 	mulcs	r0, r4, lr
 801162c:	08016b8a 	stmdaeq	r1, {r1, r3, r7, r8, r9, fp, sp, lr}

08011630 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8011630:	3901      	subs	r1, #1
 8011632:	b510      	push	{r4, lr}
 8011634:	4604      	mov	r4, r0
 8011636:	2903      	cmp	r1, #3
 8011638:	d814      	bhi.n	8011664 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 801163a:	e8df f001 	tbb	[pc, r1]
 801163e:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 8011642:	4b14      	ldr	r3, [pc, #80]	; (8011694 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011644:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8011648:	6818      	ldr	r0, [r3, #0]
 801164a:	f7ff fed2 	bl	80113f2 <Display::Status(Display7SegmentMessage)>
 801164e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011652:	69a0      	ldr	r0, [r4, #24]
 8011654:	f7ff feac 	bl	80113b0 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011658:	4a0f      	ldr	r2, [pc, #60]	; (8011698 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 801165a:	4620      	mov	r0, r4
 801165c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011660:	f7ff feab 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 8011664:	bd10      	pop	{r4, pc}
 8011666:	f248 0180 	movw	r1, #32896	; 0x8080
 801166a:	4b0a      	ldr	r3, [pc, #40]	; (8011694 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 801166c:	6818      	ldr	r0, [r3, #0]
 801166e:	f7ff fec0 	bl	80113f2 <Display::Status(Display7SegmentMessage)>
 8011672:	e7f7      	b.n	8011664 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8011674:	4b07      	ldr	r3, [pc, #28]	; (8011694 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011676:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 801167a:	6818      	ldr	r0, [r3, #0]
 801167c:	f7ff feb9 	bl	80113f2 <Display::Status(Display7SegmentMessage)>
 8011680:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011684:	69a0      	ldr	r0, [r4, #24]
 8011686:	f7ff fe93 	bl	80113b0 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801168a:	4a04      	ldr	r2, [pc, #16]	; (801169c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 801168c:	e7e5      	b.n	801165a <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 801168e:	f645 3179 	movw	r1, #23417	; 0x5b79
 8011692:	e7ea      	b.n	801166a <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8011694:	2000ae04 	andcs	sl, r0, r4, lsl #28
 8011698:	08016b99 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, fp, sp, lr}
 801169c:	08016ba7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, r9, fp, sp, lr}

080116a0 <DisplayUdf::ShowShutdown()>:
 80116a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116a4:	4604      	mov	r4, r0
 80116a6:	6980      	ldr	r0, [r0, #24]
 80116a8:	b308      	cbz	r0, 80116ee <DisplayUdf::ShowShutdown()+0x4e>
 80116aa:	f890 8005 	ldrb.w	r8, [r0, #5]
 80116ae:	6803      	ldr	r3, [r0, #0]
 80116b0:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 80116b4:	b2ed      	uxtb	r5, r5
 80116b6:	462a      	mov	r2, r5
 80116b8:	2100      	movs	r1, #0
 80116ba:	6a1b      	ldr	r3, [r3, #32]
 80116bc:	7907      	ldrb	r7, [r0, #4]
 80116be:	2600      	movs	r6, #0
 80116c0:	4798      	blx	r3
 80116c2:	3f01      	subs	r7, #1
 80116c4:	42b7      	cmp	r7, r6
 80116c6:	69a0      	ldr	r0, [r4, #24]
 80116c8:	d906      	bls.n	80116d8 <DisplayUdf::ShowShutdown()+0x38>
 80116ca:	b118      	cbz	r0, 80116d4 <DisplayUdf::ShowShutdown()+0x34>
 80116cc:	6803      	ldr	r3, [r0, #0]
 80116ce:	2120      	movs	r1, #32
 80116d0:	695b      	ldr	r3, [r3, #20]
 80116d2:	4798      	blx	r3
 80116d4:	3601      	adds	r6, #1
 80116d6:	e7f5      	b.n	80116c4 <DisplayUdf::ShowShutdown()+0x24>
 80116d8:	b120      	cbz	r0, 80116e4 <DisplayUdf::ShowShutdown()+0x44>
 80116da:	6803      	ldr	r3, [r0, #0]
 80116dc:	462a      	mov	r2, r5
 80116de:	2100      	movs	r1, #0
 80116e0:	6a1b      	ldr	r3, [r3, #32]
 80116e2:	4798      	blx	r3
 80116e4:	4641      	mov	r1, r8
 80116e6:	4a05      	ldr	r2, [pc, #20]	; (80116fc <DisplayUdf::ShowShutdown()+0x5c>)
 80116e8:	69a0      	ldr	r0, [r4, #24]
 80116ea:	f7ff fe4f 	bl	801138c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80116ee:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 80116f2:	4620      	mov	r0, r4
 80116f4:	f7ff fe7d 	bl	80113f2 <Display::Status(Display7SegmentMessage)>
 80116f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116fc:	08016bb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, fp, sp, lr}

08011700 <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8011700:	1e4b      	subs	r3, r1, #1
 8011702:	2b05      	cmp	r3, #5
 8011704:	b530      	push	{r4, r5, lr}
 8011706:	d80f      	bhi.n	8011728 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8011708:	2300      	movs	r3, #0
 801170a:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 801170e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011712:	428d      	cmp	r5, r1
 8011714:	d109      	bne.n	801172a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8011716:	1884      	adds	r4, r0, r2
 8011718:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 801171c:	4403      	add	r3, r0
 801171e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8011722:	4410      	add	r0, r2
 8011724:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8011728:	bd30      	pop	{r4, r5, pc}
 801172a:	3301      	adds	r3, #1
 801172c:	2b14      	cmp	r3, #20
 801172e:	d1ee      	bne.n	801170e <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8011730:	e7f7      	b.n	8011722 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

08011734 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8011734:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011736:	88c5      	ldrh	r5, [r0, #6]
 8011738:	8886      	ldrh	r6, [r0, #4]
 801173a:	42b5      	cmp	r5, r6
 801173c:	d216      	bcs.n	801176c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 801173e:	4604      	mov	r4, r0
 8011740:	6800      	ldr	r0, [r0, #0]
 8011742:	4428      	add	r0, r5
 8011744:	1b75      	subs	r5, r6, r5
 8011746:	7a26      	ldrb	r6, [r4, #8]
 8011748:	b923      	cbnz	r3, 8011754 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 801174a:	b926      	cbnz	r6, 8011756 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 801174c:	9200      	str	r2, [sp, #0]
 801174e:	460b      	mov	r3, r1
 8011750:	4a09      	ldr	r2, [pc, #36]	; (8011778 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8011752:	e003      	b.n	801175c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011754:	b166      	cbz	r6, 8011770 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8011756:	460b      	mov	r3, r1
 8011758:	9200      	str	r2, [sp, #0]
 801175a:	4a08      	ldr	r2, [pc, #32]	; (801177c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 801175c:	4629      	mov	r1, r5
 801175e:	f001 fcb7 	bl	80130d0 <snprintf>
 8011762:	4285      	cmp	r5, r0
 8011764:	bfa2      	ittt	ge
 8011766:	88e3      	ldrhge	r3, [r4, #6]
 8011768:	181b      	addge	r3, r3, r0
 801176a:	80e3      	strhge	r3, [r4, #6]
 801176c:	b002      	add	sp, #8
 801176e:	bd70      	pop	{r4, r5, r6, pc}
 8011770:	9200      	str	r2, [sp, #0]
 8011772:	460b      	mov	r3, r1
 8011774:	4a02      	ldr	r2, [pc, #8]	; (8011780 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011776:	e7f1      	b.n	801175c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011778:	080152d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, ip, lr}
 801177c:	080152ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, ip, lr}
 8011780:	080152d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, lr}

08011784 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8011784:	b510      	push	{r4, lr}
 8011786:	2220      	movs	r2, #32
 8011788:	4604      	mov	r4, r0
 801178a:	f840 1b04 	str.w	r1, [r0], #4
 801178e:	2100      	movs	r1, #0
 8011790:	f001 fa54 	bl	8012c3c <memset>
 8011794:	f647 7305 	movw	r3, #32517	; 0x7f05
 8011798:	4620      	mov	r0, r4
 801179a:	84a3      	strh	r3, [r4, #36]	; 0x24
 801179c:	bd10      	pop	{r4, pc}

0801179e <DisplayUdfParams::Load()>:
 801179e:	b508      	push	{r3, lr}
 80117a0:	2300      	movs	r3, #0
 80117a2:	4601      	mov	r1, r0
 80117a4:	6043      	str	r3, [r0, #4]
 80117a6:	6800      	ldr	r0, [r0, #0]
 80117a8:	b120      	cbz	r0, 80117b4 <DisplayUdfParams::Load()+0x16>
 80117aa:	6803      	ldr	r3, [r0, #0]
 80117ac:	3104      	adds	r1, #4
 80117ae:	68db      	ldr	r3, [r3, #12]
 80117b0:	4798      	blx	r3
 80117b2:	2001      	movs	r0, #1
 80117b4:	bd08      	pop	{r3, pc}
	...

080117b8 <DisplayUdfParams::Load(char const*, unsigned int)>:
 80117b8:	6803      	ldr	r3, [r0, #0]
 80117ba:	b1d3      	cbz	r3, 80117f2 <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 80117bc:	2300      	movs	r3, #0
 80117be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80117c0:	460d      	mov	r5, r1
 80117c2:	4616      	mov	r6, r2
 80117c4:	4604      	mov	r4, r0
 80117c6:	6043      	str	r3, [r0, #4]
 80117c8:	4602      	mov	r2, r0
 80117ca:	490a      	ldr	r1, [pc, #40]	; (80117f4 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 80117cc:	4668      	mov	r0, sp
 80117ce:	f000 fbff 	bl	8011fd0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80117d2:	4632      	mov	r2, r6
 80117d4:	4629      	mov	r1, r5
 80117d6:	4668      	mov	r0, sp
 80117d8:	f000 fbfe 	bl	8011fd8 <ReadConfigFile::Read(char const*, unsigned int)>
 80117dc:	4621      	mov	r1, r4
 80117de:	f851 0b04 	ldr.w	r0, [r1], #4
 80117e2:	6803      	ldr	r3, [r0, #0]
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	4798      	blx	r3
 80117e8:	4668      	mov	r0, sp
 80117ea:	f000 fbf4 	bl	8011fd6 <ReadConfigFile::~ReadConfigFile()>
 80117ee:	b002      	add	sp, #8
 80117f0:	bd70      	pop	{r4, r5, r6, pc}
 80117f2:	4770      	bx	lr
 80117f4:	080118bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, fp, ip}

080117f8 <DisplayUdfParams::callbackFunction(char const*)>:
 80117f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117fa:	460e      	mov	r6, r1
 80117fc:	4604      	mov	r4, r0
 80117fe:	492b      	ldr	r1, [pc, #172]	; (80118ac <DisplayUdfParams::callbackFunction(char const*)+0xb4>)
 8011800:	4630      	mov	r0, r6
 8011802:	f10d 0207 	add.w	r2, sp, #7
 8011806:	f000 fcbd 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801180a:	b968      	cbnz	r0, 8011828 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 801180c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011810:	6863      	ldr	r3, [r4, #4]
 8011812:	2a7f      	cmp	r2, #127	; 0x7f
 8011814:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8011818:	bf14      	ite	ne
 801181a:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 801181e:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 8011822:	6063      	str	r3, [r4, #4]
 8011824:	b003      	add	sp, #12
 8011826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011828:	4630      	mov	r0, r6
 801182a:	4921      	ldr	r1, [pc, #132]	; (80118b0 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 801182c:	f10d 0207 	add.w	r2, sp, #7
 8011830:	f000 fca8 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011834:	b958      	cbnz	r0, 801184e <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8011836:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801183a:	6863      	ldr	r3, [r4, #4]
 801183c:	2a05      	cmp	r2, #5
 801183e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8011842:	bf14      	ite	ne
 8011844:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8011848:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 801184c:	e7e9      	b.n	8011822 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801184e:	4630      	mov	r0, r6
 8011850:	4918      	ldr	r1, [pc, #96]	; (80118b4 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 8011852:	f10d 0207 	add.w	r2, sp, #7
 8011856:	f000 fc95 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801185a:	b948      	cbnz	r0, 8011870 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 801185c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011860:	6863      	ldr	r3, [r4, #4]
 8011862:	b112      	cbz	r2, 801186a <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8011864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011868:	e7db      	b.n	8011822 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801186a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801186e:	e7d8      	b.n	8011822 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011870:	2500      	movs	r5, #0
 8011872:	4f11      	ldr	r7, [pc, #68]	; (80118b8 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 8011874:	4630      	mov	r0, r6
 8011876:	f857 1b04 	ldr.w	r1, [r7], #4
 801187a:	f10d 0207 	add.w	r2, sp, #7
 801187e:	f000 fc81 	bl	8012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011882:	b978      	cbnz	r0, 80118a4 <DisplayUdfParams::callbackFunction(char const*)+0xac>
 8011884:	2301      	movs	r3, #1
 8011886:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801188a:	6862      	ldr	r2, [r4, #4]
 801188c:	1e4e      	subs	r6, r1, #1
 801188e:	2e05      	cmp	r6, #5
 8011890:	fa03 f305 	lsl.w	r3, r3, r5
 8011894:	4425      	add	r5, r4
 8011896:	bf99      	ittee	ls
 8011898:	7229      	strbls	r1, [r5, #8]
 801189a:	4313      	orrls	r3, r2
 801189c:	7228      	strbhi	r0, [r5, #8]
 801189e:	ea22 0303 	bichi.w	r3, r2, r3
 80118a2:	e7be      	b.n	8011822 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80118a4:	3501      	adds	r5, #1
 80118a6:	2d14      	cmp	r5, #20
 80118a8:	d1e4      	bne.n	8011874 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 80118aa:	e7bb      	b.n	8011824 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80118ac:	08016c76 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, fp, sp, lr}
 80118b0:	08016c3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, fp, sp, lr}
 80118b4:	08016c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, sp, lr}
 80118b8:	08016bc8 	stmdaeq	r1, {r3, r6, r7, r8, r9, fp, sp, lr}

080118bc <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 80118bc:	f7ff bf9c 	b.w	80117f8 <DisplayUdfParams::callbackFunction(char const*)>

080118c0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 80118c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118c4:	4604      	mov	r4, r0
 80118c6:	4615      	mov	r5, r2
 80118c8:	461e      	mov	r6, r3
 80118ca:	b086      	sub	sp, #24
 80118cc:	3004      	adds	r0, #4
 80118ce:	b379      	cbz	r1, 8011930 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 80118d0:	2222      	movs	r2, #34	; 0x22
 80118d2:	f001 f99c 	bl	8012c0e <memmove>
 80118d6:	462a      	mov	r2, r5
 80118d8:	4633      	mov	r3, r6
 80118da:	493d      	ldr	r1, [pc, #244]	; (80119d0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 80118dc:	a803      	add	r0, sp, #12
 80118de:	f000 faa7 	bl	8011e30 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80118e2:	6863      	ldr	r3, [r4, #4]
 80118e4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80118e8:	493a      	ldr	r1, [pc, #232]	; (80119d4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 80118ea:	f3c3 7340 	ubfx	r3, r3, #29, #1
 80118ee:	a803      	add	r0, sp, #12
 80118f0:	f7ff ff20 	bl	8011734 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80118f4:	6863      	ldr	r3, [r4, #4]
 80118f6:	4938      	ldr	r1, [pc, #224]	; (80119d8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 80118f8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80118fc:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8011900:	a803      	add	r0, sp, #12
 8011902:	f7ff ff17 	bl	8011734 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8011906:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801190a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801190e:	42a9      	cmp	r1, r5
 8011910:	d227      	bcs.n	8011962 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 8011912:	6863      	ldr	r3, [r4, #4]
 8011914:	9803      	ldr	r0, [sp, #12]
 8011916:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 801191a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801191e:	4408      	add	r0, r1
 8011920:	eba5 0501 	sub.w	r5, r5, r1
 8011924:	d10b      	bne.n	801193e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8011926:	b962      	cbnz	r2, 8011942 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8011928:	9200      	str	r2, [sp, #0]
 801192a:	4b2c      	ldr	r3, [pc, #176]	; (80119dc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801192c:	4a2c      	ldr	r2, [pc, #176]	; (80119e0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 801192e:	e00e      	b.n	801194e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8011930:	6823      	ldr	r3, [r4, #0]
 8011932:	4601      	mov	r1, r0
 8011934:	681a      	ldr	r2, [r3, #0]
 8011936:	4618      	mov	r0, r3
 8011938:	68d2      	ldr	r2, [r2, #12]
 801193a:	4790      	blx	r2
 801193c:	e7cb      	b.n	80118d6 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 801193e:	2a00      	cmp	r2, #0
 8011940:	d041      	beq.n	80119c6 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8011942:	3b00      	subs	r3, #0
 8011944:	bf18      	it	ne
 8011946:	2301      	movne	r3, #1
 8011948:	4a26      	ldr	r2, [pc, #152]	; (80119e4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 801194a:	9300      	str	r3, [sp, #0]
 801194c:	4b23      	ldr	r3, [pc, #140]	; (80119dc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801194e:	4629      	mov	r1, r5
 8011950:	f001 fbbe 	bl	80130d0 <snprintf>
 8011954:	4285      	cmp	r5, r0
 8011956:	bfa2      	ittt	ge
 8011958:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 801195c:	181b      	addge	r3, r3, r0
 801195e:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8011962:	2500      	movs	r5, #0
 8011964:	2701      	movs	r7, #1
 8011966:	4e20      	ldr	r6, [pc, #128]	; (80119e8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8011968:	f104 0808 	add.w	r8, r4, #8
 801196c:	f856 1b04 	ldr.w	r1, [r6], #4
 8011970:	780b      	ldrb	r3, [r1, #0]
 8011972:	b15b      	cbz	r3, 801198c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8011974:	6862      	ldr	r2, [r4, #4]
 8011976:	fa07 f305 	lsl.w	r3, r7, r5
 801197a:	4393      	bics	r3, r2
 801197c:	bf0c      	ite	eq
 801197e:	2301      	moveq	r3, #1
 8011980:	2300      	movne	r3, #0
 8011982:	f818 2005 	ldrb.w	r2, [r8, r5]
 8011986:	a803      	add	r0, sp, #12
 8011988:	f7ff fed4 	bl	8011734 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801198c:	3501      	adds	r5, #1
 801198e:	2d14      	cmp	r5, #20
 8011990:	d1ec      	bne.n	801196c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 8011992:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8011996:	b17b      	cbz	r3, 80119b8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 8011998:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801199c:	9b03      	ldr	r3, [sp, #12]
 801199e:	4413      	add	r3, r2
 80119a0:	227d      	movs	r2, #125	; 0x7d
 80119a2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80119a6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80119aa:	9903      	ldr	r1, [sp, #12]
 80119ac:	54ca      	strb	r2, [r1, r3]
 80119ae:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80119b2:	3301      	adds	r3, #1
 80119b4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80119b8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80119bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119be:	601a      	str	r2, [r3, #0]
 80119c0:	b006      	add	sp, #24
 80119c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119c6:	2301      	movs	r3, #1
 80119c8:	4a08      	ldr	r2, [pc, #32]	; (80119ec <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 80119ca:	9300      	str	r3, [sp, #0]
 80119cc:	4b03      	ldr	r3, [pc, #12]	; (80119dc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80119ce:	e7be      	b.n	801194e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 80119d0:	08016c6a 	stmdaeq	r1, {r1, r3, r5, r6, sl, fp, sp, lr}
 80119d4:	08016c76 	stmdaeq	r1, {r1, r2, r4, r5, r6, sl, fp, sp, lr}
 80119d8:	08016c3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, fp, sp, lr}
 80119dc:	08016c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, sp, lr}
 80119e0:	080152d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, ip, lr}
 80119e4:	080152ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, ip, lr}
 80119e8:	08016bc8 	stmdaeq	r1, {r3, r6, r7, r8, r9, fp, sp, lr}
 80119ec:	080152d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, lr}

080119f0 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 80119f0:	b513      	push	{r0, r1, r4, lr}
 80119f2:	6804      	ldr	r4, [r0, #0]
 80119f4:	b914      	cbnz	r4, 80119fc <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80119f6:	601c      	str	r4, [r3, #0]
 80119f8:	b002      	add	sp, #8
 80119fa:	bd10      	pop	{r4, pc}
 80119fc:	9300      	str	r3, [sp, #0]
 80119fe:	4613      	mov	r3, r2
 8011a00:	460a      	mov	r2, r1
 8011a02:	2100      	movs	r1, #0
 8011a04:	f7ff ff5c 	bl	80118c0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 8011a08:	e7f6      	b.n	80119f8 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

08011a0a <DisplayUdfParams::Set(DisplayUdf*)>:
 8011a0a:	6843      	ldr	r3, [r0, #4]
 8011a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a10:	009a      	lsls	r2, r3, #2
 8011a12:	4604      	mov	r4, r0
 8011a14:	460e      	mov	r6, r1
 8011a16:	d506      	bpl.n	8011a26 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8011a18:	6988      	ldr	r0, [r1, #24]
 8011a1a:	b120      	cbz	r0, 8011a26 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8011a1c:	6803      	ldr	r3, [r0, #0]
 8011a1e:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8011a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a24:	4798      	blx	r3
 8011a26:	6863      	ldr	r3, [r4, #4]
 8011a28:	69b0      	ldr	r0, [r6, #24]
 8011a2a:	00db      	lsls	r3, r3, #3
 8011a2c:	bf41      	itttt	mi
 8011a2e:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8011a32:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8011a36:	4353      	mulmi	r3, r2
 8011a38:	6173      	strmi	r3, [r6, #20]
 8011a3a:	6861      	ldr	r1, [r4, #4]
 8011a3c:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8011a40:	b110      	cbz	r0, 8011a48 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8011a42:	6803      	ldr	r3, [r0, #0]
 8011a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a46:	4798      	blx	r3
 8011a48:	2500      	movs	r5, #0
 8011a4a:	2701      	movs	r7, #1
 8011a4c:	f104 0808 	add.w	r8, r4, #8
 8011a50:	6862      	ldr	r2, [r4, #4]
 8011a52:	fa07 f305 	lsl.w	r3, r7, r5
 8011a56:	4393      	bics	r3, r2
 8011a58:	d105      	bne.n	8011a66 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8011a5a:	462a      	mov	r2, r5
 8011a5c:	4630      	mov	r0, r6
 8011a5e:	f818 1005 	ldrb.w	r1, [r8, r5]
 8011a62:	f7ff fe4d 	bl	8011700 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8011a66:	3501      	adds	r5, #1
 8011a68:	2d14      	cmp	r5, #20
 8011a6a:	d1f1      	bne.n	8011a50 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8011a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011a70 <DisplayUdfParams::Dump()>:
 8011a70:	4770      	bx	lr

08011a72 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8011a72:	b570      	push	{r4, r5, r6, lr}
 8011a74:	4605      	mov	r5, r0
 8011a76:	6980      	ldr	r0, [r0, #24]
 8011a78:	460c      	mov	r4, r1
 8011a7a:	b120      	cbz	r0, 8011a86 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 8011a7c:	6803      	ldr	r3, [r0, #0]
 8011a7e:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8011a82:	691b      	ldr	r3, [r3, #16]
 8011a84:	4798      	blx	r3
 8011a86:	69a8      	ldr	r0, [r5, #24]
 8011a88:	f104 0242 	add.w	r2, r4, #66	; 0x42
 8011a8c:	b190      	cbz	r0, 8011ab4 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 8011a8e:	2300      	movs	r3, #0
 8011a90:	7906      	ldrb	r6, [r0, #4]
 8011a92:	3441      	adds	r4, #65	; 0x41
 8011a94:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8011a98:	b119      	cbz	r1, 8011aa2 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 8011a9a:	1c59      	adds	r1, r3, #1
 8011a9c:	429e      	cmp	r6, r3
 8011a9e:	460b      	mov	r3, r1
 8011aa0:	dcf8      	bgt.n	8011a94 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 8011aa2:	6801      	ldr	r1, [r0, #0]
 8011aa4:	b2db      	uxtb	r3, r3
 8011aa6:	69cc      	ldr	r4, [r1, #28]
 8011aa8:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8011aac:	46a4      	mov	ip, r4
 8011aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011ab2:	4760      	bx	ip
 8011ab4:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ab8 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 8011ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011abc:	460c      	mov	r4, r1
 8011abe:	b08b      	sub	sp, #44	; 0x2c
 8011ac0:	4606      	mov	r6, r0
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	2100      	movs	r1, #0
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8011acc:	f7f6 fd86 	bl	80085dc <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8011ad0:	b350      	cbz	r0, 8011b28 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x70>
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	f896 9040 	ldrb.w	r9, [r6, #64]	; 0x40
 8011ada:	f7f6 fd99 	bl	8008610 <ArtNetNode::GetNetSwitch(unsigned int) const>
 8011ade:	2100      	movs	r1, #0
 8011ae0:	4605      	mov	r5, r0
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	f7f6 fd90 	bl	8008608 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8011ae8:	2100      	movs	r1, #0
 8011aea:	4607      	mov	r7, r0
 8011aec:	4620      	mov	r0, r4
 8011aee:	f89d a027 	ldrb.w	sl, [sp, #39]	; 0x27
 8011af2:	f7f6 ff07 	bl	8008904 <ArtNetNode::GetMergeMode(unsigned int) const>
 8011af6:	4a2d      	ldr	r2, [pc, #180]	; (8011bac <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8011af8:	4b2d      	ldr	r3, [pc, #180]	; (8011bb0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 8011afa:	2100      	movs	r1, #0
 8011afc:	2800      	cmp	r0, #0
 8011afe:	bf0c      	ite	eq
 8011b00:	4690      	moveq	r8, r2
 8011b02:	4698      	movne	r8, r3
 8011b04:	4620      	mov	r0, r4
 8011b06:	f7f6 fecc 	bl	80088a2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8011b0a:	4a2a      	ldr	r2, [pc, #168]	; (8011bb4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 8011b0c:	4b2a      	ldr	r3, [pc, #168]	; (8011bb8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>)
 8011b0e:	4649      	mov	r1, r9
 8011b10:	2800      	cmp	r0, #0
 8011b12:	bf18      	it	ne
 8011b14:	4613      	movne	r3, r2
 8011b16:	e9cd 7a00 	strd	r7, sl, [sp]
 8011b1a:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8011b1e:	4630      	mov	r0, r6
 8011b20:	462b      	mov	r3, r5
 8011b22:	4a26      	ldr	r2, [pc, #152]	; (8011bbc <DisplayUdf::ShowUniverse(ArtNetNode*)+0x104>)
 8011b24:	f7ff fc49 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 8011b28:	2500      	movs	r5, #0
 8011b2a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8011bb8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>
 8011b2e:	4629      	mov	r1, r5
 8011b30:	2301      	movs	r3, #1
 8011b32:	4620      	mov	r0, r4
 8011b34:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8011b38:	f7f6 fd50 	bl	80085dc <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8011b3c:	46a9      	mov	r9, r5
 8011b3e:	3501      	adds	r5, #1
 8011b40:	b378      	cbz	r0, 8011ba2 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xea>
 8011b42:	f106 0343 	add.w	r3, r6, #67	; 0x43
 8011b46:	2100      	movs	r1, #0
 8011b48:	4620      	mov	r0, r4
 8011b4a:	f813 b005 	ldrb.w	fp, [r3, r5]
 8011b4e:	f7f6 fd5f 	bl	8008610 <ArtNetNode::GetNetSwitch(unsigned int) const>
 8011b52:	2100      	movs	r1, #0
 8011b54:	4607      	mov	r7, r0
 8011b56:	4620      	mov	r0, r4
 8011b58:	f7f6 fd56 	bl	8008608 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8011b5c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8011b60:	4680      	mov	r8, r0
 8011b62:	4649      	mov	r1, r9
 8011b64:	4620      	mov	r0, r4
 8011b66:	9307      	str	r3, [sp, #28]
 8011b68:	f7f6 fecc 	bl	8008904 <ArtNetNode::GetMergeMode(unsigned int) const>
 8011b6c:	4b10      	ldr	r3, [pc, #64]	; (8011bb0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 8011b6e:	4a0f      	ldr	r2, [pc, #60]	; (8011bac <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8011b70:	4649      	mov	r1, r9
 8011b72:	2800      	cmp	r0, #0
 8011b74:	bf18      	it	ne
 8011b76:	461a      	movne	r2, r3
 8011b78:	4620      	mov	r0, r4
 8011b7a:	9206      	str	r2, [sp, #24]
 8011b7c:	f7f6 fe91 	bl	80088a2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8011b80:	490c      	ldr	r1, [pc, #48]	; (8011bb4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 8011b82:	9a06      	ldr	r2, [sp, #24]
 8011b84:	2800      	cmp	r0, #0
 8011b86:	bf08      	it	eq
 8011b88:	4651      	moveq	r1, sl
 8011b8a:	9b07      	ldr	r3, [sp, #28]
 8011b8c:	9104      	str	r1, [sp, #16]
 8011b8e:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8011b92:	9203      	str	r2, [sp, #12]
 8011b94:	462b      	mov	r3, r5
 8011b96:	4659      	mov	r1, fp
 8011b98:	4630      	mov	r0, r6
 8011b9a:	4a09      	ldr	r2, [pc, #36]	; (8011bc0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x108>)
 8011b9c:	9700      	str	r7, [sp, #0]
 8011b9e:	f7ff fc0c 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 8011ba2:	2d04      	cmp	r5, #4
 8011ba4:	d1c3      	bne.n	8011b2e <DisplayUdf::ShowUniverse(ArtNetNode*)+0x76>
 8011ba6:	b00b      	add	sp, #44	; 0x2c
 8011ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bac:	080151ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, ip, lr}
 8011bb0:	08015203 	stmdaeq	r1, {r0, r1, r9, ip, lr}
 8011bb4:	0801520f 	stmdaeq	r1, {r0, r1, r2, r3, r9, ip, lr}
 8011bb8:	08016c80 	stmdaeq	r1, {r7, sl, fp, sp, lr}
 8011bbc:	08016c85 	stmdaeq	r1, {r0, r2, r7, sl, fp, sp, lr}
 8011bc0:	08016c99 	stmdaeq	r1, {r0, r3, r4, r7, sl, fp, sp, lr}

08011bc4 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 8011bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bc8:	4606      	mov	r6, r0
 8011bca:	2541      	movs	r5, #65	; 0x41
 8011bcc:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8011c0c <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 8011bd0:	b085      	sub	sp, #20
 8011bd2:	f100 084a 	add.w	r8, r0, #74	; 0x4a
 8011bd6:	f501 775b 	add.w	r7, r1, #876	; 0x36c
 8011bda:	012b      	lsls	r3, r5, #4
 8011bdc:	58fc      	ldr	r4, [r7, r3]
 8011bde:	464a      	mov	r2, r9
 8011be0:	0e23      	lsrs	r3, r4, #24
 8011be2:	9303      	str	r3, [sp, #12]
 8011be4:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8011be8:	9302      	str	r3, [sp, #8]
 8011bea:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8011bee:	b2e4      	uxtb	r4, r4
 8011bf0:	9301      	str	r3, [sp, #4]
 8011bf2:	9400      	str	r4, [sp, #0]
 8011bf4:	462b      	mov	r3, r5
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011bfc:	3501      	adds	r5, #1
 8011bfe:	f7ff fbdc 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 8011c02:	2d45      	cmp	r5, #69	; 0x45
 8011c04:	d1e9      	bne.n	8011bda <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 8011c06:	b005      	add	sp, #20
 8011c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c0c:	08016caf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, sl, fp, sp, lr}

08011c10 <DisplayUdf::Show(ArtNetNode*)>:
 8011c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c12:	4604      	mov	r4, r0
 8011c14:	460d      	mov	r5, r1
 8011c16:	f7ff fcc7 	bl	80115a8 <DisplayUdf::Show()>
 8011c1a:	4629      	mov	r1, r5
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	f7ff ff28 	bl	8011a72 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8011c22:	4629      	mov	r1, r5
 8011c24:	4620      	mov	r0, r4
 8011c26:	f7ff ff47 	bl	8011ab8 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8011c2a:	4629      	mov	r1, r5
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f7ff ffc9 	bl	8011bc4 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 8011c32:	f895 26de 	ldrb.w	r2, [r5, #1758]	; 0x6de
 8011c36:	f895 36df 	ldrb.w	r3, [r5, #1759]	; 0x6df
 8011c3a:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8011c3e:	4413      	add	r3, r2
 8011c40:	4620      	mov	r0, r4
 8011c42:	4a0d      	ldr	r2, [pc, #52]	; (8011c78 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 8011c44:	f7ff fbb9 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 8011c48:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011c4a:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8011c4e:	2a02      	cmp	r2, #2
 8011c50:	d001      	beq.n	8011c56 <DisplayUdf::Show(ArtNetNode*)+0x46>
 8011c52:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011c54:	b92b      	cbnz	r3, 8011c62 <DisplayUdf::Show(ArtNetNode*)+0x52>
 8011c56:	4620      	mov	r0, r4
 8011c58:	4a08      	ldr	r2, [pc, #32]	; (8011c7c <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 8011c5a:	f7ff fbae 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 8011c5e:	b003      	add	sp, #12
 8011c60:	bd30      	pop	{r4, r5, pc}
 8011c62:	4807      	ldr	r0, [pc, #28]	; (8011c80 <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8011c64:	9300      	str	r3, [sp, #0]
 8011c66:	4b07      	ldr	r3, [pc, #28]	; (8011c84 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8011c68:	2a00      	cmp	r2, #0
 8011c6a:	bf08      	it	eq
 8011c6c:	4603      	moveq	r3, r0
 8011c6e:	4620      	mov	r0, r4
 8011c70:	4a05      	ldr	r2, [pc, #20]	; (8011c88 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8011c72:	f7ff fba2 	bl	80113ba <Display::Printf(unsigned char, char const*, ...)>
 8011c76:	e7f2      	b.n	8011c5e <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8011c78:	08016cbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, sl, fp, sp, lr}
 8011c7c:	08016cc6 	stmdaeq	r1, {r1, r2, r6, r7, sl, fp, sp, lr}
 8011c80:	08014fc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, sl, fp, lr}
 8011c84:	08015339 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, ip, lr}
 8011c88:	08016ccd 	stmdaeq	r1, {r0, r2, r3, r6, r7, sl, fp, sp, lr}

08011c8c <NetworkDisplay::ShowEmacStart()>:
 8011c8c:	4b01      	ldr	r3, [pc, #4]	; (8011c94 <NetworkDisplay::ShowEmacStart()+0x8>)
 8011c8e:	6818      	ldr	r0, [r3, #0]
 8011c90:	f7ff bbf4 	b.w	801147c <DisplayUdf::ShowEmacStart()>
 8011c94:	2000adfc 	strdcs	sl, [r0], -ip

08011c98 <NetworkDisplay::ShowIp()>:
 8011c98:	4b01      	ldr	r3, [pc, #4]	; (8011ca0 <NetworkDisplay::ShowIp()+0x8>)
 8011c9a:	6818      	ldr	r0, [r3, #0]
 8011c9c:	f7ff bbfe 	b.w	801149c <DisplayUdf::ShowIpAddress()>
 8011ca0:	2000adfc 	strdcs	sl, [r0], -ip

08011ca4 <NetworkDisplay::ShowNetMask()>:
 8011ca4:	4b01      	ldr	r3, [pc, #4]	; (8011cac <NetworkDisplay::ShowNetMask()+0x8>)
 8011ca6:	6818      	ldr	r0, [r3, #0]
 8011ca8:	f7ff bc2c 	b.w	8011504 <DisplayUdf::ShowNetmask()>
 8011cac:	2000adfc 	strdcs	sl, [r0], -ip

08011cb0 <NetworkDisplay::ShowGatewayIp()>:
 8011cb0:	4b01      	ldr	r3, [pc, #4]	; (8011cb8 <NetworkDisplay::ShowGatewayIp()+0x8>)
 8011cb2:	6818      	ldr	r0, [r3, #0]
 8011cb4:	f7ff bc44 	b.w	8011540 <DisplayUdf::ShowGatewayIp()>
 8011cb8:	2000adfc 	strdcs	sl, [r0], -ip

08011cbc <NetworkDisplay::ShowShutdown()>:
 8011cbc:	4b01      	ldr	r3, [pc, #4]	; (8011cc4 <NetworkDisplay::ShowShutdown()+0x8>)
 8011cbe:	6818      	ldr	r0, [r3, #0]
 8011cc0:	f7ff bcee 	b.w	80116a0 <DisplayUdf::ShowShutdown()>
 8011cc4:	2000adfc 	strdcs	sl, [r0], -ip

08011cc8 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8011cc8:	4b01      	ldr	r3, [pc, #4]	; (8011cd0 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 8011cca:	6818      	ldr	r0, [r3, #0]
 8011ccc:	f7ff bcb0 	b.w	8011630 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011cd0:	2000adfc 	strdcs	sl, [r0], -ip

08011cd4 <properties::convert_json_file(char*, unsigned short, bool)>:
 8011cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cd8:	7803      	ldrb	r3, [r0, #0]
 8011cda:	2b7b      	cmp	r3, #123	; 0x7b
 8011cdc:	d170      	bne.n	8011dc0 <properties::convert_json_file(char*, unsigned short, bool)+0xec>
 8011cde:	b322      	cbz	r2, 8011d2a <properties::convert_json_file(char*, unsigned short, bool)+0x56>
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	4606      	mov	r6, r0
 8011ce4:	461c      	mov	r4, r3
 8011ce6:	2a00      	cmp	r2, #0
 8011ce8:	bf0c      	ite	eq
 8011cea:	f04f 0c0a 	moveq.w	ip, #10
 8011cee:	f04f 0c00 	movne.w	ip, #0
 8011cf2:	273d      	movs	r7, #61	; 0x3d
 8011cf4:	4299      	cmp	r1, r3
 8011cf6:	d960      	bls.n	8011dba <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 8011cf8:	4299      	cmp	r1, r3
 8011cfa:	4602      	mov	r2, r0
 8011cfc:	f890 e000 	ldrb.w	lr, [r0]
 8011d00:	f103 0301 	add.w	r3, r3, #1
 8011d04:	f100 0001 	add.w	r0, r0, #1
 8011d08:	d846      	bhi.n	8011d98 <properties::convert_json_file(char*, unsigned short, bool)+0xc4>
 8011d0a:	1aa0      	subs	r0, r4, r2
 8011d0c:	4615      	mov	r5, r2
 8011d0e:	1884      	adds	r4, r0, r2
 8011d10:	f812 8b01 	ldrb.w	r8, [r2], #1
 8011d14:	f103 0e01 	add.w	lr, r3, #1
 8011d18:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 8011d1c:	d053      	beq.n	8011dc6 <properties::convert_json_file(char*, unsigned short, bool)+0xf2>
 8011d1e:	4299      	cmp	r1, r3
 8011d20:	d957      	bls.n	8011dd2 <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 8011d22:	4673      	mov	r3, lr
 8011d24:	f806 8b01 	strb.w	r8, [r6], #1
 8011d28:	e7f0      	b.n	8011d0c <properties::convert_json_file(char*, unsigned short, bool)+0x38>
 8011d2a:	2323      	movs	r3, #35	; 0x23
 8011d2c:	f800 3b01 	strb.w	r3, [r0], #1
 8011d30:	4605      	mov	r5, r0
 8011d32:	2301      	movs	r3, #1
 8011d34:	4299      	cmp	r1, r3
 8011d36:	d92d      	bls.n	8011d94 <properties::convert_json_file(char*, unsigned short, bool)+0xc0>
 8011d38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d3c:	2c22      	cmp	r4, #34	; 0x22
 8011d3e:	d001      	beq.n	8011d44 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8011d40:	3301      	adds	r3, #1
 8011d42:	e7f7      	b.n	8011d34 <properties::convert_json_file(char*, unsigned short, bool)+0x60>
 8011d44:	46ac      	mov	ip, r5
 8011d46:	4606      	mov	r6, r0
 8011d48:	2701      	movs	r7, #1
 8011d4a:	f89c e000 	ldrb.w	lr, [ip]
 8011d4e:	4665      	mov	r5, ip
 8011d50:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011d54:	4630      	mov	r0, r6
 8011d56:	463c      	mov	r4, r7
 8011d58:	f10c 0c01 	add.w	ip, ip, #1
 8011d5c:	f106 0601 	add.w	r6, r6, #1
 8011d60:	f107 0701 	add.w	r7, r7, #1
 8011d64:	d007      	beq.n	8011d76 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8011d66:	3301      	adds	r3, #1
 8011d68:	4299      	cmp	r1, r3
 8011d6a:	4665      	mov	r5, ip
 8011d6c:	f806 ec01 	strb.w	lr, [r6, #-1]
 8011d70:	d8eb      	bhi.n	8011d4a <properties::convert_json_file(char*, unsigned short, bool)+0x76>
 8011d72:	463c      	mov	r4, r7
 8011d74:	4630      	mov	r0, r6
 8011d76:	4606      	mov	r6, r0
 8011d78:	200a      	movs	r0, #10
 8011d7a:	3401      	adds	r4, #1
 8011d7c:	f806 0b01 	strb.w	r0, [r6], #1
 8011d80:	4628      	mov	r0, r5
 8011d82:	f815 7b01 	ldrb.w	r7, [r5], #1
 8011d86:	2f7b      	cmp	r7, #123	; 0x7b
 8011d88:	d0ad      	beq.n	8011ce6 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 8011d8a:	1c5f      	adds	r7, r3, #1
 8011d8c:	4299      	cmp	r1, r3
 8011d8e:	463b      	mov	r3, r7
 8011d90:	d8f6      	bhi.n	8011d80 <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8011d92:	e7a8      	b.n	8011ce6 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 8011d94:	2401      	movs	r4, #1
 8011d96:	e7ee      	b.n	8011d76 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8011d98:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011d9c:	d1ac      	bne.n	8011cf8 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 8011d9e:	4602      	mov	r2, r0
 8011da0:	e7b3      	b.n	8011d0a <properties::convert_json_file(char*, unsigned short, bool)+0x36>
 8011da2:	283a      	cmp	r0, #58	; 0x3a
 8011da4:	d115      	bne.n	8011dd2 <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 8011da6:	462b      	mov	r3, r5
 8011da8:	e01b      	b.n	8011de2 <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 8011daa:	4686      	mov	lr, r0
 8011dac:	e027      	b.n	8011dfe <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
 8011dae:	4673      	mov	r3, lr
 8011db0:	f806 cb01 	strb.w	ip, [r6], #1
 8011db4:	3401      	adds	r4, #1
 8011db6:	3301      	adds	r3, #1
 8011db8:	e79c      	b.n	8011cf4 <properties::convert_json_file(char*, unsigned short, bool)+0x20>
 8011dba:	4620      	mov	r0, r4
 8011dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011dc4:	e7fa      	b.n	8011dbc <properties::convert_json_file(char*, unsigned short, bool)+0xe8>
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	f800 7b01 	strb.w	r7, [r0], #1
 8011dcc:	469e      	mov	lr, r3
 8011dce:	4606      	mov	r6, r0
 8011dd0:	3401      	adds	r4, #1
 8011dd2:	4571      	cmp	r1, lr
 8011dd4:	462b      	mov	r3, r5
 8011dd6:	7828      	ldrb	r0, [r5, #0]
 8011dd8:	f10e 0e01 	add.w	lr, lr, #1
 8011ddc:	f105 0501 	add.w	r5, r5, #1
 8011de0:	d8df      	bhi.n	8011da2 <properties::convert_json_file(char*, unsigned short, bool)+0xce>
 8011de2:	781d      	ldrb	r5, [r3, #0]
 8011de4:	461a      	mov	r2, r3
 8011de6:	2d2f      	cmp	r5, #47	; 0x2f
 8011de8:	4670      	mov	r0, lr
 8011dea:	f103 0301 	add.w	r3, r3, #1
 8011dee:	f10e 0e01 	add.w	lr, lr, #1
 8011df2:	d8da      	bhi.n	8011daa <properties::convert_json_file(char*, unsigned short, bool)+0xd6>
 8011df4:	4281      	cmp	r1, r0
 8011df6:	d8f4      	bhi.n	8011de2 <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 8011df8:	2d22      	cmp	r5, #34	; 0x22
 8011dfa:	bf08      	it	eq
 8011dfc:	461a      	moveq	r2, r3
 8011dfe:	4610      	mov	r0, r2
 8011e00:	f810 5b01 	ldrb.w	r5, [r0], #1
 8011e04:	f10e 0301 	add.w	r3, lr, #1
 8011e08:	2d22      	cmp	r5, #34	; 0x22
 8011e0a:	d0d0      	beq.n	8011dae <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 8011e0c:	2d2c      	cmp	r5, #44	; 0x2c
 8011e0e:	d0ce      	beq.n	8011dae <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 8011e10:	2d7d      	cmp	r5, #125	; 0x7d
 8011e12:	d0cc      	beq.n	8011dae <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 8011e14:	4571      	cmp	r1, lr
 8011e16:	d9ce      	bls.n	8011db6 <properties::convert_json_file(char*, unsigned short, bool)+0xe2>
 8011e18:	f1a5 0e20 	sub.w	lr, r5, #32
 8011e1c:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 8011e20:	d803      	bhi.n	8011e2a <properties::convert_json_file(char*, unsigned short, bool)+0x156>
 8011e22:	4602      	mov	r2, r0
 8011e24:	f806 5b01 	strb.w	r5, [r6], #1
 8011e28:	3401      	adds	r4, #1
 8011e2a:	469e      	mov	lr, r3
 8011e2c:	e7e7      	b.n	8011dfe <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
	...

08011e30 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 8011e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e34:	6002      	str	r2, [r0, #0]
 8011e36:	4614      	mov	r4, r2
 8011e38:	2200      	movs	r2, #0
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	460f      	mov	r7, r1
 8011e3e:	80c2      	strh	r2, [r0, #6]
 8011e40:	4a1b      	ldr	r2, [pc, #108]	; (8011eb0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 8011e42:	8083      	strh	r3, [r0, #4]
 8011e44:	7810      	ldrb	r0, [r2, #0]
 8011e46:	f000 0001 	and.w	r0, r0, #1
 8011e4a:	7230      	strb	r0, [r6, #8]
 8011e4c:	463d      	mov	r5, r7
 8011e4e:	782a      	ldrb	r2, [r5, #0]
 8011e50:	3701      	adds	r7, #1
 8011e52:	2a00      	cmp	r2, #0
 8011e54:	d1fa      	bne.n	8011e4c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8011e56:	1a6d      	subs	r5, r5, r1
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	b1d0      	cbz	r0, 8011e92 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8011e5c:	1d2f      	adds	r7, r5, #4
 8011e5e:	429f      	cmp	r7, r3
 8011e60:	d814      	bhi.n	8011e8c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8011e62:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8011e66:	f04f 0922 	mov.w	r9, #34	; 0x22
 8011e6a:	462a      	mov	r2, r5
 8011e6c:	f884 8000 	strb.w	r8, [r4]
 8011e70:	f884 9001 	strb.w	r9, [r4, #1]
 8011e74:	1ca0      	adds	r0, r4, #2
 8011e76:	f000 feca 	bl	8012c0e <memmove>
 8011e7a:	223a      	movs	r2, #58	; 0x3a
 8011e7c:	1963      	adds	r3, r4, r5
 8011e7e:	3505      	adds	r5, #5
 8011e80:	f883 9002 	strb.w	r9, [r3, #2]
 8011e84:	70da      	strb	r2, [r3, #3]
 8011e86:	80f5      	strh	r5, [r6, #6]
 8011e88:	f804 8007 	strb.w	r8, [r4, r7]
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e92:	1caf      	adds	r7, r5, #2
 8011e94:	429f      	cmp	r7, r3
 8011e96:	d8f9      	bhi.n	8011e8c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8011e98:	4620      	mov	r0, r4
 8011e9a:	2323      	movs	r3, #35	; 0x23
 8011e9c:	462a      	mov	r2, r5
 8011e9e:	f800 3b01 	strb.w	r3, [r0], #1
 8011ea2:	f000 feb4 	bl	8012c0e <memmove>
 8011ea6:	230a      	movs	r3, #10
 8011ea8:	442c      	add	r4, r5
 8011eaa:	7063      	strb	r3, [r4, #1]
 8011eac:	80f7      	strh	r7, [r6, #6]
 8011eae:	e7ed      	b.n	8011e8c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8011eb0:	2000ae00 	andcs	sl, r0, r0, lsl #28

08011eb4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8011eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011eb6:	469c      	mov	ip, r3
 8011eb8:	8885      	ldrh	r5, [r0, #4]
 8011eba:	88c3      	ldrh	r3, [r0, #6]
 8011ebc:	b085      	sub	sp, #20
 8011ebe:	42ab      	cmp	r3, r5
 8011ec0:	d302      	bcc.n	8011ec8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 8011ec2:	2000      	movs	r0, #0
 8011ec4:	b005      	add	sp, #20
 8011ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ec8:	4604      	mov	r4, r0
 8011eca:	6800      	ldr	r0, [r0, #0]
 8011ecc:	1aed      	subs	r5, r5, r3
 8011ece:	4418      	add	r0, r3
 8011ed0:	b2d6      	uxtb	r6, r2
 8011ed2:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8011ed6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011eda:	f894 e008 	ldrb.w	lr, [r4, #8]
 8011ede:	0e12      	lsrs	r2, r2, #24
 8011ee0:	f1bc 0f00 	cmp.w	ip, #0
 8011ee4:	d109      	bne.n	8011efa <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 8011ee6:	f1be 0f00 	cmp.w	lr, #0
 8011eea:	d109      	bne.n	8011f00 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8011eec:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011ef0:	e9cd 6700 	strd	r6, r7, [sp]
 8011ef4:	460b      	mov	r3, r1
 8011ef6:	4a0e      	ldr	r2, [pc, #56]	; (8011f30 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 8011ef8:	e008      	b.n	8011f0c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8011efa:	f1be 0f00 	cmp.w	lr, #0
 8011efe:	d00f      	beq.n	8011f20 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8011f00:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011f04:	460b      	mov	r3, r1
 8011f06:	e9cd 6700 	strd	r6, r7, [sp]
 8011f0a:	4a0a      	ldr	r2, [pc, #40]	; (8011f34 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8011f0c:	4629      	mov	r1, r5
 8011f0e:	f001 f8df 	bl	80130d0 <snprintf>
 8011f12:	4285      	cmp	r5, r0
 8011f14:	dbd5      	blt.n	8011ec2 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 8011f16:	88e3      	ldrh	r3, [r4, #6]
 8011f18:	4403      	add	r3, r0
 8011f1a:	80e3      	strh	r3, [r4, #6]
 8011f1c:	2001      	movs	r0, #1
 8011f1e:	e7d1      	b.n	8011ec4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 8011f20:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011f24:	e9cd 6700 	strd	r6, r7, [sp]
 8011f28:	460b      	mov	r3, r1
 8011f2a:	4a03      	ldr	r2, [pc, #12]	; (8011f38 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8011f2c:	e7ee      	b.n	8011f0c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8011f2e:	bf00      	nop
 8011f30:	08016ceb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, sl, fp, sp, lr}
 8011f34:	08016cd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, sl, fp, sp, lr}
 8011f38:	08016cec 	stmdaeq	r1, {r2, r3, r5, r6, r7, sl, fp, sp, lr}

08011f3c <PropertiesBuilder::AddComment(char const*)>:
 8011f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f3e:	7a06      	ldrb	r6, [r0, #8]
 8011f40:	b996      	cbnz	r6, 8011f68 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8011f42:	4604      	mov	r4, r0
 8011f44:	88c0      	ldrh	r0, [r0, #6]
 8011f46:	88a5      	ldrh	r5, [r4, #4]
 8011f48:	42a8      	cmp	r0, r5
 8011f4a:	d20d      	bcs.n	8011f68 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8011f4c:	6827      	ldr	r7, [r4, #0]
 8011f4e:	1a2d      	subs	r5, r5, r0
 8011f50:	460b      	mov	r3, r1
 8011f52:	4a06      	ldr	r2, [pc, #24]	; (8011f6c <PropertiesBuilder::AddComment(char const*)+0x30>)
 8011f54:	4629      	mov	r1, r5
 8011f56:	4438      	add	r0, r7
 8011f58:	f001 f8ba 	bl	80130d0 <snprintf>
 8011f5c:	4285      	cmp	r5, r0
 8011f5e:	bfa1      	itttt	ge
 8011f60:	2601      	movge	r6, #1
 8011f62:	88e3      	ldrhge	r3, [r4, #6]
 8011f64:	18c0      	addge	r0, r0, r3
 8011f66:	80e0      	strhge	r0, [r4, #6]
 8011f68:	4630      	mov	r0, r6
 8011f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f6c:	08016cfc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, sl, fp, sp, lr}

08011f70 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
 8011f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f72:	88c5      	ldrh	r5, [r0, #6]
 8011f74:	8887      	ldrh	r7, [r0, #4]
 8011f76:	9e08      	ldr	r6, [sp, #32]
 8011f78:	42bd      	cmp	r5, r7
 8011f7a:	d302      	bcc.n	8011f82 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x12>
 8011f7c:	2000      	movs	r0, #0
 8011f7e:	b003      	add	sp, #12
 8011f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f82:	4604      	mov	r4, r0
 8011f84:	6800      	ldr	r0, [r0, #0]
 8011f86:	4428      	add	r0, r5
 8011f88:	1b7d      	subs	r5, r7, r5
 8011f8a:	7a27      	ldrb	r7, [r4, #8]
 8011f8c:	b92b      	cbnz	r3, 8011f9a <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2a>
 8011f8e:	b92f      	cbnz	r7, 8011f9c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2c>
 8011f90:	e9cd 6200 	strd	r6, r2, [sp]
 8011f94:	460b      	mov	r3, r1
 8011f96:	4a0b      	ldr	r2, [pc, #44]	; (8011fc4 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x54>)
 8011f98:	e004      	b.n	8011fa4 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8011f9a:	b16f      	cbz	r7, 8011fb8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x48>
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	e9cd 6200 	strd	r6, r2, [sp]
 8011fa2:	4a09      	ldr	r2, [pc, #36]	; (8011fc8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x58>)
 8011fa4:	4629      	mov	r1, r5
 8011fa6:	f001 f893 	bl	80130d0 <snprintf>
 8011faa:	4285      	cmp	r5, r0
 8011fac:	dbe6      	blt.n	8011f7c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xc>
 8011fae:	88e3      	ldrh	r3, [r4, #6]
 8011fb0:	4403      	add	r3, r0
 8011fb2:	80e3      	strh	r3, [r4, #6]
 8011fb4:	2001      	movs	r0, #1
 8011fb6:	e7e2      	b.n	8011f7e <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xe>
 8011fb8:	e9cd 6200 	strd	r6, r2, [sp]
 8011fbc:	460b      	mov	r3, r1
 8011fbe:	4a03      	ldr	r2, [pc, #12]	; (8011fcc <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5c>)
 8011fc0:	e7f0      	b.n	8011fa4 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8011fc2:	bf00      	nop
 8011fc4:	08016d11 	stmdaeq	r1, {r0, r4, r8, sl, fp, sp, lr}
 8011fc8:	08016d04 	stmdaeq	r1, {r2, r8, sl, fp, sp, lr}
 8011fcc:	08016d12 	stmdaeq	r1, {r1, r4, r8, sl, fp, sp, lr}

08011fd0 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8011fd0:	e9c0 1200 	strd	r1, r2, [r0]
 8011fd4:	4770      	bx	lr

08011fd6 <ReadConfigFile::~ReadConfigFile()>:
 8011fd6:	4770      	bx	lr

08011fd8 <ReadConfigFile::Read(char const*, unsigned int)>:
 8011fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fdc:	4606      	mov	r6, r0
 8011fde:	460d      	mov	r5, r1
 8011fe0:	4614      	mov	r4, r2
 8011fe2:	f04f 0800 	mov.w	r8, #0
 8011fe6:	b090      	sub	sp, #64	; 0x40
 8011fe8:	b33c      	cbz	r4, 801203a <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8011fea:	466b      	mov	r3, sp
 8011fec:	462a      	mov	r2, r5
 8011fee:	4619      	mov	r1, r3
 8011ff0:	7817      	ldrb	r7, [r2, #0]
 8011ff2:	4610      	mov	r0, r2
 8011ff4:	2f0d      	cmp	r7, #13
 8011ff6:	f102 0201 	add.w	r2, r2, #1
 8011ffa:	d013      	beq.n	8012024 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 8011ffc:	2f0a      	cmp	r7, #10
 8011ffe:	d011      	beq.n	8012024 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 8012000:	f803 7b01 	strb.w	r7, [r3], #1
 8012004:	1a58      	subs	r0, r3, r1
 8012006:	283f      	cmp	r0, #63	; 0x3f
 8012008:	4615      	mov	r5, r2
 801200a:	dc16      	bgt.n	801203a <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 801200c:	3c01      	subs	r4, #1
 801200e:	d1ef      	bne.n	8011ff0 <ReadConfigFile::Read(char const*, unsigned int)+0x18>
 8012010:	f89d 2000 	ldrb.w	r2, [sp]
 8012014:	2a60      	cmp	r2, #96	; 0x60
 8012016:	d9e7      	bls.n	8011fe8 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8012018:	f883 8000 	strb.w	r8, [r3]
 801201c:	e9d6 3000 	ldrd	r3, r0, [r6]
 8012020:	4798      	blx	r3
 8012022:	e7e1      	b.n	8011fe8 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8012024:	4605      	mov	r5, r0
 8012026:	2c00      	cmp	r4, #0
 8012028:	d0f2      	beq.n	8012010 <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 801202a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801202e:	2a0d      	cmp	r2, #13
 8012030:	d001      	beq.n	8012036 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8012032:	2a0a      	cmp	r2, #10
 8012034:	d1ec      	bne.n	8012010 <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 8012036:	3c01      	subs	r4, #1
 8012038:	e7f4      	b.n	8012024 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 801203a:	b010      	add	sp, #64	; 0x40
 801203c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012040 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8012040:	b570      	push	{r4, r5, r6, lr}
 8012042:	4615      	mov	r5, r2
 8012044:	461c      	mov	r4, r3
 8012046:	f000 f8ba 	bl	80121be <Sscan::checkName(char const*, char const*)>
 801204a:	b160      	cbz	r0, 8012066 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x26>
 801204c:	2100      	movs	r1, #0
 801204e:	5c43      	ldrb	r3, [r0, r1]
 8012050:	6826      	ldr	r6, [r4, #0]
 8012052:	b28a      	uxth	r2, r1
 8012054:	b123      	cbz	r3, 8012060 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 8012056:	42b2      	cmp	r2, r6
 8012058:	d207      	bcs.n	801206a <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2a>
 801205a:	546b      	strb	r3, [r5, r1]
 801205c:	3101      	adds	r1, #1
 801205e:	e7f6      	b.n	801204e <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8012060:	2000      	movs	r0, #0
 8012062:	6022      	str	r2, [r4, #0]
 8012064:	bd70      	pop	{r4, r5, r6, pc}
 8012066:	2001      	movs	r0, #1
 8012068:	e7fc      	b.n	8012064 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>
 801206a:	2b0a      	cmp	r3, #10
 801206c:	d0f8      	beq.n	8012060 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 801206e:	2002      	movs	r0, #2
 8012070:	e7f8      	b.n	8012064 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>

08012072 <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
 8012072:	b538      	push	{r3, r4, r5, lr}
 8012074:	4614      	mov	r4, r2
 8012076:	f000 f8a2 	bl	80121be <Sscan::checkName(char const*, char const*)>
 801207a:	b908      	cbnz	r0, 8012080 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xe>
 801207c:	2001      	movs	r0, #1
 801207e:	bd38      	pop	{r3, r4, r5, pc}
 8012080:	2100      	movs	r1, #0
 8012082:	4602      	mov	r2, r0
 8012084:	8021      	strh	r1, [r4, #0]
 8012086:	5c50      	ldrb	r0, [r2, r1]
 8012088:	b1b0      	cbz	r0, 80120b8 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x46>
 801208a:	2904      	cmp	r1, #4
 801208c:	d018      	beq.n	80120c0 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x4e>
 801208e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012092:	2b09      	cmp	r3, #9
 8012094:	d904      	bls.n	80120a0 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x2e>
 8012096:	f040 0520 	orr.w	r5, r0, #32
 801209a:	3d61      	subs	r5, #97	; 0x61
 801209c:	2d05      	cmp	r5, #5
 801209e:	d8ed      	bhi.n	801207c <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 80120a0:	2839      	cmp	r0, #57	; 0x39
 80120a2:	bf84      	itt	hi
 80120a4:	f040 0320 	orrhi.w	r3, r0, #32
 80120a8:	3b57      	subhi	r3, #87	; 0x57
 80120aa:	8820      	ldrh	r0, [r4, #0]
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80120b2:	8023      	strh	r3, [r4, #0]
 80120b4:	3101      	adds	r1, #1
 80120b6:	e7e6      	b.n	8012086 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x14>
 80120b8:	2904      	cmp	r1, #4
 80120ba:	bf18      	it	ne
 80120bc:	2002      	movne	r0, #2
 80120be:	e7de      	b.n	801207e <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>
 80120c0:	3820      	subs	r0, #32
 80120c2:	bf18      	it	ne
 80120c4:	2001      	movne	r0, #1
 80120c6:	e7da      	b.n	801207e <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>

080120c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 80120c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120ca:	4615      	mov	r5, r2
 80120cc:	f000 f877 	bl	80121be <Sscan::checkName(char const*, char const*)>
 80120d0:	b3c0      	cbz	r0, 8012144 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x7c>
 80120d2:	2400      	movs	r4, #0
 80120d4:	270a      	movs	r7, #10
 80120d6:	ae01      	add	r6, sp, #4
 80120d8:	4603      	mov	r3, r0
 80120da:	2100      	movs	r1, #0
 80120dc:	f100 0c04 	add.w	ip, r0, #4
 80120e0:	4618      	mov	r0, r3
 80120e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120e6:	2a2e      	cmp	r2, #46	; 0x2e
 80120e8:	d00e      	beq.n	8012108 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 80120ea:	b16a      	cbz	r2, 8012108 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 80120ec:	4560      	cmp	r0, ip
 80120ee:	d102      	bne.n	80120f6 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2e>
 80120f0:	2002      	movs	r0, #2
 80120f2:	b003      	add	sp, #12
 80120f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120f6:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80120fa:	2b09      	cmp	r3, #9
 80120fc:	d8f8      	bhi.n	80120f0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80120fe:	fb07 2101 	mla	r1, r7, r1, r2
 8012102:	4603      	mov	r3, r0
 8012104:	3930      	subs	r1, #48	; 0x30
 8012106:	e7eb      	b.n	80120e0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x18>
 8012108:	29ff      	cmp	r1, #255	; 0xff
 801210a:	d8f1      	bhi.n	80120f0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 801210c:	3401      	adds	r4, #1
 801210e:	2c03      	cmp	r4, #3
 8012110:	f806 1b01 	strb.w	r1, [r6], #1
 8012114:	d1e0      	bne.n	80120d8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x10>
 8012116:	2400      	movs	r4, #0
 8012118:	220a      	movs	r2, #10
 801211a:	1d1e      	adds	r6, r3, #4
 801211c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012120:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8012124:	d007      	beq.n	8012136 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6e>
 8012126:	429e      	cmp	r6, r3
 8012128:	d0e2      	beq.n	80120f0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 801212a:	3930      	subs	r1, #48	; 0x30
 801212c:	2909      	cmp	r1, #9
 801212e:	d8df      	bhi.n	80120f0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8012130:	fb02 1404 	mla	r4, r2, r4, r1
 8012134:	e7f2      	b.n	801211c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8012136:	2cff      	cmp	r4, #255	; 0xff
 8012138:	d8da      	bhi.n	80120f0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 801213a:	f88d 4007 	strb.w	r4, [sp, #7]
 801213e:	9b01      	ldr	r3, [sp, #4]
 8012140:	602b      	str	r3, [r5, #0]
 8012142:	e7d6      	b.n	80120f2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>
 8012144:	2001      	movs	r0, #1
 8012146:	e7d4      	b.n	80120f2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>

08012148 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8012148:	b538      	push	{r3, r4, r5, lr}
 801214a:	4615      	mov	r5, r2
 801214c:	f000 f837 	bl	80121be <Sscan::checkName(char const*, char const*)>
 8012150:	b1a0      	cbz	r0, 801217c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8012152:	4604      	mov	r4, r0
 8012154:	2100      	movs	r1, #0
 8012156:	220a      	movs	r2, #10
 8012158:	7823      	ldrb	r3, [r4, #0]
 801215a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 801215e:	2809      	cmp	r0, #9
 8012160:	d80e      	bhi.n	8012180 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8012162:	fb02 3101 	mla	r1, r2, r1, r3
 8012166:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801216a:	3930      	subs	r1, #48	; 0x30
 801216c:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8012170:	d1f2      	bne.n	8012158 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8012172:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8012176:	d203      	bcs.n	8012180 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8012178:	8029      	strh	r1, [r5, #0]
 801217a:	bd38      	pop	{r3, r4, r5, pc}
 801217c:	2001      	movs	r0, #1
 801217e:	e7fc      	b.n	801217a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8012180:	2002      	movs	r0, #2
 8012182:	e7fa      	b.n	801217a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08012184 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8012184:	b538      	push	{r3, r4, r5, lr}
 8012186:	4615      	mov	r5, r2
 8012188:	f000 f819 	bl	80121be <Sscan::checkName(char const*, char const*)>
 801218c:	b198      	cbz	r0, 80121b6 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 801218e:	4604      	mov	r4, r0
 8012190:	2100      	movs	r1, #0
 8012192:	220a      	movs	r2, #10
 8012194:	7823      	ldrb	r3, [r4, #0]
 8012196:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 801219a:	2809      	cmp	r0, #9
 801219c:	d80d      	bhi.n	80121ba <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 801219e:	fb02 3101 	mla	r1, r2, r1, r3
 80121a2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80121a6:	3930      	subs	r1, #48	; 0x30
 80121a8:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 80121ac:	d1f2      	bne.n	8012194 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 80121ae:	29ff      	cmp	r1, #255	; 0xff
 80121b0:	d803      	bhi.n	80121ba <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 80121b2:	7029      	strb	r1, [r5, #0]
 80121b4:	bd38      	pop	{r3, r4, r5, pc}
 80121b6:	2001      	movs	r0, #1
 80121b8:	e7fc      	b.n	80121b4 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 80121ba:	2002      	movs	r0, #2
 80121bc:	e7fa      	b.n	80121b4 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

080121be <Sscan::checkName(char const*, char const*)>:
 80121be:	4603      	mov	r3, r0
 80121c0:	b510      	push	{r4, lr}
 80121c2:	3901      	subs	r1, #1
 80121c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80121c8:	461c      	mov	r4, r3
 80121ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121ce:	b120      	cbz	r0, 80121da <Sscan::checkName(char const*, char const*)+0x1c>
 80121d0:	b10a      	cbz	r2, 80121d6 <Sscan::checkName(char const*, char const*)+0x18>
 80121d2:	4290      	cmp	r0, r2
 80121d4:	d0f6      	beq.n	80121c4 <Sscan::checkName(char const*, char const*)+0x6>
 80121d6:	2000      	movs	r0, #0
 80121d8:	e006      	b.n	80121e8 <Sscan::checkName(char const*, char const*)+0x2a>
 80121da:	2a3d      	cmp	r2, #61	; 0x3d
 80121dc:	d104      	bne.n	80121e8 <Sscan::checkName(char const*, char const*)+0x2a>
 80121de:	7860      	ldrb	r0, [r4, #1]
 80121e0:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 80121e4:	d000      	beq.n	80121e8 <Sscan::checkName(char const*, char const*)+0x2a>
 80121e6:	1c60      	adds	r0, r4, #1
 80121e8:	bd10      	pop	{r4, pc}

080121ea <LightSet::GetDmxStartAddress()>:
 80121ea:	2001      	movs	r0, #1
 80121ec:	4770      	bx	lr

080121ee <LightSet::GetDmxFootprint()>:
 80121ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80121f2:	4770      	bx	lr

080121f4 <LightSet::SetDmxStartAddress(unsigned short)>:
 80121f4:	2000      	movs	r0, #0
 80121f6:	4770      	bx	lr

080121f8 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 80121f8:	2300      	movs	r3, #0
 80121fa:	2001      	movs	r0, #1
 80121fc:	7093      	strb	r3, [r2, #2]
 80121fe:	8010      	strh	r0, [r2, #0]
 8012200:	4770      	bx	lr
	...

08012204 <Display::PrintInfo() [clone .isra.0]>:
 8012204:	b910      	cbnz	r0, 801220c <Display::PrintInfo() [clone .isra.0]+0x8>
 8012206:	4803      	ldr	r0, [pc, #12]	; (8012214 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8012208:	f000 bf8a 	b.w	8013120 <puts>
 801220c:	6803      	ldr	r3, [r0, #0]
 801220e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012210:	4718      	bx	r3
 8012212:	bf00      	nop
 8012214:	08016e11 	stmdaeq	r1, {r0, r4, r9, sl, fp, sp, lr}

08012218 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8012218:	b513      	push	{r0, r1, r4, lr}
 801221a:	4604      	mov	r4, r0
 801221c:	0a13      	lsrs	r3, r2, #8
 801221e:	7800      	ldrb	r0, [r0, #0]
 8012220:	f88d 1004 	strb.w	r1, [sp, #4]
 8012224:	f88d 3005 	strb.w	r3, [sp, #5]
 8012228:	f88d 2006 	strb.w	r2, [sp, #6]
 801222c:	f001 ff4e 	bl	80140cc <gd32_i2c_set_address(unsigned char)>
 8012230:	6860      	ldr	r0, [r4, #4]
 8012232:	f001 ff43 	bl	80140bc <gd32_i2c_set_baudrate(unsigned int)>
 8012236:	2103      	movs	r1, #3
 8012238:	a801      	add	r0, sp, #4
 801223a:	f001 ff4d 	bl	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 801223e:	b002      	add	sp, #8
 8012240:	bd10      	pop	{r4, pc}

08012242 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8012242:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012244:	460d      	mov	r5, r1
 8012246:	4604      	mov	r4, r0
 8012248:	f001 ff40 	bl	80140cc <gd32_i2c_set_address(unsigned char)>
 801224c:	4628      	mov	r0, r5
 801224e:	f001 ff35 	bl	80140bc <gd32_i2c_set_baudrate(unsigned int)>
 8012252:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012256:	2b07      	cmp	r3, #7
 8012258:	d902      	bls.n	8012260 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 801225a:	3c50      	subs	r4, #80	; 0x50
 801225c:	2c0f      	cmp	r4, #15
 801225e:	d809      	bhi.n	8012274 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8012260:	2101      	movs	r1, #1
 8012262:	f10d 0007 	add.w	r0, sp, #7
 8012266:	f001 ff9d 	bl	80141a4 <gd32_i2c_read(char*, unsigned int)>
 801226a:	fab0 f080 	clz	r0, r0
 801226e:	0940      	lsrs	r0, r0, #5
 8012270:	b003      	add	sp, #12
 8012272:	bd30      	pop	{r4, r5, pc}
 8012274:	2100      	movs	r1, #0
 8012276:	4608      	mov	r0, r1
 8012278:	f001 ff2e 	bl	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 801227c:	e7f5      	b.n	801226a <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

0801227e <Display::Detect7Segment()>:
 801227e:	b538      	push	{r3, r4, r5, lr}
 8012280:	68c1      	ldr	r1, [r0, #12]
 8012282:	4604      	mov	r4, r0
 8012284:	7a00      	ldrb	r0, [r0, #8]
 8012286:	f7ff ffdc 	bl	8012242 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 801228a:	7460      	strb	r0, [r4, #17]
 801228c:	b170      	cbz	r0, 80122ac <Display::Detect7Segment()+0x2e>
 801228e:	2200      	movs	r2, #0
 8012290:	f104 0508 	add.w	r5, r4, #8
 8012294:	4611      	mov	r1, r2
 8012296:	4628      	mov	r0, r5
 8012298:	f7ff ffbe 	bl	8012218 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 801229c:	7c63      	ldrb	r3, [r4, #17]
 801229e:	b12b      	cbz	r3, 80122ac <Display::Detect7Segment()+0x2e>
 80122a0:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 80122a4:	2112      	movs	r1, #18
 80122a6:	4628      	mov	r0, r5
 80122a8:	f7ff ffb6 	bl	8012218 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80122ac:	bd38      	pop	{r3, r4, r5, pc}

080122ae <Display::Detect(display::Type)>:
 80122ae:	2902      	cmp	r1, #2
 80122b0:	b538      	push	{r3, r4, r5, lr}
 80122b2:	4604      	mov	r4, r0
 80122b4:	d014      	beq.n	80122e0 <Display::Detect(display::Type)+0x32>
 80122b6:	2904      	cmp	r1, #4
 80122b8:	d01b      	beq.n	80122f2 <Display::Detect(display::Type)+0x44>
 80122ba:	69a0      	ldr	r0, [r4, #24]
 80122bc:	b168      	cbz	r0, 80122da <Display::Detect(display::Type)+0x2c>
 80122be:	6803      	ldr	r3, [r0, #0]
 80122c0:	689b      	ldr	r3, [r3, #8]
 80122c2:	4798      	blx	r3
 80122c4:	4603      	mov	r3, r0
 80122c6:	69a0      	ldr	r0, [r4, #24]
 80122c8:	b9ab      	cbnz	r3, 80122f6 <Display::Detect(display::Type)+0x48>
 80122ca:	b110      	cbz	r0, 80122d2 <Display::Detect(display::Type)+0x24>
 80122cc:	6803      	ldr	r3, [r0, #0]
 80122ce:	685b      	ldr	r3, [r3, #4]
 80122d0:	4798      	blx	r3
 80122d2:	2300      	movs	r3, #0
 80122d4:	61a3      	str	r3, [r4, #24]
 80122d6:	2304      	movs	r3, #4
 80122d8:	6023      	str	r3, [r4, #0]
 80122da:	2300      	movs	r3, #0
 80122dc:	6163      	str	r3, [r4, #20]
 80122de:	e010      	b.n	8012302 <Display::Detect(display::Type)+0x54>
 80122e0:	2018      	movs	r0, #24
 80122e2:	f000 fbd5 	bl	8012a90 <operator new(unsigned int)>
 80122e6:	4605      	mov	r5, r0
 80122e8:	2100      	movs	r1, #0
 80122ea:	f000 f89b 	bl	8012424 <Ssd1306::Ssd1306(TOledPanel)>
 80122ee:	61a5      	str	r5, [r4, #24]
 80122f0:	e7e3      	b.n	80122ba <Display::Detect(display::Type)+0xc>
 80122f2:	6001      	str	r1, [r0, #0]
 80122f4:	e7e1      	b.n	80122ba <Display::Detect(display::Type)+0xc>
 80122f6:	6803      	ldr	r3, [r0, #0]
 80122f8:	68db      	ldr	r3, [r3, #12]
 80122fa:	4798      	blx	r3
 80122fc:	69a3      	ldr	r3, [r4, #24]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d0eb      	beq.n	80122da <Display::Detect(display::Type)+0x2c>
 8012302:	bd38      	pop	{r3, r4, r5, pc}

08012304 <Display::Display()>:
 8012304:	2304      	movs	r3, #4
 8012306:	b510      	push	{r4, lr}
 8012308:	6003      	str	r3, [r0, #0]
 801230a:	4b0d      	ldr	r3, [pc, #52]	; (8012340 <Display::Display()+0x3c>)
 801230c:	4604      	mov	r4, r0
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	4a0c      	ldr	r2, [pc, #48]	; (8012344 <Display::Display()+0x40>)
 8012312:	6043      	str	r3, [r0, #4]
 8012314:	2321      	movs	r3, #33	; 0x21
 8012316:	7203      	strb	r3, [r0, #8]
 8012318:	4b0b      	ldr	r3, [pc, #44]	; (8012348 <Display::Display()+0x44>)
 801231a:	2102      	movs	r1, #2
 801231c:	60c3      	str	r3, [r0, #12]
 801231e:	2300      	movs	r3, #0
 8012320:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8012324:	8203      	strh	r3, [r0, #16]
 8012326:	4b09      	ldr	r3, [pc, #36]	; (801234c <Display::Display()+0x48>)
 8012328:	6018      	str	r0, [r3, #0]
 801232a:	f7ff ffc0 	bl	80122ae <Display::Detect(display::Type)>
 801232e:	4620      	mov	r0, r4
 8012330:	f7ff ffa5 	bl	801227e <Display::Detect7Segment()>
 8012334:	69a0      	ldr	r0, [r4, #24]
 8012336:	f7ff ff65 	bl	8012204 <Display::PrintInfo() [clone .isra.0]>
 801233a:	4620      	mov	r0, r4
 801233c:	bd10      	pop	{r4, pc}
 801233e:	bf00      	nop
 8012340:	2000af0c 	andcs	sl, r0, ip, lsl #30
 8012344:	000493e0 	andeq	r9, r4, r0, ror #7
 8012348:	00061a80 	andeq	r1, r6, r0, lsl #21
 801234c:	2000ae04 	andcs	sl, r0, r4, lsl #28

08012350 <Ssd1306::~Ssd1306()>:
 8012350:	4770      	bx	lr

08012352 <Ssd1306::SetCursor(unsigned int)>:
 8012352:	4770      	bx	lr

08012354 <Ssd1306::PrintInfo()>:
 8012354:	b410      	push	{r4}
 8012356:	4906      	ldr	r1, [pc, #24]	; (8012370 <Ssd1306::PrintInfo()+0x1c>)
 8012358:	7c44      	ldrb	r4, [r0, #17]
 801235a:	7903      	ldrb	r3, [r0, #4]
 801235c:	7942      	ldrb	r2, [r0, #5]
 801235e:	4805      	ldr	r0, [pc, #20]	; (8012374 <Ssd1306::PrintInfo()+0x20>)
 8012360:	2c00      	cmp	r4, #0
 8012362:	bf08      	it	eq
 8012364:	4601      	moveq	r1, r0
 8012366:	4804      	ldr	r0, [pc, #16]	; (8012378 <Ssd1306::PrintInfo()+0x24>)
 8012368:	bc10      	pop	{r4}
 801236a:	f000 be89 	b.w	8013080 <printf>
 801236e:	bf00      	nop
 8012370:	08016e22 	stmdaeq	r1, {r1, r5, r9, sl, fp, sp, lr}
 8012374:	08016e29 	stmdaeq	r1, {r0, r3, r5, r9, sl, fp, sp, lr}
 8012378:	08016e31 	stmdaeq	r1, {r0, r4, r5, r9, sl, fp, sp, lr}

0801237c <Ssd1306::~Ssd1306()>:
 801237c:	b510      	push	{r4, lr}
 801237e:	4604      	mov	r4, r0
 8012380:	f000 fb82 	bl	8012a88 <operator delete(void*)>
 8012384:	4620      	mov	r0, r4
 8012386:	bd10      	pop	{r4, pc}

08012388 <HAL_I2C::Setup()>:
 8012388:	b510      	push	{r4, lr}
 801238a:	4604      	mov	r4, r0
 801238c:	7800      	ldrb	r0, [r0, #0]
 801238e:	f001 fe9d 	bl	80140cc <gd32_i2c_set_address(unsigned char)>
 8012392:	6860      	ldr	r0, [r4, #4]
 8012394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012398:	f001 be90 	b.w	80140bc <gd32_i2c_set_baudrate(unsigned int)>

0801239c <Ssd1306::PutChar(int)>:
 801239c:	b510      	push	{r4, lr}
 801239e:	f1a1 0420 	sub.w	r4, r1, #32
 80123a2:	2c5f      	cmp	r4, #95	; 0x5f
 80123a4:	bf88      	it	hi
 80123a6:	2400      	movhi	r4, #0
 80123a8:	3008      	adds	r0, #8
 80123aa:	f7ff ffed 	bl	8012388 <HAL_I2C::Setup()>
 80123ae:	4804      	ldr	r0, [pc, #16]	; (80123c0 <Ssd1306::PutChar(int)+0x24>)
 80123b0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80123b4:	4420      	add	r0, r4
 80123b6:	2107      	movs	r1, #7
 80123b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123bc:	f001 be8c 	b.w	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 80123c0:	08016e44 	stmdaeq	r1, {r2, r6, r9, sl, fp, sp, lr}

080123c4 <Ssd1306::PutString(char const*)>:
 80123c4:	b538      	push	{r3, r4, r5, lr}
 80123c6:	4605      	mov	r5, r0
 80123c8:	1e4c      	subs	r4, r1, #1
 80123ca:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80123ce:	b119      	cbz	r1, 80123d8 <Ssd1306::PutString(char const*)+0x14>
 80123d0:	4628      	mov	r0, r5
 80123d2:	f7ff ffe3 	bl	801239c <Ssd1306::PutChar(int)>
 80123d6:	e7f8      	b.n	80123ca <Ssd1306::PutString(char const*)+0x6>
 80123d8:	bd38      	pop	{r3, r4, r5, pc}

080123da <Ssd1306::Text(char const*, unsigned int)>:
 80123da:	b570      	push	{r4, r5, r6, lr}
 80123dc:	7903      	ldrb	r3, [r0, #4]
 80123de:	4605      	mov	r5, r0
 80123e0:	460c      	mov	r4, r1
 80123e2:	4293      	cmp	r3, r2
 80123e4:	bf94      	ite	ls
 80123e6:	18ce      	addls	r6, r1, r3
 80123e8:	188e      	addhi	r6, r1, r2
 80123ea:	42b4      	cmp	r4, r6
 80123ec:	d005      	beq.n	80123fa <Ssd1306::Text(char const*, unsigned int)+0x20>
 80123ee:	4628      	mov	r0, r5
 80123f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123f4:	f7ff ffd2 	bl	801239c <Ssd1306::PutChar(int)>
 80123f8:	e7f7      	b.n	80123ea <Ssd1306::Text(char const*, unsigned int)+0x10>
 80123fa:	bd70      	pop	{r4, r5, r6, pc}

080123fc <Ssd1306::InitMembers()>:
 80123fc:	7c03      	ldrb	r3, [r0, #16]
 80123fe:	b12b      	cbz	r3, 801240c <Ssd1306::InitMembers()+0x10>
 8012400:	3b01      	subs	r3, #1
 8012402:	2b01      	cmp	r3, #1
 8012404:	d908      	bls.n	8012418 <Ssd1306::InitMembers()+0x1c>
 8012406:	f640 0315 	movw	r3, #2069	; 0x815
 801240a:	e007      	b.n	801241c <Ssd1306::InitMembers()+0x20>
 801240c:	f640 0315 	movw	r3, #2069	; 0x815
 8012410:	8083      	strh	r3, [r0, #4]
 8012412:	2308      	movs	r3, #8
 8012414:	6143      	str	r3, [r0, #20]
 8012416:	4770      	bx	lr
 8012418:	f240 4315 	movw	r3, #1045	; 0x415
 801241c:	8083      	strh	r3, [r0, #4]
 801241e:	2304      	movs	r3, #4
 8012420:	e7f8      	b.n	8012414 <Ssd1306::InitMembers()+0x18>
	...

08012424 <Ssd1306::Ssd1306(TOledPanel)>:
 8012424:	4a08      	ldr	r2, [pc, #32]	; (8012448 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8012426:	b508      	push	{r3, lr}
 8012428:	6002      	str	r2, [r0, #0]
 801242a:	227f      	movs	r2, #127	; 0x7f
 801242c:	80c2      	strh	r2, [r0, #6]
 801242e:	223c      	movs	r2, #60	; 0x3c
 8012430:	7202      	strb	r2, [r0, #8]
 8012432:	4a06      	ldr	r2, [pc, #24]	; (801244c <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8012434:	7401      	strb	r1, [r0, #16]
 8012436:	60c2      	str	r2, [r0, #12]
 8012438:	2200      	movs	r2, #0
 801243a:	7442      	strb	r2, [r0, #17]
 801243c:	4a04      	ldr	r2, [pc, #16]	; (8012450 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 801243e:	6010      	str	r0, [r2, #0]
 8012440:	f7ff ffdc 	bl	80123fc <Ssd1306::InitMembers()>
 8012444:	bd08      	pop	{r3, pc}
 8012446:	bf00      	nop
 8012448:	0801711c 	stmdaeq	r1, {r2, r3, r4, r8, ip, sp, lr}
 801244c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8012450:	2000ae90 	mulcs	r0, r0, lr

08012454 <Ssd1306::SendCommand(unsigned char)>:
 8012454:	2300      	movs	r3, #0
 8012456:	b507      	push	{r0, r1, r2, lr}
 8012458:	3008      	adds	r0, #8
 801245a:	f88d 3004 	strb.w	r3, [sp, #4]
 801245e:	f88d 1005 	strb.w	r1, [sp, #5]
 8012462:	f7ff ff91 	bl	8012388 <HAL_I2C::Setup()>
 8012466:	2102      	movs	r1, #2
 8012468:	a801      	add	r0, sp, #4
 801246a:	f001 fe35 	bl	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 801246e:	b003      	add	sp, #12
 8012470:	f85d fb04 	ldr.w	pc, [sp], #4

08012474 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8012474:	2914      	cmp	r1, #20
 8012476:	b570      	push	{r4, r5, r6, lr}
 8012478:	4605      	mov	r5, r0
 801247a:	4616      	mov	r6, r2
 801247c:	d81c      	bhi.n	80124b8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 801247e:	7943      	ldrb	r3, [r0, #5]
 8012480:	4293      	cmp	r3, r2
 8012482:	d919      	bls.n	80124b8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8012484:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012488:	7c43      	ldrb	r3, [r0, #17]
 801248a:	004c      	lsls	r4, r1, #1
 801248c:	b2e4      	uxtb	r4, r4
 801248e:	b10b      	cbz	r3, 8012494 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8012490:	3404      	adds	r4, #4
 8012492:	b2e4      	uxtb	r4, r4
 8012494:	4628      	mov	r0, r5
 8012496:	f004 010e 	and.w	r1, r4, #14
 801249a:	f7ff ffdb 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 801249e:	0921      	lsrs	r1, r4, #4
 80124a0:	4628      	mov	r0, r5
 80124a2:	f041 0110 	orr.w	r1, r1, #16
 80124a6:	f7ff ffd5 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 80124aa:	4628      	mov	r0, r5
 80124ac:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 80124b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124b4:	f7ff bfce 	b.w	8012454 <Ssd1306::SendCommand(unsigned char)>
 80124b8:	bd70      	pop	{r4, r5, r6, pc}

080124ba <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 80124ba:	b570      	push	{r4, r5, r6, lr}
 80124bc:	4604      	mov	r4, r0
 80124be:	4615      	mov	r5, r2
 80124c0:	461e      	mov	r6, r3
 80124c2:	b171      	cbz	r1, 80124e2 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80124c4:	7943      	ldrb	r3, [r0, #5]
 80124c6:	428b      	cmp	r3, r1
 80124c8:	d30b      	bcc.n	80124e2 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80124ca:	3901      	subs	r1, #1
 80124cc:	b2ca      	uxtb	r2, r1
 80124ce:	2100      	movs	r1, #0
 80124d0:	f7ff ffd0 	bl	8012474 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80124d4:	4632      	mov	r2, r6
 80124d6:	4629      	mov	r1, r5
 80124d8:	4620      	mov	r0, r4
 80124da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124de:	f7ff bf7c 	b.w	80123da <Ssd1306::Text(char const*, unsigned int)>
 80124e2:	bd70      	pop	{r4, r5, r6, pc}

080124e4 <Ssd1306::ClearLine(unsigned char)>:
 80124e4:	b538      	push	{r3, r4, r5, lr}
 80124e6:	4605      	mov	r5, r0
 80124e8:	b1b9      	cbz	r1, 801251a <Ssd1306::ClearLine(unsigned char)+0x36>
 80124ea:	7943      	ldrb	r3, [r0, #5]
 80124ec:	428b      	cmp	r3, r1
 80124ee:	d314      	bcc.n	801251a <Ssd1306::ClearLine(unsigned char)+0x36>
 80124f0:	3901      	subs	r1, #1
 80124f2:	b2cc      	uxtb	r4, r1
 80124f4:	4622      	mov	r2, r4
 80124f6:	2100      	movs	r1, #0
 80124f8:	f7ff ffbc 	bl	8012474 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80124fc:	f105 0008 	add.w	r0, r5, #8
 8012500:	f7ff ff42 	bl	8012388 <HAL_I2C::Setup()>
 8012504:	2181      	movs	r1, #129	; 0x81
 8012506:	4805      	ldr	r0, [pc, #20]	; (801251c <Ssd1306::ClearLine(unsigned char)+0x38>)
 8012508:	f001 fde6 	bl	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 801250c:	4622      	mov	r2, r4
 801250e:	4628      	mov	r0, r5
 8012510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012514:	2100      	movs	r1, #0
 8012516:	f7ff bfad 	b.w	8012474 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 801251a:	bd38      	pop	{r3, r4, r5, pc}
 801251c:	2000ae08 	andcs	sl, r0, r8, lsl #28

08012520 <Ssd1306::SetSleep(bool)>:
 8012520:	b111      	cbz	r1, 8012528 <Ssd1306::SetSleep(bool)+0x8>
 8012522:	21ae      	movs	r1, #174	; 0xae
 8012524:	f7ff bf96 	b.w	8012454 <Ssd1306::SendCommand(unsigned char)>
 8012528:	21af      	movs	r1, #175	; 0xaf
 801252a:	e7fb      	b.n	8012524 <Ssd1306::SetSleep(bool)+0x4>

0801252c <Ssd1306::SetContrast(unsigned char)>:
 801252c:	b538      	push	{r3, r4, r5, lr}
 801252e:	4604      	mov	r4, r0
 8012530:	460d      	mov	r5, r1
 8012532:	7181      	strb	r1, [r0, #6]
 8012534:	2181      	movs	r1, #129	; 0x81
 8012536:	f7ff ff8d 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 801253a:	4629      	mov	r1, r5
 801253c:	4620      	mov	r0, r4
 801253e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012542:	f7ff bf87 	b.w	8012454 <Ssd1306::SendCommand(unsigned char)>

08012546 <Ssd1306::SetFlipVertically(bool)>:
 8012546:	b510      	push	{r4, lr}
 8012548:	4604      	mov	r4, r0
 801254a:	71c1      	strb	r1, [r0, #7]
 801254c:	b141      	cbz	r1, 8012560 <Ssd1306::SetFlipVertically(bool)+0x1a>
 801254e:	21c0      	movs	r1, #192	; 0xc0
 8012550:	f7ff ff80 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 8012554:	21a0      	movs	r1, #160	; 0xa0
 8012556:	4620      	mov	r0, r4
 8012558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801255c:	f7ff bf7a 	b.w	8012454 <Ssd1306::SendCommand(unsigned char)>
 8012560:	21c8      	movs	r1, #200	; 0xc8
 8012562:	f7ff ff77 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 8012566:	21a1      	movs	r1, #161	; 0xa1
 8012568:	e7f5      	b.n	8012556 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

0801256c <Ssd1306::CheckSH1106()>:
 801256c:	b570      	push	{r4, r5, r6, lr}
 801256e:	4604      	mov	r4, r0
 8012570:	b086      	sub	sp, #24
 8012572:	2100      	movs	r1, #0
 8012574:	f7ff ff6e 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 8012578:	2190      	movs	r1, #144	; 0x90
 801257a:	4620      	mov	r0, r4
 801257c:	f7ff ff6a 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 8012580:	21b0      	movs	r1, #176	; 0xb0
 8012582:	4620      	mov	r0, r4
 8012584:	f7ff ff66 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 8012588:	4b22      	ldr	r3, [pc, #136]	; (8012614 <Ssd1306::CheckSH1106()+0xa8>)
 801258a:	f104 0608 	add.w	r6, r4, #8
 801258e:	6818      	ldr	r0, [r3, #0]
 8012590:	791b      	ldrb	r3, [r3, #4]
 8012592:	ad02      	add	r5, sp, #8
 8012594:	9002      	str	r0, [sp, #8]
 8012596:	4630      	mov	r0, r6
 8012598:	712b      	strb	r3, [r5, #4]
 801259a:	f7ff fef5 	bl	8012388 <HAL_I2C::Setup()>
 801259e:	2105      	movs	r1, #5
 80125a0:	4628      	mov	r0, r5
 80125a2:	f001 fd99 	bl	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 80125a6:	2100      	movs	r1, #0
 80125a8:	4620      	mov	r0, r4
 80125aa:	f7ff ff53 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 80125ae:	2190      	movs	r1, #144	; 0x90
 80125b0:	4620      	mov	r0, r4
 80125b2:	f7ff ff4f 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 80125b6:	21b0      	movs	r1, #176	; 0xb0
 80125b8:	4620      	mov	r0, r4
 80125ba:	f7ff ff4b 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 80125be:	2300      	movs	r3, #0
 80125c0:	9304      	str	r3, [sp, #16]
 80125c2:	f88d 3014 	strb.w	r3, [sp, #20]
 80125c6:	2340      	movs	r3, #64	; 0x40
 80125c8:	4630      	mov	r0, r6
 80125ca:	f88d 3007 	strb.w	r3, [sp, #7]
 80125ce:	f7ff fedb 	bl	8012388 <HAL_I2C::Setup()>
 80125d2:	2101      	movs	r1, #1
 80125d4:	f10d 0007 	add.w	r0, sp, #7
 80125d8:	f001 fd7e 	bl	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 80125dc:	4630      	mov	r0, r6
 80125de:	f7ff fed3 	bl	8012388 <HAL_I2C::Setup()>
 80125e2:	2105      	movs	r1, #5
 80125e4:	a804      	add	r0, sp, #16
 80125e6:	f001 fddd 	bl	80141a4 <gd32_i2c_read(char*, unsigned int)>
 80125ea:	2201      	movs	r2, #1
 80125ec:	5cab      	ldrb	r3, [r5, r2]
 80125ee:	a904      	add	r1, sp, #16
 80125f0:	3201      	adds	r2, #1
 80125f2:	4411      	add	r1, r2
 80125f4:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80125f8:	428b      	cmp	r3, r1
 80125fa:	d006      	beq.n	801260a <Ssd1306::CheckSH1106()+0x9e>
 80125fc:	1a5b      	subs	r3, r3, r1
 80125fe:	fab3 f383 	clz	r3, r3
 8012602:	095b      	lsrs	r3, r3, #5
 8012604:	7463      	strb	r3, [r4, #17]
 8012606:	b006      	add	sp, #24
 8012608:	bd70      	pop	{r4, r5, r6, pc}
 801260a:	2a05      	cmp	r2, #5
 801260c:	d1ee      	bne.n	80125ec <Ssd1306::CheckSH1106()+0x80>
 801260e:	2300      	movs	r3, #0
 8012610:	e7f5      	b.n	80125fe <Ssd1306::CheckSH1106()+0x92>
 8012612:	bf00      	nop
 8012614:	08016e3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, sl, fp, sp, lr}

08012618 <Ssd1306::Cls()>:
 8012618:	7c43      	ldrb	r3, [r0, #17]
 801261a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801261e:	2b00      	cmp	r3, #0
 8012620:	bf0c      	ite	eq
 8012622:	2500      	moveq	r5, #0
 8012624:	2504      	movne	r5, #4
 8012626:	4604      	mov	r4, r0
 8012628:	2600      	movs	r6, #0
 801262a:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 801262e:	f045 0810 	orr.w	r8, r5, #16
 8012632:	b2ff      	uxtb	r7, r7
 8012634:	6963      	ldr	r3, [r4, #20]
 8012636:	4629      	mov	r1, r5
 8012638:	42b3      	cmp	r3, r6
 801263a:	4620      	mov	r0, r4
 801263c:	d91b      	bls.n	8012676 <Ssd1306::Cls()+0x5e>
 801263e:	f7ff ff09 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 8012642:	4641      	mov	r1, r8
 8012644:	4620      	mov	r0, r4
 8012646:	f7ff ff05 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 801264a:	f066 014f 	orn	r1, r6, #79	; 0x4f
 801264e:	4620      	mov	r0, r4
 8012650:	b2c9      	uxtb	r1, r1
 8012652:	f7ff feff 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 8012656:	7c23      	ldrb	r3, [r4, #16]
 8012658:	b123      	cbz	r3, 8012664 <Ssd1306::Cls()+0x4c>
 801265a:	3b01      	subs	r3, #1
 801265c:	2b01      	cmp	r3, #1
 801265e:	d901      	bls.n	8012664 <Ssd1306::Cls()+0x4c>
 8012660:	3601      	adds	r6, #1
 8012662:	e7e7      	b.n	8012634 <Ssd1306::Cls()+0x1c>
 8012664:	f104 0008 	add.w	r0, r4, #8
 8012668:	f7ff fe8e 	bl	8012388 <HAL_I2C::Setup()>
 801266c:	4639      	mov	r1, r7
 801266e:	4808      	ldr	r0, [pc, #32]	; (8012690 <Ssd1306::Cls()+0x78>)
 8012670:	f001 fd32 	bl	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 8012674:	e7f4      	b.n	8012660 <Ssd1306::Cls()+0x48>
 8012676:	f7ff feed 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 801267a:	4641      	mov	r1, r8
 801267c:	4620      	mov	r0, r4
 801267e:	f7ff fee9 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 8012682:	4620      	mov	r0, r4
 8012684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012688:	21b0      	movs	r1, #176	; 0xb0
 801268a:	f7ff bee3 	b.w	8012454 <Ssd1306::SendCommand(unsigned char)>
 801268e:	bf00      	nop
 8012690:	2000ae08 	andcs	sl, r0, r8, lsl #28

08012694 <Ssd1306::Start()>:
 8012694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012696:	7a04      	ldrb	r4, [r0, #8]
 8012698:	68c6      	ldr	r6, [r0, #12]
 801269a:	4605      	mov	r5, r0
 801269c:	4620      	mov	r0, r4
 801269e:	f001 fd15 	bl	80140cc <gd32_i2c_set_address(unsigned char)>
 80126a2:	4630      	mov	r0, r6
 80126a4:	f001 fd0a 	bl	80140bc <gd32_i2c_set_baudrate(unsigned int)>
 80126a8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80126ac:	2b07      	cmp	r3, #7
 80126ae:	d902      	bls.n	80126b6 <Ssd1306::Start()+0x22>
 80126b0:	3c50      	subs	r4, #80	; 0x50
 80126b2:	2c0f      	cmp	r4, #15
 80126b4:	d80f      	bhi.n	80126d6 <Ssd1306::Start()+0x42>
 80126b6:	2101      	movs	r1, #1
 80126b8:	f10d 0007 	add.w	r0, sp, #7
 80126bc:	f001 fd72 	bl	80141a4 <gd32_i2c_read(char*, unsigned int)>
 80126c0:	fab0 f480 	clz	r4, r0
 80126c4:	0964      	lsrs	r4, r4, #5
 80126c6:	b35c      	cbz	r4, 8012720 <Ssd1306::Start()+0x8c>
 80126c8:	7c2e      	ldrb	r6, [r5, #16]
 80126ca:	b14e      	cbz	r6, 80126e0 <Ssd1306::Start()+0x4c>
 80126cc:	3e01      	subs	r6, #1
 80126ce:	2e01      	cmp	r6, #1
 80126d0:	d929      	bls.n	8012726 <Ssd1306::Start()+0x92>
 80126d2:	2400      	movs	r4, #0
 80126d4:	e024      	b.n	8012720 <Ssd1306::Start()+0x8c>
 80126d6:	2100      	movs	r1, #0
 80126d8:	4608      	mov	r0, r1
 80126da:	f001 fcfd 	bl	80140d8 <gd32_i2c_write(char const*, unsigned int)>
 80126de:	e7ef      	b.n	80126c0 <Ssd1306::Start()+0x2c>
 80126e0:	4f16      	ldr	r7, [pc, #88]	; (801273c <Ssd1306::Start()+0xa8>)
 80126e2:	4628      	mov	r0, r5
 80126e4:	f817 1b01 	ldrb.w	r1, [r7], #1
 80126e8:	3601      	adds	r6, #1
 80126ea:	f7ff feb3 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 80126ee:	2e18      	cmp	r6, #24
 80126f0:	d1f7      	bne.n	80126e2 <Ssd1306::Start()+0x4e>
 80126f2:	2300      	movs	r3, #0
 80126f4:	4a12      	ldr	r2, [pc, #72]	; (8012740 <Ssd1306::Start()+0xac>)
 80126f6:	4618      	mov	r0, r3
 80126f8:	4611      	mov	r1, r2
 80126fa:	3301      	adds	r3, #1
 80126fc:	2b86      	cmp	r3, #134	; 0x86
 80126fe:	f802 0b01 	strb.w	r0, [r2], #1
 8012702:	d1fa      	bne.n	80126fa <Ssd1306::Start()+0x66>
 8012704:	2340      	movs	r3, #64	; 0x40
 8012706:	4628      	mov	r0, r5
 8012708:	700b      	strb	r3, [r1, #0]
 801270a:	f7ff ff2f 	bl	801256c <Ssd1306::CheckSH1106()>
 801270e:	4628      	mov	r0, r5
 8012710:	f7ff ff82 	bl	8012618 <Ssd1306::Cls()>
 8012714:	21af      	movs	r1, #175	; 0xaf
 8012716:	4628      	mov	r0, r5
 8012718:	f7ff fe9c 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 801271c:	2301      	movs	r3, #1
 801271e:	71eb      	strb	r3, [r5, #7]
 8012720:	4620      	mov	r0, r4
 8012722:	b003      	add	sp, #12
 8012724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012726:	2600      	movs	r6, #0
 8012728:	4f06      	ldr	r7, [pc, #24]	; (8012744 <Ssd1306::Start()+0xb0>)
 801272a:	4628      	mov	r0, r5
 801272c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012730:	3601      	adds	r6, #1
 8012732:	f7ff fe8f 	bl	8012454 <Ssd1306::SendCommand(unsigned char)>
 8012736:	2e18      	cmp	r6, #24
 8012738:	d1f7      	bne.n	801272a <Ssd1306::Start()+0x96>
 801273a:	e7da      	b.n	80126f2 <Ssd1306::Start()+0x5e>
 801273c:	080170fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, ip, sp, lr}
 8012740:	2000ae08 	andcs	sl, r0, r8, lsl #28
 8012744:	080170e4 	stmdaeq	r1, {r2, r5, r6, r7, ip, sp, lr}

08012748 <console_init>:
 8012748:	b508      	push	{r3, lr}
 801274a:	f000 fddb 	bl	8013304 <uart0_init>
 801274e:	4804      	ldr	r0, [pc, #16]	; (8012760 <console_init+0x18>)
 8012750:	f000 fe08 	bl	8013364 <uart0_puts>
 8012754:	4803      	ldr	r0, [pc, #12]	; (8012764 <console_init+0x1c>)
 8012756:	f000 fe05 	bl	8013364 <uart0_puts>
 801275a:	2000      	movs	r0, #0
 801275c:	bd08      	pop	{r3, pc}
 801275e:	bf00      	nop
 8012760:	0801501e 	stmdaeq	r1, {r1, r2, r3, r4, ip, lr}
 8012764:	08017154 	stmdaeq	r1, {r2, r4, r6, r8, ip, sp, lr}

08012768 <console_putc>:
 8012768:	280a      	cmp	r0, #10
 801276a:	b510      	push	{r4, lr}
 801276c:	4604      	mov	r4, r0
 801276e:	d102      	bne.n	8012776 <console_putc+0xe>
 8012770:	200d      	movs	r0, #13
 8012772:	f000 fdd7 	bl	8013324 <uart0_putc>
 8012776:	4620      	mov	r0, r4
 8012778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801277c:	f000 bdd2 	b.w	8013324 <uart0_putc>

08012780 <console_puts>:
 8012780:	f000 bdf0 	b.w	8013364 <uart0_puts>

08012784 <console_set_fg_color>:
 8012784:	2807      	cmp	r0, #7
 8012786:	d810      	bhi.n	80127aa <console_set_fg_color+0x26>
 8012788:	e8df f000 	tbb	[pc, r0]
 801278c:	0b090704 	bleq	82543a4 <__exidx_end+0x23d154>
 8012790:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 801275c <console_init+0x14>
 8012794:	4806      	ldr	r0, [pc, #24]	; (80127b0 <console_set_fg_color+0x2c>)
 8012796:	f000 bde5 	b.w	8013364 <uart0_puts>
 801279a:	4806      	ldr	r0, [pc, #24]	; (80127b4 <console_set_fg_color+0x30>)
 801279c:	e7fb      	b.n	8012796 <console_set_fg_color+0x12>
 801279e:	4806      	ldr	r0, [pc, #24]	; (80127b8 <console_set_fg_color+0x34>)
 80127a0:	e7f9      	b.n	8012796 <console_set_fg_color+0x12>
 80127a2:	4806      	ldr	r0, [pc, #24]	; (80127bc <console_set_fg_color+0x38>)
 80127a4:	e7f7      	b.n	8012796 <console_set_fg_color+0x12>
 80127a6:	4806      	ldr	r0, [pc, #24]	; (80127c0 <console_set_fg_color+0x3c>)
 80127a8:	e7f5      	b.n	8012796 <console_set_fg_color+0x12>
 80127aa:	4806      	ldr	r0, [pc, #24]	; (80127c4 <console_set_fg_color+0x40>)
 80127ac:	e7f3      	b.n	8012796 <console_set_fg_color+0x12>
 80127ae:	bf00      	nop
 80127b0:	0801715a 	stmdaeq	r1, {r1, r3, r4, r6, r8, ip, sp, lr}
 80127b4:	08017160 	stmdaeq	r1, {r5, r6, r8, ip, sp, lr}
 80127b8:	08017166 	stmdaeq	r1, {r1, r2, r5, r6, r8, ip, sp, lr}
 80127bc:	0801716c 	stmdaeq	r1, {r2, r3, r5, r6, r8, ip, sp, lr}
 80127c0:	0801501e 	stmdaeq	r1, {r1, r2, r3, r4, ip, lr}
 80127c4:	08017172 	stmdaeq	r1, {r1, r4, r5, r6, r8, ip, sp, lr}

080127c8 <console_error>:
 80127c8:	b510      	push	{r4, lr}
 80127ca:	4604      	mov	r4, r0
 80127cc:	4805      	ldr	r0, [pc, #20]	; (80127e4 <console_error+0x1c>)
 80127ce:	f000 fdc9 	bl	8013364 <uart0_puts>
 80127d2:	4620      	mov	r0, r4
 80127d4:	f000 fdc6 	bl	8013364 <uart0_puts>
 80127d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127dc:	4802      	ldr	r0, [pc, #8]	; (80127e8 <console_error+0x20>)
 80127de:	f000 bdc1 	b.w	8013364 <uart0_puts>
 80127e2:	bf00      	nop
 80127e4:	08017160 	stmdaeq	r1, {r5, r6, r8, ip, sp, lr}
 80127e8:	0801501e 	stmdaeq	r1, {r1, r2, r3, r4, ip, lr}

080127ec <console_status>:
 80127ec:	b510      	push	{r4, lr}
 80127ee:	460c      	mov	r4, r1
 80127f0:	b280      	uxth	r0, r0
 80127f2:	f7ff ffc7 	bl	8012784 <console_set_fg_color>
 80127f6:	4807      	ldr	r0, [pc, #28]	; (8012814 <console_status+0x28>)
 80127f8:	f000 fdb4 	bl	8013364 <uart0_puts>
 80127fc:	4620      	mov	r0, r4
 80127fe:	f000 fdb1 	bl	8013364 <uart0_puts>
 8012802:	200a      	movs	r0, #10
 8012804:	f7ff ffb0 	bl	8012768 <console_putc>
 8012808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801280c:	4802      	ldr	r0, [pc, #8]	; (8012818 <console_status+0x2c>)
 801280e:	f000 bda9 	b.w	8013364 <uart0_puts>
 8012812:	bf00      	nop
 8012814:	08017154 	stmdaeq	r1, {r2, r4, r6, r8, ip, sp, lr}
 8012818:	0801501e 	stmdaeq	r1, {r1, r2, r3, r4, ip, lr}

0801281c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 801281c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012820:	4617      	mov	r7, r2
 8012822:	461e      	mov	r6, r3
 8012824:	4d14      	ldr	r5, [pc, #80]	; (8012878 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8012826:	4b15      	ldr	r3, [pc, #84]	; (801287c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8012828:	b086      	sub	sp, #24
 801282a:	6018      	str	r0, [r3, #0]
 801282c:	4604      	mov	r4, r0
 801282e:	f105 0803 	add.w	r8, r5, #3
 8012832:	2203      	movs	r2, #3
 8012834:	4628      	mov	r0, r5
 8012836:	f000 f9ea 	bl	8012c0e <memmove>
 801283a:	4639      	mov	r1, r7
 801283c:	220b      	movs	r2, #11
 801283e:	4640      	mov	r0, r8
 8012840:	f000 f9e5 	bl	8012c0e <memmove>
 8012844:	f105 030e 	add.w	r3, r5, #14
 8012848:	4631      	mov	r1, r6
 801284a:	2208      	movs	r2, #8
 801284c:	4618      	mov	r0, r3
 801284e:	f000 f9de 	bl	8012c0e <memmove>
 8012852:	2308      	movs	r3, #8
 8012854:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8012858:	230b      	movs	r3, #11
 801285a:	9302      	str	r3, [sp, #8]
 801285c:	4b08      	ldr	r3, [pc, #32]	; (8012880 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 801285e:	9005      	str	r0, [sp, #20]
 8012860:	e9cd 5300 	strd	r5, r3, [sp]
 8012864:	213f      	movs	r1, #63	; 0x3f
 8012866:	2303      	movs	r3, #3
 8012868:	4a06      	ldr	r2, [pc, #24]	; (8012884 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 801286a:	4807      	ldr	r0, [pc, #28]	; (8012888 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 801286c:	f000 fc30 	bl	80130d0 <snprintf>
 8012870:	4620      	mov	r0, r4
 8012872:	b006      	add	sp, #24
 8012874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012878:	2000ae94 	mulcs	r0, r4, lr
 801287c:	2000aeec 	andcs	sl, r0, ip, ror #29
 8012880:	0801517f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, ip, lr}
 8012884:	08017178 	stmdaeq	r1, {r3, r4, r5, r6, r8, ip, sp, lr}
 8012888:	2000aeaa 	andcs	sl, r0, sl, lsr #29

0801288c <FirmwareVersion::Print(char const*)>:
 801288c:	b510      	push	{r4, lr}
 801288e:	460c      	mov	r4, r1
 8012890:	4804      	ldr	r0, [pc, #16]	; (80128a4 <FirmwareVersion::Print(char const*)+0x18>)
 8012892:	f000 fc45 	bl	8013120 <puts>
 8012896:	b124      	cbz	r4, 80128a2 <FirmwareVersion::Print(char const*)+0x16>
 8012898:	4620      	mov	r0, r4
 801289a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801289e:	f000 bc3f 	b.w	8013120 <puts>
 80128a2:	bd10      	pop	{r4, pc}
 80128a4:	2000aeaa 	andcs	sl, r0, sl, lsr #29

080128a8 <LedBlink::LedBlink()>:
 80128a8:	2200      	movs	r2, #0
 80128aa:	2105      	movs	r1, #5
 80128ac:	e9c0 2100 	strd	r2, r1, [r0]
 80128b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80128b4:	6082      	str	r2, [r0, #8]
 80128b6:	e9c0 1203 	strd	r1, r2, [r0, #12]
 80128ba:	6142      	str	r2, [r0, #20]
 80128bc:	4a01      	ldr	r2, [pc, #4]	; (80128c4 <LedBlink::LedBlink()+0x1c>)
 80128be:	6010      	str	r0, [r2, #0]
 80128c0:	4770      	bx	lr
 80128c2:	bf00      	nop
 80128c4:	2000aef0 	strdcs	sl, [r0], -r0

080128c8 <LedBlink::SetMode(ledblink::Mode)>:
 80128c8:	6843      	ldr	r3, [r0, #4]
 80128ca:	428b      	cmp	r3, r1
 80128cc:	d02f      	beq.n	801292e <LedBlink::SetMode(ledblink::Mode)+0x66>
 80128ce:	6041      	str	r1, [r0, #4]
 80128d0:	2904      	cmp	r1, #4
 80128d2:	d822      	bhi.n	801291a <LedBlink::SetMode(ledblink::Mode)+0x52>
 80128d4:	e8df f001 	tbb	[pc, r1]
 80128d8:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 80128dc:	23ff001d 	mvnscs	r0, #29
 80128e0:	6003      	str	r3, [r0, #0]
 80128e2:	2300      	movs	r3, #0
 80128e4:	2201      	movs	r2, #1
 80128e6:	60c3      	str	r3, [r0, #12]
 80128e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80128ec:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80128f0:	611a      	str	r2, [r3, #16]
 80128f2:	6880      	ldr	r0, [r0, #8]
 80128f4:	b1d8      	cbz	r0, 801292e <LedBlink::SetMode(ledblink::Mode)+0x66>
 80128f6:	6803      	ldr	r3, [r0, #0]
 80128f8:	689b      	ldr	r3, [r3, #8]
 80128fa:	4718      	bx	r3
 80128fc:	2301      	movs	r3, #1
 80128fe:	6003      	str	r3, [r0, #0]
 8012900:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012904:	60c3      	str	r3, [r0, #12]
 8012906:	e7f4      	b.n	80128f2 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8012908:	2303      	movs	r3, #3
 801290a:	6003      	str	r3, [r0, #0]
 801290c:	f240 134d 	movw	r3, #333	; 0x14d
 8012910:	e7f8      	b.n	8012904 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8012912:	2305      	movs	r3, #5
 8012914:	6003      	str	r3, [r0, #0]
 8012916:	23c8      	movs	r3, #200	; 0xc8
 8012918:	e7f4      	b.n	8012904 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 801291a:	2300      	movs	r3, #0
 801291c:	2201      	movs	r2, #1
 801291e:	6003      	str	r3, [r0, #0]
 8012920:	60c3      	str	r3, [r0, #12]
 8012922:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012926:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 801292a:	615a      	str	r2, [r3, #20]
 801292c:	e7e1      	b.n	80128f2 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 801292e:	4770      	bx	lr

08012930 <Hardware::Hardware()>:
 8012930:	b570      	push	{r4, r5, r6, lr}
 8012932:	2400      	movs	r4, #0
 8012934:	4b24      	ldr	r3, [pc, #144]	; (80129c8 <Hardware::Hardware()+0x98>)
 8012936:	4e25      	ldr	r6, [pc, #148]	; (80129cc <Hardware::Hardware()+0x9c>)
 8012938:	b090      	sub	sp, #64	; 0x40
 801293a:	4605      	mov	r5, r0
 801293c:	6004      	str	r4, [r0, #0]
 801293e:	7104      	strb	r4, [r0, #4]
 8012940:	6018      	str	r0, [r3, #0]
 8012942:	f240 6004 	movw	r0, #1540	; 0x604
 8012946:	f000 ff4f 	bl	80137e8 <rcu_periph_clock_enable>
 801294a:	2203      	movs	r2, #3
 801294c:	2110      	movs	r1, #16
 801294e:	4630      	mov	r0, r6
 8012950:	2301      	movs	r3, #1
 8012952:	f000 feb9 	bl	80136c8 <gpio_init>
 8012956:	2301      	movs	r3, #1
 8012958:	6173      	str	r3, [r6, #20]
 801295a:	f7ff fef5 	bl	8012748 <console_init>
 801295e:	f5a6 3680 	sub.w	r6, r6, #65536	; 0x10000
 8012962:	f000 fd0f 	bl	8013384 <systick_config>
 8012966:	f001 fd8d 	bl	8014484 <udelay_init()>
 801296a:	f001 fd89 	bl	8014480 <micros_init()>
 801296e:	f240 7004 	movw	r0, #1796	; 0x704
 8012972:	f000 ff39 	bl	80137e8 <rcu_periph_clock_enable>
 8012976:	4630      	mov	r0, r6
 8012978:	f001 f882 	bl	8013a80 <timer_deinit>
 801297c:	236b      	movs	r3, #107	; 0x6b
 801297e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012986:	a903      	add	r1, sp, #12
 8012988:	4630      	mov	r0, r6
 801298a:	9305      	str	r3, [sp, #20]
 801298c:	f001 f8da 	bl	8013b44 <timer_init>
 8012990:	4630      	mov	r0, r6
 8012992:	f001 f92f 	bl	8013bf4 <timer_enable>
 8012996:	f001 fb03 	bl	8013fa0 <gd32_adc_init()>
 801299a:	230e      	movs	r3, #14
 801299c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80129a0:	237a      	movs	r3, #122	; 0x7a
 80129a2:	a807      	add	r0, sp, #28
 80129a4:	930c      	str	r3, [sp, #48]	; 0x30
 80129a6:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80129aa:	9407      	str	r4, [sp, #28]
 80129ac:	940f      	str	r4, [sp, #60]	; 0x3c
 80129ae:	f000 fc0f 	bl	80131d0 <mktime>
 80129b2:	4621      	mov	r1, r4
 80129b4:	e9cd 0401 	strd	r0, r4, [sp, #4]
 80129b8:	a801      	add	r0, sp, #4
 80129ba:	f000 fc7f 	bl	80132bc <settimeofday>
 80129be:	f001 fb49 	bl	8014054 <gd32_i2c_begin()>
 80129c2:	4628      	mov	r0, r5
 80129c4:	b010      	add	sp, #64	; 0x40
 80129c6:	bd70      	pop	{r4, r5, r6, pc}
 80129c8:	2000aef4 	strdcs	sl, [r0], -r4
 80129cc:	40011000 	andmi	r1, r1, r0

080129d0 <Hardware::GetUuid(unsigned char*)>:
 80129d0:	4a0c      	ldr	r2, [pc, #48]	; (8012a04 <Hardware::GetUuid(unsigned char*)+0x34>)
 80129d2:	b084      	sub	sp, #16
 80129d4:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 80129d8:	9300      	str	r3, [sp, #0]
 80129da:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 80129de:	9001      	str	r0, [sp, #4]
 80129e0:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 80129e4:	4403      	add	r3, r0
 80129e6:	4413      	add	r3, r2
 80129e8:	9202      	str	r2, [sp, #8]
 80129ea:	466a      	mov	r2, sp
 80129ec:	9303      	str	r3, [sp, #12]
 80129ee:	1e4b      	subs	r3, r1, #1
 80129f0:	310f      	adds	r1, #15
 80129f2:	428b      	cmp	r3, r1
 80129f4:	d004      	beq.n	8012a00 <Hardware::GetUuid(unsigned char*)+0x30>
 80129f6:	f812 0b01 	ldrb.w	r0, [r2], #1
 80129fa:	f803 0f01 	strb.w	r0, [r3, #1]!
 80129fe:	e7f8      	b.n	80129f2 <Hardware::GetUuid(unsigned char*)+0x22>
 8012a00:	b004      	add	sp, #16
 8012a02:	4770      	bx	lr
 8012a04:	1ffff000 	svcne	0x00fff000

08012a08 <Hardware::SetTime(tm const*)>:
 8012a08:	2000      	movs	r0, #0
 8012a0a:	4770      	bx	lr

08012a0c <Hardware::Reboot()>:
 8012a0c:	b508      	push	{r3, lr}
 8012a0e:	6803      	ldr	r3, [r0, #0]
 8012a10:	4604      	mov	r4, r0
 8012a12:	b153      	cbz	r3, 8012a2a <Hardware::Reboot()+0x1e>
 8012a14:	2300      	movs	r3, #0
 8012a16:	2104      	movs	r1, #4
 8012a18:	7103      	strb	r3, [r0, #4]
 8012a1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012a1e:	f000 fe29 	bl	8013674 <fwdgt_config>
 8012a22:	6820      	ldr	r0, [r4, #0]
 8012a24:	6803      	ldr	r3, [r0, #0]
 8012a26:	689b      	ldr	r3, [r3, #8]
 8012a28:	4798      	blx	r3
 8012a2a:	2102      	movs	r1, #2
 8012a2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012a30:	f000 fe20 	bl	8013674 <fwdgt_config>
 8012a34:	2801      	cmp	r0, #1
 8012a36:	bf0c      	ite	eq
 8012a38:	2301      	moveq	r3, #1
 8012a3a:	2300      	movne	r3, #0
 8012a3c:	7123      	strb	r3, [r4, #4]
 8012a3e:	d101      	bne.n	8012a44 <Hardware::Reboot()+0x38>
 8012a40:	f000 fe08 	bl	8013654 <fwdgt_enable>
 8012a44:	2208      	movs	r2, #8
 8012a46:	4b0d      	ldr	r3, [pc, #52]	; (8012a7c <Hardware::Reboot()+0x70>)
 8012a48:	2501      	movs	r5, #1
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	480c      	ldr	r0, [pc, #48]	; (8012a80 <Hardware::Reboot()+0x74>)
 8012a4e:	601a      	str	r2, [r3, #0]
 8012a50:	227d      	movs	r2, #125	; 0x7d
 8012a52:	490c      	ldr	r1, [pc, #48]	; (8012a84 <Hardware::Reboot()+0x78>)
 8012a54:	60da      	str	r2, [r3, #12]
 8012a56:	68dc      	ldr	r4, [r3, #12]
 8012a58:	b904      	cbnz	r4, 8012a5c <Hardware::Reboot()+0x50>
 8012a5a:	e7fe      	b.n	8012a5a <Hardware::Reboot()+0x4e>
 8012a5c:	6802      	ldr	r2, [r0, #0]
 8012a5e:	695e      	ldr	r6, [r3, #20]
 8012a60:	1b92      	subs	r2, r2, r6
 8012a62:	4294      	cmp	r4, r2
 8012a64:	d8f8      	bhi.n	8012a58 <Hardware::Reboot()+0x4c>
 8012a66:	6802      	ldr	r2, [r0, #0]
 8012a68:	615a      	str	r2, [r3, #20]
 8012a6a:	691a      	ldr	r2, [r3, #16]
 8012a6c:	2a01      	cmp	r2, #1
 8012a6e:	f082 0401 	eor.w	r4, r2, #1
 8012a72:	611c      	str	r4, [r3, #16]
 8012a74:	bf14      	ite	ne
 8012a76:	610d      	strne	r5, [r1, #16]
 8012a78:	614a      	streq	r2, [r1, #20]
 8012a7a:	e7ec      	b.n	8012a56 <Hardware::Reboot()+0x4a>
 8012a7c:	2000aef0 	strdcs	sl, [r0], -r0
 8012a80:	2000af0c 	andcs	sl, r0, ip, lsl #30
 8012a84:	40011000 	andmi	r1, r1, r0

08012a88 <operator delete(void*)>:
 8012a88:	f000 b890 	b.w	8012bac <free>

08012a8c <operator delete[](void*)>:
 8012a8c:	f000 b88e 	b.w	8012bac <free>

08012a90 <operator new(unsigned int)>:
 8012a90:	f000 b842 	b.w	8012b18 <malloc>

08012a94 <operator new[](unsigned int)>:
 8012a94:	f000 b840 	b.w	8012b18 <malloc>

08012a98 <inet_aton>:
 8012a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012a9a:	f04f 0c0a 	mov.w	ip, #10
 8012a9e:	2500      	movs	r5, #0
 8012aa0:	ae01      	add	r6, sp, #4
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	1d07      	adds	r7, r0, #4
 8012aa8:	e007      	b.n	8012aba <inet_aton+0x22>
 8012aaa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012aae:	2b09      	cmp	r3, #9
 8012ab0:	d820      	bhi.n	8012af4 <inet_aton+0x5c>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	fb0c 4202 	mla	r2, ip, r2, r4
 8012ab8:	3a30      	subs	r2, #48	; 0x30
 8012aba:	4618      	mov	r0, r3
 8012abc:	f810 4b01 	ldrb.w	r4, [r0], #1
 8012ac0:	2c2e      	cmp	r4, #46	; 0x2e
 8012ac2:	d111      	bne.n	8012ae8 <inet_aton+0x50>
 8012ac4:	3501      	adds	r5, #1
 8012ac6:	2d03      	cmp	r5, #3
 8012ac8:	f806 2b01 	strb.w	r2, [r6], #1
 8012acc:	d1e9      	bne.n	8012aa2 <inet_aton+0xa>
 8012ace:	2200      	movs	r2, #0
 8012ad0:	250a      	movs	r5, #10
 8012ad2:	1d1c      	adds	r4, r3, #4
 8012ad4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8012ad8:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8012adc:	d10d      	bne.n	8012afa <inet_aton+0x62>
 8012ade:	f88d 2007 	strb.w	r2, [sp, #7]
 8012ae2:	b9b1      	cbnz	r1, 8012b12 <inet_aton+0x7a>
 8012ae4:	2001      	movs	r0, #1
 8012ae6:	e006      	b.n	8012af6 <inet_aton+0x5e>
 8012ae8:	2c00      	cmp	r4, #0
 8012aea:	d0eb      	beq.n	8012ac4 <inet_aton+0x2c>
 8012aec:	2c0a      	cmp	r4, #10
 8012aee:	d0e9      	beq.n	8012ac4 <inet_aton+0x2c>
 8012af0:	42b8      	cmp	r0, r7
 8012af2:	d1da      	bne.n	8012aaa <inet_aton+0x12>
 8012af4:	2000      	movs	r0, #0
 8012af6:	b003      	add	sp, #12
 8012af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012afa:	280a      	cmp	r0, #10
 8012afc:	d0ef      	beq.n	8012ade <inet_aton+0x46>
 8012afe:	42a3      	cmp	r3, r4
 8012b00:	d0f8      	beq.n	8012af4 <inet_aton+0x5c>
 8012b02:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 8012b06:	2e09      	cmp	r6, #9
 8012b08:	d8f4      	bhi.n	8012af4 <inet_aton+0x5c>
 8012b0a:	fb05 0202 	mla	r2, r5, r2, r0
 8012b0e:	3a30      	subs	r2, #48	; 0x30
 8012b10:	e7e0      	b.n	8012ad4 <inet_aton+0x3c>
 8012b12:	9b01      	ldr	r3, [sp, #4]
 8012b14:	600b      	str	r3, [r1, #0]
 8012b16:	e7e5      	b.n	8012ae4 <inet_aton+0x4c>

08012b18 <malloc>:
 8012b18:	b538      	push	{r3, r4, r5, lr}
 8012b1a:	4604      	mov	r4, r0
 8012b1c:	4601      	mov	r1, r0
 8012b1e:	481c      	ldr	r0, [pc, #112]	; (8012b90 <malloc+0x78>)
 8012b20:	f000 faae 	bl	8013080 <printf>
 8012b24:	b17c      	cbz	r4, 8012b46 <malloc+0x2e>
 8012b26:	4b1b      	ldr	r3, [pc, #108]	; (8012b94 <malloc+0x7c>)
 8012b28:	6818      	ldr	r0, [r3, #0]
 8012b2a:	b978      	cbnz	r0, 8012b4c <malloc+0x34>
 8012b2c:	4a1a      	ldr	r2, [pc, #104]	; (8012b98 <malloc+0x80>)
 8012b2e:	f104 031b 	add.w	r3, r4, #27
 8012b32:	6811      	ldr	r1, [r2, #0]
 8012b34:	4819      	ldr	r0, [pc, #100]	; (8012b9c <malloc+0x84>)
 8012b36:	f023 030f 	bic.w	r3, r3, #15
 8012b3a:	440b      	add	r3, r1
 8012b3c:	4283      	cmp	r3, r0
 8012b3e:	d921      	bls.n	8012b84 <malloc+0x6c>
 8012b40:	4817      	ldr	r0, [pc, #92]	; (8012ba0 <malloc+0x88>)
 8012b42:	f000 fa9d 	bl	8013080 <printf>
 8012b46:	2500      	movs	r5, #0
 8012b48:	4628      	mov	r0, r5
 8012b4a:	bd38      	pop	{r3, r4, r5, pc}
 8012b4c:	4284      	cmp	r4, r0
 8012b4e:	d80a      	bhi.n	8012b66 <malloc+0x4e>
 8012b50:	685a      	ldr	r2, [r3, #4]
 8012b52:	6899      	ldr	r1, [r3, #8]
 8012b54:	3201      	adds	r2, #1
 8012b56:	428a      	cmp	r2, r1
 8012b58:	605a      	str	r2, [r3, #4]
 8012b5a:	d900      	bls.n	8012b5e <malloc+0x46>
 8012b5c:	609a      	str	r2, [r3, #8]
 8012b5e:	68d9      	ldr	r1, [r3, #12]
 8012b60:	b919      	cbnz	r1, 8012b6a <malloc+0x52>
 8012b62:	4604      	mov	r4, r0
 8012b64:	e7e2      	b.n	8012b2c <malloc+0x14>
 8012b66:	3310      	adds	r3, #16
 8012b68:	e7de      	b.n	8012b28 <malloc+0x10>
 8012b6a:	4604      	mov	r4, r0
 8012b6c:	688a      	ldr	r2, [r1, #8]
 8012b6e:	60da      	str	r2, [r3, #12]
 8012b70:	2300      	movs	r3, #0
 8012b72:	f101 050c 	add.w	r5, r1, #12
 8012b76:	608b      	str	r3, [r1, #8]
 8012b78:	4622      	mov	r2, r4
 8012b7a:	462b      	mov	r3, r5
 8012b7c:	4809      	ldr	r0, [pc, #36]	; (8012ba4 <malloc+0x8c>)
 8012b7e:	f000 fa7f 	bl	8013080 <printf>
 8012b82:	e7e1      	b.n	8012b48 <malloc+0x30>
 8012b84:	6013      	str	r3, [r2, #0]
 8012b86:	4b08      	ldr	r3, [pc, #32]	; (8012ba8 <malloc+0x90>)
 8012b88:	e9c1 3400 	strd	r3, r4, [r1]
 8012b8c:	e7f0      	b.n	8012b70 <malloc+0x58>
 8012b8e:	bf00      	nop
 8012b90:	0801719c 	stmdaeq	r1, {r2, r3, r4, r7, r8, ip, sp, lr}
 8012b94:	20000024 	andcs	r0, r0, r4, lsr #32
 8012b98:	20000020 	andcs	r0, r0, r0, lsr #32
 8012b9c:	20016800 	andcs	r6, r1, r0, lsl #16
 8012ba0:	080171a8 	stmdaeq	r1, {r3, r5, r7, r8, ip, sp, lr}
 8012ba4:	080171c4 	stmdaeq	r1, {r2, r6, r7, r8, ip, sp, lr}
 8012ba8:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08012bac <free>:
 8012bac:	b538      	push	{r3, r4, r5, lr}
 8012bae:	4604      	mov	r4, r0
 8012bb0:	b1c8      	cbz	r0, 8012be6 <free+0x3a>
 8012bb2:	f1a0 050c 	sub.w	r5, r0, #12
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	4629      	mov	r1, r5
 8012bba:	480c      	ldr	r0, [pc, #48]	; (8012bec <free+0x40>)
 8012bbc:	f000 fa60 	bl	8013080 <printf>
 8012bc0:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8012bc4:	4b0a      	ldr	r3, [pc, #40]	; (8012bf0 <free+0x44>)
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d10d      	bne.n	8012be6 <free+0x3a>
 8012bca:	4b0a      	ldr	r3, [pc, #40]	; (8012bf4 <free+0x48>)
 8012bcc:	681a      	ldr	r2, [r3, #0]
 8012bce:	b152      	cbz	r2, 8012be6 <free+0x3a>
 8012bd0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8012bd4:	4291      	cmp	r1, r2
 8012bd6:	d107      	bne.n	8012be8 <free+0x3c>
 8012bd8:	68da      	ldr	r2, [r3, #12]
 8012bda:	f844 2c04 	str.w	r2, [r4, #-4]
 8012bde:	685a      	ldr	r2, [r3, #4]
 8012be0:	60dd      	str	r5, [r3, #12]
 8012be2:	3a01      	subs	r2, #1
 8012be4:	605a      	str	r2, [r3, #4]
 8012be6:	bd38      	pop	{r3, r4, r5, pc}
 8012be8:	3310      	adds	r3, #16
 8012bea:	e7ef      	b.n	8012bcc <free+0x20>
 8012bec:	080171ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, ip, sp, lr}
 8012bf0:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8012bf4:	20000024 	andcs	r0, r0, r4, lsr #32

08012bf8 <memcpy>:
 8012bf8:	b510      	push	{r4, lr}
 8012bfa:	1e43      	subs	r3, r0, #1
 8012bfc:	440a      	add	r2, r1
 8012bfe:	4291      	cmp	r1, r2
 8012c00:	d100      	bne.n	8012c04 <memcpy+0xc>
 8012c02:	bd10      	pop	{r4, pc}
 8012c04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c0c:	e7f7      	b.n	8012bfe <memcpy+0x6>

08012c0e <memmove>:
 8012c0e:	4288      	cmp	r0, r1
 8012c10:	b510      	push	{r4, lr}
 8012c12:	eb01 0302 	add.w	r3, r1, r2
 8012c16:	d208      	bcs.n	8012c2a <memmove+0x1c>
 8012c18:	1e42      	subs	r2, r0, #1
 8012c1a:	4299      	cmp	r1, r3
 8012c1c:	d100      	bne.n	8012c20 <memmove+0x12>
 8012c1e:	bd10      	pop	{r4, pc}
 8012c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c24:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012c28:	e7f7      	b.n	8012c1a <memmove+0xc>
 8012c2a:	4601      	mov	r1, r0
 8012c2c:	4402      	add	r2, r0
 8012c2e:	428a      	cmp	r2, r1
 8012c30:	d0f5      	beq.n	8012c1e <memmove+0x10>
 8012c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c3a:	e7f8      	b.n	8012c2e <memmove+0x20>

08012c3c <memset>:
 8012c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c3e:	b1e2      	cbz	r2, 8012c7a <memset+0x3e>
 8012c40:	4603      	mov	r3, r0
 8012c42:	b2c9      	uxtb	r1, r1
 8012c44:	075c      	lsls	r4, r3, #29
 8012c46:	d114      	bne.n	8012c72 <memset+0x36>
 8012c48:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8012c4c:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8012c50:	463d      	mov	r5, r7
 8012c52:	f022 0407 	bic.w	r4, r2, #7
 8012c56:	08d6      	lsrs	r6, r2, #3
 8012c58:	441c      	add	r4, r3
 8012c5a:	42a3      	cmp	r3, r4
 8012c5c:	d10e      	bne.n	8012c7c <memset+0x40>
 8012c5e:	f06f 0307 	mvn.w	r3, #7
 8012c62:	fb03 2206 	mla	r2, r3, r6, r2
 8012c66:	4422      	add	r2, r4
 8012c68:	4294      	cmp	r4, r2
 8012c6a:	d006      	beq.n	8012c7a <memset+0x3e>
 8012c6c:	f804 1b01 	strb.w	r1, [r4], #1
 8012c70:	e7fa      	b.n	8012c68 <memset+0x2c>
 8012c72:	3a01      	subs	r2, #1
 8012c74:	f803 1b01 	strb.w	r1, [r3], #1
 8012c78:	d1e4      	bne.n	8012c44 <memset+0x8>
 8012c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c7c:	f843 7b08 	str.w	r7, [r3], #8
 8012c80:	f843 5c04 	str.w	r5, [r3, #-4]
 8012c84:	e7e9      	b.n	8012c5a <memset+0x1e>
	...

08012c88 <_xputch>:
 8012c88:	4603      	mov	r3, r0
 8012c8a:	b410      	push	{r4}
 8012c8c:	4c08      	ldr	r4, [pc, #32]	; (8012cb0 <_xputch+0x28>)
 8012c8e:	68da      	ldr	r2, [r3, #12]
 8012c90:	4608      	mov	r0, r1
 8012c92:	6821      	ldr	r1, [r4, #0]
 8012c94:	3201      	adds	r2, #1
 8012c96:	60da      	str	r2, [r3, #12]
 8012c98:	b139      	cbz	r1, 8012caa <_xputch+0x22>
 8012c9a:	691b      	ldr	r3, [r3, #16]
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	da02      	bge.n	8012ca6 <_xputch+0x1e>
 8012ca0:	1c4b      	adds	r3, r1, #1
 8012ca2:	6023      	str	r3, [r4, #0]
 8012ca4:	7008      	strb	r0, [r1, #0]
 8012ca6:	bc10      	pop	{r4}
 8012ca8:	4770      	bx	lr
 8012caa:	bc10      	pop	{r4}
 8012cac:	f7ff bd5c 	b.w	8012768 <console_putc>
 8012cb0:	2000aef8 	strdcs	sl, [r0], -r8

08012cb4 <_format_int>:
 8012cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb8:	461f      	mov	r7, r3
 8012cba:	b091      	sub	sp, #68	; 0x44
 8012cbc:	ea52 0307 	orrs.w	r3, r2, r7
 8012cc0:	4680      	mov	r8, r0
 8012cc2:	4616      	mov	r6, r2
 8012cc4:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8012cc8:	d138      	bne.n	8012d3c <_format_int+0x88>
 8012cca:	2330      	movs	r3, #48	; 0x30
 8012ccc:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8012cd0:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8012cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8012cd8:	07d8      	lsls	r0, r3, #31
 8012cda:	d508      	bpl.n	8012cee <_format_int+0x3a>
 8012cdc:	466a      	mov	r2, sp
 8012cde:	2030      	movs	r0, #48	; 0x30
 8012ce0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012ce4:	1b2e      	subs	r6, r5, r4
 8012ce6:	428e      	cmp	r6, r1
 8012ce8:	da01      	bge.n	8012cee <_format_int+0x3a>
 8012cea:	4294      	cmp	r4, r2
 8012cec:	d843      	bhi.n	8012d76 <_format_int+0xc2>
 8012cee:	0699      	lsls	r1, r3, #26
 8012cf0:	d508      	bpl.n	8012d04 <_format_int+0x50>
 8012cf2:	466a      	mov	r2, sp
 8012cf4:	2030      	movs	r0, #48	; 0x30
 8012cf6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012cfa:	1b2e      	subs	r6, r5, r4
 8012cfc:	428e      	cmp	r6, r1
 8012cfe:	da01      	bge.n	8012d04 <_format_int+0x50>
 8012d00:	4294      	cmp	r4, r2
 8012d02:	d83b      	bhi.n	8012d7c <_format_int+0xc8>
 8012d04:	071a      	lsls	r2, r3, #28
 8012d06:	bf44      	itt	mi
 8012d08:	222d      	movmi	r2, #45	; 0x2d
 8012d0a:	f804 2901 	strbmi.w	r2, [r4], #-1
 8012d0e:	065b      	lsls	r3, r3, #25
 8012d10:	d408      	bmi.n	8012d24 <_format_int+0x70>
 8012d12:	466b      	mov	r3, sp
 8012d14:	2120      	movs	r1, #32
 8012d16:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8012d1a:	1b28      	subs	r0, r5, r4
 8012d1c:	4290      	cmp	r0, r2
 8012d1e:	da01      	bge.n	8012d24 <_format_int+0x70>
 8012d20:	429c      	cmp	r4, r3
 8012d22:	d82e      	bhi.n	8012d82 <_format_int+0xce>
 8012d24:	1b2d      	subs	r5, r5, r4
 8012d26:	3401      	adds	r4, #1
 8012d28:	ab10      	add	r3, sp, #64	; 0x40
 8012d2a:	429c      	cmp	r4, r3
 8012d2c:	d32c      	bcc.n	8012d88 <_format_int+0xd4>
 8012d2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012d32:	42ab      	cmp	r3, r5
 8012d34:	dc2e      	bgt.n	8012d94 <_format_int+0xe0>
 8012d36:	b011      	add	sp, #68	; 0x44
 8012d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d3c:	462c      	mov	r4, r5
 8012d3e:	46eb      	mov	fp, sp
 8012d40:	4630      	mov	r0, r6
 8012d42:	4639      	mov	r1, r7
 8012d44:	220a      	movs	r2, #10
 8012d46:	2300      	movs	r3, #0
 8012d48:	f7f4 fa02 	bl	8007150 <__aeabi_uldivmod>
 8012d4c:	46b2      	mov	sl, r6
 8012d4e:	3230      	adds	r2, #48	; 0x30
 8012d50:	46b9      	mov	r9, r7
 8012d52:	2300      	movs	r3, #0
 8012d54:	4630      	mov	r0, r6
 8012d56:	4639      	mov	r1, r7
 8012d58:	f804 2901 	strb.w	r2, [r4], #-1
 8012d5c:	220a      	movs	r2, #10
 8012d5e:	f7f4 f9f7 	bl	8007150 <__aeabi_uldivmod>
 8012d62:	f1ba 0f0a 	cmp.w	sl, #10
 8012d66:	f179 0300 	sbcs.w	r3, r9, #0
 8012d6a:	4606      	mov	r6, r0
 8012d6c:	460f      	mov	r7, r1
 8012d6e:	d3b1      	bcc.n	8012cd4 <_format_int+0x20>
 8012d70:	455c      	cmp	r4, fp
 8012d72:	d1e5      	bne.n	8012d40 <_format_int+0x8c>
 8012d74:	e7ae      	b.n	8012cd4 <_format_int+0x20>
 8012d76:	f804 0901 	strb.w	r0, [r4], #-1
 8012d7a:	e7b3      	b.n	8012ce4 <_format_int+0x30>
 8012d7c:	f804 0901 	strb.w	r0, [r4], #-1
 8012d80:	e7bb      	b.n	8012cfa <_format_int+0x46>
 8012d82:	f804 1901 	strb.w	r1, [r4], #-1
 8012d86:	e7c8      	b.n	8012d1a <_format_int+0x66>
 8012d88:	4640      	mov	r0, r8
 8012d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d8e:	f7ff ff7b 	bl	8012c88 <_xputch>
 8012d92:	e7c9      	b.n	8012d28 <_format_int+0x74>
 8012d94:	2120      	movs	r1, #32
 8012d96:	4640      	mov	r0, r8
 8012d98:	f7ff ff76 	bl	8012c88 <_xputch>
 8012d9c:	3501      	adds	r5, #1
 8012d9e:	e7c6      	b.n	8012d2e <_format_int+0x7a>

08012da0 <_format_hex>:
 8012da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012da2:	b091      	sub	sp, #68	; 0x44
 8012da4:	4606      	mov	r6, r0
 8012da6:	6804      	ldr	r4, [r0, #0]
 8012da8:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8012dac:	bb61      	cbnz	r1, 8012e08 <_format_hex+0x68>
 8012dae:	2330      	movs	r3, #48	; 0x30
 8012db0:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8012db4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8012db8:	07e5      	lsls	r5, r4, #31
 8012dba:	d507      	bpl.n	8012dcc <_format_hex+0x2c>
 8012dbc:	4669      	mov	r1, sp
 8012dbe:	2530      	movs	r5, #48	; 0x30
 8012dc0:	6870      	ldr	r0, [r6, #4]
 8012dc2:	1ad7      	subs	r7, r2, r3
 8012dc4:	4287      	cmp	r7, r0
 8012dc6:	da01      	bge.n	8012dcc <_format_hex+0x2c>
 8012dc8:	428b      	cmp	r3, r1
 8012dca:	d831      	bhi.n	8012e30 <_format_hex+0x90>
 8012dcc:	06a0      	lsls	r0, r4, #26
 8012dce:	d507      	bpl.n	8012de0 <_format_hex+0x40>
 8012dd0:	4669      	mov	r1, sp
 8012dd2:	2530      	movs	r5, #48	; 0x30
 8012dd4:	68b0      	ldr	r0, [r6, #8]
 8012dd6:	1ad7      	subs	r7, r2, r3
 8012dd8:	4287      	cmp	r7, r0
 8012dda:	da01      	bge.n	8012de0 <_format_hex+0x40>
 8012ddc:	428b      	cmp	r3, r1
 8012dde:	d82a      	bhi.n	8012e36 <_format_hex+0x96>
 8012de0:	0661      	lsls	r1, r4, #25
 8012de2:	d407      	bmi.n	8012df4 <_format_hex+0x54>
 8012de4:	4669      	mov	r1, sp
 8012de6:	2420      	movs	r4, #32
 8012de8:	68b0      	ldr	r0, [r6, #8]
 8012dea:	1ad5      	subs	r5, r2, r3
 8012dec:	4285      	cmp	r5, r0
 8012dee:	da01      	bge.n	8012df4 <_format_hex+0x54>
 8012df0:	428b      	cmp	r3, r1
 8012df2:	d823      	bhi.n	8012e3c <_format_hex+0x9c>
 8012df4:	1ad5      	subs	r5, r2, r3
 8012df6:	1c5c      	adds	r4, r3, #1
 8012df8:	ab10      	add	r3, sp, #64	; 0x40
 8012dfa:	429c      	cmp	r4, r3
 8012dfc:	d321      	bcc.n	8012e42 <_format_hex+0xa2>
 8012dfe:	68b3      	ldr	r3, [r6, #8]
 8012e00:	429d      	cmp	r5, r3
 8012e02:	db24      	blt.n	8012e4e <_format_hex+0xae>
 8012e04:	b011      	add	sp, #68	; 0x44
 8012e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e08:	f014 0f02 	tst.w	r4, #2
 8012e0c:	bf0c      	ite	eq
 8012e0e:	2757      	moveq	r7, #87	; 0x57
 8012e10:	2737      	movne	r7, #55	; 0x37
 8012e12:	4613      	mov	r3, r2
 8012e14:	466d      	mov	r5, sp
 8012e16:	f001 000f 	and.w	r0, r1, #15
 8012e1a:	2809      	cmp	r0, #9
 8012e1c:	bf94      	ite	ls
 8012e1e:	3030      	addls	r0, #48	; 0x30
 8012e20:	19c0      	addhi	r0, r0, r7
 8012e22:	0909      	lsrs	r1, r1, #4
 8012e24:	f803 0901 	strb.w	r0, [r3], #-1
 8012e28:	d0c6      	beq.n	8012db8 <_format_hex+0x18>
 8012e2a:	42ab      	cmp	r3, r5
 8012e2c:	d1f3      	bne.n	8012e16 <_format_hex+0x76>
 8012e2e:	e7c3      	b.n	8012db8 <_format_hex+0x18>
 8012e30:	f803 5901 	strb.w	r5, [r3], #-1
 8012e34:	e7c5      	b.n	8012dc2 <_format_hex+0x22>
 8012e36:	f803 5901 	strb.w	r5, [r3], #-1
 8012e3a:	e7cc      	b.n	8012dd6 <_format_hex+0x36>
 8012e3c:	f803 4901 	strb.w	r4, [r3], #-1
 8012e40:	e7d3      	b.n	8012dea <_format_hex+0x4a>
 8012e42:	4630      	mov	r0, r6
 8012e44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e48:	f7ff ff1e 	bl	8012c88 <_xputch>
 8012e4c:	e7d4      	b.n	8012df8 <_format_hex+0x58>
 8012e4e:	2120      	movs	r1, #32
 8012e50:	4630      	mov	r0, r6
 8012e52:	f7ff ff19 	bl	8012c88 <_xputch>
 8012e56:	3501      	adds	r5, #1
 8012e58:	e7d1      	b.n	8012dfe <_format_hex+0x5e>
	...

08012e5c <_vprintf>:
 8012e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e60:	2700      	movs	r7, #0
 8012e62:	460b      	mov	r3, r1
 8012e64:	4614      	mov	r4, r2
 8012e66:	f04f 080a 	mov.w	r8, #10
 8012e6a:	b086      	sub	sp, #24
 8012e6c:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8012e70:	7819      	ldrb	r1, [r3, #0]
 8012e72:	b919      	cbnz	r1, 8012e7c <_vprintf+0x20>
 8012e74:	9804      	ldr	r0, [sp, #16]
 8012e76:	b006      	add	sp, #24
 8012e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e7c:	2925      	cmp	r1, #37	; 0x25
 8012e7e:	f103 0501 	add.w	r5, r3, #1
 8012e82:	d004      	beq.n	8012e8e <_vprintf+0x32>
 8012e84:	a801      	add	r0, sp, #4
 8012e86:	f7ff feff 	bl	8012c88 <_xputch>
 8012e8a:	462b      	mov	r3, r5
 8012e8c:	e7f0      	b.n	8012e70 <_vprintf+0x14>
 8012e8e:	785a      	ldrb	r2, [r3, #1]
 8012e90:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8012e94:	2a30      	cmp	r2, #48	; 0x30
 8012e96:	9703      	str	r7, [sp, #12]
 8012e98:	d126      	bne.n	8012ee8 <_vprintf+0x8c>
 8012e9a:	2220      	movs	r2, #32
 8012e9c:	9201      	str	r2, [sp, #4]
 8012e9e:	1c9d      	adds	r5, r3, #2
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	462e      	mov	r6, r5
 8012ea4:	4613      	mov	r3, r2
 8012ea6:	7831      	ldrb	r1, [r6, #0]
 8012ea8:	4635      	mov	r5, r6
 8012eaa:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8012eae:	2809      	cmp	r0, #9
 8012eb0:	f106 0601 	add.w	r6, r6, #1
 8012eb4:	d91c      	bls.n	8012ef0 <_vprintf+0x94>
 8012eb6:	b12a      	cbz	r2, 8012ec4 <_vprintf+0x68>
 8012eb8:	9303      	str	r3, [sp, #12]
 8012eba:	b11b      	cbz	r3, 8012ec4 <_vprintf+0x68>
 8012ebc:	9b01      	ldr	r3, [sp, #4]
 8012ebe:	f043 0310 	orr.w	r3, r3, #16
 8012ec2:	9301      	str	r3, [sp, #4]
 8012ec4:	292e      	cmp	r1, #46	; 0x2e
 8012ec6:	d122      	bne.n	8012f0e <_vprintf+0xb2>
 8012ec8:	786b      	ldrb	r3, [r5, #1]
 8012eca:	2b2a      	cmp	r3, #42	; 0x2a
 8012ecc:	d014      	beq.n	8012ef8 <_vprintf+0x9c>
 8012ece:	2100      	movs	r1, #0
 8012ed0:	460a      	mov	r2, r1
 8012ed2:	1c68      	adds	r0, r5, #1
 8012ed4:	7803      	ldrb	r3, [r0, #0]
 8012ed6:	4605      	mov	r5, r0
 8012ed8:	3b30      	subs	r3, #48	; 0x30
 8012eda:	2b09      	cmp	r3, #9
 8012edc:	f100 0001 	add.w	r0, r0, #1
 8012ee0:	d92f      	bls.n	8012f42 <_vprintf+0xe6>
 8012ee2:	b181      	cbz	r1, 8012f06 <_vprintf+0xaa>
 8012ee4:	9202      	str	r2, [sp, #8]
 8012ee6:	e00e      	b.n	8012f06 <_vprintf+0xaa>
 8012ee8:	2a2d      	cmp	r2, #45	; 0x2d
 8012eea:	d1d9      	bne.n	8012ea0 <_vprintf+0x44>
 8012eec:	2240      	movs	r2, #64	; 0x40
 8012eee:	e7d5      	b.n	8012e9c <_vprintf+0x40>
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	fb08 0303 	mla	r3, r8, r3, r0
 8012ef6:	e7d6      	b.n	8012ea6 <_vprintf+0x4a>
 8012ef8:	f854 3b04 	ldr.w	r3, [r4], #4
 8012efc:	3502      	adds	r5, #2
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	bfb8      	it	lt
 8012f02:	425b      	neglt	r3, r3
 8012f04:	9302      	str	r3, [sp, #8]
 8012f06:	9b01      	ldr	r3, [sp, #4]
 8012f08:	f043 0301 	orr.w	r3, r3, #1
 8012f0c:	9301      	str	r3, [sp, #4]
 8012f0e:	782b      	ldrb	r3, [r5, #0]
 8012f10:	2b6c      	cmp	r3, #108	; 0x6c
 8012f12:	bf04      	itt	eq
 8012f14:	9b01      	ldreq	r3, [sp, #4]
 8012f16:	3501      	addeq	r5, #1
 8012f18:	7829      	ldrb	r1, [r5, #0]
 8012f1a:	bf04      	itt	eq
 8012f1c:	f043 0304 	orreq.w	r3, r3, #4
 8012f20:	9301      	streq	r3, [sp, #4]
 8012f22:	2978      	cmp	r1, #120	; 0x78
 8012f24:	d8ae      	bhi.n	8012e84 <_vprintf+0x28>
 8012f26:	296f      	cmp	r1, #111	; 0x6f
 8012f28:	d80f      	bhi.n	8012f4a <_vprintf+0xee>
 8012f2a:	2963      	cmp	r1, #99	; 0x63
 8012f2c:	d045      	beq.n	8012fba <_vprintf+0x15e>
 8012f2e:	d825      	bhi.n	8012f7c <_vprintf+0x120>
 8012f30:	2958      	cmp	r1, #88	; 0x58
 8012f32:	d1a7      	bne.n	8012e84 <_vprintf+0x28>
 8012f34:	9b01      	ldr	r3, [sp, #4]
 8012f36:	f043 0302 	orr.w	r3, r3, #2
 8012f3a:	9301      	str	r3, [sp, #4]
 8012f3c:	f854 1b04 	ldr.w	r1, [r4], #4
 8012f40:	e051      	b.n	8012fe6 <_vprintf+0x18a>
 8012f42:	2101      	movs	r1, #1
 8012f44:	fb08 3202 	mla	r2, r8, r2, r3
 8012f48:	e7c4      	b.n	8012ed4 <_vprintf+0x78>
 8012f4a:	f1a1 0370 	sub.w	r3, r1, #112	; 0x70
 8012f4e:	2b08      	cmp	r3, #8
 8012f50:	d898      	bhi.n	8012e84 <_vprintf+0x28>
 8012f52:	a201      	add	r2, pc, #4	; (adr r2, 8012f58 <_vprintf+0xfc>)
 8012f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f58:	08012fc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, sl, fp, sp}
 8012f5c:	08012e85 	stmdaeq	r1, {r0, r2, r7, r9, sl, fp, sp}
 8012f60:	08012e85 	stmdaeq	r1, {r0, r2, r7, r9, sl, fp, sp}
 8012f64:	08012fef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sl, fp, sp}
 8012f68:	08012e85 	stmdaeq	r1, {r0, r2, r7, r9, sl, fp, sp}
 8012f6c:	08013061 	stmdaeq	r1, {r0, r5, r6, ip, sp}
 8012f70:	08012e85 	stmdaeq	r1, {r0, r2, r7, r9, sl, fp, sp}
 8012f74:	08012e85 	stmdaeq	r1, {r0, r2, r7, r9, sl, fp, sp}
 8012f78:	08012f3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 8012f7c:	2964      	cmp	r1, #100	; 0x64
 8012f7e:	d002      	beq.n	8012f86 <_vprintf+0x12a>
 8012f80:	2969      	cmp	r1, #105	; 0x69
 8012f82:	f47f af7f 	bne.w	8012e84 <_vprintf+0x28>
 8012f86:	9901      	ldr	r1, [sp, #4]
 8012f88:	074e      	lsls	r6, r1, #29
 8012f8a:	bf43      	ittte	mi
 8012f8c:	3407      	addmi	r4, #7
 8012f8e:	f024 0307 	bicmi.w	r3, r4, #7
 8012f92:	461c      	movmi	r4, r3
 8012f94:	f854 2b04 	ldrpl.w	r2, [r4], #4
 8012f98:	bf4a      	itet	mi
 8012f9a:	685b      	ldrmi	r3, [r3, #4]
 8012f9c:	17d3      	asrpl	r3, r2, #31
 8012f9e:	f854 2b08 	ldrmi.w	r2, [r4], #8
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	da05      	bge.n	8012fb2 <_vprintf+0x156>
 8012fa6:	f041 0108 	orr.w	r1, r1, #8
 8012faa:	4252      	negs	r2, r2
 8012fac:	9101      	str	r1, [sp, #4]
 8012fae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8012fb2:	a801      	add	r0, sp, #4
 8012fb4:	f7ff fe7e 	bl	8012cb4 <_format_int>
 8012fb8:	e004      	b.n	8012fc4 <_vprintf+0x168>
 8012fba:	f854 1b04 	ldr.w	r1, [r4], #4
 8012fbe:	a801      	add	r0, sp, #4
 8012fc0:	f7ff fe62 	bl	8012c88 <_xputch>
 8012fc4:	3501      	adds	r5, #1
 8012fc6:	e760      	b.n	8012e8a <_vprintf+0x2e>
 8012fc8:	2308      	movs	r3, #8
 8012fca:	9303      	str	r3, [sp, #12]
 8012fcc:	2320      	movs	r3, #32
 8012fce:	2130      	movs	r1, #48	; 0x30
 8012fd0:	f854 6b04 	ldr.w	r6, [r4], #4
 8012fd4:	a801      	add	r0, sp, #4
 8012fd6:	9301      	str	r3, [sp, #4]
 8012fd8:	f7ff fe56 	bl	8012c88 <_xputch>
 8012fdc:	2178      	movs	r1, #120	; 0x78
 8012fde:	a801      	add	r0, sp, #4
 8012fe0:	f7ff fe52 	bl	8012c88 <_xputch>
 8012fe4:	4631      	mov	r1, r6
 8012fe6:	a801      	add	r0, sp, #4
 8012fe8:	f7ff feda 	bl	8012da0 <_format_hex>
 8012fec:	e7ea      	b.n	8012fc4 <_vprintf+0x168>
 8012fee:	2600      	movs	r6, #0
 8012ff0:	f854 9b04 	ldr.w	r9, [r4], #4
 8012ff4:	f819 3006 	ldrb.w	r3, [r9, r6]
 8012ff8:	b993      	cbnz	r3, 8013020 <_vprintf+0x1c4>
 8012ffa:	9b01      	ldr	r3, [sp, #4]
 8012ffc:	07d9      	lsls	r1, r3, #31
 8012ffe:	d503      	bpl.n	8013008 <_vprintf+0x1ac>
 8013000:	9b02      	ldr	r3, [sp, #8]
 8013002:	429e      	cmp	r6, r3
 8013004:	bfa8      	it	ge
 8013006:	461e      	movge	r6, r3
 8013008:	9b01      	ldr	r3, [sp, #4]
 801300a:	f106 0a01 	add.w	sl, r6, #1
 801300e:	065a      	lsls	r2, r3, #25
 8013010:	d403      	bmi.n	801301a <_vprintf+0x1be>
 8013012:	9b03      	ldr	r3, [sp, #12]
 8013014:	429e      	cmp	r6, r3
 8013016:	db05      	blt.n	8013024 <_vprintf+0x1c8>
 8013018:	4656      	mov	r6, sl
 801301a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801301e:	e00d      	b.n	801303c <_vprintf+0x1e0>
 8013020:	3601      	adds	r6, #1
 8013022:	e7e7      	b.n	8012ff4 <_vprintf+0x198>
 8013024:	2120      	movs	r1, #32
 8013026:	a801      	add	r0, sp, #4
 8013028:	f7ff fe2e 	bl	8012c88 <_xputch>
 801302c:	4656      	mov	r6, sl
 801302e:	e7eb      	b.n	8013008 <_vprintf+0x1ac>
 8013030:	a801      	add	r0, sp, #4
 8013032:	f7ff fe29 	bl	8012c88 <_xputch>
 8013036:	9b02      	ldr	r3, [sp, #8]
 8013038:	3b01      	subs	r3, #1
 801303a:	9302      	str	r3, [sp, #8]
 801303c:	9b01      	ldr	r3, [sp, #4]
 801303e:	07db      	lsls	r3, r3, #31
 8013040:	d501      	bpl.n	8013046 <_vprintf+0x1ea>
 8013042:	9b02      	ldr	r3, [sp, #8]
 8013044:	b11b      	cbz	r3, 801304e <_vprintf+0x1f2>
 8013046:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 801304a:	2900      	cmp	r1, #0
 801304c:	d1f0      	bne.n	8013030 <_vprintf+0x1d4>
 801304e:	9b03      	ldr	r3, [sp, #12]
 8013050:	42b3      	cmp	r3, r6
 8013052:	ddb7      	ble.n	8012fc4 <_vprintf+0x168>
 8013054:	2120      	movs	r1, #32
 8013056:	a801      	add	r0, sp, #4
 8013058:	f7ff fe16 	bl	8012c88 <_xputch>
 801305c:	3601      	adds	r6, #1
 801305e:	e7f6      	b.n	801304e <_vprintf+0x1f2>
 8013060:	9b01      	ldr	r3, [sp, #4]
 8013062:	f013 0304 	ands.w	r3, r3, #4
 8013066:	bf1d      	ittte	ne
 8013068:	3407      	addne	r4, #7
 801306a:	f024 0307 	bicne.w	r3, r4, #7
 801306e:	461c      	movne	r4, r3
 8013070:	f854 2b04 	ldreq.w	r2, [r4], #4
 8013074:	bf1c      	itt	ne
 8013076:	f854 2b08 	ldrne.w	r2, [r4], #8
 801307a:	685b      	ldrne	r3, [r3, #4]
 801307c:	e799      	b.n	8012fb2 <_vprintf+0x156>
 801307e:	bf00      	nop

08013080 <printf>:
 8013080:	b40f      	push	{r0, r1, r2, r3}
 8013082:	b507      	push	{r0, r1, r2, lr}
 8013084:	aa04      	add	r2, sp, #16
 8013086:	f852 1b04 	ldr.w	r1, [r2], #4
 801308a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801308e:	9201      	str	r2, [sp, #4]
 8013090:	f7ff fee4 	bl	8012e5c <_vprintf>
 8013094:	b003      	add	sp, #12
 8013096:	f85d eb04 	ldr.w	lr, [sp], #4
 801309a:	b004      	add	sp, #16
 801309c:	4770      	bx	lr
	...

080130a0 <sprintf>:
 80130a0:	b40e      	push	{r1, r2, r3}
 80130a2:	b517      	push	{r0, r1, r2, r4, lr}
 80130a4:	4c09      	ldr	r4, [pc, #36]	; (80130cc <sprintf+0x2c>)
 80130a6:	aa05      	add	r2, sp, #20
 80130a8:	f852 1b04 	ldr.w	r1, [r2], #4
 80130ac:	6020      	str	r0, [r4, #0]
 80130ae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80130b2:	9201      	str	r2, [sp, #4]
 80130b4:	f7ff fed2 	bl	8012e5c <_vprintf>
 80130b8:	2300      	movs	r3, #0
 80130ba:	6822      	ldr	r2, [r4, #0]
 80130bc:	6023      	str	r3, [r4, #0]
 80130be:	7013      	strb	r3, [r2, #0]
 80130c0:	b003      	add	sp, #12
 80130c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130c6:	b003      	add	sp, #12
 80130c8:	4770      	bx	lr
 80130ca:	bf00      	nop
 80130cc:	2000aef8 	strdcs	sl, [r0], -r8

080130d0 <snprintf>:
 80130d0:	b40c      	push	{r2, r3}
 80130d2:	460b      	mov	r3, r1
 80130d4:	b513      	push	{r0, r1, r4, lr}
 80130d6:	4c09      	ldr	r4, [pc, #36]	; (80130fc <snprintf+0x2c>)
 80130d8:	aa04      	add	r2, sp, #16
 80130da:	f852 1b04 	ldr.w	r1, [r2], #4
 80130de:	6020      	str	r0, [r4, #0]
 80130e0:	4618      	mov	r0, r3
 80130e2:	9201      	str	r2, [sp, #4]
 80130e4:	f7ff feba 	bl	8012e5c <_vprintf>
 80130e8:	2300      	movs	r3, #0
 80130ea:	6822      	ldr	r2, [r4, #0]
 80130ec:	6023      	str	r3, [r4, #0]
 80130ee:	7013      	strb	r3, [r2, #0]
 80130f0:	b002      	add	sp, #8
 80130f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130f6:	b002      	add	sp, #8
 80130f8:	4770      	bx	lr
 80130fa:	bf00      	nop
 80130fc:	2000aef8 	strdcs	sl, [r0], -r8

08013100 <vsnprintf>:
 8013100:	b538      	push	{r3, r4, r5, lr}
 8013102:	4605      	mov	r5, r0
 8013104:	4c05      	ldr	r4, [pc, #20]	; (801311c <vsnprintf+0x1c>)
 8013106:	4608      	mov	r0, r1
 8013108:	4611      	mov	r1, r2
 801310a:	461a      	mov	r2, r3
 801310c:	6025      	str	r5, [r4, #0]
 801310e:	f7ff fea5 	bl	8012e5c <_vprintf>
 8013112:	2300      	movs	r3, #0
 8013114:	6822      	ldr	r2, [r4, #0]
 8013116:	6023      	str	r3, [r4, #0]
 8013118:	7013      	strb	r3, [r2, #0]
 801311a:	bd38      	pop	{r3, r4, r5, pc}
 801311c:	2000aef8 	strdcs	sl, [r0], -r8

08013120 <puts>:
 8013120:	b508      	push	{r3, lr}
 8013122:	f7ff fb2d 	bl	8012780 <console_puts>
 8013126:	200a      	movs	r0, #10
 8013128:	f7ff fb1e 	bl	8012768 <console_putc>
 801312c:	2001      	movs	r0, #1
 801312e:	bd08      	pop	{r3, pc}

08013130 <strtok>:
 8013130:	b530      	push	{r4, r5, lr}
 8013132:	b910      	cbnz	r0, 801313a <strtok+0xa>
 8013134:	4b12      	ldr	r3, [pc, #72]	; (8013180 <strtok+0x50>)
 8013136:	6818      	ldr	r0, [r3, #0]
 8013138:	b158      	cbz	r0, 8013152 <strtok+0x22>
 801313a:	4603      	mov	r3, r0
 801313c:	460d      	mov	r5, r1
 801313e:	4618      	mov	r0, r3
 8013140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013144:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013148:	b924      	cbnz	r4, 8013154 <strtok+0x24>
 801314a:	b94a      	cbnz	r2, 8013160 <strtok+0x30>
 801314c:	4610      	mov	r0, r2
 801314e:	4b0c      	ldr	r3, [pc, #48]	; (8013180 <strtok+0x50>)
 8013150:	601a      	str	r2, [r3, #0]
 8013152:	bd30      	pop	{r4, r5, pc}
 8013154:	42a2      	cmp	r2, r4
 8013156:	d1f5      	bne.n	8013144 <strtok+0x14>
 8013158:	e7f0      	b.n	801313c <strtok+0xc>
 801315a:	4613      	mov	r3, r2
 801315c:	e00c      	b.n	8013178 <strtok+0x48>
 801315e:	b914      	cbnz	r4, 8013166 <strtok+0x36>
 8013160:	460d      	mov	r5, r1
 8013162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013166:	f815 4b01 	ldrb.w	r4, [r5], #1
 801316a:	42a2      	cmp	r2, r4
 801316c:	d1f7      	bne.n	801315e <strtok+0x2e>
 801316e:	2a00      	cmp	r2, #0
 8013170:	d0f3      	beq.n	801315a <strtok+0x2a>
 8013172:	2200      	movs	r2, #0
 8013174:	f803 2c01 	strb.w	r2, [r3, #-1]
 8013178:	4a01      	ldr	r2, [pc, #4]	; (8013180 <strtok+0x50>)
 801317a:	6013      	str	r3, [r2, #0]
 801317c:	e7e9      	b.n	8013152 <strtok+0x22>
 801317e:	bf00      	nop
 8013180:	2000aefc 	strdcs	sl, [r0], -ip

08013184 <isleapyear>:
 8013184:	2264      	movs	r2, #100	; 0x64
 8013186:	fb90 f3f2 	sdiv	r3, r0, r2
 801318a:	fb02 0313 	mls	r3, r2, r3, r0
 801318e:	b94b      	cbnz	r3, 80131a4 <isleapyear+0x20>
 8013190:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013194:	fb90 f2f3 	sdiv	r2, r0, r3
 8013198:	fb03 0012 	mls	r0, r3, r2, r0
 801319c:	fab0 f080 	clz	r0, r0
 80131a0:	0940      	lsrs	r0, r0, #5
 80131a2:	4770      	bx	lr
 80131a4:	f010 0f03 	tst.w	r0, #3
 80131a8:	bf0c      	ite	eq
 80131aa:	2001      	moveq	r0, #1
 80131ac:	2000      	movne	r0, #0
 80131ae:	4770      	bx	lr

080131b0 <getdaysofmonth>:
 80131b0:	b510      	push	{r4, lr}
 80131b2:	4604      	mov	r4, r0
 80131b4:	2c01      	cmp	r4, #1
 80131b6:	4608      	mov	r0, r1
 80131b8:	d102      	bne.n	80131c0 <getdaysofmonth+0x10>
 80131ba:	f7ff ffe3 	bl	8013184 <isleapyear>
 80131be:	b918      	cbnz	r0, 80131c8 <getdaysofmonth+0x18>
 80131c0:	4b02      	ldr	r3, [pc, #8]	; (80131cc <getdaysofmonth+0x1c>)
 80131c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80131c6:	bd10      	pop	{r4, pc}
 80131c8:	201d      	movs	r0, #29
 80131ca:	e7fc      	b.n	80131c6 <getdaysofmonth+0x16>
 80131cc:	08017218 	stmdaeq	r1, {r3, r4, r9, ip, sp, lr}

080131d0 <mktime>:
 80131d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d4:	4604      	mov	r4, r0
 80131d6:	2800      	cmp	r0, #0
 80131d8:	d042      	beq.n	8013260 <mktime+0x90>
 80131da:	6941      	ldr	r1, [r0, #20]
 80131dc:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 80131e0:	2b45      	cmp	r3, #69	; 0x45
 80131e2:	d83d      	bhi.n	8013260 <mktime+0x90>
 80131e4:	2600      	movs	r6, #0
 80131e6:	f240 75b2 	movw	r5, #1970	; 0x7b2
 80131ea:	f240 186d 	movw	r8, #365	; 0x16d
 80131ee:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 80131f2:	42af      	cmp	r7, r5
 80131f4:	da23      	bge.n	801323e <mktime+0x6e>
 80131f6:	6927      	ldr	r7, [r4, #16]
 80131f8:	2f0b      	cmp	r7, #11
 80131fa:	d831      	bhi.n	8013260 <mktime+0x90>
 80131fc:	2500      	movs	r5, #0
 80131fe:	42af      	cmp	r7, r5
 8013200:	d128      	bne.n	8013254 <mktime+0x84>
 8013202:	68e5      	ldr	r5, [r4, #12]
 8013204:	2d00      	cmp	r5, #0
 8013206:	dd2b      	ble.n	8013260 <mktime+0x90>
 8013208:	4638      	mov	r0, r7
 801320a:	f7ff ffd1 	bl	80131b0 <getdaysofmonth>
 801320e:	4285      	cmp	r5, r0
 8013210:	dc26      	bgt.n	8013260 <mktime+0x90>
 8013212:	2318      	movs	r3, #24
 8013214:	3d01      	subs	r5, #1
 8013216:	4435      	add	r5, r6
 8013218:	435d      	muls	r5, r3
 801321a:	68a3      	ldr	r3, [r4, #8]
 801321c:	2b17      	cmp	r3, #23
 801321e:	d81f      	bhi.n	8013260 <mktime+0x90>
 8013220:	203c      	movs	r0, #60	; 0x3c
 8013222:	442b      	add	r3, r5
 8013224:	fb00 f503 	mul.w	r5, r0, r3
 8013228:	6863      	ldr	r3, [r4, #4]
 801322a:	2b3b      	cmp	r3, #59	; 0x3b
 801322c:	d818      	bhi.n	8013260 <mktime+0x90>
 801322e:	442b      	add	r3, r5
 8013230:	4343      	muls	r3, r0
 8013232:	6820      	ldr	r0, [r4, #0]
 8013234:	283b      	cmp	r0, #59	; 0x3b
 8013236:	d813      	bhi.n	8013260 <mktime+0x90>
 8013238:	4418      	add	r0, r3
 801323a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801323e:	4628      	mov	r0, r5
 8013240:	f7ff ffa0 	bl	8013184 <isleapyear>
 8013244:	2800      	cmp	r0, #0
 8013246:	bf14      	ite	ne
 8013248:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 801324c:	4643      	moveq	r3, r8
 801324e:	3501      	adds	r5, #1
 8013250:	441e      	add	r6, r3
 8013252:	e7ce      	b.n	80131f2 <mktime+0x22>
 8013254:	4628      	mov	r0, r5
 8013256:	f7ff ffab 	bl	80131b0 <getdaysofmonth>
 801325a:	3501      	adds	r5, #1
 801325c:	4406      	add	r6, r0
 801325e:	e7ce      	b.n	80131fe <mktime+0x2e>
 8013260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013264:	e7e9      	b.n	801323a <mktime+0x6a>
	...

08013268 <gettimeofday>:
 8013268:	b538      	push	{r3, r4, r5, lr}
 801326a:	4b10      	ldr	r3, [pc, #64]	; (80132ac <gettimeofday+0x44>)
 801326c:	4a10      	ldr	r2, [pc, #64]	; (80132b0 <gettimeofday+0x48>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	6814      	ldr	r4, [r2, #0]
 8013272:	6013      	str	r3, [r2, #0]
 8013274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013278:	429c      	cmp	r4, r3
 801327a:	bf2c      	ite	cs
 801327c:	1ae4      	subcs	r4, r4, r3
 801327e:	1b1c      	subcc	r4, r3, r4
 8013280:	4354      	muls	r4, r2
 8013282:	4b0c      	ldr	r3, [pc, #48]	; (80132b4 <gettimeofday+0x4c>)
 8013284:	4605      	mov	r5, r0
 8013286:	e9d3 2100 	ldrd	r2, r1, [r3]
 801328a:	18a4      	adds	r4, r4, r2
 801328c:	f141 0100 	adc.w	r1, r1, #0
 8013290:	e9c3 4100 	strd	r4, r1, [r3]
 8013294:	4620      	mov	r0, r4
 8013296:	2300      	movs	r3, #0
 8013298:	4a07      	ldr	r2, [pc, #28]	; (80132b8 <gettimeofday+0x50>)
 801329a:	f7f3 ff59 	bl	8007150 <__aeabi_uldivmod>
 801329e:	4b06      	ldr	r3, [pc, #24]	; (80132b8 <gettimeofday+0x50>)
 80132a0:	6028      	str	r0, [r5, #0]
 80132a2:	fb03 4410 	mls	r4, r3, r0, r4
 80132a6:	2000      	movs	r0, #0
 80132a8:	606c      	str	r4, [r5, #4]
 80132aa:	bd38      	pop	{r3, r4, r5, pc}
 80132ac:	2000af0c 	andcs	sl, r0, ip, lsl #30
 80132b0:	2000af08 	andcs	sl, r0, r8, lsl #30
 80132b4:	2000af00 	andcs	sl, r0, r0, lsl #30
 80132b8:	000f4240 	andeq	r4, pc, r0, asr #4

080132bc <settimeofday>:
 80132bc:	4b07      	ldr	r3, [pc, #28]	; (80132dc <settimeofday+0x20>)
 80132be:	b510      	push	{r4, lr}
 80132c0:	681a      	ldr	r2, [r3, #0]
 80132c2:	4b07      	ldr	r3, [pc, #28]	; (80132e0 <settimeofday+0x24>)
 80132c4:	6804      	ldr	r4, [r0, #0]
 80132c6:	601a      	str	r2, [r3, #0]
 80132c8:	6843      	ldr	r3, [r0, #4]
 80132ca:	4806      	ldr	r0, [pc, #24]	; (80132e4 <settimeofday+0x28>)
 80132cc:	17da      	asrs	r2, r3, #31
 80132ce:	fbc4 3200 	smlal	r3, r2, r4, r0
 80132d2:	4905      	ldr	r1, [pc, #20]	; (80132e8 <settimeofday+0x2c>)
 80132d4:	2000      	movs	r0, #0
 80132d6:	e9c1 3200 	strd	r3, r2, [r1]
 80132da:	bd10      	pop	{r4, pc}
 80132dc:	2000af0c 	andcs	sl, r0, ip, lsl #30
 80132e0:	2000af08 	andcs	sl, r0, r8, lsl #30
 80132e4:	000f4240 	andeq	r4, pc, r0, asr #4
 80132e8:	2000af00 	andcs	sl, r0, r0, lsl #30

080132ec <time>:
 80132ec:	b513      	push	{r0, r1, r4, lr}
 80132ee:	4604      	mov	r4, r0
 80132f0:	2100      	movs	r1, #0
 80132f2:	4668      	mov	r0, sp
 80132f4:	f7ff ffb8 	bl	8013268 <gettimeofday>
 80132f8:	9800      	ldr	r0, [sp, #0]
 80132fa:	b104      	cbz	r4, 80132fe <time+0x12>
 80132fc:	6020      	str	r0, [r4, #0]
 80132fe:	b002      	add	sp, #8
 8013300:	bd10      	pop	{r4, pc}
	...

08013304 <uart0_init>:
 8013304:	2301      	movs	r3, #1
 8013306:	b507      	push	{r0, r1, r2, lr}
 8013308:	2208      	movs	r2, #8
 801330a:	9300      	str	r3, [sp, #0]
 801330c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8013310:	2300      	movs	r3, #0
 8013312:	4803      	ldr	r0, [pc, #12]	; (8013320 <uart0_init+0x1c>)
 8013314:	f000 ffe6 	bl	80142e4 <gd32_uart_begin>
 8013318:	b003      	add	sp, #12
 801331a:	f85d fb04 	ldr.w	pc, [sp], #4
 801331e:	bf00      	nop
 8013320:	40013800 	andmi	r3, r1, r0, lsl #16

08013324 <uart0_putc>:
 8013324:	280a      	cmp	r0, #10
 8013326:	b538      	push	{r3, r4, r5, lr}
 8013328:	4604      	mov	r4, r0
 801332a:	d10a      	bne.n	8013342 <uart0_putc+0x1e>
 801332c:	4d0b      	ldr	r5, [pc, #44]	; (801335c <uart0_putc+0x38>)
 801332e:	2107      	movs	r1, #7
 8013330:	4628      	mov	r0, r5
 8013332:	f000 fd41 	bl	8013db8 <usart_flag_get>
 8013336:	2800      	cmp	r0, #0
 8013338:	d0f9      	beq.n	801332e <uart0_putc+0xa>
 801333a:	220d      	movs	r2, #13
 801333c:	4b08      	ldr	r3, [pc, #32]	; (8013360 <uart0_putc+0x3c>)
 801333e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8013342:	4d06      	ldr	r5, [pc, #24]	; (801335c <uart0_putc+0x38>)
 8013344:	2107      	movs	r1, #7
 8013346:	4628      	mov	r0, r5
 8013348:	f000 fd36 	bl	8013db8 <usart_flag_get>
 801334c:	2800      	cmp	r0, #0
 801334e:	d0f9      	beq.n	8013344 <uart0_putc+0x20>
 8013350:	4b03      	ldr	r3, [pc, #12]	; (8013360 <uart0_putc+0x3c>)
 8013352:	b2e4      	uxtb	r4, r4
 8013354:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8013358:	bd38      	pop	{r3, r4, r5, pc}
 801335a:	bf00      	nop
 801335c:	40013800 	andmi	r3, r1, r0, lsl #16
 8013360:	40013000 	andmi	r3, r1, r0

08013364 <uart0_puts>:
 8013364:	b510      	push	{r4, lr}
 8013366:	1e44      	subs	r4, r0, #1
 8013368:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801336c:	b903      	cbnz	r3, 8013370 <uart0_puts+0xc>
 801336e:	bd10      	pop	{r4, pc}
 8013370:	2b0a      	cmp	r3, #10
 8013372:	d102      	bne.n	801337a <uart0_puts+0x16>
 8013374:	200d      	movs	r0, #13
 8013376:	f7ff ffd5 	bl	8013324 <uart0_putc>
 801337a:	7820      	ldrb	r0, [r4, #0]
 801337c:	f7ff ffd2 	bl	8013324 <uart0_putc>
 8013380:	e7f2      	b.n	8013368 <uart0_puts+0x4>
	...

08013384 <systick_config>:
 8013384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013388:	4b0b      	ldr	r3, [pc, #44]	; (80133b8 <systick_config+0x34>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013390:	3b01      	subs	r3, #1
 8013392:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013396:	d20d      	bcs.n	80133b4 <systick_config+0x30>
 8013398:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 801339c:	21f0      	movs	r1, #240	; 0xf0
 801339e:	6153      	str	r3, [r2, #20]
 80133a0:	4b06      	ldr	r3, [pc, #24]	; (80133bc <systick_config+0x38>)
 80133a2:	2007      	movs	r0, #7
 80133a4:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80133a8:	2100      	movs	r1, #0
 80133aa:	6191      	str	r1, [r2, #24]
 80133ac:	6110      	str	r0, [r2, #16]
 80133ae:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80133b2:	4770      	bx	lr
 80133b4:	e7fe      	b.n	80133b4 <systick_config+0x30>
 80133b6:	bf00      	nop
 80133b8:	200000f4 	strdcs	r0, [r0], -r4
 80133bc:	e000ed00 	and	lr, r0, r0, lsl #26

080133c0 <SysTick_Handler>:
 80133c0:	4a02      	ldr	r2, [pc, #8]	; (80133cc <SysTick_Handler+0xc>)
 80133c2:	6813      	ldr	r3, [r2, #0]
 80133c4:	3301      	adds	r3, #1
 80133c6:	6013      	str	r3, [r2, #0]
 80133c8:	4770      	bx	lr
 80133ca:	bf00      	nop
 80133cc:	2000af0c 	andcs	sl, r0, ip, lsl #30

080133d0 <SystemInit>:
 80133d0:	4b37      	ldr	r3, [pc, #220]	; (80134b0 <SystemInit+0xe0>)
 80133d2:	4838      	ldr	r0, [pc, #224]	; (80134b4 <SystemInit+0xe4>)
 80133d4:	681a      	ldr	r2, [r3, #0]
 80133d6:	f042 0201 	orr.w	r2, r2, #1
 80133da:	601a      	str	r2, [r3, #0]
 80133dc:	685a      	ldr	r2, [r3, #4]
 80133de:	f022 0203 	bic.w	r2, r2, #3
 80133e2:	605a      	str	r2, [r3, #4]
 80133e4:	6819      	ldr	r1, [r3, #0]
 80133e6:	4001      	ands	r1, r0
 80133e8:	6019      	str	r1, [r3, #0]
 80133ea:	685a      	ldr	r2, [r3, #4]
 80133ec:	4932      	ldr	r1, [pc, #200]	; (80134b8 <SystemInit+0xe8>)
 80133ee:	4011      	ands	r1, r2
 80133f0:	6059      	str	r1, [r3, #4]
 80133f2:	681a      	ldr	r2, [r3, #0]
 80133f4:	4002      	ands	r2, r0
 80133f6:	601a      	str	r2, [r3, #0]
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80133fe:	601a      	str	r2, [r3, #0]
 8013400:	685a      	ldr	r2, [r3, #4]
 8013402:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 8013406:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 801340a:	605a      	str	r2, [r3, #4]
 801340c:	2200      	movs	r2, #0
 801340e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8013416:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 801341a:	601a      	str	r2, [r3, #0]
 801341c:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8013420:	609a      	str	r2, [r3, #8]
 8013422:	681a      	ldr	r2, [r3, #0]
 8013424:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8013428:	601a      	str	r2, [r3, #0]
 801342a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801342e:	6819      	ldr	r1, [r3, #0]
 8013430:	0389      	lsls	r1, r1, #14
 8013432:	d401      	bmi.n	8013438 <SystemInit+0x68>
 8013434:	3a01      	subs	r2, #1
 8013436:	d1fa      	bne.n	801342e <SystemInit+0x5e>
 8013438:	681a      	ldr	r2, [r3, #0]
 801343a:	0392      	lsls	r2, r2, #14
 801343c:	d400      	bmi.n	8013440 <SystemInit+0x70>
 801343e:	e7fe      	b.n	801343e <SystemInit+0x6e>
 8013440:	685a      	ldr	r2, [r3, #4]
 8013442:	605a      	str	r2, [r3, #4]
 8013444:	685a      	ldr	r2, [r3, #4]
 8013446:	605a      	str	r2, [r3, #4]
 8013448:	685a      	ldr	r2, [r3, #4]
 801344a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801344e:	605a      	str	r2, [r3, #4]
 8013450:	685a      	ldr	r2, [r3, #4]
 8013452:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8013456:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 801345a:	605a      	str	r2, [r3, #4]
 801345c:	685a      	ldr	r2, [r3, #4]
 801345e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8013462:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 8013466:	605a      	str	r2, [r3, #4]
 8013468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801346a:	4a14      	ldr	r2, [pc, #80]	; (80134bc <SystemInit+0xec>)
 801346c:	400a      	ands	r2, r1
 801346e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013472:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 8013476:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 801347a:	62da      	str	r2, [r3, #44]	; 0x2c
 801347c:	681a      	ldr	r2, [r3, #0]
 801347e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013482:	601a      	str	r2, [r3, #0]
 8013484:	681a      	ldr	r2, [r3, #0]
 8013486:	0110      	lsls	r0, r2, #4
 8013488:	d5fc      	bpl.n	8013484 <SystemInit+0xb4>
 801348a:	681a      	ldr	r2, [r3, #0]
 801348c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8013490:	601a      	str	r2, [r3, #0]
 8013492:	681a      	ldr	r2, [r3, #0]
 8013494:	0191      	lsls	r1, r2, #6
 8013496:	d5fc      	bpl.n	8013492 <SystemInit+0xc2>
 8013498:	685a      	ldr	r2, [r3, #4]
 801349a:	f022 0203 	bic.w	r2, r2, #3
 801349e:	605a      	str	r2, [r3, #4]
 80134a0:	685a      	ldr	r2, [r3, #4]
 80134a2:	f042 0202 	orr.w	r2, r2, #2
 80134a6:	605a      	str	r2, [r3, #4]
 80134a8:	685a      	ldr	r2, [r3, #4]
 80134aa:	0712      	lsls	r2, r2, #28
 80134ac:	d5fc      	bpl.n	80134a8 <SystemInit+0xd8>
 80134ae:	4770      	bx	lr
 80134b0:	40021000 	andmi	r1, r2, r0
 80134b4:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 80134b8:	e0ff000c 	rscs	r0, pc, ip
 80134bc:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

080134c0 <dma_deinit>:
 80134c0:	4b0c      	ldr	r3, [pc, #48]	; (80134f4 <dma_deinit+0x34>)
 80134c2:	4298      	cmp	r0, r3
 80134c4:	d102      	bne.n	80134cc <dma_deinit+0xc>
 80134c6:	2904      	cmp	r1, #4
 80134c8:	d900      	bls.n	80134cc <dma_deinit+0xc>
 80134ca:	e7fe      	b.n	80134ca <dma_deinit+0xa>
 80134cc:	2314      	movs	r3, #20
 80134ce:	fb03 0301 	mla	r3, r3, r1, r0
 80134d2:	689a      	ldr	r2, [r3, #8]
 80134d4:	0089      	lsls	r1, r1, #2
 80134d6:	f022 0201 	bic.w	r2, r2, #1
 80134da:	609a      	str	r2, [r3, #8]
 80134dc:	2200      	movs	r2, #0
 80134de:	609a      	str	r2, [r3, #8]
 80134e0:	60da      	str	r2, [r3, #12]
 80134e2:	611a      	str	r2, [r3, #16]
 80134e4:	615a      	str	r2, [r3, #20]
 80134e6:	230f      	movs	r3, #15
 80134e8:	6842      	ldr	r2, [r0, #4]
 80134ea:	fa03 f101 	lsl.w	r1, r3, r1
 80134ee:	4311      	orrs	r1, r2
 80134f0:	6041      	str	r1, [r0, #4]
 80134f2:	4770      	bx	lr
 80134f4:	40020400 	andmi	r0, r2, r0, lsl #8

080134f8 <dma_init>:
 80134f8:	4b1b      	ldr	r3, [pc, #108]	; (8013568 <dma_init+0x70>)
 80134fa:	b510      	push	{r4, lr}
 80134fc:	4298      	cmp	r0, r3
 80134fe:	d102      	bne.n	8013506 <dma_init+0xe>
 8013500:	2904      	cmp	r1, #4
 8013502:	d900      	bls.n	8013506 <dma_init+0xe>
 8013504:	e7fe      	b.n	8013504 <dma_init+0xc>
 8013506:	2314      	movs	r3, #20
 8013508:	fb03 0101 	mla	r1, r3, r1, r0
 801350c:	6813      	ldr	r3, [r2, #0]
 801350e:	610b      	str	r3, [r1, #16]
 8013510:	6893      	ldr	r3, [r2, #8]
 8013512:	614b      	str	r3, [r1, #20]
 8013514:	8a13      	ldrh	r3, [r2, #16]
 8013516:	60cb      	str	r3, [r1, #12]
 8013518:	68d4      	ldr	r4, [r2, #12]
 801351a:	6853      	ldr	r3, [r2, #4]
 801351c:	6888      	ldr	r0, [r1, #8]
 801351e:	4323      	orrs	r3, r4
 8013520:	6954      	ldr	r4, [r2, #20]
 8013522:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8013526:	4323      	orrs	r3, r4
 8013528:	4303      	orrs	r3, r0
 801352a:	608b      	str	r3, [r1, #8]
 801352c:	7e13      	ldrb	r3, [r2, #24]
 801352e:	2b01      	cmp	r3, #1
 8013530:	688b      	ldr	r3, [r1, #8]
 8013532:	bf0c      	ite	eq
 8013534:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8013538:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 801353c:	608b      	str	r3, [r1, #8]
 801353e:	7e53      	ldrb	r3, [r2, #25]
 8013540:	2b01      	cmp	r3, #1
 8013542:	688b      	ldr	r3, [r1, #8]
 8013544:	bf0c      	ite	eq
 8013546:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 801354a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 801354e:	608b      	str	r3, [r1, #8]
 8013550:	7e93      	ldrb	r3, [r2, #26]
 8013552:	b923      	cbnz	r3, 801355e <dma_init+0x66>
 8013554:	688b      	ldr	r3, [r1, #8]
 8013556:	f023 0310 	bic.w	r3, r3, #16
 801355a:	608b      	str	r3, [r1, #8]
 801355c:	bd10      	pop	{r4, pc}
 801355e:	688b      	ldr	r3, [r1, #8]
 8013560:	f043 0310 	orr.w	r3, r3, #16
 8013564:	e7f9      	b.n	801355a <dma_init+0x62>
 8013566:	bf00      	nop
 8013568:	40020400 	andmi	r0, r2, r0, lsl #8

0801356c <dma_circulation_disable>:
 801356c:	4b06      	ldr	r3, [pc, #24]	; (8013588 <dma_circulation_disable+0x1c>)
 801356e:	4298      	cmp	r0, r3
 8013570:	d102      	bne.n	8013578 <dma_circulation_disable+0xc>
 8013572:	2904      	cmp	r1, #4
 8013574:	d900      	bls.n	8013578 <dma_circulation_disable+0xc>
 8013576:	e7fe      	b.n	8013576 <dma_circulation_disable+0xa>
 8013578:	2314      	movs	r3, #20
 801357a:	4359      	muls	r1, r3
 801357c:	3008      	adds	r0, #8
 801357e:	580b      	ldr	r3, [r1, r0]
 8013580:	f023 0320 	bic.w	r3, r3, #32
 8013584:	500b      	str	r3, [r1, r0]
 8013586:	4770      	bx	lr
 8013588:	40020400 	andmi	r0, r2, r0, lsl #8

0801358c <dma_memory_to_memory_disable>:
 801358c:	4b06      	ldr	r3, [pc, #24]	; (80135a8 <dma_memory_to_memory_disable+0x1c>)
 801358e:	4298      	cmp	r0, r3
 8013590:	d102      	bne.n	8013598 <dma_memory_to_memory_disable+0xc>
 8013592:	2904      	cmp	r1, #4
 8013594:	d900      	bls.n	8013598 <dma_memory_to_memory_disable+0xc>
 8013596:	e7fe      	b.n	8013596 <dma_memory_to_memory_disable+0xa>
 8013598:	2314      	movs	r3, #20
 801359a:	4359      	muls	r1, r3
 801359c:	3008      	adds	r0, #8
 801359e:	580b      	ldr	r3, [r1, r0]
 80135a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80135a4:	500b      	str	r3, [r1, r0]
 80135a6:	4770      	bx	lr
 80135a8:	40020400 	andmi	r0, r2, r0, lsl #8

080135ac <fmc_bank0_unlock>:
 80135ac:	4b04      	ldr	r3, [pc, #16]	; (80135c0 <fmc_bank0_unlock+0x14>)
 80135ae:	691a      	ldr	r2, [r3, #16]
 80135b0:	0612      	lsls	r2, r2, #24
 80135b2:	bf41      	itttt	mi
 80135b4:	4a03      	ldrmi	r2, [pc, #12]	; (80135c4 <fmc_bank0_unlock+0x18>)
 80135b6:	605a      	strmi	r2, [r3, #4]
 80135b8:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80135bc:	605a      	strmi	r2, [r3, #4]
 80135be:	4770      	bx	lr
 80135c0:	40022000 	andmi	r2, r2, r0
 80135c4:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080135c8 <fmc_bank1_unlock>:
 80135c8:	4b04      	ldr	r3, [pc, #16]	; (80135dc <fmc_bank1_unlock+0x14>)
 80135ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135cc:	0612      	lsls	r2, r2, #24
 80135ce:	bf41      	itttt	mi
 80135d0:	4a03      	ldrmi	r2, [pc, #12]	; (80135e0 <fmc_bank1_unlock+0x18>)
 80135d2:	645a      	strmi	r2, [r3, #68]	; 0x44
 80135d4:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80135d8:	645a      	strmi	r2, [r3, #68]	; 0x44
 80135da:	4770      	bx	lr
 80135dc:	40022000 	andmi	r2, r2, r0
 80135e0:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

080135e4 <fmc_bank0_lock>:
 80135e4:	4a02      	ldr	r2, [pc, #8]	; (80135f0 <fmc_bank0_lock+0xc>)
 80135e6:	6913      	ldr	r3, [r2, #16]
 80135e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135ec:	6113      	str	r3, [r2, #16]
 80135ee:	4770      	bx	lr
 80135f0:	40022000 	andmi	r2, r2, r0

080135f4 <fmc_bank1_lock>:
 80135f4:	4a02      	ldr	r2, [pc, #8]	; (8013600 <fmc_bank1_lock+0xc>)
 80135f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80135f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135fc:	6513      	str	r3, [r2, #80]	; 0x50
 80135fe:	4770      	bx	lr
 8013600:	40022000 	andmi	r2, r2, r0

08013604 <fmc_bank0_state_get>:
 8013604:	4b08      	ldr	r3, [pc, #32]	; (8013628 <fmc_bank0_state_get+0x24>)
 8013606:	68da      	ldr	r2, [r3, #12]
 8013608:	07d1      	lsls	r1, r2, #31
 801360a:	d409      	bmi.n	8013620 <fmc_bank0_state_get+0x1c>
 801360c:	68da      	ldr	r2, [r3, #12]
 801360e:	06d2      	lsls	r2, r2, #27
 8013610:	d408      	bmi.n	8013624 <fmc_bank0_state_get+0x20>
 8013612:	68db      	ldr	r3, [r3, #12]
 8013614:	f013 0f04 	tst.w	r3, #4
 8013618:	bf0c      	ite	eq
 801361a:	2000      	moveq	r0, #0
 801361c:	2002      	movne	r0, #2
 801361e:	4770      	bx	lr
 8013620:	2001      	movs	r0, #1
 8013622:	4770      	bx	lr
 8013624:	2003      	movs	r0, #3
 8013626:	4770      	bx	lr
 8013628:	40022000 	andmi	r2, r2, r0

0801362c <fmc_bank1_state_get>:
 801362c:	4b08      	ldr	r3, [pc, #32]	; (8013650 <fmc_bank1_state_get+0x24>)
 801362e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013630:	07d1      	lsls	r1, r2, #31
 8013632:	d409      	bmi.n	8013648 <fmc_bank1_state_get+0x1c>
 8013634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013636:	06d2      	lsls	r2, r2, #27
 8013638:	d408      	bmi.n	801364c <fmc_bank1_state_get+0x20>
 801363a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801363c:	f013 0f04 	tst.w	r3, #4
 8013640:	bf0c      	ite	eq
 8013642:	2000      	moveq	r0, #0
 8013644:	2002      	movne	r0, #2
 8013646:	4770      	bx	lr
 8013648:	2001      	movs	r0, #1
 801364a:	4770      	bx	lr
 801364c:	2003      	movs	r0, #3
 801364e:	4770      	bx	lr
 8013650:	40022000 	andmi	r2, r2, r0

08013654 <fwdgt_enable>:
 8013654:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8013658:	4b01      	ldr	r3, [pc, #4]	; (8013660 <fwdgt_enable+0xc>)
 801365a:	601a      	str	r2, [r3, #0]
 801365c:	4770      	bx	lr
 801365e:	bf00      	nop
 8013660:	40003000 	andmi	r3, r0, r0

08013664 <fwdgt_counter_reload>:
 8013664:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8013668:	4b01      	ldr	r3, [pc, #4]	; (8013670 <fwdgt_counter_reload+0xc>)
 801366a:	601a      	str	r2, [r3, #0]
 801366c:	4770      	bx	lr
 801366e:	bf00      	nop
 8013670:	40003000 	andmi	r3, r0, r0

08013674 <fwdgt_config>:
 8013674:	f245 5355 	movw	r3, #21845	; 0x5555
 8013678:	4a11      	ldr	r2, [pc, #68]	; (80136c0 <fwdgt_config+0x4c>)
 801367a:	b510      	push	{r4, lr}
 801367c:	4c11      	ldr	r4, [pc, #68]	; (80136c4 <fwdgt_config+0x50>)
 801367e:	6013      	str	r3, [r2, #0]
 8013680:	68d3      	ldr	r3, [r2, #12]
 8013682:	3c01      	subs	r4, #1
 8013684:	f003 0301 	and.w	r3, r3, #1
 8013688:	d013      	beq.n	80136b2 <fwdgt_config+0x3e>
 801368a:	2b00      	cmp	r3, #0
 801368c:	d1f8      	bne.n	8013680 <fwdgt_config+0xc>
 801368e:	6051      	str	r1, [r2, #4]
 8013690:	490c      	ldr	r1, [pc, #48]	; (80136c4 <fwdgt_config+0x50>)
 8013692:	4a0b      	ldr	r2, [pc, #44]	; (80136c0 <fwdgt_config+0x4c>)
 8013694:	68d3      	ldr	r3, [r2, #12]
 8013696:	3901      	subs	r1, #1
 8013698:	f003 0302 	and.w	r3, r3, #2
 801369c:	d00d      	beq.n	80136ba <fwdgt_config+0x46>
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d1f8      	bne.n	8013694 <fwdgt_config+0x20>
 80136a2:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80136a6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80136aa:	6090      	str	r0, [r2, #8]
 80136ac:	2001      	movs	r0, #1
 80136ae:	6013      	str	r3, [r2, #0]
 80136b0:	e002      	b.n	80136b8 <fwdgt_config+0x44>
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d0eb      	beq.n	801368e <fwdgt_config+0x1a>
 80136b6:	2000      	movs	r0, #0
 80136b8:	bd10      	pop	{r4, pc}
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d1fb      	bne.n	80136b6 <fwdgt_config+0x42>
 80136be:	e7f0      	b.n	80136a2 <fwdgt_config+0x2e>
 80136c0:	40003000 	andmi	r3, r0, r0
 80136c4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080136c8 <gpio_init>:
 80136c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136cc:	f04f 0c0f 	mov.w	ip, #15
 80136d0:	06cf      	lsls	r7, r1, #27
 80136d2:	f04f 0400 	mov.w	r4, #0
 80136d6:	f04f 0701 	mov.w	r7, #1
 80136da:	f001 050f 	and.w	r5, r1, #15
 80136de:	bf48      	it	mi
 80136e0:	4315      	orrmi	r5, r2
 80136e2:	fa23 f204 	lsr.w	r2, r3, r4
 80136e6:	07d6      	lsls	r6, r2, #31
 80136e8:	d510      	bpl.n	801370c <gpio_init+0x44>
 80136ea:	00a2      	lsls	r2, r4, #2
 80136ec:	6806      	ldr	r6, [r0, #0]
 80136ee:	fa0c fe02 	lsl.w	lr, ip, r2
 80136f2:	ea26 060e 	bic.w	r6, r6, lr
 80136f6:	fa05 f202 	lsl.w	r2, r5, r2
 80136fa:	2928      	cmp	r1, #40	; 0x28
 80136fc:	ea42 0206 	orr.w	r2, r2, r6
 8013700:	d128      	bne.n	8013754 <gpio_init+0x8c>
 8013702:	fa07 f604 	lsl.w	r6, r7, r4
 8013706:	401e      	ands	r6, r3
 8013708:	6146      	str	r6, [r0, #20]
 801370a:	6002      	str	r2, [r0, #0]
 801370c:	3401      	adds	r4, #1
 801370e:	2c08      	cmp	r4, #8
 8013710:	d1e7      	bne.n	80136e2 <gpio_init+0x1a>
 8013712:	2600      	movs	r6, #0
 8013714:	f04f 0c0f 	mov.w	ip, #15
 8013718:	2701      	movs	r7, #1
 801371a:	f106 0208 	add.w	r2, r6, #8
 801371e:	fa23 f402 	lsr.w	r4, r3, r2
 8013722:	07e4      	lsls	r4, r4, #31
 8013724:	d511      	bpl.n	801374a <gpio_init+0x82>
 8013726:	00b4      	lsls	r4, r6, #2
 8013728:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801372c:	fa0c f804 	lsl.w	r8, ip, r4
 8013730:	ea2e 0e08 	bic.w	lr, lr, r8
 8013734:	fa05 f404 	lsl.w	r4, r5, r4
 8013738:	2928      	cmp	r1, #40	; 0x28
 801373a:	ea44 040e 	orr.w	r4, r4, lr
 801373e:	d110      	bne.n	8013762 <gpio_init+0x9a>
 8013740:	fa07 f202 	lsl.w	r2, r7, r2
 8013744:	401a      	ands	r2, r3
 8013746:	6142      	str	r2, [r0, #20]
 8013748:	6044      	str	r4, [r0, #4]
 801374a:	3601      	adds	r6, #1
 801374c:	2e08      	cmp	r6, #8
 801374e:	d1e4      	bne.n	801371a <gpio_init+0x52>
 8013750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013754:	2948      	cmp	r1, #72	; 0x48
 8013756:	bf02      	ittt	eq
 8013758:	fa07 f604 	lsleq.w	r6, r7, r4
 801375c:	401e      	andeq	r6, r3
 801375e:	6106      	streq	r6, [r0, #16]
 8013760:	e7d3      	b.n	801370a <gpio_init+0x42>
 8013762:	2948      	cmp	r1, #72	; 0x48
 8013764:	bf02      	ittt	eq
 8013766:	fa07 f202 	lsleq.w	r2, r7, r2
 801376a:	401a      	andeq	r2, r3
 801376c:	6102      	streq	r2, [r0, #16]
 801376e:	e7eb      	b.n	8013748 <gpio_init+0x80>

08013770 <gpio_pin_remap_config>:
 8013770:	2800      	cmp	r0, #0
 8013772:	4a16      	ldr	r2, [pc, #88]	; (80137cc <gpio_pin_remap_config+0x5c>)
 8013774:	b530      	push	{r4, r5, lr}
 8013776:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 801377a:	bfb4      	ite	lt
 801377c:	69d3      	ldrlt	r3, [r2, #28]
 801377e:	6853      	ldrge	r3, [r2, #4]
 8013780:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8013784:	b284      	uxth	r4, r0
 8013786:	d110      	bne.n	80137aa <gpio_pin_remap_config+0x3a>
 8013788:	6855      	ldr	r5, [r2, #4]
 801378a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 801378e:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8013792:	6055      	str	r5, [r2, #4]
 8013794:	b119      	cbz	r1, 801379e <gpio_pin_remap_config+0x2e>
 8013796:	0d42      	lsrs	r2, r0, #21
 8013798:	0112      	lsls	r2, r2, #4
 801379a:	4094      	lsls	r4, r2
 801379c:	4323      	orrs	r3, r4
 801379e:	4a0b      	ldr	r2, [pc, #44]	; (80137cc <gpio_pin_remap_config+0x5c>)
 80137a0:	2800      	cmp	r0, #0
 80137a2:	bfb4      	ite	lt
 80137a4:	61d3      	strlt	r3, [r2, #28]
 80137a6:	6053      	strge	r3, [r2, #4]
 80137a8:	bd30      	pop	{r4, r5, pc}
 80137aa:	02c2      	lsls	r2, r0, #11
 80137ac:	bf4d      	iteet	mi
 80137ae:	2203      	movmi	r2, #3
 80137b0:	0d42      	lsrpl	r2, r0, #21
 80137b2:	0112      	lslpl	r2, r2, #4
 80137b4:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 80137b8:	bf4c      	ite	mi
 80137ba:	40aa      	lslmi	r2, r5
 80137bc:	fa04 f202 	lslpl.w	r2, r4, r2
 80137c0:	ea23 0302 	bic.w	r3, r3, r2
 80137c4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80137c8:	e7e4      	b.n	8013794 <gpio_pin_remap_config+0x24>
 80137ca:	bf00      	nop
 80137cc:	40010000 	andmi	r0, r1, r0

080137d0 <gpio_ethernet_phy_select>:
 80137d0:	4b04      	ldr	r3, [pc, #16]	; (80137e4 <gpio_ethernet_phy_select+0x14>)
 80137d2:	6859      	ldr	r1, [r3, #4]
 80137d4:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80137d8:	6059      	str	r1, [r3, #4]
 80137da:	685a      	ldr	r2, [r3, #4]
 80137dc:	4302      	orrs	r2, r0
 80137de:	605a      	str	r2, [r3, #4]
 80137e0:	4770      	bx	lr
 80137e2:	bf00      	nop
 80137e4:	40010000 	andmi	r0, r1, r0

080137e8 <rcu_periph_clock_enable>:
 80137e8:	2201      	movs	r2, #1
 80137ea:	0983      	lsrs	r3, r0, #6
 80137ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80137f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80137f4:	6819      	ldr	r1, [r3, #0]
 80137f6:	f000 001f 	and.w	r0, r0, #31
 80137fa:	fa02 f000 	lsl.w	r0, r2, r0
 80137fe:	4308      	orrs	r0, r1
 8013800:	6018      	str	r0, [r3, #0]
 8013802:	4770      	bx	lr

08013804 <rcu_periph_clock_disable>:
 8013804:	2101      	movs	r1, #1
 8013806:	0983      	lsrs	r3, r0, #6
 8013808:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801380c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8013810:	681a      	ldr	r2, [r3, #0]
 8013812:	f000 001f 	and.w	r0, r0, #31
 8013816:	fa01 f000 	lsl.w	r0, r1, r0
 801381a:	ea22 0000 	bic.w	r0, r2, r0
 801381e:	6018      	str	r0, [r3, #0]
 8013820:	4770      	bx	lr

08013822 <rcu_periph_reset_enable>:
 8013822:	f7ff bfe1 	b.w	80137e8 <rcu_periph_clock_enable>

08013826 <rcu_periph_reset_disable>:
 8013826:	f7ff bfed 	b.w	8013804 <rcu_periph_clock_disable>
	...

0801382c <rcu_ckout0_config>:
 801382c:	4a03      	ldr	r2, [pc, #12]	; (801383c <rcu_ckout0_config+0x10>)
 801382e:	6853      	ldr	r3, [r2, #4]
 8013830:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8013834:	4303      	orrs	r3, r0
 8013836:	6053      	str	r3, [r2, #4]
 8013838:	4770      	bx	lr
 801383a:	bf00      	nop
 801383c:	40021000 	andmi	r1, r2, r0

08013840 <rcu_pll2_config>:
 8013840:	4b04      	ldr	r3, [pc, #16]	; (8013854 <rcu_pll2_config+0x14>)
 8013842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8013844:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8013848:	62d9      	str	r1, [r3, #44]	; 0x2c
 801384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801384c:	4302      	orrs	r2, r0
 801384e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013850:	4770      	bx	lr
 8013852:	bf00      	nop
 8013854:	40021000 	andmi	r1, r2, r0

08013858 <rcu_adc_clock_config>:
 8013858:	490c      	ldr	r1, [pc, #48]	; (801388c <rcu_adc_clock_config+0x34>)
 801385a:	2805      	cmp	r0, #5
 801385c:	684b      	ldr	r3, [r1, #4]
 801385e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013862:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8013866:	d006      	beq.n	8013876 <rcu_adc_clock_config+0x1e>
 8013868:	d803      	bhi.n	8013872 <rcu_adc_clock_config+0x1a>
 801386a:	2804      	cmp	r0, #4
 801386c:	d10a      	bne.n	8013884 <rcu_adc_clock_config+0x2c>
 801386e:	604b      	str	r3, [r1, #4]
 8013870:	4770      	bx	lr
 8013872:	2807      	cmp	r0, #7
 8013874:	d1fb      	bne.n	801386e <rcu_adc_clock_config+0x16>
 8013876:	4a06      	ldr	r2, [pc, #24]	; (8013890 <rcu_adc_clock_config+0x38>)
 8013878:	ea02 3080 	and.w	r0, r2, r0, lsl #14
 801387c:	4303      	orrs	r3, r0
 801387e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013882:	e7f4      	b.n	801386e <rcu_adc_clock_config+0x16>
 8013884:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8013888:	e7f1      	b.n	801386e <rcu_adc_clock_config+0x16>
 801388a:	bf00      	nop
 801388c:	40021000 	andmi	r1, r2, r0
 8013890:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08013894 <rcu_flag_get>:
 8013894:	0983      	lsrs	r3, r0, #6
 8013896:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801389a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	f000 001f 	and.w	r0, r0, #31
 80138a4:	fa23 f000 	lsr.w	r0, r3, r0
 80138a8:	f000 0001 	and.w	r0, r0, #1
 80138ac:	4770      	bx	lr
	...

080138b0 <rcu_osci_stab_wait>:
 80138b0:	281a      	cmp	r0, #26
 80138b2:	b508      	push	{r3, lr}
 80138b4:	d051      	beq.n	801395a <rcu_osci_stab_wait+0xaa>
 80138b6:	d806      	bhi.n	80138c6 <rcu_osci_stab_wait+0x16>
 80138b8:	2810      	cmp	r0, #16
 80138ba:	d015      	beq.n	80138e8 <rcu_osci_stab_wait+0x38>
 80138bc:	2818      	cmp	r0, #24
 80138be:	d043      	beq.n	8013948 <rcu_osci_stab_wait+0x98>
 80138c0:	b368      	cbz	r0, 801391e <rcu_osci_stab_wait+0x6e>
 80138c2:	2000      	movs	r0, #0
 80138c4:	bd08      	pop	{r3, pc}
 80138c6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80138ca:	d01c      	beq.n	8013906 <rcu_osci_stab_wait+0x56>
 80138cc:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 80138d0:	d02f      	beq.n	8013932 <rcu_osci_stab_wait+0x82>
 80138d2:	281c      	cmp	r0, #28
 80138d4:	d1f5      	bne.n	80138c2 <rcu_osci_stab_wait+0x12>
 80138d6:	4a25      	ldr	r2, [pc, #148]	; (801396c <rcu_osci_stab_wait+0xbc>)
 80138d8:	201d      	movs	r0, #29
 80138da:	f7ff ffdb 	bl	8013894 <rcu_flag_get>
 80138de:	b908      	cbnz	r0, 80138e4 <rcu_osci_stab_wait+0x34>
 80138e0:	3a01      	subs	r2, #1
 80138e2:	d1f9      	bne.n	80138d8 <rcu_osci_stab_wait+0x28>
 80138e4:	201d      	movs	r0, #29
 80138e6:	e008      	b.n	80138fa <rcu_osci_stab_wait+0x4a>
 80138e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138ec:	2011      	movs	r0, #17
 80138ee:	f7ff ffd1 	bl	8013894 <rcu_flag_get>
 80138f2:	b908      	cbnz	r0, 80138f8 <rcu_osci_stab_wait+0x48>
 80138f4:	3a01      	subs	r2, #1
 80138f6:	d1f9      	bne.n	80138ec <rcu_osci_stab_wait+0x3c>
 80138f8:	2011      	movs	r0, #17
 80138fa:	f7ff ffcb 	bl	8013894 <rcu_flag_get>
 80138fe:	3800      	subs	r0, #0
 8013900:	bf18      	it	ne
 8013902:	2001      	movne	r0, #1
 8013904:	e7de      	b.n	80138c4 <rcu_osci_stab_wait+0x14>
 8013906:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 801390a:	f640 0001 	movw	r0, #2049	; 0x801
 801390e:	f7ff ffc1 	bl	8013894 <rcu_flag_get>
 8013912:	b908      	cbnz	r0, 8013918 <rcu_osci_stab_wait+0x68>
 8013914:	3a01      	subs	r2, #1
 8013916:	d1f8      	bne.n	801390a <rcu_osci_stab_wait+0x5a>
 8013918:	f640 0001 	movw	r0, #2049	; 0x801
 801391c:	e7ed      	b.n	80138fa <rcu_osci_stab_wait+0x4a>
 801391e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8013922:	2001      	movs	r0, #1
 8013924:	f7ff ffb6 	bl	8013894 <rcu_flag_get>
 8013928:	b908      	cbnz	r0, 801392e <rcu_osci_stab_wait+0x7e>
 801392a:	3a01      	subs	r2, #1
 801392c:	d1f9      	bne.n	8013922 <rcu_osci_stab_wait+0x72>
 801392e:	2001      	movs	r0, #1
 8013930:	e7e3      	b.n	80138fa <rcu_osci_stab_wait+0x4a>
 8013932:	4a0e      	ldr	r2, [pc, #56]	; (801396c <rcu_osci_stab_wait+0xbc>)
 8013934:	f640 1001 	movw	r0, #2305	; 0x901
 8013938:	f7ff ffac 	bl	8013894 <rcu_flag_get>
 801393c:	b908      	cbnz	r0, 8013942 <rcu_osci_stab_wait+0x92>
 801393e:	3a01      	subs	r2, #1
 8013940:	d1f8      	bne.n	8013934 <rcu_osci_stab_wait+0x84>
 8013942:	f640 1001 	movw	r0, #2305	; 0x901
 8013946:	e7d8      	b.n	80138fa <rcu_osci_stab_wait+0x4a>
 8013948:	4a08      	ldr	r2, [pc, #32]	; (801396c <rcu_osci_stab_wait+0xbc>)
 801394a:	2019      	movs	r0, #25
 801394c:	f7ff ffa2 	bl	8013894 <rcu_flag_get>
 8013950:	b908      	cbnz	r0, 8013956 <rcu_osci_stab_wait+0xa6>
 8013952:	3a01      	subs	r2, #1
 8013954:	d1f9      	bne.n	801394a <rcu_osci_stab_wait+0x9a>
 8013956:	2019      	movs	r0, #25
 8013958:	e7cf      	b.n	80138fa <rcu_osci_stab_wait+0x4a>
 801395a:	4a04      	ldr	r2, [pc, #16]	; (801396c <rcu_osci_stab_wait+0xbc>)
 801395c:	201b      	movs	r0, #27
 801395e:	f7ff ff99 	bl	8013894 <rcu_flag_get>
 8013962:	b908      	cbnz	r0, 8013968 <rcu_osci_stab_wait+0xb8>
 8013964:	3a01      	subs	r2, #1
 8013966:	d1f9      	bne.n	801395c <rcu_osci_stab_wait+0xac>
 8013968:	201b      	movs	r0, #27
 801396a:	e7c6      	b.n	80138fa <rcu_osci_stab_wait+0x4a>
 801396c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08013970 <rcu_osci_on>:
 8013970:	f7ff bf3a 	b.w	80137e8 <rcu_periph_clock_enable>

08013974 <rcu_clock_freq_get>:
 8013974:	4b3d      	ldr	r3, [pc, #244]	; (8013a6c <rcu_clock_freq_get+0xf8>)
 8013976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013978:	4604      	mov	r4, r0
 801397a:	461f      	mov	r7, r3
 801397c:	b089      	sub	sp, #36	; 0x24
 801397e:	ad04      	add	r5, sp, #16
 8013980:	f103 0610 	add.w	r6, r3, #16
 8013984:	462a      	mov	r2, r5
 8013986:	6818      	ldr	r0, [r3, #0]
 8013988:	6859      	ldr	r1, [r3, #4]
 801398a:	3308      	adds	r3, #8
 801398c:	c203      	stmia	r2!, {r0, r1}
 801398e:	42b3      	cmp	r3, r6
 8013990:	4615      	mov	r5, r2
 8013992:	d1f7      	bne.n	8013984 <rcu_clock_freq_get+0x10>
 8013994:	466b      	mov	r3, sp
 8013996:	6938      	ldr	r0, [r7, #16]
 8013998:	6871      	ldr	r1, [r6, #4]
 801399a:	4a35      	ldr	r2, [pc, #212]	; (8013a70 <rcu_clock_freq_get+0xfc>)
 801399c:	c303      	stmia	r3!, {r0, r1}
 801399e:	c303      	stmia	r3!, {r0, r1}
 80139a0:	6853      	ldr	r3, [r2, #4]
 80139a2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80139a6:	2b01      	cmp	r3, #1
 80139a8:	d053      	beq.n	8013a52 <rcu_clock_freq_get+0xde>
 80139aa:	2b02      	cmp	r3, #2
 80139ac:	d153      	bne.n	8013a56 <rcu_clock_freq_get+0xe2>
 80139ae:	6853      	ldr	r3, [r2, #4]
 80139b0:	03dd      	lsls	r5, r3, #15
 80139b2:	d523      	bpl.n	80139fc <rcu_clock_freq_get+0x88>
 80139b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80139b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80139ba:	4b2e      	ldr	r3, [pc, #184]	; (8013a74 <rcu_clock_freq_get+0x100>)
 80139bc:	d00e      	beq.n	80139dc <rcu_clock_freq_get+0x68>
 80139be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80139c0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80139c2:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80139c6:	f3c0 2003 	ubfx	r0, r0, #8, #4
 80139ca:	3101      	adds	r1, #1
 80139cc:	280f      	cmp	r0, #15
 80139ce:	f100 0502 	add.w	r5, r0, #2
 80139d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80139d6:	bf08      	it	eq
 80139d8:	2514      	moveq	r5, #20
 80139da:	436b      	muls	r3, r5
 80139dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80139de:	f001 010f 	and.w	r1, r1, #15
 80139e2:	3101      	adds	r1, #1
 80139e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80139e8:	6851      	ldr	r1, [r2, #4]
 80139ea:	6850      	ldr	r0, [r2, #4]
 80139ec:	f3c1 4183 	ubfx	r1, r1, #18, #4
 80139f0:	0080      	lsls	r0, r0, #2
 80139f2:	d505      	bpl.n	8013a00 <rcu_clock_freq_get+0x8c>
 80139f4:	f041 0110 	orr.w	r1, r1, #16
 80139f8:	1c48      	adds	r0, r1, #1
 80139fa:	e007      	b.n	8013a0c <rcu_clock_freq_get+0x98>
 80139fc:	4b1e      	ldr	r3, [pc, #120]	; (8013a78 <rcu_clock_freq_get+0x104>)
 80139fe:	e7f3      	b.n	80139e8 <rcu_clock_freq_get+0x74>
 8013a00:	290f      	cmp	r1, #15
 8013a02:	d0f9      	beq.n	80139f8 <rcu_clock_freq_get+0x84>
 8013a04:	290d      	cmp	r1, #13
 8013a06:	f101 0002 	add.w	r0, r1, #2
 8013a0a:	d01d      	beq.n	8013a48 <rcu_clock_freq_get+0xd4>
 8013a0c:	4343      	muls	r3, r0
 8013a0e:	6851      	ldr	r1, [r2, #4]
 8013a10:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8013a14:	3120      	adds	r1, #32
 8013a16:	4469      	add	r1, sp
 8013a18:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 8013a1c:	fa23 f001 	lsr.w	r0, r3, r1
 8013a20:	6851      	ldr	r1, [r2, #4]
 8013a22:	6852      	ldr	r2, [r2, #4]
 8013a24:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8013a28:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8013a2c:	3120      	adds	r1, #32
 8013a2e:	3220      	adds	r2, #32
 8013a30:	4469      	add	r1, sp
 8013a32:	446a      	add	r2, sp
 8013a34:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8013a38:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8013a3c:	2c03      	cmp	r4, #3
 8013a3e:	d813      	bhi.n	8013a68 <rcu_clock_freq_get+0xf4>
 8013a40:	e8df f004 	tbb	[pc, r4]
 8013a44:	100e0c0b 	andne	r0, lr, fp, lsl #24
 8013a48:	2006      	movs	r0, #6
 8013a4a:	0859      	lsrs	r1, r3, #1
 8013a4c:	fb00 1303 	mla	r3, r0, r3, r1
 8013a50:	e7dd      	b.n	8013a0e <rcu_clock_freq_get+0x9a>
 8013a52:	4b08      	ldr	r3, [pc, #32]	; (8013a74 <rcu_clock_freq_get+0x100>)
 8013a54:	e7db      	b.n	8013a0e <rcu_clock_freq_get+0x9a>
 8013a56:	4b09      	ldr	r3, [pc, #36]	; (8013a7c <rcu_clock_freq_get+0x108>)
 8013a58:	e7d9      	b.n	8013a0e <rcu_clock_freq_get+0x9a>
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	b009      	add	sp, #36	; 0x24
 8013a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a60:	40c8      	lsrs	r0, r1
 8013a62:	e7fb      	b.n	8013a5c <rcu_clock_freq_get+0xe8>
 8013a64:	40d0      	lsrs	r0, r2
 8013a66:	e7f9      	b.n	8013a5c <rcu_clock_freq_get+0xe8>
 8013a68:	2000      	movs	r0, #0
 8013a6a:	e7f7      	b.n	8013a5c <rcu_clock_freq_get+0xe8>
 8013a6c:	08014fa9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, sl, fp, lr}
 8013a70:	40021000 	andmi	r1, r2, r0
 8013a74:	017d7840 	cmneq	sp, r0, asr #16
 8013a78:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8013a7c:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08013a80 <timer_deinit>:
 8013a80:	b508      	push	{r3, lr}
 8013a82:	4b2d      	ldr	r3, [pc, #180]	; (8013b38 <timer_deinit+0xb8>)
 8013a84:	4298      	cmp	r0, r3
 8013a86:	d048      	beq.n	8013b1a <timer_deinit+0x9a>
 8013a88:	d816      	bhi.n	8013ab8 <timer_deinit+0x38>
 8013a8a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013a8e:	4298      	cmp	r0, r3
 8013a90:	d03c      	beq.n	8013b0c <timer_deinit+0x8c>
 8013a92:	d807      	bhi.n	8013aa4 <timer_deinit+0x24>
 8013a94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8013a98:	d02a      	beq.n	8013af0 <timer_deinit+0x70>
 8013a9a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013a9e:	4298      	cmp	r0, r3
 8013aa0:	d02d      	beq.n	8013afe <timer_deinit+0x7e>
 8013aa2:	bd08      	pop	{r3, pc}
 8013aa4:	4b25      	ldr	r3, [pc, #148]	; (8013b3c <timer_deinit+0xbc>)
 8013aa6:	4298      	cmp	r0, r3
 8013aa8:	d1fb      	bne.n	8013aa2 <timer_deinit+0x22>
 8013aaa:	f240 4003 	movw	r0, #1027	; 0x403
 8013aae:	f7ff feb8 	bl	8013822 <rcu_periph_reset_enable>
 8013ab2:	f240 4003 	movw	r0, #1027	; 0x403
 8013ab6:	e017      	b.n	8013ae8 <timer_deinit+0x68>
 8013ab8:	4b21      	ldr	r3, [pc, #132]	; (8013b40 <timer_deinit+0xc0>)
 8013aba:	4298      	cmp	r0, r3
 8013abc:	d00e      	beq.n	8013adc <timer_deinit+0x5c>
 8013abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ac2:	4298      	cmp	r0, r3
 8013ac4:	d030      	beq.n	8013b28 <timer_deinit+0xa8>
 8013ac6:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8013aca:	4298      	cmp	r0, r3
 8013acc:	d1e9      	bne.n	8013aa2 <timer_deinit+0x22>
 8013ace:	f240 4005 	movw	r0, #1029	; 0x405
 8013ad2:	f7ff fea6 	bl	8013822 <rcu_periph_reset_enable>
 8013ad6:	f240 4005 	movw	r0, #1029	; 0x405
 8013ada:	e005      	b.n	8013ae8 <timer_deinit+0x68>
 8013adc:	f240 300b 	movw	r0, #779	; 0x30b
 8013ae0:	f7ff fe9f 	bl	8013822 <rcu_periph_reset_enable>
 8013ae4:	f240 300b 	movw	r0, #779	; 0x30b
 8013ae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013aec:	f7ff be9b 	b.w	8013826 <rcu_periph_reset_disable>
 8013af0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013af4:	f7ff fe95 	bl	8013822 <rcu_periph_reset_enable>
 8013af8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013afc:	e7f4      	b.n	8013ae8 <timer_deinit+0x68>
 8013afe:	f240 4001 	movw	r0, #1025	; 0x401
 8013b02:	f7ff fe8e 	bl	8013822 <rcu_periph_reset_enable>
 8013b06:	f240 4001 	movw	r0, #1025	; 0x401
 8013b0a:	e7ed      	b.n	8013ae8 <timer_deinit+0x68>
 8013b0c:	f240 4002 	movw	r0, #1026	; 0x402
 8013b10:	f7ff fe87 	bl	8013822 <rcu_periph_reset_enable>
 8013b14:	f240 4002 	movw	r0, #1026	; 0x402
 8013b18:	e7e6      	b.n	8013ae8 <timer_deinit+0x68>
 8013b1a:	f240 4004 	movw	r0, #1028	; 0x404
 8013b1e:	f7ff fe80 	bl	8013822 <rcu_periph_reset_enable>
 8013b22:	f240 4004 	movw	r0, #1028	; 0x404
 8013b26:	e7df      	b.n	8013ae8 <timer_deinit+0x68>
 8013b28:	f240 300d 	movw	r0, #781	; 0x30d
 8013b2c:	f7ff fe79 	bl	8013822 <rcu_periph_reset_enable>
 8013b30:	f240 300d 	movw	r0, #781	; 0x30d
 8013b34:	e7d8      	b.n	8013ae8 <timer_deinit+0x68>
 8013b36:	bf00      	nop
 8013b38:	40001000 	andmi	r1, r0, r0
 8013b3c:	40000c00 	andmi	r0, r0, r0, lsl #24
 8013b40:	40012c00 	andmi	r2, r1, r0, lsl #24

08013b44 <timer_init>:
 8013b44:	880b      	ldrh	r3, [r1, #0]
 8013b46:	6283      	str	r3, [r0, #40]	; 0x28
 8013b48:	4b26      	ldr	r3, [pc, #152]	; (8013be4 <timer_init+0xa0>)
 8013b4a:	4298      	cmp	r0, r3
 8013b4c:	d018      	beq.n	8013b80 <timer_init+0x3c>
 8013b4e:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8013b52:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8013b56:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8013b5a:	d011      	beq.n	8013b80 <timer_init+0x3c>
 8013b5c:	4a22      	ldr	r2, [pc, #136]	; (8013be8 <timer_init+0xa4>)
 8013b5e:	4290      	cmp	r0, r2
 8013b60:	d00e      	beq.n	8013b80 <timer_init+0x3c>
 8013b62:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8013b66:	4290      	cmp	r0, r2
 8013b68:	d00a      	beq.n	8013b80 <timer_init+0x3c>
 8013b6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013b6e:	4293      	cmp	r3, r2
 8013b70:	d006      	beq.n	8013b80 <timer_init+0x3c>
 8013b72:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8013b76:	4293      	cmp	r3, r2
 8013b78:	d002      	beq.n	8013b80 <timer_init+0x3c>
 8013b7a:	4b1c      	ldr	r3, [pc, #112]	; (8013bec <timer_init+0xa8>)
 8013b7c:	4298      	cmp	r0, r3
 8013b7e:	d10f      	bne.n	8013ba0 <timer_init+0x5c>
 8013b80:	6803      	ldr	r3, [r0, #0]
 8013b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013b86:	6003      	str	r3, [r0, #0]
 8013b88:	884b      	ldrh	r3, [r1, #2]
 8013b8a:	6802      	ldr	r2, [r0, #0]
 8013b8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013b90:	4313      	orrs	r3, r2
 8013b92:	6003      	str	r3, [r0, #0]
 8013b94:	888b      	ldrh	r3, [r1, #4]
 8013b96:	6802      	ldr	r2, [r0, #0]
 8013b98:	f003 0310 	and.w	r3, r3, #16
 8013b9c:	4313      	orrs	r3, r2
 8013b9e:	6003      	str	r3, [r0, #0]
 8013ba0:	688b      	ldr	r3, [r1, #8]
 8013ba2:	62c3      	str	r3, [r0, #44]	; 0x2c
 8013ba4:	4b12      	ldr	r3, [pc, #72]	; (8013bf0 <timer_init+0xac>)
 8013ba6:	4298      	cmp	r0, r3
 8013ba8:	d003      	beq.n	8013bb2 <timer_init+0x6e>
 8013baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013bae:	4298      	cmp	r0, r3
 8013bb0:	d104      	bne.n	8013bbc <timer_init+0x78>
 8013bb2:	6943      	ldr	r3, [r0, #20]
 8013bb4:	f043 0301 	orr.w	r3, r3, #1
 8013bb8:	6143      	str	r3, [r0, #20]
 8013bba:	4770      	bx	lr
 8013bbc:	6803      	ldr	r3, [r0, #0]
 8013bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013bc2:	6003      	str	r3, [r0, #0]
 8013bc4:	898b      	ldrh	r3, [r1, #12]
 8013bc6:	6802      	ldr	r2, [r0, #0]
 8013bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013bcc:	4313      	orrs	r3, r2
 8013bce:	6003      	str	r3, [r0, #0]
 8013bd0:	4b04      	ldr	r3, [pc, #16]	; (8013be4 <timer_init+0xa0>)
 8013bd2:	4298      	cmp	r0, r3
 8013bd4:	d002      	beq.n	8013bdc <timer_init+0x98>
 8013bd6:	4b04      	ldr	r3, [pc, #16]	; (8013be8 <timer_init+0xa4>)
 8013bd8:	4298      	cmp	r0, r3
 8013bda:	d1ea      	bne.n	8013bb2 <timer_init+0x6e>
 8013bdc:	7b8b      	ldrb	r3, [r1, #14]
 8013bde:	6303      	str	r3, [r0, #48]	; 0x30
 8013be0:	e7e7      	b.n	8013bb2 <timer_init+0x6e>
 8013be2:	bf00      	nop
 8013be4:	40012c00 	andmi	r2, r1, r0, lsl #24
 8013be8:	40013400 	andmi	r3, r1, r0, lsl #8
 8013bec:	40002000 	andmi	r2, r0, r0
 8013bf0:	40001000 	andmi	r1, r0, r0

08013bf4 <timer_enable>:
 8013bf4:	6803      	ldr	r3, [r0, #0]
 8013bf6:	f043 0301 	orr.w	r3, r3, #1
 8013bfa:	6003      	str	r3, [r0, #0]
 8013bfc:	4770      	bx	lr

08013bfe <timer_channel_output_mode_config>:
 8013bfe:	2903      	cmp	r1, #3
 8013c00:	d81a      	bhi.n	8013c38 <timer_channel_output_mode_config+0x3a>
 8013c02:	e8df f001 	tbb	[pc, r1]
 8013c06:	1a120a02 	bne	8496416 <__exidx_end+0x47f1c6>
 8013c0a:	6983      	ldr	r3, [r0, #24]
 8013c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c10:	6183      	str	r3, [r0, #24]
 8013c12:	6983      	ldr	r3, [r0, #24]
 8013c14:	431a      	orrs	r2, r3
 8013c16:	6182      	str	r2, [r0, #24]
 8013c18:	4770      	bx	lr
 8013c1a:	6983      	ldr	r3, [r0, #24]
 8013c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013c20:	6183      	str	r3, [r0, #24]
 8013c22:	6983      	ldr	r3, [r0, #24]
 8013c24:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8013c28:	e7f5      	b.n	8013c16 <timer_channel_output_mode_config+0x18>
 8013c2a:	69c3      	ldr	r3, [r0, #28]
 8013c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c30:	61c3      	str	r3, [r0, #28]
 8013c32:	69c3      	ldr	r3, [r0, #28]
 8013c34:	431a      	orrs	r2, r3
 8013c36:	61c2      	str	r2, [r0, #28]
 8013c38:	4770      	bx	lr
 8013c3a:	69c3      	ldr	r3, [r0, #28]
 8013c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013c40:	61c3      	str	r3, [r0, #28]
 8013c42:	69c3      	ldr	r3, [r0, #28]
 8013c44:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8013c48:	e7f5      	b.n	8013c36 <timer_channel_output_mode_config+0x38>

08013c4a <timer_channel_output_pulse_value_config>:
 8013c4a:	2903      	cmp	r1, #3
 8013c4c:	d80a      	bhi.n	8013c64 <timer_channel_output_pulse_value_config+0x1a>
 8013c4e:	e8df f001 	tbb	[pc, r1]
 8013c52:	08060402 	stmdaeq	r6, {r1, sl}
 8013c56:	6342      	str	r2, [r0, #52]	; 0x34
 8013c58:	4770      	bx	lr
 8013c5a:	6382      	str	r2, [r0, #56]	; 0x38
 8013c5c:	4770      	bx	lr
 8013c5e:	63c2      	str	r2, [r0, #60]	; 0x3c
 8013c60:	4770      	bx	lr
 8013c62:	6402      	str	r2, [r0, #64]	; 0x40
 8013c64:	4770      	bx	lr

08013c66 <timer_interrupt_enable>:
 8013c66:	68c3      	ldr	r3, [r0, #12]
 8013c68:	430b      	orrs	r3, r1
 8013c6a:	60c3      	str	r3, [r0, #12]
 8013c6c:	4770      	bx	lr

08013c6e <timer_interrupt_flag_clear>:
 8013c6e:	43c9      	mvns	r1, r1
 8013c70:	6101      	str	r1, [r0, #16]
 8013c72:	4770      	bx	lr

08013c74 <timer_flag_clear>:
 8013c74:	43c9      	mvns	r1, r1
 8013c76:	6101      	str	r1, [r0, #16]
 8013c78:	4770      	bx	lr
	...

08013c7c <usart_deinit>:
 8013c7c:	b508      	push	{r3, lr}
 8013c7e:	4b1d      	ldr	r3, [pc, #116]	; (8013cf4 <usart_deinit+0x78>)
 8013c80:	4298      	cmp	r0, r3
 8013c82:	d028      	beq.n	8013cd6 <usart_deinit+0x5a>
 8013c84:	d808      	bhi.n	8013c98 <usart_deinit+0x1c>
 8013c86:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013c8a:	4298      	cmp	r0, r3
 8013c8c:	d015      	beq.n	8013cba <usart_deinit+0x3e>
 8013c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013c92:	4298      	cmp	r0, r3
 8013c94:	d018      	beq.n	8013cc8 <usart_deinit+0x4c>
 8013c96:	bd08      	pop	{r3, pc}
 8013c98:	4b17      	ldr	r3, [pc, #92]	; (8013cf8 <usart_deinit+0x7c>)
 8013c9a:	4298      	cmp	r0, r3
 8013c9c:	d022      	beq.n	8013ce4 <usart_deinit+0x68>
 8013c9e:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8013ca2:	4298      	cmp	r0, r3
 8013ca4:	d1f7      	bne.n	8013c96 <usart_deinit+0x1a>
 8013ca6:	f240 300e 	movw	r0, #782	; 0x30e
 8013caa:	f7ff fdba 	bl	8013822 <rcu_periph_reset_enable>
 8013cae:	f240 300e 	movw	r0, #782	; 0x30e
 8013cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013cb6:	f7ff bdb6 	b.w	8013826 <rcu_periph_reset_disable>
 8013cba:	f240 4011 	movw	r0, #1041	; 0x411
 8013cbe:	f7ff fdb0 	bl	8013822 <rcu_periph_reset_enable>
 8013cc2:	f240 4011 	movw	r0, #1041	; 0x411
 8013cc6:	e7f4      	b.n	8013cb2 <usart_deinit+0x36>
 8013cc8:	f240 4012 	movw	r0, #1042	; 0x412
 8013ccc:	f7ff fda9 	bl	8013822 <rcu_periph_reset_enable>
 8013cd0:	f240 4012 	movw	r0, #1042	; 0x412
 8013cd4:	e7ed      	b.n	8013cb2 <usart_deinit+0x36>
 8013cd6:	f240 4013 	movw	r0, #1043	; 0x413
 8013cda:	f7ff fda2 	bl	8013822 <rcu_periph_reset_enable>
 8013cde:	f240 4013 	movw	r0, #1043	; 0x413
 8013ce2:	e7e6      	b.n	8013cb2 <usart_deinit+0x36>
 8013ce4:	f240 4014 	movw	r0, #1044	; 0x414
 8013ce8:	f7ff fd9b 	bl	8013822 <rcu_periph_reset_enable>
 8013cec:	f240 4014 	movw	r0, #1044	; 0x414
 8013cf0:	e7df      	b.n	8013cb2 <usart_deinit+0x36>
 8013cf2:	bf00      	nop
 8013cf4:	40004c00 	andmi	r4, r0, r0, lsl #24
 8013cf8:	40005000 	andmi	r5, r0, r0

08013cfc <usart_baudrate_set>:
 8013cfc:	b538      	push	{r3, r4, r5, lr}
 8013cfe:	4b11      	ldr	r3, [pc, #68]	; (8013d44 <usart_baudrate_set+0x48>)
 8013d00:	4604      	mov	r4, r0
 8013d02:	4298      	cmp	r0, r3
 8013d04:	460d      	mov	r5, r1
 8013d06:	d01b      	beq.n	8013d40 <usart_baudrate_set+0x44>
 8013d08:	d809      	bhi.n	8013d1e <usart_baudrate_set+0x22>
 8013d0a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013d0e:	4298      	cmp	r0, r3
 8013d10:	d016      	beq.n	8013d40 <usart_baudrate_set+0x44>
 8013d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013d16:	4298      	cmp	r0, r3
 8013d18:	d012      	beq.n	8013d40 <usart_baudrate_set+0x44>
 8013d1a:	2000      	movs	r0, #0
 8013d1c:	e009      	b.n	8013d32 <usart_baudrate_set+0x36>
 8013d1e:	4b0a      	ldr	r3, [pc, #40]	; (8013d48 <usart_baudrate_set+0x4c>)
 8013d20:	4298      	cmp	r0, r3
 8013d22:	d00d      	beq.n	8013d40 <usart_baudrate_set+0x44>
 8013d24:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8013d28:	4298      	cmp	r0, r3
 8013d2a:	d1f6      	bne.n	8013d1a <usart_baudrate_set+0x1e>
 8013d2c:	2003      	movs	r0, #3
 8013d2e:	f7ff fe21 	bl	8013974 <rcu_clock_freq_get>
 8013d32:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 8013d36:	fbb3 f1f5 	udiv	r1, r3, r5
 8013d3a:	b289      	uxth	r1, r1
 8013d3c:	60a1      	str	r1, [r4, #8]
 8013d3e:	bd38      	pop	{r3, r4, r5, pc}
 8013d40:	2002      	movs	r0, #2
 8013d42:	e7f4      	b.n	8013d2e <usart_baudrate_set+0x32>
 8013d44:	40004c00 	andmi	r4, r0, r0, lsl #24
 8013d48:	40005000 	andmi	r5, r0, r0

08013d4c <usart_parity_config>:
 8013d4c:	68c2      	ldr	r2, [r0, #12]
 8013d4e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8013d52:	60c2      	str	r2, [r0, #12]
 8013d54:	68c3      	ldr	r3, [r0, #12]
 8013d56:	430b      	orrs	r3, r1
 8013d58:	60c3      	str	r3, [r0, #12]
 8013d5a:	4770      	bx	lr

08013d5c <usart_word_length_set>:
 8013d5c:	68c2      	ldr	r2, [r0, #12]
 8013d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013d62:	60c2      	str	r2, [r0, #12]
 8013d64:	68c3      	ldr	r3, [r0, #12]
 8013d66:	430b      	orrs	r3, r1
 8013d68:	60c3      	str	r3, [r0, #12]
 8013d6a:	4770      	bx	lr

08013d6c <usart_stop_bit_set>:
 8013d6c:	6902      	ldr	r2, [r0, #16]
 8013d6e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8013d72:	6102      	str	r2, [r0, #16]
 8013d74:	6903      	ldr	r3, [r0, #16]
 8013d76:	430b      	orrs	r3, r1
 8013d78:	6103      	str	r3, [r0, #16]
 8013d7a:	4770      	bx	lr

08013d7c <usart_transmit_config>:
 8013d7c:	68c3      	ldr	r3, [r0, #12]
 8013d7e:	f023 0308 	bic.w	r3, r3, #8
 8013d82:	430b      	orrs	r3, r1
 8013d84:	60c3      	str	r3, [r0, #12]
 8013d86:	4770      	bx	lr

08013d88 <usart_receive_config>:
 8013d88:	68c3      	ldr	r3, [r0, #12]
 8013d8a:	f023 0304 	bic.w	r3, r3, #4
 8013d8e:	430b      	orrs	r3, r1
 8013d90:	60c3      	str	r3, [r0, #12]
 8013d92:	4770      	bx	lr

08013d94 <usart_hardware_flow_rts_config>:
 8013d94:	6943      	ldr	r3, [r0, #20]
 8013d96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013d9a:	430b      	orrs	r3, r1
 8013d9c:	6143      	str	r3, [r0, #20]
 8013d9e:	4770      	bx	lr

08013da0 <usart_hardware_flow_cts_config>:
 8013da0:	6943      	ldr	r3, [r0, #20]
 8013da2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013da6:	430b      	orrs	r3, r1
 8013da8:	6143      	str	r3, [r0, #20]
 8013daa:	4770      	bx	lr

08013dac <usart_dma_transmit_config>:
 8013dac:	6943      	ldr	r3, [r0, #20]
 8013dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013db2:	430b      	orrs	r3, r1
 8013db4:	6143      	str	r3, [r0, #20]
 8013db6:	4770      	bx	lr

08013db8 <usart_flag_get>:
 8013db8:	098b      	lsrs	r3, r1, #6
 8013dba:	5818      	ldr	r0, [r3, r0]
 8013dbc:	f001 011f 	and.w	r1, r1, #31
 8013dc0:	40c8      	lsrs	r0, r1
 8013dc2:	f000 0001 	and.w	r0, r0, #1
 8013dc6:	4770      	bx	lr

08013dc8 <usart_interrupt_enable>:
 8013dc8:	2301      	movs	r3, #1
 8013dca:	b510      	push	{r4, lr}
 8013dcc:	f3c1 1289 	ubfx	r2, r1, #6, #10
 8013dd0:	5814      	ldr	r4, [r2, r0]
 8013dd2:	f001 011f 	and.w	r1, r1, #31
 8013dd6:	fa03 f101 	lsl.w	r1, r3, r1
 8013dda:	4321      	orrs	r1, r4
 8013ddc:	5011      	str	r1, [r2, r0]
 8013dde:	bd10      	pop	{r4, pc}

08013de0 <usart_interrupt_disable>:
 8013de0:	2201      	movs	r2, #1
 8013de2:	b510      	push	{r4, lr}
 8013de4:	f3c1 1489 	ubfx	r4, r1, #6, #10
 8013de8:	5823      	ldr	r3, [r4, r0]
 8013dea:	f001 011f 	and.w	r1, r1, #31
 8013dee:	fa02 f101 	lsl.w	r1, r2, r1
 8013df2:	ea23 0101 	bic.w	r1, r3, r1
 8013df6:	5021      	str	r1, [r4, r0]
 8013df8:	bd10      	pop	{r4, pc}

08013dfa <usart_interrupt_flag_clear>:
 8013dfa:	2201      	movs	r2, #1
 8013dfc:	b510      	push	{r4, lr}
 8013dfe:	0d8c      	lsrs	r4, r1, #22
 8013e00:	5823      	ldr	r3, [r4, r0]
 8013e02:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8013e06:	fa02 f101 	lsl.w	r1, r2, r1
 8013e0a:	ea23 0101 	bic.w	r1, r3, r1
 8013e0e:	5021      	str	r1, [r4, r0]
 8013e10:	bd10      	pop	{r4, pc}
	...

08013e14 <emac_start>:
 8013e14:	b510      	push	{r4, lr}
 8013e16:	4604      	mov	r4, r0
 8013e18:	f240 6002 	movw	r0, #1538	; 0x602
 8013e1c:	f7ff fce4 	bl	80137e8 <rcu_periph_clock_enable>
 8013e20:	f240 6003 	movw	r0, #1539	; 0x603
 8013e24:	f7ff fce0 	bl	80137e8 <rcu_periph_clock_enable>
 8013e28:	f240 6004 	movw	r0, #1540	; 0x604
 8013e2c:	f7ff fcdc 	bl	80137e8 <rcu_periph_clock_enable>
 8013e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013e34:	2203      	movs	r2, #3
 8013e36:	2118      	movs	r1, #24
 8013e38:	4846      	ldr	r0, [pc, #280]	; (8013f54 <emac_start+0x140>)
 8013e3a:	f7ff fc45 	bl	80136c8 <gpio_init>
 8013e3e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8013e42:	f7ff fcd1 	bl	80137e8 <rcu_periph_clock_enable>
 8013e46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8013e4a:	f7ff fcf9 	bl	8013840 <rcu_pll2_config>
 8013e4e:	201c      	movs	r0, #28
 8013e50:	f7ff fd8e 	bl	8013970 <rcu_osci_on>
 8013e54:	201c      	movs	r0, #28
 8013e56:	f7ff fd2b 	bl	80138b0 <rcu_osci_stab_wait>
 8013e5a:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8013e5e:	f7ff fce5 	bl	801382c <rcu_ckout0_config>
 8013e62:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8013e66:	f7ff fcb3 	bl	80137d0 <gpio_ethernet_phy_select>
 8013e6a:	2302      	movs	r3, #2
 8013e6c:	2203      	movs	r2, #3
 8013e6e:	2104      	movs	r1, #4
 8013e70:	4838      	ldr	r0, [pc, #224]	; (8013f54 <emac_start+0x140>)
 8013e72:	f7ff fc29 	bl	80136c8 <gpio_init>
 8013e76:	2304      	movs	r3, #4
 8013e78:	2203      	movs	r2, #3
 8013e7a:	2118      	movs	r1, #24
 8013e7c:	4835      	ldr	r0, [pc, #212]	; (8013f54 <emac_start+0x140>)
 8013e7e:	f7ff fc23 	bl	80136c8 <gpio_init>
 8013e82:	2380      	movs	r3, #128	; 0x80
 8013e84:	2203      	movs	r2, #3
 8013e86:	2104      	movs	r1, #4
 8013e88:	4832      	ldr	r0, [pc, #200]	; (8013f54 <emac_start+0x140>)
 8013e8a:	f7ff fc1d 	bl	80136c8 <gpio_init>
 8013e8e:	2302      	movs	r3, #2
 8013e90:	2203      	movs	r2, #3
 8013e92:	2118      	movs	r1, #24
 8013e94:	4830      	ldr	r0, [pc, #192]	; (8013f58 <emac_start+0x144>)
 8013e96:	f7ff fc17 	bl	80136c8 <gpio_init>
 8013e9a:	2310      	movs	r3, #16
 8013e9c:	2203      	movs	r2, #3
 8013e9e:	2104      	movs	r1, #4
 8013ea0:	482d      	ldr	r0, [pc, #180]	; (8013f58 <emac_start+0x144>)
 8013ea2:	f7ff fc11 	bl	80136c8 <gpio_init>
 8013ea6:	2320      	movs	r3, #32
 8013ea8:	2203      	movs	r2, #3
 8013eaa:	2104      	movs	r1, #4
 8013eac:	482a      	ldr	r0, [pc, #168]	; (8013f58 <emac_start+0x144>)
 8013eae:	f7ff fc0b 	bl	80136c8 <gpio_init>
 8013eb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013eb6:	2203      	movs	r2, #3
 8013eb8:	2118      	movs	r1, #24
 8013eba:	4828      	ldr	r0, [pc, #160]	; (8013f5c <emac_start+0x148>)
 8013ebc:	f7ff fc04 	bl	80136c8 <gpio_init>
 8013ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ec4:	2203      	movs	r2, #3
 8013ec6:	2118      	movs	r1, #24
 8013ec8:	4824      	ldr	r0, [pc, #144]	; (8013f5c <emac_start+0x148>)
 8013eca:	f7ff fbfd 	bl	80136c8 <gpio_init>
 8013ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013ed2:	2203      	movs	r2, #3
 8013ed4:	2118      	movs	r1, #24
 8013ed6:	4821      	ldr	r0, [pc, #132]	; (8013f5c <emac_start+0x148>)
 8013ed8:	f7ff fbf6 	bl	80136c8 <gpio_init>
 8013edc:	f240 500e 	movw	r0, #1294	; 0x50e
 8013ee0:	f7ff fc82 	bl	80137e8 <rcu_periph_clock_enable>
 8013ee4:	f240 500f 	movw	r0, #1295	; 0x50f
 8013ee8:	f7ff fc7e 	bl	80137e8 <rcu_periph_clock_enable>
 8013eec:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8013ef0:	f7ff fc7a 	bl	80137e8 <rcu_periph_clock_enable>
 8013ef4:	f000 ff9e 	bl	8014e34 <enet_deinit>
 8013ef8:	f000 fbf8 	bl	80146ec <enet_software_reset>
 8013efc:	b900      	cbnz	r0, 8013f00 <emac_start+0xec>
 8013efe:	e7fe      	b.n	8013efe <emac_start+0xea>
 8013f00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013f08:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8013f0c:	f000 fd72 	bl	80149f4 <enet_init>
 8013f10:	4b13      	ldr	r3, [pc, #76]	; (8013f60 <emac_start+0x14c>)
 8013f12:	6018      	str	r0, [r3, #0]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	b903      	cbnz	r3, 8013f1a <emac_start+0x106>
 8013f18:	e7fe      	b.n	8013f18 <emac_start+0x104>
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	f000 fade 	bl	80144dc <mac_address_get>
 8013f20:	4621      	mov	r1, r4
 8013f22:	2000      	movs	r0, #0
 8013f24:	f000 fcc6 	bl	80148b4 <enet_mac_address_set>
 8013f28:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8013f2c:	f000 fbf2 	bl	8014714 <enet_descriptors_chain_init>
 8013f30:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8013f34:	f000 fbee 	bl	8014714 <enet_descriptors_chain_init>
 8013f38:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8013f3c:	4809      	ldr	r0, [pc, #36]	; (8013f64 <emac_start+0x150>)
 8013f3e:	f000 fcb3 	bl	80148a8 <enet_transmit_checksum_config>
 8013f42:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8013f46:	4808      	ldr	r0, [pc, #32]	; (8013f68 <emac_start+0x154>)
 8013f48:	f000 fcae 	bl	80148a8 <enet_transmit_checksum_config>
 8013f4c:	f000 feea 	bl	8014d24 <enet_enable>
 8013f50:	2001      	movs	r0, #1
 8013f52:	bd10      	pop	{r4, pc}
 8013f54:	40010800 	andmi	r0, r1, r0, lsl #16
 8013f58:	40011000 	andmi	r1, r1, r0
 8013f5c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8013f60:	2000af10 	andcs	sl, r0, r0, lsl pc
 8013f64:	2000df64 	andcs	sp, r0, r4, ror #30
 8013f68:	2000df74 	andcs	sp, r0, r4, ror pc

08013f6c <emac_eth_recv>:
 8013f6c:	b538      	push	{r3, r4, r5, lr}
 8013f6e:	4605      	mov	r5, r0
 8013f70:	f000 ff30 	bl	8014dd4 <enet_rxframe_size_get>
 8013f74:	4604      	mov	r4, r0
 8013f76:	b138      	cbz	r0, 8013f88 <emac_eth_recv+0x1c>
 8013f78:	4b05      	ldr	r3, [pc, #20]	; (8013f90 <emac_eth_recv+0x24>)
 8013f7a:	2105      	movs	r1, #5
 8013f7c:	6818      	ldr	r0, [r3, #0]
 8013f7e:	f000 fed8 	bl	8014d32 <enet_desc_information_get>
 8013f82:	6028      	str	r0, [r5, #0]
 8013f84:	4620      	mov	r0, r4
 8013f86:	bd38      	pop	{r3, r4, r5, pc}
 8013f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f8c:	e7fb      	b.n	8013f86 <emac_eth_recv+0x1a>
 8013f8e:	bf00      	nop
 8013f90:	2000af20 	andcs	sl, r0, r0, lsr #30

08013f94 <emac_free_pkt>:
 8013f94:	2100      	movs	r1, #0
 8013f96:	4608      	mov	r0, r1
 8013f98:	f000 bc04 	b.w	80147a4 <enet_frame_receive>

08013f9c <emac_eth_send>:
 8013f9c:	f000 bc42 	b.w	8014824 <enet_frame_transmit>

08013fa0 <gd32_adc_init()>:
 8013fa0:	b510      	push	{r4, lr}
 8013fa2:	f240 6009 	movw	r0, #1545	; 0x609
 8013fa6:	4c21      	ldr	r4, [pc, #132]	; (801402c <gd32_adc_init()+0x8c>)
 8013fa8:	f7ff fc1e 	bl	80137e8 <rcu_periph_clock_enable>
 8013fac:	2005      	movs	r0, #5
 8013fae:	f7ff fc53 	bl	8013858 <rcu_adc_clock_config>
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	2201      	movs	r2, #1
 8013fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013fba:	f000 fab1 	bl	8014520 <adc_special_function_config>
 8013fbe:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8013fc2:	4620      	mov	r0, r4
 8013fc4:	2102      	movs	r1, #2
 8013fc6:	f000 fb4b 	bl	8014660 <adc_external_trigger_source_config>
 8013fca:	2100      	movs	r1, #0
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f000 facf 	bl	8014570 <adc_data_alignment_config>
 8013fd2:	2000      	movs	r0, #0
 8013fd4:	f000 fa94 	bl	8014500 <adc_mode_config>
 8013fd8:	2202      	movs	r2, #2
 8013fda:	4620      	mov	r0, r4
 8013fdc:	4611      	mov	r1, r2
 8013fde:	f000 faf3 	bl	80145c8 <adc_channel_length_config>
 8013fe2:	4620      	mov	r0, r4
 8013fe4:	2307      	movs	r3, #7
 8013fe6:	2210      	movs	r2, #16
 8013fe8:	2100      	movs	r1, #0
 8013fea:	f000 fb0a 	bl	8014602 <adc_inserted_channel_config>
 8013fee:	2307      	movs	r3, #7
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	2211      	movs	r2, #17
 8013ff4:	2101      	movs	r1, #1
 8013ff6:	f000 fb04 	bl	8014602 <adc_inserted_channel_config>
 8013ffa:	2201      	movs	r2, #1
 8013ffc:	2102      	movs	r1, #2
 8013ffe:	4620      	mov	r0, r4
 8014000:	f000 fb3f 	bl	8014682 <adc_external_trigger_config>
 8014004:	f000 fad6 	bl	80145b4 <adc_tempsensor_vrefint_enable>
 8014008:	4620      	mov	r0, r4
 801400a:	f000 faba 	bl	8014582 <adc_enable>
 801400e:	2100      	movs	r1, #0
 8014010:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014014:	f000 fa4a 	bl	80144ac <udelay(unsigned int, unsigned int)>
 8014018:	4620      	mov	r0, r4
 801401a:	f000 faba 	bl	8014592 <adc_calibration_enable>
 801401e:	4620      	mov	r0, r4
 8014020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014024:	2102      	movs	r1, #2
 8014026:	f000 bb47 	b.w	80146b8 <adc_software_trigger_enable>
 801402a:	bf00      	nop
 801402c:	40012400 	andmi	r2, r1, r0, lsl #8

08014030 <_stop() [clone .isra.0]>:
 8014030:	b508      	push	{r3, lr}
 8014032:	4806      	ldr	r0, [pc, #24]	; (801404c <_stop() [clone .isra.0]+0x1c>)
 8014034:	f000 ff8e 	bl	8014f54 <i2c_stop_on_bus>
 8014038:	f640 73ff 	movw	r3, #4095	; 0xfff
 801403c:	4a04      	ldr	r2, [pc, #16]	; (8014050 <_stop() [clone .isra.0]+0x20>)
 801403e:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 8014042:	0589      	lsls	r1, r1, #22
 8014044:	d501      	bpl.n	801404a <_stop() [clone .isra.0]+0x1a>
 8014046:	3b01      	subs	r3, #1
 8014048:	d1f9      	bne.n	801403e <_stop() [clone .isra.0]+0xe>
 801404a:	bd08      	pop	{r3, pc}
 801404c:	40005400 	andmi	r5, r0, r0, lsl #8
 8014050:	40005000 	andmi	r5, r0, r0

08014054 <gd32_i2c_begin()>:
 8014054:	b510      	push	{r4, lr}
 8014056:	f240 7015 	movw	r0, #1813	; 0x715
 801405a:	f7ff fbc5 	bl	80137e8 <rcu_periph_clock_enable>
 801405e:	4c15      	ldr	r4, [pc, #84]	; (80140b4 <gd32_i2c_begin()+0x60>)
 8014060:	f240 6003 	movw	r0, #1539	; 0x603
 8014064:	f7ff fbc0 	bl	80137e8 <rcu_periph_clock_enable>
 8014068:	f240 6003 	movw	r0, #1539	; 0x603
 801406c:	f7ff fbbc 	bl	80137e8 <rcu_periph_clock_enable>
 8014070:	4620      	mov	r0, r4
 8014072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014076:	2203      	movs	r2, #3
 8014078:	211c      	movs	r1, #28
 801407a:	f7ff fb25 	bl	80136c8 <gpio_init>
 801407e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014082:	2203      	movs	r2, #3
 8014084:	4620      	mov	r0, r4
 8014086:	211c      	movs	r1, #28
 8014088:	f7ff fb1e 	bl	80136c8 <gpio_init>
 801408c:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8014090:	2101      	movs	r1, #1
 8014092:	2002      	movs	r0, #2
 8014094:	f7ff fb6c 	bl	8013770 <gpio_pin_remap_config>
 8014098:	4620      	mov	r0, r4
 801409a:	4907      	ldr	r1, [pc, #28]	; (80140b8 <gd32_i2c_begin()+0x64>)
 801409c:	2200      	movs	r2, #0
 801409e:	f000 fed7 	bl	8014e50 <i2c_clock_config>
 80140a2:	4620      	mov	r0, r4
 80140a4:	f000 ff4c 	bl	8014f40 <i2c_enable>
 80140a8:	4620      	mov	r0, r4
 80140aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140ae:	2101      	movs	r1, #1
 80140b0:	f000 bf2c 	b.w	8014f0c <i2c_ack_config>
 80140b4:	40010c00 	andmi	r0, r1, r0, lsl #24
 80140b8:	00061a80 	andeq	r1, r6, r0, lsl #21

080140bc <gd32_i2c_set_baudrate(unsigned int)>:
 80140bc:	4601      	mov	r1, r0
 80140be:	2200      	movs	r2, #0
 80140c0:	4801      	ldr	r0, [pc, #4]	; (80140c8 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 80140c2:	f000 bec5 	b.w	8014e50 <i2c_clock_config>
 80140c6:	bf00      	nop
 80140c8:	40005400 	andmi	r5, r0, r0, lsl #8

080140cc <gd32_i2c_set_address(unsigned char)>:
 80140cc:	4b01      	ldr	r3, [pc, #4]	; (80140d4 <gd32_i2c_set_address(unsigned char)+0x8>)
 80140ce:	0040      	lsls	r0, r0, #1
 80140d0:	7018      	strb	r0, [r3, #0]
 80140d2:	4770      	bx	lr
 80140d4:	2000af14 	andcs	sl, r0, r4, lsl pc

080140d8 <gd32_i2c_write(char const*, unsigned int)>:
 80140d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140da:	4604      	mov	r4, r0
 80140dc:	460f      	mov	r7, r1
 80140de:	f640 75ff 	movw	r5, #4095	; 0xfff
 80140e2:	4e2e      	ldr	r6, [pc, #184]	; (801419c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 80140e4:	f240 6101 	movw	r1, #1537	; 0x601
 80140e8:	4630      	mov	r0, r6
 80140ea:	f000 ff3d 	bl	8014f68 <i2c_flag_get>
 80140ee:	b138      	cbz	r0, 8014100 <gd32_i2c_write(char const*, unsigned int)+0x28>
 80140f0:	3d01      	subs	r5, #1
 80140f2:	d1f7      	bne.n	80140e4 <gd32_i2c_write(char const*, unsigned int)+0xc>
 80140f4:	f7ff ff9c 	bl	8014030 <_stop() [clone .isra.0]>
 80140f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140fc:	4240      	negs	r0, r0
 80140fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014100:	4826      	ldr	r0, [pc, #152]	; (801419c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014102:	f000 ff22 	bl	8014f4a <i2c_start_on_bus>
 8014106:	f640 75ff 	movw	r5, #4095	; 0xfff
 801410a:	4e24      	ldr	r6, [pc, #144]	; (801419c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801410c:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014110:	4630      	mov	r0, r6
 8014112:	f000 ff29 	bl	8014f68 <i2c_flag_get>
 8014116:	bb68      	cbnz	r0, 8014174 <gd32_i2c_write(char const*, unsigned int)+0x9c>
 8014118:	3d01      	subs	r5, #1
 801411a:	d1f7      	bne.n	801410c <gd32_i2c_write(char const*, unsigned int)+0x34>
 801411c:	e7ea      	b.n	80140f4 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 801411e:	f240 5101 	movw	r1, #1281	; 0x501
 8014122:	481e      	ldr	r0, [pc, #120]	; (801419c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014124:	f000 ff28 	bl	8014f78 <i2c_flag_clear>
 8014128:	f640 75ff 	movw	r5, #4095	; 0xfff
 801412c:	4e1b      	ldr	r6, [pc, #108]	; (801419c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801412e:	f240 5107 	movw	r1, #1287	; 0x507
 8014132:	4630      	mov	r0, r6
 8014134:	f000 ff18 	bl	8014f68 <i2c_flag_get>
 8014138:	2801      	cmp	r0, #1
 801413a:	d114      	bne.n	8014166 <gd32_i2c_write(char const*, unsigned int)+0x8e>
 801413c:	4e17      	ldr	r6, [pc, #92]	; (801419c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801413e:	4427      	add	r7, r4
 8014140:	42a7      	cmp	r7, r4
 8014142:	d013      	beq.n	801416c <gd32_i2c_write(char const*, unsigned int)+0x94>
 8014144:	4630      	mov	r0, r6
 8014146:	f814 1b01 	ldrb.w	r1, [r4], #1
 801414a:	f000 ff08 	bl	8014f5e <i2c_data_transmit>
 801414e:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014152:	f240 5102 	movw	r1, #1282	; 0x502
 8014156:	4630      	mov	r0, r6
 8014158:	f000 ff06 	bl	8014f68 <i2c_flag_get>
 801415c:	2800      	cmp	r0, #0
 801415e:	d1ef      	bne.n	8014140 <gd32_i2c_write(char const*, unsigned int)+0x68>
 8014160:	3d01      	subs	r5, #1
 8014162:	d1f6      	bne.n	8014152 <gd32_i2c_write(char const*, unsigned int)+0x7a>
 8014164:	e7c6      	b.n	80140f4 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8014166:	3d01      	subs	r5, #1
 8014168:	d1e1      	bne.n	801412e <gd32_i2c_write(char const*, unsigned int)+0x56>
 801416a:	e7c3      	b.n	80140f4 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 801416c:	f7ff ff60 	bl	8014030 <_stop() [clone .isra.0]>
 8014170:	2000      	movs	r0, #0
 8014172:	e7c3      	b.n	80140fc <gd32_i2c_write(char const*, unsigned int)+0x24>
 8014174:	4b0a      	ldr	r3, [pc, #40]	; (80141a0 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 8014176:	f06f 0201 	mvn.w	r2, #1
 801417a:	7819      	ldrb	r1, [r3, #0]
 801417c:	4807      	ldr	r0, [pc, #28]	; (801419c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 801417e:	f000 fed7 	bl	8014f30 <i2c_master_addressing>
 8014182:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014186:	4e05      	ldr	r6, [pc, #20]	; (801419c <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014188:	f240 5101 	movw	r1, #1281	; 0x501
 801418c:	4630      	mov	r0, r6
 801418e:	f000 feeb 	bl	8014f68 <i2c_flag_get>
 8014192:	2800      	cmp	r0, #0
 8014194:	d1c3      	bne.n	801411e <gd32_i2c_write(char const*, unsigned int)+0x46>
 8014196:	3d01      	subs	r5, #1
 8014198:	d1f6      	bne.n	8014188 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 801419a:	e7ab      	b.n	80140f4 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 801419c:	40005400 	andmi	r5, r0, r0, lsl #8
 80141a0:	2000af14 	andcs	sl, r0, r4, lsl pc

080141a4 <gd32_i2c_read(char*, unsigned int)>:
 80141a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141a8:	4680      	mov	r8, r0
 80141aa:	460c      	mov	r4, r1
 80141ac:	f640 76ff 	movw	r6, #4095	; 0xfff
 80141b0:	4f49      	ldr	r7, [pc, #292]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80141b2:	f240 6101 	movw	r1, #1537	; 0x601
 80141b6:	4638      	mov	r0, r7
 80141b8:	f000 fed6 	bl	8014f68 <i2c_flag_get>
 80141bc:	4605      	mov	r5, r0
 80141be:	b128      	cbz	r0, 80141cc <gd32_i2c_read(char*, unsigned int)+0x28>
 80141c0:	3e01      	subs	r6, #1
 80141c2:	d1f6      	bne.n	80141b2 <gd32_i2c_read(char*, unsigned int)+0xe>
 80141c4:	f7ff ff34 	bl	8014030 <_stop() [clone .isra.0]>
 80141c8:	2504      	movs	r5, #4
 80141ca:	e082      	b.n	80142d2 <gd32_i2c_read(char*, unsigned int)+0x12e>
 80141cc:	2c02      	cmp	r4, #2
 80141ce:	d103      	bne.n	80141d8 <gd32_i2c_read(char*, unsigned int)+0x34>
 80141d0:	4601      	mov	r1, r0
 80141d2:	4841      	ldr	r0, [pc, #260]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80141d4:	f000 fea3 	bl	8014f1e <i2c_ackpos_config>
 80141d8:	483f      	ldr	r0, [pc, #252]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80141da:	f000 feb6 	bl	8014f4a <i2c_start_on_bus>
 80141de:	f640 76ff 	movw	r6, #4095	; 0xfff
 80141e2:	4f3d      	ldr	r7, [pc, #244]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80141e4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80141e8:	4638      	mov	r0, r7
 80141ea:	f000 febd 	bl	8014f68 <i2c_flag_get>
 80141ee:	b910      	cbnz	r0, 80141f6 <gd32_i2c_read(char*, unsigned int)+0x52>
 80141f0:	3e01      	subs	r6, #1
 80141f2:	d1f7      	bne.n	80141e4 <gd32_i2c_read(char*, unsigned int)+0x40>
 80141f4:	e7e6      	b.n	80141c4 <gd32_i2c_read(char*, unsigned int)+0x20>
 80141f6:	4b39      	ldr	r3, [pc, #228]	; (80142dc <gd32_i2c_read(char*, unsigned int)+0x138>)
 80141f8:	2201      	movs	r2, #1
 80141fa:	7819      	ldrb	r1, [r3, #0]
 80141fc:	4836      	ldr	r0, [pc, #216]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80141fe:	f000 fe97 	bl	8014f30 <i2c_master_addressing>
 8014202:	2c02      	cmp	r4, #2
 8014204:	d803      	bhi.n	801420e <gd32_i2c_read(char*, unsigned int)+0x6a>
 8014206:	2100      	movs	r1, #0
 8014208:	4833      	ldr	r0, [pc, #204]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 801420a:	f000 fe7f 	bl	8014f0c <i2c_ack_config>
 801420e:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014212:	4f31      	ldr	r7, [pc, #196]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014214:	f240 5101 	movw	r1, #1281	; 0x501
 8014218:	4638      	mov	r0, r7
 801421a:	f000 fea5 	bl	8014f68 <i2c_flag_get>
 801421e:	b910      	cbnz	r0, 8014226 <gd32_i2c_read(char*, unsigned int)+0x82>
 8014220:	3e01      	subs	r6, #1
 8014222:	d1f7      	bne.n	8014214 <gd32_i2c_read(char*, unsigned int)+0x70>
 8014224:	e7ce      	b.n	80141c4 <gd32_i2c_read(char*, unsigned int)+0x20>
 8014226:	f240 5101 	movw	r1, #1281	; 0x501
 801422a:	482b      	ldr	r0, [pc, #172]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 801422c:	f000 fea4 	bl	8014f78 <i2c_flag_clear>
 8014230:	2c01      	cmp	r4, #1
 8014232:	d102      	bne.n	801423a <gd32_i2c_read(char*, unsigned int)+0x96>
 8014234:	4828      	ldr	r0, [pc, #160]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014236:	f000 fe8d 	bl	8014f54 <i2c_stop_on_bus>
 801423a:	f640 77ff 	movw	r7, #4095	; 0xfff
 801423e:	4e26      	ldr	r6, [pc, #152]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014240:	b3ac      	cbz	r4, 80142ae <gd32_i2c_read(char*, unsigned int)+0x10a>
 8014242:	2c03      	cmp	r4, #3
 8014244:	d121      	bne.n	801428a <gd32_i2c_read(char*, unsigned int)+0xe6>
 8014246:	f640 79ff 	movw	r9, #4095	; 0xfff
 801424a:	f240 5102 	movw	r1, #1282	; 0x502
 801424e:	4630      	mov	r0, r6
 8014250:	f000 fe8a 	bl	8014f68 <i2c_flag_get>
 8014254:	b918      	cbnz	r0, 801425e <gd32_i2c_read(char*, unsigned int)+0xba>
 8014256:	f1b9 0901 	subs.w	r9, r9, #1
 801425a:	d1f6      	bne.n	801424a <gd32_i2c_read(char*, unsigned int)+0xa6>
 801425c:	e7b2      	b.n	80141c4 <gd32_i2c_read(char*, unsigned int)+0x20>
 801425e:	2100      	movs	r1, #0
 8014260:	4630      	mov	r0, r6
 8014262:	f000 fe53 	bl	8014f0c <i2c_ack_config>
 8014266:	f240 5106 	movw	r1, #1286	; 0x506
 801426a:	4630      	mov	r0, r6
 801426c:	f000 fe7c 	bl	8014f68 <i2c_flag_get>
 8014270:	b138      	cbz	r0, 8014282 <gd32_i2c_read(char*, unsigned int)+0xde>
 8014272:	4630      	mov	r0, r6
 8014274:	f000 fe75 	bl	8014f62 <i2c_data_receive>
 8014278:	f640 77ff 	movw	r7, #4095	; 0xfff
 801427c:	f808 0b01 	strb.w	r0, [r8], #1
 8014280:	3c01      	subs	r4, #1
 8014282:	3f01      	subs	r7, #1
 8014284:	2f00      	cmp	r7, #0
 8014286:	dcdb      	bgt.n	8014240 <gd32_i2c_read(char*, unsigned int)+0x9c>
 8014288:	e79c      	b.n	80141c4 <gd32_i2c_read(char*, unsigned int)+0x20>
 801428a:	2c02      	cmp	r4, #2
 801428c:	d1eb      	bne.n	8014266 <gd32_i2c_read(char*, unsigned int)+0xc2>
 801428e:	f640 79ff 	movw	r9, #4095	; 0xfff
 8014292:	f240 5102 	movw	r1, #1282	; 0x502
 8014296:	4630      	mov	r0, r6
 8014298:	f000 fe66 	bl	8014f68 <i2c_flag_get>
 801429c:	b918      	cbnz	r0, 80142a6 <gd32_i2c_read(char*, unsigned int)+0x102>
 801429e:	f1b9 0901 	subs.w	r9, r9, #1
 80142a2:	d1f6      	bne.n	8014292 <gd32_i2c_read(char*, unsigned int)+0xee>
 80142a4:	e78e      	b.n	80141c4 <gd32_i2c_read(char*, unsigned int)+0x20>
 80142a6:	4630      	mov	r0, r6
 80142a8:	f000 fe54 	bl	8014f54 <i2c_stop_on_bus>
 80142ac:	e7db      	b.n	8014266 <gd32_i2c_read(char*, unsigned int)+0xc2>
 80142ae:	f640 73ff 	movw	r3, #4095	; 0xfff
 80142b2:	4a0b      	ldr	r2, [pc, #44]	; (80142e0 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 80142b4:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 80142b8:	0589      	lsls	r1, r1, #22
 80142ba:	d502      	bpl.n	80142c2 <gd32_i2c_read(char*, unsigned int)+0x11e>
 80142bc:	3b01      	subs	r3, #1
 80142be:	d1f9      	bne.n	80142b4 <gd32_i2c_read(char*, unsigned int)+0x110>
 80142c0:	e782      	b.n	80141c8 <gd32_i2c_read(char*, unsigned int)+0x24>
 80142c2:	2101      	movs	r1, #1
 80142c4:	4804      	ldr	r0, [pc, #16]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80142c6:	f000 fe21 	bl	8014f0c <i2c_ack_config>
 80142ca:	2101      	movs	r1, #1
 80142cc:	4802      	ldr	r0, [pc, #8]	; (80142d8 <gd32_i2c_read(char*, unsigned int)+0x134>)
 80142ce:	f000 fe26 	bl	8014f1e <i2c_ackpos_config>
 80142d2:	4628      	mov	r0, r5
 80142d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142d8:	40005400 	andmi	r5, r0, r0, lsl #8
 80142dc:	2000af14 	andcs	sl, r0, r4, lsl pc
 80142e0:	40005000 	andmi	r5, r0, r0

080142e4 <gd32_uart_begin>:
 80142e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142e6:	4604      	mov	r4, r0
 80142e8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80142ec:	461d      	mov	r5, r3
 80142ee:	460f      	mov	r7, r1
 80142f0:	4616      	mov	r6, r2
 80142f2:	f7ff fa79 	bl	80137e8 <rcu_periph_clock_enable>
 80142f6:	4b5c      	ldr	r3, [pc, #368]	; (8014468 <gd32_uart_begin+0x184>)
 80142f8:	429c      	cmp	r4, r3
 80142fa:	f000 8083 	beq.w	8014404 <gd32_uart_begin+0x120>
 80142fe:	d857      	bhi.n	80143b0 <gd32_uart_begin+0xcc>
 8014300:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014304:	429c      	cmp	r4, r3
 8014306:	d06d      	beq.n	80143e4 <gd32_uart_begin+0x100>
 8014308:	f240 7012 	movw	r0, #1810	; 0x712
 801430c:	f7ff fa6c 	bl	80137e8 <rcu_periph_clock_enable>
 8014310:	f240 6004 	movw	r0, #1540	; 0x604
 8014314:	f7ff fa68 	bl	80137e8 <rcu_periph_clock_enable>
 8014318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801431c:	2203      	movs	r2, #3
 801431e:	2118      	movs	r1, #24
 8014320:	4852      	ldr	r0, [pc, #328]	; (801446c <gd32_uart_begin+0x188>)
 8014322:	f7ff f9d1 	bl	80136c8 <gpio_init>
 8014326:	2104      	movs	r1, #4
 8014328:	4850      	ldr	r0, [pc, #320]	; (801446c <gd32_uart_begin+0x188>)
 801432a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801432e:	2203      	movs	r2, #3
 8014330:	f7ff f9ca 	bl	80136c8 <gpio_init>
 8014334:	2101      	movs	r1, #1
 8014336:	484e      	ldr	r0, [pc, #312]	; (8014470 <gd32_uart_begin+0x18c>)
 8014338:	f7ff fa1a 	bl	8013770 <gpio_pin_remap_config>
 801433c:	4620      	mov	r0, r4
 801433e:	f7ff fc9d 	bl	8013c7c <usart_deinit>
 8014342:	68e3      	ldr	r3, [r4, #12]
 8014344:	4639      	mov	r1, r7
 8014346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801434a:	60e3      	str	r3, [r4, #12]
 801434c:	4620      	mov	r0, r4
 801434e:	f7ff fcd5 	bl	8013cfc <usart_baudrate_set>
 8014352:	2e09      	cmp	r6, #9
 8014354:	bf0c      	ite	eq
 8014356:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
 801435a:	2100      	movne	r1, #0
 801435c:	4620      	mov	r0, r4
 801435e:	f7ff fcfd 	bl	8013d5c <usart_word_length_set>
 8014362:	9b06      	ldr	r3, [sp, #24]
 8014364:	4620      	mov	r0, r4
 8014366:	2b02      	cmp	r3, #2
 8014368:	bf0c      	ite	eq
 801436a:	f44f 5100 	moveq.w	r1, #8192	; 0x2000
 801436e:	2100      	movne	r1, #0
 8014370:	f7ff fcfc 	bl	8013d6c <usart_stop_bit_set>
 8014374:	2d01      	cmp	r5, #1
 8014376:	d072      	beq.n	801445e <gd32_uart_begin+0x17a>
 8014378:	2d02      	cmp	r5, #2
 801437a:	d173      	bne.n	8014464 <gd32_uart_begin+0x180>
 801437c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014380:	4620      	mov	r0, r4
 8014382:	f7ff fce3 	bl	8013d4c <usart_parity_config>
 8014386:	2100      	movs	r1, #0
 8014388:	4620      	mov	r0, r4
 801438a:	f7ff fd03 	bl	8013d94 <usart_hardware_flow_rts_config>
 801438e:	2100      	movs	r1, #0
 8014390:	4620      	mov	r0, r4
 8014392:	f7ff fd05 	bl	8013da0 <usart_hardware_flow_cts_config>
 8014396:	2104      	movs	r1, #4
 8014398:	4620      	mov	r0, r4
 801439a:	f7ff fcf5 	bl	8013d88 <usart_receive_config>
 801439e:	2108      	movs	r1, #8
 80143a0:	4620      	mov	r0, r4
 80143a2:	f7ff fceb 	bl	8013d7c <usart_transmit_config>
 80143a6:	68e3      	ldr	r3, [r4, #12]
 80143a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80143ac:	60e3      	str	r3, [r4, #12]
 80143ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143b0:	4b30      	ldr	r3, [pc, #192]	; (8014474 <gd32_uart_begin+0x190>)
 80143b2:	429c      	cmp	r4, r3
 80143b4:	d03b      	beq.n	801442e <gd32_uart_begin+0x14a>
 80143b6:	f240 600e 	movw	r0, #1550	; 0x60e
 80143ba:	f7ff fa15 	bl	80137e8 <rcu_periph_clock_enable>
 80143be:	f240 6002 	movw	r0, #1538	; 0x602
 80143c2:	f7ff fa11 	bl	80137e8 <rcu_periph_clock_enable>
 80143c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80143ca:	2203      	movs	r2, #3
 80143cc:	2118      	movs	r1, #24
 80143ce:	482a      	ldr	r0, [pc, #168]	; (8014478 <gd32_uart_begin+0x194>)
 80143d0:	f7ff f97a 	bl	80136c8 <gpio_init>
 80143d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143d8:	2203      	movs	r2, #3
 80143da:	2104      	movs	r1, #4
 80143dc:	4826      	ldr	r0, [pc, #152]	; (8014478 <gd32_uart_begin+0x194>)
 80143de:	f7ff f973 	bl	80136c8 <gpio_init>
 80143e2:	e7ab      	b.n	801433c <gd32_uart_begin+0x58>
 80143e4:	f240 7011 	movw	r0, #1809	; 0x711
 80143e8:	f7ff f9fe 	bl	80137e8 <rcu_periph_clock_enable>
 80143ec:	f240 6002 	movw	r0, #1538	; 0x602
 80143f0:	f7ff f9fa 	bl	80137e8 <rcu_periph_clock_enable>
 80143f4:	2304      	movs	r3, #4
 80143f6:	2203      	movs	r2, #3
 80143f8:	2118      	movs	r1, #24
 80143fa:	481f      	ldr	r0, [pc, #124]	; (8014478 <gd32_uart_begin+0x194>)
 80143fc:	f7ff f964 	bl	80136c8 <gpio_init>
 8014400:	2308      	movs	r3, #8
 8014402:	e7e9      	b.n	80143d8 <gd32_uart_begin+0xf4>
 8014404:	f240 7013 	movw	r0, #1811	; 0x713
 8014408:	f7ff f9ee 	bl	80137e8 <rcu_periph_clock_enable>
 801440c:	f240 6004 	movw	r0, #1540	; 0x604
 8014410:	f7ff f9ea 	bl	80137e8 <rcu_periph_clock_enable>
 8014414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014418:	2203      	movs	r2, #3
 801441a:	2118      	movs	r1, #24
 801441c:	4813      	ldr	r0, [pc, #76]	; (801446c <gd32_uart_begin+0x188>)
 801441e:	f7ff f953 	bl	80136c8 <gpio_init>
 8014422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014426:	2203      	movs	r2, #3
 8014428:	2104      	movs	r1, #4
 801442a:	4810      	ldr	r0, [pc, #64]	; (801446c <gd32_uart_begin+0x188>)
 801442c:	e7d7      	b.n	80143de <gd32_uart_begin+0xfa>
 801442e:	f240 7014 	movw	r0, #1812	; 0x714
 8014432:	f7ff f9d9 	bl	80137e8 <rcu_periph_clock_enable>
 8014436:	f240 6004 	movw	r0, #1540	; 0x604
 801443a:	f7ff f9d5 	bl	80137e8 <rcu_periph_clock_enable>
 801443e:	f240 6005 	movw	r0, #1541	; 0x605
 8014442:	f7ff f9d1 	bl	80137e8 <rcu_periph_clock_enable>
 8014446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801444a:	2203      	movs	r2, #3
 801444c:	2118      	movs	r1, #24
 801444e:	4807      	ldr	r0, [pc, #28]	; (801446c <gd32_uart_begin+0x188>)
 8014450:	f7ff f93a 	bl	80136c8 <gpio_init>
 8014454:	2304      	movs	r3, #4
 8014456:	2203      	movs	r2, #3
 8014458:	4619      	mov	r1, r3
 801445a:	4808      	ldr	r0, [pc, #32]	; (801447c <gd32_uart_begin+0x198>)
 801445c:	e7bf      	b.n	80143de <gd32_uart_begin+0xfa>
 801445e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8014462:	e78d      	b.n	8014380 <gd32_uart_begin+0x9c>
 8014464:	2100      	movs	r1, #0
 8014466:	e78b      	b.n	8014380 <gd32_uart_begin+0x9c>
 8014468:	40004c00 	andmi	r4, r0, r0, lsl #24
 801446c:	40011000 	andmi	r1, r1, r0
 8014470:	00140010 	andseq	r0, r4, r0, lsl r0
 8014474:	40005000 	andmi	r5, r0, r0
 8014478:	40010800 	andmi	r0, r1, r0, lsl #16
 801447c:	40011400 	andmi	r1, r1, r0, lsl #8

08014480 <micros_init()>:
 8014480:	4770      	bx	lr
	...

08014484 <udelay_init()>:
 8014484:	4a07      	ldr	r2, [pc, #28]	; (80144a4 <udelay_init()+0x20>)
 8014486:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 801448a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801448e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 8014492:	2200      	movs	r2, #0
 8014494:	4b04      	ldr	r3, [pc, #16]	; (80144a8 <udelay_init()+0x24>)
 8014496:	605a      	str	r2, [r3, #4]
 8014498:	681a      	ldr	r2, [r3, #0]
 801449a:	f042 0201 	orr.w	r2, r2, #1
 801449e:	601a      	str	r2, [r3, #0]
 80144a0:	4770      	bx	lr
 80144a2:	bf00      	nop
 80144a4:	e000ed00 	and	lr, r0, r0, lsl #26
 80144a8:	e0001000 	and	r1, r0, r0

080144ac <udelay(unsigned int, unsigned int)>:
 80144ac:	236c      	movs	r3, #108	; 0x6c
 80144ae:	b510      	push	{r4, lr}
 80144b0:	4358      	muls	r0, r3
 80144b2:	b909      	cbnz	r1, 80144b8 <udelay(unsigned int, unsigned int)+0xc>
 80144b4:	4b08      	ldr	r3, [pc, #32]	; (80144d8 <udelay(unsigned int, unsigned int)+0x2c>)
 80144b6:	6859      	ldr	r1, [r3, #4]
 80144b8:	2300      	movs	r3, #0
 80144ba:	4c07      	ldr	r4, [pc, #28]	; (80144d8 <udelay(unsigned int, unsigned int)+0x2c>)
 80144bc:	6862      	ldr	r2, [r4, #4]
 80144be:	4291      	cmp	r1, r2
 80144c0:	d0fc      	beq.n	80144bc <udelay(unsigned int, unsigned int)+0x10>
 80144c2:	bf28      	it	cs
 80144c4:	f103 33ff 	addcs.w	r3, r3, #4294967295	; 0xffffffff
 80144c8:	1a5b      	subs	r3, r3, r1
 80144ca:	4413      	add	r3, r2
 80144cc:	4283      	cmp	r3, r0
 80144ce:	d300      	bcc.n	80144d2 <udelay(unsigned int, unsigned int)+0x26>
 80144d0:	bd10      	pop	{r4, pc}
 80144d2:	4611      	mov	r1, r2
 80144d4:	e7f2      	b.n	80144bc <udelay(unsigned int, unsigned int)+0x10>
 80144d6:	bf00      	nop
 80144d8:	e0001000 	and	r1, r0, r0

080144dc <mac_address_get>:
 80144dc:	2102      	movs	r1, #2
 80144de:	4a07      	ldr	r2, [pc, #28]	; (80144fc <mac_address_get+0x20>)
 80144e0:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 80144e4:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 80144e8:	7001      	strb	r1, [r0, #0]
 80144ea:	7042      	strb	r2, [r0, #1]
 80144ec:	0e1a      	lsrs	r2, r3, #24
 80144ee:	7082      	strb	r2, [r0, #2]
 80144f0:	0c1a      	lsrs	r2, r3, #16
 80144f2:	70c2      	strb	r2, [r0, #3]
 80144f4:	0a1a      	lsrs	r2, r3, #8
 80144f6:	7102      	strb	r2, [r0, #4]
 80144f8:	7143      	strb	r3, [r0, #5]
 80144fa:	4770      	bx	lr
 80144fc:	1ffff000 	svcne	0x00fff000

08014500 <adc_mode_config>:
 8014500:	4b06      	ldr	r3, [pc, #24]	; (801451c <adc_mode_config+0x1c>)
 8014502:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 8014506:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 801450a:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 801450e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014512:	4302      	orrs	r2, r0
 8014514:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8014518:	4770      	bx	lr
 801451a:	bf00      	nop
 801451c:	40012000 	andmi	r2, r1, r0

08014520 <adc_special_function_config>:
 8014520:	b510      	push	{r4, lr}
 8014522:	f401 7380 	and.w	r3, r1, #256	; 0x100
 8014526:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 801452a:	f001 0102 	and.w	r1, r1, #2
 801452e:	b17a      	cbz	r2, 8014550 <adc_special_function_config+0x30>
 8014530:	b11b      	cbz	r3, 801453a <adc_special_function_config+0x1a>
 8014532:	6843      	ldr	r3, [r0, #4]
 8014534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014538:	6043      	str	r3, [r0, #4]
 801453a:	b11c      	cbz	r4, 8014544 <adc_special_function_config+0x24>
 801453c:	6843      	ldr	r3, [r0, #4]
 801453e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014542:	6043      	str	r3, [r0, #4]
 8014544:	b119      	cbz	r1, 801454e <adc_special_function_config+0x2e>
 8014546:	6883      	ldr	r3, [r0, #8]
 8014548:	f043 0302 	orr.w	r3, r3, #2
 801454c:	6083      	str	r3, [r0, #8]
 801454e:	bd10      	pop	{r4, pc}
 8014550:	b11b      	cbz	r3, 801455a <adc_special_function_config+0x3a>
 8014552:	6843      	ldr	r3, [r0, #4]
 8014554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014558:	6043      	str	r3, [r0, #4]
 801455a:	b11c      	cbz	r4, 8014564 <adc_special_function_config+0x44>
 801455c:	6843      	ldr	r3, [r0, #4]
 801455e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014562:	6043      	str	r3, [r0, #4]
 8014564:	2900      	cmp	r1, #0
 8014566:	d0f2      	beq.n	801454e <adc_special_function_config+0x2e>
 8014568:	6883      	ldr	r3, [r0, #8]
 801456a:	f023 0302 	bic.w	r3, r3, #2
 801456e:	e7ed      	b.n	801454c <adc_special_function_config+0x2c>

08014570 <adc_data_alignment_config>:
 8014570:	6883      	ldr	r3, [r0, #8]
 8014572:	b119      	cbz	r1, 801457c <adc_data_alignment_config+0xc>
 8014574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014578:	6083      	str	r3, [r0, #8]
 801457a:	4770      	bx	lr
 801457c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014580:	e7fa      	b.n	8014578 <adc_data_alignment_config+0x8>

08014582 <adc_enable>:
 8014582:	6883      	ldr	r3, [r0, #8]
 8014584:	07db      	lsls	r3, r3, #31
 8014586:	bf5e      	ittt	pl
 8014588:	6883      	ldrpl	r3, [r0, #8]
 801458a:	f043 0301 	orrpl.w	r3, r3, #1
 801458e:	6083      	strpl	r3, [r0, #8]
 8014590:	4770      	bx	lr

08014592 <adc_calibration_enable>:
 8014592:	6883      	ldr	r3, [r0, #8]
 8014594:	f100 0208 	add.w	r2, r0, #8
 8014598:	f043 0308 	orr.w	r3, r3, #8
 801459c:	6083      	str	r3, [r0, #8]
 801459e:	6813      	ldr	r3, [r2, #0]
 80145a0:	0719      	lsls	r1, r3, #28
 80145a2:	d4fc      	bmi.n	801459e <adc_calibration_enable+0xc>
 80145a4:	6883      	ldr	r3, [r0, #8]
 80145a6:	f043 0304 	orr.w	r3, r3, #4
 80145aa:	6083      	str	r3, [r0, #8]
 80145ac:	6813      	ldr	r3, [r2, #0]
 80145ae:	075b      	lsls	r3, r3, #29
 80145b0:	d4fc      	bmi.n	80145ac <adc_calibration_enable+0x1a>
 80145b2:	4770      	bx	lr

080145b4 <adc_tempsensor_vrefint_enable>:
 80145b4:	4a03      	ldr	r2, [pc, #12]	; (80145c4 <adc_tempsensor_vrefint_enable+0x10>)
 80145b6:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 80145ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80145be:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 80145c2:	4770      	bx	lr
 80145c4:	40012000 	andmi	r2, r1, r0

080145c8 <adc_channel_length_config>:
 80145c8:	2901      	cmp	r1, #1
 80145ca:	d002      	beq.n	80145d2 <adc_channel_length_config+0xa>
 80145cc:	2902      	cmp	r1, #2
 80145ce:	d00c      	beq.n	80145ea <adc_channel_length_config+0x22>
 80145d0:	4770      	bx	lr
 80145d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80145d4:	3a01      	subs	r2, #1
 80145d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80145da:	62c3      	str	r3, [r0, #44]	; 0x2c
 80145dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80145de:	0512      	lsls	r2, r2, #20
 80145e0:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 80145e4:	431a      	orrs	r2, r3
 80145e6:	62c2      	str	r2, [r0, #44]	; 0x2c
 80145e8:	4770      	bx	lr
 80145ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80145ec:	3a01      	subs	r2, #1
 80145ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80145f2:	6383      	str	r3, [r0, #56]	; 0x38
 80145f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80145f6:	0512      	lsls	r2, r2, #20
 80145f8:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80145fc:	431a      	orrs	r2, r3
 80145fe:	6382      	str	r2, [r0, #56]	; 0x38
 8014600:	4770      	bx	lr

08014602 <adc_inserted_channel_config>:
 8014602:	b530      	push	{r4, r5, lr}
 8014604:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8014606:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8014608:	f3c4 5401 	ubfx	r4, r4, #20, #2
 801460c:	1a61      	subs	r1, r4, r1
 801460e:	f06f 0404 	mvn.w	r4, #4
 8014612:	4361      	muls	r1, r4
 8014614:	241f      	movs	r4, #31
 8014616:	310f      	adds	r1, #15
 8014618:	408c      	lsls	r4, r1
 801461a:	ea25 0504 	bic.w	r5, r5, r4
 801461e:	fa02 f101 	lsl.w	r1, r2, r1
 8014622:	4329      	orrs	r1, r5
 8014624:	2a09      	cmp	r2, #9
 8014626:	6381      	str	r1, [r0, #56]	; 0x38
 8014628:	d80b      	bhi.n	8014642 <adc_inserted_channel_config+0x40>
 801462a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801462e:	2207      	movs	r2, #7
 8014630:	6904      	ldr	r4, [r0, #16]
 8014632:	408a      	lsls	r2, r1
 8014634:	ea24 0402 	bic.w	r4, r4, r2
 8014638:	fa03 f201 	lsl.w	r2, r3, r1
 801463c:	4322      	orrs	r2, r4
 801463e:	6102      	str	r2, [r0, #16]
 8014640:	bd30      	pop	{r4, r5, pc}
 8014642:	2a11      	cmp	r2, #17
 8014644:	d8fc      	bhi.n	8014640 <adc_inserted_channel_config+0x3e>
 8014646:	2407      	movs	r4, #7
 8014648:	3a0a      	subs	r2, #10
 801464a:	68c1      	ldr	r1, [r0, #12]
 801464c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014650:	4094      	lsls	r4, r2
 8014652:	ea21 0104 	bic.w	r1, r1, r4
 8014656:	fa03 f202 	lsl.w	r2, r3, r2
 801465a:	430a      	orrs	r2, r1
 801465c:	60c2      	str	r2, [r0, #12]
 801465e:	e7ef      	b.n	8014640 <adc_inserted_channel_config+0x3e>

08014660 <adc_external_trigger_source_config>:
 8014660:	2901      	cmp	r1, #1
 8014662:	d002      	beq.n	801466a <adc_external_trigger_source_config+0xa>
 8014664:	2902      	cmp	r1, #2
 8014666:	d008      	beq.n	801467a <adc_external_trigger_source_config+0x1a>
 8014668:	4770      	bx	lr
 801466a:	6883      	ldr	r3, [r0, #8]
 801466c:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8014670:	6083      	str	r3, [r0, #8]
 8014672:	6883      	ldr	r3, [r0, #8]
 8014674:	431a      	orrs	r2, r3
 8014676:	6082      	str	r2, [r0, #8]
 8014678:	4770      	bx	lr
 801467a:	6883      	ldr	r3, [r0, #8]
 801467c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014680:	e7f6      	b.n	8014670 <adc_external_trigger_source_config+0x10>

08014682 <adc_external_trigger_config>:
 8014682:	f001 0301 	and.w	r3, r1, #1
 8014686:	f001 0102 	and.w	r1, r1, #2
 801468a:	b152      	cbz	r2, 80146a2 <adc_external_trigger_config+0x20>
 801468c:	b11b      	cbz	r3, 8014696 <adc_external_trigger_config+0x14>
 801468e:	6883      	ldr	r3, [r0, #8]
 8014690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014694:	6083      	str	r3, [r0, #8]
 8014696:	b119      	cbz	r1, 80146a0 <adc_external_trigger_config+0x1e>
 8014698:	6883      	ldr	r3, [r0, #8]
 801469a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801469e:	6083      	str	r3, [r0, #8]
 80146a0:	4770      	bx	lr
 80146a2:	b11b      	cbz	r3, 80146ac <adc_external_trigger_config+0x2a>
 80146a4:	6883      	ldr	r3, [r0, #8]
 80146a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80146aa:	6083      	str	r3, [r0, #8]
 80146ac:	2900      	cmp	r1, #0
 80146ae:	d0f7      	beq.n	80146a0 <adc_external_trigger_config+0x1e>
 80146b0:	6883      	ldr	r3, [r0, #8]
 80146b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80146b6:	e7f2      	b.n	801469e <adc_external_trigger_config+0x1c>

080146b8 <adc_software_trigger_enable>:
 80146b8:	07ca      	lsls	r2, r1, #31
 80146ba:	bf42      	ittt	mi
 80146bc:	6883      	ldrmi	r3, [r0, #8]
 80146be:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 80146c2:	6083      	strmi	r3, [r0, #8]
 80146c4:	078b      	lsls	r3, r1, #30
 80146c6:	bf42      	ittt	mi
 80146c8:	6883      	ldrmi	r3, [r0, #8]
 80146ca:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 80146ce:	6083      	strmi	r3, [r0, #8]
 80146d0:	4770      	bx	lr

080146d2 <enet_delay>:
 80146d2:	2300      	movs	r3, #0
 80146d4:	b082      	sub	sp, #8
 80146d6:	9301      	str	r3, [sp, #4]
 80146d8:	9001      	str	r0, [sp, #4]
 80146da:	9b01      	ldr	r3, [sp, #4]
 80146dc:	b90b      	cbnz	r3, 80146e2 <enet_delay+0x10>
 80146de:	b002      	add	sp, #8
 80146e0:	4770      	bx	lr
 80146e2:	9b01      	ldr	r3, [sp, #4]
 80146e4:	3b01      	subs	r3, #1
 80146e6:	9301      	str	r3, [sp, #4]
 80146e8:	e7f7      	b.n	80146da <enet_delay+0x8>
	...

080146ec <enet_software_reset>:
 80146ec:	4b07      	ldr	r3, [pc, #28]	; (801470c <enet_software_reset+0x20>)
 80146ee:	681a      	ldr	r2, [r3, #0]
 80146f0:	f042 0201 	orr.w	r2, r2, #1
 80146f4:	601a      	str	r2, [r3, #0]
 80146f6:	4a06      	ldr	r2, [pc, #24]	; (8014710 <enet_software_reset+0x24>)
 80146f8:	6819      	ldr	r1, [r3, #0]
 80146fa:	07c9      	lsls	r1, r1, #31
 80146fc:	d501      	bpl.n	8014702 <enet_software_reset+0x16>
 80146fe:	3a01      	subs	r2, #1
 8014700:	d1fa      	bne.n	80146f8 <enet_software_reset+0xc>
 8014702:	6818      	ldr	r0, [r3, #0]
 8014704:	43c0      	mvns	r0, r0
 8014706:	f000 0001 	and.w	r0, r0, #1
 801470a:	4770      	bx	lr
 801470c:	40029000 	andmi	r9, r2, r0
 8014710:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014714 <enet_descriptors_chain_init>:
 8014714:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 8014718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801471a:	4a19      	ldr	r2, [pc, #100]	; (8014780 <enet_descriptors_chain_init+0x6c>)
 801471c:	d125      	bne.n	801476a <enet_descriptors_chain_init+0x56>
 801471e:	2500      	movs	r5, #0
 8014720:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8014724:	2002      	movs	r0, #2
 8014726:	4b17      	ldr	r3, [pc, #92]	; (8014784 <enet_descriptors_chain_init+0x70>)
 8014728:	4c17      	ldr	r4, [pc, #92]	; (8014788 <enet_descriptors_chain_init+0x74>)
 801472a:	6113      	str	r3, [r2, #16]
 801472c:	4a17      	ldr	r2, [pc, #92]	; (801478c <enet_descriptors_chain_init+0x78>)
 801472e:	6013      	str	r3, [r2, #0]
 8014730:	2200      	movs	r2, #0
 8014732:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 8014736:	4916      	ldr	r1, [pc, #88]	; (8014790 <enet_descriptors_chain_init+0x7c>)
 8014738:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801473c:	600a      	str	r2, [r1, #0]
 801473e:	4915      	ldr	r1, [pc, #84]	; (8014794 <enet_descriptors_chain_init+0x80>)
 8014740:	600a      	str	r2, [r1, #0]
 8014742:	f103 0110 	add.w	r1, r3, #16
 8014746:	fb0e 4702 	mla	r7, lr, r2, r4
 801474a:	f841 7c08 	str.w	r7, [r1, #-8]
 801474e:	4594      	cmp	ip, r2
 8014750:	bf94      	ite	ls
 8014752:	461f      	movls	r7, r3
 8014754:	460f      	movhi	r7, r1
 8014756:	3201      	adds	r2, #1
 8014758:	4290      	cmp	r0, r2
 801475a:	e941 6504 	strd	r6, r5, [r1, #-16]
 801475e:	f841 7c04 	str.w	r7, [r1, #-4]
 8014762:	f101 0110 	add.w	r1, r1, #16
 8014766:	d1ee      	bne.n	8014746 <enet_descriptors_chain_init+0x32>
 8014768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801476a:	4b0b      	ldr	r3, [pc, #44]	; (8014798 <enet_descriptors_chain_init+0x84>)
 801476c:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8014770:	60d3      	str	r3, [r2, #12]
 8014772:	4a0a      	ldr	r2, [pc, #40]	; (801479c <enet_descriptors_chain_init+0x88>)
 8014774:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014778:	2006      	movs	r0, #6
 801477a:	4c09      	ldr	r4, [pc, #36]	; (80147a0 <enet_descriptors_chain_init+0x8c>)
 801477c:	6013      	str	r3, [r2, #0]
 801477e:	e7d7      	b.n	8014730 <enet_descriptors_chain_init+0x1c>
 8014780:	40029000 	andmi	r9, r2, r0
 8014784:	2000df64 	andcs	sp, r0, r4, ror #30
 8014788:	2000d37c 	andcs	sp, r0, ip, ror r3
 801478c:	2000af24 	andcs	sl, r0, r4, lsr #30
 8014790:	2000af18 	andcs	sl, r0, r8, lsl pc
 8014794:	2000af1c 	andcs	sl, r0, ip, lsl pc
 8014798:	2000d31c 	andcs	sp, r0, ip, lsl r3
 801479c:	2000af20 	andcs	sl, r0, r0, lsr #30
 80147a0:	2000af64 	andcs	sl, r0, r4, ror #30

080147a4 <enet_frame_receive>:
 80147a4:	4a1d      	ldr	r2, [pc, #116]	; (801481c <enet_frame_receive+0x78>)
 80147a6:	b510      	push	{r4, lr}
 80147a8:	6813      	ldr	r3, [r2, #0]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	db33      	blt.n	8014818 <enet_frame_receive+0x74>
 80147b0:	b970      	cbnz	r0, 80147d0 <enet_frame_receive+0x2c>
 80147b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80147b6:	6813      	ldr	r3, [r2, #0]
 80147b8:	6019      	str	r1, [r3, #0]
 80147ba:	4919      	ldr	r1, [pc, #100]	; (8014820 <enet_frame_receive+0x7c>)
 80147bc:	6948      	ldr	r0, [r1, #20]
 80147be:	0604      	lsls	r4, r0, #24
 80147c0:	d419      	bmi.n	80147f6 <enet_frame_receive+0x52>
 80147c2:	6859      	ldr	r1, [r3, #4]
 80147c4:	0448      	lsls	r0, r1, #17
 80147c6:	d51b      	bpl.n	8014800 <enet_frame_receive+0x5c>
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	2001      	movs	r0, #1
 80147cc:	6013      	str	r3, [r2, #0]
 80147ce:	bd10      	pop	{r4, pc}
 80147d0:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 80147d4:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80147d8:	d11e      	bne.n	8014818 <enet_frame_receive+0x74>
 80147da:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80147de:	3b04      	subs	r3, #4
 80147e0:	428b      	cmp	r3, r1
 80147e2:	d819      	bhi.n	8014818 <enet_frame_receive+0x74>
 80147e4:	2100      	movs	r1, #0
 80147e6:	4299      	cmp	r1, r3
 80147e8:	6814      	ldr	r4, [r2, #0]
 80147ea:	d2e2      	bcs.n	80147b2 <enet_frame_receive+0xe>
 80147ec:	68a4      	ldr	r4, [r4, #8]
 80147ee:	5d0c      	ldrb	r4, [r1, r4]
 80147f0:	5444      	strb	r4, [r0, r1]
 80147f2:	3101      	adds	r1, #1
 80147f4:	e7f7      	b.n	80147e6 <enet_frame_receive+0x42>
 80147f6:	2080      	movs	r0, #128	; 0x80
 80147f8:	6148      	str	r0, [r1, #20]
 80147fa:	2000      	movs	r0, #0
 80147fc:	6088      	str	r0, [r1, #8]
 80147fe:	e7e0      	b.n	80147c2 <enet_frame_receive+0x1e>
 8014800:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8014804:	4906      	ldr	r1, [pc, #24]	; (8014820 <enet_frame_receive+0x7c>)
 8014806:	bf05      	ittet	eq
 8014808:	3310      	addeq	r3, #16
 801480a:	6809      	ldreq	r1, [r1, #0]
 801480c:	68cb      	ldrne	r3, [r1, #12]
 801480e:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8014812:	bf08      	it	eq
 8014814:	185b      	addeq	r3, r3, r1
 8014816:	e7d8      	b.n	80147ca <enet_frame_receive+0x26>
 8014818:	2000      	movs	r0, #0
 801481a:	e7d8      	b.n	80147ce <enet_frame_receive+0x2a>
 801481c:	2000af20 	andcs	sl, r0, r0, lsr #30
 8014820:	40029000 	andmi	r9, r2, r0

08014824 <enet_frame_transmit>:
 8014824:	4a1e      	ldr	r2, [pc, #120]	; (80148a0 <enet_frame_transmit+0x7c>)
 8014826:	b530      	push	{r4, r5, lr}
 8014828:	6813      	ldr	r3, [r2, #0]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	db34      	blt.n	801489a <enet_frame_transmit+0x76>
 8014830:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8014834:	4299      	cmp	r1, r3
 8014836:	d830      	bhi.n	801489a <enet_frame_transmit+0x76>
 8014838:	b9e8      	cbnz	r0, 8014876 <enet_frame_transmit+0x52>
 801483a:	6813      	ldr	r3, [r2, #0]
 801483c:	4819      	ldr	r0, [pc, #100]	; (80148a4 <enet_frame_transmit+0x80>)
 801483e:	6059      	str	r1, [r3, #4]
 8014840:	6819      	ldr	r1, [r3, #0]
 8014842:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8014846:	6019      	str	r1, [r3, #0]
 8014848:	6941      	ldr	r1, [r0, #20]
 801484a:	6944      	ldr	r4, [r0, #20]
 801484c:	f001 0104 	and.w	r1, r1, #4
 8014850:	f004 0420 	and.w	r4, r4, #32
 8014854:	4321      	orrs	r1, r4
 8014856:	d110      	bne.n	801487a <enet_frame_transmit+0x56>
 8014858:	6819      	ldr	r1, [r3, #0]
 801485a:	02c8      	lsls	r0, r1, #11
 801485c:	d511      	bpl.n	8014882 <enet_frame_transmit+0x5e>
 801485e:	68db      	ldr	r3, [r3, #12]
 8014860:	2001      	movs	r0, #1
 8014862:	6013      	str	r3, [r2, #0]
 8014864:	bd30      	pop	{r4, r5, pc}
 8014866:	5cc5      	ldrb	r5, [r0, r3]
 8014868:	68a4      	ldr	r4, [r4, #8]
 801486a:	551d      	strb	r5, [r3, r4]
 801486c:	3301      	adds	r3, #1
 801486e:	428b      	cmp	r3, r1
 8014870:	6814      	ldr	r4, [r2, #0]
 8014872:	d1f8      	bne.n	8014866 <enet_frame_transmit+0x42>
 8014874:	e7e1      	b.n	801483a <enet_frame_transmit+0x16>
 8014876:	2300      	movs	r3, #0
 8014878:	e7f9      	b.n	801486e <enet_frame_transmit+0x4a>
 801487a:	6141      	str	r1, [r0, #20]
 801487c:	2100      	movs	r1, #0
 801487e:	6041      	str	r1, [r0, #4]
 8014880:	e7ea      	b.n	8014858 <enet_frame_transmit+0x34>
 8014882:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8014886:	4907      	ldr	r1, [pc, #28]	; (80148a4 <enet_frame_transmit+0x80>)
 8014888:	bf05      	ittet	eq
 801488a:	3310      	addeq	r3, #16
 801488c:	6809      	ldreq	r1, [r1, #0]
 801488e:	690b      	ldrne	r3, [r1, #16]
 8014890:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8014894:	bf08      	it	eq
 8014896:	185b      	addeq	r3, r3, r1
 8014898:	e7e2      	b.n	8014860 <enet_frame_transmit+0x3c>
 801489a:	2000      	movs	r0, #0
 801489c:	e7e2      	b.n	8014864 <enet_frame_transmit+0x40>
 801489e:	bf00      	nop
 80148a0:	2000af24 	andcs	sl, r0, r4, lsr #30
 80148a4:	40029000 	andmi	r9, r2, r0

080148a8 <enet_transmit_checksum_config>:
 80148a8:	6803      	ldr	r3, [r0, #0]
 80148aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80148ae:	430b      	orrs	r3, r1
 80148b0:	6003      	str	r3, [r0, #0]
 80148b2:	4770      	bx	lr

080148b4 <enet_mac_address_set>:
 80148b4:	888a      	ldrh	r2, [r1, #4]
 80148b6:	4b03      	ldr	r3, [pc, #12]	; (80148c4 <enet_mac_address_set+0x10>)
 80148b8:	50c2      	str	r2, [r0, r3]
 80148ba:	680a      	ldr	r2, [r1, #0]
 80148bc:	3304      	adds	r3, #4
 80148be:	50c2      	str	r2, [r0, r3]
 80148c0:	4770      	bx	lr
 80148c2:	bf00      	nop
 80148c4:	40028040 	andmi	r8, r2, r0, asr #32

080148c8 <enet_rx_enable>:
 80148c8:	4a05      	ldr	r2, [pc, #20]	; (80148e0 <enet_rx_enable+0x18>)
 80148ca:	6813      	ldr	r3, [r2, #0]
 80148cc:	f043 0304 	orr.w	r3, r3, #4
 80148d0:	6013      	str	r3, [r2, #0]
 80148d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80148d6:	6993      	ldr	r3, [r2, #24]
 80148d8:	f043 0302 	orr.w	r3, r3, #2
 80148dc:	6193      	str	r3, [r2, #24]
 80148de:	4770      	bx	lr
 80148e0:	40028000 	andmi	r8, r2, r0

080148e4 <enet_phy_write_read>:
 80148e4:	b530      	push	{r4, r5, lr}
 80148e6:	4604      	mov	r4, r0
 80148e8:	4d13      	ldr	r5, [pc, #76]	; (8014938 <enet_phy_write_read+0x54>)
 80148ea:	0192      	lsls	r2, r2, #6
 80148ec:	6928      	ldr	r0, [r5, #16]
 80148ee:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80148f2:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 80148f6:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 80148fa:	4302      	orrs	r2, r0
 80148fc:	02c9      	lsls	r1, r1, #11
 80148fe:	b289      	uxth	r1, r1
 8014900:	2c02      	cmp	r4, #2
 8014902:	ea42 0204 	orr.w	r2, r2, r4
 8014906:	ea42 0201 	orr.w	r2, r2, r1
 801490a:	bf08      	it	eq
 801490c:	8819      	ldrheq	r1, [r3, #0]
 801490e:	f042 0201 	orr.w	r2, r2, #1
 8014912:	bf08      	it	eq
 8014914:	6169      	streq	r1, [r5, #20]
 8014916:	612a      	str	r2, [r5, #16]
 8014918:	4907      	ldr	r1, [pc, #28]	; (8014938 <enet_phy_write_read+0x54>)
 801491a:	4a08      	ldr	r2, [pc, #32]	; (801493c <enet_phy_write_read+0x58>)
 801491c:	6908      	ldr	r0, [r1, #16]
 801491e:	07c0      	lsls	r0, r0, #31
 8014920:	d501      	bpl.n	8014926 <enet_phy_write_read+0x42>
 8014922:	3a01      	subs	r2, #1
 8014924:	d1fa      	bne.n	801491c <enet_phy_write_read+0x38>
 8014926:	690a      	ldr	r2, [r1, #16]
 8014928:	43d2      	mvns	r2, r2
 801492a:	f002 0001 	and.w	r0, r2, #1
 801492e:	b90c      	cbnz	r4, 8014934 <enet_phy_write_read+0x50>
 8014930:	694a      	ldr	r2, [r1, #20]
 8014932:	801a      	strh	r2, [r3, #0]
 8014934:	bd30      	pop	{r4, r5, pc}
 8014936:	bf00      	nop
 8014938:	40028000 	andmi	r8, r2, r0
 801493c:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014940 <enet_phy_config>:
 8014940:	4b22      	ldr	r3, [pc, #136]	; (80149cc <enet_phy_config+0x8c>)
 8014942:	b513      	push	{r0, r1, r4, lr}
 8014944:	2001      	movs	r0, #1
 8014946:	691c      	ldr	r4, [r3, #16]
 8014948:	f7ff f814 	bl	8013974 <rcu_clock_freq_get>
 801494c:	4b20      	ldr	r3, [pc, #128]	; (80149d0 <enet_phy_config+0x90>)
 801494e:	4a21      	ldr	r2, [pc, #132]	; (80149d4 <enet_phy_config+0x94>)
 8014950:	4403      	add	r3, r0
 8014952:	4293      	cmp	r3, r2
 8014954:	f024 041c 	bic.w	r4, r4, #28
 8014958:	d220      	bcs.n	801499c <enet_phy_config+0x5c>
 801495a:	f044 0408 	orr.w	r4, r4, #8
 801495e:	4b1b      	ldr	r3, [pc, #108]	; (80149cc <enet_phy_config+0x8c>)
 8014960:	2200      	movs	r2, #0
 8014962:	611c      	str	r4, [r3, #16]
 8014964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014968:	2101      	movs	r1, #1
 801496a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801496e:	2002      	movs	r0, #2
 8014970:	f10d 0306 	add.w	r3, sp, #6
 8014974:	f7ff ffb6 	bl	80148e4 <enet_phy_write_read>
 8014978:	b310      	cbz	r0, 80149c0 <enet_phy_config+0x80>
 801497a:	2200      	movs	r2, #0
 801497c:	4816      	ldr	r0, [pc, #88]	; (80149d8 <enet_phy_config+0x98>)
 801497e:	f7ff fea8 	bl	80146d2 <enet_delay>
 8014982:	2101      	movs	r1, #1
 8014984:	4610      	mov	r0, r2
 8014986:	f10d 0306 	add.w	r3, sp, #6
 801498a:	f7ff ffab 	bl	80148e4 <enet_phy_write_read>
 801498e:	b1b8      	cbz	r0, 80149c0 <enet_phy_config+0x80>
 8014990:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014994:	43c0      	mvns	r0, r0
 8014996:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 801499a:	e012      	b.n	80149c2 <enet_phy_config+0x82>
 801499c:	4b0f      	ldr	r3, [pc, #60]	; (80149dc <enet_phy_config+0x9c>)
 801499e:	4a10      	ldr	r2, [pc, #64]	; (80149e0 <enet_phy_config+0xa0>)
 80149a0:	4403      	add	r3, r0
 80149a2:	4293      	cmp	r3, r2
 80149a4:	d802      	bhi.n	80149ac <enet_phy_config+0x6c>
 80149a6:	f044 040c 	orr.w	r4, r4, #12
 80149aa:	e7d8      	b.n	801495e <enet_phy_config+0x1e>
 80149ac:	4b0d      	ldr	r3, [pc, #52]	; (80149e4 <enet_phy_config+0xa4>)
 80149ae:	4a0e      	ldr	r2, [pc, #56]	; (80149e8 <enet_phy_config+0xa8>)
 80149b0:	4403      	add	r3, r0
 80149b2:	4293      	cmp	r3, r2
 80149b4:	d9d3      	bls.n	801495e <enet_phy_config+0x1e>
 80149b6:	4b0d      	ldr	r3, [pc, #52]	; (80149ec <enet_phy_config+0xac>)
 80149b8:	4a0d      	ldr	r2, [pc, #52]	; (80149f0 <enet_phy_config+0xb0>)
 80149ba:	4403      	add	r3, r0
 80149bc:	4293      	cmp	r3, r2
 80149be:	d902      	bls.n	80149c6 <enet_phy_config+0x86>
 80149c0:	2000      	movs	r0, #0
 80149c2:	b002      	add	sp, #8
 80149c4:	bd10      	pop	{r4, pc}
 80149c6:	f044 0404 	orr.w	r4, r4, #4
 80149ca:	e7c8      	b.n	801495e <enet_phy_config+0x1e>
 80149cc:	40028000 	andmi	r8, r2, r0
 80149d0:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 80149d4:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 80149d8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 80149dc:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 80149e0:	017d783f 	cmneq	sp, pc, lsr r8
 80149e4:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 80149e8:	01c9c37f 	biceq	ip, r9, pc, ror r3
 80149ec:	faa2b580 	blx	68c1ff4 <__stack_size+0x68c07f4>
 80149f0:	0112a880 	tsteq	r2, r0, lsl #17

080149f4 <enet_init>:
 80149f4:	2300      	movs	r3, #0
 80149f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149f8:	4604      	mov	r4, r0
 80149fa:	460d      	mov	r5, r1
 80149fc:	4616      	mov	r6, r2
 80149fe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014a02:	f7ff ff9d 	bl	8014940 <enet_phy_config>
 8014a06:	2800      	cmp	r0, #0
 8014a08:	d037      	beq.n	8014a7a <enet_init+0x86>
 8014a0a:	4b3b      	ldr	r3, [pc, #236]	; (8014af8 <enet_init+0x104>)
 8014a0c:	4a3b      	ldr	r2, [pc, #236]	; (8014afc <enet_init+0x108>)
 8014a0e:	6819      	ldr	r1, [r3, #0]
 8014a10:	2c01      	cmp	r4, #1
 8014a12:	ea02 0201 	and.w	r2, r2, r1
 8014a16:	601a      	str	r2, [r3, #0]
 8014a18:	f04f 0200 	mov.w	r2, #0
 8014a1c:	605a      	str	r2, [r3, #4]
 8014a1e:	609a      	str	r2, [r3, #8]
 8014a20:	60da      	str	r2, [r3, #12]
 8014a22:	6999      	ldr	r1, [r3, #24]
 8014a24:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8014a28:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8014a2c:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8014a30:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8014a34:	6199      	str	r1, [r3, #24]
 8014a36:	4932      	ldr	r1, [pc, #200]	; (8014b00 <enet_init+0x10c>)
 8014a38:	61da      	str	r2, [r3, #28]
 8014a3a:	6988      	ldr	r0, [r1, #24]
 8014a3c:	4b31      	ldr	r3, [pc, #196]	; (8014b04 <enet_init+0x110>)
 8014a3e:	ea03 0300 	and.w	r3, r3, r0
 8014a42:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8014a46:	618b      	str	r3, [r1, #24]
 8014a48:	680b      	ldr	r3, [r1, #0]
 8014a4a:	4b2f      	ldr	r3, [pc, #188]	; (8014b08 <enet_init+0x114>)
 8014a4c:	600b      	str	r3, [r1, #0]
 8014a4e:	d01e      	beq.n	8014a8e <enet_init+0x9a>
 8014a50:	08e3      	lsrs	r3, r4, #3
 8014a52:	0861      	lsrs	r1, r4, #1
 8014a54:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8014a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a5c:	430b      	orrs	r3, r1
 8014a5e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014a62:	2101      	movs	r1, #1
 8014a64:	2002      	movs	r0, #2
 8014a66:	f10d 0306 	add.w	r3, sp, #6
 8014a6a:	f7ff ff3b 	bl	80148e4 <enet_phy_write_read>
 8014a6e:	b158      	cbz	r0, 8014a88 <enet_init+0x94>
 8014a70:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014a74:	f7ff fe2d 	bl	80146d2 <enet_delay>
 8014a78:	e05f      	b.n	8014b3a <enet_init+0x146>
 8014a7a:	4824      	ldr	r0, [pc, #144]	; (8014b0c <enet_init+0x118>)
 8014a7c:	f7ff fe29 	bl	80146d2 <enet_delay>
 8014a80:	f7ff ff5e 	bl	8014940 <enet_phy_config>
 8014a84:	2800      	cmp	r0, #0
 8014a86:	d1c0      	bne.n	8014a0a <enet_init+0x16>
 8014a88:	2000      	movs	r0, #0
 8014a8a:	b003      	add	sp, #12
 8014a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a8e:	4614      	mov	r4, r2
 8014a90:	4f1f      	ldr	r7, [pc, #124]	; (8014b10 <enet_init+0x11c>)
 8014a92:	2201      	movs	r2, #1
 8014a94:	2000      	movs	r0, #0
 8014a96:	4611      	mov	r1, r2
 8014a98:	f10d 0306 	add.w	r3, sp, #6
 8014a9c:	f7ff ff22 	bl	80148e4 <enet_phy_write_read>
 8014aa0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014aa4:	3401      	adds	r4, #1
 8014aa6:	f002 0204 	and.w	r2, r2, #4
 8014aaa:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014aae:	b912      	cbnz	r2, 8014ab6 <enet_init+0xc2>
 8014ab0:	42bc      	cmp	r4, r7
 8014ab2:	d1ee      	bne.n	8014a92 <enet_init+0x9e>
 8014ab4:	e7e8      	b.n	8014a88 <enet_init+0x94>
 8014ab6:	42bc      	cmp	r4, r7
 8014ab8:	d0e6      	beq.n	8014a88 <enet_init+0x94>
 8014aba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014abe:	2101      	movs	r1, #1
 8014ac0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014ac4:	2002      	movs	r0, #2
 8014ac6:	2200      	movs	r2, #0
 8014ac8:	f7ff ff0c 	bl	80148e4 <enet_phy_write_read>
 8014acc:	2800      	cmp	r0, #0
 8014ace:	d0db      	beq.n	8014a88 <enet_init+0x94>
 8014ad0:	2400      	movs	r4, #0
 8014ad2:	4f0f      	ldr	r7, [pc, #60]	; (8014b10 <enet_init+0x11c>)
 8014ad4:	2201      	movs	r2, #1
 8014ad6:	2000      	movs	r0, #0
 8014ad8:	4611      	mov	r1, r2
 8014ada:	f10d 0306 	add.w	r3, sp, #6
 8014ade:	f7ff ff01 	bl	80148e4 <enet_phy_write_read>
 8014ae2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014ae6:	3401      	adds	r4, #1
 8014ae8:	f002 0220 	and.w	r2, r2, #32
 8014aec:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014af0:	b982      	cbnz	r2, 8014b14 <enet_init+0x120>
 8014af2:	42bc      	cmp	r4, r7
 8014af4:	d1ee      	bne.n	8014ad4 <enet_init+0xe0>
 8014af6:	e7c7      	b.n	8014a88 <enet_init+0x94>
 8014af8:	40028000 	andmi	r8, r2, r0
 8014afc:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8014b00:	40029000 	andmi	r9, r2, r0
 8014b04:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8014b08:	02c16000 	sbceq	r6, r1, #0
 8014b0c:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8014b10:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8014b14:	42bc      	cmp	r4, r7
 8014b16:	d0b7      	beq.n	8014a88 <enet_init+0x94>
 8014b18:	2101      	movs	r1, #1
 8014b1a:	2210      	movs	r2, #16
 8014b1c:	2000      	movs	r0, #0
 8014b1e:	f7ff fee1 	bl	80148e4 <enet_phy_write_read>
 8014b22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014b26:	f013 0f04 	tst.w	r3, #4
 8014b2a:	bf14      	ite	ne
 8014b2c:	f44f 6400 	movne.w	r4, #2048	; 0x800
 8014b30:	2400      	moveq	r4, #0
 8014b32:	0799      	lsls	r1, r3, #30
 8014b34:	d401      	bmi.n	8014b3a <enet_init+0x146>
 8014b36:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8014b3a:	4b64      	ldr	r3, [pc, #400]	; (8014ccc <enet_init+0x2d8>)
 8014b3c:	056a      	lsls	r2, r5, #21
 8014b3e:	6818      	ldr	r0, [r3, #0]
 8014b40:	f420 40b0 	bic.w	r0, r0, #22528	; 0x5800
 8014b44:	ea44 0400 	orr.w	r4, r4, r0
 8014b48:	601c      	str	r4, [r3, #0]
 8014b4a:	d50c      	bpl.n	8014b66 <enet_init+0x172>
 8014b4c:	681a      	ldr	r2, [r3, #0]
 8014b4e:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8014b52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014b56:	601a      	str	r2, [r3, #0]
 8014b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b5c:	6999      	ldr	r1, [r3, #24]
 8014b5e:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
 8014b62:	430d      	orrs	r5, r1
 8014b64:	619d      	str	r5, [r3, #24]
 8014b66:	4959      	ldr	r1, [pc, #356]	; (8014ccc <enet_init+0x2d8>)
 8014b68:	4b59      	ldr	r3, [pc, #356]	; (8014cd0 <enet_init+0x2dc>)
 8014b6a:	684a      	ldr	r2, [r1, #4]
 8014b6c:	4316      	orrs	r6, r2
 8014b6e:	604e      	str	r6, [r1, #4]
 8014b70:	681a      	ldr	r2, [r3, #0]
 8014b72:	07d7      	lsls	r7, r2, #31
 8014b74:	d510      	bpl.n	8014b98 <enet_init+0x1a4>
 8014b76:	685a      	ldr	r2, [r3, #4]
 8014b78:	680c      	ldr	r4, [r1, #0]
 8014b7a:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8014b7e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8014b82:	4320      	orrs	r0, r4
 8014b84:	6008      	str	r0, [r1, #0]
 8014b86:	4853      	ldr	r0, [pc, #332]	; (8014cd4 <enet_init+0x2e0>)
 8014b88:	0892      	lsrs	r2, r2, #2
 8014b8a:	6981      	ldr	r1, [r0, #24]
 8014b8c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8014b90:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8014b94:	430a      	orrs	r2, r1
 8014b96:	6182      	str	r2, [r0, #24]
 8014b98:	681a      	ldr	r2, [r3, #0]
 8014b9a:	0796      	lsls	r6, r2, #30
 8014b9c:	d508      	bpl.n	8014bb0 <enet_init+0x1bc>
 8014b9e:	494d      	ldr	r1, [pc, #308]	; (8014cd4 <enet_init+0x2e0>)
 8014ba0:	6898      	ldr	r0, [r3, #8]
 8014ba2:	680a      	ldr	r2, [r1, #0]
 8014ba4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8014ba8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014bac:	4302      	orrs	r2, r0
 8014bae:	600a      	str	r2, [r1, #0]
 8014bb0:	681a      	ldr	r2, [r3, #0]
 8014bb2:	0755      	lsls	r5, r2, #29
 8014bb4:	d508      	bpl.n	8014bc8 <enet_init+0x1d4>
 8014bb6:	4947      	ldr	r1, [pc, #284]	; (8014cd4 <enet_init+0x2e0>)
 8014bb8:	68d8      	ldr	r0, [r3, #12]
 8014bba:	680a      	ldr	r2, [r1, #0]
 8014bbc:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8014bc0:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8014bc4:	4302      	orrs	r2, r0
 8014bc6:	600a      	str	r2, [r1, #0]
 8014bc8:	681a      	ldr	r2, [r3, #0]
 8014bca:	0714      	lsls	r4, r2, #28
 8014bcc:	d508      	bpl.n	8014be0 <enet_init+0x1ec>
 8014bce:	4941      	ldr	r1, [pc, #260]	; (8014cd4 <enet_init+0x2e0>)
 8014bd0:	6918      	ldr	r0, [r3, #16]
 8014bd2:	680a      	ldr	r2, [r1, #0]
 8014bd4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8014bd8:	f022 0202 	bic.w	r2, r2, #2
 8014bdc:	4302      	orrs	r2, r0
 8014bde:	600a      	str	r2, [r1, #0]
 8014be0:	681a      	ldr	r2, [r3, #0]
 8014be2:	06d0      	lsls	r0, r2, #27
 8014be4:	d506      	bpl.n	8014bf4 <enet_init+0x200>
 8014be6:	493b      	ldr	r1, [pc, #236]	; (8014cd4 <enet_init+0x2e0>)
 8014be8:	4a3b      	ldr	r2, [pc, #236]	; (8014cd8 <enet_init+0x2e4>)
 8014bea:	6988      	ldr	r0, [r1, #24]
 8014bec:	4002      	ands	r2, r0
 8014bee:	6958      	ldr	r0, [r3, #20]
 8014bf0:	4302      	orrs	r2, r0
 8014bf2:	618a      	str	r2, [r1, #24]
 8014bf4:	681a      	ldr	r2, [r3, #0]
 8014bf6:	0691      	lsls	r1, r2, #26
 8014bf8:	d508      	bpl.n	8014c0c <enet_init+0x218>
 8014bfa:	4936      	ldr	r1, [pc, #216]	; (8014cd4 <enet_init+0x2e0>)
 8014bfc:	6998      	ldr	r0, [r3, #24]
 8014bfe:	698a      	ldr	r2, [r1, #24]
 8014c00:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8014c04:	f022 0204 	bic.w	r2, r2, #4
 8014c08:	4302      	orrs	r2, r0
 8014c0a:	618a      	str	r2, [r1, #24]
 8014c0c:	681a      	ldr	r2, [r3, #0]
 8014c0e:	0652      	lsls	r2, r2, #25
 8014c10:	d506      	bpl.n	8014c20 <enet_init+0x22c>
 8014c12:	492e      	ldr	r1, [pc, #184]	; (8014ccc <enet_init+0x2d8>)
 8014c14:	69d8      	ldr	r0, [r3, #28]
 8014c16:	69ca      	ldr	r2, [r1, #28]
 8014c18:	0c52      	lsrs	r2, r2, #17
 8014c1a:	0452      	lsls	r2, r2, #17
 8014c1c:	4302      	orrs	r2, r0
 8014c1e:	61ca      	str	r2, [r1, #28]
 8014c20:	681a      	ldr	r2, [r3, #0]
 8014c22:	0617      	lsls	r7, r2, #24
 8014c24:	d517      	bpl.n	8014c56 <enet_init+0x262>
 8014c26:	4c29      	ldr	r4, [pc, #164]	; (8014ccc <enet_init+0x2d8>)
 8014c28:	6a1a      	ldr	r2, [r3, #32]
 8014c2a:	69a0      	ldr	r0, [r4, #24]
 8014c2c:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8014c30:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8014c34:	0400      	lsls	r0, r0, #16
 8014c36:	0c00      	lsrs	r0, r0, #16
 8014c38:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8014c3c:	4301      	orrs	r1, r0
 8014c3e:	4825      	ldr	r0, [pc, #148]	; (8014cd4 <enet_init+0x2e0>)
 8014c40:	61a1      	str	r1, [r4, #24]
 8014c42:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8014c46:	0a12      	lsrs	r2, r2, #8
 8014c48:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8014c4c:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8014c50:	430a      	orrs	r2, r1
 8014c52:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8014c56:	681a      	ldr	r2, [r3, #0]
 8014c58:	05d6      	lsls	r6, r2, #23
 8014c5a:	bf42      	ittt	mi
 8014c5c:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8014c5e:	4a1b      	ldrmi	r2, [pc, #108]	; (8014ccc <enet_init+0x2d8>)
 8014c60:	6091      	strmi	r1, [r2, #8]
 8014c62:	681a      	ldr	r2, [r3, #0]
 8014c64:	0595      	lsls	r5, r2, #22
 8014c66:	bf42      	ittt	mi
 8014c68:	4a18      	ldrmi	r2, [pc, #96]	; (8014ccc <enet_init+0x2d8>)
 8014c6a:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8014c6c:	60d1      	strmi	r1, [r2, #12]
 8014c6e:	681a      	ldr	r2, [r3, #0]
 8014c70:	0554      	lsls	r4, r2, #21
 8014c72:	d508      	bpl.n	8014c86 <enet_init+0x292>
 8014c74:	4915      	ldr	r1, [pc, #84]	; (8014ccc <enet_init+0x2d8>)
 8014c76:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8014c78:	684a      	ldr	r2, [r1, #4]
 8014c7a:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8014c7e:	f022 0206 	bic.w	r2, r2, #6
 8014c82:	4302      	orrs	r2, r0
 8014c84:	604a      	str	r2, [r1, #4]
 8014c86:	681a      	ldr	r2, [r3, #0]
 8014c88:	0510      	lsls	r0, r2, #20
 8014c8a:	d508      	bpl.n	8014c9e <enet_init+0x2aa>
 8014c8c:	490f      	ldr	r1, [pc, #60]	; (8014ccc <enet_init+0x2d8>)
 8014c8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014c90:	680a      	ldr	r2, [r1, #0]
 8014c92:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8014c96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8014c9a:	4302      	orrs	r2, r0
 8014c9c:	600a      	str	r2, [r1, #0]
 8014c9e:	681a      	ldr	r2, [r3, #0]
 8014ca0:	04d1      	lsls	r1, r2, #19
 8014ca2:	d506      	bpl.n	8014cb2 <enet_init+0x2be>
 8014ca4:	4909      	ldr	r1, [pc, #36]	; (8014ccc <enet_init+0x2d8>)
 8014ca6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014ca8:	680a      	ldr	r2, [r1, #0]
 8014caa:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8014cae:	4302      	orrs	r2, r0
 8014cb0:	600a      	str	r2, [r1, #0]
 8014cb2:	681a      	ldr	r2, [r3, #0]
 8014cb4:	0492      	lsls	r2, r2, #18
 8014cb6:	d506      	bpl.n	8014cc6 <enet_init+0x2d2>
 8014cb8:	4904      	ldr	r1, [pc, #16]	; (8014ccc <enet_init+0x2d8>)
 8014cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cbc:	680a      	ldr	r2, [r1, #0]
 8014cbe:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8014cc2:	4313      	orrs	r3, r2
 8014cc4:	600b      	str	r3, [r1, #0]
 8014cc6:	2001      	movs	r0, #1
 8014cc8:	e6df      	b.n	8014a8a <enet_init+0x96>
 8014cca:	bf00      	nop
 8014ccc:	40028000 	andmi	r8, r2, r0
 8014cd0:	2000af28 	andcs	sl, r0, r8, lsr #30
 8014cd4:	40029000 	andmi	r9, r2, r0
 8014cd8:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08014cdc <enet_txfifo_flush>:
 8014cdc:	4b06      	ldr	r3, [pc, #24]	; (8014cf8 <enet_txfifo_flush+0x1c>)
 8014cde:	4807      	ldr	r0, [pc, #28]	; (8014cfc <enet_txfifo_flush+0x20>)
 8014ce0:	699a      	ldr	r2, [r3, #24]
 8014ce2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014ce6:	619a      	str	r2, [r3, #24]
 8014ce8:	699a      	ldr	r2, [r3, #24]
 8014cea:	02d2      	lsls	r2, r2, #11
 8014cec:	d502      	bpl.n	8014cf4 <enet_txfifo_flush+0x18>
 8014cee:	3801      	subs	r0, #1
 8014cf0:	d1fa      	bne.n	8014ce8 <enet_txfifo_flush+0xc>
 8014cf2:	4770      	bx	lr
 8014cf4:	2001      	movs	r0, #1
 8014cf6:	4770      	bx	lr
 8014cf8:	40029000 	andmi	r9, r2, r0
 8014cfc:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014d00 <enet_tx_enable>:
 8014d00:	4a06      	ldr	r2, [pc, #24]	; (8014d1c <enet_tx_enable+0x1c>)
 8014d02:	b508      	push	{r3, lr}
 8014d04:	6813      	ldr	r3, [r2, #0]
 8014d06:	f043 0308 	orr.w	r3, r3, #8
 8014d0a:	6013      	str	r3, [r2, #0]
 8014d0c:	f7ff ffe6 	bl	8014cdc <enet_txfifo_flush>
 8014d10:	4a03      	ldr	r2, [pc, #12]	; (8014d20 <enet_tx_enable+0x20>)
 8014d12:	6993      	ldr	r3, [r2, #24]
 8014d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014d18:	6193      	str	r3, [r2, #24]
 8014d1a:	bd08      	pop	{r3, pc}
 8014d1c:	40028000 	andmi	r8, r2, r0
 8014d20:	40029000 	andmi	r9, r2, r0

08014d24 <enet_enable>:
 8014d24:	b508      	push	{r3, lr}
 8014d26:	f7ff ffeb 	bl	8014d00 <enet_tx_enable>
 8014d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014d2e:	f7ff bdcb 	b.w	80148c8 <enet_rx_enable>

08014d32 <enet_desc_information_get>:
 8014d32:	2905      	cmp	r1, #5
 8014d34:	d817      	bhi.n	8014d66 <enet_desc_information_get+0x34>
 8014d36:	e8df f001 	tbb	[pc, r1]
 8014d3a:	03091012 	movweq	r1, #36882	; 0x9012
 8014d3e:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8014d42:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8014d46:	4770      	bx	lr
 8014d48:	88c0      	ldrh	r0, [r0, #6]
 8014d4a:	e7fa      	b.n	8014d42 <enet_desc_information_get+0x10>
 8014d4c:	8840      	ldrh	r0, [r0, #2]
 8014d4e:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8014d52:	2804      	cmp	r0, #4
 8014d54:	d90a      	bls.n	8014d6c <enet_desc_information_get+0x3a>
 8014d56:	3804      	subs	r0, #4
 8014d58:	4770      	bx	lr
 8014d5a:	6880      	ldr	r0, [r0, #8]
 8014d5c:	4770      	bx	lr
 8014d5e:	6800      	ldr	r0, [r0, #0]
 8014d60:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8014d64:	4770      	bx	lr
 8014d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d6a:	4770      	bx	lr
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	4770      	bx	lr

08014d70 <enet_rxframe_drop>:
 8014d70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014d74:	4814      	ldr	r0, [pc, #80]	; (8014dc8 <enet_rxframe_drop+0x58>)
 8014d76:	b510      	push	{r4, lr}
 8014d78:	6802      	ldr	r2, [r0, #0]
 8014d7a:	4914      	ldr	r1, [pc, #80]	; (8014dcc <enet_rxframe_drop+0x5c>)
 8014d7c:	6854      	ldr	r4, [r2, #4]
 8014d7e:	6013      	str	r3, [r2, #0]
 8014d80:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8014d84:	680b      	ldr	r3, [r1, #0]
 8014d86:	d009      	beq.n	8014d9c <enet_rxframe_drop+0x2c>
 8014d88:	b12b      	cbz	r3, 8014d96 <enet_rxframe_drop+0x26>
 8014d8a:	68da      	ldr	r2, [r3, #12]
 8014d8c:	6002      	str	r2, [r0, #0]
 8014d8e:	681a      	ldr	r2, [r3, #0]
 8014d90:	b1ba      	cbz	r2, 8014dc2 <enet_rxframe_drop+0x52>
 8014d92:	600a      	str	r2, [r1, #0]
 8014d94:	bd10      	pop	{r4, pc}
 8014d96:	68d3      	ldr	r3, [r2, #12]
 8014d98:	6003      	str	r3, [r0, #0]
 8014d9a:	e7fb      	b.n	8014d94 <enet_rxframe_drop+0x24>
 8014d9c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8014da0:	4c0b      	ldr	r4, [pc, #44]	; (8014dd0 <enet_rxframe_drop+0x60>)
 8014da2:	d006      	beq.n	8014db2 <enet_rxframe_drop+0x42>
 8014da4:	68e2      	ldr	r2, [r4, #12]
 8014da6:	6002      	str	r2, [r0, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d0f3      	beq.n	8014d94 <enet_rxframe_drop+0x24>
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	600b      	str	r3, [r1, #0]
 8014db0:	e7f0      	b.n	8014d94 <enet_rxframe_drop+0x24>
 8014db2:	6824      	ldr	r4, [r4, #0]
 8014db4:	3210      	adds	r2, #16
 8014db6:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8014dba:	4422      	add	r2, r4
 8014dbc:	6002      	str	r2, [r0, #0]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d0e8      	beq.n	8014d94 <enet_rxframe_drop+0x24>
 8014dc2:	3310      	adds	r3, #16
 8014dc4:	e7f3      	b.n	8014dae <enet_rxframe_drop+0x3e>
 8014dc6:	bf00      	nop
 8014dc8:	2000af20 	andcs	sl, r0, r0, lsr #30
 8014dcc:	2000af18 	andcs	sl, r0, r8, lsl pc
 8014dd0:	40029000 	andmi	r9, r2, r0

08014dd4 <enet_rxframe_size_get>:
 8014dd4:	b508      	push	{r3, lr}
 8014dd6:	4b0c      	ldr	r3, [pc, #48]	; (8014e08 <enet_rxframe_size_get+0x34>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	6818      	ldr	r0, [r3, #0]
 8014ddc:	2800      	cmp	r0, #0
 8014dde:	db10      	blt.n	8014e02 <enet_rxframe_size_get+0x2e>
 8014de0:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8014de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014de8:	d003      	beq.n	8014df2 <enet_rxframe_size_get+0x1e>
 8014dea:	f7ff ffc1 	bl	8014d70 <enet_rxframe_drop>
 8014dee:	2001      	movs	r0, #1
 8014df0:	bd08      	pop	{r3, pc}
 8014df2:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8014df6:	2b21      	cmp	r3, #33	; 0x21
 8014df8:	d0f7      	beq.n	8014dea <enet_rxframe_size_get+0x16>
 8014dfa:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8014dfe:	3804      	subs	r0, #4
 8014e00:	e7f6      	b.n	8014df0 <enet_rxframe_size_get+0x1c>
 8014e02:	2000      	movs	r0, #0
 8014e04:	e7f4      	b.n	8014df0 <enet_rxframe_size_get+0x1c>
 8014e06:	bf00      	nop
 8014e08:	2000af20 	andcs	sl, r0, r0, lsr #30

08014e0c <enet_initpara_reset>:
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	4b08      	ldr	r3, [pc, #32]	; (8014e30 <enet_initpara_reset+0x24>)
 8014e10:	e9c3 2200 	strd	r2, r2, [r3]
 8014e14:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8014e18:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8014e1c:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8014e20:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8014e24:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8014e28:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8014e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8014e2e:	4770      	bx	lr
 8014e30:	2000af28 	andcs	sl, r0, r8, lsr #30

08014e34 <enet_deinit>:
 8014e34:	b508      	push	{r3, lr}
 8014e36:	f640 200e 	movw	r0, #2574	; 0xa0e
 8014e3a:	f7fe fcf2 	bl	8013822 <rcu_periph_reset_enable>
 8014e3e:	f640 200e 	movw	r0, #2574	; 0xa0e
 8014e42:	f7fe fcf0 	bl	8013826 <rcu_periph_reset_disable>
 8014e46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014e4a:	f7ff bfdf 	b.w	8014e0c <enet_initpara_reset>
	...

08014e50 <i2c_clock_config>:
 8014e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e52:	4605      	mov	r5, r0
 8014e54:	2002      	movs	r0, #2
 8014e56:	460c      	mov	r4, r1
 8014e58:	4617      	mov	r7, r2
 8014e5a:	f7fe fd8b 	bl	8013974 <rcu_clock_freq_get>
 8014e5e:	4927      	ldr	r1, [pc, #156]	; (8014efc <i2c_clock_config+0xac>)
 8014e60:	4a27      	ldr	r2, [pc, #156]	; (8014f00 <i2c_clock_config+0xb0>)
 8014e62:	fbb0 f1f1 	udiv	r1, r0, r1
 8014e66:	4290      	cmp	r0, r2
 8014e68:	bf34      	ite	cc
 8014e6a:	460b      	movcc	r3, r1
 8014e6c:	2336      	movcs	r3, #54	; 0x36
 8014e6e:	686e      	ldr	r6, [r5, #4]
 8014e70:	4a24      	ldr	r2, [pc, #144]	; (8014f04 <i2c_clock_config+0xb4>)
 8014e72:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8014e76:	431e      	orrs	r6, r3
 8014e78:	4294      	cmp	r4, r2
 8014e7a:	606e      	str	r6, [r5, #4]
 8014e7c:	d816      	bhi.n	8014eac <i2c_clock_config+0x5c>
 8014e7e:	3101      	adds	r1, #1
 8014e80:	2935      	cmp	r1, #53	; 0x35
 8014e82:	d90d      	bls.n	8014ea0 <i2c_clock_config+0x50>
 8014e84:	2336      	movs	r3, #54	; 0x36
 8014e86:	622b      	str	r3, [r5, #32]
 8014e88:	0064      	lsls	r4, r4, #1
 8014e8a:	fbb0 f4f4 	udiv	r4, r0, r4
 8014e8e:	2c04      	cmp	r4, #4
 8014e90:	bf38      	it	cc
 8014e92:	2404      	movcc	r4, #4
 8014e94:	69e8      	ldr	r0, [r5, #28]
 8014e96:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8014e9a:	4304      	orrs	r4, r0
 8014e9c:	61ec      	str	r4, [r5, #28]
 8014e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ea0:	2902      	cmp	r1, #2
 8014ea2:	d801      	bhi.n	8014ea8 <i2c_clock_config+0x58>
 8014ea4:	2302      	movs	r3, #2
 8014ea6:	e7ee      	b.n	8014e86 <i2c_clock_config+0x36>
 8014ea8:	6229      	str	r1, [r5, #32]
 8014eaa:	e7ed      	b.n	8014e88 <i2c_clock_config+0x38>
 8014eac:	4a16      	ldr	r2, [pc, #88]	; (8014f08 <i2c_clock_config+0xb8>)
 8014eae:	4294      	cmp	r4, r2
 8014eb0:	d8f5      	bhi.n	8014e9e <i2c_clock_config+0x4e>
 8014eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014eb6:	4353      	muls	r3, r2
 8014eb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ec0:	3301      	adds	r3, #1
 8014ec2:	622b      	str	r3, [r5, #32]
 8014ec4:	b997      	cbnz	r7, 8014eec <i2c_clock_config+0x9c>
 8014ec6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014eca:	fbb0 f4f4 	udiv	r4, r0, r4
 8014ece:	69eb      	ldr	r3, [r5, #28]
 8014ed0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014ed4:	61eb      	str	r3, [r5, #28]
 8014ed6:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8014eda:	b90b      	cbnz	r3, 8014ee0 <i2c_clock_config+0x90>
 8014edc:	f044 0401 	orr.w	r4, r4, #1
 8014ee0:	69eb      	ldr	r3, [r5, #28]
 8014ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014ee6:	61eb      	str	r3, [r5, #28]
 8014ee8:	69e8      	ldr	r0, [r5, #28]
 8014eea:	e7d6      	b.n	8014e9a <i2c_clock_config+0x4a>
 8014eec:	2119      	movs	r1, #25
 8014eee:	434c      	muls	r4, r1
 8014ef0:	69eb      	ldr	r3, [r5, #28]
 8014ef2:	fbb0 f4f4 	udiv	r4, r0, r4
 8014ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014efa:	e7eb      	b.n	8014ed4 <i2c_clock_config+0x84>
 8014efc:	000f4240 	andeq	r4, pc, r0, asr #4
 8014f00:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8014f04:	000186a0 	andeq	r8, r1, r0, lsr #13
 8014f08:	00061a80 	andeq	r1, r6, r0, lsl #21

08014f0c <i2c_ack_config>:
 8014f0c:	6803      	ldr	r3, [r0, #0]
 8014f0e:	2901      	cmp	r1, #1
 8014f10:	bf0c      	ite	eq
 8014f12:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8014f16:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8014f1a:	6003      	str	r3, [r0, #0]
 8014f1c:	4770      	bx	lr

08014f1e <i2c_ackpos_config>:
 8014f1e:	6803      	ldr	r3, [r0, #0]
 8014f20:	b919      	cbnz	r1, 8014f2a <i2c_ackpos_config+0xc>
 8014f22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014f26:	6003      	str	r3, [r0, #0]
 8014f28:	4770      	bx	lr
 8014f2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014f2e:	e7fa      	b.n	8014f26 <i2c_ackpos_config+0x8>

08014f30 <i2c_master_addressing>:
 8014f30:	3202      	adds	r2, #2
 8014f32:	bf0c      	ite	eq
 8014f34:	f021 0101 	biceq.w	r1, r1, #1
 8014f38:	f041 0101 	orrne.w	r1, r1, #1
 8014f3c:	6101      	str	r1, [r0, #16]
 8014f3e:	4770      	bx	lr

08014f40 <i2c_enable>:
 8014f40:	6803      	ldr	r3, [r0, #0]
 8014f42:	f043 0301 	orr.w	r3, r3, #1
 8014f46:	6003      	str	r3, [r0, #0]
 8014f48:	4770      	bx	lr

08014f4a <i2c_start_on_bus>:
 8014f4a:	6803      	ldr	r3, [r0, #0]
 8014f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f50:	6003      	str	r3, [r0, #0]
 8014f52:	4770      	bx	lr

08014f54 <i2c_stop_on_bus>:
 8014f54:	6803      	ldr	r3, [r0, #0]
 8014f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014f5a:	6003      	str	r3, [r0, #0]
 8014f5c:	4770      	bx	lr

08014f5e <i2c_data_transmit>:
 8014f5e:	6101      	str	r1, [r0, #16]
 8014f60:	4770      	bx	lr

08014f62 <i2c_data_receive>:
 8014f62:	6900      	ldr	r0, [r0, #16]
 8014f64:	b2c0      	uxtb	r0, r0
 8014f66:	4770      	bx	lr

08014f68 <i2c_flag_get>:
 8014f68:	098b      	lsrs	r3, r1, #6
 8014f6a:	5818      	ldr	r0, [r3, r0]
 8014f6c:	f001 011f 	and.w	r1, r1, #31
 8014f70:	40c8      	lsrs	r0, r1
 8014f72:	f000 0001 	and.w	r0, r0, #1
 8014f76:	4770      	bx	lr

08014f78 <i2c_flag_clear>:
 8014f78:	f240 5301 	movw	r3, #1281	; 0x501
 8014f7c:	4299      	cmp	r1, r3
 8014f7e:	b510      	push	{r4, lr}
 8014f80:	d102      	bne.n	8014f88 <i2c_flag_clear+0x10>
 8014f82:	6943      	ldr	r3, [r0, #20]
 8014f84:	6983      	ldr	r3, [r0, #24]
 8014f86:	bd10      	pop	{r4, pc}
 8014f88:	2201      	movs	r2, #1
 8014f8a:	098c      	lsrs	r4, r1, #6
 8014f8c:	5823      	ldr	r3, [r4, r0]
 8014f8e:	f001 011f 	and.w	r1, r1, #31
 8014f92:	fa02 f101 	lsl.w	r1, r2, r1
 8014f96:	ea23 0101 	bic.w	r1, r3, r1
 8014f9a:	5021      	str	r1, [r4, r0]
 8014f9c:	e7f3      	b.n	8014f86 <i2c_flag_clear+0xe>
	...

Disassembly of section .rodata:

08014fa0 <vtable for DisplayHandler-0xdc>:
 8014fa0:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8014fa4:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8014fb0:	03020100 	movweq	r0, #8448	; 0x2100
 8014fb4:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8014fb8:	00000009 	andeq	r0, r0, r9
 8014fbc:	03020100 	movweq	r0, #8448	; 0x2100
 8014fc0:	584d4404 	stmdapl	sp, {r2, sl, lr}^
 8014fc4:	706e4920 	rsbvc	r4, lr, r0, lsr #18
 8014fc8:	44007475 	strmi	r7, [r0], #-1141	; 0xfffffb8b
 8014fcc:	4f20584d 	svcmi	0x0020584d
 8014fd0:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8014fd4:	35310074 	ldrcc	r0, [r1, #-116]!	; 0xffffff8c
 8014fd8:	3a38343a 	bcc	8e220c8 <__exidx_end+0xe0ae78>
 8014fdc:	4a003933 	bmi	80234b0 <__exidx_end+0xc260>
 8014fe0:	31206e61 			; <UNDEFINED> instruction: 0x31206e61
 8014fe4:	30322034 	eorscc	r2, r2, r4, lsr r0
 8014fe8:	41003232 	tstmi	r0, r2, lsr r2
 8014fec:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 8014ff0:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 8014ff4:	646f4e20 	strbtvs	r4, [pc], #-3616	; 8014ffc <_etext+0x5c>
 8014ff8:	5b1b2065 	blpl	86dd194 <__exidx_end+0x6c5f44>
 8014ffc:	446d3233 	strbtmi	r3, [sp], #-563	; 0xfffffdcd
 8015000:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 8015004:	63204d44 			; <UNDEFINED> instruction: 0x63204d44
 8015008:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 801500c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 8015010:	317b2072 	cmncc	fp, r2, ror r0
 8015014:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8015018:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801501c:	5b1b7d65 	blpl	86f45b8 <__exidx_end+0x6dd368>
 8015020:	006d3733 	rsbeq	r3, sp, r3, lsr r7
 8015024:	6f635f2e 	svcvs	0x00635f2e
 8015028:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 801502c:	685f2e00 	ldmdavs	pc, {r9, sl, fp, sp}^	; <UNPREDICTABLE>
 8015030:	00707474 	rsbseq	r7, r0, r4, ror r4
 8015034:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8015038:	7472413d 	ldrbtvc	r4, [r2], #-317	; 0xfffffec3
 801503c:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8015040:	44203420 	strtmi	r3, [r0], #-1056	; 0xfffffbe0
 8015044:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 8015048:	41004d44 	tstmi	r0, r4, asr #26
 801504c:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 8015050:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 8015054:	00732520 	rsbseq	r2, r3, r0, lsr #10
 8015058:	21786d64 	cmncs	r8, r4, ror #26
 801505c:	65726200 	ldrbvs	r6, [r2, #-512]!	; 0xfffffe00
 8015060:	00236b61 	eoreq	r6, r3, r1, ror #22
 8015064:	2362616d 	cmncs	r2, #1073741851	; 0x4000001b
 8015068:	66657200 	strbtvs	r7, [r5], -r0, lsl #4
 801506c:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 8015070:	6c730023 	ldclvs	0, cr0, [r3], #-140	; 0xffffff74
 8015074:	2373746f 	cmncs	r3, #1862270976	; 0x6f000000
 8015078:	00000000 	andeq	r0, r0, r0

0801507c <vtable for DisplayHandler>:
	...
 8015084:	080074ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, sl, ip, sp, lr}
 8015088:	08007549 	stmdaeq	r0, {r0, r3, r6, r8, sl, ip, sp, lr}
 801508c:	080075ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, ip, sp, lr}

08015090 <vtable for DisplayUdfHandler>:
	...
 8015098:	080074f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, sl, ip, sp, lr}
 801509c:	08007555 	stmdaeq	r0, {r0, r2, r4, r6, r8, sl, ip, sp, lr}
 80150a0:	080075c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, sl, ip, sp, lr}
 80150a4:	080074f3 	stmdaeq	r0, {r0, r1, r4, r5, r6, r7, sl, ip, sp, lr}
 80150a8:	080075b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, ip, sp, lr}
 80150ac:	0800759d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, sl, ip, sp, lr}
 80150b0:	08007589 	stmdaeq	r0, {r0, r3, r7, r8, sl, ip, sp, lr}
 80150b4:	08007575 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, sl, ip, sp, lr}
 80150b8:	08007561 	stmdaeq	r0, {r0, r5, r6, r8, sl, ip, sp, lr}

080150bc <vtable for ArtNetReboot>:
	...
 80150c4:	080074f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, sl, ip, sp, lr}
 80150c8:	0800753d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, ip, sp, lr}
 80150cc:	08007519 	stmdaeq	r0, {r0, r3, r4, r8, sl, ip, sp, lr}

080150d0 <CSWTCH.99>:
 80150d0:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 80150d4:	 	eorcc	r3, lr, r6, asr #2

080150d5 <SOFTWARE_VERSION>:
 80150d5:	00302e31 	eorseq	r2, r0, r1, lsr lr
 80150d9:	 	andeq	r0, r0, r0

080150dc <vtable for DmxInput>:
	...
 80150e4:	08007cad 	stmdaeq	r0, {r0, r2, r3, r5, r7, sl, fp, ip, sp, lr}
 80150e8:	08007d3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp, lr}
 80150ec:	08007cb1 	stmdaeq	r0, {r0, r4, r5, r7, sl, fp, ip, sp, lr}
 80150f0:	08007cdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, fp, ip, sp, lr}
 80150f4:	08007d09 	stmdaeq	r0, {r0, r3, r8, sl, fp, ip, sp, lr}
 80150f8:	6e552020 	cdpvs	0, 5, cr2, cr5, cr0, {1}
 80150fc:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8015100:	20736573 	rsbscs	r6, r3, r3, ror r5
 8015104:	20657261 	rsbcs	r7, r5, r1, ror #4
 8015108:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 801510c:	20646570 	rsbcs	r6, r4, r0, ror r5
 8015110:	000a312b 	andeq	r3, sl, fp, lsr #2

08015114 <vtable for ArtNet4Node>:
	...
 801511c:	08007dbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, sl, fp, ip, sp, lr}
 8015120:	08007eab 	stmdaeq	r0, {r0, r1, r3, r5, r7, r9, sl, fp, ip, sp, lr}
 8015124:	08007d61 	stmdaeq	r0, {r0, r5, r6, r8, sl, fp, ip, sp, lr}
 8015128:	08007ddd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, fp, ip, sp, lr}
 801512c:	08007ebd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sl, fp, ip, sp, lr}
 8015130:	08007ea3 	stmdaeq	r0, {r0, r1, r5, r7, r9, sl, fp, ip, sp, lr}

08015134 <ArtNetMsgConst::START>:
 8015134:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 8015138:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 801513c:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8015140:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

08015145 <ArtNetMsgConst::PARAMS>:
 8015145:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8015149:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801514d:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8015151:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015155:	0074654e 	rsbseq	r6, r4, lr, asr #10

08015159 <ArtNetMsgConst::RDM_RUN>:
 8015159:	6e6e7552 	mcrvs	5, 3, r7, cr14, cr2, {2}
 801515d:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8015161:	204d4452 	subcs	r4, sp, r2, asr r4
 8015165:	63736944 	cmnvs	r3, #68, 18	; 0x110000
 8015169:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 801516d:	 	subvc	r0, r1, #121	; 0x79

0801516f <ArtNetMsgConst::STARTED>:
 801516f:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015173:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8015177:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801517b:	00646574 	rsbeq	r6, r4, r4, ror r5
 801517f:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8015183:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 8015187:	73250052 			; <UNDEFINED> instruction: 0x73250052
 801518b:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801518f:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8015193:	74680073 	strbtvc	r0, [r8], #-115	; 0xffffff8d
 8015197:	2f3a7074 	svccs	0x003a7074
 801519b:	3364672f 	cmncc	r4, #12320768	; 0xbc0000
 801519f:	6d642d32 	stclvs	13, cr2, [r4, #-200]!	; 0xffffff38
 80151a3:	726f2e78 	rsbvc	r2, pc, #120, 28	; 0x780
 80151a7:	6d450067 	stclvs	0, cr0, [r5, #-412]	; 0xfffffe64
 80151ab:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 80151af:	 	tstmi	r0, r5, ror #8

080151b2 <artnet::NODE_ID>:
 80151b2:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80151b6:	0074654e 	rsbseq	r6, r4, lr, asr #10

080151ba <defaults::SHORT_NAME>:
 80151ba:	20567641 	subscs	r7, r6, r1, asr #12
 80151be:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80151c2:	2074654e 	rsbscs	r6, r4, lr, asr #10
 80151c6:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

080151cb <artnet::NODE_ID>:
 80151cb:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80151cf:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80151d3:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 80151d7:	30255b20 	eorcc	r5, r5, r0, lsr #22
 80151db:	205d6434 	subscs	r6, sp, r4, lsr r4
 80151df:	41207325 			; <UNDEFINED> instruction: 0x41207325
 80151e3:	 	tstmi	r0, r6, ror r6

080151e6 <artnet::NODE_ID>:
 80151e6:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80151ea:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80151ee:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 80151f2:	72204d44 	eorvc	r4, r0, #68, 26	; 0x1100
 80151f6:	6f707365 	svcvs	0x00707365
 80151fa:	0a65736e 	beq	9971fba <__exidx_end+0x195ad6a>
 80151fe:	50544800 	subspl	r4, r4, r0, lsl #16
 8015202:	50544c00 	subspl	r4, r4, r0, lsl #24
 8015206:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 801520a:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 801520e:	43417300 	movtmi	r7, #4864	; 0x1300
 8015212:	6f4e004e 	svcvs	0x004e004e
 8015216:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
 801521a:	255b2064 	ldrbcs	r2, [fp, #-100]	; 0xffffff9c
 801521e:	000a5d75 	andeq	r5, sl, r5, ror sp
 8015222:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8015226:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 801522a:	20202065 	eorcs	r2, r0, r5, rrx
 801522e:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015232:	0a64252e 	beq	991e6f2 <__exidx_end+0x19074a2>
 8015236:	68532000 	ldmdavs	r3, {sp}^
 801523a:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801523e:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8015242:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8015246:	20000a73 	andcs	r0, r0, r3, ror sl
 801524a:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 801524e:	6d616e20 	stclvs	14, cr6, [r1, #-128]!	; 0xffffff80
 8015252:	3a202065 	bcc	881d3ee <__exidx_end+0x80619e>
 8015256:	0a732520 	beq	9cde6de <__exidx_end+0x1cc748e>
 801525a:	754f2000 	strbvc	r2, [pc, #-0]	; 8015262 <artnet::NODE_ID+0x7c>
 801525e:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 8015262:	2020000a 	eorcs	r0, r0, sl
 8015266:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 801526a:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 801526e:	3a642520 	bcc	991e6f6 <__exidx_end+0x19074a6>
 8015272:	322d255b 	eorcc	r2, sp, #381681664	; 0x16c00000
 8015276:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 801527a:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 801527e:	5d64322d 	sfmpl	f3, 2, [r4, #-180]!	; 0xffffff4c
 8015282:	7534253a 	ldrvc	r2, [r4, #-1338]!	; 0xfffffac6
 8015286:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 801528a:	7b20005d 	blvc	8815406 <__exidx_end+0x7fe1b6>
 801528e:	0a7d7325 	beq	9f71f2a <__exidx_end+0x1f5acda>
 8015292:	6e492000 	cdpvs	0, 4, cr2, cr9, cr0, {0}
 8015296:	0a747570 	beq	9d3285e <__exidx_end+0x1d1b60e>
 801529a:	50202000 	eorpl	r2, r0, r0
 801529e:	2074726f 	rsbscs	r7, r4, pc, ror #4
 80152a2:	20643225 	rsbcs	r3, r4, r5, lsr #4
 80152a6:	5b3a6425 	blpl	8eae342 <__exidx_end+0xe970f2>
 80152aa:	64322d25 	ldrtvs	r2, [r2], #-3365	; 0xfffff2db
 80152ae:	322d253a 	eorcc	r2, sp, #243269632	; 0xe800000
 80152b2:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 80152b6:	3a5d6432 	bcc	976e386 <__exidx_end+0x1757136>
 80152ba:	20753425 	rsbscs	r3, r5, r5, lsr #8
 80152be:	25203e2d 	strcs	r3, [r0, #-3629]!	; 0xfffff1d3
 80152c2:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80152c6:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80152ca:	000a6425 	andeq	r6, sl, r5, lsr #8
 80152ce:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 80152d2:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 80152d6:	73252300 			; <UNDEFINED> instruction: 0x73252300
 80152da:	0a64253d 	beq	991e7d6 <__exidx_end+0x1907586>
 80152de:	73252200 			; <UNDEFINED> instruction: 0x73252200
 80152e2:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80152e6:	002c2273 	eoreq	r2, ip, r3, ror r2
 80152ea:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 80152ee:	000a7325 	andeq	r7, sl, r5, lsr #6
 80152f2:	6e636173 	mcrvs	1, 3, r6, cr3, cr3, {3}
 80152f6:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 80152fa:	6f007475 	svcvs	0x00007475
 80152fe:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 8015302:	74680074 	strbtvc	r0, [r8], #-116	; 0xffffff8c
 8015306:	746c0070 	strbtvc	r0, [ip], #-112	; 0xffffff90
 801530a:	72610070 	rsbvc	r0, r1, #112	; 0x70
 801530e:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
 8015312:	6c754d00 	ldclvs	13, cr4, [r5], #-0
 8015316:	70206974 	eorvc	r6, r0, r4, ror r9
 801531a:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801531e:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 8015322:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8015326:	6f697461 	svcvs	0x00697461
 801532a:	6f4e006e 	svcvs	0x004e006e
 801532e:	44006564 	strmi	r6, [r0], #-1380	; 0xfffffa9c
 8015332:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 8015336:	4f204d44 	svcmi	0x00204d44
 801533a:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 801533e:	72410074 	subvc	r0, r1, #116	; 0x74
 8015342:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8015346:	00342074 	eorseq	r2, r4, r4, ror r0

0801534a <ArtNetParamsConst::ENABLE_RDM>:
 801534a:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 801534e:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8015352:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

08015355 <ArtNetParamsConst::MAP_UNIVERSE0>:
 8015355:	5f70616d 	svcpl	0x0070616d
 8015359:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801535d:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8015361:	 	rsbsvc	r0, r0, #48	; 0x30

08015363 <ArtNetParamsConst::PROTOCOL_PORT>:
 8015363:	746f7270 	strbtvc	r7, [pc], #-624	; 801536b <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 8015367:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80151b0 <ArtNetMsgConst::STARTED+0x41>
 801536b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801536f:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8015373:	746f7270 	strbtvc	r7, [pc], #-624	; 801537b <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 8015377:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80151c0 <defaults::SHORT_NAME+0x6>
 801537b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801537f:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8015383:	746f7270 	strbtvc	r7, [pc], #-624	; 801538b <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8015387:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80151d0 <artnet::NODE_ID+0x5>
 801538b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801538f:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8015393:	746f7270 	strbtvc	r7, [pc], #-624	; 801539b <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 8015397:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80151e0 <artnet::NODE_ID+0x15>
 801539b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801539f:	00645f74 	rsbeq	r5, r4, r4, ror pc

080153a3 <ArtNetParamsConst::NODE_LONG_NAME>:
 80153a3:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 80153a7:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 80153ab:	 	strbvs	r0, [pc, #-101]!	; 801534e <ArtNetParamsConst::ENABLE_RDM+0x4>

080153ad <ArtNetParamsConst::NODE_OEM_VALUE>:
 80153ad:	5f6d656f 	svcpl	0x006d656f
 80153b1:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 80153b5:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

080153b7 <ArtNetParamsConst::NODE_SHORT_NAME>:
 80153b7:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 80153bb:	616e5f74 	smcvs	58868	; 0xe5f4
 80153bf:	 	strvs	r6, [r0], #-1389	; 0xfffffa93

080153c2 <ArtNetParamsConst::DESTINATION_IP_PORT>:
 80153c2:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80153c6:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80153ca:	5f6e6f69 	svcpl	0x006e6f69
 80153ce:	705f7069 	subsvc	r7, pc, r9, rrx
 80153d2:	5f74726f 	svcpl	0x0074726f
 80153d6:	00000061 	andeq	r0, r0, r1, rrx
 80153da:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80153de:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80153e2:	5f6e6f69 	svcpl	0x006e6f69
 80153e6:	705f7069 	subsvc	r7, pc, r9, rrx
 80153ea:	5f74726f 	svcpl	0x0074726f
 80153ee:	00000062 	andeq	r0, r0, r2, rrx
 80153f2:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80153f6:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80153fa:	5f6e6f69 	svcpl	0x006e6f69
 80153fe:	705f7069 	subsvc	r7, pc, r9, rrx
 8015402:	5f74726f 	svcpl	0x0074726f
 8015406:	00000063 	andeq	r0, r0, r3, rrx
 801540a:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801540e:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8015412:	5f6e6f69 	svcpl	0x006e6f69
 8015416:	705f7069 	subsvc	r7, pc, r9, rrx
 801541a:	5f74726f 	svcpl	0x0074726f
 801541e:	00000064 	andeq	r0, r0, r4, rrx

08015422 <ArtNetParamsConst::DISABLE_MERGE_TIMEOUT>:
 8015422:	61736964 	cmnvs	r3, r4, ror #18
 8015426:	5f656c62 	svcpl	0x00656c62
 801542a:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 801542e:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 8015432:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8014ecd <i2c_clock_config+0x7d>
 8015436:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

08015438 <ArtNetParamsConst::NODE_NETWORK_DATA_LOSS_TIMEOUT>:
 8015438:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801543c:	5f6b726f 	svcpl	0x006b726f
 8015440:	61746164 	cmnvs	r4, r4, ror #2
 8015444:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
 8015448:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801544c:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8014ee7 <i2c_clock_config+0x97>
 8015450:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

08015452 <ArtNetParamsConst::NET>:
 8015452:	0074656e 	rsbseq	r6, r4, lr, ror #10

08015456 <ArtNetParamsConst::SUBNET>:
 8015456:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 801545a:	 	andvc	r7, r0, r5, ror #8

0801545d <ArtNetParamsConst::PROTOCOL>:
 801545d:	746f7270 	strbtvc	r7, [pc], #-624	; 8015465 <ArtNetParamsConst::PROTOCOL+0x8>
 8015461:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80152ac <artnet::NODE_ID+0xc6>
	...

08015466 <ArtNetParamsConst::FILE_NAME>:
 8015466:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801546a:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 801546e:	 			; <UNDEFINED> instruction: 0xff007478

08015471 <ArtNetConst::OEM_ID>:
 8015471:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08015473 <ArtNetConst::ESTA_ID>:
 8015473:	 	strcc	r0, [r1, #-80]	; 0xffffffb0

08015475 <ArtNetConst::VERSION>:
 8015475:	33323501 	teqcc	r2, #4194304	; 0x400000
 8015479:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801547d:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 8015481:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 8015485:	20733834 	rsbscs	r3, r3, r4, lsr r8
 8015489:	30007325 	andcc	r7, r0, r5, lsr #6
 801548d:	6f4e202e 	svcvs	0x004e202e
 8015491:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 8015495:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 8015499:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 801549d:	202c6465 	eorcs	r6, ip, r5, ror #8
 80154a1:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 80154a5:	6f687320 	svcvs	0x00687320
 80154a9:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 80154ad:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 80154b1:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 80154b5:	000a216e 	andeq	r2, sl, lr, ror #2
 80154b9:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 80154bd:	000a6567 	andeq	r6, sl, r7, ror #10
 80154c1:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 80154c5:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 80154c9:	203a2065 	eorscs	r2, sl, r5, rrx
 80154cd:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80154d1:	20000a64 	andcs	r0, r0, r4, ror #20
 80154d5:	20444943 	subcs	r4, r4, r3, asr #18
 80154d9:	20202020 	eorcs	r2, r0, r0, lsr #32
 80154dd:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 80154e1:	20000a73 	andcs	r0, r0, r3, ror sl
 80154e5:	726f5020 	rsbvc	r5, pc, #32
 80154e9:	32252074 	eorcc	r2, r5, #116	; 0x74
 80154ed:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 80154f1:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 80154f5:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 80154f9:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 80154fd:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8015501:	2020000a 	eorcs	r0, r0, sl
 8015505:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8015509:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 801550d:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8015511:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015515:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 8015519:	5b206433 	blpl	882e5ed <__exidx_end+0x81739d>
 801551d:	0a5d6425 	beq	976e5b9 <__exidx_end+0x1757369>
 8015521:	79532000 	ldmdbvc	r3, {sp}^
 8015525:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 8015529:	7a696e6f 	bvc	9a70eed <__exidx_end+0x1a59c9d>
 801552d:	73692065 	cmnvc	r9, #101	; 0x65
 8015531:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8015535:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8015539:	 	tstmi	r0, r4, ror #20

0801553c <E117Const::ACN_PACKET_IDENTIFIER>:
 801553c:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 8015540:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 8015544:	00000037 	andeq	r0, r0, r7, lsr r0

08015548 <E131BridgeConst::VERSION>:
 8015548:	30251801 	eorcc	r1, r5, r1, lsl #16
 801554c:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 8015550:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 8015554:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8015558:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 801555c:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 8015560:	30252d78 	eorcc	r2, r5, r8, ror sp
 8015564:	30257832 	eorcc	r7, r5, r2, lsr r8
 8015568:	30257832 	eorcc	r7, r5, r2, lsr r8
 801556c:	30257832 	eorcc	r7, r5, r2, lsr r8
 8015570:	30257832 	eorcc	r7, r5, r2, lsr r8
 8015574:	30257832 	eorcc	r7, r5, r2, lsr r8
 8015578:	00007832 	andeq	r7, r0, r2, lsr r8

0801557c <UID_ALL>:
 801557c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8015580:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

08015584 <vtable for ArtNetRdmController>:
	...
 801558c:	0800b3c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, ip, sp, pc}
 8015590:	0800b411 	stmdaeq	r0, {r0, r4, sl, ip, sp, pc}
 8015594:	0800b423 	stmdaeq	r0, {r0, r1, r5, sl, ip, sp, pc}
 8015598:	0800b399 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, ip, sp, pc}
 801559c:	0800b3a3 	stmdaeq	r0, {r0, r1, r5, r7, r8, r9, ip, sp, pc}
 80155a0:	0800b42d 	stmdaeq	r0, {r0, r2, r3, r5, sl, ip, sp, pc}

080155a4 <UID_ALL>:
 80155a4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 80155a8:	4452ffff 	ldrbmi	pc, [r2], #-4095	; 0xfffff001	; <UNPREDICTABLE>
 80155ac:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 80155b0:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 80155b4:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 80155b8:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 80155bc:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 80155c0:	000a6e6f 	andeq	r6, sl, pc, ror #28
 80155c4:	6e614d20 	cdpvs	13, 6, cr4, cr1, cr0, {1}
 80155c8:	63616675 	cmnvs	r1, #122683392	; 0x7500000
 80155cc:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 80155d0:	614e2072 	hvcvs	57858	; 0xe202
 80155d4:	3a20656d 	bcc	882eb90 <__exidx_end+0x817940>
 80155d8:	2a2e2520 	bcs	8b9ea60 <__exidx_end+0xb87810>
 80155dc:	20000a73 	andcs	r0, r0, r3, ror sl
 80155e0:	756e614d 	strbvc	r6, [lr, #-333]!	; 0xfffffeb3
 80155e4:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 80155e8:	72657275 	rsbvc	r7, r5, #1342177287	; 0x50000007
 80155ec:	20444920 	subcs	r4, r4, r0, lsr #18
 80155f0:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80155f4:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 80155f8:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 80155fc:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 8015600:	61697265 	cmnvs	r9, r5, ror #4
 8015604:	754e206c 	strbvc	r2, [lr, #-108]	; 0xffffff94
 8015608:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 801560c:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015610:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8015614:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8015618:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 801561c:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8015620:	0a58322e 	beq	9621ee0 <__exidx_end+0x160ac90>
 8015624:	6f522000 	svcvs	0x00522000
 8015628:	6c20746f 	cfstrsvs	mvf7, [r0], #-444	; 0xfffffe44
 801562c:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
 8015630:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015634:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015638:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 801563c:	000a732a 	andeq	r7, sl, sl, lsr #6
 8015640:	6f725020 	svcvs	0x00725020
 8015644:	74637564 	strbtvc	r7, [r3], #-1380	; 0xfffffa9c
 8015648:	74614320 	strbtvc	r4, [r1], #-800	; 0xfffffce0
 801564c:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
 8015650:	3a202079 	bcc	881d83c <__exidx_end+0x8065ec>
 8015654:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 8015658:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 801565c:	20000a58 	andcs	r0, r0, r8, asr sl
 8015660:	646f7250 	strbtvs	r7, [pc], #-592	; 8015668 <UID_ALL+0xc4>
 8015664:	20746375 	rsbscs	r6, r4, r5, ror r3
 8015668:	61746544 	cmnvs	r4, r4, asr #10
 801566c:	20206c69 	eorcs	r6, r0, r9, ror #24
 8015670:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8015674:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8015678:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801567c:	 	strbmi	r0, [r7], #-10

0801567e <DEVICE_LABEL>:
 801567e:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8015682:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 8015686:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 801568a:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 801568e:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	...

08015693 <DEVICE_LABEL>:
 8015693:	61676947 	cmnvs	r7, r7, asr #18
 8015697:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 801569b:	52206563 	eorpl	r6, r0, #415236096	; 0x18c00000
 801569f:	43204d44 			; <UNDEFINED> instruction: 0x43204d44
 80156a3:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 80156a7:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 80156ab:	00000072 	andeq	r0, r0, r2, ror r0
	...

080156b0 <UID_ALL>:
 80156b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 80156b4:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

080156b6 <RDMConst::MANUFACTURER_ID>:
 80156b6:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

080156b8 <RDMConst::MANUFACTURER_NAME>:
 80156b8:	70747468 	rsbsvc	r7, r4, r8, ror #8
 80156bc:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 80156c0:	6f2e7777 	svcvs	0x002e7777
 80156c4:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 80156c8:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 80156cc:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 80156d0:	0067726f 	rsbeq	r7, r7, pc, ror #4
 80156d4:	20584d44 	subscs	r4, r8, r4, asr #26
 80156d8:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
 80156dc:	4220000a 	eormi	r0, r0, #10
 80156e0:	6b616572 	blvs	986ecb0 <__exidx_end+0x1857a60>
 80156e4:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 80156e8:	20202065 	eorcs	r2, r0, r5, rrx
 80156ec:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80156f0:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 80156f4:	74204241 	strtvc	r4, [r0], #-577	; 0xfffffdbf
 80156f8:	20656d69 	rsbcs	r6, r5, r9, ror #26
 80156fc:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015700:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015704:	5220000a 	eorpl	r0, r0, #10
 8015708:	65726665 	ldrbvs	r6, [r2, #-1637]!	; 0xfffff99b
 801570c:	72206873 	eorvc	r6, r0, #7536640	; 0x730000
 8015710:	20657461 	rsbcs	r7, r5, r1, ror #8
 8015714:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015718:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 801571c:	73746f6c 	cmnvc	r4, #108, 30	; 0x1b0
 8015720:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015724:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015728:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801572c:	0000000a 	andeq	r0, r0, sl

08015730 <vtable for DmxSend>:
	...
 8015738:	0800bc49 	stmdaeq	r0, {r0, r3, r6, sl, fp, ip, sp, pc}
 801573c:	0800bd19 	stmdaeq	r0, {r0, r3, r4, r8, sl, fp, ip, sp, pc}
 8015740:	0800bc4d 	stmdaeq	r0, {r0, r2, r3, r6, sl, fp, ip, sp, pc}
 8015744:	0800bc7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, sl, fp, ip, sp, pc}
 8015748:	0800bcb1 	stmdaeq	r0, {r0, r4, r5, r7, sl, fp, ip, sp, pc}
 801574c:	0800bc47 	stmdaeq	r0, {r0, r1, r2, r6, sl, fp, ip, sp, pc}
 8015750:	0800bcc1 	stmdaeq	r0, {r0, r6, r7, sl, fp, ip, sp, pc}
 8015754:	080121f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, sp}
 8015758:	080121eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, sp}
 801575c:	080121ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, sp}
 8015760:	080121f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, sp}

08015764 <DmxParamsConst::BREAK_TIME>:
 8015764:	61657262 	cmnvs	r5, r2, ror #4
 8015768:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 801576c:	 	movwvc	r6, #1389	; 0x56d

0801576f <DmxParamsConst::SLOTS_COUNT>:
 801576f:	746f6c73 	strbtvc	r6, [pc], #-3187	; 8015777 <DmxParamsConst::SLOTS_COUNT+0x8>
 8015773:	6f635f73 	svcvs	0x00635f73
 8015777:	00746e75 	rsbseq	r6, r4, r5, ror lr

0801577b <DmxParamsConst::REFRESH_RATE>:
 801577b:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 801577f:	5f687365 	svcpl	0x00687365
 8015783:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	...

08015788 <DmxParamsConst::MAB_TIME>:
 8015788:	5f62616d 	svcpl	0x0062616d
 801578c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	...

08015791 <DmxParamsConst::FILE_NAME>:
 8015791:	61726170 	cmnvs	r2, r0, ror r1
 8015795:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8015799:	25007478 	strcs	r7, [r0, #-1144]	; 0xfffffb88
 801579d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80157a1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80157a5:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 80157a9:	73252c73 			; <UNDEFINED> instruction: 0x73252c73
 80157ad:	2c64252c 	cfstr64cs	mvdx2, [r4], #-176	; 0xffffff50
 80157b1:	000a7325 	andeq	r7, sl, r5, lsr #6
 80157b5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80157b9:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80157bd:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 80157c1:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 80157c5:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 80157c9:	6e4f000a 	cdpvs	0, 4, cr0, cr15, cr10, {0}
 80157cd:	66664f00 	strbtvs	r4, [r6], -r0, lsl #30
 80157d1:	73696400 	cmnvc	r9, #0, 8
 80157d5:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80157d9:	0a73253a 	beq	9cdecc9 <__exidx_end+0x1cc7a79>
 80157dd:	72657600 	rsbvc	r7, r5, #0, 12
 80157e1:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 80157e5:	0073253a 	rsbseq	r2, r3, sl, lsr r5
 80157e9:	69747075 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, ip, sp, lr}^
 80157ed:	203a656d 	eorscs	r6, sl, sp, ror #10
 80157f1:	0a737525 	beq	9cf2c8d <__exidx_end+0x1cdba3d>
 80157f5:	52524500 	subspl	r4, r2, #0, 10
 80157f9:	3f23524f 	svccc	0x0023524f
 80157fd:	0a746567 	beq	9d2eda1 <__exidx_end+0x1d17b51>
 8015801:	73696400 	cmnvc	r9, #0, 8
 8015805:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015809:	52450023 	subpl	r0, r5, #35	; 0x23
 801580d:	23524f52 	cmpcs	r2, #328	; 0x148
 8015811:	45000a3f 	strmi	r0, [r0, #-2623]	; 0xfffff5c1
 8015815:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 8015819:	000a2123 	andeq	r2, sl, r3, lsr #2
 801581d:	6f626572 	svcvs	0x00626572
 8015821:	2323746f 			; <UNDEFINED> instruction: 0x2323746f
 8015825:	73696c00 	cmnvc	r9, #0, 24
 8015829:	6c002374 	stcvs	3, cr2, [r0], {116}	; 0x74
 801582d:	23747369 	cmncs	r4, #-1543503871	; 0xa4000001
 8015831:	7075002a 	rsbsvc	r0, r5, sl, lsr #32
 8015835:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8015839:	65760023 	ldrbvs	r0, [r6, #-35]!	; 0xffffffdd
 801583d:	6f697372 	svcvs	0x00697372
 8015841:	6700236e 	strvs	r2, [r0, -lr, ror #6]
 8015845:	00237465 	eoreq	r7, r3, r5, ror #8
 8015849:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 801584d:	2379726f 	cmncs	r9, #-268435450	; 0xf0000006
 8015851:	 	subvc	r0, r1, #35	; 0x23

08015853 <s_Node>:
 8015853:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015857:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8015863:	41730000 	cmnmi	r3, r0
 8015867:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 801586b:	31332e31 	teqcc	r3, r1, lsr lr
	...
 8015877:	2043534f 	subcs	r5, r3, pc, asr #6
 801587b:	76726553 			; <UNDEFINED> instruction: 0x76726553
 801587f:	00007265 	andeq	r7, r0, r5, ror #4
 8015883:	00000000 	andeq	r0, r0, r0
 8015887:	544c0000 	strbpl	r0, [ip], #-0
 801588b:	00000043 	andeq	r0, r0, r3, asr #32
	...
 801589b:	2043534f 	subcs	r5, r3, pc, asr #6
 801589f:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 80158a3:	0000746e 	andeq	r7, r0, lr, ror #8
 80158a7:	00000000 	andeq	r0, r0, r0
 80158ab:	44520000 	ldrbmi	r0, [r2], #-0
 80158af:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 80158b3:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 80158b7:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 80158bb:	0000796c 	andeq	r7, r0, ip, ror #18
 80158bf:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 80158c3:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 80158cf:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 80158d3:	00004944 	andeq	r4, r0, r4, asr #18
	...
 80158e3:	00504444 	subseq	r4, r0, r4, asr #8
	...

080158f5 <s_Output>:
 80158f5:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 8015901:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 801590d:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 8015911:	00726f74 	rsbseq	r6, r2, r4, ror pc
 8015915:	00000000 	andeq	r0, r0, r0
 8015919:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801591d:	0000006c 	andeq	r0, r0, ip, rrx
 8015921:	00000000 	andeq	r0, r0, r0
 8015925:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 8015929:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 801592d:	00000000 	andeq	r0, r0, r0
 8015931:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 801593d:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8015941:	00006769 	andeq	r6, r0, r9, ror #14
 8015945:	00000000 	andeq	r0, r0, r0
 8015949:	70657453 	rsbvc	r7, r5, r3, asr r4
 801594d:	00726570 	rsbseq	r6, r2, r0, ror r5
 8015951:	00000000 	andeq	r0, r0, r0
 8015955:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 8015959:	00007265 	andeq	r7, r0, r5, ror #4
 801595d:	00000000 	andeq	r0, r0, r0
 8015961:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015965:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8015969:	00000000 	andeq	r0, r0, r0
 801596d:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 8015971:	00006c61 	andeq	r6, r0, r1, ror #24
 8015975:	00000000 	andeq	r0, r0, r0
 8015979:	20424752 	subcs	r4, r2, r2, asr r7
 801597d:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 8015981:	0000006c 	andeq	r0, r0, ip, rrx
 8015985:	 	mrsvc	r0, (UNDEF: 0)

08015988 <RemoteConfig::s_GET>:
 8015988:	0800d471 	stmdaeq	r0, {r0, r4, r5, r6, sl, ip, lr, pc}
 801598c:	00000000 	andeq	r0, r0, r0
 8015990:	0801581d 	stmdaeq	r1, {r0, r2, r3, r4, fp, ip, lr}
 8015994:	00000008 	andeq	r0, r0, r8
 8015998:	0800ca3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, fp, lr, pc}
 801599c:	00000000 	andeq	r0, r0, r0
 80159a0:	08015826 	stmdaeq	r1, {r1, r2, r5, fp, ip, lr}
 80159a4:	00000005 	andeq	r0, r0, r5
 80159a8:	0800ca3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, fp, lr, pc}
 80159ac:	00000000 	andeq	r0, r0, r0
 80159b0:	0801582c 	stmdaeq	r1, {r2, r3, r5, fp, ip, lr}
 80159b4:	00000006 	andeq	r0, r0, r6
 80159b8:	0800cbb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, fp, lr, pc}
 80159bc:	00000000 	andeq	r0, r0, r0
 80159c0:	08015833 	stmdaeq	r1, {r0, r1, r4, r5, fp, ip, lr}
 80159c4:	00000007 	andeq	r0, r0, r7
 80159c8:	0800cb71 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, fp, lr, pc}
 80159cc:	00000000 	andeq	r0, r0, r0
 80159d0:	0801583b 	stmdaeq	r1, {r0, r1, r3, r4, r5, fp, ip, lr}
 80159d4:	00000008 	andeq	r0, r0, r8
 80159d8:	0800cb1d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, fp, lr, pc}
 80159dc:	00000000 	andeq	r0, r0, r0
 80159e0:	08015802 	stmdaeq	r1, {r1, fp, ip, lr}
 80159e4:	00000008 	andeq	r0, r0, r8
 80159e8:	0800ce05 	stmdaeq	r0, {r0, r2, r9, sl, fp, lr, pc}
 80159ec:	00000000 	andeq	r0, r0, r0
 80159f0:	08015844 	stmdaeq	r1, {r2, r6, fp, ip, lr}
 80159f4:	00010004 	andeq	r0, r1, r4
 80159f8:	0800d161 	stmdaeq	r0, {r0, r5, r6, r8, ip, lr, pc}
 80159fc:	00000000 	andeq	r0, r0, r0
 8015a00:	08015849 	stmdaeq	r1, {r0, r3, r6, fp, ip, lr}
 8015a04:	00000009 	andeq	r0, r0, r9
 8015a08:	6f626552 	svcvs	0x00626552
 8015a0c:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 8015a10:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 8015a14:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 8015a18:	6f6f6265 	svcvs	0x006f6265
 8015a1c:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8015a20:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 8015a24:	6f637200 	svcvs	0x00637200
 8015a28:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8015a2c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015a30:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 8015a34:	6b726f77 	blvs	9cb1818 <__exidx_end+0x1c9a5c8>
 8015a38:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015a3c:	73696400 	cmnvc	r9, #0, 8
 8015a40:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015a44:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015a48:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 8015a4c:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8015a50:	00747874 	rsbseq	r7, r4, r4, ror r8
 8015a54:	61726170 	cmnvs	r2, r0, ror r1
 8015a58:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8015a5c:	00007478 	andeq	r7, r0, r8, ror r4

08015a60 <RemoteConfig::s_TXT>:
 8015a60:	0800ce0d 	stmdaeq	r0, {r0, r2, r3, r9, sl, fp, lr, pc}
 8015a64:	00000000 	andeq	r0, r0, r0
 8015a68:	0800d091 	stmdaeq	r0, {r0, r4, r7, ip, lr, pc}
 8015a6c:	00000000 	andeq	r0, r0, r0
 8015a70:	08015a25 	stmdaeq	r1, {r0, r2, r5, r9, fp, ip, lr}
 8015a74:	0000000b 	andeq	r0, r0, fp
 8015a78:	0000000c 	andeq	r0, r0, ip
 8015a7c:	0800ce39 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, fp, lr, pc}
 8015a80:	00000000 	andeq	r0, r0, r0
 8015a84:	0800d0c1 	stmdaeq	r0, {r0, r6, r7, ip, lr, pc}
 8015a88:	00000000 	andeq	r0, r0, r0
 8015a8c:	08015a31 	stmdaeq	r1, {r0, r4, r5, r9, fp, ip, lr}
 8015a90:	0000000b 	andeq	r0, r0, fp
 8015a94:	00000000 	andeq	r0, r0, r0
 8015a98:	0800cebd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sl, fp, lr, pc}
 8015a9c:	00000000 	andeq	r0, r0, r0
 8015aa0:	0800d139 	stmdaeq	r0, {r0, r3, r4, r5, r8, ip, lr, pc}
 8015aa4:	00000000 	andeq	r0, r0, r0
 8015aa8:	08015a3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, fp, ip, lr}
 8015aac:	0000000b 	andeq	r0, r0, fp
 8015ab0:	0000000f 	andeq	r0, r0, pc
 8015ab4:	0800ce65 	stmdaeq	r0, {r0, r2, r5, r6, r9, sl, fp, lr, pc}
 8015ab8:	00000000 	andeq	r0, r0, r0
 8015abc:	0800d0e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, ip, lr, pc}
 8015ac0:	00000000 	andeq	r0, r0, r0
 8015ac4:	08015a49 	stmdaeq	r1, {r0, r3, r6, r9, fp, ip, lr}
 8015ac8:	0000000a 	andeq	r0, r0, sl
 8015acc:	00000001 	andeq	r0, r0, r1
 8015ad0:	0800ce91 	stmdaeq	r0, {r0, r4, r7, r9, sl, fp, lr, pc}
 8015ad4:	00000000 	andeq	r0, r0, r0
 8015ad8:	0800d111 	stmdaeq	r0, {r0, r4, r8, ip, lr, pc}
 8015adc:	00000000 	andeq	r0, r0, r0
 8015ae0:	08015a54 	stmdaeq	r1, {r2, r4, r6, r9, fp, ip, lr}
 8015ae4:	0000000a 	andeq	r0, r0, sl
 8015ae8:	00000002 	andeq	r0, r0, r2
 8015aec:	00544547 	subseq	r4, r4, r7, asr #10
 8015af0:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 8015af4:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 8015af8:	0a200050 	beq	8815c40 <__exidx_end+0x7fe9f0>
 8015afc:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 8015b00:	43003a00 	movwmi	r3, #2560	; 0xa00
 8015b04:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8015b08:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 8015b0c:	00657079 	rsbeq	r7, r5, r9, ror r0
 8015b10:	61003b20 	tstvs	r0, r0, lsr #22
 8015b14:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 8015b18:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 8015b1c:	6a2f6e6f 	bvs	8bf14e0 <__exidx_end+0xbda290>
 8015b20:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 8015b24:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8015b28:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8015b2c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8015b30:	2f006874 	svccs	0x00006874
 8015b34:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015b38:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8015b3c:	2f006c6d 	svccs	0x00006c6d
 8015b40:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8015b44:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8015b48:	2f007373 	svccs	0x00007373
 8015b4c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015b50:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 8015b54:	736a2f00 	cmnvc	sl, #0, 30
 8015b58:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8015b5c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8015b60:	72657600 	rsbvc	r7, r5, #0, 12
 8015b64:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8015b68:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8015b6c:	00656d69 	rsbeq	r6, r5, r9, ror #26
 8015b70:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015b74:	0079616c 	rsbseq	r6, r9, ip, ror #2
 8015b78:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015b7c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8015b80:	6a2f0079 	bvs	8bd5d6c <__exidx_end+0xbbeb1c>
 8015b84:	2f6e6f73 	svccs	0x006e6f73
 8015b88:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8015b8c:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 8015b90:	6f6f6265 	svcvs	0x006f6265
 8015b94:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 8015b98:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 8015b9c:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 8015ba0:	434f4421 	movtmi	r4, #62497	; 0xf421
 8015ba4:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8015ba8:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8015bac:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8015bb0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015bb4:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8015bb8:	3e646165 	powccsz	f6, f4, f5
 8015bbc:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015bc0:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 8015bc4:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 8015bc8:	742f3c74 	strtvc	r3, [pc], #-3188	; 8015bd0 <RemoteConfig::s_TXT+0x170>
 8015bcc:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8015bd0:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015bd4:	3e646165 	powccsz	f6, f4, f5
 8015bd8:	6f623c0a 	svcvs	0x00623c0a
 8015bdc:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 8015be0:	4f3e3168 	svcmi	0x003e3168
 8015be4:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015be8:	2f3c3e31 	svccs	0x003c3e31
 8015bec:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8015bf0:	2f3c0a3e 	svccs	0x003c0a3e
 8015bf4:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015bf8:	52000a3e 	andpl	r0, r0, #253952	; 0x3e000
 8015bfc:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 8015c00:	45207473 	strmi	r7, [r0, #-1139]!	; 0xfffffb8d
 8015c04:	7469746e 	strbtvc	r7, [r9], #-1134	; 0xfffffb92
 8015c08:	6f542079 	svcvs	0x00542079
 8015c0c:	614c206f 	cmpvs	ip, pc, rrx
 8015c10:	00656772 	rsbeq	r6, r5, r2, ror r7
 8015c14:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8015c18:	6e756f46 	cdpvs	15, 7, cr6, cr5, cr6, {2}
 8015c1c:	65520064 	ldrbvs	r0, [r2, #-100]	; 0xffffff9c
 8015c20:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 8015c24:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 8015c28:	6f542049 	svcvs	0x00542049
 8015c2c:	6f4c206f 	svcvs	0x004c206f
 8015c30:	5600676e 	strpl	r6, [r0], -lr, ror #14
 8015c34:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8015c38:	4e206e6f 	cdpmi	14, 2, cr6, cr0, cr15, {3}
 8015c3c:	5320746f 			; <UNDEFINED> instruction: 0x5320746f
 8015c40:	6f707075 	svcvs	0x00707075
 8015c44:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
 8015c48:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 8015c4c:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8015c50:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8015c54:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 8015c58:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8015c5c:	00646574 	rsbeq	r6, r4, r4, ror r5
 8015c60:	20646142 	rsbcs	r6, r4, r2, asr #2
 8015c64:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
 8015c68:	00747365 	rsbseq	r7, r4, r5, ror #6
 8015c6c:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 8015c70:	206e776f 	rsbcs	r7, lr, pc, ror #14
 8015c74:	6f727245 	svcvs	0x00727245
 8015c78:	6e490072 	mcrvs	0, 2, r0, cr9, cr2, {3}
 8015c7c:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 8015c80:	53206c61 			; <UNDEFINED> instruction: 0x53206c61
 8015c84:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 8015c88:	72452072 	subvc	r2, r5, #114	; 0x72
 8015c8c:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8015c90:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 8015c94:	434f4421 	movtmi	r4, #62497	; 0xf421
 8015c98:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8015c9c:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8015ca0:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8015ca4:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015ca8:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8015cac:	3e646165 	powccsz	f6, f4, f5
 8015cb0:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015cb4:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 8015cb8:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8015cbc:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8015cc0:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 8015cc4:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8015cc8:	0a3e6461 	beq	8faee54 <__exidx_end+0xf97c04>
 8015ccc:	646f623c 	strbtvs	r6, [pc], #-572	; 8015cd4 <RemoteConfig::s_TXT+0x274>
 8015cd0:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8015cd4:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 8015cd8:	31682f3c 	cmncc	r8, ip, lsr pc
 8015cdc:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 8015ce0:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8015ce4:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015ce8:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8015cec:	5448000a 	strbpl	r0, [r8], #-10
 8015cf0:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 8015cf4:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 8015cf8:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8015cfc:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 8015d00:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 8015d04:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8015d08:	6f430a0d 	svcvs	0x00430a0d
 8015d0c:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8015d10:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 8015d14:	203a6570 	eorscs	r6, sl, r0, ror r5
 8015d18:	0a0d7325 	beq	83729b4 <__exidx_end+0x35b764>
 8015d1c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8015d20:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8015d24:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8015d28:	203a6874 	eorscs	r6, sl, r4, ror r8
 8015d2c:	0a0d7525 	beq	83731c8 <__exidx_end+0x35bf78>
 8015d30:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 8015d34:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8015d38:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8015d3c:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 8015d40:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 8015d44:	 	ldrbvs	r0, [r4, #-10]!

08015d46 <contentType>:
 8015d46:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8015d4a:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8015d4e:	0000006c 	andeq	r0, r0, ip, rrx
	...
 8015d66:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8015d6a:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 8015d86:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8015d8a:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8015d8e:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8015d92:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 8015da6:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 8015daa:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 8015dae:	2f6e6f69 	svccs	0x006e6f69
 8015db2:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

08015dc6 <RemoteConfigConst::PARAMS_DISABLE>:
 8015dc6:	61736964 	cmnvs	r3, r4, ror #18
 8015dca:	00656c62 	rsbeq	r6, r5, r2, ror #24

08015dce <RemoteConfigConst::PARAMS_FILE_NAME>:
 8015dce:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8015dd2:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8015dd6:	00747874 	rsbseq	r7, r4, r4, ror r8

08015dda <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 8015dda:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015dde:	5f79616c 	svcpl	0x0079616c
 8015de2:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08015de7 <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 8015de7:	61736964 	cmnvs	r3, r4, ror #18
 8015deb:	5f656c62 	svcpl	0x00656c62
 8015def:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 8015df3:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08015df5 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 8015df5:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8015df9:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8015dfd:	6f6f6265 	svcvs	0x006f6265
 8015e01:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

08015e03 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 8015e03:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8015e07:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 80158a3 <s_Node+0x50>
 8015e0b:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8015e0f:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08015e11 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8015e11:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8015e15:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8015e19:	6f746361 	svcvs	0x00746361
 8015e1d:	7b007972 	blvc	80343ed <__exidx_end+0x1d19d>
 8015e21:	73696c22 	cmnvc	r9, #8704	; 0x2200
 8015e25:	7b3a2274 	blvc	8e9e7fd <__exidx_end+0xe875ad>
 8015e29:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8015e2d:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8015e31:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015e35:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015e39:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8015e3d:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8015e41:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8015e45:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8015e49:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8015e4d:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8015e51:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8015e55:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8015e59:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8015e5d:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015e61:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8015e65:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8015e69:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8015e6d:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8015e71:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8015e75:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8015e79:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8015e7d:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8015e81:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015e85:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8015e89:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8015e8d:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8015e91:	616f6222 	cmnvs	pc, r2, lsr #4
 8015e95:	3a226472 	bcc	88af065 <__exidx_end+0x897e15>
 8015e99:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8015e9d:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8015ea1:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 8015ea5:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 8015ea9:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 8015ead:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8015eb1:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8015eb5:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 8015eb9:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 8015ebd:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 8015ec1:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8015ec5:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 8015ec9:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8015ecd:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 8015ed1:	7b000a7d 	blvc	80188cd <__exidx_end+0x167d>
 8015ed5:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 8015ed9:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015edd:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 8015ee1:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8015ee5:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8015ee9:	7b3a2273 	blvc	8e9e8bd <__exidx_end+0xe8766d>
 8015eed:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 8015ef1:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8015ef5:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8015ef9:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 8015efd:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8015f01:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8015f05:	61726170 	cmnvs	r2, r0, ror r1
 8015f09:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8015f0d:	3a227478 	bcc	88b30f5 <__exidx_end+0x89bea5>
 8015f11:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 8015f15:	61725420 	cmnvs	r2, r0, lsr #8
 8015f19:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 8015f1d:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8015f21:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015f25:	2e79616c 	rpwcsez	f6, f1, #4.0
 8015f29:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8015f2d:	6944223a 	stmdbvs	r4, {r1, r3, r4, r5, r9, sp}^
 8015f31:	616c7073 	smcvs	50947	; 0xc703
 8015f35:	44552079 	ldrbmi	r2, [r5], #-121	; 0xffffff87
 8015f39:	222c2246 	eorcs	r2, ip, #1610612740	; 0x60000004
 8015f3d:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8015f41:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8015f45:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8015f49:	654e223a 	strbvs	r2, [lr, #-570]	; 0xfffffdc6
 8015f4d:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8015f51:	222c226b 	eorcs	r2, ip, #-1342177274	; 0xb0000006
 8015f55:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8015f59:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8015f5d:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8015f61:	6552223a 	ldrbvs	r2, [r2, #-570]	; 0xfffffdc6
 8015f65:	65746f6d 	ldrbvs	r6, [r4, #-3949]!	; 0xfffff093
 8015f69:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8015f6d:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8015f71:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8015f75:	7d226e6f 	stcvc	14, cr6, [r2, #-444]!	; 0xfffffe44
 8015f79:	 	teqcs	ip, sp, ror r0

08015f7b <index_html>:
 8015f7b:	4f44213c 	svcmi	0x0044213c
 8015f7f:	50595443 	subspl	r5, r9, r3, asr #8
 8015f83:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 8015f87:	0a3e6c6d 	beq	8fb1143 <__exidx_end+0xf99ef3>
 8015f8b:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 8015f8f:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8015f93:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 8015f97:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 8015f9b:	6b6e696c 	blvs	9bb0553 <__exidx_end+0x1b99303>
 8015f9f:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 8015fa3:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 8015fa7:	73656c79 	cmnvc	r5, #30976	; 0x7900
 8015fab:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8015faf:	72682022 	rsbvc	r2, r8, #34	; 0x22
 8015fb3:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 8015fb7:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8015fbb:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8015fbf:	20227373 	eorcs	r7, r2, r3, ror r3
 8015fc3:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 8015fc7:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015fcb:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8015fcf:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8015fd3:	0a3e656c 	beq	8faf58b <__exidx_end+0xf9833b>
 8015fd7:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8015fdb:	0a3e6461 	beq	8faf167 <__exidx_end+0xf97f17>
 8015fdf:	646f623c 	strbtvs	r6, [pc], #-572	; 8015fe7 <index_html+0x6c>
 8015fe3:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8015fe7:	6165683c 	cmnvs	r5, ip, lsr r8
 8015feb:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8015fef:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8015ff3:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8015ff7:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 8015ffb:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8015fff:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8016003:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8016007:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801600b:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 801600f:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8016013:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8016017:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 801601b:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 801601f:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8016023:	6f746365 	svcvs	0x00746365
 8016027:	20227972 	eorcs	r7, r2, r2, ror r9
 801602b:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 801602f:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 8016033:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8016037:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801603b:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 801603f:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 8016043:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8016047:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 801604b:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 801604f:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 8016053:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 8016057:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 801605b:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 801605f:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8016063:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 8016067:	20227478 	eorcs	r7, r2, r8, ror r4
 801606b:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801606f:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 8016073:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 8016077:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 801607b:	0a3e656c 	beq	8faf633 <__exidx_end+0xf983e3>
 801607f:	6f663c09 	svcvs	0x00663c09
 8016083:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 8016087:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 801608b:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 801608f:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 8016093:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016097:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 801609b:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 801609f:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 80160a3:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 80160a7:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 80160ab:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 80160af:	20747069 	rsbscs	r7, r4, r9, rrx
 80160b3:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 80160b7:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 80160bb:	6a2e7865 	bvs	8bb4257 <__exidx_end+0xb9d007>
 80160bf:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 80160c3:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 80160c7:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 80160cb:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 80160cf:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 80160d3:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80160d7:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 80160db:	 	svcvs	0x0062000a

080160dd <styles_css>:
 80160dd:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80160e1:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80160e5:	63616220 	cmnvs	r1, #32, 4
 80160e9:	6f72676b 	svcvs	0x0072676b
 80160ed:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 80160f1:	6f6c6f63 	svcvs	0x006c6f63
 80160f5:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 80160f9:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 80160fd:	30322c30 	eorscc	r2, r2, r0, lsr ip
 8016101:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8016105:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8016109:	6f6c6f63 	svcvs	0x006c6f63
 801610d:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8016111:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8016115:	202c3535 	eorcs	r3, ip, r5, lsr r5
 8016119:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 801611d:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 8016121:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8016125:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 8016129:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801612d:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016131:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016135:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8016139:	0a3b7865 	beq	8ef42d5 <__exidx_end+0xedd085>
 801613d:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 8016141:	0a7b2069 	beq	9ede2ed <__exidx_end+0x1ec709d>
 8016145:	696c2020 	stmdbvs	ip!, {r5, sp}^
 8016149:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 801614d:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 8016151:	6f6e203a 	svcvs	0x006e203a
 8016155:	0a3b656e 	beq	8eef715 <__exidx_end+0xed84c5>
 8016159:	616d2020 	cmnvs	sp, r0, lsr #32
 801615d:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 8016161:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 8016165:	70352078 	eorsvc	r2, r5, r8, ror r0
 8016169:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 801616d:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 8016171:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8016175:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8016179:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801617d:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016181:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8016185:	0a3b7865 	beq	8ef4321 <__exidx_end+0xedd0d1>
 8016189:	6f622020 	svcvs	0x00622020
 801618d:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8016191:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8016195:	3a737569 	bcc	9cf3741 <__exidx_end+0x1cdc4f1>
 8016199:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 801619d:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80161a1:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80161a5:	203a7265 	eorscs	r7, sl, r5, ror #4
 80161a9:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80161ad:	72672064 	rsbvc	r2, r7, #100	; 0x64
 80161b1:	31207965 			; <UNDEFINED> instruction: 0x31207965
 80161b5:	0a3b7870 	beq	8ef437d <__exidx_end+0xedd12d>
 80161b9:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 80161bd:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 80161c1:	0a7b2072 	beq	9ede391 <__exidx_end+0x1ec7141>
 80161c5:	69642020 	stmdbvs	r4!, {r5, sp}^
 80161c9:	616c7073 	smcvs	50947	; 0xc703
 80161cd:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 80161d1:	3b78656c 	blcc	9e2f789 <__exidx_end+0x1e18539>
 80161d5:	6a20200a 	bvs	881e205 <__exidx_end+0x806fb5>
 80161d9:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 80161dd:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 80161e1:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 80161e5:	203a746e 	eorscs	r7, sl, lr, ror #8
 80161e9:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 80161ed:	0a3b7265 	beq	8ef2b89 <__exidx_end+0xedb939>
 80161f1:	6f622020 	svcvs	0x00622020
 80161f5:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 80161f9:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 80161fd:	3a737569 	bcc	9cf37a9 <__exidx_end+0x1cdc559>
 8016201:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8016205:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8016209:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801620d:	203a7265 	eorscs	r7, sl, r5, ror #4
 8016211:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016215:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8016219:	31207965 			; <UNDEFINED> instruction: 0x31207965
 801621d:	0a3b7870 	beq	8ef43e5 <__exidx_end+0xedd195>
 8016221:	 	andmi	r0, r0, sp, ror sl

08016224 <HttpContent>:
 8016224:	08015b40 	stmdaeq	r1, {r6, r8, r9, fp, ip, lr}
 8016228:	080160dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sp, lr}
 801622c:	08015b4c 	stmdaeq	r1, {r2, r3, r6, r8, r9, fp, ip, lr}
 8016230:	0801623c 	stmdaeq	r1, {r2, r3, r4, r5, r9, sp, lr}
 8016234:	08015b34 	stmdaeq	r1, {r2, r4, r5, r8, r9, fp, ip, lr}
 8016238:	08015f7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}

0801623c <index_js>:
 801623c:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8016240:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8016244:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8016248:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801624c:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016250:	6a284e4f 	bvs	8a29b94 <__exidx_end+0xa12944>
 8016254:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016258:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801625c:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8016260:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 8016264:	6a2f273d 	bvs	8bdff60 <__exidx_end+0xbc8d10>
 8016268:	2f6e6f73 	svccs	0x006e6f73
 801626c:	202b2027 	eorcs	r2, fp, r7, lsr #32
 8016270:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8016274:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8016278:	20797274 	rsbscs	r7, r9, r4, ror r2
 801627c:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8016280:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 8016284:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 8016288:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 801628c:	20746961 	rsbscs	r6, r4, r1, ror #18
 8016290:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 8016294:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 8016298:	0a3b296c 	beq	8ee0850 <__exidx_end+0xec9600>
 801629c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 80162a0:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 80162a4:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 80162a8:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 80162ac:	73657220 	cmnvc	r5, #32, 4
 80162b0:	6f736a2e 	svcvs	0x00736a2e
 80162b4:	3b29286e 	blcc	8a60474 <__exidx_end+0xa49224>
 80162b8:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 80162bc:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 80162c0:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 80162c4:	6f727265 	svcvs	0x00727265
 80162c8:	7b202972 	blvc	8820898 <__exidx_end+0x809648>
 80162cc:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80162d0:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 80162d4:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 80162d8:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 80162dc:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 80162e0:	3b29726f 	blcc	8a72ca4 <__exidx_end+0xa5ba54>
 80162e4:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 80162e8:	0a0a7d0a 	beq	82b5718 <__exidx_end+0x29e4c8>
 80162ec:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80162f0:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80162f4:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80162f8:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 80162fc:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8016300:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8016304:	20292874 	eorcs	r2, r9, r4, ror r8
 8016308:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 801630c:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8016310:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016314:	6177613d 	cmnvs	r7, sp, lsr r1
 8016318:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801631c:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016320:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016324:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016328:	0a3b2927 	beq	8ee07cc <__exidx_end+0xec957c>
 801632c:	6f640909 	svcvs	0x00640909
 8016330:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8016334:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8016338:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 801633c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8016340:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8016344:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8016348:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 801634c:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8016350:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8016354:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8016358:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 801635c:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8016360:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 8016364:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 8016368:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 801636c:	2b656d61 	blcs	99718f8 <__exidx_end+0x195a6a8>
 8016370:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80162f0 <index_js+0xb4>
 8016374:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8016378:	2b223e69 	blcs	88a5d24 <__exidx_end+0x88ead4>
 801637c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016380:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8016384:	6f6e2e74 	svcvs	0x006e2e74
 8016388:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 801638c:	2b657079 	blcs	9972578 <__exidx_end+0x195b328>
 8016390:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8016310 <index_js+0xd4>
 8016394:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8016398:	2b223e69 	blcs	88a5d44 <__exidx_end+0x88eaf4>
 801639c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80163a0:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 80163a4:	6f6e2e74 	svcvs	0x006e2e74
 80163a8:	702e6564 	eorvc	r6, lr, r4, ror #10
 80163ac:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 80163b0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 80163b4:	2f3c222b 	svccs	0x003c222b
 80163b8:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 80163bc:	0a7d0a3b 	beq	9f58cb0 <__exidx_end+0x1f41a60>
 80163c0:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 80163c4:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 80163c8:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 80163cc:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 80163d0:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 80163d4:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80163d8:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 80163dc:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 80163e0:	0a7b2029 	beq	9ede48c <__exidx_end+0x1ec723c>
 80163e4:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 80163e8:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 80163ec:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 80163f0:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80163f4:	6177613d 	cmnvs	r7, sp, lsr r1
 80163f8:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80163fc:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016400:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016404:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016408:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801640c:	3b292779 	blcc	8a601f8 <__exidx_end+0xa48fa8>
 8016410:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8016414:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8016418:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801641c:	0a22223d 	beq	889ed18 <__exidx_end+0x887ac8>
 8016420:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8016424:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8016428:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 801642c:	73656d61 	cmnvc	r5, #6208	; 0x1840
 8016430:	6a624f3d 	bvs	98aa12c <__exidx_end+0x1892edc>
 8016434:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8016438:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 801643c:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 8016440:	6f746365 	svcvs	0x00746365
 8016444:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 8016448:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801644c:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 8016450:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8016454:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 8016458:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 801645c:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 8016460:	6145726f 	cmpvs	r5, pc, ror #4
 8016464:	66286863 	strtvs	r6, [r8], -r3, ror #16
 8016468:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 801646c:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016470:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 8016474:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8016478:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 801647c:	20726176 	rsbscs	r6, r2, r6, ror r1
 8016480:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8016484:	203d2065 	eorscs	r2, sp, r5, rrx
 8016488:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801648c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8016490:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 8016494:	73656c69 	cmnvc	r5, #26880	; 0x6900
 8016498:	6b5b5d22 	blvs	96ed928 <__exidx_end+0x16d66d8>
 801649c:	3b5d7965 	blcc	9774a38 <__exidx_end+0x175d7e8>
 80164a0:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80164a4:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 80164a8:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 80164ac:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 80164b0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80164b4:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 80164b8:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 80164bc:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 80164c0:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 80164c4:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80164c8:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80164cc:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 80164d0:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80164d4:	0a3b223e 	beq	8ededd4 <__exidx_end+0xec7b84>
 80164d8:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 80164dc:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80164e0:	6f640909 	svcvs	0x00640909
 80164e4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 80164e8:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 80164ec:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 80164f0:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80164f4:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 80164f8:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 80164fc:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8016500:	6f746365 	svcvs	0x00746365
 8016504:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 8016508:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 801650c:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 8016510:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8016514:	3b6c6d74 	blcc	9b31aec <__exidx_end+0x1b1a89c>
 8016518:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801651c:	5f746567 	svcpl	0x00746567
 8016520:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8016524:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8016528:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 801652c:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 8016530:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8016534:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 8016538:	20636e79 	rsbcs	r6, r3, r9, ror lr
 801653c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8016540:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8016544:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 8016548:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 801654c:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016550:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 8016554:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8016558:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 801655c:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 8016560:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8016564:	6177613d 	cmnvs	r7, sp, lsr r1
 8016568:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 801656c:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016570:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016574:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016578:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 801657c:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8016580:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 8016584:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 8016588:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 801658c:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 8016590:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 8016594:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 8016598:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 801659c:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 80165a0:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 80165a4:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 80165a8:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 80165ac:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 80165b0:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 80165b4:	2b22563e 	blcs	88abeb4 <__exidx_end+0x894c64>
 80165b8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80165bc:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 80165c0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80165c4:	2b6e6f69 	blcs	9bb2370 <__exidx_end+0x1b9b120>
 80165c8:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8016548 <index_js+0x30c>
 80165cc:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80165d0:	2b223e69 	blcs	88a5f7c <__exidx_end+0x88ed2c>
 80165d4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80165d8:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 80165dc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 80165e0:	61642e64 	cmnvs	r4, r4, ror #28
 80165e4:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 80165e8:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 80165ec:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 80165f0:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 80165f4:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80165f8:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 80165fc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 8016600:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8016604:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 8016608:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 801660c:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 8016610:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8016614:	6f697372 	svcvs	0x00697372
 8016618:	6f622e6e 	svcvs	0x00622e6e
 801661c:	2b647261 	blcs	9932fa8 <__exidx_end+0x191bd58>
 8016620:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80165a0 <index_js+0x364>
 8016624:	3b223e69 	blcc	88a5fd0 <__exidx_end+0x88ed80>
 8016628:	0a0a7d0a 	beq	82b5a58 <__exidx_end+0x29e808>
 801662c:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8016630:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8016634:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8016638:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 801663c:	745f7465 	ldrbvc	r7, [pc], #-1125	; 8016644 <index_js+0x408>
 8016640:	73287478 			; <UNDEFINED> instruction: 0x73287478
 8016644:	20296c65 	eorcs	r6, r9, r5, ror #24
 8016648:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 801664c:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 8016650:	613d7478 	teqvs	sp, r8, ror r4
 8016654:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8016658:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 801665c:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 8016660:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 8016664:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8016668:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801666c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016670:	3b22223d 	blcc	889ef6c <__exidx_end+0x887d1c>
 8016674:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 8016678:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 801667c:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 8016680:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 8016684:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8016688:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 801668c:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 8016690:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 8016694:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8016698:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801669c:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 80166a0:	0a7b2029 	beq	9ede74c <__exidx_end+0x1ec74fc>
 80166a4:	61760909 	cmnvs	r6, r9, lsl #18
 80166a8:	61762072 	cmnvs	r6, r2, ror r0
 80166ac:	2065756c 	rsbcs	r7, r5, ip, ror #10
 80166b0:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 80166b4:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 80166b8:	6b5b5d6c 	blvs	96edc70 <__exidx_end+0x16d6a20>
 80166bc:	3b5d7965 	blcc	9774c58 <__exidx_end+0x175da08>
 80166c0:	2009090a 	andcs	r0, r9, sl, lsl #18
 80166c4:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80166c8:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 80166cc:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 80166d0:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80166d4:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 80166d8:	2f3c222b 	svccs	0x003c222b
 80166dc:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 80166e0:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80166e4:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80166e8:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80166ec:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 80166f0:	742f3c3e 	strtvc	r3, [pc], #-3134	; 80166f8 <index_js+0x4bc>
 80166f4:	3b223e72 	blcc	88a60c4 <__exidx_end+0x88ee74>
 80166f8:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 80166fc:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 8016700:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8016704:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 8016708:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 801670c:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 8016710:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8016714:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 8016718:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 801671c:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8016720:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8016724:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8016728:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 801672c:	0a3b6c6d 	beq	8ef18e8 <__exidx_end+0xeda698>
 8016730:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8016734:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8016738:	73694c72 	cmnvc	r9, #29184	; 0x7200
 801673c:	3b292874 	blcc	8a60914 <__exidx_end+0xa496c4>
 8016740:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8016744:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 8016748:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 801674c:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016750:	0a3b2928 	beq	8ee0bf8 <__exidx_end+0xec99a8>
 8016754:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8016758:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 801675c:	6f697372 	svcvs	0x00697372
 8016760:	3b29286e 	blcc	8a60920 <__exidx_end+0xa496d0>
 8016764:	0000000a 	andeq	r0, r0, sl

08016768 <s_aStorSize>:
 8016768:	00000060 	andeq	r0, r0, r0, rrx
 801676c:	00000090 	muleq	r0, r0, r0
 8016770:	00000020 	andeq	r0, r0, r0, lsr #32
 8016774:	00000040 	andeq	r0, r0, r0, asr #32
 8016778:	00000060 	andeq	r0, r0, r0, rrx
 801677c:	00000040 	andeq	r0, r0, r0, asr #32
 8016780:	00000020 	andeq	r0, r0, r0, lsr #32
 8016784:	00000020 	andeq	r0, r0, r0, lsr #32
 8016788:	000001e0 	andeq	r0, r0, r0, ror #3
 801678c:	00000040 	andeq	r0, r0, r0, asr #32
 8016790:	00000020 	andeq	r0, r0, r0, lsr #32
 8016794:	00000060 	andeq	r0, r0, r0, rrx
 8016798:	00000030 	andeq	r0, r0, r0, lsr r0
 801679c:	00000020 	andeq	r0, r0, r0, lsr #32
 80167a0:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 80167a4:	00000030 	andeq	r0, r0, r0, lsr r0
 80167a8:	00000040 	andeq	r0, r0, r0, asr #32
 80167ac:	00000020 	andeq	r0, r0, r0, lsr #32
 80167b0:	00000060 	andeq	r0, r0, r0, rrx
 80167b4:	00000020 	andeq	r0, r0, r0, lsr #32
 80167b8:	00000400 	andeq	r0, r0, r0, lsl #8
 80167bc:	00000020 	andeq	r0, r0, r0, lsr #32
 80167c0:	00000020 	andeq	r0, r0, r0, lsr #32
 80167c4:	00000040 	andeq	r0, r0, r0, asr #32
 80167c8:	00000060 	andeq	r0, r0, r0, rrx
 80167cc:	00000020 	andeq	r0, r0, r0, lsr #32
 80167d0:	00000020 	andeq	r0, r0, r0, lsr #32
 80167d4:	00000020 	andeq	r0, r0, r0, lsr #32

080167d8 <vtable for StoreArtNet>:
	...
 80167e0:	0800e0fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, sp, lr, pc}
 80167e4:	0800e2c5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sp, lr, pc}
 80167e8:	0800e105 	stmdaeq	r0, {r0, r2, r8, sp, lr, pc}
 80167ec:	0800e2d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sp, lr, pc}
 80167f0:	0800e129 	stmdaeq	r0, {r0, r3, r5, r8, sp, lr, pc}
 80167f4:	0800e159 	stmdaeq	r0, {r0, r3, r4, r6, r8, sp, lr, pc}
 80167f8:	0800e185 	stmdaeq	r0, {r0, r2, r7, r8, sp, lr, pc}
 80167fc:	0800e1c1 	stmdaeq	r0, {r0, r6, r7, r8, sp, lr, pc}
 8016800:	0800e1f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, sp, lr, pc}
 8016804:	0800e225 	stmdaeq	r0, {r0, r2, r5, r9, sp, lr, pc}
 8016808:	0800e275 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, sp, lr, pc}
 801680c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8016810:	00000000 	andeq	r0, r0, r0
 8016814:	0800e0ff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, sp, lr, pc}
 8016818:	0800e2d1 	stmdaeq	r0, {r0, r4, r6, r7, r9, sp, lr, pc}
 801681c:	0800e151 	stmdaeq	r0, {r0, r4, r6, r8, sp, lr, pc}
 8016820:	0800e17d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, sp, lr, pc}
 8016824:	0800e1b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, sp, lr, pc}
 8016828:	0800e1e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, sp, lr, pc}
 801682c:	0800e21d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sp, lr, pc}
 8016830:	0800e26d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sp, lr, pc}
 8016834:	0800e2bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, sp, lr, pc}

08016838 <vtable for StoreDisplayUdf>:
	...
 8016840:	0800e315 	stmdaeq	r0, {r0, r2, r4, r8, r9, sp, lr, pc}
 8016844:	0800e35d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sp, lr, pc}
 8016848:	0800e339 	stmdaeq	r0, {r0, r3, r4, r5, r8, r9, sp, lr, pc}
 801684c:	0800e319 	stmdaeq	r0, {r0, r3, r4, r8, r9, sp, lr, pc}

08016850 <vtable for StoreDmxSend>:
	...
 8016858:	0800e37d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, sp, lr, pc}
 801685c:	0800e3c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, r9, sp, lr, pc}
 8016860:	0800e3a1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sp, lr, pc}
 8016864:	0800e381 	stmdaeq	r0, {r0, r7, r8, r9, sp, lr, pc}

08016868 <vtable for StoreNetwork>:
	...
 8016870:	0800e3e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sp, lr, pc}
 8016874:	0800e4f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, sl, sp, lr, pc}
 8016878:	0800e3ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sp, lr, pc}
 801687c:	0800e50d 	stmdaeq	r0, {r0, r2, r3, r8, sl, sp, lr, pc}
 8016880:	0800e49d 	stmdaeq	r0, {r0, r2, r3, r4, r7, sl, sp, lr, pc}
 8016884:	0800e471 	stmdaeq	r0, {r0, r4, r5, r6, sl, sp, lr, pc}
 8016888:	0800e441 	stmdaeq	r0, {r0, r6, sl, sp, lr, pc}
 801688c:	0800e4c9 	stmdaeq	r0, {r0, r3, r6, r7, sl, sp, lr, pc}
 8016890:	0800e411 	stmdaeq	r0, {r0, r4, sl, sp, lr, pc}
 8016894:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8016898:	00000000 	andeq	r0, r0, r0
 801689c:	0800e3e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8, r9, sp, lr, pc}
 80168a0:	0800e505 	stmdaeq	r0, {r0, r2, r8, sl, sp, lr, pc}
 80168a4:	0800e4c1 	stmdaeq	r0, {r0, r6, r7, sl, sp, lr, pc}
 80168a8:	0800e495 	stmdaeq	r0, {r0, r2, r4, r7, sl, sp, lr, pc}
 80168ac:	0800e469 	stmdaeq	r0, {r0, r3, r5, r6, sl, sp, lr, pc}
 80168b0:	0800e4f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, sl, sp, lr, pc}
 80168b4:	0800e439 	stmdaeq	r0, {r0, r3, r4, r5, sl, sp, lr, pc}

080168b8 <vtable for StoreRDMDevice>:
	...
 80168c0:	0800e541 	stmdaeq	r0, {r0, r6, r8, sl, sp, lr, pc}
 80168c4:	0800e5b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, sl, sp, lr, pc}
 80168c8:	0800e549 	stmdaeq	r0, {r0, r3, r6, r8, sl, sp, lr, pc}
 80168cc:	0800e5c5 	stmdaeq	r0, {r0, r2, r6, r7, r8, sl, sp, lr, pc}
 80168d0:	0800e56d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr, pc}
 80168d4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80168d8:	00000000 	andeq	r0, r0, r0
 80168dc:	0800e543 	stmdaeq	r0, {r0, r1, r6, r8, sl, sp, lr, pc}
 80168e0:	0800e5bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, sl, sp, lr, pc}
 80168e4:	0800e5a9 	stmdaeq	r0, {r0, r3, r5, r7, r8, sl, sp, lr, pc}

080168e8 <vtable for StoreRemoteConfig>:
	...
 80168f0:	0800e5fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, sl, sp, lr, pc}
 80168f4:	0800e645 	stmdaeq	r0, {r0, r2, r6, r9, sl, sp, lr, pc}
 80168f8:	0800e621 	stmdaeq	r0, {r0, r5, r9, sl, sp, lr, pc}
 80168fc:	0800e601 	stmdaeq	r0, {r0, r9, sl, sp, lr, pc}
 8016900:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8016904:	74654400 	strbtvc	r4, [r5], #-1024	; 0xfffffc00
 8016908:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 801690c:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8016910:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8016914:	65732068 	ldrbvs	r2, [r3, #-104]!	; 0xffffff98
 8016918:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 801691c:	7a697320 	bvc	9a735a4 <__exidx_end+0x1a5c354>
 8016920:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 8016924:	746f7420 	strbtvc	r7, [pc], #-1056	; 801692c <vtable for StoreRemoteConfig+0x44>
 8016928:	25206c61 	strcs	r6, [r0, #-3169]!	; 0xfffff39f
 801692c:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
 8016930:	0a736574 	beq	9ceff08 <__exidx_end+0x1cd8cb8>
 8016934:	70637400 	rsbvc	r7, r3, r0, lsl #8
 8016938:	6765625f 			; <UNDEFINED> instruction: 0x6765625f
 801693c:	203a6e69 	eorscs	r6, sl, r9, ror #28
 8016940:	206f6f74 	rsbcs	r6, pc, r4, ror pc	; <UNPREDICTABLE>
 8016944:	796e616d 	stmdbvc	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 8016948:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 801694c:	7463656e 	strbtvc	r6, [r3], #-1390	; 0xfffffa92
 8016950:	736e6f69 	cmnvc	lr, #420	; 0x1a4
 8016954:	6e696200 	cdpvs	2, 6, cr6, cr9, cr0, {0}
 8016958:	6e750064 	cdpvs	0, 7, cr0, cr5, cr4, {3}
 801695c:	646e6962 	strbtvs	r6, [lr], #-2402	; 0xfffff69e
 8016960:	5241000a 	subpl	r0, r1, #10
 8016964:	6f6c2050 	svcvs	0x006c2050
 8016968:	70756b6f 	rsbsvc	r6, r5, pc, ror #22
 801696c:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
 8016970:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8016974:	64203e2d 	strtvs	r3, [r0], #-3629	; 0xfffff1d3
 8016978:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 801697c:	6720746c 	strvs	r7, [r0, -ip, ror #8]!
 8016980:	77657461 	strbvc	r7, [r5, -r1, ror #8]!
 8016984:	000a7961 	andeq	r7, sl, r1, ror #18
 8016988:	20505241 	subscs	r5, r0, r1, asr #4
 801698c:	6b6f6f6c 	blvs	9bf2744 <__exidx_end+0x1bdb4f4>
 8016990:	66207075 			; <UNDEFINED> instruction: 0x66207075
 8016994:	656c6961 	strbvs	r6, [ip, #-2401]!	; 0xfffff69f
 8016998:	 	vmlsmi.f32	s0, s0, s9

0801699b <NetworkConst::MSG_NETWORK_INIT>:
 801699b:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 801699f:	206b726f 	rsbcs	r7, fp, pc, ror #4
 80169a3:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 80169a7:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 80169ab:	302e302e 	eorcc	r3, lr, lr, lsr #32
 80169af:	3135322e 	teqcc	r5, lr, lsr #4
 80169b3:	63745f00 	cmnvs	r4, #0, 30
 80169b7:	6f6c2e70 	svcvs	0x006c2e70
 80169bb:	006c6163 	rsbeq	r6, ip, r3, ror #2
 80169bf:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 80169c3:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 80169c7:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 80169cf <NetworkConst::MSG_NETWORK_INIT+0x34>
 80169cb:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 80169cf:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 8015b73 <RemoteConfig::s_TXT+0x113>
 80169d3:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 80169d7:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 80169db:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 80169df:	20000a53 	andcs	r0, r0, r3, asr sl
 80169e3:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 80169e7:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 80169eb:	0a676e69 	beq	99f2397 <__exidx_end+0x19db147>
 80169ef:	614e2000 	mrsvs	r2, (UNDEF: 78)
 80169f3:	3a20656d 	bcc	882ffaf <__exidx_end+0x818d5f>
 80169f7:	0a732520 	beq	9cdfe7f <__exidx_end+0x1cc8c2f>
 80169fb:	73252000 			; <UNDEFINED> instruction: 0x73252000
 80169ff:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8016a03:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016a07:	30687465 	rsbcc	r7, r8, r5, ror #8
 8016a0b:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 8016a0f:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 8016a13:	5f656369 	svcpl	0x00656369
 8016a17:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 8016a1b:	6b726f77 	blvs	9cb27ff <__exidx_end+0x1c9b5af>
 8016a1f:	4820000a 	stmdami	r0!, {r1, r3}
 8016a23:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 8016a27:	20656d61 	rsbcs	r6, r5, r1, ror #26
 8016a2b:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016a2f:	20000a73 	andcs	r0, r0, r3, ror sl
 8016a33:	614e6649 	cmpvs	lr, r9, asr #12
 8016a37:	2020656d 	eorcs	r6, r0, sp, ror #10
 8016a3b:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016a3f:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8016a43:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016a47:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 8016a4b:	20202074 	eorcs	r2, r0, r4, ror r0
 8016a4f:	3a202020 	bcc	881ead7 <__exidx_end+0x807887>
 8016a53:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8016a57:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016a5b:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016a5f:	0a64252f 	beq	991ff23 <__exidx_end+0x1908cd3>
 8016a63:	654e2000 	strbvs	r2, [lr, #-0]
 8016a67:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 8016a6b:	2020206b 	eorcs	r2, r0, fp, rrx
 8016a6f:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016a73:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016a77:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016a7b:	20000a64 	andcs	r0, r0, r4, ror #20
 8016a7f:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 8016a83:	20796177 	rsbscs	r6, r9, r7, ror r1
 8016a87:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016a8b:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016a8f:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016a93:	0a64252e 	beq	991ff53 <__exidx_end+0x1908d03>
 8016a97:	72422000 	subvc	r2, r2, #0
 8016a9b:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 8016a9f:	20747361 	rsbscs	r7, r4, r1, ror #6
 8016aa3:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016aa7:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016aab:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016aaf:	20000a64 	andcs	r0, r0, r4, ror #20
 8016ab3:	2063614d 	rsbcs	r6, r3, sp, asr #2
 8016ab7:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016abb:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016abf:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016ac3:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8016ac7:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8016acb:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8016acf:	3a78322e 	bcc	9e2338f <__exidx_end+0x1e0c13f>
 8016ad3:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016ad7:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8016adb:	20000a78 	andcs	r0, r0, r8, ror sl
 8016adf:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 8016ae3:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016ae7:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016aeb:	000a6325 	andeq	r6, sl, r5, lsr #6
 8016aef:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 8016af3:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 8016af7:	 	rsbvc	r0, r9, r0, asr r0

08016af9 <NetworkParamsConst::IP_ADDRESS>:
 8016af9:	615f7069 	cmpvs	pc, r9, rrx
 8016afd:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8016b01:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08016b04 <NetworkParamsConst::DEFAULT_GATEWAY>:
 8016b04:	61666564 	cmnvs	r6, r4, ror #10
 8016b08:	5f746c75 	svcpl	0x00746c75
 8016b0c:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8016b10:	00796177 	rsbseq	r6, r9, r7, ror r1

08016b14 <NetworkParamsConst::DHCP_RETRY_TIME>:
 8016b14:	70636864 	rsbvc	r6, r3, r4, ror #16
 8016b18:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8016b1c:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8016b24 <NetworkParamsConst::HOSTNAME>
 8016b20:	00656d69 	rsbeq	r6, r5, r9, ror #26

08016b24 <NetworkParamsConst::HOSTNAME>:
 8016b24:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8016b28:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08016b2d <NetworkParamsConst::NET_MASK>:
 8016b2d:	5f74656e 	svcpl	0x0074656e
 8016b31:	6b73616d 	blvs	9cef0ed <__exidx_end+0x1cd7e9d>
	...

08016b36 <NetworkParamsConst::USE_DHCP>:
 8016b36:	5f657375 	svcpl	0x00657375
 8016b3a:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08016b3f <NetworkParamsConst::FILE_NAME>:
 8016b3f:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8016b43:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8016b47:	00747874 	rsbseq	r7, r4, r4, ror r8
 8016b4b:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 8016b4f:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 8016b53:	61747320 	cmnvs	r4, r0, lsr #6
 8016b57:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8016b5b:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016b5f:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016b63:	252f6425 	strcs	r6, [pc, #-1061]!	; 8016746 <index_js+0x50a>
 8016b67:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8016b6b:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 8016b6f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016b73:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016b77:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8016b7b:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 8016b7f:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016b83:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016b87:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8016b8b:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 8016b8f:	20657261 	rsbcs	r7, r5, r1, ror #4
 8016b93:	2a2e2556 	bcs	8ba00f3 <__exidx_end+0xb88ea3>
 8016b97:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 8016b9b:	72205043 	eorvc	r5, r0, #67	; 0x43
 8016b9f:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 8016ba3:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8016ba7:	50434844 	subpl	r4, r3, r4, asr #16
 8016bab:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8016baf:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8016bb3:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 8016bb7:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8016bbb:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8016bbf:	6f647475 	svcvs	0x00647475
 8016bc3:	00006e77 	andeq	r6, r0, r7, ror lr
	...

08016bc8 <pArray>:
 8016bc8:	08016c5c 	stmdaeq	r1, {r2, r3, r4, r6, sl, fp, sp, lr}
 8016bcc:	08016c18 	stmdaeq	r1, {r3, r4, sl, fp, sp, lr}
 8016bd0:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 8016bd4:	08016c62 	stmdaeq	r1, {r1, r5, r6, sl, fp, sp, lr}
 8016bd8:	08016dc0 	stmdaeq	r1, {r6, r7, r8, sl, fp, sp, lr}
 8016bdc:	08016c23 	stmdaeq	r1, {r0, r1, r5, sl, fp, sp, lr}
 8016be0:	080153b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, r9, ip, lr}
 8016be4:	08016b24 	stmdaeq	r1, {r2, r5, r8, r9, fp, sp, lr}
 8016be8:	08016d26 	stmdaeq	r1, {r1, r2, r5, r8, sl, fp, sp, lr}
 8016bec:	08016d36 	stmdaeq	r1, {r1, r2, r4, r5, r8, sl, fp, sp, lr}
 8016bf0:	08016d46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, sp, lr}
 8016bf4:	08016d56 	stmdaeq	r1, {r1, r2, r4, r6, r8, sl, fp, sp, lr}
 8016bf8:	08016b2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, fp, sp, lr}
 8016bfc:	08016dae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, sl, fp, sp, lr}
 8016c00:	080153c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, ip, lr}
 8016c04:	080153da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, r9, ip, lr}
 8016c08:	080153f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r8, r9, ip, lr}
 8016c0c:	0801540a 	stmdaeq	r1, {r1, r3, sl, ip, lr}
 8016c10:	08016b04 	stmdaeq	r1, {r2, r8, r9, fp, sp, lr}
 8016c14:	08016c30 	stmdaeq	r1, {r4, r5, sl, fp, sp, lr}

08016c18 <DisplayUdfParamsConst::BOARD_NAME>:
 8016c18:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 8016c1c:	616e5f64 	cmnvs	lr, r4, ror #30
 8016c20:	 	tstvs	r0, sp, ror #10

08016c23 <DisplayUdfParamsConst::ACTIVE_PORTS>:
 8016c23:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8016c27:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 8016c2b:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

08016c30 <DisplayUdfParamsConst::DMX_DIRECTION>:
 8016c30:	5f786d64 	svcpl	0x00786d64
 8016c34:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016c38:	6f697463 	svcvs	0x00697463
 8016c3c:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

08016c3e <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 8016c3e:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 8016c42:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016c46:	756f656d 	strbvc	r6, [pc, #-1389]!	; 80166e1 <index_js+0x4a5>
 8016c4a:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

08016c4c <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 8016c4c:	70696c66 	rsbvc	r6, r9, r6, ror #24
 8016c50:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 8016c54:	61636974 	smcvs	13972	; 0x3694
 8016c58:	00796c6c 	rsbseq	r6, r9, ip, ror #24

08016c5c <DisplayUdfParamsConst::TITLE>:
 8016c5c:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8016c60:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

08016c62 <DisplayUdfParamsConst::VERSION>:
 8016c62:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016c66:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08016c6a <DisplayUdfParamsConst::FILE_NAME>:
 8016c6a:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8016c6e:	2e79616c 	rpwcsez	f6, f1, #4.0
 8016c72:	00747874 	rsbseq	r7, r4, r4, ror r8

08016c76 <DisplayUdfParamsConst::INTENSITY>:
 8016c76:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8016c7a:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8016c7e:	20200079 	eorcs	r0, r0, r9, ror r0
 8016c82:	4f002020 	svcmi	0x00002020
 8016c86:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8016c8a:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8016c8e:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 8016c92:	20632520 	rsbcs	r2, r3, r0, lsr #10
 8016c96:	4f007325 	svcmi	0x00007325
 8016c9a:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8016c9e:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 8016ca2:	3a64253a 	bcc	9920192 <__exidx_end+0x1908f42>
 8016ca6:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8016caa:	73252063 			; <UNDEFINED> instruction: 0x73252063
 8016cae:	3a632500 	bcc	98e00b6 <__exidx_end+0x18c8e66>
 8016cb2:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8016cb6:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016cba:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016cbe:	3a504100 	bcc	94270c6 <__exidx_end+0x140fe76>
 8016cc2:	00642520 	rsbeq	r2, r4, r0, lsr #10
 8016cc6:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 8016cca:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8016cce:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 8016cd2:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 8016cd6:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8016cda:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016cde:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016ce2:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016ce6:	2c226425 	cfstrscs	mvf6, [r2], #-148	; 0xffffff6c
 8016cea:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8016cee:	2e64253d 	mcrcs	5, 3, r2, cr4, cr13, {1}
 8016cf2:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016cf6:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016cfa:	2023000a 	eorcs	r0, r3, sl
 8016cfe:	23207325 			; <UNDEFINED> instruction: 0x23207325
 8016d02:	2522000a 	strcs	r0, [r2, #-10]!
 8016d06:	223a2273 	eorscs	r2, sl, #805306375	; 0x30000007
 8016d0a:	782a2e25 	stmdavc	sl!, {r0, r2, r5, r9, sl, fp, sp}
 8016d0e:	23002c22 	movwcs	r2, #3106	; 0xc22
 8016d12:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8016d16:	0a782a2e 	beq	9e215d6 <__exidx_end+0x1e0a386>
	...

08016d1b <LightSetParamsConst::MERGE_MODE>:
 8016d1b:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8016d1f:	6f6d5f65 	svcvs	0x006d5f65
 8016d23:	 	strvc	r6, [r0, #-1380]	; 0xfffffa9c

08016d26 <LightSetParamsConst::UNIVERSE_PORT>:
 8016d26:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016d2a:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016d2e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016d32:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8016d36:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016d3a:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016d3e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016d42:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016d46:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016d4a:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016d4e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016d52:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8016d56:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016d5a:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016d5e:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016d62:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016d66 <LightSetParamsConst::MERGE_MODE_PORT>:
 8016d66:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8016d6a:	6f6d5f65 	svcvs	0x006d5f65
 8016d6e:	705f6564 	subsvc	r6, pc, r4, ror #10
 8016d72:	5f74726f 	svcpl	0x0074726f
 8016d76:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 8016d7a:	5f656772 	svcpl	0x00656772
 8016d7e:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8016d82:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016d86:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016d8a:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8016d8e:	6f6d5f65 	svcvs	0x006d5f65
 8016d92:	705f6564 	subsvc	r6, pc, r4, ror #10
 8016d96:	5f74726f 	svcpl	0x0074726f
 8016d9a:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 8016d9e:	5f656772 	svcpl	0x00656772
 8016da2:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8016da6:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016daa:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016dae <LightSetParamsConst::DMX_START_ADDRESS>:
 8016dae:	5f786d64 	svcpl	0x00786d64
 8016db2:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8016db6:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8016dba:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 8016dbe:	 	mrcvs	0, 3, r0, cr5, cr3, {3}

08016dc0 <LightSetParamsConst::UNIVERSE>:
 8016dc0:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016dc4:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

08016dc9 <LightSetParamsConst::DIRECTION>:
 8016dc9:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016dcd:	6f697463 	svcvs	0x00697463
 8016dd1:	6f705f6e 	svcvs	0x00705f6e
 8016dd5:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 8016dd9:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8016ddd:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8016de1:	5f6e6f69 	svcpl	0x006e6f69
 8016de5:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8016de9:	0000625f 	andeq	r6, r0, pc, asr r2
 8016ded:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016df1:	6f697463 	svcvs	0x00697463
 8016df5:	6f705f6e 	svcvs	0x00705f6e
 8016df9:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 8016dfd:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8016e01:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8016e05:	5f6e6f69 	svcpl	0x006e6f69
 8016e09:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8016e0d:	0000645f 	andeq	r6, r0, pc, asr r4
 8016e11:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8016e15:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8016e19:	66207961 	strtvs	r7, [r0], -r1, ror #18
 8016e1d:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8016e21:	31485300 	mrscc	r5, (UNDEF: 120)
 8016e25:	00363031 	eorseq	r3, r6, r1, lsr r0
 8016e29:	31445353 	cmpcc	r4, r3, asr r3
 8016e2d:	00363033 	eorseq	r3, r6, r3, lsr r0
 8016e31:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 8016e35:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 8016e39:	000a2964 	andeq	r2, sl, r4, ror #18
 8016e3d:	aaeeaa40 	bge	7bc1745 <__stack_size+0x7bbff45>
 8016e41:	 	andmi	r0, r0, lr, ror #1

08016e44 <_OledFont8x6>:
 8016e44:	00000040 	andeq	r0, r0, r0, asr #32
 8016e48:	40000000 	andmi	r0, r0, r0
 8016e4c:	005f0000 	subseq	r0, pc, r0
 8016e50:	00400000 	subeq	r0, r0, r0
 8016e54:	00070007 	andeq	r0, r7, r7
 8016e58:	7f144000 	svcvc	0x00144000
 8016e5c:	00147f14 	andseq	r7, r4, r4, lsl pc
 8016e60:	7f2a2440 	svcvc	0x002a2440
 8016e64:	4000122a 	andmi	r1, r0, sl, lsr #4
 8016e68:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8016e6c:	36400062 	strbcc	r0, [r0], -r2, rrx
 8016e70:	50205649 	eorpl	r5, r0, r9, asr #12
 8016e74:	08004000 	stmdaeq	r0, {lr}
 8016e78:	00000307 	andeq	r0, r0, r7, lsl #6
 8016e7c:	221c0040 	andscs	r0, ip, #64	; 0x40
 8016e80:	40000041 	andmi	r0, r0, r1, asr #32
 8016e84:	1c224100 	stfnes	f4, [r2], #-0
 8016e88:	2a400000 	bcs	9016e90 <__exidx_end+0xfffc40>
 8016e8c:	2a1c7f1c 	bcs	8736b04 <__exidx_end+0x71f8b4>
 8016e90:	08084000 	stmdaeq	r8, {lr}
 8016e94:	0008083e 	andeq	r0, r8, lr, lsr r8
 8016e98:	70800040 	addvc	r0, r0, r0, asr #32
 8016e9c:	40000030 	andmi	r0, r0, r0, lsr r0
 8016ea0:	08080808 	stmdaeq	r8, {r3, fp}
 8016ea4:	00400008 	subeq	r0, r0, r8
 8016ea8:	00606000 	rsbeq	r6, r0, r0
 8016eac:	10204000 	eorne	r4, r0, r0
 8016eb0:	00020408 	andeq	r0, r2, r8, lsl #8
 8016eb4:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 8016eb8:	40003e45 	andmi	r3, r0, r5, asr #28
 8016ebc:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8016ec0:	72400000 	subvc	r0, r0, #0
 8016ec4:	46494949 	strbmi	r4, [r9], -r9, asr #18
 8016ec8:	41214000 			; <UNDEFINED> instruction: 0x41214000
 8016ecc:	00334d49 	eorseq	r4, r3, r9, asr #26
 8016ed0:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8016ed4:	4000107f 	andmi	r1, r0, pc, ror r0
 8016ed8:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8016edc:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8016ee0:	3149494a 	cmpcc	r9, sl, asr #18
 8016ee4:	21414000 	mrscs	r4, (UNDEF: 65)
 8016ee8:	00070911 	andeq	r0, r7, r1, lsl r9
 8016eec:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8016ef0:	40003649 	andmi	r3, r0, r9, asr #12
 8016ef4:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 8016ef8:	0040001e 	subeq	r0, r0, lr, lsl r0
 8016efc:	00001400 	andeq	r1, r0, r0, lsl #8
 8016f00:	40004000 	andmi	r4, r0, r0
 8016f04:	00000034 	andeq	r0, r0, r4, lsr r0
 8016f08:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 8016f0c:	40004122 	andmi	r4, r0, r2, lsr #2
 8016f10:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 8016f14:	00400014 	subeq	r0, r0, r4, lsl r0
 8016f18:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 8016f1c:	01024000 	mrseq	r4, (UNDEF: 2)
 8016f20:	00060959 	andeq	r0, r6, r9, asr r9
 8016f24:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 8016f28:	40004e59 	andmi	r4, r0, r9, asr lr
 8016f2c:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8016f30:	7f40007c 	svcvc	0x0040007c
 8016f34:	36494949 	strbcc	r4, [r9], -r9, asr #18
 8016f38:	413e4000 	teqmi	lr, r0
 8016f3c:	00224141 	eoreq	r4, r2, r1, asr #2
 8016f40:	41417f40 	cmpmi	r1, r0, asr #30
 8016f44:	40003e41 	andmi	r3, r0, r1, asr #28
 8016f48:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8016f4c:	7f400041 	svcvc	0x00400041
 8016f50:	01090909 	tsteq	r9, r9, lsl #18
 8016f54:	413e4000 	teqmi	lr, r0
 8016f58:	00735141 	rsbseq	r5, r3, r1, asr #2
 8016f5c:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8016f60:	40007f08 	andmi	r7, r0, r8, lsl #30
 8016f64:	417f4100 	cmnmi	pc, r0, lsl #2
 8016f68:	20400000 	subcs	r0, r0, r0
 8016f6c:	013f4140 	teqeq	pc, r0, asr #2
 8016f70:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8016f74:	00412214 	subeq	r2, r1, r4, lsl r2
 8016f78:	40407f40 	submi	r7, r0, r0, asr #30
 8016f7c:	40004040 	andmi	r4, r0, r0, asr #32
 8016f80:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 8016f84:	7f40007f 	svcvc	0x0040007f
 8016f88:	7f100804 	svcvc	0x00100804
 8016f8c:	413e4000 	teqmi	lr, r0
 8016f90:	003e4141 	eorseq	r4, lr, r1, asr #2
 8016f94:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8016f98:	40000609 	andmi	r0, r0, r9, lsl #12
 8016f9c:	2151413e 	cmpcs	r1, lr, lsr r1
 8016fa0:	7f40005e 	svcvc	0x0040005e
 8016fa4:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 8016fa8:	49264000 	stmdbmi	r6!, {lr}
 8016fac:	00324949 	eorseq	r4, r2, r9, asr #18
 8016fb0:	7f010340 	svcvc	0x00010340
 8016fb4:	40000301 	andmi	r0, r0, r1, lsl #6
 8016fb8:	4040403f 	submi	r4, r0, pc, lsr r0
 8016fbc:	1f40003f 	svcne	0x0040003f
 8016fc0:	1f204020 	svcne	0x00204020
 8016fc4:	403f4000 	eorsmi	r4, pc, r0
 8016fc8:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 8016fcc:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 8016fd0:	40006314 	andmi	r6, r0, r4, lsl r3
 8016fd4:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 8016fd8:	61400003 	cmpvs	r0, r3
 8016fdc:	434d4959 	movtmi	r4, #55641	; 0xd959
 8016fe0:	7f004000 	svcvc	0x00004000
 8016fe4:	00414141 	subeq	r4, r1, r1, asr #2
 8016fe8:	08040240 	stmdaeq	r4, {r6, r9}
 8016fec:	40002010 	andmi	r2, r0, r0, lsl r0
 8016ff0:	41414100 	mrsmi	r4, (UNDEF: 81)
 8016ff4:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 8016ff8:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 8016ffc:	40404000 	submi	r4, r0, r0
 8017000:	00404040 	subeq	r4, r0, r0, asr #32
 8017004:	07030040 	streq	r0, [r3, -r0, asr #32]
 8017008:	40000008 	andmi	r0, r0, r8
 801700c:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 8017010:	7f400040 	svcvc	0x00400040
 8017014:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 8017018:	44384000 	ldrtmi	r4, [r8], #-0
 801701c:	00284444 	eoreq	r4, r8, r4, asr #8
 8017020:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 8017024:	40007f28 	andmi	r7, r0, r8, lsr #30
 8017028:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 801702c:	00400018 	subeq	r0, r0, r8, lsl r0
 8017030:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 8017034:	a4184000 	ldrge	r4, [r8], #-0
 8017038:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 801703c:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8017040:	40007804 	andmi	r7, r0, r4, lsl #16
 8017044:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 8017048:	20400000 	subcs	r0, r0, r0
 801704c:	003d4040 	eorseq	r4, sp, r0, asr #32
 8017050:	107f4000 	rsbsne	r4, pc, r0
 8017054:	00004428 	andeq	r4, r0, r8, lsr #8
 8017058:	7f410040 	svcvc	0x00410040
 801705c:	40000040 	andmi	r0, r0, r0, asr #32
 8017060:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 8017064:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8017068:	78040408 	stmdavc	r4, {r3, sl}
 801706c:	44384000 	ldrtmi	r4, [r8], #-0
 8017070:	00384444 	eorseq	r4, r8, r4, asr #8
 8017074:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 8017078:	40001824 	andmi	r1, r0, r4, lsr #16
 801707c:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8017080:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 8017084:	08040408 	stmdaeq	r4, {r3, sl}
 8017088:	54484000 	strbpl	r4, [r8], #-0
 801708c:	00245454 	eoreq	r5, r4, r4, asr r4
 8017090:	3f040440 	svccc	0x00040440
 8017094:	40002444 	andmi	r2, r0, r4, asr #8
 8017098:	2040403c 	subcs	r4, r0, ip, lsr r0
 801709c:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 80170a0:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 80170a4:	403c4000 	eorsmi	r4, ip, r0
 80170a8:	003c4030 	eorseq	r4, ip, r0, lsr r0
 80170ac:	10284440 	eorne	r4, r8, r0, asr #8
 80170b0:	40004428 	andmi	r4, r0, r8, lsr #8
 80170b4:	9090904c 	addsls	r9, r0, ip, asr #32
 80170b8:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 80170bc:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 80170c0:	08004000 	stmdaeq	r0, {lr}
 80170c4:	00004136 	andeq	r4, r0, r6, lsr r1
 80170c8:	77000040 	strvc	r0, [r0, -r0, asr #32]
 80170cc:	40000000 	andmi	r0, r0, r0
 80170d0:	08364100 	ldmdaeq	r6!, {r8, lr}
 80170d4:	02400000 	subeq	r0, r0, #0
 80170d8:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 80170dc:	263c4000 	ldrtcs	r4, [ip], -r0
 80170e0:	003c2623 	eorseq	r2, ip, r3, lsr #12

080170e4 <oled_128x32_init>:
 80170e4:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 80170e8:	4000d31f 	andmi	sp, r0, pc, lsl r3
 80170ec:	0020148d 	eoreq	r1, r0, sp, lsl #9
 80170f0:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 80170f4:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 80170f8:	a6a440db 	ssatge	r4, #5, fp, asr #1

080170fc <oled_128x64_init>:
 80170fc:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8017100:	4000d33f 	andmi	sp, r0, pc, lsr r3
 8017104:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8017108:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 801710c:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8017110:	a6a440db 	ssatge	r4, #5, fp, asr #1

08017114 <vtable for Ssd1306>:
	...
 801711c:	08012351 	stmdaeq	r1, {r0, r4, r6, r8, r9, sp}
 8017120:	0801237d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, sp}
 8017124:	08012695 	stmdaeq	r1, {r0, r2, r4, r7, r9, sl, sp}
 8017128:	08012619 	stmdaeq	r1, {r0, r3, r4, r9, sl, sp}
 801712c:	080124e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sl, sp}
 8017130:	0801239d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, sp}
 8017134:	080123c5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, sp}
 8017138:	080124bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, sl, sp}
 801713c:	08012475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, sp}
 8017140:	08012353 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, sp}
 8017144:	08012521 	stmdaeq	r1, {r0, r5, r8, sl, sp}
 8017148:	0801252d 	stmdaeq	r1, {r0, r2, r3, r5, r8, sl, sp}
 801714c:	08012547 	stmdaeq	r1, {r0, r1, r2, r6, r8, sl, sp}
 8017150:	08012355 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, sp}
 8017154:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8017158:	5b1b006d 	blpl	86d7314 <__exidx_end+0x6c00c4>
 801715c:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8017160:	31335b1b 	teqcc	r3, fp, lsl fp
 8017164:	5b1b006d 	blpl	86d7320 <__exidx_end+0x6c00d0>
 8017168:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 801716c:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8017170:	5b1b006d 	blpl	86d732c <__exidx_end+0x6c00dc>
 8017174:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 8017178:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 801717c:	205d732a 	subscs	r7, sp, sl, lsr #6
 8017180:	43207325 			; <UNDEFINED> instruction: 0x43207325
 8017184:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 8017188:	2064656c 	rsbcs	r6, r4, ip, ror #10
 801718c:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8017190:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 8017194:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 8017198:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 801719c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80171a0:	203a636f 	eorscs	r6, sl, pc, ror #6
 80171a4:	000a7525 	andeq	r7, sl, r5, lsr #10
 80171a8:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80171ac:	203a636f 	eorscs	r6, sl, pc, ror #6
 80171b0:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 80171b4:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 80171b8:	6b636f6c 	blvs	98f2f70 <__exidx_end+0x18dbd20>
 80171bc:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 80171c0:	000a7469 	andeq	r7, sl, r9, ror #8
 80171c4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80171c8:	203a636f 	eorscs	r6, sl, pc, ror #6
 80171cc:	6f6c4270 	svcvs	0x006c4270
 80171d0:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 80171d4:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 80171d8:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 80171dc:	7a697320 	bvc	9a73e64 <__exidx_end+0x1a5cc14>
 80171e0:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 80171e4:	6164202c 	cmnvs	r4, ip, lsr #32
 80171e8:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 80171ec:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 80171f0:	3a656572 	bcc	99707c0 <__exidx_end+0x1959570>
 80171f4:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 80171f8:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80171fc:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8017200:	203d2072 	eorscs	r2, sp, r2, ror r0
 8017204:	202c7025 	eorcs	r7, ip, r5, lsr #32
 8017208:	6f6c4270 	svcvs	0x006c4270
 801720c:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 8017210:	0a702520 	beq	9c20698 <__exidx_end+0x1c09448>
 8017214:	00000000 	andeq	r0, r0, r0

08017218 <days_of_month>:
 8017218:	0000001f 	andeq	r0, r0, pc, lsl r0
 801721c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8017220:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017224:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017228:	0000001f 	andeq	r0, r0, pc, lsl r0
 801722c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017230:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017234:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017238:	0000001e 	andeq	r0, r0, lr, lsl r0
 801723c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017240:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017244:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

08017248 <__exidx_start>:
 8017248:	7ffeff60 	svcvc	0x00feff60
 801724c:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08017250 <.ARM.attributes>:
 8017250:	00002e41 	andeq	r2, r0, r1, asr #28
 8017254:	61656100 	cmnvs	r5, r0, lsl #2
 8017258:	01006962 	tsteq	r0, r2, ror #18
 801725c:	00000024 	andeq	r0, r0, r4, lsr #32
 8017260:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 8017264:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 8017268:	0600334d 	streq	r3, [r0], -sp, asr #6
 801726c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8017270:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 8017274:	17011501 	strne	r1, [r1, -r1, lsl #10]
 8017278:	1a011803 	bne	805d28c <__exidx_end+0x4603c>
 801727c:	Address 0x000000000801727c is out of bounds.


Disassembly of section .data:

20000000 <DmxConfigUdp::Run()::pCmd>:
20000000:	20001a3d 	andcs	r1, r0, sp, lsr sl

20000004 <DmxConfigUdp::s_nHandle>:
20000004:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000008 <s_nDmxTransmitPeriod>:
20000008:	000061a8 	andeq	r6, r0, r8, lsr #3

2000000c <s_nDmxTransmitMabTime>:
2000000c:	0000000c 	andeq	r0, r0, ip

20000010 <s_nDmxTransmitBreakTime>:
20000010:	0000005c 	andeq	r0, r0, ip, asr r0

20000014 <s_multicast_mac>:
20000014:	005e0001 	subseq	r0, lr, r1
20000018:	00000000 	andeq	r0, r0, r0

2000001c <MDNS::s_nHandle>:
2000001c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000020 <next_block>:
20000020:	20016000 	andcs	r6, r1, r0

20000024 <s_block_bucket>:
20000024:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000034:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000044:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000054:	00000060 	andeq	r0, r0, r0, rrx
	...
20000064:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000074:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000084:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000094:	00000180 	andeq	r0, r0, r0, lsl #3
	...
200000a4:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000b4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000c4:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000d4:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000f4 <SystemCoreClock>:
200000f4:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000f8 <DmxInput::s_nStarted>:
200000f8:	00000000 	andeq	r0, r0, r0

200000fc <guard variable for lightset::Data::Get()::instance>:
200000fc:	00000000 	andeq	r0, r0, r0

20000100 <lightset::Data::Get()::instance>:
	...

20001910 <ArtNetNode::s_pThis>:
20001910:	00000000 	andeq	r0, r0, r0

20001914 <s_ReceivingMask>:
20001914:	00000000 	andeq	r0, r0, r0

20001918 <ip>:
20001918:	00000000 	andeq	r0, r0, r0

2000191c <ip>:
2000191c:	00000000 	andeq	r0, r0, r0

20001920 <E131Bridge::s_pThis>:
20001920:	00000000 	andeq	r0, r0, r0

20001924 <s_ReceivingMask>:
20001924:	00000000 	andeq	r0, r0, r0

20001928 <ArtNetRdmController::s_rdmMessage>:
	...

20001a28 <ArtNetRdmController::s_nPorts>:
	...

20001a30 <uuid_cast>:
	...

20001a38 <DmxSend::s_nStarted>:
	...

20001a39 <DmxConfigUdp::s_Buffer>:
	...

20001a4c <s_RxBuffer>:
	...

20001c5c <s_TxBuffer>:
	...

20001e60 <sv_PortState>:
20001e60:	00000000 	andeq	r0, r0, r0

20001e64 <s_nUartsSending>:
20001e64:	00000000 	andeq	r0, r0, r0

20001e68 <sv_nRxDmxPackets>:
	...

20001e78 <Dmx::s_pThis>:
20001e78:	00000000 	andeq	r0, r0, r0

20001e7c <gv_RdmDataReceiveEnd>:
20001e7c:	00000000 	andeq	r0, r0, r0

20001e80 <s_nLastSendMicros>:
20001e80:	00000000 	andeq	r0, r0, r0

20001e84 <s_TransactionNumber>:
20001e84:	00000000 	andeq	r0, r0, r0

20001e88 <RemoteConfig::s_pUdpBuffer>:
20001e88:	00000000 	andeq	r0, r0, r0

20001e8c <RemoteConfig::s_RemoteConfigListBin>:
	...

20001eb0 <RemoteConfig::s_pThis>:
20001eb0:	00000000 	andeq	r0, r0, r0

20001eb4 <SpiFlashStore::s_nWaitMillis>:
20001eb4:	00000000 	andeq	r0, r0, r0

20001eb8 <SpiFlashStore::s_SpiFlashData>:
	...

20002eb8 <SpiFlashStore::s_nStartAddress>:
20002eb8:	00000000 	andeq	r0, r0, r0

20002ebc <SpiFlashStore::s_bHaveFlashChip>:
20002ebc:	00000000 	andeq	r0, r0, r0

20002ec0 <SpiFlashStore::s_nSpiFlashStoreSize>:
20002ec0:	00000000 	andeq	r0, r0, r0

20002ec4 <SpiFlashStore::s_State>:
20002ec4:	00000000 	andeq	r0, r0, r0

20002ec8 <SpiFlashStore::s_pThis>:
20002ec8:	00000000 	andeq	r0, r0, r0

20002ecc <SpiFlashStore::s_bIsNew>:
20002ecc:	00000000 	andeq	r0, r0, r0

20002ed0 <StoreArtNet::s_pThis>:
20002ed0:	00000000 	andeq	r0, r0, r0

20002ed4 <StoreDisplayUdf::s_pThis>:
20002ed4:	00000000 	andeq	r0, r0, r0

20002ed8 <StoreDmxSend::s_pThis>:
20002ed8:	00000000 	andeq	r0, r0, r0

20002edc <StoreNetwork::s_pThis>:
20002edc:	00000000 	andeq	r0, r0, r0

20002ee0 <StoreRDMDevice::s_pThis>:
20002ee0:	00000000 	andeq	r0, r0, r0

20002ee4 <StoreRemoteConfig::s_pThis>:
20002ee4:	00000000 	andeq	r0, r0, r0

20002ee8 <FlashRom::s_pThis>:
20002ee8:	00000000 	andeq	r0, r0, r0

20002eec <flashrom::s_nAddress>:
20002eec:	00000000 	andeq	r0, r0, r0

20002ef0 <flashrom::s_State>:
20002ef0:	00000000 	andeq	r0, r0, r0

20002ef4 <flashrom::s_nPage>:
20002ef4:	00000000 	andeq	r0, r0, r0

20002ef8 <flashrom::s_pData>:
20002ef8:	00000000 	andeq	r0, r0, r0

20002efc <flashrom::s_isBank0>:
20002efc:	00000000 	andeq	r0, r0, r0

20002f00 <flashrom::s_nLength>:
20002f00:	00000000 	andeq	r0, r0, r0

20002f04 <g_ip_info>:
	...

20002f10 <g_mac_address>:
20002f10:	00000000 	andeq	r0, r0, r0
	...

20002f16 <s_is_dhcp>:
	...

20002f18 <s_p>:
20002f18:	00000000 	andeq	r0, r0, r0

20002f1c <s_ticker>:
20002f1c:	00000000 	andeq	r0, r0, r0

20002f20 <s_mac_address>:
	...

20002f28 <s_mac_address_arp_reply>:
20002f28:	00000000 	andeq	r0, r0, r0
	...

20002f2e <s_id>:
	...

20002f30 <s_recv_queue>:
	...

20003aa0 <s_tcb>:
	...

20003ae4 <s_tcp>:
	...

200040d0 <broadcast_mask>:
200040d0:	00000000 	andeq	r0, r0, r0

200040d4 <gw_ip>:
200040d4:	00000000 	andeq	r0, r0, r0

200040d8 <on_network_mask>:
200040d8:	00000000 	andeq	r0, r0, r0

200040dc <s_id>:
200040dc:	00000000 	andeq	r0, r0, r0

200040e0 <s_ports_allowed>:
	...

20004100 <s_recv_queue>:
	...

20009da0 <s_send_packet>:
	...

2000a38c <MDNS::s_nRemoteIp>:
2000a38c:	00000000 	andeq	r0, r0, r0

2000a390 <MDNS::s_nRemotePort>:
2000a390:	00000000 	andeq	r0, r0, r0

2000a394 <MDNS::s_nMulticastIp>:
2000a394:	00000000 	andeq	r0, r0, r0

2000a398 <MDNS::s_AnswerLocalIp>:
	...

2000a59c <MDNS::s_ServiceRecords>:
	...

2000a5bc <MDNS::s_nBytesReceived>:
2000a5bc:	00000000 	andeq	r0, r0, r0

2000a5c0 <MDNS::s_ServiceRecordsData>:
	...

2000a7c4 <MDNS::s_pName>:
2000a7c4:	00000000 	andeq	r0, r0, r0

2000a7c8 <MDNS::s_pBuffer>:
2000a7c8:	00000000 	andeq	r0, r0, r0

2000a7cc <Network::s_pThis>:
2000a7cc:	00000000 	andeq	r0, r0, r0

2000a7d0 <NetworkParams::m_tNetworkParams>:
	...

2000a830 <s_arp_announce>:
	...

2000a85c <s_arp_reply>:
	...

2000a888 <s_arp_request>:
	...

2000a8b4 <s_arp_records>:
	...

2000aa34 <s_entry_current>:
2000aa34:	00000000 	andeq	r0, r0, r0

2000aa38 <s_dhcp_allocated_gw>:
2000aa38:	00000000 	andeq	r0, r0, r0

2000aa3c <s_dhcp_allocated_ip>:
2000aa3c:	00000000 	andeq	r0, r0, r0

2000aa40 <s_dhcp_allocated_netmask>:
2000aa40:	00000000 	andeq	r0, r0, r0

2000aa44 <s_dhcp_message>:
	...

2000ac68 <s_dhcp_server_ip>:
2000ac68:	00000000 	andeq	r0, r0, r0

2000ac6c <s_groups>:
	...

2000ad8c <s_id>:
2000ad8c:	00000000 	andeq	r0, r0, r0

2000ad90 <s_joins_allowed_index>:
2000ad90:	00000000 	andeq	r0, r0, r0

2000ad94 <s_leave>:
	...

2000adc4 <s_multicast_mac>:
	...

2000adcc <s_report>:
	...

2000adfc <DisplayUdf::s_pThis>:
2000adfc:	00000000 	andeq	r0, r0, r0

2000ae00 <PropertiesConfig::s_Config>:
2000ae00:	00000000 	andeq	r0, r0, r0

2000ae04 <Display::s_pThis>:
2000ae04:	00000000 	andeq	r0, r0, r0

2000ae08 <_ClearBuffer>:
	...

2000ae90 <Ssd1306::s_pThis>:
2000ae90:	00000000 	andeq	r0, r0, r0

2000ae94 <FirmwareVersion::s_FirmwareVersion>:
	...

2000aeaa <FirmwareVersion::s_Print>:
	...

2000aeec <FirmwareVersion::s_pThis>:
2000aeec:	00000000 	andeq	r0, r0, r0

2000aef0 <LedBlink::s_pThis>:
2000aef0:	00000000 	andeq	r0, r0, r0

2000aef4 <Hardware::s_pThis>:
2000aef4:	00000000 	andeq	r0, r0, r0

2000aef8 <outptr>:
2000aef8:	00000000 	andeq	r0, r0, r0

2000aefc <last.0>:
2000aefc:	00000000 	andeq	r0, r0, r0

2000af00 <s_micros>:
	...

2000af08 <set_timer>:
2000af08:	00000000 	andeq	r0, r0, r0

2000af0c <s_nSysTickMillis>:
2000af0c:	00000000 	andeq	r0, r0, r0

2000af10 <enet_init_status>:
2000af10:	00000000 	andeq	r0, r0, r0

2000af14 <s_nAddress>:
2000af14:	00000000 	andeq	r0, r0, r0

2000af18 <dma_current_ptp_rxdesc>:
2000af18:	00000000 	andeq	r0, r0, r0

2000af1c <dma_current_ptp_txdesc>:
2000af1c:	00000000 	andeq	r0, r0, r0

2000af20 <dma_current_rxdesc>:
2000af20:	00000000 	andeq	r0, r0, r0

2000af24 <dma_current_txdesc>:
2000af24:	00000000 	andeq	r0, r0, r0

2000af28 <enet_initpara>:
	...

2000af64 <rx_buff>:
	...

2000d31c <rxdesc_tab>:
	...

2000d37c <tx_buff>:
	...

2000df64 <txdesc_tab>:
	...

Disassembly of section .heap:

20016000 <heap_low>:
	...

Disassembly of section .stack:

20016800 <_sp-0x1800>:
	...
