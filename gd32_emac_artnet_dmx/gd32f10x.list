
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	08007b19 	stmdaeq	r0, {r0, r3, r4, r8, r9, fp, ip, sp, lr}
 8007008:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800700c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007010:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007014:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007018:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
	...
 800702c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007030:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800703c:	08013095 	stmdaeq	r1, {r0, r2, r4, r7, ip, sp}
 8007040:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007044:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007048:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800704c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007050:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007054:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007058:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800705c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007060:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007064:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007068:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800706c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007070:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007074:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007078:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800707c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007080:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007084:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007088:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800708c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007090:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007094:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007098:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800709c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070a0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070a4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070a8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070ac:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070b0:	0800c7ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sl, lr, pc}
 80070b4:	0800c8a1 	stmdaeq	r0, {r0, r5, r7, fp, lr, pc}
 80070b8:	0800c8f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, fp, lr, pc}
 80070bc:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070c0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070c4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070c8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070cc:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070d0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070d4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070d8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070dc:	0800c595 	stmdaeq	r0, {r0, r2, r4, r7, r8, sl, lr, pc}
 80070e0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070e4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070e8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070ec:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070f0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070f4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
	...
 8007100:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800710c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007110:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007114:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007118:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800711c:	0800c911 	stmdaeq	r0, {r0, r4, r8, fp, lr, pc}
 8007120:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007124:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007128:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800712c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007130:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007134:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007138:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800713c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007140:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007144:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007148:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800714c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}

Disassembly of section .text:

08007150 <net_init>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4616      	mov	r6, r2
 8007158:	9f06      	ldr	r7, [sp, #24]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <net_init+0x94>)
 800715c:	461d      	mov	r5, r3
 800715e:	1e43      	subs	r3, r0, #1
 8007160:	3005      	adds	r0, #5
 8007162:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007166:	4283      	cmp	r3, r0
 8007168:	f802 1b01 	strb.w	r1, [r2], #1
 800716c:	d1f9      	bne.n	8007162 <net_init+0x12>
 800716e:	4623      	mov	r3, r4
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <net_init+0x98>)
 8007172:	f104 010c 	add.w	r1, r4, #12
 8007176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800717a:	428b      	cmp	r3, r1
 800717c:	f802 0b01 	strb.w	r0, [r2], #1
 8007180:	d1f9      	bne.n	8007176 <net_init+0x26>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	4918      	ldr	r1, [pc, #96]	; (80071e8 <net_init+0x98>)
 8007188:	4816      	ldr	r0, [pc, #88]	; (80071e4 <net_init+0x94>)
 800718a:	f000 f9a7 	bl	80074dc <ip_init>
 800718e:	4815      	ldr	r0, [pc, #84]	; (80071e4 <net_init+0x94>)
 8007190:	f000 f83c 	bl	800720c <rfc3927_init>
 8007194:	f887 8000 	strb.w	r8, [r7]
 8007198:	782b      	ldrb	r3, [r5, #0]
 800719a:	b163      	cbz	r3, 80071b6 <net_init+0x66>
 800719c:	4632      	mov	r2, r6
 800719e:	4912      	ldr	r1, [pc, #72]	; (80071e8 <net_init+0x98>)
 80071a0:	4810      	ldr	r0, [pc, #64]	; (80071e4 <net_init+0x94>)
 80071a2:	f009 fd17 	bl	8010bd4 <dhcp_client>
 80071a6:	4540      	cmp	r0, r8
 80071a8:	da05      	bge.n	80071b6 <net_init+0x66>
 80071aa:	480f      	ldr	r0, [pc, #60]	; (80071e8 <net_init+0x98>)
 80071ac:	f885 8000 	strb.w	r8, [r5]
 80071b0:	f007 ff8c 	bl	800f0cc <rfc3927>
 80071b4:	7038      	strb	r0, [r7, #0]
 80071b6:	490c      	ldr	r1, [pc, #48]	; (80071e8 <net_init+0x98>)
 80071b8:	480a      	ldr	r0, [pc, #40]	; (80071e4 <net_init+0x94>)
 80071ba:	f000 f883 	bl	80072c4 <arp_init>
 80071be:	480a      	ldr	r0, [pc, #40]	; (80071e8 <net_init+0x98>)
 80071c0:	f009 ff28 	bl	8011014 <ip_set_ip>
 80071c4:	f000 f82e 	bl	8007224 <tcp_init>
 80071c8:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <net_init+0x98>)
 80071ca:	1e63      	subs	r3, r4, #1
 80071cc:	340b      	adds	r4, #11
 80071ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80071d2:	f803 1f01 	strb.w	r1, [r3, #1]!
 80071d6:	429c      	cmp	r4, r3
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x7e>
 80071da:	782a      	ldrb	r2, [r5, #0]
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <net_init+0x9c>)
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	20001d00 	andcs	r1, r0, r0, lsl #26
 80071e8:	20001cf4 	strdcs	r1, [r0], -r4
 80071ec:	20001d06 	andcs	r1, r0, r6, lsl #26

080071f0 <net_shutdown>:
 80071f0:	b508      	push	{r3, lr}
 80071f2:	f000 f97e 	bl	80074f2 <ip_shutdown>
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <net_shutdown+0x18>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b11b      	cbz	r3, 8007204 <net_shutdown+0x14>
 80071fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007200:	f009 bdf0 	b.w	8010de4 <dhcp_client_release>
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	20001d06 	andcs	r1, r0, r6, lsl #26

0800720c <rfc3927_init>:
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <rfc3927_init+0x14>)
 800720e:	1d82      	adds	r2, r0, #6
 8007210:	4290      	cmp	r0, r2
 8007212:	d100      	bne.n	8007216 <rfc3927_init+0xa>
 8007214:	4770      	bx	lr
 8007216:	f810 1b01 	ldrb.w	r1, [r0], #1
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f7      	b.n	8007210 <rfc3927_init+0x4>
 8007220:	20001d10 	andcs	r1, r0, r0, lsl sp

08007224 <tcp_init>:
 8007224:	2206      	movs	r2, #6
 8007226:	b513      	push	{r0, r1, r4, lr}
 8007228:	4c0b      	ldr	r4, [pc, #44]	; (8007258 <tcp_init+0x34>)
 800722a:	490c      	ldr	r1, [pc, #48]	; (800725c <tcp_init+0x38>)
 800722c:	18a0      	adds	r0, r4, r2
 800722e:	f007 ffa7 	bl	800f180 <memcpy.isra.0>
 8007232:	2308      	movs	r3, #8
 8007234:	2204      	movs	r2, #4
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <tcp_init+0x3c>)
 800723a:	eb0d 0102 	add.w	r1, sp, r2
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f104 001a 	add.w	r0, r4, #26
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	f007 ff9b 	bl	800f180 <memcpy.isra.0>
 800724a:	2345      	movs	r3, #69	; 0x45
 800724c:	81e3      	strh	r3, [r4, #14]
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <tcp_init+0x40>)
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	b002      	add	sp, #8
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	200028d8 	ldrdcs	r2, [r0], -r8
 800725c:	20001d00 	andcs	r1, r0, r0, lsl #26
 8007260:	20001cf4 	strdcs	r1, [r0], -r4
 8007264:	06400040 	strbeq	r0, [r0], -r0, asr #32

08007268 <udp_init>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2200      	movs	r2, #0
 800726c:	2408      	movs	r4, #8
 800726e:	460e      	mov	r6, r1
 8007270:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <udp_init+0x40>)
 8007272:	490e      	ldr	r1, [pc, #56]	; (80072ac <udp_init+0x44>)
 8007274:	3c01      	subs	r4, #1
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	805a      	strh	r2, [r3, #2]
 800727a:	f841 2b04 	str.w	r2, [r1], #4
 800727e:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8007282:	d1f7      	bne.n	8007274 <udp_init+0xc>
 8007284:	2206      	movs	r2, #6
 8007286:	4d0a      	ldr	r5, [pc, #40]	; (80072b0 <udp_init+0x48>)
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <udp_init+0x4c>)
 800728a:	4601      	mov	r1, r0
 800728c:	18a8      	adds	r0, r5, r2
 800728e:	801c      	strh	r4, [r3, #0]
 8007290:	f008 f8fa 	bl	800f488 <memcpy.isra.0>
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <udp_init+0x50>)
 8007296:	4630      	mov	r0, r6
 8007298:	60eb      	str	r3, [r5, #12]
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <udp_init+0x54>)
 800729c:	616b      	str	r3, [r5, #20]
 800729e:	f008 f91b 	bl	800f4d8 <udp_set_ip>
 80072a2:	852c      	strh	r4, [r5, #40]	; 0x28
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	bf00      	nop
 80072a8:	20002ef4 	strdcs	r2, [r0], -r4
 80072ac:	20002ed4 	ldrdcs	r2, [r0], -r4
 80072b0:	20008b94 	mulcs	r0, r4, fp
 80072b4:	20002ed0 	ldrdcs	r2, [r0], -r0
 80072b8:	00450008 	subeq	r0, r5, r8
 80072bc:	11400040 	cmpne	r0, r0, asr #32

080072c0 <udp_shutdown>:
 80072c0:	4770      	bx	lr
	...

080072c4 <arp_init>:
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	f000 f876 	bl	80073bc <arp_cache_init>
 80072d0:	2206      	movs	r2, #6
 80072d2:	4621      	mov	r1, r4
 80072d4:	482e      	ldr	r0, [pc, #184]	; (8007390 <arp_init+0xcc>)
 80072d6:	682f      	ldr	r7, [r5, #0]
 80072d8:	f009 fb00 	bl	80108dc <memcpy.isra.0>
 80072dc:	4b2d      	ldr	r3, [pc, #180]	; (8007394 <arp_init+0xd0>)
 80072de:	2507      	movs	r5, #7
 80072e0:	461e      	mov	r6, r3
 80072e2:	22ff      	movs	r2, #255	; 0xff
 80072e4:	3d01      	subs	r5, #1
 80072e6:	d146      	bne.n	8007376 <arp_init+0xb2>
 80072e8:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <arp_init+0xd4>)
 80072ea:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800739c <arp_init+0xd8>
 80072ee:	2206      	movs	r2, #6
 80072f0:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80072f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f8:	4621      	mov	r1, r4
 80072fa:	4829      	ldr	r0, [pc, #164]	; (80073a0 <arp_init+0xdc>)
 80072fc:	82b3      	strh	r3, [r6, #20]
 80072fe:	f009 faed 	bl	80108dc <memcpy.isra.0>
 8007302:	2307      	movs	r3, #7
 8007304:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <arp_init+0xe0>)
 8007306:	61f7      	str	r7, [r6, #28]
 8007308:	3b01      	subs	r3, #1
 800730a:	d137      	bne.n	800737c <arp_init+0xb8>
 800730c:	2206      	movs	r2, #6
 800730e:	4621      	mov	r1, r4
 8007310:	4825      	ldr	r0, [pc, #148]	; (80073a8 <arp_init+0xe4>)
 8007312:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 8007316:	f009 fae1 	bl	80108dc <memcpy.isra.0>
 800731a:	4a24      	ldr	r2, [pc, #144]	; (80073ac <arp_init+0xe8>)
 800731c:	2306      	movs	r3, #6
 800731e:	4615      	mov	r5, r2
 8007320:	21ff      	movs	r1, #255	; 0xff
 8007322:	3b01      	subs	r3, #1
 8007324:	d22d      	bcs.n	8007382 <arp_init+0xbe>
 8007326:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <arp_init+0xd4>)
 8007328:	2206      	movs	r2, #6
 800732a:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800732e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007332:	4621      	mov	r1, r4
 8007334:	481e      	ldr	r0, [pc, #120]	; (80073b0 <arp_init+0xec>)
 8007336:	82ab      	strh	r3, [r5, #20]
 8007338:	f009 fad0 	bl	80108dc <memcpy.isra.0>
 800733c:	2307      	movs	r3, #7
 800733e:	2100      	movs	r1, #0
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <arp_init+0xf0>)
 8007342:	61ef      	str	r7, [r5, #28]
 8007344:	3b01      	subs	r3, #1
 8007346:	d11f      	bne.n	8007388 <arp_init+0xc4>
 8007348:	2206      	movs	r2, #6
 800734a:	4d1b      	ldr	r5, [pc, #108]	; (80073b8 <arp_init+0xf4>)
 800734c:	4621      	mov	r1, r4
 800734e:	18a8      	adds	r0, r5, r2
 8007350:	f009 fac4 	bl	80108dc <memcpy.isra.0>
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <arp_init+0xd4>)
 8007356:	4621      	mov	r1, r4
 8007358:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	f105 0016 	add.w	r0, r5, #22
 8007364:	2206      	movs	r2, #6
 8007366:	82ab      	strh	r3, [r5, #20]
 8007368:	f009 fab8 	bl	80108dc <memcpy.isra.0>
 800736c:	61ef      	str	r7, [r5, #28]
 800736e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007372:	f009 babd 	b.w	80108f0 <arp_announce>
 8007376:	f803 2b01 	strb.w	r2, [r3], #1
 800737a:	e7b3      	b.n	80072e4 <arp_init+0x20>
 800737c:	f802 5b01 	strb.w	r5, [r2], #1
 8007380:	e7c2      	b.n	8007308 <arp_init+0x44>
 8007382:	f802 1b01 	strb.w	r1, [r2], #1
 8007386:	e7cc      	b.n	8007322 <arp_init+0x5e>
 8007388:	f802 1b01 	strb.w	r1, [r2], #1
 800738c:	e7da      	b.n	8007344 <arp_init+0x80>
 800738e:	bf00      	nop
 8007390:	2000962a 	andcs	r9, r0, sl, lsr #12
 8007394:	20009624 	andcs	r9, r0, r4, lsr #12
 8007398:	01000608 	tsteq	r0, r8, lsl #12
 800739c:	04060008 	streq	r0, [r6], #-8
 80073a0:	2000963a 	andcs	r9, r0, sl, lsr r6
 80073a4:	20009644 	andcs	r9, r0, r4, asr #12
 80073a8:	20009682 	andcs	r9, r0, r2, lsl #13
 80073ac:	2000967c 	andcs	r9, r0, ip, ror r6
 80073b0:	20009692 	mulcs	r0, r2, r6
 80073b4:	2000969c 	mulcs	r0, ip, r6
 80073b8:	20009650 	andcs	r9, r0, r0, asr r6

080073bc <arp_cache_init>:
 80073bc:	2300      	movs	r3, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <arp_cache_init+0x2c>)
 80073c2:	b510      	push	{r4, lr}
 80073c4:	8013      	strh	r3, [r2, #0]
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <arp_cache_init+0x30>)
 80073c8:	4611      	mov	r1, r2
 80073ca:	f842 0c04 	str.w	r0, [r2, #-4]
 80073ce:	1d94      	adds	r4, r2, #6
 80073d0:	42a1      	cmp	r1, r4
 80073d2:	d105      	bne.n	80073e0 <arp_cache_init+0x24>
 80073d4:	3303      	adds	r3, #3
 80073d6:	2b60      	cmp	r3, #96	; 0x60
 80073d8:	f102 020c 	add.w	r2, r2, #12
 80073dc:	d1f4      	bne.n	80073c8 <arp_cache_init+0xc>
 80073de:	bd10      	pop	{r4, pc}
 80073e0:	f801 0b01 	strb.w	r0, [r1], #1
 80073e4:	e7f4      	b.n	80073d0 <arp_cache_init+0x14>
 80073e6:	bf00      	nop
 80073e8:	20009828 	andcs	r9, r0, r8, lsr #16
 80073ec:	200096ac 	andcs	r9, r0, ip, lsr #13

080073f0 <igmp_init>:
 80073f0:	2200      	movs	r2, #0
 80073f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4b23      	ldr	r3, [pc, #140]	; (800748c <igmp_init+0x9c>)
 80073fe:	f103 0408 	add.w	r4, r3, #8
 8007402:	42a3      	cmp	r3, r4
 8007404:	d13e      	bne.n	8007484 <igmp_init+0x94>
 8007406:	3201      	adds	r2, #1
 8007408:	2a24      	cmp	r2, #36	; 0x24
 800740a:	d1f8      	bne.n	80073fe <igmp_init+0xe>
 800740c:	2600      	movs	r6, #0
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <igmp_init+0xa0>)
 8007410:	4c20      	ldr	r4, [pc, #128]	; (8007494 <igmp_init+0xa4>)
 8007412:	601e      	str	r6, [r3, #0]
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <igmp_init+0xa8>)
 8007416:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800741a:	801e      	strh	r6, [r3, #0]
 800741c:	f009 fd5a 	bl	8010ed4 <igmp_set_ip>
 8007420:	2201      	movs	r2, #1
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <igmp_init+0xac>)
 8007424:	4629      	mov	r1, r5
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	225e      	movs	r2, #94	; 0x5e
 800742a:	709a      	strb	r2, [r3, #2]
 800742c:	2206      	movs	r2, #6
 800742e:	18a0      	adds	r0, r4, r2
 8007430:	f009 fd06 	bl	8010e40 <memcpy.isra.0>
 8007434:	f240 4394 	movw	r3, #1172	; 0x494
 8007438:	8463      	strh	r3, [r4, #34]	; 0x22
 800743a:	2316      	movs	r3, #22
 800743c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074a0 <igmp_init+0xb0>
 8007440:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074a4 <igmp_init+0xb4>
 8007444:	84e3      	strh	r3, [r4, #38]	; 0x26
 8007446:	f8c4 9014 	str.w	r9, [r4, #20]
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <igmp_init+0xb8>)
 800744c:	f8c4 800c 	str.w	r8, [r4, #12]
 8007450:	8227      	strh	r7, [r4, #16]
 8007452:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007454:	4c15      	ldr	r4, [pc, #84]	; (80074ac <igmp_init+0xbc>)
 8007456:	2206      	movs	r2, #6
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745e:	18a0      	adds	r0, r4, r2
 8007460:	80a3      	strh	r3, [r4, #4]
 8007462:	4629      	mov	r1, r5
 8007464:	f009 fcec 	bl	8010e40 <memcpy.isra.0>
 8007468:	23e0      	movs	r3, #224	; 0xe0
 800746a:	83e3      	strh	r3, [r4, #30]
 800746c:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <igmp_init+0xc0>)
 8007472:	f8c4 9014 	str.w	r9, [r4, #20]
 8007476:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800747a:	f8c4 800c 	str.w	r8, [r4, #12]
 800747e:	8227      	strh	r7, [r4, #16]
 8007480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007484:	f803 1b01 	strb.w	r1, [r3], #1
 8007488:	e7bb      	b.n	8007402 <igmp_init+0x12>
 800748a:	bf00      	nop
 800748c:	20009a60 	andcs	r9, r0, r0, ror #20
 8007490:	20009b84 	andcs	r9, r0, r4, lsl #23
 8007494:	20009bc0 	andcs	r9, r0, r0, asr #23
 8007498:	20009b80 	andcs	r9, r0, r0, lsl #23
 800749c:	20009bb8 			; <UNDEFINED> instruction: 0x20009bb8
 80074a0:	02010040 	andeq	r0, r1, #64	; 0x40
 80074a4:	00460008 	subeq	r0, r6, r8
 80074a8:	005e0001 	subseq	r0, lr, r1
 80074ac:	20009b88 	andcs	r9, r0, r8, lsl #23
 80074b0:	04940200 	ldreq	r0, [r4], #512	; 0x200

080074b4 <igmp_shutdown>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	2500      	movs	r5, #0
 80074b8:	462e      	mov	r6, r5
 80074ba:	4c07      	ldr	r4, [pc, #28]	; (80074d8 <igmp_shutdown+0x24>)
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	b120      	cbz	r0, 80074ca <igmp_shutdown+0x16>
 80074c0:	f009 fd64 	bl	8010f8c <igmp_leave>
 80074c4:	6026      	str	r6, [r4, #0]
 80074c6:	7166      	strb	r6, [r4, #5]
 80074c8:	7126      	strb	r6, [r4, #4]
 80074ca:	3501      	adds	r5, #1
 80074cc:	2d24      	cmp	r5, #36	; 0x24
 80074ce:	f104 0408 	add.w	r4, r4, #8
 80074d2:	d1f3      	bne.n	80074bc <igmp_shutdown+0x8>
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	bf00      	nop
 80074d8:	20009a60 	andcs	r9, r0, r0, ror #20

080074dc <ip_init>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	460d      	mov	r5, r1
 80074e2:	f7ff fec1 	bl	8007268 <udp_init>
 80074e6:	4629      	mov	r1, r5
 80074e8:	4620      	mov	r0, r4
 80074ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ee:	f7ff bf7f 	b.w	80073f0 <igmp_init>

080074f2 <ip_shutdown>:
 80074f2:	b508      	push	{r3, lr}
 80074f4:	f7ff ffde 	bl	80074b4 <igmp_shutdown>
 80074f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074fc:	f7ff bee0 	b.w	80072c0 <udp_shutdown>

08007500 <console_init>:
 8007500:	b508      	push	{r3, lr}
 8007502:	f00b fd69 	bl	8012fd8 <uart0_init>
 8007506:	4804      	ldr	r0, [pc, #16]	; (8007518 <console_init+0x18>)
 8007508:	f00b fd96 	bl	8013038 <uart0_puts>
 800750c:	4803      	ldr	r0, [pc, #12]	; (800751c <console_init+0x1c>)
 800750e:	f00b fd93 	bl	8013038 <uart0_puts>
 8007512:	2000      	movs	r0, #0
 8007514:	bd08      	pop	{r3, pc}
 8007516:	bf00      	nop
 8007518:	0801509a 	stmdaeq	r1, {r1, r3, r4, r7, ip, lr}
 800751c:	0801727c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, ip, sp, lr}

08007520 <net_handle>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4c0c      	ldr	r4, [pc, #48]	; (8007554 <net_handle+0x34>)
 8007524:	4620      	mov	r0, r4
 8007526:	f00c fbd7 	bl	8013cd8 <emac_eth_recv>
 800752a:	2800      	cmp	r0, #0
 800752c:	dd07      	ble.n	800753e <net_handle+0x1e>
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	8983      	ldrh	r3, [r0, #12]
 8007532:	2b08      	cmp	r3, #8
 8007534:	d107      	bne.n	8007546 <net_handle+0x26>
 8007536:	f000 fa6f 	bl	8007a18 <ip_handle>
 800753a:	f00c fbe1 	bl	8013d00 <emac_free_pkt>
 800753e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007542:	f007 bdb3 	b.w	800f0ac <net_timers_run>
 8007546:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800754a:	d1f6      	bne.n	800753a <net_handle+0x1a>
 800754c:	f000 fa08 	bl	8007960 <arp_handle>
 8007550:	e7f3      	b.n	800753a <net_handle+0x1a>
 8007552:	bf00      	nop
 8007554:	20001d08 	andcs	r1, r0, r8, lsl #26

08007558 <tcp_handle>:
 8007558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	4605      	mov	r5, r0
 800755e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007560:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 8007564:	ba5b      	rev16	r3, r3
 8007566:	8443      	strh	r3, [r0, #34]	; 0x22
 8007568:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800756a:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 800756e:	ba5b      	rev16	r3, r3
 8007570:	8483      	strh	r3, [r0, #36]	; 0x24
 8007572:	f007 fe0f 	bl	800f194 <_bswap32>
 8007576:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8007578:	4ca5      	ldr	r4, [pc, #660]	; (8007810 <tcp_handle+0x2b8>)
 800757a:	ba5b      	rev16	r3, r3
 800757c:	862b      	strh	r3, [r5, #48]	; 0x30
 800757e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8007580:	8822      	ldrh	r2, [r4, #0]
 8007582:	ba5b      	rev16	r3, r3
 8007584:	86ab      	strh	r3, [r5, #52]	; 0x34
 8007586:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8007588:	429a      	cmp	r2, r3
 800758a:	d14d      	bne.n	8007628 <tcp_handle+0xd0>
 800758c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007590:	2b01      	cmp	r3, #1
 8007592:	d00d      	beq.n	80075b0 <tcp_handle+0x58>
 8007594:	2204      	movs	r2, #4
 8007596:	4668      	mov	r0, sp
 8007598:	f105 011a 	add.w	r1, r5, #26
 800759c:	f007 fdf0 	bl	800f180 <memcpy.isra.0>
 80075a0:	8862      	ldrh	r2, [r4, #2]
 80075a2:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d13f      	bne.n	8007628 <tcp_handle+0xd0>
 80075a8:	6862      	ldr	r2, [r4, #4]
 80075aa:	9b00      	ldr	r3, [sp, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d13b      	bne.n	8007628 <tcp_handle+0xd0>
 80075b0:	2204      	movs	r2, #4
 80075b2:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 80075b6:	eb0d 0002 	add.w	r0, sp, r2
 80075ba:	f007 fde1 	bl	800f180 <memcpy.isra.0>
 80075be:	2204      	movs	r2, #4
 80075c0:	f105 0126 	add.w	r1, r5, #38	; 0x26
 80075c4:	eb0d 0002 	add.w	r0, sp, r2
 80075c8:	9e01      	ldr	r6, [sp, #4]
 80075ca:	f007 fdd9 	bl	800f180 <memcpy.isra.0>
 80075ce:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80075d2:	9f01      	ldr	r7, [sp, #4]
 80075d4:	2a01      	cmp	r2, #1
 80075d6:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 80075da:	d01b      	beq.n	8007614 <tcp_handle+0xbc>
 80075dc:	1ed3      	subs	r3, r2, #3
 80075de:	2b07      	cmp	r3, #7
 80075e0:	d822      	bhi.n	8007628 <tcp_handle+0xd0>
 80075e2:	fa98 f198 	rev16.w	r1, r8
 80075e6:	f64f 78ec 	movw	r8, #65516	; 0xffec
 80075ea:	ea4f 1319 	mov.w	r3, r9, lsr #4
 80075ee:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 80075f2:	4488      	add	r8, r1
 80075f4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80075f6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 80075fa:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80075fe:	fa1f f888 	uxth.w	r8, r8
 8007602:	2900      	cmp	r1, #0
 8007604:	d142      	bne.n	800768c <tcp_handle+0x134>
 8007606:	f1b8 0f00 	cmp.w	r8, #0
 800760a:	d16b      	bne.n	80076e4 <tcp_handle+0x18c>
 800760c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760e:	42bb      	cmp	r3, r7
 8007610:	d168      	bne.n	80076e4 <tcp_handle+0x18c>
 8007612:	e048      	b.n	80076a6 <tcp_handle+0x14e>
 8007614:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007618:	075a      	lsls	r2, r3, #29
 800761a:	d405      	bmi.n	8007628 <tcp_handle+0xd0>
 800761c:	06d8      	lsls	r0, r3, #27
 800761e:	d506      	bpl.n	800762e <tcp_handle+0xd6>
 8007620:	4628      	mov	r0, r5
 8007622:	497b      	ldr	r1, [pc, #492]	; (8007810 <tcp_handle+0x2b8>)
 8007624:	f007 fe82 	bl	800f32c <_send_reset>
 8007628:	b004      	add	sp, #16
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	0799      	lsls	r1, r3, #30
 8007630:	d5fa      	bpl.n	8007628 <tcp_handle+0xd0>
 8007632:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8007636:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800763a:	4668      	mov	r0, sp
 800763c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007640:	f105 011a 	add.w	r1, r5, #26
 8007644:	2204      	movs	r2, #4
 8007646:	8063      	strh	r3, [r4, #2]
 8007648:	f007 fd9a 	bl	800f180 <memcpy.isra.0>
 800764c:	2206      	movs	r2, #6
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	18a9      	adds	r1, r5, r2
 8007652:	4870      	ldr	r0, [pc, #448]	; (8007814 <tcp_handle+0x2bc>)
 8007654:	6063      	str	r3, [r4, #4]
 8007656:	f007 fd93 	bl	800f180 <memcpy.isra.0>
 800765a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800765c:	1c7b      	adds	r3, r7, #1
 800765e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007662:	6363      	str	r3, [r4, #52]	; 0x34
 8007664:	2312      	movs	r3, #18
 8007666:	486a      	ldr	r0, [pc, #424]	; (8007810 <tcp_handle+0x2b8>)
 8007668:	a901      	add	r1, sp, #4
 800766a:	f88d 300c 	strb.w	r3, [sp, #12]
 800766e:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007672:	63e7      	str	r7, [r4, #60]	; 0x3c
 8007674:	f8c4 a018 	str.w	sl, [r4, #24]
 8007678:	f007 fdb2 	bl	800f1e0 <_tcp_send_package>
 800767c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8007684:	2303      	movs	r3, #3
 8007686:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800768a:	e7cd      	b.n	8007628 <tcp_handle+0xd0>
 800768c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800768e:	eba3 0c07 	sub.w	ip, r3, r7
 8007692:	f1b8 0f00 	cmp.w	r8, #0
 8007696:	d10d      	bne.n	80076b4 <tcp_handle+0x15c>
 8007698:	f1bc 0f00 	cmp.w	ip, #0
 800769c:	dc22      	bgt.n	80076e4 <tcp_handle+0x18c>
 800769e:	1afb      	subs	r3, r7, r3
 80076a0:	1a5b      	subs	r3, r3, r1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da1e      	bge.n	80076e4 <tcp_handle+0x18c>
 80076a6:	0743      	lsls	r3, r0, #29
 80076a8:	d530      	bpl.n	800770c <tcp_handle+0x1b4>
 80076aa:	8821      	ldrh	r1, [r4, #0]
 80076ac:	4858      	ldr	r0, [pc, #352]	; (8007810 <tcp_handle+0x2b8>)
 80076ae:	f007 fd4d 	bl	800f14c <_init_tcb>
 80076b2:	e7b9      	b.n	8007628 <tcp_handle+0xd0>
 80076b4:	f1bc 0f00 	cmp.w	ip, #0
 80076b8:	dc06      	bgt.n	80076c8 <tcp_handle+0x170>
 80076ba:	eba7 0c03 	sub.w	ip, r7, r3
 80076be:	ebac 0c01 	sub.w	ip, ip, r1
 80076c2:	f1bc 0f00 	cmp.w	ip, #0
 80076c6:	dbee      	blt.n	80076a6 <tcp_handle+0x14e>
 80076c8:	eb08 0c07 	add.w	ip, r8, r7
 80076cc:	f103 0e01 	add.w	lr, r3, #1
 80076d0:	ebae 0e0c 	sub.w	lr, lr, ip
 80076d4:	f1be 0f00 	cmp.w	lr, #0
 80076d8:	dc04      	bgt.n	80076e4 <tcp_handle+0x18c>
 80076da:	43db      	mvns	r3, r3
 80076dc:	1a5b      	subs	r3, r3, r1
 80076de:	eb13 0f0c 	cmn.w	r3, ip
 80076e2:	d4e0      	bmi.n	80076a6 <tcp_handle+0x14e>
 80076e4:	0742      	lsls	r2, r0, #29
 80076e6:	d505      	bpl.n	80076f4 <tcp_handle+0x19c>
 80076e8:	8821      	ldrh	r1, [r4, #0]
 80076ea:	4849      	ldr	r0, [pc, #292]	; (8007810 <tcp_handle+0x2b8>)
 80076ec:	f007 fd2e 	bl	800f14c <_init_tcb>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e7c8      	b.n	8007686 <tcp_handle+0x12e>
 80076f4:	6963      	ldr	r3, [r4, #20]
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	2310      	movs	r3, #16
 80076fe:	4844      	ldr	r0, [pc, #272]	; (8007810 <tcp_handle+0x2b8>)
 8007700:	a901      	add	r1, sp, #4
 8007702:	f88d 300c 	strb.w	r3, [sp, #12]
 8007706:	f007 fd6b 	bl	800f1e0 <_tcp_send_package>
 800770a:	e78d      	b.n	8007628 <tcp_handle+0xd0>
 800770c:	0781      	lsls	r1, r0, #30
 800770e:	d505      	bpl.n	800771c <tcp_handle+0x1c4>
 8007710:	2a03      	cmp	r2, #3
 8007712:	d0ed      	beq.n	80076f0 <tcp_handle+0x198>
 8007714:	4628      	mov	r0, r5
 8007716:	493e      	ldr	r1, [pc, #248]	; (8007810 <tcp_handle+0x2b8>)
 8007718:	f007 fe08 	bl	800f32c <_send_reset>
 800771c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007720:	06da      	lsls	r2, r3, #27
 8007722:	d581      	bpl.n	8007628 <tcp_handle+0xd0>
 8007724:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007728:	3b03      	subs	r3, #3
 800772a:	2b07      	cmp	r3, #7
 800772c:	d818      	bhi.n	8007760 <tcp_handle+0x208>
 800772e:	e8df f003 	tbb	[pc, r3]
 8007732:	75757504 	ldrbvc	r7, [r5, #-1284]!	; 0xfffffafc
 8007736:	a59c7575 	ldrge	r7, [ip, #1397]	; 0x575
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	1b9b      	subs	r3, r3, r6
 800773e:	2b00      	cmp	r3, #0
 8007740:	dc0a      	bgt.n	8007758 <tcp_handle+0x200>
 8007742:	6963      	ldr	r3, [r4, #20]
 8007744:	1af3      	subs	r3, r6, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	dc06      	bgt.n	8007758 <tcp_handle+0x200>
 800774a:	2304      	movs	r3, #4
 800774c:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007750:	f8c4 a018 	str.w	sl, [r4, #24]
 8007754:	6126      	str	r6, [r4, #16]
 8007756:	e796      	b.n	8007686 <tcp_handle+0x12e>
 8007758:	4628      	mov	r0, r5
 800775a:	492d      	ldr	r1, [pc, #180]	; (8007810 <tcp_handle+0x2b8>)
 800775c:	f007 fde6 	bl	800f32c <_send_reset>
 8007760:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007764:	3b04      	subs	r3, #4
 8007766:	2b02      	cmp	r3, #2
 8007768:	d830      	bhi.n	80077cc <tcp_handle+0x274>
 800776a:	f1b8 0f00 	cmp.w	r8, #0
 800776e:	d02d      	beq.n	80077cc <tcp_handle+0x274>
 8007770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007772:	42bb      	cmp	r3, r7
 8007774:	f040 8091 	bne.w	800789a <tcp_handle+0x342>
 8007778:	f240 53b6 	movw	r3, #1462	; 0x5b6
 800777c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007818 <tcp_handle+0x2c0>
 8007780:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8007784:	f8ba 7000 	ldrh.w	r7, [sl]
 8007788:	4642      	mov	r2, r8
 800778a:	435f      	muls	r7, r3
 800778c:	1d38      	adds	r0, r7, #4
 800778e:	4449      	add	r1, r9
 8007790:	4450      	add	r0, sl
 8007792:	f007 fcf5 	bl	800f180 <memcpy.isra.0>
 8007796:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8007798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800779a:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800779e:	8722      	strh	r2, [r4, #56]	; 0x38
 80077a0:	6962      	ldr	r2, [r4, #20]
 80077a2:	4443      	add	r3, r8
 80077a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077a8:	6363      	str	r3, [r4, #52]	; 0x34
 80077aa:	2310      	movs	r3, #16
 80077ac:	4457      	add	r7, sl
 80077ae:	4818      	ldr	r0, [pc, #96]	; (8007810 <tcp_handle+0x2b8>)
 80077b0:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 80077b4:	a901      	add	r1, sp, #4
 80077b6:	f88d 300c 	strb.w	r3, [sp, #12]
 80077ba:	f007 fd11 	bl	800f1e0 <_tcp_send_package>
 80077be:	f8ba 3000 	ldrh.w	r3, [sl]
 80077c2:	3301      	adds	r3, #1
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	f8aa 3000 	strh.w	r3, [sl]
 80077cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	f67f af29 	bls.w	8007628 <tcp_handle+0xd0>
 80077d6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80077da:	07db      	lsls	r3, r3, #31
 80077dc:	f57f af24 	bpl.w	8007628 <tcp_handle+0xd0>
 80077e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077e2:	6962      	ldr	r2, [r4, #20]
 80077e4:	3301      	adds	r3, #1
 80077e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077ea:	6363      	str	r3, [r4, #52]	; 0x34
 80077ec:	2310      	movs	r3, #16
 80077ee:	4808      	ldr	r0, [pc, #32]	; (8007810 <tcp_handle+0x2b8>)
 80077f0:	a901      	add	r1, sp, #4
 80077f2:	f88d 300c 	strb.w	r3, [sp, #12]
 80077f6:	f007 fcf3 	bl	800f1e0 <_tcp_send_package>
 80077fa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d053      	beq.n	80078aa <tcp_handle+0x352>
 8007802:	d84d      	bhi.n	80078a0 <tcp_handle+0x348>
 8007804:	3b03      	subs	r3, #3
 8007806:	2b01      	cmp	r3, #1
 8007808:	f63f af0e 	bhi.w	8007628 <tcp_handle+0xd0>
 800780c:	2307      	movs	r3, #7
 800780e:	e73a      	b.n	8007686 <tcp_handle+0x12e>
 8007810:	20002894 	mulcs	r0, r4, r8
 8007814:	2000289c 	mulcs	r0, ip, r8
 8007818:	20001d24 	andcs	r1, r0, r4, lsr #26
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	1b99      	subs	r1, r3, r6
 8007820:	d513      	bpl.n	800784a <tcp_handle+0x2f2>
 8007822:	6962      	ldr	r2, [r4, #20]
 8007824:	1ab2      	subs	r2, r6, r2
 8007826:	2a00      	cmp	r2, #0
 8007828:	dc0f      	bgt.n	800784a <tcp_handle+0x2f2>
 800782a:	6126      	str	r6, [r4, #16]
 800782c:	6a23      	ldr	r3, [r4, #32]
 800782e:	1bda      	subs	r2, r3, r7
 8007830:	2a00      	cmp	r2, #0
 8007832:	db05      	blt.n	8007840 <tcp_handle+0x2e8>
 8007834:	42bb      	cmp	r3, r7
 8007836:	d193      	bne.n	8007760 <tcp_handle+0x208>
 8007838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800783a:	1b9b      	subs	r3, r3, r6
 800783c:	2b00      	cmp	r3, #0
 800783e:	dc8f      	bgt.n	8007760 <tcp_handle+0x208>
 8007840:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007844:	f8c4 a018 	str.w	sl, [r4, #24]
 8007848:	e78a      	b.n	8007760 <tcp_handle+0x208>
 800784a:	1af3      	subs	r3, r6, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	dc06      	bgt.n	800785e <tcp_handle+0x306>
 8007850:	2900      	cmp	r1, #0
 8007852:	dc85      	bgt.n	8007760 <tcp_handle+0x208>
 8007854:	6963      	ldr	r3, [r4, #20]
 8007856:	1af3      	subs	r3, r6, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc81      	bgt.n	8007760 <tcp_handle+0x208>
 800785c:	e7e6      	b.n	800782c <tcp_handle+0x2d4>
 800785e:	6963      	ldr	r3, [r4, #20]
 8007860:	1b9a      	subs	r2, r3, r6
 8007862:	2a00      	cmp	r2, #0
 8007864:	f6bf af7c 	bge.w	8007760 <tcp_handle+0x208>
 8007868:	e745      	b.n	80076f6 <tcp_handle+0x19e>
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	42b3      	cmp	r3, r6
 800786e:	f47f af77 	bne.w	8007760 <tcp_handle+0x208>
 8007872:	8821      	ldrh	r1, [r4, #0]
 8007874:	480f      	ldr	r0, [pc, #60]	; (80078b4 <tcp_handle+0x35c>)
 8007876:	f007 fc69 	bl	800f14c <_init_tcb>
 800787a:	e771      	b.n	8007760 <tcp_handle+0x208>
 800787c:	6963      	ldr	r3, [r4, #20]
 800787e:	42b3      	cmp	r3, r6
 8007880:	f47f af6e 	bne.w	8007760 <tcp_handle+0x208>
 8007884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007886:	480b      	ldr	r0, [pc, #44]	; (80078b4 <tcp_handle+0x35c>)
 8007888:	9302      	str	r3, [sp, #8]
 800788a:	2310      	movs	r3, #16
 800788c:	a901      	add	r1, sp, #4
 800788e:	9601      	str	r6, [sp, #4]
 8007890:	f88d 300c 	strb.w	r3, [sp, #12]
 8007894:	f007 fca4 	bl	800f1e0 <_tcp_send_package>
 8007898:	e762      	b.n	8007760 <tcp_handle+0x208>
 800789a:	6962      	ldr	r2, [r4, #20]
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	e72c      	b.n	80076fa <tcp_handle+0x1a2>
 80078a0:	2b06      	cmp	r3, #6
 80078a2:	f47f aec1 	bne.w	8007628 <tcp_handle+0xd0>
 80078a6:	230a      	movs	r3, #10
 80078a8:	e6ed      	b.n	8007686 <tcp_handle+0x12e>
 80078aa:	6963      	ldr	r3, [r4, #20]
 80078ac:	42b3      	cmp	r3, r6
 80078ae:	d0fa      	beq.n	80078a6 <tcp_handle+0x34e>
 80078b0:	2308      	movs	r3, #8
 80078b2:	e6e8      	b.n	8007686 <tcp_handle+0x12e>
 80078b4:	20002894 	mulcs	r0, r4, r8

080078b8 <udp_handle>:
 80078b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078bc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80078be:	4607      	mov	r7, r0
 80078c0:	ba5b      	rev16	r3, r3
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 80078c8:	2a01      	cmp	r2, #1
 80078ca:	d904      	bls.n	80078d6 <udp_handle+0x1e>
 80078cc:	2b7b      	cmp	r3, #123	; 0x7b
 80078ce:	d002      	beq.n	80078d6 <udp_handle+0x1e>
 80078d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d4:	d308      	bcc.n	80078e8 <udp_handle+0x30>
 80078d6:	2400      	movs	r4, #0
 80078d8:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <udp_handle+0xa0>)
 80078da:	f852 1b04 	ldr.w	r1, [r2], #4
 80078de:	4299      	cmp	r1, r3
 80078e0:	d005      	beq.n	80078ee <udp_handle+0x36>
 80078e2:	3401      	adds	r4, #1
 80078e4:	2c08      	cmp	r4, #8
 80078e6:	d1f8      	bne.n	80078da <udp_handle+0x22>
 80078e8:	b002      	add	sp, #8
 80078ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ee:	f640 3394 	movw	r3, #2964	; 0xb94
 80078f2:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 80078f4:	435c      	muls	r4, r3
 80078f6:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80078fa:	ba76      	rev16	r6, r6
 80078fc:	3e08      	subs	r6, #8
 80078fe:	b2b6      	uxth	r6, r6
 8007900:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8007904:	bf28      	it	cs
 8007906:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 800790a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800795c <udp_handle+0xa4>
 800790e:	1d20      	adds	r0, r4, #4
 8007910:	f838 5004 	ldrh.w	r5, [r8, r4]
 8007914:	4632      	mov	r2, r6
 8007916:	435d      	muls	r5, r3
 8007918:	4428      	add	r0, r5
 800791a:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800791e:	4440      	add	r0, r8
 8007920:	f007 fdb2 	bl	800f488 <memcpy.isra.0>
 8007924:	2204      	movs	r2, #4
 8007926:	f107 011a 	add.w	r1, r7, #26
 800792a:	eb0d 0002 	add.w	r0, sp, r2
 800792e:	f007 fdab 	bl	800f488 <memcpy.isra.0>
 8007932:	9a01      	ldr	r2, [sp, #4]
 8007934:	192b      	adds	r3, r5, r4
 8007936:	4443      	add	r3, r8
 8007938:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 800793c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800793e:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 8007942:	ba52      	rev16	r2, r2
 8007944:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8007948:	f838 3004 	ldrh.w	r3, [r8, r4]
 800794c:	3301      	adds	r3, #1
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	f828 3004 	strh.w	r3, [r8, r4]
 8007956:	e7c7      	b.n	80078e8 <udp_handle+0x30>
 8007958:	20002ed4 	ldrdcs	r2, [r0], -r4
 800795c:	20002ef4 	strdcs	r2, [r0], -r4

08007960 <arp_handle>:
 8007960:	8a83      	ldrh	r3, [r0, #20]
 8007962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007966:	d003      	beq.n	8007970 <arp_handle+0x10>
 8007968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796c:	d002      	beq.n	8007974 <arp_handle+0x14>
 800796e:	4770      	bx	lr
 8007970:	f008 bfc8 	b.w	8010904 <arp_handle_request>
 8007974:	f008 bfee 	b.w	8010954 <arp_handle_reply>

08007978 <igmp_handle>:
 8007978:	7b83      	ldrb	r3, [r0, #14]
 800797a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800797e:	2b45      	cmp	r3, #69	; 0x45
 8007980:	d116      	bne.n	80079b0 <igmp_handle+0x38>
 8007982:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007986:	2b11      	cmp	r3, #17
 8007988:	d112      	bne.n	80079b0 <igmp_handle+0x38>
 800798a:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <igmp_handle+0x94>)
 800798c:	f100 051e 	add.w	r5, r0, #30
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	466a      	mov	r2, sp
 8007994:	462b      	mov	r3, r5
 8007996:	f100 0622 	add.w	r6, r0, #34	; 0x22
 800799a:	42b3      	cmp	r3, r6
 800799c:	d10b      	bne.n	80079b6 <igmp_handle+0x3e>
 800799e:	2401      	movs	r4, #1
 80079a0:	2100      	movs	r1, #0
 80079a2:	f04f 0c01 	mov.w	ip, #1
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <igmp_handle+0x98>)
 80079a8:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <igmp_handle+0x9c>)
 80079aa:	681f      	ldr	r7, [r3, #0]
 80079ac:	428f      	cmp	r7, r1
 80079ae:	d10a      	bne.n	80079c6 <igmp_handle+0x4e>
 80079b0:	b003      	add	sp, #12
 80079b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079b6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80079ba:	f812 1b01 	ldrb.w	r1, [r2], #1
 80079be:	428c      	cmp	r4, r1
 80079c0:	d0eb      	beq.n	800799a <igmp_handle+0x22>
 80079c2:	2400      	movs	r4, #0
 80079c4:	e7ec      	b.n	80079a0 <igmp_handle+0x28>
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	b924      	cbnz	r4, 80079d6 <igmp_handle+0x5e>
 80079cc:	462b      	mov	r3, r5
 80079ce:	f10d 0e04 	add.w	lr, sp, #4
 80079d2:	42b3      	cmp	r3, r6
 80079d4:	d10e      	bne.n	80079f4 <igmp_handle+0x7c>
 80079d6:	f892 e005 	ldrb.w	lr, [r2, #5]
 80079da:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80079de:	f1be 0f01 	cmp.w	lr, #1
 80079e2:	d110      	bne.n	8007a06 <igmp_handle+0x8e>
 80079e4:	f892 e004 	ldrb.w	lr, [r2, #4]
 80079e8:	459e      	cmp	lr, r3
 80079ea:	d909      	bls.n	8007a00 <igmp_handle+0x88>
 80079ec:	085b      	lsrs	r3, r3, #1
 80079ee:	3301      	adds	r3, #1
 80079f0:	7113      	strb	r3, [r2, #4]
 80079f2:	e005      	b.n	8007a00 <igmp_handle+0x88>
 80079f4:	f813 9b01 	ldrb.w	r9, [r3], #1
 80079f8:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80079fc:	45c1      	cmp	r9, r8
 80079fe:	d0e8      	beq.n	80079d2 <igmp_handle+0x5a>
 8007a00:	3101      	adds	r1, #1
 8007a02:	3208      	adds	r2, #8
 8007a04:	e7d2      	b.n	80079ac <igmp_handle+0x34>
 8007a06:	f882 c005 	strb.w	ip, [r2, #5]
 8007a0a:	e7ef      	b.n	80079ec <igmp_handle+0x74>
 8007a0c:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a10:	20009b84 	andcs	r9, r0, r4, lsl #23
 8007a14:	20009a60 	andcs	r9, r0, r0, ror #20

08007a18 <ip_handle>:
 8007a18:	7b82      	ldrb	r2, [r0, #14]
 8007a1a:	7dc3      	ldrb	r3, [r0, #23]
 8007a1c:	2a45      	cmp	r2, #69	; 0x45
 8007a1e:	d003      	beq.n	8007a28 <ip_handle+0x10>
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d111      	bne.n	8007a48 <ip_handle+0x30>
 8007a24:	f7ff bfa8 	b.w	8007978 <igmp_handle>
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	d00b      	beq.n	8007a44 <ip_handle+0x2c>
 8007a2c:	d804      	bhi.n	8007a38 <ip_handle+0x20>
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d006      	beq.n	8007a40 <ip_handle+0x28>
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d0f6      	beq.n	8007a24 <ip_handle+0xc>
 8007a36:	4770      	bx	lr
 8007a38:	2b11      	cmp	r3, #17
 8007a3a:	d105      	bne.n	8007a48 <ip_handle+0x30>
 8007a3c:	f7ff bf3c 	b.w	80078b8 <udp_handle>
 8007a40:	f000 b804 	b.w	8007a4c <icmp_handle>
 8007a44:	f7ff bd88 	b.w	8007558 <tcp_handle>
 8007a48:	4770      	bx	lr
	...

08007a4c <icmp_handle>:
 8007a4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a4e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007a52:	4604      	mov	r4, r0
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d13e      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a58:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	d13a      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a60:	1d86      	adds	r6, r0, #6
 8007a62:	4631      	mov	r1, r6
 8007a64:	2206      	movs	r2, #6
 8007a66:	f009 faf7 	bl	8011058 <memcpy.isra.0>
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	2206      	movs	r2, #6
 8007a6e:	491b      	ldr	r1, [pc, #108]	; (8007adc <icmp_handle+0x90>)
 8007a70:	f009 faf2 	bl	8011058 <memcpy.isra.0>
 8007a74:	8a63      	ldrh	r3, [r4, #18]
 8007a76:	f104 061a 	add.w	r6, r4, #26
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	2204      	movs	r2, #4
 8007a80:	8263      	strh	r3, [r4, #18]
 8007a82:	f104 001e 	add.w	r0, r4, #30
 8007a86:	f009 fae7 	bl	8011058 <memcpy.isra.0>
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <icmp_handle+0x94>)
 8007a8e:	eb0d 0102 	add.w	r1, sp, r2
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4630      	mov	r0, r6
 8007a96:	f104 060e 	add.w	r6, r4, #14
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	f009 fadc 	bl	8011058 <memcpy.isra.0>
 8007aa0:	2114      	movs	r1, #20
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	7625      	strb	r5, [r4, #24]
 8007aa6:	7665      	strb	r5, [r4, #25]
 8007aa8:	f009 fabd 	bl	8011026 <net_chksum>
 8007aac:	8a21      	ldrh	r1, [r4, #16]
 8007aae:	8320      	strh	r0, [r4, #24]
 8007ab0:	ba49      	rev16	r1, r1
 8007ab2:	b289      	uxth	r1, r1
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007aba:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007abe:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007ac2:	f009 fab0 	bl	8011026 <net_chksum>
 8007ac6:	8a21      	ldrh	r1, [r4, #16]
 8007ac8:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007aca:	ba49      	rev16	r1, r1
 8007acc:	b289      	uxth	r1, r1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	310e      	adds	r1, #14
 8007ad2:	f00c f919 	bl	8013d08 <emac_eth_send>
 8007ad6:	b002      	add	sp, #8
 8007ad8:	bd70      	pop	{r4, r5, r6, pc}
 8007ada:	bf00      	nop
 8007adc:	20001d00 	andcs	r1, r0, r0, lsl #26
 8007ae0:	20001cf4 	strdcs	r1, [r0], -r4

08007ae4 <__aeabi_uldivmod>:
 8007ae4:	b953      	cbnz	r3, 8007afc <__aeabi_uldivmod+0x18>
 8007ae6:	b94a      	cbnz	r2, 8007afc <__aeabi_uldivmod+0x18>
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	bf08      	it	eq
 8007aec:	2800      	cmpeq	r0, #0
 8007aee:	bf1c      	itt	ne
 8007af0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007af4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007af8:	f000 b80c 	b.w	8007b14 <__aeabi_idiv0>
 8007afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8007b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007b04:	f00d f924 	bl	8014d50 <__udivmoddi4>
 8007b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b10:	b004      	add	sp, #16
 8007b12:	4770      	bx	lr

08007b14 <__aeabi_idiv0>:
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop

08007b18 <Reset_Handler>:
 8007b18:	480c      	ldr	r0, [pc, #48]	; (8007b4c <Zerobss+0x10>)
 8007b1a:	4685      	mov	sp, r0
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	e003      	b.n	8007b28 <DataInit>

08007b20 <CopyData>:
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <Zerobss+0x14>)
 8007b22:	585b      	ldr	r3, [r3, r1]
 8007b24:	5043      	str	r3, [r0, r1]
 8007b26:	3104      	adds	r1, #4

08007b28 <DataInit>:
 8007b28:	480a      	ldr	r0, [pc, #40]	; (8007b54 <Zerobss+0x18>)
 8007b2a:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <Zerobss+0x1c>)
 8007b2c:	1842      	adds	r2, r0, r1
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d3f6      	bcc.n	8007b20 <CopyData>
 8007b32:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <Zerobss+0x20>)
 8007b34:	e002      	b.n	8007b3c <Zerobss>

08007b36 <FillZerobss>:
 8007b36:	2300      	movs	r3, #0
 8007b38:	f842 3b04 	str.w	r3, [r2], #4

08007b3c <Zerobss>:
 8007b3c:	4b08      	ldr	r3, [pc, #32]	; (8007b60 <Zerobss+0x24>)
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d3f9      	bcc.n	8007b36 <FillZerobss>
 8007b42:	f00b faaf 	bl	80130a4 <SystemInit>
 8007b46:	f000 f97f 	bl	8007e48 <main>
 8007b4a:	4770      	bx	lr
 8007b4c:	20018000 	andcs	r8, r1, r0
 8007b50:	08017378 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, ip, sp, lr}
 8007b54:	20000000 	andcs	r0, r0, r0
 8007b58:	200000f8 	strdcs	r0, [r0], -r8
 8007b5c:	200000f8 	strdcs	r0, [r0], -r8
 8007b60:	2000d984 	andcs	sp, r0, r4, lsl #19

08007b64 <ADC0_1_IRQHandler>:
 8007b64:	e7fe      	b.n	8007b64 <ADC0_1_IRQHandler>

08007b66 <memcmp>:
 8007b66:	b510      	push	{r4, lr}
 8007b68:	3901      	subs	r1, #1
 8007b6a:	4402      	add	r2, r0
 8007b6c:	4290      	cmp	r0, r2
 8007b6e:	d101      	bne.n	8007b74 <memcmp+0xe>
 8007b70:	2000      	movs	r0, #0
 8007b72:	e005      	b.n	8007b80 <memcmp+0x1a>
 8007b74:	7803      	ldrb	r3, [r0, #0]
 8007b76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b7a:	42a3      	cmp	r3, r4
 8007b7c:	d001      	beq.n	8007b82 <memcmp+0x1c>
 8007b7e:	1b18      	subs	r0, r3, r4
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	3001      	adds	r0, #1
 8007b84:	e7f2      	b.n	8007b6c <memcmp+0x6>

08007b86 <DisplayHandler::~DisplayHandler()>:
 8007b86:	4770      	bx	lr

08007b88 <ArtNetReboot::~ArtNetReboot()>:
 8007b88:	4770      	bx	lr

08007b8a <DisplayUdfHandler::~DisplayUdfHandler()>:
 8007b8a:	4770      	bx	lr

08007b8c <DisplayUdfHandler::ShowLongName(char const*)>:
 8007b8c:	4770      	bx	lr

08007b8e <dmxconfigudp::atoi(char const*, unsigned char)>:
 8007b8e:	b530      	push	{r4, r5, lr}
 8007b90:	1e42      	subs	r2, r0, #1
 8007b92:	250a      	movs	r5, #10
 8007b94:	2000      	movs	r0, #0
 8007b96:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007b9a:	3b30      	subs	r3, #48	; 0x30
 8007b9c:	b2dc      	uxtb	r4, r3
 8007b9e:	2c09      	cmp	r4, #9
 8007ba0:	d805      	bhi.n	8007bae <dmxconfigudp::atoi(char const*, unsigned char)+0x20>
 8007ba2:	3901      	subs	r1, #1
 8007ba4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8007ba8:	fb05 3000 	mla	r0, r5, r0, r3
 8007bac:	d1f3      	bne.n	8007b96 <dmxconfigudp::atoi(char const*, unsigned char)+0x8>
 8007bae:	bd30      	pop	{r4, r5, pc}

08007bb0 <ArtNetReboot::Run()>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	4c07      	ldr	r4, [pc, #28]	; (8007bd0 <ArtNetReboot::Run()+0x20>)
 8007bb4:	6820      	ldr	r0, [r4, #0]
 8007bb6:	f000 fde9 	bl	800878c <ArtNetNode::Stop()>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	6898      	ldr	r0, [r3, #8]
 8007bbe:	b128      	cbz	r0, 8007bcc <ArtNetReboot::Run()+0x1c>
 8007bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc4:	6803      	ldr	r3, [r0, #0]
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	4718      	bx	r3
 8007bcc:	bd10      	pop	{r4, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000704 	andcs	r0, r0, r4, lsl #14

08007bd4 <ArtNetReboot::~ArtNetReboot()>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	f00a fdc8 	bl	801276c <operator delete(void*)>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	bd10      	pop	{r4, pc}

08007be0 <DisplayHandler::~DisplayHandler()>:
 8007be0:	b510      	push	{r4, lr}
 8007be2:	4604      	mov	r4, r0
 8007be4:	f00a fdc2 	bl	801276c <operator delete(void*)>
 8007be8:	4620      	mov	r0, r4
 8007bea:	bd10      	pop	{r4, pc}

08007bec <DisplayUdfHandler::~DisplayUdfHandler()>:
 8007bec:	b510      	push	{r4, lr}
 8007bee:	4604      	mov	r4, r0
 8007bf0:	f00a fdbc 	bl	801276c <operator delete(void*)>
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	bd10      	pop	{r4, pc}

08007bf8 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 8007bfa:	6819      	ldr	r1, [r3, #0]
 8007bfc:	4b02      	ldr	r3, [pc, #8]	; (8007c08 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 8007bfe:	6818      	ldr	r0, [r3, #0]
 8007c00:	f009 bdcc 	b.w	801179c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007c04:	20000704 	andcs	r0, r0, r4, lsl #14
 8007c08:	20009bf0 	strdcs	r9, [r0], -r0

08007c0c <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 8007c0c:	4b02      	ldr	r3, [pc, #8]	; (8007c18 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 8007c0e:	6819      	ldr	r1, [r3, #0]
 8007c10:	4b02      	ldr	r3, [pc, #8]	; (8007c1c <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	f009 bdc2 	b.w	801179c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007c18:	20000704 	andcs	r0, r0, r4, lsl #14
 8007c1c:	20009bf0 	strdcs	r9, [r0], -r0

08007c20 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 8007c20:	4b02      	ldr	r3, [pc, #8]	; (8007c2c <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 8007c22:	6819      	ldr	r1, [r3, #0]
 8007c24:	4b02      	ldr	r3, [pc, #8]	; (8007c30 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	f009 bdb8 	b.w	801179c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007c2c:	20000704 	andcs	r0, r0, r4, lsl #14
 8007c30:	20009bf0 	strdcs	r9, [r0], -r0

08007c34 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 8007c34:	4b02      	ldr	r3, [pc, #8]	; (8007c40 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 8007c36:	6819      	ldr	r1, [r3, #0]
 8007c38:	4b02      	ldr	r3, [pc, #8]	; (8007c44 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	f009 bdae 	b.w	801179c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007c40:	20000704 	andcs	r0, r0, r4, lsl #14
 8007c44:	20009bf0 	strdcs	r9, [r0], -r0

08007c48 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 8007c48:	4b02      	ldr	r3, [pc, #8]	; (8007c54 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 8007c4a:	6819      	ldr	r1, [r3, #0]
 8007c4c:	4b02      	ldr	r3, [pc, #8]	; (8007c58 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	f009 bda4 	b.w	801179c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007c54:	20000704 	andcs	r0, r0, r4, lsl #14
 8007c58:	20009bf0 	strdcs	r9, [r0], -r0

08007c5c <DisplayUdfHandler::ShowShortName(char const*)>:
 8007c5c:	4b02      	ldr	r3, [pc, #8]	; (8007c68 <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 8007c5e:	6819      	ldr	r1, [r3, #0]
 8007c60:	4b02      	ldr	r3, [pc, #8]	; (8007c6c <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	f009 bd77 	b.w	8011756 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8007c68:	20000704 	andcs	r0, r0, r4, lsl #14
 8007c6c:	20009bf0 	strdcs	r9, [r0], -r0

08007c70 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8007c70:	b110      	cbz	r0, 8007c78 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 8007c72:	6803      	ldr	r3, [r0, #0]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	4718      	bx	r3
 8007c78:	4770      	bx	lr

08007c7a <Display::PutChar(int) [clone .isra.0]>:
 8007c7a:	b110      	cbz	r0, 8007c82 <Display::PutChar(int) [clone .isra.0]+0x8>
 8007c7c:	6803      	ldr	r3, [r0, #0]
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	4718      	bx	r3
 8007c82:	4770      	bx	lr

08007c84 <DisplayHandler::Print(unsigned int)>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	7903      	ldrb	r3, [r0, #4]
 8007c88:	b1f3      	cbz	r3, 8007cc8 <DisplayHandler::Print(unsigned int)+0x44>
 8007c8a:	2904      	cmp	r1, #4
 8007c8c:	bf98      	it	ls
 8007c8e:	4b0f      	ldrls	r3, [pc, #60]	; (8007ccc <DisplayHandler::Print(unsigned int)+0x48>)
 8007c90:	4d0f      	ldr	r5, [pc, #60]	; (8007cd0 <DisplayHandler::Print(unsigned int)+0x4c>)
 8007c92:	bf98      	it	ls
 8007c94:	5c5c      	ldrbls	r4, [r3, r1]
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	bf88      	it	hi
 8007c9a:	2455      	movhi	r4, #85	; 0x55
 8007c9c:	6998      	ldr	r0, [r3, #24]
 8007c9e:	b178      	cbz	r0, 8007cc0 <DisplayHandler::Print(unsigned int)+0x3c>
 8007ca0:	7901      	ldrb	r1, [r0, #4]
 8007ca2:	3901      	subs	r1, #1
 8007ca4:	b2c9      	uxtb	r1, r1
 8007ca6:	b168      	cbz	r0, 8007cc4 <DisplayHandler::Print(unsigned int)+0x40>
 8007ca8:	7942      	ldrb	r2, [r0, #5]
 8007caa:	3a01      	subs	r2, #1
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	f7ff ffdf 	bl	8007c70 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8007cb2:	682b      	ldr	r3, [r5, #0]
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	6998      	ldr	r0, [r3, #24]
 8007cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cbc:	f7ff bfdd 	b.w	8007c7a <Display::PutChar(int) [clone .isra.0]>
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	e7ee      	b.n	8007ca2 <DisplayHandler::Print(unsigned int)+0x1e>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	e7f0      	b.n	8007caa <DisplayHandler::Print(unsigned int)+0x26>
 8007cc8:	bd38      	pop	{r3, r4, r5, pc}
 8007cca:	bf00      	nop
 8007ccc:	0801514c 	stmdaeq	r1, {r2, r3, r6, r8, ip, lr}
 8007cd0:	20009bf8 	strdcs	r9, [r0], -r8

08007cd4 <Display::SetSleep(bool)>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	6980      	ldr	r0, [r0, #24]
 8007cda:	460d      	mov	r5, r1
 8007cdc:	b138      	cbz	r0, 8007cee <Display::SetSleep(bool)+0x1a>
 8007cde:	6803      	ldr	r3, [r0, #0]
 8007ce0:	7421      	strb	r1, [r4, #16]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	4798      	blx	r3
 8007ce6:	b915      	cbnz	r5, 8007cee <Display::SetSleep(bool)+0x1a>
 8007ce8:	4b01      	ldr	r3, [pc, #4]	; (8007cf0 <Display::SetSleep(bool)+0x1c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6063      	str	r3, [r4, #4]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	20009d04 	andcs	r9, r0, r4, lsl #26

08007cf4 <Display::TextStatus(char const*)>:
 8007cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	6980      	ldr	r0, [r0, #24]
 8007cfc:	460d      	mov	r5, r1
 8007cfe:	b360      	cbz	r0, 8007d5a <Display::TextStatus(char const*)+0x66>
 8007d00:	7947      	ldrb	r7, [r0, #5]
 8007d02:	2100      	movs	r1, #0
 8007d04:	1e7e      	subs	r6, r7, #1
 8007d06:	b2f6      	uxtb	r6, r6
 8007d08:	4632      	mov	r2, r6
 8007d0a:	f890 9004 	ldrb.w	r9, [r0, #4]
 8007d0e:	f04f 0800 	mov.w	r8, #0
 8007d12:	f7ff ffad 	bl	8007c70 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8007d16:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007d1a:	45c1      	cmp	r9, r8
 8007d1c:	69a0      	ldr	r0, [r4, #24]
 8007d1e:	d816      	bhi.n	8007d4e <Display::TextStatus(char const*)+0x5a>
 8007d20:	4632      	mov	r2, r6
 8007d22:	2100      	movs	r1, #0
 8007d24:	f7ff ffa4 	bl	8007c70 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8007d28:	69a0      	ldr	r0, [r4, #24]
 8007d2a:	b1b0      	cbz	r0, 8007d5a <Display::TextStatus(char const*)+0x66>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	7901      	ldrb	r1, [r0, #4]
 8007d30:	5cea      	ldrb	r2, [r5, r3]
 8007d32:	b11a      	cbz	r2, 8007d3c <Display::TextStatus(char const*)+0x48>
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	4299      	cmp	r1, r3
 8007d38:	4613      	mov	r3, r2
 8007d3a:	dcf9      	bgt.n	8007d30 <Display::TextStatus(char const*)+0x3c>
 8007d3c:	6802      	ldr	r2, [r0, #0]
 8007d3e:	4639      	mov	r1, r7
 8007d40:	69d4      	ldr	r4, [r2, #28]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	462a      	mov	r2, r5
 8007d46:	46a4      	mov	ip, r4
 8007d48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d4c:	4760      	bx	ip
 8007d4e:	2120      	movs	r1, #32
 8007d50:	f7ff ff93 	bl	8007c7a <Display::PutChar(int) [clone .isra.0]>
 8007d54:	f108 0801 	add.w	r8, r8, #1
 8007d58:	e7df      	b.n	8007d1a <Display::TextStatus(char const*)+0x26>
 8007d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d5e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8007d5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d60:	4605      	mov	r5, r0
 8007d62:	461e      	mov	r6, r3
 8007d64:	460f      	mov	r7, r1
 8007d66:	4614      	mov	r4, r2
 8007d68:	f7ff ffc4 	bl	8007cf4 <Display::TextStatus(char const*)>
 8007d6c:	7c6b      	ldrb	r3, [r5, #17]
 8007d6e:	b19b      	cbz	r3, 8007d98 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 8007d70:	43e2      	mvns	r2, r4
 8007d72:	2312      	movs	r3, #18
 8007d74:	7a28      	ldrb	r0, [r5, #8]
 8007d76:	f88d 3004 	strb.w	r3, [sp, #4]
 8007d7a:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8007d7e:	f88d 3005 	strb.w	r3, [sp, #5]
 8007d82:	f88d 2006 	strb.w	r2, [sp, #6]
 8007d86:	f00c f857 	bl	8013e38 <gd32_i2c_set_address(unsigned char)>
 8007d8a:	68e8      	ldr	r0, [r5, #12]
 8007d8c:	f00c f84c 	bl	8013e28 <gd32_i2c_set_baudrate(unsigned int)>
 8007d90:	2103      	movs	r1, #3
 8007d92:	a801      	add	r0, sp, #4
 8007d94:	f00c f856 	bl	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 8007d98:	1c73      	adds	r3, r6, #1
 8007d9a:	d006      	beq.n	8007daa <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	4630      	mov	r0, r6
 8007da0:	b003      	add	sp, #12
 8007da2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007da6:	f00a bb7d 	b.w	80124a4 <console_status>
 8007daa:	b003      	add	sp, #12
 8007dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007db0 <display::timeout::gpio_init()>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	f240 6003 	movw	r0, #1539	; 0x603
 8007db6:	f00b fbbb 	bl	8013530 <rcu_periph_clock_enable>
 8007dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007dc2:	2203      	movs	r2, #3
 8007dc4:	2148      	movs	r1, #72	; 0x48
 8007dc6:	4801      	ldr	r0, [pc, #4]	; (8007dcc <display::timeout::gpio_init()+0x1c>)
 8007dc8:	f00b bb1a 	b.w	8013400 <gpio_init>
 8007dcc:	40010c00 	andmi	r0, r1, r0, lsl #24

08007dd0 <display::timeout::gpio_renew()>:
 8007dd0:	4b03      	ldr	r3, [pc, #12]	; (8007de0 <display::timeout::gpio_renew()+0x10>)
 8007dd2:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 8007dd6:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8007dda:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8007dde:	4770      	bx	lr
 8007de0:	40010000 	andmi	r0, r1, r0

08007de4 <RDMDevice::Init()>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	f890 2071 	ldrb.w	r2, [r0, #113]	; 0x71
 8007dea:	2301      	movs	r3, #1
 8007dec:	2a20      	cmp	r2, #32
 8007dee:	bf28      	it	cs
 8007df0:	2220      	movcs	r2, #32
 8007df2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8007df6:	4604      	mov	r4, r0
 8007df8:	4613      	mov	r3, r2
 8007dfa:	f100 0151 	add.w	r1, r0, #81	; 0x51
 8007dfe:	f100 050a 	add.w	r5, r0, #10
 8007e02:	3b01      	subs	r3, #1
 8007e04:	d215      	bcs.n	8007e32 <RDMDevice::Init()+0x4e>
 8007e06:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007e08:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
 8007e0c:	b118      	cbz	r0, 8007e16 <RDMDevice::Init()+0x32>
 8007e0e:	6803      	ldr	r3, [r0, #0]
 8007e10:	4629      	mov	r1, r5
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	4798      	blx	r3
 8007e16:	4629      	mov	r1, r5
 8007e18:	f06f 0509 	mvn.w	r5, #9
 8007e1c:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
 8007e20:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8007e24:	1b2d      	subs	r5, r5, r4
 8007e26:	186a      	adds	r2, r5, r1
 8007e28:	4290      	cmp	r0, r2
 8007e2a:	d807      	bhi.n	8007e3c <RDMDevice::Init()+0x58>
 8007e2c:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8007e30:	bd38      	pop	{r3, r4, r5, pc}
 8007e32:	f811 0b01 	ldrb.w	r0, [r1], #1
 8007e36:	f801 0c48 	strb.w	r0, [r1, #-72]
 8007e3a:	e7e2      	b.n	8007e02 <RDMDevice::Init()+0x1e>
 8007e3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e40:	4413      	add	r3, r2
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	e7ef      	b.n	8007e26 <RDMDevice::Init()+0x42>
	...

08007e48 <main>:
 8007e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	2501      	movs	r5, #1
 8007e4e:	f5ad 5dad 	sub.w	sp, sp, #5536	; 0x15a0
 8007e52:	a80f      	add	r0, sp, #60	; 0x3c
 8007e54:	f00a fbda 	bl	801260c <Hardware::Hardware()>
 8007e58:	a874      	add	r0, sp, #464	; 0x1d0
 8007e5a:	f008 f889 	bl	800ff70 <Network::Network()>
 8007e5e:	a81b      	add	r0, sp, #108	; 0x6c
 8007e60:	f00a fb7e 	bl	8012560 <LedBlink::LedBlink()>
 8007e64:	a83b      	add	r0, sp, #236	; 0xec
 8007e66:	f009 f94f 	bl	8011108 <DisplayUdf::DisplayUdf()>
 8007e6a:	ae08      	add	r6, sp, #32
 8007e6c:	4ab4      	ldr	r2, [pc, #720]	; (8008140 <main+0x2f8>)
 8007e6e:	4bb5      	ldr	r3, [pc, #724]	; (8008144 <main+0x2fc>)
 8007e70:	49b5      	ldr	r1, [pc, #724]	; (8008148 <main+0x300>)
 8007e72:	a804      	add	r0, sp, #16
 8007e74:	f00a fb2e 	bl	80124d4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8007e78:	f1a6 000c 	sub.w	r0, r6, #12
 8007e7c:	f006 ff50 	bl	800ed20 <FlashRom::FlashRom()>
 8007e80:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 800814c <main+0x304>
 8007e84:	a806      	add	r0, sp, #24
 8007e86:	f006 fb9b 	bl	800e5c0 <SpiFlashStore::SpiFlashStore()>
 8007e8a:	49b1      	ldr	r1, [pc, #708]	; (8008150 <main+0x308>)
 8007e8c:	a804      	add	r0, sp, #16
 8007e8e:	f00a fb59 	bl	8012544 <FirmwareVersion::Print(char const*)>
 8007e92:	2004      	movs	r0, #4
 8007e94:	f8c8 5010 	str.w	r5, [r8, #16]
 8007e98:	f00a fc6c 	bl	8012774 <operator new(unsigned int)>
 8007e9c:	4bad      	ldr	r3, [pc, #692]	; (8008154 <main+0x30c>)
 8007e9e:	2400      	movs	r4, #0
 8007ea0:	6003      	str	r3, [r0, #0]
 8007ea2:	900f      	str	r0, [sp, #60]	; 0x3c
 8007ea4:	2008      	movs	r0, #8
 8007ea6:	ab0f      	add	r3, sp, #60	; 0x3c
 8007ea8:	f00a fc64 	bl	8012774 <operator new(unsigned int)>
 8007eac:	4baa      	ldr	r3, [pc, #680]	; (8008158 <main+0x310>)
 8007eae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007eb2:	6003      	str	r3, [r0, #0]
 8007eb4:	4ba9      	ldr	r3, [pc, #676]	; (800815c <main+0x314>)
 8007eb6:	49aa      	ldr	r1, [pc, #680]	; (8008160 <main+0x318>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3b00      	subs	r3, #0
 8007ebc:	bf18      	it	ne
 8007ebe:	2301      	movne	r3, #1
 8007ec0:	7103      	strb	r3, [r0, #4]
 8007ec2:	901d      	str	r0, [sp, #116]	; 0x74
 8007ec4:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ec6:	a83b      	add	r0, sp, #236	; 0xec
 8007ec8:	2303      	movs	r3, #3
 8007eca:	f7ff ff48 	bl	8007d5e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007ece:	a811      	add	r0, sp, #68	; 0x44
 8007ed0:	f006 fe88 	bl	800ebe4 <StoreNetwork::StoreNetwork()>
 8007ed4:	ab74      	add	r3, sp, #464	; 0x1d0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	aa12      	add	r2, sp, #72	; 0x48
 8007eda:	a911      	add	r1, sp, #68	; 0x44
 8007edc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8007ee0:	f008 f89e 	bl	8010020 <Network::Init(NetworkParamsStore*)>
 8007ee4:	a874      	add	r0, sp, #464	; 0x1d0
 8007ee6:	f008 fa75 	bl	80103d4 <Network::Print()>
 8007eea:	2303      	movs	r3, #3
 8007eec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007ef0:	499c      	ldr	r1, [pc, #624]	; (8008164 <main+0x31c>)
 8007ef2:	a83b      	add	r0, sp, #236	; 0xec
 8007ef4:	f7ff ff33 	bl	8007d5e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007ef8:	a807      	add	r0, sp, #28
 8007efa:	f007 fc7b 	bl	800f7f4 <MDNS::MDNS()>
 8007efe:	a807      	add	r0, sp, #28
 8007f00:	f007 fd38 	bl	800f974 <MDNS::Start()>
 8007f04:	f642 1305 	movw	r3, #10501	; 0x2905
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4a97      	ldr	r2, [pc, #604]	; (8008168 <main+0x320>)
 8007f0c:	e9cd 4400 	strd	r4, r4, [sp]
 8007f10:	a807      	add	r0, sp, #28
 8007f12:	f007 fe99 	bl	800fc48 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8007f16:	4b95      	ldr	r3, [pc, #596]	; (800816c <main+0x324>)
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4a95      	ldr	r2, [pc, #596]	; (8008170 <main+0x328>)
 8007f1c:	e9cd 5300 	strd	r5, r3, [sp]
 8007f20:	a807      	add	r0, sp, #28
 8007f22:	2350      	movs	r3, #80	; 0x50
 8007f24:	f007 fe90 	bl	800fc48 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8007f28:	a807      	add	r0, sp, #28
 8007f2a:	f007 ffd3 	bl	800fed4 <MDNS::Print()>
 8007f2e:	2303      	movs	r3, #3
 8007f30:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 8007f34:	498f      	ldr	r1, [pc, #572]	; (8008174 <main+0x32c>)
 8007f36:	a83b      	add	r0, sp, #236	; 0xec
 8007f38:	f7ff ff11 	bl	8007d5e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007f3c:	a813      	add	r0, sp, #76	; 0x4c
 8007f3e:	f006 fd39 	bl	800e9b4 <StoreArtNet::StoreArtNet()>
 8007f42:	a913      	add	r1, sp, #76	; 0x4c
 8007f44:	a851      	add	r0, sp, #324	; 0x144
 8007f46:	f002 f905 	bl	800a154 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	f60d 0088 	addw	r0, sp, #2184	; 0x888
 8007f50:	f000 fb54 	bl	80085fc <ArtNet4Node::ArtNet4Node(unsigned char)>
 8007f54:	a851      	add	r0, sp, #324	; 0x144
 8007f56:	f002 f921 	bl	800a19c <ArtNetParams::Load()>
 8007f5a:	b138      	cbz	r0, 8007f6c <main+0x124>
 8007f5c:	a851      	add	r0, sp, #324	; 0x144
 8007f5e:	f60d 018c 	addw	r1, sp, #2188	; 0x88c
 8007f62:	f002 fcce 	bl	800a902 <ArtNetParams::Set(ArtNetNode*)>
 8007f66:	a851      	add	r0, sp, #324	; 0x144
 8007f68:	f002 fd4b 	bl	800aa02 <ArtNetParams::Dump()>
 8007f6c:	4b82      	ldr	r3, [pc, #520]	; (8008178 <main+0x330>)
 8007f6e:	2100      	movs	r1, #0
 8007f70:	6033      	str	r3, [r6, #0]
 8007f72:	ab14      	add	r3, sp, #80	; 0x50
 8007f74:	f8cd 38ac 	str.w	r3, [sp, #2220]	; 0x8ac
 8007f78:	f89d 21be 	ldrb.w	r2, [sp, #446]	; 0x1be
 8007f7c:	ab51      	add	r3, sp, #324	; 0x144
 8007f7e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8007f82:	f002 0201 	and.w	r2, r2, #1
 8007f86:	f60d 008c 	addw	r0, sp, #2188	; 0x88c
 8007f8a:	f8cd 68b0 	str.w	r6, [sp, #2224]	; 0x8b0
 8007f8e:	f000 fecd 	bl	8008d2c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8007f92:	a809      	add	r0, sp, #36	; 0x24
 8007f94:	f006 fd7a 	bl	800ea8c <StoreDmxSend::StoreDmxSend()>
 8007f98:	a909      	add	r1, sp, #36	; 0x24
 8007f9a:	a817      	add	r0, sp, #92	; 0x5c
 8007f9c:	f004 f96e 	bl	800c27c <DmxParams::DmxParams(DmxParamsStore*)>
 8007fa0:	a821      	add	r0, sp, #132	; 0x84
 8007fa2:	f004 fdef 	bl	800cb84 <Dmx::Dmx()>
 8007fa6:	a817      	add	r0, sp, #92	; 0x5c
 8007fa8:	f004 f974 	bl	800c294 <DmxParams::Load()>
 8007fac:	b130      	cbz	r0, 8007fbc <main+0x174>
 8007fae:	a817      	add	r0, sp, #92	; 0x5c
 8007fb0:	f004 fabe 	bl	800c530 <DmxParams::Dump()>
 8007fb4:	a921      	add	r1, sp, #132	; 0x84
 8007fb6:	a817      	add	r0, sp, #92	; 0x5c
 8007fb8:	f004 fa90 	bl	800c4dc <DmxParams::Set(Dmx*)>
 8007fbc:	4a6f      	ldr	r2, [pc, #444]	; (800817c <main+0x334>)
 8007fbe:	ac0a      	add	r4, sp, #40	; 0x28
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	920a      	str	r2, [sp, #40]	; 0x28
 8007fc4:	ab0a      	add	r3, sp, #40	; 0x28
 8007fc6:	f004 f8ff 	bl	800c1c8 <DmxSend::Print()>
 8007fca:	f89d 5f6a 	ldrb.w	r5, [sp, #3946]	; 0xf6a
 8007fce:	b16d      	cbz	r5, 8007fec <main+0x1a4>
 8007fd0:	2001      	movs	r0, #1
 8007fd2:	f8cd 4894 	str.w	r4, [sp, #2196]	; 0x894
 8007fd6:	f00a fbcd 	bl	8012774 <operator new(unsigned int)>
 8007fda:	4b69      	ldr	r3, [pc, #420]	; (8008180 <main+0x338>)
 8007fdc:	4605      	mov	r5, r0
 8007fde:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	f007 fff4 	bl	800ffd0 <Network::Begin(unsigned short)>
 8007fe8:	4b66      	ldr	r3, [pc, #408]	; (8008184 <main+0x33c>)
 8007fea:	6018      	str	r0, [r3, #0]
 8007fec:	ac0b      	add	r4, sp, #44	; 0x2c
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 fa30 	bl	8008454 <DmxInput::DmxInput()>
 8007ff4:	f89d 3f6b 	ldrb.w	r3, [sp, #3947]	; 0xf6b
 8007ff8:	b10b      	cbz	r3, 8007ffe <main+0x1b6>
 8007ffa:	f8cd 48a0 	str.w	r4, [sp, #2208]	; 0x8a0
 8007ffe:	ab15      	add	r3, sp, #84	; 0x54
 8008000:	4618      	mov	r0, r3
 8008002:	9303      	str	r3, [sp, #12]
 8008004:	f006 fe4c 	bl	800eca0 <StoreRDMDevice::StoreRDMDevice()>
 8008008:	f89d 3f6a 	ldrb.w	r3, [sp, #3946]	; 0xf6a
 800800c:	b38b      	cbz	r3, 8008072 <main+0x22a>
 800800e:	ab51      	add	r3, sp, #324	; 0x144
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	0699      	lsls	r1, r3, #26
 8008014:	d52d      	bpl.n	8008072 <main+0x22a>
 8008016:	208c      	movs	r0, #140	; 0x8c
 8008018:	f00a fbac 	bl	8012774 <operator new(unsigned int)>
 800801c:	2101      	movs	r1, #1
 800801e:	4604      	mov	r4, r0
 8008020:	f003 fcae 	bl	800b980 <ArtNetRdmController::ArtNetRdmController(unsigned int)>
 8008024:	9903      	ldr	r1, [sp, #12]
 8008026:	a8a6      	add	r0, sp, #664	; 0x298
 8008028:	f003 fff0 	bl	800c00c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 800802c:	a8a6      	add	r0, sp, #664	; 0x298
 800802e:	f003 ffff 	bl	800c030 <RDMDeviceParams::Load()>
 8008032:	1d27      	adds	r7, r4, #4
 8008034:	b130      	cbz	r0, 8008044 <main+0x1fc>
 8008036:	a8a6      	add	r0, sp, #664	; 0x298
 8008038:	4639      	mov	r1, r7
 800803a:	f004 f804 	bl	800c046 <RDMDeviceParams::Set(RDMDevice*)>
 800803e:	a8a6      	add	r0, sp, #664	; 0x298
 8008040:	f004 f836 	bl	800c0b0 <RDMDeviceParams::Dump()>
 8008044:	4638      	mov	r0, r7
 8008046:	f7ff fecd 	bl	8007de4 <RDMDevice::Init()>
 800804a:	4638      	mov	r0, r7
 800804c:	f003 ff6a 	bl	800bf24 <RDMDevice::Print()>
 8008050:	a83b      	add	r0, sp, #236	; 0xec
 8008052:	2303      	movs	r3, #3
 8008054:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
 8008058:	494b      	ldr	r1, [pc, #300]	; (8008188 <main+0x340>)
 800805a:	f7ff fe80 	bl	8007d5e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800805e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008060:	b108      	cbz	r0, 8008066 <main+0x21e>
 8008062:	f003 fe91 	bl	800bd88 <RDMDiscovery::Full()>
 8008066:	2200      	movs	r2, #0
 8008068:	4621      	mov	r1, r4
 800806a:	f60d 008c 	addw	r0, sp, #2188	; 0x88c
 800806e:	f001 fe31 	bl	8009cd4 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>
 8008072:	f60d 0088 	addw	r0, sp, #2184	; 0x888
 8008076:	f000 fb1f 	bl	80086b8 <ArtNet4Node::Print()>
 800807a:	f89d 3f6a 	ldrb.w	r3, [sp, #3946]	; 0xf6a
 800807e:	f89d 4f6b 	ldrb.w	r4, [sp, #3947]	; 0xf6b
 8008082:	441c      	add	r4, r3
 8008084:	f89d 21be 	ldrb.w	r2, [sp, #446]	; 0x1be
 8008088:	ab51      	add	r3, sp, #324	; 0x144
 800808a:	07d2      	lsls	r2, r2, #31
 800808c:	f140 8117 	bpl.w	80082be <main+0x476>
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	4a3e      	ldr	r2, [pc, #248]	; (800818c <main+0x344>)
 8008094:	f013 0f20 	tst.w	r3, #32
 8008098:	4b3d      	ldr	r3, [pc, #244]	; (8008190 <main+0x348>)
 800809a:	bf08      	it	eq
 800809c:	461a      	moveq	r2, r3
 800809e:	493d      	ldr	r1, [pc, #244]	; (8008194 <main+0x34c>)
 80080a0:	a83b      	add	r0, sp, #236	; 0xec
 80080a2:	f009 f847 	bl	8011134 <DisplayUdf::SetTitle(char const*, ...)>
 80080a6:	2206      	movs	r2, #6
 80080a8:	2102      	movs	r1, #2
 80080aa:	a83b      	add	r0, sp, #236	; 0xec
 80080ac:	f009 f998 	bl	80113e0 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80080b0:	2202      	movs	r2, #2
 80080b2:	2103      	movs	r1, #3
 80080b4:	a83b      	add	r0, sp, #236	; 0xec
 80080b6:	f009 f993 	bl	80113e0 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80080ba:	2203      	movs	r2, #3
 80080bc:	2104      	movs	r1, #4
 80080be:	a83b      	add	r0, sp, #236	; 0xec
 80080c0:	f009 f98e 	bl	80113e0 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80080c4:	2204      	movs	r2, #4
 80080c6:	2105      	movs	r1, #5
 80080c8:	a83b      	add	r0, sp, #236	; 0xec
 80080ca:	f009 f989 	bl	80113e0 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80080ce:	2207      	movs	r2, #7
 80080d0:	2106      	movs	r1, #6
 80080d2:	a83b      	add	r0, sp, #236	; 0xec
 80080d4:	f009 f984 	bl	80113e0 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80080d8:	a80c      	add	r0, sp, #48	; 0x30
 80080da:	f006 fca3 	bl	800ea24 <StoreDisplayUdf::StoreDisplayUdf()>
 80080de:	a90c      	add	r1, sp, #48	; 0x30
 80080e0:	a831      	add	r0, sp, #196	; 0xc4
 80080e2:	f009 f9bf 	bl	8011464 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80080e6:	a831      	add	r0, sp, #196	; 0xc4
 80080e8:	f009 f9c9 	bl	801147e <DisplayUdfParams::Load()>
 80080ec:	b130      	cbz	r0, 80080fc <main+0x2b4>
 80080ee:	a831      	add	r0, sp, #196	; 0xc4
 80080f0:	a93b      	add	r1, sp, #236	; 0xec
 80080f2:	f009 fafc 	bl	80116ee <DisplayUdfParams::Set(DisplayUdf*)>
 80080f6:	a831      	add	r0, sp, #196	; 0xc4
 80080f8:	f009 fb2c 	bl	8011754 <DisplayUdfParams::Dump()>
 80080fc:	f60d 018c 	addw	r1, sp, #2188	; 0x88c
 8008100:	a83b      	add	r0, sp, #236	; 0xec
 8008102:	f009 fbf7 	bl	80118f4 <DisplayUdf::Show(ArtNetNode*)>
 8008106:	9a52      	ldr	r2, [sp, #328]	; 0x148
 8008108:	2100      	movs	r1, #0
 800810a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800810e:	ab51      	add	r3, sp, #324	; 0x144
 8008110:	a8a6      	add	r0, sp, #664	; 0x298
 8008112:	4623      	mov	r3, r4
 8008114:	f005 f898 	bl	800d248 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008118:	a80d      	add	r0, sp, #52	; 0x34
 800811a:	f006 fdf7 	bl	800ed0c <StoreRemoteConfig::StoreRemoteConfig()>
 800811e:	a90d      	add	r1, sp, #52	; 0x34
 8008120:	a828      	add	r0, sp, #160	; 0xa0
 8008122:	f005 fb8f 	bl	800d844 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008126:	a828      	add	r0, sp, #160	; 0xa0
 8008128:	f005 fb96 	bl	800d858 <RemoteConfigParams::Load()>
 800812c:	b3a0      	cbz	r0, 8008198 <main+0x350>
 800812e:	a828      	add	r0, sp, #160	; 0xa0
 8008130:	a9a6      	add	r1, sp, #664	; 0x298
 8008132:	f005 fcb8 	bl	800daa6 <RemoteConfigParams::Set(RemoteConfig*)>
 8008136:	a828      	add	r0, sp, #160	; 0xa0
 8008138:	f005 fcd9 	bl	800daee <RemoteConfigParams::Dump()>
 800813c:	e02c      	b.n	8008198 <main+0x350>
 800813e:	bf00      	nop
 8008140:	0801505b 	stmdaeq	r1, {r0, r1, r3, r4, r6, ip, lr}
 8008144:	08015052 	stmdaeq	r1, {r1, r4, r6, ip, lr}
 8008148:	08015151 	stmdaeq	r1, {r0, r4, r6, r8, ip, lr}
 800814c:	40011000 	andmi	r1, r1, r0
 8008150:	08015067 	stmdaeq	r1, {r0, r1, r2, r5, r6, ip, lr}
 8008154:	08015114 	stmdaeq	r1, {r2, r4, r8, ip, lr}
 8008158:	08015100 	stmdaeq	r1, {r8, ip, lr}
 800815c:	20009bf8 	strdcs	r9, [r0], -r8
 8008160:	08016ab9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r9, fp, sp, lr}
 8008164:	08016aa8 	stmdaeq	r1, {r3, r5, r7, r9, fp, sp, lr}
 8008168:	080150a0 	stmdaeq	r1, {r5, r7, ip, lr}
 800816c:	080150b0 	stmdaeq	r1, {r4, r5, r7, ip, lr}
 8008170:	080150a9 	stmdaeq	r1, {r0, r3, r5, r7, ip, lr}
 8008174:	080151c1 	stmdaeq	r1, {r0, r6, r7, r8, ip, lr}
 8008178:	08015128 	stmdaeq	r1, {r3, r5, r8, ip, lr}
 800817c:	080157b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, r9, sl, ip, lr}
 8008180:	200095c0 	andcs	r9, r0, r0, asr #11
 8008184:	20000004 	andcs	r0, r0, r4
 8008188:	080151d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, ip, lr}
 800818c:	080150c3 	stmdaeq	r1, {r0, r1, r6, r7, ip, lr}
 8008190:	0801503d 	stmdaeq	r1, {r0, r2, r3, r4, r5, ip, lr}
 8008194:	080150c7 	stmdaeq	r1, {r0, r1, r2, r6, r7, ip, lr}
 8008198:	a806      	add	r0, sp, #24
 800819a:	f006 fab3 	bl	800e704 <SpiFlashStore::Flash()>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d1fa      	bne.n	8008198 <main+0x350>
 80081a2:	2303      	movs	r3, #3
 80081a4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80081a8:	496e      	ldr	r1, [pc, #440]	; (8008364 <main+0x51c>)
 80081aa:	a83b      	add	r0, sp, #236	; 0xec
 80081ac:	f7ff fdd7 	bl	8007d5e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80081b0:	f60d 0088 	addw	r0, sp, #2184	; 0x888
 80081b4:	f000 fa36 	bl	8008624 <ArtNet4Node::Start()>
 80081b8:	f248 0280 	movw	r2, #32896	; 0x8080
 80081bc:	2302      	movs	r3, #2
 80081be:	496a      	ldr	r1, [pc, #424]	; (8008368 <main+0x520>)
 80081c0:	a83b      	add	r0, sp, #236	; 0xec
 80081c2:	f7ff fdcc 	bl	8007d5e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80081c6:	2102      	movs	r1, #2
 80081c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80081cc:	f00b f8ee 	bl	80133ac <fwdgt_config>
 80081d0:	2801      	cmp	r0, #1
 80081d2:	bf0c      	ite	eq
 80081d4:	2201      	moveq	r2, #1
 80081d6:	2200      	movne	r2, #0
 80081d8:	ab0f      	add	r3, sp, #60	; 0x3c
 80081da:	711a      	strb	r2, [r3, #4]
 80081dc:	d101      	bne.n	80081e2 <main+0x39a>
 80081de:	f00b f8d5 	bl	801338c <fwdgt_enable>
 80081e2:	f8df 9188 	ldr.w	r9, [pc, #392]	; 800836c <main+0x524>
 80081e6:	4f62      	ldr	r7, [pc, #392]	; (8008370 <main+0x528>)
 80081e8:	f00b f8d8 	bl	801339c <fwdgt_counter_reload>
 80081ec:	f7ff f998 	bl	8007520 <net_handle>
 80081f0:	f60d 0088 	addw	r0, sp, #2184	; 0x888
 80081f4:	f000 fa51 	bl	800869a <ArtNet4Node::Run()>
 80081f8:	a8a6      	add	r0, sp, #664	; 0x298
 80081fa:	f005 f9d5 	bl	800d5a8 <RemoteConfig::Run()>
 80081fe:	a806      	add	r0, sp, #24
 8008200:	f006 fa80 	bl	800e704 <SpiFlashStore::Flash()>
 8008204:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008206:	ab1b      	add	r3, sp, #108	; 0x6c
 8008208:	b199      	cbz	r1, 8008232 <main+0x3ea>
 800820a:	f8d9 2000 	ldr.w	r2, [r9]
 800820e:	6958      	ldr	r0, [r3, #20]
 8008210:	1a12      	subs	r2, r2, r0
 8008212:	4291      	cmp	r1, r2
 8008214:	d80d      	bhi.n	8008232 <main+0x3ea>
 8008216:	f8d9 2000 	ldr.w	r2, [r9]
 800821a:	615a      	str	r2, [r3, #20]
 800821c:	691a      	ldr	r2, [r3, #16]
 800821e:	2a01      	cmp	r2, #1
 8008220:	f082 0101 	eor.w	r1, r2, #1
 8008224:	6119      	str	r1, [r3, #16]
 8008226:	bf16      	itet	ne
 8008228:	2301      	movne	r3, #1
 800822a:	f8c8 2014 	streq.w	r2, [r8, #20]
 800822e:	f8c8 3010 	strne.w	r3, [r8, #16]
 8008232:	9940      	ldr	r1, [sp, #256]	; 0x100
 8008234:	aa3b      	add	r2, sp, #236	; 0xec
 8008236:	b161      	cbz	r1, 8008252 <main+0x40a>
 8008238:	7c13      	ldrb	r3, [r2, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d141      	bne.n	80082c2 <main+0x47a>
 800823e:	f8d9 3000 	ldr.w	r3, [r9]
 8008242:	6852      	ldr	r2, [r2, #4]
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	4299      	cmp	r1, r3
 8008248:	d203      	bcs.n	8008252 <main+0x40a>
 800824a:	2101      	movs	r1, #1
 800824c:	a83b      	add	r0, sp, #236	; 0xec
 800824e:	f7ff fd41 	bl	8007cd4 <Display::SetSleep(bool)>
 8008252:	b385      	cbz	r5, 80082b6 <main+0x46e>
 8008254:	1eb3      	subs	r3, r6, #2
 8008256:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8008374 <main+0x52c>
 800825a:	4847      	ldr	r0, [pc, #284]	; (8008378 <main+0x530>)
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	2210      	movs	r2, #16
 8008260:	4651      	mov	r1, sl
 8008262:	7800      	ldrb	r0, [r0, #0]
 8008264:	ab0e      	add	r3, sp, #56	; 0x38
 8008266:	f007 f991 	bl	800f58c <udp_recv>
 800826a:	280a      	cmp	r0, #10
 800826c:	4604      	mov	r4, r0
 800826e:	d922      	bls.n	80082b6 <main+0x46e>
 8008270:	2204      	movs	r2, #4
 8008272:	4651      	mov	r1, sl
 8008274:	4841      	ldr	r0, [pc, #260]	; (800837c <main+0x534>)
 8008276:	f7ff fc76 	bl	8007b66 <memcmp>
 800827a:	b9e0      	cbnz	r0, 80082b6 <main+0x46e>
 800827c:	44a2      	add	sl, r4
 800827e:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 8008282:	2b0a      	cmp	r3, #10
 8008284:	d103      	bne.n	800828e <main+0x446>
 8008286:	3c01      	subs	r4, #1
 8008288:	b2a4      	uxth	r4, r4
 800828a:	2c0a      	cmp	r4, #10
 800828c:	d053      	beq.n	8008336 <main+0x4ee>
 800828e:	2c0e      	cmp	r4, #14
 8008290:	d84f      	bhi.n	8008332 <main+0x4ea>
 8008292:	2206      	movs	r2, #6
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	483a      	ldr	r0, [pc, #232]	; (8008380 <main+0x538>)
 8008298:	f7ff fc65 	bl	8007b66 <memcmp>
 800829c:	2800      	cmp	r0, #0
 800829e:	d14a      	bne.n	8008336 <main+0x4ee>
 80082a0:	2104      	movs	r1, #4
 80082a2:	4838      	ldr	r0, [pc, #224]	; (8008384 <main+0x53c>)
 80082a4:	f7ff fc73 	bl	8007b8e <dmxconfigudp::atoi(char const*, unsigned char)>
 80082a8:	285b      	cmp	r0, #91	; 0x5b
 80082aa:	4601      	mov	r1, r0
 80082ac:	d903      	bls.n	80082b6 <main+0x46e>
 80082ae:	4b36      	ldr	r3, [pc, #216]	; (8008388 <main+0x540>)
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f004 fd75 	bl	800cda0 <Dmx::SetDmxBreakTime(unsigned int)>
 80082b6:	a807      	add	r0, sp, #28
 80082b8:	f007 fde8 	bl	800fe8c <MDNS::Run()>
 80082bc:	e794      	b.n	80081e8 <main+0x3a0>
 80082be:	4a33      	ldr	r2, [pc, #204]	; (800838c <main+0x544>)
 80082c0:	e6ed      	b.n	800809e <main+0x256>
 80082c2:	f7ff fd85 	bl	8007dd0 <display::timeout::gpio_renew()>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d0c3      	beq.n	8008252 <main+0x40a>
 80082ca:	2100      	movs	r1, #0
 80082cc:	e7be      	b.n	800824c <main+0x404>
 80082ce:	2c0c      	cmp	r4, #12
 80082d0:	d915      	bls.n	80082fe <main+0x4b6>
 80082d2:	2c0e      	cmp	r4, #14
 80082d4:	d82a      	bhi.n	800832c <main+0x4e4>
 80082d6:	2208      	movs	r2, #8
 80082d8:	6839      	ldr	r1, [r7, #0]
 80082da:	482d      	ldr	r0, [pc, #180]	; (8008390 <main+0x548>)
 80082dc:	f7ff fc43 	bl	8007b66 <memcmp>
 80082e0:	bb20      	cbnz	r0, 800832c <main+0x4e4>
 80082e2:	2102      	movs	r1, #2
 80082e4:	482b      	ldr	r0, [pc, #172]	; (8008394 <main+0x54c>)
 80082e6:	f7ff fc52 	bl	8007b8e <dmxconfigudp::atoi(char const*, unsigned char)>
 80082ea:	4601      	mov	r1, r0
 80082ec:	b110      	cbz	r0, 80082f4 <main+0x4ac>
 80082ee:	4b2a      	ldr	r3, [pc, #168]	; (8008398 <main+0x550>)
 80082f0:	fbb3 f1f0 	udiv	r1, r3, r0
 80082f4:	4b24      	ldr	r3, [pc, #144]	; (8008388 <main+0x540>)
 80082f6:	6818      	ldr	r0, [r3, #0]
 80082f8:	f004 fd22 	bl	800cd40 <Dmx::SetDmxPeriodTime(unsigned int)>
 80082fc:	e7db      	b.n	80082b6 <main+0x46e>
 80082fe:	2c0a      	cmp	r4, #10
 8008300:	d0d9      	beq.n	80082b6 <main+0x46e>
 8008302:	2206      	movs	r2, #6
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	4825      	ldr	r0, [pc, #148]	; (800839c <main+0x554>)
 8008308:	f7ff fc2d 	bl	8007b66 <memcmp>
 800830c:	2800      	cmp	r0, #0
 800830e:	d1d2      	bne.n	80082b6 <main+0x46e>
 8008310:	2103      	movs	r1, #3
 8008312:	481c      	ldr	r0, [pc, #112]	; (8008384 <main+0x53c>)
 8008314:	f7ff fc3b 	bl	8007b8e <dmxconfigudp::atoi(char const*, unsigned char)>
 8008318:	1e83      	subs	r3, r0, #2
 800831a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800831e:	d8ca      	bhi.n	80082b6 <main+0x46e>
 8008320:	4b19      	ldr	r3, [pc, #100]	; (8008388 <main+0x540>)
 8008322:	b281      	uxth	r1, r0
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	f004 fd4f 	bl	800cdc8 <Dmx::SetDmxSlots(unsigned short)>
 800832a:	e7c4      	b.n	80082b6 <main+0x46e>
 800832c:	2c0d      	cmp	r4, #13
 800832e:	d0e8      	beq.n	8008302 <main+0x4ba>
 8008330:	e7c1      	b.n	80082b6 <main+0x46e>
 8008332:	2c10      	cmp	r4, #16
 8008334:	d8bf      	bhi.n	80082b6 <main+0x46e>
 8008336:	2204      	movs	r2, #4
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	4819      	ldr	r0, [pc, #100]	; (80083a0 <main+0x558>)
 800833c:	f7ff fc13 	bl	8007b66 <memcmp>
 8008340:	2800      	cmp	r0, #0
 8008342:	d1c4      	bne.n	80082ce <main+0x486>
 8008344:	2107      	movs	r1, #7
 8008346:	4817      	ldr	r0, [pc, #92]	; (80083a4 <main+0x55c>)
 8008348:	f7ff fc21 	bl	8007b8e <dmxconfigudp::atoi(char const*, unsigned char)>
 800834c:	4b16      	ldr	r3, [pc, #88]	; (80083a8 <main+0x560>)
 800834e:	f1a0 020c 	sub.w	r2, r0, #12
 8008352:	429a      	cmp	r2, r3
 8008354:	4601      	mov	r1, r0
 8008356:	d8ae      	bhi.n	80082b6 <main+0x46e>
 8008358:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <main+0x540>)
 800835a:	6818      	ldr	r0, [r3, #0]
 800835c:	f004 fd2a 	bl	800cdb4 <Dmx::SetDmxMabTime(unsigned int)>
 8008360:	e7a9      	b.n	80082b6 <main+0x46e>
 8008362:	bf00      	nop
 8008364:	080151b0 	stmdaeq	r1, {r4, r5, r7, r8, ip, lr}
 8008368:	080151eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, ip, lr}
 800836c:	20009d04 	andcs	r9, r0, r4, lsl #26
 8008370:	20000000 	andcs	r0, r0, r0
 8008374:	20000829 	andcs	r0, r0, r9, lsr #16
 8008378:	20000004 	andcs	r0, r0, r4
 800837c:	080150d4 	stmdaeq	r1, {r2, r4, r6, r7, ip, lr}
 8008380:	080150d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, ip, lr}
 8008384:	20000833 	andcs	r0, r0, r3, lsr r8
 8008388:	20000c68 	andcs	r0, r0, r8, ror #24
 800838c:	08015048 	stmdaeq	r1, {r3, r6, ip, lr}
 8008390:	080150e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, ip, lr}
 8008394:	20000835 	andcs	r0, r0, r5, lsr r8
 8008398:	000f4240 	andeq	r4, pc, r0, asr #4
 800839c:	080150ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, ip, lr}
 80083a0:	080150e0 	stmdaeq	r1, {r5, r6, r7, ip, lr}
 80083a4:	20000831 	andcs	r0, r0, r1, lsr r8
 80083a8:	000f4234 	andeq	r4, pc, r4, lsr r2	; <UNPREDICTABLE>

080083ac <DmxInput::~DmxInput()>:
 80083ac:	4770      	bx	lr
	...

080083b0 <DmxInput::Start(unsigned int)>:
 80083b0:	2301      	movs	r3, #1
 80083b2:	b410      	push	{r4}
 80083b4:	4808      	ldr	r0, [pc, #32]	; (80083d8 <DmxInput::Start(unsigned int)+0x28>)
 80083b6:	fa03 f101 	lsl.w	r1, r3, r1
 80083ba:	7802      	ldrb	r2, [r0, #0]
 80083bc:	ea31 0402 	bics.w	r4, r1, r2
 80083c0:	d008      	beq.n	80083d4 <DmxInput::Start(unsigned int)+0x24>
 80083c2:	430a      	orrs	r2, r1
 80083c4:	7002      	strb	r2, [r0, #0]
 80083c6:	4805      	ldr	r0, [pc, #20]	; (80083dc <DmxInput::Start(unsigned int)+0x2c>)
 80083c8:	461a      	mov	r2, r3
 80083ca:	2100      	movs	r1, #0
 80083cc:	6800      	ldr	r0, [r0, #0]
 80083ce:	bc10      	pop	{r4}
 80083d0:	f004 bbaa 	b.w	800cb28 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80083d4:	bc10      	pop	{r4}
 80083d6:	4770      	bx	lr
 80083d8:	200000f8 	strdcs	r0, [r0], -r8
 80083dc:	20000c68 	andcs	r0, r0, r8, ror #24

080083e0 <DmxInput::Stop(unsigned int)>:
 80083e0:	2201      	movs	r2, #1
 80083e2:	b410      	push	{r4}
 80083e4:	4809      	ldr	r0, [pc, #36]	; (800840c <DmxInput::Stop(unsigned int)+0x2c>)
 80083e6:	fa02 f101 	lsl.w	r1, r2, r1
 80083ea:	7803      	ldrb	r3, [r0, #0]
 80083ec:	ea31 0403 	bics.w	r4, r1, r3
 80083f0:	d109      	bne.n	8008406 <DmxInput::Stop(unsigned int)+0x26>
 80083f2:	ea23 0301 	bic.w	r3, r3, r1
 80083f6:	7003      	strb	r3, [r0, #0]
 80083f8:	2300      	movs	r3, #0
 80083fa:	4805      	ldr	r0, [pc, #20]	; (8008410 <DmxInput::Stop(unsigned int)+0x30>)
 80083fc:	4619      	mov	r1, r3
 80083fe:	6800      	ldr	r0, [r0, #0]
 8008400:	bc10      	pop	{r4}
 8008402:	f004 bb91 	b.w	800cb28 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 8008406:	bc10      	pop	{r4}
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	200000f8 	strdcs	r0, [r0], -r8
 8008410:	20000c68 	andcs	r0, r0, r8, ror #24

08008414 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	4f0b      	ldr	r7, [pc, #44]	; (8008444 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x30>)
 8008418:	2100      	movs	r1, #0
 800841a:	6838      	ldr	r0, [r7, #0]
 800841c:	461e      	mov	r6, r3
 800841e:	4615      	mov	r5, r2
 8008420:	f004 fd0a 	bl	800ce38 <Dmx::GetDmxAvailable(unsigned int)>
 8008424:	2100      	movs	r1, #0
 8008426:	4604      	mov	r4, r0
 8008428:	6838      	ldr	r0, [r7, #0]
 800842a:	f004 fd19 	bl	800ce60 <Dmx::GetUpdatesPerSecond(unsigned int)>
 800842e:	6030      	str	r0, [r6, #0]
 8008430:	b12c      	cbz	r4, 800843e <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x2a>
 8008432:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8008436:	3401      	adds	r4, #1
 8008438:	4620      	mov	r0, r4
 800843a:	602b      	str	r3, [r5, #0]
 800843c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800843e:	4623      	mov	r3, r4
 8008440:	e7fa      	b.n	8008438 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x24>
 8008442:	bf00      	nop
 8008444:	20000c68 	andcs	r0, r0, r8, ror #24

08008448 <DmxInput::~DmxInput()>:
 8008448:	b510      	push	{r4, lr}
 800844a:	4604      	mov	r4, r0
 800844c:	f00a f98e 	bl	801276c <operator delete(void*)>
 8008450:	4620      	mov	r0, r4
 8008452:	bd10      	pop	{r4, pc}

08008454 <DmxInput::DmxInput()>:
 8008454:	b510      	push	{r4, lr}
 8008456:	4604      	mov	r4, r0
 8008458:	4b03      	ldr	r3, [pc, #12]	; (8008468 <DmxInput::DmxInput()+0x14>)
 800845a:	2100      	movs	r1, #0
 800845c:	6003      	str	r3, [r0, #0]
 800845e:	f7ff ffbf 	bl	80083e0 <DmxInput::Stop(unsigned int)>
 8008462:	4620      	mov	r0, r4
 8008464:	bd10      	pop	{r4, pc}
 8008466:	bf00      	nop
 8008468:	08015160 	stmdaeq	r1, {r5, r6, r8, ip, lr}

0800846c <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 800846c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800846e:	4616      	mov	r6, r2
 8008470:	1d07      	adds	r7, r0, #4
 8008472:	4604      	mov	r4, r0
 8008474:	4613      	mov	r3, r2
 8008476:	4638      	mov	r0, r7
 8008478:	f10d 0206 	add.w	r2, sp, #6
 800847c:	460d      	mov	r5, r1
 800847e:	f000 fc11 	bl	8008ca4 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8008482:	b1b6      	cbz	r6, 80084b2 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008484:	b1a8      	cbz	r0, 80084b2 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008486:	4629      	mov	r1, r5
 8008488:	4638      	mov	r0, r7
 800848a:	f000 fd85 	bl	8008f98 <ArtNetNode::GetPortProtocol(unsigned int) const>
 800848e:	2801      	cmp	r0, #1
 8008490:	d10f      	bne.n	80084b2 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008492:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 8008496:	b123      	cbz	r3, 80084a2 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x36>
 8008498:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800849c:	3301      	adds	r3, #1
 800849e:	f8ad 3006 	strh.w	r3, [sp, #6]
 80084a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80084a6:	b933      	cbnz	r3, 80084b6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4a>
 80084a8:	2202      	movs	r2, #2
 80084aa:	4629      	mov	r1, r5
 80084ac:	4638      	mov	r0, r7
 80084ae:	f000 fc3d 	bl	8008d2c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 80084b2:	b003      	add	sp, #12
 80084b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b6:	1e71      	subs	r1, r6, #1
 80084b8:	424a      	negs	r2, r1
 80084ba:	414a      	adcs	r2, r1
 80084bc:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80084c0:	4629      	mov	r1, r5
 80084c2:	f002 fbd9 	bl	800ac78 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 80084c6:	e7f4      	b.n	80084b2 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>

080084c8 <ArtNet4Node::~ArtNet4Node()>:
 80084c8:	b510      	push	{r4, lr}
 80084ca:	4604      	mov	r4, r0
 80084cc:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 80084ce:	6003      	str	r3, [r0, #0]
 80084d0:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 80084d4:	f002 fb08 	bl	800aae8 <E131Bridge::Stop()>
 80084d8:	1d20      	adds	r0, r4, #4
 80084da:	f000 f957 	bl	800878c <ArtNetNode::Stop()>
 80084de:	4620      	mov	r0, r4
 80084e0:	bd10      	pop	{r4, pc}
 80084e2:	bf00      	nop
 80084e4:	08015198 	stmdaeq	r1, {r3, r4, r7, r8, ip, lr}

080084e8 <ArtNet4Node::HandleAddress(unsigned char)>:
 80084e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084ea:	4605      	mov	r5, r0
 80084ec:	460c      	mov	r4, r1
 80084ee:	2600      	movs	r6, #0
 80084f0:	1d07      	adds	r7, r0, #4
 80084f2:	792b      	ldrb	r3, [r5, #4]
 80084f4:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 80084f8:	d30e      	bcc.n	8008518 <ArtNet4Node::HandleAddress(unsigned char)+0x30>
 80084fa:	2c13      	cmp	r4, #19
 80084fc:	f004 0603 	and.w	r6, r4, #3
 8008500:	d82f      	bhi.n	8008562 <ArtNet4Node::HandleAddress(unsigned char)+0x7a>
 8008502:	2c0f      	cmp	r4, #15
 8008504:	d83e      	bhi.n	8008584 <ArtNet4Node::HandleAddress(unsigned char)+0x9c>
 8008506:	2c02      	cmp	r4, #2
 8008508:	d03a      	beq.n	8008580 <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 800850a:	3c03      	subs	r4, #3
 800850c:	2c01      	cmp	r4, #1
 800850e:	d835      	bhi.n	800857c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008510:	2300      	movs	r3, #0
 8008512:	f885 37c0 	strb.w	r3, [r5, #1984]	; 0x7c0
 8008516:	e031      	b.n	800857c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008518:	2301      	movs	r3, #1
 800851a:	4631      	mov	r1, r6
 800851c:	4638      	mov	r0, r7
 800851e:	f10d 0206 	add.w	r2, sp, #6
 8008522:	f000 fbbf 	bl	8008ca4 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8008526:	b150      	cbz	r0, 800853e <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 8008528:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
 800852c:	b123      	cbz	r3, 8008538 <ArtNet4Node::HandleAddress(unsigned char)+0x50>
 800852e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008532:	3301      	adds	r3, #1
 8008534:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008538:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800853c:	b90b      	cbnz	r3, 8008542 <ArtNet4Node::HandleAddress(unsigned char)+0x5a>
 800853e:	3601      	adds	r6, #1
 8008540:	e7d7      	b.n	80084f2 <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 8008542:	4631      	mov	r1, r6
 8008544:	4638      	mov	r0, r7
 8008546:	f000 fd27 	bl	8008f98 <ArtNetNode::GetPortProtocol(unsigned int) const>
 800854a:	4602      	mov	r2, r0
 800854c:	2a01      	cmp	r2, #1
 800854e:	bf18      	it	ne
 8008550:	2202      	movne	r2, #2
 8008552:	4631      	mov	r1, r6
 8008554:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008558:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 800855c:	f002 fb8c 	bl	800ac78 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008560:	e7ed      	b.n	800853e <ArtNet4Node::HandleAddress(unsigned char)+0x56>
 8008562:	2c53      	cmp	r4, #83	; 0x53
 8008564:	d806      	bhi.n	8008574 <ArtNet4Node::HandleAddress(unsigned char)+0x8c>
 8008566:	2c4f      	cmp	r4, #79	; 0x4f
 8008568:	d908      	bls.n	800857c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800856a:	2344      	movs	r3, #68	; 0x44
 800856c:	fb03 5606 	mla	r6, r3, r6, r5
 8008570:	2300      	movs	r3, #0
 8008572:	e00b      	b.n	800858c <ArtNet4Node::HandleAddress(unsigned char)+0xa4>
 8008574:	3470      	adds	r4, #112	; 0x70
 8008576:	b2e4      	uxtb	r4, r4
 8008578:	2c03      	cmp	r4, #3
 800857a:	d90a      	bls.n	8008592 <ArtNet4Node::HandleAddress(unsigned char)+0xaa>
 800857c:	b003      	add	sp, #12
 800857e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008580:	2301      	movs	r3, #1
 8008582:	e7c6      	b.n	8008512 <ArtNet4Node::HandleAddress(unsigned char)+0x2a>
 8008584:	2344      	movs	r3, #68	; 0x44
 8008586:	fb03 5606 	mla	r6, r3, r6, r5
 800858a:	2301      	movs	r3, #1
 800858c:	f8c6 3d04 	str.w	r3, [r6, #3332]	; 0xd04
 8008590:	e7f4      	b.n	800857c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008592:	4631      	mov	r1, r6
 8008594:	1d28      	adds	r0, r5, #4
 8008596:	f000 fcff 	bl	8008f98 <ArtNetNode::GetPortProtocol(unsigned int) const>
 800859a:	2801      	cmp	r0, #1
 800859c:	d1ee      	bne.n	800857c <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800859e:	4631      	mov	r1, r6
 80085a0:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 80085a4:	b003      	add	sp, #12
 80085a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80085aa:	f002 be2d 	b.w	800b208 <E131Bridge::Clear(unsigned int)>

080085ae <ArtNet4Node::IsStatusChanged()>:
 80085ae:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 80085b2:	f002 be21 	b.w	800b1f8 <E131Bridge::IsStatusChanged()>

080085b6 <ArtNet4Node::~ArtNet4Node()>:
 80085b6:	b510      	push	{r4, lr}
 80085b8:	4604      	mov	r4, r0
 80085ba:	f7ff ff85 	bl	80084c8 <ArtNet4Node::~ArtNet4Node()>
 80085be:	4620      	mov	r0, r4
 80085c0:	f00a f8d4 	bl	801276c <operator delete(void*)>
 80085c4:	4620      	mov	r0, r4
 80085c6:	bd10      	pop	{r4, pc}

080085c8 <ArtNet4Node::GetStatus(unsigned int)>:
 80085c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ca:	2301      	movs	r3, #1
 80085cc:	4604      	mov	r4, r0
 80085ce:	f10d 0206 	add.w	r2, sp, #6
 80085d2:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 80085d6:	460d      	mov	r5, r1
 80085d8:	f002 fbb8 	bl	800ad4c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 80085dc:	b160      	cbz	r0, 80085f8 <ArtNet4Node::GetStatus(unsigned int)+0x30>
 80085de:	2344      	movs	r3, #68	; 0x44
 80085e0:	fb03 4405 	mla	r4, r3, r5, r4
 80085e4:	f894 0d0a 	ldrb.w	r0, [r4, #3338]	; 0xd0a
 80085e8:	f894 3d09 	ldrb.w	r3, [r4, #3337]	; 0xd09
 80085ec:	01c0      	lsls	r0, r0, #7
 80085ee:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80085f2:	f040 0001 	orr.w	r0, r0, #1
 80085f6:	b2c0      	uxtb	r0, r0
 80085f8:	b003      	add	sp, #12
 80085fa:	bd30      	pop	{r4, r5, pc}

080085fc <ArtNet4Node::ArtNet4Node(unsigned char)>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4604      	mov	r4, r0
 8008600:	1d05      	adds	r5, r0, #4
 8008602:	4628      	mov	r0, r5
 8008604:	f000 f960 	bl	80088c8 <ArtNetNode::ArtNetNode(unsigned char)>
 8008608:	4b05      	ldr	r3, [pc, #20]	; (8008620 <ArtNet4Node::ArtNet4Node(unsigned char)+0x24>)
 800860a:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	f002 faa6 	bl	800ab60 <E131Bridge::E131Bridge()>
 8008614:	4628      	mov	r0, r5
 8008616:	4621      	mov	r1, r4
 8008618:	f000 f866 	bl	80086e8 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>
 800861c:	4620      	mov	r0, r4
 800861e:	bd38      	pop	{r3, r4, r5, pc}
 8008620:	08015198 	stmdaeq	r1, {r3, r4, r7, r8, ip, lr}

08008624 <ArtNet4Node::Start()>:
 8008624:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008626:	4604      	mov	r4, r0
 8008628:	2500      	movs	r5, #0
 800862a:	1d06      	adds	r6, r0, #4
 800862c:	7923      	ldrb	r3, [r4, #4]
 800862e:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 8008632:	d319      	bcc.n	8008668 <ArtNet4Node::Start()+0x44>
 8008634:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 8008638:	4630      	mov	r0, r6
 800863a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800863e:	bf2c      	ite	cs
 8008640:	2300      	movcs	r3, #0
 8008642:	2301      	movcc	r3, #1
 8008644:	f884 3cb1 	strb.w	r3, [r4, #3249]	; 0xcb1
 8008648:	f894 36e0 	ldrb.w	r3, [r4, #1760]	; 0x6e0
 800864c:	f884 3cb2 	strb.w	r3, [r4, #3250]	; 0xcb2
 8008650:	68e3      	ldr	r3, [r4, #12]
 8008652:	f8c4 37bc 	str.w	r3, [r4, #1980]	; 0x7bc
 8008656:	f000 f859 	bl	800870c <ArtNetNode::Start()>
 800865a:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800865e:	b002      	add	sp, #8
 8008660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008664:	f002 ba0c 	b.w	800aa80 <E131Bridge::Start()>
 8008668:	2301      	movs	r3, #1
 800866a:	4629      	mov	r1, r5
 800866c:	4630      	mov	r0, r6
 800866e:	f10d 0206 	add.w	r2, sp, #6
 8008672:	f000 fb17 	bl	8008ca4 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8008676:	b170      	cbz	r0, 8008696 <ArtNet4Node::Start()+0x72>
 8008678:	4629      	mov	r1, r5
 800867a:	4630      	mov	r0, r6
 800867c:	f000 fc8c 	bl	8008f98 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8008680:	2801      	cmp	r0, #1
 8008682:	d108      	bne.n	8008696 <ArtNet4Node::Start()+0x72>
 8008684:	4629      	mov	r1, r5
 8008686:	4630      	mov	r0, r6
 8008688:	f000 fcb7 	bl	8008ffa <ArtNetNode::GetMergeMode(unsigned int) const>
 800868c:	2344      	movs	r3, #68	; 0x44
 800868e:	436b      	muls	r3, r5
 8008690:	f604 5204 	addw	r2, r4, #3332	; 0xd04
 8008694:	50d0      	str	r0, [r2, r3]
 8008696:	3501      	adds	r5, #1
 8008698:	e7c8      	b.n	800862c <ArtNet4Node::Start()+0x8>

0800869a <ArtNet4Node::Run()>:
 800869a:	b510      	push	{r4, lr}
 800869c:	4604      	mov	r4, r0
 800869e:	3004      	adds	r0, #4
 80086a0:	f000 fa24 	bl	8008aec <ArtNetNode::Run()>
 80086a4:	f894 3cc3 	ldrb.w	r3, [r4, #3267]	; 0xcc3
 80086a8:	b12b      	cbz	r3, 80086b6 <ArtNet4Node::Run()+0x1c>
 80086aa:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80086ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b2:	f002 be0f 	b.w	800b2d4 <E131Bridge::Run()>
 80086b6:	bd10      	pop	{r4, pc}

080086b8 <ArtNet4Node::Print()>:
 80086b8:	b510      	push	{r4, lr}
 80086ba:	4604      	mov	r4, r0
 80086bc:	3004      	adds	r0, #4
 80086be:	f001 fbf9 	bl	8009eb4 <ArtNetNode::Print()>
 80086c2:	f894 36e2 	ldrb.w	r3, [r4, #1762]	; 0x6e2
 80086c6:	b15b      	cbz	r3, 80086e0 <ArtNet4Node::Print()+0x28>
 80086c8:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 80086cc:	b113      	cbz	r3, 80086d4 <ArtNet4Node::Print()+0x1c>
 80086ce:	4805      	ldr	r0, [pc, #20]	; (80086e4 <ArtNet4Node::Print()+0x2c>)
 80086d0:	f00a fb40 	bl	8012d54 <printf>
 80086d4:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80086d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086dc:	f003 b828 	b.w	800b730 <E131Bridge::Print()>
 80086e0:	bd10      	pop	{r4, pc}
 80086e2:	bf00      	nop
 80086e4:	08015174 	stmdaeq	r1, {r2, r4, r5, r6, r8, ip, lr}

080086e8 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>:
 80086e8:	61c1      	str	r1, [r0, #28]
 80086ea:	4770      	bx	lr

080086ec <strncpy.isra.0>:
 80086ec:	3901      	subs	r1, #1
 80086ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80086f2:	b92b      	cbnz	r3, 8008700 <strncpy.isra.0+0x14>
 80086f4:	4402      	add	r2, r0
 80086f6:	4290      	cmp	r0, r2
 80086f8:	d006      	beq.n	8008708 <strncpy.isra.0+0x1c>
 80086fa:	f800 3b01 	strb.w	r3, [r0], #1
 80086fe:	e7fa      	b.n	80086f6 <strncpy.isra.0+0xa>
 8008700:	3a01      	subs	r2, #1
 8008702:	f800 3b01 	strb.w	r3, [r0], #1
 8008706:	d1f2      	bne.n	80086ee <strncpy.isra.0+0x2>
 8008708:	4770      	bx	lr
	...

0800870c <ArtNetNode::Start()>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	4d1d      	ldr	r5, [pc, #116]	; (8008784 <ArtNetNode::Start()+0x78>)
 8008710:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 8008714:	682a      	ldr	r2, [r5, #0]
 8008716:	f023 0302 	bic.w	r3, r3, #2
 800871a:	7851      	ldrb	r1, [r2, #1]
 800871c:	4604      	mov	r4, r0
 800871e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008722:	b25b      	sxtb	r3, r3
 8008724:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 8008728:	7812      	ldrb	r2, [r2, #0]
 800872a:	f023 0304 	bic.w	r3, r3, #4
 800872e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8008732:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 8008736:	f001 f8d5 	bl	80098e4 <ArtNetNode::FillPollReply()>
 800873a:	f641 1136 	movw	r1, #6454	; 0x1936
 800873e:	6828      	ldr	r0, [r5, #0]
 8008740:	f007 fc46 	bl	800ffd0 <Network::Begin(unsigned short)>
 8008744:	2302      	movs	r3, #2
 8008746:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 800874a:	6963      	ldr	r3, [r4, #20]
 800874c:	6060      	str	r0, [r4, #4]
 800874e:	b16b      	cbz	r3, 800876c <ArtNetNode::Start()+0x60>
 8008750:	2500      	movs	r5, #0
 8008752:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 8008756:	012b      	lsls	r3, r5, #4
 8008758:	5cf3      	ldrb	r3, [r6, r3]
 800875a:	b123      	cbz	r3, 8008766 <ArtNetNode::Start()+0x5a>
 800875c:	6960      	ldr	r0, [r4, #20]
 800875e:	4629      	mov	r1, r5
 8008760:	6803      	ldr	r3, [r0, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	4798      	blx	r3
 8008766:	3501      	adds	r5, #1
 8008768:	2d04      	cmp	r5, #4
 800876a:	d1f4      	bne.n	8008756 <ArtNetNode::Start()+0x4a>
 800876c:	4b06      	ldr	r3, [pc, #24]	; (8008788 <ArtNetNode::Start()+0x7c>)
 800876e:	2102      	movs	r1, #2
 8008770:	6818      	ldr	r0, [r3, #0]
 8008772:	f009 ff17 	bl	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 8008776:	4620      	mov	r0, r4
 8008778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800877c:	2100      	movs	r1, #0
 800877e:	f001 b923 	b.w	80099c8 <ArtNetNode::SendPollRelply(bool)>
 8008782:	bf00      	nop
 8008784:	200095c0 	andcs	r9, r0, r0, asr #11
 8008788:	20009ce4 	andcs	r9, r0, r4, ror #25

0800878c <ArtNetNode::Stop()>:
 800878c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008790:	2500      	movs	r5, #0
 8008792:	4604      	mov	r4, r0
 8008794:	4606      	mov	r6, r0
 8008796:	46a9      	mov	r9, r5
 8008798:	f04f 0a01 	mov.w	sl, #1
 800879c:	4f1f      	ldr	r7, [pc, #124]	; (800881c <ArtNetNode::Stop()+0x90>)
 800879e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008820 <ArtNetNode::Stop()+0x94>
 80087a2:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 80087a6:	b97b      	cbnz	r3, 80087c8 <ArtNetNode::Stop()+0x3c>
 80087a8:	68a0      	ldr	r0, [r4, #8]
 80087aa:	b118      	cbz	r0, 80087b4 <ArtNetNode::Stop()+0x28>
 80087ac:	6803      	ldr	r3, [r0, #0]
 80087ae:	4629      	mov	r1, r5
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	4798      	blx	r3
 80087b4:	f8d8 3000 	ldr.w	r3, [r8]
 80087b8:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 80087bc:	07db      	lsls	r3, r3, #31
 80087be:	bf58      	it	pl
 80087c0:	f8c8 a000 	strpl.w	sl, [r8]
 80087c4:	f886 9705 	strb.w	r9, [r6, #1797]	; 0x705
 80087c8:	3501      	adds	r5, #1
 80087ca:	2d04      	cmp	r5, #4
 80087cc:	f106 0624 	add.w	r6, r6, #36	; 0x24
 80087d0:	f207 6704 	addw	r7, r7, #1540	; 0x604
 80087d4:	d1e5      	bne.n	80087a2 <ArtNetNode::Stop()+0x16>
 80087d6:	6963      	ldr	r3, [r4, #20]
 80087d8:	b16b      	cbz	r3, 80087f6 <ArtNetNode::Stop()+0x6a>
 80087da:	2500      	movs	r5, #0
 80087dc:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 80087e0:	012b      	lsls	r3, r5, #4
 80087e2:	5cf3      	ldrb	r3, [r6, r3]
 80087e4:	b123      	cbz	r3, 80087f0 <ArtNetNode::Stop()+0x64>
 80087e6:	6960      	ldr	r0, [r4, #20]
 80087e8:	4629      	mov	r1, r5
 80087ea:	6803      	ldr	r3, [r0, #0]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	4798      	blx	r3
 80087f0:	3501      	adds	r5, #1
 80087f2:	2d04      	cmp	r5, #4
 80087f4:	d1f4      	bne.n	80087e0 <ArtNetNode::Stop()+0x54>
 80087f6:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <ArtNetNode::Stop()+0x98>)
 80087f8:	2100      	movs	r1, #0
 80087fa:	6818      	ldr	r0, [r3, #0]
 80087fc:	f009 fed2 	bl	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 8008800:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800880c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008810:	2300      	movs	r3, #0
 8008812:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 8008816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800881a:	bf00      	nop
 800881c:	20000100 	andcs	r0, r0, r0, lsl #2
 8008820:	200000fc 	strdcs	r0, [r0], -ip
 8008824:	20009ce4 	andcs	r9, r0, r4, ror #25

08008828 <ArtNetNode::SetShortName(char const*)>:
 8008828:	b570      	push	{r4, r5, r6, lr}
 800882a:	f100 0542 	add.w	r5, r0, #66	; 0x42
 800882e:	4604      	mov	r4, r0
 8008830:	2211      	movs	r2, #17
 8008832:	4628      	mov	r0, r5
 8008834:	f7ff ff5a 	bl	80086ec <strncpy.isra.0>
 8008838:	2300      	movs	r3, #0
 800883a:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 800883e:	462b      	mov	r3, r5
 8008840:	f104 0254 	add.w	r2, r4, #84	; 0x54
 8008844:	4293      	cmp	r3, r2
 8008846:	d111      	bne.n	800886c <ArtNetNode::SetShortName(char const*)+0x44>
 8008848:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800884c:	2b02      	cmp	r3, #2
 800884e:	d112      	bne.n	8008876 <ArtNetNode::SetShortName(char const*)+0x4e>
 8008850:	6a20      	ldr	r0, [r4, #32]
 8008852:	b118      	cbz	r0, 800885c <ArtNetNode::SetShortName(char const*)+0x34>
 8008854:	6803      	ldr	r3, [r0, #0]
 8008856:	4629      	mov	r1, r5
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	4798      	blx	r3
 800885c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800885e:	b150      	cbz	r0, 8008876 <ArtNetNode::SetShortName(char const*)+0x4e>
 8008860:	6803      	ldr	r3, [r0, #0]
 8008862:	4629      	mov	r1, r5
 8008864:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	4718      	bx	r3
 800886c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008870:	f883 154b 	strb.w	r1, [r3, #1355]	; 0x54b
 8008874:	e7e6      	b.n	8008844 <ArtNetNode::SetShortName(char const*)+0x1c>
 8008876:	bd70      	pop	{r4, r5, r6, pc}

08008878 <ArtNetNode::SetLongName(char const*)>:
 8008878:	b570      	push	{r4, r5, r6, lr}
 800887a:	f100 0554 	add.w	r5, r0, #84	; 0x54
 800887e:	4604      	mov	r4, r0
 8008880:	223f      	movs	r2, #63	; 0x3f
 8008882:	4628      	mov	r0, r5
 8008884:	f7ff ff32 	bl	80086ec <strncpy.isra.0>
 8008888:	2300      	movs	r3, #0
 800888a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 800888e:	462b      	mov	r3, r5
 8008890:	f104 0294 	add.w	r2, r4, #148	; 0x94
 8008894:	4293      	cmp	r3, r2
 8008896:	d111      	bne.n	80088bc <ArtNetNode::SetLongName(char const*)+0x44>
 8008898:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800889c:	2b02      	cmp	r3, #2
 800889e:	d112      	bne.n	80088c6 <ArtNetNode::SetLongName(char const*)+0x4e>
 80088a0:	6a20      	ldr	r0, [r4, #32]
 80088a2:	b118      	cbz	r0, 80088ac <ArtNetNode::SetLongName(char const*)+0x34>
 80088a4:	6803      	ldr	r3, [r0, #0]
 80088a6:	4629      	mov	r1, r5
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	4798      	blx	r3
 80088ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80088ae:	b150      	cbz	r0, 80088c6 <ArtNetNode::SetLongName(char const*)+0x4e>
 80088b0:	6803      	ldr	r3, [r0, #0]
 80088b2:	4629      	mov	r1, r5
 80088b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	4718      	bx	r3
 80088bc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80088c0:	f883 154b 	strb.w	r1, [r3, #1355]	; 0x54b
 80088c4:	e7e6      	b.n	8008894 <ArtNetNode::SetLongName(char const*)+0x1c>
 80088c6:	bd70      	pop	{r4, r5, r6, pc}

080088c8 <ArtNetNode::ArtNetNode(unsigned char)>:
 80088c8:	2300      	movs	r3, #0
 80088ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088ce:	2901      	cmp	r1, #1
 80088d0:	bf28      	it	cs
 80088d2:	2101      	movcs	r1, #1
 80088d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088d6:	4604      	mov	r4, r0
 80088d8:	e9c0 2301 	strd	r2, r3, [r0, #4]
 80088dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088e0:	4a41      	ldr	r2, [pc, #260]	; (80089e8 <ArtNetNode::ArtNetNode(unsigned char)+0x120>)
 80088e2:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80088e6:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80088ea:	7001      	strb	r1, [r0, #0]
 80088ec:	6010      	str	r0, [r2, #0]
 80088ee:	b085      	sub	sp, #20
 80088f0:	6243      	str	r3, [r0, #36]	; 0x24
 80088f2:	f8c0 3664 	str.w	r3, [r0, #1636]	; 0x664
 80088f6:	f8c0 3668 	str.w	r3, [r0, #1640]	; 0x668
 80088fa:	f880 366e 	strb.w	r3, [r0, #1646]	; 0x66e
 80088fe:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8008902:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8008906:	428a      	cmp	r2, r1
 8008908:	d15f      	bne.n	80089ca <ArtNetNode::ArtNetNode(unsigned char)+0x102>
 800890a:	4b38      	ldr	r3, [pc, #224]	; (80089ec <ArtNetNode::ArtNetNode(unsigned char)+0x124>)
 800890c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	6903      	ldr	r3, [r0, #16]
 8008914:	62a3      	str	r3, [r4, #40]	; 0x28
 8008916:	6982      	ldr	r2, [r0, #24]
 8008918:	ea63 0302 	orn	r3, r3, r2
 800891c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800891e:	6363      	str	r3, [r4, #52]	; 0x34
 8008920:	f007 fb5c 	bl	800ffdc <Network::MacAddressCopyTo(unsigned char*)>
 8008924:	23d0      	movs	r3, #208	; 0xd0
 8008926:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800892a:	f244 0318 	movw	r3, #16408	; 0x4018
 800892e:	2100      	movs	r1, #0
 8008930:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8008934:	f204 62e4 	addw	r2, r4, #1764	; 0x6e4
 8008938:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 800893c:	4293      	cmp	r3, r2
 800893e:	d147      	bne.n	80089d0 <ArtNetNode::ArtNetNode(unsigned char)+0x108>
 8008940:	f240 1201 	movw	r2, #257	; 0x101
 8008944:	f8a4 26d4 	strh.w	r2, [r4, #1748]	; 0x6d4
 8008948:	f242 7210 	movw	r2, #10000	; 0x2710
 800894c:	2500      	movs	r5, #0
 800894e:	2708      	movs	r7, #8
 8008950:	f8c4 26cc 	str.w	r2, [r4, #1740]	; 0x6cc
 8008954:	f204 7174 	addw	r1, r4, #1908	; 0x774
 8008958:	f204 76b4 	addw	r6, r4, #1972	; 0x7b4
 800895c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008960:	4283      	cmp	r3, r0
 8008962:	d13b      	bne.n	80089dc <ArtNetNode::ArtNetNode(unsigned char)+0x114>
 8008964:	460a      	mov	r2, r1
 8008966:	f101 0310 	add.w	r3, r1, #16
 800896a:	429a      	cmp	r2, r3
 800896c:	d139      	bne.n	80089e2 <ArtNetNode::ArtNetNode(unsigned char)+0x11a>
 800896e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008970:	4296      	cmp	r6, r2
 8008972:	608b      	str	r3, [r1, #8]
 8008974:	70cf      	strb	r7, [r1, #3]
 8008976:	d12e      	bne.n	80089d6 <ArtNetNode::ArtNetNode(unsigned char)+0x10e>
 8008978:	4620      	mov	r0, r4
 800897a:	491d      	ldr	r1, [pc, #116]	; (80089f0 <ArtNetNode::ArtNetNode(unsigned char)+0x128>)
 800897c:	f7ff ff54 	bl	8008828 <ArtNetNode::SetShortName(char const*)>
 8008980:	4b1c      	ldr	r3, [pc, #112]	; (80089f4 <ArtNetNode::ArtNetNode(unsigned char)+0x12c>)
 8008982:	f204 657f 	addw	r5, r4, #1663	; 0x67f
 8008986:	9302      	str	r3, [sp, #8]
 8008988:	2304      	movs	r3, #4
 800898a:	9301      	str	r3, [sp, #4]
 800898c:	4b1a      	ldr	r3, [pc, #104]	; (80089f8 <ArtNetNode::ArtNetNode(unsigned char)+0x130>)
 800898e:	4a1b      	ldr	r2, [pc, #108]	; (80089fc <ArtNetNode::ArtNetNode(unsigned char)+0x134>)
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	2140      	movs	r1, #64	; 0x40
 8008994:	4b1a      	ldr	r3, [pc, #104]	; (8008a00 <ArtNetNode::ArtNetNode(unsigned char)+0x138>)
 8008996:	4628      	mov	r0, r5
 8008998:	f00a fa04 	bl	8012da4 <snprintf>
 800899c:	4629      	mov	r1, r5
 800899e:	4620      	mov	r0, r4
 80089a0:	f7ff ff6a 	bl	8008878 <ArtNetNode::SetLongName(char const*)>
 80089a4:	4b17      	ldr	r3, [pc, #92]	; (8008a04 <ArtNetNode::ArtNetNode(unsigned char)+0x13c>)
 80089a6:	f204 606f 	addw	r0, r4, #1647	; 0x66f
 80089aa:	781a      	ldrb	r2, [r3, #0]
 80089ac:	4916      	ldr	r1, [pc, #88]	; (8008a08 <ArtNetNode::ArtNetNode(unsigned char)+0x140>)
 80089ae:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 80089b2:	785b      	ldrb	r3, [r3, #1]
 80089b4:	220f      	movs	r2, #15
 80089b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80089ba:	f7ff fe97 	bl	80086ec <strncpy.isra.0>
 80089be:	2300      	movs	r3, #0
 80089c0:	4620      	mov	r0, r4
 80089c2:	f884 367e 	strb.w	r3, [r4, #1662]	; 0x67e
 80089c6:	b005      	add	sp, #20
 80089c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ca:	f802 3b01 	strb.w	r3, [r2], #1
 80089ce:	e79a      	b.n	8008906 <ArtNetNode::ArtNetNode(unsigned char)+0x3e>
 80089d0:	f803 1b01 	strb.w	r1, [r3], #1
 80089d4:	e7b2      	b.n	800893c <ArtNetNode::ArtNetNode(unsigned char)+0x74>
 80089d6:	4603      	mov	r3, r0
 80089d8:	4611      	mov	r1, r2
 80089da:	e7bf      	b.n	800895c <ArtNetNode::ArtNetNode(unsigned char)+0x94>
 80089dc:	f803 5b01 	strb.w	r5, [r3], #1
 80089e0:	e7be      	b.n	8008960 <ArtNetNode::ArtNetNode(unsigned char)+0x98>
 80089e2:	f802 5b01 	strb.w	r5, [r2], #1
 80089e6:	e7c0      	b.n	800896a <ArtNetNode::ArtNetNode(unsigned char)+0xa2>
 80089e8:	20000704 	andcs	r0, r0, r4, lsl #14
 80089ec:	200095c0 	andcs	r9, r0, r0, asr #11
 80089f0:	08015236 	stmdaeq	r1, {r1, r2, r4, r5, r9, ip, lr}
 80089f4:	08015211 	stmdaeq	r1, {r0, r4, r9, ip, lr}
 80089f8:	0801522e 	stmdaeq	r1, {r1, r2, r3, r5, r9, ip, lr}
 80089fc:	08015205 	stmdaeq	r1, {r0, r2, r9, ip, lr}
 8008a00:	080151fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, ip, lr}
 8008a04:	080154ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, sl, ip, lr}
 8008a08:	08015225 	stmdaeq	r1, {r0, r2, r5, r9, ip, lr}

08008a0c <ArtNetNode::SetOemValue(unsigned char const*)>:
 8008a0c:	780b      	ldrb	r3, [r1, #0]
 8008a0e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008a12:	784b      	ldrb	r3, [r1, #1]
 8008a14:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008a18:	4770      	bx	lr
	...

08008a1c <ArtNetNode::SetNetworkDataLossCondition()>:
 8008a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a20:	2400      	movs	r4, #0
 8008a22:	4606      	mov	r6, r0
 8008a24:	4605      	mov	r5, r0
 8008a26:	46a0      	mov	r8, r4
 8008a28:	46a2      	mov	sl, r4
 8008a2a:	4f1a      	ldr	r7, [pc, #104]	; (8008a94 <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 8008a2c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8008a98 <ArtNetNode::SetNetworkDataLossCondition()+0x7c>
 8008a30:	f880 46da 	strb.w	r4, [r0, #1754]	; 0x6da
 8008a34:	f880 46d9 	strb.w	r4, [r0, #1753]	; 0x6d9
 8008a38:	7833      	ldrb	r3, [r6, #0]
 8008a3a:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8008a3e:	d301      	bcc.n	8008a44 <ArtNetNode::SetNetworkDataLossCondition()+0x28>
 8008a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a44:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8008a48:	b953      	cbnz	r3, 8008a60 <ArtNetNode::SetNetworkDataLossCondition()+0x44>
 8008a4a:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8008a4e:	b13b      	cbz	r3, 8008a60 <ArtNetNode::SetNetworkDataLossCondition()+0x44>
 8008a50:	68b0      	ldr	r0, [r6, #8]
 8008a52:	b118      	cbz	r0, 8008a5c <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8008a54:	6803      	ldr	r3, [r0, #0]
 8008a56:	4621      	mov	r1, r4
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	4798      	blx	r3
 8008a5c:	f885 8705 	strb.w	r8, [r5, #1797]	; 0x705
 8008a60:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 8008a64:	f8c5 86f0 	str.w	r8, [r5, #1776]	; 0x6f0
 8008a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a6c:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 8008a70:	f8c5 86f8 	str.w	r8, [r5, #1784]	; 0x6f8
 8008a74:	f8d9 3000 	ldr.w	r3, [r9]
 8008a78:	f8c7 a600 	str.w	sl, [r7, #1536]	; 0x600
 8008a7c:	07db      	lsls	r3, r3, #31
 8008a7e:	bf58      	it	pl
 8008a80:	2301      	movpl	r3, #1
 8008a82:	f104 0401 	add.w	r4, r4, #1
 8008a86:	bf58      	it	pl
 8008a88:	f8c9 3000 	strpl.w	r3, [r9]
 8008a8c:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8008a90:	3524      	adds	r5, #36	; 0x24
 8008a92:	e7d1      	b.n	8008a38 <ArtNetNode::SetNetworkDataLossCondition()+0x1c>
 8008a94:	20000100 	andcs	r0, r0, r0, lsl #2
 8008a98:	200000fc 	strdcs	r0, [r0], -ip

08008a9c <ArtNetNode::GetType()>:
 8008a9c:	f8b0 3570 	ldrh.w	r3, [r0, #1392]	; 0x570
 8008aa0:	b530      	push	{r4, r5, lr}
 8008aa2:	2b0b      	cmp	r3, #11
 8008aa4:	d91d      	bls.n	8008ae2 <ArtNetNode::GetType()+0x46>
 8008aa6:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8008aaa:	b9d3      	cbnz	r3, 8008ae2 <ArtNetNode::GetType()+0x46>
 8008aac:	f890 20ab 	ldrb.w	r2, [r0, #171]	; 0xab
 8008ab0:	2a0e      	cmp	r2, #14
 8008ab2:	d10d      	bne.n	8008ad0 <ArtNetNode::GetType()+0x34>
 8008ab4:	4a0c      	ldr	r2, [pc, #48]	; (8008ae8 <ArtNetNode::GetType()+0x4c>)
 8008ab6:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8008aba:	f100 01a8 	add.w	r1, r0, #168	; 0xa8
 8008abe:	428b      	cmp	r3, r1
 8008ac0:	d109      	bne.n	8008ad6 <ArtNetNode::GetType()+0x3a>
 8008ac2:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
 8008ac6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 8008aca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	f8a0 3572 	strh.w	r3, [r0, #1394]	; 0x572
 8008ad4:	bd30      	pop	{r4, r5, pc}
 8008ad6:	f813 5b01 	ldrb.w	r5, [r3], #1
 8008ada:	f812 4b01 	ldrb.w	r4, [r2], #1
 8008ade:	42a5      	cmp	r5, r4
 8008ae0:	d0ed      	beq.n	8008abe <ArtNetNode::GetType()+0x22>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e7f4      	b.n	8008ad0 <ArtNetNode::GetType()+0x34>
 8008ae6:	bf00      	nop
 8008ae8:	0801501c 	stmdaeq	r1, {r2, r3, r4, ip, lr}

08008aec <ArtNetNode::Run()>:
 8008aec:	b530      	push	{r4, r5, lr}
 8008aee:	b085      	sub	sp, #20
 8008af0:	f10d 030e 	add.w	r3, sp, #14
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	4604      	mov	r4, r0
 8008af8:	f200 536c 	addw	r3, r0, #1388	; 0x56c
 8008afc:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8008b00:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8008b04:	7900      	ldrb	r0, [r0, #4]
 8008b06:	f006 fd41 	bl	800f58c <udp_recv>
 8008b0a:	4b64      	ldr	r3, [pc, #400]	; (8008c9c <ArtNetNode::Run()+0x1b0>)
 8008b0c:	681d      	ldr	r5, [r3, #0]
 8008b0e:	f8c4 5664 	str.w	r5, [r4, #1636]	; 0x664
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d143      	bne.n	8008b9e <ArtNetNode::Run()+0xb2>
 8008b16:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 8008b1a:	b13b      	cbz	r3, 8008b2c <ArtNetNode::Run()+0x40>
 8008b1c:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
 8008b20:	1aad      	subs	r5, r5, r2
 8008b22:	42ab      	cmp	r3, r5
 8008b24:	d802      	bhi.n	8008b2c <ArtNetNode::Run()+0x40>
 8008b26:	4620      	mov	r0, r4
 8008b28:	f7ff ff78 	bl	8008a1c <ArtNetNode::SetNetworkDataLossCondition()>
 8008b2c:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 8008b30:	b16b      	cbz	r3, 8008b4e <ArtNetNode::Run()+0x62>
 8008b32:	69e0      	ldr	r0, [r4, #28]
 8008b34:	f894 56db 	ldrb.w	r5, [r4, #1755]	; 0x6db
 8008b38:	b120      	cbz	r0, 8008b44 <ArtNetNode::Run()+0x58>
 8008b3a:	6803      	ldr	r3, [r0, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	4798      	blx	r3
 8008b40:	4305      	orrs	r5, r0
 8008b42:	b2ed      	uxtb	r5, r5
 8008b44:	b11d      	cbz	r5, 8008b4e <ArtNetNode::Run()+0x62>
 8008b46:	2100      	movs	r1, #0
 8008b48:	4620      	mov	r0, r4
 8008b4a:	f000 ff3d 	bl	80099c8 <ArtNetNode::SendPollRelply(bool)>
 8008b4e:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8008b52:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
 8008b56:	1a9b      	subs	r3, r3, r2
 8008b58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b5c:	d305      	bcc.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008b5e:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8008b62:	f023 0302 	bic.w	r3, r3, #2
 8008b66:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 8008b6a:	6963      	ldr	r3, [r4, #20]
 8008b6c:	b113      	cbz	r3, 8008b74 <ArtNetNode::Run()+0x88>
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f000 fd48 	bl	8009604 <ArtNetNode::HandleDmxIn()>
 8008b74:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008b78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b7c:	2bc0      	cmp	r3, #192	; 0xc0
 8008b7e:	d10c      	bne.n	8008b9a <ArtNetNode::Run()+0xae>
 8008b80:	4b47      	ldr	r3, [pc, #284]	; (8008ca0 <ArtNetNode::Run()+0x1b4>)
 8008b82:	6818      	ldr	r0, [r3, #0]
 8008b84:	6843      	ldr	r3, [r0, #4]
 8008b86:	2b04      	cmp	r3, #4
 8008b88:	d007      	beq.n	8008b9a <ArtNetNode::Run()+0xae>
 8008b8a:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 8082 	beq.w	8008c98 <ArtNetNode::Run()+0x1ac>
 8008b94:	2103      	movs	r1, #3
 8008b96:	f009 fd05 	bl	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 8008b9a:	b005      	add	sp, #20
 8008b9c:	bd30      	pop	{r4, r5, pc}
 8008b9e:	f8a4 0570 	strh.w	r0, [r4, #1392]	; 0x570
 8008ba2:	f8c4 5668 	str.w	r5, [r4, #1640]	; 0x668
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f7ff ff78 	bl	8008a9c <ArtNetNode::GetType()>
 8008bac:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 8008bb0:	b143      	cbz	r3, 8008bc4 <ArtNetNode::Run()+0xd8>
 8008bb2:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 8008bb6:	1aed      	subs	r5, r5, r3
 8008bb8:	f5b5 6f7a 	cmp.w	r5, #4000	; 0xfa0
 8008bbc:	bf24      	itt	cs
 8008bbe:	2300      	movcs	r3, #0
 8008bc0:	f884 36d9 	strbcs.w	r3, [r4, #1753]	; 0x6d9
 8008bc4:	f8b4 3572 	ldrh.w	r3, [r4, #1394]	; 0x572
 8008bc8:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8008bcc:	d04c      	beq.n	8008c68 <ArtNetNode::Run()+0x17c>
 8008bce:	d81d      	bhi.n	8008c0c <ArtNetNode::Run()+0x120>
 8008bd0:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 8008bd4:	d039      	beq.n	8008c4a <ArtNetNode::Run()+0x15e>
 8008bd6:	d80c      	bhi.n	8008bf2 <ArtNetNode::Run()+0x106>
 8008bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bdc:	d031      	beq.n	8008c42 <ArtNetNode::Run()+0x156>
 8008bde:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008be2:	d1c2      	bne.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008be4:	68a3      	ldr	r3, [r4, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0bf      	beq.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008bea:	4620      	mov	r0, r4
 8008bec:	f000 fc20 	bl	8009430 <ArtNetNode::HandleDmx()>
 8008bf0:	e7bb      	b.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008bf2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008bf6:	d02f      	beq.n	8008c58 <ArtNetNode::Run()+0x16c>
 8008bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bfc:	d1b5      	bne.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008bfe:	6923      	ldr	r3, [r4, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0b2      	beq.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c04:	4620      	mov	r0, r4
 8008c06:	f001 f84a 	bl	8009c9e <ArtNetNode::HandleTodRequest()>
 8008c0a:	e7ae      	b.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c0c:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 8008c10:	d026      	beq.n	8008c60 <ArtNetNode::Run()+0x174>
 8008c12:	d80c      	bhi.n	8008c2e <ArtNetNode::Run()+0x142>
 8008c14:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8008c18:	d02e      	beq.n	8008c78 <ArtNetNode::Run()+0x18c>
 8008c1a:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 8008c1e:	d1a4      	bne.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c20:	68e3      	ldr	r3, [r4, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0a1      	beq.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c26:	4620      	mov	r0, r4
 8008c28:	f001 f91c 	bl	8009e64 <ArtNetNode::HandleTimeCode()>
 8008c2c:	e79d      	b.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c2e:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 8008c32:	d029      	beq.n	8008c88 <ArtNetNode::Run()+0x19c>
 8008c34:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8008c38:	d197      	bne.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fd8c 	bl	8009758 <ArtNetNode::HandleIpProg()>
 8008c40:	e793      	b.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 ff5e 	bl	8009b04 <ArtNetNode::HandlePoll()>
 8008c48:	e78f      	b.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d08c      	beq.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c50:	4620      	mov	r0, r4
 8008c52:	f001 f8bb 	bl	8009dcc <ArtNetNode::HandleSync()>
 8008c56:	e788      	b.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f000 f9d5 	bl	8009008 <ArtNetNode::HandleAddress()>
 8008c5e:	e784      	b.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c60:	4620      	mov	r0, r4
 8008c62:	f001 f905 	bl	8009e70 <ArtNetNode::HandleTimeSync()>
 8008c66:	e780      	b.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c68:	6923      	ldr	r3, [r4, #16]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f43f af7d 	beq.w	8008b6a <ArtNetNode::Run()+0x7e>
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 ffda 	bl	8009c2a <ArtNetNode::HandleTodControl()>
 8008c76:	e778      	b.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f43f af75 	beq.w	8008b6a <ArtNetNode::Run()+0x7e>
 8008c80:	4620      	mov	r0, r4
 8008c82:	f001 f833 	bl	8009cec <ArtNetNode::HandleRdm()>
 8008c86:	e770      	b.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c88:	69a3      	ldr	r3, [r4, #24]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f43f af6d 	beq.w	8008b6a <ArtNetNode::Run()+0x7e>
 8008c90:	4620      	mov	r0, r4
 8008c92:	f001 feb7 	bl	800aa04 <ArtNetNode::HandleTrigger()>
 8008c96:	e768      	b.n	8008b6a <ArtNetNode::Run()+0x7e>
 8008c98:	2102      	movs	r1, #2
 8008c9a:	e77c      	b.n	8008b96 <ArtNetNode::Run()+0xaa>
 8008c9c:	20009d04 	andcs	r9, r0, r4, lsl #26
 8008ca0:	20009ce4 	andcs	r9, r0, r4, ror #25

08008ca4 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 8008ca4:	b93b      	cbnz	r3, 8008cb6 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 8008ca6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8008caa:	f8b0 3774 	ldrh.w	r3, [r0, #1908]	; 0x774
 8008cae:	8013      	strh	r3, [r2, #0]
 8008cb0:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8008cb4:	4770      	bx	lr
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	bf01      	itttt	eq
 8008cba:	2324      	moveq	r3, #36	; 0x24
 8008cbc:	fb03 0001 	mlaeq	r0, r3, r1, r0
 8008cc0:	f8b0 36e4 	ldrheq.w	r3, [r0, #1764]	; 0x6e4
 8008cc4:	f890 06e8 	ldrbeq.w	r0, [r0, #1768]	; 0x6e8
 8008cc8:	bf0c      	ite	eq
 8008cca:	8013      	strheq	r3, [r2, #0]
 8008ccc:	2000      	movne	r0, #0
 8008cce:	4770      	bx	lr

08008cd0 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 8008cd0:	b94b      	cbnz	r3, 8008ce6 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 8008cd2:	2903      	cmp	r1, #3
 8008cd4:	d810      	bhi.n	8008cf8 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x28>
 8008cd6:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8008cda:	f890 3776 	ldrb.w	r3, [r0, #1910]	; 0x776
 8008cde:	7013      	strb	r3, [r2, #0]
 8008ce0:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8008ce4:	4770      	bx	lr
 8008ce6:	2324      	movs	r3, #36	; 0x24
 8008ce8:	fb03 0001 	mla	r0, r3, r1, r0
 8008cec:	f890 36e6 	ldrb.w	r3, [r0, #1766]	; 0x6e6
 8008cf0:	7013      	strb	r3, [r2, #0]
 8008cf2:	f890 06e8 	ldrb.w	r0, [r0, #1768]	; 0x6e8
 8008cf6:	4770      	bx	lr
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	4770      	bx	lr

08008cfc <ArtNetNode::GetSubnetSwitch(unsigned int) const>:
 8008cfc:	4408      	add	r0, r1
 8008cfe:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8008d02:	4770      	bx	lr

08008d04 <ArtNetNode::GetNetSwitch(unsigned int) const>:
 8008d04:	4408      	add	r0, r1
 8008d06:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8008d0a:	4770      	bx	lr

08008d0c <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 8008d0c:	4402      	add	r2, r0
 8008d0e:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8008d12:	f892 203f 	ldrb.w	r2, [r2, #63]	; 0x3f
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	0112      	lsls	r2, r2, #4
 8008d1a:	b2d2      	uxtb	r2, r2
 8008d1c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8008d20:	4313      	orrs	r3, r2
 8008d22:	f001 010f 	and.w	r1, r1, #15
 8008d26:	ea43 0001 	orr.w	r0, r3, r1
 8008d2a:	4770      	bx	lr

08008d2c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 8008d2c:	2903      	cmp	r1, #3
 8008d2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d32:	4604      	mov	r4, r0
 8008d34:	460d      	mov	r5, r1
 8008d36:	4617      	mov	r7, r2
 8008d38:	461e      	mov	r6, r3
 8008d3a:	f200 80a3 	bhi.w	8008e84 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x158>
 8008d3e:	2a02      	cmp	r2, #2
 8008d40:	d121      	bne.n	8008d86 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 8008d42:	2324      	movs	r3, #36	; 0x24
 8008d44:	fb03 0301 	mla	r3, r3, r1, r0
 8008d48:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 8008d4c:	b13a      	cbz	r2, 8008d5e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 8008d54:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 8008d5e:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8008d62:	f895 3778 	ldrb.w	r3, [r5, #1912]	; 0x778
 8008d66:	b90b      	cbnz	r3, 8008d6c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 8008d68:	2000      	movs	r0, #0
 8008d6a:	e00a      	b.n	8008d82 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 8008d6c:	2308      	movs	r3, #8
 8008d6e:	2000      	movs	r0, #0
 8008d70:	f885 3777 	strb.w	r3, [r5, #1911]	; 0x777
 8008d74:	f885 0778 	strb.w	r0, [r5, #1912]	; 0x778
 8008d78:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 8008d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d86:	2a00      	cmp	r2, #0
 8008d88:	d13b      	bne.n	8008e02 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd6>
 8008d8a:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 8008d8e:	f898 3778 	ldrb.w	r3, [r8, #1912]	; 0x778
 8008d92:	b923      	cbnz	r3, 8008d9e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x72>
 8008d94:	f890 36df 	ldrb.w	r3, [r0, #1759]	; 0x6df
 8008d98:	3301      	adds	r3, #1
 8008d9a:	f880 36df 	strb.w	r3, [r0, #1759]	; 0x6df
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f04f 0900 	mov.w	r9, #0
 8008da4:	f888 3778 	strb.w	r3, [r8, #1912]	; 0x778
 8008da8:	f006 030f 	and.w	r3, r6, #15
 8008dac:	464a      	mov	r2, r9
 8008dae:	f888 3776 	strb.w	r3, [r8, #1910]	; 0x776
 8008db2:	4631      	mov	r1, r6
 8008db4:	4620      	mov	r0, r4
 8008db6:	f888 9777 	strb.w	r9, [r8, #1911]	; 0x777
 8008dba:	f7ff ffa7 	bl	8008d0c <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8008dbe:	2324      	movs	r3, #36	; 0x24
 8008dc0:	fb03 4305 	mla	r3, r3, r5, r4
 8008dc4:	f8a8 0774 	strh.w	r0, [r8, #1908]	; 0x774
 8008dc8:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 8008dcc:	b132      	cbz	r2, 8008ddc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8008dce:	f883 96e8 	strb.w	r9, [r3, #1768]	; 0x6e8
 8008dd2:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	f884 36de 	strb.w	r3, [r4, #1758]	; 0x6de
 8008ddc:	69e0      	ldr	r0, [r4, #28]
 8008dde:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d042      	beq.n	8008e6c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x140>
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d13b      	bne.n	8008e62 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 8008dea:	6a20      	ldr	r0, [r4, #32]
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d143      	bne.n	8008e78 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14c>
 8008df0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d0b8      	beq.n	8008d68 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8008df6:	6803      	ldr	r3, [r0, #0]
 8008df8:	4632      	mov	r2, r6
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	4798      	blx	r3
 8008e00:	e7b2      	b.n	8008d68 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8008e02:	2a01      	cmp	r2, #1
 8008e04:	d1ea      	bne.n	8008ddc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8008e06:	f04f 0824 	mov.w	r8, #36	; 0x24
 8008e0a:	fb08 0301 	mla	r3, r8, r1, r0
 8008e0e:	f893 36e8 	ldrb.w	r3, [r3, #1768]	; 0x6e8
 8008e12:	b923      	cbnz	r3, 8008e1e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf2>
 8008e14:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 8008e18:	3301      	adds	r3, #1
 8008e1a:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 8008e1e:	2301      	movs	r3, #1
 8008e20:	fb08 4805 	mla	r8, r8, r5, r4
 8008e24:	f888 36e8 	strb.w	r3, [r8, #1768]	; 0x6e8
 8008e28:	f006 030f 	and.w	r3, r6, #15
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f888 36e6 	strb.w	r3, [r8, #1766]	; 0x6e6
 8008e32:	4631      	mov	r1, r6
 8008e34:	4620      	mov	r0, r4
 8008e36:	f7ff ff69 	bl	8008d0c <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8008e3a:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8008e3e:	f8a8 06e4 	strh.w	r0, [r8, #1764]	; 0x6e4
 8008e42:	f893 2778 	ldrb.w	r2, [r3, #1912]	; 0x778
 8008e46:	2a00      	cmp	r2, #0
 8008e48:	d0c8      	beq.n	8008ddc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 8008e50:	2208      	movs	r2, #8
 8008e52:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 8008e56:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 8008e60:	e7bc      	b.n	8008ddc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8008e62:	6803      	ldr	r3, [r0, #0]
 8008e64:	463a      	mov	r2, r7
 8008e66:	4629      	mov	r1, r5
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	4798      	blx	r3
 8008e6c:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	f47f af79 	bne.w	8008d68 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8008e76:	e7b8      	b.n	8008dea <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 8008e78:	6803      	ldr	r3, [r0, #0]
 8008e7a:	4632      	mov	r2, r6
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	4798      	blx	r3
 8008e82:	e7b5      	b.n	8008df0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 8008e84:	f06f 0004 	mvn.w	r0, #4
 8008e88:	e77b      	b.n	8008d82 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

08008e8a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 8008e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e8e:	2524      	movs	r5, #36	; 0x24
 8008e90:	4604      	mov	r4, r0
 8008e92:	460f      	mov	r7, r1
 8008e94:	4616      	mov	r6, r2
 8008e96:	1883      	adds	r3, r0, r2
 8008e98:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 8008e9c:	0093      	lsls	r3, r2, #2
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	fb05 0503 	mla	r5, r5, r3, r0
 8008ea4:	f103 0905 	add.w	r9, r3, #5
 8008ea8:	f103 0801 	add.w	r8, r3, #1
 8008eac:	45c8      	cmp	r8, r9
 8008eae:	f105 0524 	add.w	r5, r5, #36	; 0x24
 8008eb2:	d10c      	bne.n	8008ece <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x44>
 8008eb4:	6a20      	ldr	r0, [r4, #32]
 8008eb6:	b1a0      	cbz	r0, 8008ee2 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 8008eb8:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d110      	bne.n	8008ee2 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 8008ec0:	b97e      	cbnz	r6, 8008ee2 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 8008ec2:	6803      	ldr	r3, [r0, #0]
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	4718      	bx	r3
 8008ece:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 8008ed2:	089a      	lsrs	r2, r3, #2
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f7ff ff19 	bl	8008d0c <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8008eda:	4643      	mov	r3, r8
 8008edc:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 8008ee0:	e7e2      	b.n	8008ea8 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x1e>
 8008ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008ee6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 8008ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eea:	2524      	movs	r5, #36	; 0x24
 8008eec:	4604      	mov	r4, r0
 8008eee:	460f      	mov	r7, r1
 8008ef0:	4616      	mov	r6, r2
 8008ef2:	1883      	adds	r3, r0, r2
 8008ef4:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
 8008ef8:	0093      	lsls	r3, r2, #2
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	fb05 0503 	mla	r5, r5, r3, r0
 8008f00:	f103 0905 	add.w	r9, r3, #5
 8008f04:	f103 0801 	add.w	r8, r3, #1
 8008f08:	45c8      	cmp	r8, r9
 8008f0a:	f105 0524 	add.w	r5, r5, #36	; 0x24
 8008f0e:	d10c      	bne.n	8008f2a <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x44>
 8008f10:	6a20      	ldr	r0, [r4, #32]
 8008f12:	b1a0      	cbz	r0, 8008f3e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 8008f14:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d110      	bne.n	8008f3e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 8008f1c:	b97e      	cbnz	r6, 8008f3e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 8008f1e:	6803      	ldr	r3, [r0, #0]
 8008f20:	4639      	mov	r1, r7
 8008f22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	4718      	bx	r3
 8008f2a:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 8008f2e:	089a      	lsrs	r2, r3, #2
 8008f30:	4620      	mov	r0, r4
 8008f32:	f7ff feeb 	bl	8008d0c <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8008f36:	4643      	mov	r3, r8
 8008f38:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 8008f3c:	e7e2      	b.n	8008f04 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x1e>
 8008f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008f42 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 8008f42:	b570      	push	{r4, r5, r6, lr}
 8008f44:	4616      	mov	r6, r2
 8008f46:	2224      	movs	r2, #36	; 0x24
 8008f48:	fb02 0301 	mla	r3, r2, r1, r0
 8008f4c:	fb02 0201 	mla	r2, r2, r1, r0
 8008f50:	f8c3 6700 	str.w	r6, [r3, #1792]	; 0x700
 8008f54:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 8008f58:	2e01      	cmp	r6, #1
 8008f5a:	bf0c      	ite	eq
 8008f5c:	f043 0301 	orreq.w	r3, r3, #1
 8008f60:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 8008f64:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 8008f68:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	460c      	mov	r4, r1
 8008f72:	d110      	bne.n	8008f96 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 8008f74:	2903      	cmp	r1, #3
 8008f76:	d80e      	bhi.n	8008f96 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 8008f78:	6a00      	ldr	r0, [r0, #32]
 8008f7a:	b118      	cbz	r0, 8008f84 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 8008f7c:	6803      	ldr	r3, [r0, #0]
 8008f7e:	4632      	mov	r2, r6
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	4798      	blx	r3
 8008f84:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008f86:	b130      	cbz	r0, 8008f96 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 8008f88:	6803      	ldr	r3, [r0, #0]
 8008f8a:	4632      	mov	r2, r6
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	4718      	bx	r3
 8008f96:	bd70      	pop	{r4, r5, r6, pc}

08008f98 <ArtNetNode::GetPortProtocol(unsigned int) const>:
 8008f98:	2324      	movs	r3, #36	; 0x24
 8008f9a:	fb03 0001 	mla	r0, r3, r1, r0
 8008f9e:	f8d0 0700 	ldr.w	r0, [r0, #1792]	; 0x700
 8008fa2:	4770      	bx	lr

08008fa4 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	4616      	mov	r6, r2
 8008fa8:	2224      	movs	r2, #36	; 0x24
 8008faa:	fb02 0301 	mla	r3, r2, r1, r0
 8008fae:	fb02 0201 	mla	r2, r2, r1, r0
 8008fb2:	f8c3 66fc 	str.w	r6, [r3, #1788]	; 0x6fc
 8008fb6:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 8008fba:	2e01      	cmp	r6, #1
 8008fbc:	bf0c      	ite	eq
 8008fbe:	f043 0302 	orreq.w	r3, r3, #2
 8008fc2:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 8008fc6:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 8008fca:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 8008fce:	4605      	mov	r5, r0
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	d110      	bne.n	8008ff8 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 8008fd6:	2903      	cmp	r1, #3
 8008fd8:	d80e      	bhi.n	8008ff8 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 8008fda:	6a00      	ldr	r0, [r0, #32]
 8008fdc:	b118      	cbz	r0, 8008fe6 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 8008fde:	6803      	ldr	r3, [r0, #0]
 8008fe0:	4632      	mov	r2, r6
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	4798      	blx	r3
 8008fe6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008fe8:	b130      	cbz	r0, 8008ff8 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 8008fea:	6803      	ldr	r3, [r0, #0]
 8008fec:	4632      	mov	r2, r6
 8008fee:	4621      	mov	r1, r4
 8008ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	4718      	bx	r3
 8008ff8:	bd70      	pop	{r4, r5, r6, pc}

08008ffa <ArtNetNode::GetMergeMode(unsigned int) const>:
 8008ffa:	2324      	movs	r3, #36	; 0x24
 8008ffc:	fb03 0001 	mla	r0, r3, r1, r0
 8009000:	f8d0 06fc 	ldr.w	r0, [r0, #1788]	; 0x6fc
 8009004:	4770      	bx	lr
	...

08009008 <ArtNetNode::HandleAddress()>:
 8009008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800900c:	2301      	movs	r3, #1
 800900e:	f880 36d4 	strb.w	r3, [r0, #1748]	; 0x6d4
 8009012:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 8009016:	4604      	mov	r4, r0
 8009018:	b133      	cbz	r3, 8009028 <ArtNetNode::HandleAddress()+0x20>
 800901a:	f100 01ae 	add.w	r1, r0, #174	; 0xae
 800901e:	f7ff fc03 	bl	8008828 <ArtNetNode::SetShortName(char const*)>
 8009022:	2306      	movs	r3, #6
 8009024:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 8009028:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 800902c:	b13b      	cbz	r3, 800903e <ArtNetNode::HandleAddress()+0x36>
 800902e:	4620      	mov	r0, r4
 8009030:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 8009034:	f7ff fc20 	bl	8008878 <ArtNetNode::SetLongName(char const*)>
 8009038:	2307      	movs	r3, #7
 800903a:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 800903e:	f894 50ad 	ldrb.w	r5, [r4, #173]	; 0xad
 8009042:	b105      	cbz	r5, 8009046 <ArtNetNode::HandleAddress()+0x3e>
 8009044:	3d01      	subs	r5, #1
 8009046:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 800904a:	2900      	cmp	r1, #0
 800904c:	d13d      	bne.n	80090ca <ArtNetNode::HandleAddress()+0xc2>
 800904e:	462a      	mov	r2, r5
 8009050:	4620      	mov	r0, r4
 8009052:	f7ff ff1a 	bl	8008e8a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 8009056:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 800905a:	2900      	cmp	r1, #0
 800905c:	d13b      	bne.n	80090d6 <ArtNetNode::HandleAddress()+0xce>
 800905e:	462a      	mov	r2, r5
 8009060:	4620      	mov	r0, r4
 8009062:	f7ff ff40 	bl	8008ee6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 8009066:	00ad      	lsls	r5, r5, #2
 8009068:	b2ed      	uxtb	r5, r5
 800906a:	4627      	mov	r7, r4
 800906c:	462e      	mov	r6, r5
 800906e:	f504 7882 	add.w	r8, r4, #260	; 0x104
 8009072:	f504 7984 	add.w	r9, r4, #264	; 0x108
 8009076:	f818 3b01 	ldrb.w	r3, [r8], #1
 800907a:	2b7f      	cmp	r3, #127	; 0x7f
 800907c:	d006      	beq.n	800908c <ArtNetNode::HandleAddress()+0x84>
 800907e:	bb83      	cbnz	r3, 80090e2 <ArtNetNode::HandleAddress()+0xda>
 8009080:	2301      	movs	r3, #1
 8009082:	2201      	movs	r2, #1
 8009084:	4631      	mov	r1, r6
 8009086:	4620      	mov	r0, r4
 8009088:	f7ff fe50 	bl	8008d2c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800908c:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 8009090:	2a7f      	cmp	r2, #127	; 0x7f
 8009092:	d005      	beq.n	80090a0 <ArtNetNode::HandleAddress()+0x98>
 8009094:	bb52      	cbnz	r2, 80090ec <ArtNetNode::HandleAddress()+0xe4>
 8009096:	2301      	movs	r3, #1
 8009098:	4631      	mov	r1, r6
 800909a:	4620      	mov	r0, r4
 800909c:	f7ff fe46 	bl	8008d2c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 80090a0:	3601      	adds	r6, #1
 80090a2:	45c1      	cmp	r9, r8
 80090a4:	b2f6      	uxtb	r6, r6
 80090a6:	d1e6      	bne.n	8009076 <ArtNetNode::HandleAddress()+0x6e>
 80090a8:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 80090ac:	2913      	cmp	r1, #19
 80090ae:	d823      	bhi.n	80090f8 <ArtNetNode::HandleAddress()+0xf0>
 80090b0:	290f      	cmp	r1, #15
 80090b2:	f200 80b9 	bhi.w	8009228 <ArtNetNode::HandleAddress()+0x220>
 80090b6:	1e4b      	subs	r3, r1, #1
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d82d      	bhi.n	8009118 <ArtNetNode::HandleAddress()+0x110>
 80090bc:	3902      	subs	r1, #2
 80090be:	2902      	cmp	r1, #2
 80090c0:	d87c      	bhi.n	80091bc <ArtNetNode::HandleAddress()+0x1b4>
 80090c2:	e8df f001 	tbb	[pc, r1]
 80090c6:	00a5998d 	adceq	r9, r5, sp, lsl #19
 80090ca:	060f      	lsls	r7, r1, #24
 80090cc:	d5c3      	bpl.n	8009056 <ArtNetNode::HandleAddress()+0x4e>
 80090ce:	462a      	mov	r2, r5
 80090d0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80090d4:	e7bc      	b.n	8009050 <ArtNetNode::HandleAddress()+0x48>
 80090d6:	060e      	lsls	r6, r1, #24
 80090d8:	d5c5      	bpl.n	8009066 <ArtNetNode::HandleAddress()+0x5e>
 80090da:	462a      	mov	r2, r5
 80090dc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80090e0:	e7be      	b.n	8009060 <ArtNetNode::HandleAddress()+0x58>
 80090e2:	0618      	lsls	r0, r3, #24
 80090e4:	d5d2      	bpl.n	800908c <ArtNetNode::HandleAddress()+0x84>
 80090e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ea:	e7ca      	b.n	8009082 <ArtNetNode::HandleAddress()+0x7a>
 80090ec:	0611      	lsls	r1, r2, #24
 80090ee:	d5d7      	bpl.n	80090a0 <ArtNetNode::HandleAddress()+0x98>
 80090f0:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 80090f4:	2200      	movs	r2, #0
 80090f6:	e7cf      	b.n	8009098 <ArtNetNode::HandleAddress()+0x90>
 80090f8:	2973      	cmp	r1, #115	; 0x73
 80090fa:	d81a      	bhi.n	8009132 <ArtNetNode::HandleAddress()+0x12a>
 80090fc:	296f      	cmp	r1, #111	; 0x6f
 80090fe:	f200 80a1 	bhi.w	8009244 <ArtNetNode::HandleAddress()+0x23c>
 8009102:	2953      	cmp	r1, #83	; 0x53
 8009104:	d803      	bhi.n	800910e <ArtNetNode::HandleAddress()+0x106>
 8009106:	294f      	cmp	r1, #79	; 0x4f
 8009108:	d906      	bls.n	8009118 <ArtNetNode::HandleAddress()+0x110>
 800910a:	2200      	movs	r2, #0
 800910c:	e08d      	b.n	800922a <ArtNetNode::HandleAddress()+0x222>
 800910e:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
 8009112:	2b03      	cmp	r3, #3
 8009114:	f240 808f 	bls.w	8009236 <ArtNetNode::HandleAddress()+0x22e>
 8009118:	69e0      	ldr	r0, [r4, #28]
 800911a:	b120      	cbz	r0, 8009126 <ArtNetNode::HandleAddress()+0x11e>
 800911c:	6803      	ldr	r3, [r0, #0]
 800911e:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	4798      	blx	r3
 8009126:	4620      	mov	r0, r4
 8009128:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800912c:	2101      	movs	r1, #1
 800912e:	f000 bc4b 	b.w	80099c8 <ArtNetNode::SendPollRelply(bool)>
 8009132:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b03      	cmp	r3, #3
 800913a:	d8ed      	bhi.n	8009118 <ArtNetNode::HandleAddress()+0x110>
 800913c:	4b44      	ldr	r3, [pc, #272]	; (8009250 <ArtNetNode::HandleAddress()+0x248>)
 800913e:	f001 0103 	and.w	r1, r1, #3
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	440d      	add	r5, r1
 8009146:	07d2      	lsls	r2, r2, #31
 8009148:	bf5c      	itt	pl
 800914a:	2201      	movpl	r2, #1
 800914c:	601a      	strpl	r2, [r3, #0]
 800914e:	f240 6204 	movw	r2, #1540	; 0x604
 8009152:	b2ed      	uxtb	r5, r5
 8009154:	436a      	muls	r2, r5
 8009156:	4b3f      	ldr	r3, [pc, #252]	; (8009254 <ArtNetNode::HandleAddress()+0x24c>)
 8009158:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800915c:	441a      	add	r2, r3
 800915e:	4611      	mov	r1, r2
 8009160:	2700      	movs	r7, #0
 8009162:	68a0      	ldr	r0, [r4, #8]
 8009164:	f502 7600 	add.w	r6, r2, #512	; 0x200
 8009168:	42b1      	cmp	r1, r6
 800916a:	d16d      	bne.n	8009248 <ArtNetNode::HandleAddress()+0x240>
 800916c:	f240 6104 	movw	r1, #1540	; 0x604
 8009170:	fb01 3105 	mla	r1, r1, r5, r3
 8009174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009178:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800917c:	6801      	ldr	r1, [r0, #0]
 800917e:	690e      	ldr	r6, [r1, #16]
 8009180:	4629      	mov	r1, r5
 8009182:	47b0      	blx	r6
 8009184:	2d03      	cmp	r5, #3
 8009186:	d8c7      	bhi.n	8009118 <ArtNetNode::HandleAddress()+0x110>
 8009188:	2624      	movs	r6, #36	; 0x24
 800918a:	fb06 4605 	mla	r6, r6, r5, r4
 800918e:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1c0      	bne.n	8009118 <ArtNetNode::HandleAddress()+0x110>
 8009196:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1bc      	bne.n	8009118 <ArtNetNode::HandleAddress()+0x110>
 800919e:	68a0      	ldr	r0, [r4, #8]
 80091a0:	4629      	mov	r1, r5
 80091a2:	6803      	ldr	r3, [r0, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	4798      	blx	r3
 80091a8:	2301      	movs	r3, #1
 80091aa:	f886 3705 	strb.w	r3, [r6, #1797]	; 0x705
 80091ae:	f896 36e7 	ldrb.w	r3, [r6, #1767]	; 0x6e7
 80091b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091b6:	f886 36e7 	strb.w	r3, [r6, #1767]	; 0x6e7
 80091ba:	e7ad      	b.n	8009118 <ArtNetNode::HandleAddress()+0x110>
 80091bc:	2300      	movs	r3, #0
 80091be:	2224      	movs	r2, #36	; 0x24
 80091c0:	f884 36da 	strb.w	r3, [r4, #1754]	; 0x6da
 80091c4:	7823      	ldrb	r3, [r4, #0]
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	fb02 4303 	mla	r3, r2, r3, r4
 80091cc:	429f      	cmp	r7, r3
 80091ce:	d0a3      	beq.n	8009118 <ArtNetNode::HandleAddress()+0x110>
 80091d0:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 80091d4:	3724      	adds	r7, #36	; 0x24
 80091d6:	f022 0208 	bic.w	r2, r2, #8
 80091da:	f887 26c3 	strb.w	r2, [r7, #1731]	; 0x6c3
 80091de:	e7f5      	b.n	80091cc <ArtNetNode::HandleAddress()+0x1c4>
 80091e0:	4b1d      	ldr	r3, [pc, #116]	; (8009258 <ArtNetNode::HandleAddress()+0x250>)
 80091e2:	2102      	movs	r1, #2
 80091e4:	6818      	ldr	r0, [r3, #0]
 80091e6:	f009 f9dd 	bl	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 80091ea:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80091ee:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80091f2:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80091f6:	e78f      	b.n	8009118 <ArtNetNode::HandleAddress()+0x110>
 80091f8:	4b17      	ldr	r3, [pc, #92]	; (8009258 <ArtNetNode::HandleAddress()+0x250>)
 80091fa:	2100      	movs	r1, #0
 80091fc:	6818      	ldr	r0, [r3, #0]
 80091fe:	f009 f9d1 	bl	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 8009202:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009206:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800920a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800920e:	e7f0      	b.n	80091f2 <ArtNetNode::HandleAddress()+0x1ea>
 8009210:	4b11      	ldr	r3, [pc, #68]	; (8009258 <ArtNetNode::HandleAddress()+0x250>)
 8009212:	2104      	movs	r1, #4
 8009214:	6818      	ldr	r0, [r3, #0]
 8009216:	f009 f9c5 	bl	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 800921a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800921e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009226:	e7e4      	b.n	80091f2 <ArtNetNode::HandleAddress()+0x1ea>
 8009228:	2201      	movs	r2, #1
 800922a:	4620      	mov	r0, r4
 800922c:	f001 0103 	and.w	r1, r1, #3
 8009230:	f7ff feb8 	bl	8008fa4 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 8009234:	e770      	b.n	8009118 <ArtNetNode::HandleAddress()+0x110>
 8009236:	2200      	movs	r2, #0
 8009238:	4620      	mov	r0, r4
 800923a:	f001 0103 	and.w	r1, r1, #3
 800923e:	f7ff fe80 	bl	8008f42 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 8009242:	e769      	b.n	8009118 <ArtNetNode::HandleAddress()+0x110>
 8009244:	2201      	movs	r2, #1
 8009246:	e7f7      	b.n	8009238 <ArtNetNode::HandleAddress()+0x230>
 8009248:	f801 7b01 	strb.w	r7, [r1], #1
 800924c:	e78c      	b.n	8009168 <ArtNetNode::HandleAddress()+0x160>
 800924e:	bf00      	nop
 8009250:	200000fc 	strdcs	r0, [r0], -ip
 8009254:	20000100 	andcs	r0, r0, r0, lsl #2
 8009258:	20009ce4 	andcs	r9, r0, r4, ror #25

0800925c <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800925c:	f240 6304 	movw	r3, #1540	; 0x604
 8009260:	fb03 0001 	mla	r0, r3, r1, r0
 8009264:	2300      	movs	r3, #0
 8009266:	b510      	push	{r4, lr}
 8009268:	4293      	cmp	r3, r2
 800926a:	d100      	bne.n	800926e <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800926c:	bd10      	pop	{r4, pc}
 800926e:	f810 4b01 	ldrb.w	r4, [r0], #1
 8009272:	3301      	adds	r3, #1
 8009274:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 8009278:	42a1      	cmp	r1, r4
 800927a:	bf38      	it	cc
 800927c:	4621      	movcc	r1, r4
 800927e:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 8009282:	e7f1      	b.n	8009268 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

08009284 <memcpy.isra.0>:
 8009284:	3801      	subs	r0, #1
 8009286:	440a      	add	r2, r1
 8009288:	4291      	cmp	r1, r2
 800928a:	d100      	bne.n	800928e <memcpy.isra.0+0xa>
 800928c:	4770      	bx	lr
 800928e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009292:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009296:	e7f7      	b.n	8009288 <memcpy.isra.0+0x4>

08009298 <lightset::Data::Get()>:
 8009298:	4b03      	ldr	r3, [pc, #12]	; (80092a8 <lightset::Data::Get()+0x10>)
 800929a:	4804      	ldr	r0, [pc, #16]	; (80092ac <lightset::Data::Get()+0x14>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	07d2      	lsls	r2, r2, #31
 80092a0:	bf5c      	itt	pl
 80092a2:	2201      	movpl	r2, #1
 80092a4:	601a      	strpl	r2, [r3, #0]
 80092a6:	4770      	bx	lr
 80092a8:	200000fc 	strdcs	r0, [r0], -ip
 80092ac:	20000100 	andcs	r0, r0, r0, lsl #2

080092b0 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 80092b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b4:	4615      	mov	r5, r2
 80092b6:	460f      	mov	r7, r1
 80092b8:	4604      	mov	r4, r0
 80092ba:	f7ff ffed 	bl	8009298 <lightset::Data::Get()>
 80092be:	f240 6304 	movw	r3, #1540	; 0x604
 80092c2:	4606      	mov	r6, r0
 80092c4:	435c      	muls	r4, r3
 80092c6:	eb00 0804 	add.w	r8, r0, r4
 80092ca:	462a      	mov	r2, r5
 80092cc:	4639      	mov	r1, r7
 80092ce:	4640      	mov	r0, r8
 80092d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80092d4:	f7ff ffd6 	bl	8009284 <memcpy.isra.0>
 80092d8:	462a      	mov	r2, r5
 80092da:	4639      	mov	r1, r7
 80092dc:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 80092e0:	1930      	adds	r0, r6, r4
 80092e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092e6:	f7ff bfcd 	b.w	8009284 <memcpy.isra.0>

080092ea <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 80092ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ee:	4680      	mov	r8, r0
 80092f0:	f240 6404 	movw	r4, #1540	; 0x604
 80092f4:	4615      	mov	r5, r2
 80092f6:	460f      	mov	r7, r1
 80092f8:	4699      	mov	r9, r3
 80092fa:	f7ff ffcd 	bl	8009298 <lightset::Data::Get()>
 80092fe:	fb04 f408 	mul.w	r4, r4, r8
 8009302:	eb00 0a04 	add.w	sl, r0, r4
 8009306:	4606      	mov	r6, r0
 8009308:	462a      	mov	r2, r5
 800930a:	4639      	mov	r1, r7
 800930c:	4650      	mov	r0, sl
 800930e:	f7ff ffb9 	bl	8009284 <memcpy.isra.0>
 8009312:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 8009316:	f1b9 0f00 	cmp.w	r9, #0
 800931a:	d106      	bne.n	800932a <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 800931c:	462a      	mov	r2, r5
 800931e:	4641      	mov	r1, r8
 8009320:	4630      	mov	r0, r6
 8009322:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009326:	f7ff bf99 	b.w	800925c <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800932a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800932e:	462a      	mov	r2, r5
 8009330:	4639      	mov	r1, r7
 8009332:	1930      	adds	r0, r6, r4
 8009334:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	f7ff bfa4 	b.w	8009284 <memcpy.isra.0>

0800933c <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800933c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009340:	4616      	mov	r6, r2
 8009342:	4699      	mov	r9, r3
 8009344:	4680      	mov	r8, r0
 8009346:	460f      	mov	r7, r1
 8009348:	f7ff ffa6 	bl	8009298 <lightset::Data::Get()>
 800934c:	f240 6404 	movw	r4, #1540	; 0x604
 8009350:	4605      	mov	r5, r0
 8009352:	fb04 f408 	mul.w	r4, r4, r8
 8009356:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800935a:	4632      	mov	r2, r6
 800935c:	4639      	mov	r1, r7
 800935e:	4428      	add	r0, r5
 8009360:	f7ff ff90 	bl	8009284 <memcpy.isra.0>
 8009364:	192b      	adds	r3, r5, r4
 8009366:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 800936a:	f1b9 0f00 	cmp.w	r9, #0
 800936e:	d106      	bne.n	800937e <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 8009370:	4632      	mov	r2, r6
 8009372:	4641      	mov	r1, r8
 8009374:	4628      	mov	r0, r5
 8009376:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800937a:	f7ff bf6f 	b.w	800925c <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800937e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009382:	4632      	mov	r2, r6
 8009384:	4639      	mov	r1, r7
 8009386:	1928      	adds	r0, r5, r4
 8009388:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800938c:	f7ff bf7a 	b.w	8009284 <memcpy.isra.0>

08009390 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 8009390:	f890 36da 	ldrb.w	r3, [r0, #1754]	; 0x6da
 8009394:	b91b      	cbnz	r3, 800939e <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 8009396:	f240 1301 	movw	r3, #257	; 0x101
 800939a:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 800939e:	2324      	movs	r3, #36	; 0x24
 80093a0:	fb03 0001 	mla	r0, r3, r1, r0
 80093a4:	f890 36e7 	ldrb.w	r3, [r0, #1767]	; 0x6e7
 80093a8:	f043 0308 	orr.w	r3, r3, #8
 80093ac:	f880 36e7 	strb.w	r3, [r0, #1767]	; 0x6e7
 80093b0:	4770      	bx	lr

080093b2 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 80093b2:	2324      	movs	r3, #36	; 0x24
 80093b4:	b530      	push	{r4, r5, lr}
 80093b6:	f242 7510 	movw	r5, #10000	; 0x2710
 80093ba:	fb03 0301 	mla	r3, r3, r1, r0
 80093be:	f8d0 2664 	ldr.w	r2, [r0, #1636]	; 0x664
 80093c2:	f8d3 46ec 	ldr.w	r4, [r3, #1772]	; 0x6ec
 80093c6:	1b14      	subs	r4, r2, r4
 80093c8:	42ac      	cmp	r4, r5
 80093ca:	d908      	bls.n	80093de <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 80093cc:	2400      	movs	r4, #0
 80093ce:	f8c3 46f0 	str.w	r4, [r3, #1776]	; 0x6f0
 80093d2:	f893 46e7 	ldrb.w	r4, [r3, #1767]	; 0x6e7
 80093d6:	f024 0408 	bic.w	r4, r4, #8
 80093da:	f883 46e7 	strb.w	r4, [r3, #1767]	; 0x6e7
 80093de:	2324      	movs	r3, #36	; 0x24
 80093e0:	fb03 0101 	mla	r1, r3, r1, r0
 80093e4:	f8d1 36f4 	ldr.w	r3, [r1, #1780]	; 0x6f4
 80093e8:	1ad2      	subs	r2, r2, r3
 80093ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d908      	bls.n	8009404 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 80093f2:	2300      	movs	r3, #0
 80093f4:	f8c1 36f8 	str.w	r3, [r1, #1784]	; 0x6f8
 80093f8:	f891 36e7 	ldrb.w	r3, [r1, #1767]	; 0x6e7
 80093fc:	f023 0308 	bic.w	r3, r3, #8
 8009400:	f881 36e7 	strb.w	r3, [r1, #1767]	; 0x6e7
 8009404:	2124      	movs	r1, #36	; 0x24
 8009406:	7803      	ldrb	r3, [r0, #0]
 8009408:	4602      	mov	r2, r0
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	fb01 0303 	mla	r3, r1, r3, r0
 8009410:	2100      	movs	r1, #0
 8009412:	429a      	cmp	r2, r3
 8009414:	d105      	bne.n	8009422 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x70>
 8009416:	b919      	cbnz	r1, 8009420 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x6e>
 8009418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800941c:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 8009420:	bd30      	pop	{r4, r5, pc}
 8009422:	f892 46e7 	ldrb.w	r4, [r2, #1767]	; 0x6e7
 8009426:	3224      	adds	r2, #36	; 0x24
 8009428:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800942c:	4321      	orrs	r1, r4
 800942e:	e7f0      	b.n	8009412 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x60>

08009430 <ArtNetNode::HandleDmx()>:
 8009430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	f8b0 70b0 	ldrh.w	r7, [r0, #176]	; 0xb0
 8009438:	4604      	mov	r4, r0
 800943a:	ba7f      	rev16	r7, r7
 800943c:	b2bf      	uxth	r7, r7
 800943e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8009442:	bf28      	it	cs
 8009444:	f44f 7700 	movcs.w	r7, #512	; 0x200
 8009448:	4605      	mov	r5, r0
 800944a:	2600      	movs	r6, #0
 800944c:	f04f 0901 	mov.w	r9, #1
 8009450:	f100 08b2 	add.w	r8, r0, #178	; 0xb2
 8009454:	7823      	ldrb	r3, [r4, #0]
 8009456:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 800945a:	f080 809f 	bcs.w	800959c <ArtNetNode::HandleDmx()+0x16c>
 800945e:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009462:	2b00      	cmp	r3, #0
 8009464:	d056      	beq.n	8009514 <ArtNetNode::HandleDmx()+0xe4>
 8009466:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 800946a:	2b00      	cmp	r3, #0
 800946c:	d152      	bne.n	8009514 <ArtNetNode::HandleDmx()+0xe4>
 800946e:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
 8009472:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 8009476:	429a      	cmp	r2, r3
 8009478:	d14c      	bne.n	8009514 <ArtNetNode::HandleDmx()+0xe4>
 800947a:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 800947e:	f8d5 b6f0 	ldr.w	fp, [r5, #1776]	; 0x6f0
 8009482:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009486:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 800948a:	f894 36da 	ldrb.w	r3, [r4, #1754]	; 0x6da
 800948e:	f8d5 a6f8 	ldr.w	sl, [r5, #1784]	; 0x6f8
 8009492:	b133      	cbz	r3, 80094a2 <ArtNetNode::HandleDmx()+0x72>
 8009494:	f894 36dc 	ldrb.w	r3, [r4, #1756]	; 0x6dc
 8009498:	b91b      	cbnz	r3, 80094a2 <ArtNetNode::HandleDmx()+0x72>
 800949a:	4631      	mov	r1, r6
 800949c:	4620      	mov	r0, r4
 800949e:	f7ff ff88 	bl	80093b2 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 80094a2:	ea5b 020a 	orrs.w	r2, fp, sl
 80094a6:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 80094aa:	d136      	bne.n	800951a <ArtNetNode::HandleDmx()+0xea>
 80094ac:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 80094b0:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 80094b4:	463a      	mov	r2, r7
 80094b6:	4641      	mov	r1, r8
 80094b8:	4630      	mov	r0, r6
 80094ba:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 80094be:	f7ff fef7 	bl	80092b0 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 80094c2:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 80094c6:	b9fb      	cbnz	r3, 8009508 <ArtNetNode::HandleDmx()+0xd8>
 80094c8:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80094cc:	f7ff fee4 	bl	8009298 <lightset::Data::Get()>
 80094d0:	f240 6304 	movw	r3, #1540	; 0x604
 80094d4:	4373      	muls	r3, r6
 80094d6:	18c2      	adds	r2, r0, r3
 80094d8:	f503 6180 	add.w	r1, r3, #1024	; 0x400
 80094dc:	f8da 3000 	ldr.w	r3, [sl]
 80094e0:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80094e4:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 80094e8:	1842      	adds	r2, r0, r1
 80094ea:	4631      	mov	r1, r6
 80094ec:	4650      	mov	r0, sl
 80094ee:	47d8      	blx	fp
 80094f0:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 80094f4:	b943      	cbnz	r3, 8009508 <ArtNetNode::HandleDmx()+0xd8>
 80094f6:	68a0      	ldr	r0, [r4, #8]
 80094f8:	4631      	mov	r1, r6
 80094fa:	6803      	ldr	r3, [r0, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	4798      	blx	r3
 8009500:	f884 96db 	strb.w	r9, [r4, #1755]	; 0x6db
 8009504:	f885 9705 	strb.w	r9, [r5, #1797]	; 0x705
 8009508:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 800950c:	f043 0302 	orr.w	r3, r3, #2
 8009510:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 8009514:	3601      	adds	r6, #1
 8009516:	3524      	adds	r5, #36	; 0x24
 8009518:	e79c      	b.n	8009454 <ArtNetNode::HandleDmx()+0x24>
 800951a:	459b      	cmp	fp, r3
 800951c:	d104      	bne.n	8009528 <ArtNetNode::HandleDmx()+0xf8>
 800951e:	f1ba 0f00 	cmp.w	sl, #0
 8009522:	d0c5      	beq.n	80094b0 <ArtNetNode::HandleDmx()+0x80>
 8009524:	b11b      	cbz	r3, 800952e <ArtNetNode::HandleDmx()+0xfe>
 8009526:	e037      	b.n	8009598 <ArtNetNode::HandleDmx()+0x168>
 8009528:	f1bb 0f00 	cmp.w	fp, #0
 800952c:	d132      	bne.n	8009594 <ArtNetNode::HandleDmx()+0x164>
 800952e:	459a      	cmp	sl, r3
 8009530:	d11d      	bne.n	800956e <ArtNetNode::HandleDmx()+0x13e>
 8009532:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009536:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 800953a:	f7ff fead 	bl	8009298 <lightset::Data::Get()>
 800953e:	f240 6304 	movw	r3, #1540	; 0x604
 8009542:	4683      	mov	fp, r0
 8009544:	fb03 fa06 	mul.w	sl, r3, r6
 8009548:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 800954c:	463a      	mov	r2, r7
 800954e:	4641      	mov	r1, r8
 8009550:	4458      	add	r0, fp
 8009552:	f7ff fe97 	bl	8009284 <memcpy.isra.0>
 8009556:	eb0b 030a 	add.w	r3, fp, sl
 800955a:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 800955e:	463a      	mov	r2, r7
 8009560:	4641      	mov	r1, r8
 8009562:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 8009566:	4458      	add	r0, fp
 8009568:	f7ff fe8c 	bl	8009284 <memcpy.isra.0>
 800956c:	e7a9      	b.n	80094c2 <ArtNetNode::HandleDmx()+0x92>
 800956e:	b9bb      	cbnz	r3, 80095a0 <ArtNetNode::HandleDmx()+0x170>
 8009570:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 8009574:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009578:	4631      	mov	r1, r6
 800957a:	4620      	mov	r0, r4
 800957c:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 8009580:	f7ff ff06 	bl	8009390 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 8009584:	463a      	mov	r2, r7
 8009586:	4641      	mov	r1, r8
 8009588:	4630      	mov	r0, r6
 800958a:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 800958e:	f7ff feac 	bl	80092ea <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 8009592:	e796      	b.n	80094c2 <ArtNetNode::HandleDmx()+0x92>
 8009594:	459b      	cmp	fp, r3
 8009596:	d118      	bne.n	80095ca <ArtNetNode::HandleDmx()+0x19a>
 8009598:	459a      	cmp	sl, r3
 800959a:	d1eb      	bne.n	8009574 <ArtNetNode::HandleDmx()+0x144>
 800959c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a0:	f1ba 0f00 	cmp.w	sl, #0
 80095a4:	d1e4      	bne.n	8009570 <ArtNetNode::HandleDmx()+0x140>
 80095a6:	f8c5 36f8 	str.w	r3, [r5, #1784]	; 0x6f8
 80095aa:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 80095ae:	4631      	mov	r1, r6
 80095b0:	4620      	mov	r0, r4
 80095b2:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 80095b6:	f7ff feeb 	bl	8009390 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 80095ba:	463a      	mov	r2, r7
 80095bc:	4641      	mov	r1, r8
 80095be:	4630      	mov	r0, r6
 80095c0:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 80095c4:	f7ff feba 	bl	800933c <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 80095c8:	e77b      	b.n	80094c2 <ArtNetNode::HandleDmx()+0x92>
 80095ca:	f1ba 0f00 	cmp.w	sl, #0
 80095ce:	d0ea      	beq.n	80095a6 <ArtNetNode::HandleDmx()+0x176>
 80095d0:	459a      	cmp	sl, r3
 80095d2:	d0ea      	beq.n	80095aa <ArtNetNode::HandleDmx()+0x17a>
 80095d4:	e7e2      	b.n	800959c <ArtNetNode::HandleDmx()+0x16c>
	...

080095d8 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 80095d8:	2903      	cmp	r1, #3
 80095da:	b510      	push	{r4, lr}
 80095dc:	d80f      	bhi.n	80095fe <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x26>
 80095de:	4b08      	ldr	r3, [pc, #32]	; (8009600 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x28>)
 80095e0:	0109      	lsls	r1, r1, #4
 80095e2:	681c      	ldr	r4, [r3, #0]
 80095e4:	6923      	ldr	r3, [r4, #16]
 80095e6:	69a4      	ldr	r4, [r4, #24]
 80095e8:	4053      	eors	r3, r2
 80095ea:	4223      	tst	r3, r4
 80095ec:	bf15      	itete	ne
 80095ee:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
 80095f0:	1840      	addeq	r0, r0, r1
 80095f2:	1809      	addne	r1, r1, r0
 80095f4:	f8c0 277c 	streq.w	r2, [r0, #1916]	; 0x77c
 80095f8:	bf18      	it	ne
 80095fa:	f8c1 377c 	strne.w	r3, [r1, #1916]	; 0x77c
 80095fe:	bd10      	pop	{r4, pc}
 8009600:	200095c0 	andcs	r9, r0, r0, asr #11

08009604 <ArtNetNode::HandleDmxIn()>:
 8009604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009608:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800960c:	aa05      	add	r2, sp, #20
 800960e:	4605      	mov	r5, r0
 8009610:	2308      	movs	r3, #8
 8009612:	4617      	mov	r7, r2
 8009614:	493f      	ldr	r1, [pc, #252]	; (8009714 <ArtNetNode::HandleDmxIn()+0x110>)
 8009616:	3b01      	subs	r3, #1
 8009618:	d256      	bcs.n	80096c8 <ArtNetNode::HandleDmxIn()+0xc4>
 800961a:	462c      	mov	r4, r5
 800961c:	2600      	movs	r6, #0
 800961e:	4b3e      	ldr	r3, [pc, #248]	; (8009718 <ArtNetNode::HandleDmxIn()+0x114>)
 8009620:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800971c <ArtNetNode::HandleDmxIn()+0x118>
 8009624:	60bb      	str	r3, [r7, #8]
 8009626:	f894 3778 	ldrb.w	r3, [r4, #1912]	; 0x778
 800962a:	2b00      	cmp	r3, #0
 800962c:	d043      	beq.n	80096b6 <ArtNetNode::HandleDmxIn()+0xb2>
 800962e:	6968      	ldr	r0, [r5, #20]
 8009630:	4631      	mov	r1, r6
 8009632:	6803      	ldr	r3, [r0, #0]
 8009634:	aa03      	add	r2, sp, #12
 8009636:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800963a:	ab04      	add	r3, sp, #16
 800963c:	47c8      	blx	r9
 800963e:	2800      	cmp	r0, #0
 8009640:	d04c      	beq.n	80096dc <ArtNetNode::HandleDmxIn()+0xd8>
 8009642:	f894 3780 	ldrb.w	r3, [r4, #1920]	; 0x780
 8009646:	737e      	strb	r6, [r7, #13]
 8009648:	3301      	adds	r3, #1
 800964a:	b2db      	uxtb	r3, r3
 800964c:	f884 3780 	strb.w	r3, [r4, #1920]	; 0x780
 8009650:	733b      	strb	r3, [r7, #12]
 8009652:	f8b4 3774 	ldrh.w	r3, [r4, #1908]	; 0x774
 8009656:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800965a:	81fb      	strh	r3, [r7, #14]
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	18c1      	adds	r1, r0, r3
 8009660:	4288      	cmp	r0, r1
 8009662:	d136      	bne.n	80096d2 <ArtNetNode::HandleDmxIn()+0xce>
 8009664:	07da      	lsls	r2, r3, #31
 8009666:	d504      	bpl.n	8009672 <ArtNetNode::HandleDmxIn()+0x6e>
 8009668:	2100      	movs	r1, #0
 800966a:	18fa      	adds	r2, r7, r3
 800966c:	3301      	adds	r3, #1
 800966e:	7491      	strb	r1, [r2, #18]
 8009670:	9303      	str	r3, [sp, #12]
 8009672:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009676:	f240 2212 	movw	r2, #530	; 0x212
 800967a:	ba5b      	rev16	r3, r3
 800967c:	823b      	strh	r3, [r7, #16]
 800967e:	2380      	movs	r3, #128	; 0x80
 8009680:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 8009684:	f641 1336 	movw	r3, #6454	; 0x1936
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	4639      	mov	r1, r7
 800968c:	f8d4 377c 	ldr.w	r3, [r4, #1916]	; 0x77c
 8009690:	7928      	ldrb	r0, [r5, #4]
 8009692:	f005 ffd7 	bl	800f644 <udp_send>
 8009696:	2301      	movs	r3, #1
 8009698:	f8d8 2000 	ldr.w	r2, [r8]
 800969c:	40b3      	lsls	r3, r6
 800969e:	ea33 0102 	bics.w	r1, r3, r2
 80096a2:	d008      	beq.n	80096b6 <ArtNetNode::HandleDmxIn()+0xb2>
 80096a4:	4313      	orrs	r3, r2
 80096a6:	f8c8 3000 	str.w	r3, [r8]
 80096aa:	f895 36dd 	ldrb.w	r3, [r5, #1757]	; 0x6dd
 80096ae:	f043 0301 	orr.w	r3, r3, #1
 80096b2:	f885 36dd 	strb.w	r3, [r5, #1757]	; 0x6dd
 80096b6:	3601      	adds	r6, #1
 80096b8:	2e04      	cmp	r6, #4
 80096ba:	f104 0410 	add.w	r4, r4, #16
 80096be:	d1b2      	bne.n	8009626 <ArtNetNode::HandleDmxIn()+0x22>
 80096c0:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 80096c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096c8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80096cc:	f802 0b01 	strb.w	r0, [r2], #1
 80096d0:	e7a1      	b.n	8009616 <ArtNetNode::HandleDmxIn()+0x12>
 80096d2:	f810 cb01 	ldrb.w	ip, [r0], #1
 80096d6:	f802 cb01 	strb.w	ip, [r2], #1
 80096da:	e7c1      	b.n	8009660 <ArtNetNode::HandleDmxIn()+0x5c>
 80096dc:	f994 2777 	ldrsb.w	r2, [r4, #1911]	; 0x777
 80096e0:	f894 3777 	ldrb.w	r3, [r4, #1911]	; 0x777
 80096e4:	2a00      	cmp	r2, #0
 80096e6:	dae6      	bge.n	80096b6 <ArtNetNode::HandleDmxIn()+0xb2>
 80096e8:	9a04      	ldr	r2, [sp, #16]
 80096ea:	2a00      	cmp	r2, #0
 80096ec:	d1e3      	bne.n	80096b6 <ArtNetNode::HandleDmxIn()+0xb2>
 80096ee:	2201      	movs	r2, #1
 80096f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f4:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 80096f8:	f8d8 3000 	ldr.w	r3, [r8]
 80096fc:	40b2      	lsls	r2, r6
 80096fe:	ea23 0302 	bic.w	r3, r3, r2
 8009702:	f8c8 3000 	str.w	r3, [r8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1d5      	bne.n	80096b6 <ArtNetNode::HandleDmxIn()+0xb2>
 800970a:	f895 36dd 	ldrb.w	r3, [r5, #1757]	; 0x6dd
 800970e:	f023 0301 	bic.w	r3, r3, #1
 8009712:	e7ce      	b.n	80096b2 <ArtNetNode::HandleDmxIn()+0xae>
 8009714:	08015247 	stmdaeq	r1, {r0, r1, r2, r6, r9, ip, lr}
 8009718:	0e005000 	cdpeq	0, 0, cr5, cr0, cr0, {0}
 800971c:	20000708 	andcs	r0, r0, r8, lsl #14

08009720 <memcmp.constprop.0>:
 8009720:	b510      	push	{r4, lr}
 8009722:	4907      	ldr	r1, [pc, #28]	; (8009740 <memcmp.constprop.0+0x20>)
 8009724:	1e42      	subs	r2, r0, #1
 8009726:	3003      	adds	r0, #3
 8009728:	4282      	cmp	r2, r0
 800972a:	d101      	bne.n	8009730 <memcmp.constprop.0+0x10>
 800972c:	2000      	movs	r0, #0
 800972e:	e006      	b.n	800973e <memcmp.constprop.0+0x1e>
 8009730:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009734:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009738:	42a3      	cmp	r3, r4
 800973a:	d0f5      	beq.n	8009728 <memcmp.constprop.0+0x8>
 800973c:	1b18      	subs	r0, r3, r4
 800973e:	bd10      	pop	{r4, pc}
 8009740:	2000070c 	andcs	r0, r0, ip, lsl #14

08009744 <memcpy.constprop.0.isra.0>:
 8009744:	3801      	subs	r0, #1
 8009746:	1d0b      	adds	r3, r1, #4
 8009748:	4299      	cmp	r1, r3
 800974a:	d100      	bne.n	800974e <memcpy.constprop.0.isra.0+0xa>
 800974c:	4770      	bx	lr
 800974e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009752:	f800 2f01 	strb.w	r2, [r0, #1]!
 8009756:	e7f7      	b.n	8009748 <memcpy.constprop.0.isra.0+0x4>

08009758 <ArtNetNode::HandleIpProg()>:
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8009760:	b085      	sub	sp, #20
 8009762:	4604      	mov	r4, r0
 8009764:	9303      	str	r3, [sp, #12]
 8009766:	2300      	movs	r3, #0
 8009768:	4d57      	ldr	r5, [pc, #348]	; (80098c8 <ArtNetNode::HandleIpProg()+0x170>)
 800976a:	f890 70ae 	ldrb.w	r7, [r0, #174]	; 0xae
 800976e:	6828      	ldr	r0, [r5, #0]
 8009770:	f890 b001 	ldrb.w	fp, [r0, #1]
 8009774:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 8009778:	f06f 0306 	mvn.w	r3, #6
 800977c:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 8009780:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 8009784:	2bc0      	cmp	r3, #192	; 0xc0
 8009786:	d101      	bne.n	800978c <ArtNetNode::HandleIpProg()+0x34>
 8009788:	f006 fdda 	bl	8010340 <Network::EnableDhcp()>
 800978c:	f007 0388 	and.w	r3, r7, #136	; 0x88
 8009790:	2b88      	cmp	r3, #136	; 0x88
 8009792:	d103      	bne.n	800979c <ArtNetNode::HandleIpProg()+0x44>
 8009794:	2100      	movs	r1, #0
 8009796:	6828      	ldr	r0, [r5, #0]
 8009798:	f006 fd76 	bl	8010288 <Network::SetIp(unsigned int)>
 800979c:	f007 0384 	and.w	r3, r7, #132	; 0x84
 80097a0:	2b84      	cmp	r3, #132	; 0x84
 80097a2:	4e4a      	ldr	r6, [pc, #296]	; (80098cc <ArtNetNode::HandleIpProg()+0x174>)
 80097a4:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
 80097a8:	d107      	bne.n	80097ba <ArtNetNode::HandleIpProg()+0x62>
 80097aa:	4641      	mov	r1, r8
 80097ac:	4630      	mov	r0, r6
 80097ae:	f7ff ffc9 	bl	8009744 <memcpy.constprop.0.isra.0>
 80097b2:	6831      	ldr	r1, [r6, #0]
 80097b4:	6828      	ldr	r0, [r5, #0]
 80097b6:	f006 fd67 	bl	8010288 <Network::SetIp(unsigned int)>
 80097ba:	f007 0382 	and.w	r3, r7, #130	; 0x82
 80097be:	2b82      	cmp	r3, #130	; 0x82
 80097c0:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
 80097c4:	d107      	bne.n	80097d6 <ArtNetNode::HandleIpProg()+0x7e>
 80097c6:	4649      	mov	r1, r9
 80097c8:	4840      	ldr	r0, [pc, #256]	; (80098cc <ArtNetNode::HandleIpProg()+0x174>)
 80097ca:	f7ff ffbb 	bl	8009744 <memcpy.constprop.0.isra.0>
 80097ce:	6831      	ldr	r1, [r6, #0]
 80097d0:	6828      	ldr	r0, [r5, #0]
 80097d2:	f006 fd87 	bl	80102e4 <Network::SetNetmask(unsigned int)>
 80097d6:	f007 0790 	and.w	r7, r7, #144	; 0x90
 80097da:	2f90      	cmp	r7, #144	; 0x90
 80097dc:	f104 0aba 	add.w	sl, r4, #186	; 0xba
 80097e0:	d107      	bne.n	80097f2 <ArtNetNode::HandleIpProg()+0x9a>
 80097e2:	4651      	mov	r1, sl
 80097e4:	4839      	ldr	r0, [pc, #228]	; (80098cc <ArtNetNode::HandleIpProg()+0x174>)
 80097e6:	f7ff ffad 	bl	8009744 <memcpy.constprop.0.isra.0>
 80097ea:	6831      	ldr	r1, [r6, #0]
 80097ec:	6828      	ldr	r0, [r5, #0]
 80097ee:	f006 fd8f 	bl	8010310 <Network::SetGatewayIp(unsigned int)>
 80097f2:	6829      	ldr	r1, [r5, #0]
 80097f4:	784a      	ldrb	r2, [r1, #1]
 80097f6:	0192      	lsls	r2, r2, #6
 80097f8:	f884 20ba 	strb.w	r2, [r4, #186]	; 0xba
 80097fc:	2200      	movs	r2, #0
 80097fe:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
 8009802:	7848      	ldrb	r0, [r1, #1]
 8009804:	6909      	ldr	r1, [r1, #16]
 8009806:	ea8b 0b00 	eor.w	fp, fp, r0
 800980a:	4640      	mov	r0, r8
 800980c:	6031      	str	r1, [r6, #0]
 800980e:	f7ff ff87 	bl	8009720 <memcmp.constprop.0>
 8009812:	492e      	ldr	r1, [pc, #184]	; (80098cc <ArtNetNode::HandleIpProg()+0x174>)
 8009814:	4607      	mov	r7, r0
 8009816:	4640      	mov	r0, r8
 8009818:	f7ff ff94 	bl	8009744 <memcpy.constprop.0.isra.0>
 800981c:	6829      	ldr	r1, [r5, #0]
 800981e:	4648      	mov	r0, r9
 8009820:	6989      	ldr	r1, [r1, #24]
 8009822:	6031      	str	r1, [r6, #0]
 8009824:	f7ff ff7c 	bl	8009720 <memcmp.constprop.0>
 8009828:	4928      	ldr	r1, [pc, #160]	; (80098cc <ArtNetNode::HandleIpProg()+0x174>)
 800982a:	9003      	str	r0, [sp, #12]
 800982c:	4648      	mov	r0, r9
 800982e:	f7ff ff89 	bl	8009744 <memcpy.constprop.0.isra.0>
 8009832:	6829      	ldr	r1, [r5, #0]
 8009834:	4650      	mov	r0, sl
 8009836:	6949      	ldr	r1, [r1, #20]
 8009838:	6031      	str	r1, [r6, #0]
 800983a:	f7ff ff71 	bl	8009720 <memcmp.constprop.0>
 800983e:	9b03      	ldr	r3, [sp, #12]
 8009840:	4922      	ldr	r1, [pc, #136]	; (80098cc <ArtNetNode::HandleIpProg()+0x174>)
 8009842:	431f      	orrs	r7, r3
 8009844:	4307      	orrs	r7, r0
 8009846:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800984a:	bf0c      	ite	eq
 800984c:	465e      	moveq	r6, fp
 800984e:	f04b 0601 	orrne.w	r6, fp, #1
 8009852:	f7ff ff77 	bl	8009744 <memcpy.constprop.0.isra.0>
 8009856:	2200      	movs	r2, #0
 8009858:	f641 1336 	movw	r3, #6454	; 0x1936
 800985c:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 8009860:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	2222      	movs	r2, #34	; 0x22
 8009868:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 800986c:	7920      	ldrb	r0, [r4, #4]
 800986e:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8009872:	f005 fee7 	bl	800f644 <udp_send>
 8009876:	b31e      	cbz	r6, 80098c0 <ArtNetNode::HandleIpProg()+0x168>
 8009878:	682a      	ldr	r2, [r5, #0]
 800987a:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 800987e:	6913      	ldr	r3, [r2, #16]
 8009880:	62a3      	str	r3, [r4, #40]	; 0x28
 8009882:	6991      	ldr	r1, [r2, #24]
 8009884:	7852      	ldrb	r2, [r2, #1]
 8009886:	ea63 0301 	orn	r3, r3, r1
 800988a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800988c:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8009890:	4641      	mov	r1, r8
 8009892:	f023 0302 	bic.w	r3, r3, #2
 8009896:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800989a:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 800989e:	f7ff ff51 	bl	8009744 <memcpy.constprop.0.isra.0>
 80098a2:	4641      	mov	r1, r8
 80098a4:	f204 6043 	addw	r0, r4, #1603	; 0x643
 80098a8:	f7ff ff4c 	bl	8009744 <memcpy.constprop.0.isra.0>
 80098ac:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 80098b0:	b133      	cbz	r3, 80098c0 <ArtNetNode::HandleIpProg()+0x168>
 80098b2:	2101      	movs	r1, #1
 80098b4:	4620      	mov	r0, r4
 80098b6:	b005      	add	sp, #20
 80098b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	f000 b884 	b.w	80099c8 <ArtNetNode::SendPollRelply(bool)>
 80098c0:	b005      	add	sp, #20
 80098c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c6:	bf00      	nop
 80098c8:	200095c0 	andcs	r9, r0, r0, asr #11
 80098cc:	2000070c 	andcs	r0, r0, ip, lsl #14

080098d0 <memcpy.isra.0>:
 80098d0:	3801      	subs	r0, #1
 80098d2:	440a      	add	r2, r1
 80098d4:	4291      	cmp	r1, r2
 80098d6:	d100      	bne.n	80098da <memcpy.isra.0+0xa>
 80098d8:	4770      	bx	lr
 80098da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098de:	f800 3f01 	strb.w	r3, [r0, #1]!
 80098e2:	e7f7      	b.n	80098d4 <memcpy.isra.0+0x4>

080098e4 <ArtNetNode::FillPollReply()>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4604      	mov	r4, r0
 80098e8:	f200 5074 	addw	r0, r0, #1396	; 0x574
 80098ec:	4603      	mov	r3, r0
 80098ee:	2100      	movs	r1, #0
 80098f0:	f204 6263 	addw	r2, r4, #1635	; 0x663
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d15c      	bne.n	80099b2 <ArtNetNode::FillPollReply()+0xce>
 80098f8:	2208      	movs	r2, #8
 80098fa:	492f      	ldr	r1, [pc, #188]	; (80099b8 <ArtNetNode::FillPollReply()+0xd4>)
 80098fc:	f7ff ffe8 	bl	80098d0 <memcpy.isra.0>
 8009900:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8009904:	4d2d      	ldr	r5, [pc, #180]	; (80099bc <ArtNetNode::FillPollReply()+0xd8>)
 8009906:	f8a4 357c 	strh.w	r3, [r4, #1404]	; 0x57c
 800990a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800990c:	4629      	mov	r1, r5
 800990e:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 8009912:	2204      	movs	r2, #4
 8009914:	602b      	str	r3, [r5, #0]
 8009916:	f7ff ffdb 	bl	80098d0 <memcpy.isra.0>
 800991a:	f641 1336 	movw	r3, #6454	; 0x1936
 800991e:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
 8009922:	4b27      	ldr	r3, [pc, #156]	; (80099c0 <ArtNetNode::FillPollReply()+0xdc>)
 8009924:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8009928:	781a      	ldrb	r2, [r3, #0]
 800992a:	f204 508e 	addw	r0, r4, #1422	; 0x58e
 800992e:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 8009932:	785b      	ldrb	r3, [r3, #1]
 8009934:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 8009938:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800993c:	f8a4 3588 	strh.w	r3, [r4, #1416]	; 0x588
 8009940:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009944:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 8009948:	4b1e      	ldr	r3, [pc, #120]	; (80099c4 <ArtNetNode::FillPollReply()+0xe0>)
 800994a:	785a      	ldrb	r2, [r3, #1]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	f884 258c 	strb.w	r2, [r4, #1420]	; 0x58c
 8009952:	f884 358d 	strb.w	r3, [r4, #1421]	; 0x58d
 8009956:	2212      	movs	r2, #18
 8009958:	f7ff ffba 	bl	80098d0 <memcpy.isra.0>
 800995c:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8009960:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
 8009964:	2240      	movs	r2, #64	; 0x40
 8009966:	f7ff ffb3 	bl	80098d0 <memcpy.isra.0>
 800996a:	2300      	movs	r3, #0
 800996c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8009970:	f884 363c 	strb.w	r3, [r4, #1596]	; 0x63c
 8009974:	f204 603d 	addw	r0, r4, #1597	; 0x63d
 8009978:	2206      	movs	r2, #6
 800997a:	f7ff ffa9 	bl	80098d0 <memcpy.isra.0>
 800997e:	4629      	mov	r1, r5
 8009980:	f204 6043 	addw	r0, r4, #1603	; 0x643
 8009984:	2204      	movs	r2, #4
 8009986:	f7ff ffa3 	bl	80098d0 <memcpy.isra.0>
 800998a:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800998e:	f104 0198 	add.w	r1, r4, #152	; 0x98
 8009992:	f884 3648 	strb.w	r3, [r4, #1608]	; 0x648
 8009996:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800999a:	f204 604e 	addw	r0, r4, #1614	; 0x64e
 800999e:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
 80099a2:	2304      	movs	r3, #4
 80099a4:	2206      	movs	r2, #6
 80099a6:	f884 3621 	strb.w	r3, [r4, #1569]	; 0x621
 80099aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099ae:	f7ff bf8f 	b.w	80098d0 <memcpy.isra.0>
 80099b2:	f803 1b01 	strb.w	r1, [r3], #1
 80099b6:	e79d      	b.n	80098f4 <ArtNetNode::FillPollReply()+0x10>
 80099b8:	08015262 	stmdaeq	r1, {r1, r5, r6, r9, ip, lr}
 80099bc:	20000710 	andcs	r0, r0, r0, lsl r7
 80099c0:	080154f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, sl, ip, lr}
 80099c4:	080154ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, sl, ip, lr}

080099c8 <ArtNetNode::SendPollRelply(bool)>:
 80099c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	4604      	mov	r4, r0
 80099ce:	b087      	sub	sp, #28
 80099d0:	b941      	cbnz	r1, 80099e4 <ArtNetNode::SendPollRelply(bool)+0x1c>
 80099d2:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	bf02      	ittt	eq
 80099da:	f8d0 36c0 	ldreq.w	r3, [r0, #1728]	; 0x6c0
 80099de:	3301      	addeq	r3, #1
 80099e0:	f8c0 36c0 	streq.w	r3, [r0, #1728]	; 0x6c0
 80099e4:	2600      	movs	r6, #0
 80099e6:	f04f 0a24 	mov.w	sl, #36	; 0x24
 80099ea:	4635      	mov	r5, r6
 80099ec:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80099f0:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8009b00 <ArtNetNode::SendPollRelply(bool)+0x138>
 80099f4:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 80099f8:	f104 093e 	add.w	r9, r4, #62	; 0x3e
 80099fc:	7823      	ldrb	r3, [r4, #0]
 80099fe:	42ab      	cmp	r3, r5
 8009a00:	dc05      	bgt.n	8009a0e <ArtNetNode::SendPollRelply(bool)+0x46>
 8009a02:	2300      	movs	r3, #0
 8009a04:	f884 36db 	strb.w	r3, [r4, #1755]	; 0x6db
 8009a08:	b007      	add	sp, #28
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0e:	f04f 0800 	mov.w	r8, #0
 8009a12:	f899 3000 	ldrb.w	r3, [r9]
 8009a16:	3501      	adds	r5, #1
 8009a18:	f884 3586 	strb.w	r3, [r4, #1414]	; 0x586
 8009a1c:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8009a20:	b2f1      	uxtb	r1, r6
 8009a22:	f884 3587 	strb.w	r3, [r4, #1415]	; 0x587
 8009a26:	1cf3      	adds	r3, r6, #3
 8009a28:	f884 5647 	strb.w	r5, [r4, #1607]	; 0x647
 8009a2c:	9303      	str	r3, [sp, #12]
 8009a2e:	9b03      	ldr	r3, [sp, #12]
 8009a30:	428b      	cmp	r3, r1
 8009a32:	da1b      	bge.n	8009a6c <ArtNetNode::SendPollRelply(bool)+0xa4>
 8009a34:	f204 636f 	addw	r3, r4, #1647	; 0x66f
 8009a38:	9301      	str	r3, [sp, #4]
 8009a3a:	f8d4 36c0 	ldr.w	r3, [r4, #1728]	; 0x6c0
 8009a3e:	465a      	mov	r2, fp
 8009a40:	2140      	movs	r1, #64	; 0x40
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	f884 8621 	strb.w	r8, [r4, #1569]	; 0x621
 8009a48:	f894 36d4 	ldrb.w	r3, [r4, #1748]	; 0x6d4
 8009a4c:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8009a50:	f009 f9a8 	bl	8012da4 <snprintf>
 8009a54:	f641 1336 	movw	r3, #6454	; 0x1936
 8009a58:	22ef      	movs	r2, #239	; 0xef
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	7920      	ldrb	r0, [r4, #4]
 8009a5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a60:	f204 5174 	addw	r1, r4, #1396	; 0x574
 8009a64:	f005 fdee 	bl	800f644 <udp_send>
 8009a68:	3604      	adds	r6, #4
 8009a6a:	e7c7      	b.n	80099fc <ArtNetNode::SendPollRelply(bool)+0x34>
 8009a6c:	fb0a 4301 	mla	r3, sl, r1, r4
 8009a70:	69e0      	ldr	r0, [r4, #28]
 8009a72:	f893 76e7 	ldrb.w	r7, [r3, #1767]	; 0x6e7
 8009a76:	b1a8      	cbz	r0, 8009aa4 <ArtNetNode::SendPollRelply(bool)+0xdc>
 8009a78:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
 8009a7c:	2a01      	cmp	r2, #1
 8009a7e:	d111      	bne.n	8009aa4 <ArtNetNode::SendPollRelply(bool)+0xdc>
 8009a80:	6802      	ldr	r2, [r0, #0]
 8009a82:	9305      	str	r3, [sp, #20]
 8009a84:	9104      	str	r1, [sp, #16]
 8009a86:	6912      	ldr	r2, [r2, #16]
 8009a88:	4790      	blx	r2
 8009a8a:	f007 0776 	and.w	r7, r7, #118	; 0x76
 8009a8e:	f000 0089 	and.w	r0, r0, #137	; 0x89
 8009a92:	4307      	orrs	r7, r0
 8009a94:	f010 0001 	ands.w	r0, r0, #1
 8009a98:	bf08      	it	eq
 8009a9a:	9b05      	ldreq	r3, [sp, #20]
 8009a9c:	9904      	ldr	r1, [sp, #16]
 8009a9e:	bf08      	it	eq
 8009aa0:	f8c3 0700 	streq.w	r0, [r3, #1792]	; 0x700
 8009aa4:	fb0a 4201 	mla	r2, sl, r1, r4
 8009aa8:	f882 76e7 	strb.w	r7, [r2, #1767]	; 0x6e7
 8009aac:	f892 26e8 	ldrb.w	r2, [r2, #1768]	; 0x6e8
 8009ab0:	1b8b      	subs	r3, r1, r6
 8009ab2:	b112      	cbz	r2, 8009aba <ArtNetNode::SendPollRelply(bool)+0xf2>
 8009ab4:	2280      	movs	r2, #128	; 0x80
 8009ab6:	f108 0801 	add.w	r8, r8, #1
 8009aba:	fb0a 4001 	mla	r0, sl, r1, r4
 8009abe:	4423      	add	r3, r4
 8009ac0:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 8009ac4:	f883 762a 	strb.w	r7, [r3, #1578]	; 0x62a
 8009ac8:	f890 06e6 	ldrb.w	r0, [r0, #1766]	; 0x6e6
 8009acc:	2903      	cmp	r1, #3
 8009ace:	f883 0632 	strb.w	r0, [r3, #1586]	; 0x632
 8009ad2:	d812      	bhi.n	8009afa <ArtNetNode::SendPollRelply(bool)+0x132>
 8009ad4:	eb04 1001 	add.w	r0, r4, r1, lsl #4
 8009ad8:	f890 7778 	ldrb.w	r7, [r0, #1912]	; 0x778
 8009adc:	b12f      	cbz	r7, 8009aea <ArtNetNode::SendPollRelply(bool)+0x122>
 8009ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ae2:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 8009ae6:	f108 0801 	add.w	r8, r8, #1
 8009aea:	f890 2777 	ldrb.w	r2, [r0, #1911]	; 0x777
 8009aee:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
 8009af2:	f890 2776 	ldrb.w	r2, [r0, #1910]	; 0x776
 8009af6:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
 8009afa:	3101      	adds	r1, #1
 8009afc:	b2c9      	uxtb	r1, r1
 8009afe:	e796      	b.n	8009a2e <ArtNetNode::SendPollRelply(bool)+0x66>
 8009b00:	0801524f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r9, ip, lr}

08009b04 <ArtNetNode::HandlePoll()>:
 8009b04:	f890 20ac 	ldrb.w	r2, [r0, #172]	; 0xac
 8009b08:	b410      	push	{r4}
 8009b0a:	f3c2 0340 	ubfx	r3, r2, #1, #1
 8009b0e:	f880 36d6 	strb.w	r3, [r0, #1750]	; 0x6d6
 8009b12:	f012 0304 	ands.w	r3, r2, #4
 8009b16:	d02e      	beq.n	8009b76 <ArtNetNode::HandlePoll()+0x72>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	f8d0 16c8 	ldr.w	r1, [r0, #1736]	; 0x6c8
 8009b1e:	f890 46d8 	ldrb.w	r4, [r0, #1752]	; 0x6d8
 8009b22:	f880 36d7 	strb.w	r3, [r0, #1751]	; 0x6d7
 8009b26:	b979      	cbnz	r1, 8009b48 <ArtNetNode::HandlePoll()+0x44>
 8009b28:	f8d0 356c 	ldr.w	r3, [r0, #1388]	; 0x56c
 8009b2c:	f8c0 36c8 	str.w	r3, [r0, #1736]	; 0x6c8
 8009b30:	b19c      	cbz	r4, 8009b5a <ArtNetNode::HandlePoll()+0x56>
 8009b32:	f890 36e0 	ldrb.w	r3, [r0, #1760]	; 0x6e0
 8009b36:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	bf28      	it	cs
 8009b3e:	4613      	movcs	r3, r2
 8009b40:	f880 36e0 	strb.w	r3, [r0, #1760]	; 0x6e0
 8009b44:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009b46:	e010      	b.n	8009b6a <ArtNetNode::HandlePoll()+0x66>
 8009b48:	2c00      	cmp	r4, #0
 8009b4a:	d1f2      	bne.n	8009b32 <ArtNetNode::HandlePoll()+0x2e>
 8009b4c:	f8d0 456c 	ldr.w	r4, [r0, #1388]	; 0x56c
 8009b50:	42a1      	cmp	r1, r4
 8009b52:	d002      	beq.n	8009b5a <ArtNetNode::HandlePoll()+0x56>
 8009b54:	f880 36d8 	strb.w	r3, [r0, #1752]	; 0x6d8
 8009b58:	e7eb      	b.n	8009b32 <ArtNetNode::HandlePoll()+0x2e>
 8009b5a:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 8009b5e:	f880 36e0 	strb.w	r3, [r0, #1760]	; 0x6e0
 8009b62:	0713      	lsls	r3, r2, #28
 8009b64:	d5ee      	bpl.n	8009b44 <ArtNetNode::HandlePoll()+0x40>
 8009b66:	f8d0 356c 	ldr.w	r3, [r0, #1388]	; 0x56c
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	bc10      	pop	{r4}
 8009b6e:	f8c0 36c4 	str.w	r3, [r0, #1732]	; 0x6c4
 8009b72:	f7ff bf29 	b.w	80099c8 <ArtNetNode::SendPollRelply(bool)>
 8009b76:	f880 36d7 	strb.w	r3, [r0, #1751]	; 0x6d7
 8009b7a:	e7f6      	b.n	8009b6a <ArtNetNode::HandlePoll()+0x66>

08009b7c <ArtNetNode::SendTod(unsigned int)>:
 8009b7c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8009b80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b84:	2500      	movs	r5, #0
 8009b86:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	4688      	mov	r8, r1
 8009b8e:	4604      	mov	r4, r0
 8009b90:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 8009b94:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
 8009b98:	6900      	ldr	r0, [r0, #16]
 8009b9a:	088f      	lsrs	r7, r1, #2
 8009b9c:	6803      	ldr	r3, [r0, #0]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	4798      	blx	r3
 8009ba2:	f008 0303 	and.w	r3, r8, #3
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8009bac:	1c7b      	adds	r3, r7, #1
 8009bae:	b2ff      	uxtb	r7, r7
 8009bb0:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 8009bb4:	f884 50af 	strb.w	r5, [r4, #175]	; 0xaf
 8009bb8:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8009bbc:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
 8009bc0:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 8009bc4:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
 8009bc8:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8009bcc:	4427      	add	r7, r4
 8009bce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009bd2:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 8009bd6:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 8009bda:	2324      	movs	r3, #36	; 0x24
 8009bdc:	fb03 4308 	mla	r3, r3, r8, r4
 8009be0:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 8009be4:	b2c6      	uxtb	r6, r0
 8009be6:	6920      	ldr	r0, [r4, #16]
 8009be8:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 8009bec:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
 8009bf0:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 8009bf4:	f884 60b9 	strb.w	r6, [r4, #185]	; 0xb9
 8009bf8:	f884 60bb 	strb.w	r6, [r4, #187]	; 0xbb
 8009bfc:	6803      	ldr	r3, [r0, #0]
 8009bfe:	4641      	mov	r1, r8
 8009c00:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	4798      	blx	r3
 8009c08:	2306      	movs	r3, #6
 8009c0a:	fb03 f206 	mul.w	r2, r3, r6
 8009c0e:	f641 1336 	movw	r3, #6454	; 0x1936
 8009c12:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	4629      	mov	r1, r5
 8009c1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c1c:	7920      	ldrb	r0, [r4, #4]
 8009c1e:	321c      	adds	r2, #28
 8009c20:	f005 fd10 	bl	800f644 <udp_send>
 8009c24:	b002      	add	sp, #8
 8009c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009c2a <ArtNetNode::HandleTodControl()>:
 8009c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	4606      	mov	r6, r0
 8009c30:	2500      	movs	r5, #0
 8009c32:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009c36:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 8009c3a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8009c3e:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 8009c42:	42bb      	cmp	r3, r7
 8009c44:	d125      	bne.n	8009c92 <ArtNetNode::HandleTodControl()+0x68>
 8009c46:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 8009c4a:	b313      	cbz	r3, 8009c92 <ArtNetNode::HandleTodControl()+0x68>
 8009c4c:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8009c50:	b13b      	cbz	r3, 8009c62 <ArtNetNode::HandleTodControl()+0x38>
 8009c52:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 8009c56:	b923      	cbnz	r3, 8009c62 <ArtNetNode::HandleTodControl()+0x38>
 8009c58:	68a0      	ldr	r0, [r4, #8]
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	6803      	ldr	r3, [r0, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	4798      	blx	r3
 8009c62:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d104      	bne.n	8009c74 <ArtNetNode::HandleTodControl()+0x4a>
 8009c6a:	6920      	ldr	r0, [r4, #16]
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	6803      	ldr	r3, [r0, #0]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	4798      	blx	r3
 8009c74:	4629      	mov	r1, r5
 8009c76:	4620      	mov	r0, r4
 8009c78:	f7ff ff80 	bl	8009b7c <ArtNetNode::SendTod(unsigned int)>
 8009c7c:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8009c80:	b13b      	cbz	r3, 8009c92 <ArtNetNode::HandleTodControl()+0x68>
 8009c82:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 8009c86:	b923      	cbnz	r3, 8009c92 <ArtNetNode::HandleTodControl()+0x68>
 8009c88:	68a0      	ldr	r0, [r4, #8]
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	6803      	ldr	r3, [r0, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	4798      	blx	r3
 8009c92:	3501      	adds	r5, #1
 8009c94:	2d04      	cmp	r5, #4
 8009c96:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8009c9a:	d1d0      	bne.n	8009c3e <ArtNetNode::HandleTodControl()+0x14>
 8009c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c9e <ArtNetNode::HandleTodRequest()>:
 8009c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	4606      	mov	r6, r0
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009caa:	f890 70b8 	ldrb.w	r7, [r0, #184]	; 0xb8
 8009cae:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8009cb2:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 8009cb6:	42bb      	cmp	r3, r7
 8009cb8:	d106      	bne.n	8009cc8 <ArtNetNode::HandleTodRequest()+0x2a>
 8009cba:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 8009cbe:	b11b      	cbz	r3, 8009cc8 <ArtNetNode::HandleTodRequest()+0x2a>
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f7ff ff5a 	bl	8009b7c <ArtNetNode::SendTod(unsigned int)>
 8009cc8:	3501      	adds	r5, #1
 8009cca:	2d04      	cmp	r5, #4
 8009ccc:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8009cd0:	d1ef      	bne.n	8009cb2 <ArtNetNode::HandleTodRequest()+0x14>
 8009cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cd4 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>:
 8009cd4:	b141      	cbz	r1, 8009ce8 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x14>
 8009cd6:	f890 3095 	ldrb.w	r3, [r0, #149]	; 0x95
 8009cda:	6101      	str	r1, [r0, #16]
 8009cdc:	f043 0302 	orr.w	r3, r3, #2
 8009ce0:	f880 266e 	strb.w	r2, [r0, #1646]	; 0x66e
 8009ce4:	f880 3095 	strb.w	r3, [r0, #149]	; 0x95
 8009ce8:	4770      	bx	lr
	...

08009cec <ArtNetNode::HandleRdm()>:
 8009cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	2600      	movs	r6, #0
 8009cf6:	f04f 0b01 	mov.w	fp, #1
 8009cfa:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009cfe:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 8009d02:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009dc8 <ArtNetNode::HandleRdm()+0xdc>
 8009d06:	f100 09a0 	add.w	r9, r0, #160	; 0xa0
 8009d0a:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8009d0e:	f100 08b8 	add.w	r8, r0, #184	; 0xb8
 8009d12:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 8009d16:	42bb      	cmp	r3, r7
 8009d18:	d145      	bne.n	8009da6 <ArtNetNode::HandleRdm()+0xba>
 8009d1a:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d041      	beq.n	8009da6 <ArtNetNode::HandleRdm()+0xba>
 8009d22:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 8009d26:	b9c3      	cbnz	r3, 8009d5a <ArtNetNode::HandleRdm()+0x6e>
 8009d28:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d10c      	bne.n	8009d4a <ArtNetNode::HandleRdm()+0x5e>
 8009d30:	69e0      	ldr	r0, [r4, #28]
 8009d32:	b150      	cbz	r0, 8009d4a <ArtNetNode::HandleRdm()+0x5e>
 8009d34:	6803      	ldr	r3, [r0, #0]
 8009d36:	4631      	mov	r1, r6
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	4798      	blx	r3
 8009d3c:	f010 0f89 	tst.w	r0, #137	; 0x89
 8009d40:	bf14      	ite	ne
 8009d42:	2301      	movne	r3, #1
 8009d44:	2300      	moveq	r3, #0
 8009d46:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 8009d4a:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8009d4e:	b123      	cbz	r3, 8009d5a <ArtNetNode::HandleRdm()+0x6e>
 8009d50:	68a0      	ldr	r0, [r4, #8]
 8009d52:	4631      	mov	r1, r6
 8009d54:	6803      	ldr	r3, [r0, #0]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	4798      	blx	r3
 8009d5a:	6920      	ldr	r0, [r4, #16]
 8009d5c:	4642      	mov	r2, r8
 8009d5e:	6803      	ldr	r3, [r0, #0]
 8009d60:	4631      	mov	r1, r6
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	4798      	blx	r3
 8009d66:	b358      	cbz	r0, 8009dc0 <ArtNetNode::HandleRdm()+0xd4>
 8009d68:	46c4      	mov	ip, r8
 8009d6a:	f884 b0ac 	strb.w	fp, [r4, #172]	; 0xac
 8009d6e:	7881      	ldrb	r1, [r0, #2]
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	460a      	mov	r2, r1
 8009d74:	3102      	adds	r1, #2
 8009d76:	4408      	add	r0, r1
 8009d78:	4298      	cmp	r0, r3
 8009d7a:	d11c      	bne.n	8009db6 <ArtNetNode::HandleRdm()+0xca>
 8009d7c:	f641 1336 	movw	r3, #6454	; 0x1936
 8009d80:	4649      	mov	r1, r9
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	7920      	ldrb	r0, [r4, #4]
 8009d86:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 8009d8a:	3219      	adds	r2, #25
 8009d8c:	f005 fc5a 	bl	800f644 <udp_send>
 8009d90:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8009d94:	b13b      	cbz	r3, 8009da6 <ArtNetNode::HandleRdm()+0xba>
 8009d96:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 8009d9a:	b923      	cbnz	r3, 8009da6 <ArtNetNode::HandleRdm()+0xba>
 8009d9c:	68a0      	ldr	r0, [r4, #8]
 8009d9e:	4631      	mov	r1, r6
 8009da0:	6803      	ldr	r3, [r0, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	4798      	blx	r3
 8009da6:	3601      	adds	r6, #1
 8009da8:	2e04      	cmp	r6, #4
 8009daa:	f105 0524 	add.w	r5, r5, #36	; 0x24
 8009dae:	d1b0      	bne.n	8009d12 <ArtNetNode::HandleRdm()+0x26>
 8009db0:	b003      	add	sp, #12
 8009db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db6:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009dba:	f80c 1b01 	strb.w	r1, [ip], #1
 8009dbe:	e7db      	b.n	8009d78 <ArtNetNode::HandleRdm()+0x8c>
 8009dc0:	4650      	mov	r0, sl
 8009dc2:	f008 ffc7 	bl	8012d54 <printf>
 8009dc6:	e7e3      	b.n	8009d90 <ArtNetNode::HandleRdm()+0xa4>
 8009dc8:	0801526a 	stmdaeq	r1, {r1, r3, r5, r6, r9, ip, lr}

08009dcc <ArtNetNode::HandleSync()>:
 8009dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd0:	2500      	movs	r5, #0
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	4606      	mov	r6, r0
 8009dd8:	46a9      	mov	r9, r5
 8009dda:	f880 36d9 	strb.w	r3, [r0, #1753]	; 0x6d9
 8009dde:	4b1e      	ldr	r3, [pc, #120]	; (8009e58 <ArtNetNode::HandleSync()+0x8c>)
 8009de0:	4f1e      	ldr	r7, [pc, #120]	; (8009e5c <ArtNetNode::HandleSync()+0x90>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8009e60 <ArtNetNode::HandleSync()+0x94>
 8009de8:	f8c0 36d0 	str.w	r3, [r0, #1744]	; 0x6d0
 8009dec:	7823      	ldrb	r3, [r4, #0]
 8009dee:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 8009df2:	d301      	bcc.n	8009df8 <ArtNetNode::HandleSync()+0x2c>
 8009df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df8:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 8009dfc:	bb3b      	cbnz	r3, 8009e4e <ArtNetNode::HandleSync()+0x82>
 8009dfe:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 8009e02:	b323      	cbz	r3, 8009e4e <ArtNetNode::HandleSync()+0x82>
 8009e04:	f8d8 3000 	ldr.w	r3, [r8]
 8009e08:	68a0      	ldr	r0, [r4, #8]
 8009e0a:	07da      	lsls	r2, r3, #31
 8009e0c:	bf5c      	itt	pl
 8009e0e:	2301      	movpl	r3, #1
 8009e10:	f8c8 3000 	strpl.w	r3, [r8]
 8009e14:	6803      	ldr	r3, [r0, #0]
 8009e16:	4629      	mov	r1, r5
 8009e18:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8009e1c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8009e20:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8009e24:	47d0      	blx	sl
 8009e26:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8009e2a:	b93b      	cbnz	r3, 8009e3c <ArtNetNode::HandleSync()+0x70>
 8009e2c:	68a0      	ldr	r0, [r4, #8]
 8009e2e:	4629      	mov	r1, r5
 8009e30:	6803      	ldr	r3, [r0, #0]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	4798      	blx	r3
 8009e36:	2301      	movs	r3, #1
 8009e38:	f886 3705 	strb.w	r3, [r6, #1797]	; 0x705
 8009e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8009e40:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 8009e44:	07db      	lsls	r3, r3, #31
 8009e46:	bf5c      	itt	pl
 8009e48:	2301      	movpl	r3, #1
 8009e4a:	f8c8 3000 	strpl.w	r3, [r8]
 8009e4e:	3501      	adds	r5, #1
 8009e50:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8009e54:	3624      	adds	r6, #36	; 0x24
 8009e56:	e7c9      	b.n	8009dec <ArtNetNode::HandleSync()+0x20>
 8009e58:	20009d04 	andcs	r9, r0, r4, lsl #26
 8009e5c:	20000100 	andcs	r0, r0, r0, lsl #2
 8009e60:	200000fc 	strdcs	r0, [r0], -ip

08009e64 <ArtNetNode::HandleTimeCode()>:
 8009e64:	4601      	mov	r1, r0
 8009e66:	68c0      	ldr	r0, [r0, #12]
 8009e68:	31ae      	adds	r1, #174	; 0xae
 8009e6a:	6803      	ldr	r3, [r0, #0]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	4718      	bx	r3

08009e70 <ArtNetNode::HandleTimeSync()>:
 8009e70:	b500      	push	{lr}
 8009e72:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 8009e76:	b08b      	sub	sp, #44	; 0x2c
 8009e78:	9301      	str	r3, [sp, #4]
 8009e7a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8009e7e:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
 8009e82:	9302      	str	r3, [sp, #8]
 8009e84:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 8009e88:	a901      	add	r1, sp, #4
 8009e8a:	9303      	str	r3, [sp, #12]
 8009e8c:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
 8009e90:	9304      	str	r3, [sp, #16]
 8009e92:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
 8009e96:	9305      	str	r3, [sp, #20]
 8009e98:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009e9c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009ea0:	9306      	str	r3, [sp, #24]
 8009ea2:	4b03      	ldr	r3, [pc, #12]	; (8009eb0 <ArtNetNode::HandleTimeSync()+0x40>)
 8009ea4:	6818      	ldr	r0, [r3, #0]
 8009ea6:	f008 fc21 	bl	80126ec <Hardware::SetTime(tm const*)>
 8009eaa:	b00b      	add	sp, #44	; 0x2c
 8009eac:	f85d fb04 	ldr.w	pc, [sp], #4
 8009eb0:	20009ce8 	andcs	r9, r0, r8, ror #25

08009eb4 <ArtNetNode::Print()>:
 8009eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	4605      	mov	r5, r0
 8009eba:	4604      	mov	r4, r0
 8009ebc:	b08b      	sub	sp, #44	; 0x2c
 8009ebe:	f815 2b42 	ldrb.w	r2, [r5], #66
 8009ec2:	2104      	movs	r1, #4
 8009ec4:	4852      	ldr	r0, [pc, #328]	; (800a010 <ArtNetNode::Print()+0x15c>)
 8009ec6:	f008 ff45 	bl	8012d54 <printf>
 8009eca:	4b52      	ldr	r3, [pc, #328]	; (800a014 <ArtNetNode::Print()+0x160>)
 8009ecc:	4852      	ldr	r0, [pc, #328]	; (800a018 <ArtNetNode::Print()+0x164>)
 8009ece:	7819      	ldrb	r1, [r3, #0]
 8009ed0:	785a      	ldrb	r2, [r3, #1]
 8009ed2:	f008 ff3f 	bl	8012d54 <printf>
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	4850      	ldr	r0, [pc, #320]	; (800a01c <ArtNetNode::Print()+0x168>)
 8009eda:	f008 ff3b 	bl	8012d54 <printf>
 8009ede:	4850      	ldr	r0, [pc, #320]	; (800a020 <ArtNetNode::Print()+0x16c>)
 8009ee0:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8009ee4:	f008 ff36 	bl	8012d54 <printf>
 8009ee8:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 8009eec:	b983      	cbnz	r3, 8009f10 <ArtNetNode::Print()+0x5c>
 8009eee:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 8009ef2:	b153      	cbz	r3, 8009f0a <ArtNetNode::Print()+0x56>
 8009ef4:	484b      	ldr	r0, [pc, #300]	; (800a024 <ArtNetNode::Print()+0x170>)
 8009ef6:	f008 ff2d 	bl	8012d54 <printf>
 8009efa:	f04f 0b00 	mov.w	fp, #0
 8009efe:	4e4a      	ldr	r6, [pc, #296]	; (800a028 <ArtNetNode::Print()+0x174>)
 8009f00:	4f4a      	ldr	r7, [pc, #296]	; (800a02c <ArtNetNode::Print()+0x178>)
 8009f02:	7823      	ldrb	r3, [r4, #0]
 8009f04:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
 8009f08:	d347      	bcc.n	8009f9a <ArtNetNode::Print()+0xe6>
 8009f0a:	b00b      	add	sp, #44	; 0x2c
 8009f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f10:	4847      	ldr	r0, [pc, #284]	; (800a030 <ArtNetNode::Print()+0x17c>)
 8009f12:	f008 ff1f 	bl	8012d54 <printf>
 8009f16:	4626      	mov	r6, r4
 8009f18:	2500      	movs	r5, #0
 8009f1a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800a034 <ArtNetNode::Print()+0x180>
 8009f1e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800a038 <ArtNetNode::Print()+0x184>
 8009f22:	7823      	ldrb	r3, [r4, #0]
 8009f24:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 8009f28:	d2e1      	bcs.n	8009eee <ArtNetNode::Print()+0x3a>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 8009f34:	f7fe fecc 	bl	8008cd0 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8009f38:	b360      	cbz	r0, 8009f94 <ArtNetNode::Print()+0xe0>
 8009f3a:	eb04 0395 	add.w	r3, r4, r5, lsr #2
 8009f3e:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
 8009f42:	f893 b03f 	ldrb.w	fp, [r3, #63]	; 0x3f
 8009f46:	4629      	mov	r1, r5
 8009f48:	2301      	movs	r3, #1
 8009f4a:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f7fe fea8 	bl	8008ca4 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009f54:	f8d6 06fc 	ldr.w	r0, [r6, #1788]	; 0x6fc
 8009f58:	4938      	ldr	r1, [pc, #224]	; (800a03c <ArtNetNode::Print()+0x188>)
 8009f5a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	bf18      	it	ne
 8009f62:	4641      	movne	r1, r8
 8009f64:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 8009f68:	08af      	lsrs	r7, r5, #2
 8009f6a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009f6e:	e9cd b300 	strd	fp, r3, [sp]
 8009f72:	463a      	mov	r2, r7
 8009f74:	4653      	mov	r3, sl
 8009f76:	4629      	mov	r1, r5
 8009f78:	4648      	mov	r0, r9
 8009f7a:	f008 feeb 	bl	8012d54 <printf>
 8009f7e:	f8d6 1700 	ldr.w	r1, [r6, #1792]	; 0x700
 8009f82:	4a2f      	ldr	r2, [pc, #188]	; (800a040 <ArtNetNode::Print()+0x18c>)
 8009f84:	4b2f      	ldr	r3, [pc, #188]	; (800a044 <ArtNetNode::Print()+0x190>)
 8009f86:	4830      	ldr	r0, [pc, #192]	; (800a048 <ArtNetNode::Print()+0x194>)
 8009f88:	2900      	cmp	r1, #0
 8009f8a:	bf0c      	ite	eq
 8009f8c:	4611      	moveq	r1, r2
 8009f8e:	4619      	movne	r1, r3
 8009f90:	f008 fee0 	bl	8012d54 <printf>
 8009f94:	3501      	adds	r5, #1
 8009f96:	3624      	adds	r6, #36	; 0x24
 8009f98:	e7c3      	b.n	8009f22 <ArtNetNode::Print()+0x6e>
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	4659      	mov	r1, fp
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 8009fa4:	f7fe fe94 	bl	8008cd0 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8009fa8:	b378      	cbz	r0, 800a00a <ArtNetNode::Print()+0x156>
 8009faa:	eb04 039b 	add.w	r3, r4, fp, lsr #2
 8009fae:	f893 903e 	ldrb.w	r9, [r3, #62]	; 0x3e
 8009fb2:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
 8009fb6:	eb04 130b 	add.w	r3, r4, fp, lsl #4
 8009fba:	f8d3 577c 	ldr.w	r5, [r3, #1916]	; 0x77c
 8009fbe:	ea4f 089b 	mov.w	r8, fp, lsr #2
 8009fc2:	b925      	cbnz	r5, 8009fce <ArtNetNode::Print()+0x11a>
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	699a      	ldr	r2, [r3, #24]
 8009fc8:	691d      	ldr	r5, [r3, #16]
 8009fca:	ea65 0502 	orn	r5, r5, r2
 8009fce:	2300      	movs	r3, #0
 8009fd0:	4659      	mov	r1, fp
 8009fd2:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	f7fe fe64 	bl	8008ca4 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009fdc:	0e2b      	lsrs	r3, r5, #24
 8009fde:	9306      	str	r3, [sp, #24]
 8009fe0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8009fe4:	9305      	str	r3, [sp, #20]
 8009fe6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009ff0:	b2ed      	uxtb	r5, r5
 8009ff2:	9302      	str	r3, [sp, #8]
 8009ff4:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	e9cd a300 	strd	sl, r3, [sp]
 8009ffe:	4659      	mov	r1, fp
 800a000:	464b      	mov	r3, r9
 800a002:	4630      	mov	r0, r6
 800a004:	9503      	str	r5, [sp, #12]
 800a006:	f008 fea5 	bl	8012d54 <printf>
 800a00a:	f10b 0b01 	add.w	fp, fp, #1
 800a00e:	e778      	b.n	8009f02 <ArtNetNode::Print()+0x4e>
 800a010:	08015290 	stmdaeq	r1, {r4, r7, r9, ip, lr}
 800a014:	080154f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, sl, ip, lr}
 800a018:	0801529e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r9, ip, lr}
 800a01c:	080152b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, ip, lr}
 800a020:	080152c5 	stmdaeq	r1, {r0, r2, r6, r7, r9, ip, lr}
 800a024:	0801530f 	stmdaeq	r1, {r0, r1, r2, r3, r8, r9, ip, lr}
 800a028:	08015317 	stmdaeq	r1, {r0, r1, r2, r4, r8, r9, ip, lr}
 800a02c:	200095c0 	andcs	r9, r0, r0, asr #11
 800a030:	080152d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, ip, lr}
 800a034:	0801527f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r9, ip, lr}
 800a038:	080152e0 	stmdaeq	r1, {r5, r6, r7, r9, ip, lr}
 800a03c:	0801527b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, ip, lr}
 800a040:	08015283 	stmdaeq	r1, {r0, r1, r7, r9, ip, lr}
 800a044:	0801528b 	stmdaeq	r1, {r0, r1, r3, r7, r9, ip, lr}
 800a048:	08015308 	stmdaeq	r1, {r3, r8, r9, ip, lr}

0800a04c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800a04c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a04e:	88c6      	ldrh	r6, [r0, #6]
 800a050:	8885      	ldrh	r5, [r0, #4]
 800a052:	42ae      	cmp	r6, r5
 800a054:	d216      	bcs.n	800a084 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800a056:	4604      	mov	r4, r0
 800a058:	6800      	ldr	r0, [r0, #0]
 800a05a:	1bad      	subs	r5, r5, r6
 800a05c:	4430      	add	r0, r6
 800a05e:	7a26      	ldrb	r6, [r4, #8]
 800a060:	b923      	cbnz	r3, 800a06c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800a062:	b926      	cbnz	r6, 800a06e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800a064:	9200      	str	r2, [sp, #0]
 800a066:	460b      	mov	r3, r1
 800a068:	4a09      	ldr	r2, [pc, #36]	; (800a090 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800a06a:	e003      	b.n	800a074 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800a06c:	b166      	cbz	r6, 800a088 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800a06e:	460b      	mov	r3, r1
 800a070:	9200      	str	r2, [sp, #0]
 800a072:	4a08      	ldr	r2, [pc, #32]	; (800a094 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800a074:	4629      	mov	r1, r5
 800a076:	f008 fe95 	bl	8012da4 <snprintf>
 800a07a:	4285      	cmp	r5, r0
 800a07c:	bfa2      	ittt	ge
 800a07e:	88e3      	ldrhge	r3, [r4, #6]
 800a080:	181b      	addge	r3, r3, r0
 800a082:	80e3      	strhge	r3, [r4, #6]
 800a084:	b002      	add	sp, #8
 800a086:	bd70      	pop	{r4, r5, r6, pc}
 800a088:	9200      	str	r2, [sp, #0]
 800a08a:	460b      	mov	r3, r1
 800a08c:	4a02      	ldr	r2, [pc, #8]	; (800a098 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a08e:	e7f1      	b.n	800a074 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800a090:	08015353 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, ip, lr}
 800a094:	0801534a 	stmdaeq	r1, {r1, r3, r6, r8, r9, ip, lr}
 800a098:	08015354 	stmdaeq	r1, {r2, r4, r6, r8, r9, ip, lr}

0800a09c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800a09c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a09e:	88c6      	ldrh	r6, [r0, #6]
 800a0a0:	8885      	ldrh	r5, [r0, #4]
 800a0a2:	42ae      	cmp	r6, r5
 800a0a4:	d216      	bcs.n	800a0d4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	6800      	ldr	r0, [r0, #0]
 800a0aa:	1bad      	subs	r5, r5, r6
 800a0ac:	4430      	add	r0, r6
 800a0ae:	7a26      	ldrb	r6, [r4, #8]
 800a0b0:	b923      	cbnz	r3, 800a0bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800a0b2:	b926      	cbnz	r6, 800a0be <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800a0b4:	9200      	str	r2, [sp, #0]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	4a09      	ldr	r2, [pc, #36]	; (800a0e0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800a0ba:	e003      	b.n	800a0c4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a0bc:	b166      	cbz	r6, 800a0d8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800a0be:	460b      	mov	r3, r1
 800a0c0:	9200      	str	r2, [sp, #0]
 800a0c2:	4a08      	ldr	r2, [pc, #32]	; (800a0e4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	f008 fe6d 	bl	8012da4 <snprintf>
 800a0ca:	4285      	cmp	r5, r0
 800a0cc:	bfa2      	ittt	ge
 800a0ce:	88e3      	ldrhge	r3, [r4, #6]
 800a0d0:	181b      	addge	r3, r3, r0
 800a0d2:	80e3      	strhge	r3, [r4, #6]
 800a0d4:	b002      	add	sp, #8
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	9200      	str	r2, [sp, #0]
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4a02      	ldr	r2, [pc, #8]	; (800a0e8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a0de:	e7f1      	b.n	800a0c4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a0e0:	08015366 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, ip, lr}
 800a0e4:	0801535b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, ip, lr}
 800a0e8:	08015367 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, ip, lr}

0800a0ec <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800a0ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	8885      	ldrh	r5, [r0, #4]
 800a0f2:	88c1      	ldrh	r1, [r0, #6]
 800a0f4:	42a9      	cmp	r1, r5
 800a0f6:	d214      	bcs.n	800a122 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	6800      	ldr	r0, [r0, #0]
 800a0fc:	1a6d      	subs	r5, r5, r1
 800a0fe:	4408      	add	r0, r1
 800a100:	7a21      	ldrb	r1, [r4, #8]
 800a102:	b91a      	cbnz	r2, 800a10c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800a104:	b919      	cbnz	r1, 800a10e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800a106:	4a0a      	ldr	r2, [pc, #40]	; (800a130 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800a108:	9100      	str	r1, [sp, #0]
 800a10a:	e002      	b.n	800a112 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800a10c:	b159      	cbz	r1, 800a126 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800a10e:	9200      	str	r2, [sp, #0]
 800a110:	4a08      	ldr	r2, [pc, #32]	; (800a134 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800a112:	4629      	mov	r1, r5
 800a114:	f008 fe46 	bl	8012da4 <snprintf>
 800a118:	4285      	cmp	r5, r0
 800a11a:	bfa2      	ittt	ge
 800a11c:	88e3      	ldrhge	r3, [r4, #6]
 800a11e:	181b      	addge	r3, r3, r0
 800a120:	80e3      	strhge	r3, [r4, #6]
 800a122:	b003      	add	sp, #12
 800a124:	bd30      	pop	{r4, r5, pc}
 800a126:	2201      	movs	r2, #1
 800a128:	9200      	str	r2, [sp, #0]
 800a12a:	4a03      	ldr	r2, [pc, #12]	; (800a138 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800a12c:	e7f1      	b.n	800a112 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800a12e:	bf00      	nop
 800a130:	08015353 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, ip, lr}
 800a134:	0801534a 	stmdaeq	r1, {r1, r3, r6, r8, r9, ip, lr}
 800a138:	08015354 	stmdaeq	r1, {r2, r4, r6, r8, r9, ip, lr}

0800a13c <strncpy.isra.0>:
 800a13c:	1e4b      	subs	r3, r1, #1
 800a13e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a142:	b909      	cbnz	r1, 800a148 <strncpy.isra.0+0xc>
 800a144:	f008 bbec 	b.w	8012920 <memset>
 800a148:	3a01      	subs	r2, #1
 800a14a:	f800 1b01 	strb.w	r1, [r0], #1
 800a14e:	d1f6      	bne.n	800a13e <strncpy.isra.0+0x2>
 800a150:	4770      	bx	lr
	...

0800a154 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800a154:	b510      	push	{r4, lr}
 800a156:	2287      	movs	r2, #135	; 0x87
 800a158:	4604      	mov	r4, r0
 800a15a:	f840 1b04 	str.w	r1, [r0], #4
 800a15e:	2100      	movs	r1, #0
 800a160:	f008 fbde 	bl	8012920 <memset>
 800a164:	2301      	movs	r3, #1
 800a166:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800a16a:	f240 3302 	movw	r3, #770	; 0x302
 800a16e:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800a172:	2304      	movs	r3, #4
 800a174:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800a178:	4b07      	ldr	r3, [pc, #28]	; (800a198 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x44>)
 800a17a:	4620      	mov	r0, r4
 800a17c:	785a      	ldrb	r2, [r3, #1]
 800a17e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 800a188:	230a      	movs	r3, #10
 800a18a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800a18e:	23ff      	movs	r3, #255	; 0xff
 800a190:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800a194:	bd10      	pop	{r4, pc}
 800a196:	bf00      	nop
 800a198:	080154ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, sl, ip, lr}

0800a19c <ArtNetParams::Load()>:
 800a19c:	b508      	push	{r3, lr}
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4601      	mov	r1, r0
 800a1a2:	6043      	str	r3, [r0, #4]
 800a1a4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800a1a8:	6800      	ldr	r0, [r0, #0]
 800a1aa:	b120      	cbz	r0, 800a1b6 <ArtNetParams::Load()+0x1a>
 800a1ac:	6803      	ldr	r3, [r0, #0]
 800a1ae:	3104      	adds	r1, #4
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	4798      	blx	r3
 800a1b4:	2001      	movs	r0, #1
 800a1b6:	bd08      	pop	{r3, pc}

0800a1b8 <ArtNetParams::Load(char const*, unsigned int)>:
 800a1b8:	6803      	ldr	r3, [r0, #0]
 800a1ba:	b1e3      	cbz	r3, 800a1f6 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	4616      	mov	r6, r2
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	6043      	str	r3, [r0, #4]
 800a1c8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	490a      	ldr	r1, [pc, #40]	; (800a1f8 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800a1d0:	4668      	mov	r0, sp
 800a1d2:	f007 fd73 	bl	8011cbc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800a1d6:	4632      	mov	r2, r6
 800a1d8:	4629      	mov	r1, r5
 800a1da:	4668      	mov	r0, sp
 800a1dc:	f007 fd72 	bl	8011cc4 <ReadConfigFile::Read(char const*, unsigned int)>
 800a1e0:	4621      	mov	r1, r4
 800a1e2:	f851 0b04 	ldr.w	r0, [r1], #4
 800a1e6:	6803      	ldr	r3, [r0, #0]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	4798      	blx	r3
 800a1ec:	4668      	mov	r0, sp
 800a1ee:	f007 fd68 	bl	8011cc2 <ReadConfigFile::~ReadConfigFile()>
 800a1f2:	b002      	add	sp, #8
 800a1f4:	bd70      	pop	{r4, r5, r6, pc}
 800a1f6:	4770      	bx	lr
 800a1f8:	0800a5b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, sl, sp, pc}

0800a1fc <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800a1fc:	6843      	ldr	r3, [r0, #4]
 800a1fe:	b111      	cbz	r1, 800a206 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800a200:	4313      	orrs	r3, r2
 800a202:	6043      	str	r3, [r0, #4]
 800a204:	4770      	bx	lr
 800a206:	ea23 0302 	bic.w	r3, r3, r2
 800a20a:	e7fa      	b.n	800a202 <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800a20c <ArtNetParams::callbackFunction(char const*)>:
 800a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a210:	460e      	mov	r6, r1
 800a212:	b0a5      	sub	sp, #148	; 0x94
 800a214:	4604      	mov	r4, r0
 800a216:	49a6      	ldr	r1, [pc, #664]	; (800a4b0 <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800a218:	4630      	mov	r0, r6
 800a21a:	f10d 0205 	add.w	r2, sp, #5
 800a21e:	f007 fe27 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a222:	b940      	cbnz	r0, 800a236 <ArtNetParams::callbackFunction(char const*)+0x2a>
 800a224:	2220      	movs	r2, #32
 800a226:	4620      	mov	r0, r4
 800a228:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800a22c:	b025      	add	sp, #148	; 0x94
 800a22e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a232:	f7ff bfe3 	b.w	800a1fc <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800a236:	2311      	movs	r3, #17
 800a238:	4630      	mov	r0, r6
 800a23a:	9303      	str	r3, [sp, #12]
 800a23c:	499d      	ldr	r1, [pc, #628]	; (800a4b4 <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 800a23e:	ab03      	add	r3, sp, #12
 800a240:	f104 0210 	add.w	r2, r4, #16
 800a244:	f007 fd72 	bl	8011d2c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a248:	b938      	cbnz	r0, 800a25a <ArtNetParams::callbackFunction(char const*)+0x4e>
 800a24a:	9b03      	ldr	r3, [sp, #12]
 800a24c:	4423      	add	r3, r4
 800a24e:	7418      	strb	r0, [r3, #16]
 800a250:	6863      	ldr	r3, [r4, #4]
 800a252:	f043 0302 	orr.w	r3, r3, #2
 800a256:	6063      	str	r3, [r4, #4]
 800a258:	e0d0      	b.n	800a3fc <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800a25a:	233f      	movs	r3, #63	; 0x3f
 800a25c:	4630      	mov	r0, r6
 800a25e:	9303      	str	r3, [sp, #12]
 800a260:	4995      	ldr	r1, [pc, #596]	; (800a4b8 <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 800a262:	ab03      	add	r3, sp, #12
 800a264:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800a268:	f007 fd60 	bl	8011d2c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a26c:	b938      	cbnz	r0, 800a27e <ArtNetParams::callbackFunction(char const*)+0x72>
 800a26e:	9b03      	ldr	r3, [sp, #12]
 800a270:	4423      	add	r3, r4
 800a272:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800a276:	6863      	ldr	r3, [r4, #4]
 800a278:	f043 0301 	orr.w	r3, r3, #1
 800a27c:	e7eb      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a27e:	4630      	mov	r0, r6
 800a280:	498e      	ldr	r1, [pc, #568]	; (800a4bc <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 800a282:	f10d 0206 	add.w	r2, sp, #6
 800a286:	f007 fd6a 	bl	8011d5e <Sscan::HexUint16(char const*, char const*, unsigned short&)>
 800a28a:	b940      	cbnz	r0, 800a29e <ArtNetParams::callbackFunction(char const*)+0x92>
 800a28c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a290:	ba5b      	rev16	r3, r3
 800a292:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800a296:	6863      	ldr	r3, [r4, #4]
 800a298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a29c:	e7db      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a29e:	4630      	mov	r0, r6
 800a2a0:	4987      	ldr	r1, [pc, #540]	; (800a4c0 <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800a2a2:	f10d 0205 	add.w	r2, sp, #5
 800a2a6:	f007 fde3 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a2aa:	b958      	cbnz	r0, 800a2c4 <ArtNetParams::callbackFunction(char const*)+0xb8>
 800a2ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a2b0:	6863      	ldr	r3, [r4, #4]
 800a2b2:	2a0a      	cmp	r2, #10
 800a2b4:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 800a2b8:	bf14      	ite	ne
 800a2ba:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800a2be:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 800a2c2:	e7c8      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	497f      	ldr	r1, [pc, #508]	; (800a4c4 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800a2c8:	f10d 0205 	add.w	r2, sp, #5
 800a2cc:	f007 fdd0 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a2d0:	b910      	cbnz	r0, 800a2d8 <ArtNetParams::callbackFunction(char const*)+0xcc>
 800a2d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a2d6:	e7a6      	b.n	800a226 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800a2d8:	4630      	mov	r0, r6
 800a2da:	497b      	ldr	r1, [pc, #492]	; (800a4c8 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800a2dc:	f10d 0205 	add.w	r2, sp, #5
 800a2e0:	f007 fdc6 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a2e4:	b950      	cbnz	r0, 800a2fc <ArtNetParams::callbackFunction(char const*)+0xf0>
 800a2e6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a2ea:	6863      	ldr	r3, [r4, #4]
 800a2ec:	7222      	strb	r2, [r4, #8]
 800a2ee:	b112      	cbz	r2, 800a2f6 <ArtNetParams::callbackFunction(char const*)+0xea>
 800a2f0:	f043 0304 	orr.w	r3, r3, #4
 800a2f4:	e7af      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a2f6:	f023 0304 	bic.w	r3, r3, #4
 800a2fa:	e7ac      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	4973      	ldr	r1, [pc, #460]	; (800a4cc <ArtNetParams::callbackFunction(char const*)+0x2c0>)
 800a300:	f10d 0205 	add.w	r2, sp, #5
 800a304:	f007 fdb4 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a308:	b950      	cbnz	r0, 800a320 <ArtNetParams::callbackFunction(char const*)+0x114>
 800a30a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a30e:	6863      	ldr	r3, [r4, #4]
 800a310:	7262      	strb	r2, [r4, #9]
 800a312:	b112      	cbz	r2, 800a31a <ArtNetParams::callbackFunction(char const*)+0x10e>
 800a314:	f043 0308 	orr.w	r3, r3, #8
 800a318:	e79d      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a31a:	f023 0308 	bic.w	r3, r3, #8
 800a31e:	e79a      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a320:	2303      	movs	r3, #3
 800a322:	4630      	mov	r0, r6
 800a324:	9303      	str	r3, [sp, #12]
 800a326:	496a      	ldr	r1, [pc, #424]	; (800a4d0 <ArtNetParams::callbackFunction(char const*)+0x2c4>)
 800a328:	ab03      	add	r3, sp, #12
 800a32a:	aa04      	add	r2, sp, #16
 800a32c:	f007 fcfe 	bl	8011d2c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a330:	b9f0      	cbnz	r0, 800a370 <ArtNetParams::callbackFunction(char const*)+0x164>
 800a332:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800a336:	6863      	ldr	r3, [r4, #4]
 800a338:	f042 0220 	orr.w	r2, r2, #32
 800a33c:	2a6c      	cmp	r2, #108	; 0x6c
 800a33e:	d111      	bne.n	800a364 <ArtNetParams::callbackFunction(char const*)+0x158>
 800a340:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800a344:	f042 0220 	orr.w	r2, r2, #32
 800a348:	2a74      	cmp	r2, #116	; 0x74
 800a34a:	d10b      	bne.n	800a364 <ArtNetParams::callbackFunction(char const*)+0x158>
 800a34c:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800a350:	f042 0220 	orr.w	r2, r2, #32
 800a354:	2a70      	cmp	r2, #112	; 0x70
 800a356:	d105      	bne.n	800a364 <ArtNetParams::callbackFunction(char const*)+0x158>
 800a358:	2201      	movs	r2, #1
 800a35a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a35e:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800a362:	e778      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a364:	2200      	movs	r2, #0
 800a366:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a36a:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800a36e:	e772      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a370:	2304      	movs	r3, #4
 800a372:	4630      	mov	r0, r6
 800a374:	9303      	str	r3, [sp, #12]
 800a376:	4957      	ldr	r1, [pc, #348]	; (800a4d4 <ArtNetParams::callbackFunction(char const*)+0x2c8>)
 800a378:	ab03      	add	r3, sp, #12
 800a37a:	aa04      	add	r2, sp, #16
 800a37c:	f007 fcd6 	bl	8011d2c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a380:	b9c0      	cbnz	r0, 800a3b4 <ArtNetParams::callbackFunction(char const*)+0x1a8>
 800a382:	2304      	movs	r3, #4
 800a384:	4954      	ldr	r1, [pc, #336]	; (800a4d8 <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800a386:	aa04      	add	r2, sp, #16
 800a388:	3b01      	subs	r3, #1
 800a38a:	d206      	bcs.n	800a39a <ArtNetParams::callbackFunction(char const*)+0x18e>
 800a38c:	2301      	movs	r3, #1
 800a38e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 800a392:	6863      	ldr	r3, [r4, #4]
 800a394:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a398:	e75d      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a39a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a39e:	f811 0b01 	ldrb.w	r0, [r1], #1
 800a3a2:	4285      	cmp	r5, r0
 800a3a4:	d0f0      	beq.n	800a388 <ArtNetParams::callbackFunction(char const*)+0x17c>
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	6863      	ldr	r3, [r4, #4]
 800a3aa:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
 800a3ae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a3b2:	e750      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a3b4:	2500      	movs	r5, #0
 800a3b6:	4f49      	ldr	r7, [pc, #292]	; (800a4dc <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800a3b8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800a4e0 <ArtNetParams::callbackFunction(char const*)+0x2d4>
 800a3bc:	f8df 9124 	ldr.w	r9, [pc, #292]	; 800a4e4 <ArtNetParams::callbackFunction(char const*)+0x2d8>
 800a3c0:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a4e8 <ArtNetParams::callbackFunction(char const*)+0x2dc>
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f10d 0205 	add.w	r2, sp, #5
 800a3cc:	f007 fd50 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a3d0:	b9b8      	cbnz	r0, 800a402 <ArtNetParams::callbackFunction(char const*)+0x1f6>
 800a3d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3d6:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800a3da:	6862      	ldr	r2, [r4, #4]
 800a3dc:	280f      	cmp	r0, #15
 800a3de:	fa03 f305 	lsl.w	r3, r3, r5
 800a3e2:	eb04 0105 	add.w	r1, r4, r5
 800a3e6:	d803      	bhi.n	800a3f0 <ArtNetParams::callbackFunction(char const*)+0x1e4>
 800a3e8:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	e732      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a3f0:	3501      	adds	r5, #1
 800a3f2:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800a3f6:	ea22 0203 	bic.w	r2, r2, r3
 800a3fa:	6062      	str	r2, [r4, #4]
 800a3fc:	b025      	add	sp, #148	; 0x94
 800a3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a402:	f04f 0b12 	mov.w	fp, #18
 800a406:	2303      	movs	r3, #3
 800a408:	fb0b fb05 	mul.w	fp, fp, r5
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	4630      	mov	r0, r6
 800a410:	ab03      	add	r3, sp, #12
 800a412:	aa04      	add	r2, sp, #16
 800a414:	eb08 010b 	add.w	r1, r8, fp
 800a418:	f007 fc88 	bl	8011d2c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a41c:	b9f0      	cbnz	r0, 800a45c <ArtNetParams::callbackFunction(char const*)+0x250>
 800a41e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a422:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800a426:	40ab      	lsls	r3, r5
 800a428:	f041 0120 	orr.w	r1, r1, #32
 800a42c:	296c      	cmp	r1, #108	; 0x6c
 800a42e:	6862      	ldr	r2, [r4, #4]
 800a430:	4425      	add	r5, r4
 800a432:	d10f      	bne.n	800a454 <ArtNetParams::callbackFunction(char const*)+0x248>
 800a434:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800a438:	f041 0120 	orr.w	r1, r1, #32
 800a43c:	2974      	cmp	r1, #116	; 0x74
 800a43e:	d109      	bne.n	800a454 <ArtNetParams::callbackFunction(char const*)+0x248>
 800a440:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800a444:	f041 0120 	orr.w	r1, r1, #32
 800a448:	2970      	cmp	r1, #112	; 0x70
 800a44a:	d103      	bne.n	800a454 <ArtNetParams::callbackFunction(char const*)+0x248>
 800a44c:	2101      	movs	r1, #1
 800a44e:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800a452:	e7cb      	b.n	800a3ec <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800a454:	2100      	movs	r1, #0
 800a456:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800a45a:	e7cc      	b.n	800a3f6 <ArtNetParams::callbackFunction(char const*)+0x1ea>
 800a45c:	2304      	movs	r3, #4
 800a45e:	4630      	mov	r0, r6
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	aa04      	add	r2, sp, #16
 800a464:	ab03      	add	r3, sp, #12
 800a466:	eb09 1105 	add.w	r1, r9, r5, lsl #4
 800a46a:	f007 fc5f 	bl	8011d2c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a46e:	2305      	movs	r3, #5
 800a470:	2800      	cmp	r0, #0
 800a472:	d13b      	bne.n	800a4ec <ArtNetParams::callbackFunction(char const*)+0x2e0>
 800a474:	4a18      	ldr	r2, [pc, #96]	; (800a4d8 <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800a476:	a904      	add	r1, sp, #16
 800a478:	3b01      	subs	r3, #1
 800a47a:	d108      	bne.n	800a48e <ArtNetParams::callbackFunction(char const*)+0x282>
 800a47c:	2201      	movs	r2, #1
 800a47e:	1963      	adds	r3, r4, r5
 800a480:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800a484:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a488:	6863      	ldr	r3, [r4, #4]
 800a48a:	40aa      	lsls	r2, r5
 800a48c:	e7ae      	b.n	800a3ec <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800a48e:	f811 6b01 	ldrb.w	r6, [r1], #1
 800a492:	f812 0b01 	ldrb.w	r0, [r2], #1
 800a496:	4286      	cmp	r6, r0
 800a498:	d0ee      	beq.n	800a478 <ArtNetParams::callbackFunction(char const*)+0x26c>
 800a49a:	2100      	movs	r1, #0
 800a49c:	1962      	adds	r2, r4, r5
 800a49e:	6863      	ldr	r3, [r4, #4]
 800a4a0:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 800a4a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a4a8:	40aa      	lsls	r2, r5
 800a4aa:	ea23 0302 	bic.w	r3, r3, r2
 800a4ae:	e6d2      	b.n	800a256 <ArtNetParams::callbackFunction(char const*)+0x4a>
 800a4b0:	080153c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, r9, ip, lr}
 800a4b4:	08015433 	stmdaeq	r1, {r0, r1, r4, r5, sl, ip, lr}
 800a4b8:	0801541f 	stmdaeq	r1, {r0, r1, r2, r3, r4, sl, ip, lr}
 800a4bc:	08015429 	stmdaeq	r1, {r0, r3, r5, sl, ip, lr}
 800a4c0:	080154b4 	stmdaeq	r1, {r2, r4, r5, r7, sl, ip, lr}
 800a4c4:	0801549e 	stmdaeq	r1, {r1, r2, r3, r4, r7, sl, ip, lr}
 800a4c8:	080154ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, ip, lr}
 800a4cc:	080154d2 	stmdaeq	r1, {r1, r4, r6, r7, sl, ip, lr}
 800a4d0:	08016e43 	stmdaeq	r1, {r0, r1, r6, r9, sl, fp, sp, lr}
 800a4d4:	080154d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, sl, ip, lr}
 800a4d8:	0801536e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, r9, ip, lr}
 800a4dc:	08016e4e 	stmdaeq	r1, {r1, r2, r3, r6, r9, sl, fp, sp, lr}
 800a4e0:	08016e8e 	stmdaeq	r1, {r1, r2, r3, r7, r9, sl, fp, sp, lr}
 800a4e4:	080153df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, r9, ip, lr}
 800a4e8:	08016ef1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl, fp, sp, lr}
 800a4ec:	9303      	str	r3, [sp, #12]
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	ab03      	add	r3, sp, #12
 800a4f2:	aa04      	add	r2, sp, #16
 800a4f4:	eb0a 010b 	add.w	r1, sl, fp
 800a4f8:	f007 fc18 	bl	8011d2c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a4fc:	bb60      	cbnz	r0, 800a558 <ArtNetParams::callbackFunction(char const*)+0x34c>
 800a4fe:	2201      	movs	r2, #1
 800a500:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800a504:	40aa      	lsls	r2, r5
 800a506:	ea23 0302 	bic.w	r3, r3, r2
 800a50a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800a50e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800a512:	f042 0220 	orr.w	r2, r2, #32
 800a516:	2a69      	cmp	r2, #105	; 0x69
 800a518:	d118      	bne.n	800a54c <ArtNetParams::callbackFunction(char const*)+0x340>
 800a51a:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800a51e:	f042 0220 	orr.w	r2, r2, #32
 800a522:	2a6e      	cmp	r2, #110	; 0x6e
 800a524:	d112      	bne.n	800a54c <ArtNetParams::callbackFunction(char const*)+0x340>
 800a526:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800a52a:	f042 0220 	orr.w	r2, r2, #32
 800a52e:	2a70      	cmp	r2, #112	; 0x70
 800a530:	d10c      	bne.n	800a54c <ArtNetParams::callbackFunction(char const*)+0x340>
 800a532:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800a536:	f042 0220 	orr.w	r2, r2, #32
 800a53a:	2a75      	cmp	r2, #117	; 0x75
 800a53c:	d106      	bne.n	800a54c <ArtNetParams::callbackFunction(char const*)+0x340>
 800a53e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800a542:	f042 0220 	orr.w	r2, r2, #32
 800a546:	2a74      	cmp	r2, #116	; 0x74
 800a548:	f43f af58 	beq.w	800a3fc <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800a54c:	2201      	movs	r2, #1
 800a54e:	40aa      	lsls	r2, r5
 800a550:	4313      	orrs	r3, r2
 800a552:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800a556:	e751      	b.n	800a3fc <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800a558:	2118      	movs	r1, #24
 800a55a:	4b15      	ldr	r3, [pc, #84]	; (800a5b0 <ArtNetParams::callbackFunction(char const*)+0x3a4>)
 800a55c:	4630      	mov	r0, r6
 800a55e:	fb01 3105 	mla	r1, r1, r5, r3
 800a562:	aa02      	add	r2, sp, #8
 800a564:	f007 fc25 	bl	8011db2 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800a568:	b968      	cbnz	r0, 800a586 <ArtNetParams::callbackFunction(char const*)+0x37a>
 800a56a:	2201      	movs	r2, #1
 800a56c:	9902      	ldr	r1, [sp, #8]
 800a56e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a572:	40aa      	lsls	r2, r5
 800a574:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800a578:	b292      	uxth	r2, r2
 800a57a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a57e:	b1a1      	cbz	r1, 800a5aa <ArtNetParams::callbackFunction(char const*)+0x39e>
 800a580:	4313      	orrs	r3, r2
 800a582:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800a586:	3501      	adds	r5, #1
 800a588:	2d04      	cmp	r5, #4
 800a58a:	f107 0710 	add.w	r7, r7, #16
 800a58e:	f47f af19 	bne.w	800a3c4 <ArtNetParams::callbackFunction(char const*)+0x1b8>
 800a592:	4630      	mov	r0, r6
 800a594:	4907      	ldr	r1, [pc, #28]	; (800a5b4 <ArtNetParams::callbackFunction(char const*)+0x3a8>)
 800a596:	f10d 0205 	add.w	r2, sp, #5
 800a59a:	f007 fc69 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f47f af2c 	bne.w	800a3fc <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800a5a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a5a8:	e63d      	b.n	800a226 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800a5aa:	ea23 0302 	bic.w	r3, r3, r2
 800a5ae:	e7e8      	b.n	800a582 <ArtNetParams::callbackFunction(char const*)+0x376>
 800a5b0:	0801543e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, ip, lr}
 800a5b4:	080153d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, ip, lr}

0800a5b8 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800a5b8:	f7ff be28 	b.w	800a20c <ArtNetParams::callbackFunction(char const*)>

0800a5bc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800a5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	4615      	mov	r5, r2
 800a5c4:	461e      	mov	r6, r3
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	3004      	adds	r0, #4
 800a5ca:	2900      	cmp	r1, #0
 800a5cc:	f000 814b 	beq.w	800a866 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2aa>
 800a5d0:	2287      	movs	r2, #135	; 0x87
 800a5d2:	f008 f98e 	bl	80128f2 <memmove>
 800a5d6:	4633      	mov	r3, r6
 800a5d8:	462a      	mov	r2, r5
 800a5da:	49a6      	ldr	r1, [pc, #664]	; (800a874 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800a5dc:	a803      	add	r0, sp, #12
 800a5de:	f007 fa9d 	bl	8011b1c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800a5e2:	2500      	movs	r5, #0
 800a5e4:	4ea4      	ldr	r6, [pc, #656]	; (800a878 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800a5e6:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800a87c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>
 800a5ea:	4fa5      	ldr	r7, [pc, #660]	; (800a880 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800a5ec:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800a5f0:	4631      	mov	r1, r6
 800a5f2:	412b      	asrs	r3, r5
 800a5f4:	f013 0f01 	tst.w	r3, #1
 800a5f8:	ea6f 0303 	mvn.w	r3, r3
 800a5fc:	bf0c      	ite	eq
 800a5fe:	4642      	moveq	r2, r8
 800a600:	463a      	movne	r2, r7
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	a803      	add	r0, sp, #12
 800a608:	3501      	adds	r5, #1
 800a60a:	f7ff fd47 	bl	800a09c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a60e:	2d04      	cmp	r5, #4
 800a610:	f106 0612 	add.w	r6, r6, #18
 800a614:	d1ea      	bne.n	800a5ec <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30>
 800a616:	6863      	ldr	r3, [r4, #4]
 800a618:	7a22      	ldrb	r2, [r4, #8]
 800a61a:	499a      	ldr	r1, [pc, #616]	; (800a884 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800a61c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a620:	a803      	add	r0, sp, #12
 800a622:	f7ff fd13 	bl	800a04c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a626:	6863      	ldr	r3, [r4, #4]
 800a628:	7a62      	ldrb	r2, [r4, #9]
 800a62a:	4997      	ldr	r1, [pc, #604]	; (800a888 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800a62c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a630:	a803      	add	r0, sp, #12
 800a632:	f7ff fd0b 	bl	800a04c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a636:	4995      	ldr	r1, [pc, #596]	; (800a88c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800a638:	a803      	add	r0, sp, #12
 800a63a:	f007 faf5 	bl	8011c28 <PropertiesBuilder::AddComment(char const*)>
 800a63e:	2500      	movs	r5, #0
 800a640:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800a644:	4e92      	ldr	r6, [pc, #584]	; (800a890 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800a646:	f104 076b 	add.w	r7, r4, #107	; 0x6b
 800a64a:	6862      	ldr	r2, [r4, #4]
 800a64c:	fa08 f305 	lsl.w	r3, r8, r5
 800a650:	4393      	bics	r3, r2
 800a652:	bf0c      	ite	eq
 800a654:	2301      	moveq	r3, #1
 800a656:	2300      	movne	r3, #0
 800a658:	4631      	mov	r1, r6
 800a65a:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a65e:	a803      	add	r0, sp, #12
 800a660:	3501      	adds	r5, #1
 800a662:	f7ff fcf3 	bl	800a04c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a666:	2d04      	cmp	r5, #4
 800a668:	f106 0610 	add.w	r6, r6, #16
 800a66c:	d1ed      	bne.n	800a64a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800a66e:	4989      	ldr	r1, [pc, #548]	; (800a894 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800a670:	a803      	add	r0, sp, #12
 800a672:	f007 fad9 	bl	8011c28 <PropertiesBuilder::AddComment(char const*)>
 800a676:	6863      	ldr	r3, [r4, #4]
 800a678:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800a67c:	f013 0501 	ands.w	r5, r3, #1
 800a680:	d108      	bne.n	800a694 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xd8>
 800a682:	4b85      	ldr	r3, [pc, #532]	; (800a898 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800a684:	223f      	movs	r2, #63	; 0x3f
 800a686:	6819      	ldr	r1, [r3, #0]
 800a688:	4630      	mov	r0, r6
 800a68a:	3154      	adds	r1, #84	; 0x54
 800a68c:	f7ff fd56 	bl	800a13c <strncpy.isra.0>
 800a690:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800a694:	6863      	ldr	r3, [r4, #4]
 800a696:	4632      	mov	r2, r6
 800a698:	f003 0301 	and.w	r3, r3, #1
 800a69c:	497f      	ldr	r1, [pc, #508]	; (800a89c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 800a69e:	a803      	add	r0, sp, #12
 800a6a0:	f7ff fcfc 	bl	800a09c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a6a4:	6863      	ldr	r3, [r4, #4]
 800a6a6:	f104 0610 	add.w	r6, r4, #16
 800a6aa:	f013 0502 	ands.w	r5, r3, #2
 800a6ae:	d108      	bne.n	800a6c2 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 800a6b0:	4b79      	ldr	r3, [pc, #484]	; (800a898 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800a6b2:	2211      	movs	r2, #17
 800a6b4:	6819      	ldr	r1, [r3, #0]
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	3142      	adds	r1, #66	; 0x42
 800a6ba:	f7ff fd3f 	bl	800a13c <strncpy.isra.0>
 800a6be:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800a6c2:	6863      	ldr	r3, [r4, #4]
 800a6c4:	4632      	mov	r2, r6
 800a6c6:	4976      	ldr	r1, [pc, #472]	; (800a8a0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 800a6c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a6cc:	a803      	add	r0, sp, #12
 800a6ce:	f7ff fce5 	bl	800a09c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a6d2:	2104      	movs	r1, #4
 800a6d4:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800a6d8:	6863      	ldr	r3, [r4, #4]
 800a6da:	ba52      	rev16	r2, r2
 800a6dc:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800a6e0:	b292      	uxth	r2, r2
 800a6e2:	9100      	str	r1, [sp, #0]
 800a6e4:	a803      	add	r0, sp, #12
 800a6e6:	496f      	ldr	r1, [pc, #444]	; (800a8a4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e8>)
 800a6e8:	f007 fab8 	bl	8011c5c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>
 800a6ec:	496e      	ldr	r1, [pc, #440]	; (800a8a8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ec>)
 800a6ee:	a803      	add	r0, sp, #12
 800a6f0:	f007 fa9a 	bl	8011c28 <PropertiesBuilder::AddComment(char const*)>
 800a6f4:	6862      	ldr	r2, [r4, #4]
 800a6f6:	496d      	ldr	r1, [pc, #436]	; (800a8ac <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f0>)
 800a6f8:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800a6fc:	a803      	add	r0, sp, #12
 800a6fe:	f7ff fcf5 	bl	800a0ec <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a702:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800a8b0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f4>
 800a706:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800a70a:	6863      	ldr	r3, [r4, #4]
 800a70c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8b4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f8>
 800a710:	4969      	ldr	r1, [pc, #420]	; (800a8b8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2fc>)
 800a712:	2a00      	cmp	r2, #0
 800a714:	bf0c      	ite	eq
 800a716:	464a      	moveq	r2, r9
 800a718:	4642      	movne	r2, r8
 800a71a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800a71e:	a803      	add	r0, sp, #12
 800a720:	f7ff fcbc 	bl	800a09c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a724:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 800a728:	6863      	ldr	r3, [r4, #4]
 800a72a:	4964      	ldr	r1, [pc, #400]	; (800a8bc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800a72c:	4a64      	ldr	r2, [pc, #400]	; (800a8c0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800a72e:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800a732:	2800      	cmp	r0, #0
 800a734:	bf18      	it	ne
 800a736:	460a      	movne	r2, r1
 800a738:	4962      	ldr	r1, [pc, #392]	; (800a8c4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x308>)
 800a73a:	a803      	add	r0, sp, #12
 800a73c:	f7ff fcae 	bl	800a09c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a740:	2500      	movs	r5, #0
 800a742:	4e61      	ldr	r6, [pc, #388]	; (800a8c8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30c>)
 800a744:	f8df a184 	ldr.w	sl, [pc, #388]	; 800a8cc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x310>
 800a748:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800a74c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a750:	6861      	ldr	r1, [r4, #4]
 800a752:	40ab      	lsls	r3, r5
 800a754:	438b      	bics	r3, r1
 800a756:	f04f 0112 	mov.w	r1, #18
 800a75a:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a75e:	bf0c      	ite	eq
 800a760:	2301      	moveq	r3, #1
 800a762:	2300      	movne	r3, #0
 800a764:	fb01 a105 	mla	r1, r1, r5, sl
 800a768:	2a00      	cmp	r2, #0
 800a76a:	bf0c      	ite	eq
 800a76c:	464a      	moveq	r2, r9
 800a76e:	4642      	movne	r2, r8
 800a770:	a803      	add	r0, sp, #12
 800a772:	f7ff fc93 	bl	800a09c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a776:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a77a:	6862      	ldr	r2, [r4, #4]
 800a77c:	40ab      	lsls	r3, r5
 800a77e:	4393      	bics	r3, r2
 800a780:	7938      	ldrb	r0, [r7, #4]
 800a782:	494e      	ldr	r1, [pc, #312]	; (800a8bc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800a784:	4a4e      	ldr	r2, [pc, #312]	; (800a8c0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800a786:	bf0c      	ite	eq
 800a788:	2301      	moveq	r3, #1
 800a78a:	2300      	movne	r3, #0
 800a78c:	3501      	adds	r5, #1
 800a78e:	2800      	cmp	r0, #0
 800a790:	bf18      	it	ne
 800a792:	460a      	movne	r2, r1
 800a794:	4631      	mov	r1, r6
 800a796:	a803      	add	r0, sp, #12
 800a798:	f7ff fc80 	bl	800a09c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a79c:	2d04      	cmp	r5, #4
 800a79e:	f106 0610 	add.w	r6, r6, #16
 800a7a2:	d1d3      	bne.n	800a74c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x190>
 800a7a4:	6863      	ldr	r3, [r4, #4]
 800a7a6:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 800a7aa:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800a7ae:	4948      	ldr	r1, [pc, #288]	; (800a8d0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x314>)
 800a7b0:	a803      	add	r0, sp, #12
 800a7b2:	f7ff fc4b 	bl	800a04c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a7b6:	6862      	ldr	r2, [r4, #4]
 800a7b8:	4946      	ldr	r1, [pc, #280]	; (800a8d4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x318>)
 800a7ba:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800a7be:	a803      	add	r0, sp, #12
 800a7c0:	f7ff fc94 	bl	800a0ec <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a7c4:	4944      	ldr	r1, [pc, #272]	; (800a8d8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x31c>)
 800a7c6:	a803      	add	r0, sp, #12
 800a7c8:	f007 fa2e 	bl	8011c28 <PropertiesBuilder::AddComment(char const*)>
 800a7cc:	2500      	movs	r5, #0
 800a7ce:	2601      	movs	r6, #1
 800a7d0:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800a8dc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x320>
 800a7d4:	4f30      	ldr	r7, [pc, #192]	; (800a898 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800a7d6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800a7da:	fa06 f305 	lsl.w	r3, r6, r5
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	401a      	ands	r2, r3
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	bf0c      	ite	eq
 800a7e6:	2301      	moveq	r3, #1
 800a7e8:	2300      	movne	r3, #0
 800a7ea:	f105 021c 	add.w	r2, r5, #28
 800a7ee:	d008      	beq.n	800a802 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800a7f6:	f8d1 077c 	ldr.w	r0, [r1, #1916]	; 0x77c
 800a7fa:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800a7fe:	f8c1 000b 	str.w	r0, [r1, #11]
 800a802:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a806:	4641      	mov	r1, r8
 800a808:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800a80c:	a803      	add	r0, sp, #12
 800a80e:	3501      	adds	r5, #1
 800a810:	f007 f9c6 	bl	8011ba0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800a814:	2d04      	cmp	r5, #4
 800a816:	f108 0818 	add.w	r8, r8, #24
 800a81a:	d1dc      	bne.n	800a7d6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x21a>
 800a81c:	4930      	ldr	r1, [pc, #192]	; (800a8e0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x324>)
 800a81e:	a803      	add	r0, sp, #12
 800a820:	f007 fa02 	bl	8011c28 <PropertiesBuilder::AddComment(char const*)>
 800a824:	6862      	ldr	r2, [r4, #4]
 800a826:	492f      	ldr	r1, [pc, #188]	; (800a8e4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x328>)
 800a828:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 800a82c:	a803      	add	r0, sp, #12
 800a82e:	f7ff fc5d 	bl	800a0ec <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a832:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a836:	b17b      	cbz	r3, 800a858 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>
 800a838:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a83c:	9b03      	ldr	r3, [sp, #12]
 800a83e:	4413      	add	r3, r2
 800a840:	227d      	movs	r2, #125	; 0x7d
 800a842:	f803 2c01 	strb.w	r2, [r3, #-1]
 800a846:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a84a:	9903      	ldr	r1, [sp, #12]
 800a84c:	54ca      	strb	r2, [r1, r3]
 800a84e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a852:	3301      	adds	r3, #1
 800a854:	f8ad 3012 	strh.w	r3, [sp, #18]
 800a858:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a85c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a85e:	601a      	str	r2, [r3, #0]
 800a860:	b006      	add	sp, #24
 800a862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a866:	6823      	ldr	r3, [r4, #0]
 800a868:	4601      	mov	r1, r0
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	4618      	mov	r0, r3
 800a86e:	68d2      	ldr	r2, [r2, #12]
 800a870:	4790      	blx	r2
 800a872:	e6b0      	b.n	800a5d6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800a874:	080154e2 	stmdaeq	r1, {r1, r5, r6, r7, sl, ip, lr}
 800a878:	08016ef1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl, fp, sp, lr}
 800a87c:	08015373 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, r9, ip, lr}
 800a880:	08015379 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, ip, lr}
 800a884:	080154ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sl, ip, lr}
 800a888:	080154d2 	stmdaeq	r1, {r1, r4, r6, r7, sl, ip, lr}
 800a88c:	0801538f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, r9, ip, lr}
 800a890:	08016e4e 	stmdaeq	r1, {r1, r2, r3, r6, r9, sl, fp, sp, lr}
 800a894:	080153a8 	stmdaeq	r1, {r3, r5, r7, r8, r9, ip, lr}
 800a898:	20000704 	andcs	r0, r0, r4, lsl #14
 800a89c:	0801541f 	stmdaeq	r1, {r0, r1, r2, r3, r4, sl, ip, lr}
 800a8a0:	08015433 	stmdaeq	r1, {r0, r1, r4, r5, sl, ip, lr}
 800a8a4:	08015429 	stmdaeq	r1, {r0, r3, r5, sl, ip, lr}
 800a8a8:	080153ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, ip, lr}
 800a8ac:	080153c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, r9, ip, lr}
 800a8b0:	08015384 	stmdaeq	r1, {r2, r7, r8, r9, ip, lr}
 800a8b4:	08015380 	stmdaeq	r1, {r7, r8, r9, ip, lr}
 800a8b8:	08016e43 	stmdaeq	r1, {r0, r1, r6, r9, sl, fp, sp, lr}
 800a8bc:	0801536e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, r9, ip, lr}
 800a8c0:	08015388 	stmdaeq	r1, {r3, r7, r8, r9, ip, lr}
 800a8c4:	080154d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, sl, ip, lr}
 800a8c8:	080153df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, r9, ip, lr}
 800a8cc:	08016e8e 	stmdaeq	r1, {r1, r2, r3, r7, r9, sl, fp, sp, lr}
 800a8d0:	080154b4 	stmdaeq	r1, {r2, r4, r5, r7, sl, ip, lr}
 800a8d4:	0801549e 	stmdaeq	r1, {r1, r2, r3, r4, r7, sl, ip, lr}
 800a8d8:	08015048 	stmdaeq	r1, {r3, r6, ip, lr}
 800a8dc:	0801543e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, ip, lr}
 800a8e0:	080153bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, r9, ip, lr}
 800a8e4:	080153d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, ip, lr}

0800a8e8 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800a8e8:	b513      	push	{r0, r1, r4, lr}
 800a8ea:	6804      	ldr	r4, [r0, #0]
 800a8ec:	b914      	cbnz	r4, 800a8f4 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800a8ee:	601c      	str	r4, [r3, #0]
 800a8f0:	b002      	add	sp, #8
 800a8f2:	bd10      	pop	{r4, pc}
 800a8f4:	9300      	str	r3, [sp, #0]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	460a      	mov	r2, r1
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	f7ff fe5e 	bl	800a5bc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800a900:	e7f6      	b.n	800a8f0 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800a902 <ArtNetParams::Set(ArtNetNode*)>:
 800a902:	6843      	ldr	r3, [r0, #4]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d07b      	beq.n	800aa00 <ArtNetParams::Set(ArtNetNode*)+0xfe>
 800a908:	079a      	lsls	r2, r3, #30
 800a90a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a90e:	4604      	mov	r4, r0
 800a910:	460d      	mov	r5, r1
 800a912:	d504      	bpl.n	800a91e <ArtNetParams::Set(ArtNetNode*)+0x1c>
 800a914:	f100 0110 	add.w	r1, r0, #16
 800a918:	4628      	mov	r0, r5
 800a91a:	f7fd ff85 	bl	8008828 <ArtNetNode::SetShortName(char const*)>
 800a91e:	6863      	ldr	r3, [r4, #4]
 800a920:	07db      	lsls	r3, r3, #31
 800a922:	d504      	bpl.n	800a92e <ArtNetParams::Set(ArtNetNode*)+0x2c>
 800a924:	4628      	mov	r0, r5
 800a926:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800a92a:	f7fd ffa5 	bl	8008878 <ArtNetNode::SetLongName(char const*)>
 800a92e:	6863      	ldr	r3, [r4, #4]
 800a930:	075f      	lsls	r7, r3, #29
 800a932:	d504      	bpl.n	800a93e <ArtNetParams::Set(ArtNetNode*)+0x3c>
 800a934:	2200      	movs	r2, #0
 800a936:	4628      	mov	r0, r5
 800a938:	7a21      	ldrb	r1, [r4, #8]
 800a93a:	f7fe fad4 	bl	8008ee6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800a93e:	6863      	ldr	r3, [r4, #4]
 800a940:	071e      	lsls	r6, r3, #28
 800a942:	d504      	bpl.n	800a94e <ArtNetParams::Set(ArtNetNode*)+0x4c>
 800a944:	2200      	movs	r2, #0
 800a946:	4628      	mov	r0, r5
 800a948:	7a61      	ldrb	r1, [r4, #9]
 800a94a:	f7fe fa9e 	bl	8008e8a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800a94e:	6863      	ldr	r3, [r4, #4]
 800a950:	0558      	lsls	r0, r3, #21
 800a952:	d504      	bpl.n	800a95e <ArtNetParams::Set(ArtNetNode*)+0x5c>
 800a954:	4628      	mov	r0, r5
 800a956:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800a95a:	f7fe f857 	bl	8008a0c <ArtNetNode::SetOemValue(unsigned char const*)>
 800a95e:	6863      	ldr	r3, [r4, #4]
 800a960:	2600      	movs	r6, #0
 800a962:	0519      	lsls	r1, r3, #20
 800a964:	bf44      	itt	mi
 800a966:	f44f 727a 	movmi.w	r2, #1000	; 0x3e8
 800a96a:	f894 3066 	ldrbmi.w	r3, [r4, #102]	; 0x66
 800a96e:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 800a972:	bf44      	itt	mi
 800a974:	4353      	mulmi	r3, r2
 800a976:	f8c5 36cc 	strmi.w	r3, [r5, #1740]	; 0x6cc
 800a97a:	6863      	ldr	r3, [r4, #4]
 800a97c:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800a980:	04da      	lsls	r2, r3, #19
 800a982:	bf48      	it	mi
 800a984:	2301      	movmi	r3, #1
 800a986:	f04f 0a01 	mov.w	sl, #1
 800a98a:	bf48      	it	mi
 800a98c:	f885 36dc 	strbmi.w	r3, [r5, #1756]	; 0x6dc
 800a990:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800a994:	6863      	ldr	r3, [r4, #4]
 800a996:	fa08 f206 	lsl.w	r2, r8, r6
 800a99a:	439a      	bics	r2, r3
 800a99c:	bf0c      	ite	eq
 800a99e:	783a      	ldrbeq	r2, [r7, #0]
 800a9a0:	f894 206f 	ldrbne.w	r2, [r4, #111]	; 0x6f
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f7fe fafc 	bl	8008fa4 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800a9ac:	6863      	ldr	r3, [r4, #4]
 800a9ae:	fa09 f206 	lsl.w	r2, r9, r6
 800a9b2:	439a      	bics	r2, r3
 800a9b4:	bf0c      	ite	eq
 800a9b6:	797a      	ldrbeq	r2, [r7, #5]
 800a9b8:	f894 2074 	ldrbne.w	r2, [r4, #116]	; 0x74
 800a9bc:	4631      	mov	r1, r6
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f7fe fabf 	bl	8008f42 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800a9c4:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800a9c8:	fa0a f306 	lsl.w	r3, sl, r6
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	4393      	bics	r3, r2
 800a9d0:	d109      	bne.n	800a9e6 <ArtNetParams::Set(ArtNetNode*)+0xe4>
 800a9d2:	f106 031c 	add.w	r3, r6, #28
 800a9d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9da:	4631      	mov	r1, r6
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800a9e2:	f7fe fdf9 	bl	80095d8 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800a9e6:	3601      	adds	r6, #1
 800a9e8:	2e04      	cmp	r6, #4
 800a9ea:	f107 0701 	add.w	r7, r7, #1
 800a9ee:	d1d1      	bne.n	800a994 <ArtNetParams::Set(ArtNetNode*)+0x92>
 800a9f0:	6863      	ldr	r3, [r4, #4]
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	bf44      	itt	mi
 800a9f6:	2301      	movmi	r3, #1
 800a9f8:	f885 309e 	strbmi.w	r3, [r5, #158]	; 0x9e
 800a9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa00:	4770      	bx	lr

0800aa02 <ArtNetParams::Dump()>:
 800aa02:	4770      	bx	lr

0800aa04 <ArtNetNode::HandleTrigger()>:
 800aa04:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800aa08:	4601      	mov	r1, r0
 800aa0a:	2bff      	cmp	r3, #255	; 0xff
 800aa0c:	d103      	bne.n	800aa16 <ArtNetNode::HandleTrigger()+0x12>
 800aa0e:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
 800aa12:	2aff      	cmp	r2, #255	; 0xff
 800aa14:	d009      	beq.n	800aa2a <ArtNetNode::HandleTrigger()+0x26>
 800aa16:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d10a      	bne.n	800aa34 <ArtNetNode::HandleTrigger()+0x30>
 800aa1e:	f891 20af 	ldrb.w	r2, [r1, #175]	; 0xaf
 800aa22:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d104      	bne.n	800aa34 <ArtNetNode::HandleTrigger()+0x30>
 800aa2a:	6988      	ldr	r0, [r1, #24]
 800aa2c:	31b0      	adds	r1, #176	; 0xb0
 800aa2e:	6803      	ldr	r3, [r0, #0]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	4718      	bx	r3
 800aa34:	4770      	bx	lr
	...

0800aa38 <e131::universe_to_multicast_ip(unsigned short)>:
 800aa38:	b513      	push	{r0, r1, r4, lr}
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	a901      	add	r1, sp, #4
 800aa3e:	4806      	ldr	r0, [pc, #24]	; (800aa58 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800aa40:	f007 fe9c 	bl	801277c <inet_aton>
 800aa44:	9801      	ldr	r0, [sp, #4]
 800aa46:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800aa4a:	0224      	lsls	r4, r4, #8
 800aa4c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800aa50:	4320      	orrs	r0, r4
 800aa52:	b002      	add	sp, #8
 800aa54:	bd10      	pop	{r4, pc}
 800aa56:	bf00      	nop
 800aa58:	080154f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, sl, ip, lr}

0800aa5c <memset.constprop.0.isra.0>:
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	4401      	add	r1, r0
 800aa60:	4288      	cmp	r0, r1
 800aa62:	d100      	bne.n	800aa66 <memset.constprop.0.isra.0+0xa>
 800aa64:	4770      	bx	lr
 800aa66:	f800 3b01 	strb.w	r3, [r0], #1
 800aa6a:	e7f9      	b.n	800aa60 <memset.constprop.0.isra.0+0x4>

0800aa6c <memcpy.isra.0>:
 800aa6c:	3801      	subs	r0, #1
 800aa6e:	440a      	add	r2, r1
 800aa70:	4291      	cmp	r1, r2
 800aa72:	d100      	bne.n	800aa76 <memcpy.isra.0+0xa>
 800aa74:	4770      	bx	lr
 800aa76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa7a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800aa7e:	e7f7      	b.n	800aa70 <memcpy.isra.0+0x4>

0800aa80 <E131Bridge::Start()>:
 800aa80:	6943      	ldr	r3, [r0, #20]
 800aa82:	b513      	push	{r0, r1, r4, lr}
 800aa84:	4604      	mov	r4, r0
 800aa86:	b31b      	cbz	r3, 800aad0 <E131Bridge::Start()+0x50>
 800aa88:	6983      	ldr	r3, [r0, #24]
 800aa8a:	b9cb      	cbnz	r3, 800aac0 <E131Bridge::Start()+0x40>
 800aa8c:	a901      	add	r1, sp, #4
 800aa8e:	4814      	ldr	r0, [pc, #80]	; (800aae0 <E131Bridge::Start()+0x60>)
 800aa90:	f007 fe74 	bl	801277c <inet_aton>
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	f240 207e 	movw	r0, #638	; 0x27e
 800aa9a:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800aa9e:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800aaa2:	6223      	str	r3, [r4, #32]
 800aaa4:	f007 fe66 	bl	8012774 <operator new(unsigned int)>
 800aaa8:	61a0      	str	r0, [r4, #24]
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f000 fd40 	bl	800b530 <E131Bridge::FillDataPacket()>
 800aab0:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800aab4:	f007 fe5e 	bl	8012774 <operator new(unsigned int)>
 800aab8:	61e0      	str	r0, [r4, #28]
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 fc96 	bl	800b3ec <E131Bridge::FillDiscoveryPacket()>
 800aac0:	f894 3556 	ldrb.w	r3, [r4, #1366]	; 0x556
 800aac4:	b123      	cbz	r3, 800aad0 <E131Bridge::Start()+0x50>
 800aac6:	6960      	ldr	r0, [r4, #20]
 800aac8:	2100      	movs	r1, #0
 800aaca:	6803      	ldr	r3, [r0, #0]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	4798      	blx	r3
 800aad0:	2102      	movs	r1, #2
 800aad2:	4b04      	ldr	r3, [pc, #16]	; (800aae4 <E131Bridge::Start()+0x64>)
 800aad4:	6818      	ldr	r0, [r3, #0]
 800aad6:	b002      	add	sp, #8
 800aad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aadc:	f007 bd62 	b.w	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 800aae0:	080154f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, sl, ip, lr}
 800aae4:	20009ce4 	andcs	r9, r0, r4, ror #25

0800aae8 <E131Bridge::Stop()>:
 800aae8:	2301      	movs	r3, #1
 800aaea:	b510      	push	{r4, lr}
 800aaec:	4604      	mov	r4, r0
 800aaee:	f880 34f4 	strb.w	r3, [r0, #1268]	; 0x4f4
 800aaf2:	6840      	ldr	r0, [r0, #4]
 800aaf4:	b118      	cbz	r0, 800aafe <E131Bridge::Stop()+0x16>
 800aaf6:	6803      	ldr	r3, [r0, #0]
 800aaf8:	2100      	movs	r1, #0
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	4798      	blx	r3
 800aafe:	f7fe fbcb 	bl	8009298 <lightset::Data::Get()>
 800ab02:	2100      	movs	r1, #0
 800ab04:	f8c0 1600 	str.w	r1, [r0, #1536]	; 0x600
 800ab08:	6960      	ldr	r0, [r4, #20]
 800ab0a:	f884 1550 	strb.w	r1, [r4, #1360]	; 0x550
 800ab0e:	b930      	cbnz	r0, 800ab1e <E131Bridge::Stop()+0x36>
 800ab10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab14:	4b06      	ldr	r3, [pc, #24]	; (800ab30 <E131Bridge::Stop()+0x48>)
 800ab16:	2100      	movs	r1, #0
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	f007 bd43 	b.w	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 800ab1e:	f894 3556 	ldrb.w	r3, [r4, #1366]	; 0x556
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d0f4      	beq.n	800ab10 <E131Bridge::Stop()+0x28>
 800ab26:	6803      	ldr	r3, [r0, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	4798      	blx	r3
 800ab2c:	e7f0      	b.n	800ab10 <E131Bridge::Stop()+0x28>
 800ab2e:	bf00      	nop
 800ab30:	20009ce4 	andcs	r9, r0, r4, ror #25

0800ab34 <E131Bridge::SetSourceName(char const*)>:
 800ab34:	233f      	movs	r3, #63	; 0x3f
 800ab36:	b510      	push	{r4, lr}
 800ab38:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800ab3c:	3901      	subs	r1, #1
 800ab3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab42:	b92c      	cbnz	r4, 800ab50 <E131Bridge::SetSourceName(char const*)+0x1c>
 800ab44:	4413      	add	r3, r2
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d006      	beq.n	800ab58 <E131Bridge::SetSourceName(char const*)+0x24>
 800ab4a:	f802 4b01 	strb.w	r4, [r2], #1
 800ab4e:	e7fa      	b.n	800ab46 <E131Bridge::SetSourceName(char const*)+0x12>
 800ab50:	3b01      	subs	r3, #1
 800ab52:	f802 4b01 	strb.w	r4, [r2], #1
 800ab56:	d1f2      	bne.n	800ab3e <E131Bridge::SetSourceName(char const*)+0xa>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
 800ab5e:	bd10      	pop	{r4, pc}

0800ab60 <E131Bridge::E131Bridge()>:
 800ab60:	2300      	movs	r3, #0
 800ab62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab66:	b530      	push	{r4, r5, lr}
 800ab68:	e9c0 2300 	strd	r2, r3, [r0]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	4604      	mov	r4, r0
 800ab70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab74:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800ab78:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800ab7c:	6743      	str	r3, [r0, #116]	; 0x74
 800ab7e:	4b1a      	ldr	r3, [pc, #104]	; (800abe8 <E131Bridge::E131Bridge()+0x88>)
 800ab80:	b093      	sub	sp, #76	; 0x4c
 800ab82:	6018      	str	r0, [r3, #0]
 800ab84:	7202      	strb	r2, [r0, #8]
 800ab86:	2144      	movs	r1, #68	; 0x44
 800ab88:	f500 60a2 	add.w	r0, r0, #1296	; 0x510
 800ab8c:	f7ff ff66 	bl	800aa5c <memset.constprop.0.isra.0>
 800ab90:	f204 5054 	addw	r0, r4, #1364	; 0x554
 800ab94:	210c      	movs	r1, #12
 800ab96:	f7ff ff61 	bl	800aa5c <memset.constprop.0.isra.0>
 800ab9a:	2364      	movs	r3, #100	; 0x64
 800ab9c:	4d13      	ldr	r5, [pc, #76]	; (800abec <E131Bridge::E131Bridge()+0x8c>)
 800ab9e:	f884 355d 	strb.w	r3, [r4, #1373]	; 0x55d
 800aba2:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800aba6:	211c      	movs	r1, #28
 800aba8:	f7ff ff58 	bl	800aa5c <memset.constprop.0.isra.0>
 800abac:	682b      	ldr	r3, [r5, #0]
 800abae:	f884 250c 	strb.w	r2, [r4, #1292]	; 0x50c
 800abb2:	4a0f      	ldr	r2, [pc, #60]	; (800abf0 <E131Bridge::E131Bridge()+0x90>)
 800abb4:	331c      	adds	r3, #28
 800abb6:	9200      	str	r2, [sp, #0]
 800abb8:	2140      	movs	r1, #64	; 0x40
 800abba:	4a0e      	ldr	r2, [pc, #56]	; (800abf4 <E131Bridge::E131Bridge()+0x94>)
 800abbc:	a802      	add	r0, sp, #8
 800abbe:	f008 f8f1 	bl	8012da4 <snprintf>
 800abc2:	4620      	mov	r0, r4
 800abc4:	a902      	add	r1, sp, #8
 800abc6:	f7ff ffb5 	bl	800ab34 <E131Bridge::SetSourceName(char const*)>
 800abca:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800abce:	6828      	ldr	r0, [r5, #0]
 800abd0:	f005 f9fe 	bl	800ffd0 <Network::Begin(unsigned short)>
 800abd4:	4621      	mov	r1, r4
 800abd6:	4b08      	ldr	r3, [pc, #32]	; (800abf8 <E131Bridge::E131Bridge()+0x98>)
 800abd8:	f841 0b24 	str.w	r0, [r1], #36
 800abdc:	6818      	ldr	r0, [r3, #0]
 800abde:	f007 fd69 	bl	80126b4 <Hardware::GetUuid(unsigned char*)>
 800abe2:	4620      	mov	r0, r4
 800abe4:	b013      	add	sp, #76	; 0x4c
 800abe6:	bd30      	pop	{r4, r5, pc}
 800abe8:	20000714 	andcs	r0, r0, r4, lsl r7
 800abec:	200095c0 	andcs	r9, r0, r0, asr #11
 800abf0:	080151fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, ip, lr}
 800abf4:	080154ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, sl, ip, lr}
 800abf8:	20009ce8 	andcs	r9, r0, r8, ror #25

0800abfc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800abfc:	b538      	push	{r3, r4, r5, lr}
 800abfe:	4603      	mov	r3, r0
 800ac00:	4610      	mov	r0, r2
 800ac02:	b119      	cbz	r1, 800ac0c <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x10>
 800ac04:	f8b3 2510 	ldrh.w	r2, [r3, #1296]	; 0x510
 800ac08:	4282      	cmp	r2, r0
 800ac0a:	d00b      	beq.n	800ac24 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x28>
 800ac0c:	681d      	ldr	r5, [r3, #0]
 800ac0e:	4b06      	ldr	r3, [pc, #24]	; (800ac28 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x2c>)
 800ac10:	681c      	ldr	r4, [r3, #0]
 800ac12:	f7ff ff11 	bl	800aa38 <e131::universe_to_multicast_ip(unsigned short)>
 800ac16:	4629      	mov	r1, r5
 800ac18:	4602      	mov	r2, r0
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac20:	f005 b9ea 	b.w	800fff8 <Network::LeaveGroup(int, unsigned int)>
 800ac24:	bd38      	pop	{r3, r4, r5, pc}
 800ac26:	bf00      	nop
 800ac28:	200095c0 	andcs	r9, r0, r0, asr #11

0800ac2c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	4604      	mov	r4, r0
 800ac30:	461d      	mov	r5, r3
 800ac32:	b1c1      	cbz	r1, 800ac66 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800ac34:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800ac38:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800ac3c:	b12a      	cbz	r2, 800ac4a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800ac3e:	42aa      	cmp	r2, r5
 800ac40:	d017      	beq.n	800ac72 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800ac42:	2101      	movs	r1, #1
 800ac44:	4620      	mov	r0, r4
 800ac46:	f7ff ffd9 	bl	800abfc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800ac4a:	4b0a      	ldr	r3, [pc, #40]	; (800ac74 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>)
 800ac4c:	8035      	strh	r5, [r6, #0]
 800ac4e:	4628      	mov	r0, r5
 800ac50:	6826      	ldr	r6, [r4, #0]
 800ac52:	681c      	ldr	r4, [r3, #0]
 800ac54:	f7ff fef0 	bl	800aa38 <e131::universe_to_multicast_ip(unsigned short)>
 800ac58:	4631      	mov	r1, r6
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac62:	f005 b9c6 	b.w	800fff2 <Network::JoinGroup(int, unsigned int)>
 800ac66:	b122      	cbz	r2, 800ac72 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800ac68:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800ac6c:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800ac70:	e7e4      	b.n	800ac3c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800ac72:	bd70      	pop	{r4, r5, r6, pc}
 800ac74:	200095c0 	andcs	r9, r0, r0, asr #11

0800ac78 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800ac78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	460d      	mov	r5, r1
 800ac80:	461e      	mov	r6, r3
 800ac82:	b9ca      	cbnz	r2, 800acb8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x40>
 800ac84:	bbb1      	cbnz	r1, 800acf4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x7c>
 800ac86:	f890 3556 	ldrb.w	r3, [r0, #1366]	; 0x556
 800ac8a:	b12b      	cbz	r3, 800ac98 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x20>
 800ac8c:	f8b0 3554 	ldrh.w	r3, [r0, #1364]	; 0x554
 800ac90:	42b3      	cmp	r3, r6
 800ac92:	d109      	bne.n	800aca8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x30>
 800ac94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac98:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	f880 350a 	strb.w	r3, [r0, #1290]	; 0x50a
 800aca2:	2301      	movs	r3, #1
 800aca4:	f880 3556 	strb.w	r3, [r0, #1366]	; 0x556
 800aca8:	4630      	mov	r0, r6
 800acaa:	f8a4 6554 	strh.w	r6, [r4, #1364]	; 0x554
 800acae:	f7ff fec3 	bl	800aa38 <e131::universe_to_multicast_ip(unsigned short)>
 800acb2:	f8c4 0558 	str.w	r0, [r4, #1368]	; 0x558
 800acb6:	e7ed      	b.n	800ac94 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800acb8:	2a02      	cmp	r2, #2
 800acba:	d11b      	bne.n	800acf4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x7c>
 800acbc:	2900      	cmp	r1, #0
 800acbe:	d1e9      	bne.n	800ac94 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800acc0:	f890 3512 	ldrb.w	r3, [r0, #1298]	; 0x512
 800acc4:	b14b      	cbz	r3, 800acda <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x62>
 800acc6:	f884 1512 	strb.w	r1, [r4, #1298]	; 0x512
 800acca:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800acce:	4632      	mov	r2, r6
 800acd0:	3b01      	subs	r3, #1
 800acd2:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800acd6:	f7ff ff91 	bl	800abfc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800acda:	f894 3556 	ldrb.w	r3, [r4, #1366]	; 0x556
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0d8      	beq.n	800ac94 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800ace2:	2300      	movs	r3, #0
 800ace4:	f884 3556 	strb.w	r3, [r4, #1366]	; 0x556
 800ace8:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800acec:	3b01      	subs	r3, #1
 800acee:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800acf2:	e7cf      	b.n	800ac94 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800acf4:	2344      	movs	r3, #68	; 0x44
 800acf6:	fb03 4305 	mla	r3, r3, r5, r4
 800acfa:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800acfe:	b1d2      	cbz	r2, 800ad36 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xbe>
 800ad00:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 800ad04:	42b3      	cmp	r3, r6
 800ad06:	d0c5      	beq.n	800ac94 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800ad08:	4632      	mov	r2, r6
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f7ff ff75 	bl	800abfc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800ad12:	4b0d      	ldr	r3, [pc, #52]	; (800ad48 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xd0>)
 800ad14:	4630      	mov	r0, r6
 800ad16:	681f      	ldr	r7, [r3, #0]
 800ad18:	f8d4 8000 	ldr.w	r8, [r4]
 800ad1c:	f7ff fe8c 	bl	800aa38 <e131::universe_to_multicast_ip(unsigned short)>
 800ad20:	4641      	mov	r1, r8
 800ad22:	4602      	mov	r2, r0
 800ad24:	4638      	mov	r0, r7
 800ad26:	f005 f964 	bl	800fff2 <Network::JoinGroup(int, unsigned int)>
 800ad2a:	2344      	movs	r3, #68	; 0x44
 800ad2c:	fb03 4505 	mla	r5, r3, r5, r4
 800ad30:	f8a5 6510 	strh.w	r6, [r5, #1296]	; 0x510
 800ad34:	e7ae      	b.n	800ac94 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800ad36:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800ad3a:	3201      	adds	r2, #1
 800ad3c:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800ad46:	e7e4      	b.n	800ad12 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x9a>
 800ad48:	200095c0 	andcs	r9, r0, r0, asr #11

0800ad4c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800ad4c:	b510      	push	{r4, lr}
 800ad4e:	4604      	mov	r4, r0
 800ad50:	4618      	mov	r0, r3
 800ad52:	b933      	cbnz	r3, 800ad62 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x16>
 800ad54:	b921      	cbnz	r1, 800ad60 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x14>
 800ad56:	f8b4 3554 	ldrh.w	r3, [r4, #1364]	; 0x554
 800ad5a:	f894 0556 	ldrb.w	r0, [r4, #1366]	; 0x556
 800ad5e:	8013      	strh	r3, [r2, #0]
 800ad60:	bd10      	pop	{r4, pc}
 800ad62:	2344      	movs	r3, #68	; 0x44
 800ad64:	fb03 4401 	mla	r4, r3, r1, r4
 800ad68:	f8b4 3510 	ldrh.w	r3, [r4, #1296]	; 0x510
 800ad6c:	f894 0512 	ldrb.w	r0, [r4, #1298]	; 0x512
 800ad70:	8013      	strh	r3, [r2, #0]
 800ad72:	e7f5      	b.n	800ad60 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x14>

0800ad74 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800ad74:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800ad78:	b923      	cbnz	r3, 800ad84 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800ad80:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800ad84:	2344      	movs	r3, #68	; 0x44
 800ad86:	fb03 0001 	mla	r0, r3, r1, r0
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	f880 3551 	strb.w	r3, [r0, #1361]	; 0x551
 800ad90:	4770      	bx	lr

0800ad92 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800ad92:	4602      	mov	r2, r0
 800ad94:	2044      	movs	r0, #68	; 0x44
 800ad96:	4348      	muls	r0, r1
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	1815      	adds	r5, r2, r0
 800ad9c:	460c      	mov	r4, r1
 800ad9e:	68d3      	ldr	r3, [r2, #12]
 800ada0:	f8d5 1514 	ldr.w	r1, [r5, #1300]	; 0x514
 800ada4:	1a5b      	subs	r3, r3, r1
 800ada6:	f242 7110 	movw	r1, #10000	; 0x2710
 800adaa:	428b      	cmp	r3, r1
 800adac:	d90a      	bls.n	800adc4 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800adae:	2600      	movs	r6, #0
 800adb0:	f200 501c 	addw	r0, r0, #1308	; 0x51c
 800adb4:	2110      	movs	r1, #16
 800adb6:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
 800adba:	4410      	add	r0, r2
 800adbc:	f7ff fe4e 	bl	800aa5c <memset.constprop.0.isra.0>
 800adc0:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800adc4:	2344      	movs	r3, #68	; 0x44
 800adc6:	435c      	muls	r4, r3
 800adc8:	1915      	adds	r5, r2, r4
 800adca:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
 800adce:	68d3      	ldr	r3, [r2, #12]
 800add0:	1a5b      	subs	r3, r3, r1
 800add2:	f242 7110 	movw	r1, #10000	; 0x2710
 800add6:	428b      	cmp	r3, r1
 800add8:	d90a      	bls.n	800adf0 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800adda:	2600      	movs	r6, #0
 800addc:	f504 64a7 	add.w	r4, r4, #1336	; 0x538
 800ade0:	2110      	movs	r1, #16
 800ade2:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 800ade6:	1910      	adds	r0, r2, r4
 800ade8:	f7ff fe38 	bl	800aa5c <memset.constprop.0.isra.0>
 800adec:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800adf0:	f892 3551 	ldrb.w	r3, [r2, #1361]	; 0x551
 800adf4:	b923      	cbnz	r3, 800ae00 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x6e>
 800adf6:	2101      	movs	r1, #1
 800adf8:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800adfc:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800ae00:	bd70      	pop	{r4, r5, r6, pc}

0800ae02 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800ae02:	2244      	movs	r2, #68	; 0x44
 800ae04:	fb02 0101 	mla	r1, r2, r1, r0
 800ae08:	68c3      	ldr	r3, [r0, #12]
 800ae0a:	b510      	push	{r4, lr}
 800ae0c:	f8d1 2530 	ldr.w	r2, [r1, #1328]	; 0x530
 800ae10:	f8d1 4518 	ldr.w	r4, [r1, #1304]	; 0x518
 800ae14:	f8d1 0534 	ldr.w	r0, [r1, #1332]	; 0x534
 800ae18:	1a9a      	subs	r2, r3, r2
 800ae1a:	b184      	cbz	r4, 800ae3e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800ae1c:	f8d1 1514 	ldr.w	r1, [r1, #1300]	; 0x514
 800ae20:	1a5b      	subs	r3, r3, r1
 800ae22:	b128      	cbz	r0, 800ae30 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800ae24:	f242 700f 	movw	r0, #9999	; 0x270f
 800ae28:	4283      	cmp	r3, r0
 800ae2a:	d90d      	bls.n	800ae48 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800ae2c:	4282      	cmp	r2, r0
 800ae2e:	e002      	b.n	800ae36 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800ae30:	f242 7010 	movw	r0, #10000	; 0x2710
 800ae34:	4283      	cmp	r3, r0
 800ae36:	bf94      	ite	ls
 800ae38:	2000      	movls	r0, #0
 800ae3a:	2001      	movhi	r0, #1
 800ae3c:	bd10      	pop	{r4, pc}
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d0fc      	beq.n	800ae3c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800ae42:	f242 7010 	movw	r0, #10000	; 0x2710
 800ae46:	e7f1      	b.n	800ae2c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800ae48:	2000      	movs	r0, #0
 800ae4a:	e7f7      	b.n	800ae3c <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800ae4c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800ae4c:	684a      	ldr	r2, [r1, #4]
 800ae4e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800ae50:	b510      	push	{r4, lr}
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d10d      	bne.n	800ae72 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800ae56:	f100 0392 	add.w	r3, r0, #146	; 0x92
 800ae5a:	3108      	adds	r1, #8
 800ae5c:	30a2      	adds	r0, #162	; 0xa2
 800ae5e:	4283      	cmp	r3, r0
 800ae60:	d101      	bne.n	800ae66 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800ae62:	2001      	movs	r0, #1
 800ae64:	bd10      	pop	{r4, pc}
 800ae66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae6e:	4294      	cmp	r4, r2
 800ae70:	d0f5      	beq.n	800ae5e <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800ae72:	2000      	movs	r0, #0
 800ae74:	e7f6      	b.n	800ae64 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>
	...

0800ae78 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	2001      	movs	r0, #1
 800ae7e:	460d      	mov	r5, r1
 800ae80:	f894 3552 	ldrb.w	r3, [r4, #1362]	; 0x552
 800ae84:	f884 04f8 	strb.w	r0, [r4, #1272]	; 0x4f8
 800ae88:	2900      	cmp	r1, #0
 800ae8a:	d04b      	beq.n	800af24 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xac>
 800ae8c:	b362      	cbz	r2, 800aee8 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x70>
 800ae8e:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
 800ae92:	f884 050c 	strb.w	r0, [r4, #1292]	; 0x50c
 800ae96:	b1db      	cbz	r3, 800aed0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x58>
 800ae98:	2500      	movs	r5, #0
 800ae9a:	6860      	ldr	r0, [r4, #4]
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	6803      	ldr	r3, [r0, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	4798      	blx	r3
 800aea4:	2110      	movs	r1, #16
 800aea6:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 800aeaa:	f8c4 5518 	str.w	r5, [r4, #1304]	; 0x518
 800aeae:	f7ff fdd5 	bl	800aa5c <memset.constprop.0.isra.0>
 800aeb2:	2110      	movs	r1, #16
 800aeb4:	f504 60a7 	add.w	r0, r4, #1336	; 0x538
 800aeb8:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
 800aebc:	f7ff fdce 	bl	800aa5c <memset.constprop.0.isra.0>
 800aec0:	f7fe f9ea 	bl	8009298 <lightset::Data::Get()>
 800aec4:	f8c0 5600 	str.w	r5, [r0, #1536]	; 0x600
 800aec8:	f8a4 5550 	strh.w	r5, [r4, #1360]	; 0x550
 800aecc:	f884 5552 	strb.w	r5, [r4, #1362]	; 0x552
 800aed0:	4b1d      	ldr	r3, [pc, #116]	; (800af48 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd0>)
 800aed2:	2102      	movs	r1, #2
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	f007 fb65 	bl	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 800aeda:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800aede:	f023 0302 	bic.w	r3, r3, #2
 800aee2:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800aee6:	bd38      	pop	{r3, r4, r5, pc}
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d0f1      	beq.n	800aed0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x58>
 800aeec:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
 800aef0:	b143      	cbz	r3, 800af04 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x8c>
 800aef2:	2110      	movs	r1, #16
 800aef4:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
 800aef8:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 800aefc:	f7ff fdae 	bl	800aa5c <memset.constprop.0.isra.0>
 800af00:	f884 2551 	strb.w	r2, [r4, #1361]	; 0x551
 800af04:	f894 54f5 	ldrb.w	r5, [r4, #1269]	; 0x4f5
 800af08:	2d00      	cmp	r5, #0
 800af0a:	d1e1      	bne.n	800aed0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x58>
 800af0c:	6860      	ldr	r0, [r4, #4]
 800af0e:	4629      	mov	r1, r5
 800af10:	6803      	ldr	r3, [r0, #0]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	4798      	blx	r3
 800af16:	f7fe f9bf 	bl	8009298 <lightset::Data::Get()>
 800af1a:	f8c0 5600 	str.w	r5, [r0, #1536]	; 0x600
 800af1e:	f884 5550 	strb.w	r5, [r4, #1360]	; 0x550
 800af22:	e7d3      	b.n	800aecc <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x54>
 800af24:	2b00      	cmp	r3, #0
 800af26:	d0d3      	beq.n	800aed0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x58>
 800af28:	2a00      	cmp	r2, #0
 800af2a:	d0eb      	beq.n	800af04 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x8c>
 800af2c:	f8d4 3534 	ldr.w	r3, [r4, #1332]	; 0x534
 800af30:	2b00      	cmp	r3, #0
 800af32:	d0e7      	beq.n	800af04 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x8c>
 800af34:	2110      	movs	r1, #16
 800af36:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
 800af3a:	f504 60a7 	add.w	r0, r4, #1336	; 0x538
 800af3e:	f7ff fd8d 	bl	800aa5c <memset.constprop.0.isra.0>
 800af42:	f884 5551 	strb.w	r5, [r4, #1361]	; 0x551
 800af46:	e7dd      	b.n	800af04 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x8c>
 800af48:	20009ce4 	andcs	r9, r0, r4, ror #25

0800af4c <E131Bridge::HandleDmx()>:
 800af4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af50:	f8b0 50f7 	ldrh.w	r5, [r0, #247]	; 0xf7
 800af54:	f890 3512 	ldrb.w	r3, [r0, #1298]	; 0x512
 800af58:	ba6d      	rev16	r5, r5
 800af5a:	b2ad      	uxth	r5, r5
 800af5c:	4604      	mov	r4, r0
 800af5e:	f100 08fa 	add.w	r8, r0, #250	; 0xfa
 800af62:	3d01      	subs	r5, #1
 800af64:	b343      	cbz	r3, 800afb8 <E131Bridge::HandleDmx()+0x6c>
 800af66:	f8b0 3510 	ldrh.w	r3, [r0, #1296]	; 0x510
 800af6a:	f8b0 20ed 	ldrh.w	r2, [r0, #237]	; 0xed
 800af6e:	ba5b      	rev16	r3, r3
 800af70:	b29b      	uxth	r3, r3
 800af72:	429a      	cmp	r2, r3
 800af74:	d120      	bne.n	800afb8 <E131Bridge::HandleDmx()+0x6c>
 800af76:	f200 5114 	addw	r1, r0, #1300	; 0x514
 800af7a:	f8d0 a518 	ldr.w	sl, [r0, #1304]	; 0x518
 800af7e:	f8d0 9534 	ldr.w	r9, [r0, #1332]	; 0x534
 800af82:	f7ff ff63 	bl	800ae4c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800af86:	f504 61a6 	add.w	r1, r4, #1328	; 0x530
 800af8a:	4607      	mov	r7, r0
 800af8c:	4620      	mov	r0, r4
 800af8e:	f7ff ff5d 	bl	800ae4c <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800af92:	4606      	mov	r6, r0
 800af94:	b197      	cbz	r7, 800afbc <E131Bridge::HandleDmx()+0x70>
 800af96:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800af9a:	f894 252c 	ldrb.w	r2, [r4, #1324]	; 0x52c
 800af9e:	f884 352c 	strb.w	r3, [r4, #1324]	; 0x52c
 800afa2:	3313      	adds	r3, #19
 800afa4:	1a9b      	subs	r3, r3, r2
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	2b13      	cmp	r3, #19
 800afaa:	d905      	bls.n	800afb8 <E131Bridge::HandleDmx()+0x6c>
 800afac:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800afb0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800afb4:	2a00      	cmp	r2, #0
 800afb6:	da0a      	bge.n	800afce <E131Bridge::HandleDmx()+0x82>
 800afb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d0f5      	beq.n	800afac <E131Bridge::HandleDmx()+0x60>
 800afc0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800afc4:	f894 2548 	ldrb.w	r2, [r4, #1352]	; 0x548
 800afc8:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
 800afcc:	e7e9      	b.n	800afa2 <E131Bridge::HandleDmx()+0x56>
 800afce:	065a      	lsls	r2, r3, #25
 800afd0:	d509      	bpl.n	800afe6 <E131Bridge::HandleDmx()+0x9a>
 800afd2:	b90f      	cbnz	r7, 800afd8 <E131Bridge::HandleDmx()+0x8c>
 800afd4:	2e00      	cmp	r6, #0
 800afd6:	d0ef      	beq.n	800afb8 <E131Bridge::HandleDmx()+0x6c>
 800afd8:	4632      	mov	r2, r6
 800afda:	4639      	mov	r1, r7
 800afdc:	4620      	mov	r0, r4
 800afde:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe2:	f7ff bf49 	b.w	800ae78 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800afe6:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800afea:	b12b      	cbz	r3, 800aff8 <E131Bridge::HandleDmx()+0xac>
 800afec:	f894 14fa 	ldrb.w	r1, [r4, #1274]	; 0x4fa
 800aff0:	b911      	cbnz	r1, 800aff8 <E131Bridge::HandleDmx()+0xac>
 800aff2:	4620      	mov	r0, r4
 800aff4:	f7ff fecd 	bl	800ad92 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800aff8:	f894 b0e8 	ldrb.w	fp, [r4, #232]	; 0xe8
 800affc:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
 800b000:	459b      	cmp	fp, r3
 800b002:	d258      	bcs.n	800b0b6 <E131Bridge::HandleDmx()+0x16a>
 800b004:	2100      	movs	r1, #0
 800b006:	4620      	mov	r0, r4
 800b008:	f7ff fefb 	bl	800ae02 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d0d3      	beq.n	800afb8 <E131Bridge::HandleDmx()+0x6c>
 800b010:	f884 b50c 	strb.w	fp, [r4, #1292]	; 0x50c
 800b014:	f1ba 0f00 	cmp.w	sl, #0
 800b018:	d156      	bne.n	800b0c8 <E131Bridge::HandleDmx()+0x17c>
 800b01a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b01e:	f1b9 0f00 	cmp.w	r9, #0
 800b022:	d15c      	bne.n	800b0de <E131Bridge::HandleDmx()+0x192>
 800b024:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b026:	f884 352c 	strb.w	r3, [r4, #1324]	; 0x52c
 800b02a:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
 800b02e:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800b032:	2210      	movs	r2, #16
 800b034:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 800b038:	f7ff fd18 	bl	800aa6c <memcpy.isra.0>
 800b03c:	68e3      	ldr	r3, [r4, #12]
 800b03e:	462a      	mov	r2, r5
 800b040:	4641      	mov	r1, r8
 800b042:	4648      	mov	r0, r9
 800b044:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
 800b048:	f7fe f932 	bl	80092b0 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800b04c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800b050:	069b      	lsls	r3, r3, #26
 800b052:	f100 80a2 	bmi.w	800b19a <E131Bridge::HandleDmx()+0x24e>
 800b056:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	2a00      	cmp	r2, #0
 800b05e:	f000 809f 	beq.w	800b1a0 <E131Bridge::HandleDmx()+0x254>
 800b062:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800b066:	2a00      	cmp	r2, #0
 800b068:	f040 809a 	bne.w	800b1a0 <E131Bridge::HandleDmx()+0x254>
 800b06c:	ba5b      	rev16	r3, r3
 800b06e:	b29b      	uxth	r3, r3
 800b070:	2f00      	cmp	r7, #0
 800b072:	f040 808f 	bne.w	800b194 <E131Bridge::HandleDmx()+0x248>
 800b076:	2e00      	cmp	r6, #0
 800b078:	f040 808c 	bne.w	800b194 <E131Bridge::HandleDmx()+0x248>
 800b07c:	f8d4 2534 	ldr.w	r2, [r4, #1332]	; 0x534
 800b080:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
 800b084:	3a00      	subs	r2, #0
 800b086:	bf18      	it	ne
 800b088:	2201      	movne	r2, #1
 800b08a:	3900      	subs	r1, #0
 800b08c:	bf18      	it	ne
 800b08e:	2101      	movne	r1, #1
 800b090:	4620      	mov	r0, r4
 800b092:	f7ff fdcb 	bl	800ac2c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800b096:	f240 1301 	movw	r3, #257	; 0x101
 800b09a:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800b09e:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f040 8081 	bne.w	800b1aa <E131Bridge::HandleDmx()+0x25e>
 800b0a8:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b0ac:	f043 0302 	orr.w	r3, r3, #2
 800b0b0:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800b0b4:	e780      	b.n	800afb8 <E131Bridge::HandleDmx()+0x6c>
 800b0b6:	d9ad      	bls.n	800b014 <E131Bridge::HandleDmx()+0xc8>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
 800b0be:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
 800b0c2:	f884 34f5 	strb.w	r3, [r4, #1269]	; 0x4f5
 800b0c6:	e7a3      	b.n	800b010 <E131Bridge::HandleDmx()+0xc4>
 800b0c8:	2f00      	cmp	r7, #0
 800b0ca:	f000 8089 	beq.w	800b1e0 <E131Bridge::HandleDmx()+0x294>
 800b0ce:	f1b9 0f00 	cmp.w	r9, #0
 800b0d2:	d154      	bne.n	800b17e <E131Bridge::HandleDmx()+0x232>
 800b0d4:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b0d8:	f884 352c 	strb.w	r3, [r4, #1324]	; 0x52c
 800b0dc:	e7ae      	b.n	800b03c <E131Bridge::HandleDmx()+0xf0>
 800b0de:	b39e      	cbz	r6, 800b148 <E131Bridge::HandleDmx()+0x1fc>
 800b0e0:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
 800b0e4:	68e3      	ldr	r3, [r4, #12]
 800b0e6:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
 800b0ea:	f7fe f8d5 	bl	8009298 <lightset::Data::Get()>
 800b0ee:	4681      	mov	r9, r0
 800b0f0:	462a      	mov	r2, r5
 800b0f2:	4641      	mov	r1, r8
 800b0f4:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800b0f8:	f7ff fcb8 	bl	800aa6c <memcpy.isra.0>
 800b0fc:	462a      	mov	r2, r5
 800b0fe:	4641      	mov	r1, r8
 800b100:	f8c9 5600 	str.w	r5, [r9, #1536]	; 0x600
 800b104:	f509 6080 	add.w	r0, r9, #1024	; 0x400
 800b108:	f7ff fcb0 	bl	800aa6c <memcpy.isra.0>
 800b10c:	e79e      	b.n	800b04c <E131Bridge::HandleDmx()+0x100>
 800b10e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b110:	2210      	movs	r2, #16
 800b112:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
 800b116:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b11a:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800b11e:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
 800b122:	f504 60a7 	add.w	r0, r4, #1336	; 0x538
 800b126:	f7ff fca1 	bl	800aa6c <memcpy.isra.0>
 800b12a:	68e3      	ldr	r3, [r4, #12]
 800b12c:	4639      	mov	r1, r7
 800b12e:	4620      	mov	r0, r4
 800b130:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
 800b134:	f7ff fe1e 	bl	800ad74 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800b138:	462a      	mov	r2, r5
 800b13a:	4641      	mov	r1, r8
 800b13c:	4638      	mov	r0, r7
 800b13e:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800b142:	f7fe f8fb 	bl	800933c <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b146:	e781      	b.n	800b04c <E131Bridge::HandleDmx()+0x100>
 800b148:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800b14a:	f884 352c 	strb.w	r3, [r4, #1324]	; 0x52c
 800b14e:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
 800b152:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800b156:	2210      	movs	r2, #16
 800b158:	f204 501c 	addw	r0, r4, #1308	; 0x51c
 800b15c:	f7ff fc86 	bl	800aa6c <memcpy.isra.0>
 800b160:	68e3      	ldr	r3, [r4, #12]
 800b162:	4631      	mov	r1, r6
 800b164:	4620      	mov	r0, r4
 800b166:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
 800b16a:	f7ff fe03 	bl	800ad74 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800b16e:	462a      	mov	r2, r5
 800b170:	4641      	mov	r1, r8
 800b172:	4630      	mov	r0, r6
 800b174:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800b178:	f7fe f8b7 	bl	80092ea <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b17c:	e766      	b.n	800b04c <E131Bridge::HandleDmx()+0x100>
 800b17e:	b926      	cbnz	r6, 800b18a <E131Bridge::HandleDmx()+0x23e>
 800b180:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b184:	f884 352c 	strb.w	r3, [r4, #1324]	; 0x52c
 800b188:	e7ea      	b.n	800b160 <E131Bridge::HandleDmx()+0x214>
 800b18a:	481a      	ldr	r0, [pc, #104]	; (800b1f4 <E131Bridge::HandleDmx()+0x2a8>)
 800b18c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b190:	f007 bde0 	b.w	8012d54 <printf>
 800b194:	4632      	mov	r2, r6
 800b196:	4639      	mov	r1, r7
 800b198:	e77a      	b.n	800b090 <E131Bridge::HandleDmx()+0x144>
 800b19a:	2300      	movs	r3, #0
 800b19c:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800b1a0:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f47f af7a 	bne.w	800b09e <E131Bridge::HandleDmx()+0x152>
 800b1aa:	6865      	ldr	r5, [r4, #4]
 800b1ac:	f7fe f874 	bl	8009298 <lightset::Data::Get()>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	691e      	ldr	r6, [r3, #16]
 800b1b6:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800b1ba:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
 800b1be:	4628      	mov	r0, r5
 800b1c0:	47b0      	blx	r6
 800b1c2:	f894 1552 	ldrb.w	r1, [r4, #1362]	; 0x552
 800b1c6:	2900      	cmp	r1, #0
 800b1c8:	f47f af6e 	bne.w	800b0a8 <E131Bridge::HandleDmx()+0x15c>
 800b1cc:	6860      	ldr	r0, [r4, #4]
 800b1ce:	6803      	ldr	r3, [r0, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	4798      	blx	r3
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800b1da:	f884 3552 	strb.w	r3, [r4, #1362]	; 0x552
 800b1de:	e763      	b.n	800b0a8 <E131Bridge::HandleDmx()+0x15c>
 800b1e0:	f1b9 0f00 	cmp.w	r9, #0
 800b1e4:	d093      	beq.n	800b10e <E131Bridge::HandleDmx()+0x1c2>
 800b1e6:	2e00      	cmp	r6, #0
 800b1e8:	d0cf      	beq.n	800b18a <E131Bridge::HandleDmx()+0x23e>
 800b1ea:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b1ee:	f884 3548 	strb.w	r3, [r4, #1352]	; 0x548
 800b1f2:	e79a      	b.n	800b12a <E131Bridge::HandleDmx()+0x1de>
 800b1f4:	08015508 	stmdaeq	r1, {r3, r8, sl, ip, lr}

0800b1f8 <E131Bridge::IsStatusChanged()>:
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	f890 04f8 	ldrb.w	r0, [r0, #1272]	; 0x4f8
 800b1fe:	b110      	cbz	r0, 800b206 <E131Bridge::IsStatusChanged()+0xe>
 800b200:	2200      	movs	r2, #0
 800b202:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800b206:	4770      	bx	lr

0800b208 <E131Bridge::Clear(unsigned int)>:
 800b208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b20c:	460d      	mov	r5, r1
 800b20e:	f240 6804 	movw	r8, #1540	; 0x604
 800b212:	6847      	ldr	r7, [r0, #4]
 800b214:	4604      	mov	r4, r0
 800b216:	f7fe f83f 	bl	8009298 <lightset::Data::Get()>
 800b21a:	fb08 f805 	mul.w	r8, r8, r5
 800b21e:	f508 6280 	add.w	r2, r8, #1024	; 0x400
 800b222:	4402      	add	r2, r0
 800b224:	4606      	mov	r6, r0
 800b226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b22a:	4610      	mov	r0, r2
 800b22c:	f7ff fc16 	bl	800aa5c <memset.constprop.0.isra.0>
 800b230:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	4446      	add	r6, r8
 800b238:	f8c6 3600 	str.w	r3, [r6, #1536]	; 0x600
 800b23c:	4638      	mov	r0, r7
 800b23e:	690e      	ldr	r6, [r1, #16]
 800b240:	4629      	mov	r1, r5
 800b242:	47b0      	blx	r6
 800b244:	2644      	movs	r6, #68	; 0x44
 800b246:	fb06 4605 	mla	r6, r6, r5, r4
 800b24a:	f896 3512 	ldrb.w	r3, [r6, #1298]	; 0x512
 800b24e:	b153      	cbz	r3, 800b266 <E131Bridge::Clear(unsigned int)+0x5e>
 800b250:	f896 3552 	ldrb.w	r3, [r6, #1362]	; 0x552
 800b254:	b93b      	cbnz	r3, 800b266 <E131Bridge::Clear(unsigned int)+0x5e>
 800b256:	6860      	ldr	r0, [r4, #4]
 800b258:	4629      	mov	r1, r5
 800b25a:	6803      	ldr	r3, [r0, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	4798      	blx	r3
 800b260:	2301      	movs	r3, #1
 800b262:	f886 3552 	strb.w	r3, [r6, #1362]	; 0x552
 800b266:	2300      	movs	r3, #0
 800b268:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800b26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b270 <E131Bridge::IsValidRoot()>:
 800b270:	b530      	push	{r4, r5, lr}
 800b272:	4a0d      	ldr	r2, [pc, #52]	; (800b2a8 <E131Bridge::IsValidRoot()+0x38>)
 800b274:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800b278:	f100 018c 	add.w	r1, r0, #140	; 0x8c
 800b27c:	4299      	cmp	r1, r3
 800b27e:	d109      	bne.n	800b294 <E131Bridge::IsValidRoot()+0x24>
 800b280:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800b284:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800b288:	d00c      	beq.n	800b2a4 <E131Bridge::IsValidRoot()+0x34>
 800b28a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800b28e:	4258      	negs	r0, r3
 800b290:	4158      	adcs	r0, r3
 800b292:	bd30      	pop	{r4, r5, pc}
 800b294:	f813 5b01 	ldrb.w	r5, [r3], #1
 800b298:	f812 4b01 	ldrb.w	r4, [r2], #1
 800b29c:	42a5      	cmp	r5, r4
 800b29e:	d0ed      	beq.n	800b27c <E131Bridge::IsValidRoot()+0xc>
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	e7f6      	b.n	800b292 <E131Bridge::IsValidRoot()+0x22>
 800b2a4:	2001      	movs	r0, #1
 800b2a6:	e7f4      	b.n	800b292 <E131Bridge::IsValidRoot()+0x22>
 800b2a8:	080155b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, sl, ip, lr}

0800b2ac <E131Bridge::IsValidDataPacket()>:
 800b2ac:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	d10d      	bne.n	800b2d0 <E131Bridge::IsValidDataPacket()+0x24>
 800b2b4:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800b2b8:	2ba1      	cmp	r3, #161	; 0xa1
 800b2ba:	d109      	bne.n	800b2d0 <E131Bridge::IsValidDataPacket()+0x24>
 800b2bc:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800b2c0:	b933      	cbnz	r3, 800b2d0 <E131Bridge::IsValidDataPacket()+0x24>
 800b2c2:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800b2c6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800b2ca:	4258      	negs	r0, r3
 800b2cc:	4158      	adcs	r0, r3
 800b2ce:	4770      	bx	lr
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	4770      	bx	lr

0800b2d4 <E131Bridge::Run()>:
 800b2d4:	b530      	push	{r4, r5, lr}
 800b2d6:	4601      	mov	r1, r0
 800b2d8:	4604      	mov	r4, r0
 800b2da:	b085      	sub	sp, #20
 800b2dc:	f10d 030e 	add.w	r3, sp, #14
 800b2e0:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800b2e4:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800b2ee:	f004 f94d 	bl	800f58c <udp_recv>
 800b2f2:	4b3c      	ldr	r3, [pc, #240]	; (800b3e4 <E131Bridge::Run()+0x110>)
 800b2f4:	681d      	ldr	r5, [r3, #0]
 800b2f6:	60e5      	str	r5, [r4, #12]
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d13b      	bne.n	800b374 <E131Bridge::Run()+0xa0>
 800b2fc:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800b300:	b183      	cbz	r3, 800b324 <E131Bridge::Run()+0x50>
 800b302:	f894 24f9 	ldrb.w	r2, [r4, #1273]	; 0x4f9
 800b306:	6923      	ldr	r3, [r4, #16]
 800b308:	bb6a      	cbnz	r2, 800b366 <E131Bridge::Run()+0x92>
 800b30a:	1aed      	subs	r5, r5, r3
 800b30c:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800b310:	429d      	cmp	r5, r3
 800b312:	d928      	bls.n	800b366 <E131Bridge::Run()+0x92>
 800b314:	6863      	ldr	r3, [r4, #4]
 800b316:	b9eb      	cbnz	r3, 800b354 <E131Bridge::Run()+0x80>
 800b318:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b31c:	f023 0302 	bic.w	r3, r3, #2
 800b320:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800b324:	6963      	ldr	r3, [r4, #20]
 800b326:	b12b      	cbz	r3, 800b334 <E131Bridge::Run()+0x60>
 800b328:	4620      	mov	r0, r4
 800b32a:	f000 f947 	bl	800b5bc <E131Bridge::HandleDmxIn()>
 800b32e:	4620      	mov	r0, r4
 800b330:	f000 f8ca 	bl	800b4c8 <E131Bridge::SendDiscoveryPacket()>
 800b334:	7a23      	ldrb	r3, [r4, #8]
 800b336:	b15b      	cbz	r3, 800b350 <E131Bridge::Run()+0x7c>
 800b338:	4b2b      	ldr	r3, [pc, #172]	; (800b3e8 <E131Bridge::Run()+0x114>)
 800b33a:	6818      	ldr	r0, [r3, #0]
 800b33c:	6843      	ldr	r3, [r0, #4]
 800b33e:	2b04      	cmp	r3, #4
 800b340:	d006      	beq.n	800b350 <E131Bridge::Run()+0x7c>
 800b342:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b346:	2b00      	cmp	r3, #0
 800b348:	d049      	beq.n	800b3de <E131Bridge::Run()+0x10a>
 800b34a:	2103      	movs	r1, #3
 800b34c:	f007 f92a 	bl	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 800b350:	b005      	add	sp, #20
 800b352:	bd30      	pop	{r4, r5, pc}
 800b354:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1dd      	bne.n	800b318 <E131Bridge::Run()+0x44>
 800b35c:	2201      	movs	r2, #1
 800b35e:	4620      	mov	r0, r4
 800b360:	4611      	mov	r1, r2
 800b362:	f7ff fd89 	bl	800ae78 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800b366:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800b36a:	1a9b      	subs	r3, r3, r2
 800b36c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b370:	d3d8      	bcc.n	800b324 <E131Bridge::Run()+0x50>
 800b372:	e7d1      	b.n	800b318 <E131Bridge::Run()+0x44>
 800b374:	4620      	mov	r0, r4
 800b376:	f7ff ff7b 	bl	800b270 <E131Bridge::IsValidRoot()>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d0e8      	beq.n	800b350 <E131Bridge::Run()+0x7c>
 800b37e:	2300      	movs	r3, #0
 800b380:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800b384:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800b388:	6125      	str	r5, [r4, #16]
 800b38a:	b15b      	cbz	r3, 800b3a4 <E131Bridge::Run()+0xd0>
 800b38c:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800b390:	b943      	cbnz	r3, 800b3a4 <E131Bridge::Run()+0xd0>
 800b392:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800b396:	1aad      	subs	r5, r5, r2
 800b398:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800b39c:	4295      	cmp	r5, r2
 800b39e:	bf88      	it	hi
 800b3a0:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800b3a4:	6863      	ldr	r3, [r4, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d0bc      	beq.n	800b324 <E131Bridge::Run()+0x50>
 800b3aa:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800b3ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3b2:	ba1a      	rev	r2, r3
 800b3b4:	d108      	bne.n	800b3c8 <E131Bridge::Run()+0xf4>
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f7ff ff78 	bl	800b2ac <E131Bridge::IsValidDataPacket()>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d0b1      	beq.n	800b324 <E131Bridge::Run()+0x50>
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f7ff fdc3 	bl	800af4c <E131Bridge::HandleDmx()>
 800b3c6:	e7ad      	b.n	800b324 <E131Bridge::Run()+0x50>
 800b3c8:	2a08      	cmp	r2, #8
 800b3ca:	d1ab      	bne.n	800b324 <E131Bridge::Run()+0x50>
 800b3cc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b3d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b3d4:	d1a6      	bne.n	800b324 <E131Bridge::Run()+0x50>
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 f95c 	bl	800b694 <E131Bridge::HandleSynchronization()>
 800b3dc:	e7a2      	b.n	800b324 <E131Bridge::Run()+0x50>
 800b3de:	2102      	movs	r1, #2
 800b3e0:	e7b4      	b.n	800b34c <E131Bridge::Run()+0x78>
 800b3e2:	bf00      	nop
 800b3e4:	20009d04 	andcs	r9, r0, r4, lsl #26
 800b3e8:	20009ce4 	andcs	r9, r0, r4, ror #25

0800b3ec <E131Bridge::FillDiscoveryPacket()>:
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800b3f2:	b510      	push	{r4, lr}
 800b3f4:	333c      	adds	r3, #60	; 0x3c
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800b3fc:	69c3      	ldr	r3, [r0, #28]
 800b3fe:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800b402:	428b      	cmp	r3, r1
 800b404:	d14b      	bne.n	800b49e <E131Bridge::FillDiscoveryPacket()+0xb2>
 800b406:	69c3      	ldr	r3, [r0, #28]
 800b408:	492e      	ldr	r1, [pc, #184]	; (800b4c4 <E131Bridge::FillDiscoveryPacket()+0xd8>)
 800b40a:	701a      	strb	r2, [r3, #0]
 800b40c:	2210      	movs	r2, #16
 800b40e:	705a      	strb	r2, [r3, #1]
 800b410:	1d1a      	adds	r2, r3, #4
 800b412:	3310      	adds	r3, #16
 800b414:	4293      	cmp	r3, r2
 800b416:	d145      	bne.n	800b4a4 <E131Bridge::FillDiscoveryPacket()+0xb8>
 800b418:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800b41c:	69c3      	ldr	r3, [r0, #28]
 800b41e:	3234      	adds	r2, #52	; 0x34
 800b420:	0052      	lsls	r2, r2, #1
 800b422:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800b426:	ba52      	rev16	r2, r2
 800b428:	821a      	strh	r2, [r3, #16]
 800b42a:	2200      	movs	r2, #0
 800b42c:	749a      	strb	r2, [r3, #18]
 800b42e:	74da      	strb	r2, [r3, #19]
 800b430:	751a      	strb	r2, [r3, #20]
 800b432:	2208      	movs	r2, #8
 800b434:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800b438:	755a      	strb	r2, [r3, #21]
 800b43a:	3316      	adds	r3, #22
 800b43c:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800b440:	4291      	cmp	r1, r2
 800b442:	d134      	bne.n	800b4ae <E131Bridge::FillDiscoveryPacket()+0xc2>
 800b444:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800b448:	69c3      	ldr	r3, [r0, #28]
 800b44a:	3229      	adds	r2, #41	; 0x29
 800b44c:	0052      	lsls	r2, r2, #1
 800b44e:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800b452:	ba52      	rev16	r2, r2
 800b454:	84da      	strh	r2, [r3, #38]	; 0x26
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b45c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800b460:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800b464:	2202      	movs	r2, #2
 800b466:	332c      	adds	r3, #44	; 0x2c
 800b468:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b46c:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800b470:	4291      	cmp	r1, r2
 800b472:	d121      	bne.n	800b4b8 <E131Bridge::FillDiscoveryPacket()+0xcc>
 800b474:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800b478:	69c2      	ldr	r2, [r0, #28]
 800b47a:	3304      	adds	r3, #4
 800b47c:	005b      	lsls	r3, r3, #1
 800b47e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800b482:	ba5b      	rev16	r3, r3
 800b484:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800b488:	2300      	movs	r3, #0
 800b48a:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800b48e:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800b492:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800b496:	2301      	movs	r3, #1
 800b498:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800b49c:	bd10      	pop	{r4, pc}
 800b49e:	f803 2b01 	strb.w	r2, [r3], #1
 800b4a2:	e7ae      	b.n	800b402 <E131Bridge::FillDiscoveryPacket()+0x16>
 800b4a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4a8:	f802 4b01 	strb.w	r4, [r2], #1
 800b4ac:	e7b2      	b.n	800b414 <E131Bridge::FillDiscoveryPacket()+0x28>
 800b4ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4b2:	f803 4b01 	strb.w	r4, [r3], #1
 800b4b6:	e7c3      	b.n	800b440 <E131Bridge::FillDiscoveryPacket()+0x54>
 800b4b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4bc:	f803 4b01 	strb.w	r4, [r3], #1
 800b4c0:	e7d6      	b.n	800b470 <E131Bridge::FillDiscoveryPacket()+0x84>
 800b4c2:	bf00      	nop
 800b4c4:	080155b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, sl, ip, lr}

0800b4c8 <E131Bridge::SendDiscoveryPacket()>:
 800b4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4ca:	f242 710f 	movw	r1, #9999	; 0x270f
 800b4ce:	68c2      	ldr	r2, [r0, #12]
 800b4d0:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	1ad3      	subs	r3, r2, r3
 800b4d8:	428b      	cmp	r3, r1
 800b4da:	d90e      	bls.n	800b4fa <E131Bridge::SendDiscoveryPacket()+0x32>
 800b4dc:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800b4e0:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800b4e4:	b95b      	cbnz	r3, 800b4fe <E131Bridge::SendDiscoveryPacket()+0x36>
 800b4e6:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800b4ea:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	69e1      	ldr	r1, [r4, #28]
 800b4f2:	6a23      	ldr	r3, [r4, #32]
 800b4f4:	7820      	ldrb	r0, [r4, #0]
 800b4f6:	f004 f8a5 	bl	800f644 <udp_send>
 800b4fa:	b004      	add	sp, #16
 800b4fc:	bd10      	pop	{r4, pc}
 800b4fe:	2300      	movs	r3, #0
 800b500:	f10d 020e 	add.w	r2, sp, #14
 800b504:	4619      	mov	r1, r3
 800b506:	f7ff fc21 	bl	800ad4c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d0eb      	beq.n	800b4e6 <E131Bridge::SendDiscoveryPacket()+0x1e>
 800b50e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b512:	69e2      	ldr	r2, [r4, #28]
 800b514:	ba5b      	rev16	r3, r3
 800b516:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
 800b51a:	e7e4      	b.n	800b4e6 <E131Bridge::SendDiscoveryPacket()+0x1e>

0800b51c <memcpy.isra.0>:
 800b51c:	3801      	subs	r0, #1
 800b51e:	440a      	add	r2, r1
 800b520:	4291      	cmp	r1, r2
 800b522:	d100      	bne.n	800b526 <memcpy.isra.0+0xa>
 800b524:	4770      	bx	lr
 800b526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b52a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800b52e:	e7f7      	b.n	800b520 <memcpy.isra.0+0x4>

0800b530 <E131Bridge::FillDataPacket()>:
 800b530:	b570      	push	{r4, r5, r6, lr}
 800b532:	2400      	movs	r4, #0
 800b534:	2610      	movs	r6, #16
 800b536:	4605      	mov	r5, r0
 800b538:	6980      	ldr	r0, [r0, #24]
 800b53a:	220c      	movs	r2, #12
 800b53c:	7046      	strb	r6, [r0, #1]
 800b53e:	7004      	strb	r4, [r0, #0]
 800b540:	7084      	strb	r4, [r0, #2]
 800b542:	70c4      	strb	r4, [r0, #3]
 800b544:	491c      	ldr	r1, [pc, #112]	; (800b5b8 <E131Bridge::FillDataPacket()+0x88>)
 800b546:	3004      	adds	r0, #4
 800b548:	f7ff ffe8 	bl	800b51c <memcpy.isra.0>
 800b54c:	2304      	movs	r3, #4
 800b54e:	4632      	mov	r2, r6
 800b550:	2602      	movs	r6, #2
 800b552:	69a8      	ldr	r0, [r5, #24]
 800b554:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800b558:	7543      	strb	r3, [r0, #21]
 800b55a:	7484      	strb	r4, [r0, #18]
 800b55c:	74c4      	strb	r4, [r0, #19]
 800b55e:	7504      	strb	r4, [r0, #20]
 800b560:	3016      	adds	r0, #22
 800b562:	f7ff ffdb 	bl	800b51c <memcpy.isra.0>
 800b566:	69a8      	ldr	r0, [r5, #24]
 800b568:	2240      	movs	r2, #64	; 0x40
 800b56a:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800b56e:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800b572:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800b576:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800b57a:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800b57e:	302c      	adds	r0, #44	; 0x2c
 800b580:	f7ff ffcc 	bl	800b51c <memcpy.isra.0>
 800b584:	22a1      	movs	r2, #161	; 0xa1
 800b586:	69ab      	ldr	r3, [r5, #24]
 800b588:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800b58c:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800b590:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800b594:	69ab      	ldr	r3, [r5, #24]
 800b596:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800b59a:	69ab      	ldr	r3, [r5, #24]
 800b59c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	69ab      	ldr	r3, [r5, #24]
 800b5a4:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800b5a8:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800b5ac:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800b5b0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800b5b4:	bd70      	pop	{r4, r5, r6, pc}
 800b5b6:	bf00      	nop
 800b5b8:	080155b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, sl, ip, lr}

0800b5bc <E131Bridge::HandleDmxIn()>:
 800b5bc:	b530      	push	{r4, r5, lr}
 800b5be:	f890 3556 	ldrb.w	r3, [r0, #1366]	; 0x556
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	b085      	sub	sp, #20
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d050      	beq.n	800b66c <E131Bridge::HandleDmxIn()+0xb0>
 800b5ca:	6940      	ldr	r0, [r0, #20]
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	6803      	ldr	r3, [r0, #0]
 800b5d0:	aa02      	add	r2, sp, #8
 800b5d2:	691d      	ldr	r5, [r3, #16]
 800b5d4:	ab03      	add	r3, sp, #12
 800b5d6:	47a8      	blx	r5
 800b5d8:	4601      	mov	r1, r0
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d048      	beq.n	800b670 <E131Bridge::HandleDmxIn()+0xb4>
 800b5de:	9a02      	ldr	r2, [sp, #8]
 800b5e0:	69a0      	ldr	r0, [r4, #24]
 800b5e2:	b293      	uxth	r3, r2
 800b5e4:	f103 056d 	add.w	r5, r3, #109	; 0x6d
 800b5e8:	f445 45e0 	orr.w	r5, r5, #28672	; 0x7000
 800b5ec:	ba6d      	rev16	r5, r5
 800b5ee:	8205      	strh	r5, [r0, #16]
 800b5f0:	f103 0557 	add.w	r5, r3, #87	; 0x57
 800b5f4:	f445 45e0 	orr.w	r5, r5, #28672	; 0x7000
 800b5f8:	ba6d      	rev16	r5, r5
 800b5fa:	84c5      	strh	r5, [r0, #38]	; 0x26
 800b5fc:	f894 555d 	ldrb.w	r5, [r4, #1373]	; 0x55d
 800b600:	330a      	adds	r3, #10
 800b602:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
 800b606:	f894 055c 	ldrb.w	r0, [r4, #1372]	; 0x55c
 800b60a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800b60e:	1c45      	adds	r5, r0, #1
 800b610:	f884 555c 	strb.w	r5, [r4, #1372]	; 0x55c
 800b614:	69a5      	ldr	r5, [r4, #24]
 800b616:	ba5b      	rev16	r3, r3
 800b618:	f885 006f 	strb.w	r0, [r5, #111]	; 0x6f
 800b61c:	f8b4 5554 	ldrh.w	r5, [r4, #1364]	; 0x554
 800b620:	69a0      	ldr	r0, [r4, #24]
 800b622:	ba6d      	rev16	r5, r5
 800b624:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800b628:	f8a0 5071 	strh.w	r5, [r0, #113]	; 0x71
 800b62c:	307d      	adds	r0, #125	; 0x7d
 800b62e:	f7ff ff75 	bl	800b51c <memcpy.isra.0>
 800b632:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800b636:	69a1      	ldr	r1, [r4, #24]
 800b638:	ba53      	rev16	r3, r2
 800b63a:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800b63e:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800b642:	327d      	adds	r2, #125	; 0x7d
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	b292      	uxth	r2, r2
 800b648:	f8d4 3558 	ldr.w	r3, [r4, #1368]	; 0x558
 800b64c:	7820      	ldrb	r0, [r4, #0]
 800b64e:	f003 fff9 	bl	800f644 <udp_send>
 800b652:	4a0f      	ldr	r2, [pc, #60]	; (800b690 <E131Bridge::HandleDmxIn()+0xd4>)
 800b654:	6813      	ldr	r3, [r2, #0]
 800b656:	07d9      	lsls	r1, r3, #31
 800b658:	d408      	bmi.n	800b66c <E131Bridge::HandleDmxIn()+0xb0>
 800b65a:	f043 0301 	orr.w	r3, r3, #1
 800b65e:	6013      	str	r3, [r2, #0]
 800b660:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b664:	f043 0301 	orr.w	r3, r3, #1
 800b668:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800b66c:	b005      	add	sp, #20
 800b66e:	bd30      	pop	{r4, r5, pc}
 800b670:	9b03      	ldr	r3, [sp, #12]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1fa      	bne.n	800b66c <E131Bridge::HandleDmxIn()+0xb0>
 800b676:	4a06      	ldr	r2, [pc, #24]	; (800b690 <E131Bridge::HandleDmxIn()+0xd4>)
 800b678:	6813      	ldr	r3, [r2, #0]
 800b67a:	f023 0301 	bic.w	r3, r3, #1
 800b67e:	6013      	str	r3, [r2, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1f3      	bne.n	800b66c <E131Bridge::HandleDmxIn()+0xb0>
 800b684:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b688:	f023 0301 	bic.w	r3, r3, #1
 800b68c:	e7ec      	b.n	800b668 <E131Bridge::HandleDmxIn()+0xac>
 800b68e:	bf00      	nop
 800b690:	20000718 	andcs	r0, r0, r8, lsl r7

0800b694 <E131Bridge::HandleSynchronization()>:
 800b694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b698:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800b69c:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800b6a0:	ba5b      	rev16	r3, r3
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	d00a      	beq.n	800b6c0 <E131Bridge::HandleSynchronization()+0x2c>
 800b6aa:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d006      	beq.n	800b6c0 <E131Bridge::HandleSynchronization()+0x2c>
 800b6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b6:	4b1b      	ldr	r3, [pc, #108]	; (800b724 <E131Bridge::HandleSynchronization()+0x90>)
 800b6b8:	2102      	movs	r1, #2
 800b6ba:	6818      	ldr	r0, [r3, #0]
 800b6bc:	f006 bf72 	b.w	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 800b6c0:	68e3      	ldr	r3, [r4, #12]
 800b6c2:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800b6c6:	f894 3512 	ldrb.w	r3, [r4, #1298]	; 0x512
 800b6ca:	b30b      	cbz	r3, 800b710 <E131Bridge::HandleSynchronization()+0x7c>
 800b6cc:	4d16      	ldr	r5, [pc, #88]	; (800b728 <E131Bridge::HandleSynchronization()+0x94>)
 800b6ce:	6860      	ldr	r0, [r4, #4]
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	4e16      	ldr	r6, [pc, #88]	; (800b72c <E131Bridge::HandleSynchronization()+0x98>)
 800b6d4:	07da      	lsls	r2, r3, #31
 800b6d6:	bf5c      	itt	pl
 800b6d8:	2301      	movpl	r3, #1
 800b6da:	602b      	strpl	r3, [r5, #0]
 800b6dc:	6803      	ldr	r3, [r0, #0]
 800b6de:	2100      	movs	r1, #0
 800b6e0:	691f      	ldr	r7, [r3, #16]
 800b6e2:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800b6e6:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800b6ea:	47b8      	blx	r7
 800b6ec:	f894 1552 	ldrb.w	r1, [r4, #1362]	; 0x552
 800b6f0:	b931      	cbnz	r1, 800b700 <E131Bridge::HandleSynchronization()+0x6c>
 800b6f2:	6860      	ldr	r0, [r4, #4]
 800b6f4:	6803      	ldr	r3, [r0, #0]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	4798      	blx	r3
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	f884 3552 	strb.w	r3, [r4, #1362]	; 0x552
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	07db      	lsls	r3, r3, #31
 800b704:	bf5c      	itt	pl
 800b706:	2301      	movpl	r3, #1
 800b708:	602b      	strpl	r3, [r5, #0]
 800b70a:	2300      	movs	r3, #0
 800b70c:	f8c6 3600 	str.w	r3, [r6, #1536]	; 0x600
 800b710:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800b712:	b120      	cbz	r0, 800b71e <E131Bridge::HandleSynchronization()+0x8a>
 800b714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b718:	6803      	ldr	r3, [r0, #0]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	4718      	bx	r3
 800b71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b722:	bf00      	nop
 800b724:	20009ce4 	andcs	r9, r0, r4, ror #25
 800b728:	200000fc 	strdcs	r0, [r0], -ip
 800b72c:	20000100 	andcs	r0, r0, r0, lsl #2

0800b730 <E131Bridge::Print()>:
 800b730:	b530      	push	{r4, r5, lr}
 800b732:	2500      	movs	r5, #0
 800b734:	4604      	mov	r4, r0
 800b736:	b08d      	sub	sp, #52	; 0x34
 800b738:	a902      	add	r1, sp, #8
 800b73a:	3024      	adds	r0, #36	; 0x24
 800b73c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800b740:	f000 f8a0 	bl	800b884 <uuid_unparse>
 800b744:	4822      	ldr	r0, [pc, #136]	; (800b7d0 <E131Bridge::Print()+0xa0>)
 800b746:	f007 fb05 	bl	8012d54 <printf>
 800b74a:	4b22      	ldr	r3, [pc, #136]	; (800b7d4 <E131Bridge::Print()+0xa4>)
 800b74c:	4822      	ldr	r0, [pc, #136]	; (800b7d8 <E131Bridge::Print()+0xa8>)
 800b74e:	7819      	ldrb	r1, [r3, #0]
 800b750:	785a      	ldrb	r2, [r3, #1]
 800b752:	f007 faff 	bl	8012d54 <printf>
 800b756:	4821      	ldr	r0, [pc, #132]	; (800b7dc <E131Bridge::Print()+0xac>)
 800b758:	a902      	add	r1, sp, #8
 800b75a:	f007 fafb 	bl	8012d54 <printf>
 800b75e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800b762:	b1bb      	cbz	r3, 800b794 <E131Bridge::Print()+0x64>
 800b764:	481e      	ldr	r0, [pc, #120]	; (800b7e0 <E131Bridge::Print()+0xb0>)
 800b766:	f007 faf5 	bl	8012d54 <printf>
 800b76a:	2301      	movs	r3, #1
 800b76c:	4629      	mov	r1, r5
 800b76e:	4620      	mov	r0, r4
 800b770:	f10d 0206 	add.w	r2, sp, #6
 800b774:	f7ff faea 	bl	800ad4c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800b778:	b160      	cbz	r0, 800b794 <E131Bridge::Print()+0x64>
 800b77a:	f8d4 154c 	ldr.w	r1, [r4, #1356]	; 0x54c
 800b77e:	4a19      	ldr	r2, [pc, #100]	; (800b7e4 <E131Bridge::Print()+0xb4>)
 800b780:	4b19      	ldr	r3, [pc, #100]	; (800b7e8 <E131Bridge::Print()+0xb8>)
 800b782:	481a      	ldr	r0, [pc, #104]	; (800b7ec <E131Bridge::Print()+0xbc>)
 800b784:	42a9      	cmp	r1, r5
 800b786:	bf18      	it	ne
 800b788:	4613      	movne	r3, r2
 800b78a:	4629      	mov	r1, r5
 800b78c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b790:	f007 fae0 	bl	8012d54 <printf>
 800b794:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800b798:	b193      	cbz	r3, 800b7c0 <E131Bridge::Print()+0x90>
 800b79a:	4815      	ldr	r0, [pc, #84]	; (800b7f0 <E131Bridge::Print()+0xc0>)
 800b79c:	f007 fada 	bl	8012d54 <printf>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	f10d 0206 	add.w	r2, sp, #6
 800b7aa:	f7ff facf 	bl	800ad4c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800b7ae:	b138      	cbz	r0, 800b7c0 <E131Bridge::Print()+0x90>
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	f894 355d 	ldrb.w	r3, [r4, #1373]	; 0x55d
 800b7b6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b7ba:	480e      	ldr	r0, [pc, #56]	; (800b7f4 <E131Bridge::Print()+0xc4>)
 800b7bc:	f007 faca 	bl	8012d54 <printf>
 800b7c0:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800b7c4:	b113      	cbz	r3, 800b7cc <E131Bridge::Print()+0x9c>
 800b7c6:	480c      	ldr	r0, [pc, #48]	; (800b7f8 <E131Bridge::Print()+0xc8>)
 800b7c8:	f007 fac4 	bl	8012d54 <printf>
 800b7cc:	b00d      	add	sp, #52	; 0x34
 800b7ce:	bd30      	pop	{r4, r5, pc}
 800b7d0:	08015535 	stmdaeq	r1, {r0, r2, r4, r5, r8, sl, ip, lr}
 800b7d4:	080155c4 	stmdaeq	r1, {r2, r6, r7, r8, sl, ip, lr}
 800b7d8:	0801553d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, sl, ip, lr}
 800b7dc:	08015550 	stmdaeq	r1, {r4, r6, r8, sl, ip, lr}
 800b7e0:	080152d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, ip, lr}
 800b7e4:	0801527f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r9, ip, lr}
 800b7e8:	0801527b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, ip, lr}
 800b7ec:	08015560 	stmdaeq	r1, {r5, r6, r8, sl, ip, lr}
 800b7f0:	0801530f 	stmdaeq	r1, {r0, r1, r2, r3, r8, r9, ip, lr}
 800b7f4:	0801557f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r8, sl, ip, lr}
 800b7f8:	0801559e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, sl, ip, lr}

0800b7fc <uuid_unparse_x>:
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	b530      	push	{r4, r5, lr}
 800b800:	4608      	mov	r0, r1
 800b802:	4611      	mov	r1, r2
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	b08f      	sub	sp, #60	; 0x3c
 800b808:	ba12      	rev	r2, r2
 800b80a:	920a      	str	r2, [sp, #40]	; 0x28
 800b80c:	889a      	ldrh	r2, [r3, #4]
 800b80e:	891c      	ldrh	r4, [r3, #8]
 800b810:	ba52      	rev16	r2, r2
 800b812:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800b816:	88da      	ldrh	r2, [r3, #6]
 800b818:	ba64      	rev16	r4, r4
 800b81a:	ba52      	rev16	r2, r2
 800b81c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800b820:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800b824:	f103 020a 	add.w	r2, r3, #10
 800b828:	f10d 0432 	add.w	r4, sp, #50	; 0x32
 800b82c:	3310      	adds	r3, #16
 800b82e:	4293      	cmp	r3, r2
 800b830:	d122      	bne.n	800b878 <uuid_unparse_x+0x7c>
 800b832:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800b836:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800b83a:	9208      	str	r2, [sp, #32]
 800b83c:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800b840:	0a1b      	lsrs	r3, r3, #8
 800b842:	9207      	str	r2, [sp, #28]
 800b844:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	9206      	str	r2, [sp, #24]
 800b84c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800b850:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800b854:	9205      	str	r2, [sp, #20]
 800b856:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	9204      	str	r2, [sp, #16]
 800b85e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800b862:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800b866:	9203      	str	r2, [sp, #12]
 800b868:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800b86c:	9202      	str	r2, [sp, #8]
 800b86e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b870:	f007 fa80 	bl	8012d74 <sprintf>
 800b874:	b00f      	add	sp, #60	; 0x3c
 800b876:	bd30      	pop	{r4, r5, pc}
 800b878:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b87c:	f804 5b01 	strb.w	r5, [r4], #1
 800b880:	e7d5      	b.n	800b82e <uuid_unparse_x+0x32>
	...

0800b884 <uuid_unparse>:
 800b884:	4a01      	ldr	r2, [pc, #4]	; (800b88c <uuid_unparse+0x8>)
 800b886:	f7ff bfb9 	b.w	800b7fc <uuid_unparse_x>
 800b88a:	bf00      	nop
 800b88c:	080155c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, sl, ip, lr}

0800b890 <ArtNetRdmController::GetUidCount(unsigned int)>:
 800b890:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b894:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800b896:	b100      	cbz	r0, 800b89a <ArtNetRdmController::GetUidCount(unsigned int)+0xa>
 800b898:	6800      	ldr	r0, [r0, #0]
 800b89a:	4770      	bx	lr

0800b89c <ArtNetRdmController::Copy(unsigned int, unsigned char*)>:
 800b89c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b8a0:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800b8a2:	b530      	push	{r4, r5, lr}
 800b8a4:	b130      	cbz	r0, 800b8b4 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x18>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	2406      	movs	r4, #6
 800b8aa:	6845      	ldr	r5, [r0, #4]
 800b8ac:	6801      	ldr	r1, [r0, #0]
 800b8ae:	4361      	muls	r1, r4
 800b8b0:	428b      	cmp	r3, r1
 800b8b2:	d300      	bcc.n	800b8b6 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x1a>
 800b8b4:	bd30      	pop	{r4, r5, pc}
 800b8b6:	5ce9      	ldrb	r1, [r5, r3]
 800b8b8:	54d1      	strb	r1, [r2, r3]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	e7f6      	b.n	800b8ac <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x10>
	...

0800b8c0 <ArtNetRdmController::~ArtNetRdmController()>:
 800b8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c4:	2600      	movs	r6, #0
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	4605      	mov	r5, r0
 800b8ca:	46b0      	mov	r8, r6
 800b8cc:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <ArtNetRdmController::~ArtNetRdmController()+0x44>)
 800b8ce:	f8df 9038 	ldr.w	r9, [pc, #56]	; 800b908 <ArtNetRdmController::~ArtNetRdmController()+0x48>
 800b8d2:	f844 3b7c 	str.w	r3, [r4], #124
 800b8d6:	f8d9 3000 	ldr.w	r3, [r9]
 800b8da:	42b3      	cmp	r3, r6
 800b8dc:	d802      	bhi.n	800b8e4 <ArtNetRdmController::~ArtNetRdmController()+0x24>
 800b8de:	4628      	mov	r0, r5
 800b8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e4:	6827      	ldr	r7, [r4, #0]
 800b8e6:	b157      	cbz	r7, 800b8fe <ArtNetRdmController::~ArtNetRdmController()+0x3e>
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f8c7 8000 	str.w	r8, [r7]
 800b8ee:	b108      	cbz	r0, 800b8f4 <ArtNetRdmController::~ArtNetRdmController()+0x34>
 800b8f0:	f006 ff3e 	bl	8012770 <operator delete[](void*)>
 800b8f4:	4638      	mov	r0, r7
 800b8f6:	f006 ff39 	bl	801276c <operator delete(void*)>
 800b8fa:	f8c4 8000 	str.w	r8, [r4]
 800b8fe:	3601      	adds	r6, #1
 800b900:	3404      	adds	r4, #4
 800b902:	e7e8      	b.n	800b8d6 <ArtNetRdmController::~ArtNetRdmController()+0x16>
 800b904:	08015608 	stmdaeq	r1, {r3, r9, sl, ip, lr}
 800b908:	2000081c 	andcs	r0, r0, ip, lsl r8

0800b90c <ArtNetRdmController::~ArtNetRdmController()>:
 800b90c:	b510      	push	{r4, lr}
 800b90e:	4604      	mov	r4, r0
 800b910:	f7ff ffd6 	bl	800b8c0 <ArtNetRdmController::~ArtNetRdmController()>
 800b914:	4620      	mov	r0, r4
 800b916:	f006 ff29 	bl	801276c <operator delete(void*)>
 800b91a:	4620      	mov	r0, r4
 800b91c:	bd10      	pop	{r4, pc}

0800b91e <ArtNetRdmController::Full(unsigned int)>:
 800b91e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b922:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800b924:	b108      	cbz	r0, 800b92a <ArtNetRdmController::Full(unsigned int)+0xc>
 800b926:	f000 ba2f 	b.w	800bd88 <RDMDiscovery::Full()>
 800b92a:	4770      	bx	lr

0800b92c <ArtNetRdmController::Handler(unsigned int, unsigned char const*)>:
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	460d      	mov	r5, r1
 800b930:	4614      	mov	r4, r2
 800b932:	b1f2      	cbz	r2, 800b972 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x46>
 800b934:	f007 fd32 	bl	801339c <fwdgt_counter_reload>
 800b938:	4628      	mov	r0, r5
 800b93a:	f000 fdfb 	bl	800c534 <Rdm::Receive(unsigned int)>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d1f8      	bne.n	800b934 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x8>
 800b942:	4621      	mov	r1, r4
 800b944:	7863      	ldrb	r3, [r4, #1]
 800b946:	4a0c      	ldr	r2, [pc, #48]	; (800b978 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x4c>)
 800b948:	3b01      	subs	r3, #1
 800b94a:	1cd8      	adds	r0, r3, #3
 800b94c:	d10c      	bne.n	800b968 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x3c>
 800b94e:	7862      	ldrb	r2, [r4, #1]
 800b950:	4628      	mov	r0, r5
 800b952:	490a      	ldr	r1, [pc, #40]	; (800b97c <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x50>)
 800b954:	3202      	adds	r2, #2
 800b956:	f000 fdfd 	bl	800c554 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800b95a:	4628      	mov	r0, r5
 800b95c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b960:	f64e 2160 	movw	r1, #60000	; 0xea60
 800b964:	f000 bdee 	b.w	800c544 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800b968:	f811 0b01 	ldrb.w	r0, [r1], #1
 800b96c:	f802 0b01 	strb.w	r0, [r2], #1
 800b970:	e7ea      	b.n	800b948 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x1c>
 800b972:	4610      	mov	r0, r2
 800b974:	bd38      	pop	{r3, r4, r5, pc}
 800b976:	bf00      	nop
 800b978:	2000071d 	andcs	r0, r0, sp, lsl r7
 800b97c:	2000071c 	andcs	r0, r0, ip, lsl r7

0800b980 <ArtNetRdmController::ArtNetRdmController(unsigned int)>:
 800b980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	4606      	mov	r6, r0
 800b986:	46b3      	mov	fp, r6
 800b988:	f04f 0a00 	mov.w	sl, #0
 800b98c:	1d07      	adds	r7, r0, #4
 800b98e:	4638      	mov	r0, r7
 800b990:	460d      	mov	r5, r1
 800b992:	f000 fb09 	bl	800bfa8 <RDMDeviceController::RDMDeviceController()>
 800b996:	4b20      	ldr	r3, [pc, #128]	; (800ba18 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x98>)
 800b998:	46d1      	mov	r9, sl
 800b99a:	f84b 3b7c 	str.w	r3, [fp], #124
 800b99e:	46d8      	mov	r8, fp
 800b9a0:	4b1e      	ldr	r3, [pc, #120]	; (800ba1c <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x9c>)
 800b9a2:	601d      	str	r5, [r3, #0]
 800b9a4:	45aa      	cmp	sl, r5
 800b9a6:	d108      	bne.n	800b9ba <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x3a>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	2d03      	cmp	r5, #3
 800b9ac:	d92f      	bls.n	800ba0e <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x8e>
 800b9ae:	22cc      	movs	r2, #204	; 0xcc
 800b9b0:	4b1b      	ldr	r3, [pc, #108]	; (800ba20 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0xa0>)
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	701a      	strb	r2, [r3, #0]
 800b9b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ba:	f44f 7090 	mov.w	r0, #288	; 0x120
 800b9be:	f006 fed9 	bl	8012774 <operator new(unsigned int)>
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	f8c0 9000 	str.w	r9, [r0]
 800b9c8:	2030      	movs	r0, #48	; 0x30
 800b9ca:	f006 fed5 	bl	8012778 <operator new[](unsigned int)>
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	6060      	str	r0, [r4, #4]
 800b9d2:	6863      	ldr	r3, [r4, #4]
 800b9d4:	4813      	ldr	r0, [pc, #76]	; (800ba24 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0xa4>)
 800b9d6:	4413      	add	r3, r2
 800b9d8:	1e59      	subs	r1, r3, #1
 800b9da:	3305      	adds	r3, #5
 800b9dc:	428b      	cmp	r3, r1
 800b9de:	d111      	bne.n	800ba04 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x84>
 800b9e0:	3206      	adds	r2, #6
 800b9e2:	2a30      	cmp	r2, #48	; 0x30
 800b9e4:	d1f5      	bne.n	800b9d2 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x52>
 800b9e6:	f104 000c 	add.w	r0, r4, #12
 800b9ea:	f8c4 a008 	str.w	sl, [r4, #8]
 800b9ee:	f000 fb6b 	bl	800c0c8 <RDMMessage::RDMMessage()>
 800b9f2:	4639      	mov	r1, r7
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f848 4b04 	str.w	r4, [r8], #4
 800b9fa:	f000 f850 	bl	800ba9e <RDMDiscovery::SetUid(unsigned char const*)>
 800b9fe:	f10a 0a01 	add.w	sl, sl, #1
 800ba02:	e7cf      	b.n	800b9a4 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x24>
 800ba04:	f810 cb01 	ldrb.w	ip, [r0], #1
 800ba08:	f801 cf01 	strb.w	ip, [r1, #1]!
 800ba0c:	e7e6      	b.n	800b9dc <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x5c>
 800ba0e:	f84b 3025 	str.w	r3, [fp, r5, lsl #2]
 800ba12:	3501      	adds	r5, #1
 800ba14:	e7c9      	b.n	800b9aa <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x2a>
 800ba16:	bf00      	nop
 800ba18:	08015608 	stmdaeq	r1, {r3, r9, sl, ip, lr}
 800ba1c:	2000081c 	andcs	r0, r0, ip, lsl r8
 800ba20:	2000071c 	andcs	r0, r0, ip, lsl r7
 800ba24:	080155f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, sl, ip, lr}

0800ba28 <memcmp.constprop.0>:
 800ba28:	b510      	push	{r4, lr}
 800ba2a:	1e4a      	subs	r2, r1, #1
 800ba2c:	1e43      	subs	r3, r0, #1
 800ba2e:	3105      	adds	r1, #5
 800ba30:	428a      	cmp	r2, r1
 800ba32:	d101      	bne.n	800ba38 <memcmp.constprop.0+0x10>
 800ba34:	2000      	movs	r0, #0
 800ba36:	e006      	b.n	800ba46 <memcmp.constprop.0+0x1e>
 800ba38:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ba3c:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800ba40:	42a0      	cmp	r0, r4
 800ba42:	d0f5      	beq.n	800ba30 <memcmp.constprop.0+0x8>
 800ba44:	1b00      	subs	r0, r0, r4
 800ba46:	bd10      	pop	{r4, pc}

0800ba48 <memcpy.constprop.0.isra.0>:
 800ba48:	3801      	subs	r0, #1
 800ba4a:	1d8b      	adds	r3, r1, #6
 800ba4c:	4299      	cmp	r1, r3
 800ba4e:	d100      	bne.n	800ba52 <memcpy.constprop.0.isra.0+0xa>
 800ba50:	4770      	bx	lr
 800ba52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba56:	f800 2f01 	strb.w	r2, [r0, #1]!
 800ba5a:	e7f7      	b.n	800ba4c <memcpy.constprop.0.isra.0+0x4>

0800ba5c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>:
 800ba5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba60:	6805      	ldr	r5, [r0, #0]
 800ba62:	4604      	mov	r4, r0
 800ba64:	2d08      	cmp	r5, #8
 800ba66:	460e      	mov	r6, r1
 800ba68:	d017      	beq.n	800ba9a <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800ba6a:	2700      	movs	r7, #0
 800ba6c:	f04f 0906 	mov.w	r9, #6
 800ba70:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ba74:	42bd      	cmp	r5, r7
 800ba76:	d108      	bne.n	800ba8a <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x2e>
 800ba78:	1c6b      	adds	r3, r5, #1
 800ba7a:	4631      	mov	r1, r6
 800ba7c:	fb09 8005 	mla	r0, r9, r5, r8
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba86:	f7ff bfdf 	b.w	800ba48 <memcpy.constprop.0.isra.0>
 800ba8a:	4631      	mov	r1, r6
 800ba8c:	fb09 8007 	mla	r0, r9, r7, r8
 800ba90:	f7ff ffca 	bl	800ba28 <memcmp.constprop.0>
 800ba94:	b108      	cbz	r0, 800ba9a <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800ba96:	3701      	adds	r7, #1
 800ba98:	e7ec      	b.n	800ba74 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x18>
 800ba9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ba9e <RDMDiscovery::SetUid(unsigned char const*)>:
 800ba9e:	b538      	push	{r3, r4, r5, lr}
 800baa0:	4604      	mov	r4, r0
 800baa2:	460d      	mov	r5, r1
 800baa4:	f200 100b 	addw	r0, r0, #267	; 0x10b
 800baa8:	f7ff ffce 	bl	800ba48 <memcpy.constprop.0.isra.0>
 800baac:	4629      	mov	r1, r5
 800baae:	f104 000c 	add.w	r0, r4, #12
 800bab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bab6:	f000 bb25 	b.w	800c104 <RDMMessage::SetSrcUid(unsigned char const*)>

0800baba <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>:
 800baba:	b570      	push	{r4, r5, r6, lr}
 800babc:	780b      	ldrb	r3, [r1, #0]
 800babe:	2bfe      	cmp	r3, #254	; 0xfe
 800bac0:	d001      	beq.n	800bac6 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xc>
 800bac2:	2000      	movs	r0, #0
 800bac4:	bd70      	pop	{r4, r5, r6, pc}
 800bac6:	7a48      	ldrb	r0, [r1, #9]
 800bac8:	7a0b      	ldrb	r3, [r1, #8]
 800baca:	1e54      	subs	r4, r2, #1
 800bacc:	4003      	ands	r3, r0
 800bace:	7013      	strb	r3, [r2, #0]
 800bad0:	7ac8      	ldrb	r0, [r1, #11]
 800bad2:	7a8b      	ldrb	r3, [r1, #10]
 800bad4:	3205      	adds	r2, #5
 800bad6:	4003      	ands	r3, r0
 800bad8:	f802 3c04 	strb.w	r3, [r2, #-4]
 800badc:	7b48      	ldrb	r0, [r1, #13]
 800bade:	7b0b      	ldrb	r3, [r1, #12]
 800bae0:	4003      	ands	r3, r0
 800bae2:	f802 3c03 	strb.w	r3, [r2, #-3]
 800bae6:	7bc8      	ldrb	r0, [r1, #15]
 800bae8:	7b8b      	ldrb	r3, [r1, #14]
 800baea:	4003      	ands	r3, r0
 800baec:	f802 3c02 	strb.w	r3, [r2, #-2]
 800baf0:	7c48      	ldrb	r0, [r1, #17]
 800baf2:	7c0b      	ldrb	r3, [r1, #16]
 800baf4:	4003      	ands	r3, r0
 800baf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bafa:	7cc8      	ldrb	r0, [r1, #19]
 800bafc:	7c8b      	ldrb	r3, [r1, #18]
 800bafe:	4003      	ands	r3, r0
 800bb00:	7013      	strb	r3, [r2, #0]
 800bb02:	7d0b      	ldrb	r3, [r1, #20]
 800bb04:	7d88      	ldrb	r0, [r1, #22]
 800bb06:	7dcd      	ldrb	r5, [r1, #23]
 800bb08:	7d49      	ldrb	r1, [r1, #21]
 800bb0a:	4019      	ands	r1, r3
 800bb0c:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800bb10:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800bb14:	4433      	add	r3, r6
 800bb16:	4294      	cmp	r4, r2
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	d1f9      	bne.n	800bb10 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x56>
 800bb1c:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
 800bb20:	d1cf      	bne.n	800bac2 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x8>
 800bb22:	4028      	ands	r0, r5
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	1ac3      	subs	r3, r0, r3
 800bb28:	4258      	negs	r0, r3
 800bb2a:	4158      	adcs	r0, r3
 800bb2c:	e7ca      	b.n	800bac4 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xa>
	...

0800bb30 <RDMDiscovery::QuickFind(unsigned char const*)>:
 800bb30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb32:	4605      	mov	r5, r0
 800bb34:	460e      	mov	r6, r1
 800bb36:	f105 040c 	add.w	r4, r5, #12
 800bb3a:	f007 fc2f 	bl	801339c <fwdgt_counter_reload>
 800bb3e:	2110      	movs	r1, #16
 800bb40:	4620      	mov	r0, r4
 800bb42:	f000 fae7 	bl	800c114 <RDMMessage::SetCc(unsigned char)>
 800bb46:	2102      	movs	r1, #2
 800bb48:	4620      	mov	r0, r4
 800bb4a:	f000 fae5 	bl	800c118 <RDMMessage::SetPid(unsigned short)>
 800bb4e:	4631      	mov	r1, r6
 800bb50:	4620      	mov	r0, r4
 800bb52:	f000 fadb 	bl	800c10c <RDMMessage::SetDstUid(unsigned char const*)>
 800bb56:	2200      	movs	r2, #0
 800bb58:	4620      	mov	r0, r4
 800bb5a:	4611      	mov	r1, r2
 800bb5c:	f000 fae0 	bl	800c120 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800bb60:	4620      	mov	r0, r4
 800bb62:	68a9      	ldr	r1, [r5, #8]
 800bb64:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800bb68:	f000 faec 	bl	800c144 <RDMMessage::Send(unsigned int, unsigned int)>
 800bb6c:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800bb70:	68a8      	ldr	r0, [r5, #8]
 800bb72:	f000 fce7 	bl	800c544 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800bb76:	b160      	cbz	r0, 800bb92 <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800bb78:	7d03      	ldrb	r3, [r0, #20]
 800bb7a:	2b11      	cmp	r3, #17
 800bb7c:	d109      	bne.n	800bb92 <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800bb7e:	f100 0109 	add.w	r1, r0, #9
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7ff ff50 	bl	800ba28 <memcmp.constprop.0>
 800bb88:	b918      	cbnz	r0, 800bb92 <RDMDiscovery::QuickFind(unsigned char const*)+0x62>
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	f7ff ff65 	bl	800ba5c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800bb92:	f007 fc03 	bl	801339c <fwdgt_counter_reload>
 800bb96:	4620      	mov	r0, r4
 800bb98:	491a      	ldr	r1, [pc, #104]	; (800bc04 <RDMDiscovery::QuickFind(unsigned char const*)+0xd4>)
 800bb9a:	f000 fab7 	bl	800c10c <RDMMessage::SetDstUid(unsigned char const*)>
 800bb9e:	4620      	mov	r0, r4
 800bba0:	2110      	movs	r1, #16
 800bba2:	f000 fab7 	bl	800c114 <RDMMessage::SetCc(unsigned char)>
 800bba6:	4620      	mov	r0, r4
 800bba8:	2101      	movs	r1, #1
 800bbaa:	f000 fab5 	bl	800c118 <RDMMessage::SetPid(unsigned short)>
 800bbae:	4620      	mov	r0, r4
 800bbb0:	220c      	movs	r2, #12
 800bbb2:	f205 1111 	addw	r1, r5, #273	; 0x111
 800bbb6:	f000 fab3 	bl	800c120 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800bbc0:	68a9      	ldr	r1, [r5, #8]
 800bbc2:	f000 fabf 	bl	800c144 <RDMMessage::Send(unsigned int, unsigned int)>
 800bbc6:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800bbca:	68a8      	ldr	r0, [r5, #8]
 800bbcc:	f000 fcba 	bl	800c544 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800bbd0:	4604      	mov	r4, r0
 800bbd2:	f007 fbe3 	bl	801339c <fwdgt_counter_reload>
 800bbd6:	b14c      	cbz	r4, 800bbec <RDMDiscovery::QuickFind(unsigned char const*)+0xbc>
 800bbd8:	466a      	mov	r2, sp
 800bbda:	4621      	mov	r1, r4
 800bbdc:	4628      	mov	r0, r5
 800bbde:	f7ff ff6c 	bl	800baba <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800bbe2:	b130      	cbz	r0, 800bbf2 <RDMDiscovery::QuickFind(unsigned char const*)+0xc2>
 800bbe4:	4669      	mov	r1, sp
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	f7ff ffa2 	bl	800bb30 <RDMDiscovery::QuickFind(unsigned char const*)>
 800bbec:	2000      	movs	r0, #0
 800bbee:	b002      	add	sp, #8
 800bbf0:	bd70      	pop	{r4, r5, r6, pc}
 800bbf2:	466a      	mov	r2, sp
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	f7ff ff5f 	bl	800baba <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800bbfc:	f080 0001 	eor.w	r0, r0, #1
 800bc00:	b2c0      	uxtb	r0, r0
 800bc02:	e7f4      	b.n	800bbee <RDMDiscovery::QuickFind(unsigned char const*)+0xbe>
 800bc04:	08015620 	stmdaeq	r1, {r5, r9, sl, ip, lr}

0800bc08 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	4691      	mov	r9, r2
 800bc0e:	469b      	mov	fp, r3
 800bc10:	b085      	sub	sp, #20
 800bc12:	4605      	mov	r5, r0
 800bc14:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 800bc18:	f007 fbc0 	bl	801339c <fwdgt_counter_reload>
 800bc1c:	45c3      	cmp	fp, r8
 800bc1e:	bf08      	it	eq
 800bc20:	45b9      	cmpeq	r9, r7
 800bc22:	ea4f 430b 	mov.w	r3, fp, lsl #16
 800bc26:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800bc2a:	ea4f 4209 	mov.w	r2, r9, lsl #16
 800bc2e:	4c54      	ldr	r4, [pc, #336]	; (800bd80 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x178>)
 800bc30:	f105 060c 	add.w	r6, r5, #12
 800bc34:	ba12      	rev	r2, r2
 800bc36:	ba1b      	rev	r3, r3
 800bc38:	d136      	bne.n	800bca8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0xa0>
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	a802      	add	r0, sp, #8
 800bc3e:	e9c4 3200 	strd	r3, r2, [r4]
 800bc42:	f7ff ff01 	bl	800ba48 <memcpy.constprop.0.isra.0>
 800bc46:	2110      	movs	r1, #16
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f000 fa63 	bl	800c114 <RDMMessage::SetCc(unsigned char)>
 800bc4e:	2102      	movs	r1, #2
 800bc50:	4630      	mov	r0, r6
 800bc52:	f000 fa61 	bl	800c118 <RDMMessage::SetPid(unsigned short)>
 800bc56:	4630      	mov	r0, r6
 800bc58:	a902      	add	r1, sp, #8
 800bc5a:	f000 fa57 	bl	800c10c <RDMMessage::SetDstUid(unsigned char const*)>
 800bc5e:	2200      	movs	r2, #0
 800bc60:	4630      	mov	r0, r6
 800bc62:	4611      	mov	r1, r2
 800bc64:	f000 fa5c 	bl	800c120 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800bc68:	4630      	mov	r0, r6
 800bc6a:	68a9      	ldr	r1, [r5, #8]
 800bc6c:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800bc70:	f000 fa68 	bl	800c144 <RDMMessage::Send(unsigned int, unsigned int)>
 800bc74:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800bc78:	68a8      	ldr	r0, [r5, #8]
 800bc7a:	f000 fc63 	bl	800c544 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d07c      	beq.n	800bd7c <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x174>
 800bc82:	7d03      	ldrb	r3, [r0, #20]
 800bc84:	2b11      	cmp	r3, #17
 800bc86:	d003      	beq.n	800bc90 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x88>
 800bc88:	2000      	movs	r0, #0
 800bc8a:	b005      	add	sp, #20
 800bc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc90:	f100 0109 	add.w	r1, r0, #9
 800bc94:	a802      	add	r0, sp, #8
 800bc96:	f7ff fec7 	bl	800ba28 <memcmp.constprop.0>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d1f4      	bne.n	800bc88 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800bc9e:	4628      	mov	r0, r5
 800bca0:	a902      	add	r1, sp, #8
 800bca2:	f7ff fedb 	bl	800ba5c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800bca6:	e7ef      	b.n	800bc88 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800bca8:	f205 1a11 	addw	sl, r5, #273	; 0x111
 800bcac:	4621      	mov	r1, r4
 800bcae:	4650      	mov	r0, sl
 800bcb0:	e9c4 3200 	strd	r3, r2, [r4]
 800bcb4:	f7ff fec8 	bl	800ba48 <memcpy.constprop.0.isra.0>
 800bcb8:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800bcbc:	ea43 4317 	orr.w	r3, r3, r7, lsr #16
 800bcc0:	043a      	lsls	r2, r7, #16
 800bcc2:	ba1b      	rev	r3, r3
 800bcc4:	ba12      	rev	r2, r2
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	f205 1017 	addw	r0, r5, #279	; 0x117
 800bccc:	e9c4 3200 	strd	r3, r2, [r4]
 800bcd0:	f7ff feba 	bl	800ba48 <memcpy.constprop.0.isra.0>
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	492b      	ldr	r1, [pc, #172]	; (800bd84 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x17c>)
 800bcd8:	f000 fa18 	bl	800c10c <RDMMessage::SetDstUid(unsigned char const*)>
 800bcdc:	2110      	movs	r1, #16
 800bcde:	4630      	mov	r0, r6
 800bce0:	f000 fa18 	bl	800c114 <RDMMessage::SetCc(unsigned char)>
 800bce4:	2101      	movs	r1, #1
 800bce6:	4630      	mov	r0, r6
 800bce8:	f000 fa16 	bl	800c118 <RDMMessage::SetPid(unsigned short)>
 800bcec:	220c      	movs	r2, #12
 800bcee:	4651      	mov	r1, sl
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f000 fa15 	bl	800c120 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800bcf6:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	68a9      	ldr	r1, [r5, #8]
 800bcfe:	f000 fa21 	bl	800c144 <RDMMessage::Send(unsigned int, unsigned int)>
 800bd02:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800bd06:	68a8      	ldr	r0, [r5, #8]
 800bd08:	f000 fc1c 	bl	800c544 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800bd0c:	4601      	mov	r1, r0
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d0ba      	beq.n	800bc88 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800bd12:	4628      	mov	r0, r5
 800bd14:	aa02      	add	r2, sp, #8
 800bd16:	f7ff fed0 	bl	800baba <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800bd1a:	bb40      	cbnz	r0, 800bd6e <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x166>
 800bd1c:	ea4f 0a58 	mov.w	sl, r8, lsr #1
 800bd20:	ea4f 035b 	mov.w	r3, fp, lsr #1
 800bd24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd28:	f40a 4a80 	and.w	sl, sl, #16384	; 0x4000
 800bd2c:	eb19 0607 	adds.w	r6, r9, r7
 800bd30:	449a      	add	sl, r3
 800bd32:	f3c8 020e 	ubfx	r2, r8, #0, #15
 800bd36:	f3cb 030e 	ubfx	r3, fp, #0, #15
 800bd3a:	eb43 0302 	adc.w	r3, r3, r2
 800bd3e:	0876      	lsrs	r6, r6, #1
 800bd40:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
 800bd44:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 800bd48:	464a      	mov	r2, r9
 800bd4a:	465b      	mov	r3, fp
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	e9cd 6a00 	strd	r6, sl, [sp]
 800bd52:	f7ff ff59 	bl	800bc08 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800bd56:	1c72      	adds	r2, r6, #1
 800bd58:	4604      	mov	r4, r0
 800bd5a:	e9cd 7800 	strd	r7, r8, [sp]
 800bd5e:	4628      	mov	r0, r5
 800bd60:	f14a 0300 	adc.w	r3, sl, #0
 800bd64:	f7ff ff50 	bl	800bc08 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800bd68:	4320      	orrs	r0, r4
 800bd6a:	b2c0      	uxtb	r0, r0
 800bd6c:	e78d      	b.n	800bc8a <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800bd6e:	4628      	mov	r0, r5
 800bd70:	a902      	add	r1, sp, #8
 800bd72:	f7ff fedd 	bl	800bb30 <RDMDiscovery::QuickFind(unsigned char const*)>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d1d0      	bne.n	800bd1c <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x114>
 800bd7a:	e785      	b.n	800bc88 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	e784      	b.n	800bc8a <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800bd80:	20000820 	andcs	r0, r0, r0, lsr #16
 800bd84:	08015620 	stmdaeq	r1, {r5, r9, sl, ip, lr}

0800bd88 <RDMDiscovery::Full()>:
 800bd88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	2500      	movs	r5, #0
 800bd8e:	2606      	movs	r6, #6
 800bd90:	4f2a      	ldr	r7, [pc, #168]	; (800be3c <RDMDiscovery::Full()+0xb4>)
 800bd92:	6823      	ldr	r3, [r4, #0]
 800bd94:	429d      	cmp	r5, r3
 800bd96:	d349      	bcc.n	800be2c <RDMDiscovery::Full()+0xa4>
 800bd98:	2600      	movs	r6, #0
 800bd9a:	4625      	mov	r5, r4
 800bd9c:	f845 6b0c 	str.w	r6, [r5], #12
 800bda0:	f007 fafc 	bl	801339c <fwdgt_counter_reload>
 800bda4:	4628      	mov	r0, r5
 800bda6:	4925      	ldr	r1, [pc, #148]	; (800be3c <RDMDiscovery::Full()+0xb4>)
 800bda8:	f000 f9b0 	bl	800c10c <RDMMessage::SetDstUid(unsigned char const*)>
 800bdac:	4628      	mov	r0, r5
 800bdae:	2110      	movs	r1, #16
 800bdb0:	f000 f9b0 	bl	800c114 <RDMMessage::SetCc(unsigned char)>
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	2103      	movs	r1, #3
 800bdb8:	f000 f9ae 	bl	800c118 <RDMMessage::SetPid(unsigned short)>
 800bdbc:	4632      	mov	r2, r6
 800bdbe:	4631      	mov	r1, r6
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	f000 f9ad 	bl	800c120 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800bdc6:	4632      	mov	r2, r6
 800bdc8:	4628      	mov	r0, r5
 800bdca:	68a1      	ldr	r1, [r4, #8]
 800bdcc:	f000 f9ba 	bl	800c144 <RDMMessage::Send(unsigned int, unsigned int)>
 800bdd0:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800bdd4:	68a0      	ldr	r0, [r4, #8]
 800bdd6:	f000 fbb5 	bl	800c544 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800bdda:	f007 fadf 	bl	801339c <fwdgt_counter_reload>
 800bdde:	4631      	mov	r1, r6
 800bde0:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800bde4:	f008 fa26 	bl	8014234 <udelay(unsigned int, unsigned int)>
 800bde8:	f007 fad8 	bl	801339c <fwdgt_counter_reload>
 800bdec:	4632      	mov	r2, r6
 800bdee:	4628      	mov	r0, r5
 800bdf0:	68a1      	ldr	r1, [r4, #8]
 800bdf2:	f000 f9a7 	bl	800c144 <RDMMessage::Send(unsigned int, unsigned int)>
 800bdf6:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800bdfa:	68a0      	ldr	r0, [r4, #8]
 800bdfc:	f000 fba2 	bl	800c544 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800be00:	f007 facc 	bl	801339c <fwdgt_counter_reload>
 800be04:	4631      	mov	r1, r6
 800be06:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800be0a:	f008 fa13 	bl	8014234 <udelay(unsigned int, unsigned int)>
 800be0e:	f007 fac5 	bl	801339c <fwdgt_counter_reload>
 800be12:	f06f 0201 	mvn.w	r2, #1
 800be16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be1a:	4620      	mov	r0, r4
 800be1c:	e9cd 2300 	strd	r2, r3, [sp]
 800be20:	2200      	movs	r2, #0
 800be22:	2300      	movs	r3, #0
 800be24:	f7ff fef0 	bl	800bc08 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800be28:	b003      	add	sp, #12
 800be2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be2c:	6860      	ldr	r0, [r4, #4]
 800be2e:	4639      	mov	r1, r7
 800be30:	fb06 0005 	mla	r0, r6, r5, r0
 800be34:	f7ff fe08 	bl	800ba48 <memcpy.constprop.0.isra.0>
 800be38:	3501      	adds	r5, #1
 800be3a:	e7aa      	b.n	800bd92 <RDMDiscovery::Full()+0xa>
 800be3c:	08015620 	stmdaeq	r1, {r5, r9, sl, ip, lr}

0800be40 <RDMDevice::RDMDevice()>:
 800be40:	4a33      	ldr	r2, [pc, #204]	; (800bf10 <RDMDevice::RDMDevice()+0xd0>)
 800be42:	2300      	movs	r3, #0
 800be44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be46:	4604      	mov	r4, r0
 800be48:	4611      	mov	r1, r2
 800be4a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800be4e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800be52:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
 800be56:	6743      	str	r3, [r0, #116]	; 0x74
 800be58:	4613      	mov	r3, r2
 800be5a:	7818      	ldrb	r0, [r3, #0]
 800be5c:	3201      	adds	r2, #1
 800be5e:	2800      	cmp	r0, #0
 800be60:	d1fa      	bne.n	800be58 <RDMDevice::RDMDevice()+0x18>
 800be62:	1a5b      	subs	r3, r3, r1
 800be64:	2b20      	cmp	r3, #32
 800be66:	bf28      	it	cs
 800be68:	2320      	movcs	r3, #32
 800be6a:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 800be6e:	4629      	mov	r1, r5
 800be70:	461a      	mov	r2, r3
 800be72:	4827      	ldr	r0, [pc, #156]	; (800bf10 <RDMDevice::RDMDevice()+0xd0>)
 800be74:	3a01      	subs	r2, #1
 800be76:	d23b      	bcs.n	800bef0 <RDMDevice::RDMDevice()+0xb0>
 800be78:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800be7c:	4b25      	ldr	r3, [pc, #148]	; (800bf14 <RDMDevice::RDMDevice()+0xd4>)
 800be7e:	4669      	mov	r1, sp
 800be80:	781a      	ldrb	r2, [r3, #0]
 800be82:	7022      	strb	r2, [r4, #0]
 800be84:	785b      	ldrb	r3, [r3, #1]
 800be86:	7063      	strb	r3, [r4, #1]
 800be88:	4b23      	ldr	r3, [pc, #140]	; (800bf18 <RDMDevice::RDMDevice()+0xd8>)
 800be8a:	6818      	ldr	r0, [r3, #0]
 800be8c:	f004 f8a6 	bl	800ffdc <Network::MacAddressCopyTo(unsigned char*)>
 800be90:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800be94:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800be98:	70a3      	strb	r3, [r4, #2]
 800be9a:	7263      	strb	r3, [r4, #9]
 800be9c:	4b1f      	ldr	r3, [pc, #124]	; (800bf1c <RDMDevice::RDMDevice()+0xdc>)
 800be9e:	70e2      	strb	r2, [r4, #3]
 800bea0:	7222      	strb	r2, [r4, #8]
 800bea2:	461a      	mov	r2, r3
 800bea4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800bea8:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800beac:	7121      	strb	r1, [r4, #4]
 800beae:	7160      	strb	r0, [r4, #5]
 800beb0:	71a0      	strb	r0, [r4, #6]
 800beb2:	71e1      	strb	r1, [r4, #7]
 800beb4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800beb8:	2900      	cmp	r1, #0
 800beba:	d1fb      	bne.n	800beb4 <RDMDevice::RDMDevice()+0x74>
 800bebc:	1a9b      	subs	r3, r3, r2
 800bebe:	2b20      	cmp	r3, #32
 800bec0:	bf28      	it	cs
 800bec2:	2320      	movcs	r3, #32
 800bec4:	461a      	mov	r2, r3
 800bec6:	4915      	ldr	r1, [pc, #84]	; (800bf1c <RDMDevice::RDMDevice()+0xdc>)
 800bec8:	3a01      	subs	r2, #1
 800beca:	d216      	bcs.n	800befa <RDMDevice::RDMDevice()+0xba>
 800becc:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800bed0:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 800bed4:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bed6:	2314      	movs	r3, #20
 800bed8:	4a11      	ldr	r2, [pc, #68]	; (800bf20 <RDMDevice::RDMDevice()+0xe0>)
 800beda:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800bede:	f104 0165 	add.w	r1, r4, #101	; 0x65
 800bee2:	f104 0351 	add.w	r3, r4, #81	; 0x51
 800bee6:	4299      	cmp	r1, r3
 800bee8:	d10c      	bne.n	800bf04 <RDMDevice::RDMDevice()+0xc4>
 800beea:	4620      	mov	r0, r4
 800beec:	b002      	add	sp, #8
 800beee:	bd70      	pop	{r4, r5, r6, pc}
 800bef0:	f810 6b01 	ldrb.w	r6, [r0], #1
 800bef4:	f801 6b01 	strb.w	r6, [r1], #1
 800bef8:	e7bc      	b.n	800be74 <RDMDevice::RDMDevice()+0x34>
 800befa:	f811 0b01 	ldrb.w	r0, [r1], #1
 800befe:	f805 0b01 	strb.w	r0, [r5], #1
 800bf02:	e7e1      	b.n	800bec8 <RDMDevice::RDMDevice()+0x88>
 800bf04:	f812 0b01 	ldrb.w	r0, [r2], #1
 800bf08:	f803 0b01 	strb.w	r0, [r3], #1
 800bf0c:	e7eb      	b.n	800bee6 <RDMDevice::RDMDevice()+0xa6>
 800bf0e:	bf00      	nop
 800bf10:	08015734 	stmdaeq	r1, {r2, r4, r5, r8, r9, sl, ip, lr}
 800bf14:	08015732 	stmdaeq	r1, {r1, r4, r5, r8, r9, sl, ip, lr}
 800bf18:	200095c0 	andcs	r9, r0, r0, asr #11
 800bf1c:	08015211 	stmdaeq	r1, {r0, r4, r9, ip, lr}
 800bf20:	080156fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, sl, ip, lr}

0800bf24 <RDMDevice::Print()>:
 800bf24:	b513      	push	{r0, r1, r4, lr}
 800bf26:	4604      	mov	r4, r0
 800bf28:	4818      	ldr	r0, [pc, #96]	; (800bf8c <RDMDevice::Print()+0x68>)
 800bf2a:	f006 ff13 	bl	8012d54 <printf>
 800bf2e:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800bf32:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800bf36:	4816      	ldr	r0, [pc, #88]	; (800bf90 <RDMDevice::Print()+0x6c>)
 800bf38:	f006 ff0c 	bl	8012d54 <printf>
 800bf3c:	7862      	ldrb	r2, [r4, #1]
 800bf3e:	7821      	ldrb	r1, [r4, #0]
 800bf40:	4814      	ldr	r0, [pc, #80]	; (800bf94 <RDMDevice::Print()+0x70>)
 800bf42:	f006 ff07 	bl	8012d54 <printf>
 800bf46:	79a3      	ldrb	r3, [r4, #6]
 800bf48:	7a22      	ldrb	r2, [r4, #8]
 800bf4a:	7a61      	ldrb	r1, [r4, #9]
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	4812      	ldr	r0, [pc, #72]	; (800bf98 <RDMDevice::Print()+0x74>)
 800bf50:	79e3      	ldrb	r3, [r4, #7]
 800bf52:	f006 feff 	bl	8012d54 <printf>
 800bf56:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800bf5a:	f104 020a 	add.w	r2, r4, #10
 800bf5e:	480f      	ldr	r0, [pc, #60]	; (800bf9c <RDMDevice::Print()+0x78>)
 800bf60:	f006 fef8 	bl	8012d54 <printf>
 800bf64:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 800bf68:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800bf6c:	0a09      	lsrs	r1, r1, #8
 800bf6e:	480c      	ldr	r0, [pc, #48]	; (800bfa0 <RDMDevice::Print()+0x7c>)
 800bf70:	f006 fef0 	bl	8012d54 <printf>
 800bf74:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800bf78:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800bf7c:	4809      	ldr	r0, [pc, #36]	; (800bfa4 <RDMDevice::Print()+0x80>)
 800bf7e:	0a09      	lsrs	r1, r1, #8
 800bf80:	b002      	add	sp, #8
 800bf82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf86:	f006 bee5 	b.w	8012d54 <printf>
 800bf8a:	bf00      	nop
 800bf8c:	08015626 	stmdaeq	r1, {r1, r2, r5, r9, sl, ip, lr}
 800bf90:	08015640 	stmdaeq	r1, {r6, r9, sl, ip, lr}
 800bf94:	0801565b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, sl, ip, lr}
 800bf98:	0801567a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r9, sl, ip, lr}
 800bf9c:	080156a1 	stmdaeq	r1, {r0, r5, r7, r9, sl, ip, lr}
 800bfa0:	080156bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r9, sl, ip, lr}
 800bfa4:	080156db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, sl, ip, lr}

0800bfa8 <RDMDeviceController::RDMDeviceController()>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	4604      	mov	r4, r0
 800bfac:	f7ff ff48 	bl	800be40 <RDMDevice::RDMDevice()>
 800bfb0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800bfb4:	b1b3      	cbz	r3, 800bfe4 <RDMDeviceController::RDMDeviceController()+0x3c>
 800bfb6:	f104 010a 	add.w	r1, r4, #10
 800bfba:	460b      	mov	r3, r1
 800bfbc:	4a11      	ldr	r2, [pc, #68]	; (800c004 <RDMDeviceController::RDMDeviceController()+0x5c>)
 800bfbe:	f104 0023 	add.w	r0, r4, #35	; 0x23
 800bfc2:	4298      	cmp	r0, r3
 800bfc4:	d109      	bne.n	800bfda <RDMDeviceController::RDMDeviceController()+0x32>
 800bfc6:	2219      	movs	r2, #25
 800bfc8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800bfca:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
 800bfce:	b110      	cbz	r0, 800bfd6 <RDMDeviceController::RDMDeviceController()+0x2e>
 800bfd0:	6803      	ldr	r3, [r0, #0]
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	4798      	blx	r3
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	bd38      	pop	{r3, r4, r5, pc}
 800bfda:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bfde:	f803 5b01 	strb.w	r5, [r3], #1
 800bfe2:	e7ee      	b.n	800bfc2 <RDMDeviceController::RDMDeviceController()+0x1a>
 800bfe4:	4a07      	ldr	r2, [pc, #28]	; (800c004 <RDMDeviceController::RDMDeviceController()+0x5c>)
 800bfe6:	f104 0351 	add.w	r3, r4, #81	; 0x51
 800bfea:	f104 016a 	add.w	r1, r4, #106	; 0x6a
 800bfee:	428b      	cmp	r3, r1
 800bff0:	d103      	bne.n	800bffa <RDMDeviceController::RDMDeviceController()+0x52>
 800bff2:	2319      	movs	r3, #25
 800bff4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800bff8:	e7ed      	b.n	800bfd6 <RDMDeviceController::RDMDeviceController()+0x2e>
 800bffa:	f812 0b01 	ldrb.w	r0, [r2], #1
 800bffe:	f803 0b01 	strb.w	r0, [r3], #1
 800c002:	e7f4      	b.n	800bfee <RDMDeviceController::RDMDeviceController()+0x46>
 800c004:	0801570f 	stmdaeq	r1, {r0, r1, r2, r3, r8, r9, sl, ip, lr}

0800c008 <memcpy.isra.0>:
 800c008:	f006 bc68 	b.w	80128dc <memcpy>

0800c00c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800c00c:	b510      	push	{r4, lr}
 800c00e:	6001      	str	r1, [r0, #0]
 800c010:	2100      	movs	r1, #0
 800c012:	4604      	mov	r4, r0
 800c014:	6041      	str	r1, [r0, #4]
 800c016:	2220      	movs	r2, #32
 800c018:	3008      	adds	r0, #8
 800c01a:	f006 fc81 	bl	8012920 <memset>
 800c01e:	4b03      	ldr	r3, [pc, #12]	; (800c02c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800c020:	4620      	mov	r0, r4
 800c022:	62a3      	str	r3, [r4, #40]	; 0x28
 800c024:	237f      	movs	r3, #127	; 0x7f
 800c026:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800c02a:	bd10      	pop	{r4, pc}
 800c02c:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800c030 <RDMDeviceParams::Load()>:
 800c030:	4601      	mov	r1, r0
 800c032:	6800      	ldr	r0, [r0, #0]
 800c034:	b130      	cbz	r0, 800c044 <RDMDeviceParams::Load()+0x14>
 800c036:	b508      	push	{r3, lr}
 800c038:	6803      	ldr	r3, [r0, #0]
 800c03a:	3104      	adds	r1, #4
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	4798      	blx	r3
 800c040:	2001      	movs	r0, #1
 800c042:	bd08      	pop	{r3, pc}
 800c044:	4770      	bx	lr

0800c046 <RDMDeviceParams::Set(RDMDevice*)>:
 800c046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c048:	6843      	ldr	r3, [r0, #4]
 800c04a:	460c      	mov	r4, r1
 800c04c:	07d9      	lsls	r1, r3, #31
 800c04e:	4605      	mov	r5, r0
 800c050:	d518      	bpl.n	800c084 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800c052:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 800c056:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800c05a:	2e20      	cmp	r6, #32
 800c05c:	bf28      	it	cs
 800c05e:	2620      	movcs	r6, #32
 800c060:	f100 0108 	add.w	r1, r0, #8
 800c064:	b1e3      	cbz	r3, 800c0a0 <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 800c066:	f104 070a 	add.w	r7, r4, #10
 800c06a:	4638      	mov	r0, r7
 800c06c:	4632      	mov	r2, r6
 800c06e:	f7ff ffcb 	bl	800c008 <memcpy.isra.0>
 800c072:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c074:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800c078:	b120      	cbz	r0, 800c084 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800c07a:	6803      	ldr	r3, [r0, #0]
 800c07c:	4632      	mov	r2, r6
 800c07e:	4639      	mov	r1, r7
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	4798      	blx	r3
 800c084:	686b      	ldr	r3, [r5, #4]
 800c086:	079a      	lsls	r2, r3, #30
 800c088:	bf44      	itt	mi
 800c08a:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800c08e:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 800c092:	075b      	lsls	r3, r3, #29
 800c094:	bf44      	itt	mi
 800c096:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800c09a:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 800c09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0a0:	4632      	mov	r2, r6
 800c0a2:	f104 0051 	add.w	r0, r4, #81	; 0x51
 800c0a6:	f7ff ffaf 	bl	800c008 <memcpy.isra.0>
 800c0aa:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
 800c0ae:	e7e9      	b.n	800c084 <RDMDeviceParams::Set(RDMDevice*)+0x3e>

0800c0b0 <RDMDeviceParams::Dump()>:
 800c0b0:	4770      	bx	lr

0800c0b2 <memcpy.isra.0>:
 800c0b2:	3801      	subs	r0, #1
 800c0b4:	440a      	add	r2, r1
 800c0b6:	4291      	cmp	r1, r2
 800c0b8:	d100      	bne.n	800c0bc <memcpy.isra.0+0xa>
 800c0ba:	4770      	bx	lr
 800c0bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0c0:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c0c4:	e7f7      	b.n	800c0b6 <memcpy.isra.0+0x4>
	...

0800c0c8 <RDMMessage::RDMMessage()>:
 800c0c8:	23cc      	movs	r3, #204	; 0xcc
 800c0ca:	b570      	push	{r4, r5, r6, lr}
 800c0cc:	7003      	strb	r3, [r0, #0]
 800c0ce:	2501      	movs	r5, #1
 800c0d0:	2318      	movs	r3, #24
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	4e0a      	ldr	r6, [pc, #40]	; (800c100 <RDMMessage::RDMMessage()+0x38>)
 800c0d6:	7083      	strb	r3, [r0, #2]
 800c0d8:	7045      	strb	r5, [r0, #1]
 800c0da:	4631      	mov	r1, r6
 800c0dc:	2206      	movs	r2, #6
 800c0de:	3009      	adds	r0, #9
 800c0e0:	f7ff ffe7 	bl	800c0b2 <memcpy.isra.0>
 800c0e4:	1ce0      	adds	r0, r4, #3
 800c0e6:	2206      	movs	r2, #6
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	f7ff ffe2 	bl	800c0b2 <memcpy.isra.0>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	7425      	strb	r5, [r4, #16]
 800c0f4:	7463      	strb	r3, [r4, #17]
 800c0f6:	74a3      	strb	r3, [r4, #18]
 800c0f8:	74e3      	strb	r3, [r4, #19]
 800c0fa:	75e3      	strb	r3, [r4, #23]
 800c0fc:	bd70      	pop	{r4, r5, r6, pc}
 800c0fe:	bf00      	nop
 800c100:	0801572c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, ip, lr}

0800c104 <RDMMessage::SetSrcUid(unsigned char const*)>:
 800c104:	2206      	movs	r2, #6
 800c106:	3009      	adds	r0, #9
 800c108:	f7ff bfd3 	b.w	800c0b2 <memcpy.isra.0>

0800c10c <RDMMessage::SetDstUid(unsigned char const*)>:
 800c10c:	2206      	movs	r2, #6
 800c10e:	3003      	adds	r0, #3
 800c110:	f7ff bfcf 	b.w	800c0b2 <memcpy.isra.0>

0800c114 <RDMMessage::SetCc(unsigned char)>:
 800c114:	7501      	strb	r1, [r0, #20]
 800c116:	4770      	bx	lr

0800c118 <RDMMessage::SetPid(unsigned short)>:
 800c118:	0a0b      	lsrs	r3, r1, #8
 800c11a:	7543      	strb	r3, [r0, #21]
 800c11c:	7581      	strb	r1, [r0, #22]
 800c11e:	4770      	bx	lr

0800c120 <RDMMessage::SetPd(unsigned char const*, unsigned char)>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	4604      	mov	r4, r0
 800c124:	7883      	ldrb	r3, [r0, #2]
 800c126:	7dc0      	ldrb	r0, [r0, #23]
 800c128:	4615      	mov	r5, r2
 800c12a:	1a1b      	subs	r3, r3, r0
 800c12c:	70a3      	strb	r3, [r4, #2]
 800c12e:	75e2      	strb	r2, [r4, #23]
 800c130:	b121      	cbz	r1, 800c13c <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800c132:	b11a      	cbz	r2, 800c13c <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800c134:	f104 0018 	add.w	r0, r4, #24
 800c138:	f7ff ffbb 	bl	800c0b2 <memcpy.isra.0>
 800c13c:	78a3      	ldrb	r3, [r4, #2]
 800c13e:	441d      	add	r5, r3
 800c140:	70a5      	strb	r5, [r4, #2]
 800c142:	bd38      	pop	{r3, r4, r5, pc}

0800c144 <RDMMessage::Send(unsigned int, unsigned int)>:
 800c144:	460b      	mov	r3, r1
 800c146:	4601      	mov	r1, r0
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 befb 	b.w	800cf44 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>

0800c14e <LightSet::Blackout(bool)>:
 800c14e:	4770      	bx	lr

0800c150 <DmxSend::~DmxSend()>:
 800c150:	4770      	bx	lr
	...

0800c154 <DmxSend::Start(unsigned int)>:
 800c154:	2301      	movs	r3, #1
 800c156:	b430      	push	{r4, r5}
 800c158:	4c08      	ldr	r4, [pc, #32]	; (800c17c <DmxSend::Start(unsigned int)+0x28>)
 800c15a:	fa03 f001 	lsl.w	r0, r3, r1
 800c15e:	7822      	ldrb	r2, [r4, #0]
 800c160:	ea30 0502 	bics.w	r5, r0, r2
 800c164:	d007      	beq.n	800c176 <DmxSend::Start(unsigned int)+0x22>
 800c166:	4302      	orrs	r2, r0
 800c168:	4805      	ldr	r0, [pc, #20]	; (800c180 <DmxSend::Start(unsigned int)+0x2c>)
 800c16a:	7022      	strb	r2, [r4, #0]
 800c16c:	6800      	ldr	r0, [r0, #0]
 800c16e:	2200      	movs	r2, #0
 800c170:	bc30      	pop	{r4, r5}
 800c172:	f000 bcd9 	b.w	800cb28 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800c176:	bc30      	pop	{r4, r5}
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	20000828 	andcs	r0, r0, r8, lsr #16
 800c180:	20000c68 	andcs	r0, r0, r8, ror #24

0800c184 <DmxSend::Stop(unsigned int)>:
 800c184:	2201      	movs	r2, #1
 800c186:	b410      	push	{r4}
 800c188:	4809      	ldr	r0, [pc, #36]	; (800c1b0 <DmxSend::Stop(unsigned int)+0x2c>)
 800c18a:	408a      	lsls	r2, r1
 800c18c:	7803      	ldrb	r3, [r0, #0]
 800c18e:	ea03 0402 	and.w	r4, r3, r2
 800c192:	439a      	bics	r2, r3
 800c194:	d109      	bne.n	800c1aa <DmxSend::Stop(unsigned int)+0x26>
 800c196:	ea23 0304 	bic.w	r3, r3, r4
 800c19a:	7003      	strb	r3, [r0, #0]
 800c19c:	2300      	movs	r3, #0
 800c19e:	4805      	ldr	r0, [pc, #20]	; (800c1b4 <DmxSend::Stop(unsigned int)+0x30>)
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	6800      	ldr	r0, [r0, #0]
 800c1a4:	bc10      	pop	{r4}
 800c1a6:	f000 bcbf 	b.w	800cb28 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800c1aa:	bc10      	pop	{r4}
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	20000828 	andcs	r0, r0, r8, lsr #16
 800c1b4:	20000c68 	andcs	r0, r0, r8, ror #24

0800c1b8 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800c1b8:	b11b      	cbz	r3, 800c1c2 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xa>
 800c1ba:	4802      	ldr	r0, [pc, #8]	; (800c1c4 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xc>)
 800c1bc:	6800      	ldr	r0, [r0, #0]
 800c1be:	f000 be13 	b.w	800cde8 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>
 800c1c2:	4770      	bx	lr
 800c1c4:	20000c68 	andcs	r0, r0, r8, ror #24

0800c1c8 <DmxSend::Print()>:
 800c1c8:	b510      	push	{r4, lr}
 800c1ca:	4c0e      	ldr	r4, [pc, #56]	; (800c204 <DmxSend::Print()+0x3c>)
 800c1cc:	480e      	ldr	r0, [pc, #56]	; (800c208 <DmxSend::Print()+0x40>)
 800c1ce:	f006 fdc1 	bl	8012d54 <printf>
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	480d      	ldr	r0, [pc, #52]	; (800c20c <DmxSend::Print()+0x44>)
 800c1d6:	6819      	ldr	r1, [r3, #0]
 800c1d8:	f006 fdbc 	bl	8012d54 <printf>
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	480c      	ldr	r0, [pc, #48]	; (800c210 <DmxSend::Print()+0x48>)
 800c1e0:	6859      	ldr	r1, [r3, #4]
 800c1e2:	f006 fdb7 	bl	8012d54 <printf>
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	490a      	ldr	r1, [pc, #40]	; (800c214 <DmxSend::Print()+0x4c>)
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	480a      	ldr	r0, [pc, #40]	; (800c218 <DmxSend::Print()+0x50>)
 800c1ee:	fbb1 f1f3 	udiv	r1, r1, r3
 800c1f2:	f006 fdaf 	bl	8012d54 <printf>
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	4808      	ldr	r0, [pc, #32]	; (800c21c <DmxSend::Print()+0x54>)
 800c1fa:	8a19      	ldrh	r1, [r3, #16]
 800c1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c200:	f006 bda8 	b.w	8012d54 <printf>
 800c204:	20000c68 	andcs	r0, r0, r8, ror #24
 800c208:	08015750 	stmdaeq	r1, {r4, r6, r8, r9, sl, ip, lr}
 800c20c:	0801575a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, sl, ip, lr}
 800c210:	0801576e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}
 800c214:	000f4240 	andeq	r4, pc, r0, asr #4
 800c218:	08015782 	stmdaeq	r1, {r1, r7, r8, r9, sl, ip, lr}
 800c21c:	08015796 	stmdaeq	r1, {r1, r2, r4, r7, r8, r9, sl, ip, lr}

0800c220 <DmxSend::~DmxSend()>:
 800c220:	b510      	push	{r4, lr}
 800c222:	4604      	mov	r4, r0
 800c224:	f006 faa2 	bl	801276c <operator delete(void*)>
 800c228:	4620      	mov	r0, r4
 800c22a:	bd10      	pop	{r4, pc}

0800c22c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800c22c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c22e:	88c6      	ldrh	r6, [r0, #6]
 800c230:	8885      	ldrh	r5, [r0, #4]
 800c232:	42ae      	cmp	r6, r5
 800c234:	d216      	bcs.n	800c264 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800c236:	4604      	mov	r4, r0
 800c238:	6800      	ldr	r0, [r0, #0]
 800c23a:	1bad      	subs	r5, r5, r6
 800c23c:	4430      	add	r0, r6
 800c23e:	7a26      	ldrb	r6, [r4, #8]
 800c240:	b923      	cbnz	r3, 800c24c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800c242:	b926      	cbnz	r6, 800c24e <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800c244:	9200      	str	r2, [sp, #0]
 800c246:	460b      	mov	r3, r1
 800c248:	4a09      	ldr	r2, [pc, #36]	; (800c270 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800c24a:	e003      	b.n	800c254 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800c24c:	b166      	cbz	r6, 800c268 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800c24e:	460b      	mov	r3, r1
 800c250:	9200      	str	r2, [sp, #0]
 800c252:	4a08      	ldr	r2, [pc, #32]	; (800c274 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800c254:	4629      	mov	r1, r5
 800c256:	f006 fda5 	bl	8012da4 <snprintf>
 800c25a:	4285      	cmp	r5, r0
 800c25c:	bfa2      	ittt	ge
 800c25e:	88e3      	ldrhge	r3, [r4, #6]
 800c260:	181b      	addge	r3, r3, r0
 800c262:	80e3      	strhge	r3, [r4, #6]
 800c264:	b002      	add	sp, #8
 800c266:	bd70      	pop	{r4, r5, r6, pc}
 800c268:	9200      	str	r2, [sp, #0]
 800c26a:	460b      	mov	r3, r1
 800c26c:	4a02      	ldr	r2, [pc, #8]	; (800c278 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800c26e:	e7f1      	b.n	800c254 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800c270:	08015353 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, ip, lr}
 800c274:	0801534a 	stmdaeq	r1, {r1, r3, r6, r8, r9, ip, lr}
 800c278:	08015354 	stmdaeq	r1, {r2, r4, r6, r8, r9, ip, lr}

0800c27c <DmxParams::DmxParams(DmxParamsStore*)>:
 800c27c:	6001      	str	r1, [r0, #0]
 800c27e:	2100      	movs	r1, #0
 800c280:	4a03      	ldr	r2, [pc, #12]	; (800c290 <DmxParams::DmxParams(DmxParamsStore*)+0x14>)
 800c282:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800c286:	f64f 7228 	movw	r2, #65320	; 0xff28
 800c28a:	8182      	strh	r2, [r0, #12]
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	000c00b0 	strheq	r0, [ip], -r0	; <UNPREDICTABLE>

0800c294 <DmxParams::Load()>:
 800c294:	b508      	push	{r3, lr}
 800c296:	2300      	movs	r3, #0
 800c298:	4601      	mov	r1, r0
 800c29a:	6043      	str	r3, [r0, #4]
 800c29c:	6800      	ldr	r0, [r0, #0]
 800c29e:	b120      	cbz	r0, 800c2aa <DmxParams::Load()+0x16>
 800c2a0:	6803      	ldr	r3, [r0, #0]
 800c2a2:	3104      	adds	r1, #4
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	4798      	blx	r3
 800c2a8:	2001      	movs	r0, #1
 800c2aa:	bd08      	pop	{r3, pc}

0800c2ac <DmxParams::Load(char const*, unsigned int)>:
 800c2ac:	6803      	ldr	r3, [r0, #0]
 800c2ae:	b1d3      	cbz	r3, 800c2e6 <DmxParams::Load(char const*, unsigned int)+0x3a>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2b4:	460d      	mov	r5, r1
 800c2b6:	4616      	mov	r6, r2
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	6043      	str	r3, [r0, #4]
 800c2bc:	4602      	mov	r2, r0
 800c2be:	490a      	ldr	r1, [pc, #40]	; (800c2e8 <DmxParams::Load(char const*, unsigned int)+0x3c>)
 800c2c0:	4668      	mov	r0, sp
 800c2c2:	f005 fcfb 	bl	8011cbc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800c2c6:	4632      	mov	r2, r6
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	4668      	mov	r0, sp
 800c2cc:	f005 fcfa 	bl	8011cc4 <ReadConfigFile::Read(char const*, unsigned int)>
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	f851 0b04 	ldr.w	r0, [r1], #4
 800c2d6:	6803      	ldr	r3, [r0, #0]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	4798      	blx	r3
 800c2dc:	4668      	mov	r0, sp
 800c2de:	f005 fcf0 	bl	8011cc2 <ReadConfigFile::~ReadConfigFile()>
 800c2e2:	b002      	add	sp, #8
 800c2e4:	bd70      	pop	{r4, r5, r6, pc}
 800c2e6:	4770      	bx	lr
 800c2e8:	0800c3b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, lr, pc}

0800c2ec <DmxParams::callbackFunction(char const*)>:
 800c2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2ee:	460d      	mov	r5, r1
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	492d      	ldr	r1, [pc, #180]	; (800c3a8 <DmxParams::callbackFunction(char const*)+0xbc>)
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	f10d 0206 	add.w	r2, sp, #6
 800c2fa:	f005 fd9b 	bl	8011e34 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c2fe:	b988      	cbnz	r0, 800c324 <DmxParams::callbackFunction(char const*)+0x38>
 800c300:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c304:	6863      	ldr	r3, [r4, #4]
 800c306:	2a5b      	cmp	r2, #91	; 0x5b
 800c308:	d907      	bls.n	800c31a <DmxParams::callbackFunction(char const*)+0x2e>
 800c30a:	2ab0      	cmp	r2, #176	; 0xb0
 800c30c:	d005      	beq.n	800c31a <DmxParams::callbackFunction(char const*)+0x2e>
 800c30e:	8122      	strh	r2, [r4, #8]
 800c310:	f043 0301 	orr.w	r3, r3, #1
 800c314:	6063      	str	r3, [r4, #4]
 800c316:	b003      	add	sp, #12
 800c318:	bd30      	pop	{r4, r5, pc}
 800c31a:	22b0      	movs	r2, #176	; 0xb0
 800c31c:	f023 0301 	bic.w	r3, r3, #1
 800c320:	8122      	strh	r2, [r4, #8]
 800c322:	e7f7      	b.n	800c314 <DmxParams::callbackFunction(char const*)+0x28>
 800c324:	4628      	mov	r0, r5
 800c326:	4921      	ldr	r1, [pc, #132]	; (800c3ac <DmxParams::callbackFunction(char const*)+0xc0>)
 800c328:	f10d 0206 	add.w	r2, sp, #6
 800c32c:	f005 fd82 	bl	8011e34 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c330:	b968      	cbnz	r0, 800c34e <DmxParams::callbackFunction(char const*)+0x62>
 800c332:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c336:	6863      	ldr	r3, [r4, #4]
 800c338:	2a0c      	cmp	r2, #12
 800c33a:	bf93      	iteet	ls
 800c33c:	220c      	movls	r2, #12
 800c33e:	8162      	strhhi	r2, [r4, #10]
 800c340:	f043 0302 	orrhi.w	r3, r3, #2
 800c344:	8162      	strhls	r2, [r4, #10]
 800c346:	bf98      	it	ls
 800c348:	f023 0302 	bicls.w	r3, r3, #2
 800c34c:	e7e2      	b.n	800c314 <DmxParams::callbackFunction(char const*)+0x28>
 800c34e:	4628      	mov	r0, r5
 800c350:	4917      	ldr	r1, [pc, #92]	; (800c3b0 <DmxParams::callbackFunction(char const*)+0xc4>)
 800c352:	f10d 0205 	add.w	r2, sp, #5
 800c356:	f005 fd8b 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c35a:	b950      	cbnz	r0, 800c372 <DmxParams::callbackFunction(char const*)+0x86>
 800c35c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c360:	6863      	ldr	r3, [r4, #4]
 800c362:	2a28      	cmp	r2, #40	; 0x28
 800c364:	7322      	strb	r2, [r4, #12]
 800c366:	bf14      	ite	ne
 800c368:	f043 0304 	orrne.w	r3, r3, #4
 800c36c:	f023 0304 	biceq.w	r3, r3, #4
 800c370:	e7d0      	b.n	800c314 <DmxParams::callbackFunction(char const*)+0x28>
 800c372:	4628      	mov	r0, r5
 800c374:	490f      	ldr	r1, [pc, #60]	; (800c3b4 <DmxParams::callbackFunction(char const*)+0xc8>)
 800c376:	f10d 0206 	add.w	r2, sp, #6
 800c37a:	f005 fd5b 	bl	8011e34 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c37e:	2800      	cmp	r0, #0
 800c380:	d1c9      	bne.n	800c316 <DmxParams::callbackFunction(char const*)+0x2a>
 800c382:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c386:	6863      	ldr	r3, [r4, #4]
 800c388:	1e91      	subs	r1, r2, #2
 800c38a:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800c38e:	bf2f      	iteee	cs
 800c390:	22ff      	movcs	r2, #255	; 0xff
 800c392:	0852      	lsrcc	r2, r2, #1
 800c394:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800c398:	7362      	strbcc	r2, [r4, #13]
 800c39a:	bf32      	itee	cc
 800c39c:	f043 0308 	orrcc.w	r3, r3, #8
 800c3a0:	7362      	strbcs	r2, [r4, #13]
 800c3a2:	f023 0308 	biccs.w	r3, r3, #8
 800c3a6:	e7b5      	b.n	800c314 <DmxParams::callbackFunction(char const*)+0x28>
 800c3a8:	080157e0 	stmdaeq	r1, {r5, r6, r7, r8, r9, sl, ip, lr}
 800c3ac:	08015804 	stmdaeq	r1, {r2, fp, ip, lr}
 800c3b0:	080157f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, lr}
 800c3b4:	080157eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, sl, ip, lr}

0800c3b8 <DmxParams::staticCallbackFunction(void*, char const*)>:
 800c3b8:	f7ff bf98 	b.w	800c2ec <DmxParams::callbackFunction(char const*)>

0800c3bc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	4604      	mov	r4, r0
 800c3c0:	4615      	mov	r5, r2
 800c3c2:	461e      	mov	r6, r3
 800c3c4:	b086      	sub	sp, #24
 800c3c6:	3004      	adds	r0, #4
 800c3c8:	b369      	cbz	r1, 800c426 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x6a>
 800c3ca:	220a      	movs	r2, #10
 800c3cc:	f006 fa91 	bl	80128f2 <memmove>
 800c3d0:	462a      	mov	r2, r5
 800c3d2:	4633      	mov	r3, r6
 800c3d4:	4932      	ldr	r1, [pc, #200]	; (800c4a0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe4>)
 800c3d6:	a803      	add	r0, sp, #12
 800c3d8:	f005 fba0 	bl	8011b1c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800c3dc:	6863      	ldr	r3, [r4, #4]
 800c3de:	8922      	ldrh	r2, [r4, #8]
 800c3e0:	4930      	ldr	r1, [pc, #192]	; (800c4a4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe8>)
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	a803      	add	r0, sp, #12
 800c3e8:	f7ff ff20 	bl	800c22c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800c3ec:	6863      	ldr	r3, [r4, #4]
 800c3ee:	8962      	ldrh	r2, [r4, #10]
 800c3f0:	492d      	ldr	r1, [pc, #180]	; (800c4a8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xec>)
 800c3f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c3f6:	a803      	add	r0, sp, #12
 800c3f8:	f7ff ff18 	bl	800c22c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800c3fc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800c400:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800c404:	7b23      	ldrb	r3, [r4, #12]
 800c406:	42aa      	cmp	r2, r5
 800c408:	6861      	ldr	r1, [r4, #4]
 800c40a:	d221      	bcs.n	800c450 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x94>
 800c40c:	9803      	ldr	r0, [sp, #12]
 800c40e:	0749      	lsls	r1, r1, #29
 800c410:	4410      	add	r0, r2
 800c412:	eba5 0502 	sub.w	r5, r5, r2
 800c416:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800c41a:	d40b      	bmi.n	800c434 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x78>
 800c41c:	b95a      	cbnz	r2, 800c436 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7a>
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	4a22      	ldr	r2, [pc, #136]	; (800c4ac <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 800c422:	4b23      	ldr	r3, [pc, #140]	; (800c4b0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800c424:	e00a      	b.n	800c43c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	4601      	mov	r1, r0
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	4618      	mov	r0, r3
 800c42e:	68d2      	ldr	r2, [r2, #12]
 800c430:	4790      	blx	r2
 800c432:	e7cd      	b.n	800c3d0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x14>
 800c434:	b37a      	cbz	r2, 800c496 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xda>
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	4a1e      	ldr	r2, [pc, #120]	; (800c4b4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800c43a:	4b1d      	ldr	r3, [pc, #116]	; (800c4b0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800c43c:	4629      	mov	r1, r5
 800c43e:	f006 fcb1 	bl	8012da4 <snprintf>
 800c442:	4285      	cmp	r5, r0
 800c444:	bfa2      	ittt	ge
 800c446:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800c44a:	18c0      	addge	r0, r0, r3
 800c44c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800c450:	7b62      	ldrb	r2, [r4, #13]
 800c452:	6863      	ldr	r3, [r4, #4]
 800c454:	3201      	adds	r2, #1
 800c456:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c45a:	4917      	ldr	r1, [pc, #92]	; (800c4b8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800c45c:	0052      	lsls	r2, r2, #1
 800c45e:	a803      	add	r0, sp, #12
 800c460:	f7ff fee4 	bl	800c22c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800c464:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800c468:	b17b      	cbz	r3, 800c48a <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xce>
 800c46a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800c46e:	9b03      	ldr	r3, [sp, #12]
 800c470:	4413      	add	r3, r2
 800c472:	227d      	movs	r2, #125	; 0x7d
 800c474:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c478:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800c47c:	9903      	ldr	r1, [sp, #12]
 800c47e:	54ca      	strb	r2, [r1, r3]
 800c480:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800c484:	3301      	adds	r3, #1
 800c486:	f8ad 3012 	strh.w	r3, [sp, #18]
 800c48a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800c48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c490:	601a      	str	r2, [r3, #0]
 800c492:	b006      	add	sp, #24
 800c494:	bd70      	pop	{r4, r5, r6, pc}
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	4a08      	ldr	r2, [pc, #32]	; (800c4bc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800c49a:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800c49c:	e7ce      	b.n	800c43c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 800c49e:	bf00      	nop
 800c4a0:	0801580d 	stmdaeq	r1, {r0, r2, r3, fp, ip, lr}
 800c4a4:	080157e0 	stmdaeq	r1, {r5, r6, r7, r8, r9, sl, ip, lr}
 800c4a8:	08015804 	stmdaeq	r1, {r2, fp, ip, lr}
 800c4ac:	08015353 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, ip, lr}
 800c4b0:	080157f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, lr}
 800c4b4:	0801534a 	stmdaeq	r1, {r1, r3, r6, r8, r9, ip, lr}
 800c4b8:	080157eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, sl, ip, lr}
 800c4bc:	08015354 	stmdaeq	r1, {r2, r4, r6, r8, r9, ip, lr}

0800c4c0 <DmxParams::Save(char*, unsigned int, unsigned int&)>:
 800c4c0:	b513      	push	{r0, r1, r4, lr}
 800c4c2:	6804      	ldr	r4, [r0, #0]
 800c4c4:	b914      	cbnz	r4, 800c4cc <DmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800c4c6:	601c      	str	r4, [r3, #0]
 800c4c8:	b002      	add	sp, #8
 800c4ca:	bd10      	pop	{r4, pc}
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	4613      	mov	r3, r2
 800c4d0:	460a      	mov	r2, r1
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	f7ff ff72 	bl	800c3bc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>
 800c4d8:	e7f6      	b.n	800c4c8 <DmxParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800c4dc <DmxParams::Set(Dmx*)>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	6843      	ldr	r3, [r0, #4]
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	07d8      	lsls	r0, r3, #31
 800c4e4:	460d      	mov	r5, r1
 800c4e6:	d503      	bpl.n	800c4f0 <DmxParams::Set(Dmx*)+0x14>
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	8921      	ldrh	r1, [r4, #8]
 800c4ec:	f000 fc58 	bl	800cda0 <Dmx::SetDmxBreakTime(unsigned int)>
 800c4f0:	6863      	ldr	r3, [r4, #4]
 800c4f2:	0799      	lsls	r1, r3, #30
 800c4f4:	d503      	bpl.n	800c4fe <DmxParams::Set(Dmx*)+0x22>
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	8961      	ldrh	r1, [r4, #10]
 800c4fa:	f000 fc5b 	bl	800cdb4 <Dmx::SetDmxMabTime(unsigned int)>
 800c4fe:	6863      	ldr	r3, [r4, #4]
 800c500:	075a      	lsls	r2, r3, #29
 800c502:	d507      	bpl.n	800c514 <DmxParams::Set(Dmx*)+0x38>
 800c504:	7b21      	ldrb	r1, [r4, #12]
 800c506:	b111      	cbz	r1, 800c50e <DmxParams::Set(Dmx*)+0x32>
 800c508:	4b08      	ldr	r3, [pc, #32]	; (800c52c <DmxParams::Set(Dmx*)+0x50>)
 800c50a:	fbb3 f1f1 	udiv	r1, r3, r1
 800c50e:	4628      	mov	r0, r5
 800c510:	f000 fc16 	bl	800cd40 <Dmx::SetDmxPeriodTime(unsigned int)>
 800c514:	6863      	ldr	r3, [r4, #4]
 800c516:	071b      	lsls	r3, r3, #28
 800c518:	d507      	bpl.n	800c52a <DmxParams::Set(Dmx*)+0x4e>
 800c51a:	7b61      	ldrb	r1, [r4, #13]
 800c51c:	4628      	mov	r0, r5
 800c51e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c522:	3101      	adds	r1, #1
 800c524:	0049      	lsls	r1, r1, #1
 800c526:	f000 bc4f 	b.w	800cdc8 <Dmx::SetDmxSlots(unsigned short)>
 800c52a:	bd38      	pop	{r3, r4, r5, pc}
 800c52c:	000f4240 	andeq	r4, pc, r0, asr #4

0800c530 <DmxParams::Dump()>:
 800c530:	4770      	bx	lr
	...

0800c534 <Rdm::Receive(unsigned int)>:
 800c534:	4b02      	ldr	r3, [pc, #8]	; (800c540 <Rdm::Receive(unsigned int)+0xc>)
 800c536:	4601      	mov	r1, r0
 800c538:	6818      	ldr	r0, [r3, #0]
 800c53a:	f000 bcdf 	b.w	800cefc <Dmx::RdmReceive(unsigned int)>
 800c53e:	bf00      	nop
 800c540:	20000c68 	andcs	r0, r0, r8, ror #24

0800c544 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>:
 800c544:	4b02      	ldr	r3, [pc, #8]	; (800c550 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)+0xc>)
 800c546:	460a      	mov	r2, r1
 800c548:	4601      	mov	r1, r0
 800c54a:	6818      	ldr	r0, [r3, #0]
 800c54c:	f000 bce8 	b.w	800cf20 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>
 800c550:	20000c68 	andcs	r0, r0, r8, ror #24

0800c554 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800c554:	2300      	movs	r3, #0
 800c556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55a:	4604      	mov	r4, r0
 800c55c:	460e      	mov	r6, r1
 800c55e:	4617      	mov	r7, r2
 800c560:	4d0b      	ldr	r5, [pc, #44]	; (800c590 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 800c562:	461a      	mov	r2, r3
 800c564:	4601      	mov	r1, r0
 800c566:	6828      	ldr	r0, [r5, #0]
 800c568:	f000 fade 	bl	800cb28 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800c56c:	463b      	mov	r3, r7
 800c56e:	4632      	mov	r2, r6
 800c570:	4621      	mov	r1, r4
 800c572:	6828      	ldr	r0, [r5, #0]
 800c574:	f000 fc7c 	bl	800ce70 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 800c578:	2100      	movs	r1, #0
 800c57a:	2004      	movs	r0, #4
 800c57c:	f007 fe5a 	bl	8014234 <udelay(unsigned int, unsigned int)>
 800c580:	2301      	movs	r3, #1
 800c582:	4621      	mov	r1, r4
 800c584:	6828      	ldr	r0, [r5, #0]
 800c586:	461a      	mov	r2, r3
 800c588:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c58c:	f000 bacc 	b.w	800cb28 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800c590:	20000c68 	andcs	r0, r0, r8, ror #24

0800c594 <USART2_IRQHandler>:
 800c594:	b510      	push	{r4, lr}
 800c596:	f3bf 8f5f 	dmb	sy
 800c59a:	2408      	movs	r4, #8
 800c59c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800c5a0:	498c      	ldr	r1, [pc, #560]	; (800c7d4 <USART2_IRQHandler+0x240>)
 800c5a2:	f8c1 4c10 	str.w	r4, [r1, #3088]	; 0xc10
 800c5a6:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800c5aa:	f013 0f02 	tst.w	r3, #2
 800c5ae:	4b8a      	ldr	r3, [pc, #552]	; (800c7d8 <USART2_IRQHandler+0x244>)
 800c5b0:	d016      	beq.n	800c5e0 <USART2_IRQHandler+0x4c>
 800c5b2:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
 800c5b6:	f020 0002 	bic.w	r0, r0, #2
 800c5ba:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
 800c5be:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c5c8:	2202      	movs	r2, #2
 800c5ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c5ce:	2310      	movs	r3, #16
 800c5d0:	f8c1 4c14 	str.w	r4, [r1, #3092]	; 0xc14
 800c5d4:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 800c5d8:	2320      	movs	r3, #32
 800c5da:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 800c5de:	bd10      	pop	{r4, pc}
 800c5e0:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800c5e4:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 800c5e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5ec:	280a      	cmp	r0, #10
 800c5ee:	f200 80ec 	bhi.w	800c7ca <USART2_IRQHandler+0x236>
 800c5f2:	e8df f010 	tbh	[pc, r0, lsl #1]
 800c5f6:	00ea000b 	rsceq	r0, sl, fp
 800c5fa:	00ea0019 	rsceq	r0, sl, r9, lsl r0
 800c5fe:	005c0039 	subseq	r0, ip, r9, lsr r0
 800c602:	00870077 	addeq	r0, r7, r7, ror r0
 800c606:	00ba00a8 	adcseq	r0, sl, r8, lsr #1
 800c60a:	210800ce 	smlabtcs	r8, lr, r0, r0
 800c60e:	701a      	strb	r2, [r3, #0]
 800c610:	2201      	movs	r2, #1
 800c612:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800c616:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800c61a:	2208      	movs	r2, #8
 800c61c:	4b6d      	ldr	r3, [pc, #436]	; (800c7d4 <USART2_IRQHandler+0x240>)
 800c61e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800c622:	f3bf 8f5f 	dmb	sy
 800c626:	e7da      	b.n	800c5de <USART2_IRQHandler+0x4a>
 800c628:	b11a      	cbz	r2, 800c632 <USART2_IRQHandler+0x9e>
 800c62a:	2acc      	cmp	r2, #204	; 0xcc
 800c62c:	d016      	beq.n	800c65c <USART2_IRQHandler+0xc8>
 800c62e:	2200      	movs	r2, #0
 800c630:	e065      	b.n	800c6fe <USART2_IRQHandler+0x16a>
 800c632:	701a      	strb	r2, [r3, #0]
 800c634:	2201      	movs	r2, #1
 800c636:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c63a:	4a68      	ldr	r2, [pc, #416]	; (800c7dc <USART2_IRQHandler+0x248>)
 800c63c:	6851      	ldr	r1, [r2, #4]
 800c63e:	3101      	adds	r1, #1
 800c640:	6051      	str	r1, [r2, #4]
 800c642:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c646:	f8d1 1424 	ldr.w	r1, [r1, #1060]	; 0x424
 800c64a:	60d1      	str	r1, [r2, #12]
 800c64c:	2204      	movs	r2, #4
 800c64e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c652:	2210      	movs	r2, #16
 800c654:	4b5f      	ldr	r3, [pc, #380]	; (800c7d4 <USART2_IRQHandler+0x240>)
 800c656:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800c65a:	e7de      	b.n	800c61a <USART2_IRQHandler+0x86>
 800c65c:	701a      	strb	r2, [r3, #0]
 800c65e:	4a60      	ldr	r2, [pc, #384]	; (800c7e0 <USART2_IRQHandler+0x24c>)
 800c660:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c664:	2205      	movs	r2, #5
 800c666:	e7f2      	b.n	800c64e <USART2_IRQHandler+0xba>
 800c668:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800c66c:	b288      	uxth	r0, r1
 800c66e:	541a      	strb	r2, [r3, r0]
 800c670:	1c4a      	adds	r2, r1, #1
 800c672:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800c676:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c67a:	d90b      	bls.n	800c694 <USART2_IRQHandler+0x100>
 800c67c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c680:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c684:	2200      	movs	r2, #0
 800c686:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c68a:	2210      	movs	r2, #16
 800c68c:	4b51      	ldr	r3, [pc, #324]	; (800c7d4 <USART2_IRQHandler+0x240>)
 800c68e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800c692:	e7c2      	b.n	800c61a <USART2_IRQHandler+0x86>
 800c694:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c698:	4850      	ldr	r0, [pc, #320]	; (800c7dc <USART2_IRQHandler+0x248>)
 800c69a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
 800c69e:	68c3      	ldr	r3, [r0, #12]
 800c6a0:	60c1      	str	r1, [r0, #12]
 800c6a2:	ebc3 0341 	rsb	r3, r3, r1, lsl #1
 800c6a6:	3304      	adds	r3, #4
 800c6a8:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 800c6ac:	e7b5      	b.n	800c61a <USART2_IRQHandler+0x86>
 800c6ae:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 800c6b2:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 800c6b6:	541a      	strb	r2, [r3, r0]
 800c6b8:	1c41      	adds	r1, r0, #1
 800c6ba:	3817      	subs	r0, #23
 800c6bc:	b289      	uxth	r1, r1
 800c6be:	4422      	add	r2, r4
 800c6c0:	28e7      	cmp	r0, #231	; 0xe7
 800c6c2:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800c6c6:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800c6ca:	d808      	bhi.n	800c6de <USART2_IRQHandler+0x14a>
 800c6cc:	789a      	ldrb	r2, [r3, #2]
 800c6ce:	428a      	cmp	r2, r1
 800c6d0:	d105      	bne.n	800c6de <USART2_IRQHandler+0x14a>
 800c6d2:	2206      	movs	r2, #6
 800c6d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c6d8:	2220      	movs	r2, #32
 800c6da:	4b3e      	ldr	r3, [pc, #248]	; (800c7d4 <USART2_IRQHandler+0x240>)
 800c6dc:	e7bb      	b.n	800c656 <USART2_IRQHandler+0xc2>
 800c6de:	29ff      	cmp	r1, #255	; 0xff
 800c6e0:	d99b      	bls.n	800c61a <USART2_IRQHandler+0x86>
 800c6e2:	e7a4      	b.n	800c62e <USART2_IRQHandler+0x9a>
 800c6e4:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800c6e8:	545a      	strb	r2, [r3, r1]
 800c6ea:	3101      	adds	r1, #1
 800c6ec:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800c6f0:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 800c6f4:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 800c6f8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800c6fc:	2207      	movs	r2, #7
 800c6fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c702:	e78a      	b.n	800c61a <USART2_IRQHandler+0x86>
 800c704:	2020      	movs	r0, #32
 800c706:	f8c1 0c14 	str.w	r0, [r1, #3092]	; 0xc14
 800c70a:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 800c70e:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 800c712:	541a      	strb	r2, [r3, r0]
 800c714:	1aa2      	subs	r2, r4, r2
 800c716:	b292      	uxth	r2, r2
 800c718:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800c71c:	b912      	cbnz	r2, 800c724 <USART2_IRQHandler+0x190>
 800c71e:	785a      	ldrb	r2, [r3, #1]
 800c720:	2a01      	cmp	r2, #1
 800c722:	d003      	beq.n	800c72c <USART2_IRQHandler+0x198>
 800c724:	2200      	movs	r2, #0
 800c726:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c72a:	e780      	b.n	800c62e <USART2_IRQHandler+0x9a>
 800c72c:	3001      	adds	r0, #1
 800c72e:	4a2d      	ldr	r2, [pc, #180]	; (800c7e4 <USART2_IRQHandler+0x250>)
 800c730:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800c734:	f8a3 0204 	strh.w	r0, [r3, #516]	; 0x204
 800c738:	6850      	ldr	r0, [r2, #4]
 800c73a:	4a2b      	ldr	r2, [pc, #172]	; (800c7e8 <USART2_IRQHandler+0x254>)
 800c73c:	6010      	str	r0, [r2, #0]
 800c73e:	2210      	movs	r2, #16
 800c740:	f8c1 2c14 	str.w	r2, [r1, #3092]	; 0xc14
 800c744:	e773      	b.n	800c62e <USART2_IRQHandler+0x9a>
 800c746:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800c74a:	2aaa      	cmp	r2, #170	; 0xaa
 800c74c:	545a      	strb	r2, [r3, r1]
 800c74e:	f101 0101 	add.w	r1, r1, #1
 800c752:	b289      	uxth	r1, r1
 800c754:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800c758:	d002      	beq.n	800c760 <USART2_IRQHandler+0x1cc>
 800c75a:	2909      	cmp	r1, #9
 800c75c:	f47f af5d 	bne.w	800c61a <USART2_IRQHandler+0x86>
 800c760:	2200      	movs	r2, #0
 800c762:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800c766:	2209      	movs	r2, #9
 800c768:	e7c9      	b.n	800c6fe <USART2_IRQHandler+0x16a>
 800c76a:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800c76e:	545a      	strb	r2, [r3, r1]
 800c770:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 800c774:	3101      	adds	r1, #1
 800c776:	3201      	adds	r2, #1
 800c778:	b292      	uxth	r2, r2
 800c77a:	2a0c      	cmp	r2, #12
 800c77c:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800c780:	d002      	beq.n	800c788 <USART2_IRQHandler+0x1f4>
 800c782:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800c786:	e748      	b.n	800c61a <USART2_IRQHandler+0x86>
 800c788:	2200      	movs	r2, #0
 800c78a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800c78e:	220a      	movs	r2, #10
 800c790:	e7b5      	b.n	800c6fe <USART2_IRQHandler+0x16a>
 800c792:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800c796:	545a      	strb	r2, [r3, r1]
 800c798:	1c4a      	adds	r2, r1, #1
 800c79a:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800c79e:	b292      	uxth	r2, r2
 800c7a0:	3101      	adds	r1, #1
 800c7a2:	b289      	uxth	r1, r1
 800c7a4:	2904      	cmp	r1, #4
 800c7a6:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800c7aa:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 800c7ae:	f47f af34 	bne.w	800c61a <USART2_IRQHandler+0x86>
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c7b8:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800c7bc:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800c7c0:	4b08      	ldr	r3, [pc, #32]	; (800c7e4 <USART2_IRQHandler+0x250>)
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	4b08      	ldr	r3, [pc, #32]	; (800c7e8 <USART2_IRQHandler+0x254>)
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	e727      	b.n	800c61a <USART2_IRQHandler+0x86>
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c7d0:	e795      	b.n	800c6fe <USART2_IRQHandler+0x16a>
 800c7d2:	bf00      	nop
 800c7d4:	40010000 	andmi	r0, r1, r0
 800c7d8:	2000083c 	andcs	r0, r0, ip, lsr r8
 800c7dc:	20000c58 	andcs	r0, r0, r8, asr ip
 800c7e0:	00cc0001 	sbceq	r0, ip, r1
 800c7e4:	e0001000 	and	r1, r0, r0
 800c7e8:	20000c6c 	andcs	r0, r0, ip, ror #24

0800c7ec <TIMER1_IRQHandler>:
 800c7ec:	b538      	push	{r3, r4, r5, lr}
 800c7ee:	f3bf 8f5f 	dmb	sy
 800c7f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7f6:	2008      	movs	r0, #8
 800c7f8:	691c      	ldr	r4, [r3, #16]
 800c7fa:	4923      	ldr	r1, [pc, #140]	; (800c888 <TIMER1_IRQHandler+0x9c>)
 800c7fc:	4a23      	ldr	r2, [pc, #140]	; (800c88c <TIMER1_IRQHandler+0xa0>)
 800c7fe:	8813      	ldrh	r3, [r2, #0]
 800c800:	f8c1 0c10 	str.w	r0, [r1, #3088]	; 0xc10
 800c804:	07a1      	lsls	r1, r4, #30
 800c806:	d51b      	bpl.n	800c840 <TIMER1_IRQHandler+0x54>
 800c808:	07dd      	lsls	r5, r3, #31
 800c80a:	d50d      	bpl.n	800c828 <TIMER1_IRQHandler+0x3c>
 800c80c:	4d20      	ldr	r5, [pc, #128]	; (800c890 <TIMER1_IRQHandler+0xa4>)
 800c80e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c812:	8013      	strh	r3, [r2, #0]
 800c814:	2110      	movs	r1, #16
 800c816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c81a:	2203      	movs	r2, #3
 800c81c:	4628      	mov	r0, r5
 800c81e:	f006 fdef 	bl	8013400 <gpio_init>
 800c822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c826:	616b      	str	r3, [r5, #20]
 800c828:	4621      	mov	r1, r4
 800c82a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c82e:	f007 f8d4 	bl	80139da <timer_interrupt_flag_clear>
 800c832:	2208      	movs	r2, #8
 800c834:	4b14      	ldr	r3, [pc, #80]	; (800c888 <TIMER1_IRQHandler+0x9c>)
 800c836:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800c83a:	f3bf 8f5f 	dmb	sy
 800c83e:	bd38      	pop	{r3, r4, r5, pc}
 800c840:	0760      	lsls	r0, r4, #29
 800c842:	d509      	bpl.n	800c858 <TIMER1_IRQHandler+0x6c>
 800c844:	05d9      	lsls	r1, r3, #23
 800c846:	d5ef      	bpl.n	800c828 <TIMER1_IRQHandler+0x3c>
 800c848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c84c:	2203      	movs	r2, #3
 800c84e:	2118      	movs	r1, #24
 800c850:	480f      	ldr	r0, [pc, #60]	; (800c890 <TIMER1_IRQHandler+0xa4>)
 800c852:	f006 fdd5 	bl	8013400 <gpio_init>
 800c856:	e7e7      	b.n	800c828 <TIMER1_IRQHandler+0x3c>
 800c858:	0722      	lsls	r2, r4, #28
 800c85a:	d5e5      	bpl.n	800c828 <TIMER1_IRQHandler+0x3c>
 800c85c:	05db      	lsls	r3, r3, #23
 800c85e:	d5e3      	bpl.n	800c828 <TIMER1_IRQHandler+0x3c>
 800c860:	4b0c      	ldr	r3, [pc, #48]	; (800c894 <TIMER1_IRQHandler+0xa8>)
 800c862:	2180      	movs	r1, #128	; 0x80
 800c864:	69da      	ldr	r2, [r3, #28]
 800c866:	480c      	ldr	r0, [pc, #48]	; (800c898 <TIMER1_IRQHandler+0xac>)
 800c868:	f022 0201 	bic.w	r2, r2, #1
 800c86c:	61da      	str	r2, [r3, #28]
 800c86e:	4a0b      	ldr	r2, [pc, #44]	; (800c89c <TIMER1_IRQHandler+0xb0>)
 800c870:	629a      	str	r2, [r3, #40]	; 0x28
 800c872:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 800c876:	621a      	str	r2, [r3, #32]
 800c878:	69da      	ldr	r2, [r3, #28]
 800c87a:	f042 0201 	orr.w	r2, r2, #1
 800c87e:	61da      	str	r2, [r3, #28]
 800c880:	f007 f94a 	bl	8013b18 <usart_dma_transmit_config>
 800c884:	e7d0      	b.n	800c828 <TIMER1_IRQHandler+0x3c>
 800c886:	bf00      	nop
 800c888:	40010000 	andmi	r0, r1, r0
 800c88c:	20000c54 	andcs	r0, r0, r4, asr ip
 800c890:	40011000 	andmi	r1, r1, r0
 800c894:	40020000 	andmi	r0, r2, r0
 800c898:	40004800 	andmi	r4, r0, r0, lsl #16
 800c89c:	20000a4c 	andcs	r0, r0, ip, asr #20

0800c8a0 <TIMER2_IRQHandler>:
 800c8a0:	b508      	push	{r3, lr}
 800c8a2:	f3bf 8f5f 	dmb	sy
 800c8a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8aa:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 800c8ae:	078b      	lsls	r3, r1, #30
 800c8b0:	d511      	bpl.n	800c8d6 <TIMER2_IRQHandler+0x36>
 800c8b2:	4b0c      	ldr	r3, [pc, #48]	; (800c8e4 <TIMER2_IRQHandler+0x44>)
 800c8b4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800c8b8:	2a04      	cmp	r2, #4
 800c8ba:	d10c      	bne.n	800c8d6 <TIMER2_IRQHandler+0x36>
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800c8c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c8ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800c8ce:	2210      	movs	r2, #16
 800c8d0:	4b05      	ldr	r3, [pc, #20]	; (800c8e8 <TIMER2_IRQHandler+0x48>)
 800c8d2:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800c8d6:	4805      	ldr	r0, [pc, #20]	; (800c8ec <TIMER2_IRQHandler+0x4c>)
 800c8d8:	f007 f87f 	bl	80139da <timer_interrupt_flag_clear>
 800c8dc:	f3bf 8f5f 	dmb	sy
 800c8e0:	bd08      	pop	{r3, pc}
 800c8e2:	bf00      	nop
 800c8e4:	2000083c 	andcs	r0, r0, ip, lsr r8
 800c8e8:	40010000 	andmi	r0, r1, r0
 800c8ec:	40000400 	andmi	r0, r0, r0, lsl #8

0800c8f0 <TIMER3_IRQHandler>:
 800c8f0:	b508      	push	{r3, lr}
 800c8f2:	f3bf 8f5f 	dmb	sy
 800c8f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c8fa:	4804      	ldr	r0, [pc, #16]	; (800c90c <TIMER3_IRQHandler+0x1c>)
 800c8fc:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 800c900:	f007 f86b 	bl	80139da <timer_interrupt_flag_clear>
 800c904:	f3bf 8f5f 	dmb	sy
 800c908:	bd08      	pop	{r3, pc}
 800c90a:	bf00      	nop
 800c90c:	40000800 	andmi	r0, r0, r0, lsl #16

0800c910 <TIMER6_IRQHandler>:
 800c910:	b508      	push	{r3, lr}
 800c912:	f3bf 8f5f 	dmb	sy
 800c916:	4b07      	ldr	r3, [pc, #28]	; (800c934 <TIMER6_IRQHandler+0x24>)
 800c918:	4807      	ldr	r0, [pc, #28]	; (800c938 <TIMER6_IRQHandler+0x28>)
 800c91a:	685a      	ldr	r2, [r3, #4]
 800c91c:	6899      	ldr	r1, [r3, #8]
 800c91e:	1a52      	subs	r2, r2, r1
 800c920:	601a      	str	r2, [r3, #0]
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	2101      	movs	r1, #1
 800c926:	609a      	str	r2, [r3, #8]
 800c928:	f007 f857 	bl	80139da <timer_interrupt_flag_clear>
 800c92c:	f3bf 8f5f 	dmb	sy
 800c930:	bd08      	pop	{r3, pc}
 800c932:	bf00      	nop
 800c934:	20000c58 	andcs	r0, r0, r8, asr ip
 800c938:	40001400 	andmi	r1, r0, r0, lsl #8

0800c93c <Dmx::ClearData(unsigned int)>:
 800c93c:	f44f 7301 	mov.w	r3, #516	; 0x204
 800c940:	b510      	push	{r4, lr}
 800c942:	2400      	movs	r4, #0
 800c944:	4a08      	ldr	r2, [pc, #32]	; (800c968 <Dmx::ClearData(unsigned int)+0x2c>)
 800c946:	fb03 2301 	mla	r3, r3, r1, r2
 800c94a:	f203 2002 	addw	r0, r3, #514	; 0x202
 800c94e:	f823 4b02 	strh.w	r4, [r3], #2
 800c952:	4283      	cmp	r3, r0
 800c954:	d1fb      	bne.n	800c94e <Dmx::ClearData(unsigned int)+0x12>
 800c956:	f44f 7301 	mov.w	r3, #516	; 0x204
 800c95a:	fb03 2201 	mla	r2, r3, r1, r2
 800c95e:	f240 2301 	movw	r3, #513	; 0x201
 800c962:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 800c966:	bd10      	pop	{r4, pc}
 800c968:	20000a4c 	andcs	r0, r0, ip, asr #20

0800c96c <Dmx::StartData(unsigned int, unsigned int)>:
 800c96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c96e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800c972:	6943      	ldr	r3, [r0, #20]
 800c974:	460c      	mov	r4, r1
 800c976:	4615      	mov	r5, r2
 800c978:	b085      	sub	sp, #20
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d16a      	bne.n	800ca54 <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 800c97e:	4e47      	ldr	r6, [pc, #284]	; (800ca9c <Dmx::StartData(unsigned int, unsigned int)+0x130>)
 800c980:	8834      	ldrh	r4, [r6, #0]
 800c982:	2c00      	cmp	r4, #0
 800c984:	d15b      	bne.n	800ca3e <Dmx::StartData(unsigned int, unsigned int)+0xd2>
 800c986:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800c98a:	f006 fdd1 	bl	8013530 <rcu_periph_clock_enable>
 800c98e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c992:	f006 ff2b 	bl	80137ec <timer_deinit>
 800c996:	236b      	movs	r3, #107	; 0x6b
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	4b41      	ldr	r3, [pc, #260]	; (800caa0 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 800c99c:	4669      	mov	r1, sp
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c9a4:	9302      	str	r3, [sp, #8]
 800c9a6:	f8ad 4004 	strh.w	r4, [sp, #4]
 800c9aa:	f8ad 400c 	strh.w	r4, [sp, #12]
 800c9ae:	f88d 400e 	strb.w	r4, [sp, #14]
 800c9b2:	f006 ff7d 	bl	80138b0 <timer_init>
 800c9b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c9ba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c9be:	f007 f80f 	bl	80139e0 <timer_flag_clear>
 800c9c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c9c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c9ca:	f007 f806 	bl	80139da <timer_interrupt_flag_clear>
 800c9ce:	2210      	movs	r2, #16
 800c9d0:	4621      	mov	r1, r4
 800c9d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c9d6:	f006 ffc8 	bl	801396a <timer_channel_output_mode_config>
 800c9da:	2210      	movs	r2, #16
 800c9dc:	2101      	movs	r1, #1
 800c9de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c9e2:	f006 ffc2 	bl	801396a <timer_channel_output_mode_config>
 800c9e6:	4f2f      	ldr	r7, [pc, #188]	; (800caa4 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 800c9e8:	2210      	movs	r2, #16
 800c9ea:	2102      	movs	r1, #2
 800c9ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c9f0:	f006 ffbb 	bl	801396a <timer_channel_output_mode_config>
 800c9f4:	4622      	mov	r2, r4
 800c9f6:	4621      	mov	r1, r4
 800c9f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c9fc:	f006 ffdb 	bl	80139b6 <timer_channel_output_pulse_value_config>
 800ca00:	2101      	movs	r1, #1
 800ca02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ca06:	883a      	ldrh	r2, [r7, #0]
 800ca08:	f006 ffd5 	bl	80139b6 <timer_channel_output_pulse_value_config>
 800ca0c:	4b26      	ldr	r3, [pc, #152]	; (800caa8 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 800ca0e:	683a      	ldr	r2, [r7, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2102      	movs	r1, #2
 800ca14:	441a      	add	r2, r3
 800ca16:	b292      	uxth	r2, r2
 800ca18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ca1c:	f006 ffcb 	bl	80139b6 <timer_channel_output_pulse_value_config>
 800ca20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ca24:	210e      	movs	r1, #14
 800ca26:	f006 ffd4 	bl	80139d2 <timer_interrupt_enable>
 800ca2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca2e:	4b1f      	ldr	r3, [pc, #124]	; (800caac <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 800ca30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800ca34:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 800ca38:	601a      	str	r2, [r3, #0]
 800ca3a:	f006 ff91 	bl	8013960 <timer_enable>
 800ca3e:	2201      	movs	r2, #1
 800ca40:	8831      	ldrh	r1, [r6, #0]
 800ca42:	fa02 f305 	lsl.w	r3, r2, r5
 800ca46:	430b      	orrs	r3, r1
 800ca48:	8033      	strh	r3, [r6, #0]
 800ca4a:	4b19      	ldr	r3, [pc, #100]	; (800cab0 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 800ca4c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca50:	b005      	add	sp, #20
 800ca52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca54:	f44f 7204 	mov.w	r2, #528	; 0x210
 800ca58:	4b16      	ldr	r3, [pc, #88]	; (800cab4 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800ca5a:	fb02 3305 	mla	r3, r2, r5, r3
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800ca64:	2107      	movs	r1, #7
 800ca66:	4620      	mov	r0, r4
 800ca68:	f007 f85c 	bl	8013b24 <usart_flag_get>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d0f9      	beq.n	800ca64 <Dmx::StartData(unsigned int, unsigned int)+0xf8>
 800ca70:	4620      	mov	r0, r4
 800ca72:	4911      	ldr	r1, [pc, #68]	; (800cab8 <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 800ca74:	f007 f878 	bl	8013b68 <usart_interrupt_flag_clear>
 800ca78:	f240 3105 	movw	r1, #773	; 0x305
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f007 f85c 	bl	8013b3a <usart_interrupt_enable>
 800ca82:	2202      	movs	r2, #2
 800ca84:	4b0a      	ldr	r3, [pc, #40]	; (800cab0 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 800ca86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ca8e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800ca92:	f043 0302 	orr.w	r3, r3, #2
 800ca96:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800ca9a:	e7d9      	b.n	800ca50 <Dmx::StartData(unsigned int, unsigned int)+0xe4>
 800ca9c:	20000c54 	andcs	r0, r0, r4, asr ip
 800caa0:	20000008 	andcs	r0, r0, r8
 800caa4:	20000010 	andcs	r0, r0, r0, lsl r0
 800caa8:	2000000c 	andcs	r0, r0, ip
 800caac:	e000e100 	and	lr, r0, r0, lsl #2
 800cab0:	20000c50 	andcs	r0, r0, r0, asr ip
 800cab4:	2000083c 	andcs	r0, r0, ip, lsr r8
 800cab8:	00050305 	andeq	r0, r5, r5, lsl #6

0800cabc <Dmx::StopData(unsigned int, unsigned int)>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	4d17      	ldr	r5, [pc, #92]	; (800cb1c <Dmx::StopData(unsigned int, unsigned int)+0x60>)
 800cac0:	4614      	mov	r4, r2
 800cac2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800cac6:	4603      	mov	r3, r0
 800cac8:	4608      	mov	r0, r1
 800caca:	b182      	cbz	r2, 800caee <Dmx::StopData(unsigned int, unsigned int)+0x32>
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	b97b      	cbnz	r3, 800caf0 <Dmx::StopData(unsigned int, unsigned int)+0x34>
 800cad0:	2201      	movs	r2, #1
 800cad2:	4913      	ldr	r1, [pc, #76]	; (800cb20 <Dmx::StopData(unsigned int, unsigned int)+0x64>)
 800cad4:	f104 0308 	add.w	r3, r4, #8
 800cad8:	fa02 f303 	lsl.w	r3, r2, r3
 800cadc:	40a2      	lsls	r2, r4
 800cade:	4313      	orrs	r3, r2
 800cae0:	880a      	ldrh	r2, [r1, #0]
 800cae2:	ea22 0303 	bic.w	r3, r2, r3
 800cae6:	800b      	strh	r3, [r1, #0]
 800cae8:	2300      	movs	r3, #0
 800caea:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800caee:	bd38      	pop	{r3, r4, r5, pc}
 800caf0:	f240 3105 	movw	r1, #773	; 0x305
 800caf4:	f007 f82c 	bl	8013b50 <usart_interrupt_disable>
 800caf8:	f44f 7204 	mov.w	r2, #528	; 0x210
 800cafc:	4b09      	ldr	r3, [pc, #36]	; (800cb24 <Dmx::StopData(unsigned int, unsigned int)+0x68>)
 800cafe:	fb02 3304 	mla	r3, r2, r4, r3
 800cb02:	2200      	movs	r2, #0
 800cb04:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800cb08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cb0c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800cb10:	f023 0302 	bic.w	r3, r3, #2
 800cb14:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800cb18:	e7e6      	b.n	800cae8 <Dmx::StopData(unsigned int, unsigned int)+0x2c>
 800cb1a:	bf00      	nop
 800cb1c:	20000c50 	andcs	r0, r0, r0, asr ip
 800cb20:	20000c54 	andcs	r0, r0, r4, asr ip
 800cb24:	2000083c 	andcs	r0, r0, ip, lsr r8

0800cb28 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 800cb28:	b570      	push	{r4, r5, r6, lr}
 800cb2a:	461d      	mov	r5, r3
 800cb2c:	6943      	ldr	r3, [r0, #20]
 800cb2e:	4606      	mov	r6, r0
 800cb30:	4293      	cmp	r3, r2
 800cb32:	4614      	mov	r4, r2
 800cb34:	d014      	beq.n	800cb60 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 800cb36:	6142      	str	r2, [r0, #20]
 800cb38:	4910      	ldr	r1, [pc, #64]	; (800cb7c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f7ff ffbe 	bl	800cabc <Dmx::StopData(unsigned int, unsigned int)>
 800cb40:	b934      	cbnz	r4, 800cb50 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 800cb42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cb46:	4b0e      	ldr	r3, [pc, #56]	; (800cb80 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800cb48:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800cb4c:	b94d      	cbnz	r5, 800cb62 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	2c01      	cmp	r4, #1
 800cb52:	d1fb      	bne.n	800cb4c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800cb54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cb58:	4b09      	ldr	r3, [pc, #36]	; (800cb80 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800cb5a:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800cb5e:	e7f5      	b.n	800cb4c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800cb60:	b135      	cbz	r5, 800cb70 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 800cb62:	4630      	mov	r0, r6
 800cb64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb68:	2200      	movs	r2, #0
 800cb6a:	4904      	ldr	r1, [pc, #16]	; (800cb7c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800cb6c:	f7ff befe 	b.w	800c96c <Dmx::StartData(unsigned int, unsigned int)>
 800cb70:	462a      	mov	r2, r5
 800cb72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb76:	4901      	ldr	r1, [pc, #4]	; (800cb7c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800cb78:	f7ff bfa0 	b.w	800cabc <Dmx::StopData(unsigned int, unsigned int)>
 800cb7c:	40004800 	andmi	r4, r0, r0, lsl #16
 800cb80:	40010000 	andmi	r0, r1, r0

0800cb84 <Dmx::Dmx()>:
 800cb84:	225c      	movs	r2, #92	; 0x5c
 800cb86:	230c      	movs	r3, #12
 800cb88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb8c:	e9c0 2300 	strd	r2, r3, [r0]
 800cb90:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800cb94:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800cb98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb9c:	2400      	movs	r4, #0
 800cb9e:	4605      	mov	r5, r0
 800cba0:	8203      	strh	r3, [r0, #16]
 800cba2:	4b5d      	ldr	r3, [pc, #372]	; (800cd18 <Dmx::Dmx()+0x194>)
 800cba4:	b08b      	sub	sp, #44	; 0x2c
 800cba6:	6018      	str	r0, [r3, #0]
 800cba8:	4b5c      	ldr	r3, [pc, #368]	; (800cd1c <Dmx::Dmx()+0x198>)
 800cbaa:	2203      	movs	r2, #3
 800cbac:	801c      	strh	r4, [r3, #0]
 800cbae:	2110      	movs	r1, #16
 800cbb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbb4:	485a      	ldr	r0, [pc, #360]	; (800cd20 <Dmx::Dmx()+0x19c>)
 800cbb6:	f006 fc23 	bl	8013400 <gpio_init>
 800cbba:	4621      	mov	r1, r4
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	f7ff febd 	bl	800c93c <Dmx::ClearData(unsigned int)>
 800cbc2:	4b58      	ldr	r3, [pc, #352]	; (800cd24 <Dmx::Dmx()+0x1a0>)
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	601c      	str	r4, [r3, #0]
 800cbca:	4623      	mov	r3, r4
 800cbcc:	f7ff ffac 	bl	800cb28 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800cbd0:	4b55      	ldr	r3, [pc, #340]	; (800cd28 <Dmx::Dmx()+0x1a4>)
 800cbd2:	4e56      	ldr	r6, [pc, #344]	; (800cd2c <Dmx::Dmx()+0x1a8>)
 800cbd4:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 800cbd8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800cbdc:	f006 fca8 	bl	8013530 <rcu_periph_clock_enable>
 800cbe0:	f240 5001 	movw	r0, #1281	; 0x501
 800cbe4:	f006 fca4 	bl	8013530 <rcu_periph_clock_enable>
 800cbe8:	4630      	mov	r0, r6
 800cbea:	2101      	movs	r1, #1
 800cbec:	f006 fb08 	bl	8013200 <dma_deinit>
 800cbf0:	4b4f      	ldr	r3, [pc, #316]	; (800cd30 <Dmx::Dmx()+0x1ac>)
 800cbf2:	2701      	movs	r7, #1
 800cbf4:	e9cd 3403 	strd	r3, r4, [sp, #12]
 800cbf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cbfc:	9308      	str	r3, [sp, #32]
 800cbfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cc02:	aa03      	add	r2, sp, #12
 800cc04:	4639      	mov	r1, r7
 800cc06:	4630      	mov	r0, r6
 800cc08:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800cc0c:	9406      	str	r4, [sp, #24]
 800cc0e:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800cc12:	f006 fb11 	bl	8013238 <dma_init>
 800cc16:	4639      	mov	r1, r7
 800cc18:	4630      	mov	r0, r6
 800cc1a:	f006 fb47 	bl	80132ac <dma_circulation_disable>
 800cc1e:	4639      	mov	r1, r7
 800cc20:	4630      	mov	r0, r6
 800cc22:	f006 fb53 	bl	80132cc <dma_memory_to_memory_disable>
 800cc26:	f5a6 36fe 	sub.w	r6, r6, #130048	; 0x1fc00
 800cc2a:	f240 7001 	movw	r0, #1793	; 0x701
 800cc2e:	f006 fc7f 	bl	8013530 <rcu_periph_clock_enable>
 800cc32:	4630      	mov	r0, r6
 800cc34:	f006 fdda 	bl	80137ec <timer_deinit>
 800cc38:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800cc3c:	236b      	movs	r3, #107	; 0x6b
 800cc3e:	4630      	mov	r0, r6
 800cc40:	a903      	add	r1, sp, #12
 800cc42:	9303      	str	r3, [sp, #12]
 800cc44:	f8ad 4010 	strh.w	r4, [sp, #16]
 800cc48:	f8cd 9014 	str.w	r9, [sp, #20]
 800cc4c:	f8ad 4018 	strh.w	r4, [sp, #24]
 800cc50:	f88d 401a 	strb.w	r4, [sp, #26]
 800cc54:	f006 fe2c 	bl	80138b0 <timer_init>
 800cc58:	4649      	mov	r1, r9
 800cc5a:	4630      	mov	r0, r6
 800cc5c:	f006 fec0 	bl	80139e0 <timer_flag_clear>
 800cc60:	4649      	mov	r1, r9
 800cc62:	4630      	mov	r0, r6
 800cc64:	f006 feb9 	bl	80139da <timer_interrupt_flag_clear>
 800cc68:	4621      	mov	r1, r4
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	2210      	movs	r2, #16
 800cc6e:	f006 fe7c 	bl	801396a <timer_channel_output_mode_config>
 800cc72:	4639      	mov	r1, r7
 800cc74:	4630      	mov	r0, r6
 800cc76:	2210      	movs	r2, #16
 800cc78:	f006 fe77 	bl	801396a <timer_channel_output_mode_config>
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	2210      	movs	r2, #16
 800cc80:	2102      	movs	r1, #2
 800cc82:	f006 fe72 	bl	801396a <timer_channel_output_mode_config>
 800cc86:	2210      	movs	r2, #16
 800cc88:	2103      	movs	r1, #3
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f006 fe6d 	bl	801396a <timer_channel_output_mode_config>
 800cc90:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800cc94:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800cd34 <Dmx::Dmx()+0x1b0>
 800cc98:	4630      	mov	r0, r6
 800cc9a:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 800cc9e:	f8c8 3000 	str.w	r3, [r8]
 800cca2:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800cca6:	f006 fe5b 	bl	8013960 <timer_enable>
 800ccaa:	f240 7005 	movw	r0, #1797	; 0x705
 800ccae:	f006 fc3f 	bl	8013530 <rcu_periph_clock_enable>
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f006 fd9a 	bl	80137ec <timer_deinit>
 800ccb8:	f642 232f 	movw	r3, #10799	; 0x2a2f
 800ccbc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ccc0:	f242 7310 	movw	r3, #10000	; 0x2710
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	a903      	add	r1, sp, #12
 800ccc8:	9305      	str	r3, [sp, #20]
 800ccca:	f006 fdf1 	bl	80138b0 <timer_init>
 800ccce:	4649      	mov	r1, r9
 800ccd0:	4630      	mov	r0, r6
 800ccd2:	f006 fe85 	bl	80139e0 <timer_flag_clear>
 800ccd6:	4649      	mov	r1, r9
 800ccd8:	4630      	mov	r0, r6
 800ccda:	f006 fe7e 	bl	80139da <timer_interrupt_flag_clear>
 800ccde:	4639      	mov	r1, r7
 800cce0:	4630      	mov	r0, r6
 800cce2:	f006 fe76 	bl	80139d2 <timer_interrupt_enable>
 800cce6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ccea:	4630      	mov	r0, r6
 800ccec:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 800ccf0:	f8c8 3004 	str.w	r3, [r8, #4]
 800ccf4:	f006 fe34 	bl	8013960 <timer_enable>
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	2208      	movs	r2, #8
 800ccfc:	9300      	str	r3, [sp, #0]
 800ccfe:	490e      	ldr	r1, [pc, #56]	; (800cd38 <Dmx::Dmx()+0x1b4>)
 800cd00:	4623      	mov	r3, r4
 800cd02:	480e      	ldr	r0, [pc, #56]	; (800cd3c <Dmx::Dmx()+0x1b8>)
 800cd04:	f007 f9a8 	bl	8014058 <gd32_uart_begin>
 800cd08:	2380      	movs	r3, #128	; 0x80
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	f8c8 3004 	str.w	r3, [r8, #4]
 800cd10:	b00b      	add	sp, #44	; 0x2c
 800cd12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd16:	bf00      	nop
 800cd18:	20000c68 	andcs	r0, r0, r8, ror #24
 800cd1c:	20000c54 	andcs	r0, r0, r4, asr ip
 800cd20:	40010c00 	andmi	r0, r1, r0, lsl #24
 800cd24:	20000c50 	andcs	r0, r0, r0, asr ip
 800cd28:	2000083c 	andcs	r0, r0, ip, lsr r8
 800cd2c:	40020000 	andmi	r0, r2, r0
 800cd30:	40004804 	andmi	r4, r0, r4, lsl #16
 800cd34:	e000e100 	and	lr, r0, r0, lsl #2
 800cd38:	0003d090 	muleq	r3, r0, r0
 800cd3c:	40004800 	andmi	r4, r0, r0, lsl #16

0800cd40 <Dmx::SetDmxPeriodTime(unsigned int)>:
 800cd40:	4b13      	ldr	r3, [pc, #76]	; (800cd90 <Dmx::SetDmxPeriodTime(unsigned int)+0x50>)
 800cd42:	b570      	push	{r4, r5, r6, lr}
 800cd44:	60c1      	str	r1, [r0, #12]
 800cd46:	f8b3 0202 	ldrh.w	r0, [r3, #514]	; 0x202
 800cd4a:	232c      	movs	r3, #44	; 0x2c
 800cd4c:	f64f 76d3 	movw	r6, #65491	; 0xffd3
 800cd50:	4d10      	ldr	r5, [pc, #64]	; (800cd94 <Dmx::SetDmxPeriodTime(unsigned int)+0x54>)
 800cd52:	4c11      	ldr	r4, [pc, #68]	; (800cd98 <Dmx::SetDmxPeriodTime(unsigned int)+0x58>)
 800cd54:	4358      	muls	r0, r3
 800cd56:	682a      	ldr	r2, [r5, #0]
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	4403      	add	r3, r0
 800cd5e:	42b3      	cmp	r3, r6
 800cd60:	d908      	bls.n	800cd74 <Dmx::SetDmxPeriodTime(unsigned int)+0x34>
 800cd62:	2ab0      	cmp	r2, #176	; 0xb0
 800cd64:	4613      	mov	r3, r2
 800cd66:	bf28      	it	cs
 800cd68:	23b0      	movcs	r3, #176	; 0xb0
 800cd6a:	220c      	movs	r2, #12
 800cd6c:	602b      	str	r3, [r5, #0]
 800cd6e:	4413      	add	r3, r2
 800cd70:	6022      	str	r2, [r4, #0]
 800cd72:	4403      	add	r3, r0
 800cd74:	b109      	cbz	r1, 800cd7a <Dmx::SetDmxPeriodTime(unsigned int)+0x3a>
 800cd76:	428b      	cmp	r3, r1
 800cd78:	d906      	bls.n	800cd88 <Dmx::SetDmxPeriodTime(unsigned int)+0x48>
 800cd7a:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800cd7e:	f240 43b4 	movw	r3, #1204	; 0x4b4
 800cd82:	4299      	cmp	r1, r3
 800cd84:	bf38      	it	cc
 800cd86:	4619      	movcc	r1, r3
 800cd88:	4b04      	ldr	r3, [pc, #16]	; (800cd9c <Dmx::SetDmxPeriodTime(unsigned int)+0x5c>)
 800cd8a:	6019      	str	r1, [r3, #0]
 800cd8c:	bd70      	pop	{r4, r5, r6, pc}
 800cd8e:	bf00      	nop
 800cd90:	20000a4c 	andcs	r0, r0, ip, asr #20
 800cd94:	20000010 	andcs	r0, r0, r0, lsl r0
 800cd98:	2000000c 	andcs	r0, r0, ip
 800cd9c:	20000008 	andcs	r0, r0, r8

0800cda0 <Dmx::SetDmxBreakTime(unsigned int)>:
 800cda0:	295c      	cmp	r1, #92	; 0x5c
 800cda2:	bf38      	it	cc
 800cda4:	215c      	movcc	r1, #92	; 0x5c
 800cda6:	4b02      	ldr	r3, [pc, #8]	; (800cdb0 <Dmx::SetDmxBreakTime(unsigned int)+0x10>)
 800cda8:	6019      	str	r1, [r3, #0]
 800cdaa:	68c1      	ldr	r1, [r0, #12]
 800cdac:	f7ff bfc8 	b.w	800cd40 <Dmx::SetDmxPeriodTime(unsigned int)>
 800cdb0:	20000010 	andcs	r0, r0, r0, lsl r0

0800cdb4 <Dmx::SetDmxMabTime(unsigned int)>:
 800cdb4:	290c      	cmp	r1, #12
 800cdb6:	bf38      	it	cc
 800cdb8:	210c      	movcc	r1, #12
 800cdba:	4b02      	ldr	r3, [pc, #8]	; (800cdc4 <Dmx::SetDmxMabTime(unsigned int)+0x10>)
 800cdbc:	6019      	str	r1, [r3, #0]
 800cdbe:	68c1      	ldr	r1, [r0, #12]
 800cdc0:	f7ff bfbe 	b.w	800cd40 <Dmx::SetDmxPeriodTime(unsigned int)>
 800cdc4:	2000000c 	andcs	r0, r0, ip

0800cdc8 <Dmx::SetDmxSlots(unsigned short)>:
 800cdc8:	1e8b      	subs	r3, r1, #2
 800cdca:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800cdce:	d809      	bhi.n	800cde4 <Dmx::SetDmxSlots(unsigned short)+0x1c>
 800cdd0:	6983      	ldr	r3, [r0, #24]
 800cdd2:	8201      	strh	r1, [r0, #16]
 800cdd4:	b11b      	cbz	r3, 800cdde <Dmx::SetDmxSlots(unsigned short)+0x16>
 800cdd6:	4299      	cmp	r1, r3
 800cdd8:	bf94      	ite	ls
 800cdda:	6181      	strls	r1, [r0, #24]
 800cddc:	6183      	strhi	r3, [r0, #24]
 800cdde:	68c1      	ldr	r1, [r0, #12]
 800cde0:	f7ff bfae 	b.w	800cd40 <Dmx::SetDmxPeriodTime(unsigned int)>
 800cde4:	4770      	bx	lr
	...

0800cde8 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>:
 800cde8:	b4f0      	push	{r4, r5, r6, r7}
 800cdea:	8a04      	ldrh	r4, [r0, #16]
 800cdec:	4d11      	ldr	r5, [pc, #68]	; (800ce34 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x4c>)
 800cdee:	42a3      	cmp	r3, r4
 800cdf0:	bf28      	it	cs
 800cdf2:	4623      	movcs	r3, r4
 800cdf4:	f44f 7401 	mov.w	r4, #516	; 0x204
 800cdf8:	434c      	muls	r4, r1
 800cdfa:	1c5f      	adds	r7, r3, #1
 800cdfc:	192e      	adds	r6, r5, r4
 800cdfe:	f892 f000 	pld	[r2]
 800ce02:	3401      	adds	r4, #1
 800ce04:	442c      	add	r4, r5
 800ce06:	f8a6 7202 	strh.w	r7, [r6, #514]	; 0x202
 800ce0a:	18d5      	adds	r5, r2, r3
 800ce0c:	4295      	cmp	r5, r2
 800ce0e:	d109      	bne.n	800ce24 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x3c>
 800ce10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce14:	698a      	ldr	r2, [r1, #24]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d009      	beq.n	800ce2e <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x46>
 800ce1a:	bcf0      	pop	{r4, r5, r6, r7}
 800ce1c:	618b      	str	r3, [r1, #24]
 800ce1e:	68c1      	ldr	r1, [r0, #12]
 800ce20:	f7ff bf8e 	b.w	800cd40 <Dmx::SetDmxPeriodTime(unsigned int)>
 800ce24:	f812 6b01 	ldrb.w	r6, [r2], #1
 800ce28:	f804 6b01 	strb.w	r6, [r4], #1
 800ce2c:	e7ee      	b.n	800ce0c <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x24>
 800ce2e:	bcf0      	pop	{r4, r5, r6, r7}
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	20000a4c 	andcs	r0, r0, ip, asr #20

0800ce38 <Dmx::GetDmxAvailable(unsigned int)>:
 800ce38:	f44f 7204 	mov.w	r2, #528	; 0x210
 800ce3c:	4b07      	ldr	r3, [pc, #28]	; (800ce5c <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 800ce3e:	fb02 3101 	mla	r1, r2, r1, r3
 800ce42:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 800ce46:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800ce4a:	bf1f      	itttt	ne
 800ce4c:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800ce50:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800ce54:	4608      	movne	r0, r1
 800ce56:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800ce5a:	4770      	bx	lr
 800ce5c:	2000083c 	andcs	r0, r0, ip, lsr r8

0800ce60 <Dmx::GetUpdatesPerSecond(unsigned int)>:
 800ce60:	f3bf 8f5f 	dmb	sy
 800ce64:	4b01      	ldr	r3, [pc, #4]	; (800ce6c <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 800ce66:	0109      	lsls	r1, r1, #4
 800ce68:	5858      	ldr	r0, [r3, r1]
 800ce6a:	4770      	bx	lr
 800ce6c:	20000c58 	andcs	r0, r0, r8, asr ip

0800ce70 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800ce70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce72:	4614      	mov	r4, r2
 800ce74:	461d      	mov	r5, r3
 800ce76:	4e1f      	ldr	r6, [pc, #124]	; (800cef4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800ce78:	2106      	movs	r1, #6
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f006 fe52 	bl	8013b24 <usart_flag_get>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d0f9      	beq.n	800ce78 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 800ce84:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800ce88:	4e1b      	ldr	r6, [pc, #108]	; (800cef8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 800ce8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce8e:	2203      	movs	r2, #3
 800ce90:	4630      	mov	r0, r6
 800ce92:	2110      	movs	r1, #16
 800ce94:	f006 fab4 	bl	8013400 <gpio_init>
 800ce98:	6177      	str	r7, [r6, #20]
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	20b0      	movs	r0, #176	; 0xb0
 800ce9e:	f007 f9c9 	bl	8014234 <udelay(unsigned int, unsigned int)>
 800cea2:	463b      	mov	r3, r7
 800cea4:	4630      	mov	r0, r6
 800cea6:	2203      	movs	r2, #3
 800cea8:	2118      	movs	r1, #24
 800ceaa:	f006 faa9 	bl	8013400 <gpio_init>
 800ceae:	2100      	movs	r1, #0
 800ceb0:	200c      	movs	r0, #12
 800ceb2:	f007 f9bf 	bl	8014234 <udelay(unsigned int, unsigned int)>
 800ceb6:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
 800ceba:	4425      	add	r5, r4
 800cebc:	f5a6 4648 	sub.w	r6, r6, #51200	; 0xc800
 800cec0:	42ac      	cmp	r4, r5
 800cec2:	d109      	bne.n	800ced8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 800cec4:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 800cec8:	4c0a      	ldr	r4, [pc, #40]	; (800cef4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800ceca:	2106      	movs	r1, #6
 800cecc:	4620      	mov	r0, r4
 800cece:	f006 fe29 	bl	8013b24 <usart_flag_get>
 800ced2:	2801      	cmp	r0, #1
 800ced4:	d10b      	bne.n	800ceee <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x7e>
 800ced6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ced8:	2107      	movs	r1, #7
 800ceda:	4630      	mov	r0, r6
 800cedc:	f006 fe22 	bl	8013b24 <usart_flag_get>
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d0f9      	beq.n	800ced8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 800cee4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cee8:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800ceec:	e7e8      	b.n	800cec0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x50>
 800ceee:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800cef2:	e7ea      	b.n	800ceca <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x5a>
 800cef4:	40004800 	andmi	r4, r0, r0, lsl #16
 800cef8:	40011000 	andmi	r1, r1, r0

0800cefc <Dmx::RdmReceive(unsigned int)>:
 800cefc:	f44f 7204 	mov.w	r2, #528	; 0x210
 800cf00:	4b06      	ldr	r3, [pc, #24]	; (800cf1c <Dmx::RdmReceive(unsigned int)+0x20>)
 800cf02:	fb02 3101 	mla	r1, r2, r1, r3
 800cf06:	f8b1 0204 	ldrh.w	r0, [r1, #516]	; 0x204
 800cf0a:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800cf0e:	bf1e      	ittt	ne
 800cf10:	2300      	movne	r3, #0
 800cf12:	4608      	movne	r0, r1
 800cf14:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	2000083c 	andcs	r0, r0, ip, lsr r8

0800cf20 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>:
 800cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf22:	2300      	movs	r3, #0
 800cf24:	4605      	mov	r5, r0
 800cf26:	460e      	mov	r6, r1
 800cf28:	4614      	mov	r4, r2
 800cf2a:	4f05      	ldr	r7, [pc, #20]	; (800cf40 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x20>)
 800cf2c:	627b      	str	r3, [r7, #36]	; 0x24
 800cf2e:	4631      	mov	r1, r6
 800cf30:	4628      	mov	r0, r5
 800cf32:	f7ff ffe3 	bl	800cefc <Dmx::RdmReceive(unsigned int)>
 800cf36:	b910      	cbnz	r0, 800cf3e <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x1e>
 800cf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3a:	42a3      	cmp	r3, r4
 800cf3c:	d3f7      	bcc.n	800cf2e <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0xe>
 800cf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf40:	40001000 	andmi	r1, r0, r0

0800cf44 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>:
 800cf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf46:	4604      	mov	r4, r0
 800cf48:	b192      	cbz	r2, 800cf70 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x2c>
 800cf4a:	256c      	movs	r5, #108	; 0x6c
 800cf4c:	4e19      	ldr	r6, [pc, #100]	; (800cfb4 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800cf4e:	4b1a      	ldr	r3, [pc, #104]	; (800cfb8 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x74>)
 800cf50:	6870      	ldr	r0, [r6, #4]
 800cf52:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cf56:	fbb0 f0f5 	udiv	r0, r0, r5
 800cf5a:	1ac7      	subs	r7, r0, r3
 800cf5c:	42ba      	cmp	r2, r7
 800cf5e:	d907      	bls.n	800cf70 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x2c>
 800cf60:	1a1b      	subs	r3, r3, r0
 800cf62:	441a      	add	r2, r3
 800cf64:	6873      	ldr	r3, [r6, #4]
 800cf66:	fbb3 f3f5 	udiv	r3, r3, r5
 800cf6a:	1a1b      	subs	r3, r3, r0
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d3f9      	bcc.n	800cf64 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x20>
 800cf70:	4d12      	ldr	r5, [pc, #72]	; (800cfbc <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x78>)
 800cf72:	460a      	mov	r2, r1
 800cf74:	5d2b      	ldrb	r3, [r5, r4]
 800cf76:	7888      	ldrb	r0, [r1, #2]
 800cf78:	73cb      	strb	r3, [r1, #15]
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	1846      	adds	r6, r0, r1
 800cf7e:	42b2      	cmp	r2, r6
 800cf80:	d113      	bne.n	800cfaa <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x66>
 800cf82:	0a1e      	lsrs	r6, r3, #8
 800cf84:	540e      	strb	r6, [r1, r0]
 800cf86:	7053      	strb	r3, [r2, #1]
 800cf88:	788a      	ldrb	r2, [r1, #2]
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	3202      	adds	r2, #2
 800cf8e:	f7ff fae1 	bl	800c554 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800cf92:	226c      	movs	r2, #108	; 0x6c
 800cf94:	4b07      	ldr	r3, [pc, #28]	; (800cfb4 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf9c:	4a06      	ldr	r2, [pc, #24]	; (800cfb8 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x74>)
 800cf9e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cfa2:	5d2b      	ldrb	r3, [r5, r4]
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	552b      	strb	r3, [r5, r4]
 800cfa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfaa:	f812 7b01 	ldrb.w	r7, [r2], #1
 800cfae:	443b      	add	r3, r7
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	e7e4      	b.n	800cf7e <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x3a>
 800cfb4:	e0001000 	and	r1, r0, r0
 800cfb8:	20000c70 	andcs	r0, r0, r0, ror ip
 800cfbc:	20000c74 	andcs	r0, r0, r4, ror ip

0800cfc0 <RemoteConfig::HandleList()>:
 800cfc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfc4:	6801      	ldr	r1, [r0, #0]
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	2012      	movs	r0, #18
 800cfca:	f04f 080c 	mov.w	r8, #12
 800cfce:	4a2b      	ldr	r2, [pc, #172]	; (800d07c <RemoteConfig::HandleList()+0xbc>)
 800cfd0:	4b2b      	ldr	r3, [pc, #172]	; (800d080 <RemoteConfig::HandleList()+0xc0>)
 800cfd2:	fb00 2201 	mla	r2, r0, r1, r2
 800cfd6:	6860      	ldr	r0, [r4, #4]
 800cfd8:	492a      	ldr	r1, [pc, #168]	; (800d084 <RemoteConfig::HandleList()+0xc4>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	fb08 1100 	mla	r1, r8, r0, r1
 800cfe0:	4e29      	ldr	r6, [pc, #164]	; (800d088 <RemoteConfig::HandleList()+0xc8>)
 800cfe2:	482a      	ldr	r0, [pc, #168]	; (800d08c <RemoteConfig::HandleList()+0xcc>)
 800cfe4:	691f      	ldr	r7, [r3, #16]
 800cfe6:	6835      	ldr	r5, [r6, #0]
 800cfe8:	f890 9009 	ldrb.w	r9, [r0, #9]
 800cfec:	b2fb      	uxtb	r3, r7
 800cfee:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 800cff2:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800cff6:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800cffa:	b089      	sub	sp, #36	; 0x24
 800cffc:	3507      	adds	r5, #7
 800cffe:	0e3f      	lsrs	r7, r7, #24
 800d000:	f1b9 0f00 	cmp.w	r9, #0
 800d004:	d020      	beq.n	800d048 <RemoteConfig::HandleList()+0x88>
 800d006:	3009      	adds	r0, #9
 800d008:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800d00c:	e9cd 8005 	strd	r8, r0, [sp, #20]
 800d010:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800d014:	4628      	mov	r0, r5
 800d016:	e9cd e701 	strd	lr, r7, [sp, #4]
 800d01a:	4a1d      	ldr	r2, [pc, #116]	; (800d090 <RemoteConfig::HandleList()+0xd0>)
 800d01c:	f8cd c000 	str.w	ip, [sp]
 800d020:	f005 fec0 	bl	8012da4 <snprintf>
 800d024:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800d028:	2b05      	cmp	r3, #5
 800d02a:	d11a      	bne.n	800d062 <RemoteConfig::HandleList()+0xa2>
 800d02c:	f642 1305 	movw	r3, #10501	; 0x2905
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d036:	b282      	uxth	r2, r0
 800d038:	4629      	mov	r1, r5
 800d03a:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d03e:	f002 fb01 	bl	800f644 <udp_send>
 800d042:	b009      	add	sp, #36	; 0x24
 800d044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d048:	e9cd 1804 	strd	r1, r8, [sp, #16]
 800d04c:	e9cd 7202 	strd	r7, r2, [sp, #8]
 800d050:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800d054:	4628      	mov	r0, r5
 800d056:	e9cd ce00 	strd	ip, lr, [sp]
 800d05a:	4a0e      	ldr	r2, [pc, #56]	; (800d094 <RemoteConfig::HandleList()+0xd4>)
 800d05c:	f005 fea2 	bl	8012da4 <snprintf>
 800d060:	e7e0      	b.n	800d024 <RemoteConfig::HandleList()+0x64>
 800d062:	2b06      	cmp	r3, #6
 800d064:	d1ed      	bne.n	800d042 <RemoteConfig::HandleList()+0x82>
 800d066:	6833      	ldr	r3, [r6, #0]
 800d068:	799b      	ldrb	r3, [r3, #6]
 800d06a:	2b2a      	cmp	r3, #42	; 0x2a
 800d06c:	d1e9      	bne.n	800d042 <RemoteConfig::HandleList()+0x82>
 800d06e:	f642 1305 	movw	r3, #10501	; 0x2905
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d078:	e7dd      	b.n	800d036 <RemoteConfig::HandleList()+0x76>
 800d07a:	bf00      	nop
 800d07c:	080158de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, fp, ip, lr}
 800d080:	200095c0 	andcs	r9, r0, r0, asr #11
 800d084:	08015980 	stmdaeq	r1, {r7, r8, fp, ip, lr}
 800d088:	20000c78 	andcs	r0, r0, r8, ror ip
 800d08c:	20000c7c 	andcs	r0, r0, ip, ror ip
 800d090:	08015818 	stmdaeq	r1, {r3, r4, fp, ip, lr}
 800d094:	08015831 	stmdaeq	r1, {r0, r4, r5, fp, ip, lr}

0800d098 <RemoteConfig::HandleDisplayGet()>:
 800d098:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800d09c:	2b08      	cmp	r3, #8
 800d09e:	d11d      	bne.n	800d0dc <RemoteConfig::HandleDisplayGet()+0x44>
 800d0a0:	4b0f      	ldr	r3, [pc, #60]	; (800d0e0 <RemoteConfig::HandleDisplayGet()+0x48>)
 800d0a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4d0f      	ldr	r5, [pc, #60]	; (800d0e4 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800d0a8:	7c19      	ldrb	r1, [r3, #16]
 800d0aa:	4a0f      	ldr	r2, [pc, #60]	; (800d0e8 <RemoteConfig::HandleDisplayGet()+0x50>)
 800d0ac:	4b0f      	ldr	r3, [pc, #60]	; (800d0ec <RemoteConfig::HandleDisplayGet()+0x54>)
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	2900      	cmp	r1, #0
 800d0b2:	bf18      	it	ne
 800d0b4:	4613      	movne	r3, r2
 800d0b6:	6828      	ldr	r0, [r5, #0]
 800d0b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800d0bc:	4a0c      	ldr	r2, [pc, #48]	; (800d0f0 <RemoteConfig::HandleDisplayGet()+0x58>)
 800d0be:	f005 fe71 	bl	8012da4 <snprintf>
 800d0c2:	f642 1305 	movw	r3, #10501	; 0x2905
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	b282      	uxth	r2, r0
 800d0ca:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d0ce:	6829      	ldr	r1, [r5, #0]
 800d0d0:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d0d4:	f002 fab6 	bl	800f644 <udp_send>
 800d0d8:	b003      	add	sp, #12
 800d0da:	bd30      	pop	{r4, r5, pc}
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	20009bf8 	strdcs	r9, [r0], -r8
 800d0e4:	20000c78 	andcs	r0, r0, r8, ror ip
 800d0e8:	0801584a 	stmdaeq	r1, {r1, r3, r6, fp, ip, lr}
 800d0ec:	08015847 	stmdaeq	r1, {r0, r1, r2, r6, fp, ip, lr}
 800d0f0:	0801584e 	stmdaeq	r1, {r1, r2, r3, r6, fp, ip, lr}

0800d0f4 <RemoteConfig::HandleTftpSet()>:
 800d0f4:	f8d0 25e4 	ldr.w	r2, [r0, #1508]	; 0x5e4
 800d0f8:	2a06      	cmp	r2, #6
 800d0fa:	d109      	bne.n	800d110 <RemoteConfig::HandleTftpSet()+0x1c>
 800d0fc:	4a05      	ldr	r2, [pc, #20]	; (800d114 <RemoteConfig::HandleTftpSet()+0x20>)
 800d0fe:	6812      	ldr	r2, [r2, #0]
 800d100:	7992      	ldrb	r2, [r2, #6]
 800d102:	3a30      	subs	r2, #48	; 0x30
 800d104:	bf18      	it	ne
 800d106:	2201      	movne	r2, #1
 800d108:	f880 25ec 	strb.w	r2, [r0, #1516]	; 0x5ec
 800d10c:	f000 bd6e 	b.w	800dbec <RemoteConfig::PlatformHandleTftpSet()>
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	20000c78 	andcs	r0, r0, r8, ror ip

0800d118 <RemoteConfig::HandleTftpGet()>:
 800d118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d11a:	4604      	mov	r4, r0
 800d11c:	f000 fd6e 	bl	800dbfc <RemoteConfig::PlatformHandleTftpGet()>
 800d120:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800d124:	2b05      	cmp	r3, #5
 800d126:	d118      	bne.n	800d15a <RemoteConfig::HandleTftpGet()+0x42>
 800d128:	f894 15ec 	ldrb.w	r1, [r4, #1516]	; 0x5ec
 800d12c:	4d0c      	ldr	r5, [pc, #48]	; (800d160 <RemoteConfig::HandleTftpGet()+0x48>)
 800d12e:	4a0d      	ldr	r2, [pc, #52]	; (800d164 <RemoteConfig::HandleTftpGet()+0x4c>)
 800d130:	4b0d      	ldr	r3, [pc, #52]	; (800d168 <RemoteConfig::HandleTftpGet()+0x50>)
 800d132:	6828      	ldr	r0, [r5, #0]
 800d134:	2900      	cmp	r1, #0
 800d136:	bf08      	it	eq
 800d138:	4613      	moveq	r3, r2
 800d13a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800d13e:	4a0b      	ldr	r2, [pc, #44]	; (800d16c <RemoteConfig::HandleTftpGet()+0x54>)
 800d140:	f005 fe30 	bl	8012da4 <snprintf>
 800d144:	f642 1305 	movw	r3, #10501	; 0x2905
 800d148:	b282      	uxth	r2, r0
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	6829      	ldr	r1, [r5, #0]
 800d14e:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d152:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d156:	f002 fa75 	bl	800f644 <udp_send>
 800d15a:	b003      	add	sp, #12
 800d15c:	bd30      	pop	{r4, r5, pc}
 800d15e:	bf00      	nop
 800d160:	20000c78 	andcs	r0, r0, r8, ror ip
 800d164:	0801584a 	stmdaeq	r1, {r1, r3, r6, fp, ip, lr}
 800d168:	08015847 	stmdaeq	r1, {r0, r1, r2, r6, fp, ip, lr}
 800d16c:	0801585a 	stmdaeq	r1, {r1, r3, r4, r6, fp, ip, lr}

0800d170 <RemoteConfig::HandleVersion()>:
 800d170:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800d174:	2b08      	cmp	r3, #8
 800d176:	d116      	bne.n	800d1a6 <RemoteConfig::HandleVersion()+0x36>
 800d178:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d17a:	4d0b      	ldr	r5, [pc, #44]	; (800d1a8 <RemoteConfig::HandleVersion()+0x38>)
 800d17c:	4604      	mov	r4, r0
 800d17e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800d182:	4b0a      	ldr	r3, [pc, #40]	; (800d1ac <RemoteConfig::HandleVersion()+0x3c>)
 800d184:	4a0a      	ldr	r2, [pc, #40]	; (800d1b0 <RemoteConfig::HandleVersion()+0x40>)
 800d186:	6828      	ldr	r0, [r5, #0]
 800d188:	f005 fe0c 	bl	8012da4 <snprintf>
 800d18c:	f642 1305 	movw	r3, #10501	; 0x2905
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	b282      	uxth	r2, r0
 800d194:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d198:	6829      	ldr	r1, [r5, #0]
 800d19a:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d19e:	f002 fa51 	bl	800f644 <udp_send>
 800d1a2:	b003      	add	sp, #12
 800d1a4:	bd30      	pop	{r4, r5, pc}
 800d1a6:	4770      	bx	lr
 800d1a8:	20000c78 	andcs	r0, r0, r8, ror ip
 800d1ac:	20009c9e 	mulcs	r0, lr, ip
 800d1b0:	08015863 	stmdaeq	r1, {r0, r1, r5, r6, fp, ip, lr}

0800d1b4 <RemoteConfig::HandleUptime()>:
 800d1b4:	f890 35d7 	ldrb.w	r3, [r0, #1495]	; 0x5d7
 800d1b8:	b1fb      	cbz	r3, 800d1fa <RemoteConfig::HandleUptime()+0x46>
 800d1ba:	4b10      	ldr	r3, [pc, #64]	; (800d1fc <RemoteConfig::HandleUptime()+0x48>)
 800d1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	2b07      	cmp	r3, #7
 800d1c8:	d115      	bne.n	800d1f6 <RemoteConfig::HandleUptime()+0x42>
 800d1ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d1ce:	4d0c      	ldr	r5, [pc, #48]	; (800d200 <RemoteConfig::HandleUptime()+0x4c>)
 800d1d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1d4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800d1d8:	4a0a      	ldr	r2, [pc, #40]	; (800d204 <RemoteConfig::HandleUptime()+0x50>)
 800d1da:	6828      	ldr	r0, [r5, #0]
 800d1dc:	f005 fde2 	bl	8012da4 <snprintf>
 800d1e0:	f642 1305 	movw	r3, #10501	; 0x2905
 800d1e4:	9300      	str	r3, [sp, #0]
 800d1e6:	b282      	uxth	r2, r0
 800d1e8:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d1ec:	6829      	ldr	r1, [r5, #0]
 800d1ee:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d1f2:	f002 fa27 	bl	800f644 <udp_send>
 800d1f6:	b003      	add	sp, #12
 800d1f8:	bd30      	pop	{r4, r5, pc}
 800d1fa:	4770      	bx	lr
 800d1fc:	20009d04 	andcs	r9, r0, r4, lsl #26
 800d200:	20000c78 	andcs	r0, r0, r8, ror ip
 800d204:	0801586e 	stmdaeq	r1, {r1, r2, r3, r5, r6, fp, ip, lr}

0800d208 <RemoteConfig::HandleDisplaySet()>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	f8d0 35e4 	ldr.w	r3, [r0, #1508]	; 0x5e4
 800d20e:	2b09      	cmp	r3, #9
 800d210:	d113      	bne.n	800d23a <RemoteConfig::HandleDisplaySet()+0x32>
 800d212:	4b0a      	ldr	r3, [pc, #40]	; (800d23c <RemoteConfig::HandleDisplaySet()+0x34>)
 800d214:	681c      	ldr	r4, [r3, #0]
 800d216:	4b0a      	ldr	r3, [pc, #40]	; (800d240 <RemoteConfig::HandleDisplaySet()+0x38>)
 800d218:	69a0      	ldr	r0, [r4, #24]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	7a5d      	ldrb	r5, [r3, #9]
 800d21e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d222:	4259      	negs	r1, r3
 800d224:	4159      	adcs	r1, r3
 800d226:	b140      	cbz	r0, 800d23a <RemoteConfig::HandleDisplaySet()+0x32>
 800d228:	6803      	ldr	r3, [r0, #0]
 800d22a:	7421      	strb	r1, [r4, #16]
 800d22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d22e:	4798      	blx	r3
 800d230:	2d30      	cmp	r5, #48	; 0x30
 800d232:	bf1e      	ittt	ne
 800d234:	4b03      	ldrne	r3, [pc, #12]	; (800d244 <RemoteConfig::HandleDisplaySet()+0x3c>)
 800d236:	681b      	ldrne	r3, [r3, #0]
 800d238:	6063      	strne	r3, [r4, #4]
 800d23a:	bd38      	pop	{r3, r4, r5, pc}
 800d23c:	20009bf8 	strdcs	r9, [r0], -r8
 800d240:	20000c78 	andcs	r0, r0, r8, ror ip
 800d244:	20009d04 	andcs	r9, r0, r4, lsl #26

0800d248 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800d248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	f100 0a0c 	add.w	sl, r0, #12
 800d250:	4604      	mov	r4, r0
 800d252:	e9c0 1200 	strd	r1, r2, [r0]
 800d256:	6083      	str	r3, [r0, #8]
 800d258:	4650      	mov	r0, sl
 800d25a:	4690      	mov	r8, r2
 800d25c:	4689      	mov	r9, r1
 800d25e:	461f      	mov	r7, r3
 800d260:	f000 fd0c 	bl	800dc7c <HttpDaemon::HttpDaemon()>
 800d264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d268:	2500      	movs	r5, #0
 800d26a:	4e16      	ldr	r6, [pc, #88]	; (800d2c4 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x7c>)
 800d26c:	f8df b058 	ldr.w	fp, [pc, #88]	; 800d2c8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x80>
 800d270:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800d274:	4b15      	ldr	r3, [pc, #84]	; (800d2cc <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x84>)
 800d276:	4631      	mov	r1, r6
 800d278:	f8db 0000 	ldr.w	r0, [fp]
 800d27c:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
 800d280:	f8a4 55d8 	strh.w	r5, [r4, #1496]	; 0x5d8
 800d284:	f8c4 55e0 	str.w	r5, [r4, #1504]	; 0x5e0
 800d288:	f8c4 55e4 	str.w	r5, [r4, #1508]	; 0x5e4
 800d28c:	f8c4 55e8 	str.w	r5, [r4, #1512]	; 0x5e8
 800d290:	f884 55ec 	strb.w	r5, [r4, #1516]	; 0x5ec
 800d294:	601c      	str	r4, [r3, #0]
 800d296:	f002 fea1 	bl	800ffdc <Network::MacAddressCopyTo(unsigned char*)>
 800d29a:	f642 1105 	movw	r1, #10501	; 0x2905
 800d29e:	f8db 0000 	ldr.w	r0, [fp]
 800d2a2:	f886 9006 	strb.w	r9, [r6, #6]
 800d2a6:	f886 8007 	strb.w	r8, [r6, #7]
 800d2aa:	7237      	strb	r7, [r6, #8]
 800d2ac:	7275      	strb	r5, [r6, #9]
 800d2ae:	f002 fe8f 	bl	800ffd0 <Network::Begin(unsigned short)>
 800d2b2:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800d2b6:	4650      	mov	r0, sl
 800d2b8:	f000 fcf8 	bl	800dcac <HttpDaemon::Start()>
 800d2bc:	4620      	mov	r0, r4
 800d2be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c2:	bf00      	nop
 800d2c4:	20000c7c 	andcs	r0, r0, ip, ror ip
 800d2c8:	200095c0 	andcs	r9, r0, r0, asr #11
 800d2cc:	20000ca0 	andcs	r0, r0, r0, lsr #25

0800d2d0 <RemoteConfig::GetStringNode() const>:
 800d2d0:	2012      	movs	r0, #18
 800d2d2:	4b03      	ldr	r3, [pc, #12]	; (800d2e0 <RemoteConfig::GetStringNode() const+0x10>)
 800d2d4:	799a      	ldrb	r2, [r3, #6]
 800d2d6:	4b03      	ldr	r3, [pc, #12]	; (800d2e4 <RemoteConfig::GetStringNode() const+0x14>)
 800d2d8:	fb00 3002 	mla	r0, r0, r2, r3
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	20000c7c 	andcs	r0, r0, ip, ror ip
 800d2e4:	080158de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, fp, ip, lr}

0800d2e8 <RemoteConfig::GetStringOutput() const>:
 800d2e8:	200c      	movs	r0, #12
 800d2ea:	4b03      	ldr	r3, [pc, #12]	; (800d2f8 <RemoteConfig::GetStringOutput() const+0x10>)
 800d2ec:	79da      	ldrb	r2, [r3, #7]
 800d2ee:	4b03      	ldr	r3, [pc, #12]	; (800d2fc <RemoteConfig::GetStringOutput() const+0x14>)
 800d2f0:	fb00 3002 	mla	r0, r0, r2, r3
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	20000c7c 	andcs	r0, r0, ip, ror ip
 800d2fc:	08015980 	stmdaeq	r1, {r7, r8, fp, ip, lr}

0800d300 <RemoteConfig::SetDisable(bool)>:
 800d300:	b538      	push	{r3, r4, r5, lr}
 800d302:	4604      	mov	r4, r0
 800d304:	f890 35d4 	ldrb.w	r3, [r0, #1492]	; 0x5d4
 800d308:	b171      	cbz	r1, 800d328 <RemoteConfig::SetDisable(bool)+0x28>
 800d30a:	b963      	cbnz	r3, 800d326 <RemoteConfig::SetDisable(bool)+0x26>
 800d30c:	4b0d      	ldr	r3, [pc, #52]	; (800d344 <RemoteConfig::SetDisable(bool)+0x44>)
 800d30e:	f642 1105 	movw	r1, #10501	; 0x2905
 800d312:	6818      	ldr	r0, [r3, #0]
 800d314:	f002 fe5f 	bl	800ffd6 <Network::End(unsigned short)>
 800d318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d31c:	f8c4 35dc 	str.w	r3, [r4, #1500]	; 0x5dc
 800d320:	2301      	movs	r3, #1
 800d322:	f884 35d4 	strb.w	r3, [r4, #1492]	; 0x5d4
 800d326:	bd38      	pop	{r3, r4, r5, pc}
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d0fc      	beq.n	800d326 <RemoteConfig::SetDisable(bool)+0x26>
 800d32c:	4b05      	ldr	r3, [pc, #20]	; (800d344 <RemoteConfig::SetDisable(bool)+0x44>)
 800d32e:	460d      	mov	r5, r1
 800d330:	6818      	ldr	r0, [r3, #0]
 800d332:	f642 1105 	movw	r1, #10501	; 0x2905
 800d336:	f002 fe4b 	bl	800ffd0 <Network::Begin(unsigned short)>
 800d33a:	f884 55d4 	strb.w	r5, [r4, #1492]	; 0x5d4
 800d33e:	f8c4 05dc 	str.w	r0, [r4, #1500]	; 0x5dc
 800d342:	e7f0      	b.n	800d326 <RemoteConfig::SetDisable(bool)+0x26>
 800d344:	200095c0 	andcs	r9, r0, r0, asr #11

0800d348 <RemoteConfig::SetDisplayName(char const*)>:
 800d348:	2217      	movs	r2, #23
 800d34a:	4809      	ldr	r0, [pc, #36]	; (800d370 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800d34c:	b508      	push	{r3, lr}
 800d34e:	1e4b      	subs	r3, r1, #1
 800d350:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d354:	b911      	cbnz	r1, 800d35c <RemoteConfig::SetDisplayName(char const*)+0x14>
 800d356:	f005 fae3 	bl	8012920 <memset>
 800d35a:	e003      	b.n	800d364 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800d35c:	3a01      	subs	r2, #1
 800d35e:	f800 1b01 	strb.w	r1, [r0], #1
 800d362:	d1f5      	bne.n	800d350 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800d364:	2200      	movs	r2, #0
 800d366:	4b03      	ldr	r3, [pc, #12]	; (800d374 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800d368:	f883 2020 	strb.w	r2, [r3, #32]
 800d36c:	bd08      	pop	{r3, pc}
 800d36e:	bf00      	nop
 800d370:	20000c85 	andcs	r0, r0, r5, lsl #25
 800d374:	20000c7c 	andcs	r0, r0, ip, ror ip

0800d378 <RemoteConfig::HandleGet(void*, unsigned int)>:
 800d378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d37a:	4604      	mov	r4, r0
 800d37c:	4616      	mov	r6, r2
 800d37e:	460d      	mov	r5, r1
 800d380:	4f2a      	ldr	r7, [pc, #168]	; (800d42c <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 800d382:	b085      	sub	sp, #20
 800d384:	b9b9      	cbnz	r1, 800d3b6 <RemoteConfig::HandleGet(void*, unsigned int)+0x3e>
 800d386:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800d38a:	6839      	ldr	r1, [r7, #0]
 800d38c:	aa03      	add	r2, sp, #12
 800d38e:	3105      	adds	r1, #5
 800d390:	9303      	str	r3, [sp, #12]
 800d392:	f000 fc01 	bl	800db98 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d396:	1e03      	subs	r3, r0, #0
 800d398:	da1d      	bge.n	800d3d6 <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800d39a:	f642 1305 	movw	r3, #10501	; 0x2905
 800d39e:	220b      	movs	r2, #11
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	4923      	ldr	r1, [pc, #140]	; (800d430 <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800d3a4:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d3a8:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d3ac:	f002 f94a 	bl	800f644 <udp_send>
 800d3b0:	200c      	movs	r0, #12
 800d3b2:	b005      	add	sp, #20
 800d3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3b6:	9203      	str	r2, [sp, #12]
 800d3b8:	aa03      	add	r2, sp, #12
 800d3ba:	6039      	str	r1, [r7, #0]
 800d3bc:	f000 fbec 	bl	800db98 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d3c0:	1e03      	subs	r3, r0, #0
 800d3c2:	da08      	bge.n	800d3d6 <RemoteConfig::HandleGet(void*, unsigned int)+0x5e>
 800d3c4:	2e0b      	cmp	r6, #11
 800d3c6:	4632      	mov	r2, r6
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	bf28      	it	cs
 800d3cc:	220b      	movcs	r2, #11
 800d3ce:	4918      	ldr	r1, [pc, #96]	; (800d430 <RemoteConfig::HandleGet(void*, unsigned int)+0xb8>)
 800d3d0:	f005 fa84 	bl	80128dc <memcpy>
 800d3d4:	e7ec      	b.n	800d3b0 <RemoteConfig::HandleGet(void*, unsigned int)+0x38>
 800d3d6:	221c      	movs	r2, #28
 800d3d8:	4353      	muls	r3, r2
 800d3da:	4916      	ldr	r1, [pc, #88]	; (800d434 <RemoteConfig::HandleGet(void*, unsigned int)+0xbc>)
 800d3dc:	18ca      	adds	r2, r1, r3
 800d3de:	6852      	ldr	r2, [r2, #4]
 800d3e0:	58cb      	ldr	r3, [r1, r3]
 800d3e2:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800d3e6:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d3ea:	07d2      	lsls	r2, r2, #31
 800d3ec:	bf48      	it	mi
 800d3ee:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800d3f2:	a903      	add	r1, sp, #12
 800d3f4:	bf48      	it	mi
 800d3f6:	58d3      	ldrmi	r3, [r2, r3]
 800d3f8:	4798      	blx	r3
 800d3fa:	b96d      	cbnz	r5, 800d418 <RemoteConfig::HandleGet(void*, unsigned int)+0xa0>
 800d3fc:	f642 1305 	movw	r3, #10501	; 0x2905
 800d400:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	6839      	ldr	r1, [r7, #0]
 800d408:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d40c:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d410:	f002 f918 	bl	800f644 <udp_send>
 800d414:	9803      	ldr	r0, [sp, #12]
 800d416:	e7cc      	b.n	800d3b2 <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800d418:	9a03      	ldr	r2, [sp, #12]
 800d41a:	4628      	mov	r0, r5
 800d41c:	42b2      	cmp	r2, r6
 800d41e:	bf28      	it	cs
 800d420:	4632      	movcs	r2, r6
 800d422:	6839      	ldr	r1, [r7, #0]
 800d424:	f005 fa65 	bl	80128f2 <memmove>
 800d428:	e7f4      	b.n	800d414 <RemoteConfig::HandleGet(void*, unsigned int)+0x9c>
 800d42a:	bf00      	nop
 800d42c:	20000c78 	andcs	r0, r0, r8, ror ip
 800d430:	0801587b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, fp, ip, lr}
 800d434:	08015b18 	stmdaeq	r1, {r3, r4, r8, r9, fp, ip, lr}

0800d438 <RemoteConfig::HandleGetNoParams()>:
 800d438:	2200      	movs	r2, #0
 800d43a:	4611      	mov	r1, r2
 800d43c:	f7ff bf9c 	b.w	800d378 <RemoteConfig::HandleGet(void*, unsigned int)>

0800d440 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800d440:	b510      	push	{r4, lr}
 800d442:	460c      	mov	r4, r1
 800d444:	4b07      	ldr	r3, [pc, #28]	; (800d464 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800d446:	b08a      	sub	sp, #40	; 0x28
 800d448:	6819      	ldr	r1, [r3, #0]
 800d44a:	a801      	add	r0, sp, #4
 800d44c:	f000 f9fa 	bl	800d844 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800d450:	4905      	ldr	r1, [pc, #20]	; (800d468 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800d452:	4623      	mov	r3, r4
 800d454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d458:	6809      	ldr	r1, [r1, #0]
 800d45a:	a801      	add	r0, sp, #4
 800d45c:	f000 fb16 	bl	800da8c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800d460:	b00a      	add	sp, #40	; 0x28
 800d462:	bd10      	pop	{r4, pc}
 800d464:	20001cd4 	ldrdcs	r1, [r0], -r4
 800d468:	20000c78 	andcs	r0, r0, r8, ror ip

0800d46c <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800d46c:	b513      	push	{r0, r1, r4, lr}
 800d46e:	460c      	mov	r4, r1
 800d470:	4b07      	ldr	r3, [pc, #28]	; (800d490 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800d472:	a801      	add	r0, sp, #4
 800d474:	6819      	ldr	r1, [r3, #0]
 800d476:	f003 f835 	bl	80104e4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800d47a:	4906      	ldr	r1, [pc, #24]	; (800d494 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800d47c:	4623      	mov	r3, r4
 800d47e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d482:	6809      	ldr	r1, [r1, #0]
 800d484:	a801      	add	r0, sp, #4
 800d486:	f003 fa1b 	bl	80108c0 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800d48a:	b002      	add	sp, #8
 800d48c:	bd10      	pop	{r4, pc}
 800d48e:	bf00      	nop
 800d490:	20001ccc 	andcs	r1, r0, ip, asr #25
 800d494:	20000c78 	andcs	r0, r0, r8, ror ip

0800d498 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800d498:	b510      	push	{r4, lr}
 800d49a:	460c      	mov	r4, r1
 800d49c:	4b07      	ldr	r3, [pc, #28]	; (800d4bc <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 800d49e:	b0a4      	sub	sp, #144	; 0x90
 800d4a0:	6819      	ldr	r1, [r3, #0]
 800d4a2:	a801      	add	r0, sp, #4
 800d4a4:	f7fc fe56 	bl	800a154 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800d4a8:	4905      	ldr	r1, [pc, #20]	; (800d4c0 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800d4aa:	4623      	mov	r3, r4
 800d4ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d4b0:	6809      	ldr	r1, [r1, #0]
 800d4b2:	a801      	add	r0, sp, #4
 800d4b4:	f7fd fa18 	bl	800a8e8 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800d4b8:	b024      	add	sp, #144	; 0x90
 800d4ba:	bd10      	pop	{r4, pc}
 800d4bc:	20001cc0 	andcs	r1, r0, r0, asr #25
 800d4c0:	20000c78 	andcs	r0, r0, r8, ror ip

0800d4c4 <RemoteConfig::HandleGetParamsTxt(unsigned int&)>:
 800d4c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	4b07      	ldr	r3, [pc, #28]	; (800d4e8 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x24>)
 800d4ca:	4668      	mov	r0, sp
 800d4cc:	6819      	ldr	r1, [r3, #0]
 800d4ce:	f7fe fed5 	bl	800c27c <DmxParams::DmxParams(DmxParamsStore*)>
 800d4d2:	4906      	ldr	r1, [pc, #24]	; (800d4ec <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x28>)
 800d4d4:	4623      	mov	r3, r4
 800d4d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d4da:	4668      	mov	r0, sp
 800d4dc:	6809      	ldr	r1, [r1, #0]
 800d4de:	f7fe ffef 	bl	800c4c0 <DmxParams::Save(char*, unsigned int, unsigned int&)>
 800d4e2:	b004      	add	sp, #16
 800d4e4:	bd10      	pop	{r4, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20001cc8 	andcs	r1, r0, r8, asr #25
 800d4ec:	20000c78 	andcs	r0, r0, r8, ror ip

0800d4f0 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	4b07      	ldr	r3, [pc, #28]	; (800d514 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800d4f6:	b08a      	sub	sp, #40	; 0x28
 800d4f8:	6819      	ldr	r1, [r3, #0]
 800d4fa:	4668      	mov	r0, sp
 800d4fc:	f003 ffb2 	bl	8011464 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800d500:	4905      	ldr	r1, [pc, #20]	; (800d518 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800d502:	4623      	mov	r3, r4
 800d504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d508:	4668      	mov	r0, sp
 800d50a:	6809      	ldr	r1, [r1, #0]
 800d50c:	f004 f8e2 	bl	80116d4 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800d510:	b00a      	add	sp, #40	; 0x28
 800d512:	bd10      	pop	{r4, pc}
 800d514:	20001cc4 	andcs	r1, r0, r4, asr #25
 800d518:	20000c78 	andcs	r0, r0, r8, ror ip

0800d51c <RemoteConfig::HandleSet(void*, unsigned int)>:
 800d51c:	b530      	push	{r4, r5, lr}
 800d51e:	b085      	sub	sp, #20
 800d520:	4604      	mov	r4, r0
 800d522:	9201      	str	r2, [sp, #4]
 800d524:	b9d1      	cbnz	r1, 800d55c <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 800d526:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800d52a:	9303      	str	r3, [sp, #12]
 800d52c:	4b1b      	ldr	r3, [pc, #108]	; (800d59c <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800d52e:	aa03      	add	r2, sp, #12
 800d530:	6819      	ldr	r1, [r3, #0]
 800d532:	3101      	adds	r1, #1
 800d534:	f000 fb30 	bl	800db98 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d538:	2800      	cmp	r0, #0
 800d53a:	db0d      	blt.n	800d558 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800d53c:	221c      	movs	r2, #28
 800d53e:	4b18      	ldr	r3, [pc, #96]	; (800d5a0 <RemoteConfig::HandleSet(void*, unsigned int)+0x84>)
 800d540:	fb02 3300 	mla	r3, r2, r0, r3
 800d544:	68da      	ldr	r2, [r3, #12]
 800d546:	689b      	ldr	r3, [r3, #8]
 800d548:	1051      	asrs	r1, r2, #1
 800d54a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d54e:	07d2      	lsls	r2, r2, #31
 800d550:	bf44      	itt	mi
 800d552:	5862      	ldrmi	r2, [r4, r1]
 800d554:	58d3      	ldrmi	r3, [r2, r3]
 800d556:	4798      	blx	r3
 800d558:	b005      	add	sp, #20
 800d55a:	bd30      	pop	{r4, r5, pc}
 800d55c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d560:	4613      	mov	r3, r2
 800d562:	d8f9      	bhi.n	800d558 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800d564:	2200      	movs	r2, #0
 800d566:	460d      	mov	r5, r1
 800d568:	490e      	ldr	r1, [pc, #56]	; (800d5a4 <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800d56a:	f8c0 25e8 	str.w	r2, [r0, #1512]	; 0x5e8
 800d56e:	7809      	ldrb	r1, [r1, #0]
 800d570:	07c9      	lsls	r1, r1, #31
 800d572:	d50a      	bpl.n	800d58a <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800d574:	7829      	ldrb	r1, [r5, #0]
 800d576:	297b      	cmp	r1, #123	; 0x7b
 800d578:	d107      	bne.n	800d58a <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800d57a:	3b01      	subs	r3, #1
 800d57c:	b299      	uxth	r1, r3
 800d57e:	4628      	mov	r0, r5
 800d580:	f004 fa1a 	bl	80119b8 <properties::convert_json_file(char*, unsigned short, bool)>
 800d584:	1e03      	subs	r3, r0, #0
 800d586:	dde7      	ble.n	800d558 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800d588:	b29b      	uxth	r3, r3
 800d58a:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800d58e:	4b03      	ldr	r3, [pc, #12]	; (800d59c <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800d590:	4620      	mov	r0, r4
 800d592:	601d      	str	r5, [r3, #0]
 800d594:	aa01      	add	r2, sp, #4
 800d596:	1c69      	adds	r1, r5, #1
 800d598:	e7cc      	b.n	800d534 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800d59a:	bf00      	nop
 800d59c:	20000c78 	andcs	r0, r0, r8, ror ip
 800d5a0:	08015b18 	stmdaeq	r1, {r3, r4, r8, r9, fp, ip, lr}
 800d5a4:	20009bf4 	strdcs	r9, [r0], -r4

0800d5a8 <RemoteConfig::Run()>:
 800d5a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d5ac:	f890 55d4 	ldrb.w	r5, [r0, #1492]	; 0x5d4
 800d5b0:	2d00      	cmp	r5, #0
 800d5b2:	d15d      	bne.n	800d670 <RemoteConfig::Run()+0xc8>
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	4e4a      	ldr	r6, [pc, #296]	; (800d6e0 <RemoteConfig::Run()+0x138>)
 800d5b8:	300c      	adds	r0, #12
 800d5ba:	f000 fdf1 	bl	800e1a0 <HttpDaemon::Run()>
 800d5be:	4631      	mov	r1, r6
 800d5c0:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d5c4:	f10d 030e 	add.w	r3, sp, #14
 800d5c8:	f504 62bc 	add.w	r2, r4, #1504	; 0x5e0
 800d5cc:	f002 f814 	bl	800f5f8 <udp_recv2>
 800d5d0:	2803      	cmp	r0, #3
 800d5d2:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
 800d5d6:	d94b      	bls.n	800d670 <RemoteConfig::Run()+0xc8>
 800d5d8:	6831      	ldr	r1, [r6, #0]
 800d5da:	1e43      	subs	r3, r0, #1
 800d5dc:	5cca      	ldrb	r2, [r1, r3]
 800d5de:	2a0a      	cmp	r2, #10
 800d5e0:	bf18      	it	ne
 800d5e2:	4603      	movne	r3, r0
 800d5e4:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800d5e8:	7808      	ldrb	r0, [r1, #0]
 800d5ea:	283f      	cmp	r0, #63	; 0x3f
 800d5ec:	d135      	bne.n	800d65a <RemoteConfig::Run()+0xb2>
 800d5ee:	483d      	ldr	r0, [pc, #244]	; (800d6e4 <RemoteConfig::Run()+0x13c>)
 800d5f0:	462a      	mov	r2, r5
 800d5f2:	4607      	mov	r7, r0
 800d5f4:	3b01      	subs	r3, #1
 800d5f6:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800d5fa:	7b86      	ldrb	r6, [r0, #14]
 800d5fc:	8985      	ldrh	r5, [r0, #12]
 800d5fe:	b176      	cbz	r6, 800d61e <RemoteConfig::Run()+0x76>
 800d600:	42ab      	cmp	r3, r5
 800d602:	d80e      	bhi.n	800d622 <RemoteConfig::Run()+0x7a>
 800d604:	3201      	adds	r2, #1
 800d606:	2a09      	cmp	r2, #9
 800d608:	f100 0010 	add.w	r0, r0, #16
 800d60c:	d1f5      	bne.n	800d5fa <RemoteConfig::Run()+0x52>
 800d60e:	f642 1305 	movw	r3, #10501	; 0x2905
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	2208      	movs	r2, #8
 800d616:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d61a:	4933      	ldr	r1, [pc, #204]	; (800d6e8 <RemoteConfig::Run()+0x140>)
 800d61c:	e052      	b.n	800d6c4 <RemoteConfig::Run()+0x11c>
 800d61e:	42ab      	cmp	r3, r5
 800d620:	d1f0      	bne.n	800d604 <RemoteConfig::Run()+0x5c>
 800d622:	6886      	ldr	r6, [r0, #8]
 800d624:	f101 0c01 	add.w	ip, r1, #1
 800d628:	4435      	add	r5, r6
 800d62a:	42b5      	cmp	r5, r6
 800d62c:	d10b      	bne.n	800d646 <RemoteConfig::Run()+0x9e>
 800d62e:	0113      	lsls	r3, r2, #4
 800d630:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800d634:	6852      	ldr	r2, [r2, #4]
 800d636:	58fb      	ldr	r3, [r7, r3]
 800d638:	1051      	asrs	r1, r2, #1
 800d63a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d63e:	07d2      	lsls	r2, r2, #31
 800d640:	d408      	bmi.n	800d654 <RemoteConfig::Run()+0xac>
 800d642:	4798      	blx	r3
 800d644:	e014      	b.n	800d670 <RemoteConfig::Run()+0xc8>
 800d646:	f81c 8b01 	ldrb.w	r8, [ip], #1
 800d64a:	f816 eb01 	ldrb.w	lr, [r6], #1
 800d64e:	45f0      	cmp	r8, lr
 800d650:	d0eb      	beq.n	800d62a <RemoteConfig::Run()+0x82>
 800d652:	e7d7      	b.n	800d604 <RemoteConfig::Run()+0x5c>
 800d654:	5862      	ldr	r2, [r4, r1]
 800d656:	58d3      	ldr	r3, [r2, r3]
 800d658:	e7f3      	b.n	800d642 <RemoteConfig::Run()+0x9a>
 800d65a:	f894 25d5 	ldrb.w	r2, [r4, #1493]	; 0x5d5
 800d65e:	b93a      	cbnz	r2, 800d670 <RemoteConfig::Run()+0xc8>
 800d660:	2823      	cmp	r0, #35	; 0x23
 800d662:	d108      	bne.n	800d676 <RemoteConfig::Run()+0xce>
 800d664:	4611      	mov	r1, r2
 800d666:	4620      	mov	r0, r4
 800d668:	f8c4 25e8 	str.w	r2, [r4, #1512]	; 0x5e8
 800d66c:	f7ff ff56 	bl	800d51c <RemoteConfig::HandleSet(void*, unsigned int)>
 800d670:	b004      	add	sp, #16
 800d672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d676:	2821      	cmp	r0, #33	; 0x21
 800d678:	d1fa      	bne.n	800d670 <RemoteConfig::Run()+0xc8>
 800d67a:	3b01      	subs	r3, #1
 800d67c:	2b05      	cmp	r3, #5
 800d67e:	f8c4 35e4 	str.w	r3, [r4, #1508]	; 0x5e4
 800d682:	d918      	bls.n	800d6b6 <RemoteConfig::Run()+0x10e>
 800d684:	1c4a      	adds	r2, r1, #1
 800d686:	4610      	mov	r0, r2
 800d688:	4d18      	ldr	r5, [pc, #96]	; (800d6ec <RemoteConfig::Run()+0x144>)
 800d68a:	f101 0c06 	add.w	ip, r1, #6
 800d68e:	4560      	cmp	r0, ip
 800d690:	d01d      	beq.n	800d6ce <RemoteConfig::Run()+0x126>
 800d692:	f810 7b01 	ldrb.w	r7, [r0], #1
 800d696:	f815 6b01 	ldrb.w	r6, [r5], #1
 800d69a:	42b7      	cmp	r7, r6
 800d69c:	d0f7      	beq.n	800d68e <RemoteConfig::Run()+0xe6>
 800d69e:	2b08      	cmp	r3, #8
 800d6a0:	d909      	bls.n	800d6b6 <RemoteConfig::Run()+0x10e>
 800d6a2:	4b13      	ldr	r3, [pc, #76]	; (800d6f0 <RemoteConfig::Run()+0x148>)
 800d6a4:	3109      	adds	r1, #9
 800d6a6:	428a      	cmp	r2, r1
 800d6a8:	d017      	beq.n	800d6da <RemoteConfig::Run()+0x132>
 800d6aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d6ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d6b2:	4285      	cmp	r5, r0
 800d6b4:	d0f7      	beq.n	800d6a6 <RemoteConfig::Run()+0xfe>
 800d6b6:	f642 1305 	movw	r3, #10501	; 0x2905
 800d6ba:	2208      	movs	r2, #8
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	f8d4 35e0 	ldr.w	r3, [r4, #1504]	; 0x5e0
 800d6c2:	490c      	ldr	r1, [pc, #48]	; (800d6f4 <RemoteConfig::Run()+0x14c>)
 800d6c4:	f894 05dc 	ldrb.w	r0, [r4, #1500]	; 0x5dc
 800d6c8:	f001 ffbc 	bl	800f644 <udp_send>
 800d6cc:	e7d0      	b.n	800d670 <RemoteConfig::Run()+0xc8>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	4a09      	ldr	r2, [pc, #36]	; (800d6f8 <RemoteConfig::Run()+0x150>)
 800d6d2:	011b      	lsls	r3, r3, #4
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	58d3      	ldr	r3, [r2, r3]
 800d6d8:	e7b3      	b.n	800d642 <RemoteConfig::Run()+0x9a>
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e7f8      	b.n	800d6d0 <RemoteConfig::Run()+0x128>
 800d6de:	bf00      	nop
 800d6e0:	20000c78 	andcs	r0, r0, r8, ror ip
 800d6e4:	08015a10 	stmdaeq	r1, {r4, r9, fp, ip, lr}
 800d6e8:	0801589f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, fp, ip, lr}
 800d6ec:	08015887 	stmdaeq	r1, {r0, r1, r2, r7, fp, ip, lr}
 800d6f0:	0801588d 	stmdaeq	r1, {r0, r2, r3, r7, fp, ip, lr}
 800d6f4:	08015896 	stmdaeq	r1, {r1, r2, r4, r7, fp, ip, lr}
 800d6f8:	08015aa0 	stmdaeq	r1, {r5, r7, r9, fp, ip, lr}

0800d6fc <RemoteConfig::HandleSetRconfig()>:
 800d6fc:	b510      	push	{r4, lr}
 800d6fe:	4604      	mov	r4, r0
 800d700:	4b09      	ldr	r3, [pc, #36]	; (800d728 <RemoteConfig::HandleSetRconfig()+0x2c>)
 800d702:	b08a      	sub	sp, #40	; 0x28
 800d704:	6819      	ldr	r1, [r3, #0]
 800d706:	a801      	add	r0, sp, #4
 800d708:	f000 f89c 	bl	800d844 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800d70c:	4b07      	ldr	r3, [pc, #28]	; (800d72c <RemoteConfig::HandleSetRconfig()+0x30>)
 800d70e:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800d712:	6819      	ldr	r1, [r3, #0]
 800d714:	a801      	add	r0, sp, #4
 800d716:	f000 f8ab 	bl	800d870 <RemoteConfigParams::Load(char const*, unsigned int)>
 800d71a:	4621      	mov	r1, r4
 800d71c:	a801      	add	r0, sp, #4
 800d71e:	f000 f9c2 	bl	800daa6 <RemoteConfigParams::Set(RemoteConfig*)>
 800d722:	b00a      	add	sp, #40	; 0x28
 800d724:	bd10      	pop	{r4, pc}
 800d726:	bf00      	nop
 800d728:	20001cd4 	ldrdcs	r1, [r0], -r4
 800d72c:	20000c78 	andcs	r0, r0, r8, ror ip

0800d730 <RemoteConfig::HandleSetNetworkTxt()>:
 800d730:	b513      	push	{r0, r1, r4, lr}
 800d732:	4604      	mov	r4, r0
 800d734:	4b06      	ldr	r3, [pc, #24]	; (800d750 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800d736:	a801      	add	r0, sp, #4
 800d738:	6819      	ldr	r1, [r3, #0]
 800d73a:	f002 fed3 	bl	80104e4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800d73e:	4b05      	ldr	r3, [pc, #20]	; (800d754 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800d740:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800d744:	6819      	ldr	r1, [r3, #0]
 800d746:	a801      	add	r0, sp, #4
 800d748:	f002 feec 	bl	8010524 <NetworkParams::Load(char const*, unsigned int)>
 800d74c:	b002      	add	sp, #8
 800d74e:	bd10      	pop	{r4, pc}
 800d750:	20001ccc 	andcs	r1, r0, ip, asr #25
 800d754:	20000c78 	andcs	r0, r0, r8, ror ip

0800d758 <RemoteConfig::HandleSetArtnetTxt()>:
 800d758:	b510      	push	{r4, lr}
 800d75a:	4604      	mov	r4, r0
 800d75c:	4b07      	ldr	r3, [pc, #28]	; (800d77c <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800d75e:	b0a4      	sub	sp, #144	; 0x90
 800d760:	6819      	ldr	r1, [r3, #0]
 800d762:	a801      	add	r0, sp, #4
 800d764:	f7fc fcf6 	bl	800a154 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800d768:	4b05      	ldr	r3, [pc, #20]	; (800d780 <RemoteConfig::HandleSetArtnetTxt()+0x28>)
 800d76a:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800d76e:	6819      	ldr	r1, [r3, #0]
 800d770:	a801      	add	r0, sp, #4
 800d772:	f7fc fd21 	bl	800a1b8 <ArtNetParams::Load(char const*, unsigned int)>
 800d776:	b024      	add	sp, #144	; 0x90
 800d778:	bd10      	pop	{r4, pc}
 800d77a:	bf00      	nop
 800d77c:	20001cc0 	andcs	r1, r0, r0, asr #25
 800d780:	20000c78 	andcs	r0, r0, r8, ror ip

0800d784 <RemoteConfig::HandleSetParamsTxt()>:
 800d784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d786:	4604      	mov	r4, r0
 800d788:	4b06      	ldr	r3, [pc, #24]	; (800d7a4 <RemoteConfig::HandleSetParamsTxt()+0x20>)
 800d78a:	4668      	mov	r0, sp
 800d78c:	6819      	ldr	r1, [r3, #0]
 800d78e:	f7fe fd75 	bl	800c27c <DmxParams::DmxParams(DmxParamsStore*)>
 800d792:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <RemoteConfig::HandleSetParamsTxt()+0x24>)
 800d794:	4668      	mov	r0, sp
 800d796:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800d79a:	6819      	ldr	r1, [r3, #0]
 800d79c:	f7fe fd86 	bl	800c2ac <DmxParams::Load(char const*, unsigned int)>
 800d7a0:	b004      	add	sp, #16
 800d7a2:	bd10      	pop	{r4, pc}
 800d7a4:	20001cc8 	andcs	r1, r0, r8, asr #25
 800d7a8:	20000c78 	andcs	r0, r0, r8, ror ip

0800d7ac <RemoteConfig::HandleSetDisplayTxt()>:
 800d7ac:	b510      	push	{r4, lr}
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	4b07      	ldr	r3, [pc, #28]	; (800d7d0 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800d7b2:	b08a      	sub	sp, #40	; 0x28
 800d7b4:	6819      	ldr	r1, [r3, #0]
 800d7b6:	4668      	mov	r0, sp
 800d7b8:	f003 fe54 	bl	8011464 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800d7bc:	4b05      	ldr	r3, [pc, #20]	; (800d7d4 <RemoteConfig::HandleSetDisplayTxt()+0x28>)
 800d7be:	4668      	mov	r0, sp
 800d7c0:	f8d4 25e4 	ldr.w	r2, [r4, #1508]	; 0x5e4
 800d7c4:	6819      	ldr	r1, [r3, #0]
 800d7c6:	f003 fe67 	bl	8011498 <DisplayUdfParams::Load(char const*, unsigned int)>
 800d7ca:	b00a      	add	sp, #40	; 0x28
 800d7cc:	bd10      	pop	{r4, pc}
 800d7ce:	bf00      	nop
 800d7d0:	20001cc4 	andcs	r1, r0, r4, asr #25
 800d7d4:	20000c78 	andcs	r0, r0, r8, ror ip

0800d7d8 <RemoteConfig::HandleFactory()>:
 800d7d8:	b538      	push	{r3, r4, r5, lr}
 800d7da:	2400      	movs	r4, #0
 800d7dc:	4d04      	ldr	r5, [pc, #16]	; (800d7f0 <RemoteConfig::HandleFactory()+0x18>)
 800d7de:	4621      	mov	r1, r4
 800d7e0:	6828      	ldr	r0, [r5, #0]
 800d7e2:	3401      	adds	r4, #1
 800d7e4:	f000 ff12 	bl	800e60c <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800d7e8:	2c1c      	cmp	r4, #28
 800d7ea:	d1f8      	bne.n	800d7de <RemoteConfig::HandleFactory()+0x6>
 800d7ec:	bd38      	pop	{r3, r4, r5, pc}
 800d7ee:	bf00      	nop
 800d7f0:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800d7f4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800d7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	8885      	ldrh	r5, [r0, #4]
 800d7fa:	88c1      	ldrh	r1, [r0, #6]
 800d7fc:	42a9      	cmp	r1, r5
 800d7fe:	d214      	bcs.n	800d82a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800d800:	4604      	mov	r4, r0
 800d802:	6800      	ldr	r0, [r0, #0]
 800d804:	1a6d      	subs	r5, r5, r1
 800d806:	4408      	add	r0, r1
 800d808:	7a21      	ldrb	r1, [r4, #8]
 800d80a:	b91a      	cbnz	r2, 800d814 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800d80c:	b919      	cbnz	r1, 800d816 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800d80e:	4a0a      	ldr	r2, [pc, #40]	; (800d838 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800d810:	9100      	str	r1, [sp, #0]
 800d812:	e002      	b.n	800d81a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d814:	b159      	cbz	r1, 800d82e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800d816:	9200      	str	r2, [sp, #0]
 800d818:	4a08      	ldr	r2, [pc, #32]	; (800d83c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800d81a:	4629      	mov	r1, r5
 800d81c:	f005 fac2 	bl	8012da4 <snprintf>
 800d820:	4285      	cmp	r5, r0
 800d822:	bfa2      	ittt	ge
 800d824:	88e3      	ldrhge	r3, [r4, #6]
 800d826:	181b      	addge	r3, r3, r0
 800d828:	80e3      	strhge	r3, [r4, #6]
 800d82a:	b003      	add	sp, #12
 800d82c:	bd30      	pop	{r4, r5, pc}
 800d82e:	2201      	movs	r2, #1
 800d830:	9200      	str	r2, [sp, #0]
 800d832:	4a03      	ldr	r2, [pc, #12]	; (800d840 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800d834:	e7f1      	b.n	800d81a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d836:	bf00      	nop
 800d838:	08015353 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, ip, lr}
 800d83c:	0801534a 	stmdaeq	r1, {r1, r3, r6, r8, r9, ip, lr}
 800d840:	08015354 	stmdaeq	r1, {r2, r4, r6, r8, r9, ip, lr}

0800d844 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800d844:	b510      	push	{r4, lr}
 800d846:	4604      	mov	r4, r0
 800d848:	2220      	movs	r2, #32
 800d84a:	f840 1b04 	str.w	r1, [r0], #4
 800d84e:	2100      	movs	r1, #0
 800d850:	f005 f866 	bl	8012920 <memset>
 800d854:	4620      	mov	r0, r4
 800d856:	bd10      	pop	{r4, pc}

0800d858 <RemoteConfigParams::Load()>:
 800d858:	b508      	push	{r3, lr}
 800d85a:	2300      	movs	r3, #0
 800d85c:	4601      	mov	r1, r0
 800d85e:	6043      	str	r3, [r0, #4]
 800d860:	6800      	ldr	r0, [r0, #0]
 800d862:	b120      	cbz	r0, 800d86e <RemoteConfigParams::Load()+0x16>
 800d864:	6803      	ldr	r3, [r0, #0]
 800d866:	3104      	adds	r1, #4
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	4798      	blx	r3
 800d86c:	2001      	movs	r0, #1
 800d86e:	bd08      	pop	{r3, pc}

0800d870 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800d870:	2300      	movs	r3, #0
 800d872:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d874:	460d      	mov	r5, r1
 800d876:	4616      	mov	r6, r2
 800d878:	4604      	mov	r4, r0
 800d87a:	6043      	str	r3, [r0, #4]
 800d87c:	4602      	mov	r2, r0
 800d87e:	490a      	ldr	r1, [pc, #40]	; (800d8a8 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800d880:	4668      	mov	r0, sp
 800d882:	f004 fa1b 	bl	8011cbc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800d886:	4632      	mov	r2, r6
 800d888:	4629      	mov	r1, r5
 800d88a:	4668      	mov	r0, sp
 800d88c:	f004 fa1a 	bl	8011cc4 <ReadConfigFile::Read(char const*, unsigned int)>
 800d890:	4621      	mov	r1, r4
 800d892:	f851 0b04 	ldr.w	r0, [r1], #4
 800d896:	6803      	ldr	r3, [r0, #0]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	4798      	blx	r3
 800d89c:	4668      	mov	r0, sp
 800d89e:	f004 fa10 	bl	8011cc2 <ReadConfigFile::~ReadConfigFile()>
 800d8a2:	b002      	add	sp, #8
 800d8a4:	bd70      	pop	{r4, r5, r6, pc}
 800d8a6:	bf00      	nop
 800d8a8:	0800d969 	stmdaeq	r0, {r0, r3, r5, r6, r8, fp, ip, lr, pc}

0800d8ac <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800d8ac:	6843      	ldr	r3, [r0, #4]
 800d8ae:	b111      	cbz	r1, 800d8b6 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	6043      	str	r3, [r0, #4]
 800d8b4:	4770      	bx	lr
 800d8b6:	ea23 0302 	bic.w	r3, r3, r2
 800d8ba:	e7fa      	b.n	800d8b2 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800d8bc <RemoteConfigParams::callbackFunction(char const*)>:
 800d8bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8be:	460d      	mov	r5, r1
 800d8c0:	4604      	mov	r4, r0
 800d8c2:	4923      	ldr	r1, [pc, #140]	; (800d950 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	f10d 0203 	add.w	r2, sp, #3
 800d8ca:	f004 fad1 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d8ce:	b940      	cbnz	r0, 800d8e2 <RemoteConfigParams::callbackFunction(char const*)+0x26>
 800d8d0:	2201      	movs	r2, #1
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800d8d8:	b003      	add	sp, #12
 800d8da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8de:	f7ff bfe5 	b.w	800d8ac <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	491b      	ldr	r1, [pc, #108]	; (800d954 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800d8e6:	f10d 0203 	add.w	r2, sp, #3
 800d8ea:	f004 fac1 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d8ee:	b908      	cbnz	r0, 800d8f4 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	e7ee      	b.n	800d8d2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d8f4:	4628      	mov	r0, r5
 800d8f6:	4918      	ldr	r1, [pc, #96]	; (800d958 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800d8f8:	f10d 0203 	add.w	r2, sp, #3
 800d8fc:	f004 fab8 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d900:	b908      	cbnz	r0, 800d906 <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 800d902:	2204      	movs	r2, #4
 800d904:	e7e5      	b.n	800d8d2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d906:	4628      	mov	r0, r5
 800d908:	4914      	ldr	r1, [pc, #80]	; (800d95c <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800d90a:	f10d 0203 	add.w	r2, sp, #3
 800d90e:	f004 faaf 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d912:	b908      	cbnz	r0, 800d918 <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 800d914:	2208      	movs	r2, #8
 800d916:	e7dc      	b.n	800d8d2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d918:	4628      	mov	r0, r5
 800d91a:	4911      	ldr	r1, [pc, #68]	; (800d960 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800d91c:	f10d 0203 	add.w	r2, sp, #3
 800d920:	f004 faa6 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800d924:	b908      	cbnz	r0, 800d92a <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 800d926:	2220      	movs	r2, #32
 800d928:	e7d3      	b.n	800d8d2 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800d92a:	2317      	movs	r3, #23
 800d92c:	4628      	mov	r0, r5
 800d92e:	9301      	str	r3, [sp, #4]
 800d930:	490c      	ldr	r1, [pc, #48]	; (800d964 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800d932:	ab01      	add	r3, sp, #4
 800d934:	f104 020c 	add.w	r2, r4, #12
 800d938:	f004 f9f8 	bl	8011d2c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800d93c:	b930      	cbnz	r0, 800d94c <RemoteConfigParams::callbackFunction(char const*)+0x90>
 800d93e:	9b01      	ldr	r3, [sp, #4]
 800d940:	4423      	add	r3, r4
 800d942:	7318      	strb	r0, [r3, #12]
 800d944:	6863      	ldr	r3, [r4, #4]
 800d946:	f043 0310 	orr.w	r3, r3, #16
 800d94a:	6063      	str	r3, [r4, #4]
 800d94c:	b003      	add	sp, #12
 800d94e:	bd30      	pop	{r4, r5, pc}
 800d950:	08015e7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, lr}
 800d954:	08015e9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r9, sl, fp, ip, lr}
 800d958:	08015ead 	stmdaeq	r1, {r0, r2, r3, r5, r7, r9, sl, fp, ip, lr}
 800d95c:	08015ebb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, fp, ip, lr}
 800d960:	08015ec9 	stmdaeq	r1, {r0, r3, r6, r7, r9, sl, fp, ip, lr}
 800d964:	08015e92 	stmdaeq	r1, {r1, r4, r7, r9, sl, fp, ip, lr}

0800d968 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800d968:	f7ff bfa8 	b.w	800d8bc <RemoteConfigParams::callbackFunction(char const*)>

0800d96c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800d96c:	b570      	push	{r4, r5, r6, lr}
 800d96e:	4604      	mov	r4, r0
 800d970:	4615      	mov	r5, r2
 800d972:	461e      	mov	r6, r3
 800d974:	b086      	sub	sp, #24
 800d976:	3004      	adds	r0, #4
 800d978:	2900      	cmp	r1, #0
 800d97a:	d041      	beq.n	800da00 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 800d97c:	2220      	movs	r2, #32
 800d97e:	f004 ffb8 	bl	80128f2 <memmove>
 800d982:	4633      	mov	r3, r6
 800d984:	462a      	mov	r2, r5
 800d986:	4937      	ldr	r1, [pc, #220]	; (800da64 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800d988:	a803      	add	r0, sp, #12
 800d98a:	f004 f8c7 	bl	8011b1c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800d98e:	6862      	ldr	r2, [r4, #4]
 800d990:	4935      	ldr	r1, [pc, #212]	; (800da68 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800d992:	f002 0201 	and.w	r2, r2, #1
 800d996:	a803      	add	r0, sp, #12
 800d998:	f7ff ff2c 	bl	800d7f4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d99c:	6862      	ldr	r2, [r4, #4]
 800d99e:	4933      	ldr	r1, [pc, #204]	; (800da6c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800d9a0:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800d9a4:	a803      	add	r0, sp, #12
 800d9a6:	f7ff ff25 	bl	800d7f4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d9aa:	6862      	ldr	r2, [r4, #4]
 800d9ac:	4930      	ldr	r1, [pc, #192]	; (800da70 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800d9ae:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800d9b2:	a803      	add	r0, sp, #12
 800d9b4:	f7ff ff1e 	bl	800d7f4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d9b8:	6862      	ldr	r2, [r4, #4]
 800d9ba:	492e      	ldr	r1, [pc, #184]	; (800da74 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800d9bc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800d9c0:	a803      	add	r0, sp, #12
 800d9c2:	f7ff ff17 	bl	800d7f4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d9c6:	6862      	ldr	r2, [r4, #4]
 800d9c8:	492b      	ldr	r1, [pc, #172]	; (800da78 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800d9ca:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800d9ce:	a803      	add	r0, sp, #12
 800d9d0:	f7ff ff10 	bl	800d7f4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800d9d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d9d8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800d9dc:	6862      	ldr	r2, [r4, #4]
 800d9de:	42ab      	cmp	r3, r5
 800d9e0:	d223      	bcs.n	800da2a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 800d9e2:	9803      	ldr	r0, [sp, #12]
 800d9e4:	06d2      	lsls	r2, r2, #27
 800d9e6:	4418      	add	r0, r3
 800d9e8:	eba5 0503 	sub.w	r5, r5, r3
 800d9ec:	f104 040c 	add.w	r4, r4, #12
 800d9f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d9f4:	d40b      	bmi.n	800da0e <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800d9f6:	b95b      	cbnz	r3, 800da10 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 800d9f8:	4b20      	ldr	r3, [pc, #128]	; (800da7c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800d9fa:	4a21      	ldr	r2, [pc, #132]	; (800da80 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800d9fc:	9400      	str	r4, [sp, #0]
 800d9fe:	e00a      	b.n	800da16 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800da00:	6823      	ldr	r3, [r4, #0]
 800da02:	4601      	mov	r1, r0
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	4618      	mov	r0, r3
 800da08:	68d2      	ldr	r2, [r2, #12]
 800da0a:	4790      	blx	r2
 800da0c:	e7b9      	b.n	800d982 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800da0e:	b32b      	cbz	r3, 800da5c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 800da10:	4b1a      	ldr	r3, [pc, #104]	; (800da7c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800da12:	4a1c      	ldr	r2, [pc, #112]	; (800da84 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800da14:	9400      	str	r4, [sp, #0]
 800da16:	4629      	mov	r1, r5
 800da18:	f005 f9c4 	bl	8012da4 <snprintf>
 800da1c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800da20:	4285      	cmp	r5, r0
 800da22:	bfa4      	itt	ge
 800da24:	181b      	addge	r3, r3, r0
 800da26:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800da2a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800da2e:	b17b      	cbz	r3, 800da50 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 800da30:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800da34:	9b03      	ldr	r3, [sp, #12]
 800da36:	4413      	add	r3, r2
 800da38:	227d      	movs	r2, #125	; 0x7d
 800da3a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800da3e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800da42:	9903      	ldr	r1, [sp, #12]
 800da44:	54ca      	strb	r2, [r1, r3]
 800da46:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800da4a:	3301      	adds	r3, #1
 800da4c:	f8ad 3012 	strh.w	r3, [sp, #18]
 800da50:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800da54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da56:	601a      	str	r2, [r3, #0]
 800da58:	b006      	add	sp, #24
 800da5a:	bd70      	pop	{r4, r5, r6, pc}
 800da5c:	4b07      	ldr	r3, [pc, #28]	; (800da7c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800da5e:	4a0a      	ldr	r2, [pc, #40]	; (800da88 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800da60:	9400      	str	r4, [sp, #0]
 800da62:	e7d8      	b.n	800da16 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 800da64:	08015e86 	stmdaeq	r1, {r1, r2, r7, r9, sl, fp, ip, lr}
 800da68:	08015e7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, sl, fp, ip, lr}
 800da6c:	08015e9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r9, sl, fp, ip, lr}
 800da70:	08015ead 	stmdaeq	r1, {r0, r2, r3, r5, r7, r9, sl, fp, ip, lr}
 800da74:	08015ebb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, fp, ip, lr}
 800da78:	08015ec9 	stmdaeq	r1, {r0, r3, r6, r7, r9, sl, fp, ip, lr}
 800da7c:	08015e92 	stmdaeq	r1, {r1, r4, r7, r9, sl, fp, ip, lr}
 800da80:	08015366 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, ip, lr}
 800da84:	0801535b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, ip, lr}
 800da88:	08015367 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, ip, lr}

0800da8c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800da8c:	b513      	push	{r0, r1, r4, lr}
 800da8e:	6804      	ldr	r4, [r0, #0]
 800da90:	b914      	cbnz	r4, 800da98 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800da92:	601c      	str	r4, [r3, #0]
 800da94:	b002      	add	sp, #8
 800da96:	bd10      	pop	{r4, pc}
 800da98:	9300      	str	r3, [sp, #0]
 800da9a:	4613      	mov	r3, r2
 800da9c:	460a      	mov	r2, r1
 800da9e:	2100      	movs	r1, #0
 800daa0:	f7ff ff64 	bl	800d96c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800daa4:	e7f6      	b.n	800da94 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800daa6 <RemoteConfigParams::Set(RemoteConfig*)>:
 800daa6:	b538      	push	{r3, r4, r5, lr}
 800daa8:	460c      	mov	r4, r1
 800daaa:	4605      	mov	r5, r0
 800daac:	6841      	ldr	r1, [r0, #4]
 800daae:	4620      	mov	r0, r4
 800dab0:	f001 0101 	and.w	r1, r1, #1
 800dab4:	f7ff fc24 	bl	800d300 <RemoteConfig::SetDisable(bool)>
 800dab8:	686b      	ldr	r3, [r5, #4]
 800daba:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800dabe:	f884 25d5 	strb.w	r2, [r4, #1493]	; 0x5d5
 800dac2:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800dac6:	f884 25d6 	strb.w	r2, [r4, #1494]	; 0x5d6
 800daca:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800dace:	f884 25d7 	strb.w	r2, [r4, #1495]	; 0x5d7
 800dad2:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800dad6:	06db      	lsls	r3, r3, #27
 800dad8:	f884 25d8 	strb.w	r2, [r4, #1496]	; 0x5d8
 800dadc:	d506      	bpl.n	800daec <RemoteConfigParams::Set(RemoteConfig*)+0x46>
 800dade:	4620      	mov	r0, r4
 800dae0:	f105 010c 	add.w	r1, r5, #12
 800dae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dae8:	f7ff bc2e 	b.w	800d348 <RemoteConfig::SetDisplayName(char const*)>
 800daec:	bd38      	pop	{r3, r4, r5, pc}

0800daee <RemoteConfigParams::Dump()>:
 800daee:	4770      	bx	lr

0800daf0 <RemoteConfig::HandleReboot()>:
 800daf0:	f890 35d6 	ldrb.w	r3, [r0, #1494]	; 0x5d6
 800daf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d03d      	beq.n	800db76 <RemoteConfig::HandleReboot()+0x86>
 800dafa:	2301      	movs	r3, #1
 800dafc:	4c1f      	ldr	r4, [pc, #124]	; (800db7c <RemoteConfig::HandleReboot()+0x8c>)
 800dafe:	f880 35d9 	strb.w	r3, [r0, #1497]	; 0x5d9
 800db02:	6825      	ldr	r5, [r4, #0]
 800db04:	69a8      	ldr	r0, [r5, #24]
 800db06:	b138      	cbz	r0, 800db18 <RemoteConfig::HandleReboot()+0x28>
 800db08:	2100      	movs	r1, #0
 800db0a:	6803      	ldr	r3, [r0, #0]
 800db0c:	7429      	strb	r1, [r5, #16]
 800db0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db10:	4798      	blx	r3
 800db12:	4b1b      	ldr	r3, [pc, #108]	; (800db80 <RemoteConfig::HandleReboot()+0x90>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	606b      	str	r3, [r5, #4]
 800db18:	4d1a      	ldr	r5, [pc, #104]	; (800db84 <RemoteConfig::HandleReboot()+0x94>)
 800db1a:	6828      	ldr	r0, [r5, #0]
 800db1c:	f000 fdf2 	bl	800e704 <SpiFlashStore::Flash()>
 800db20:	2800      	cmp	r0, #0
 800db22:	d1fa      	bne.n	800db1a <RemoteConfig::HandleReboot()+0x2a>
 800db24:	4b18      	ldr	r3, [pc, #96]	; (800db88 <RemoteConfig::HandleReboot()+0x98>)
 800db26:	6818      	ldr	r0, [r3, #0]
 800db28:	f002 fa4a 	bl	800ffc0 <Network::Shutdown()>
 800db2c:	4817      	ldr	r0, [pc, #92]	; (800db8c <RemoteConfig::HandleReboot()+0x9c>)
 800db2e:	f005 f911 	bl	8012d54 <printf>
 800db32:	6823      	ldr	r3, [r4, #0]
 800db34:	6998      	ldr	r0, [r3, #24]
 800db36:	b110      	cbz	r0, 800db3e <RemoteConfig::HandleReboot()+0x4e>
 800db38:	6803      	ldr	r3, [r0, #0]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	4798      	blx	r3
 800db3e:	6824      	ldr	r4, [r4, #0]
 800db40:	4913      	ldr	r1, [pc, #76]	; (800db90 <RemoteConfig::HandleReboot()+0xa0>)
 800db42:	4620      	mov	r0, r4
 800db44:	f7fa f8d6 	bl	8007cf4 <Display::TextStatus(char const*)>
 800db48:	7c63      	ldrb	r3, [r4, #17]
 800db4a:	b183      	cbz	r3, 800db6e <RemoteConfig::HandleReboot()+0x7e>
 800db4c:	f64b 7312 	movw	r3, #48914	; 0xbf12
 800db50:	f8ad 3004 	strh.w	r3, [sp, #4]
 800db54:	23bf      	movs	r3, #191	; 0xbf
 800db56:	7a20      	ldrb	r0, [r4, #8]
 800db58:	f88d 3006 	strb.w	r3, [sp, #6]
 800db5c:	f006 f96c 	bl	8013e38 <gd32_i2c_set_address(unsigned char)>
 800db60:	68e0      	ldr	r0, [r4, #12]
 800db62:	f006 f961 	bl	8013e28 <gd32_i2c_set_baudrate(unsigned int)>
 800db66:	2103      	movs	r1, #3
 800db68:	a801      	add	r0, sp, #4
 800db6a:	f006 f96b 	bl	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 800db6e:	4b09      	ldr	r3, [pc, #36]	; (800db94 <RemoteConfig::HandleReboot()+0xa4>)
 800db70:	6818      	ldr	r0, [r3, #0]
 800db72:	f004 fdbd 	bl	80126f0 <Hardware::Reboot()>
 800db76:	b003      	add	sp, #12
 800db78:	bd30      	pop	{r4, r5, pc}
 800db7a:	bf00      	nop
 800db7c:	20009bf8 	strdcs	r9, [r0], -r8
 800db80:	20009d04 	andcs	r9, r0, r4, lsl #26
 800db84:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8
 800db88:	200095c0 	andcs	r9, r0, r0, asr #11
 800db8c:	08015ac0 	stmdaeq	r1, {r6, r7, r9, fp, ip, lr}
 800db90:	08015acf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, fp, ip, lr}
 800db94:	20009ce8 	andcs	r9, r0, r8, ror #25

0800db98 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800db98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800db9c:	2000      	movs	r0, #0
 800db9e:	4d12      	ldr	r5, [pc, #72]	; (800dbe8 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800dba0:	f10d 0c04 	add.w	ip, sp, #4
 800dba4:	6814      	ldr	r4, [r2, #0]
 800dba6:	7d2b      	ldrb	r3, [r5, #20]
 800dba8:	692e      	ldr	r6, [r5, #16]
 800dbaa:	42a3      	cmp	r3, r4
 800dbac:	bf34      	ite	cc
 800dbae:	4664      	movcc	r4, ip
 800dbb0:	4614      	movcs	r4, r2
 800dbb2:	9301      	str	r3, [sp, #4]
 800dbb4:	6827      	ldr	r7, [r4, #0]
 800dbb6:	460c      	mov	r4, r1
 800dbb8:	3e01      	subs	r6, #1
 800dbba:	440f      	add	r7, r1
 800dbbc:	42bc      	cmp	r4, r7
 800dbbe:	d101      	bne.n	800dbc4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 800dbc0:	6013      	str	r3, [r2, #0]
 800dbc2:	e00c      	b.n	800dbde <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 800dbc4:	f894 8000 	ldrb.w	r8, [r4]
 800dbc8:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800dbcc:	45f0      	cmp	r8, lr
 800dbce:	d009      	beq.n	800dbe4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800dbd0:	3001      	adds	r0, #1
 800dbd2:	2805      	cmp	r0, #5
 800dbd4:	f105 051c 	add.w	r5, r5, #28
 800dbd8:	d1e4      	bne.n	800dba4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800dbda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbde:	b002      	add	sp, #8
 800dbe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe4:	3401      	adds	r4, #1
 800dbe6:	e7e9      	b.n	800dbbc <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800dbe8:	08015b18 	stmdaeq	r1, {r3, r4, r8, r9, fp, ip, lr}

0800dbec <RemoteConfig::PlatformHandleTftpSet()>:
 800dbec:	f890 15ec 	ldrb.w	r1, [r0, #1516]	; 0x5ec
 800dbf0:	b109      	cbz	r1, 800dbf6 <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800dbf2:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 800dbf6:	2002      	movs	r0, #2
 800dbf8:	f005 bad4 	b.w	80131a4 <bkp_data_write>

0800dbfc <RemoteConfig::PlatformHandleTftpGet()>:
 800dbfc:	b510      	push	{r4, lr}
 800dbfe:	4604      	mov	r4, r0
 800dc00:	2002      	movs	r0, #2
 800dc02:	f005 fae5 	bl	80131d0 <bkp_data_read>
 800dc06:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800dc0a:	1ac3      	subs	r3, r0, r3
 800dc0c:	4258      	negs	r0, r3
 800dc0e:	4158      	adcs	r0, r3
 800dc10:	f884 05ec 	strb.w	r0, [r4, #1516]	; 0x5ec
 800dc14:	bd10      	pop	{r4, pc}

0800dc16 <strcmp>:
 800dc16:	1e43      	subs	r3, r0, #1
 800dc18:	3901      	subs	r1, #1
 800dc1a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800dc1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dc22:	4290      	cmp	r0, r2
 800dc24:	d001      	beq.n	800dc2a <strcmp+0x14>
 800dc26:	1a80      	subs	r0, r0, r2
 800dc28:	e001      	b.n	800dc2e <strcmp+0x18>
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d1f5      	bne.n	800dc1a <strcmp+0x4>
 800dc2e:	4770      	bx	lr

0800dc30 <strcasecmp>:
 800dc30:	b530      	push	{r4, r5, lr}
 800dc32:	1e42      	subs	r2, r0, #1
 800dc34:	3901      	subs	r1, #1
 800dc36:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dc40:	2b19      	cmp	r3, #25
 800dc42:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc46:	bf98      	it	ls
 800dc48:	f100 0420 	addls.w	r4, r0, #32
 800dc4c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800dc50:	2d19      	cmp	r5, #25
 800dc52:	bf98      	it	ls
 800dc54:	3320      	addls	r3, #32
 800dc56:	42a3      	cmp	r3, r4
 800dc58:	d001      	beq.n	800dc5e <strcasecmp+0x2e>
 800dc5a:	1ae0      	subs	r0, r4, r3
 800dc5c:	e001      	b.n	800dc62 <strcasecmp+0x32>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d1e9      	bne.n	800dc36 <strcasecmp+0x6>
 800dc62:	bd30      	pop	{r4, r5, pc}

0800dc64 <PropertiesConfig::EnableJSON(bool)>:
 800dc64:	4a04      	ldr	r2, [pc, #16]	; (800dc78 <PropertiesConfig::EnableJSON(bool)+0x14>)
 800dc66:	7813      	ldrb	r3, [r2, #0]
 800dc68:	b118      	cbz	r0, 800dc72 <PropertiesConfig::EnableJSON(bool)+0xe>
 800dc6a:	f043 0301 	orr.w	r3, r3, #1
 800dc6e:	7013      	strb	r3, [r2, #0]
 800dc70:	4770      	bx	lr
 800dc72:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800dc76:	e7fa      	b.n	800dc6e <PropertiesConfig::EnableJSON(bool)+0xa>
 800dc78:	20009bf4 	strdcs	r9, [r0], -r4

0800dc7c <HttpDaemon::HttpDaemon()>:
 800dc7c:	4a0a      	ldr	r2, [pc, #40]	; (800dca8 <HttpDaemon::HttpDaemon()+0x2c>)
 800dc7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800dc82:	6002      	str	r2, [r0, #0]
 800dc84:	2200      	movs	r2, #0
 800dc86:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800dc8a:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800dc8e:	2102      	movs	r1, #2
 800dc90:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800dc94:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800dc98:	60c2      	str	r2, [r0, #12]
 800dc9a:	8402      	strh	r2, [r0, #32]
 800dc9c:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 800dca0:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	08015dfe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}

0800dcac <HttpDaemon::Start()>:
 800dcac:	4b04      	ldr	r3, [pc, #16]	; (800dcc0 <HttpDaemon::Start()+0x14>)
 800dcae:	b510      	push	{r4, lr}
 800dcb0:	2150      	movs	r1, #80	; 0x50
 800dcb2:	4604      	mov	r4, r0
 800dcb4:	6818      	ldr	r0, [r3, #0]
 800dcb6:	f002 fc09 	bl	80104cc <Network::TcpBegin(unsigned short)>
 800dcba:	6120      	str	r0, [r4, #16]
 800dcbc:	bd10      	pop	{r4, pc}
 800dcbe:	bf00      	nop
 800dcc0:	200095c0 	andcs	r9, r0, r0, asr #11

0800dcc4 <HttpDaemon::ParseMethod(char*)>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	4608      	mov	r0, r1
 800dcca:	491a      	ldr	r1, [pc, #104]	; (800dd34 <HttpDaemon::ParseMethod(char*)+0x70>)
 800dccc:	f005 f89a 	bl	8012e04 <strtok>
 800dcd0:	4605      	mov	r5, r0
 800dcd2:	b360      	cbz	r0, 800dd2e <HttpDaemon::ParseMethod(char*)+0x6a>
 800dcd4:	4918      	ldr	r1, [pc, #96]	; (800dd38 <HttpDaemon::ParseMethod(char*)+0x74>)
 800dcd6:	f7ff ff9e 	bl	800dc16 <strcmp>
 800dcda:	b128      	cbz	r0, 800dce8 <HttpDaemon::ParseMethod(char*)+0x24>
 800dcdc:	4628      	mov	r0, r5
 800dcde:	4917      	ldr	r1, [pc, #92]	; (800dd3c <HttpDaemon::ParseMethod(char*)+0x78>)
 800dce0:	f7ff ff99 	bl	800dc16 <strcmp>
 800dce4:	bb18      	cbnz	r0, 800dd2e <HttpDaemon::ParseMethod(char*)+0x6a>
 800dce6:	2001      	movs	r0, #1
 800dce8:	61e0      	str	r0, [r4, #28]
 800dcea:	4912      	ldr	r1, [pc, #72]	; (800dd34 <HttpDaemon::ParseMethod(char*)+0x70>)
 800dcec:	2000      	movs	r0, #0
 800dcee:	f005 f889 	bl	8012e04 <strtok>
 800dcf2:	b910      	cbnz	r0, 800dcfa <HttpDaemon::ParseMethod(char*)+0x36>
 800dcf4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800dcf8:	bd38      	pop	{r3, r4, r5, pc}
 800dcfa:	6060      	str	r0, [r4, #4]
 800dcfc:	4910      	ldr	r1, [pc, #64]	; (800dd40 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800dcfe:	2000      	movs	r0, #0
 800dd00:	f005 f880 	bl	8012e04 <strtok>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d0f5      	beq.n	800dcf4 <HttpDaemon::ParseMethod(char*)+0x30>
 800dd08:	490e      	ldr	r1, [pc, #56]	; (800dd44 <HttpDaemon::ParseMethod(char*)+0x80>)
 800dd0a:	f7ff ff84 	bl	800dc16 <strcmp>
 800dd0e:	2800      	cmp	r0, #0
 800dd10:	d1f0      	bne.n	800dcf4 <HttpDaemon::ParseMethod(char*)+0x30>
 800dd12:	490d      	ldr	r1, [pc, #52]	; (800dd48 <HttpDaemon::ParseMethod(char*)+0x84>)
 800dd14:	f005 f876 	bl	8012e04 <strtok>
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	d0eb      	beq.n	800dcf4 <HttpDaemon::ParseMethod(char*)+0x30>
 800dd1c:	490b      	ldr	r1, [pc, #44]	; (800dd4c <HttpDaemon::ParseMethod(char*)+0x88>)
 800dd1e:	f7ff ff7a 	bl	800dc16 <strcmp>
 800dd22:	2800      	cmp	r0, #0
 800dd24:	f240 10f9 	movw	r0, #505	; 0x1f9
 800dd28:	bf08      	it	eq
 800dd2a:	20c8      	moveq	r0, #200	; 0xc8
 800dd2c:	e7e4      	b.n	800dcf8 <HttpDaemon::ParseMethod(char*)+0x34>
 800dd2e:	f240 10f5 	movw	r0, #501	; 0x1f5
 800dd32:	e7e1      	b.n	800dcf8 <HttpDaemon::ParseMethod(char*)+0x34>
 800dd34:	08016dab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, sl, fp, sp, lr}
 800dd38:	08015ba4 	stmdaeq	r1, {r2, r5, r7, r8, r9, fp, ip, lr}
 800dd3c:	08015ba8 	stmdaeq	r1, {r3, r5, r7, r8, r9, fp, ip, lr}
 800dd40:	08015c12 	stmdaeq	r1, {r1, r4, sl, fp, ip, lr}
 800dd44:	08015bad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, fp, ip, lr}
 800dd48:	08015bb2 	stmdaeq	r1, {r1, r4, r5, r7, r8, r9, fp, ip, lr}
 800dd4c:	08015bb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, fp, ip, lr}

0800dd50 <HttpDaemon::ParseHeaderField(char*)>:
 800dd50:	b538      	push	{r3, r4, r5, lr}
 800dd52:	4605      	mov	r5, r0
 800dd54:	4608      	mov	r0, r1
 800dd56:	491d      	ldr	r1, [pc, #116]	; (800ddcc <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800dd58:	f005 f854 	bl	8012e04 <strtok>
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	b910      	cbnz	r0, 800dd66 <HttpDaemon::ParseHeaderField(char*)+0x16>
 800dd60:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800dd64:	bd38      	pop	{r3, r4, r5, pc}
 800dd66:	491a      	ldr	r1, [pc, #104]	; (800ddd0 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800dd68:	f7ff ff62 	bl	800dc30 <strcasecmp>
 800dd6c:	b970      	cbnz	r0, 800dd8c <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800dd6e:	4919      	ldr	r1, [pc, #100]	; (800ddd4 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800dd70:	f005 f848 	bl	8012e04 <strtok>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d0f3      	beq.n	800dd60 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800dd78:	4917      	ldr	r1, [pc, #92]	; (800ddd8 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800dd7a:	f7ff ff4c 	bl	800dc16 <strcmp>
 800dd7e:	b108      	cbz	r0, 800dd84 <HttpDaemon::ParseHeaderField(char*)+0x34>
 800dd80:	20c8      	movs	r0, #200	; 0xc8
 800dd82:	e7ef      	b.n	800dd64 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800dd84:	2301      	movs	r3, #1
 800dd86:	f885 3020 	strb.w	r3, [r5, #32]
 800dd8a:	e7f9      	b.n	800dd80 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	4913      	ldr	r1, [pc, #76]	; (800dddc <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800dd90:	f7ff ff4e 	bl	800dc30 <strcasecmp>
 800dd94:	4604      	mov	r4, r0
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d1f2      	bne.n	800dd80 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800dd9a:	4911      	ldr	r1, [pc, #68]	; (800dde0 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800dd9c:	f005 f832 	bl	8012e04 <strtok>
 800dda0:	2800      	cmp	r0, #0
 800dda2:	d0dd      	beq.n	800dd60 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800dda4:	1e42      	subs	r2, r0, #1
 800dda6:	4623      	mov	r3, r4
 800dda8:	200a      	movs	r0, #10
 800ddaa:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800ddae:	b911      	cbnz	r1, 800ddb6 <HttpDaemon::ParseHeaderField(char*)+0x66>
 800ddb0:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 800ddb4:	e7e4      	b.n	800dd80 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800ddb6:	3930      	subs	r1, #48	; 0x30
 800ddb8:	2909      	cmp	r1, #9
 800ddba:	d8d1      	bhi.n	800dd60 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800ddbc:	fb00 1303 	mla	r3, r0, r3, r1
 800ddc0:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800ddc4:	d9f1      	bls.n	800ddaa <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800ddc6:	f240 109d 	movw	r0, #413	; 0x19d
 800ddca:	e7cb      	b.n	800dd64 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800ddcc:	08015bb9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, fp, ip, lr}
 800ddd0:	08015bbb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, r9, fp, ip, lr}
 800ddd4:	08015bc8 	stmdaeq	r1, {r3, r6, r7, r8, r9, fp, ip, lr}
 800ddd8:	08015bcb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, fp, ip, lr}
 800dddc:	08015bdc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, fp, ip, lr}
 800dde0:	08016dab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, sl, fp, sp, lr}

0800dde4 <HttpDaemon::ParseRequest()>:
 800dde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dde6:	2400      	movs	r4, #0
 800dde8:	4605      	mov	r5, r0
 800ddea:	4622      	mov	r2, r4
 800ddec:	4626      	mov	r6, r4
 800ddee:	68c1      	ldr	r1, [r0, #12]
 800ddf0:	f880 4020 	strb.w	r4, [r0, #32]
 800ddf4:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 800ddf8:	8aab      	ldrh	r3, [r5, #20]
 800ddfa:	42a3      	cmp	r3, r4
 800ddfc:	d91e      	bls.n	800de3c <HttpDaemon::ParseRequest()+0x58>
 800ddfe:	68eb      	ldr	r3, [r5, #12]
 800de00:	5d18      	ldrb	r0, [r3, r4]
 800de02:	280a      	cmp	r0, #10
 800de04:	d10e      	bne.n	800de24 <HttpDaemon::ParseRequest()+0x40>
 800de06:	4423      	add	r3, r4
 800de08:	f803 6c01 	strb.w	r6, [r3, #-1]
 800de0c:	1c57      	adds	r7, r2, #1
 800de0e:	b962      	cbnz	r2, 800de2a <HttpDaemon::ParseRequest()+0x46>
 800de10:	4628      	mov	r0, r5
 800de12:	f7ff ff57 	bl	800dcc4 <HttpDaemon::ParseMethod(char*)>
 800de16:	28c8      	cmp	r0, #200	; 0xc8
 800de18:	d111      	bne.n	800de3e <HttpDaemon::ParseRequest()+0x5a>
 800de1a:	463a      	mov	r2, r7
 800de1c:	68e9      	ldr	r1, [r5, #12]
 800de1e:	3401      	adds	r4, #1
 800de20:	b2a4      	uxth	r4, r4
 800de22:	4421      	add	r1, r4
 800de24:	3401      	adds	r4, #1
 800de26:	b2a4      	uxth	r4, r4
 800de28:	e7e6      	b.n	800ddf8 <HttpDaemon::ParseRequest()+0x14>
 800de2a:	7808      	ldrb	r0, [r1, #0]
 800de2c:	b970      	cbnz	r0, 800de4c <HttpDaemon::ParseRequest()+0x68>
 800de2e:	696b      	ldr	r3, [r5, #20]
 800de30:	3b01      	subs	r3, #1
 800de32:	1b1b      	subs	r3, r3, r4
 800de34:	b29b      	uxth	r3, r3
 800de36:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 800de3a:	b90b      	cbnz	r3, 800de40 <HttpDaemon::ParseRequest()+0x5c>
 800de3c:	20c8      	movs	r0, #200	; 0xc8
 800de3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de40:	68ea      	ldr	r2, [r5, #12]
 800de42:	3401      	adds	r4, #1
 800de44:	4414      	add	r4, r2
 800de46:	60ac      	str	r4, [r5, #8]
 800de48:	54e0      	strb	r0, [r4, r3]
 800de4a:	e7f7      	b.n	800de3c <HttpDaemon::ParseRequest()+0x58>
 800de4c:	4628      	mov	r0, r5
 800de4e:	f7ff ff7f 	bl	800dd50 <HttpDaemon::ParseHeaderField(char*)>
 800de52:	e7e0      	b.n	800de16 <HttpDaemon::ParseRequest()+0x32>

0800de54 <HttpDaemon::HandleGetTxt()>:
 800de54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de58:	6847      	ldr	r7, [r0, #4]
 800de5a:	4604      	mov	r4, r0
 800de5c:	1dbd      	adds	r5, r7, #6
 800de5e:	462b      	mov	r3, r5
 800de60:	4618      	mov	r0, r3
 800de62:	7802      	ldrb	r2, [r0, #0]
 800de64:	3301      	adds	r3, #1
 800de66:	2a00      	cmp	r2, #0
 800de68:	d1fa      	bne.n	800de60 <HttpDaemon::HandleGetTxt()+0xc>
 800de6a:	1b40      	subs	r0, r0, r5
 800de6c:	2804      	cmp	r0, #4
 800de6e:	d803      	bhi.n	800de78 <HttpDaemon::HandleGetTxt()+0x24>
 800de70:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800de74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de78:	3804      	subs	r0, #4
 800de7a:	4914      	ldr	r1, [pc, #80]	; (800decc <HttpDaemon::HandleGetTxt()+0x78>)
 800de7c:	4428      	add	r0, r5
 800de7e:	f7ff feca 	bl	800dc16 <strcmp>
 800de82:	2800      	cmp	r0, #0
 800de84:	d1f4      	bne.n	800de70 <HttpDaemon::HandleGetTxt()+0x1c>
 800de86:	4b12      	ldr	r3, [pc, #72]	; (800ded0 <HttpDaemon::HandleGetTxt()+0x7c>)
 800de88:	2001      	movs	r0, #1
 800de8a:	f893 8000 	ldrb.w	r8, [r3]
 800de8e:	f7ff fee9 	bl	800dc64 <PropertiesConfig::EnableJSON(bool)>
 800de92:	4b10      	ldr	r3, [pc, #64]	; (800ded4 <HttpDaemon::HandleGetTxt()+0x80>)
 800de94:	f240 529b 	movw	r2, #1435	; 0x59b
 800de98:	4629      	mov	r1, r5
 800de9a:	6818      	ldr	r0, [r3, #0]
 800de9c:	f7ff fa6c 	bl	800d378 <RemoteConfig::HandleGet(void*, unsigned int)>
 800dea0:	4606      	mov	r6, r0
 800dea2:	f008 0801 	and.w	r8, r8, #1
 800dea6:	4640      	mov	r0, r8
 800dea8:	f7ff fedc 	bl	800dc64 <PropertiesConfig::EnableJSON(bool)>
 800deac:	2e00      	cmp	r6, #0
 800deae:	d0df      	beq.n	800de70 <HttpDaemon::HandleGetTxt()+0x1c>
 800deb0:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 800deb4:	3606      	adds	r6, #6
 800deb6:	3422      	adds	r4, #34	; 0x22
 800deb8:	4437      	add	r7, r6
 800deba:	42bd      	cmp	r5, r7
 800debc:	d101      	bne.n	800dec2 <HttpDaemon::HandleGetTxt()+0x6e>
 800debe:	20c8      	movs	r0, #200	; 0xc8
 800dec0:	e7d8      	b.n	800de74 <HttpDaemon::HandleGetTxt()+0x20>
 800dec2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dec6:	f804 3b01 	strb.w	r3, [r4], #1
 800deca:	e7f6      	b.n	800deba <HttpDaemon::HandleGetTxt()+0x66>
 800decc:	08015ae4 	stmdaeq	r1, {r2, r5, r6, r7, r9, fp, ip, lr}
 800ded0:	20009bf4 	strdcs	r9, [r0], -r4
 800ded4:	20000ca0 	andcs	r0, r0, r0, lsr #25

0800ded8 <HttpDaemon::HandleGet()>:
 800ded8:	b570      	push	{r4, r5, r6, lr}
 800deda:	6845      	ldr	r5, [r0, #4]
 800dedc:	4604      	mov	r4, r0
 800dede:	4943      	ldr	r1, [pc, #268]	; (800dfec <HttpDaemon::HandleGet()+0x114>)
 800dee0:	4628      	mov	r0, r5
 800dee2:	f7ff fe98 	bl	800dc16 <strcmp>
 800dee6:	b120      	cbz	r0, 800def2 <HttpDaemon::HandleGet()+0x1a>
 800dee8:	4628      	mov	r0, r5
 800deea:	4941      	ldr	r1, [pc, #260]	; (800dff0 <HttpDaemon::HandleGet()+0x118>)
 800deec:	f7ff fe93 	bl	800dc16 <strcmp>
 800def0:	b960      	cbnz	r0, 800df0c <HttpDaemon::HandleGet()+0x34>
 800def2:	4621      	mov	r1, r4
 800def4:	4b3f      	ldr	r3, [pc, #252]	; (800dff4 <HttpDaemon::HandleGet()+0x11c>)
 800def6:	4840      	ldr	r0, [pc, #256]	; (800dff8 <HttpDaemon::HandleGet()+0x120>)
 800def8:	f841 3b22 	str.w	r3, [r1], #34
 800defc:	f000 fa7a 	bl	800e3f4 <get_file_content(char const*, char*)>
 800df00:	2800      	cmp	r0, #0
 800df02:	dd33      	ble.n	800df6c <HttpDaemon::HandleGet()+0x94>
 800df04:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800df08:	20c8      	movs	r0, #200	; 0xc8
 800df0a:	bd70      	pop	{r4, r5, r6, pc}
 800df0c:	4628      	mov	r0, r5
 800df0e:	493b      	ldr	r1, [pc, #236]	; (800dffc <HttpDaemon::HandleGet()+0x124>)
 800df10:	f7ff fe81 	bl	800dc16 <strcmp>
 800df14:	b928      	cbnz	r0, 800df22 <HttpDaemon::HandleGet()+0x4a>
 800df16:	4621      	mov	r1, r4
 800df18:	4b39      	ldr	r3, [pc, #228]	; (800e000 <HttpDaemon::HandleGet()+0x128>)
 800df1a:	483a      	ldr	r0, [pc, #232]	; (800e004 <HttpDaemon::HandleGet()+0x12c>)
 800df1c:	f841 3b22 	str.w	r3, [r1], #34
 800df20:	e7ec      	b.n	800defc <HttpDaemon::HandleGet()+0x24>
 800df22:	4628      	mov	r0, r5
 800df24:	4938      	ldr	r1, [pc, #224]	; (800e008 <HttpDaemon::HandleGet()+0x130>)
 800df26:	f7ff fe76 	bl	800dc16 <strcmp>
 800df2a:	b198      	cbz	r0, 800df54 <HttpDaemon::HandleGet()+0x7c>
 800df2c:	4a37      	ldr	r2, [pc, #220]	; (800e00c <HttpDaemon::HandleGet()+0x134>)
 800df2e:	1e6b      	subs	r3, r5, #1
 800df30:	1d69      	adds	r1, r5, #5
 800df32:	428b      	cmp	r3, r1
 800df34:	d114      	bne.n	800df60 <HttpDaemon::HandleGet()+0x88>
 800df36:	4b36      	ldr	r3, [pc, #216]	; (800e010 <HttpDaemon::HandleGet()+0x138>)
 800df38:	3506      	adds	r5, #6
 800df3a:	4628      	mov	r0, r5
 800df3c:	4935      	ldr	r1, [pc, #212]	; (800e014 <HttpDaemon::HandleGet()+0x13c>)
 800df3e:	6023      	str	r3, [r4, #0]
 800df40:	f7ff fe69 	bl	800dc16 <strcmp>
 800df44:	b9a8      	cbnz	r0, 800df72 <HttpDaemon::HandleGet()+0x9a>
 800df46:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800df4a:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800df4e:	f000 f9d9 	bl	800e304 <remoteconfig::json_get_list(char*, unsigned short)>
 800df52:	e7d5      	b.n	800df00 <HttpDaemon::HandleGet()+0x28>
 800df54:	4621      	mov	r1, r4
 800df56:	4b30      	ldr	r3, [pc, #192]	; (800e018 <HttpDaemon::HandleGet()+0x140>)
 800df58:	4830      	ldr	r0, [pc, #192]	; (800e01c <HttpDaemon::HandleGet()+0x144>)
 800df5a:	f841 3b22 	str.w	r3, [r1], #34
 800df5e:	e7cd      	b.n	800defc <HttpDaemon::HandleGet()+0x24>
 800df60:	f812 0b01 	ldrb.w	r0, [r2], #1
 800df64:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800df68:	4286      	cmp	r6, r0
 800df6a:	d0e2      	beq.n	800df32 <HttpDaemon::HandleGet()+0x5a>
 800df6c:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800df70:	e7cb      	b.n	800df0a <HttpDaemon::HandleGet()+0x32>
 800df72:	4628      	mov	r0, r5
 800df74:	492a      	ldr	r1, [pc, #168]	; (800e020 <HttpDaemon::HandleGet()+0x148>)
 800df76:	f7ff fe4e 	bl	800dc16 <strcmp>
 800df7a:	b930      	cbnz	r0, 800df8a <HttpDaemon::HandleGet()+0xb2>
 800df7c:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800df80:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800df84:	f000 f9f2 	bl	800e36c <remoteconfig::json_get_version(char*, unsigned short)>
 800df88:	e7ba      	b.n	800df00 <HttpDaemon::HandleGet()+0x28>
 800df8a:	4628      	mov	r0, r5
 800df8c:	4925      	ldr	r1, [pc, #148]	; (800e024 <HttpDaemon::HandleGet()+0x14c>)
 800df8e:	f7ff fe42 	bl	800dc16 <strcmp>
 800df92:	b958      	cbnz	r0, 800dfac <HttpDaemon::HandleGet()+0xd4>
 800df94:	4b24      	ldr	r3, [pc, #144]	; (800e028 <HttpDaemon::HandleGet()+0x150>)
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f893 35d7 	ldrb.w	r3, [r3, #1495]	; 0x5d7
 800df9c:	b31b      	cbz	r3, 800dfe6 <HttpDaemon::HandleGet()+0x10e>
 800df9e:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800dfa2:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800dfa6:	f000 f9fd 	bl	800e3a4 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800dfaa:	e7a9      	b.n	800df00 <HttpDaemon::HandleGet()+0x28>
 800dfac:	4628      	mov	r0, r5
 800dfae:	491f      	ldr	r1, [pc, #124]	; (800e02c <HttpDaemon::HandleGet()+0x154>)
 800dfb0:	f7ff fe31 	bl	800dc16 <strcmp>
 800dfb4:	b930      	cbnz	r0, 800dfc4 <HttpDaemon::HandleGet()+0xec>
 800dfb6:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800dfba:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800dfbe:	f000 fa01 	bl	800e3c4 <remoteconfig::json_get_display(char*, unsigned short)>
 800dfc2:	e79d      	b.n	800df00 <HttpDaemon::HandleGet()+0x28>
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	491a      	ldr	r1, [pc, #104]	; (800e030 <HttpDaemon::HandleGet()+0x158>)
 800dfc8:	f7ff fe25 	bl	800dc16 <strcmp>
 800dfcc:	b930      	cbnz	r0, 800dfdc <HttpDaemon::HandleGet()+0x104>
 800dfce:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800dfd2:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800dfd6:	f000 fa05 	bl	800e3e4 <remoteconfig::json_get_directory(char*, unsigned short)>
 800dfda:	e791      	b.n	800df00 <HttpDaemon::HandleGet()+0x28>
 800dfdc:	4620      	mov	r0, r4
 800dfde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfe2:	f7ff bf37 	b.w	800de54 <HttpDaemon::HandleGetTxt()>
 800dfe6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800dfea:	e78e      	b.n	800df0a <HttpDaemon::HandleGet()+0x32>
 800dfec:	08015c12 	stmdaeq	r1, {r1, r4, sl, fp, ip, lr}
 800dff0:	08015beb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, fp, ip, lr}
 800dff4:	08015dfe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 800dff8:	08015bec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
 800dffc:	08015bf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, fp, ip, lr}
 800e000:	08015e1e 	stmdaeq	r1, {r1, r2, r3, r4, r9, sl, fp, ip, lr}
 800e004:	08015bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
 800e008:	08015c03 	stmdaeq	r1, {r0, r1, sl, fp, ip, lr}
 800e00c:	08015c0d 	stmdaeq	r1, {r0, r2, r3, sl, fp, ip, lr}
 800e010:	08015e5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, sl, fp, ip, lr}
 800e014:	08015c14 	stmdaeq	r1, {r2, r4, sl, fp, ip, lr}
 800e018:	08015e3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r9, sl, fp, ip, lr}
 800e01c:	08015c04 	stmdaeq	r1, {r2, sl, fp, ip, lr}
 800e020:	08015c19 	stmdaeq	r1, {r0, r3, r4, sl, fp, ip, lr}
 800e024:	08015c21 	stmdaeq	r1, {r0, r5, sl, fp, ip, lr}
 800e028:	20000ca0 	andcs	r0, r0, r0, lsr #25
 800e02c:	08015c28 	stmdaeq	r1, {r3, r5, sl, fp, ip, lr}
 800e030:	08015c30 	stmdaeq	r1, {r4, r5, sl, fp, ip, lr}

0800e034 <HttpDaemon::HandlePost(bool)>:
 800e034:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e036:	4604      	mov	r4, r0
 800e038:	2900      	cmp	r1, #0
 800e03a:	f040 8091 	bne.w	800e160 <HttpDaemon::HandlePost(bool)+0x12c>
 800e03e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d05d      	beq.n	800e102 <HttpDaemon::HandlePost(bool)+0xce>
 800e046:	6845      	ldr	r5, [r0, #4]
 800e048:	4948      	ldr	r1, [pc, #288]	; (800e16c <HttpDaemon::HandlePost(bool)+0x138>)
 800e04a:	4628      	mov	r0, r5
 800e04c:	f7ff fde3 	bl	800dc16 <strcmp>
 800e050:	2800      	cmp	r0, #0
 800e052:	bf0c      	ite	eq
 800e054:	2301      	moveq	r3, #1
 800e056:	2300      	movne	r3, #0
 800e058:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800e05c:	d055      	beq.n	800e10a <HttpDaemon::HandlePost(bool)+0xd6>
 800e05e:	4628      	mov	r0, r5
 800e060:	4943      	ldr	r1, [pc, #268]	; (800e170 <HttpDaemon::HandlePost(bool)+0x13c>)
 800e062:	f7ff fdd8 	bl	800dc16 <strcmp>
 800e066:	2800      	cmp	r0, #0
 800e068:	d04f      	beq.n	800e10a <HttpDaemon::HandlePost(bool)+0xd6>
 800e06a:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800e06e:	e04a      	b.n	800e106 <HttpDaemon::HandlePost(bool)+0xd2>
 800e070:	4940      	ldr	r1, [pc, #256]	; (800e174 <HttpDaemon::HandlePost(bool)+0x140>)
 800e072:	68a0      	ldr	r0, [r4, #8]
 800e074:	f10d 0207 	add.w	r2, sp, #7
 800e078:	f003 fefa 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e07c:	b9e8      	cbnz	r0, 800e0ba <HttpDaemon::HandlePost(bool)+0x86>
 800e07e:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800e082:	4b3d      	ldr	r3, [pc, #244]	; (800e178 <HttpDaemon::HandlePost(bool)+0x144>)
 800e084:	fab6 f186 	clz	r1, r6
 800e088:	681d      	ldr	r5, [r3, #0]
 800e08a:	0949      	lsrs	r1, r1, #5
 800e08c:	69a8      	ldr	r0, [r5, #24]
 800e08e:	b138      	cbz	r0, 800e0a0 <HttpDaemon::HandlePost(bool)+0x6c>
 800e090:	6803      	ldr	r3, [r0, #0]
 800e092:	7429      	strb	r1, [r5, #16]
 800e094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e096:	4798      	blx	r3
 800e098:	b116      	cbz	r6, 800e0a0 <HttpDaemon::HandlePost(bool)+0x6c>
 800e09a:	4b38      	ldr	r3, [pc, #224]	; (800e17c <HttpDaemon::HandlePost(bool)+0x148>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	606b      	str	r3, [r5, #4]
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	4b37      	ldr	r3, [pc, #220]	; (800e180 <HttpDaemon::HandlePost(bool)+0x14c>)
 800e0a4:	f240 519f 	movw	r1, #1439	; 0x59f
 800e0a8:	4a36      	ldr	r2, [pc, #216]	; (800e184 <HttpDaemon::HandlePost(bool)+0x150>)
 800e0aa:	f840 3b22 	str.w	r3, [r0], #34
 800e0ae:	f004 fe79 	bl	8012da4 <snprintf>
 800e0b2:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800e0b6:	20c8      	movs	r0, #200	; 0xc8
 800e0b8:	e025      	b.n	800e106 <HttpDaemon::HandlePost(bool)+0xd2>
 800e0ba:	4933      	ldr	r1, [pc, #204]	; (800e188 <HttpDaemon::HandlePost(bool)+0x154>)
 800e0bc:	68a0      	ldr	r0, [r4, #8]
 800e0be:	f10d 0207 	add.w	r2, sp, #7
 800e0c2:	f003 fed5 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e0c6:	b9e0      	cbnz	r0, 800e102 <HttpDaemon::HandlePost(bool)+0xce>
 800e0c8:	4b30      	ldr	r3, [pc, #192]	; (800e18c <HttpDaemon::HandlePost(bool)+0x158>)
 800e0ca:	6818      	ldr	r0, [r3, #0]
 800e0cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e0d0:	b11b      	cbz	r3, 800e0da <HttpDaemon::HandlePost(bool)+0xa6>
 800e0d2:	2104      	movs	r1, #4
 800e0d4:	f004 fa66 	bl	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 800e0d8:	e7e2      	b.n	800e0a0 <HttpDaemon::HandlePost(bool)+0x6c>
 800e0da:	2102      	movs	r1, #2
 800e0dc:	e7fa      	b.n	800e0d4 <HttpDaemon::HandlePost(bool)+0xa0>
 800e0de:	4b2c      	ldr	r3, [pc, #176]	; (800e190 <HttpDaemon::HandlePost(bool)+0x15c>)
 800e0e0:	2001      	movs	r0, #1
 800e0e2:	781d      	ldrb	r5, [r3, #0]
 800e0e4:	f7ff fdbe 	bl	800dc64 <PropertiesConfig::EnableJSON(bool)>
 800e0e8:	4b2a      	ldr	r3, [pc, #168]	; (800e194 <HttpDaemon::HandlePost(bool)+0x160>)
 800e0ea:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 800e0ee:	6818      	ldr	r0, [r3, #0]
 800e0f0:	68a1      	ldr	r1, [r4, #8]
 800e0f2:	f005 0501 	and.w	r5, r5, #1
 800e0f6:	f7ff fa11 	bl	800d51c <RemoteConfig::HandleSet(void*, unsigned int)>
 800e0fa:	4628      	mov	r0, r5
 800e0fc:	f7ff fdb2 	bl	800dc64 <PropertiesConfig::EnableJSON(bool)>
 800e100:	e7ce      	b.n	800e0a0 <HttpDaemon::HandlePost(bool)+0x6c>
 800e102:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e106:	b002      	add	sp, #8
 800e108:	bd70      	pop	{r4, r5, r6, pc}
 800e10a:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 800e10e:	6962      	ldr	r2, [r4, #20]
 800e110:	429a      	cmp	r2, r3
 800e112:	dbd0      	blt.n	800e0b6 <HttpDaemon::HandlePost(bool)+0x82>
 800e114:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d0cc      	beq.n	800e0b6 <HttpDaemon::HandlePost(bool)+0x82>
 800e11c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800e120:	2b00      	cmp	r3, #0
 800e122:	d0dc      	beq.n	800e0de <HttpDaemon::HandlePost(bool)+0xaa>
 800e124:	2201      	movs	r2, #1
 800e126:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 800e12a:	68a0      	ldr	r0, [r4, #8]
 800e12c:	f003 fc44 	bl	80119b8 <properties::convert_json_file(char*, unsigned short, bool)>
 800e130:	2800      	cmp	r0, #0
 800e132:	dde6      	ble.n	800e102 <HttpDaemon::HandlePost(bool)+0xce>
 800e134:	4918      	ldr	r1, [pc, #96]	; (800e198 <HttpDaemon::HandlePost(bool)+0x164>)
 800e136:	68a0      	ldr	r0, [r4, #8]
 800e138:	f10d 0207 	add.w	r2, sp, #7
 800e13c:	f003 fe98 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e140:	2800      	cmp	r0, #0
 800e142:	d195      	bne.n	800e070 <HttpDaemon::HandlePost(bool)+0x3c>
 800e144:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d0a9      	beq.n	800e0a0 <HttpDaemon::HandlePost(bool)+0x6c>
 800e14c:	4b11      	ldr	r3, [pc, #68]	; (800e194 <HttpDaemon::HandlePost(bool)+0x160>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f893 35d6 	ldrb.w	r3, [r3, #1494]	; 0x5d6
 800e154:	2b00      	cmp	r3, #0
 800e156:	d0d4      	beq.n	800e102 <HttpDaemon::HandlePost(bool)+0xce>
 800e158:	4b10      	ldr	r3, [pc, #64]	; (800e19c <HttpDaemon::HandlePost(bool)+0x168>)
 800e15a:	6818      	ldr	r0, [r3, #0]
 800e15c:	f004 fac8 	bl	80126f0 <Hardware::Reboot()>
 800e160:	68c3      	ldr	r3, [r0, #12]
 800e162:	6083      	str	r3, [r0, #8]
 800e164:	6943      	ldr	r3, [r0, #20]
 800e166:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 800e16a:	e7d7      	b.n	800e11c <HttpDaemon::HandlePost(bool)+0xe8>
 800e16c:	08015c3a 	stmdaeq	r1, {r1, r3, r4, r5, sl, fp, ip, lr}
 800e170:	08015bd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, r9, fp, ip, lr}
 800e174:	08015c28 	stmdaeq	r1, {r3, r5, sl, fp, ip, lr}
 800e178:	20009bf8 	strdcs	r9, [r0], -r8
 800e17c:	20009d04 	andcs	r9, r0, r4, lsl #26
 800e180:	08015dfe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 800e184:	08015c57 	stmdaeq	r1, {r0, r1, r2, r4, r6, sl, fp, ip, lr}
 800e188:	08015c4e 	stmdaeq	r1, {r1, r2, r3, r6, sl, fp, ip, lr}
 800e18c:	20009ce4 	andcs	r9, r0, r4, ror #25
 800e190:	20009bf4 	strdcs	r9, [r0], -r4
 800e194:	20000ca0 	andcs	r0, r0, r0, lsr #25
 800e198:	08015c47 	stmdaeq	r1, {r0, r1, r2, r6, sl, fp, ip, lr}
 800e19c:	20009ce8 	andcs	r9, r0, r8, ror #25

0800e1a0 <HttpDaemon::Run()>:
 800e1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1a2:	4e4a      	ldr	r6, [pc, #296]	; (800e2cc <HttpDaemon::Run()+0x12c>)
 800e1a4:	4604      	mov	r4, r0
 800e1a6:	6901      	ldr	r1, [r0, #16]
 800e1a8:	f100 020c 	add.w	r2, r0, #12
 800e1ac:	b085      	sub	sp, #20
 800e1ae:	6830      	ldr	r0, [r6, #0]
 800e1b0:	f002 f98f 	bl	80104d2 <Network::TcpRead(int, unsigned char const**)>
 800e1b4:	6160      	str	r0, [r4, #20]
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	d061      	beq.n	800e27e <HttpDaemon::Run()+0xde>
 800e1ba:	69a3      	ldr	r3, [r4, #24]
 800e1bc:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800e1c0:	d15f      	bne.n	800e282 <HttpDaemon::Run()+0xe2>
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f7ff fe0e 	bl	800dde4 <HttpDaemon::ParseRequest()>
 800e1c8:	28c8      	cmp	r0, #200	; 0xc8
 800e1ca:	61a0      	str	r0, [r4, #24]
 800e1cc:	d106      	bne.n	800e1dc <HttpDaemon::Run()+0x3c>
 800e1ce:	69e3      	ldr	r3, [r4, #28]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d147      	bne.n	800e264 <HttpDaemon::Run()+0xc4>
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	f7ff fe7f 	bl	800ded8 <HttpDaemon::HandleGet()>
 800e1da:	61a0      	str	r0, [r4, #24]
 800e1dc:	69a3      	ldr	r3, [r4, #24]
 800e1de:	f104 0722 	add.w	r7, r4, #34	; 0x22
 800e1e2:	2bc8      	cmp	r3, #200	; 0xc8
 800e1e4:	d06f      	beq.n	800e2c6 <HttpDaemon::Run()+0x126>
 800e1e6:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800e1ea:	d062      	beq.n	800e2b2 <HttpDaemon::Run()+0x112>
 800e1ec:	dc52      	bgt.n	800e294 <HttpDaemon::Run()+0xf4>
 800e1ee:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800e1f2:	d060      	beq.n	800e2b6 <HttpDaemon::Run()+0x116>
 800e1f4:	f240 129d 	movw	r2, #413	; 0x19d
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d05e      	beq.n	800e2ba <HttpDaemon::Run()+0x11a>
 800e1fc:	4d34      	ldr	r5, [pc, #208]	; (800e2d0 <HttpDaemon::Run()+0x130>)
 800e1fe:	4a35      	ldr	r2, [pc, #212]	; (800e2d4 <HttpDaemon::Run()+0x134>)
 800e200:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e204:	bf18      	it	ne
 800e206:	4615      	movne	r5, r2
 800e208:	4a33      	ldr	r2, [pc, #204]	; (800e2d8 <HttpDaemon::Run()+0x138>)
 800e20a:	f240 519f 	movw	r1, #1439	; 0x59f
 800e20e:	6022      	str	r2, [r4, #0]
 800e210:	4638      	mov	r0, r7
 800e212:	e9cd 5500 	strd	r5, r5, [sp]
 800e216:	4a31      	ldr	r2, [pc, #196]	; (800e2dc <HttpDaemon::Run()+0x13c>)
 800e218:	f004 fdc4 	bl	8012da4 <snprintf>
 800e21c:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800e220:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800e224:	f240 519f 	movw	r1, #1439	; 0x59f
 800e228:	9303      	str	r3, [sp, #12]
 800e22a:	6823      	ldr	r3, [r4, #0]
 800e22c:	4a2c      	ldr	r2, [pc, #176]	; (800e2e0 <HttpDaemon::Run()+0x140>)
 800e22e:	9302      	str	r3, [sp, #8]
 800e230:	4b2c      	ldr	r3, [pc, #176]	; (800e2e4 <HttpDaemon::Run()+0x144>)
 800e232:	68e0      	ldr	r0, [r4, #12]
 800e234:	e9cd 5300 	strd	r5, r3, [sp]
 800e238:	69a3      	ldr	r3, [r4, #24]
 800e23a:	f004 fdb3 	bl	8012da4 <snprintf>
 800e23e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800e242:	b283      	uxth	r3, r0
 800e244:	6830      	ldr	r0, [r6, #0]
 800e246:	f002 f948 	bl	80104da <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800e24a:	463a      	mov	r2, r7
 800e24c:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800e250:	6921      	ldr	r1, [r4, #16]
 800e252:	6830      	ldr	r0, [r6, #0]
 800e254:	f002 f941 	bl	80104da <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800e258:	f44f 7202 	mov.w	r2, #520	; 0x208
 800e25c:	2302      	movs	r3, #2
 800e25e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800e262:	e00c      	b.n	800e27e <HttpDaemon::Run()+0xde>
 800e264:	2b01      	cmp	r3, #1
 800e266:	d1b9      	bne.n	800e1dc <HttpDaemon::Run()+0x3c>
 800e268:	2100      	movs	r1, #0
 800e26a:	4620      	mov	r0, r4
 800e26c:	f7ff fee2 	bl	800e034 <HttpDaemon::HandlePost(bool)>
 800e270:	28c8      	cmp	r0, #200	; 0xc8
 800e272:	61a0      	str	r0, [r4, #24]
 800e274:	d1b2      	bne.n	800e1dc <HttpDaemon::Run()+0x3c>
 800e276:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1ae      	bne.n	800e1dc <HttpDaemon::Run()+0x3c>
 800e27e:	b005      	add	sp, #20
 800e280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e282:	2bc8      	cmp	r3, #200	; 0xc8
 800e284:	d1aa      	bne.n	800e1dc <HttpDaemon::Run()+0x3c>
 800e286:	69e1      	ldr	r1, [r4, #28]
 800e288:	2901      	cmp	r1, #1
 800e28a:	d1a7      	bne.n	800e1dc <HttpDaemon::Run()+0x3c>
 800e28c:	4620      	mov	r0, r4
 800e28e:	f7ff fed1 	bl	800e034 <HttpDaemon::HandlePost(bool)>
 800e292:	e7a2      	b.n	800e1da <HttpDaemon::Run()+0x3a>
 800e294:	f240 12f5 	movw	r2, #501	; 0x1f5
 800e298:	4293      	cmp	r3, r2
 800e29a:	d010      	beq.n	800e2be <HttpDaemon::Run()+0x11e>
 800e29c:	f240 12f9 	movw	r2, #505	; 0x1f9
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d00e      	beq.n	800e2c2 <HttpDaemon::Run()+0x122>
 800e2a4:	4d10      	ldr	r5, [pc, #64]	; (800e2e8 <HttpDaemon::Run()+0x148>)
 800e2a6:	4a0b      	ldr	r2, [pc, #44]	; (800e2d4 <HttpDaemon::Run()+0x134>)
 800e2a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e2ac:	bf18      	it	ne
 800e2ae:	4615      	movne	r5, r2
 800e2b0:	e7aa      	b.n	800e208 <HttpDaemon::Run()+0x68>
 800e2b2:	4d0e      	ldr	r5, [pc, #56]	; (800e2ec <HttpDaemon::Run()+0x14c>)
 800e2b4:	e7a8      	b.n	800e208 <HttpDaemon::Run()+0x68>
 800e2b6:	4d0e      	ldr	r5, [pc, #56]	; (800e2f0 <HttpDaemon::Run()+0x150>)
 800e2b8:	e7a6      	b.n	800e208 <HttpDaemon::Run()+0x68>
 800e2ba:	4d0e      	ldr	r5, [pc, #56]	; (800e2f4 <HttpDaemon::Run()+0x154>)
 800e2bc:	e7a4      	b.n	800e208 <HttpDaemon::Run()+0x68>
 800e2be:	4d0e      	ldr	r5, [pc, #56]	; (800e2f8 <HttpDaemon::Run()+0x158>)
 800e2c0:	e7a2      	b.n	800e208 <HttpDaemon::Run()+0x68>
 800e2c2:	4d0e      	ldr	r5, [pc, #56]	; (800e2fc <HttpDaemon::Run()+0x15c>)
 800e2c4:	e7a0      	b.n	800e208 <HttpDaemon::Run()+0x68>
 800e2c6:	4d0e      	ldr	r5, [pc, #56]	; (800e300 <HttpDaemon::Run()+0x160>)
 800e2c8:	e7aa      	b.n	800e220 <HttpDaemon::Run()+0x80>
 800e2ca:	bf00      	nop
 800e2cc:	200095c0 	andcs	r9, r0, r0, asr #11
 800e2d0:	08015cb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, sl, fp, ip, lr}
 800e2d4:	08015d3a 	stmdaeq	r1, {r1, r3, r4, r5, r8, sl, fp, ip, lr}
 800e2d8:	08015dfe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 800e2dc:	08015d4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, sl, fp, ip, lr}
 800e2e0:	08015da6 	stmdaeq	r1, {r1, r2, r5, r7, r8, sl, fp, ip, lr}
 800e2e4:	080151fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, ip, lr}
 800e2e8:	08015cf7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, sl, fp, ip, lr}
 800e2ec:	08015ce2 	stmdaeq	r1, {r1, r5, r6, r7, sl, fp, ip, lr}
 800e2f0:	08015cbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, sl, fp, ip, lr}
 800e2f4:	08015cc9 	stmdaeq	r1, {r0, r3, r6, r7, sl, fp, ip, lr}
 800e2f8:	08015d0d 	stmdaeq	r1, {r0, r2, r3, r8, sl, fp, ip, lr}
 800e2fc:	08015d24 	stmdaeq	r1, {r2, r5, r8, sl, fp, ip, lr}
 800e300:	08015d48 	stmdaeq	r1, {r3, r6, r8, sl, fp, ip, lr}

0800e304 <remoteconfig::json_get_list(char*, unsigned short)>:
 800e304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e308:	4b14      	ldr	r3, [pc, #80]	; (800e35c <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800e30a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800e360 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	b088      	sub	sp, #32
 800e312:	4605      	mov	r5, r0
 800e314:	f8d8 0000 	ldr.w	r0, [r8]
 800e318:	691c      	ldr	r4, [r3, #16]
 800e31a:	460e      	mov	r6, r1
 800e31c:	f7fe ffd8 	bl	800d2d0 <RemoteConfig::GetStringNode() const>
 800e320:	4607      	mov	r7, r0
 800e322:	f8d8 0000 	ldr.w	r0, [r8]
 800e326:	f7fe ffdf 	bl	800d2e8 <RemoteConfig::GetStringOutput() const>
 800e32a:	4b0e      	ldr	r3, [pc, #56]	; (800e364 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 800e32c:	4631      	mov	r1, r6
 800e32e:	7a1a      	ldrb	r2, [r3, #8]
 800e330:	3309      	adds	r3, #9
 800e332:	9303      	str	r3, [sp, #12]
 800e334:	0e23      	lsrs	r3, r4, #24
 800e336:	9302      	str	r3, [sp, #8]
 800e338:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800e33c:	9301      	str	r3, [sp, #4]
 800e33e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800e342:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	4628      	mov	r0, r5
 800e34a:	4a07      	ldr	r2, [pc, #28]	; (800e368 <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 800e34c:	9704      	str	r7, [sp, #16]
 800e34e:	b2e3      	uxtb	r3, r4
 800e350:	f004 fd28 	bl	8012da4 <snprintf>
 800e354:	b280      	uxth	r0, r0
 800e356:	b008      	add	sp, #32
 800e358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e35c:	200095c0 	andcs	r9, r0, r0, asr #11
 800e360:	20000ca0 	andcs	r0, r0, r0, lsr #25
 800e364:	20000c7c 	andcs	r0, r0, ip, ror ip
 800e368:	08015ed8 	stmdaeq	r1, {r3, r4, r6, r7, r9, sl, fp, ip, lr}

0800e36c <remoteconfig::json_get_version(char*, unsigned short)>:
 800e36c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e36e:	2208      	movs	r2, #8
 800e370:	4b09      	ldr	r3, [pc, #36]	; (800e398 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800e372:	9204      	str	r2, [sp, #16]
 800e374:	f1a3 020b 	sub.w	r2, r3, #11
 800e378:	9203      	str	r2, [sp, #12]
 800e37a:	220b      	movs	r2, #11
 800e37c:	9202      	str	r2, [sp, #8]
 800e37e:	4a07      	ldr	r2, [pc, #28]	; (800e39c <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800e380:	9305      	str	r3, [sp, #20]
 800e382:	3b0e      	subs	r3, #14
 800e384:	9201      	str	r2, [sp, #4]
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	4a05      	ldr	r2, [pc, #20]	; (800e3a0 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800e38a:	2303      	movs	r3, #3
 800e38c:	f004 fd0a 	bl	8012da4 <snprintf>
 800e390:	b280      	uxth	r0, r0
 800e392:	b007      	add	sp, #28
 800e394:	f85d fb04 	ldr.w	pc, [sp], #4
 800e398:	20009c96 	mulcs	r0, r6, ip
 800e39c:	080151fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, ip, lr}
 800e3a0:	08015f37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, r9, sl, fp, ip, lr}

0800e3a4 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800e3a4:	b508      	push	{r3, lr}
 800e3a6:	4b05      	ldr	r3, [pc, #20]	; (800e3bc <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b2:	4a03      	ldr	r2, [pc, #12]	; (800e3c0 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800e3b4:	f004 fcf6 	bl	8012da4 <snprintf>
 800e3b8:	b280      	uxth	r0, r0
 800e3ba:	bd08      	pop	{r3, pc}
 800e3bc:	20009d04 	andcs	r9, r0, r4, lsl #26
 800e3c0:	08015f7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}

0800e3c4 <remoteconfig::json_get_display(char*, unsigned short)>:
 800e3c4:	b508      	push	{r3, lr}
 800e3c6:	4b05      	ldr	r3, [pc, #20]	; (800e3dc <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800e3c8:	4a05      	ldr	r2, [pc, #20]	; (800e3e0 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	7c1b      	ldrb	r3, [r3, #16]
 800e3ce:	f083 0301 	eor.w	r3, r3, #1
 800e3d2:	f004 fce7 	bl	8012da4 <snprintf>
 800e3d6:	b280      	uxth	r0, r0
 800e3d8:	bd08      	pop	{r3, pc}
 800e3da:	bf00      	nop
 800e3dc:	20009bf8 	strdcs	r9, [r0], -r8
 800e3e0:	08015f8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, fp, ip, lr}

0800e3e4 <remoteconfig::json_get_directory(char*, unsigned short)>:
 800e3e4:	b508      	push	{r3, lr}
 800e3e6:	4a02      	ldr	r2, [pc, #8]	; (800e3f0 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800e3e8:	f004 fcdc 	bl	8012da4 <snprintf>
 800e3ec:	b280      	uxth	r0, r0
 800e3ee:	bd08      	pop	{r3, pc}
 800e3f0:	08015f9b 	stmdaeq	r1, {r0, r1, r3, r4, r7, r8, r9, sl, fp, ip, lr}

0800e3f4 <get_file_content(char const*, char*)>:
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3f8:	4a18      	ldr	r2, [pc, #96]	; (800e45c <get_file_content(char const*, char*)+0x68>)
 800e3fa:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800e3fe:	1e47      	subs	r7, r0, #1
 800e400:	1e6e      	subs	r6, r5, #1
 800e402:	f817 cf01 	ldrb.w	ip, [r7, #1]!
 800e406:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 800e40a:	4564      	cmp	r4, ip
 800e40c:	d00b      	beq.n	800e426 <get_file_content(char const*, char*)+0x32>
 800e40e:	3301      	adds	r3, #1
 800e410:	2b03      	cmp	r3, #3
 800e412:	d1f2      	bne.n	800e3fa <get_file_content(char const*, char*)+0x6>
 800e414:	2333      	movs	r3, #51	; 0x33
 800e416:	4a12      	ldr	r2, [pc, #72]	; (800e460 <get_file_content(char const*, char*)+0x6c>)
 800e418:	4912      	ldr	r1, [pc, #72]	; (800e464 <get_file_content(char const*, char*)+0x70>)
 800e41a:	4813      	ldr	r0, [pc, #76]	; (800e468 <get_file_content(char const*, char*)+0x74>)
 800e41c:	f004 fc9a 	bl	8012d54 <printf>
 800e420:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e424:	e016      	b.n	800e454 <get_file_content(char const*, char*)+0x60>
 800e426:	2c00      	cmp	r4, #0
 800e428:	d1eb      	bne.n	800e402 <get_file_content(char const*, char*)+0xe>
 800e42a:	460c      	mov	r4, r1
 800e42c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e430:	6853      	ldr	r3, [r2, #4]
 800e432:	3b01      	subs	r3, #1
 800e434:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e438:	f804 2b01 	strb.w	r2, [r4], #1
 800e43c:	2a00      	cmp	r2, #0
 800e43e:	d1f9      	bne.n	800e434 <get_file_content(char const*, char*)+0x40>
 800e440:	1a64      	subs	r4, r4, r1
 800e442:	3c01      	subs	r4, #1
 800e444:	232e      	movs	r3, #46	; 0x2e
 800e446:	e9cd 5400 	strd	r5, r4, [sp]
 800e44a:	4a06      	ldr	r2, [pc, #24]	; (800e464 <get_file_content(char const*, char*)+0x70>)
 800e44c:	4904      	ldr	r1, [pc, #16]	; (800e460 <get_file_content(char const*, char*)+0x6c>)
 800e44e:	4807      	ldr	r0, [pc, #28]	; (800e46c <get_file_content(char const*, char*)+0x78>)
 800e450:	f004 fc80 	bl	8012d54 <printf>
 800e454:	4620      	mov	r0, r4
 800e456:	b003      	add	sp, #12
 800e458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e45a:	bf00      	nop
 800e45c:	08016338 	stmdaeq	r1, {r3, r4, r5, r8, r9, sp, lr}
 800e460:	08016052 	stmdaeq	r1, {r1, r4, r6, sp, lr}
 800e464:	08016033 	stmdaeq	r1, {r0, r1, r4, r5, sp, lr}
 800e468:	0801607f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, sp, lr}
 800e46c:	08016063 	stmdaeq	r1, {r0, r1, r5, r6, sp, lr}

0800e470 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800e470:	2300      	movs	r3, #0
 800e472:	2020      	movs	r0, #32
 800e474:	b510      	push	{r4, lr}
 800e476:	4a04      	ldr	r2, [pc, #16]	; (800e488 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800e478:	428b      	cmp	r3, r1
 800e47a:	d100      	bne.n	800e47e <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 800e47c:	bd10      	pop	{r4, pc}
 800e47e:	f852 4b04 	ldr.w	r4, [r2], #4
 800e482:	3301      	adds	r3, #1
 800e484:	4420      	add	r0, r4
 800e486:	e7f7      	b.n	800e478 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800e488:	0801687c 	stmdaeq	r1, {r2, r3, r4, r5, r6, fp, sp, lr}

0800e48c <SpiFlashStore::Init()>:
 800e48c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e490:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800e5a8 <SpiFlashStore::Init()+0x11c>
 800e494:	4607      	mov	r7, r0
 800e496:	b085      	sub	sp, #20
 800e498:	f8d8 0000 	ldr.w	r0, [r8]
 800e49c:	f000 fc60 	bl	800ed60 <FlashRom::GetSectorSize() const>
 800e4a0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e4a4:	4605      	mov	r5, r0
 800e4a6:	d17d      	bne.n	800e5a4 <SpiFlashStore::Init()+0x118>
 800e4a8:	f8d8 0000 	ldr.w	r0, [r8]
 800e4ac:	f000 fc50 	bl	800ed50 <FlashRom::GetSize() const>
 800e4b0:	4b3e      	ldr	r3, [pc, #248]	; (800e5ac <SpiFlashStore::Init()+0x120>)
 800e4b2:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800e4b6:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800e4ba:	6019      	str	r1, [r3, #0]
 800e4bc:	2e00      	cmp	r6, #0
 800e4be:	d171      	bne.n	800e5a4 <SpiFlashStore::Init()+0x118>
 800e4c0:	4c3b      	ldr	r4, [pc, #236]	; (800e5b0 <SpiFlashStore::Init()+0x124>)
 800e4c2:	ab03      	add	r3, sp, #12
 800e4c4:	9300      	str	r3, [sp, #0]
 800e4c6:	462a      	mov	r2, r5
 800e4c8:	4623      	mov	r3, r4
 800e4ca:	f8d8 0000 	ldr.w	r0, [r8]
 800e4ce:	f000 fc4a 	bl	800ed66 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800e4d2:	7823      	ldrb	r3, [r4, #0]
 800e4d4:	2b41      	cmp	r3, #65	; 0x41
 800e4d6:	bf1c      	itt	ne
 800e4d8:	2341      	movne	r3, #65	; 0x41
 800e4da:	7023      	strbne	r3, [r4, #0]
 800e4dc:	7863      	ldrb	r3, [r4, #1]
 800e4de:	bf14      	ite	ne
 800e4e0:	4635      	movne	r5, r6
 800e4e2:	2501      	moveq	r5, #1
 800e4e4:	2b76      	cmp	r3, #118	; 0x76
 800e4e6:	bf1c      	itt	ne
 800e4e8:	2376      	movne	r3, #118	; 0x76
 800e4ea:	7063      	strbne	r3, [r4, #1]
 800e4ec:	78a3      	ldrb	r3, [r4, #2]
 800e4ee:	bf18      	it	ne
 800e4f0:	2500      	movne	r5, #0
 800e4f2:	2b56      	cmp	r3, #86	; 0x56
 800e4f4:	bf1c      	itt	ne
 800e4f6:	2356      	movne	r3, #86	; 0x56
 800e4f8:	70a3      	strbne	r3, [r4, #2]
 800e4fa:	78e3      	ldrb	r3, [r4, #3]
 800e4fc:	bf18      	it	ne
 800e4fe:	2500      	movne	r5, #0
 800e500:	2b10      	cmp	r3, #16
 800e502:	d022      	beq.n	800e54a <SpiFlashStore::Init()+0xbe>
 800e504:	2310      	movs	r3, #16
 800e506:	70e3      	strb	r3, [r4, #3]
 800e508:	2201      	movs	r2, #1
 800e50a:	2500      	movs	r5, #0
 800e50c:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800e510:	4b28      	ldr	r3, [pc, #160]	; (800e5b4 <SpiFlashStore::Init()+0x128>)
 800e512:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800e5b8 <SpiFlashStore::Init()+0x12c>
 800e516:	701a      	strb	r2, [r3, #0]
 800e518:	4631      	mov	r1, r6
 800e51a:	4638      	mov	r0, r7
 800e51c:	f7ff ffa8 	bl	800e470 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e520:	1823      	adds	r3, r4, r0
 800e522:	5425      	strb	r5, [r4, r0]
 800e524:	705d      	strb	r5, [r3, #1]
 800e526:	709d      	strb	r5, [r3, #2]
 800e528:	70dd      	strb	r5, [r3, #3]
 800e52a:	f858 3b04 	ldr.w	r3, [r8], #4
 800e52e:	1d02      	adds	r2, r0, #4
 800e530:	4403      	add	r3, r0
 800e532:	429a      	cmp	r2, r3
 800e534:	d332      	bcc.n	800e59c <SpiFlashStore::Init()+0x110>
 800e536:	3601      	adds	r6, #1
 800e538:	2e1c      	cmp	r6, #28
 800e53a:	d1ed      	bne.n	800e518 <SpiFlashStore::Init()+0x8c>
 800e53c:	2501      	movs	r5, #1
 800e53e:	4b1f      	ldr	r3, [pc, #124]	; (800e5bc <SpiFlashStore::Init()+0x130>)
 800e540:	601d      	str	r5, [r3, #0]
 800e542:	4628      	mov	r0, r5
 800e544:	b005      	add	sp, #20
 800e546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e54a:	2d00      	cmp	r5, #0
 800e54c:	d0dc      	beq.n	800e508 <SpiFlashStore::Init()+0x7c>
 800e54e:	f04f 0900 	mov.w	r9, #0
 800e552:	46c8      	mov	r8, r9
 800e554:	4631      	mov	r1, r6
 800e556:	4638      	mov	r0, r7
 800e558:	f7ff ff8a 	bl	800e470 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e55c:	5c23      	ldrb	r3, [r4, r0]
 800e55e:	2bff      	cmp	r3, #255	; 0xff
 800e560:	d112      	bne.n	800e588 <SpiFlashStore::Init()+0xfc>
 800e562:	1823      	adds	r3, r4, r0
 800e564:	785a      	ldrb	r2, [r3, #1]
 800e566:	2aff      	cmp	r2, #255	; 0xff
 800e568:	d10e      	bne.n	800e588 <SpiFlashStore::Init()+0xfc>
 800e56a:	789a      	ldrb	r2, [r3, #2]
 800e56c:	2aff      	cmp	r2, #255	; 0xff
 800e56e:	d10b      	bne.n	800e588 <SpiFlashStore::Init()+0xfc>
 800e570:	78da      	ldrb	r2, [r3, #3]
 800e572:	2aff      	cmp	r2, #255	; 0xff
 800e574:	d108      	bne.n	800e588 <SpiFlashStore::Init()+0xfc>
 800e576:	46a9      	mov	r9, r5
 800e578:	f804 8000 	strb.w	r8, [r4, r0]
 800e57c:	f883 8001 	strb.w	r8, [r3, #1]
 800e580:	f883 8002 	strb.w	r8, [r3, #2]
 800e584:	f883 8003 	strb.w	r8, [r3, #3]
 800e588:	3601      	adds	r6, #1
 800e58a:	2e1c      	cmp	r6, #28
 800e58c:	d1e2      	bne.n	800e554 <SpiFlashStore::Init()+0xc8>
 800e58e:	f1b9 0f00 	cmp.w	r9, #0
 800e592:	d0d6      	beq.n	800e542 <SpiFlashStore::Init()+0xb6>
 800e594:	2201      	movs	r2, #1
 800e596:	4b09      	ldr	r3, [pc, #36]	; (800e5bc <SpiFlashStore::Init()+0x130>)
 800e598:	601a      	str	r2, [r3, #0]
 800e59a:	e7d2      	b.n	800e542 <SpiFlashStore::Init()+0xb6>
 800e59c:	f804 9002 	strb.w	r9, [r4, r2]
 800e5a0:	3201      	adds	r2, #1
 800e5a2:	e7c6      	b.n	800e532 <SpiFlashStore::Init()+0xa6>
 800e5a4:	2500      	movs	r5, #0
 800e5a6:	e7cc      	b.n	800e542 <SpiFlashStore::Init()+0xb6>
 800e5a8:	20001cd8 	ldrdcs	r1, [r0], -r8
 800e5ac:	20001ca8 	andcs	r1, r0, r8, lsr #25
 800e5b0:	20000ca8 	andcs	r0, r0, r8, lsr #25
 800e5b4:	20001cbc 			; <UNDEFINED> instruction: 0x20001cbc
 800e5b8:	0801687c 	stmdaeq	r1, {r2, r3, r4, r5, r6, fp, sp, lr}
 800e5bc:	20001cb4 			; <UNDEFINED> instruction: 0x20001cb4

0800e5c0 <SpiFlashStore::SpiFlashStore()>:
 800e5c0:	b538      	push	{r3, r4, r5, lr}
 800e5c2:	4b0d      	ldr	r3, [pc, #52]	; (800e5f8 <SpiFlashStore::SpiFlashStore()+0x38>)
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	6018      	str	r0, [r3, #0]
 800e5c8:	4b0c      	ldr	r3, [pc, #48]	; (800e5fc <SpiFlashStore::SpiFlashStore()+0x3c>)
 800e5ca:	4d0d      	ldr	r5, [pc, #52]	; (800e600 <SpiFlashStore::SpiFlashStore()+0x40>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	b113      	cbz	r3, 800e5d8 <SpiFlashStore::SpiFlashStore()+0x18>
 800e5d2:	f7ff ff5b 	bl	800e48c <SpiFlashStore::Init()>
 800e5d6:	7028      	strb	r0, [r5, #0]
 800e5d8:	782b      	ldrb	r3, [r5, #0]
 800e5da:	b153      	cbz	r3, 800e5f2 <SpiFlashStore::SpiFlashStore()+0x32>
 800e5dc:	2320      	movs	r3, #32
 800e5de:	2200      	movs	r2, #0
 800e5e0:	4908      	ldr	r1, [pc, #32]	; (800e604 <SpiFlashStore::SpiFlashStore()+0x44>)
 800e5e2:	f851 0b04 	ldr.w	r0, [r1], #4
 800e5e6:	3201      	adds	r2, #1
 800e5e8:	2a1c      	cmp	r2, #28
 800e5ea:	4403      	add	r3, r0
 800e5ec:	d1f9      	bne.n	800e5e2 <SpiFlashStore::SpiFlashStore()+0x22>
 800e5ee:	4a06      	ldr	r2, [pc, #24]	; (800e608 <SpiFlashStore::SpiFlashStore()+0x48>)
 800e5f0:	6013      	str	r3, [r2, #0]
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	bd38      	pop	{r3, r4, r5, pc}
 800e5f6:	bf00      	nop
 800e5f8:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8
 800e5fc:	20001cd8 	ldrdcs	r1, [r0], -r8
 800e600:	20001cac 	andcs	r1, r0, ip, lsr #25
 800e604:	0801687c 	stmdaeq	r1, {r2, r3, r4, r5, r6, fp, sp, lr}
 800e608:	20001cb0 			; <UNDEFINED> instruction: 0x20001cb0

0800e60c <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800e60c:	b508      	push	{r3, lr}
 800e60e:	f7ff ff2f 	bl	800e470 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e612:	2300      	movs	r3, #0
 800e614:	4904      	ldr	r1, [pc, #16]	; (800e628 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800e616:	1842      	adds	r2, r0, r1
 800e618:	540b      	strb	r3, [r1, r0]
 800e61a:	7053      	strb	r3, [r2, #1]
 800e61c:	7093      	strb	r3, [r2, #2]
 800e61e:	70d3      	strb	r3, [r2, #3]
 800e620:	2201      	movs	r2, #1
 800e622:	4b02      	ldr	r3, [pc, #8]	; (800e62c <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800e624:	601a      	str	r2, [r3, #0]
 800e626:	bd08      	pop	{r3, pc}
 800e628:	20000ca8 	andcs	r0, r0, r8, lsr #25
 800e62c:	20001cb4 			; <UNDEFINED> instruction: 0x20001cb4

0800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800e630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e634:	461c      	mov	r4, r3
 800e636:	4b19      	ldr	r3, [pc, #100]	; (800e69c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800e638:	4615      	mov	r5, r2
 800e63a:	781f      	ldrb	r7, [r3, #0]
 800e63c:	9e07      	ldr	r6, [sp, #28]
 800e63e:	b307      	cbz	r7, 800e682 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800e640:	f7ff ff16 	bl	800e470 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e644:	f04f 0c00 	mov.w	ip, #0
 800e648:	4a15      	ldr	r2, [pc, #84]	; (800e6a0 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800e64a:	1941      	adds	r1, r0, r5
 800e64c:	1e63      	subs	r3, r4, #1
 800e64e:	9c06      	ldr	r4, [sp, #24]
 800e650:	4411      	add	r1, r2
 800e652:	440c      	add	r4, r1
 800e654:	42a1      	cmp	r1, r4
 800e656:	d116      	bne.n	800e686 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 800e658:	f1bc 0f00 	cmp.w	ip, #0
 800e65c:	d011      	beq.n	800e682 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800e65e:	4b11      	ldr	r3, [pc, #68]	; (800e6a4 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800e660:	6819      	ldr	r1, [r3, #0]
 800e662:	b109      	cbz	r1, 800e668 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 800e664:	2906      	cmp	r1, #6
 800e666:	d101      	bne.n	800e66c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 800e668:	2101      	movs	r1, #1
 800e66a:	6019      	str	r1, [r3, #0]
 800e66c:	4b0e      	ldr	r3, [pc, #56]	; (800e6a8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800e66e:	6819      	ldr	r1, [r3, #0]
 800e670:	4b0e      	ldr	r3, [pc, #56]	; (800e6ac <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800e672:	6019      	str	r1, [r3, #0]
 800e674:	b12d      	cbz	r5, 800e682 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800e676:	b126      	cbz	r6, 800e682 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800e678:	9b08      	ldr	r3, [sp, #32]
 800e67a:	4418      	add	r0, r3
 800e67c:	5813      	ldr	r3, [r2, r0]
 800e67e:	4333      	orrs	r3, r6
 800e680:	5013      	str	r3, [r2, r0]
 800e682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e686:	f891 8000 	ldrb.w	r8, [r1]
 800e68a:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e68e:	3101      	adds	r1, #1
 800e690:	45f0      	cmp	r8, lr
 800e692:	bf1c      	itt	ne
 800e694:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800e698:	46bc      	movne	ip, r7
 800e69a:	e7db      	b.n	800e654 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800e69c:	20001cac 	andcs	r1, r0, ip, lsr #25
 800e6a0:	20000ca8 	andcs	r0, r0, r8, lsr #25
 800e6a4:	20001cb4 			; <UNDEFINED> instruction: 0x20001cb4
 800e6a8:	20009d04 	andcs	r9, r0, r4, lsl #26
 800e6ac:	20000ca4 	andcs	r0, r0, r4, lsr #25

0800e6b0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 800e6b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e6b4:	461d      	mov	r5, r3
 800e6b6:	4b11      	ldr	r3, [pc, #68]	; (800e6fc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x4c>)
 800e6b8:	4607      	mov	r7, r0
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	4614      	mov	r4, r2
 800e6be:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800e6c2:	b1c3      	cbz	r3, 800e6f6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 800e6c4:	f7ff fed4 	bl	800e470 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e6c8:	4a0d      	ldr	r2, [pc, #52]	; (800e700 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x50>)
 800e6ca:	eb00 0608 	add.w	r6, r0, r8
 800e6ce:	5990      	ldr	r0, [r2, r6]
 800e6d0:	18b3      	adds	r3, r6, r2
 800e6d2:	b140      	cbz	r0, 800e6e6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x36>
 800e6d4:	3c01      	subs	r4, #1
 800e6d6:	441d      	add	r5, r3
 800e6d8:	429d      	cmp	r5, r3
 800e6da:	d00c      	beq.n	800e6f6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x46>
 800e6dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6e0:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e6e4:	e7f8      	b.n	800e6d8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x28>
 800e6e6:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800e6ea:	4623      	mov	r3, r4
 800e6ec:	4642      	mov	r2, r8
 800e6ee:	4638      	mov	r0, r7
 800e6f0:	9500      	str	r5, [sp, #0]
 800e6f2:	f7ff ff9d 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e6f6:	b004      	add	sp, #16
 800e6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6fc:	20001cac 	andcs	r1, r0, ip, lsr #25
 800e700:	20000ca8 	andcs	r0, r0, r8, lsr #25

0800e704 <SpiFlashStore::Flash()>:
 800e704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e706:	4c25      	ldr	r4, [pc, #148]	; (800e79c <SpiFlashStore::Flash()+0x98>)
 800e708:	6820      	ldr	r0, [r4, #0]
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d043      	beq.n	800e796 <SpiFlashStore::Flash()+0x92>
 800e70e:	3801      	subs	r0, #1
 800e710:	2805      	cmp	r0, #5
 800e712:	d831      	bhi.n	800e778 <SpiFlashStore::Flash()+0x74>
 800e714:	e8df f000 	tbb	[pc, r0]
 800e718:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800e71c:	4b203025 	blmi	881a7b8 <__exidx_end+0x803440>
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	4b20      	ldr	r3, [pc, #128]	; (800e7a4 <SpiFlashStore::Flash()+0xa0>)
 800e724:	601a      	str	r2, [r3, #0]
 800e726:	2302      	movs	r3, #2
 800e728:	6023      	str	r3, [r4, #0]
 800e72a:	2001      	movs	r0, #1
 800e72c:	e033      	b.n	800e796 <SpiFlashStore::Flash()+0x92>
 800e72e:	4b1c      	ldr	r3, [pc, #112]	; (800e7a0 <SpiFlashStore::Flash()+0x9c>)
 800e730:	4a1c      	ldr	r2, [pc, #112]	; (800e7a4 <SpiFlashStore::Flash()+0xa0>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	6812      	ldr	r2, [r2, #0]
 800e736:	1a9b      	subs	r3, r3, r2
 800e738:	2b63      	cmp	r3, #99	; 0x63
 800e73a:	d9f6      	bls.n	800e72a <SpiFlashStore::Flash()+0x26>
 800e73c:	2303      	movs	r3, #3
 800e73e:	e7f3      	b.n	800e728 <SpiFlashStore::Flash()+0x24>
 800e740:	4919      	ldr	r1, [pc, #100]	; (800e7a8 <SpiFlashStore::Flash()+0xa4>)
 800e742:	481a      	ldr	r0, [pc, #104]	; (800e7ac <SpiFlashStore::Flash()+0xa8>)
 800e744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e748:	6809      	ldr	r1, [r1, #0]
 800e74a:	6800      	ldr	r0, [r0, #0]
 800e74c:	ab03      	add	r3, sp, #12
 800e74e:	f000 fb19 	bl	800ed84 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800e752:	2800      	cmp	r0, #0
 800e754:	d0e9      	beq.n	800e72a <SpiFlashStore::Flash()+0x26>
 800e756:	4b12      	ldr	r3, [pc, #72]	; (800e7a0 <SpiFlashStore::Flash()+0x9c>)
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	4b12      	ldr	r3, [pc, #72]	; (800e7a4 <SpiFlashStore::Flash()+0xa0>)
 800e75c:	601a      	str	r2, [r3, #0]
 800e75e:	2305      	movs	r3, #5
 800e760:	e7e2      	b.n	800e728 <SpiFlashStore::Flash()+0x24>
 800e762:	4b0f      	ldr	r3, [pc, #60]	; (800e7a0 <SpiFlashStore::Flash()+0x9c>)
 800e764:	4a0f      	ldr	r2, [pc, #60]	; (800e7a4 <SpiFlashStore::Flash()+0xa0>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	6812      	ldr	r2, [r2, #0]
 800e76a:	1a9b      	subs	r3, r3, r2
 800e76c:	2b63      	cmp	r3, #99	; 0x63
 800e76e:	d9dc      	bls.n	800e72a <SpiFlashStore::Flash()+0x26>
 800e770:	2304      	movs	r3, #4
 800e772:	e7d9      	b.n	800e728 <SpiFlashStore::Flash()+0x24>
 800e774:	2306      	movs	r3, #6
 800e776:	e7d7      	b.n	800e728 <SpiFlashStore::Flash()+0x24>
 800e778:	ab03      	add	r3, sp, #12
 800e77a:	4a0d      	ldr	r2, [pc, #52]	; (800e7b0 <SpiFlashStore::Flash()+0xac>)
 800e77c:	490a      	ldr	r1, [pc, #40]	; (800e7a8 <SpiFlashStore::Flash()+0xa4>)
 800e77e:	480b      	ldr	r0, [pc, #44]	; (800e7ac <SpiFlashStore::Flash()+0xa8>)
 800e780:	9300      	str	r3, [sp, #0]
 800e782:	6812      	ldr	r2, [r2, #0]
 800e784:	4b0b      	ldr	r3, [pc, #44]	; (800e7b4 <SpiFlashStore::Flash()+0xb0>)
 800e786:	6809      	ldr	r1, [r1, #0]
 800e788:	6800      	ldr	r0, [r0, #0]
 800e78a:	f000 fb9b 	bl	800eec4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800e78e:	2800      	cmp	r0, #0
 800e790:	d0cb      	beq.n	800e72a <SpiFlashStore::Flash()+0x26>
 800e792:	2000      	movs	r0, #0
 800e794:	6020      	str	r0, [r4, #0]
 800e796:	b004      	add	sp, #16
 800e798:	bd10      	pop	{r4, pc}
 800e79a:	bf00      	nop
 800e79c:	20001cb4 			; <UNDEFINED> instruction: 0x20001cb4
 800e7a0:	20009d04 	andcs	r9, r0, r4, lsl #26
 800e7a4:	20000ca4 	andcs	r0, r0, r4, lsr #25
 800e7a8:	20001ca8 	andcs	r1, r0, r8, lsr #25
 800e7ac:	20001cd8 	ldrdcs	r1, [r0], -r8
 800e7b0:	20001cb0 			; <UNDEFINED> instruction: 0x20001cb0
 800e7b4:	20000ca8 	andcs	r0, r0, r8, lsr #25

0800e7b8 <StoreArtNet::~StoreArtNet()>:
 800e7b8:	4770      	bx	lr

0800e7ba <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800e7ba:	3804      	subs	r0, #4
 800e7bc:	4770      	bx	lr
	...

0800e7c0 <StoreArtNet::Update(artnetparams::Params const*)>:
 800e7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	2187      	movs	r1, #135	; 0x87
 800e7c8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e7cc:	4804      	ldr	r0, [pc, #16]	; (800e7e0 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 800e7ce:	9100      	str	r1, [sp, #0]
 800e7d0:	6800      	ldr	r0, [r0, #0]
 800e7d2:	2101      	movs	r1, #1
 800e7d4:	f7ff ff2c 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e7d8:	b005      	add	sp, #20
 800e7da:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7de:	bf00      	nop
 800e7e0:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800e7e4 <StoreArtNet::SaveShortName(char const*)>:
 800e7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	2202      	movs	r2, #2
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e7f0:	2212      	movs	r2, #18
 800e7f2:	4805      	ldr	r0, [pc, #20]	; (800e808 <StoreArtNet::SaveShortName(char const*)+0x24>)
 800e7f4:	9200      	str	r2, [sp, #0]
 800e7f6:	2101      	movs	r1, #1
 800e7f8:	220c      	movs	r2, #12
 800e7fa:	6800      	ldr	r0, [r0, #0]
 800e7fc:	f7ff ff18 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e800:	b005      	add	sp, #20
 800e802:	f85d fb04 	ldr.w	pc, [sp], #4
 800e806:	bf00      	nop
 800e808:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800e80c <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 800e80c:	f1a0 0004 	sub.w	r0, r0, #4
 800e810:	f7ff bfe8 	b.w	800e7e4 <StoreArtNet::SaveShortName(char const*)>

0800e814 <StoreArtNet::SaveLongName(char const*)>:
 800e814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e816:	460b      	mov	r3, r1
 800e818:	2200      	movs	r2, #0
 800e81a:	2101      	movs	r1, #1
 800e81c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800e820:	2240      	movs	r2, #64	; 0x40
 800e822:	4804      	ldr	r0, [pc, #16]	; (800e834 <StoreArtNet::SaveLongName(char const*)+0x20>)
 800e824:	9200      	str	r2, [sp, #0]
 800e826:	6800      	ldr	r0, [r0, #0]
 800e828:	221e      	movs	r2, #30
 800e82a:	f7ff ff01 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e82e:	b005      	add	sp, #20
 800e830:	f85d fb04 	ldr.w	pc, [sp], #4
 800e834:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800e838 <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 800e838:	f1a0 0004 	sub.w	r0, r0, #4
 800e83c:	f7ff bfea 	b.w	800e814 <StoreArtNet::SaveLongName(char const*)>

0800e840 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800e840:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e842:	2300      	movs	r3, #0
 800e844:	9302      	str	r3, [sp, #8]
 800e846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e84a:	4608      	mov	r0, r1
 800e84c:	408b      	lsls	r3, r1
 800e84e:	2101      	movs	r1, #1
 800e850:	f88d 2017 	strb.w	r2, [sp, #23]
 800e854:	f100 0267 	add.w	r2, r0, #103	; 0x67
 800e858:	4805      	ldr	r0, [pc, #20]	; (800e870 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x30>)
 800e85a:	9301      	str	r3, [sp, #4]
 800e85c:	9100      	str	r1, [sp, #0]
 800e85e:	6800      	ldr	r0, [r0, #0]
 800e860:	f10d 0317 	add.w	r3, sp, #23
 800e864:	f7ff fee4 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e868:	b007      	add	sp, #28
 800e86a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e86e:	bf00      	nop
 800e870:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800e874 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800e874:	f1a0 0004 	sub.w	r0, r0, #4
 800e878:	f7ff bfe2 	b.w	800e840 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

0800e87c <StoreArtNet::SaveNetSwitch(unsigned char)>:
 800e87c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e87e:	2204      	movs	r2, #4
 800e880:	2300      	movs	r3, #0
 800e882:	f88d 1017 	strb.w	r1, [sp, #23]
 800e886:	2101      	movs	r1, #1
 800e888:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800e88c:	4804      	ldr	r0, [pc, #16]	; (800e8a0 <StoreArtNet::SaveNetSwitch(unsigned char)+0x24>)
 800e88e:	9100      	str	r1, [sp, #0]
 800e890:	6800      	ldr	r0, [r0, #0]
 800e892:	f10d 0317 	add.w	r3, sp, #23
 800e896:	f7ff fecb 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e89a:	b007      	add	sp, #28
 800e89c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8a0:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800e8a4 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned char)>:
 800e8a4:	f1a0 0004 	sub.w	r0, r0, #4
 800e8a8:	f7ff bfe8 	b.w	800e87c <StoreArtNet::SaveNetSwitch(unsigned char)>

0800e8ac <StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800e8ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e8ae:	2308      	movs	r3, #8
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f88d 1017 	strb.w	r1, [sp, #23]
 800e8b6:	2101      	movs	r1, #1
 800e8b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e8bc:	4805      	ldr	r0, [pc, #20]	; (800e8d4 <StoreArtNet::SaveSubnetSwitch(unsigned char)+0x28>)
 800e8be:	9100      	str	r1, [sp, #0]
 800e8c0:	2205      	movs	r2, #5
 800e8c2:	6800      	ldr	r0, [r0, #0]
 800e8c4:	f10d 0317 	add.w	r3, sp, #23
 800e8c8:	f7ff feb2 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e8cc:	b007      	add	sp, #28
 800e8ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8d2:	bf00      	nop
 800e8d4:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800e8d8 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800e8d8:	f1a0 0004 	sub.w	r0, r0, #4
 800e8dc:	f7ff bfe6 	b.w	800e8ac <StoreArtNet::SaveSubnetSwitch(unsigned char)>

0800e8e0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800e8e0:	b530      	push	{r4, r5, lr}
 800e8e2:	b087      	sub	sp, #28
 800e8e4:	460c      	mov	r4, r1
 800e8e6:	4d0f      	ldr	r5, [pc, #60]	; (800e924 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x44>)
 800e8e8:	9205      	str	r2, [sp, #20]
 800e8ea:	b951      	cbnz	r1, 800e902 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x22>
 800e8ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e8f0:	9102      	str	r1, [sp, #8]
 800e8f2:	2101      	movs	r1, #1
 800e8f4:	226b      	movs	r2, #107	; 0x6b
 800e8f6:	e9cd 1300 	strd	r1, r3, [sp]
 800e8fa:	6828      	ldr	r0, [r5, #0]
 800e8fc:	ab05      	add	r3, sp, #20
 800e8fe:	f7ff fe97 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e902:	2300      	movs	r3, #0
 800e904:	9302      	str	r3, [sp, #8]
 800e906:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e90a:	2101      	movs	r1, #1
 800e90c:	40a3      	lsls	r3, r4
 800e90e:	9301      	str	r3, [sp, #4]
 800e910:	6828      	ldr	r0, [r5, #0]
 800e912:	9100      	str	r1, [sp, #0]
 800e914:	ab05      	add	r3, sp, #20
 800e916:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 800e91a:	f7ff fe89 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e91e:	b007      	add	sp, #28
 800e920:	bd30      	pop	{r4, r5, pc}
 800e922:	bf00      	nop
 800e924:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800e928 <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800e928:	f1a0 0004 	sub.w	r0, r0, #4
 800e92c:	f7ff bfd8 	b.w	800e8e0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

0800e930 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800e930:	b530      	push	{r4, r5, lr}
 800e932:	b087      	sub	sp, #28
 800e934:	460c      	mov	r4, r1
 800e936:	4d0f      	ldr	r5, [pc, #60]	; (800e974 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x44>)
 800e938:	9205      	str	r2, [sp, #20]
 800e93a:	b951      	cbnz	r1, 800e952 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x22>
 800e93c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e940:	9102      	str	r1, [sp, #8]
 800e942:	2101      	movs	r1, #1
 800e944:	2270      	movs	r2, #112	; 0x70
 800e946:	e9cd 1300 	strd	r1, r3, [sp]
 800e94a:	6828      	ldr	r0, [r5, #0]
 800e94c:	ab05      	add	r3, sp, #20
 800e94e:	f7ff fe6f 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e952:	2300      	movs	r3, #0
 800e954:	9302      	str	r3, [sp, #8]
 800e956:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e95a:	2101      	movs	r1, #1
 800e95c:	40a3      	lsls	r3, r4
 800e95e:	9301      	str	r3, [sp, #4]
 800e960:	6828      	ldr	r0, [r5, #0]
 800e962:	9100      	str	r1, [sp, #0]
 800e964:	ab05      	add	r3, sp, #20
 800e966:	f104 0271 	add.w	r2, r4, #113	; 0x71
 800e96a:	f7ff fe61 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e96e:	b007      	add	sp, #28
 800e970:	bd30      	pop	{r4, r5, pc}
 800e972:	bf00      	nop
 800e974:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800e978 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800e978:	f1a0 0004 	sub.w	r0, r0, #4
 800e97c:	f7ff bfd8 	b.w	800e930 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

0800e980 <StoreArtNet::~StoreArtNet()>:
 800e980:	b510      	push	{r4, lr}
 800e982:	4604      	mov	r4, r0
 800e984:	f003 fef2 	bl	801276c <operator delete(void*)>
 800e988:	4620      	mov	r0, r4
 800e98a:	bd10      	pop	{r4, pc}

0800e98c <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800e98c:	f1a0 0004 	sub.w	r0, r0, #4
 800e990:	e7f6      	b.n	800e980 <StoreArtNet::~StoreArtNet()>
	...

0800e994 <StoreArtNet::Copy(artnetparams::Params*)>:
 800e994:	2300      	movs	r3, #0
 800e996:	b507      	push	{r0, r1, r2, lr}
 800e998:	4805      	ldr	r0, [pc, #20]	; (800e9b0 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 800e99a:	9300      	str	r3, [sp, #0]
 800e99c:	460a      	mov	r2, r1
 800e99e:	2387      	movs	r3, #135	; 0x87
 800e9a0:	2101      	movs	r1, #1
 800e9a2:	6800      	ldr	r0, [r0, #0]
 800e9a4:	f7ff fe84 	bl	800e6b0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e9a8:	b003      	add	sp, #12
 800e9aa:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9ae:	bf00      	nop
 800e9b0:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800e9b4 <StoreArtNet::StoreArtNet()>:
 800e9b4:	4a04      	ldr	r2, [pc, #16]	; (800e9c8 <StoreArtNet::StoreArtNet()+0x14>)
 800e9b6:	f102 0108 	add.w	r1, r2, #8
 800e9ba:	323c      	adds	r2, #60	; 0x3c
 800e9bc:	6042      	str	r2, [r0, #4]
 800e9be:	4a03      	ldr	r2, [pc, #12]	; (800e9cc <StoreArtNet::StoreArtNet()+0x18>)
 800e9c0:	6001      	str	r1, [r0, #0]
 800e9c2:	6010      	str	r0, [r2, #0]
 800e9c4:	4770      	bx	lr
 800e9c6:	bf00      	nop
 800e9c8:	080168ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, fp, sp, lr}
 800e9cc:	20001cc0 	andcs	r1, r0, r0, asr #25

0800e9d0 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800e9d0:	4770      	bx	lr
	...

0800e9d4 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	b507      	push	{r0, r1, r2, lr}
 800e9d8:	4805      	ldr	r0, [pc, #20]	; (800e9f0 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x1c>)
 800e9da:	9300      	str	r3, [sp, #0]
 800e9dc:	460a      	mov	r2, r1
 800e9de:	2322      	movs	r3, #34	; 0x22
 800e9e0:	210f      	movs	r1, #15
 800e9e2:	6800      	ldr	r0, [r0, #0]
 800e9e4:	f7ff fe64 	bl	800e6b0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800e9e8:	b003      	add	sp, #12
 800e9ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9ee:	bf00      	nop
 800e9f0:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800e9f4 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 800e9f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	2122      	movs	r1, #34	; 0x22
 800e9fc:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ea00:	4804      	ldr	r0, [pc, #16]	; (800ea14 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800ea02:	9100      	str	r1, [sp, #0]
 800ea04:	6800      	ldr	r0, [r0, #0]
 800ea06:	210f      	movs	r1, #15
 800ea08:	f7ff fe12 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ea0c:	b005      	add	sp, #20
 800ea0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea12:	bf00      	nop
 800ea14:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800ea18 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800ea18:	b510      	push	{r4, lr}
 800ea1a:	4604      	mov	r4, r0
 800ea1c:	f003 fea6 	bl	801276c <operator delete(void*)>
 800ea20:	4620      	mov	r0, r4
 800ea22:	bd10      	pop	{r4, pc}

0800ea24 <StoreDisplayUdf::StoreDisplayUdf()>:
 800ea24:	4a02      	ldr	r2, [pc, #8]	; (800ea30 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800ea26:	6002      	str	r2, [r0, #0]
 800ea28:	4a02      	ldr	r2, [pc, #8]	; (800ea34 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 800ea2a:	6010      	str	r0, [r2, #0]
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	08016954 	stmdaeq	r1, {r2, r4, r6, r8, fp, sp, lr}
 800ea34:	20001cc4 	andcs	r1, r0, r4, asr #25

0800ea38 <StoreDmxSend::~StoreDmxSend()>:
 800ea38:	4770      	bx	lr
	...

0800ea3c <StoreDmxSend::Copy(TDmxParams*)>:
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	b507      	push	{r0, r1, r2, lr}
 800ea40:	4805      	ldr	r0, [pc, #20]	; (800ea58 <StoreDmxSend::Copy(TDmxParams*)+0x1c>)
 800ea42:	9300      	str	r3, [sp, #0]
 800ea44:	460a      	mov	r2, r1
 800ea46:	230a      	movs	r3, #10
 800ea48:	2102      	movs	r1, #2
 800ea4a:	6800      	ldr	r0, [r0, #0]
 800ea4c:	f7ff fe30 	bl	800e6b0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800ea50:	b003      	add	sp, #12
 800ea52:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea56:	bf00      	nop
 800ea58:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800ea5c <StoreDmxSend::Update(TDmxParams const*)>:
 800ea5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea5e:	2200      	movs	r2, #0
 800ea60:	460b      	mov	r3, r1
 800ea62:	210a      	movs	r1, #10
 800ea64:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ea68:	4804      	ldr	r0, [pc, #16]	; (800ea7c <StoreDmxSend::Update(TDmxParams const*)+0x20>)
 800ea6a:	9100      	str	r1, [sp, #0]
 800ea6c:	6800      	ldr	r0, [r0, #0]
 800ea6e:	2102      	movs	r1, #2
 800ea70:	f7ff fdde 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ea74:	b005      	add	sp, #20
 800ea76:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea7a:	bf00      	nop
 800ea7c:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800ea80 <StoreDmxSend::~StoreDmxSend()>:
 800ea80:	b510      	push	{r4, lr}
 800ea82:	4604      	mov	r4, r0
 800ea84:	f003 fe72 	bl	801276c <operator delete(void*)>
 800ea88:	4620      	mov	r0, r4
 800ea8a:	bd10      	pop	{r4, pc}

0800ea8c <StoreDmxSend::StoreDmxSend()>:
 800ea8c:	4a02      	ldr	r2, [pc, #8]	; (800ea98 <StoreDmxSend::StoreDmxSend()+0xc>)
 800ea8e:	6002      	str	r2, [r0, #0]
 800ea90:	4a02      	ldr	r2, [pc, #8]	; (800ea9c <StoreDmxSend::StoreDmxSend()+0x10>)
 800ea92:	6010      	str	r0, [r2, #0]
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	0801696c 	stmdaeq	r1, {r2, r3, r5, r6, r8, fp, sp, lr}
 800ea9c:	20001cc8 	andcs	r1, r0, r8, asr #25

0800eaa0 <StoreNetwork::~StoreNetwork()>:
 800eaa0:	4770      	bx	lr

0800eaa2 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800eaa2:	3804      	subs	r0, #4
 800eaa4:	4770      	bx	lr
	...

0800eaa8 <StoreNetwork::Update(TNetworkParams const*)>:
 800eaa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eaaa:	2200      	movs	r2, #0
 800eaac:	460b      	mov	r3, r1
 800eaae:	215e      	movs	r1, #94	; 0x5e
 800eab0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800eab4:	4804      	ldr	r0, [pc, #16]	; (800eac8 <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 800eab6:	9100      	str	r1, [sp, #0]
 800eab8:	6800      	ldr	r0, [r0, #0]
 800eaba:	4611      	mov	r1, r2
 800eabc:	f7ff fdb8 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eac0:	b005      	add	sp, #20
 800eac2:	f85d fb04 	ldr.w	pc, [sp], #4
 800eac6:	bf00      	nop
 800eac8:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800eacc <StoreNetwork::SaveDhcp(bool)>:
 800eacc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800eace:	2301      	movs	r3, #1
 800ead0:	f88d 1017 	strb.w	r1, [sp, #23]
 800ead4:	2100      	movs	r1, #0
 800ead6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800eada:	4805      	ldr	r0, [pc, #20]	; (800eaf0 <StoreNetwork::SaveDhcp(bool)+0x24>)
 800eadc:	9300      	str	r3, [sp, #0]
 800eade:	2214      	movs	r2, #20
 800eae0:	6800      	ldr	r0, [r0, #0]
 800eae2:	f10d 0317 	add.w	r3, sp, #23
 800eae6:	f7ff fda3 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eaea:	b007      	add	sp, #28
 800eaec:	f85d fb04 	ldr.w	pc, [sp], #4
 800eaf0:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800eaf4 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800eaf4:	f1a0 0004 	sub.w	r0, r0, #4
 800eaf8:	e7e8      	b.n	800eacc <StoreNetwork::SaveDhcp(bool)>
 800eafa:	bf00      	nop

0800eafc <StoreNetwork::SaveGatewayIp(unsigned int)>:
 800eafc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800eafe:	2308      	movs	r3, #8
 800eb00:	9105      	str	r1, [sp, #20]
 800eb02:	2100      	movs	r1, #0
 800eb04:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800eb08:	2304      	movs	r3, #4
 800eb0a:	4805      	ldr	r0, [pc, #20]	; (800eb20 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	220c      	movs	r2, #12
 800eb10:	6800      	ldr	r0, [r0, #0]
 800eb12:	ab05      	add	r3, sp, #20
 800eb14:	f7ff fd8c 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eb18:	b007      	add	sp, #28
 800eb1a:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb1e:	bf00      	nop
 800eb20:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800eb24 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 800eb24:	f1a0 0004 	sub.w	r0, r0, #4
 800eb28:	e7e8      	b.n	800eafc <StoreNetwork::SaveGatewayIp(unsigned int)>
 800eb2a:	bf00      	nop

0800eb2c <StoreNetwork::SaveNetMask(unsigned int)>:
 800eb2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800eb2e:	2304      	movs	r3, #4
 800eb30:	9105      	str	r1, [sp, #20]
 800eb32:	2100      	movs	r1, #0
 800eb34:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800eb38:	4804      	ldr	r0, [pc, #16]	; (800eb4c <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 800eb3a:	9300      	str	r3, [sp, #0]
 800eb3c:	2208      	movs	r2, #8
 800eb3e:	6800      	ldr	r0, [r0, #0]
 800eb40:	ab05      	add	r3, sp, #20
 800eb42:	f7ff fd75 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eb46:	b007      	add	sp, #28
 800eb48:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb4c:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800eb50 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 800eb50:	f1a0 0004 	sub.w	r0, r0, #4
 800eb54:	e7ea      	b.n	800eb2c <StoreNetwork::SaveNetMask(unsigned int)>
 800eb56:	bf00      	nop

0800eb58 <StoreNetwork::SaveIp(unsigned int)>:
 800eb58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800eb5a:	2302      	movs	r3, #2
 800eb5c:	9105      	str	r1, [sp, #20]
 800eb5e:	2100      	movs	r1, #0
 800eb60:	2204      	movs	r2, #4
 800eb62:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800eb66:	4804      	ldr	r0, [pc, #16]	; (800eb78 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 800eb68:	9200      	str	r2, [sp, #0]
 800eb6a:	6800      	ldr	r0, [r0, #0]
 800eb6c:	ab05      	add	r3, sp, #20
 800eb6e:	f7ff fd5f 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eb72:	b007      	add	sp, #28
 800eb74:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb78:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800eb7c <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 800eb7c:	f1a0 0004 	sub.w	r0, r0, #4
 800eb80:	e7ea      	b.n	800eb58 <StoreNetwork::SaveIp(unsigned int)>
 800eb82:	bf00      	nop

0800eb84 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800eb84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb86:	460b      	mov	r3, r1
 800eb88:	2020      	movs	r0, #32
 800eb8a:	2100      	movs	r1, #0
 800eb8c:	2a40      	cmp	r2, #64	; 0x40
 800eb8e:	bf28      	it	cs
 800eb90:	2240      	movcs	r2, #64	; 0x40
 800eb92:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800eb96:	4804      	ldr	r0, [pc, #16]	; (800eba8 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 800eb98:	9200      	str	r2, [sp, #0]
 800eb9a:	6800      	ldr	r0, [r0, #0]
 800eb9c:	2215      	movs	r2, #21
 800eb9e:	f7ff fd47 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eba2:	b005      	add	sp, #20
 800eba4:	f85d fb04 	ldr.w	pc, [sp], #4
 800eba8:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800ebac <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800ebac:	f1a0 0004 	sub.w	r0, r0, #4
 800ebb0:	e7e8      	b.n	800eb84 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 800ebb2:	bf00      	nop

0800ebb4 <StoreNetwork::~StoreNetwork()>:
 800ebb4:	b510      	push	{r4, lr}
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	f003 fdd8 	bl	801276c <operator delete(void*)>
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	bd10      	pop	{r4, pc}

0800ebc0 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800ebc0:	f1a0 0004 	sub.w	r0, r0, #4
 800ebc4:	e7f6      	b.n	800ebb4 <StoreNetwork::~StoreNetwork()>
	...

0800ebc8 <StoreNetwork::Copy(TNetworkParams*)>:
 800ebc8:	b507      	push	{r0, r1, r2, lr}
 800ebca:	460a      	mov	r2, r1
 800ebcc:	2100      	movs	r1, #0
 800ebce:	4804      	ldr	r0, [pc, #16]	; (800ebe0 <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 800ebd0:	9100      	str	r1, [sp, #0]
 800ebd2:	235e      	movs	r3, #94	; 0x5e
 800ebd4:	6800      	ldr	r0, [r0, #0]
 800ebd6:	f7ff fd6b 	bl	800e6b0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800ebda:	b003      	add	sp, #12
 800ebdc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebe0:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800ebe4 <StoreNetwork::StoreNetwork()>:
 800ebe4:	4a03      	ldr	r2, [pc, #12]	; (800ebf4 <StoreNetwork::StoreNetwork()+0x10>)
 800ebe6:	6002      	str	r2, [r0, #0]
 800ebe8:	322c      	adds	r2, #44	; 0x2c
 800ebea:	6042      	str	r2, [r0, #4]
 800ebec:	4a02      	ldr	r2, [pc, #8]	; (800ebf8 <StoreNetwork::StoreNetwork()+0x14>)
 800ebee:	6010      	str	r0, [r2, #0]
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop
 800ebf4:	08016984 	stmdaeq	r1, {r2, r7, r8, fp, sp, lr}
 800ebf8:	20001ccc 	andcs	r1, r0, ip, asr #25

0800ebfc <StoreRDMDevice::~StoreRDMDevice()>:
 800ebfc:	4770      	bx	lr

0800ebfe <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800ebfe:	3804      	subs	r0, #4
 800ec00:	4770      	bx	lr
	...

0800ec04 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 800ec04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec06:	2200      	movs	r2, #0
 800ec08:	460b      	mov	r3, r1
 800ec0a:	2129      	movs	r1, #41	; 0x29
 800ec0c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ec10:	4804      	ldr	r0, [pc, #16]	; (800ec24 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 800ec12:	9100      	str	r1, [sp, #0]
 800ec14:	6800      	ldr	r0, [r0, #0]
 800ec16:	210b      	movs	r1, #11
 800ec18:	f7ff fd0a 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ec1c:	b005      	add	sp, #20
 800ec1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec22:	bf00      	nop
 800ec24:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800ec28 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800ec28:	b570      	push	{r4, r5, r6, lr}
 800ec2a:	2401      	movs	r4, #1
 800ec2c:	2600      	movs	r6, #0
 800ec2e:	4d0c      	ldr	r5, [pc, #48]	; (800ec60 <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 800ec30:	b086      	sub	sp, #24
 800ec32:	460b      	mov	r3, r1
 800ec34:	6828      	ldr	r0, [r5, #0]
 800ec36:	f88d 2017 	strb.w	r2, [sp, #23]
 800ec3a:	9200      	str	r2, [sp, #0]
 800ec3c:	210b      	movs	r1, #11
 800ec3e:	2204      	movs	r2, #4
 800ec40:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800ec44:	f7ff fcf4 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ec48:	2224      	movs	r2, #36	; 0x24
 800ec4a:	210b      	movs	r1, #11
 800ec4c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800ec50:	6828      	ldr	r0, [r5, #0]
 800ec52:	9400      	str	r4, [sp, #0]
 800ec54:	f10d 0317 	add.w	r3, sp, #23
 800ec58:	f7ff fcea 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ec5c:	b006      	add	sp, #24
 800ec5e:	bd70      	pop	{r4, r5, r6, pc}
 800ec60:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800ec64 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800ec64:	f1a0 0004 	sub.w	r0, r0, #4
 800ec68:	e7de      	b.n	800ec28 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 800ec6a:	bf00      	nop

0800ec6c <StoreRDMDevice::~StoreRDMDevice()>:
 800ec6c:	b510      	push	{r4, lr}
 800ec6e:	4604      	mov	r4, r0
 800ec70:	f003 fd7c 	bl	801276c <operator delete(void*)>
 800ec74:	4620      	mov	r0, r4
 800ec76:	bd10      	pop	{r4, pc}

0800ec78 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800ec78:	f1a0 0004 	sub.w	r0, r0, #4
 800ec7c:	e7f6      	b.n	800ec6c <StoreRDMDevice::~StoreRDMDevice()>
	...

0800ec80 <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 800ec80:	2300      	movs	r3, #0
 800ec82:	b507      	push	{r0, r1, r2, lr}
 800ec84:	4805      	ldr	r0, [pc, #20]	; (800ec9c <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x1c>)
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	460a      	mov	r2, r1
 800ec8a:	2329      	movs	r3, #41	; 0x29
 800ec8c:	210b      	movs	r1, #11
 800ec8e:	6800      	ldr	r0, [r0, #0]
 800ec90:	f7ff fd0e 	bl	800e6b0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800ec94:	b003      	add	sp, #12
 800ec96:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec9a:	bf00      	nop
 800ec9c:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800eca0 <StoreRDMDevice::StoreRDMDevice()>:
 800eca0:	4a03      	ldr	r2, [pc, #12]	; (800ecb0 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 800eca2:	6002      	str	r2, [r0, #0]
 800eca4:	321c      	adds	r2, #28
 800eca6:	6042      	str	r2, [r0, #4]
 800eca8:	4a02      	ldr	r2, [pc, #8]	; (800ecb4 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 800ecaa:	6010      	str	r0, [r2, #0]
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	080169d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, fp, sp, lr}
 800ecb4:	20001cd0 	ldrdcs	r1, [r0], -r0

0800ecb8 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800ecb8:	4770      	bx	lr
	...

0800ecbc <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	b507      	push	{r0, r1, r2, lr}
 800ecc0:	4805      	ldr	r0, [pc, #20]	; (800ecd8 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 800ecc2:	9300      	str	r3, [sp, #0]
 800ecc4:	460a      	mov	r2, r1
 800ecc6:	2320      	movs	r3, #32
 800ecc8:	210c      	movs	r1, #12
 800ecca:	6800      	ldr	r0, [r0, #0]
 800eccc:	f7ff fcf0 	bl	800e6b0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800ecd0:	b003      	add	sp, #12
 800ecd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecd6:	bf00      	nop
 800ecd8:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800ecdc <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 800ecdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ecde:	2200      	movs	r2, #0
 800ece0:	460b      	mov	r3, r1
 800ece2:	2120      	movs	r1, #32
 800ece4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ece8:	4804      	ldr	r0, [pc, #16]	; (800ecfc <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 800ecea:	9100      	str	r1, [sp, #0]
 800ecec:	6800      	ldr	r0, [r0, #0]
 800ecee:	210c      	movs	r1, #12
 800ecf0:	f7ff fc9e 	bl	800e630 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ecf4:	b005      	add	sp, #20
 800ecf6:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecfa:	bf00      	nop
 800ecfc:	20001cb8 			; <UNDEFINED> instruction: 0x20001cb8

0800ed00 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800ed00:	b510      	push	{r4, lr}
 800ed02:	4604      	mov	r4, r0
 800ed04:	f003 fd32 	bl	801276c <operator delete(void*)>
 800ed08:	4620      	mov	r0, r4
 800ed0a:	bd10      	pop	{r4, pc}

0800ed0c <StoreRemoteConfig::StoreRemoteConfig()>:
 800ed0c:	4a02      	ldr	r2, [pc, #8]	; (800ed18 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 800ed0e:	6002      	str	r2, [r0, #0]
 800ed10:	4a02      	ldr	r2, [pc, #8]	; (800ed1c <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 800ed12:	6010      	str	r0, [r2, #0]
 800ed14:	4770      	bx	lr
 800ed16:	bf00      	nop
 800ed18:	08016a04 	stmdaeq	r1, {r2, r9, fp, sp, lr}
 800ed1c:	20001cd4 	ldrdcs	r1, [r0], -r4

0800ed20 <FlashRom::FlashRom()>:
 800ed20:	4b07      	ldr	r3, [pc, #28]	; (800ed40 <FlashRom::FlashRom()+0x20>)
 800ed22:	b510      	push	{r4, lr}
 800ed24:	6018      	str	r0, [r3, #0]
 800ed26:	2301      	movs	r3, #1
 800ed28:	4604      	mov	r4, r0
 800ed2a:	7003      	strb	r3, [r0, #0]
 800ed2c:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <FlashRom::FlashRom()+0x24>)
 800ed2e:	4906      	ldr	r1, [pc, #24]	; (800ed48 <FlashRom::FlashRom()+0x28>)
 800ed30:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800ed34:	4805      	ldr	r0, [pc, #20]	; (800ed4c <FlashRom::FlashRom()+0x2c>)
 800ed36:	029a      	lsls	r2, r3, #10
 800ed38:	f004 f80c 	bl	8012d54 <printf>
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	bd10      	pop	{r4, pc}
 800ed40:	20001cd8 	ldrdcs	r1, [r0], -r8
 800ed44:	1ffff700 	svcne	0x00fff700
 800ed48:	080151fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, ip, lr}
 800ed4c:	08016a14 	stmdaeq	r1, {r2, r4, r9, fp, sp, lr}

0800ed50 <FlashRom::GetSize() const>:
 800ed50:	4b02      	ldr	r3, [pc, #8]	; (800ed5c <FlashRom::GetSize() const+0xc>)
 800ed52:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800ed56:	0280      	lsls	r0, r0, #10
 800ed58:	4770      	bx	lr
 800ed5a:	bf00      	nop
 800ed5c:	1ffff700 	svcne	0x00fff700

0800ed60 <FlashRom::GetSectorSize() const>:
 800ed60:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ed64:	4770      	bx	lr

0800ed66 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 800ed66:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800ed6a:	441a      	add	r2, r3
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d104      	bne.n	800ed7a <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 800ed70:	2200      	movs	r2, #0
 800ed72:	9b00      	ldr	r3, [sp, #0]
 800ed74:	2001      	movs	r0, #1
 800ed76:	601a      	str	r2, [r3, #0]
 800ed78:	4770      	bx	lr
 800ed7a:	f851 0b04 	ldr.w	r0, [r1], #4
 800ed7e:	f843 0b04 	str.w	r0, [r3], #4
 800ed82:	e7f3      	b.n	800ed6c <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

0800ed84 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 800ed84:	2000      	movs	r0, #0
 800ed86:	b538      	push	{r3, r4, r5, lr}
 800ed88:	4c47      	ldr	r4, [pc, #284]	; (800eea8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 800ed8a:	6018      	str	r0, [r3, #0]
 800ed8c:	6823      	ldr	r3, [r4, #0]
 800ed8e:	2b04      	cmp	r3, #4
 800ed90:	f200 8082 	bhi.w	800ee98 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800ed94:	e8df f003 	tbb	[pc, r3]
 800ed98:	78452003 	stmdavc	r5, {r0, r1, sp}^
 800ed9c:	4b430080 	blmi	90cefa4 <__exidx_end+0x10b7c2c>
 800eda0:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800eda4:	6019      	str	r1, [r3, #0]
 800eda6:	4b42      	ldr	r3, [pc, #264]	; (800eeb0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800eda8:	601a      	str	r2, [r3, #0]
 800edaa:	4b42      	ldr	r3, [pc, #264]	; (800eeb4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 800edac:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800edb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edb4:	4b40      	ldr	r3, [pc, #256]	; (800eeb8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800edb6:	d807      	bhi.n	800edc8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 800edb8:	2201      	movs	r2, #1
 800edba:	701a      	strb	r2, [r3, #0]
 800edbc:	f004 fa96 	bl	80132ec <fmc_bank0_unlock>
 800edc0:	2301      	movs	r3, #1
 800edc2:	6023      	str	r3, [r4, #0]
 800edc4:	2000      	movs	r0, #0
 800edc6:	e026      	b.n	800ee16 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800edc8:	4a3c      	ldr	r2, [pc, #240]	; (800eebc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 800edca:	4291      	cmp	r1, r2
 800edcc:	d3f4      	bcc.n	800edb8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 800edce:	2200      	movs	r2, #0
 800edd0:	701a      	strb	r2, [r3, #0]
 800edd2:	f004 fa99 	bl	8013308 <fmc_bank1_unlock>
 800edd6:	e7f3      	b.n	800edc0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800edd8:	4d37      	ldr	r5, [pc, #220]	; (800eeb8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800edda:	782b      	ldrb	r3, [r5, #0]
 800eddc:	b15b      	cbz	r3, 800edf6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 800edde:	f004 fab1 	bl	8013344 <fmc_bank0_state_get>
 800ede2:	2801      	cmp	r0, #1
 800ede4:	d0ee      	beq.n	800edc4 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 800ede6:	7829      	ldrb	r1, [r5, #0]
 800ede8:	4b35      	ldr	r3, [pc, #212]	; (800eec0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800edea:	b939      	cbnz	r1, 800edfc <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 800edec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edee:	f022 0202 	bic.w	r2, r2, #2
 800edf2:	651a      	str	r2, [r3, #80]	; 0x50
 800edf4:	e006      	b.n	800ee04 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 800edf6:	f004 fab7 	bl	8013368 <fmc_bank1_state_get>
 800edfa:	e7f2      	b.n	800ede2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 800edfc:	691a      	ldr	r2, [r3, #16]
 800edfe:	f022 0202 	bic.w	r2, r2, #2
 800ee02:	611a      	str	r2, [r3, #16]
 800ee04:	4b2a      	ldr	r3, [pc, #168]	; (800eeb0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	b94b      	cbnz	r3, 800ee1e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 800ee0a:	b129      	cbz	r1, 800ee18 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 800ee0c:	f004 fa8a 	bl	8013324 <fmc_bank0_lock>
 800ee10:	2300      	movs	r3, #0
 800ee12:	2001      	movs	r0, #1
 800ee14:	6023      	str	r3, [r4, #0]
 800ee16:	bd38      	pop	{r3, r4, r5, pc}
 800ee18:	f004 fa8c 	bl	8013334 <fmc_bank1_lock>
 800ee1c:	e7f8      	b.n	800ee10 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 800ee1e:	2302      	movs	r3, #2
 800ee20:	e7cf      	b.n	800edc2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 800ee22:	4923      	ldr	r1, [pc, #140]	; (800eeb0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800ee24:	680b      	ldr	r3, [r1, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d0ca      	beq.n	800edc0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800ee2a:	4b23      	ldr	r3, [pc, #140]	; (800eeb8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800ee2c:	4a1f      	ldr	r2, [pc, #124]	; (800eeac <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 800ee2e:	7818      	ldrb	r0, [r3, #0]
 800ee30:	4b23      	ldr	r3, [pc, #140]	; (800eec0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800ee32:	b190      	cbz	r0, 800ee5a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 800ee34:	6918      	ldr	r0, [r3, #16]
 800ee36:	f040 0002 	orr.w	r0, r0, #2
 800ee3a:	6118      	str	r0, [r3, #16]
 800ee3c:	6810      	ldr	r0, [r2, #0]
 800ee3e:	6158      	str	r0, [r3, #20]
 800ee40:	6918      	ldr	r0, [r3, #16]
 800ee42:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800ee46:	6118      	str	r0, [r3, #16]
 800ee48:	680b      	ldr	r3, [r1, #0]
 800ee4a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800ee4e:	600b      	str	r3, [r1, #0]
 800ee50:	6813      	ldr	r3, [r2, #0]
 800ee52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee56:	6013      	str	r3, [r2, #0]
 800ee58:	e7b2      	b.n	800edc0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800ee5a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ee5c:	f040 0002 	orr.w	r0, r0, #2
 800ee60:	6518      	str	r0, [r3, #80]	; 0x50
 800ee62:	6810      	ldr	r0, [r2, #0]
 800ee64:	6558      	str	r0, [r3, #84]	; 0x54
 800ee66:	69dd      	ldr	r5, [r3, #28]
 800ee68:	07ad      	lsls	r5, r5, #30
 800ee6a:	bf48      	it	mi
 800ee6c:	6158      	strmi	r0, [r3, #20]
 800ee6e:	4814      	ldr	r0, [pc, #80]	; (800eec0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800ee70:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ee72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee76:	6503      	str	r3, [r0, #80]	; 0x50
 800ee78:	680b      	ldr	r3, [r1, #0]
 800ee7a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800ee7e:	600b      	str	r3, [r1, #0]
 800ee80:	6813      	ldr	r3, [r2, #0]
 800ee82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee86:	e7e6      	b.n	800ee56 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 800ee88:	4b0b      	ldr	r3, [pc, #44]	; (800eeb8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800ee8a:	781a      	ldrb	r2, [r3, #0]
 800ee8c:	4b0c      	ldr	r3, [pc, #48]	; (800eec0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800ee8e:	b132      	cbz	r2, 800ee9e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 800ee90:	691a      	ldr	r2, [r3, #16]
 800ee92:	f022 0201 	bic.w	r2, r2, #1
 800ee96:	611a      	str	r2, [r3, #16]
 800ee98:	2000      	movs	r0, #0
 800ee9a:	6020      	str	r0, [r4, #0]
 800ee9c:	e7bb      	b.n	800ee16 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800ee9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eea0:	f022 0201 	bic.w	r2, r2, #1
 800eea4:	651a      	str	r2, [r3, #80]	; 0x50
 800eea6:	e7f7      	b.n	800ee98 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800eea8:	20001ce0 	andcs	r1, r0, r0, ror #25
 800eeac:	20001ce4 	andcs	r1, r0, r4, ror #25
 800eeb0:	20001cf0 	strdcs	r1, [r0], -r0
 800eeb4:	1ffff700 	svcne	0x00fff700
 800eeb8:	20001cec 	andcs	r1, r0, ip, ror #25
 800eebc:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800eec0:	40022000 	andmi	r2, r2, r0

0800eec4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 800eec4:	b570      	push	{r4, r5, r6, lr}
 800eec6:	2400      	movs	r4, #0
 800eec8:	9804      	ldr	r0, [sp, #16]
 800eeca:	6004      	str	r4, [r0, #0]
 800eecc:	4c48      	ldr	r4, [pc, #288]	; (800eff0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 800eece:	6820      	ldr	r0, [r4, #0]
 800eed0:	2804      	cmp	r0, #4
 800eed2:	d848      	bhi.n	800ef66 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 800eed4:	e8df f000 	tbb	[pc, r0]
 800eed8:	22847c03 	addcs	r7, r4, #768	; 0x300
 800eedc:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 800eee0:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800eee4:	6001      	str	r1, [r0, #0]
 800eee6:	4844      	ldr	r0, [pc, #272]	; (800eff8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800eee8:	6003      	str	r3, [r0, #0]
 800eeea:	4b44      	ldr	r3, [pc, #272]	; (800effc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800eeec:	601a      	str	r2, [r3, #0]
 800eeee:	4b44      	ldr	r3, [pc, #272]	; (800f000 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 800eef0:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800eef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eef8:	4b42      	ldr	r3, [pc, #264]	; (800f004 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800eefa:	d807      	bhi.n	800ef0c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 800eefc:	2201      	movs	r2, #1
 800eefe:	701a      	strb	r2, [r3, #0]
 800ef00:	f004 f9f4 	bl	80132ec <fmc_bank0_unlock>
 800ef04:	2303      	movs	r3, #3
 800ef06:	6023      	str	r3, [r4, #0]
 800ef08:	2000      	movs	r0, #0
 800ef0a:	e026      	b.n	800ef5a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800ef0c:	4a3e      	ldr	r2, [pc, #248]	; (800f008 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 800ef0e:	4291      	cmp	r1, r2
 800ef10:	d3f4      	bcc.n	800eefc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 800ef12:	2200      	movs	r2, #0
 800ef14:	701a      	strb	r2, [r3, #0]
 800ef16:	f004 f9f7 	bl	8013308 <fmc_bank1_unlock>
 800ef1a:	e7f3      	b.n	800ef04 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800ef1c:	4d39      	ldr	r5, [pc, #228]	; (800f004 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800ef1e:	782b      	ldrb	r3, [r5, #0]
 800ef20:	b15b      	cbz	r3, 800ef3a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 800ef22:	f004 fa0f 	bl	8013344 <fmc_bank0_state_get>
 800ef26:	2801      	cmp	r0, #1
 800ef28:	d0ee      	beq.n	800ef08 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 800ef2a:	7829      	ldrb	r1, [r5, #0]
 800ef2c:	4b37      	ldr	r3, [pc, #220]	; (800f00c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800ef2e:	b939      	cbnz	r1, 800ef40 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 800ef30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef32:	f022 0201 	bic.w	r2, r2, #1
 800ef36:	651a      	str	r2, [r3, #80]	; 0x50
 800ef38:	e006      	b.n	800ef48 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 800ef3a:	f004 fa15 	bl	8013368 <fmc_bank1_state_get>
 800ef3e:	e7f2      	b.n	800ef26 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 800ef40:	691a      	ldr	r2, [r3, #16]
 800ef42:	f022 0201 	bic.w	r2, r2, #1
 800ef46:	611a      	str	r2, [r3, #16]
 800ef48:	4b2c      	ldr	r3, [pc, #176]	; (800effc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	b94b      	cbnz	r3, 800ef62 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 800ef4e:	b129      	cbz	r1, 800ef5c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 800ef50:	f004 f9e8 	bl	8013324 <fmc_bank0_lock>
 800ef54:	2300      	movs	r3, #0
 800ef56:	2001      	movs	r0, #1
 800ef58:	6023      	str	r3, [r4, #0]
 800ef5a:	bd70      	pop	{r4, r5, r6, pc}
 800ef5c:	f004 f9ea 	bl	8013334 <fmc_bank1_lock>
 800ef60:	e7f8      	b.n	800ef54 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 800ef62:	2304      	movs	r3, #4
 800ef64:	e7cf      	b.n	800ef06 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 800ef66:	4a25      	ldr	r2, [pc, #148]	; (800effc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800ef68:	6813      	ldr	r3, [r2, #0]
 800ef6a:	2b03      	cmp	r3, #3
 800ef6c:	d91a      	bls.n	800efa4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 800ef6e:	4b25      	ldr	r3, [pc, #148]	; (800f004 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800ef70:	7819      	ldrb	r1, [r3, #0]
 800ef72:	4b26      	ldr	r3, [pc, #152]	; (800f00c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800ef74:	b189      	cbz	r1, 800ef9a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 800ef76:	6919      	ldr	r1, [r3, #16]
 800ef78:	f041 0101 	orr.w	r1, r1, #1
 800ef7c:	6119      	str	r1, [r3, #16]
 800ef7e:	4d1e      	ldr	r5, [pc, #120]	; (800eff8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800ef80:	481c      	ldr	r0, [pc, #112]	; (800eff4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800ef82:	6829      	ldr	r1, [r5, #0]
 800ef84:	6803      	ldr	r3, [r0, #0]
 800ef86:	f851 6b04 	ldr.w	r6, [r1], #4
 800ef8a:	f843 6b04 	str.w	r6, [r3], #4
 800ef8e:	6003      	str	r3, [r0, #0]
 800ef90:	6813      	ldr	r3, [r2, #0]
 800ef92:	6029      	str	r1, [r5, #0]
 800ef94:	3b04      	subs	r3, #4
 800ef96:	6013      	str	r3, [r2, #0]
 800ef98:	e7b4      	b.n	800ef04 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800ef9a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ef9c:	f041 0101 	orr.w	r1, r1, #1
 800efa0:	6519      	str	r1, [r3, #80]	; 0x50
 800efa2:	e7ec      	b.n	800ef7e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d0ad      	beq.n	800ef04 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800efa8:	4b16      	ldr	r3, [pc, #88]	; (800f004 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800efaa:	781a      	ldrb	r2, [r3, #0]
 800efac:	4b17      	ldr	r3, [pc, #92]	; (800f00c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800efae:	b152      	cbz	r2, 800efc6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 800efb0:	691a      	ldr	r2, [r3, #16]
 800efb2:	f042 0201 	orr.w	r2, r2, #1
 800efb6:	611a      	str	r2, [r3, #16]
 800efb8:	4a0f      	ldr	r2, [pc, #60]	; (800eff8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800efba:	4b0e      	ldr	r3, [pc, #56]	; (800eff4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800efbc:	6812      	ldr	r2, [r2, #0]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	6812      	ldr	r2, [r2, #0]
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	e79e      	b.n	800ef04 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800efc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efc8:	f042 0201 	orr.w	r2, r2, #1
 800efcc:	651a      	str	r2, [r3, #80]	; 0x50
 800efce:	e7f3      	b.n	800efb8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 800efd0:	4b0c      	ldr	r3, [pc, #48]	; (800f004 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800efd2:	781a      	ldrb	r2, [r3, #0]
 800efd4:	4b0d      	ldr	r3, [pc, #52]	; (800f00c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800efd6:	b132      	cbz	r2, 800efe6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 800efd8:	691a      	ldr	r2, [r3, #16]
 800efda:	f022 0202 	bic.w	r2, r2, #2
 800efde:	611a      	str	r2, [r3, #16]
 800efe0:	2000      	movs	r0, #0
 800efe2:	6020      	str	r0, [r4, #0]
 800efe4:	e7b9      	b.n	800ef5a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800efe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efe8:	f022 0202 	bic.w	r2, r2, #2
 800efec:	651a      	str	r2, [r3, #80]	; 0x50
 800efee:	e7f7      	b.n	800efe0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 800eff0:	20001ce0 	andcs	r1, r0, r0, ror #25
 800eff4:	20001cdc 	ldrdcs	r1, [r0], -ip
 800eff8:	20001ce8 	andcs	r1, r0, r8, ror #25
 800effc:	20001cf0 	strdcs	r1, [r0], -r0
 800f000:	1ffff700 	svcne	0x00fff700
 800f004:	20001cec 	andcs	r1, r0, ip, ror #25
 800f008:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800f00c:	40022000 	andmi	r2, r2, r0

0800f010 <net_set_ip>:
 800f010:	b510      	push	{r4, lr}
 800f012:	4c05      	ldr	r4, [pc, #20]	; (800f028 <net_set_ip+0x18>)
 800f014:	6020      	str	r0, [r4, #0]
 800f016:	4621      	mov	r1, r4
 800f018:	4804      	ldr	r0, [pc, #16]	; (800f02c <net_set_ip+0x1c>)
 800f01a:	f7f8 f953 	bl	80072c4 <arp_init>
 800f01e:	4620      	mov	r0, r4
 800f020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f024:	f001 bff6 	b.w	8011014 <ip_set_ip>
 800f028:	20001cf4 	strdcs	r1, [r0], -r4
 800f02c:	20001d00 	andcs	r1, r0, r0, lsl #26

0800f030 <net_set_gw>:
 800f030:	4b02      	ldr	r3, [pc, #8]	; (800f03c <net_set_gw+0xc>)
 800f032:	6098      	str	r0, [r3, #8]
 800f034:	4618      	mov	r0, r3
 800f036:	f001 bfed 	b.w	8011014 <ip_set_ip>
 800f03a:	bf00      	nop
 800f03c:	20001cf4 	strdcs	r1, [r0], -r4

0800f040 <net_set_dhcp>:
 800f040:	b570      	push	{r4, r5, r6, lr}
 800f042:	2400      	movs	r4, #0
 800f044:	4605      	mov	r5, r0
 800f046:	7014      	strb	r4, [r2, #0]
 800f048:	4616      	mov	r6, r2
 800f04a:	4810      	ldr	r0, [pc, #64]	; (800f08c <net_set_dhcp+0x4c>)
 800f04c:	460a      	mov	r2, r1
 800f04e:	4910      	ldr	r1, [pc, #64]	; (800f090 <net_set_dhcp+0x50>)
 800f050:	f001 fdc0 	bl	8010bd4 <dhcp_client>
 800f054:	42a0      	cmp	r0, r4
 800f056:	da17      	bge.n	800f088 <net_set_dhcp+0x48>
 800f058:	480d      	ldr	r0, [pc, #52]	; (800f090 <net_set_dhcp+0x50>)
 800f05a:	f000 f837 	bl	800f0cc <rfc3927>
 800f05e:	7030      	strb	r0, [r6, #0]
 800f060:	490b      	ldr	r1, [pc, #44]	; (800f090 <net_set_dhcp+0x50>)
 800f062:	480a      	ldr	r0, [pc, #40]	; (800f08c <net_set_dhcp+0x4c>)
 800f064:	f7f8 f92e 	bl	80072c4 <arp_init>
 800f068:	4809      	ldr	r0, [pc, #36]	; (800f090 <net_set_dhcp+0x50>)
 800f06a:	f001 ffd3 	bl	8011014 <ip_set_ip>
 800f06e:	4a08      	ldr	r2, [pc, #32]	; (800f090 <net_set_dhcp+0x50>)
 800f070:	1e6b      	subs	r3, r5, #1
 800f072:	350b      	adds	r5, #11
 800f074:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f078:	f803 1f01 	strb.w	r1, [r3, #1]!
 800f07c:	42ab      	cmp	r3, r5
 800f07e:	d1f9      	bne.n	800f074 <net_set_dhcp+0x34>
 800f080:	4b04      	ldr	r3, [pc, #16]	; (800f094 <net_set_dhcp+0x54>)
 800f082:	4620      	mov	r0, r4
 800f084:	701c      	strb	r4, [r3, #0]
 800f086:	bd70      	pop	{r4, r5, r6, pc}
 800f088:	2401      	movs	r4, #1
 800f08a:	e7e9      	b.n	800f060 <net_set_dhcp+0x20>
 800f08c:	20001d00 	andcs	r1, r0, r0, lsl #26
 800f090:	20001cf4 	strdcs	r1, [r0], -r4
 800f094:	20001d06 	andcs	r1, r0, r6, lsl #26

0800f098 <net_dhcp_release>:
 800f098:	b508      	push	{r3, lr}
 800f09a:	f001 fea3 	bl	8010de4 <dhcp_client_release>
 800f09e:	2200      	movs	r2, #0
 800f0a0:	4b01      	ldr	r3, [pc, #4]	; (800f0a8 <net_dhcp_release+0x10>)
 800f0a2:	701a      	strb	r2, [r3, #0]
 800f0a4:	bd08      	pop	{r3, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20001d06 	andcs	r1, r0, r6, lsl #26

0800f0ac <net_timers_run>:
 800f0ac:	4b05      	ldr	r3, [pc, #20]	; (800f0c4 <net_timers_run+0x18>)
 800f0ae:	4a06      	ldr	r2, [pc, #24]	; (800f0c8 <net_timers_run+0x1c>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	6811      	ldr	r1, [r2, #0]
 800f0b4:	4299      	cmp	r1, r3
 800f0b6:	d803      	bhi.n	800f0c0 <net_timers_run+0x14>
 800f0b8:	3364      	adds	r3, #100	; 0x64
 800f0ba:	6013      	str	r3, [r2, #0]
 800f0bc:	f001 bf20 	b.w	8010f00 <igmp_timer>
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	20009d04 	andcs	r9, r0, r4, lsl #26
 800f0c8:	20001d0c 	andcs	r1, r0, ip, lsl #26

0800f0cc <rfc3927>:
 800f0cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d0:	4606      	mov	r6, r0
 800f0d2:	25ff      	movs	r5, #255	; 0xff
 800f0d4:	4b18      	ldr	r3, [pc, #96]	; (800f138 <rfc3927+0x6c>)
 800f0d6:	4f19      	ldr	r7, [pc, #100]	; (800f13c <rfc3927+0x70>)
 800f0d8:	791a      	ldrb	r2, [r3, #4]
 800f0da:	78dc      	ldrb	r4, [r3, #3]
 800f0dc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800f140 <rfc3927+0x74>
 800f0e0:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800f0e4:	f8d7 9000 	ldr.w	r9, [r7]
 800f0e8:	f8df b058 	ldr.w	fp, [pc, #88]	; 800f144 <rfc3927+0x78>
 800f0ec:	f8df a058 	ldr.w	sl, [pc, #88]	; 800f148 <rfc3927+0x7c>
 800f0f0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800f0f4:	4659      	mov	r1, fp
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f001 fc62 	bl	80109c0 <arp_cache_lookup>
 800f0fc:	b190      	cbz	r0, 800f124 <rfc3927+0x58>
 800f0fe:	ba24      	rev	r4, r4
 800f100:	3401      	adds	r4, #1
 800f102:	3d01      	subs	r5, #1
 800f104:	ba24      	rev	r4, r4
 800f106:	b2ad      	uxth	r5, r5
 800f108:	4554      	cmp	r4, sl
 800f10a:	bf08      	it	eq
 800f10c:	4644      	moveq	r4, r8
 800f10e:	b18d      	cbz	r5, 800f134 <rfc3927+0x68>
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	eba3 0309 	sub.w	r3, r3, r9
 800f116:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f11a:	d3eb      	bcc.n	800f0f4 <rfc3927+0x28>
 800f11c:	2400      	movs	r4, #0
 800f11e:	4623      	mov	r3, r4
 800f120:	4620      	mov	r0, r4
 800f122:	e002      	b.n	800f12a <rfc3927+0x5e>
 800f124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f128:	2001      	movs	r0, #1
 800f12a:	e9c6 3401 	strd	r3, r4, [r6, #4]
 800f12e:	6034      	str	r4, [r6, #0]
 800f130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f134:	462c      	mov	r4, r5
 800f136:	e7f2      	b.n	800f11e <rfc3927+0x52>
 800f138:	20001d10 	andcs	r1, r0, r0, lsl sp
 800f13c:	20009d04 	andcs	r9, r0, r4, lsl #26
 800f140:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 800f144:	20001d18 	andcs	r1, r0, r8, lsl sp
 800f148:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

0800f14c <_init_tcb>:
 800f14c:	b510      	push	{r4, lr}
 800f14e:	4603      	mov	r3, r0
 800f150:	2400      	movs	r4, #0
 800f152:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800f156:	4293      	cmp	r3, r2
 800f158:	d10d      	bne.n	800f176 <_init_tcb+0x2a>
 800f15a:	4b08      	ldr	r3, [pc, #32]	; (800f17c <_init_tcb+0x30>)
 800f15c:	f640 3268 	movw	r2, #2920	; 0xb68
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	8702      	strh	r2, [r0, #56]	; 0x38
 800f164:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f168:	6283      	str	r3, [r0, #40]	; 0x28
 800f16a:	6243      	str	r3, [r0, #36]	; 0x24
 800f16c:	2301      	movs	r3, #1
 800f16e:	8001      	strh	r1, [r0, #0]
 800f170:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800f174:	bd10      	pop	{r4, pc}
 800f176:	f803 4b01 	strb.w	r4, [r3], #1
 800f17a:	e7ec      	b.n	800f156 <_init_tcb+0xa>
 800f17c:	20009d04 	andcs	r9, r0, r4, lsl #26

0800f180 <memcpy.isra.0>:
 800f180:	3801      	subs	r0, #1
 800f182:	440a      	add	r2, r1
 800f184:	4291      	cmp	r1, r2
 800f186:	d100      	bne.n	800f18a <memcpy.isra.0+0xa>
 800f188:	4770      	bx	lr
 800f18a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f18e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f192:	e7f7      	b.n	800f184 <memcpy.isra.0+0x4>

0800f194 <_bswap32>:
 800f194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f196:	2204      	movs	r2, #4
 800f198:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 800f19c:	4629      	mov	r1, r5
 800f19e:	4604      	mov	r4, r0
 800f1a0:	eb0d 0002 	add.w	r0, sp, r2
 800f1a4:	f7ff ffec 	bl	800f180 <memcpy.isra.0>
 800f1a8:	2204      	movs	r2, #4
 800f1aa:	9b01      	ldr	r3, [sp, #4]
 800f1ac:	eb0d 0102 	add.w	r1, sp, r2
 800f1b0:	ba1b      	rev	r3, r3
 800f1b2:	4628      	mov	r0, r5
 800f1b4:	9301      	str	r3, [sp, #4]
 800f1b6:	f7ff ffe3 	bl	800f180 <memcpy.isra.0>
 800f1ba:	2204      	movs	r2, #4
 800f1bc:	3426      	adds	r4, #38	; 0x26
 800f1be:	eb0d 0002 	add.w	r0, sp, r2
 800f1c2:	4621      	mov	r1, r4
 800f1c4:	f7ff ffdc 	bl	800f180 <memcpy.isra.0>
 800f1c8:	2204      	movs	r2, #4
 800f1ca:	9b01      	ldr	r3, [sp, #4]
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	ba1b      	rev	r3, r3
 800f1d0:	eb0d 0102 	add.w	r1, sp, r2
 800f1d4:	9301      	str	r3, [sp, #4]
 800f1d6:	f7ff ffd3 	bl	800f180 <memcpy.isra.0>
 800f1da:	b003      	add	sp, #12
 800f1dc:	bd30      	pop	{r4, r5, pc}
	...

0800f1e0 <_tcp_send_package>:
 800f1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e4:	7a0b      	ldrb	r3, [r1, #8]
 800f1e6:	4605      	mov	r5, r0
 800f1e8:	f013 0f02 	tst.w	r3, #2
 800f1ec:	bf0c      	ite	eq
 800f1ee:	f04f 0805 	moveq.w	r8, #5
 800f1f2:	f04f 0806 	movne.w	r8, #6
 800f1f6:	f04f 0a00 	mov.w	sl, #0
 800f1fa:	4c47      	ldr	r4, [pc, #284]	; (800f318 <_tcp_send_package+0x138>)
 800f1fc:	460f      	mov	r7, r1
 800f1fe:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 800f200:	f100 0108 	add.w	r1, r0, #8
 800f204:	2206      	movs	r2, #6
 800f206:	4620      	mov	r0, r4
 800f208:	f7ff ffba 	bl	800f180 <memcpy.isra.0>
 800f20c:	4a43      	ldr	r2, [pc, #268]	; (800f31c <_tcp_send_package+0x13c>)
 800f20e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800f212:	8813      	ldrh	r3, [r2, #0]
 800f214:	b2b6      	uxth	r6, r6
 800f216:	1c59      	adds	r1, r3, #1
 800f218:	8263      	strh	r3, [r4, #18]
 800f21a:	f105 0904 	add.w	r9, r5, #4
 800f21e:	f106 0314 	add.w	r3, r6, #20
 800f222:	ba5b      	rev16	r3, r3
 800f224:	8011      	strh	r1, [r2, #0]
 800f226:	f104 001e 	add.w	r0, r4, #30
 800f22a:	2204      	movs	r2, #4
 800f22c:	4649      	mov	r1, r9
 800f22e:	8223      	strh	r3, [r4, #16]
 800f230:	f7ff ffa6 	bl	800f180 <memcpy.isra.0>
 800f234:	2114      	movs	r1, #20
 800f236:	f104 000e 	add.w	r0, r4, #14
 800f23a:	f8a4 a018 	strh.w	sl, [r4, #24]
 800f23e:	f001 fef2 	bl	8011026 <net_chksum>
 800f242:	882b      	ldrh	r3, [r5, #0]
 800f244:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800f248:	8463      	strh	r3, [r4, #34]	; 0x22
 800f24a:	886b      	ldrh	r3, [r5, #2]
 800f24c:	8320      	strh	r0, [r4, #24]
 800f24e:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 800f254:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 800f25e:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 800f262:	7a3b      	ldrb	r3, [r7, #8]
 800f264:	8622      	strh	r2, [r4, #48]	; 0x30
 800f266:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800f26a:	079b      	lsls	r3, r3, #30
 800f26c:	bf48      	it	mi
 800f26e:	f240 4302 	movwmi	r3, #1026	; 0x402
 800f272:	8baa      	ldrh	r2, [r5, #28]
 800f274:	bf48      	it	mi
 800f276:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 800f278:	86a2      	strh	r2, [r4, #52]	; 0x34
 800f27a:	bf42      	ittt	mi
 800f27c:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 800f280:	4622      	movmi	r2, r4
 800f282:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 800f286:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f288:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 800f28c:	bf58      	it	pl
 800f28e:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 800f292:	2b00      	cmp	r3, #0
 800f294:	d13e      	bne.n	800f314 <_tcp_send_package+0x134>
 800f296:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800f298:	481f      	ldr	r0, [pc, #124]	; (800f318 <_tcp_send_package+0x138>)
 800f29a:	ba5b      	rev16	r3, r3
 800f29c:	8463      	strh	r3, [r4, #34]	; 0x22
 800f29e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800f2a0:	ba5b      	rev16	r3, r3
 800f2a2:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f2a4:	f7ff ff76 	bl	800f194 <_bswap32>
 800f2a8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800f2aa:	a801      	add	r0, sp, #4
 800f2ac:	ba5b      	rev16	r3, r3
 800f2ae:	8623      	strh	r3, [r4, #48]	; 0x30
 800f2b0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f2b2:	220c      	movs	r2, #12
 800f2b4:	ba5b      	rev16	r3, r3
 800f2b6:	491a      	ldr	r1, [pc, #104]	; (800f320 <_tcp_send_package+0x140>)
 800f2b8:	86a3      	strh	r3, [r4, #52]	; 0x34
 800f2ba:	f7ff ff61 	bl	800f180 <memcpy.isra.0>
 800f2be:	2204      	movs	r2, #4
 800f2c0:	4918      	ldr	r1, [pc, #96]	; (800f324 <_tcp_send_package+0x144>)
 800f2c2:	4817      	ldr	r0, [pc, #92]	; (800f320 <_tcp_send_package+0x140>)
 800f2c4:	f7ff ff5c 	bl	800f180 <memcpy.isra.0>
 800f2c8:	2204      	movs	r2, #4
 800f2ca:	4649      	mov	r1, r9
 800f2cc:	4816      	ldr	r0, [pc, #88]	; (800f328 <_tcp_send_package+0x148>)
 800f2ce:	f7ff ff57 	bl	800f180 <memcpy.isra.0>
 800f2d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f2d6:	f106 010c 	add.w	r1, r6, #12
 800f2da:	83e3      	strh	r3, [r4, #30]
 800f2dc:	4810      	ldr	r0, [pc, #64]	; (800f320 <_tcp_send_package+0x140>)
 800f2de:	ba73      	rev16	r3, r6
 800f2e0:	8423      	strh	r3, [r4, #32]
 800f2e2:	f001 fea0 	bl	8011026 <net_chksum>
 800f2e6:	a901      	add	r1, sp, #4
 800f2e8:	4605      	mov	r5, r0
 800f2ea:	220c      	movs	r2, #12
 800f2ec:	480c      	ldr	r0, [pc, #48]	; (800f320 <_tcp_send_package+0x140>)
 800f2ee:	f7ff ff47 	bl	800f180 <memcpy.isra.0>
 800f2f2:	4809      	ldr	r0, [pc, #36]	; (800f318 <_tcp_send_package+0x138>)
 800f2f4:	f106 0122 	add.w	r1, r6, #34	; 0x22
 800f2f8:	8665      	strh	r5, [r4, #50]	; 0x32
 800f2fa:	b004      	add	sp, #16
 800f2fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f300:	f004 bd02 	b.w	8013d08 <emac_eth_send>
 800f304:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800f306:	5cc9      	ldrb	r1, [r1, r3]
 800f308:	54d1      	strb	r1, [r2, r3]
 800f30a:	3301      	adds	r3, #1
 800f30c:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800f30e:	4299      	cmp	r1, r3
 800f310:	d8f8      	bhi.n	800f304 <_tcp_send_package+0x124>
 800f312:	e7c0      	b.n	800f296 <_tcp_send_package+0xb6>
 800f314:	2300      	movs	r3, #0
 800f316:	e7f9      	b.n	800f30c <_tcp_send_package+0x12c>
 800f318:	200028d8 	ldrdcs	r2, [r0], -r8
 800f31c:	20001d20 	andcs	r1, r0, r0, lsr #26
 800f320:	200028ee 	andcs	r2, r0, lr, ror #17
 800f324:	20001cf4 	strdcs	r1, [r0], -r4
 800f328:	200028f2 	strdcs	r2, [r0], -r2	; <UNPREDICTABLE>

0800f32c <_send_reset>:
 800f32c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f32e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800f332:	4604      	mov	r4, r0
 800f334:	075a      	lsls	r2, r3, #29
 800f336:	460e      	mov	r6, r1
 800f338:	d421      	bmi.n	800f37e <_send_reset+0x52>
 800f33a:	2204      	movs	r2, #4
 800f33c:	f013 0310 	ands.w	r3, r3, #16
 800f340:	f88d 200c 	strb.w	r2, [sp, #12]
 800f344:	d01d      	beq.n	800f382 <_send_reset+0x56>
 800f346:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 800f34a:	4668      	mov	r0, sp
 800f34c:	f7ff ff18 	bl	800f180 <memcpy.isra.0>
 800f350:	9b00      	ldr	r3, [sp, #0]
 800f352:	9301      	str	r3, [sp, #4]
 800f354:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800f358:	4668      	mov	r0, sp
 800f35a:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800f35e:	f104 0126 	add.w	r1, r4, #38	; 0x26
 800f362:	07db      	lsls	r3, r3, #31
 800f364:	f04f 0204 	mov.w	r2, #4
 800f368:	bf48      	it	mi
 800f36a:	3501      	addmi	r5, #1
 800f36c:	f7ff ff08 	bl	800f180 <memcpy.isra.0>
 800f370:	9b00      	ldr	r3, [sp, #0]
 800f372:	4630      	mov	r0, r6
 800f374:	441d      	add	r5, r3
 800f376:	a901      	add	r1, sp, #4
 800f378:	9502      	str	r5, [sp, #8]
 800f37a:	f7ff ff31 	bl	800f1e0 <_tcp_send_package>
 800f37e:	b004      	add	sp, #16
 800f380:	bd70      	pop	{r4, r5, r6, pc}
 800f382:	9301      	str	r3, [sp, #4]
 800f384:	2314      	movs	r3, #20
 800f386:	f88d 300c 	strb.w	r3, [sp, #12]
 800f38a:	e7e3      	b.n	800f354 <_send_reset+0x28>

0800f38c <tcp_begin>:
 800f38c:	b508      	push	{r3, lr}
 800f38e:	4b0a      	ldr	r3, [pc, #40]	; (800f3b8 <tcp_begin+0x2c>)
 800f390:	4601      	mov	r1, r0
 800f392:	881a      	ldrh	r2, [r3, #0]
 800f394:	4282      	cmp	r2, r0
 800f396:	d102      	bne.n	800f39e <tcp_begin+0x12>
 800f398:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f39c:	b130      	cbz	r0, 800f3ac <tcp_begin+0x20>
 800f39e:	b12a      	cbz	r2, 800f3ac <tcp_begin+0x20>
 800f3a0:	4806      	ldr	r0, [pc, #24]	; (800f3bc <tcp_begin+0x30>)
 800f3a2:	f003 f86d 	bl	8012480 <console_error>
 800f3a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3aa:	bd08      	pop	{r3, pc}
 800f3ac:	4802      	ldr	r0, [pc, #8]	; (800f3b8 <tcp_begin+0x2c>)
 800f3ae:	8019      	strh	r1, [r3, #0]
 800f3b0:	f7ff fecc 	bl	800f14c <_init_tcb>
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	e7f8      	b.n	800f3aa <tcp_begin+0x1e>
 800f3b8:	20002894 	mulcs	r0, r4, r8
 800f3bc:	08016a42 	stmdaeq	r1, {r1, r6, r9, fp, sp, lr}

0800f3c0 <tcp_write>:
 800f3c0:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	bf28      	it	cs
 800f3c8:	461a      	movcs	r2, r3
 800f3ca:	2344      	movs	r3, #68	; 0x44
 800f3cc:	b530      	push	{r4, r5, lr}
 800f3ce:	4c0d      	ldr	r4, [pc, #52]	; (800f404 <tcp_write+0x44>)
 800f3d0:	b085      	sub	sp, #20
 800f3d2:	fb03 4400 	mla	r4, r3, r0, r4
 800f3d6:	6963      	ldr	r3, [r4, #20]
 800f3d8:	62e1      	str	r1, [r4, #44]	; 0x2c
 800f3da:	9301      	str	r3, [sp, #4]
 800f3dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f3de:	4620      	mov	r0, r4
 800f3e0:	9302      	str	r3, [sp, #8]
 800f3e2:	2318      	movs	r3, #24
 800f3e4:	8622      	strh	r2, [r4, #48]	; 0x30
 800f3e6:	a901      	add	r1, sp, #4
 800f3e8:	4615      	mov	r5, r2
 800f3ea:	f88d 300c 	strb.w	r3, [sp, #12]
 800f3ee:	f7ff fef7 	bl	800f1e0 <_tcp_send_package>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f3f6:	8623      	strh	r3, [r4, #48]	; 0x30
 800f3f8:	6963      	ldr	r3, [r4, #20]
 800f3fa:	442b      	add	r3, r5
 800f3fc:	6163      	str	r3, [r4, #20]
 800f3fe:	b005      	add	sp, #20
 800f400:	bd30      	pop	{r4, r5, pc}
 800f402:	bf00      	nop
 800f404:	20002894 	mulcs	r0, r4, r8

0800f408 <tcp_read>:
 800f408:	2344      	movs	r3, #68	; 0x44
 800f40a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f40c:	4c1c      	ldr	r4, [pc, #112]	; (800f480 <tcp_read+0x78>)
 800f40e:	b085      	sub	sp, #20
 800f410:	fb03 4400 	mla	r4, r3, r0, r4
 800f414:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f418:	2b07      	cmp	r3, #7
 800f41a:	d112      	bne.n	800f442 <tcp_read+0x3a>
 800f41c:	6963      	ldr	r3, [r4, #20]
 800f41e:	4620      	mov	r0, r4
 800f420:	9301      	str	r3, [sp, #4]
 800f422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f424:	a901      	add	r1, sp, #4
 800f426:	9302      	str	r3, [sp, #8]
 800f428:	2311      	movs	r3, #17
 800f42a:	f88d 300c 	strb.w	r3, [sp, #12]
 800f42e:	f7ff fed7 	bl	800f1e0 <_tcp_send_package>
 800f432:	2309      	movs	r3, #9
 800f434:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f438:	6963      	ldr	r3, [r4, #20]
 800f43a:	3301      	adds	r3, #1
 800f43c:	6163      	str	r3, [r4, #20]
 800f43e:	2000      	movs	r0, #0
 800f440:	e01b      	b.n	800f47a <tcp_read+0x72>
 800f442:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 800f446:	4358      	muls	r0, r3
 800f448:	4a0e      	ldr	r2, [pc, #56]	; (800f484 <tcp_read+0x7c>)
 800f44a:	1817      	adds	r7, r2, r0
 800f44c:	887b      	ldrh	r3, [r7, #2]
 800f44e:	5a15      	ldrh	r5, [r2, r0]
 800f450:	429d      	cmp	r5, r3
 800f452:	d0f4      	beq.n	800f43e <tcp_read+0x36>
 800f454:	f240 55b6 	movw	r5, #1462	; 0x5b6
 800f458:	435d      	muls	r5, r3
 800f45a:	1d06      	adds	r6, r0, #4
 800f45c:	442e      	add	r6, r5
 800f45e:	4416      	add	r6, r2
 800f460:	4405      	add	r5, r0
 800f462:	600e      	str	r6, [r1, #0]
 800f464:	442a      	add	r2, r5
 800f466:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 800f46a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800f46c:	3301      	adds	r3, #1
 800f46e:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800f472:	f003 0301 	and.w	r3, r3, #1
 800f476:	8722      	strh	r2, [r4, #56]	; 0x38
 800f478:	807b      	strh	r3, [r7, #2]
 800f47a:	b005      	add	sp, #20
 800f47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f47e:	bf00      	nop
 800f480:	20002894 	mulcs	r0, r4, r8
 800f484:	20001d24 	andcs	r1, r0, r4, lsr #26

0800f488 <memcpy.isra.0>:
 800f488:	3801      	subs	r0, #1
 800f48a:	440a      	add	r2, r1
 800f48c:	4291      	cmp	r1, r2
 800f48e:	d100      	bne.n	800f492 <memcpy.isra.0+0xa>
 800f490:	4770      	bx	lr
 800f492:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f496:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f49a:	e7f7      	b.n	800f48c <memcpy.isra.0+0x4>

0800f49c <net_memcpy>:
 800f49c:	ea40 0301 	orr.w	r3, r0, r1
 800f4a0:	079b      	lsls	r3, r3, #30
 800f4a2:	b570      	push	{r4, r5, r6, lr}
 800f4a4:	d108      	bne.n	800f4b8 <net_memcpy+0x1c>
 800f4a6:	f022 0303 	bic.w	r3, r2, #3
 800f4aa:	1f04      	subs	r4, r0, #4
 800f4ac:	18cd      	adds	r5, r1, r3
 800f4ae:	42a9      	cmp	r1, r5
 800f4b0:	d108      	bne.n	800f4c4 <net_memcpy+0x28>
 800f4b2:	1ad2      	subs	r2, r2, r3
 800f4b4:	4403      	add	r3, r0
 800f4b6:	e000      	b.n	800f4ba <net_memcpy+0x1e>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	3b01      	subs	r3, #1
 800f4bc:	440a      	add	r2, r1
 800f4be:	4291      	cmp	r1, r2
 800f4c0:	d105      	bne.n	800f4ce <net_memcpy+0x32>
 800f4c2:	bd70      	pop	{r4, r5, r6, pc}
 800f4c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f4c8:	f844 6f04 	str.w	r6, [r4, #4]!
 800f4cc:	e7ef      	b.n	800f4ae <net_memcpy+0x12>
 800f4ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4d6:	e7f2      	b.n	800f4be <net_memcpy+0x22>

0800f4d8 <udp_set_ip>:
 800f4d8:	2204      	movs	r2, #4
 800f4da:	b513      	push	{r0, r1, r4, lr}
 800f4dc:	4604      	mov	r4, r0
 800f4de:	6803      	ldr	r3, [r0, #0]
 800f4e0:	eb0d 0102 	add.w	r1, sp, r2
 800f4e4:	4808      	ldr	r0, [pc, #32]	; (800f508 <udp_set_ip+0x30>)
 800f4e6:	9301      	str	r3, [sp, #4]
 800f4e8:	f7ff ffce 	bl	800f488 <memcpy.isra.0>
 800f4ec:	6862      	ldr	r2, [r4, #4]
 800f4ee:	4b07      	ldr	r3, [pc, #28]	; (800f50c <udp_set_ip+0x34>)
 800f4f0:	43d1      	mvns	r1, r2
 800f4f2:	6019      	str	r1, [r3, #0]
 800f4f4:	6823      	ldr	r3, [r4, #0]
 800f4f6:	4013      	ands	r3, r2
 800f4f8:	4a05      	ldr	r2, [pc, #20]	; (800f510 <udp_set_ip+0x38>)
 800f4fa:	6013      	str	r3, [r2, #0]
 800f4fc:	68a2      	ldr	r2, [r4, #8]
 800f4fe:	4b05      	ldr	r3, [pc, #20]	; (800f514 <udp_set_ip+0x3c>)
 800f500:	601a      	str	r2, [r3, #0]
 800f502:	b002      	add	sp, #8
 800f504:	bd10      	pop	{r4, pc}
 800f506:	bf00      	nop
 800f508:	20008bae 	andcs	r8, r0, lr, lsr #23
 800f50c:	20002ec4 	andcs	r2, r0, r4, asr #29
 800f510:	20002ecc 	andcs	r2, r0, ip, asr #29
 800f514:	20002ec8 	andcs	r2, r0, r8, asr #29

0800f518 <udp_bind>:
 800f518:	4a0a      	ldr	r2, [pc, #40]	; (800f544 <udp_bind+0x2c>)
 800f51a:	4603      	mov	r3, r0
 800f51c:	b510      	push	{r4, lr}
 800f51e:	2000      	movs	r0, #0
 800f520:	4614      	mov	r4, r2
 800f522:	f852 1b04 	ldr.w	r1, [r2], #4
 800f526:	4299      	cmp	r1, r3
 800f528:	d008      	beq.n	800f53c <udp_bind+0x24>
 800f52a:	b141      	cbz	r1, 800f53e <udp_bind+0x26>
 800f52c:	3001      	adds	r0, #1
 800f52e:	2808      	cmp	r0, #8
 800f530:	d1f7      	bne.n	800f522 <udp_bind+0xa>
 800f532:	4805      	ldr	r0, [pc, #20]	; (800f548 <udp_bind+0x30>)
 800f534:	f002 ffa4 	bl	8012480 <console_error>
 800f538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f53c:	bd10      	pop	{r4, pc}
 800f53e:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800f542:	e7fb      	b.n	800f53c <udp_bind+0x24>
 800f544:	20002ed4 	ldrdcs	r2, [r0], -r4
 800f548:	08016a62 	stmdaeq	r1, {r1, r5, r6, r9, fp, sp, lr}

0800f54c <udp_unbind>:
 800f54c:	4a0c      	ldr	r2, [pc, #48]	; (800f580 <udp_unbind+0x34>)
 800f54e:	2300      	movs	r3, #0
 800f550:	4611      	mov	r1, r2
 800f552:	b510      	push	{r4, lr}
 800f554:	f852 4b04 	ldr.w	r4, [r2], #4
 800f558:	4284      	cmp	r4, r0
 800f55a:	d108      	bne.n	800f56e <udp_unbind+0x22>
 800f55c:	2000      	movs	r0, #0
 800f55e:	f640 3294 	movw	r2, #2964	; 0xb94
 800f562:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800f566:	4353      	muls	r3, r2
 800f568:	4a06      	ldr	r2, [pc, #24]	; (800f584 <udp_unbind+0x38>)
 800f56a:	50d0      	str	r0, [r2, r3]
 800f56c:	bd10      	pop	{r4, pc}
 800f56e:	3301      	adds	r3, #1
 800f570:	2b08      	cmp	r3, #8
 800f572:	d1ef      	bne.n	800f554 <udp_unbind+0x8>
 800f574:	4804      	ldr	r0, [pc, #16]	; (800f588 <udp_unbind+0x3c>)
 800f576:	f002 ff83 	bl	8012480 <console_error>
 800f57a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f57e:	e7f5      	b.n	800f56c <udp_unbind+0x20>
 800f580:	20002ed4 	ldrdcs	r2, [r0], -r4
 800f584:	20002ef4 	strdcs	r2, [r0], -r4
 800f588:	08016a67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, fp, sp, lr}

0800f58c <udp_recv>:
 800f58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f590:	4604      	mov	r4, r0
 800f592:	4698      	mov	r8, r3
 800f594:	f640 3394 	movw	r3, #2964	; 0xb94
 800f598:	435c      	muls	r4, r3
 800f59a:	4608      	mov	r0, r1
 800f59c:	4915      	ldr	r1, [pc, #84]	; (800f5f4 <udp_recv+0x68>)
 800f59e:	190f      	adds	r7, r1, r4
 800f5a0:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800f5a4:	5b0b      	ldrh	r3, [r1, r4]
 800f5a6:	4563      	cmp	r3, ip
 800f5a8:	d021      	beq.n	800f5ee <udp_recv+0x62>
 800f5aa:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800f5ae:	fb03 fc0c 	mul.w	ip, r3, ip
 800f5b2:	eb0c 0604 	add.w	r6, ip, r4
 800f5b6:	440e      	add	r6, r1
 800f5b8:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 800f5bc:	3404      	adds	r4, #4
 800f5be:	4295      	cmp	r5, r2
 800f5c0:	bf28      	it	cs
 800f5c2:	4615      	movcs	r5, r2
 800f5c4:	4464      	add	r4, ip
 800f5c6:	462a      	mov	r2, r5
 800f5c8:	4421      	add	r1, r4
 800f5ca:	f7ff ff67 	bl	800f49c <net_memcpy>
 800f5ce:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 800f5d2:	f8c8 3000 	str.w	r3, [r8]
 800f5d6:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 800f5da:	9b06      	ldr	r3, [sp, #24]
 800f5dc:	801a      	strh	r2, [r3, #0]
 800f5de:	887b      	ldrh	r3, [r7, #2]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	f003 0301 	and.w	r3, r3, #1
 800f5e6:	807b      	strh	r3, [r7, #2]
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ee:	2500      	movs	r5, #0
 800f5f0:	e7fa      	b.n	800f5e8 <udp_recv+0x5c>
 800f5f2:	bf00      	nop
 800f5f4:	20002ef4 	strdcs	r2, [r0], -r4

0800f5f8 <udp_recv2>:
 800f5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5fa:	f640 3594 	movw	r5, #2964	; 0xb94
 800f5fe:	4368      	muls	r0, r5
 800f600:	4c0f      	ldr	r4, [pc, #60]	; (800f640 <udp_recv2+0x48>)
 800f602:	1827      	adds	r7, r4, r0
 800f604:	887d      	ldrh	r5, [r7, #2]
 800f606:	5a26      	ldrh	r6, [r4, r0]
 800f608:	42ae      	cmp	r6, r5
 800f60a:	d017      	beq.n	800f63c <udp_recv2+0x44>
 800f60c:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 800f610:	fb0c f505 	mul.w	r5, ip, r5
 800f614:	1d06      	adds	r6, r0, #4
 800f616:	442e      	add	r6, r5
 800f618:	4405      	add	r5, r0
 800f61a:	4426      	add	r6, r4
 800f61c:	442c      	add	r4, r5
 800f61e:	600e      	str	r6, [r1, #0]
 800f620:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 800f624:	6011      	str	r1, [r2, #0]
 800f626:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 800f62a:	801a      	strh	r2, [r3, #0]
 800f62c:	887b      	ldrh	r3, [r7, #2]
 800f62e:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 800f632:	3301      	adds	r3, #1
 800f634:	f003 0301 	and.w	r3, r3, #1
 800f638:	807b      	strh	r3, [r7, #2]
 800f63a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f63c:	2000      	movs	r0, #0
 800f63e:	e7fc      	b.n	800f63a <udp_recv2+0x42>
 800f640:	20002ef4 	strdcs	r2, [r0], -r4

0800f644 <udp_send>:
 800f644:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f648:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800f77c <udp_send+0x138>
 800f64c:	461c      	mov	r4, r3
 800f64e:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 800f652:	4607      	mov	r7, r0
 800f654:	4688      	mov	r8, r1
 800f656:	4616      	mov	r6, r2
 800f658:	2b00      	cmp	r3, #0
 800f65a:	f000 808b 	beq.w	800f774 <udp_send+0x130>
 800f65e:	1c63      	adds	r3, r4, #1
 800f660:	d141      	bne.n	800f6e6 <udp_send+0xa2>
 800f662:	4a47      	ldr	r2, [pc, #284]	; (800f780 <udp_send+0x13c>)
 800f664:	2307      	movs	r3, #7
 800f666:	4611      	mov	r1, r2
 800f668:	20ff      	movs	r0, #255	; 0xff
 800f66a:	e001      	b.n	800f670 <udp_send+0x2c>
 800f66c:	f802 0b01 	strb.w	r0, [r2], #1
 800f670:	3b01      	subs	r3, #1
 800f672:	d1fb      	bne.n	800f66c <udp_send+0x28>
 800f674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f678:	83cb      	strh	r3, [r1, #30]
 800f67a:	840b      	strh	r3, [r1, #32]
 800f67c:	2500      	movs	r5, #0
 800f67e:	f8df a104 	ldr.w	sl, [pc, #260]	; 800f784 <udp_send+0x140>
 800f682:	4c3f      	ldr	r4, [pc, #252]	; (800f780 <udp_send+0x13c>)
 800f684:	f8ba 3000 	ldrh.w	r3, [sl]
 800f688:	2114      	movs	r1, #20
 800f68a:	8263      	strh	r3, [r4, #18]
 800f68c:	f106 031c 	add.w	r3, r6, #28
 800f690:	ba5b      	rev16	r3, r3
 800f692:	f104 000e 	add.w	r0, r4, #14
 800f696:	8223      	strh	r3, [r4, #16]
 800f698:	8325      	strh	r5, [r4, #24]
 800f69a:	f001 fcc4 	bl	8011026 <net_chksum>
 800f69e:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 800f6a2:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800f6a6:	ba5b      	rev16	r3, r3
 800f6a8:	8463      	strh	r3, [r4, #34]	; 0x22
 800f6aa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800f6ae:	4632      	mov	r2, r6
 800f6b0:	ba5b      	rev16	r3, r3
 800f6b2:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f6b4:	f106 0308 	add.w	r3, r6, #8
 800f6b8:	ba5b      	rev16	r3, r3
 800f6ba:	bf28      	it	cs
 800f6bc:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 800f6c0:	4641      	mov	r1, r8
 800f6c2:	8320      	strh	r0, [r4, #24]
 800f6c4:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800f6c8:	84e3      	strh	r3, [r4, #38]	; 0x26
 800f6ca:	f7ff fee7 	bl	800f49c <net_memcpy>
 800f6ce:	4620      	mov	r0, r4
 800f6d0:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 800f6d4:	f004 fb18 	bl	8013d08 <emac_eth_send>
 800f6d8:	f8ba 3000 	ldrh.w	r3, [sl]
 800f6dc:	4628      	mov	r0, r5
 800f6de:	3301      	adds	r3, #1
 800f6e0:	f8aa 3000 	strh.w	r3, [sl]
 800f6e4:	e037      	b.n	800f756 <udp_send+0x112>
 800f6e6:	4b28      	ldr	r3, [pc, #160]	; (800f788 <udp_send+0x144>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	43a3      	bics	r3, r4
 800f6ec:	d10f      	bne.n	800f70e <udp_send+0xca>
 800f6ee:	2307      	movs	r3, #7
 800f6f0:	21ff      	movs	r1, #255	; 0xff
 800f6f2:	4a23      	ldr	r2, [pc, #140]	; (800f780 <udp_send+0x13c>)
 800f6f4:	e001      	b.n	800f6fa <udp_send+0xb6>
 800f6f6:	f802 1b01 	strb.w	r1, [r2], #1
 800f6fa:	3b01      	subs	r3, #1
 800f6fc:	d1fb      	bne.n	800f6f6 <udp_send+0xb2>
 800f6fe:	2204      	movs	r2, #4
 800f700:	4822      	ldr	r0, [pc, #136]	; (800f78c <udp_send+0x148>)
 800f702:	eb0d 0102 	add.w	r1, sp, r2
 800f706:	9401      	str	r4, [sp, #4]
 800f708:	f7ff febe 	bl	800f488 <memcpy.isra.0>
 800f70c:	e7b6      	b.n	800f67c <udp_send+0x38>
 800f70e:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 800f712:	2be0      	cmp	r3, #224	; 0xe0
 800f714:	d10e      	bne.n	800f734 <udp_send+0xf0>
 800f716:	491e      	ldr	r1, [pc, #120]	; (800f790 <udp_send+0x14c>)
 800f718:	f3c4 2306 	ubfx	r3, r4, #8, #7
 800f71c:	70cb      	strb	r3, [r1, #3]
 800f71e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800f722:	710b      	strb	r3, [r1, #4]
 800f724:	f3c4 6307 	ubfx	r3, r4, #24, #8
 800f728:	2206      	movs	r2, #6
 800f72a:	4815      	ldr	r0, [pc, #84]	; (800f780 <udp_send+0x13c>)
 800f72c:	714b      	strb	r3, [r1, #5]
 800f72e:	f7ff feab 	bl	800f488 <memcpy.isra.0>
 800f732:	e7e4      	b.n	800f6fe <udp_send+0xba>
 800f734:	4b17      	ldr	r3, [pc, #92]	; (800f794 <udp_send+0x150>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	43a3      	bics	r3, r4
 800f73a:	d00f      	beq.n	800f75c <udp_send+0x118>
 800f73c:	4d16      	ldr	r5, [pc, #88]	; (800f798 <udp_send+0x154>)
 800f73e:	4910      	ldr	r1, [pc, #64]	; (800f780 <udp_send+0x13c>)
 800f740:	6828      	ldr	r0, [r5, #0]
 800f742:	f001 f93d 	bl	80109c0 <arp_cache_lookup>
 800f746:	682b      	ldr	r3, [r5, #0]
 800f748:	4298      	cmp	r0, r3
 800f74a:	d0d8      	beq.n	800f6fe <udp_send+0xba>
 800f74c:	4813      	ldr	r0, [pc, #76]	; (800f79c <udp_send+0x158>)
 800f74e:	f002 fe97 	bl	8012480 <console_error>
 800f752:	f06f 0002 	mvn.w	r0, #2
 800f756:	b002      	add	sp, #8
 800f758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f75c:	4620      	mov	r0, r4
 800f75e:	4908      	ldr	r1, [pc, #32]	; (800f780 <udp_send+0x13c>)
 800f760:	f001 f92e 	bl	80109c0 <arp_cache_lookup>
 800f764:	42a0      	cmp	r0, r4
 800f766:	d0ca      	beq.n	800f6fe <udp_send+0xba>
 800f768:	480d      	ldr	r0, [pc, #52]	; (800f7a0 <udp_send+0x15c>)
 800f76a:	f002 fe89 	bl	8012480 <console_error>
 800f76e:	f06f 0001 	mvn.w	r0, #1
 800f772:	e7f0      	b.n	800f756 <udp_send+0x112>
 800f774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f778:	e7ed      	b.n	800f756 <udp_send+0x112>
 800f77a:	bf00      	nop
 800f77c:	20002ed4 	ldrdcs	r2, [r0], -r4
 800f780:	20008b94 	mulcs	r0, r4, fp
 800f784:	20002ed0 	ldrdcs	r2, [r0], -r0
 800f788:	20002ec4 	andcs	r2, r0, r4, asr #29
 800f78c:	20008bb2 			; <UNDEFINED> instruction: 0x20008bb2
 800f790:	20000014 	andcs	r0, r0, r4, lsl r0
 800f794:	20002ecc 	andcs	r2, r0, ip, asr #29
 800f798:	20002ec8 	andcs	r2, r0, r8, asr #29
 800f79c:	08016a6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r9, fp, sp, lr}
 800f7a0:	08016a95 	stmdaeq	r1, {r0, r2, r4, r7, r9, fp, sp, lr}

0800f7a4 <strlen>:
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	7811      	ldrb	r1, [r2, #0]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	2900      	cmp	r1, #0
 800f7ae:	d1fa      	bne.n	800f7a6 <strlen+0x2>
 800f7b0:	1a10      	subs	r0, r2, r0
 800f7b2:	4770      	bx	lr

0800f7b4 <strcmp>:
 800f7b4:	1e43      	subs	r3, r0, #1
 800f7b6:	3901      	subs	r1, #1
 800f7b8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800f7bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f7c0:	4290      	cmp	r0, r2
 800f7c2:	d001      	beq.n	800f7c8 <strcmp+0x14>
 800f7c4:	1a80      	subs	r0, r0, r2
 800f7c6:	e001      	b.n	800f7cc <strcmp+0x18>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d1f5      	bne.n	800f7b8 <strcmp+0x4>
 800f7cc:	4770      	bx	lr

0800f7ce <strcpy.isra.0>:
 800f7ce:	3801      	subs	r0, #1
 800f7d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7d4:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d1f9      	bne.n	800f7d0 <strcpy.isra.0+0x2>
 800f7dc:	4770      	bx	lr

0800f7de <strcat.isra.0>:
 800f7de:	b538      	push	{r3, r4, r5, lr}
 800f7e0:	4604      	mov	r4, r0
 800f7e2:	460d      	mov	r5, r1
 800f7e4:	f7ff ffde 	bl	800f7a4 <strlen>
 800f7e8:	4629      	mov	r1, r5
 800f7ea:	4420      	add	r0, r4
 800f7ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7f0:	f7ff bfed 	b.w	800f7ce <strcpy.isra.0>

0800f7f4 <MDNS::MDNS()>:
 800f7f4:	b513      	push	{r0, r1, r4, lr}
 800f7f6:	4604      	mov	r4, r0
 800f7f8:	a901      	add	r1, sp, #4
 800f7fa:	4804      	ldr	r0, [pc, #16]	; (800f80c <MDNS::MDNS()+0x18>)
 800f7fc:	f002 ffbe 	bl	801277c <inet_aton>
 800f800:	4620      	mov	r0, r4
 800f802:	4b03      	ldr	r3, [pc, #12]	; (800f810 <MDNS::MDNS()+0x1c>)
 800f804:	9a01      	ldr	r2, [sp, #4]
 800f806:	601a      	str	r2, [r3, #0]
 800f808:	b002      	add	sp, #8
 800f80a:	bd10      	pop	{r4, pc}
 800f80c:	08016ad0 	stmdaeq	r1, {r4, r6, r7, r9, fp, sp, lr}
 800f810:	20009188 	andcs	r9, r0, r8, lsl #3

0800f814 <MDNS::SetName(char const*)>:
 800f814:	b538      	push	{r3, r4, r5, lr}
 800f816:	4d0b      	ldr	r5, [pc, #44]	; (800f844 <MDNS::SetName(char const*)+0x30>)
 800f818:	460c      	mov	r4, r1
 800f81a:	6828      	ldr	r0, [r5, #0]
 800f81c:	b108      	cbz	r0, 800f822 <MDNS::SetName(char const*)+0xe>
 800f81e:	f002 ffa7 	bl	8012770 <operator delete[](void*)>
 800f822:	4620      	mov	r0, r4
 800f824:	f7ff ffbe 	bl	800f7a4 <strlen>
 800f828:	3007      	adds	r0, #7
 800f82a:	f002 ffa5 	bl	8012778 <operator new[](unsigned int)>
 800f82e:	4621      	mov	r1, r4
 800f830:	6028      	str	r0, [r5, #0]
 800f832:	f7ff ffcc 	bl	800f7ce <strcpy.isra.0>
 800f836:	6828      	ldr	r0, [r5, #0]
 800f838:	4903      	ldr	r1, [pc, #12]	; (800f848 <MDNS::SetName(char const*)+0x34>)
 800f83a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f83e:	f7ff bfce 	b.w	800f7de <strcat.isra.0>
 800f842:	bf00      	nop
 800f844:	200095b8 			; <UNDEFINED> instruction: 0x200095b8
 800f848:	08016ae0 	stmdaeq	r1, {r5, r6, r7, r9, fp, sp, lr}

0800f84c <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 800f84c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f850:	f04f 0e00 	mov.w	lr, #0
 800f854:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 800f858:	4675      	mov	r5, lr
 800f85a:	4e1b      	ldr	r6, [pc, #108]	; (800f8c8 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 800f85c:	4f1b      	ldr	r7, [pc, #108]	; (800f8cc <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 800f85e:	780b      	ldrb	r3, [r1, #0]
 800f860:	1c68      	adds	r0, r5, #1
 800f862:	b913      	cbnz	r3, 800f86a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 800f864:	7013      	strb	r3, [r2, #0]
 800f866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f86a:	2b3f      	cmp	r3, #63	; 0x3f
 800f86c:	d91c      	bls.n	800f8a8 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 800f86e:	7849      	ldrb	r1, [r1, #1]
 800f870:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 800f874:	430b      	orrs	r3, r1
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	f1be 0f00 	cmp.w	lr, #0
 800f87c:	bf08      	it	eq
 800f87e:	4605      	moveq	r5, r0
 800f880:	5ccc      	ldrb	r4, [r1, r3]
 800f882:	3301      	adds	r3, #1
 800f884:	4419      	add	r1, r3
 800f886:	2300      	movs	r3, #0
 800f888:	42a3      	cmp	r3, r4
 800f88a:	5cc8      	ldrb	r0, [r1, r3]
 800f88c:	d309      	bcc.n	800f8a2 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 800f88e:	f04f 0e01 	mov.w	lr, #1
 800f892:	4421      	add	r1, r4
 800f894:	4414      	add	r4, r2
 800f896:	780b      	ldrb	r3, [r1, #0]
 800f898:	b10b      	cbz	r3, 800f89e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 800f89a:	f804 cb01 	strb.w	ip, [r4], #1
 800f89e:	4622      	mov	r2, r4
 800f8a0:	e7dd      	b.n	800f85e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 800f8a2:	54d0      	strb	r0, [r2, r3]
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	e7ef      	b.n	800f888 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 800f8a8:	4688      	mov	r8, r1
 800f8aa:	18d4      	adds	r4, r2, r3
 800f8ac:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 800f8b0:	f802 9b01 	strb.w	r9, [r2], #1
 800f8b4:	4294      	cmp	r4, r2
 800f8b6:	d1f9      	bne.n	800f8ac <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 800f8b8:	1c5a      	adds	r2, r3, #1
 800f8ba:	4411      	add	r1, r2
 800f8bc:	f1be 0f00 	cmp.w	lr, #0
 800f8c0:	d1e9      	bne.n	800f896 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 800f8c2:	181d      	adds	r5, r3, r0
 800f8c4:	e7e7      	b.n	800f896 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 800f8c6:	bf00      	nop
 800f8c8:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 800f8cc:	200095bc 			; <UNDEFINED> instruction: 0x200095bc

0800f8d0 <MDNS::FindFirstDotFromRight(char const*) const>:
 800f8d0:	b510      	push	{r4, lr}
 800f8d2:	4608      	mov	r0, r1
 800f8d4:	460c      	mov	r4, r1
 800f8d6:	f7ff ff65 	bl	800f7a4 <strlen>
 800f8da:	4420      	add	r0, r4
 800f8dc:	42a0      	cmp	r0, r4
 800f8de:	d903      	bls.n	800f8e8 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 800f8e0:	f810 3901 	ldrb.w	r3, [r0], #-1
 800f8e4:	2b2e      	cmp	r3, #46	; 0x2e
 800f8e6:	d1f9      	bne.n	800f8dc <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	bd10      	pop	{r4, pc}

0800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>:
 800f8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ee:	4614      	mov	r4, r2
 800f8f0:	460f      	mov	r7, r1
 800f8f2:	1c60      	adds	r0, r4, #1
 800f8f4:	463d      	mov	r5, r7
 800f8f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f8fa:	b946      	cbnz	r6, 800f90e <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 800f8fc:	1a69      	subs	r1, r5, r1
 800f8fe:	7021      	strb	r1, [r4, #0]
 800f900:	7829      	ldrb	r1, [r5, #0]
 800f902:	b949      	cbnz	r1, 800f918 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 800f904:	b10b      	cbz	r3, 800f90a <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 800f906:	f800 1b01 	strb.w	r1, [r0], #1
 800f90a:	1a80      	subs	r0, r0, r2
 800f90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f90e:	2e2e      	cmp	r6, #46	; 0x2e
 800f910:	d0f4      	beq.n	800f8fc <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 800f912:	f800 6b01 	strb.w	r6, [r0], #1
 800f916:	e7ed      	b.n	800f8f4 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 800f918:	4604      	mov	r4, r0
 800f91a:	1c69      	adds	r1, r5, #1
 800f91c:	e7e8      	b.n	800f8f0 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

0800f920 <MDNS::CreateAnswerLocalIpAddress()>:
 800f920:	2384      	movs	r3, #132	; 0x84
 800f922:	b510      	push	{r4, lr}
 800f924:	4c0f      	ldr	r4, [pc, #60]	; (800f964 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 800f926:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f92a:	80e3      	strh	r3, [r4, #6]
 800f92c:	2300      	movs	r3, #0
 800f92e:	490e      	ldr	r1, [pc, #56]	; (800f968 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 800f930:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f934:	6809      	ldr	r1, [r1, #0]
 800f936:	f104 0210 	add.w	r2, r4, #16
 800f93a:	2301      	movs	r3, #1
 800f93c:	f7ff ffd6 	bl	800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>
 800f940:	490a      	ldr	r1, [pc, #40]	; (800f96c <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 800f942:	1813      	adds	r3, r2, r0
 800f944:	5011      	str	r1, [r2, r0]
 800f946:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800f94a:	605a      	str	r2, [r3, #4]
 800f94c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f950:	811a      	strh	r2, [r3, #8]
 800f952:	4a07      	ldr	r2, [pc, #28]	; (800f970 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 800f954:	6812      	ldr	r2, [r2, #0]
 800f956:	6912      	ldr	r2, [r2, #16]
 800f958:	f8c3 200a 	str.w	r2, [r3, #10]
 800f95c:	1b1b      	subs	r3, r3, r4
 800f95e:	330a      	adds	r3, #10
 800f960:	6023      	str	r3, [r4, #0]
 800f962:	bd10      	pop	{r4, pc}
 800f964:	2000918c 	andcs	r9, r0, ip, lsl #3
 800f968:	200095b8 			; <UNDEFINED> instruction: 0x200095b8
 800f96c:	01800100 	orreq	r0, r0, r0, lsl #2
 800f970:	200095c0 	andcs	r9, r0, r0, asr #11

0800f974 <MDNS::Start()>:
 800f974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f976:	4c1d      	ldr	r4, [pc, #116]	; (800f9ec <MDNS::Start()+0x78>)
 800f978:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800f97c:	4605      	mov	r5, r0
 800f97e:	6820      	ldr	r0, [r4, #0]
 800f980:	f000 fb26 	bl	800ffd0 <Network::Begin(unsigned short)>
 800f984:	4e1a      	ldr	r6, [pc, #104]	; (800f9f0 <MDNS::Start()+0x7c>)
 800f986:	4f1b      	ldr	r7, [pc, #108]	; (800f9f4 <MDNS::Start()+0x80>)
 800f988:	4601      	mov	r1, r0
 800f98a:	6030      	str	r0, [r6, #0]
 800f98c:	683a      	ldr	r2, [r7, #0]
 800f98e:	6820      	ldr	r0, [r4, #0]
 800f990:	f000 fb2f 	bl	800fff2 <Network::JoinGroup(int, unsigned int)>
 800f994:	4b18      	ldr	r3, [pc, #96]	; (800f9f8 <MDNS::Start()+0x84>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	b923      	cbnz	r3, 800f9a4 <MDNS::Start()+0x30>
 800f99a:	6821      	ldr	r1, [r4, #0]
 800f99c:	4628      	mov	r0, r5
 800f99e:	311c      	adds	r1, #28
 800f9a0:	f7ff ff38 	bl	800f814 <MDNS::SetName(char const*)>
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	f7ff ffbb 	bl	800f920 <MDNS::CreateAnswerLocalIpAddress()>
 800f9aa:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f9ae:	4913      	ldr	r1, [pc, #76]	; (800f9fc <MDNS::Start()+0x88>)
 800f9b0:	7830      	ldrb	r0, [r6, #0]
 800f9b2:	f831 2b04 	ldrh.w	r2, [r1], #4
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	f7ff fe43 	bl	800f644 <udp_send>
 800f9be:	233f      	movs	r3, #63	; 0x3f
 800f9c0:	6820      	ldr	r0, [r4, #0]
 800f9c2:	4c0f      	ldr	r4, [pc, #60]	; (800fa00 <MDNS::Start()+0x8c>)
 800f9c4:	f100 025c 	add.w	r2, r0, #92	; 0x5c
 800f9c8:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800f9cc:	b929      	cbnz	r1, 800f9da <MDNS::Start()+0x66>
 800f9ce:	4413      	add	r3, r2
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d006      	beq.n	800f9e2 <MDNS::Start()+0x6e>
 800f9d4:	f802 1b01 	strb.w	r1, [r2], #1
 800f9d8:	e7fa      	b.n	800f9d0 <MDNS::Start()+0x5c>
 800f9da:	3b01      	subs	r3, #1
 800f9dc:	f802 1b01 	strb.w	r1, [r2], #1
 800f9e0:	d1f2      	bne.n	800f9c8 <MDNS::Start()+0x54>
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 800f9e8:	b003      	add	sp, #12
 800f9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9ec:	200095c0 	andcs	r9, r0, r0, asr #11
 800f9f0:	2000001c 	andcs	r0, r0, ip, lsl r0
 800f9f4:	20009188 	andcs	r9, r0, r8, lsl #3
 800f9f8:	200095b8 			; <UNDEFINED> instruction: 0x200095b8
 800f9fc:	2000918c 	andcs	r9, r0, ip, lsl #3
 800fa00:	08016ae0 	stmdaeq	r1, {r5, r6, r7, r9, fp, sp, lr}

0800fa04 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 800fa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa08:	4c1b      	ldr	r4, [pc, #108]	; (800fa78 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 800fa0a:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 800fa0e:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 800fa12:	2300      	movs	r3, #0
 800fa14:	f854 100c 	ldr.w	r1, [r4, ip]
 800fa18:	4607      	mov	r7, r0
 800fa1a:	f7ff ff67 	bl	800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>
 800fa1e:	2301      	movs	r3, #1
 800fa20:	7bac      	ldrb	r4, [r5, #14]
 800fa22:	4616      	mov	r6, r2
 800fa24:	4915      	ldr	r1, [pc, #84]	; (800fa7c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 800fa26:	4402      	add	r2, r0
 800fa28:	4815      	ldr	r0, [pc, #84]	; (800fa80 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 800fa2a:	429c      	cmp	r4, r3
 800fa2c:	bf18      	it	ne
 800fa2e:	4601      	movne	r1, r0
 800fa30:	4638      	mov	r0, r7
 800fa32:	f7ff ff5b 	bl	800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>
 800fa36:	4b13      	ldr	r3, [pc, #76]	; (800fa84 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 800fa38:	1814      	adds	r4, r2, r0
 800fa3a:	5013      	str	r3, [r2, r0]
 800fa3c:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800fa40:	6063      	str	r3, [r4, #4]
 800fa42:	4b11      	ldr	r3, [pc, #68]	; (800fa88 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 800fa44:	f8d3 8000 	ldr.w	r8, [r3]
 800fa48:	4640      	mov	r0, r8
 800fa4a:	f7ff feab 	bl	800f7a4 <strlen>
 800fa4e:	f100 0308 	add.w	r3, r0, #8
 800fa52:	ba5b      	rev16	r3, r3
 800fa54:	8123      	strh	r3, [r4, #8]
 800fa56:	2300      	movs	r3, #0
 800fa58:	f8c4 300a 	str.w	r3, [r4, #10]
 800fa5c:	89ab      	ldrh	r3, [r5, #12]
 800fa5e:	f104 0210 	add.w	r2, r4, #16
 800fa62:	ba5b      	rev16	r3, r3
 800fa64:	81e3      	strh	r3, [r4, #14]
 800fa66:	4641      	mov	r1, r8
 800fa68:	2301      	movs	r3, #1
 800fa6a:	4638      	mov	r0, r7
 800fa6c:	f7ff ff3e 	bl	800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>
 800fa70:	4410      	add	r0, r2
 800fa72:	1b80      	subs	r0, r0, r6
 800fa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa78:	20009390 	mulcs	r0, r0, r3
 800fa7c:	08016adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, sp, lr}
 800fa80:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800fa84:	01802100 	orreq	r2, r0, r0, lsl #2
 800fa88:	200095b8 			; <UNDEFINED> instruction: 0x200095b8

0800fa8c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 800fa8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa90:	4e19      	ldr	r6, [pc, #100]	; (800faf8 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 800fa92:	010f      	lsls	r7, r1, #4
 800fa94:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800fa98:	2300      	movs	r3, #0
 800fa9a:	59f1      	ldr	r1, [r6, r7]
 800fa9c:	4604      	mov	r4, r0
 800fa9e:	f7ff ff25 	bl	800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>
 800faa2:	2301      	movs	r3, #1
 800faa4:	7bae      	ldrb	r6, [r5, #14]
 800faa6:	4690      	mov	r8, r2
 800faa8:	4914      	ldr	r1, [pc, #80]	; (800fafc <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 800faaa:	4402      	add	r2, r0
 800faac:	4814      	ldr	r0, [pc, #80]	; (800fb00 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 800faae:	429e      	cmp	r6, r3
 800fab0:	bf18      	it	ne
 800fab2:	4601      	movne	r1, r0
 800fab4:	4620      	mov	r0, r4
 800fab6:	f7ff ff19 	bl	800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>
 800faba:	4b12      	ldr	r3, [pc, #72]	; (800fb04 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 800fabc:	1816      	adds	r6, r2, r0
 800fabe:	5013      	str	r3, [r2, r0]
 800fac0:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800fac4:	68a8      	ldr	r0, [r5, #8]
 800fac6:	6073      	str	r3, [r6, #4]
 800fac8:	f106 040b 	add.w	r4, r6, #11
 800facc:	b938      	cbnz	r0, 800fade <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 800face:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fad2:	72b0      	strb	r0, [r6, #10]
 800fad4:	8133      	strh	r3, [r6, #8]
 800fad6:	eba4 0008 	sub.w	r0, r4, r8
 800fada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fade:	f7ff fe61 	bl	800f7a4 <strlen>
 800fae2:	4607      	mov	r7, r0
 800fae4:	1c43      	adds	r3, r0, #1
 800fae6:	72b0      	strb	r0, [r6, #10]
 800fae8:	ba5b      	rev16	r3, r3
 800faea:	4620      	mov	r0, r4
 800faec:	68a9      	ldr	r1, [r5, #8]
 800faee:	8133      	strh	r3, [r6, #8]
 800faf0:	f7ff fe6d 	bl	800f7ce <strcpy.isra.0>
 800faf4:	443c      	add	r4, r7
 800faf6:	e7ee      	b.n	800fad6 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 800faf8:	20009390 	mulcs	r0, r0, r3
 800fafc:	08016adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, sp, lr}
 800fb00:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800fb04:	01801000 	orreq	r1, r0, r0

0800fb08 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 800fb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb0c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800fb70 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 800fb10:	ea4f 1901 	mov.w	r9, r1, lsl #4
 800fb14:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 800fb18:	6869      	ldr	r1, [r5, #4]
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	4607      	mov	r7, r0
 800fb1e:	f7ff fee5 	bl	800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>
 800fb22:	4b14      	ldr	r3, [pc, #80]	; (800fb74 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 800fb24:	f858 8009 	ldr.w	r8, [r8, r9]
 800fb28:	5013      	str	r3, [r2, r0]
 800fb2a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800fb2e:	1816      	adds	r6, r2, r0
 800fb30:	6073      	str	r3, [r6, #4]
 800fb32:	4640      	mov	r0, r8
 800fb34:	4614      	mov	r4, r2
 800fb36:	f7ff fe35 	bl	800f7a4 <strlen>
 800fb3a:	f100 030d 	add.w	r3, r0, #13
 800fb3e:	ba5b      	rev16	r3, r3
 800fb40:	4641      	mov	r1, r8
 800fb42:	8133      	strh	r3, [r6, #8]
 800fb44:	f106 020a 	add.w	r2, r6, #10
 800fb48:	2300      	movs	r3, #0
 800fb4a:	4638      	mov	r0, r7
 800fb4c:	f7ff fece 	bl	800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>
 800fb50:	2301      	movs	r3, #1
 800fb52:	4402      	add	r2, r0
 800fb54:	7bad      	ldrb	r5, [r5, #14]
 800fb56:	4808      	ldr	r0, [pc, #32]	; (800fb78 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 800fb58:	4908      	ldr	r1, [pc, #32]	; (800fb7c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 800fb5a:	429d      	cmp	r5, r3
 800fb5c:	bf18      	it	ne
 800fb5e:	4601      	movne	r1, r0
 800fb60:	4638      	mov	r0, r7
 800fb62:	f7ff fec3 	bl	800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>
 800fb66:	4410      	add	r0, r2
 800fb68:	1b00      	subs	r0, r0, r4
 800fb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb6e:	bf00      	nop
 800fb70:	20009390 	mulcs	r0, r0, r3
 800fb74:	01000c00 	tsteq	r0, r0, lsl #24
 800fb78:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800fb7c:	08016adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, sp, lr}

0800fb80 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 800fb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb82:	460f      	mov	r7, r1
 800fb84:	2301      	movs	r3, #1
 800fb86:	490f      	ldr	r1, [pc, #60]	; (800fbc4 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 800fb88:	4606      	mov	r6, r0
 800fb8a:	f7ff feaf 	bl	800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>
 800fb8e:	4b0e      	ldr	r3, [pc, #56]	; (800fbc8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 800fb90:	490e      	ldr	r1, [pc, #56]	; (800fbcc <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 800fb92:	5013      	str	r3, [r2, r0]
 800fb94:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800fb98:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800fb9c:	684f      	ldr	r7, [r1, #4]
 800fb9e:	1815      	adds	r5, r2, r0
 800fba0:	606b      	str	r3, [r5, #4]
 800fba2:	4638      	mov	r0, r7
 800fba4:	4614      	mov	r4, r2
 800fba6:	f7ff fdfd 	bl	800f7a4 <strlen>
 800fbaa:	1c83      	adds	r3, r0, #2
 800fbac:	ba5b      	rev16	r3, r3
 800fbae:	812b      	strh	r3, [r5, #8]
 800fbb0:	f105 020a 	add.w	r2, r5, #10
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	4639      	mov	r1, r7
 800fbb8:	4630      	mov	r0, r6
 800fbba:	f7ff fe97 	bl	800f8ec <MDNS::WriteDnsName(char const*, char*, bool)>
 800fbbe:	4410      	add	r0, r2
 800fbc0:	1b00      	subs	r0, r0, r4
 800fbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbc4:	08016ae7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, fp, sp, lr}
 800fbc8:	01000c00 	tsteq	r0, r0, lsl #24
 800fbcc:	20009390 	mulcs	r0, r0, r3

0800fbd0 <MDNS::CreateMDNSMessage(unsigned int)>:
 800fbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbd2:	2384      	movs	r3, #132	; 0x84
 800fbd4:	4d19      	ldr	r5, [pc, #100]	; (800fc3c <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 800fbd6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800fbda:	80eb      	strh	r3, [r5, #6]
 800fbdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fbe0:	f105 0410 	add.w	r4, r5, #16
 800fbe4:	e9c5 2302 	strd	r2, r3, [r5, #8]
 800fbe8:	4622      	mov	r2, r4
 800fbea:	4606      	mov	r6, r0
 800fbec:	460f      	mov	r7, r1
 800fbee:	f7ff ff09 	bl	800fa04 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 800fbf2:	4404      	add	r4, r0
 800fbf4:	4622      	mov	r2, r4
 800fbf6:	4639      	mov	r1, r7
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	f7ff ff47 	bl	800fa8c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 800fbfe:	4404      	add	r4, r0
 800fc00:	4622      	mov	r2, r4
 800fc02:	4639      	mov	r1, r7
 800fc04:	4630      	mov	r0, r6
 800fc06:	f7ff ffbb 	bl	800fb80 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 800fc0a:	4404      	add	r4, r0
 800fc0c:	4622      	mov	r2, r4
 800fc0e:	4639      	mov	r1, r7
 800fc10:	4630      	mov	r0, r6
 800fc12:	f7ff ff79 	bl	800fb08 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 800fc16:	4a0a      	ldr	r2, [pc, #40]	; (800fc40 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 800fc18:	4404      	add	r4, r0
 800fc1a:	f852 3b10 	ldr.w	r3, [r2], #16
 800fc1e:	1e60      	subs	r0, r4, #1
 800fc20:	3b0c      	subs	r3, #12
 800fc22:	4619      	mov	r1, r3
 800fc24:	3901      	subs	r1, #1
 800fc26:	d204      	bcs.n	800fc32 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 800fc28:	441c      	add	r4, r3
 800fc2a:	4b06      	ldr	r3, [pc, #24]	; (800fc44 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 800fc2c:	1ae4      	subs	r4, r4, r3
 800fc2e:	602c      	str	r4, [r5, #0]
 800fc30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc32:	f812 6b01 	ldrb.w	r6, [r2], #1
 800fc36:	f800 6f01 	strb.w	r6, [r0, #1]!
 800fc3a:	e7f3      	b.n	800fc24 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 800fc3c:	200093b4 			; <UNDEFINED> instruction: 0x200093b4
 800fc40:	2000918c 	andcs	r9, r0, ip, lsl #3
 800fc44:	200093b8 			; <UNDEFINED> instruction: 0x200093b8

0800fc48 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 800fc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc4c:	4d40      	ldr	r5, [pc, #256]	; (800fd50 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 800fc4e:	b085      	sub	sp, #20
 800fc50:	682c      	ldr	r4, [r5, #0]
 800fc52:	4680      	mov	r8, r0
 800fc54:	460f      	mov	r7, r1
 800fc56:	4616      	mov	r6, r2
 800fc58:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 800fc5c:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800fc60:	b11c      	cbz	r4, 800fc6a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 800fc62:	692a      	ldr	r2, [r5, #16]
 800fc64:	2a00      	cmp	r2, #0
 800fc66:	d16e      	bne.n	800fd46 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 800fc68:	2401      	movs	r4, #1
 800fc6a:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800fc6e:	ea4f 1904 	mov.w	r9, r4, lsl #4
 800fc72:	8193      	strh	r3, [r2, #12]
 800fc74:	f882 b00e 	strb.w	fp, [r2, #14]
 800fc78:	2f00      	cmp	r7, #0
 800fc7a:	d154      	bne.n	800fd26 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 800fc7c:	4b35      	ldr	r3, [pc, #212]	; (800fd54 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 800fc7e:	6818      	ldr	r0, [r3, #0]
 800fc80:	301c      	adds	r0, #28
 800fc82:	f7ff fd8f 	bl	800f7a4 <strlen>
 800fc86:	4607      	mov	r7, r0
 800fc88:	4630      	mov	r0, r6
 800fc8a:	f7ff fd8b 	bl	800f7a4 <strlen>
 800fc8e:	4438      	add	r0, r7
 800fc90:	3001      	adds	r0, #1
 800fc92:	f002 fd71 	bl	8012778 <operator new[](unsigned int)>
 800fc96:	4b2f      	ldr	r3, [pc, #188]	; (800fd54 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 800fc98:	f845 0009 	str.w	r0, [r5, r9]
 800fc9c:	6819      	ldr	r1, [r3, #0]
 800fc9e:	311c      	adds	r1, #28
 800fca0:	f7ff fd95 	bl	800f7ce <strcpy.isra.0>
 800fca4:	f855 0009 	ldr.w	r0, [r5, r9]
 800fca8:	4631      	mov	r1, r6
 800fcaa:	f7ff fd98 	bl	800f7de <strcat.isra.0>
 800fcae:	4631      	mov	r1, r6
 800fcb0:	4640      	mov	r0, r8
 800fcb2:	f7ff fe0d 	bl	800f8d0 <MDNS::FindFirstDotFromRight(char const*) const>
 800fcb6:	eb05 0709 	add.w	r7, r5, r9
 800fcba:	4605      	mov	r5, r0
 800fcbc:	f7ff fd72 	bl	800f7a4 <strlen>
 800fcc0:	300d      	adds	r0, #13
 800fcc2:	f002 fd59 	bl	8012778 <operator new[](unsigned int)>
 800fcc6:	4629      	mov	r1, r5
 800fcc8:	6078      	str	r0, [r7, #4]
 800fcca:	f7ff fd80 	bl	800f7ce <strcpy.isra.0>
 800fcce:	4922      	ldr	r1, [pc, #136]	; (800fd58 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f7ff fd84 	bl	800f7de <strcat.isra.0>
 800fcd6:	4921      	ldr	r1, [pc, #132]	; (800fd5c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 800fcd8:	4b21      	ldr	r3, [pc, #132]	; (800fd60 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f1bb 0f01 	cmp.w	fp, #1
 800fce0:	bf18      	it	ne
 800fce2:	4619      	movne	r1, r3
 800fce4:	f7ff fd7b 	bl	800f7de <strcat.isra.0>
 800fce8:	f1ba 0f00 	cmp.w	sl, #0
 800fcec:	d009      	beq.n	800fd02 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 800fcee:	4650      	mov	r0, sl
 800fcf0:	f7ff fd58 	bl	800f7a4 <strlen>
 800fcf4:	3001      	adds	r0, #1
 800fcf6:	f002 fd3f 	bl	8012778 <operator new[](unsigned int)>
 800fcfa:	4651      	mov	r1, sl
 800fcfc:	60b8      	str	r0, [r7, #8]
 800fcfe:	f7ff fd66 	bl	800f7ce <strcpy.isra.0>
 800fd02:	4621      	mov	r1, r4
 800fd04:	4640      	mov	r0, r8
 800fd06:	f7ff ff63 	bl	800fbd0 <MDNS::CreateMDNSMessage(unsigned int)>
 800fd0a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fd0e:	4915      	ldr	r1, [pc, #84]	; (800fd64 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 800fd10:	4815      	ldr	r0, [pc, #84]	; (800fd68 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 800fd12:	f831 2b04 	ldrh.w	r2, [r1], #4
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	4b14      	ldr	r3, [pc, #80]	; (800fd6c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 800fd1a:	7800      	ldrb	r0, [r0, #0]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f7ff fc91 	bl	800f644 <udp_send>
 800fd22:	2001      	movs	r0, #1
 800fd24:	e010      	b.n	800fd48 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 800fd26:	4638      	mov	r0, r7
 800fd28:	f7ff fd3c 	bl	800f7a4 <strlen>
 800fd2c:	9003      	str	r0, [sp, #12]
 800fd2e:	4630      	mov	r0, r6
 800fd30:	f7ff fd38 	bl	800f7a4 <strlen>
 800fd34:	9b03      	ldr	r3, [sp, #12]
 800fd36:	4418      	add	r0, r3
 800fd38:	3001      	adds	r0, #1
 800fd3a:	f002 fd1d 	bl	8012778 <operator new[](unsigned int)>
 800fd3e:	4639      	mov	r1, r7
 800fd40:	f845 0009 	str.w	r0, [r5, r9]
 800fd44:	e7ac      	b.n	800fca0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 800fd46:	2000      	movs	r0, #0
 800fd48:	b005      	add	sp, #20
 800fd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd4e:	bf00      	nop
 800fd50:	20009390 	mulcs	r0, r0, r3
 800fd54:	200095c0 	andcs	r9, r0, r0, asr #11
 800fd58:	08015adb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, fp, ip, lr}
 800fd5c:	08016adc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, fp, sp, lr}
 800fd60:	08016af9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr}
 800fd64:	200093b4 			; <UNDEFINED> instruction: 0x200093b4
 800fd68:	2000001c 	andcs	r0, r0, ip, lsl r0
 800fd6c:	20009188 	andcs	r9, r0, r8, lsl #3

0800fd70 <MDNS::HandleRequest(unsigned short)>:
 800fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	4605      	mov	r5, r0
 800fd76:	2700      	movs	r7, #0
 800fd78:	f04f 080c 	mov.w	r8, #12
 800fd7c:	b0c5      	sub	sp, #276	; 0x114
 800fd7e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800fe40 <MDNS::HandleRequest(unsigned short)+0xd0>
 800fd82:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800fe44 <MDNS::HandleRequest(unsigned short)+0xd4>
 800fd86:	9103      	str	r1, [sp, #12]
 800fd88:	9b03      	ldr	r3, [sp, #12]
 800fd8a:	42bb      	cmp	r3, r7
 800fd8c:	d802      	bhi.n	800fd94 <MDNS::HandleRequest(unsigned short)+0x24>
 800fd8e:	b045      	add	sp, #276	; 0x114
 800fd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd94:	f8da 1000 	ldr.w	r1, [sl]
 800fd98:	aa04      	add	r2, sp, #16
 800fd9a:	4441      	add	r1, r8
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	f7ff fd55 	bl	800f84c <MDNS::DecodeDNSNameNotation(char const*, char*)>
 800fda2:	f8da 2000 	ldr.w	r2, [sl]
 800fda6:	4440      	add	r0, r8
 800fda8:	1813      	adds	r3, r2, r0
 800fdaa:	885b      	ldrh	r3, [r3, #2]
 800fdac:	f100 0804 	add.w	r8, r0, #4
 800fdb0:	ba5b      	rev16	r3, r3
 800fdb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d13d      	bne.n	800fe36 <MDNS::HandleRequest(unsigned short)+0xc6>
 800fdba:	5a14      	ldrh	r4, [r2, r0]
 800fdbc:	4b22      	ldr	r3, [pc, #136]	; (800fe48 <MDNS::HandleRequest(unsigned short)+0xd8>)
 800fdbe:	ba64      	rev16	r4, r4
 800fdc0:	6818      	ldr	r0, [r3, #0]
 800fdc2:	a904      	add	r1, sp, #16
 800fdc4:	b2a4      	uxth	r4, r4
 800fdc6:	f7ff fcf5 	bl	800f7b4 <strcmp>
 800fdca:	b968      	cbnz	r0, 800fde8 <MDNS::HandleRequest(unsigned short)+0x78>
 800fdcc:	2c01      	cmp	r4, #1
 800fdce:	d10b      	bne.n	800fde8 <MDNS::HandleRequest(unsigned short)+0x78>
 800fdd0:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fdd4:	491d      	ldr	r1, [pc, #116]	; (800fe4c <MDNS::HandleRequest(unsigned short)+0xdc>)
 800fdd6:	481e      	ldr	r0, [pc, #120]	; (800fe50 <MDNS::HandleRequest(unsigned short)+0xe0>)
 800fdd8:	f831 2b04 	ldrh.w	r2, [r1], #4
 800fddc:	9300      	str	r3, [sp, #0]
 800fdde:	4b1d      	ldr	r3, [pc, #116]	; (800fe54 <MDNS::HandleRequest(unsigned short)+0xe4>)
 800fde0:	7800      	ldrb	r0, [r0, #0]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f7ff fc2e 	bl	800f644 <udp_send>
 800fde8:	481b      	ldr	r0, [pc, #108]	; (800fe58 <MDNS::HandleRequest(unsigned short)+0xe8>)
 800fdea:	a904      	add	r1, sp, #16
 800fdec:	f7ff fce2 	bl	800f7b4 <strcmp>
 800fdf0:	f04f 0900 	mov.w	r9, #0
 800fdf4:	4e19      	ldr	r6, [pc, #100]	; (800fe5c <MDNS::HandleRequest(unsigned short)+0xec>)
 800fdf6:	9002      	str	r0, [sp, #8]
 800fdf8:	6833      	ldr	r3, [r6, #0]
 800fdfa:	b1c3      	cbz	r3, 800fe2e <MDNS::HandleRequest(unsigned short)+0xbe>
 800fdfc:	9b02      	ldr	r3, [sp, #8]
 800fdfe:	b123      	cbz	r3, 800fe0a <MDNS::HandleRequest(unsigned short)+0x9a>
 800fe00:	6870      	ldr	r0, [r6, #4]
 800fe02:	a904      	add	r1, sp, #16
 800fe04:	f7ff fcd6 	bl	800f7b4 <strcmp>
 800fe08:	b988      	cbnz	r0, 800fe2e <MDNS::HandleRequest(unsigned short)+0xbe>
 800fe0a:	2c0c      	cmp	r4, #12
 800fe0c:	d10f      	bne.n	800fe2e <MDNS::HandleRequest(unsigned short)+0xbe>
 800fe0e:	4649      	mov	r1, r9
 800fe10:	4628      	mov	r0, r5
 800fe12:	f7ff fedd 	bl	800fbd0 <MDNS::CreateMDNSMessage(unsigned int)>
 800fe16:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fe1a:	480d      	ldr	r0, [pc, #52]	; (800fe50 <MDNS::HandleRequest(unsigned short)+0xe0>)
 800fe1c:	9300      	str	r3, [sp, #0]
 800fe1e:	4b0d      	ldr	r3, [pc, #52]	; (800fe54 <MDNS::HandleRequest(unsigned short)+0xe4>)
 800fe20:	f8bb 2000 	ldrh.w	r2, [fp]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	490e      	ldr	r1, [pc, #56]	; (800fe60 <MDNS::HandleRequest(unsigned short)+0xf0>)
 800fe28:	7800      	ldrb	r0, [r0, #0]
 800fe2a:	f7ff fc0b 	bl	800f644 <udp_send>
 800fe2e:	3610      	adds	r6, #16
 800fe30:	f1b9 0f00 	cmp.w	r9, #0
 800fe34:	d001      	beq.n	800fe3a <MDNS::HandleRequest(unsigned short)+0xca>
 800fe36:	3701      	adds	r7, #1
 800fe38:	e7a6      	b.n	800fd88 <MDNS::HandleRequest(unsigned short)+0x18>
 800fe3a:	f04f 0901 	mov.w	r9, #1
 800fe3e:	e7db      	b.n	800fdf8 <MDNS::HandleRequest(unsigned short)+0x88>
 800fe40:	200095bc 			; <UNDEFINED> instruction: 0x200095bc
 800fe44:	200093b4 			; <UNDEFINED> instruction: 0x200093b4
 800fe48:	200095b8 			; <UNDEFINED> instruction: 0x200095b8
 800fe4c:	2000918c 	andcs	r9, r0, ip, lsl #3
 800fe50:	2000001c 	andcs	r0, r0, ip, lsl r0
 800fe54:	20009188 	andcs	r9, r0, r8, lsl #3
 800fe58:	08016ae7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, fp, sp, lr}
 800fe5c:	20009390 	mulcs	r0, r0, r3
 800fe60:	200093b8 			; <UNDEFINED> instruction: 0x200093b8

0800fe64 <MDNS::Parse()>:
 800fe64:	4b08      	ldr	r3, [pc, #32]	; (800fe88 <MDNS::Parse()+0x24>)
 800fe66:	681a      	ldr	r2, [r3, #0]
 800fe68:	8853      	ldrh	r3, [r2, #2]
 800fe6a:	ba5b      	rev16	r3, r3
 800fe6c:	b299      	uxth	r1, r3
 800fe6e:	041b      	lsls	r3, r3, #16
 800fe70:	d408      	bmi.n	800fe84 <MDNS::Parse()+0x20>
 800fe72:	0b89      	lsrs	r1, r1, #14
 800fe74:	d106      	bne.n	800fe84 <MDNS::Parse()+0x20>
 800fe76:	8891      	ldrh	r1, [r2, #4]
 800fe78:	b28b      	uxth	r3, r1
 800fe7a:	b11b      	cbz	r3, 800fe84 <MDNS::Parse()+0x20>
 800fe7c:	ba49      	rev16	r1, r1
 800fe7e:	b289      	uxth	r1, r1
 800fe80:	f7ff bf76 	b.w	800fd70 <MDNS::HandleRequest(unsigned short)>
 800fe84:	4770      	bx	lr
 800fe86:	bf00      	nop
 800fe88:	200095bc 			; <UNDEFINED> instruction: 0x200095bc

0800fe8c <MDNS::Run()>:
 800fe8c:	b538      	push	{r3, r4, r5, lr}
 800fe8e:	4d0c      	ldr	r5, [pc, #48]	; (800fec0 <MDNS::Run()+0x34>)
 800fe90:	4604      	mov	r4, r0
 800fe92:	480c      	ldr	r0, [pc, #48]	; (800fec4 <MDNS::Run()+0x38>)
 800fe94:	462b      	mov	r3, r5
 800fe96:	4a0c      	ldr	r2, [pc, #48]	; (800fec8 <MDNS::Run()+0x3c>)
 800fe98:	490c      	ldr	r1, [pc, #48]	; (800fecc <MDNS::Run()+0x40>)
 800fe9a:	7800      	ldrb	r0, [r0, #0]
 800fe9c:	f7ff fbac 	bl	800f5f8 <udp_recv2>
 800fea0:	4b0b      	ldr	r3, [pc, #44]	; (800fed0 <MDNS::Run()+0x44>)
 800fea2:	882a      	ldrh	r2, [r5, #0]
 800fea4:	8018      	strh	r0, [r3, #0]
 800fea6:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800feaa:	429a      	cmp	r2, r3
 800feac:	d106      	bne.n	800febc <MDNS::Run()+0x30>
 800feae:	280c      	cmp	r0, #12
 800feb0:	d904      	bls.n	800febc <MDNS::Run()+0x30>
 800feb2:	4620      	mov	r0, r4
 800feb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800feb8:	f7ff bfd4 	b.w	800fe64 <MDNS::Parse()>
 800febc:	bd38      	pop	{r3, r4, r5, pc}
 800febe:	bf00      	nop
 800fec0:	20009184 	andcs	r9, r0, r4, lsl #3
 800fec4:	2000001c 	andcs	r0, r0, ip, lsl r0
 800fec8:	20009180 	andcs	r9, r0, r0, lsl #3
 800fecc:	200095bc 			; <UNDEFINED> instruction: 0x200095bc
 800fed0:	200093b0 			; <UNDEFINED> instruction: 0x200093b0

0800fed4 <MDNS::Print()>:
 800fed4:	b510      	push	{r4, lr}
 800fed6:	4816      	ldr	r0, [pc, #88]	; (800ff30 <MDNS::Print()+0x5c>)
 800fed8:	f002 ff3c 	bl	8012d54 <printf>
 800fedc:	4b15      	ldr	r3, [pc, #84]	; (800ff34 <MDNS::Print()+0x60>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	3301      	adds	r3, #1
 800fee2:	d104      	bne.n	800feee <MDNS::Print()+0x1a>
 800fee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fee8:	4813      	ldr	r0, [pc, #76]	; (800ff38 <MDNS::Print()+0x64>)
 800feea:	f002 bf33 	b.w	8012d54 <printf>
 800feee:	4b13      	ldr	r3, [pc, #76]	; (800ff3c <MDNS::Print()+0x68>)
 800fef0:	4c13      	ldr	r4, [pc, #76]	; (800ff40 <MDNS::Print()+0x6c>)
 800fef2:	6819      	ldr	r1, [r3, #0]
 800fef4:	4813      	ldr	r0, [pc, #76]	; (800ff44 <MDNS::Print()+0x70>)
 800fef6:	f002 ff2d 	bl	8012d54 <printf>
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	b14b      	cbz	r3, 800ff12 <MDNS::Print()+0x3e>
 800fefe:	4a12      	ldr	r2, [pc, #72]	; (800ff48 <MDNS::Print()+0x74>)
 800ff00:	68a3      	ldr	r3, [r4, #8]
 800ff02:	6861      	ldr	r1, [r4, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	bf08      	it	eq
 800ff08:	4613      	moveq	r3, r2
 800ff0a:	4810      	ldr	r0, [pc, #64]	; (800ff4c <MDNS::Print()+0x78>)
 800ff0c:	89a2      	ldrh	r2, [r4, #12]
 800ff0e:	f002 ff21 	bl	8012d54 <printf>
 800ff12:	6923      	ldr	r3, [r4, #16]
 800ff14:	b15b      	cbz	r3, 800ff2e <MDNS::Print()+0x5a>
 800ff16:	69a3      	ldr	r3, [r4, #24]
 800ff18:	4a0b      	ldr	r2, [pc, #44]	; (800ff48 <MDNS::Print()+0x74>)
 800ff1a:	6961      	ldr	r1, [r4, #20]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	bf08      	it	eq
 800ff20:	4613      	moveq	r3, r2
 800ff22:	480a      	ldr	r0, [pc, #40]	; (800ff4c <MDNS::Print()+0x78>)
 800ff24:	8ba2      	ldrh	r2, [r4, #28]
 800ff26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff2a:	f002 bf13 	b.w	8012d54 <printf>
 800ff2e:	bd10      	pop	{r4, pc}
 800ff30:	08016b04 	stmdaeq	r1, {r2, r8, r9, fp, sp, lr}
 800ff34:	2000001c 	andcs	r0, r0, ip, lsl r0
 800ff38:	08016b0a 	stmdaeq	r1, {r1, r3, r8, r9, fp, sp, lr}
 800ff3c:	200095b8 			; <UNDEFINED> instruction: 0x200095b8
 800ff40:	20009390 	mulcs	r0, r0, r3
 800ff44:	08016b18 	stmdaeq	r1, {r3, r4, r8, r9, fp, sp, lr}
 800ff48:	08015dfd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 800ff4c:	08016b24 	stmdaeq	r1, {r2, r5, r8, r9, fp, sp, lr}

0800ff50 <strncpy.constprop.0.isra.0>:
 800ff50:	233f      	movs	r3, #63	; 0x3f
 800ff52:	3901      	subs	r1, #1
 800ff54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ff58:	b92a      	cbnz	r2, 800ff66 <strncpy.constprop.0.isra.0+0x16>
 800ff5a:	4403      	add	r3, r0
 800ff5c:	4298      	cmp	r0, r3
 800ff5e:	d006      	beq.n	800ff6e <strncpy.constprop.0.isra.0+0x1e>
 800ff60:	f800 2b01 	strb.w	r2, [r0], #1
 800ff64:	e7fa      	b.n	800ff5c <strncpy.constprop.0.isra.0+0xc>
 800ff66:	3b01      	subs	r3, #1
 800ff68:	f800 2b01 	strb.w	r2, [r0], #1
 800ff6c:	d1f2      	bne.n	800ff54 <strncpy.constprop.0.isra.0+0x4>
 800ff6e:	4770      	bx	lr

0800ff70 <Network::Network()>:
 800ff70:	4a11      	ldr	r2, [pc, #68]	; (800ffb8 <Network::Network()+0x48>)
 800ff72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ff76:	6010      	str	r0, [r2, #0]
 800ff78:	2201      	movs	r2, #1
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	e9c0 1200 	strd	r1, r2, [r0]
 800ff80:	2200      	movs	r2, #0
 800ff82:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 800ff86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff8a:	490c      	ldr	r1, [pc, #48]	; (800ffbc <Network::Network()+0x4c>)
 800ff8c:	60c2      	str	r2, [r0, #12]
 800ff8e:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 800ff92:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 800ff96:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 800ff9a:	6083      	str	r3, [r0, #8]
 800ff9c:	6183      	str	r3, [r0, #24]
 800ff9e:	7703      	strb	r3, [r0, #28]
 800ffa0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 800ffa4:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 800ffa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffac:	f802 3b01 	strb.w	r3, [r2], #1
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1f9      	bne.n	800ffa8 <Network::Network()+0x38>
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop
 800ffb8:	200095c0 	andcs	r9, r0, r0, asr #11
 800ffbc:	08016b2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, r9, fp, sp, lr}

0800ffc0 <Network::Shutdown()>:
 800ffc0:	b508      	push	{r3, lr}
 800ffc2:	30b8      	adds	r0, #184	; 0xb8
 800ffc4:	f001 fcec 	bl	80119a0 <NetworkDisplay::ShowShutdown()>
 800ffc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ffcc:	f7f7 b910 	b.w	80071f0 <net_shutdown>

0800ffd0 <Network::Begin(unsigned short)>:
 800ffd0:	4608      	mov	r0, r1
 800ffd2:	f7ff baa1 	b.w	800f518 <udp_bind>

0800ffd6 <Network::End(unsigned short)>:
 800ffd6:	4608      	mov	r0, r1
 800ffd8:	f7ff bab8 	b.w	800f54c <udp_unbind>

0800ffdc <Network::MacAddressCopyTo(unsigned char*)>:
 800ffdc:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 800ffe0:	3901      	subs	r1, #1
 800ffe2:	30a2      	adds	r0, #162	; 0xa2
 800ffe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffe8:	4283      	cmp	r3, r0
 800ffea:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ffee:	d1f9      	bne.n	800ffe4 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 800fff0:	4770      	bx	lr

0800fff2 <Network::JoinGroup(int, unsigned int)>:
 800fff2:	4610      	mov	r0, r2
 800fff4:	f000 bf9e 	b.w	8010f34 <igmp_join>

0800fff8 <Network::LeaveGroup(int, unsigned int)>:
 800fff8:	4610      	mov	r0, r2
 800fffa:	f000 bfc7 	b.w	8010f8c <igmp_leave>

0800fffe <Network::SetDefaultIp()>:
 800fffe:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8010002:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 8010006:	041b      	lsls	r3, r3, #16
 8010008:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801000c:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 8010010:	3302      	adds	r3, #2
 8010012:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8010016:	22ff      	movs	r2, #255	; 0xff
 8010018:	6103      	str	r3, [r0, #16]
 801001a:	e9c0 3205 	strd	r3, r2, [r0, #20]
 801001e:	4770      	bx	lr

08010020 <Network::Init(NetworkParamsStore*)>:
 8010020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010024:	b08b      	sub	sp, #44	; 0x2c
 8010026:	4604      	mov	r4, r0
 8010028:	a806      	add	r0, sp, #24
 801002a:	f000 fa5b 	bl	80104e4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 801002e:	a806      	add	r0, sp, #24
 8010030:	f000 fa68 	bl	8010504 <NetworkParams::Load()>
 8010034:	b110      	cbz	r0, 801003c <Network::Init(NetworkParamsStore*)+0x1c>
 8010036:	a806      	add	r0, sp, #24
 8010038:	f000 fc4f 	bl	80108da <NetworkParams::Dump()>
 801003c:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8010040:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8010270 <Network::Init(NetworkParamsStore*)+0x250>
 8010044:	4628      	mov	r0, r5
 8010046:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 801004a:	f001 fc91 	bl	8011970 <NetworkDisplay::ShowEmacStart()>
 801004e:	4638      	mov	r0, r7
 8010050:	f003 fd96 	bl	8013b80 <emac_start>
 8010054:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010058:	f104 061c 	add.w	r6, r4, #28
 801005c:	9307      	str	r3, [sp, #28]
 801005e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010062:	9308      	str	r3, [sp, #32]
 8010064:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010068:	9309      	str	r3, [sp, #36]	; 0x24
 801006a:	f898 3014 	ldrb.w	r3, [r8, #20]
 801006e:	7063      	strb	r3, [r4, #1]
 8010070:	f8d8 3000 	ldr.w	r3, [r8]
 8010074:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 8010078:	bf18      	it	ne
 801007a:	f8d8 2055 	ldrne.w	r2, [r8, #85]	; 0x55
 801007e:	061b      	lsls	r3, r3, #24
 8010080:	bf58      	it	pl
 8010082:	2300      	movpl	r3, #0
 8010084:	60a2      	str	r2, [r4, #8]
 8010086:	bf48      	it	mi
 8010088:	f8d8 3059 	ldrmi.w	r3, [r8, #89]	; 0x59
 801008c:	60e3      	str	r3, [r4, #12]
 801008e:	f898 3015 	ldrb.w	r3, [r8, #21]
 8010092:	2b00      	cmp	r3, #0
 8010094:	f040 80bc 	bne.w	8010210 <Network::Init(NetworkParamsStore*)+0x1f0>
 8010098:	4630      	mov	r0, r6
 801009a:	4976      	ldr	r1, [pc, #472]	; (8010274 <Network::Init(NetworkParamsStore*)+0x254>)
 801009c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100a0:	f103 0c01 	add.w	ip, r3, #1
 80100a4:	2a00      	cmp	r2, #0
 80100a6:	f040 80af 	bne.w	8010208 <Network::Init(NetworkParamsStore*)+0x1e8>
 80100aa:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 80100ae:	18e1      	adds	r1, r4, r3
 80100b0:	0910      	lsrs	r0, r2, #4
 80100b2:	2a9f      	cmp	r2, #159	; 0x9f
 80100b4:	f002 020f 	and.w	r2, r2, #15
 80100b8:	bf94      	ite	ls
 80100ba:	3030      	addls	r0, #48	; 0x30
 80100bc:	3037      	addhi	r0, #55	; 0x37
 80100be:	2a09      	cmp	r2, #9
 80100c0:	bf94      	ite	ls
 80100c2:	3230      	addls	r2, #48	; 0x30
 80100c4:	3237      	addhi	r2, #55	; 0x37
 80100c6:	44a4      	add	ip, r4
 80100c8:	7708      	strb	r0, [r1, #28]
 80100ca:	f88c 201c 	strb.w	r2, [ip, #28]
 80100ce:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 80100d2:	f103 0e02 	add.w	lr, r3, #2
 80100d6:	0910      	lsrs	r0, r2, #4
 80100d8:	2a9f      	cmp	r2, #159	; 0x9f
 80100da:	f002 020f 	and.w	r2, r2, #15
 80100de:	bf94      	ite	ls
 80100e0:	3030      	addls	r0, #48	; 0x30
 80100e2:	3037      	addhi	r0, #55	; 0x37
 80100e4:	f103 0903 	add.w	r9, r3, #3
 80100e8:	2a09      	cmp	r2, #9
 80100ea:	44a6      	add	lr, r4
 80100ec:	f88e 001c 	strb.w	r0, [lr, #28]
 80100f0:	bf94      	ite	ls
 80100f2:	3230      	addls	r2, #48	; 0x30
 80100f4:	3237      	addhi	r2, #55	; 0x37
 80100f6:	eb04 0009 	add.w	r0, r4, r9
 80100fa:	7702      	strb	r2, [r0, #28]
 80100fc:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8010100:	f103 0c04 	add.w	ip, r3, #4
 8010104:	0910      	lsrs	r0, r2, #4
 8010106:	2a9f      	cmp	r2, #159	; 0x9f
 8010108:	f002 020f 	and.w	r2, r2, #15
 801010c:	bf94      	ite	ls
 801010e:	3030      	addls	r0, #48	; 0x30
 8010110:	3037      	addhi	r0, #55	; 0x37
 8010112:	3305      	adds	r3, #5
 8010114:	2a09      	cmp	r2, #9
 8010116:	4423      	add	r3, r4
 8010118:	44a4      	add	ip, r4
 801011a:	bf94      	ite	ls
 801011c:	3230      	addls	r2, #48	; 0x30
 801011e:	3237      	addhi	r2, #55	; 0x37
 8010120:	f88c 001c 	strb.w	r0, [ip, #28]
 8010124:	771a      	strb	r2, [r3, #28]
 8010126:	2300      	movs	r3, #0
 8010128:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 801012c:	7863      	ldrb	r3, [r4, #1]
 801012e:	2b00      	cmp	r3, #0
 8010130:	f040 8098 	bne.w	8010264 <Network::Init(NetworkParamsStore*)+0x244>
 8010134:	9b07      	ldr	r3, [sp, #28]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d172      	bne.n	8010220 <Network::Init(NetworkParamsStore*)+0x200>
 801013a:	4620      	mov	r0, r4
 801013c:	f7ff ff5f 	bl	800fffe <Network::SetDefaultIp()>
 8010140:	6923      	ldr	r3, [r4, #16]
 8010142:	69a2      	ldr	r2, [r4, #24]
 8010144:	9307      	str	r3, [sp, #28]
 8010146:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801014a:	1ce3      	adds	r3, r4, #3
 801014c:	f104 0901 	add.w	r9, r4, #1
 8010150:	9302      	str	r3, [sp, #8]
 8010152:	9300      	str	r3, [sp, #0]
 8010154:	4632      	mov	r2, r6
 8010156:	464b      	mov	r3, r9
 8010158:	4638      	mov	r0, r7
 801015a:	a907      	add	r1, sp, #28
 801015c:	f7f6 fff8 	bl	8007150 <net_init>
 8010160:	78e3      	ldrb	r3, [r4, #3]
 8010162:	b11b      	cbz	r3, 801016c <Network::Init(NetworkParamsStore*)+0x14c>
 8010164:	2104      	movs	r1, #4
 8010166:	4628      	mov	r0, r5
 8010168:	f001 fc20 	bl	80119ac <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801016c:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010170:	f898 a05d 	ldrb.w	sl, [r8, #93]	; 0x5d
 8010174:	9304      	str	r3, [sp, #16]
 8010176:	233c      	movs	r3, #60	; 0x3c
 8010178:	fb03 f30a 	mul.w	r3, r3, sl
 801017c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8010278 <Network::Init(NetworkParamsStore*)+0x258>
 8010180:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 801027c <Network::Init(NetworkParamsStore*)+0x25c>
 8010184:	9303      	str	r3, [sp, #12]
 8010186:	78e3      	ldrb	r3, [r4, #3]
 8010188:	b393      	cbz	r3, 80101f0 <Network::Init(NetworkParamsStore*)+0x1d0>
 801018a:	f1ba 0f00 	cmp.w	sl, #0
 801018e:	d02f      	beq.n	80101f0 <Network::Init(NetworkParamsStore*)+0x1d0>
 8010190:	9b04      	ldr	r3, [sp, #16]
 8010192:	b36b      	cbz	r3, 80101f0 <Network::Init(NetworkParamsStore*)+0x1d0>
 8010194:	2104      	movs	r1, #4
 8010196:	f8d8 0000 	ldr.w	r0, [r8]
 801019a:	f002 fa03 	bl	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 801019e:	2103      	movs	r1, #3
 80101a0:	4628      	mov	r0, r5
 80101a2:	f001 fc03 	bl	80119ac <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80101a6:	2000      	movs	r0, #0
 80101a8:	f002 ff0a 	bl	8012fc0 <time>
 80101ac:	9005      	str	r0, [sp, #20]
 80101ae:	2000      	movs	r0, #0
 80101b0:	f002 ff06 	bl	8012fc0 <time>
 80101b4:	9b05      	ldr	r3, [sp, #20]
 80101b6:	4932      	ldr	r1, [pc, #200]	; (8010280 <Network::Init(NetworkParamsStore*)+0x260>)
 80101b8:	1ac0      	subs	r0, r0, r3
 80101ba:	9b03      	ldr	r3, [sp, #12]
 80101bc:	4298      	cmp	r0, r3
 80101be:	db37      	blt.n	8010230 <Network::Init(NetworkParamsStore*)+0x210>
 80101c0:	2101      	movs	r1, #1
 80101c2:	4628      	mov	r0, r5
 80101c4:	f001 fbf2 	bl	80119ac <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80101c8:	2101      	movs	r1, #1
 80101ca:	f8d8 0000 	ldr.w	r0, [r8]
 80101ce:	f002 f9e9 	bl	80125a4 <LedBlink::SetMode(ledblink::Mode)>
 80101d2:	2301      	movs	r3, #1
 80101d4:	7063      	strb	r3, [r4, #1]
 80101d6:	2300      	movs	r3, #0
 80101d8:	70e3      	strb	r3, [r4, #3]
 80101da:	9b02      	ldr	r3, [sp, #8]
 80101dc:	4632      	mov	r2, r6
 80101de:	9300      	str	r3, [sp, #0]
 80101e0:	4638      	mov	r0, r7
 80101e2:	464b      	mov	r3, r9
 80101e4:	a907      	add	r1, sp, #28
 80101e6:	f7f6 ffb3 	bl	8007150 <net_init>
 80101ea:	7863      	ldrb	r3, [r4, #1]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d0ca      	beq.n	8010186 <Network::Init(NetworkParamsStore*)+0x166>
 80101f0:	9b07      	ldr	r3, [sp, #28]
 80101f2:	4628      	mov	r0, r5
 80101f4:	6123      	str	r3, [r4, #16]
 80101f6:	9b08      	ldr	r3, [sp, #32]
 80101f8:	61a3      	str	r3, [r4, #24]
 80101fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101fc:	6163      	str	r3, [r4, #20]
 80101fe:	f001 fbbd 	bl	801197c <NetworkDisplay::ShowIp()>
 8010202:	b00b      	add	sp, #44	; 0x2c
 8010204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010208:	4663      	mov	r3, ip
 801020a:	f800 2b01 	strb.w	r2, [r0], #1
 801020e:	e745      	b.n	801009c <Network::Init(NetworkParamsStore*)+0x7c>
 8010210:	4630      	mov	r0, r6
 8010212:	491c      	ldr	r1, [pc, #112]	; (8010284 <Network::Init(NetworkParamsStore*)+0x264>)
 8010214:	f7ff fe9c 	bl	800ff50 <strncpy.constprop.0.isra.0>
 8010218:	2300      	movs	r3, #0
 801021a:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801021e:	e785      	b.n	801012c <Network::Init(NetworkParamsStore*)+0x10c>
 8010220:	69a1      	ldr	r1, [r4, #24]
 8010222:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8010226:	4053      	eors	r3, r2
 8010228:	420b      	tst	r3, r1
 801022a:	bf18      	it	ne
 801022c:	9209      	strne	r2, [sp, #36]	; 0x24
 801022e:	e78c      	b.n	801014a <Network::Init(NetworkParamsStore*)+0x12a>
 8010230:	f8d8 3000 	ldr.w	r3, [r8]
 8010234:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8010238:	f1bc 0f00 	cmp.w	ip, #0
 801023c:	d0b7      	beq.n	80101ae <Network::Init(NetworkParamsStore*)+0x18e>
 801023e:	6808      	ldr	r0, [r1, #0]
 8010240:	695a      	ldr	r2, [r3, #20]
 8010242:	1a80      	subs	r0, r0, r2
 8010244:	4584      	cmp	ip, r0
 8010246:	d8b2      	bhi.n	80101ae <Network::Init(NetworkParamsStore*)+0x18e>
 8010248:	6808      	ldr	r0, [r1, #0]
 801024a:	6158      	str	r0, [r3, #20]
 801024c:	6918      	ldr	r0, [r3, #16]
 801024e:	2801      	cmp	r0, #1
 8010250:	f080 0201 	eor.w	r2, r0, #1
 8010254:	611a      	str	r2, [r3, #16]
 8010256:	bf16      	itet	ne
 8010258:	2301      	movne	r3, #1
 801025a:	f8cb 0014 	streq.w	r0, [fp, #20]
 801025e:	f8cb 3010 	strne.w	r3, [fp, #16]
 8010262:	e7a4      	b.n	80101ae <Network::Init(NetworkParamsStore*)+0x18e>
 8010264:	2101      	movs	r1, #1
 8010266:	4628      	mov	r0, r5
 8010268:	f001 fba0 	bl	80119ac <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801026c:	e76d      	b.n	801014a <Network::Init(NetworkParamsStore*)+0x12a>
 801026e:	bf00      	nop
 8010270:	200095c4 	andcs	r9, r0, r4, asr #11
 8010274:	08016b34 	stmdaeq	r1, {r2, r4, r5, r8, r9, fp, sp, lr}
 8010278:	20009ce4 	andcs	r9, r0, r4, ror #25
 801027c:	40011000 	andmi	r1, r1, r0
 8010280:	20009d04 	andcs	r9, r0, r4, lsl #26
 8010284:	200095d9 	ldrdcs	r9, [r0], -r9	; <UNPREDICTABLE>

08010288 <Network::SetIp(unsigned int)>:
 8010288:	7843      	ldrb	r3, [r0, #1]
 801028a:	b570      	push	{r4, r5, r6, lr}
 801028c:	4604      	mov	r4, r0
 801028e:	460d      	mov	r5, r1
 8010290:	2600      	movs	r6, #0
 8010292:	b113      	cbz	r3, 801029a <Network::SetIp(unsigned int)+0x12>
 8010294:	7046      	strb	r6, [r0, #1]
 8010296:	f7fe feff 	bl	800f098 <net_dhcp_release>
 801029a:	70e6      	strb	r6, [r4, #3]
 801029c:	b975      	cbnz	r5, 80102bc <Network::SetIp(unsigned int)+0x34>
 801029e:	4620      	mov	r0, r4
 80102a0:	f7ff fead 	bl	800fffe <Network::SetDefaultIp()>
 80102a4:	6920      	ldr	r0, [r4, #16]
 80102a6:	f7fe feb3 	bl	800f010 <net_set_ip>
 80102aa:	34b8      	adds	r4, #184	; 0xb8
 80102ac:	4620      	mov	r0, r4
 80102ae:	f001 fb65 	bl	801197c <NetworkDisplay::ShowIp()>
 80102b2:	4620      	mov	r0, r4
 80102b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80102b8:	f001 bb66 	b.w	8011988 <NetworkDisplay::ShowNetMask()>
 80102bc:	4628      	mov	r0, r5
 80102be:	f7fe fea7 	bl	800f010 <net_set_ip>
 80102c2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80102c6:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80102ca:	2800      	cmp	r0, #0
 80102cc:	d0ed      	beq.n	80102aa <Network::SetIp(unsigned int)+0x22>
 80102ce:	6803      	ldr	r3, [r0, #0]
 80102d0:	4629      	mov	r1, r5
 80102d2:	689b      	ldr	r3, [r3, #8]
 80102d4:	4798      	blx	r3
 80102d6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80102da:	2100      	movs	r1, #0
 80102dc:	6803      	ldr	r3, [r0, #0]
 80102de:	699b      	ldr	r3, [r3, #24]
 80102e0:	4798      	blx	r3
 80102e2:	e7e2      	b.n	80102aa <Network::SetIp(unsigned int)+0x22>

080102e4 <Network::SetNetmask(unsigned int)>:
 80102e4:	6982      	ldr	r2, [r0, #24]
 80102e6:	b510      	push	{r4, lr}
 80102e8:	428a      	cmp	r2, r1
 80102ea:	4604      	mov	r4, r0
 80102ec:	d00f      	beq.n	801030e <Network::SetNetmask(unsigned int)+0x2a>
 80102ee:	6181      	str	r1, [r0, #24]
 80102f0:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 80102f4:	b110      	cbz	r0, 80102fc <Network::SetNetmask(unsigned int)+0x18>
 80102f6:	6803      	ldr	r3, [r0, #0]
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	4798      	blx	r3
 80102fc:	34b8      	adds	r4, #184	; 0xb8
 80102fe:	4620      	mov	r0, r4
 8010300:	f001 fb3c 	bl	801197c <NetworkDisplay::ShowIp()>
 8010304:	4620      	mov	r0, r4
 8010306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801030a:	f001 bb3d 	b.w	8011988 <NetworkDisplay::ShowNetMask()>
 801030e:	bd10      	pop	{r4, pc}

08010310 <Network::SetGatewayIp(unsigned int)>:
 8010310:	b538      	push	{r3, r4, r5, lr}
 8010312:	6943      	ldr	r3, [r0, #20]
 8010314:	4604      	mov	r4, r0
 8010316:	428b      	cmp	r3, r1
 8010318:	460d      	mov	r5, r1
 801031a:	d00f      	beq.n	801033c <Network::SetGatewayIp(unsigned int)+0x2c>
 801031c:	4608      	mov	r0, r1
 801031e:	f7fe fe87 	bl	800f030 <net_set_gw>
 8010322:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8010326:	b118      	cbz	r0, 8010330 <Network::SetGatewayIp(unsigned int)+0x20>
 8010328:	6803      	ldr	r3, [r0, #0]
 801032a:	4629      	mov	r1, r5
 801032c:	691b      	ldr	r3, [r3, #16]
 801032e:	4798      	blx	r3
 8010330:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8010334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010338:	f001 bb2c 	b.w	8011994 <NetworkDisplay::ShowGatewayIp()>
 801033c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010340 <Network::EnableDhcp()>:
 8010340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010342:	4e23      	ldr	r6, [pc, #140]	; (80103d0 <Network::EnableDhcp()+0x90>)
 8010344:	4604      	mov	r4, r0
 8010346:	6833      	ldr	r3, [r6, #0]
 8010348:	b085      	sub	sp, #20
 801034a:	791f      	ldrb	r7, [r3, #4]
 801034c:	b137      	cbz	r7, 801035c <Network::EnableDhcp()+0x1c>
 801034e:	2200      	movs	r2, #0
 8010350:	2104      	movs	r1, #4
 8010352:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010356:	711a      	strb	r2, [r3, #4]
 8010358:	f003 f828 	bl	80133ac <fwdgt_config>
 801035c:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8010360:	2101      	movs	r1, #1
 8010362:	4628      	mov	r0, r5
 8010364:	f001 fb22 	bl	80119ac <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010368:	1ce2      	adds	r2, r4, #3
 801036a:	f104 011c 	add.w	r1, r4, #28
 801036e:	a801      	add	r0, sp, #4
 8010370:	f7fe fe66 	bl	800f040 <net_set_dhcp>
 8010374:	78e3      	ldrb	r3, [r4, #3]
 8010376:	7060      	strb	r0, [r4, #1]
 8010378:	b343      	cbz	r3, 80103cc <Network::EnableDhcp()+0x8c>
 801037a:	2104      	movs	r1, #4
 801037c:	4628      	mov	r0, r5
 801037e:	f001 fb15 	bl	80119ac <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010382:	b16f      	cbz	r7, 80103a0 <Network::EnableDhcp()+0x60>
 8010384:	2102      	movs	r1, #2
 8010386:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801038a:	6836      	ldr	r6, [r6, #0]
 801038c:	f003 f80e 	bl	80133ac <fwdgt_config>
 8010390:	2801      	cmp	r0, #1
 8010392:	bf0c      	ite	eq
 8010394:	2301      	moveq	r3, #1
 8010396:	2300      	movne	r3, #0
 8010398:	7133      	strb	r3, [r6, #4]
 801039a:	d101      	bne.n	80103a0 <Network::EnableDhcp()+0x60>
 801039c:	f002 fff6 	bl	801338c <fwdgt_enable>
 80103a0:	9b01      	ldr	r3, [sp, #4]
 80103a2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80103a6:	6123      	str	r3, [r4, #16]
 80103a8:	9b02      	ldr	r3, [sp, #8]
 80103aa:	61a3      	str	r3, [r4, #24]
 80103ac:	9b03      	ldr	r3, [sp, #12]
 80103ae:	6163      	str	r3, [r4, #20]
 80103b0:	b118      	cbz	r0, 80103ba <Network::EnableDhcp()+0x7a>
 80103b2:	6803      	ldr	r3, [r0, #0]
 80103b4:	7861      	ldrb	r1, [r4, #1]
 80103b6:	699b      	ldr	r3, [r3, #24]
 80103b8:	4798      	blx	r3
 80103ba:	4628      	mov	r0, r5
 80103bc:	f001 fade 	bl	801197c <NetworkDisplay::ShowIp()>
 80103c0:	4628      	mov	r0, r5
 80103c2:	f001 fae1 	bl	8011988 <NetworkDisplay::ShowNetMask()>
 80103c6:	7860      	ldrb	r0, [r4, #1]
 80103c8:	b005      	add	sp, #20
 80103ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103cc:	2102      	movs	r1, #2
 80103ce:	e7d5      	b.n	801037c <Network::EnableDhcp()+0x3c>
 80103d0:	20009ce8 	andcs	r9, r0, r8, ror #25

080103d4 <Network::Print()>:
 80103d4:	b530      	push	{r4, r5, lr}
 80103d6:	4604      	mov	r4, r0
 80103d8:	b085      	sub	sp, #20
 80103da:	4832      	ldr	r0, [pc, #200]	; (80104a4 <Network::Print()+0xd0>)
 80103dc:	f002 fcba 	bl	8012d54 <printf>
 80103e0:	f104 011c 	add.w	r1, r4, #28
 80103e4:	4830      	ldr	r0, [pc, #192]	; (80104a8 <Network::Print()+0xd4>)
 80103e6:	f002 fcb5 	bl	8012d54 <printf>
 80103ea:	6861      	ldr	r1, [r4, #4]
 80103ec:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 80103f0:	482e      	ldr	r0, [pc, #184]	; (80104ac <Network::Print()+0xd8>)
 80103f2:	f002 fcaf 	bl	8012d54 <printf>
 80103f6:	69a0      	ldr	r0, [r4, #24]
 80103f8:	f004 fc96 	bl	8014d28 <__popcountsi2>
 80103fc:	6925      	ldr	r5, [r4, #16]
 80103fe:	9001      	str	r0, [sp, #4]
 8010400:	0e2b      	lsrs	r3, r5, #24
 8010402:	9300      	str	r3, [sp, #0]
 8010404:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8010408:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801040c:	b2e9      	uxtb	r1, r5
 801040e:	4828      	ldr	r0, [pc, #160]	; (80104b0 <Network::Print()+0xdc>)
 8010410:	f002 fca0 	bl	8012d54 <printf>
 8010414:	69a1      	ldr	r1, [r4, #24]
 8010416:	4827      	ldr	r0, [pc, #156]	; (80104b4 <Network::Print()+0xe0>)
 8010418:	0e0b      	lsrs	r3, r1, #24
 801041a:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010424:	b2c9      	uxtb	r1, r1
 8010426:	f002 fc95 	bl	8012d54 <printf>
 801042a:	6961      	ldr	r1, [r4, #20]
 801042c:	4822      	ldr	r0, [pc, #136]	; (80104b8 <Network::Print()+0xe4>)
 801042e:	0e0b      	lsrs	r3, r1, #24
 8010430:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010434:	9300      	str	r3, [sp, #0]
 8010436:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801043a:	b2c9      	uxtb	r1, r1
 801043c:	f002 fc8a 	bl	8012d54 <printf>
 8010440:	69a3      	ldr	r3, [r4, #24]
 8010442:	6921      	ldr	r1, [r4, #16]
 8010444:	481d      	ldr	r0, [pc, #116]	; (80104bc <Network::Print()+0xe8>)
 8010446:	ea61 0103 	orn	r1, r1, r3
 801044a:	0e0b      	lsrs	r3, r1, #24
 801044c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010450:	9300      	str	r3, [sp, #0]
 8010452:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010456:	b2c9      	uxtb	r1, r1
 8010458:	f002 fc7c 	bl	8012d54 <printf>
 801045c:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8010460:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 8010464:	9302      	str	r3, [sp, #8]
 8010466:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 801046a:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 801046e:	9301      	str	r3, [sp, #4]
 8010470:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8010474:	4812      	ldr	r0, [pc, #72]	; (80104c0 <Network::Print()+0xec>)
 8010476:	9300      	str	r3, [sp, #0]
 8010478:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 801047c:	f002 fc6a 	bl	8012d54 <printf>
 8010480:	4b10      	ldr	r3, [pc, #64]	; (80104c4 <Network::Print()+0xf0>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	78da      	ldrb	r2, [r3, #3]
 8010486:	b952      	cbnz	r2, 801049e <Network::Print()+0xca>
 8010488:	785b      	ldrb	r3, [r3, #1]
 801048a:	2b00      	cmp	r3, #0
 801048c:	bf14      	ite	ne
 801048e:	2144      	movne	r1, #68	; 0x44
 8010490:	2153      	moveq	r1, #83	; 0x53
 8010492:	480d      	ldr	r0, [pc, #52]	; (80104c8 <Network::Print()+0xf4>)
 8010494:	b005      	add	sp, #20
 8010496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801049a:	f002 bc5b 	b.w	8012d54 <printf>
 801049e:	215a      	movs	r1, #90	; 0x5a
 80104a0:	e7f7      	b.n	8010492 <Network::Print()+0xbe>
 80104a2:	bf00      	nop
 80104a4:	08016b40 	stmdaeq	r1, {r6, r8, r9, fp, sp, lr}
 80104a8:	08016b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, sp, lr}
 80104ac:	08016b5a 	stmdaeq	r1, {r1, r3, r4, r6, r8, r9, fp, sp, lr}
 80104b0:	08016b6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, fp, sp, lr}
 80104b4:	08016b8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, fp, sp, lr}
 80104b8:	08016ba6 	stmdaeq	r1, {r1, r2, r5, r7, r8, r9, fp, sp, lr}
 80104bc:	08016bc0 	stmdaeq	r1, {r6, r7, r8, r9, fp, sp, lr}
 80104c0:	08016bda 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, r9, fp, sp, lr}
 80104c4:	200095c0 	andcs	r9, r0, r0, asr #11
 80104c8:	08016c06 	stmdaeq	r1, {r1, r2, sl, fp, sp, lr}

080104cc <Network::TcpBegin(unsigned short)>:
 80104cc:	4608      	mov	r0, r1
 80104ce:	f7fe bf5d 	b.w	800f38c <tcp_begin>

080104d2 <Network::TcpRead(int, unsigned char const**)>:
 80104d2:	4608      	mov	r0, r1
 80104d4:	4611      	mov	r1, r2
 80104d6:	f7fe bf97 	b.w	800f408 <tcp_read>

080104da <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 80104da:	4608      	mov	r0, r1
 80104dc:	4611      	mov	r1, r2
 80104de:	461a      	mov	r2, r3
 80104e0:	f7fe bf6e 	b.w	800f3c0 <tcp_write>

080104e4 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 80104e4:	4b06      	ldr	r3, [pc, #24]	; (8010500 <NetworkParams::NetworkParams(NetworkParamsStore*)+0x1c>)
 80104e6:	b510      	push	{r4, lr}
 80104e8:	225e      	movs	r2, #94	; 0x5e
 80104ea:	4604      	mov	r4, r0
 80104ec:	6001      	str	r1, [r0, #0]
 80104ee:	2100      	movs	r1, #0
 80104f0:	4618      	mov	r0, r3
 80104f2:	f002 fa15 	bl	8012920 <memset>
 80104f6:	2201      	movs	r2, #1
 80104f8:	7502      	strb	r2, [r0, #20]
 80104fa:	4620      	mov	r0, r4
 80104fc:	bd10      	pop	{r4, pc}
 80104fe:	bf00      	nop
 8010500:	200095c4 	andcs	r9, r0, r4, asr #11

08010504 <NetworkParams::Load()>:
 8010504:	b508      	push	{r3, lr}
 8010506:	2300      	movs	r3, #0
 8010508:	4905      	ldr	r1, [pc, #20]	; (8010520 <NetworkParams::Load()+0x1c>)
 801050a:	6800      	ldr	r0, [r0, #0]
 801050c:	700b      	strb	r3, [r1, #0]
 801050e:	704b      	strb	r3, [r1, #1]
 8010510:	708b      	strb	r3, [r1, #2]
 8010512:	70cb      	strb	r3, [r1, #3]
 8010514:	b118      	cbz	r0, 801051e <NetworkParams::Load()+0x1a>
 8010516:	6803      	ldr	r3, [r0, #0]
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	4798      	blx	r3
 801051c:	2001      	movs	r0, #1
 801051e:	bd08      	pop	{r3, pc}
 8010520:	200095c4 	andcs	r9, r0, r4, asr #11

08010524 <NetworkParams::Load(char const*, unsigned int)>:
 8010524:	6803      	ldr	r3, [r0, #0]
 8010526:	b1eb      	cbz	r3, 8010564 <NetworkParams::Load(char const*, unsigned int)+0x40>
 8010528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801052a:	2300      	movs	r3, #0
 801052c:	460e      	mov	r6, r1
 801052e:	4617      	mov	r7, r2
 8010530:	4605      	mov	r5, r0
 8010532:	4c0d      	ldr	r4, [pc, #52]	; (8010568 <NetworkParams::Load(char const*, unsigned int)+0x44>)
 8010534:	4602      	mov	r2, r0
 8010536:	490d      	ldr	r1, [pc, #52]	; (801056c <NetworkParams::Load(char const*, unsigned int)+0x48>)
 8010538:	4668      	mov	r0, sp
 801053a:	7023      	strb	r3, [r4, #0]
 801053c:	7063      	strb	r3, [r4, #1]
 801053e:	70a3      	strb	r3, [r4, #2]
 8010540:	70e3      	strb	r3, [r4, #3]
 8010542:	f001 fbbb 	bl	8011cbc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8010546:	463a      	mov	r2, r7
 8010548:	4631      	mov	r1, r6
 801054a:	4668      	mov	r0, sp
 801054c:	f001 fbba 	bl	8011cc4 <ReadConfigFile::Read(char const*, unsigned int)>
 8010550:	6828      	ldr	r0, [r5, #0]
 8010552:	4621      	mov	r1, r4
 8010554:	6803      	ldr	r3, [r0, #0]
 8010556:	689b      	ldr	r3, [r3, #8]
 8010558:	4798      	blx	r3
 801055a:	4668      	mov	r0, sp
 801055c:	f001 fbb1 	bl	8011cc2 <ReadConfigFile::~ReadConfigFile()>
 8010560:	b003      	add	sp, #12
 8010562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010564:	4770      	bx	lr
 8010566:	bf00      	nop
 8010568:	200095c4 	andcs	r9, r0, r4, asr #11
 801056c:	080106a1 	stmdaeq	r1, {r0, r5, r7, r9, sl}

08010570 <NetworkParams::callbackFunction(char const*)>:
 8010570:	b530      	push	{r4, r5, lr}
 8010572:	460c      	mov	r4, r1
 8010574:	b085      	sub	sp, #20
 8010576:	4620      	mov	r0, r4
 8010578:	4942      	ldr	r1, [pc, #264]	; (8010684 <NetworkParams::callbackFunction(char const*)+0x114>)
 801057a:	f10d 0207 	add.w	r2, sp, #7
 801057e:	f001 fc77 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010582:	b980      	cbnz	r0, 80105a6 <NetworkParams::callbackFunction(char const*)+0x36>
 8010584:	4940      	ldr	r1, [pc, #256]	; (8010688 <NetworkParams::callbackFunction(char const*)+0x118>)
 8010586:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801058a:	680b      	ldr	r3, [r1, #0]
 801058c:	b142      	cbz	r2, 80105a0 <NetworkParams::callbackFunction(char const*)+0x30>
 801058e:	f023 0301 	bic.w	r3, r3, #1
 8010592:	3a00      	subs	r2, #0
 8010594:	bf18      	it	ne
 8010596:	2201      	movne	r2, #1
 8010598:	600b      	str	r3, [r1, #0]
 801059a:	750a      	strb	r2, [r1, #20]
 801059c:	b005      	add	sp, #20
 801059e:	bd30      	pop	{r4, r5, pc}
 80105a0:	f043 0301 	orr.w	r3, r3, #1
 80105a4:	e7f5      	b.n	8010592 <NetworkParams::callbackFunction(char const*)+0x22>
 80105a6:	4620      	mov	r0, r4
 80105a8:	4938      	ldr	r1, [pc, #224]	; (801068c <NetworkParams::callbackFunction(char const*)+0x11c>)
 80105aa:	f10d 0207 	add.w	r2, sp, #7
 80105ae:	f001 fc5f 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80105b2:	b988      	cbnz	r0, 80105d8 <NetworkParams::callbackFunction(char const*)+0x68>
 80105b4:	4a34      	ldr	r2, [pc, #208]	; (8010688 <NetworkParams::callbackFunction(char const*)+0x118>)
 80105b6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80105ba:	6813      	ldr	r3, [r2, #0]
 80105bc:	1e4d      	subs	r5, r1, #1
 80105be:	2d04      	cmp	r5, #4
 80105c0:	bf97      	itett	ls
 80105c2:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 80105c6:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 80105ca:	6013      	strls	r3, [r2, #0]
 80105cc:	f882 105d 	strbls.w	r1, [r2, #93]	; 0x5d
 80105d0:	bf84      	itt	hi
 80105d2:	6013      	strhi	r3, [r2, #0]
 80105d4:	f882 005d 	strbhi.w	r0, [r2, #93]	; 0x5d
 80105d8:	4620      	mov	r0, r4
 80105da:	492d      	ldr	r1, [pc, #180]	; (8010690 <NetworkParams::callbackFunction(char const*)+0x120>)
 80105dc:	aa02      	add	r2, sp, #8
 80105de:	f001 fbe8 	bl	8011db2 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80105e2:	b9d0      	cbnz	r0, 801061a <NetworkParams::callbackFunction(char const*)+0xaa>
 80105e4:	9b02      	ldr	r3, [sp, #8]
 80105e6:	b2d9      	uxtb	r1, r3
 80105e8:	29ac      	cmp	r1, #172	; 0xac
 80105ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80105ee:	d00a      	beq.n	8010606 <NetworkParams::callbackFunction(char const*)+0x96>
 80105f0:	29c0      	cmp	r1, #192	; 0xc0
 80105f2:	d00c      	beq.n	801060e <NetworkParams::callbackFunction(char const*)+0x9e>
 80105f4:	290a      	cmp	r1, #10
 80105f6:	d10d      	bne.n	8010614 <NetworkParams::callbackFunction(char const*)+0xa4>
 80105f8:	4a23      	ldr	r2, [pc, #140]	; (8010688 <NetworkParams::callbackFunction(char const*)+0x118>)
 80105fa:	6053      	str	r3, [r2, #4]
 80105fc:	6813      	ldr	r3, [r2, #0]
 80105fe:	f043 0302 	orr.w	r3, r3, #2
 8010602:	6013      	str	r3, [r2, #0]
 8010604:	e7ca      	b.n	801059c <NetworkParams::callbackFunction(char const*)+0x2c>
 8010606:	3a10      	subs	r2, #16
 8010608:	2a0f      	cmp	r2, #15
 801060a:	d8c7      	bhi.n	801059c <NetworkParams::callbackFunction(char const*)+0x2c>
 801060c:	e7f4      	b.n	80105f8 <NetworkParams::callbackFunction(char const*)+0x88>
 801060e:	2aa8      	cmp	r2, #168	; 0xa8
 8010610:	d1c4      	bne.n	801059c <NetworkParams::callbackFunction(char const*)+0x2c>
 8010612:	e7f1      	b.n	80105f8 <NetworkParams::callbackFunction(char const*)+0x88>
 8010614:	2b00      	cmp	r3, #0
 8010616:	d0ef      	beq.n	80105f8 <NetworkParams::callbackFunction(char const*)+0x88>
 8010618:	e7c0      	b.n	801059c <NetworkParams::callbackFunction(char const*)+0x2c>
 801061a:	4620      	mov	r0, r4
 801061c:	491d      	ldr	r1, [pc, #116]	; (8010694 <NetworkParams::callbackFunction(char const*)+0x124>)
 801061e:	aa02      	add	r2, sp, #8
 8010620:	f001 fbc7 	bl	8011db2 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010624:	b970      	cbnz	r0, 8010644 <NetworkParams::callbackFunction(char const*)+0xd4>
 8010626:	9a02      	ldr	r2, [sp, #8]
 8010628:	2a00      	cmp	r2, #0
 801062a:	d0b7      	beq.n	801059c <NetworkParams::callbackFunction(char const*)+0x2c>
 801062c:	ba13      	rev	r3, r2
 801062e:	43d9      	mvns	r1, r3
 8010630:	ea13 0351 	ands.w	r3, r3, r1, lsr #1
 8010634:	d1b2      	bne.n	801059c <NetworkParams::callbackFunction(char const*)+0x2c>
 8010636:	4b14      	ldr	r3, [pc, #80]	; (8010688 <NetworkParams::callbackFunction(char const*)+0x118>)
 8010638:	609a      	str	r2, [r3, #8]
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	f042 0204 	orr.w	r2, r2, #4
 8010640:	601a      	str	r2, [r3, #0]
 8010642:	e7ab      	b.n	801059c <NetworkParams::callbackFunction(char const*)+0x2c>
 8010644:	4620      	mov	r0, r4
 8010646:	4914      	ldr	r1, [pc, #80]	; (8010698 <NetworkParams::callbackFunction(char const*)+0x128>)
 8010648:	aa02      	add	r2, sp, #8
 801064a:	f001 fbb2 	bl	8011db2 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 801064e:	4d0e      	ldr	r5, [pc, #56]	; (8010688 <NetworkParams::callbackFunction(char const*)+0x118>)
 8010650:	b930      	cbnz	r0, 8010660 <NetworkParams::callbackFunction(char const*)+0xf0>
 8010652:	9b02      	ldr	r3, [sp, #8]
 8010654:	60eb      	str	r3, [r5, #12]
 8010656:	682b      	ldr	r3, [r5, #0]
 8010658:	f043 0308 	orr.w	r3, r3, #8
 801065c:	602b      	str	r3, [r5, #0]
 801065e:	e79d      	b.n	801059c <NetworkParams::callbackFunction(char const*)+0x2c>
 8010660:	233f      	movs	r3, #63	; 0x3f
 8010662:	4620      	mov	r0, r4
 8010664:	9303      	str	r3, [sp, #12]
 8010666:	490d      	ldr	r1, [pc, #52]	; (801069c <NetworkParams::callbackFunction(char const*)+0x12c>)
 8010668:	ab03      	add	r3, sp, #12
 801066a:	f105 0215 	add.w	r2, r5, #21
 801066e:	f001 fb5d 	bl	8011d2c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8010672:	2800      	cmp	r0, #0
 8010674:	d192      	bne.n	801059c <NetworkParams::callbackFunction(char const*)+0x2c>
 8010676:	9b03      	ldr	r3, [sp, #12]
 8010678:	442b      	add	r3, r5
 801067a:	7558      	strb	r0, [r3, #21]
 801067c:	682b      	ldr	r3, [r5, #0]
 801067e:	f043 0320 	orr.w	r3, r3, #32
 8010682:	e7eb      	b.n	801065c <NetworkParams::callbackFunction(char const*)+0xec>
 8010684:	08016c5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, sl, fp, sp, lr}
 8010688:	200095c4 	andcs	r9, r0, r4, asr #11
 801068c:	08016c3c 	stmdaeq	r1, {r2, r3, r4, r5, sl, fp, sp, lr}
 8010690:	08016c21 	stmdaeq	r1, {r0, r5, sl, fp, sp, lr}
 8010694:	08016c55 	stmdaeq	r1, {r0, r2, r4, r6, sl, fp, sp, lr}
 8010698:	08016c2c 	stmdaeq	r1, {r2, r3, r5, sl, fp, sp, lr}
 801069c:	08016c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, sp, lr}

080106a0 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 80106a0:	f7ff bf66 	b.w	8010570 <NetworkParams::callbackFunction(char const*)>

080106a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 80106a4:	b530      	push	{r4, r5, lr}
 80106a6:	4614      	mov	r4, r2
 80106a8:	461d      	mov	r5, r3
 80106aa:	b087      	sub	sp, #28
 80106ac:	2900      	cmp	r1, #0
 80106ae:	d02a      	beq.n	8010706 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x62>
 80106b0:	225e      	movs	r2, #94	; 0x5e
 80106b2:	4872      	ldr	r0, [pc, #456]	; (801087c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 80106b4:	f002 f91d 	bl	80128f2 <memmove>
 80106b8:	4622      	mov	r2, r4
 80106ba:	462b      	mov	r3, r5
 80106bc:	4970      	ldr	r1, [pc, #448]	; (8010880 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80106be:	a803      	add	r0, sp, #12
 80106c0:	f001 fa2c 	bl	8011b1c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80106c4:	4c6d      	ldr	r4, [pc, #436]	; (801087c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 80106c6:	6823      	ldr	r3, [r4, #0]
 80106c8:	0799      	lsls	r1, r3, #30
 80106ca:	bf5f      	itttt	pl
 80106cc:	4a6d      	ldrpl	r2, [pc, #436]	; (8010884 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80106ce:	6812      	ldrpl	r2, [r2, #0]
 80106d0:	6912      	ldrpl	r2, [r2, #16]
 80106d2:	6062      	strpl	r2, [r4, #4]
 80106d4:	075a      	lsls	r2, r3, #29
 80106d6:	bf5f      	itttt	pl
 80106d8:	4a6a      	ldrpl	r2, [pc, #424]	; (8010884 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80106da:	6812      	ldrpl	r2, [r2, #0]
 80106dc:	6992      	ldrpl	r2, [r2, #24]
 80106de:	60a2      	strpl	r2, [r4, #8]
 80106e0:	071d      	lsls	r5, r3, #28
 80106e2:	bf5f      	itttt	pl
 80106e4:	4a67      	ldrpl	r2, [pc, #412]	; (8010884 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80106e6:	6812      	ldrpl	r2, [r2, #0]
 80106e8:	6952      	ldrpl	r2, [r2, #20]
 80106ea:	60e2      	strpl	r2, [r4, #12]
 80106ec:	0698      	lsls	r0, r3, #26
 80106ee:	d417      	bmi.n	8010720 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x7c>
 80106f0:	223f      	movs	r2, #63	; 0x3f
 80106f2:	4b64      	ldr	r3, [pc, #400]	; (8010884 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80106f4:	4864      	ldr	r0, [pc, #400]	; (8010888 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	331b      	adds	r3, #27
 80106fa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80106fe:	b941      	cbnz	r1, 8010712 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x6e>
 8010700:	f002 f90e 	bl	8012920 <memset>
 8010704:	e009      	b.n	801071a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x76>
 8010706:	6800      	ldr	r0, [r0, #0]
 8010708:	495c      	ldr	r1, [pc, #368]	; (801087c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1d8>)
 801070a:	6803      	ldr	r3, [r0, #0]
 801070c:	68db      	ldr	r3, [r3, #12]
 801070e:	4798      	blx	r3
 8010710:	e7d2      	b.n	80106b8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x14>
 8010712:	3a01      	subs	r2, #1
 8010714:	f800 1b01 	strb.w	r1, [r0], #1
 8010718:	d1ef      	bne.n	80106fa <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x56>
 801071a:	2300      	movs	r3, #0
 801071c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8010720:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010724:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8010728:	7d23      	ldrb	r3, [r4, #20]
 801072a:	42aa      	cmp	r2, r5
 801072c:	6821      	ldr	r1, [r4, #0]
 801072e:	d21a      	bcs.n	8010766 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc2>
 8010730:	9803      	ldr	r0, [sp, #12]
 8010732:	07c9      	lsls	r1, r1, #31
 8010734:	4410      	add	r0, r2
 8010736:	eba5 0502 	sub.w	r5, r5, r2
 801073a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801073e:	d404      	bmi.n	801074a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa6>
 8010740:	b922      	cbnz	r2, 801074c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa8>
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	4a51      	ldr	r2, [pc, #324]	; (801088c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8010746:	4b52      	ldr	r3, [pc, #328]	; (8010890 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8010748:	e003      	b.n	8010752 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 801074a:	b312      	cbz	r2, 8010792 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xee>
 801074c:	9300      	str	r3, [sp, #0]
 801074e:	4a51      	ldr	r2, [pc, #324]	; (8010894 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8010750:	4b4f      	ldr	r3, [pc, #316]	; (8010890 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8010752:	4629      	mov	r1, r5
 8010754:	f002 fb26 	bl	8012da4 <snprintf>
 8010758:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801075c:	4285      	cmp	r5, r0
 801075e:	bfa4      	itt	ge
 8010760:	181b      	addge	r3, r3, r0
 8010762:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8010766:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801076a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801076e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8010772:	42aa      	cmp	r2, r5
 8010774:	6821      	ldr	r1, [r4, #0]
 8010776:	d21f      	bcs.n	80107b8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x114>
 8010778:	9803      	ldr	r0, [sp, #12]
 801077a:	05c9      	lsls	r1, r1, #23
 801077c:	4410      	add	r0, r2
 801077e:	eba5 0502 	sub.w	r5, r5, r2
 8010782:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8010786:	d408      	bmi.n	801079a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf6>
 8010788:	b94a      	cbnz	r2, 801079e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfa>
 801078a:	9300      	str	r3, [sp, #0]
 801078c:	4a3f      	ldr	r2, [pc, #252]	; (801088c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e8>)
 801078e:	4b42      	ldr	r3, [pc, #264]	; (8010898 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8010790:	e008      	b.n	80107a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 8010792:	9300      	str	r3, [sp, #0]
 8010794:	4a41      	ldr	r2, [pc, #260]	; (801089c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 8010796:	4b3e      	ldr	r3, [pc, #248]	; (8010890 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8010798:	e7db      	b.n	8010752 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xae>
 801079a:	2a00      	cmp	r2, #0
 801079c:	d03e      	beq.n	801081c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x178>
 801079e:	9300      	str	r3, [sp, #0]
 80107a0:	4a3c      	ldr	r2, [pc, #240]	; (8010894 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80107a2:	4b3d      	ldr	r3, [pc, #244]	; (8010898 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 80107a4:	4629      	mov	r1, r5
 80107a6:	f002 fafd 	bl	8012da4 <snprintf>
 80107aa:	4285      	cmp	r5, r0
 80107ac:	bfa2      	ittt	ge
 80107ae:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80107b2:	18c0      	addge	r0, r0, r3
 80107b4:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80107b8:	4939      	ldr	r1, [pc, #228]	; (80108a0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 80107ba:	a803      	add	r0, sp, #12
 80107bc:	f001 fa34 	bl	8011c28 <PropertiesBuilder::AddComment(char const*)>
 80107c0:	6823      	ldr	r3, [r4, #0]
 80107c2:	6862      	ldr	r2, [r4, #4]
 80107c4:	4937      	ldr	r1, [pc, #220]	; (80108a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x200>)
 80107c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80107ca:	a803      	add	r0, sp, #12
 80107cc:	f001 f9e8 	bl	8011ba0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80107d0:	6823      	ldr	r3, [r4, #0]
 80107d2:	68a2      	ldr	r2, [r4, #8]
 80107d4:	4934      	ldr	r1, [pc, #208]	; (80108a8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x204>)
 80107d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80107da:	a803      	add	r0, sp, #12
 80107dc:	f001 f9e0 	bl	8011ba0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80107e0:	6823      	ldr	r3, [r4, #0]
 80107e2:	68e2      	ldr	r2, [r4, #12]
 80107e4:	4931      	ldr	r1, [pc, #196]	; (80108ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x208>)
 80107e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80107ea:	a803      	add	r0, sp, #12
 80107ec:	f001 f9d8 	bl	8011ba0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80107f0:	6821      	ldr	r1, [r4, #0]
 80107f2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80107f6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 80107fa:	42a3      	cmp	r3, r4
 80107fc:	d220      	bcs.n	8010840 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x19c>
 80107fe:	9803      	ldr	r0, [sp, #12]
 8010800:	f011 0f20 	tst.w	r1, #32
 8010804:	4418      	add	r0, r3
 8010806:	eba4 0403 	sub.w	r4, r4, r3
 801080a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801080e:	4b1e      	ldr	r3, [pc, #120]	; (8010888 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8010810:	d108      	bne.n	8010824 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x180>
 8010812:	b942      	cbnz	r2, 8010826 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x182>
 8010814:	9300      	str	r3, [sp, #0]
 8010816:	4a26      	ldr	r2, [pc, #152]	; (80108b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 8010818:	4b26      	ldr	r3, [pc, #152]	; (80108b4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 801081a:	e007      	b.n	801082c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x188>
 801081c:	9300      	str	r3, [sp, #0]
 801081e:	4a1f      	ldr	r2, [pc, #124]	; (801089c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 8010820:	4b1d      	ldr	r3, [pc, #116]	; (8010898 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8010822:	e7bf      	b.n	80107a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x100>
 8010824:	b32a      	cbz	r2, 8010872 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ce>
 8010826:	9300      	str	r3, [sp, #0]
 8010828:	4a23      	ldr	r2, [pc, #140]	; (80108b8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x214>)
 801082a:	4b22      	ldr	r3, [pc, #136]	; (80108b4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 801082c:	4621      	mov	r1, r4
 801082e:	f002 fab9 	bl	8012da4 <snprintf>
 8010832:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010836:	4284      	cmp	r4, r0
 8010838:	bfa4      	itt	ge
 801083a:	181b      	addge	r3, r3, r0
 801083c:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8010840:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010844:	b17b      	cbz	r3, 8010866 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1c2>
 8010846:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801084a:	9b03      	ldr	r3, [sp, #12]
 801084c:	4413      	add	r3, r2
 801084e:	227d      	movs	r2, #125	; 0x7d
 8010850:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010854:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010858:	9903      	ldr	r1, [sp, #12]
 801085a:	54ca      	strb	r2, [r1, r3]
 801085c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010860:	3301      	adds	r3, #1
 8010862:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010866:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801086a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801086c:	601a      	str	r2, [r3, #0]
 801086e:	b007      	add	sp, #28
 8010870:	bd30      	pop	{r4, r5, pc}
 8010872:	9300      	str	r3, [sp, #0]
 8010874:	4a11      	ldr	r2, [pc, #68]	; (80108bc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x218>)
 8010876:	4b0f      	ldr	r3, [pc, #60]	; (80108b4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x210>)
 8010878:	e7d8      	b.n	801082c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x188>
 801087a:	bf00      	nop
 801087c:	200095c4 	andcs	r9, r0, r4, asr #11
 8010880:	08016c67 	stmdaeq	r1, {r0, r1, r2, r5, r6, sl, fp, sp, lr}
 8010884:	200095c0 	andcs	r9, r0, r0, asr #11
 8010888:	200095d9 	ldrdcs	r9, [r0], -r9	; <UNPREDICTABLE>
 801088c:	08015353 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, ip, lr}
 8010890:	08016c5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, sl, fp, sp, lr}
 8010894:	0801534a 	stmdaeq	r1, {r1, r3, r6, r8, r9, ip, lr}
 8010898:	08016c3c 	stmdaeq	r1, {r2, r3, r4, r5, sl, fp, sp, lr}
 801089c:	08015354 	stmdaeq	r1, {r2, r4, r6, r8, r9, ip, lr}
 80108a0:	08016c17 	stmdaeq	r1, {r0, r1, r2, r4, sl, fp, sp, lr}
 80108a4:	08016c21 	stmdaeq	r1, {r0, r5, sl, fp, sp, lr}
 80108a8:	08016c55 	stmdaeq	r1, {r0, r2, r4, r6, sl, fp, sp, lr}
 80108ac:	08016c2c 	stmdaeq	r1, {r2, r3, r5, sl, fp, sp, lr}
 80108b0:	08015366 	stmdaeq	r1, {r1, r2, r5, r6, r8, r9, ip, lr}
 80108b4:	08016c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, sp, lr}
 80108b8:	0801535b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, ip, lr}
 80108bc:	08015367 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, ip, lr}

080108c0 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 80108c0:	b513      	push	{r0, r1, r4, lr}
 80108c2:	6804      	ldr	r4, [r0, #0]
 80108c4:	b914      	cbnz	r4, 80108cc <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80108c6:	601c      	str	r4, [r3, #0]
 80108c8:	b002      	add	sp, #8
 80108ca:	bd10      	pop	{r4, pc}
 80108cc:	9300      	str	r3, [sp, #0]
 80108ce:	4613      	mov	r3, r2
 80108d0:	460a      	mov	r2, r1
 80108d2:	2100      	movs	r1, #0
 80108d4:	f7ff fee6 	bl	80106a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 80108d8:	e7f6      	b.n	80108c8 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

080108da <NetworkParams::Dump()>:
 80108da:	4770      	bx	lr

080108dc <memcpy.isra.0>:
 80108dc:	3801      	subs	r0, #1
 80108de:	440a      	add	r2, r1
 80108e0:	4291      	cmp	r1, r2
 80108e2:	d100      	bne.n	80108e6 <memcpy.isra.0+0xa>
 80108e4:	4770      	bx	lr
 80108e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108ea:	f800 3f01 	strb.w	r3, [r0, #1]!
 80108ee:	e7f7      	b.n	80108e0 <memcpy.isra.0+0x4>

080108f0 <arp_announce>:
 80108f0:	4803      	ldr	r0, [pc, #12]	; (8010900 <arp_announce+0x10>)
 80108f2:	69c3      	ldr	r3, [r0, #28]
 80108f4:	b113      	cbz	r3, 80108fc <arp_announce+0xc>
 80108f6:	212a      	movs	r1, #42	; 0x2a
 80108f8:	f003 ba06 	b.w	8013d08 <emac_eth_send>
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop
 8010900:	20009624 	andcs	r9, r0, r4, lsr #12

08010904 <arp_handle_request>:
 8010904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010906:	2204      	movs	r2, #4
 8010908:	f100 0126 	add.w	r1, r0, #38	; 0x26
 801090c:	4604      	mov	r4, r0
 801090e:	eb0d 0002 	add.w	r0, sp, r2
 8010912:	f7ff ffe3 	bl	80108dc <memcpy.isra.0>
 8010916:	4b0d      	ldr	r3, [pc, #52]	; (801094c <arp_handle_request+0x48>)
 8010918:	9a01      	ldr	r2, [sp, #4]
 801091a:	69db      	ldr	r3, [r3, #28]
 801091c:	429a      	cmp	r2, r3
 801091e:	d113      	bne.n	8010948 <arp_handle_request+0x44>
 8010920:	2206      	movs	r2, #6
 8010922:	4d0b      	ldr	r5, [pc, #44]	; (8010950 <arp_handle_request+0x4c>)
 8010924:	18a1      	adds	r1, r4, r2
 8010926:	4628      	mov	r0, r5
 8010928:	f7ff ffd8 	bl	80108dc <memcpy.isra.0>
 801092c:	f104 0116 	add.w	r1, r4, #22
 8010930:	f105 0020 	add.w	r0, r5, #32
 8010934:	2206      	movs	r2, #6
 8010936:	f7ff ffd1 	bl	80108dc <memcpy.isra.0>
 801093a:	69e3      	ldr	r3, [r4, #28]
 801093c:	212a      	movs	r1, #42	; 0x2a
 801093e:	4628      	mov	r0, r5
 8010940:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8010944:	f003 f9e0 	bl	8013d08 <emac_eth_send>
 8010948:	b003      	add	sp, #12
 801094a:	bd30      	pop	{r4, r5, pc}
 801094c:	20009624 	andcs	r9, r0, r4, lsr #12
 8010950:	20009650 	andcs	r9, r0, r0, asr r6

08010954 <arp_handle_reply>:
 8010954:	69c1      	ldr	r1, [r0, #28]
 8010956:	3016      	adds	r0, #22
 8010958:	f000 b80a 	b.w	8010970 <arp_cache_update>

0801095c <arp_send_request>:
 801095c:	4b03      	ldr	r3, [pc, #12]	; (801096c <arp_send_request+0x10>)
 801095e:	212a      	movs	r1, #42	; 0x2a
 8010960:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8010964:	4618      	mov	r0, r3
 8010966:	f003 b9cf 	b.w	8013d08 <emac_eth_send>
 801096a:	bf00      	nop
 801096c:	2000967c 	andcs	r9, r0, ip, ror r6

08010970 <arp_cache_update>:
 8010970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010972:	4e11      	ldr	r6, [pc, #68]	; (80109b8 <arp_cache_update+0x48>)
 8010974:	8833      	ldrh	r3, [r6, #0]
 8010976:	2b20      	cmp	r3, #32
 8010978:	d018      	beq.n	80109ac <arp_cache_update+0x3c>
 801097a:	2400      	movs	r4, #0
 801097c:	220c      	movs	r2, #12
 801097e:	4d0f      	ldr	r5, [pc, #60]	; (80109bc <arp_cache_update+0x4c>)
 8010980:	b2a7      	uxth	r7, r4
 8010982:	42bb      	cmp	r3, r7
 8010984:	d80b      	bhi.n	801099e <arp_cache_update+0x2e>
 8010986:	fb02 5203 	mla	r2, r2, r3, r5
 801098a:	1d84      	adds	r4, r0, #6
 801098c:	3203      	adds	r2, #3
 801098e:	42a0      	cmp	r0, r4
 8010990:	d10d      	bne.n	80109ae <arp_cache_update+0x3e>
 8010992:	220c      	movs	r2, #12
 8010994:	435a      	muls	r2, r3
 8010996:	3301      	adds	r3, #1
 8010998:	50a9      	str	r1, [r5, r2]
 801099a:	8033      	strh	r3, [r6, #0]
 801099c:	e006      	b.n	80109ac <arp_cache_update+0x3c>
 801099e:	3401      	adds	r4, #1
 80109a0:	fb02 5704 	mla	r7, r2, r4, r5
 80109a4:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 80109a8:	428f      	cmp	r7, r1
 80109aa:	d1e9      	bne.n	8010980 <arp_cache_update+0x10>
 80109ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ae:	f810 7b01 	ldrb.w	r7, [r0], #1
 80109b2:	f802 7f01 	strb.w	r7, [r2, #1]!
 80109b6:	e7ea      	b.n	801098e <arp_cache_update+0x1e>
 80109b8:	20009828 	andcs	r9, r0, r8, lsr #16
 80109bc:	200096a8 	andcs	r9, r0, r8, lsr #13

080109c0 <arp_cache_lookup>:
 80109c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109c4:	2200      	movs	r2, #0
 80109c6:	4606      	mov	r6, r0
 80109c8:	460c      	mov	r4, r1
 80109ca:	200c      	movs	r0, #12
 80109cc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8010a54 <arp_cache_lookup+0x94>
 80109d0:	fb00 f302 	mul.w	r3, r0, r2
 80109d4:	f853 1008 	ldr.w	r1, [r3, r8]
 80109d8:	42b1      	cmp	r1, r6
 80109da:	d10d      	bne.n	80109f8 <arp_cache_lookup+0x38>
 80109dc:	3304      	adds	r3, #4
 80109de:	4443      	add	r3, r8
 80109e0:	3c01      	subs	r4, #1
 80109e2:	1d9a      	adds	r2, r3, #6
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d102      	bne.n	80109ee <arp_cache_lookup+0x2e>
 80109e8:	4630      	mov	r0, r6
 80109ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109ee:	f813 1b01 	ldrb.w	r1, [r3], #1
 80109f2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80109f6:	e7f5      	b.n	80109e4 <arp_cache_lookup+0x24>
 80109f8:	b111      	cbz	r1, 8010a00 <arp_cache_lookup+0x40>
 80109fa:	3201      	adds	r2, #1
 80109fc:	2a20      	cmp	r2, #32
 80109fe:	d1e7      	bne.n	80109d0 <arp_cache_lookup+0x10>
 8010a00:	2704      	movs	r7, #4
 8010a02:	f8df a054 	ldr.w	sl, [pc, #84]	; 8010a58 <arp_cache_lookup+0x98>
 8010a06:	f8ba 5000 	ldrh.w	r5, [sl]
 8010a0a:	3f01      	subs	r7, #1
 8010a0c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8010a10:	d101      	bne.n	8010a16 <arp_cache_lookup+0x56>
 8010a12:	463e      	mov	r6, r7
 8010a14:	e7e8      	b.n	80109e8 <arp_cache_lookup+0x28>
 8010a16:	4630      	mov	r0, r6
 8010a18:	f7ff ffa0 	bl	801095c <arp_send_request>
 8010a1c:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8010a20:	f1b9 0901 	subs.w	r9, r9, #1
 8010a24:	f8ba 3000 	ldrh.w	r3, [sl]
 8010a28:	d011      	beq.n	8010a4e <arp_cache_lookup+0x8e>
 8010a2a:	429d      	cmp	r5, r3
 8010a2c:	d00c      	beq.n	8010a48 <arp_cache_lookup+0x88>
 8010a2e:	230c      	movs	r3, #12
 8010a30:	fb03 8505 	mla	r5, r3, r5, r8
 8010a34:	3c01      	subs	r4, #1
 8010a36:	1d2b      	adds	r3, r5, #4
 8010a38:	350a      	adds	r5, #10
 8010a3a:	42ab      	cmp	r3, r5
 8010a3c:	d0d4      	beq.n	80109e8 <arp_cache_lookup+0x28>
 8010a3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010a46:	e7f8      	b.n	8010a3a <arp_cache_lookup+0x7a>
 8010a48:	f7f6 fd6a 	bl	8007520 <net_handle>
 8010a4c:	e7e8      	b.n	8010a20 <arp_cache_lookup+0x60>
 8010a4e:	429d      	cmp	r5, r3
 8010a50:	d0db      	beq.n	8010a0a <arp_cache_lookup+0x4a>
 8010a52:	e7ec      	b.n	8010a2e <arp_cache_lookup+0x6e>
 8010a54:	200096a8 	andcs	r9, r0, r8, lsr #13
 8010a58:	20009828 	andcs	r9, r0, r8, lsr #16

08010a5c <_parse_response>:
 8010a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a60:	2400      	movs	r4, #0
 8010a62:	460d      	mov	r5, r1
 8010a64:	46a3      	mov	fp, r4
 8010a66:	4627      	mov	r7, r4
 8010a68:	46a2      	mov	sl, r4
 8010a6a:	46a1      	mov	r9, r4
 8010a6c:	46a0      	mov	r8, r4
 8010a6e:	4e4f      	ldr	r6, [pc, #316]	; (8010bac <_parse_response+0x150>)
 8010a70:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8010a74:	6833      	ldr	r3, [r6, #0]
 8010a76:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8010a7a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8010a7e:	9009      	str	r0, [sp, #36]	; 0x24
 8010a80:	9402      	str	r4, [sp, #8]
 8010a82:	9407      	str	r4, [sp, #28]
 8010a84:	9308      	str	r3, [sp, #32]
 8010a86:	f7f6 fd4b 	bl	8007520 <net_handle>
 8010a8a:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8010a8e:	9300      	str	r3, [sp, #0]
 8010a90:	f44f 7209 	mov.w	r2, #548	; 0x224
 8010a94:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8010a98:	ab0c      	add	r3, sp, #48	; 0x30
 8010a9a:	a90d      	add	r1, sp, #52	; 0x34
 8010a9c:	f7fe fd76 	bl	800f58c <udp_recv>
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	d03e      	beq.n	8010b22 <_parse_response+0xc6>
 8010aa4:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8010aa8:	2b43      	cmp	r3, #67	; 0x43
 8010aaa:	d13a      	bne.n	8010b22 <_parse_response+0xc6>
 8010aac:	aa14      	add	r2, sp, #80	; 0x50
 8010aae:	1e6b      	subs	r3, r5, #1
 8010ab0:	1d69      	adds	r1, r5, #5
 8010ab2:	4299      	cmp	r1, r3
 8010ab4:	d12f      	bne.n	8010b16 <_parse_response+0xba>
 8010ab6:	2100      	movs	r1, #0
 8010ab8:	ab0d      	add	r3, sp, #52	; 0x34
 8010aba:	181d      	adds	r5, r3, r0
 8010abc:	468c      	mov	ip, r1
 8010abe:	460e      	mov	r6, r1
 8010ac0:	4608      	mov	r0, r1
 8010ac2:	ab49      	add	r3, sp, #292	; 0x124
 8010ac4:	42ab      	cmp	r3, r5
 8010ac6:	d337      	bcc.n	8010b38 <_parse_response+0xdc>
 8010ac8:	b141      	cbz	r1, 8010adc <_parse_response+0x80>
 8010aca:	4b39      	ldr	r3, [pc, #228]	; (8010bb0 <_parse_response+0x154>)
 8010acc:	9a07      	ldr	r2, [sp, #28]
 8010ace:	f883 8003 	strb.w	r8, [r3, #3]
 8010ad2:	709a      	strb	r2, [r3, #2]
 8010ad4:	9a06      	ldr	r2, [sp, #24]
 8010ad6:	705a      	strb	r2, [r3, #1]
 8010ad8:	9a05      	ldr	r2, [sp, #20]
 8010ada:	701a      	strb	r2, [r3, #0]
 8010adc:	f1bc 0f00 	cmp.w	ip, #0
 8010ae0:	d007      	beq.n	8010af2 <_parse_response+0x96>
 8010ae2:	4b34      	ldr	r3, [pc, #208]	; (8010bb4 <_parse_response+0x158>)
 8010ae4:	9a04      	ldr	r2, [sp, #16]
 8010ae6:	705c      	strb	r4, [r3, #1]
 8010ae8:	70da      	strb	r2, [r3, #3]
 8010aea:	9a03      	ldr	r2, [sp, #12]
 8010aec:	709a      	strb	r2, [r3, #2]
 8010aee:	9a02      	ldr	r2, [sp, #8]
 8010af0:	701a      	strb	r2, [r3, #0]
 8010af2:	b13e      	cbz	r6, 8010b04 <_parse_response+0xa8>
 8010af4:	4b30      	ldr	r3, [pc, #192]	; (8010bb8 <_parse_response+0x15c>)
 8010af6:	70df      	strb	r7, [r3, #3]
 8010af8:	f883 a002 	strb.w	sl, [r3, #2]
 8010afc:	f883 9001 	strb.w	r9, [r3, #1]
 8010b00:	f883 b000 	strb.w	fp, [r3]
 8010b04:	2802      	cmp	r0, #2
 8010b06:	d102      	bne.n	8010b0e <_parse_response+0xb2>
 8010b08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010b0a:	4b2c      	ldr	r3, [pc, #176]	; (8010bbc <_parse_response+0x160>)
 8010b0c:	601a      	str	r2, [r3, #0]
 8010b0e:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8010b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b16:	f812 cb01 	ldrb.w	ip, [r2], #1
 8010b1a:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010b1e:	45e6      	cmp	lr, ip
 8010b20:	d0c7      	beq.n	8010ab2 <_parse_response+0x56>
 8010b22:	6833      	ldr	r3, [r6, #0]
 8010b24:	9a08      	ldr	r2, [sp, #32]
 8010b26:	1a9b      	subs	r3, r3, r2
 8010b28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010b2c:	d3ab      	bcc.n	8010a86 <_parse_response+0x2a>
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	d1c1      	bne.n	8010ab6 <_parse_response+0x5a>
 8010b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b36:	e7ea      	b.n	8010b0e <_parse_response+0xb2>
 8010b38:	781a      	ldrb	r2, [r3, #0]
 8010b3a:	2a35      	cmp	r2, #53	; 0x35
 8010b3c:	d011      	beq.n	8010b62 <_parse_response+0x106>
 8010b3e:	d808      	bhi.n	8010b52 <_parse_response+0xf6>
 8010b40:	2a01      	cmp	r2, #1
 8010b42:	d011      	beq.n	8010b68 <_parse_response+0x10c>
 8010b44:	2a03      	cmp	r2, #3
 8010b46:	d019      	beq.n	8010b7c <_parse_response+0x120>
 8010b48:	b14a      	cbz	r2, 8010b5e <_parse_response+0x102>
 8010b4a:	1c9a      	adds	r2, r3, #2
 8010b4c:	785b      	ldrb	r3, [r3, #1]
 8010b4e:	4413      	add	r3, r2
 8010b50:	e7b8      	b.n	8010ac4 <_parse_response+0x68>
 8010b52:	2a36      	cmp	r2, #54	; 0x36
 8010b54:	d01f      	beq.n	8010b96 <_parse_response+0x13a>
 8010b56:	2aff      	cmp	r2, #255	; 0xff
 8010b58:	d1f7      	bne.n	8010b4a <_parse_response+0xee>
 8010b5a:	462b      	mov	r3, r5
 8010b5c:	e7b2      	b.n	8010ac4 <_parse_response+0x68>
 8010b5e:	3301      	adds	r3, #1
 8010b60:	e7b0      	b.n	8010ac4 <_parse_response+0x68>
 8010b62:	7898      	ldrb	r0, [r3, #2]
 8010b64:	3303      	adds	r3, #3
 8010b66:	e7ad      	b.n	8010ac4 <_parse_response+0x68>
 8010b68:	f893 b002 	ldrb.w	fp, [r3, #2]
 8010b6c:	f893 9003 	ldrb.w	r9, [r3, #3]
 8010b70:	f893 a004 	ldrb.w	sl, [r3, #4]
 8010b74:	795f      	ldrb	r7, [r3, #5]
 8010b76:	4616      	mov	r6, r2
 8010b78:	3306      	adds	r3, #6
 8010b7a:	e7a3      	b.n	8010ac4 <_parse_response+0x68>
 8010b7c:	789a      	ldrb	r2, [r3, #2]
 8010b7e:	78dc      	ldrb	r4, [r3, #3]
 8010b80:	9202      	str	r2, [sp, #8]
 8010b82:	791a      	ldrb	r2, [r3, #4]
 8010b84:	f04f 0c01 	mov.w	ip, #1
 8010b88:	9203      	str	r2, [sp, #12]
 8010b8a:	795a      	ldrb	r2, [r3, #5]
 8010b8c:	9204      	str	r2, [sp, #16]
 8010b8e:	785a      	ldrb	r2, [r3, #1]
 8010b90:	4413      	add	r3, r2
 8010b92:	3302      	adds	r3, #2
 8010b94:	e796      	b.n	8010ac4 <_parse_response+0x68>
 8010b96:	789a      	ldrb	r2, [r3, #2]
 8010b98:	f893 8005 	ldrb.w	r8, [r3, #5]
 8010b9c:	9205      	str	r2, [sp, #20]
 8010b9e:	78da      	ldrb	r2, [r3, #3]
 8010ba0:	2101      	movs	r1, #1
 8010ba2:	9206      	str	r2, [sp, #24]
 8010ba4:	791a      	ldrb	r2, [r3, #4]
 8010ba6:	3306      	adds	r3, #6
 8010ba8:	9207      	str	r2, [sp, #28]
 8010baa:	e78b      	b.n	8010ac4 <_parse_response+0x68>
 8010bac:	20009d04 	andcs	r9, r0, r4, lsl #26
 8010bb0:	20009a5c 	andcs	r9, r0, ip, asr sl
 8010bb4:	2000982c 	andcs	r9, r0, ip, lsr #16
 8010bb8:	20009834 	andcs	r9, r0, r4, lsr r8
 8010bbc:	20009830 	andcs	r9, r0, r0, lsr r8

08010bc0 <memcpy.isra.0>:
 8010bc0:	3801      	subs	r0, #1
 8010bc2:	440a      	add	r2, r1
 8010bc4:	4291      	cmp	r1, r2
 8010bc6:	d100      	bne.n	8010bca <memcpy.isra.0+0xa>
 8010bc8:	4770      	bx	lr
 8010bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bce:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010bd2:	e7f7      	b.n	8010bc4 <memcpy.isra.0+0x4>

08010bd4 <dhcp_client>:
 8010bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd8:	b087      	sub	sp, #28
 8010bda:	9203      	str	r2, [sp, #12]
 8010bdc:	4a77      	ldr	r2, [pc, #476]	; (8010dbc <dhcp_client+0x1e8>)
 8010bde:	460f      	mov	r7, r1
 8010be0:	4605      	mov	r5, r0
 8010be2:	f44f 7309 	mov.w	r3, #548	; 0x224
 8010be6:	4614      	mov	r4, r2
 8010be8:	2100      	movs	r1, #0
 8010bea:	3b01      	subs	r3, #1
 8010bec:	f802 1b01 	strb.w	r1, [r2], #1
 8010bf0:	d1fb      	bne.n	8010bea <dhcp_client+0x16>
 8010bf2:	f240 1301 	movw	r3, #257	; 0x101
 8010bf6:	2206      	movs	r2, #6
 8010bf8:	4629      	mov	r1, r5
 8010bfa:	4871      	ldr	r0, [pc, #452]	; (8010dc0 <dhcp_client+0x1ec>)
 8010bfc:	8023      	strh	r3, [r4, #0]
 8010bfe:	70a2      	strb	r2, [r4, #2]
 8010c00:	f7ff ffde 	bl	8010bc0 <memcpy.isra.0>
 8010c04:	4b6f      	ldr	r3, [pc, #444]	; (8010dc4 <dhcp_client+0x1f0>)
 8010c06:	2044      	movs	r0, #68	; 0x44
 8010c08:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8010c0c:	f240 1335 	movw	r3, #309	; 0x135
 8010c10:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8010c14:	f7fe fc80 	bl	800f518 <udp_bind>
 8010c18:	1e06      	subs	r6, r0, #0
 8010c1a:	f2c0 80c9 	blt.w	8010db0 <dhcp_client+0x1dc>
 8010c1e:	f04f 0915 	mov.w	r9, #21
 8010c22:	f8df a198 	ldr.w	sl, [pc, #408]	; 8010dbc <dhcp_client+0x1e8>
 8010c26:	f1b9 0901 	subs.w	r9, r9, #1
 8010c2a:	d11f      	bne.n	8010c6c <dhcp_client+0x98>
 8010c2c:	464c      	mov	r4, r9
 8010c2e:	2044      	movs	r0, #68	; 0x44
 8010c30:	f7fe fc8c 	bl	800f54c <udp_unbind>
 8010c34:	2c00      	cmp	r4, #0
 8010c36:	f000 80be 	beq.w	8010db6 <dhcp_client+0x1e2>
 8010c3a:	2204      	movs	r2, #4
 8010c3c:	4962      	ldr	r1, [pc, #392]	; (8010dc8 <dhcp_client+0x1f4>)
 8010c3e:	a805      	add	r0, sp, #20
 8010c40:	f7ff ffbe 	bl	8010bc0 <memcpy.isra.0>
 8010c44:	9b05      	ldr	r3, [sp, #20]
 8010c46:	2204      	movs	r2, #4
 8010c48:	4960      	ldr	r1, [pc, #384]	; (8010dcc <dhcp_client+0x1f8>)
 8010c4a:	603b      	str	r3, [r7, #0]
 8010c4c:	a805      	add	r0, sp, #20
 8010c4e:	f7ff ffb7 	bl	8010bc0 <memcpy.isra.0>
 8010c52:	9b05      	ldr	r3, [sp, #20]
 8010c54:	a805      	add	r0, sp, #20
 8010c56:	60bb      	str	r3, [r7, #8]
 8010c58:	2204      	movs	r2, #4
 8010c5a:	495d      	ldr	r1, [pc, #372]	; (8010dd0 <dhcp_client+0x1fc>)
 8010c5c:	f7ff ffb0 	bl	8010bc0 <memcpy.isra.0>
 8010c60:	2000      	movs	r0, #0
 8010c62:	9b05      	ldr	r3, [sp, #20]
 8010c64:	607b      	str	r3, [r7, #4]
 8010c66:	b007      	add	sp, #28
 8010c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c6c:	f643 5301 	movw	r3, #15617	; 0x3d01
 8010c70:	f240 1807 	movw	r8, #263	; 0x107
 8010c74:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8010c78:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8010c7c:	782b      	ldrb	r3, [r5, #0]
 8010c7e:	4a55      	ldr	r2, [pc, #340]	; (8010dd4 <dhcp_client+0x200>)
 8010c80:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8010c84:	786b      	ldrb	r3, [r5, #1]
 8010c86:	fa5f fb86 	uxtb.w	fp, r6
 8010c8a:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8010c8e:	78ab      	ldrb	r3, [r5, #2]
 8010c90:	4651      	mov	r1, sl
 8010c92:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8010c96:	78eb      	ldrb	r3, [r5, #3]
 8010c98:	4658      	mov	r0, fp
 8010c9a:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8010c9e:	792b      	ldrb	r3, [r5, #4]
 8010ca0:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8010ca4:	796b      	ldrb	r3, [r5, #5]
 8010ca6:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8010caa:	4b4b      	ldr	r3, [pc, #300]	; (8010dd8 <dhcp_client+0x204>)
 8010cac:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8010cb0:	23ff      	movs	r3, #255	; 0xff
 8010cb2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8010cb6:	2343      	movs	r3, #67	; 0x43
 8010cb8:	f240 1205 	movw	r2, #261	; 0x105
 8010cbc:	9300      	str	r3, [sp, #0]
 8010cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cc2:	f7fe fcbf 	bl	800f644 <udp_send>
 8010cc6:	4629      	mov	r1, r5
 8010cc8:	4630      	mov	r0, r6
 8010cca:	f7ff fec7 	bl	8010a5c <_parse_response>
 8010cce:	2802      	cmp	r0, #2
 8010cd0:	d1a9      	bne.n	8010c26 <dhcp_client+0x52>
 8010cd2:	f643 5303 	movw	r3, #15619	; 0x3d03
 8010cd6:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8010cda:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8010cde:	782b      	ldrb	r3, [r5, #0]
 8010ce0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8010ddc <dhcp_client+0x208>
 8010ce4:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8010ce8:	786b      	ldrb	r3, [r5, #1]
 8010cea:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8010cee:	78ab      	ldrb	r3, [r5, #2]
 8010cf0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8010cf4:	78eb      	ldrb	r3, [r5, #3]
 8010cf6:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8010cfa:	792b      	ldrb	r3, [r5, #4]
 8010cfc:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8010d00:	796b      	ldrb	r3, [r5, #5]
 8010d02:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8010d06:	f240 4332 	movw	r3, #1074	; 0x432
 8010d0a:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8010d0e:	4b2e      	ldr	r3, [pc, #184]	; (8010dc8 <dhcp_client+0x1f4>)
 8010d10:	881a      	ldrh	r2, [r3, #0]
 8010d12:	885b      	ldrh	r3, [r3, #2]
 8010d14:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8010d18:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8010d1c:	f240 4336 	movw	r3, #1078	; 0x436
 8010d20:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8010d24:	4b2e      	ldr	r3, [pc, #184]	; (8010de0 <dhcp_client+0x20c>)
 8010d26:	221e      	movs	r2, #30
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8010d2e:	230c      	movs	r3, #12
 8010d30:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8010d34:	9b03      	ldr	r3, [sp, #12]
 8010d36:	1e58      	subs	r0, r3, #1
 8010d38:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010d3c:	f1a2 0e1e 	sub.w	lr, r2, #30
 8010d40:	1c51      	adds	r1, r2, #1
 8010d42:	bb8b      	cbnz	r3, 8010da8 <dhcp_client+0x1d4>
 8010d44:	2037      	movs	r0, #55	; 0x37
 8010d46:	18a3      	adds	r3, r4, r2
 8010d48:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8010d4c:	2006      	movs	r0, #6
 8010d4e:	4421      	add	r1, r4
 8010d50:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8010d54:	2103      	movs	r1, #3
 8010d56:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8010d5a:	210f      	movs	r1, #15
 8010d5c:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8010d60:	213a      	movs	r1, #58	; 0x3a
 8010d62:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8010d66:	213b      	movs	r1, #59	; 0x3b
 8010d68:	f04f 0801 	mov.w	r8, #1
 8010d6c:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8010d70:	21ff      	movs	r1, #255	; 0xff
 8010d72:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8010d76:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8010d7a:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8010d7e:	2343      	movs	r3, #67	; 0x43
 8010d80:	32f5      	adds	r2, #245	; 0xf5
 8010d82:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8010d86:	4651      	mov	r1, sl
 8010d88:	9300      	str	r3, [sp, #0]
 8010d8a:	b292      	uxth	r2, r2
 8010d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d90:	4658      	mov	r0, fp
 8010d92:	f7fe fc57 	bl	800f644 <udp_send>
 8010d96:	4629      	mov	r1, r5
 8010d98:	4630      	mov	r0, r6
 8010d9a:	f7ff fe5f 	bl	8010a5c <_parse_response>
 8010d9e:	2805      	cmp	r0, #5
 8010da0:	f47f af41 	bne.w	8010c26 <dhcp_client+0x52>
 8010da4:	4644      	mov	r4, r8
 8010da6:	e742      	b.n	8010c2e <dhcp_client+0x5a>
 8010da8:	460a      	mov	r2, r1
 8010daa:	f80c 3b01 	strb.w	r3, [ip], #1
 8010dae:	e7c3      	b.n	8010d38 <dhcp_client+0x164>
 8010db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010db4:	e757      	b.n	8010c66 <dhcp_client+0x92>
 8010db6:	f06f 0001 	mvn.w	r0, #1
 8010dba:	e754      	b.n	8010c66 <dhcp_client+0x92>
 8010dbc:	20009838 	andcs	r9, r0, r8, lsr r8
 8010dc0:	20009854 	andcs	r9, r0, r4, asr r8
 8010dc4:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8010dc8:	20009830 	andcs	r9, r0, r0, lsr r8
 8010dcc:	2000982c 	andcs	r9, r0, ip, lsr #16
 8010dd0:	20009834 	andcs	r9, r0, r4, lsr r8
 8010dd4:	03010637 	movweq	r0, #5687	; 0x1637
 8010dd8:	3b3a0f06 	blcc	8e949f8 <__exidx_end+0xe7d680>
 8010ddc:	20009942 	andcs	r9, r0, r2, asr #18
 8010de0:	20009a5c 	andcs	r9, r0, ip, asr sl

08010de4 <dhcp_client_release>:
 8010de4:	b507      	push	{r0, r1, r2, lr}
 8010de6:	2044      	movs	r0, #68	; 0x44
 8010de8:	f7fe fb96 	bl	800f518 <udp_bind>
 8010dec:	f243 6307 	movw	r3, #13831	; 0x3607
 8010df0:	4911      	ldr	r1, [pc, #68]	; (8010e38 <dhcp_client_release+0x54>)
 8010df2:	b2c0      	uxtb	r0, r0
 8010df4:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8010df8:	2304      	movs	r3, #4
 8010dfa:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8010dfe:	4b0f      	ldr	r3, [pc, #60]	; (8010e3c <dhcp_client_release+0x58>)
 8010e00:	781a      	ldrb	r2, [r3, #0]
 8010e02:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8010e06:	785a      	ldrb	r2, [r3, #1]
 8010e08:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8010e0c:	789a      	ldrb	r2, [r3, #2]
 8010e0e:	78db      	ldrb	r3, [r3, #3]
 8010e10:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8010e14:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8010e18:	23ff      	movs	r3, #255	; 0xff
 8010e1a:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 8010e1e:	2343      	movs	r3, #67	; 0x43
 8010e20:	22fa      	movs	r2, #250	; 0xfa
 8010e22:	9300      	str	r3, [sp, #0]
 8010e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e28:	f7fe fc0c 	bl	800f644 <udp_send>
 8010e2c:	2044      	movs	r0, #68	; 0x44
 8010e2e:	b003      	add	sp, #12
 8010e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e34:	f7fe bb8a 	b.w	800f54c <udp_unbind>
 8010e38:	20009838 	andcs	r9, r0, r8, lsr r8
 8010e3c:	20009a5c 	andcs	r9, r0, ip, asr sl

08010e40 <memcpy.isra.0>:
 8010e40:	3801      	subs	r0, #1
 8010e42:	440a      	add	r2, r1
 8010e44:	4291      	cmp	r1, r2
 8010e46:	d100      	bne.n	8010e4a <memcpy.isra.0+0xa>
 8010e48:	4770      	bx	lr
 8010e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e4e:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010e52:	e7f7      	b.n	8010e44 <memcpy.isra.0+0x4>

08010e54 <_send_report>:
 8010e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e56:	491c      	ldr	r1, [pc, #112]	; (8010ec8 <_send_report+0x74>)
 8010e58:	4c1c      	ldr	r4, [pc, #112]	; (8010ecc <_send_report+0x78>)
 8010e5a:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8010e5e:	9001      	str	r0, [sp, #4]
 8010e60:	70cb      	strb	r3, [r1, #3]
 8010e62:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010e66:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8010e6a:	710b      	strb	r3, [r1, #4]
 8010e6c:	7148      	strb	r0, [r1, #5]
 8010e6e:	2206      	movs	r2, #6
 8010e70:	4620      	mov	r0, r4
 8010e72:	f7ff ffe5 	bl	8010e40 <memcpy.isra.0>
 8010e76:	2204      	movs	r2, #4
 8010e78:	2700      	movs	r7, #0
 8010e7a:	4d15      	ldr	r5, [pc, #84]	; (8010ed0 <_send_report+0x7c>)
 8010e7c:	eb0d 0102 	add.w	r1, sp, r2
 8010e80:	882b      	ldrh	r3, [r5, #0]
 8010e82:	f104 001e 	add.w	r0, r4, #30
 8010e86:	f104 060e 	add.w	r6, r4, #14
 8010e8a:	8263      	strh	r3, [r4, #18]
 8010e8c:	f7ff ffd8 	bl	8010e40 <memcpy.isra.0>
 8010e90:	2118      	movs	r1, #24
 8010e92:	4630      	mov	r0, r6
 8010e94:	8327      	strh	r7, [r4, #24]
 8010e96:	f000 f8c6 	bl	8011026 <net_chksum>
 8010e9a:	2204      	movs	r2, #4
 8010e9c:	8320      	strh	r0, [r4, #24]
 8010e9e:	eb0d 0102 	add.w	r1, sp, r2
 8010ea2:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8010ea6:	f7ff ffcb 	bl	8010e40 <memcpy.isra.0>
 8010eaa:	2120      	movs	r1, #32
 8010eac:	4630      	mov	r0, r6
 8010eae:	8527      	strh	r7, [r4, #40]	; 0x28
 8010eb0:	f000 f8b9 	bl	8011026 <net_chksum>
 8010eb4:	212e      	movs	r1, #46	; 0x2e
 8010eb6:	8520      	strh	r0, [r4, #40]	; 0x28
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f002 ff25 	bl	8013d08 <emac_eth_send>
 8010ebe:	882b      	ldrh	r3, [r5, #0]
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	802b      	strh	r3, [r5, #0]
 8010ec4:	b003      	add	sp, #12
 8010ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ec8:	20009bb8 			; <UNDEFINED> instruction: 0x20009bb8
 8010ecc:	20009bc0 	andcs	r9, r0, r0, asr #23
 8010ed0:	20009b80 	andcs	r9, r0, r0, lsl #23

08010ed4 <igmp_set_ip>:
 8010ed4:	b507      	push	{r0, r1, r2, lr}
 8010ed6:	2204      	movs	r2, #4
 8010ed8:	6803      	ldr	r3, [r0, #0]
 8010eda:	eb0d 0102 	add.w	r1, sp, r2
 8010ede:	4806      	ldr	r0, [pc, #24]	; (8010ef8 <igmp_set_ip+0x24>)
 8010ee0:	9301      	str	r3, [sp, #4]
 8010ee2:	f7ff ffad 	bl	8010e40 <memcpy.isra.0>
 8010ee6:	2204      	movs	r2, #4
 8010ee8:	4804      	ldr	r0, [pc, #16]	; (8010efc <igmp_set_ip+0x28>)
 8010eea:	eb0d 0102 	add.w	r1, sp, r2
 8010eee:	f7ff ffa7 	bl	8010e40 <memcpy.isra.0>
 8010ef2:	b003      	add	sp, #12
 8010ef4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ef8:	20009bda 	ldrdcs	r9, [r0], -sl
 8010efc:	20009ba2 	andcs	r9, r0, r2, lsr #23

08010f00 <igmp_timer>:
 8010f00:	b570      	push	{r4, r5, r6, lr}
 8010f02:	2500      	movs	r5, #0
 8010f04:	2602      	movs	r6, #2
 8010f06:	4c0a      	ldr	r4, [pc, #40]	; (8010f30 <igmp_timer+0x30>)
 8010f08:	7963      	ldrb	r3, [r4, #5]
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d109      	bne.n	8010f22 <igmp_timer+0x22>
 8010f0e:	7923      	ldrb	r3, [r4, #4]
 8010f10:	b13b      	cbz	r3, 8010f22 <igmp_timer+0x22>
 8010f12:	3b01      	subs	r3, #1
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	7123      	strb	r3, [r4, #4]
 8010f18:	b91b      	cbnz	r3, 8010f22 <igmp_timer+0x22>
 8010f1a:	6820      	ldr	r0, [r4, #0]
 8010f1c:	f7ff ff9a 	bl	8010e54 <_send_report>
 8010f20:	7166      	strb	r6, [r4, #5]
 8010f22:	3501      	adds	r5, #1
 8010f24:	2d24      	cmp	r5, #36	; 0x24
 8010f26:	f104 0408 	add.w	r4, r4, #8
 8010f2a:	d1ed      	bne.n	8010f08 <igmp_timer+0x8>
 8010f2c:	bd70      	pop	{r4, r5, r6, pc}
 8010f2e:	bf00      	nop
 8010f30:	20009a60 	andcs	r9, r0, r0, ror #20

08010f34 <igmp_join>:
 8010f34:	b538      	push	{r3, r4, r5, lr}
 8010f36:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8010f3a:	2be0      	cmp	r3, #224	; 0xe0
 8010f3c:	d11b      	bne.n	8010f76 <igmp_join+0x42>
 8010f3e:	4911      	ldr	r1, [pc, #68]	; (8010f84 <igmp_join+0x50>)
 8010f40:	680c      	ldr	r4, [r1, #0]
 8010f42:	2c24      	cmp	r4, #36	; 0x24
 8010f44:	d01a      	beq.n	8010f7c <igmp_join+0x48>
 8010f46:	2300      	movs	r3, #0
 8010f48:	4a0f      	ldr	r2, [pc, #60]	; (8010f88 <igmp_join+0x54>)
 8010f4a:	429c      	cmp	r4, r3
 8010f4c:	dc0d      	bgt.n	8010f6a <igmp_join+0x36>
 8010f4e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8010f52:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 8010f56:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010f5a:	8093      	strh	r3, [r2, #4]
 8010f5c:	1c63      	adds	r3, r4, #1
 8010f5e:	600b      	str	r3, [r1, #0]
 8010f60:	f7ff ff78 	bl	8010e54 <_send_report>
 8010f64:	4623      	mov	r3, r4
 8010f66:	4618      	mov	r0, r3
 8010f68:	bd38      	pop	{r3, r4, r5, pc}
 8010f6a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8010f6e:	4285      	cmp	r5, r0
 8010f70:	d0f9      	beq.n	8010f66 <igmp_join+0x32>
 8010f72:	3301      	adds	r3, #1
 8010f74:	e7e9      	b.n	8010f4a <igmp_join+0x16>
 8010f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f7a:	e7f4      	b.n	8010f66 <igmp_join+0x32>
 8010f7c:	f06f 0301 	mvn.w	r3, #1
 8010f80:	e7f1      	b.n	8010f66 <igmp_join+0x32>
 8010f82:	bf00      	nop
 8010f84:	20009b84 	andcs	r9, r0, r4, lsl #23
 8010f88:	20009a60 	andcs	r9, r0, r0, ror #20

08010f8c <igmp_leave>:
 8010f8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010f90:	2600      	movs	r6, #0
 8010f92:	4f1c      	ldr	r7, [pc, #112]	; (8011004 <igmp_leave+0x78>)
 8010f94:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8010f98:	4283      	cmp	r3, r0
 8010f9a:	d007      	beq.n	8010fac <igmp_leave+0x20>
 8010f9c:	3601      	adds	r6, #1
 8010f9e:	2e24      	cmp	r6, #36	; 0x24
 8010fa0:	d1f8      	bne.n	8010f94 <igmp_leave+0x8>
 8010fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010fa6:	b002      	add	sp, #8
 8010fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fac:	2400      	movs	r4, #0
 8010fae:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8011008 <igmp_leave+0x7c>
 8010fb2:	4d16      	ldr	r5, [pc, #88]	; (801100c <igmp_leave+0x80>)
 8010fb4:	f8b8 3000 	ldrh.w	r3, [r8]
 8010fb8:	2118      	movs	r1, #24
 8010fba:	9001      	str	r0, [sp, #4]
 8010fbc:	4814      	ldr	r0, [pc, #80]	; (8011010 <igmp_leave+0x84>)
 8010fbe:	826b      	strh	r3, [r5, #18]
 8010fc0:	832c      	strh	r4, [r5, #24]
 8010fc2:	f000 f830 	bl	8011026 <net_chksum>
 8010fc6:	2204      	movs	r2, #4
 8010fc8:	8328      	strh	r0, [r5, #24]
 8010fca:	eb0d 0102 	add.w	r1, sp, r2
 8010fce:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8010fd2:	f7ff ff35 	bl	8010e40 <memcpy.isra.0>
 8010fd6:	2120      	movs	r1, #32
 8010fd8:	f105 000e 	add.w	r0, r5, #14
 8010fdc:	852c      	strh	r4, [r5, #40]	; 0x28
 8010fde:	f000 f822 	bl	8011026 <net_chksum>
 8010fe2:	212e      	movs	r1, #46	; 0x2e
 8010fe4:	8528      	strh	r0, [r5, #40]	; 0x28
 8010fe6:	4628      	mov	r0, r5
 8010fe8:	f002 fe8e 	bl	8013d08 <emac_eth_send>
 8010fec:	f8b8 3000 	ldrh.w	r3, [r8]
 8010ff0:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f8a8 3000 	strh.w	r3, [r8]
 8011000:	80bc      	strh	r4, [r7, #4]
 8011002:	e7d0      	b.n	8010fa6 <igmp_leave+0x1a>
 8011004:	20009a60 	andcs	r9, r0, r0, ror #20
 8011008:	20009b80 	andcs	r9, r0, r0, lsl #23
 801100c:	20009b88 	andcs	r9, r0, r8, lsl #23
 8011010:	20009bce 	andcs	r9, r0, lr, asr #23

08011014 <ip_set_ip>:
 8011014:	b510      	push	{r4, lr}
 8011016:	4604      	mov	r4, r0
 8011018:	f7fe fa5e 	bl	800f4d8 <udp_set_ip>
 801101c:	4620      	mov	r0, r4
 801101e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011022:	f7ff bf57 	b.w	8010ed4 <igmp_set_ip>

08011026 <net_chksum>:
 8011026:	2300      	movs	r3, #0
 8011028:	f021 0201 	bic.w	r2, r1, #1
 801102c:	b530      	push	{r4, r5, lr}
 801102e:	1884      	adds	r4, r0, r2
 8011030:	42a0      	cmp	r0, r4
 8011032:	d10b      	bne.n	801104c <net_chksum+0x26>
 8011034:	4291      	cmp	r1, r2
 8011036:	d004      	beq.n	8011042 <net_chksum+0x1c>
 8011038:	7802      	ldrb	r2, [r0, #0]
 801103a:	0212      	lsls	r2, r2, #8
 801103c:	ba52      	rev16	r2, r2
 801103e:	b292      	uxth	r2, r2
 8011040:	4413      	add	r3, r2
 8011042:	0c1a      	lsrs	r2, r3, #16
 8011044:	d106      	bne.n	8011054 <net_chksum+0x2e>
 8011046:	43d8      	mvns	r0, r3
 8011048:	b280      	uxth	r0, r0
 801104a:	bd30      	pop	{r4, r5, pc}
 801104c:	f830 5b02 	ldrh.w	r5, [r0], #2
 8011050:	442b      	add	r3, r5
 8011052:	e7ed      	b.n	8011030 <net_chksum+0xa>
 8011054:	b29b      	uxth	r3, r3
 8011056:	e7f3      	b.n	8011040 <net_chksum+0x1a>

08011058 <memcpy.isra.0>:
 8011058:	3801      	subs	r0, #1
 801105a:	440a      	add	r2, r1
 801105c:	4291      	cmp	r1, r2
 801105e:	d100      	bne.n	8011062 <memcpy.isra.0+0xa>
 8011060:	4770      	bx	lr
 8011062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011066:	f800 3f01 	strb.w	r3, [r0, #1]!
 801106a:	e7f7      	b.n	801105c <memcpy.isra.0+0x4>

0801106c <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 801106c:	b430      	push	{r4, r5}
 801106e:	b168      	cbz	r0, 801108c <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8011070:	2300      	movs	r3, #0
 8011072:	7905      	ldrb	r5, [r0, #4]
 8011074:	5cd4      	ldrb	r4, [r2, r3]
 8011076:	b11c      	cbz	r4, 8011080 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8011078:	1c5c      	adds	r4, r3, #1
 801107a:	429d      	cmp	r5, r3
 801107c:	4623      	mov	r3, r4
 801107e:	dcf9      	bgt.n	8011074 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8011080:	6804      	ldr	r4, [r0, #0]
 8011082:	b2db      	uxtb	r3, r3
 8011084:	69e4      	ldr	r4, [r4, #28]
 8011086:	46a4      	mov	ip, r4
 8011088:	bc30      	pop	{r4, r5}
 801108a:	4760      	bx	ip
 801108c:	bc30      	pop	{r4, r5}
 801108e:	4770      	bx	lr

08011090 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8011090:	b110      	cbz	r0, 8011098 <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8011092:	6803      	ldr	r3, [r0, #0]
 8011094:	691b      	ldr	r3, [r3, #16]
 8011096:	4718      	bx	r3
 8011098:	4770      	bx	lr

0801109a <Display::Printf(unsigned char, char const*, ...)>:
 801109a:	b40c      	push	{r2, r3}
 801109c:	b570      	push	{r4, r5, r6, lr}
 801109e:	6984      	ldr	r4, [r0, #24]
 80110a0:	4605      	mov	r5, r0
 80110a2:	460e      	mov	r6, r1
 80110a4:	b08a      	sub	sp, #40	; 0x28
 80110a6:	b174      	cbz	r4, 80110c6 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 80110a8:	ab0f      	add	r3, sp, #60	; 0x3c
 80110aa:	2120      	movs	r1, #32
 80110ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80110ae:	a802      	add	r0, sp, #8
 80110b0:	9301      	str	r3, [sp, #4]
 80110b2:	f001 fe8f 	bl	8012dd4 <vsnprintf>
 80110b6:	4604      	mov	r4, r0
 80110b8:	69a8      	ldr	r0, [r5, #24]
 80110ba:	4631      	mov	r1, r6
 80110bc:	6803      	ldr	r3, [r0, #0]
 80110be:	aa02      	add	r2, sp, #8
 80110c0:	69dd      	ldr	r5, [r3, #28]
 80110c2:	b2a3      	uxth	r3, r4
 80110c4:	47a8      	blx	r5
 80110c6:	4620      	mov	r0, r4
 80110c8:	b00a      	add	sp, #40	; 0x28
 80110ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110ce:	b002      	add	sp, #8
 80110d0:	4770      	bx	lr

080110d2 <Display::Status(Display7SegmentMessage)>:
 80110d2:	7c43      	ldrb	r3, [r0, #17]
 80110d4:	b513      	push	{r0, r1, r4, lr}
 80110d6:	4604      	mov	r4, r0
 80110d8:	b19b      	cbz	r3, 8011102 <Display::Status(Display7SegmentMessage)+0x30>
 80110da:	43c9      	mvns	r1, r1
 80110dc:	2312      	movs	r3, #18
 80110de:	7a00      	ldrb	r0, [r0, #8]
 80110e0:	f88d 3004 	strb.w	r3, [sp, #4]
 80110e4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80110e8:	f88d 1006 	strb.w	r1, [sp, #6]
 80110ec:	f88d 3005 	strb.w	r3, [sp, #5]
 80110f0:	f002 fea2 	bl	8013e38 <gd32_i2c_set_address(unsigned char)>
 80110f4:	68e0      	ldr	r0, [r4, #12]
 80110f6:	f002 fe97 	bl	8013e28 <gd32_i2c_set_baudrate(unsigned int)>
 80110fa:	2103      	movs	r1, #3
 80110fc:	a801      	add	r0, sp, #4
 80110fe:	f002 fea1 	bl	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 8011102:	b002      	add	sp, #8
 8011104:	bd10      	pop	{r4, pc}
	...

08011108 <DisplayUdf::DisplayUdf()>:
 8011108:	b510      	push	{r4, lr}
 801110a:	4604      	mov	r4, r0
 801110c:	f000 ff70 	bl	8011ff0 <Display::Display()>
 8011110:	2202      	movs	r2, #2
 8011112:	2300      	movs	r3, #0
 8011114:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8011118:	4b05      	ldr	r3, [pc, #20]	; (8011130 <DisplayUdf::DisplayUdf()+0x28>)
 801111a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801111e:	601c      	str	r4, [r3, #0]
 8011120:	2301      	movs	r3, #1
 8011122:	f802 3b01 	strb.w	r3, [r2], #1
 8011126:	3301      	adds	r3, #1
 8011128:	2b15      	cmp	r3, #21
 801112a:	d1fa      	bne.n	8011122 <DisplayUdf::DisplayUdf()+0x1a>
 801112c:	4620      	mov	r0, r4
 801112e:	bd10      	pop	{r4, pc}
 8011130:	20009bf0 	strdcs	r9, [r0], -r0

08011134 <DisplayUdf::SetTitle(char const*, ...)>:
 8011134:	b40e      	push	{r1, r2, r3}
 8011136:	b517      	push	{r0, r1, r2, r4, lr}
 8011138:	ab05      	add	r3, sp, #20
 801113a:	f853 2b04 	ldr.w	r2, [r3], #4
 801113e:	4604      	mov	r4, r0
 8011140:	211f      	movs	r1, #31
 8011142:	301c      	adds	r0, #28
 8011144:	9301      	str	r3, [sp, #4]
 8011146:	f001 fe45 	bl	8012dd4 <vsnprintf>
 801114a:	2300      	movs	r3, #0
 801114c:	4404      	add	r4, r0
 801114e:	7723      	strb	r3, [r4, #28]
 8011150:	b003      	add	sp, #12
 8011152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011156:	b003      	add	sp, #12
 8011158:	4770      	bx	lr
	...

0801115c <DisplayUdf::ShowEmacStart()>:
 801115c:	b510      	push	{r4, lr}
 801115e:	4604      	mov	r4, r0
 8011160:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8011164:	6980      	ldr	r0, [r0, #24]
 8011166:	f7ff ff93 	bl	8011090 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801116a:	4620      	mov	r0, r4
 801116c:	4a02      	ldr	r2, [pc, #8]	; (8011178 <DisplayUdf::ShowEmacStart()+0x1c>)
 801116e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011172:	f7ff ff92 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 8011176:	bd10      	pop	{r4, pc}
 8011178:	08016c73 	stmdaeq	r1, {r0, r1, r4, r5, r6, sl, fp, sp, lr}

0801117c <DisplayUdf::ShowIpAddress()>:
 801117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011180:	4604      	mov	r4, r0
 8011182:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8011186:	b086      	sub	sp, #24
 8011188:	6980      	ldr	r0, [r0, #24]
 801118a:	f7ff ff81 	bl	8011090 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801118e:	4b13      	ldr	r3, [pc, #76]	; (80111dc <DisplayUdf::ShowIpAddress()+0x60>)
 8011190:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 8011194:	681d      	ldr	r5, [r3, #0]
 8011196:	69a8      	ldr	r0, [r5, #24]
 8011198:	692e      	ldr	r6, [r5, #16]
 801119a:	f003 fdc5 	bl	8014d28 <__popcountsi2>
 801119e:	78eb      	ldrb	r3, [r5, #3]
 80111a0:	fa5f f886 	uxtb.w	r8, r6
 80111a4:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80111a8:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 80111ac:	0e36      	lsrs	r6, r6, #24
 80111ae:	b99b      	cbnz	r3, 80111d8 <DisplayUdf::ShowIpAddress()+0x5c>
 80111b0:	786b      	ldrb	r3, [r5, #1]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	bf14      	ite	ne
 80111b6:	2244      	movne	r2, #68	; 0x44
 80111b8:	2253      	moveq	r2, #83	; 0x53
 80111ba:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80111be:	4643      	mov	r3, r8
 80111c0:	4639      	mov	r1, r7
 80111c2:	4620      	mov	r0, r4
 80111c4:	e9cd a601 	strd	sl, r6, [sp, #4]
 80111c8:	4a05      	ldr	r2, [pc, #20]	; (80111e0 <DisplayUdf::ShowIpAddress()+0x64>)
 80111ca:	f8cd 9000 	str.w	r9, [sp]
 80111ce:	f7ff ff64 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 80111d2:	b006      	add	sp, #24
 80111d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111d8:	225a      	movs	r2, #90	; 0x5a
 80111da:	e7ee      	b.n	80111ba <DisplayUdf::ShowIpAddress()+0x3e>
 80111dc:	200095c0 	andcs	r9, r0, r0, asr #11
 80111e0:	08016c82 	stmdaeq	r1, {r1, r7, sl, fp, sp, lr}

080111e4 <DisplayUdf::ShowNetmask()>:
 80111e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111e6:	4604      	mov	r4, r0
 80111e8:	4b0b      	ldr	r3, [pc, #44]	; (8011218 <DisplayUdf::ShowNetmask()+0x34>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	699b      	ldr	r3, [r3, #24]
 80111ee:	0e1a      	lsrs	r2, r3, #24
 80111f0:	9202      	str	r2, [sp, #8]
 80111f2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80111f6:	9201      	str	r2, [sp, #4]
 80111f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80111fc:	9200      	str	r2, [sp, #0]
 80111fe:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8011202:	4a06      	ldr	r2, [pc, #24]	; (801121c <DisplayUdf::ShowNetmask()+0x38>)
 8011204:	b2db      	uxtb	r3, r3
 8011206:	f7ff ff48 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 801120a:	4620      	mov	r0, r4
 801120c:	b004      	add	sp, #16
 801120e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011212:	f7ff bfb3 	b.w	801117c <DisplayUdf::ShowIpAddress()>
 8011216:	bf00      	nop
 8011218:	200095c0 	andcs	r9, r0, r0, asr #11
 801121c:	08016c94 	stmdaeq	r1, {r2, r4, r7, sl, fp, sp, lr}

08011220 <DisplayUdf::ShowGatewayIp()>:
 8011220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011222:	4604      	mov	r4, r0
 8011224:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8011228:	6980      	ldr	r0, [r0, #24]
 801122a:	f7ff ff31 	bl	8011090 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801122e:	4b0a      	ldr	r3, [pc, #40]	; (8011258 <DisplayUdf::ShowGatewayIp()+0x38>)
 8011230:	4620      	mov	r0, r4
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8011238:	695b      	ldr	r3, [r3, #20]
 801123a:	0e1a      	lsrs	r2, r3, #24
 801123c:	9202      	str	r2, [sp, #8]
 801123e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011242:	9201      	str	r2, [sp, #4]
 8011244:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011248:	9200      	str	r2, [sp, #0]
 801124a:	b2db      	uxtb	r3, r3
 801124c:	4a03      	ldr	r2, [pc, #12]	; (801125c <DisplayUdf::ShowGatewayIp()+0x3c>)
 801124e:	f7ff ff24 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 8011252:	b004      	add	sp, #16
 8011254:	bd10      	pop	{r4, pc}
 8011256:	bf00      	nop
 8011258:	200095c0 	andcs	r9, r0, r0, asr #11
 801125c:	08016ca3 	stmdaeq	r1, {r0, r1, r5, r7, sl, fp, sp, lr}

08011260 <DisplayUdf::ShowHostName()>:
 8011260:	b510      	push	{r4, lr}
 8011262:	4604      	mov	r4, r0
 8011264:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8011268:	6980      	ldr	r0, [r0, #24]
 801126a:	f7ff ff11 	bl	8011090 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801126e:	4b05      	ldr	r3, [pc, #20]	; (8011284 <DisplayUdf::ShowHostName()+0x24>)
 8011270:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8011274:	681a      	ldr	r2, [r3, #0]
 8011276:	69a0      	ldr	r0, [r4, #24]
 8011278:	321c      	adds	r2, #28
 801127a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801127e:	f7ff bef5 	b.w	801106c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8011282:	bf00      	nop
 8011284:	200095c0 	andcs	r9, r0, r0, asr #11

08011288 <DisplayUdf::Show()>:
 8011288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801128a:	4604      	mov	r4, r0
 801128c:	21ff      	movs	r1, #255	; 0xff
 801128e:	f100 033c 	add.w	r3, r0, #60	; 0x3c
 8011292:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8011296:	f813 0b01 	ldrb.w	r0, [r3], #1
 801129a:	2806      	cmp	r0, #6
 801129c:	bf88      	it	hi
 801129e:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d1f7      	bne.n	8011296 <DisplayUdf::Show()+0xe>
 80112a6:	2501      	movs	r5, #1
 80112a8:	4629      	mov	r1, r5
 80112aa:	3501      	adds	r5, #1
 80112ac:	69a0      	ldr	r0, [r4, #24]
 80112ae:	b2ed      	uxtb	r5, r5
 80112b0:	f7ff feee 	bl	8011090 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80112b4:	2d06      	cmp	r5, #6
 80112b6:	d1f7      	bne.n	80112a8 <DisplayUdf::Show()+0x20>
 80112b8:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 80112bc:	69a0      	ldr	r0, [r4, #24]
 80112be:	f104 021c 	add.w	r2, r4, #28
 80112c2:	f7ff fed3 	bl	801106c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80112c6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80112ca:	69a0      	ldr	r0, [r4, #24]
 80112cc:	4a0d      	ldr	r2, [pc, #52]	; (8011304 <DisplayUdf::Show()+0x7c>)
 80112ce:	f7ff fecd 	bl	801106c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80112d2:	4b0d      	ldr	r3, [pc, #52]	; (8011308 <DisplayUdf::Show()+0x80>)
 80112d4:	4a0d      	ldr	r2, [pc, #52]	; (801130c <DisplayUdf::Show()+0x84>)
 80112d6:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 80112da:	9300      	str	r3, [sp, #0]
 80112dc:	4620      	mov	r0, r4
 80112de:	2303      	movs	r3, #3
 80112e0:	f7ff fedb 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 80112e4:	4620      	mov	r0, r4
 80112e6:	f7ff ff49 	bl	801117c <DisplayUdf::ShowIpAddress()>
 80112ea:	4620      	mov	r0, r4
 80112ec:	f7ff ff98 	bl	8011220 <DisplayUdf::ShowGatewayIp()>
 80112f0:	4620      	mov	r0, r4
 80112f2:	f7ff ff77 	bl	80111e4 <DisplayUdf::ShowNetmask()>
 80112f6:	4620      	mov	r0, r4
 80112f8:	b003      	add	sp, #12
 80112fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112fe:	f7ff bfaf 	b.w	8011260 <DisplayUdf::ShowHostName()>
 8011302:	bf00      	nop
 8011304:	080151fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, ip, lr}
 8011308:	20009c88 	andcs	r9, r0, r8, lsl #25
 801130c:	08016cb2 	stmdaeq	r1, {r1, r4, r5, r7, sl, fp, sp, lr}

08011310 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8011310:	3901      	subs	r1, #1
 8011312:	b510      	push	{r4, lr}
 8011314:	4604      	mov	r4, r0
 8011316:	2903      	cmp	r1, #3
 8011318:	d814      	bhi.n	8011344 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 801131a:	e8df f001 	tbb	[pc, r1]
 801131e:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 8011322:	4b14      	ldr	r3, [pc, #80]	; (8011374 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011324:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8011328:	6818      	ldr	r0, [r3, #0]
 801132a:	f7ff fed2 	bl	80110d2 <Display::Status(Display7SegmentMessage)>
 801132e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011332:	69a0      	ldr	r0, [r4, #24]
 8011334:	f7ff feac 	bl	8011090 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011338:	4a0f      	ldr	r2, [pc, #60]	; (8011378 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 801133a:	4620      	mov	r0, r4
 801133c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011340:	f7ff feab 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 8011344:	bd10      	pop	{r4, pc}
 8011346:	f248 0180 	movw	r1, #32896	; 0x8080
 801134a:	4b0a      	ldr	r3, [pc, #40]	; (8011374 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 801134c:	6818      	ldr	r0, [r3, #0]
 801134e:	f7ff fec0 	bl	80110d2 <Display::Status(Display7SegmentMessage)>
 8011352:	e7f7      	b.n	8011344 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8011354:	4b07      	ldr	r3, [pc, #28]	; (8011374 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011356:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 801135a:	6818      	ldr	r0, [r3, #0]
 801135c:	f7ff feb9 	bl	80110d2 <Display::Status(Display7SegmentMessage)>
 8011360:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011364:	69a0      	ldr	r0, [r4, #24]
 8011366:	f7ff fe93 	bl	8011090 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801136a:	4a04      	ldr	r2, [pc, #16]	; (801137c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 801136c:	e7e5      	b.n	801133a <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 801136e:	f645 3179 	movw	r1, #23417	; 0x5b79
 8011372:	e7ea      	b.n	801134a <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8011374:	20009bf8 	strdcs	r9, [r0], -r8
 8011378:	08016cc1 	stmdaeq	r1, {r0, r6, r7, sl, fp, sp, lr}
 801137c:	08016ccf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, sl, fp, sp, lr}

08011380 <DisplayUdf::ShowShutdown()>:
 8011380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011384:	4604      	mov	r4, r0
 8011386:	6980      	ldr	r0, [r0, #24]
 8011388:	b1d0      	cbz	r0, 80113c0 <DisplayUdf::ShowShutdown()+0x40>
 801138a:	f890 8005 	ldrb.w	r8, [r0, #5]
 801138e:	6803      	ldr	r3, [r0, #0]
 8011390:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8011394:	b2ed      	uxtb	r5, r5
 8011396:	462a      	mov	r2, r5
 8011398:	2100      	movs	r1, #0
 801139a:	6a1b      	ldr	r3, [r3, #32]
 801139c:	7906      	ldrb	r6, [r0, #4]
 801139e:	2700      	movs	r7, #0
 80113a0:	4798      	blx	r3
 80113a2:	3e01      	subs	r6, #1
 80113a4:	42b7      	cmp	r7, r6
 80113a6:	69a0      	ldr	r0, [r4, #24]
 80113a8:	d311      	bcc.n	80113ce <DisplayUdf::ShowShutdown()+0x4e>
 80113aa:	b120      	cbz	r0, 80113b6 <DisplayUdf::ShowShutdown()+0x36>
 80113ac:	6803      	ldr	r3, [r0, #0]
 80113ae:	462a      	mov	r2, r5
 80113b0:	2100      	movs	r1, #0
 80113b2:	6a1b      	ldr	r3, [r3, #32]
 80113b4:	4798      	blx	r3
 80113b6:	4641      	mov	r1, r8
 80113b8:	4a08      	ldr	r2, [pc, #32]	; (80113dc <DisplayUdf::ShowShutdown()+0x5c>)
 80113ba:	69a0      	ldr	r0, [r4, #24]
 80113bc:	f7ff fe56 	bl	801106c <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80113c0:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 80113c4:	4620      	mov	r0, r4
 80113c6:	f7ff fe84 	bl	80110d2 <Display::Status(Display7SegmentMessage)>
 80113ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113ce:	b118      	cbz	r0, 80113d8 <DisplayUdf::ShowShutdown()+0x58>
 80113d0:	6803      	ldr	r3, [r0, #0]
 80113d2:	2120      	movs	r1, #32
 80113d4:	695b      	ldr	r3, [r3, #20]
 80113d6:	4798      	blx	r3
 80113d8:	3701      	adds	r7, #1
 80113da:	e7e3      	b.n	80113a4 <DisplayUdf::ShowShutdown()+0x24>
 80113dc:	08016cdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, fp, sp, lr}

080113e0 <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 80113e0:	1e4b      	subs	r3, r1, #1
 80113e2:	2b05      	cmp	r3, #5
 80113e4:	b530      	push	{r4, r5, lr}
 80113e6:	d80f      	bhi.n	8011408 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 80113e8:	2300      	movs	r3, #0
 80113ea:	f100 043c 	add.w	r4, r0, #60	; 0x3c
 80113ee:	f814 5b01 	ldrb.w	r5, [r4], #1
 80113f2:	428d      	cmp	r5, r1
 80113f4:	d109      	bne.n	801140a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 80113f6:	1884      	adds	r4, r0, r2
 80113f8:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 80113fc:	4403      	add	r3, r0
 80113fe:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8011402:	4410      	add	r0, r2
 8011404:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8011408:	bd30      	pop	{r4, r5, pc}
 801140a:	3301      	adds	r3, #1
 801140c:	2b14      	cmp	r3, #20
 801140e:	d1ee      	bne.n	80113ee <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8011410:	e7f7      	b.n	8011402 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

08011414 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8011414:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011416:	88c6      	ldrh	r6, [r0, #6]
 8011418:	8885      	ldrh	r5, [r0, #4]
 801141a:	42ae      	cmp	r6, r5
 801141c:	d216      	bcs.n	801144c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 801141e:	4604      	mov	r4, r0
 8011420:	6800      	ldr	r0, [r0, #0]
 8011422:	1bad      	subs	r5, r5, r6
 8011424:	4430      	add	r0, r6
 8011426:	7a26      	ldrb	r6, [r4, #8]
 8011428:	b923      	cbnz	r3, 8011434 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 801142a:	b926      	cbnz	r6, 8011436 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 801142c:	9200      	str	r2, [sp, #0]
 801142e:	460b      	mov	r3, r1
 8011430:	4a09      	ldr	r2, [pc, #36]	; (8011458 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8011432:	e003      	b.n	801143c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011434:	b166      	cbz	r6, 8011450 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8011436:	460b      	mov	r3, r1
 8011438:	9200      	str	r2, [sp, #0]
 801143a:	4a08      	ldr	r2, [pc, #32]	; (801145c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 801143c:	4629      	mov	r1, r5
 801143e:	f001 fcb1 	bl	8012da4 <snprintf>
 8011442:	4285      	cmp	r5, r0
 8011444:	bfa2      	ittt	ge
 8011446:	88e3      	ldrhge	r3, [r4, #6]
 8011448:	181b      	addge	r3, r3, r0
 801144a:	80e3      	strhge	r3, [r4, #6]
 801144c:	b002      	add	sp, #8
 801144e:	bd70      	pop	{r4, r5, r6, pc}
 8011450:	9200      	str	r2, [sp, #0]
 8011452:	460b      	mov	r3, r1
 8011454:	4a02      	ldr	r2, [pc, #8]	; (8011460 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011456:	e7f1      	b.n	801143c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011458:	08015353 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, ip, lr}
 801145c:	0801534a 	stmdaeq	r1, {r1, r3, r6, r8, r9, ip, lr}
 8011460:	08015354 	stmdaeq	r1, {r2, r4, r6, r8, r9, ip, lr}

08011464 <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8011464:	b510      	push	{r4, lr}
 8011466:	2220      	movs	r2, #32
 8011468:	4604      	mov	r4, r0
 801146a:	f840 1b04 	str.w	r1, [r0], #4
 801146e:	2100      	movs	r1, #0
 8011470:	f001 fa56 	bl	8012920 <memset>
 8011474:	f647 7305 	movw	r3, #32517	; 0x7f05
 8011478:	4620      	mov	r0, r4
 801147a:	84a3      	strh	r3, [r4, #36]	; 0x24
 801147c:	bd10      	pop	{r4, pc}

0801147e <DisplayUdfParams::Load()>:
 801147e:	b508      	push	{r3, lr}
 8011480:	2300      	movs	r3, #0
 8011482:	4601      	mov	r1, r0
 8011484:	6043      	str	r3, [r0, #4]
 8011486:	6800      	ldr	r0, [r0, #0]
 8011488:	b120      	cbz	r0, 8011494 <DisplayUdfParams::Load()+0x16>
 801148a:	6803      	ldr	r3, [r0, #0]
 801148c:	3104      	adds	r1, #4
 801148e:	68db      	ldr	r3, [r3, #12]
 8011490:	4798      	blx	r3
 8011492:	2001      	movs	r0, #1
 8011494:	bd08      	pop	{r3, pc}
	...

08011498 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8011498:	6803      	ldr	r3, [r0, #0]
 801149a:	b1d3      	cbz	r3, 80114d2 <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 801149c:	2300      	movs	r3, #0
 801149e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114a0:	460d      	mov	r5, r1
 80114a2:	4616      	mov	r6, r2
 80114a4:	4604      	mov	r4, r0
 80114a6:	6043      	str	r3, [r0, #4]
 80114a8:	4602      	mov	r2, r0
 80114aa:	490a      	ldr	r1, [pc, #40]	; (80114d4 <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 80114ac:	4668      	mov	r0, sp
 80114ae:	f000 fc05 	bl	8011cbc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80114b2:	4632      	mov	r2, r6
 80114b4:	4629      	mov	r1, r5
 80114b6:	4668      	mov	r0, sp
 80114b8:	f000 fc04 	bl	8011cc4 <ReadConfigFile::Read(char const*, unsigned int)>
 80114bc:	4621      	mov	r1, r4
 80114be:	f851 0b04 	ldr.w	r0, [r1], #4
 80114c2:	6803      	ldr	r3, [r0, #0]
 80114c4:	689b      	ldr	r3, [r3, #8]
 80114c6:	4798      	blx	r3
 80114c8:	4668      	mov	r0, sp
 80114ca:	f000 fbfa 	bl	8011cc2 <ReadConfigFile::~ReadConfigFile()>
 80114ce:	b002      	add	sp, #8
 80114d0:	bd70      	pop	{r4, r5, r6, pc}
 80114d2:	4770      	bx	lr
 80114d4:	080115a1 	stmdaeq	r1, {r0, r5, r7, r8, sl, ip}

080114d8 <DisplayUdfParams::callbackFunction(char const*)>:
 80114d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114da:	460e      	mov	r6, r1
 80114dc:	4604      	mov	r4, r0
 80114de:	492c      	ldr	r1, [pc, #176]	; (8011590 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 80114e0:	4630      	mov	r0, r6
 80114e2:	f10d 0207 	add.w	r2, sp, #7
 80114e6:	f000 fcc3 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80114ea:	b968      	cbnz	r0, 8011508 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 80114ec:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80114f0:	6863      	ldr	r3, [r4, #4]
 80114f2:	2a7f      	cmp	r2, #127	; 0x7f
 80114f4:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80114f8:	bf14      	ite	ne
 80114fa:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 80114fe:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 8011502:	6063      	str	r3, [r4, #4]
 8011504:	b003      	add	sp, #12
 8011506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011508:	4630      	mov	r0, r6
 801150a:	4922      	ldr	r1, [pc, #136]	; (8011594 <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 801150c:	f10d 0207 	add.w	r2, sp, #7
 8011510:	f000 fcae 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011514:	b958      	cbnz	r0, 801152e <DisplayUdfParams::callbackFunction(char const*)+0x56>
 8011516:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801151a:	6863      	ldr	r3, [r4, #4]
 801151c:	2a05      	cmp	r2, #5
 801151e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8011522:	bf14      	ite	ne
 8011524:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8011528:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 801152c:	e7e9      	b.n	8011502 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801152e:	4630      	mov	r0, r6
 8011530:	4919      	ldr	r1, [pc, #100]	; (8011598 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 8011532:	f10d 0207 	add.w	r2, sp, #7
 8011536:	f000 fc9b 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801153a:	b948      	cbnz	r0, 8011550 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 801153c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011540:	6863      	ldr	r3, [r4, #4]
 8011542:	b112      	cbz	r2, 801154a <DisplayUdfParams::callbackFunction(char const*)+0x72>
 8011544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011548:	e7db      	b.n	8011502 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801154a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801154e:	e7d8      	b.n	8011502 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011550:	2500      	movs	r5, #0
 8011552:	4f12      	ldr	r7, [pc, #72]	; (801159c <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 8011554:	4630      	mov	r0, r6
 8011556:	f857 1b04 	ldr.w	r1, [r7], #4
 801155a:	f10d 0207 	add.w	r2, sp, #7
 801155e:	f000 fc87 	bl	8011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011562:	b980      	cbnz	r0, 8011586 <DisplayUdfParams::callbackFunction(char const*)+0xae>
 8011564:	2301      	movs	r3, #1
 8011566:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801156a:	40ab      	lsls	r3, r5
 801156c:	1e4e      	subs	r6, r1, #1
 801156e:	2e05      	cmp	r6, #5
 8011570:	6862      	ldr	r2, [r4, #4]
 8011572:	4425      	add	r5, r4
 8011574:	d802      	bhi.n	801157c <DisplayUdfParams::callbackFunction(char const*)+0xa4>
 8011576:	7229      	strb	r1, [r5, #8]
 8011578:	4313      	orrs	r3, r2
 801157a:	e7c2      	b.n	8011502 <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 801157c:	ea22 0203 	bic.w	r2, r2, r3
 8011580:	7228      	strb	r0, [r5, #8]
 8011582:	6062      	str	r2, [r4, #4]
 8011584:	e7be      	b.n	8011504 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8011586:	3501      	adds	r5, #1
 8011588:	2d14      	cmp	r5, #20
 801158a:	d1e3      	bne.n	8011554 <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 801158c:	e7ba      	b.n	8011504 <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 801158e:	bf00      	nop
 8011590:	08016d9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, sl, fp, sp, lr}
 8011594:	08016d66 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, fp, sp, lr}
 8011598:	08016d74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, sp, lr}
 801159c:	08016cf0 	stmdaeq	r1, {r4, r5, r6, r7, sl, fp, sp, lr}

080115a0 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 80115a0:	f7ff bf9a 	b.w	80114d8 <DisplayUdfParams::callbackFunction(char const*)>

080115a4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 80115a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115a8:	4604      	mov	r4, r0
 80115aa:	4615      	mov	r5, r2
 80115ac:	461e      	mov	r6, r3
 80115ae:	b086      	sub	sp, #24
 80115b0:	3004      	adds	r0, #4
 80115b2:	b379      	cbz	r1, 8011614 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 80115b4:	2222      	movs	r2, #34	; 0x22
 80115b6:	f001 f99c 	bl	80128f2 <memmove>
 80115ba:	462a      	mov	r2, r5
 80115bc:	4633      	mov	r3, r6
 80115be:	493d      	ldr	r1, [pc, #244]	; (80116b4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 80115c0:	a803      	add	r0, sp, #12
 80115c2:	f000 faab 	bl	8011b1c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80115c6:	6863      	ldr	r3, [r4, #4]
 80115c8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80115cc:	493a      	ldr	r1, [pc, #232]	; (80116b8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 80115ce:	f3c3 7340 	ubfx	r3, r3, #29, #1
 80115d2:	a803      	add	r0, sp, #12
 80115d4:	f7ff ff1e 	bl	8011414 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80115d8:	6863      	ldr	r3, [r4, #4]
 80115da:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80115de:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80115e2:	4936      	ldr	r1, [pc, #216]	; (80116bc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 80115e4:	a803      	add	r0, sp, #12
 80115e6:	f7ff ff15 	bl	8011414 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80115ea:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80115ee:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80115f2:	6863      	ldr	r3, [r4, #4]
 80115f4:	42aa      	cmp	r2, r5
 80115f6:	d226      	bcs.n	8011646 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 80115f8:	9803      	ldr	r0, [sp, #12]
 80115fa:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 80115fe:	4410      	add	r0, r2
 8011600:	eba5 0502 	sub.w	r5, r5, r2
 8011604:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8011608:	d10b      	bne.n	8011622 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 801160a:	b962      	cbnz	r2, 8011626 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 801160c:	9200      	str	r2, [sp, #0]
 801160e:	4b2c      	ldr	r3, [pc, #176]	; (80116c0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8011610:	4a2c      	ldr	r2, [pc, #176]	; (80116c4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8011612:	e00e      	b.n	8011632 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8011614:	6823      	ldr	r3, [r4, #0]
 8011616:	4601      	mov	r1, r0
 8011618:	681a      	ldr	r2, [r3, #0]
 801161a:	4618      	mov	r0, r3
 801161c:	68d2      	ldr	r2, [r2, #12]
 801161e:	4790      	blx	r2
 8011620:	e7cb      	b.n	80115ba <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8011622:	2a00      	cmp	r2, #0
 8011624:	d041      	beq.n	80116aa <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8011626:	3b00      	subs	r3, #0
 8011628:	bf18      	it	ne
 801162a:	2301      	movne	r3, #1
 801162c:	4a26      	ldr	r2, [pc, #152]	; (80116c8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 801162e:	9300      	str	r3, [sp, #0]
 8011630:	4b23      	ldr	r3, [pc, #140]	; (80116c0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8011632:	4629      	mov	r1, r5
 8011634:	f001 fbb6 	bl	8012da4 <snprintf>
 8011638:	4285      	cmp	r5, r0
 801163a:	bfa2      	ittt	ge
 801163c:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8011640:	181b      	addge	r3, r3, r0
 8011642:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8011646:	2500      	movs	r5, #0
 8011648:	2701      	movs	r7, #1
 801164a:	4e20      	ldr	r6, [pc, #128]	; (80116cc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 801164c:	f104 0808 	add.w	r8, r4, #8
 8011650:	f856 1b04 	ldr.w	r1, [r6], #4
 8011654:	780b      	ldrb	r3, [r1, #0]
 8011656:	b15b      	cbz	r3, 8011670 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8011658:	6862      	ldr	r2, [r4, #4]
 801165a:	fa07 f305 	lsl.w	r3, r7, r5
 801165e:	4393      	bics	r3, r2
 8011660:	bf0c      	ite	eq
 8011662:	2301      	moveq	r3, #1
 8011664:	2300      	movne	r3, #0
 8011666:	f818 2005 	ldrb.w	r2, [r8, r5]
 801166a:	a803      	add	r0, sp, #12
 801166c:	f7ff fed2 	bl	8011414 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8011670:	3501      	adds	r5, #1
 8011672:	2d14      	cmp	r5, #20
 8011674:	d1ec      	bne.n	8011650 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 8011676:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801167a:	b17b      	cbz	r3, 801169c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 801167c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011680:	9b03      	ldr	r3, [sp, #12]
 8011682:	4413      	add	r3, r2
 8011684:	227d      	movs	r2, #125	; 0x7d
 8011686:	f803 2c01 	strb.w	r2, [r3, #-1]
 801168a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801168e:	9903      	ldr	r1, [sp, #12]
 8011690:	54ca      	strb	r2, [r1, r3]
 8011692:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011696:	3301      	adds	r3, #1
 8011698:	f8ad 3012 	strh.w	r3, [sp, #18]
 801169c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80116a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116a2:	601a      	str	r2, [r3, #0]
 80116a4:	b006      	add	sp, #24
 80116a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116aa:	2301      	movs	r3, #1
 80116ac:	4a08      	ldr	r2, [pc, #32]	; (80116d0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 80116ae:	9300      	str	r3, [sp, #0]
 80116b0:	4b03      	ldr	r3, [pc, #12]	; (80116c0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80116b2:	e7be      	b.n	8011632 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 80116b4:	08016d92 	stmdaeq	r1, {r1, r4, r7, r8, sl, fp, sp, lr}
 80116b8:	08016d9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, sl, fp, sp, lr}
 80116bc:	08016d66 	stmdaeq	r1, {r1, r2, r5, r6, r8, sl, fp, sp, lr}
 80116c0:	08016d74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, sp, lr}
 80116c4:	08015353 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, ip, lr}
 80116c8:	0801534a 	stmdaeq	r1, {r1, r3, r6, r8, r9, ip, lr}
 80116cc:	08016cf0 	stmdaeq	r1, {r4, r5, r6, r7, sl, fp, sp, lr}
 80116d0:	08015354 	stmdaeq	r1, {r2, r4, r6, r8, r9, ip, lr}

080116d4 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 80116d4:	b513      	push	{r0, r1, r4, lr}
 80116d6:	6804      	ldr	r4, [r0, #0]
 80116d8:	b914      	cbnz	r4, 80116e0 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80116da:	601c      	str	r4, [r3, #0]
 80116dc:	b002      	add	sp, #8
 80116de:	bd10      	pop	{r4, pc}
 80116e0:	9300      	str	r3, [sp, #0]
 80116e2:	4613      	mov	r3, r2
 80116e4:	460a      	mov	r2, r1
 80116e6:	2100      	movs	r1, #0
 80116e8:	f7ff ff5c 	bl	80115a4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 80116ec:	e7f6      	b.n	80116dc <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

080116ee <DisplayUdfParams::Set(DisplayUdf*)>:
 80116ee:	6843      	ldr	r3, [r0, #4]
 80116f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116f4:	009a      	lsls	r2, r3, #2
 80116f6:	4604      	mov	r4, r0
 80116f8:	460e      	mov	r6, r1
 80116fa:	d506      	bpl.n	801170a <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 80116fc:	6988      	ldr	r0, [r1, #24]
 80116fe:	b120      	cbz	r0, 801170a <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8011700:	6803      	ldr	r3, [r0, #0]
 8011702:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8011706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011708:	4798      	blx	r3
 801170a:	6863      	ldr	r3, [r4, #4]
 801170c:	69b0      	ldr	r0, [r6, #24]
 801170e:	00db      	lsls	r3, r3, #3
 8011710:	bf41      	itttt	mi
 8011712:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8011716:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 801171a:	4353      	mulmi	r3, r2
 801171c:	6173      	strmi	r3, [r6, #20]
 801171e:	6861      	ldr	r1, [r4, #4]
 8011720:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8011724:	b110      	cbz	r0, 801172c <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8011726:	6803      	ldr	r3, [r0, #0]
 8011728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801172a:	4798      	blx	r3
 801172c:	2500      	movs	r5, #0
 801172e:	2701      	movs	r7, #1
 8011730:	f104 0808 	add.w	r8, r4, #8
 8011734:	6862      	ldr	r2, [r4, #4]
 8011736:	fa07 f305 	lsl.w	r3, r7, r5
 801173a:	4393      	bics	r3, r2
 801173c:	d105      	bne.n	801174a <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 801173e:	462a      	mov	r2, r5
 8011740:	4630      	mov	r0, r6
 8011742:	f818 1005 	ldrb.w	r1, [r8, r5]
 8011746:	f7ff fe4b 	bl	80113e0 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 801174a:	3501      	adds	r5, #1
 801174c:	2d14      	cmp	r5, #20
 801174e:	d1f1      	bne.n	8011734 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8011750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011754 <DisplayUdfParams::Dump()>:
 8011754:	4770      	bx	lr

08011756 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8011756:	b570      	push	{r4, r5, r6, lr}
 8011758:	4605      	mov	r5, r0
 801175a:	6980      	ldr	r0, [r0, #24]
 801175c:	460c      	mov	r4, r1
 801175e:	b120      	cbz	r0, 801176a <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 8011760:	6803      	ldr	r3, [r0, #0]
 8011762:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8011766:	691b      	ldr	r3, [r3, #16]
 8011768:	4798      	blx	r3
 801176a:	69a8      	ldr	r0, [r5, #24]
 801176c:	f104 0242 	add.w	r2, r4, #66	; 0x42
 8011770:	b190      	cbz	r0, 8011798 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 8011772:	2300      	movs	r3, #0
 8011774:	7906      	ldrb	r6, [r0, #4]
 8011776:	3441      	adds	r4, #65	; 0x41
 8011778:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801177c:	b119      	cbz	r1, 8011786 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 801177e:	1c59      	adds	r1, r3, #1
 8011780:	429e      	cmp	r6, r3
 8011782:	460b      	mov	r3, r1
 8011784:	dcf8      	bgt.n	8011778 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 8011786:	6801      	ldr	r1, [r0, #0]
 8011788:	b2db      	uxtb	r3, r3
 801178a:	69cc      	ldr	r4, [r1, #28]
 801178c:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8011790:	46a4      	mov	ip, r4
 8011792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011796:	4760      	bx	ip
 8011798:	bd70      	pop	{r4, r5, r6, pc}
	...

0801179c <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 801179c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117a0:	460c      	mov	r4, r1
 80117a2:	b08b      	sub	sp, #44	; 0x2c
 80117a4:	4606      	mov	r6, r0
 80117a6:	2301      	movs	r3, #1
 80117a8:	2100      	movs	r1, #0
 80117aa:	4620      	mov	r0, r4
 80117ac:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 80117b0:	f7f7 fa8e 	bl	8008cd0 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 80117b4:	b350      	cbz	r0, 801180c <DisplayUdf::ShowUniverse(ArtNetNode*)+0x70>
 80117b6:	2100      	movs	r1, #0
 80117b8:	4620      	mov	r0, r4
 80117ba:	f896 9040 	ldrb.w	r9, [r6, #64]	; 0x40
 80117be:	f7f7 faa1 	bl	8008d04 <ArtNetNode::GetNetSwitch(unsigned int) const>
 80117c2:	2100      	movs	r1, #0
 80117c4:	4605      	mov	r5, r0
 80117c6:	4620      	mov	r0, r4
 80117c8:	f7f7 fa98 	bl	8008cfc <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 80117cc:	2100      	movs	r1, #0
 80117ce:	4607      	mov	r7, r0
 80117d0:	4620      	mov	r0, r4
 80117d2:	f89d a027 	ldrb.w	sl, [sp, #39]	; 0x27
 80117d6:	f7f7 fc10 	bl	8008ffa <ArtNetNode::GetMergeMode(unsigned int) const>
 80117da:	4a2d      	ldr	r2, [pc, #180]	; (8011890 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 80117dc:	4b2d      	ldr	r3, [pc, #180]	; (8011894 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 80117de:	2100      	movs	r1, #0
 80117e0:	2800      	cmp	r0, #0
 80117e2:	bf0c      	ite	eq
 80117e4:	4690      	moveq	r8, r2
 80117e6:	4698      	movne	r8, r3
 80117e8:	4620      	mov	r0, r4
 80117ea:	f7f7 fbd5 	bl	8008f98 <ArtNetNode::GetPortProtocol(unsigned int) const>
 80117ee:	4a2a      	ldr	r2, [pc, #168]	; (8011898 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 80117f0:	4b2a      	ldr	r3, [pc, #168]	; (801189c <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>)
 80117f2:	4649      	mov	r1, r9
 80117f4:	2800      	cmp	r0, #0
 80117f6:	bf18      	it	ne
 80117f8:	4613      	movne	r3, r2
 80117fa:	e9cd 7a00 	strd	r7, sl, [sp]
 80117fe:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8011802:	4630      	mov	r0, r6
 8011804:	462b      	mov	r3, r5
 8011806:	4a26      	ldr	r2, [pc, #152]	; (80118a0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x104>)
 8011808:	f7ff fc47 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 801180c:	2500      	movs	r5, #0
 801180e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 801189c <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>
 8011812:	4629      	mov	r1, r5
 8011814:	2301      	movs	r3, #1
 8011816:	4620      	mov	r0, r4
 8011818:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 801181c:	f7f7 fa58 	bl	8008cd0 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8011820:	46a9      	mov	r9, r5
 8011822:	3501      	adds	r5, #1
 8011824:	b378      	cbz	r0, 8011886 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xea>
 8011826:	f106 0343 	add.w	r3, r6, #67	; 0x43
 801182a:	2100      	movs	r1, #0
 801182c:	4620      	mov	r0, r4
 801182e:	f813 b005 	ldrb.w	fp, [r3, r5]
 8011832:	f7f7 fa67 	bl	8008d04 <ArtNetNode::GetNetSwitch(unsigned int) const>
 8011836:	2100      	movs	r1, #0
 8011838:	4607      	mov	r7, r0
 801183a:	4620      	mov	r0, r4
 801183c:	f7f7 fa5e 	bl	8008cfc <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8011840:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8011844:	4680      	mov	r8, r0
 8011846:	4649      	mov	r1, r9
 8011848:	4620      	mov	r0, r4
 801184a:	9307      	str	r3, [sp, #28]
 801184c:	f7f7 fbd5 	bl	8008ffa <ArtNetNode::GetMergeMode(unsigned int) const>
 8011850:	4b10      	ldr	r3, [pc, #64]	; (8011894 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 8011852:	4a0f      	ldr	r2, [pc, #60]	; (8011890 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8011854:	4649      	mov	r1, r9
 8011856:	2800      	cmp	r0, #0
 8011858:	bf18      	it	ne
 801185a:	461a      	movne	r2, r3
 801185c:	4620      	mov	r0, r4
 801185e:	9206      	str	r2, [sp, #24]
 8011860:	f7f7 fb9a 	bl	8008f98 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8011864:	490c      	ldr	r1, [pc, #48]	; (8011898 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 8011866:	9a06      	ldr	r2, [sp, #24]
 8011868:	2800      	cmp	r0, #0
 801186a:	bf08      	it	eq
 801186c:	4651      	moveq	r1, sl
 801186e:	9b07      	ldr	r3, [sp, #28]
 8011870:	9104      	str	r1, [sp, #16]
 8011872:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8011876:	9203      	str	r2, [sp, #12]
 8011878:	462b      	mov	r3, r5
 801187a:	4659      	mov	r1, fp
 801187c:	4630      	mov	r0, r6
 801187e:	4a09      	ldr	r2, [pc, #36]	; (80118a4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x108>)
 8011880:	9700      	str	r7, [sp, #0]
 8011882:	f7ff fc0a 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 8011886:	2d04      	cmp	r5, #4
 8011888:	d1c3      	bne.n	8011812 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x76>
 801188a:	b00b      	add	sp, #44	; 0x2c
 801188c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011890:	0801527b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, ip, lr}
 8011894:	0801527f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r9, ip, lr}
 8011898:	0801528b 	stmdaeq	r1, {r0, r1, r3, r7, r9, ip, lr}
 801189c:	08016da8 	stmdaeq	r1, {r3, r5, r7, r8, sl, fp, sp, lr}
 80118a0:	08016dad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, sl, fp, sp, lr}
 80118a4:	08016dc1 	stmdaeq	r1, {r0, r6, r7, r8, sl, fp, sp, lr}

080118a8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 80118a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118ac:	4606      	mov	r6, r0
 80118ae:	2541      	movs	r5, #65	; 0x41
 80118b0:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80118f0 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 80118b4:	b085      	sub	sp, #20
 80118b6:	f100 084a 	add.w	r8, r0, #74	; 0x4a
 80118ba:	f501 775b 	add.w	r7, r1, #876	; 0x36c
 80118be:	012b      	lsls	r3, r5, #4
 80118c0:	58fc      	ldr	r4, [r7, r3]
 80118c2:	464a      	mov	r2, r9
 80118c4:	0e23      	lsrs	r3, r4, #24
 80118c6:	9303      	str	r3, [sp, #12]
 80118c8:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80118cc:	9302      	str	r3, [sp, #8]
 80118ce:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80118d2:	b2e4      	uxtb	r4, r4
 80118d4:	9301      	str	r3, [sp, #4]
 80118d6:	9400      	str	r4, [sp, #0]
 80118d8:	462b      	mov	r3, r5
 80118da:	4630      	mov	r0, r6
 80118dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80118e0:	3501      	adds	r5, #1
 80118e2:	f7ff fbda 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 80118e6:	2d45      	cmp	r5, #69	; 0x45
 80118e8:	d1e9      	bne.n	80118be <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 80118ea:	b005      	add	sp, #20
 80118ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118f0:	08016dd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, sl, fp, sp, lr}

080118f4 <DisplayUdf::Show(ArtNetNode*)>:
 80118f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80118f6:	4604      	mov	r4, r0
 80118f8:	460d      	mov	r5, r1
 80118fa:	f7ff fcc5 	bl	8011288 <DisplayUdf::Show()>
 80118fe:	4629      	mov	r1, r5
 8011900:	4620      	mov	r0, r4
 8011902:	f7ff ff28 	bl	8011756 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8011906:	4629      	mov	r1, r5
 8011908:	4620      	mov	r0, r4
 801190a:	f7ff ff47 	bl	801179c <DisplayUdf::ShowUniverse(ArtNetNode*)>
 801190e:	4629      	mov	r1, r5
 8011910:	4620      	mov	r0, r4
 8011912:	f7ff ffc9 	bl	80118a8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 8011916:	f895 26de 	ldrb.w	r2, [r5, #1758]	; 0x6de
 801191a:	f895 36df 	ldrb.w	r3, [r5, #1759]	; 0x6df
 801191e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8011922:	4413      	add	r3, r2
 8011924:	4620      	mov	r0, r4
 8011926:	4a0d      	ldr	r2, [pc, #52]	; (801195c <DisplayUdf::Show(ArtNetNode*)+0x68>)
 8011928:	f7ff fbb7 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 801192c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801192e:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8011932:	2a02      	cmp	r2, #2
 8011934:	d001      	beq.n	801193a <DisplayUdf::Show(ArtNetNode*)+0x46>
 8011936:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011938:	b92b      	cbnz	r3, 8011946 <DisplayUdf::Show(ArtNetNode*)+0x52>
 801193a:	4620      	mov	r0, r4
 801193c:	4a08      	ldr	r2, [pc, #32]	; (8011960 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 801193e:	f7ff fbac 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 8011942:	b003      	add	sp, #12
 8011944:	bd30      	pop	{r4, r5, pc}
 8011946:	4807      	ldr	r0, [pc, #28]	; (8011964 <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8011948:	9300      	str	r3, [sp, #0]
 801194a:	4b07      	ldr	r3, [pc, #28]	; (8011968 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 801194c:	2a00      	cmp	r2, #0
 801194e:	bf08      	it	eq
 8011950:	4603      	moveq	r3, r0
 8011952:	4620      	mov	r0, r4
 8011954:	4a05      	ldr	r2, [pc, #20]	; (801196c <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8011956:	f7ff fba0 	bl	801109a <Display::Printf(unsigned char, char const*, ...)>
 801195a:	e7f2      	b.n	8011942 <DisplayUdf::Show(ArtNetNode*)+0x4e>
 801195c:	08016de7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, sl, fp, sp, lr}
 8011960:	08016dee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, sl, fp, sp, lr}
 8011964:	0801504c 	stmdaeq	r1, {r2, r3, r6, ip, lr}
 8011968:	080153b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, ip, lr}
 801196c:	08016df5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, sl, fp, sp, lr}

08011970 <NetworkDisplay::ShowEmacStart()>:
 8011970:	4b01      	ldr	r3, [pc, #4]	; (8011978 <NetworkDisplay::ShowEmacStart()+0x8>)
 8011972:	6818      	ldr	r0, [r3, #0]
 8011974:	f7ff bbf2 	b.w	801115c <DisplayUdf::ShowEmacStart()>
 8011978:	20009bf0 	strdcs	r9, [r0], -r0

0801197c <NetworkDisplay::ShowIp()>:
 801197c:	4b01      	ldr	r3, [pc, #4]	; (8011984 <NetworkDisplay::ShowIp()+0x8>)
 801197e:	6818      	ldr	r0, [r3, #0]
 8011980:	f7ff bbfc 	b.w	801117c <DisplayUdf::ShowIpAddress()>
 8011984:	20009bf0 	strdcs	r9, [r0], -r0

08011988 <NetworkDisplay::ShowNetMask()>:
 8011988:	4b01      	ldr	r3, [pc, #4]	; (8011990 <NetworkDisplay::ShowNetMask()+0x8>)
 801198a:	6818      	ldr	r0, [r3, #0]
 801198c:	f7ff bc2a 	b.w	80111e4 <DisplayUdf::ShowNetmask()>
 8011990:	20009bf0 	strdcs	r9, [r0], -r0

08011994 <NetworkDisplay::ShowGatewayIp()>:
 8011994:	4b01      	ldr	r3, [pc, #4]	; (801199c <NetworkDisplay::ShowGatewayIp()+0x8>)
 8011996:	6818      	ldr	r0, [r3, #0]
 8011998:	f7ff bc42 	b.w	8011220 <DisplayUdf::ShowGatewayIp()>
 801199c:	20009bf0 	strdcs	r9, [r0], -r0

080119a0 <NetworkDisplay::ShowShutdown()>:
 80119a0:	4b01      	ldr	r3, [pc, #4]	; (80119a8 <NetworkDisplay::ShowShutdown()+0x8>)
 80119a2:	6818      	ldr	r0, [r3, #0]
 80119a4:	f7ff bcec 	b.w	8011380 <DisplayUdf::ShowShutdown()>
 80119a8:	20009bf0 	strdcs	r9, [r0], -r0

080119ac <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 80119ac:	4b01      	ldr	r3, [pc, #4]	; (80119b4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 80119ae:	6818      	ldr	r0, [r3, #0]
 80119b0:	f7ff bcae 	b.w	8011310 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80119b4:	20009bf0 	strdcs	r9, [r0], -r0

080119b8 <properties::convert_json_file(char*, unsigned short, bool)>:
 80119b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119bc:	4603      	mov	r3, r0
 80119be:	7800      	ldrb	r0, [r0, #0]
 80119c0:	287b      	cmp	r0, #123	; 0x7b
 80119c2:	f040 80a2 	bne.w	8011b0a <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 80119c6:	b17a      	cbz	r2, 80119e8 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 80119c8:	2401      	movs	r4, #1
 80119ca:	461e      	mov	r6, r3
 80119cc:	4620      	mov	r0, r4
 80119ce:	2a00      	cmp	r2, #0
 80119d0:	bf0c      	ite	eq
 80119d2:	f04f 0c0a 	moveq.w	ip, #10
 80119d6:	f04f 0c00 	movne.w	ip, #0
 80119da:	273d      	movs	r7, #61	; 0x3d
 80119dc:	42a1      	cmp	r1, r4
 80119de:	d850      	bhi.n	8011a82 <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 80119e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119e4:	463c      	mov	r4, r7
 80119e6:	e7f2      	b.n	80119ce <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 80119e8:	2023      	movs	r0, #35	; 0x23
 80119ea:	f803 0b01 	strb.w	r0, [r3], #1
 80119ee:	461c      	mov	r4, r3
 80119f0:	2701      	movs	r7, #1
 80119f2:	42b9      	cmp	r1, r7
 80119f4:	d811      	bhi.n	8011a1a <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 80119f6:	2001      	movs	r0, #1
 80119f8:	461e      	mov	r6, r3
 80119fa:	230a      	movs	r3, #10
 80119fc:	4625      	mov	r5, r4
 80119fe:	f806 3b01 	strb.w	r3, [r6], #1
 8011a02:	3001      	adds	r0, #1
 8011a04:	462b      	mov	r3, r5
 8011a06:	781c      	ldrb	r4, [r3, #0]
 8011a08:	3501      	adds	r5, #1
 8011a0a:	2c7b      	cmp	r4, #123	; 0x7b
 8011a0c:	d0ea      	beq.n	80119e4 <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 8011a0e:	42b9      	cmp	r1, r7
 8011a10:	f107 0401 	add.w	r4, r7, #1
 8011a14:	d9db      	bls.n	80119ce <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8011a16:	4627      	mov	r7, r4
 8011a18:	e7f4      	b.n	8011a04 <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 8011a1a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011a1e:	2822      	cmp	r0, #34	; 0x22
 8011a20:	d119      	bne.n	8011a56 <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 8011a22:	46a4      	mov	ip, r4
 8011a24:	461d      	mov	r5, r3
 8011a26:	2601      	movs	r6, #1
 8011a28:	f89c e000 	ldrb.w	lr, [ip]
 8011a2c:	4664      	mov	r4, ip
 8011a2e:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011a32:	462b      	mov	r3, r5
 8011a34:	4630      	mov	r0, r6
 8011a36:	f10c 0c01 	add.w	ip, ip, #1
 8011a3a:	f105 0501 	add.w	r5, r5, #1
 8011a3e:	f106 0601 	add.w	r6, r6, #1
 8011a42:	d0d9      	beq.n	80119f8 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8011a44:	3701      	adds	r7, #1
 8011a46:	42b9      	cmp	r1, r7
 8011a48:	4664      	mov	r4, ip
 8011a4a:	f805 ec01 	strb.w	lr, [r5, #-1]
 8011a4e:	d8eb      	bhi.n	8011a28 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8011a50:	4630      	mov	r0, r6
 8011a52:	462b      	mov	r3, r5
 8011a54:	e7d0      	b.n	80119f8 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8011a56:	3701      	adds	r7, #1
 8011a58:	e7cb      	b.n	80119f2 <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 8011a5a:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011a5e:	d110      	bne.n	8011a82 <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8011a60:	eba0 0803 	sub.w	r8, r0, r3
 8011a64:	461a      	mov	r2, r3
 8011a66:	eb08 0003 	add.w	r0, r8, r3
 8011a6a:	f813 eb01 	ldrb.w	lr, [r3], #1
 8011a6e:	1c65      	adds	r5, r4, #1
 8011a70:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011a74:	d04c      	beq.n	8011b10 <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 8011a76:	42a1      	cmp	r1, r4
 8011a78:	d911      	bls.n	8011a9e <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 8011a7a:	462c      	mov	r4, r5
 8011a7c:	f806 eb01 	strb.w	lr, [r6], #1
 8011a80:	e7f0      	b.n	8011a64 <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8011a82:	42a1      	cmp	r1, r4
 8011a84:	461d      	mov	r5, r3
 8011a86:	f893 e000 	ldrb.w	lr, [r3]
 8011a8a:	f104 0401 	add.w	r4, r4, #1
 8011a8e:	f103 0301 	add.w	r3, r3, #1
 8011a92:	d8e2      	bhi.n	8011a5a <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8011a94:	462b      	mov	r3, r5
 8011a96:	e7e3      	b.n	8011a60 <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 8011a98:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 8011a9c:	d009      	beq.n	8011ab2 <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8011a9e:	42a9      	cmp	r1, r5
 8011aa0:	4614      	mov	r4, r2
 8011aa2:	f892 e000 	ldrb.w	lr, [r2]
 8011aa6:	f105 0501 	add.w	r5, r5, #1
 8011aaa:	f102 0201 	add.w	r2, r2, #1
 8011aae:	d8f3      	bhi.n	8011a98 <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 8011ab0:	4622      	mov	r2, r4
 8011ab2:	7814      	ldrb	r4, [r2, #0]
 8011ab4:	4696      	mov	lr, r2
 8011ab6:	2c2f      	cmp	r4, #47	; 0x2f
 8011ab8:	462b      	mov	r3, r5
 8011aba:	f102 0201 	add.w	r2, r2, #1
 8011abe:	f105 0501 	add.w	r5, r5, #1
 8011ac2:	d81a      	bhi.n	8011afa <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 8011ac4:	4299      	cmp	r1, r3
 8011ac6:	d8f4      	bhi.n	8011ab2 <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8011ac8:	2c22      	cmp	r4, #34	; 0x22
 8011aca:	bf08      	it	eq
 8011acc:	4696      	moveq	lr, r2
 8011ace:	4673      	mov	r3, lr
 8011ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ad4:	1c6c      	adds	r4, r5, #1
 8011ad6:	2a22      	cmp	r2, #34	; 0x22
 8011ad8:	d011      	beq.n	8011afe <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8011ada:	2a2c      	cmp	r2, #44	; 0x2c
 8011adc:	d00f      	beq.n	8011afe <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8011ade:	2a7d      	cmp	r2, #125	; 0x7d
 8011ae0:	d00d      	beq.n	8011afe <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8011ae2:	42a9      	cmp	r1, r5
 8011ae4:	d90f      	bls.n	8011b06 <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 8011ae6:	f1a2 0520 	sub.w	r5, r2, #32
 8011aea:	2d5a      	cmp	r5, #90	; 0x5a
 8011aec:	d803      	bhi.n	8011af6 <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 8011aee:	469e      	mov	lr, r3
 8011af0:	f806 2b01 	strb.w	r2, [r6], #1
 8011af4:	3001      	adds	r0, #1
 8011af6:	4625      	mov	r5, r4
 8011af8:	e7e9      	b.n	8011ace <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8011afa:	461d      	mov	r5, r3
 8011afc:	e7e7      	b.n	8011ace <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8011afe:	462c      	mov	r4, r5
 8011b00:	f806 cb01 	strb.w	ip, [r6], #1
 8011b04:	3001      	adds	r0, #1
 8011b06:	3401      	adds	r4, #1
 8011b08:	e768      	b.n	80119dc <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 8011b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b0e:	e767      	b.n	80119e0 <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 8011b10:	4625      	mov	r5, r4
 8011b12:	f806 7b01 	strb.w	r7, [r6], #1
 8011b16:	3001      	adds	r0, #1
 8011b18:	e7c1      	b.n	8011a9e <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

08011b1c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 8011b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b20:	6002      	str	r2, [r0, #0]
 8011b22:	4614      	mov	r4, r2
 8011b24:	2200      	movs	r2, #0
 8011b26:	80c2      	strh	r2, [r0, #6]
 8011b28:	4a1c      	ldr	r2, [pc, #112]	; (8011b9c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 8011b2a:	4606      	mov	r6, r0
 8011b2c:	7812      	ldrb	r2, [r2, #0]
 8011b2e:	8083      	strh	r3, [r0, #4]
 8011b30:	f002 0201 	and.w	r2, r2, #1
 8011b34:	7202      	strb	r2, [r0, #8]
 8011b36:	4608      	mov	r0, r1
 8011b38:	4605      	mov	r5, r0
 8011b3a:	782f      	ldrb	r7, [r5, #0]
 8011b3c:	3001      	adds	r0, #1
 8011b3e:	2f00      	cmp	r7, #0
 8011b40:	d1fa      	bne.n	8011b38 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8011b42:	1a6d      	subs	r5, r5, r1
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	b1d2      	cbz	r2, 8011b7e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8011b48:	1d2f      	adds	r7, r5, #4
 8011b4a:	429f      	cmp	r7, r3
 8011b4c:	d814      	bhi.n	8011b78 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8011b4e:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8011b52:	f04f 0922 	mov.w	r9, #34	; 0x22
 8011b56:	462a      	mov	r2, r5
 8011b58:	f884 8000 	strb.w	r8, [r4]
 8011b5c:	f884 9001 	strb.w	r9, [r4, #1]
 8011b60:	1ca0      	adds	r0, r4, #2
 8011b62:	f000 fec6 	bl	80128f2 <memmove>
 8011b66:	223a      	movs	r2, #58	; 0x3a
 8011b68:	1963      	adds	r3, r4, r5
 8011b6a:	3505      	adds	r5, #5
 8011b6c:	f883 9002 	strb.w	r9, [r3, #2]
 8011b70:	70da      	strb	r2, [r3, #3]
 8011b72:	80f5      	strh	r5, [r6, #6]
 8011b74:	f804 8007 	strb.w	r8, [r4, r7]
 8011b78:	4630      	mov	r0, r6
 8011b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b7e:	1caf      	adds	r7, r5, #2
 8011b80:	429f      	cmp	r7, r3
 8011b82:	d8f9      	bhi.n	8011b78 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8011b84:	4620      	mov	r0, r4
 8011b86:	2323      	movs	r3, #35	; 0x23
 8011b88:	462a      	mov	r2, r5
 8011b8a:	f800 3b01 	strb.w	r3, [r0], #1
 8011b8e:	f000 feb0 	bl	80128f2 <memmove>
 8011b92:	230a      	movs	r3, #10
 8011b94:	442c      	add	r4, r5
 8011b96:	7063      	strb	r3, [r4, #1]
 8011b98:	80f7      	strh	r7, [r6, #6]
 8011b9a:	e7ed      	b.n	8011b78 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8011b9c:	20009bf4 	strdcs	r9, [r0], -r4

08011ba0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8011ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ba2:	469c      	mov	ip, r3
 8011ba4:	8885      	ldrh	r5, [r0, #4]
 8011ba6:	88c3      	ldrh	r3, [r0, #6]
 8011ba8:	b085      	sub	sp, #20
 8011baa:	42ab      	cmp	r3, r5
 8011bac:	d302      	bcc.n	8011bb4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 8011bae:	2000      	movs	r0, #0
 8011bb0:	b005      	add	sp, #20
 8011bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	6800      	ldr	r0, [r0, #0]
 8011bb8:	1aed      	subs	r5, r5, r3
 8011bba:	4418      	add	r0, r3
 8011bbc:	b2d6      	uxtb	r6, r2
 8011bbe:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8011bc2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011bc6:	f894 e008 	ldrb.w	lr, [r4, #8]
 8011bca:	0e12      	lsrs	r2, r2, #24
 8011bcc:	f1bc 0f00 	cmp.w	ip, #0
 8011bd0:	d109      	bne.n	8011be6 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 8011bd2:	f1be 0f00 	cmp.w	lr, #0
 8011bd6:	d109      	bne.n	8011bec <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8011bd8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011bdc:	e9cd 6700 	strd	r6, r7, [sp]
 8011be0:	460b      	mov	r3, r1
 8011be2:	4a0e      	ldr	r2, [pc, #56]	; (8011c1c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 8011be4:	e008      	b.n	8011bf8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8011be6:	f1be 0f00 	cmp.w	lr, #0
 8011bea:	d00f      	beq.n	8011c0c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8011bec:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	e9cd 6700 	strd	r6, r7, [sp]
 8011bf6:	4a0a      	ldr	r2, [pc, #40]	; (8011c20 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8011bf8:	4629      	mov	r1, r5
 8011bfa:	f001 f8d3 	bl	8012da4 <snprintf>
 8011bfe:	4285      	cmp	r5, r0
 8011c00:	dbd5      	blt.n	8011bae <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 8011c02:	88e3      	ldrh	r3, [r4, #6]
 8011c04:	4403      	add	r3, r0
 8011c06:	80e3      	strh	r3, [r4, #6]
 8011c08:	2001      	movs	r0, #1
 8011c0a:	e7d1      	b.n	8011bb0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 8011c0c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011c10:	e9cd 6700 	strd	r6, r7, [sp]
 8011c14:	460b      	mov	r3, r1
 8011c16:	4a03      	ldr	r2, [pc, #12]	; (8011c24 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8011c18:	e7ee      	b.n	8011bf8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8011c1a:	bf00      	nop
 8011c1c:	08016e13 	stmdaeq	r1, {r0, r1, r4, r9, sl, fp, sp, lr}
 8011c20:	08016dff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, sp, lr}
 8011c24:	08016e14 	stmdaeq	r1, {r2, r4, r9, sl, fp, sp, lr}

08011c28 <PropertiesBuilder::AddComment(char const*)>:
 8011c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c2a:	7a06      	ldrb	r6, [r0, #8]
 8011c2c:	b996      	cbnz	r6, 8011c54 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8011c2e:	4604      	mov	r4, r0
 8011c30:	88c0      	ldrh	r0, [r0, #6]
 8011c32:	88a5      	ldrh	r5, [r4, #4]
 8011c34:	42a8      	cmp	r0, r5
 8011c36:	d20d      	bcs.n	8011c54 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8011c38:	6827      	ldr	r7, [r4, #0]
 8011c3a:	1a2d      	subs	r5, r5, r0
 8011c3c:	460b      	mov	r3, r1
 8011c3e:	4a06      	ldr	r2, [pc, #24]	; (8011c58 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8011c40:	4629      	mov	r1, r5
 8011c42:	4438      	add	r0, r7
 8011c44:	f001 f8ae 	bl	8012da4 <snprintf>
 8011c48:	4285      	cmp	r5, r0
 8011c4a:	bfa1      	itttt	ge
 8011c4c:	2601      	movge	r6, #1
 8011c4e:	88e3      	ldrhge	r3, [r4, #6]
 8011c50:	18c0      	addge	r0, r0, r3
 8011c52:	80e0      	strhge	r0, [r4, #6]
 8011c54:	4630      	mov	r0, r6
 8011c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c58:	08016e24 	stmdaeq	r1, {r2, r5, r9, sl, fp, sp, lr}

08011c5c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
 8011c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c5e:	88c7      	ldrh	r7, [r0, #6]
 8011c60:	8885      	ldrh	r5, [r0, #4]
 8011c62:	9e08      	ldr	r6, [sp, #32]
 8011c64:	42af      	cmp	r7, r5
 8011c66:	d302      	bcc.n	8011c6e <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x12>
 8011c68:	2000      	movs	r0, #0
 8011c6a:	b003      	add	sp, #12
 8011c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c6e:	4604      	mov	r4, r0
 8011c70:	6800      	ldr	r0, [r0, #0]
 8011c72:	1bed      	subs	r5, r5, r7
 8011c74:	4438      	add	r0, r7
 8011c76:	7a27      	ldrb	r7, [r4, #8]
 8011c78:	b92b      	cbnz	r3, 8011c86 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2a>
 8011c7a:	b92f      	cbnz	r7, 8011c88 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2c>
 8011c7c:	e9cd 6200 	strd	r6, r2, [sp]
 8011c80:	460b      	mov	r3, r1
 8011c82:	4a0b      	ldr	r2, [pc, #44]	; (8011cb0 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x54>)
 8011c84:	e004      	b.n	8011c90 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8011c86:	b16f      	cbz	r7, 8011ca4 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x48>
 8011c88:	460b      	mov	r3, r1
 8011c8a:	e9cd 6200 	strd	r6, r2, [sp]
 8011c8e:	4a09      	ldr	r2, [pc, #36]	; (8011cb4 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x58>)
 8011c90:	4629      	mov	r1, r5
 8011c92:	f001 f887 	bl	8012da4 <snprintf>
 8011c96:	4285      	cmp	r5, r0
 8011c98:	dbe6      	blt.n	8011c68 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xc>
 8011c9a:	88e3      	ldrh	r3, [r4, #6]
 8011c9c:	4403      	add	r3, r0
 8011c9e:	80e3      	strh	r3, [r4, #6]
 8011ca0:	2001      	movs	r0, #1
 8011ca2:	e7e2      	b.n	8011c6a <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xe>
 8011ca4:	e9cd 6200 	strd	r6, r2, [sp]
 8011ca8:	460b      	mov	r3, r1
 8011caa:	4a03      	ldr	r2, [pc, #12]	; (8011cb8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5c>)
 8011cac:	e7f0      	b.n	8011c90 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 8011cae:	bf00      	nop
 8011cb0:	08016e39 	stmdaeq	r1, {r0, r3, r4, r5, r9, sl, fp, sp, lr}
 8011cb4:	08016e2c 	stmdaeq	r1, {r2, r3, r5, r9, sl, fp, sp, lr}
 8011cb8:	08016e3a 	stmdaeq	r1, {r1, r3, r4, r5, r9, sl, fp, sp, lr}

08011cbc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8011cbc:	e9c0 1200 	strd	r1, r2, [r0]
 8011cc0:	4770      	bx	lr

08011cc2 <ReadConfigFile::~ReadConfigFile()>:
 8011cc2:	4770      	bx	lr

08011cc4 <ReadConfigFile::Read(char const*, unsigned int)>:
 8011cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cc8:	4606      	mov	r6, r0
 8011cca:	460d      	mov	r5, r1
 8011ccc:	4614      	mov	r4, r2
 8011cce:	f04f 0800 	mov.w	r8, #0
 8011cd2:	b090      	sub	sp, #64	; 0x40
 8011cd4:	b33c      	cbz	r4, 8011d26 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8011cd6:	466b      	mov	r3, sp
 8011cd8:	462a      	mov	r2, r5
 8011cda:	4619      	mov	r1, r3
 8011cdc:	e007      	b.n	8011cee <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 8011cde:	f803 7b01 	strb.w	r7, [r3], #1
 8011ce2:	1a58      	subs	r0, r3, r1
 8011ce4:	283f      	cmp	r0, #63	; 0x3f
 8011ce6:	4615      	mov	r5, r2
 8011ce8:	dc1d      	bgt.n	8011d26 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8011cea:	3c01      	subs	r4, #1
 8011cec:	d00f      	beq.n	8011d0e <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8011cee:	7817      	ldrb	r7, [r2, #0]
 8011cf0:	4610      	mov	r0, r2
 8011cf2:	2f0d      	cmp	r7, #13
 8011cf4:	f102 0201 	add.w	r2, r2, #1
 8011cf8:	d001      	beq.n	8011cfe <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8011cfa:	2f0a      	cmp	r7, #10
 8011cfc:	d1ef      	bne.n	8011cde <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 8011cfe:	4605      	mov	r5, r0
 8011d00:	b12c      	cbz	r4, 8011d0e <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8011d02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d06:	2a0d      	cmp	r2, #13
 8011d08:	d00b      	beq.n	8011d22 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8011d0a:	2a0a      	cmp	r2, #10
 8011d0c:	d009      	beq.n	8011d22 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8011d0e:	f89d 2000 	ldrb.w	r2, [sp]
 8011d12:	2a60      	cmp	r2, #96	; 0x60
 8011d14:	d9de      	bls.n	8011cd4 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8011d16:	f883 8000 	strb.w	r8, [r3]
 8011d1a:	e9d6 3000 	ldrd	r3, r0, [r6]
 8011d1e:	4798      	blx	r3
 8011d20:	e7d8      	b.n	8011cd4 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8011d22:	3c01      	subs	r4, #1
 8011d24:	e7eb      	b.n	8011cfe <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 8011d26:	b010      	add	sp, #64	; 0x40
 8011d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d2c <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8011d2c:	b570      	push	{r4, r5, r6, lr}
 8011d2e:	4615      	mov	r5, r2
 8011d30:	461c      	mov	r4, r3
 8011d32:	f000 f8ba 	bl	8011eaa <Sscan::checkName(char const*, char const*)>
 8011d36:	b180      	cbz	r0, 8011d5a <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 8011d38:	2100      	movs	r1, #0
 8011d3a:	5c43      	ldrb	r3, [r0, r1]
 8011d3c:	6826      	ldr	r6, [r4, #0]
 8011d3e:	b28a      	uxth	r2, r1
 8011d40:	b143      	cbz	r3, 8011d54 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8011d42:	42b2      	cmp	r2, r6
 8011d44:	d303      	bcc.n	8011d4e <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 8011d46:	2b0a      	cmp	r3, #10
 8011d48:	d004      	beq.n	8011d54 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8011d4a:	2002      	movs	r0, #2
 8011d4c:	e004      	b.n	8011d58 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 8011d4e:	546b      	strb	r3, [r5, r1]
 8011d50:	3101      	adds	r1, #1
 8011d52:	e7f2      	b.n	8011d3a <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 8011d54:	2000      	movs	r0, #0
 8011d56:	6022      	str	r2, [r4, #0]
 8011d58:	bd70      	pop	{r4, r5, r6, pc}
 8011d5a:	2001      	movs	r0, #1
 8011d5c:	e7fc      	b.n	8011d58 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

08011d5e <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
 8011d5e:	b570      	push	{r4, r5, r6, lr}
 8011d60:	4616      	mov	r6, r2
 8011d62:	f000 f8a2 	bl	8011eaa <Sscan::checkName(char const*, char const*)>
 8011d66:	bb08      	cbnz	r0, 8011dac <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x4e>
 8011d68:	2001      	movs	r0, #1
 8011d6a:	bd70      	pop	{r4, r5, r6, pc}
 8011d6c:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 8011d70:	2d09      	cmp	r5, #9
 8011d72:	d904      	bls.n	8011d7e <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x20>
 8011d74:	f041 0220 	orr.w	r2, r1, #32
 8011d78:	3a61      	subs	r2, #97	; 0x61
 8011d7a:	2a05      	cmp	r2, #5
 8011d7c:	d8f4      	bhi.n	8011d68 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 8011d7e:	2939      	cmp	r1, #57	; 0x39
 8011d80:	bf83      	ittte	hi
 8011d82:	f041 0120 	orrhi.w	r1, r1, #32
 8011d86:	3957      	subhi	r1, #87	; 0x57
 8011d88:	b2c9      	uxtbhi	r1, r1
 8011d8a:	b2e9      	uxtbls	r1, r5
 8011d8c:	ea41 1404 	orr.w	r4, r1, r4, lsl #4
 8011d90:	b2a4      	uxth	r4, r4
 8011d92:	3301      	adds	r3, #1
 8011d94:	8034      	strh	r4, [r6, #0]
 8011d96:	5cc1      	ldrb	r1, [r0, r3]
 8011d98:	b119      	cbz	r1, 8011da2 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x44>
 8011d9a:	2b04      	cmp	r3, #4
 8011d9c:	d1e6      	bne.n	8011d6c <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xe>
 8011d9e:	2920      	cmp	r1, #32
 8011da0:	d1e2      	bne.n	8011d68 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 8011da2:	1f18      	subs	r0, r3, #4
 8011da4:	bf18      	it	ne
 8011da6:	2001      	movne	r0, #1
 8011da8:	0040      	lsls	r0, r0, #1
 8011daa:	e7de      	b.n	8011d6a <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>
 8011dac:	2400      	movs	r4, #0
 8011dae:	4623      	mov	r3, r4
 8011db0:	e7f0      	b.n	8011d94 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x36>

08011db2 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 8011db2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011db4:	4615      	mov	r5, r2
 8011db6:	f000 f878 	bl	8011eaa <Sscan::checkName(char const*, char const*)>
 8011dba:	bb58      	cbnz	r0, 8011e14 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 8011dbc:	2001      	movs	r0, #1
 8011dbe:	e027      	b.n	8011e10 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8011dc0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011dc4:	2b09      	cmp	r3, #9
 8011dc6:	d822      	bhi.n	8011e0e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dce:	3930      	subs	r1, #48	; 0x30
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dd6:	2a2e      	cmp	r2, #46	; 0x2e
 8011dd8:	d115      	bne.n	8011e06 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8011dda:	29ff      	cmp	r1, #255	; 0xff
 8011ddc:	d817      	bhi.n	8011e0e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8011dde:	3401      	adds	r4, #1
 8011de0:	2c03      	cmp	r4, #3
 8011de2:	f806 1b01 	strb.w	r1, [r6], #1
 8011de6:	d119      	bne.n	8011e1c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 8011de8:	2400      	movs	r4, #0
 8011dea:	260a      	movs	r6, #10
 8011dec:	1d1a      	adds	r2, r3, #4
 8011dee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8011df2:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8011df6:	d115      	bne.n	8011e24 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 8011df8:	2cff      	cmp	r4, #255	; 0xff
 8011dfa:	d808      	bhi.n	8011e0e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8011dfc:	f88d 4007 	strb.w	r4, [sp, #7]
 8011e00:	9b01      	ldr	r3, [sp, #4]
 8011e02:	602b      	str	r3, [r5, #0]
 8011e04:	e004      	b.n	8011e10 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8011e06:	2a00      	cmp	r2, #0
 8011e08:	d0e7      	beq.n	8011dda <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8011e0a:	42b8      	cmp	r0, r7
 8011e0c:	d1d8      	bne.n	8011dc0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 8011e0e:	2002      	movs	r0, #2
 8011e10:	b003      	add	sp, #12
 8011e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e14:	2400      	movs	r4, #0
 8011e16:	f04f 0c0a 	mov.w	ip, #10
 8011e1a:	ae01      	add	r6, sp, #4
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2100      	movs	r1, #0
 8011e20:	1d07      	adds	r7, r0, #4
 8011e22:	e7d5      	b.n	8011dd0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d0f2      	beq.n	8011e0e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8011e28:	3930      	subs	r1, #48	; 0x30
 8011e2a:	2909      	cmp	r1, #9
 8011e2c:	d8ef      	bhi.n	8011e0e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8011e2e:	fb06 1404 	mla	r4, r6, r4, r1
 8011e32:	e7dc      	b.n	8011dee <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

08011e34 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8011e34:	b538      	push	{r3, r4, r5, lr}
 8011e36:	4615      	mov	r5, r2
 8011e38:	f000 f837 	bl	8011eaa <Sscan::checkName(char const*, char const*)>
 8011e3c:	b1a0      	cbz	r0, 8011e68 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8011e3e:	4604      	mov	r4, r0
 8011e40:	2100      	movs	r1, #0
 8011e42:	220a      	movs	r2, #10
 8011e44:	7823      	ldrb	r3, [r4, #0]
 8011e46:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8011e4a:	2809      	cmp	r0, #9
 8011e4c:	d80e      	bhi.n	8011e6c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8011e4e:	fb02 3101 	mla	r1, r2, r1, r3
 8011e52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011e56:	3930      	subs	r1, #48	; 0x30
 8011e58:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8011e5c:	d1f2      	bne.n	8011e44 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8011e5e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8011e62:	d203      	bcs.n	8011e6c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8011e64:	8029      	strh	r1, [r5, #0]
 8011e66:	bd38      	pop	{r3, r4, r5, pc}
 8011e68:	2001      	movs	r0, #1
 8011e6a:	e7fc      	b.n	8011e66 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8011e6c:	2002      	movs	r0, #2
 8011e6e:	e7fa      	b.n	8011e66 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08011e70 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8011e70:	b538      	push	{r3, r4, r5, lr}
 8011e72:	4615      	mov	r5, r2
 8011e74:	f000 f819 	bl	8011eaa <Sscan::checkName(char const*, char const*)>
 8011e78:	b198      	cbz	r0, 8011ea2 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 8011e7a:	4604      	mov	r4, r0
 8011e7c:	2100      	movs	r1, #0
 8011e7e:	220a      	movs	r2, #10
 8011e80:	7823      	ldrb	r3, [r4, #0]
 8011e82:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8011e86:	2809      	cmp	r0, #9
 8011e88:	d80d      	bhi.n	8011ea6 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8011e8a:	fb02 3101 	mla	r1, r2, r1, r3
 8011e8e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011e92:	3930      	subs	r1, #48	; 0x30
 8011e94:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8011e98:	d1f2      	bne.n	8011e80 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 8011e9a:	29ff      	cmp	r1, #255	; 0xff
 8011e9c:	d803      	bhi.n	8011ea6 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8011e9e:	7029      	strb	r1, [r5, #0]
 8011ea0:	bd38      	pop	{r3, r4, r5, pc}
 8011ea2:	2001      	movs	r0, #1
 8011ea4:	e7fc      	b.n	8011ea0 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 8011ea6:	2002      	movs	r0, #2
 8011ea8:	e7fa      	b.n	8011ea0 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

08011eaa <Sscan::checkName(char const*, char const*)>:
 8011eaa:	4603      	mov	r3, r0
 8011eac:	b510      	push	{r4, lr}
 8011eae:	3901      	subs	r1, #1
 8011eb0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011eb4:	461c      	mov	r4, r3
 8011eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011eba:	b120      	cbz	r0, 8011ec6 <Sscan::checkName(char const*, char const*)+0x1c>
 8011ebc:	b10a      	cbz	r2, 8011ec2 <Sscan::checkName(char const*, char const*)+0x18>
 8011ebe:	4290      	cmp	r0, r2
 8011ec0:	d0f6      	beq.n	8011eb0 <Sscan::checkName(char const*, char const*)+0x6>
 8011ec2:	2000      	movs	r0, #0
 8011ec4:	e006      	b.n	8011ed4 <Sscan::checkName(char const*, char const*)+0x2a>
 8011ec6:	2a3d      	cmp	r2, #61	; 0x3d
 8011ec8:	d104      	bne.n	8011ed4 <Sscan::checkName(char const*, char const*)+0x2a>
 8011eca:	7860      	ldrb	r0, [r4, #1]
 8011ecc:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8011ed0:	d000      	beq.n	8011ed4 <Sscan::checkName(char const*, char const*)+0x2a>
 8011ed2:	1c60      	adds	r0, r4, #1
 8011ed4:	bd10      	pop	{r4, pc}

08011ed6 <LightSet::GetDmxStartAddress()>:
 8011ed6:	2001      	movs	r0, #1
 8011ed8:	4770      	bx	lr

08011eda <LightSet::GetDmxFootprint()>:
 8011eda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011ede:	4770      	bx	lr

08011ee0 <LightSet::SetDmxStartAddress(unsigned short)>:
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	4770      	bx	lr

08011ee4 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	2001      	movs	r0, #1
 8011ee8:	7093      	strb	r3, [r2, #2]
 8011eea:	8010      	strh	r0, [r2, #0]
 8011eec:	4770      	bx	lr
	...

08011ef0 <Display::PrintInfo() [clone .isra.0]>:
 8011ef0:	b910      	cbnz	r0, 8011ef8 <Display::PrintInfo() [clone .isra.0]+0x8>
 8011ef2:	4803      	ldr	r0, [pc, #12]	; (8011f00 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8011ef4:	f000 bf7e 	b.w	8012df4 <puts>
 8011ef8:	6803      	ldr	r3, [r0, #0]
 8011efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011efc:	4718      	bx	r3
 8011efe:	bf00      	nop
 8011f00:	08016f39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, sl, fp, sp, lr}

08011f04 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8011f04:	b513      	push	{r0, r1, r4, lr}
 8011f06:	4604      	mov	r4, r0
 8011f08:	0a13      	lsrs	r3, r2, #8
 8011f0a:	7800      	ldrb	r0, [r0, #0]
 8011f0c:	f88d 1004 	strb.w	r1, [sp, #4]
 8011f10:	f88d 3005 	strb.w	r3, [sp, #5]
 8011f14:	f88d 2006 	strb.w	r2, [sp, #6]
 8011f18:	f001 ff8e 	bl	8013e38 <gd32_i2c_set_address(unsigned char)>
 8011f1c:	6860      	ldr	r0, [r4, #4]
 8011f1e:	f001 ff83 	bl	8013e28 <gd32_i2c_set_baudrate(unsigned int)>
 8011f22:	2103      	movs	r1, #3
 8011f24:	a801      	add	r0, sp, #4
 8011f26:	f001 ff8d 	bl	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 8011f2a:	b002      	add	sp, #8
 8011f2c:	bd10      	pop	{r4, pc}

08011f2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 8011f2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f30:	460d      	mov	r5, r1
 8011f32:	4604      	mov	r4, r0
 8011f34:	f001 ff80 	bl	8013e38 <gd32_i2c_set_address(unsigned char)>
 8011f38:	4628      	mov	r0, r5
 8011f3a:	f001 ff75 	bl	8013e28 <gd32_i2c_set_baudrate(unsigned int)>
 8011f3e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011f42:	2b07      	cmp	r3, #7
 8011f44:	d902      	bls.n	8011f4c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8011f46:	3c50      	subs	r4, #80	; 0x50
 8011f48:	2c0f      	cmp	r4, #15
 8011f4a:	d809      	bhi.n	8011f60 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 8011f4c:	2101      	movs	r1, #1
 8011f4e:	f10d 0007 	add.w	r0, sp, #7
 8011f52:	f001 ffdd 	bl	8013f10 <gd32_i2c_read(char*, unsigned int)>
 8011f56:	fab0 f080 	clz	r0, r0
 8011f5a:	0940      	lsrs	r0, r0, #5
 8011f5c:	b003      	add	sp, #12
 8011f5e:	bd30      	pop	{r4, r5, pc}
 8011f60:	2100      	movs	r1, #0
 8011f62:	4608      	mov	r0, r1
 8011f64:	f001 ff6e 	bl	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 8011f68:	e7f5      	b.n	8011f56 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

08011f6a <Display::Detect7Segment()>:
 8011f6a:	b538      	push	{r3, r4, r5, lr}
 8011f6c:	68c1      	ldr	r1, [r0, #12]
 8011f6e:	4604      	mov	r4, r0
 8011f70:	7a00      	ldrb	r0, [r0, #8]
 8011f72:	f7ff ffdc 	bl	8011f2e <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8011f76:	7460      	strb	r0, [r4, #17]
 8011f78:	b170      	cbz	r0, 8011f98 <Display::Detect7Segment()+0x2e>
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	f104 0508 	add.w	r5, r4, #8
 8011f80:	4611      	mov	r1, r2
 8011f82:	4628      	mov	r0, r5
 8011f84:	f7ff ffbe 	bl	8011f04 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8011f88:	7c63      	ldrb	r3, [r4, #17]
 8011f8a:	b12b      	cbz	r3, 8011f98 <Display::Detect7Segment()+0x2e>
 8011f8c:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8011f90:	2112      	movs	r1, #18
 8011f92:	4628      	mov	r0, r5
 8011f94:	f7ff ffb6 	bl	8011f04 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8011f98:	bd38      	pop	{r3, r4, r5, pc}

08011f9a <Display::Detect(display::Type)>:
 8011f9a:	2902      	cmp	r1, #2
 8011f9c:	b538      	push	{r3, r4, r5, lr}
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	d014      	beq.n	8011fcc <Display::Detect(display::Type)+0x32>
 8011fa2:	2904      	cmp	r1, #4
 8011fa4:	d01b      	beq.n	8011fde <Display::Detect(display::Type)+0x44>
 8011fa6:	69a0      	ldr	r0, [r4, #24]
 8011fa8:	b168      	cbz	r0, 8011fc6 <Display::Detect(display::Type)+0x2c>
 8011faa:	6803      	ldr	r3, [r0, #0]
 8011fac:	689b      	ldr	r3, [r3, #8]
 8011fae:	4798      	blx	r3
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	69a0      	ldr	r0, [r4, #24]
 8011fb4:	b9ab      	cbnz	r3, 8011fe2 <Display::Detect(display::Type)+0x48>
 8011fb6:	b110      	cbz	r0, 8011fbe <Display::Detect(display::Type)+0x24>
 8011fb8:	6803      	ldr	r3, [r0, #0]
 8011fba:	685b      	ldr	r3, [r3, #4]
 8011fbc:	4798      	blx	r3
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	61a3      	str	r3, [r4, #24]
 8011fc2:	2304      	movs	r3, #4
 8011fc4:	6023      	str	r3, [r4, #0]
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	6163      	str	r3, [r4, #20]
 8011fca:	e010      	b.n	8011fee <Display::Detect(display::Type)+0x54>
 8011fcc:	2018      	movs	r0, #24
 8011fce:	f000 fbd1 	bl	8012774 <operator new(unsigned int)>
 8011fd2:	4605      	mov	r5, r0
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	f000 f89d 	bl	8012114 <Ssd1306::Ssd1306(TOledPanel)>
 8011fda:	61a5      	str	r5, [r4, #24]
 8011fdc:	e7e3      	b.n	8011fa6 <Display::Detect(display::Type)+0xc>
 8011fde:	6001      	str	r1, [r0, #0]
 8011fe0:	e7e1      	b.n	8011fa6 <Display::Detect(display::Type)+0xc>
 8011fe2:	6803      	ldr	r3, [r0, #0]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	4798      	blx	r3
 8011fe8:	69a3      	ldr	r3, [r4, #24]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d0eb      	beq.n	8011fc6 <Display::Detect(display::Type)+0x2c>
 8011fee:	bd38      	pop	{r3, r4, r5, pc}

08011ff0 <Display::Display()>:
 8011ff0:	2304      	movs	r3, #4
 8011ff2:	b510      	push	{r4, lr}
 8011ff4:	6003      	str	r3, [r0, #0]
 8011ff6:	4b0f      	ldr	r3, [pc, #60]	; (8012034 <Display::Display()+0x44>)
 8011ff8:	4604      	mov	r4, r0
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	4a0e      	ldr	r2, [pc, #56]	; (8012038 <Display::Display()+0x48>)
 8011ffe:	6043      	str	r3, [r0, #4]
 8012000:	2321      	movs	r3, #33	; 0x21
 8012002:	7203      	strb	r3, [r0, #8]
 8012004:	4b0d      	ldr	r3, [pc, #52]	; (801203c <Display::Display()+0x4c>)
 8012006:	2102      	movs	r1, #2
 8012008:	60c3      	str	r3, [r0, #12]
 801200a:	2300      	movs	r3, #0
 801200c:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8012010:	8203      	strh	r3, [r0, #16]
 8012012:	4b0b      	ldr	r3, [pc, #44]	; (8012040 <Display::Display()+0x50>)
 8012014:	6018      	str	r0, [r3, #0]
 8012016:	f7ff ffc0 	bl	8011f9a <Display::Detect(display::Type)>
 801201a:	4620      	mov	r0, r4
 801201c:	f7ff ffa5 	bl	8011f6a <Display::Detect7Segment()>
 8012020:	69a3      	ldr	r3, [r4, #24]
 8012022:	b10b      	cbz	r3, 8012028 <Display::Display()+0x38>
 8012024:	f7f5 fec4 	bl	8007db0 <display::timeout::gpio_init()>
 8012028:	69a0      	ldr	r0, [r4, #24]
 801202a:	f7ff ff61 	bl	8011ef0 <Display::PrintInfo() [clone .isra.0]>
 801202e:	4620      	mov	r0, r4
 8012030:	bd10      	pop	{r4, pc}
 8012032:	bf00      	nop
 8012034:	20009d04 	andcs	r9, r0, r4, lsl #26
 8012038:	000493e0 	andeq	r9, r4, r0, ror #7
 801203c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8012040:	20009bf8 	strdcs	r9, [r0], -r8

08012044 <Ssd1306::~Ssd1306()>:
 8012044:	4770      	bx	lr

08012046 <Ssd1306::SetCursor(unsigned int)>:
 8012046:	4770      	bx	lr

08012048 <Ssd1306::PrintInfo()>:
 8012048:	b410      	push	{r4}
 801204a:	4906      	ldr	r1, [pc, #24]	; (8012064 <Ssd1306::PrintInfo()+0x1c>)
 801204c:	7c44      	ldrb	r4, [r0, #17]
 801204e:	7903      	ldrb	r3, [r0, #4]
 8012050:	7942      	ldrb	r2, [r0, #5]
 8012052:	4805      	ldr	r0, [pc, #20]	; (8012068 <Ssd1306::PrintInfo()+0x20>)
 8012054:	2c00      	cmp	r4, #0
 8012056:	bf08      	it	eq
 8012058:	4601      	moveq	r1, r0
 801205a:	4804      	ldr	r0, [pc, #16]	; (801206c <Ssd1306::PrintInfo()+0x24>)
 801205c:	bc10      	pop	{r4}
 801205e:	f000 be79 	b.w	8012d54 <printf>
 8012062:	bf00      	nop
 8012064:	08016f4a 	stmdaeq	r1, {r1, r3, r6, r8, r9, sl, fp, sp, lr}
 8012068:	08016f51 	stmdaeq	r1, {r0, r4, r6, r8, r9, sl, fp, sp, lr}
 801206c:	08016f59 	stmdaeq	r1, {r0, r3, r4, r6, r8, r9, sl, fp, sp, lr}

08012070 <Ssd1306::~Ssd1306()>:
 8012070:	b510      	push	{r4, lr}
 8012072:	4604      	mov	r4, r0
 8012074:	f000 fb7a 	bl	801276c <operator delete(void*)>
 8012078:	4620      	mov	r0, r4
 801207a:	bd10      	pop	{r4, pc}

0801207c <HAL_I2C::Setup()>:
 801207c:	b510      	push	{r4, lr}
 801207e:	4604      	mov	r4, r0
 8012080:	7800      	ldrb	r0, [r0, #0]
 8012082:	f001 fed9 	bl	8013e38 <gd32_i2c_set_address(unsigned char)>
 8012086:	6860      	ldr	r0, [r4, #4]
 8012088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801208c:	f001 becc 	b.w	8013e28 <gd32_i2c_set_baudrate(unsigned int)>

08012090 <Ssd1306::PutChar(int)>:
 8012090:	b510      	push	{r4, lr}
 8012092:	f1a1 0420 	sub.w	r4, r1, #32
 8012096:	2c5f      	cmp	r4, #95	; 0x5f
 8012098:	bf88      	it	hi
 801209a:	2400      	movhi	r4, #0
 801209c:	3008      	adds	r0, #8
 801209e:	f7ff ffed 	bl	801207c <HAL_I2C::Setup()>
 80120a2:	4804      	ldr	r0, [pc, #16]	; (80120b4 <Ssd1306::PutChar(int)+0x24>)
 80120a4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80120a8:	4420      	add	r0, r4
 80120aa:	2107      	movs	r1, #7
 80120ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120b0:	f001 bec8 	b.w	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 80120b4:	08016f6c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}

080120b8 <Ssd1306::PutString(char const*)>:
 80120b8:	b538      	push	{r3, r4, r5, lr}
 80120ba:	4605      	mov	r5, r0
 80120bc:	1e4c      	subs	r4, r1, #1
 80120be:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80120c2:	b901      	cbnz	r1, 80120c6 <Ssd1306::PutString(char const*)+0xe>
 80120c4:	bd38      	pop	{r3, r4, r5, pc}
 80120c6:	4628      	mov	r0, r5
 80120c8:	f7ff ffe2 	bl	8012090 <Ssd1306::PutChar(int)>
 80120cc:	e7f7      	b.n	80120be <Ssd1306::PutString(char const*)+0x6>

080120ce <Ssd1306::Text(char const*, unsigned int)>:
 80120ce:	b570      	push	{r4, r5, r6, lr}
 80120d0:	7903      	ldrb	r3, [r0, #4]
 80120d2:	4605      	mov	r5, r0
 80120d4:	460c      	mov	r4, r1
 80120d6:	4293      	cmp	r3, r2
 80120d8:	bf94      	ite	ls
 80120da:	18ce      	addls	r6, r1, r3
 80120dc:	188e      	addhi	r6, r1, r2
 80120de:	42b4      	cmp	r4, r6
 80120e0:	d100      	bne.n	80120e4 <Ssd1306::Text(char const*, unsigned int)+0x16>
 80120e2:	bd70      	pop	{r4, r5, r6, pc}
 80120e4:	4628      	mov	r0, r5
 80120e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ea:	f7ff ffd1 	bl	8012090 <Ssd1306::PutChar(int)>
 80120ee:	e7f6      	b.n	80120de <Ssd1306::Text(char const*, unsigned int)+0x10>

080120f0 <Ssd1306::InitMembers()>:
 80120f0:	7c03      	ldrb	r3, [r0, #16]
 80120f2:	b14b      	cbz	r3, 8012108 <Ssd1306::InitMembers()+0x18>
 80120f4:	3b01      	subs	r3, #1
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d909      	bls.n	801210e <Ssd1306::InitMembers()+0x1e>
 80120fa:	2308      	movs	r3, #8
 80120fc:	2204      	movs	r2, #4
 80120fe:	2115      	movs	r1, #21
 8012100:	7143      	strb	r3, [r0, #5]
 8012102:	7101      	strb	r1, [r0, #4]
 8012104:	6142      	str	r2, [r0, #20]
 8012106:	4770      	bx	lr
 8012108:	2308      	movs	r3, #8
 801210a:	461a      	mov	r2, r3
 801210c:	e7f7      	b.n	80120fe <Ssd1306::InitMembers()+0xe>
 801210e:	2304      	movs	r3, #4
 8012110:	e7fb      	b.n	801210a <Ssd1306::InitMembers()+0x1a>
	...

08012114 <Ssd1306::Ssd1306(TOledPanel)>:
 8012114:	4a08      	ldr	r2, [pc, #32]	; (8012138 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8012116:	b508      	push	{r3, lr}
 8012118:	6002      	str	r2, [r0, #0]
 801211a:	227f      	movs	r2, #127	; 0x7f
 801211c:	80c2      	strh	r2, [r0, #6]
 801211e:	223c      	movs	r2, #60	; 0x3c
 8012120:	7202      	strb	r2, [r0, #8]
 8012122:	4a06      	ldr	r2, [pc, #24]	; (801213c <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8012124:	7401      	strb	r1, [r0, #16]
 8012126:	60c2      	str	r2, [r0, #12]
 8012128:	2200      	movs	r2, #0
 801212a:	7442      	strb	r2, [r0, #17]
 801212c:	4a04      	ldr	r2, [pc, #16]	; (8012140 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 801212e:	6010      	str	r0, [r2, #0]
 8012130:	f7ff ffde 	bl	80120f0 <Ssd1306::InitMembers()>
 8012134:	bd08      	pop	{r3, pc}
 8012136:	bf00      	nop
 8012138:	08017244 	stmdaeq	r1, {r2, r6, r9, ip, sp, lr}
 801213c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8012140:	20009c84 	andcs	r9, r0, r4, lsl #25

08012144 <Ssd1306::SendCommand(unsigned char)>:
 8012144:	2300      	movs	r3, #0
 8012146:	b507      	push	{r0, r1, r2, lr}
 8012148:	3008      	adds	r0, #8
 801214a:	f88d 3004 	strb.w	r3, [sp, #4]
 801214e:	f88d 1005 	strb.w	r1, [sp, #5]
 8012152:	f7ff ff93 	bl	801207c <HAL_I2C::Setup()>
 8012156:	2102      	movs	r1, #2
 8012158:	a801      	add	r0, sp, #4
 801215a:	f001 fe73 	bl	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 801215e:	b003      	add	sp, #12
 8012160:	f85d fb04 	ldr.w	pc, [sp], #4

08012164 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8012164:	2914      	cmp	r1, #20
 8012166:	b570      	push	{r4, r5, r6, lr}
 8012168:	4605      	mov	r5, r0
 801216a:	4616      	mov	r6, r2
 801216c:	d81c      	bhi.n	80121a8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 801216e:	7943      	ldrb	r3, [r0, #5]
 8012170:	4293      	cmp	r3, r2
 8012172:	d919      	bls.n	80121a8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8012174:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012178:	7c43      	ldrb	r3, [r0, #17]
 801217a:	004c      	lsls	r4, r1, #1
 801217c:	b2e4      	uxtb	r4, r4
 801217e:	b10b      	cbz	r3, 8012184 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8012180:	3404      	adds	r4, #4
 8012182:	b2e4      	uxtb	r4, r4
 8012184:	4628      	mov	r0, r5
 8012186:	f004 010e 	and.w	r1, r4, #14
 801218a:	f7ff ffdb 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 801218e:	0921      	lsrs	r1, r4, #4
 8012190:	4628      	mov	r0, r5
 8012192:	f041 0110 	orr.w	r1, r1, #16
 8012196:	f7ff ffd5 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 801219a:	4628      	mov	r0, r5
 801219c:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 80121a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121a4:	f7ff bfce 	b.w	8012144 <Ssd1306::SendCommand(unsigned char)>
 80121a8:	bd70      	pop	{r4, r5, r6, pc}

080121aa <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 80121aa:	b570      	push	{r4, r5, r6, lr}
 80121ac:	4604      	mov	r4, r0
 80121ae:	4615      	mov	r5, r2
 80121b0:	461e      	mov	r6, r3
 80121b2:	b171      	cbz	r1, 80121d2 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80121b4:	7943      	ldrb	r3, [r0, #5]
 80121b6:	428b      	cmp	r3, r1
 80121b8:	d30b      	bcc.n	80121d2 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 80121ba:	3901      	subs	r1, #1
 80121bc:	b2ca      	uxtb	r2, r1
 80121be:	2100      	movs	r1, #0
 80121c0:	f7ff ffd0 	bl	8012164 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80121c4:	4632      	mov	r2, r6
 80121c6:	4629      	mov	r1, r5
 80121c8:	4620      	mov	r0, r4
 80121ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80121ce:	f7ff bf7e 	b.w	80120ce <Ssd1306::Text(char const*, unsigned int)>
 80121d2:	bd70      	pop	{r4, r5, r6, pc}

080121d4 <Ssd1306::ClearLine(unsigned char)>:
 80121d4:	b538      	push	{r3, r4, r5, lr}
 80121d6:	4605      	mov	r5, r0
 80121d8:	b1b9      	cbz	r1, 801220a <Ssd1306::ClearLine(unsigned char)+0x36>
 80121da:	7943      	ldrb	r3, [r0, #5]
 80121dc:	428b      	cmp	r3, r1
 80121de:	d314      	bcc.n	801220a <Ssd1306::ClearLine(unsigned char)+0x36>
 80121e0:	3901      	subs	r1, #1
 80121e2:	b2cc      	uxtb	r4, r1
 80121e4:	4622      	mov	r2, r4
 80121e6:	2100      	movs	r1, #0
 80121e8:	f7ff ffbc 	bl	8012164 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 80121ec:	f105 0008 	add.w	r0, r5, #8
 80121f0:	f7ff ff44 	bl	801207c <HAL_I2C::Setup()>
 80121f4:	2181      	movs	r1, #129	; 0x81
 80121f6:	4805      	ldr	r0, [pc, #20]	; (801220c <Ssd1306::ClearLine(unsigned char)+0x38>)
 80121f8:	f001 fe24 	bl	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 80121fc:	4622      	mov	r2, r4
 80121fe:	4628      	mov	r0, r5
 8012200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012204:	2100      	movs	r1, #0
 8012206:	f7ff bfad 	b.w	8012164 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 801220a:	bd38      	pop	{r3, r4, r5, pc}
 801220c:	20009bfc 	strdcs	r9, [r0], -ip

08012210 <Ssd1306::SetSleep(bool)>:
 8012210:	b111      	cbz	r1, 8012218 <Ssd1306::SetSleep(bool)+0x8>
 8012212:	21ae      	movs	r1, #174	; 0xae
 8012214:	f7ff bf96 	b.w	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012218:	21af      	movs	r1, #175	; 0xaf
 801221a:	e7fb      	b.n	8012214 <Ssd1306::SetSleep(bool)+0x4>

0801221c <Ssd1306::SetContrast(unsigned char)>:
 801221c:	b538      	push	{r3, r4, r5, lr}
 801221e:	4604      	mov	r4, r0
 8012220:	460d      	mov	r5, r1
 8012222:	7181      	strb	r1, [r0, #6]
 8012224:	2181      	movs	r1, #129	; 0x81
 8012226:	f7ff ff8d 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 801222a:	4629      	mov	r1, r5
 801222c:	4620      	mov	r0, r4
 801222e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012232:	f7ff bf87 	b.w	8012144 <Ssd1306::SendCommand(unsigned char)>

08012236 <Ssd1306::SetFlipVertically(bool)>:
 8012236:	b510      	push	{r4, lr}
 8012238:	4604      	mov	r4, r0
 801223a:	71c1      	strb	r1, [r0, #7]
 801223c:	b141      	cbz	r1, 8012250 <Ssd1306::SetFlipVertically(bool)+0x1a>
 801223e:	21c0      	movs	r1, #192	; 0xc0
 8012240:	f7ff ff80 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012244:	21a0      	movs	r1, #160	; 0xa0
 8012246:	4620      	mov	r0, r4
 8012248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801224c:	f7ff bf7a 	b.w	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012250:	21c8      	movs	r1, #200	; 0xc8
 8012252:	f7ff ff77 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012256:	21a1      	movs	r1, #161	; 0xa1
 8012258:	e7f5      	b.n	8012246 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

0801225c <Ssd1306::CheckSH1106()>:
 801225c:	b570      	push	{r4, r5, r6, lr}
 801225e:	4604      	mov	r4, r0
 8012260:	b086      	sub	sp, #24
 8012262:	2100      	movs	r1, #0
 8012264:	f7ff ff6e 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012268:	2190      	movs	r1, #144	; 0x90
 801226a:	4620      	mov	r0, r4
 801226c:	f7ff ff6a 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012270:	21b0      	movs	r1, #176	; 0xb0
 8012272:	4620      	mov	r0, r4
 8012274:	f7ff ff66 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012278:	4b22      	ldr	r3, [pc, #136]	; (8012304 <Ssd1306::CheckSH1106()+0xa8>)
 801227a:	f104 0608 	add.w	r6, r4, #8
 801227e:	6818      	ldr	r0, [r3, #0]
 8012280:	791b      	ldrb	r3, [r3, #4]
 8012282:	ad02      	add	r5, sp, #8
 8012284:	9002      	str	r0, [sp, #8]
 8012286:	4630      	mov	r0, r6
 8012288:	712b      	strb	r3, [r5, #4]
 801228a:	f7ff fef7 	bl	801207c <HAL_I2C::Setup()>
 801228e:	2105      	movs	r1, #5
 8012290:	4628      	mov	r0, r5
 8012292:	f001 fdd7 	bl	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 8012296:	2100      	movs	r1, #0
 8012298:	4620      	mov	r0, r4
 801229a:	f7ff ff53 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 801229e:	2190      	movs	r1, #144	; 0x90
 80122a0:	4620      	mov	r0, r4
 80122a2:	f7ff ff4f 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 80122a6:	21b0      	movs	r1, #176	; 0xb0
 80122a8:	4620      	mov	r0, r4
 80122aa:	f7ff ff4b 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 80122ae:	2300      	movs	r3, #0
 80122b0:	9304      	str	r3, [sp, #16]
 80122b2:	f88d 3014 	strb.w	r3, [sp, #20]
 80122b6:	2340      	movs	r3, #64	; 0x40
 80122b8:	4630      	mov	r0, r6
 80122ba:	f88d 3007 	strb.w	r3, [sp, #7]
 80122be:	f7ff fedd 	bl	801207c <HAL_I2C::Setup()>
 80122c2:	2101      	movs	r1, #1
 80122c4:	f10d 0007 	add.w	r0, sp, #7
 80122c8:	f001 fdbc 	bl	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 80122cc:	4630      	mov	r0, r6
 80122ce:	f7ff fed5 	bl	801207c <HAL_I2C::Setup()>
 80122d2:	2105      	movs	r1, #5
 80122d4:	a804      	add	r0, sp, #16
 80122d6:	f001 fe1b 	bl	8013f10 <gd32_i2c_read(char*, unsigned int)>
 80122da:	2201      	movs	r2, #1
 80122dc:	5cab      	ldrb	r3, [r5, r2]
 80122de:	a904      	add	r1, sp, #16
 80122e0:	3201      	adds	r2, #1
 80122e2:	4411      	add	r1, r2
 80122e4:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 80122e8:	428b      	cmp	r3, r1
 80122ea:	d006      	beq.n	80122fa <Ssd1306::CheckSH1106()+0x9e>
 80122ec:	1a5b      	subs	r3, r3, r1
 80122ee:	fab3 f383 	clz	r3, r3
 80122f2:	095b      	lsrs	r3, r3, #5
 80122f4:	7463      	strb	r3, [r4, #17]
 80122f6:	b006      	add	sp, #24
 80122f8:	bd70      	pop	{r4, r5, r6, pc}
 80122fa:	2a05      	cmp	r2, #5
 80122fc:	d1ee      	bne.n	80122dc <Ssd1306::CheckSH1106()+0x80>
 80122fe:	2300      	movs	r3, #0
 8012300:	e7f5      	b.n	80122ee <Ssd1306::CheckSH1106()+0x92>
 8012302:	bf00      	nop
 8012304:	08016f65 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, sl, fp, sp, lr}

08012308 <Ssd1306::Cls()>:
 8012308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801230c:	4604      	mov	r4, r0
 801230e:	2600      	movs	r6, #0
 8012310:	7c45      	ldrb	r5, [r0, #17]
 8012312:	00ad      	lsls	r5, r5, #2
 8012314:	b2ed      	uxtb	r5, r5
 8012316:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 801231a:	f045 0810 	orr.w	r8, r5, #16
 801231e:	b2ff      	uxtb	r7, r7
 8012320:	6963      	ldr	r3, [r4, #20]
 8012322:	4629      	mov	r1, r5
 8012324:	42b3      	cmp	r3, r6
 8012326:	4620      	mov	r0, r4
 8012328:	d80b      	bhi.n	8012342 <Ssd1306::Cls()+0x3a>
 801232a:	f7ff ff0b 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 801232e:	4641      	mov	r1, r8
 8012330:	4620      	mov	r0, r4
 8012332:	f7ff ff07 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012336:	4620      	mov	r0, r4
 8012338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801233c:	21b0      	movs	r1, #176	; 0xb0
 801233e:	f7ff bf01 	b.w	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012342:	f7ff feff 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012346:	4641      	mov	r1, r8
 8012348:	4620      	mov	r0, r4
 801234a:	f7ff fefb 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 801234e:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8012352:	4620      	mov	r0, r4
 8012354:	b2c9      	uxtb	r1, r1
 8012356:	f7ff fef5 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 801235a:	7c23      	ldrb	r3, [r4, #16]
 801235c:	b123      	cbz	r3, 8012368 <Ssd1306::Cls()+0x60>
 801235e:	3b01      	subs	r3, #1
 8012360:	2b01      	cmp	r3, #1
 8012362:	d901      	bls.n	8012368 <Ssd1306::Cls()+0x60>
 8012364:	3601      	adds	r6, #1
 8012366:	e7db      	b.n	8012320 <Ssd1306::Cls()+0x18>
 8012368:	f104 0008 	add.w	r0, r4, #8
 801236c:	f7ff fe86 	bl	801207c <HAL_I2C::Setup()>
 8012370:	4639      	mov	r1, r7
 8012372:	4802      	ldr	r0, [pc, #8]	; (801237c <Ssd1306::Cls()+0x74>)
 8012374:	f001 fd66 	bl	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 8012378:	e7f4      	b.n	8012364 <Ssd1306::Cls()+0x5c>
 801237a:	bf00      	nop
 801237c:	20009bfc 	strdcs	r9, [r0], -ip

08012380 <Ssd1306::Start()>:
 8012380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012382:	7a04      	ldrb	r4, [r0, #8]
 8012384:	68c6      	ldr	r6, [r0, #12]
 8012386:	4605      	mov	r5, r0
 8012388:	4620      	mov	r0, r4
 801238a:	f001 fd55 	bl	8013e38 <gd32_i2c_set_address(unsigned char)>
 801238e:	4630      	mov	r0, r6
 8012390:	f001 fd4a 	bl	8013e28 <gd32_i2c_set_baudrate(unsigned int)>
 8012394:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012398:	2b07      	cmp	r3, #7
 801239a:	d902      	bls.n	80123a2 <Ssd1306::Start()+0x22>
 801239c:	3c50      	subs	r4, #80	; 0x50
 801239e:	2c0f      	cmp	r4, #15
 80123a0:	d80f      	bhi.n	80123c2 <Ssd1306::Start()+0x42>
 80123a2:	2101      	movs	r1, #1
 80123a4:	f10d 0007 	add.w	r0, sp, #7
 80123a8:	f001 fdb2 	bl	8013f10 <gd32_i2c_read(char*, unsigned int)>
 80123ac:	fab0 f480 	clz	r4, r0
 80123b0:	0964      	lsrs	r4, r4, #5
 80123b2:	b35c      	cbz	r4, 801240c <Ssd1306::Start()+0x8c>
 80123b4:	7c2e      	ldrb	r6, [r5, #16]
 80123b6:	b14e      	cbz	r6, 80123cc <Ssd1306::Start()+0x4c>
 80123b8:	3e01      	subs	r6, #1
 80123ba:	2e01      	cmp	r6, #1
 80123bc:	d929      	bls.n	8012412 <Ssd1306::Start()+0x92>
 80123be:	2400      	movs	r4, #0
 80123c0:	e024      	b.n	801240c <Ssd1306::Start()+0x8c>
 80123c2:	2100      	movs	r1, #0
 80123c4:	4608      	mov	r0, r1
 80123c6:	f001 fd3d 	bl	8013e44 <gd32_i2c_write(char const*, unsigned int)>
 80123ca:	e7ef      	b.n	80123ac <Ssd1306::Start()+0x2c>
 80123cc:	4f16      	ldr	r7, [pc, #88]	; (8012428 <Ssd1306::Start()+0xa8>)
 80123ce:	4628      	mov	r0, r5
 80123d0:	f817 1b01 	ldrb.w	r1, [r7], #1
 80123d4:	3601      	adds	r6, #1
 80123d6:	f7ff feb5 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 80123da:	2e18      	cmp	r6, #24
 80123dc:	d1f7      	bne.n	80123ce <Ssd1306::Start()+0x4e>
 80123de:	2300      	movs	r3, #0
 80123e0:	4a12      	ldr	r2, [pc, #72]	; (801242c <Ssd1306::Start()+0xac>)
 80123e2:	4618      	mov	r0, r3
 80123e4:	4611      	mov	r1, r2
 80123e6:	3301      	adds	r3, #1
 80123e8:	2b86      	cmp	r3, #134	; 0x86
 80123ea:	f802 0b01 	strb.w	r0, [r2], #1
 80123ee:	d1fa      	bne.n	80123e6 <Ssd1306::Start()+0x66>
 80123f0:	2340      	movs	r3, #64	; 0x40
 80123f2:	4628      	mov	r0, r5
 80123f4:	700b      	strb	r3, [r1, #0]
 80123f6:	f7ff ff31 	bl	801225c <Ssd1306::CheckSH1106()>
 80123fa:	4628      	mov	r0, r5
 80123fc:	f7ff ff84 	bl	8012308 <Ssd1306::Cls()>
 8012400:	21af      	movs	r1, #175	; 0xaf
 8012402:	4628      	mov	r0, r5
 8012404:	f7ff fe9e 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012408:	2301      	movs	r3, #1
 801240a:	71eb      	strb	r3, [r5, #7]
 801240c:	4620      	mov	r0, r4
 801240e:	b003      	add	sp, #12
 8012410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012412:	2600      	movs	r6, #0
 8012414:	4f06      	ldr	r7, [pc, #24]	; (8012430 <Ssd1306::Start()+0xb0>)
 8012416:	4628      	mov	r0, r5
 8012418:	f817 1b01 	ldrb.w	r1, [r7], #1
 801241c:	3601      	adds	r6, #1
 801241e:	f7ff fe91 	bl	8012144 <Ssd1306::SendCommand(unsigned char)>
 8012422:	2e18      	cmp	r6, #24
 8012424:	d1f7      	bne.n	8012416 <Ssd1306::Start()+0x96>
 8012426:	e7da      	b.n	80123de <Ssd1306::Start()+0x5e>
 8012428:	08017224 	stmdaeq	r1, {r2, r5, r9, ip, sp, lr}
 801242c:	20009bfc 	strdcs	r9, [r0], -ip
 8012430:	0801720c 	stmdaeq	r1, {r2, r3, r9, ip, sp, lr}

08012434 <console_putc>:
 8012434:	f000 bde0 	b.w	8012ff8 <uart0_putc>

08012438 <console_puts>:
 8012438:	f000 bdfe 	b.w	8013038 <uart0_puts>

0801243c <console_set_fg_color>:
 801243c:	2807      	cmp	r0, #7
 801243e:	d810      	bhi.n	8012462 <console_set_fg_color+0x26>
 8012440:	e8df f000 	tbb	[pc, r0]
 8012444:	0b090704 	bleq	825405c <__exidx_end+0x23cce4>
 8012448:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8012414 <Ssd1306::Start()+0x94>
 801244c:	4806      	ldr	r0, [pc, #24]	; (8012468 <console_set_fg_color+0x2c>)
 801244e:	f000 bdf3 	b.w	8013038 <uart0_puts>
 8012452:	4806      	ldr	r0, [pc, #24]	; (801246c <console_set_fg_color+0x30>)
 8012454:	e7fb      	b.n	801244e <console_set_fg_color+0x12>
 8012456:	4806      	ldr	r0, [pc, #24]	; (8012470 <console_set_fg_color+0x34>)
 8012458:	e7f9      	b.n	801244e <console_set_fg_color+0x12>
 801245a:	4806      	ldr	r0, [pc, #24]	; (8012474 <console_set_fg_color+0x38>)
 801245c:	e7f7      	b.n	801244e <console_set_fg_color+0x12>
 801245e:	4806      	ldr	r0, [pc, #24]	; (8012478 <console_set_fg_color+0x3c>)
 8012460:	e7f5      	b.n	801244e <console_set_fg_color+0x12>
 8012462:	4806      	ldr	r0, [pc, #24]	; (801247c <console_set_fg_color+0x40>)
 8012464:	e7f3      	b.n	801244e <console_set_fg_color+0x12>
 8012466:	bf00      	nop
 8012468:	08017282 	stmdaeq	r1, {r1, r7, r9, ip, sp, lr}
 801246c:	08017288 	stmdaeq	r1, {r3, r7, r9, ip, sp, lr}
 8012470:	0801728e 	stmdaeq	r1, {r1, r2, r3, r7, r9, ip, sp, lr}
 8012474:	08017294 	stmdaeq	r1, {r2, r4, r7, r9, ip, sp, lr}
 8012478:	0801509a 	stmdaeq	r1, {r1, r3, r4, r7, ip, lr}
 801247c:	0801729a 	stmdaeq	r1, {r1, r3, r4, r7, r9, ip, sp, lr}

08012480 <console_error>:
 8012480:	b510      	push	{r4, lr}
 8012482:	4604      	mov	r4, r0
 8012484:	4805      	ldr	r0, [pc, #20]	; (801249c <console_error+0x1c>)
 8012486:	f000 fdd7 	bl	8013038 <uart0_puts>
 801248a:	4620      	mov	r0, r4
 801248c:	f000 fdd4 	bl	8013038 <uart0_puts>
 8012490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012494:	4802      	ldr	r0, [pc, #8]	; (80124a0 <console_error+0x20>)
 8012496:	f000 bdcf 	b.w	8013038 <uart0_puts>
 801249a:	bf00      	nop
 801249c:	08017288 	stmdaeq	r1, {r3, r7, r9, ip, sp, lr}
 80124a0:	0801509a 	stmdaeq	r1, {r1, r3, r4, r7, ip, lr}

080124a4 <console_status>:
 80124a4:	b510      	push	{r4, lr}
 80124a6:	460c      	mov	r4, r1
 80124a8:	b280      	uxth	r0, r0
 80124aa:	f7ff ffc7 	bl	801243c <console_set_fg_color>
 80124ae:	4807      	ldr	r0, [pc, #28]	; (80124cc <console_status+0x28>)
 80124b0:	f000 fdc2 	bl	8013038 <uart0_puts>
 80124b4:	4620      	mov	r0, r4
 80124b6:	f000 fdbf 	bl	8013038 <uart0_puts>
 80124ba:	200a      	movs	r0, #10
 80124bc:	f000 fd9c 	bl	8012ff8 <uart0_putc>
 80124c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124c4:	4802      	ldr	r0, [pc, #8]	; (80124d0 <console_status+0x2c>)
 80124c6:	f000 bdb7 	b.w	8013038 <uart0_puts>
 80124ca:	bf00      	nop
 80124cc:	0801727c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, ip, sp, lr}
 80124d0:	0801509a 	stmdaeq	r1, {r1, r3, r4, r7, ip, lr}

080124d4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 80124d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d8:	4617      	mov	r7, r2
 80124da:	461e      	mov	r6, r3
 80124dc:	4d14      	ldr	r5, [pc, #80]	; (8012530 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 80124de:	4b15      	ldr	r3, [pc, #84]	; (8012534 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 80124e0:	b086      	sub	sp, #24
 80124e2:	6018      	str	r0, [r3, #0]
 80124e4:	4604      	mov	r4, r0
 80124e6:	f105 0803 	add.w	r8, r5, #3
 80124ea:	2203      	movs	r2, #3
 80124ec:	4628      	mov	r0, r5
 80124ee:	f000 fa00 	bl	80128f2 <memmove>
 80124f2:	4639      	mov	r1, r7
 80124f4:	220b      	movs	r2, #11
 80124f6:	4640      	mov	r0, r8
 80124f8:	f000 f9fb 	bl	80128f2 <memmove>
 80124fc:	f105 030e 	add.w	r3, r5, #14
 8012500:	4631      	mov	r1, r6
 8012502:	2208      	movs	r2, #8
 8012504:	4618      	mov	r0, r3
 8012506:	f000 f9f4 	bl	80128f2 <memmove>
 801250a:	2308      	movs	r3, #8
 801250c:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8012510:	230b      	movs	r3, #11
 8012512:	9302      	str	r3, [sp, #8]
 8012514:	4b08      	ldr	r3, [pc, #32]	; (8012538 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8012516:	9005      	str	r0, [sp, #20]
 8012518:	e9cd 5300 	strd	r5, r3, [sp]
 801251c:	213f      	movs	r1, #63	; 0x3f
 801251e:	2303      	movs	r3, #3
 8012520:	4a06      	ldr	r2, [pc, #24]	; (801253c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8012522:	4807      	ldr	r0, [pc, #28]	; (8012540 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8012524:	f000 fc3e 	bl	8012da4 <snprintf>
 8012528:	4620      	mov	r0, r4
 801252a:	b006      	add	sp, #24
 801252c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012530:	20009c88 	andcs	r9, r0, r8, lsl #25
 8012534:	20009ce0 	andcs	r9, r0, r0, ror #25
 8012538:	080151fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, ip, lr}
 801253c:	080172a0 	stmdaeq	r1, {r5, r7, r9, ip, sp, lr}
 8012540:	20009c9e 	mulcs	r0, lr, ip

08012544 <FirmwareVersion::Print(char const*)>:
 8012544:	b510      	push	{r4, lr}
 8012546:	460c      	mov	r4, r1
 8012548:	4804      	ldr	r0, [pc, #16]	; (801255c <FirmwareVersion::Print(char const*)+0x18>)
 801254a:	f000 fc53 	bl	8012df4 <puts>
 801254e:	b124      	cbz	r4, 801255a <FirmwareVersion::Print(char const*)+0x16>
 8012550:	4620      	mov	r0, r4
 8012552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012556:	f000 bc4d 	b.w	8012df4 <puts>
 801255a:	bd10      	pop	{r4, pc}
 801255c:	20009c9e 	mulcs	r0, lr, ip

08012560 <LedBlink::LedBlink()>:
 8012560:	b538      	push	{r3, r4, r5, lr}
 8012562:	2205      	movs	r2, #5
 8012564:	2300      	movs	r3, #0
 8012566:	e9c0 3200 	strd	r3, r2, [r0]
 801256a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801256e:	6083      	str	r3, [r0, #8]
 8012570:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8012574:	6143      	str	r3, [r0, #20]
 8012576:	4b09      	ldr	r3, [pc, #36]	; (801259c <LedBlink::LedBlink()+0x3c>)
 8012578:	4d09      	ldr	r5, [pc, #36]	; (80125a0 <LedBlink::LedBlink()+0x40>)
 801257a:	4604      	mov	r4, r0
 801257c:	6018      	str	r0, [r3, #0]
 801257e:	f240 6004 	movw	r0, #1540	; 0x604
 8012582:	f000 ffd5 	bl	8013530 <rcu_periph_clock_enable>
 8012586:	4628      	mov	r0, r5
 8012588:	2301      	movs	r3, #1
 801258a:	2203      	movs	r2, #3
 801258c:	2110      	movs	r1, #16
 801258e:	f000 ff37 	bl	8013400 <gpio_init>
 8012592:	2301      	movs	r3, #1
 8012594:	4620      	mov	r0, r4
 8012596:	616b      	str	r3, [r5, #20]
 8012598:	bd38      	pop	{r3, r4, r5, pc}
 801259a:	bf00      	nop
 801259c:	20009ce4 	andcs	r9, r0, r4, ror #25
 80125a0:	40011000 	andmi	r1, r1, r0

080125a4 <LedBlink::SetMode(ledblink::Mode)>:
 80125a4:	6843      	ldr	r3, [r0, #4]
 80125a6:	428b      	cmp	r3, r1
 80125a8:	d02f      	beq.n	801260a <LedBlink::SetMode(ledblink::Mode)+0x66>
 80125aa:	6041      	str	r1, [r0, #4]
 80125ac:	2904      	cmp	r1, #4
 80125ae:	d822      	bhi.n	80125f6 <LedBlink::SetMode(ledblink::Mode)+0x52>
 80125b0:	e8df f001 	tbb	[pc, r1]
 80125b4:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 80125b8:	23ff001d 	mvnscs	r0, #29
 80125bc:	6003      	str	r3, [r0, #0]
 80125be:	2300      	movs	r3, #0
 80125c0:	2201      	movs	r2, #1
 80125c2:	60c3      	str	r3, [r0, #12]
 80125c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80125c8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80125cc:	611a      	str	r2, [r3, #16]
 80125ce:	6880      	ldr	r0, [r0, #8]
 80125d0:	b1d8      	cbz	r0, 801260a <LedBlink::SetMode(ledblink::Mode)+0x66>
 80125d2:	6803      	ldr	r3, [r0, #0]
 80125d4:	689b      	ldr	r3, [r3, #8]
 80125d6:	4718      	bx	r3
 80125d8:	2301      	movs	r3, #1
 80125da:	6003      	str	r3, [r0, #0]
 80125dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80125e0:	60c3      	str	r3, [r0, #12]
 80125e2:	e7f4      	b.n	80125ce <LedBlink::SetMode(ledblink::Mode)+0x2a>
 80125e4:	2303      	movs	r3, #3
 80125e6:	6003      	str	r3, [r0, #0]
 80125e8:	f240 134d 	movw	r3, #333	; 0x14d
 80125ec:	e7f8      	b.n	80125e0 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80125ee:	2305      	movs	r3, #5
 80125f0:	6003      	str	r3, [r0, #0]
 80125f2:	23c8      	movs	r3, #200	; 0xc8
 80125f4:	e7f4      	b.n	80125e0 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 80125f6:	2300      	movs	r3, #0
 80125f8:	2201      	movs	r2, #1
 80125fa:	6003      	str	r3, [r0, #0]
 80125fc:	60c3      	str	r3, [r0, #12]
 80125fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012602:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8012606:	615a      	str	r2, [r3, #20]
 8012608:	e7e1      	b.n	80125ce <LedBlink::SetMode(ledblink::Mode)+0x2a>
 801260a:	4770      	bx	lr

0801260c <Hardware::Hardware()>:
 801260c:	b570      	push	{r4, r5, r6, lr}
 801260e:	2400      	movs	r4, #0
 8012610:	4b26      	ldr	r3, [pc, #152]	; (80126ac <Hardware::Hardware()+0xa0>)
 8012612:	b090      	sub	sp, #64	; 0x40
 8012614:	6004      	str	r4, [r0, #0]
 8012616:	7104      	strb	r4, [r0, #4]
 8012618:	6018      	str	r0, [r3, #0]
 801261a:	4605      	mov	r5, r0
 801261c:	f7f4 ff70 	bl	8007500 <console_init>
 8012620:	f000 fd1a 	bl	8013058 <systick_config>
 8012624:	f001 fdf2 	bl	801420c <udelay_init()>
 8012628:	f001 fdee 	bl	8014208 <micros_init()>
 801262c:	f240 701b 	movw	r0, #1819	; 0x71b
 8012630:	f000 ff7e 	bl	8013530 <rcu_periph_clock_enable>
 8012634:	f240 701c 	movw	r0, #1820	; 0x71c
 8012638:	f000 ff7a 	bl	8013530 <rcu_periph_clock_enable>
 801263c:	4e1c      	ldr	r6, [pc, #112]	; (80126b0 <Hardware::Hardware()+0xa4>)
 801263e:	f000 ff6f 	bl	8013520 <pmu_backup_write_enable>
 8012642:	f000 fda7 	bl	8013194 <bkp_deinit>
 8012646:	4621      	mov	r1, r4
 8012648:	2002      	movs	r0, #2
 801264a:	f000 fdab 	bl	80131a4 <bkp_data_write>
 801264e:	f240 7004 	movw	r0, #1796	; 0x704
 8012652:	f000 ff6d 	bl	8013530 <rcu_periph_clock_enable>
 8012656:	4630      	mov	r0, r6
 8012658:	f001 f8c8 	bl	80137ec <timer_deinit>
 801265c:	236b      	movs	r3, #107	; 0x6b
 801265e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012666:	a903      	add	r1, sp, #12
 8012668:	4630      	mov	r0, r6
 801266a:	9305      	str	r3, [sp, #20]
 801266c:	f001 f920 	bl	80138b0 <timer_init>
 8012670:	4630      	mov	r0, r6
 8012672:	f001 f975 	bl	8013960 <timer_enable>
 8012676:	f001 fb49 	bl	8013d0c <gd32_adc_init()>
 801267a:	2213      	movs	r2, #19
 801267c:	2302      	movs	r3, #2
 801267e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012682:	237a      	movs	r3, #122	; 0x7a
 8012684:	a807      	add	r0, sp, #28
 8012686:	930c      	str	r3, [sp, #48]	; 0x30
 8012688:	e9cd 4408 	strd	r4, r4, [sp, #32]
 801268c:	9407      	str	r4, [sp, #28]
 801268e:	940f      	str	r4, [sp, #60]	; 0x3c
 8012690:	f000 fc08 	bl	8012ea4 <mktime>
 8012694:	4621      	mov	r1, r4
 8012696:	e9cd 0401 	strd	r0, r4, [sp, #4]
 801269a:	a801      	add	r0, sp, #4
 801269c:	f000 fc78 	bl	8012f90 <settimeofday>
 80126a0:	f001 fb8e 	bl	8013dc0 <gd32_i2c_begin()>
 80126a4:	4628      	mov	r0, r5
 80126a6:	b010      	add	sp, #64	; 0x40
 80126a8:	bd70      	pop	{r4, r5, r6, pc}
 80126aa:	bf00      	nop
 80126ac:	20009ce8 	andcs	r9, r0, r8, ror #25
 80126b0:	40001000 	andmi	r1, r0, r0

080126b4 <Hardware::GetUuid(unsigned char*)>:
 80126b4:	4a0c      	ldr	r2, [pc, #48]	; (80126e8 <Hardware::GetUuid(unsigned char*)+0x34>)
 80126b6:	b084      	sub	sp, #16
 80126b8:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 80126bc:	9300      	str	r3, [sp, #0]
 80126be:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 80126c2:	9001      	str	r0, [sp, #4]
 80126c4:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 80126c8:	4403      	add	r3, r0
 80126ca:	4413      	add	r3, r2
 80126cc:	9202      	str	r2, [sp, #8]
 80126ce:	466a      	mov	r2, sp
 80126d0:	9303      	str	r3, [sp, #12]
 80126d2:	1e4b      	subs	r3, r1, #1
 80126d4:	310f      	adds	r1, #15
 80126d6:	428b      	cmp	r3, r1
 80126d8:	d101      	bne.n	80126de <Hardware::GetUuid(unsigned char*)+0x2a>
 80126da:	b004      	add	sp, #16
 80126dc:	4770      	bx	lr
 80126de:	f812 0b01 	ldrb.w	r0, [r2], #1
 80126e2:	f803 0f01 	strb.w	r0, [r3, #1]!
 80126e6:	e7f6      	b.n	80126d6 <Hardware::GetUuid(unsigned char*)+0x22>
 80126e8:	1ffff000 	svcne	0x00fff000

080126ec <Hardware::SetTime(tm const*)>:
 80126ec:	2000      	movs	r0, #0
 80126ee:	4770      	bx	lr

080126f0 <Hardware::Reboot()>:
 80126f0:	b508      	push	{r3, lr}
 80126f2:	6803      	ldr	r3, [r0, #0]
 80126f4:	4604      	mov	r4, r0
 80126f6:	b153      	cbz	r3, 801270e <Hardware::Reboot()+0x1e>
 80126f8:	2300      	movs	r3, #0
 80126fa:	2104      	movs	r1, #4
 80126fc:	7103      	strb	r3, [r0, #4]
 80126fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012702:	f000 fe53 	bl	80133ac <fwdgt_config>
 8012706:	6820      	ldr	r0, [r4, #0]
 8012708:	6803      	ldr	r3, [r0, #0]
 801270a:	689b      	ldr	r3, [r3, #8]
 801270c:	4798      	blx	r3
 801270e:	2102      	movs	r1, #2
 8012710:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012714:	f000 fe4a 	bl	80133ac <fwdgt_config>
 8012718:	2801      	cmp	r0, #1
 801271a:	bf0c      	ite	eq
 801271c:	2301      	moveq	r3, #1
 801271e:	2300      	movne	r3, #0
 8012720:	7123      	strb	r3, [r4, #4]
 8012722:	d101      	bne.n	8012728 <Hardware::Reboot()+0x38>
 8012724:	f000 fe32 	bl	801338c <fwdgt_enable>
 8012728:	2208      	movs	r2, #8
 801272a:	4b0d      	ldr	r3, [pc, #52]	; (8012760 <Hardware::Reboot()+0x70>)
 801272c:	2501      	movs	r5, #1
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	480c      	ldr	r0, [pc, #48]	; (8012764 <Hardware::Reboot()+0x74>)
 8012732:	601a      	str	r2, [r3, #0]
 8012734:	227d      	movs	r2, #125	; 0x7d
 8012736:	490c      	ldr	r1, [pc, #48]	; (8012768 <Hardware::Reboot()+0x78>)
 8012738:	60da      	str	r2, [r3, #12]
 801273a:	68dc      	ldr	r4, [r3, #12]
 801273c:	b904      	cbnz	r4, 8012740 <Hardware::Reboot()+0x50>
 801273e:	e7fe      	b.n	801273e <Hardware::Reboot()+0x4e>
 8012740:	6802      	ldr	r2, [r0, #0]
 8012742:	695e      	ldr	r6, [r3, #20]
 8012744:	1b92      	subs	r2, r2, r6
 8012746:	4294      	cmp	r4, r2
 8012748:	d8f8      	bhi.n	801273c <Hardware::Reboot()+0x4c>
 801274a:	6802      	ldr	r2, [r0, #0]
 801274c:	615a      	str	r2, [r3, #20]
 801274e:	691a      	ldr	r2, [r3, #16]
 8012750:	2a01      	cmp	r2, #1
 8012752:	f082 0401 	eor.w	r4, r2, #1
 8012756:	611c      	str	r4, [r3, #16]
 8012758:	bf14      	ite	ne
 801275a:	610d      	strne	r5, [r1, #16]
 801275c:	614a      	streq	r2, [r1, #20]
 801275e:	e7ec      	b.n	801273a <Hardware::Reboot()+0x4a>
 8012760:	20009ce4 	andcs	r9, r0, r4, ror #25
 8012764:	20009d04 	andcs	r9, r0, r4, lsl #26
 8012768:	40011000 	andmi	r1, r1, r0

0801276c <operator delete(void*)>:
 801276c:	f000 b890 	b.w	8012890 <free>

08012770 <operator delete[](void*)>:
 8012770:	f000 b88e 	b.w	8012890 <free>

08012774 <operator new(unsigned int)>:
 8012774:	f000 b842 	b.w	80127fc <malloc>

08012778 <operator new[](unsigned int)>:
 8012778:	f000 b840 	b.w	80127fc <malloc>

0801277c <inet_aton>:
 801277c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801277e:	f04f 0c0a 	mov.w	ip, #10
 8012782:	2500      	movs	r5, #0
 8012784:	ae01      	add	r6, sp, #4
 8012786:	4603      	mov	r3, r0
 8012788:	2200      	movs	r2, #0
 801278a:	1d07      	adds	r7, r0, #4
 801278c:	e007      	b.n	801279e <inet_aton+0x22>
 801278e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012792:	2b09      	cmp	r3, #9
 8012794:	d820      	bhi.n	80127d8 <inet_aton+0x5c>
 8012796:	4603      	mov	r3, r0
 8012798:	fb0c 4202 	mla	r2, ip, r2, r4
 801279c:	3a30      	subs	r2, #48	; 0x30
 801279e:	4618      	mov	r0, r3
 80127a0:	f810 4b01 	ldrb.w	r4, [r0], #1
 80127a4:	2c2e      	cmp	r4, #46	; 0x2e
 80127a6:	d111      	bne.n	80127cc <inet_aton+0x50>
 80127a8:	3501      	adds	r5, #1
 80127aa:	2d03      	cmp	r5, #3
 80127ac:	f806 2b01 	strb.w	r2, [r6], #1
 80127b0:	d1e9      	bne.n	8012786 <inet_aton+0xa>
 80127b2:	2200      	movs	r2, #0
 80127b4:	250a      	movs	r5, #10
 80127b6:	1d1c      	adds	r4, r3, #4
 80127b8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80127bc:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 80127c0:	d10d      	bne.n	80127de <inet_aton+0x62>
 80127c2:	f88d 2007 	strb.w	r2, [sp, #7]
 80127c6:	b9b1      	cbnz	r1, 80127f6 <inet_aton+0x7a>
 80127c8:	2001      	movs	r0, #1
 80127ca:	e006      	b.n	80127da <inet_aton+0x5e>
 80127cc:	2c00      	cmp	r4, #0
 80127ce:	d0eb      	beq.n	80127a8 <inet_aton+0x2c>
 80127d0:	2c0a      	cmp	r4, #10
 80127d2:	d0e9      	beq.n	80127a8 <inet_aton+0x2c>
 80127d4:	42b8      	cmp	r0, r7
 80127d6:	d1da      	bne.n	801278e <inet_aton+0x12>
 80127d8:	2000      	movs	r0, #0
 80127da:	b003      	add	sp, #12
 80127dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127de:	280a      	cmp	r0, #10
 80127e0:	d0ef      	beq.n	80127c2 <inet_aton+0x46>
 80127e2:	42a3      	cmp	r3, r4
 80127e4:	d0f8      	beq.n	80127d8 <inet_aton+0x5c>
 80127e6:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 80127ea:	2e09      	cmp	r6, #9
 80127ec:	d8f4      	bhi.n	80127d8 <inet_aton+0x5c>
 80127ee:	fb05 0202 	mla	r2, r5, r2, r0
 80127f2:	3a30      	subs	r2, #48	; 0x30
 80127f4:	e7e0      	b.n	80127b8 <inet_aton+0x3c>
 80127f6:	9b01      	ldr	r3, [sp, #4]
 80127f8:	600b      	str	r3, [r1, #0]
 80127fa:	e7e5      	b.n	80127c8 <inet_aton+0x4c>

080127fc <malloc>:
 80127fc:	b538      	push	{r3, r4, r5, lr}
 80127fe:	4604      	mov	r4, r0
 8012800:	4601      	mov	r1, r0
 8012802:	481c      	ldr	r0, [pc, #112]	; (8012874 <malloc+0x78>)
 8012804:	f000 faa6 	bl	8012d54 <printf>
 8012808:	b17c      	cbz	r4, 801282a <malloc+0x2e>
 801280a:	4b1b      	ldr	r3, [pc, #108]	; (8012878 <malloc+0x7c>)
 801280c:	6818      	ldr	r0, [r3, #0]
 801280e:	b978      	cbnz	r0, 8012830 <malloc+0x34>
 8012810:	4a1a      	ldr	r2, [pc, #104]	; (801287c <malloc+0x80>)
 8012812:	f104 031b 	add.w	r3, r4, #27
 8012816:	6811      	ldr	r1, [r2, #0]
 8012818:	4819      	ldr	r0, [pc, #100]	; (8012880 <malloc+0x84>)
 801281a:	f023 030f 	bic.w	r3, r3, #15
 801281e:	440b      	add	r3, r1
 8012820:	4283      	cmp	r3, r0
 8012822:	d921      	bls.n	8012868 <malloc+0x6c>
 8012824:	4817      	ldr	r0, [pc, #92]	; (8012884 <malloc+0x88>)
 8012826:	f000 fa95 	bl	8012d54 <printf>
 801282a:	2500      	movs	r5, #0
 801282c:	4628      	mov	r0, r5
 801282e:	bd38      	pop	{r3, r4, r5, pc}
 8012830:	4284      	cmp	r4, r0
 8012832:	d80a      	bhi.n	801284a <malloc+0x4e>
 8012834:	685a      	ldr	r2, [r3, #4]
 8012836:	6899      	ldr	r1, [r3, #8]
 8012838:	3201      	adds	r2, #1
 801283a:	428a      	cmp	r2, r1
 801283c:	605a      	str	r2, [r3, #4]
 801283e:	d900      	bls.n	8012842 <malloc+0x46>
 8012840:	609a      	str	r2, [r3, #8]
 8012842:	68d9      	ldr	r1, [r3, #12]
 8012844:	b919      	cbnz	r1, 801284e <malloc+0x52>
 8012846:	4604      	mov	r4, r0
 8012848:	e7e2      	b.n	8012810 <malloc+0x14>
 801284a:	3310      	adds	r3, #16
 801284c:	e7de      	b.n	801280c <malloc+0x10>
 801284e:	4604      	mov	r4, r0
 8012850:	688a      	ldr	r2, [r1, #8]
 8012852:	60da      	str	r2, [r3, #12]
 8012854:	2300      	movs	r3, #0
 8012856:	f101 050c 	add.w	r5, r1, #12
 801285a:	608b      	str	r3, [r1, #8]
 801285c:	4622      	mov	r2, r4
 801285e:	462b      	mov	r3, r5
 8012860:	4809      	ldr	r0, [pc, #36]	; (8012888 <malloc+0x8c>)
 8012862:	f000 fa77 	bl	8012d54 <printf>
 8012866:	e7e1      	b.n	801282c <malloc+0x30>
 8012868:	6013      	str	r3, [r2, #0]
 801286a:	4b08      	ldr	r3, [pc, #32]	; (801288c <malloc+0x90>)
 801286c:	e9c1 3400 	strd	r3, r4, [r1]
 8012870:	e7f0      	b.n	8012854 <malloc+0x58>
 8012872:	bf00      	nop
 8012874:	080172c4 	stmdaeq	r1, {r2, r6, r7, r9, ip, sp, lr}
 8012878:	20000024 	andcs	r0, r0, r4, lsr #32
 801287c:	20000020 	andcs	r0, r0, r0, lsr #32
 8012880:	20016800 	andcs	r6, r1, r0, lsl #16
 8012884:	080172d0 	stmdaeq	r1, {r4, r6, r7, r9, ip, sp, lr}
 8012888:	080172ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, ip, sp, lr}
 801288c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08012890 <free>:
 8012890:	b538      	push	{r3, r4, r5, lr}
 8012892:	4604      	mov	r4, r0
 8012894:	b1c8      	cbz	r0, 80128ca <free+0x3a>
 8012896:	f1a0 050c 	sub.w	r5, r0, #12
 801289a:	4602      	mov	r2, r0
 801289c:	4629      	mov	r1, r5
 801289e:	480c      	ldr	r0, [pc, #48]	; (80128d0 <free+0x40>)
 80128a0:	f000 fa58 	bl	8012d54 <printf>
 80128a4:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80128a8:	4b0a      	ldr	r3, [pc, #40]	; (80128d4 <free+0x44>)
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d10d      	bne.n	80128ca <free+0x3a>
 80128ae:	4b0a      	ldr	r3, [pc, #40]	; (80128d8 <free+0x48>)
 80128b0:	681a      	ldr	r2, [r3, #0]
 80128b2:	b152      	cbz	r2, 80128ca <free+0x3a>
 80128b4:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80128b8:	4291      	cmp	r1, r2
 80128ba:	d107      	bne.n	80128cc <free+0x3c>
 80128bc:	68da      	ldr	r2, [r3, #12]
 80128be:	f844 2c04 	str.w	r2, [r4, #-4]
 80128c2:	685a      	ldr	r2, [r3, #4]
 80128c4:	60dd      	str	r5, [r3, #12]
 80128c6:	3a01      	subs	r2, #1
 80128c8:	605a      	str	r2, [r3, #4]
 80128ca:	bd38      	pop	{r3, r4, r5, pc}
 80128cc:	3310      	adds	r3, #16
 80128ce:	e7ef      	b.n	80128b0 <free+0x20>
 80128d0:	08017317 	stmdaeq	r1, {r0, r1, r2, r4, r8, r9, ip, sp, lr}
 80128d4:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 80128d8:	20000024 	andcs	r0, r0, r4, lsr #32

080128dc <memcpy>:
 80128dc:	b510      	push	{r4, lr}
 80128de:	1e43      	subs	r3, r0, #1
 80128e0:	440a      	add	r2, r1
 80128e2:	4291      	cmp	r1, r2
 80128e4:	d100      	bne.n	80128e8 <memcpy+0xc>
 80128e6:	bd10      	pop	{r4, pc}
 80128e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80128ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80128f0:	e7f7      	b.n	80128e2 <memcpy+0x6>

080128f2 <memmove>:
 80128f2:	4288      	cmp	r0, r1
 80128f4:	b510      	push	{r4, lr}
 80128f6:	eb01 0302 	add.w	r3, r1, r2
 80128fa:	d208      	bcs.n	801290e <memmove+0x1c>
 80128fc:	1e42      	subs	r2, r0, #1
 80128fe:	4299      	cmp	r1, r3
 8012900:	d100      	bne.n	8012904 <memmove+0x12>
 8012902:	bd10      	pop	{r4, pc}
 8012904:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012908:	f802 4f01 	strb.w	r4, [r2, #1]!
 801290c:	e7f7      	b.n	80128fe <memmove+0xc>
 801290e:	4601      	mov	r1, r0
 8012910:	4402      	add	r2, r0
 8012912:	428a      	cmp	r2, r1
 8012914:	d0f5      	beq.n	8012902 <memmove+0x10>
 8012916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801291a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801291e:	e7f8      	b.n	8012912 <memmove+0x20>

08012920 <memset>:
 8012920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012922:	b1c2      	cbz	r2, 8012956 <memset+0x36>
 8012924:	4603      	mov	r3, r0
 8012926:	b2c9      	uxtb	r1, r1
 8012928:	075c      	lsls	r4, r3, #29
 801292a:	d110      	bne.n	801294e <memset+0x2e>
 801292c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8012930:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8012934:	463d      	mov	r5, r7
 8012936:	461e      	mov	r6, r3
 8012938:	f022 0407 	bic.w	r4, r2, #7
 801293c:	441c      	add	r4, r3
 801293e:	42a6      	cmp	r6, r4
 8012940:	d10a      	bne.n	8012958 <memset+0x38>
 8012942:	4413      	add	r3, r2
 8012944:	429c      	cmp	r4, r3
 8012946:	d006      	beq.n	8012956 <memset+0x36>
 8012948:	f804 1b01 	strb.w	r1, [r4], #1
 801294c:	e7fa      	b.n	8012944 <memset+0x24>
 801294e:	3a01      	subs	r2, #1
 8012950:	f803 1b01 	strb.w	r1, [r3], #1
 8012954:	d1e8      	bne.n	8012928 <memset+0x8>
 8012956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012958:	f846 7b08 	str.w	r7, [r6], #8
 801295c:	f846 5c04 	str.w	r5, [r6, #-4]
 8012960:	e7ed      	b.n	801293e <memset+0x1e>
	...

08012964 <_xputch>:
 8012964:	4603      	mov	r3, r0
 8012966:	b410      	push	{r4}
 8012968:	4c08      	ldr	r4, [pc, #32]	; (801298c <_xputch+0x28>)
 801296a:	68da      	ldr	r2, [r3, #12]
 801296c:	4608      	mov	r0, r1
 801296e:	6821      	ldr	r1, [r4, #0]
 8012970:	3201      	adds	r2, #1
 8012972:	60da      	str	r2, [r3, #12]
 8012974:	b139      	cbz	r1, 8012986 <_xputch+0x22>
 8012976:	691b      	ldr	r3, [r3, #16]
 8012978:	429a      	cmp	r2, r3
 801297a:	da02      	bge.n	8012982 <_xputch+0x1e>
 801297c:	1c4b      	adds	r3, r1, #1
 801297e:	6023      	str	r3, [r4, #0]
 8012980:	7008      	strb	r0, [r1, #0]
 8012982:	bc10      	pop	{r4}
 8012984:	4770      	bx	lr
 8012986:	bc10      	pop	{r4}
 8012988:	f7ff bd54 	b.w	8012434 <console_putc>
 801298c:	20009cec 	andcs	r9, r0, ip, ror #25

08012990 <_format_int>:
 8012990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012994:	4698      	mov	r8, r3
 8012996:	b091      	sub	sp, #68	; 0x44
 8012998:	ea52 0308 	orrs.w	r3, r2, r8
 801299c:	4606      	mov	r6, r0
 801299e:	4617      	mov	r7, r2
 80129a0:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 80129a4:	d133      	bne.n	8012a0e <_format_int+0x7e>
 80129a6:	2330      	movs	r3, #48	; 0x30
 80129a8:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 80129ac:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80129b0:	6833      	ldr	r3, [r6, #0]
 80129b2:	07d8      	lsls	r0, r3, #31
 80129b4:	d507      	bpl.n	80129c6 <_format_int+0x36>
 80129b6:	466a      	mov	r2, sp
 80129b8:	2030      	movs	r0, #48	; 0x30
 80129ba:	6871      	ldr	r1, [r6, #4]
 80129bc:	1b2f      	subs	r7, r5, r4
 80129be:	428f      	cmp	r7, r1
 80129c0:	da01      	bge.n	80129c6 <_format_int+0x36>
 80129c2:	4294      	cmp	r4, r2
 80129c4:	d839      	bhi.n	8012a3a <_format_int+0xaa>
 80129c6:	0699      	lsls	r1, r3, #26
 80129c8:	d507      	bpl.n	80129da <_format_int+0x4a>
 80129ca:	466a      	mov	r2, sp
 80129cc:	2030      	movs	r0, #48	; 0x30
 80129ce:	68b1      	ldr	r1, [r6, #8]
 80129d0:	1b2f      	subs	r7, r5, r4
 80129d2:	428f      	cmp	r7, r1
 80129d4:	da01      	bge.n	80129da <_format_int+0x4a>
 80129d6:	4294      	cmp	r4, r2
 80129d8:	d832      	bhi.n	8012a40 <_format_int+0xb0>
 80129da:	071a      	lsls	r2, r3, #28
 80129dc:	bf44      	itt	mi
 80129de:	222d      	movmi	r2, #45	; 0x2d
 80129e0:	f804 2901 	strbmi.w	r2, [r4], #-1
 80129e4:	065b      	lsls	r3, r3, #25
 80129e6:	d407      	bmi.n	80129f8 <_format_int+0x68>
 80129e8:	466b      	mov	r3, sp
 80129ea:	2120      	movs	r1, #32
 80129ec:	68b2      	ldr	r2, [r6, #8]
 80129ee:	1b28      	subs	r0, r5, r4
 80129f0:	4290      	cmp	r0, r2
 80129f2:	da01      	bge.n	80129f8 <_format_int+0x68>
 80129f4:	429c      	cmp	r4, r3
 80129f6:	d826      	bhi.n	8012a46 <_format_int+0xb6>
 80129f8:	1b2d      	subs	r5, r5, r4
 80129fa:	3401      	adds	r4, #1
 80129fc:	ab10      	add	r3, sp, #64	; 0x40
 80129fe:	429c      	cmp	r4, r3
 8012a00:	d324      	bcc.n	8012a4c <_format_int+0xbc>
 8012a02:	68b3      	ldr	r3, [r6, #8]
 8012a04:	42ab      	cmp	r3, r5
 8012a06:	dc27      	bgt.n	8012a58 <_format_int+0xc8>
 8012a08:	b011      	add	sp, #68	; 0x44
 8012a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a0e:	462c      	mov	r4, r5
 8012a10:	46e9      	mov	r9, sp
 8012a12:	4638      	mov	r0, r7
 8012a14:	4641      	mov	r1, r8
 8012a16:	220a      	movs	r2, #10
 8012a18:	2300      	movs	r3, #0
 8012a1a:	f7f5 f863 	bl	8007ae4 <__aeabi_uldivmod>
 8012a1e:	3230      	adds	r2, #48	; 0x30
 8012a20:	f804 2901 	strb.w	r2, [r4], #-1
 8012a24:	463a      	mov	r2, r7
 8012a26:	4643      	mov	r3, r8
 8012a28:	2a0a      	cmp	r2, #10
 8012a2a:	f173 0300 	sbcs.w	r3, r3, #0
 8012a2e:	4607      	mov	r7, r0
 8012a30:	4688      	mov	r8, r1
 8012a32:	d3bd      	bcc.n	80129b0 <_format_int+0x20>
 8012a34:	454c      	cmp	r4, r9
 8012a36:	d1ec      	bne.n	8012a12 <_format_int+0x82>
 8012a38:	e7ba      	b.n	80129b0 <_format_int+0x20>
 8012a3a:	f804 0901 	strb.w	r0, [r4], #-1
 8012a3e:	e7bd      	b.n	80129bc <_format_int+0x2c>
 8012a40:	f804 0901 	strb.w	r0, [r4], #-1
 8012a44:	e7c4      	b.n	80129d0 <_format_int+0x40>
 8012a46:	f804 1901 	strb.w	r1, [r4], #-1
 8012a4a:	e7d0      	b.n	80129ee <_format_int+0x5e>
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a52:	f7ff ff87 	bl	8012964 <_xputch>
 8012a56:	e7d1      	b.n	80129fc <_format_int+0x6c>
 8012a58:	2120      	movs	r1, #32
 8012a5a:	4630      	mov	r0, r6
 8012a5c:	f7ff ff82 	bl	8012964 <_xputch>
 8012a60:	3501      	adds	r5, #1
 8012a62:	e7ce      	b.n	8012a02 <_format_int+0x72>

08012a64 <_format_hex>:
 8012a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a66:	b091      	sub	sp, #68	; 0x44
 8012a68:	4606      	mov	r6, r0
 8012a6a:	6804      	ldr	r4, [r0, #0]
 8012a6c:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8012a70:	bb61      	cbnz	r1, 8012acc <_format_hex+0x68>
 8012a72:	2330      	movs	r3, #48	; 0x30
 8012a74:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8012a78:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8012a7c:	07e5      	lsls	r5, r4, #31
 8012a7e:	d507      	bpl.n	8012a90 <_format_hex+0x2c>
 8012a80:	4669      	mov	r1, sp
 8012a82:	2530      	movs	r5, #48	; 0x30
 8012a84:	6870      	ldr	r0, [r6, #4]
 8012a86:	1ad7      	subs	r7, r2, r3
 8012a88:	4287      	cmp	r7, r0
 8012a8a:	da01      	bge.n	8012a90 <_format_hex+0x2c>
 8012a8c:	428b      	cmp	r3, r1
 8012a8e:	d831      	bhi.n	8012af4 <_format_hex+0x90>
 8012a90:	06a0      	lsls	r0, r4, #26
 8012a92:	d507      	bpl.n	8012aa4 <_format_hex+0x40>
 8012a94:	4669      	mov	r1, sp
 8012a96:	2530      	movs	r5, #48	; 0x30
 8012a98:	68b0      	ldr	r0, [r6, #8]
 8012a9a:	1ad7      	subs	r7, r2, r3
 8012a9c:	4287      	cmp	r7, r0
 8012a9e:	da01      	bge.n	8012aa4 <_format_hex+0x40>
 8012aa0:	428b      	cmp	r3, r1
 8012aa2:	d82a      	bhi.n	8012afa <_format_hex+0x96>
 8012aa4:	0661      	lsls	r1, r4, #25
 8012aa6:	d407      	bmi.n	8012ab8 <_format_hex+0x54>
 8012aa8:	4669      	mov	r1, sp
 8012aaa:	2420      	movs	r4, #32
 8012aac:	68b0      	ldr	r0, [r6, #8]
 8012aae:	1ad5      	subs	r5, r2, r3
 8012ab0:	4285      	cmp	r5, r0
 8012ab2:	da01      	bge.n	8012ab8 <_format_hex+0x54>
 8012ab4:	428b      	cmp	r3, r1
 8012ab6:	d823      	bhi.n	8012b00 <_format_hex+0x9c>
 8012ab8:	1ad5      	subs	r5, r2, r3
 8012aba:	1c5c      	adds	r4, r3, #1
 8012abc:	ab10      	add	r3, sp, #64	; 0x40
 8012abe:	429c      	cmp	r4, r3
 8012ac0:	d321      	bcc.n	8012b06 <_format_hex+0xa2>
 8012ac2:	68b3      	ldr	r3, [r6, #8]
 8012ac4:	429d      	cmp	r5, r3
 8012ac6:	db24      	blt.n	8012b12 <_format_hex+0xae>
 8012ac8:	b011      	add	sp, #68	; 0x44
 8012aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012acc:	f014 0f02 	tst.w	r4, #2
 8012ad0:	bf0c      	ite	eq
 8012ad2:	2757      	moveq	r7, #87	; 0x57
 8012ad4:	2737      	movne	r7, #55	; 0x37
 8012ad6:	4613      	mov	r3, r2
 8012ad8:	466d      	mov	r5, sp
 8012ada:	f001 000f 	and.w	r0, r1, #15
 8012ade:	2809      	cmp	r0, #9
 8012ae0:	bf94      	ite	ls
 8012ae2:	3030      	addls	r0, #48	; 0x30
 8012ae4:	19c0      	addhi	r0, r0, r7
 8012ae6:	0909      	lsrs	r1, r1, #4
 8012ae8:	f803 0901 	strb.w	r0, [r3], #-1
 8012aec:	d0c6      	beq.n	8012a7c <_format_hex+0x18>
 8012aee:	42ab      	cmp	r3, r5
 8012af0:	d1f3      	bne.n	8012ada <_format_hex+0x76>
 8012af2:	e7c3      	b.n	8012a7c <_format_hex+0x18>
 8012af4:	f803 5901 	strb.w	r5, [r3], #-1
 8012af8:	e7c5      	b.n	8012a86 <_format_hex+0x22>
 8012afa:	f803 5901 	strb.w	r5, [r3], #-1
 8012afe:	e7cc      	b.n	8012a9a <_format_hex+0x36>
 8012b00:	f803 4901 	strb.w	r4, [r3], #-1
 8012b04:	e7d3      	b.n	8012aae <_format_hex+0x4a>
 8012b06:	4630      	mov	r0, r6
 8012b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b0c:	f7ff ff2a 	bl	8012964 <_xputch>
 8012b10:	e7d4      	b.n	8012abc <_format_hex+0x58>
 8012b12:	2120      	movs	r1, #32
 8012b14:	4630      	mov	r0, r6
 8012b16:	f7ff ff25 	bl	8012964 <_xputch>
 8012b1a:	3501      	adds	r5, #1
 8012b1c:	e7d1      	b.n	8012ac2 <_format_hex+0x5e>
	...

08012b20 <_vprintf>:
 8012b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b24:	2700      	movs	r7, #0
 8012b26:	460b      	mov	r3, r1
 8012b28:	4614      	mov	r4, r2
 8012b2a:	f04f 080a 	mov.w	r8, #10
 8012b2e:	b086      	sub	sp, #24
 8012b30:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8012b34:	7819      	ldrb	r1, [r3, #0]
 8012b36:	b919      	cbnz	r1, 8012b40 <_vprintf+0x20>
 8012b38:	9804      	ldr	r0, [sp, #16]
 8012b3a:	b006      	add	sp, #24
 8012b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b40:	2925      	cmp	r1, #37	; 0x25
 8012b42:	f103 0601 	add.w	r6, r3, #1
 8012b46:	d004      	beq.n	8012b52 <_vprintf+0x32>
 8012b48:	a801      	add	r0, sp, #4
 8012b4a:	f7ff ff0b 	bl	8012964 <_xputch>
 8012b4e:	4633      	mov	r3, r6
 8012b50:	e7f0      	b.n	8012b34 <_vprintf+0x14>
 8012b52:	785a      	ldrb	r2, [r3, #1]
 8012b54:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8012b58:	2a30      	cmp	r2, #48	; 0x30
 8012b5a:	9703      	str	r7, [sp, #12]
 8012b5c:	d126      	bne.n	8012bac <_vprintf+0x8c>
 8012b5e:	2220      	movs	r2, #32
 8012b60:	9201      	str	r2, [sp, #4]
 8012b62:	1c9e      	adds	r6, r3, #2
 8012b64:	2200      	movs	r2, #0
 8012b66:	4635      	mov	r5, r6
 8012b68:	4613      	mov	r3, r2
 8012b6a:	7829      	ldrb	r1, [r5, #0]
 8012b6c:	462e      	mov	r6, r5
 8012b6e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8012b72:	2809      	cmp	r0, #9
 8012b74:	f105 0501 	add.w	r5, r5, #1
 8012b78:	d91c      	bls.n	8012bb4 <_vprintf+0x94>
 8012b7a:	b12a      	cbz	r2, 8012b88 <_vprintf+0x68>
 8012b7c:	9303      	str	r3, [sp, #12]
 8012b7e:	b11b      	cbz	r3, 8012b88 <_vprintf+0x68>
 8012b80:	9b01      	ldr	r3, [sp, #4]
 8012b82:	f043 0310 	orr.w	r3, r3, #16
 8012b86:	9301      	str	r3, [sp, #4]
 8012b88:	292e      	cmp	r1, #46	; 0x2e
 8012b8a:	d122      	bne.n	8012bd2 <_vprintf+0xb2>
 8012b8c:	7873      	ldrb	r3, [r6, #1]
 8012b8e:	2b2a      	cmp	r3, #42	; 0x2a
 8012b90:	d014      	beq.n	8012bbc <_vprintf+0x9c>
 8012b92:	2100      	movs	r1, #0
 8012b94:	460a      	mov	r2, r1
 8012b96:	1c70      	adds	r0, r6, #1
 8012b98:	7803      	ldrb	r3, [r0, #0]
 8012b9a:	4606      	mov	r6, r0
 8012b9c:	3b30      	subs	r3, #48	; 0x30
 8012b9e:	2b09      	cmp	r3, #9
 8012ba0:	f100 0001 	add.w	r0, r0, #1
 8012ba4:	d930      	bls.n	8012c08 <_vprintf+0xe8>
 8012ba6:	b181      	cbz	r1, 8012bca <_vprintf+0xaa>
 8012ba8:	9202      	str	r2, [sp, #8]
 8012baa:	e00e      	b.n	8012bca <_vprintf+0xaa>
 8012bac:	2a2d      	cmp	r2, #45	; 0x2d
 8012bae:	d1d9      	bne.n	8012b64 <_vprintf+0x44>
 8012bb0:	2240      	movs	r2, #64	; 0x40
 8012bb2:	e7d5      	b.n	8012b60 <_vprintf+0x40>
 8012bb4:	2201      	movs	r2, #1
 8012bb6:	fb08 0303 	mla	r3, r8, r3, r0
 8012bba:	e7d6      	b.n	8012b6a <_vprintf+0x4a>
 8012bbc:	f854 3b04 	ldr.w	r3, [r4], #4
 8012bc0:	3602      	adds	r6, #2
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	bfb8      	it	lt
 8012bc6:	425b      	neglt	r3, r3
 8012bc8:	9302      	str	r3, [sp, #8]
 8012bca:	9b01      	ldr	r3, [sp, #4]
 8012bcc:	f043 0301 	orr.w	r3, r3, #1
 8012bd0:	9301      	str	r3, [sp, #4]
 8012bd2:	7833      	ldrb	r3, [r6, #0]
 8012bd4:	2b6c      	cmp	r3, #108	; 0x6c
 8012bd6:	bf04      	itt	eq
 8012bd8:	9b01      	ldreq	r3, [sp, #4]
 8012bda:	3601      	addeq	r6, #1
 8012bdc:	7831      	ldrb	r1, [r6, #0]
 8012bde:	bf04      	itt	eq
 8012be0:	f043 0304 	orreq.w	r3, r3, #4
 8012be4:	9301      	streq	r3, [sp, #4]
 8012be6:	2978      	cmp	r1, #120	; 0x78
 8012be8:	d8ae      	bhi.n	8012b48 <_vprintf+0x28>
 8012bea:	296f      	cmp	r1, #111	; 0x6f
 8012bec:	d810      	bhi.n	8012c10 <_vprintf+0xf0>
 8012bee:	2963      	cmp	r1, #99	; 0x63
 8012bf0:	d048      	beq.n	8012c84 <_vprintf+0x164>
 8012bf2:	d827      	bhi.n	8012c44 <_vprintf+0x124>
 8012bf4:	2958      	cmp	r1, #88	; 0x58
 8012bf6:	d1a7      	bne.n	8012b48 <_vprintf+0x28>
 8012bf8:	9b01      	ldr	r3, [sp, #4]
 8012bfa:	f043 0302 	orr.w	r3, r3, #2
 8012bfe:	9301      	str	r3, [sp, #4]
 8012c00:	4625      	mov	r5, r4
 8012c02:	f855 1b04 	ldr.w	r1, [r5], #4
 8012c06:	e056      	b.n	8012cb6 <_vprintf+0x196>
 8012c08:	2101      	movs	r1, #1
 8012c0a:	fb08 3202 	mla	r2, r8, r2, r3
 8012c0e:	e7c3      	b.n	8012b98 <_vprintf+0x78>
 8012c10:	f1a1 0370 	sub.w	r3, r1, #112	; 0x70
 8012c14:	2b08      	cmp	r3, #8
 8012c16:	d897      	bhi.n	8012b48 <_vprintf+0x28>
 8012c18:	a201      	add	r2, pc, #4	; (adr r2, 8012c20 <_vprintf+0x100>)
 8012c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c1e:	bf00      	nop
 8012c20:	08012c97 	stmdaeq	r1, {r0, r1, r2, r4, r7, sl, fp, sp}
 8012c24:	08012b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, sp}
 8012c28:	08012b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, sp}
 8012c2c:	08012cbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, sl, fp, sp}
 8012c30:	08012b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, sp}
 8012c34:	08012d33 	stmdaeq	r1, {r0, r1, r4, r5, r8, sl, fp, sp}
 8012c38:	08012b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, sp}
 8012c3c:	08012b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, sp}
 8012c40:	08012c01 	stmdaeq	r1, {r0, sl, fp, sp}
 8012c44:	2964      	cmp	r1, #100	; 0x64
 8012c46:	d002      	beq.n	8012c4e <_vprintf+0x12e>
 8012c48:	2969      	cmp	r1, #105	; 0x69
 8012c4a:	f47f af7d 	bne.w	8012b48 <_vprintf+0x28>
 8012c4e:	9901      	ldr	r1, [sp, #4]
 8012c50:	074d      	lsls	r5, r1, #29
 8012c52:	bf51      	iteee	pl
 8012c54:	4625      	movpl	r5, r4
 8012c56:	3407      	addmi	r4, #7
 8012c58:	f024 0407 	bicmi.w	r4, r4, #7
 8012c5c:	4625      	movmi	r5, r4
 8012c5e:	bf55      	itete	pl
 8012c60:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8012c64:	6863      	ldrmi	r3, [r4, #4]
 8012c66:	17d3      	asrpl	r3, r2, #31
 8012c68:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	da05      	bge.n	8012c7c <_vprintf+0x15c>
 8012c70:	f041 0108 	orr.w	r1, r1, #8
 8012c74:	4252      	negs	r2, r2
 8012c76:	9101      	str	r1, [sp, #4]
 8012c78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8012c7c:	a801      	add	r0, sp, #4
 8012c7e:	f7ff fe87 	bl	8012990 <_format_int>
 8012c82:	e005      	b.n	8012c90 <_vprintf+0x170>
 8012c84:	4625      	mov	r5, r4
 8012c86:	a801      	add	r0, sp, #4
 8012c88:	f855 1b04 	ldr.w	r1, [r5], #4
 8012c8c:	f7ff fe6a 	bl	8012964 <_xputch>
 8012c90:	462c      	mov	r4, r5
 8012c92:	3601      	adds	r6, #1
 8012c94:	e75b      	b.n	8012b4e <_vprintf+0x2e>
 8012c96:	2308      	movs	r3, #8
 8012c98:	4625      	mov	r5, r4
 8012c9a:	9303      	str	r3, [sp, #12]
 8012c9c:	2320      	movs	r3, #32
 8012c9e:	2130      	movs	r1, #48	; 0x30
 8012ca0:	f855 4b04 	ldr.w	r4, [r5], #4
 8012ca4:	a801      	add	r0, sp, #4
 8012ca6:	9301      	str	r3, [sp, #4]
 8012ca8:	f7ff fe5c 	bl	8012964 <_xputch>
 8012cac:	2178      	movs	r1, #120	; 0x78
 8012cae:	a801      	add	r0, sp, #4
 8012cb0:	f7ff fe58 	bl	8012964 <_xputch>
 8012cb4:	4621      	mov	r1, r4
 8012cb6:	a801      	add	r0, sp, #4
 8012cb8:	f7ff fed4 	bl	8012a64 <_format_hex>
 8012cbc:	e7e8      	b.n	8012c90 <_vprintf+0x170>
 8012cbe:	4625      	mov	r5, r4
 8012cc0:	2400      	movs	r4, #0
 8012cc2:	f855 9b04 	ldr.w	r9, [r5], #4
 8012cc6:	f819 3004 	ldrb.w	r3, [r9, r4]
 8012cca:	b993      	cbnz	r3, 8012cf2 <_vprintf+0x1d2>
 8012ccc:	9b01      	ldr	r3, [sp, #4]
 8012cce:	07d9      	lsls	r1, r3, #31
 8012cd0:	d503      	bpl.n	8012cda <_vprintf+0x1ba>
 8012cd2:	9b02      	ldr	r3, [sp, #8]
 8012cd4:	429c      	cmp	r4, r3
 8012cd6:	bfa8      	it	ge
 8012cd8:	461c      	movge	r4, r3
 8012cda:	9b01      	ldr	r3, [sp, #4]
 8012cdc:	f104 0a01 	add.w	sl, r4, #1
 8012ce0:	065a      	lsls	r2, r3, #25
 8012ce2:	d403      	bmi.n	8012cec <_vprintf+0x1cc>
 8012ce4:	9b03      	ldr	r3, [sp, #12]
 8012ce6:	429c      	cmp	r4, r3
 8012ce8:	db05      	blt.n	8012cf6 <_vprintf+0x1d6>
 8012cea:	4654      	mov	r4, sl
 8012cec:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8012cf0:	e00d      	b.n	8012d0e <_vprintf+0x1ee>
 8012cf2:	3401      	adds	r4, #1
 8012cf4:	e7e7      	b.n	8012cc6 <_vprintf+0x1a6>
 8012cf6:	2120      	movs	r1, #32
 8012cf8:	a801      	add	r0, sp, #4
 8012cfa:	f7ff fe33 	bl	8012964 <_xputch>
 8012cfe:	4654      	mov	r4, sl
 8012d00:	e7eb      	b.n	8012cda <_vprintf+0x1ba>
 8012d02:	a801      	add	r0, sp, #4
 8012d04:	f7ff fe2e 	bl	8012964 <_xputch>
 8012d08:	9b02      	ldr	r3, [sp, #8]
 8012d0a:	3b01      	subs	r3, #1
 8012d0c:	9302      	str	r3, [sp, #8]
 8012d0e:	9b01      	ldr	r3, [sp, #4]
 8012d10:	07db      	lsls	r3, r3, #31
 8012d12:	d501      	bpl.n	8012d18 <_vprintf+0x1f8>
 8012d14:	9b02      	ldr	r3, [sp, #8]
 8012d16:	b11b      	cbz	r3, 8012d20 <_vprintf+0x200>
 8012d18:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8012d1c:	2900      	cmp	r1, #0
 8012d1e:	d1f0      	bne.n	8012d02 <_vprintf+0x1e2>
 8012d20:	9b03      	ldr	r3, [sp, #12]
 8012d22:	42a3      	cmp	r3, r4
 8012d24:	ddb4      	ble.n	8012c90 <_vprintf+0x170>
 8012d26:	2120      	movs	r1, #32
 8012d28:	a801      	add	r0, sp, #4
 8012d2a:	f7ff fe1b 	bl	8012964 <_xputch>
 8012d2e:	3401      	adds	r4, #1
 8012d30:	e7f6      	b.n	8012d20 <_vprintf+0x200>
 8012d32:	9b01      	ldr	r3, [sp, #4]
 8012d34:	f013 0304 	ands.w	r3, r3, #4
 8012d38:	bf1d      	ittte	ne
 8012d3a:	3407      	addne	r4, #7
 8012d3c:	f024 0407 	bicne.w	r4, r4, #7
 8012d40:	4625      	movne	r5, r4
 8012d42:	4625      	moveq	r5, r4
 8012d44:	bf1a      	itte	ne
 8012d46:	f855 2b08 	ldrne.w	r2, [r5], #8
 8012d4a:	6863      	ldrne	r3, [r4, #4]
 8012d4c:	f855 2b04 	ldreq.w	r2, [r5], #4
 8012d50:	e794      	b.n	8012c7c <_vprintf+0x15c>
 8012d52:	bf00      	nop

08012d54 <printf>:
 8012d54:	b40f      	push	{r0, r1, r2, r3}
 8012d56:	b507      	push	{r0, r1, r2, lr}
 8012d58:	aa04      	add	r2, sp, #16
 8012d5a:	f852 1b04 	ldr.w	r1, [r2], #4
 8012d5e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012d62:	9201      	str	r2, [sp, #4]
 8012d64:	f7ff fedc 	bl	8012b20 <_vprintf>
 8012d68:	b003      	add	sp, #12
 8012d6a:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d6e:	b004      	add	sp, #16
 8012d70:	4770      	bx	lr
	...

08012d74 <sprintf>:
 8012d74:	b40e      	push	{r1, r2, r3}
 8012d76:	b517      	push	{r0, r1, r2, r4, lr}
 8012d78:	4c09      	ldr	r4, [pc, #36]	; (8012da0 <sprintf+0x2c>)
 8012d7a:	aa05      	add	r2, sp, #20
 8012d7c:	f852 1b04 	ldr.w	r1, [r2], #4
 8012d80:	6020      	str	r0, [r4, #0]
 8012d82:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012d86:	9201      	str	r2, [sp, #4]
 8012d88:	f7ff feca 	bl	8012b20 <_vprintf>
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	6822      	ldr	r2, [r4, #0]
 8012d90:	6023      	str	r3, [r4, #0]
 8012d92:	7013      	strb	r3, [r2, #0]
 8012d94:	b003      	add	sp, #12
 8012d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d9a:	b003      	add	sp, #12
 8012d9c:	4770      	bx	lr
 8012d9e:	bf00      	nop
 8012da0:	20009cec 	andcs	r9, r0, ip, ror #25

08012da4 <snprintf>:
 8012da4:	b40c      	push	{r2, r3}
 8012da6:	460b      	mov	r3, r1
 8012da8:	b513      	push	{r0, r1, r4, lr}
 8012daa:	4c09      	ldr	r4, [pc, #36]	; (8012dd0 <snprintf+0x2c>)
 8012dac:	aa04      	add	r2, sp, #16
 8012dae:	f852 1b04 	ldr.w	r1, [r2], #4
 8012db2:	6020      	str	r0, [r4, #0]
 8012db4:	4618      	mov	r0, r3
 8012db6:	9201      	str	r2, [sp, #4]
 8012db8:	f7ff feb2 	bl	8012b20 <_vprintf>
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	6822      	ldr	r2, [r4, #0]
 8012dc0:	6023      	str	r3, [r4, #0]
 8012dc2:	7013      	strb	r3, [r2, #0]
 8012dc4:	b002      	add	sp, #8
 8012dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dca:	b002      	add	sp, #8
 8012dcc:	4770      	bx	lr
 8012dce:	bf00      	nop
 8012dd0:	20009cec 	andcs	r9, r0, ip, ror #25

08012dd4 <vsnprintf>:
 8012dd4:	b538      	push	{r3, r4, r5, lr}
 8012dd6:	4605      	mov	r5, r0
 8012dd8:	4c05      	ldr	r4, [pc, #20]	; (8012df0 <vsnprintf+0x1c>)
 8012dda:	4608      	mov	r0, r1
 8012ddc:	4611      	mov	r1, r2
 8012dde:	461a      	mov	r2, r3
 8012de0:	6025      	str	r5, [r4, #0]
 8012de2:	f7ff fe9d 	bl	8012b20 <_vprintf>
 8012de6:	2300      	movs	r3, #0
 8012de8:	6822      	ldr	r2, [r4, #0]
 8012dea:	6023      	str	r3, [r4, #0]
 8012dec:	7013      	strb	r3, [r2, #0]
 8012dee:	bd38      	pop	{r3, r4, r5, pc}
 8012df0:	20009cec 	andcs	r9, r0, ip, ror #25

08012df4 <puts>:
 8012df4:	b508      	push	{r3, lr}
 8012df6:	f7ff fb1f 	bl	8012438 <console_puts>
 8012dfa:	200a      	movs	r0, #10
 8012dfc:	f7ff fb1a 	bl	8012434 <console_putc>
 8012e00:	2001      	movs	r0, #1
 8012e02:	bd08      	pop	{r3, pc}

08012e04 <strtok>:
 8012e04:	b530      	push	{r4, r5, lr}
 8012e06:	b910      	cbnz	r0, 8012e0e <strtok+0xa>
 8012e08:	4b12      	ldr	r3, [pc, #72]	; (8012e54 <strtok+0x50>)
 8012e0a:	6818      	ldr	r0, [r3, #0]
 8012e0c:	b158      	cbz	r0, 8012e26 <strtok+0x22>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	460d      	mov	r5, r1
 8012e12:	4618      	mov	r0, r3
 8012e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e1c:	b924      	cbnz	r4, 8012e28 <strtok+0x24>
 8012e1e:	b94a      	cbnz	r2, 8012e34 <strtok+0x30>
 8012e20:	4610      	mov	r0, r2
 8012e22:	4b0c      	ldr	r3, [pc, #48]	; (8012e54 <strtok+0x50>)
 8012e24:	601a      	str	r2, [r3, #0]
 8012e26:	bd30      	pop	{r4, r5, pc}
 8012e28:	42a2      	cmp	r2, r4
 8012e2a:	d1f5      	bne.n	8012e18 <strtok+0x14>
 8012e2c:	e7f0      	b.n	8012e10 <strtok+0xc>
 8012e2e:	4613      	mov	r3, r2
 8012e30:	e00c      	b.n	8012e4c <strtok+0x48>
 8012e32:	b914      	cbnz	r4, 8012e3a <strtok+0x36>
 8012e34:	460d      	mov	r5, r1
 8012e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e3e:	42a2      	cmp	r2, r4
 8012e40:	d1f7      	bne.n	8012e32 <strtok+0x2e>
 8012e42:	2a00      	cmp	r2, #0
 8012e44:	d0f3      	beq.n	8012e2e <strtok+0x2a>
 8012e46:	2200      	movs	r2, #0
 8012e48:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012e4c:	4a01      	ldr	r2, [pc, #4]	; (8012e54 <strtok+0x50>)
 8012e4e:	6013      	str	r3, [r2, #0]
 8012e50:	e7e9      	b.n	8012e26 <strtok+0x22>
 8012e52:	bf00      	nop
 8012e54:	20009cf0 	strdcs	r9, [r0], -r0

08012e58 <isleapyear>:
 8012e58:	2264      	movs	r2, #100	; 0x64
 8012e5a:	fb90 f3f2 	sdiv	r3, r0, r2
 8012e5e:	fb02 0313 	mls	r3, r2, r3, r0
 8012e62:	b94b      	cbnz	r3, 8012e78 <isleapyear+0x20>
 8012e64:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8012e68:	fb90 f2f3 	sdiv	r2, r0, r3
 8012e6c:	fb03 0012 	mls	r0, r3, r2, r0
 8012e70:	fab0 f080 	clz	r0, r0
 8012e74:	0940      	lsrs	r0, r0, #5
 8012e76:	4770      	bx	lr
 8012e78:	f010 0f03 	tst.w	r0, #3
 8012e7c:	bf0c      	ite	eq
 8012e7e:	2001      	moveq	r0, #1
 8012e80:	2000      	movne	r0, #0
 8012e82:	4770      	bx	lr

08012e84 <getdaysofmonth>:
 8012e84:	b510      	push	{r4, lr}
 8012e86:	4604      	mov	r4, r0
 8012e88:	2c01      	cmp	r4, #1
 8012e8a:	4608      	mov	r0, r1
 8012e8c:	d102      	bne.n	8012e94 <getdaysofmonth+0x10>
 8012e8e:	f7ff ffe3 	bl	8012e58 <isleapyear>
 8012e92:	b918      	cbnz	r0, 8012e9c <getdaysofmonth+0x18>
 8012e94:	4b02      	ldr	r3, [pc, #8]	; (8012ea0 <getdaysofmonth+0x1c>)
 8012e96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012e9a:	bd10      	pop	{r4, pc}
 8012e9c:	201d      	movs	r0, #29
 8012e9e:	e7fc      	b.n	8012e9a <getdaysofmonth+0x16>
 8012ea0:	08017340 	stmdaeq	r1, {r6, r8, r9, ip, sp, lr}

08012ea4 <mktime>:
 8012ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea8:	4604      	mov	r4, r0
 8012eaa:	2800      	cmp	r0, #0
 8012eac:	d043      	beq.n	8012f36 <mktime+0x92>
 8012eae:	6941      	ldr	r1, [r0, #20]
 8012eb0:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8012eb4:	2b45      	cmp	r3, #69	; 0x45
 8012eb6:	d83e      	bhi.n	8012f36 <mktime+0x92>
 8012eb8:	2600      	movs	r6, #0
 8012eba:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8012ebe:	f240 186d 	movw	r8, #365	; 0x16d
 8012ec2:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8012ec6:	42af      	cmp	r7, r5
 8012ec8:	da24      	bge.n	8012f14 <mktime+0x70>
 8012eca:	6927      	ldr	r7, [r4, #16]
 8012ecc:	2f0b      	cmp	r7, #11
 8012ece:	d832      	bhi.n	8012f36 <mktime+0x92>
 8012ed0:	2500      	movs	r5, #0
 8012ed2:	42af      	cmp	r7, r5
 8012ed4:	d129      	bne.n	8012f2a <mktime+0x86>
 8012ed6:	68e5      	ldr	r5, [r4, #12]
 8012ed8:	2d00      	cmp	r5, #0
 8012eda:	dd2c      	ble.n	8012f36 <mktime+0x92>
 8012edc:	4638      	mov	r0, r7
 8012ede:	f7ff ffd1 	bl	8012e84 <getdaysofmonth>
 8012ee2:	4285      	cmp	r5, r0
 8012ee4:	dc27      	bgt.n	8012f36 <mktime+0x92>
 8012ee6:	2318      	movs	r3, #24
 8012ee8:	3d01      	subs	r5, #1
 8012eea:	4435      	add	r5, r6
 8012eec:	435d      	muls	r5, r3
 8012eee:	68a3      	ldr	r3, [r4, #8]
 8012ef0:	2b17      	cmp	r3, #23
 8012ef2:	d820      	bhi.n	8012f36 <mktime+0x92>
 8012ef4:	213c      	movs	r1, #60	; 0x3c
 8012ef6:	442b      	add	r3, r5
 8012ef8:	fb01 f203 	mul.w	r2, r1, r3
 8012efc:	6863      	ldr	r3, [r4, #4]
 8012efe:	2b3b      	cmp	r3, #59	; 0x3b
 8012f00:	d819      	bhi.n	8012f36 <mktime+0x92>
 8012f02:	6820      	ldr	r0, [r4, #0]
 8012f04:	4413      	add	r3, r2
 8012f06:	283b      	cmp	r0, #59	; 0x3b
 8012f08:	fb01 f303 	mul.w	r3, r1, r3
 8012f0c:	d813      	bhi.n	8012f36 <mktime+0x92>
 8012f0e:	4418      	add	r0, r3
 8012f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f14:	4628      	mov	r0, r5
 8012f16:	f7ff ff9f 	bl	8012e58 <isleapyear>
 8012f1a:	2800      	cmp	r0, #0
 8012f1c:	bf14      	ite	ne
 8012f1e:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8012f22:	4643      	moveq	r3, r8
 8012f24:	3501      	adds	r5, #1
 8012f26:	441e      	add	r6, r3
 8012f28:	e7cd      	b.n	8012ec6 <mktime+0x22>
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	f7ff ffaa 	bl	8012e84 <getdaysofmonth>
 8012f30:	3501      	adds	r5, #1
 8012f32:	4406      	add	r6, r0
 8012f34:	e7cd      	b.n	8012ed2 <mktime+0x2e>
 8012f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f3a:	e7e9      	b.n	8012f10 <mktime+0x6c>

08012f3c <gettimeofday>:
 8012f3c:	b538      	push	{r3, r4, r5, lr}
 8012f3e:	4b10      	ldr	r3, [pc, #64]	; (8012f80 <gettimeofday+0x44>)
 8012f40:	4a10      	ldr	r2, [pc, #64]	; (8012f84 <gettimeofday+0x48>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	6814      	ldr	r4, [r2, #0]
 8012f46:	6013      	str	r3, [r2, #0]
 8012f48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012f4c:	429c      	cmp	r4, r3
 8012f4e:	bf2c      	ite	cs
 8012f50:	1ae4      	subcs	r4, r4, r3
 8012f52:	1b1c      	subcc	r4, r3, r4
 8012f54:	4354      	muls	r4, r2
 8012f56:	4b0c      	ldr	r3, [pc, #48]	; (8012f88 <gettimeofday+0x4c>)
 8012f58:	4605      	mov	r5, r0
 8012f5a:	e9d3 2100 	ldrd	r2, r1, [r3]
 8012f5e:	18a4      	adds	r4, r4, r2
 8012f60:	f141 0100 	adc.w	r1, r1, #0
 8012f64:	e9c3 4100 	strd	r4, r1, [r3]
 8012f68:	4620      	mov	r0, r4
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	4a07      	ldr	r2, [pc, #28]	; (8012f8c <gettimeofday+0x50>)
 8012f6e:	f7f4 fdb9 	bl	8007ae4 <__aeabi_uldivmod>
 8012f72:	4b06      	ldr	r3, [pc, #24]	; (8012f8c <gettimeofday+0x50>)
 8012f74:	6028      	str	r0, [r5, #0]
 8012f76:	fb03 4410 	mls	r4, r3, r0, r4
 8012f7a:	2000      	movs	r0, #0
 8012f7c:	606c      	str	r4, [r5, #4]
 8012f7e:	bd38      	pop	{r3, r4, r5, pc}
 8012f80:	20009d04 	andcs	r9, r0, r4, lsl #26
 8012f84:	20009d00 	andcs	r9, r0, r0, lsl #26
 8012f88:	20009cf8 	strdcs	r9, [r0], -r8
 8012f8c:	000f4240 	andeq	r4, pc, r0, asr #4

08012f90 <settimeofday>:
 8012f90:	4b07      	ldr	r3, [pc, #28]	; (8012fb0 <settimeofday+0x20>)
 8012f92:	b510      	push	{r4, lr}
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	4b07      	ldr	r3, [pc, #28]	; (8012fb4 <settimeofday+0x24>)
 8012f98:	6804      	ldr	r4, [r0, #0]
 8012f9a:	601a      	str	r2, [r3, #0]
 8012f9c:	6843      	ldr	r3, [r0, #4]
 8012f9e:	4806      	ldr	r0, [pc, #24]	; (8012fb8 <settimeofday+0x28>)
 8012fa0:	17da      	asrs	r2, r3, #31
 8012fa2:	fbc4 3200 	smlal	r3, r2, r4, r0
 8012fa6:	4905      	ldr	r1, [pc, #20]	; (8012fbc <settimeofday+0x2c>)
 8012fa8:	2000      	movs	r0, #0
 8012faa:	e9c1 3200 	strd	r3, r2, [r1]
 8012fae:	bd10      	pop	{r4, pc}
 8012fb0:	20009d04 	andcs	r9, r0, r4, lsl #26
 8012fb4:	20009d00 	andcs	r9, r0, r0, lsl #26
 8012fb8:	000f4240 	andeq	r4, pc, r0, asr #4
 8012fbc:	20009cf8 	strdcs	r9, [r0], -r8

08012fc0 <time>:
 8012fc0:	b513      	push	{r0, r1, r4, lr}
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	2100      	movs	r1, #0
 8012fc6:	4668      	mov	r0, sp
 8012fc8:	f7ff ffb8 	bl	8012f3c <gettimeofday>
 8012fcc:	9800      	ldr	r0, [sp, #0]
 8012fce:	b104      	cbz	r4, 8012fd2 <time+0x12>
 8012fd0:	6020      	str	r0, [r4, #0]
 8012fd2:	b002      	add	sp, #8
 8012fd4:	bd10      	pop	{r4, pc}
	...

08012fd8 <uart0_init>:
 8012fd8:	2301      	movs	r3, #1
 8012fda:	b507      	push	{r0, r1, r2, lr}
 8012fdc:	2208      	movs	r2, #8
 8012fde:	9300      	str	r3, [sp, #0]
 8012fe0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	4803      	ldr	r0, [pc, #12]	; (8012ff4 <uart0_init+0x1c>)
 8012fe8:	f001 f836 	bl	8014058 <gd32_uart_begin>
 8012fec:	b003      	add	sp, #12
 8012fee:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ff2:	bf00      	nop
 8012ff4:	40013800 	andmi	r3, r1, r0, lsl #16

08012ff8 <uart0_putc>:
 8012ff8:	280a      	cmp	r0, #10
 8012ffa:	b538      	push	{r3, r4, r5, lr}
 8012ffc:	4604      	mov	r4, r0
 8012ffe:	d10a      	bne.n	8013016 <uart0_putc+0x1e>
 8013000:	4d0b      	ldr	r5, [pc, #44]	; (8013030 <uart0_putc+0x38>)
 8013002:	2107      	movs	r1, #7
 8013004:	4628      	mov	r0, r5
 8013006:	f000 fd8d 	bl	8013b24 <usart_flag_get>
 801300a:	2800      	cmp	r0, #0
 801300c:	d0f9      	beq.n	8013002 <uart0_putc+0xa>
 801300e:	220d      	movs	r2, #13
 8013010:	4b08      	ldr	r3, [pc, #32]	; (8013034 <uart0_putc+0x3c>)
 8013012:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8013016:	4d06      	ldr	r5, [pc, #24]	; (8013030 <uart0_putc+0x38>)
 8013018:	2107      	movs	r1, #7
 801301a:	4628      	mov	r0, r5
 801301c:	f000 fd82 	bl	8013b24 <usart_flag_get>
 8013020:	2800      	cmp	r0, #0
 8013022:	d0f9      	beq.n	8013018 <uart0_putc+0x20>
 8013024:	4b03      	ldr	r3, [pc, #12]	; (8013034 <uart0_putc+0x3c>)
 8013026:	b2e4      	uxtb	r4, r4
 8013028:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 801302c:	bd38      	pop	{r3, r4, r5, pc}
 801302e:	bf00      	nop
 8013030:	40013800 	andmi	r3, r1, r0, lsl #16
 8013034:	40013000 	andmi	r3, r1, r0

08013038 <uart0_puts>:
 8013038:	b510      	push	{r4, lr}
 801303a:	1e44      	subs	r4, r0, #1
 801303c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013040:	b903      	cbnz	r3, 8013044 <uart0_puts+0xc>
 8013042:	bd10      	pop	{r4, pc}
 8013044:	2b0a      	cmp	r3, #10
 8013046:	d102      	bne.n	801304e <uart0_puts+0x16>
 8013048:	200d      	movs	r0, #13
 801304a:	f7ff ffd5 	bl	8012ff8 <uart0_putc>
 801304e:	7820      	ldrb	r0, [r4, #0]
 8013050:	f7ff ffd2 	bl	8012ff8 <uart0_putc>
 8013054:	e7f2      	b.n	801303c <uart0_puts+0x4>
	...

08013058 <systick_config>:
 8013058:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801305c:	4b0b      	ldr	r3, [pc, #44]	; (801308c <systick_config+0x34>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	fbb3 f3f2 	udiv	r3, r3, r2
 8013064:	3b01      	subs	r3, #1
 8013066:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801306a:	d20d      	bcs.n	8013088 <systick_config+0x30>
 801306c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8013070:	21f0      	movs	r1, #240	; 0xf0
 8013072:	6153      	str	r3, [r2, #20]
 8013074:	4b06      	ldr	r3, [pc, #24]	; (8013090 <systick_config+0x38>)
 8013076:	2007      	movs	r0, #7
 8013078:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 801307c:	2100      	movs	r1, #0
 801307e:	6191      	str	r1, [r2, #24]
 8013080:	6110      	str	r0, [r2, #16]
 8013082:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8013086:	4770      	bx	lr
 8013088:	e7fe      	b.n	8013088 <systick_config+0x30>
 801308a:	bf00      	nop
 801308c:	200000f4 	strdcs	r0, [r0], -r4
 8013090:	e000ed00 	and	lr, r0, r0, lsl #26

08013094 <SysTick_Handler>:
 8013094:	4a02      	ldr	r2, [pc, #8]	; (80130a0 <SysTick_Handler+0xc>)
 8013096:	6813      	ldr	r3, [r2, #0]
 8013098:	3301      	adds	r3, #1
 801309a:	6013      	str	r3, [r2, #0]
 801309c:	4770      	bx	lr
 801309e:	bf00      	nop
 80130a0:	20009d04 	andcs	r9, r0, r4, lsl #26

080130a4 <SystemInit>:
 80130a4:	4b37      	ldr	r3, [pc, #220]	; (8013184 <SystemInit+0xe0>)
 80130a6:	4938      	ldr	r1, [pc, #224]	; (8013188 <SystemInit+0xe4>)
 80130a8:	681a      	ldr	r2, [r3, #0]
 80130aa:	f042 0201 	orr.w	r2, r2, #1
 80130ae:	601a      	str	r2, [r3, #0]
 80130b0:	685a      	ldr	r2, [r3, #4]
 80130b2:	f022 0203 	bic.w	r2, r2, #3
 80130b6:	605a      	str	r2, [r3, #4]
 80130b8:	681a      	ldr	r2, [r3, #0]
 80130ba:	400a      	ands	r2, r1
 80130bc:	601a      	str	r2, [r3, #0]
 80130be:	6858      	ldr	r0, [r3, #4]
 80130c0:	4a32      	ldr	r2, [pc, #200]	; (801318c <SystemInit+0xe8>)
 80130c2:	4002      	ands	r2, r0
 80130c4:	605a      	str	r2, [r3, #4]
 80130c6:	681a      	ldr	r2, [r3, #0]
 80130c8:	400a      	ands	r2, r1
 80130ca:	601a      	str	r2, [r3, #0]
 80130cc:	681a      	ldr	r2, [r3, #0]
 80130ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80130d2:	601a      	str	r2, [r3, #0]
 80130d4:	685a      	ldr	r2, [r3, #4]
 80130d6:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 80130da:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80130de:	605a      	str	r2, [r3, #4]
 80130e0:	2200      	movs	r2, #0
 80130e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80130e4:	681a      	ldr	r2, [r3, #0]
 80130e6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80130ea:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80130ee:	601a      	str	r2, [r3, #0]
 80130f0:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80130f4:	609a      	str	r2, [r3, #8]
 80130f6:	681a      	ldr	r2, [r3, #0]
 80130f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80130fc:	601a      	str	r2, [r3, #0]
 80130fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013102:	6819      	ldr	r1, [r3, #0]
 8013104:	0389      	lsls	r1, r1, #14
 8013106:	d401      	bmi.n	801310c <SystemInit+0x68>
 8013108:	3a01      	subs	r2, #1
 801310a:	d1fa      	bne.n	8013102 <SystemInit+0x5e>
 801310c:	681a      	ldr	r2, [r3, #0]
 801310e:	0392      	lsls	r2, r2, #14
 8013110:	d400      	bmi.n	8013114 <SystemInit+0x70>
 8013112:	e7fe      	b.n	8013112 <SystemInit+0x6e>
 8013114:	685a      	ldr	r2, [r3, #4]
 8013116:	605a      	str	r2, [r3, #4]
 8013118:	685a      	ldr	r2, [r3, #4]
 801311a:	605a      	str	r2, [r3, #4]
 801311c:	685a      	ldr	r2, [r3, #4]
 801311e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013122:	605a      	str	r2, [r3, #4]
 8013124:	685a      	ldr	r2, [r3, #4]
 8013126:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 801312a:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 801312e:	605a      	str	r2, [r3, #4]
 8013130:	685a      	ldr	r2, [r3, #4]
 8013132:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8013136:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 801313a:	605a      	str	r2, [r3, #4]
 801313c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801313e:	4a14      	ldr	r2, [pc, #80]	; (8013190 <SystemInit+0xec>)
 8013140:	400a      	ands	r2, r1
 8013142:	62da      	str	r2, [r3, #44]	; 0x2c
 8013144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013146:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 801314a:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 801314e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013156:	601a      	str	r2, [r3, #0]
 8013158:	681a      	ldr	r2, [r3, #0]
 801315a:	0110      	lsls	r0, r2, #4
 801315c:	d5fc      	bpl.n	8013158 <SystemInit+0xb4>
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8013164:	601a      	str	r2, [r3, #0]
 8013166:	681a      	ldr	r2, [r3, #0]
 8013168:	0191      	lsls	r1, r2, #6
 801316a:	d5fc      	bpl.n	8013166 <SystemInit+0xc2>
 801316c:	685a      	ldr	r2, [r3, #4]
 801316e:	f022 0203 	bic.w	r2, r2, #3
 8013172:	605a      	str	r2, [r3, #4]
 8013174:	685a      	ldr	r2, [r3, #4]
 8013176:	f042 0202 	orr.w	r2, r2, #2
 801317a:	605a      	str	r2, [r3, #4]
 801317c:	685a      	ldr	r2, [r3, #4]
 801317e:	0712      	lsls	r2, r2, #28
 8013180:	d5fc      	bpl.n	801317c <SystemInit+0xd8>
 8013182:	4770      	bx	lr
 8013184:	40021000 	andmi	r1, r2, r0
 8013188:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 801318c:	e0ff000c 	rscs	r0, pc, ip
 8013190:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08013194 <bkp_deinit>:
 8013194:	b508      	push	{r3, lr}
 8013196:	f000 f9eb 	bl	8013570 <rcu_bkp_reset_enable>
 801319a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801319e:	f000 b9ef 	b.w	8013580 <rcu_bkp_reset_disable>
	...

080131a4 <bkp_data_write>:
 80131a4:	f1a0 030b 	sub.w	r3, r0, #11
 80131a8:	2b1f      	cmp	r3, #31
 80131aa:	d804      	bhi.n	80131b6 <bkp_data_write+0x12>
 80131ac:	4b07      	ldr	r3, [pc, #28]	; (80131cc <bkp_data_write+0x28>)
 80131ae:	4403      	add	r3, r0
 80131b0:	009b      	lsls	r3, r3, #2
 80131b2:	8019      	strh	r1, [r3, #0]
 80131b4:	4770      	bx	lr
 80131b6:	1e43      	subs	r3, r0, #1
 80131b8:	2b09      	cmp	r3, #9
 80131ba:	bf9f      	itttt	ls
 80131bc:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 80131c0:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 80131c4:	0080      	lslls	r0, r0, #2
 80131c6:	8001      	strhls	r1, [r0, #0]
 80131c8:	4770      	bx	lr
 80131ca:	bf00      	nop
 80131cc:	10001b05 	andne	r1, r0, r5, lsl #22

080131d0 <bkp_data_read>:
 80131d0:	f1a0 030b 	sub.w	r3, r0, #11
 80131d4:	2b1f      	cmp	r3, #31
 80131d6:	d805      	bhi.n	80131e4 <bkp_data_read+0x14>
 80131d8:	4b08      	ldr	r3, [pc, #32]	; (80131fc <bkp_data_read+0x2c>)
 80131da:	4403      	add	r3, r0
 80131dc:	009b      	lsls	r3, r3, #2
 80131de:	8818      	ldrh	r0, [r3, #0]
 80131e0:	b280      	uxth	r0, r0
 80131e2:	4770      	bx	lr
 80131e4:	1e43      	subs	r3, r0, #1
 80131e6:	2b09      	cmp	r3, #9
 80131e8:	d806      	bhi.n	80131f8 <bkp_data_read+0x28>
 80131ea:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 80131ee:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 80131f2:	0080      	lsls	r0, r0, #2
 80131f4:	8800      	ldrh	r0, [r0, #0]
 80131f6:	e7f3      	b.n	80131e0 <bkp_data_read+0x10>
 80131f8:	2000      	movs	r0, #0
 80131fa:	4770      	bx	lr
 80131fc:	10001b05 	andne	r1, r0, r5, lsl #22

08013200 <dma_deinit>:
 8013200:	4b0c      	ldr	r3, [pc, #48]	; (8013234 <dma_deinit+0x34>)
 8013202:	4298      	cmp	r0, r3
 8013204:	d102      	bne.n	801320c <dma_deinit+0xc>
 8013206:	2904      	cmp	r1, #4
 8013208:	d900      	bls.n	801320c <dma_deinit+0xc>
 801320a:	e7fe      	b.n	801320a <dma_deinit+0xa>
 801320c:	2314      	movs	r3, #20
 801320e:	fb03 0301 	mla	r3, r3, r1, r0
 8013212:	689a      	ldr	r2, [r3, #8]
 8013214:	0089      	lsls	r1, r1, #2
 8013216:	f022 0201 	bic.w	r2, r2, #1
 801321a:	609a      	str	r2, [r3, #8]
 801321c:	2200      	movs	r2, #0
 801321e:	609a      	str	r2, [r3, #8]
 8013220:	60da      	str	r2, [r3, #12]
 8013222:	611a      	str	r2, [r3, #16]
 8013224:	615a      	str	r2, [r3, #20]
 8013226:	230f      	movs	r3, #15
 8013228:	6842      	ldr	r2, [r0, #4]
 801322a:	408b      	lsls	r3, r1
 801322c:	4313      	orrs	r3, r2
 801322e:	6043      	str	r3, [r0, #4]
 8013230:	4770      	bx	lr
 8013232:	bf00      	nop
 8013234:	40020400 	andmi	r0, r2, r0, lsl #8

08013238 <dma_init>:
 8013238:	4b1b      	ldr	r3, [pc, #108]	; (80132a8 <dma_init+0x70>)
 801323a:	b510      	push	{r4, lr}
 801323c:	4298      	cmp	r0, r3
 801323e:	d102      	bne.n	8013246 <dma_init+0xe>
 8013240:	2904      	cmp	r1, #4
 8013242:	d900      	bls.n	8013246 <dma_init+0xe>
 8013244:	e7fe      	b.n	8013244 <dma_init+0xc>
 8013246:	2314      	movs	r3, #20
 8013248:	fb03 0101 	mla	r1, r3, r1, r0
 801324c:	6813      	ldr	r3, [r2, #0]
 801324e:	610b      	str	r3, [r1, #16]
 8013250:	6893      	ldr	r3, [r2, #8]
 8013252:	614b      	str	r3, [r1, #20]
 8013254:	8a13      	ldrh	r3, [r2, #16]
 8013256:	60cb      	str	r3, [r1, #12]
 8013258:	68d4      	ldr	r4, [r2, #12]
 801325a:	6853      	ldr	r3, [r2, #4]
 801325c:	6888      	ldr	r0, [r1, #8]
 801325e:	4323      	orrs	r3, r4
 8013260:	6954      	ldr	r4, [r2, #20]
 8013262:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8013266:	4323      	orrs	r3, r4
 8013268:	4303      	orrs	r3, r0
 801326a:	608b      	str	r3, [r1, #8]
 801326c:	7e13      	ldrb	r3, [r2, #24]
 801326e:	2b01      	cmp	r3, #1
 8013270:	688b      	ldr	r3, [r1, #8]
 8013272:	bf0c      	ite	eq
 8013274:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8013278:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 801327c:	608b      	str	r3, [r1, #8]
 801327e:	7e53      	ldrb	r3, [r2, #25]
 8013280:	2b01      	cmp	r3, #1
 8013282:	688b      	ldr	r3, [r1, #8]
 8013284:	bf0c      	ite	eq
 8013286:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 801328a:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 801328e:	608b      	str	r3, [r1, #8]
 8013290:	7e93      	ldrb	r3, [r2, #26]
 8013292:	b923      	cbnz	r3, 801329e <dma_init+0x66>
 8013294:	688b      	ldr	r3, [r1, #8]
 8013296:	f023 0310 	bic.w	r3, r3, #16
 801329a:	608b      	str	r3, [r1, #8]
 801329c:	bd10      	pop	{r4, pc}
 801329e:	688b      	ldr	r3, [r1, #8]
 80132a0:	f043 0310 	orr.w	r3, r3, #16
 80132a4:	e7f9      	b.n	801329a <dma_init+0x62>
 80132a6:	bf00      	nop
 80132a8:	40020400 	andmi	r0, r2, r0, lsl #8

080132ac <dma_circulation_disable>:
 80132ac:	4b06      	ldr	r3, [pc, #24]	; (80132c8 <dma_circulation_disable+0x1c>)
 80132ae:	4298      	cmp	r0, r3
 80132b0:	d102      	bne.n	80132b8 <dma_circulation_disable+0xc>
 80132b2:	2904      	cmp	r1, #4
 80132b4:	d900      	bls.n	80132b8 <dma_circulation_disable+0xc>
 80132b6:	e7fe      	b.n	80132b6 <dma_circulation_disable+0xa>
 80132b8:	2314      	movs	r3, #20
 80132ba:	4359      	muls	r1, r3
 80132bc:	3008      	adds	r0, #8
 80132be:	580b      	ldr	r3, [r1, r0]
 80132c0:	f023 0320 	bic.w	r3, r3, #32
 80132c4:	500b      	str	r3, [r1, r0]
 80132c6:	4770      	bx	lr
 80132c8:	40020400 	andmi	r0, r2, r0, lsl #8

080132cc <dma_memory_to_memory_disable>:
 80132cc:	4b06      	ldr	r3, [pc, #24]	; (80132e8 <dma_memory_to_memory_disable+0x1c>)
 80132ce:	4298      	cmp	r0, r3
 80132d0:	d102      	bne.n	80132d8 <dma_memory_to_memory_disable+0xc>
 80132d2:	2904      	cmp	r1, #4
 80132d4:	d900      	bls.n	80132d8 <dma_memory_to_memory_disable+0xc>
 80132d6:	e7fe      	b.n	80132d6 <dma_memory_to_memory_disable+0xa>
 80132d8:	2314      	movs	r3, #20
 80132da:	4359      	muls	r1, r3
 80132dc:	3008      	adds	r0, #8
 80132de:	580b      	ldr	r3, [r1, r0]
 80132e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80132e4:	500b      	str	r3, [r1, r0]
 80132e6:	4770      	bx	lr
 80132e8:	40020400 	andmi	r0, r2, r0, lsl #8

080132ec <fmc_bank0_unlock>:
 80132ec:	4b04      	ldr	r3, [pc, #16]	; (8013300 <fmc_bank0_unlock+0x14>)
 80132ee:	691a      	ldr	r2, [r3, #16]
 80132f0:	0612      	lsls	r2, r2, #24
 80132f2:	bf41      	itttt	mi
 80132f4:	4a03      	ldrmi	r2, [pc, #12]	; (8013304 <fmc_bank0_unlock+0x18>)
 80132f6:	605a      	strmi	r2, [r3, #4]
 80132f8:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80132fc:	605a      	strmi	r2, [r3, #4]
 80132fe:	4770      	bx	lr
 8013300:	40022000 	andmi	r2, r2, r0
 8013304:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08013308 <fmc_bank1_unlock>:
 8013308:	4b04      	ldr	r3, [pc, #16]	; (801331c <fmc_bank1_unlock+0x14>)
 801330a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801330c:	0612      	lsls	r2, r2, #24
 801330e:	bf41      	itttt	mi
 8013310:	4a03      	ldrmi	r2, [pc, #12]	; (8013320 <fmc_bank1_unlock+0x18>)
 8013312:	645a      	strmi	r2, [r3, #68]	; 0x44
 8013314:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8013318:	645a      	strmi	r2, [r3, #68]	; 0x44
 801331a:	4770      	bx	lr
 801331c:	40022000 	andmi	r2, r2, r0
 8013320:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08013324 <fmc_bank0_lock>:
 8013324:	4a02      	ldr	r2, [pc, #8]	; (8013330 <fmc_bank0_lock+0xc>)
 8013326:	6913      	ldr	r3, [r2, #16]
 8013328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801332c:	6113      	str	r3, [r2, #16]
 801332e:	4770      	bx	lr
 8013330:	40022000 	andmi	r2, r2, r0

08013334 <fmc_bank1_lock>:
 8013334:	4a02      	ldr	r2, [pc, #8]	; (8013340 <fmc_bank1_lock+0xc>)
 8013336:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8013338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801333c:	6513      	str	r3, [r2, #80]	; 0x50
 801333e:	4770      	bx	lr
 8013340:	40022000 	andmi	r2, r2, r0

08013344 <fmc_bank0_state_get>:
 8013344:	4b07      	ldr	r3, [pc, #28]	; (8013364 <fmc_bank0_state_get+0x20>)
 8013346:	68da      	ldr	r2, [r3, #12]
 8013348:	07d1      	lsls	r1, r2, #31
 801334a:	d407      	bmi.n	801335c <fmc_bank0_state_get+0x18>
 801334c:	68da      	ldr	r2, [r3, #12]
 801334e:	06d2      	lsls	r2, r2, #27
 8013350:	d406      	bmi.n	8013360 <fmc_bank0_state_get+0x1c>
 8013352:	68d8      	ldr	r0, [r3, #12]
 8013354:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8013358:	0040      	lsls	r0, r0, #1
 801335a:	4770      	bx	lr
 801335c:	2001      	movs	r0, #1
 801335e:	4770      	bx	lr
 8013360:	2003      	movs	r0, #3
 8013362:	4770      	bx	lr
 8013364:	40022000 	andmi	r2, r2, r0

08013368 <fmc_bank1_state_get>:
 8013368:	4b07      	ldr	r3, [pc, #28]	; (8013388 <fmc_bank1_state_get+0x20>)
 801336a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801336c:	07d1      	lsls	r1, r2, #31
 801336e:	d407      	bmi.n	8013380 <fmc_bank1_state_get+0x18>
 8013370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013372:	06d2      	lsls	r2, r2, #27
 8013374:	d406      	bmi.n	8013384 <fmc_bank1_state_get+0x1c>
 8013376:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013378:	f3c0 0080 	ubfx	r0, r0, #2, #1
 801337c:	0040      	lsls	r0, r0, #1
 801337e:	4770      	bx	lr
 8013380:	2001      	movs	r0, #1
 8013382:	4770      	bx	lr
 8013384:	2003      	movs	r0, #3
 8013386:	4770      	bx	lr
 8013388:	40022000 	andmi	r2, r2, r0

0801338c <fwdgt_enable>:
 801338c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8013390:	4b01      	ldr	r3, [pc, #4]	; (8013398 <fwdgt_enable+0xc>)
 8013392:	601a      	str	r2, [r3, #0]
 8013394:	4770      	bx	lr
 8013396:	bf00      	nop
 8013398:	40003000 	andmi	r3, r0, r0

0801339c <fwdgt_counter_reload>:
 801339c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80133a0:	4b01      	ldr	r3, [pc, #4]	; (80133a8 <fwdgt_counter_reload+0xc>)
 80133a2:	601a      	str	r2, [r3, #0]
 80133a4:	4770      	bx	lr
 80133a6:	bf00      	nop
 80133a8:	40003000 	andmi	r3, r0, r0

080133ac <fwdgt_config>:
 80133ac:	f245 5355 	movw	r3, #21845	; 0x5555
 80133b0:	4a11      	ldr	r2, [pc, #68]	; (80133f8 <fwdgt_config+0x4c>)
 80133b2:	b510      	push	{r4, lr}
 80133b4:	4c11      	ldr	r4, [pc, #68]	; (80133fc <fwdgt_config+0x50>)
 80133b6:	6013      	str	r3, [r2, #0]
 80133b8:	68d3      	ldr	r3, [r2, #12]
 80133ba:	3c01      	subs	r4, #1
 80133bc:	f003 0301 	and.w	r3, r3, #1
 80133c0:	d013      	beq.n	80133ea <fwdgt_config+0x3e>
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d1f8      	bne.n	80133b8 <fwdgt_config+0xc>
 80133c6:	6051      	str	r1, [r2, #4]
 80133c8:	490c      	ldr	r1, [pc, #48]	; (80133fc <fwdgt_config+0x50>)
 80133ca:	4a0b      	ldr	r2, [pc, #44]	; (80133f8 <fwdgt_config+0x4c>)
 80133cc:	68d3      	ldr	r3, [r2, #12]
 80133ce:	3901      	subs	r1, #1
 80133d0:	f003 0302 	and.w	r3, r3, #2
 80133d4:	d00d      	beq.n	80133f2 <fwdgt_config+0x46>
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d1f8      	bne.n	80133cc <fwdgt_config+0x20>
 80133da:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80133de:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80133e2:	6090      	str	r0, [r2, #8]
 80133e4:	2001      	movs	r0, #1
 80133e6:	6013      	str	r3, [r2, #0]
 80133e8:	e002      	b.n	80133f0 <fwdgt_config+0x44>
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d0eb      	beq.n	80133c6 <fwdgt_config+0x1a>
 80133ee:	2000      	movs	r0, #0
 80133f0:	bd10      	pop	{r4, pc}
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d1fb      	bne.n	80133ee <fwdgt_config+0x42>
 80133f6:	e7f0      	b.n	80133da <fwdgt_config+0x2e>
 80133f8:	40003000 	andmi	r3, r0, r0
 80133fc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08013400 <gpio_init>:
 8013400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013404:	f04f 0c0f 	mov.w	ip, #15
 8013408:	06cf      	lsls	r7, r1, #27
 801340a:	f04f 0400 	mov.w	r4, #0
 801340e:	f04f 0701 	mov.w	r7, #1
 8013412:	f001 050f 	and.w	r5, r1, #15
 8013416:	bf48      	it	mi
 8013418:	4315      	orrmi	r5, r2
 801341a:	fa23 f204 	lsr.w	r2, r3, r4
 801341e:	07d6      	lsls	r6, r2, #31
 8013420:	d510      	bpl.n	8013444 <gpio_init+0x44>
 8013422:	00a2      	lsls	r2, r4, #2
 8013424:	6806      	ldr	r6, [r0, #0]
 8013426:	fa0c fe02 	lsl.w	lr, ip, r2
 801342a:	ea26 060e 	bic.w	r6, r6, lr
 801342e:	fa05 f202 	lsl.w	r2, r5, r2
 8013432:	2928      	cmp	r1, #40	; 0x28
 8013434:	ea42 0206 	orr.w	r2, r2, r6
 8013438:	d128      	bne.n	801348c <gpio_init+0x8c>
 801343a:	fa07 f604 	lsl.w	r6, r7, r4
 801343e:	401e      	ands	r6, r3
 8013440:	6146      	str	r6, [r0, #20]
 8013442:	6002      	str	r2, [r0, #0]
 8013444:	3401      	adds	r4, #1
 8013446:	2c08      	cmp	r4, #8
 8013448:	d1e7      	bne.n	801341a <gpio_init+0x1a>
 801344a:	2600      	movs	r6, #0
 801344c:	f04f 0c0f 	mov.w	ip, #15
 8013450:	2701      	movs	r7, #1
 8013452:	f106 0208 	add.w	r2, r6, #8
 8013456:	fa23 f402 	lsr.w	r4, r3, r2
 801345a:	07e4      	lsls	r4, r4, #31
 801345c:	d511      	bpl.n	8013482 <gpio_init+0x82>
 801345e:	00b4      	lsls	r4, r6, #2
 8013460:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8013464:	fa0c f804 	lsl.w	r8, ip, r4
 8013468:	ea2e 0e08 	bic.w	lr, lr, r8
 801346c:	fa05 f404 	lsl.w	r4, r5, r4
 8013470:	2928      	cmp	r1, #40	; 0x28
 8013472:	ea44 040e 	orr.w	r4, r4, lr
 8013476:	d110      	bne.n	801349a <gpio_init+0x9a>
 8013478:	fa07 f202 	lsl.w	r2, r7, r2
 801347c:	401a      	ands	r2, r3
 801347e:	6142      	str	r2, [r0, #20]
 8013480:	6044      	str	r4, [r0, #4]
 8013482:	3601      	adds	r6, #1
 8013484:	2e08      	cmp	r6, #8
 8013486:	d1e4      	bne.n	8013452 <gpio_init+0x52>
 8013488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801348c:	2948      	cmp	r1, #72	; 0x48
 801348e:	bf02      	ittt	eq
 8013490:	fa07 f604 	lsleq.w	r6, r7, r4
 8013494:	401e      	andeq	r6, r3
 8013496:	6106      	streq	r6, [r0, #16]
 8013498:	e7d3      	b.n	8013442 <gpio_init+0x42>
 801349a:	2948      	cmp	r1, #72	; 0x48
 801349c:	bf02      	ittt	eq
 801349e:	fa07 f202 	lsleq.w	r2, r7, r2
 80134a2:	401a      	andeq	r2, r3
 80134a4:	6102      	streq	r2, [r0, #16]
 80134a6:	e7eb      	b.n	8013480 <gpio_init+0x80>

080134a8 <gpio_pin_remap_config>:
 80134a8:	2800      	cmp	r0, #0
 80134aa:	4a16      	ldr	r2, [pc, #88]	; (8013504 <gpio_pin_remap_config+0x5c>)
 80134ac:	b530      	push	{r4, r5, lr}
 80134ae:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 80134b2:	bfb4      	ite	lt
 80134b4:	69d3      	ldrlt	r3, [r2, #28]
 80134b6:	6853      	ldrge	r3, [r2, #4]
 80134b8:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 80134bc:	b284      	uxth	r4, r0
 80134be:	d110      	bne.n	80134e2 <gpio_pin_remap_config+0x3a>
 80134c0:	6855      	ldr	r5, [r2, #4]
 80134c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80134c6:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 80134ca:	6055      	str	r5, [r2, #4]
 80134cc:	b119      	cbz	r1, 80134d6 <gpio_pin_remap_config+0x2e>
 80134ce:	0d42      	lsrs	r2, r0, #21
 80134d0:	0112      	lsls	r2, r2, #4
 80134d2:	4094      	lsls	r4, r2
 80134d4:	4323      	orrs	r3, r4
 80134d6:	4a0b      	ldr	r2, [pc, #44]	; (8013504 <gpio_pin_remap_config+0x5c>)
 80134d8:	2800      	cmp	r0, #0
 80134da:	bfb4      	ite	lt
 80134dc:	61d3      	strlt	r3, [r2, #28]
 80134de:	6053      	strge	r3, [r2, #4]
 80134e0:	bd30      	pop	{r4, r5, pc}
 80134e2:	02c2      	lsls	r2, r0, #11
 80134e4:	bf4d      	iteet	mi
 80134e6:	2203      	movmi	r2, #3
 80134e8:	0d42      	lsrpl	r2, r0, #21
 80134ea:	0112      	lslpl	r2, r2, #4
 80134ec:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 80134f0:	bf4c      	ite	mi
 80134f2:	40aa      	lslmi	r2, r5
 80134f4:	fa04 f202 	lslpl.w	r2, r4, r2
 80134f8:	ea23 0302 	bic.w	r3, r3, r2
 80134fc:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8013500:	e7e4      	b.n	80134cc <gpio_pin_remap_config+0x24>
 8013502:	bf00      	nop
 8013504:	40010000 	andmi	r0, r1, r0

08013508 <gpio_ethernet_phy_select>:
 8013508:	4b04      	ldr	r3, [pc, #16]	; (801351c <gpio_ethernet_phy_select+0x14>)
 801350a:	685a      	ldr	r2, [r3, #4]
 801350c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8013510:	605a      	str	r2, [r3, #4]
 8013512:	685a      	ldr	r2, [r3, #4]
 8013514:	4302      	orrs	r2, r0
 8013516:	605a      	str	r2, [r3, #4]
 8013518:	4770      	bx	lr
 801351a:	bf00      	nop
 801351c:	40010000 	andmi	r0, r1, r0

08013520 <pmu_backup_write_enable>:
 8013520:	4a02      	ldr	r2, [pc, #8]	; (801352c <pmu_backup_write_enable+0xc>)
 8013522:	6813      	ldr	r3, [r2, #0]
 8013524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013528:	6013      	str	r3, [r2, #0]
 801352a:	4770      	bx	lr
 801352c:	40007000 	andmi	r7, r0, r0

08013530 <rcu_periph_clock_enable>:
 8013530:	2201      	movs	r2, #1
 8013532:	0983      	lsrs	r3, r0, #6
 8013534:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013538:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801353c:	6819      	ldr	r1, [r3, #0]
 801353e:	f000 001f 	and.w	r0, r0, #31
 8013542:	4082      	lsls	r2, r0
 8013544:	430a      	orrs	r2, r1
 8013546:	601a      	str	r2, [r3, #0]
 8013548:	4770      	bx	lr

0801354a <rcu_periph_clock_disable>:
 801354a:	2101      	movs	r1, #1
 801354c:	0983      	lsrs	r3, r0, #6
 801354e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013552:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8013556:	681a      	ldr	r2, [r3, #0]
 8013558:	f000 001f 	and.w	r0, r0, #31
 801355c:	4081      	lsls	r1, r0
 801355e:	ea22 0201 	bic.w	r2, r2, r1
 8013562:	601a      	str	r2, [r3, #0]
 8013564:	4770      	bx	lr

08013566 <rcu_periph_reset_enable>:
 8013566:	f7ff bfe3 	b.w	8013530 <rcu_periph_clock_enable>

0801356a <rcu_periph_reset_disable>:
 801356a:	f7ff bfee 	b.w	801354a <rcu_periph_clock_disable>
	...

08013570 <rcu_bkp_reset_enable>:
 8013570:	4a02      	ldr	r2, [pc, #8]	; (801357c <rcu_bkp_reset_enable+0xc>)
 8013572:	6a13      	ldr	r3, [r2, #32]
 8013574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013578:	6213      	str	r3, [r2, #32]
 801357a:	4770      	bx	lr
 801357c:	40021000 	andmi	r1, r2, r0

08013580 <rcu_bkp_reset_disable>:
 8013580:	4a02      	ldr	r2, [pc, #8]	; (801358c <rcu_bkp_reset_disable+0xc>)
 8013582:	6a13      	ldr	r3, [r2, #32]
 8013584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013588:	6213      	str	r3, [r2, #32]
 801358a:	4770      	bx	lr
 801358c:	40021000 	andmi	r1, r2, r0

08013590 <rcu_ckout0_config>:
 8013590:	4a03      	ldr	r2, [pc, #12]	; (80135a0 <rcu_ckout0_config+0x10>)
 8013592:	6853      	ldr	r3, [r2, #4]
 8013594:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8013598:	4303      	orrs	r3, r0
 801359a:	6053      	str	r3, [r2, #4]
 801359c:	4770      	bx	lr
 801359e:	bf00      	nop
 80135a0:	40021000 	andmi	r1, r2, r0

080135a4 <rcu_pll2_config>:
 80135a4:	4b04      	ldr	r3, [pc, #16]	; (80135b8 <rcu_pll2_config+0x14>)
 80135a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135a8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80135ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80135ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135b0:	4302      	orrs	r2, r0
 80135b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80135b4:	4770      	bx	lr
 80135b6:	bf00      	nop
 80135b8:	40021000 	andmi	r1, r2, r0

080135bc <rcu_adc_clock_config>:
 80135bc:	490c      	ldr	r1, [pc, #48]	; (80135f0 <rcu_adc_clock_config+0x34>)
 80135be:	2805      	cmp	r0, #5
 80135c0:	684b      	ldr	r3, [r1, #4]
 80135c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80135c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80135ca:	d006      	beq.n	80135da <rcu_adc_clock_config+0x1e>
 80135cc:	d803      	bhi.n	80135d6 <rcu_adc_clock_config+0x1a>
 80135ce:	2804      	cmp	r0, #4
 80135d0:	d10a      	bne.n	80135e8 <rcu_adc_clock_config+0x2c>
 80135d2:	604b      	str	r3, [r1, #4]
 80135d4:	4770      	bx	lr
 80135d6:	2807      	cmp	r0, #7
 80135d8:	d1fb      	bne.n	80135d2 <rcu_adc_clock_config+0x16>
 80135da:	4a06      	ldr	r2, [pc, #24]	; (80135f4 <rcu_adc_clock_config+0x38>)
 80135dc:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 80135e0:	4313      	orrs	r3, r2
 80135e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135e6:	e7f4      	b.n	80135d2 <rcu_adc_clock_config+0x16>
 80135e8:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 80135ec:	e7f1      	b.n	80135d2 <rcu_adc_clock_config+0x16>
 80135ee:	bf00      	nop
 80135f0:	40021000 	andmi	r1, r2, r0
 80135f4:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

080135f8 <rcu_flag_get>:
 80135f8:	0983      	lsrs	r3, r0, #6
 80135fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80135fe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8013602:	681a      	ldr	r2, [r3, #0]
 8013604:	2301      	movs	r3, #1
 8013606:	f000 001f 	and.w	r0, r0, #31
 801360a:	4083      	lsls	r3, r0
 801360c:	4213      	tst	r3, r2
 801360e:	bf14      	ite	ne
 8013610:	2001      	movne	r0, #1
 8013612:	2000      	moveq	r0, #0
 8013614:	4770      	bx	lr
	...

08013618 <rcu_osci_stab_wait>:
 8013618:	281a      	cmp	r0, #26
 801361a:	b508      	push	{r3, lr}
 801361c:	d051      	beq.n	80136c2 <rcu_osci_stab_wait+0xaa>
 801361e:	d806      	bhi.n	801362e <rcu_osci_stab_wait+0x16>
 8013620:	2810      	cmp	r0, #16
 8013622:	d015      	beq.n	8013650 <rcu_osci_stab_wait+0x38>
 8013624:	2818      	cmp	r0, #24
 8013626:	d043      	beq.n	80136b0 <rcu_osci_stab_wait+0x98>
 8013628:	b368      	cbz	r0, 8013686 <rcu_osci_stab_wait+0x6e>
 801362a:	2000      	movs	r0, #0
 801362c:	bd08      	pop	{r3, pc}
 801362e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8013632:	d01c      	beq.n	801366e <rcu_osci_stab_wait+0x56>
 8013634:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8013638:	d02f      	beq.n	801369a <rcu_osci_stab_wait+0x82>
 801363a:	281c      	cmp	r0, #28
 801363c:	d1f5      	bne.n	801362a <rcu_osci_stab_wait+0x12>
 801363e:	4925      	ldr	r1, [pc, #148]	; (80136d4 <rcu_osci_stab_wait+0xbc>)
 8013640:	201d      	movs	r0, #29
 8013642:	f7ff ffd9 	bl	80135f8 <rcu_flag_get>
 8013646:	b908      	cbnz	r0, 801364c <rcu_osci_stab_wait+0x34>
 8013648:	3901      	subs	r1, #1
 801364a:	d1f9      	bne.n	8013640 <rcu_osci_stab_wait+0x28>
 801364c:	201d      	movs	r0, #29
 801364e:	e008      	b.n	8013662 <rcu_osci_stab_wait+0x4a>
 8013650:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013654:	2011      	movs	r0, #17
 8013656:	f7ff ffcf 	bl	80135f8 <rcu_flag_get>
 801365a:	b908      	cbnz	r0, 8013660 <rcu_osci_stab_wait+0x48>
 801365c:	3901      	subs	r1, #1
 801365e:	d1f9      	bne.n	8013654 <rcu_osci_stab_wait+0x3c>
 8013660:	2011      	movs	r0, #17
 8013662:	f7ff ffc9 	bl	80135f8 <rcu_flag_get>
 8013666:	3800      	subs	r0, #0
 8013668:	bf18      	it	ne
 801366a:	2001      	movne	r0, #1
 801366c:	e7de      	b.n	801362c <rcu_osci_stab_wait+0x14>
 801366e:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 8013672:	f640 0001 	movw	r0, #2049	; 0x801
 8013676:	f7ff ffbf 	bl	80135f8 <rcu_flag_get>
 801367a:	b908      	cbnz	r0, 8013680 <rcu_osci_stab_wait+0x68>
 801367c:	3901      	subs	r1, #1
 801367e:	d1f8      	bne.n	8013672 <rcu_osci_stab_wait+0x5a>
 8013680:	f640 0001 	movw	r0, #2049	; 0x801
 8013684:	e7ed      	b.n	8013662 <rcu_osci_stab_wait+0x4a>
 8013686:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 801368a:	2001      	movs	r0, #1
 801368c:	f7ff ffb4 	bl	80135f8 <rcu_flag_get>
 8013690:	b908      	cbnz	r0, 8013696 <rcu_osci_stab_wait+0x7e>
 8013692:	3901      	subs	r1, #1
 8013694:	d1f9      	bne.n	801368a <rcu_osci_stab_wait+0x72>
 8013696:	2001      	movs	r0, #1
 8013698:	e7e3      	b.n	8013662 <rcu_osci_stab_wait+0x4a>
 801369a:	490e      	ldr	r1, [pc, #56]	; (80136d4 <rcu_osci_stab_wait+0xbc>)
 801369c:	f640 1001 	movw	r0, #2305	; 0x901
 80136a0:	f7ff ffaa 	bl	80135f8 <rcu_flag_get>
 80136a4:	b908      	cbnz	r0, 80136aa <rcu_osci_stab_wait+0x92>
 80136a6:	3901      	subs	r1, #1
 80136a8:	d1f8      	bne.n	801369c <rcu_osci_stab_wait+0x84>
 80136aa:	f640 1001 	movw	r0, #2305	; 0x901
 80136ae:	e7d8      	b.n	8013662 <rcu_osci_stab_wait+0x4a>
 80136b0:	4908      	ldr	r1, [pc, #32]	; (80136d4 <rcu_osci_stab_wait+0xbc>)
 80136b2:	2019      	movs	r0, #25
 80136b4:	f7ff ffa0 	bl	80135f8 <rcu_flag_get>
 80136b8:	b908      	cbnz	r0, 80136be <rcu_osci_stab_wait+0xa6>
 80136ba:	3901      	subs	r1, #1
 80136bc:	d1f9      	bne.n	80136b2 <rcu_osci_stab_wait+0x9a>
 80136be:	2019      	movs	r0, #25
 80136c0:	e7cf      	b.n	8013662 <rcu_osci_stab_wait+0x4a>
 80136c2:	4904      	ldr	r1, [pc, #16]	; (80136d4 <rcu_osci_stab_wait+0xbc>)
 80136c4:	201b      	movs	r0, #27
 80136c6:	f7ff ff97 	bl	80135f8 <rcu_flag_get>
 80136ca:	b908      	cbnz	r0, 80136d0 <rcu_osci_stab_wait+0xb8>
 80136cc:	3901      	subs	r1, #1
 80136ce:	d1f9      	bne.n	80136c4 <rcu_osci_stab_wait+0xac>
 80136d0:	201b      	movs	r0, #27
 80136d2:	e7c6      	b.n	8013662 <rcu_osci_stab_wait+0x4a>
 80136d4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080136d8 <rcu_osci_on>:
 80136d8:	f7ff bf2a 	b.w	8013530 <rcu_periph_clock_enable>

080136dc <rcu_clock_freq_get>:
 80136dc:	4b3e      	ldr	r3, [pc, #248]	; (80137d8 <rcu_clock_freq_get+0xfc>)
 80136de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136e0:	4604      	mov	r4, r0
 80136e2:	461f      	mov	r7, r3
 80136e4:	b089      	sub	sp, #36	; 0x24
 80136e6:	ad04      	add	r5, sp, #16
 80136e8:	f103 0610 	add.w	r6, r3, #16
 80136ec:	462a      	mov	r2, r5
 80136ee:	6818      	ldr	r0, [r3, #0]
 80136f0:	6859      	ldr	r1, [r3, #4]
 80136f2:	3308      	adds	r3, #8
 80136f4:	c203      	stmia	r2!, {r0, r1}
 80136f6:	42b3      	cmp	r3, r6
 80136f8:	4615      	mov	r5, r2
 80136fa:	d1f7      	bne.n	80136ec <rcu_clock_freq_get+0x10>
 80136fc:	466b      	mov	r3, sp
 80136fe:	6938      	ldr	r0, [r7, #16]
 8013700:	6871      	ldr	r1, [r6, #4]
 8013702:	4a36      	ldr	r2, [pc, #216]	; (80137dc <rcu_clock_freq_get+0x100>)
 8013704:	c303      	stmia	r3!, {r0, r1}
 8013706:	c303      	stmia	r3!, {r0, r1}
 8013708:	6853      	ldr	r3, [r2, #4]
 801370a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801370e:	2b01      	cmp	r3, #1
 8013710:	d053      	beq.n	80137ba <rcu_clock_freq_get+0xde>
 8013712:	2b02      	cmp	r3, #2
 8013714:	d153      	bne.n	80137be <rcu_clock_freq_get+0xe2>
 8013716:	6853      	ldr	r3, [r2, #4]
 8013718:	03dd      	lsls	r5, r3, #15
 801371a:	d523      	bpl.n	8013764 <rcu_clock_freq_get+0x88>
 801371c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801371e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8013722:	4b2f      	ldr	r3, [pc, #188]	; (80137e0 <rcu_clock_freq_get+0x104>)
 8013724:	d00e      	beq.n	8013744 <rcu_clock_freq_get+0x68>
 8013726:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8013728:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 801372a:	f3c1 1103 	ubfx	r1, r1, #4, #4
 801372e:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8013732:	3101      	adds	r1, #1
 8013734:	280f      	cmp	r0, #15
 8013736:	f100 0502 	add.w	r5, r0, #2
 801373a:	fbb3 f3f1 	udiv	r3, r3, r1
 801373e:	bf08      	it	eq
 8013740:	2514      	moveq	r5, #20
 8013742:	436b      	muls	r3, r5
 8013744:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8013746:	f001 010f 	and.w	r1, r1, #15
 801374a:	3101      	adds	r1, #1
 801374c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013750:	6851      	ldr	r1, [r2, #4]
 8013752:	6850      	ldr	r0, [r2, #4]
 8013754:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8013758:	0080      	lsls	r0, r0, #2
 801375a:	d505      	bpl.n	8013768 <rcu_clock_freq_get+0x8c>
 801375c:	f041 0110 	orr.w	r1, r1, #16
 8013760:	1c48      	adds	r0, r1, #1
 8013762:	e007      	b.n	8013774 <rcu_clock_freq_get+0x98>
 8013764:	4b1f      	ldr	r3, [pc, #124]	; (80137e4 <rcu_clock_freq_get+0x108>)
 8013766:	e7f3      	b.n	8013750 <rcu_clock_freq_get+0x74>
 8013768:	290f      	cmp	r1, #15
 801376a:	d0f9      	beq.n	8013760 <rcu_clock_freq_get+0x84>
 801376c:	290d      	cmp	r1, #13
 801376e:	f101 0002 	add.w	r0, r1, #2
 8013772:	d01d      	beq.n	80137b0 <rcu_clock_freq_get+0xd4>
 8013774:	4358      	muls	r0, r3
 8013776:	6853      	ldr	r3, [r2, #4]
 8013778:	6851      	ldr	r1, [r2, #4]
 801377a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801377e:	6852      	ldr	r2, [r2, #4]
 8013780:	3320      	adds	r3, #32
 8013782:	446b      	add	r3, sp
 8013784:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8013788:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 801378c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8013790:	3120      	adds	r1, #32
 8013792:	3220      	adds	r2, #32
 8013794:	4469      	add	r1, sp
 8013796:	446a      	add	r2, sp
 8013798:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 801379c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80137a0:	fa20 f303 	lsr.w	r3, r0, r3
 80137a4:	2c03      	cmp	r4, #3
 80137a6:	d815      	bhi.n	80137d4 <rcu_clock_freq_get+0xf8>
 80137a8:	e8df f004 	tbb	[pc, r4]
 80137ac:	110e0b0c 	tstne	lr, ip, lsl #22
 80137b0:	2006      	movs	r0, #6
 80137b2:	0859      	lsrs	r1, r3, #1
 80137b4:	fb00 1003 	mla	r0, r0, r3, r1
 80137b8:	e7dd      	b.n	8013776 <rcu_clock_freq_get+0x9a>
 80137ba:	4809      	ldr	r0, [pc, #36]	; (80137e0 <rcu_clock_freq_get+0x104>)
 80137bc:	e7db      	b.n	8013776 <rcu_clock_freq_get+0x9a>
 80137be:	480a      	ldr	r0, [pc, #40]	; (80137e8 <rcu_clock_freq_get+0x10c>)
 80137c0:	e7d9      	b.n	8013776 <rcu_clock_freq_get+0x9a>
 80137c2:	4618      	mov	r0, r3
 80137c4:	b009      	add	sp, #36	; 0x24
 80137c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137c8:	fa23 f001 	lsr.w	r0, r3, r1
 80137cc:	e7fa      	b.n	80137c4 <rcu_clock_freq_get+0xe8>
 80137ce:	fa23 f002 	lsr.w	r0, r3, r2
 80137d2:	e7f7      	b.n	80137c4 <rcu_clock_freq_get+0xe8>
 80137d4:	2000      	movs	r0, #0
 80137d6:	e7f5      	b.n	80137c4 <rcu_clock_freq_get+0xe8>
 80137d8:	08015025 	stmdaeq	r1, {r0, r2, r5, ip, lr}
 80137dc:	40021000 	andmi	r1, r2, r0
 80137e0:	017d7840 	cmneq	sp, r0, asr #16
 80137e4:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80137e8:	007a1200 	rsbseq	r1, sl, r0, lsl #4

080137ec <timer_deinit>:
 80137ec:	b508      	push	{r3, lr}
 80137ee:	4b2d      	ldr	r3, [pc, #180]	; (80138a4 <timer_deinit+0xb8>)
 80137f0:	4298      	cmp	r0, r3
 80137f2:	d048      	beq.n	8013886 <timer_deinit+0x9a>
 80137f4:	d816      	bhi.n	8013824 <timer_deinit+0x38>
 80137f6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80137fa:	4298      	cmp	r0, r3
 80137fc:	d03c      	beq.n	8013878 <timer_deinit+0x8c>
 80137fe:	d807      	bhi.n	8013810 <timer_deinit+0x24>
 8013800:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8013804:	d02a      	beq.n	801385c <timer_deinit+0x70>
 8013806:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 801380a:	4298      	cmp	r0, r3
 801380c:	d02d      	beq.n	801386a <timer_deinit+0x7e>
 801380e:	bd08      	pop	{r3, pc}
 8013810:	4b25      	ldr	r3, [pc, #148]	; (80138a8 <timer_deinit+0xbc>)
 8013812:	4298      	cmp	r0, r3
 8013814:	d1fb      	bne.n	801380e <timer_deinit+0x22>
 8013816:	f240 4003 	movw	r0, #1027	; 0x403
 801381a:	f7ff fea4 	bl	8013566 <rcu_periph_reset_enable>
 801381e:	f240 4003 	movw	r0, #1027	; 0x403
 8013822:	e017      	b.n	8013854 <timer_deinit+0x68>
 8013824:	4b21      	ldr	r3, [pc, #132]	; (80138ac <timer_deinit+0xc0>)
 8013826:	4298      	cmp	r0, r3
 8013828:	d00e      	beq.n	8013848 <timer_deinit+0x5c>
 801382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801382e:	4298      	cmp	r0, r3
 8013830:	d030      	beq.n	8013894 <timer_deinit+0xa8>
 8013832:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8013836:	4298      	cmp	r0, r3
 8013838:	d1e9      	bne.n	801380e <timer_deinit+0x22>
 801383a:	f240 4005 	movw	r0, #1029	; 0x405
 801383e:	f7ff fe92 	bl	8013566 <rcu_periph_reset_enable>
 8013842:	f240 4005 	movw	r0, #1029	; 0x405
 8013846:	e005      	b.n	8013854 <timer_deinit+0x68>
 8013848:	f240 300b 	movw	r0, #779	; 0x30b
 801384c:	f7ff fe8b 	bl	8013566 <rcu_periph_reset_enable>
 8013850:	f240 300b 	movw	r0, #779	; 0x30b
 8013854:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013858:	f7ff be87 	b.w	801356a <rcu_periph_reset_disable>
 801385c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013860:	f7ff fe81 	bl	8013566 <rcu_periph_reset_enable>
 8013864:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013868:	e7f4      	b.n	8013854 <timer_deinit+0x68>
 801386a:	f240 4001 	movw	r0, #1025	; 0x401
 801386e:	f7ff fe7a 	bl	8013566 <rcu_periph_reset_enable>
 8013872:	f240 4001 	movw	r0, #1025	; 0x401
 8013876:	e7ed      	b.n	8013854 <timer_deinit+0x68>
 8013878:	f240 4002 	movw	r0, #1026	; 0x402
 801387c:	f7ff fe73 	bl	8013566 <rcu_periph_reset_enable>
 8013880:	f240 4002 	movw	r0, #1026	; 0x402
 8013884:	e7e6      	b.n	8013854 <timer_deinit+0x68>
 8013886:	f240 4004 	movw	r0, #1028	; 0x404
 801388a:	f7ff fe6c 	bl	8013566 <rcu_periph_reset_enable>
 801388e:	f240 4004 	movw	r0, #1028	; 0x404
 8013892:	e7df      	b.n	8013854 <timer_deinit+0x68>
 8013894:	f240 300d 	movw	r0, #781	; 0x30d
 8013898:	f7ff fe65 	bl	8013566 <rcu_periph_reset_enable>
 801389c:	f240 300d 	movw	r0, #781	; 0x30d
 80138a0:	e7d8      	b.n	8013854 <timer_deinit+0x68>
 80138a2:	bf00      	nop
 80138a4:	40001000 	andmi	r1, r0, r0
 80138a8:	40000c00 	andmi	r0, r0, r0, lsl #24
 80138ac:	40012c00 	andmi	r2, r1, r0, lsl #24

080138b0 <timer_init>:
 80138b0:	880b      	ldrh	r3, [r1, #0]
 80138b2:	6283      	str	r3, [r0, #40]	; 0x28
 80138b4:	4b26      	ldr	r3, [pc, #152]	; (8013950 <timer_init+0xa0>)
 80138b6:	4298      	cmp	r0, r3
 80138b8:	d018      	beq.n	80138ec <timer_init+0x3c>
 80138ba:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 80138be:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80138c2:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 80138c6:	d011      	beq.n	80138ec <timer_init+0x3c>
 80138c8:	4a22      	ldr	r2, [pc, #136]	; (8013954 <timer_init+0xa4>)
 80138ca:	4290      	cmp	r0, r2
 80138cc:	d00e      	beq.n	80138ec <timer_init+0x3c>
 80138ce:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80138d2:	4290      	cmp	r0, r2
 80138d4:	d00a      	beq.n	80138ec <timer_init+0x3c>
 80138d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80138da:	4293      	cmp	r3, r2
 80138dc:	d006      	beq.n	80138ec <timer_init+0x3c>
 80138de:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 80138e2:	4293      	cmp	r3, r2
 80138e4:	d002      	beq.n	80138ec <timer_init+0x3c>
 80138e6:	4b1c      	ldr	r3, [pc, #112]	; (8013958 <timer_init+0xa8>)
 80138e8:	4298      	cmp	r0, r3
 80138ea:	d10f      	bne.n	801390c <timer_init+0x5c>
 80138ec:	6803      	ldr	r3, [r0, #0]
 80138ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80138f2:	6003      	str	r3, [r0, #0]
 80138f4:	884b      	ldrh	r3, [r1, #2]
 80138f6:	6802      	ldr	r2, [r0, #0]
 80138f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80138fc:	4313      	orrs	r3, r2
 80138fe:	6003      	str	r3, [r0, #0]
 8013900:	888b      	ldrh	r3, [r1, #4]
 8013902:	6802      	ldr	r2, [r0, #0]
 8013904:	f003 0310 	and.w	r3, r3, #16
 8013908:	4313      	orrs	r3, r2
 801390a:	6003      	str	r3, [r0, #0]
 801390c:	688b      	ldr	r3, [r1, #8]
 801390e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8013910:	4b12      	ldr	r3, [pc, #72]	; (801395c <timer_init+0xac>)
 8013912:	4298      	cmp	r0, r3
 8013914:	d003      	beq.n	801391e <timer_init+0x6e>
 8013916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801391a:	4298      	cmp	r0, r3
 801391c:	d104      	bne.n	8013928 <timer_init+0x78>
 801391e:	6943      	ldr	r3, [r0, #20]
 8013920:	f043 0301 	orr.w	r3, r3, #1
 8013924:	6143      	str	r3, [r0, #20]
 8013926:	4770      	bx	lr
 8013928:	6803      	ldr	r3, [r0, #0]
 801392a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801392e:	6003      	str	r3, [r0, #0]
 8013930:	898b      	ldrh	r3, [r1, #12]
 8013932:	6802      	ldr	r2, [r0, #0]
 8013934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013938:	4313      	orrs	r3, r2
 801393a:	6003      	str	r3, [r0, #0]
 801393c:	4b04      	ldr	r3, [pc, #16]	; (8013950 <timer_init+0xa0>)
 801393e:	4298      	cmp	r0, r3
 8013940:	d002      	beq.n	8013948 <timer_init+0x98>
 8013942:	4b04      	ldr	r3, [pc, #16]	; (8013954 <timer_init+0xa4>)
 8013944:	4298      	cmp	r0, r3
 8013946:	d1ea      	bne.n	801391e <timer_init+0x6e>
 8013948:	7b8b      	ldrb	r3, [r1, #14]
 801394a:	6303      	str	r3, [r0, #48]	; 0x30
 801394c:	e7e7      	b.n	801391e <timer_init+0x6e>
 801394e:	bf00      	nop
 8013950:	40012c00 	andmi	r2, r1, r0, lsl #24
 8013954:	40013400 	andmi	r3, r1, r0, lsl #8
 8013958:	40002000 	andmi	r2, r0, r0
 801395c:	40001000 	andmi	r1, r0, r0

08013960 <timer_enable>:
 8013960:	6803      	ldr	r3, [r0, #0]
 8013962:	f043 0301 	orr.w	r3, r3, #1
 8013966:	6003      	str	r3, [r0, #0]
 8013968:	4770      	bx	lr

0801396a <timer_channel_output_mode_config>:
 801396a:	2903      	cmp	r1, #3
 801396c:	d81a      	bhi.n	80139a4 <timer_channel_output_mode_config+0x3a>
 801396e:	e8df f001 	tbb	[pc, r1]
 8013972:	1a120a02 	bne	8496182 <__exidx_end+0x47ee0a>
 8013976:	6983      	ldr	r3, [r0, #24]
 8013978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801397c:	6183      	str	r3, [r0, #24]
 801397e:	6983      	ldr	r3, [r0, #24]
 8013980:	4313      	orrs	r3, r2
 8013982:	6183      	str	r3, [r0, #24]
 8013984:	4770      	bx	lr
 8013986:	6983      	ldr	r3, [r0, #24]
 8013988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801398c:	6183      	str	r3, [r0, #24]
 801398e:	6983      	ldr	r3, [r0, #24]
 8013990:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013994:	e7f5      	b.n	8013982 <timer_channel_output_mode_config+0x18>
 8013996:	69c3      	ldr	r3, [r0, #28]
 8013998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801399c:	61c3      	str	r3, [r0, #28]
 801399e:	69c3      	ldr	r3, [r0, #28]
 80139a0:	4313      	orrs	r3, r2
 80139a2:	61c3      	str	r3, [r0, #28]
 80139a4:	4770      	bx	lr
 80139a6:	69c3      	ldr	r3, [r0, #28]
 80139a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80139ac:	61c3      	str	r3, [r0, #28]
 80139ae:	69c3      	ldr	r3, [r0, #28]
 80139b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80139b4:	e7f5      	b.n	80139a2 <timer_channel_output_mode_config+0x38>

080139b6 <timer_channel_output_pulse_value_config>:
 80139b6:	2903      	cmp	r1, #3
 80139b8:	d80a      	bhi.n	80139d0 <timer_channel_output_pulse_value_config+0x1a>
 80139ba:	e8df f001 	tbb	[pc, r1]
 80139be:	08060402 	stmdaeq	r6, {r1, sl}
 80139c2:	6342      	str	r2, [r0, #52]	; 0x34
 80139c4:	4770      	bx	lr
 80139c6:	6382      	str	r2, [r0, #56]	; 0x38
 80139c8:	4770      	bx	lr
 80139ca:	63c2      	str	r2, [r0, #60]	; 0x3c
 80139cc:	4770      	bx	lr
 80139ce:	6402      	str	r2, [r0, #64]	; 0x40
 80139d0:	4770      	bx	lr

080139d2 <timer_interrupt_enable>:
 80139d2:	68c3      	ldr	r3, [r0, #12]
 80139d4:	430b      	orrs	r3, r1
 80139d6:	60c3      	str	r3, [r0, #12]
 80139d8:	4770      	bx	lr

080139da <timer_interrupt_flag_clear>:
 80139da:	43c9      	mvns	r1, r1
 80139dc:	6101      	str	r1, [r0, #16]
 80139de:	4770      	bx	lr

080139e0 <timer_flag_clear>:
 80139e0:	43c9      	mvns	r1, r1
 80139e2:	6101      	str	r1, [r0, #16]
 80139e4:	4770      	bx	lr
	...

080139e8 <usart_deinit>:
 80139e8:	b508      	push	{r3, lr}
 80139ea:	4b1d      	ldr	r3, [pc, #116]	; (8013a60 <usart_deinit+0x78>)
 80139ec:	4298      	cmp	r0, r3
 80139ee:	d028      	beq.n	8013a42 <usart_deinit+0x5a>
 80139f0:	d808      	bhi.n	8013a04 <usart_deinit+0x1c>
 80139f2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80139f6:	4298      	cmp	r0, r3
 80139f8:	d015      	beq.n	8013a26 <usart_deinit+0x3e>
 80139fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80139fe:	4298      	cmp	r0, r3
 8013a00:	d018      	beq.n	8013a34 <usart_deinit+0x4c>
 8013a02:	bd08      	pop	{r3, pc}
 8013a04:	4b17      	ldr	r3, [pc, #92]	; (8013a64 <usart_deinit+0x7c>)
 8013a06:	4298      	cmp	r0, r3
 8013a08:	d022      	beq.n	8013a50 <usart_deinit+0x68>
 8013a0a:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8013a0e:	4298      	cmp	r0, r3
 8013a10:	d1f7      	bne.n	8013a02 <usart_deinit+0x1a>
 8013a12:	f240 300e 	movw	r0, #782	; 0x30e
 8013a16:	f7ff fda6 	bl	8013566 <rcu_periph_reset_enable>
 8013a1a:	f240 300e 	movw	r0, #782	; 0x30e
 8013a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013a22:	f7ff bda2 	b.w	801356a <rcu_periph_reset_disable>
 8013a26:	f240 4011 	movw	r0, #1041	; 0x411
 8013a2a:	f7ff fd9c 	bl	8013566 <rcu_periph_reset_enable>
 8013a2e:	f240 4011 	movw	r0, #1041	; 0x411
 8013a32:	e7f4      	b.n	8013a1e <usart_deinit+0x36>
 8013a34:	f240 4012 	movw	r0, #1042	; 0x412
 8013a38:	f7ff fd95 	bl	8013566 <rcu_periph_reset_enable>
 8013a3c:	f240 4012 	movw	r0, #1042	; 0x412
 8013a40:	e7ed      	b.n	8013a1e <usart_deinit+0x36>
 8013a42:	f240 4013 	movw	r0, #1043	; 0x413
 8013a46:	f7ff fd8e 	bl	8013566 <rcu_periph_reset_enable>
 8013a4a:	f240 4013 	movw	r0, #1043	; 0x413
 8013a4e:	e7e6      	b.n	8013a1e <usart_deinit+0x36>
 8013a50:	f240 4014 	movw	r0, #1044	; 0x414
 8013a54:	f7ff fd87 	bl	8013566 <rcu_periph_reset_enable>
 8013a58:	f240 4014 	movw	r0, #1044	; 0x414
 8013a5c:	e7df      	b.n	8013a1e <usart_deinit+0x36>
 8013a5e:	bf00      	nop
 8013a60:	40004c00 	andmi	r4, r0, r0, lsl #24
 8013a64:	40005000 	andmi	r5, r0, r0

08013a68 <usart_baudrate_set>:
 8013a68:	b538      	push	{r3, r4, r5, lr}
 8013a6a:	4b11      	ldr	r3, [pc, #68]	; (8013ab0 <usart_baudrate_set+0x48>)
 8013a6c:	4604      	mov	r4, r0
 8013a6e:	4298      	cmp	r0, r3
 8013a70:	460d      	mov	r5, r1
 8013a72:	d01b      	beq.n	8013aac <usart_baudrate_set+0x44>
 8013a74:	d809      	bhi.n	8013a8a <usart_baudrate_set+0x22>
 8013a76:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013a7a:	4298      	cmp	r0, r3
 8013a7c:	d016      	beq.n	8013aac <usart_baudrate_set+0x44>
 8013a7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013a82:	4298      	cmp	r0, r3
 8013a84:	d012      	beq.n	8013aac <usart_baudrate_set+0x44>
 8013a86:	2000      	movs	r0, #0
 8013a88:	e009      	b.n	8013a9e <usart_baudrate_set+0x36>
 8013a8a:	4b0a      	ldr	r3, [pc, #40]	; (8013ab4 <usart_baudrate_set+0x4c>)
 8013a8c:	4298      	cmp	r0, r3
 8013a8e:	d00d      	beq.n	8013aac <usart_baudrate_set+0x44>
 8013a90:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8013a94:	4298      	cmp	r0, r3
 8013a96:	d1f6      	bne.n	8013a86 <usart_baudrate_set+0x1e>
 8013a98:	2003      	movs	r0, #3
 8013a9a:	f7ff fe1f 	bl	80136dc <rcu_clock_freq_get>
 8013a9e:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 8013aa2:	fbb1 f1f5 	udiv	r1, r1, r5
 8013aa6:	b289      	uxth	r1, r1
 8013aa8:	60a1      	str	r1, [r4, #8]
 8013aaa:	bd38      	pop	{r3, r4, r5, pc}
 8013aac:	2002      	movs	r0, #2
 8013aae:	e7f4      	b.n	8013a9a <usart_baudrate_set+0x32>
 8013ab0:	40004c00 	andmi	r4, r0, r0, lsl #24
 8013ab4:	40005000 	andmi	r5, r0, r0

08013ab8 <usart_parity_config>:
 8013ab8:	68c3      	ldr	r3, [r0, #12]
 8013aba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8013abe:	60c3      	str	r3, [r0, #12]
 8013ac0:	68c3      	ldr	r3, [r0, #12]
 8013ac2:	430b      	orrs	r3, r1
 8013ac4:	60c3      	str	r3, [r0, #12]
 8013ac6:	4770      	bx	lr

08013ac8 <usart_word_length_set>:
 8013ac8:	68c3      	ldr	r3, [r0, #12]
 8013aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ace:	60c3      	str	r3, [r0, #12]
 8013ad0:	68c3      	ldr	r3, [r0, #12]
 8013ad2:	430b      	orrs	r3, r1
 8013ad4:	60c3      	str	r3, [r0, #12]
 8013ad6:	4770      	bx	lr

08013ad8 <usart_stop_bit_set>:
 8013ad8:	6903      	ldr	r3, [r0, #16]
 8013ada:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8013ade:	6103      	str	r3, [r0, #16]
 8013ae0:	6903      	ldr	r3, [r0, #16]
 8013ae2:	430b      	orrs	r3, r1
 8013ae4:	6103      	str	r3, [r0, #16]
 8013ae6:	4770      	bx	lr

08013ae8 <usart_transmit_config>:
 8013ae8:	68c3      	ldr	r3, [r0, #12]
 8013aea:	f023 0308 	bic.w	r3, r3, #8
 8013aee:	430b      	orrs	r3, r1
 8013af0:	60c3      	str	r3, [r0, #12]
 8013af2:	4770      	bx	lr

08013af4 <usart_receive_config>:
 8013af4:	68c3      	ldr	r3, [r0, #12]
 8013af6:	f023 0304 	bic.w	r3, r3, #4
 8013afa:	430b      	orrs	r3, r1
 8013afc:	60c3      	str	r3, [r0, #12]
 8013afe:	4770      	bx	lr

08013b00 <usart_hardware_flow_rts_config>:
 8013b00:	6943      	ldr	r3, [r0, #20]
 8013b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b06:	430b      	orrs	r3, r1
 8013b08:	6143      	str	r3, [r0, #20]
 8013b0a:	4770      	bx	lr

08013b0c <usart_hardware_flow_cts_config>:
 8013b0c:	6943      	ldr	r3, [r0, #20]
 8013b0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013b12:	430b      	orrs	r3, r1
 8013b14:	6143      	str	r3, [r0, #20]
 8013b16:	4770      	bx	lr

08013b18 <usart_dma_transmit_config>:
 8013b18:	6943      	ldr	r3, [r0, #20]
 8013b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013b1e:	430b      	orrs	r3, r1
 8013b20:	6143      	str	r3, [r0, #20]
 8013b22:	4770      	bx	lr

08013b24 <usart_flag_get>:
 8013b24:	098b      	lsrs	r3, r1, #6
 8013b26:	581a      	ldr	r2, [r3, r0]
 8013b28:	2301      	movs	r3, #1
 8013b2a:	f001 011f 	and.w	r1, r1, #31
 8013b2e:	408b      	lsls	r3, r1
 8013b30:	4213      	tst	r3, r2
 8013b32:	bf14      	ite	ne
 8013b34:	2001      	movne	r0, #1
 8013b36:	2000      	moveq	r0, #0
 8013b38:	4770      	bx	lr

08013b3a <usart_interrupt_enable>:
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	b510      	push	{r4, lr}
 8013b3e:	f3c1 1289 	ubfx	r2, r1, #6, #10
 8013b42:	5814      	ldr	r4, [r2, r0]
 8013b44:	f001 011f 	and.w	r1, r1, #31
 8013b48:	408b      	lsls	r3, r1
 8013b4a:	4323      	orrs	r3, r4
 8013b4c:	5013      	str	r3, [r2, r0]
 8013b4e:	bd10      	pop	{r4, pc}

08013b50 <usart_interrupt_disable>:
 8013b50:	2201      	movs	r2, #1
 8013b52:	b510      	push	{r4, lr}
 8013b54:	f3c1 1489 	ubfx	r4, r1, #6, #10
 8013b58:	5823      	ldr	r3, [r4, r0]
 8013b5a:	f001 011f 	and.w	r1, r1, #31
 8013b5e:	408a      	lsls	r2, r1
 8013b60:	ea23 0302 	bic.w	r3, r3, r2
 8013b64:	5023      	str	r3, [r4, r0]
 8013b66:	bd10      	pop	{r4, pc}

08013b68 <usart_interrupt_flag_clear>:
 8013b68:	2201      	movs	r2, #1
 8013b6a:	b510      	push	{r4, lr}
 8013b6c:	0d8c      	lsrs	r4, r1, #22
 8013b6e:	5823      	ldr	r3, [r4, r0]
 8013b70:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8013b74:	408a      	lsls	r2, r1
 8013b76:	ea23 0302 	bic.w	r3, r3, r2
 8013b7a:	5023      	str	r3, [r4, r0]
 8013b7c:	bd10      	pop	{r4, pc}
	...

08013b80 <emac_start>:
 8013b80:	b510      	push	{r4, lr}
 8013b82:	4604      	mov	r4, r0
 8013b84:	f240 6002 	movw	r0, #1538	; 0x602
 8013b88:	f7ff fcd2 	bl	8013530 <rcu_periph_clock_enable>
 8013b8c:	f240 6003 	movw	r0, #1539	; 0x603
 8013b90:	f7ff fcce 	bl	8013530 <rcu_periph_clock_enable>
 8013b94:	f240 6004 	movw	r0, #1540	; 0x604
 8013b98:	f7ff fcca 	bl	8013530 <rcu_periph_clock_enable>
 8013b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013ba0:	2203      	movs	r2, #3
 8013ba2:	2118      	movs	r1, #24
 8013ba4:	4846      	ldr	r0, [pc, #280]	; (8013cc0 <emac_start+0x140>)
 8013ba6:	f7ff fc2b 	bl	8013400 <gpio_init>
 8013baa:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8013bae:	f7ff fcbf 	bl	8013530 <rcu_periph_clock_enable>
 8013bb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8013bb6:	f7ff fcf5 	bl	80135a4 <rcu_pll2_config>
 8013bba:	201c      	movs	r0, #28
 8013bbc:	f7ff fd8c 	bl	80136d8 <rcu_osci_on>
 8013bc0:	201c      	movs	r0, #28
 8013bc2:	f7ff fd29 	bl	8013618 <rcu_osci_stab_wait>
 8013bc6:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 8013bca:	f7ff fce1 	bl	8013590 <rcu_ckout0_config>
 8013bce:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8013bd2:	f7ff fc99 	bl	8013508 <gpio_ethernet_phy_select>
 8013bd6:	2302      	movs	r3, #2
 8013bd8:	2203      	movs	r2, #3
 8013bda:	2104      	movs	r1, #4
 8013bdc:	4838      	ldr	r0, [pc, #224]	; (8013cc0 <emac_start+0x140>)
 8013bde:	f7ff fc0f 	bl	8013400 <gpio_init>
 8013be2:	2304      	movs	r3, #4
 8013be4:	2203      	movs	r2, #3
 8013be6:	2118      	movs	r1, #24
 8013be8:	4835      	ldr	r0, [pc, #212]	; (8013cc0 <emac_start+0x140>)
 8013bea:	f7ff fc09 	bl	8013400 <gpio_init>
 8013bee:	2380      	movs	r3, #128	; 0x80
 8013bf0:	2203      	movs	r2, #3
 8013bf2:	2104      	movs	r1, #4
 8013bf4:	4832      	ldr	r0, [pc, #200]	; (8013cc0 <emac_start+0x140>)
 8013bf6:	f7ff fc03 	bl	8013400 <gpio_init>
 8013bfa:	2302      	movs	r3, #2
 8013bfc:	2203      	movs	r2, #3
 8013bfe:	2118      	movs	r1, #24
 8013c00:	4830      	ldr	r0, [pc, #192]	; (8013cc4 <emac_start+0x144>)
 8013c02:	f7ff fbfd 	bl	8013400 <gpio_init>
 8013c06:	2310      	movs	r3, #16
 8013c08:	2203      	movs	r2, #3
 8013c0a:	2104      	movs	r1, #4
 8013c0c:	482d      	ldr	r0, [pc, #180]	; (8013cc4 <emac_start+0x144>)
 8013c0e:	f7ff fbf7 	bl	8013400 <gpio_init>
 8013c12:	2320      	movs	r3, #32
 8013c14:	2203      	movs	r2, #3
 8013c16:	2104      	movs	r1, #4
 8013c18:	482a      	ldr	r0, [pc, #168]	; (8013cc4 <emac_start+0x144>)
 8013c1a:	f7ff fbf1 	bl	8013400 <gpio_init>
 8013c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013c22:	2203      	movs	r2, #3
 8013c24:	2118      	movs	r1, #24
 8013c26:	4828      	ldr	r0, [pc, #160]	; (8013cc8 <emac_start+0x148>)
 8013c28:	f7ff fbea 	bl	8013400 <gpio_init>
 8013c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013c30:	2203      	movs	r2, #3
 8013c32:	2118      	movs	r1, #24
 8013c34:	4824      	ldr	r0, [pc, #144]	; (8013cc8 <emac_start+0x148>)
 8013c36:	f7ff fbe3 	bl	8013400 <gpio_init>
 8013c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013c3e:	2203      	movs	r2, #3
 8013c40:	2118      	movs	r1, #24
 8013c42:	4821      	ldr	r0, [pc, #132]	; (8013cc8 <emac_start+0x148>)
 8013c44:	f7ff fbdc 	bl	8013400 <gpio_init>
 8013c48:	f240 500e 	movw	r0, #1294	; 0x50e
 8013c4c:	f7ff fc70 	bl	8013530 <rcu_periph_clock_enable>
 8013c50:	f240 500f 	movw	r0, #1295	; 0x50f
 8013c54:	f7ff fc6c 	bl	8013530 <rcu_periph_clock_enable>
 8013c58:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8013c5c:	f7ff fc68 	bl	8013530 <rcu_periph_clock_enable>
 8013c60:	f000 ffa6 	bl	8014bb0 <enet_deinit>
 8013c64:	f000 fc04 	bl	8014470 <enet_software_reset>
 8013c68:	b900      	cbnz	r0, 8013c6c <emac_start+0xec>
 8013c6a:	e7fe      	b.n	8013c6a <emac_start+0xea>
 8013c6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013c74:	2001      	movs	r0, #1
 8013c76:	f000 fd7f 	bl	8014778 <enet_init>
 8013c7a:	4b14      	ldr	r3, [pc, #80]	; (8013ccc <emac_start+0x14c>)
 8013c7c:	6018      	str	r0, [r3, #0]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	b903      	cbnz	r3, 8013c84 <emac_start+0x104>
 8013c82:	e7fe      	b.n	8013c82 <emac_start+0x102>
 8013c84:	4620      	mov	r0, r4
 8013c86:	f000 faed 	bl	8014264 <mac_address_get>
 8013c8a:	4621      	mov	r1, r4
 8013c8c:	2000      	movs	r0, #0
 8013c8e:	f000 fcd3 	bl	8014638 <enet_mac_address_set>
 8013c92:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8013c96:	f000 fbff 	bl	8014498 <enet_descriptors_chain_init>
 8013c9a:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8013c9e:	f000 fbfb 	bl	8014498 <enet_descriptors_chain_init>
 8013ca2:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8013ca6:	480a      	ldr	r0, [pc, #40]	; (8013cd0 <emac_start+0x150>)
 8013ca8:	f000 fcc0 	bl	801462c <enet_transmit_checksum_config>
 8013cac:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8013cb0:	4808      	ldr	r0, [pc, #32]	; (8013cd4 <emac_start+0x154>)
 8013cb2:	f000 fcbb 	bl	801462c <enet_transmit_checksum_config>
 8013cb6:	f000 fef3 	bl	8014aa0 <enet_enable>
 8013cba:	2001      	movs	r0, #1
 8013cbc:	bd10      	pop	{r4, pc}
 8013cbe:	bf00      	nop
 8013cc0:	40010800 	andmi	r0, r1, r0, lsl #16
 8013cc4:	40011000 	andmi	r1, r1, r0
 8013cc8:	40010c00 	andmi	r0, r1, r0, lsl #24
 8013ccc:	20009d08 	andcs	r9, r0, r8, lsl #26
 8013cd0:	2000d964 	andcs	sp, r0, r4, ror #18
 8013cd4:	2000d974 	andcs	sp, r0, r4, ror r9

08013cd8 <emac_eth_recv>:
 8013cd8:	b538      	push	{r3, r4, r5, lr}
 8013cda:	4605      	mov	r5, r0
 8013cdc:	f000 ff38 	bl	8014b50 <enet_rxframe_size_get>
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	b138      	cbz	r0, 8013cf4 <emac_eth_recv+0x1c>
 8013ce4:	4b05      	ldr	r3, [pc, #20]	; (8013cfc <emac_eth_recv+0x24>)
 8013ce6:	2105      	movs	r1, #5
 8013ce8:	6818      	ldr	r0, [r3, #0]
 8013cea:	f000 fee0 	bl	8014aae <enet_desc_information_get>
 8013cee:	6028      	str	r0, [r5, #0]
 8013cf0:	4620      	mov	r0, r4
 8013cf2:	bd38      	pop	{r3, r4, r5, pc}
 8013cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013cf8:	e7fb      	b.n	8013cf2 <emac_eth_recv+0x1a>
 8013cfa:	bf00      	nop
 8013cfc:	20009d18 	andcs	r9, r0, r8, lsl sp

08013d00 <emac_free_pkt>:
 8013d00:	2100      	movs	r1, #0
 8013d02:	4608      	mov	r0, r1
 8013d04:	f000 bc10 	b.w	8014528 <enet_frame_receive>

08013d08 <emac_eth_send>:
 8013d08:	f000 bc4e 	b.w	80145a8 <enet_frame_transmit>

08013d0c <gd32_adc_init()>:
 8013d0c:	b510      	push	{r4, lr}
 8013d0e:	f240 6009 	movw	r0, #1545	; 0x609
 8013d12:	4c21      	ldr	r4, [pc, #132]	; (8013d98 <gd32_adc_init()+0x8c>)
 8013d14:	f7ff fc0c 	bl	8013530 <rcu_periph_clock_enable>
 8013d18:	2005      	movs	r0, #5
 8013d1a:	f7ff fc4f 	bl	80135bc <rcu_adc_clock_config>
 8013d1e:	4620      	mov	r0, r4
 8013d20:	2201      	movs	r2, #1
 8013d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013d26:	f000 fabf 	bl	80142a8 <adc_special_function_config>
 8013d2a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8013d2e:	4620      	mov	r0, r4
 8013d30:	2102      	movs	r1, #2
 8013d32:	f000 fb58 	bl	80143e6 <adc_external_trigger_source_config>
 8013d36:	2100      	movs	r1, #0
 8013d38:	4620      	mov	r0, r4
 8013d3a:	f000 fadd 	bl	80142f8 <adc_data_alignment_config>
 8013d3e:	2000      	movs	r0, #0
 8013d40:	f000 faa2 	bl	8014288 <adc_mode_config>
 8013d44:	2202      	movs	r2, #2
 8013d46:	4620      	mov	r0, r4
 8013d48:	4611      	mov	r1, r2
 8013d4a:	f000 fb01 	bl	8014350 <adc_channel_length_config>
 8013d4e:	4620      	mov	r0, r4
 8013d50:	2307      	movs	r3, #7
 8013d52:	2210      	movs	r2, #16
 8013d54:	2100      	movs	r1, #0
 8013d56:	f000 fb18 	bl	801438a <adc_inserted_channel_config>
 8013d5a:	2307      	movs	r3, #7
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	2211      	movs	r2, #17
 8013d60:	2101      	movs	r1, #1
 8013d62:	f000 fb12 	bl	801438a <adc_inserted_channel_config>
 8013d66:	2201      	movs	r2, #1
 8013d68:	2102      	movs	r1, #2
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	f000 fb4c 	bl	8014408 <adc_external_trigger_config>
 8013d70:	f000 fae4 	bl	801433c <adc_tempsensor_vrefint_enable>
 8013d74:	4620      	mov	r0, r4
 8013d76:	f000 fac8 	bl	801430a <adc_enable>
 8013d7a:	2100      	movs	r1, #0
 8013d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013d80:	f000 fa58 	bl	8014234 <udelay(unsigned int, unsigned int)>
 8013d84:	4620      	mov	r0, r4
 8013d86:	f000 fac8 	bl	801431a <adc_calibration_enable>
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d90:	2102      	movs	r1, #2
 8013d92:	f000 bb54 	b.w	801443e <adc_software_trigger_enable>
 8013d96:	bf00      	nop
 8013d98:	40012400 	andmi	r2, r1, r0, lsl #8

08013d9c <_stop() [clone .isra.0]>:
 8013d9c:	b508      	push	{r3, lr}
 8013d9e:	4806      	ldr	r0, [pc, #24]	; (8013db8 <_stop() [clone .isra.0]+0x1c>)
 8013da0:	f000 ff9a 	bl	8014cd8 <i2c_stop_on_bus>
 8013da4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8013da8:	4904      	ldr	r1, [pc, #16]	; (8013dbc <_stop() [clone .isra.0]+0x20>)
 8013daa:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8013dae:	0592      	lsls	r2, r2, #22
 8013db0:	d501      	bpl.n	8013db6 <_stop() [clone .isra.0]+0x1a>
 8013db2:	3b01      	subs	r3, #1
 8013db4:	d1f9      	bne.n	8013daa <_stop() [clone .isra.0]+0xe>
 8013db6:	bd08      	pop	{r3, pc}
 8013db8:	40005400 	andmi	r5, r0, r0, lsl #8
 8013dbc:	40005000 	andmi	r5, r0, r0

08013dc0 <gd32_i2c_begin()>:
 8013dc0:	b510      	push	{r4, lr}
 8013dc2:	f240 7015 	movw	r0, #1813	; 0x715
 8013dc6:	f7ff fbb3 	bl	8013530 <rcu_periph_clock_enable>
 8013dca:	4c15      	ldr	r4, [pc, #84]	; (8013e20 <gd32_i2c_begin()+0x60>)
 8013dcc:	f240 6003 	movw	r0, #1539	; 0x603
 8013dd0:	f7ff fbae 	bl	8013530 <rcu_periph_clock_enable>
 8013dd4:	f240 6003 	movw	r0, #1539	; 0x603
 8013dd8:	f7ff fbaa 	bl	8013530 <rcu_periph_clock_enable>
 8013ddc:	4620      	mov	r0, r4
 8013dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013de2:	2203      	movs	r2, #3
 8013de4:	211c      	movs	r1, #28
 8013de6:	f7ff fb0b 	bl	8013400 <gpio_init>
 8013dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013dee:	2203      	movs	r2, #3
 8013df0:	4620      	mov	r0, r4
 8013df2:	211c      	movs	r1, #28
 8013df4:	f7ff fb04 	bl	8013400 <gpio_init>
 8013df8:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8013dfc:	2101      	movs	r1, #1
 8013dfe:	2002      	movs	r0, #2
 8013e00:	f7ff fb52 	bl	80134a8 <gpio_pin_remap_config>
 8013e04:	4620      	mov	r0, r4
 8013e06:	4907      	ldr	r1, [pc, #28]	; (8013e24 <gd32_i2c_begin()+0x64>)
 8013e08:	2200      	movs	r2, #0
 8013e0a:	f000 fedf 	bl	8014bcc <i2c_clock_config>
 8013e0e:	4620      	mov	r0, r4
 8013e10:	f000 ff58 	bl	8014cc4 <i2c_enable>
 8013e14:	4620      	mov	r0, r4
 8013e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e1a:	2101      	movs	r1, #1
 8013e1c:	f000 bf38 	b.w	8014c90 <i2c_ack_config>
 8013e20:	40010c00 	andmi	r0, r1, r0, lsl #24
 8013e24:	00061a80 	andeq	r1, r6, r0, lsl #21

08013e28 <gd32_i2c_set_baudrate(unsigned int)>:
 8013e28:	4601      	mov	r1, r0
 8013e2a:	2200      	movs	r2, #0
 8013e2c:	4801      	ldr	r0, [pc, #4]	; (8013e34 <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 8013e2e:	f000 becd 	b.w	8014bcc <i2c_clock_config>
 8013e32:	bf00      	nop
 8013e34:	40005400 	andmi	r5, r0, r0, lsl #8

08013e38 <gd32_i2c_set_address(unsigned char)>:
 8013e38:	4b01      	ldr	r3, [pc, #4]	; (8013e40 <gd32_i2c_set_address(unsigned char)+0x8>)
 8013e3a:	0040      	lsls	r0, r0, #1
 8013e3c:	7018      	strb	r0, [r3, #0]
 8013e3e:	4770      	bx	lr
 8013e40:	20009d0c 	andcs	r9, r0, ip, lsl #26

08013e44 <gd32_i2c_write(char const*, unsigned int)>:
 8013e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e46:	4604      	mov	r4, r0
 8013e48:	460f      	mov	r7, r1
 8013e4a:	f640 75ff 	movw	r5, #4095	; 0xfff
 8013e4e:	4e2e      	ldr	r6, [pc, #184]	; (8013f08 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8013e50:	f240 6101 	movw	r1, #1537	; 0x601
 8013e54:	4630      	mov	r0, r6
 8013e56:	f000 ff49 	bl	8014cec <i2c_flag_get>
 8013e5a:	b9b0      	cbnz	r0, 8013e8a <gd32_i2c_write(char const*, unsigned int)+0x46>
 8013e5c:	482a      	ldr	r0, [pc, #168]	; (8013f08 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8013e5e:	f000 ff36 	bl	8014cce <i2c_start_on_bus>
 8013e62:	f640 75ff 	movw	r5, #4095	; 0xfff
 8013e66:	4e28      	ldr	r6, [pc, #160]	; (8013f08 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8013e68:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	f000 ff3d 	bl	8014cec <i2c_flag_get>
 8013e72:	b190      	cbz	r0, 8013e9a <gd32_i2c_write(char const*, unsigned int)+0x56>
 8013e74:	4b25      	ldr	r3, [pc, #148]	; (8013f0c <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 8013e76:	f06f 0201 	mvn.w	r2, #1
 8013e7a:	7819      	ldrb	r1, [r3, #0]
 8013e7c:	4822      	ldr	r0, [pc, #136]	; (8013f08 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8013e7e:	f000 ff19 	bl	8014cb4 <i2c_master_addressing>
 8013e82:	f640 75ff 	movw	r5, #4095	; 0xfff
 8013e86:	4e20      	ldr	r6, [pc, #128]	; (8013f08 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8013e88:	e00c      	b.n	8013ea4 <gd32_i2c_write(char const*, unsigned int)+0x60>
 8013e8a:	3d01      	subs	r5, #1
 8013e8c:	d1e0      	bne.n	8013e50 <gd32_i2c_write(char const*, unsigned int)+0xc>
 8013e8e:	f7ff ff85 	bl	8013d9c <_stop() [clone .isra.0]>
 8013e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e96:	4240      	negs	r0, r0
 8013e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e9a:	3d01      	subs	r5, #1
 8013e9c:	d1e4      	bne.n	8013e68 <gd32_i2c_write(char const*, unsigned int)+0x24>
 8013e9e:	e7f6      	b.n	8013e8e <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8013ea0:	3d01      	subs	r5, #1
 8013ea2:	d0f4      	beq.n	8013e8e <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8013ea4:	f240 5101 	movw	r1, #1281	; 0x501
 8013ea8:	4630      	mov	r0, r6
 8013eaa:	f000 ff1f 	bl	8014cec <i2c_flag_get>
 8013eae:	2800      	cmp	r0, #0
 8013eb0:	d0f6      	beq.n	8013ea0 <gd32_i2c_write(char const*, unsigned int)+0x5c>
 8013eb2:	f240 5101 	movw	r1, #1281	; 0x501
 8013eb6:	4814      	ldr	r0, [pc, #80]	; (8013f08 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8013eb8:	f000 ff23 	bl	8014d02 <i2c_flag_clear>
 8013ebc:	f640 75ff 	movw	r5, #4095	; 0xfff
 8013ec0:	4e11      	ldr	r6, [pc, #68]	; (8013f08 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8013ec2:	f240 5107 	movw	r1, #1287	; 0x507
 8013ec6:	4630      	mov	r0, r6
 8013ec8:	f000 ff10 	bl	8014cec <i2c_flag_get>
 8013ecc:	2801      	cmp	r0, #1
 8013ece:	d107      	bne.n	8013ee0 <gd32_i2c_write(char const*, unsigned int)+0x9c>
 8013ed0:	4e0d      	ldr	r6, [pc, #52]	; (8013f08 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8013ed2:	4427      	add	r7, r4
 8013ed4:	42a7      	cmp	r7, r4
 8013ed6:	d106      	bne.n	8013ee6 <gd32_i2c_write(char const*, unsigned int)+0xa2>
 8013ed8:	f7ff ff60 	bl	8013d9c <_stop() [clone .isra.0]>
 8013edc:	2000      	movs	r0, #0
 8013ede:	e7da      	b.n	8013e96 <gd32_i2c_write(char const*, unsigned int)+0x52>
 8013ee0:	3d01      	subs	r5, #1
 8013ee2:	d1ee      	bne.n	8013ec2 <gd32_i2c_write(char const*, unsigned int)+0x7e>
 8013ee4:	e7d3      	b.n	8013e8e <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8013ee6:	4630      	mov	r0, r6
 8013ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013eec:	f000 fef9 	bl	8014ce2 <i2c_data_transmit>
 8013ef0:	f640 75ff 	movw	r5, #4095	; 0xfff
 8013ef4:	f240 5102 	movw	r1, #1282	; 0x502
 8013ef8:	4630      	mov	r0, r6
 8013efa:	f000 fef7 	bl	8014cec <i2c_flag_get>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	d1e8      	bne.n	8013ed4 <gd32_i2c_write(char const*, unsigned int)+0x90>
 8013f02:	3d01      	subs	r5, #1
 8013f04:	d1f6      	bne.n	8013ef4 <gd32_i2c_write(char const*, unsigned int)+0xb0>
 8013f06:	e7c2      	b.n	8013e8e <gd32_i2c_write(char const*, unsigned int)+0x4a>
 8013f08:	40005400 	andmi	r5, r0, r0, lsl #8
 8013f0c:	20009d0c 	andcs	r9, r0, ip, lsl #26

08013f10 <gd32_i2c_read(char*, unsigned int)>:
 8013f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f14:	4680      	mov	r8, r0
 8013f16:	460c      	mov	r4, r1
 8013f18:	f640 76ff 	movw	r6, #4095	; 0xfff
 8013f1c:	4f4b      	ldr	r7, [pc, #300]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013f1e:	f240 6101 	movw	r1, #1537	; 0x601
 8013f22:	4638      	mov	r0, r7
 8013f24:	f000 fee2 	bl	8014cec <i2c_flag_get>
 8013f28:	4605      	mov	r5, r0
 8013f2a:	bb08      	cbnz	r0, 8013f70 <gd32_i2c_read(char*, unsigned int)+0x60>
 8013f2c:	2c02      	cmp	r4, #2
 8013f2e:	d103      	bne.n	8013f38 <gd32_i2c_read(char*, unsigned int)+0x28>
 8013f30:	4601      	mov	r1, r0
 8013f32:	4846      	ldr	r0, [pc, #280]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013f34:	f000 feb5 	bl	8014ca2 <i2c_ackpos_config>
 8013f38:	4844      	ldr	r0, [pc, #272]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013f3a:	f000 fec8 	bl	8014cce <i2c_start_on_bus>
 8013f3e:	f640 76ff 	movw	r6, #4095	; 0xfff
 8013f42:	4f42      	ldr	r7, [pc, #264]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013f44:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8013f48:	4638      	mov	r0, r7
 8013f4a:	f000 fecf 	bl	8014cec <i2c_flag_get>
 8013f4e:	b1a8      	cbz	r0, 8013f7c <gd32_i2c_read(char*, unsigned int)+0x6c>
 8013f50:	4b3f      	ldr	r3, [pc, #252]	; (8014050 <gd32_i2c_read(char*, unsigned int)+0x140>)
 8013f52:	2201      	movs	r2, #1
 8013f54:	7819      	ldrb	r1, [r3, #0]
 8013f56:	483d      	ldr	r0, [pc, #244]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013f58:	f000 feac 	bl	8014cb4 <i2c_master_addressing>
 8013f5c:	2c02      	cmp	r4, #2
 8013f5e:	d803      	bhi.n	8013f68 <gd32_i2c_read(char*, unsigned int)+0x58>
 8013f60:	2100      	movs	r1, #0
 8013f62:	483a      	ldr	r0, [pc, #232]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013f64:	f000 fe94 	bl	8014c90 <i2c_ack_config>
 8013f68:	f640 76ff 	movw	r6, #4095	; 0xfff
 8013f6c:	4f37      	ldr	r7, [pc, #220]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013f6e:	e00a      	b.n	8013f86 <gd32_i2c_read(char*, unsigned int)+0x76>
 8013f70:	3e01      	subs	r6, #1
 8013f72:	d1d4      	bne.n	8013f1e <gd32_i2c_read(char*, unsigned int)+0xe>
 8013f74:	f7ff ff12 	bl	8013d9c <_stop() [clone .isra.0]>
 8013f78:	2504      	movs	r5, #4
 8013f7a:	e04d      	b.n	8014018 <gd32_i2c_read(char*, unsigned int)+0x108>
 8013f7c:	3e01      	subs	r6, #1
 8013f7e:	d1e1      	bne.n	8013f44 <gd32_i2c_read(char*, unsigned int)+0x34>
 8013f80:	e7f8      	b.n	8013f74 <gd32_i2c_read(char*, unsigned int)+0x64>
 8013f82:	3e01      	subs	r6, #1
 8013f84:	d0f6      	beq.n	8013f74 <gd32_i2c_read(char*, unsigned int)+0x64>
 8013f86:	f240 5101 	movw	r1, #1281	; 0x501
 8013f8a:	4638      	mov	r0, r7
 8013f8c:	f000 feae 	bl	8014cec <i2c_flag_get>
 8013f90:	2800      	cmp	r0, #0
 8013f92:	d0f6      	beq.n	8013f82 <gd32_i2c_read(char*, unsigned int)+0x72>
 8013f94:	f240 5101 	movw	r1, #1281	; 0x501
 8013f98:	482c      	ldr	r0, [pc, #176]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013f9a:	f000 feb2 	bl	8014d02 <i2c_flag_clear>
 8013f9e:	2c01      	cmp	r4, #1
 8013fa0:	d102      	bne.n	8013fa8 <gd32_i2c_read(char*, unsigned int)+0x98>
 8013fa2:	482a      	ldr	r0, [pc, #168]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013fa4:	f000 fe98 	bl	8014cd8 <i2c_stop_on_bus>
 8013fa8:	f640 77ff 	movw	r7, #4095	; 0xfff
 8013fac:	4e27      	ldr	r6, [pc, #156]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8013fae:	e022      	b.n	8013ff6 <gd32_i2c_read(char*, unsigned int)+0xe6>
 8013fb0:	2c03      	cmp	r4, #3
 8013fb2:	d134      	bne.n	801401e <gd32_i2c_read(char*, unsigned int)+0x10e>
 8013fb4:	f640 79ff 	movw	r9, #4095	; 0xfff
 8013fb8:	e002      	b.n	8013fc0 <gd32_i2c_read(char*, unsigned int)+0xb0>
 8013fba:	f1b9 0901 	subs.w	r9, r9, #1
 8013fbe:	d0d9      	beq.n	8013f74 <gd32_i2c_read(char*, unsigned int)+0x64>
 8013fc0:	f240 5102 	movw	r1, #1282	; 0x502
 8013fc4:	4630      	mov	r0, r6
 8013fc6:	f000 fe91 	bl	8014cec <i2c_flag_get>
 8013fca:	2800      	cmp	r0, #0
 8013fcc:	d0f5      	beq.n	8013fba <gd32_i2c_read(char*, unsigned int)+0xaa>
 8013fce:	2100      	movs	r1, #0
 8013fd0:	4630      	mov	r0, r6
 8013fd2:	f000 fe5d 	bl	8014c90 <i2c_ack_config>
 8013fd6:	f240 5106 	movw	r1, #1286	; 0x506
 8013fda:	4630      	mov	r0, r6
 8013fdc:	f000 fe86 	bl	8014cec <i2c_flag_get>
 8013fe0:	b138      	cbz	r0, 8013ff2 <gd32_i2c_read(char*, unsigned int)+0xe2>
 8013fe2:	4630      	mov	r0, r6
 8013fe4:	f000 fe7f 	bl	8014ce6 <i2c_data_receive>
 8013fe8:	f640 77ff 	movw	r7, #4095	; 0xfff
 8013fec:	f808 0b01 	strb.w	r0, [r8], #1
 8013ff0:	3c01      	subs	r4, #1
 8013ff2:	3f01      	subs	r7, #1
 8013ff4:	d0be      	beq.n	8013f74 <gd32_i2c_read(char*, unsigned int)+0x64>
 8013ff6:	2c00      	cmp	r4, #0
 8013ff8:	d1da      	bne.n	8013fb0 <gd32_i2c_read(char*, unsigned int)+0xa0>
 8013ffa:	f640 73ff 	movw	r3, #4095	; 0xfff
 8013ffe:	4915      	ldr	r1, [pc, #84]	; (8014054 <gd32_i2c_read(char*, unsigned int)+0x144>)
 8014000:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8014004:	0592      	lsls	r2, r2, #22
 8014006:	d41d      	bmi.n	8014044 <gd32_i2c_read(char*, unsigned int)+0x134>
 8014008:	2101      	movs	r1, #1
 801400a:	4810      	ldr	r0, [pc, #64]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 801400c:	f000 fe40 	bl	8014c90 <i2c_ack_config>
 8014010:	2101      	movs	r1, #1
 8014012:	480e      	ldr	r0, [pc, #56]	; (801404c <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8014014:	f000 fe45 	bl	8014ca2 <i2c_ackpos_config>
 8014018:	4628      	mov	r0, r5
 801401a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801401e:	2c02      	cmp	r4, #2
 8014020:	d1d9      	bne.n	8013fd6 <gd32_i2c_read(char*, unsigned int)+0xc6>
 8014022:	f640 79ff 	movw	r9, #4095	; 0xfff
 8014026:	e002      	b.n	801402e <gd32_i2c_read(char*, unsigned int)+0x11e>
 8014028:	f1b9 0901 	subs.w	r9, r9, #1
 801402c:	d0a2      	beq.n	8013f74 <gd32_i2c_read(char*, unsigned int)+0x64>
 801402e:	f240 5102 	movw	r1, #1282	; 0x502
 8014032:	4630      	mov	r0, r6
 8014034:	f000 fe5a 	bl	8014cec <i2c_flag_get>
 8014038:	2800      	cmp	r0, #0
 801403a:	d0f5      	beq.n	8014028 <gd32_i2c_read(char*, unsigned int)+0x118>
 801403c:	4630      	mov	r0, r6
 801403e:	f000 fe4b 	bl	8014cd8 <i2c_stop_on_bus>
 8014042:	e7c8      	b.n	8013fd6 <gd32_i2c_read(char*, unsigned int)+0xc6>
 8014044:	3b01      	subs	r3, #1
 8014046:	d1db      	bne.n	8014000 <gd32_i2c_read(char*, unsigned int)+0xf0>
 8014048:	e796      	b.n	8013f78 <gd32_i2c_read(char*, unsigned int)+0x68>
 801404a:	bf00      	nop
 801404c:	40005400 	andmi	r5, r0, r0, lsl #8
 8014050:	20009d0c 	andcs	r9, r0, ip, lsl #26
 8014054:	40005000 	andmi	r5, r0, r0

08014058 <gd32_uart_begin>:
 8014058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801405a:	461e      	mov	r6, r3
 801405c:	4b63      	ldr	r3, [pc, #396]	; (80141ec <gd32_uart_begin+0x194>)
 801405e:	4604      	mov	r4, r0
 8014060:	4298      	cmp	r0, r3
 8014062:	460f      	mov	r7, r1
 8014064:	4615      	mov	r5, r2
 8014066:	d03b      	beq.n	80140e0 <gd32_uart_begin+0x88>
 8014068:	d80a      	bhi.n	8014080 <gd32_uart_begin+0x28>
 801406a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801406e:	4298      	cmp	r0, r3
 8014070:	d02f      	beq.n	80140d2 <gd32_uart_begin+0x7a>
 8014072:	f240 7012 	movw	r0, #1810	; 0x712
 8014076:	f7ff fa5b 	bl	8013530 <rcu_periph_clock_enable>
 801407a:	f240 6004 	movw	r0, #1540	; 0x604
 801407e:	e008      	b.n	8014092 <gd32_uart_begin+0x3a>
 8014080:	4b5b      	ldr	r3, [pc, #364]	; (80141f0 <gd32_uart_begin+0x198>)
 8014082:	4298      	cmp	r0, r3
 8014084:	d02f      	beq.n	80140e6 <gd32_uart_begin+0x8e>
 8014086:	f240 600e 	movw	r0, #1550	; 0x60e
 801408a:	f7ff fa51 	bl	8013530 <rcu_periph_clock_enable>
 801408e:	f240 6003 	movw	r0, #1539	; 0x603
 8014092:	f7ff fa4d 	bl	8013530 <rcu_periph_clock_enable>
 8014096:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 801409a:	f7ff fa49 	bl	8013530 <rcu_periph_clock_enable>
 801409e:	4b53      	ldr	r3, [pc, #332]	; (80141ec <gd32_uart_begin+0x194>)
 80140a0:	429c      	cmp	r4, r3
 80140a2:	f000 8084 	beq.w	80141ae <gd32_uart_begin+0x156>
 80140a6:	d829      	bhi.n	80140fc <gd32_uart_begin+0xa4>
 80140a8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80140ac:	429c      	cmp	r4, r3
 80140ae:	d071      	beq.n	8014194 <gd32_uart_begin+0x13c>
 80140b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80140b4:	2203      	movs	r2, #3
 80140b6:	2118      	movs	r1, #24
 80140b8:	484e      	ldr	r0, [pc, #312]	; (80141f4 <gd32_uart_begin+0x19c>)
 80140ba:	f7ff f9a1 	bl	8013400 <gpio_init>
 80140be:	2104      	movs	r1, #4
 80140c0:	484c      	ldr	r0, [pc, #304]	; (80141f4 <gd32_uart_begin+0x19c>)
 80140c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80140c6:	2203      	movs	r2, #3
 80140c8:	f7ff f99a 	bl	8013400 <gpio_init>
 80140cc:	2101      	movs	r1, #1
 80140ce:	484a      	ldr	r0, [pc, #296]	; (80141f8 <gd32_uart_begin+0x1a0>)
 80140d0:	e025      	b.n	801411e <gd32_uart_begin+0xc6>
 80140d2:	f240 7011 	movw	r0, #1809	; 0x711
 80140d6:	f7ff fa2b 	bl	8013530 <rcu_periph_clock_enable>
 80140da:	f240 6002 	movw	r0, #1538	; 0x602
 80140de:	e7d8      	b.n	8014092 <gd32_uart_begin+0x3a>
 80140e0:	f240 7013 	movw	r0, #1811	; 0x713
 80140e4:	e7c7      	b.n	8014076 <gd32_uart_begin+0x1e>
 80140e6:	f240 7014 	movw	r0, #1812	; 0x714
 80140ea:	f7ff fa21 	bl	8013530 <rcu_periph_clock_enable>
 80140ee:	f240 6004 	movw	r0, #1540	; 0x604
 80140f2:	f7ff fa1d 	bl	8013530 <rcu_periph_clock_enable>
 80140f6:	f240 6005 	movw	r0, #1541	; 0x605
 80140fa:	e7ca      	b.n	8014092 <gd32_uart_begin+0x3a>
 80140fc:	4b3c      	ldr	r3, [pc, #240]	; (80141f0 <gd32_uart_begin+0x198>)
 80140fe:	429c      	cmp	r4, r3
 8014100:	d062      	beq.n	80141c8 <gd32_uart_begin+0x170>
 8014102:	2340      	movs	r3, #64	; 0x40
 8014104:	2203      	movs	r2, #3
 8014106:	2118      	movs	r1, #24
 8014108:	483c      	ldr	r0, [pc, #240]	; (80141fc <gd32_uart_begin+0x1a4>)
 801410a:	f7ff f979 	bl	8013400 <gpio_init>
 801410e:	2104      	movs	r1, #4
 8014110:	483a      	ldr	r0, [pc, #232]	; (80141fc <gd32_uart_begin+0x1a4>)
 8014112:	2380      	movs	r3, #128	; 0x80
 8014114:	2203      	movs	r2, #3
 8014116:	f7ff f973 	bl	8013400 <gpio_init>
 801411a:	2101      	movs	r1, #1
 801411c:	2004      	movs	r0, #4
 801411e:	f7ff f9c3 	bl	80134a8 <gpio_pin_remap_config>
 8014122:	4620      	mov	r0, r4
 8014124:	f7ff fc60 	bl	80139e8 <usart_deinit>
 8014128:	68e3      	ldr	r3, [r4, #12]
 801412a:	4639      	mov	r1, r7
 801412c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014130:	4620      	mov	r0, r4
 8014132:	60e3      	str	r3, [r4, #12]
 8014134:	f7ff fc98 	bl	8013a68 <usart_baudrate_set>
 8014138:	f1a5 0309 	sub.w	r3, r5, #9
 801413c:	4259      	negs	r1, r3
 801413e:	4159      	adcs	r1, r3
 8014140:	4620      	mov	r0, r4
 8014142:	0309      	lsls	r1, r1, #12
 8014144:	f7ff fcc0 	bl	8013ac8 <usart_word_length_set>
 8014148:	9906      	ldr	r1, [sp, #24]
 801414a:	4620      	mov	r0, r4
 801414c:	1e8a      	subs	r2, r1, #2
 801414e:	4251      	negs	r1, r2
 8014150:	4151      	adcs	r1, r2
 8014152:	0349      	lsls	r1, r1, #13
 8014154:	f7ff fcc0 	bl	8013ad8 <usart_stop_bit_set>
 8014158:	2e01      	cmp	r6, #1
 801415a:	d041      	beq.n	80141e0 <gd32_uart_begin+0x188>
 801415c:	2e02      	cmp	r6, #2
 801415e:	d142      	bne.n	80141e6 <gd32_uart_begin+0x18e>
 8014160:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014164:	4620      	mov	r0, r4
 8014166:	f7ff fca7 	bl	8013ab8 <usart_parity_config>
 801416a:	2100      	movs	r1, #0
 801416c:	4620      	mov	r0, r4
 801416e:	f7ff fcc7 	bl	8013b00 <usart_hardware_flow_rts_config>
 8014172:	2100      	movs	r1, #0
 8014174:	4620      	mov	r0, r4
 8014176:	f7ff fcc9 	bl	8013b0c <usart_hardware_flow_cts_config>
 801417a:	2104      	movs	r1, #4
 801417c:	4620      	mov	r0, r4
 801417e:	f7ff fcb9 	bl	8013af4 <usart_receive_config>
 8014182:	2108      	movs	r1, #8
 8014184:	4620      	mov	r0, r4
 8014186:	f7ff fcaf 	bl	8013ae8 <usart_transmit_config>
 801418a:	68e3      	ldr	r3, [r4, #12]
 801418c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014190:	60e3      	str	r3, [r4, #12]
 8014192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014194:	2304      	movs	r3, #4
 8014196:	2203      	movs	r2, #3
 8014198:	2118      	movs	r1, #24
 801419a:	4819      	ldr	r0, [pc, #100]	; (8014200 <gd32_uart_begin+0x1a8>)
 801419c:	f7ff f930 	bl	8013400 <gpio_init>
 80141a0:	2308      	movs	r3, #8
 80141a2:	2203      	movs	r2, #3
 80141a4:	2104      	movs	r1, #4
 80141a6:	4816      	ldr	r0, [pc, #88]	; (8014200 <gd32_uart_begin+0x1a8>)
 80141a8:	f7ff f92a 	bl	8013400 <gpio_init>
 80141ac:	e7b9      	b.n	8014122 <gd32_uart_begin+0xca>
 80141ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80141b2:	2203      	movs	r2, #3
 80141b4:	2118      	movs	r1, #24
 80141b6:	480f      	ldr	r0, [pc, #60]	; (80141f4 <gd32_uart_begin+0x19c>)
 80141b8:	f7ff f922 	bl	8013400 <gpio_init>
 80141bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80141c0:	2203      	movs	r2, #3
 80141c2:	2104      	movs	r1, #4
 80141c4:	480b      	ldr	r0, [pc, #44]	; (80141f4 <gd32_uart_begin+0x19c>)
 80141c6:	e7ef      	b.n	80141a8 <gd32_uart_begin+0x150>
 80141c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80141cc:	2203      	movs	r2, #3
 80141ce:	2118      	movs	r1, #24
 80141d0:	4808      	ldr	r0, [pc, #32]	; (80141f4 <gd32_uart_begin+0x19c>)
 80141d2:	f7ff f915 	bl	8013400 <gpio_init>
 80141d6:	2304      	movs	r3, #4
 80141d8:	2203      	movs	r2, #3
 80141da:	4619      	mov	r1, r3
 80141dc:	4809      	ldr	r0, [pc, #36]	; (8014204 <gd32_uart_begin+0x1ac>)
 80141de:	e7e3      	b.n	80141a8 <gd32_uart_begin+0x150>
 80141e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80141e4:	e7be      	b.n	8014164 <gd32_uart_begin+0x10c>
 80141e6:	2100      	movs	r1, #0
 80141e8:	e7bc      	b.n	8014164 <gd32_uart_begin+0x10c>
 80141ea:	bf00      	nop
 80141ec:	40004c00 	andmi	r4, r0, r0, lsl #24
 80141f0:	40005000 	andmi	r5, r0, r0
 80141f4:	40011000 	andmi	r1, r1, r0
 80141f8:	00140010 	andseq	r0, r4, r0, lsl r0
 80141fc:	40010c00 	andmi	r0, r1, r0, lsl #24
 8014200:	40010800 	andmi	r0, r1, r0, lsl #16
 8014204:	40011400 	andmi	r1, r1, r0, lsl #8

08014208 <micros_init()>:
 8014208:	4770      	bx	lr
	...

0801420c <udelay_init()>:
 801420c:	4a07      	ldr	r2, [pc, #28]	; (801422c <udelay_init()+0x20>)
 801420e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8014212:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014216:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 801421a:	2200      	movs	r2, #0
 801421c:	4b04      	ldr	r3, [pc, #16]	; (8014230 <udelay_init()+0x24>)
 801421e:	605a      	str	r2, [r3, #4]
 8014220:	681a      	ldr	r2, [r3, #0]
 8014222:	f042 0201 	orr.w	r2, r2, #1
 8014226:	601a      	str	r2, [r3, #0]
 8014228:	4770      	bx	lr
 801422a:	bf00      	nop
 801422c:	e000ed00 	and	lr, r0, r0, lsl #26
 8014230:	e0001000 	and	r1, r0, r0

08014234 <udelay(unsigned int, unsigned int)>:
 8014234:	236c      	movs	r3, #108	; 0x6c
 8014236:	b530      	push	{r4, r5, lr}
 8014238:	4358      	muls	r0, r3
 801423a:	b909      	cbnz	r1, 8014240 <udelay(unsigned int, unsigned int)+0xc>
 801423c:	4b08      	ldr	r3, [pc, #32]	; (8014260 <udelay(unsigned int, unsigned int)+0x2c>)
 801423e:	6859      	ldr	r1, [r3, #4]
 8014240:	2300      	movs	r3, #0
 8014242:	4c07      	ldr	r4, [pc, #28]	; (8014260 <udelay(unsigned int, unsigned int)+0x2c>)
 8014244:	6862      	ldr	r2, [r4, #4]
 8014246:	4291      	cmp	r1, r2
 8014248:	d0fc      	beq.n	8014244 <udelay(unsigned int, unsigned int)+0x10>
 801424a:	bf2a      	itet	cs
 801424c:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8014250:	189b      	addcc	r3, r3, r2
 8014252:	195b      	addcs	r3, r3, r5
 8014254:	1a5b      	subs	r3, r3, r1
 8014256:	4283      	cmp	r3, r0
 8014258:	d300      	bcc.n	801425c <udelay(unsigned int, unsigned int)+0x28>
 801425a:	bd30      	pop	{r4, r5, pc}
 801425c:	4611      	mov	r1, r2
 801425e:	e7f1      	b.n	8014244 <udelay(unsigned int, unsigned int)+0x10>
 8014260:	e0001000 	and	r1, r0, r0

08014264 <mac_address_get>:
 8014264:	2102      	movs	r1, #2
 8014266:	4a07      	ldr	r2, [pc, #28]	; (8014284 <mac_address_get+0x20>)
 8014268:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 801426c:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8014270:	7001      	strb	r1, [r0, #0]
 8014272:	7042      	strb	r2, [r0, #1]
 8014274:	0e1a      	lsrs	r2, r3, #24
 8014276:	7082      	strb	r2, [r0, #2]
 8014278:	0c1a      	lsrs	r2, r3, #16
 801427a:	70c2      	strb	r2, [r0, #3]
 801427c:	0a1a      	lsrs	r2, r3, #8
 801427e:	7102      	strb	r2, [r0, #4]
 8014280:	7143      	strb	r3, [r0, #5]
 8014282:	4770      	bx	lr
 8014284:	1ffff000 	svcne	0x00fff000

08014288 <adc_mode_config>:
 8014288:	4b06      	ldr	r3, [pc, #24]	; (80142a4 <adc_mode_config+0x1c>)
 801428a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801428e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8014292:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8014296:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801429a:	4302      	orrs	r2, r0
 801429c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80142a0:	4770      	bx	lr
 80142a2:	bf00      	nop
 80142a4:	40012000 	andmi	r2, r1, r0

080142a8 <adc_special_function_config>:
 80142a8:	b510      	push	{r4, lr}
 80142aa:	f401 7380 	and.w	r3, r1, #256	; 0x100
 80142ae:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 80142b2:	f001 0102 	and.w	r1, r1, #2
 80142b6:	b17a      	cbz	r2, 80142d8 <adc_special_function_config+0x30>
 80142b8:	b11b      	cbz	r3, 80142c2 <adc_special_function_config+0x1a>
 80142ba:	6843      	ldr	r3, [r0, #4]
 80142bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80142c0:	6043      	str	r3, [r0, #4]
 80142c2:	b11c      	cbz	r4, 80142cc <adc_special_function_config+0x24>
 80142c4:	6843      	ldr	r3, [r0, #4]
 80142c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80142ca:	6043      	str	r3, [r0, #4]
 80142cc:	b119      	cbz	r1, 80142d6 <adc_special_function_config+0x2e>
 80142ce:	6883      	ldr	r3, [r0, #8]
 80142d0:	f043 0302 	orr.w	r3, r3, #2
 80142d4:	6083      	str	r3, [r0, #8]
 80142d6:	bd10      	pop	{r4, pc}
 80142d8:	b11b      	cbz	r3, 80142e2 <adc_special_function_config+0x3a>
 80142da:	6843      	ldr	r3, [r0, #4]
 80142dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80142e0:	6043      	str	r3, [r0, #4]
 80142e2:	b11c      	cbz	r4, 80142ec <adc_special_function_config+0x44>
 80142e4:	6843      	ldr	r3, [r0, #4]
 80142e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80142ea:	6043      	str	r3, [r0, #4]
 80142ec:	2900      	cmp	r1, #0
 80142ee:	d0f2      	beq.n	80142d6 <adc_special_function_config+0x2e>
 80142f0:	6883      	ldr	r3, [r0, #8]
 80142f2:	f023 0302 	bic.w	r3, r3, #2
 80142f6:	e7ed      	b.n	80142d4 <adc_special_function_config+0x2c>

080142f8 <adc_data_alignment_config>:
 80142f8:	6883      	ldr	r3, [r0, #8]
 80142fa:	b119      	cbz	r1, 8014304 <adc_data_alignment_config+0xc>
 80142fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014300:	6083      	str	r3, [r0, #8]
 8014302:	4770      	bx	lr
 8014304:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014308:	e7fa      	b.n	8014300 <adc_data_alignment_config+0x8>

0801430a <adc_enable>:
 801430a:	6883      	ldr	r3, [r0, #8]
 801430c:	07db      	lsls	r3, r3, #31
 801430e:	bf5e      	ittt	pl
 8014310:	6883      	ldrpl	r3, [r0, #8]
 8014312:	f043 0301 	orrpl.w	r3, r3, #1
 8014316:	6083      	strpl	r3, [r0, #8]
 8014318:	4770      	bx	lr

0801431a <adc_calibration_enable>:
 801431a:	6883      	ldr	r3, [r0, #8]
 801431c:	f100 0208 	add.w	r2, r0, #8
 8014320:	f043 0308 	orr.w	r3, r3, #8
 8014324:	6083      	str	r3, [r0, #8]
 8014326:	6813      	ldr	r3, [r2, #0]
 8014328:	0719      	lsls	r1, r3, #28
 801432a:	d4fc      	bmi.n	8014326 <adc_calibration_enable+0xc>
 801432c:	6883      	ldr	r3, [r0, #8]
 801432e:	f043 0304 	orr.w	r3, r3, #4
 8014332:	6083      	str	r3, [r0, #8]
 8014334:	6813      	ldr	r3, [r2, #0]
 8014336:	075b      	lsls	r3, r3, #29
 8014338:	d4fc      	bmi.n	8014334 <adc_calibration_enable+0x1a>
 801433a:	4770      	bx	lr

0801433c <adc_tempsensor_vrefint_enable>:
 801433c:	4a03      	ldr	r2, [pc, #12]	; (801434c <adc_tempsensor_vrefint_enable+0x10>)
 801433e:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8014342:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014346:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 801434a:	4770      	bx	lr
 801434c:	40012000 	andmi	r2, r1, r0

08014350 <adc_channel_length_config>:
 8014350:	2901      	cmp	r1, #1
 8014352:	d002      	beq.n	801435a <adc_channel_length_config+0xa>
 8014354:	2902      	cmp	r1, #2
 8014356:	d00c      	beq.n	8014372 <adc_channel_length_config+0x22>
 8014358:	4770      	bx	lr
 801435a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801435c:	3a01      	subs	r2, #1
 801435e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8014362:	62c3      	str	r3, [r0, #44]	; 0x2c
 8014364:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014366:	0512      	lsls	r2, r2, #20
 8014368:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 801436c:	431a      	orrs	r2, r3
 801436e:	62c2      	str	r2, [r0, #44]	; 0x2c
 8014370:	4770      	bx	lr
 8014372:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8014374:	3a01      	subs	r2, #1
 8014376:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801437a:	6383      	str	r3, [r0, #56]	; 0x38
 801437c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801437e:	0512      	lsls	r2, r2, #20
 8014380:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8014384:	431a      	orrs	r2, r3
 8014386:	6382      	str	r2, [r0, #56]	; 0x38
 8014388:	4770      	bx	lr

0801438a <adc_inserted_channel_config>:
 801438a:	b530      	push	{r4, r5, lr}
 801438c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801438e:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8014390:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8014394:	1a61      	subs	r1, r4, r1
 8014396:	f06f 0404 	mvn.w	r4, #4
 801439a:	4361      	muls	r1, r4
 801439c:	241f      	movs	r4, #31
 801439e:	310f      	adds	r1, #15
 80143a0:	408c      	lsls	r4, r1
 80143a2:	ea25 0504 	bic.w	r5, r5, r4
 80143a6:	fa02 f101 	lsl.w	r1, r2, r1
 80143aa:	4329      	orrs	r1, r5
 80143ac:	2a09      	cmp	r2, #9
 80143ae:	6381      	str	r1, [r0, #56]	; 0x38
 80143b0:	d80b      	bhi.n	80143ca <adc_inserted_channel_config+0x40>
 80143b2:	2407      	movs	r4, #7
 80143b4:	6901      	ldr	r1, [r0, #16]
 80143b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80143ba:	4094      	lsls	r4, r2
 80143bc:	ea21 0104 	bic.w	r1, r1, r4
 80143c0:	fa03 f202 	lsl.w	r2, r3, r2
 80143c4:	430a      	orrs	r2, r1
 80143c6:	6102      	str	r2, [r0, #16]
 80143c8:	bd30      	pop	{r4, r5, pc}
 80143ca:	2a11      	cmp	r2, #17
 80143cc:	d8fc      	bhi.n	80143c8 <adc_inserted_channel_config+0x3e>
 80143ce:	2407      	movs	r4, #7
 80143d0:	3a0a      	subs	r2, #10
 80143d2:	68c1      	ldr	r1, [r0, #12]
 80143d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80143d8:	4094      	lsls	r4, r2
 80143da:	ea21 0104 	bic.w	r1, r1, r4
 80143de:	4093      	lsls	r3, r2
 80143e0:	430b      	orrs	r3, r1
 80143e2:	60c3      	str	r3, [r0, #12]
 80143e4:	e7f0      	b.n	80143c8 <adc_inserted_channel_config+0x3e>

080143e6 <adc_external_trigger_source_config>:
 80143e6:	2901      	cmp	r1, #1
 80143e8:	d002      	beq.n	80143f0 <adc_external_trigger_source_config+0xa>
 80143ea:	2902      	cmp	r1, #2
 80143ec:	d008      	beq.n	8014400 <adc_external_trigger_source_config+0x1a>
 80143ee:	4770      	bx	lr
 80143f0:	6883      	ldr	r3, [r0, #8]
 80143f2:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80143f6:	6083      	str	r3, [r0, #8]
 80143f8:	6883      	ldr	r3, [r0, #8]
 80143fa:	4313      	orrs	r3, r2
 80143fc:	6083      	str	r3, [r0, #8]
 80143fe:	4770      	bx	lr
 8014400:	6883      	ldr	r3, [r0, #8]
 8014402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014406:	e7f6      	b.n	80143f6 <adc_external_trigger_source_config+0x10>

08014408 <adc_external_trigger_config>:
 8014408:	f001 0301 	and.w	r3, r1, #1
 801440c:	f001 0102 	and.w	r1, r1, #2
 8014410:	b152      	cbz	r2, 8014428 <adc_external_trigger_config+0x20>
 8014412:	b11b      	cbz	r3, 801441c <adc_external_trigger_config+0x14>
 8014414:	6883      	ldr	r3, [r0, #8]
 8014416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801441a:	6083      	str	r3, [r0, #8]
 801441c:	b119      	cbz	r1, 8014426 <adc_external_trigger_config+0x1e>
 801441e:	6883      	ldr	r3, [r0, #8]
 8014420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014424:	6083      	str	r3, [r0, #8]
 8014426:	4770      	bx	lr
 8014428:	b11b      	cbz	r3, 8014432 <adc_external_trigger_config+0x2a>
 801442a:	6883      	ldr	r3, [r0, #8]
 801442c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014430:	6083      	str	r3, [r0, #8]
 8014432:	2900      	cmp	r1, #0
 8014434:	d0f7      	beq.n	8014426 <adc_external_trigger_config+0x1e>
 8014436:	6883      	ldr	r3, [r0, #8]
 8014438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801443c:	e7f2      	b.n	8014424 <adc_external_trigger_config+0x1c>

0801443e <adc_software_trigger_enable>:
 801443e:	07ca      	lsls	r2, r1, #31
 8014440:	bf42      	ittt	mi
 8014442:	6883      	ldrmi	r3, [r0, #8]
 8014444:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8014448:	6083      	strmi	r3, [r0, #8]
 801444a:	078b      	lsls	r3, r1, #30
 801444c:	bf42      	ittt	mi
 801444e:	6883      	ldrmi	r3, [r0, #8]
 8014450:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8014454:	6083      	strmi	r3, [r0, #8]
 8014456:	4770      	bx	lr

08014458 <enet_delay>:
 8014458:	2300      	movs	r3, #0
 801445a:	b082      	sub	sp, #8
 801445c:	9301      	str	r3, [sp, #4]
 801445e:	9001      	str	r0, [sp, #4]
 8014460:	9b01      	ldr	r3, [sp, #4]
 8014462:	b90b      	cbnz	r3, 8014468 <enet_delay+0x10>
 8014464:	b002      	add	sp, #8
 8014466:	4770      	bx	lr
 8014468:	9b01      	ldr	r3, [sp, #4]
 801446a:	3b01      	subs	r3, #1
 801446c:	9301      	str	r3, [sp, #4]
 801446e:	e7f7      	b.n	8014460 <enet_delay+0x8>

08014470 <enet_software_reset>:
 8014470:	4b07      	ldr	r3, [pc, #28]	; (8014490 <enet_software_reset+0x20>)
 8014472:	681a      	ldr	r2, [r3, #0]
 8014474:	f042 0201 	orr.w	r2, r2, #1
 8014478:	601a      	str	r2, [r3, #0]
 801447a:	4a06      	ldr	r2, [pc, #24]	; (8014494 <enet_software_reset+0x24>)
 801447c:	6819      	ldr	r1, [r3, #0]
 801447e:	07c9      	lsls	r1, r1, #31
 8014480:	d501      	bpl.n	8014486 <enet_software_reset+0x16>
 8014482:	3a01      	subs	r2, #1
 8014484:	d1fa      	bne.n	801447c <enet_software_reset+0xc>
 8014486:	6818      	ldr	r0, [r3, #0]
 8014488:	43c0      	mvns	r0, r0
 801448a:	f000 0001 	and.w	r0, r0, #1
 801448e:	4770      	bx	lr
 8014490:	40029000 	andmi	r9, r2, r0
 8014494:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014498 <enet_descriptors_chain_init>:
 8014498:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 801449c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801449e:	4a19      	ldr	r2, [pc, #100]	; (8014504 <enet_descriptors_chain_init+0x6c>)
 80144a0:	d125      	bne.n	80144ee <enet_descriptors_chain_init+0x56>
 80144a2:	2500      	movs	r5, #0
 80144a4:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80144a8:	2002      	movs	r0, #2
 80144aa:	4b17      	ldr	r3, [pc, #92]	; (8014508 <enet_descriptors_chain_init+0x70>)
 80144ac:	4c17      	ldr	r4, [pc, #92]	; (801450c <enet_descriptors_chain_init+0x74>)
 80144ae:	6113      	str	r3, [r2, #16]
 80144b0:	4a17      	ldr	r2, [pc, #92]	; (8014510 <enet_descriptors_chain_init+0x78>)
 80144b2:	6013      	str	r3, [r2, #0]
 80144b4:	2200      	movs	r2, #0
 80144b6:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 80144ba:	4916      	ldr	r1, [pc, #88]	; (8014514 <enet_descriptors_chain_init+0x7c>)
 80144bc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80144c0:	600a      	str	r2, [r1, #0]
 80144c2:	4915      	ldr	r1, [pc, #84]	; (8014518 <enet_descriptors_chain_init+0x80>)
 80144c4:	600a      	str	r2, [r1, #0]
 80144c6:	f103 0110 	add.w	r1, r3, #16
 80144ca:	fb0e 4702 	mla	r7, lr, r2, r4
 80144ce:	f841 7c08 	str.w	r7, [r1, #-8]
 80144d2:	4594      	cmp	ip, r2
 80144d4:	bf94      	ite	ls
 80144d6:	461f      	movls	r7, r3
 80144d8:	460f      	movhi	r7, r1
 80144da:	3201      	adds	r2, #1
 80144dc:	4290      	cmp	r0, r2
 80144de:	e941 6504 	strd	r6, r5, [r1, #-16]
 80144e2:	f841 7c04 	str.w	r7, [r1, #-4]
 80144e6:	f101 0110 	add.w	r1, r1, #16
 80144ea:	d1ee      	bne.n	80144ca <enet_descriptors_chain_init+0x32>
 80144ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144ee:	4b0b      	ldr	r3, [pc, #44]	; (801451c <enet_descriptors_chain_init+0x84>)
 80144f0:	f244 55f4 	movw	r5, #17908	; 0x45f4
 80144f4:	60d3      	str	r3, [r2, #12]
 80144f6:	4a0a      	ldr	r2, [pc, #40]	; (8014520 <enet_descriptors_chain_init+0x88>)
 80144f8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80144fc:	2008      	movs	r0, #8
 80144fe:	4c09      	ldr	r4, [pc, #36]	; (8014524 <enet_descriptors_chain_init+0x8c>)
 8014500:	6013      	str	r3, [r2, #0]
 8014502:	e7d7      	b.n	80144b4 <enet_descriptors_chain_init+0x1c>
 8014504:	40029000 	andmi	r9, r2, r0
 8014508:	2000d964 	andcs	sp, r0, r4, ror #18
 801450c:	2000cd7c 	andcs	ip, r0, ip, ror sp
 8014510:	20009d1c 	andcs	r9, r0, ip, lsl sp
 8014514:	20009d10 	andcs	r9, r0, r0, lsl sp
 8014518:	20009d14 	andcs	r9, r0, r4, lsl sp
 801451c:	2000ccfc 	strdcs	ip, [r0], -ip	; <UNPREDICTABLE>
 8014520:	20009d18 	andcs	r9, r0, r8, lsl sp
 8014524:	20009d5c 	andcs	r9, r0, ip, asr sp

08014528 <enet_frame_receive>:
 8014528:	4a1d      	ldr	r2, [pc, #116]	; (80145a0 <enet_frame_receive+0x78>)
 801452a:	b510      	push	{r4, lr}
 801452c:	6813      	ldr	r3, [r2, #0]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	db33      	blt.n	801459c <enet_frame_receive+0x74>
 8014534:	b970      	cbnz	r0, 8014554 <enet_frame_receive+0x2c>
 8014536:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801453a:	6813      	ldr	r3, [r2, #0]
 801453c:	6019      	str	r1, [r3, #0]
 801453e:	4919      	ldr	r1, [pc, #100]	; (80145a4 <enet_frame_receive+0x7c>)
 8014540:	6948      	ldr	r0, [r1, #20]
 8014542:	0604      	lsls	r4, r0, #24
 8014544:	d419      	bmi.n	801457a <enet_frame_receive+0x52>
 8014546:	6859      	ldr	r1, [r3, #4]
 8014548:	0448      	lsls	r0, r1, #17
 801454a:	d51b      	bpl.n	8014584 <enet_frame_receive+0x5c>
 801454c:	68db      	ldr	r3, [r3, #12]
 801454e:	2001      	movs	r0, #1
 8014550:	6013      	str	r3, [r2, #0]
 8014552:	bd10      	pop	{r4, pc}
 8014554:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 8014558:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 801455c:	d11e      	bne.n	801459c <enet_frame_receive+0x74>
 801455e:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8014562:	3b04      	subs	r3, #4
 8014564:	428b      	cmp	r3, r1
 8014566:	d819      	bhi.n	801459c <enet_frame_receive+0x74>
 8014568:	2100      	movs	r1, #0
 801456a:	4299      	cmp	r1, r3
 801456c:	6814      	ldr	r4, [r2, #0]
 801456e:	d2e2      	bcs.n	8014536 <enet_frame_receive+0xe>
 8014570:	68a4      	ldr	r4, [r4, #8]
 8014572:	5d0c      	ldrb	r4, [r1, r4]
 8014574:	5444      	strb	r4, [r0, r1]
 8014576:	3101      	adds	r1, #1
 8014578:	e7f7      	b.n	801456a <enet_frame_receive+0x42>
 801457a:	2080      	movs	r0, #128	; 0x80
 801457c:	6148      	str	r0, [r1, #20]
 801457e:	2000      	movs	r0, #0
 8014580:	6088      	str	r0, [r1, #8]
 8014582:	e7e0      	b.n	8014546 <enet_frame_receive+0x1e>
 8014584:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8014588:	4906      	ldr	r1, [pc, #24]	; (80145a4 <enet_frame_receive+0x7c>)
 801458a:	bf05      	ittet	eq
 801458c:	3310      	addeq	r3, #16
 801458e:	6809      	ldreq	r1, [r1, #0]
 8014590:	68cb      	ldrne	r3, [r1, #12]
 8014592:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8014596:	bf08      	it	eq
 8014598:	185b      	addeq	r3, r3, r1
 801459a:	e7d8      	b.n	801454e <enet_frame_receive+0x26>
 801459c:	2000      	movs	r0, #0
 801459e:	e7d8      	b.n	8014552 <enet_frame_receive+0x2a>
 80145a0:	20009d18 	andcs	r9, r0, r8, lsl sp
 80145a4:	40029000 	andmi	r9, r2, r0

080145a8 <enet_frame_transmit>:
 80145a8:	4a1e      	ldr	r2, [pc, #120]	; (8014624 <enet_frame_transmit+0x7c>)
 80145aa:	b530      	push	{r4, r5, lr}
 80145ac:	6813      	ldr	r3, [r2, #0]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	db34      	blt.n	801461e <enet_frame_transmit+0x76>
 80145b4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80145b8:	4299      	cmp	r1, r3
 80145ba:	d830      	bhi.n	801461e <enet_frame_transmit+0x76>
 80145bc:	b9e8      	cbnz	r0, 80145fa <enet_frame_transmit+0x52>
 80145be:	6813      	ldr	r3, [r2, #0]
 80145c0:	4819      	ldr	r0, [pc, #100]	; (8014628 <enet_frame_transmit+0x80>)
 80145c2:	6059      	str	r1, [r3, #4]
 80145c4:	6819      	ldr	r1, [r3, #0]
 80145c6:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 80145ca:	6019      	str	r1, [r3, #0]
 80145cc:	6941      	ldr	r1, [r0, #20]
 80145ce:	6944      	ldr	r4, [r0, #20]
 80145d0:	f001 0104 	and.w	r1, r1, #4
 80145d4:	f004 0420 	and.w	r4, r4, #32
 80145d8:	4321      	orrs	r1, r4
 80145da:	d110      	bne.n	80145fe <enet_frame_transmit+0x56>
 80145dc:	6819      	ldr	r1, [r3, #0]
 80145de:	02c8      	lsls	r0, r1, #11
 80145e0:	d511      	bpl.n	8014606 <enet_frame_transmit+0x5e>
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	2001      	movs	r0, #1
 80145e6:	6013      	str	r3, [r2, #0]
 80145e8:	bd30      	pop	{r4, r5, pc}
 80145ea:	5cc5      	ldrb	r5, [r0, r3]
 80145ec:	68a4      	ldr	r4, [r4, #8]
 80145ee:	551d      	strb	r5, [r3, r4]
 80145f0:	3301      	adds	r3, #1
 80145f2:	428b      	cmp	r3, r1
 80145f4:	6814      	ldr	r4, [r2, #0]
 80145f6:	d1f8      	bne.n	80145ea <enet_frame_transmit+0x42>
 80145f8:	e7e1      	b.n	80145be <enet_frame_transmit+0x16>
 80145fa:	2300      	movs	r3, #0
 80145fc:	e7f9      	b.n	80145f2 <enet_frame_transmit+0x4a>
 80145fe:	6141      	str	r1, [r0, #20]
 8014600:	2100      	movs	r1, #0
 8014602:	6041      	str	r1, [r0, #4]
 8014604:	e7ea      	b.n	80145dc <enet_frame_transmit+0x34>
 8014606:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 801460a:	4907      	ldr	r1, [pc, #28]	; (8014628 <enet_frame_transmit+0x80>)
 801460c:	bf05      	ittet	eq
 801460e:	3310      	addeq	r3, #16
 8014610:	6809      	ldreq	r1, [r1, #0]
 8014612:	690b      	ldrne	r3, [r1, #16]
 8014614:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8014618:	bf08      	it	eq
 801461a:	185b      	addeq	r3, r3, r1
 801461c:	e7e2      	b.n	80145e4 <enet_frame_transmit+0x3c>
 801461e:	2000      	movs	r0, #0
 8014620:	e7e2      	b.n	80145e8 <enet_frame_transmit+0x40>
 8014622:	bf00      	nop
 8014624:	20009d1c 	andcs	r9, r0, ip, lsl sp
 8014628:	40029000 	andmi	r9, r2, r0

0801462c <enet_transmit_checksum_config>:
 801462c:	6803      	ldr	r3, [r0, #0]
 801462e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8014632:	430b      	orrs	r3, r1
 8014634:	6003      	str	r3, [r0, #0]
 8014636:	4770      	bx	lr

08014638 <enet_mac_address_set>:
 8014638:	888a      	ldrh	r2, [r1, #4]
 801463a:	4b03      	ldr	r3, [pc, #12]	; (8014648 <enet_mac_address_set+0x10>)
 801463c:	50c2      	str	r2, [r0, r3]
 801463e:	680a      	ldr	r2, [r1, #0]
 8014640:	3304      	adds	r3, #4
 8014642:	50c2      	str	r2, [r0, r3]
 8014644:	4770      	bx	lr
 8014646:	bf00      	nop
 8014648:	40028040 	andmi	r8, r2, r0, asr #32

0801464c <enet_rx_enable>:
 801464c:	4a05      	ldr	r2, [pc, #20]	; (8014664 <enet_rx_enable+0x18>)
 801464e:	6813      	ldr	r3, [r2, #0]
 8014650:	f043 0304 	orr.w	r3, r3, #4
 8014654:	6013      	str	r3, [r2, #0]
 8014656:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801465a:	6993      	ldr	r3, [r2, #24]
 801465c:	f043 0302 	orr.w	r3, r3, #2
 8014660:	6193      	str	r3, [r2, #24]
 8014662:	4770      	bx	lr
 8014664:	40028000 	andmi	r8, r2, r0

08014668 <enet_phy_write_read>:
 8014668:	b530      	push	{r4, r5, lr}
 801466a:	4604      	mov	r4, r0
 801466c:	4d13      	ldr	r5, [pc, #76]	; (80146bc <enet_phy_write_read+0x54>)
 801466e:	0192      	lsls	r2, r2, #6
 8014670:	6928      	ldr	r0, [r5, #16]
 8014672:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8014676:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 801467a:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 801467e:	4302      	orrs	r2, r0
 8014680:	02c9      	lsls	r1, r1, #11
 8014682:	b289      	uxth	r1, r1
 8014684:	2c02      	cmp	r4, #2
 8014686:	ea42 0204 	orr.w	r2, r2, r4
 801468a:	ea42 0201 	orr.w	r2, r2, r1
 801468e:	bf08      	it	eq
 8014690:	8819      	ldrheq	r1, [r3, #0]
 8014692:	f042 0201 	orr.w	r2, r2, #1
 8014696:	bf08      	it	eq
 8014698:	6169      	streq	r1, [r5, #20]
 801469a:	612a      	str	r2, [r5, #16]
 801469c:	4907      	ldr	r1, [pc, #28]	; (80146bc <enet_phy_write_read+0x54>)
 801469e:	4a08      	ldr	r2, [pc, #32]	; (80146c0 <enet_phy_write_read+0x58>)
 80146a0:	6908      	ldr	r0, [r1, #16]
 80146a2:	07c0      	lsls	r0, r0, #31
 80146a4:	d501      	bpl.n	80146aa <enet_phy_write_read+0x42>
 80146a6:	3a01      	subs	r2, #1
 80146a8:	d1fa      	bne.n	80146a0 <enet_phy_write_read+0x38>
 80146aa:	690a      	ldr	r2, [r1, #16]
 80146ac:	43d2      	mvns	r2, r2
 80146ae:	f002 0001 	and.w	r0, r2, #1
 80146b2:	b90c      	cbnz	r4, 80146b8 <enet_phy_write_read+0x50>
 80146b4:	694a      	ldr	r2, [r1, #20]
 80146b6:	801a      	strh	r2, [r3, #0]
 80146b8:	bd30      	pop	{r4, r5, pc}
 80146ba:	bf00      	nop
 80146bc:	40028000 	andmi	r8, r2, r0
 80146c0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080146c4 <enet_phy_config>:
 80146c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80146c6:	4d22      	ldr	r5, [pc, #136]	; (8014750 <enet_phy_config+0x8c>)
 80146c8:	2001      	movs	r0, #1
 80146ca:	692c      	ldr	r4, [r5, #16]
 80146cc:	f7ff f806 	bl	80136dc <rcu_clock_freq_get>
 80146d0:	4b20      	ldr	r3, [pc, #128]	; (8014754 <enet_phy_config+0x90>)
 80146d2:	4a21      	ldr	r2, [pc, #132]	; (8014758 <enet_phy_config+0x94>)
 80146d4:	4403      	add	r3, r0
 80146d6:	4293      	cmp	r3, r2
 80146d8:	f024 041c 	bic.w	r4, r4, #28
 80146dc:	d21f      	bcs.n	801471e <enet_phy_config+0x5a>
 80146de:	f044 0408 	orr.w	r4, r4, #8
 80146e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80146e6:	612c      	str	r4, [r5, #16]
 80146e8:	2200      	movs	r2, #0
 80146ea:	f8ad 3006 	strh.w	r3, [sp, #6]
 80146ee:	2101      	movs	r1, #1
 80146f0:	2002      	movs	r0, #2
 80146f2:	f10d 0306 	add.w	r3, sp, #6
 80146f6:	f7ff ffb7 	bl	8014668 <enet_phy_write_read>
 80146fa:	b310      	cbz	r0, 8014742 <enet_phy_config+0x7e>
 80146fc:	2200      	movs	r2, #0
 80146fe:	4817      	ldr	r0, [pc, #92]	; (801475c <enet_phy_config+0x98>)
 8014700:	f7ff feaa 	bl	8014458 <enet_delay>
 8014704:	2101      	movs	r1, #1
 8014706:	4610      	mov	r0, r2
 8014708:	f10d 0306 	add.w	r3, sp, #6
 801470c:	f7ff ffac 	bl	8014668 <enet_phy_write_read>
 8014710:	b1b8      	cbz	r0, 8014742 <enet_phy_config+0x7e>
 8014712:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014716:	43c0      	mvns	r0, r0
 8014718:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 801471c:	e012      	b.n	8014744 <enet_phy_config+0x80>
 801471e:	4b10      	ldr	r3, [pc, #64]	; (8014760 <enet_phy_config+0x9c>)
 8014720:	4a10      	ldr	r2, [pc, #64]	; (8014764 <enet_phy_config+0xa0>)
 8014722:	4403      	add	r3, r0
 8014724:	4293      	cmp	r3, r2
 8014726:	d802      	bhi.n	801472e <enet_phy_config+0x6a>
 8014728:	f044 040c 	orr.w	r4, r4, #12
 801472c:	e7d9      	b.n	80146e2 <enet_phy_config+0x1e>
 801472e:	4b0e      	ldr	r3, [pc, #56]	; (8014768 <enet_phy_config+0xa4>)
 8014730:	4a0e      	ldr	r2, [pc, #56]	; (801476c <enet_phy_config+0xa8>)
 8014732:	4403      	add	r3, r0
 8014734:	4293      	cmp	r3, r2
 8014736:	d9d4      	bls.n	80146e2 <enet_phy_config+0x1e>
 8014738:	4b0d      	ldr	r3, [pc, #52]	; (8014770 <enet_phy_config+0xac>)
 801473a:	4a0e      	ldr	r2, [pc, #56]	; (8014774 <enet_phy_config+0xb0>)
 801473c:	4403      	add	r3, r0
 801473e:	4293      	cmp	r3, r2
 8014740:	d902      	bls.n	8014748 <enet_phy_config+0x84>
 8014742:	2000      	movs	r0, #0
 8014744:	b003      	add	sp, #12
 8014746:	bd30      	pop	{r4, r5, pc}
 8014748:	f044 0404 	orr.w	r4, r4, #4
 801474c:	e7c9      	b.n	80146e2 <enet_phy_config+0x1e>
 801474e:	bf00      	nop
 8014750:	40028000 	andmi	r8, r2, r0
 8014754:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8014758:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 801475c:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8014760:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8014764:	017d783f 	cmneq	sp, pc, lsr r8
 8014768:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 801476c:	01c9c37f 	biceq	ip, r9, pc, ror r3
 8014770:	faa2b580 	blx	68c1d78 <__stack_size+0x68c0578>
 8014774:	0112a880 	tsteq	r2, r0, lsl #17

08014778 <enet_init>:
 8014778:	2300      	movs	r3, #0
 801477a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801477c:	4604      	mov	r4, r0
 801477e:	460d      	mov	r5, r1
 8014780:	4616      	mov	r6, r2
 8014782:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014786:	f7ff ff9d 	bl	80146c4 <enet_phy_config>
 801478a:	2800      	cmp	r0, #0
 801478c:	d037      	beq.n	80147fe <enet_init+0x86>
 801478e:	4b3b      	ldr	r3, [pc, #236]	; (801487c <enet_init+0x104>)
 8014790:	4a3b      	ldr	r2, [pc, #236]	; (8014880 <enet_init+0x108>)
 8014792:	6819      	ldr	r1, [r3, #0]
 8014794:	2c01      	cmp	r4, #1
 8014796:	ea02 0201 	and.w	r2, r2, r1
 801479a:	601a      	str	r2, [r3, #0]
 801479c:	f04f 0200 	mov.w	r2, #0
 80147a0:	605a      	str	r2, [r3, #4]
 80147a2:	609a      	str	r2, [r3, #8]
 80147a4:	60da      	str	r2, [r3, #12]
 80147a6:	6999      	ldr	r1, [r3, #24]
 80147a8:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 80147ac:	ea4f 4101 	mov.w	r1, r1, lsl #16
 80147b0:	ea4f 4111 	mov.w	r1, r1, lsr #16
 80147b4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80147b8:	6199      	str	r1, [r3, #24]
 80147ba:	4932      	ldr	r1, [pc, #200]	; (8014884 <enet_init+0x10c>)
 80147bc:	61da      	str	r2, [r3, #28]
 80147be:	6988      	ldr	r0, [r1, #24]
 80147c0:	4b31      	ldr	r3, [pc, #196]	; (8014888 <enet_init+0x110>)
 80147c2:	ea03 0300 	and.w	r3, r3, r0
 80147c6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80147ca:	618b      	str	r3, [r1, #24]
 80147cc:	680b      	ldr	r3, [r1, #0]
 80147ce:	4b2f      	ldr	r3, [pc, #188]	; (801488c <enet_init+0x114>)
 80147d0:	600b      	str	r3, [r1, #0]
 80147d2:	d01e      	beq.n	8014812 <enet_init+0x9a>
 80147d4:	08e3      	lsrs	r3, r4, #3
 80147d6:	0861      	lsrs	r1, r4, #1
 80147d8:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 80147dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80147e0:	430b      	orrs	r3, r1
 80147e2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80147e6:	2101      	movs	r1, #1
 80147e8:	2002      	movs	r0, #2
 80147ea:	f10d 0306 	add.w	r3, sp, #6
 80147ee:	f7ff ff3b 	bl	8014668 <enet_phy_write_read>
 80147f2:	b158      	cbz	r0, 801480c <enet_init+0x94>
 80147f4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80147f8:	f7ff fe2e 	bl	8014458 <enet_delay>
 80147fc:	e05d      	b.n	80148ba <enet_init+0x142>
 80147fe:	4824      	ldr	r0, [pc, #144]	; (8014890 <enet_init+0x118>)
 8014800:	f7ff fe2a 	bl	8014458 <enet_delay>
 8014804:	f7ff ff5e 	bl	80146c4 <enet_phy_config>
 8014808:	2800      	cmp	r0, #0
 801480a:	d1c0      	bne.n	801478e <enet_init+0x16>
 801480c:	2000      	movs	r0, #0
 801480e:	b003      	add	sp, #12
 8014810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014812:	4614      	mov	r4, r2
 8014814:	4f1f      	ldr	r7, [pc, #124]	; (8014894 <enet_init+0x11c>)
 8014816:	2201      	movs	r2, #1
 8014818:	2000      	movs	r0, #0
 801481a:	4611      	mov	r1, r2
 801481c:	f10d 0306 	add.w	r3, sp, #6
 8014820:	f7ff ff22 	bl	8014668 <enet_phy_write_read>
 8014824:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014828:	3401      	adds	r4, #1
 801482a:	f002 0204 	and.w	r2, r2, #4
 801482e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014832:	b912      	cbnz	r2, 801483a <enet_init+0xc2>
 8014834:	42bc      	cmp	r4, r7
 8014836:	d1ee      	bne.n	8014816 <enet_init+0x9e>
 8014838:	e7e8      	b.n	801480c <enet_init+0x94>
 801483a:	42bc      	cmp	r4, r7
 801483c:	d0e6      	beq.n	801480c <enet_init+0x94>
 801483e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014842:	2101      	movs	r1, #1
 8014844:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014848:	2002      	movs	r0, #2
 801484a:	2200      	movs	r2, #0
 801484c:	f7ff ff0c 	bl	8014668 <enet_phy_write_read>
 8014850:	2800      	cmp	r0, #0
 8014852:	d0db      	beq.n	801480c <enet_init+0x94>
 8014854:	2400      	movs	r4, #0
 8014856:	4f0f      	ldr	r7, [pc, #60]	; (8014894 <enet_init+0x11c>)
 8014858:	2201      	movs	r2, #1
 801485a:	2000      	movs	r0, #0
 801485c:	4611      	mov	r1, r2
 801485e:	f10d 0306 	add.w	r3, sp, #6
 8014862:	f7ff ff01 	bl	8014668 <enet_phy_write_read>
 8014866:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801486a:	3401      	adds	r4, #1
 801486c:	f002 0220 	and.w	r2, r2, #32
 8014870:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014874:	b982      	cbnz	r2, 8014898 <enet_init+0x120>
 8014876:	42bc      	cmp	r4, r7
 8014878:	d1ee      	bne.n	8014858 <enet_init+0xe0>
 801487a:	e7c7      	b.n	801480c <enet_init+0x94>
 801487c:	40028000 	andmi	r8, r2, r0
 8014880:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8014884:	40029000 	andmi	r9, r2, r0
 8014888:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 801488c:	02c16000 	sbceq	r6, r1, #0
 8014890:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8014894:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8014898:	42bc      	cmp	r4, r7
 801489a:	d0b7      	beq.n	801480c <enet_init+0x94>
 801489c:	2101      	movs	r1, #1
 801489e:	2210      	movs	r2, #16
 80148a0:	2000      	movs	r0, #0
 80148a2:	f7ff fee1 	bl	8014668 <enet_phy_write_read>
 80148a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80148aa:	f3c3 0480 	ubfx	r4, r3, #2, #1
 80148ae:	0799      	lsls	r1, r3, #30
 80148b0:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 80148b4:	d401      	bmi.n	80148ba <enet_init+0x142>
 80148b6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80148ba:	4b63      	ldr	r3, [pc, #396]	; (8014a48 <enet_init+0x2d0>)
 80148bc:	681a      	ldr	r2, [r3, #0]
 80148be:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 80148c2:	4314      	orrs	r4, r2
 80148c4:	056a      	lsls	r2, r5, #21
 80148c6:	601c      	str	r4, [r3, #0]
 80148c8:	d50b      	bpl.n	80148e2 <enet_init+0x16a>
 80148ca:	681a      	ldr	r2, [r3, #0]
 80148cc:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 80148d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80148d4:	601a      	str	r2, [r3, #0]
 80148d6:	4a5d      	ldr	r2, [pc, #372]	; (8014a4c <enet_init+0x2d4>)
 80148d8:	6993      	ldr	r3, [r2, #24]
 80148da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80148de:	431d      	orrs	r5, r3
 80148e0:	6195      	str	r5, [r2, #24]
 80148e2:	4959      	ldr	r1, [pc, #356]	; (8014a48 <enet_init+0x2d0>)
 80148e4:	684b      	ldr	r3, [r1, #4]
 80148e6:	431e      	orrs	r6, r3
 80148e8:	4b59      	ldr	r3, [pc, #356]	; (8014a50 <enet_init+0x2d8>)
 80148ea:	604e      	str	r6, [r1, #4]
 80148ec:	681a      	ldr	r2, [r3, #0]
 80148ee:	07d7      	lsls	r7, r2, #31
 80148f0:	d510      	bpl.n	8014914 <enet_init+0x19c>
 80148f2:	685a      	ldr	r2, [r3, #4]
 80148f4:	680c      	ldr	r4, [r1, #0]
 80148f6:	f002 0080 	and.w	r0, r2, #128	; 0x80
 80148fa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80148fe:	4320      	orrs	r0, r4
 8014900:	6008      	str	r0, [r1, #0]
 8014902:	4852      	ldr	r0, [pc, #328]	; (8014a4c <enet_init+0x2d4>)
 8014904:	0892      	lsrs	r2, r2, #2
 8014906:	6981      	ldr	r1, [r0, #24]
 8014908:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 801490c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8014910:	430a      	orrs	r2, r1
 8014912:	6182      	str	r2, [r0, #24]
 8014914:	681a      	ldr	r2, [r3, #0]
 8014916:	0796      	lsls	r6, r2, #30
 8014918:	d508      	bpl.n	801492c <enet_init+0x1b4>
 801491a:	494c      	ldr	r1, [pc, #304]	; (8014a4c <enet_init+0x2d4>)
 801491c:	6898      	ldr	r0, [r3, #8]
 801491e:	680a      	ldr	r2, [r1, #0]
 8014920:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8014924:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014928:	4302      	orrs	r2, r0
 801492a:	600a      	str	r2, [r1, #0]
 801492c:	681a      	ldr	r2, [r3, #0]
 801492e:	0755      	lsls	r5, r2, #29
 8014930:	d508      	bpl.n	8014944 <enet_init+0x1cc>
 8014932:	4946      	ldr	r1, [pc, #280]	; (8014a4c <enet_init+0x2d4>)
 8014934:	68d8      	ldr	r0, [r3, #12]
 8014936:	680a      	ldr	r2, [r1, #0]
 8014938:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 801493c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8014940:	4302      	orrs	r2, r0
 8014942:	600a      	str	r2, [r1, #0]
 8014944:	681a      	ldr	r2, [r3, #0]
 8014946:	0714      	lsls	r4, r2, #28
 8014948:	d508      	bpl.n	801495c <enet_init+0x1e4>
 801494a:	4940      	ldr	r1, [pc, #256]	; (8014a4c <enet_init+0x2d4>)
 801494c:	6918      	ldr	r0, [r3, #16]
 801494e:	680a      	ldr	r2, [r1, #0]
 8014950:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8014954:	f022 0202 	bic.w	r2, r2, #2
 8014958:	4302      	orrs	r2, r0
 801495a:	600a      	str	r2, [r1, #0]
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	06d0      	lsls	r0, r2, #27
 8014960:	d506      	bpl.n	8014970 <enet_init+0x1f8>
 8014962:	493a      	ldr	r1, [pc, #232]	; (8014a4c <enet_init+0x2d4>)
 8014964:	4a3b      	ldr	r2, [pc, #236]	; (8014a54 <enet_init+0x2dc>)
 8014966:	6988      	ldr	r0, [r1, #24]
 8014968:	4002      	ands	r2, r0
 801496a:	6958      	ldr	r0, [r3, #20]
 801496c:	4302      	orrs	r2, r0
 801496e:	618a      	str	r2, [r1, #24]
 8014970:	681a      	ldr	r2, [r3, #0]
 8014972:	0691      	lsls	r1, r2, #26
 8014974:	d508      	bpl.n	8014988 <enet_init+0x210>
 8014976:	4935      	ldr	r1, [pc, #212]	; (8014a4c <enet_init+0x2d4>)
 8014978:	6998      	ldr	r0, [r3, #24]
 801497a:	698a      	ldr	r2, [r1, #24]
 801497c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8014980:	f022 0204 	bic.w	r2, r2, #4
 8014984:	4302      	orrs	r2, r0
 8014986:	618a      	str	r2, [r1, #24]
 8014988:	681a      	ldr	r2, [r3, #0]
 801498a:	0652      	lsls	r2, r2, #25
 801498c:	d506      	bpl.n	801499c <enet_init+0x224>
 801498e:	492e      	ldr	r1, [pc, #184]	; (8014a48 <enet_init+0x2d0>)
 8014990:	69d8      	ldr	r0, [r3, #28]
 8014992:	69ca      	ldr	r2, [r1, #28]
 8014994:	0c52      	lsrs	r2, r2, #17
 8014996:	0452      	lsls	r2, r2, #17
 8014998:	4302      	orrs	r2, r0
 801499a:	61ca      	str	r2, [r1, #28]
 801499c:	681a      	ldr	r2, [r3, #0]
 801499e:	0617      	lsls	r7, r2, #24
 80149a0:	d517      	bpl.n	80149d2 <enet_init+0x25a>
 80149a2:	4c29      	ldr	r4, [pc, #164]	; (8014a48 <enet_init+0x2d0>)
 80149a4:	6a1a      	ldr	r2, [r3, #32]
 80149a6:	69a0      	ldr	r0, [r4, #24]
 80149a8:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 80149ac:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 80149b0:	0400      	lsls	r0, r0, #16
 80149b2:	0c00      	lsrs	r0, r0, #16
 80149b4:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 80149b8:	4301      	orrs	r1, r0
 80149ba:	4824      	ldr	r0, [pc, #144]	; (8014a4c <enet_init+0x2d4>)
 80149bc:	61a1      	str	r1, [r4, #24]
 80149be:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80149c2:	0a12      	lsrs	r2, r2, #8
 80149c4:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 80149c8:	f002 0277 	and.w	r2, r2, #119	; 0x77
 80149cc:	430a      	orrs	r2, r1
 80149ce:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80149d2:	681a      	ldr	r2, [r3, #0]
 80149d4:	05d6      	lsls	r6, r2, #23
 80149d6:	bf42      	ittt	mi
 80149d8:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 80149da:	4a1b      	ldrmi	r2, [pc, #108]	; (8014a48 <enet_init+0x2d0>)
 80149dc:	6091      	strmi	r1, [r2, #8]
 80149de:	681a      	ldr	r2, [r3, #0]
 80149e0:	0595      	lsls	r5, r2, #22
 80149e2:	bf42      	ittt	mi
 80149e4:	4a18      	ldrmi	r2, [pc, #96]	; (8014a48 <enet_init+0x2d0>)
 80149e6:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 80149e8:	60d1      	strmi	r1, [r2, #12]
 80149ea:	681a      	ldr	r2, [r3, #0]
 80149ec:	0554      	lsls	r4, r2, #21
 80149ee:	d508      	bpl.n	8014a02 <enet_init+0x28a>
 80149f0:	4915      	ldr	r1, [pc, #84]	; (8014a48 <enet_init+0x2d0>)
 80149f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80149f4:	684a      	ldr	r2, [r1, #4]
 80149f6:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 80149fa:	f022 0206 	bic.w	r2, r2, #6
 80149fe:	4302      	orrs	r2, r0
 8014a00:	604a      	str	r2, [r1, #4]
 8014a02:	681a      	ldr	r2, [r3, #0]
 8014a04:	0510      	lsls	r0, r2, #20
 8014a06:	d508      	bpl.n	8014a1a <enet_init+0x2a2>
 8014a08:	490f      	ldr	r1, [pc, #60]	; (8014a48 <enet_init+0x2d0>)
 8014a0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014a0c:	680a      	ldr	r2, [r1, #0]
 8014a0e:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8014a12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8014a16:	4302      	orrs	r2, r0
 8014a18:	600a      	str	r2, [r1, #0]
 8014a1a:	681a      	ldr	r2, [r3, #0]
 8014a1c:	04d1      	lsls	r1, r2, #19
 8014a1e:	d506      	bpl.n	8014a2e <enet_init+0x2b6>
 8014a20:	4909      	ldr	r1, [pc, #36]	; (8014a48 <enet_init+0x2d0>)
 8014a22:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014a24:	680a      	ldr	r2, [r1, #0]
 8014a26:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8014a2a:	4302      	orrs	r2, r0
 8014a2c:	600a      	str	r2, [r1, #0]
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	0492      	lsls	r2, r2, #18
 8014a32:	d506      	bpl.n	8014a42 <enet_init+0x2ca>
 8014a34:	4904      	ldr	r1, [pc, #16]	; (8014a48 <enet_init+0x2d0>)
 8014a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a38:	680a      	ldr	r2, [r1, #0]
 8014a3a:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8014a3e:	4313      	orrs	r3, r2
 8014a40:	600b      	str	r3, [r1, #0]
 8014a42:	2001      	movs	r0, #1
 8014a44:	e6e3      	b.n	801480e <enet_init+0x96>
 8014a46:	bf00      	nop
 8014a48:	40028000 	andmi	r8, r2, r0
 8014a4c:	40029000 	andmi	r9, r2, r0
 8014a50:	20009d20 	andcs	r9, r0, r0, lsr #26
 8014a54:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08014a58 <enet_txfifo_flush>:
 8014a58:	4b06      	ldr	r3, [pc, #24]	; (8014a74 <enet_txfifo_flush+0x1c>)
 8014a5a:	4807      	ldr	r0, [pc, #28]	; (8014a78 <enet_txfifo_flush+0x20>)
 8014a5c:	699a      	ldr	r2, [r3, #24]
 8014a5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014a62:	619a      	str	r2, [r3, #24]
 8014a64:	699a      	ldr	r2, [r3, #24]
 8014a66:	02d2      	lsls	r2, r2, #11
 8014a68:	d502      	bpl.n	8014a70 <enet_txfifo_flush+0x18>
 8014a6a:	3801      	subs	r0, #1
 8014a6c:	d1fa      	bne.n	8014a64 <enet_txfifo_flush+0xc>
 8014a6e:	4770      	bx	lr
 8014a70:	2001      	movs	r0, #1
 8014a72:	4770      	bx	lr
 8014a74:	40029000 	andmi	r9, r2, r0
 8014a78:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014a7c <enet_tx_enable>:
 8014a7c:	4a06      	ldr	r2, [pc, #24]	; (8014a98 <enet_tx_enable+0x1c>)
 8014a7e:	b508      	push	{r3, lr}
 8014a80:	6813      	ldr	r3, [r2, #0]
 8014a82:	f043 0308 	orr.w	r3, r3, #8
 8014a86:	6013      	str	r3, [r2, #0]
 8014a88:	f7ff ffe6 	bl	8014a58 <enet_txfifo_flush>
 8014a8c:	4a03      	ldr	r2, [pc, #12]	; (8014a9c <enet_tx_enable+0x20>)
 8014a8e:	6993      	ldr	r3, [r2, #24]
 8014a90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014a94:	6193      	str	r3, [r2, #24]
 8014a96:	bd08      	pop	{r3, pc}
 8014a98:	40028000 	andmi	r8, r2, r0
 8014a9c:	40029000 	andmi	r9, r2, r0

08014aa0 <enet_enable>:
 8014aa0:	b508      	push	{r3, lr}
 8014aa2:	f7ff ffeb 	bl	8014a7c <enet_tx_enable>
 8014aa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014aaa:	f7ff bdcf 	b.w	801464c <enet_rx_enable>

08014aae <enet_desc_information_get>:
 8014aae:	2905      	cmp	r1, #5
 8014ab0:	d817      	bhi.n	8014ae2 <enet_desc_information_get+0x34>
 8014ab2:	e8df f001 	tbb	[pc, r1]
 8014ab6:	03091012 	movweq	r1, #36882	; 0x9012
 8014aba:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8014abe:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8014ac2:	4770      	bx	lr
 8014ac4:	88c0      	ldrh	r0, [r0, #6]
 8014ac6:	e7fa      	b.n	8014abe <enet_desc_information_get+0x10>
 8014ac8:	8840      	ldrh	r0, [r0, #2]
 8014aca:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8014ace:	2804      	cmp	r0, #4
 8014ad0:	d90a      	bls.n	8014ae8 <enet_desc_information_get+0x3a>
 8014ad2:	3804      	subs	r0, #4
 8014ad4:	4770      	bx	lr
 8014ad6:	6880      	ldr	r0, [r0, #8]
 8014ad8:	4770      	bx	lr
 8014ada:	6800      	ldr	r0, [r0, #0]
 8014adc:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8014ae0:	4770      	bx	lr
 8014ae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ae6:	4770      	bx	lr
 8014ae8:	2000      	movs	r0, #0
 8014aea:	4770      	bx	lr

08014aec <enet_rxframe_drop>:
 8014aec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014af0:	4814      	ldr	r0, [pc, #80]	; (8014b44 <enet_rxframe_drop+0x58>)
 8014af2:	b510      	push	{r4, lr}
 8014af4:	6802      	ldr	r2, [r0, #0]
 8014af6:	4914      	ldr	r1, [pc, #80]	; (8014b48 <enet_rxframe_drop+0x5c>)
 8014af8:	6854      	ldr	r4, [r2, #4]
 8014afa:	6013      	str	r3, [r2, #0]
 8014afc:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8014b00:	680b      	ldr	r3, [r1, #0]
 8014b02:	d009      	beq.n	8014b18 <enet_rxframe_drop+0x2c>
 8014b04:	b12b      	cbz	r3, 8014b12 <enet_rxframe_drop+0x26>
 8014b06:	68da      	ldr	r2, [r3, #12]
 8014b08:	6002      	str	r2, [r0, #0]
 8014b0a:	681a      	ldr	r2, [r3, #0]
 8014b0c:	b1ba      	cbz	r2, 8014b3e <enet_rxframe_drop+0x52>
 8014b0e:	600a      	str	r2, [r1, #0]
 8014b10:	bd10      	pop	{r4, pc}
 8014b12:	68d3      	ldr	r3, [r2, #12]
 8014b14:	6003      	str	r3, [r0, #0]
 8014b16:	e7fb      	b.n	8014b10 <enet_rxframe_drop+0x24>
 8014b18:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8014b1c:	4c0b      	ldr	r4, [pc, #44]	; (8014b4c <enet_rxframe_drop+0x60>)
 8014b1e:	d006      	beq.n	8014b2e <enet_rxframe_drop+0x42>
 8014b20:	68e2      	ldr	r2, [r4, #12]
 8014b22:	6002      	str	r2, [r0, #0]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d0f3      	beq.n	8014b10 <enet_rxframe_drop+0x24>
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	600b      	str	r3, [r1, #0]
 8014b2c:	e7f0      	b.n	8014b10 <enet_rxframe_drop+0x24>
 8014b2e:	6824      	ldr	r4, [r4, #0]
 8014b30:	3210      	adds	r2, #16
 8014b32:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8014b36:	4422      	add	r2, r4
 8014b38:	6002      	str	r2, [r0, #0]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d0e8      	beq.n	8014b10 <enet_rxframe_drop+0x24>
 8014b3e:	3310      	adds	r3, #16
 8014b40:	e7f3      	b.n	8014b2a <enet_rxframe_drop+0x3e>
 8014b42:	bf00      	nop
 8014b44:	20009d18 	andcs	r9, r0, r8, lsl sp
 8014b48:	20009d10 	andcs	r9, r0, r0, lsl sp
 8014b4c:	40029000 	andmi	r9, r2, r0

08014b50 <enet_rxframe_size_get>:
 8014b50:	b508      	push	{r3, lr}
 8014b52:	4b0c      	ldr	r3, [pc, #48]	; (8014b84 <enet_rxframe_size_get+0x34>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	6818      	ldr	r0, [r3, #0]
 8014b58:	2800      	cmp	r0, #0
 8014b5a:	db10      	blt.n	8014b7e <enet_rxframe_size_get+0x2e>
 8014b5c:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8014b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014b64:	d003      	beq.n	8014b6e <enet_rxframe_size_get+0x1e>
 8014b66:	f7ff ffc1 	bl	8014aec <enet_rxframe_drop>
 8014b6a:	2001      	movs	r0, #1
 8014b6c:	bd08      	pop	{r3, pc}
 8014b6e:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8014b72:	2b21      	cmp	r3, #33	; 0x21
 8014b74:	d0f7      	beq.n	8014b66 <enet_rxframe_size_get+0x16>
 8014b76:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8014b7a:	3804      	subs	r0, #4
 8014b7c:	e7f6      	b.n	8014b6c <enet_rxframe_size_get+0x1c>
 8014b7e:	2000      	movs	r0, #0
 8014b80:	e7f4      	b.n	8014b6c <enet_rxframe_size_get+0x1c>
 8014b82:	bf00      	nop
 8014b84:	20009d18 	andcs	r9, r0, r8, lsl sp

08014b88 <enet_initpara_reset>:
 8014b88:	2200      	movs	r2, #0
 8014b8a:	4b08      	ldr	r3, [pc, #32]	; (8014bac <enet_initpara_reset+0x24>)
 8014b8c:	e9c3 2200 	strd	r2, r2, [r3]
 8014b90:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8014b94:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8014b98:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8014b9c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8014ba0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8014ba4:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8014ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8014baa:	4770      	bx	lr
 8014bac:	20009d20 	andcs	r9, r0, r0, lsr #26

08014bb0 <enet_deinit>:
 8014bb0:	b508      	push	{r3, lr}
 8014bb2:	f640 200e 	movw	r0, #2574	; 0xa0e
 8014bb6:	f7fe fcd6 	bl	8013566 <rcu_periph_reset_enable>
 8014bba:	f640 200e 	movw	r0, #2574	; 0xa0e
 8014bbe:	f7fe fcd4 	bl	801356a <rcu_periph_reset_disable>
 8014bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014bc6:	f7ff bfdf 	b.w	8014b88 <enet_initpara_reset>
	...

08014bcc <i2c_clock_config>:
 8014bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bce:	4605      	mov	r5, r0
 8014bd0:	2002      	movs	r0, #2
 8014bd2:	460c      	mov	r4, r1
 8014bd4:	4617      	mov	r7, r2
 8014bd6:	f7fe fd81 	bl	80136dc <rcu_clock_freq_get>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	4828      	ldr	r0, [pc, #160]	; (8014c80 <i2c_clock_config+0xb4>)
 8014bde:	4a29      	ldr	r2, [pc, #164]	; (8014c84 <i2c_clock_config+0xb8>)
 8014be0:	fbb3 f0f0 	udiv	r0, r3, r0
 8014be4:	4293      	cmp	r3, r2
 8014be6:	bf34      	ite	cc
 8014be8:	4601      	movcc	r1, r0
 8014bea:	2136      	movcs	r1, #54	; 0x36
 8014bec:	686e      	ldr	r6, [r5, #4]
 8014bee:	4a26      	ldr	r2, [pc, #152]	; (8014c88 <i2c_clock_config+0xbc>)
 8014bf0:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8014bf4:	430e      	orrs	r6, r1
 8014bf6:	4294      	cmp	r4, r2
 8014bf8:	606e      	str	r6, [r5, #4]
 8014bfa:	d816      	bhi.n	8014c2a <i2c_clock_config+0x5e>
 8014bfc:	3001      	adds	r0, #1
 8014bfe:	2835      	cmp	r0, #53	; 0x35
 8014c00:	d90d      	bls.n	8014c1e <i2c_clock_config+0x52>
 8014c02:	2236      	movs	r2, #54	; 0x36
 8014c04:	622a      	str	r2, [r5, #32]
 8014c06:	0064      	lsls	r4, r4, #1
 8014c08:	fbb3 f4f4 	udiv	r4, r3, r4
 8014c0c:	2c04      	cmp	r4, #4
 8014c0e:	bf38      	it	cc
 8014c10:	2404      	movcc	r4, #4
 8014c12:	69ea      	ldr	r2, [r5, #28]
 8014c14:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8014c18:	4314      	orrs	r4, r2
 8014c1a:	61ec      	str	r4, [r5, #28]
 8014c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c1e:	2802      	cmp	r0, #2
 8014c20:	d801      	bhi.n	8014c26 <i2c_clock_config+0x5a>
 8014c22:	2202      	movs	r2, #2
 8014c24:	e7ee      	b.n	8014c04 <i2c_clock_config+0x38>
 8014c26:	6228      	str	r0, [r5, #32]
 8014c28:	e7ed      	b.n	8014c06 <i2c_clock_config+0x3a>
 8014c2a:	4a18      	ldr	r2, [pc, #96]	; (8014c8c <i2c_clock_config+0xc0>)
 8014c2c:	4294      	cmp	r4, r2
 8014c2e:	d8f5      	bhi.n	8014c1c <i2c_clock_config+0x50>
 8014c30:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014c34:	4351      	muls	r1, r2
 8014c36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014c3a:	fbb1 f1f2 	udiv	r1, r1, r2
 8014c3e:	3101      	adds	r1, #1
 8014c40:	6229      	str	r1, [r5, #32]
 8014c42:	b9a7      	cbnz	r7, 8014c6e <i2c_clock_config+0xa2>
 8014c44:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014c48:	fbb3 f4f4 	udiv	r4, r3, r4
 8014c4c:	69eb      	ldr	r3, [r5, #28]
 8014c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014c52:	61eb      	str	r3, [r5, #28]
 8014c54:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8014c58:	b90b      	cbnz	r3, 8014c5e <i2c_clock_config+0x92>
 8014c5a:	f044 0401 	orr.w	r4, r4, #1
 8014c5e:	69eb      	ldr	r3, [r5, #28]
 8014c60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014c64:	61eb      	str	r3, [r5, #28]
 8014c66:	69eb      	ldr	r3, [r5, #28]
 8014c68:	4323      	orrs	r3, r4
 8014c6a:	61eb      	str	r3, [r5, #28]
 8014c6c:	e7d6      	b.n	8014c1c <i2c_clock_config+0x50>
 8014c6e:	2219      	movs	r2, #25
 8014c70:	4354      	muls	r4, r2
 8014c72:	fbb3 f4f4 	udiv	r4, r3, r4
 8014c76:	69eb      	ldr	r3, [r5, #28]
 8014c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014c7c:	e7e9      	b.n	8014c52 <i2c_clock_config+0x86>
 8014c7e:	bf00      	nop
 8014c80:	000f4240 	andeq	r4, pc, r0, asr #4
 8014c84:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8014c88:	000186a0 	andeq	r8, r1, r0, lsr #13
 8014c8c:	00061a80 	andeq	r1, r6, r0, lsl #21

08014c90 <i2c_ack_config>:
 8014c90:	6803      	ldr	r3, [r0, #0]
 8014c92:	2901      	cmp	r1, #1
 8014c94:	bf0c      	ite	eq
 8014c96:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8014c9a:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8014c9e:	6003      	str	r3, [r0, #0]
 8014ca0:	4770      	bx	lr

08014ca2 <i2c_ackpos_config>:
 8014ca2:	6803      	ldr	r3, [r0, #0]
 8014ca4:	b919      	cbnz	r1, 8014cae <i2c_ackpos_config+0xc>
 8014ca6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014caa:	6003      	str	r3, [r0, #0]
 8014cac:	4770      	bx	lr
 8014cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014cb2:	e7fa      	b.n	8014caa <i2c_ackpos_config+0x8>

08014cb4 <i2c_master_addressing>:
 8014cb4:	3202      	adds	r2, #2
 8014cb6:	bf0c      	ite	eq
 8014cb8:	f021 0101 	biceq.w	r1, r1, #1
 8014cbc:	f041 0101 	orrne.w	r1, r1, #1
 8014cc0:	6101      	str	r1, [r0, #16]
 8014cc2:	4770      	bx	lr

08014cc4 <i2c_enable>:
 8014cc4:	6803      	ldr	r3, [r0, #0]
 8014cc6:	f043 0301 	orr.w	r3, r3, #1
 8014cca:	6003      	str	r3, [r0, #0]
 8014ccc:	4770      	bx	lr

08014cce <i2c_start_on_bus>:
 8014cce:	6803      	ldr	r3, [r0, #0]
 8014cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014cd4:	6003      	str	r3, [r0, #0]
 8014cd6:	4770      	bx	lr

08014cd8 <i2c_stop_on_bus>:
 8014cd8:	6803      	ldr	r3, [r0, #0]
 8014cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014cde:	6003      	str	r3, [r0, #0]
 8014ce0:	4770      	bx	lr

08014ce2 <i2c_data_transmit>:
 8014ce2:	6101      	str	r1, [r0, #16]
 8014ce4:	4770      	bx	lr

08014ce6 <i2c_data_receive>:
 8014ce6:	6900      	ldr	r0, [r0, #16]
 8014ce8:	b2c0      	uxtb	r0, r0
 8014cea:	4770      	bx	lr

08014cec <i2c_flag_get>:
 8014cec:	098b      	lsrs	r3, r1, #6
 8014cee:	581a      	ldr	r2, [r3, r0]
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	f001 011f 	and.w	r1, r1, #31
 8014cf6:	408b      	lsls	r3, r1
 8014cf8:	4213      	tst	r3, r2
 8014cfa:	bf14      	ite	ne
 8014cfc:	2001      	movne	r0, #1
 8014cfe:	2000      	moveq	r0, #0
 8014d00:	4770      	bx	lr

08014d02 <i2c_flag_clear>:
 8014d02:	f240 5301 	movw	r3, #1281	; 0x501
 8014d06:	4299      	cmp	r1, r3
 8014d08:	b510      	push	{r4, lr}
 8014d0a:	d102      	bne.n	8014d12 <i2c_flag_clear+0x10>
 8014d0c:	6943      	ldr	r3, [r0, #20]
 8014d0e:	6983      	ldr	r3, [r0, #24]
 8014d10:	bd10      	pop	{r4, pc}
 8014d12:	2201      	movs	r2, #1
 8014d14:	098c      	lsrs	r4, r1, #6
 8014d16:	5823      	ldr	r3, [r4, r0]
 8014d18:	f001 011f 	and.w	r1, r1, #31
 8014d1c:	408a      	lsls	r2, r1
 8014d1e:	ea23 0302 	bic.w	r3, r3, r2
 8014d22:	5023      	str	r3, [r4, r0]
 8014d24:	e7f4      	b.n	8014d10 <i2c_flag_clear+0xe>
	...

08014d28 <__popcountsi2>:
 8014d28:	0843      	lsrs	r3, r0, #1
 8014d2a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8014d2e:	1ac0      	subs	r0, r0, r3
 8014d30:	0883      	lsrs	r3, r0, #2
 8014d32:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8014d36:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8014d3a:	4418      	add	r0, r3
 8014d3c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8014d40:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8014d44:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8014d48:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8014d4c:	0e00      	lsrs	r0, r0, #24
 8014d4e:	4770      	bx	lr

08014d50 <__udivmoddi4>:
 8014d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d54:	9e08      	ldr	r6, [sp, #32]
 8014d56:	460d      	mov	r5, r1
 8014d58:	4604      	mov	r4, r0
 8014d5a:	468e      	mov	lr, r1
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d14c      	bne.n	8014dfa <__udivmoddi4+0xaa>
 8014d60:	428a      	cmp	r2, r1
 8014d62:	4694      	mov	ip, r2
 8014d64:	d967      	bls.n	8014e36 <__udivmoddi4+0xe6>
 8014d66:	fab2 f382 	clz	r3, r2
 8014d6a:	b153      	cbz	r3, 8014d82 <__udivmoddi4+0x32>
 8014d6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8014d70:	f1c3 0220 	rsb	r2, r3, #32
 8014d74:	fa01 fe03 	lsl.w	lr, r1, r3
 8014d78:	fa20 f202 	lsr.w	r2, r0, r2
 8014d7c:	ea42 0e0e 	orr.w	lr, r2, lr
 8014d80:	409c      	lsls	r4, r3
 8014d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8014d86:	fbbe f1f7 	udiv	r1, lr, r7
 8014d8a:	fa1f f58c 	uxth.w	r5, ip
 8014d8e:	fb07 ee11 	mls	lr, r7, r1, lr
 8014d92:	fb01 f005 	mul.w	r0, r1, r5
 8014d96:	0c22      	lsrs	r2, r4, #16
 8014d98:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8014d9c:	4290      	cmp	r0, r2
 8014d9e:	d90a      	bls.n	8014db6 <__udivmoddi4+0x66>
 8014da0:	eb1c 0202 	adds.w	r2, ip, r2
 8014da4:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8014da8:	f080 8119 	bcs.w	8014fde <__udivmoddi4+0x28e>
 8014dac:	4290      	cmp	r0, r2
 8014dae:	f240 8116 	bls.w	8014fde <__udivmoddi4+0x28e>
 8014db2:	3902      	subs	r1, #2
 8014db4:	4462      	add	r2, ip
 8014db6:	1a12      	subs	r2, r2, r0
 8014db8:	fbb2 f0f7 	udiv	r0, r2, r7
 8014dbc:	fb07 2210 	mls	r2, r7, r0, r2
 8014dc0:	fb00 f505 	mul.w	r5, r0, r5
 8014dc4:	b2a4      	uxth	r4, r4
 8014dc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014dca:	42a5      	cmp	r5, r4
 8014dcc:	d90a      	bls.n	8014de4 <__udivmoddi4+0x94>
 8014dce:	eb1c 0404 	adds.w	r4, ip, r4
 8014dd2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8014dd6:	f080 8104 	bcs.w	8014fe2 <__udivmoddi4+0x292>
 8014dda:	42a5      	cmp	r5, r4
 8014ddc:	f240 8101 	bls.w	8014fe2 <__udivmoddi4+0x292>
 8014de0:	4464      	add	r4, ip
 8014de2:	3802      	subs	r0, #2
 8014de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8014de8:	2100      	movs	r1, #0
 8014dea:	1b64      	subs	r4, r4, r5
 8014dec:	b11e      	cbz	r6, 8014df6 <__udivmoddi4+0xa6>
 8014dee:	40dc      	lsrs	r4, r3
 8014df0:	2300      	movs	r3, #0
 8014df2:	e9c6 4300 	strd	r4, r3, [r6]
 8014df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dfa:	428b      	cmp	r3, r1
 8014dfc:	d908      	bls.n	8014e10 <__udivmoddi4+0xc0>
 8014dfe:	2e00      	cmp	r6, #0
 8014e00:	f000 80ea 	beq.w	8014fd8 <__udivmoddi4+0x288>
 8014e04:	2100      	movs	r1, #0
 8014e06:	e9c6 0500 	strd	r0, r5, [r6]
 8014e0a:	4608      	mov	r0, r1
 8014e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e10:	fab3 f183 	clz	r1, r3
 8014e14:	2900      	cmp	r1, #0
 8014e16:	d148      	bne.n	8014eaa <__udivmoddi4+0x15a>
 8014e18:	42ab      	cmp	r3, r5
 8014e1a:	d302      	bcc.n	8014e22 <__udivmoddi4+0xd2>
 8014e1c:	4282      	cmp	r2, r0
 8014e1e:	f200 80f8 	bhi.w	8015012 <__udivmoddi4+0x2c2>
 8014e22:	1a84      	subs	r4, r0, r2
 8014e24:	eb65 0203 	sbc.w	r2, r5, r3
 8014e28:	2001      	movs	r0, #1
 8014e2a:	4696      	mov	lr, r2
 8014e2c:	2e00      	cmp	r6, #0
 8014e2e:	d0e2      	beq.n	8014df6 <__udivmoddi4+0xa6>
 8014e30:	e9c6 4e00 	strd	r4, lr, [r6]
 8014e34:	e7df      	b.n	8014df6 <__udivmoddi4+0xa6>
 8014e36:	b902      	cbnz	r2, 8014e3a <__udivmoddi4+0xea>
 8014e38:	deff      	udf	#255	; 0xff
 8014e3a:	fab2 f382 	clz	r3, r2
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	f040 808e 	bne.w	8014f60 <__udivmoddi4+0x210>
 8014e44:	1a88      	subs	r0, r1, r2
 8014e46:	2101      	movs	r1, #1
 8014e48:	0c17      	lsrs	r7, r2, #16
 8014e4a:	fa1f fe82 	uxth.w	lr, r2
 8014e4e:	fbb0 f5f7 	udiv	r5, r0, r7
 8014e52:	fb07 0015 	mls	r0, r7, r5, r0
 8014e56:	0c22      	lsrs	r2, r4, #16
 8014e58:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8014e5c:	fb0e f005 	mul.w	r0, lr, r5
 8014e60:	4290      	cmp	r0, r2
 8014e62:	d908      	bls.n	8014e76 <__udivmoddi4+0x126>
 8014e64:	eb1c 0202 	adds.w	r2, ip, r2
 8014e68:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8014e6c:	d202      	bcs.n	8014e74 <__udivmoddi4+0x124>
 8014e6e:	4290      	cmp	r0, r2
 8014e70:	f200 80cc 	bhi.w	801500c <__udivmoddi4+0x2bc>
 8014e74:	4645      	mov	r5, r8
 8014e76:	1a12      	subs	r2, r2, r0
 8014e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8014e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8014e80:	fb0e fe00 	mul.w	lr, lr, r0
 8014e84:	b2a4      	uxth	r4, r4
 8014e86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014e8a:	45a6      	cmp	lr, r4
 8014e8c:	d908      	bls.n	8014ea0 <__udivmoddi4+0x150>
 8014e8e:	eb1c 0404 	adds.w	r4, ip, r4
 8014e92:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8014e96:	d202      	bcs.n	8014e9e <__udivmoddi4+0x14e>
 8014e98:	45a6      	cmp	lr, r4
 8014e9a:	f200 80b4 	bhi.w	8015006 <__udivmoddi4+0x2b6>
 8014e9e:	4610      	mov	r0, r2
 8014ea0:	eba4 040e 	sub.w	r4, r4, lr
 8014ea4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8014ea8:	e7a0      	b.n	8014dec <__udivmoddi4+0x9c>
 8014eaa:	f1c1 0720 	rsb	r7, r1, #32
 8014eae:	408b      	lsls	r3, r1
 8014eb0:	fa22 fc07 	lsr.w	ip, r2, r7
 8014eb4:	ea4c 0c03 	orr.w	ip, ip, r3
 8014eb8:	fa25 fa07 	lsr.w	sl, r5, r7
 8014ebc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8014ec0:	fbba f8f9 	udiv	r8, sl, r9
 8014ec4:	408d      	lsls	r5, r1
 8014ec6:	fa20 f307 	lsr.w	r3, r0, r7
 8014eca:	fb09 aa18 	mls	sl, r9, r8, sl
 8014ece:	fa1f fe8c 	uxth.w	lr, ip
 8014ed2:	432b      	orrs	r3, r5
 8014ed4:	fa00 f501 	lsl.w	r5, r0, r1
 8014ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8014edc:	0c1c      	lsrs	r4, r3, #16
 8014ede:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014ee2:	42a0      	cmp	r0, r4
 8014ee4:	fa02 f201 	lsl.w	r2, r2, r1
 8014ee8:	d90b      	bls.n	8014f02 <__udivmoddi4+0x1b2>
 8014eea:	eb1c 0404 	adds.w	r4, ip, r4
 8014eee:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8014ef2:	f080 8086 	bcs.w	8015002 <__udivmoddi4+0x2b2>
 8014ef6:	42a0      	cmp	r0, r4
 8014ef8:	f240 8083 	bls.w	8015002 <__udivmoddi4+0x2b2>
 8014efc:	f1a8 0802 	sub.w	r8, r8, #2
 8014f00:	4464      	add	r4, ip
 8014f02:	1a24      	subs	r4, r4, r0
 8014f04:	b298      	uxth	r0, r3
 8014f06:	fbb4 f3f9 	udiv	r3, r4, r9
 8014f0a:	fb09 4413 	mls	r4, r9, r3, r4
 8014f0e:	fb03 fe0e 	mul.w	lr, r3, lr
 8014f12:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8014f16:	45a6      	cmp	lr, r4
 8014f18:	d908      	bls.n	8014f2c <__udivmoddi4+0x1dc>
 8014f1a:	eb1c 0404 	adds.w	r4, ip, r4
 8014f1e:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8014f22:	d26a      	bcs.n	8014ffa <__udivmoddi4+0x2aa>
 8014f24:	45a6      	cmp	lr, r4
 8014f26:	d968      	bls.n	8014ffa <__udivmoddi4+0x2aa>
 8014f28:	3b02      	subs	r3, #2
 8014f2a:	4464      	add	r4, ip
 8014f2c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8014f30:	fba0 9302 	umull	r9, r3, r0, r2
 8014f34:	eba4 040e 	sub.w	r4, r4, lr
 8014f38:	429c      	cmp	r4, r3
 8014f3a:	46c8      	mov	r8, r9
 8014f3c:	469e      	mov	lr, r3
 8014f3e:	d354      	bcc.n	8014fea <__udivmoddi4+0x29a>
 8014f40:	d051      	beq.n	8014fe6 <__udivmoddi4+0x296>
 8014f42:	2e00      	cmp	r6, #0
 8014f44:	d067      	beq.n	8015016 <__udivmoddi4+0x2c6>
 8014f46:	ebb5 0308 	subs.w	r3, r5, r8
 8014f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8014f4e:	40cb      	lsrs	r3, r1
 8014f50:	fa04 f707 	lsl.w	r7, r4, r7
 8014f54:	431f      	orrs	r7, r3
 8014f56:	40cc      	lsrs	r4, r1
 8014f58:	e9c6 7400 	strd	r7, r4, [r6]
 8014f5c:	2100      	movs	r1, #0
 8014f5e:	e74a      	b.n	8014df6 <__udivmoddi4+0xa6>
 8014f60:	fa02 fc03 	lsl.w	ip, r2, r3
 8014f64:	f1c3 0020 	rsb	r0, r3, #32
 8014f68:	40c1      	lsrs	r1, r0
 8014f6a:	409d      	lsls	r5, r3
 8014f6c:	fa24 f000 	lsr.w	r0, r4, r0
 8014f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8014f74:	4328      	orrs	r0, r5
 8014f76:	fbb1 f5f7 	udiv	r5, r1, r7
 8014f7a:	fb07 1115 	mls	r1, r7, r5, r1
 8014f7e:	fa1f fe8c 	uxth.w	lr, ip
 8014f82:	0c02      	lsrs	r2, r0, #16
 8014f84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8014f88:	fb05 f10e 	mul.w	r1, r5, lr
 8014f8c:	4291      	cmp	r1, r2
 8014f8e:	fa04 f403 	lsl.w	r4, r4, r3
 8014f92:	d908      	bls.n	8014fa6 <__udivmoddi4+0x256>
 8014f94:	eb1c 0202 	adds.w	r2, ip, r2
 8014f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8014f9c:	d22f      	bcs.n	8014ffe <__udivmoddi4+0x2ae>
 8014f9e:	4291      	cmp	r1, r2
 8014fa0:	d92d      	bls.n	8014ffe <__udivmoddi4+0x2ae>
 8014fa2:	3d02      	subs	r5, #2
 8014fa4:	4462      	add	r2, ip
 8014fa6:	1a52      	subs	r2, r2, r1
 8014fa8:	fbb2 f1f7 	udiv	r1, r2, r7
 8014fac:	fb07 2211 	mls	r2, r7, r1, r2
 8014fb0:	b280      	uxth	r0, r0
 8014fb2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8014fb6:	fb01 f20e 	mul.w	r2, r1, lr
 8014fba:	4282      	cmp	r2, r0
 8014fbc:	d908      	bls.n	8014fd0 <__udivmoddi4+0x280>
 8014fbe:	eb1c 0000 	adds.w	r0, ip, r0
 8014fc2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8014fc6:	d216      	bcs.n	8014ff6 <__udivmoddi4+0x2a6>
 8014fc8:	4282      	cmp	r2, r0
 8014fca:	d914      	bls.n	8014ff6 <__udivmoddi4+0x2a6>
 8014fcc:	3902      	subs	r1, #2
 8014fce:	4460      	add	r0, ip
 8014fd0:	1a80      	subs	r0, r0, r2
 8014fd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8014fd6:	e73a      	b.n	8014e4e <__udivmoddi4+0xfe>
 8014fd8:	4631      	mov	r1, r6
 8014fda:	4630      	mov	r0, r6
 8014fdc:	e70b      	b.n	8014df6 <__udivmoddi4+0xa6>
 8014fde:	4671      	mov	r1, lr
 8014fe0:	e6e9      	b.n	8014db6 <__udivmoddi4+0x66>
 8014fe2:	4610      	mov	r0, r2
 8014fe4:	e6fe      	b.n	8014de4 <__udivmoddi4+0x94>
 8014fe6:	454d      	cmp	r5, r9
 8014fe8:	d2ab      	bcs.n	8014f42 <__udivmoddi4+0x1f2>
 8014fea:	ebb9 0802 	subs.w	r8, r9, r2
 8014fee:	eb63 0e0c 	sbc.w	lr, r3, ip
 8014ff2:	3801      	subs	r0, #1
 8014ff4:	e7a5      	b.n	8014f42 <__udivmoddi4+0x1f2>
 8014ff6:	4641      	mov	r1, r8
 8014ff8:	e7ea      	b.n	8014fd0 <__udivmoddi4+0x280>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	e796      	b.n	8014f2c <__udivmoddi4+0x1dc>
 8014ffe:	4645      	mov	r5, r8
 8015000:	e7d1      	b.n	8014fa6 <__udivmoddi4+0x256>
 8015002:	46d0      	mov	r8, sl
 8015004:	e77d      	b.n	8014f02 <__udivmoddi4+0x1b2>
 8015006:	4464      	add	r4, ip
 8015008:	3802      	subs	r0, #2
 801500a:	e749      	b.n	8014ea0 <__udivmoddi4+0x150>
 801500c:	3d02      	subs	r5, #2
 801500e:	4462      	add	r2, ip
 8015010:	e731      	b.n	8014e76 <__udivmoddi4+0x126>
 8015012:	4608      	mov	r0, r1
 8015014:	e70a      	b.n	8014e2c <__udivmoddi4+0xdc>
 8015016:	4631      	mov	r1, r6
 8015018:	e6ed      	b.n	8014df6 <__udivmoddi4+0xa6>
 801501a:	bf00      	nop

Disassembly of section .rodata:

0801501c <vtable for DisplayHandler-0xdc>:
 801501c:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015020:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801502c:	03020100 	movweq	r0, #8448	; 0x2100
 8015030:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8015034:	00000009 	andeq	r0, r0, r9
 8015038:	03020100 	movweq	r0, #8448	; 0x2100
 801503c:	584d4404 	stmdapl	sp, {r2, sl, lr}^
 8015040:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 8015044:	00747570 	rsbseq	r7, r4, r0, ror r5
 8015048:	20584d44 	subscs	r4, r8, r4, asr #26
 801504c:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
 8015050:	37310074 			; <UNDEFINED> instruction: 0x37310074
 8015054:	3a31353a 	bcc	8c62544 <__exidx_end+0xc4b1cc>
 8015058:	4d003331 	stcmi	3, cr3, [r0, #-196]	; 0xffffff3c
 801505c:	31207261 			; <UNDEFINED> instruction: 0x31207261
 8015060:	30322039 	eorscc	r2, r2, r9, lsr r0
 8015064:	41003232 	tstmi	r0, r2, lsr r2
 8015068:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 801506c:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 8015070:	646f4e20 	strbtvs	r4, [pc], #-3616	; 8015078 <_etext+0x5c>
 8015074:	5b1b2065 	blpl	86dd210 <__exidx_end+0x6c5e98>
 8015078:	446d3233 	strbtmi	r3, [sp], #-563	; 0xfffffdcd
 801507c:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 8015080:	63204d44 			; <UNDEFINED> instruction: 0x63204d44
 8015084:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 8015088:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 801508c:	317b2072 	cmncc	fp, r2, ror r0
 8015090:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8015094:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015098:	5b1b7d65 	blpl	86f4634 <__exidx_end+0x6dd2bc>
 801509c:	006d3733 	rsbeq	r3, sp, r3, lsr r7
 80150a0:	6f635f2e 	svcvs	0x00635f2e
 80150a4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 80150a8:	685f2e00 	ldmdavs	pc, {r9, sl, fp, sp}^	; <UNPREDICTABLE>
 80150ac:	00707474 	rsbseq	r7, r0, r4, ror r4
 80150b0:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 80150b4:	7472413d 	ldrbtvc	r4, [r2], #-317	; 0xfffffec3
 80150b8:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 80150bc:	44203420 	strtmi	r3, [r0], #-1056	; 0xfffffbe0
 80150c0:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 80150c4:	41004d44 	tstmi	r0, r4, asr #26
 80150c8:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 80150cc:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 80150d0:	00732520 	rsbseq	r2, r3, r0, lsr #10
 80150d4:	21786d64 	cmncs	r8, r4, ror #26
 80150d8:	65726200 	ldrbvs	r6, [r2, #-512]!	; 0xfffffe00
 80150dc:	00236b61 	eoreq	r6, r3, r1, ror #22
 80150e0:	2362616d 	cmncs	r2, #1073741851	; 0x4000001b
 80150e4:	66657200 	strbtvs	r7, [r5], -r0, lsl #4
 80150e8:	68736572 	ldmdavs	r3!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 80150ec:	6c730023 	ldclvs	0, cr0, [r3], #-140	; 0xffffff74
 80150f0:	2373746f 	cmncs	r3, #1862270976	; 0x6f000000
 80150f4:	00000000 	andeq	r0, r0, r0

080150f8 <vtable for DisplayHandler>:
	...
 8015100:	08007b87 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, fp, ip, sp, lr}
 8015104:	08007be1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 8015108:	08007c85 	stmdaeq	r0, {r0, r2, r7, sl, fp, ip, sp, lr}

0801510c <vtable for ArtNetReboot>:
	...
 8015114:	08007b89 	stmdaeq	r0, {r0, r3, r7, r8, r9, fp, ip, sp, lr}
 8015118:	08007bd5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, r9, fp, ip, sp, lr}
 801511c:	08007bb1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, fp, ip, sp, lr}

08015120 <vtable for DisplayUdfHandler>:
	...
 8015128:	08007b8b 	stmdaeq	r0, {r0, r1, r3, r7, r8, r9, fp, ip, sp, lr}
 801512c:	08007bed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 8015130:	08007c5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, sl, fp, ip, sp, lr}
 8015134:	08007b8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, fp, ip, sp, lr}
 8015138:	08007c49 	stmdaeq	r0, {r0, r3, r6, sl, fp, ip, sp, lr}
 801513c:	08007c35 	stmdaeq	r0, {r0, r2, r4, r5, sl, fp, ip, sp, lr}
 8015140:	08007c21 	stmdaeq	r0, {r0, r5, sl, fp, ip, sp, lr}
 8015144:	08007c0d 	stmdaeq	r0, {r0, r2, r3, sl, fp, ip, sp, lr}
 8015148:	08007bf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr}

0801514c <CSWTCH.98>:
 801514c:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8015150:	 	eorcc	r3, lr, #-2147483631	; 0x80000011

08015151 <SOFTWARE_VERSION>:
 8015151:	00322e31 	eorseq	r2, r2, r1, lsr lr
 8015155:	 	andeq	r0, r0, r0

08015158 <vtable for DmxInput>:
	...
 8015160:	080083ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, pc}
 8015164:	08008449 	stmdaeq	r0, {r0, r3, r6, sl, pc}
 8015168:	080083b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, pc}
 801516c:	080083e1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, pc}
 8015170:	08008415 	stmdaeq	r0, {r0, r2, r4, sl, pc}
 8015174:	6e552020 	cdpvs	0, 5, cr2, cr5, cr0, {1}
 8015178:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 801517c:	20736573 	rsbscs	r6, r3, r3, ror r5
 8015180:	20657261 	rsbcs	r7, r5, r1, ror #4
 8015184:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8015188:	20646570 	rsbcs	r6, r4, r0, ror r5
 801518c:	000a312b 	andeq	r3, sl, fp, lsr #2

08015190 <vtable for ArtNet4Node>:
	...
 8015198:	080084c9 	stmdaeq	r0, {r0, r3, r6, r7, sl, pc}
 801519c:	080085b7 	stmdaeq	r0, {r0, r1, r2, r4, r5, r7, r8, sl, pc}
 80151a0:	0800846d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, pc}
 80151a4:	080084e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, sl, pc}
 80151a8:	080085c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, sl, pc}
 80151ac:	080085af 	stmdaeq	r0, {r0, r1, r2, r3, r5, r7, r8, sl, pc}

080151b0 <ArtNetMsgConst::START>:
 80151b0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 80151b4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80151b8:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 80151bc:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

080151c1 <ArtNetMsgConst::PARAMS>:
 80151c1:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80151c5:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80151c9:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80151cd:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80151d1:	0074654e 	rsbseq	r6, r4, lr, asr #10

080151d5 <ArtNetMsgConst::RDM_RUN>:
 80151d5:	6e6e7552 	mcrvs	5, 3, r7, cr14, cr2, {2}
 80151d9:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80151dd:	204d4452 	subcs	r4, sp, r2, asr r4
 80151e1:	63736944 	cmnvs	r3, #68, 18	; 0x110000
 80151e5:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 80151e9:	 	subvc	r0, r1, #121	; 0x79

080151eb <ArtNetMsgConst::STARTED>:
 80151eb:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80151ef:	2074654e 	rsbscs	r6, r4, lr, asr #10
 80151f3:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 80151f7:	00646574 	rsbeq	r6, r4, r4, ror r5
 80151fb:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 80151ff:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 8015203:	73250052 			; <UNDEFINED> instruction: 0x73250052
 8015207:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801520b:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 801520f:	74680073 	strbtvc	r0, [r8], #-115	; 0xffffff8d
 8015213:	2f3a7074 	svccs	0x003a7074
 8015217:	3364672f 	cmncc	r4, #12320768	; 0xbc0000
 801521b:	6d642d32 	stclvs	13, cr2, [r4, #-200]!	; 0xffffff38
 801521f:	726f2e78 	rsbvc	r2, pc, #120, 28	; 0x780
 8015223:	6d450067 	stclvs	0, cr0, [r5, #-412]	; 0xfffffe64
 8015227:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 801522b:	 	tstmi	r0, r5, ror #8

0801522e <artnet::NODE_ID>:
 801522e:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015232:	0074654e 	rsbseq	r6, r4, lr, asr #10

08015236 <defaults::SHORT_NAME>:
 8015236:	20567641 	subscs	r7, r6, r1, asr #12
 801523a:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801523e:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8015242:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

08015247 <artnet::NODE_ID>:
 8015247:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801524b:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801524f:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8015253:	30255b20 	eorcc	r5, r5, r0, lsr #22
 8015257:	205d6434 	subscs	r6, sp, r4, lsr r4
 801525b:	41207325 			; <UNDEFINED> instruction: 0x41207325
 801525f:	 	tstmi	r0, r6, ror r6

08015262 <artnet::NODE_ID>:
 8015262:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015266:	0074654e 	rsbseq	r6, r4, lr, asr #10
 801526a:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 801526e:	72204d44 	eorvc	r4, r0, #68, 26	; 0x1100
 8015272:	6f707365 	svcvs	0x00707365
 8015276:	0a65736e 	beq	9972036 <__exidx_end+0x195acbe>
 801527a:	50544800 	subspl	r4, r4, r0, lsl #16
 801527e:	50544c00 	subspl	r4, r4, r0, lsl #24
 8015282:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 8015286:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 801528a:	43417300 	movtmi	r7, #4864	; 0x1300
 801528e:	6f4e004e 	svcvs	0x004e004e
 8015292:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
 8015296:	255b2064 	ldrbcs	r2, [fp, #-100]	; 0xffffff9c
 801529a:	000a5d75 	andeq	r5, sl, r5, ror sp
 801529e:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 80152a2:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 80152a6:	20202065 	eorcs	r2, r0, r5, rrx
 80152aa:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80152ae:	0a64252e 	beq	991e76e <__exidx_end+0x19073f6>
 80152b2:	68532000 	ldmdavs	r3, {sp}^
 80152b6:	2074726f 	rsbscs	r7, r4, pc, ror #4
 80152ba:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 80152be:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 80152c2:	20000a73 	andcs	r0, r0, r3, ror sl
 80152c6:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 80152ca:	6d616e20 	stclvs	14, cr6, [r1, #-128]!	; 0xffffff80
 80152ce:	3a202065 	bcc	881d46a <__exidx_end+0x8060f2>
 80152d2:	0a732520 	beq	9cde75a <__exidx_end+0x1cc73e2>
 80152d6:	754f2000 	strbvc	r2, [pc, #-0]	; 80152de <artnet::NODE_ID+0x7c>
 80152da:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 80152de:	2020000a 	eorcs	r0, r0, sl
 80152e2:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 80152e6:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 80152ea:	3a642520 	bcc	991e772 <__exidx_end+0x19073fa>
 80152ee:	322d255b 	eorcc	r2, sp, #381681664	; 0x16c00000
 80152f2:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 80152f6:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 80152fa:	5d64322d 	sfmpl	f3, 2, [r4, #-180]!	; 0xffffff4c
 80152fe:	7534253a 	ldrvc	r2, [r4, #-1338]!	; 0xfffffac6
 8015302:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 8015306:	7b20005d 	blvc	8815482 <__exidx_end+0x7fe10a>
 801530a:	0a7d7325 	beq	9f71fa6 <__exidx_end+0x1f5ac2e>
 801530e:	6e492000 	cdpvs	0, 4, cr2, cr9, cr0, {0}
 8015312:	0a747570 	beq	9d328da <__exidx_end+0x1d1b562>
 8015316:	50202000 	eorpl	r2, r0, r0
 801531a:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801531e:	20643225 	rsbcs	r3, r4, r5, lsr #4
 8015322:	5b3a6425 	blpl	8eae3be <__exidx_end+0xe97046>
 8015326:	64322d25 	ldrtvs	r2, [r2], #-3365	; 0xfffff2db
 801532a:	322d253a 	eorcc	r2, sp, #243269632	; 0xe800000
 801532e:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 8015332:	3a5d6432 	bcc	976e402 <__exidx_end+0x175708a>
 8015336:	20753425 	rsbscs	r3, r5, r5, lsr #8
 801533a:	25203e2d 	strcs	r3, [r0, #-3629]!	; 0xfffff1d3
 801533e:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015342:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015346:	000a6425 	andeq	r6, sl, r5, lsr #8
 801534a:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 801534e:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 8015352:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8015356:	0a64253d 	beq	991e852 <__exidx_end+0x19074da>
 801535a:	73252200 			; <UNDEFINED> instruction: 0x73252200
 801535e:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8015362:	002c2273 	eoreq	r2, ip, r3, ror r2
 8015366:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 801536a:	000a7325 	andeq	r7, sl, r5, lsr #6
 801536e:	6e636173 	mcrvs	1, 3, r6, cr3, cr3, {3}
 8015372:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 8015376:	6f007475 	svcvs	0x00007475
 801537a:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 801537e:	746c0074 	strbtvc	r0, [ip], #-116	; 0xffffff8c
 8015382:	74680070 	strbtvc	r0, [r8], #-112	; 0xffffff90
 8015386:	72610070 	rsbvc	r0, r1, #112	; 0x70
 801538a:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
 801538e:	6c754d00 	ldclvs	13, cr4, [r5], #-0
 8015392:	70206974 	eorvc	r6, r0, r4, ror r9
 8015396:	2074726f 	rsbscs	r7, r4, pc, ror #4
 801539a:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 801539e:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80153a2:	6f697461 	svcvs	0x00697461
 80153a6:	6f4e006e 	svcvs	0x004e006e
 80153aa:	44006564 	strmi	r6, [r0], #-1380	; 0xfffffa9c
 80153ae:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 80153b2:	4f204d44 	svcmi	0x00204d44
 80153b6:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 80153ba:	72410074 	subvc	r0, r1, #116	; 0x74
 80153be:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 80153c2:	00342074 	eorseq	r2, r4, r4, ror r0

080153c6 <ArtNetParamsConst::ENABLE_RDM>:
 80153c6:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80153ca:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 80153ce:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

080153d1 <ArtNetParamsConst::MAP_UNIVERSE0>:
 80153d1:	5f70616d 	svcpl	0x0070616d
 80153d5:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80153d9:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80153dd:	 	rsbsvc	r0, r0, #48	; 0x30

080153df <ArtNetParamsConst::PROTOCOL_PORT>:
 80153df:	746f7270 	strbtvc	r7, [pc], #-624	; 80153e7 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 80153e3:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801522c <ArtNetMsgConst::STARTED+0x41>
 80153e7:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80153eb:	00615f74 	rsbeq	r5, r1, r4, ror pc
 80153ef:	746f7270 	strbtvc	r7, [pc], #-624	; 80153f7 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 80153f3:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801523c <defaults::SHORT_NAME+0x6>
 80153f7:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80153fb:	00625f74 	rsbeq	r5, r2, r4, ror pc
 80153ff:	746f7270 	strbtvc	r7, [pc], #-624	; 8015407 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8015403:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801524c <artnet::NODE_ID+0x5>
 8015407:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801540b:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801540f:	746f7270 	strbtvc	r7, [pc], #-624	; 8015417 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 8015413:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801525c <artnet::NODE_ID+0x15>
 8015417:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801541b:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801541f <ArtNetParamsConst::NODE_LONG_NAME>:
 801541f:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 8015423:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 8015427:	 	strbvs	r0, [pc, #-101]!	; 80153ca <ArtNetParamsConst::ENABLE_RDM+0x4>

08015429 <ArtNetParamsConst::NODE_OEM_VALUE>:
 8015429:	5f6d656f 	svcpl	0x006d656f
 801542d:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8015431:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

08015433 <ArtNetParamsConst::NODE_SHORT_NAME>:
 8015433:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 8015437:	616e5f74 	smcvs	58868	; 0xe5f4
 801543b:	 	strvs	r6, [r0], #-1389	; 0xfffffa93

0801543e <ArtNetParamsConst::DESTINATION_IP_PORT>:
 801543e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8015442:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8015446:	5f6e6f69 	svcpl	0x006e6f69
 801544a:	705f7069 	subsvc	r7, pc, r9, rrx
 801544e:	5f74726f 	svcpl	0x0074726f
 8015452:	00000061 	andeq	r0, r0, r1, rrx
 8015456:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801545a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801545e:	5f6e6f69 	svcpl	0x006e6f69
 8015462:	705f7069 	subsvc	r7, pc, r9, rrx
 8015466:	5f74726f 	svcpl	0x0074726f
 801546a:	00000062 	andeq	r0, r0, r2, rrx
 801546e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8015472:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8015476:	5f6e6f69 	svcpl	0x006e6f69
 801547a:	705f7069 	subsvc	r7, pc, r9, rrx
 801547e:	5f74726f 	svcpl	0x0074726f
 8015482:	00000063 	andeq	r0, r0, r3, rrx
 8015486:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801548a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801548e:	5f6e6f69 	svcpl	0x006e6f69
 8015492:	705f7069 	subsvc	r7, pc, r9, rrx
 8015496:	5f74726f 	svcpl	0x0074726f
 801549a:	00000064 	andeq	r0, r0, r4, rrx

0801549e <ArtNetParamsConst::DISABLE_MERGE_TIMEOUT>:
 801549e:	61736964 	cmnvs	r3, r4, ror #18
 80154a2:	5f656c62 	svcpl	0x00656c62
 80154a6:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80154aa:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 80154ae:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8014f49 <__udivmoddi4+0x1f9>
 80154b2:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

080154b4 <ArtNetParamsConst::NODE_NETWORK_DATA_LOSS_TIMEOUT>:
 80154b4:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 80154b8:	5f6b726f 	svcpl	0x006b726f
 80154bc:	61746164 	cmnvs	r4, r4, ror #2
 80154c0:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
 80154c4:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 80154c8:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8014f63 <__udivmoddi4+0x213>
 80154cc:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

080154ce <ArtNetParamsConst::NET>:
 80154ce:	0074656e 	rsbseq	r6, r4, lr, ror #10

080154d2 <ArtNetParamsConst::SUBNET>:
 80154d2:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 80154d6:	 	andvc	r7, r0, r5, ror #8

080154d9 <ArtNetParamsConst::PROTOCOL>:
 80154d9:	746f7270 	strbtvc	r7, [pc], #-624	; 80154e1 <ArtNetParamsConst::PROTOCOL+0x8>
 80154dd:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8015328 <artnet::NODE_ID+0xc6>
	...

080154e2 <ArtNetParamsConst::FILE_NAME>:
 80154e2:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 80154e6:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 80154ea:	 			; <UNDEFINED> instruction: 0xff007478

080154ed <ArtNetConst::OEM_ID>:
 80154ed:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

080154ef <ArtNetConst::ESTA_ID>:
 80154ef:	 			; <UNDEFINED> instruction: 0x36010050

080154f1 <ArtNetConst::VERSION>:
 80154f1:	33323601 	teqcc	r2, #1048576	; 0x100000
 80154f5:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 80154f9:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 80154fd:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 8015501:	20733834 	rsbscs	r3, r3, r4, lsr r8
 8015505:	30007325 	andcc	r7, r0, r5, lsr #6
 8015509:	6f4e202e 	svcvs	0x004e202e
 801550d:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 8015511:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 8015515:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 8015519:	202c6465 	eorcs	r6, ip, r5, ror #8
 801551d:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 8015521:	6f687320 	svcvs	0x00687320
 8015525:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 8015529:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 801552d:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8015531:	000a216e 	andeq	r2, sl, lr, ror #2
 8015535:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8015539:	000a6567 	andeq	r6, sl, r7, ror #10
 801553d:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8015541:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8015545:	203a2065 	eorscs	r2, sl, r5, rrx
 8015549:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801554d:	20000a64 	andcs	r0, r0, r4, ror #20
 8015551:	20444943 	subcs	r4, r4, r3, asr #18
 8015555:	20202020 	eorcs	r2, r0, r0, lsr #32
 8015559:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801555d:	20000a73 	andcs	r0, r0, r3, ror sl
 8015561:	726f5020 	rsbvc	r5, pc, #32
 8015565:	32252074 	eorcc	r2, r5, #116	; 0x74
 8015569:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 801556d:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8015571:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 8015575:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8015579:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 801557d:	2020000a 	eorcs	r0, r0, sl
 8015581:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8015585:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8015589:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 801558d:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015591:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 8015595:	5b206433 	blpl	882e669 <__exidx_end+0x8172f1>
 8015599:	0a5d6425 	beq	976e635 <__exidx_end+0x17572bd>
 801559d:	79532000 	ldmdbvc	r3, {sp}^
 80155a1:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 80155a5:	7a696e6f 	bvc	9a70f69 <__exidx_end+0x1a59bf1>
 80155a9:	73692065 	cmnvc	r9, #101	; 0x65
 80155ad:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 80155b1:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80155b5:	 	tstmi	r0, r4, ror #20

080155b8 <E117Const::ACN_PACKET_IDENTIFIER>:
 80155b8:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 80155bc:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 80155c0:	00000037 	andeq	r0, r0, r7, lsr r0

080155c4 <E131BridgeConst::VERSION>:
 80155c4:	30251801 	eorcc	r1, r5, r1, lsl #16
 80155c8:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 80155cc:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 80155d0:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 80155d4:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 80155d8:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 80155dc:	30252d78 	eorcc	r2, r5, r8, ror sp
 80155e0:	30257832 	eorcc	r7, r5, r2, lsr r8
 80155e4:	30257832 	eorcc	r7, r5, r2, lsr r8
 80155e8:	30257832 	eorcc	r7, r5, r2, lsr r8
 80155ec:	30257832 	eorcc	r7, r5, r2, lsr r8
 80155f0:	30257832 	eorcc	r7, r5, r2, lsr r8
 80155f4:	00007832 	andeq	r7, r0, r2, lsr r8

080155f8 <UID_ALL>:
 80155f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 80155fc:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

08015600 <vtable for ArtNetRdmController>:
	...
 8015608:	0800b8c1 	stmdaeq	r0, {r0, r6, r7, fp, ip, sp, pc}
 801560c:	0800b90d 	stmdaeq	r0, {r0, r2, r3, r8, fp, ip, sp, pc}
 8015610:	0800b91f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, fp, ip, sp, pc}
 8015614:	0800b891 	stmdaeq	r0, {r0, r4, r7, fp, ip, sp, pc}
 8015618:	0800b89d 	stmdaeq	r0, {r0, r2, r3, r4, r7, fp, ip, sp, pc}
 801561c:	0800b92d 	stmdaeq	r0, {r0, r2, r3, r5, r8, fp, ip, sp, pc}

08015620 <UID_ALL>:
 8015620:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8015624:	4452ffff 	ldrbmi	pc, [r2], #-4095	; 0xfffff001	; <UNPREDICTABLE>
 8015628:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 801562c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8015630:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8015634:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8015638:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801563c:	000a6e6f 	andeq	r6, sl, pc, ror #28
 8015640:	6e614d20 	cdpvs	13, 6, cr4, cr1, cr0, {1}
 8015644:	63616675 	cmnvs	r1, #122683392	; 0x7500000
 8015648:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 801564c:	614e2072 	hvcvs	57858	; 0xe202
 8015650:	3a20656d 	bcc	882ec0c <__exidx_end+0x817894>
 8015654:	2a2e2520 	bcs	8b9eadc <__exidx_end+0xb87764>
 8015658:	20000a73 	andcs	r0, r0, r3, ror sl
 801565c:	756e614d 	strbvc	r6, [lr, #-333]!	; 0xfffffeb3
 8015660:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 8015664:	72657275 	rsbvc	r7, r5, #1342177287	; 0x50000007
 8015668:	20444920 	subcs	r4, r4, r0, lsr #18
 801566c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8015670:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8015674:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8015678:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 801567c:	61697265 	cmnvs	r9, r5, ror #4
 8015680:	754e206c 	strbvc	r2, [lr, #-108]	; 0xffffff94
 8015684:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 8015688:	20202020 	eorcs	r2, r0, r0, lsr #32
 801568c:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8015690:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8015694:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8015698:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 801569c:	0a58322e 	beq	9621f5c <__exidx_end+0x160abe4>
 80156a0:	6f522000 	svcvs	0x00522000
 80156a4:	6c20746f 	cfstrsvs	mvf7, [r0], #-444	; 0xfffffe44
 80156a8:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
 80156ac:	20202020 	eorcs	r2, r0, r0, lsr #32
 80156b0:	20202020 	eorcs	r2, r0, r0, lsr #32
 80156b4:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 80156b8:	000a732a 	andeq	r7, sl, sl, lsr #6
 80156bc:	6f725020 	svcvs	0x00725020
 80156c0:	74637564 	strbtvc	r7, [r3], #-1380	; 0xfffffa9c
 80156c4:	74614320 	strbtvc	r4, [r1], #-800	; 0xfffffce0
 80156c8:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
 80156cc:	3a202079 	bcc	881d8b8 <__exidx_end+0x806540>
 80156d0:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 80156d4:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 80156d8:	20000a58 	andcs	r0, r0, r8, asr sl
 80156dc:	646f7250 	strbtvs	r7, [pc], #-592	; 80156e4 <UID_ALL+0xc4>
 80156e0:	20746375 	rsbscs	r6, r4, r5, ror r3
 80156e4:	61746544 	cmnvs	r4, r4, asr #10
 80156e8:	20206c69 	eorcs	r6, r0, r9, ror #24
 80156ec:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80156f0:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 80156f4:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 80156f8:	 	strbmi	r0, [r7], #-10

080156fa <DEVICE_LABEL>:
 80156fa:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 80156fe:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 8015702:	44522052 	ldrbmi	r2, [r2], #-82	; 0xffffffae
 8015706:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 801570a:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
	...

0801570f <DEVICE_LABEL>:
 801570f:	61676947 	cmnvs	r7, r7, asr #18
 8015713:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
 8015717:	52206563 	eorpl	r6, r0, #415236096	; 0x18c00000
 801571b:	43204d44 			; <UNDEFINED> instruction: 0x43204d44
 801571f:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 8015723:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 8015727:	00000072 	andeq	r0, r0, r2, ror r0
	...

0801572c <UID_ALL>:
 801572c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8015730:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08015732 <RDMConst::MANUFACTURER_ID>:
 8015732:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

08015734 <RDMConst::MANUFACTURER_NAME>:
 8015734:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8015738:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 801573c:	6f2e7777 	svcvs	0x002e7777
 8015740:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 8015744:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 8015748:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 801574c:	0067726f 	rsbeq	r7, r7, pc, ror #4
 8015750:	20584d44 	subscs	r4, r8, r4, asr #26
 8015754:	646e6553 	strbtvs	r6, [lr], #-1363	; 0xfffffaad
 8015758:	4220000a 	eormi	r0, r0, #10
 801575c:	6b616572 	blvs	986ed2c <__exidx_end+0x18579b4>
 8015760:	6d697420 	cfstrdvs	mvd7, [r9, #-128]!	; 0xffffff80
 8015764:	20202065 	eorcs	r2, r0, r5, rrx
 8015768:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801576c:	4d20000a 	stcmi	0, cr0, [r0, #-40]!	; 0xffffffd8
 8015770:	74204241 	strtvc	r4, [r0], #-577	; 0xfffffdbf
 8015774:	20656d69 	rsbcs	r6, r5, r9, ror #26
 8015778:	20202020 	eorcs	r2, r0, r0, lsr #32
 801577c:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015780:	5220000a 	eorpl	r0, r0, #10
 8015784:	65726665 	ldrbvs	r6, [r2, #-1637]!	; 0xfffff99b
 8015788:	72206873 	eorvc	r6, r0, #7536640	; 0x730000
 801578c:	20657461 	rsbcs	r7, r5, r1, ror #8
 8015790:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015794:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 8015798:	73746f6c 	cmnvc	r4, #108, 30	; 0x1b0
 801579c:	20202020 	eorcs	r2, r0, r0, lsr #32
 80157a0:	20202020 	eorcs	r2, r0, r0, lsr #32
 80157a4:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 80157a8:	0000000a 	andeq	r0, r0, sl

080157ac <vtable for DmxSend>:
	...
 80157b4:	0800c151 	stmdaeq	r0, {r0, r4, r6, r8, lr, pc}
 80157b8:	0800c221 	stmdaeq	r0, {r0, r5, r9, lr, pc}
 80157bc:	0800c155 	stmdaeq	r0, {r0, r2, r4, r6, r8, lr, pc}
 80157c0:	0800c185 	stmdaeq	r0, {r0, r2, r7, r8, lr, pc}
 80157c4:	0800c1b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, lr, pc}
 80157c8:	0800c14f 	stmdaeq	r0, {r0, r1, r2, r3, r6, r8, lr, pc}
 80157cc:	0800c1c9 	stmdaeq	r0, {r0, r3, r6, r7, r8, lr, pc}
 80157d0:	08011ee1 	stmdaeq	r1, {r0, r5, r6, r7, r9, sl, fp, ip}
 80157d4:	08011ed7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, fp, ip}
 80157d8:	08011edb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, sl, fp, ip}
 80157dc:	08011ee5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9, sl, fp, ip}

080157e0 <DmxParamsConst::BREAK_TIME>:
 80157e0:	61657262 	cmnvs	r5, r2, ror #4
 80157e4:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 80157e8:	 	movwvc	r6, #1389	; 0x56d

080157eb <DmxParamsConst::SLOTS_COUNT>:
 80157eb:	746f6c73 	strbtvc	r6, [pc], #-3187	; 80157f3 <DmxParamsConst::SLOTS_COUNT+0x8>
 80157ef:	6f635f73 	svcvs	0x00635f73
 80157f3:	00746e75 	rsbseq	r6, r4, r5, ror lr

080157f7 <DmxParamsConst::REFRESH_RATE>:
 80157f7:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 80157fb:	5f687365 	svcpl	0x00687365
 80157ff:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	...

08015804 <DmxParamsConst::MAB_TIME>:
 8015804:	5f62616d 	svcpl	0x0062616d
 8015808:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	...

0801580d <DmxParamsConst::FILE_NAME>:
 801580d:	61726170 	cmnvs	r2, r0, ror r1
 8015811:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8015815:	25007478 	strcs	r7, [r0, #-1144]	; 0xfffffb88
 8015819:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801581d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015821:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 8015825:	73252c73 			; <UNDEFINED> instruction: 0x73252c73
 8015829:	2c64252c 	cfstr64cs	mvdx2, [r4], #-176	; 0xffffff50
 801582d:	000a7325 	andeq	r7, sl, r5, lsr #6
 8015831:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015835:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8015839:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 801583d:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8015841:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 8015845:	6e4f000a 	cdpvs	0, 4, cr0, cr15, cr10, {0}
 8015849:	66664f00 	strbtvs	r4, [r6], -r0, lsl #30
 801584d:	73696400 	cmnvc	r9, #0, 8
 8015851:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015855:	0a73253a 	beq	9cded45 <__exidx_end+0x1cc79cd>
 8015859:	74667400 	strbtvc	r7, [r6], #-1024	; 0xfffffc00
 801585d:	73253a70 			; <UNDEFINED> instruction: 0x73253a70
 8015861:	6576000a 	ldrbvs	r0, [r6, #-10]!
 8015865:	6f697372 	svcvs	0x00697372
 8015869:	73253a6e 			; <UNDEFINED> instruction: 0x73253a6e
 801586d:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8015871:	3a656d69 	bcc	9970e1d <__exidx_end+0x1959aa5>
 8015875:	73752520 	cmnvc	r5, #32, 10	; 0x8000000
 8015879:	5245000a 	subpl	r0, r5, #10
 801587d:	23524f52 	cmpcs	r2, #328	; 0x148
 8015881:	7465673f 	strbtvc	r6, [r5], #-1855	; 0xfffff8c1
 8015885:	6674000a 	ldrbtvs	r0, [r4], -sl
 8015889:	00237074 	eoreq	r7, r3, r4, ror r0
 801588d:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015891:	2379616c 	cmncs	r9, #108, 2
 8015895:	52524500 	subspl	r4, r2, #0, 10
 8015899:	2123524f 			; <UNDEFINED> instruction: 0x2123524f
 801589d:	5245000a 	subpl	r0, r5, #10
 80158a1:	23524f52 	cmpcs	r2, #328	; 0x148
 80158a5:	72000a3f 	andvc	r0, r0, #258048	; 0x3f000
 80158a9:	6f6f6265 	svcvs	0x006f6265
 80158ad:	00232374 	eoreq	r2, r3, r4, ror r3
 80158b1:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80158b5:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 80158b9:	2a237473 	bcs	88f2a8d <__exidx_end+0x8db715>
 80158bd:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 80158c1:	23656d69 	cmncs	r5, #6720	; 0x1a40
 80158c5:	72657600 	rsbvc	r7, r5, #0, 12
 80158c9:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 80158cd:	65670023 	strbvs	r0, [r7, #-35]!	; 0xffffffdd
 80158d1:	66002374 			; <UNDEFINED> instruction: 0x66002374
 80158d5:	6f746361 	svcvs	0x00746361
 80158d9:	23237972 			; <UNDEFINED> instruction: 0x23237972
	...

080158de <s_Node>:
 80158de:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80158e2:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 80158ee:	41730000 	cmnmi	r3, r0
 80158f2:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 80158f6:	31332e31 	teqcc	r3, r1, lsr lr
	...
 8015902:	2043534f 	subcs	r5, r3, pc, asr #6
 8015906:	76726553 			; <UNDEFINED> instruction: 0x76726553
 801590a:	00007265 	andeq	r7, r0, r5, ror #4
 801590e:	00000000 	andeq	r0, r0, r0
 8015912:	544c0000 	strbpl	r0, [ip], #-0
 8015916:	00000043 	andeq	r0, r0, r3, asr #32
	...
 8015926:	2043534f 	subcs	r5, r3, pc, asr #6
 801592a:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 801592e:	0000746e 	andeq	r7, r0, lr, ror #8
 8015932:	00000000 	andeq	r0, r0, r0
 8015936:	44520000 	ldrbmi	r0, [r2], #-0
 801593a:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 801593e:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 8015942:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8015946:	0000796c 	andeq	r7, r0, ip, ror #18
 801594a:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 801594e:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 801595a:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 801595e:	00004944 	andeq	r4, r0, r4, asr #18
	...
 801596e:	00504444 	subseq	r4, r0, r4, asr #8
	...

08015980 <s_Output>:
 8015980:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 801598c:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 8015998:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 801599c:	00726f74 	rsbseq	r6, r2, r4, ror pc
 80159a0:	00000000 	andeq	r0, r0, r0
 80159a4:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80159a8:	0000006c 	andeq	r0, r0, ip, rrx
 80159ac:	00000000 	andeq	r0, r0, r0
 80159b0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 80159b4:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 80159b8:	00000000 	andeq	r0, r0, r0
 80159bc:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 80159c8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80159cc:	00006769 	andeq	r6, r0, r9, ror #14
 80159d0:	00000000 	andeq	r0, r0, r0
 80159d4:	70657453 	rsbvc	r7, r5, r3, asr r4
 80159d8:	00726570 	rsbseq	r6, r2, r0, ror r5
 80159dc:	00000000 	andeq	r0, r0, r0
 80159e0:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 80159e4:	00007265 	andeq	r7, r0, r5, ror #4
 80159e8:	00000000 	andeq	r0, r0, r0
 80159ec:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80159f0:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80159f4:	00000000 	andeq	r0, r0, r0
 80159f8:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 80159fc:	00006c61 	andeq	r6, r0, r1, ror #24
 8015a00:	00000000 	andeq	r0, r0, r0
 8015a04:	20424752 	subcs	r4, r2, r2, asr r7
 8015a08:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 8015a0c:	0000006c 	andeq	r0, r0, ip, rrx

08015a10 <RemoteConfig::s_GET>:
 8015a10:	0800daf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, fp, ip, lr, pc}
 8015a14:	00000000 	andeq	r0, r0, r0
 8015a18:	080158a8 	stmdaeq	r1, {r3, r5, r7, fp, ip, lr}
 8015a1c:	00000008 	andeq	r0, r0, r8
 8015a20:	0800cfc1 	stmdaeq	r0, {r0, r6, r7, r8, r9, sl, fp, lr, pc}
 8015a24:	00000000 	andeq	r0, r0, r0
 8015a28:	080158b1 	stmdaeq	r1, {r0, r4, r5, r7, fp, ip, lr}
 8015a2c:	00000005 	andeq	r0, r0, r5
 8015a30:	0800cfc1 	stmdaeq	r0, {r0, r6, r7, r8, r9, sl, fp, lr, pc}
 8015a34:	00000000 	andeq	r0, r0, r0
 8015a38:	080158b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, fp, ip, lr}
 8015a3c:	00000006 	andeq	r0, r0, r6
 8015a40:	0800d1b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, ip, lr, pc}
 8015a44:	00000000 	andeq	r0, r0, r0
 8015a48:	080158be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, fp, ip, lr}
 8015a4c:	00000007 	andeq	r0, r0, r7
 8015a50:	0800d171 	stmdaeq	r0, {r0, r4, r5, r6, r8, ip, lr, pc}
 8015a54:	00000000 	andeq	r0, r0, r0
 8015a58:	080158c6 	stmdaeq	r1, {r1, r2, r6, r7, fp, ip, lr}
 8015a5c:	00000008 	andeq	r0, r0, r8
 8015a60:	0800d099 	stmdaeq	r0, {r0, r3, r4, r7, ip, lr, pc}
 8015a64:	00000000 	andeq	r0, r0, r0
 8015a68:	0801588d 	stmdaeq	r1, {r0, r2, r3, r7, fp, ip, lr}
 8015a6c:	00000008 	andeq	r0, r0, r8
 8015a70:	0800d439 	stmdaeq	r0, {r0, r3, r4, r5, sl, ip, lr, pc}
 8015a74:	00000000 	andeq	r0, r0, r0
 8015a78:	080158cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, fp, ip, lr}
 8015a7c:	00010004 	andeq	r0, r1, r4
 8015a80:	0800d119 	stmdaeq	r0, {r0, r3, r4, r8, ip, lr, pc}
 8015a84:	00000000 	andeq	r0, r0, r0
 8015a88:	08015887 	stmdaeq	r1, {r0, r1, r2, r7, fp, ip, lr}
 8015a8c:	00000005 	andeq	r0, r0, r5
 8015a90:	0800d7d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r8, r9, sl, ip, lr, pc}
 8015a94:	00000000 	andeq	r0, r0, r0
 8015a98:	080158d4 	stmdaeq	r1, {r2, r4, r6, r7, fp, ip, lr}
 8015a9c:	00000009 	andeq	r0, r0, r9

08015aa0 <RemoteConfig::s_SET>:
 8015aa0:	0800d0f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, ip, lr, pc}
 8015aa4:	00000000 	andeq	r0, r0, r0
 8015aa8:	08015887 	stmdaeq	r1, {r0, r1, r2, r7, fp, ip, lr}
 8015aac:	00010005 	andeq	r0, r1, r5
 8015ab0:	0800d209 	stmdaeq	r0, {r0, r3, r9, ip, lr, pc}
 8015ab4:	00000000 	andeq	r0, r0, r0
 8015ab8:	0801588d 	stmdaeq	r1, {r0, r2, r3, r7, fp, ip, lr}
 8015abc:	00010008 	andeq	r0, r1, r8
 8015ac0:	6f626552 	svcvs	0x00626552
 8015ac4:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 8015ac8:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 8015acc:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 8015ad0:	6f6f6265 	svcvs	0x006f6265
 8015ad4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8015ad8:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 8015adc:	6f637200 	svcvs	0x00637200
 8015ae0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8015ae4:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015ae8:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 8015aec:	6b726f77 	blvs	9cb18d0 <__exidx_end+0x1c9a558>
 8015af0:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015af4:	73696400 	cmnvc	r9, #0, 8
 8015af8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015afc:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015b00:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 8015b04:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8015b08:	00747874 	rsbseq	r7, r4, r4, ror r8
 8015b0c:	61726170 	cmnvs	r2, r0, ror r1
 8015b10:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8015b14:	00007478 	andeq	r7, r0, r8, ror r4

08015b18 <RemoteConfig::s_TXT>:
 8015b18:	0800d441 	stmdaeq	r0, {r0, r6, sl, ip, lr, pc}
 8015b1c:	00000000 	andeq	r0, r0, r0
 8015b20:	0800d6fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, sl, ip, lr, pc}
 8015b24:	00000000 	andeq	r0, r0, r0
 8015b28:	08015add 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, fp, ip, lr}
 8015b2c:	0000000b 	andeq	r0, r0, fp
 8015b30:	0000000c 	andeq	r0, r0, ip
 8015b34:	0800d46d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, ip, lr, pc}
 8015b38:	00000000 	andeq	r0, r0, r0
 8015b3c:	0800d731 	stmdaeq	r0, {r0, r4, r5, r8, r9, sl, ip, lr, pc}
 8015b40:	00000000 	andeq	r0, r0, r0
 8015b44:	08015ae9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, fp, ip, lr}
 8015b48:	0000000b 	andeq	r0, r0, fp
 8015b4c:	00000000 	andeq	r0, r0, r0
 8015b50:	0800d4f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, sl, ip, lr, pc}
 8015b54:	00000000 	andeq	r0, r0, r0
 8015b58:	0800d7ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, sl, ip, lr, pc}
 8015b5c:	00000000 	andeq	r0, r0, r0
 8015b60:	08015af5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, fp, ip, lr}
 8015b64:	0000000b 	andeq	r0, r0, fp
 8015b68:	0000000f 	andeq	r0, r0, pc
 8015b6c:	0800d499 	stmdaeq	r0, {r0, r3, r4, r7, sl, ip, lr, pc}
 8015b70:	00000000 	andeq	r0, r0, r0
 8015b74:	0800d759 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, ip, lr, pc}
 8015b78:	00000000 	andeq	r0, r0, r0
 8015b7c:	08015b01 	stmdaeq	r1, {r0, r8, r9, fp, ip, lr}
 8015b80:	0000000a 	andeq	r0, r0, sl
 8015b84:	00000001 	andeq	r0, r0, r1
 8015b88:	0800d4c5 	stmdaeq	r0, {r0, r2, r6, r7, sl, ip, lr, pc}
 8015b8c:	00000000 	andeq	r0, r0, r0
 8015b90:	0800d785 	stmdaeq	r0, {r0, r2, r7, r8, r9, sl, ip, lr, pc}
 8015b94:	00000000 	andeq	r0, r0, r0
 8015b98:	08015b0c 	stmdaeq	r1, {r2, r3, r8, r9, fp, ip, lr}
 8015b9c:	0000000a 	andeq	r0, r0, sl
 8015ba0:	00000002 	andeq	r0, r0, r2
 8015ba4:	00544547 	subseq	r4, r4, r7, asr #10
 8015ba8:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 8015bac:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 8015bb0:	0a200050 	beq	8815cf8 <__exidx_end+0x7fe980>
 8015bb4:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 8015bb8:	43003a00 	movwmi	r3, #2560	; 0xa00
 8015bbc:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8015bc0:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 8015bc4:	00657079 	rsbeq	r7, r5, r9, ror r0
 8015bc8:	61003b20 	tstvs	r0, r0, lsr #22
 8015bcc:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 8015bd0:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 8015bd4:	6a2f6e6f 	bvs	8bf1598 <__exidx_end+0xbda220>
 8015bd8:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 8015bdc:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8015be0:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8015be4:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8015be8:	2f006874 	svccs	0x00006874
 8015bec:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015bf0:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8015bf4:	2f006c6d 	svccs	0x00006c6d
 8015bf8:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8015bfc:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8015c00:	2f007373 	svccs	0x00007373
 8015c04:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015c08:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 8015c0c:	736a2f00 	cmnvc	sl, #0, 30
 8015c10:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8015c14:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8015c18:	72657600 	rsbvc	r7, r5, #0, 12
 8015c1c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8015c20:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8015c24:	00656d69 	rsbeq	r6, r5, r9, ror #26
 8015c28:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015c2c:	0079616c 	rsbseq	r6, r9, ip, ror #2
 8015c30:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015c34:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8015c38:	6a2f0079 	bvs	8bd5e24 <__exidx_end+0xbbeaac>
 8015c3c:	2f6e6f73 	svccs	0x006e6f73
 8015c40:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8015c44:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 8015c48:	6f6f6265 	svcvs	0x006f6265
 8015c4c:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 8015c50:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 8015c54:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 8015c58:	434f4421 	movtmi	r4, #62497	; 0xf421
 8015c5c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8015c60:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8015c64:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8015c68:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015c6c:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8015c70:	3e646165 	powccsz	f6, f4, f5
 8015c74:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015c78:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 8015c7c:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 8015c80:	742f3c74 	strtvc	r3, [pc], #-3188	; 8015c88 <RemoteConfig::s_TXT+0x170>
 8015c84:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8015c88:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015c8c:	3e646165 	powccsz	f6, f4, f5
 8015c90:	6f623c0a 	svcvs	0x00623c0a
 8015c94:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 8015c98:	4f3e3168 	svcmi	0x003e3168
 8015c9c:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015ca0:	2f3c3e31 	svccs	0x003c3e31
 8015ca4:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8015ca8:	2f3c0a3e 	svccs	0x003c0a3e
 8015cac:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015cb0:	42000a3e 	andmi	r0, r0, #253952	; 0x3e000
 8015cb4:	52206461 	eorpl	r6, r0, #1627389952	; 0x61000000
 8015cb8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 8015cbc:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
 8015cc0:	4620746f 	strtmi	r7, [r0], -pc, ror #8
 8015cc4:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8015cc8:	71655200 	cmnvc	r5, r0, lsl #4
 8015ccc:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 8015cd0:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 8015cd4:	20797469 	rsbscs	r7, r9, r9, ror #8
 8015cd8:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 8015cdc:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 8015ce0:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
 8015ce4:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 8015ce8:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 8015cec:	6f542049 	svcvs	0x00542049
 8015cf0:	6f4c206f 	svcvs	0x004c206f
 8015cf4:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 8015cf8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8015cfc:	206c616e 	rsbcs	r6, ip, lr, ror #2
 8015d00:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8015d04:	45207265 	strmi	r7, [r0, #-613]!	; 0xfffffd9b
 8015d08:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8015d0c:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 8015d10:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8015d14:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8015d18:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 8015d1c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8015d20:	00646574 	rsbeq	r6, r4, r4, ror r5
 8015d24:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8015d28:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8015d2c:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8015d30:	70707553 	rsbsvc	r7, r0, r3, asr r5
 8015d34:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 8015d38:	6e550064 	cdpvs	0, 5, cr0, cr5, cr4, {3}
 8015d3c:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 8015d40:	7245206e 	subvc	r2, r5, #110	; 0x6e
 8015d44:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8015d48:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 8015d4c:	434f4421 	movtmi	r4, #62497	; 0xf421
 8015d50:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8015d54:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8015d58:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8015d5c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015d60:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8015d64:	3e646165 	powccsz	f6, f4, f5
 8015d68:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015d6c:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 8015d70:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8015d74:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8015d78:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 8015d7c:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8015d80:	0a3e6461 	beq	8faef0c <__exidx_end+0xf97b94>
 8015d84:	646f623c 	strbtvs	r6, [pc], #-572	; 8015d8c <RemoteConfig::s_TXT+0x274>
 8015d88:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8015d8c:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 8015d90:	31682f3c 	cmncc	r8, ip, lsr pc
 8015d94:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 8015d98:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8015d9c:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015da0:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8015da4:	5448000a 	strbpl	r0, [r8], #-10
 8015da8:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 8015dac:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 8015db0:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8015db4:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 8015db8:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 8015dbc:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8015dc0:	6f430a0d 	svcvs	0x00430a0d
 8015dc4:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8015dc8:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 8015dcc:	203a6570 	eorscs	r6, sl, r0, ror r5
 8015dd0:	0a0d7325 	beq	8372a6c <__exidx_end+0x35b6f4>
 8015dd4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8015dd8:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8015ddc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8015de0:	203a6874 	eorscs	r6, sl, r4, ror r8
 8015de4:	0a0d7525 	beq	8373280 <__exidx_end+0x35bf08>
 8015de8:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 8015dec:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8015df0:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8015df4:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 8015df8:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 8015dfc:	 	ldrbvs	r0, [r4, #-10]!

08015dfe <contentType>:
 8015dfe:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8015e02:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8015e06:	0000006c 	andeq	r0, r0, ip, rrx
	...
 8015e1e:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8015e22:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 8015e3e:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8015e42:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8015e46:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8015e4a:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 8015e5e:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 8015e62:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 8015e66:	2f6e6f69 	svccs	0x006e6f69
 8015e6a:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

08015e7e <RemoteConfigConst::PARAMS_DISABLE>:
 8015e7e:	61736964 	cmnvs	r3, r4, ror #18
 8015e82:	00656c62 	rsbeq	r6, r5, r2, ror #24

08015e86 <RemoteConfigConst::PARAMS_FILE_NAME>:
 8015e86:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8015e8a:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8015e8e:	00747874 	rsbseq	r7, r4, r4, ror r8

08015e92 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 8015e92:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015e96:	5f79616c 	svcpl	0x0079616c
 8015e9a:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08015e9f <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 8015e9f:	61736964 	cmnvs	r3, r4, ror #18
 8015ea3:	5f656c62 	svcpl	0x00656c62
 8015ea7:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 8015eab:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08015ead <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 8015ead:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8015eb1:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8015eb5:	6f6f6265 	svcvs	0x006f6265
 8015eb9:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

08015ebb <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 8015ebb:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8015ebf:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 801595b <s_Node+0x7d>
 8015ec3:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8015ec7:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08015ec9 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8015ec9:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8015ecd:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8015ed1:	6f746361 	svcvs	0x00746361
 8015ed5:	7b007972 	blvc	80344a5 <__exidx_end+0x1d12d>
 8015ed9:	73696c22 	cmnvc	r9, #8704	; 0x2200
 8015edd:	7b3a2274 	blvc	8e9e8b5 <__exidx_end+0xe8753d>
 8015ee1:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8015ee5:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8015ee9:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015eed:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015ef1:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8015ef5:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8015ef9:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8015efd:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8015f01:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8015f05:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8015f09:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8015f0d:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8015f11:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8015f15:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015f19:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8015f1d:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8015f21:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8015f25:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8015f29:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8015f2d:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8015f31:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8015f35:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8015f39:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015f3d:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8015f41:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8015f45:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8015f49:	616f6222 	cmnvs	pc, r2, lsr #4
 8015f4d:	3a226472 	bcc	88af11d <__exidx_end+0x897da5>
 8015f51:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8015f55:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8015f59:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 8015f5d:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 8015f61:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 8015f65:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8015f69:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8015f6d:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 8015f71:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 8015f75:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 8015f79:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8015f7d:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 8015f81:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8015f85:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 8015f89:	7b000a7d 	blvc	8018985 <__exidx_end+0x160d>
 8015f8d:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 8015f91:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015f95:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 8015f99:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8015f9d:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8015fa1:	7b3a2273 	blvc	8e9e975 <__exidx_end+0xe875fd>
 8015fa5:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 8015fa9:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8015fad:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8015fb1:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 8015fb5:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8015fb9:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8015fbd:	61726170 	cmnvs	r2, r0, ror r1
 8015fc1:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8015fc5:	3a227478 	bcc	88b31ad <__exidx_end+0x89be35>
 8015fc9:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 8015fcd:	61725420 	cmnvs	r2, r0, lsr #8
 8015fd1:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 8015fd5:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8015fd9:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015fdd:	2e79616c 	rpwcsez	f6, f1, #4.0
 8015fe1:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8015fe5:	6944223a 	stmdbvs	r4, {r1, r3, r4, r5, r9, sp}^
 8015fe9:	616c7073 	smcvs	50947	; 0xc703
 8015fed:	44552079 	ldrbmi	r2, [r5], #-121	; 0xffffff87
 8015ff1:	222c2246 	eorcs	r2, ip, #1610612740	; 0x60000004
 8015ff5:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8015ff9:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8015ffd:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016001:	654e223a 	strbvs	r2, [lr, #-570]	; 0xfffffdc6
 8016005:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8016009:	222c226b 	eorcs	r2, ip, #-1342177274	; 0xb0000006
 801600d:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8016011:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8016015:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016019:	6552223a 	ldrbvs	r2, [r2, #-570]	; 0xfffffdc6
 801601d:	65746f6d 	ldrbvs	r6, [r4, #-3949]!	; 0xfffff093
 8016021:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8016025:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8016029:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801602d:	7d226e6f 	stcvc	14, cr6, [r2, #-444]!	; 0xfffffe44
 8016031:	7273007d 	rsbsvc	r0, r3, #125	; 0x7d
 8016035:	74682f63 	strbtvc	r2, [r8], #-3939	; 0xfffff09d
 8016039:	2f647074 	svccs	0x00647074
 801603d:	5f746567 	svcpl	0x00746567
 8016041:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8016045:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 8016049:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
 801604d:	7070632e 	rsbsvc	r6, r0, lr, lsr #6
 8016051:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 8016055:	6c69665f 	stclvs	6, cr6, [r9], #-380	; 0xfffffe84
 8016059:	6f635f65 	svcvs	0x00635f65
 801605d:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8016061:	73250074 			; <UNDEFINED> instruction: 0x73250074
 8016065:	25202928 	strcs	r2, [r0, #-2344]!	; 0xfffff6d8
 8016069:	6c202c73 	stcvs	12, cr2, [r0], #-460	; 0xfffffe34
 801606d:	20656e69 	rsbcs	r6, r5, r9, ror #28
 8016071:	203a6925 	eorscs	r6, sl, r5, lsr #18
 8016075:	2d207325 	stccs	3, cr7, [r0, #-148]!	; 0xffffff6c
 8016079:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 801607d:	2d3c000a 	ldccs	0, cr0, [ip, #-40]!	; 0xffffffd8
 8016081:	7325202d 			; <UNDEFINED> instruction: 0x7325202d
 8016085:	3a73253a 	bcc	9cdf575 <__exidx_end+0x1cc81fd>
 8016089:	000a6425 	andeq	r6, sl, r5, lsr #8

0801608d <index_html>:
 801608d:	4f44213c 	svcmi	0x0044213c
 8016091:	50595443 	subspl	r5, r9, r3, asr #8
 8016095:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 8016099:	0a3e6c6d 	beq	8fb1255 <__exidx_end+0xf99edd>
 801609d:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 80160a1:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 80160a5:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 80160a9:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 80160ad:	6b6e696c 	blvs	9bb0665 <__exidx_end+0x1b992ed>
 80160b1:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 80160b5:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 80160b9:	73656c79 	cmnvc	r5, #30976	; 0x7900
 80160bd:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 80160c1:	72682022 	rsbvc	r2, r8, #34	; 0x22
 80160c5:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 80160c9:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 80160cd:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 80160d1:	20227373 	eorcs	r7, r2, r3, ror r3
 80160d5:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 80160d9:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 80160dd:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 80160e1:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 80160e5:	0a3e656c 	beq	8faf69d <__exidx_end+0xf98325>
 80160e9:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 80160ed:	0a3e6461 	beq	8faf279 <__exidx_end+0xf97f01>
 80160f1:	646f623c 	strbtvs	r6, [pc], #-572	; 80160f9 <index_html+0x6c>
 80160f5:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 80160f9:	6165683c 	cmnvs	r5, ip, lsr r8
 80160fd:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8016101:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8016105:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8016109:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 801610d:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8016111:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8016115:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8016119:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 801611d:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8016121:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8016125:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8016129:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 801612d:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8016131:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8016135:	6f746365 	svcvs	0x00746365
 8016139:	20227972 	eorcs	r7, r2, r2, ror r9
 801613d:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8016141:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 8016145:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8016149:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801614d:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8016151:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 8016155:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8016159:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 801615d:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 8016161:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 8016165:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 8016169:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 801616d:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016171:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8016175:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 8016179:	20227478 	eorcs	r7, r2, r8, ror r4
 801617d:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8016181:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 8016185:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 8016189:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 801618d:	0a3e656c 	beq	8faf745 <__exidx_end+0xf983cd>
 8016191:	6f663c09 	svcvs	0x00663c09
 8016195:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 8016199:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 801619d:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 80161a1:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 80161a5:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80161a9:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 80161ad:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 80161b1:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 80161b5:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 80161b9:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 80161bd:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 80161c1:	20747069 	rsbscs	r7, r4, r9, rrx
 80161c5:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 80161c9:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 80161cd:	6a2e7865 	bvs	8bb4369 <__exidx_end+0xb9cff1>
 80161d1:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 80161d5:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 80161d9:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 80161dd:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 80161e1:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 80161e5:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80161e9:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 80161ed:	 	svcvs	0x0062000a

080161ef <styles_css>:
 80161ef:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80161f3:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80161f7:	63616220 	cmnvs	r1, #32, 4
 80161fb:	6f72676b 	svcvs	0x0072676b
 80161ff:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 8016203:	6f6c6f63 	svcvs	0x006c6f63
 8016207:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 801620b:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 801620f:	30322c30 	eorscc	r2, r2, r0, lsr ip
 8016213:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8016217:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801621b:	6f6c6f63 	svcvs	0x006c6f63
 801621f:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8016223:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8016227:	202c3535 	eorcs	r3, ip, r5, lsr r5
 801622b:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 801622f:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 8016233:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8016237:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 801623b:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801623f:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016243:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016247:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 801624b:	0a3b7865 	beq	8ef43e7 <__exidx_end+0xedd06f>
 801624f:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 8016253:	0a7b2069 	beq	9ede3ff <__exidx_end+0x1ec7087>
 8016257:	696c2020 	stmdbvs	ip!, {r5, sp}^
 801625b:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 801625f:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 8016263:	6f6e203a 	svcvs	0x006e203a
 8016267:	0a3b656e 	beq	8eef827 <__exidx_end+0xed84af>
 801626b:	616d2020 	cmnvs	sp, r0, lsr #32
 801626f:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 8016273:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 8016277:	70352078 	eorsvc	r2, r5, r8, ror r0
 801627b:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 801627f:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 8016283:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8016287:	200a7b20 	andcs	r7, sl, r0, lsr #22
 801628b:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 801628f:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016293:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8016297:	0a3b7865 	beq	8ef4433 <__exidx_end+0xedd0bb>
 801629b:	6f622020 	svcvs	0x00622020
 801629f:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 80162a3:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 80162a7:	3a737569 	bcc	9cf3853 <__exidx_end+0x1cdc4db>
 80162ab:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 80162af:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80162b3:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80162b7:	203a7265 	eorscs	r7, sl, r5, ror #4
 80162bb:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80162bf:	72672064 	rsbvc	r2, r7, #100	; 0x64
 80162c3:	31207965 			; <UNDEFINED> instruction: 0x31207965
 80162c7:	0a3b7870 	beq	8ef448f <__exidx_end+0xedd117>
 80162cb:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 80162cf:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 80162d3:	0a7b2072 	beq	9ede4a3 <__exidx_end+0x1ec712b>
 80162d7:	69642020 	stmdbvs	r4!, {r5, sp}^
 80162db:	616c7073 	smcvs	50947	; 0xc703
 80162df:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 80162e3:	3b78656c 	blcc	9e2f89b <__exidx_end+0x1e18523>
 80162e7:	6a20200a 	bvs	881e317 <__exidx_end+0x806f9f>
 80162eb:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 80162ef:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 80162f3:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 80162f7:	203a746e 	eorscs	r7, sl, lr, ror #8
 80162fb:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 80162ff:	0a3b7265 	beq	8ef2c9b <__exidx_end+0xedb923>
 8016303:	6f622020 	svcvs	0x00622020
 8016307:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 801630b:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801630f:	3a737569 	bcc	9cf38bb <__exidx_end+0x1cdc543>
 8016313:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8016317:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801631b:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801631f:	203a7265 	eorscs	r7, sl, r5, ror #4
 8016323:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016327:	72672064 	rsbvc	r2, r7, #100	; 0x64
 801632b:	31207965 			; <UNDEFINED> instruction: 0x31207965
 801632f:	0a3b7870 	beq	8ef44f7 <__exidx_end+0xedd17f>
 8016333:	00000a7d 	andeq	r0, r0, sp, ror sl
	...

08016338 <HttpContent>:
 8016338:	08015bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
 801633c:	080161ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, sp, lr}
 8016340:	08015c04 	stmdaeq	r1, {r2, sl, fp, ip, lr}
 8016344:	08016350 	stmdaeq	r1, {r4, r6, r8, r9, sp, lr}
 8016348:	08015bec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
 801634c:	0801608d 	stmdaeq	r1, {r0, r2, r3, r7, sp, lr}

08016350 <index_js>:
 8016350:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8016354:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8016358:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801635c:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8016360:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016364:	6a284e4f 	bvs	8a29ca8 <__exidx_end+0xa12930>
 8016368:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801636c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8016370:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8016374:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 8016378:	6a2f273d 	bvs	8be0074 <__exidx_end+0xbc8cfc>
 801637c:	2f6e6f73 	svccs	0x006e6f73
 8016380:	202b2027 	eorcs	r2, fp, r7, lsr #32
 8016384:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8016388:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801638c:	20797274 	rsbscs	r7, r9, r4, ror r2
 8016390:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8016394:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 8016398:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 801639c:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 80163a0:	20746961 	rsbscs	r6, r4, r1, ror #18
 80163a4:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 80163a8:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 80163ac:	0a3b296c 	beq	8ee0964 <__exidx_end+0xec95ec>
 80163b0:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 80163b4:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 80163b8:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 80163bc:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 80163c0:	73657220 	cmnvc	r5, #32, 4
 80163c4:	6f736a2e 	svcvs	0x00736a2e
 80163c8:	3b29286e 	blcc	8a60588 <__exidx_end+0xa49210>
 80163cc:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 80163d0:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 80163d4:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 80163d8:	6f727265 	svcvs	0x00727265
 80163dc:	7b202972 	blvc	88209ac <__exidx_end+0x809634>
 80163e0:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80163e4:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 80163e8:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 80163ec:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 80163f0:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 80163f4:	3b29726f 	blcc	8a72db8 <__exidx_end+0xa5ba40>
 80163f8:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 80163fc:	0a0a7d0a 	beq	82b582c <__exidx_end+0x29e4b4>
 8016400:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8016404:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8016408:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801640c:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 8016410:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8016414:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8016418:	20292874 	eorcs	r2, r9, r4, ror r8
 801641c:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8016420:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8016424:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016428:	6177613d 	cmnvs	r7, sp, lsr r1
 801642c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8016430:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016434:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016438:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801643c:	0a3b2927 	beq	8ee08e0 <__exidx_end+0xec9568>
 8016440:	6f640909 	svcvs	0x00640909
 8016444:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8016448:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 801644c:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8016450:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8016454:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8016458:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 801645c:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 8016460:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8016464:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8016468:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 801646c:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 8016470:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8016474:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 8016478:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 801647c:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 8016480:	2b656d61 	blcs	9971a0c <__exidx_end+0x195a694>
 8016484:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8016404 <index_js+0xb4>
 8016488:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801648c:	2b223e69 	blcs	88a5e38 <__exidx_end+0x88eac0>
 8016490:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016494:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8016498:	6f6e2e74 	svcvs	0x006e2e74
 801649c:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 80164a0:	2b657079 	blcs	997268c <__exidx_end+0x195b314>
 80164a4:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8016424 <index_js+0xd4>
 80164a8:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80164ac:	2b223e69 	blcs	88a5e58 <__exidx_end+0x88eae0>
 80164b0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80164b4:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 80164b8:	6f6e2e74 	svcvs	0x006e2e74
 80164bc:	702e6564 	eorvc	r6, lr, r4, ror #10
 80164c0:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 80164c4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 80164c8:	2f3c222b 	svccs	0x003c222b
 80164cc:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 80164d0:	0a7d0a3b 	beq	9f58dc4 <__exidx_end+0x1f41a4c>
 80164d4:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 80164d8:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 80164dc:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 80164e0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 80164e4:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 80164e8:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80164ec:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 80164f0:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 80164f4:	0a7b2029 	beq	9ede5a0 <__exidx_end+0x1ec7228>
 80164f8:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 80164fc:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 8016500:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8016504:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016508:	6177613d 	cmnvs	r7, sp, lsr r1
 801650c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8016510:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016514:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016518:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801651c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8016520:	3b292779 	blcc	8a6030c <__exidx_end+0xa48f94>
 8016524:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8016528:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801652c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016530:	0a22223d 	beq	889ee2c <__exidx_end+0x887ab4>
 8016534:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8016538:	66207465 	strtvs	r7, [r0], -r5, ror #8
 801653c:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 8016540:	73656d61 	cmnvc	r5, #6208	; 0x1840
 8016544:	6a624f3d 	bvs	98aa240 <__exidx_end+0x1892ec8>
 8016548:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 801654c:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 8016550:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 8016554:	6f746365 	svcvs	0x00746365
 8016558:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 801655c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8016560:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 8016564:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8016568:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 801656c:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 8016570:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 8016574:	6145726f 	cmpvs	r5, pc, ror #4
 8016578:	66286863 	strtvs	r6, [r8], -r3, ror #16
 801657c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8016580:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016584:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 8016588:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801658c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8016590:	20726176 	rsbscs	r6, r2, r6, ror r1
 8016594:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8016598:	203d2065 	eorscs	r2, sp, r5, rrx
 801659c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80165a0:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 80165a4:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 80165a8:	73656c69 	cmnvc	r5, #26880	; 0x6900
 80165ac:	6b5b5d22 	blvs	96eda3c <__exidx_end+0x16d66c4>
 80165b0:	3b5d7965 	blcc	9774b4c <__exidx_end+0x175d7d4>
 80165b4:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80165b8:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 80165bc:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 80165c0:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 80165c4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80165c8:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 80165cc:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 80165d0:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 80165d4:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 80165d8:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80165dc:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80165e0:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 80165e4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80165e8:	0a3b223e 	beq	8edeee8 <__exidx_end+0xec7b70>
 80165ec:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 80165f0:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80165f4:	6f640909 	svcvs	0x00640909
 80165f8:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 80165fc:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8016600:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8016604:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8016608:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801660c:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8016610:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8016614:	6f746365 	svcvs	0x00746365
 8016618:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 801661c:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 8016620:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 8016624:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8016628:	3b6c6d74 	blcc	9b31c00 <__exidx_end+0x1b1a888>
 801662c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8016630:	5f746567 	svcpl	0x00746567
 8016634:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8016638:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801663c:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016640:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 8016644:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8016648:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 801664c:	20636e79 	rsbcs	r6, r3, r9, ror lr
 8016650:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8016654:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8016658:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 801665c:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 8016660:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016664:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 8016668:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801666c:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8016670:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 8016674:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8016678:	6177613d 	cmnvs	r7, sp, lsr r1
 801667c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8016680:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016684:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016688:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801668c:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 8016690:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8016694:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 8016698:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801669c:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 80166a0:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 80166a4:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 80166a8:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 80166ac:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 80166b0:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 80166b4:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 80166b8:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 80166bc:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 80166c0:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 80166c4:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 80166c8:	2b22563e 	blcs	88abfc8 <__exidx_end+0x894c50>
 80166cc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80166d0:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 80166d4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80166d8:	2b6e6f69 	blcs	9bb2484 <__exidx_end+0x1b9b10c>
 80166dc:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801665c <index_js+0x30c>
 80166e0:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80166e4:	2b223e69 	blcs	88a6090 <__exidx_end+0x88ed18>
 80166e8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80166ec:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 80166f0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 80166f4:	61642e64 	cmnvs	r4, r4, ror #28
 80166f8:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 80166fc:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8016700:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 8016704:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 8016708:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801670c:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 8016710:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 8016714:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8016718:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 801671c:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 8016720:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 8016724:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8016728:	6f697372 	svcvs	0x00697372
 801672c:	6f622e6e 	svcvs	0x00622e6e
 8016730:	2b647261 	blcs	99330bc <__exidx_end+0x191bd44>
 8016734:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80166b4 <index_js+0x364>
 8016738:	3b223e69 	blcc	88a60e4 <__exidx_end+0x88ed6c>
 801673c:	0a0a7d0a 	beq	82b5b6c <__exidx_end+0x29e7f4>
 8016740:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8016744:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8016748:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801674c:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8016750:	745f7465 	ldrbvc	r7, [pc], #-1125	; 8016758 <index_js+0x408>
 8016754:	73287478 			; <UNDEFINED> instruction: 0x73287478
 8016758:	20296c65 	eorcs	r6, r9, r5, ror #24
 801675c:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 8016760:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 8016764:	613d7478 	teqvs	sp, r8, ror r4
 8016768:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 801676c:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 8016770:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 8016774:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 8016778:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801677c:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8016780:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016784:	3b22223d 	blcc	889f080 <__exidx_end+0x887d08>
 8016788:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 801678c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 8016790:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 8016794:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 8016798:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801679c:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 80167a0:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 80167a4:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 80167a8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 80167ac:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80167b0:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 80167b4:	0a7b2029 	beq	9ede860 <__exidx_end+0x1ec74e8>
 80167b8:	61760909 	cmnvs	r6, r9, lsl #18
 80167bc:	61762072 	cmnvs	r6, r2, ror r0
 80167c0:	2065756c 	rsbcs	r7, r5, ip, ror #10
 80167c4:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 80167c8:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 80167cc:	6b5b5d6c 	blvs	96edd84 <__exidx_end+0x16d6a0c>
 80167d0:	3b5d7965 	blcc	9774d6c <__exidx_end+0x175d9f4>
 80167d4:	2009090a 	andcs	r0, r9, sl, lsl #18
 80167d8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80167dc:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 80167e0:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 80167e4:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80167e8:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 80167ec:	2f3c222b 	svccs	0x003c222b
 80167f0:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 80167f4:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80167f8:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80167fc:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 8016800:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 8016804:	742f3c3e 	strtvc	r3, [pc], #-3134	; 801680c <index_js+0x4bc>
 8016808:	3b223e72 	blcc	88a61d8 <__exidx_end+0x88ee60>
 801680c:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 8016810:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 8016814:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8016818:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801681c:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 8016820:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 8016824:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8016828:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 801682c:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 8016830:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8016834:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8016838:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 801683c:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 8016840:	0a3b6c6d 	beq	8ef19fc <__exidx_end+0xeda684>
 8016844:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8016848:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 801684c:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8016850:	3b292874 	blcc	8a60a28 <__exidx_end+0xa496b0>
 8016854:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8016858:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 801685c:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8016860:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016864:	0a3b2928 	beq	8ee0d0c <__exidx_end+0xec9994>
 8016868:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 801686c:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 8016870:	6f697372 	svcvs	0x00697372
 8016874:	3b29286e 	blcc	8a60a34 <__exidx_end+0xa496bc>
 8016878:	0000000a 	andeq	r0, r0, sl

0801687c <s_aStorSize>:
 801687c:	00000060 	andeq	r0, r0, r0, rrx
 8016880:	00000090 	muleq	r0, r0, r0
 8016884:	00000020 	andeq	r0, r0, r0, lsr #32
 8016888:	00000040 	andeq	r0, r0, r0, asr #32
 801688c:	00000060 	andeq	r0, r0, r0, rrx
 8016890:	00000040 	andeq	r0, r0, r0, asr #32
 8016894:	00000020 	andeq	r0, r0, r0, lsr #32
 8016898:	00000020 	andeq	r0, r0, r0, lsr #32
 801689c:	000001e0 	andeq	r0, r0, r0, ror #3
 80168a0:	00000040 	andeq	r0, r0, r0, asr #32
 80168a4:	00000020 	andeq	r0, r0, r0, lsr #32
 80168a8:	00000060 	andeq	r0, r0, r0, rrx
 80168ac:	00000030 	andeq	r0, r0, r0, lsr r0
 80168b0:	00000020 	andeq	r0, r0, r0, lsr #32
 80168b4:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 80168b8:	00000030 	andeq	r0, r0, r0, lsr r0
 80168bc:	00000040 	andeq	r0, r0, r0, asr #32
 80168c0:	00000020 	andeq	r0, r0, r0, lsr #32
 80168c4:	00000060 	andeq	r0, r0, r0, rrx
 80168c8:	00000020 	andeq	r0, r0, r0, lsr #32
 80168cc:	00000400 	andeq	r0, r0, r0, lsl #8
 80168d0:	00000020 	andeq	r0, r0, r0, lsr #32
 80168d4:	00000020 	andeq	r0, r0, r0, lsr #32
 80168d8:	00000040 	andeq	r0, r0, r0, asr #32
 80168dc:	00000060 	andeq	r0, r0, r0, rrx
 80168e0:	00000020 	andeq	r0, r0, r0, lsr #32
 80168e4:	00000020 	andeq	r0, r0, r0, lsr #32
 80168e8:	00000020 	andeq	r0, r0, r0, lsr #32

080168ec <vtable for StoreArtNet>:
	...
 80168f4:	0800e7b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, sl, sp, lr, pc}
 80168f8:	0800e981 	stmdaeq	r0, {r0, r7, r8, fp, sp, lr, pc}
 80168fc:	0800e7c1 	stmdaeq	r0, {r0, r6, r7, r8, r9, sl, sp, lr, pc}
 8016900:	0800e995 	stmdaeq	r0, {r0, r2, r4, r7, r8, fp, sp, lr, pc}
 8016904:	0800e7e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, r9, sl, sp, lr, pc}
 8016908:	0800e815 	stmdaeq	r0, {r0, r2, r4, fp, sp, lr, pc}
 801690c:	0800e841 	stmdaeq	r0, {r0, r6, fp, sp, lr, pc}
 8016910:	0800e87d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, fp, sp, lr, pc}
 8016914:	0800e8ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, fp, sp, lr, pc}
 8016918:	0800e8e1 	stmdaeq	r0, {r0, r5, r6, r7, fp, sp, lr, pc}
 801691c:	0800e931 	stmdaeq	r0, {r0, r4, r5, r8, fp, sp, lr, pc}
 8016920:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8016924:	00000000 	andeq	r0, r0, r0
 8016928:	0800e7bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r8, r9, sl, sp, lr, pc}
 801692c:	0800e98d 	stmdaeq	r0, {r0, r2, r3, r7, r8, fp, sp, lr, pc}
 8016930:	0800e80d 	stmdaeq	r0, {r0, r2, r3, fp, sp, lr, pc}
 8016934:	0800e839 	stmdaeq	r0, {r0, r3, r4, r5, fp, sp, lr, pc}
 8016938:	0800e875 	stmdaeq	r0, {r0, r2, r4, r5, r6, fp, sp, lr, pc}
 801693c:	0800e8a5 	stmdaeq	r0, {r0, r2, r5, r7, fp, sp, lr, pc}
 8016940:	0800e8d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, fp, sp, lr, pc}
 8016944:	0800e929 	stmdaeq	r0, {r0, r3, r5, r8, fp, sp, lr, pc}
 8016948:	0800e979 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, fp, sp, lr, pc}

0801694c <vtable for StoreDisplayUdf>:
	...
 8016954:	0800e9d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, fp, sp, lr, pc}
 8016958:	0800ea19 	stmdaeq	r0, {r0, r3, r4, r9, fp, sp, lr, pc}
 801695c:	0800e9f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, fp, sp, lr, pc}
 8016960:	0800e9d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r8, fp, sp, lr, pc}

08016964 <vtable for StoreDmxSend>:
	...
 801696c:	0800ea39 	stmdaeq	r0, {r0, r3, r4, r5, r9, fp, sp, lr, pc}
 8016970:	0800ea81 	stmdaeq	r0, {r0, r7, r9, fp, sp, lr, pc}
 8016974:	0800ea5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r9, fp, sp, lr, pc}
 8016978:	0800ea3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, fp, sp, lr, pc}

0801697c <vtable for StoreNetwork>:
	...
 8016984:	0800eaa1 	stmdaeq	r0, {r0, r5, r7, r9, fp, sp, lr, pc}
 8016988:	0800ebb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp, sp, lr, pc}
 801698c:	0800eaa9 	stmdaeq	r0, {r0, r3, r5, r7, r9, fp, sp, lr, pc}
 8016990:	0800ebc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, fp, sp, lr, pc}
 8016994:	0800eb59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, fp, sp, lr, pc}
 8016998:	0800eb2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, r9, fp, sp, lr, pc}
 801699c:	0800eafd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, fp, sp, lr, pc}
 80169a0:	0800eb85 	stmdaeq	r0, {r0, r2, r7, r8, r9, fp, sp, lr, pc}
 80169a4:	0800eacd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, fp, sp, lr, pc}
 80169a8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80169ac:	00000000 	andeq	r0, r0, r0
 80169b0:	0800eaa3 	stmdaeq	r0, {r0, r1, r5, r7, r9, fp, sp, lr, pc}
 80169b4:	0800ebc1 	stmdaeq	r0, {r0, r6, r7, r8, r9, fp, sp, lr, pc}
 80169b8:	0800eb7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r8, r9, fp, sp, lr, pc}
 80169bc:	0800eb51 	stmdaeq	r0, {r0, r4, r6, r8, r9, fp, sp, lr, pc}
 80169c0:	0800eb25 	stmdaeq	r0, {r0, r2, r5, r8, r9, fp, sp, lr, pc}
 80169c4:	0800ebad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, fp, sp, lr, pc}
 80169c8:	0800eaf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, fp, sp, lr, pc}

080169cc <vtable for StoreRDMDevice>:
	...
 80169d4:	0800ebfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, sp, lr, pc}
 80169d8:	0800ec6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, sl, fp, sp, lr, pc}
 80169dc:	0800ec05 	stmdaeq	r0, {r0, r2, sl, fp, sp, lr, pc}
 80169e0:	0800ec81 	stmdaeq	r0, {r0, r7, sl, fp, sp, lr, pc}
 80169e4:	0800ec29 	stmdaeq	r0, {r0, r3, r5, sl, fp, sp, lr, pc}
 80169e8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80169ec:	00000000 	andeq	r0, r0, r0
 80169f0:	0800ebff 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, sp, lr, pc}
 80169f4:	0800ec79 	stmdaeq	r0, {r0, r3, r4, r5, r6, sl, fp, sp, lr, pc}
 80169f8:	0800ec65 	stmdaeq	r0, {r0, r2, r5, r6, sl, fp, sp, lr, pc}

080169fc <vtable for StoreRemoteConfig>:
	...
 8016a04:	0800ecb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, sl, fp, sp, lr, pc}
 8016a08:	0800ed01 	stmdaeq	r0, {r0, r8, sl, fp, sp, lr, pc}
 8016a0c:	0800ecdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, fp, sp, lr, pc}
 8016a10:	0800ecbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, fp, sp, lr, pc}
 8016a14:	3a434d46 	bcc	90e9f34 <__exidx_end+0x10d2bbc>
 8016a18:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 8016a1c:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8016a20:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8016a24:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8016a28:	6f742068 	svcvs	0x00742068
 8016a2c:	206c6174 	rsbcs	r6, ip, r4, ror r1
 8016a30:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 8016a34:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 8016a38:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8016a3c:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 8016a40:	6374000a 	cmnvs	r4, #10
 8016a44:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 8016a48:	3a6e6967 	bcc	9bb0fec <__exidx_end+0x1b99c74>
 8016a4c:	6f6f7420 	svcvs	0x006f7420
 8016a50:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 8016a54:	6f632079 	svcvs	0x00632079
 8016a58:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 8016a5c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8016a60:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 8016a64:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 8016a68:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 8016a6c:	41000a64 	tstmi	r0, r4, ror #20
 8016a70:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 8016a74:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 8016a78:	61662070 	smcvs	25088	; 0x6200
 8016a7c:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 8016a80:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 8016a84:	61666564 	cmnvs	r6, r4, ror #10
 8016a88:	20746c75 	rsbscs	r6, r4, r5, ror ip
 8016a8c:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8016a90:	0a796177 	beq	9e6f074 <__exidx_end+0x1e57cfc>
 8016a94:	50524100 	subspl	r4, r2, r0, lsl #2
 8016a98:	6f6f6c20 	svcvs	0x006f6c20
 8016a9c:	2070756b 	rsbscs	r7, r0, fp, ror #10
 8016aa0:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 8016aa4:	000a6465 	andeq	r6, sl, r5, ror #8

08016aa8 <NetworkConst::MSG_MDNS_CONFIG>:
 8016aa8:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8016aac:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016ab0:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016ab4:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

08016ab9 <NetworkConst::MSG_NETWORK_INIT>:
 8016ab9:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8016abd:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8016ac1:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 8016ac5:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 8016ac9:	6974617a 	ldmdbvs	r4!, {r1, r3, r4, r5, r6, r8, sp, lr}^
 8016acd:	32006e6f 	andcc	r6, r0, #1776	; 0x6f0
 8016ad1:	302e3432 	eorcc	r3, lr, r2, lsr r4
 8016ad5:	322e302e 	eorcc	r3, lr, #46	; 0x2e
 8016ad9:	5f003135 	svcpl	0x00003135
 8016add:	2e706374 	mrccs	3, 3, r6, cr0, cr4, {3}
 8016ae1:	61636f6c 	cmnvs	r3, ip, ror #30
 8016ae5:	735f006c 	cmpvc	pc, #108	; 0x6c
 8016ae9:	69767265 	ldmdbvs	r6!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016aed:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8016af1:	736e645f 	cmnvc	lr, #1593835520	; 0x5f000000
 8016af5:	2e64732d 	cdpcs	3, 6, cr7, cr4, cr13, {1}
 8016af9:	7064755f 	rsbvc	r7, r4, pc, asr r5
 8016afd:	636f6c2e 	cmnvs	pc, #11776	; 0x2e00
 8016b01:	6d006c61 	stcvs	12, cr6, [r0, #-388]	; 0xfffffe7c
 8016b05:	0a534e44 	beq	94ea41d <__exidx_end+0x14d30a5>
 8016b09:	6f4e2000 	svcvs	0x004e2000
 8016b0d:	75722074 	ldrbvc	r2, [r2, #-116]!	; 0xffffff8c
 8016b11:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
 8016b15:	20000a67 	andcs	r0, r0, r7, ror #20
 8016b19:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 8016b1d:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016b21:	20000a73 	andcs	r0, r0, r3, ror sl
 8016b25:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 8016b29:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8016b2d:	7465000a 	strbtvc	r0, [r5], #-10
 8016b31:	67003068 	strvs	r3, [r0, -r8, rrx]
 8016b35:	64616769 	strbtvs	r6, [r1], #-1897	; 0xfffff897
 8016b39:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 8016b3d:	4e005f65 	cdpmi	15, 0, cr5, cr0, cr5, {3}
 8016b41:	6f777465 	svcvs	0x00777465
 8016b45:	000a6b72 	andeq	r6, sl, r2, ror fp
 8016b49:	736f4820 	cmnvc	pc, #32, 16	; 0x200000
 8016b4d:	6d616e74 	stclvs	14, cr6, [r1, #-464]!	; 0xfffffe30
 8016b51:	3a202065 	bcc	881eced <__exidx_end+0x807975>
 8016b55:	0a732520 	beq	9cdffdd <__exidx_end+0x1cc8c65>
 8016b59:	66492000 	strbvs	r2, [r9], -r0
 8016b5d:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
 8016b61:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016b65:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016b69:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8016b6d:	4920000a 	stmdbmi	r0!, {r1, r3}
 8016b71:	2074656e 	rsbscs	r6, r4, lr, ror #10
 8016b75:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016b79:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016b7d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016b81:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016b85:	252f6425 	strcs	r6, [pc, #-1061]!	; 8016768 <index_js+0x418>
 8016b89:	20000a64 	andcs	r0, r0, r4, ror #20
 8016b8d:	6d74654e 	cfldr64vs	mvdx6, [r4, #-312]!	; 0xfffffec8
 8016b91:	206b7361 	rsbcs	r7, fp, r1, ror #6
 8016b95:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016b99:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016b9d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016ba1:	0a64252e 	beq	9920061 <__exidx_end+0x1908ce9>
 8016ba5:	61472000 	mrsvs	r2, (UNDEF: 71)
 8016ba9:	61776574 	cmnvs	r7, r4, ror r5
 8016bad:	20202079 	eorcs	r2, r0, r9, ror r0
 8016bb1:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016bb5:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016bb9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016bbd:	20000a64 	andcs	r0, r0, r4, ror #20
 8016bc1:	616f7242 	cmnvs	pc, r2, asr #4
 8016bc5:	73616364 	cmnvc	r1, #100, 6	; 0x90000001
 8016bc9:	203a2074 	eorscs	r2, sl, r4, ror r0
 8016bcd:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016bd1:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016bd5:	0a64252e 	beq	9920095 <__exidx_end+0x1908d1d>
 8016bd9:	614d2000 	mrsvs	r2, (UNDEF: 77)
 8016bdd:	20202063 	eorcs	r2, r0, r3, rrx
 8016be1:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016be5:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8016be9:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8016bed:	3a78322e 	bcc	9e234ad <__exidx_end+0x1e0c135>
 8016bf1:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016bf5:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8016bf9:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8016bfd:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8016c01:	0a78322e 	beq	9e234c1 <__exidx_end+0x1e0c149>
 8016c05:	6f4d2000 	svcvs	0x004d2000
 8016c09:	20206564 	eorcs	r6, r0, r4, ror #10
 8016c0d:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016c11:	6325203a 			; <UNDEFINED> instruction: 0x6325203a
 8016c15:	7453000a 	ldrbvc	r0, [r3], #-10
 8016c19:	63697461 	cmnvs	r9, #1627389952	; 0x61000000
 8016c1d:	00504920 	subseq	r4, r0, r0, lsr #18

08016c21 <NetworkParamsConst::IP_ADDRESS>:
 8016c21:	615f7069 	cmpvs	pc, r9, rrx
 8016c25:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8016c29:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08016c2c <NetworkParamsConst::DEFAULT_GATEWAY>:
 8016c2c:	61666564 	cmnvs	r6, r4, ror #10
 8016c30:	5f746c75 	svcpl	0x00746c75
 8016c34:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8016c38:	00796177 	rsbseq	r6, r9, r7, ror r1

08016c3c <NetworkParamsConst::DHCP_RETRY_TIME>:
 8016c3c:	70636864 	rsbvc	r6, r3, r4, ror #16
 8016c40:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8016c44:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8016c4c <NetworkParamsConst::HOSTNAME>
 8016c48:	00656d69 	rsbeq	r6, r5, r9, ror #26

08016c4c <NetworkParamsConst::HOSTNAME>:
 8016c4c:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8016c50:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08016c55 <NetworkParamsConst::NET_MASK>:
 8016c55:	5f74656e 	svcpl	0x0074656e
 8016c59:	6b73616d 	blvs	9cef215 <__exidx_end+0x1cd7e9d>
	...

08016c5e <NetworkParamsConst::USE_DHCP>:
 8016c5e:	5f657375 	svcpl	0x00657375
 8016c62:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08016c67 <NetworkParamsConst::FILE_NAME>:
 8016c67:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8016c6b:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8016c6f:	00747874 	rsbseq	r7, r4, r4, ror r8
 8016c73:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 8016c77:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 8016c7b:	61747320 	cmnvs	r4, r0, lsr #6
 8016c7f:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8016c83:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016c87:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016c8b:	252f6425 	strcs	r6, [pc, #-1061]!	; 801686e <index_js+0x51e>
 8016c8f:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8016c93:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 8016c97:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016c9b:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016c9f:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8016ca3:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 8016ca7:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016cab:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016caf:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8016cb3:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 8016cb7:	20657261 	rsbcs	r7, r5, r1, ror #4
 8016cbb:	2a2e2556 	bcs	8ba021b <__exidx_end+0xb88ea3>
 8016cbf:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 8016cc3:	72205043 	eorvc	r5, r0, #67	; 0x43
 8016cc7:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 8016ccb:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8016ccf:	50434844 	subpl	r4, r3, r4, asr #16
 8016cd3:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8016cd7:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 8016cdb:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 8016cdf:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8016ce3:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8016ce7:	6f647475 	svcvs	0x00647475
 8016ceb:	00006e77 	andeq	r6, r0, r7, ror lr
	...

08016cf0 <pArray>:
 8016cf0:	08016d84 	stmdaeq	r1, {r2, r7, r8, sl, fp, sp, lr}
 8016cf4:	08016d40 	stmdaeq	r1, {r6, r8, sl, fp, sp, lr}
 8016cf8:	08016c21 	stmdaeq	r1, {r0, r5, sl, fp, sp, lr}
 8016cfc:	08016d8a 	stmdaeq	r1, {r1, r3, r7, r8, sl, fp, sp, lr}
 8016d00:	08016ee8 	stmdaeq	r1, {r3, r5, r6, r7, r9, sl, fp, sp, lr}
 8016d04:	08016d4b 	stmdaeq	r1, {r0, r1, r3, r6, r8, sl, fp, sp, lr}
 8016d08:	08015433 	stmdaeq	r1, {r0, r1, r4, r5, sl, ip, lr}
 8016d0c:	08016c4c 	stmdaeq	r1, {r2, r3, r6, sl, fp, sp, lr}
 8016d10:	08016e4e 	stmdaeq	r1, {r1, r2, r3, r6, r9, sl, fp, sp, lr}
 8016d14:	08016e5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}
 8016d18:	08016e6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 8016d1c:	08016e7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, sl, fp, sp, lr}
 8016d20:	08016c55 	stmdaeq	r1, {r0, r2, r4, r6, sl, fp, sp, lr}
 8016d24:	08016ed6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r9, sl, fp, sp, lr}
 8016d28:	0801543e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, ip, lr}
 8016d2c:	08015456 	stmdaeq	r1, {r1, r2, r4, r6, sl, ip, lr}
 8016d30:	0801546e 	stmdaeq	r1, {r1, r2, r3, r5, r6, sl, ip, lr}
 8016d34:	08015486 	stmdaeq	r1, {r1, r2, r7, sl, ip, lr}
 8016d38:	08016c2c 	stmdaeq	r1, {r2, r3, r5, sl, fp, sp, lr}
 8016d3c:	08016d58 	stmdaeq	r1, {r3, r4, r6, r8, sl, fp, sp, lr}

08016d40 <DisplayUdfParamsConst::BOARD_NAME>:
 8016d40:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 8016d44:	616e5f64 	cmnvs	lr, r4, ror #30
 8016d48:	 	tstvs	r0, sp, ror #10

08016d4b <DisplayUdfParamsConst::ACTIVE_PORTS>:
 8016d4b:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8016d4f:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 8016d53:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

08016d58 <DisplayUdfParamsConst::DMX_DIRECTION>:
 8016d58:	5f786d64 	svcpl	0x00786d64
 8016d5c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016d60:	6f697463 	svcvs	0x00697463
 8016d64:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

08016d66 <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 8016d66:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 8016d6a:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016d6e:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8016809 <index_js+0x4b9>
 8016d72:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

08016d74 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 8016d74:	70696c66 	rsbvc	r6, r9, r6, ror #24
 8016d78:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 8016d7c:	61636974 	smcvs	13972	; 0x3694
 8016d80:	00796c6c 	rsbseq	r6, r9, ip, ror #24

08016d84 <DisplayUdfParamsConst::TITLE>:
 8016d84:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8016d88:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

08016d8a <DisplayUdfParamsConst::VERSION>:
 8016d8a:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016d8e:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08016d92 <DisplayUdfParamsConst::FILE_NAME>:
 8016d92:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8016d96:	2e79616c 	rpwcsez	f6, f1, #4.0
 8016d9a:	00747874 	rsbseq	r7, r4, r4, ror r8

08016d9e <DisplayUdfParamsConst::INTENSITY>:
 8016d9e:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8016da2:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8016da6:	20200079 	eorcs	r0, r0, r9, ror r0
 8016daa:	4f002020 	svcmi	0x00002020
 8016dae:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8016db2:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8016db6:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 8016dba:	20632520 	rsbcs	r2, r3, r0, lsr #10
 8016dbe:	4f007325 	svcmi	0x00007325
 8016dc2:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8016dc6:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 8016dca:	3a64253a 	bcc	99202ba <__exidx_end+0x1908f42>
 8016dce:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8016dd2:	73252063 			; <UNDEFINED> instruction: 0x73252063
 8016dd6:	3a632500 	bcc	98e01de <__exidx_end+0x18c8e66>
 8016dda:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8016dde:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016de2:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016de6:	3a504100 	bcc	94271ee <__exidx_end+0x140fe76>
 8016dea:	00642520 	rsbeq	r2, r4, r0, lsr #10
 8016dee:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 8016df2:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8016df6:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 8016dfa:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 8016dfe:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8016e02:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016e06:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016e0a:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016e0e:	2c226425 	cfstrscs	mvf6, [r2], #-148	; 0xffffff6c
 8016e12:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8016e16:	2e64253d 	mcrcs	5, 3, r2, cr4, cr13, {1}
 8016e1a:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016e1e:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016e22:	2023000a 	eorcs	r0, r3, sl
 8016e26:	23207325 			; <UNDEFINED> instruction: 0x23207325
 8016e2a:	2522000a 	strcs	r0, [r2, #-10]!
 8016e2e:	223a2273 	eorscs	r2, sl, #805306375	; 0x30000007
 8016e32:	782a2e25 	stmdavc	sl!, {r0, r2, r5, r9, sl, fp, sp}
 8016e36:	23002c22 	movwcs	r2, #3106	; 0xc22
 8016e3a:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8016e3e:	0a782a2e 	beq	9e216fe <__exidx_end+0x1e0a386>
	...

08016e43 <LightSetParamsConst::MERGE_MODE>:
 8016e43:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8016e47:	6f6d5f65 	svcvs	0x006d5f65
 8016e4b:	 	strvc	r6, [r0, #-1380]	; 0xfffffa9c

08016e4e <LightSetParamsConst::UNIVERSE_PORT>:
 8016e4e:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016e52:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016e56:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016e5a:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8016e5e:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016e62:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016e66:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016e6a:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016e6e:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016e72:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016e76:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016e7a:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8016e7e:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016e82:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016e86:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016e8a:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016e8e <LightSetParamsConst::MERGE_MODE_PORT>:
 8016e8e:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8016e92:	6f6d5f65 	svcvs	0x006d5f65
 8016e96:	705f6564 	subsvc	r6, pc, r4, ror #10
 8016e9a:	5f74726f 	svcpl	0x0074726f
 8016e9e:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 8016ea2:	5f656772 	svcpl	0x00656772
 8016ea6:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8016eaa:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016eae:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016eb2:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8016eb6:	6f6d5f65 	svcvs	0x006d5f65
 8016eba:	705f6564 	subsvc	r6, pc, r4, ror #10
 8016ebe:	5f74726f 	svcpl	0x0074726f
 8016ec2:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 8016ec6:	5f656772 	svcpl	0x00656772
 8016eca:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8016ece:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016ed2:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016ed6 <LightSetParamsConst::DMX_START_ADDRESS>:
 8016ed6:	5f786d64 	svcpl	0x00786d64
 8016eda:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8016ede:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8016ee2:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 8016ee6:	 	mrcvs	0, 3, r0, cr5, cr3, {3}

08016ee8 <LightSetParamsConst::UNIVERSE>:
 8016ee8:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016eec:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

08016ef1 <LightSetParamsConst::DIRECTION>:
 8016ef1:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016ef5:	6f697463 	svcvs	0x00697463
 8016ef9:	6f705f6e 	svcvs	0x00705f6e
 8016efd:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 8016f01:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8016f05:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8016f09:	5f6e6f69 	svcpl	0x006e6f69
 8016f0d:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8016f11:	0000625f 	andeq	r6, r0, pc, asr r2
 8016f15:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016f19:	6f697463 	svcvs	0x00697463
 8016f1d:	6f705f6e 	svcvs	0x00705f6e
 8016f21:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 8016f25:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8016f29:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8016f2d:	5f6e6f69 	svcpl	0x006e6f69
 8016f31:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8016f35:	0000645f 	andeq	r6, r0, pc, asr r4
 8016f39:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8016f3d:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8016f41:	66207961 	strtvs	r7, [r0], -r1, ror #18
 8016f45:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8016f49:	31485300 	mrscc	r5, (UNDEF: 120)
 8016f4d:	00363031 	eorseq	r3, r6, r1, lsr r0
 8016f51:	31445353 	cmpcc	r4, r3, asr r3
 8016f55:	00363033 	eorseq	r3, r6, r3, lsr r0
 8016f59:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 8016f5d:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 8016f61:	000a2964 	andeq	r2, sl, r4, ror #18
 8016f65:	aaeeaa40 	bge	7bc186d <__stack_size+0x7bc006d>
 8016f69:	 	andmi	r0, r0, lr, ror #1

08016f6c <_OledFont8x6>:
 8016f6c:	00000040 	andeq	r0, r0, r0, asr #32
 8016f70:	40000000 	andmi	r0, r0, r0
 8016f74:	005f0000 	subseq	r0, pc, r0
 8016f78:	00400000 	subeq	r0, r0, r0
 8016f7c:	00070007 	andeq	r0, r7, r7
 8016f80:	7f144000 	svcvc	0x00144000
 8016f84:	00147f14 	andseq	r7, r4, r4, lsl pc
 8016f88:	7f2a2440 	svcvc	0x002a2440
 8016f8c:	4000122a 	andmi	r1, r0, sl, lsr #4
 8016f90:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8016f94:	36400062 	strbcc	r0, [r0], -r2, rrx
 8016f98:	50205649 	eorpl	r5, r0, r9, asr #12
 8016f9c:	08004000 	stmdaeq	r0, {lr}
 8016fa0:	00000307 	andeq	r0, r0, r7, lsl #6
 8016fa4:	221c0040 	andscs	r0, ip, #64	; 0x40
 8016fa8:	40000041 	andmi	r0, r0, r1, asr #32
 8016fac:	1c224100 	stfnes	f4, [r2], #-0
 8016fb0:	2a400000 	bcs	9016fb8 <__exidx_end+0xfffc40>
 8016fb4:	2a1c7f1c 	bcs	8736c2c <__exidx_end+0x71f8b4>
 8016fb8:	08084000 	stmdaeq	r8, {lr}
 8016fbc:	0008083e 	andeq	r0, r8, lr, lsr r8
 8016fc0:	70800040 	addvc	r0, r0, r0, asr #32
 8016fc4:	40000030 	andmi	r0, r0, r0, lsr r0
 8016fc8:	08080808 	stmdaeq	r8, {r3, fp}
 8016fcc:	00400008 	subeq	r0, r0, r8
 8016fd0:	00606000 	rsbeq	r6, r0, r0
 8016fd4:	10204000 	eorne	r4, r0, r0
 8016fd8:	00020408 	andeq	r0, r2, r8, lsl #8
 8016fdc:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 8016fe0:	40003e45 	andmi	r3, r0, r5, asr #28
 8016fe4:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8016fe8:	72400000 	subvc	r0, r0, #0
 8016fec:	46494949 	strbmi	r4, [r9], -r9, asr #18
 8016ff0:	41214000 			; <UNDEFINED> instruction: 0x41214000
 8016ff4:	00334d49 	eorseq	r4, r3, r9, asr #26
 8016ff8:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8016ffc:	4000107f 	andmi	r1, r0, pc, ror r0
 8017000:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8017004:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8017008:	3149494a 	cmpcc	r9, sl, asr #18
 801700c:	21414000 	mrscs	r4, (UNDEF: 65)
 8017010:	00070911 	andeq	r0, r7, r1, lsl r9
 8017014:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8017018:	40003649 	andmi	r3, r0, r9, asr #12
 801701c:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 8017020:	0040001e 	subeq	r0, r0, lr, lsl r0
 8017024:	00001400 	andeq	r1, r0, r0, lsl #8
 8017028:	40004000 	andmi	r4, r0, r0
 801702c:	00000034 	andeq	r0, r0, r4, lsr r0
 8017030:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 8017034:	40004122 	andmi	r4, r0, r2, lsr #2
 8017038:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 801703c:	00400014 	subeq	r0, r0, r4, lsl r0
 8017040:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 8017044:	01024000 	mrseq	r4, (UNDEF: 2)
 8017048:	00060959 	andeq	r0, r6, r9, asr r9
 801704c:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 8017050:	40004e59 	andmi	r4, r0, r9, asr lr
 8017054:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8017058:	7f40007c 	svcvc	0x0040007c
 801705c:	36494949 	strbcc	r4, [r9], -r9, asr #18
 8017060:	413e4000 	teqmi	lr, r0
 8017064:	00224141 	eoreq	r4, r2, r1, asr #2
 8017068:	41417f40 	cmpmi	r1, r0, asr #30
 801706c:	40003e41 	andmi	r3, r0, r1, asr #28
 8017070:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8017074:	7f400041 	svcvc	0x00400041
 8017078:	01090909 	tsteq	r9, r9, lsl #18
 801707c:	413e4000 	teqmi	lr, r0
 8017080:	00735141 	rsbseq	r5, r3, r1, asr #2
 8017084:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8017088:	40007f08 	andmi	r7, r0, r8, lsl #30
 801708c:	417f4100 	cmnmi	pc, r0, lsl #2
 8017090:	20400000 	subcs	r0, r0, r0
 8017094:	013f4140 	teqeq	pc, r0, asr #2
 8017098:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 801709c:	00412214 	subeq	r2, r1, r4, lsl r2
 80170a0:	40407f40 	submi	r7, r0, r0, asr #30
 80170a4:	40004040 	andmi	r4, r0, r0, asr #32
 80170a8:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 80170ac:	7f40007f 	svcvc	0x0040007f
 80170b0:	7f100804 	svcvc	0x00100804
 80170b4:	413e4000 	teqmi	lr, r0
 80170b8:	003e4141 	eorseq	r4, lr, r1, asr #2
 80170bc:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 80170c0:	40000609 	andmi	r0, r0, r9, lsl #12
 80170c4:	2151413e 	cmpcs	r1, lr, lsr r1
 80170c8:	7f40005e 	svcvc	0x0040005e
 80170cc:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 80170d0:	49264000 	stmdbmi	r6!, {lr}
 80170d4:	00324949 	eorseq	r4, r2, r9, asr #18
 80170d8:	7f010340 	svcvc	0x00010340
 80170dc:	40000301 	andmi	r0, r0, r1, lsl #6
 80170e0:	4040403f 	submi	r4, r0, pc, lsr r0
 80170e4:	1f40003f 	svcne	0x0040003f
 80170e8:	1f204020 	svcne	0x00204020
 80170ec:	403f4000 	eorsmi	r4, pc, r0
 80170f0:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 80170f4:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 80170f8:	40006314 	andmi	r6, r0, r4, lsl r3
 80170fc:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 8017100:	61400003 	cmpvs	r0, r3
 8017104:	434d4959 	movtmi	r4, #55641	; 0xd959
 8017108:	7f004000 	svcvc	0x00004000
 801710c:	00414141 	subeq	r4, r1, r1, asr #2
 8017110:	08040240 	stmdaeq	r4, {r6, r9}
 8017114:	40002010 	andmi	r2, r0, r0, lsl r0
 8017118:	41414100 	mrsmi	r4, (UNDEF: 81)
 801711c:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 8017120:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 8017124:	40404000 	submi	r4, r0, r0
 8017128:	00404040 	subeq	r4, r0, r0, asr #32
 801712c:	07030040 	streq	r0, [r3, -r0, asr #32]
 8017130:	40000008 	andmi	r0, r0, r8
 8017134:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 8017138:	7f400040 	svcvc	0x00400040
 801713c:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 8017140:	44384000 	ldrtmi	r4, [r8], #-0
 8017144:	00284444 	eoreq	r4, r8, r4, asr #8
 8017148:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 801714c:	40007f28 	andmi	r7, r0, r8, lsr #30
 8017150:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 8017154:	00400018 	subeq	r0, r0, r8, lsl r0
 8017158:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 801715c:	a4184000 	ldrge	r4, [r8], #-0
 8017160:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 8017164:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8017168:	40007804 	andmi	r7, r0, r4, lsl #16
 801716c:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 8017170:	20400000 	subcs	r0, r0, r0
 8017174:	003d4040 	eorseq	r4, sp, r0, asr #32
 8017178:	107f4000 	rsbsne	r4, pc, r0
 801717c:	00004428 	andeq	r4, r0, r8, lsr #8
 8017180:	7f410040 	svcvc	0x00410040
 8017184:	40000040 	andmi	r0, r0, r0, asr #32
 8017188:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 801718c:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8017190:	78040408 	stmdavc	r4, {r3, sl}
 8017194:	44384000 	ldrtmi	r4, [r8], #-0
 8017198:	00384444 	eorseq	r4, r8, r4, asr #8
 801719c:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 80171a0:	40001824 	andmi	r1, r0, r4, lsr #16
 80171a4:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 80171a8:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 80171ac:	08040408 	stmdaeq	r4, {r3, sl}
 80171b0:	54484000 	strbpl	r4, [r8], #-0
 80171b4:	00245454 	eoreq	r5, r4, r4, asr r4
 80171b8:	3f040440 	svccc	0x00040440
 80171bc:	40002444 	andmi	r2, r0, r4, asr #8
 80171c0:	2040403c 	subcs	r4, r0, ip, lsr r0
 80171c4:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 80171c8:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 80171cc:	403c4000 	eorsmi	r4, ip, r0
 80171d0:	003c4030 	eorseq	r4, ip, r0, lsr r0
 80171d4:	10284440 	eorne	r4, r8, r0, asr #8
 80171d8:	40004428 	andmi	r4, r0, r8, lsr #8
 80171dc:	9090904c 	addsls	r9, r0, ip, asr #32
 80171e0:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 80171e4:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 80171e8:	08004000 	stmdaeq	r0, {lr}
 80171ec:	00004136 	andeq	r4, r0, r6, lsr r1
 80171f0:	77000040 	strvc	r0, [r0, -r0, asr #32]
 80171f4:	40000000 	andmi	r0, r0, r0
 80171f8:	08364100 	ldmdaeq	r6!, {r8, lr}
 80171fc:	02400000 	subeq	r0, r0, #0
 8017200:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 8017204:	263c4000 	ldrtcs	r4, [ip], -r0
 8017208:	003c2623 	eorseq	r2, ip, r3, lsr #12

0801720c <oled_128x32_init>:
 801720c:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8017210:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8017214:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8017218:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 801721c:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8017220:	a6a440db 	ssatge	r4, #5, fp, asr #1

08017224 <oled_128x64_init>:
 8017224:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8017228:	4000d33f 	andmi	sp, r0, pc, lsr r3
 801722c:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8017230:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 8017234:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8017238:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801723c <vtable for Ssd1306>:
	...
 8017244:	08012045 	stmdaeq	r1, {r0, r2, r6, sp}
 8017248:	08012071 	stmdaeq	r1, {r0, r4, r5, r6, sp}
 801724c:	08012381 	stmdaeq	r1, {r0, r7, r8, r9, sp}
 8017250:	08012309 	stmdaeq	r1, {r0, r3, r8, r9, sp}
 8017254:	080121d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, sp}
 8017258:	08012091 	stmdaeq	r1, {r0, r4, r7, sp}
 801725c:	080120b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, sp}
 8017260:	080121ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r8, sp}
 8017264:	08012165 	stmdaeq	r1, {r0, r2, r5, r6, r8, sp}
 8017268:	08012047 	stmdaeq	r1, {r0, r1, r2, r6, sp}
 801726c:	08012211 	stmdaeq	r1, {r0, r4, r9, sp}
 8017270:	0801221d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sp}
 8017274:	08012237 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, sp}
 8017278:	08012049 	stmdaeq	r1, {r0, r3, r6, sp}
 801727c:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8017280:	5b1b006d 	blpl	86d743c <__exidx_end+0x6c00c4>
 8017284:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8017288:	31335b1b 	teqcc	r3, fp, lsl fp
 801728c:	5b1b006d 	blpl	86d7448 <__exidx_end+0x6c00d0>
 8017290:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8017294:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8017298:	5b1b006d 	blpl	86d7454 <__exidx_end+0x6c00dc>
 801729c:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 80172a0:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 80172a4:	205d732a 	subscs	r7, sp, sl, lsr #6
 80172a8:	43207325 			; <UNDEFINED> instruction: 0x43207325
 80172ac:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 80172b0:	2064656c 	rsbcs	r6, r4, ip, ror #10
 80172b4:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 80172b8:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 80172bc:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 80172c0:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 80172c4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80172c8:	203a636f 	eorscs	r6, sl, pc, ror #6
 80172cc:	000a7525 	andeq	r7, sl, r5, lsr #10
 80172d0:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80172d4:	203a636f 	eorscs	r6, sl, pc, ror #6
 80172d8:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 80172dc:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 80172e0:	6b636f6c 	blvs	98f3098 <__exidx_end+0x18dbd20>
 80172e4:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 80172e8:	000a7469 	andeq	r7, sl, r9, ror #8
 80172ec:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80172f0:	203a636f 	eorscs	r6, sl, pc, ror #6
 80172f4:	6f6c4270 	svcvs	0x006c4270
 80172f8:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 80172fc:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8017300:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 8017304:	7a697320 	bvc	9a73f8c <__exidx_end+0x1a5cc14>
 8017308:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 801730c:	6164202c 	cmnvs	r4, ip, lsr #32
 8017310:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 8017314:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 8017318:	3a656572 	bcc	99708e8 <__exidx_end+0x1959570>
 801731c:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 8017320:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017324:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8017328:	203d2072 	eorscs	r2, sp, r2, ror r0
 801732c:	202c7025 	eorcs	r7, ip, r5, lsr #32
 8017330:	6f6c4270 	svcvs	0x006c4270
 8017334:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 8017338:	0a702520 	beq	9c207c0 <__exidx_end+0x1c09448>
 801733c:	00000000 	andeq	r0, r0, r0

08017340 <days_of_month>:
 8017340:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017344:	0000001c 	andeq	r0, r0, ip, lsl r0
 8017348:	0000001f 	andeq	r0, r0, pc, lsl r0
 801734c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017350:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017354:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017358:	0000001f 	andeq	r0, r0, pc, lsl r0
 801735c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017360:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017364:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017368:	0000001e 	andeq	r0, r0, lr, lsl r0
 801736c:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

08017370 <__exidx_start>:
 8017370:	7fffd9e0 	svcvc	0x00ffd9e0
 8017374:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08017378 <.ARM.attributes>:
 8017378:	00002e41 	andeq	r2, r0, r1, asr #28
 801737c:	61656100 	cmnvs	r5, r0, lsl #2
 8017380:	01006962 	tsteq	r0, r2, ror #18
 8017384:	00000024 	andeq	r0, r0, r4, lsr #32
 8017388:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 801738c:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 8017390:	0600334d 	streq	r3, [r0], -sp, asr #6
 8017394:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8017398:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 801739c:	17011501 	strne	r1, [r1, -r1, lsl #10]
 80173a0:	1a011803 	bne	805d3b4 <__exidx_end+0x4603c>
 80173a4:	Address 0x00000000080173a4 is out of bounds.


Disassembly of section .data:

20000000 <DmxConfigUdp::Run()::pCmd>:
20000000:	2000082d 	andcs	r0, r0, sp, lsr #16

20000004 <DmxConfigUdp::s_nHandle>:
20000004:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000008 <s_nDmxTransmitPeriod>:
20000008:	000061a8 	andeq	r6, r0, r8, lsr #3

2000000c <s_nDmxTransmitMabTime>:
2000000c:	0000000c 	andeq	r0, r0, ip

20000010 <s_nDmxTransmitBreakTime>:
20000010:	0000005c 	andeq	r0, r0, ip, asr r0

20000014 <s_multicast_mac>:
20000014:	005e0001 	subseq	r0, lr, r1
20000018:	00000000 	andeq	r0, r0, r0

2000001c <MDNS::s_nHandle>:
2000001c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000020 <next_block>:
20000020:	20016000 	andcs	r6, r1, r0

20000024 <s_block_bucket>:
20000024:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000034:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000044:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000054:	00000060 	andeq	r0, r0, r0, rrx
	...
20000064:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000074:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000084:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000094:	00000180 	andeq	r0, r0, r0, lsl #3
	...
200000a4:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000b4:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000c4:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000d4:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000f4 <SystemCoreClock>:
200000f4:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000f8 <DmxInput::s_nStarted>:
200000f8:	00000000 	andeq	r0, r0, r0

200000fc <guard variable for lightset::Data::Get()::instance>:
200000fc:	00000000 	andeq	r0, r0, r0

20000100 <lightset::Data::Get()::instance>:
	...

20000704 <ArtNetNode::s_pThis>:
20000704:	00000000 	andeq	r0, r0, r0

20000708 <s_ReceivingMask>:
20000708:	00000000 	andeq	r0, r0, r0

2000070c <ip>:
2000070c:	00000000 	andeq	r0, r0, r0

20000710 <ip>:
20000710:	00000000 	andeq	r0, r0, r0

20000714 <E131Bridge::s_pThis>:
20000714:	00000000 	andeq	r0, r0, r0

20000718 <s_ReceivingMask>:
20000718:	00000000 	andeq	r0, r0, r0

2000071c <ArtNetRdmController::s_rdmMessage>:
	...

2000081c <ArtNetRdmController::s_nPorts>:
2000081c:	00000000 	andeq	r0, r0, r0

20000820 <uuid_cast>:
	...

20000828 <DmxSend::s_nStarted>:
	...

20000829 <DmxConfigUdp::s_Buffer>:
	...

2000083c <s_RxBuffer>:
	...

20000a4c <s_TxBuffer>:
	...

20000c50 <sv_PortState>:
20000c50:	00000000 	andeq	r0, r0, r0

20000c54 <s_nUartsSending>:
20000c54:	00000000 	andeq	r0, r0, r0

20000c58 <sv_nRxDmxPackets>:
	...

20000c68 <Dmx::s_pThis>:
20000c68:	00000000 	andeq	r0, r0, r0

20000c6c <gv_RdmDataReceiveEnd>:
20000c6c:	00000000 	andeq	r0, r0, r0

20000c70 <s_nLastSendMicros>:
20000c70:	00000000 	andeq	r0, r0, r0

20000c74 <s_TransactionNumber>:
20000c74:	00000000 	andeq	r0, r0, r0

20000c78 <RemoteConfig::s_pUdpBuffer>:
20000c78:	00000000 	andeq	r0, r0, r0

20000c7c <RemoteConfig::s_RemoteConfigListBin>:
	...

20000ca0 <RemoteConfig::s_pThis>:
20000ca0:	00000000 	andeq	r0, r0, r0

20000ca4 <SpiFlashStore::s_nWaitMillis>:
20000ca4:	00000000 	andeq	r0, r0, r0

20000ca8 <SpiFlashStore::s_SpiFlashData>:
	...

20001ca8 <SpiFlashStore::s_nStartAddress>:
20001ca8:	00000000 	andeq	r0, r0, r0

20001cac <SpiFlashStore::s_bHaveFlashChip>:
20001cac:	00000000 	andeq	r0, r0, r0

20001cb0 <SpiFlashStore::s_nSpiFlashStoreSize>:
20001cb0:	00000000 	andeq	r0, r0, r0

20001cb4 <SpiFlashStore::s_State>:
20001cb4:	00000000 	andeq	r0, r0, r0

20001cb8 <SpiFlashStore::s_pThis>:
20001cb8:	00000000 	andeq	r0, r0, r0

20001cbc <SpiFlashStore::s_bIsNew>:
20001cbc:	00000000 	andeq	r0, r0, r0

20001cc0 <StoreArtNet::s_pThis>:
20001cc0:	00000000 	andeq	r0, r0, r0

20001cc4 <StoreDisplayUdf::s_pThis>:
20001cc4:	00000000 	andeq	r0, r0, r0

20001cc8 <StoreDmxSend::s_pThis>:
20001cc8:	00000000 	andeq	r0, r0, r0

20001ccc <StoreNetwork::s_pThis>:
20001ccc:	00000000 	andeq	r0, r0, r0

20001cd0 <StoreRDMDevice::s_pThis>:
20001cd0:	00000000 	andeq	r0, r0, r0

20001cd4 <StoreRemoteConfig::s_pThis>:
20001cd4:	00000000 	andeq	r0, r0, r0

20001cd8 <FlashRom::s_pThis>:
20001cd8:	00000000 	andeq	r0, r0, r0

20001cdc <flashrom::s_nAddress>:
20001cdc:	00000000 	andeq	r0, r0, r0

20001ce0 <flashrom::s_State>:
20001ce0:	00000000 	andeq	r0, r0, r0

20001ce4 <flashrom::s_nPage>:
20001ce4:	00000000 	andeq	r0, r0, r0

20001ce8 <flashrom::s_pData>:
20001ce8:	00000000 	andeq	r0, r0, r0

20001cec <flashrom::s_isBank0>:
20001cec:	00000000 	andeq	r0, r0, r0

20001cf0 <flashrom::s_nLength>:
20001cf0:	00000000 	andeq	r0, r0, r0

20001cf4 <g_ip_info>:
	...

20001d00 <g_mac_address>:
20001d00:	00000000 	andeq	r0, r0, r0
	...

20001d06 <s_is_dhcp>:
	...

20001d08 <s_p>:
20001d08:	00000000 	andeq	r0, r0, r0

20001d0c <s_ticker>:
20001d0c:	00000000 	andeq	r0, r0, r0

20001d10 <s_mac_address>:
	...

20001d18 <s_mac_address_arp_reply>:
	...

20001d20 <s_id>:
20001d20:	00000000 	andeq	r0, r0, r0

20001d24 <s_recv_queue>:
	...

20002894 <s_tcb>:
	...

200028d8 <s_tcp>:
	...

20002ec4 <broadcast_mask>:
20002ec4:	00000000 	andeq	r0, r0, r0

20002ec8 <gw_ip>:
20002ec8:	00000000 	andeq	r0, r0, r0

20002ecc <on_network_mask>:
20002ecc:	00000000 	andeq	r0, r0, r0

20002ed0 <s_id>:
20002ed0:	00000000 	andeq	r0, r0, r0

20002ed4 <s_ports_allowed>:
	...

20002ef4 <s_recv_queue>:
	...

20008b94 <s_send_packet>:
	...

20009180 <MDNS::s_nRemoteIp>:
20009180:	00000000 	andeq	r0, r0, r0

20009184 <MDNS::s_nRemotePort>:
20009184:	00000000 	andeq	r0, r0, r0

20009188 <MDNS::s_nMulticastIp>:
20009188:	00000000 	andeq	r0, r0, r0

2000918c <MDNS::s_AnswerLocalIp>:
	...

20009390 <MDNS::s_ServiceRecords>:
	...

200093b0 <MDNS::s_nBytesReceived>:
200093b0:	00000000 	andeq	r0, r0, r0

200093b4 <MDNS::s_ServiceRecordsData>:
	...

200095b8 <MDNS::s_pName>:
200095b8:	00000000 	andeq	r0, r0, r0

200095bc <MDNS::s_pBuffer>:
200095bc:	00000000 	andeq	r0, r0, r0

200095c0 <Network::s_pThis>:
200095c0:	00000000 	andeq	r0, r0, r0

200095c4 <NetworkParams::m_tNetworkParams>:
	...

20009624 <s_arp_announce>:
	...

20009650 <s_arp_reply>:
	...

2000967c <s_arp_request>:
	...

200096a8 <s_arp_records>:
	...

20009828 <s_entry_current>:
20009828:	00000000 	andeq	r0, r0, r0

2000982c <s_dhcp_allocated_gw>:
2000982c:	00000000 	andeq	r0, r0, r0

20009830 <s_dhcp_allocated_ip>:
20009830:	00000000 	andeq	r0, r0, r0

20009834 <s_dhcp_allocated_netmask>:
20009834:	00000000 	andeq	r0, r0, r0

20009838 <s_dhcp_message>:
	...

20009a5c <s_dhcp_server_ip>:
20009a5c:	00000000 	andeq	r0, r0, r0

20009a60 <s_groups>:
	...

20009b80 <s_id>:
20009b80:	00000000 	andeq	r0, r0, r0

20009b84 <s_joins_allowed_index>:
20009b84:	00000000 	andeq	r0, r0, r0

20009b88 <s_leave>:
	...

20009bb8 <s_multicast_mac>:
	...

20009bc0 <s_report>:
	...

20009bf0 <DisplayUdf::s_pThis>:
20009bf0:	00000000 	andeq	r0, r0, r0

20009bf4 <PropertiesConfig::s_Config>:
20009bf4:	00000000 	andeq	r0, r0, r0

20009bf8 <Display::s_pThis>:
20009bf8:	00000000 	andeq	r0, r0, r0

20009bfc <_ClearBuffer>:
	...

20009c84 <Ssd1306::s_pThis>:
20009c84:	00000000 	andeq	r0, r0, r0

20009c88 <FirmwareVersion::s_FirmwareVersion>:
	...

20009c9e <FirmwareVersion::s_Print>:
	...

20009ce0 <FirmwareVersion::s_pThis>:
20009ce0:	00000000 	andeq	r0, r0, r0

20009ce4 <LedBlink::s_pThis>:
20009ce4:	00000000 	andeq	r0, r0, r0

20009ce8 <Hardware::s_pThis>:
20009ce8:	00000000 	andeq	r0, r0, r0

20009cec <outptr>:
20009cec:	00000000 	andeq	r0, r0, r0

20009cf0 <last.0>:
	...

20009cf8 <s_micros>:
	...

20009d00 <set_timer>:
20009d00:	00000000 	andeq	r0, r0, r0

20009d04 <s_nSysTickMillis>:
20009d04:	00000000 	andeq	r0, r0, r0

20009d08 <enet_init_status>:
20009d08:	00000000 	andeq	r0, r0, r0

20009d0c <s_nAddress>:
20009d0c:	00000000 	andeq	r0, r0, r0

20009d10 <dma_current_ptp_rxdesc>:
20009d10:	00000000 	andeq	r0, r0, r0

20009d14 <dma_current_ptp_txdesc>:
20009d14:	00000000 	andeq	r0, r0, r0

20009d18 <dma_current_rxdesc>:
20009d18:	00000000 	andeq	r0, r0, r0

20009d1c <dma_current_txdesc>:
20009d1c:	00000000 	andeq	r0, r0, r0

20009d20 <enet_initpara>:
	...

20009d5c <rx_buff>:
	...

2000ccfc <rxdesc_tab>:
	...

2000cd7c <tx_buff>:
	...

2000d964 <txdesc_tab>:
	...

Disassembly of section .heap:

20016000 <heap_low>:
	...

Disassembly of section .stack:

20016800 <_sp-0x1800>:
	...
