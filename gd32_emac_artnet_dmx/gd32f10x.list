
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	08007b19 	stmdaeq	r0, {r0, r3, r4, r8, r9, fp, ip, sp, lr}
 8007008:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800700c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007010:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007014:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007018:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
	...
 800702c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007030:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800703c:	08013949 	stmdaeq	r1, {r0, r3, r6, r8, fp, ip, sp}
 8007040:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007044:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007048:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800704c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007050:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007054:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007058:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800705c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007060:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007064:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007068:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800706c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007070:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007074:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007078:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800707c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007080:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007084:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007088:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800708c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007090:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007094:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007098:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800709c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070a0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070a4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070a8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070ac:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070b0:	0800e405 	stmdaeq	r0, {r0, r2, sl, sp, lr, pc}
 80070b4:	0800e4b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, sl, sp, lr, pc}
 80070b8:	0800e51d 	stmdaeq	r0, {r0, r2, r3, r4, r8, sl, sp, lr, pc}
 80070bc:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070c0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070c4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070c8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070cc:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070d0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070d4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070d8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070dc:	0800e211 	stmdaeq	r0, {r0, r4, r9, sp, lr, pc}
 80070e0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070e4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070e8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070ec:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070f0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070f4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
	...
 8007100:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800710c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007110:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007114:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007118:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800711c:	0800e531 	stmdaeq	r0, {r0, r4, r5, r8, sl, sp, lr, pc}
 8007120:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007124:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007128:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800712c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007130:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007134:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007138:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800713c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007140:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007144:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007148:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800714c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}

Disassembly of section .text:

08007150 <net_init>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4616      	mov	r6, r2
 8007158:	9f06      	ldr	r7, [sp, #24]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <net_init+0x94>)
 800715c:	461d      	mov	r5, r3
 800715e:	1e43      	subs	r3, r0, #1
 8007160:	3005      	adds	r0, #5
 8007162:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007166:	4283      	cmp	r3, r0
 8007168:	f802 1b01 	strb.w	r1, [r2], #1
 800716c:	d1f9      	bne.n	8007162 <net_init+0x12>
 800716e:	4623      	mov	r3, r4
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <net_init+0x98>)
 8007172:	f104 010c 	add.w	r1, r4, #12
 8007176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800717a:	428b      	cmp	r3, r1
 800717c:	f802 0b01 	strb.w	r0, [r2], #1
 8007180:	d1f9      	bne.n	8007176 <net_init+0x26>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	4918      	ldr	r1, [pc, #96]	; (80071e8 <net_init+0x98>)
 8007188:	4816      	ldr	r0, [pc, #88]	; (80071e4 <net_init+0x94>)
 800718a:	f000 f9a7 	bl	80074dc <ip_init>
 800718e:	4815      	ldr	r0, [pc, #84]	; (80071e4 <net_init+0x94>)
 8007190:	f000 f83c 	bl	800720c <rfc3927_init>
 8007194:	f887 8000 	strb.w	r8, [r7]
 8007198:	782b      	ldrb	r3, [r5, #0]
 800719a:	b163      	cbz	r3, 80071b6 <net_init+0x66>
 800719c:	4632      	mov	r2, r6
 800719e:	4912      	ldr	r1, [pc, #72]	; (80071e8 <net_init+0x98>)
 80071a0:	4810      	ldr	r0, [pc, #64]	; (80071e4 <net_init+0x94>)
 80071a2:	f009 fb99 	bl	80108d8 <dhcp_client>
 80071a6:	4540      	cmp	r0, r8
 80071a8:	da05      	bge.n	80071b6 <net_init+0x66>
 80071aa:	480f      	ldr	r0, [pc, #60]	; (80071e8 <net_init+0x98>)
 80071ac:	f885 8000 	strb.w	r8, [r5]
 80071b0:	f007 fe28 	bl	800ee04 <rfc3927>
 80071b4:	7038      	strb	r0, [r7, #0]
 80071b6:	490c      	ldr	r1, [pc, #48]	; (80071e8 <net_init+0x98>)
 80071b8:	480a      	ldr	r0, [pc, #40]	; (80071e4 <net_init+0x94>)
 80071ba:	f000 f883 	bl	80072c4 <arp_init>
 80071be:	480a      	ldr	r0, [pc, #40]	; (80071e8 <net_init+0x98>)
 80071c0:	f009 fdaa 	bl	8010d18 <ip_set_ip>
 80071c4:	f000 f82e 	bl	8007224 <tcp_init>
 80071c8:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <net_init+0x98>)
 80071ca:	1e63      	subs	r3, r4, #1
 80071cc:	340b      	adds	r4, #11
 80071ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80071d2:	f803 1f01 	strb.w	r1, [r3, #1]!
 80071d6:	429c      	cmp	r4, r3
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x7e>
 80071da:	782a      	ldrb	r2, [r5, #0]
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <net_init+0x9c>)
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	200011e8 	andcs	r1, r0, r8, ror #3
 80071e8:	200011dc 	ldrdcs	r1, [r0], -ip
 80071ec:	200011ee 	andcs	r1, r0, lr, ror #3

080071f0 <net_shutdown>:
 80071f0:	b508      	push	{r3, lr}
 80071f2:	f000 f97e 	bl	80074f2 <ip_shutdown>
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <net_shutdown+0x18>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b11b      	cbz	r3, 8007204 <net_shutdown+0x14>
 80071fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007200:	f009 bc72 	b.w	8010ae8 <dhcp_client_release>
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	200011ee 	andcs	r1, r0, lr, ror #3

0800720c <rfc3927_init>:
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <rfc3927_init+0x14>)
 800720e:	1d82      	adds	r2, r0, #6
 8007210:	4290      	cmp	r0, r2
 8007212:	d100      	bne.n	8007216 <rfc3927_init+0xa>
 8007214:	4770      	bx	lr
 8007216:	f810 1b01 	ldrb.w	r1, [r0], #1
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f7      	b.n	8007210 <rfc3927_init+0x4>
 8007220:	200011f8 	strdcs	r1, [r0], -r8

08007224 <tcp_init>:
 8007224:	2206      	movs	r2, #6
 8007226:	b513      	push	{r0, r1, r4, lr}
 8007228:	4c0b      	ldr	r4, [pc, #44]	; (8007258 <tcp_init+0x34>)
 800722a:	490c      	ldr	r1, [pc, #48]	; (800725c <tcp_init+0x38>)
 800722c:	18a0      	adds	r0, r4, r2
 800722e:	f007 fe43 	bl	800eeb8 <memcpy.isra.0>
 8007232:	2308      	movs	r3, #8
 8007234:	2204      	movs	r2, #4
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <tcp_init+0x3c>)
 800723a:	eb0d 0102 	add.w	r1, sp, r2
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f104 001a 	add.w	r0, r4, #26
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	f007 fe37 	bl	800eeb8 <memcpy.isra.0>
 800724a:	2345      	movs	r3, #69	; 0x45
 800724c:	81e3      	strh	r3, [r4, #14]
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <tcp_init+0x40>)
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	b002      	add	sp, #8
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	20001dc0 	andcs	r1, r0, r0, asr #27
 800725c:	200011e8 	andcs	r1, r0, r8, ror #3
 8007260:	200011dc 	ldrdcs	r1, [r0], -ip
 8007264:	06400040 	strbeq	r0, [r0], -r0, asr #32

08007268 <udp_init>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2200      	movs	r2, #0
 800726c:	2408      	movs	r4, #8
 800726e:	460e      	mov	r6, r1
 8007270:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <udp_init+0x40>)
 8007272:	490e      	ldr	r1, [pc, #56]	; (80072ac <udp_init+0x44>)
 8007274:	3c01      	subs	r4, #1
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	805a      	strh	r2, [r3, #2]
 800727a:	f841 2b04 	str.w	r2, [r1], #4
 800727e:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8007282:	d1f7      	bne.n	8007274 <udp_init+0xc>
 8007284:	2206      	movs	r2, #6
 8007286:	4d0a      	ldr	r5, [pc, #40]	; (80072b0 <udp_init+0x48>)
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <udp_init+0x4c>)
 800728a:	4601      	mov	r1, r0
 800728c:	18a8      	adds	r0, r5, r2
 800728e:	801c      	strh	r4, [r3, #0]
 8007290:	f007 ff96 	bl	800f1c0 <memcpy.isra.0>
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <udp_init+0x50>)
 8007296:	4630      	mov	r0, r6
 8007298:	60eb      	str	r3, [r5, #12]
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <udp_init+0x54>)
 800729c:	616b      	str	r3, [r5, #20]
 800729e:	f007 ffb7 	bl	800f210 <udp_set_ip>
 80072a2:	852c      	strh	r4, [r5, #40]	; 0x28
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	bf00      	nop
 80072a8:	200023dc 	ldrdcs	r2, [r0], -ip
 80072ac:	200023bc 			; <UNDEFINED> instruction: 0x200023bc
 80072b0:	2000807c 	andcs	r8, r0, ip, ror r0
 80072b4:	200023b8 			; <UNDEFINED> instruction: 0x200023b8
 80072b8:	00450008 	subeq	r0, r5, r8
 80072bc:	11400040 	cmpne	r0, r0, asr #32

080072c0 <udp_shutdown>:
 80072c0:	4770      	bx	lr
	...

080072c4 <arp_init>:
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	f000 f876 	bl	80073bc <arp_cache_init>
 80072d0:	2206      	movs	r2, #6
 80072d2:	4621      	mov	r1, r4
 80072d4:	482e      	ldr	r0, [pc, #184]	; (8007390 <arp_init+0xcc>)
 80072d6:	682f      	ldr	r7, [r5, #0]
 80072d8:	f009 f980 	bl	80105dc <memcpy.isra.0>
 80072dc:	4b2d      	ldr	r3, [pc, #180]	; (8007394 <arp_init+0xd0>)
 80072de:	2507      	movs	r5, #7
 80072e0:	461e      	mov	r6, r3
 80072e2:	22ff      	movs	r2, #255	; 0xff
 80072e4:	3d01      	subs	r5, #1
 80072e6:	d146      	bne.n	8007376 <arp_init+0xb2>
 80072e8:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <arp_init+0xd4>)
 80072ea:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800739c <arp_init+0xd8>
 80072ee:	2206      	movs	r2, #6
 80072f0:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80072f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f8:	4621      	mov	r1, r4
 80072fa:	4829      	ldr	r0, [pc, #164]	; (80073a0 <arp_init+0xdc>)
 80072fc:	82b3      	strh	r3, [r6, #20]
 80072fe:	f009 f96d 	bl	80105dc <memcpy.isra.0>
 8007302:	2307      	movs	r3, #7
 8007304:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <arp_init+0xe0>)
 8007306:	61f7      	str	r7, [r6, #28]
 8007308:	3b01      	subs	r3, #1
 800730a:	d137      	bne.n	800737c <arp_init+0xb8>
 800730c:	2206      	movs	r2, #6
 800730e:	4621      	mov	r1, r4
 8007310:	4825      	ldr	r0, [pc, #148]	; (80073a8 <arp_init+0xe4>)
 8007312:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 8007316:	f009 f961 	bl	80105dc <memcpy.isra.0>
 800731a:	4a24      	ldr	r2, [pc, #144]	; (80073ac <arp_init+0xe8>)
 800731c:	2306      	movs	r3, #6
 800731e:	4615      	mov	r5, r2
 8007320:	21ff      	movs	r1, #255	; 0xff
 8007322:	3b01      	subs	r3, #1
 8007324:	d22d      	bcs.n	8007382 <arp_init+0xbe>
 8007326:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <arp_init+0xd4>)
 8007328:	2206      	movs	r2, #6
 800732a:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800732e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007332:	4621      	mov	r1, r4
 8007334:	481e      	ldr	r0, [pc, #120]	; (80073b0 <arp_init+0xec>)
 8007336:	82ab      	strh	r3, [r5, #20]
 8007338:	f009 f950 	bl	80105dc <memcpy.isra.0>
 800733c:	2307      	movs	r3, #7
 800733e:	2100      	movs	r1, #0
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <arp_init+0xf0>)
 8007342:	61ef      	str	r7, [r5, #28]
 8007344:	3b01      	subs	r3, #1
 8007346:	d11f      	bne.n	8007388 <arp_init+0xc4>
 8007348:	2206      	movs	r2, #6
 800734a:	4d1b      	ldr	r5, [pc, #108]	; (80073b8 <arp_init+0xf4>)
 800734c:	4621      	mov	r1, r4
 800734e:	18a8      	adds	r0, r5, r2
 8007350:	f009 f944 	bl	80105dc <memcpy.isra.0>
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <arp_init+0xd4>)
 8007356:	4621      	mov	r1, r4
 8007358:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	f105 0016 	add.w	r0, r5, #22
 8007364:	2206      	movs	r2, #6
 8007366:	82ab      	strh	r3, [r5, #20]
 8007368:	f009 f938 	bl	80105dc <memcpy.isra.0>
 800736c:	61ef      	str	r7, [r5, #28]
 800736e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007372:	f009 b93d 	b.w	80105f0 <arp_announce>
 8007376:	f803 2b01 	strb.w	r2, [r3], #1
 800737a:	e7b3      	b.n	80072e4 <arp_init+0x20>
 800737c:	f802 5b01 	strb.w	r5, [r2], #1
 8007380:	e7c2      	b.n	8007308 <arp_init+0x44>
 8007382:	f802 1b01 	strb.w	r1, [r2], #1
 8007386:	e7cc      	b.n	8007322 <arp_init+0x5e>
 8007388:	f802 1b01 	strb.w	r1, [r2], #1
 800738c:	e7da      	b.n	8007344 <arp_init+0x80>
 800738e:	bf00      	nop
 8007390:	20008ab2 			; <UNDEFINED> instruction: 0x20008ab2
 8007394:	20008aac 	andcs	r8, r0, ip, lsr #21
 8007398:	01000608 	tsteq	r0, r8, lsl #12
 800739c:	04060008 	streq	r0, [r6], #-8
 80073a0:	20008ac2 	andcs	r8, r0, r2, asr #21
 80073a4:	20008acc 	andcs	r8, r0, ip, asr #21
 80073a8:	20008b0a 	andcs	r8, r0, sl, lsl #22
 80073ac:	20008b04 	andcs	r8, r0, r4, lsl #22
 80073b0:	20008b1a 	andcs	r8, r0, sl, lsl fp
 80073b4:	20008b24 	andcs	r8, r0, r4, lsr #22
 80073b8:	20008ad8 	ldrdcs	r8, [r0], -r8	; <UNPREDICTABLE>

080073bc <arp_cache_init>:
 80073bc:	2300      	movs	r3, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <arp_cache_init+0x2c>)
 80073c2:	b510      	push	{r4, lr}
 80073c4:	8013      	strh	r3, [r2, #0]
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <arp_cache_init+0x30>)
 80073c8:	4611      	mov	r1, r2
 80073ca:	f842 0c04 	str.w	r0, [r2, #-4]
 80073ce:	1d94      	adds	r4, r2, #6
 80073d0:	42a1      	cmp	r1, r4
 80073d2:	d105      	bne.n	80073e0 <arp_cache_init+0x24>
 80073d4:	3303      	adds	r3, #3
 80073d6:	2b60      	cmp	r3, #96	; 0x60
 80073d8:	f102 020c 	add.w	r2, r2, #12
 80073dc:	d1f4      	bne.n	80073c8 <arp_cache_init+0xc>
 80073de:	bd10      	pop	{r4, pc}
 80073e0:	f801 0b01 	strb.w	r0, [r1], #1
 80073e4:	e7f4      	b.n	80073d0 <arp_cache_init+0x14>
 80073e6:	bf00      	nop
 80073e8:	20008cb0 			; <UNDEFINED> instruction: 0x20008cb0
 80073ec:	20008b34 	andcs	r8, r0, r4, lsr fp

080073f0 <igmp_init>:
 80073f0:	2200      	movs	r2, #0
 80073f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4b23      	ldr	r3, [pc, #140]	; (800748c <igmp_init+0x9c>)
 80073fe:	f103 0408 	add.w	r4, r3, #8
 8007402:	42a3      	cmp	r3, r4
 8007404:	d13e      	bne.n	8007484 <igmp_init+0x94>
 8007406:	3201      	adds	r2, #1
 8007408:	2a24      	cmp	r2, #36	; 0x24
 800740a:	d1f8      	bne.n	80073fe <igmp_init+0xe>
 800740c:	2600      	movs	r6, #0
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <igmp_init+0xa0>)
 8007410:	4c20      	ldr	r4, [pc, #128]	; (8007494 <igmp_init+0xa4>)
 8007412:	601e      	str	r6, [r3, #0]
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <igmp_init+0xa8>)
 8007416:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800741a:	801e      	strh	r6, [r3, #0]
 800741c:	f009 fbdc 	bl	8010bd8 <igmp_set_ip>
 8007420:	2201      	movs	r2, #1
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <igmp_init+0xac>)
 8007424:	4629      	mov	r1, r5
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	225e      	movs	r2, #94	; 0x5e
 800742a:	709a      	strb	r2, [r3, #2]
 800742c:	2206      	movs	r2, #6
 800742e:	18a0      	adds	r0, r4, r2
 8007430:	f009 fb88 	bl	8010b44 <memcpy.isra.0>
 8007434:	f240 4394 	movw	r3, #1172	; 0x494
 8007438:	8463      	strh	r3, [r4, #34]	; 0x22
 800743a:	2316      	movs	r3, #22
 800743c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074a0 <igmp_init+0xb0>
 8007440:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074a4 <igmp_init+0xb4>
 8007444:	84e3      	strh	r3, [r4, #38]	; 0x26
 8007446:	f8c4 9014 	str.w	r9, [r4, #20]
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <igmp_init+0xb8>)
 800744c:	f8c4 800c 	str.w	r8, [r4, #12]
 8007450:	8227      	strh	r7, [r4, #16]
 8007452:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007454:	4c15      	ldr	r4, [pc, #84]	; (80074ac <igmp_init+0xbc>)
 8007456:	2206      	movs	r2, #6
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745e:	18a0      	adds	r0, r4, r2
 8007460:	80a3      	strh	r3, [r4, #4]
 8007462:	4629      	mov	r1, r5
 8007464:	f009 fb6e 	bl	8010b44 <memcpy.isra.0>
 8007468:	23e0      	movs	r3, #224	; 0xe0
 800746a:	83e3      	strh	r3, [r4, #30]
 800746c:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <igmp_init+0xc0>)
 8007472:	f8c4 9014 	str.w	r9, [r4, #20]
 8007476:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800747a:	f8c4 800c 	str.w	r8, [r4, #12]
 800747e:	8227      	strh	r7, [r4, #16]
 8007480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007484:	f803 1b01 	strb.w	r1, [r3], #1
 8007488:	e7bb      	b.n	8007402 <igmp_init+0x12>
 800748a:	bf00      	nop
 800748c:	20008ee8 	andcs	r8, r0, r8, ror #29
 8007490:	2000900c 	andcs	r9, r0, ip
 8007494:	20009048 	andcs	r9, r0, r8, asr #32
 8007498:	20009008 	andcs	r9, r0, r8
 800749c:	20009040 	andcs	r9, r0, r0, asr #32
 80074a0:	02010040 	andeq	r0, r1, #64	; 0x40
 80074a4:	00460008 	subeq	r0, r6, r8
 80074a8:	005e0001 	subseq	r0, lr, r1
 80074ac:	20009010 	andcs	r9, r0, r0, lsl r0
 80074b0:	04940200 	ldreq	r0, [r4], #512	; 0x200

080074b4 <igmp_shutdown>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	2500      	movs	r5, #0
 80074b8:	462e      	mov	r6, r5
 80074ba:	4c07      	ldr	r4, [pc, #28]	; (80074d8 <igmp_shutdown+0x24>)
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	b120      	cbz	r0, 80074ca <igmp_shutdown+0x16>
 80074c0:	f009 fbe6 	bl	8010c90 <igmp_leave>
 80074c4:	6026      	str	r6, [r4, #0]
 80074c6:	7166      	strb	r6, [r4, #5]
 80074c8:	7126      	strb	r6, [r4, #4]
 80074ca:	3501      	adds	r5, #1
 80074cc:	2d24      	cmp	r5, #36	; 0x24
 80074ce:	f104 0408 	add.w	r4, r4, #8
 80074d2:	d1f3      	bne.n	80074bc <igmp_shutdown+0x8>
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	bf00      	nop
 80074d8:	20008ee8 	andcs	r8, r0, r8, ror #29

080074dc <ip_init>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	460d      	mov	r5, r1
 80074e2:	f7ff fec1 	bl	8007268 <udp_init>
 80074e6:	4629      	mov	r1, r5
 80074e8:	4620      	mov	r0, r4
 80074ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ee:	f7ff bf7f 	b.w	80073f0 <igmp_init>

080074f2 <ip_shutdown>:
 80074f2:	b508      	push	{r3, lr}
 80074f4:	f7ff ffde 	bl	80074b4 <igmp_shutdown>
 80074f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074fc:	f7ff bee0 	b.w	80072c0 <udp_shutdown>

08007500 <console_init>:
 8007500:	b508      	push	{r3, lr}
 8007502:	f00c f9c3 	bl	801388c <uart0_init>
 8007506:	4804      	ldr	r0, [pc, #16]	; (8007518 <console_init+0x18>)
 8007508:	f00c f9f0 	bl	80138ec <uart0_puts>
 800750c:	4803      	ldr	r0, [pc, #12]	; (800751c <console_init+0x1c>)
 800750e:	f00c f9ed 	bl	80138ec <uart0_puts>
 8007512:	2000      	movs	r0, #0
 8007514:	bd08      	pop	{r3, pc}
 8007516:	bf00      	nop
 8007518:	08015911 	stmdaeq	r1, {r0, r4, r8, fp, ip, lr}
 800751c:	08017af8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r9, fp, ip, sp, lr}

08007520 <net_handle>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4c0c      	ldr	r4, [pc, #48]	; (8007554 <net_handle+0x34>)
 8007524:	4620      	mov	r0, r4
 8007526:	f00d fb27 	bl	8014b78 <emac_eth_recv>
 800752a:	2800      	cmp	r0, #0
 800752c:	dd07      	ble.n	800753e <net_handle+0x1e>
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	8983      	ldrh	r3, [r0, #12]
 8007532:	2b08      	cmp	r3, #8
 8007534:	d107      	bne.n	8007546 <net_handle+0x26>
 8007536:	f000 fa6f 	bl	8007a18 <ip_handle>
 800753a:	f00d fb31 	bl	8014ba0 <emac_free_pkt>
 800753e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007542:	f007 bc4f 	b.w	800ede4 <net_timers_run>
 8007546:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800754a:	d1f6      	bne.n	800753a <net_handle+0x1a>
 800754c:	f000 fa08 	bl	8007960 <arp_handle>
 8007550:	e7f3      	b.n	800753a <net_handle+0x1a>
 8007552:	bf00      	nop
 8007554:	200011f0 	strdcs	r1, [r0], -r0

08007558 <tcp_handle>:
 8007558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	4605      	mov	r5, r0
 800755e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007560:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 8007564:	ba5b      	rev16	r3, r3
 8007566:	8443      	strh	r3, [r0, #34]	; 0x22
 8007568:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800756a:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 800756e:	ba5b      	rev16	r3, r3
 8007570:	8483      	strh	r3, [r0, #36]	; 0x24
 8007572:	f007 fcab 	bl	800eecc <_bswap32>
 8007576:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8007578:	4ca5      	ldr	r4, [pc, #660]	; (8007810 <tcp_handle+0x2b8>)
 800757a:	ba5b      	rev16	r3, r3
 800757c:	862b      	strh	r3, [r5, #48]	; 0x30
 800757e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8007580:	8822      	ldrh	r2, [r4, #0]
 8007582:	ba5b      	rev16	r3, r3
 8007584:	86ab      	strh	r3, [r5, #52]	; 0x34
 8007586:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8007588:	429a      	cmp	r2, r3
 800758a:	d14d      	bne.n	8007628 <tcp_handle+0xd0>
 800758c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007590:	2b01      	cmp	r3, #1
 8007592:	d00d      	beq.n	80075b0 <tcp_handle+0x58>
 8007594:	2204      	movs	r2, #4
 8007596:	4668      	mov	r0, sp
 8007598:	f105 011a 	add.w	r1, r5, #26
 800759c:	f007 fc8c 	bl	800eeb8 <memcpy.isra.0>
 80075a0:	8862      	ldrh	r2, [r4, #2]
 80075a2:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d13f      	bne.n	8007628 <tcp_handle+0xd0>
 80075a8:	6862      	ldr	r2, [r4, #4]
 80075aa:	9b00      	ldr	r3, [sp, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d13b      	bne.n	8007628 <tcp_handle+0xd0>
 80075b0:	2204      	movs	r2, #4
 80075b2:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 80075b6:	eb0d 0002 	add.w	r0, sp, r2
 80075ba:	f007 fc7d 	bl	800eeb8 <memcpy.isra.0>
 80075be:	2204      	movs	r2, #4
 80075c0:	f105 0126 	add.w	r1, r5, #38	; 0x26
 80075c4:	eb0d 0002 	add.w	r0, sp, r2
 80075c8:	9e01      	ldr	r6, [sp, #4]
 80075ca:	f007 fc75 	bl	800eeb8 <memcpy.isra.0>
 80075ce:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80075d2:	9f01      	ldr	r7, [sp, #4]
 80075d4:	2a01      	cmp	r2, #1
 80075d6:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 80075da:	d01b      	beq.n	8007614 <tcp_handle+0xbc>
 80075dc:	1ed3      	subs	r3, r2, #3
 80075de:	2b07      	cmp	r3, #7
 80075e0:	d822      	bhi.n	8007628 <tcp_handle+0xd0>
 80075e2:	fa98 f198 	rev16.w	r1, r8
 80075e6:	f64f 78ec 	movw	r8, #65516	; 0xffec
 80075ea:	ea4f 1319 	mov.w	r3, r9, lsr #4
 80075ee:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 80075f2:	4488      	add	r8, r1
 80075f4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80075f6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 80075fa:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80075fe:	fa1f f888 	uxth.w	r8, r8
 8007602:	2900      	cmp	r1, #0
 8007604:	d142      	bne.n	800768c <tcp_handle+0x134>
 8007606:	f1b8 0f00 	cmp.w	r8, #0
 800760a:	d16b      	bne.n	80076e4 <tcp_handle+0x18c>
 800760c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760e:	42bb      	cmp	r3, r7
 8007610:	d168      	bne.n	80076e4 <tcp_handle+0x18c>
 8007612:	e048      	b.n	80076a6 <tcp_handle+0x14e>
 8007614:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007618:	075a      	lsls	r2, r3, #29
 800761a:	d405      	bmi.n	8007628 <tcp_handle+0xd0>
 800761c:	06d8      	lsls	r0, r3, #27
 800761e:	d506      	bpl.n	800762e <tcp_handle+0xd6>
 8007620:	4628      	mov	r0, r5
 8007622:	497b      	ldr	r1, [pc, #492]	; (8007810 <tcp_handle+0x2b8>)
 8007624:	f007 fd1e 	bl	800f064 <_send_reset>
 8007628:	b004      	add	sp, #16
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	0799      	lsls	r1, r3, #30
 8007630:	d5fa      	bpl.n	8007628 <tcp_handle+0xd0>
 8007632:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8007636:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800763a:	4668      	mov	r0, sp
 800763c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007640:	f105 011a 	add.w	r1, r5, #26
 8007644:	2204      	movs	r2, #4
 8007646:	8063      	strh	r3, [r4, #2]
 8007648:	f007 fc36 	bl	800eeb8 <memcpy.isra.0>
 800764c:	2206      	movs	r2, #6
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	18a9      	adds	r1, r5, r2
 8007652:	4870      	ldr	r0, [pc, #448]	; (8007814 <tcp_handle+0x2bc>)
 8007654:	6063      	str	r3, [r4, #4]
 8007656:	f007 fc2f 	bl	800eeb8 <memcpy.isra.0>
 800765a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800765c:	1c7b      	adds	r3, r7, #1
 800765e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007662:	6363      	str	r3, [r4, #52]	; 0x34
 8007664:	2312      	movs	r3, #18
 8007666:	486a      	ldr	r0, [pc, #424]	; (8007810 <tcp_handle+0x2b8>)
 8007668:	a901      	add	r1, sp, #4
 800766a:	f88d 300c 	strb.w	r3, [sp, #12]
 800766e:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007672:	63e7      	str	r7, [r4, #60]	; 0x3c
 8007674:	f8c4 a018 	str.w	sl, [r4, #24]
 8007678:	f007 fc4e 	bl	800ef18 <_tcp_send_package>
 800767c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8007684:	2303      	movs	r3, #3
 8007686:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800768a:	e7cd      	b.n	8007628 <tcp_handle+0xd0>
 800768c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800768e:	eba3 0c07 	sub.w	ip, r3, r7
 8007692:	f1b8 0f00 	cmp.w	r8, #0
 8007696:	d10d      	bne.n	80076b4 <tcp_handle+0x15c>
 8007698:	f1bc 0f00 	cmp.w	ip, #0
 800769c:	dc22      	bgt.n	80076e4 <tcp_handle+0x18c>
 800769e:	1afb      	subs	r3, r7, r3
 80076a0:	1a5b      	subs	r3, r3, r1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da1e      	bge.n	80076e4 <tcp_handle+0x18c>
 80076a6:	0743      	lsls	r3, r0, #29
 80076a8:	d530      	bpl.n	800770c <tcp_handle+0x1b4>
 80076aa:	8821      	ldrh	r1, [r4, #0]
 80076ac:	4858      	ldr	r0, [pc, #352]	; (8007810 <tcp_handle+0x2b8>)
 80076ae:	f007 fbe9 	bl	800ee84 <_init_tcb>
 80076b2:	e7b9      	b.n	8007628 <tcp_handle+0xd0>
 80076b4:	f1bc 0f00 	cmp.w	ip, #0
 80076b8:	dc06      	bgt.n	80076c8 <tcp_handle+0x170>
 80076ba:	eba7 0c03 	sub.w	ip, r7, r3
 80076be:	ebac 0c01 	sub.w	ip, ip, r1
 80076c2:	f1bc 0f00 	cmp.w	ip, #0
 80076c6:	dbee      	blt.n	80076a6 <tcp_handle+0x14e>
 80076c8:	eb08 0c07 	add.w	ip, r8, r7
 80076cc:	f103 0e01 	add.w	lr, r3, #1
 80076d0:	ebae 0e0c 	sub.w	lr, lr, ip
 80076d4:	f1be 0f00 	cmp.w	lr, #0
 80076d8:	dc04      	bgt.n	80076e4 <tcp_handle+0x18c>
 80076da:	43db      	mvns	r3, r3
 80076dc:	1a5b      	subs	r3, r3, r1
 80076de:	eb13 0f0c 	cmn.w	r3, ip
 80076e2:	d4e0      	bmi.n	80076a6 <tcp_handle+0x14e>
 80076e4:	0742      	lsls	r2, r0, #29
 80076e6:	d505      	bpl.n	80076f4 <tcp_handle+0x19c>
 80076e8:	8821      	ldrh	r1, [r4, #0]
 80076ea:	4849      	ldr	r0, [pc, #292]	; (8007810 <tcp_handle+0x2b8>)
 80076ec:	f007 fbca 	bl	800ee84 <_init_tcb>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e7c8      	b.n	8007686 <tcp_handle+0x12e>
 80076f4:	6963      	ldr	r3, [r4, #20]
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	2310      	movs	r3, #16
 80076fe:	4844      	ldr	r0, [pc, #272]	; (8007810 <tcp_handle+0x2b8>)
 8007700:	a901      	add	r1, sp, #4
 8007702:	f88d 300c 	strb.w	r3, [sp, #12]
 8007706:	f007 fc07 	bl	800ef18 <_tcp_send_package>
 800770a:	e78d      	b.n	8007628 <tcp_handle+0xd0>
 800770c:	0781      	lsls	r1, r0, #30
 800770e:	d505      	bpl.n	800771c <tcp_handle+0x1c4>
 8007710:	2a03      	cmp	r2, #3
 8007712:	d0ed      	beq.n	80076f0 <tcp_handle+0x198>
 8007714:	4628      	mov	r0, r5
 8007716:	493e      	ldr	r1, [pc, #248]	; (8007810 <tcp_handle+0x2b8>)
 8007718:	f007 fca4 	bl	800f064 <_send_reset>
 800771c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007720:	06da      	lsls	r2, r3, #27
 8007722:	d581      	bpl.n	8007628 <tcp_handle+0xd0>
 8007724:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007728:	3b03      	subs	r3, #3
 800772a:	2b07      	cmp	r3, #7
 800772c:	d818      	bhi.n	8007760 <tcp_handle+0x208>
 800772e:	e8df f003 	tbb	[pc, r3]
 8007732:	75757504 	ldrbvc	r7, [r5, #-1284]!	; 0xfffffafc
 8007736:	a59c7575 	ldrge	r7, [ip, #1397]	; 0x575
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	1b9b      	subs	r3, r3, r6
 800773e:	2b00      	cmp	r3, #0
 8007740:	dc0a      	bgt.n	8007758 <tcp_handle+0x200>
 8007742:	6963      	ldr	r3, [r4, #20]
 8007744:	1af3      	subs	r3, r6, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	dc06      	bgt.n	8007758 <tcp_handle+0x200>
 800774a:	2304      	movs	r3, #4
 800774c:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007750:	f8c4 a018 	str.w	sl, [r4, #24]
 8007754:	6126      	str	r6, [r4, #16]
 8007756:	e796      	b.n	8007686 <tcp_handle+0x12e>
 8007758:	4628      	mov	r0, r5
 800775a:	492d      	ldr	r1, [pc, #180]	; (8007810 <tcp_handle+0x2b8>)
 800775c:	f007 fc82 	bl	800f064 <_send_reset>
 8007760:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007764:	3b04      	subs	r3, #4
 8007766:	2b02      	cmp	r3, #2
 8007768:	d830      	bhi.n	80077cc <tcp_handle+0x274>
 800776a:	f1b8 0f00 	cmp.w	r8, #0
 800776e:	d02d      	beq.n	80077cc <tcp_handle+0x274>
 8007770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007772:	42bb      	cmp	r3, r7
 8007774:	f040 8091 	bne.w	800789a <tcp_handle+0x342>
 8007778:	f240 53b6 	movw	r3, #1462	; 0x5b6
 800777c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007818 <tcp_handle+0x2c0>
 8007780:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8007784:	f8ba 7000 	ldrh.w	r7, [sl]
 8007788:	4642      	mov	r2, r8
 800778a:	435f      	muls	r7, r3
 800778c:	1d38      	adds	r0, r7, #4
 800778e:	4449      	add	r1, r9
 8007790:	4450      	add	r0, sl
 8007792:	f007 fb91 	bl	800eeb8 <memcpy.isra.0>
 8007796:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8007798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800779a:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800779e:	8722      	strh	r2, [r4, #56]	; 0x38
 80077a0:	6962      	ldr	r2, [r4, #20]
 80077a2:	4443      	add	r3, r8
 80077a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077a8:	6363      	str	r3, [r4, #52]	; 0x34
 80077aa:	2310      	movs	r3, #16
 80077ac:	4457      	add	r7, sl
 80077ae:	4818      	ldr	r0, [pc, #96]	; (8007810 <tcp_handle+0x2b8>)
 80077b0:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 80077b4:	a901      	add	r1, sp, #4
 80077b6:	f88d 300c 	strb.w	r3, [sp, #12]
 80077ba:	f007 fbad 	bl	800ef18 <_tcp_send_package>
 80077be:	f8ba 3000 	ldrh.w	r3, [sl]
 80077c2:	3301      	adds	r3, #1
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	f8aa 3000 	strh.w	r3, [sl]
 80077cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	f67f af29 	bls.w	8007628 <tcp_handle+0xd0>
 80077d6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80077da:	07db      	lsls	r3, r3, #31
 80077dc:	f57f af24 	bpl.w	8007628 <tcp_handle+0xd0>
 80077e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077e2:	6962      	ldr	r2, [r4, #20]
 80077e4:	3301      	adds	r3, #1
 80077e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077ea:	6363      	str	r3, [r4, #52]	; 0x34
 80077ec:	2310      	movs	r3, #16
 80077ee:	4808      	ldr	r0, [pc, #32]	; (8007810 <tcp_handle+0x2b8>)
 80077f0:	a901      	add	r1, sp, #4
 80077f2:	f88d 300c 	strb.w	r3, [sp, #12]
 80077f6:	f007 fb8f 	bl	800ef18 <_tcp_send_package>
 80077fa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d053      	beq.n	80078aa <tcp_handle+0x352>
 8007802:	d84d      	bhi.n	80078a0 <tcp_handle+0x348>
 8007804:	3b03      	subs	r3, #3
 8007806:	2b01      	cmp	r3, #1
 8007808:	f63f af0e 	bhi.w	8007628 <tcp_handle+0xd0>
 800780c:	2307      	movs	r3, #7
 800780e:	e73a      	b.n	8007686 <tcp_handle+0x12e>
 8007810:	20001d7c 	andcs	r1, r0, ip, ror sp
 8007814:	20001d84 	andcs	r1, r0, r4, lsl #27
 8007818:	2000120c 	andcs	r1, r0, ip, lsl #4
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	1b99      	subs	r1, r3, r6
 8007820:	d513      	bpl.n	800784a <tcp_handle+0x2f2>
 8007822:	6962      	ldr	r2, [r4, #20]
 8007824:	1ab2      	subs	r2, r6, r2
 8007826:	2a00      	cmp	r2, #0
 8007828:	dc0f      	bgt.n	800784a <tcp_handle+0x2f2>
 800782a:	6126      	str	r6, [r4, #16]
 800782c:	6a23      	ldr	r3, [r4, #32]
 800782e:	1bda      	subs	r2, r3, r7
 8007830:	2a00      	cmp	r2, #0
 8007832:	db05      	blt.n	8007840 <tcp_handle+0x2e8>
 8007834:	42bb      	cmp	r3, r7
 8007836:	d193      	bne.n	8007760 <tcp_handle+0x208>
 8007838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800783a:	1b9b      	subs	r3, r3, r6
 800783c:	2b00      	cmp	r3, #0
 800783e:	dc8f      	bgt.n	8007760 <tcp_handle+0x208>
 8007840:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007844:	f8c4 a018 	str.w	sl, [r4, #24]
 8007848:	e78a      	b.n	8007760 <tcp_handle+0x208>
 800784a:	1af3      	subs	r3, r6, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	dc06      	bgt.n	800785e <tcp_handle+0x306>
 8007850:	2900      	cmp	r1, #0
 8007852:	dc85      	bgt.n	8007760 <tcp_handle+0x208>
 8007854:	6963      	ldr	r3, [r4, #20]
 8007856:	1af3      	subs	r3, r6, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc81      	bgt.n	8007760 <tcp_handle+0x208>
 800785c:	e7e6      	b.n	800782c <tcp_handle+0x2d4>
 800785e:	6963      	ldr	r3, [r4, #20]
 8007860:	1b9a      	subs	r2, r3, r6
 8007862:	2a00      	cmp	r2, #0
 8007864:	f6bf af7c 	bge.w	8007760 <tcp_handle+0x208>
 8007868:	e745      	b.n	80076f6 <tcp_handle+0x19e>
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	42b3      	cmp	r3, r6
 800786e:	f47f af77 	bne.w	8007760 <tcp_handle+0x208>
 8007872:	8821      	ldrh	r1, [r4, #0]
 8007874:	480f      	ldr	r0, [pc, #60]	; (80078b4 <tcp_handle+0x35c>)
 8007876:	f007 fb05 	bl	800ee84 <_init_tcb>
 800787a:	e771      	b.n	8007760 <tcp_handle+0x208>
 800787c:	6963      	ldr	r3, [r4, #20]
 800787e:	42b3      	cmp	r3, r6
 8007880:	f47f af6e 	bne.w	8007760 <tcp_handle+0x208>
 8007884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007886:	480b      	ldr	r0, [pc, #44]	; (80078b4 <tcp_handle+0x35c>)
 8007888:	9302      	str	r3, [sp, #8]
 800788a:	2310      	movs	r3, #16
 800788c:	a901      	add	r1, sp, #4
 800788e:	9601      	str	r6, [sp, #4]
 8007890:	f88d 300c 	strb.w	r3, [sp, #12]
 8007894:	f007 fb40 	bl	800ef18 <_tcp_send_package>
 8007898:	e762      	b.n	8007760 <tcp_handle+0x208>
 800789a:	6962      	ldr	r2, [r4, #20]
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	e72c      	b.n	80076fa <tcp_handle+0x1a2>
 80078a0:	2b06      	cmp	r3, #6
 80078a2:	f47f aec1 	bne.w	8007628 <tcp_handle+0xd0>
 80078a6:	230a      	movs	r3, #10
 80078a8:	e6ed      	b.n	8007686 <tcp_handle+0x12e>
 80078aa:	6963      	ldr	r3, [r4, #20]
 80078ac:	42b3      	cmp	r3, r6
 80078ae:	d0fa      	beq.n	80078a6 <tcp_handle+0x34e>
 80078b0:	2308      	movs	r3, #8
 80078b2:	e6e8      	b.n	8007686 <tcp_handle+0x12e>
 80078b4:	20001d7c 	andcs	r1, r0, ip, ror sp

080078b8 <udp_handle>:
 80078b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078bc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80078be:	4607      	mov	r7, r0
 80078c0:	ba5b      	rev16	r3, r3
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 80078c8:	2a01      	cmp	r2, #1
 80078ca:	d904      	bls.n	80078d6 <udp_handle+0x1e>
 80078cc:	2b7b      	cmp	r3, #123	; 0x7b
 80078ce:	d002      	beq.n	80078d6 <udp_handle+0x1e>
 80078d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d4:	d308      	bcc.n	80078e8 <udp_handle+0x30>
 80078d6:	2400      	movs	r4, #0
 80078d8:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <udp_handle+0xa0>)
 80078da:	f852 1b04 	ldr.w	r1, [r2], #4
 80078de:	4299      	cmp	r1, r3
 80078e0:	d005      	beq.n	80078ee <udp_handle+0x36>
 80078e2:	3401      	adds	r4, #1
 80078e4:	2c08      	cmp	r4, #8
 80078e6:	d1f8      	bne.n	80078da <udp_handle+0x22>
 80078e8:	b002      	add	sp, #8
 80078ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ee:	f640 3394 	movw	r3, #2964	; 0xb94
 80078f2:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 80078f4:	435c      	muls	r4, r3
 80078f6:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80078fa:	ba76      	rev16	r6, r6
 80078fc:	3e08      	subs	r6, #8
 80078fe:	b2b6      	uxth	r6, r6
 8007900:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8007904:	bf28      	it	cs
 8007906:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 800790a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800795c <udp_handle+0xa4>
 800790e:	1d20      	adds	r0, r4, #4
 8007910:	f838 5004 	ldrh.w	r5, [r8, r4]
 8007914:	4632      	mov	r2, r6
 8007916:	435d      	muls	r5, r3
 8007918:	4428      	add	r0, r5
 800791a:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800791e:	4440      	add	r0, r8
 8007920:	f007 fc4e 	bl	800f1c0 <memcpy.isra.0>
 8007924:	2204      	movs	r2, #4
 8007926:	f107 011a 	add.w	r1, r7, #26
 800792a:	eb0d 0002 	add.w	r0, sp, r2
 800792e:	f007 fc47 	bl	800f1c0 <memcpy.isra.0>
 8007932:	9a01      	ldr	r2, [sp, #4]
 8007934:	192b      	adds	r3, r5, r4
 8007936:	4443      	add	r3, r8
 8007938:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 800793c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800793e:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 8007942:	ba52      	rev16	r2, r2
 8007944:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8007948:	f838 3004 	ldrh.w	r3, [r8, r4]
 800794c:	3301      	adds	r3, #1
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	f828 3004 	strh.w	r3, [r8, r4]
 8007956:	e7c7      	b.n	80078e8 <udp_handle+0x30>
 8007958:	200023bc 			; <UNDEFINED> instruction: 0x200023bc
 800795c:	200023dc 	ldrdcs	r2, [r0], -ip

08007960 <arp_handle>:
 8007960:	8a83      	ldrh	r3, [r0, #20]
 8007962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007966:	d003      	beq.n	8007970 <arp_handle+0x10>
 8007968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796c:	d002      	beq.n	8007974 <arp_handle+0x14>
 800796e:	4770      	bx	lr
 8007970:	f008 be48 	b.w	8010604 <arp_handle_request>
 8007974:	f008 be6e 	b.w	8010654 <arp_handle_reply>

08007978 <igmp_handle>:
 8007978:	7b83      	ldrb	r3, [r0, #14]
 800797a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800797e:	2b45      	cmp	r3, #69	; 0x45
 8007980:	d116      	bne.n	80079b0 <igmp_handle+0x38>
 8007982:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007986:	2b11      	cmp	r3, #17
 8007988:	d112      	bne.n	80079b0 <igmp_handle+0x38>
 800798a:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <igmp_handle+0x94>)
 800798c:	f100 051d 	add.w	r5, r0, #29
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	466a      	mov	r2, sp
 8007994:	462b      	mov	r3, r5
 8007996:	f100 0621 	add.w	r6, r0, #33	; 0x21
 800799a:	42b3      	cmp	r3, r6
 800799c:	d10b      	bne.n	80079b6 <igmp_handle+0x3e>
 800799e:	2401      	movs	r4, #1
 80079a0:	2100      	movs	r1, #0
 80079a2:	f04f 0c01 	mov.w	ip, #1
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <igmp_handle+0x98>)
 80079a8:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <igmp_handle+0x9c>)
 80079aa:	681f      	ldr	r7, [r3, #0]
 80079ac:	428f      	cmp	r7, r1
 80079ae:	d10a      	bne.n	80079c6 <igmp_handle+0x4e>
 80079b0:	b003      	add	sp, #12
 80079b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079b6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80079ba:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80079be:	428c      	cmp	r4, r1
 80079c0:	d0eb      	beq.n	800799a <igmp_handle+0x22>
 80079c2:	2400      	movs	r4, #0
 80079c4:	e7ec      	b.n	80079a0 <igmp_handle+0x28>
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	b924      	cbnz	r4, 80079d6 <igmp_handle+0x5e>
 80079cc:	462b      	mov	r3, r5
 80079ce:	f10d 0e04 	add.w	lr, sp, #4
 80079d2:	42b3      	cmp	r3, r6
 80079d4:	d10e      	bne.n	80079f4 <igmp_handle+0x7c>
 80079d6:	f892 e005 	ldrb.w	lr, [r2, #5]
 80079da:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80079de:	f1be 0f01 	cmp.w	lr, #1
 80079e2:	d110      	bne.n	8007a06 <igmp_handle+0x8e>
 80079e4:	f892 e004 	ldrb.w	lr, [r2, #4]
 80079e8:	459e      	cmp	lr, r3
 80079ea:	d909      	bls.n	8007a00 <igmp_handle+0x88>
 80079ec:	085b      	lsrs	r3, r3, #1
 80079ee:	3301      	adds	r3, #1
 80079f0:	7113      	strb	r3, [r2, #4]
 80079f2:	e005      	b.n	8007a00 <igmp_handle+0x88>
 80079f4:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80079f8:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 80079fc:	45c1      	cmp	r9, r8
 80079fe:	d0e8      	beq.n	80079d2 <igmp_handle+0x5a>
 8007a00:	3101      	adds	r1, #1
 8007a02:	3208      	adds	r2, #8
 8007a04:	e7d2      	b.n	80079ac <igmp_handle+0x34>
 8007a06:	f882 c005 	strb.w	ip, [r2, #5]
 8007a0a:	e7ef      	b.n	80079ec <igmp_handle+0x74>
 8007a0c:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a10:	2000900c 	andcs	r9, r0, ip
 8007a14:	20008ee8 	andcs	r8, r0, r8, ror #29

08007a18 <ip_handle>:
 8007a18:	7b82      	ldrb	r2, [r0, #14]
 8007a1a:	7dc3      	ldrb	r3, [r0, #23]
 8007a1c:	2a45      	cmp	r2, #69	; 0x45
 8007a1e:	d003      	beq.n	8007a28 <ip_handle+0x10>
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d111      	bne.n	8007a48 <ip_handle+0x30>
 8007a24:	f7ff bfa8 	b.w	8007978 <igmp_handle>
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	d00b      	beq.n	8007a44 <ip_handle+0x2c>
 8007a2c:	d804      	bhi.n	8007a38 <ip_handle+0x20>
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d006      	beq.n	8007a40 <ip_handle+0x28>
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d0f6      	beq.n	8007a24 <ip_handle+0xc>
 8007a36:	4770      	bx	lr
 8007a38:	2b11      	cmp	r3, #17
 8007a3a:	d105      	bne.n	8007a48 <ip_handle+0x30>
 8007a3c:	f7ff bf3c 	b.w	80078b8 <udp_handle>
 8007a40:	f000 b804 	b.w	8007a4c <icmp_handle>
 8007a44:	f7ff bd88 	b.w	8007558 <tcp_handle>
 8007a48:	4770      	bx	lr
	...

08007a4c <icmp_handle>:
 8007a4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a4e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007a52:	4604      	mov	r4, r0
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d13e      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a58:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	d13a      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a60:	1d86      	adds	r6, r0, #6
 8007a62:	4631      	mov	r1, r6
 8007a64:	2206      	movs	r2, #6
 8007a66:	f009 f98a 	bl	8010d7e <memcpy.isra.0>
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	2206      	movs	r2, #6
 8007a6e:	491b      	ldr	r1, [pc, #108]	; (8007adc <icmp_handle+0x90>)
 8007a70:	f009 f985 	bl	8010d7e <memcpy.isra.0>
 8007a74:	8a63      	ldrh	r3, [r4, #18]
 8007a76:	f104 061a 	add.w	r6, r4, #26
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	2204      	movs	r2, #4
 8007a80:	8263      	strh	r3, [r4, #18]
 8007a82:	f104 001e 	add.w	r0, r4, #30
 8007a86:	f009 f97a 	bl	8010d7e <memcpy.isra.0>
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <icmp_handle+0x94>)
 8007a8e:	eb0d 0102 	add.w	r1, sp, r2
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4630      	mov	r0, r6
 8007a96:	f104 060e 	add.w	r6, r4, #14
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	f009 f96f 	bl	8010d7e <memcpy.isra.0>
 8007aa0:	2114      	movs	r1, #20
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	7625      	strb	r5, [r4, #24]
 8007aa6:	7665      	strb	r5, [r4, #25]
 8007aa8:	f009 f93f 	bl	8010d2a <net_chksum>
 8007aac:	8a21      	ldrh	r1, [r4, #16]
 8007aae:	8320      	strh	r0, [r4, #24]
 8007ab0:	ba49      	rev16	r1, r1
 8007ab2:	b289      	uxth	r1, r1
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007aba:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007abe:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007ac2:	f009 f932 	bl	8010d2a <net_chksum>
 8007ac6:	8a21      	ldrh	r1, [r4, #16]
 8007ac8:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007aca:	ba49      	rev16	r1, r1
 8007acc:	b289      	uxth	r1, r1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	310e      	adds	r1, #14
 8007ad2:	f00d f869 	bl	8014ba8 <emac_eth_send>
 8007ad6:	b002      	add	sp, #8
 8007ad8:	bd70      	pop	{r4, r5, r6, pc}
 8007ada:	bf00      	nop
 8007adc:	200011e8 	andcs	r1, r0, r8, ror #3
 8007ae0:	200011dc 	ldrdcs	r1, [r0], -ip

08007ae4 <__aeabi_uldivmod>:
 8007ae4:	b953      	cbnz	r3, 8007afc <__aeabi_uldivmod+0x18>
 8007ae6:	b94a      	cbnz	r2, 8007afc <__aeabi_uldivmod+0x18>
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	bf08      	it	eq
 8007aec:	2800      	cmpeq	r0, #0
 8007aee:	bf1c      	itt	ne
 8007af0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007af4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007af8:	f000 b80c 	b.w	8007b14 <__aeabi_idiv0>
 8007afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8007b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007b04:	f00d fd62 	bl	80155cc <__udivmoddi4>
 8007b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b10:	b004      	add	sp, #16
 8007b12:	4770      	bx	lr

08007b14 <__aeabi_idiv0>:
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop

08007b18 <Reset_Handler>:
 8007b18:	480c      	ldr	r0, [pc, #48]	; (8007b4c <Zerobss+0x10>)
 8007b1a:	4685      	mov	sp, r0
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	e003      	b.n	8007b28 <DataInit>

08007b20 <CopyData>:
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <Zerobss+0x14>)
 8007b22:	585b      	ldr	r3, [r3, r1]
 8007b24:	5043      	str	r3, [r0, r1]
 8007b26:	3104      	adds	r1, #4

08007b28 <DataInit>:
 8007b28:	480a      	ldr	r0, [pc, #40]	; (8007b54 <Zerobss+0x18>)
 8007b2a:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <Zerobss+0x1c>)
 8007b2c:	1842      	adds	r2, r0, r1
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d3f6      	bcc.n	8007b20 <CopyData>
 8007b32:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <Zerobss+0x20>)
 8007b34:	e002      	b.n	8007b3c <Zerobss>

08007b36 <FillZerobss>:
 8007b36:	2300      	movs	r3, #0
 8007b38:	f842 3b04 	str.w	r3, [r2], #4

08007b3c <Zerobss>:
 8007b3c:	4b08      	ldr	r3, [pc, #32]	; (8007b60 <Zerobss+0x24>)
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d3f9      	bcc.n	8007b36 <FillZerobss>
 8007b42:	f00b ff09 	bl	8013958 <SystemInit>
 8007b46:	f000 f931 	bl	8007dac <main>
 8007b4a:	4770      	bx	lr
 8007b4c:	20018000 	andcs	r8, r1, r0
 8007b50:	08017b78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, fp, ip, sp, lr}
 8007b54:	20000000 	andcs	r0, r0, r0
 8007b58:	2000008c 	andcs	r0, r0, ip, lsl #1
 8007b5c:	20000090 	mulcs	r0, r0, r0
 8007b60:	20013298 	mulcs	r1, r8, r2

08007b64 <ADC0_1_IRQHandler>:
 8007b64:	e7fe      	b.n	8007b64 <ADC0_1_IRQHandler>

08007b66 <memcmp>:
 8007b66:	b510      	push	{r4, lr}
 8007b68:	3901      	subs	r1, #1
 8007b6a:	4402      	add	r2, r0
 8007b6c:	4290      	cmp	r0, r2
 8007b6e:	d101      	bne.n	8007b74 <memcmp+0xe>
 8007b70:	2000      	movs	r0, #0
 8007b72:	e005      	b.n	8007b80 <memcmp+0x1a>
 8007b74:	7803      	ldrb	r3, [r0, #0]
 8007b76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b7a:	42a3      	cmp	r3, r4
 8007b7c:	d001      	beq.n	8007b82 <memcmp+0x1c>
 8007b7e:	1b18      	subs	r0, r3, r4
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	3001      	adds	r0, #1
 8007b84:	e7f2      	b.n	8007b6c <memcmp+0x6>

08007b86 <DisplayHandler::~DisplayHandler()>:
 8007b86:	4770      	bx	lr

08007b88 <dmxconfigudp::atoi(char const*, unsigned int)>:
 8007b88:	4603      	mov	r3, r0
 8007b8a:	b530      	push	{r4, r5, lr}
 8007b8c:	4401      	add	r1, r0
 8007b8e:	250a      	movs	r5, #10
 8007b90:	2000      	movs	r0, #0
 8007b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b96:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8007b9a:	2c09      	cmp	r4, #9
 8007b9c:	d805      	bhi.n	8007baa <dmxconfigudp::atoi(char const*, unsigned int)+0x22>
 8007b9e:	fb05 2000 	mla	r0, r5, r0, r2
 8007ba2:	4299      	cmp	r1, r3
 8007ba4:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
 8007ba8:	d1f3      	bne.n	8007b92 <dmxconfigudp::atoi(char const*, unsigned int)+0xa>
 8007baa:	bd30      	pop	{r4, r5, pc}

08007bac <DisplayHandler::~DisplayHandler()>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	4604      	mov	r4, r0
 8007bb0:	f00b fa5e 	bl	8013070 <operator delete(void*)>
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	bd10      	pop	{r4, pc}

08007bb8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8007bb8:	b110      	cbz	r0, 8007bc0 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 8007bba:	6803      	ldr	r3, [r0, #0]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	4718      	bx	r3
 8007bc0:	4770      	bx	lr

08007bc2 <Display::PutChar(int) [clone .isra.0]>:
 8007bc2:	b110      	cbz	r0, 8007bca <Display::PutChar(int) [clone .isra.0]+0x8>
 8007bc4:	6803      	ldr	r3, [r0, #0]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	4718      	bx	r3
 8007bca:	4770      	bx	lr

08007bcc <DisplayHandler::Print(unsigned int)>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	7903      	ldrb	r3, [r0, #4]
 8007bd0:	b1f3      	cbz	r3, 8007c10 <DisplayHandler::Print(unsigned int)+0x44>
 8007bd2:	2904      	cmp	r1, #4
 8007bd4:	bf98      	it	ls
 8007bd6:	4b0f      	ldrls	r3, [pc, #60]	; (8007c14 <DisplayHandler::Print(unsigned int)+0x48>)
 8007bd8:	4d0f      	ldr	r5, [pc, #60]	; (8007c18 <DisplayHandler::Print(unsigned int)+0x4c>)
 8007bda:	bf98      	it	ls
 8007bdc:	5c5c      	ldrbls	r4, [r3, r1]
 8007bde:	682b      	ldr	r3, [r5, #0]
 8007be0:	bf88      	it	hi
 8007be2:	2455      	movhi	r4, #85	; 0x55
 8007be4:	6998      	ldr	r0, [r3, #24]
 8007be6:	b178      	cbz	r0, 8007c08 <DisplayHandler::Print(unsigned int)+0x3c>
 8007be8:	7901      	ldrb	r1, [r0, #4]
 8007bea:	3901      	subs	r1, #1
 8007bec:	b2c9      	uxtb	r1, r1
 8007bee:	b168      	cbz	r0, 8007c0c <DisplayHandler::Print(unsigned int)+0x40>
 8007bf0:	7942      	ldrb	r2, [r0, #5]
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	f7ff ffdf 	bl	8007bb8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8007bfa:	682b      	ldr	r3, [r5, #0]
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	6998      	ldr	r0, [r3, #24]
 8007c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c04:	f7ff bfdd 	b.w	8007bc2 <Display::PutChar(int) [clone .isra.0]>
 8007c08:	4601      	mov	r1, r0
 8007c0a:	e7ee      	b.n	8007bea <DisplayHandler::Print(unsigned int)+0x1e>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	e7f0      	b.n	8007bf2 <DisplayHandler::Print(unsigned int)+0x26>
 8007c10:	bd38      	pop	{r3, r4, r5, pc}
 8007c12:	bf00      	nop
 8007c14:	08015980 	stmdaeq	r1, {r7, r8, fp, ip, lr}
 8007c18:	2000a0d8 	ldrdcs	sl, [r0], -r8

08007c1c <Display::TextStatus(char const*)>:
 8007c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c20:	4604      	mov	r4, r0
 8007c22:	6980      	ldr	r0, [r0, #24]
 8007c24:	460d      	mov	r5, r1
 8007c26:	b360      	cbz	r0, 8007c82 <Display::TextStatus(char const*)+0x66>
 8007c28:	7947      	ldrb	r7, [r0, #5]
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	1e7e      	subs	r6, r7, #1
 8007c2e:	b2f6      	uxtb	r6, r6
 8007c30:	4632      	mov	r2, r6
 8007c32:	f890 9004 	ldrb.w	r9, [r0, #4]
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	f7ff ffbd 	bl	8007bb8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8007c3e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007c42:	45c1      	cmp	r9, r8
 8007c44:	69a0      	ldr	r0, [r4, #24]
 8007c46:	d816      	bhi.n	8007c76 <Display::TextStatus(char const*)+0x5a>
 8007c48:	4632      	mov	r2, r6
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	f7ff ffb4 	bl	8007bb8 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8007c50:	69a0      	ldr	r0, [r4, #24]
 8007c52:	b1b0      	cbz	r0, 8007c82 <Display::TextStatus(char const*)+0x66>
 8007c54:	2300      	movs	r3, #0
 8007c56:	7901      	ldrb	r1, [r0, #4]
 8007c58:	5cea      	ldrb	r2, [r5, r3]
 8007c5a:	b11a      	cbz	r2, 8007c64 <Display::TextStatus(char const*)+0x48>
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	4299      	cmp	r1, r3
 8007c60:	4613      	mov	r3, r2
 8007c62:	dcf9      	bgt.n	8007c58 <Display::TextStatus(char const*)+0x3c>
 8007c64:	6802      	ldr	r2, [r0, #0]
 8007c66:	4639      	mov	r1, r7
 8007c68:	69d4      	ldr	r4, [r2, #28]
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	46a4      	mov	ip, r4
 8007c70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c74:	4760      	bx	ip
 8007c76:	2120      	movs	r1, #32
 8007c78:	f7ff ffa3 	bl	8007bc2 <Display::PutChar(int) [clone .isra.0]>
 8007c7c:	f108 0801 	add.w	r8, r8, #1
 8007c80:	e7df      	b.n	8007c42 <Display::TextStatus(char const*)+0x26>
 8007c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007c86 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8007c86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c88:	4605      	mov	r5, r0
 8007c8a:	461e      	mov	r6, r3
 8007c8c:	460f      	mov	r7, r1
 8007c8e:	4614      	mov	r4, r2
 8007c90:	f7ff ffc4 	bl	8007c1c <Display::TextStatus(char const*)>
 8007c94:	7c6b      	ldrb	r3, [r5, #17]
 8007c96:	b19b      	cbz	r3, 8007cc0 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 8007c98:	43e2      	mvns	r2, r4
 8007c9a:	2312      	movs	r3, #18
 8007c9c:	7a28      	ldrb	r0, [r5, #8]
 8007c9e:	f88d 3004 	strb.w	r3, [sp, #4]
 8007ca2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8007ca6:	f88d 3005 	strb.w	r3, [sp, #5]
 8007caa:	f88d 2006 	strb.w	r2, [sp, #6]
 8007cae:	f00d f813 	bl	8014cd8 <gd32_i2c_set_address>
 8007cb2:	68e8      	ldr	r0, [r5, #12]
 8007cb4:	f00d f808 	bl	8014cc8 <gd32_i2c_set_baudrate>
 8007cb8:	2103      	movs	r1, #3
 8007cba:	a801      	add	r0, sp, #4
 8007cbc:	f00d f812 	bl	8014ce4 <gd32_i2c_write>
 8007cc0:	1c73      	adds	r3, r6, #1
 8007cc2:	d006      	beq.n	8007cd2 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	b003      	add	sp, #12
 8007cca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007cce:	f00b b871 	b.w	8012db4 <console_status>
 8007cd2:	b003      	add	sp, #12
 8007cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007cd8 <Display::SetSleep(bool)>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4604      	mov	r4, r0
 8007cdc:	6980      	ldr	r0, [r0, #24]
 8007cde:	460d      	mov	r5, r1
 8007ce0:	b138      	cbz	r0, 8007cf2 <Display::SetSleep(bool)+0x1a>
 8007ce2:	6803      	ldr	r3, [r0, #0]
 8007ce4:	7421      	strb	r1, [r4, #16]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	4798      	blx	r3
 8007cea:	b915      	cbnz	r5, 8007cf2 <Display::SetSleep(bool)+0x1a>
 8007cec:	4b01      	ldr	r3, [pc, #4]	; (8007cf4 <Display::SetSleep(bool)+0x1c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6063      	str	r3, [r4, #4]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	2000a1e4 	andcs	sl, r0, r4, ror #3

08007cf8 <display::timeout::gpio_init()>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	f240 6003 	movw	r0, #1539	; 0x603
 8007cfe:	f00c fc23 	bl	8014548 <rcu_periph_clock_enable>
 8007d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	2148      	movs	r1, #72	; 0x48
 8007d0e:	4801      	ldr	r0, [pc, #4]	; (8007d14 <display::timeout::gpio_init()+0x1c>)
 8007d10:	f00c bb82 	b.w	8014418 <gpio_init>
 8007d14:	40010c00 	andmi	r0, r1, r0, lsl #24

08007d18 <display::timeout::gpio_renew()>:
 8007d18:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <display::timeout::gpio_renew()+0x10>)
 8007d1a:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 8007d1e:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8007d22:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8007d26:	4770      	bx	lr
 8007d28:	40010000 	andmi	r0, r1, r0

08007d2c <RDMDevice::Init()>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	2201      	movs	r2, #1
 8007d30:	4603      	mov	r3, r0
 8007d32:	f803 2b52 	strb.w	r2, [r3], #82
 8007d36:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	2a20      	cmp	r2, #32
 8007d3e:	bf28      	it	cs
 8007d40:	2220      	movcs	r2, #32
 8007d42:	f100 010b 	add.w	r1, r0, #11
 8007d46:	4610      	mov	r0, r2
 8007d48:	3801      	subs	r0, #1
 8007d4a:	d215      	bcs.n	8007d78 <RDMDevice::Init()+0x4c>
 8007d4c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007d4e:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
 8007d52:	b110      	cbz	r0, 8007d5a <RDMDevice::Init()+0x2e>
 8007d54:	6803      	ldr	r3, [r0, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	4798      	blx	r3
 8007d5a:	f06f 0509 	mvn.w	r5, #9
 8007d5e:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8007d62:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 8007d66:	f104 020a 	add.w	r2, r4, #10
 8007d6a:	1b2d      	subs	r5, r5, r4
 8007d6c:	18a9      	adds	r1, r5, r2
 8007d6e:	4288      	cmp	r0, r1
 8007d70:	d807      	bhi.n	8007d82 <RDMDevice::Init()+0x56>
 8007d72:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	f813 5b01 	ldrb.w	r5, [r3], #1
 8007d7c:	f803 5c48 	strb.w	r5, [r3, #-72]
 8007d80:	e7e2      	b.n	8007d48 <RDMDevice::Init()+0x1c>
 8007d82:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8007d86:	440b      	add	r3, r1
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	e7ef      	b.n	8007d6c <RDMDevice::Init()+0x40>

08007d8c <Hardware::RebootHandler()>:
 8007d8c:	b508      	push	{r3, lr}
 8007d8e:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <Hardware::RebootHandler()+0x18>)
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	f006 fe71 	bl	800ea78 <Dmx::Blackout()>
 8007d96:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <Hardware::RebootHandler()+0x1c>)
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d9e:	f001 bf11 	b.w	8009bc4 <ArtNetNode::Stop()>
 8007da2:	bf00      	nop
 8007da4:	200011c8 	andcs	r1, r0, r8, asr #3
 8007da8:	20000c68 	andcs	r0, r0, r8, ror #24

08007dac <main>:
 8007dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	f5ad 5d93 	sub.w	sp, sp, #4704	; 0x1260
 8007db4:	b087      	sub	sp, #28
 8007db6:	a802      	add	r0, sp, #8
 8007db8:	f00b f8b0 	bl	8012f1c <Hardware::Hardware()>
 8007dbc:	a884      	add	r0, sp, #528	; 0x210
 8007dbe:	f007 ff73 	bl	800fca8 <Network::Network()>
 8007dc2:	a816      	add	r0, sp, #88	; 0x58
 8007dc4:	f00b f854 	bl	8012e70 <LedBlink::LedBlink()>
 8007dc8:	a84b      	add	r0, sp, #300	; 0x12c
 8007dca:	f009 f815 	bl	8010df8 <DisplayUdf::DisplayUdf()>
 8007dce:	4aaf      	ldr	r2, [pc, #700]	; (800808c <main+0x2e0>)
 8007dd0:	4baf      	ldr	r3, [pc, #700]	; (8008090 <main+0x2e4>)
 8007dd2:	49b0      	ldr	r1, [pc, #704]	; (8008094 <main+0x2e8>)
 8007dd4:	a803      	add	r0, sp, #12
 8007dd6:	f00b f805 	bl	8012de4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8007dda:	a805      	add	r0, sp, #20
 8007ddc:	f009 fd16 	bl	801180c <ConfigStore::ConfigStore()>
 8007de0:	49ad      	ldr	r1, [pc, #692]	; (8008098 <main+0x2ec>)
 8007de2:	a803      	add	r0, sp, #12
 8007de4:	f00b f836 	bl	8012e54 <FirmwareVersion::Print(char const*)>
 8007de8:	2301      	movs	r3, #1
 8007dea:	4fac      	ldr	r7, [pc, #688]	; (800809c <main+0x2f0>)
 8007dec:	2008      	movs	r0, #8
 8007dee:	613b      	str	r3, [r7, #16]
 8007df0:	f00b f942 	bl	8013078 <operator new(unsigned int)>
 8007df4:	4baa      	ldr	r3, [pc, #680]	; (80080a0 <main+0x2f4>)
 8007df6:	6003      	str	r3, [r0, #0]
 8007df8:	4baa      	ldr	r3, [pc, #680]	; (80080a4 <main+0x2f8>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bf14      	ite	ne
 8007e00:	2201      	movne	r2, #1
 8007e02:	2200      	moveq	r2, #0
 8007e04:	7102      	strb	r2, [r0, #4]
 8007e06:	d004      	beq.n	8007e12 <main+0x66>
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	3b00      	subs	r3, #0
 8007e0c:	bf18      	it	ne
 8007e0e:	2301      	movne	r3, #1
 8007e10:	7103      	strb	r3, [r0, #4]
 8007e12:	2400      	movs	r4, #0
 8007e14:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007e18:	2303      	movs	r3, #3
 8007e1a:	49a3      	ldr	r1, [pc, #652]	; (80080a8 <main+0x2fc>)
 8007e1c:	9018      	str	r0, [sp, #96]	; 0x60
 8007e1e:	a84b      	add	r0, sp, #300	; 0x12c
 8007e20:	f7ff ff31 	bl	8007c86 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007e24:	a80c      	add	r0, sp, #48	; 0x30
 8007e26:	f009 feff 	bl	8011c28 <StoreNetwork::StoreNetwork()>
 8007e2a:	ab0d      	add	r3, sp, #52	; 0x34
 8007e2c:	a90c      	add	r1, sp, #48	; 0x30
 8007e2e:	a884      	add	r0, sp, #528	; 0x210
 8007e30:	93b2      	str	r3, [sp, #712]	; 0x2c8
 8007e32:	f007 ff91 	bl	800fd58 <Network::Init(NetworkParamsStore*)>
 8007e36:	a884      	add	r0, sp, #528	; 0x210
 8007e38:	f008 f95e 	bl	80100f8 <Network::Print()>
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007e42:	499a      	ldr	r1, [pc, #616]	; (80080ac <main+0x300>)
 8007e44:	a84b      	add	r0, sp, #300	; 0x12c
 8007e46:	f7ff ff1e 	bl	8007c86 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007e4a:	a804      	add	r0, sp, #16
 8007e4c:	f007 fb6e 	bl	800f52c <MDNS::MDNS()>
 8007e50:	a804      	add	r0, sp, #16
 8007e52:	f007 fc2b 	bl	800f6ac <MDNS::Start()>
 8007e56:	f642 1305 	movw	r3, #10501	; 0x2905
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4a94      	ldr	r2, [pc, #592]	; (80080b0 <main+0x304>)
 8007e5e:	e9cd 4400 	strd	r4, r4, [sp]
 8007e62:	a804      	add	r0, sp, #16
 8007e64:	f007 fd8c 	bl	800f980 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8007e68:	4b92      	ldr	r3, [pc, #584]	; (80080b4 <main+0x308>)
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	2301      	movs	r3, #1
 8007e70:	4a91      	ldr	r2, [pc, #580]	; (80080b8 <main+0x30c>)
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	a804      	add	r0, sp, #16
 8007e76:	2350      	movs	r3, #80	; 0x50
 8007e78:	f007 fd82 	bl	800f980 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8007e7c:	a804      	add	r0, sp, #16
 8007e7e:	f007 fec5 	bl	800fc0c <MDNS::Print()>
 8007e82:	a835      	add	r0, sp, #212	; 0xd4
 8007e84:	f001 f90a 	bl	800909c <HttpDaemon::HttpDaemon()>
 8007e88:	a835      	add	r0, sp, #212	; 0xd4
 8007e8a:	f001 f91b 	bl	80090c4 <HttpDaemon::Start()>
 8007e8e:	2303      	movs	r3, #3
 8007e90:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 8007e94:	4989      	ldr	r1, [pc, #548]	; (80080bc <main+0x310>)
 8007e96:	a84b      	add	r0, sp, #300	; 0x12c
 8007e98:	f7ff fef5 	bl	8007c86 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007e9c:	4621      	mov	r1, r4
 8007e9e:	a80e      	add	r0, sp, #56	; 0x38
 8007ea0:	f00a f880 	bl	8011fa4 <StoreArtNet::StoreArtNet(unsigned int)>
 8007ea4:	a90e      	add	r1, sp, #56	; 0x38
 8007ea6:	a861      	add	r0, sp, #388	; 0x184
 8007ea8:	f003 fb6e 	bl	800b588 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8007eac:	a8b6      	add	r0, sp, #728	; 0x2d8
 8007eae:	f001 fdc3 	bl	8009a38 <ArtNet4Node::ArtNet4Node()>
 8007eb2:	a861      	add	r0, sp, #388	; 0x184
 8007eb4:	f003 fb88 	bl	800b5c8 <ArtNetParams::Load()>
 8007eb8:	b130      	cbz	r0, 8007ec8 <main+0x11c>
 8007eba:	a861      	add	r0, sp, #388	; 0x184
 8007ebc:	f003 ffa4 	bl	800be08 <ArtNetParams::Dump()>
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	a861      	add	r0, sp, #388	; 0x184
 8007ec4:	f003 ff1c 	bl	800bd00 <ArtNetParams::Set(unsigned int)>
 8007ec8:	f8bd 21fd 	ldrh.w	r2, [sp, #509]	; 0x1fd
 8007ecc:	ab0f      	add	r3, sp, #60	; 0x3c
 8007ece:	f002 0203 	and.w	r2, r2, #3
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	93be      	str	r3, [sp, #760]	; 0x2f8
 8007ed6:	a8b7      	add	r0, sp, #732	; 0x2dc
 8007ed8:	f89d 31ef 	ldrb.w	r3, [sp, #495]	; 0x1ef
 8007edc:	f002 f904 	bl	800a0e8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8007ee0:	a806      	add	r0, sp, #24
 8007ee2:	f009 fdf3 	bl	8011acc <StoreDmxSend::StoreDmxSend()>
 8007ee6:	a906      	add	r1, sp, #24
 8007ee8:	a812      	add	r0, sp, #72	; 0x48
 8007eea:	f006 f805 	bl	800def8 <DmxParams::DmxParams(DmxParamsStore*)>
 8007eee:	a81c      	add	r0, sp, #112	; 0x70
 8007ef0:	f006 fc6a 	bl	800e7c8 <Dmx::Dmx()>
 8007ef4:	a812      	add	r0, sp, #72	; 0x48
 8007ef6:	f006 f80b 	bl	800df10 <DmxParams::Load()>
 8007efa:	b130      	cbz	r0, 8007f0a <main+0x15e>
 8007efc:	a812      	add	r0, sp, #72	; 0x48
 8007efe:	f006 f955 	bl	800e1ac <DmxParams::Dump()>
 8007f02:	a91c      	add	r1, sp, #112	; 0x70
 8007f04:	a812      	add	r0, sp, #72	; 0x48
 8007f06:	f006 f927 	bl	800e158 <DmxParams::Set(Dmx*)>
 8007f0a:	4a6d      	ldr	r2, [pc, #436]	; (80080c0 <main+0x314>)
 8007f0c:	ac07      	add	r4, sp, #28
 8007f0e:	4620      	mov	r0, r4
 8007f10:	9207      	str	r2, [sp, #28]
 8007f12:	ab07      	add	r3, sp, #28
 8007f14:	f005 ff96 	bl	800de44 <DmxSend::Print()>
 8007f18:	f89d 5cd6 	ldrb.w	r5, [sp, #3286]	; 0xcd6
 8007f1c:	b165      	cbz	r5, 8007f38 <main+0x18c>
 8007f1e:	2001      	movs	r0, #1
 8007f20:	94b8      	str	r4, [sp, #736]	; 0x2e0
 8007f22:	f00b f8a9 	bl	8013078 <operator new(unsigned int)>
 8007f26:	4b67      	ldr	r3, [pc, #412]	; (80080c4 <main+0x318>)
 8007f28:	4605      	mov	r5, r0
 8007f2a:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	f007 fee9 	bl	800fd06 <Network::Begin(unsigned short)>
 8007f34:	4b64      	ldr	r3, [pc, #400]	; (80080c8 <main+0x31c>)
 8007f36:	6018      	str	r0, [r3, #0]
 8007f38:	ac08      	add	r4, sp, #32
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 fa2e 	bl	800839c <DmxInput::DmxInput()>
 8007f40:	f89d 3cd7 	ldrb.w	r3, [sp, #3287]	; 0xcd7
 8007f44:	b103      	cbz	r3, 8007f48 <main+0x19c>
 8007f46:	94bb      	str	r4, [sp, #748]	; 0x2ec
 8007f48:	a810      	add	r0, sp, #64	; 0x40
 8007f4a:	f00a f891 	bl	8012070 <StoreRDMDevice::StoreRDMDevice()>
 8007f4e:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8007f50:	069a      	lsls	r2, r3, #26
 8007f52:	d539      	bpl.n	8007fc8 <main+0x21c>
 8007f54:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
 8007f58:	f00b f88e 	bl	8013078 <operator new(unsigned int)>
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	f005 f9bb 	bl	800d2d8 <ArtNetRdmController::ArtNetRdmController()>
 8007f62:	a910      	add	r1, sp, #64	; 0x40
 8007f64:	a83f      	add	r0, sp, #252	; 0xfc
 8007f66:	f005 fe3d 	bl	800dbe4 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8007f6a:	a83f      	add	r0, sp, #252	; 0xfc
 8007f6c:	f005 fe4c 	bl	800dc08 <RDMDeviceParams::Load()>
 8007f70:	1d26      	adds	r6, r4, #4
 8007f72:	b130      	cbz	r0, 8007f82 <main+0x1d6>
 8007f74:	a83f      	add	r0, sp, #252	; 0xfc
 8007f76:	4631      	mov	r1, r6
 8007f78:	f005 fe51 	bl	800dc1e <RDMDeviceParams::Set(RDMDevice*)>
 8007f7c:	a83f      	add	r0, sp, #252	; 0xfc
 8007f7e:	f005 fe82 	bl	800dc86 <RDMDeviceParams::Dump()>
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7ff fed2 	bl	8007d2c <RDMDevice::Init()>
 8007f88:	4630      	mov	r0, r6
 8007f8a:	f005 fde7 	bl	800db5c <RDMDevice::Print()>
 8007f8e:	f89d 3cf8 	ldrb.w	r3, [sp, #3320]	; 0xcf8
 8007f92:	b1a3      	cbz	r3, 8007fbe <main+0x212>
 8007f94:	2301      	movs	r3, #1
 8007f96:	2100      	movs	r1, #0
 8007f98:	aa2c      	add	r2, sp, #176	; 0xb0
 8007f9a:	a8b7      	add	r0, sp, #732	; 0x2dc
 8007f9c:	f002 f934 	bl	800a208 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8007fa0:	b168      	cbz	r0, 8007fbe <main+0x212>
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
 8007fa8:	4948      	ldr	r1, [pc, #288]	; (80080cc <main+0x320>)
 8007faa:	a84b      	add	r0, sp, #300	; 0x12c
 8007fac:	f7ff fe6b 	bl	8007c86 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007fb0:	4b47      	ldr	r3, [pc, #284]	; (80080d0 <main+0x324>)
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8007fba:	f005 fcf5 	bl	800d9a8 <RDMDiscovery::Full(unsigned int, RDMTod*)>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	a8b7      	add	r0, sp, #732	; 0x2dc
 8007fc4:	f003 f8a6 	bl	800b114 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>
 8007fc8:	a8b6      	add	r0, sp, #728	; 0x2d8
 8007fca:	f001 fd79 	bl	8009ac0 <ArtNet4Node::Print()>
 8007fce:	f89d 3cd7 	ldrb.w	r3, [sp, #3287]	; 0xcd7
 8007fd2:	f89d 4cd6 	ldrb.w	r4, [sp, #3286]	; 0xcd6
 8007fd6:	441c      	add	r4, r3
 8007fd8:	f8bd 31fd 	ldrh.w	r3, [sp, #509]	; 0x1fd
 8007fdc:	079b      	lsls	r3, r3, #30
 8007fde:	f000 811b 	beq.w	8008218 <main+0x46c>
 8007fe2:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8007fe4:	4a3b      	ldr	r2, [pc, #236]	; (80080d4 <main+0x328>)
 8007fe6:	f013 0f20 	tst.w	r3, #32
 8007fea:	4b3b      	ldr	r3, [pc, #236]	; (80080d8 <main+0x32c>)
 8007fec:	bf08      	it	eq
 8007fee:	461a      	moveq	r2, r3
 8007ff0:	493a      	ldr	r1, [pc, #232]	; (80080dc <main+0x330>)
 8007ff2:	a84b      	add	r0, sp, #300	; 0x12c
 8007ff4:	f008 ff16 	bl	8010e24 <DisplayUdf::SetTitle(char const*, ...)>
 8007ff8:	2206      	movs	r2, #6
 8007ffa:	2102      	movs	r1, #2
 8007ffc:	a84b      	add	r0, sp, #300	; 0x12c
 8007ffe:	f008 ff24 	bl	8010e4a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008002:	2202      	movs	r2, #2
 8008004:	2103      	movs	r1, #3
 8008006:	a84b      	add	r0, sp, #300	; 0x12c
 8008008:	f008 ff1f 	bl	8010e4a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800800c:	2203      	movs	r2, #3
 800800e:	2104      	movs	r1, #4
 8008010:	a84b      	add	r0, sp, #300	; 0x12c
 8008012:	f008 ff1a 	bl	8010e4a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008016:	2204      	movs	r2, #4
 8008018:	2105      	movs	r1, #5
 800801a:	a84b      	add	r0, sp, #300	; 0x12c
 800801c:	f008 ff15 	bl	8010e4a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008020:	2207      	movs	r2, #7
 8008022:	2106      	movs	r1, #6
 8008024:	a84b      	add	r0, sp, #300	; 0x12c
 8008026:	f008 ff10 	bl	8010e4a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800802a:	a809      	add	r0, sp, #36	; 0x24
 800802c:	f009 fd18 	bl	8011a60 <StoreDisplayUdf::StoreDisplayUdf()>
 8008030:	a909      	add	r1, sp, #36	; 0x24
 8008032:	a83f      	add	r0, sp, #252	; 0xfc
 8008034:	f009 f88a 	bl	801114c <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008038:	a83f      	add	r0, sp, #252	; 0xfc
 800803a:	f009 f894 	bl	8011166 <DisplayUdfParams::Load()>
 800803e:	b130      	cbz	r0, 800804e <main+0x2a2>
 8008040:	a83f      	add	r0, sp, #252	; 0xfc
 8008042:	f009 f9fb 	bl	801143c <DisplayUdfParams::Dump()>
 8008046:	a94b      	add	r1, sp, #300	; 0x12c
 8008048:	a83f      	add	r0, sp, #252	; 0xfc
 800804a:	f009 f9c4 	bl	80113d6 <DisplayUdfParams::Set(DisplayUdf*)>
 800804e:	a9b7      	add	r1, sp, #732	; 0x2dc
 8008050:	a84b      	add	r0, sp, #300	; 0x12c
 8008052:	f009 fad7 	bl	8011604 <DisplayUdf::Show(ArtNetNode*)>
 8008056:	9a62      	ldr	r2, [sp, #392]	; 0x188
 8008058:	4623      	mov	r3, r4
 800805a:	2100      	movs	r1, #0
 800805c:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008060:	a823      	add	r0, sp, #140	; 0x8c
 8008062:	f000 fb0b 	bl	800867c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 8008066:	a80a      	add	r0, sp, #40	; 0x28
 8008068:	f009 fe16 	bl	8011c98 <StoreRemoteConfig::StoreRemoteConfig()>
 800806c:	a90a      	add	r1, sp, #40	; 0x28
 800806e:	a82c      	add	r0, sp, #176	; 0xb0
 8008070:	f000 fdfe 	bl	8008c70 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008074:	a82c      	add	r0, sp, #176	; 0xb0
 8008076:	f000 fe05 	bl	8008c84 <RemoteConfigParams::Load()>
 800807a:	b388      	cbz	r0, 80080e0 <main+0x334>
 800807c:	a82c      	add	r0, sp, #176	; 0xb0
 800807e:	f000 ff48 	bl	8008f12 <RemoteConfigParams::Dump()>
 8008082:	a923      	add	r1, sp, #140	; 0x8c
 8008084:	a82c      	add	r0, sp, #176	; 0xb0
 8008086:	f000 ff24 	bl	8008ed2 <RemoteConfigParams::Set(RemoteConfig*)>
 800808a:	e029      	b.n	80080e0 <main+0x334>
 800808c:	080158d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, fp, ip, lr}
 8008090:	080158ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, fp, ip, lr}
 8008094:	08015985 	stmdaeq	r1, {r0, r2, r7, r8, fp, ip, lr}
 8008098:	080158e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, fp, ip, lr}
 800809c:	40011000 	andmi	r1, r1, r0
 80080a0:	08015974 	stmdaeq	r1, {r2, r4, r5, r6, r8, fp, ip, lr}
 80080a4:	2000a0d8 	ldrdcs	sl, [r0], -r8
 80080a8:	08017163 	stmdaeq	r1, {r0, r1, r5, r6, r8, ip, sp, lr}
 80080ac:	08017152 	stmdaeq	r1, {r1, r4, r6, r8, ip, sp, lr}
 80080b0:	08015917 	stmdaeq	r1, {r0, r1, r2, r4, r8, fp, ip, lr}
 80080b4:	08015927 	stmdaeq	r1, {r0, r1, r2, r5, r8, fp, ip, lr}
 80080b8:	08015920 	stmdaeq	r1, {r5, r8, fp, ip, lr}
 80080bc:	08016aa1 	stmdaeq	r1, {r0, r5, r7, r9, fp, sp, lr}
 80080c0:	08017084 	stmdaeq	r1, {r2, r7, ip, sp, lr}
 80080c4:	20008aa8 	andcs	r8, r0, r8, lsr #21
 80080c8:	2000000c 	andcs	r0, r0, ip
 80080cc:	08016ab5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, fp, sp, lr}
 80080d0:	20000d8c 	andcs	r0, r0, ip, lsl #27
 80080d4:	0801593a 	stmdaeq	r1, {r1, r3, r4, r5, r8, fp, ip, lr}
 80080d8:	080158b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, fp, ip, lr}
 80080dc:	0801593e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, fp, ip, lr}
 80080e0:	a805      	add	r0, sp, #20
 80080e2:	f009 fc3b 	bl	801195c <ConfigStore::Flash()>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d1fa      	bne.n	80080e0 <main+0x334>
 80080ea:	2303      	movs	r3, #3
 80080ec:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80080f0:	4972      	ldr	r1, [pc, #456]	; (80082bc <main+0x510>)
 80080f2:	a84b      	add	r0, sp, #300	; 0x12c
 80080f4:	f7ff fdc7 	bl	8007c86 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80080f8:	a8b6      	add	r0, sp, #728	; 0x2d8
 80080fa:	f001 fcad 	bl	8009a58 <ArtNet4Node::Start()>
 80080fe:	f248 0280 	movw	r2, #32896	; 0x8080
 8008102:	2302      	movs	r3, #2
 8008104:	496e      	ldr	r1, [pc, #440]	; (80082c0 <main+0x514>)
 8008106:	a84b      	add	r0, sp, #300	; 0x12c
 8008108:	f7ff fdbd 	bl	8007c86 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800810c:	2102      	movs	r1, #2
 800810e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008112:	f00c f957 	bl	80143c4 <fwdgt_config>
 8008116:	2801      	cmp	r0, #1
 8008118:	bf0c      	ite	eq
 800811a:	2201      	moveq	r2, #1
 800811c:	2200      	movne	r2, #0
 800811e:	ab02      	add	r3, sp, #8
 8008120:	701a      	strb	r2, [r3, #0]
 8008122:	d101      	bne.n	8008128 <main+0x37c>
 8008124:	f00c f93e 	bl	80143a4 <fwdgt_enable>
 8008128:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80082c4 <main+0x518>
 800812c:	f8df 9198 	ldr.w	r9, [pc, #408]	; 80082c8 <main+0x51c>
 8008130:	f8df a198 	ldr.w	sl, [pc, #408]	; 80082cc <main+0x520>
 8008134:	f00c f93e 	bl	80143b4 <fwdgt_counter_reload>
 8008138:	f7ff f9f2 	bl	8007520 <net_handle>
 800813c:	a8b6      	add	r0, sp, #728	; 0x2d8
 800813e:	f001 fcaf 	bl	8009aa0 <ArtNet4Node::Run()>
 8008142:	a823      	add	r0, sp, #140	; 0x8c
 8008144:	f000 fc44 	bl	80089d0 <RemoteConfig::Run()>
 8008148:	a805      	add	r0, sp, #20
 800814a:	f009 fc07 	bl	801195c <ConfigStore::Flash()>
 800814e:	2d00      	cmp	r5, #0
 8008150:	d036      	beq.n	80081c0 <main+0x414>
 8008152:	f10d 0316 	add.w	r3, sp, #22
 8008156:	495b      	ldr	r1, [pc, #364]	; (80082c4 <main+0x518>)
 8008158:	f899 0000 	ldrb.w	r0, [r9]
 800815c:	aa0b      	add	r2, sp, #44	; 0x2c
 800815e:	f007 f8e7 	bl	800f330 <udp_recv2>
 8008162:	f1a0 030b 	sub.w	r3, r0, #11
 8008166:	b29b      	uxth	r3, r3
 8008168:	2b05      	cmp	r3, #5
 800816a:	4604      	mov	r4, r0
 800816c:	d828      	bhi.n	80081c0 <main+0x414>
 800816e:	f8d8 6000 	ldr.w	r6, [r8]
 8008172:	2204      	movs	r2, #4
 8008174:	4631      	mov	r1, r6
 8008176:	4650      	mov	r0, sl
 8008178:	f7ff fcf5 	bl	8007b66 <memcmp>
 800817c:	bb00      	cbnz	r0, 80081c0 <main+0x414>
 800817e:	1933      	adds	r3, r6, r4
 8008180:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008184:	f106 0b04 	add.w	fp, r6, #4
 8008188:	2b0a      	cmp	r3, #10
 800818a:	bf04      	itt	eq
 800818c:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8008190:	b2a4      	uxtheq	r4, r4
 8008192:	2c0a      	cmp	r4, #10
 8008194:	d042      	beq.n	800821c <main+0x470>
 8008196:	2c0e      	cmp	r4, #14
 8008198:	d840      	bhi.n	800821c <main+0x470>
 800819a:	2206      	movs	r2, #6
 800819c:	4659      	mov	r1, fp
 800819e:	484c      	ldr	r0, [pc, #304]	; (80082d0 <main+0x524>)
 80081a0:	f7ff fce1 	bl	8007b66 <memcmp>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d139      	bne.n	800821c <main+0x470>
 80081a8:	2104      	movs	r1, #4
 80081aa:	f106 000a 	add.w	r0, r6, #10
 80081ae:	f7ff fceb 	bl	8007b88 <dmxconfigudp::atoi(char const*, unsigned int)>
 80081b2:	285b      	cmp	r0, #91	; 0x5b
 80081b4:	4601      	mov	r1, r0
 80081b6:	d903      	bls.n	80081c0 <main+0x414>
 80081b8:	4b46      	ldr	r3, [pc, #280]	; (80082d4 <main+0x528>)
 80081ba:	6818      	ldr	r0, [r3, #0]
 80081bc:	f006 fc12 	bl	800e9e4 <Dmx::SetDmxBreakTime(unsigned int)>
 80081c0:	a804      	add	r0, sp, #16
 80081c2:	f007 fcff 	bl	800fbc4 <MDNS::Run()>
 80081c6:	a835      	add	r0, sp, #212	; 0xd4
 80081c8:	f001 f9e8 	bl	800959c <HttpDaemon::Run()>
 80081cc:	9950      	ldr	r1, [sp, #320]	; 0x140
 80081ce:	aa4b      	add	r2, sp, #300	; 0x12c
 80081d0:	b161      	cbz	r1, 80081ec <main+0x440>
 80081d2:	7c13      	ldrb	r3, [r2, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d16b      	bne.n	80082b0 <main+0x504>
 80081d8:	4b3f      	ldr	r3, [pc, #252]	; (80082d8 <main+0x52c>)
 80081da:	6852      	ldr	r2, [r2, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	4299      	cmp	r1, r3
 80081e2:	d203      	bcs.n	80081ec <main+0x440>
 80081e4:	2101      	movs	r1, #1
 80081e6:	a84b      	add	r0, sp, #300	; 0x12c
 80081e8:	f7ff fd76 	bl	8007cd8 <Display::SetSleep(bool)>
 80081ec:	9919      	ldr	r1, [sp, #100]	; 0x64
 80081ee:	2900      	cmp	r1, #0
 80081f0:	d0a0      	beq.n	8008134 <main+0x388>
 80081f2:	4a39      	ldr	r2, [pc, #228]	; (80082d8 <main+0x52c>)
 80081f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80081f6:	6813      	ldr	r3, [r2, #0]
 80081f8:	1a1b      	subs	r3, r3, r0
 80081fa:	4299      	cmp	r1, r3
 80081fc:	d89a      	bhi.n	8008134 <main+0x388>
 80081fe:	6813      	ldr	r3, [r2, #0]
 8008200:	931b      	str	r3, [sp, #108]	; 0x6c
 8008202:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008204:	2b01      	cmp	r3, #1
 8008206:	f083 0201 	eor.w	r2, r3, #1
 800820a:	bf18      	it	ne
 800820c:	2301      	movne	r3, #1
 800820e:	921a      	str	r2, [sp, #104]	; 0x68
 8008210:	bf14      	ite	ne
 8008212:	613b      	strne	r3, [r7, #16]
 8008214:	617b      	streq	r3, [r7, #20]
 8008216:	e78d      	b.n	8008134 <main+0x388>
 8008218:	4a30      	ldr	r2, [pc, #192]	; (80082dc <main+0x530>)
 800821a:	e6e9      	b.n	8007ff0 <main+0x244>
 800821c:	2204      	movs	r2, #4
 800821e:	4659      	mov	r1, fp
 8008220:	482f      	ldr	r0, [pc, #188]	; (80082e0 <main+0x534>)
 8008222:	f7ff fca0 	bl	8007b66 <memcmp>
 8008226:	b978      	cbnz	r0, 8008248 <main+0x49c>
 8008228:	2107      	movs	r1, #7
 800822a:	f106 0008 	add.w	r0, r6, #8
 800822e:	f7ff fcab 	bl	8007b88 <dmxconfigudp::atoi(char const*, unsigned int)>
 8008232:	4b2c      	ldr	r3, [pc, #176]	; (80082e4 <main+0x538>)
 8008234:	f1a0 020c 	sub.w	r2, r0, #12
 8008238:	429a      	cmp	r2, r3
 800823a:	4601      	mov	r1, r0
 800823c:	d8c0      	bhi.n	80081c0 <main+0x414>
 800823e:	4b25      	ldr	r3, [pc, #148]	; (80082d4 <main+0x528>)
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	f006 fbd9 	bl	800e9f8 <Dmx::SetDmxMabTime(unsigned int)>
 8008246:	e7bb      	b.n	80081c0 <main+0x414>
 8008248:	2c0c      	cmp	r4, #12
 800824a:	d916      	bls.n	800827a <main+0x4ce>
 800824c:	2c0e      	cmp	r4, #14
 800824e:	d82c      	bhi.n	80082aa <main+0x4fe>
 8008250:	2208      	movs	r2, #8
 8008252:	4659      	mov	r1, fp
 8008254:	4824      	ldr	r0, [pc, #144]	; (80082e8 <main+0x53c>)
 8008256:	f7ff fc86 	bl	8007b66 <memcmp>
 800825a:	bb30      	cbnz	r0, 80082aa <main+0x4fe>
 800825c:	2102      	movs	r1, #2
 800825e:	f106 000c 	add.w	r0, r6, #12
 8008262:	f7ff fc91 	bl	8007b88 <dmxconfigudp::atoi(char const*, unsigned int)>
 8008266:	4601      	mov	r1, r0
 8008268:	b110      	cbz	r0, 8008270 <main+0x4c4>
 800826a:	4b20      	ldr	r3, [pc, #128]	; (80082ec <main+0x540>)
 800826c:	fbb3 f1f0 	udiv	r1, r3, r0
 8008270:	4b18      	ldr	r3, [pc, #96]	; (80082d4 <main+0x528>)
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	f006 fb86 	bl	800e984 <Dmx::SetDmxPeriodTime(unsigned int)>
 8008278:	e7a2      	b.n	80081c0 <main+0x414>
 800827a:	2c0a      	cmp	r4, #10
 800827c:	d0a0      	beq.n	80081c0 <main+0x414>
 800827e:	2206      	movs	r2, #6
 8008280:	4659      	mov	r1, fp
 8008282:	481b      	ldr	r0, [pc, #108]	; (80082f0 <main+0x544>)
 8008284:	f7ff fc6f 	bl	8007b66 <memcmp>
 8008288:	2800      	cmp	r0, #0
 800828a:	d199      	bne.n	80081c0 <main+0x414>
 800828c:	2103      	movs	r1, #3
 800828e:	f106 000a 	add.w	r0, r6, #10
 8008292:	f7ff fc79 	bl	8007b88 <dmxconfigudp::atoi(char const*, unsigned int)>
 8008296:	1e83      	subs	r3, r0, #2
 8008298:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800829c:	d890      	bhi.n	80081c0 <main+0x414>
 800829e:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <main+0x528>)
 80082a0:	b281      	uxth	r1, r0
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	f006 fbb2 	bl	800ea0c <Dmx::SetDmxSlots(unsigned short)>
 80082a8:	e78a      	b.n	80081c0 <main+0x414>
 80082aa:	2c0d      	cmp	r4, #13
 80082ac:	d188      	bne.n	80081c0 <main+0x414>
 80082ae:	e7e6      	b.n	800827e <main+0x4d2>
 80082b0:	f7ff fd32 	bl	8007d18 <display::timeout::gpio_renew()>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d099      	beq.n	80081ec <main+0x440>
 80082b8:	2100      	movs	r1, #0
 80082ba:	e794      	b.n	80081e6 <main+0x43a>
 80082bc:	08016a90 	stmdaeq	r1, {r4, r7, r9, fp, sp, lr}
 80082c0:	08016acb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r9, fp, sp, lr}
 80082c4:	200011d8 	ldrdcs	r1, [r0], -r8
 80082c8:	2000000c 	andcs	r0, r0, ip
 80082cc:	0801594b 	stmdaeq	r1, {r0, r1, r3, r6, r8, fp, ip, lr}
 80082d0:	08015950 	stmdaeq	r1, {r4, r6, r8, fp, ip, lr}
 80082d4:	200011c8 	andcs	r1, r0, r8, asr #3
 80082d8:	2000a1e4 	andcs	sl, r0, r4, ror #3
 80082dc:	080158c4 	stmdaeq	r1, {r2, r6, r7, fp, ip, lr}
 80082e0:	08015957 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, fp, ip, lr}
 80082e4:	000f4234 	andeq	r4, pc, r4, lsr r2	; <UNPREDICTABLE>
 80082e8:	0801595c 	stmdaeq	r1, {r2, r3, r4, r6, r8, fp, ip, lr}
 80082ec:	000f4240 	andeq	r4, pc, r0, asr #4
 80082f0:	08015965 	stmdaeq	r1, {r0, r2, r5, r6, r8, fp, ip, lr}

080082f4 <DmxInput::~DmxInput()>:
 80082f4:	4770      	bx	lr
	...

080082f8 <DmxInput::Start(unsigned int)>:
 80082f8:	2301      	movs	r3, #1
 80082fa:	b410      	push	{r4}
 80082fc:	4808      	ldr	r0, [pc, #32]	; (8008320 <DmxInput::Start(unsigned int)+0x28>)
 80082fe:	fa03 f101 	lsl.w	r1, r3, r1
 8008302:	7802      	ldrb	r2, [r0, #0]
 8008304:	ea31 0402 	bics.w	r4, r1, r2
 8008308:	d008      	beq.n	800831c <DmxInput::Start(unsigned int)+0x24>
 800830a:	430a      	orrs	r2, r1
 800830c:	7002      	strb	r2, [r0, #0]
 800830e:	4805      	ldr	r0, [pc, #20]	; (8008324 <DmxInput::Start(unsigned int)+0x2c>)
 8008310:	461a      	mov	r2, r3
 8008312:	2100      	movs	r1, #0
 8008314:	6800      	ldr	r0, [r0, #0]
 8008316:	bc10      	pop	{r4}
 8008318:	f006 ba28 	b.w	800e76c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800831c:	bc10      	pop	{r4}
 800831e:	4770      	bx	lr
 8008320:	20000090 	mulcs	r0, r0, r0
 8008324:	200011c8 	andcs	r1, r0, r8, asr #3

08008328 <DmxInput::Stop(unsigned int)>:
 8008328:	2201      	movs	r2, #1
 800832a:	b410      	push	{r4}
 800832c:	4809      	ldr	r0, [pc, #36]	; (8008354 <DmxInput::Stop(unsigned int)+0x2c>)
 800832e:	fa02 f101 	lsl.w	r1, r2, r1
 8008332:	7803      	ldrb	r3, [r0, #0]
 8008334:	ea31 0403 	bics.w	r4, r1, r3
 8008338:	d109      	bne.n	800834e <DmxInput::Stop(unsigned int)+0x26>
 800833a:	ea23 0301 	bic.w	r3, r3, r1
 800833e:	7003      	strb	r3, [r0, #0]
 8008340:	2300      	movs	r3, #0
 8008342:	4805      	ldr	r0, [pc, #20]	; (8008358 <DmxInput::Stop(unsigned int)+0x30>)
 8008344:	4619      	mov	r1, r3
 8008346:	6800      	ldr	r0, [r0, #0]
 8008348:	bc10      	pop	{r4}
 800834a:	f006 ba0f 	b.w	800e76c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800834e:	bc10      	pop	{r4}
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20000090 	mulcs	r0, r0, r0
 8008358:	200011c8 	andcs	r1, r0, r8, asr #3

0800835c <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	4f0b      	ldr	r7, [pc, #44]	; (800838c <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x30>)
 8008360:	2100      	movs	r1, #0
 8008362:	6838      	ldr	r0, [r7, #0]
 8008364:	461e      	mov	r6, r3
 8008366:	4615      	mov	r5, r2
 8008368:	f006 fbd6 	bl	800eb18 <Dmx::GetDmxAvailable(unsigned int)>
 800836c:	2100      	movs	r1, #0
 800836e:	4604      	mov	r4, r0
 8008370:	6838      	ldr	r0, [r7, #0]
 8008372:	f006 fbe5 	bl	800eb40 <Dmx::GetUpdatesPerSecond(unsigned int)>
 8008376:	6030      	str	r0, [r6, #0]
 8008378:	b12c      	cbz	r4, 8008386 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x2a>
 800837a:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 800837e:	3401      	adds	r4, #1
 8008380:	4620      	mov	r0, r4
 8008382:	602b      	str	r3, [r5, #0]
 8008384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008386:	4623      	mov	r3, r4
 8008388:	e7fa      	b.n	8008380 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x24>
 800838a:	bf00      	nop
 800838c:	200011c8 	andcs	r1, r0, r8, asr #3

08008390 <DmxInput::~DmxInput()>:
 8008390:	b510      	push	{r4, lr}
 8008392:	4604      	mov	r4, r0
 8008394:	f00a fe6c 	bl	8013070 <operator delete(void*)>
 8008398:	4620      	mov	r0, r4
 800839a:	bd10      	pop	{r4, pc}

0800839c <DmxInput::DmxInput()>:
 800839c:	b510      	push	{r4, lr}
 800839e:	4604      	mov	r4, r0
 80083a0:	4b03      	ldr	r3, [pc, #12]	; (80083b0 <DmxInput::DmxInput()+0x14>)
 80083a2:	2100      	movs	r1, #0
 80083a4:	6003      	str	r3, [r0, #0]
 80083a6:	f7ff ffbf 	bl	8008328 <DmxInput::Stop(unsigned int)>
 80083aa:	4620      	mov	r0, r4
 80083ac:	bd10      	pop	{r4, pc}
 80083ae:	bf00      	nop
 80083b0:	08015994 	stmdaeq	r1, {r2, r4, r7, r8, fp, ip, lr}

080083b4 <RemoteConfig::HandleList()>:
 80083b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083b8:	6801      	ldr	r1, [r0, #0]
 80083ba:	4604      	mov	r4, r0
 80083bc:	2012      	movs	r0, #18
 80083be:	f04f 080c 	mov.w	r8, #12
 80083c2:	4a29      	ldr	r2, [pc, #164]	; (8008468 <RemoteConfig::HandleList()+0xb4>)
 80083c4:	4b29      	ldr	r3, [pc, #164]	; (800846c <RemoteConfig::HandleList()+0xb8>)
 80083c6:	fb00 2201 	mla	r2, r0, r1, r2
 80083ca:	6860      	ldr	r0, [r4, #4]
 80083cc:	4928      	ldr	r1, [pc, #160]	; (8008470 <RemoteConfig::HandleList()+0xbc>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	fb08 1100 	mla	r1, r8, r0, r1
 80083d4:	4e27      	ldr	r6, [pc, #156]	; (8008474 <RemoteConfig::HandleList()+0xc0>)
 80083d6:	4828      	ldr	r0, [pc, #160]	; (8008478 <RemoteConfig::HandleList()+0xc4>)
 80083d8:	695f      	ldr	r7, [r3, #20]
 80083da:	6835      	ldr	r5, [r6, #0]
 80083dc:	f890 9009 	ldrb.w	r9, [r0, #9]
 80083e0:	b2fb      	uxtb	r3, r7
 80083e2:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80083e6:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80083ea:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80083ee:	b089      	sub	sp, #36	; 0x24
 80083f0:	3507      	adds	r5, #7
 80083f2:	0e3f      	lsrs	r7, r7, #24
 80083f4:	f1b9 0f00 	cmp.w	r9, #0
 80083f8:	d01d      	beq.n	8008436 <RemoteConfig::HandleList()+0x82>
 80083fa:	3009      	adds	r0, #9
 80083fc:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8008400:	e9cd 8005 	strd	r8, r0, [sp, #20]
 8008404:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8008408:	4628      	mov	r0, r5
 800840a:	e9cd e701 	strd	lr, r7, [sp, #4]
 800840e:	4a1b      	ldr	r2, [pc, #108]	; (800847c <RemoteConfig::HandleList()+0xc8>)
 8008410:	f8cd c000 	str.w	ip, [sp]
 8008414:	f00b f920 	bl	8013658 <snprintf>
 8008418:	69e3      	ldr	r3, [r4, #28]
 800841a:	2b05      	cmp	r3, #5
 800841c:	d118      	bne.n	8008450 <RemoteConfig::HandleList()+0x9c>
 800841e:	f642 1305 	movw	r3, #10501	; 0x2905
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	69a3      	ldr	r3, [r4, #24]
 8008426:	b282      	uxth	r2, r0
 8008428:	4629      	mov	r1, r5
 800842a:	7d20      	ldrb	r0, [r4, #20]
 800842c:	f006 ffa6 	bl	800f37c <udp_send>
 8008430:	b009      	add	sp, #36	; 0x24
 8008432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008436:	e9cd 1804 	strd	r1, r8, [sp, #16]
 800843a:	e9cd 7202 	strd	r7, r2, [sp, #8]
 800843e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8008442:	4628      	mov	r0, r5
 8008444:	e9cd ce00 	strd	ip, lr, [sp]
 8008448:	4a0d      	ldr	r2, [pc, #52]	; (8008480 <RemoteConfig::HandleList()+0xcc>)
 800844a:	f00b f905 	bl	8013658 <snprintf>
 800844e:	e7e3      	b.n	8008418 <RemoteConfig::HandleList()+0x64>
 8008450:	2b06      	cmp	r3, #6
 8008452:	d1ed      	bne.n	8008430 <RemoteConfig::HandleList()+0x7c>
 8008454:	6833      	ldr	r3, [r6, #0]
 8008456:	799b      	ldrb	r3, [r3, #6]
 8008458:	2b2a      	cmp	r3, #42	; 0x2a
 800845a:	d1e9      	bne.n	8008430 <RemoteConfig::HandleList()+0x7c>
 800845c:	f642 1305 	movw	r3, #10501	; 0x2905
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008466:	e7de      	b.n	8008426 <RemoteConfig::HandleList()+0x72>
 8008468:	08015a93 	stmdaeq	r1, {r0, r1, r4, r7, r9, fp, ip, lr}
 800846c:	20008aa8 	andcs	r8, r0, r8, lsr #21
 8008470:	08015b59 	stmdaeq	r1, {r0, r3, r4, r6, r8, r9, fp, ip, lr}
 8008474:	20000094 	mulcs	r0, r4, r0
 8008478:	20000098 	mulcs	r0, r8, r0
 800847c:	080159a8 	stmdaeq	r1, {r3, r5, r7, r8, fp, ip, lr}
 8008480:	080159c1 	stmdaeq	r1, {r0, r6, r7, r8, fp, ip, lr}

08008484 <RemoteConfig::HandleDisplayGet()>:
 8008484:	69c3      	ldr	r3, [r0, #28]
 8008486:	2b08      	cmp	r3, #8
 8008488:	d11b      	bne.n	80084c2 <RemoteConfig::HandleDisplayGet()+0x3e>
 800848a:	4b0e      	ldr	r3, [pc, #56]	; (80084c4 <RemoteConfig::HandleDisplayGet()+0x40>)
 800848c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4d0d      	ldr	r5, [pc, #52]	; (80084c8 <RemoteConfig::HandleDisplayGet()+0x44>)
 8008492:	7c19      	ldrb	r1, [r3, #16]
 8008494:	4a0d      	ldr	r2, [pc, #52]	; (80084cc <RemoteConfig::HandleDisplayGet()+0x48>)
 8008496:	4b0e      	ldr	r3, [pc, #56]	; (80084d0 <RemoteConfig::HandleDisplayGet()+0x4c>)
 8008498:	4604      	mov	r4, r0
 800849a:	2900      	cmp	r1, #0
 800849c:	bf18      	it	ne
 800849e:	4613      	movne	r3, r2
 80084a0:	6828      	ldr	r0, [r5, #0]
 80084a2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80084a6:	4a0b      	ldr	r2, [pc, #44]	; (80084d4 <RemoteConfig::HandleDisplayGet()+0x50>)
 80084a8:	f00b f8d6 	bl	8013658 <snprintf>
 80084ac:	f642 1305 	movw	r3, #10501	; 0x2905
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	b282      	uxth	r2, r0
 80084b4:	69a3      	ldr	r3, [r4, #24]
 80084b6:	6829      	ldr	r1, [r5, #0]
 80084b8:	7d20      	ldrb	r0, [r4, #20]
 80084ba:	f006 ff5f 	bl	800f37c <udp_send>
 80084be:	b003      	add	sp, #12
 80084c0:	bd30      	pop	{r4, r5, pc}
 80084c2:	4770      	bx	lr
 80084c4:	2000a0d8 	ldrdcs	sl, [r0], -r8
 80084c8:	20000094 	mulcs	r0, r4, r0
 80084cc:	080159da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, fp, ip, lr}
 80084d0:	080159d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, fp, ip, lr}
 80084d4:	080159de 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, fp, ip, lr}

080084d8 <RemoteConfig::HandleTftpGet()>:
 80084d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084da:	4604      	mov	r4, r0
 80084dc:	f000 fd9e 	bl	800901c <RemoteConfig::PlatformHandleTftpGet()>
 80084e0:	69e3      	ldr	r3, [r4, #28]
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	d116      	bne.n	8008514 <RemoteConfig::HandleTftpGet()+0x3c>
 80084e6:	f894 1020 	ldrb.w	r1, [r4, #32]
 80084ea:	4d0b      	ldr	r5, [pc, #44]	; (8008518 <RemoteConfig::HandleTftpGet()+0x40>)
 80084ec:	4a0b      	ldr	r2, [pc, #44]	; (800851c <RemoteConfig::HandleTftpGet()+0x44>)
 80084ee:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <RemoteConfig::HandleTftpGet()+0x48>)
 80084f0:	6828      	ldr	r0, [r5, #0]
 80084f2:	2900      	cmp	r1, #0
 80084f4:	bf08      	it	eq
 80084f6:	4613      	moveq	r3, r2
 80084f8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80084fc:	4a09      	ldr	r2, [pc, #36]	; (8008524 <RemoteConfig::HandleTftpGet()+0x4c>)
 80084fe:	f00b f8ab 	bl	8013658 <snprintf>
 8008502:	f642 1305 	movw	r3, #10501	; 0x2905
 8008506:	b282      	uxth	r2, r0
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	6829      	ldr	r1, [r5, #0]
 800850c:	69a3      	ldr	r3, [r4, #24]
 800850e:	7d20      	ldrb	r0, [r4, #20]
 8008510:	f006 ff34 	bl	800f37c <udp_send>
 8008514:	b003      	add	sp, #12
 8008516:	bd30      	pop	{r4, r5, pc}
 8008518:	20000094 	mulcs	r0, r4, r0
 800851c:	080159da 	stmdaeq	r1, {r1, r3, r4, r6, r7, r8, fp, ip, lr}
 8008520:	080159d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, fp, ip, lr}
 8008524:	080159ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, fp, ip, lr}

08008528 <RemoteConfig::HandleVersion()>:
 8008528:	69c3      	ldr	r3, [r0, #28]
 800852a:	2b08      	cmp	r3, #8
 800852c:	d114      	bne.n	8008558 <RemoteConfig::HandleVersion()+0x30>
 800852e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008530:	4d0a      	ldr	r5, [pc, #40]	; (800855c <RemoteConfig::HandleVersion()+0x34>)
 8008532:	4604      	mov	r4, r0
 8008534:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008538:	4b09      	ldr	r3, [pc, #36]	; (8008560 <RemoteConfig::HandleVersion()+0x38>)
 800853a:	4a0a      	ldr	r2, [pc, #40]	; (8008564 <RemoteConfig::HandleVersion()+0x3c>)
 800853c:	6828      	ldr	r0, [r5, #0]
 800853e:	f00b f88b 	bl	8013658 <snprintf>
 8008542:	f642 1305 	movw	r3, #10501	; 0x2905
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	b282      	uxth	r2, r0
 800854a:	69a3      	ldr	r3, [r4, #24]
 800854c:	6829      	ldr	r1, [r5, #0]
 800854e:	7d20      	ldrb	r0, [r4, #20]
 8008550:	f006 ff14 	bl	800f37c <udp_send>
 8008554:	b003      	add	sp, #12
 8008556:	bd30      	pop	{r4, r5, pc}
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20000094 	mulcs	r0, r4, r0
 8008560:	2000a17e 	andcs	sl, r0, lr, ror r1
 8008564:	080159f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, fp, ip, lr}

08008568 <RemoteConfig::HandleUptime()>:
 8008568:	7bc3      	ldrb	r3, [r0, #15]
 800856a:	b1e3      	cbz	r3, 80085a6 <RemoteConfig::HandleUptime()+0x3e>
 800856c:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <RemoteConfig::HandleUptime()+0x40>)
 800856e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	69c3      	ldr	r3, [r0, #28]
 8008574:	4604      	mov	r4, r0
 8008576:	2b07      	cmp	r3, #7
 8008578:	d113      	bne.n	80085a2 <RemoteConfig::HandleUptime()+0x3a>
 800857a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800857e:	4d0b      	ldr	r5, [pc, #44]	; (80085ac <RemoteConfig::HandleUptime()+0x44>)
 8008580:	fbb2 f3f3 	udiv	r3, r2, r3
 8008584:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008588:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <RemoteConfig::HandleUptime()+0x48>)
 800858a:	6828      	ldr	r0, [r5, #0]
 800858c:	f00b f864 	bl	8013658 <snprintf>
 8008590:	f642 1305 	movw	r3, #10501	; 0x2905
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	b282      	uxth	r2, r0
 8008598:	69a3      	ldr	r3, [r4, #24]
 800859a:	6829      	ldr	r1, [r5, #0]
 800859c:	7d20      	ldrb	r0, [r4, #20]
 800859e:	f006 feed 	bl	800f37c <udp_send>
 80085a2:	b003      	add	sp, #12
 80085a4:	bd30      	pop	{r4, r5, pc}
 80085a6:	4770      	bx	lr
 80085a8:	2000a1e4 	andcs	sl, r0, r4, ror #3
 80085ac:	20000094 	mulcs	r0, r4, r0
 80085b0:	080159fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}

080085b4 <Display::Status(Display7SegmentMessage)>:
 80085b4:	7c43      	ldrb	r3, [r0, #17]
 80085b6:	b1bb      	cbz	r3, 80085e8 <Display::Status(Display7SegmentMessage)+0x34>
 80085b8:	b513      	push	{r0, r1, r4, lr}
 80085ba:	2312      	movs	r3, #18
 80085bc:	43c9      	mvns	r1, r1
 80085be:	4604      	mov	r4, r0
 80085c0:	f88d 3004 	strb.w	r3, [sp, #4]
 80085c4:	7a00      	ldrb	r0, [r0, #8]
 80085c6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80085ca:	f88d 3005 	strb.w	r3, [sp, #5]
 80085ce:	f88d 1006 	strb.w	r1, [sp, #6]
 80085d2:	f00c fb81 	bl	8014cd8 <gd32_i2c_set_address>
 80085d6:	68e0      	ldr	r0, [r4, #12]
 80085d8:	f00c fb76 	bl	8014cc8 <gd32_i2c_set_baudrate>
 80085dc:	2103      	movs	r1, #3
 80085de:	a801      	add	r0, sp, #4
 80085e0:	f00c fb80 	bl	8014ce4 <gd32_i2c_write>
 80085e4:	b002      	add	sp, #8
 80085e6:	bd10      	pop	{r4, pc}
 80085e8:	4770      	bx	lr
	...

080085ec <RemoteConfig::HandleDisplaySet()>:
 80085ec:	b508      	push	{r3, lr}
 80085ee:	69c3      	ldr	r3, [r0, #28]
 80085f0:	2b09      	cmp	r3, #9
 80085f2:	d10a      	bne.n	800860a <RemoteConfig::HandleDisplaySet()+0x1e>
 80085f4:	4b05      	ldr	r3, [pc, #20]	; (800860c <RemoteConfig::HandleDisplaySet()+0x20>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	7a59      	ldrb	r1, [r3, #9]
 80085fa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80085fe:	4259      	negs	r1, r3
 8008600:	4159      	adcs	r1, r3
 8008602:	4b03      	ldr	r3, [pc, #12]	; (8008610 <RemoteConfig::HandleDisplaySet()+0x24>)
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	f7ff fb67 	bl	8007cd8 <Display::SetSleep(bool)>
 800860a:	bd08      	pop	{r3, pc}
 800860c:	20000094 	mulcs	r0, r4, r0
 8008610:	2000a0d8 	ldrdcs	sl, [r0], -r8

08008614 <RemoteConfig::HandleTftpSet()>:
 8008614:	69c3      	ldr	r3, [r0, #28]
 8008616:	2b06      	cmp	r3, #6
 8008618:	d127      	bne.n	800866a <RemoteConfig::HandleTftpSet()+0x56>
 800861a:	b570      	push	{r4, r5, r6, lr}
 800861c:	4b13      	ldr	r3, [pc, #76]	; (800866c <RemoteConfig::HandleTftpSet()+0x58>)
 800861e:	4e14      	ldr	r6, [pc, #80]	; (8008670 <RemoteConfig::HandleTftpSet()+0x5c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4604      	mov	r4, r0
 8008624:	799b      	ldrb	r3, [r3, #6]
 8008626:	6835      	ldr	r5, [r6, #0]
 8008628:	2b30      	cmp	r3, #48	; 0x30
 800862a:	bf14      	ite	ne
 800862c:	2301      	movne	r3, #1
 800862e:	2300      	moveq	r3, #0
 8008630:	f880 3020 	strb.w	r3, [r0, #32]
 8008634:	d012      	beq.n	800865c <RemoteConfig::HandleTftpSet()+0x48>
 8008636:	4628      	mov	r0, r5
 8008638:	2100      	movs	r1, #0
 800863a:	f7ff fb4d 	bl	8007cd8 <Display::SetSleep(bool)>
 800863e:	6835      	ldr	r5, [r6, #0]
 8008640:	490c      	ldr	r1, [pc, #48]	; (8008674 <RemoteConfig::HandleTftpSet()+0x60>)
 8008642:	4628      	mov	r0, r5
 8008644:	f7ff faea 	bl	8007c1c <Display::TextStatus(char const*)>
 8008648:	f244 0171 	movw	r1, #16497	; 0x4071
 800864c:	4628      	mov	r0, r5
 800864e:	f7ff ffb1 	bl	80085b4 <Display::Status(Display7SegmentMessage)>
 8008652:	4620      	mov	r0, r4
 8008654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008658:	f000 bcd8 	b.w	800900c <RemoteConfig::PlatformHandleTftpSet()>
 800865c:	4906      	ldr	r1, [pc, #24]	; (8008678 <RemoteConfig::HandleTftpSet()+0x64>)
 800865e:	4628      	mov	r0, r5
 8008660:	f7ff fadc 	bl	8007c1c <Display::TextStatus(char const*)>
 8008664:	f248 0171 	movw	r1, #32881	; 0x8071
 8008668:	e7f0      	b.n	800864c <RemoteConfig::HandleTftpSet()+0x38>
 800866a:	4770      	bx	lr
 800866c:	20000094 	mulcs	r0, r4, r0
 8008670:	2000a0d8 	ldrdcs	sl, [r0], -r8
 8008674:	08015a0b 	stmdaeq	r1, {r0, r1, r3, r9, fp, ip, lr}
 8008678:	08015a1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, fp, ip, lr}

0800867c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800867c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	2500      	movs	r5, #0
 8008682:	461f      	mov	r7, r3
 8008684:	6083      	str	r3, [r0, #8]
 8008686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800868a:	4690      	mov	r8, r2
 800868c:	4689      	mov	r9, r1
 800868e:	4e12      	ldr	r6, [pc, #72]	; (80086d8 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x5c>)
 8008690:	e9c0 3505 	strd	r3, r5, [r0, #20]
 8008694:	f8df a044 	ldr.w	sl, [pc, #68]	; 80086dc <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x60>
 8008698:	4b11      	ldr	r3, [pc, #68]	; (80086e0 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x64>)
 800869a:	e9c0 1200 	strd	r1, r2, [r0]
 800869e:	4604      	mov	r4, r0
 80086a0:	6018      	str	r0, [r3, #0]
 80086a2:	4631      	mov	r1, r6
 80086a4:	60c5      	str	r5, [r0, #12]
 80086a6:	8205      	strh	r5, [r0, #16]
 80086a8:	61c5      	str	r5, [r0, #28]
 80086aa:	f880 5020 	strb.w	r5, [r0, #32]
 80086ae:	f8da 0000 	ldr.w	r0, [sl]
 80086b2:	f007 fb2e 	bl	800fd12 <Network::MacAddressCopyTo(unsigned char*)>
 80086b6:	f642 1105 	movw	r1, #10501	; 0x2905
 80086ba:	f8da 0000 	ldr.w	r0, [sl]
 80086be:	f886 9006 	strb.w	r9, [r6, #6]
 80086c2:	f886 8007 	strb.w	r8, [r6, #7]
 80086c6:	7237      	strb	r7, [r6, #8]
 80086c8:	7275      	strb	r5, [r6, #9]
 80086ca:	f007 fb1c 	bl	800fd06 <Network::Begin(unsigned short)>
 80086ce:	6160      	str	r0, [r4, #20]
 80086d0:	4620      	mov	r0, r4
 80086d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d6:	bf00      	nop
 80086d8:	20000098 	mulcs	r0, r8, r0
 80086dc:	20008aa8 	andcs	r8, r0, r8, lsr #21
 80086e0:	200000bc 	strhcs	r0, [r0], -ip

080086e4 <RemoteConfig::GetStringNode() const>:
 80086e4:	2012      	movs	r0, #18
 80086e6:	4b03      	ldr	r3, [pc, #12]	; (80086f4 <RemoteConfig::GetStringNode() const+0x10>)
 80086e8:	799a      	ldrb	r2, [r3, #6]
 80086ea:	4b03      	ldr	r3, [pc, #12]	; (80086f8 <RemoteConfig::GetStringNode() const+0x14>)
 80086ec:	fb00 3002 	mla	r0, r0, r2, r3
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20000098 	mulcs	r0, r8, r0
 80086f8:	08015a93 	stmdaeq	r1, {r0, r1, r4, r7, r9, fp, ip, lr}

080086fc <RemoteConfig::GetStringOutput() const>:
 80086fc:	200c      	movs	r0, #12
 80086fe:	4b03      	ldr	r3, [pc, #12]	; (800870c <RemoteConfig::GetStringOutput() const+0x10>)
 8008700:	79da      	ldrb	r2, [r3, #7]
 8008702:	4b03      	ldr	r3, [pc, #12]	; (8008710 <RemoteConfig::GetStringOutput() const+0x14>)
 8008704:	fb00 3002 	mla	r0, r0, r2, r3
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	20000098 	mulcs	r0, r8, r0
 8008710:	08015b59 	stmdaeq	r1, {r0, r3, r4, r6, r8, r9, fp, ip, lr}

08008714 <RemoteConfig::SetDisable(bool)>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4604      	mov	r4, r0
 8008718:	7b03      	ldrb	r3, [r0, #12]
 800871a:	b161      	cbz	r1, 8008736 <RemoteConfig::SetDisable(bool)+0x22>
 800871c:	b953      	cbnz	r3, 8008734 <RemoteConfig::SetDisable(bool)+0x20>
 800871e:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <RemoteConfig::SetDisable(bool)+0x3c>)
 8008720:	f642 1105 	movw	r1, #10501	; 0x2905
 8008724:	6818      	ldr	r0, [r3, #0]
 8008726:	f007 faf1 	bl	800fd0c <Network::End(unsigned short)>
 800872a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800872e:	6163      	str	r3, [r4, #20]
 8008730:	2301      	movs	r3, #1
 8008732:	7323      	strb	r3, [r4, #12]
 8008734:	bd38      	pop	{r3, r4, r5, pc}
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0fc      	beq.n	8008734 <RemoteConfig::SetDisable(bool)+0x20>
 800873a:	4b05      	ldr	r3, [pc, #20]	; (8008750 <RemoteConfig::SetDisable(bool)+0x3c>)
 800873c:	460d      	mov	r5, r1
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	f642 1105 	movw	r1, #10501	; 0x2905
 8008744:	f007 fadf 	bl	800fd06 <Network::Begin(unsigned short)>
 8008748:	7325      	strb	r5, [r4, #12]
 800874a:	6160      	str	r0, [r4, #20]
 800874c:	e7f2      	b.n	8008734 <RemoteConfig::SetDisable(bool)+0x20>
 800874e:	bf00      	nop
 8008750:	20008aa8 	andcs	r8, r0, r8, lsr #21

08008754 <RemoteConfig::SetDisplayName(char const*)>:
 8008754:	2217      	movs	r2, #23
 8008756:	4809      	ldr	r0, [pc, #36]	; (800877c <RemoteConfig::SetDisplayName(char const*)+0x28>)
 8008758:	b508      	push	{r3, lr}
 800875a:	1e4b      	subs	r3, r1, #1
 800875c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008760:	b911      	cbnz	r1, 8008768 <RemoteConfig::SetDisplayName(char const*)+0x14>
 8008762:	f00a fd37 	bl	80131d4 <memset>
 8008766:	e003      	b.n	8008770 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 8008768:	3a01      	subs	r2, #1
 800876a:	f800 1b01 	strb.w	r1, [r0], #1
 800876e:	d1f5      	bne.n	800875c <RemoteConfig::SetDisplayName(char const*)+0x8>
 8008770:	2200      	movs	r2, #0
 8008772:	4b03      	ldr	r3, [pc, #12]	; (8008780 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 8008774:	f883 2020 	strb.w	r2, [r3, #32]
 8008778:	bd08      	pop	{r3, pc}
 800877a:	bf00      	nop
 800877c:	200000a1 	andcs	r0, r0, r1, lsr #1
 8008780:	20000098 	mulcs	r0, r8, r0

08008784 <RemoteConfig::HandleGet(void*, unsigned int)>:
 8008784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008786:	4604      	mov	r4, r0
 8008788:	4616      	mov	r6, r2
 800878a:	460d      	mov	r5, r1
 800878c:	4f28      	ldr	r7, [pc, #160]	; (8008830 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800878e:	b085      	sub	sp, #20
 8008790:	b9a9      	cbnz	r1, 80087be <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 8008792:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	aa03      	add	r2, sp, #12
 800879a:	3105      	adds	r1, #5
 800879c:	9303      	str	r3, [sp, #12]
 800879e:	f000 fc0b 	bl	8008fb8 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 80087a2:	1e03      	subs	r3, r0, #0
 80087a4:	da1b      	bge.n	80087de <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 80087a6:	f642 1305 	movw	r3, #10501	; 0x2905
 80087aa:	220b      	movs	r2, #11
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	4921      	ldr	r1, [pc, #132]	; (8008834 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 80087b0:	69a3      	ldr	r3, [r4, #24]
 80087b2:	7d20      	ldrb	r0, [r4, #20]
 80087b4:	f006 fde2 	bl	800f37c <udp_send>
 80087b8:	200c      	movs	r0, #12
 80087ba:	b005      	add	sp, #20
 80087bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087be:	9203      	str	r2, [sp, #12]
 80087c0:	aa03      	add	r2, sp, #12
 80087c2:	6039      	str	r1, [r7, #0]
 80087c4:	f000 fbf8 	bl	8008fb8 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 80087c8:	1e03      	subs	r3, r0, #0
 80087ca:	da08      	bge.n	80087de <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 80087cc:	2e0b      	cmp	r6, #11
 80087ce:	4632      	mov	r2, r6
 80087d0:	4628      	mov	r0, r5
 80087d2:	bf28      	it	cs
 80087d4:	220b      	movcs	r2, #11
 80087d6:	4917      	ldr	r1, [pc, #92]	; (8008834 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 80087d8:	f00a fcda 	bl	8013190 <memcpy>
 80087dc:	e7ec      	b.n	80087b8 <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 80087de:	221c      	movs	r2, #28
 80087e0:	4353      	muls	r3, r2
 80087e2:	4915      	ldr	r1, [pc, #84]	; (8008838 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 80087e4:	18ca      	adds	r2, r1, r3
 80087e6:	6852      	ldr	r2, [r2, #4]
 80087e8:	58cb      	ldr	r3, [r1, r3]
 80087ea:	ea4f 0c62 	mov.w	ip, r2, asr #1
 80087ee:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80087f2:	07d2      	lsls	r2, r2, #31
 80087f4:	bf48      	it	mi
 80087f6:	f854 200c 	ldrmi.w	r2, [r4, ip]
 80087fa:	a903      	add	r1, sp, #12
 80087fc:	bf48      	it	mi
 80087fe:	58d3      	ldrmi	r3, [r2, r3]
 8008800:	4798      	blx	r3
 8008802:	b95d      	cbnz	r5, 800881c <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 8008804:	f642 1305 	movw	r3, #10501	; 0x2905
 8008808:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	69a3      	ldr	r3, [r4, #24]
 8008812:	7d20      	ldrb	r0, [r4, #20]
 8008814:	f006 fdb2 	bl	800f37c <udp_send>
 8008818:	9803      	ldr	r0, [sp, #12]
 800881a:	e7ce      	b.n	80087ba <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 800881c:	9a03      	ldr	r2, [sp, #12]
 800881e:	4628      	mov	r0, r5
 8008820:	42b2      	cmp	r2, r6
 8008822:	bf28      	it	cs
 8008824:	4632      	movcs	r2, r6
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	f00a fcbd 	bl	80131a6 <memmove>
 800882c:	e7f4      	b.n	8008818 <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 800882e:	bf00      	nop
 8008830:	20000094 	mulcs	r0, r4, r0
 8008834:	08015a30 	stmdaeq	r1, {r4, r5, r9, fp, ip, lr}
 8008838:	08015d20 	stmdaeq	r1, {r5, r8, sl, fp, ip, lr}

0800883c <RemoteConfig::HandleGetNoParams()>:
 800883c:	2200      	movs	r2, #0
 800883e:	4611      	mov	r1, r2
 8008840:	f7ff bfa0 	b.w	8008784 <RemoteConfig::HandleGet(void*, unsigned int)>

08008844 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 8008844:	b510      	push	{r4, lr}
 8008846:	460c      	mov	r4, r1
 8008848:	4b07      	ldr	r3, [pc, #28]	; (8008868 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800884a:	b08a      	sub	sp, #40	; 0x28
 800884c:	6819      	ldr	r1, [r3, #0]
 800884e:	a801      	add	r0, sp, #4
 8008850:	f000 fa0e 	bl	8008c70 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008854:	4905      	ldr	r1, [pc, #20]	; (800886c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 8008856:	4623      	mov	r3, r4
 8008858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800885c:	6809      	ldr	r1, [r1, #0]
 800885e:	a801      	add	r0, sp, #4
 8008860:	f000 fb2a 	bl	8008eb8 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 8008864:	b00a      	add	sp, #40	; 0x28
 8008866:	bd10      	pop	{r4, pc}
 8008868:	2000a0a4 	andcs	sl, r0, r4, lsr #1
 800886c:	20000094 	mulcs	r0, r4, r0

08008870 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 8008870:	b510      	push	{r4, lr}
 8008872:	460c      	mov	r4, r1
 8008874:	4b07      	ldr	r3, [pc, #28]	; (8008894 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 8008876:	b09a      	sub	sp, #104	; 0x68
 8008878:	6819      	ldr	r1, [r3, #0]
 800887a:	a801      	add	r0, sp, #4
 800887c:	f007 fcc4 	bl	8010208 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8008880:	4905      	ldr	r1, [pc, #20]	; (8008898 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 8008882:	4623      	mov	r3, r4
 8008884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008888:	6809      	ldr	r1, [r1, #0]
 800888a:	a801      	add	r0, sp, #4
 800888c:	f007 fe98 	bl	80105c0 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 8008890:	b01a      	add	sp, #104	; 0x68
 8008892:	bd10      	pop	{r4, pc}
 8008894:	2000a0a0 	andcs	sl, r0, r0, lsr #1
 8008898:	20000094 	mulcs	r0, r4, r0

0800889c <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800889c:	b510      	push	{r4, lr}
 800889e:	460c      	mov	r4, r1
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 80088a2:	b0a4      	sub	sp, #144	; 0x90
 80088a4:	6819      	ldr	r1, [r3, #0]
 80088a6:	a801      	add	r0, sp, #4
 80088a8:	f002 fe6e 	bl	800b588 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 80088ac:	4905      	ldr	r1, [pc, #20]	; (80088c4 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 80088ae:	4623      	mov	r3, r4
 80088b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088b4:	6809      	ldr	r1, [r1, #0]
 80088b6:	a801      	add	r0, sp, #4
 80088b8:	f003 fa14 	bl	800bce4 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 80088bc:	b024      	add	sp, #144	; 0x90
 80088be:	bd10      	pop	{r4, pc}
 80088c0:	2000a0ac 	andcs	sl, r0, ip, lsr #1
 80088c4:	20000094 	mulcs	r0, r4, r0

080088c8 <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
 80088c8:	b510      	push	{r4, lr}
 80088ca:	460c      	mov	r4, r1
 80088cc:	4b07      	ldr	r3, [pc, #28]	; (80088ec <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x24>)
 80088ce:	b086      	sub	sp, #24
 80088d0:	6819      	ldr	r1, [r3, #0]
 80088d2:	4668      	mov	r0, sp
 80088d4:	f004 f96e 	bl	800cbb4 <E131Params::E131Params(E131ParamsStore*)>
 80088d8:	4905      	ldr	r1, [pc, #20]	; (80088f0 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x28>)
 80088da:	4623      	mov	r3, r4
 80088dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088e0:	4668      	mov	r0, sp
 80088e2:	6809      	ldr	r1, [r1, #0]
 80088e4:	f004 fc1a 	bl	800d11c <E131Params::Save(char*, unsigned int, unsigned int&)>
 80088e8:	b006      	add	sp, #24
 80088ea:	bd10      	pop	{r4, pc}
 80088ec:	2000a0b4 	strhcs	sl, [r0], -r4
 80088f0:	20000094 	mulcs	r0, r4, r0

080088f4 <RemoteConfig::HandleGetParamsTxt(unsigned int&)>:
 80088f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088f6:	460c      	mov	r4, r1
 80088f8:	4b07      	ldr	r3, [pc, #28]	; (8008918 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x24>)
 80088fa:	4668      	mov	r0, sp
 80088fc:	6819      	ldr	r1, [r3, #0]
 80088fe:	f005 fafb 	bl	800def8 <DmxParams::DmxParams(DmxParamsStore*)>
 8008902:	4906      	ldr	r1, [pc, #24]	; (800891c <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x28>)
 8008904:	4623      	mov	r3, r4
 8008906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800890a:	4668      	mov	r0, sp
 800890c:	6809      	ldr	r1, [r1, #0]
 800890e:	f005 fc15 	bl	800e13c <DmxParams::Save(char*, unsigned int, unsigned int&)>
 8008912:	b004      	add	sp, #16
 8008914:	bd10      	pop	{r4, pc}
 8008916:	bf00      	nop
 8008918:	2000a09c 	mulcs	r0, ip, r0
 800891c:	20000094 	mulcs	r0, r4, r0

08008920 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 8008920:	b510      	push	{r4, lr}
 8008922:	460c      	mov	r4, r1
 8008924:	4b07      	ldr	r3, [pc, #28]	; (8008944 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 8008926:	b08a      	sub	sp, #40	; 0x28
 8008928:	6819      	ldr	r1, [r3, #0]
 800892a:	4668      	mov	r0, sp
 800892c:	f008 fc0e 	bl	801114c <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008930:	4905      	ldr	r1, [pc, #20]	; (8008948 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 8008932:	4623      	mov	r3, r4
 8008934:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008938:	4668      	mov	r0, sp
 800893a:	6809      	ldr	r1, [r1, #0]
 800893c:	f008 fd3e 	bl	80113bc <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 8008940:	b00a      	add	sp, #40	; 0x28
 8008942:	bd10      	pop	{r4, pc}
 8008944:	2000a098 	mulcs	r0, r8, r0
 8008948:	20000094 	mulcs	r0, r4, r0

0800894c <RemoteConfig::HandleSet(void*, unsigned int)>:
 800894c:	b530      	push	{r4, r5, lr}
 800894e:	b085      	sub	sp, #20
 8008950:	4604      	mov	r4, r0
 8008952:	9201      	str	r2, [sp, #4]
 8008954:	b9d1      	cbnz	r1, 800898c <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 8008956:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800895a:	9303      	str	r3, [sp, #12]
 800895c:	4b19      	ldr	r3, [pc, #100]	; (80089c4 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 800895e:	aa03      	add	r2, sp, #12
 8008960:	6819      	ldr	r1, [r3, #0]
 8008962:	3101      	adds	r1, #1
 8008964:	f000 fb28 	bl	8008fb8 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 8008968:	2800      	cmp	r0, #0
 800896a:	db0d      	blt.n	8008988 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 800896c:	221c      	movs	r2, #28
 800896e:	4b16      	ldr	r3, [pc, #88]	; (80089c8 <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>)
 8008970:	fb02 3300 	mla	r3, r2, r0, r3
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	1051      	asrs	r1, r2, #1
 800897a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800897e:	07d2      	lsls	r2, r2, #31
 8008980:	bf44      	itt	mi
 8008982:	5862      	ldrmi	r2, [r4, r1]
 8008984:	58d3      	ldrmi	r3, [r2, r3]
 8008986:	4798      	blx	r3
 8008988:	b005      	add	sp, #20
 800898a:	bd30      	pop	{r4, r5, pc}
 800898c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008990:	d8fa      	bhi.n	8008988 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 8008992:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 8008994:	460d      	mov	r5, r1
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	07d9      	lsls	r1, r3, #31
 800899a:	d50b      	bpl.n	80089b4 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 800899c:	782b      	ldrb	r3, [r5, #0]
 800899e:	2b7b      	cmp	r3, #123	; 0x7b
 80089a0:	d108      	bne.n	80089b4 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 80089a2:	1e51      	subs	r1, r2, #1
 80089a4:	4628      	mov	r0, r5
 80089a6:	2200      	movs	r2, #0
 80089a8:	b289      	uxth	r1, r1
 80089aa:	f009 fce7 	bl	801237c <properties::convert_json_file(char*, unsigned short, bool)>
 80089ae:	1e02      	subs	r2, r0, #0
 80089b0:	ddea      	ble.n	8008988 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 80089b2:	b292      	uxth	r2, r2
 80089b4:	4b03      	ldr	r3, [pc, #12]	; (80089c4 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 80089b6:	61e2      	str	r2, [r4, #28]
 80089b8:	4620      	mov	r0, r4
 80089ba:	601d      	str	r5, [r3, #0]
 80089bc:	aa01      	add	r2, sp, #4
 80089be:	1c69      	adds	r1, r5, #1
 80089c0:	e7d0      	b.n	8008964 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 80089c2:	bf00      	nop
 80089c4:	20000094 	mulcs	r0, r4, r0
 80089c8:	08015d20 	stmdaeq	r1, {r5, r8, sl, fp, ip, lr}
 80089cc:	2000a0d4 	ldrdcs	sl, [r0], -r4

080089d0 <RemoteConfig::Run()>:
 80089d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80089d4:	7b05      	ldrb	r5, [r0, #12]
 80089d6:	2d00      	cmp	r5, #0
 80089d8:	d156      	bne.n	8008a88 <RemoteConfig::Run()+0xb8>
 80089da:	4e45      	ldr	r6, [pc, #276]	; (8008af0 <RemoteConfig::Run()+0x120>)
 80089dc:	4604      	mov	r4, r0
 80089de:	f100 0218 	add.w	r2, r0, #24
 80089e2:	4631      	mov	r1, r6
 80089e4:	7d00      	ldrb	r0, [r0, #20]
 80089e6:	f10d 030e 	add.w	r3, sp, #14
 80089ea:	f006 fca1 	bl	800f330 <udp_recv2>
 80089ee:	2803      	cmp	r0, #3
 80089f0:	61e0      	str	r0, [r4, #28]
 80089f2:	d949      	bls.n	8008a88 <RemoteConfig::Run()+0xb8>
 80089f4:	6831      	ldr	r1, [r6, #0]
 80089f6:	1e43      	subs	r3, r0, #1
 80089f8:	5cca      	ldrb	r2, [r1, r3]
 80089fa:	2a0a      	cmp	r2, #10
 80089fc:	bf18      	it	ne
 80089fe:	4603      	movne	r3, r0
 8008a00:	61e3      	str	r3, [r4, #28]
 8008a02:	7808      	ldrb	r0, [r1, #0]
 8008a04:	283f      	cmp	r0, #63	; 0x3f
 8008a06:	d137      	bne.n	8008a78 <RemoteConfig::Run()+0xa8>
 8008a08:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8008af4 <RemoteConfig::Run()+0x124>
 8008a0c:	462a      	mov	r2, r5
 8008a0e:	4667      	mov	r7, ip
 8008a10:	3b01      	subs	r3, #1
 8008a12:	61e3      	str	r3, [r4, #28]
 8008a14:	f89c 500e 	ldrb.w	r5, [ip, #14]
 8008a18:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8008a1c:	b16d      	cbz	r5, 8008a3a <RemoteConfig::Run()+0x6a>
 8008a1e:	4283      	cmp	r3, r0
 8008a20:	d80d      	bhi.n	8008a3e <RemoteConfig::Run()+0x6e>
 8008a22:	3201      	adds	r2, #1
 8008a24:	2a09      	cmp	r2, #9
 8008a26:	f10c 0c10 	add.w	ip, ip, #16
 8008a2a:	d1f3      	bne.n	8008a14 <RemoteConfig::Run()+0x44>
 8008a2c:	f642 1305 	movw	r3, #10501	; 0x2905
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	2208      	movs	r2, #8
 8008a34:	69a3      	ldr	r3, [r4, #24]
 8008a36:	4930      	ldr	r1, [pc, #192]	; (8008af8 <RemoteConfig::Run()+0x128>)
 8008a38:	e04e      	b.n	8008ad8 <RemoteConfig::Run()+0x108>
 8008a3a:	4283      	cmp	r3, r0
 8008a3c:	d1f1      	bne.n	8008a22 <RemoteConfig::Run()+0x52>
 8008a3e:	460e      	mov	r6, r1
 8008a40:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008a44:	4408      	add	r0, r1
 8008a46:	3d01      	subs	r5, #1
 8008a48:	4286      	cmp	r6, r0
 8008a4a:	d10b      	bne.n	8008a64 <RemoteConfig::Run()+0x94>
 8008a4c:	0113      	lsls	r3, r2, #4
 8008a4e:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 8008a52:	6852      	ldr	r2, [r2, #4]
 8008a54:	58fb      	ldr	r3, [r7, r3]
 8008a56:	1051      	asrs	r1, r2, #1
 8008a58:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008a5c:	07d2      	lsls	r2, r2, #31
 8008a5e:	d408      	bmi.n	8008a72 <RemoteConfig::Run()+0xa2>
 8008a60:	4798      	blx	r3
 8008a62:	e011      	b.n	8008a88 <RemoteConfig::Run()+0xb8>
 8008a64:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008a68:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 8008a6c:	45f0      	cmp	r8, lr
 8008a6e:	d0eb      	beq.n	8008a48 <RemoteConfig::Run()+0x78>
 8008a70:	e7d7      	b.n	8008a22 <RemoteConfig::Run()+0x52>
 8008a72:	5862      	ldr	r2, [r4, r1]
 8008a74:	58d3      	ldr	r3, [r2, r3]
 8008a76:	e7f3      	b.n	8008a60 <RemoteConfig::Run()+0x90>
 8008a78:	7b62      	ldrb	r2, [r4, #13]
 8008a7a:	b92a      	cbnz	r2, 8008a88 <RemoteConfig::Run()+0xb8>
 8008a7c:	2823      	cmp	r0, #35	; 0x23
 8008a7e:	d106      	bne.n	8008a8e <RemoteConfig::Run()+0xbe>
 8008a80:	4611      	mov	r1, r2
 8008a82:	4620      	mov	r0, r4
 8008a84:	f7ff ff62 	bl	800894c <RemoteConfig::HandleSet(void*, unsigned int)>
 8008a88:	b004      	add	sp, #16
 8008a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8e:	2821      	cmp	r0, #33	; 0x21
 8008a90:	d1fa      	bne.n	8008a88 <RemoteConfig::Run()+0xb8>
 8008a92:	3b01      	subs	r3, #1
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	61e3      	str	r3, [r4, #28]
 8008a98:	d918      	bls.n	8008acc <RemoteConfig::Run()+0xfc>
 8008a9a:	460a      	mov	r2, r1
 8008a9c:	4608      	mov	r0, r1
 8008a9e:	4d17      	ldr	r5, [pc, #92]	; (8008afc <RemoteConfig::Run()+0x12c>)
 8008aa0:	f101 0c05 	add.w	ip, r1, #5
 8008aa4:	4560      	cmp	r0, ip
 8008aa6:	d01b      	beq.n	8008ae0 <RemoteConfig::Run()+0x110>
 8008aa8:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008aac:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8008ab0:	42b7      	cmp	r7, r6
 8008ab2:	d0f7      	beq.n	8008aa4 <RemoteConfig::Run()+0xd4>
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d909      	bls.n	8008acc <RemoteConfig::Run()+0xfc>
 8008ab8:	4b11      	ldr	r3, [pc, #68]	; (8008b00 <RemoteConfig::Run()+0x130>)
 8008aba:	3108      	adds	r1, #8
 8008abc:	428a      	cmp	r2, r1
 8008abe:	d015      	beq.n	8008aec <RemoteConfig::Run()+0x11c>
 8008ac0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ac4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008ac8:	4285      	cmp	r5, r0
 8008aca:	d0f7      	beq.n	8008abc <RemoteConfig::Run()+0xec>
 8008acc:	f642 1305 	movw	r3, #10501	; 0x2905
 8008ad0:	2208      	movs	r2, #8
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	69a3      	ldr	r3, [r4, #24]
 8008ad6:	490b      	ldr	r1, [pc, #44]	; (8008b04 <RemoteConfig::Run()+0x134>)
 8008ad8:	7d20      	ldrb	r0, [r4, #20]
 8008ada:	f006 fc4f 	bl	800f37c <udp_send>
 8008ade:	e7d3      	b.n	8008a88 <RemoteConfig::Run()+0xb8>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	4a09      	ldr	r2, [pc, #36]	; (8008b08 <RemoteConfig::Run()+0x138>)
 8008ae4:	011b      	lsls	r3, r3, #4
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	58d3      	ldr	r3, [r2, r3]
 8008aea:	e7b9      	b.n	8008a60 <RemoteConfig::Run()+0x90>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e7f8      	b.n	8008ae2 <RemoteConfig::Run()+0x112>
 8008af0:	20000094 	mulcs	r0, r4, r0
 8008af4:	08015bec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, r9, fp, ip, lr}
 8008af8:	08015a54 	stmdaeq	r1, {r2, r4, r6, r9, fp, ip, lr}
 8008afc:	08015a3c 	stmdaeq	r1, {r2, r3, r4, r5, r9, fp, ip, lr}
 8008b00:	08015a42 	stmdaeq	r1, {r1, r6, r9, fp, ip, lr}
 8008b04:	08015a4b 	stmdaeq	r1, {r0, r1, r3, r6, r9, fp, ip, lr}
 8008b08:	08015c7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, sl, fp, ip, lr}

08008b0c <RemoteConfig::HandleSetRconfig()>:
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4b08      	ldr	r3, [pc, #32]	; (8008b34 <RemoteConfig::HandleSetRconfig()+0x28>)
 8008b12:	b08a      	sub	sp, #40	; 0x28
 8008b14:	6819      	ldr	r1, [r3, #0]
 8008b16:	a801      	add	r0, sp, #4
 8008b18:	f000 f8aa 	bl	8008c70 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008b1c:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <RemoteConfig::HandleSetRconfig()+0x2c>)
 8008b1e:	69e2      	ldr	r2, [r4, #28]
 8008b20:	6819      	ldr	r1, [r3, #0]
 8008b22:	a801      	add	r0, sp, #4
 8008b24:	f000 f8ba 	bl	8008c9c <RemoteConfigParams::Load(char const*, unsigned int)>
 8008b28:	4621      	mov	r1, r4
 8008b2a:	a801      	add	r0, sp, #4
 8008b2c:	f000 f9d1 	bl	8008ed2 <RemoteConfigParams::Set(RemoteConfig*)>
 8008b30:	b00a      	add	sp, #40	; 0x28
 8008b32:	bd10      	pop	{r4, pc}
 8008b34:	2000a0a4 	andcs	sl, r0, r4, lsr #1
 8008b38:	20000094 	mulcs	r0, r4, r0

08008b3c <RemoteConfig::HandleSetNetworkTxt()>:
 8008b3c:	b510      	push	{r4, lr}
 8008b3e:	4604      	mov	r4, r0
 8008b40:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 8008b42:	b09a      	sub	sp, #104	; 0x68
 8008b44:	6819      	ldr	r1, [r3, #0]
 8008b46:	a801      	add	r0, sp, #4
 8008b48:	f007 fb5e 	bl	8010208 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 8008b4e:	69e2      	ldr	r2, [r4, #28]
 8008b50:	6819      	ldr	r1, [r3, #0]
 8008b52:	a801      	add	r0, sp, #4
 8008b54:	f007 fb70 	bl	8010238 <NetworkParams::Load(char const*, unsigned int)>
 8008b58:	b01a      	add	sp, #104	; 0x68
 8008b5a:	bd10      	pop	{r4, pc}
 8008b5c:	2000a0a0 	andcs	sl, r0, r0, lsr #1
 8008b60:	20000094 	mulcs	r0, r4, r0

08008b64 <RemoteConfig::HandleSetArtnetTxt()>:
 8008b64:	b510      	push	{r4, lr}
 8008b66:	4604      	mov	r4, r0
 8008b68:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 8008b6a:	b0a4      	sub	sp, #144	; 0x90
 8008b6c:	6819      	ldr	r1, [r3, #0]
 8008b6e:	a801      	add	r0, sp, #4
 8008b70:	f002 fd0a 	bl	800b588 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8008b74:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 8008b76:	69e2      	ldr	r2, [r4, #28]
 8008b78:	6819      	ldr	r1, [r3, #0]
 8008b7a:	a801      	add	r0, sp, #4
 8008b7c:	f002 fd32 	bl	800b5e4 <ArtNetParams::Load(char const*, unsigned int)>
 8008b80:	b024      	add	sp, #144	; 0x90
 8008b82:	bd10      	pop	{r4, pc}
 8008b84:	2000a0ac 	andcs	sl, r0, ip, lsr #1
 8008b88:	20000094 	mulcs	r0, r4, r0

08008b8c <RemoteConfig::HandleSetE131Txt()>:
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	4604      	mov	r4, r0
 8008b90:	4b06      	ldr	r3, [pc, #24]	; (8008bac <RemoteConfig::HandleSetE131Txt()+0x20>)
 8008b92:	b086      	sub	sp, #24
 8008b94:	6819      	ldr	r1, [r3, #0]
 8008b96:	4668      	mov	r0, sp
 8008b98:	f004 f80c 	bl	800cbb4 <E131Params::E131Params(E131ParamsStore*)>
 8008b9c:	4b04      	ldr	r3, [pc, #16]	; (8008bb0 <RemoteConfig::HandleSetE131Txt()+0x24>)
 8008b9e:	4668      	mov	r0, sp
 8008ba0:	69e2      	ldr	r2, [r4, #28]
 8008ba2:	6819      	ldr	r1, [r3, #0]
 8008ba4:	f004 f81e 	bl	800cbe4 <E131Params::Load(char const*, unsigned int)>
 8008ba8:	b006      	add	sp, #24
 8008baa:	bd10      	pop	{r4, pc}
 8008bac:	2000a0b4 	strhcs	sl, [r0], -r4
 8008bb0:	20000094 	mulcs	r0, r4, r0

08008bb4 <RemoteConfig::HandleSetParamsTxt()>:
 8008bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <RemoteConfig::HandleSetParamsTxt()+0x20>)
 8008bba:	4668      	mov	r0, sp
 8008bbc:	6819      	ldr	r1, [r3, #0]
 8008bbe:	f005 f99b 	bl	800def8 <DmxParams::DmxParams(DmxParamsStore*)>
 8008bc2:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <RemoteConfig::HandleSetParamsTxt()+0x24>)
 8008bc4:	4668      	mov	r0, sp
 8008bc6:	69e2      	ldr	r2, [r4, #28]
 8008bc8:	6819      	ldr	r1, [r3, #0]
 8008bca:	f005 f9ad 	bl	800df28 <DmxParams::Load(char const*, unsigned int)>
 8008bce:	b004      	add	sp, #16
 8008bd0:	bd10      	pop	{r4, pc}
 8008bd2:	bf00      	nop
 8008bd4:	2000a09c 	mulcs	r0, ip, r0
 8008bd8:	20000094 	mulcs	r0, r4, r0

08008bdc <RemoteConfig::HandleSetDisplayTxt()>:
 8008bdc:	b510      	push	{r4, lr}
 8008bde:	4604      	mov	r4, r0
 8008be0:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 8008be2:	b08a      	sub	sp, #40	; 0x28
 8008be4:	6819      	ldr	r1, [r3, #0]
 8008be6:	4668      	mov	r0, sp
 8008be8:	f008 fab0 	bl	801114c <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008bec:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 8008bee:	4668      	mov	r0, sp
 8008bf0:	69e2      	ldr	r2, [r4, #28]
 8008bf2:	6819      	ldr	r1, [r3, #0]
 8008bf4:	f008 fac4 	bl	8011180 <DisplayUdfParams::Load(char const*, unsigned int)>
 8008bf8:	b00a      	add	sp, #40	; 0x28
 8008bfa:	bd10      	pop	{r4, pc}
 8008bfc:	2000a098 	mulcs	r0, r8, r0
 8008c00:	20000094 	mulcs	r0, r4, r0

08008c04 <RemoteConfig::HandleFactory()>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	2400      	movs	r4, #0
 8008c08:	4d04      	ldr	r5, [pc, #16]	; (8008c1c <RemoteConfig::HandleFactory()+0x18>)
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	6828      	ldr	r0, [r5, #0]
 8008c0e:	3401      	adds	r4, #1
 8008c10:	f008 fe20 	bl	8011854 <ConfigStore::ResetSetList(configstore::Store)>
 8008c14:	2c1c      	cmp	r4, #28
 8008c16:	d1f8      	bne.n	8008c0a <RemoteConfig::HandleFactory()+0x6>
 8008c18:	bd38      	pop	{r3, r4, r5, pc}
 8008c1a:	bf00      	nop
 8008c1c:	2000a090 	mulcs	r0, r0, r0

08008c20 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 8008c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c22:	460b      	mov	r3, r1
 8008c24:	8885      	ldrh	r5, [r0, #4]
 8008c26:	88c1      	ldrh	r1, [r0, #6]
 8008c28:	42a9      	cmp	r1, r5
 8008c2a:	d214      	bcs.n	8008c56 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	6800      	ldr	r0, [r0, #0]
 8008c30:	1a6d      	subs	r5, r5, r1
 8008c32:	4408      	add	r0, r1
 8008c34:	7a21      	ldrb	r1, [r4, #8]
 8008c36:	b91a      	cbnz	r2, 8008c40 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 8008c38:	b919      	cbnz	r1, 8008c42 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 8008c3a:	4a0a      	ldr	r2, [pc, #40]	; (8008c64 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 8008c3c:	9100      	str	r1, [sp, #0]
 8008c3e:	e002      	b.n	8008c46 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8008c40:	b159      	cbz	r1, 8008c5a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 8008c42:	9200      	str	r2, [sp, #0]
 8008c44:	4a08      	ldr	r2, [pc, #32]	; (8008c68 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 8008c46:	4629      	mov	r1, r5
 8008c48:	f00a fd06 	bl	8013658 <snprintf>
 8008c4c:	4285      	cmp	r5, r0
 8008c4e:	bfa2      	ittt	ge
 8008c50:	88e3      	ldrhge	r3, [r4, #6]
 8008c52:	181b      	addge	r3, r3, r0
 8008c54:	80e3      	strhge	r3, [r4, #6]
 8008c56:	b003      	add	sp, #12
 8008c58:	bd30      	pop	{r4, r5, pc}
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	9200      	str	r2, [sp, #0]
 8008c5e:	4a03      	ldr	r2, [pc, #12]	; (8008c6c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 8008c60:	e7f1      	b.n	8008c46 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8008c62:	bf00      	nop
 8008c64:	08015ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, ip, lr}
 8008c68:	08015c9c 	stmdaeq	r1, {r2, r3, r4, r7, sl, fp, ip, lr}
 8008c6c:	08015ca6 	stmdaeq	r1, {r1, r2, r5, r7, sl, fp, ip, lr}

08008c70 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 8008c70:	b510      	push	{r4, lr}
 8008c72:	4604      	mov	r4, r0
 8008c74:	2220      	movs	r2, #32
 8008c76:	f840 1b04 	str.w	r1, [r0], #4
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	f00a faaa 	bl	80131d4 <memset>
 8008c80:	4620      	mov	r0, r4
 8008c82:	bd10      	pop	{r4, pc}

08008c84 <RemoteConfigParams::Load()>:
 8008c84:	b508      	push	{r3, lr}
 8008c86:	2300      	movs	r3, #0
 8008c88:	4601      	mov	r1, r0
 8008c8a:	6043      	str	r3, [r0, #4]
 8008c8c:	6800      	ldr	r0, [r0, #0]
 8008c8e:	b120      	cbz	r0, 8008c9a <RemoteConfigParams::Load()+0x16>
 8008c90:	6803      	ldr	r3, [r0, #0]
 8008c92:	3104      	adds	r1, #4
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	4798      	blx	r3
 8008c98:	2001      	movs	r0, #1
 8008c9a:	bd08      	pop	{r3, pc}

08008c9c <RemoteConfigParams::Load(char const*, unsigned int)>:
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ca0:	460d      	mov	r5, r1
 8008ca2:	4616      	mov	r6, r2
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	6043      	str	r3, [r0, #4]
 8008ca8:	4602      	mov	r2, r0
 8008caa:	490a      	ldr	r1, [pc, #40]	; (8008cd4 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 8008cac:	4668      	mov	r0, sp
 8008cae:	f009 fcb7 	bl	8012620 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8008cb2:	4632      	mov	r2, r6
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	4668      	mov	r0, sp
 8008cb8:	f009 fcb6 	bl	8012628 <ReadConfigFile::Read(char const*, unsigned int)>
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	f851 0b04 	ldr.w	r0, [r1], #4
 8008cc2:	6803      	ldr	r3, [r0, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	4798      	blx	r3
 8008cc8:	4668      	mov	r0, sp
 8008cca:	f009 fcac 	bl	8012626 <ReadConfigFile::~ReadConfigFile()>
 8008cce:	b002      	add	sp, #8
 8008cd0:	bd70      	pop	{r4, r5, r6, pc}
 8008cd2:	bf00      	nop
 8008cd4:	08008d95 	stmdaeq	r0, {r0, r2, r4, r7, r8, sl, fp, pc}

08008cd8 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 8008cd8:	6843      	ldr	r3, [r0, #4]
 8008cda:	b111      	cbz	r1, 8008ce2 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	6043      	str	r3, [r0, #4]
 8008ce0:	4770      	bx	lr
 8008ce2:	ea23 0302 	bic.w	r3, r3, r2
 8008ce6:	e7fa      	b.n	8008cde <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

08008ce8 <RemoteConfigParams::callbackFunction(char const*)>:
 8008ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cea:	460d      	mov	r5, r1
 8008cec:	4604      	mov	r4, r0
 8008cee:	4923      	ldr	r1, [pc, #140]	; (8008d7c <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	f10d 0203 	add.w	r2, sp, #3
 8008cf6:	f009 fd43 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8008cfa:	b940      	cbnz	r0, 8008d0e <RemoteConfigParams::callbackFunction(char const*)+0x26>
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8008d04:	b003      	add	sp, #12
 8008d06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d0a:	f7ff bfe5 	b.w	8008cd8 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 8008d0e:	4628      	mov	r0, r5
 8008d10:	491b      	ldr	r1, [pc, #108]	; (8008d80 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 8008d12:	f10d 0203 	add.w	r2, sp, #3
 8008d16:	f009 fd33 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8008d1a:	b908      	cbnz	r0, 8008d20 <RemoteConfigParams::callbackFunction(char const*)+0x38>
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	e7ee      	b.n	8008cfe <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8008d20:	4628      	mov	r0, r5
 8008d22:	4918      	ldr	r1, [pc, #96]	; (8008d84 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 8008d24:	f10d 0203 	add.w	r2, sp, #3
 8008d28:	f009 fd2a 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8008d2c:	b908      	cbnz	r0, 8008d32 <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 8008d2e:	2204      	movs	r2, #4
 8008d30:	e7e5      	b.n	8008cfe <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8008d32:	4628      	mov	r0, r5
 8008d34:	4914      	ldr	r1, [pc, #80]	; (8008d88 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 8008d36:	f10d 0203 	add.w	r2, sp, #3
 8008d3a:	f009 fd21 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8008d3e:	b908      	cbnz	r0, 8008d44 <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 8008d40:	2208      	movs	r2, #8
 8008d42:	e7dc      	b.n	8008cfe <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8008d44:	4628      	mov	r0, r5
 8008d46:	4911      	ldr	r1, [pc, #68]	; (8008d8c <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 8008d48:	f10d 0203 	add.w	r2, sp, #3
 8008d4c:	f009 fd18 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8008d50:	b908      	cbnz	r0, 8008d56 <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 8008d52:	2220      	movs	r2, #32
 8008d54:	e7d3      	b.n	8008cfe <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8008d56:	2317      	movs	r3, #23
 8008d58:	4628      	mov	r0, r5
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	490c      	ldr	r1, [pc, #48]	; (8008d90 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 8008d5e:	ab01      	add	r3, sp, #4
 8008d60:	f104 020c 	add.w	r2, r4, #12
 8008d64:	f009 fc94 	bl	8012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8008d68:	b930      	cbnz	r0, 8008d78 <RemoteConfigParams::callbackFunction(char const*)+0x90>
 8008d6a:	9b01      	ldr	r3, [sp, #4]
 8008d6c:	4423      	add	r3, r4
 8008d6e:	7318      	strb	r0, [r3, #12]
 8008d70:	6863      	ldr	r3, [r4, #4]
 8008d72:	f043 0310 	orr.w	r3, r3, #16
 8008d76:	6063      	str	r3, [r4, #4]
 8008d78:	b003      	add	sp, #12
 8008d7a:	bd30      	pop	{r4, r5, pc}
 8008d7c:	080160ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, sp, lr}
 8008d80:	080160ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sp, lr}
 8008d84:	080160dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, sp, lr}
 8008d88:	080160ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, sp, lr}
 8008d8c:	080160f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, sp, lr}
 8008d90:	080160c1 	stmdaeq	r1, {r0, r6, r7, sp, lr}

08008d94 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 8008d94:	f7ff bfa8 	b.w	8008ce8 <RemoteConfigParams::callbackFunction(char const*)>

08008d98 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4615      	mov	r5, r2
 8008d9e:	461e      	mov	r6, r3
 8008da0:	b086      	sub	sp, #24
 8008da2:	3004      	adds	r0, #4
 8008da4:	2900      	cmp	r1, #0
 8008da6:	d041      	beq.n	8008e2c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 8008da8:	2220      	movs	r2, #32
 8008daa:	f00a f9fc 	bl	80131a6 <memmove>
 8008dae:	4633      	mov	r3, r6
 8008db0:	462a      	mov	r2, r5
 8008db2:	4937      	ldr	r1, [pc, #220]	; (8008e90 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 8008db4:	a803      	add	r0, sp, #12
 8008db6:	f009 fb93 	bl	80124e0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8008dba:	6862      	ldr	r2, [r4, #4]
 8008dbc:	4935      	ldr	r1, [pc, #212]	; (8008e94 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 8008dbe:	f002 0201 	and.w	r2, r2, #1
 8008dc2:	a803      	add	r0, sp, #12
 8008dc4:	f7ff ff2c 	bl	8008c20 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8008dc8:	6862      	ldr	r2, [r4, #4]
 8008dca:	4933      	ldr	r1, [pc, #204]	; (8008e98 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 8008dcc:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8008dd0:	a803      	add	r0, sp, #12
 8008dd2:	f7ff ff25 	bl	8008c20 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8008dd6:	6862      	ldr	r2, [r4, #4]
 8008dd8:	4930      	ldr	r1, [pc, #192]	; (8008e9c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 8008dda:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8008dde:	a803      	add	r0, sp, #12
 8008de0:	f7ff ff1e 	bl	8008c20 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8008de4:	6862      	ldr	r2, [r4, #4]
 8008de6:	492e      	ldr	r1, [pc, #184]	; (8008ea0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 8008de8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8008dec:	a803      	add	r0, sp, #12
 8008dee:	f7ff ff17 	bl	8008c20 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8008df2:	6862      	ldr	r2, [r4, #4]
 8008df4:	492b      	ldr	r1, [pc, #172]	; (8008ea4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 8008df6:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008dfa:	a803      	add	r0, sp, #12
 8008dfc:	f7ff ff10 	bl	8008c20 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8008e00:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008e04:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8008e08:	6862      	ldr	r2, [r4, #4]
 8008e0a:	42ab      	cmp	r3, r5
 8008e0c:	d223      	bcs.n	8008e56 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 8008e0e:	9803      	ldr	r0, [sp, #12]
 8008e10:	06d2      	lsls	r2, r2, #27
 8008e12:	4418      	add	r0, r3
 8008e14:	eba5 0503 	sub.w	r5, r5, r3
 8008e18:	f104 040c 	add.w	r4, r4, #12
 8008e1c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008e20:	d40b      	bmi.n	8008e3a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 8008e22:	b95b      	cbnz	r3, 8008e3c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 8008e24:	4b20      	ldr	r3, [pc, #128]	; (8008ea8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8008e26:	4a21      	ldr	r2, [pc, #132]	; (8008eac <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 8008e28:	9400      	str	r4, [sp, #0]
 8008e2a:	e00a      	b.n	8008e42 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 8008e2c:	6823      	ldr	r3, [r4, #0]
 8008e2e:	4601      	mov	r1, r0
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	4618      	mov	r0, r3
 8008e34:	68d2      	ldr	r2, [r2, #12]
 8008e36:	4790      	blx	r2
 8008e38:	e7b9      	b.n	8008dae <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 8008e3a:	b32b      	cbz	r3, 8008e88 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 8008e3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ea8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8008e3e:	4a1c      	ldr	r2, [pc, #112]	; (8008eb0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 8008e40:	9400      	str	r4, [sp, #0]
 8008e42:	4629      	mov	r1, r5
 8008e44:	f00a fc08 	bl	8013658 <snprintf>
 8008e48:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008e4c:	4285      	cmp	r5, r0
 8008e4e:	bfa4      	itt	ge
 8008e50:	181b      	addge	r3, r3, r0
 8008e52:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8008e56:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008e5a:	b17b      	cbz	r3, 8008e7c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 8008e5c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	4413      	add	r3, r2
 8008e64:	227d      	movs	r2, #125	; 0x7d
 8008e66:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008e6a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008e6e:	9903      	ldr	r1, [sp, #12]
 8008e70:	54ca      	strb	r2, [r1, r3]
 8008e72:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008e76:	3301      	adds	r3, #1
 8008e78:	f8ad 3012 	strh.w	r3, [sp, #18]
 8008e7c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	b006      	add	sp, #24
 8008e86:	bd70      	pop	{r4, r5, r6, pc}
 8008e88:	4b07      	ldr	r3, [pc, #28]	; (8008ea8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8008e8a:	4a0a      	ldr	r2, [pc, #40]	; (8008eb4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 8008e8c:	9400      	str	r4, [sp, #0]
 8008e8e:	e7d8      	b.n	8008e42 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 8008e90:	080160b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, sp, lr}
 8008e94:	080160ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, sp, lr}
 8008e98:	080160ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, sp, lr}
 8008e9c:	080160dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, sp, lr}
 8008ea0:	080160ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, sp, lr}
 8008ea4:	080160f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, sp, lr}
 8008ea8:	080160c1 	stmdaeq	r1, {r0, r6, r7, sp, lr}
 8008eac:	08015cb8 	stmdaeq	r1, {r3, r4, r5, r7, sl, fp, ip, lr}
 8008eb0:	08015cad 	stmdaeq	r1, {r0, r2, r3, r5, r7, sl, fp, ip, lr}
 8008eb4:	08015cb9 	stmdaeq	r1, {r0, r3, r4, r5, r7, sl, fp, ip, lr}

08008eb8 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 8008eb8:	b513      	push	{r0, r1, r4, lr}
 8008eba:	6804      	ldr	r4, [r0, #0]
 8008ebc:	b914      	cbnz	r4, 8008ec4 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8008ebe:	601c      	str	r4, [r3, #0]
 8008ec0:	b002      	add	sp, #8
 8008ec2:	bd10      	pop	{r4, pc}
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	460a      	mov	r2, r1
 8008eca:	2100      	movs	r1, #0
 8008ecc:	f7ff ff64 	bl	8008d98 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 8008ed0:	e7f6      	b.n	8008ec0 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

08008ed2 <RemoteConfigParams::Set(RemoteConfig*)>:
 8008ed2:	b538      	push	{r3, r4, r5, lr}
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	6841      	ldr	r1, [r0, #4]
 8008eda:	4620      	mov	r0, r4
 8008edc:	f001 0101 	and.w	r1, r1, #1
 8008ee0:	f7ff fc18 	bl	8008714 <RemoteConfig::SetDisable(bool)>
 8008ee4:	686b      	ldr	r3, [r5, #4]
 8008ee6:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8008eea:	7362      	strb	r2, [r4, #13]
 8008eec:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8008ef0:	73a2      	strb	r2, [r4, #14]
 8008ef2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8008ef6:	73e2      	strb	r2, [r4, #15]
 8008ef8:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8008efc:	06db      	lsls	r3, r3, #27
 8008efe:	7422      	strb	r2, [r4, #16]
 8008f00:	d506      	bpl.n	8008f10 <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 8008f02:	4620      	mov	r0, r4
 8008f04:	f105 010c 	add.w	r1, r5, #12
 8008f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f0c:	f7ff bc22 	b.w	8008754 <RemoteConfig::SetDisplayName(char const*)>
 8008f10:	bd38      	pop	{r3, r4, r5, pc}

08008f12 <RemoteConfigParams::Dump()>:
 8008f12:	4770      	bx	lr

08008f14 <RemoteConfig::HandleReboot()>:
 8008f14:	7b83      	ldrb	r3, [r0, #14]
 8008f16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d03c      	beq.n	8008f96 <RemoteConfig::HandleReboot()+0x82>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	4c1f      	ldr	r4, [pc, #124]	; (8008f9c <RemoteConfig::HandleReboot()+0x88>)
 8008f20:	7443      	strb	r3, [r0, #17]
 8008f22:	6825      	ldr	r5, [r4, #0]
 8008f24:	69a8      	ldr	r0, [r5, #24]
 8008f26:	b138      	cbz	r0, 8008f38 <RemoteConfig::HandleReboot()+0x24>
 8008f28:	2100      	movs	r1, #0
 8008f2a:	6803      	ldr	r3, [r0, #0]
 8008f2c:	7429      	strb	r1, [r5, #16]
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f30:	4798      	blx	r3
 8008f32:	4b1b      	ldr	r3, [pc, #108]	; (8008fa0 <RemoteConfig::HandleReboot()+0x8c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	606b      	str	r3, [r5, #4]
 8008f38:	4d1a      	ldr	r5, [pc, #104]	; (8008fa4 <RemoteConfig::HandleReboot()+0x90>)
 8008f3a:	6828      	ldr	r0, [r5, #0]
 8008f3c:	f008 fd0e 	bl	801195c <ConfigStore::Flash()>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d1fa      	bne.n	8008f3a <RemoteConfig::HandleReboot()+0x26>
 8008f44:	4b18      	ldr	r3, [pc, #96]	; (8008fa8 <RemoteConfig::HandleReboot()+0x94>)
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	f006 fed6 	bl	800fcf8 <Network::Shutdown()>
 8008f4c:	4817      	ldr	r0, [pc, #92]	; (8008fac <RemoteConfig::HandleReboot()+0x98>)
 8008f4e:	f00a fb5b 	bl	8013608 <printf>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	6998      	ldr	r0, [r3, #24]
 8008f56:	b110      	cbz	r0, 8008f5e <RemoteConfig::HandleReboot()+0x4a>
 8008f58:	6803      	ldr	r3, [r0, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	4798      	blx	r3
 8008f5e:	6824      	ldr	r4, [r4, #0]
 8008f60:	4913      	ldr	r1, [pc, #76]	; (8008fb0 <RemoteConfig::HandleReboot()+0x9c>)
 8008f62:	4620      	mov	r0, r4
 8008f64:	f7fe fe5a 	bl	8007c1c <Display::TextStatus(char const*)>
 8008f68:	7c63      	ldrb	r3, [r4, #17]
 8008f6a:	b183      	cbz	r3, 8008f8e <RemoteConfig::HandleReboot()+0x7a>
 8008f6c:	f64b 7312 	movw	r3, #48914	; 0xbf12
 8008f70:	f8ad 3004 	strh.w	r3, [sp, #4]
 8008f74:	23bf      	movs	r3, #191	; 0xbf
 8008f76:	7a20      	ldrb	r0, [r4, #8]
 8008f78:	f88d 3006 	strb.w	r3, [sp, #6]
 8008f7c:	f00b feac 	bl	8014cd8 <gd32_i2c_set_address>
 8008f80:	68e0      	ldr	r0, [r4, #12]
 8008f82:	f00b fea1 	bl	8014cc8 <gd32_i2c_set_baudrate>
 8008f86:	2103      	movs	r1, #3
 8008f88:	a801      	add	r0, sp, #4
 8008f8a:	f00b feab 	bl	8014ce4 <gd32_i2c_write>
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <RemoteConfig::HandleReboot()+0xa0>)
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	f00a f831 	bl	8012ff8 <Hardware::Reboot()>
 8008f96:	b003      	add	sp, #12
 8008f98:	bd30      	pop	{r4, r5, pc}
 8008f9a:	bf00      	nop
 8008f9c:	2000a0d8 	ldrdcs	sl, [r0], -r8
 8008fa0:	2000a1e4 	andcs	sl, r0, r4, ror #3
 8008fa4:	2000a090 	mulcs	r0, r0, r0
 8008fa8:	20008aa8 	andcs	r8, r0, r8, lsr #21
 8008fac:	08015cc0 	stmdaeq	r1, {r6, r7, sl, fp, ip, lr}
 8008fb0:	08015ccf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, sl, fp, ip, lr}
 8008fb4:	2000a1c8 	andcs	sl, r0, r8, asr #3

08008fb8 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 8008fb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	4d12      	ldr	r5, [pc, #72]	; (8009008 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 8008fc0:	f10d 0c04 	add.w	ip, sp, #4
 8008fc4:	6814      	ldr	r4, [r2, #0]
 8008fc6:	7d2b      	ldrb	r3, [r5, #20]
 8008fc8:	692e      	ldr	r6, [r5, #16]
 8008fca:	42a3      	cmp	r3, r4
 8008fcc:	bf34      	ite	cc
 8008fce:	4664      	movcc	r4, ip
 8008fd0:	4614      	movcs	r4, r2
 8008fd2:	9301      	str	r3, [sp, #4]
 8008fd4:	6827      	ldr	r7, [r4, #0]
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	3e01      	subs	r6, #1
 8008fda:	440f      	add	r7, r1
 8008fdc:	42bc      	cmp	r4, r7
 8008fde:	d101      	bne.n	8008fe4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	e00c      	b.n	8008ffe <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 8008fe4:	f894 8000 	ldrb.w	r8, [r4]
 8008fe8:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 8008fec:	45f0      	cmp	r8, lr
 8008fee:	d009      	beq.n	8009004 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	2806      	cmp	r0, #6
 8008ff4:	f105 051c 	add.w	r5, r5, #28
 8008ff8:	d1e4      	bne.n	8008fc4 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 8008ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ffe:	b002      	add	sp, #8
 8009000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009004:	3401      	adds	r4, #1
 8009006:	e7e9      	b.n	8008fdc <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 8009008:	08015d20 	stmdaeq	r1, {r5, r8, sl, fp, ip, lr}

0800900c <RemoteConfig::PlatformHandleTftpSet()>:
 800900c:	f890 1020 	ldrb.w	r1, [r0, #32]
 8009010:	b109      	cbz	r1, 8009016 <RemoteConfig::PlatformHandleTftpSet()+0xa>
 8009012:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 8009016:	2002      	movs	r0, #2
 8009018:	f00a bd16 	b.w	8013a48 <bkp_data_write>

0800901c <RemoteConfig::PlatformHandleTftpGet()>:
 800901c:	b510      	push	{r4, lr}
 800901e:	4604      	mov	r4, r0
 8009020:	2002      	movs	r0, #2
 8009022:	f00a fd27 	bl	8013a74 <bkp_data_read>
 8009026:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 800902a:	1ac3      	subs	r3, r0, r3
 800902c:	4258      	negs	r0, r3
 800902e:	4158      	adcs	r0, r3
 8009030:	f884 0020 	strb.w	r0, [r4, #32]
 8009034:	bd10      	pop	{r4, pc}

08009036 <strcmp>:
 8009036:	1e43      	subs	r3, r0, #1
 8009038:	3901      	subs	r1, #1
 800903a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800903e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009042:	4290      	cmp	r0, r2
 8009044:	d001      	beq.n	800904a <strcmp+0x14>
 8009046:	1a80      	subs	r0, r0, r2
 8009048:	e001      	b.n	800904e <strcmp+0x18>
 800904a:	2800      	cmp	r0, #0
 800904c:	d1f5      	bne.n	800903a <strcmp+0x4>
 800904e:	4770      	bx	lr

08009050 <strcasecmp>:
 8009050:	b530      	push	{r4, r5, lr}
 8009052:	1e42      	subs	r2, r0, #1
 8009054:	3901      	subs	r1, #1
 8009056:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800905a:	4604      	mov	r4, r0
 800905c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009060:	2b19      	cmp	r3, #25
 8009062:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009066:	bf98      	it	ls
 8009068:	f100 0420 	addls.w	r4, r0, #32
 800906c:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 8009070:	2d19      	cmp	r5, #25
 8009072:	bf98      	it	ls
 8009074:	3320      	addls	r3, #32
 8009076:	42a3      	cmp	r3, r4
 8009078:	d001      	beq.n	800907e <strcasecmp+0x2e>
 800907a:	1ae0      	subs	r0, r4, r3
 800907c:	e001      	b.n	8009082 <strcasecmp+0x32>
 800907e:	2800      	cmp	r0, #0
 8009080:	d1e9      	bne.n	8009056 <strcasecmp+0x6>
 8009082:	bd30      	pop	{r4, r5, pc}

08009084 <PropertiesConfig::EnableJSON(bool)>:
 8009084:	4a04      	ldr	r2, [pc, #16]	; (8009098 <PropertiesConfig::EnableJSON(bool)+0x14>)
 8009086:	7813      	ldrb	r3, [r2, #0]
 8009088:	b118      	cbz	r0, 8009092 <PropertiesConfig::EnableJSON(bool)+0xe>
 800908a:	f043 0301 	orr.w	r3, r3, #1
 800908e:	7013      	strb	r3, [r2, #0]
 8009090:	4770      	bx	lr
 8009092:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009096:	e7fa      	b.n	800908e <PropertiesConfig::EnableJSON(bool)+0xa>
 8009098:	2000a0d4 	ldrdcs	sl, [r0], -r4

0800909c <HttpDaemon::HttpDaemon()>:
 800909c:	4a08      	ldr	r2, [pc, #32]	; (80090c0 <HttpDaemon::HttpDaemon()+0x24>)
 800909e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80090a2:	6002      	str	r2, [r0, #0]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f44f 7c02 	mov.w	ip, #520	; 0x208
 80090aa:	e9c0 1204 	strd	r1, r2, [r0, #16]
 80090ae:	2102      	movs	r1, #2
 80090b0:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80090b4:	e9c0 c106 	strd	ip, r1, [r0, #24]
 80090b8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80090bc:	60c2      	str	r2, [r0, #12]
 80090be:	4770      	bx	lr
 80090c0:	0801602d 	stmdaeq	r1, {r0, r2, r3, r5, sp, lr}

080090c4 <HttpDaemon::Start()>:
 80090c4:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <HttpDaemon::Start()+0x14>)
 80090c6:	b510      	push	{r4, lr}
 80090c8:	2150      	movs	r1, #80	; 0x50
 80090ca:	4604      	mov	r4, r0
 80090cc:	6818      	ldr	r0, [r3, #0]
 80090ce:	f007 f88f 	bl	80101f0 <Network::TcpBegin(unsigned short)>
 80090d2:	6120      	str	r0, [r4, #16]
 80090d4:	bd10      	pop	{r4, pc}
 80090d6:	bf00      	nop
 80090d8:	20008aa8 	andcs	r8, r0, r8, lsr #21

080090dc <HttpDaemon::ParseMethod(char*)>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4604      	mov	r4, r0
 80090e0:	4608      	mov	r0, r1
 80090e2:	491a      	ldr	r1, [pc, #104]	; (800914c <HttpDaemon::ParseMethod(char*)+0x70>)
 80090e4:	f00a fae8 	bl	80136b8 <strtok>
 80090e8:	4605      	mov	r5, r0
 80090ea:	b360      	cbz	r0, 8009146 <HttpDaemon::ParseMethod(char*)+0x6a>
 80090ec:	4918      	ldr	r1, [pc, #96]	; (8009150 <HttpDaemon::ParseMethod(char*)+0x74>)
 80090ee:	f7ff ffa2 	bl	8009036 <strcmp>
 80090f2:	b128      	cbz	r0, 8009100 <HttpDaemon::ParseMethod(char*)+0x24>
 80090f4:	4628      	mov	r0, r5
 80090f6:	4917      	ldr	r1, [pc, #92]	; (8009154 <HttpDaemon::ParseMethod(char*)+0x78>)
 80090f8:	f7ff ff9d 	bl	8009036 <strcmp>
 80090fc:	bb18      	cbnz	r0, 8009146 <HttpDaemon::ParseMethod(char*)+0x6a>
 80090fe:	2001      	movs	r0, #1
 8009100:	61e0      	str	r0, [r4, #28]
 8009102:	4912      	ldr	r1, [pc, #72]	; (800914c <HttpDaemon::ParseMethod(char*)+0x70>)
 8009104:	2000      	movs	r0, #0
 8009106:	f00a fad7 	bl	80136b8 <strtok>
 800910a:	b910      	cbnz	r0, 8009112 <HttpDaemon::ParseMethod(char*)+0x36>
 800910c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009110:	bd38      	pop	{r3, r4, r5, pc}
 8009112:	6060      	str	r0, [r4, #4]
 8009114:	4910      	ldr	r1, [pc, #64]	; (8009158 <HttpDaemon::ParseMethod(char*)+0x7c>)
 8009116:	2000      	movs	r0, #0
 8009118:	f00a face 	bl	80136b8 <strtok>
 800911c:	2800      	cmp	r0, #0
 800911e:	d0f5      	beq.n	800910c <HttpDaemon::ParseMethod(char*)+0x30>
 8009120:	490e      	ldr	r1, [pc, #56]	; (800915c <HttpDaemon::ParseMethod(char*)+0x80>)
 8009122:	f7ff ff88 	bl	8009036 <strcmp>
 8009126:	2800      	cmp	r0, #0
 8009128:	d1f0      	bne.n	800910c <HttpDaemon::ParseMethod(char*)+0x30>
 800912a:	490d      	ldr	r1, [pc, #52]	; (8009160 <HttpDaemon::ParseMethod(char*)+0x84>)
 800912c:	f00a fac4 	bl	80136b8 <strtok>
 8009130:	2800      	cmp	r0, #0
 8009132:	d0eb      	beq.n	800910c <HttpDaemon::ParseMethod(char*)+0x30>
 8009134:	490b      	ldr	r1, [pc, #44]	; (8009164 <HttpDaemon::ParseMethod(char*)+0x88>)
 8009136:	f7ff ff7e 	bl	8009036 <strcmp>
 800913a:	2800      	cmp	r0, #0
 800913c:	f240 10f9 	movw	r0, #505	; 0x1f9
 8009140:	bf08      	it	eq
 8009142:	20c8      	moveq	r0, #200	; 0xc8
 8009144:	e7e4      	b.n	8009110 <HttpDaemon::ParseMethod(char*)+0x34>
 8009146:	f240 10f5 	movw	r0, #501	; 0x1f5
 800914a:	e7e1      	b.n	8009110 <HttpDaemon::ParseMethod(char*)+0x34>
 800914c:	0801744b 	stmdaeq	r1, {r0, r1, r3, r6, sl, ip, sp, lr}
 8009150:	08015dc8 	stmdaeq	r1, {r3, r6, r7, r8, sl, fp, ip, lr}
 8009154:	08015dcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, sl, fp, ip, lr}
 8009158:	08015e36 	stmdaeq	r1, {r1, r2, r4, r5, r9, sl, fp, ip, lr}
 800915c:	08015dd1 	stmdaeq	r1, {r0, r4, r6, r7, r8, sl, fp, ip, lr}
 8009160:	08015dd6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, sl, fp, ip, lr}
 8009164:	08015dd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, sl, fp, ip, lr}

08009168 <HttpDaemon::ParseHeaderField(char*)>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4605      	mov	r5, r0
 800916c:	4608      	mov	r0, r1
 800916e:	491d      	ldr	r1, [pc, #116]	; (80091e4 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 8009170:	f00a faa2 	bl	80136b8 <strtok>
 8009174:	4604      	mov	r4, r0
 8009176:	b910      	cbnz	r0, 800917e <HttpDaemon::ParseHeaderField(char*)+0x16>
 8009178:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800917c:	bd38      	pop	{r3, r4, r5, pc}
 800917e:	491a      	ldr	r1, [pc, #104]	; (80091e8 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 8009180:	f7ff ff66 	bl	8009050 <strcasecmp>
 8009184:	b970      	cbnz	r0, 80091a4 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 8009186:	4919      	ldr	r1, [pc, #100]	; (80091ec <HttpDaemon::ParseHeaderField(char*)+0x84>)
 8009188:	f00a fa96 	bl	80136b8 <strtok>
 800918c:	2800      	cmp	r0, #0
 800918e:	d0f3      	beq.n	8009178 <HttpDaemon::ParseHeaderField(char*)+0x10>
 8009190:	4917      	ldr	r1, [pc, #92]	; (80091f0 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 8009192:	f7ff ff50 	bl	8009036 <strcmp>
 8009196:	b108      	cbz	r0, 800919c <HttpDaemon::ParseHeaderField(char*)+0x34>
 8009198:	20c8      	movs	r0, #200	; 0xc8
 800919a:	e7ef      	b.n	800917c <HttpDaemon::ParseHeaderField(char*)+0x14>
 800919c:	2301      	movs	r3, #1
 800919e:	f885 3020 	strb.w	r3, [r5, #32]
 80091a2:	e7f9      	b.n	8009198 <HttpDaemon::ParseHeaderField(char*)+0x30>
 80091a4:	4620      	mov	r0, r4
 80091a6:	4913      	ldr	r1, [pc, #76]	; (80091f4 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 80091a8:	f7ff ff52 	bl	8009050 <strcasecmp>
 80091ac:	4604      	mov	r4, r0
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d1f2      	bne.n	8009198 <HttpDaemon::ParseHeaderField(char*)+0x30>
 80091b2:	4911      	ldr	r1, [pc, #68]	; (80091f8 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 80091b4:	f00a fa80 	bl	80136b8 <strtok>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d0dd      	beq.n	8009178 <HttpDaemon::ParseHeaderField(char*)+0x10>
 80091bc:	1e42      	subs	r2, r0, #1
 80091be:	4623      	mov	r3, r4
 80091c0:	200a      	movs	r0, #10
 80091c2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80091c6:	b909      	cbnz	r1, 80091cc <HttpDaemon::ParseHeaderField(char*)+0x64>
 80091c8:	84eb      	strh	r3, [r5, #38]	; 0x26
 80091ca:	e7e5      	b.n	8009198 <HttpDaemon::ParseHeaderField(char*)+0x30>
 80091cc:	3930      	subs	r1, #48	; 0x30
 80091ce:	2909      	cmp	r1, #9
 80091d0:	d8d2      	bhi.n	8009178 <HttpDaemon::ParseHeaderField(char*)+0x10>
 80091d2:	fb00 1303 	mla	r3, r0, r3, r1
 80091d6:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 80091da:	d9f2      	bls.n	80091c2 <HttpDaemon::ParseHeaderField(char*)+0x5a>
 80091dc:	f240 109d 	movw	r0, #413	; 0x19d
 80091e0:	e7cc      	b.n	800917c <HttpDaemon::ParseHeaderField(char*)+0x14>
 80091e2:	bf00      	nop
 80091e4:	08015ddd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, sl, fp, ip, lr}
 80091e8:	08015ddf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, sl, fp, ip, lr}
 80091ec:	08015dec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, sl, fp, ip, lr}
 80091f0:	08015def 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, sl, fp, ip, lr}
 80091f4:	08015e00 	stmdaeq	r1, {r9, sl, fp, ip, lr}
 80091f8:	0801744b 	stmdaeq	r1, {r0, r1, r3, r6, sl, ip, sp, lr}

080091fc <HttpDaemon::ParseRequest()>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	2400      	movs	r4, #0
 8009200:	4605      	mov	r5, r0
 8009202:	4622      	mov	r2, r4
 8009204:	4626      	mov	r6, r4
 8009206:	68c1      	ldr	r1, [r0, #12]
 8009208:	f880 4020 	strb.w	r4, [r0, #32]
 800920c:	6244      	str	r4, [r0, #36]	; 0x24
 800920e:	8aab      	ldrh	r3, [r5, #20]
 8009210:	42a3      	cmp	r3, r4
 8009212:	d91d      	bls.n	8009250 <HttpDaemon::ParseRequest()+0x54>
 8009214:	68eb      	ldr	r3, [r5, #12]
 8009216:	5d18      	ldrb	r0, [r3, r4]
 8009218:	280a      	cmp	r0, #10
 800921a:	d10e      	bne.n	800923a <HttpDaemon::ParseRequest()+0x3e>
 800921c:	4423      	add	r3, r4
 800921e:	f803 6c01 	strb.w	r6, [r3, #-1]
 8009222:	1c57      	adds	r7, r2, #1
 8009224:	b962      	cbnz	r2, 8009240 <HttpDaemon::ParseRequest()+0x44>
 8009226:	4628      	mov	r0, r5
 8009228:	f7ff ff58 	bl	80090dc <HttpDaemon::ParseMethod(char*)>
 800922c:	28c8      	cmp	r0, #200	; 0xc8
 800922e:	d110      	bne.n	8009252 <HttpDaemon::ParseRequest()+0x56>
 8009230:	463a      	mov	r2, r7
 8009232:	68e9      	ldr	r1, [r5, #12]
 8009234:	3401      	adds	r4, #1
 8009236:	b2a4      	uxth	r4, r4
 8009238:	4421      	add	r1, r4
 800923a:	3401      	adds	r4, #1
 800923c:	b2a4      	uxth	r4, r4
 800923e:	e7e6      	b.n	800920e <HttpDaemon::ParseRequest()+0x12>
 8009240:	7808      	ldrb	r0, [r1, #0]
 8009242:	b968      	cbnz	r0, 8009260 <HttpDaemon::ParseRequest()+0x64>
 8009244:	696b      	ldr	r3, [r5, #20]
 8009246:	3b01      	subs	r3, #1
 8009248:	1b1b      	subs	r3, r3, r4
 800924a:	b29b      	uxth	r3, r3
 800924c:	84ab      	strh	r3, [r5, #36]	; 0x24
 800924e:	b90b      	cbnz	r3, 8009254 <HttpDaemon::ParseRequest()+0x58>
 8009250:	20c8      	movs	r0, #200	; 0xc8
 8009252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009254:	68ea      	ldr	r2, [r5, #12]
 8009256:	3401      	adds	r4, #1
 8009258:	4414      	add	r4, r2
 800925a:	60ac      	str	r4, [r5, #8]
 800925c:	54e0      	strb	r0, [r4, r3]
 800925e:	e7f7      	b.n	8009250 <HttpDaemon::ParseRequest()+0x54>
 8009260:	4628      	mov	r0, r5
 8009262:	f7ff ff81 	bl	8009168 <HttpDaemon::ParseHeaderField(char*)>
 8009266:	e7e1      	b.n	800922c <HttpDaemon::ParseRequest()+0x30>

08009268 <HttpDaemon::HandleGetTxt()>:
 8009268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926c:	6846      	ldr	r6, [r0, #4]
 800926e:	4607      	mov	r7, r0
 8009270:	1db4      	adds	r4, r6, #6
 8009272:	4622      	mov	r2, r4
 8009274:	4613      	mov	r3, r2
 8009276:	7819      	ldrb	r1, [r3, #0]
 8009278:	3201      	adds	r2, #1
 800927a:	2900      	cmp	r1, #0
 800927c:	d1fa      	bne.n	8009274 <HttpDaemon::HandleGetTxt()+0xc>
 800927e:	1b1b      	subs	r3, r3, r4
 8009280:	2b04      	cmp	r3, #4
 8009282:	d803      	bhi.n	800928c <HttpDaemon::HandleGetTxt()+0x24>
 8009284:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928c:	3b04      	subs	r3, #4
 800928e:	4914      	ldr	r1, [pc, #80]	; (80092e0 <HttpDaemon::HandleGetTxt()+0x78>)
 8009290:	18e0      	adds	r0, r4, r3
 8009292:	f7ff fed0 	bl	8009036 <strcmp>
 8009296:	2800      	cmp	r0, #0
 8009298:	d1f4      	bne.n	8009284 <HttpDaemon::HandleGetTxt()+0x1c>
 800929a:	4b12      	ldr	r3, [pc, #72]	; (80092e4 <HttpDaemon::HandleGetTxt()+0x7c>)
 800929c:	2001      	movs	r0, #1
 800929e:	f893 8000 	ldrb.w	r8, [r3]
 80092a2:	f7ff feef 	bl	8009084 <PropertiesConfig::EnableJSON(bool)>
 80092a6:	4b10      	ldr	r3, [pc, #64]	; (80092e8 <HttpDaemon::HandleGetTxt()+0x80>)
 80092a8:	f240 529b 	movw	r2, #1435	; 0x59b
 80092ac:	4621      	mov	r1, r4
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	f7ff fa68 	bl	8008784 <RemoteConfig::HandleGet(void*, unsigned int)>
 80092b4:	4605      	mov	r5, r0
 80092b6:	f008 0801 	and.w	r8, r8, #1
 80092ba:	4640      	mov	r0, r8
 80092bc:	f7ff fee2 	bl	8009084 <PropertiesConfig::EnableJSON(bool)>
 80092c0:	2d00      	cmp	r5, #0
 80092c2:	d0df      	beq.n	8009284 <HttpDaemon::HandleGetTxt()+0x1c>
 80092c4:	847d      	strh	r5, [r7, #34]	; 0x22
 80092c6:	4b09      	ldr	r3, [pc, #36]	; (80092ec <HttpDaemon::HandleGetTxt()+0x84>)
 80092c8:	3506      	adds	r5, #6
 80092ca:	442e      	add	r6, r5
 80092cc:	42b4      	cmp	r4, r6
 80092ce:	d101      	bne.n	80092d4 <HttpDaemon::HandleGetTxt()+0x6c>
 80092d0:	20c8      	movs	r0, #200	; 0xc8
 80092d2:	e7d9      	b.n	8009288 <HttpDaemon::HandleGetTxt()+0x20>
 80092d4:	f814 2b01 	ldrb.w	r2, [r4], #1
 80092d8:	f803 2b01 	strb.w	r2, [r3], #1
 80092dc:	e7f6      	b.n	80092cc <HttpDaemon::HandleGetTxt()+0x64>
 80092de:	bf00      	nop
 80092e0:	08015d10 	stmdaeq	r1, {r4, r8, sl, fp, ip, lr}
 80092e4:	2000a0d4 	ldrdcs	sl, [r0], -r4
 80092e8:	200000bc 	strhcs	r0, [r0], -ip
 80092ec:	200000c0 	andcs	r0, r0, r0, asr #1

080092f0 <HttpDaemon::HandleGet()>:
 80092f0:	b570      	push	{r4, r5, r6, lr}
 80092f2:	6845      	ldr	r5, [r0, #4]
 80092f4:	4604      	mov	r4, r0
 80092f6:	493e      	ldr	r1, [pc, #248]	; (80093f0 <HttpDaemon::HandleGet()+0x100>)
 80092f8:	4628      	mov	r0, r5
 80092fa:	f7ff fe9c 	bl	8009036 <strcmp>
 80092fe:	b120      	cbz	r0, 800930a <HttpDaemon::HandleGet()+0x1a>
 8009300:	4628      	mov	r0, r5
 8009302:	493c      	ldr	r1, [pc, #240]	; (80093f4 <HttpDaemon::HandleGet()+0x104>)
 8009304:	f7ff fe97 	bl	8009036 <strcmp>
 8009308:	b950      	cbnz	r0, 8009320 <HttpDaemon::HandleGet()+0x30>
 800930a:	4b3b      	ldr	r3, [pc, #236]	; (80093f8 <HttpDaemon::HandleGet()+0x108>)
 800930c:	493b      	ldr	r1, [pc, #236]	; (80093fc <HttpDaemon::HandleGet()+0x10c>)
 800930e:	483c      	ldr	r0, [pc, #240]	; (8009400 <HttpDaemon::HandleGet()+0x110>)
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	f000 fa67 	bl	80097e4 <get_file_content(char const*, char*)>
 8009316:	2800      	cmp	r0, #0
 8009318:	dd2f      	ble.n	800937a <HttpDaemon::HandleGet()+0x8a>
 800931a:	8460      	strh	r0, [r4, #34]	; 0x22
 800931c:	20c8      	movs	r0, #200	; 0xc8
 800931e:	bd70      	pop	{r4, r5, r6, pc}
 8009320:	4628      	mov	r0, r5
 8009322:	4938      	ldr	r1, [pc, #224]	; (8009404 <HttpDaemon::HandleGet()+0x114>)
 8009324:	f7ff fe87 	bl	8009036 <strcmp>
 8009328:	b920      	cbnz	r0, 8009334 <HttpDaemon::HandleGet()+0x44>
 800932a:	4b37      	ldr	r3, [pc, #220]	; (8009408 <HttpDaemon::HandleGet()+0x118>)
 800932c:	4933      	ldr	r1, [pc, #204]	; (80093fc <HttpDaemon::HandleGet()+0x10c>)
 800932e:	4837      	ldr	r0, [pc, #220]	; (800940c <HttpDaemon::HandleGet()+0x11c>)
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	e7ee      	b.n	8009312 <HttpDaemon::HandleGet()+0x22>
 8009334:	4628      	mov	r0, r5
 8009336:	4936      	ldr	r1, [pc, #216]	; (8009410 <HttpDaemon::HandleGet()+0x120>)
 8009338:	f7ff fe7d 	bl	8009036 <strcmp>
 800933c:	b190      	cbz	r0, 8009364 <HttpDaemon::HandleGet()+0x74>
 800933e:	4a35      	ldr	r2, [pc, #212]	; (8009414 <HttpDaemon::HandleGet()+0x124>)
 8009340:	1e6b      	subs	r3, r5, #1
 8009342:	1d69      	adds	r1, r5, #5
 8009344:	428b      	cmp	r3, r1
 8009346:	d112      	bne.n	800936e <HttpDaemon::HandleGet()+0x7e>
 8009348:	4b33      	ldr	r3, [pc, #204]	; (8009418 <HttpDaemon::HandleGet()+0x128>)
 800934a:	3506      	adds	r5, #6
 800934c:	4628      	mov	r0, r5
 800934e:	4933      	ldr	r1, [pc, #204]	; (800941c <HttpDaemon::HandleGet()+0x12c>)
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	f7ff fe70 	bl	8009036 <strcmp>
 8009356:	b998      	cbnz	r0, 8009380 <HttpDaemon::HandleGet()+0x90>
 8009358:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800935c:	4827      	ldr	r0, [pc, #156]	; (80093fc <HttpDaemon::HandleGet()+0x10c>)
 800935e:	f000 f9c9 	bl	80096f4 <remoteconfig::json_get_list(char*, unsigned short)>
 8009362:	e7d8      	b.n	8009316 <HttpDaemon::HandleGet()+0x26>
 8009364:	4b2e      	ldr	r3, [pc, #184]	; (8009420 <HttpDaemon::HandleGet()+0x130>)
 8009366:	4925      	ldr	r1, [pc, #148]	; (80093fc <HttpDaemon::HandleGet()+0x10c>)
 8009368:	482e      	ldr	r0, [pc, #184]	; (8009424 <HttpDaemon::HandleGet()+0x134>)
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	e7d1      	b.n	8009312 <HttpDaemon::HandleGet()+0x22>
 800936e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8009372:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8009376:	4286      	cmp	r6, r0
 8009378:	d0e4      	beq.n	8009344 <HttpDaemon::HandleGet()+0x54>
 800937a:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800937e:	e7ce      	b.n	800931e <HttpDaemon::HandleGet()+0x2e>
 8009380:	4628      	mov	r0, r5
 8009382:	4929      	ldr	r1, [pc, #164]	; (8009428 <HttpDaemon::HandleGet()+0x138>)
 8009384:	f7ff fe57 	bl	8009036 <strcmp>
 8009388:	b928      	cbnz	r0, 8009396 <HttpDaemon::HandleGet()+0xa6>
 800938a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800938e:	481b      	ldr	r0, [pc, #108]	; (80093fc <HttpDaemon::HandleGet()+0x10c>)
 8009390:	f000 f9e4 	bl	800975c <remoteconfig::json_get_version(char*, unsigned short)>
 8009394:	e7bf      	b.n	8009316 <HttpDaemon::HandleGet()+0x26>
 8009396:	4628      	mov	r0, r5
 8009398:	4924      	ldr	r1, [pc, #144]	; (800942c <HttpDaemon::HandleGet()+0x13c>)
 800939a:	f7ff fe4c 	bl	8009036 <strcmp>
 800939e:	b948      	cbnz	r0, 80093b4 <HttpDaemon::HandleGet()+0xc4>
 80093a0:	4b23      	ldr	r3, [pc, #140]	; (8009430 <HttpDaemon::HandleGet()+0x140>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	7bdb      	ldrb	r3, [r3, #15]
 80093a6:	b303      	cbz	r3, 80093ea <HttpDaemon::HandleGet()+0xfa>
 80093a8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 80093ac:	4813      	ldr	r0, [pc, #76]	; (80093fc <HttpDaemon::HandleGet()+0x10c>)
 80093ae:	f000 f9f1 	bl	8009794 <remoteconfig::json_get_uptime(char*, unsigned short)>
 80093b2:	e7b0      	b.n	8009316 <HttpDaemon::HandleGet()+0x26>
 80093b4:	4628      	mov	r0, r5
 80093b6:	491f      	ldr	r1, [pc, #124]	; (8009434 <HttpDaemon::HandleGet()+0x144>)
 80093b8:	f7ff fe3d 	bl	8009036 <strcmp>
 80093bc:	b928      	cbnz	r0, 80093ca <HttpDaemon::HandleGet()+0xda>
 80093be:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 80093c2:	480e      	ldr	r0, [pc, #56]	; (80093fc <HttpDaemon::HandleGet()+0x10c>)
 80093c4:	f000 f9f6 	bl	80097b4 <remoteconfig::json_get_display(char*, unsigned short)>
 80093c8:	e7a5      	b.n	8009316 <HttpDaemon::HandleGet()+0x26>
 80093ca:	4628      	mov	r0, r5
 80093cc:	491a      	ldr	r1, [pc, #104]	; (8009438 <HttpDaemon::HandleGet()+0x148>)
 80093ce:	f7ff fe32 	bl	8009036 <strcmp>
 80093d2:	b928      	cbnz	r0, 80093e0 <HttpDaemon::HandleGet()+0xf0>
 80093d4:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 80093d8:	4808      	ldr	r0, [pc, #32]	; (80093fc <HttpDaemon::HandleGet()+0x10c>)
 80093da:	f000 f9fb 	bl	80097d4 <remoteconfig::json_get_directory(char*, unsigned short)>
 80093de:	e79a      	b.n	8009316 <HttpDaemon::HandleGet()+0x26>
 80093e0:	4620      	mov	r0, r4
 80093e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093e6:	f7ff bf3f 	b.w	8009268 <HttpDaemon::HandleGetTxt()>
 80093ea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80093ee:	e796      	b.n	800931e <HttpDaemon::HandleGet()+0x2e>
 80093f0:	08015e36 	stmdaeq	r1, {r1, r2, r4, r5, r9, sl, fp, ip, lr}
 80093f4:	08015e0f 	stmdaeq	r1, {r0, r1, r2, r3, r9, sl, fp, ip, lr}
 80093f8:	0801602d 	stmdaeq	r1, {r0, r2, r3, r5, sp, lr}
 80093fc:	200000c0 	andcs	r0, r0, r0, asr #1
 8009400:	08015e10 	stmdaeq	r1, {r4, r9, sl, fp, ip, lr}
 8009404:	08015e1b 	stmdaeq	r1, {r0, r1, r3, r4, r9, sl, fp, ip, lr}
 8009408:	0801604d 	stmdaeq	r1, {r0, r2, r3, r6, sp, lr}
 800940c:	08015e1c 	stmdaeq	r1, {r2, r3, r4, r9, sl, fp, ip, lr}
 8009410:	08015e27 	stmdaeq	r1, {r0, r1, r2, r5, r9, sl, fp, ip, lr}
 8009414:	08015e31 	stmdaeq	r1, {r0, r4, r5, r9, sl, fp, ip, lr}
 8009418:	0801608d 	stmdaeq	r1, {r0, r2, r3, r7, sp, lr}
 800941c:	08015e38 	stmdaeq	r1, {r3, r4, r5, r9, sl, fp, ip, lr}
 8009420:	0801606d 	stmdaeq	r1, {r0, r2, r3, r5, r6, sp, lr}
 8009424:	08015e28 	stmdaeq	r1, {r3, r5, r9, sl, fp, ip, lr}
 8009428:	08015e3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, sl, fp, ip, lr}
 800942c:	08015e45 	stmdaeq	r1, {r0, r2, r6, r9, sl, fp, ip, lr}
 8009430:	200000bc 	strhcs	r0, [r0], -ip
 8009434:	08015e4c 	stmdaeq	r1, {r2, r3, r6, r9, sl, fp, ip, lr}
 8009438:	08015e54 	stmdaeq	r1, {r2, r4, r6, r9, sl, fp, ip, lr}

0800943c <HttpDaemon::HandlePost(bool)>:
 800943c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800943e:	4604      	mov	r4, r0
 8009440:	2900      	cmp	r1, #0
 8009442:	f040 808a 	bne.w	800955a <HttpDaemon::HandlePost(bool)+0x11e>
 8009446:	f890 3020 	ldrb.w	r3, [r0, #32]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d05a      	beq.n	8009504 <HttpDaemon::HandlePost(bool)+0xc8>
 800944e:	6845      	ldr	r5, [r0, #4]
 8009450:	4944      	ldr	r1, [pc, #272]	; (8009564 <HttpDaemon::HandlePost(bool)+0x128>)
 8009452:	4628      	mov	r0, r5
 8009454:	f7ff fdef 	bl	8009036 <strcmp>
 8009458:	2800      	cmp	r0, #0
 800945a:	bf0c      	ite	eq
 800945c:	2301      	moveq	r3, #1
 800945e:	2300      	movne	r3, #0
 8009460:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8009464:	d052      	beq.n	800950c <HttpDaemon::HandlePost(bool)+0xd0>
 8009466:	4628      	mov	r0, r5
 8009468:	493f      	ldr	r1, [pc, #252]	; (8009568 <HttpDaemon::HandlePost(bool)+0x12c>)
 800946a:	f7ff fde4 	bl	8009036 <strcmp>
 800946e:	2800      	cmp	r0, #0
 8009470:	d04c      	beq.n	800950c <HttpDaemon::HandlePost(bool)+0xd0>
 8009472:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8009476:	e047      	b.n	8009508 <HttpDaemon::HandlePost(bool)+0xcc>
 8009478:	493c      	ldr	r1, [pc, #240]	; (800956c <HttpDaemon::HandlePost(bool)+0x130>)
 800947a:	68a0      	ldr	r0, [r4, #8]
 800947c:	f10d 0207 	add.w	r2, sp, #7
 8009480:	f009 f97e 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009484:	b9d8      	cbnz	r0, 80094be <HttpDaemon::HandlePost(bool)+0x82>
 8009486:	f89d 6007 	ldrb.w	r6, [sp, #7]
 800948a:	4b39      	ldr	r3, [pc, #228]	; (8009570 <HttpDaemon::HandlePost(bool)+0x134>)
 800948c:	fab6 f186 	clz	r1, r6
 8009490:	681d      	ldr	r5, [r3, #0]
 8009492:	0949      	lsrs	r1, r1, #5
 8009494:	69a8      	ldr	r0, [r5, #24]
 8009496:	b138      	cbz	r0, 80094a8 <HttpDaemon::HandlePost(bool)+0x6c>
 8009498:	6803      	ldr	r3, [r0, #0]
 800949a:	7429      	strb	r1, [r5, #16]
 800949c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949e:	4798      	blx	r3
 80094a0:	b116      	cbz	r6, 80094a8 <HttpDaemon::HandlePost(bool)+0x6c>
 80094a2:	4b34      	ldr	r3, [pc, #208]	; (8009574 <HttpDaemon::HandlePost(bool)+0x138>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	606b      	str	r3, [r5, #4]
 80094a8:	4b33      	ldr	r3, [pc, #204]	; (8009578 <HttpDaemon::HandlePost(bool)+0x13c>)
 80094aa:	f240 519f 	movw	r1, #1439	; 0x59f
 80094ae:	4a33      	ldr	r2, [pc, #204]	; (800957c <HttpDaemon::HandlePost(bool)+0x140>)
 80094b0:	4833      	ldr	r0, [pc, #204]	; (8009580 <HttpDaemon::HandlePost(bool)+0x144>)
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	f00a f8d0 	bl	8013658 <snprintf>
 80094b8:	8460      	strh	r0, [r4, #34]	; 0x22
 80094ba:	20c8      	movs	r0, #200	; 0xc8
 80094bc:	e024      	b.n	8009508 <HttpDaemon::HandlePost(bool)+0xcc>
 80094be:	4931      	ldr	r1, [pc, #196]	; (8009584 <HttpDaemon::HandlePost(bool)+0x148>)
 80094c0:	68a0      	ldr	r0, [r4, #8]
 80094c2:	f10d 0207 	add.w	r2, sp, #7
 80094c6:	f009 f95b 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80094ca:	b9d8      	cbnz	r0, 8009504 <HttpDaemon::HandlePost(bool)+0xc8>
 80094cc:	4b2e      	ldr	r3, [pc, #184]	; (8009588 <HttpDaemon::HandlePost(bool)+0x14c>)
 80094ce:	6818      	ldr	r0, [r3, #0]
 80094d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80094d4:	b11b      	cbz	r3, 80094de <HttpDaemon::HandlePost(bool)+0xa2>
 80094d6:	2104      	movs	r1, #4
 80094d8:	f009 fcec 	bl	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 80094dc:	e7e4      	b.n	80094a8 <HttpDaemon::HandlePost(bool)+0x6c>
 80094de:	2102      	movs	r1, #2
 80094e0:	e7fa      	b.n	80094d8 <HttpDaemon::HandlePost(bool)+0x9c>
 80094e2:	4b2a      	ldr	r3, [pc, #168]	; (800958c <HttpDaemon::HandlePost(bool)+0x150>)
 80094e4:	2001      	movs	r0, #1
 80094e6:	781d      	ldrb	r5, [r3, #0]
 80094e8:	f7ff fdcc 	bl	8009084 <PropertiesConfig::EnableJSON(bool)>
 80094ec:	4b28      	ldr	r3, [pc, #160]	; (8009590 <HttpDaemon::HandlePost(bool)+0x154>)
 80094ee:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 80094f0:	6818      	ldr	r0, [r3, #0]
 80094f2:	68a1      	ldr	r1, [r4, #8]
 80094f4:	f005 0501 	and.w	r5, r5, #1
 80094f8:	f7ff fa28 	bl	800894c <RemoteConfig::HandleSet(void*, unsigned int)>
 80094fc:	4628      	mov	r0, r5
 80094fe:	f7ff fdc1 	bl	8009084 <PropertiesConfig::EnableJSON(bool)>
 8009502:	e7d1      	b.n	80094a8 <HttpDaemon::HandlePost(bool)+0x6c>
 8009504:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009508:	b002      	add	sp, #8
 800950a:	bd70      	pop	{r4, r5, r6, pc}
 800950c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800950e:	6962      	ldr	r2, [r4, #20]
 8009510:	429a      	cmp	r2, r3
 8009512:	dbd2      	blt.n	80094ba <HttpDaemon::HandlePost(bool)+0x7e>
 8009514:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0cf      	beq.n	80094ba <HttpDaemon::HandlePost(bool)+0x7e>
 800951a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0df      	beq.n	80094e2 <HttpDaemon::HandlePost(bool)+0xa6>
 8009522:	2201      	movs	r2, #1
 8009524:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8009526:	68a0      	ldr	r0, [r4, #8]
 8009528:	f008 ff28 	bl	801237c <properties::convert_json_file(char*, unsigned short, bool)>
 800952c:	2800      	cmp	r0, #0
 800952e:	dde9      	ble.n	8009504 <HttpDaemon::HandlePost(bool)+0xc8>
 8009530:	4918      	ldr	r1, [pc, #96]	; (8009594 <HttpDaemon::HandlePost(bool)+0x158>)
 8009532:	68a0      	ldr	r0, [r4, #8]
 8009534:	f10d 0207 	add.w	r2, sp, #7
 8009538:	f009 f922 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800953c:	2800      	cmp	r0, #0
 800953e:	d19b      	bne.n	8009478 <HttpDaemon::HandlePost(bool)+0x3c>
 8009540:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d0af      	beq.n	80094a8 <HttpDaemon::HandlePost(bool)+0x6c>
 8009548:	4b11      	ldr	r3, [pc, #68]	; (8009590 <HttpDaemon::HandlePost(bool)+0x154>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	7b9b      	ldrb	r3, [r3, #14]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0d8      	beq.n	8009504 <HttpDaemon::HandlePost(bool)+0xc8>
 8009552:	4b11      	ldr	r3, [pc, #68]	; (8009598 <HttpDaemon::HandlePost(bool)+0x15c>)
 8009554:	6818      	ldr	r0, [r3, #0]
 8009556:	f009 fd4f 	bl	8012ff8 <Hardware::Reboot()>
 800955a:	68c3      	ldr	r3, [r0, #12]
 800955c:	6083      	str	r3, [r0, #8]
 800955e:	6943      	ldr	r3, [r0, #20]
 8009560:	8483      	strh	r3, [r0, #36]	; 0x24
 8009562:	e7da      	b.n	800951a <HttpDaemon::HandlePost(bool)+0xde>
 8009564:	08015e5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, sl, fp, ip, lr}
 8009568:	08015dfa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 800956c:	08015e4c 	stmdaeq	r1, {r2, r3, r6, r9, sl, fp, ip, lr}
 8009570:	2000a0d8 	ldrdcs	sl, [r0], -r8
 8009574:	2000a1e4 	andcs	sl, r0, r4, ror #3
 8009578:	0801602d 	stmdaeq	r1, {r0, r2, r3, r5, sp, lr}
 800957c:	08015e7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, sl, fp, ip, lr}
 8009580:	200000c0 	andcs	r0, r0, r0, asr #1
 8009584:	08015e72 	stmdaeq	r1, {r1, r4, r5, r6, r9, sl, fp, ip, lr}
 8009588:	2000a1c4 	andcs	sl, r0, r4, asr #3
 800958c:	2000a0d4 	ldrdcs	sl, [r0], -r4
 8009590:	200000bc 	strhcs	r0, [r0], -ip
 8009594:	08015e6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, sl, fp, ip, lr}
 8009598:	2000a1c8 	andcs	sl, r0, r8, asr #3

0800959c <HttpDaemon::Run()>:
 800959c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800959e:	4e46      	ldr	r6, [pc, #280]	; (80096b8 <HttpDaemon::Run()+0x11c>)
 80095a0:	4604      	mov	r4, r0
 80095a2:	6901      	ldr	r1, [r0, #16]
 80095a4:	f100 020c 	add.w	r2, r0, #12
 80095a8:	6830      	ldr	r0, [r6, #0]
 80095aa:	f006 fe24 	bl	80101f6 <Network::TcpRead(int, unsigned char const**)>
 80095ae:	6160      	str	r0, [r4, #20]
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d05b      	beq.n	800966c <HttpDaemon::Run()+0xd0>
 80095b4:	69a3      	ldr	r3, [r4, #24]
 80095b6:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80095ba:	d159      	bne.n	8009670 <HttpDaemon::Run()+0xd4>
 80095bc:	4620      	mov	r0, r4
 80095be:	f7ff fe1d 	bl	80091fc <HttpDaemon::ParseRequest()>
 80095c2:	28c8      	cmp	r0, #200	; 0xc8
 80095c4:	61a0      	str	r0, [r4, #24]
 80095c6:	d106      	bne.n	80095d6 <HttpDaemon::Run()+0x3a>
 80095c8:	69e3      	ldr	r3, [r4, #28]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d142      	bne.n	8009654 <HttpDaemon::Run()+0xb8>
 80095ce:	4620      	mov	r0, r4
 80095d0:	f7ff fe8e 	bl	80092f0 <HttpDaemon::HandleGet()>
 80095d4:	61a0      	str	r0, [r4, #24]
 80095d6:	69a3      	ldr	r3, [r4, #24]
 80095d8:	2bc8      	cmp	r3, #200	; 0xc8
 80095da:	d06b      	beq.n	80096b4 <HttpDaemon::Run()+0x118>
 80095dc:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 80095e0:	d05e      	beq.n	80096a0 <HttpDaemon::Run()+0x104>
 80095e2:	dc4e      	bgt.n	8009682 <HttpDaemon::Run()+0xe6>
 80095e4:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 80095e8:	d05c      	beq.n	80096a4 <HttpDaemon::Run()+0x108>
 80095ea:	f240 129d 	movw	r2, #413	; 0x19d
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d05a      	beq.n	80096a8 <HttpDaemon::Run()+0x10c>
 80095f2:	4d32      	ldr	r5, [pc, #200]	; (80096bc <HttpDaemon::Run()+0x120>)
 80095f4:	4a32      	ldr	r2, [pc, #200]	; (80096c0 <HttpDaemon::Run()+0x124>)
 80095f6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80095fa:	bf18      	it	ne
 80095fc:	4615      	movne	r5, r2
 80095fe:	4a31      	ldr	r2, [pc, #196]	; (80096c4 <HttpDaemon::Run()+0x128>)
 8009600:	f240 519f 	movw	r1, #1439	; 0x59f
 8009604:	6022      	str	r2, [r4, #0]
 8009606:	e9cd 5500 	strd	r5, r5, [sp]
 800960a:	4a2f      	ldr	r2, [pc, #188]	; (80096c8 <HttpDaemon::Run()+0x12c>)
 800960c:	482f      	ldr	r0, [pc, #188]	; (80096cc <HttpDaemon::Run()+0x130>)
 800960e:	f00a f823 	bl	8013658 <snprintf>
 8009612:	8460      	strh	r0, [r4, #34]	; 0x22
 8009614:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8009616:	f240 519f 	movw	r1, #1439	; 0x59f
 800961a:	9303      	str	r3, [sp, #12]
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	4a2c      	ldr	r2, [pc, #176]	; (80096d0 <HttpDaemon::Run()+0x134>)
 8009620:	9302      	str	r3, [sp, #8]
 8009622:	4b2c      	ldr	r3, [pc, #176]	; (80096d4 <HttpDaemon::Run()+0x138>)
 8009624:	68e0      	ldr	r0, [r4, #12]
 8009626:	e9cd 5300 	strd	r5, r3, [sp]
 800962a:	69a3      	ldr	r3, [r4, #24]
 800962c:	f00a f814 	bl	8013658 <snprintf>
 8009630:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8009634:	b283      	uxth	r3, r0
 8009636:	6830      	ldr	r0, [r6, #0]
 8009638:	f006 fde1 	bl	80101fe <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800963c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800963e:	4a23      	ldr	r2, [pc, #140]	; (80096cc <HttpDaemon::Run()+0x130>)
 8009640:	6921      	ldr	r1, [r4, #16]
 8009642:	6830      	ldr	r0, [r6, #0]
 8009644:	f006 fddb 	bl	80101fe <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 8009648:	f44f 7202 	mov.w	r2, #520	; 0x208
 800964c:	2302      	movs	r3, #2
 800964e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8009652:	e00b      	b.n	800966c <HttpDaemon::Run()+0xd0>
 8009654:	2b01      	cmp	r3, #1
 8009656:	d1be      	bne.n	80095d6 <HttpDaemon::Run()+0x3a>
 8009658:	2100      	movs	r1, #0
 800965a:	4620      	mov	r0, r4
 800965c:	f7ff feee 	bl	800943c <HttpDaemon::HandlePost(bool)>
 8009660:	28c8      	cmp	r0, #200	; 0xc8
 8009662:	61a0      	str	r0, [r4, #24]
 8009664:	d1b7      	bne.n	80095d6 <HttpDaemon::Run()+0x3a>
 8009666:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1b4      	bne.n	80095d6 <HttpDaemon::Run()+0x3a>
 800966c:	b004      	add	sp, #16
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	2bc8      	cmp	r3, #200	; 0xc8
 8009672:	d1b0      	bne.n	80095d6 <HttpDaemon::Run()+0x3a>
 8009674:	69e1      	ldr	r1, [r4, #28]
 8009676:	2901      	cmp	r1, #1
 8009678:	d1ad      	bne.n	80095d6 <HttpDaemon::Run()+0x3a>
 800967a:	4620      	mov	r0, r4
 800967c:	f7ff fede 	bl	800943c <HttpDaemon::HandlePost(bool)>
 8009680:	e7a8      	b.n	80095d4 <HttpDaemon::Run()+0x38>
 8009682:	f240 12f5 	movw	r2, #501	; 0x1f5
 8009686:	4293      	cmp	r3, r2
 8009688:	d010      	beq.n	80096ac <HttpDaemon::Run()+0x110>
 800968a:	f240 12f9 	movw	r2, #505	; 0x1f9
 800968e:	4293      	cmp	r3, r2
 8009690:	d00e      	beq.n	80096b0 <HttpDaemon::Run()+0x114>
 8009692:	4d11      	ldr	r5, [pc, #68]	; (80096d8 <HttpDaemon::Run()+0x13c>)
 8009694:	4a0a      	ldr	r2, [pc, #40]	; (80096c0 <HttpDaemon::Run()+0x124>)
 8009696:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800969a:	bf18      	it	ne
 800969c:	4615      	movne	r5, r2
 800969e:	e7ae      	b.n	80095fe <HttpDaemon::Run()+0x62>
 80096a0:	4d0e      	ldr	r5, [pc, #56]	; (80096dc <HttpDaemon::Run()+0x140>)
 80096a2:	e7ac      	b.n	80095fe <HttpDaemon::Run()+0x62>
 80096a4:	4d0e      	ldr	r5, [pc, #56]	; (80096e0 <HttpDaemon::Run()+0x144>)
 80096a6:	e7aa      	b.n	80095fe <HttpDaemon::Run()+0x62>
 80096a8:	4d0e      	ldr	r5, [pc, #56]	; (80096e4 <HttpDaemon::Run()+0x148>)
 80096aa:	e7a8      	b.n	80095fe <HttpDaemon::Run()+0x62>
 80096ac:	4d0e      	ldr	r5, [pc, #56]	; (80096e8 <HttpDaemon::Run()+0x14c>)
 80096ae:	e7a6      	b.n	80095fe <HttpDaemon::Run()+0x62>
 80096b0:	4d0e      	ldr	r5, [pc, #56]	; (80096ec <HttpDaemon::Run()+0x150>)
 80096b2:	e7a4      	b.n	80095fe <HttpDaemon::Run()+0x62>
 80096b4:	4d0e      	ldr	r5, [pc, #56]	; (80096f0 <HttpDaemon::Run()+0x154>)
 80096b6:	e7ad      	b.n	8009614 <HttpDaemon::Run()+0x78>
 80096b8:	20008aa8 	andcs	r8, r0, r8, lsr #21
 80096bc:	08015ed7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r9, sl, fp, ip, lr}
 80096c0:	08015f5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}
 80096c4:	0801602d 	stmdaeq	r1, {r0, r2, r3, r5, sp, lr}
 80096c8:	08015f6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}
 80096cc:	200000c0 	andcs	r0, r0, r0, asr #1
 80096d0:	08015fca 	stmdaeq	r1, {r1, r3, r6, r7, r8, r9, sl, fp, ip, lr}
 80096d4:	08016022 	stmdaeq	r1, {r1, r5, sp, lr}
 80096d8:	08015f1b 	stmdaeq	r1, {r0, r1, r3, r4, r8, r9, sl, fp, ip, lr}
 80096dc:	08015f06 	stmdaeq	r1, {r1, r2, r8, r9, sl, fp, ip, lr}
 80096e0:	08015ee3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r9, sl, fp, ip, lr}
 80096e4:	08015eed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9, sl, fp, ip, lr}
 80096e8:	08015f31 	stmdaeq	r1, {r0, r4, r5, r8, r9, sl, fp, ip, lr}
 80096ec:	08015f48 	stmdaeq	r1, {r3, r6, r8, r9, sl, fp, ip, lr}
 80096f0:	08015f6c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}

080096f4 <remoteconfig::json_get_list(char*, unsigned short)>:
 80096f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f8:	4b14      	ldr	r3, [pc, #80]	; (800974c <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 80096fa:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8009750 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	b088      	sub	sp, #32
 8009702:	4605      	mov	r5, r0
 8009704:	f8d8 0000 	ldr.w	r0, [r8]
 8009708:	695c      	ldr	r4, [r3, #20]
 800970a:	460e      	mov	r6, r1
 800970c:	f7fe ffea 	bl	80086e4 <RemoteConfig::GetStringNode() const>
 8009710:	4607      	mov	r7, r0
 8009712:	f8d8 0000 	ldr.w	r0, [r8]
 8009716:	f7fe fff1 	bl	80086fc <RemoteConfig::GetStringOutput() const>
 800971a:	4b0e      	ldr	r3, [pc, #56]	; (8009754 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 800971c:	4631      	mov	r1, r6
 800971e:	7a1a      	ldrb	r2, [r3, #8]
 8009720:	3309      	adds	r3, #9
 8009722:	9303      	str	r3, [sp, #12]
 8009724:	0e23      	lsrs	r3, r4, #24
 8009726:	9302      	str	r3, [sp, #8]
 8009728:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009732:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	4628      	mov	r0, r5
 800973a:	4a07      	ldr	r2, [pc, #28]	; (8009758 <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 800973c:	9704      	str	r7, [sp, #16]
 800973e:	b2e3      	uxtb	r3, r4
 8009740:	f009 ff8a 	bl	8013658 <snprintf>
 8009744:	b280      	uxth	r0, r0
 8009746:	b008      	add	sp, #32
 8009748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800974c:	20008aa8 	andcs	r8, r0, r8, lsr #21
 8009750:	200000bc 	strhcs	r0, [r0], -ip
 8009754:	20000098 	mulcs	r0, r8, r0
 8009758:	08016107 	stmdaeq	r1, {r0, r1, r2, r8, sp, lr}

0800975c <remoteconfig::json_get_version(char*, unsigned short)>:
 800975c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800975e:	2208      	movs	r2, #8
 8009760:	4b09      	ldr	r3, [pc, #36]	; (8009788 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 8009762:	9204      	str	r2, [sp, #16]
 8009764:	f1a3 020b 	sub.w	r2, r3, #11
 8009768:	9203      	str	r2, [sp, #12]
 800976a:	220b      	movs	r2, #11
 800976c:	9202      	str	r2, [sp, #8]
 800976e:	4a07      	ldr	r2, [pc, #28]	; (800978c <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 8009770:	9305      	str	r3, [sp, #20]
 8009772:	3b0e      	subs	r3, #14
 8009774:	9201      	str	r2, [sp, #4]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	4a05      	ldr	r2, [pc, #20]	; (8009790 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800977a:	2303      	movs	r3, #3
 800977c:	f009 ff6c 	bl	8013658 <snprintf>
 8009780:	b280      	uxth	r0, r0
 8009782:	b007      	add	sp, #28
 8009784:	f85d fb04 	ldr.w	pc, [sp], #4
 8009788:	2000a176 	andcs	sl, r0, r6, ror r1
 800978c:	08016022 	stmdaeq	r1, {r1, r5, sp, lr}
 8009790:	08016166 	stmdaeq	r1, {r1, r2, r5, r6, r8, sp, lr}

08009794 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 8009794:	b508      	push	{r3, lr}
 8009796:	4b05      	ldr	r3, [pc, #20]	; (80097ac <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800979e:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a2:	4a03      	ldr	r2, [pc, #12]	; (80097b0 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 80097a4:	f009 ff58 	bl	8013658 <snprintf>
 80097a8:	b280      	uxth	r0, r0
 80097aa:	bd08      	pop	{r3, pc}
 80097ac:	2000a1e4 	andcs	sl, r0, r4, ror #3
 80097b0:	080161ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, sp, lr}

080097b4 <remoteconfig::json_get_display(char*, unsigned short)>:
 80097b4:	b508      	push	{r3, lr}
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 80097b8:	4a05      	ldr	r2, [pc, #20]	; (80097d0 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	7c1b      	ldrb	r3, [r3, #16]
 80097be:	f083 0301 	eor.w	r3, r3, #1
 80097c2:	f009 ff49 	bl	8013658 <snprintf>
 80097c6:	b280      	uxth	r0, r0
 80097c8:	bd08      	pop	{r3, pc}
 80097ca:	bf00      	nop
 80097cc:	2000a0d8 	ldrdcs	sl, [r0], -r8
 80097d0:	080161bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, sp, lr}

080097d4 <remoteconfig::json_get_directory(char*, unsigned short)>:
 80097d4:	b508      	push	{r3, lr}
 80097d6:	4a02      	ldr	r2, [pc, #8]	; (80097e0 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 80097d8:	f009 ff3e 	bl	8013658 <snprintf>
 80097dc:	b280      	uxth	r0, r0
 80097de:	bd08      	pop	{r3, pc}
 80097e0:	080161ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, sp, lr}

080097e4 <get_file_content(char const*, char*)>:
 80097e4:	2300      	movs	r3, #0
 80097e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097e8:	4a10      	ldr	r2, [pc, #64]	; (800982c <get_file_content(char const*, char*)+0x48>)
 80097ea:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80097ee:	1e46      	subs	r6, r0, #1
 80097f0:	3c01      	subs	r4, #1
 80097f2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80097f6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80097fa:	42bd      	cmp	r5, r7
 80097fc:	d005      	beq.n	800980a <get_file_content(char const*, char*)+0x26>
 80097fe:	3301      	adds	r3, #1
 8009800:	2b03      	cmp	r3, #3
 8009802:	d1f2      	bne.n	80097ea <get_file_content(char const*, char*)+0x6>
 8009804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800980a:	2d00      	cmp	r5, #0
 800980c:	d1f1      	bne.n	80097f2 <get_file_content(char const*, char*)+0xe>
 800980e:	4608      	mov	r0, r1
 8009810:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009814:	6853      	ldr	r3, [r2, #4]
 8009816:	3b01      	subs	r3, #1
 8009818:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800981c:	f800 2b01 	strb.w	r2, [r0], #1
 8009820:	2a00      	cmp	r2, #0
 8009822:	d1f9      	bne.n	8009818 <get_file_content(char const*, char*)+0x34>
 8009824:	1a40      	subs	r0, r0, r1
 8009826:	3801      	subs	r0, #1
 8009828:	e7ee      	b.n	8009808 <get_file_content(char const*, char*)+0x24>
 800982a:	bf00      	nop
 800982c:	0801650c 	stmdaeq	r1, {r2, r3, r8, sl, sp, lr}

08009830 <ArtNet4Node::IsStatusChanged()>:
 8009830:	4603      	mov	r3, r0
 8009832:	f890 0f34 	ldrb.w	r0, [r0, #3892]	; 0xf34
 8009836:	b110      	cbz	r0, 800983e <ArtNet4Node::IsStatusChanged()+0xe>
 8009838:	2200      	movs	r2, #0
 800983a:	f883 2f34 	strb.w	r2, [r3, #3892]	; 0xf34
 800983e:	4770      	bx	lr

08009840 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 8009840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009842:	4616      	mov	r6, r2
 8009844:	1d07      	adds	r7, r0, #4
 8009846:	4604      	mov	r4, r0
 8009848:	4613      	mov	r3, r2
 800984a:	4638      	mov	r0, r7
 800984c:	f10d 0206 	add.w	r2, sp, #6
 8009850:	460d      	mov	r5, r1
 8009852:	f000 fc23 	bl	800a09c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009856:	b1be      	cbz	r6, 8009888 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 8009858:	b1b0      	cbz	r0, 8009888 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 800985a:	2328      	movs	r3, #40	; 0x28
 800985c:	fb03 4305 	mla	r3, r3, r5, r4
 8009860:	f8d3 3a24 	ldr.w	r3, [r3, #2596]	; 0xa24
 8009864:	2b01      	cmp	r3, #1
 8009866:	d10f      	bne.n	8009888 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 8009868:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800986c:	b123      	cbz	r3, 8009878 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x38>
 800986e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009872:	3301      	adds	r3, #1
 8009874:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009878:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800987c:	b933      	cbnz	r3, 800988c <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4c>
 800987e:	2202      	movs	r2, #2
 8009880:	4629      	mov	r1, r5
 8009882:	4638      	mov	r0, r7
 8009884:	f000 fc30 	bl	800a0e8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8009888:	b003      	add	sp, #12
 800988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988c:	1e71      	subs	r1, r6, #1
 800988e:	424a      	negs	r2, r1
 8009890:	414a      	adcs	r2, r1
 8009892:	f604 203c 	addw	r0, r4, #2620	; 0xa3c
 8009896:	4629      	mov	r1, r5
 8009898:	f002 fbc8 	bl	800c02c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800989c:	e7f4      	b.n	8009888 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
	...

080098a0 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)>:
 80098a0:	1e8a      	subs	r2, r1, #2
 80098a2:	4253      	negs	r3, r2
 80098a4:	4153      	adcs	r3, r2
 80098a6:	f880 3a44 	strb.w	r3, [r0, #2628]	; 0xa44
 80098aa:	4b02      	ldr	r3, [pc, #8]	; (80098b4 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)+0x14>)
 80098ac:	6818      	ldr	r0, [r3, #0]
 80098ae:	f009 bb01 	b.w	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 80098b2:	bf00      	nop
 80098b4:	2000a1c4 	andcs	sl, r0, r4, asr #3

080098b8 <ArtNet4Node::~ArtNet4Node()>:
 80098b8:	b510      	push	{r4, lr}
 80098ba:	4604      	mov	r4, r0
 80098bc:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 80098be:	6003      	str	r3, [r0, #0]
 80098c0:	f600 203c 	addw	r0, r0, #2620	; 0xa3c
 80098c4:	f002 fb3e 	bl	800bf44 <E131Bridge::~E131Bridge()>
 80098c8:	1d20      	adds	r0, r4, #4
 80098ca:	f000 f92a 	bl	8009b22 <ArtNetNode::~ArtNetNode()>
 80098ce:	4620      	mov	r0, r4
 80098d0:	bd10      	pop	{r4, pc}
 80098d2:	bf00      	nop
 80098d4:	08016a74 	stmdaeq	r1, {r2, r4, r5, r6, r9, fp, sp, lr}

080098d8 <ArtNet4Node::~ArtNet4Node()>:
 80098d8:	b510      	push	{r4, lr}
 80098da:	4604      	mov	r4, r0
 80098dc:	f7ff ffec 	bl	80098b8 <ArtNet4Node::~ArtNet4Node()>
 80098e0:	4620      	mov	r0, r4
 80098e2:	f009 fbc5 	bl	8013070 <operator delete(void*)>
 80098e6:	4620      	mov	r0, r4
 80098e8:	bd10      	pop	{r4, pc}

080098ea <ArtNet4Node::GetStatus(unsigned int)>:
 80098ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098ec:	2301      	movs	r3, #1
 80098ee:	4604      	mov	r4, r0
 80098f0:	f10d 0206 	add.w	r2, sp, #6
 80098f4:	f600 203c 	addw	r0, r0, #2620	; 0xa3c
 80098f8:	460d      	mov	r5, r1
 80098fa:	f002 fc01 	bl	800c100 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 80098fe:	b160      	cbz	r0, 800991a <ArtNet4Node::GetStatus(unsigned int)+0x30>
 8009900:	2344      	movs	r3, #68	; 0x44
 8009902:	fb03 4405 	mla	r4, r3, r5, r4
 8009906:	f894 0f92 	ldrb.w	r0, [r4, #3986]	; 0xf92
 800990a:	f894 3f91 	ldrb.w	r3, [r4, #3985]	; 0xf91
 800990e:	01c0      	lsls	r0, r0, #7
 8009910:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 8009914:	f040 0001 	orr.w	r0, r0, #1
 8009918:	b2c0      	uxtb	r0, r0
 800991a:	b003      	add	sp, #12
 800991c:	bd30      	pop	{r4, r5, pc}
	...

08009920 <ArtNet4Node::HandleAddress(unsigned char)>:
 8009920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009922:	2301      	movs	r3, #1
 8009924:	4605      	mov	r5, r0
 8009926:	460c      	mov	r4, r1
 8009928:	f10d 0206 	add.w	r2, sp, #6
 800992c:	2100      	movs	r1, #0
 800992e:	3004      	adds	r0, #4
 8009930:	f000 fbb4 	bl	800a09c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009934:	b150      	cbz	r0, 800994c <ArtNet4Node::HandleAddress(unsigned char)+0x2c>
 8009936:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
 800993a:	b123      	cbz	r3, 8009946 <ArtNet4Node::HandleAddress(unsigned char)+0x26>
 800993c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009940:	3301      	adds	r3, #1
 8009942:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009946:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800994a:	b9eb      	cbnz	r3, 8009988 <ArtNet4Node::HandleAddress(unsigned char)+0x68>
 800994c:	2c13      	cmp	r4, #19
 800994e:	f004 0603 	and.w	r6, r4, #3
 8009952:	d80a      	bhi.n	800996a <ArtNet4Node::HandleAddress(unsigned char)+0x4a>
 8009954:	2c0f      	cmp	r4, #15
 8009956:	d824      	bhi.n	80099a2 <ArtNet4Node::HandleAddress(unsigned char)+0x82>
 8009958:	2c02      	cmp	r4, #2
 800995a:	d020      	beq.n	800999e <ArtNet4Node::HandleAddress(unsigned char)+0x7e>
 800995c:	3c03      	subs	r4, #3
 800995e:	2c01      	cmp	r4, #1
 8009960:	d810      	bhi.n	8009984 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 8009962:	2300      	movs	r3, #0
 8009964:	f885 3a44 	strb.w	r3, [r5, #2628]	; 0xa44
 8009968:	e00c      	b.n	8009984 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 800996a:	2c53      	cmp	r4, #83	; 0x53
 800996c:	d806      	bhi.n	800997c <ArtNet4Node::HandleAddress(unsigned char)+0x5c>
 800996e:	2c4f      	cmp	r4, #79	; 0x4f
 8009970:	d908      	bls.n	8009984 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 8009972:	2344      	movs	r3, #68	; 0x44
 8009974:	2200      	movs	r2, #0
 8009976:	fb03 5306 	mla	r3, r3, r6, r5
 800997a:	e016      	b.n	80099aa <ArtNet4Node::HandleAddress(unsigned char)+0x8a>
 800997c:	3470      	adds	r4, #112	; 0x70
 800997e:	b2e4      	uxtb	r4, r4
 8009980:	2c03      	cmp	r4, #3
 8009982:	d915      	bls.n	80099b0 <ArtNet4Node::HandleAddress(unsigned char)+0x90>
 8009984:	b003      	add	sp, #12
 8009986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009988:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
 800998c:	2100      	movs	r1, #0
 800998e:	2a01      	cmp	r2, #1
 8009990:	bf18      	it	ne
 8009992:	2202      	movne	r2, #2
 8009994:	f605 203c 	addw	r0, r5, #2620	; 0xa3c
 8009998:	f002 fb48 	bl	800c02c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800999c:	e7d6      	b.n	800994c <ArtNet4Node::HandleAddress(unsigned char)+0x2c>
 800999e:	2301      	movs	r3, #1
 80099a0:	e7e0      	b.n	8009964 <ArtNet4Node::HandleAddress(unsigned char)+0x44>
 80099a2:	2344      	movs	r3, #68	; 0x44
 80099a4:	2201      	movs	r2, #1
 80099a6:	fb03 5306 	mla	r3, r3, r6, r5
 80099aa:	f8c3 2f8c 	str.w	r2, [r3, #3980]	; 0xf8c
 80099ae:	e7e9      	b.n	8009984 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 80099b0:	2328      	movs	r3, #40	; 0x28
 80099b2:	fb03 5306 	mla	r3, r3, r6, r5
 80099b6:	f8d3 2a24 	ldr.w	r2, [r3, #2596]	; 0xa24
 80099ba:	2a01      	cmp	r2, #1
 80099bc:	d1e2      	bne.n	8009984 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 80099be:	4b1c      	ldr	r3, [pc, #112]	; (8009a30 <ArtNet4Node::HandleAddress(unsigned char)+0x110>)
 80099c0:	2700      	movs	r7, #0
 80099c2:	6819      	ldr	r1, [r3, #0]
 80099c4:	f8d5 0a40 	ldr.w	r0, [r5, #2624]	; 0xa40
 80099c8:	07c9      	lsls	r1, r1, #31
 80099ca:	bf58      	it	pl
 80099cc:	601a      	strpl	r2, [r3, #0]
 80099ce:	f240 6204 	movw	r2, #1540	; 0x604
 80099d2:	4372      	muls	r2, r6
 80099d4:	4b17      	ldr	r3, [pc, #92]	; (8009a34 <ArtNet4Node::HandleAddress(unsigned char)+0x114>)
 80099d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099da:	441a      	add	r2, r3
 80099dc:	4611      	mov	r1, r2
 80099de:	f502 7400 	add.w	r4, r2, #512	; 0x200
 80099e2:	42a1      	cmp	r1, r4
 80099e4:	d121      	bne.n	8009a2a <ArtNet4Node::HandleAddress(unsigned char)+0x10a>
 80099e6:	f240 6104 	movw	r1, #1540	; 0x604
 80099ea:	fb01 3106 	mla	r1, r1, r6, r3
 80099ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099f2:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 80099f6:	6801      	ldr	r1, [r0, #0]
 80099f8:	690c      	ldr	r4, [r1, #16]
 80099fa:	4631      	mov	r1, r6
 80099fc:	47a0      	blx	r4
 80099fe:	2444      	movs	r4, #68	; 0x44
 8009a00:	fb04 5406 	mla	r4, r4, r6, r5
 8009a04:	f894 3f52 	ldrb.w	r3, [r4, #3922]	; 0xf52
 8009a08:	b15b      	cbz	r3, 8009a22 <ArtNet4Node::HandleAddress(unsigned char)+0x102>
 8009a0a:	f894 3f92 	ldrb.w	r3, [r4, #3986]	; 0xf92
 8009a0e:	b943      	cbnz	r3, 8009a22 <ArtNet4Node::HandleAddress(unsigned char)+0x102>
 8009a10:	f8d5 0a40 	ldr.w	r0, [r5, #2624]	; 0xa40
 8009a14:	4631      	mov	r1, r6
 8009a16:	6803      	ldr	r3, [r0, #0]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	4798      	blx	r3
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	f884 3f92 	strb.w	r3, [r4, #3986]	; 0xf92
 8009a22:	2300      	movs	r3, #0
 8009a24:	f885 3f30 	strb.w	r3, [r5, #3888]	; 0xf30
 8009a28:	e7ac      	b.n	8009984 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 8009a2a:	f801 7b01 	strb.w	r7, [r1], #1
 8009a2e:	e7d8      	b.n	80099e2 <ArtNet4Node::HandleAddress(unsigned char)+0xc2>
 8009a30:	20000660 	andcs	r0, r0, r0, ror #12
 8009a34:	20000664 	andcs	r0, r0, r4, ror #12

08009a38 <ArtNet4Node::ArtNet4Node()>:
 8009a38:	b510      	push	{r4, lr}
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	3004      	adds	r0, #4
 8009a3e:	f000 f941 	bl	8009cc4 <ArtNetNode::ArtNetNode()>
 8009a42:	4b04      	ldr	r3, [pc, #16]	; (8009a54 <ArtNet4Node::ArtNet4Node()+0x1c>)
 8009a44:	f604 203c 	addw	r0, r4, #2620	; 0xa3c
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	f002 fa1d 	bl	800be88 <E131Bridge::E131Bridge()>
 8009a4e:	4620      	mov	r0, r4
 8009a50:	61e4      	str	r4, [r4, #28]
 8009a52:	bd10      	pop	{r4, pc}
 8009a54:	08016a74 	stmdaeq	r1, {r2, r4, r5, r6, r9, fp, sp, lr}

08009a58 <ArtNet4Node::Start()>:
 8009a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a5a:	1d05      	adds	r5, r0, #4
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	2301      	movs	r3, #1
 8009a60:	2100      	movs	r1, #0
 8009a62:	4628      	mov	r0, r5
 8009a64:	f10d 0206 	add.w	r2, sp, #6
 8009a68:	f000 fb18 	bl	800a09c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009a6c:	b138      	cbz	r0, 8009a7e <ArtNet4Node::Start()+0x26>
 8009a6e:	f8d4 3a24 	ldr.w	r3, [r4, #2596]	; 0xa24
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	bf04      	itt	eq
 8009a76:	f8d4 3a1c 	ldreq.w	r3, [r4, #2588]	; 0xa1c
 8009a7a:	f8c4 3f8c 	streq.w	r3, [r4, #3980]	; 0xf8c
 8009a7e:	f894 39fc 	ldrb.w	r3, [r4, #2556]	; 0x9fc
 8009a82:	4628      	mov	r0, r5
 8009a84:	f884 3f35 	strb.w	r3, [r4, #3893]	; 0xf35
 8009a88:	68a3      	ldr	r3, [r4, #8]
 8009a8a:	f8c4 3a40 	str.w	r3, [r4, #2624]	; 0xa40
 8009a8e:	f000 f849 	bl	8009b24 <ArtNetNode::Start()>
 8009a92:	f604 203c 	addw	r0, r4, #2620	; 0xa3c
 8009a96:	b003      	add	sp, #12
 8009a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a9c:	f002 ba54 	b.w	800bf48 <E131Bridge::Start()>

08009aa0 <ArtNet4Node::Run()>:
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	3004      	adds	r0, #4
 8009aa6:	f000 fa1b 	bl	8009ee0 <ArtNetNode::Run()>
 8009aaa:	f894 3f47 	ldrb.w	r3, [r4, #3911]	; 0xf47
 8009aae:	b12b      	cbz	r3, 8009abc <ArtNet4Node::Run()+0x1c>
 8009ab0:	f604 203c 	addw	r0, r4, #2620	; 0xa3c
 8009ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ab8:	f002 bdb2 	b.w	800c620 <E131Bridge::Run()>
 8009abc:	bd10      	pop	{r4, pc}
	...

08009ac0 <ArtNet4Node::Print()>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	3004      	adds	r0, #4
 8009ac6:	f001 fc43 	bl	800b350 <ArtNetNode::Print()>
 8009aca:	f894 39fe 	ldrb.w	r3, [r4, #2558]	; 0x9fe
 8009ace:	b15b      	cbz	r3, 8009ae8 <ArtNet4Node::Print()+0x28>
 8009ad0:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8009ad4:	b113      	cbz	r3, 8009adc <ArtNet4Node::Print()+0x1c>
 8009ad6:	4805      	ldr	r0, [pc, #20]	; (8009aec <ArtNet4Node::Print()+0x2c>)
 8009ad8:	f009 fd96 	bl	8013608 <printf>
 8009adc:	f604 203c 	addw	r0, r4, #2620	; 0xa3c
 8009ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ae4:	f002 bfc4 	b.w	800ca70 <E131Bridge::Print()>
 8009ae8:	bd10      	pop	{r4, pc}
 8009aea:	bf00      	nop
 8009aec:	08016a4e 	stmdaeq	r1, {r1, r2, r3, r6, r9, fp, sp, lr}

08009af0 <strncpy.isra.0>:
 8009af0:	3901      	subs	r1, #1
 8009af2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009af6:	b92b      	cbnz	r3, 8009b04 <strncpy.isra.0+0x14>
 8009af8:	4402      	add	r2, r0
 8009afa:	4290      	cmp	r0, r2
 8009afc:	d006      	beq.n	8009b0c <strncpy.isra.0+0x1c>
 8009afe:	f800 3b01 	strb.w	r3, [r0], #1
 8009b02:	e7fa      	b.n	8009afa <strncpy.isra.0+0xa>
 8009b04:	3a01      	subs	r2, #1
 8009b06:	f800 3b01 	strb.w	r3, [r0], #1
 8009b0a:	d1f2      	bne.n	8009af2 <strncpy.isra.0+0x2>
 8009b0c:	4770      	bx	lr

08009b0e <memcpy.isra.0>:
 8009b0e:	3801      	subs	r0, #1
 8009b10:	440a      	add	r2, r1
 8009b12:	4291      	cmp	r1, r2
 8009b14:	d100      	bne.n	8009b18 <memcpy.isra.0+0xa>
 8009b16:	4770      	bx	lr
 8009b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b1c:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009b20:	e7f7      	b.n	8009b12 <memcpy.isra.0+0x4>

08009b22 <ArtNetNode::~ArtNetNode()>:
 8009b22:	4770      	bx	lr

08009b24 <ArtNetNode::Start()>:
 8009b24:	b538      	push	{r3, r4, r5, lr}
 8009b26:	4d25      	ldr	r5, [pc, #148]	; (8009bbc <ArtNetNode::Start()+0x98>)
 8009b28:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
 8009b2c:	682a      	ldr	r2, [r5, #0]
 8009b2e:	f023 0302 	bic.w	r3, r3, #2
 8009b32:	7951      	ldrb	r1, [r2, #5]
 8009b34:	4604      	mov	r4, r0
 8009b36:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8009b3a:	b25b      	sxtb	r3, r3
 8009b3c:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 8009b40:	7912      	ldrb	r2, [r2, #4]
 8009b42:	f023 0304 	bic.w	r3, r3, #4
 8009b46:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8009b4a:	f880 308c 	strb.w	r3, [r0, #140]	; 0x8c
 8009b4e:	f001 f845 	bl	800abdc <ArtNetNode::FillPollReply()>
 8009b52:	f641 1136 	movw	r1, #6454	; 0x1936
 8009b56:	6828      	ldr	r0, [r5, #0]
 8009b58:	f006 f8d5 	bl	800fd06 <Network::Begin(unsigned short)>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	6020      	str	r0, [r4, #0]
 8009b60:	6920      	ldr	r0, [r4, #16]
 8009b62:	f884 39f1 	strb.w	r3, [r4, #2545]	; 0x9f1
 8009b66:	b9f8      	cbnz	r0, 8009ba8 <ArtNetNode::Start()+0x84>
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f001 f8f8 	bl	800ad60 <ArtNetNode::SendPollRelply(bool)>
 8009b70:	68e3      	ldr	r3, [r4, #12]
 8009b72:	b933      	cbnz	r3, 8009b82 <ArtNetNode::Start()+0x5e>
 8009b74:	4b12      	ldr	r3, [pc, #72]	; (8009bc0 <ArtNetNode::Start()+0x9c>)
 8009b76:	2102      	movs	r1, #2
 8009b78:	6818      	ldr	r0, [r3, #0]
 8009b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b7e:	f009 b999 	b.w	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 8009b82:	f894 3a1c 	ldrb.w	r3, [r4, #2588]	; 0xa1c
 8009b86:	b133      	cbz	r3, 8009b96 <ArtNetNode::Start()+0x72>
 8009b88:	f894 3a04 	ldrb.w	r3, [r4, #2564]	; 0xa04
 8009b8c:	b11b      	cbz	r3, 8009b96 <ArtNetNode::Start()+0x72>
 8009b8e:	2100      	movs	r1, #0
 8009b90:	4620      	mov	r0, r4
 8009b92:	f001 f9b7 	bl	800af04 <ArtNetNode::SendTod(unsigned int)>
 8009b96:	f894 3a2c 	ldrb.w	r3, [r4, #2604]	; 0xa2c
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0ea      	beq.n	8009b74 <ArtNetNode::Start()+0x50>
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f001 fa71 	bl	800b088 <ArtNetNode::SendTodRequest(unsigned int)>
 8009ba6:	e7e5      	b.n	8009b74 <ArtNetNode::Start()+0x50>
 8009ba8:	f894 3a2c 	ldrb.w	r3, [r4, #2604]	; 0xa2c
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d0db      	beq.n	8009b68 <ArtNetNode::Start()+0x44>
 8009bb0:	6803      	ldr	r3, [r0, #0]
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	4798      	blx	r3
 8009bb8:	e7d6      	b.n	8009b68 <ArtNetNode::Start()+0x44>
 8009bba:	bf00      	nop
 8009bbc:	20008aa8 	andcs	r8, r0, r8, lsr #21
 8009bc0:	2000a1c4 	andcs	sl, r0, r4, asr #3

08009bc4 <ArtNetNode::Stop()>:
 8009bc4:	f8d0 1a20 	ldr.w	r1, [r0, #2592]	; 0xa20
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	4604      	mov	r4, r0
 8009bcc:	b981      	cbnz	r1, 8009bf0 <ArtNetNode::Stop()+0x2c>
 8009bce:	6840      	ldr	r0, [r0, #4]
 8009bd0:	b110      	cbz	r0, 8009bd8 <ArtNetNode::Stop()+0x14>
 8009bd2:	6803      	ldr	r3, [r0, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	4798      	blx	r3
 8009bd8:	4b16      	ldr	r3, [pc, #88]	; (8009c34 <ArtNetNode::Stop()+0x70>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	07d2      	lsls	r2, r2, #31
 8009bde:	bf5c      	itt	pl
 8009be0:	2201      	movpl	r2, #1
 8009be2:	601a      	strpl	r2, [r3, #0]
 8009be4:	2300      	movs	r3, #0
 8009be6:	4a14      	ldr	r2, [pc, #80]	; (8009c38 <ArtNetNode::Stop()+0x74>)
 8009be8:	f884 3a25 	strb.w	r3, [r4, #2597]	; 0xa25
 8009bec:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 8009bf0:	6923      	ldr	r3, [r4, #16]
 8009bf2:	b16b      	cbz	r3, 8009c10 <ArtNetNode::Stop()+0x4c>
 8009bf4:	2500      	movs	r5, #0
 8009bf6:	f604 262c 	addw	r6, r4, #2604	; 0xa2c
 8009bfa:	012b      	lsls	r3, r5, #4
 8009bfc:	5cf3      	ldrb	r3, [r6, r3]
 8009bfe:	b123      	cbz	r3, 8009c0a <ArtNetNode::Stop()+0x46>
 8009c00:	6920      	ldr	r0, [r4, #16]
 8009c02:	4629      	mov	r1, r5
 8009c04:	6803      	ldr	r3, [r0, #0]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	4798      	blx	r3
 8009c0a:	3501      	adds	r5, #1
 8009c0c:	2d04      	cmp	r5, #4
 8009c0e:	d1f4      	bne.n	8009bfa <ArtNetNode::Stop()+0x36>
 8009c10:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <ArtNetNode::Stop()+0x78>)
 8009c12:	2100      	movs	r1, #0
 8009c14:	6818      	ldr	r0, [r3, #0]
 8009c16:	f009 f94d 	bl	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 8009c1a:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 8009c1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c26:	f884 308b 	strb.w	r3, [r4, #139]	; 0x8b
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	f884 39f1 	strb.w	r3, [r4, #2545]	; 0x9f1
 8009c30:	bd70      	pop	{r4, r5, r6, pc}
 8009c32:	bf00      	nop
 8009c34:	20000660 	andcs	r0, r0, r0, ror #12
 8009c38:	20000664 	andcs	r0, r0, r4, ror #12
 8009c3c:	2000a1c4 	andcs	sl, r0, r4, asr #3

08009c40 <ArtNetNode::SetShortName(char const*)>:
 8009c40:	b538      	push	{r3, r4, r5, lr}
 8009c42:	f100 0538 	add.w	r5, r0, #56	; 0x38
 8009c46:	4604      	mov	r4, r0
 8009c48:	2211      	movs	r2, #17
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	f7ff ff50 	bl	8009af0 <strncpy.isra.0>
 8009c50:	2300      	movs	r3, #0
 8009c52:	2212      	movs	r2, #18
 8009c54:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8009c58:	4629      	mov	r1, r5
 8009c5a:	f204 5086 	addw	r0, r4, #1414	; 0x586
 8009c5e:	f7ff ff56 	bl	8009b0e <memcpy.isra.0>
 8009c62:	f894 39f1 	ldrb.w	r3, [r4, #2545]	; 0x9f1
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d10a      	bne.n	8009c80 <ArtNetNode::SetShortName(char const*)+0x40>
 8009c6a:	69e0      	ldr	r0, [r4, #28]
 8009c6c:	b118      	cbz	r0, 8009c76 <ArtNetNode::SetShortName(char const*)+0x36>
 8009c6e:	6803      	ldr	r3, [r0, #0]
 8009c70:	4629      	mov	r1, r5
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	4798      	blx	r3
 8009c76:	4628      	mov	r0, r5
 8009c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c7c:	f007 bbe0 	b.w	8011440 <artnet::display_shortname(char const*)>
 8009c80:	bd38      	pop	{r3, r4, r5, pc}

08009c82 <ArtNetNode::SetLongName(char const*)>:
 8009c82:	b538      	push	{r3, r4, r5, lr}
 8009c84:	f100 054a 	add.w	r5, r0, #74	; 0x4a
 8009c88:	4604      	mov	r4, r0
 8009c8a:	223f      	movs	r2, #63	; 0x3f
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	f7ff ff2f 	bl	8009af0 <strncpy.isra.0>
 8009c92:	2300      	movs	r3, #0
 8009c94:	2240      	movs	r2, #64	; 0x40
 8009c96:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	f504 60b3 	add.w	r0, r4, #1432	; 0x598
 8009ca0:	f7ff ff35 	bl	8009b0e <memcpy.isra.0>
 8009ca4:	f894 39f1 	ldrb.w	r3, [r4, #2545]	; 0x9f1
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d10a      	bne.n	8009cc2 <ArtNetNode::SetLongName(char const*)+0x40>
 8009cac:	69e0      	ldr	r0, [r4, #28]
 8009cae:	b118      	cbz	r0, 8009cb8 <ArtNetNode::SetLongName(char const*)+0x36>
 8009cb0:	6803      	ldr	r3, [r0, #0]
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	4798      	blx	r3
 8009cb8:	4628      	mov	r0, r5
 8009cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cbe:	f007 bbc9 	b.w	8011454 <artnet::display_longname(char const*)>
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}

08009cc4 <ArtNetNode::ArtNetNode()>:
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ccc:	4604      	mov	r4, r0
 8009cce:	e9c0 2300 	strd	r2, r3, [r0]
 8009cd2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8009cd6:	4a4c      	ldr	r2, [pc, #304]	; (8009e08 <ArtNetNode::ArtNetNode()+0x144>)
 8009cd8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cdc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8009ce0:	6010      	str	r0, [r2, #0]
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	f8c0 3984 	str.w	r3, [r0, #2436]	; 0x984
 8009ce8:	f8c0 3988 	str.w	r3, [r0, #2440]	; 0x988
 8009cec:	f880 398c 	strb.w	r3, [r0, #2444]	; 0x98c
 8009cf0:	f100 0220 	add.w	r2, r0, #32
 8009cf4:	f100 0198 	add.w	r1, r0, #152	; 0x98
 8009cf8:	428a      	cmp	r2, r1
 8009cfa:	d179      	bne.n	8009df0 <ArtNetNode::ArtNetNode()+0x12c>
 8009cfc:	4b43      	ldr	r3, [pc, #268]	; (8009e0c <ArtNetNode::ArtNetNode()+0x148>)
 8009cfe:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8009d02:	6818      	ldr	r0, [r3, #0]
 8009d04:	6943      	ldr	r3, [r0, #20]
 8009d06:	6223      	str	r3, [r4, #32]
 8009d08:	69c2      	ldr	r2, [r0, #28]
 8009d0a:	ea63 0302 	orn	r3, r3, r2
 8009d0e:	6263      	str	r3, [r4, #36]	; 0x24
 8009d10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d12:	f005 fffe 	bl	800fd12 <Network::MacAddressCopyTo(unsigned char*)>
 8009d16:	23d0      	movs	r3, #208	; 0xd0
 8009d18:	f884 308b 	strb.w	r3, [r4, #139]	; 0x8b
 8009d1c:	f642 0398 	movw	r3, #10392	; 0x2898
 8009d20:	2100      	movs	r1, #0
 8009d22:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
 8009d26:	f504 6220 	add.w	r2, r4, #2560	; 0xa00
 8009d2a:	f504 631e 	add.w	r3, r4, #2528	; 0x9e0
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d161      	bne.n	8009df6 <ArtNetNode::ArtNetNode()+0x132>
 8009d32:	f240 1201 	movw	r2, #257	; 0x101
 8009d36:	2100      	movs	r1, #0
 8009d38:	f8a4 29f0 	strh.w	r2, [r4, #2544]	; 0x9f0
 8009d3c:	f604 2228 	addw	r2, r4, #2600	; 0xa28
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d15b      	bne.n	8009dfc <ArtNetNode::ArtNetNode()+0x138>
 8009d44:	2100      	movs	r1, #0
 8009d46:	4613      	mov	r3, r2
 8009d48:	f604 2238 	addw	r2, r4, #2616	; 0xa38
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d158      	bne.n	8009e02 <ArtNetNode::ArtNetNode()+0x13e>
 8009d50:	2708      	movs	r7, #8
 8009d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d54:	4620      	mov	r0, r4
 8009d56:	f8c4 3a30 	str.w	r3, [r4, #2608]	; 0xa30
 8009d5a:	492d      	ldr	r1, [pc, #180]	; (8009e10 <ArtNetNode::ArtNetNode()+0x14c>)
 8009d5c:	f884 7a2b 	strb.w	r7, [r4, #2603]	; 0xa2b
 8009d60:	f7ff ff6e 	bl	8009c40 <ArtNetNode::SetShortName(char const*)>
 8009d64:	4b2b      	ldr	r3, [pc, #172]	; (8009e14 <ArtNetNode::ArtNetNode()+0x150>)
 8009d66:	4e2c      	ldr	r6, [pc, #176]	; (8009e18 <ArtNetNode::ArtNetNode()+0x154>)
 8009d68:	9302      	str	r3, [sp, #8]
 8009d6a:	2304      	movs	r3, #4
 8009d6c:	f604 159d 	addw	r5, r4, #2461	; 0x99d
 8009d70:	4a2a      	ldr	r2, [pc, #168]	; (8009e1c <ArtNetNode::ArtNetNode()+0x158>)
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	2140      	movs	r1, #64	; 0x40
 8009d76:	4b2a      	ldr	r3, [pc, #168]	; (8009e20 <ArtNetNode::ArtNetNode()+0x15c>)
 8009d78:	4628      	mov	r0, r5
 8009d7a:	9600      	str	r6, [sp, #0]
 8009d7c:	f009 fc6c 	bl	8013658 <snprintf>
 8009d80:	4629      	mov	r1, r5
 8009d82:	2500      	movs	r5, #0
 8009d84:	4620      	mov	r0, r4
 8009d86:	f7ff ff7c 	bl	8009c82 <ArtNetNode::SetLongName(char const*)>
 8009d8a:	f604 108d 	addw	r0, r4, #2445	; 0x98d
 8009d8e:	220f      	movs	r2, #15
 8009d90:	4924      	ldr	r1, [pc, #144]	; (8009e24 <ArtNetNode::ArtNetNode()+0x160>)
 8009d92:	f7ff fead 	bl	8009af0 <strncpy.isra.0>
 8009d96:	463a      	mov	r2, r7
 8009d98:	4631      	mov	r1, r6
 8009d9a:	f204 605b 	addw	r0, r4, #1627	; 0x65b
 8009d9e:	f884 599c 	strb.w	r5, [r4, #2460]	; 0x99c
 8009da2:	f7ff feb4 	bl	8009b0e <memcpy.isra.0>
 8009da6:	2350      	movs	r3, #80	; 0x50
 8009da8:	f884 3664 	strb.w	r3, [r4, #1636]	; 0x664
 8009dac:	230e      	movs	r3, #14
 8009dae:	f604 006d 	addw	r0, r4, #2157	; 0x86d
 8009db2:	f884 3666 	strb.w	r3, [r4, #1638]	; 0x666
 8009db6:	463a      	mov	r2, r7
 8009db8:	4631      	mov	r1, r6
 8009dba:	f884 5663 	strb.w	r5, [r4, #1635]	; 0x663
 8009dbe:	f884 5665 	strb.w	r5, [r4, #1637]	; 0x665
 8009dc2:	f7ff fea4 	bl	8009b0e <memcpy.isra.0>
 8009dc6:	f06f 037c 	mvn.w	r3, #124	; 0x7c
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f884 3876 	strb.w	r3, [r4, #2166]	; 0x876
 8009dd0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8009dd4:	f884 5875 	strb.w	r5, [r4, #2165]	; 0x875
 8009dd8:	f884 5877 	strb.w	r5, [r4, #2167]	; 0x877
 8009ddc:	f8a4 3878 	strh.w	r3, [r4, #2168]	; 0x878
 8009de0:	f884 587b 	strb.w	r5, [r4, #2171]	; 0x87b
 8009de4:	f8c4 587c 	str.w	r5, [r4, #2172]	; 0x87c
 8009de8:	f8a4 5880 	strh.w	r5, [r4, #2176]	; 0x880
 8009dec:	b005      	add	sp, #20
 8009dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009df0:	f802 3b01 	strb.w	r3, [r2], #1
 8009df4:	e780      	b.n	8009cf8 <ArtNetNode::ArtNetNode()+0x34>
 8009df6:	f803 1b01 	strb.w	r1, [r3], #1
 8009dfa:	e798      	b.n	8009d2e <ArtNetNode::ArtNetNode()+0x6a>
 8009dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8009e00:	e79e      	b.n	8009d40 <ArtNetNode::ArtNetNode()+0x7c>
 8009e02:	f803 1b01 	strb.w	r1, [r3], #1
 8009e06:	e7a1      	b.n	8009d4c <ArtNetNode::ArtNetNode()+0x88>
 8009e08:	20000c68 	andcs	r0, r0, r8, ror #24
 8009e0c:	20008aa8 	andcs	r8, r0, r8, lsr #21
 8009e10:	08016b0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, fp, sp, lr}
 8009e14:	08016ae7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, fp, sp, lr}
 8009e18:	08016b05 	stmdaeq	r1, {r0, r2, r8, r9, fp, sp, lr}
 8009e1c:	08016adb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, fp, sp, lr}
 8009e20:	08016022 	stmdaeq	r1, {r1, r5, sp, lr}
 8009e24:	08016afc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, fp, sp, lr}

08009e28 <ArtNetNode::SetNetworkDataLossCondition()>:
 8009e28:	2300      	movs	r3, #0
 8009e2a:	b510      	push	{r4, lr}
 8009e2c:	f8d0 2a14 	ldr.w	r2, [r0, #2580]	; 0xa14
 8009e30:	f880 39f6 	strb.w	r3, [r0, #2550]	; 0x9f6
 8009e34:	f880 39f5 	strb.w	r3, [r0, #2549]	; 0x9f5
 8009e38:	f8d0 3a0c 	ldr.w	r3, [r0, #2572]	; 0xa0c
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	42d3      	cmn	r3, r2
 8009e40:	d020      	beq.n	8009e84 <ArtNetNode::SetNetworkDataLossCondition()+0x5c>
 8009e42:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
 8009e46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009e4a:	2b40      	cmp	r3, #64	; 0x40
 8009e4c:	d007      	beq.n	8009e5e <ArtNetNode::SetNetworkDataLossCondition()+0x36>
 8009e4e:	d90b      	bls.n	8009e68 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8009e50:	2b80      	cmp	r3, #128	; 0x80
 8009e52:	d109      	bne.n	8009e68 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8009e54:	6860      	ldr	r0, [r4, #4]
 8009e56:	6803      	ldr	r3, [r0, #0]
 8009e58:	699b      	ldr	r3, [r3, #24]
 8009e5a:	4798      	blx	r3
 8009e5c:	e004      	b.n	8009e68 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8009e5e:	6860      	ldr	r0, [r4, #4]
 8009e60:	2101      	movs	r1, #1
 8009e62:	6803      	ldr	r3, [r0, #0]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	4798      	blx	r3
 8009e68:	4a07      	ldr	r2, [pc, #28]	; (8009e88 <ArtNetNode::SetNetworkDataLossCondition()+0x60>)
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	6811      	ldr	r1, [r2, #0]
 8009e6e:	f8c4 3a0c 	str.w	r3, [r4, #2572]	; 0xa0c
 8009e72:	07c9      	lsls	r1, r1, #31
 8009e74:	bf5c      	itt	pl
 8009e76:	2101      	movpl	r1, #1
 8009e78:	6011      	strpl	r1, [r2, #0]
 8009e7a:	4a04      	ldr	r2, [pc, #16]	; (8009e8c <ArtNetNode::SetNetworkDataLossCondition()+0x64>)
 8009e7c:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
 8009e80:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 8009e84:	bd10      	pop	{r4, pc}
 8009e86:	bf00      	nop
 8009e88:	20000660 	andcs	r0, r0, r0, ror #12
 8009e8c:	20000664 	andcs	r0, r0, r4, ror #12

08009e90 <ArtNetNode::GetType()>:
 8009e90:	f8b0 3568 	ldrh.w	r3, [r0, #1384]	; 0x568
 8009e94:	b530      	push	{r4, r5, lr}
 8009e96:	2b0b      	cmp	r3, #11
 8009e98:	d91d      	bls.n	8009ed6 <ArtNetNode::GetType()+0x46>
 8009e9a:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
 8009e9e:	b9d3      	cbnz	r3, 8009ed6 <ArtNetNode::GetType()+0x46>
 8009ea0:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 8009ea4:	2a0e      	cmp	r2, #14
 8009ea6:	d10d      	bne.n	8009ec4 <ArtNetNode::GetType()+0x34>
 8009ea8:	4a0c      	ldr	r2, [pc, #48]	; (8009edc <ArtNetNode::GetType()+0x4c>)
 8009eaa:	f100 0397 	add.w	r3, r0, #151	; 0x97
 8009eae:	f100 019f 	add.w	r1, r0, #159	; 0x9f
 8009eb2:	428b      	cmp	r3, r1
 8009eb4:	d109      	bne.n	8009eca <ArtNetNode::GetType()+0x3a>
 8009eb6:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 8009eba:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8009ebe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	f8a0 356a 	strh.w	r3, [r0, #1386]	; 0x56a
 8009ec8:	bd30      	pop	{r4, r5, pc}
 8009eca:	f812 4b01 	ldrb.w	r4, [r2], #1
 8009ece:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 8009ed2:	42a5      	cmp	r5, r4
 8009ed4:	d0ed      	beq.n	8009eb2 <ArtNetNode::GetType()+0x22>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e7f4      	b.n	8009ec4 <ArtNetNode::GetType()+0x34>
 8009eda:	bf00      	nop
 8009edc:	08015898 	stmdaeq	r1, {r3, r4, r7, fp, ip, lr}

08009ee0 <ArtNetNode::Run()>:
 8009ee0:	b530      	push	{r4, r5, lr}
 8009ee2:	4601      	mov	r1, r0
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	f10d 030e 	add.w	r3, sp, #14
 8009eec:	f811 0b98 	ldrb.w	r0, [r1], #152
 8009ef0:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	f204 5364 	addw	r3, r4, #1380	; 0x564
 8009efa:	f005 f9e3 	bl	800f2c4 <udp_recv>
 8009efe:	4b65      	ldr	r3, [pc, #404]	; (800a094 <ArtNetNode::Run()+0x1b4>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f8c4 3984 	str.w	r3, [r4, #2436]	; 0x984
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d146      	bne.n	8009f98 <ArtNetNode::Run()+0xb8>
 8009f0a:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
 8009f0e:	1a9b      	subs	r3, r3, r2
 8009f10:	f242 720f 	movw	r2, #9999	; 0x270f
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d902      	bls.n	8009f1e <ArtNetNode::Run()+0x3e>
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f7ff ff85 	bl	8009e28 <ArtNetNode::SetNetworkDataLossCondition()>
 8009f1e:	f894 39f2 	ldrb.w	r3, [r4, #2546]	; 0x9f2
 8009f22:	b15b      	cbz	r3, 8009f3c <ArtNetNode::Run()+0x5c>
 8009f24:	69a0      	ldr	r0, [r4, #24]
 8009f26:	f894 59f7 	ldrb.w	r5, [r4, #2551]	; 0x9f7
 8009f2a:	6803      	ldr	r3, [r0, #0]
 8009f2c:	695b      	ldr	r3, [r3, #20]
 8009f2e:	4798      	blx	r3
 8009f30:	b905      	cbnz	r5, 8009f34 <ArtNetNode::Run()+0x54>
 8009f32:	b118      	cbz	r0, 8009f3c <ArtNetNode::Run()+0x5c>
 8009f34:	2100      	movs	r1, #0
 8009f36:	4620      	mov	r0, r4
 8009f38:	f000 ff12 	bl	800ad60 <ArtNetNode::SendPollRelply(bool)>
 8009f3c:	f8d4 3984 	ldr.w	r3, [r4, #2436]	; 0x984
 8009f40:	f8d4 2988 	ldr.w	r2, [r4, #2440]	; 0x988
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f4a:	d305      	bcc.n	8009f58 <ArtNetNode::Run()+0x78>
 8009f4c:	f894 39f9 	ldrb.w	r3, [r4, #2553]	; 0x9f9
 8009f50:	f023 0302 	bic.w	r3, r3, #2
 8009f54:	f884 39f9 	strb.w	r3, [r4, #2553]	; 0x9f9
 8009f58:	6923      	ldr	r3, [r4, #16]
 8009f5a:	b113      	cbz	r3, 8009f62 <ArtNetNode::Run()+0x82>
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f000 fce9 	bl	800a934 <ArtNetNode::HandleDmxIn()>
 8009f62:	68e3      	ldr	r3, [r4, #12]
 8009f64:	b113      	cbz	r3, 8009f6c <ArtNetNode::Run()+0x8c>
 8009f66:	4620      	mov	r0, r4
 8009f68:	f001 f94e 	bl	800b208 <ArtNetNode::HandleRdmIn()>
 8009f6c:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 8009f70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009f74:	2bc0      	cmp	r3, #192	; 0xc0
 8009f76:	d10d      	bne.n	8009f94 <ArtNetNode::Run()+0xb4>
 8009f78:	4b47      	ldr	r3, [pc, #284]	; (800a098 <ArtNetNode::Run()+0x1b8>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	2b04      	cmp	r3, #4
 8009f80:	d008      	beq.n	8009f94 <ArtNetNode::Run()+0xb4>
 8009f82:	69a0      	ldr	r0, [r4, #24]
 8009f84:	f894 29f9 	ldrb.w	r2, [r4, #2553]	; 0x9f9
 8009f88:	6803      	ldr	r3, [r0, #0]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	2a00      	cmp	r2, #0
 8009f8e:	d07f      	beq.n	800a090 <ArtNetNode::Run()+0x1b0>
 8009f90:	2103      	movs	r1, #3
 8009f92:	4798      	blx	r3
 8009f94:	b005      	add	sp, #20
 8009f96:	bd30      	pop	{r4, r5, pc}
 8009f98:	f894 29f5 	ldrb.w	r2, [r4, #2549]	; 0x9f5
 8009f9c:	f8a4 0568 	strh.w	r0, [r4, #1384]	; 0x568
 8009fa0:	f8c4 3988 	str.w	r3, [r4, #2440]	; 0x988
 8009fa4:	b142      	cbz	r2, 8009fb8 <ArtNetNode::Run()+0xd8>
 8009fa6:	f8d4 29ec 	ldr.w	r2, [r4, #2540]	; 0x9ec
 8009faa:	1a9b      	subs	r3, r3, r2
 8009fac:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8009fb0:	bf24      	itt	cs
 8009fb2:	2300      	movcs	r3, #0
 8009fb4:	f884 39f5 	strbcs.w	r3, [r4, #2549]	; 0x9f5
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f7ff ff69 	bl	8009e90 <ArtNetNode::GetType()>
 8009fbe:	f8b4 356a 	ldrh.w	r3, [r4, #1386]	; 0x56a
 8009fc2:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8009fc6:	d04e      	beq.n	800a066 <ArtNetNode::Run()+0x186>
 8009fc8:	d81b      	bhi.n	800a002 <ArtNetNode::Run()+0x122>
 8009fca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009fce:	d03d      	beq.n	800a04c <ArtNetNode::Run()+0x16c>
 8009fd0:	d80b      	bhi.n	8009fea <ArtNetNode::Run()+0x10a>
 8009fd2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009fd6:	d02d      	beq.n	800a034 <ArtNetNode::Run()+0x154>
 8009fd8:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 8009fdc:	d030      	beq.n	800a040 <ArtNetNode::Run()+0x160>
 8009fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fe2:	d1b9      	bne.n	8009f58 <ArtNetNode::Run()+0x78>
 8009fe4:	f000 ff08 	bl	800adf8 <ArtNetNode::HandlePoll()>
 8009fe8:	e7b6      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 8009fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fee:	d033      	beq.n	800a058 <ArtNetNode::Run()+0x178>
 8009ff0:	f5b3 4f01 	cmp.w	r3, #33024	; 0x8100
 8009ff4:	d1b0      	bne.n	8009f58 <ArtNetNode::Run()+0x78>
 8009ff6:	68e3      	ldr	r3, [r4, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d0ad      	beq.n	8009f58 <ArtNetNode::Run()+0x78>
 8009ffc:	f000 ff5e 	bl	800aebc <ArtNetNode::HandleTodData()>
 800a000:	e7aa      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 800a002:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800a006:	d024      	beq.n	800a052 <ArtNetNode::Run()+0x172>
 800a008:	d80b      	bhi.n	800a022 <ArtNetNode::Run()+0x142>
 800a00a:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800a00e:	d031      	beq.n	800a074 <ArtNetNode::Run()+0x194>
 800a010:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 800a014:	d1a0      	bne.n	8009f58 <ArtNetNode::Run()+0x78>
 800a016:	68a3      	ldr	r3, [r4, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d09d      	beq.n	8009f58 <ArtNetNode::Run()+0x78>
 800a01c:	f001 f970 	bl	800b300 <ArtNetNode::HandleTimeCode()>
 800a020:	e79a      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 800a022:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800a026:	d02c      	beq.n	800a082 <ArtNetNode::Run()+0x1a2>
 800a028:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800a02c:	d194      	bne.n	8009f58 <ArtNetNode::Run()+0x78>
 800a02e:	f000 fd0f 	bl	800aa50 <ArtNetNode::HandleIpProg()>
 800a032:	e791      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 800a034:	6863      	ldr	r3, [r4, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d08e      	beq.n	8009f58 <ArtNetNode::Run()+0x78>
 800a03a:	f000 fba6 	bl	800a78a <ArtNetNode::HandleDmx()>
 800a03e:	e78b      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 800a040:	6863      	ldr	r3, [r4, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d088      	beq.n	8009f58 <ArtNetNode::Run()+0x78>
 800a046:	f001 f923 	bl	800b290 <ArtNetNode::HandleSync()>
 800a04a:	e785      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 800a04c:	f000 f994 	bl	800a378 <ArtNetNode::HandleAddress()>
 800a050:	e782      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 800a052:	f001 f95b 	bl	800b30c <ArtNetNode::HandleTimeSync()>
 800a056:	e77f      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 800a058:	68e3      	ldr	r3, [r4, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f43f af7c 	beq.w	8009f58 <ArtNetNode::Run()+0x78>
 800a060:	f000 ffec 	bl	800b03c <ArtNetNode::HandleTodRequest()>
 800a064:	e778      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 800a066:	68e3      	ldr	r3, [r4, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f43f af75 	beq.w	8009f58 <ArtNetNode::Run()+0x78>
 800a06e:	f000 ffaf 	bl	800afd0 <ArtNetNode::HandleTodControl()>
 800a072:	e771      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 800a074:	68e3      	ldr	r3, [r4, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	f43f af6e 	beq.w	8009f58 <ArtNetNode::Run()+0x78>
 800a07c:	f001 f858 	bl	800b130 <ArtNetNode::HandleRdm()>
 800a080:	e76a      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 800a082:	6963      	ldr	r3, [r4, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f43f af67 	beq.w	8009f58 <ArtNetNode::Run()+0x78>
 800a08a:	f001 febf 	bl	800be0c <ArtNetNode::HandleTrigger()>
 800a08e:	e763      	b.n	8009f58 <ArtNetNode::Run()+0x78>
 800a090:	2102      	movs	r1, #2
 800a092:	e77e      	b.n	8009f92 <ArtNetNode::Run()+0xb2>
 800a094:	2000a1e4 	andcs	sl, r0, r4, ror #3
 800a098:	2000a1c4 	andcs	sl, r0, r4, asr #3

0800a09c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 800a09c:	b93b      	cbnz	r3, 800a0ae <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 800a09e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a0a2:	f8b0 3a28 	ldrh.w	r3, [r0, #2600]	; 0xa28
 800a0a6:	f890 0a2c 	ldrb.w	r0, [r0, #2604]	; 0xa2c
 800a0aa:	8013      	strh	r3, [r2, #0]
 800a0ac:	4770      	bx	lr
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	bf01      	itttt	eq
 800a0b2:	2328      	moveq	r3, #40	; 0x28
 800a0b4:	fb03 0001 	mlaeq	r0, r3, r1, r0
 800a0b8:	f8b0 3a00 	ldrheq.w	r3, [r0, #2560]	; 0xa00
 800a0bc:	f890 0a04 	ldrbeq.w	r0, [r0, #2564]	; 0xa04
 800a0c0:	bf0c      	ite	eq
 800a0c2:	8013      	strheq	r3, [r2, #0]
 800a0c4:	2000      	movne	r0, #0
 800a0c6:	4770      	bx	lr

0800a0c8 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 800a0c8:	4402      	add	r2, r0
 800a0ca:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 800a0ce:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 800a0d2:	021b      	lsls	r3, r3, #8
 800a0d4:	0112      	lsls	r2, r2, #4
 800a0d6:	b2d2      	uxtb	r2, r2
 800a0d8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	f001 010f 	and.w	r1, r1, #15
 800a0e2:	ea43 0001 	orr.w	r0, r3, r1
 800a0e6:	4770      	bx	lr

0800a0e8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 800a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	4616      	mov	r6, r2
 800a0ee:	461d      	mov	r5, r3
 800a0f0:	2900      	cmp	r1, #0
 800a0f2:	f040 8086 	bne.w	800a202 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x11a>
 800a0f6:	2a02      	cmp	r2, #2
 800a0f8:	d11a      	bne.n	800a130 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x48>
 800a0fa:	f890 3a04 	ldrb.w	r3, [r0, #2564]	; 0xa04
 800a0fe:	b133      	cbz	r3, 800a10e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x26>
 800a100:	f890 39fa 	ldrb.w	r3, [r0, #2554]	; 0x9fa
 800a104:	f880 1a04 	strb.w	r1, [r0, #2564]	; 0xa04
 800a108:	3b01      	subs	r3, #1
 800a10a:	f880 39fa 	strb.w	r3, [r0, #2554]	; 0x9fa
 800a10e:	f894 3a2c 	ldrb.w	r3, [r4, #2604]	; 0xa2c
 800a112:	b90b      	cbnz	r3, 800a118 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x30>
 800a114:	2000      	movs	r0, #0
 800a116:	e00a      	b.n	800a12e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x46>
 800a118:	2308      	movs	r3, #8
 800a11a:	2000      	movs	r0, #0
 800a11c:	f884 3a2b 	strb.w	r3, [r4, #2603]	; 0xa2b
 800a120:	f894 39fb 	ldrb.w	r3, [r4, #2555]	; 0x9fb
 800a124:	f884 0a2c 	strb.w	r0, [r4, #2604]	; 0xa2c
 800a128:	3b01      	subs	r3, #1
 800a12a:	f884 39fb 	strb.w	r3, [r4, #2555]	; 0x9fb
 800a12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a130:	bb7a      	cbnz	r2, 800a192 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xaa>
 800a132:	f890 3a2c 	ldrb.w	r3, [r0, #2604]	; 0xa2c
 800a136:	b923      	cbnz	r3, 800a142 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 800a138:	f890 39fb 	ldrb.w	r3, [r0, #2555]	; 0x9fb
 800a13c:	3301      	adds	r3, #1
 800a13e:	f880 39fb 	strb.w	r3, [r0, #2555]	; 0x9fb
 800a142:	2301      	movs	r3, #1
 800a144:	2700      	movs	r7, #0
 800a146:	f884 3a2c 	strb.w	r3, [r4, #2604]	; 0xa2c
 800a14a:	f005 030f 	and.w	r3, r5, #15
 800a14e:	f884 3a2a 	strb.w	r3, [r4, #2602]	; 0xa2a
 800a152:	463a      	mov	r2, r7
 800a154:	4629      	mov	r1, r5
 800a156:	4620      	mov	r0, r4
 800a158:	f884 7a2b 	strb.w	r7, [r4, #2603]	; 0xa2b
 800a15c:	f7ff ffb4 	bl	800a0c8 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a160:	f894 3a04 	ldrb.w	r3, [r4, #2564]	; 0xa04
 800a164:	f8a4 0a28 	strh.w	r0, [r4, #2600]	; 0xa28
 800a168:	b133      	cbz	r3, 800a178 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x90>
 800a16a:	f894 39fa 	ldrb.w	r3, [r4, #2554]	; 0x9fa
 800a16e:	f884 7a04 	strb.w	r7, [r4, #2564]	; 0xa04
 800a172:	3b01      	subs	r3, #1
 800a174:	f884 39fa 	strb.w	r3, [r4, #2554]	; 0x9fa
 800a178:	69a0      	ldr	r0, [r4, #24]
 800a17a:	f894 39f1 	ldrb.w	r3, [r4, #2545]	; 0x9f1
 800a17e:	b3a8      	cbz	r0, 800a1ec <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x104>
 800a180:	2b02      	cmp	r3, #2
 800a182:	d12e      	bne.n	800a1e2 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xfa>
 800a184:	69e0      	ldr	r0, [r4, #28]
 800a186:	bbb0      	cbnz	r0, 800a1f6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x10e>
 800a188:	4629      	mov	r1, r5
 800a18a:	2000      	movs	r0, #0
 800a18c:	f007 f964 	bl	8011458 <artnet::display_universe_switch(unsigned int, unsigned char)>
 800a190:	e7c0      	b.n	800a114 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x2c>
 800a192:	2a01      	cmp	r2, #1
 800a194:	d1f0      	bne.n	800a178 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x90>
 800a196:	f890 3a04 	ldrb.w	r3, [r0, #2564]	; 0xa04
 800a19a:	b923      	cbnz	r3, 800a1a6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 800a19c:	f890 39fa 	ldrb.w	r3, [r0, #2554]	; 0x9fa
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	f880 39fa 	strb.w	r3, [r0, #2554]	; 0x9fa
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	f884 3a04 	strb.w	r3, [r4, #2564]	; 0xa04
 800a1ac:	f005 030f 	and.w	r3, r5, #15
 800a1b0:	f884 3a02 	strb.w	r3, [r4, #2562]	; 0xa02
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f7ff ff85 	bl	800a0c8 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a1be:	f894 3a2c 	ldrb.w	r3, [r4, #2604]	; 0xa2c
 800a1c2:	f8a4 0a00 	strh.w	r0, [r4, #2560]	; 0xa00
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d0d6      	beq.n	800a178 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x90>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f884 3a2c 	strb.w	r3, [r4, #2604]	; 0xa2c
 800a1d0:	2308      	movs	r3, #8
 800a1d2:	f884 3a2b 	strb.w	r3, [r4, #2603]	; 0xa2b
 800a1d6:	f894 39fb 	ldrb.w	r3, [r4, #2555]	; 0x9fb
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	f884 39fb 	strb.w	r3, [r4, #2555]	; 0x9fb
 800a1e0:	e7ca      	b.n	800a178 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x90>
 800a1e2:	6803      	ldr	r3, [r0, #0]
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	4798      	blx	r3
 800a1ec:	f894 39f1 	ldrb.w	r3, [r4, #2545]	; 0x9f1
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d18f      	bne.n	800a114 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x2c>
 800a1f4:	e7c6      	b.n	800a184 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x9c>
 800a1f6:	6803      	ldr	r3, [r0, #0]
 800a1f8:	462a      	mov	r2, r5
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	4798      	blx	r3
 800a200:	e7c2      	b.n	800a188 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xa0>
 800a202:	f06f 0004 	mvn.w	r0, #4
 800a206:	e792      	b.n	800a12e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x46>

0800a208 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 800a208:	b510      	push	{r4, lr}
 800a20a:	4604      	mov	r4, r0
 800a20c:	4608      	mov	r0, r1
 800a20e:	b971      	cbnz	r1, 800a22e <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x26>
 800a210:	b92b      	cbnz	r3, 800a21e <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 800a212:	f894 3a2a 	ldrb.w	r3, [r4, #2602]	; 0xa2a
 800a216:	7013      	strb	r3, [r2, #0]
 800a218:	f894 0a2c 	ldrb.w	r0, [r4, #2604]	; 0xa2c
 800a21c:	bd10      	pop	{r4, pc}
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d0fc      	beq.n	800a21c <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x14>
 800a222:	f894 3a02 	ldrb.w	r3, [r4, #2562]	; 0xa02
 800a226:	7013      	strb	r3, [r2, #0]
 800a228:	f894 0a04 	ldrb.w	r0, [r4, #2564]	; 0xa04
 800a22c:	e7f6      	b.n	800a21c <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x14>
 800a22e:	2000      	movs	r0, #0
 800a230:	e7f4      	b.n	800a21c <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x14>

0800a232 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800a232:	1883      	adds	r3, r0, r2
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	f883 1037 	strb.w	r1, [r3, #55]	; 0x37
 800a23a:	0093      	lsls	r3, r2, #2
 800a23c:	4604      	mov	r4, r0
 800a23e:	460e      	mov	r6, r1
 800a240:	4615      	mov	r5, r2
 800a242:	d105      	bne.n	800a250 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x1e>
 800a244:	f8b0 1a00 	ldrh.w	r1, [r0, #2560]	; 0xa00
 800a248:	f7ff ff3e 	bl	800a0c8 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a24c:	f8a4 0a00 	strh.w	r0, [r4, #2560]	; 0xa00
 800a250:	69e0      	ldr	r0, [r4, #28]
 800a252:	b150      	cbz	r0, 800a26a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x38>
 800a254:	f894 39f1 	ldrb.w	r3, [r4, #2545]	; 0x9f1
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d106      	bne.n	800a26a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x38>
 800a25c:	6803      	ldr	r3, [r0, #0]
 800a25e:	4632      	mov	r2, r6
 800a260:	4629      	mov	r1, r5
 800a262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	4718      	bx	r3
 800a26a:	bd70      	pop	{r4, r5, r6, pc}

0800a26c <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800a26c:	1883      	adds	r3, r0, r2
 800a26e:	b570      	push	{r4, r5, r6, lr}
 800a270:	f883 1036 	strb.w	r1, [r3, #54]	; 0x36
 800a274:	0093      	lsls	r3, r2, #2
 800a276:	4604      	mov	r4, r0
 800a278:	460e      	mov	r6, r1
 800a27a:	4615      	mov	r5, r2
 800a27c:	d105      	bne.n	800a28a <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x1e>
 800a27e:	f8b0 1a00 	ldrh.w	r1, [r0, #2560]	; 0xa00
 800a282:	f7ff ff21 	bl	800a0c8 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a286:	f8a4 0a00 	strh.w	r0, [r4, #2560]	; 0xa00
 800a28a:	69e0      	ldr	r0, [r4, #28]
 800a28c:	b150      	cbz	r0, 800a2a4 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x38>
 800a28e:	f894 39f1 	ldrb.w	r3, [r4, #2545]	; 0x9f1
 800a292:	2b02      	cmp	r3, #2
 800a294:	d106      	bne.n	800a2a4 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x38>
 800a296:	6803      	ldr	r3, [r0, #0]
 800a298:	4632      	mov	r2, r6
 800a29a:	4629      	mov	r1, r5
 800a29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	4718      	bx	r3
 800a2a4:	bd70      	pop	{r4, r5, r6, pc}

0800a2a6 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800a2a6:	b510      	push	{r4, lr}
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	b9d9      	cbnz	r1, 800a2e4 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x3e>
 800a2ac:	f890 3a03 	ldrb.w	r3, [r0, #2563]	; 0xa03
 800a2b0:	2a01      	cmp	r2, #1
 800a2b2:	bf0c      	ite	eq
 800a2b4:	f043 0301 	orreq.w	r3, r3, #1
 800a2b8:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800a2bc:	f880 3a03 	strb.w	r3, [r0, #2563]	; 0xa03
 800a2c0:	f890 39f1 	ldrb.w	r3, [r0, #2545]	; 0x9f1
 800a2c4:	f8c0 2a20 	str.w	r2, [r0, #2592]	; 0xa20
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d10b      	bne.n	800a2e4 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x3e>
 800a2cc:	69c0      	ldr	r0, [r0, #28]
 800a2ce:	b118      	cbz	r0, 800a2d8 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x32>
 800a2d0:	6803      	ldr	r3, [r0, #0]
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d6:	4798      	blx	r3
 800a2d8:	4621      	mov	r1, r4
 800a2da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2de:	2000      	movs	r0, #0
 800a2e0:	f007 b8ce 	b.w	8011480 <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)>
 800a2e4:	bd10      	pop	{r4, pc}

0800a2e6 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800a2e6:	b510      	push	{r4, lr}
 800a2e8:	4614      	mov	r4, r2
 800a2ea:	b9d9      	cbnz	r1, 800a324 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x3e>
 800a2ec:	f890 3a03 	ldrb.w	r3, [r0, #2563]	; 0xa03
 800a2f0:	2a01      	cmp	r2, #1
 800a2f2:	bf0c      	ite	eq
 800a2f4:	f043 0302 	orreq.w	r3, r3, #2
 800a2f8:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800a2fc:	f880 3a03 	strb.w	r3, [r0, #2563]	; 0xa03
 800a300:	f890 39f1 	ldrb.w	r3, [r0, #2545]	; 0x9f1
 800a304:	f8c0 2a18 	str.w	r2, [r0, #2584]	; 0xa18
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d10b      	bne.n	800a324 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x3e>
 800a30c:	69c0      	ldr	r0, [r0, #28]
 800a30e:	b118      	cbz	r0, 800a318 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x32>
 800a310:	6803      	ldr	r3, [r0, #0]
 800a312:	2100      	movs	r1, #0
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	4798      	blx	r3
 800a318:	4621      	mov	r1, r4
 800a31a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a31e:	2000      	movs	r0, #0
 800a320:	f007 b8a4 	b.w	801146c <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>
 800a324:	bd10      	pop	{r4, pc}

0800a326 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
 800a326:	b510      	push	{r4, lr}
 800a328:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
 800a32c:	f1a1 0208 	sub.w	r2, r1, #8
 800a330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a334:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
 800a338:	2a04      	cmp	r2, #4
 800a33a:	d81c      	bhi.n	800a376 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x50>
 800a33c:	e8df f002 	tbb	[pc, r2]
 800a340:	1b180307 	blne	860af64 <__exidx_end+0x5f33ec>
 800a344:	f043001b 			; <UNDEFINED> instruction: 0xf043001b
 800a348:	0340      	lsls	r0, r0, #13
 800a34a:	f880 308d 	strb.w	r3, [r0, #141]	; 0x8d
 800a34e:	f890 39f1 	ldrb.w	r3, [r0, #2545]	; 0x9f1
 800a352:	2b02      	cmp	r3, #2
 800a354:	d10f      	bne.n	800a376 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x50>
 800a356:	69c0      	ldr	r0, [r0, #28]
 800a358:	f001 0403 	and.w	r4, r1, #3
 800a35c:	b118      	cbz	r0, 800a366 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x40>
 800a35e:	6803      	ldr	r3, [r0, #0]
 800a360:	4621      	mov	r1, r4
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	4798      	blx	r3
 800a366:	4620      	mov	r0, r4
 800a368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a36c:	f007 b88b 	b.w	8011486 <artnet::display_failsafe(unsigned char)>
 800a370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a374:	e7e9      	b.n	800a34a <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x24>
 800a376:	bd10      	pop	{r4, pc}

0800a378 <ArtNetNode::HandleAddress()>:
 800a378:	2301      	movs	r3, #1
 800a37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a37e:	f880 39f0 	strb.w	r3, [r0, #2544]	; 0x9f0
 800a382:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 800a386:	4604      	mov	r4, r0
 800a388:	b133      	cbz	r3, 800a398 <ArtNetNode::HandleAddress()+0x20>
 800a38a:	f100 01a6 	add.w	r1, r0, #166	; 0xa6
 800a38e:	f7ff fc57 	bl	8009c40 <ArtNetNode::SetShortName(char const*)>
 800a392:	2306      	movs	r3, #6
 800a394:	f884 39f0 	strb.w	r3, [r4, #2544]	; 0x9f0
 800a398:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800a39c:	b13b      	cbz	r3, 800a3ae <ArtNetNode::HandleAddress()+0x36>
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
 800a3a4:	f7ff fc6d 	bl	8009c82 <ArtNetNode::SetLongName(char const*)>
 800a3a8:	2307      	movs	r3, #7
 800a3aa:	f884 39f0 	strb.w	r3, [r4, #2544]	; 0x9f0
 800a3ae:	f894 50a5 	ldrb.w	r5, [r4, #165]	; 0xa5
 800a3b2:	b105      	cbz	r5, 800a3b6 <ArtNetNode::HandleAddress()+0x3e>
 800a3b4:	3d01      	subs	r5, #1
 800a3b6:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
 800a3ba:	2900      	cmp	r1, #0
 800a3bc:	d146      	bne.n	800a44c <ArtNetNode::HandleAddress()+0xd4>
 800a3be:	462a      	mov	r2, r5
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f7ff ff36 	bl	800a232 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800a3c6:	f894 10a4 	ldrb.w	r1, [r4, #164]	; 0xa4
 800a3ca:	2900      	cmp	r1, #0
 800a3cc:	d144      	bne.n	800a458 <ArtNetNode::HandleAddress()+0xe0>
 800a3ce:	462a      	mov	r2, r5
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f7ff ff4b 	bl	800a26c <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800a3d6:	00ad      	lsls	r5, r5, #2
 800a3d8:	462e      	mov	r6, r5
 800a3da:	f104 07f7 	add.w	r7, r4, #247	; 0xf7
 800a3de:	f104 08fb 	add.w	r8, r4, #251	; 0xfb
 800a3e2:	797b      	ldrb	r3, [r7, #5]
 800a3e4:	2b7f      	cmp	r3, #127	; 0x7f
 800a3e6:	d007      	beq.n	800a3f8 <ArtNetNode::HandleAddress()+0x80>
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d13b      	bne.n	800a464 <ArtNetNode::HandleAddress()+0xec>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4631      	mov	r1, r6
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f7ff fe78 	bl	800a0e8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800a3f8:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800a3fc:	2a7f      	cmp	r2, #127	; 0x7f
 800a3fe:	d005      	beq.n	800a40c <ArtNetNode::HandleAddress()+0x94>
 800a400:	bbaa      	cbnz	r2, 800a46e <ArtNetNode::HandleAddress()+0xf6>
 800a402:	2301      	movs	r3, #1
 800a404:	4631      	mov	r1, r6
 800a406:	4620      	mov	r0, r4
 800a408:	f7ff fe6e 	bl	800a0e8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800a40c:	45b8      	cmp	r8, r7
 800a40e:	f106 0601 	add.w	r6, r6, #1
 800a412:	d1e6      	bne.n	800a3e2 <ArtNetNode::HandleAddress()+0x6a>
 800a414:	f894 3102 	ldrb.w	r3, [r4, #258]	; 0x102
 800a418:	f003 0103 	and.w	r1, r3, #3
 800a41c:	2b53      	cmp	r3, #83	; 0x53
 800a41e:	4429      	add	r1, r5
 800a420:	d82b      	bhi.n	800a47a <ArtNetNode::HandleAddress()+0x102>
 800a422:	2b4f      	cmp	r3, #79	; 0x4f
 800a424:	f200 808d 	bhi.w	800a542 <ArtNetNode::HandleAddress()+0x1ca>
 800a428:	1e5a      	subs	r2, r3, #1
 800a42a:	b2d0      	uxtb	r0, r2
 800a42c:	2812      	cmp	r0, #18
 800a42e:	d834      	bhi.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a430:	2a12      	cmp	r2, #18
 800a432:	d832      	bhi.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a434:	e8df f002 	tbb	[pc, r2]
 800a438:	6f63574d 	svcvs	0x0063574d
 800a43c:	7b313131 	blvc	8c56908 <__exidx_end+0xc3ed90>
 800a440:	7b7b7b7b 	blvc	9ee9234 <__exidx_end+0x1ed16bc>
 800a444:	80313131 	eorshi	r3, r1, r1, lsr r1
 800a448:	00808080 	addeq	r8, r0, r0, lsl #1
 800a44c:	060f      	lsls	r7, r1, #24
 800a44e:	d5ba      	bpl.n	800a3c6 <ArtNetNode::HandleAddress()+0x4e>
 800a450:	462a      	mov	r2, r5
 800a452:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a456:	e7b3      	b.n	800a3c0 <ArtNetNode::HandleAddress()+0x48>
 800a458:	060e      	lsls	r6, r1, #24
 800a45a:	d5bc      	bpl.n	800a3d6 <ArtNetNode::HandleAddress()+0x5e>
 800a45c:	462a      	mov	r2, r5
 800a45e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a462:	e7b5      	b.n	800a3d0 <ArtNetNode::HandleAddress()+0x58>
 800a464:	0618      	lsls	r0, r3, #24
 800a466:	d5c7      	bpl.n	800a3f8 <ArtNetNode::HandleAddress()+0x80>
 800a468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a46c:	e7bf      	b.n	800a3ee <ArtNetNode::HandleAddress()+0x76>
 800a46e:	0611      	lsls	r1, r2, #24
 800a470:	d5cc      	bpl.n	800a40c <ArtNetNode::HandleAddress()+0x94>
 800a472:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800a476:	2200      	movs	r2, #0
 800a478:	e7c4      	b.n	800a404 <ArtNetNode::HandleAddress()+0x8c>
 800a47a:	2b93      	cmp	r3, #147	; 0x93
 800a47c:	d81a      	bhi.n	800a4b4 <ArtNetNode::HandleAddress()+0x13c>
 800a47e:	2b8f      	cmp	r3, #143	; 0x8f
 800a480:	d863      	bhi.n	800a54a <ArtNetNode::HandleAddress()+0x1d2>
 800a482:	2b63      	cmp	r3, #99	; 0x63
 800a484:	d806      	bhi.n	800a494 <ArtNetNode::HandleAddress()+0x11c>
 800a486:	2b5f      	cmp	r3, #95	; 0x5f
 800a488:	d907      	bls.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a48a:	2200      	movs	r2, #0
 800a48c:	4620      	mov	r0, r4
 800a48e:	f7ff ff0a 	bl	800a2a6 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800a492:	e002      	b.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a494:	3b70      	subs	r3, #112	; 0x70
 800a496:	2b03      	cmp	r3, #3
 800a498:	d955      	bls.n	800a546 <ArtNetNode::HandleAddress()+0x1ce>
 800a49a:	69a0      	ldr	r0, [r4, #24]
 800a49c:	b120      	cbz	r0, 800a4a8 <ArtNetNode::HandleAddress()+0x130>
 800a49e:	6803      	ldr	r3, [r0, #0]
 800a4a0:	f894 1102 	ldrb.w	r1, [r4, #258]	; 0x102
 800a4a4:	68db      	ldr	r3, [r3, #12]
 800a4a6:	4798      	blx	r3
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ae:	2101      	movs	r1, #1
 800a4b0:	f000 bc56 	b.w	800ad60 <ArtNetNode::SendPollRelply(bool)>
 800a4b4:	2bc3      	cmp	r3, #195	; 0xc3
 800a4b6:	d806      	bhi.n	800a4c6 <ArtNetNode::HandleAddress()+0x14e>
 800a4b8:	2bbf      	cmp	r3, #191	; 0xbf
 800a4ba:	d9ee      	bls.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a4bc:	2201      	movs	r2, #1
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f000 fce0 	bl	800ae84 <ArtNetNode::SetRmd(unsigned int, bool)>
 800a4c4:	e7e9      	b.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a4c6:	3330      	adds	r3, #48	; 0x30
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d8e5      	bhi.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	e7f5      	b.n	800a4be <ArtNetNode::HandleAddress()+0x146>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f884 39f6 	strb.w	r3, [r4, #2550]	; 0x9f6
 800a4d8:	f894 3a03 	ldrb.w	r3, [r4, #2563]	; 0xa03
 800a4dc:	f023 0308 	bic.w	r3, r3, #8
 800a4e0:	f884 3a03 	strb.w	r3, [r4, #2563]	; 0xa03
 800a4e4:	e7d9      	b.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a4e6:	4b37      	ldr	r3, [pc, #220]	; (800a5c4 <ArtNetNode::HandleAddress()+0x24c>)
 800a4e8:	2102      	movs	r1, #2
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	f008 fce2 	bl	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 800a4f0:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800a4f4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800a4f8:	f884 308b 	strb.w	r3, [r4, #139]	; 0x8b
 800a4fc:	e7cd      	b.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a4fe:	4b31      	ldr	r3, [pc, #196]	; (800a5c4 <ArtNetNode::HandleAddress()+0x24c>)
 800a500:	2100      	movs	r1, #0
 800a502:	6818      	ldr	r0, [r3, #0]
 800a504:	f008 fcd6 	bl	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 800a508:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800a50c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a510:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a514:	e7f0      	b.n	800a4f8 <ArtNetNode::HandleAddress()+0x180>
 800a516:	4b2b      	ldr	r3, [pc, #172]	; (800a5c4 <ArtNetNode::HandleAddress()+0x24c>)
 800a518:	2104      	movs	r1, #4
 800a51a:	6818      	ldr	r0, [r3, #0]
 800a51c:	f008 fcca 	bl	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 800a520:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800a524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a52c:	e7e4      	b.n	800a4f8 <ArtNetNode::HandleAddress()+0x180>
 800a52e:	4619      	mov	r1, r3
 800a530:	4620      	mov	r0, r4
 800a532:	f7ff fef8 	bl	800a326 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800a536:	e7b0      	b.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a538:	2201      	movs	r2, #1
 800a53a:	4620      	mov	r0, r4
 800a53c:	f7ff fed3 	bl	800a2e6 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800a540:	e7ab      	b.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a542:	2200      	movs	r2, #0
 800a544:	e7f9      	b.n	800a53a <ArtNetNode::HandleAddress()+0x1c2>
 800a546:	2201      	movs	r2, #1
 800a548:	e7a0      	b.n	800a48c <ArtNetNode::HandleAddress()+0x114>
 800a54a:	4b1f      	ldr	r3, [pc, #124]	; (800a5c8 <ArtNetNode::HandleAddress()+0x250>)
 800a54c:	b2cd      	uxtb	r5, r1
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	2700      	movs	r7, #0
 800a552:	07d2      	lsls	r2, r2, #31
 800a554:	bf5c      	itt	pl
 800a556:	2201      	movpl	r2, #1
 800a558:	601a      	strpl	r2, [r3, #0]
 800a55a:	f240 6204 	movw	r2, #1540	; 0x604
 800a55e:	436a      	muls	r2, r5
 800a560:	4b1a      	ldr	r3, [pc, #104]	; (800a5cc <ArtNetNode::HandleAddress()+0x254>)
 800a562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a566:	441a      	add	r2, r3
 800a568:	4611      	mov	r1, r2
 800a56a:	6860      	ldr	r0, [r4, #4]
 800a56c:	f502 7600 	add.w	r6, r2, #512	; 0x200
 800a570:	42b1      	cmp	r1, r6
 800a572:	d123      	bne.n	800a5bc <ArtNetNode::HandleAddress()+0x244>
 800a574:	f240 6104 	movw	r1, #1540	; 0x604
 800a578:	fb01 3105 	mla	r1, r1, r5, r3
 800a57c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a580:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800a584:	6801      	ldr	r1, [r0, #0]
 800a586:	690e      	ldr	r6, [r1, #16]
 800a588:	4629      	mov	r1, r5
 800a58a:	47b0      	blx	r6
 800a58c:	2d00      	cmp	r5, #0
 800a58e:	d184      	bne.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a590:	f8d4 3a20 	ldr.w	r3, [r4, #2592]	; 0xa20
 800a594:	2b00      	cmp	r3, #0
 800a596:	d180      	bne.n	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a598:	f894 3a25 	ldrb.w	r3, [r4, #2597]	; 0xa25
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f47f af7c 	bne.w	800a49a <ArtNetNode::HandleAddress()+0x122>
 800a5a2:	6860      	ldr	r0, [r4, #4]
 800a5a4:	4629      	mov	r1, r5
 800a5a6:	6803      	ldr	r3, [r0, #0]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	4798      	blx	r3
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	f884 3a25 	strb.w	r3, [r4, #2597]	; 0xa25
 800a5b2:	f894 3a03 	ldrb.w	r3, [r4, #2563]	; 0xa03
 800a5b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a5ba:	e791      	b.n	800a4e0 <ArtNetNode::HandleAddress()+0x168>
 800a5bc:	f801 7b01 	strb.w	r7, [r1], #1
 800a5c0:	e7d6      	b.n	800a570 <ArtNetNode::HandleAddress()+0x1f8>
 800a5c2:	bf00      	nop
 800a5c4:	2000a1c4 	andcs	sl, r0, r4, asr #3
 800a5c8:	20000660 	andcs	r0, r0, r0, ror #12
 800a5cc:	20000664 	andcs	r0, r0, r4, ror #12

0800a5d0 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800a5d0:	f240 6304 	movw	r3, #1540	; 0x604
 800a5d4:	fb03 0001 	mla	r0, r3, r1, r0
 800a5d8:	2300      	movs	r3, #0
 800a5da:	b510      	push	{r4, lr}
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d100      	bne.n	800a5e2 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800a5e0:	bd10      	pop	{r4, pc}
 800a5e2:	f810 4b01 	ldrb.w	r4, [r0], #1
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 800a5ec:	42a1      	cmp	r1, r4
 800a5ee:	bf38      	it	cc
 800a5f0:	4621      	movcc	r1, r4
 800a5f2:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 800a5f6:	e7f1      	b.n	800a5dc <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

0800a5f8 <memcpy.isra.0>:
 800a5f8:	3801      	subs	r0, #1
 800a5fa:	440a      	add	r2, r1
 800a5fc:	4291      	cmp	r1, r2
 800a5fe:	d100      	bne.n	800a602 <memcpy.isra.0+0xa>
 800a600:	4770      	bx	lr
 800a602:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a606:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a60a:	e7f7      	b.n	800a5fc <memcpy.isra.0+0x4>

0800a60c <lightset::Data::Get()>:
 800a60c:	4b03      	ldr	r3, [pc, #12]	; (800a61c <lightset::Data::Get()+0x10>)
 800a60e:	4804      	ldr	r0, [pc, #16]	; (800a620 <lightset::Data::Get()+0x14>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	07d2      	lsls	r2, r2, #31
 800a614:	bf5c      	itt	pl
 800a616:	2201      	movpl	r2, #1
 800a618:	601a      	strpl	r2, [r3, #0]
 800a61a:	4770      	bx	lr
 800a61c:	20000660 	andcs	r0, r0, r0, ror #12
 800a620:	20000664 	andcs	r0, r0, r4, ror #12

0800a624 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800a624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a628:	4615      	mov	r5, r2
 800a62a:	460f      	mov	r7, r1
 800a62c:	4604      	mov	r4, r0
 800a62e:	f7ff ffed 	bl	800a60c <lightset::Data::Get()>
 800a632:	f240 6304 	movw	r3, #1540	; 0x604
 800a636:	4606      	mov	r6, r0
 800a638:	435c      	muls	r4, r3
 800a63a:	eb00 0804 	add.w	r8, r0, r4
 800a63e:	462a      	mov	r2, r5
 800a640:	4639      	mov	r1, r7
 800a642:	4640      	mov	r0, r8
 800a644:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a648:	f7ff ffd6 	bl	800a5f8 <memcpy.isra.0>
 800a64c:	462a      	mov	r2, r5
 800a64e:	4639      	mov	r1, r7
 800a650:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 800a654:	1930      	adds	r0, r6, r4
 800a656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a65a:	f7ff bfcd 	b.w	800a5f8 <memcpy.isra.0>

0800a65e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800a65e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a662:	4680      	mov	r8, r0
 800a664:	f240 6404 	movw	r4, #1540	; 0x604
 800a668:	4615      	mov	r5, r2
 800a66a:	460f      	mov	r7, r1
 800a66c:	4699      	mov	r9, r3
 800a66e:	f7ff ffcd 	bl	800a60c <lightset::Data::Get()>
 800a672:	fb04 f408 	mul.w	r4, r4, r8
 800a676:	eb00 0a04 	add.w	sl, r0, r4
 800a67a:	4606      	mov	r6, r0
 800a67c:	462a      	mov	r2, r5
 800a67e:	4639      	mov	r1, r7
 800a680:	4650      	mov	r0, sl
 800a682:	f7ff ffb9 	bl	800a5f8 <memcpy.isra.0>
 800a686:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 800a68a:	f1b9 0f00 	cmp.w	r9, #0
 800a68e:	d106      	bne.n	800a69e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 800a690:	462a      	mov	r2, r5
 800a692:	4641      	mov	r1, r8
 800a694:	4630      	mov	r0, r6
 800a696:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a69a:	f7ff bf99 	b.w	800a5d0 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800a69e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a6a2:	462a      	mov	r2, r5
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	1930      	adds	r0, r6, r4
 800a6a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ac:	f7ff bfa4 	b.w	800a5f8 <memcpy.isra.0>

0800a6b0 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800a6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b4:	4616      	mov	r6, r2
 800a6b6:	4699      	mov	r9, r3
 800a6b8:	4680      	mov	r8, r0
 800a6ba:	460f      	mov	r7, r1
 800a6bc:	f7ff ffa6 	bl	800a60c <lightset::Data::Get()>
 800a6c0:	f240 6404 	movw	r4, #1540	; 0x604
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	fb04 f408 	mul.w	r4, r4, r8
 800a6ca:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800a6ce:	4632      	mov	r2, r6
 800a6d0:	4639      	mov	r1, r7
 800a6d2:	4428      	add	r0, r5
 800a6d4:	f7ff ff90 	bl	800a5f8 <memcpy.isra.0>
 800a6d8:	192b      	adds	r3, r5, r4
 800a6da:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 800a6de:	f1b9 0f00 	cmp.w	r9, #0
 800a6e2:	d106      	bne.n	800a6f2 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800a6e4:	4632      	mov	r2, r6
 800a6e6:	4641      	mov	r1, r8
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6ee:	f7ff bf6f 	b.w	800a5d0 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800a6f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a6f6:	4632      	mov	r2, r6
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	1928      	adds	r0, r5, r4
 800a6fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a700:	f7ff bf7a 	b.w	800a5f8 <memcpy.isra.0>

0800a704 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800a704:	f890 39f6 	ldrb.w	r3, [r0, #2550]	; 0x9f6
 800a708:	b91b      	cbnz	r3, 800a712 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800a70a:	f240 1301 	movw	r3, #257	; 0x101
 800a70e:	f8a0 39f6 	strh.w	r3, [r0, #2550]	; 0x9f6
 800a712:	2328      	movs	r3, #40	; 0x28
 800a714:	fb03 0001 	mla	r0, r3, r1, r0
 800a718:	f890 3a03 	ldrb.w	r3, [r0, #2563]	; 0xa03
 800a71c:	f043 0308 	orr.w	r3, r3, #8
 800a720:	f880 3a03 	strb.w	r3, [r0, #2563]	; 0xa03
 800a724:	4770      	bx	lr

0800a726 <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800a726:	2328      	movs	r3, #40	; 0x28
 800a728:	b530      	push	{r4, r5, lr}
 800a72a:	f242 7510 	movw	r5, #10000	; 0x2710
 800a72e:	fb03 0301 	mla	r3, r3, r1, r0
 800a732:	f8d0 2984 	ldr.w	r2, [r0, #2436]	; 0x984
 800a736:	f8d3 4a08 	ldr.w	r4, [r3, #2568]	; 0xa08
 800a73a:	1b14      	subs	r4, r2, r4
 800a73c:	42ac      	cmp	r4, r5
 800a73e:	d908      	bls.n	800a752 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800a740:	2400      	movs	r4, #0
 800a742:	f8c3 4a0c 	str.w	r4, [r3, #2572]	; 0xa0c
 800a746:	f893 4a03 	ldrb.w	r4, [r3, #2563]	; 0xa03
 800a74a:	f024 0408 	bic.w	r4, r4, #8
 800a74e:	f883 4a03 	strb.w	r4, [r3, #2563]	; 0xa03
 800a752:	2328      	movs	r3, #40	; 0x28
 800a754:	fb03 0101 	mla	r1, r3, r1, r0
 800a758:	f8d1 3a10 	ldr.w	r3, [r1, #2576]	; 0xa10
 800a75c:	1ad2      	subs	r2, r2, r3
 800a75e:	f242 7310 	movw	r3, #10000	; 0x2710
 800a762:	429a      	cmp	r2, r3
 800a764:	d908      	bls.n	800a778 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800a766:	2300      	movs	r3, #0
 800a768:	f8c1 3a14 	str.w	r3, [r1, #2580]	; 0xa14
 800a76c:	f891 3a03 	ldrb.w	r3, [r1, #2563]	; 0xa03
 800a770:	f023 0308 	bic.w	r3, r3, #8
 800a774:	f881 3a03 	strb.w	r3, [r1, #2563]	; 0xa03
 800a778:	f890 3a03 	ldrb.w	r3, [r0, #2563]	; 0xa03
 800a77c:	071b      	lsls	r3, r3, #28
 800a77e:	bf5c      	itt	pl
 800a780:	f44f 7380 	movpl.w	r3, #256	; 0x100
 800a784:	f8a0 39f6 	strhpl.w	r3, [r0, #2550]	; 0x9f6
 800a788:	bd30      	pop	{r4, r5, pc}

0800a78a <ArtNetNode::HandleDmx()>:
 800a78a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78c:	f8b0 50a8 	ldrh.w	r5, [r0, #168]	; 0xa8
 800a790:	f890 3a04 	ldrb.w	r3, [r0, #2564]	; 0xa04
 800a794:	ba6d      	rev16	r5, r5
 800a796:	b2ad      	uxth	r5, r5
 800a798:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a79c:	4604      	mov	r4, r0
 800a79e:	bf28      	it	cs
 800a7a0:	f44f 7500 	movcs.w	r5, #512	; 0x200
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d077      	beq.n	800a898 <ArtNetNode::HandleDmx()+0x10e>
 800a7a8:	f8d0 3a20 	ldr.w	r3, [r0, #2592]	; 0xa20
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d173      	bne.n	800a898 <ArtNetNode::HandleDmx()+0x10e>
 800a7b0:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
 800a7b4:	f8b0 3a00 	ldrh.w	r3, [r0, #2560]	; 0xa00
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d16d      	bne.n	800a898 <ArtNetNode::HandleDmx()+0x10e>
 800a7bc:	f890 3a03 	ldrb.w	r3, [r0, #2563]	; 0xa03
 800a7c0:	f8d0 7a0c 	ldr.w	r7, [r0, #2572]	; 0xa0c
 800a7c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7c8:	f880 3a03 	strb.w	r3, [r0, #2563]	; 0xa03
 800a7cc:	f890 39f6 	ldrb.w	r3, [r0, #2550]	; 0x9f6
 800a7d0:	f8d0 6a14 	ldr.w	r6, [r0, #2580]	; 0xa14
 800a7d4:	b123      	cbz	r3, 800a7e0 <ArtNetNode::HandleDmx()+0x56>
 800a7d6:	f890 19f8 	ldrb.w	r1, [r0, #2552]	; 0x9f8
 800a7da:	b909      	cbnz	r1, 800a7e0 <ArtNetNode::HandleDmx()+0x56>
 800a7dc:	f7ff ffa3 	bl	800a726 <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800a7e0:	ea57 0006 	orrs.w	r0, r7, r6
 800a7e4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
 800a7e8:	d12c      	bne.n	800a844 <ArtNetNode::HandleDmx()+0xba>
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	f8c4 3a0c 	str.w	r3, [r4, #2572]	; 0xa0c
 800a7f0:	f8d4 3984 	ldr.w	r3, [r4, #2436]	; 0x984
 800a7f4:	f104 01aa 	add.w	r1, r4, #170	; 0xaa
 800a7f8:	f8c4 3a08 	str.w	r3, [r4, #2568]	; 0xa08
 800a7fc:	f7ff ff12 	bl	800a624 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800a800:	f894 69f5 	ldrb.w	r6, [r4, #2549]	; 0x9f5
 800a804:	b9be      	cbnz	r6, 800a836 <ArtNetNode::HandleDmx()+0xac>
 800a806:	6865      	ldr	r5, [r4, #4]
 800a808:	f7ff ff00 	bl	800a60c <lightset::Data::Get()>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	4631      	mov	r1, r6
 800a810:	691f      	ldr	r7, [r3, #16]
 800a812:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800a816:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
 800a81a:	4628      	mov	r0, r5
 800a81c:	47b8      	blx	r7
 800a81e:	f894 1a25 	ldrb.w	r1, [r4, #2597]	; 0xa25
 800a822:	b941      	cbnz	r1, 800a836 <ArtNetNode::HandleDmx()+0xac>
 800a824:	6860      	ldr	r0, [r4, #4]
 800a826:	6803      	ldr	r3, [r0, #0]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	4798      	blx	r3
 800a82c:	2301      	movs	r3, #1
 800a82e:	f884 39f7 	strb.w	r3, [r4, #2551]	; 0x9f7
 800a832:	f884 3a25 	strb.w	r3, [r4, #2597]	; 0xa25
 800a836:	f894 39f9 	ldrb.w	r3, [r4, #2553]	; 0x9f9
 800a83a:	f043 0302 	orr.w	r3, r3, #2
 800a83e:	f884 39f9 	strb.w	r3, [r4, #2553]	; 0x9f9
 800a842:	e029      	b.n	800a898 <ArtNetNode::HandleDmx()+0x10e>
 800a844:	42bb      	cmp	r3, r7
 800a846:	d10a      	bne.n	800a85e <ArtNetNode::HandleDmx()+0xd4>
 800a848:	2e00      	cmp	r6, #0
 800a84a:	d14f      	bne.n	800a8ec <ArtNetNode::HandleDmx()+0x162>
 800a84c:	f8d4 3984 	ldr.w	r3, [r4, #2436]	; 0x984
 800a850:	462a      	mov	r2, r5
 800a852:	4630      	mov	r0, r6
 800a854:	f8c4 3a08 	str.w	r3, [r4, #2568]	; 0xa08
 800a858:	f104 01aa 	add.w	r1, r4, #170	; 0xaa
 800a85c:	e7ce      	b.n	800a7fc <ArtNetNode::HandleDmx()+0x72>
 800a85e:	bb6f      	cbnz	r7, 800a8bc <ArtNetNode::HandleDmx()+0x132>
 800a860:	42b3      	cmp	r3, r6
 800a862:	f8d4 2984 	ldr.w	r2, [r4, #2436]	; 0x984
 800a866:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
 800a86a:	d116      	bne.n	800a89a <ArtNetNode::HandleDmx()+0x110>
 800a86c:	f8c4 2a10 	str.w	r2, [r4, #2576]	; 0xa10
 800a870:	f7ff fecc 	bl	800a60c <lightset::Data::Get()>
 800a874:	4606      	mov	r6, r0
 800a876:	462a      	mov	r2, r5
 800a878:	4639      	mov	r1, r7
 800a87a:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800a87e:	f7ff febb 	bl	800a5f8 <memcpy.isra.0>
 800a882:	462a      	mov	r2, r5
 800a884:	4639      	mov	r1, r7
 800a886:	f8c6 5600 	str.w	r5, [r6, #1536]	; 0x600
 800a88a:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800a88e:	f7ff feb3 	bl	800a5f8 <memcpy.isra.0>
 800a892:	e7b5      	b.n	800a800 <ArtNetNode::HandleDmx()+0x76>
 800a894:	42b3      	cmp	r3, r6
 800a896:	d015      	beq.n	800a8c4 <ArtNetNode::HandleDmx()+0x13a>
 800a898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a89a:	bb23      	cbnz	r3, 800a8e6 <ArtNetNode::HandleDmx()+0x15c>
 800a89c:	2100      	movs	r1, #0
 800a89e:	f8c4 3a0c 	str.w	r3, [r4, #2572]	; 0xa0c
 800a8a2:	f8c4 2a08 	str.w	r2, [r4, #2568]	; 0xa08
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7ff ff2c 	bl	800a704 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a8ac:	462a      	mov	r2, r5
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	f7ff fed2 	bl	800a65e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800a8ba:	e7a1      	b.n	800a800 <ArtNetNode::HandleDmx()+0x76>
 800a8bc:	2e00      	cmp	r6, #0
 800a8be:	d1e9      	bne.n	800a894 <ArtNetNode::HandleDmx()+0x10a>
 800a8c0:	f8c4 3a14 	str.w	r3, [r4, #2580]	; 0xa14
 800a8c4:	f8d4 3984 	ldr.w	r3, [r4, #2436]	; 0x984
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f8c4 3a10 	str.w	r3, [r4, #2576]	; 0xa10
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	f7ff ff18 	bl	800a704 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a8d4:	462a      	mov	r2, r5
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 800a8dc:	f104 01aa 	add.w	r1, r4, #170	; 0xaa
 800a8e0:	f7ff fee6 	bl	800a6b0 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800a8e4:	e78c      	b.n	800a800 <ArtNetNode::HandleDmx()+0x76>
 800a8e6:	2e00      	cmp	r6, #0
 800a8e8:	d0ea      	beq.n	800a8c0 <ArtNetNode::HandleDmx()+0x136>
 800a8ea:	e7d7      	b.n	800a89c <ArtNetNode::HandleDmx()+0x112>
 800a8ec:	2f00      	cmp	r7, #0
 800a8ee:	d0b7      	beq.n	800a860 <ArtNetNode::HandleDmx()+0xd6>
 800a8f0:	42b7      	cmp	r7, r6
 800a8f2:	d0d1      	beq.n	800a898 <ArtNetNode::HandleDmx()+0x10e>
 800a8f4:	f8d4 3984 	ldr.w	r3, [r4, #2436]	; 0x984
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	f8c4 3a08 	str.w	r3, [r4, #2568]	; 0xa08
 800a8fe:	4620      	mov	r0, r4
 800a900:	f7ff ff00 	bl	800a704 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a904:	462a      	mov	r2, r5
 800a906:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 800a90a:	f104 01aa 	add.w	r1, r4, #170	; 0xaa
 800a90e:	e7d1      	b.n	800a8b4 <ArtNetNode::HandleDmx()+0x12a>

0800a910 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800a910:	b961      	cbnz	r1, 800a92c <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x1c>
 800a912:	4b07      	ldr	r3, [pc, #28]	; (800a930 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x20>)
 800a914:	6819      	ldr	r1, [r3, #0]
 800a916:	694b      	ldr	r3, [r1, #20]
 800a918:	69c9      	ldr	r1, [r1, #28]
 800a91a:	4053      	eors	r3, r2
 800a91c:	420b      	tst	r3, r1
 800a91e:	d102      	bne.n	800a926 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x16>
 800a920:	f8c0 2a30 	str.w	r2, [r0, #2608]	; 0xa30
 800a924:	4770      	bx	lr
 800a926:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a928:	f8c0 3a30 	str.w	r3, [r0, #2608]	; 0xa30
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	20008aa8 	andcs	r8, r0, r8, lsr #21

0800a934 <ArtNetNode::HandleDmxIn()>:
 800a934:	b530      	push	{r4, r5, lr}
 800a936:	f890 3a2c 	ldrb.w	r3, [r0, #2604]	; 0xa2c
 800a93a:	4604      	mov	r4, r0
 800a93c:	b085      	sub	sp, #20
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d047      	beq.n	800a9d2 <ArtNetNode::HandleDmxIn()+0x9e>
 800a942:	6900      	ldr	r0, [r0, #16]
 800a944:	2100      	movs	r1, #0
 800a946:	6803      	ldr	r3, [r0, #0]
 800a948:	aa02      	add	r2, sp, #8
 800a94a:	691d      	ldr	r5, [r3, #16]
 800a94c:	ab03      	add	r3, sp, #12
 800a94e:	47a8      	blx	r5
 800a950:	2800      	cmp	r0, #0
 800a952:	d045      	beq.n	800a9e0 <ArtNetNode::HandleDmxIn()+0xac>
 800a954:	f894 3a34 	ldrb.w	r3, [r4, #2612]	; 0xa34
 800a958:	f204 626c 	addw	r2, r4, #1644	; 0x66c
 800a95c:	3301      	adds	r3, #1
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	f884 3a34 	strb.w	r3, [r4, #2612]	; 0xa34
 800a964:	f884 3667 	strb.w	r3, [r4, #1639]	; 0x667
 800a968:	2300      	movs	r3, #0
 800a96a:	f884 3668 	strb.w	r3, [r4, #1640]	; 0x668
 800a96e:	f8b4 3a28 	ldrh.w	r3, [r4, #2600]	; 0xa28
 800a972:	f8a4 3669 	strh.w	r3, [r4, #1641]	; 0x669
 800a976:	9b02      	ldr	r3, [sp, #8]
 800a978:	18c1      	adds	r1, r0, r3
 800a97a:	4281      	cmp	r1, r0
 800a97c:	d12b      	bne.n	800a9d6 <ArtNetNode::HandleDmxIn()+0xa2>
 800a97e:	07d8      	lsls	r0, r3, #31
 800a980:	d505      	bpl.n	800a98e <ArtNetNode::HandleDmxIn()+0x5a>
 800a982:	2100      	movs	r1, #0
 800a984:	18e2      	adds	r2, r4, r3
 800a986:	3301      	adds	r3, #1
 800a988:	f882 166d 	strb.w	r1, [r2, #1645]	; 0x66d
 800a98c:	9302      	str	r3, [sp, #8]
 800a98e:	9b02      	ldr	r3, [sp, #8]
 800a990:	f204 615b 	addw	r1, r4, #1627	; 0x65b
 800a994:	0a1a      	lsrs	r2, r3, #8
 800a996:	f884 366c 	strb.w	r3, [r4, #1644]	; 0x66c
 800a99a:	2380      	movs	r3, #128	; 0x80
 800a99c:	f884 3a2b 	strb.w	r3, [r4, #2603]	; 0xa2b
 800a9a0:	f641 1336 	movw	r3, #6454	; 0x1936
 800a9a4:	f884 266b 	strb.w	r2, [r4, #1643]	; 0x66b
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	f240 2212 	movw	r2, #530	; 0x212
 800a9ae:	f8d4 3a30 	ldr.w	r3, [r4, #2608]	; 0xa30
 800a9b2:	7820      	ldrb	r0, [r4, #0]
 800a9b4:	f004 fce2 	bl	800f37c <udp_send>
 800a9b8:	4a16      	ldr	r2, [pc, #88]	; (800aa14 <ArtNetNode::HandleDmxIn()+0xe0>)
 800a9ba:	6813      	ldr	r3, [r2, #0]
 800a9bc:	07d9      	lsls	r1, r3, #31
 800a9be:	d408      	bmi.n	800a9d2 <ArtNetNode::HandleDmxIn()+0x9e>
 800a9c0:	f043 0301 	orr.w	r3, r3, #1
 800a9c4:	6013      	str	r3, [r2, #0]
 800a9c6:	f894 39f9 	ldrb.w	r3, [r4, #2553]	; 0x9f9
 800a9ca:	f043 0301 	orr.w	r3, r3, #1
 800a9ce:	f884 39f9 	strb.w	r3, [r4, #2553]	; 0x9f9
 800a9d2:	b005      	add	sp, #20
 800a9d4:	bd30      	pop	{r4, r5, pc}
 800a9d6:	f810 5b01 	ldrb.w	r5, [r0], #1
 800a9da:	f802 5f01 	strb.w	r5, [r2, #1]!
 800a9de:	e7cc      	b.n	800a97a <ArtNetNode::HandleDmxIn()+0x46>
 800a9e0:	f994 2a2b 	ldrsb.w	r2, [r4, #2603]	; 0xa2b
 800a9e4:	f894 3a2b 	ldrb.w	r3, [r4, #2603]	; 0xa2b
 800a9e8:	2a00      	cmp	r2, #0
 800a9ea:	daf2      	bge.n	800a9d2 <ArtNetNode::HandleDmxIn()+0x9e>
 800a9ec:	9a03      	ldr	r2, [sp, #12]
 800a9ee:	2a00      	cmp	r2, #0
 800a9f0:	d1ef      	bne.n	800a9d2 <ArtNetNode::HandleDmxIn()+0x9e>
 800a9f2:	4a08      	ldr	r2, [pc, #32]	; (800aa14 <ArtNetNode::HandleDmxIn()+0xe0>)
 800a9f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f8:	f884 3a2b 	strb.w	r3, [r4, #2603]	; 0xa2b
 800a9fc:	6813      	ldr	r3, [r2, #0]
 800a9fe:	f023 0301 	bic.w	r3, r3, #1
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1e4      	bne.n	800a9d2 <ArtNetNode::HandleDmxIn()+0x9e>
 800aa08:	f894 39f9 	ldrb.w	r3, [r4, #2553]	; 0x9f9
 800aa0c:	f023 0301 	bic.w	r3, r3, #1
 800aa10:	e7dd      	b.n	800a9ce <ArtNetNode::HandleDmxIn()+0x9a>
 800aa12:	bf00      	nop
 800aa14:	20000c6c 	andcs	r0, r0, ip, ror #24

0800aa18 <memcmp.constprop.0>:
 800aa18:	b510      	push	{r4, lr}
 800aa1a:	4907      	ldr	r1, [pc, #28]	; (800aa38 <memcmp.constprop.0+0x20>)
 800aa1c:	1e42      	subs	r2, r0, #1
 800aa1e:	3003      	adds	r0, #3
 800aa20:	4282      	cmp	r2, r0
 800aa22:	d101      	bne.n	800aa28 <memcmp.constprop.0+0x10>
 800aa24:	2000      	movs	r0, #0
 800aa26:	e006      	b.n	800aa36 <memcmp.constprop.0+0x1e>
 800aa28:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800aa2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa30:	42a3      	cmp	r3, r4
 800aa32:	d0f5      	beq.n	800aa20 <memcmp.constprop.0+0x8>
 800aa34:	1b18      	subs	r0, r3, r4
 800aa36:	bd10      	pop	{r4, pc}
 800aa38:	20000c70 	andcs	r0, r0, r0, ror ip

0800aa3c <memcpy.constprop.0.isra.0>:
 800aa3c:	3801      	subs	r0, #1
 800aa3e:	1d0b      	adds	r3, r1, #4
 800aa40:	4299      	cmp	r1, r3
 800aa42:	d100      	bne.n	800aa46 <memcpy.constprop.0.isra.0+0xa>
 800aa44:	4770      	bx	lr
 800aa46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa4a:	f800 2f01 	strb.w	r2, [r0, #1]!
 800aa4e:	e7f7      	b.n	800aa40 <memcpy.constprop.0.isra.0+0x4>

0800aa50 <ArtNetNode::HandleIpProg()>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	f100 0398 	add.w	r3, r0, #152	; 0x98
 800aa58:	b085      	sub	sp, #20
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	9303      	str	r3, [sp, #12]
 800aa5e:	2300      	movs	r3, #0
 800aa60:	4d57      	ldr	r5, [pc, #348]	; (800abc0 <ArtNetNode::HandleIpProg()+0x170>)
 800aa62:	f890 70a6 	ldrb.w	r7, [r0, #166]	; 0xa6
 800aa66:	6828      	ldr	r0, [r5, #0]
 800aa68:	f890 b005 	ldrb.w	fp, [r0, #5]
 800aa6c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800aa70:	f06f 0306 	mvn.w	r3, #6
 800aa74:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 800aa78:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800aa7c:	2bc0      	cmp	r3, #192	; 0xc0
 800aa7e:	d101      	bne.n	800aa84 <ArtNetNode::HandleIpProg()+0x34>
 800aa80:	f005 faf4 	bl	801006c <Network::EnableDhcp()>
 800aa84:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800aa88:	2b88      	cmp	r3, #136	; 0x88
 800aa8a:	d103      	bne.n	800aa94 <ArtNetNode::HandleIpProg()+0x44>
 800aa8c:	2100      	movs	r1, #0
 800aa8e:	6828      	ldr	r0, [r5, #0]
 800aa90:	f005 fa9a 	bl	800ffc8 <Network::SetIp(unsigned int)>
 800aa94:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800aa98:	2b84      	cmp	r3, #132	; 0x84
 800aa9a:	4e4a      	ldr	r6, [pc, #296]	; (800abc4 <ArtNetNode::HandleIpProg()+0x174>)
 800aa9c:	f104 08a8 	add.w	r8, r4, #168	; 0xa8
 800aaa0:	d107      	bne.n	800aab2 <ArtNetNode::HandleIpProg()+0x62>
 800aaa2:	4641      	mov	r1, r8
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f7ff ffc9 	bl	800aa3c <memcpy.constprop.0.isra.0>
 800aaaa:	6831      	ldr	r1, [r6, #0]
 800aaac:	6828      	ldr	r0, [r5, #0]
 800aaae:	f005 fa8b 	bl	800ffc8 <Network::SetIp(unsigned int)>
 800aab2:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800aab6:	2b82      	cmp	r3, #130	; 0x82
 800aab8:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 800aabc:	d107      	bne.n	800aace <ArtNetNode::HandleIpProg()+0x7e>
 800aabe:	4649      	mov	r1, r9
 800aac0:	4840      	ldr	r0, [pc, #256]	; (800abc4 <ArtNetNode::HandleIpProg()+0x174>)
 800aac2:	f7ff ffbb 	bl	800aa3c <memcpy.constprop.0.isra.0>
 800aac6:	6831      	ldr	r1, [r6, #0]
 800aac8:	6828      	ldr	r0, [r5, #0]
 800aaca:	f005 faa8 	bl	801001e <Network::SetNetmask(unsigned int)>
 800aace:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800aad2:	2f90      	cmp	r7, #144	; 0x90
 800aad4:	f104 0ab2 	add.w	sl, r4, #178	; 0xb2
 800aad8:	d107      	bne.n	800aaea <ArtNetNode::HandleIpProg()+0x9a>
 800aada:	4651      	mov	r1, sl
 800aadc:	4839      	ldr	r0, [pc, #228]	; (800abc4 <ArtNetNode::HandleIpProg()+0x174>)
 800aade:	f7ff ffad 	bl	800aa3c <memcpy.constprop.0.isra.0>
 800aae2:	6831      	ldr	r1, [r6, #0]
 800aae4:	6828      	ldr	r0, [r5, #0]
 800aae6:	f005 faac 	bl	8010042 <Network::SetGatewayIp(unsigned int)>
 800aaea:	6829      	ldr	r1, [r5, #0]
 800aaec:	794a      	ldrb	r2, [r1, #5]
 800aaee:	0192      	lsls	r2, r2, #6
 800aaf0:	f884 20b2 	strb.w	r2, [r4, #178]	; 0xb2
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f884 20b3 	strb.w	r2, [r4, #179]	; 0xb3
 800aafa:	7948      	ldrb	r0, [r1, #5]
 800aafc:	6949      	ldr	r1, [r1, #20]
 800aafe:	ea8b 0b00 	eor.w	fp, fp, r0
 800ab02:	4640      	mov	r0, r8
 800ab04:	6031      	str	r1, [r6, #0]
 800ab06:	f7ff ff87 	bl	800aa18 <memcmp.constprop.0>
 800ab0a:	492e      	ldr	r1, [pc, #184]	; (800abc4 <ArtNetNode::HandleIpProg()+0x174>)
 800ab0c:	4607      	mov	r7, r0
 800ab0e:	4640      	mov	r0, r8
 800ab10:	f7ff ff94 	bl	800aa3c <memcpy.constprop.0.isra.0>
 800ab14:	6829      	ldr	r1, [r5, #0]
 800ab16:	4648      	mov	r0, r9
 800ab18:	69c9      	ldr	r1, [r1, #28]
 800ab1a:	6031      	str	r1, [r6, #0]
 800ab1c:	f7ff ff7c 	bl	800aa18 <memcmp.constprop.0>
 800ab20:	4928      	ldr	r1, [pc, #160]	; (800abc4 <ArtNetNode::HandleIpProg()+0x174>)
 800ab22:	9003      	str	r0, [sp, #12]
 800ab24:	4648      	mov	r0, r9
 800ab26:	f7ff ff89 	bl	800aa3c <memcpy.constprop.0.isra.0>
 800ab2a:	6829      	ldr	r1, [r5, #0]
 800ab2c:	4650      	mov	r0, sl
 800ab2e:	6989      	ldr	r1, [r1, #24]
 800ab30:	6031      	str	r1, [r6, #0]
 800ab32:	f7ff ff71 	bl	800aa18 <memcmp.constprop.0>
 800ab36:	9b03      	ldr	r3, [sp, #12]
 800ab38:	4922      	ldr	r1, [pc, #136]	; (800abc4 <ArtNetNode::HandleIpProg()+0x174>)
 800ab3a:	431f      	orrs	r7, r3
 800ab3c:	4307      	orrs	r7, r0
 800ab3e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 800ab42:	bf0c      	ite	eq
 800ab44:	465e      	moveq	r6, fp
 800ab46:	f04b 0601 	orrne.w	r6, fp, #1
 800ab4a:	f7ff ff77 	bl	800aa3c <memcpy.constprop.0.isra.0>
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f641 1336 	movw	r3, #6454	; 0x1936
 800ab54:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
 800ab58:	f884 20b9 	strb.w	r2, [r4, #185]	; 0xb9
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	2222      	movs	r2, #34	; 0x22
 800ab60:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
 800ab64:	7820      	ldrb	r0, [r4, #0]
 800ab66:	f104 0198 	add.w	r1, r4, #152	; 0x98
 800ab6a:	f004 fc07 	bl	800f37c <udp_send>
 800ab6e:	b31e      	cbz	r6, 800abb8 <ArtNetNode::HandleIpProg()+0x168>
 800ab70:	682a      	ldr	r2, [r5, #0]
 800ab72:	f204 5076 	addw	r0, r4, #1398	; 0x576
 800ab76:	6953      	ldr	r3, [r2, #20]
 800ab78:	6223      	str	r3, [r4, #32]
 800ab7a:	69d1      	ldr	r1, [r2, #28]
 800ab7c:	7952      	ldrb	r2, [r2, #5]
 800ab7e:	ea63 0301 	orn	r3, r3, r1
 800ab82:	6263      	str	r3, [r4, #36]	; 0x24
 800ab84:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800ab88:	4641      	mov	r1, r8
 800ab8a:	f023 0302 	bic.w	r3, r3, #2
 800ab8e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800ab92:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
 800ab96:	f7ff ff51 	bl	800aa3c <memcpy.constprop.0.isra.0>
 800ab9a:	4641      	mov	r1, r8
 800ab9c:	f204 603b 	addw	r0, r4, #1595	; 0x63b
 800aba0:	f7ff ff4c 	bl	800aa3c <memcpy.constprop.0.isra.0>
 800aba4:	f894 39f2 	ldrb.w	r3, [r4, #2546]	; 0x9f2
 800aba8:	b133      	cbz	r3, 800abb8 <ArtNetNode::HandleIpProg()+0x168>
 800abaa:	2101      	movs	r1, #1
 800abac:	4620      	mov	r0, r4
 800abae:	b005      	add	sp, #20
 800abb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb4:	f000 b8d4 	b.w	800ad60 <ArtNetNode::SendPollRelply(bool)>
 800abb8:	b005      	add	sp, #20
 800abba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbe:	bf00      	nop
 800abc0:	20008aa8 	andcs	r8, r0, r8, lsr #21
 800abc4:	20000c70 	andcs	r0, r0, r0, ror ip

0800abc8 <memcpy.isra.0>:
 800abc8:	3801      	subs	r0, #1
 800abca:	440a      	add	r2, r1
 800abcc:	4291      	cmp	r1, r2
 800abce:	d100      	bne.n	800abd2 <memcpy.isra.0+0xa>
 800abd0:	4770      	bx	lr
 800abd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abd6:	f800 3f01 	strb.w	r3, [r0, #1]!
 800abda:	e7f7      	b.n	800abcc <memcpy.isra.0+0x4>

0800abdc <ArtNetNode::FillPollReply()>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	4604      	mov	r4, r0
 800abe0:	f200 506c 	addw	r0, r0, #1388	; 0x56c
 800abe4:	4603      	mov	r3, r0
 800abe6:	2100      	movs	r1, #0
 800abe8:	f204 625b 	addw	r2, r4, #1627	; 0x65b
 800abec:	429a      	cmp	r2, r3
 800abee:	d153      	bne.n	800ac98 <ArtNetNode::FillPollReply()+0xbc>
 800abf0:	2208      	movs	r2, #8
 800abf2:	492b      	ldr	r1, [pc, #172]	; (800aca0 <ArtNetNode::FillPollReply()+0xc4>)
 800abf4:	f7ff ffe8 	bl	800abc8 <memcpy.isra.0>
 800abf8:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800abfc:	4d29      	ldr	r5, [pc, #164]	; (800aca4 <ArtNetNode::FillPollReply()+0xc8>)
 800abfe:	f8a4 3574 	strh.w	r3, [r4, #1396]	; 0x574
 800ac02:	6a23      	ldr	r3, [r4, #32]
 800ac04:	4629      	mov	r1, r5
 800ac06:	f204 5076 	addw	r0, r4, #1398	; 0x576
 800ac0a:	2204      	movs	r2, #4
 800ac0c:	602b      	str	r3, [r5, #0]
 800ac0e:	f7ff ffdb 	bl	800abc8 <memcpy.isra.0>
 800ac12:	f641 1336 	movw	r3, #6454	; 0x1936
 800ac16:	f8a4 357a 	strh.w	r3, [r4, #1402]	; 0x57a
 800ac1a:	4b23      	ldr	r3, [pc, #140]	; (800aca8 <ArtNetNode::FillPollReply()+0xcc>)
 800ac1c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800ac20:	781a      	ldrb	r2, [r3, #0]
 800ac22:	f204 5086 	addw	r0, r4, #1414	; 0x586
 800ac26:	f884 257c 	strb.w	r2, [r4, #1404]	; 0x57c
 800ac2a:	785b      	ldrb	r3, [r3, #1]
 800ac2c:	f884 357d 	strb.w	r3, [r4, #1405]	; 0x57d
 800ac30:	4b1e      	ldr	r3, [pc, #120]	; (800acac <ArtNetNode::FillPollReply()+0xd0>)
 800ac32:	781a      	ldrb	r2, [r3, #0]
 800ac34:	f884 2580 	strb.w	r2, [r4, #1408]	; 0x580
 800ac38:	785b      	ldrb	r3, [r3, #1]
 800ac3a:	f884 3581 	strb.w	r3, [r4, #1409]	; 0x581
 800ac3e:	4b1c      	ldr	r3, [pc, #112]	; (800acb0 <ArtNetNode::FillPollReply()+0xd4>)
 800ac40:	785a      	ldrb	r2, [r3, #1]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 800ac48:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 800ac4c:	2212      	movs	r2, #18
 800ac4e:	f7ff ffbb 	bl	800abc8 <memcpy.isra.0>
 800ac52:	f104 014a 	add.w	r1, r4, #74	; 0x4a
 800ac56:	f504 60b3 	add.w	r0, r4, #1432	; 0x598
 800ac5a:	2240      	movs	r2, #64	; 0x40
 800ac5c:	f7ff ffb4 	bl	800abc8 <memcpy.isra.0>
 800ac60:	2300      	movs	r3, #0
 800ac62:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800ac66:	f884 3634 	strb.w	r3, [r4, #1588]	; 0x634
 800ac6a:	f204 6035 	addw	r0, r4, #1589	; 0x635
 800ac6e:	2206      	movs	r2, #6
 800ac70:	f7ff ffaa 	bl	800abc8 <memcpy.isra.0>
 800ac74:	4629      	mov	r1, r5
 800ac76:	f204 603b 	addw	r0, r4, #1595	; 0x63b
 800ac7a:	2204      	movs	r2, #4
 800ac7c:	f7ff ffa4 	bl	800abc8 <memcpy.isra.0>
 800ac80:	2304      	movs	r3, #4
 800ac82:	f104 018e 	add.w	r1, r4, #142	; 0x8e
 800ac86:	f884 3619 	strb.w	r3, [r4, #1561]	; 0x619
 800ac8a:	f204 6046 	addw	r0, r4, #1606	; 0x646
 800ac8e:	2206      	movs	r2, #6
 800ac90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac94:	f7ff bf98 	b.w	800abc8 <memcpy.isra.0>
 800ac98:	f803 1b01 	strb.w	r1, [r3], #1
 800ac9c:	e7a6      	b.n	800abec <ArtNetNode::FillPollReply()+0x10>
 800ac9e:	bf00      	nop
 800aca0:	08016b31 	stmdaeq	r1, {r0, r4, r5, r8, r9, fp, sp, lr}
 800aca4:	20000c74 	andcs	r0, r0, r4, ror ip
 800aca8:	08016d78 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, fp, sp, lr}
 800acac:	08016d74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, sp, lr}
 800acb0:	08016d76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r8, sl, fp, sp, lr}

0800acb4 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>:
 800acb4:	1a8a      	subs	r2, r1, r2
 800acb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb8:	4605      	mov	r5, r0
 800acba:	461e      	mov	r6, r3
 800acbc:	1884      	adds	r4, r0, r2
 800acbe:	b169      	cbz	r1, 800acdc <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x28>
 800acc0:	2300      	movs	r3, #0
 800acc2:	f884 361a 	strb.w	r3, [r4, #1562]	; 0x61a
 800acc6:	f884 3622 	strb.w	r3, [r4, #1570]	; 0x622
 800acca:	f884 3641 	strb.w	r3, [r4, #1601]	; 0x641
 800acce:	f884 362a 	strb.w	r3, [r4, #1578]	; 0x62a
 800acd2:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800acd6:	f884 3626 	strb.w	r3, [r4, #1574]	; 0x626
 800acda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acdc:	f8d5 3a20 	ldr.w	r3, [r5, #2592]	; 0xa20
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d111      	bne.n	800ad08 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x54>
 800ace4:	69a8      	ldr	r0, [r5, #24]
 800ace6:	f895 7a03 	ldrb.w	r7, [r5, #2563]	; 0xa03
 800acea:	6803      	ldr	r3, [r0, #0]
 800acec:	f007 0776 	and.w	r7, r7, #118	; 0x76
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	4798      	blx	r3
 800acf4:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800acf8:	4307      	orrs	r7, r0
 800acfa:	f010 0001 	ands.w	r0, r0, #1
 800acfe:	bf08      	it	eq
 800ad00:	f8c5 0a20 	streq.w	r0, [r5, #2592]	; 0xa20
 800ad04:	f885 7a03 	strb.w	r7, [r5, #2563]	; 0xa03
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f884 361a 	strb.w	r3, [r4, #1562]	; 0x61a
 800ad0e:	f895 3a04 	ldrb.w	r3, [r5, #2564]	; 0xa04
 800ad12:	b12b      	cbz	r3, 800ad20 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x6c>
 800ad14:	2380      	movs	r3, #128	; 0x80
 800ad16:	f884 361a 	strb.w	r3, [r4, #1562]	; 0x61a
 800ad1a:	6833      	ldr	r3, [r6, #0]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	6033      	str	r3, [r6, #0]
 800ad20:	f895 3a03 	ldrb.w	r3, [r5, #2563]	; 0xa03
 800ad24:	f884 3622 	strb.w	r3, [r4, #1570]	; 0x622
 800ad28:	f895 3a1c 	ldrb.w	r3, [r5, #2588]	; 0xa1c
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	bf14      	ite	ne
 800ad30:	2340      	movne	r3, #64	; 0x40
 800ad32:	23c0      	moveq	r3, #192	; 0xc0
 800ad34:	f884 3641 	strb.w	r3, [r4, #1601]	; 0x641
 800ad38:	f895 3a02 	ldrb.w	r3, [r5, #2562]	; 0xa02
 800ad3c:	f884 362a 	strb.w	r3, [r4, #1578]	; 0x62a
 800ad40:	f895 3a2c 	ldrb.w	r3, [r5, #2604]	; 0xa2c
 800ad44:	b12b      	cbz	r3, 800ad52 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x9e>
 800ad46:	2340      	movs	r3, #64	; 0x40
 800ad48:	f884 361a 	strb.w	r3, [r4, #1562]	; 0x61a
 800ad4c:	6833      	ldr	r3, [r6, #0]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	6033      	str	r3, [r6, #0]
 800ad52:	f895 3a2b 	ldrb.w	r3, [r5, #2603]	; 0xa2b
 800ad56:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800ad5a:	f895 3a2a 	ldrb.w	r3, [r5, #2602]	; 0xa2a
 800ad5e:	e7ba      	b.n	800acd6 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x22>

0800ad60 <ArtNetNode::SendPollRelply(bool)>:
 800ad60:	b530      	push	{r4, r5, lr}
 800ad62:	4604      	mov	r4, r0
 800ad64:	b085      	sub	sp, #20
 800ad66:	b941      	cbnz	r1, 800ad7a <ArtNetNode::SendPollRelply(bool)+0x1a>
 800ad68:	f890 39f1 	ldrb.w	r3, [r0, #2545]	; 0x9f1
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	bf02      	ittt	eq
 800ad70:	f8d0 39e0 	ldreq.w	r3, [r0, #2528]	; 0x9e0
 800ad74:	3301      	addeq	r3, #1
 800ad76:	f8c0 39e0 	streq.w	r3, [r0, #2528]	; 0x9e0
 800ad7a:	f894 308b 	ldrb.w	r3, [r4, #139]	; 0x8b
 800ad7e:	2500      	movs	r5, #0
 800ad80:	f884 3583 	strb.w	r3, [r4, #1411]	; 0x583
 800ad84:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800ad88:	9503      	str	r5, [sp, #12]
 800ad8a:	f884 3640 	strb.w	r3, [r4, #1600]	; 0x640
 800ad8e:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
 800ad92:	f884 3645 	strb.w	r3, [r4, #1605]	; 0x645
 800ad96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800ad98:	f8a4 357e 	strh.w	r3, [r4, #1406]	; 0x57e
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	f884 363f 	strb.w	r3, [r4, #1599]	; 0x63f
 800ada2:	4629      	mov	r1, r5
 800ada4:	2200      	movs	r2, #0
 800ada6:	4620      	mov	r0, r4
 800ada8:	ab03      	add	r3, sp, #12
 800adaa:	3501      	adds	r5, #1
 800adac:	f7ff ff82 	bl	800acb4 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>
 800adb0:	2d04      	cmp	r5, #4
 800adb2:	d1f6      	bne.n	800ada2 <ArtNetNode::SendPollRelply(bool)+0x42>
 800adb4:	9b03      	ldr	r3, [sp, #12]
 800adb6:	2140      	movs	r1, #64	; 0x40
 800adb8:	f884 3619 	strb.w	r3, [r4, #1561]	; 0x619
 800adbc:	f604 138d 	addw	r3, r4, #2445	; 0x98d
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	f8d4 39e0 	ldr.w	r3, [r4, #2528]	; 0x9e0
 800adc6:	4a0b      	ldr	r2, [pc, #44]	; (800adf4 <ArtNetNode::SendPollRelply(bool)+0x94>)
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	f504 60bb 	add.w	r0, r4, #1496	; 0x5d8
 800adce:	f894 39f0 	ldrb.w	r3, [r4, #2544]	; 0x9f0
 800add2:	f008 fc41 	bl	8013658 <snprintf>
 800add6:	f641 1336 	movw	r3, #6454	; 0x1936
 800adda:	22ef      	movs	r2, #239	; 0xef
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	7820      	ldrb	r0, [r4, #0]
 800ade0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ade2:	f204 516c 	addw	r1, r4, #1388	; 0x56c
 800ade6:	f004 fac9 	bl	800f37c <udp_send>
 800adea:	2300      	movs	r3, #0
 800adec:	f884 39f7 	strb.w	r3, [r4, #2551]	; 0x9f7
 800adf0:	b005      	add	sp, #20
 800adf2:	bd30      	pop	{r4, r5, pc}
 800adf4:	08016b1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, fp, sp, lr}

0800adf8 <ArtNetNode::HandlePoll()>:
 800adf8:	f890 20a4 	ldrb.w	r2, [r0, #164]	; 0xa4
 800adfc:	b410      	push	{r4}
 800adfe:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800ae02:	f880 39f2 	strb.w	r3, [r0, #2546]	; 0x9f2
 800ae06:	f012 0304 	ands.w	r3, r2, #4
 800ae0a:	d02e      	beq.n	800ae6a <ArtNetNode::HandlePoll()+0x72>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	f8d0 19e8 	ldr.w	r1, [r0, #2536]	; 0x9e8
 800ae12:	f890 49f4 	ldrb.w	r4, [r0, #2548]	; 0x9f4
 800ae16:	f880 39f3 	strb.w	r3, [r0, #2547]	; 0x9f3
 800ae1a:	b979      	cbnz	r1, 800ae3c <ArtNetNode::HandlePoll()+0x44>
 800ae1c:	f8d0 3564 	ldr.w	r3, [r0, #1380]	; 0x564
 800ae20:	f8c0 39e8 	str.w	r3, [r0, #2536]	; 0x9e8
 800ae24:	b19c      	cbz	r4, 800ae4e <ArtNetNode::HandlePoll()+0x56>
 800ae26:	f890 39fc 	ldrb.w	r3, [r0, #2556]	; 0x9fc
 800ae2a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	bf28      	it	cs
 800ae32:	4613      	movcs	r3, r2
 800ae34:	f880 39fc 	strb.w	r3, [r0, #2556]	; 0x9fc
 800ae38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ae3a:	e010      	b.n	800ae5e <ArtNetNode::HandlePoll()+0x66>
 800ae3c:	2c00      	cmp	r4, #0
 800ae3e:	d1f2      	bne.n	800ae26 <ArtNetNode::HandlePoll()+0x2e>
 800ae40:	f8d0 4564 	ldr.w	r4, [r0, #1380]	; 0x564
 800ae44:	42a1      	cmp	r1, r4
 800ae46:	d002      	beq.n	800ae4e <ArtNetNode::HandlePoll()+0x56>
 800ae48:	f880 39f4 	strb.w	r3, [r0, #2548]	; 0x9f4
 800ae4c:	e7eb      	b.n	800ae26 <ArtNetNode::HandlePoll()+0x2e>
 800ae4e:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 800ae52:	f880 39fc 	strb.w	r3, [r0, #2556]	; 0x9fc
 800ae56:	0713      	lsls	r3, r2, #28
 800ae58:	d5ee      	bpl.n	800ae38 <ArtNetNode::HandlePoll()+0x40>
 800ae5a:	f8d0 3564 	ldr.w	r3, [r0, #1380]	; 0x564
 800ae5e:	2101      	movs	r1, #1
 800ae60:	bc10      	pop	{r4}
 800ae62:	f8c0 39e4 	str.w	r3, [r0, #2532]	; 0x9e4
 800ae66:	f7ff bf7b 	b.w	800ad60 <ArtNetNode::SendPollRelply(bool)>
 800ae6a:	f880 39f3 	strb.w	r3, [r0, #2547]	; 0x9f3
 800ae6e:	e7f6      	b.n	800ae5e <ArtNetNode::HandlePoll()+0x66>

0800ae70 <memcpy.isra.0>:
 800ae70:	3801      	subs	r0, #1
 800ae72:	440a      	add	r2, r1
 800ae74:	4291      	cmp	r1, r2
 800ae76:	d100      	bne.n	800ae7a <memcpy.isra.0+0xa>
 800ae78:	4770      	bx	lr
 800ae7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae7e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ae82:	e7f7      	b.n	800ae74 <memcpy.isra.0+0x4>

0800ae84 <ArtNetNode::SetRmd(unsigned int, bool)>:
 800ae84:	2328      	movs	r3, #40	; 0x28
 800ae86:	fb03 0301 	mla	r3, r3, r1, r0
 800ae8a:	b570      	push	{r4, r5, r6, lr}
 800ae8c:	f893 6a1c 	ldrb.w	r6, [r3, #2588]	; 0xa1c
 800ae90:	460d      	mov	r5, r1
 800ae92:	4296      	cmp	r6, r2
 800ae94:	4614      	mov	r4, r2
 800ae96:	f883 2a1c 	strb.w	r2, [r3, #2588]	; 0xa1c
 800ae9a:	d00e      	beq.n	800aeba <ArtNetNode::SetRmd(unsigned int, bool)+0x36>
 800ae9c:	f890 39f1 	ldrb.w	r3, [r0, #2545]	; 0x9f1
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d10a      	bne.n	800aeba <ArtNetNode::SetRmd(unsigned int, bool)+0x36>
 800aea4:	69c0      	ldr	r0, [r0, #28]
 800aea6:	b110      	cbz	r0, 800aeae <ArtNetNode::SetRmd(unsigned int, bool)+0x2a>
 800aea8:	6803      	ldr	r3, [r0, #0]
 800aeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeac:	4798      	blx	r3
 800aeae:	4621      	mov	r1, r4
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aeb6:	f006 bae5 	b.w	8011484 <artnet::display_rdm_enabled(unsigned int, bool)>
 800aeba:	bd70      	pop	{r4, r5, r6, pc}

0800aebc <ArtNetNode::HandleTodData()>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 800aec2:	4604      	mov	r4, r0
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d113      	bne.n	800aef0 <ArtNetNode::HandleTodData()+0x34>
 800aec8:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 800aecc:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800aed0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800aed4:	f890 2a2c 	ldrb.w	r2, [r0, #2604]	; 0xa2c
 800aed8:	b152      	cbz	r2, 800aef0 <ArtNetNode::HandleTodData()+0x34>
 800aeda:	f8b0 2a28 	ldrh.w	r2, [r0, #2600]	; 0xa28
 800aede:	429a      	cmp	r2, r3
 800aee0:	d106      	bne.n	800aef0 <ArtNetNode::HandleTodData()+0x34>
 800aee2:	2500      	movs	r5, #0
 800aee4:	f100 06b4 	add.w	r6, r0, #180	; 0xb4
 800aee8:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
 800aeec:	42ab      	cmp	r3, r5
 800aeee:	d800      	bhi.n	800aef2 <ArtNetNode::HandleTodData()+0x36>
 800aef0:	bd70      	pop	{r4, r5, r6, pc}
 800aef2:	68e0      	ldr	r0, [r4, #12]
 800aef4:	4632      	mov	r2, r6
 800aef6:	6803      	ldr	r3, [r0, #0]
 800aef8:	2100      	movs	r1, #0
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	4798      	blx	r3
 800aefe:	3501      	adds	r5, #1
 800af00:	3606      	adds	r6, #6
 800af02:	e7f1      	b.n	800aee8 <ArtNetNode::HandleTodData()+0x2c>

0800af04 <ArtNetNode::SendTod(unsigned int)>:
 800af04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af08:	f100 0998 	add.w	r9, r0, #152	; 0x98
 800af0c:	4604      	mov	r4, r0
 800af0e:	460f      	mov	r7, r1
 800af10:	2208      	movs	r2, #8
 800af12:	4648      	mov	r0, r9
 800af14:	ea4f 0891 	mov.w	r8, r1, lsr #2
 800af18:	492c      	ldr	r1, [pc, #176]	; (800afcc <ArtNetNode::SendTod(unsigned int)+0xc8>)
 800af1a:	f7ff ffa9 	bl	800ae70 <memcpy.isra.0>
 800af1e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800af22:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 800af26:	230e      	movs	r3, #14
 800af28:	2500      	movs	r5, #0
 800af2a:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 800af2e:	2301      	movs	r3, #1
 800af30:	68e0      	ldr	r0, [r4, #12]
 800af32:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
 800af36:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 800af3a:	6803      	ldr	r3, [r0, #0]
 800af3c:	4639      	mov	r1, r7
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	f884 50a0 	strb.w	r5, [r4, #160]	; 0xa0
 800af44:	4798      	blx	r3
 800af46:	f007 0303 	and.w	r3, r7, #3
 800af4a:	3301      	adds	r3, #1
 800af4c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 800af50:	f108 0301 	add.w	r3, r8, #1
 800af54:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 800af58:	f884 50a7 	strb.w	r5, [r4, #167]	; 0xa7
 800af5c:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
 800af60:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
 800af64:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 800af68:	f884 50ab 	strb.w	r5, [r4, #171]	; 0xab
 800af6c:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
 800af70:	44a0      	add	r8, r4
 800af72:	f898 3036 	ldrb.w	r3, [r8, #54]	; 0x36
 800af76:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 800af7a:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 800af7e:	2328      	movs	r3, #40	; 0x28
 800af80:	fb03 4307 	mla	r3, r3, r7, r4
 800af84:	f893 3a02 	ldrb.w	r3, [r3, #2562]	; 0xa02
 800af88:	b2c6      	uxtb	r6, r0
 800af8a:	68e0      	ldr	r0, [r4, #12]
 800af8c:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 800af90:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 800af94:	f884 60b1 	strb.w	r6, [r4, #177]	; 0xb1
 800af98:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 800af9c:	f884 60b3 	strb.w	r6, [r4, #179]	; 0xb3
 800afa0:	6803      	ldr	r3, [r0, #0]
 800afa2:	4639      	mov	r1, r7
 800afa4:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	4798      	blx	r3
 800afac:	2306      	movs	r3, #6
 800afae:	fb03 f206 	mul.w	r2, r3, r6
 800afb2:	f641 1336 	movw	r3, #6454	; 0x1936
 800afb6:	4649      	mov	r1, r9
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	7820      	ldrb	r0, [r4, #0]
 800afbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afbe:	321c      	adds	r2, #28
 800afc0:	f004 f9dc 	bl	800f37c <udp_send>
 800afc4:	b003      	add	sp, #12
 800afc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afca:	bf00      	nop
 800afcc:	08016b39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, fp, sp, lr}

0800afd0 <ArtNetNode::HandleTodControl()>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 800afd6:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800afda:	4604      	mov	r4, r0
 800afdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800afe0:	f890 2a1c 	ldrb.w	r2, [r0, #2588]	; 0xa1c
 800afe4:	b34a      	cbz	r2, 800b03a <ArtNetNode::HandleTodControl()+0x6a>
 800afe6:	f8b0 2a00 	ldrh.w	r2, [r0, #2560]	; 0xa00
 800afea:	429a      	cmp	r2, r3
 800afec:	d125      	bne.n	800b03a <ArtNetNode::HandleTodControl()+0x6a>
 800afee:	f890 3a04 	ldrb.w	r3, [r0, #2564]	; 0xa04
 800aff2:	b313      	cbz	r3, 800b03a <ArtNetNode::HandleTodControl()+0x6a>
 800aff4:	f890 3a25 	ldrb.w	r3, [r0, #2597]	; 0xa25
 800aff8:	b133      	cbz	r3, 800b008 <ArtNetNode::HandleTodControl()+0x38>
 800affa:	f890 198c 	ldrb.w	r1, [r0, #2444]	; 0x98c
 800affe:	b919      	cbnz	r1, 800b008 <ArtNetNode::HandleTodControl()+0x38>
 800b000:	6840      	ldr	r0, [r0, #4]
 800b002:	6803      	ldr	r3, [r0, #0]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	4798      	blx	r3
 800b008:	f894 30ae 	ldrb.w	r3, [r4, #174]	; 0xae
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d104      	bne.n	800b01a <ArtNetNode::HandleTodControl()+0x4a>
 800b010:	68e0      	ldr	r0, [r4, #12]
 800b012:	2100      	movs	r1, #0
 800b014:	6803      	ldr	r3, [r0, #0]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	4798      	blx	r3
 800b01a:	2100      	movs	r1, #0
 800b01c:	4620      	mov	r0, r4
 800b01e:	f7ff ff71 	bl	800af04 <ArtNetNode::SendTod(unsigned int)>
 800b022:	f894 3a25 	ldrb.w	r3, [r4, #2597]	; 0xa25
 800b026:	b143      	cbz	r3, 800b03a <ArtNetNode::HandleTodControl()+0x6a>
 800b028:	f894 198c 	ldrb.w	r1, [r4, #2444]	; 0x98c
 800b02c:	b929      	cbnz	r1, 800b03a <ArtNetNode::HandleTodControl()+0x6a>
 800b02e:	6860      	ldr	r0, [r4, #4]
 800b030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b034:	6803      	ldr	r3, [r0, #0]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	4718      	bx	r3
 800b03a:	bd10      	pop	{r4, pc}

0800b03c <ArtNetNode::HandleTodRequest()>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	4605      	mov	r5, r0
 800b040:	f06f 07ae 	mvn.w	r7, #174	; 0xae
 800b044:	4604      	mov	r4, r0
 800b046:	f815 6faf 	ldrb.w	r6, [r5, #175]!
 800b04a:	1a3f      	subs	r7, r7, r0
 800b04c:	f006 061f 	and.w	r6, r6, #31
 800b050:	197b      	adds	r3, r7, r5
 800b052:	429e      	cmp	r6, r3
 800b054:	dc00      	bgt.n	800b058 <ArtNetNode::HandleTodRequest()+0x1c>
 800b056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b058:	f894 20ad 	ldrb.w	r2, [r4, #173]	; 0xad
 800b05c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800b060:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b064:	f894 2a1c 	ldrb.w	r2, [r4, #2588]	; 0xa1c
 800b068:	2a00      	cmp	r2, #0
 800b06a:	d0f1      	beq.n	800b050 <ArtNetNode::HandleTodRequest()+0x14>
 800b06c:	f8b4 2a00 	ldrh.w	r2, [r4, #2560]	; 0xa00
 800b070:	429a      	cmp	r2, r3
 800b072:	d1ed      	bne.n	800b050 <ArtNetNode::HandleTodRequest()+0x14>
 800b074:	f894 3a04 	ldrb.w	r3, [r4, #2564]	; 0xa04
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d0e9      	beq.n	800b050 <ArtNetNode::HandleTodRequest()+0x14>
 800b07c:	2100      	movs	r1, #0
 800b07e:	4620      	mov	r0, r4
 800b080:	f7ff ff40 	bl	800af04 <ArtNetNode::SendTod(unsigned int)>
 800b084:	e7e4      	b.n	800b050 <ArtNetNode::HandleTodRequest()+0x14>
	...

0800b088 <ArtNetNode::SendTodRequest(unsigned int)>:
 800b088:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b08a:	4604      	mov	r4, r0
 800b08c:	68c0      	ldr	r0, [r0, #12]
 800b08e:	f104 0698 	add.w	r6, r4, #152	; 0x98
 800b092:	6803      	ldr	r3, [r0, #0]
 800b094:	460d      	mov	r5, r1
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	4798      	blx	r3
 800b09a:	4630      	mov	r0, r6
 800b09c:	2208      	movs	r2, #8
 800b09e:	491c      	ldr	r1, [pc, #112]	; (800b110 <ArtNetNode::SendTodRequest(unsigned int)+0x88>)
 800b0a0:	f7ff fee6 	bl	800ae70 <memcpy.isra.0>
 800b0a4:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 800b0ae:	220e      	movs	r2, #14
 800b0b0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800b0b4:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 800b0b8:	f884 20a3 	strb.w	r2, [r4, #163]	; 0xa3
 800b0bc:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 800b0c0:	f884 30a7 	strb.w	r3, [r4, #167]	; 0xa7
 800b0c4:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 800b0c8:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800b0cc:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 800b0d0:	f884 30ab 	strb.w	r3, [r4, #171]	; 0xab
 800b0d4:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
 800b0d8:	eb04 0295 	add.w	r2, r4, r5, lsr #2
 800b0dc:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800b0e0:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	f884 20ad 	strb.w	r2, [r4, #173]	; 0xad
 800b0ea:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 800b0ee:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800b0f2:	f895 3a2a 	ldrb.w	r3, [r5, #2602]	; 0xa2a
 800b0f6:	2219      	movs	r2, #25
 800b0f8:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 800b0fc:	f641 1336 	movw	r3, #6454	; 0x1936
 800b100:	4631      	mov	r1, r6
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	7820      	ldrb	r0, [r4, #0]
 800b106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b108:	f004 f938 	bl	800f37c <udp_send>
 800b10c:	b002      	add	sp, #8
 800b10e:	bd70      	pop	{r4, r5, r6, pc}
 800b110:	08016b39 	stmdaeq	r1, {r0, r3, r4, r5, r8, r9, fp, sp, lr}

0800b114 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>:
 800b114:	f890 308b 	ldrb.w	r3, [r0, #139]	; 0x8b
 800b118:	60c1      	str	r1, [r0, #12]
 800b11a:	b131      	cbz	r1, 800b12a <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x16>
 800b11c:	f880 298c 	strb.w	r2, [r0, #2444]	; 0x98c
 800b120:	f043 0302 	orr.w	r3, r3, #2
 800b124:	f880 308b 	strb.w	r3, [r0, #139]	; 0x8b
 800b128:	4770      	bx	lr
 800b12a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800b12e:	e7f9      	b.n	800b124 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x10>

0800b130 <ArtNetNode::HandleRdm()>:
 800b130:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b134:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 800b138:	4604      	mov	r4, r0
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d160      	bne.n	800b200 <ArtNetNode::HandleRdm()+0xd0>
 800b13e:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800b142:	f890 50af 	ldrb.w	r5, [r0, #175]	; 0xaf
 800b146:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 800b14a:	f890 3a1c 	ldrb.w	r3, [r0, #2588]	; 0xa1c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d047      	beq.n	800b1e2 <ArtNetNode::HandleRdm()+0xb2>
 800b152:	f8b0 3a00 	ldrh.w	r3, [r0, #2560]	; 0xa00
 800b156:	42ab      	cmp	r3, r5
 800b158:	d143      	bne.n	800b1e2 <ArtNetNode::HandleRdm()+0xb2>
 800b15a:	f890 3a04 	ldrb.w	r3, [r0, #2564]	; 0xa04
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d03f      	beq.n	800b1e2 <ArtNetNode::HandleRdm()+0xb2>
 800b162:	f8d0 3a20 	ldr.w	r3, [r0, #2592]	; 0xa20
 800b166:	2b01      	cmp	r3, #1
 800b168:	d10c      	bne.n	800b184 <ArtNetNode::HandleRdm()+0x54>
 800b16a:	6980      	ldr	r0, [r0, #24]
 800b16c:	b150      	cbz	r0, 800b184 <ArtNetNode::HandleRdm()+0x54>
 800b16e:	6803      	ldr	r3, [r0, #0]
 800b170:	2100      	movs	r1, #0
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	4798      	blx	r3
 800b176:	f010 0f89 	tst.w	r0, #137	; 0x89
 800b17a:	bf14      	ite	ne
 800b17c:	2301      	movne	r3, #1
 800b17e:	2300      	moveq	r3, #0
 800b180:	f884 3a25 	strb.w	r3, [r4, #2597]	; 0xa25
 800b184:	f894 3a25 	ldrb.w	r3, [r4, #2597]	; 0xa25
 800b188:	b123      	cbz	r3, 800b194 <ArtNetNode::HandleRdm()+0x64>
 800b18a:	6860      	ldr	r0, [r4, #4]
 800b18c:	2100      	movs	r1, #0
 800b18e:	6803      	ldr	r3, [r0, #0]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	4798      	blx	r3
 800b194:	68e0      	ldr	r0, [r4, #12]
 800b196:	f104 07b0 	add.w	r7, r4, #176	; 0xb0
 800b19a:	6803      	ldr	r3, [r0, #0]
 800b19c:	463a      	mov	r2, r7
 800b19e:	2100      	movs	r1, #0
 800b1a0:	69db      	ldr	r3, [r3, #28]
 800b1a2:	f104 0898 	add.w	r8, r4, #152	; 0x98
 800b1a6:	4798      	blx	r3
 800b1a8:	b198      	cbz	r0, 800b1d2 <ArtNetNode::HandleRdm()+0xa2>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 800b1b0:	7886      	ldrb	r6, [r0, #2]
 800b1b2:	18c1      	adds	r1, r0, r3
 800b1b4:	18f2      	adds	r2, r6, r3
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	f7ff fe5a 	bl	800ae70 <memcpy.isra.0>
 800b1bc:	f641 1336 	movw	r3, #6454	; 0x1936
 800b1c0:	4641      	mov	r1, r8
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	7820      	ldrb	r0, [r4, #0]
 800b1c6:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
 800b1ca:	f106 0219 	add.w	r2, r6, #25
 800b1ce:	f004 f8d5 	bl	800f37c <udp_send>
 800b1d2:	f894 3a25 	ldrb.w	r3, [r4, #2597]	; 0xa25
 800b1d6:	b123      	cbz	r3, 800b1e2 <ArtNetNode::HandleRdm()+0xb2>
 800b1d8:	6860      	ldr	r0, [r4, #4]
 800b1da:	2100      	movs	r1, #0
 800b1dc:	6803      	ldr	r3, [r0, #0]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	4798      	blx	r3
 800b1e2:	f894 3a2c 	ldrb.w	r3, [r4, #2604]	; 0xa2c
 800b1e6:	b15b      	cbz	r3, 800b200 <ArtNetNode::HandleRdm()+0xd0>
 800b1e8:	f8b4 3a28 	ldrh.w	r3, [r4, #2600]	; 0xa28
 800b1ec:	42ab      	cmp	r3, r5
 800b1ee:	d107      	bne.n	800b200 <ArtNetNode::HandleRdm()+0xd0>
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 800b1f6:	b002      	add	sp, #8
 800b1f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fc:	f002 b9c2 	b.w	800d584 <artnet::rdm_send(unsigned int, unsigned char const*)>
 800b200:	b002      	add	sp, #8
 800b202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b208 <ArtNetNode::HandleRdmIn()>:
 800b208:	f890 3a2c 	ldrb.w	r3, [r0, #2604]	; 0xa2c
 800b20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b20e:	4604      	mov	r4, r0
 800b210:	f100 0598 	add.w	r5, r0, #152	; 0x98
 800b214:	b393      	cbz	r3, 800b27c <ArtNetNode::HandleRdmIn()+0x74>
 800b216:	68c0      	ldr	r0, [r0, #12]
 800b218:	2100      	movs	r1, #0
 800b21a:	6803      	ldr	r3, [r0, #0]
 800b21c:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	4798      	blx	r3
 800b224:	b350      	cbz	r0, 800b27c <ArtNetNode::HandleRdmIn()+0x74>
 800b226:	4a19      	ldr	r2, [pc, #100]	; (800b28c <ArtNetNode::HandleRdmIn()+0x84>)
 800b228:	f104 0397 	add.w	r3, r4, #151	; 0x97
 800b22c:	f104 019f 	add.w	r1, r4, #159	; 0x9f
 800b230:	428b      	cmp	r3, r1
 800b232:	d125      	bne.n	800b280 <ArtNetNode::HandleRdmIn()+0x78>
 800b234:	f06f 027c 	mvn.w	r2, #124	; 0x7c
 800b238:	2300      	movs	r3, #0
 800b23a:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
 800b23e:	220e      	movs	r2, #14
 800b240:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 800b244:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
 800b248:	f884 20a3 	strb.w	r2, [r4, #163]	; 0xa3
 800b24c:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
 800b250:	2201      	movs	r2, #1
 800b252:	f894 3a2a 	ldrb.w	r3, [r4, #2602]	; 0xa2a
 800b256:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
 800b25a:	f884 30af 	strb.w	r3, [r4, #175]	; 0xaf
 800b25e:	f641 1336 	movw	r3, #6454	; 0x1936
 800b262:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	f884 20ad 	strb.w	r2, [r4, #173]	; 0xad
 800b26c:	4629      	mov	r1, r5
 800b26e:	f240 1217 	movw	r2, #279	; 0x117
 800b272:	f8d4 3a30 	ldr.w	r3, [r4, #2608]	; 0xa30
 800b276:	7820      	ldrb	r0, [r4, #0]
 800b278:	f004 f880 	bl	800f37c <udp_send>
 800b27c:	b003      	add	sp, #12
 800b27e:	bd30      	pop	{r4, r5, pc}
 800b280:	f812 0b01 	ldrb.w	r0, [r2], #1
 800b284:	f803 0f01 	strb.w	r0, [r3, #1]!
 800b288:	e7d2      	b.n	800b230 <ArtNetNode::HandleRdmIn()+0x28>
 800b28a:	bf00      	nop
 800b28c:	08016b41 	stmdaeq	r1, {r0, r6, r8, r9, fp, sp, lr}

0800b290 <ArtNetNode::HandleSync()>:
 800b290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b292:	2301      	movs	r3, #1
 800b294:	4a17      	ldr	r2, [pc, #92]	; (800b2f4 <ArtNetNode::HandleSync()+0x64>)
 800b296:	4604      	mov	r4, r0
 800b298:	6812      	ldr	r2, [r2, #0]
 800b29a:	f880 39f5 	strb.w	r3, [r0, #2549]	; 0x9f5
 800b29e:	f8c0 29ec 	str.w	r2, [r0, #2540]	; 0x9ec
 800b2a2:	f8d0 2a20 	ldr.w	r2, [r0, #2592]	; 0xa20
 800b2a6:	bb1a      	cbnz	r2, 800b2f0 <ArtNetNode::HandleSync()+0x60>
 800b2a8:	f890 2a04 	ldrb.w	r2, [r0, #2564]	; 0xa04
 800b2ac:	b302      	cbz	r2, 800b2f0 <ArtNetNode::HandleSync()+0x60>
 800b2ae:	4d12      	ldr	r5, [pc, #72]	; (800b2f8 <ArtNetNode::HandleSync()+0x68>)
 800b2b0:	6840      	ldr	r0, [r0, #4]
 800b2b2:	682a      	ldr	r2, [r5, #0]
 800b2b4:	4e11      	ldr	r6, [pc, #68]	; (800b2fc <ArtNetNode::HandleSync()+0x6c>)
 800b2b6:	07d2      	lsls	r2, r2, #31
 800b2b8:	bf58      	it	pl
 800b2ba:	602b      	strpl	r3, [r5, #0]
 800b2bc:	6803      	ldr	r3, [r0, #0]
 800b2be:	2100      	movs	r1, #0
 800b2c0:	691f      	ldr	r7, [r3, #16]
 800b2c2:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800b2c6:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800b2ca:	47b8      	blx	r7
 800b2cc:	f894 1a25 	ldrb.w	r1, [r4, #2597]	; 0xa25
 800b2d0:	b931      	cbnz	r1, 800b2e0 <ArtNetNode::HandleSync()+0x50>
 800b2d2:	6860      	ldr	r0, [r4, #4]
 800b2d4:	6803      	ldr	r3, [r0, #0]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	4798      	blx	r3
 800b2da:	2301      	movs	r3, #1
 800b2dc:	f884 3a25 	strb.w	r3, [r4, #2597]	; 0xa25
 800b2e0:	682b      	ldr	r3, [r5, #0]
 800b2e2:	07db      	lsls	r3, r3, #31
 800b2e4:	bf5c      	itt	pl
 800b2e6:	2301      	movpl	r3, #1
 800b2e8:	602b      	strpl	r3, [r5, #0]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f8c6 3600 	str.w	r3, [r6, #1536]	; 0x600
 800b2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	2000a1e4 	andcs	sl, r0, r4, ror #3
 800b2f8:	20000660 	andcs	r0, r0, r0, ror #12
 800b2fc:	20000664 	andcs	r0, r0, r4, ror #12

0800b300 <ArtNetNode::HandleTimeCode()>:
 800b300:	4601      	mov	r1, r0
 800b302:	6880      	ldr	r0, [r0, #8]
 800b304:	31a6      	adds	r1, #166	; 0xa6
 800b306:	6803      	ldr	r3, [r0, #0]
 800b308:	691b      	ldr	r3, [r3, #16]
 800b30a:	4718      	bx	r3

0800b30c <ArtNetNode::HandleTimeSync()>:
 800b30c:	b500      	push	{lr}
 800b30e:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 800b312:	b08b      	sub	sp, #44	; 0x2c
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 800b31a:	f890 20ac 	ldrb.w	r2, [r0, #172]	; 0xac
 800b31e:	9302      	str	r3, [sp, #8]
 800b320:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 800b324:	a901      	add	r1, sp, #4
 800b326:	9303      	str	r3, [sp, #12]
 800b328:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 800b32c:	9304      	str	r3, [sp, #16]
 800b32e:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 800b332:	9305      	str	r3, [sp, #20]
 800b334:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800b338:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b33c:	9306      	str	r3, [sp, #24]
 800b33e:	4b03      	ldr	r3, [pc, #12]	; (800b34c <ArtNetNode::HandleTimeSync()+0x40>)
 800b340:	6818      	ldr	r0, [r3, #0]
 800b342:	f007 fe57 	bl	8012ff4 <Hardware::SetTime(tm const*)>
 800b346:	b00b      	add	sp, #44	; 0x2c
 800b348:	f85d fb04 	ldr.w	pc, [sp], #4
 800b34c:	2000a1c8 	andcs	sl, r0, r8, asr #3

0800b350 <ArtNetNode::Print()>:
 800b350:	b510      	push	{r4, lr}
 800b352:	4604      	mov	r4, r0
 800b354:	b086      	sub	sp, #24
 800b356:	2201      	movs	r2, #1
 800b358:	2104      	movs	r1, #4
 800b35a:	4830      	ldr	r0, [pc, #192]	; (800b41c <ArtNetNode::Print()+0xcc>)
 800b35c:	f008 f954 	bl	8013608 <printf>
 800b360:	4b2f      	ldr	r3, [pc, #188]	; (800b420 <ArtNetNode::Print()+0xd0>)
 800b362:	4830      	ldr	r0, [pc, #192]	; (800b424 <ArtNetNode::Print()+0xd4>)
 800b364:	7819      	ldrb	r1, [r3, #0]
 800b366:	785a      	ldrb	r2, [r3, #1]
 800b368:	f008 f94e 	bl	8013608 <printf>
 800b36c:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800b370:	482d      	ldr	r0, [pc, #180]	; (800b428 <ArtNetNode::Print()+0xd8>)
 800b372:	f008 f949 	bl	8013608 <printf>
 800b376:	482d      	ldr	r0, [pc, #180]	; (800b42c <ArtNetNode::Print()+0xdc>)
 800b378:	f104 014a 	add.w	r1, r4, #74	; 0x4a
 800b37c:	f008 f944 	bl	8013608 <printf>
 800b380:	f894 39fa 	ldrb.w	r3, [r4, #2554]	; 0x9fa
 800b384:	b313      	cbz	r3, 800b3cc <ArtNetNode::Print()+0x7c>
 800b386:	482a      	ldr	r0, [pc, #168]	; (800b430 <ArtNetNode::Print()+0xe0>)
 800b388:	f008 f93e 	bl	8013608 <printf>
 800b38c:	2301      	movs	r3, #1
 800b38e:	2100      	movs	r1, #0
 800b390:	4620      	mov	r0, r4
 800b392:	f10d 0216 	add.w	r2, sp, #22
 800b396:	f7fe fe81 	bl	800a09c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b39a:	b1b8      	cbz	r0, 800b3cc <ArtNetNode::Print()+0x7c>
 800b39c:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	; 0xa18
 800b3a0:	4a24      	ldr	r2, [pc, #144]	; (800b434 <ArtNetNode::Print()+0xe4>)
 800b3a2:	4b25      	ldr	r3, [pc, #148]	; (800b438 <ArtNetNode::Print()+0xe8>)
 800b3a4:	4825      	ldr	r0, [pc, #148]	; (800b43c <ArtNetNode::Print()+0xec>)
 800b3a6:	2900      	cmp	r1, #0
 800b3a8:	bf18      	it	ne
 800b3aa:	4613      	movne	r3, r2
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800b3b2:	f008 f929 	bl	8013608 <printf>
 800b3b6:	f8d4 1a20 	ldr.w	r1, [r4, #2592]	; 0xa20
 800b3ba:	4a21      	ldr	r2, [pc, #132]	; (800b440 <ArtNetNode::Print()+0xf0>)
 800b3bc:	4b21      	ldr	r3, [pc, #132]	; (800b444 <ArtNetNode::Print()+0xf4>)
 800b3be:	4822      	ldr	r0, [pc, #136]	; (800b448 <ArtNetNode::Print()+0xf8>)
 800b3c0:	2900      	cmp	r1, #0
 800b3c2:	bf0c      	ite	eq
 800b3c4:	4611      	moveq	r1, r2
 800b3c6:	4619      	movne	r1, r3
 800b3c8:	f008 f91e 	bl	8013608 <printf>
 800b3cc:	f894 39fb 	ldrb.w	r3, [r4, #2555]	; 0x9fb
 800b3d0:	b313      	cbz	r3, 800b418 <ArtNetNode::Print()+0xc8>
 800b3d2:	481e      	ldr	r0, [pc, #120]	; (800b44c <ArtNetNode::Print()+0xfc>)
 800b3d4:	f008 f918 	bl	8013608 <printf>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	4620      	mov	r0, r4
 800b3dc:	4619      	mov	r1, r3
 800b3de:	f10d 0216 	add.w	r2, sp, #22
 800b3e2:	f7fe fe5b 	bl	800a09c <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b3e6:	b1b8      	cbz	r0, 800b418 <ArtNetNode::Print()+0xc8>
 800b3e8:	f8d4 3a30 	ldr.w	r3, [r4, #2608]	; 0xa30
 800b3ec:	b92b      	cbnz	r3, 800b3fa <ArtNetNode::Print()+0xaa>
 800b3ee:	4b18      	ldr	r3, [pc, #96]	; (800b450 <ArtNetNode::Print()+0x100>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	69da      	ldr	r2, [r3, #28]
 800b3f4:	695b      	ldr	r3, [r3, #20]
 800b3f6:	ea63 0302 	orn	r3, r3, r2
 800b3fa:	0e1a      	lsrs	r2, r3, #24
 800b3fc:	9202      	str	r2, [sp, #8]
 800b3fe:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b402:	9201      	str	r2, [sp, #4]
 800b404:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b408:	9200      	str	r2, [sp, #0]
 800b40a:	2100      	movs	r1, #0
 800b40c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800b410:	4810      	ldr	r0, [pc, #64]	; (800b454 <ArtNetNode::Print()+0x104>)
 800b412:	b2db      	uxtb	r3, r3
 800b414:	f008 f8f8 	bl	8013608 <printf>
 800b418:	b006      	add	sp, #24
 800b41a:	bd10      	pop	{r4, pc}
 800b41c:	08016b5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}
 800b420:	08016d78 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, fp, sp, lr}
 800b424:	08016b6c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, fp, sp, lr}
 800b428:	08016b81 	stmdaeq	r1, {r0, r7, r8, r9, fp, sp, lr}
 800b42c:	08016b93 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, fp, sp, lr}
 800b430:	08016ba5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, fp, sp, lr}
 800b434:	08016b4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, fp, sp, lr}
 800b438:	08016b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, sp, lr}
 800b43c:	08016bae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, fp, sp, lr}
 800b440:	08016b51 	stmdaeq	r1, {r0, r4, r6, r8, r9, fp, sp, lr}
 800b444:	08016b59 	stmdaeq	r1, {r0, r3, r4, r6, r8, r9, fp, sp, lr}
 800b448:	08016bc2 	stmdaeq	r1, {r1, r6, r7, r8, r9, fp, sp, lr}
 800b44c:	08016bc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, fp, sp, lr}
 800b450:	20008aa8 	andcs	r8, r0, r8, lsr #21
 800b454:	08016bd1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, fp, sp, lr}

0800b458 <memcmp>:
 800b458:	4402      	add	r2, r0
 800b45a:	4290      	cmp	r0, r2
 800b45c:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800b460:	d106      	bne.n	800b470 <memcmp+0x18>
 800b462:	2000      	movs	r0, #0
 800b464:	4770      	bx	lr
 800b466:	3001      	adds	r0, #1
 800b468:	4290      	cmp	r0, r2
 800b46a:	d102      	bne.n	800b472 <memcmp+0x1a>
 800b46c:	2000      	movs	r0, #0
 800b46e:	e006      	b.n	800b47e <memcmp+0x26>
 800b470:	b510      	push	{r4, lr}
 800b472:	7803      	ldrb	r3, [r0, #0]
 800b474:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b478:	42a3      	cmp	r3, r4
 800b47a:	d0f4      	beq.n	800b466 <memcmp+0xe>
 800b47c:	1b18      	subs	r0, r3, r4
 800b47e:	bd10      	pop	{r4, pc}

0800b480 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800b480:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b482:	88c6      	ldrh	r6, [r0, #6]
 800b484:	8885      	ldrh	r5, [r0, #4]
 800b486:	42ae      	cmp	r6, r5
 800b488:	d216      	bcs.n	800b4b8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800b48a:	4604      	mov	r4, r0
 800b48c:	6800      	ldr	r0, [r0, #0]
 800b48e:	1bad      	subs	r5, r5, r6
 800b490:	4430      	add	r0, r6
 800b492:	7a26      	ldrb	r6, [r4, #8]
 800b494:	b923      	cbnz	r3, 800b4a0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800b496:	b926      	cbnz	r6, 800b4a2 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800b498:	9200      	str	r2, [sp, #0]
 800b49a:	460b      	mov	r3, r1
 800b49c:	4a09      	ldr	r2, [pc, #36]	; (800b4c4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800b49e:	e003      	b.n	800b4a8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800b4a0:	b166      	cbz	r6, 800b4bc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	9200      	str	r2, [sp, #0]
 800b4a6:	4a08      	ldr	r2, [pc, #32]	; (800b4c8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	f008 f8d5 	bl	8013658 <snprintf>
 800b4ae:	4285      	cmp	r5, r0
 800b4b0:	bfa2      	ittt	ge
 800b4b2:	88e3      	ldrhge	r3, [r4, #6]
 800b4b4:	181b      	addge	r3, r3, r0
 800b4b6:	80e3      	strhge	r3, [r4, #6]
 800b4b8:	b002      	add	sp, #8
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
 800b4bc:	9200      	str	r2, [sp, #0]
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4a02      	ldr	r2, [pc, #8]	; (800b4cc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800b4c2:	e7f1      	b.n	800b4a8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800b4c4:	08015ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, ip, lr}
 800b4c8:	08015c9c 	stmdaeq	r1, {r2, r3, r4, r7, sl, fp, ip, lr}
 800b4cc:	08015ca6 	stmdaeq	r1, {r1, r2, r5, r7, sl, fp, ip, lr}

0800b4d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800b4d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4d2:	88c6      	ldrh	r6, [r0, #6]
 800b4d4:	8885      	ldrh	r5, [r0, #4]
 800b4d6:	42ae      	cmp	r6, r5
 800b4d8:	d216      	bcs.n	800b508 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800b4da:	4604      	mov	r4, r0
 800b4dc:	6800      	ldr	r0, [r0, #0]
 800b4de:	1bad      	subs	r5, r5, r6
 800b4e0:	4430      	add	r0, r6
 800b4e2:	7a26      	ldrb	r6, [r4, #8]
 800b4e4:	b923      	cbnz	r3, 800b4f0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800b4e6:	b926      	cbnz	r6, 800b4f2 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800b4e8:	9200      	str	r2, [sp, #0]
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4a09      	ldr	r2, [pc, #36]	; (800b514 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800b4ee:	e003      	b.n	800b4f8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800b4f0:	b166      	cbz	r6, 800b50c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	9200      	str	r2, [sp, #0]
 800b4f6:	4a08      	ldr	r2, [pc, #32]	; (800b518 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	f008 f8ad 	bl	8013658 <snprintf>
 800b4fe:	4285      	cmp	r5, r0
 800b500:	bfa2      	ittt	ge
 800b502:	88e3      	ldrhge	r3, [r4, #6]
 800b504:	181b      	addge	r3, r3, r0
 800b506:	80e3      	strhge	r3, [r4, #6]
 800b508:	b002      	add	sp, #8
 800b50a:	bd70      	pop	{r4, r5, r6, pc}
 800b50c:	9200      	str	r2, [sp, #0]
 800b50e:	460b      	mov	r3, r1
 800b510:	4a02      	ldr	r2, [pc, #8]	; (800b51c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800b512:	e7f1      	b.n	800b4f8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800b514:	08015cb8 	stmdaeq	r1, {r3, r4, r5, r7, sl, fp, ip, lr}
 800b518:	08015cad 	stmdaeq	r1, {r0, r2, r3, r5, r7, sl, fp, ip, lr}
 800b51c:	08015cb9 	stmdaeq	r1, {r0, r3, r4, r5, r7, sl, fp, ip, lr}

0800b520 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800b520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b522:	460b      	mov	r3, r1
 800b524:	8885      	ldrh	r5, [r0, #4]
 800b526:	88c1      	ldrh	r1, [r0, #6]
 800b528:	42a9      	cmp	r1, r5
 800b52a:	d214      	bcs.n	800b556 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800b52c:	4604      	mov	r4, r0
 800b52e:	6800      	ldr	r0, [r0, #0]
 800b530:	1a6d      	subs	r5, r5, r1
 800b532:	4408      	add	r0, r1
 800b534:	7a21      	ldrb	r1, [r4, #8]
 800b536:	b91a      	cbnz	r2, 800b540 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800b538:	b919      	cbnz	r1, 800b542 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800b53a:	4a0a      	ldr	r2, [pc, #40]	; (800b564 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800b53c:	9100      	str	r1, [sp, #0]
 800b53e:	e002      	b.n	800b546 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b540:	b159      	cbz	r1, 800b55a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800b542:	9200      	str	r2, [sp, #0]
 800b544:	4a08      	ldr	r2, [pc, #32]	; (800b568 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800b546:	4629      	mov	r1, r5
 800b548:	f008 f886 	bl	8013658 <snprintf>
 800b54c:	4285      	cmp	r5, r0
 800b54e:	bfa2      	ittt	ge
 800b550:	88e3      	ldrhge	r3, [r4, #6]
 800b552:	181b      	addge	r3, r3, r0
 800b554:	80e3      	strhge	r3, [r4, #6]
 800b556:	b003      	add	sp, #12
 800b558:	bd30      	pop	{r4, r5, pc}
 800b55a:	2201      	movs	r2, #1
 800b55c:	9200      	str	r2, [sp, #0]
 800b55e:	4a03      	ldr	r2, [pc, #12]	; (800b56c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800b560:	e7f1      	b.n	800b546 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b562:	bf00      	nop
 800b564:	08015ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, ip, lr}
 800b568:	08015c9c 	stmdaeq	r1, {r2, r3, r4, r7, sl, fp, ip, lr}
 800b56c:	08015ca6 	stmdaeq	r1, {r1, r2, r5, r7, sl, fp, ip, lr}

0800b570 <strncpy.isra.0>:
 800b570:	1e4b      	subs	r3, r1, #1
 800b572:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b576:	b909      	cbnz	r1, 800b57c <strncpy.isra.0+0xc>
 800b578:	f007 be2c 	b.w	80131d4 <memset>
 800b57c:	3a01      	subs	r2, #1
 800b57e:	f800 1b01 	strb.w	r1, [r0], #1
 800b582:	d1f6      	bne.n	800b572 <strncpy.isra.0+0x2>
 800b584:	4770      	bx	lr
	...

0800b588 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800b588:	b510      	push	{r4, lr}
 800b58a:	2287      	movs	r2, #135	; 0x87
 800b58c:	4604      	mov	r4, r0
 800b58e:	f840 1b04 	str.w	r1, [r0], #4
 800b592:	2100      	movs	r1, #0
 800b594:	f007 fe1e 	bl	80131d4 <memset>
 800b598:	f240 3302 	movw	r3, #770	; 0x302
 800b59c:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800b5a0:	2304      	movs	r3, #4
 800b5a2:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800b5a6:	2355      	movs	r3, #85	; 0x55
 800b5a8:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800b5b4:	4b03      	ldr	r3, [pc, #12]	; (800b5c4 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x3c>)
 800b5b6:	f884 206b 	strb.w	r2, [r4, #107]	; 0x6b
 800b5ba:	6819      	ldr	r1, [r3, #0]
 800b5bc:	b901      	cbnz	r1, 800b5c0 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x38>
 800b5be:	601a      	str	r2, [r3, #0]
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	bd10      	pop	{r4, pc}
 800b5c4:	20000c78 	andcs	r0, r0, r8, ror ip

0800b5c8 <ArtNetParams::Load()>:
 800b5c8:	b508      	push	{r3, lr}
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	4601      	mov	r1, r0
 800b5ce:	6043      	str	r3, [r0, #4]
 800b5d0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800b5d4:	6800      	ldr	r0, [r0, #0]
 800b5d6:	b120      	cbz	r0, 800b5e2 <ArtNetParams::Load()+0x1a>
 800b5d8:	6803      	ldr	r3, [r0, #0]
 800b5da:	3104      	adds	r1, #4
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	4798      	blx	r3
 800b5e0:	2001      	movs	r0, #1
 800b5e2:	bd08      	pop	{r3, pc}

0800b5e4 <ArtNetParams::Load(char const*, unsigned int)>:
 800b5e4:	6803      	ldr	r3, [r0, #0]
 800b5e6:	b1e3      	cbz	r3, 800b622 <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5ec:	460d      	mov	r5, r1
 800b5ee:	4616      	mov	r6, r2
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	6043      	str	r3, [r0, #4]
 800b5f4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	490a      	ldr	r1, [pc, #40]	; (800b624 <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800b5fc:	4668      	mov	r0, sp
 800b5fe:	f007 f80f 	bl	8012620 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800b602:	4632      	mov	r2, r6
 800b604:	4629      	mov	r1, r5
 800b606:	4668      	mov	r0, sp
 800b608:	f007 f80e 	bl	8012628 <ReadConfigFile::Read(char const*, unsigned int)>
 800b60c:	4621      	mov	r1, r4
 800b60e:	f851 0b04 	ldr.w	r0, [r1], #4
 800b612:	6803      	ldr	r3, [r0, #0]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	4798      	blx	r3
 800b618:	4668      	mov	r0, sp
 800b61a:	f007 f804 	bl	8012626 <ReadConfigFile::~ReadConfigFile()>
 800b61e:	b002      	add	sp, #8
 800b620:	bd70      	pop	{r4, r5, r6, pc}
 800b622:	4770      	bx	lr
 800b624:	0800ba09 	stmdaeq	r0, {r0, r3, r9, fp, ip, sp, pc}

0800b628 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800b628:	6843      	ldr	r3, [r0, #4]
 800b62a:	b111      	cbz	r1, 800b632 <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800b62c:	4313      	orrs	r3, r2
 800b62e:	6043      	str	r3, [r0, #4]
 800b630:	4770      	bx	lr
 800b632:	ea23 0302 	bic.w	r3, r3, r2
 800b636:	e7fa      	b.n	800b62e <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800b638 <ArtNetParams::callbackFunction(char const*)>:
 800b638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63c:	460e      	mov	r6, r1
 800b63e:	b0a7      	sub	sp, #156	; 0x9c
 800b640:	4604      	mov	r4, r0
 800b642:	499d      	ldr	r1, [pc, #628]	; (800b8b8 <ArtNetParams::callbackFunction(char const*)+0x280>)
 800b644:	4630      	mov	r0, r6
 800b646:	f10d 020f 	add.w	r2, sp, #15
 800b64a:	f007 f899 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b64e:	b940      	cbnz	r0, 800b662 <ArtNetParams::callbackFunction(char const*)+0x2a>
 800b650:	2220      	movs	r2, #32
 800b652:	4620      	mov	r0, r4
 800b654:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800b658:	b027      	add	sp, #156	; 0x9c
 800b65a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65e:	f7ff bfe3 	b.w	800b628 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800b662:	2708      	movs	r7, #8
 800b664:	4630      	mov	r0, r6
 800b666:	4995      	ldr	r1, [pc, #596]	; (800b8bc <ArtNetParams::callbackFunction(char const*)+0x284>)
 800b668:	ab05      	add	r3, sp, #20
 800b66a:	aa06      	add	r2, sp, #24
 800b66c:	9705      	str	r7, [sp, #20]
 800b66e:	f007 f80f 	bl	8012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b672:	bb40      	cbnz	r0, 800b6c6 <ArtNetParams::callbackFunction(char const*)+0x8e>
 800b674:	2204      	movs	r2, #4
 800b676:	4992      	ldr	r1, [pc, #584]	; (800b8c0 <ArtNetParams::callbackFunction(char const*)+0x288>)
 800b678:	a806      	add	r0, sp, #24
 800b67a:	f7ff feed 	bl	800b458 <memcmp>
 800b67e:	6865      	ldr	r5, [r4, #4]
 800b680:	b188      	cbz	r0, 800b6a6 <ArtNetParams::callbackFunction(char const*)+0x6e>
 800b682:	2203      	movs	r2, #3
 800b684:	498f      	ldr	r1, [pc, #572]	; (800b8c4 <ArtNetParams::callbackFunction(char const*)+0x28c>)
 800b686:	a806      	add	r0, sp, #24
 800b688:	f7ff fee6 	bl	800b458 <memcmp>
 800b68c:	b198      	cbz	r0, 800b6b6 <ArtNetParams::callbackFunction(char const*)+0x7e>
 800b68e:	2202      	movs	r2, #2
 800b690:	498d      	ldr	r1, [pc, #564]	; (800b8c8 <ArtNetParams::callbackFunction(char const*)+0x290>)
 800b692:	a806      	add	r0, sp, #24
 800b694:	f7ff fee0 	bl	800b458 <memcmp>
 800b698:	b188      	cbz	r0, 800b6be <ArtNetParams::callbackFunction(char const*)+0x86>
 800b69a:	463a      	mov	r2, r7
 800b69c:	498b      	ldr	r1, [pc, #556]	; (800b8cc <ArtNetParams::callbackFunction(char const*)+0x294>)
 800b69e:	a806      	add	r0, sp, #24
 800b6a0:	f7ff feda 	bl	800b458 <memcmp>
 800b6a4:	b168      	cbz	r0, 800b6c2 <ArtNetParams::callbackFunction(char const*)+0x8a>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	f025 0510 	bic.w	r5, r5, #16
 800b6ac:	6065      	str	r5, [r4, #4]
 800b6ae:	72a3      	strb	r3, [r4, #10]
 800b6b0:	b027      	add	sp, #156	; 0x9c
 800b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	f045 0510 	orr.w	r5, r5, #16
 800b6bc:	e7f6      	b.n	800b6ac <ArtNetParams::callbackFunction(char const*)+0x74>
 800b6be:	2302      	movs	r3, #2
 800b6c0:	e7fa      	b.n	800b6b8 <ArtNetParams::callbackFunction(char const*)+0x80>
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	e7f8      	b.n	800b6b8 <ArtNetParams::callbackFunction(char const*)+0x80>
 800b6c6:	2311      	movs	r3, #17
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	9305      	str	r3, [sp, #20]
 800b6cc:	4980      	ldr	r1, [pc, #512]	; (800b8d0 <ArtNetParams::callbackFunction(char const*)+0x298>)
 800b6ce:	ab05      	add	r3, sp, #20
 800b6d0:	f104 0210 	add.w	r2, r4, #16
 800b6d4:	f006 ffdc 	bl	8012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b6d8:	b938      	cbnz	r0, 800b6ea <ArtNetParams::callbackFunction(char const*)+0xb2>
 800b6da:	9b05      	ldr	r3, [sp, #20]
 800b6dc:	4423      	add	r3, r4
 800b6de:	7418      	strb	r0, [r3, #16]
 800b6e0:	6863      	ldr	r3, [r4, #4]
 800b6e2:	f043 0302 	orr.w	r3, r3, #2
 800b6e6:	6063      	str	r3, [r4, #4]
 800b6e8:	e7e2      	b.n	800b6b0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b6ea:	233f      	movs	r3, #63	; 0x3f
 800b6ec:	4630      	mov	r0, r6
 800b6ee:	9305      	str	r3, [sp, #20]
 800b6f0:	4978      	ldr	r1, [pc, #480]	; (800b8d4 <ArtNetParams::callbackFunction(char const*)+0x29c>)
 800b6f2:	ab05      	add	r3, sp, #20
 800b6f4:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800b6f8:	f006 ffca 	bl	8012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b6fc:	b938      	cbnz	r0, 800b70e <ArtNetParams::callbackFunction(char const*)+0xd6>
 800b6fe:	9b05      	ldr	r3, [sp, #20]
 800b700:	4423      	add	r3, r4
 800b702:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800b706:	6863      	ldr	r3, [r4, #4]
 800b708:	f043 0301 	orr.w	r3, r3, #1
 800b70c:	e7eb      	b.n	800b6e6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800b70e:	4630      	mov	r0, r6
 800b710:	4971      	ldr	r1, [pc, #452]	; (800b8d8 <ArtNetParams::callbackFunction(char const*)+0x2a0>)
 800b712:	f10d 020f 	add.w	r2, sp, #15
 800b716:	f007 f833 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b71a:	b950      	cbnz	r0, 800b732 <ArtNetParams::callbackFunction(char const*)+0xfa>
 800b71c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b720:	6863      	ldr	r3, [r4, #4]
 800b722:	7222      	strb	r2, [r4, #8]
 800b724:	b112      	cbz	r2, 800b72c <ArtNetParams::callbackFunction(char const*)+0xf4>
 800b726:	f043 0304 	orr.w	r3, r3, #4
 800b72a:	e7dc      	b.n	800b6e6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800b72c:	f023 0304 	bic.w	r3, r3, #4
 800b730:	e7d9      	b.n	800b6e6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800b732:	4630      	mov	r0, r6
 800b734:	4969      	ldr	r1, [pc, #420]	; (800b8dc <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800b736:	f10d 020f 	add.w	r2, sp, #15
 800b73a:	f007 f821 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b73e:	b950      	cbnz	r0, 800b756 <ArtNetParams::callbackFunction(char const*)+0x11e>
 800b740:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b744:	6863      	ldr	r3, [r4, #4]
 800b746:	7262      	strb	r2, [r4, #9]
 800b748:	b112      	cbz	r2, 800b750 <ArtNetParams::callbackFunction(char const*)+0x118>
 800b74a:	f043 0308 	orr.w	r3, r3, #8
 800b74e:	e7ca      	b.n	800b6e6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800b750:	f023 0308 	bic.w	r3, r3, #8
 800b754:	e7c7      	b.n	800b6e6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800b756:	2500      	movs	r5, #0
 800b758:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800b8e0 <ArtNetParams::callbackFunction(char const*)+0x2a8>
 800b75c:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800b8e4 <ArtNetParams::callbackFunction(char const*)+0x2ac>
 800b760:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b8e8 <ArtNetParams::callbackFunction(char const*)+0x2b0>
 800b764:	4649      	mov	r1, r9
 800b766:	4630      	mov	r0, r6
 800b768:	f10d 020f 	add.w	r2, sp, #15
 800b76c:	f007 f808 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b770:	b9a8      	cbnz	r0, 800b79e <ArtNetParams::callbackFunction(char const*)+0x166>
 800b772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b776:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800b77a:	6862      	ldr	r2, [r4, #4]
 800b77c:	280f      	cmp	r0, #15
 800b77e:	fa03 f305 	lsl.w	r3, r3, r5
 800b782:	eb04 0105 	add.w	r1, r4, r5
 800b786:	d803      	bhi.n	800b790 <ArtNetParams::callbackFunction(char const*)+0x158>
 800b788:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800b78c:	4313      	orrs	r3, r2
 800b78e:	e7aa      	b.n	800b6e6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800b790:	3501      	adds	r5, #1
 800b792:	ea22 0203 	bic.w	r2, r2, r3
 800b796:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800b79a:	6062      	str	r2, [r4, #4]
 800b79c:	e788      	b.n	800b6b0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b79e:	2712      	movs	r7, #18
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	436f      	muls	r7, r5
 800b7a4:	4951      	ldr	r1, [pc, #324]	; (800b8ec <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800b7a6:	9305      	str	r3, [sp, #20]
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	ab05      	add	r3, sp, #20
 800b7ac:	aa06      	add	r2, sp, #24
 800b7ae:	4439      	add	r1, r7
 800b7b0:	f006 ff6e 	bl	8012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b7b4:	bb00      	cbnz	r0, 800b7f8 <ArtNetParams::callbackFunction(char const*)+0x1c0>
 800b7b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b7ba:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800b7be:	40aa      	lsls	r2, r5
 800b7c0:	f041 0120 	orr.w	r1, r1, #32
 800b7c4:	296c      	cmp	r1, #108	; 0x6c
 800b7c6:	6863      	ldr	r3, [r4, #4]
 800b7c8:	4425      	add	r5, r4
 800b7ca:	d10f      	bne.n	800b7ec <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800b7cc:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800b7d0:	f041 0120 	orr.w	r1, r1, #32
 800b7d4:	2974      	cmp	r1, #116	; 0x74
 800b7d6:	d109      	bne.n	800b7ec <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800b7d8:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800b7dc:	f041 0120 	orr.w	r1, r1, #32
 800b7e0:	2970      	cmp	r1, #112	; 0x70
 800b7e2:	d103      	bne.n	800b7ec <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800b7e4:	2101      	movs	r1, #1
 800b7e6:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800b7ea:	e7cf      	b.n	800b78c <ArtNetParams::callbackFunction(char const*)+0x154>
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800b7f2:	ea23 0302 	bic.w	r3, r3, r2
 800b7f6:	e776      	b.n	800b6e6 <ArtNetParams::callbackFunction(char const*)+0xae>
 800b7f8:	f04f 0a04 	mov.w	sl, #4
 800b7fc:	493c      	ldr	r1, [pc, #240]	; (800b8f0 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800b7fe:	4630      	mov	r0, r6
 800b800:	ab05      	add	r3, sp, #20
 800b802:	aa06      	add	r2, sp, #24
 800b804:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800b808:	f8cd a014 	str.w	sl, [sp, #20]
 800b80c:	f006 ff40 	bl	8012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b810:	b9a0      	cbnz	r0, 800b83c <ArtNetParams::callbackFunction(char const*)+0x204>
 800b812:	4652      	mov	r2, sl
 800b814:	9001      	str	r0, [sp, #4]
 800b816:	4937      	ldr	r1, [pc, #220]	; (800b8f4 <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800b818:	a806      	add	r0, sp, #24
 800b81a:	f7ff fe1d 	bl	800b458 <memcmp>
 800b81e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b822:	9b01      	ldr	r3, [sp, #4]
 800b824:	40aa      	lsls	r2, r5
 800b826:	4425      	add	r5, r4
 800b828:	b920      	cbnz	r0, 800b834 <ArtNetParams::callbackFunction(char const*)+0x1fc>
 800b82a:	2301      	movs	r3, #1
 800b82c:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800b830:	6863      	ldr	r3, [r4, #4]
 800b832:	e7ab      	b.n	800b78c <ArtNetParams::callbackFunction(char const*)+0x154>
 800b834:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800b838:	6863      	ldr	r3, [r4, #4]
 800b83a:	e7da      	b.n	800b7f2 <ArtNetParams::callbackFunction(char const*)+0x1ba>
 800b83c:	2307      	movs	r3, #7
 800b83e:	4630      	mov	r0, r6
 800b840:	9305      	str	r3, [sp, #20]
 800b842:	aa06      	add	r2, sp, #24
 800b844:	ab05      	add	r3, sp, #20
 800b846:	eb0b 0107 	add.w	r1, fp, r7
 800b84a:	f006 ff21 	bl	8012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d17d      	bne.n	800b94e <ArtNetParams::callbackFunction(char const*)+0x316>
 800b852:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800b856:	f043 0320 	orr.w	r3, r3, #32
 800b85a:	2b69      	cmp	r3, #105	; 0x69
 800b85c:	d14c      	bne.n	800b8f8 <ArtNetParams::callbackFunction(char const*)+0x2c0>
 800b85e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b862:	f043 0320 	orr.w	r3, r3, #32
 800b866:	2b6e      	cmp	r3, #110	; 0x6e
 800b868:	d16f      	bne.n	800b94a <ArtNetParams::callbackFunction(char const*)+0x312>
 800b86a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800b86e:	f043 0320 	orr.w	r3, r3, #32
 800b872:	2b70      	cmp	r3, #112	; 0x70
 800b874:	d169      	bne.n	800b94a <ArtNetParams::callbackFunction(char const*)+0x312>
 800b876:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b87a:	f043 0320 	orr.w	r3, r3, #32
 800b87e:	2b75      	cmp	r3, #117	; 0x75
 800b880:	d163      	bne.n	800b94a <ArtNetParams::callbackFunction(char const*)+0x312>
 800b882:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b886:	f043 0320 	orr.w	r3, r3, #32
 800b88a:	3b74      	subs	r3, #116	; 0x74
 800b88c:	bf18      	it	ne
 800b88e:	2301      	movne	r3, #1
 800b890:	2103      	movs	r1, #3
 800b892:	f8b4 2079 	ldrh.w	r2, [r4, #121]	; 0x79
 800b896:	006d      	lsls	r5, r5, #1
 800b898:	40a9      	lsls	r1, r5
 800b89a:	ea22 0201 	bic.w	r2, r2, r1
 800b89e:	b143      	cbz	r3, 800b8b2 <ArtNetParams::callbackFunction(char const*)+0x27a>
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	bf15      	itete	ne
 800b8a4:	2301      	movne	r3, #1
 800b8a6:	40ab      	lsleq	r3, r5
 800b8a8:	fa03 f505 	lslne.w	r5, r3, r5
 800b8ac:	431a      	orreq	r2, r3
 800b8ae:	bf18      	it	ne
 800b8b0:	432a      	orrne	r2, r5
 800b8b2:	f8a4 2079 	strh.w	r2, [r4, #121]	; 0x79
 800b8b6:	e6fb      	b.n	800b6b0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b8b8:	08016c48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr}
 800b8bc:	0801775b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, sl, ip, sp, lr}
 800b8c0:	08016bf0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, fp, sp, lr}
 800b8c4:	08016bf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, fp, sp, lr}
 800b8c8:	08015e42 	stmdaeq	r1, {r1, r6, r9, sl, fp, ip, lr}
 800b8cc:	08016bf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, fp, sp, lr}
 800b8d0:	08016cab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sl, fp, sp, lr}
 800b8d4:	08016ca1 	stmdaeq	r1, {r0, r5, r7, sl, fp, sp, lr}
 800b8d8:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 800b8dc:	08016d62 	stmdaeq	r1, {r1, r5, r6, r8, sl, fp, sp, lr}
 800b8e0:	080176ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, sl, ip, sp, lr}
 800b8e4:	08016cb6 	stmdaeq	r1, {r1, r2, r4, r5, r7, sl, fp, sp, lr}
 800b8e8:	0801776d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}
 800b8ec:	080176eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, sl, ip, sp, lr}
 800b8f0:	08016c61 	stmdaeq	r1, {r0, r5, r6, sl, fp, sp, lr}
 800b8f4:	08016c02 	stmdaeq	r1, {r1, sl, fp, sp, lr}
 800b8f8:	2b64      	cmp	r3, #100	; 0x64
 800b8fa:	d126      	bne.n	800b94a <ArtNetParams::callbackFunction(char const*)+0x312>
 800b8fc:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b900:	f043 0320 	orr.w	r3, r3, #32
 800b904:	2b69      	cmp	r3, #105	; 0x69
 800b906:	d120      	bne.n	800b94a <ArtNetParams::callbackFunction(char const*)+0x312>
 800b908:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800b90c:	f043 0320 	orr.w	r3, r3, #32
 800b910:	2b73      	cmp	r3, #115	; 0x73
 800b912:	d11a      	bne.n	800b94a <ArtNetParams::callbackFunction(char const*)+0x312>
 800b914:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b918:	f043 0320 	orr.w	r3, r3, #32
 800b91c:	2b61      	cmp	r3, #97	; 0x61
 800b91e:	d114      	bne.n	800b94a <ArtNetParams::callbackFunction(char const*)+0x312>
 800b920:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b924:	f043 0320 	orr.w	r3, r3, #32
 800b928:	2b62      	cmp	r3, #98	; 0x62
 800b92a:	d10e      	bne.n	800b94a <ArtNetParams::callbackFunction(char const*)+0x312>
 800b92c:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800b930:	f043 0320 	orr.w	r3, r3, #32
 800b934:	2b6c      	cmp	r3, #108	; 0x6c
 800b936:	d108      	bne.n	800b94a <ArtNetParams::callbackFunction(char const*)+0x312>
 800b938:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800b93c:	f043 0320 	orr.w	r3, r3, #32
 800b940:	2b65      	cmp	r3, #101	; 0x65
 800b942:	bf14      	ite	ne
 800b944:	2301      	movne	r3, #1
 800b946:	2302      	moveq	r3, #2
 800b948:	e7a2      	b.n	800b890 <ArtNetParams::callbackFunction(char const*)+0x258>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e7a0      	b.n	800b890 <ArtNetParams::callbackFunction(char const*)+0x258>
 800b94e:	2118      	movs	r1, #24
 800b950:	4b2a      	ldr	r3, [pc, #168]	; (800b9fc <ArtNetParams::callbackFunction(char const*)+0x3c4>)
 800b952:	4630      	mov	r0, r6
 800b954:	fb01 3105 	mla	r1, r1, r5, r3
 800b958:	aa04      	add	r2, sp, #16
 800b95a:	f006 feb2 	bl	80126c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800b95e:	b998      	cbnz	r0, 800b988 <ArtNetParams::callbackFunction(char const*)+0x350>
 800b960:	9904      	ldr	r1, [sp, #16]
 800b962:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b966:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800b96a:	2301      	movs	r3, #1
 800b96c:	40ab      	lsls	r3, r5
 800b96e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800b972:	b29b      	uxth	r3, r3
 800b974:	b119      	cbz	r1, 800b97e <ArtNetParams::callbackFunction(char const*)+0x346>
 800b976:	4313      	orrs	r3, r2
 800b978:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800b97c:	e698      	b.n	800b6b0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b97e:	ea22 0203 	bic.w	r2, r2, r3
 800b982:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800b986:	e693      	b.n	800b6b0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b988:	4641      	mov	r1, r8
 800b98a:	4630      	mov	r0, r6
 800b98c:	f10d 020f 	add.w	r2, sp, #15
 800b990:	f006 fef6 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b994:	b998      	cbnz	r0, 800b9be <ArtNetParams::callbackFunction(char const*)+0x386>
 800b996:	2201      	movs	r2, #1
 800b998:	f105 0308 	add.w	r3, r5, #8
 800b99c:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a0:	40aa      	lsls	r2, r5
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	89a2      	ldrh	r2, [r4, #12]
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	ea22 0103 	bic.w	r1, r2, r3
 800b9ac:	81a1      	strh	r1, [r4, #12]
 800b9ae:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800b9b2:	2900      	cmp	r1, #0
 800b9b4:	f43f ae7c 	beq.w	800b6b0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b9b8:	431a      	orrs	r2, r3
 800b9ba:	81a2      	strh	r2, [r4, #12]
 800b9bc:	e678      	b.n	800b6b0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b9be:	3501      	adds	r5, #1
 800b9c0:	2d04      	cmp	r5, #4
 800b9c2:	f109 0910 	add.w	r9, r9, #16
 800b9c6:	f108 0812 	add.w	r8, r8, #18
 800b9ca:	f47f aecb 	bne.w	800b764 <ArtNetParams::callbackFunction(char const*)+0x12c>
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	490b      	ldr	r1, [pc, #44]	; (800ba00 <ArtNetParams::callbackFunction(char const*)+0x3c8>)
 800b9d2:	f10d 020f 	add.w	r2, sp, #15
 800b9d6:	f006 fed3 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b9da:	b910      	cbnz	r0, 800b9e2 <ArtNetParams::callbackFunction(char const*)+0x3aa>
 800b9dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b9e0:	e637      	b.n	800b652 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	4907      	ldr	r1, [pc, #28]	; (800ba04 <ArtNetParams::callbackFunction(char const*)+0x3cc>)
 800b9e6:	f10d 020f 	add.w	r2, sp, #15
 800b9ea:	f006 fec9 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f47f ae5e 	bne.w	800b6b0 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b9f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b9f8:	e62b      	b.n	800b652 <ArtNetParams::callbackFunction(char const*)+0x1a>
 800b9fa:	bf00      	nop
 800b9fc:	08016cfe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, sl, fp, sp, lr}
 800ba00:	08016c53 	stmdaeq	r1, {r0, r1, r4, r6, sl, fp, sp, lr}
 800ba04:	08017745 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, ip, sp, lr}

0800ba08 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800ba08:	f7ff be16 	b.w	800b638 <ArtNetParams::callbackFunction(char const*)>

0800ba0c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800ba0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba10:	4604      	mov	r4, r0
 800ba12:	4615      	mov	r5, r2
 800ba14:	461e      	mov	r6, r3
 800ba16:	b085      	sub	sp, #20
 800ba18:	3004      	adds	r0, #4
 800ba1a:	2900      	cmp	r1, #0
 800ba1c:	f000 80a4 	beq.w	800bb68 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x15c>
 800ba20:	2287      	movs	r2, #135	; 0x87
 800ba22:	f007 fbc0 	bl	80131a6 <memmove>
 800ba26:	4633      	mov	r3, r6
 800ba28:	462a      	mov	r2, r5
 800ba2a:	4993      	ldr	r1, [pc, #588]	; (800bc78 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x26c>)
 800ba2c:	a801      	add	r0, sp, #4
 800ba2e:	f006 fd57 	bl	80124e0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800ba32:	6863      	ldr	r3, [r4, #4]
 800ba34:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800ba38:	f013 0501 	ands.w	r5, r3, #1
 800ba3c:	d108      	bne.n	800ba50 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x44>
 800ba3e:	4b8f      	ldr	r3, [pc, #572]	; (800bc7c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800ba40:	223f      	movs	r2, #63	; 0x3f
 800ba42:	6819      	ldr	r1, [r3, #0]
 800ba44:	4630      	mov	r0, r6
 800ba46:	314a      	adds	r1, #74	; 0x4a
 800ba48:	f7ff fd92 	bl	800b570 <strncpy.isra.0>
 800ba4c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800ba50:	6863      	ldr	r3, [r4, #4]
 800ba52:	4632      	mov	r2, r6
 800ba54:	f003 0301 	and.w	r3, r3, #1
 800ba58:	4989      	ldr	r1, [pc, #548]	; (800bc80 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800ba5a:	a801      	add	r0, sp, #4
 800ba5c:	f7ff fd38 	bl	800b4d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ba60:	6863      	ldr	r3, [r4, #4]
 800ba62:	f104 0610 	add.w	r6, r4, #16
 800ba66:	f013 0502 	ands.w	r5, r3, #2
 800ba6a:	d108      	bne.n	800ba7e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x72>
 800ba6c:	4b83      	ldr	r3, [pc, #524]	; (800bc7c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800ba6e:	2211      	movs	r2, #17
 800ba70:	6819      	ldr	r1, [r3, #0]
 800ba72:	4630      	mov	r0, r6
 800ba74:	3138      	adds	r1, #56	; 0x38
 800ba76:	f7ff fd7b 	bl	800b570 <strncpy.isra.0>
 800ba7a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800ba7e:	6863      	ldr	r3, [r4, #4]
 800ba80:	4632      	mov	r2, r6
 800ba82:	4980      	ldr	r1, [pc, #512]	; (800bc84 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800ba84:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ba88:	a801      	add	r0, sp, #4
 800ba8a:	f7ff fd21 	bl	800b4d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ba8e:	6863      	ldr	r3, [r4, #4]
 800ba90:	7a22      	ldrb	r2, [r4, #8]
 800ba92:	497d      	ldr	r1, [pc, #500]	; (800bc88 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800ba94:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ba98:	a801      	add	r0, sp, #4
 800ba9a:	f7ff fcf1 	bl	800b480 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800ba9e:	6863      	ldr	r3, [r4, #4]
 800baa0:	7a62      	ldrb	r2, [r4, #9]
 800baa2:	497a      	ldr	r1, [pc, #488]	; (800bc8c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800baa4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800baa8:	a801      	add	r0, sp, #4
 800baaa:	f7ff fce9 	bl	800b480 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800baae:	6862      	ldr	r2, [r4, #4]
 800bab0:	4977      	ldr	r1, [pc, #476]	; (800bc90 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800bab2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800bab6:	a801      	add	r0, sp, #4
 800bab8:	f7ff fd32 	bl	800b520 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800babc:	2500      	movs	r5, #0
 800babe:	4f75      	ldr	r7, [pc, #468]	; (800bc94 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800bac0:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800bc98 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>
 800bac4:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 800bc9c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x290>
 800bac8:	f104 086a 	add.w	r8, r4, #106	; 0x6a
 800bacc:	f8d9 2000 	ldr.w	r2, [r9]
 800bad0:	6863      	ldr	r3, [r4, #4]
 800bad2:	42aa      	cmp	r2, r5
 800bad4:	d84f      	bhi.n	800bb76 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x16a>
 800bad6:	7aa1      	ldrb	r1, [r4, #10]
 800bad8:	4a71      	ldr	r2, [pc, #452]	; (800bca0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800bada:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bade:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bae2:	a801      	add	r0, sp, #4
 800bae4:	496f      	ldr	r1, [pc, #444]	; (800bca4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800bae6:	f7ff fcf3 	bl	800b4d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800baea:	496f      	ldr	r1, [pc, #444]	; (800bca8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800baec:	a801      	add	r0, sp, #4
 800baee:	f006 fd7d 	bl	80125ec <PropertiesBuilder::AddComment(char const*)>
 800baf2:	2500      	movs	r5, #0
 800baf4:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 800baf8:	4e6c      	ldr	r6, [pc, #432]	; (800bcac <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800bafa:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 800bcb0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>
 800bafe:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800bcb4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>
 800bb02:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800bb06:	f8d9 3000 	ldr.w	r3, [r9]
 800bb0a:	42ab      	cmp	r3, r5
 800bb0c:	6863      	ldr	r3, [r4, #4]
 800bb0e:	f200 80a0 	bhi.w	800bc52 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800bb12:	f3c3 62c0 	ubfx	r2, r3, #27, #1
 800bb16:	4968      	ldr	r1, [pc, #416]	; (800bcb8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800bb18:	a801      	add	r0, sp, #4
 800bb1a:	f7ff fd01 	bl	800b520 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800bb1e:	4967      	ldr	r1, [pc, #412]	; (800bcbc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 800bb20:	a801      	add	r0, sp, #4
 800bb22:	f006 fd63 	bl	80125ec <PropertiesBuilder::AddComment(char const*)>
 800bb26:	6862      	ldr	r2, [r4, #4]
 800bb28:	4965      	ldr	r1, [pc, #404]	; (800bcc0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800bb2a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800bb2e:	a801      	add	r0, sp, #4
 800bb30:	f7ff fcf6 	bl	800b520 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800bb34:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800bb38:	b17b      	cbz	r3, 800bb5a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x14e>
 800bb3a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800bb3e:	9b01      	ldr	r3, [sp, #4]
 800bb40:	4413      	add	r3, r2
 800bb42:	227d      	movs	r2, #125	; 0x7d
 800bb44:	f803 2c01 	strb.w	r2, [r3, #-1]
 800bb48:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800bb4c:	9901      	ldr	r1, [sp, #4]
 800bb4e:	54ca      	strb	r2, [r1, r3]
 800bb50:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800bb54:	3301      	adds	r3, #1
 800bb56:	f8ad 300a 	strh.w	r3, [sp, #10]
 800bb5a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800bb5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	b005      	add	sp, #20
 800bb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	68d2      	ldr	r2, [r2, #12]
 800bb72:	4790      	blx	r2
 800bb74:	e757      	b.n	800ba26 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800bb76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bb7a:	f04f 0b12 	mov.w	fp, #18
 800bb7e:	40aa      	lsls	r2, r5
 800bb80:	439a      	bics	r2, r3
 800bb82:	bf0c      	ite	eq
 800bb84:	2301      	moveq	r3, #1
 800bb86:	2300      	movne	r3, #0
 800bb88:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800bb8c:	eb0a 1105 	add.w	r1, sl, r5, lsl #4
 800bb90:	a801      	add	r0, sp, #4
 800bb92:	f7ff fc75 	bl	800b480 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800bb96:	fb0b fb05 	mul.w	fp, fp, r5
 800bb9a:	f8b4 3079 	ldrh.w	r3, [r4, #121]	; 0x79
 800bb9e:	006a      	lsls	r2, r5, #1
 800bba0:	4948      	ldr	r1, [pc, #288]	; (800bcc4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800bba2:	40d3      	lsrs	r3, r2
 800bba4:	f013 0303 	ands.w	r3, r3, #3
 800bba8:	4459      	add	r1, fp
 800bbaa:	d04e      	beq.n	800bc4a <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x23e>
 800bbac:	4a46      	ldr	r2, [pc, #280]	; (800bcc8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800bbae:	4847      	ldr	r0, [pc, #284]	; (800bccc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	bf08      	it	eq
 800bbb4:	4602      	moveq	r2, r0
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	bf18      	it	ne
 800bbba:	2301      	movne	r3, #1
 800bbbc:	a801      	add	r0, sp, #4
 800bbbe:	f7ff fc87 	bl	800b4d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800bbc2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bbc6:	2601      	movs	r6, #1
 800bbc8:	6862      	ldr	r2, [r4, #4]
 800bbca:	40ab      	lsls	r3, r5
 800bbcc:	4393      	bics	r3, r2
 800bbce:	f898 0005 	ldrb.w	r0, [r8, #5]
 800bbd2:	493f      	ldr	r1, [pc, #252]	; (800bcd0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800bbd4:	4a3f      	ldr	r2, [pc, #252]	; (800bcd4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800bbd6:	bf0c      	ite	eq
 800bbd8:	2301      	moveq	r3, #1
 800bbda:	2300      	movne	r3, #0
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	bf18      	it	ne
 800bbe0:	460a      	movne	r2, r1
 800bbe2:	493d      	ldr	r1, [pc, #244]	; (800bcd8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800bbe4:	a801      	add	r0, sp, #4
 800bbe6:	4459      	add	r1, fp
 800bbe8:	f7ff fc72 	bl	800b4d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800bbec:	f105 0308 	add.w	r3, r5, #8
 800bbf0:	89a2      	ldrh	r2, [r4, #12]
 800bbf2:	fa06 f303 	lsl.w	r3, r6, r3
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	4938      	ldr	r1, [pc, #224]	; (800bcdc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800bbfa:	4393      	bics	r3, r2
 800bbfc:	bf0c      	ite	eq
 800bbfe:	4632      	moveq	r2, r6
 800bc00:	2200      	movne	r2, #0
 800bc02:	4459      	add	r1, fp
 800bc04:	a801      	add	r0, sp, #4
 800bc06:	f7ff fc8b 	bl	800b520 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800bc0a:	40ae      	lsls	r6, r5
 800bc0c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800bc10:	b2b6      	uxth	r6, r6
 800bc12:	4033      	ands	r3, r6
 800bc14:	429e      	cmp	r6, r3
 800bc16:	bf0c      	ite	eq
 800bc18:	2301      	moveq	r3, #1
 800bc1a:	2300      	movne	r3, #0
 800bc1c:	f105 021c 	add.w	r2, r5, #28
 800bc20:	d008      	beq.n	800bc34 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x228>
 800bc22:	4916      	ldr	r1, [pc, #88]	; (800bc7c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800bc24:	6809      	ldr	r1, [r1, #0]
 800bc26:	b995      	cbnz	r5, 800bc4e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x242>
 800bc28:	f8d1 1a30 	ldr.w	r1, [r1, #2608]	; 0xa30
 800bc2c:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800bc30:	f8c0 100b 	str.w	r1, [r0, #11]
 800bc34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bc38:	4639      	mov	r1, r7
 800bc3a:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800bc3e:	a801      	add	r0, sp, #4
 800bc40:	f006 fc90 	bl	8012564 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800bc44:	3501      	adds	r5, #1
 800bc46:	3718      	adds	r7, #24
 800bc48:	e740      	b.n	800bacc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xc0>
 800bc4a:	4a25      	ldr	r2, [pc, #148]	; (800bce0 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800bc4c:	e7b3      	b.n	800bbb6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1aa>
 800bc4e:	2100      	movs	r1, #0
 800bc50:	e7ec      	b.n	800bc2c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x220>
 800bc52:	fa0b f105 	lsl.w	r1, fp, r5
 800bc56:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800bc5a:	4399      	bics	r1, r3
 800bc5c:	bf0c      	ite	eq
 800bc5e:	2301      	moveq	r3, #1
 800bc60:	2300      	movne	r3, #0
 800bc62:	4631      	mov	r1, r6
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	bf0c      	ite	eq
 800bc68:	4642      	moveq	r2, r8
 800bc6a:	4652      	movne	r2, sl
 800bc6c:	a801      	add	r0, sp, #4
 800bc6e:	f7ff fc2f 	bl	800b4d0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800bc72:	3501      	adds	r5, #1
 800bc74:	3610      	adds	r6, #16
 800bc76:	e746      	b.n	800bb06 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xfa>
 800bc78:	08016d69 	stmdaeq	r1, {r0, r3, r5, r6, r8, sl, fp, sp, lr}
 800bc7c:	20000c68 	andcs	r0, r0, r8, ror #24
 800bc80:	08016ca1 	stmdaeq	r1, {r0, r5, r7, sl, fp, sp, lr}
 800bc84:	08016cab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sl, fp, sp, lr}
 800bc88:	08016d5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}
 800bc8c:	08016d62 	stmdaeq	r1, {r1, r5, r6, r8, sl, fp, sp, lr}
 800bc90:	08016c48 	stmdaeq	r1, {r3, r6, sl, fp, sp, lr}
 800bc94:	08016cfe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, sl, fp, sp, lr}
 800bc98:	20000c78 	andcs	r0, r0, r8, ror ip
 800bc9c:	080176ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, sl, ip, sp, lr}
 800bca0:	08016c38 	stmdaeq	r1, {r3, r4, r5, sl, fp, sp, lr}
 800bca4:	0801775b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, sl, ip, sp, lr}
 800bca8:	08016c2b 	stmdaeq	r1, {r0, r1, r3, r5, sl, fp, sp, lr}
 800bcac:	08016c61 	stmdaeq	r1, {r0, r5, r6, sl, fp, sp, lr}
 800bcb0:	08016c24 	stmdaeq	r1, {r2, r5, sl, fp, sp, lr}
 800bcb4:	08016c02 	stmdaeq	r1, {r1, sl, fp, sp, lr}
 800bcb8:	08016c53 	stmdaeq	r1, {r0, r1, r4, r6, sl, fp, sp, lr}
 800bcbc:	08015a64 	stmdaeq	r1, {r2, r5, r6, r9, fp, ip, lr}
 800bcc0:	08017745 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, ip, sp, lr}
 800bcc4:	0801776d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}
 800bcc8:	08016c0d 	stmdaeq	r1, {r0, r2, r3, sl, fp, sp, lr}
 800bccc:	08016c14 	stmdaeq	r1, {r2, r4, sl, fp, sp, lr}
 800bcd0:	08016c1c 	stmdaeq	r1, {r2, r3, r4, sl, fp, sp, lr}
 800bcd4:	08016c20 	stmdaeq	r1, {r5, sl, fp, sp, lr}
 800bcd8:	080176eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, sl, ip, sp, lr}
 800bcdc:	08016cb6 	stmdaeq	r1, {r1, r2, r4, r5, r7, sl, fp, sp, lr}
 800bce0:	08016c07 	stmdaeq	r1, {r0, r1, r2, sl, fp, sp, lr}

0800bce4 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800bce4:	b513      	push	{r0, r1, r4, lr}
 800bce6:	6804      	ldr	r4, [r0, #0]
 800bce8:	b914      	cbnz	r4, 800bcf0 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800bcea:	601c      	str	r4, [r3, #0]
 800bcec:	b002      	add	sp, #8
 800bcee:	bd10      	pop	{r4, pc}
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	460a      	mov	r2, r1
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	f7ff fe88 	bl	800ba0c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800bcfc:	e7f6      	b.n	800bcec <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800bd00 <ArtNetParams::Set(unsigned int)>:
 800bd00:	6843      	ldr	r3, [r0, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d07a      	beq.n	800bdfc <ArtNetParams::Set(unsigned int)+0xfc>
 800bd06:	4a3e      	ldr	r2, [pc, #248]	; (800be00 <ArtNetParams::Set(unsigned int)+0x100>)
 800bd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd0c:	079f      	lsls	r7, r3, #30
 800bd0e:	4604      	mov	r4, r0
 800bd10:	4688      	mov	r8, r1
 800bd12:	6815      	ldr	r5, [r2, #0]
 800bd14:	d504      	bpl.n	800bd20 <ArtNetParams::Set(unsigned int)+0x20>
 800bd16:	f100 0110 	add.w	r1, r0, #16
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f7fd ff90 	bl	8009c40 <ArtNetNode::SetShortName(char const*)>
 800bd20:	6863      	ldr	r3, [r4, #4]
 800bd22:	07de      	lsls	r6, r3, #31
 800bd24:	d504      	bpl.n	800bd30 <ArtNetParams::Set(unsigned int)+0x30>
 800bd26:	4628      	mov	r0, r5
 800bd28:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800bd2c:	f7fd ffa9 	bl	8009c82 <ArtNetNode::SetLongName(char const*)>
 800bd30:	6863      	ldr	r3, [r4, #4]
 800bd32:	0758      	lsls	r0, r3, #29
 800bd34:	d504      	bpl.n	800bd40 <ArtNetParams::Set(unsigned int)+0x40>
 800bd36:	2200      	movs	r2, #0
 800bd38:	4628      	mov	r0, r5
 800bd3a:	7a21      	ldrb	r1, [r4, #8]
 800bd3c:	f7fe fa96 	bl	800a26c <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800bd40:	6863      	ldr	r3, [r4, #4]
 800bd42:	0719      	lsls	r1, r3, #28
 800bd44:	d504      	bpl.n	800bd50 <ArtNetParams::Set(unsigned int)+0x50>
 800bd46:	2200      	movs	r2, #0
 800bd48:	4628      	mov	r0, r5
 800bd4a:	7a61      	ldrb	r1, [r4, #9]
 800bd4c:	f7fe fa71 	bl	800a232 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800bd50:	2600      	movs	r6, #0
 800bd52:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 800bd56:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800be04 <ArtNetParams::Set(unsigned int)+0x104>
 800bd5a:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800bd5e:	f8d9 3000 	ldr.w	r3, [r9]
 800bd62:	42b3      	cmp	r3, r6
 800bd64:	d812      	bhi.n	800bd8c <ArtNetParams::Set(unsigned int)+0x8c>
 800bd66:	7aa1      	ldrb	r1, [r4, #10]
 800bd68:	4628      	mov	r0, r5
 800bd6a:	3108      	adds	r1, #8
 800bd6c:	b2c9      	uxtb	r1, r1
 800bd6e:	f7fe fada 	bl	800a326 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800bd72:	6863      	ldr	r3, [r4, #4]
 800bd74:	011a      	lsls	r2, r3, #4
 800bd76:	bf44      	itt	mi
 800bd78:	2201      	movmi	r2, #1
 800bd7a:	f885 2094 	strbmi.w	r2, [r5, #148]	; 0x94
 800bd7e:	04db      	lsls	r3, r3, #19
 800bd80:	bf44      	itt	mi
 800bd82:	2301      	movmi	r3, #1
 800bd84:	f885 39f8 	strbmi.w	r3, [r5, #2552]	; 0x9f8
 800bd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd8c:	eb16 0108 	adds.w	r1, r6, r8
 800bd90:	d1e9      	bne.n	800bd66 <ArtNetParams::Set(unsigned int)+0x66>
 800bd92:	6862      	ldr	r2, [r4, #4]
 800bd94:	fa0a f306 	lsl.w	r3, sl, r6
 800bd98:	4393      	bics	r3, r2
 800bd9a:	d103      	bne.n	800bda4 <ArtNetParams::Set(unsigned int)+0xa4>
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	797a      	ldrb	r2, [r7, #5]
 800bda0:	f7fe fa81 	bl	800a2a6 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800bda4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bda8:	6862      	ldr	r2, [r4, #4]
 800bdaa:	40b3      	lsls	r3, r6
 800bdac:	4393      	bics	r3, r2
 800bdae:	d104      	bne.n	800bdba <ArtNetParams::Set(unsigned int)+0xba>
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	783a      	ldrb	r2, [r7, #0]
 800bdb6:	f7fe fa96 	bl	800a2e6 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800bdc0:	40b3      	lsls	r3, r6
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	4393      	bics	r3, r2
 800bdc6:	d109      	bne.n	800bddc <ArtNetParams::Set(unsigned int)+0xdc>
 800bdc8:	f106 031c 	add.w	r3, r6, #28
 800bdcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800bdd8:	f7fe fd9a 	bl	800a910 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800bddc:	2201      	movs	r2, #1
 800bdde:	f106 0308 	add.w	r3, r6, #8
 800bde2:	89a1      	ldrh	r1, [r4, #12]
 800bde4:	fa02 f303 	lsl.w	r3, r2, r3
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	438b      	bics	r3, r1
 800bdec:	d103      	bne.n	800bdf6 <ArtNetParams::Set(unsigned int)+0xf6>
 800bdee:	2100      	movs	r1, #0
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	f7ff f847 	bl	800ae84 <ArtNetNode::SetRmd(unsigned int, bool)>
 800bdf6:	3601      	adds	r6, #1
 800bdf8:	3701      	adds	r7, #1
 800bdfa:	e7b0      	b.n	800bd5e <ArtNetParams::Set(unsigned int)+0x5e>
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	20000c68 	andcs	r0, r0, r8, ror #24
 800be04:	20000c78 	andcs	r0, r0, r8, ror ip

0800be08 <ArtNetParams::Dump()>:
 800be08:	4770      	bx	lr
	...

0800be0c <ArtNetNode::HandleTrigger()>:
 800be0c:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
 800be10:	4601      	mov	r1, r0
 800be12:	2aff      	cmp	r2, #255	; 0xff
 800be14:	d103      	bne.n	800be1e <ArtNetNode::HandleTrigger()+0x12>
 800be16:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 800be1a:	2bff      	cmp	r3, #255	; 0xff
 800be1c:	d008      	beq.n	800be30 <ArtNetNode::HandleTrigger()+0x24>
 800be1e:	4b07      	ldr	r3, [pc, #28]	; (800be3c <ArtNetNode::HandleTrigger()+0x30>)
 800be20:	7818      	ldrb	r0, [r3, #0]
 800be22:	4290      	cmp	r0, r2
 800be24:	d109      	bne.n	800be3a <ArtNetNode::HandleTrigger()+0x2e>
 800be26:	f891 20a7 	ldrb.w	r2, [r1, #167]	; 0xa7
 800be2a:	785b      	ldrb	r3, [r3, #1]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d104      	bne.n	800be3a <ArtNetNode::HandleTrigger()+0x2e>
 800be30:	6948      	ldr	r0, [r1, #20]
 800be32:	31a8      	adds	r1, #168	; 0xa8
 800be34:	6803      	ldr	r3, [r0, #0]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	4718      	bx	r3
 800be3a:	4770      	bx	lr
 800be3c:	08016d74 	stmdaeq	r1, {r2, r4, r5, r6, r8, sl, fp, sp, lr}

0800be40 <e131::universe_to_multicast_ip(unsigned short)>:
 800be40:	b513      	push	{r0, r1, r4, lr}
 800be42:	4604      	mov	r4, r0
 800be44:	a901      	add	r1, sp, #4
 800be46:	4806      	ldr	r0, [pc, #24]	; (800be60 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800be48:	f007 f91a 	bl	8013080 <inet_aton>
 800be4c:	9801      	ldr	r0, [sp, #4]
 800be4e:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800be52:	0224      	lsls	r4, r4, #8
 800be54:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800be58:	4320      	orrs	r0, r4
 800be5a:	b002      	add	sp, #8
 800be5c:	bd10      	pop	{r4, pc}
 800be5e:	bf00      	nop
 800be60:	08016d7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, sl, fp, sp, lr}

0800be64 <memset.constprop.0.isra.0>:
 800be64:	2300      	movs	r3, #0
 800be66:	4401      	add	r1, r0
 800be68:	4288      	cmp	r0, r1
 800be6a:	d100      	bne.n	800be6e <memset.constprop.0.isra.0+0xa>
 800be6c:	4770      	bx	lr
 800be6e:	f800 3b01 	strb.w	r3, [r0], #1
 800be72:	e7f9      	b.n	800be68 <memset.constprop.0.isra.0+0x4>

0800be74 <memcpy.isra.0>:
 800be74:	3801      	subs	r0, #1
 800be76:	440a      	add	r2, r1
 800be78:	4291      	cmp	r1, r2
 800be7a:	d100      	bne.n	800be7e <memcpy.isra.0+0xa>
 800be7c:	4770      	bx	lr
 800be7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be82:	f800 3f01 	strb.w	r3, [r0, #1]!
 800be86:	e7f7      	b.n	800be78 <memcpy.isra.0+0x4>

0800be88 <E131Bridge::E131Bridge()>:
 800be88:	2300      	movs	r3, #0
 800be8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be8e:	b530      	push	{r4, r5, lr}
 800be90:	e9c0 2300 	strd	r2, r3, [r0]
 800be94:	2201      	movs	r2, #1
 800be96:	4604      	mov	r4, r0
 800be98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be9c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800bea0:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800bea4:	6743      	str	r3, [r0, #116]	; 0x74
 800bea6:	4b22      	ldr	r3, [pc, #136]	; (800bf30 <E131Bridge::E131Bridge()+0xa8>)
 800bea8:	b093      	sub	sp, #76	; 0x4c
 800beaa:	6018      	str	r0, [r3, #0]
 800beac:	7202      	strb	r2, [r0, #8]
 800beae:	2144      	movs	r1, #68	; 0x44
 800beb0:	f200 5014 	addw	r0, r0, #1300	; 0x514
 800beb4:	f7ff ffd6 	bl	800be64 <memset.constprop.0.isra.0>
 800beb8:	210c      	movs	r1, #12
 800beba:	f504 60ab 	add.w	r0, r4, #1368	; 0x558
 800bebe:	f7ff ffd1 	bl	800be64 <memset.constprop.0.isra.0>
 800bec2:	2364      	movs	r3, #100	; 0x64
 800bec4:	4d1b      	ldr	r5, [pc, #108]	; (800bf34 <E131Bridge::E131Bridge()+0xac>)
 800bec6:	2120      	movs	r1, #32
 800bec8:	f884 3561 	strb.w	r3, [r4, #1377]	; 0x561
 800becc:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800bed0:	f7ff ffc8 	bl	800be64 <memset.constprop.0.isra.0>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	f884 250c 	strb.w	r2, [r4, #1292]	; 0x50c
 800beda:	4a17      	ldr	r2, [pc, #92]	; (800bf38 <E131Bridge::E131Bridge()+0xb0>)
 800bedc:	2140      	movs	r1, #64	; 0x40
 800bede:	9200      	str	r2, [sp, #0]
 800bee0:	3320      	adds	r3, #32
 800bee2:	4a16      	ldr	r2, [pc, #88]	; (800bf3c <E131Bridge::E131Bridge()+0xb4>)
 800bee4:	a802      	add	r0, sp, #8
 800bee6:	f007 fbb7 	bl	8013658 <snprintf>
 800beea:	233f      	movs	r3, #63	; 0x3f
 800beec:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800bef0:	a902      	add	r1, sp, #8
 800bef2:	f811 0b01 	ldrb.w	r0, [r1], #1
 800bef6:	b928      	cbnz	r0, 800bf04 <E131Bridge::E131Bridge()+0x7c>
 800bef8:	4413      	add	r3, r2
 800befa:	429a      	cmp	r2, r3
 800befc:	d006      	beq.n	800bf0c <E131Bridge::E131Bridge()+0x84>
 800befe:	f802 0b01 	strb.w	r0, [r2], #1
 800bf02:	e7fa      	b.n	800befa <E131Bridge::E131Bridge()+0x72>
 800bf04:	3b01      	subs	r3, #1
 800bf06:	f802 0b01 	strb.w	r0, [r2], #1
 800bf0a:	d1f2      	bne.n	800bef2 <E131Bridge::E131Bridge()+0x6a>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800bf12:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800bf16:	6828      	ldr	r0, [r5, #0]
 800bf18:	f003 fef5 	bl	800fd06 <Network::Begin(unsigned short)>
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	4b08      	ldr	r3, [pc, #32]	; (800bf40 <E131Bridge::E131Bridge()+0xb8>)
 800bf20:	f841 0b24 	str.w	r0, [r1], #36
 800bf24:	6818      	ldr	r0, [r3, #0]
 800bf26:	f007 f849 	bl	8012fbc <Hardware::GetUuid(unsigned char*)>
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	b013      	add	sp, #76	; 0x4c
 800bf2e:	bd30      	pop	{r4, r5, pc}
 800bf30:	20000c7c 	andcs	r0, r0, ip, ror ip
 800bf34:	20008aa8 	andcs	r8, r0, r8, lsr #21
 800bf38:	08016022 	stmdaeq	r1, {r1, r5, sp, lr}
 800bf3c:	08016d86 	stmdaeq	r1, {r1, r2, r7, r8, sl, fp, sp, lr}
 800bf40:	2000a1c8 	andcs	sl, r0, r8, asr #3

0800bf44 <E131Bridge::~E131Bridge()>:
 800bf44:	4770      	bx	lr
	...

0800bf48 <E131Bridge::Start()>:
 800bf48:	6943      	ldr	r3, [r0, #20]
 800bf4a:	b513      	push	{r0, r1, r4, lr}
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	b31b      	cbz	r3, 800bf98 <E131Bridge::Start()+0x50>
 800bf50:	6983      	ldr	r3, [r0, #24]
 800bf52:	b9cb      	cbnz	r3, 800bf88 <E131Bridge::Start()+0x40>
 800bf54:	a901      	add	r1, sp, #4
 800bf56:	4814      	ldr	r0, [pc, #80]	; (800bfa8 <E131Bridge::Start()+0x60>)
 800bf58:	f007 f892 	bl	8013080 <inet_aton>
 800bf5c:	9b01      	ldr	r3, [sp, #4]
 800bf5e:	f240 207e 	movw	r0, #638	; 0x27e
 800bf62:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800bf66:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800bf6a:	6223      	str	r3, [r4, #32]
 800bf6c:	f007 f884 	bl	8013078 <operator new(unsigned int)>
 800bf70:	61a0      	str	r0, [r4, #24]
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 fc7c 	bl	800c870 <E131Bridge::FillDataPacket()>
 800bf78:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800bf7c:	f007 f87c 	bl	8013078 <operator new(unsigned int)>
 800bf80:	61e0      	str	r0, [r4, #28]
 800bf82:	4620      	mov	r0, r4
 800bf84:	f000 fbd4 	bl	800c730 <E131Bridge::FillDiscoveryPacket()>
 800bf88:	f894 355a 	ldrb.w	r3, [r4, #1370]	; 0x55a
 800bf8c:	b123      	cbz	r3, 800bf98 <E131Bridge::Start()+0x50>
 800bf8e:	6960      	ldr	r0, [r4, #20]
 800bf90:	2100      	movs	r1, #0
 800bf92:	6803      	ldr	r3, [r0, #0]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	4798      	blx	r3
 800bf98:	2102      	movs	r1, #2
 800bf9a:	4b04      	ldr	r3, [pc, #16]	; (800bfac <E131Bridge::Start()+0x64>)
 800bf9c:	6818      	ldr	r0, [r3, #0]
 800bf9e:	b002      	add	sp, #8
 800bfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfa4:	f006 bf86 	b.w	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 800bfa8:	08016d7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, sl, fp, sp, lr}
 800bfac:	2000a1c4 	andcs	sl, r0, r4, asr #3

0800bfb0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	b119      	cbz	r1, 800bfc0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x10>
 800bfb8:	f8b3 2514 	ldrh.w	r2, [r3, #1300]	; 0x514
 800bfbc:	4282      	cmp	r2, r0
 800bfbe:	d00b      	beq.n	800bfd8 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x28>
 800bfc0:	681d      	ldr	r5, [r3, #0]
 800bfc2:	4b06      	ldr	r3, [pc, #24]	; (800bfdc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x2c>)
 800bfc4:	681c      	ldr	r4, [r3, #0]
 800bfc6:	f7ff ff3b 	bl	800be40 <e131::universe_to_multicast_ip(unsigned short)>
 800bfca:	4629      	mov	r1, r5
 800bfcc:	4602      	mov	r2, r0
 800bfce:	4620      	mov	r0, r4
 800bfd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfd4:	f003 beab 	b.w	800fd2e <Network::LeaveGroup(int, unsigned int)>
 800bfd8:	bd38      	pop	{r3, r4, r5, pc}
 800bfda:	bf00      	nop
 800bfdc:	20008aa8 	andcs	r8, r0, r8, lsr #21

0800bfe0 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	461d      	mov	r5, r3
 800bfe6:	b1c1      	cbz	r1, 800c01a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800bfe8:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800bfec:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800bff0:	b12a      	cbz	r2, 800bffe <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800bff2:	42aa      	cmp	r2, r5
 800bff4:	d017      	beq.n	800c026 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800bff6:	2101      	movs	r1, #1
 800bff8:	4620      	mov	r0, r4
 800bffa:	f7ff ffd9 	bl	800bfb0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800bffe:	4b0a      	ldr	r3, [pc, #40]	; (800c028 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>)
 800c000:	8035      	strh	r5, [r6, #0]
 800c002:	4628      	mov	r0, r5
 800c004:	6826      	ldr	r6, [r4, #0]
 800c006:	681c      	ldr	r4, [r3, #0]
 800c008:	f7ff ff1a 	bl	800be40 <e131::universe_to_multicast_ip(unsigned short)>
 800c00c:	4631      	mov	r1, r6
 800c00e:	4602      	mov	r2, r0
 800c010:	4620      	mov	r0, r4
 800c012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c016:	f003 be87 	b.w	800fd28 <Network::JoinGroup(int, unsigned int)>
 800c01a:	b122      	cbz	r2, 800c026 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800c01c:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800c020:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800c024:	e7e4      	b.n	800bff0 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800c026:	bd70      	pop	{r4, r5, r6, pc}
 800c028:	20008aa8 	andcs	r8, r0, r8, lsr #21

0800c02c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800c02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c030:	4604      	mov	r4, r0
 800c032:	460d      	mov	r5, r1
 800c034:	461e      	mov	r6, r3
 800c036:	b9ca      	cbnz	r2, 800c06c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x40>
 800c038:	bbb1      	cbnz	r1, 800c0a8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x7c>
 800c03a:	f890 355a 	ldrb.w	r3, [r0, #1370]	; 0x55a
 800c03e:	b12b      	cbz	r3, 800c04c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x20>
 800c040:	f8b0 3558 	ldrh.w	r3, [r0, #1368]	; 0x558
 800c044:	42b3      	cmp	r3, r6
 800c046:	d109      	bne.n	800c05c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x30>
 800c048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c04c:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c050:	3301      	adds	r3, #1
 800c052:	f880 350a 	strb.w	r3, [r0, #1290]	; 0x50a
 800c056:	2301      	movs	r3, #1
 800c058:	f880 355a 	strb.w	r3, [r0, #1370]	; 0x55a
 800c05c:	4630      	mov	r0, r6
 800c05e:	f8a4 6558 	strh.w	r6, [r4, #1368]	; 0x558
 800c062:	f7ff feed 	bl	800be40 <e131::universe_to_multicast_ip(unsigned short)>
 800c066:	f8c4 055c 	str.w	r0, [r4, #1372]	; 0x55c
 800c06a:	e7ed      	b.n	800c048 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800c06c:	2a02      	cmp	r2, #2
 800c06e:	d11b      	bne.n	800c0a8 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x7c>
 800c070:	2900      	cmp	r1, #0
 800c072:	d1e9      	bne.n	800c048 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800c074:	f890 3516 	ldrb.w	r3, [r0, #1302]	; 0x516
 800c078:	b14b      	cbz	r3, 800c08e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x62>
 800c07a:	f884 1516 	strb.w	r1, [r4, #1302]	; 0x516
 800c07e:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800c082:	4632      	mov	r2, r6
 800c084:	3b01      	subs	r3, #1
 800c086:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800c08a:	f7ff ff91 	bl	800bfb0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c08e:	f894 355a 	ldrb.w	r3, [r4, #1370]	; 0x55a
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0d8      	beq.n	800c048 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800c096:	2300      	movs	r3, #0
 800c098:	f884 355a 	strb.w	r3, [r4, #1370]	; 0x55a
 800c09c:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800c0a6:	e7cf      	b.n	800c048 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800c0a8:	2344      	movs	r3, #68	; 0x44
 800c0aa:	fb03 4305 	mla	r3, r3, r5, r4
 800c0ae:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800c0b2:	b1d2      	cbz	r2, 800c0ea <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xbe>
 800c0b4:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 800c0b8:	42b3      	cmp	r3, r6
 800c0ba:	d0c5      	beq.n	800c048 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800c0bc:	4632      	mov	r2, r6
 800c0be:	4629      	mov	r1, r5
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f7ff ff75 	bl	800bfb0 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800c0c6:	4b0d      	ldr	r3, [pc, #52]	; (800c0fc <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xd0>)
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	681f      	ldr	r7, [r3, #0]
 800c0cc:	f8d4 8000 	ldr.w	r8, [r4]
 800c0d0:	f7ff feb6 	bl	800be40 <e131::universe_to_multicast_ip(unsigned short)>
 800c0d4:	4641      	mov	r1, r8
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f003 fe25 	bl	800fd28 <Network::JoinGroup(int, unsigned int)>
 800c0de:	2344      	movs	r3, #68	; 0x44
 800c0e0:	fb03 4505 	mla	r5, r3, r5, r4
 800c0e4:	f8a5 6514 	strh.w	r6, [r5, #1300]	; 0x514
 800c0e8:	e7ae      	b.n	800c048 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800c0ea:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800c0ee:	3201      	adds	r2, #1
 800c0f0:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800c0fa:	e7e4      	b.n	800c0c6 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x9a>
 800c0fc:	20008aa8 	andcs	r8, r0, r8, lsr #21

0800c100 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800c100:	b510      	push	{r4, lr}
 800c102:	4604      	mov	r4, r0
 800c104:	4618      	mov	r0, r3
 800c106:	b933      	cbnz	r3, 800c116 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x16>
 800c108:	b921      	cbnz	r1, 800c114 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x14>
 800c10a:	f8b4 3558 	ldrh.w	r3, [r4, #1368]	; 0x558
 800c10e:	f894 055a 	ldrb.w	r0, [r4, #1370]	; 0x55a
 800c112:	8013      	strh	r3, [r2, #0]
 800c114:	bd10      	pop	{r4, pc}
 800c116:	2344      	movs	r3, #68	; 0x44
 800c118:	fb03 4401 	mla	r4, r3, r1, r4
 800c11c:	f8b4 3514 	ldrh.w	r3, [r4, #1300]	; 0x514
 800c120:	f894 0516 	ldrb.w	r0, [r4, #1302]	; 0x516
 800c124:	8013      	strh	r3, [r2, #0]
 800c126:	e7f5      	b.n	800c114 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x14>

0800c128 <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800c128:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800c12c:	b923      	cbnz	r3, 800c138 <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800c12e:	2301      	movs	r3, #1
 800c130:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800c134:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800c138:	2344      	movs	r3, #68	; 0x44
 800c13a:	fb03 0001 	mla	r0, r3, r1, r0
 800c13e:	2301      	movs	r3, #1
 800c140:	f880 3555 	strb.w	r3, [r0, #1365]	; 0x555
 800c144:	4770      	bx	lr

0800c146 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800c146:	4602      	mov	r2, r0
 800c148:	2044      	movs	r0, #68	; 0x44
 800c14a:	4348      	muls	r0, r1
 800c14c:	b570      	push	{r4, r5, r6, lr}
 800c14e:	1815      	adds	r5, r2, r0
 800c150:	460c      	mov	r4, r1
 800c152:	68d3      	ldr	r3, [r2, #12]
 800c154:	f8d5 1518 	ldr.w	r1, [r5, #1304]	; 0x518
 800c158:	1a5b      	subs	r3, r3, r1
 800c15a:	f242 7110 	movw	r1, #10000	; 0x2710
 800c15e:	428b      	cmp	r3, r1
 800c160:	d90a      	bls.n	800c178 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800c162:	2600      	movs	r6, #0
 800c164:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
 800c168:	2110      	movs	r1, #16
 800c16a:	f8c5 651c 	str.w	r6, [r5, #1308]	; 0x51c
 800c16e:	4410      	add	r0, r2
 800c170:	f7ff fe78 	bl	800be64 <memset.constprop.0.isra.0>
 800c174:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800c178:	2344      	movs	r3, #68	; 0x44
 800c17a:	435c      	muls	r4, r3
 800c17c:	1915      	adds	r5, r2, r4
 800c17e:	f8d5 1534 	ldr.w	r1, [r5, #1332]	; 0x534
 800c182:	68d3      	ldr	r3, [r2, #12]
 800c184:	1a5b      	subs	r3, r3, r1
 800c186:	f242 7110 	movw	r1, #10000	; 0x2710
 800c18a:	428b      	cmp	r3, r1
 800c18c:	d90a      	bls.n	800c1a4 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800c18e:	2600      	movs	r6, #0
 800c190:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 800c194:	2110      	movs	r1, #16
 800c196:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
 800c19a:	1910      	adds	r0, r2, r4
 800c19c:	f7ff fe62 	bl	800be64 <memset.constprop.0.isra.0>
 800c1a0:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800c1a4:	f892 3555 	ldrb.w	r3, [r2, #1365]	; 0x555
 800c1a8:	b923      	cbnz	r3, 800c1b4 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x6e>
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800c1b0:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800c1b4:	bd70      	pop	{r4, r5, r6, pc}

0800c1b6 <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800c1b6:	2244      	movs	r2, #68	; 0x44
 800c1b8:	fb02 0101 	mla	r1, r2, r1, r0
 800c1bc:	68c3      	ldr	r3, [r0, #12]
 800c1be:	b510      	push	{r4, lr}
 800c1c0:	f8d1 2534 	ldr.w	r2, [r1, #1332]	; 0x534
 800c1c4:	f8d1 451c 	ldr.w	r4, [r1, #1308]	; 0x51c
 800c1c8:	f8d1 0538 	ldr.w	r0, [r1, #1336]	; 0x538
 800c1cc:	1a9a      	subs	r2, r3, r2
 800c1ce:	b184      	cbz	r4, 800c1f2 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800c1d0:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800c1d4:	1a5b      	subs	r3, r3, r1
 800c1d6:	b128      	cbz	r0, 800c1e4 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800c1d8:	f242 700f 	movw	r0, #9999	; 0x270f
 800c1dc:	4283      	cmp	r3, r0
 800c1de:	d90d      	bls.n	800c1fc <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800c1e0:	4282      	cmp	r2, r0
 800c1e2:	e002      	b.n	800c1ea <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800c1e4:	f242 7010 	movw	r0, #10000	; 0x2710
 800c1e8:	4283      	cmp	r3, r0
 800c1ea:	bf94      	ite	ls
 800c1ec:	2000      	movls	r0, #0
 800c1ee:	2001      	movhi	r0, #1
 800c1f0:	bd10      	pop	{r4, pc}
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	d0fc      	beq.n	800c1f0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800c1f6:	f242 7010 	movw	r0, #10000	; 0x2710
 800c1fa:	e7f1      	b.n	800c1e0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	e7f7      	b.n	800c1f0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800c200 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800c200:	684a      	ldr	r2, [r1, #4]
 800c202:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800c204:	b510      	push	{r4, lr}
 800c206:	429a      	cmp	r2, r3
 800c208:	d10d      	bne.n	800c226 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800c20a:	f100 0391 	add.w	r3, r0, #145	; 0x91
 800c20e:	3107      	adds	r1, #7
 800c210:	30a1      	adds	r0, #161	; 0xa1
 800c212:	4283      	cmp	r3, r0
 800c214:	d101      	bne.n	800c21a <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800c216:	2001      	movs	r0, #1
 800c218:	bd10      	pop	{r4, pc}
 800c21a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c21e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800c222:	4294      	cmp	r4, r2
 800c224:	d0f5      	beq.n	800c212 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800c226:	2000      	movs	r0, #0
 800c228:	e7f6      	b.n	800c218 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>
	...

0800c22c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4604      	mov	r4, r0
 800c230:	2001      	movs	r0, #1
 800c232:	460d      	mov	r5, r1
 800c234:	f894 3556 	ldrb.w	r3, [r4, #1366]	; 0x556
 800c238:	f884 04f8 	strb.w	r0, [r4, #1272]	; 0x4f8
 800c23c:	2900      	cmp	r1, #0
 800c23e:	d052      	beq.n	800c2e6 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800c240:	2a00      	cmp	r2, #0
 800c242:	d037      	beq.n	800c2b4 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x88>
 800c244:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
 800c248:	f884 050c 	strb.w	r0, [r4, #1292]	; 0x50c
 800c24c:	b1e3      	cbz	r3, 800c288 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c24e:	2500      	movs	r5, #0
 800c250:	2110      	movs	r1, #16
 800c252:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800c256:	f8c4 551c 	str.w	r5, [r4, #1308]	; 0x51c
 800c25a:	f7ff fe03 	bl	800be64 <memset.constprop.0.isra.0>
 800c25e:	2110      	movs	r1, #16
 800c260:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 800c264:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
 800c268:	f7ff fdfc 	bl	800be64 <memset.constprop.0.isra.0>
 800c26c:	f7fe f9ce 	bl	800a60c <lightset::Data::Get()>
 800c270:	f8c0 5600 	str.w	r5, [r0, #1536]	; 0x600
 800c274:	f8a4 5554 	strh.w	r5, [r4, #1364]	; 0x554
 800c278:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
 800c27c:	f884 5556 	strb.w	r5, [r4, #1366]	; 0x556
 800c280:	2901      	cmp	r1, #1
 800c282:	d00d      	beq.n	800c2a0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x74>
 800c284:	2902      	cmp	r1, #2
 800c286:	d010      	beq.n	800c2aa <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x7e>
 800c288:	4b20      	ldr	r3, [pc, #128]	; (800c30c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xe0>)
 800c28a:	2102      	movs	r1, #2
 800c28c:	6818      	ldr	r0, [r3, #0]
 800c28e:	f006 fe11 	bl	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 800c292:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c296:	f023 0302 	bic.w	r3, r3, #2
 800c29a:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	6860      	ldr	r0, [r4, #4]
 800c2a2:	6803      	ldr	r3, [r0, #0]
 800c2a4:	695b      	ldr	r3, [r3, #20]
 800c2a6:	4798      	blx	r3
 800c2a8:	e7ee      	b.n	800c288 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c2aa:	6860      	ldr	r0, [r4, #4]
 800c2ac:	6803      	ldr	r3, [r0, #0]
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	4798      	blx	r3
 800c2b2:	e7e9      	b.n	800c288 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0e7      	beq.n	800c288 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c2b8:	f8d4 351c 	ldr.w	r3, [r4, #1308]	; 0x51c
 800c2bc:	b143      	cbz	r3, 800c2d0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xa4>
 800c2be:	2110      	movs	r1, #16
 800c2c0:	f8c4 251c 	str.w	r2, [r4, #1308]	; 0x51c
 800c2c4:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800c2c8:	f7ff fdcc 	bl	800be64 <memset.constprop.0.isra.0>
 800c2cc:	f884 2555 	strb.w	r2, [r4, #1365]	; 0x555
 800c2d0:	f894 54f5 	ldrb.w	r5, [r4, #1269]	; 0x4f5
 800c2d4:	2d00      	cmp	r5, #0
 800c2d6:	d1d7      	bne.n	800c288 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c2d8:	f7fe f998 	bl	800a60c <lightset::Data::Get()>
 800c2dc:	f8c0 5600 	str.w	r5, [r0, #1536]	; 0x600
 800c2e0:	f884 5554 	strb.w	r5, [r4, #1364]	; 0x554
 800c2e4:	e7c8      	b.n	800c278 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x4c>
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d0ce      	beq.n	800c288 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c2ea:	2a00      	cmp	r2, #0
 800c2ec:	d0f0      	beq.n	800c2d0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xa4>
 800c2ee:	f8d4 3538 	ldr.w	r3, [r4, #1336]	; 0x538
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d0ec      	beq.n	800c2d0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xa4>
 800c2f6:	2110      	movs	r1, #16
 800c2f8:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
 800c2fc:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 800c300:	f7ff fdb0 	bl	800be64 <memset.constprop.0.isra.0>
 800c304:	f884 5555 	strb.w	r5, [r4, #1365]	; 0x555
 800c308:	e7e2      	b.n	800c2d0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xa4>
 800c30a:	bf00      	nop
 800c30c:	2000a1c4 	andcs	sl, r0, r4, asr #3

0800c310 <E131Bridge::HandleDmx()>:
 800c310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	f8b0 50f7 	ldrh.w	r5, [r0, #247]	; 0xf7
 800c318:	f890 3516 	ldrb.w	r3, [r0, #1302]	; 0x516
 800c31c:	ba6d      	rev16	r5, r5
 800c31e:	b2ad      	uxth	r5, r5
 800c320:	4604      	mov	r4, r0
 800c322:	f100 08fa 	add.w	r8, r0, #250	; 0xfa
 800c326:	3d01      	subs	r5, #1
 800c328:	b343      	cbz	r3, 800c37c <E131Bridge::HandleDmx()+0x6c>
 800c32a:	f8b0 3514 	ldrh.w	r3, [r0, #1300]	; 0x514
 800c32e:	f8b0 20ed 	ldrh.w	r2, [r0, #237]	; 0xed
 800c332:	ba5b      	rev16	r3, r3
 800c334:	b29b      	uxth	r3, r3
 800c336:	429a      	cmp	r2, r3
 800c338:	d120      	bne.n	800c37c <E131Bridge::HandleDmx()+0x6c>
 800c33a:	f500 61a3 	add.w	r1, r0, #1304	; 0x518
 800c33e:	f8d0 a51c 	ldr.w	sl, [r0, #1308]	; 0x51c
 800c342:	f8d0 9538 	ldr.w	r9, [r0, #1336]	; 0x538
 800c346:	f7ff ff5b 	bl	800c200 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800c34a:	f204 5134 	addw	r1, r4, #1332	; 0x534
 800c34e:	4607      	mov	r7, r0
 800c350:	4620      	mov	r0, r4
 800c352:	f7ff ff55 	bl	800c200 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800c356:	4606      	mov	r6, r0
 800c358:	b197      	cbz	r7, 800c380 <E131Bridge::HandleDmx()+0x70>
 800c35a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c35e:	f894 2530 	ldrb.w	r2, [r4, #1328]	; 0x530
 800c362:	f884 3530 	strb.w	r3, [r4, #1328]	; 0x530
 800c366:	3313      	adds	r3, #19
 800c368:	1a9b      	subs	r3, r3, r2
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	2b13      	cmp	r3, #19
 800c36e:	d905      	bls.n	800c37c <E131Bridge::HandleDmx()+0x6c>
 800c370:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800c374:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800c378:	2a00      	cmp	r2, #0
 800c37a:	da0a      	bge.n	800c392 <E131Bridge::HandleDmx()+0x82>
 800c37c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c380:	2800      	cmp	r0, #0
 800c382:	d0f5      	beq.n	800c370 <E131Bridge::HandleDmx()+0x60>
 800c384:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c388:	f894 254c 	ldrb.w	r2, [r4, #1356]	; 0x54c
 800c38c:	f884 354c 	strb.w	r3, [r4, #1356]	; 0x54c
 800c390:	e7e9      	b.n	800c366 <E131Bridge::HandleDmx()+0x56>
 800c392:	065a      	lsls	r2, r3, #25
 800c394:	d509      	bpl.n	800c3aa <E131Bridge::HandleDmx()+0x9a>
 800c396:	b90f      	cbnz	r7, 800c39c <E131Bridge::HandleDmx()+0x8c>
 800c398:	2e00      	cmp	r6, #0
 800c39a:	d0ef      	beq.n	800c37c <E131Bridge::HandleDmx()+0x6c>
 800c39c:	4632      	mov	r2, r6
 800c39e:	4639      	mov	r1, r7
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a6:	f7ff bf41 	b.w	800c22c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800c3aa:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800c3ae:	b12b      	cbz	r3, 800c3bc <E131Bridge::HandleDmx()+0xac>
 800c3b0:	f894 14f9 	ldrb.w	r1, [r4, #1273]	; 0x4f9
 800c3b4:	b911      	cbnz	r1, 800c3bc <E131Bridge::HandleDmx()+0xac>
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f7ff fec5 	bl	800c146 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800c3bc:	f894 b0e8 	ldrb.w	fp, [r4, #232]	; 0xe8
 800c3c0:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
 800c3c4:	459b      	cmp	fp, r3
 800c3c6:	d258      	bcs.n	800c47a <E131Bridge::HandleDmx()+0x16a>
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f7ff fef3 	bl	800c1b6 <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d0d3      	beq.n	800c37c <E131Bridge::HandleDmx()+0x6c>
 800c3d4:	f884 b50c 	strb.w	fp, [r4, #1292]	; 0x50c
 800c3d8:	f1ba 0f00 	cmp.w	sl, #0
 800c3dc:	d156      	bne.n	800c48c <E131Bridge::HandleDmx()+0x17c>
 800c3de:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c3e2:	f1b9 0f00 	cmp.w	r9, #0
 800c3e6:	d15c      	bne.n	800c4a2 <E131Bridge::HandleDmx()+0x192>
 800c3e8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800c3ea:	f884 3530 	strb.w	r3, [r4, #1328]	; 0x530
 800c3ee:	f8c4 251c 	str.w	r2, [r4, #1308]	; 0x51c
 800c3f2:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c3f6:	2210      	movs	r2, #16
 800c3f8:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800c3fc:	f7ff fd3a 	bl	800be74 <memcpy.isra.0>
 800c400:	68e3      	ldr	r3, [r4, #12]
 800c402:	462a      	mov	r2, r5
 800c404:	4641      	mov	r1, r8
 800c406:	4648      	mov	r0, r9
 800c408:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
 800c40c:	f7fe f90a 	bl	800a624 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800c410:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800c414:	069b      	lsls	r3, r3, #26
 800c416:	f100 80a2 	bmi.w	800c55e <E131Bridge::HandleDmx()+0x24e>
 800c41a:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800c41e:	b29a      	uxth	r2, r3
 800c420:	2a00      	cmp	r2, #0
 800c422:	f000 809f 	beq.w	800c564 <E131Bridge::HandleDmx()+0x254>
 800c426:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800c42a:	2a00      	cmp	r2, #0
 800c42c:	f040 809a 	bne.w	800c564 <E131Bridge::HandleDmx()+0x254>
 800c430:	ba5b      	rev16	r3, r3
 800c432:	b29b      	uxth	r3, r3
 800c434:	2f00      	cmp	r7, #0
 800c436:	f040 808f 	bne.w	800c558 <E131Bridge::HandleDmx()+0x248>
 800c43a:	2e00      	cmp	r6, #0
 800c43c:	f040 808c 	bne.w	800c558 <E131Bridge::HandleDmx()+0x248>
 800c440:	f8d4 2538 	ldr.w	r2, [r4, #1336]	; 0x538
 800c444:	f8d4 151c 	ldr.w	r1, [r4, #1308]	; 0x51c
 800c448:	3a00      	subs	r2, #0
 800c44a:	bf18      	it	ne
 800c44c:	2201      	movne	r2, #1
 800c44e:	3900      	subs	r1, #0
 800c450:	bf18      	it	ne
 800c452:	2101      	movne	r1, #1
 800c454:	4620      	mov	r0, r4
 800c456:	f7ff fdc3 	bl	800bfe0 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800c45a:	f240 1301 	movw	r3, #257	; 0x101
 800c45e:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800c462:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800c466:	2b00      	cmp	r3, #0
 800c468:	f040 8081 	bne.w	800c56e <E131Bridge::HandleDmx()+0x25e>
 800c46c:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c470:	f043 0302 	orr.w	r3, r3, #2
 800c474:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c478:	e780      	b.n	800c37c <E131Bridge::HandleDmx()+0x6c>
 800c47a:	d9ad      	bls.n	800c3d8 <E131Bridge::HandleDmx()+0xc8>
 800c47c:	2300      	movs	r3, #0
 800c47e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
 800c482:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
 800c486:	f884 34f5 	strb.w	r3, [r4, #1269]	; 0x4f5
 800c48a:	e7a3      	b.n	800c3d4 <E131Bridge::HandleDmx()+0xc4>
 800c48c:	2f00      	cmp	r7, #0
 800c48e:	f000 8089 	beq.w	800c5a4 <E131Bridge::HandleDmx()+0x294>
 800c492:	f1b9 0f00 	cmp.w	r9, #0
 800c496:	d154      	bne.n	800c542 <E131Bridge::HandleDmx()+0x232>
 800c498:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c49c:	f884 3530 	strb.w	r3, [r4, #1328]	; 0x530
 800c4a0:	e7ae      	b.n	800c400 <E131Bridge::HandleDmx()+0xf0>
 800c4a2:	b39e      	cbz	r6, 800c50c <E131Bridge::HandleDmx()+0x1fc>
 800c4a4:	f884 354c 	strb.w	r3, [r4, #1356]	; 0x54c
 800c4a8:	68e3      	ldr	r3, [r4, #12]
 800c4aa:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
 800c4ae:	f7fe f8ad 	bl	800a60c <lightset::Data::Get()>
 800c4b2:	4681      	mov	r9, r0
 800c4b4:	462a      	mov	r2, r5
 800c4b6:	4641      	mov	r1, r8
 800c4b8:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800c4bc:	f7ff fcda 	bl	800be74 <memcpy.isra.0>
 800c4c0:	462a      	mov	r2, r5
 800c4c2:	4641      	mov	r1, r8
 800c4c4:	f8c9 5600 	str.w	r5, [r9, #1536]	; 0x600
 800c4c8:	f509 6080 	add.w	r0, r9, #1024	; 0x400
 800c4cc:	f7ff fcd2 	bl	800be74 <memcpy.isra.0>
 800c4d0:	e79e      	b.n	800c410 <E131Bridge::HandleDmx()+0x100>
 800c4d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c4d4:	2210      	movs	r2, #16
 800c4d6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
 800c4da:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c4de:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c4e2:	f884 354c 	strb.w	r3, [r4, #1356]	; 0x54c
 800c4e6:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 800c4ea:	f7ff fcc3 	bl	800be74 <memcpy.isra.0>
 800c4ee:	68e3      	ldr	r3, [r4, #12]
 800c4f0:	4639      	mov	r1, r7
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
 800c4f8:	f7ff fe16 	bl	800c128 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800c4fc:	462a      	mov	r2, r5
 800c4fe:	4641      	mov	r1, r8
 800c500:	4638      	mov	r0, r7
 800c502:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
 800c506:	f7fe f8d3 	bl	800a6b0 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c50a:	e781      	b.n	800c410 <E131Bridge::HandleDmx()+0x100>
 800c50c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800c50e:	f884 3530 	strb.w	r3, [r4, #1328]	; 0x530
 800c512:	f8c4 251c 	str.w	r2, [r4, #1308]	; 0x51c
 800c516:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c51a:	2210      	movs	r2, #16
 800c51c:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800c520:	f7ff fca8 	bl	800be74 <memcpy.isra.0>
 800c524:	68e3      	ldr	r3, [r4, #12]
 800c526:	4631      	mov	r1, r6
 800c528:	4620      	mov	r0, r4
 800c52a:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
 800c52e:	f7ff fdfb 	bl	800c128 <E131Bridge::UpdateMergeStatus(unsigned int)>
 800c532:	462a      	mov	r2, r5
 800c534:	4641      	mov	r1, r8
 800c536:	4630      	mov	r0, r6
 800c538:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
 800c53c:	f7fe f88f 	bl	800a65e <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c540:	e766      	b.n	800c410 <E131Bridge::HandleDmx()+0x100>
 800c542:	b926      	cbnz	r6, 800c54e <E131Bridge::HandleDmx()+0x23e>
 800c544:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c548:	f884 3530 	strb.w	r3, [r4, #1328]	; 0x530
 800c54c:	e7ea      	b.n	800c524 <E131Bridge::HandleDmx()+0x214>
 800c54e:	481a      	ldr	r0, [pc, #104]	; (800c5b8 <E131Bridge::HandleDmx()+0x2a8>)
 800c550:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c554:	f007 b858 	b.w	8013608 <printf>
 800c558:	4632      	mov	r2, r6
 800c55a:	4639      	mov	r1, r7
 800c55c:	e77a      	b.n	800c454 <E131Bridge::HandleDmx()+0x144>
 800c55e:	2300      	movs	r3, #0
 800c560:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800c564:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f47f af7a 	bne.w	800c462 <E131Bridge::HandleDmx()+0x152>
 800c56e:	6865      	ldr	r5, [r4, #4]
 800c570:	f7fe f84c 	bl	800a60c <lightset::Data::Get()>
 800c574:	682b      	ldr	r3, [r5, #0]
 800c576:	2100      	movs	r1, #0
 800c578:	691e      	ldr	r6, [r3, #16]
 800c57a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800c57e:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
 800c582:	4628      	mov	r0, r5
 800c584:	47b0      	blx	r6
 800c586:	f894 1556 	ldrb.w	r1, [r4, #1366]	; 0x556
 800c58a:	2900      	cmp	r1, #0
 800c58c:	f47f af6e 	bne.w	800c46c <E131Bridge::HandleDmx()+0x15c>
 800c590:	6860      	ldr	r0, [r4, #4]
 800c592:	6803      	ldr	r3, [r0, #0]
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	4798      	blx	r3
 800c598:	2301      	movs	r3, #1
 800c59a:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800c59e:	f884 3556 	strb.w	r3, [r4, #1366]	; 0x556
 800c5a2:	e763      	b.n	800c46c <E131Bridge::HandleDmx()+0x15c>
 800c5a4:	f1b9 0f00 	cmp.w	r9, #0
 800c5a8:	d093      	beq.n	800c4d2 <E131Bridge::HandleDmx()+0x1c2>
 800c5aa:	2e00      	cmp	r6, #0
 800c5ac:	d0cf      	beq.n	800c54e <E131Bridge::HandleDmx()+0x23e>
 800c5ae:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c5b2:	f884 354c 	strb.w	r3, [r4, #1356]	; 0x54c
 800c5b6:	e79a      	b.n	800c4ee <E131Bridge::HandleDmx()+0x1de>
 800c5b8:	08016d8f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, sl, fp, sp, lr}

0800c5bc <E131Bridge::IsValidRoot()>:
 800c5bc:	b530      	push	{r4, r5, lr}
 800c5be:	4a0d      	ldr	r2, [pc, #52]	; (800c5f4 <E131Bridge::IsValidRoot()+0x38>)
 800c5c0:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 800c5c4:	f100 018b 	add.w	r1, r0, #139	; 0x8b
 800c5c8:	4299      	cmp	r1, r3
 800c5ca:	d109      	bne.n	800c5e0 <E131Bridge::IsValidRoot()+0x24>
 800c5cc:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800c5d0:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800c5d4:	d00c      	beq.n	800c5f0 <E131Bridge::IsValidRoot()+0x34>
 800c5d6:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800c5da:	4258      	negs	r0, r3
 800c5dc:	4158      	adcs	r0, r3
 800c5de:	bd30      	pop	{r4, r5, pc}
 800c5e0:	f812 4b01 	ldrb.w	r4, [r2], #1
 800c5e4:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800c5e8:	42a5      	cmp	r5, r4
 800c5ea:	d0ed      	beq.n	800c5c8 <E131Bridge::IsValidRoot()+0xc>
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	e7f6      	b.n	800c5de <E131Bridge::IsValidRoot()+0x22>
 800c5f0:	2001      	movs	r0, #1
 800c5f2:	e7f4      	b.n	800c5de <E131Bridge::IsValidRoot()+0x22>
 800c5f4:	08016e6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, sl, fp, sp, lr}

0800c5f8 <E131Bridge::IsValidDataPacket()>:
 800c5f8:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d10d      	bne.n	800c61c <E131Bridge::IsValidDataPacket()+0x24>
 800c600:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800c604:	2ba1      	cmp	r3, #161	; 0xa1
 800c606:	d109      	bne.n	800c61c <E131Bridge::IsValidDataPacket()+0x24>
 800c608:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800c60c:	b933      	cbnz	r3, 800c61c <E131Bridge::IsValidDataPacket()+0x24>
 800c60e:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800c612:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800c616:	4258      	negs	r0, r3
 800c618:	4158      	adcs	r0, r3
 800c61a:	4770      	bx	lr
 800c61c:	2000      	movs	r0, #0
 800c61e:	4770      	bx	lr

0800c620 <E131Bridge::Run()>:
 800c620:	b530      	push	{r4, r5, lr}
 800c622:	4601      	mov	r1, r0
 800c624:	4604      	mov	r4, r0
 800c626:	b085      	sub	sp, #20
 800c628:	f10d 030e 	add.w	r3, sp, #14
 800c62c:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800c630:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800c63a:	f002 fe43 	bl	800f2c4 <udp_recv>
 800c63e:	4b3a      	ldr	r3, [pc, #232]	; (800c728 <E131Bridge::Run()+0x108>)
 800c640:	681d      	ldr	r5, [r3, #0]
 800c642:	60e5      	str	r5, [r4, #12]
 800c644:	2800      	cmp	r0, #0
 800c646:	d138      	bne.n	800c6ba <E131Bridge::Run()+0x9a>
 800c648:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800c64c:	b16b      	cbz	r3, 800c66a <E131Bridge::Run()+0x4a>
 800c64e:	6923      	ldr	r3, [r4, #16]
 800c650:	1aed      	subs	r5, r5, r3
 800c652:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800c656:	429d      	cmp	r5, r3
 800c658:	d928      	bls.n	800c6ac <E131Bridge::Run()+0x8c>
 800c65a:	6863      	ldr	r3, [r4, #4]
 800c65c:	b9eb      	cbnz	r3, 800c69a <E131Bridge::Run()+0x7a>
 800c65e:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c662:	f023 0302 	bic.w	r3, r3, #2
 800c666:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c66a:	6963      	ldr	r3, [r4, #20]
 800c66c:	b12b      	cbz	r3, 800c67a <E131Bridge::Run()+0x5a>
 800c66e:	4620      	mov	r0, r4
 800c670:	f000 f944 	bl	800c8fc <E131Bridge::HandleDmxIn()>
 800c674:	4620      	mov	r0, r4
 800c676:	f000 f8c7 	bl	800c808 <E131Bridge::SendDiscoveryPacket()>
 800c67a:	7a23      	ldrb	r3, [r4, #8]
 800c67c:	b15b      	cbz	r3, 800c696 <E131Bridge::Run()+0x76>
 800c67e:	4b2b      	ldr	r3, [pc, #172]	; (800c72c <E131Bridge::Run()+0x10c>)
 800c680:	6818      	ldr	r0, [r3, #0]
 800c682:	6843      	ldr	r3, [r0, #4]
 800c684:	2b04      	cmp	r3, #4
 800c686:	d006      	beq.n	800c696 <E131Bridge::Run()+0x76>
 800c688:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d049      	beq.n	800c724 <E131Bridge::Run()+0x104>
 800c690:	2103      	movs	r1, #3
 800c692:	f006 fc0f 	bl	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 800c696:	b005      	add	sp, #20
 800c698:	bd30      	pop	{r4, r5, pc}
 800c69a:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1dd      	bne.n	800c65e <E131Bridge::Run()+0x3e>
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	4611      	mov	r1, r2
 800c6a8:	f7ff fdc0 	bl	800c22c <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800c6ac:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800c6b0:	1a9b      	subs	r3, r3, r2
 800c6b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6b6:	d3d8      	bcc.n	800c66a <E131Bridge::Run()+0x4a>
 800c6b8:	e7d1      	b.n	800c65e <E131Bridge::Run()+0x3e>
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f7ff ff7e 	bl	800c5bc <E131Bridge::IsValidRoot()>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d0e8      	beq.n	800c696 <E131Bridge::Run()+0x76>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800c6ca:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800c6ce:	6125      	str	r5, [r4, #16]
 800c6d0:	b15b      	cbz	r3, 800c6ea <E131Bridge::Run()+0xca>
 800c6d2:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800c6d6:	b943      	cbnz	r3, 800c6ea <E131Bridge::Run()+0xca>
 800c6d8:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800c6dc:	1aad      	subs	r5, r5, r2
 800c6de:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c6e2:	4295      	cmp	r5, r2
 800c6e4:	bf88      	it	hi
 800c6e6:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800c6ea:	6863      	ldr	r3, [r4, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0bc      	beq.n	800c66a <E131Bridge::Run()+0x4a>
 800c6f0:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800c6f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c6f8:	ba1a      	rev	r2, r3
 800c6fa:	d108      	bne.n	800c70e <E131Bridge::Run()+0xee>
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	f7ff ff7b 	bl	800c5f8 <E131Bridge::IsValidDataPacket()>
 800c702:	2800      	cmp	r0, #0
 800c704:	d0b1      	beq.n	800c66a <E131Bridge::Run()+0x4a>
 800c706:	4620      	mov	r0, r4
 800c708:	f7ff fe02 	bl	800c310 <E131Bridge::HandleDmx()>
 800c70c:	e7ad      	b.n	800c66a <E131Bridge::Run()+0x4a>
 800c70e:	2a08      	cmp	r2, #8
 800c710:	d1ab      	bne.n	800c66a <E131Bridge::Run()+0x4a>
 800c712:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800c716:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c71a:	d1a6      	bne.n	800c66a <E131Bridge::Run()+0x4a>
 800c71c:	4620      	mov	r0, r4
 800c71e:	f000 f959 	bl	800c9d4 <E131Bridge::HandleSynchronization()>
 800c722:	e7a2      	b.n	800c66a <E131Bridge::Run()+0x4a>
 800c724:	2102      	movs	r1, #2
 800c726:	e7b4      	b.n	800c692 <E131Bridge::Run()+0x72>
 800c728:	2000a1e4 	andcs	sl, r0, r4, ror #3
 800c72c:	2000a1c4 	andcs	sl, r0, r4, asr #3

0800c730 <E131Bridge::FillDiscoveryPacket()>:
 800c730:	2200      	movs	r2, #0
 800c732:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c736:	b510      	push	{r4, lr}
 800c738:	333c      	adds	r3, #60	; 0x3c
 800c73a:	005b      	lsls	r3, r3, #1
 800c73c:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800c740:	69c3      	ldr	r3, [r0, #28]
 800c742:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800c746:	428b      	cmp	r3, r1
 800c748:	d14a      	bne.n	800c7e0 <E131Bridge::FillDiscoveryPacket()+0xb0>
 800c74a:	69c3      	ldr	r3, [r0, #28]
 800c74c:	492d      	ldr	r1, [pc, #180]	; (800c804 <E131Bridge::FillDiscoveryPacket()+0xd4>)
 800c74e:	701a      	strb	r2, [r3, #0]
 800c750:	2210      	movs	r2, #16
 800c752:	705a      	strb	r2, [r3, #1]
 800c754:	1cda      	adds	r2, r3, #3
 800c756:	330f      	adds	r3, #15
 800c758:	4293      	cmp	r3, r2
 800c75a:	d144      	bne.n	800c7e6 <E131Bridge::FillDiscoveryPacket()+0xb6>
 800c75c:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c760:	69c3      	ldr	r3, [r0, #28]
 800c762:	3234      	adds	r2, #52	; 0x34
 800c764:	0052      	lsls	r2, r2, #1
 800c766:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800c76a:	ba52      	rev16	r2, r2
 800c76c:	821a      	strh	r2, [r3, #16]
 800c76e:	2200      	movs	r2, #0
 800c770:	749a      	strb	r2, [r3, #18]
 800c772:	74da      	strb	r2, [r3, #19]
 800c774:	751a      	strb	r2, [r3, #20]
 800c776:	2208      	movs	r2, #8
 800c778:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800c77c:	f803 2f15 	strb.w	r2, [r3, #21]!
 800c780:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800c784:	4291      	cmp	r1, r2
 800c786:	d133      	bne.n	800c7f0 <E131Bridge::FillDiscoveryPacket()+0xc0>
 800c788:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c78c:	69c3      	ldr	r3, [r0, #28]
 800c78e:	3229      	adds	r2, #41	; 0x29
 800c790:	0052      	lsls	r2, r2, #1
 800c792:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800c796:	ba52      	rev16	r2, r2
 800c798:	84da      	strh	r2, [r3, #38]	; 0x26
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c7a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800c7a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800c7a8:	2202      	movs	r2, #2
 800c7aa:	f803 2f2b 	strb.w	r2, [r3, #43]!
 800c7ae:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800c7b2:	4291      	cmp	r1, r2
 800c7b4:	d121      	bne.n	800c7fa <E131Bridge::FillDiscoveryPacket()+0xca>
 800c7b6:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c7ba:	69c2      	ldr	r2, [r0, #28]
 800c7bc:	3304      	adds	r3, #4
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800c7c4:	ba5b      	rev16	r3, r3
 800c7c6:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800c7d0:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800c7d4:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800c7d8:	2301      	movs	r3, #1
 800c7da:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800c7de:	bd10      	pop	{r4, pc}
 800c7e0:	f803 2b01 	strb.w	r2, [r3], #1
 800c7e4:	e7af      	b.n	800c746 <E131Bridge::FillDiscoveryPacket()+0x16>
 800c7e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c7ee:	e7b3      	b.n	800c758 <E131Bridge::FillDiscoveryPacket()+0x28>
 800c7f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7f8:	e7c4      	b.n	800c784 <E131Bridge::FillDiscoveryPacket()+0x54>
 800c7fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c802:	e7d6      	b.n	800c7b2 <E131Bridge::FillDiscoveryPacket()+0x82>
 800c804:	08016e6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, sl, fp, sp, lr}

0800c808 <E131Bridge::SendDiscoveryPacket()>:
 800c808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c80a:	f242 710f 	movw	r1, #9999	; 0x270f
 800c80e:	68c2      	ldr	r2, [r0, #12]
 800c810:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800c814:	4604      	mov	r4, r0
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	428b      	cmp	r3, r1
 800c81a:	d90e      	bls.n	800c83a <E131Bridge::SendDiscoveryPacket()+0x32>
 800c81c:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c820:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800c824:	b95b      	cbnz	r3, 800c83e <E131Bridge::SendDiscoveryPacket()+0x36>
 800c826:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800c82a:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	69e1      	ldr	r1, [r4, #28]
 800c832:	6a23      	ldr	r3, [r4, #32]
 800c834:	7820      	ldrb	r0, [r4, #0]
 800c836:	f002 fda1 	bl	800f37c <udp_send>
 800c83a:	b004      	add	sp, #16
 800c83c:	bd10      	pop	{r4, pc}
 800c83e:	2300      	movs	r3, #0
 800c840:	f10d 020e 	add.w	r2, sp, #14
 800c844:	4619      	mov	r1, r3
 800c846:	f7ff fc5b 	bl	800c100 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c84a:	2800      	cmp	r0, #0
 800c84c:	d0eb      	beq.n	800c826 <E131Bridge::SendDiscoveryPacket()+0x1e>
 800c84e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c852:	69e2      	ldr	r2, [r4, #28]
 800c854:	ba5b      	rev16	r3, r3
 800c856:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
 800c85a:	e7e4      	b.n	800c826 <E131Bridge::SendDiscoveryPacket()+0x1e>

0800c85c <memcpy.isra.0>:
 800c85c:	3801      	subs	r0, #1
 800c85e:	440a      	add	r2, r1
 800c860:	4291      	cmp	r1, r2
 800c862:	d100      	bne.n	800c866 <memcpy.isra.0+0xa>
 800c864:	4770      	bx	lr
 800c866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c86a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c86e:	e7f7      	b.n	800c860 <memcpy.isra.0+0x4>

0800c870 <E131Bridge::FillDataPacket()>:
 800c870:	b570      	push	{r4, r5, r6, lr}
 800c872:	2400      	movs	r4, #0
 800c874:	2610      	movs	r6, #16
 800c876:	4605      	mov	r5, r0
 800c878:	6980      	ldr	r0, [r0, #24]
 800c87a:	220c      	movs	r2, #12
 800c87c:	7046      	strb	r6, [r0, #1]
 800c87e:	7004      	strb	r4, [r0, #0]
 800c880:	7084      	strb	r4, [r0, #2]
 800c882:	70c4      	strb	r4, [r0, #3]
 800c884:	491c      	ldr	r1, [pc, #112]	; (800c8f8 <E131Bridge::FillDataPacket()+0x88>)
 800c886:	3004      	adds	r0, #4
 800c888:	f7ff ffe8 	bl	800c85c <memcpy.isra.0>
 800c88c:	2304      	movs	r3, #4
 800c88e:	4632      	mov	r2, r6
 800c890:	2602      	movs	r6, #2
 800c892:	69a8      	ldr	r0, [r5, #24]
 800c894:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800c898:	7543      	strb	r3, [r0, #21]
 800c89a:	7484      	strb	r4, [r0, #18]
 800c89c:	74c4      	strb	r4, [r0, #19]
 800c89e:	7504      	strb	r4, [r0, #20]
 800c8a0:	3016      	adds	r0, #22
 800c8a2:	f7ff ffdb 	bl	800c85c <memcpy.isra.0>
 800c8a6:	69a8      	ldr	r0, [r5, #24]
 800c8a8:	2240      	movs	r2, #64	; 0x40
 800c8aa:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800c8ae:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800c8b2:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800c8b6:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800c8ba:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800c8be:	302c      	adds	r0, #44	; 0x2c
 800c8c0:	f7ff ffcc 	bl	800c85c <memcpy.isra.0>
 800c8c4:	22a1      	movs	r2, #161	; 0xa1
 800c8c6:	69ab      	ldr	r3, [r5, #24]
 800c8c8:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800c8cc:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800c8d0:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800c8d4:	69ab      	ldr	r3, [r5, #24]
 800c8d6:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800c8da:	69ab      	ldr	r3, [r5, #24]
 800c8dc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	69ab      	ldr	r3, [r5, #24]
 800c8e4:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800c8e8:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800c8ec:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800c8f0:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800c8f4:	bd70      	pop	{r4, r5, r6, pc}
 800c8f6:	bf00      	nop
 800c8f8:	08016e6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, sl, fp, sp, lr}

0800c8fc <E131Bridge::HandleDmxIn()>:
 800c8fc:	b530      	push	{r4, r5, lr}
 800c8fe:	f890 355a 	ldrb.w	r3, [r0, #1370]	; 0x55a
 800c902:	4604      	mov	r4, r0
 800c904:	b085      	sub	sp, #20
 800c906:	2b00      	cmp	r3, #0
 800c908:	d050      	beq.n	800c9ac <E131Bridge::HandleDmxIn()+0xb0>
 800c90a:	6940      	ldr	r0, [r0, #20]
 800c90c:	2100      	movs	r1, #0
 800c90e:	6803      	ldr	r3, [r0, #0]
 800c910:	aa02      	add	r2, sp, #8
 800c912:	691d      	ldr	r5, [r3, #16]
 800c914:	ab03      	add	r3, sp, #12
 800c916:	47a8      	blx	r5
 800c918:	4601      	mov	r1, r0
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d048      	beq.n	800c9b0 <E131Bridge::HandleDmxIn()+0xb4>
 800c91e:	9a02      	ldr	r2, [sp, #8]
 800c920:	69a0      	ldr	r0, [r4, #24]
 800c922:	b293      	uxth	r3, r2
 800c924:	f103 056d 	add.w	r5, r3, #109	; 0x6d
 800c928:	f445 45e0 	orr.w	r5, r5, #28672	; 0x7000
 800c92c:	ba6d      	rev16	r5, r5
 800c92e:	8205      	strh	r5, [r0, #16]
 800c930:	f103 0557 	add.w	r5, r3, #87	; 0x57
 800c934:	f445 45e0 	orr.w	r5, r5, #28672	; 0x7000
 800c938:	ba6d      	rev16	r5, r5
 800c93a:	84c5      	strh	r5, [r0, #38]	; 0x26
 800c93c:	f894 5561 	ldrb.w	r5, [r4, #1377]	; 0x561
 800c940:	330a      	adds	r3, #10
 800c942:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
 800c946:	f894 0560 	ldrb.w	r0, [r4, #1376]	; 0x560
 800c94a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800c94e:	1c45      	adds	r5, r0, #1
 800c950:	f884 5560 	strb.w	r5, [r4, #1376]	; 0x560
 800c954:	69a5      	ldr	r5, [r4, #24]
 800c956:	ba5b      	rev16	r3, r3
 800c958:	f885 006f 	strb.w	r0, [r5, #111]	; 0x6f
 800c95c:	f8b4 5558 	ldrh.w	r5, [r4, #1368]	; 0x558
 800c960:	69a0      	ldr	r0, [r4, #24]
 800c962:	ba6d      	rev16	r5, r5
 800c964:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800c968:	f8a0 5071 	strh.w	r5, [r0, #113]	; 0x71
 800c96c:	307d      	adds	r0, #125	; 0x7d
 800c96e:	f7ff ff75 	bl	800c85c <memcpy.isra.0>
 800c972:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800c976:	69a1      	ldr	r1, [r4, #24]
 800c978:	ba53      	rev16	r3, r2
 800c97a:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800c97e:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800c982:	327d      	adds	r2, #125	; 0x7d
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	b292      	uxth	r2, r2
 800c988:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
 800c98c:	7820      	ldrb	r0, [r4, #0]
 800c98e:	f002 fcf5 	bl	800f37c <udp_send>
 800c992:	4a0f      	ldr	r2, [pc, #60]	; (800c9d0 <E131Bridge::HandleDmxIn()+0xd4>)
 800c994:	6813      	ldr	r3, [r2, #0]
 800c996:	07d9      	lsls	r1, r3, #31
 800c998:	d408      	bmi.n	800c9ac <E131Bridge::HandleDmxIn()+0xb0>
 800c99a:	f043 0301 	orr.w	r3, r3, #1
 800c99e:	6013      	str	r3, [r2, #0]
 800c9a0:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c9a4:	f043 0301 	orr.w	r3, r3, #1
 800c9a8:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c9ac:	b005      	add	sp, #20
 800c9ae:	bd30      	pop	{r4, r5, pc}
 800c9b0:	9b03      	ldr	r3, [sp, #12]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1fa      	bne.n	800c9ac <E131Bridge::HandleDmxIn()+0xb0>
 800c9b6:	4a06      	ldr	r2, [pc, #24]	; (800c9d0 <E131Bridge::HandleDmxIn()+0xd4>)
 800c9b8:	6813      	ldr	r3, [r2, #0]
 800c9ba:	f023 0301 	bic.w	r3, r3, #1
 800c9be:	6013      	str	r3, [r2, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1f3      	bne.n	800c9ac <E131Bridge::HandleDmxIn()+0xb0>
 800c9c4:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c9c8:	f023 0301 	bic.w	r3, r3, #1
 800c9cc:	e7ec      	b.n	800c9a8 <E131Bridge::HandleDmxIn()+0xac>
 800c9ce:	bf00      	nop
 800c9d0:	20000c80 	andcs	r0, r0, r0, lsl #25

0800c9d4 <E131Bridge::HandleSynchronization()>:
 800c9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d8:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800c9dc:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800c9e0:	ba5b      	rev16	r3, r3
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	d00a      	beq.n	800ca00 <E131Bridge::HandleSynchronization()+0x2c>
 800c9ea:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d006      	beq.n	800ca00 <E131Bridge::HandleSynchronization()+0x2c>
 800c9f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f6:	4b1b      	ldr	r3, [pc, #108]	; (800ca64 <E131Bridge::HandleSynchronization()+0x90>)
 800c9f8:	2102      	movs	r1, #2
 800c9fa:	6818      	ldr	r0, [r3, #0]
 800c9fc:	f006 ba5a 	b.w	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 800ca00:	68e3      	ldr	r3, [r4, #12]
 800ca02:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800ca06:	f894 3516 	ldrb.w	r3, [r4, #1302]	; 0x516
 800ca0a:	b30b      	cbz	r3, 800ca50 <E131Bridge::HandleSynchronization()+0x7c>
 800ca0c:	4d16      	ldr	r5, [pc, #88]	; (800ca68 <E131Bridge::HandleSynchronization()+0x94>)
 800ca0e:	6860      	ldr	r0, [r4, #4]
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	4e16      	ldr	r6, [pc, #88]	; (800ca6c <E131Bridge::HandleSynchronization()+0x98>)
 800ca14:	07da      	lsls	r2, r3, #31
 800ca16:	bf5c      	itt	pl
 800ca18:	2301      	movpl	r3, #1
 800ca1a:	602b      	strpl	r3, [r5, #0]
 800ca1c:	6803      	ldr	r3, [r0, #0]
 800ca1e:	2100      	movs	r1, #0
 800ca20:	691f      	ldr	r7, [r3, #16]
 800ca22:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800ca26:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800ca2a:	47b8      	blx	r7
 800ca2c:	f894 1556 	ldrb.w	r1, [r4, #1366]	; 0x556
 800ca30:	b931      	cbnz	r1, 800ca40 <E131Bridge::HandleSynchronization()+0x6c>
 800ca32:	6860      	ldr	r0, [r4, #4]
 800ca34:	6803      	ldr	r3, [r0, #0]
 800ca36:	689b      	ldr	r3, [r3, #8]
 800ca38:	4798      	blx	r3
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	f884 3556 	strb.w	r3, [r4, #1366]	; 0x556
 800ca40:	682b      	ldr	r3, [r5, #0]
 800ca42:	07db      	lsls	r3, r3, #31
 800ca44:	bf5c      	itt	pl
 800ca46:	2301      	movpl	r3, #1
 800ca48:	602b      	strpl	r3, [r5, #0]
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	f8c6 3600 	str.w	r3, [r6, #1536]	; 0x600
 800ca50:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ca52:	b120      	cbz	r0, 800ca5e <E131Bridge::HandleSynchronization()+0x8a>
 800ca54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca58:	6803      	ldr	r3, [r0, #0]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	4718      	bx	r3
 800ca5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca62:	bf00      	nop
 800ca64:	2000a1c4 	andcs	sl, r0, r4, asr #3
 800ca68:	20000660 	andcs	r0, r0, r0, ror #12
 800ca6c:	20000664 	andcs	r0, r0, r4, ror #12

0800ca70 <E131Bridge::Print()>:
 800ca70:	b530      	push	{r4, r5, lr}
 800ca72:	2500      	movs	r5, #0
 800ca74:	4604      	mov	r4, r0
 800ca76:	b08d      	sub	sp, #52	; 0x34
 800ca78:	a902      	add	r1, sp, #8
 800ca7a:	3024      	adds	r0, #36	; 0x24
 800ca7c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800ca80:	f001 f992 	bl	800dda8 <uuid_unparse>
 800ca84:	4822      	ldr	r0, [pc, #136]	; (800cb10 <E131Bridge::Print()+0xa0>)
 800ca86:	f006 fdbf 	bl	8013608 <printf>
 800ca8a:	4b22      	ldr	r3, [pc, #136]	; (800cb14 <E131Bridge::Print()+0xa4>)
 800ca8c:	4822      	ldr	r0, [pc, #136]	; (800cb18 <E131Bridge::Print()+0xa8>)
 800ca8e:	7819      	ldrb	r1, [r3, #0]
 800ca90:	785a      	ldrb	r2, [r3, #1]
 800ca92:	f006 fdb9 	bl	8013608 <printf>
 800ca96:	4821      	ldr	r0, [pc, #132]	; (800cb1c <E131Bridge::Print()+0xac>)
 800ca98:	a902      	add	r1, sp, #8
 800ca9a:	f006 fdb5 	bl	8013608 <printf>
 800ca9e:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800caa2:	b1bb      	cbz	r3, 800cad4 <E131Bridge::Print()+0x64>
 800caa4:	481e      	ldr	r0, [pc, #120]	; (800cb20 <E131Bridge::Print()+0xb0>)
 800caa6:	f006 fdaf 	bl	8013608 <printf>
 800caaa:	2301      	movs	r3, #1
 800caac:	4629      	mov	r1, r5
 800caae:	4620      	mov	r0, r4
 800cab0:	f10d 0206 	add.w	r2, sp, #6
 800cab4:	f7ff fb24 	bl	800c100 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800cab8:	b160      	cbz	r0, 800cad4 <E131Bridge::Print()+0x64>
 800caba:	f8d4 1550 	ldr.w	r1, [r4, #1360]	; 0x550
 800cabe:	4a19      	ldr	r2, [pc, #100]	; (800cb24 <E131Bridge::Print()+0xb4>)
 800cac0:	4b19      	ldr	r3, [pc, #100]	; (800cb28 <E131Bridge::Print()+0xb8>)
 800cac2:	481a      	ldr	r0, [pc, #104]	; (800cb2c <E131Bridge::Print()+0xbc>)
 800cac4:	42a9      	cmp	r1, r5
 800cac6:	bf18      	it	ne
 800cac8:	4613      	movne	r3, r2
 800caca:	4629      	mov	r1, r5
 800cacc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cad0:	f006 fd9a 	bl	8013608 <printf>
 800cad4:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800cad8:	b193      	cbz	r3, 800cb00 <E131Bridge::Print()+0x90>
 800cada:	4815      	ldr	r0, [pc, #84]	; (800cb30 <E131Bridge::Print()+0xc0>)
 800cadc:	f006 fd94 	bl	8013608 <printf>
 800cae0:	2300      	movs	r3, #0
 800cae2:	4620      	mov	r0, r4
 800cae4:	4619      	mov	r1, r3
 800cae6:	f10d 0206 	add.w	r2, sp, #6
 800caea:	f7ff fb09 	bl	800c100 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800caee:	b138      	cbz	r0, 800cb00 <E131Bridge::Print()+0x90>
 800caf0:	2100      	movs	r1, #0
 800caf2:	f894 3561 	ldrb.w	r3, [r4, #1377]	; 0x561
 800caf6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cafa:	480e      	ldr	r0, [pc, #56]	; (800cb34 <E131Bridge::Print()+0xc4>)
 800cafc:	f006 fd84 	bl	8013608 <printf>
 800cb00:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800cb04:	b113      	cbz	r3, 800cb0c <E131Bridge::Print()+0x9c>
 800cb06:	480c      	ldr	r0, [pc, #48]	; (800cb38 <E131Bridge::Print()+0xc8>)
 800cb08:	f006 fd7e 	bl	8013608 <printf>
 800cb0c:	b00d      	add	sp, #52	; 0x34
 800cb0e:	bd30      	pop	{r4, r5, pc}
 800cb10:	08016dbc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, sl, fp, sp, lr}
 800cb14:	08016e77 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
 800cb18:	08016dc4 	stmdaeq	r1, {r2, r6, r7, r8, sl, fp, sp, lr}
 800cb1c:	08016dd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, r8, sl, fp, sp, lr}
 800cb20:	08016ba5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, fp, sp, lr}
 800cb24:	08016b4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, fp, sp, lr}
 800cb28:	08016b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, sp, lr}
 800cb2c:	08016de7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, sl, fp, sp, lr}
 800cb30:	08016bc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, fp, sp, lr}
 800cb34:	08016e06 	stmdaeq	r1, {r1, r2, r9, sl, fp, sp, lr}
 800cb38:	08016e25 	stmdaeq	r1, {r0, r2, r5, r9, sl, fp, sp, lr}

0800cb3c <memcmp>:
 800cb3c:	4402      	add	r2, r0
 800cb3e:	4290      	cmp	r0, r2
 800cb40:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800cb44:	d106      	bne.n	800cb54 <memcmp+0x18>
 800cb46:	2000      	movs	r0, #0
 800cb48:	4770      	bx	lr
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	4290      	cmp	r0, r2
 800cb4e:	d102      	bne.n	800cb56 <memcmp+0x1a>
 800cb50:	2000      	movs	r0, #0
 800cb52:	e006      	b.n	800cb62 <memcmp+0x26>
 800cb54:	b510      	push	{r4, lr}
 800cb56:	7803      	ldrb	r3, [r0, #0]
 800cb58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cb5c:	42a3      	cmp	r3, r4
 800cb5e:	d0f4      	beq.n	800cb4a <memcmp+0xe>
 800cb60:	1b18      	subs	r0, r3, r4
 800cb62:	bd10      	pop	{r4, pc}

0800cb64 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800cb64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb66:	88c6      	ldrh	r6, [r0, #6]
 800cb68:	8885      	ldrh	r5, [r0, #4]
 800cb6a:	42ae      	cmp	r6, r5
 800cb6c:	d216      	bcs.n	800cb9c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800cb6e:	4604      	mov	r4, r0
 800cb70:	6800      	ldr	r0, [r0, #0]
 800cb72:	1bad      	subs	r5, r5, r6
 800cb74:	4430      	add	r0, r6
 800cb76:	7a26      	ldrb	r6, [r4, #8]
 800cb78:	b923      	cbnz	r3, 800cb84 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800cb7a:	b926      	cbnz	r6, 800cb86 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800cb7c:	9200      	str	r2, [sp, #0]
 800cb7e:	460b      	mov	r3, r1
 800cb80:	4a09      	ldr	r2, [pc, #36]	; (800cba8 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800cb82:	e003      	b.n	800cb8c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800cb84:	b166      	cbz	r6, 800cba0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800cb86:	460b      	mov	r3, r1
 800cb88:	9200      	str	r2, [sp, #0]
 800cb8a:	4a08      	ldr	r2, [pc, #32]	; (800cbac <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	f006 fd63 	bl	8013658 <snprintf>
 800cb92:	4285      	cmp	r5, r0
 800cb94:	bfa2      	ittt	ge
 800cb96:	88e3      	ldrhge	r3, [r4, #6]
 800cb98:	181b      	addge	r3, r3, r0
 800cb9a:	80e3      	strhge	r3, [r4, #6]
 800cb9c:	b002      	add	sp, #8
 800cb9e:	bd70      	pop	{r4, r5, r6, pc}
 800cba0:	9200      	str	r2, [sp, #0]
 800cba2:	460b      	mov	r3, r1
 800cba4:	4a02      	ldr	r2, [pc, #8]	; (800cbb0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800cba6:	e7f1      	b.n	800cb8c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800cba8:	08015cb8 	stmdaeq	r1, {r3, r4, r5, r7, sl, fp, ip, lr}
 800cbac:	08015cad 	stmdaeq	r1, {r0, r2, r3, r5, r7, sl, fp, ip, lr}
 800cbb0:	08015cb9 	stmdaeq	r1, {r0, r3, r4, r5, r7, sl, fp, ip, lr}

0800cbb4 <E131Params::E131Params(E131ParamsStore*)>:
 800cbb4:	b510      	push	{r4, lr}
 800cbb6:	2210      	movs	r2, #16
 800cbb8:	4604      	mov	r4, r0
 800cbba:	f840 1b04 	str.w	r1, [r0], #4
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	f006 fb08 	bl	80131d4 <memset>
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	7322      	strb	r2, [r4, #12]
 800cbc8:	2264      	movs	r2, #100	; 0x64
 800cbca:	2301      	movs	r3, #1
 800cbcc:	75a2      	strb	r2, [r4, #22]
 800cbce:	4a04      	ldr	r2, [pc, #16]	; (800cbe0 <E131Params::E131Params(E131ParamsStore*)+0x2c>)
 800cbd0:	72e3      	strb	r3, [r4, #11]
 800cbd2:	6811      	ldr	r1, [r2, #0]
 800cbd4:	82a3      	strh	r3, [r4, #20]
 800cbd6:	b901      	cbnz	r1, 800cbda <E131Params::E131Params(E131ParamsStore*)+0x26>
 800cbd8:	6013      	str	r3, [r2, #0]
 800cbda:	4620      	mov	r0, r4
 800cbdc:	bd10      	pop	{r4, pc}
 800cbde:	bf00      	nop
 800cbe0:	20000c84 	andcs	r0, r0, r4, lsl #25

0800cbe4 <E131Params::Load(char const*, unsigned int)>:
 800cbe4:	6803      	ldr	r3, [r0, #0]
 800cbe6:	b1d3      	cbz	r3, 800cc1e <E131Params::Load(char const*, unsigned int)+0x3a>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbec:	460d      	mov	r5, r1
 800cbee:	4616      	mov	r6, r2
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	6043      	str	r3, [r0, #4]
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	490a      	ldr	r1, [pc, #40]	; (800cc20 <E131Params::Load(char const*, unsigned int)+0x3c>)
 800cbf8:	4668      	mov	r0, sp
 800cbfa:	f005 fd11 	bl	8012620 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800cbfe:	4632      	mov	r2, r6
 800cc00:	4629      	mov	r1, r5
 800cc02:	4668      	mov	r0, sp
 800cc04:	f005 fd10 	bl	8012628 <ReadConfigFile::Read(char const*, unsigned int)>
 800cc08:	4621      	mov	r1, r4
 800cc0a:	f851 0b04 	ldr.w	r0, [r1], #4
 800cc0e:	6803      	ldr	r3, [r0, #0]
 800cc10:	689b      	ldr	r3, [r3, #8]
 800cc12:	4798      	blx	r3
 800cc14:	4668      	mov	r0, sp
 800cc16:	f005 fd06 	bl	8012626 <ReadConfigFile::~ReadConfigFile()>
 800cc1a:	b002      	add	sp, #8
 800cc1c:	bd70      	pop	{r4, r5, r6, pc}
 800cc1e:	4770      	bx	lr
 800cc20:	0800ce6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, sl, fp, lr, pc}

0800cc24 <E131Params::callbackFunction(char const*)>:
 800cc24:	b570      	push	{r4, r5, r6, lr}
 800cc26:	460d      	mov	r5, r1
 800cc28:	2608      	movs	r6, #8
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	4985      	ldr	r1, [pc, #532]	; (800ce44 <E131Params::callbackFunction(char const*)+0x220>)
 800cc30:	4628      	mov	r0, r5
 800cc32:	ab01      	add	r3, sp, #4
 800cc34:	eb0d 0206 	add.w	r2, sp, r6
 800cc38:	9601      	str	r6, [sp, #4]
 800cc3a:	f005 fd29 	bl	8012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	f040 80de 	bne.w	800ce00 <E131Params::callbackFunction(char const*)+0x1dc>
 800cc44:	2204      	movs	r2, #4
 800cc46:	4980      	ldr	r1, [pc, #512]	; (800ce48 <E131Params::callbackFunction(char const*)+0x224>)
 800cc48:	eb0d 0006 	add.w	r0, sp, r6
 800cc4c:	f7ff ff76 	bl	800cb3c <memcmp>
 800cc50:	6865      	ldr	r5, [r4, #4]
 800cc52:	b1a0      	cbz	r0, 800cc7e <E131Params::callbackFunction(char const*)+0x5a>
 800cc54:	2203      	movs	r2, #3
 800cc56:	497d      	ldr	r1, [pc, #500]	; (800ce4c <E131Params::callbackFunction(char const*)+0x228>)
 800cc58:	eb0d 0006 	add.w	r0, sp, r6
 800cc5c:	f7ff ff6e 	bl	800cb3c <memcmp>
 800cc60:	b1a8      	cbz	r0, 800cc8e <E131Params::callbackFunction(char const*)+0x6a>
 800cc62:	2202      	movs	r2, #2
 800cc64:	497a      	ldr	r1, [pc, #488]	; (800ce50 <E131Params::callbackFunction(char const*)+0x22c>)
 800cc66:	eb0d 0006 	add.w	r0, sp, r6
 800cc6a:	f7ff ff67 	bl	800cb3c <memcmp>
 800cc6e:	b190      	cbz	r0, 800cc96 <E131Params::callbackFunction(char const*)+0x72>
 800cc70:	4632      	mov	r2, r6
 800cc72:	4978      	ldr	r1, [pc, #480]	; (800ce54 <E131Params::callbackFunction(char const*)+0x230>)
 800cc74:	eb0d 0006 	add.w	r0, sp, r6
 800cc78:	f7ff ff60 	bl	800cb3c <memcmp>
 800cc7c:	b168      	cbz	r0, 800cc9a <E131Params::callbackFunction(char const*)+0x76>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	f025 0501 	bic.w	r5, r5, #1
 800cc84:	6065      	str	r5, [r4, #4]
 800cc86:	f8a4 3009 	strh.w	r3, [r4, #9]
 800cc8a:	b006      	add	sp, #24
 800cc8c:	bd70      	pop	{r4, r5, r6, pc}
 800cc8e:	2301      	movs	r3, #1
 800cc90:	f045 0501 	orr.w	r5, r5, #1
 800cc94:	e7f6      	b.n	800cc84 <E131Params::callbackFunction(char const*)+0x60>
 800cc96:	2302      	movs	r3, #2
 800cc98:	e7fa      	b.n	800cc90 <E131Params::callbackFunction(char const*)+0x6c>
 800cc9a:	2303      	movs	r3, #3
 800cc9c:	e7f8      	b.n	800cc90 <E131Params::callbackFunction(char const*)+0x6c>
 800cc9e:	2303      	movs	r3, #3
 800cca0:	4628      	mov	r0, r5
 800cca2:	9301      	str	r3, [sp, #4]
 800cca4:	496c      	ldr	r1, [pc, #432]	; (800ce58 <E131Params::callbackFunction(char const*)+0x234>)
 800cca6:	ab01      	add	r3, sp, #4
 800cca8:	aa02      	add	r2, sp, #8
 800ccaa:	f005 fcf1 	bl	8012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ccae:	b9e0      	cbnz	r0, 800ccea <E131Params::callbackFunction(char const*)+0xc6>
 800ccb0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800ccb4:	6863      	ldr	r3, [r4, #4]
 800ccb6:	f042 0220 	orr.w	r2, r2, #32
 800ccba:	2a6c      	cmp	r2, #108	; 0x6c
 800ccbc:	d110      	bne.n	800cce0 <E131Params::callbackFunction(char const*)+0xbc>
 800ccbe:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800ccc2:	f042 0220 	orr.w	r2, r2, #32
 800ccc6:	2a74      	cmp	r2, #116	; 0x74
 800ccc8:	d10a      	bne.n	800cce0 <E131Params::callbackFunction(char const*)+0xbc>
 800ccca:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800ccce:	f042 0220 	orr.w	r2, r2, #32
 800ccd2:	2a70      	cmp	r2, #112	; 0x70
 800ccd4:	d104      	bne.n	800cce0 <E131Params::callbackFunction(char const*)+0xbc>
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccdc:	73a2      	strb	r2, [r4, #14]
 800ccde:	e0ab      	b.n	800ce38 <E131Params::callbackFunction(char const*)+0x214>
 800cce0:	2200      	movs	r2, #0
 800cce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cce6:	73a2      	strb	r2, [r4, #14]
 800cce8:	e0a6      	b.n	800ce38 <E131Params::callbackFunction(char const*)+0x214>
 800ccea:	2307      	movs	r3, #7
 800ccec:	4628      	mov	r0, r5
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	495a      	ldr	r1, [pc, #360]	; (800ce5c <E131Params::callbackFunction(char const*)+0x238>)
 800ccf2:	ab01      	add	r3, sp, #4
 800ccf4:	aa02      	add	r2, sp, #8
 800ccf6:	f005 fccb 	bl	8012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	d157      	bne.n	800cdae <E131Params::callbackFunction(char const*)+0x18a>
 800ccfe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cd02:	f043 0320 	orr.w	r3, r3, #32
 800cd06:	2b69      	cmp	r3, #105	; 0x69
 800cd08:	d11f      	bne.n	800cd4a <E131Params::callbackFunction(char const*)+0x126>
 800cd0a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800cd0e:	f043 0320 	orr.w	r3, r3, #32
 800cd12:	2b6e      	cmp	r3, #110	; 0x6e
 800cd14:	d142      	bne.n	800cd9c <E131Params::callbackFunction(char const*)+0x178>
 800cd16:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800cd1a:	f043 0320 	orr.w	r3, r3, #32
 800cd1e:	2b70      	cmp	r3, #112	; 0x70
 800cd20:	d13c      	bne.n	800cd9c <E131Params::callbackFunction(char const*)+0x178>
 800cd22:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800cd26:	f043 0320 	orr.w	r3, r3, #32
 800cd2a:	2b75      	cmp	r3, #117	; 0x75
 800cd2c:	d136      	bne.n	800cd9c <E131Params::callbackFunction(char const*)+0x178>
 800cd2e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cd32:	f043 0320 	orr.w	r3, r3, #32
 800cd36:	3b74      	subs	r3, #116	; 0x74
 800cd38:	bf18      	it	ne
 800cd3a:	2301      	movne	r3, #1
 800cd3c:	8aa2      	ldrh	r2, [r4, #20]
 800cd3e:	f022 0203 	bic.w	r2, r2, #3
 800cd42:	b292      	uxth	r2, r2
 800cd44:	bb63      	cbnz	r3, 800cda0 <E131Params::callbackFunction(char const*)+0x17c>
 800cd46:	82a2      	strh	r2, [r4, #20]
 800cd48:	e79f      	b.n	800cc8a <E131Params::callbackFunction(char const*)+0x66>
 800cd4a:	2b64      	cmp	r3, #100	; 0x64
 800cd4c:	d126      	bne.n	800cd9c <E131Params::callbackFunction(char const*)+0x178>
 800cd4e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800cd52:	f043 0320 	orr.w	r3, r3, #32
 800cd56:	2b69      	cmp	r3, #105	; 0x69
 800cd58:	d120      	bne.n	800cd9c <E131Params::callbackFunction(char const*)+0x178>
 800cd5a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800cd5e:	f043 0320 	orr.w	r3, r3, #32
 800cd62:	2b73      	cmp	r3, #115	; 0x73
 800cd64:	d11a      	bne.n	800cd9c <E131Params::callbackFunction(char const*)+0x178>
 800cd66:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800cd6a:	f043 0320 	orr.w	r3, r3, #32
 800cd6e:	2b61      	cmp	r3, #97	; 0x61
 800cd70:	d114      	bne.n	800cd9c <E131Params::callbackFunction(char const*)+0x178>
 800cd72:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cd76:	f043 0320 	orr.w	r3, r3, #32
 800cd7a:	2b62      	cmp	r3, #98	; 0x62
 800cd7c:	d10e      	bne.n	800cd9c <E131Params::callbackFunction(char const*)+0x178>
 800cd7e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800cd82:	f043 0320 	orr.w	r3, r3, #32
 800cd86:	2b6c      	cmp	r3, #108	; 0x6c
 800cd88:	d108      	bne.n	800cd9c <E131Params::callbackFunction(char const*)+0x178>
 800cd8a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800cd8e:	f043 0320 	orr.w	r3, r3, #32
 800cd92:	2b65      	cmp	r3, #101	; 0x65
 800cd94:	bf14      	ite	ne
 800cd96:	2301      	movne	r3, #1
 800cd98:	2302      	moveq	r3, #2
 800cd9a:	e7cf      	b.n	800cd3c <E131Params::callbackFunction(char const*)+0x118>
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e7cd      	b.n	800cd3c <E131Params::callbackFunction(char const*)+0x118>
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	bf0c      	ite	eq
 800cda4:	f042 0202 	orreq.w	r2, r2, #2
 800cda8:	f042 0201 	orrne.w	r2, r2, #1
 800cdac:	e7cb      	b.n	800cd46 <E131Params::callbackFunction(char const*)+0x122>
 800cdae:	4628      	mov	r0, r5
 800cdb0:	492b      	ldr	r1, [pc, #172]	; (800ce60 <E131Params::callbackFunction(char const*)+0x23c>)
 800cdb2:	f10d 0201 	add.w	r2, sp, #1
 800cdb6:	f005 fce3 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cdba:	b178      	cbz	r0, 800cddc <E131Params::callbackFunction(char const*)+0x1b8>
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	4929      	ldr	r1, [pc, #164]	; (800ce64 <E131Params::callbackFunction(char const*)+0x240>)
 800cdc0:	f10d 0201 	add.w	r2, sp, #1
 800cdc4:	f005 fcdc 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f47f af5e 	bne.w	800cc8a <E131Params::callbackFunction(char const*)+0x66>
 800cdce:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cdd2:	6863      	ldr	r3, [r4, #4]
 800cdd4:	b392      	cbz	r2, 800ce3c <E131Params::callbackFunction(char const*)+0x218>
 800cdd6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cdda:	e02d      	b.n	800ce38 <E131Params::callbackFunction(char const*)+0x214>
 800cddc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cde0:	6863      	ldr	r3, [r4, #4]
 800cde2:	1e51      	subs	r1, r2, #1
 800cde4:	b2c9      	uxtb	r1, r1
 800cde6:	29c7      	cmp	r1, #199	; 0xc7
 800cde8:	d805      	bhi.n	800cdf6 <E131Params::callbackFunction(char const*)+0x1d2>
 800cdea:	2a64      	cmp	r2, #100	; 0x64
 800cdec:	d003      	beq.n	800cdf6 <E131Params::callbackFunction(char const*)+0x1d2>
 800cdee:	75a2      	strb	r2, [r4, #22]
 800cdf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdf4:	e020      	b.n	800ce38 <E131Params::callbackFunction(char const*)+0x214>
 800cdf6:	2264      	movs	r2, #100	; 0x64
 800cdf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cdfc:	75a2      	strb	r2, [r4, #22]
 800cdfe:	e01b      	b.n	800ce38 <E131Params::callbackFunction(char const*)+0x214>
 800ce00:	4628      	mov	r0, r5
 800ce02:	4919      	ldr	r1, [pc, #100]	; (800ce68 <E131Params::callbackFunction(char const*)+0x244>)
 800ce04:	f10d 0202 	add.w	r2, sp, #2
 800ce08:	f005 fc9c 	bl	8012744 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f47f af46 	bne.w	800cc9e <E131Params::callbackFunction(char const*)+0x7a>
 800ce12:	f64f 15fe 	movw	r5, #63998	; 0xf9fe
 800ce16:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800ce1a:	6863      	ldr	r3, [r4, #4]
 800ce1c:	1e4a      	subs	r2, r1, #1
 800ce1e:	b292      	uxth	r2, r2
 800ce20:	42aa      	cmp	r2, r5
 800ce22:	bf81      	itttt	hi
 800ce24:	2201      	movhi	r2, #1
 800ce26:	7320      	strbhi	r0, [r4, #12]
 800ce28:	72e2      	strbhi	r2, [r4, #11]
 800ce2a:	f023 0310 	bichi.w	r3, r3, #16
 800ce2e:	bf9c      	itt	ls
 800ce30:	f8a4 100b 	strhls.w	r1, [r4, #11]
 800ce34:	f043 0310 	orrls.w	r3, r3, #16
 800ce38:	6063      	str	r3, [r4, #4]
 800ce3a:	e726      	b.n	800cc8a <E131Params::callbackFunction(char const*)+0x66>
 800ce3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce40:	e7fa      	b.n	800ce38 <E131Params::callbackFunction(char const*)+0x214>
 800ce42:	bf00      	nop
 800ce44:	0801775b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, sl, ip, sp, lr}
 800ce48:	08016bf0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, fp, sp, lr}
 800ce4c:	08016bf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, fp, sp, lr}
 800ce50:	08015e42 	stmdaeq	r1, {r1, r6, r9, sl, fp, ip, lr}
 800ce54:	08016bf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, fp, sp, lr}
 800ce58:	080176eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, sl, ip, sp, lr}
 800ce5c:	0801776d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}
 800ce60:	08016e50 	stmdaeq	r1, {r4, r6, r9, sl, fp, sp, lr}
 800ce64:	08017745 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, ip, sp, lr}
 800ce68:	080176ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, sl, ip, sp, lr}

0800ce6c <E131Params::staticCallbackFunction(void*, char const*)>:
 800ce6c:	f7ff beda 	b.w	800cc24 <E131Params::callbackFunction(char const*)>

0800ce70 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
 800ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce74:	4604      	mov	r4, r0
 800ce76:	4615      	mov	r5, r2
 800ce78:	461e      	mov	r6, r3
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	3004      	adds	r0, #4
 800ce7e:	2900      	cmp	r1, #0
 800ce80:	d05f      	beq.n	800cf42 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd2>
 800ce82:	2213      	movs	r2, #19
 800ce84:	f006 f98f 	bl	80131a6 <memmove>
 800ce88:	4633      	mov	r3, r6
 800ce8a:	462a      	mov	r2, r5
 800ce8c:	498f      	ldr	r1, [pc, #572]	; (800d0cc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x25c>)
 800ce8e:	a803      	add	r0, sp, #12
 800ce90:	f005 fb26 	bl	80124e0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800ce94:	2500      	movs	r5, #0
 800ce96:	4f8e      	ldr	r7, [pc, #568]	; (800d0d0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x260>)
 800ce98:	4e8e      	ldr	r6, [pc, #568]	; (800d0d4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x264>)
 800ce9a:	f8df 823c 	ldr.w	r8, [pc, #572]	; 800d0d8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x268>
 800ce9e:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800d0dc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>
 800cea2:	f8d8 2000 	ldr.w	r2, [r8]
 800cea6:	6863      	ldr	r3, [r4, #4]
 800cea8:	42aa      	cmp	r2, r5
 800ceaa:	d851      	bhi.n	800cf50 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xe0>
 800ceac:	f8b4 1009 	ldrh.w	r1, [r4, #9]
 800ceb0:	4a8b      	ldr	r2, [pc, #556]	; (800d0e0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800ceb2:	f003 0301 	and.w	r3, r3, #1
 800ceb6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ceba:	a803      	add	r0, sp, #12
 800cebc:	4989      	ldr	r1, [pc, #548]	; (800d0e4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800cebe:	f7ff fe51 	bl	800cb64 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800cec2:	4989      	ldr	r1, [pc, #548]	; (800d0e8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800cec4:	a803      	add	r0, sp, #12
 800cec6:	f005 fb91 	bl	80125ec <PropertiesBuilder::AddComment(char const*)>
 800ceca:	2500      	movs	r5, #0
 800cecc:	f44f 7b80 	mov.w	fp, #256	; 0x100
 800ced0:	4e86      	ldr	r6, [pc, #536]	; (800d0ec <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800ced2:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800d0f0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x280>
 800ced6:	f8df a21c 	ldr.w	sl, [pc, #540]	; 800d0f4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x284>
 800ceda:	f104 070d 	add.w	r7, r4, #13
 800cede:	f8d8 3000 	ldr.w	r3, [r8]
 800cee2:	42ab      	cmp	r3, r5
 800cee4:	d87e      	bhi.n	800cfe4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x174>
 800cee6:	4984      	ldr	r1, [pc, #528]	; (800d0f8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800cee8:	a803      	add	r0, sp, #12
 800ceea:	f005 fb7f 	bl	80125ec <PropertiesBuilder::AddComment(char const*)>
 800ceee:	2700      	movs	r7, #0
 800cef0:	4e82      	ldr	r6, [pc, #520]	; (800d0fc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800cef2:	f8df a20c 	ldr.w	sl, [pc, #524]	; 800d100 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>
 800cef6:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800d104 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>
 800cefa:	f104 0915 	add.w	r9, r4, #21
 800cefe:	f8d8 3000 	ldr.w	r3, [r8]
 800cf02:	42bb      	cmp	r3, r7
 800cf04:	f200 8082 	bhi.w	800d00c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x19c>
 800cf08:	497f      	ldr	r1, [pc, #508]	; (800d108 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800cf0a:	a803      	add	r0, sp, #12
 800cf0c:	f005 fb6e 	bl	80125ec <PropertiesBuilder::AddComment(char const*)>
 800cf10:	6863      	ldr	r3, [r4, #4]
 800cf12:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cf16:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800cf1a:	42a2      	cmp	r2, r4
 800cf1c:	f080 80b7 	bcs.w	800d08e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x21e>
 800cf20:	9803      	ldr	r0, [sp, #12]
 800cf22:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800cf26:	4410      	add	r0, r2
 800cf28:	eba4 0402 	sub.w	r4, r4, r2
 800cf2c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800cf30:	f040 809c 	bne.w	800d06c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fc>
 800cf34:	2a00      	cmp	r2, #0
 800cf36:	f040 809a 	bne.w	800d06e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fe>
 800cf3a:	9200      	str	r2, [sp, #0]
 800cf3c:	4b73      	ldr	r3, [pc, #460]	; (800d10c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800cf3e:	4a71      	ldr	r2, [pc, #452]	; (800d104 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800cf40:	e09b      	b.n	800d07a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20a>
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	4601      	mov	r1, r0
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	68d2      	ldr	r2, [r2, #12]
 800cf4c:	4790      	blx	r2
 800cf4e:	e79b      	b.n	800ce88 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18>
 800cf50:	f8bd c012 	ldrh.w	ip, [sp, #18]
 800cf54:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800cf58:	eb04 0245 	add.w	r2, r4, r5, lsl #1
 800cf5c:	45dc      	cmp	ip, fp
 800cf5e:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800cf62:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800cf66:	d221      	bcs.n	800cfac <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13c>
 800cf68:	2110      	movs	r1, #16
 800cf6a:	9803      	ldr	r0, [sp, #12]
 800cf6c:	40a9      	lsls	r1, r5
 800cf6e:	ea31 0303 	bics.w	r3, r1, r3
 800cf72:	4460      	add	r0, ip
 800cf74:	ebab 0b0c 	sub.w	fp, fp, ip
 800cf78:	f89d c014 	ldrb.w	ip, [sp, #20]
 800cf7c:	d006      	beq.n	800cf8c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 800cf7e:	f1bc 0f00 	cmp.w	ip, #0
 800cf82:	d106      	bne.n	800cf92 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x122>
 800cf84:	9200      	str	r2, [sp, #0]
 800cf86:	4633      	mov	r3, r6
 800cf88:	4a5e      	ldr	r2, [pc, #376]	; (800d104 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800cf8a:	e005      	b.n	800cf98 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800cf8c:	f1bc 0f00 	cmp.w	ip, #0
 800cf90:	d022      	beq.n	800cfd8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x168>
 800cf92:	9200      	str	r2, [sp, #0]
 800cf94:	4633      	mov	r3, r6
 800cf96:	464a      	mov	r2, r9
 800cf98:	4659      	mov	r1, fp
 800cf9a:	f006 fb5d 	bl	8013658 <snprintf>
 800cf9e:	4583      	cmp	fp, r0
 800cfa0:	bfa2      	ittt	ge
 800cfa2:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800cfa6:	18c0      	addge	r0, r0, r3
 800cfa8:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800cfac:	8aa3      	ldrh	r3, [r4, #20]
 800cfae:	fa23 f30a 	lsr.w	r3, r3, sl
 800cfb2:	f013 0303 	ands.w	r3, r3, #3
 800cfb6:	d013      	beq.n	800cfe0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x170>
 800cfb8:	4a55      	ldr	r2, [pc, #340]	; (800d110 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800cfba:	4956      	ldr	r1, [pc, #344]	; (800d114 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	bf08      	it	eq
 800cfc0:	460a      	moveq	r2, r1
 800cfc2:	3b01      	subs	r3, #1
 800cfc4:	4639      	mov	r1, r7
 800cfc6:	bf18      	it	ne
 800cfc8:	2301      	movne	r3, #1
 800cfca:	a803      	add	r0, sp, #12
 800cfcc:	f7ff fdca 	bl	800cb64 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800cfd0:	3501      	adds	r5, #1
 800cfd2:	3712      	adds	r7, #18
 800cfd4:	3610      	adds	r6, #16
 800cfd6:	e764      	b.n	800cea2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x32>
 800cfd8:	9200      	str	r2, [sp, #0]
 800cfda:	4633      	mov	r3, r6
 800cfdc:	4a48      	ldr	r2, [pc, #288]	; (800d100 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800cfde:	e7db      	b.n	800cf98 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800cfe0:	4a4d      	ldr	r2, [pc, #308]	; (800d118 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 800cfe2:	e7ee      	b.n	800cfc2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x152>
 800cfe4:	6861      	ldr	r1, [r4, #4]
 800cfe6:	fa0b f305 	lsl.w	r3, fp, r5
 800cfea:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800cfee:	438b      	bics	r3, r1
 800cff0:	bf0c      	ite	eq
 800cff2:	2301      	moveq	r3, #1
 800cff4:	2300      	movne	r3, #0
 800cff6:	4631      	mov	r1, r6
 800cff8:	2a00      	cmp	r2, #0
 800cffa:	bf0c      	ite	eq
 800cffc:	464a      	moveq	r2, r9
 800cffe:	4652      	movne	r2, sl
 800d000:	a803      	add	r0, sp, #12
 800d002:	f7ff fdaf 	bl	800cb64 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800d006:	3501      	adds	r5, #1
 800d008:	3612      	adds	r6, #18
 800d00a:	e768      	b.n	800cede <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x6e>
 800d00c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800d010:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800d014:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800d018:	42a9      	cmp	r1, r5
 800d01a:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800d01e:	d21e      	bcs.n	800d05e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1ee>
 800d020:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800d024:	9803      	ldr	r0, [sp, #12]
 800d026:	40ba      	lsls	r2, r7
 800d028:	ea32 0c0c 	bics.w	ip, r2, ip
 800d02c:	4408      	add	r0, r1
 800d02e:	eba5 0501 	sub.w	r5, r5, r1
 800d032:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800d036:	d004      	beq.n	800d042 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d2>
 800d038:	b921      	cbnz	r1, 800d044 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	465a      	mov	r2, fp
 800d03e:	4633      	mov	r3, r6
 800d040:	e003      	b.n	800d04a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1da>
 800d042:	b179      	cbz	r1, 800d064 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f4>
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	4633      	mov	r3, r6
 800d048:	4a24      	ldr	r2, [pc, #144]	; (800d0dc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>)
 800d04a:	4629      	mov	r1, r5
 800d04c:	f006 fb04 	bl	8013658 <snprintf>
 800d050:	4285      	cmp	r5, r0
 800d052:	bfa2      	ittt	ge
 800d054:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800d058:	18c0      	addge	r0, r0, r3
 800d05a:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800d05e:	3701      	adds	r7, #1
 800d060:	3612      	adds	r6, #18
 800d062:	e74c      	b.n	800cefe <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	4652      	mov	r2, sl
 800d068:	4633      	mov	r3, r6
 800d06a:	e7ee      	b.n	800d04a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1da>
 800d06c:	b34a      	cbz	r2, 800d0c2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x252>
 800d06e:	3b00      	subs	r3, #0
 800d070:	bf18      	it	ne
 800d072:	2301      	movne	r3, #1
 800d074:	4a19      	ldr	r2, [pc, #100]	; (800d0dc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>)
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	4b24      	ldr	r3, [pc, #144]	; (800d10c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800d07a:	4621      	mov	r1, r4
 800d07c:	f006 faec 	bl	8013658 <snprintf>
 800d080:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d084:	4284      	cmp	r4, r0
 800d086:	bfa4      	itt	ge
 800d088:	181b      	addge	r3, r3, r0
 800d08a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800d08e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d092:	b17b      	cbz	r3, 800d0b4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x244>
 800d094:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	4413      	add	r3, r2
 800d09c:	227d      	movs	r2, #125	; 0x7d
 800d09e:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d0a2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d0a6:	9903      	ldr	r1, [sp, #12]
 800d0a8:	54ca      	strb	r2, [r1, r3]
 800d0aa:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	f8ad 3012 	strh.w	r3, [sp, #18]
 800d0b4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800d0b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	b007      	add	sp, #28
 800d0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	4a0e      	ldr	r2, [pc, #56]	; (800d100 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	4b10      	ldr	r3, [pc, #64]	; (800d10c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800d0ca:	e7d6      	b.n	800d07a <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20a>
 800d0cc:	08016e62 	stmdaeq	r1, {r1, r5, r6, r9, sl, fp, sp, lr}
 800d0d0:	0801776d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}
 800d0d4:	080176ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, sl, ip, sp, lr}
 800d0d8:	20000c84 	andcs	r0, r0, r4, lsl #25
 800d0dc:	08015c9c 	stmdaeq	r1, {r2, r3, r4, r7, sl, fp, ip, lr}
 800d0e0:	08016e40 	stmdaeq	r1, {r6, r9, sl, fp, sp, lr}
 800d0e4:	0801775b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, sl, ip, sp, lr}
 800d0e8:	080158b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, fp, ip, lr}
 800d0ec:	080176eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r9, sl, ip, sp, lr}
 800d0f0:	08016c20 	stmdaeq	r1, {r5, sl, fp, sp, lr}
 800d0f4:	08016c1c 	stmdaeq	r1, {r2, r3, r4, sl, fp, sp, lr}
 800d0f8:	080158c4 	stmdaeq	r1, {r2, r6, r7, fp, ip, lr}
 800d0fc:	08016e50 	stmdaeq	r1, {r4, r6, r9, sl, fp, sp, lr}
 800d100:	08015ca6 	stmdaeq	r1, {r1, r2, r5, r7, sl, fp, ip, lr}
 800d104:	08015ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, ip, lr}
 800d108:	08015a64 	stmdaeq	r1, {r2, r5, r6, r9, fp, ip, lr}
 800d10c:	08017745 	stmdaeq	r1, {r0, r2, r6, r8, r9, sl, ip, sp, lr}
 800d110:	08016c0d 	stmdaeq	r1, {r0, r2, r3, sl, fp, sp, lr}
 800d114:	08016c14 	stmdaeq	r1, {r2, r4, sl, fp, sp, lr}
 800d118:	08016c07 	stmdaeq	r1, {r0, r1, r2, sl, fp, sp, lr}

0800d11c <E131Params::Save(char*, unsigned int, unsigned int&)>:
 800d11c:	b513      	push	{r0, r1, r4, lr}
 800d11e:	6804      	ldr	r4, [r0, #0]
 800d120:	b914      	cbnz	r4, 800d128 <E131Params::Save(char*, unsigned int, unsigned int&)+0xc>
 800d122:	601c      	str	r4, [r3, #0]
 800d124:	b002      	add	sp, #8
 800d126:	bd10      	pop	{r4, pc}
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	4613      	mov	r3, r2
 800d12c:	460a      	mov	r2, r1
 800d12e:	2100      	movs	r1, #0
 800d130:	f7ff fe9e 	bl	800ce70 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
 800d134:	e7f6      	b.n	800d124 <E131Params::Save(char*, unsigned int, unsigned int&)+0x8>

0800d136 <memcpy>:
 800d136:	b510      	push	{r4, lr}
 800d138:	1e43      	subs	r3, r0, #1
 800d13a:	440a      	add	r2, r1
 800d13c:	4291      	cmp	r1, r2
 800d13e:	d100      	bne.n	800d142 <memcpy+0xc>
 800d140:	bd10      	pop	{r4, pc}
 800d142:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d14a:	e7f7      	b.n	800d13c <memcpy+0x6>

0800d14c <ArtNetRdmController::GetUidCount(unsigned int)>:
 800d14c:	4b02      	ldr	r3, [pc, #8]	; (800d158 <ArtNetRdmController::GetUidCount(unsigned int)+0xc>)
 800d14e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d152:	6818      	ldr	r0, [r3, #0]
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	20000d8c 	andcs	r0, r0, ip, lsl #27

0800d15c <ArtNetRdmController::TodCopy(unsigned int, unsigned char*)>:
 800d15c:	4b08      	ldr	r3, [pc, #32]	; (800d180 <ArtNetRdmController::TodCopy(unsigned int, unsigned char*)+0x24>)
 800d15e:	b530      	push	{r4, r5, lr}
 800d160:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800d164:	2506      	movs	r5, #6
 800d166:	2300      	movs	r3, #0
 800d168:	f100 040c 	add.w	r4, r0, #12
 800d16c:	6801      	ldr	r1, [r0, #0]
 800d16e:	4369      	muls	r1, r5
 800d170:	428b      	cmp	r3, r1
 800d172:	d300      	bcc.n	800d176 <ArtNetRdmController::TodCopy(unsigned int, unsigned char*)+0x1a>
 800d174:	bd30      	pop	{r4, r5, pc}
 800d176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d17a:	54d1      	strb	r1, [r2, r3]
 800d17c:	3301      	adds	r3, #1
 800d17e:	e7f5      	b.n	800d16c <ArtNetRdmController::TodCopy(unsigned int, unsigned char*)+0x10>
 800d180:	20000d8c 	andcs	r0, r0, ip, lsl #27

0800d184 <ArtNetRdmController::TodReset(unsigned int)>:
 800d184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d186:	2500      	movs	r5, #0
 800d188:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <ArtNetRdmController::TodReset(unsigned int)+0x30>)
 800d18a:	4f0b      	ldr	r7, [pc, #44]	; (800d1b8 <ArtNetRdmController::TodReset(unsigned int)+0x34>)
 800d18c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 800d190:	f104 060c 	add.w	r6, r4, #12
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	429d      	cmp	r5, r3
 800d198:	d303      	bcc.n	800d1a2 <ArtNetRdmController::TodReset(unsigned int)+0x1e>
 800d19a:	2300      	movs	r3, #0
 800d19c:	6023      	str	r3, [r4, #0]
 800d19e:	60a3      	str	r3, [r4, #8]
 800d1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	2206      	movs	r2, #6
 800d1a6:	4639      	mov	r1, r7
 800d1a8:	f7ff ffc5 	bl	800d136 <memcpy>
 800d1ac:	3501      	adds	r5, #1
 800d1ae:	3606      	adds	r6, #6
 800d1b0:	e7f0      	b.n	800d194 <ArtNetRdmController::TodReset(unsigned int)+0x10>
 800d1b2:	bf00      	nop
 800d1b4:	20000d8c 	andcs	r0, r0, ip, lsl #27
 800d1b8:	08016ea8 	stmdaeq	r1, {r3, r5, r7, r9, sl, fp, sp, lr}

0800d1bc <ArtNetRdmController::Full(unsigned int)>:
 800d1bc:	4b02      	ldr	r3, [pc, #8]	; (800d1c8 <ArtNetRdmController::Full(unsigned int)+0xc>)
 800d1be:	3080      	adds	r0, #128	; 0x80
 800d1c0:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800d1c4:	f000 bbf0 	b.w	800d9a8 <RDMDiscovery::Full(unsigned int, RDMTod*)>
 800d1c8:	20000d8c 	andcs	r0, r0, ip, lsl #27

0800d1cc <ArtNetRdmController::~ArtNetRdmController()>:
 800d1cc:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <ArtNetRdmController::~ArtNetRdmController()+0x18>)
 800d1ce:	b510      	push	{r4, lr}
 800d1d0:	6003      	str	r3, [r0, #0]
 800d1d2:	4b05      	ldr	r3, [pc, #20]	; (800d1e8 <ArtNetRdmController::~ArtNetRdmController()+0x1c>)
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	6818      	ldr	r0, [r3, #0]
 800d1d8:	b108      	cbz	r0, 800d1de <ArtNetRdmController::~ArtNetRdmController()+0x12>
 800d1da:	f005 ff49 	bl	8013070 <operator delete(void*)>
 800d1de:	4620      	mov	r0, r4
 800d1e0:	bd10      	pop	{r4, pc}
 800d1e2:	bf00      	nop
 800d1e4:	08016eb8 	stmdaeq	r1, {r3, r4, r5, r7, r9, sl, fp, sp, lr}
 800d1e8:	20000d8c 	andcs	r0, r0, ip, lsl #27

0800d1ec <ArtNetRdmController::~ArtNetRdmController()>:
 800d1ec:	b510      	push	{r4, lr}
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	f7ff ffec 	bl	800d1cc <ArtNetRdmController::~ArtNetRdmController()>
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f005 ff3b 	bl	8013070 <operator delete(void*)>
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	bd10      	pop	{r4, pc}
	...

0800d200 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	460d      	mov	r5, r1
 800d204:	4614      	mov	r4, r2
 800d206:	b1ca      	cbz	r2, 800d23c <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x3c>
 800d208:	f007 f8d4 	bl	80143b4 <fwdgt_counter_reload>
 800d20c:	4628      	mov	r0, r5
 800d20e:	f000 ffcf 	bl	800e1b0 <Rdm::Receive(unsigned int)>
 800d212:	2800      	cmp	r0, #0
 800d214:	d1f8      	bne.n	800d208 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x8>
 800d216:	7862      	ldrb	r2, [r4, #1]
 800d218:	4621      	mov	r1, r4
 800d21a:	3202      	adds	r2, #2
 800d21c:	4808      	ldr	r0, [pc, #32]	; (800d240 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x40>)
 800d21e:	f7ff ff8a 	bl	800d136 <memcpy>
 800d222:	7862      	ldrb	r2, [r4, #1]
 800d224:	4628      	mov	r0, r5
 800d226:	4907      	ldr	r1, [pc, #28]	; (800d244 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x44>)
 800d228:	3202      	adds	r2, #2
 800d22a:	f000 ffd1 	bl	800e1d0 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800d22e:	4628      	mov	r0, r5
 800d230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d234:	f64e 2160 	movw	r1, #60000	; 0xea60
 800d238:	f000 bfc2 	b.w	800e1c0 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d23c:	4610      	mov	r0, r2
 800d23e:	bd38      	pop	{r3, r4, r5, pc}
 800d240:	20000c89 	andcs	r0, r0, r9, lsl #25
 800d244:	20000c88 	andcs	r0, r0, r8, lsl #25

0800d248 <memcmp.constprop.0>:
 800d248:	b510      	push	{r4, lr}
 800d24a:	1e4a      	subs	r2, r1, #1
 800d24c:	1e43      	subs	r3, r0, #1
 800d24e:	3105      	adds	r1, #5
 800d250:	428a      	cmp	r2, r1
 800d252:	d101      	bne.n	800d258 <memcmp.constprop.0+0x10>
 800d254:	2000      	movs	r0, #0
 800d256:	e006      	b.n	800d266 <memcmp.constprop.0+0x1e>
 800d258:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d25c:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800d260:	42a0      	cmp	r0, r4
 800d262:	d0f5      	beq.n	800d250 <memcmp.constprop.0+0x8>
 800d264:	1b00      	subs	r0, r0, r4
 800d266:	bd10      	pop	{r4, pc}

0800d268 <RDMTod::Exist(unsigned char const*)>:
 800d268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d26c:	4605      	mov	r5, r0
 800d26e:	4606      	mov	r6, r0
 800d270:	460f      	mov	r7, r1
 800d272:	2400      	movs	r4, #0
 800d274:	f855 8b0c 	ldr.w	r8, [r5], #12
 800d278:	45a0      	cmp	r8, r4
 800d27a:	d105      	bne.n	800d288 <RDMTod::Exist(unsigned char const*)+0x20>
 800d27c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d280:	2000      	movs	r0, #0
 800d282:	6074      	str	r4, [r6, #4]
 800d284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d288:	4628      	mov	r0, r5
 800d28a:	4639      	mov	r1, r7
 800d28c:	f7ff ffdc 	bl	800d248 <memcmp.constprop.0>
 800d290:	3506      	adds	r5, #6
 800d292:	b108      	cbz	r0, 800d298 <RDMTod::Exist(unsigned char const*)+0x30>
 800d294:	3401      	adds	r4, #1
 800d296:	e7ef      	b.n	800d278 <RDMTod::Exist(unsigned char const*)+0x10>
 800d298:	2001      	movs	r0, #1
 800d29a:	e7f2      	b.n	800d282 <RDMTod::Exist(unsigned char const*)+0x1a>

0800d29c <ArtNetRdmController::TodAddUid(unsigned int, unsigned char const*)>:
 800d29c:	4b0d      	ldr	r3, [pc, #52]	; (800d2d4 <ArtNetRdmController::TodAddUid(unsigned int, unsigned char const*)+0x38>)
 800d29e:	b570      	push	{r4, r5, r6, lr}
 800d2a0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 800d2a4:	4615      	mov	r5, r2
 800d2a6:	6826      	ldr	r6, [r4, #0]
 800d2a8:	2e08      	cmp	r6, #8
 800d2aa:	d101      	bne.n	800d2b0 <ArtNetRdmController::TodAddUid(unsigned int, unsigned char const*)+0x14>
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	bd70      	pop	{r4, r5, r6, pc}
 800d2b0:	4611      	mov	r1, r2
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f7ff ffd8 	bl	800d268 <RDMTod::Exist(unsigned char const*)>
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d1f7      	bne.n	800d2ac <ArtNetRdmController::TodAddUid(unsigned int, unsigned char const*)+0x10>
 800d2bc:	2206      	movs	r2, #6
 800d2be:	fb02 4006 	mla	r0, r2, r6, r4
 800d2c2:	1c73      	adds	r3, r6, #1
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	6023      	str	r3, [r4, #0]
 800d2c8:	300c      	adds	r0, #12
 800d2ca:	f7ff ff34 	bl	800d136 <memcpy>
 800d2ce:	2001      	movs	r0, #1
 800d2d0:	e7ed      	b.n	800d2ae <ArtNetRdmController::TodAddUid(unsigned int, unsigned char const*)+0x12>
 800d2d2:	bf00      	nop
 800d2d4:	20000d8c 	andcs	r0, r0, ip, lsl #27

0800d2d8 <ArtNetRdmController::ArtNetRdmController()>:
 800d2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2dc:	4605      	mov	r5, r0
 800d2de:	3004      	adds	r0, #4
 800d2e0:	f000 fbc8 	bl	800da74 <RDMDevice::RDMDevice()>
 800d2e4:	4629      	mov	r1, r5
 800d2e6:	4b15      	ldr	r3, [pc, #84]	; (800d33c <ArtNetRdmController::ArtNetRdmController()+0x64>)
 800d2e8:	f105 0080 	add.w	r0, r5, #128	; 0x80
 800d2ec:	f841 3b05 	str.w	r3, [r1], #5
 800d2f0:	f000 f9b2 	bl	800d658 <RDMDiscovery::RDMDiscovery(unsigned char const*)>
 800d2f4:	4b12      	ldr	r3, [pc, #72]	; (800d340 <ArtNetRdmController::ArtNetRdmController()+0x68>)
 800d2f6:	203c      	movs	r0, #60	; 0x3c
 800d2f8:	602b      	str	r3, [r5, #0]
 800d2fa:	f005 febd 	bl	8013078 <operator new(unsigned int)>
 800d2fe:	2200      	movs	r2, #0
 800d300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d304:	4604      	mov	r4, r0
 800d306:	e9c0 2300 	strd	r2, r3, [r0]
 800d30a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 800d344 <ArtNetRdmController::ArtNetRdmController()+0x6c>
 800d30e:	f100 060c 	add.w	r6, r0, #12
 800d312:	f100 073c 	add.w	r7, r0, #60	; 0x3c
 800d316:	4630      	mov	r0, r6
 800d318:	2206      	movs	r2, #6
 800d31a:	4641      	mov	r1, r8
 800d31c:	3606      	adds	r6, #6
 800d31e:	f7ff ff0a 	bl	800d136 <memcpy>
 800d322:	42be      	cmp	r6, r7
 800d324:	d1f7      	bne.n	800d316 <ArtNetRdmController::ArtNetRdmController()+0x3e>
 800d326:	2300      	movs	r3, #0
 800d328:	22cc      	movs	r2, #204	; 0xcc
 800d32a:	60a3      	str	r3, [r4, #8]
 800d32c:	4b06      	ldr	r3, [pc, #24]	; (800d348 <ArtNetRdmController::ArtNetRdmController()+0x70>)
 800d32e:	4628      	mov	r0, r5
 800d330:	601c      	str	r4, [r3, #0]
 800d332:	4b06      	ldr	r3, [pc, #24]	; (800d34c <ArtNetRdmController::ArtNetRdmController()+0x74>)
 800d334:	701a      	strb	r2, [r3, #0]
 800d336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d33a:	bf00      	nop
 800d33c:	08016e84 	stmdaeq	r1, {r2, r7, r9, sl, fp, sp, lr}
 800d340:	08016eb8 	stmdaeq	r1, {r3, r4, r5, r7, r9, sl, fp, sp, lr}
 800d344:	08016ea8 	stmdaeq	r1, {r3, r5, r7, r9, sl, fp, sp, lr}
 800d348:	20000d8c 	andcs	r0, r0, ip, lsl #27
 800d34c:	20000c88 	andcs	r0, r0, r8, lsl #25

0800d350 <ArtNetRdmController::RespondMessageAck(unsigned int, unsigned char const*, TRdmMessage const*)>:
 800d350:	4608      	mov	r0, r1
 800d352:	21cc      	movs	r1, #204	; 0xcc
 800d354:	b4f0      	push	{r4, r5, r6, r7}
 800d356:	2600      	movs	r6, #0
 800d358:	4c1c      	ldr	r4, [pc, #112]	; (800d3cc <ArtNetRdmController::RespondMessageAck(unsigned int, unsigned char const*, TRdmMessage const*)+0x7c>)
 800d35a:	3a01      	subs	r2, #1
 800d35c:	7021      	strb	r1, [r4, #0]
 800d35e:	7859      	ldrb	r1, [r3, #1]
 800d360:	7de5      	ldrb	r5, [r4, #23]
 800d362:	7061      	strb	r1, [r4, #1]
 800d364:	7bd9      	ldrb	r1, [r3, #15]
 800d366:	3518      	adds	r5, #24
 800d368:	73e1      	strb	r1, [r4, #15]
 800d36a:	7c99      	ldrb	r1, [r3, #18]
 800d36c:	b2ed      	uxtb	r5, r5
 800d36e:	74a1      	strb	r1, [r4, #18]
 800d370:	7cd9      	ldrb	r1, [r3, #19]
 800d372:	7466      	strb	r6, [r4, #17]
 800d374:	74e1      	strb	r1, [r4, #19]
 800d376:	7d19      	ldrb	r1, [r3, #20]
 800d378:	7426      	strb	r6, [r4, #16]
 800d37a:	3101      	adds	r1, #1
 800d37c:	7521      	strb	r1, [r4, #20]
 800d37e:	7d59      	ldrb	r1, [r3, #21]
 800d380:	70a5      	strb	r5, [r4, #2]
 800d382:	7561      	strb	r1, [r4, #21]
 800d384:	7d99      	ldrb	r1, [r3, #22]
 800d386:	1ca6      	adds	r6, r4, #2
 800d388:	75a1      	strb	r1, [r4, #22]
 800d38a:	f103 0108 	add.w	r1, r3, #8
 800d38e:	330e      	adds	r3, #14
 800d390:	f811 7f01 	ldrb.w	r7, [r1, #1]!
 800d394:	f806 7f01 	strb.w	r7, [r6, #1]!
 800d398:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 800d39c:	4299      	cmp	r1, r3
 800d39e:	71b7      	strb	r7, [r6, #6]
 800d3a0:	d1f6      	bne.n	800d390 <ArtNetRdmController::RespondMessageAck(unsigned int, unsigned char const*, TRdmMessage const*)+0x40>
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	4909      	ldr	r1, [pc, #36]	; (800d3cc <ArtNetRdmController::RespondMessageAck(unsigned int, unsigned char const*, TRdmMessage const*)+0x7c>)
 800d3a8:	4295      	cmp	r5, r2
 800d3aa:	d809      	bhi.n	800d3c0 <ArtNetRdmController::RespondMessageAck(unsigned int, unsigned char const*, TRdmMessage const*)+0x70>
 800d3ac:	0a1a      	lsrs	r2, r3, #8
 800d3ae:	5562      	strb	r2, [r4, r5]
 800d3b0:	4425      	add	r5, r4
 800d3b2:	706b      	strb	r3, [r5, #1]
 800d3b4:	78a2      	ldrb	r2, [r4, #2]
 800d3b6:	4905      	ldr	r1, [pc, #20]	; (800d3cc <ArtNetRdmController::RespondMessageAck(unsigned int, unsigned char const*, TRdmMessage const*)+0x7c>)
 800d3b8:	3202      	adds	r2, #2
 800d3ba:	bcf0      	pop	{r4, r5, r6, r7}
 800d3bc:	f001 bc70 	b.w	800eca0 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 800d3c0:	f811 6b01 	ldrb.w	r6, [r1], #1
 800d3c4:	3201      	adds	r2, #1
 800d3c6:	4433      	add	r3, r6
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	e7ed      	b.n	800d3a8 <ArtNetRdmController::RespondMessageAck(unsigned int, unsigned char const*, TRdmMessage const*)+0x58>
 800d3cc:	20000c88 	andcs	r0, r0, r8, lsl #25

0800d3d0 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)>:
 800d3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3d4:	4680      	mov	r8, r0
 800d3d6:	4608      	mov	r0, r1
 800d3d8:	460f      	mov	r7, r1
 800d3da:	4691      	mov	r9, r2
 800d3dc:	f000 fee8 	bl	800e1b0 <Rdm::Receive(unsigned int)>
 800d3e0:	4606      	mov	r6, r0
 800d3e2:	b908      	cbnz	r0, 800d3e8 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x18>
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	e019      	b.n	800d41c <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x4c>
 800d3e8:	1cc4      	adds	r4, r0, #3
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	4962      	ldr	r1, [pc, #392]	; (800d578 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x1a8>)
 800d3ee:	f7ff ff2b 	bl	800d248 <memcmp.constprop.0>
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	b138      	cbz	r0, 800d406 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x36>
 800d3f6:	4b61      	ldr	r3, [pc, #388]	; (800d57c <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x1ac>)
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d3fe:	f7ff ff33 	bl	800d268 <RDMTod::Exist(unsigned char const*)>
 800d402:	2800      	cmp	r0, #0
 800d404:	d0ee      	beq.n	800d3e4 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x14>
 800d406:	7d33      	ldrb	r3, [r6, #20]
 800d408:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800d40c:	2b20      	cmp	r3, #32
 800d40e:	d107      	bne.n	800d420 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x50>
 800d410:	4648      	mov	r0, r9
 800d412:	78b2      	ldrb	r2, [r6, #2]
 800d414:	1c71      	adds	r1, r6, #1
 800d416:	f7ff fe8e 	bl	800d136 <memcpy>
 800d41a:	2001      	movs	r0, #1
 800d41c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d420:	b96d      	cbnz	r5, 800d43e <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x6e>
 800d422:	4b56      	ldr	r3, [pc, #344]	; (800d57c <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x1ac>)
 800d424:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800d428:	6863      	ldr	r3, [r4, #4]
 800d42a:	6822      	ldr	r2, [r4, #0]
 800d42c:	3301      	adds	r3, #1
 800d42e:	4293      	cmp	r3, r2
 800d430:	bf08      	it	eq
 800d432:	2300      	moveq	r3, #0
 800d434:	2206      	movs	r2, #6
 800d436:	6063      	str	r3, [r4, #4]
 800d438:	fb02 4403 	mla	r4, r2, r3, r4
 800d43c:	340c      	adds	r4, #12
 800d43e:	7d33      	ldrb	r3, [r6, #20]
 800d440:	2b10      	cmp	r3, #16
 800d442:	d1cf      	bne.n	800d3e4 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x14>
 800d444:	7d72      	ldrb	r2, [r6, #21]
 800d446:	7db3      	ldrb	r3, [r6, #22]
 800d448:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d14e      	bne.n	800d4f0 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x120>
 800d452:	4a4a      	ldr	r2, [pc, #296]	; (800d57c <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x1ac>)
 800d454:	f852 1027 	ldr.w	r1, [r2, r7, lsl #2]
 800d458:	684a      	ldr	r2, [r1, #4]
 800d45a:	1c55      	adds	r5, r2, #1
 800d45c:	d0c2      	beq.n	800d3e4 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x14>
 800d45e:	f002 001f 	and.w	r0, r2, #31
 800d462:	0952      	lsrs	r2, r2, #5
 800d464:	3202      	adds	r2, #2
 800d466:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d46a:	4083      	lsls	r3, r0
 800d46c:	4393      	bics	r3, r2
 800d46e:	d0b9      	beq.n	800d3e4 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x14>
 800d470:	4621      	mov	r1, r4
 800d472:	f106 0018 	add.w	r0, r6, #24
 800d476:	f7ff fee7 	bl	800d248 <memcmp.constprop.0>
 800d47a:	2800      	cmp	r0, #0
 800d47c:	dcb2      	bgt.n	800d3e4 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x14>
 800d47e:	4620      	mov	r0, r4
 800d480:	f106 011e 	add.w	r1, r6, #30
 800d484:	f7ff fee0 	bl	800d248 <memcmp.constprop.0>
 800d488:	2800      	cmp	r0, #0
 800d48a:	dcab      	bgt.n	800d3e4 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x14>
 800d48c:	22fe      	movs	r2, #254	; 0xfe
 800d48e:	4b3c      	ldr	r3, [pc, #240]	; (800d580 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x1b0>)
 800d490:	1e61      	subs	r1, r4, #1
 800d492:	701a      	strb	r2, [r3, #0]
 800d494:	705a      	strb	r2, [r3, #1]
 800d496:	709a      	strb	r2, [r3, #2]
 800d498:	70da      	strb	r2, [r3, #3]
 800d49a:	711a      	strb	r2, [r3, #4]
 800d49c:	715a      	strb	r2, [r3, #5]
 800d49e:	719a      	strb	r2, [r3, #6]
 800d4a0:	22aa      	movs	r2, #170	; 0xaa
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	71da      	strb	r2, [r3, #7]
 800d4a6:	f240 52fa 	movw	r2, #1530	; 0x5fa
 800d4aa:	3405      	adds	r4, #5
 800d4ac:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800d4b0:	3302      	adds	r3, #2
 800d4b2:	f065 0555 	orn	r5, r5, #85	; 0x55
 800d4b6:	719d      	strb	r5, [r3, #6]
 800d4b8:	780d      	ldrb	r5, [r1, #0]
 800d4ba:	42a1      	cmp	r1, r4
 800d4bc:	f045 0555 	orr.w	r5, r5, #85	; 0x55
 800d4c0:	71dd      	strb	r5, [r3, #7]
 800d4c2:	780d      	ldrb	r5, [r1, #0]
 800d4c4:	442a      	add	r2, r5
 800d4c6:	b292      	uxth	r2, r2
 800d4c8:	d1f0      	bne.n	800d4ac <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0xdc>
 800d4ca:	0a13      	lsrs	r3, r2, #8
 800d4cc:	f063 0155 	orn	r1, r3, #85	; 0x55
 800d4d0:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800d4d4:	7543      	strb	r3, [r0, #21]
 800d4d6:	f062 0355 	orn	r3, r2, #85	; 0x55
 800d4da:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 800d4de:	7501      	strb	r1, [r0, #20]
 800d4e0:	7583      	strb	r3, [r0, #22]
 800d4e2:	75c2      	strb	r2, [r0, #23]
 800d4e4:	4926      	ldr	r1, [pc, #152]	; (800d580 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x1b0>)
 800d4e6:	2218      	movs	r2, #24
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	f001 fbeb 	bl	800ecc4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>
 800d4ee:	e779      	b.n	800d3e4 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x14>
 800d4f0:	2b03      	cmp	r3, #3
 800d4f2:	d127      	bne.n	800d544 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x174>
 800d4f4:	7df3      	ldrb	r3, [r6, #23]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f47f af74 	bne.w	800d3e4 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x14>
 800d4fc:	4b1f      	ldr	r3, [pc, #124]	; (800d57c <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x1ac>)
 800d4fe:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800d502:	b1e5      	cbz	r5, 800d53e <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x16e>
 800d504:	b1d8      	cbz	r0, 800d53e <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x16e>
 800d506:	685a      	ldr	r2, [r3, #4]
 800d508:	1c50      	adds	r0, r2, #1
 800d50a:	d00a      	beq.n	800d522 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x152>
 800d50c:	0951      	lsrs	r1, r2, #5
 800d50e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d512:	2101      	movs	r1, #1
 800d514:	f002 021f 	and.w	r2, r2, #31
 800d518:	4091      	lsls	r1, r2
 800d51a:	689a      	ldr	r2, [r3, #8]
 800d51c:	ea22 0201 	bic.w	r2, r2, r1
 800d520:	609a      	str	r2, [r3, #8]
 800d522:	2500      	movs	r5, #0
 800d524:	2202      	movs	r2, #2
 800d526:	4b16      	ldr	r3, [pc, #88]	; (800d580 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x1b0>)
 800d528:	4640      	mov	r0, r8
 800d52a:	75da      	strb	r2, [r3, #23]
 800d52c:	761d      	strb	r5, [r3, #24]
 800d52e:	765d      	strb	r5, [r3, #25]
 800d530:	4622      	mov	r2, r4
 800d532:	4633      	mov	r3, r6
 800d534:	4639      	mov	r1, r7
 800d536:	f7ff ff0b 	bl	800d350 <ArtNetRdmController::RespondMessageAck(unsigned int, unsigned char const*, TRdmMessage const*)>
 800d53a:	4628      	mov	r0, r5
 800d53c:	e76e      	b.n	800d41c <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x4c>
 800d53e:	2000      	movs	r0, #0
 800d540:	6098      	str	r0, [r3, #8]
 800d542:	e76b      	b.n	800d41c <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x4c>
 800d544:	2b02      	cmp	r3, #2
 800d546:	f47f af4d 	bne.w	800d3e4 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x14>
 800d54a:	7df3      	ldrb	r3, [r6, #23]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f47f af49 	bne.w	800d3e4 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x14>
 800d552:	2800      	cmp	r0, #0
 800d554:	f43f af46 	beq.w	800d3e4 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x14>
 800d558:	4b08      	ldr	r3, [pc, #32]	; (800d57c <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x1ac>)
 800d55a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800d55e:	685a      	ldr	r2, [r3, #4]
 800d560:	1c51      	adds	r1, r2, #1
 800d562:	d0de      	beq.n	800d522 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x152>
 800d564:	0951      	lsrs	r1, r2, #5
 800d566:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d56a:	2101      	movs	r1, #1
 800d56c:	f002 021f 	and.w	r2, r2, #31
 800d570:	4091      	lsls	r1, r2
 800d572:	689a      	ldr	r2, [r3, #8]
 800d574:	430a      	orrs	r2, r1
 800d576:	e7d3      	b.n	800d520 <ArtNetRdmController::RdmReceive(unsigned int, unsigned char*)+0x150>
 800d578:	08016ea8 	stmdaeq	r1, {r3, r5, r7, r9, sl, fp, sp, lr}
 800d57c:	20000d8c 	andcs	r0, r0, ip, lsl #27
 800d580:	20000c88 	andcs	r0, r0, r8, lsl #25

0800d584 <artnet::rdm_send(unsigned int, unsigned char const*)>:
 800d584:	b570      	push	{r4, r5, r6, lr}
 800d586:	7ccb      	ldrb	r3, [r1, #19]
 800d588:	460a      	mov	r2, r1
 800d58a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800d58e:	2b21      	cmp	r3, #33	; 0x21
 800d590:	b0c2      	sub	sp, #264	; 0x108
 800d592:	d114      	bne.n	800d5be <artnet::rdm_send(unsigned int, unsigned char const*)+0x3a>
 800d594:	23cc      	movs	r3, #204	; 0xcc
 800d596:	a901      	add	r1, sp, #4
 800d598:	460d      	mov	r5, r1
 800d59a:	460c      	mov	r4, r1
 800d59c:	700b      	strb	r3, [r1, #0]
 800d59e:	7853      	ldrb	r3, [r2, #1]
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	d10e      	bne.n	800d5c2 <artnet::rdm_send(unsigned int, unsigned char const*)+0x3e>
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	788c      	ldrb	r4, [r1, #2]
 800d5a8:	429c      	cmp	r4, r3
 800d5aa:	d80f      	bhi.n	800d5cc <artnet::rdm_send(unsigned int, unsigned char const*)+0x48>
 800d5ac:	0a13      	lsrs	r3, r2, #8
 800d5ae:	550b      	strb	r3, [r1, r4]
 800d5b0:	f10d 0305 	add.w	r3, sp, #5
 800d5b4:	551a      	strb	r2, [r3, r4]
 800d5b6:	788a      	ldrb	r2, [r1, #2]
 800d5b8:	3202      	adds	r2, #2
 800d5ba:	f000 fe09 	bl	800e1d0 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800d5be:	b042      	add	sp, #264	; 0x108
 800d5c0:	bd70      	pop	{r4, r5, r6, pc}
 800d5c2:	f812 6b01 	ldrb.w	r6, [r2], #1
 800d5c6:	f804 6f01 	strb.w	r6, [r4, #1]!
 800d5ca:	e7e9      	b.n	800d5a0 <artnet::rdm_send(unsigned int, unsigned char const*)+0x1c>
 800d5cc:	f815 6b01 	ldrb.w	r6, [r5], #1
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	4432      	add	r2, r6
 800d5d4:	b292      	uxth	r2, r2
 800d5d6:	e7e7      	b.n	800d5a8 <artnet::rdm_send(unsigned int, unsigned char const*)+0x24>

0800d5d8 <memcmp.constprop.0>:
 800d5d8:	b510      	push	{r4, lr}
 800d5da:	1e4a      	subs	r2, r1, #1
 800d5dc:	1e43      	subs	r3, r0, #1
 800d5de:	3105      	adds	r1, #5
 800d5e0:	428a      	cmp	r2, r1
 800d5e2:	d101      	bne.n	800d5e8 <memcmp.constprop.0+0x10>
 800d5e4:	2000      	movs	r0, #0
 800d5e6:	e006      	b.n	800d5f6 <memcmp.constprop.0+0x1e>
 800d5e8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d5ec:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800d5f0:	42a0      	cmp	r0, r4
 800d5f2:	d0f5      	beq.n	800d5e0 <memcmp.constprop.0+0x8>
 800d5f4:	1b00      	subs	r0, r0, r4
 800d5f6:	bd10      	pop	{r4, pc}

0800d5f8 <memcpy.constprop.0.isra.0>:
 800d5f8:	3801      	subs	r0, #1
 800d5fa:	1d8b      	adds	r3, r1, #6
 800d5fc:	4299      	cmp	r1, r3
 800d5fe:	d100      	bne.n	800d602 <memcpy.constprop.0.isra.0+0xa>
 800d600:	4770      	bx	lr
 800d602:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d606:	f800 2f01 	strb.w	r2, [r0, #1]!
 800d60a:	e7f7      	b.n	800d5fc <memcpy.constprop.0.isra.0+0x4>

0800d60c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>:
 800d60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d610:	6806      	ldr	r6, [r0, #0]
 800d612:	4604      	mov	r4, r0
 800d614:	2e08      	cmp	r6, #8
 800d616:	460d      	mov	r5, r1
 800d618:	d01a      	beq.n	800d650 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x44>
 800d61a:	2700      	movs	r7, #0
 800d61c:	f100 080c 	add.w	r8, r0, #12
 800d620:	42be      	cmp	r6, r7
 800d622:	d10d      	bne.n	800d640 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x34>
 800d624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d628:	6063      	str	r3, [r4, #4]
 800d62a:	1c73      	adds	r3, r6, #1
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	2306      	movs	r3, #6
 800d630:	fb03 4006 	mla	r0, r3, r6, r4
 800d634:	4629      	mov	r1, r5
 800d636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d63a:	300c      	adds	r0, #12
 800d63c:	f7ff bfdc 	b.w	800d5f8 <memcpy.constprop.0.isra.0>
 800d640:	4640      	mov	r0, r8
 800d642:	4629      	mov	r1, r5
 800d644:	f7ff ffc8 	bl	800d5d8 <memcmp.constprop.0>
 800d648:	f108 0806 	add.w	r8, r8, #6
 800d64c:	b910      	cbnz	r0, 800d654 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x48>
 800d64e:	6067      	str	r7, [r4, #4]
 800d650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d654:	3701      	adds	r7, #1
 800d656:	e7e3      	b.n	800d620 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x14>

0800d658 <RDMDiscovery::RDMDiscovery(unsigned char const*)>:
 800d658:	b538      	push	{r3, r4, r5, lr}
 800d65a:	4604      	mov	r4, r0
 800d65c:	460d      	mov	r5, r1
 800d65e:	f000 fb1d 	bl	800dc9c <RDMMessage::RDMMessage()>
 800d662:	4629      	mov	r1, r5
 800d664:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 800d668:	f7ff ffc6 	bl	800d5f8 <memcpy.constprop.0.isra.0>
 800d66c:	4620      	mov	r0, r4
 800d66e:	4629      	mov	r1, r5
 800d670:	f000 fb32 	bl	800dcd8 <RDMMessage::SetSrcUid(unsigned char const*)>
 800d674:	4620      	mov	r0, r4
 800d676:	bd38      	pop	{r3, r4, r5, pc}

0800d678 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>:
 800d678:	b570      	push	{r4, r5, r6, lr}
 800d67a:	780b      	ldrb	r3, [r1, #0]
 800d67c:	2bfe      	cmp	r3, #254	; 0xfe
 800d67e:	d001      	beq.n	800d684 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xc>
 800d680:	2000      	movs	r0, #0
 800d682:	bd70      	pop	{r4, r5, r6, pc}
 800d684:	7a48      	ldrb	r0, [r1, #9]
 800d686:	7a0b      	ldrb	r3, [r1, #8]
 800d688:	1e54      	subs	r4, r2, #1
 800d68a:	4003      	ands	r3, r0
 800d68c:	7013      	strb	r3, [r2, #0]
 800d68e:	7ac8      	ldrb	r0, [r1, #11]
 800d690:	7a8b      	ldrb	r3, [r1, #10]
 800d692:	3205      	adds	r2, #5
 800d694:	4003      	ands	r3, r0
 800d696:	f802 3c04 	strb.w	r3, [r2, #-4]
 800d69a:	7b48      	ldrb	r0, [r1, #13]
 800d69c:	7b0b      	ldrb	r3, [r1, #12]
 800d69e:	4003      	ands	r3, r0
 800d6a0:	f802 3c03 	strb.w	r3, [r2, #-3]
 800d6a4:	7bc8      	ldrb	r0, [r1, #15]
 800d6a6:	7b8b      	ldrb	r3, [r1, #14]
 800d6a8:	4003      	ands	r3, r0
 800d6aa:	f802 3c02 	strb.w	r3, [r2, #-2]
 800d6ae:	7c48      	ldrb	r0, [r1, #17]
 800d6b0:	7c0b      	ldrb	r3, [r1, #16]
 800d6b2:	4003      	ands	r3, r0
 800d6b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d6b8:	7cc8      	ldrb	r0, [r1, #19]
 800d6ba:	7c8b      	ldrb	r3, [r1, #18]
 800d6bc:	4003      	ands	r3, r0
 800d6be:	7013      	strb	r3, [r2, #0]
 800d6c0:	7d0b      	ldrb	r3, [r1, #20]
 800d6c2:	7d88      	ldrb	r0, [r1, #22]
 800d6c4:	7dcd      	ldrb	r5, [r1, #23]
 800d6c6:	7d49      	ldrb	r1, [r1, #21]
 800d6c8:	4019      	ands	r1, r3
 800d6ca:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800d6ce:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800d6d2:	4433      	add	r3, r6
 800d6d4:	4294      	cmp	r4, r2
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	d1f9      	bne.n	800d6ce <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x56>
 800d6da:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
 800d6de:	d1cf      	bne.n	800d680 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x8>
 800d6e0:	4028      	ands	r0, r5
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	1ac3      	subs	r3, r0, r3
 800d6e6:	4258      	negs	r0, r3
 800d6e8:	4158      	adcs	r0, r3
 800d6ea:	e7ca      	b.n	800d682 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xa>

0800d6ec <RDMDiscovery::QuickFind(unsigned char const*)>:
 800d6ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	460d      	mov	r5, r1
 800d6f2:	2110      	movs	r1, #16
 800d6f4:	f000 faf8 	bl	800dce8 <RDMMessage::SetCc(unsigned char)>
 800d6f8:	2102      	movs	r1, #2
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f000 faf6 	bl	800dcec <RDMMessage::SetPid(unsigned short)>
 800d700:	4629      	mov	r1, r5
 800d702:	4620      	mov	r0, r4
 800d704:	f000 faec 	bl	800dce0 <RDMMessage::SetDstUid(unsigned char const*)>
 800d708:	2200      	movs	r2, #0
 800d70a:	4620      	mov	r0, r4
 800d70c:	4611      	mov	r1, r2
 800d70e:	f000 faf1 	bl	800dcf4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800d712:	260a      	movs	r6, #10
 800d714:	3e01      	subs	r6, #1
 800d716:	d01e      	beq.n	800d756 <RDMDiscovery::QuickFind(unsigned char const*)+0x6a>
 800d718:	f006 fe4c 	bl	80143b4 <fwdgt_counter_reload>
 800d71c:	4620      	mov	r0, r4
 800d71e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 800d722:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800d726:	f000 faf7 	bl	800dd18 <RDMMessage::Send(unsigned int, unsigned int)>
 800d72a:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d72e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800d732:	f000 fd45 	bl	800e1c0 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d736:	2800      	cmp	r0, #0
 800d738:	d0ec      	beq.n	800d714 <RDMDiscovery::QuickFind(unsigned char const*)+0x28>
 800d73a:	7d03      	ldrb	r3, [r0, #20]
 800d73c:	2b11      	cmp	r3, #17
 800d73e:	d10a      	bne.n	800d756 <RDMDiscovery::QuickFind(unsigned char const*)+0x6a>
 800d740:	f100 0109 	add.w	r1, r0, #9
 800d744:	4628      	mov	r0, r5
 800d746:	f7ff ff47 	bl	800d5d8 <memcmp.constprop.0>
 800d74a:	b920      	cbnz	r0, 800d756 <RDMDiscovery::QuickFind(unsigned char const*)+0x6a>
 800d74c:	4629      	mov	r1, r5
 800d74e:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 800d752:	f7ff ff5b 	bl	800d60c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800d756:	4620      	mov	r0, r4
 800d758:	4924      	ldr	r1, [pc, #144]	; (800d7ec <RDMDiscovery::QuickFind(unsigned char const*)+0x100>)
 800d75a:	f000 fac1 	bl	800dce0 <RDMMessage::SetDstUid(unsigned char const*)>
 800d75e:	2110      	movs	r1, #16
 800d760:	4620      	mov	r0, r4
 800d762:	f000 fac1 	bl	800dce8 <RDMMessage::SetCc(unsigned char)>
 800d766:	2101      	movs	r1, #1
 800d768:	4620      	mov	r0, r4
 800d76a:	f000 fabf 	bl	800dcec <RDMMessage::SetPid(unsigned short)>
 800d76e:	220c      	movs	r2, #12
 800d770:	4620      	mov	r0, r4
 800d772:	f504 7189 	add.w	r1, r4, #274	; 0x112
 800d776:	f000 fabd 	bl	800dcf4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800d77a:	f006 fe1b 	bl	80143b4 <fwdgt_counter_reload>
 800d77e:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800d782:	4620      	mov	r0, r4
 800d784:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 800d788:	f000 fac6 	bl	800dd18 <RDMMessage::Send(unsigned int, unsigned int)>
 800d78c:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d790:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800d794:	f000 fd14 	bl	800e1c0 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d798:	4605      	mov	r5, r0
 800d79a:	b980      	cbnz	r0, 800d7be <RDMDiscovery::QuickFind(unsigned char const*)+0xd2>
 800d79c:	f006 fe0a 	bl	80143b4 <fwdgt_counter_reload>
 800d7a0:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 800d7aa:	f000 fab5 	bl	800dd18 <RDMMessage::Send(unsigned int, unsigned int)>
 800d7ae:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d7b2:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800d7b6:	f000 fd03 	bl	800e1c0 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d7ba:	4605      	mov	r5, r0
 800d7bc:	b148      	cbz	r0, 800d7d2 <RDMDiscovery::QuickFind(unsigned char const*)+0xe6>
 800d7be:	466a      	mov	r2, sp
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f7ff ff58 	bl	800d678 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800d7c8:	b130      	cbz	r0, 800d7d8 <RDMDiscovery::QuickFind(unsigned char const*)+0xec>
 800d7ca:	4669      	mov	r1, sp
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f7ff ff8d 	bl	800d6ec <RDMDiscovery::QuickFind(unsigned char const*)>
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	b002      	add	sp, #8
 800d7d6:	bd70      	pop	{r4, r5, r6, pc}
 800d7d8:	466a      	mov	r2, sp
 800d7da:	4629      	mov	r1, r5
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f7ff ff4b 	bl	800d678 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800d7e2:	f080 0001 	eor.w	r0, r0, #1
 800d7e6:	b2c0      	uxtb	r0, r0
 800d7e8:	e7f4      	b.n	800d7d4 <RDMDiscovery::QuickFind(unsigned char const*)+0xe8>
 800d7ea:	bf00      	nop
 800d7ec:	08016edc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, sl, fp, sp, lr}

0800d7f0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>:
 800d7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d7fa:	4615      	mov	r5, r2
 800d7fc:	4699      	mov	r9, r3
 800d7fe:	f006 fdd9 	bl	80143b4 <fwdgt_counter_reload>
 800d802:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800d806:	f000 fcd3 	bl	800e1b0 <Rdm::Receive(unsigned int)>
 800d80a:	45c1      	cmp	r9, r8
 800d80c:	bf08      	it	eq
 800d80e:	42bd      	cmpeq	r5, r7
 800d810:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800d814:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 800d818:	ea4f 4205 	mov.w	r2, r5, lsl #16
 800d81c:	4e60      	ldr	r6, [pc, #384]	; (800d9a0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x1b0>)
 800d81e:	ba12      	rev	r2, r2
 800d820:	ba1b      	rev	r3, r3
 800d822:	d13e      	bne.n	800d8a2 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0xb2>
 800d824:	4631      	mov	r1, r6
 800d826:	a802      	add	r0, sp, #8
 800d828:	e9c6 3200 	strd	r3, r2, [r6]
 800d82c:	f7ff fee4 	bl	800d5f8 <memcpy.constprop.0.isra.0>
 800d830:	2110      	movs	r1, #16
 800d832:	4620      	mov	r0, r4
 800d834:	f000 fa58 	bl	800dce8 <RDMMessage::SetCc(unsigned char)>
 800d838:	2102      	movs	r1, #2
 800d83a:	4620      	mov	r0, r4
 800d83c:	f000 fa56 	bl	800dcec <RDMMessage::SetPid(unsigned short)>
 800d840:	4620      	mov	r0, r4
 800d842:	a902      	add	r1, sp, #8
 800d844:	f000 fa4c 	bl	800dce0 <RDMMessage::SetDstUid(unsigned char const*)>
 800d848:	2200      	movs	r2, #0
 800d84a:	4620      	mov	r0, r4
 800d84c:	4611      	mov	r1, r2
 800d84e:	f000 fa51 	bl	800dcf4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800d852:	250a      	movs	r5, #10
 800d854:	3d01      	subs	r5, #1
 800d856:	f000 80a1 	beq.w	800d99c <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x1ac>
 800d85a:	f006 fdab 	bl	80143b4 <fwdgt_counter_reload>
 800d85e:	4620      	mov	r0, r4
 800d860:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 800d864:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800d868:	f000 fa56 	bl	800dd18 <RDMMessage::Send(unsigned int, unsigned int)>
 800d86c:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d870:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800d874:	f000 fca4 	bl	800e1c0 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d0eb      	beq.n	800d854 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x64>
 800d87c:	7d03      	ldrb	r3, [r0, #20]
 800d87e:	2b11      	cmp	r3, #17
 800d880:	d105      	bne.n	800d88e <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x9e>
 800d882:	f100 0109 	add.w	r1, r0, #9
 800d886:	a802      	add	r0, sp, #8
 800d888:	f7ff fea6 	bl	800d5d8 <memcmp.constprop.0>
 800d88c:	b118      	cbz	r0, 800d896 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0xa6>
 800d88e:	2000      	movs	r0, #0
 800d890:	b004      	add	sp, #16
 800d892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d896:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
 800d89a:	a902      	add	r1, sp, #8
 800d89c:	f7ff feb6 	bl	800d60c <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800d8a0:	e7f5      	b.n	800d88e <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x9e>
 800d8a2:	f504 7a89 	add.w	sl, r4, #274	; 0x112
 800d8a6:	4631      	mov	r1, r6
 800d8a8:	4650      	mov	r0, sl
 800d8aa:	e9c6 3200 	strd	r3, r2, [r6]
 800d8ae:	f7ff fea3 	bl	800d5f8 <memcpy.constprop.0.isra.0>
 800d8b2:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800d8b6:	ea43 4317 	orr.w	r3, r3, r7, lsr #16
 800d8ba:	043a      	lsls	r2, r7, #16
 800d8bc:	ba1b      	rev	r3, r3
 800d8be:	ba12      	rev	r2, r2
 800d8c0:	4631      	mov	r1, r6
 800d8c2:	f504 708c 	add.w	r0, r4, #280	; 0x118
 800d8c6:	e9c6 3200 	strd	r3, r2, [r6]
 800d8ca:	f7ff fe95 	bl	800d5f8 <memcpy.constprop.0.isra.0>
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	4934      	ldr	r1, [pc, #208]	; (800d9a4 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x1b4>)
 800d8d2:	f000 fa05 	bl	800dce0 <RDMMessage::SetDstUid(unsigned char const*)>
 800d8d6:	2110      	movs	r1, #16
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f000 fa05 	bl	800dce8 <RDMMessage::SetCc(unsigned char)>
 800d8de:	2101      	movs	r1, #1
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f000 fa03 	bl	800dcec <RDMMessage::SetPid(unsigned short)>
 800d8e6:	220c      	movs	r2, #12
 800d8e8:	4651      	mov	r1, sl
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f000 fa02 	bl	800dcf4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800d8f0:	f006 fd60 	bl	80143b4 <fwdgt_counter_reload>
 800d8f4:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 800d8fe:	f000 fa0b 	bl	800dd18 <RDMMessage::Send(unsigned int, unsigned int)>
 800d902:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d906:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800d90a:	f000 fc59 	bl	800e1c0 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d90e:	4601      	mov	r1, r0
 800d910:	b988      	cbnz	r0, 800d936 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x146>
 800d912:	f006 fd4f 	bl	80143b4 <fwdgt_counter_reload>
 800d916:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800d91a:	4620      	mov	r0, r4
 800d91c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 800d920:	f000 f9fa 	bl	800dd18 <RDMMessage::Send(unsigned int, unsigned int)>
 800d924:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d928:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800d92c:	f000 fc48 	bl	800e1c0 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d930:	4601      	mov	r1, r0
 800d932:	2800      	cmp	r0, #0
 800d934:	d0ab      	beq.n	800d88e <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x9e>
 800d936:	4620      	mov	r0, r4
 800d938:	aa02      	add	r2, sp, #8
 800d93a:	f7ff fe9d 	bl	800d678 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800d93e:	b128      	cbz	r0, 800d94c <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x15c>
 800d940:	4620      	mov	r0, r4
 800d942:	a902      	add	r1, sp, #8
 800d944:	f7ff fed2 	bl	800d6ec <RDMDiscovery::QuickFind(unsigned char const*)>
 800d948:	2800      	cmp	r0, #0
 800d94a:	d0a0      	beq.n	800d88e <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x9e>
 800d94c:	ea4f 0a58 	mov.w	sl, r8, lsr #1
 800d950:	ea4f 0359 	mov.w	r3, r9, lsr #1
 800d954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d958:	f40a 4a80 	and.w	sl, sl, #16384	; 0x4000
 800d95c:	19ee      	adds	r6, r5, r7
 800d95e:	449a      	add	sl, r3
 800d960:	f3c8 020e 	ubfx	r2, r8, #0, #15
 800d964:	f3c9 030e 	ubfx	r3, r9, #0, #15
 800d968:	eb43 0302 	adc.w	r3, r3, r2
 800d96c:	0876      	lsrs	r6, r6, #1
 800d96e:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
 800d972:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 800d976:	462a      	mov	r2, r5
 800d978:	464b      	mov	r3, r9
 800d97a:	4620      	mov	r0, r4
 800d97c:	e9cd 6a00 	strd	r6, sl, [sp]
 800d980:	f7ff ff36 	bl	800d7f0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800d984:	1c72      	adds	r2, r6, #1
 800d986:	4605      	mov	r5, r0
 800d988:	e9cd 7800 	strd	r7, r8, [sp]
 800d98c:	4620      	mov	r0, r4
 800d98e:	f14a 0300 	adc.w	r3, sl, #0
 800d992:	f7ff ff2d 	bl	800d7f0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800d996:	4328      	orrs	r0, r5
 800d998:	b2c0      	uxtb	r0, r0
 800d99a:	e779      	b.n	800d890 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0xa0>
 800d99c:	2001      	movs	r0, #1
 800d99e:	e777      	b.n	800d890 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0xa0>
 800d9a0:	20000d90 	mulcs	r0, r0, sp
 800d9a4:	08016edc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, sl, fp, sp, lr}

0800d9a8 <RDMDiscovery::Full(unsigned int, RDMTod*)>:
 800d9a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	4616      	mov	r6, r2
 800d9b0:	2500      	movs	r5, #0
 800d9b2:	e9c0 1241 	strd	r1, r2, [r0, #260]	; 0x104
 800d9b6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800da70 <RDMDiscovery::Full(unsigned int, RDMTod*)+0xc8>
 800d9ba:	f102 070c 	add.w	r7, r2, #12
 800d9be:	6833      	ldr	r3, [r6, #0]
 800d9c0:	429d      	cmp	r5, r3
 800d9c2:	d34d      	bcc.n	800da60 <RDMDiscovery::Full(unsigned int, RDMTod*)+0xb8>
 800d9c4:	2500      	movs	r5, #0
 800d9c6:	6035      	str	r5, [r6, #0]
 800d9c8:	60b5      	str	r5, [r6, #8]
 800d9ca:	f006 fcf3 	bl	80143b4 <fwdgt_counter_reload>
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	4927      	ldr	r1, [pc, #156]	; (800da70 <RDMDiscovery::Full(unsigned int, RDMTod*)+0xc8>)
 800d9d2:	f000 f985 	bl	800dce0 <RDMMessage::SetDstUid(unsigned char const*)>
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	2110      	movs	r1, #16
 800d9da:	f000 f985 	bl	800dce8 <RDMMessage::SetCc(unsigned char)>
 800d9de:	4620      	mov	r0, r4
 800d9e0:	2103      	movs	r1, #3
 800d9e2:	f000 f983 	bl	800dcec <RDMMessage::SetPid(unsigned short)>
 800d9e6:	462a      	mov	r2, r5
 800d9e8:	4629      	mov	r1, r5
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	f000 f982 	bl	800dcf4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800d9f0:	462a      	mov	r2, r5
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 800d9f8:	f000 f98e 	bl	800dd18 <RDMMessage::Send(unsigned int, unsigned int)>
 800d9fc:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800da00:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800da04:	f000 fbdc 	bl	800e1c0 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800da08:	f006 fcd4 	bl	80143b4 <fwdgt_counter_reload>
 800da0c:	4629      	mov	r1, r5
 800da0e:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800da12:	f007 fb5f 	bl	80150d4 <udelay(unsigned int, unsigned int)>
 800da16:	f006 fccd 	bl	80143b4 <fwdgt_counter_reload>
 800da1a:	462a      	mov	r2, r5
 800da1c:	4620      	mov	r0, r4
 800da1e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
 800da22:	f000 f979 	bl	800dd18 <RDMMessage::Send(unsigned int, unsigned int)>
 800da26:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800da2a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800da2e:	f000 fbc7 	bl	800e1c0 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800da32:	f006 fcbf 	bl	80143b4 <fwdgt_counter_reload>
 800da36:	4629      	mov	r1, r5
 800da38:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800da3c:	f007 fb4a 	bl	80150d4 <udelay(unsigned int, unsigned int)>
 800da40:	f006 fcb8 	bl	80143b4 <fwdgt_counter_reload>
 800da44:	f06f 0201 	mvn.w	r2, #1
 800da48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da4c:	4620      	mov	r0, r4
 800da4e:	e9cd 2300 	strd	r2, r3, [sp]
 800da52:	2200      	movs	r2, #0
 800da54:	2300      	movs	r3, #0
 800da56:	f7ff fecb 	bl	800d7f0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800da5a:	b002      	add	sp, #8
 800da5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da60:	4638      	mov	r0, r7
 800da62:	4641      	mov	r1, r8
 800da64:	f7ff fdc8 	bl	800d5f8 <memcpy.constprop.0.isra.0>
 800da68:	3501      	adds	r5, #1
 800da6a:	3706      	adds	r7, #6
 800da6c:	e7a7      	b.n	800d9be <RDMDiscovery::Full(unsigned int, RDMTod*)+0x16>
 800da6e:	bf00      	nop
 800da70:	08016edc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, sl, fp, sp, lr}

0800da74 <RDMDevice::RDMDevice()>:
 800da74:	4a34      	ldr	r2, [pc, #208]	; (800db48 <RDMDevice::RDMDevice()+0xd4>)
 800da76:	2300      	movs	r3, #0
 800da78:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da7a:	4604      	mov	r4, r0
 800da7c:	4611      	mov	r1, r2
 800da7e:	7003      	strb	r3, [r0, #0]
 800da80:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
 800da84:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
 800da88:	6783      	str	r3, [r0, #120]	; 0x78
 800da8a:	4613      	mov	r3, r2
 800da8c:	7818      	ldrb	r0, [r3, #0]
 800da8e:	3201      	adds	r2, #1
 800da90:	2800      	cmp	r0, #0
 800da92:	d1fa      	bne.n	800da8a <RDMDevice::RDMDevice()+0x16>
 800da94:	1a5b      	subs	r3, r3, r1
 800da96:	2b20      	cmp	r3, #32
 800da98:	bf28      	it	cs
 800da9a:	2320      	movcs	r3, #32
 800da9c:	f104 052b 	add.w	r5, r4, #43	; 0x2b
 800daa0:	4629      	mov	r1, r5
 800daa2:	461a      	mov	r2, r3
 800daa4:	4828      	ldr	r0, [pc, #160]	; (800db48 <RDMDevice::RDMDevice()+0xd4>)
 800daa6:	3a01      	subs	r2, #1
 800daa8:	d23e      	bcs.n	800db28 <RDMDevice::RDMDevice()+0xb4>
 800daaa:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800daae:	4b27      	ldr	r3, [pc, #156]	; (800db4c <RDMDevice::RDMDevice()+0xd8>)
 800dab0:	4e27      	ldr	r6, [pc, #156]	; (800db50 <RDMDevice::RDMDevice()+0xdc>)
 800dab2:	781a      	ldrb	r2, [r3, #0]
 800dab4:	4669      	mov	r1, sp
 800dab6:	7062      	strb	r2, [r4, #1]
 800dab8:	785b      	ldrb	r3, [r3, #1]
 800daba:	6830      	ldr	r0, [r6, #0]
 800dabc:	70a3      	strb	r3, [r4, #2]
 800dabe:	f002 f928 	bl	800fd12 <Network::MacAddressCopyTo(unsigned char*)>
 800dac2:	6833      	ldr	r3, [r6, #0]
 800dac4:	695b      	ldr	r3, [r3, #20]
 800dac6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800daca:	0e18      	lsrs	r0, r3, #24
 800dacc:	f3c3 4107 	ubfx	r1, r3, #16, #8
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	70e3      	strb	r3, [r4, #3]
 800dad4:	72a3      	strb	r3, [r4, #10]
 800dad6:	4b1f      	ldr	r3, [pc, #124]	; (800db54 <RDMDevice::RDMDevice()+0xe0>)
 800dad8:	7122      	strb	r2, [r4, #4]
 800dada:	7262      	strb	r2, [r4, #9]
 800dadc:	461a      	mov	r2, r3
 800dade:	71a0      	strb	r0, [r4, #6]
 800dae0:	7161      	strb	r1, [r4, #5]
 800dae2:	71e0      	strb	r0, [r4, #7]
 800dae4:	7221      	strb	r1, [r4, #8]
 800dae6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800daea:	2900      	cmp	r1, #0
 800daec:	d1fb      	bne.n	800dae6 <RDMDevice::RDMDevice()+0x72>
 800daee:	1a9b      	subs	r3, r3, r2
 800daf0:	2b20      	cmp	r3, #32
 800daf2:	bf28      	it	cs
 800daf4:	2320      	movcs	r3, #32
 800daf6:	461a      	mov	r2, r3
 800daf8:	4916      	ldr	r1, [pc, #88]	; (800db54 <RDMDevice::RDMDevice()+0xe0>)
 800dafa:	3a01      	subs	r2, #1
 800dafc:	d219      	bcs.n	800db32 <RDMDevice::RDMDevice()+0xbe>
 800dafe:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800db02:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800db06:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800db0a:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 800db0e:	2315      	movs	r3, #21
 800db10:	4a11      	ldr	r2, [pc, #68]	; (800db58 <RDMDevice::RDMDevice()+0xe4>)
 800db12:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
 800db16:	f104 0166 	add.w	r1, r4, #102	; 0x66
 800db1a:	f104 0351 	add.w	r3, r4, #81	; 0x51
 800db1e:	4299      	cmp	r1, r3
 800db20:	d10c      	bne.n	800db3c <RDMDevice::RDMDevice()+0xc8>
 800db22:	4620      	mov	r0, r4
 800db24:	b002      	add	sp, #8
 800db26:	bd70      	pop	{r4, r5, r6, pc}
 800db28:	f810 6b01 	ldrb.w	r6, [r0], #1
 800db2c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800db30:	e7b9      	b.n	800daa6 <RDMDevice::RDMDevice()+0x32>
 800db32:	f811 0b01 	ldrb.w	r0, [r1], #1
 800db36:	f805 0f01 	strb.w	r0, [r5, #1]!
 800db3a:	e7de      	b.n	800dafa <RDMDevice::RDMDevice()+0x86>
 800db3c:	f812 0b01 	ldrb.w	r0, [r2], #1
 800db40:	f803 0f01 	strb.w	r0, [r3, #1]!
 800db44:	e7eb      	b.n	800db1e <RDMDevice::RDMDevice()+0xaa>
 800db46:	bf00      	nop
 800db48:	08016fd4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, fp, sp, lr}
 800db4c:	08016fd2 	stmdaeq	r1, {r1, r4, r6, r7, r8, r9, sl, fp, sp, lr}
 800db50:	20008aa8 	andcs	r8, r0, r8, lsr #21
 800db54:	08016ae7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r9, fp, sp, lr}
 800db58:	08016fb6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r8, r9, sl, fp, sp, lr}

0800db5c <RDMDevice::Print()>:
 800db5c:	b513      	push	{r0, r1, r4, lr}
 800db5e:	4604      	mov	r4, r0
 800db60:	4818      	ldr	r0, [pc, #96]	; (800dbc4 <RDMDevice::Print()+0x68>)
 800db62:	f005 fd51 	bl	8013608 <printf>
 800db66:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 800db6a:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 800db6e:	4816      	ldr	r0, [pc, #88]	; (800dbc8 <RDMDevice::Print()+0x6c>)
 800db70:	f005 fd4a 	bl	8013608 <printf>
 800db74:	78a2      	ldrb	r2, [r4, #2]
 800db76:	7861      	ldrb	r1, [r4, #1]
 800db78:	4814      	ldr	r0, [pc, #80]	; (800dbcc <RDMDevice::Print()+0x70>)
 800db7a:	f005 fd45 	bl	8013608 <printf>
 800db7e:	79e3      	ldrb	r3, [r4, #7]
 800db80:	7a62      	ldrb	r2, [r4, #9]
 800db82:	7aa1      	ldrb	r1, [r4, #10]
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	4812      	ldr	r0, [pc, #72]	; (800dbd0 <RDMDevice::Print()+0x74>)
 800db88:	7a23      	ldrb	r3, [r4, #8]
 800db8a:	f005 fd3d 	bl	8013608 <printf>
 800db8e:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 800db92:	f104 020b 	add.w	r2, r4, #11
 800db96:	480f      	ldr	r0, [pc, #60]	; (800dbd4 <RDMDevice::Print()+0x78>)
 800db98:	f005 fd36 	bl	8013608 <printf>
 800db9c:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800dba0:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800dba4:	0a09      	lsrs	r1, r1, #8
 800dba6:	480c      	ldr	r0, [pc, #48]	; (800dbd8 <RDMDevice::Print()+0x7c>)
 800dba8:	f005 fd2e 	bl	8013608 <printf>
 800dbac:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800dbb0:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800dbb4:	4809      	ldr	r0, [pc, #36]	; (800dbdc <RDMDevice::Print()+0x80>)
 800dbb6:	0a09      	lsrs	r1, r1, #8
 800dbb8:	b002      	add	sp, #8
 800dbba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbbe:	f005 bd23 	b.w	8013608 <printf>
 800dbc2:	bf00      	nop
 800dbc4:	08016ee2 	stmdaeq	r1, {r1, r5, r6, r7, r9, sl, fp, sp, lr}
 800dbc8:	08016efc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sl, fp, sp, lr}
 800dbcc:	08016f17 	stmdaeq	r1, {r0, r1, r2, r4, r8, r9, sl, fp, sp, lr}
 800dbd0:	08016f36 	stmdaeq	r1, {r1, r2, r4, r5, r8, r9, sl, fp, sp, lr}
 800dbd4:	08016f5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, r9, sl, fp, sp, lr}
 800dbd8:	08016f78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, fp, sp, lr}
 800dbdc:	08016f97 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, r9, sl, fp, sp, lr}

0800dbe0 <memcpy.isra.0>:
 800dbe0:	f005 bad6 	b.w	8013190 <memcpy>

0800dbe4 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800dbe4:	b510      	push	{r4, lr}
 800dbe6:	6001      	str	r1, [r0, #0]
 800dbe8:	2100      	movs	r1, #0
 800dbea:	4604      	mov	r4, r0
 800dbec:	6041      	str	r1, [r0, #4]
 800dbee:	2220      	movs	r2, #32
 800dbf0:	3008      	adds	r0, #8
 800dbf2:	f005 faef 	bl	80131d4 <memset>
 800dbf6:	4b03      	ldr	r3, [pc, #12]	; (800dc04 <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbfc:	237f      	movs	r3, #127	; 0x7f
 800dbfe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800dc02:	bd10      	pop	{r4, pc}
 800dc04:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800dc08 <RDMDeviceParams::Load()>:
 800dc08:	4601      	mov	r1, r0
 800dc0a:	6800      	ldr	r0, [r0, #0]
 800dc0c:	b130      	cbz	r0, 800dc1c <RDMDeviceParams::Load()+0x14>
 800dc0e:	b508      	push	{r3, lr}
 800dc10:	6803      	ldr	r3, [r0, #0]
 800dc12:	3104      	adds	r1, #4
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	4798      	blx	r3
 800dc18:	2001      	movs	r0, #1
 800dc1a:	bd08      	pop	{r3, pc}
 800dc1c:	4770      	bx	lr

0800dc1e <RDMDeviceParams::Set(RDMDevice*)>:
 800dc1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc20:	6843      	ldr	r3, [r0, #4]
 800dc22:	460c      	mov	r4, r1
 800dc24:	07d9      	lsls	r1, r3, #31
 800dc26:	4605      	mov	r5, r0
 800dc28:	d517      	bpl.n	800dc5a <RDMDeviceParams::Set(RDMDevice*)+0x3c>
 800dc2a:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 800dc2e:	7823      	ldrb	r3, [r4, #0]
 800dc30:	2e20      	cmp	r6, #32
 800dc32:	bf28      	it	cs
 800dc34:	2620      	movcs	r6, #32
 800dc36:	f100 0108 	add.w	r1, r0, #8
 800dc3a:	b1e3      	cbz	r3, 800dc76 <RDMDeviceParams::Set(RDMDevice*)+0x58>
 800dc3c:	f104 070b 	add.w	r7, r4, #11
 800dc40:	4638      	mov	r0, r7
 800dc42:	4632      	mov	r2, r6
 800dc44:	f7ff ffcc 	bl	800dbe0 <memcpy.isra.0>
 800dc48:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800dc4a:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 800dc4e:	b120      	cbz	r0, 800dc5a <RDMDeviceParams::Set(RDMDevice*)+0x3c>
 800dc50:	6803      	ldr	r3, [r0, #0]
 800dc52:	4632      	mov	r2, r6
 800dc54:	4639      	mov	r1, r7
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	4798      	blx	r3
 800dc5a:	686b      	ldr	r3, [r5, #4]
 800dc5c:	079a      	lsls	r2, r3, #30
 800dc5e:	bf44      	itt	mi
 800dc60:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800dc64:	f8a4 204e 	strhmi.w	r2, [r4, #78]	; 0x4e
 800dc68:	075b      	lsls	r3, r3, #29
 800dc6a:	bf44      	itt	mi
 800dc6c:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800dc70:	f8a4 3050 	strhmi.w	r3, [r4, #80]	; 0x50
 800dc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc76:	4632      	mov	r2, r6
 800dc78:	f104 0052 	add.w	r0, r4, #82	; 0x52
 800dc7c:	f7ff ffb0 	bl	800dbe0 <memcpy.isra.0>
 800dc80:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
 800dc84:	e7e9      	b.n	800dc5a <RDMDeviceParams::Set(RDMDevice*)+0x3c>

0800dc86 <RDMDeviceParams::Dump()>:
 800dc86:	4770      	bx	lr

0800dc88 <memcpy.isra.0>:
 800dc88:	3801      	subs	r0, #1
 800dc8a:	440a      	add	r2, r1
 800dc8c:	4291      	cmp	r1, r2
 800dc8e:	d100      	bne.n	800dc92 <memcpy.isra.0+0xa>
 800dc90:	4770      	bx	lr
 800dc92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc96:	f800 3f01 	strb.w	r3, [r0, #1]!
 800dc9a:	e7f7      	b.n	800dc8c <memcpy.isra.0+0x4>

0800dc9c <RDMMessage::RDMMessage()>:
 800dc9c:	23cc      	movs	r3, #204	; 0xcc
 800dc9e:	b570      	push	{r4, r5, r6, lr}
 800dca0:	7003      	strb	r3, [r0, #0]
 800dca2:	2501      	movs	r5, #1
 800dca4:	2318      	movs	r3, #24
 800dca6:	4604      	mov	r4, r0
 800dca8:	4e0a      	ldr	r6, [pc, #40]	; (800dcd4 <RDMMessage::RDMMessage()+0x38>)
 800dcaa:	7083      	strb	r3, [r0, #2]
 800dcac:	7045      	strb	r5, [r0, #1]
 800dcae:	4631      	mov	r1, r6
 800dcb0:	2206      	movs	r2, #6
 800dcb2:	3009      	adds	r0, #9
 800dcb4:	f7ff ffe8 	bl	800dc88 <memcpy.isra.0>
 800dcb8:	1ce0      	adds	r0, r4, #3
 800dcba:	2206      	movs	r2, #6
 800dcbc:	4631      	mov	r1, r6
 800dcbe:	f7ff ffe3 	bl	800dc88 <memcpy.isra.0>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	4620      	mov	r0, r4
 800dcc6:	7425      	strb	r5, [r4, #16]
 800dcc8:	7463      	strb	r3, [r4, #17]
 800dcca:	74a3      	strb	r3, [r4, #18]
 800dccc:	74e3      	strb	r3, [r4, #19]
 800dcce:	75e3      	strb	r3, [r4, #23]
 800dcd0:	bd70      	pop	{r4, r5, r6, pc}
 800dcd2:	bf00      	nop
 800dcd4:	08016fcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, sl, fp, sp, lr}

0800dcd8 <RDMMessage::SetSrcUid(unsigned char const*)>:
 800dcd8:	2206      	movs	r2, #6
 800dcda:	3009      	adds	r0, #9
 800dcdc:	f7ff bfd4 	b.w	800dc88 <memcpy.isra.0>

0800dce0 <RDMMessage::SetDstUid(unsigned char const*)>:
 800dce0:	2206      	movs	r2, #6
 800dce2:	3003      	adds	r0, #3
 800dce4:	f7ff bfd0 	b.w	800dc88 <memcpy.isra.0>

0800dce8 <RDMMessage::SetCc(unsigned char)>:
 800dce8:	7501      	strb	r1, [r0, #20]
 800dcea:	4770      	bx	lr

0800dcec <RDMMessage::SetPid(unsigned short)>:
 800dcec:	0a0b      	lsrs	r3, r1, #8
 800dcee:	7543      	strb	r3, [r0, #21]
 800dcf0:	7581      	strb	r1, [r0, #22]
 800dcf2:	4770      	bx	lr

0800dcf4 <RDMMessage::SetPd(unsigned char const*, unsigned char)>:
 800dcf4:	b538      	push	{r3, r4, r5, lr}
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	7883      	ldrb	r3, [r0, #2]
 800dcfa:	7dc0      	ldrb	r0, [r0, #23]
 800dcfc:	4615      	mov	r5, r2
 800dcfe:	1a1b      	subs	r3, r3, r0
 800dd00:	70a3      	strb	r3, [r4, #2]
 800dd02:	75e2      	strb	r2, [r4, #23]
 800dd04:	b121      	cbz	r1, 800dd10 <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800dd06:	b11a      	cbz	r2, 800dd10 <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800dd08:	f104 0018 	add.w	r0, r4, #24
 800dd0c:	f7ff ffbc 	bl	800dc88 <memcpy.isra.0>
 800dd10:	78a3      	ldrb	r3, [r4, #2]
 800dd12:	441d      	add	r5, r3
 800dd14:	70a5      	strb	r5, [r4, #2]
 800dd16:	bd38      	pop	{r3, r4, r5, pc}

0800dd18 <RDMMessage::Send(unsigned int, unsigned int)>:
 800dd18:	460b      	mov	r3, r1
 800dd1a:	4601      	mov	r1, r0
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f000 bf81 	b.w	800ec24 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>

0800dd22 <uuid_unparse_x>:
 800dd22:	4603      	mov	r3, r0
 800dd24:	b530      	push	{r4, r5, lr}
 800dd26:	4608      	mov	r0, r1
 800dd28:	4611      	mov	r1, r2
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	b08f      	sub	sp, #60	; 0x3c
 800dd2e:	ba12      	rev	r2, r2
 800dd30:	920a      	str	r2, [sp, #40]	; 0x28
 800dd32:	889a      	ldrh	r2, [r3, #4]
 800dd34:	891c      	ldrh	r4, [r3, #8]
 800dd36:	ba52      	rev16	r2, r2
 800dd38:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800dd3c:	88da      	ldrh	r2, [r3, #6]
 800dd3e:	ba64      	rev16	r4, r4
 800dd40:	ba52      	rev16	r2, r2
 800dd42:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800dd46:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800dd4a:	f103 020a 	add.w	r2, r3, #10
 800dd4e:	f10d 0431 	add.w	r4, sp, #49	; 0x31
 800dd52:	3310      	adds	r3, #16
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d122      	bne.n	800dd9e <uuid_unparse_x+0x7c>
 800dd58:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800dd5c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800dd60:	9208      	str	r2, [sp, #32]
 800dd62:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800dd66:	0a1b      	lsrs	r3, r3, #8
 800dd68:	9207      	str	r2, [sp, #28]
 800dd6a:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800dd6e:	9301      	str	r3, [sp, #4]
 800dd70:	9206      	str	r2, [sp, #24]
 800dd72:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800dd76:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800dd7a:	9205      	str	r2, [sp, #20]
 800dd7c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800dd80:	9300      	str	r3, [sp, #0]
 800dd82:	9204      	str	r2, [sp, #16]
 800dd84:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800dd88:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800dd8c:	9203      	str	r2, [sp, #12]
 800dd8e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800dd92:	9202      	str	r2, [sp, #8]
 800dd94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd96:	f005 fc47 	bl	8013628 <sprintf>
 800dd9a:	b00f      	add	sp, #60	; 0x3c
 800dd9c:	bd30      	pop	{r4, r5, pc}
 800dd9e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800dda2:	f804 5f01 	strb.w	r5, [r4, #1]!
 800dda6:	e7d5      	b.n	800dd54 <uuid_unparse_x+0x32>

0800dda8 <uuid_unparse>:
 800dda8:	4a01      	ldr	r2, [pc, #4]	; (800ddb0 <uuid_unparse+0x8>)
 800ddaa:	f7ff bfba 	b.w	800dd22 <uuid_unparse_x>
 800ddae:	bf00      	nop
 800ddb0:	08016ff0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}

0800ddb4 <DmxSend::~DmxSend()>:
 800ddb4:	4770      	bx	lr
	...

0800ddb8 <DmxSend::Start(unsigned int)>:
 800ddb8:	2301      	movs	r3, #1
 800ddba:	b430      	push	{r4, r5}
 800ddbc:	4c08      	ldr	r4, [pc, #32]	; (800dde0 <DmxSend::Start(unsigned int)+0x28>)
 800ddbe:	fa03 f001 	lsl.w	r0, r3, r1
 800ddc2:	7822      	ldrb	r2, [r4, #0]
 800ddc4:	ea30 0502 	bics.w	r5, r0, r2
 800ddc8:	d007      	beq.n	800ddda <DmxSend::Start(unsigned int)+0x22>
 800ddca:	4302      	orrs	r2, r0
 800ddcc:	4805      	ldr	r0, [pc, #20]	; (800dde4 <DmxSend::Start(unsigned int)+0x2c>)
 800ddce:	7022      	strb	r2, [r4, #0]
 800ddd0:	6800      	ldr	r0, [r0, #0]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	bc30      	pop	{r4, r5}
 800ddd6:	f000 bcc9 	b.w	800e76c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800ddda:	bc30      	pop	{r4, r5}
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	20000d98 	mulcs	r0, r8, sp
 800dde4:	200011c8 	andcs	r1, r0, r8, asr #3

0800dde8 <DmxSend::Stop(unsigned int)>:
 800dde8:	2201      	movs	r2, #1
 800ddea:	b410      	push	{r4}
 800ddec:	4809      	ldr	r0, [pc, #36]	; (800de14 <DmxSend::Stop(unsigned int)+0x2c>)
 800ddee:	408a      	lsls	r2, r1
 800ddf0:	7803      	ldrb	r3, [r0, #0]
 800ddf2:	ea03 0402 	and.w	r4, r3, r2
 800ddf6:	439a      	bics	r2, r3
 800ddf8:	d109      	bne.n	800de0e <DmxSend::Stop(unsigned int)+0x26>
 800ddfa:	ea23 0304 	bic.w	r3, r3, r4
 800ddfe:	7003      	strb	r3, [r0, #0]
 800de00:	2300      	movs	r3, #0
 800de02:	4805      	ldr	r0, [pc, #20]	; (800de18 <DmxSend::Stop(unsigned int)+0x30>)
 800de04:	461a      	mov	r2, r3
 800de06:	6800      	ldr	r0, [r0, #0]
 800de08:	bc10      	pop	{r4}
 800de0a:	f000 bcaf 	b.w	800e76c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800de0e:	bc10      	pop	{r4}
 800de10:	4770      	bx	lr
 800de12:	bf00      	nop
 800de14:	20000d98 	mulcs	r0, r8, sp
 800de18:	200011c8 	andcs	r1, r0, r8, asr #3

0800de1c <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800de1c:	b11b      	cbz	r3, 800de26 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xa>
 800de1e:	4802      	ldr	r0, [pc, #8]	; (800de28 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xc>)
 800de20:	6800      	ldr	r0, [r0, #0]
 800de22:	f000 be03 	b.w	800ea2c <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>
 800de26:	4770      	bx	lr
 800de28:	200011c8 	andcs	r1, r0, r8, asr #3

0800de2c <DmxSend::Blackout(bool)>:
 800de2c:	4b01      	ldr	r3, [pc, #4]	; (800de34 <DmxSend::Blackout(bool)+0x8>)
 800de2e:	6818      	ldr	r0, [r3, #0]
 800de30:	f000 be22 	b.w	800ea78 <Dmx::Blackout()>
 800de34:	200011c8 	andcs	r1, r0, r8, asr #3

0800de38 <DmxSend::FullOn()>:
 800de38:	4b01      	ldr	r3, [pc, #4]	; (800de40 <DmxSend::FullOn()+0x8>)
 800de3a:	6818      	ldr	r0, [r3, #0]
 800de3c:	f000 be44 	b.w	800eac8 <Dmx::FullOn()>
 800de40:	200011c8 	andcs	r1, r0, r8, asr #3

0800de44 <DmxSend::Print()>:
 800de44:	b510      	push	{r4, lr}
 800de46:	4c0e      	ldr	r4, [pc, #56]	; (800de80 <DmxSend::Print()+0x3c>)
 800de48:	480e      	ldr	r0, [pc, #56]	; (800de84 <DmxSend::Print()+0x40>)
 800de4a:	f005 fbdd 	bl	8013608 <printf>
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	480d      	ldr	r0, [pc, #52]	; (800de88 <DmxSend::Print()+0x44>)
 800de52:	6819      	ldr	r1, [r3, #0]
 800de54:	f005 fbd8 	bl	8013608 <printf>
 800de58:	6823      	ldr	r3, [r4, #0]
 800de5a:	480c      	ldr	r0, [pc, #48]	; (800de8c <DmxSend::Print()+0x48>)
 800de5c:	6859      	ldr	r1, [r3, #4]
 800de5e:	f005 fbd3 	bl	8013608 <printf>
 800de62:	6823      	ldr	r3, [r4, #0]
 800de64:	490a      	ldr	r1, [pc, #40]	; (800de90 <DmxSend::Print()+0x4c>)
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	480a      	ldr	r0, [pc, #40]	; (800de94 <DmxSend::Print()+0x50>)
 800de6a:	fbb1 f1f3 	udiv	r1, r1, r3
 800de6e:	f005 fbcb 	bl	8013608 <printf>
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	4808      	ldr	r0, [pc, #32]	; (800de98 <DmxSend::Print()+0x54>)
 800de76:	8a19      	ldrh	r1, [r3, #16]
 800de78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de7c:	f005 bbc4 	b.w	8013608 <printf>
 800de80:	200011c8 	andcs	r1, r0, r8, asr #3
 800de84:	08017021 	stmdaeq	r1, {r0, r5, ip, sp, lr}
 800de88:	0801702b 	stmdaeq	r1, {r0, r1, r3, r5, ip, sp, lr}
 800de8c:	0801703f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, ip, sp, lr}
 800de90:	000f4240 	andeq	r4, pc, r0, asr #4
 800de94:	08017053 	stmdaeq	r1, {r0, r1, r4, r6, ip, sp, lr}
 800de98:	08017067 	stmdaeq	r1, {r0, r1, r2, r5, r6, ip, sp, lr}

0800de9c <DmxSend::~DmxSend()>:
 800de9c:	b510      	push	{r4, lr}
 800de9e:	4604      	mov	r4, r0
 800dea0:	f005 f8e6 	bl	8013070 <operator delete(void*)>
 800dea4:	4620      	mov	r0, r4
 800dea6:	bd10      	pop	{r4, pc}

0800dea8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800dea8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800deaa:	88c6      	ldrh	r6, [r0, #6]
 800deac:	8885      	ldrh	r5, [r0, #4]
 800deae:	42ae      	cmp	r6, r5
 800deb0:	d216      	bcs.n	800dee0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800deb2:	4604      	mov	r4, r0
 800deb4:	6800      	ldr	r0, [r0, #0]
 800deb6:	1bad      	subs	r5, r5, r6
 800deb8:	4430      	add	r0, r6
 800deba:	7a26      	ldrb	r6, [r4, #8]
 800debc:	b923      	cbnz	r3, 800dec8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800debe:	b926      	cbnz	r6, 800deca <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800dec0:	9200      	str	r2, [sp, #0]
 800dec2:	460b      	mov	r3, r1
 800dec4:	4a09      	ldr	r2, [pc, #36]	; (800deec <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800dec6:	e003      	b.n	800ded0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800dec8:	b166      	cbz	r6, 800dee4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800deca:	460b      	mov	r3, r1
 800decc:	9200      	str	r2, [sp, #0]
 800dece:	4a08      	ldr	r2, [pc, #32]	; (800def0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800ded0:	4629      	mov	r1, r5
 800ded2:	f005 fbc1 	bl	8013658 <snprintf>
 800ded6:	4285      	cmp	r5, r0
 800ded8:	bfa2      	ittt	ge
 800deda:	88e3      	ldrhge	r3, [r4, #6]
 800dedc:	181b      	addge	r3, r3, r0
 800dede:	80e3      	strhge	r3, [r4, #6]
 800dee0:	b002      	add	sp, #8
 800dee2:	bd70      	pop	{r4, r5, r6, pc}
 800dee4:	9200      	str	r2, [sp, #0]
 800dee6:	460b      	mov	r3, r1
 800dee8:	4a02      	ldr	r2, [pc, #8]	; (800def4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800deea:	e7f1      	b.n	800ded0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800deec:	08015ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, ip, lr}
 800def0:	08015c9c 	stmdaeq	r1, {r2, r3, r4, r7, sl, fp, ip, lr}
 800def4:	08015ca6 	stmdaeq	r1, {r1, r2, r5, r7, sl, fp, ip, lr}

0800def8 <DmxParams::DmxParams(DmxParamsStore*)>:
 800def8:	6001      	str	r1, [r0, #0]
 800defa:	2100      	movs	r1, #0
 800defc:	4a03      	ldr	r2, [pc, #12]	; (800df0c <DmxParams::DmxParams(DmxParamsStore*)+0x14>)
 800defe:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800df02:	f64f 7228 	movw	r2, #65320	; 0xff28
 800df06:	8182      	strh	r2, [r0, #12]
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop
 800df0c:	000c00b0 	strheq	r0, [ip], -r0	; <UNPREDICTABLE>

0800df10 <DmxParams::Load()>:
 800df10:	b508      	push	{r3, lr}
 800df12:	2300      	movs	r3, #0
 800df14:	4601      	mov	r1, r0
 800df16:	6043      	str	r3, [r0, #4]
 800df18:	6800      	ldr	r0, [r0, #0]
 800df1a:	b120      	cbz	r0, 800df26 <DmxParams::Load()+0x16>
 800df1c:	6803      	ldr	r3, [r0, #0]
 800df1e:	3104      	adds	r1, #4
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	4798      	blx	r3
 800df24:	2001      	movs	r0, #1
 800df26:	bd08      	pop	{r3, pc}

0800df28 <DmxParams::Load(char const*, unsigned int)>:
 800df28:	6803      	ldr	r3, [r0, #0]
 800df2a:	b1d3      	cbz	r3, 800df62 <DmxParams::Load(char const*, unsigned int)+0x3a>
 800df2c:	2300      	movs	r3, #0
 800df2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df30:	460d      	mov	r5, r1
 800df32:	4616      	mov	r6, r2
 800df34:	4604      	mov	r4, r0
 800df36:	6043      	str	r3, [r0, #4]
 800df38:	4602      	mov	r2, r0
 800df3a:	490a      	ldr	r1, [pc, #40]	; (800df64 <DmxParams::Load(char const*, unsigned int)+0x3c>)
 800df3c:	4668      	mov	r0, sp
 800df3e:	f004 fb6f 	bl	8012620 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800df42:	4632      	mov	r2, r6
 800df44:	4629      	mov	r1, r5
 800df46:	4668      	mov	r0, sp
 800df48:	f004 fb6e 	bl	8012628 <ReadConfigFile::Read(char const*, unsigned int)>
 800df4c:	4621      	mov	r1, r4
 800df4e:	f851 0b04 	ldr.w	r0, [r1], #4
 800df52:	6803      	ldr	r3, [r0, #0]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	4798      	blx	r3
 800df58:	4668      	mov	r0, sp
 800df5a:	f004 fb64 	bl	8012626 <ReadConfigFile::~ReadConfigFile()>
 800df5e:	b002      	add	sp, #8
 800df60:	bd70      	pop	{r4, r5, r6, pc}
 800df62:	4770      	bx	lr
 800df64:	0800e035 	stmdaeq	r0, {r0, r2, r4, r5, sp, lr, pc}

0800df68 <DmxParams::callbackFunction(char const*)>:
 800df68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df6a:	460d      	mov	r5, r1
 800df6c:	4604      	mov	r4, r0
 800df6e:	492d      	ldr	r1, [pc, #180]	; (800e024 <DmxParams::callbackFunction(char const*)+0xbc>)
 800df70:	4628      	mov	r0, r5
 800df72:	f10d 0206 	add.w	r2, sp, #6
 800df76:	f004 fbe5 	bl	8012744 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800df7a:	b988      	cbnz	r0, 800dfa0 <DmxParams::callbackFunction(char const*)+0x38>
 800df7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800df80:	6863      	ldr	r3, [r4, #4]
 800df82:	2a5b      	cmp	r2, #91	; 0x5b
 800df84:	d907      	bls.n	800df96 <DmxParams::callbackFunction(char const*)+0x2e>
 800df86:	2ab0      	cmp	r2, #176	; 0xb0
 800df88:	d005      	beq.n	800df96 <DmxParams::callbackFunction(char const*)+0x2e>
 800df8a:	8122      	strh	r2, [r4, #8]
 800df8c:	f043 0301 	orr.w	r3, r3, #1
 800df90:	6063      	str	r3, [r4, #4]
 800df92:	b003      	add	sp, #12
 800df94:	bd30      	pop	{r4, r5, pc}
 800df96:	22b0      	movs	r2, #176	; 0xb0
 800df98:	f023 0301 	bic.w	r3, r3, #1
 800df9c:	8122      	strh	r2, [r4, #8]
 800df9e:	e7f7      	b.n	800df90 <DmxParams::callbackFunction(char const*)+0x28>
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	4921      	ldr	r1, [pc, #132]	; (800e028 <DmxParams::callbackFunction(char const*)+0xc0>)
 800dfa4:	f10d 0206 	add.w	r2, sp, #6
 800dfa8:	f004 fbcc 	bl	8012744 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800dfac:	b968      	cbnz	r0, 800dfca <DmxParams::callbackFunction(char const*)+0x62>
 800dfae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dfb2:	6863      	ldr	r3, [r4, #4]
 800dfb4:	2a0c      	cmp	r2, #12
 800dfb6:	bf93      	iteet	ls
 800dfb8:	220c      	movls	r2, #12
 800dfba:	8162      	strhhi	r2, [r4, #10]
 800dfbc:	f043 0302 	orrhi.w	r3, r3, #2
 800dfc0:	8162      	strhls	r2, [r4, #10]
 800dfc2:	bf98      	it	ls
 800dfc4:	f023 0302 	bicls.w	r3, r3, #2
 800dfc8:	e7e2      	b.n	800df90 <DmxParams::callbackFunction(char const*)+0x28>
 800dfca:	4628      	mov	r0, r5
 800dfcc:	4917      	ldr	r1, [pc, #92]	; (800e02c <DmxParams::callbackFunction(char const*)+0xc4>)
 800dfce:	f10d 0205 	add.w	r2, sp, #5
 800dfd2:	f004 fbd5 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800dfd6:	b950      	cbnz	r0, 800dfee <DmxParams::callbackFunction(char const*)+0x86>
 800dfd8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dfdc:	6863      	ldr	r3, [r4, #4]
 800dfde:	2a28      	cmp	r2, #40	; 0x28
 800dfe0:	7322      	strb	r2, [r4, #12]
 800dfe2:	bf14      	ite	ne
 800dfe4:	f043 0304 	orrne.w	r3, r3, #4
 800dfe8:	f023 0304 	biceq.w	r3, r3, #4
 800dfec:	e7d0      	b.n	800df90 <DmxParams::callbackFunction(char const*)+0x28>
 800dfee:	4628      	mov	r0, r5
 800dff0:	490f      	ldr	r1, [pc, #60]	; (800e030 <DmxParams::callbackFunction(char const*)+0xc8>)
 800dff2:	f10d 0206 	add.w	r2, sp, #6
 800dff6:	f004 fba5 	bl	8012744 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d1c9      	bne.n	800df92 <DmxParams::callbackFunction(char const*)+0x2a>
 800dffe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e002:	6863      	ldr	r3, [r4, #4]
 800e004:	1e91      	subs	r1, r2, #2
 800e006:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800e00a:	bf2f      	iteee	cs
 800e00c:	22ff      	movcs	r2, #255	; 0xff
 800e00e:	0852      	lsrcc	r2, r2, #1
 800e010:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800e014:	7362      	strbcc	r2, [r4, #13]
 800e016:	bf32      	itee	cc
 800e018:	f043 0308 	orrcc.w	r3, r3, #8
 800e01c:	7362      	strbcs	r2, [r4, #13]
 800e01e:	f023 0308 	biccs.w	r3, r3, #8
 800e022:	e7b5      	b.n	800df90 <DmxParams::callbackFunction(char const*)+0x28>
 800e024:	080170b4 	stmdaeq	r1, {r2, r4, r5, r7, ip, sp, lr}
 800e028:	080170d8 	stmdaeq	r1, {r3, r4, r6, r7, ip, sp, lr}
 800e02c:	080170cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, ip, sp, lr}
 800e030:	080170bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, ip, sp, lr}

0800e034 <DmxParams::staticCallbackFunction(void*, char const*)>:
 800e034:	f7ff bf98 	b.w	800df68 <DmxParams::callbackFunction(char const*)>

0800e038 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	4604      	mov	r4, r0
 800e03c:	4615      	mov	r5, r2
 800e03e:	461e      	mov	r6, r3
 800e040:	b086      	sub	sp, #24
 800e042:	3004      	adds	r0, #4
 800e044:	b369      	cbz	r1, 800e0a2 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x6a>
 800e046:	220a      	movs	r2, #10
 800e048:	f005 f8ad 	bl	80131a6 <memmove>
 800e04c:	462a      	mov	r2, r5
 800e04e:	4633      	mov	r3, r6
 800e050:	4932      	ldr	r1, [pc, #200]	; (800e11c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe4>)
 800e052:	a803      	add	r0, sp, #12
 800e054:	f004 fa44 	bl	80124e0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800e058:	6863      	ldr	r3, [r4, #4]
 800e05a:	8922      	ldrh	r2, [r4, #8]
 800e05c:	4930      	ldr	r1, [pc, #192]	; (800e120 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe8>)
 800e05e:	f003 0301 	and.w	r3, r3, #1
 800e062:	a803      	add	r0, sp, #12
 800e064:	f7ff ff20 	bl	800dea8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e068:	6863      	ldr	r3, [r4, #4]
 800e06a:	8962      	ldrh	r2, [r4, #10]
 800e06c:	492d      	ldr	r1, [pc, #180]	; (800e124 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xec>)
 800e06e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e072:	a803      	add	r0, sp, #12
 800e074:	f7ff ff18 	bl	800dea8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e078:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e07c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800e080:	7b23      	ldrb	r3, [r4, #12]
 800e082:	42aa      	cmp	r2, r5
 800e084:	6861      	ldr	r1, [r4, #4]
 800e086:	d221      	bcs.n	800e0cc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x94>
 800e088:	9803      	ldr	r0, [sp, #12]
 800e08a:	0749      	lsls	r1, r1, #29
 800e08c:	4410      	add	r0, r2
 800e08e:	eba5 0502 	sub.w	r5, r5, r2
 800e092:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800e096:	d40b      	bmi.n	800e0b0 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x78>
 800e098:	b95a      	cbnz	r2, 800e0b2 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7a>
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	4a22      	ldr	r2, [pc, #136]	; (800e128 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 800e09e:	4b23      	ldr	r3, [pc, #140]	; (800e12c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800e0a0:	e00a      	b.n	800e0b8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 800e0a2:	6823      	ldr	r3, [r4, #0]
 800e0a4:	4601      	mov	r1, r0
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	68d2      	ldr	r2, [r2, #12]
 800e0ac:	4790      	blx	r2
 800e0ae:	e7cd      	b.n	800e04c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x14>
 800e0b0:	b37a      	cbz	r2, 800e112 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xda>
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	4a1e      	ldr	r2, [pc, #120]	; (800e130 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800e0b6:	4b1d      	ldr	r3, [pc, #116]	; (800e12c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800e0b8:	4629      	mov	r1, r5
 800e0ba:	f005 facd 	bl	8013658 <snprintf>
 800e0be:	4285      	cmp	r5, r0
 800e0c0:	bfa2      	ittt	ge
 800e0c2:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800e0c6:	18c0      	addge	r0, r0, r3
 800e0c8:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800e0cc:	7b62      	ldrb	r2, [r4, #13]
 800e0ce:	6863      	ldr	r3, [r4, #4]
 800e0d0:	3201      	adds	r2, #1
 800e0d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e0d6:	4917      	ldr	r1, [pc, #92]	; (800e134 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800e0d8:	0052      	lsls	r2, r2, #1
 800e0da:	a803      	add	r0, sp, #12
 800e0dc:	f7ff fee4 	bl	800dea8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800e0e0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800e0e4:	b17b      	cbz	r3, 800e106 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xce>
 800e0e6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e0ea:	9b03      	ldr	r3, [sp, #12]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	227d      	movs	r2, #125	; 0x7d
 800e0f0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e0f4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e0f8:	9903      	ldr	r1, [sp, #12]
 800e0fa:	54ca      	strb	r2, [r1, r3]
 800e0fc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e100:	3301      	adds	r3, #1
 800e102:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e106:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800e10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	b006      	add	sp, #24
 800e110:	bd70      	pop	{r4, r5, r6, pc}
 800e112:	9300      	str	r3, [sp, #0]
 800e114:	4a08      	ldr	r2, [pc, #32]	; (800e138 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800e116:	4b05      	ldr	r3, [pc, #20]	; (800e12c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800e118:	e7ce      	b.n	800e0b8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 800e11a:	bf00      	nop
 800e11c:	080170e1 	stmdaeq	r1, {r0, r5, r6, r7, ip, sp, lr}
 800e120:	080170b4 	stmdaeq	r1, {r2, r4, r5, r7, ip, sp, lr}
 800e124:	080170d8 	stmdaeq	r1, {r3, r4, r6, r7, ip, sp, lr}
 800e128:	08015ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, ip, lr}
 800e12c:	080170cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, ip, sp, lr}
 800e130:	08015c9c 	stmdaeq	r1, {r2, r3, r4, r7, sl, fp, ip, lr}
 800e134:	080170bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, ip, sp, lr}
 800e138:	08015ca6 	stmdaeq	r1, {r1, r2, r5, r7, sl, fp, ip, lr}

0800e13c <DmxParams::Save(char*, unsigned int, unsigned int&)>:
 800e13c:	b513      	push	{r0, r1, r4, lr}
 800e13e:	6804      	ldr	r4, [r0, #0]
 800e140:	b914      	cbnz	r4, 800e148 <DmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800e142:	601c      	str	r4, [r3, #0]
 800e144:	b002      	add	sp, #8
 800e146:	bd10      	pop	{r4, pc}
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	4613      	mov	r3, r2
 800e14c:	460a      	mov	r2, r1
 800e14e:	2100      	movs	r1, #0
 800e150:	f7ff ff72 	bl	800e038 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>
 800e154:	e7f6      	b.n	800e144 <DmxParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800e158 <DmxParams::Set(Dmx*)>:
 800e158:	b538      	push	{r3, r4, r5, lr}
 800e15a:	6843      	ldr	r3, [r0, #4]
 800e15c:	4604      	mov	r4, r0
 800e15e:	07d8      	lsls	r0, r3, #31
 800e160:	460d      	mov	r5, r1
 800e162:	d503      	bpl.n	800e16c <DmxParams::Set(Dmx*)+0x14>
 800e164:	4628      	mov	r0, r5
 800e166:	8921      	ldrh	r1, [r4, #8]
 800e168:	f000 fc3c 	bl	800e9e4 <Dmx::SetDmxBreakTime(unsigned int)>
 800e16c:	6863      	ldr	r3, [r4, #4]
 800e16e:	0799      	lsls	r1, r3, #30
 800e170:	d503      	bpl.n	800e17a <DmxParams::Set(Dmx*)+0x22>
 800e172:	4628      	mov	r0, r5
 800e174:	8961      	ldrh	r1, [r4, #10]
 800e176:	f000 fc3f 	bl	800e9f8 <Dmx::SetDmxMabTime(unsigned int)>
 800e17a:	6863      	ldr	r3, [r4, #4]
 800e17c:	075a      	lsls	r2, r3, #29
 800e17e:	d507      	bpl.n	800e190 <DmxParams::Set(Dmx*)+0x38>
 800e180:	7b21      	ldrb	r1, [r4, #12]
 800e182:	b111      	cbz	r1, 800e18a <DmxParams::Set(Dmx*)+0x32>
 800e184:	4b08      	ldr	r3, [pc, #32]	; (800e1a8 <DmxParams::Set(Dmx*)+0x50>)
 800e186:	fbb3 f1f1 	udiv	r1, r3, r1
 800e18a:	4628      	mov	r0, r5
 800e18c:	f000 fbfa 	bl	800e984 <Dmx::SetDmxPeriodTime(unsigned int)>
 800e190:	6863      	ldr	r3, [r4, #4]
 800e192:	071b      	lsls	r3, r3, #28
 800e194:	d507      	bpl.n	800e1a6 <DmxParams::Set(Dmx*)+0x4e>
 800e196:	7b61      	ldrb	r1, [r4, #13]
 800e198:	4628      	mov	r0, r5
 800e19a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e19e:	3101      	adds	r1, #1
 800e1a0:	0049      	lsls	r1, r1, #1
 800e1a2:	f000 bc33 	b.w	800ea0c <Dmx::SetDmxSlots(unsigned short)>
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	000f4240 	andeq	r4, pc, r0, asr #4

0800e1ac <DmxParams::Dump()>:
 800e1ac:	4770      	bx	lr
	...

0800e1b0 <Rdm::Receive(unsigned int)>:
 800e1b0:	4b02      	ldr	r3, [pc, #8]	; (800e1bc <Rdm::Receive(unsigned int)+0xc>)
 800e1b2:	4601      	mov	r1, r0
 800e1b4:	6818      	ldr	r0, [r3, #0]
 800e1b6:	f000 bd11 	b.w	800ebdc <Dmx::RdmReceive(unsigned int)>
 800e1ba:	bf00      	nop
 800e1bc:	200011c8 	andcs	r1, r0, r8, asr #3

0800e1c0 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>:
 800e1c0:	4b02      	ldr	r3, [pc, #8]	; (800e1cc <Rdm::ReceiveTimeOut(unsigned int, unsigned short)+0xc>)
 800e1c2:	460a      	mov	r2, r1
 800e1c4:	4601      	mov	r1, r0
 800e1c6:	6818      	ldr	r0, [r3, #0]
 800e1c8:	f000 bd1a 	b.w	800ec00 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>
 800e1cc:	200011c8 	andcs	r1, r0, r8, asr #3

0800e1d0 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	460e      	mov	r6, r1
 800e1da:	4617      	mov	r7, r2
 800e1dc:	4d0b      	ldr	r5, [pc, #44]	; (800e20c <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 800e1de:	461a      	mov	r2, r3
 800e1e0:	4601      	mov	r1, r0
 800e1e2:	6828      	ldr	r0, [r5, #0]
 800e1e4:	f000 fac2 	bl	800e76c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800e1e8:	463b      	mov	r3, r7
 800e1ea:	4632      	mov	r2, r6
 800e1ec:	4621      	mov	r1, r4
 800e1ee:	6828      	ldr	r0, [r5, #0]
 800e1f0:	f000 fcae 	bl	800eb50 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 800e1f4:	2100      	movs	r1, #0
 800e1f6:	2004      	movs	r0, #4
 800e1f8:	f006 ff6c 	bl	80150d4 <udelay(unsigned int, unsigned int)>
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	4621      	mov	r1, r4
 800e200:	6828      	ldr	r0, [r5, #0]
 800e202:	461a      	mov	r2, r3
 800e204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e208:	f000 bab0 	b.w	800e76c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800e20c:	200011c8 	andcs	r1, r0, r8, asr #3

0800e210 <USART2_IRQHandler>:
 800e210:	b510      	push	{r4, lr}
 800e212:	2408      	movs	r4, #8
 800e214:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800e218:	4975      	ldr	r1, [pc, #468]	; (800e3f0 <USART2_IRQHandler+0x1e0>)
 800e21a:	f8c1 4c10 	str.w	r4, [r1, #3088]	; 0xc10
 800e21e:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800e222:	f013 0f02 	tst.w	r3, #2
 800e226:	4b73      	ldr	r3, [pc, #460]	; (800e3f4 <USART2_IRQHandler+0x1e4>)
 800e228:	d018      	beq.n	800e25c <USART2_IRQHandler+0x4c>
 800e22a:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
 800e22e:	f020 0002 	bic.w	r0, r0, #2
 800e232:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
 800e236:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800e23a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e23e:	b962      	cbnz	r2, 800e25a <USART2_IRQHandler+0x4a>
 800e240:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e244:	2201      	movs	r2, #1
 800e246:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e24a:	2310      	movs	r3, #16
 800e24c:	f8c1 4c14 	str.w	r4, [r1, #3092]	; 0xc14
 800e250:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 800e254:	2320      	movs	r3, #32
 800e256:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 800e25a:	bd10      	pop	{r4, pc}
 800e25c:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800e260:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 800e264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e268:	2807      	cmp	r0, #7
 800e26a:	f200 80bc 	bhi.w	800e3e6 <USART2_IRQHandler+0x1d6>
 800e26e:	e8df f000 	tbb	[pc, r0]
 800e272:	41ba1804 			; <UNDEFINED> instruction: 0x41ba1804
 800e276:	a1807056 	orrge	r7, r0, r6, asr r0
 800e27a:	701a      	strb	r2, [r3, #0]
 800e27c:	2107      	movs	r1, #7
 800e27e:	2201      	movs	r2, #1
 800e280:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800e284:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e28c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800e290:	4a59      	ldr	r2, [pc, #356]	; (800e3f8 <USART2_IRQHandler+0x1e8>)
 800e292:	b29b      	uxth	r3, r3
 800e294:	8193      	strh	r3, [r2, #12]
 800e296:	2210      	movs	r2, #16
 800e298:	4b55      	ldr	r3, [pc, #340]	; (800e3f0 <USART2_IRQHandler+0x1e0>)
 800e29a:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800e29e:	2220      	movs	r2, #32
 800e2a0:	e017      	b.n	800e2d2 <USART2_IRQHandler+0xc2>
 800e2a2:	b11a      	cbz	r2, 800e2ac <USART2_IRQHandler+0x9c>
 800e2a4:	2acc      	cmp	r2, #204	; 0xcc
 800e2a6:	d01b      	beq.n	800e2e0 <USART2_IRQHandler+0xd0>
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	e05f      	b.n	800e36c <USART2_IRQHandler+0x15c>
 800e2ac:	701a      	strb	r2, [r3, #0]
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e2b4:	4a50      	ldr	r2, [pc, #320]	; (800e3f8 <USART2_IRQHandler+0x1e8>)
 800e2b6:	6851      	ldr	r1, [r2, #4]
 800e2b8:	3101      	adds	r1, #1
 800e2ba:	6051      	str	r1, [r2, #4]
 800e2bc:	2103      	movs	r1, #3
 800e2be:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800e2c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e2c6:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	8193      	strh	r3, [r2, #12]
 800e2ce:	2210      	movs	r2, #16
 800e2d0:	4b47      	ldr	r3, [pc, #284]	; (800e3f0 <USART2_IRQHandler+0x1e0>)
 800e2d2:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800e2d6:	2208      	movs	r2, #8
 800e2d8:	4b45      	ldr	r3, [pc, #276]	; (800e3f0 <USART2_IRQHandler+0x1e0>)
 800e2da:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e2de:	e7bc      	b.n	800e25a <USART2_IRQHandler+0x4a>
 800e2e0:	701a      	strb	r2, [r3, #0]
 800e2e2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e2ec:	2204      	movs	r2, #4
 800e2ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e2f2:	e7ec      	b.n	800e2ce <USART2_IRQHandler+0xbe>
 800e2f4:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800e2f8:	545a      	strb	r2, [r3, r1]
 800e2fa:	1c4a      	adds	r2, r1, #1
 800e2fc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800e300:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e304:	d95e      	bls.n	800e3c4 <USART2_IRQHandler+0x1b4>
 800e306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e30a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e30e:	2200      	movs	r2, #0
 800e310:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e314:	2210      	movs	r2, #16
 800e316:	4b36      	ldr	r3, [pc, #216]	; (800e3f0 <USART2_IRQHandler+0x1e0>)
 800e318:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e31c:	e7db      	b.n	800e2d6 <USART2_IRQHandler+0xc6>
 800e31e:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800e322:	f8b3 4208 	ldrh.w	r4, [r3, #520]	; 0x208
 800e326:	545a      	strb	r2, [r3, r1]
 800e328:	1c48      	adds	r0, r1, #1
 800e32a:	3917      	subs	r1, #23
 800e32c:	4422      	add	r2, r4
 800e32e:	29e9      	cmp	r1, #233	; 0xe9
 800e330:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 800e334:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800e338:	d807      	bhi.n	800e34a <USART2_IRQHandler+0x13a>
 800e33a:	789a      	ldrb	r2, [r3, #2]
 800e33c:	4290      	cmp	r0, r2
 800e33e:	d104      	bne.n	800e34a <USART2_IRQHandler+0x13a>
 800e340:	2205      	movs	r2, #5
 800e342:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e346:	4b2a      	ldr	r3, [pc, #168]	; (800e3f0 <USART2_IRQHandler+0x1e0>)
 800e348:	e7a9      	b.n	800e29e <USART2_IRQHandler+0x8e>
 800e34a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 800e34e:	d3c2      	bcc.n	800e2d6 <USART2_IRQHandler+0xc6>
 800e350:	e7aa      	b.n	800e2a8 <USART2_IRQHandler+0x98>
 800e352:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800e356:	545a      	strb	r2, [r3, r1]
 800e358:	3101      	adds	r1, #1
 800e35a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 800e35e:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800e362:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 800e366:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800e36a:	2206      	movs	r2, #6
 800e36c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e370:	e7b1      	b.n	800e2d6 <USART2_IRQHandler+0xc6>
 800e372:	2020      	movs	r0, #32
 800e374:	f8c1 0c14 	str.w	r0, [r1, #3092]	; 0xc14
 800e378:	f8b3 4208 	ldrh.w	r4, [r3, #520]	; 0x208
 800e37c:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800e380:	541a      	strb	r2, [r3, r0]
 800e382:	1aa2      	subs	r2, r4, r2
 800e384:	b292      	uxth	r2, r2
 800e386:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800e38a:	b912      	cbnz	r2, 800e392 <USART2_IRQHandler+0x182>
 800e38c:	785a      	ldrb	r2, [r3, #1]
 800e38e:	2a01      	cmp	r2, #1
 800e390:	d003      	beq.n	800e39a <USART2_IRQHandler+0x18a>
 800e392:	2200      	movs	r2, #0
 800e394:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e398:	e786      	b.n	800e2a8 <USART2_IRQHandler+0x98>
 800e39a:	3001      	adds	r0, #1
 800e39c:	4a17      	ldr	r2, [pc, #92]	; (800e3fc <USART2_IRQHandler+0x1ec>)
 800e39e:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800e3a2:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 800e3a6:	6850      	ldr	r0, [r2, #4]
 800e3a8:	4a15      	ldr	r2, [pc, #84]	; (800e400 <USART2_IRQHandler+0x1f0>)
 800e3aa:	6010      	str	r0, [r2, #0]
 800e3ac:	2210      	movs	r2, #16
 800e3ae:	f8c1 2c14 	str.w	r2, [r1, #3092]	; 0xc14
 800e3b2:	e779      	b.n	800e2a8 <USART2_IRQHandler+0x98>
 800e3b4:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800e3b8:	2917      	cmp	r1, #23
 800e3ba:	bf9e      	ittt	ls
 800e3bc:	545a      	strbls	r2, [r3, r1]
 800e3be:	3101      	addls	r1, #1
 800e3c0:	f8c3 1204 	strls.w	r1, [r3, #516]	; 0x204
 800e3c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e3c8:	480b      	ldr	r0, [pc, #44]	; (800e3f8 <USART2_IRQHandler+0x1e8>)
 800e3ca:	f8d1 2424 	ldr.w	r2, [r1, #1060]	; 0x424
 800e3ce:	8983      	ldrh	r3, [r0, #12]
 800e3d0:	b292      	uxth	r2, r2
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	f1c3 0304 	rsb	r3, r3, #4
 800e3d8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	8182      	strh	r2, [r0, #12]
 800e3e0:	f8c1 3434 	str.w	r3, [r1, #1076]	; 0x434
 800e3e4:	e777      	b.n	800e2d6 <USART2_IRQHandler+0xc6>
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e3ec:	e7be      	b.n	800e36c <USART2_IRQHandler+0x15c>
 800e3ee:	bf00      	nop
 800e3f0:	40010000 	andmi	r0, r1, r0
 800e3f4:	20000d9c 	mulcs	r0, ip, sp
 800e3f8:	200011b4 			; <UNDEFINED> instruction: 0x200011b4
 800e3fc:	e0001000 	and	r1, r0, r0
 800e400:	200011cc 	andcs	r1, r0, ip, asr #3

0800e404 <TIMER1_IRQHandler>:
 800e404:	b538      	push	{r3, r4, r5, lr}
 800e406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e40a:	2008      	movs	r0, #8
 800e40c:	4a23      	ldr	r2, [pc, #140]	; (800e49c <TIMER1_IRQHandler+0x98>)
 800e40e:	691c      	ldr	r4, [r3, #16]
 800e410:	4923      	ldr	r1, [pc, #140]	; (800e4a0 <TIMER1_IRQHandler+0x9c>)
 800e412:	8813      	ldrh	r3, [r2, #0]
 800e414:	f8c1 0c10 	str.w	r0, [r1, #3088]	; 0xc10
 800e418:	07a1      	lsls	r1, r4, #30
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	d51b      	bpl.n	800e456 <TIMER1_IRQHandler+0x52>
 800e41e:	07dd      	lsls	r5, r3, #31
 800e420:	d50f      	bpl.n	800e442 <TIMER1_IRQHandler+0x3e>
 800e422:	8813      	ldrh	r3, [r2, #0]
 800e424:	4d1f      	ldr	r5, [pc, #124]	; (800e4a4 <TIMER1_IRQHandler+0xa0>)
 800e426:	b29b      	uxth	r3, r3
 800e428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e42c:	8013      	strh	r3, [r2, #0]
 800e42e:	2110      	movs	r1, #16
 800e430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e434:	2203      	movs	r2, #3
 800e436:	4628      	mov	r0, r5
 800e438:	f005 ffee 	bl	8014418 <gpio_init>
 800e43c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e440:	616b      	str	r3, [r5, #20]
 800e442:	4621      	mov	r1, r4
 800e444:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e448:	f006 fac3 	bl	80149d2 <timer_interrupt_flag_clear>
 800e44c:	2208      	movs	r2, #8
 800e44e:	4b14      	ldr	r3, [pc, #80]	; (800e4a0 <TIMER1_IRQHandler+0x9c>)
 800e450:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e454:	bd38      	pop	{r3, r4, r5, pc}
 800e456:	0760      	lsls	r0, r4, #29
 800e458:	d509      	bpl.n	800e46e <TIMER1_IRQHandler+0x6a>
 800e45a:	05d9      	lsls	r1, r3, #23
 800e45c:	d5f1      	bpl.n	800e442 <TIMER1_IRQHandler+0x3e>
 800e45e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e462:	2203      	movs	r2, #3
 800e464:	2118      	movs	r1, #24
 800e466:	480f      	ldr	r0, [pc, #60]	; (800e4a4 <TIMER1_IRQHandler+0xa0>)
 800e468:	f005 ffd6 	bl	8014418 <gpio_init>
 800e46c:	e7e9      	b.n	800e442 <TIMER1_IRQHandler+0x3e>
 800e46e:	0722      	lsls	r2, r4, #28
 800e470:	d5e7      	bpl.n	800e442 <TIMER1_IRQHandler+0x3e>
 800e472:	05db      	lsls	r3, r3, #23
 800e474:	d5e5      	bpl.n	800e442 <TIMER1_IRQHandler+0x3e>
 800e476:	4b0c      	ldr	r3, [pc, #48]	; (800e4a8 <TIMER1_IRQHandler+0xa4>)
 800e478:	2180      	movs	r1, #128	; 0x80
 800e47a:	69da      	ldr	r2, [r3, #28]
 800e47c:	480b      	ldr	r0, [pc, #44]	; (800e4ac <TIMER1_IRQHandler+0xa8>)
 800e47e:	f022 0201 	bic.w	r2, r2, #1
 800e482:	61da      	str	r2, [r3, #28]
 800e484:	4a0a      	ldr	r2, [pc, #40]	; (800e4b0 <TIMER1_IRQHandler+0xac>)
 800e486:	629a      	str	r2, [r3, #40]	; 0x28
 800e488:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 800e48c:	621a      	str	r2, [r3, #32]
 800e48e:	69da      	ldr	r2, [r3, #28]
 800e490:	f042 0201 	orr.w	r2, r2, #1
 800e494:	61da      	str	r2, [r3, #28]
 800e496:	f006 fb3b 	bl	8014b10 <usart_dma_transmit_config>
 800e49a:	e7d2      	b.n	800e442 <TIMER1_IRQHandler+0x3e>
 800e49c:	200011c4 	andcs	r1, r0, r4, asr #3
 800e4a0:	40010000 	andmi	r0, r1, r0
 800e4a4:	40011000 	andmi	r1, r1, r0
 800e4a8:	40020000 	andmi	r0, r2, r0
 800e4ac:	40004800 	andmi	r4, r0, r0, lsl #16
 800e4b0:	20000fac 	andcs	r0, r0, ip, lsr #31

0800e4b4 <TIMER2_IRQHandler>:
 800e4b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e4b8:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 800e4bc:	078b      	lsls	r3, r1, #30
 800e4be:	d511      	bpl.n	800e4e4 <TIMER2_IRQHandler+0x30>
 800e4c0:	4b13      	ldr	r3, [pc, #76]	; (800e510 <TIMER2_IRQHandler+0x5c>)
 800e4c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e4c6:	2a03      	cmp	r2, #3
 800e4c8:	d10f      	bne.n	800e4ea <TIMER2_IRQHandler+0x36>
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e4d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e4d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e4d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e4dc:	2210      	movs	r2, #16
 800e4de:	4b0d      	ldr	r3, [pc, #52]	; (800e514 <TIMER2_IRQHandler+0x60>)
 800e4e0:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e4e4:	480c      	ldr	r0, [pc, #48]	; (800e518 <TIMER2_IRQHandler+0x64>)
 800e4e6:	f006 ba74 	b.w	80149d2 <timer_interrupt_flag_clear>
 800e4ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e4ee:	2a07      	cmp	r2, #7
 800e4f0:	d1f8      	bne.n	800e4e4 <TIMER2_IRQHandler+0x30>
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e4f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e4fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e500:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e504:	2210      	movs	r2, #16
 800e506:	4b03      	ldr	r3, [pc, #12]	; (800e514 <TIMER2_IRQHandler+0x60>)
 800e508:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e50c:	2220      	movs	r2, #32
 800e50e:	e7e7      	b.n	800e4e0 <TIMER2_IRQHandler+0x2c>
 800e510:	20000d9c 	mulcs	r0, ip, sp
 800e514:	40010000 	andmi	r0, r1, r0
 800e518:	40000400 	andmi	r0, r0, r0, lsl #8

0800e51c <TIMER3_IRQHandler>:
 800e51c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e520:	4802      	ldr	r0, [pc, #8]	; (800e52c <TIMER3_IRQHandler+0x10>)
 800e522:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 800e526:	f006 ba54 	b.w	80149d2 <timer_interrupt_flag_clear>
 800e52a:	bf00      	nop
 800e52c:	40000800 	andmi	r0, r0, r0, lsl #16

0800e530 <TIMER6_IRQHandler>:
 800e530:	4b05      	ldr	r3, [pc, #20]	; (800e548 <TIMER6_IRQHandler+0x18>)
 800e532:	4806      	ldr	r0, [pc, #24]	; (800e54c <TIMER6_IRQHandler+0x1c>)
 800e534:	685a      	ldr	r2, [r3, #4]
 800e536:	6899      	ldr	r1, [r3, #8]
 800e538:	1a52      	subs	r2, r2, r1
 800e53a:	601a      	str	r2, [r3, #0]
 800e53c:	685a      	ldr	r2, [r3, #4]
 800e53e:	2101      	movs	r1, #1
 800e540:	609a      	str	r2, [r3, #8]
 800e542:	f006 ba46 	b.w	80149d2 <timer_interrupt_flag_clear>
 800e546:	bf00      	nop
 800e548:	200011b4 			; <UNDEFINED> instruction: 0x200011b4
 800e54c:	40001400 	andmi	r1, r0, r0, lsl #8

0800e550 <Dmx::ClearData(unsigned int)>:
 800e550:	f44f 7301 	mov.w	r3, #516	; 0x204
 800e554:	b510      	push	{r4, lr}
 800e556:	2400      	movs	r4, #0
 800e558:	4a08      	ldr	r2, [pc, #32]	; (800e57c <Dmx::ClearData(unsigned int)+0x2c>)
 800e55a:	fb03 2301 	mla	r3, r3, r1, r2
 800e55e:	f203 2002 	addw	r0, r3, #514	; 0x202
 800e562:	f823 4b02 	strh.w	r4, [r3], #2
 800e566:	4283      	cmp	r3, r0
 800e568:	d1fb      	bne.n	800e562 <Dmx::ClearData(unsigned int)+0x12>
 800e56a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800e56e:	fb03 2201 	mla	r2, r3, r1, r2
 800e572:	f240 2301 	movw	r3, #513	; 0x201
 800e576:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 800e57a:	bd10      	pop	{r4, pc}
 800e57c:	20000fac 	andcs	r0, r0, ip, lsr #31

0800e580 <Dmx::StartData(unsigned int, unsigned int)>:
 800e580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e582:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e586:	6943      	ldr	r3, [r0, #20]
 800e588:	460c      	mov	r4, r1
 800e58a:	4615      	mov	r5, r2
 800e58c:	b085      	sub	sp, #20
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d16c      	bne.n	800e66c <Dmx::StartData(unsigned int, unsigned int)+0xec>
 800e592:	4e48      	ldr	r6, [pc, #288]	; (800e6b4 <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 800e594:	8834      	ldrh	r4, [r6, #0]
 800e596:	b2a4      	uxth	r4, r4
 800e598:	2c00      	cmp	r4, #0
 800e59a:	d15b      	bne.n	800e654 <Dmx::StartData(unsigned int, unsigned int)+0xd4>
 800e59c:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800e5a0:	f005 ffd2 	bl	8014548 <rcu_periph_clock_enable>
 800e5a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e5a8:	f006 f91c 	bl	80147e4 <timer_deinit>
 800e5ac:	236b      	movs	r3, #107	; 0x6b
 800e5ae:	9300      	str	r3, [sp, #0]
 800e5b0:	4b41      	ldr	r3, [pc, #260]	; (800e6b8 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 800e5b2:	4669      	mov	r1, sp
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e5ba:	9302      	str	r3, [sp, #8]
 800e5bc:	f8ad 4004 	strh.w	r4, [sp, #4]
 800e5c0:	f8ad 400c 	strh.w	r4, [sp, #12]
 800e5c4:	f88d 400e 	strb.w	r4, [sp, #14]
 800e5c8:	f006 f96e 	bl	80148a8 <timer_init>
 800e5cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e5d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e5d4:	f006 fa00 	bl	80149d8 <timer_flag_clear>
 800e5d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e5dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e5e0:	f006 f9f7 	bl	80149d2 <timer_interrupt_flag_clear>
 800e5e4:	2210      	movs	r2, #16
 800e5e6:	4621      	mov	r1, r4
 800e5e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e5ec:	f006 f9b9 	bl	8014962 <timer_channel_output_mode_config>
 800e5f0:	2210      	movs	r2, #16
 800e5f2:	2101      	movs	r1, #1
 800e5f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e5f8:	f006 f9b3 	bl	8014962 <timer_channel_output_mode_config>
 800e5fc:	4f2f      	ldr	r7, [pc, #188]	; (800e6bc <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 800e5fe:	2210      	movs	r2, #16
 800e600:	2102      	movs	r1, #2
 800e602:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e606:	f006 f9ac 	bl	8014962 <timer_channel_output_mode_config>
 800e60a:	4622      	mov	r2, r4
 800e60c:	4621      	mov	r1, r4
 800e60e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e612:	f006 f9cc 	bl	80149ae <timer_channel_output_pulse_value_config>
 800e616:	2101      	movs	r1, #1
 800e618:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e61c:	883a      	ldrh	r2, [r7, #0]
 800e61e:	f006 f9c6 	bl	80149ae <timer_channel_output_pulse_value_config>
 800e622:	4b27      	ldr	r3, [pc, #156]	; (800e6c0 <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 800e624:	683a      	ldr	r2, [r7, #0]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2102      	movs	r1, #2
 800e62a:	441a      	add	r2, r3
 800e62c:	b292      	uxth	r2, r2
 800e62e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e632:	f006 f9bc 	bl	80149ae <timer_channel_output_pulse_value_config>
 800e636:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e63a:	210e      	movs	r1, #14
 800e63c:	f006 f9c5 	bl	80149ca <timer_interrupt_enable>
 800e640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e644:	4b1f      	ldr	r3, [pc, #124]	; (800e6c4 <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 800e646:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e64a:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 800e64e:	601a      	str	r2, [r3, #0]
 800e650:	f006 f982 	bl	8014958 <timer_enable>
 800e654:	2201      	movs	r2, #1
 800e656:	8831      	ldrh	r1, [r6, #0]
 800e658:	fa02 f305 	lsl.w	r3, r2, r5
 800e65c:	430b      	orrs	r3, r1
 800e65e:	b29b      	uxth	r3, r3
 800e660:	8033      	strh	r3, [r6, #0]
 800e662:	4b19      	ldr	r3, [pc, #100]	; (800e6c8 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800e664:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e668:	b005      	add	sp, #20
 800e66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e66c:	f44f 7204 	mov.w	r2, #528	; 0x210
 800e670:	4b16      	ldr	r3, [pc, #88]	; (800e6cc <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 800e672:	fb02 3305 	mla	r3, r2, r5, r3
 800e676:	2200      	movs	r2, #0
 800e678:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e67c:	2107      	movs	r1, #7
 800e67e:	4620      	mov	r0, r4
 800e680:	f006 fa4c 	bl	8014b1c <usart_flag_get>
 800e684:	2800      	cmp	r0, #0
 800e686:	d0f9      	beq.n	800e67c <Dmx::StartData(unsigned int, unsigned int)+0xfc>
 800e688:	4620      	mov	r0, r4
 800e68a:	4911      	ldr	r1, [pc, #68]	; (800e6d0 <Dmx::StartData(unsigned int, unsigned int)+0x150>)
 800e68c:	f006 fa68 	bl	8014b60 <usart_interrupt_flag_clear>
 800e690:	f240 3105 	movw	r1, #773	; 0x305
 800e694:	4620      	mov	r0, r4
 800e696:	f006 fa4c 	bl	8014b32 <usart_interrupt_enable>
 800e69a:	2202      	movs	r2, #2
 800e69c:	4b0a      	ldr	r3, [pc, #40]	; (800e6c8 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800e69e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e6a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e6a6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800e6aa:	f043 0302 	orr.w	r3, r3, #2
 800e6ae:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800e6b2:	e7d9      	b.n	800e668 <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 800e6b4:	200011c4 	andcs	r1, r0, r4, asr #3
 800e6b8:	20000000 	andcs	r0, r0, r0
 800e6bc:	20000008 	andcs	r0, r0, r8
 800e6c0:	20000004 	andcs	r0, r0, r4
 800e6c4:	e000e100 	and	lr, r0, r0, lsl #2
 800e6c8:	200011b0 			; <UNDEFINED> instruction: 0x200011b0
 800e6cc:	20000d9c 	mulcs	r0, ip, sp
 800e6d0:	00050305 	andeq	r0, r5, r5, lsl #6

0800e6d4 <Dmx::StopData(unsigned int, unsigned int)>:
 800e6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d8:	4f21      	ldr	r7, [pc, #132]	; (800e760 <Dmx::StopData(unsigned int, unsigned int)+0x8c>)
 800e6da:	4688      	mov	r8, r1
 800e6dc:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 800e6e0:	4614      	mov	r4, r2
 800e6e2:	b323      	cbz	r3, 800e72e <Dmx::StopData(unsigned int, unsigned int)+0x5a>
 800e6e4:	6943      	ldr	r3, [r0, #20]
 800e6e6:	bb23      	cbnz	r3, 800e732 <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 800e6e8:	2601      	movs	r6, #1
 800e6ea:	4d1e      	ldr	r5, [pc, #120]	; (800e764 <Dmx::StopData(unsigned int, unsigned int)+0x90>)
 800e6ec:	fa06 f202 	lsl.w	r2, r6, r2
 800e6f0:	882b      	ldrh	r3, [r5, #0]
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	ea23 0302 	bic.w	r3, r3, r2
 800e6f8:	802b      	strh	r3, [r5, #0]
 800e6fa:	f3bf 8f5f 	dmb	sy
 800e6fe:	882b      	ldrh	r3, [r5, #0]
 800e700:	f104 0208 	add.w	r2, r4, #8
 800e704:	b29b      	uxth	r3, r3
 800e706:	4096      	lsls	r6, r2
 800e708:	ea36 0303 	bics.w	r3, r6, r3
 800e70c:	d105      	bne.n	800e71a <Dmx::StopData(unsigned int, unsigned int)+0x46>
 800e70e:	2107      	movs	r1, #7
 800e710:	4640      	mov	r0, r8
 800e712:	f006 fa03 	bl	8014b1c <usart_flag_get>
 800e716:	2801      	cmp	r0, #1
 800e718:	d1f9      	bne.n	800e70e <Dmx::StopData(unsigned int, unsigned int)+0x3a>
 800e71a:	882b      	ldrh	r3, [r5, #0]
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	ea23 0306 	bic.w	r3, r3, r6
 800e722:	802b      	strh	r3, [r5, #0]
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	2300      	movs	r3, #0
 800e72a:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 800e72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e732:	f240 3105 	movw	r1, #773	; 0x305
 800e736:	4640      	mov	r0, r8
 800e738:	f006 fa06 	bl	8014b48 <usart_interrupt_disable>
 800e73c:	f44f 7204 	mov.w	r2, #528	; 0x210
 800e740:	4b09      	ldr	r3, [pc, #36]	; (800e768 <Dmx::StopData(unsigned int, unsigned int)+0x94>)
 800e742:	fb02 3304 	mla	r3, r2, r4, r3
 800e746:	2200      	movs	r2, #0
 800e748:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e74c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e750:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800e754:	f023 0302 	bic.w	r3, r3, #2
 800e758:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800e75c:	e7e4      	b.n	800e728 <Dmx::StopData(unsigned int, unsigned int)+0x54>
 800e75e:	bf00      	nop
 800e760:	200011b0 			; <UNDEFINED> instruction: 0x200011b0
 800e764:	200011c4 	andcs	r1, r0, r4, asr #3
 800e768:	20000d9c 	mulcs	r0, ip, sp

0800e76c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 800e76c:	b570      	push	{r4, r5, r6, lr}
 800e76e:	461d      	mov	r5, r3
 800e770:	6943      	ldr	r3, [r0, #20]
 800e772:	4606      	mov	r6, r0
 800e774:	4293      	cmp	r3, r2
 800e776:	4614      	mov	r4, r2
 800e778:	d014      	beq.n	800e7a4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 800e77a:	6142      	str	r2, [r0, #20]
 800e77c:	4910      	ldr	r1, [pc, #64]	; (800e7c0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800e77e:	2200      	movs	r2, #0
 800e780:	f7ff ffa8 	bl	800e6d4 <Dmx::StopData(unsigned int, unsigned int)>
 800e784:	b934      	cbnz	r4, 800e794 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 800e786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e78a:	4b0e      	ldr	r3, [pc, #56]	; (800e7c4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800e78c:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800e790:	b94d      	cbnz	r5, 800e7a6 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 800e792:	bd70      	pop	{r4, r5, r6, pc}
 800e794:	2c01      	cmp	r4, #1
 800e796:	d1fb      	bne.n	800e790 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800e798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e79c:	4b09      	ldr	r3, [pc, #36]	; (800e7c4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800e79e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e7a2:	e7f5      	b.n	800e790 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800e7a4:	b135      	cbz	r5, 800e7b4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 800e7a6:	4630      	mov	r0, r6
 800e7a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4904      	ldr	r1, [pc, #16]	; (800e7c0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800e7b0:	f7ff bee6 	b.w	800e580 <Dmx::StartData(unsigned int, unsigned int)>
 800e7b4:	462a      	mov	r2, r5
 800e7b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e7ba:	4901      	ldr	r1, [pc, #4]	; (800e7c0 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800e7bc:	f7ff bf8a 	b.w	800e6d4 <Dmx::StopData(unsigned int, unsigned int)>
 800e7c0:	40004800 	andmi	r4, r0, r0, lsl #16
 800e7c4:	40010000 	andmi	r0, r1, r0

0800e7c8 <Dmx::Dmx()>:
 800e7c8:	225c      	movs	r2, #92	; 0x5c
 800e7ca:	230c      	movs	r3, #12
 800e7cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7d0:	e9c0 2300 	strd	r2, r3, [r0]
 800e7d4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800e7d8:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800e7dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7e0:	2400      	movs	r4, #0
 800e7e2:	4605      	mov	r5, r0
 800e7e4:	8203      	strh	r3, [r0, #16]
 800e7e6:	4b5d      	ldr	r3, [pc, #372]	; (800e95c <Dmx::Dmx()+0x194>)
 800e7e8:	b08b      	sub	sp, #44	; 0x2c
 800e7ea:	6018      	str	r0, [r3, #0]
 800e7ec:	4b5c      	ldr	r3, [pc, #368]	; (800e960 <Dmx::Dmx()+0x198>)
 800e7ee:	2203      	movs	r2, #3
 800e7f0:	801c      	strh	r4, [r3, #0]
 800e7f2:	2110      	movs	r1, #16
 800e7f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7f8:	485a      	ldr	r0, [pc, #360]	; (800e964 <Dmx::Dmx()+0x19c>)
 800e7fa:	f005 fe0d 	bl	8014418 <gpio_init>
 800e7fe:	4621      	mov	r1, r4
 800e800:	4628      	mov	r0, r5
 800e802:	f7ff fea5 	bl	800e550 <Dmx::ClearData(unsigned int)>
 800e806:	4b58      	ldr	r3, [pc, #352]	; (800e968 <Dmx::Dmx()+0x1a0>)
 800e808:	2201      	movs	r2, #1
 800e80a:	4628      	mov	r0, r5
 800e80c:	601c      	str	r4, [r3, #0]
 800e80e:	4623      	mov	r3, r4
 800e810:	f7ff ffac 	bl	800e76c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800e814:	4b55      	ldr	r3, [pc, #340]	; (800e96c <Dmx::Dmx()+0x1a4>)
 800e816:	4e56      	ldr	r6, [pc, #344]	; (800e970 <Dmx::Dmx()+0x1a8>)
 800e818:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 800e81c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800e820:	f005 fe92 	bl	8014548 <rcu_periph_clock_enable>
 800e824:	f240 5001 	movw	r0, #1281	; 0x501
 800e828:	f005 fe8e 	bl	8014548 <rcu_periph_clock_enable>
 800e82c:	4630      	mov	r0, r6
 800e82e:	2101      	movs	r1, #1
 800e830:	f005 f938 	bl	8013aa4 <dma_deinit>
 800e834:	4b4f      	ldr	r3, [pc, #316]	; (800e974 <Dmx::Dmx()+0x1ac>)
 800e836:	2701      	movs	r7, #1
 800e838:	e9cd 3403 	strd	r3, r4, [sp, #12]
 800e83c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e840:	9308      	str	r3, [sp, #32]
 800e842:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e846:	aa03      	add	r2, sp, #12
 800e848:	4639      	mov	r1, r7
 800e84a:	4630      	mov	r0, r6
 800e84c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e850:	9406      	str	r4, [sp, #24]
 800e852:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800e856:	f005 f941 	bl	8013adc <dma_init>
 800e85a:	4639      	mov	r1, r7
 800e85c:	4630      	mov	r0, r6
 800e85e:	f005 f977 	bl	8013b50 <dma_circulation_disable>
 800e862:	4639      	mov	r1, r7
 800e864:	4630      	mov	r0, r6
 800e866:	f005 f983 	bl	8013b70 <dma_memory_to_memory_disable>
 800e86a:	f5a6 36fe 	sub.w	r6, r6, #130048	; 0x1fc00
 800e86e:	f240 7001 	movw	r0, #1793	; 0x701
 800e872:	f005 fe69 	bl	8014548 <rcu_periph_clock_enable>
 800e876:	4630      	mov	r0, r6
 800e878:	f005 ffb4 	bl	80147e4 <timer_deinit>
 800e87c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800e880:	236b      	movs	r3, #107	; 0x6b
 800e882:	4630      	mov	r0, r6
 800e884:	a903      	add	r1, sp, #12
 800e886:	9303      	str	r3, [sp, #12]
 800e888:	f8ad 4010 	strh.w	r4, [sp, #16]
 800e88c:	f8cd 9014 	str.w	r9, [sp, #20]
 800e890:	f8ad 4018 	strh.w	r4, [sp, #24]
 800e894:	f88d 401a 	strb.w	r4, [sp, #26]
 800e898:	f006 f806 	bl	80148a8 <timer_init>
 800e89c:	4649      	mov	r1, r9
 800e89e:	4630      	mov	r0, r6
 800e8a0:	f006 f89a 	bl	80149d8 <timer_flag_clear>
 800e8a4:	4649      	mov	r1, r9
 800e8a6:	4630      	mov	r0, r6
 800e8a8:	f006 f893 	bl	80149d2 <timer_interrupt_flag_clear>
 800e8ac:	4621      	mov	r1, r4
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	2210      	movs	r2, #16
 800e8b2:	f006 f856 	bl	8014962 <timer_channel_output_mode_config>
 800e8b6:	4639      	mov	r1, r7
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	2210      	movs	r2, #16
 800e8bc:	f006 f851 	bl	8014962 <timer_channel_output_mode_config>
 800e8c0:	4630      	mov	r0, r6
 800e8c2:	2210      	movs	r2, #16
 800e8c4:	2102      	movs	r1, #2
 800e8c6:	f006 f84c 	bl	8014962 <timer_channel_output_mode_config>
 800e8ca:	2210      	movs	r2, #16
 800e8cc:	2103      	movs	r1, #3
 800e8ce:	4630      	mov	r0, r6
 800e8d0:	f006 f847 	bl	8014962 <timer_channel_output_mode_config>
 800e8d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e8d8:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800e978 <Dmx::Dmx()+0x1b0>
 800e8dc:	4630      	mov	r0, r6
 800e8de:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 800e8e2:	f8c8 3000 	str.w	r3, [r8]
 800e8e6:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800e8ea:	f006 f835 	bl	8014958 <timer_enable>
 800e8ee:	f240 7005 	movw	r0, #1797	; 0x705
 800e8f2:	f005 fe29 	bl	8014548 <rcu_periph_clock_enable>
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f005 ff74 	bl	80147e4 <timer_deinit>
 800e8fc:	f642 232f 	movw	r3, #10799	; 0x2a2f
 800e900:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e904:	f242 7310 	movw	r3, #10000	; 0x2710
 800e908:	4630      	mov	r0, r6
 800e90a:	a903      	add	r1, sp, #12
 800e90c:	9305      	str	r3, [sp, #20]
 800e90e:	f005 ffcb 	bl	80148a8 <timer_init>
 800e912:	4649      	mov	r1, r9
 800e914:	4630      	mov	r0, r6
 800e916:	f006 f85f 	bl	80149d8 <timer_flag_clear>
 800e91a:	4649      	mov	r1, r9
 800e91c:	4630      	mov	r0, r6
 800e91e:	f006 f858 	bl	80149d2 <timer_interrupt_flag_clear>
 800e922:	4639      	mov	r1, r7
 800e924:	4630      	mov	r0, r6
 800e926:	f006 f850 	bl	80149ca <timer_interrupt_enable>
 800e92a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e92e:	4630      	mov	r0, r6
 800e930:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 800e934:	f8c8 3004 	str.w	r3, [r8, #4]
 800e938:	f006 f80e 	bl	8014958 <timer_enable>
 800e93c:	2302      	movs	r3, #2
 800e93e:	2208      	movs	r2, #8
 800e940:	9300      	str	r3, [sp, #0]
 800e942:	490e      	ldr	r1, [pc, #56]	; (800e97c <Dmx::Dmx()+0x1b4>)
 800e944:	4623      	mov	r3, r4
 800e946:	480e      	ldr	r0, [pc, #56]	; (800e980 <Dmx::Dmx()+0x1b8>)
 800e948:	f006 fad6 	bl	8014ef8 <gd32_uart_begin>
 800e94c:	2380      	movs	r3, #128	; 0x80
 800e94e:	4628      	mov	r0, r5
 800e950:	f8c8 3004 	str.w	r3, [r8, #4]
 800e954:	b00b      	add	sp, #44	; 0x2c
 800e956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e95a:	bf00      	nop
 800e95c:	200011c8 	andcs	r1, r0, r8, asr #3
 800e960:	200011c4 	andcs	r1, r0, r4, asr #3
 800e964:	40010c00 	andmi	r0, r1, r0, lsl #24
 800e968:	200011b0 			; <UNDEFINED> instruction: 0x200011b0
 800e96c:	20000d9c 	mulcs	r0, ip, sp
 800e970:	40020000 	andmi	r0, r2, r0
 800e974:	40004804 	andmi	r4, r0, r4, lsl #16
 800e978:	e000e100 	and	lr, r0, r0, lsl #2
 800e97c:	0003d090 	muleq	r3, r0, r0
 800e980:	40004800 	andmi	r4, r0, r0, lsl #16

0800e984 <Dmx::SetDmxPeriodTime(unsigned int)>:
 800e984:	4b13      	ldr	r3, [pc, #76]	; (800e9d4 <Dmx::SetDmxPeriodTime(unsigned int)+0x50>)
 800e986:	b570      	push	{r4, r5, r6, lr}
 800e988:	60c1      	str	r1, [r0, #12]
 800e98a:	f8b3 0202 	ldrh.w	r0, [r3, #514]	; 0x202
 800e98e:	232c      	movs	r3, #44	; 0x2c
 800e990:	f64f 76d3 	movw	r6, #65491	; 0xffd3
 800e994:	4d10      	ldr	r5, [pc, #64]	; (800e9d8 <Dmx::SetDmxPeriodTime(unsigned int)+0x54>)
 800e996:	4c11      	ldr	r4, [pc, #68]	; (800e9dc <Dmx::SetDmxPeriodTime(unsigned int)+0x58>)
 800e998:	4358      	muls	r0, r3
 800e99a:	682a      	ldr	r2, [r5, #0]
 800e99c:	6823      	ldr	r3, [r4, #0]
 800e99e:	4413      	add	r3, r2
 800e9a0:	4403      	add	r3, r0
 800e9a2:	42b3      	cmp	r3, r6
 800e9a4:	d908      	bls.n	800e9b8 <Dmx::SetDmxPeriodTime(unsigned int)+0x34>
 800e9a6:	2ab0      	cmp	r2, #176	; 0xb0
 800e9a8:	4613      	mov	r3, r2
 800e9aa:	bf28      	it	cs
 800e9ac:	23b0      	movcs	r3, #176	; 0xb0
 800e9ae:	220c      	movs	r2, #12
 800e9b0:	602b      	str	r3, [r5, #0]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	6022      	str	r2, [r4, #0]
 800e9b6:	4403      	add	r3, r0
 800e9b8:	b109      	cbz	r1, 800e9be <Dmx::SetDmxPeriodTime(unsigned int)+0x3a>
 800e9ba:	428b      	cmp	r3, r1
 800e9bc:	d906      	bls.n	800e9cc <Dmx::SetDmxPeriodTime(unsigned int)+0x48>
 800e9be:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800e9c2:	f240 43b4 	movw	r3, #1204	; 0x4b4
 800e9c6:	4299      	cmp	r1, r3
 800e9c8:	bf38      	it	cc
 800e9ca:	4619      	movcc	r1, r3
 800e9cc:	4b04      	ldr	r3, [pc, #16]	; (800e9e0 <Dmx::SetDmxPeriodTime(unsigned int)+0x5c>)
 800e9ce:	6019      	str	r1, [r3, #0]
 800e9d0:	bd70      	pop	{r4, r5, r6, pc}
 800e9d2:	bf00      	nop
 800e9d4:	20000fac 	andcs	r0, r0, ip, lsr #31
 800e9d8:	20000008 	andcs	r0, r0, r8
 800e9dc:	20000004 	andcs	r0, r0, r4
 800e9e0:	20000000 	andcs	r0, r0, r0

0800e9e4 <Dmx::SetDmxBreakTime(unsigned int)>:
 800e9e4:	295c      	cmp	r1, #92	; 0x5c
 800e9e6:	bf38      	it	cc
 800e9e8:	215c      	movcc	r1, #92	; 0x5c
 800e9ea:	4b02      	ldr	r3, [pc, #8]	; (800e9f4 <Dmx::SetDmxBreakTime(unsigned int)+0x10>)
 800e9ec:	6019      	str	r1, [r3, #0]
 800e9ee:	68c1      	ldr	r1, [r0, #12]
 800e9f0:	f7ff bfc8 	b.w	800e984 <Dmx::SetDmxPeriodTime(unsigned int)>
 800e9f4:	20000008 	andcs	r0, r0, r8

0800e9f8 <Dmx::SetDmxMabTime(unsigned int)>:
 800e9f8:	290c      	cmp	r1, #12
 800e9fa:	bf38      	it	cc
 800e9fc:	210c      	movcc	r1, #12
 800e9fe:	4b02      	ldr	r3, [pc, #8]	; (800ea08 <Dmx::SetDmxMabTime(unsigned int)+0x10>)
 800ea00:	6019      	str	r1, [r3, #0]
 800ea02:	68c1      	ldr	r1, [r0, #12]
 800ea04:	f7ff bfbe 	b.w	800e984 <Dmx::SetDmxPeriodTime(unsigned int)>
 800ea08:	20000004 	andcs	r0, r0, r4

0800ea0c <Dmx::SetDmxSlots(unsigned short)>:
 800ea0c:	1e8b      	subs	r3, r1, #2
 800ea0e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800ea12:	d809      	bhi.n	800ea28 <Dmx::SetDmxSlots(unsigned short)+0x1c>
 800ea14:	6983      	ldr	r3, [r0, #24]
 800ea16:	8201      	strh	r1, [r0, #16]
 800ea18:	b11b      	cbz	r3, 800ea22 <Dmx::SetDmxSlots(unsigned short)+0x16>
 800ea1a:	4299      	cmp	r1, r3
 800ea1c:	bf94      	ite	ls
 800ea1e:	6181      	strls	r1, [r0, #24]
 800ea20:	6183      	strhi	r3, [r0, #24]
 800ea22:	68c1      	ldr	r1, [r0, #12]
 800ea24:	f7ff bfae 	b.w	800e984 <Dmx::SetDmxPeriodTime(unsigned int)>
 800ea28:	4770      	bx	lr
	...

0800ea2c <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>:
 800ea2c:	b470      	push	{r4, r5, r6}
 800ea2e:	8a04      	ldrh	r4, [r0, #16]
 800ea30:	f44f 7501 	mov.w	r5, #516	; 0x204
 800ea34:	42a3      	cmp	r3, r4
 800ea36:	bf28      	it	cs
 800ea38:	4623      	movcs	r3, r4
 800ea3a:	4c0e      	ldr	r4, [pc, #56]	; (800ea74 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x48>)
 800ea3c:	f892 f000 	pld	[r2]
 800ea40:	fb05 4401 	mla	r4, r5, r1, r4
 800ea44:	1c5d      	adds	r5, r3, #1
 800ea46:	f8a4 5202 	strh.w	r5, [r4, #514]	; 0x202
 800ea4a:	18d5      	adds	r5, r2, r3
 800ea4c:	4295      	cmp	r5, r2
 800ea4e:	d109      	bne.n	800ea64 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x38>
 800ea50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea54:	698a      	ldr	r2, [r1, #24]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d009      	beq.n	800ea6e <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x42>
 800ea5a:	bc70      	pop	{r4, r5, r6}
 800ea5c:	618b      	str	r3, [r1, #24]
 800ea5e:	68c1      	ldr	r1, [r0, #12]
 800ea60:	f7ff bf90 	b.w	800e984 <Dmx::SetDmxPeriodTime(unsigned int)>
 800ea64:	f812 6b01 	ldrb.w	r6, [r2], #1
 800ea68:	f804 6f01 	strb.w	r6, [r4, #1]!
 800ea6c:	e7ee      	b.n	800ea4c <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x20>
 800ea6e:	bc70      	pop	{r4, r5, r6}
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop
 800ea74:	20000fac 	andcs	r0, r0, ip, lsr #31

0800ea78 <Dmx::Blackout()>:
 800ea78:	4a10      	ldr	r2, [pc, #64]	; (800eabc <Dmx::Blackout()+0x44>)
 800ea7a:	b510      	push	{r4, lr}
 800ea7c:	8813      	ldrh	r3, [r2, #0]
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	b903      	cbnz	r3, 800ea84 <Dmx::Blackout()+0xc>
 800ea82:	bd10      	pop	{r4, pc}
 800ea84:	f3bf 8f5f 	dmb	sy
 800ea88:	8813      	ldrh	r3, [r2, #0]
 800ea8a:	05db      	lsls	r3, r3, #23
 800ea8c:	d5f9      	bpl.n	800ea82 <Dmx::Blackout()+0xa>
 800ea8e:	4c0c      	ldr	r4, [pc, #48]	; (800eac0 <Dmx::Blackout()+0x48>)
 800ea90:	2107      	movs	r1, #7
 800ea92:	4620      	mov	r0, r4
 800ea94:	f006 f842 	bl	8014b1c <usart_flag_get>
 800ea98:	2801      	cmp	r0, #1
 800ea9a:	d1f9      	bne.n	800ea90 <Dmx::Blackout()+0x18>
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	4a09      	ldr	r2, [pc, #36]	; (800eac4 <Dmx::Blackout()+0x4c>)
 800eaa0:	461c      	mov	r4, r3
 800eaa2:	4611      	mov	r1, r2
 800eaa4:	f240 1001 	movw	r0, #257	; 0x101
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	4283      	cmp	r3, r0
 800eaac:	f822 4b02 	strh.w	r4, [r2], #2
 800eab0:	d1fa      	bne.n	800eaa8 <Dmx::Blackout()+0x30>
 800eab2:	f04f 0300 	mov.w	r3, #0
 800eab6:	700b      	strb	r3, [r1, #0]
 800eab8:	e7e3      	b.n	800ea82 <Dmx::Blackout()+0xa>
 800eaba:	bf00      	nop
 800eabc:	200011c4 	andcs	r1, r0, r4, asr #3
 800eac0:	40004800 	andmi	r4, r0, r0, lsl #16
 800eac4:	20000fac 	andcs	r0, r0, ip, lsr #31

0800eac8 <Dmx::FullOn()>:
 800eac8:	4a10      	ldr	r2, [pc, #64]	; (800eb0c <Dmx::FullOn()+0x44>)
 800eaca:	b510      	push	{r4, lr}
 800eacc:	8813      	ldrh	r3, [r2, #0]
 800eace:	b29b      	uxth	r3, r3
 800ead0:	b903      	cbnz	r3, 800ead4 <Dmx::FullOn()+0xc>
 800ead2:	bd10      	pop	{r4, pc}
 800ead4:	f3bf 8f5f 	dmb	sy
 800ead8:	8813      	ldrh	r3, [r2, #0]
 800eada:	05db      	lsls	r3, r3, #23
 800eadc:	d5f9      	bpl.n	800ead2 <Dmx::FullOn()+0xa>
 800eade:	4c0c      	ldr	r4, [pc, #48]	; (800eb10 <Dmx::FullOn()+0x48>)
 800eae0:	2107      	movs	r1, #7
 800eae2:	4620      	mov	r0, r4
 800eae4:	f006 f81a 	bl	8014b1c <usart_flag_get>
 800eae8:	2801      	cmp	r0, #1
 800eaea:	d1f9      	bne.n	800eae0 <Dmx::FullOn()+0x18>
 800eaec:	4a09      	ldr	r2, [pc, #36]	; (800eb14 <Dmx::FullOn()+0x4c>)
 800eaee:	2300      	movs	r3, #0
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800eaf6:	f240 1001 	movw	r0, #257	; 0x101
 800eafa:	3301      	adds	r3, #1
 800eafc:	4283      	cmp	r3, r0
 800eafe:	f822 4b02 	strh.w	r4, [r2], #2
 800eb02:	d1fa      	bne.n	800eafa <Dmx::FullOn()+0x32>
 800eb04:	2300      	movs	r3, #0
 800eb06:	700b      	strb	r3, [r1, #0]
 800eb08:	e7e3      	b.n	800ead2 <Dmx::FullOn()+0xa>
 800eb0a:	bf00      	nop
 800eb0c:	200011c4 	andcs	r1, r0, r4, asr #3
 800eb10:	40004800 	andmi	r4, r0, r0, lsl #16
 800eb14:	20000fac 	andcs	r0, r0, ip, lsr #31

0800eb18 <Dmx::GetDmxAvailable(unsigned int)>:
 800eb18:	f44f 7204 	mov.w	r2, #528	; 0x210
 800eb1c:	4b07      	ldr	r3, [pc, #28]	; (800eb3c <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 800eb1e:	fb02 3101 	mla	r1, r2, r1, r3
 800eb22:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 800eb26:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800eb2a:	bf1f      	itttt	ne
 800eb2c:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800eb30:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800eb34:	4608      	movne	r0, r1
 800eb36:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800eb3a:	4770      	bx	lr
 800eb3c:	20000d9c 	mulcs	r0, ip, sp

0800eb40 <Dmx::GetUpdatesPerSecond(unsigned int)>:
 800eb40:	f3bf 8f5f 	dmb	sy
 800eb44:	4b01      	ldr	r3, [pc, #4]	; (800eb4c <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 800eb46:	0109      	lsls	r1, r1, #4
 800eb48:	5858      	ldr	r0, [r3, r1]
 800eb4a:	4770      	bx	lr
 800eb4c:	200011b4 			; <UNDEFINED> instruction: 0x200011b4

0800eb50 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb52:	4614      	mov	r4, r2
 800eb54:	461d      	mov	r5, r3
 800eb56:	4e1f      	ldr	r6, [pc, #124]	; (800ebd4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800eb58:	2106      	movs	r1, #6
 800eb5a:	4630      	mov	r0, r6
 800eb5c:	f005 ffde 	bl	8014b1c <usart_flag_get>
 800eb60:	2800      	cmp	r0, #0
 800eb62:	d0f9      	beq.n	800eb58 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 800eb64:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800eb68:	4e1b      	ldr	r6, [pc, #108]	; (800ebd8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 800eb6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb6e:	2203      	movs	r2, #3
 800eb70:	4630      	mov	r0, r6
 800eb72:	2110      	movs	r1, #16
 800eb74:	f005 fc50 	bl	8014418 <gpio_init>
 800eb78:	6177      	str	r7, [r6, #20]
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	20b0      	movs	r0, #176	; 0xb0
 800eb7e:	f006 faa9 	bl	80150d4 <udelay(unsigned int, unsigned int)>
 800eb82:	463b      	mov	r3, r7
 800eb84:	4630      	mov	r0, r6
 800eb86:	2203      	movs	r2, #3
 800eb88:	2118      	movs	r1, #24
 800eb8a:	f005 fc45 	bl	8014418 <gpio_init>
 800eb8e:	2100      	movs	r1, #0
 800eb90:	200c      	movs	r0, #12
 800eb92:	f006 fa9f 	bl	80150d4 <udelay(unsigned int, unsigned int)>
 800eb96:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
 800eb9a:	4425      	add	r5, r4
 800eb9c:	f5a6 4648 	sub.w	r6, r6, #51200	; 0xc800
 800eba0:	42ac      	cmp	r4, r5
 800eba2:	d109      	bne.n	800ebb8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 800eba4:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 800eba8:	4c0a      	ldr	r4, [pc, #40]	; (800ebd4 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800ebaa:	2106      	movs	r1, #6
 800ebac:	4620      	mov	r0, r4
 800ebae:	f005 ffb5 	bl	8014b1c <usart_flag_get>
 800ebb2:	2801      	cmp	r0, #1
 800ebb4:	d10b      	bne.n	800ebce <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x7e>
 800ebb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebb8:	2107      	movs	r1, #7
 800ebba:	4630      	mov	r0, r6
 800ebbc:	f005 ffae 	bl	8014b1c <usart_flag_get>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d0f9      	beq.n	800ebb8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 800ebc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ebc8:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800ebcc:	e7e8      	b.n	800eba0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x50>
 800ebce:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800ebd2:	e7ea      	b.n	800ebaa <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x5a>
 800ebd4:	40004800 	andmi	r4, r0, r0, lsl #16
 800ebd8:	40011000 	andmi	r1, r1, r0

0800ebdc <Dmx::RdmReceive(unsigned int)>:
 800ebdc:	f44f 7204 	mov.w	r2, #528	; 0x210
 800ebe0:	4b06      	ldr	r3, [pc, #24]	; (800ebfc <Dmx::RdmReceive(unsigned int)+0x20>)
 800ebe2:	fb02 3101 	mla	r1, r2, r1, r3
 800ebe6:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 800ebea:	f413 4080 	ands.w	r0, r3, #16384	; 0x4000
 800ebee:	bf1e      	ittt	ne
 800ebf0:	2300      	movne	r3, #0
 800ebf2:	4608      	movne	r0, r1
 800ebf4:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800ebf8:	4770      	bx	lr
 800ebfa:	bf00      	nop
 800ebfc:	20000d9c 	mulcs	r0, ip, sp

0800ec00 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>:
 800ec00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec02:	2300      	movs	r3, #0
 800ec04:	4605      	mov	r5, r0
 800ec06:	460e      	mov	r6, r1
 800ec08:	4614      	mov	r4, r2
 800ec0a:	4f05      	ldr	r7, [pc, #20]	; (800ec20 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x20>)
 800ec0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ec0e:	4631      	mov	r1, r6
 800ec10:	4628      	mov	r0, r5
 800ec12:	f7ff ffe3 	bl	800ebdc <Dmx::RdmReceive(unsigned int)>
 800ec16:	b910      	cbnz	r0, 800ec1e <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x1e>
 800ec18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1a:	42a3      	cmp	r3, r4
 800ec1c:	d3f7      	bcc.n	800ec0e <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0xe>
 800ec1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec20:	40001000 	andmi	r1, r0, r0

0800ec24 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>:
 800ec24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec26:	4604      	mov	r4, r0
 800ec28:	b192      	cbz	r2, 800ec50 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x2c>
 800ec2a:	256c      	movs	r5, #108	; 0x6c
 800ec2c:	4e19      	ldr	r6, [pc, #100]	; (800ec94 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800ec2e:	4b1a      	ldr	r3, [pc, #104]	; (800ec98 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x74>)
 800ec30:	6870      	ldr	r0, [r6, #4]
 800ec32:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ec36:	fbb0 f0f5 	udiv	r0, r0, r5
 800ec3a:	1ac7      	subs	r7, r0, r3
 800ec3c:	42ba      	cmp	r2, r7
 800ec3e:	d907      	bls.n	800ec50 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x2c>
 800ec40:	1a1b      	subs	r3, r3, r0
 800ec42:	441a      	add	r2, r3
 800ec44:	6873      	ldr	r3, [r6, #4]
 800ec46:	fbb3 f3f5 	udiv	r3, r3, r5
 800ec4a:	1a1b      	subs	r3, r3, r0
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d3f9      	bcc.n	800ec44 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x20>
 800ec50:	4d12      	ldr	r5, [pc, #72]	; (800ec9c <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x78>)
 800ec52:	460a      	mov	r2, r1
 800ec54:	5d2b      	ldrb	r3, [r5, r4]
 800ec56:	7888      	ldrb	r0, [r1, #2]
 800ec58:	73cb      	strb	r3, [r1, #15]
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	1846      	adds	r6, r0, r1
 800ec5e:	42b2      	cmp	r2, r6
 800ec60:	d113      	bne.n	800ec8a <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x66>
 800ec62:	0a1e      	lsrs	r6, r3, #8
 800ec64:	540e      	strb	r6, [r1, r0]
 800ec66:	7053      	strb	r3, [r2, #1]
 800ec68:	788a      	ldrb	r2, [r1, #2]
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	3202      	adds	r2, #2
 800ec6e:	f7ff faaf 	bl	800e1d0 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800ec72:	226c      	movs	r2, #108	; 0x6c
 800ec74:	4b07      	ldr	r3, [pc, #28]	; (800ec94 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec7c:	4a06      	ldr	r2, [pc, #24]	; (800ec98 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x74>)
 800ec7e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ec82:	5d2b      	ldrb	r3, [r5, r4]
 800ec84:	3301      	adds	r3, #1
 800ec86:	552b      	strb	r3, [r5, r4]
 800ec88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec8a:	f812 7b01 	ldrb.w	r7, [r2], #1
 800ec8e:	443b      	add	r3, r7
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	e7e4      	b.n	800ec5e <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x3a>
 800ec94:	e0001000 	and	r1, r0, r0
 800ec98:	200011d0 	ldrdcs	r1, [r0], -r0
 800ec9c:	200011d4 	ldrdcs	r1, [r0], -r4

0800eca0 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 800eca0:	b570      	push	{r4, r5, r6, lr}
 800eca2:	4604      	mov	r4, r0
 800eca4:	460d      	mov	r5, r1
 800eca6:	4616      	mov	r6, r2
 800eca8:	4b05      	ldr	r3, [pc, #20]	; (800ecc0 <Rdm::SendRawRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x20>)
 800ecaa:	20c8      	movs	r0, #200	; 0xc8
 800ecac:	6819      	ldr	r1, [r3, #0]
 800ecae:	f006 fa11 	bl	80150d4 <udelay(unsigned int, unsigned int)>
 800ecb2:	4632      	mov	r2, r6
 800ecb4:	4629      	mov	r1, r5
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecbc:	f7ff ba88 	b.w	800e1d0 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800ecc0:	200011cc 	andcs	r1, r0, ip, asr #3

0800ecc4 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)>:
 800ecc4:	4b1d      	ldr	r3, [pc, #116]	; (800ed3c <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x78>)
 800ecc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecca:	4606      	mov	r6, r0
 800eccc:	460c      	mov	r4, r1
 800ecce:	20c8      	movs	r0, #200	; 0xc8
 800ecd0:	6819      	ldr	r1, [r3, #0]
 800ecd2:	4615      	mov	r5, r2
 800ecd4:	f006 f9fe 	bl	80150d4 <udelay(unsigned int, unsigned int)>
 800ecd8:	2300      	movs	r3, #0
 800ecda:	4f19      	ldr	r7, [pc, #100]	; (800ed40 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x7c>)
 800ecdc:	4631      	mov	r1, r6
 800ecde:	461a      	mov	r2, r3
 800ece0:	6838      	ldr	r0, [r7, #0]
 800ece2:	f7ff fd43 	bl	800e76c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800ece6:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
 800ecea:	4e16      	ldr	r6, [pc, #88]	; (800ed44 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 800ecec:	4425      	add	r5, r4
 800ecee:	42ac      	cmp	r4, r5
 800ecf0:	d115      	bne.n	800ed1e <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 800ecf2:	f04f 2640 	mov.w	r6, #1073758208	; 0x40004000
 800ecf6:	4d13      	ldr	r5, [pc, #76]	; (800ed44 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x80>)
 800ecf8:	2106      	movs	r1, #6
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	f005 ff0e 	bl	8014b1c <usart_flag_get>
 800ed00:	2801      	cmp	r0, #1
 800ed02:	4604      	mov	r4, r0
 800ed04:	d116      	bne.n	800ed34 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x70>
 800ed06:	2100      	movs	r1, #0
 800ed08:	2004      	movs	r0, #4
 800ed0a:	f006 f9e3 	bl	80150d4 <udelay(unsigned int, unsigned int)>
 800ed0e:	4623      	mov	r3, r4
 800ed10:	4622      	mov	r2, r4
 800ed12:	6838      	ldr	r0, [r7, #0]
 800ed14:	2100      	movs	r1, #0
 800ed16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed1a:	f7ff bd27 	b.w	800e76c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800ed1e:	2107      	movs	r1, #7
 800ed20:	4630      	mov	r0, r6
 800ed22:	f005 fefb 	bl	8014b1c <usart_flag_get>
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d0f9      	beq.n	800ed1e <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x5a>
 800ed2a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ed2e:	f8c8 3804 	str.w	r3, [r8, #2052]	; 0x804
 800ed32:	e7dc      	b.n	800ecee <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x2a>
 800ed34:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 800ed38:	e7de      	b.n	800ecf8 <Rdm::SendDiscoveryRespondMessage(unsigned int, unsigned char const*, unsigned int)+0x34>
 800ed3a:	bf00      	nop
 800ed3c:	200011cc 	andcs	r1, r0, ip, asr #3
 800ed40:	200011c8 	andcs	r1, r0, r8, asr #3
 800ed44:	40004800 	andmi	r4, r0, r0, lsl #16

0800ed48 <net_set_ip>:
 800ed48:	b510      	push	{r4, lr}
 800ed4a:	4c05      	ldr	r4, [pc, #20]	; (800ed60 <net_set_ip+0x18>)
 800ed4c:	6020      	str	r0, [r4, #0]
 800ed4e:	4621      	mov	r1, r4
 800ed50:	4804      	ldr	r0, [pc, #16]	; (800ed64 <net_set_ip+0x1c>)
 800ed52:	f7f8 fab7 	bl	80072c4 <arp_init>
 800ed56:	4620      	mov	r0, r4
 800ed58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed5c:	f001 bfdc 	b.w	8010d18 <ip_set_ip>
 800ed60:	200011dc 	ldrdcs	r1, [r0], -ip
 800ed64:	200011e8 	andcs	r1, r0, r8, ror #3

0800ed68 <net_set_gw>:
 800ed68:	4b02      	ldr	r3, [pc, #8]	; (800ed74 <net_set_gw+0xc>)
 800ed6a:	6098      	str	r0, [r3, #8]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f001 bfd3 	b.w	8010d18 <ip_set_ip>
 800ed72:	bf00      	nop
 800ed74:	200011dc 	ldrdcs	r1, [r0], -ip

0800ed78 <net_set_dhcp>:
 800ed78:	b570      	push	{r4, r5, r6, lr}
 800ed7a:	2400      	movs	r4, #0
 800ed7c:	4605      	mov	r5, r0
 800ed7e:	7014      	strb	r4, [r2, #0]
 800ed80:	4616      	mov	r6, r2
 800ed82:	4810      	ldr	r0, [pc, #64]	; (800edc4 <net_set_dhcp+0x4c>)
 800ed84:	460a      	mov	r2, r1
 800ed86:	4910      	ldr	r1, [pc, #64]	; (800edc8 <net_set_dhcp+0x50>)
 800ed88:	f001 fda6 	bl	80108d8 <dhcp_client>
 800ed8c:	42a0      	cmp	r0, r4
 800ed8e:	da17      	bge.n	800edc0 <net_set_dhcp+0x48>
 800ed90:	480d      	ldr	r0, [pc, #52]	; (800edc8 <net_set_dhcp+0x50>)
 800ed92:	f000 f837 	bl	800ee04 <rfc3927>
 800ed96:	7030      	strb	r0, [r6, #0]
 800ed98:	490b      	ldr	r1, [pc, #44]	; (800edc8 <net_set_dhcp+0x50>)
 800ed9a:	480a      	ldr	r0, [pc, #40]	; (800edc4 <net_set_dhcp+0x4c>)
 800ed9c:	f7f8 fa92 	bl	80072c4 <arp_init>
 800eda0:	4809      	ldr	r0, [pc, #36]	; (800edc8 <net_set_dhcp+0x50>)
 800eda2:	f001 ffb9 	bl	8010d18 <ip_set_ip>
 800eda6:	4a08      	ldr	r2, [pc, #32]	; (800edc8 <net_set_dhcp+0x50>)
 800eda8:	1e6b      	subs	r3, r5, #1
 800edaa:	350b      	adds	r5, #11
 800edac:	f812 1b01 	ldrb.w	r1, [r2], #1
 800edb0:	f803 1f01 	strb.w	r1, [r3, #1]!
 800edb4:	42ab      	cmp	r3, r5
 800edb6:	d1f9      	bne.n	800edac <net_set_dhcp+0x34>
 800edb8:	4b04      	ldr	r3, [pc, #16]	; (800edcc <net_set_dhcp+0x54>)
 800edba:	4620      	mov	r0, r4
 800edbc:	701c      	strb	r4, [r3, #0]
 800edbe:	bd70      	pop	{r4, r5, r6, pc}
 800edc0:	2401      	movs	r4, #1
 800edc2:	e7e9      	b.n	800ed98 <net_set_dhcp+0x20>
 800edc4:	200011e8 	andcs	r1, r0, r8, ror #3
 800edc8:	200011dc 	ldrdcs	r1, [r0], -ip
 800edcc:	200011ee 	andcs	r1, r0, lr, ror #3

0800edd0 <net_dhcp_release>:
 800edd0:	b508      	push	{r3, lr}
 800edd2:	f001 fe89 	bl	8010ae8 <dhcp_client_release>
 800edd6:	2200      	movs	r2, #0
 800edd8:	4b01      	ldr	r3, [pc, #4]	; (800ede0 <net_dhcp_release+0x10>)
 800edda:	701a      	strb	r2, [r3, #0]
 800eddc:	bd08      	pop	{r3, pc}
 800edde:	bf00      	nop
 800ede0:	200011ee 	andcs	r1, r0, lr, ror #3

0800ede4 <net_timers_run>:
 800ede4:	4b05      	ldr	r3, [pc, #20]	; (800edfc <net_timers_run+0x18>)
 800ede6:	4a06      	ldr	r2, [pc, #24]	; (800ee00 <net_timers_run+0x1c>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	6811      	ldr	r1, [r2, #0]
 800edec:	4299      	cmp	r1, r3
 800edee:	d803      	bhi.n	800edf8 <net_timers_run+0x14>
 800edf0:	3364      	adds	r3, #100	; 0x64
 800edf2:	6013      	str	r3, [r2, #0]
 800edf4:	f001 bf06 	b.w	8010c04 <igmp_timer>
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	2000a1e4 	andcs	sl, r0, r4, ror #3
 800ee00:	200011f4 	strdcs	r1, [r0], -r4

0800ee04 <rfc3927>:
 800ee04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee08:	4606      	mov	r6, r0
 800ee0a:	25ff      	movs	r5, #255	; 0xff
 800ee0c:	4b18      	ldr	r3, [pc, #96]	; (800ee70 <rfc3927+0x6c>)
 800ee0e:	4f19      	ldr	r7, [pc, #100]	; (800ee74 <rfc3927+0x70>)
 800ee10:	791a      	ldrb	r2, [r3, #4]
 800ee12:	78dc      	ldrb	r4, [r3, #3]
 800ee14:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800ee78 <rfc3927+0x74>
 800ee18:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800ee1c:	f8d7 9000 	ldr.w	r9, [r7]
 800ee20:	f8df b058 	ldr.w	fp, [pc, #88]	; 800ee7c <rfc3927+0x78>
 800ee24:	f8df a058 	ldr.w	sl, [pc, #88]	; 800ee80 <rfc3927+0x7c>
 800ee28:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800ee2c:	4659      	mov	r1, fp
 800ee2e:	4620      	mov	r0, r4
 800ee30:	f001 fc46 	bl	80106c0 <arp_cache_lookup>
 800ee34:	b190      	cbz	r0, 800ee5c <rfc3927+0x58>
 800ee36:	ba24      	rev	r4, r4
 800ee38:	3401      	adds	r4, #1
 800ee3a:	3d01      	subs	r5, #1
 800ee3c:	ba24      	rev	r4, r4
 800ee3e:	b2ad      	uxth	r5, r5
 800ee40:	4554      	cmp	r4, sl
 800ee42:	bf08      	it	eq
 800ee44:	4644      	moveq	r4, r8
 800ee46:	b18d      	cbz	r5, 800ee6c <rfc3927+0x68>
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	eba3 0309 	sub.w	r3, r3, r9
 800ee4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ee52:	d3eb      	bcc.n	800ee2c <rfc3927+0x28>
 800ee54:	2400      	movs	r4, #0
 800ee56:	4623      	mov	r3, r4
 800ee58:	4620      	mov	r0, r4
 800ee5a:	e002      	b.n	800ee62 <rfc3927+0x5e>
 800ee5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee60:	2001      	movs	r0, #1
 800ee62:	e9c6 3401 	strd	r3, r4, [r6, #4]
 800ee66:	6034      	str	r4, [r6, #0]
 800ee68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee6c:	462c      	mov	r4, r5
 800ee6e:	e7f2      	b.n	800ee56 <rfc3927+0x52>
 800ee70:	200011f8 	strdcs	r1, [r0], -r8
 800ee74:	2000a1e4 	andcs	sl, r0, r4, ror #3
 800ee78:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 800ee7c:	20001200 	andcs	r1, r0, r0, lsl #4
 800ee80:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

0800ee84 <_init_tcb>:
 800ee84:	b510      	push	{r4, lr}
 800ee86:	4603      	mov	r3, r0
 800ee88:	2400      	movs	r4, #0
 800ee8a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d10d      	bne.n	800eeae <_init_tcb+0x2a>
 800ee92:	4b08      	ldr	r3, [pc, #32]	; (800eeb4 <_init_tcb+0x30>)
 800ee94:	f640 3268 	movw	r2, #2920	; 0xb68
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	8702      	strh	r2, [r0, #56]	; 0x38
 800ee9c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eea0:	6283      	str	r3, [r0, #40]	; 0x28
 800eea2:	6243      	str	r3, [r0, #36]	; 0x24
 800eea4:	2301      	movs	r3, #1
 800eea6:	8001      	strh	r1, [r0, #0]
 800eea8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800eeac:	bd10      	pop	{r4, pc}
 800eeae:	f803 4b01 	strb.w	r4, [r3], #1
 800eeb2:	e7ec      	b.n	800ee8e <_init_tcb+0xa>
 800eeb4:	2000a1e4 	andcs	sl, r0, r4, ror #3

0800eeb8 <memcpy.isra.0>:
 800eeb8:	3801      	subs	r0, #1
 800eeba:	440a      	add	r2, r1
 800eebc:	4291      	cmp	r1, r2
 800eebe:	d100      	bne.n	800eec2 <memcpy.isra.0+0xa>
 800eec0:	4770      	bx	lr
 800eec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eec6:	f800 3f01 	strb.w	r3, [r0, #1]!
 800eeca:	e7f7      	b.n	800eebc <memcpy.isra.0+0x4>

0800eecc <_bswap32>:
 800eecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eece:	2204      	movs	r2, #4
 800eed0:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 800eed4:	4629      	mov	r1, r5
 800eed6:	4604      	mov	r4, r0
 800eed8:	eb0d 0002 	add.w	r0, sp, r2
 800eedc:	f7ff ffec 	bl	800eeb8 <memcpy.isra.0>
 800eee0:	2204      	movs	r2, #4
 800eee2:	9b01      	ldr	r3, [sp, #4]
 800eee4:	eb0d 0102 	add.w	r1, sp, r2
 800eee8:	ba1b      	rev	r3, r3
 800eeea:	4628      	mov	r0, r5
 800eeec:	9301      	str	r3, [sp, #4]
 800eeee:	f7ff ffe3 	bl	800eeb8 <memcpy.isra.0>
 800eef2:	2204      	movs	r2, #4
 800eef4:	3426      	adds	r4, #38	; 0x26
 800eef6:	eb0d 0002 	add.w	r0, sp, r2
 800eefa:	4621      	mov	r1, r4
 800eefc:	f7ff ffdc 	bl	800eeb8 <memcpy.isra.0>
 800ef00:	2204      	movs	r2, #4
 800ef02:	9b01      	ldr	r3, [sp, #4]
 800ef04:	4620      	mov	r0, r4
 800ef06:	ba1b      	rev	r3, r3
 800ef08:	eb0d 0102 	add.w	r1, sp, r2
 800ef0c:	9301      	str	r3, [sp, #4]
 800ef0e:	f7ff ffd3 	bl	800eeb8 <memcpy.isra.0>
 800ef12:	b003      	add	sp, #12
 800ef14:	bd30      	pop	{r4, r5, pc}
	...

0800ef18 <_tcp_send_package>:
 800ef18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef1c:	7a0b      	ldrb	r3, [r1, #8]
 800ef1e:	4605      	mov	r5, r0
 800ef20:	f013 0f02 	tst.w	r3, #2
 800ef24:	bf0c      	ite	eq
 800ef26:	f04f 0805 	moveq.w	r8, #5
 800ef2a:	f04f 0806 	movne.w	r8, #6
 800ef2e:	f04f 0a00 	mov.w	sl, #0
 800ef32:	4c47      	ldr	r4, [pc, #284]	; (800f050 <_tcp_send_package+0x138>)
 800ef34:	460f      	mov	r7, r1
 800ef36:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 800ef38:	f100 0108 	add.w	r1, r0, #8
 800ef3c:	2206      	movs	r2, #6
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f7ff ffba 	bl	800eeb8 <memcpy.isra.0>
 800ef44:	4a43      	ldr	r2, [pc, #268]	; (800f054 <_tcp_send_package+0x13c>)
 800ef46:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800ef4a:	8813      	ldrh	r3, [r2, #0]
 800ef4c:	b2b6      	uxth	r6, r6
 800ef4e:	1c59      	adds	r1, r3, #1
 800ef50:	8263      	strh	r3, [r4, #18]
 800ef52:	f105 0904 	add.w	r9, r5, #4
 800ef56:	f106 0314 	add.w	r3, r6, #20
 800ef5a:	ba5b      	rev16	r3, r3
 800ef5c:	8011      	strh	r1, [r2, #0]
 800ef5e:	f104 001e 	add.w	r0, r4, #30
 800ef62:	2204      	movs	r2, #4
 800ef64:	4649      	mov	r1, r9
 800ef66:	8223      	strh	r3, [r4, #16]
 800ef68:	f7ff ffa6 	bl	800eeb8 <memcpy.isra.0>
 800ef6c:	2114      	movs	r1, #20
 800ef6e:	f104 000e 	add.w	r0, r4, #14
 800ef72:	f8a4 a018 	strh.w	sl, [r4, #24]
 800ef76:	f001 fed8 	bl	8010d2a <net_chksum>
 800ef7a:	882b      	ldrh	r3, [r5, #0]
 800ef7c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800ef80:	8463      	strh	r3, [r4, #34]	; 0x22
 800ef82:	886b      	ldrh	r3, [r5, #2]
 800ef84:	8320      	strh	r0, [r4, #24]
 800ef86:	84a3      	strh	r3, [r4, #36]	; 0x24
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 800ef8c:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 800ef96:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 800ef9a:	7a3b      	ldrb	r3, [r7, #8]
 800ef9c:	8622      	strh	r2, [r4, #48]	; 0x30
 800ef9e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800efa2:	079b      	lsls	r3, r3, #30
 800efa4:	bf48      	it	mi
 800efa6:	f240 4302 	movwmi	r3, #1026	; 0x402
 800efaa:	8baa      	ldrh	r2, [r5, #28]
 800efac:	bf48      	it	mi
 800efae:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 800efb0:	86a2      	strh	r2, [r4, #52]	; 0x34
 800efb2:	bf42      	ittt	mi
 800efb4:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 800efb8:	4622      	movmi	r2, r4
 800efba:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 800efbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800efc0:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 800efc4:	bf58      	it	pl
 800efc6:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d13e      	bne.n	800f04c <_tcp_send_package+0x134>
 800efce:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800efd0:	481f      	ldr	r0, [pc, #124]	; (800f050 <_tcp_send_package+0x138>)
 800efd2:	ba5b      	rev16	r3, r3
 800efd4:	8463      	strh	r3, [r4, #34]	; 0x22
 800efd6:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800efd8:	ba5b      	rev16	r3, r3
 800efda:	84a3      	strh	r3, [r4, #36]	; 0x24
 800efdc:	f7ff ff76 	bl	800eecc <_bswap32>
 800efe0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800efe2:	a801      	add	r0, sp, #4
 800efe4:	ba5b      	rev16	r3, r3
 800efe6:	8623      	strh	r3, [r4, #48]	; 0x30
 800efe8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800efea:	220c      	movs	r2, #12
 800efec:	ba5b      	rev16	r3, r3
 800efee:	491a      	ldr	r1, [pc, #104]	; (800f058 <_tcp_send_package+0x140>)
 800eff0:	86a3      	strh	r3, [r4, #52]	; 0x34
 800eff2:	f7ff ff61 	bl	800eeb8 <memcpy.isra.0>
 800eff6:	2204      	movs	r2, #4
 800eff8:	4918      	ldr	r1, [pc, #96]	; (800f05c <_tcp_send_package+0x144>)
 800effa:	4817      	ldr	r0, [pc, #92]	; (800f058 <_tcp_send_package+0x140>)
 800effc:	f7ff ff5c 	bl	800eeb8 <memcpy.isra.0>
 800f000:	2204      	movs	r2, #4
 800f002:	4649      	mov	r1, r9
 800f004:	4816      	ldr	r0, [pc, #88]	; (800f060 <_tcp_send_package+0x148>)
 800f006:	f7ff ff57 	bl	800eeb8 <memcpy.isra.0>
 800f00a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f00e:	f106 010c 	add.w	r1, r6, #12
 800f012:	83e3      	strh	r3, [r4, #30]
 800f014:	4810      	ldr	r0, [pc, #64]	; (800f058 <_tcp_send_package+0x140>)
 800f016:	ba73      	rev16	r3, r6
 800f018:	8423      	strh	r3, [r4, #32]
 800f01a:	f001 fe86 	bl	8010d2a <net_chksum>
 800f01e:	a901      	add	r1, sp, #4
 800f020:	4605      	mov	r5, r0
 800f022:	220c      	movs	r2, #12
 800f024:	480c      	ldr	r0, [pc, #48]	; (800f058 <_tcp_send_package+0x140>)
 800f026:	f7ff ff47 	bl	800eeb8 <memcpy.isra.0>
 800f02a:	4809      	ldr	r0, [pc, #36]	; (800f050 <_tcp_send_package+0x138>)
 800f02c:	f106 0122 	add.w	r1, r6, #34	; 0x22
 800f030:	8665      	strh	r5, [r4, #50]	; 0x32
 800f032:	b004      	add	sp, #16
 800f034:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f038:	f005 bdb6 	b.w	8014ba8 <emac_eth_send>
 800f03c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800f03e:	5cc9      	ldrb	r1, [r1, r3]
 800f040:	54d1      	strb	r1, [r2, r3]
 800f042:	3301      	adds	r3, #1
 800f044:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800f046:	4299      	cmp	r1, r3
 800f048:	d8f8      	bhi.n	800f03c <_tcp_send_package+0x124>
 800f04a:	e7c0      	b.n	800efce <_tcp_send_package+0xb6>
 800f04c:	2300      	movs	r3, #0
 800f04e:	e7f9      	b.n	800f044 <_tcp_send_package+0x12c>
 800f050:	20001dc0 	andcs	r1, r0, r0, asr #27
 800f054:	20001208 	andcs	r1, r0, r8, lsl #4
 800f058:	20001dd6 	ldrdcs	r1, [r0], -r6
 800f05c:	200011dc 	ldrdcs	r1, [r0], -ip
 800f060:	20001dda 	ldrdcs	r1, [r0], -sl

0800f064 <_send_reset>:
 800f064:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f066:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800f06a:	4604      	mov	r4, r0
 800f06c:	075a      	lsls	r2, r3, #29
 800f06e:	460e      	mov	r6, r1
 800f070:	d421      	bmi.n	800f0b6 <_send_reset+0x52>
 800f072:	2204      	movs	r2, #4
 800f074:	f013 0310 	ands.w	r3, r3, #16
 800f078:	f88d 200c 	strb.w	r2, [sp, #12]
 800f07c:	d01d      	beq.n	800f0ba <_send_reset+0x56>
 800f07e:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 800f082:	4668      	mov	r0, sp
 800f084:	f7ff ff18 	bl	800eeb8 <memcpy.isra.0>
 800f088:	9b00      	ldr	r3, [sp, #0]
 800f08a:	9301      	str	r3, [sp, #4]
 800f08c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800f090:	4668      	mov	r0, sp
 800f092:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800f096:	f104 0126 	add.w	r1, r4, #38	; 0x26
 800f09a:	07db      	lsls	r3, r3, #31
 800f09c:	f04f 0204 	mov.w	r2, #4
 800f0a0:	bf48      	it	mi
 800f0a2:	3501      	addmi	r5, #1
 800f0a4:	f7ff ff08 	bl	800eeb8 <memcpy.isra.0>
 800f0a8:	9b00      	ldr	r3, [sp, #0]
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	441d      	add	r5, r3
 800f0ae:	a901      	add	r1, sp, #4
 800f0b0:	9502      	str	r5, [sp, #8]
 800f0b2:	f7ff ff31 	bl	800ef18 <_tcp_send_package>
 800f0b6:	b004      	add	sp, #16
 800f0b8:	bd70      	pop	{r4, r5, r6, pc}
 800f0ba:	9301      	str	r3, [sp, #4]
 800f0bc:	2314      	movs	r3, #20
 800f0be:	f88d 300c 	strb.w	r3, [sp, #12]
 800f0c2:	e7e3      	b.n	800f08c <_send_reset+0x28>

0800f0c4 <tcp_begin>:
 800f0c4:	b508      	push	{r3, lr}
 800f0c6:	4b0a      	ldr	r3, [pc, #40]	; (800f0f0 <tcp_begin+0x2c>)
 800f0c8:	4601      	mov	r1, r0
 800f0ca:	881a      	ldrh	r2, [r3, #0]
 800f0cc:	4282      	cmp	r2, r0
 800f0ce:	d102      	bne.n	800f0d6 <tcp_begin+0x12>
 800f0d0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f0d4:	b130      	cbz	r0, 800f0e4 <tcp_begin+0x20>
 800f0d6:	b12a      	cbz	r2, 800f0e4 <tcp_begin+0x20>
 800f0d8:	4806      	ldr	r0, [pc, #24]	; (800f0f4 <tcp_begin+0x30>)
 800f0da:	f003 fe59 	bl	8012d90 <console_error>
 800f0de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0e2:	bd08      	pop	{r3, pc}
 800f0e4:	4802      	ldr	r0, [pc, #8]	; (800f0f0 <tcp_begin+0x2c>)
 800f0e6:	8019      	strh	r1, [r3, #0]
 800f0e8:	f7ff fecc 	bl	800ee84 <_init_tcb>
 800f0ec:	2000      	movs	r0, #0
 800f0ee:	e7f8      	b.n	800f0e2 <tcp_begin+0x1e>
 800f0f0:	20001d7c 	andcs	r1, r0, ip, ror sp
 800f0f4:	080170ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, ip, sp, lr}

0800f0f8 <tcp_write>:
 800f0f8:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	bf28      	it	cs
 800f100:	461a      	movcs	r2, r3
 800f102:	2344      	movs	r3, #68	; 0x44
 800f104:	b530      	push	{r4, r5, lr}
 800f106:	4c0d      	ldr	r4, [pc, #52]	; (800f13c <tcp_write+0x44>)
 800f108:	b085      	sub	sp, #20
 800f10a:	fb03 4400 	mla	r4, r3, r0, r4
 800f10e:	6963      	ldr	r3, [r4, #20]
 800f110:	62e1      	str	r1, [r4, #44]	; 0x2c
 800f112:	9301      	str	r3, [sp, #4]
 800f114:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f116:	4620      	mov	r0, r4
 800f118:	9302      	str	r3, [sp, #8]
 800f11a:	2318      	movs	r3, #24
 800f11c:	8622      	strh	r2, [r4, #48]	; 0x30
 800f11e:	a901      	add	r1, sp, #4
 800f120:	4615      	mov	r5, r2
 800f122:	f88d 300c 	strb.w	r3, [sp, #12]
 800f126:	f7ff fef7 	bl	800ef18 <_tcp_send_package>
 800f12a:	2300      	movs	r3, #0
 800f12c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f12e:	8623      	strh	r3, [r4, #48]	; 0x30
 800f130:	6963      	ldr	r3, [r4, #20]
 800f132:	442b      	add	r3, r5
 800f134:	6163      	str	r3, [r4, #20]
 800f136:	b005      	add	sp, #20
 800f138:	bd30      	pop	{r4, r5, pc}
 800f13a:	bf00      	nop
 800f13c:	20001d7c 	andcs	r1, r0, ip, ror sp

0800f140 <tcp_read>:
 800f140:	2344      	movs	r3, #68	; 0x44
 800f142:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f144:	4c1c      	ldr	r4, [pc, #112]	; (800f1b8 <tcp_read+0x78>)
 800f146:	b085      	sub	sp, #20
 800f148:	fb03 4400 	mla	r4, r3, r0, r4
 800f14c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f150:	2b07      	cmp	r3, #7
 800f152:	d112      	bne.n	800f17a <tcp_read+0x3a>
 800f154:	6963      	ldr	r3, [r4, #20]
 800f156:	4620      	mov	r0, r4
 800f158:	9301      	str	r3, [sp, #4]
 800f15a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f15c:	a901      	add	r1, sp, #4
 800f15e:	9302      	str	r3, [sp, #8]
 800f160:	2311      	movs	r3, #17
 800f162:	f88d 300c 	strb.w	r3, [sp, #12]
 800f166:	f7ff fed7 	bl	800ef18 <_tcp_send_package>
 800f16a:	2309      	movs	r3, #9
 800f16c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f170:	6963      	ldr	r3, [r4, #20]
 800f172:	3301      	adds	r3, #1
 800f174:	6163      	str	r3, [r4, #20]
 800f176:	2000      	movs	r0, #0
 800f178:	e01b      	b.n	800f1b2 <tcp_read+0x72>
 800f17a:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 800f17e:	4358      	muls	r0, r3
 800f180:	4a0e      	ldr	r2, [pc, #56]	; (800f1bc <tcp_read+0x7c>)
 800f182:	1817      	adds	r7, r2, r0
 800f184:	887b      	ldrh	r3, [r7, #2]
 800f186:	5a15      	ldrh	r5, [r2, r0]
 800f188:	429d      	cmp	r5, r3
 800f18a:	d0f4      	beq.n	800f176 <tcp_read+0x36>
 800f18c:	f240 55b6 	movw	r5, #1462	; 0x5b6
 800f190:	435d      	muls	r5, r3
 800f192:	1d06      	adds	r6, r0, #4
 800f194:	442e      	add	r6, r5
 800f196:	4416      	add	r6, r2
 800f198:	4405      	add	r5, r0
 800f19a:	600e      	str	r6, [r1, #0]
 800f19c:	442a      	add	r2, r5
 800f19e:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 800f1a2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800f1aa:	f003 0301 	and.w	r3, r3, #1
 800f1ae:	8722      	strh	r2, [r4, #56]	; 0x38
 800f1b0:	807b      	strh	r3, [r7, #2]
 800f1b2:	b005      	add	sp, #20
 800f1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	20001d7c 	andcs	r1, r0, ip, ror sp
 800f1bc:	2000120c 	andcs	r1, r0, ip, lsl #4

0800f1c0 <memcpy.isra.0>:
 800f1c0:	3801      	subs	r0, #1
 800f1c2:	440a      	add	r2, r1
 800f1c4:	4291      	cmp	r1, r2
 800f1c6:	d100      	bne.n	800f1ca <memcpy.isra.0+0xa>
 800f1c8:	4770      	bx	lr
 800f1ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1ce:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f1d2:	e7f7      	b.n	800f1c4 <memcpy.isra.0+0x4>

0800f1d4 <net_memcpy>:
 800f1d4:	ea40 0301 	orr.w	r3, r0, r1
 800f1d8:	079b      	lsls	r3, r3, #30
 800f1da:	b570      	push	{r4, r5, r6, lr}
 800f1dc:	d108      	bne.n	800f1f0 <net_memcpy+0x1c>
 800f1de:	f022 0303 	bic.w	r3, r2, #3
 800f1e2:	1f04      	subs	r4, r0, #4
 800f1e4:	18cd      	adds	r5, r1, r3
 800f1e6:	42a9      	cmp	r1, r5
 800f1e8:	d108      	bne.n	800f1fc <net_memcpy+0x28>
 800f1ea:	1ad2      	subs	r2, r2, r3
 800f1ec:	4403      	add	r3, r0
 800f1ee:	e000      	b.n	800f1f2 <net_memcpy+0x1e>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	3b01      	subs	r3, #1
 800f1f4:	440a      	add	r2, r1
 800f1f6:	4291      	cmp	r1, r2
 800f1f8:	d105      	bne.n	800f206 <net_memcpy+0x32>
 800f1fa:	bd70      	pop	{r4, r5, r6, pc}
 800f1fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f200:	f844 6f04 	str.w	r6, [r4, #4]!
 800f204:	e7ef      	b.n	800f1e6 <net_memcpy+0x12>
 800f206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f20a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f20e:	e7f2      	b.n	800f1f6 <net_memcpy+0x22>

0800f210 <udp_set_ip>:
 800f210:	2204      	movs	r2, #4
 800f212:	b513      	push	{r0, r1, r4, lr}
 800f214:	4604      	mov	r4, r0
 800f216:	6803      	ldr	r3, [r0, #0]
 800f218:	eb0d 0102 	add.w	r1, sp, r2
 800f21c:	4808      	ldr	r0, [pc, #32]	; (800f240 <udp_set_ip+0x30>)
 800f21e:	9301      	str	r3, [sp, #4]
 800f220:	f7ff ffce 	bl	800f1c0 <memcpy.isra.0>
 800f224:	6862      	ldr	r2, [r4, #4]
 800f226:	4b07      	ldr	r3, [pc, #28]	; (800f244 <udp_set_ip+0x34>)
 800f228:	43d1      	mvns	r1, r2
 800f22a:	6019      	str	r1, [r3, #0]
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	4013      	ands	r3, r2
 800f230:	4a05      	ldr	r2, [pc, #20]	; (800f248 <udp_set_ip+0x38>)
 800f232:	6013      	str	r3, [r2, #0]
 800f234:	68a2      	ldr	r2, [r4, #8]
 800f236:	4b05      	ldr	r3, [pc, #20]	; (800f24c <udp_set_ip+0x3c>)
 800f238:	601a      	str	r2, [r3, #0]
 800f23a:	b002      	add	sp, #8
 800f23c:	bd10      	pop	{r4, pc}
 800f23e:	bf00      	nop
 800f240:	20008096 	mulcs	r0, r6, r0
 800f244:	200023ac 	andcs	r2, r0, ip, lsr #7
 800f248:	200023b4 			; <UNDEFINED> instruction: 0x200023b4
 800f24c:	200023b0 			; <UNDEFINED> instruction: 0x200023b0

0800f250 <udp_bind>:
 800f250:	4a0a      	ldr	r2, [pc, #40]	; (800f27c <udp_bind+0x2c>)
 800f252:	4603      	mov	r3, r0
 800f254:	b510      	push	{r4, lr}
 800f256:	2000      	movs	r0, #0
 800f258:	4614      	mov	r4, r2
 800f25a:	f852 1b04 	ldr.w	r1, [r2], #4
 800f25e:	4299      	cmp	r1, r3
 800f260:	d008      	beq.n	800f274 <udp_bind+0x24>
 800f262:	b141      	cbz	r1, 800f276 <udp_bind+0x26>
 800f264:	3001      	adds	r0, #1
 800f266:	2808      	cmp	r0, #8
 800f268:	d1f7      	bne.n	800f25a <udp_bind+0xa>
 800f26a:	4805      	ldr	r0, [pc, #20]	; (800f280 <udp_bind+0x30>)
 800f26c:	f003 fd90 	bl	8012d90 <console_error>
 800f270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f274:	bd10      	pop	{r4, pc}
 800f276:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800f27a:	e7fb      	b.n	800f274 <udp_bind+0x24>
 800f27c:	200023bc 			; <UNDEFINED> instruction: 0x200023bc
 800f280:	0801710c 	stmdaeq	r1, {r2, r3, r8, ip, sp, lr}

0800f284 <udp_unbind>:
 800f284:	4a0c      	ldr	r2, [pc, #48]	; (800f2b8 <udp_unbind+0x34>)
 800f286:	2300      	movs	r3, #0
 800f288:	4611      	mov	r1, r2
 800f28a:	b510      	push	{r4, lr}
 800f28c:	f852 4b04 	ldr.w	r4, [r2], #4
 800f290:	4284      	cmp	r4, r0
 800f292:	d108      	bne.n	800f2a6 <udp_unbind+0x22>
 800f294:	2000      	movs	r0, #0
 800f296:	f640 3294 	movw	r2, #2964	; 0xb94
 800f29a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800f29e:	4353      	muls	r3, r2
 800f2a0:	4a06      	ldr	r2, [pc, #24]	; (800f2bc <udp_unbind+0x38>)
 800f2a2:	50d0      	str	r0, [r2, r3]
 800f2a4:	bd10      	pop	{r4, pc}
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	2b08      	cmp	r3, #8
 800f2aa:	d1ef      	bne.n	800f28c <udp_unbind+0x8>
 800f2ac:	4804      	ldr	r0, [pc, #16]	; (800f2c0 <udp_unbind+0x3c>)
 800f2ae:	f003 fd6f 	bl	8012d90 <console_error>
 800f2b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2b6:	e7f5      	b.n	800f2a4 <udp_unbind+0x20>
 800f2b8:	200023bc 			; <UNDEFINED> instruction: 0x200023bc
 800f2bc:	200023dc 	ldrdcs	r2, [r0], -ip
 800f2c0:	08017111 	stmdaeq	r1, {r0, r4, r8, ip, sp, lr}

0800f2c4 <udp_recv>:
 800f2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	4698      	mov	r8, r3
 800f2cc:	f640 3394 	movw	r3, #2964	; 0xb94
 800f2d0:	435c      	muls	r4, r3
 800f2d2:	4608      	mov	r0, r1
 800f2d4:	4915      	ldr	r1, [pc, #84]	; (800f32c <udp_recv+0x68>)
 800f2d6:	190f      	adds	r7, r1, r4
 800f2d8:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800f2dc:	5b0b      	ldrh	r3, [r1, r4]
 800f2de:	4563      	cmp	r3, ip
 800f2e0:	d021      	beq.n	800f326 <udp_recv+0x62>
 800f2e2:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800f2e6:	fb03 fc0c 	mul.w	ip, r3, ip
 800f2ea:	eb0c 0604 	add.w	r6, ip, r4
 800f2ee:	440e      	add	r6, r1
 800f2f0:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 800f2f4:	3404      	adds	r4, #4
 800f2f6:	4295      	cmp	r5, r2
 800f2f8:	bf28      	it	cs
 800f2fa:	4615      	movcs	r5, r2
 800f2fc:	4464      	add	r4, ip
 800f2fe:	462a      	mov	r2, r5
 800f300:	4421      	add	r1, r4
 800f302:	f7ff ff67 	bl	800f1d4 <net_memcpy>
 800f306:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 800f30a:	f8c8 3000 	str.w	r3, [r8]
 800f30e:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 800f312:	9b06      	ldr	r3, [sp, #24]
 800f314:	801a      	strh	r2, [r3, #0]
 800f316:	887b      	ldrh	r3, [r7, #2]
 800f318:	3301      	adds	r3, #1
 800f31a:	f003 0301 	and.w	r3, r3, #1
 800f31e:	807b      	strh	r3, [r7, #2]
 800f320:	4628      	mov	r0, r5
 800f322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f326:	2500      	movs	r5, #0
 800f328:	e7fa      	b.n	800f320 <udp_recv+0x5c>
 800f32a:	bf00      	nop
 800f32c:	200023dc 	ldrdcs	r2, [r0], -ip

0800f330 <udp_recv2>:
 800f330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f332:	f640 3594 	movw	r5, #2964	; 0xb94
 800f336:	4368      	muls	r0, r5
 800f338:	4c0f      	ldr	r4, [pc, #60]	; (800f378 <udp_recv2+0x48>)
 800f33a:	1827      	adds	r7, r4, r0
 800f33c:	887d      	ldrh	r5, [r7, #2]
 800f33e:	5a26      	ldrh	r6, [r4, r0]
 800f340:	42ae      	cmp	r6, r5
 800f342:	d017      	beq.n	800f374 <udp_recv2+0x44>
 800f344:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 800f348:	fb0c f505 	mul.w	r5, ip, r5
 800f34c:	1d06      	adds	r6, r0, #4
 800f34e:	442e      	add	r6, r5
 800f350:	4405      	add	r5, r0
 800f352:	4426      	add	r6, r4
 800f354:	442c      	add	r4, r5
 800f356:	600e      	str	r6, [r1, #0]
 800f358:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 800f35c:	6011      	str	r1, [r2, #0]
 800f35e:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 800f362:	801a      	strh	r2, [r3, #0]
 800f364:	887b      	ldrh	r3, [r7, #2]
 800f366:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 800f36a:	3301      	adds	r3, #1
 800f36c:	f003 0301 	and.w	r3, r3, #1
 800f370:	807b      	strh	r3, [r7, #2]
 800f372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f374:	2000      	movs	r0, #0
 800f376:	e7fc      	b.n	800f372 <udp_recv2+0x42>
 800f378:	200023dc 	ldrdcs	r2, [r0], -ip

0800f37c <udp_send>:
 800f37c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f380:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800f4b4 <udp_send+0x138>
 800f384:	461c      	mov	r4, r3
 800f386:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 800f38a:	4607      	mov	r7, r0
 800f38c:	4688      	mov	r8, r1
 800f38e:	4616      	mov	r6, r2
 800f390:	2b00      	cmp	r3, #0
 800f392:	f000 808b 	beq.w	800f4ac <udp_send+0x130>
 800f396:	1c63      	adds	r3, r4, #1
 800f398:	d141      	bne.n	800f41e <udp_send+0xa2>
 800f39a:	4a47      	ldr	r2, [pc, #284]	; (800f4b8 <udp_send+0x13c>)
 800f39c:	2307      	movs	r3, #7
 800f39e:	4611      	mov	r1, r2
 800f3a0:	20ff      	movs	r0, #255	; 0xff
 800f3a2:	e001      	b.n	800f3a8 <udp_send+0x2c>
 800f3a4:	f802 0b01 	strb.w	r0, [r2], #1
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	d1fb      	bne.n	800f3a4 <udp_send+0x28>
 800f3ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f3b0:	83cb      	strh	r3, [r1, #30]
 800f3b2:	840b      	strh	r3, [r1, #32]
 800f3b4:	2500      	movs	r5, #0
 800f3b6:	f8df a104 	ldr.w	sl, [pc, #260]	; 800f4bc <udp_send+0x140>
 800f3ba:	4c3f      	ldr	r4, [pc, #252]	; (800f4b8 <udp_send+0x13c>)
 800f3bc:	f8ba 3000 	ldrh.w	r3, [sl]
 800f3c0:	2114      	movs	r1, #20
 800f3c2:	8263      	strh	r3, [r4, #18]
 800f3c4:	f106 031c 	add.w	r3, r6, #28
 800f3c8:	ba5b      	rev16	r3, r3
 800f3ca:	f104 000e 	add.w	r0, r4, #14
 800f3ce:	8223      	strh	r3, [r4, #16]
 800f3d0:	8325      	strh	r5, [r4, #24]
 800f3d2:	f001 fcaa 	bl	8010d2a <net_chksum>
 800f3d6:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 800f3da:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800f3de:	ba5b      	rev16	r3, r3
 800f3e0:	8463      	strh	r3, [r4, #34]	; 0x22
 800f3e2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800f3e6:	4632      	mov	r2, r6
 800f3e8:	ba5b      	rev16	r3, r3
 800f3ea:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f3ec:	f106 0308 	add.w	r3, r6, #8
 800f3f0:	ba5b      	rev16	r3, r3
 800f3f2:	bf28      	it	cs
 800f3f4:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 800f3f8:	4641      	mov	r1, r8
 800f3fa:	8320      	strh	r0, [r4, #24]
 800f3fc:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800f400:	84e3      	strh	r3, [r4, #38]	; 0x26
 800f402:	f7ff fee7 	bl	800f1d4 <net_memcpy>
 800f406:	4620      	mov	r0, r4
 800f408:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 800f40c:	f005 fbcc 	bl	8014ba8 <emac_eth_send>
 800f410:	f8ba 3000 	ldrh.w	r3, [sl]
 800f414:	4628      	mov	r0, r5
 800f416:	3301      	adds	r3, #1
 800f418:	f8aa 3000 	strh.w	r3, [sl]
 800f41c:	e037      	b.n	800f48e <udp_send+0x112>
 800f41e:	4b28      	ldr	r3, [pc, #160]	; (800f4c0 <udp_send+0x144>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	43a3      	bics	r3, r4
 800f424:	d10f      	bne.n	800f446 <udp_send+0xca>
 800f426:	2307      	movs	r3, #7
 800f428:	21ff      	movs	r1, #255	; 0xff
 800f42a:	4a23      	ldr	r2, [pc, #140]	; (800f4b8 <udp_send+0x13c>)
 800f42c:	e001      	b.n	800f432 <udp_send+0xb6>
 800f42e:	f802 1b01 	strb.w	r1, [r2], #1
 800f432:	3b01      	subs	r3, #1
 800f434:	d1fb      	bne.n	800f42e <udp_send+0xb2>
 800f436:	2204      	movs	r2, #4
 800f438:	4822      	ldr	r0, [pc, #136]	; (800f4c4 <udp_send+0x148>)
 800f43a:	eb0d 0102 	add.w	r1, sp, r2
 800f43e:	9401      	str	r4, [sp, #4]
 800f440:	f7ff febe 	bl	800f1c0 <memcpy.isra.0>
 800f444:	e7b6      	b.n	800f3b4 <udp_send+0x38>
 800f446:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 800f44a:	2be0      	cmp	r3, #224	; 0xe0
 800f44c:	d10e      	bne.n	800f46c <udp_send+0xf0>
 800f44e:	491e      	ldr	r1, [pc, #120]	; (800f4c8 <udp_send+0x14c>)
 800f450:	f3c4 2306 	ubfx	r3, r4, #8, #7
 800f454:	70cb      	strb	r3, [r1, #3]
 800f456:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800f45a:	710b      	strb	r3, [r1, #4]
 800f45c:	f3c4 6307 	ubfx	r3, r4, #24, #8
 800f460:	2206      	movs	r2, #6
 800f462:	4815      	ldr	r0, [pc, #84]	; (800f4b8 <udp_send+0x13c>)
 800f464:	714b      	strb	r3, [r1, #5]
 800f466:	f7ff feab 	bl	800f1c0 <memcpy.isra.0>
 800f46a:	e7e4      	b.n	800f436 <udp_send+0xba>
 800f46c:	4b17      	ldr	r3, [pc, #92]	; (800f4cc <udp_send+0x150>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	43a3      	bics	r3, r4
 800f472:	d00f      	beq.n	800f494 <udp_send+0x118>
 800f474:	4d16      	ldr	r5, [pc, #88]	; (800f4d0 <udp_send+0x154>)
 800f476:	4910      	ldr	r1, [pc, #64]	; (800f4b8 <udp_send+0x13c>)
 800f478:	6828      	ldr	r0, [r5, #0]
 800f47a:	f001 f921 	bl	80106c0 <arp_cache_lookup>
 800f47e:	682b      	ldr	r3, [r5, #0]
 800f480:	4298      	cmp	r0, r3
 800f482:	d0d8      	beq.n	800f436 <udp_send+0xba>
 800f484:	4813      	ldr	r0, [pc, #76]	; (800f4d4 <udp_send+0x158>)
 800f486:	f003 fc83 	bl	8012d90 <console_error>
 800f48a:	f06f 0002 	mvn.w	r0, #2
 800f48e:	b002      	add	sp, #8
 800f490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f494:	4620      	mov	r0, r4
 800f496:	4908      	ldr	r1, [pc, #32]	; (800f4b8 <udp_send+0x13c>)
 800f498:	f001 f912 	bl	80106c0 <arp_cache_lookup>
 800f49c:	42a0      	cmp	r0, r4
 800f49e:	d0ca      	beq.n	800f436 <udp_send+0xba>
 800f4a0:	480d      	ldr	r0, [pc, #52]	; (800f4d8 <udp_send+0x15c>)
 800f4a2:	f003 fc75 	bl	8012d90 <console_error>
 800f4a6:	f06f 0001 	mvn.w	r0, #1
 800f4aa:	e7f0      	b.n	800f48e <udp_send+0x112>
 800f4ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4b0:	e7ed      	b.n	800f48e <udp_send+0x112>
 800f4b2:	bf00      	nop
 800f4b4:	200023bc 			; <UNDEFINED> instruction: 0x200023bc
 800f4b8:	2000807c 	andcs	r8, r0, ip, ror r0
 800f4bc:	200023b8 			; <UNDEFINED> instruction: 0x200023b8
 800f4c0:	200023ac 	andcs	r2, r0, ip, lsr #7
 800f4c4:	2000809a 	mulcs	r0, sl, r0
 800f4c8:	20000010 	andcs	r0, r0, r0, lsl r0
 800f4cc:	200023b4 			; <UNDEFINED> instruction: 0x200023b4
 800f4d0:	200023b0 			; <UNDEFINED> instruction: 0x200023b0
 800f4d4:	08017119 	stmdaeq	r1, {r0, r3, r4, r8, ip, sp, lr}
 800f4d8:	0801713f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, ip, sp, lr}

0800f4dc <strlen>:
 800f4dc:	4603      	mov	r3, r0
 800f4de:	461a      	mov	r2, r3
 800f4e0:	7811      	ldrb	r1, [r2, #0]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	2900      	cmp	r1, #0
 800f4e6:	d1fa      	bne.n	800f4de <strlen+0x2>
 800f4e8:	1a10      	subs	r0, r2, r0
 800f4ea:	4770      	bx	lr

0800f4ec <strcmp>:
 800f4ec:	1e43      	subs	r3, r0, #1
 800f4ee:	3901      	subs	r1, #1
 800f4f0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800f4f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f4f8:	4290      	cmp	r0, r2
 800f4fa:	d001      	beq.n	800f500 <strcmp+0x14>
 800f4fc:	1a80      	subs	r0, r0, r2
 800f4fe:	e001      	b.n	800f504 <strcmp+0x18>
 800f500:	2800      	cmp	r0, #0
 800f502:	d1f5      	bne.n	800f4f0 <strcmp+0x4>
 800f504:	4770      	bx	lr

0800f506 <strcpy.isra.0>:
 800f506:	3801      	subs	r0, #1
 800f508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f50c:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f510:	2b00      	cmp	r3, #0
 800f512:	d1f9      	bne.n	800f508 <strcpy.isra.0+0x2>
 800f514:	4770      	bx	lr

0800f516 <strcat.isra.0>:
 800f516:	b538      	push	{r3, r4, r5, lr}
 800f518:	4604      	mov	r4, r0
 800f51a:	460d      	mov	r5, r1
 800f51c:	f7ff ffde 	bl	800f4dc <strlen>
 800f520:	4629      	mov	r1, r5
 800f522:	4420      	add	r0, r4
 800f524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f528:	f7ff bfed 	b.w	800f506 <strcpy.isra.0>

0800f52c <MDNS::MDNS()>:
 800f52c:	b513      	push	{r0, r1, r4, lr}
 800f52e:	4604      	mov	r4, r0
 800f530:	a901      	add	r1, sp, #4
 800f532:	4804      	ldr	r0, [pc, #16]	; (800f544 <MDNS::MDNS()+0x18>)
 800f534:	f003 fda4 	bl	8013080 <inet_aton>
 800f538:	4620      	mov	r0, r4
 800f53a:	4b03      	ldr	r3, [pc, #12]	; (800f548 <MDNS::MDNS()+0x1c>)
 800f53c:	9a01      	ldr	r2, [sp, #4]
 800f53e:	601a      	str	r2, [r3, #0]
 800f540:	b002      	add	sp, #8
 800f542:	bd10      	pop	{r4, pc}
 800f544:	08017170 	stmdaeq	r1, {r4, r5, r6, r8, ip, sp, lr}
 800f548:	20008670 	andcs	r8, r0, r0, ror r6

0800f54c <MDNS::SetName(char const*)>:
 800f54c:	b538      	push	{r3, r4, r5, lr}
 800f54e:	4d0b      	ldr	r5, [pc, #44]	; (800f57c <MDNS::SetName(char const*)+0x30>)
 800f550:	460c      	mov	r4, r1
 800f552:	6828      	ldr	r0, [r5, #0]
 800f554:	b108      	cbz	r0, 800f55a <MDNS::SetName(char const*)+0xe>
 800f556:	f003 fd8d 	bl	8013074 <operator delete[](void*)>
 800f55a:	4620      	mov	r0, r4
 800f55c:	f7ff ffbe 	bl	800f4dc <strlen>
 800f560:	3007      	adds	r0, #7
 800f562:	f003 fd8b 	bl	801307c <operator new[](unsigned int)>
 800f566:	4621      	mov	r1, r4
 800f568:	6028      	str	r0, [r5, #0]
 800f56a:	f7ff ffcc 	bl	800f506 <strcpy.isra.0>
 800f56e:	6828      	ldr	r0, [r5, #0]
 800f570:	4903      	ldr	r1, [pc, #12]	; (800f580 <MDNS::SetName(char const*)+0x34>)
 800f572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f576:	f7ff bfce 	b.w	800f516 <strcat.isra.0>
 800f57a:	bf00      	nop
 800f57c:	20008aa0 	andcs	r8, r0, r0, lsr #21
 800f580:	08017180 	stmdaeq	r1, {r7, r8, ip, sp, lr}

0800f584 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 800f584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f588:	f04f 0e00 	mov.w	lr, #0
 800f58c:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 800f590:	4675      	mov	r5, lr
 800f592:	4e1b      	ldr	r6, [pc, #108]	; (800f600 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 800f594:	4f1b      	ldr	r7, [pc, #108]	; (800f604 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 800f596:	780b      	ldrb	r3, [r1, #0]
 800f598:	1c68      	adds	r0, r5, #1
 800f59a:	b913      	cbnz	r3, 800f5a2 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 800f59c:	7013      	strb	r3, [r2, #0]
 800f59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5a2:	2b3f      	cmp	r3, #63	; 0x3f
 800f5a4:	d91c      	bls.n	800f5e0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 800f5a6:	7849      	ldrb	r1, [r1, #1]
 800f5a8:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 800f5ac:	430b      	orrs	r3, r1
 800f5ae:	6839      	ldr	r1, [r7, #0]
 800f5b0:	f1be 0f00 	cmp.w	lr, #0
 800f5b4:	bf08      	it	eq
 800f5b6:	4605      	moveq	r5, r0
 800f5b8:	5ccc      	ldrb	r4, [r1, r3]
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	4419      	add	r1, r3
 800f5be:	2300      	movs	r3, #0
 800f5c0:	42a3      	cmp	r3, r4
 800f5c2:	5cc8      	ldrb	r0, [r1, r3]
 800f5c4:	d309      	bcc.n	800f5da <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 800f5c6:	f04f 0e01 	mov.w	lr, #1
 800f5ca:	4421      	add	r1, r4
 800f5cc:	4414      	add	r4, r2
 800f5ce:	780b      	ldrb	r3, [r1, #0]
 800f5d0:	b10b      	cbz	r3, 800f5d6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 800f5d2:	f804 cb01 	strb.w	ip, [r4], #1
 800f5d6:	4622      	mov	r2, r4
 800f5d8:	e7dd      	b.n	800f596 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 800f5da:	54d0      	strb	r0, [r2, r3]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	e7ef      	b.n	800f5c0 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 800f5e0:	4688      	mov	r8, r1
 800f5e2:	18d4      	adds	r4, r2, r3
 800f5e4:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 800f5e8:	f802 9b01 	strb.w	r9, [r2], #1
 800f5ec:	4294      	cmp	r4, r2
 800f5ee:	d1f9      	bne.n	800f5e4 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 800f5f0:	1c5a      	adds	r2, r3, #1
 800f5f2:	4411      	add	r1, r2
 800f5f4:	f1be 0f00 	cmp.w	lr, #0
 800f5f8:	d1e9      	bne.n	800f5ce <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 800f5fa:	181d      	adds	r5, r3, r0
 800f5fc:	e7e7      	b.n	800f5ce <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 800f5fe:	bf00      	nop
 800f600:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 800f604:	20008aa4 	andcs	r8, r0, r4, lsr #21

0800f608 <MDNS::FindFirstDotFromRight(char const*) const>:
 800f608:	b510      	push	{r4, lr}
 800f60a:	4608      	mov	r0, r1
 800f60c:	460c      	mov	r4, r1
 800f60e:	f7ff ff65 	bl	800f4dc <strlen>
 800f612:	4420      	add	r0, r4
 800f614:	42a0      	cmp	r0, r4
 800f616:	d903      	bls.n	800f620 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 800f618:	f810 3901 	ldrb.w	r3, [r0], #-1
 800f61c:	2b2e      	cmp	r3, #46	; 0x2e
 800f61e:	d1f9      	bne.n	800f614 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 800f620:	3001      	adds	r0, #1
 800f622:	bd10      	pop	{r4, pc}

0800f624 <MDNS::WriteDnsName(char const*, char*, bool)>:
 800f624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f626:	4614      	mov	r4, r2
 800f628:	460f      	mov	r7, r1
 800f62a:	1c60      	adds	r0, r4, #1
 800f62c:	463d      	mov	r5, r7
 800f62e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f632:	b946      	cbnz	r6, 800f646 <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 800f634:	1a69      	subs	r1, r5, r1
 800f636:	7021      	strb	r1, [r4, #0]
 800f638:	7829      	ldrb	r1, [r5, #0]
 800f63a:	b949      	cbnz	r1, 800f650 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 800f63c:	b10b      	cbz	r3, 800f642 <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 800f63e:	f800 1b01 	strb.w	r1, [r0], #1
 800f642:	1a80      	subs	r0, r0, r2
 800f644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f646:	2e2e      	cmp	r6, #46	; 0x2e
 800f648:	d0f4      	beq.n	800f634 <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 800f64a:	f800 6b01 	strb.w	r6, [r0], #1
 800f64e:	e7ed      	b.n	800f62c <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 800f650:	4604      	mov	r4, r0
 800f652:	1c69      	adds	r1, r5, #1
 800f654:	e7e8      	b.n	800f628 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

0800f658 <MDNS::CreateAnswerLocalIpAddress()>:
 800f658:	2384      	movs	r3, #132	; 0x84
 800f65a:	b510      	push	{r4, lr}
 800f65c:	4c0f      	ldr	r4, [pc, #60]	; (800f69c <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 800f65e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f662:	80e3      	strh	r3, [r4, #6]
 800f664:	2300      	movs	r3, #0
 800f666:	490e      	ldr	r1, [pc, #56]	; (800f6a0 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 800f668:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f66c:	6809      	ldr	r1, [r1, #0]
 800f66e:	f104 0210 	add.w	r2, r4, #16
 800f672:	2301      	movs	r3, #1
 800f674:	f7ff ffd6 	bl	800f624 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f678:	490a      	ldr	r1, [pc, #40]	; (800f6a4 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 800f67a:	1813      	adds	r3, r2, r0
 800f67c:	5011      	str	r1, [r2, r0]
 800f67e:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800f682:	605a      	str	r2, [r3, #4]
 800f684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f688:	811a      	strh	r2, [r3, #8]
 800f68a:	4a07      	ldr	r2, [pc, #28]	; (800f6a8 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 800f68c:	6812      	ldr	r2, [r2, #0]
 800f68e:	6952      	ldr	r2, [r2, #20]
 800f690:	f8c3 200a 	str.w	r2, [r3, #10]
 800f694:	1b1b      	subs	r3, r3, r4
 800f696:	330a      	adds	r3, #10
 800f698:	6023      	str	r3, [r4, #0]
 800f69a:	bd10      	pop	{r4, pc}
 800f69c:	20008674 	andcs	r8, r0, r4, ror r6
 800f6a0:	20008aa0 	andcs	r8, r0, r0, lsr #21
 800f6a4:	01800100 	orreq	r0, r0, r0, lsl #2
 800f6a8:	20008aa8 	andcs	r8, r0, r8, lsr #21

0800f6ac <MDNS::Start()>:
 800f6ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6ae:	4c1d      	ldr	r4, [pc, #116]	; (800f724 <MDNS::Start()+0x78>)
 800f6b0:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800f6b4:	4605      	mov	r5, r0
 800f6b6:	6820      	ldr	r0, [r4, #0]
 800f6b8:	f000 fb25 	bl	800fd06 <Network::Begin(unsigned short)>
 800f6bc:	4e1a      	ldr	r6, [pc, #104]	; (800f728 <MDNS::Start()+0x7c>)
 800f6be:	4f1b      	ldr	r7, [pc, #108]	; (800f72c <MDNS::Start()+0x80>)
 800f6c0:	4601      	mov	r1, r0
 800f6c2:	6030      	str	r0, [r6, #0]
 800f6c4:	683a      	ldr	r2, [r7, #0]
 800f6c6:	6820      	ldr	r0, [r4, #0]
 800f6c8:	f000 fb2e 	bl	800fd28 <Network::JoinGroup(int, unsigned int)>
 800f6cc:	4b18      	ldr	r3, [pc, #96]	; (800f730 <MDNS::Start()+0x84>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	b923      	cbnz	r3, 800f6dc <MDNS::Start()+0x30>
 800f6d2:	6821      	ldr	r1, [r4, #0]
 800f6d4:	4628      	mov	r0, r5
 800f6d6:	3120      	adds	r1, #32
 800f6d8:	f7ff ff38 	bl	800f54c <MDNS::SetName(char const*)>
 800f6dc:	4628      	mov	r0, r5
 800f6de:	f7ff ffbb 	bl	800f658 <MDNS::CreateAnswerLocalIpAddress()>
 800f6e2:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800f6e6:	4913      	ldr	r1, [pc, #76]	; (800f734 <MDNS::Start()+0x88>)
 800f6e8:	7830      	ldrb	r0, [r6, #0]
 800f6ea:	f831 2b04 	ldrh.w	r2, [r1], #4
 800f6ee:	9300      	str	r3, [sp, #0]
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	f7ff fe43 	bl	800f37c <udp_send>
 800f6f6:	233f      	movs	r3, #63	; 0x3f
 800f6f8:	6820      	ldr	r0, [r4, #0]
 800f6fa:	4c0f      	ldr	r4, [pc, #60]	; (800f738 <MDNS::Start()+0x8c>)
 800f6fc:	f100 0260 	add.w	r2, r0, #96	; 0x60
 800f700:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800f704:	b929      	cbnz	r1, 800f712 <MDNS::Start()+0x66>
 800f706:	4413      	add	r3, r2
 800f708:	429a      	cmp	r2, r3
 800f70a:	d006      	beq.n	800f71a <MDNS::Start()+0x6e>
 800f70c:	f802 1b01 	strb.w	r1, [r2], #1
 800f710:	e7fa      	b.n	800f708 <MDNS::Start()+0x5c>
 800f712:	3b01      	subs	r3, #1
 800f714:	f802 1b01 	strb.w	r1, [r2], #1
 800f718:	d1f2      	bne.n	800f700 <MDNS::Start()+0x54>
 800f71a:	2300      	movs	r3, #0
 800f71c:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 800f720:	b003      	add	sp, #12
 800f722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f724:	20008aa8 	andcs	r8, r0, r8, lsr #21
 800f728:	20000018 	andcs	r0, r0, r8, lsl r0
 800f72c:	20008670 	andcs	r8, r0, r0, ror r6
 800f730:	20008aa0 	andcs	r8, r0, r0, lsr #21
 800f734:	20008674 	andcs	r8, r0, r4, ror r6
 800f738:	08017180 	stmdaeq	r1, {r7, r8, ip, sp, lr}

0800f73c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 800f73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f740:	4c1b      	ldr	r4, [pc, #108]	; (800f7b0 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 800f742:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 800f746:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 800f74a:	2300      	movs	r3, #0
 800f74c:	f854 100c 	ldr.w	r1, [r4, ip]
 800f750:	4607      	mov	r7, r0
 800f752:	f7ff ff67 	bl	800f624 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f756:	2301      	movs	r3, #1
 800f758:	7bac      	ldrb	r4, [r5, #14]
 800f75a:	4616      	mov	r6, r2
 800f75c:	4915      	ldr	r1, [pc, #84]	; (800f7b4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 800f75e:	4402      	add	r2, r0
 800f760:	4815      	ldr	r0, [pc, #84]	; (800f7b8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 800f762:	429c      	cmp	r4, r3
 800f764:	bf18      	it	ne
 800f766:	4601      	movne	r1, r0
 800f768:	4638      	mov	r0, r7
 800f76a:	f7ff ff5b 	bl	800f624 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f76e:	4b13      	ldr	r3, [pc, #76]	; (800f7bc <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 800f770:	1814      	adds	r4, r2, r0
 800f772:	5013      	str	r3, [r2, r0]
 800f774:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f778:	6063      	str	r3, [r4, #4]
 800f77a:	4b11      	ldr	r3, [pc, #68]	; (800f7c0 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 800f77c:	f8d3 8000 	ldr.w	r8, [r3]
 800f780:	4640      	mov	r0, r8
 800f782:	f7ff feab 	bl	800f4dc <strlen>
 800f786:	f100 0308 	add.w	r3, r0, #8
 800f78a:	ba5b      	rev16	r3, r3
 800f78c:	8123      	strh	r3, [r4, #8]
 800f78e:	2300      	movs	r3, #0
 800f790:	f8c4 300a 	str.w	r3, [r4, #10]
 800f794:	89ab      	ldrh	r3, [r5, #12]
 800f796:	f104 0210 	add.w	r2, r4, #16
 800f79a:	ba5b      	rev16	r3, r3
 800f79c:	81e3      	strh	r3, [r4, #14]
 800f79e:	4641      	mov	r1, r8
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	4638      	mov	r0, r7
 800f7a4:	f7ff ff3e 	bl	800f624 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f7a8:	4410      	add	r0, r2
 800f7aa:	1b80      	subs	r0, r0, r6
 800f7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7b0:	20008878 	andcs	r8, r0, r8, ror r8
 800f7b4:	0801717c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, ip, sp, lr}
 800f7b8:	08017199 	stmdaeq	r1, {r0, r3, r4, r7, r8, ip, sp, lr}
 800f7bc:	01802100 	orreq	r2, r0, r0, lsl #2
 800f7c0:	20008aa0 	andcs	r8, r0, r0, lsr #21

0800f7c4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 800f7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c8:	4e19      	ldr	r6, [pc, #100]	; (800f830 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 800f7ca:	010f      	lsls	r7, r1, #4
 800f7cc:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	59f1      	ldr	r1, [r6, r7]
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	f7ff ff25 	bl	800f624 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f7da:	2301      	movs	r3, #1
 800f7dc:	7bae      	ldrb	r6, [r5, #14]
 800f7de:	4690      	mov	r8, r2
 800f7e0:	4914      	ldr	r1, [pc, #80]	; (800f834 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 800f7e2:	4402      	add	r2, r0
 800f7e4:	4814      	ldr	r0, [pc, #80]	; (800f838 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 800f7e6:	429e      	cmp	r6, r3
 800f7e8:	bf18      	it	ne
 800f7ea:	4601      	movne	r1, r0
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	f7ff ff19 	bl	800f624 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f7f2:	4b12      	ldr	r3, [pc, #72]	; (800f83c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 800f7f4:	1816      	adds	r6, r2, r0
 800f7f6:	5013      	str	r3, [r2, r0]
 800f7f8:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f7fc:	68a8      	ldr	r0, [r5, #8]
 800f7fe:	6073      	str	r3, [r6, #4]
 800f800:	f106 040b 	add.w	r4, r6, #11
 800f804:	b938      	cbnz	r0, 800f816 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 800f806:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f80a:	72b0      	strb	r0, [r6, #10]
 800f80c:	8133      	strh	r3, [r6, #8]
 800f80e:	eba4 0008 	sub.w	r0, r4, r8
 800f812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f816:	f7ff fe61 	bl	800f4dc <strlen>
 800f81a:	4607      	mov	r7, r0
 800f81c:	1c43      	adds	r3, r0, #1
 800f81e:	72b0      	strb	r0, [r6, #10]
 800f820:	ba5b      	rev16	r3, r3
 800f822:	4620      	mov	r0, r4
 800f824:	68a9      	ldr	r1, [r5, #8]
 800f826:	8133      	strh	r3, [r6, #8]
 800f828:	f7ff fe6d 	bl	800f506 <strcpy.isra.0>
 800f82c:	443c      	add	r4, r7
 800f82e:	e7ee      	b.n	800f80e <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 800f830:	20008878 	andcs	r8, r0, r8, ror r8
 800f834:	0801717c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, ip, sp, lr}
 800f838:	08017199 	stmdaeq	r1, {r0, r3, r4, r7, r8, ip, sp, lr}
 800f83c:	01801000 	orreq	r1, r0, r0

0800f840 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 800f840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f844:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800f8a8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 800f848:	ea4f 1901 	mov.w	r9, r1, lsl #4
 800f84c:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 800f850:	6869      	ldr	r1, [r5, #4]
 800f852:	2301      	movs	r3, #1
 800f854:	4607      	mov	r7, r0
 800f856:	f7ff fee5 	bl	800f624 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f85a:	4b14      	ldr	r3, [pc, #80]	; (800f8ac <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 800f85c:	f858 8009 	ldr.w	r8, [r8, r9]
 800f860:	5013      	str	r3, [r2, r0]
 800f862:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f866:	1816      	adds	r6, r2, r0
 800f868:	6073      	str	r3, [r6, #4]
 800f86a:	4640      	mov	r0, r8
 800f86c:	4614      	mov	r4, r2
 800f86e:	f7ff fe35 	bl	800f4dc <strlen>
 800f872:	f100 030d 	add.w	r3, r0, #13
 800f876:	ba5b      	rev16	r3, r3
 800f878:	4641      	mov	r1, r8
 800f87a:	8133      	strh	r3, [r6, #8]
 800f87c:	f106 020a 	add.w	r2, r6, #10
 800f880:	2300      	movs	r3, #0
 800f882:	4638      	mov	r0, r7
 800f884:	f7ff fece 	bl	800f624 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f888:	2301      	movs	r3, #1
 800f88a:	4402      	add	r2, r0
 800f88c:	7bad      	ldrb	r5, [r5, #14]
 800f88e:	4808      	ldr	r0, [pc, #32]	; (800f8b0 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 800f890:	4908      	ldr	r1, [pc, #32]	; (800f8b4 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 800f892:	429d      	cmp	r5, r3
 800f894:	bf18      	it	ne
 800f896:	4601      	movne	r1, r0
 800f898:	4638      	mov	r0, r7
 800f89a:	f7ff fec3 	bl	800f624 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f89e:	4410      	add	r0, r2
 800f8a0:	1b00      	subs	r0, r0, r4
 800f8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8a6:	bf00      	nop
 800f8a8:	20008878 	andcs	r8, r0, r8, ror r8
 800f8ac:	01000c00 	tsteq	r0, r0, lsl #24
 800f8b0:	08017199 	stmdaeq	r1, {r0, r3, r4, r7, r8, ip, sp, lr}
 800f8b4:	0801717c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, ip, sp, lr}

0800f8b8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 800f8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ba:	460f      	mov	r7, r1
 800f8bc:	2301      	movs	r3, #1
 800f8be:	490f      	ldr	r1, [pc, #60]	; (800f8fc <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 800f8c0:	4606      	mov	r6, r0
 800f8c2:	f7ff feaf 	bl	800f624 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f8c6:	4b0e      	ldr	r3, [pc, #56]	; (800f900 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 800f8c8:	490e      	ldr	r1, [pc, #56]	; (800f904 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 800f8ca:	5013      	str	r3, [r2, r0]
 800f8cc:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f8d0:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800f8d4:	684f      	ldr	r7, [r1, #4]
 800f8d6:	1815      	adds	r5, r2, r0
 800f8d8:	606b      	str	r3, [r5, #4]
 800f8da:	4638      	mov	r0, r7
 800f8dc:	4614      	mov	r4, r2
 800f8de:	f7ff fdfd 	bl	800f4dc <strlen>
 800f8e2:	1c83      	adds	r3, r0, #2
 800f8e4:	ba5b      	rev16	r3, r3
 800f8e6:	812b      	strh	r3, [r5, #8]
 800f8e8:	f105 020a 	add.w	r2, r5, #10
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	4639      	mov	r1, r7
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	f7ff fe97 	bl	800f624 <MDNS::WriteDnsName(char const*, char*, bool)>
 800f8f6:	4410      	add	r0, r2
 800f8f8:	1b00      	subs	r0, r0, r4
 800f8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8fc:	08017187 	stmdaeq	r1, {r0, r1, r2, r7, r8, ip, sp, lr}
 800f900:	01000c00 	tsteq	r0, r0, lsl #24
 800f904:	20008878 	andcs	r8, r0, r8, ror r8

0800f908 <MDNS::CreateMDNSMessage(unsigned int)>:
 800f908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90a:	2384      	movs	r3, #132	; 0x84
 800f90c:	4d19      	ldr	r5, [pc, #100]	; (800f974 <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 800f90e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f912:	80eb      	strh	r3, [r5, #6]
 800f914:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f918:	f105 0410 	add.w	r4, r5, #16
 800f91c:	e9c5 2302 	strd	r2, r3, [r5, #8]
 800f920:	4622      	mov	r2, r4
 800f922:	4606      	mov	r6, r0
 800f924:	460f      	mov	r7, r1
 800f926:	f7ff ff09 	bl	800f73c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 800f92a:	4404      	add	r4, r0
 800f92c:	4622      	mov	r2, r4
 800f92e:	4639      	mov	r1, r7
 800f930:	4630      	mov	r0, r6
 800f932:	f7ff ff47 	bl	800f7c4 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 800f936:	4404      	add	r4, r0
 800f938:	4622      	mov	r2, r4
 800f93a:	4639      	mov	r1, r7
 800f93c:	4630      	mov	r0, r6
 800f93e:	f7ff ffbb 	bl	800f8b8 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 800f942:	4404      	add	r4, r0
 800f944:	4622      	mov	r2, r4
 800f946:	4639      	mov	r1, r7
 800f948:	4630      	mov	r0, r6
 800f94a:	f7ff ff79 	bl	800f840 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 800f94e:	4a0a      	ldr	r2, [pc, #40]	; (800f978 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 800f950:	4404      	add	r4, r0
 800f952:	f852 3b10 	ldr.w	r3, [r2], #16
 800f956:	1e60      	subs	r0, r4, #1
 800f958:	3b0c      	subs	r3, #12
 800f95a:	4619      	mov	r1, r3
 800f95c:	3901      	subs	r1, #1
 800f95e:	d204      	bcs.n	800f96a <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 800f960:	441c      	add	r4, r3
 800f962:	4b06      	ldr	r3, [pc, #24]	; (800f97c <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 800f964:	1ae4      	subs	r4, r4, r3
 800f966:	602c      	str	r4, [r5, #0]
 800f968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f96a:	f812 6b01 	ldrb.w	r6, [r2], #1
 800f96e:	f800 6f01 	strb.w	r6, [r0, #1]!
 800f972:	e7f3      	b.n	800f95c <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 800f974:	2000889c 	mulcs	r0, ip, r8
 800f978:	20008674 	andcs	r8, r0, r4, ror r6
 800f97c:	200088a0 	andcs	r8, r0, r0, lsr #17

0800f980 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f984:	4d40      	ldr	r5, [pc, #256]	; (800fa88 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 800f986:	b085      	sub	sp, #20
 800f988:	682c      	ldr	r4, [r5, #0]
 800f98a:	4680      	mov	r8, r0
 800f98c:	460f      	mov	r7, r1
 800f98e:	4616      	mov	r6, r2
 800f990:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 800f994:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800f998:	b11c      	cbz	r4, 800f9a2 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 800f99a:	692a      	ldr	r2, [r5, #16]
 800f99c:	2a00      	cmp	r2, #0
 800f99e:	d16e      	bne.n	800fa7e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 800f9a0:	2401      	movs	r4, #1
 800f9a2:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800f9a6:	ea4f 1904 	mov.w	r9, r4, lsl #4
 800f9aa:	8193      	strh	r3, [r2, #12]
 800f9ac:	f882 b00e 	strb.w	fp, [r2, #14]
 800f9b0:	2f00      	cmp	r7, #0
 800f9b2:	d154      	bne.n	800fa5e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 800f9b4:	4b35      	ldr	r3, [pc, #212]	; (800fa8c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 800f9b6:	6818      	ldr	r0, [r3, #0]
 800f9b8:	3020      	adds	r0, #32
 800f9ba:	f7ff fd8f 	bl	800f4dc <strlen>
 800f9be:	4607      	mov	r7, r0
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	f7ff fd8b 	bl	800f4dc <strlen>
 800f9c6:	4438      	add	r0, r7
 800f9c8:	3001      	adds	r0, #1
 800f9ca:	f003 fb57 	bl	801307c <operator new[](unsigned int)>
 800f9ce:	4b2f      	ldr	r3, [pc, #188]	; (800fa8c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 800f9d0:	f845 0009 	str.w	r0, [r5, r9]
 800f9d4:	6819      	ldr	r1, [r3, #0]
 800f9d6:	3120      	adds	r1, #32
 800f9d8:	f7ff fd95 	bl	800f506 <strcpy.isra.0>
 800f9dc:	f855 0009 	ldr.w	r0, [r5, r9]
 800f9e0:	4631      	mov	r1, r6
 800f9e2:	f7ff fd98 	bl	800f516 <strcat.isra.0>
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	f7ff fe0d 	bl	800f608 <MDNS::FindFirstDotFromRight(char const*) const>
 800f9ee:	eb05 0709 	add.w	r7, r5, r9
 800f9f2:	4605      	mov	r5, r0
 800f9f4:	f7ff fd72 	bl	800f4dc <strlen>
 800f9f8:	300d      	adds	r0, #13
 800f9fa:	f003 fb3f 	bl	801307c <operator new[](unsigned int)>
 800f9fe:	4629      	mov	r1, r5
 800fa00:	6078      	str	r0, [r7, #4]
 800fa02:	f7ff fd80 	bl	800f506 <strcpy.isra.0>
 800fa06:	4922      	ldr	r1, [pc, #136]	; (800fa90 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7ff fd84 	bl	800f516 <strcat.isra.0>
 800fa0e:	4921      	ldr	r1, [pc, #132]	; (800fa94 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 800fa10:	4b21      	ldr	r3, [pc, #132]	; (800fa98 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f1bb 0f01 	cmp.w	fp, #1
 800fa18:	bf18      	it	ne
 800fa1a:	4619      	movne	r1, r3
 800fa1c:	f7ff fd7b 	bl	800f516 <strcat.isra.0>
 800fa20:	f1ba 0f00 	cmp.w	sl, #0
 800fa24:	d009      	beq.n	800fa3a <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 800fa26:	4650      	mov	r0, sl
 800fa28:	f7ff fd58 	bl	800f4dc <strlen>
 800fa2c:	3001      	adds	r0, #1
 800fa2e:	f003 fb25 	bl	801307c <operator new[](unsigned int)>
 800fa32:	4651      	mov	r1, sl
 800fa34:	60b8      	str	r0, [r7, #8]
 800fa36:	f7ff fd66 	bl	800f506 <strcpy.isra.0>
 800fa3a:	4621      	mov	r1, r4
 800fa3c:	4640      	mov	r0, r8
 800fa3e:	f7ff ff63 	bl	800f908 <MDNS::CreateMDNSMessage(unsigned int)>
 800fa42:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fa46:	4915      	ldr	r1, [pc, #84]	; (800fa9c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 800fa48:	4815      	ldr	r0, [pc, #84]	; (800faa0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 800fa4a:	f831 2b04 	ldrh.w	r2, [r1], #4
 800fa4e:	9300      	str	r3, [sp, #0]
 800fa50:	4b14      	ldr	r3, [pc, #80]	; (800faa4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 800fa52:	7800      	ldrb	r0, [r0, #0]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f7ff fc91 	bl	800f37c <udp_send>
 800fa5a:	2001      	movs	r0, #1
 800fa5c:	e010      	b.n	800fa80 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 800fa5e:	4638      	mov	r0, r7
 800fa60:	f7ff fd3c 	bl	800f4dc <strlen>
 800fa64:	9003      	str	r0, [sp, #12]
 800fa66:	4630      	mov	r0, r6
 800fa68:	f7ff fd38 	bl	800f4dc <strlen>
 800fa6c:	9b03      	ldr	r3, [sp, #12]
 800fa6e:	4418      	add	r0, r3
 800fa70:	3001      	adds	r0, #1
 800fa72:	f003 fb03 	bl	801307c <operator new[](unsigned int)>
 800fa76:	4639      	mov	r1, r7
 800fa78:	f845 0009 	str.w	r0, [r5, r9]
 800fa7c:	e7ac      	b.n	800f9d8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 800fa7e:	2000      	movs	r0, #0
 800fa80:	b005      	add	sp, #20
 800fa82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa86:	bf00      	nop
 800fa88:	20008878 	andcs	r8, r0, r8, ror r8
 800fa8c:	20008aa8 	andcs	r8, r0, r8, lsr #21
 800fa90:	08015cdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, sl, fp, ip, lr}
 800fa94:	0801717c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r8, ip, sp, lr}
 800fa98:	08017199 	stmdaeq	r1, {r0, r3, r4, r7, r8, ip, sp, lr}
 800fa9c:	2000889c 	mulcs	r0, ip, r8
 800faa0:	20000018 	andcs	r0, r0, r8, lsl r0
 800faa4:	20008670 	andcs	r8, r0, r0, ror r6

0800faa8 <MDNS::HandleRequest(unsigned short)>:
 800faa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	4605      	mov	r5, r0
 800faae:	2700      	movs	r7, #0
 800fab0:	f04f 080c 	mov.w	r8, #12
 800fab4:	b0c5      	sub	sp, #276	; 0x114
 800fab6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800fb78 <MDNS::HandleRequest(unsigned short)+0xd0>
 800faba:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800fb7c <MDNS::HandleRequest(unsigned short)+0xd4>
 800fabe:	9103      	str	r1, [sp, #12]
 800fac0:	9b03      	ldr	r3, [sp, #12]
 800fac2:	42bb      	cmp	r3, r7
 800fac4:	d802      	bhi.n	800facc <MDNS::HandleRequest(unsigned short)+0x24>
 800fac6:	b045      	add	sp, #276	; 0x114
 800fac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800facc:	f8da 1000 	ldr.w	r1, [sl]
 800fad0:	aa04      	add	r2, sp, #16
 800fad2:	4441      	add	r1, r8
 800fad4:	4628      	mov	r0, r5
 800fad6:	f7ff fd55 	bl	800f584 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 800fada:	f8da 2000 	ldr.w	r2, [sl]
 800fade:	4440      	add	r0, r8
 800fae0:	1813      	adds	r3, r2, r0
 800fae2:	885b      	ldrh	r3, [r3, #2]
 800fae4:	f100 0804 	add.w	r8, r0, #4
 800fae8:	ba5b      	rev16	r3, r3
 800faea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800faee:	2b01      	cmp	r3, #1
 800faf0:	d13d      	bne.n	800fb6e <MDNS::HandleRequest(unsigned short)+0xc6>
 800faf2:	5a14      	ldrh	r4, [r2, r0]
 800faf4:	4b22      	ldr	r3, [pc, #136]	; (800fb80 <MDNS::HandleRequest(unsigned short)+0xd8>)
 800faf6:	ba64      	rev16	r4, r4
 800faf8:	6818      	ldr	r0, [r3, #0]
 800fafa:	a904      	add	r1, sp, #16
 800fafc:	b2a4      	uxth	r4, r4
 800fafe:	f7ff fcf5 	bl	800f4ec <strcmp>
 800fb02:	b968      	cbnz	r0, 800fb20 <MDNS::HandleRequest(unsigned short)+0x78>
 800fb04:	2c01      	cmp	r4, #1
 800fb06:	d10b      	bne.n	800fb20 <MDNS::HandleRequest(unsigned short)+0x78>
 800fb08:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fb0c:	491d      	ldr	r1, [pc, #116]	; (800fb84 <MDNS::HandleRequest(unsigned short)+0xdc>)
 800fb0e:	481e      	ldr	r0, [pc, #120]	; (800fb88 <MDNS::HandleRequest(unsigned short)+0xe0>)
 800fb10:	f831 2b04 	ldrh.w	r2, [r1], #4
 800fb14:	9300      	str	r3, [sp, #0]
 800fb16:	4b1d      	ldr	r3, [pc, #116]	; (800fb8c <MDNS::HandleRequest(unsigned short)+0xe4>)
 800fb18:	7800      	ldrb	r0, [r0, #0]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f7ff fc2e 	bl	800f37c <udp_send>
 800fb20:	481b      	ldr	r0, [pc, #108]	; (800fb90 <MDNS::HandleRequest(unsigned short)+0xe8>)
 800fb22:	a904      	add	r1, sp, #16
 800fb24:	f7ff fce2 	bl	800f4ec <strcmp>
 800fb28:	f04f 0900 	mov.w	r9, #0
 800fb2c:	4e19      	ldr	r6, [pc, #100]	; (800fb94 <MDNS::HandleRequest(unsigned short)+0xec>)
 800fb2e:	9002      	str	r0, [sp, #8]
 800fb30:	6833      	ldr	r3, [r6, #0]
 800fb32:	b1c3      	cbz	r3, 800fb66 <MDNS::HandleRequest(unsigned short)+0xbe>
 800fb34:	9b02      	ldr	r3, [sp, #8]
 800fb36:	b123      	cbz	r3, 800fb42 <MDNS::HandleRequest(unsigned short)+0x9a>
 800fb38:	6870      	ldr	r0, [r6, #4]
 800fb3a:	a904      	add	r1, sp, #16
 800fb3c:	f7ff fcd6 	bl	800f4ec <strcmp>
 800fb40:	b988      	cbnz	r0, 800fb66 <MDNS::HandleRequest(unsigned short)+0xbe>
 800fb42:	2c0c      	cmp	r4, #12
 800fb44:	d10f      	bne.n	800fb66 <MDNS::HandleRequest(unsigned short)+0xbe>
 800fb46:	4649      	mov	r1, r9
 800fb48:	4628      	mov	r0, r5
 800fb4a:	f7ff fedd 	bl	800f908 <MDNS::CreateMDNSMessage(unsigned int)>
 800fb4e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fb52:	480d      	ldr	r0, [pc, #52]	; (800fb88 <MDNS::HandleRequest(unsigned short)+0xe0>)
 800fb54:	9300      	str	r3, [sp, #0]
 800fb56:	4b0d      	ldr	r3, [pc, #52]	; (800fb8c <MDNS::HandleRequest(unsigned short)+0xe4>)
 800fb58:	f8bb 2000 	ldrh.w	r2, [fp]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	490e      	ldr	r1, [pc, #56]	; (800fb98 <MDNS::HandleRequest(unsigned short)+0xf0>)
 800fb60:	7800      	ldrb	r0, [r0, #0]
 800fb62:	f7ff fc0b 	bl	800f37c <udp_send>
 800fb66:	3610      	adds	r6, #16
 800fb68:	f1b9 0f00 	cmp.w	r9, #0
 800fb6c:	d001      	beq.n	800fb72 <MDNS::HandleRequest(unsigned short)+0xca>
 800fb6e:	3701      	adds	r7, #1
 800fb70:	e7a6      	b.n	800fac0 <MDNS::HandleRequest(unsigned short)+0x18>
 800fb72:	f04f 0901 	mov.w	r9, #1
 800fb76:	e7db      	b.n	800fb30 <MDNS::HandleRequest(unsigned short)+0x88>
 800fb78:	20008aa4 	andcs	r8, r0, r4, lsr #21
 800fb7c:	2000889c 	mulcs	r0, ip, r8
 800fb80:	20008aa0 	andcs	r8, r0, r0, lsr #21
 800fb84:	20008674 	andcs	r8, r0, r4, ror r6
 800fb88:	20000018 	andcs	r0, r0, r8, lsl r0
 800fb8c:	20008670 	andcs	r8, r0, r0, ror r6
 800fb90:	08017187 	stmdaeq	r1, {r0, r1, r2, r7, r8, ip, sp, lr}
 800fb94:	20008878 	andcs	r8, r0, r8, ror r8
 800fb98:	200088a0 	andcs	r8, r0, r0, lsr #17

0800fb9c <MDNS::Parse()>:
 800fb9c:	4b08      	ldr	r3, [pc, #32]	; (800fbc0 <MDNS::Parse()+0x24>)
 800fb9e:	681a      	ldr	r2, [r3, #0]
 800fba0:	8853      	ldrh	r3, [r2, #2]
 800fba2:	ba5b      	rev16	r3, r3
 800fba4:	b299      	uxth	r1, r3
 800fba6:	041b      	lsls	r3, r3, #16
 800fba8:	d408      	bmi.n	800fbbc <MDNS::Parse()+0x20>
 800fbaa:	0b89      	lsrs	r1, r1, #14
 800fbac:	d106      	bne.n	800fbbc <MDNS::Parse()+0x20>
 800fbae:	8891      	ldrh	r1, [r2, #4]
 800fbb0:	b28b      	uxth	r3, r1
 800fbb2:	b11b      	cbz	r3, 800fbbc <MDNS::Parse()+0x20>
 800fbb4:	ba49      	rev16	r1, r1
 800fbb6:	b289      	uxth	r1, r1
 800fbb8:	f7ff bf76 	b.w	800faa8 <MDNS::HandleRequest(unsigned short)>
 800fbbc:	4770      	bx	lr
 800fbbe:	bf00      	nop
 800fbc0:	20008aa4 	andcs	r8, r0, r4, lsr #21

0800fbc4 <MDNS::Run()>:
 800fbc4:	b538      	push	{r3, r4, r5, lr}
 800fbc6:	4d0c      	ldr	r5, [pc, #48]	; (800fbf8 <MDNS::Run()+0x34>)
 800fbc8:	4604      	mov	r4, r0
 800fbca:	480c      	ldr	r0, [pc, #48]	; (800fbfc <MDNS::Run()+0x38>)
 800fbcc:	462b      	mov	r3, r5
 800fbce:	4a0c      	ldr	r2, [pc, #48]	; (800fc00 <MDNS::Run()+0x3c>)
 800fbd0:	490c      	ldr	r1, [pc, #48]	; (800fc04 <MDNS::Run()+0x40>)
 800fbd2:	7800      	ldrb	r0, [r0, #0]
 800fbd4:	f7ff fbac 	bl	800f330 <udp_recv2>
 800fbd8:	4b0b      	ldr	r3, [pc, #44]	; (800fc08 <MDNS::Run()+0x44>)
 800fbda:	882a      	ldrh	r2, [r5, #0]
 800fbdc:	8018      	strh	r0, [r3, #0]
 800fbde:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d106      	bne.n	800fbf4 <MDNS::Run()+0x30>
 800fbe6:	280c      	cmp	r0, #12
 800fbe8:	d904      	bls.n	800fbf4 <MDNS::Run()+0x30>
 800fbea:	4620      	mov	r0, r4
 800fbec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbf0:	f7ff bfd4 	b.w	800fb9c <MDNS::Parse()>
 800fbf4:	bd38      	pop	{r3, r4, r5, pc}
 800fbf6:	bf00      	nop
 800fbf8:	2000866c 	andcs	r8, r0, ip, ror #12
 800fbfc:	20000018 	andcs	r0, r0, r8, lsl r0
 800fc00:	20008668 	andcs	r8, r0, r8, ror #12
 800fc04:	20008aa4 	andcs	r8, r0, r4, lsr #21
 800fc08:	20008898 	mulcs	r0, r8, r8

0800fc0c <MDNS::Print()>:
 800fc0c:	b510      	push	{r4, lr}
 800fc0e:	4816      	ldr	r0, [pc, #88]	; (800fc68 <MDNS::Print()+0x5c>)
 800fc10:	f003 fcfa 	bl	8013608 <printf>
 800fc14:	4b15      	ldr	r3, [pc, #84]	; (800fc6c <MDNS::Print()+0x60>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	d104      	bne.n	800fc26 <MDNS::Print()+0x1a>
 800fc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc20:	4813      	ldr	r0, [pc, #76]	; (800fc70 <MDNS::Print()+0x64>)
 800fc22:	f003 bcf1 	b.w	8013608 <printf>
 800fc26:	4b13      	ldr	r3, [pc, #76]	; (800fc74 <MDNS::Print()+0x68>)
 800fc28:	4c13      	ldr	r4, [pc, #76]	; (800fc78 <MDNS::Print()+0x6c>)
 800fc2a:	6819      	ldr	r1, [r3, #0]
 800fc2c:	4813      	ldr	r0, [pc, #76]	; (800fc7c <MDNS::Print()+0x70>)
 800fc2e:	f003 fceb 	bl	8013608 <printf>
 800fc32:	6823      	ldr	r3, [r4, #0]
 800fc34:	b14b      	cbz	r3, 800fc4a <MDNS::Print()+0x3e>
 800fc36:	4a12      	ldr	r2, [pc, #72]	; (800fc80 <MDNS::Print()+0x74>)
 800fc38:	68a3      	ldr	r3, [r4, #8]
 800fc3a:	6861      	ldr	r1, [r4, #4]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	bf08      	it	eq
 800fc40:	4613      	moveq	r3, r2
 800fc42:	4810      	ldr	r0, [pc, #64]	; (800fc84 <MDNS::Print()+0x78>)
 800fc44:	89a2      	ldrh	r2, [r4, #12]
 800fc46:	f003 fcdf 	bl	8013608 <printf>
 800fc4a:	6923      	ldr	r3, [r4, #16]
 800fc4c:	b15b      	cbz	r3, 800fc66 <MDNS::Print()+0x5a>
 800fc4e:	69a3      	ldr	r3, [r4, #24]
 800fc50:	4a0b      	ldr	r2, [pc, #44]	; (800fc80 <MDNS::Print()+0x74>)
 800fc52:	6961      	ldr	r1, [r4, #20]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	bf08      	it	eq
 800fc58:	4613      	moveq	r3, r2
 800fc5a:	480a      	ldr	r0, [pc, #40]	; (800fc84 <MDNS::Print()+0x78>)
 800fc5c:	8ba2      	ldrh	r2, [r4, #28]
 800fc5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc62:	f003 bcd1 	b.w	8013608 <printf>
 800fc66:	bd10      	pop	{r4, pc}
 800fc68:	080171a4 	stmdaeq	r1, {r2, r5, r7, r8, ip, sp, lr}
 800fc6c:	20000018 	andcs	r0, r0, r8, lsl r0
 800fc70:	080171aa 	stmdaeq	r1, {r1, r3, r5, r7, r8, ip, sp, lr}
 800fc74:	20008aa0 	andcs	r8, r0, r0, lsr #21
 800fc78:	20008878 	andcs	r8, r0, r8, ror r8
 800fc7c:	080171b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, ip, sp, lr}
 800fc80:	08016021 	stmdaeq	r1, {r0, r5, sp, lr}
 800fc84:	080171c4 	stmdaeq	r1, {r2, r6, r7, r8, ip, sp, lr}

0800fc88 <strncpy.constprop.0.isra.0>:
 800fc88:	233f      	movs	r3, #63	; 0x3f
 800fc8a:	3901      	subs	r1, #1
 800fc8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fc90:	b92a      	cbnz	r2, 800fc9e <strncpy.constprop.0.isra.0+0x16>
 800fc92:	4403      	add	r3, r0
 800fc94:	4298      	cmp	r0, r3
 800fc96:	d006      	beq.n	800fca6 <strncpy.constprop.0.isra.0+0x1e>
 800fc98:	f800 2b01 	strb.w	r2, [r0], #1
 800fc9c:	e7fa      	b.n	800fc94 <strncpy.constprop.0.isra.0+0xc>
 800fc9e:	3b01      	subs	r3, #1
 800fca0:	f800 2b01 	strb.w	r2, [r0], #1
 800fca4:	d1f2      	bne.n	800fc8c <strncpy.constprop.0.isra.0+0x4>
 800fca6:	4770      	bx	lr

0800fca8 <Network::Network()>:
 800fca8:	4a11      	ldr	r2, [pc, #68]	; (800fcf0 <Network::Network()+0x48>)
 800fcaa:	2300      	movs	r3, #0
 800fcac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800fcb0:	6010      	str	r0, [r2, #0]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	e9c0 2100 	strd	r2, r1, [r0]
 800fcb8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	e9c0 332e 	strd	r3, r3, [r0, #184]	; 0xb8
 800fcc2:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
 800fcc6:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800fcca:	490a      	ldr	r1, [pc, #40]	; (800fcf4 <Network::Network()+0x4c>)
 800fccc:	6102      	str	r2, [r0, #16]
 800fcce:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800fcd2:	61c3      	str	r3, [r0, #28]
 800fcd4:	f880 3020 	strb.w	r3, [r0, #32]
 800fcd8:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800fcdc:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
 800fce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fce4:	f802 3f01 	strb.w	r3, [r2, #1]!
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d1f9      	bne.n	800fce0 <Network::Network()+0x38>
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	20008aa8 	andcs	r8, r0, r8, lsr #21
 800fcf4:	080171cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, ip, sp, lr}

0800fcf8 <Network::Shutdown()>:
 800fcf8:	b508      	push	{r3, lr}
 800fcfa:	f001 fcd9 	bl	80116b0 <network::display_emac_shutdown()>
 800fcfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fd02:	f7f7 ba75 	b.w	80071f0 <net_shutdown>

0800fd06 <Network::Begin(unsigned short)>:
 800fd06:	4608      	mov	r0, r1
 800fd08:	f7ff baa2 	b.w	800f250 <udp_bind>

0800fd0c <Network::End(unsigned short)>:
 800fd0c:	4608      	mov	r0, r1
 800fd0e:	f7ff bab9 	b.w	800f284 <udp_unbind>

0800fd12 <Network::MacAddressCopyTo(unsigned char*)>:
 800fd12:	f100 039f 	add.w	r3, r0, #159	; 0x9f
 800fd16:	3901      	subs	r1, #1
 800fd18:	30a5      	adds	r0, #165	; 0xa5
 800fd1a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800fd1e:	4283      	cmp	r3, r0
 800fd20:	f801 2f01 	strb.w	r2, [r1, #1]!
 800fd24:	d1f9      	bne.n	800fd1a <Network::MacAddressCopyTo(unsigned char*)+0x8>
 800fd26:	4770      	bx	lr

0800fd28 <Network::JoinGroup(int, unsigned int)>:
 800fd28:	4610      	mov	r0, r2
 800fd2a:	f000 bf85 	b.w	8010c38 <igmp_join>

0800fd2e <Network::LeaveGroup(int, unsigned int)>:
 800fd2e:	4610      	mov	r0, r2
 800fd30:	f000 bfae 	b.w	8010c90 <igmp_leave>

0800fd34 <Network::SetDefaultIp()>:
 800fd34:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 800fd38:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 800fd3c:	041b      	lsls	r3, r3, #16
 800fd3e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fd42:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 800fd46:	3302      	adds	r3, #2
 800fd48:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800fd4c:	22ff      	movs	r2, #255	; 0xff
 800fd4e:	6143      	str	r3, [r0, #20]
 800fd50:	e9c0 3206 	strd	r3, r2, [r0, #24]
 800fd54:	4770      	bx	lr
	...

0800fd58 <Network::Init(NetworkParamsStore*)>:
 800fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5c:	b0a5      	sub	sp, #148	; 0x94
 800fd5e:	4604      	mov	r4, r0
 800fd60:	a80b      	add	r0, sp, #44	; 0x2c
 800fd62:	f000 fa51 	bl	8010208 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800fd66:	a80b      	add	r0, sp, #44	; 0x2c
 800fd68:	f000 fa5a 	bl	8010220 <NetworkParams::Load()>
 800fd6c:	b110      	cbz	r0, 800fd74 <Network::Init(NetworkParamsStore*)+0x1c>
 800fd6e:	a80b      	add	r0, sp, #44	; 0x2c
 800fd70:	f000 fc33 	bl	80105da <NetworkParams::Dump()>
 800fd74:	f001 fc84 	bl	8011680 <network::display_emac_start()>
 800fd78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd7a:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 800fd7e:	9308      	str	r3, [sp, #32]
 800fd80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd82:	4628      	mov	r0, r5
 800fd84:	9309      	str	r3, [sp, #36]	; 0x24
 800fd86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fd88:	f104 0620 	add.w	r6, r4, #32
 800fd8c:	930a      	str	r3, [sp, #40]	; 0x28
 800fd8e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800fd92:	7163      	strb	r3, [r4, #5]
 800fd94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd96:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 800fd9a:	bf18      	it	ne
 800fd9c:	f8dd 2085 	ldrne.w	r2, [sp, #133]	; 0x85
 800fda0:	061b      	lsls	r3, r3, #24
 800fda2:	bf54      	ite	pl
 800fda4:	2300      	movpl	r3, #0
 800fda6:	f8dd 3089 	ldrmi.w	r3, [sp, #137]	; 0x89
 800fdaa:	60e2      	str	r2, [r4, #12]
 800fdac:	6123      	str	r3, [r4, #16]
 800fdae:	f005 f9a9 	bl	8015104 <emac_start(unsigned char*)>
 800fdb2:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	f040 80bf 	bne.w	800ff3a <Network::Init(NetworkParamsStore*)+0x1e2>
 800fdbc:	497e      	ldr	r1, [pc, #504]	; (800ffb8 <Network::Init(NetworkParamsStore*)+0x260>)
 800fdbe:	f104 001f 	add.w	r0, r4, #31
 800fdc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdc6:	1c5f      	adds	r7, r3, #1
 800fdc8:	2a00      	cmp	r2, #0
 800fdca:	f040 80b2 	bne.w	800ff32 <Network::Init(NetworkParamsStore*)+0x1da>
 800fdce:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
 800fdd2:	18e1      	adds	r1, r4, r3
 800fdd4:	0910      	lsrs	r0, r2, #4
 800fdd6:	2a9f      	cmp	r2, #159	; 0x9f
 800fdd8:	f002 020f 	and.w	r2, r2, #15
 800fddc:	bf94      	ite	ls
 800fdde:	3030      	addls	r0, #48	; 0x30
 800fde0:	3037      	addhi	r0, #55	; 0x37
 800fde2:	2a09      	cmp	r2, #9
 800fde4:	bf94      	ite	ls
 800fde6:	3230      	addls	r2, #48	; 0x30
 800fde8:	3237      	addhi	r2, #55	; 0x37
 800fdea:	4427      	add	r7, r4
 800fdec:	f881 0020 	strb.w	r0, [r1, #32]
 800fdf0:	f887 2020 	strb.w	r2, [r7, #32]
 800fdf4:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 800fdf8:	f103 0e02 	add.w	lr, r3, #2
 800fdfc:	0910      	lsrs	r0, r2, #4
 800fdfe:	2a9f      	cmp	r2, #159	; 0x9f
 800fe00:	f002 020f 	and.w	r2, r2, #15
 800fe04:	bf94      	ite	ls
 800fe06:	3030      	addls	r0, #48	; 0x30
 800fe08:	3037      	addhi	r0, #55	; 0x37
 800fe0a:	f103 0c03 	add.w	ip, r3, #3
 800fe0e:	2a09      	cmp	r2, #9
 800fe10:	eb04 070e 	add.w	r7, r4, lr
 800fe14:	f887 0020 	strb.w	r0, [r7, #32]
 800fe18:	bf94      	ite	ls
 800fe1a:	3230      	addls	r2, #48	; 0x30
 800fe1c:	3237      	addhi	r2, #55	; 0x37
 800fe1e:	eb04 000c 	add.w	r0, r4, ip
 800fe22:	f880 2020 	strb.w	r2, [r0, #32]
 800fe26:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 800fe2a:	1d1f      	adds	r7, r3, #4
 800fe2c:	0910      	lsrs	r0, r2, #4
 800fe2e:	2a9f      	cmp	r2, #159	; 0x9f
 800fe30:	f002 020f 	and.w	r2, r2, #15
 800fe34:	bf94      	ite	ls
 800fe36:	3030      	addls	r0, #48	; 0x30
 800fe38:	3037      	addhi	r0, #55	; 0x37
 800fe3a:	3305      	adds	r3, #5
 800fe3c:	2a09      	cmp	r2, #9
 800fe3e:	4423      	add	r3, r4
 800fe40:	4427      	add	r7, r4
 800fe42:	bf94      	ite	ls
 800fe44:	3230      	addls	r2, #48	; 0x30
 800fe46:	3237      	addhi	r2, #55	; 0x37
 800fe48:	f887 0020 	strb.w	r0, [r7, #32]
 800fe4c:	f883 2020 	strb.w	r2, [r3, #32]
 800fe50:	2300      	movs	r3, #0
 800fe52:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 800fe56:	f000 ff81 	bl	8010d5c <net::link_register_read()>
 800fe5a:	7963      	ldrb	r3, [r4, #5]
 800fe5c:	6020      	str	r0, [r4, #0]
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	f040 8095 	bne.w	800ff8e <Network::Init(NetworkParamsStore*)+0x236>
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f040 80a3 	bne.w	800ffb0 <Network::Init(NetworkParamsStore*)+0x258>
 800fe6a:	9b08      	ldr	r3, [sp, #32]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d16d      	bne.n	800ff4c <Network::Init(NetworkParamsStore*)+0x1f4>
 800fe70:	4620      	mov	r0, r4
 800fe72:	f7ff ff5f 	bl	800fd34 <Network::SetDefaultIp()>
 800fe76:	6963      	ldr	r3, [r4, #20]
 800fe78:	69e2      	ldr	r2, [r4, #28]
 800fe7a:	9308      	str	r3, [sp, #32]
 800fe7c:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 800fe80:	f104 0805 	add.w	r8, r4, #5
 800fe84:	f104 0907 	add.w	r9, r4, #7
 800fe88:	4643      	mov	r3, r8
 800fe8a:	4632      	mov	r2, r6
 800fe8c:	4628      	mov	r0, r5
 800fe8e:	f8cd 9000 	str.w	r9, [sp]
 800fe92:	a908      	add	r1, sp, #32
 800fe94:	f7f7 f95c 	bl	8007150 <net_init>
 800fe98:	79e3      	ldrb	r3, [r4, #7]
 800fe9a:	b113      	cbz	r3, 800fea2 <Network::Init(NetworkParamsStore*)+0x14a>
 800fe9c:	2004      	movs	r0, #4
 800fe9e:	f001 fc0d 	bl	80116bc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 800fea2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800fea6:	f89d a08d 	ldrb.w	sl, [sp, #141]	; 0x8d
 800feaa:	9304      	str	r3, [sp, #16]
 800feac:	233c      	movs	r3, #60	; 0x3c
 800feae:	fb03 f30a 	mul.w	r3, r3, sl
 800feb2:	4f42      	ldr	r7, [pc, #264]	; (800ffbc <Network::Init(NetworkParamsStore*)+0x264>)
 800feb4:	f8df b108 	ldr.w	fp, [pc, #264]	; 800ffc0 <Network::Init(NetworkParamsStore*)+0x268>
 800feb8:	9303      	str	r3, [sp, #12]
 800feba:	79e3      	ldrb	r3, [r4, #7]
 800febc:	b373      	cbz	r3, 800ff1c <Network::Init(NetworkParamsStore*)+0x1c4>
 800febe:	f1ba 0f00 	cmp.w	sl, #0
 800fec2:	d02b      	beq.n	800ff1c <Network::Init(NetworkParamsStore*)+0x1c4>
 800fec4:	9b04      	ldr	r3, [sp, #16]
 800fec6:	b34b      	cbz	r3, 800ff1c <Network::Init(NetworkParamsStore*)+0x1c4>
 800fec8:	2104      	movs	r1, #4
 800feca:	6838      	ldr	r0, [r7, #0]
 800fecc:	f002 fff2 	bl	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 800fed0:	2003      	movs	r0, #3
 800fed2:	f001 fbf3 	bl	80116bc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 800fed6:	2000      	movs	r0, #0
 800fed8:	f003 fccc 	bl	8013874 <time>
 800fedc:	9005      	str	r0, [sp, #20]
 800fede:	2000      	movs	r0, #0
 800fee0:	f003 fcc8 	bl	8013874 <time>
 800fee4:	9b05      	ldr	r3, [sp, #20]
 800fee6:	4937      	ldr	r1, [pc, #220]	; (800ffc4 <Network::Init(NetworkParamsStore*)+0x26c>)
 800fee8:	1ac0      	subs	r0, r0, r3
 800feea:	9b03      	ldr	r3, [sp, #12]
 800feec:	4298      	cmp	r0, r3
 800feee:	db35      	blt.n	800ff5c <Network::Init(NetworkParamsStore*)+0x204>
 800fef0:	2001      	movs	r0, #1
 800fef2:	f001 fbe3 	bl	80116bc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 800fef6:	2101      	movs	r1, #1
 800fef8:	6838      	ldr	r0, [r7, #0]
 800fefa:	f002 ffdb 	bl	8012eb4 <LedBlink::SetMode(ledblink::Mode)>
 800fefe:	2301      	movs	r3, #1
 800ff00:	7163      	strb	r3, [r4, #5]
 800ff02:	2300      	movs	r3, #0
 800ff04:	4632      	mov	r2, r6
 800ff06:	71e3      	strb	r3, [r4, #7]
 800ff08:	4628      	mov	r0, r5
 800ff0a:	4643      	mov	r3, r8
 800ff0c:	f8cd 9000 	str.w	r9, [sp]
 800ff10:	a908      	add	r1, sp, #32
 800ff12:	f7f7 f91d 	bl	8007150 <net_init>
 800ff16:	7963      	ldrb	r3, [r4, #5]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d0ce      	beq.n	800feba <Network::Init(NetworkParamsStore*)+0x162>
 800ff1c:	9b08      	ldr	r3, [sp, #32]
 800ff1e:	6163      	str	r3, [r4, #20]
 800ff20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff22:	61e3      	str	r3, [r4, #28]
 800ff24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff26:	61a3      	str	r3, [r4, #24]
 800ff28:	f001 fbb0 	bl	801168c <network::display_ip()>
 800ff2c:	b025      	add	sp, #148	; 0x94
 800ff2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff32:	463b      	mov	r3, r7
 800ff34:	f800 2f01 	strb.w	r2, [r0, #1]!
 800ff38:	e743      	b.n	800fdc2 <Network::Init(NetworkParamsStore*)+0x6a>
 800ff3a:	4630      	mov	r0, r6
 800ff3c:	f10d 0145 	add.w	r1, sp, #69	; 0x45
 800ff40:	f7ff fea2 	bl	800fc88 <strncpy.constprop.0.isra.0>
 800ff44:	2300      	movs	r3, #0
 800ff46:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 800ff4a:	e784      	b.n	800fe56 <Network::Init(NetworkParamsStore*)+0xfe>
 800ff4c:	69e1      	ldr	r1, [r4, #28]
 800ff4e:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800ff52:	4053      	eors	r3, r2
 800ff54:	420b      	tst	r3, r1
 800ff56:	bf18      	it	ne
 800ff58:	920a      	strne	r2, [sp, #40]	; 0x28
 800ff5a:	e791      	b.n	800fe80 <Network::Init(NetworkParamsStore*)+0x128>
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800ff62:	f1bc 0f00 	cmp.w	ip, #0
 800ff66:	d0ba      	beq.n	800fede <Network::Init(NetworkParamsStore*)+0x186>
 800ff68:	6808      	ldr	r0, [r1, #0]
 800ff6a:	695a      	ldr	r2, [r3, #20]
 800ff6c:	1a80      	subs	r0, r0, r2
 800ff6e:	4584      	cmp	ip, r0
 800ff70:	d8b5      	bhi.n	800fede <Network::Init(NetworkParamsStore*)+0x186>
 800ff72:	6808      	ldr	r0, [r1, #0]
 800ff74:	6158      	str	r0, [r3, #20]
 800ff76:	6918      	ldr	r0, [r3, #16]
 800ff78:	2801      	cmp	r0, #1
 800ff7a:	f080 0201 	eor.w	r2, r0, #1
 800ff7e:	611a      	str	r2, [r3, #16]
 800ff80:	bf16      	itet	ne
 800ff82:	2301      	movne	r3, #1
 800ff84:	f8cb 0014 	streq.w	r0, [fp, #20]
 800ff88:	f8cb 3010 	strne.w	r3, [fp, #16]
 800ff8c:	e7a7      	b.n	800fede <Network::Init(NetworkParamsStore*)+0x186>
 800ff8e:	b11b      	cbz	r3, 800ff98 <Network::Init(NetworkParamsStore*)+0x240>
 800ff90:	2300      	movs	r3, #0
 800ff92:	e9c4 3306 	strd	r3, r3, [r4, #24]
 800ff96:	9308      	str	r3, [sp, #32]
 800ff98:	2300      	movs	r3, #0
 800ff9a:	f88d 301f 	strb.w	r3, [sp, #31]
 800ff9e:	f10d 031f 	add.w	r3, sp, #31
 800ffa2:	4632      	mov	r2, r6
 800ffa4:	4628      	mov	r0, r5
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	a908      	add	r1, sp, #32
 800ffaa:	f7f7 f8d1 	bl	8007150 <net_init>
 800ffae:	e7b5      	b.n	800ff1c <Network::Init(NetworkParamsStore*)+0x1c4>
 800ffb0:	2001      	movs	r0, #1
 800ffb2:	f001 fb83 	bl	80116bc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 800ffb6:	e763      	b.n	800fe80 <Network::Init(NetworkParamsStore*)+0x128>
 800ffb8:	080171d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, ip, sp, lr}
 800ffbc:	2000a1c4 	andcs	sl, r0, r4, asr #3
 800ffc0:	40011000 	andmi	r1, r1, r0
 800ffc4:	2000a1e4 	andcs	sl, r0, r4, ror #3

0800ffc8 <Network::SetIp(unsigned int)>:
 800ffc8:	7943      	ldrb	r3, [r0, #5]
 800ffca:	b570      	push	{r4, r5, r6, lr}
 800ffcc:	4604      	mov	r4, r0
 800ffce:	460d      	mov	r5, r1
 800ffd0:	2600      	movs	r6, #0
 800ffd2:	b113      	cbz	r3, 800ffda <Network::SetIp(unsigned int)+0x12>
 800ffd4:	7146      	strb	r6, [r0, #5]
 800ffd6:	f7fe fefb 	bl	800edd0 <net_dhcp_release>
 800ffda:	71e6      	strb	r6, [r4, #7]
 800ffdc:	b95d      	cbnz	r5, 800fff6 <Network::SetIp(unsigned int)+0x2e>
 800ffde:	4620      	mov	r0, r4
 800ffe0:	f7ff fea8 	bl	800fd34 <Network::SetDefaultIp()>
 800ffe4:	6960      	ldr	r0, [r4, #20]
 800ffe6:	f7fe feaf 	bl	800ed48 <net_set_ip>
 800ffea:	f001 fb4f 	bl	801168c <network::display_ip()>
 800ffee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fff2:	f001 bb51 	b.w	8011698 <network::display_netmask()>
 800fff6:	4628      	mov	r0, r5
 800fff8:	f7fe fea6 	bl	800ed48 <net_set_ip>
 800fffc:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8010000:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010004:	2800      	cmp	r0, #0
 8010006:	d0f0      	beq.n	800ffea <Network::SetIp(unsigned int)+0x22>
 8010008:	6803      	ldr	r3, [r0, #0]
 801000a:	4629      	mov	r1, r5
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	4798      	blx	r3
 8010010:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8010014:	2100      	movs	r1, #0
 8010016:	6803      	ldr	r3, [r0, #0]
 8010018:	699b      	ldr	r3, [r3, #24]
 801001a:	4798      	blx	r3
 801001c:	e7e5      	b.n	800ffea <Network::SetIp(unsigned int)+0x22>

0801001e <Network::SetNetmask(unsigned int)>:
 801001e:	69c2      	ldr	r2, [r0, #28]
 8010020:	b508      	push	{r3, lr}
 8010022:	428a      	cmp	r2, r1
 8010024:	d00c      	beq.n	8010040 <Network::SetNetmask(unsigned int)+0x22>
 8010026:	61c1      	str	r1, [r0, #28]
 8010028:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 801002c:	b110      	cbz	r0, 8010034 <Network::SetNetmask(unsigned int)+0x16>
 801002e:	6803      	ldr	r3, [r0, #0]
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	4798      	blx	r3
 8010034:	f001 fb2a 	bl	801168c <network::display_ip()>
 8010038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801003c:	f001 bb2c 	b.w	8011698 <network::display_netmask()>
 8010040:	bd08      	pop	{r3, pc}

08010042 <Network::SetGatewayIp(unsigned int)>:
 8010042:	b538      	push	{r3, r4, r5, lr}
 8010044:	6983      	ldr	r3, [r0, #24]
 8010046:	4605      	mov	r5, r0
 8010048:	428b      	cmp	r3, r1
 801004a:	460c      	mov	r4, r1
 801004c:	d00d      	beq.n	801006a <Network::SetGatewayIp(unsigned int)+0x28>
 801004e:	4608      	mov	r0, r1
 8010050:	f7fe fe8a 	bl	800ed68 <net_set_gw>
 8010054:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8010058:	b118      	cbz	r0, 8010062 <Network::SetGatewayIp(unsigned int)+0x20>
 801005a:	6803      	ldr	r3, [r0, #0]
 801005c:	4621      	mov	r1, r4
 801005e:	691b      	ldr	r3, [r3, #16]
 8010060:	4798      	blx	r3
 8010062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010066:	f001 bb1d 	b.w	80116a4 <network::display_gateway()>
 801006a:	bd38      	pop	{r3, r4, r5, pc}

0801006c <Network::EnableDhcp()>:
 801006c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801006e:	4d21      	ldr	r5, [pc, #132]	; (80100f4 <Network::EnableDhcp()+0x88>)
 8010070:	4604      	mov	r4, r0
 8010072:	682b      	ldr	r3, [r5, #0]
 8010074:	781e      	ldrb	r6, [r3, #0]
 8010076:	b136      	cbz	r6, 8010086 <Network::EnableDhcp()+0x1a>
 8010078:	2200      	movs	r2, #0
 801007a:	2104      	movs	r1, #4
 801007c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010080:	701a      	strb	r2, [r3, #0]
 8010082:	f004 f99f 	bl	80143c4 <fwdgt_config>
 8010086:	2001      	movs	r0, #1
 8010088:	f001 fb18 	bl	80116bc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 801008c:	1de2      	adds	r2, r4, #7
 801008e:	f104 0120 	add.w	r1, r4, #32
 8010092:	a801      	add	r0, sp, #4
 8010094:	f7fe fe70 	bl	800ed78 <net_set_dhcp>
 8010098:	79e3      	ldrb	r3, [r4, #7]
 801009a:	7160      	strb	r0, [r4, #5]
 801009c:	b33b      	cbz	r3, 80100ee <Network::EnableDhcp()+0x82>
 801009e:	2004      	movs	r0, #4
 80100a0:	f001 fb0c 	bl	80116bc <network::display_dhcp_status(network::dhcp::ClientStatus)>
 80100a4:	b16e      	cbz	r6, 80100c2 <Network::EnableDhcp()+0x56>
 80100a6:	2102      	movs	r1, #2
 80100a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80100ac:	682d      	ldr	r5, [r5, #0]
 80100ae:	f004 f989 	bl	80143c4 <fwdgt_config>
 80100b2:	2801      	cmp	r0, #1
 80100b4:	bf0c      	ite	eq
 80100b6:	2301      	moveq	r3, #1
 80100b8:	2300      	movne	r3, #0
 80100ba:	702b      	strb	r3, [r5, #0]
 80100bc:	d101      	bne.n	80100c2 <Network::EnableDhcp()+0x56>
 80100be:	f004 f971 	bl	80143a4 <fwdgt_enable>
 80100c2:	9b01      	ldr	r3, [sp, #4]
 80100c4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80100c8:	6163      	str	r3, [r4, #20]
 80100ca:	9b02      	ldr	r3, [sp, #8]
 80100cc:	61e3      	str	r3, [r4, #28]
 80100ce:	9b03      	ldr	r3, [sp, #12]
 80100d0:	61a3      	str	r3, [r4, #24]
 80100d2:	b118      	cbz	r0, 80100dc <Network::EnableDhcp()+0x70>
 80100d4:	6803      	ldr	r3, [r0, #0]
 80100d6:	7961      	ldrb	r1, [r4, #5]
 80100d8:	699b      	ldr	r3, [r3, #24]
 80100da:	4798      	blx	r3
 80100dc:	f001 fad6 	bl	801168c <network::display_ip()>
 80100e0:	f001 fada 	bl	8011698 <network::display_netmask()>
 80100e4:	f001 fade 	bl	80116a4 <network::display_gateway()>
 80100e8:	7960      	ldrb	r0, [r4, #5]
 80100ea:	b004      	add	sp, #16
 80100ec:	bd70      	pop	{r4, r5, r6, pc}
 80100ee:	2002      	movs	r0, #2
 80100f0:	e7d6      	b.n	80100a0 <Network::EnableDhcp()+0x34>
 80100f2:	bf00      	nop
 80100f4:	2000a1c8 	andcs	sl, r0, r8, asr #3

080100f8 <Network::Print()>:
 80100f8:	b530      	push	{r4, r5, lr}
 80100fa:	4604      	mov	r4, r0
 80100fc:	b085      	sub	sp, #20
 80100fe:	4832      	ldr	r0, [pc, #200]	; (80101c8 <Network::Print()+0xd0>)
 8010100:	f003 fa82 	bl	8013608 <printf>
 8010104:	f104 0120 	add.w	r1, r4, #32
 8010108:	4830      	ldr	r0, [pc, #192]	; (80101cc <Network::Print()+0xd4>)
 801010a:	f003 fa7d 	bl	8013608 <printf>
 801010e:	68a1      	ldr	r1, [r4, #8]
 8010110:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
 8010114:	482e      	ldr	r0, [pc, #184]	; (80101d0 <Network::Print()+0xd8>)
 8010116:	f003 fa77 	bl	8013608 <printf>
 801011a:	69e0      	ldr	r0, [r4, #28]
 801011c:	f005 fa42 	bl	80155a4 <__popcountsi2>
 8010120:	6965      	ldr	r5, [r4, #20]
 8010122:	9001      	str	r0, [sp, #4]
 8010124:	0e2b      	lsrs	r3, r5, #24
 8010126:	9300      	str	r3, [sp, #0]
 8010128:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801012c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8010130:	b2e9      	uxtb	r1, r5
 8010132:	4828      	ldr	r0, [pc, #160]	; (80101d4 <Network::Print()+0xdc>)
 8010134:	f003 fa68 	bl	8013608 <printf>
 8010138:	69e1      	ldr	r1, [r4, #28]
 801013a:	4827      	ldr	r0, [pc, #156]	; (80101d8 <Network::Print()+0xe0>)
 801013c:	0e0b      	lsrs	r3, r1, #24
 801013e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010142:	9300      	str	r3, [sp, #0]
 8010144:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010148:	b2c9      	uxtb	r1, r1
 801014a:	f003 fa5d 	bl	8013608 <printf>
 801014e:	69a1      	ldr	r1, [r4, #24]
 8010150:	4822      	ldr	r0, [pc, #136]	; (80101dc <Network::Print()+0xe4>)
 8010152:	0e0b      	lsrs	r3, r1, #24
 8010154:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010158:	9300      	str	r3, [sp, #0]
 801015a:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801015e:	b2c9      	uxtb	r1, r1
 8010160:	f003 fa52 	bl	8013608 <printf>
 8010164:	69e3      	ldr	r3, [r4, #28]
 8010166:	6961      	ldr	r1, [r4, #20]
 8010168:	481d      	ldr	r0, [pc, #116]	; (80101e0 <Network::Print()+0xe8>)
 801016a:	ea61 0103 	orn	r1, r1, r3
 801016e:	0e0b      	lsrs	r3, r1, #24
 8010170:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801017a:	b2c9      	uxtb	r1, r1
 801017c:	f003 fa44 	bl	8013608 <printf>
 8010180:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8010184:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8010188:	9302      	str	r3, [sp, #8]
 801018a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 801018e:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
 8010192:	9301      	str	r3, [sp, #4]
 8010194:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 8010198:	4812      	ldr	r0, [pc, #72]	; (80101e4 <Network::Print()+0xec>)
 801019a:	9300      	str	r3, [sp, #0]
 801019c:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 80101a0:	f003 fa32 	bl	8013608 <printf>
 80101a4:	4b10      	ldr	r3, [pc, #64]	; (80101e8 <Network::Print()+0xf0>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	79da      	ldrb	r2, [r3, #7]
 80101aa:	b952      	cbnz	r2, 80101c2 <Network::Print()+0xca>
 80101ac:	795b      	ldrb	r3, [r3, #5]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	bf14      	ite	ne
 80101b2:	2144      	movne	r1, #68	; 0x44
 80101b4:	2153      	moveq	r1, #83	; 0x53
 80101b6:	480d      	ldr	r0, [pc, #52]	; (80101ec <Network::Print()+0xf4>)
 80101b8:	b005      	add	sp, #20
 80101ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101be:	f003 ba23 	b.w	8013608 <printf>
 80101c2:	215a      	movs	r1, #90	; 0x5a
 80101c4:	e7f7      	b.n	80101b6 <Network::Print()+0xbe>
 80101c6:	bf00      	nop
 80101c8:	080171e0 	stmdaeq	r1, {r5, r6, r7, r8, ip, sp, lr}
 80101cc:	080171e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, ip, sp, lr}
 80101d0:	080171fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, ip, sp, lr}
 80101d4:	0801720f 	stmdaeq	r1, {r0, r1, r2, r3, r9, ip, sp, lr}
 80101d8:	0801722c 	stmdaeq	r1, {r2, r3, r5, r9, ip, sp, lr}
 80101dc:	08017246 	stmdaeq	r1, {r1, r2, r6, r9, ip, sp, lr}
 80101e0:	08017260 	stmdaeq	r1, {r5, r6, r9, ip, sp, lr}
 80101e4:	0801727a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r9, ip, sp, lr}
 80101e8:	20008aa8 	andcs	r8, r0, r8, lsr #21
 80101ec:	080172a6 	stmdaeq	r1, {r1, r2, r5, r7, r9, ip, sp, lr}

080101f0 <Network::TcpBegin(unsigned short)>:
 80101f0:	4608      	mov	r0, r1
 80101f2:	f7fe bf67 	b.w	800f0c4 <tcp_begin>

080101f6 <Network::TcpRead(int, unsigned char const**)>:
 80101f6:	4608      	mov	r0, r1
 80101f8:	4611      	mov	r1, r2
 80101fa:	f7fe bfa1 	b.w	800f140 <tcp_read>

080101fe <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 80101fe:	4608      	mov	r0, r1
 8010200:	4611      	mov	r1, r2
 8010202:	461a      	mov	r2, r3
 8010204:	f7fe bf78 	b.w	800f0f8 <tcp_write>

08010208 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 8010208:	b510      	push	{r4, lr}
 801020a:	225e      	movs	r2, #94	; 0x5e
 801020c:	4604      	mov	r4, r0
 801020e:	f840 1b04 	str.w	r1, [r0], #4
 8010212:	2100      	movs	r1, #0
 8010214:	f002 ffde 	bl	80131d4 <memset>
 8010218:	2301      	movs	r3, #1
 801021a:	4620      	mov	r0, r4
 801021c:	7623      	strb	r3, [r4, #24]
 801021e:	bd10      	pop	{r4, pc}

08010220 <NetworkParams::Load()>:
 8010220:	b508      	push	{r3, lr}
 8010222:	2300      	movs	r3, #0
 8010224:	4601      	mov	r1, r0
 8010226:	6043      	str	r3, [r0, #4]
 8010228:	6800      	ldr	r0, [r0, #0]
 801022a:	b120      	cbz	r0, 8010236 <NetworkParams::Load()+0x16>
 801022c:	6803      	ldr	r3, [r0, #0]
 801022e:	3104      	adds	r1, #4
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	4798      	blx	r3
 8010234:	2001      	movs	r0, #1
 8010236:	bd08      	pop	{r3, pc}

08010238 <NetworkParams::Load(char const*, unsigned int)>:
 8010238:	6803      	ldr	r3, [r0, #0]
 801023a:	b1d3      	cbz	r3, 8010272 <NetworkParams::Load(char const*, unsigned int)+0x3a>
 801023c:	2300      	movs	r3, #0
 801023e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010240:	460d      	mov	r5, r1
 8010242:	4616      	mov	r6, r2
 8010244:	4604      	mov	r4, r0
 8010246:	6043      	str	r3, [r0, #4]
 8010248:	4602      	mov	r2, r0
 801024a:	490a      	ldr	r1, [pc, #40]	; (8010274 <NetworkParams::Load(char const*, unsigned int)+0x3c>)
 801024c:	4668      	mov	r0, sp
 801024e:	f002 f9e7 	bl	8012620 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8010252:	4632      	mov	r2, r6
 8010254:	4629      	mov	r1, r5
 8010256:	4668      	mov	r0, sp
 8010258:	f002 f9e6 	bl	8012628 <ReadConfigFile::Read(char const*, unsigned int)>
 801025c:	4621      	mov	r1, r4
 801025e:	f851 0b04 	ldr.w	r0, [r1], #4
 8010262:	6803      	ldr	r3, [r0, #0]
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	4798      	blx	r3
 8010268:	4668      	mov	r0, sp
 801026a:	f002 f9dc 	bl	8012626 <ReadConfigFile::~ReadConfigFile()>
 801026e:	b002      	add	sp, #8
 8010270:	bd70      	pop	{r4, r5, r6, pc}
 8010272:	4770      	bx	lr
 8010274:	080103a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9}

08010278 <NetworkParams::callbackFunction(char const*)>:
 8010278:	b530      	push	{r4, r5, lr}
 801027a:	460d      	mov	r5, r1
 801027c:	b085      	sub	sp, #20
 801027e:	4604      	mov	r4, r0
 8010280:	4942      	ldr	r1, [pc, #264]	; (801038c <NetworkParams::callbackFunction(char const*)+0x114>)
 8010282:	4628      	mov	r0, r5
 8010284:	f10d 0207 	add.w	r2, sp, #7
 8010288:	f002 fa7a 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801028c:	b978      	cbnz	r0, 80102ae <NetworkParams::callbackFunction(char const*)+0x36>
 801028e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010292:	6863      	ldr	r3, [r4, #4]
 8010294:	b142      	cbz	r2, 80102a8 <NetworkParams::callbackFunction(char const*)+0x30>
 8010296:	f023 0301 	bic.w	r3, r3, #1
 801029a:	3a00      	subs	r2, #0
 801029c:	bf18      	it	ne
 801029e:	2201      	movne	r2, #1
 80102a0:	6063      	str	r3, [r4, #4]
 80102a2:	7622      	strb	r2, [r4, #24]
 80102a4:	b005      	add	sp, #20
 80102a6:	bd30      	pop	{r4, r5, pc}
 80102a8:	f043 0301 	orr.w	r3, r3, #1
 80102ac:	e7f5      	b.n	801029a <NetworkParams::callbackFunction(char const*)+0x22>
 80102ae:	4628      	mov	r0, r5
 80102b0:	4937      	ldr	r1, [pc, #220]	; (8010390 <NetworkParams::callbackFunction(char const*)+0x118>)
 80102b2:	f10d 0207 	add.w	r2, sp, #7
 80102b6:	f002 fa63 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80102ba:	b980      	cbnz	r0, 80102de <NetworkParams::callbackFunction(char const*)+0x66>
 80102bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80102c0:	6863      	ldr	r3, [r4, #4]
 80102c2:	1e51      	subs	r1, r2, #1
 80102c4:	2904      	cmp	r1, #4
 80102c6:	bf97      	itett	ls
 80102c8:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 80102cc:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 80102d0:	6063      	strls	r3, [r4, #4]
 80102d2:	f884 2061 	strbls.w	r2, [r4, #97]	; 0x61
 80102d6:	bf84      	itt	hi
 80102d8:	6063      	strhi	r3, [r4, #4]
 80102da:	f884 0061 	strbhi.w	r0, [r4, #97]	; 0x61
 80102de:	4628      	mov	r0, r5
 80102e0:	492c      	ldr	r1, [pc, #176]	; (8010394 <NetworkParams::callbackFunction(char const*)+0x11c>)
 80102e2:	aa02      	add	r2, sp, #8
 80102e4:	f002 f9ed 	bl	80126c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 80102e8:	b9e8      	cbnz	r0, 8010326 <NetworkParams::callbackFunction(char const*)+0xae>
 80102ea:	9a02      	ldr	r2, [sp, #8]
 80102ec:	6863      	ldr	r3, [r4, #4]
 80102ee:	b2d1      	uxtb	r1, r2
 80102f0:	29ac      	cmp	r1, #172	; 0xac
 80102f2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80102f6:	d007      	beq.n	8010308 <NetworkParams::callbackFunction(char const*)+0x90>
 80102f8:	29c0      	cmp	r1, #192	; 0xc0
 80102fa:	d00c      	beq.n	8010316 <NetworkParams::callbackFunction(char const*)+0x9e>
 80102fc:	290a      	cmp	r1, #10
 80102fe:	d10d      	bne.n	801031c <NetworkParams::callbackFunction(char const*)+0xa4>
 8010300:	60a2      	str	r2, [r4, #8]
 8010302:	f043 0302 	orr.w	r3, r3, #2
 8010306:	e004      	b.n	8010312 <NetworkParams::callbackFunction(char const*)+0x9a>
 8010308:	3810      	subs	r0, #16
 801030a:	280f      	cmp	r0, #15
 801030c:	d9f8      	bls.n	8010300 <NetworkParams::callbackFunction(char const*)+0x88>
 801030e:	f023 0302 	bic.w	r3, r3, #2
 8010312:	6063      	str	r3, [r4, #4]
 8010314:	e7c6      	b.n	80102a4 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010316:	28a8      	cmp	r0, #168	; 0xa8
 8010318:	d1f9      	bne.n	801030e <NetworkParams::callbackFunction(char const*)+0x96>
 801031a:	e7f1      	b.n	8010300 <NetworkParams::callbackFunction(char const*)+0x88>
 801031c:	2902      	cmp	r1, #2
 801031e:	d0ef      	beq.n	8010300 <NetworkParams::callbackFunction(char const*)+0x88>
 8010320:	2a00      	cmp	r2, #0
 8010322:	d0ed      	beq.n	8010300 <NetworkParams::callbackFunction(char const*)+0x88>
 8010324:	e7f3      	b.n	801030e <NetworkParams::callbackFunction(char const*)+0x96>
 8010326:	4628      	mov	r0, r5
 8010328:	491b      	ldr	r1, [pc, #108]	; (8010398 <NetworkParams::callbackFunction(char const*)+0x120>)
 801032a:	aa02      	add	r2, sp, #8
 801032c:	f002 f9c9 	bl	80126c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010330:	b970      	cbnz	r0, 8010350 <NetworkParams::callbackFunction(char const*)+0xd8>
 8010332:	9a02      	ldr	r2, [sp, #8]
 8010334:	6863      	ldr	r3, [r4, #4]
 8010336:	b142      	cbz	r2, 801034a <NetworkParams::callbackFunction(char const*)+0xd2>
 8010338:	ba11      	rev	r1, r2
 801033a:	43c8      	mvns	r0, r1
 801033c:	ea11 0150 	ands.w	r1, r1, r0, lsr #1
 8010340:	d103      	bne.n	801034a <NetworkParams::callbackFunction(char const*)+0xd2>
 8010342:	60e2      	str	r2, [r4, #12]
 8010344:	f043 0304 	orr.w	r3, r3, #4
 8010348:	e7e3      	b.n	8010312 <NetworkParams::callbackFunction(char const*)+0x9a>
 801034a:	f023 0304 	bic.w	r3, r3, #4
 801034e:	e7e0      	b.n	8010312 <NetworkParams::callbackFunction(char const*)+0x9a>
 8010350:	4628      	mov	r0, r5
 8010352:	4912      	ldr	r1, [pc, #72]	; (801039c <NetworkParams::callbackFunction(char const*)+0x124>)
 8010354:	aa02      	add	r2, sp, #8
 8010356:	f002 f9b4 	bl	80126c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 801035a:	b928      	cbnz	r0, 8010368 <NetworkParams::callbackFunction(char const*)+0xf0>
 801035c:	9b02      	ldr	r3, [sp, #8]
 801035e:	6123      	str	r3, [r4, #16]
 8010360:	6863      	ldr	r3, [r4, #4]
 8010362:	f043 0308 	orr.w	r3, r3, #8
 8010366:	e7d4      	b.n	8010312 <NetworkParams::callbackFunction(char const*)+0x9a>
 8010368:	233f      	movs	r3, #63	; 0x3f
 801036a:	4628      	mov	r0, r5
 801036c:	9303      	str	r3, [sp, #12]
 801036e:	490c      	ldr	r1, [pc, #48]	; (80103a0 <NetworkParams::callbackFunction(char const*)+0x128>)
 8010370:	ab03      	add	r3, sp, #12
 8010372:	f104 0219 	add.w	r2, r4, #25
 8010376:	f002 f98b 	bl	8012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 801037a:	2800      	cmp	r0, #0
 801037c:	d192      	bne.n	80102a4 <NetworkParams::callbackFunction(char const*)+0x2c>
 801037e:	9b03      	ldr	r3, [sp, #12]
 8010380:	4423      	add	r3, r4
 8010382:	7658      	strb	r0, [r3, #25]
 8010384:	6863      	ldr	r3, [r4, #4]
 8010386:	f043 0320 	orr.w	r3, r3, #32
 801038a:	e7c2      	b.n	8010312 <NetworkParams::callbackFunction(char const*)+0x9a>
 801038c:	080172fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r9, ip, sp, lr}
 8010390:	080172dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, ip, sp, lr}
 8010394:	080172c1 	stmdaeq	r1, {r0, r6, r7, r9, ip, sp, lr}
 8010398:	080172f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, ip, sp, lr}
 801039c:	080172cc 	stmdaeq	r1, {r2, r3, r6, r7, r9, ip, sp, lr}
 80103a0:	080172ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, ip, sp, lr}

080103a4 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 80103a4:	f7ff bf68 	b.w	8010278 <NetworkParams::callbackFunction(char const*)>

080103a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
 80103a8:	b570      	push	{r4, r5, r6, lr}
 80103aa:	4604      	mov	r4, r0
 80103ac:	4615      	mov	r5, r2
 80103ae:	461e      	mov	r6, r3
 80103b0:	b086      	sub	sp, #24
 80103b2:	3004      	adds	r0, #4
 80103b4:	2900      	cmp	r1, #0
 80103b6:	d02b      	beq.n	8010410 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x68>
 80103b8:	225e      	movs	r2, #94	; 0x5e
 80103ba:	f002 fef4 	bl	80131a6 <memmove>
 80103be:	462a      	mov	r2, r5
 80103c0:	4633      	mov	r3, r6
 80103c2:	4970      	ldr	r1, [pc, #448]	; (8010584 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 80103c4:	a803      	add	r0, sp, #12
 80103c6:	f002 f88b 	bl	80124e0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80103ca:	6863      	ldr	r3, [r4, #4]
 80103cc:	079a      	lsls	r2, r3, #30
 80103ce:	bf5f      	itttt	pl
 80103d0:	4a6d      	ldrpl	r2, [pc, #436]	; (8010588 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80103d2:	6812      	ldrpl	r2, [r2, #0]
 80103d4:	6952      	ldrpl	r2, [r2, #20]
 80103d6:	60a2      	strpl	r2, [r4, #8]
 80103d8:	075e      	lsls	r6, r3, #29
 80103da:	bf5f      	itttt	pl
 80103dc:	4a6a      	ldrpl	r2, [pc, #424]	; (8010588 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80103de:	6812      	ldrpl	r2, [r2, #0]
 80103e0:	69d2      	ldrpl	r2, [r2, #28]
 80103e2:	60e2      	strpl	r2, [r4, #12]
 80103e4:	071d      	lsls	r5, r3, #28
 80103e6:	bf58      	it	pl
 80103e8:	4a67      	ldrpl	r2, [pc, #412]	; (8010588 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 80103ea:	f104 0519 	add.w	r5, r4, #25
 80103ee:	bf5e      	ittt	pl
 80103f0:	6812      	ldrpl	r2, [r2, #0]
 80103f2:	6992      	ldrpl	r2, [r2, #24]
 80103f4:	6122      	strpl	r2, [r4, #16]
 80103f6:	0698      	lsls	r0, r3, #26
 80103f8:	d418      	bmi.n	801042c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x84>
 80103fa:	4628      	mov	r0, r5
 80103fc:	223f      	movs	r2, #63	; 0x3f
 80103fe:	4b62      	ldr	r3, [pc, #392]	; (8010588 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	331f      	adds	r3, #31
 8010404:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010408:	b949      	cbnz	r1, 801041e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x76>
 801040a:	f002 fee3 	bl	80131d4 <memset>
 801040e:	e00a      	b.n	8010426 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8010410:	6823      	ldr	r3, [r4, #0]
 8010412:	4601      	mov	r1, r0
 8010414:	681a      	ldr	r2, [r3, #0]
 8010416:	4618      	mov	r0, r3
 8010418:	68d2      	ldr	r2, [r2, #12]
 801041a:	4790      	blx	r2
 801041c:	e7cf      	b.n	80103be <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 801041e:	3a01      	subs	r2, #1
 8010420:	f800 1b01 	strb.w	r1, [r0], #1
 8010424:	d1ee      	bne.n	8010404 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x5c>
 8010426:	2300      	movs	r3, #0
 8010428:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801042c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010430:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8010434:	7e23      	ldrb	r3, [r4, #24]
 8010436:	42b2      	cmp	r2, r6
 8010438:	6861      	ldr	r1, [r4, #4]
 801043a:	d21a      	bcs.n	8010472 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xca>
 801043c:	9803      	ldr	r0, [sp, #12]
 801043e:	07c9      	lsls	r1, r1, #31
 8010440:	4410      	add	r0, r2
 8010442:	eba6 0602 	sub.w	r6, r6, r2
 8010446:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801044a:	d404      	bmi.n	8010456 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xae>
 801044c:	b922      	cbnz	r2, 8010458 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb0>
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	4a4e      	ldr	r2, [pc, #312]	; (801058c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8010452:	4b4f      	ldr	r3, [pc, #316]	; (8010590 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8010454:	e003      	b.n	801045e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 8010456:	b312      	cbz	r2, 801049e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	4a4e      	ldr	r2, [pc, #312]	; (8010594 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 801045c:	4b4c      	ldr	r3, [pc, #304]	; (8010590 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 801045e:	4631      	mov	r1, r6
 8010460:	f003 f8fa 	bl	8013658 <snprintf>
 8010464:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010468:	4286      	cmp	r6, r0
 801046a:	bfa4      	itt	ge
 801046c:	181b      	addge	r3, r3, r0
 801046e:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8010472:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010476:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 801047a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801047e:	42b2      	cmp	r2, r6
 8010480:	6861      	ldr	r1, [r4, #4]
 8010482:	d21f      	bcs.n	80104c4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 8010484:	9803      	ldr	r0, [sp, #12]
 8010486:	05c9      	lsls	r1, r1, #23
 8010488:	4410      	add	r0, r2
 801048a:	eba6 0602 	sub.w	r6, r6, r2
 801048e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8010492:	d408      	bmi.n	80104a6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xfe>
 8010494:	b94a      	cbnz	r2, 80104aa <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x102>
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	4a3c      	ldr	r2, [pc, #240]	; (801058c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 801049a:	4b3f      	ldr	r3, [pc, #252]	; (8010598 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 801049c:	e008      	b.n	80104b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 801049e:	9300      	str	r3, [sp, #0]
 80104a0:	4a3e      	ldr	r2, [pc, #248]	; (801059c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 80104a2:	4b3b      	ldr	r3, [pc, #236]	; (8010590 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 80104a4:	e7db      	b.n	801045e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 80104a6:	2a00      	cmp	r2, #0
 80104a8:	d03c      	beq.n	8010524 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x17c>
 80104aa:	9300      	str	r3, [sp, #0]
 80104ac:	4a39      	ldr	r2, [pc, #228]	; (8010594 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 80104ae:	4b3a      	ldr	r3, [pc, #232]	; (8010598 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 80104b0:	4631      	mov	r1, r6
 80104b2:	f003 f8d1 	bl	8013658 <snprintf>
 80104b6:	4286      	cmp	r6, r0
 80104b8:	bfa2      	ittt	ge
 80104ba:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 80104be:	18c0      	addge	r0, r0, r3
 80104c0:	f8ad 0012 	strhge.w	r0, [sp, #18]
 80104c4:	4936      	ldr	r1, [pc, #216]	; (80105a0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f8>)
 80104c6:	a803      	add	r0, sp, #12
 80104c8:	f002 f890 	bl	80125ec <PropertiesBuilder::AddComment(char const*)>
 80104cc:	6863      	ldr	r3, [r4, #4]
 80104ce:	68a2      	ldr	r2, [r4, #8]
 80104d0:	4934      	ldr	r1, [pc, #208]	; (80105a4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1fc>)
 80104d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80104d6:	a803      	add	r0, sp, #12
 80104d8:	f002 f844 	bl	8012564 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80104dc:	6863      	ldr	r3, [r4, #4]
 80104de:	68e2      	ldr	r2, [r4, #12]
 80104e0:	4931      	ldr	r1, [pc, #196]	; (80105a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x200>)
 80104e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80104e6:	a803      	add	r0, sp, #12
 80104e8:	f002 f83c 	bl	8012564 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80104ec:	6863      	ldr	r3, [r4, #4]
 80104ee:	6922      	ldr	r2, [r4, #16]
 80104f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80104f4:	492d      	ldr	r1, [pc, #180]	; (80105ac <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 80104f6:	a803      	add	r0, sp, #12
 80104f8:	f002 f834 	bl	8012564 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 80104fc:	6862      	ldr	r2, [r4, #4]
 80104fe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010502:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8010506:	42a3      	cmp	r3, r4
 8010508:	d21e      	bcs.n	8010548 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1a0>
 801050a:	9803      	ldr	r0, [sp, #12]
 801050c:	0692      	lsls	r2, r2, #26
 801050e:	4418      	add	r0, r3
 8010510:	eba4 0403 	sub.w	r4, r4, r3
 8010514:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010518:	d408      	bmi.n	801052c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x184>
 801051a:	b943      	cbnz	r3, 801052e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x186>
 801051c:	4b24      	ldr	r3, [pc, #144]	; (80105b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 801051e:	4a25      	ldr	r2, [pc, #148]	; (80105b4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20c>)
 8010520:	9500      	str	r5, [sp, #0]
 8010522:	e007      	b.n	8010534 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 8010524:	9300      	str	r3, [sp, #0]
 8010526:	4a1d      	ldr	r2, [pc, #116]	; (801059c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8010528:	4b1b      	ldr	r3, [pc, #108]	; (8010598 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 801052a:	e7c1      	b.n	80104b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 801052c:	b32b      	cbz	r3, 801057a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d2>
 801052e:	4b20      	ldr	r3, [pc, #128]	; (80105b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 8010530:	4a21      	ldr	r2, [pc, #132]	; (80105b8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x210>)
 8010532:	9500      	str	r5, [sp, #0]
 8010534:	4621      	mov	r1, r4
 8010536:	f003 f88f 	bl	8013658 <snprintf>
 801053a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801053e:	4284      	cmp	r4, r0
 8010540:	bfa4      	itt	ge
 8010542:	181b      	addge	r3, r3, r0
 8010544:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8010548:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801054c:	b17b      	cbz	r3, 801056e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1c6>
 801054e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010552:	9b03      	ldr	r3, [sp, #12]
 8010554:	4413      	add	r3, r2
 8010556:	227d      	movs	r2, #125	; 0x7d
 8010558:	f803 2c01 	strb.w	r2, [r3, #-1]
 801055c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010560:	9903      	ldr	r1, [sp, #12]
 8010562:	54ca      	strb	r2, [r1, r3]
 8010564:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010568:	3301      	adds	r3, #1
 801056a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801056e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010574:	601a      	str	r2, [r3, #0]
 8010576:	b006      	add	sp, #24
 8010578:	bd70      	pop	{r4, r5, r6, pc}
 801057a:	4b0d      	ldr	r3, [pc, #52]	; (80105b0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 801057c:	4a0f      	ldr	r2, [pc, #60]	; (80105bc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x214>)
 801057e:	9500      	str	r5, [sp, #0]
 8010580:	e7d8      	b.n	8010534 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 8010582:	bf00      	nop
 8010584:	08017307 	stmdaeq	r1, {r0, r1, r2, r8, r9, ip, sp, lr}
 8010588:	20008aa8 	andcs	r8, r0, r8, lsr #21
 801058c:	08015ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, ip, lr}
 8010590:	080172fe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r9, ip, sp, lr}
 8010594:	08015c9c 	stmdaeq	r1, {r2, r3, r4, r7, sl, fp, ip, lr}
 8010598:	080172dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r9, ip, sp, lr}
 801059c:	08015ca6 	stmdaeq	r1, {r1, r2, r5, r7, sl, fp, ip, lr}
 80105a0:	080172b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, ip, sp, lr}
 80105a4:	080172c1 	stmdaeq	r1, {r0, r6, r7, r9, ip, sp, lr}
 80105a8:	080172f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, ip, sp, lr}
 80105ac:	080172cc 	stmdaeq	r1, {r2, r3, r6, r7, r9, ip, sp, lr}
 80105b0:	080172ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, ip, sp, lr}
 80105b4:	08015cb8 	stmdaeq	r1, {r3, r4, r5, r7, sl, fp, ip, lr}
 80105b8:	08015cad 	stmdaeq	r1, {r0, r2, r3, r5, r7, sl, fp, ip, lr}
 80105bc:	08015cb9 	stmdaeq	r1, {r0, r3, r4, r5, r7, sl, fp, ip, lr}

080105c0 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 80105c0:	b513      	push	{r0, r1, r4, lr}
 80105c2:	6804      	ldr	r4, [r0, #0]
 80105c4:	b914      	cbnz	r4, 80105cc <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80105c6:	601c      	str	r4, [r3, #0]
 80105c8:	b002      	add	sp, #8
 80105ca:	bd10      	pop	{r4, pc}
 80105cc:	9300      	str	r3, [sp, #0]
 80105ce:	4613      	mov	r3, r2
 80105d0:	460a      	mov	r2, r1
 80105d2:	2100      	movs	r1, #0
 80105d4:	f7ff fee8 	bl	80103a8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>
 80105d8:	e7f6      	b.n	80105c8 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

080105da <NetworkParams::Dump()>:
 80105da:	4770      	bx	lr

080105dc <memcpy.isra.0>:
 80105dc:	3801      	subs	r0, #1
 80105de:	440a      	add	r2, r1
 80105e0:	4291      	cmp	r1, r2
 80105e2:	d100      	bne.n	80105e6 <memcpy.isra.0+0xa>
 80105e4:	4770      	bx	lr
 80105e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105ea:	f800 3f01 	strb.w	r3, [r0, #1]!
 80105ee:	e7f7      	b.n	80105e0 <memcpy.isra.0+0x4>

080105f0 <arp_announce>:
 80105f0:	4803      	ldr	r0, [pc, #12]	; (8010600 <arp_announce+0x10>)
 80105f2:	69c3      	ldr	r3, [r0, #28]
 80105f4:	b113      	cbz	r3, 80105fc <arp_announce+0xc>
 80105f6:	212a      	movs	r1, #42	; 0x2a
 80105f8:	f004 bad6 	b.w	8014ba8 <emac_eth_send>
 80105fc:	4770      	bx	lr
 80105fe:	bf00      	nop
 8010600:	20008aac 	andcs	r8, r0, ip, lsr #21

08010604 <arp_handle_request>:
 8010604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010606:	2204      	movs	r2, #4
 8010608:	f100 0126 	add.w	r1, r0, #38	; 0x26
 801060c:	4604      	mov	r4, r0
 801060e:	eb0d 0002 	add.w	r0, sp, r2
 8010612:	f7ff ffe3 	bl	80105dc <memcpy.isra.0>
 8010616:	4b0d      	ldr	r3, [pc, #52]	; (801064c <arp_handle_request+0x48>)
 8010618:	9a01      	ldr	r2, [sp, #4]
 801061a:	69db      	ldr	r3, [r3, #28]
 801061c:	429a      	cmp	r2, r3
 801061e:	d113      	bne.n	8010648 <arp_handle_request+0x44>
 8010620:	2206      	movs	r2, #6
 8010622:	4d0b      	ldr	r5, [pc, #44]	; (8010650 <arp_handle_request+0x4c>)
 8010624:	18a1      	adds	r1, r4, r2
 8010626:	4628      	mov	r0, r5
 8010628:	f7ff ffd8 	bl	80105dc <memcpy.isra.0>
 801062c:	f104 0116 	add.w	r1, r4, #22
 8010630:	f105 0020 	add.w	r0, r5, #32
 8010634:	2206      	movs	r2, #6
 8010636:	f7ff ffd1 	bl	80105dc <memcpy.isra.0>
 801063a:	69e3      	ldr	r3, [r4, #28]
 801063c:	212a      	movs	r1, #42	; 0x2a
 801063e:	4628      	mov	r0, r5
 8010640:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8010644:	f004 fab0 	bl	8014ba8 <emac_eth_send>
 8010648:	b003      	add	sp, #12
 801064a:	bd30      	pop	{r4, r5, pc}
 801064c:	20008aac 	andcs	r8, r0, ip, lsr #21
 8010650:	20008ad8 	ldrdcs	r8, [r0], -r8	; <UNPREDICTABLE>

08010654 <arp_handle_reply>:
 8010654:	69c1      	ldr	r1, [r0, #28]
 8010656:	3016      	adds	r0, #22
 8010658:	f000 b80a 	b.w	8010670 <arp_cache_update>

0801065c <arp_send_request>:
 801065c:	4b03      	ldr	r3, [pc, #12]	; (801066c <arp_send_request+0x10>)
 801065e:	212a      	movs	r1, #42	; 0x2a
 8010660:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8010664:	4618      	mov	r0, r3
 8010666:	f004 ba9f 	b.w	8014ba8 <emac_eth_send>
 801066a:	bf00      	nop
 801066c:	20008b04 	andcs	r8, r0, r4, lsl #22

08010670 <arp_cache_update>:
 8010670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010672:	4e11      	ldr	r6, [pc, #68]	; (80106b8 <arp_cache_update+0x48>)
 8010674:	8833      	ldrh	r3, [r6, #0]
 8010676:	2b20      	cmp	r3, #32
 8010678:	d018      	beq.n	80106ac <arp_cache_update+0x3c>
 801067a:	2400      	movs	r4, #0
 801067c:	220c      	movs	r2, #12
 801067e:	4d0f      	ldr	r5, [pc, #60]	; (80106bc <arp_cache_update+0x4c>)
 8010680:	b2a7      	uxth	r7, r4
 8010682:	42bb      	cmp	r3, r7
 8010684:	d80b      	bhi.n	801069e <arp_cache_update+0x2e>
 8010686:	fb02 5203 	mla	r2, r2, r3, r5
 801068a:	1d84      	adds	r4, r0, #6
 801068c:	3203      	adds	r2, #3
 801068e:	42a0      	cmp	r0, r4
 8010690:	d10d      	bne.n	80106ae <arp_cache_update+0x3e>
 8010692:	220c      	movs	r2, #12
 8010694:	435a      	muls	r2, r3
 8010696:	3301      	adds	r3, #1
 8010698:	50a9      	str	r1, [r5, r2]
 801069a:	8033      	strh	r3, [r6, #0]
 801069c:	e006      	b.n	80106ac <arp_cache_update+0x3c>
 801069e:	3401      	adds	r4, #1
 80106a0:	fb02 5704 	mla	r7, r2, r4, r5
 80106a4:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 80106a8:	428f      	cmp	r7, r1
 80106aa:	d1e9      	bne.n	8010680 <arp_cache_update+0x10>
 80106ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106ae:	f810 7b01 	ldrb.w	r7, [r0], #1
 80106b2:	f802 7f01 	strb.w	r7, [r2, #1]!
 80106b6:	e7ea      	b.n	801068e <arp_cache_update+0x1e>
 80106b8:	20008cb0 			; <UNDEFINED> instruction: 0x20008cb0
 80106bc:	20008b30 	andcs	r8, r0, r0, lsr fp

080106c0 <arp_cache_lookup>:
 80106c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106c4:	2200      	movs	r2, #0
 80106c6:	4606      	mov	r6, r0
 80106c8:	460c      	mov	r4, r1
 80106ca:	200c      	movs	r0, #12
 80106cc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8010754 <arp_cache_lookup+0x94>
 80106d0:	fb00 f302 	mul.w	r3, r0, r2
 80106d4:	f853 1008 	ldr.w	r1, [r3, r8]
 80106d8:	42b1      	cmp	r1, r6
 80106da:	d10d      	bne.n	80106f8 <arp_cache_lookup+0x38>
 80106dc:	3304      	adds	r3, #4
 80106de:	4443      	add	r3, r8
 80106e0:	3c01      	subs	r4, #1
 80106e2:	1d9a      	adds	r2, r3, #6
 80106e4:	4293      	cmp	r3, r2
 80106e6:	d102      	bne.n	80106ee <arp_cache_lookup+0x2e>
 80106e8:	4630      	mov	r0, r6
 80106ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ee:	f813 1b01 	ldrb.w	r1, [r3], #1
 80106f2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80106f6:	e7f5      	b.n	80106e4 <arp_cache_lookup+0x24>
 80106f8:	b111      	cbz	r1, 8010700 <arp_cache_lookup+0x40>
 80106fa:	3201      	adds	r2, #1
 80106fc:	2a20      	cmp	r2, #32
 80106fe:	d1e7      	bne.n	80106d0 <arp_cache_lookup+0x10>
 8010700:	2704      	movs	r7, #4
 8010702:	f8df a054 	ldr.w	sl, [pc, #84]	; 8010758 <arp_cache_lookup+0x98>
 8010706:	f8ba 5000 	ldrh.w	r5, [sl]
 801070a:	3f01      	subs	r7, #1
 801070c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8010710:	d101      	bne.n	8010716 <arp_cache_lookup+0x56>
 8010712:	463e      	mov	r6, r7
 8010714:	e7e8      	b.n	80106e8 <arp_cache_lookup+0x28>
 8010716:	4630      	mov	r0, r6
 8010718:	f7ff ffa0 	bl	801065c <arp_send_request>
 801071c:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8010720:	f1b9 0901 	subs.w	r9, r9, #1
 8010724:	f8ba 3000 	ldrh.w	r3, [sl]
 8010728:	d011      	beq.n	801074e <arp_cache_lookup+0x8e>
 801072a:	429d      	cmp	r5, r3
 801072c:	d00c      	beq.n	8010748 <arp_cache_lookup+0x88>
 801072e:	230c      	movs	r3, #12
 8010730:	fb03 8505 	mla	r5, r3, r5, r8
 8010734:	3c01      	subs	r4, #1
 8010736:	1d2b      	adds	r3, r5, #4
 8010738:	350a      	adds	r5, #10
 801073a:	42ab      	cmp	r3, r5
 801073c:	d0d4      	beq.n	80106e8 <arp_cache_lookup+0x28>
 801073e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010742:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010746:	e7f8      	b.n	801073a <arp_cache_lookup+0x7a>
 8010748:	f7f6 feea 	bl	8007520 <net_handle>
 801074c:	e7e8      	b.n	8010720 <arp_cache_lookup+0x60>
 801074e:	429d      	cmp	r5, r3
 8010750:	d0db      	beq.n	801070a <arp_cache_lookup+0x4a>
 8010752:	e7ec      	b.n	801072e <arp_cache_lookup+0x6e>
 8010754:	20008b30 	andcs	r8, r0, r0, lsr fp
 8010758:	20008cb0 			; <UNDEFINED> instruction: 0x20008cb0

0801075c <_parse_response>:
 801075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010760:	2400      	movs	r4, #0
 8010762:	460d      	mov	r5, r1
 8010764:	46a3      	mov	fp, r4
 8010766:	4627      	mov	r7, r4
 8010768:	46a2      	mov	sl, r4
 801076a:	46a1      	mov	r9, r4
 801076c:	46a0      	mov	r8, r4
 801076e:	4e50      	ldr	r6, [pc, #320]	; (80108b0 <_parse_response+0x154>)
 8010770:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8010774:	6833      	ldr	r3, [r6, #0]
 8010776:	e9cd 4403 	strd	r4, r4, [sp, #12]
 801077a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801077e:	9009      	str	r0, [sp, #36]	; 0x24
 8010780:	9402      	str	r4, [sp, #8]
 8010782:	9407      	str	r4, [sp, #28]
 8010784:	9308      	str	r3, [sp, #32]
 8010786:	f7f6 fecb 	bl	8007520 <net_handle>
 801078a:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801078e:	9300      	str	r3, [sp, #0]
 8010790:	f44f 7209 	mov.w	r2, #548	; 0x224
 8010794:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8010798:	ab0c      	add	r3, sp, #48	; 0x30
 801079a:	a90d      	add	r1, sp, #52	; 0x34
 801079c:	f7fe fd92 	bl	800f2c4 <udp_recv>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d03f      	beq.n	8010824 <_parse_response+0xc8>
 80107a4:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80107a8:	2b43      	cmp	r3, #67	; 0x43
 80107aa:	d13b      	bne.n	8010824 <_parse_response+0xc8>
 80107ac:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 80107b0:	1e6b      	subs	r3, r5, #1
 80107b2:	1d69      	adds	r1, r5, #5
 80107b4:	4299      	cmp	r1, r3
 80107b6:	d12f      	bne.n	8010818 <_parse_response+0xbc>
 80107b8:	2100      	movs	r1, #0
 80107ba:	ab0d      	add	r3, sp, #52	; 0x34
 80107bc:	181d      	adds	r5, r3, r0
 80107be:	468c      	mov	ip, r1
 80107c0:	460e      	mov	r6, r1
 80107c2:	4608      	mov	r0, r1
 80107c4:	ab49      	add	r3, sp, #292	; 0x124
 80107c6:	42ab      	cmp	r3, r5
 80107c8:	d337      	bcc.n	801083a <_parse_response+0xde>
 80107ca:	b141      	cbz	r1, 80107de <_parse_response+0x82>
 80107cc:	4b39      	ldr	r3, [pc, #228]	; (80108b4 <_parse_response+0x158>)
 80107ce:	9a07      	ldr	r2, [sp, #28]
 80107d0:	f883 8003 	strb.w	r8, [r3, #3]
 80107d4:	709a      	strb	r2, [r3, #2]
 80107d6:	9a06      	ldr	r2, [sp, #24]
 80107d8:	705a      	strb	r2, [r3, #1]
 80107da:	9a05      	ldr	r2, [sp, #20]
 80107dc:	701a      	strb	r2, [r3, #0]
 80107de:	f1bc 0f00 	cmp.w	ip, #0
 80107e2:	d007      	beq.n	80107f4 <_parse_response+0x98>
 80107e4:	4b34      	ldr	r3, [pc, #208]	; (80108b8 <_parse_response+0x15c>)
 80107e6:	9a04      	ldr	r2, [sp, #16]
 80107e8:	705c      	strb	r4, [r3, #1]
 80107ea:	70da      	strb	r2, [r3, #3]
 80107ec:	9a03      	ldr	r2, [sp, #12]
 80107ee:	709a      	strb	r2, [r3, #2]
 80107f0:	9a02      	ldr	r2, [sp, #8]
 80107f2:	701a      	strb	r2, [r3, #0]
 80107f4:	b13e      	cbz	r6, 8010806 <_parse_response+0xaa>
 80107f6:	4b31      	ldr	r3, [pc, #196]	; (80108bc <_parse_response+0x160>)
 80107f8:	70df      	strb	r7, [r3, #3]
 80107fa:	f883 a002 	strb.w	sl, [r3, #2]
 80107fe:	f883 9001 	strb.w	r9, [r3, #1]
 8010802:	f883 b000 	strb.w	fp, [r3]
 8010806:	2802      	cmp	r0, #2
 8010808:	d102      	bne.n	8010810 <_parse_response+0xb4>
 801080a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801080c:	4b2c      	ldr	r3, [pc, #176]	; (80108c0 <_parse_response+0x164>)
 801080e:	601a      	str	r2, [r3, #0]
 8010810:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8010814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010818:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 801081c:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8010820:	45e6      	cmp	lr, ip
 8010822:	d0c7      	beq.n	80107b4 <_parse_response+0x58>
 8010824:	6833      	ldr	r3, [r6, #0]
 8010826:	9a08      	ldr	r2, [sp, #32]
 8010828:	1a9b      	subs	r3, r3, r2
 801082a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801082e:	d3aa      	bcc.n	8010786 <_parse_response+0x2a>
 8010830:	2800      	cmp	r0, #0
 8010832:	d1c1      	bne.n	80107b8 <_parse_response+0x5c>
 8010834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010838:	e7ea      	b.n	8010810 <_parse_response+0xb4>
 801083a:	781a      	ldrb	r2, [r3, #0]
 801083c:	2a35      	cmp	r2, #53	; 0x35
 801083e:	d011      	beq.n	8010864 <_parse_response+0x108>
 8010840:	d808      	bhi.n	8010854 <_parse_response+0xf8>
 8010842:	2a01      	cmp	r2, #1
 8010844:	d011      	beq.n	801086a <_parse_response+0x10e>
 8010846:	2a03      	cmp	r2, #3
 8010848:	d019      	beq.n	801087e <_parse_response+0x122>
 801084a:	b14a      	cbz	r2, 8010860 <_parse_response+0x104>
 801084c:	1c9a      	adds	r2, r3, #2
 801084e:	785b      	ldrb	r3, [r3, #1]
 8010850:	4413      	add	r3, r2
 8010852:	e7b8      	b.n	80107c6 <_parse_response+0x6a>
 8010854:	2a36      	cmp	r2, #54	; 0x36
 8010856:	d01f      	beq.n	8010898 <_parse_response+0x13c>
 8010858:	2aff      	cmp	r2, #255	; 0xff
 801085a:	d1f7      	bne.n	801084c <_parse_response+0xf0>
 801085c:	462b      	mov	r3, r5
 801085e:	e7b2      	b.n	80107c6 <_parse_response+0x6a>
 8010860:	3301      	adds	r3, #1
 8010862:	e7b0      	b.n	80107c6 <_parse_response+0x6a>
 8010864:	7898      	ldrb	r0, [r3, #2]
 8010866:	3303      	adds	r3, #3
 8010868:	e7ad      	b.n	80107c6 <_parse_response+0x6a>
 801086a:	f893 b002 	ldrb.w	fp, [r3, #2]
 801086e:	f893 9003 	ldrb.w	r9, [r3, #3]
 8010872:	f893 a004 	ldrb.w	sl, [r3, #4]
 8010876:	795f      	ldrb	r7, [r3, #5]
 8010878:	4616      	mov	r6, r2
 801087a:	3306      	adds	r3, #6
 801087c:	e7a3      	b.n	80107c6 <_parse_response+0x6a>
 801087e:	789a      	ldrb	r2, [r3, #2]
 8010880:	78dc      	ldrb	r4, [r3, #3]
 8010882:	9202      	str	r2, [sp, #8]
 8010884:	791a      	ldrb	r2, [r3, #4]
 8010886:	f04f 0c01 	mov.w	ip, #1
 801088a:	9203      	str	r2, [sp, #12]
 801088c:	795a      	ldrb	r2, [r3, #5]
 801088e:	9204      	str	r2, [sp, #16]
 8010890:	785a      	ldrb	r2, [r3, #1]
 8010892:	4413      	add	r3, r2
 8010894:	3302      	adds	r3, #2
 8010896:	e796      	b.n	80107c6 <_parse_response+0x6a>
 8010898:	789a      	ldrb	r2, [r3, #2]
 801089a:	f893 8005 	ldrb.w	r8, [r3, #5]
 801089e:	9205      	str	r2, [sp, #20]
 80108a0:	78da      	ldrb	r2, [r3, #3]
 80108a2:	2101      	movs	r1, #1
 80108a4:	9206      	str	r2, [sp, #24]
 80108a6:	791a      	ldrb	r2, [r3, #4]
 80108a8:	3306      	adds	r3, #6
 80108aa:	9207      	str	r2, [sp, #28]
 80108ac:	e78b      	b.n	80107c6 <_parse_response+0x6a>
 80108ae:	bf00      	nop
 80108b0:	2000a1e4 	andcs	sl, r0, r4, ror #3
 80108b4:	20008ee4 	andcs	r8, r0, r4, ror #29
 80108b8:	20008cb4 			; <UNDEFINED> instruction: 0x20008cb4
 80108bc:	20008cbc 			; <UNDEFINED> instruction: 0x20008cbc
 80108c0:	20008cb8 			; <UNDEFINED> instruction: 0x20008cb8

080108c4 <memcpy.isra.0>:
 80108c4:	3801      	subs	r0, #1
 80108c6:	440a      	add	r2, r1
 80108c8:	4291      	cmp	r1, r2
 80108ca:	d100      	bne.n	80108ce <memcpy.isra.0+0xa>
 80108cc:	4770      	bx	lr
 80108ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108d2:	f800 3f01 	strb.w	r3, [r0, #1]!
 80108d6:	e7f7      	b.n	80108c8 <memcpy.isra.0+0x4>

080108d8 <dhcp_client>:
 80108d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108dc:	b087      	sub	sp, #28
 80108de:	9203      	str	r2, [sp, #12]
 80108e0:	4a77      	ldr	r2, [pc, #476]	; (8010ac0 <dhcp_client+0x1e8>)
 80108e2:	460f      	mov	r7, r1
 80108e4:	4605      	mov	r5, r0
 80108e6:	f44f 7309 	mov.w	r3, #548	; 0x224
 80108ea:	4614      	mov	r4, r2
 80108ec:	2100      	movs	r1, #0
 80108ee:	3b01      	subs	r3, #1
 80108f0:	f802 1b01 	strb.w	r1, [r2], #1
 80108f4:	d1fb      	bne.n	80108ee <dhcp_client+0x16>
 80108f6:	f240 1301 	movw	r3, #257	; 0x101
 80108fa:	2206      	movs	r2, #6
 80108fc:	4629      	mov	r1, r5
 80108fe:	4871      	ldr	r0, [pc, #452]	; (8010ac4 <dhcp_client+0x1ec>)
 8010900:	8023      	strh	r3, [r4, #0]
 8010902:	70a2      	strb	r2, [r4, #2]
 8010904:	f7ff ffde 	bl	80108c4 <memcpy.isra.0>
 8010908:	4b6f      	ldr	r3, [pc, #444]	; (8010ac8 <dhcp_client+0x1f0>)
 801090a:	2044      	movs	r0, #68	; 0x44
 801090c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8010910:	f240 1335 	movw	r3, #309	; 0x135
 8010914:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 8010918:	f7fe fc9a 	bl	800f250 <udp_bind>
 801091c:	1e06      	subs	r6, r0, #0
 801091e:	f2c0 80c9 	blt.w	8010ab4 <dhcp_client+0x1dc>
 8010922:	f04f 0915 	mov.w	r9, #21
 8010926:	f8df a198 	ldr.w	sl, [pc, #408]	; 8010ac0 <dhcp_client+0x1e8>
 801092a:	f1b9 0901 	subs.w	r9, r9, #1
 801092e:	d11f      	bne.n	8010970 <dhcp_client+0x98>
 8010930:	464c      	mov	r4, r9
 8010932:	2044      	movs	r0, #68	; 0x44
 8010934:	f7fe fca6 	bl	800f284 <udp_unbind>
 8010938:	2c00      	cmp	r4, #0
 801093a:	f000 80be 	beq.w	8010aba <dhcp_client+0x1e2>
 801093e:	2204      	movs	r2, #4
 8010940:	4962      	ldr	r1, [pc, #392]	; (8010acc <dhcp_client+0x1f4>)
 8010942:	a805      	add	r0, sp, #20
 8010944:	f7ff ffbe 	bl	80108c4 <memcpy.isra.0>
 8010948:	9b05      	ldr	r3, [sp, #20]
 801094a:	2204      	movs	r2, #4
 801094c:	4960      	ldr	r1, [pc, #384]	; (8010ad0 <dhcp_client+0x1f8>)
 801094e:	603b      	str	r3, [r7, #0]
 8010950:	a805      	add	r0, sp, #20
 8010952:	f7ff ffb7 	bl	80108c4 <memcpy.isra.0>
 8010956:	9b05      	ldr	r3, [sp, #20]
 8010958:	a805      	add	r0, sp, #20
 801095a:	60bb      	str	r3, [r7, #8]
 801095c:	2204      	movs	r2, #4
 801095e:	495d      	ldr	r1, [pc, #372]	; (8010ad4 <dhcp_client+0x1fc>)
 8010960:	f7ff ffb0 	bl	80108c4 <memcpy.isra.0>
 8010964:	2000      	movs	r0, #0
 8010966:	9b05      	ldr	r3, [sp, #20]
 8010968:	607b      	str	r3, [r7, #4]
 801096a:	b007      	add	sp, #28
 801096c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010970:	f643 5301 	movw	r3, #15617	; 0x3d01
 8010974:	f240 1807 	movw	r8, #263	; 0x107
 8010978:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 801097c:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8010980:	782b      	ldrb	r3, [r5, #0]
 8010982:	4a55      	ldr	r2, [pc, #340]	; (8010ad8 <dhcp_client+0x200>)
 8010984:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8010988:	786b      	ldrb	r3, [r5, #1]
 801098a:	fa5f fb86 	uxtb.w	fp, r6
 801098e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8010992:	78ab      	ldrb	r3, [r5, #2]
 8010994:	4651      	mov	r1, sl
 8010996:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 801099a:	78eb      	ldrb	r3, [r5, #3]
 801099c:	4658      	mov	r0, fp
 801099e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 80109a2:	792b      	ldrb	r3, [r5, #4]
 80109a4:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 80109a8:	796b      	ldrb	r3, [r5, #5]
 80109aa:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 80109ae:	4b4b      	ldr	r3, [pc, #300]	; (8010adc <dhcp_client+0x204>)
 80109b0:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 80109b4:	23ff      	movs	r3, #255	; 0xff
 80109b6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80109ba:	2343      	movs	r3, #67	; 0x43
 80109bc:	f240 1205 	movw	r2, #261	; 0x105
 80109c0:	9300      	str	r3, [sp, #0]
 80109c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109c6:	f7fe fcd9 	bl	800f37c <udp_send>
 80109ca:	4629      	mov	r1, r5
 80109cc:	4630      	mov	r0, r6
 80109ce:	f7ff fec5 	bl	801075c <_parse_response>
 80109d2:	2802      	cmp	r0, #2
 80109d4:	d1a9      	bne.n	801092a <dhcp_client+0x52>
 80109d6:	f643 5303 	movw	r3, #15619	; 0x3d03
 80109da:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 80109de:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 80109e2:	782b      	ldrb	r3, [r5, #0]
 80109e4:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8010ae0 <dhcp_client+0x208>
 80109e8:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 80109ec:	786b      	ldrb	r3, [r5, #1]
 80109ee:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 80109f2:	78ab      	ldrb	r3, [r5, #2]
 80109f4:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 80109f8:	78eb      	ldrb	r3, [r5, #3]
 80109fa:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 80109fe:	792b      	ldrb	r3, [r5, #4]
 8010a00:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8010a04:	796b      	ldrb	r3, [r5, #5]
 8010a06:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 8010a0a:	f240 4332 	movw	r3, #1074	; 0x432
 8010a0e:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8010a12:	4b2e      	ldr	r3, [pc, #184]	; (8010acc <dhcp_client+0x1f4>)
 8010a14:	881a      	ldrh	r2, [r3, #0]
 8010a16:	885b      	ldrh	r3, [r3, #2]
 8010a18:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 8010a1c:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 8010a20:	f240 4336 	movw	r3, #1078	; 0x436
 8010a24:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 8010a28:	4b2e      	ldr	r3, [pc, #184]	; (8010ae4 <dhcp_client+0x20c>)
 8010a2a:	221e      	movs	r2, #30
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8010a32:	230c      	movs	r3, #12
 8010a34:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 8010a38:	9b03      	ldr	r3, [sp, #12]
 8010a3a:	1e58      	subs	r0, r3, #1
 8010a3c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010a40:	f1a2 0e1e 	sub.w	lr, r2, #30
 8010a44:	1c51      	adds	r1, r2, #1
 8010a46:	bb8b      	cbnz	r3, 8010aac <dhcp_client+0x1d4>
 8010a48:	2037      	movs	r0, #55	; 0x37
 8010a4a:	18a3      	adds	r3, r4, r2
 8010a4c:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 8010a50:	2006      	movs	r0, #6
 8010a52:	4421      	add	r1, r4
 8010a54:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 8010a58:	2103      	movs	r1, #3
 8010a5a:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 8010a5e:	210f      	movs	r1, #15
 8010a60:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 8010a64:	213a      	movs	r1, #58	; 0x3a
 8010a66:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 8010a6a:	213b      	movs	r1, #59	; 0x3b
 8010a6c:	f04f 0801 	mov.w	r8, #1
 8010a70:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8010a74:	21ff      	movs	r1, #255	; 0xff
 8010a76:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 8010a7a:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 8010a7e:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8010a82:	2343      	movs	r3, #67	; 0x43
 8010a84:	32f5      	adds	r2, #245	; 0xf5
 8010a86:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 8010a8a:	4651      	mov	r1, sl
 8010a8c:	9300      	str	r3, [sp, #0]
 8010a8e:	b292      	uxth	r2, r2
 8010a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a94:	4658      	mov	r0, fp
 8010a96:	f7fe fc71 	bl	800f37c <udp_send>
 8010a9a:	4629      	mov	r1, r5
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	f7ff fe5d 	bl	801075c <_parse_response>
 8010aa2:	2805      	cmp	r0, #5
 8010aa4:	f47f af41 	bne.w	801092a <dhcp_client+0x52>
 8010aa8:	4644      	mov	r4, r8
 8010aaa:	e742      	b.n	8010932 <dhcp_client+0x5a>
 8010aac:	460a      	mov	r2, r1
 8010aae:	f80c 3f01 	strb.w	r3, [ip, #1]!
 8010ab2:	e7c3      	b.n	8010a3c <dhcp_client+0x164>
 8010ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ab8:	e757      	b.n	801096a <dhcp_client+0x92>
 8010aba:	f06f 0001 	mvn.w	r0, #1
 8010abe:	e754      	b.n	801096a <dhcp_client+0x92>
 8010ac0:	20008cc0 	andcs	r8, r0, r0, asr #25
 8010ac4:	20008cdc 	ldrdcs	r8, [r0], -ip
 8010ac8:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 8010acc:	20008cb8 			; <UNDEFINED> instruction: 0x20008cb8
 8010ad0:	20008cb4 			; <UNDEFINED> instruction: 0x20008cb4
 8010ad4:	20008cbc 			; <UNDEFINED> instruction: 0x20008cbc
 8010ad8:	03010637 	movweq	r0, #5687	; 0x1637
 8010adc:	3b3a0f06 	blcc	8e946fc <__exidx_end+0xe7cb84>
 8010ae0:	20008dc9 	andcs	r8, r0, r9, asr #27
 8010ae4:	20008ee4 	andcs	r8, r0, r4, ror #29

08010ae8 <dhcp_client_release>:
 8010ae8:	b507      	push	{r0, r1, r2, lr}
 8010aea:	2044      	movs	r0, #68	; 0x44
 8010aec:	f7fe fbb0 	bl	800f250 <udp_bind>
 8010af0:	f243 6307 	movw	r3, #13831	; 0x3607
 8010af4:	4911      	ldr	r1, [pc, #68]	; (8010b3c <dhcp_client_release+0x54>)
 8010af6:	b2c0      	uxtb	r0, r0
 8010af8:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 8010afc:	2304      	movs	r3, #4
 8010afe:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8010b02:	4b0f      	ldr	r3, [pc, #60]	; (8010b40 <dhcp_client_release+0x58>)
 8010b04:	781a      	ldrb	r2, [r3, #0]
 8010b06:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 8010b0a:	785a      	ldrb	r2, [r3, #1]
 8010b0c:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 8010b10:	789a      	ldrb	r2, [r3, #2]
 8010b12:	78db      	ldrb	r3, [r3, #3]
 8010b14:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 8010b18:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 8010b1c:	23ff      	movs	r3, #255	; 0xff
 8010b1e:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 8010b22:	2343      	movs	r3, #67	; 0x43
 8010b24:	22fa      	movs	r2, #250	; 0xfa
 8010b26:	9300      	str	r3, [sp, #0]
 8010b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b2c:	f7fe fc26 	bl	800f37c <udp_send>
 8010b30:	2044      	movs	r0, #68	; 0x44
 8010b32:	b003      	add	sp, #12
 8010b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b38:	f7fe bba4 	b.w	800f284 <udp_unbind>
 8010b3c:	20008cc0 	andcs	r8, r0, r0, asr #25
 8010b40:	20008ee4 	andcs	r8, r0, r4, ror #29

08010b44 <memcpy.isra.0>:
 8010b44:	3801      	subs	r0, #1
 8010b46:	440a      	add	r2, r1
 8010b48:	4291      	cmp	r1, r2
 8010b4a:	d100      	bne.n	8010b4e <memcpy.isra.0+0xa>
 8010b4c:	4770      	bx	lr
 8010b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b52:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010b56:	e7f7      	b.n	8010b48 <memcpy.isra.0+0x4>

08010b58 <_send_report>:
 8010b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b5a:	491c      	ldr	r1, [pc, #112]	; (8010bcc <_send_report+0x74>)
 8010b5c:	4c1c      	ldr	r4, [pc, #112]	; (8010bd0 <_send_report+0x78>)
 8010b5e:	f3c0 2306 	ubfx	r3, r0, #8, #7
 8010b62:	9001      	str	r0, [sp, #4]
 8010b64:	70cb      	strb	r3, [r1, #3]
 8010b66:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010b6a:	f3c0 6007 	ubfx	r0, r0, #24, #8
 8010b6e:	710b      	strb	r3, [r1, #4]
 8010b70:	7148      	strb	r0, [r1, #5]
 8010b72:	2206      	movs	r2, #6
 8010b74:	4620      	mov	r0, r4
 8010b76:	f7ff ffe5 	bl	8010b44 <memcpy.isra.0>
 8010b7a:	2204      	movs	r2, #4
 8010b7c:	2700      	movs	r7, #0
 8010b7e:	4d15      	ldr	r5, [pc, #84]	; (8010bd4 <_send_report+0x7c>)
 8010b80:	eb0d 0102 	add.w	r1, sp, r2
 8010b84:	882b      	ldrh	r3, [r5, #0]
 8010b86:	f104 001e 	add.w	r0, r4, #30
 8010b8a:	f104 060e 	add.w	r6, r4, #14
 8010b8e:	8263      	strh	r3, [r4, #18]
 8010b90:	f7ff ffd8 	bl	8010b44 <memcpy.isra.0>
 8010b94:	2118      	movs	r1, #24
 8010b96:	4630      	mov	r0, r6
 8010b98:	8327      	strh	r7, [r4, #24]
 8010b9a:	f000 f8c6 	bl	8010d2a <net_chksum>
 8010b9e:	2204      	movs	r2, #4
 8010ba0:	8320      	strh	r0, [r4, #24]
 8010ba2:	eb0d 0102 	add.w	r1, sp, r2
 8010ba6:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8010baa:	f7ff ffcb 	bl	8010b44 <memcpy.isra.0>
 8010bae:	2120      	movs	r1, #32
 8010bb0:	4630      	mov	r0, r6
 8010bb2:	8527      	strh	r7, [r4, #40]	; 0x28
 8010bb4:	f000 f8b9 	bl	8010d2a <net_chksum>
 8010bb8:	212e      	movs	r1, #46	; 0x2e
 8010bba:	8520      	strh	r0, [r4, #40]	; 0x28
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	f003 fff3 	bl	8014ba8 <emac_eth_send>
 8010bc2:	882b      	ldrh	r3, [r5, #0]
 8010bc4:	3301      	adds	r3, #1
 8010bc6:	802b      	strh	r3, [r5, #0]
 8010bc8:	b003      	add	sp, #12
 8010bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bcc:	20009040 	andcs	r9, r0, r0, asr #32
 8010bd0:	20009048 	andcs	r9, r0, r8, asr #32
 8010bd4:	20009008 	andcs	r9, r0, r8

08010bd8 <igmp_set_ip>:
 8010bd8:	b507      	push	{r0, r1, r2, lr}
 8010bda:	2204      	movs	r2, #4
 8010bdc:	6803      	ldr	r3, [r0, #0]
 8010bde:	eb0d 0102 	add.w	r1, sp, r2
 8010be2:	4806      	ldr	r0, [pc, #24]	; (8010bfc <igmp_set_ip+0x24>)
 8010be4:	9301      	str	r3, [sp, #4]
 8010be6:	f7ff ffad 	bl	8010b44 <memcpy.isra.0>
 8010bea:	2204      	movs	r2, #4
 8010bec:	4804      	ldr	r0, [pc, #16]	; (8010c00 <igmp_set_ip+0x28>)
 8010bee:	eb0d 0102 	add.w	r1, sp, r2
 8010bf2:	f7ff ffa7 	bl	8010b44 <memcpy.isra.0>
 8010bf6:	b003      	add	sp, #12
 8010bf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8010bfc:	20009062 	andcs	r9, r0, r2, rrx
 8010c00:	2000902a 	andcs	r9, r0, sl, lsr #32

08010c04 <igmp_timer>:
 8010c04:	b570      	push	{r4, r5, r6, lr}
 8010c06:	2500      	movs	r5, #0
 8010c08:	2602      	movs	r6, #2
 8010c0a:	4c0a      	ldr	r4, [pc, #40]	; (8010c34 <igmp_timer+0x30>)
 8010c0c:	7963      	ldrb	r3, [r4, #5]
 8010c0e:	2b01      	cmp	r3, #1
 8010c10:	d109      	bne.n	8010c26 <igmp_timer+0x22>
 8010c12:	7923      	ldrb	r3, [r4, #4]
 8010c14:	b13b      	cbz	r3, 8010c26 <igmp_timer+0x22>
 8010c16:	3b01      	subs	r3, #1
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	7123      	strb	r3, [r4, #4]
 8010c1c:	b91b      	cbnz	r3, 8010c26 <igmp_timer+0x22>
 8010c1e:	6820      	ldr	r0, [r4, #0]
 8010c20:	f7ff ff9a 	bl	8010b58 <_send_report>
 8010c24:	7166      	strb	r6, [r4, #5]
 8010c26:	3501      	adds	r5, #1
 8010c28:	2d24      	cmp	r5, #36	; 0x24
 8010c2a:	f104 0408 	add.w	r4, r4, #8
 8010c2e:	d1ed      	bne.n	8010c0c <igmp_timer+0x8>
 8010c30:	bd70      	pop	{r4, r5, r6, pc}
 8010c32:	bf00      	nop
 8010c34:	20008ee8 	andcs	r8, r0, r8, ror #29

08010c38 <igmp_join>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8010c3e:	2be0      	cmp	r3, #224	; 0xe0
 8010c40:	d11b      	bne.n	8010c7a <igmp_join+0x42>
 8010c42:	4911      	ldr	r1, [pc, #68]	; (8010c88 <igmp_join+0x50>)
 8010c44:	680c      	ldr	r4, [r1, #0]
 8010c46:	2c24      	cmp	r4, #36	; 0x24
 8010c48:	d01a      	beq.n	8010c80 <igmp_join+0x48>
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	4a0f      	ldr	r2, [pc, #60]	; (8010c8c <igmp_join+0x54>)
 8010c4e:	429c      	cmp	r4, r3
 8010c50:	dc0d      	bgt.n	8010c6e <igmp_join+0x36>
 8010c52:	f44f 7381 	mov.w	r3, #258	; 0x102
 8010c56:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 8010c5a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010c5e:	8093      	strh	r3, [r2, #4]
 8010c60:	1c63      	adds	r3, r4, #1
 8010c62:	600b      	str	r3, [r1, #0]
 8010c64:	f7ff ff78 	bl	8010b58 <_send_report>
 8010c68:	4623      	mov	r3, r4
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	bd38      	pop	{r3, r4, r5, pc}
 8010c6e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8010c72:	4285      	cmp	r5, r0
 8010c74:	d0f9      	beq.n	8010c6a <igmp_join+0x32>
 8010c76:	3301      	adds	r3, #1
 8010c78:	e7e9      	b.n	8010c4e <igmp_join+0x16>
 8010c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c7e:	e7f4      	b.n	8010c6a <igmp_join+0x32>
 8010c80:	f06f 0301 	mvn.w	r3, #1
 8010c84:	e7f1      	b.n	8010c6a <igmp_join+0x32>
 8010c86:	bf00      	nop
 8010c88:	2000900c 	andcs	r9, r0, ip
 8010c8c:	20008ee8 	andcs	r8, r0, r8, ror #29

08010c90 <igmp_leave>:
 8010c90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010c94:	2600      	movs	r6, #0
 8010c96:	4f1c      	ldr	r7, [pc, #112]	; (8010d08 <igmp_leave+0x78>)
 8010c98:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8010c9c:	4283      	cmp	r3, r0
 8010c9e:	d007      	beq.n	8010cb0 <igmp_leave+0x20>
 8010ca0:	3601      	adds	r6, #1
 8010ca2:	2e24      	cmp	r6, #36	; 0x24
 8010ca4:	d1f8      	bne.n	8010c98 <igmp_leave+0x8>
 8010ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010caa:	b002      	add	sp, #8
 8010cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cb0:	2400      	movs	r4, #0
 8010cb2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8010d0c <igmp_leave+0x7c>
 8010cb6:	4d16      	ldr	r5, [pc, #88]	; (8010d10 <igmp_leave+0x80>)
 8010cb8:	f8b8 3000 	ldrh.w	r3, [r8]
 8010cbc:	2118      	movs	r1, #24
 8010cbe:	9001      	str	r0, [sp, #4]
 8010cc0:	4814      	ldr	r0, [pc, #80]	; (8010d14 <igmp_leave+0x84>)
 8010cc2:	826b      	strh	r3, [r5, #18]
 8010cc4:	832c      	strh	r4, [r5, #24]
 8010cc6:	f000 f830 	bl	8010d2a <net_chksum>
 8010cca:	2204      	movs	r2, #4
 8010ccc:	8328      	strh	r0, [r5, #24]
 8010cce:	eb0d 0102 	add.w	r1, sp, r2
 8010cd2:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8010cd6:	f7ff ff35 	bl	8010b44 <memcpy.isra.0>
 8010cda:	2120      	movs	r1, #32
 8010cdc:	f105 000e 	add.w	r0, r5, #14
 8010ce0:	852c      	strh	r4, [r5, #40]	; 0x28
 8010ce2:	f000 f822 	bl	8010d2a <net_chksum>
 8010ce6:	212e      	movs	r1, #46	; 0x2e
 8010ce8:	8528      	strh	r0, [r5, #40]	; 0x28
 8010cea:	4628      	mov	r0, r5
 8010cec:	f003 ff5c 	bl	8014ba8 <emac_eth_send>
 8010cf0:	f8b8 3000 	ldrh.w	r3, [r8]
 8010cf4:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f8a8 3000 	strh.w	r3, [r8]
 8010d04:	80bc      	strh	r4, [r7, #4]
 8010d06:	e7d0      	b.n	8010caa <igmp_leave+0x1a>
 8010d08:	20008ee8 	andcs	r8, r0, r8, ror #29
 8010d0c:	20009008 	andcs	r9, r0, r8
 8010d10:	20009010 	andcs	r9, r0, r0, lsl r0
 8010d14:	20009056 	andcs	r9, r0, r6, asr r0

08010d18 <ip_set_ip>:
 8010d18:	b510      	push	{r4, lr}
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	f7fe fa78 	bl	800f210 <udp_set_ip>
 8010d20:	4620      	mov	r0, r4
 8010d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d26:	f7ff bf57 	b.w	8010bd8 <igmp_set_ip>

08010d2a <net_chksum>:
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	f021 0201 	bic.w	r2, r1, #1
 8010d30:	b530      	push	{r4, r5, lr}
 8010d32:	1884      	adds	r4, r0, r2
 8010d34:	42a0      	cmp	r0, r4
 8010d36:	d10b      	bne.n	8010d50 <net_chksum+0x26>
 8010d38:	4291      	cmp	r1, r2
 8010d3a:	d004      	beq.n	8010d46 <net_chksum+0x1c>
 8010d3c:	7802      	ldrb	r2, [r0, #0]
 8010d3e:	0212      	lsls	r2, r2, #8
 8010d40:	ba52      	rev16	r2, r2
 8010d42:	b292      	uxth	r2, r2
 8010d44:	4413      	add	r3, r2
 8010d46:	0c1a      	lsrs	r2, r3, #16
 8010d48:	d106      	bne.n	8010d58 <net_chksum+0x2e>
 8010d4a:	43d8      	mvns	r0, r3
 8010d4c:	b280      	uxth	r0, r0
 8010d4e:	bd30      	pop	{r4, r5, pc}
 8010d50:	f830 5b02 	ldrh.w	r5, [r0], #2
 8010d54:	442b      	add	r3, r5
 8010d56:	e7ed      	b.n	8010d34 <net_chksum+0xa>
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	e7f3      	b.n	8010d44 <net_chksum+0x1a>

08010d5c <net::link_register_read()>:
 8010d5c:	b507      	push	{r0, r1, r2, lr}
 8010d5e:	2201      	movs	r2, #1
 8010d60:	f10d 0306 	add.w	r3, sp, #6
 8010d64:	4611      	mov	r1, r2
 8010d66:	2000      	movs	r0, #0
 8010d68:	f003 f81a 	bl	8013da0 <enet_phy_write_read>
 8010d6c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8010d70:	f080 0004 	eor.w	r0, r0, #4
 8010d74:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8010d78:	b003      	add	sp, #12
 8010d7a:	f85d fb04 	ldr.w	pc, [sp], #4

08010d7e <memcpy.isra.0>:
 8010d7e:	3801      	subs	r0, #1
 8010d80:	440a      	add	r2, r1
 8010d82:	4291      	cmp	r1, r2
 8010d84:	d100      	bne.n	8010d88 <memcpy.isra.0+0xa>
 8010d86:	4770      	bx	lr
 8010d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d8c:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010d90:	e7f7      	b.n	8010d82 <memcpy.isra.0+0x4>

08010d92 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8010d92:	b430      	push	{r4, r5}
 8010d94:	b168      	cbz	r0, 8010db2 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8010d96:	2300      	movs	r3, #0
 8010d98:	7905      	ldrb	r5, [r0, #4]
 8010d9a:	5cd4      	ldrb	r4, [r2, r3]
 8010d9c:	b11c      	cbz	r4, 8010da6 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 8010d9e:	1c5c      	adds	r4, r3, #1
 8010da0:	429d      	cmp	r5, r3
 8010da2:	4623      	mov	r3, r4
 8010da4:	dcf9      	bgt.n	8010d9a <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8010da6:	6804      	ldr	r4, [r0, #0]
 8010da8:	b2db      	uxtb	r3, r3
 8010daa:	69e4      	ldr	r4, [r4, #28]
 8010dac:	46a4      	mov	ip, r4
 8010dae:	bc30      	pop	{r4, r5}
 8010db0:	4760      	bx	ip
 8010db2:	bc30      	pop	{r4, r5}
 8010db4:	4770      	bx	lr

08010db6 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8010db6:	b110      	cbz	r0, 8010dbe <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8010db8:	6803      	ldr	r3, [r0, #0]
 8010dba:	691b      	ldr	r3, [r3, #16]
 8010dbc:	4718      	bx	r3
 8010dbe:	4770      	bx	lr

08010dc0 <Display::Printf(unsigned char, char const*, ...)>:
 8010dc0:	b40c      	push	{r2, r3}
 8010dc2:	b570      	push	{r4, r5, r6, lr}
 8010dc4:	6984      	ldr	r4, [r0, #24]
 8010dc6:	4605      	mov	r5, r0
 8010dc8:	460e      	mov	r6, r1
 8010dca:	b08a      	sub	sp, #40	; 0x28
 8010dcc:	b174      	cbz	r4, 8010dec <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8010dce:	ab0f      	add	r3, sp, #60	; 0x3c
 8010dd0:	2120      	movs	r1, #32
 8010dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010dd4:	a802      	add	r0, sp, #8
 8010dd6:	9301      	str	r3, [sp, #4]
 8010dd8:	f002 fc56 	bl	8013688 <vsnprintf>
 8010ddc:	4604      	mov	r4, r0
 8010dde:	69a8      	ldr	r0, [r5, #24]
 8010de0:	4631      	mov	r1, r6
 8010de2:	6803      	ldr	r3, [r0, #0]
 8010de4:	aa02      	add	r2, sp, #8
 8010de6:	69dd      	ldr	r5, [r3, #28]
 8010de8:	b2a3      	uxth	r3, r4
 8010dea:	47a8      	blx	r5
 8010dec:	4620      	mov	r0, r4
 8010dee:	b00a      	add	sp, #40	; 0x28
 8010df0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010df4:	b002      	add	sp, #8
 8010df6:	4770      	bx	lr

08010df8 <DisplayUdf::DisplayUdf()>:
 8010df8:	b510      	push	{r4, lr}
 8010dfa:	4604      	mov	r4, r0
 8010dfc:	f001 fd80 	bl	8012900 <Display::Display()>
 8010e00:	2202      	movs	r2, #2
 8010e02:	2300      	movs	r3, #0
 8010e04:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8010e08:	4b05      	ldr	r3, [pc, #20]	; (8010e20 <DisplayUdf::DisplayUdf()+0x28>)
 8010e0a:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 8010e0e:	601c      	str	r4, [r3, #0]
 8010e10:	2301      	movs	r3, #1
 8010e12:	f802 3f01 	strb.w	r3, [r2, #1]!
 8010e16:	3301      	adds	r3, #1
 8010e18:	2b15      	cmp	r3, #21
 8010e1a:	d1fa      	bne.n	8010e12 <DisplayUdf::DisplayUdf()+0x1a>
 8010e1c:	4620      	mov	r0, r4
 8010e1e:	bd10      	pop	{r4, pc}
 8010e20:	20009078 	andcs	r9, r0, r8, ror r0

08010e24 <DisplayUdf::SetTitle(char const*, ...)>:
 8010e24:	b40e      	push	{r1, r2, r3}
 8010e26:	b517      	push	{r0, r1, r2, r4, lr}
 8010e28:	ab05      	add	r3, sp, #20
 8010e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e2e:	4604      	mov	r4, r0
 8010e30:	211f      	movs	r1, #31
 8010e32:	301c      	adds	r0, #28
 8010e34:	9301      	str	r3, [sp, #4]
 8010e36:	f002 fc27 	bl	8013688 <vsnprintf>
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	4404      	add	r4, r0
 8010e3e:	7723      	strb	r3, [r4, #28]
 8010e40:	b003      	add	sp, #12
 8010e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e46:	b003      	add	sp, #12
 8010e48:	4770      	bx	lr

08010e4a <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8010e4a:	1e4b      	subs	r3, r1, #1
 8010e4c:	2b05      	cmp	r3, #5
 8010e4e:	b530      	push	{r4, r5, lr}
 8010e50:	d80f      	bhi.n	8010e72 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8010e52:	2300      	movs	r3, #0
 8010e54:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 8010e58:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8010e5c:	428d      	cmp	r5, r1
 8010e5e:	d109      	bne.n	8010e74 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8010e60:	1884      	adds	r4, r0, r2
 8010e62:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8010e66:	4403      	add	r3, r0
 8010e68:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 8010e6c:	4410      	add	r0, r2
 8010e6e:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 8010e72:	bd30      	pop	{r4, r5, pc}
 8010e74:	3301      	adds	r3, #1
 8010e76:	2b14      	cmp	r3, #20
 8010e78:	d1ee      	bne.n	8010e58 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8010e7a:	e7f7      	b.n	8010e6c <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

08010e7c <DisplayUdf::ShowEmacStart()>:
 8010e7c:	b510      	push	{r4, lr}
 8010e7e:	4604      	mov	r4, r0
 8010e80:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8010e84:	6980      	ldr	r0, [r0, #24]
 8010e86:	f7ff ff96 	bl	8010db6 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	4a02      	ldr	r2, [pc, #8]	; (8010e98 <DisplayUdf::ShowEmacStart()+0x1c>)
 8010e8e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8010e92:	f7ff ff95 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 8010e96:	bd10      	pop	{r4, pc}
 8010e98:	08017313 	stmdaeq	r1, {r0, r1, r4, r8, r9, ip, sp, lr}

08010e9c <DisplayUdf::ShowIpAddress()>:
 8010e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ea0:	4604      	mov	r4, r0
 8010ea2:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8010ea6:	b086      	sub	sp, #24
 8010ea8:	6980      	ldr	r0, [r0, #24]
 8010eaa:	f7ff ff84 	bl	8010db6 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010eae:	4b13      	ldr	r3, [pc, #76]	; (8010efc <DisplayUdf::ShowIpAddress()+0x60>)
 8010eb0:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 8010eb4:	681d      	ldr	r5, [r3, #0]
 8010eb6:	69e8      	ldr	r0, [r5, #28]
 8010eb8:	696e      	ldr	r6, [r5, #20]
 8010eba:	f004 fb73 	bl	80155a4 <__popcountsi2>
 8010ebe:	79eb      	ldrb	r3, [r5, #7]
 8010ec0:	fa5f f886 	uxtb.w	r8, r6
 8010ec4:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8010ec8:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8010ecc:	0e36      	lsrs	r6, r6, #24
 8010ece:	b99b      	cbnz	r3, 8010ef8 <DisplayUdf::ShowIpAddress()+0x5c>
 8010ed0:	796b      	ldrb	r3, [r5, #5]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	bf14      	ite	ne
 8010ed6:	2244      	movne	r2, #68	; 0x44
 8010ed8:	2253      	moveq	r2, #83	; 0x53
 8010eda:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8010ede:	4643      	mov	r3, r8
 8010ee0:	4639      	mov	r1, r7
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	e9cd a601 	strd	sl, r6, [sp, #4]
 8010ee8:	4a05      	ldr	r2, [pc, #20]	; (8010f00 <DisplayUdf::ShowIpAddress()+0x64>)
 8010eea:	f8cd 9000 	str.w	r9, [sp]
 8010eee:	f7ff ff67 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 8010ef2:	b006      	add	sp, #24
 8010ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ef8:	225a      	movs	r2, #90	; 0x5a
 8010efa:	e7ee      	b.n	8010eda <DisplayUdf::ShowIpAddress()+0x3e>
 8010efc:	20008aa8 	andcs	r8, r0, r8, lsr #21
 8010f00:	08017322 	stmdaeq	r1, {r1, r5, r8, r9, ip, sp, lr}

08010f04 <DisplayUdf::ShowNetmask()>:
 8010f04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f06:	4604      	mov	r4, r0
 8010f08:	4b0b      	ldr	r3, [pc, #44]	; (8010f38 <DisplayUdf::ShowNetmask()+0x34>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	69db      	ldr	r3, [r3, #28]
 8010f0e:	0e1a      	lsrs	r2, r3, #24
 8010f10:	9202      	str	r2, [sp, #8]
 8010f12:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010f16:	9201      	str	r2, [sp, #4]
 8010f18:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010f1c:	9200      	str	r2, [sp, #0]
 8010f1e:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8010f22:	4a06      	ldr	r2, [pc, #24]	; (8010f3c <DisplayUdf::ShowNetmask()+0x38>)
 8010f24:	b2db      	uxtb	r3, r3
 8010f26:	f7ff ff4b 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	b004      	add	sp, #16
 8010f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f32:	f7ff bfb3 	b.w	8010e9c <DisplayUdf::ShowIpAddress()>
 8010f36:	bf00      	nop
 8010f38:	20008aa8 	andcs	r8, r0, r8, lsr #21
 8010f3c:	08017334 	stmdaeq	r1, {r2, r4, r5, r8, r9, ip, sp, lr}

08010f40 <DisplayUdf::ShowGatewayIp()>:
 8010f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f42:	4604      	mov	r4, r0
 8010f44:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8010f48:	6980      	ldr	r0, [r0, #24]
 8010f4a:	f7ff ff34 	bl	8010db6 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010f4e:	4b0a      	ldr	r3, [pc, #40]	; (8010f78 <DisplayUdf::ShowGatewayIp()+0x38>)
 8010f50:	4620      	mov	r0, r4
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 8010f58:	699b      	ldr	r3, [r3, #24]
 8010f5a:	0e1a      	lsrs	r2, r3, #24
 8010f5c:	9202      	str	r2, [sp, #8]
 8010f5e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010f62:	9201      	str	r2, [sp, #4]
 8010f64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010f68:	9200      	str	r2, [sp, #0]
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	4a03      	ldr	r2, [pc, #12]	; (8010f7c <DisplayUdf::ShowGatewayIp()+0x3c>)
 8010f6e:	f7ff ff27 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 8010f72:	b004      	add	sp, #16
 8010f74:	bd10      	pop	{r4, pc}
 8010f76:	bf00      	nop
 8010f78:	20008aa8 	andcs	r8, r0, r8, lsr #21
 8010f7c:	08017343 	stmdaeq	r1, {r0, r1, r6, r8, r9, ip, sp, lr}

08010f80 <DisplayUdf::ShowHostName()>:
 8010f80:	b510      	push	{r4, lr}
 8010f82:	4604      	mov	r4, r0
 8010f84:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 8010f88:	6980      	ldr	r0, [r0, #24]
 8010f8a:	f7ff ff14 	bl	8010db6 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010f8e:	4b05      	ldr	r3, [pc, #20]	; (8010fa4 <DisplayUdf::ShowHostName()+0x24>)
 8010f90:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8010f94:	681a      	ldr	r2, [r3, #0]
 8010f96:	69a0      	ldr	r0, [r4, #24]
 8010f98:	3220      	adds	r2, #32
 8010f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f9e:	f7ff bef8 	b.w	8010d92 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8010fa2:	bf00      	nop
 8010fa4:	20008aa8 	andcs	r8, r0, r8, lsr #21

08010fa8 <DisplayUdf::Show()>:
 8010fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010faa:	4604      	mov	r4, r0
 8010fac:	21ff      	movs	r1, #255	; 0xff
 8010fae:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 8010fb2:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 8010fb6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8010fba:	2806      	cmp	r0, #6
 8010fbc:	bf88      	it	hi
 8010fbe:	7019      	strbhi	r1, [r3, #0]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d1f8      	bne.n	8010fb6 <DisplayUdf::Show()+0xe>
 8010fc4:	2501      	movs	r5, #1
 8010fc6:	4629      	mov	r1, r5
 8010fc8:	3501      	adds	r5, #1
 8010fca:	69a0      	ldr	r0, [r4, #24]
 8010fcc:	b2ed      	uxtb	r5, r5
 8010fce:	f7ff fef2 	bl	8010db6 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8010fd2:	2d06      	cmp	r5, #6
 8010fd4:	d1f7      	bne.n	8010fc6 <DisplayUdf::Show()+0x1e>
 8010fd6:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8010fda:	69a0      	ldr	r0, [r4, #24]
 8010fdc:	f104 021c 	add.w	r2, r4, #28
 8010fe0:	f7ff fed7 	bl	8010d92 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8010fe4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8010fe8:	69a0      	ldr	r0, [r4, #24]
 8010fea:	4a0d      	ldr	r2, [pc, #52]	; (8011020 <DisplayUdf::Show()+0x78>)
 8010fec:	f7ff fed1 	bl	8010d92 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8010ff0:	4b0c      	ldr	r3, [pc, #48]	; (8011024 <DisplayUdf::Show()+0x7c>)
 8010ff2:	4a0d      	ldr	r2, [pc, #52]	; (8011028 <DisplayUdf::Show()+0x80>)
 8010ff4:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8010ff8:	9300      	str	r3, [sp, #0]
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	2303      	movs	r3, #3
 8010ffe:	f7ff fedf 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 8011002:	4620      	mov	r0, r4
 8011004:	f7ff ff4a 	bl	8010e9c <DisplayUdf::ShowIpAddress()>
 8011008:	4620      	mov	r0, r4
 801100a:	f7ff ff99 	bl	8010f40 <DisplayUdf::ShowGatewayIp()>
 801100e:	4620      	mov	r0, r4
 8011010:	f7ff ff78 	bl	8010f04 <DisplayUdf::ShowNetmask()>
 8011014:	4620      	mov	r0, r4
 8011016:	b003      	add	sp, #12
 8011018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801101c:	f7ff bfb0 	b.w	8010f80 <DisplayUdf::ShowHostName()>
 8011020:	08016022 	stmdaeq	r1, {r1, r5, sp, lr}
 8011024:	2000a168 	andcs	sl, r0, r8, ror #2
 8011028:	08017352 	stmdaeq	r1, {r1, r4, r6, r8, r9, ip, sp, lr}

0801102c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 801102c:	3901      	subs	r1, #1
 801102e:	b510      	push	{r4, lr}
 8011030:	4604      	mov	r4, r0
 8011032:	2903      	cmp	r1, #3
 8011034:	d814      	bhi.n	8011060 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8011036:	e8df f001 	tbb	[pc, r1]
 801103a:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 801103e:	4b14      	ldr	r3, [pc, #80]	; (8011090 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011040:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8011044:	6818      	ldr	r0, [r3, #0]
 8011046:	f7f7 fab5 	bl	80085b4 <Display::Status(Display7SegmentMessage)>
 801104a:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801104e:	69a0      	ldr	r0, [r4, #24]
 8011050:	f7ff feb1 	bl	8010db6 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011054:	4a0f      	ldr	r2, [pc, #60]	; (8011094 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 8011056:	4620      	mov	r0, r4
 8011058:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 801105c:	f7ff feb0 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 8011060:	bd10      	pop	{r4, pc}
 8011062:	f248 0180 	movw	r1, #32896	; 0x8080
 8011066:	4b0a      	ldr	r3, [pc, #40]	; (8011090 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011068:	6818      	ldr	r0, [r3, #0]
 801106a:	f7f7 faa3 	bl	80085b4 <Display::Status(Display7SegmentMessage)>
 801106e:	e7f7      	b.n	8011060 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 8011070:	4b07      	ldr	r3, [pc, #28]	; (8011090 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 8011072:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8011076:	6818      	ldr	r0, [r3, #0]
 8011078:	f7f7 fa9c 	bl	80085b4 <Display::Status(Display7SegmentMessage)>
 801107c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011080:	69a0      	ldr	r0, [r4, #24]
 8011082:	f7ff fe98 	bl	8010db6 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011086:	4a04      	ldr	r2, [pc, #16]	; (8011098 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8011088:	e7e5      	b.n	8011056 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 801108a:	f645 3179 	movw	r1, #23417	; 0x5b79
 801108e:	e7ea      	b.n	8011066 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8011090:	2000a0d8 	ldrdcs	sl, [r0], -r8
 8011094:	08017361 	stmdaeq	r1, {r0, r5, r6, r8, r9, ip, sp, lr}
 8011098:	0801736f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}

0801109c <DisplayUdf::ShowShutdown()>:
 801109c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110a0:	4604      	mov	r4, r0
 80110a2:	6980      	ldr	r0, [r0, #24]
 80110a4:	b1d0      	cbz	r0, 80110dc <DisplayUdf::ShowShutdown()+0x40>
 80110a6:	f890 8005 	ldrb.w	r8, [r0, #5]
 80110aa:	6803      	ldr	r3, [r0, #0]
 80110ac:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 80110b0:	b2ed      	uxtb	r5, r5
 80110b2:	462a      	mov	r2, r5
 80110b4:	2100      	movs	r1, #0
 80110b6:	6a1b      	ldr	r3, [r3, #32]
 80110b8:	7906      	ldrb	r6, [r0, #4]
 80110ba:	2700      	movs	r7, #0
 80110bc:	4798      	blx	r3
 80110be:	3e01      	subs	r6, #1
 80110c0:	42b7      	cmp	r7, r6
 80110c2:	69a0      	ldr	r0, [r4, #24]
 80110c4:	d311      	bcc.n	80110ea <DisplayUdf::ShowShutdown()+0x4e>
 80110c6:	b120      	cbz	r0, 80110d2 <DisplayUdf::ShowShutdown()+0x36>
 80110c8:	6803      	ldr	r3, [r0, #0]
 80110ca:	462a      	mov	r2, r5
 80110cc:	2100      	movs	r1, #0
 80110ce:	6a1b      	ldr	r3, [r3, #32]
 80110d0:	4798      	blx	r3
 80110d2:	4641      	mov	r1, r8
 80110d4:	4a08      	ldr	r2, [pc, #32]	; (80110f8 <DisplayUdf::ShowShutdown()+0x5c>)
 80110d6:	69a0      	ldr	r0, [r4, #24]
 80110d8:	f7ff fe5b 	bl	8010d92 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 80110dc:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 80110e0:	4620      	mov	r0, r4
 80110e2:	f7f7 fa67 	bl	80085b4 <Display::Status(Display7SegmentMessage)>
 80110e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110ea:	b118      	cbz	r0, 80110f4 <DisplayUdf::ShowShutdown()+0x58>
 80110ec:	6803      	ldr	r3, [r0, #0]
 80110ee:	2120      	movs	r1, #32
 80110f0:	695b      	ldr	r3, [r3, #20]
 80110f2:	4798      	blx	r3
 80110f4:	3701      	adds	r7, #1
 80110f6:	e7e3      	b.n	80110c0 <DisplayUdf::ShowShutdown()+0x24>
 80110f8:	0801737d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, r9, ip, sp, lr}

080110fc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 80110fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80110fe:	88c6      	ldrh	r6, [r0, #6]
 8011100:	8885      	ldrh	r5, [r0, #4]
 8011102:	42ae      	cmp	r6, r5
 8011104:	d216      	bcs.n	8011134 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8011106:	4604      	mov	r4, r0
 8011108:	6800      	ldr	r0, [r0, #0]
 801110a:	1bad      	subs	r5, r5, r6
 801110c:	4430      	add	r0, r6
 801110e:	7a26      	ldrb	r6, [r4, #8]
 8011110:	b923      	cbnz	r3, 801111c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8011112:	b926      	cbnz	r6, 801111e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8011114:	9200      	str	r2, [sp, #0]
 8011116:	460b      	mov	r3, r1
 8011118:	4a09      	ldr	r2, [pc, #36]	; (8011140 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 801111a:	e003      	b.n	8011124 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 801111c:	b166      	cbz	r6, 8011138 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 801111e:	460b      	mov	r3, r1
 8011120:	9200      	str	r2, [sp, #0]
 8011122:	4a08      	ldr	r2, [pc, #32]	; (8011144 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8011124:	4629      	mov	r1, r5
 8011126:	f002 fa97 	bl	8013658 <snprintf>
 801112a:	4285      	cmp	r5, r0
 801112c:	bfa2      	ittt	ge
 801112e:	88e3      	ldrhge	r3, [r4, #6]
 8011130:	181b      	addge	r3, r3, r0
 8011132:	80e3      	strhge	r3, [r4, #6]
 8011134:	b002      	add	sp, #8
 8011136:	bd70      	pop	{r4, r5, r6, pc}
 8011138:	9200      	str	r2, [sp, #0]
 801113a:	460b      	mov	r3, r1
 801113c:	4a02      	ldr	r2, [pc, #8]	; (8011148 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 801113e:	e7f1      	b.n	8011124 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011140:	08015ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, ip, lr}
 8011144:	08015c9c 	stmdaeq	r1, {r2, r3, r4, r7, sl, fp, ip, lr}
 8011148:	08015ca6 	stmdaeq	r1, {r1, r2, r5, r7, sl, fp, ip, lr}

0801114c <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 801114c:	b510      	push	{r4, lr}
 801114e:	2220      	movs	r2, #32
 8011150:	4604      	mov	r4, r0
 8011152:	f840 1b04 	str.w	r1, [r0], #4
 8011156:	2100      	movs	r1, #0
 8011158:	f002 f83c 	bl	80131d4 <memset>
 801115c:	f647 7305 	movw	r3, #32517	; 0x7f05
 8011160:	4620      	mov	r0, r4
 8011162:	84a3      	strh	r3, [r4, #36]	; 0x24
 8011164:	bd10      	pop	{r4, pc}

08011166 <DisplayUdfParams::Load()>:
 8011166:	b508      	push	{r3, lr}
 8011168:	2300      	movs	r3, #0
 801116a:	4601      	mov	r1, r0
 801116c:	6043      	str	r3, [r0, #4]
 801116e:	6800      	ldr	r0, [r0, #0]
 8011170:	b120      	cbz	r0, 801117c <DisplayUdfParams::Load()+0x16>
 8011172:	6803      	ldr	r3, [r0, #0]
 8011174:	3104      	adds	r1, #4
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	4798      	blx	r3
 801117a:	2001      	movs	r0, #1
 801117c:	bd08      	pop	{r3, pc}
	...

08011180 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8011180:	6803      	ldr	r3, [r0, #0]
 8011182:	b1d3      	cbz	r3, 80111ba <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8011184:	2300      	movs	r3, #0
 8011186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011188:	460d      	mov	r5, r1
 801118a:	4616      	mov	r6, r2
 801118c:	4604      	mov	r4, r0
 801118e:	6043      	str	r3, [r0, #4]
 8011190:	4602      	mov	r2, r0
 8011192:	490a      	ldr	r1, [pc, #40]	; (80111bc <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8011194:	4668      	mov	r0, sp
 8011196:	f001 fa43 	bl	8012620 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801119a:	4632      	mov	r2, r6
 801119c:	4629      	mov	r1, r5
 801119e:	4668      	mov	r0, sp
 80111a0:	f001 fa42 	bl	8012628 <ReadConfigFile::Read(char const*, unsigned int)>
 80111a4:	4621      	mov	r1, r4
 80111a6:	f851 0b04 	ldr.w	r0, [r1], #4
 80111aa:	6803      	ldr	r3, [r0, #0]
 80111ac:	689b      	ldr	r3, [r3, #8]
 80111ae:	4798      	blx	r3
 80111b0:	4668      	mov	r0, sp
 80111b2:	f001 fa38 	bl	8012626 <ReadConfigFile::~ReadConfigFile()>
 80111b6:	b002      	add	sp, #8
 80111b8:	bd70      	pop	{r4, r5, r6, pc}
 80111ba:	4770      	bx	lr
 80111bc:	08011289 	stmdaeq	r1, {r0, r3, r7, r9, ip}

080111c0 <DisplayUdfParams::callbackFunction(char const*)>:
 80111c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80111c2:	460e      	mov	r6, r1
 80111c4:	4604      	mov	r4, r0
 80111c6:	492c      	ldr	r1, [pc, #176]	; (8011278 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 80111c8:	4630      	mov	r0, r6
 80111ca:	f10d 0207 	add.w	r2, sp, #7
 80111ce:	f001 fad7 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80111d2:	b968      	cbnz	r0, 80111f0 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 80111d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80111d8:	6863      	ldr	r3, [r4, #4]
 80111da:	2a7f      	cmp	r2, #127	; 0x7f
 80111dc:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80111e0:	bf14      	ite	ne
 80111e2:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 80111e6:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 80111ea:	6063      	str	r3, [r4, #4]
 80111ec:	b003      	add	sp, #12
 80111ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111f0:	4630      	mov	r0, r6
 80111f2:	4922      	ldr	r1, [pc, #136]	; (801127c <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 80111f4:	f10d 0207 	add.w	r2, sp, #7
 80111f8:	f001 fac2 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80111fc:	b958      	cbnz	r0, 8011216 <DisplayUdfParams::callbackFunction(char const*)+0x56>
 80111fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011202:	6863      	ldr	r3, [r4, #4]
 8011204:	2a05      	cmp	r2, #5
 8011206:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 801120a:	bf14      	ite	ne
 801120c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8011210:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8011214:	e7e9      	b.n	80111ea <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011216:	4630      	mov	r0, r6
 8011218:	4919      	ldr	r1, [pc, #100]	; (8011280 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 801121a:	f10d 0207 	add.w	r2, sp, #7
 801121e:	f001 faaf 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011222:	b948      	cbnz	r0, 8011238 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8011224:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011228:	6863      	ldr	r3, [r4, #4]
 801122a:	b112      	cbz	r2, 8011232 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 801122c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011230:	e7db      	b.n	80111ea <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011236:	e7d8      	b.n	80111ea <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011238:	2500      	movs	r5, #0
 801123a:	4f12      	ldr	r7, [pc, #72]	; (8011284 <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 801123c:	4630      	mov	r0, r6
 801123e:	f857 1b04 	ldr.w	r1, [r7], #4
 8011242:	f10d 0207 	add.w	r2, sp, #7
 8011246:	f001 fa9b 	bl	8012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801124a:	b980      	cbnz	r0, 801126e <DisplayUdfParams::callbackFunction(char const*)+0xae>
 801124c:	2301      	movs	r3, #1
 801124e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011252:	40ab      	lsls	r3, r5
 8011254:	1e4e      	subs	r6, r1, #1
 8011256:	2e05      	cmp	r6, #5
 8011258:	6862      	ldr	r2, [r4, #4]
 801125a:	4425      	add	r5, r4
 801125c:	d802      	bhi.n	8011264 <DisplayUdfParams::callbackFunction(char const*)+0xa4>
 801125e:	7229      	strb	r1, [r5, #8]
 8011260:	4313      	orrs	r3, r2
 8011262:	e7c2      	b.n	80111ea <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011264:	ea22 0203 	bic.w	r2, r2, r3
 8011268:	7228      	strb	r0, [r5, #8]
 801126a:	6062      	str	r2, [r4, #4]
 801126c:	e7be      	b.n	80111ec <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 801126e:	3501      	adds	r5, #1
 8011270:	2d14      	cmp	r5, #20
 8011272:	d1e3      	bne.n	801123c <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 8011274:	e7ba      	b.n	80111ec <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 8011276:	bf00      	nop
 8011278:	0801743e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, ip, sp, lr}
 801127c:	08017406 	stmdaeq	r1, {r1, r2, sl, ip, sp, lr}
 8011280:	08017414 	stmdaeq	r1, {r2, r4, sl, ip, sp, lr}
 8011284:	08017390 	stmdaeq	r1, {r4, r7, r8, r9, ip, sp, lr}

08011288 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 8011288:	f7ff bf9a 	b.w	80111c0 <DisplayUdfParams::callbackFunction(char const*)>

0801128c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 801128c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011290:	4604      	mov	r4, r0
 8011292:	4615      	mov	r5, r2
 8011294:	461e      	mov	r6, r3
 8011296:	b086      	sub	sp, #24
 8011298:	3004      	adds	r0, #4
 801129a:	b379      	cbz	r1, 80112fc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 801129c:	2222      	movs	r2, #34	; 0x22
 801129e:	f001 ff82 	bl	80131a6 <memmove>
 80112a2:	462a      	mov	r2, r5
 80112a4:	4633      	mov	r3, r6
 80112a6:	493d      	ldr	r1, [pc, #244]	; (801139c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 80112a8:	a803      	add	r0, sp, #12
 80112aa:	f001 f919 	bl	80124e0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 80112ae:	6863      	ldr	r3, [r4, #4]
 80112b0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80112b4:	493a      	ldr	r1, [pc, #232]	; (80113a0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 80112b6:	f3c3 7340 	ubfx	r3, r3, #29, #1
 80112ba:	a803      	add	r0, sp, #12
 80112bc:	f7ff ff1e 	bl	80110fc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80112c0:	6863      	ldr	r3, [r4, #4]
 80112c2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80112c6:	f3c3 7300 	ubfx	r3, r3, #28, #1
 80112ca:	4936      	ldr	r1, [pc, #216]	; (80113a4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 80112cc:	a803      	add	r0, sp, #12
 80112ce:	f7ff ff15 	bl	80110fc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80112d2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80112d6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80112da:	6863      	ldr	r3, [r4, #4]
 80112dc:	42aa      	cmp	r2, r5
 80112de:	d226      	bcs.n	801132e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 80112e0:	9803      	ldr	r0, [sp, #12]
 80112e2:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 80112e6:	4410      	add	r0, r2
 80112e8:	eba5 0502 	sub.w	r5, r5, r2
 80112ec:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80112f0:	d10b      	bne.n	801130a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 80112f2:	b962      	cbnz	r2, 801130e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 80112f4:	9200      	str	r2, [sp, #0]
 80112f6:	4b2c      	ldr	r3, [pc, #176]	; (80113a8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 80112f8:	4a2c      	ldr	r2, [pc, #176]	; (80113ac <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 80112fa:	e00e      	b.n	801131a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 80112fc:	6823      	ldr	r3, [r4, #0]
 80112fe:	4601      	mov	r1, r0
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	4618      	mov	r0, r3
 8011304:	68d2      	ldr	r2, [r2, #12]
 8011306:	4790      	blx	r2
 8011308:	e7cb      	b.n	80112a2 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 801130a:	2a00      	cmp	r2, #0
 801130c:	d041      	beq.n	8011392 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 801130e:	3b00      	subs	r3, #0
 8011310:	bf18      	it	ne
 8011312:	2301      	movne	r3, #1
 8011314:	4a26      	ldr	r2, [pc, #152]	; (80113b0 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8011316:	9300      	str	r3, [sp, #0]
 8011318:	4b23      	ldr	r3, [pc, #140]	; (80113a8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801131a:	4629      	mov	r1, r5
 801131c:	f002 f99c 	bl	8013658 <snprintf>
 8011320:	4285      	cmp	r5, r0
 8011322:	bfa2      	ittt	ge
 8011324:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8011328:	181b      	addge	r3, r3, r0
 801132a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801132e:	2500      	movs	r5, #0
 8011330:	2701      	movs	r7, #1
 8011332:	4e20      	ldr	r6, [pc, #128]	; (80113b4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8011334:	f104 0808 	add.w	r8, r4, #8
 8011338:	f856 1b04 	ldr.w	r1, [r6], #4
 801133c:	780b      	ldrb	r3, [r1, #0]
 801133e:	b15b      	cbz	r3, 8011358 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8011340:	6862      	ldr	r2, [r4, #4]
 8011342:	fa07 f305 	lsl.w	r3, r7, r5
 8011346:	4393      	bics	r3, r2
 8011348:	bf0c      	ite	eq
 801134a:	2301      	moveq	r3, #1
 801134c:	2300      	movne	r3, #0
 801134e:	f818 2005 	ldrb.w	r2, [r8, r5]
 8011352:	a803      	add	r0, sp, #12
 8011354:	f7ff fed2 	bl	80110fc <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8011358:	3501      	adds	r5, #1
 801135a:	2d14      	cmp	r5, #20
 801135c:	d1ec      	bne.n	8011338 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 801135e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8011362:	b17b      	cbz	r3, 8011384 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 8011364:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011368:	9b03      	ldr	r3, [sp, #12]
 801136a:	4413      	add	r3, r2
 801136c:	227d      	movs	r2, #125	; 0x7d
 801136e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011372:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011376:	9903      	ldr	r1, [sp, #12]
 8011378:	54ca      	strb	r2, [r1, r3]
 801137a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801137e:	3301      	adds	r3, #1
 8011380:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011384:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801138a:	601a      	str	r2, [r3, #0]
 801138c:	b006      	add	sp, #24
 801138e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011392:	2301      	movs	r3, #1
 8011394:	4a08      	ldr	r2, [pc, #32]	; (80113b8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 8011396:	9300      	str	r3, [sp, #0]
 8011398:	4b03      	ldr	r3, [pc, #12]	; (80113a8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 801139a:	e7be      	b.n	801131a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 801139c:	08017432 	stmdaeq	r1, {r1, r4, r5, sl, ip, sp, lr}
 80113a0:	0801743e 	stmdaeq	r1, {r1, r2, r3, r4, r5, sl, ip, sp, lr}
 80113a4:	08017406 	stmdaeq	r1, {r1, r2, sl, ip, sp, lr}
 80113a8:	08017414 	stmdaeq	r1, {r2, r4, sl, ip, sp, lr}
 80113ac:	08015ca5 	stmdaeq	r1, {r0, r2, r5, r7, sl, fp, ip, lr}
 80113b0:	08015c9c 	stmdaeq	r1, {r2, r3, r4, r7, sl, fp, ip, lr}
 80113b4:	08017390 	stmdaeq	r1, {r4, r7, r8, r9, ip, sp, lr}
 80113b8:	08015ca6 	stmdaeq	r1, {r1, r2, r5, r7, sl, fp, ip, lr}

080113bc <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 80113bc:	b513      	push	{r0, r1, r4, lr}
 80113be:	6804      	ldr	r4, [r0, #0]
 80113c0:	b914      	cbnz	r4, 80113c8 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80113c2:	601c      	str	r4, [r3, #0]
 80113c4:	b002      	add	sp, #8
 80113c6:	bd10      	pop	{r4, pc}
 80113c8:	9300      	str	r3, [sp, #0]
 80113ca:	4613      	mov	r3, r2
 80113cc:	460a      	mov	r2, r1
 80113ce:	2100      	movs	r1, #0
 80113d0:	f7ff ff5c 	bl	801128c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 80113d4:	e7f6      	b.n	80113c4 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

080113d6 <DisplayUdfParams::Set(DisplayUdf*)>:
 80113d6:	6843      	ldr	r3, [r0, #4]
 80113d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113dc:	009a      	lsls	r2, r3, #2
 80113de:	4604      	mov	r4, r0
 80113e0:	460e      	mov	r6, r1
 80113e2:	d506      	bpl.n	80113f2 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 80113e4:	6988      	ldr	r0, [r1, #24]
 80113e6:	b120      	cbz	r0, 80113f2 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 80113e8:	6803      	ldr	r3, [r0, #0]
 80113ea:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 80113ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f0:	4798      	blx	r3
 80113f2:	6863      	ldr	r3, [r4, #4]
 80113f4:	69b0      	ldr	r0, [r6, #24]
 80113f6:	00db      	lsls	r3, r3, #3
 80113f8:	bf41      	itttt	mi
 80113fa:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 80113fe:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8011402:	4353      	mulmi	r3, r2
 8011404:	6173      	strmi	r3, [r6, #20]
 8011406:	6861      	ldr	r1, [r4, #4]
 8011408:	f3c1 7180 	ubfx	r1, r1, #30, #1
 801140c:	b110      	cbz	r0, 8011414 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 801140e:	6803      	ldr	r3, [r0, #0]
 8011410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011412:	4798      	blx	r3
 8011414:	2500      	movs	r5, #0
 8011416:	2701      	movs	r7, #1
 8011418:	f104 0808 	add.w	r8, r4, #8
 801141c:	6862      	ldr	r2, [r4, #4]
 801141e:	fa07 f305 	lsl.w	r3, r7, r5
 8011422:	4393      	bics	r3, r2
 8011424:	d105      	bne.n	8011432 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8011426:	462a      	mov	r2, r5
 8011428:	4630      	mov	r0, r6
 801142a:	f818 1005 	ldrb.w	r1, [r8, r5]
 801142e:	f7ff fd0c 	bl	8010e4a <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8011432:	3501      	adds	r5, #1
 8011434:	2d14      	cmp	r5, #20
 8011436:	d1f1      	bne.n	801141c <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8011438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801143c <DisplayUdfParams::Dump()>:
 801143c:	4770      	bx	lr
	...

08011440 <artnet::display_shortname(char const*)>:
 8011440:	4b02      	ldr	r3, [pc, #8]	; (801144c <artnet::display_shortname(char const*)+0xc>)
 8011442:	6819      	ldr	r1, [r3, #0]
 8011444:	4b02      	ldr	r3, [pc, #8]	; (8011450 <artnet::display_shortname(char const*)+0x10>)
 8011446:	6818      	ldr	r0, [r3, #0]
 8011448:	f000 b81e 	b.w	8011488 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 801144c:	20000c68 	andcs	r0, r0, r8, ror #24
 8011450:	20009078 	andcs	r9, r0, r8, ror r0

08011454 <artnet::display_longname(char const*)>:
 8011454:	4770      	bx	lr
	...

08011458 <artnet::display_universe_switch(unsigned int, unsigned char)>:
 8011458:	4b02      	ldr	r3, [pc, #8]	; (8011464 <artnet::display_universe_switch(unsigned int, unsigned char)+0xc>)
 801145a:	6819      	ldr	r1, [r3, #0]
 801145c:	4b02      	ldr	r3, [pc, #8]	; (8011468 <artnet::display_universe_switch(unsigned int, unsigned char)+0x10>)
 801145e:	6818      	ldr	r0, [r3, #0]
 8011460:	f000 b834 	b.w	80114cc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8011464:	20000c68 	andcs	r0, r0, r8, ror #24
 8011468:	20009078 	andcs	r9, r0, r8, ror r0

0801146c <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>:
 801146c:	4b02      	ldr	r3, [pc, #8]	; (8011478 <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0xc>)
 801146e:	6819      	ldr	r1, [r3, #0]
 8011470:	4b02      	ldr	r3, [pc, #8]	; (801147c <artnet::display_merge_mode(unsigned int, lightset::MergeMode)+0x10>)
 8011472:	6818      	ldr	r0, [r3, #0]
 8011474:	f000 b82a 	b.w	80114cc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8011478:	20000c68 	andcs	r0, r0, r8, ror #24
 801147c:	20009078 	andcs	r9, r0, r8, ror r0

08011480 <artnet::display_port_protocol(unsigned int, artnet::PortProtocol)>:
 8011480:	f7ff bff4 	b.w	801146c <artnet::display_merge_mode(unsigned int, lightset::MergeMode)>

08011484 <artnet::display_rdm_enabled(unsigned int, bool)>:
 8011484:	4770      	bx	lr

08011486 <artnet::display_failsafe(unsigned char)>:
 8011486:	4770      	bx	lr

08011488 <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8011488:	b570      	push	{r4, r5, r6, lr}
 801148a:	4605      	mov	r5, r0
 801148c:	6980      	ldr	r0, [r0, #24]
 801148e:	460c      	mov	r4, r1
 8011490:	b120      	cbz	r0, 801149c <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 8011492:	6803      	ldr	r3, [r0, #0]
 8011494:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8011498:	691b      	ldr	r3, [r3, #16]
 801149a:	4798      	blx	r3
 801149c:	69a8      	ldr	r0, [r5, #24]
 801149e:	f104 0238 	add.w	r2, r4, #56	; 0x38
 80114a2:	b190      	cbz	r0, 80114ca <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 80114a4:	2300      	movs	r3, #0
 80114a6:	7906      	ldrb	r6, [r0, #4]
 80114a8:	3437      	adds	r4, #55	; 0x37
 80114aa:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80114ae:	b119      	cbz	r1, 80114b8 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 80114b0:	1c59      	adds	r1, r3, #1
 80114b2:	429e      	cmp	r6, r3
 80114b4:	460b      	mov	r3, r1
 80114b6:	dcf8      	bgt.n	80114aa <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 80114b8:	6801      	ldr	r1, [r0, #0]
 80114ba:	b2db      	uxtb	r3, r3
 80114bc:	69cc      	ldr	r4, [r1, #28]
 80114be:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 80114c2:	46a4      	mov	ip, r4
 80114c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114c8:	4760      	bx	ip
 80114ca:	bd70      	pop	{r4, r5, r6, pc}

080114cc <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 80114cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d0:	460c      	mov	r4, r1
 80114d2:	b089      	sub	sp, #36	; 0x24
 80114d4:	4606      	mov	r6, r0
 80114d6:	2301      	movs	r3, #1
 80114d8:	2100      	movs	r1, #0
 80114da:	4620      	mov	r0, r4
 80114dc:	f10d 021f 	add.w	r2, sp, #31
 80114e0:	f7f8 fe92 	bl	800a208 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 80114e4:	b1e8      	cbz	r0, 8011522 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x56>
 80114e6:	f8d4 5a18 	ldr.w	r5, [r4, #2584]	; 0xa18
 80114ea:	4a2b      	ldr	r2, [pc, #172]	; (8011598 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>)
 80114ec:	4b2b      	ldr	r3, [pc, #172]	; (801159c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>)
 80114ee:	4f2c      	ldr	r7, [pc, #176]	; (80115a0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>)
 80114f0:	2d00      	cmp	r5, #0
 80114f2:	bf18      	it	ne
 80114f4:	4613      	movne	r3, r2
 80114f6:	f8d4 5a20 	ldr.w	r5, [r4, #2592]	; 0xa20
 80114fa:	4a2a      	ldr	r2, [pc, #168]	; (80115a4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>)
 80114fc:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 8011500:	2d00      	cmp	r5, #0
 8011502:	bf18      	it	ne
 8011504:	463a      	movne	r2, r7
 8011506:	f89d 001f 	ldrb.w	r0, [sp, #31]
 801150a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801150e:	e9cd 1000 	strd	r1, r0, [sp]
 8011512:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8011516:	4630      	mov	r0, r6
 8011518:	4a23      	ldr	r2, [pc, #140]	; (80115a8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xdc>)
 801151a:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
 801151e:	f7ff fc4f 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 8011522:	4627      	mov	r7, r4
 8011524:	2500      	movs	r5, #0
 8011526:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801159c <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>
 801152a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8011598 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>
 801152e:	f8df a074 	ldr.w	sl, [pc, #116]	; 80115a4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>
 8011532:	4629      	mov	r1, r5
 8011534:	2301      	movs	r3, #1
 8011536:	4620      	mov	r0, r4
 8011538:	f10d 021f 	add.w	r2, sp, #31
 801153c:	f7f8 fe64 	bl	800a208 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8011540:	3501      	adds	r5, #1
 8011542:	b308      	cbz	r0, 8011588 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xbc>
 8011544:	f8d7 ca18 	ldr.w	ip, [r7, #2584]	; 0xa18
 8011548:	f8df b054 	ldr.w	fp, [pc, #84]	; 80115a0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>
 801154c:	f1bc 0f00 	cmp.w	ip, #0
 8011550:	bf0c      	ite	eq
 8011552:	46c6      	moveq	lr, r8
 8011554:	46ce      	movne	lr, r9
 8011556:	f8d7 ca20 	ldr.w	ip, [r7, #2592]	; 0xa20
 801155a:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 801155e:	f1bc 0f00 	cmp.w	ip, #0
 8011562:	bf08      	it	eq
 8011564:	46d3      	moveq	fp, sl
 8011566:	f89d 001f 	ldrb.w	r0, [sp, #31]
 801156a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 801156e:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8011572:	e9cd eb03 	strd	lr, fp, [sp, #12]
 8011576:	9300      	str	r3, [sp, #0]
 8011578:	f106 0143 	add.w	r1, r6, #67	; 0x43
 801157c:	462b      	mov	r3, r5
 801157e:	4630      	mov	r0, r6
 8011580:	4a0a      	ldr	r2, [pc, #40]	; (80115ac <DisplayUdf::ShowUniverse(ArtNetNode*)+0xe0>)
 8011582:	5d49      	ldrb	r1, [r1, r5]
 8011584:	f7ff fc1c 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 8011588:	2d04      	cmp	r5, #4
 801158a:	f107 0728 	add.w	r7, r7, #40	; 0x28
 801158e:	d1d0      	bne.n	8011532 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x66>
 8011590:	b009      	add	sp, #36	; 0x24
 8011592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011596:	bf00      	nop
 8011598:	08016b4d 	stmdaeq	r1, {r0, r2, r3, r6, r8, r9, fp, sp, lr}
 801159c:	08016b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, sp, lr}
 80115a0:	08016b59 	stmdaeq	r1, {r0, r3, r4, r6, r8, r9, fp, sp, lr}
 80115a4:	08017448 	stmdaeq	r1, {r3, r6, sl, ip, sp, lr}
 80115a8:	0801744d 	stmdaeq	r1, {r0, r2, r3, r6, sl, ip, sp, lr}
 80115ac:	08017461 	stmdaeq	r1, {r0, r5, r6, sl, ip, sp, lr}

080115b0 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 80115b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115b4:	4606      	mov	r6, r0
 80115b6:	460f      	mov	r7, r1
 80115b8:	2500      	movs	r5, #0
 80115ba:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8011600 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x50>
 80115be:	b085      	sub	sp, #20
 80115c0:	f100 0849 	add.w	r8, r0, #73	; 0x49
 80115c4:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 80115c8:	f105 0341 	add.w	r3, r5, #65	; 0x41
 80115cc:	b9ad      	cbnz	r5, 80115fa <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x4a>
 80115ce:	f8d7 4a30 	ldr.w	r4, [r7, #2608]	; 0xa30
 80115d2:	0e22      	lsrs	r2, r4, #24
 80115d4:	9203      	str	r2, [sp, #12]
 80115d6:	f3c4 4207 	ubfx	r2, r4, #16, #8
 80115da:	9202      	str	r2, [sp, #8]
 80115dc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 80115e0:	b2e4      	uxtb	r4, r4
 80115e2:	9201      	str	r2, [sp, #4]
 80115e4:	4630      	mov	r0, r6
 80115e6:	464a      	mov	r2, r9
 80115e8:	9400      	str	r4, [sp, #0]
 80115ea:	3501      	adds	r5, #1
 80115ec:	f7ff fbe8 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 80115f0:	2d04      	cmp	r5, #4
 80115f2:	d1e7      	bne.n	80115c4 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x14>
 80115f4:	b005      	add	sp, #20
 80115f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115fa:	2400      	movs	r4, #0
 80115fc:	e7e9      	b.n	80115d2 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x22>
 80115fe:	bf00      	nop
 8011600:	08017477 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, sl, ip, sp, lr}

08011604 <DisplayUdf::Show(ArtNetNode*)>:
 8011604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011606:	4604      	mov	r4, r0
 8011608:	460d      	mov	r5, r1
 801160a:	f7ff fccd 	bl	8010fa8 <DisplayUdf::Show()>
 801160e:	4629      	mov	r1, r5
 8011610:	4620      	mov	r0, r4
 8011612:	f7ff ff39 	bl	8011488 <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8011616:	4629      	mov	r1, r5
 8011618:	4620      	mov	r0, r4
 801161a:	f7ff ff57 	bl	80114cc <DisplayUdf::ShowUniverse(ArtNetNode*)>
 801161e:	4629      	mov	r1, r5
 8011620:	4620      	mov	r0, r4
 8011622:	f7ff ffc5 	bl	80115b0 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 8011626:	f895 29fb 	ldrb.w	r2, [r5, #2555]	; 0x9fb
 801162a:	f895 39fa 	ldrb.w	r3, [r5, #2554]	; 0x9fa
 801162e:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8011632:	4413      	add	r3, r2
 8011634:	4620      	mov	r0, r4
 8011636:	4a0d      	ldr	r2, [pc, #52]	; (801166c <DisplayUdf::Show(ArtNetNode*)+0x68>)
 8011638:	f7ff fbc2 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 801163c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801163e:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8011642:	2a02      	cmp	r2, #2
 8011644:	d001      	beq.n	801164a <DisplayUdf::Show(ArtNetNode*)+0x46>
 8011646:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011648:	b92b      	cbnz	r3, 8011656 <DisplayUdf::Show(ArtNetNode*)+0x52>
 801164a:	4620      	mov	r0, r4
 801164c:	4a08      	ldr	r2, [pc, #32]	; (8011670 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 801164e:	f7ff fbb7 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 8011652:	b003      	add	sp, #12
 8011654:	bd30      	pop	{r4, r5, pc}
 8011656:	4807      	ldr	r0, [pc, #28]	; (8011674 <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8011658:	9300      	str	r3, [sp, #0]
 801165a:	4b07      	ldr	r3, [pc, #28]	; (8011678 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 801165c:	2a00      	cmp	r2, #0
 801165e:	bf08      	it	eq
 8011660:	4603      	moveq	r3, r0
 8011662:	4620      	mov	r0, r4
 8011664:	4a05      	ldr	r2, [pc, #20]	; (801167c <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8011666:	f7ff fbab 	bl	8010dc0 <Display::Printf(unsigned char, char const*, ...)>
 801166a:	e7f2      	b.n	8011652 <DisplayUdf::Show(ArtNetNode*)+0x4e>
 801166c:	08017487 	stmdaeq	r1, {r0, r1, r2, r7, sl, ip, sp, lr}
 8011670:	0801748e 	stmdaeq	r1, {r1, r2, r3, r7, sl, ip, sp, lr}
 8011674:	080158c8 	stmdaeq	r1, {r3, r6, r7, fp, ip, lr}
 8011678:	080158bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, fp, ip, lr}
 801167c:	08017495 	stmdaeq	r1, {r0, r2, r4, r7, sl, ip, sp, lr}

08011680 <network::display_emac_start()>:
 8011680:	4b01      	ldr	r3, [pc, #4]	; (8011688 <network::display_emac_start()+0x8>)
 8011682:	6818      	ldr	r0, [r3, #0]
 8011684:	f7ff bbfa 	b.w	8010e7c <DisplayUdf::ShowEmacStart()>
 8011688:	20009078 	andcs	r9, r0, r8, ror r0

0801168c <network::display_ip()>:
 801168c:	4b01      	ldr	r3, [pc, #4]	; (8011694 <network::display_ip()+0x8>)
 801168e:	6818      	ldr	r0, [r3, #0]
 8011690:	f7ff bc04 	b.w	8010e9c <DisplayUdf::ShowIpAddress()>
 8011694:	20009078 	andcs	r9, r0, r8, ror r0

08011698 <network::display_netmask()>:
 8011698:	4b01      	ldr	r3, [pc, #4]	; (80116a0 <network::display_netmask()+0x8>)
 801169a:	6818      	ldr	r0, [r3, #0]
 801169c:	f7ff bc32 	b.w	8010f04 <DisplayUdf::ShowNetmask()>
 80116a0:	20009078 	andcs	r9, r0, r8, ror r0

080116a4 <network::display_gateway()>:
 80116a4:	4b01      	ldr	r3, [pc, #4]	; (80116ac <network::display_gateway()+0x8>)
 80116a6:	6818      	ldr	r0, [r3, #0]
 80116a8:	f7ff bc4a 	b.w	8010f40 <DisplayUdf::ShowGatewayIp()>
 80116ac:	20009078 	andcs	r9, r0, r8, ror r0

080116b0 <network::display_emac_shutdown()>:
 80116b0:	4b01      	ldr	r3, [pc, #4]	; (80116b8 <network::display_emac_shutdown()+0x8>)
 80116b2:	6818      	ldr	r0, [r3, #0]
 80116b4:	f7ff bcf2 	b.w	801109c <DisplayUdf::ShowShutdown()>
 80116b8:	20009078 	andcs	r9, r0, r8, ror r0

080116bc <network::display_dhcp_status(network::dhcp::ClientStatus)>:
 80116bc:	4b02      	ldr	r3, [pc, #8]	; (80116c8 <network::display_dhcp_status(network::dhcp::ClientStatus)+0xc>)
 80116be:	4601      	mov	r1, r0
 80116c0:	6818      	ldr	r0, [r3, #0]
 80116c2:	f7ff bcb3 	b.w	801102c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80116c6:	bf00      	nop
 80116c8:	20009078 	andcs	r9, r0, r8, ror r0

080116cc <ConfigStore::GetStoreOffset(configstore::Store)>:
 80116cc:	2300      	movs	r3, #0
 80116ce:	2020      	movs	r0, #32
 80116d0:	b510      	push	{r4, lr}
 80116d2:	4a04      	ldr	r2, [pc, #16]	; (80116e4 <ConfigStore::GetStoreOffset(configstore::Store)+0x18>)
 80116d4:	428b      	cmp	r3, r1
 80116d6:	d100      	bne.n	80116da <ConfigStore::GetStoreOffset(configstore::Store)+0xe>
 80116d8:	bd10      	pop	{r4, pc}
 80116da:	f852 4b04 	ldr.w	r4, [r2], #4
 80116de:	3301      	adds	r3, #1
 80116e0:	4420      	add	r0, r4
 80116e2:	e7f7      	b.n	80116d4 <ConfigStore::GetStoreOffset(configstore::Store)+0x8>
 80116e4:	080174a0 	stmdaeq	r1, {r5, r7, sl, ip, sp, lr}

080116e8 <ConfigStore::Init()>:
 80116e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116ec:	b085      	sub	sp, #20
 80116ee:	4607      	mov	r7, r0
 80116f0:	f000 fae6 	bl	8011cc0 <StoreDevice::GetSectorSize() const>
 80116f4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80116f8:	4605      	mov	r5, r0
 80116fa:	d004      	beq.n	8011706 <ConfigStore::Init()+0x1e>
 80116fc:	2500      	movs	r5, #0
 80116fe:	4628      	mov	r0, r5
 8011700:	b005      	add	sp, #20
 8011702:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011706:	4638      	mov	r0, r7
 8011708:	f000 fad8 	bl	8011cbc <StoreDevice::GetSize() const>
 801170c:	4b3a      	ldr	r3, [pc, #232]	; (80117f8 <ConfigStore::Init()+0x110>)
 801170e:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 8011712:	f3c1 060b 	ubfx	r6, r1, #0, #12
 8011716:	6019      	str	r1, [r3, #0]
 8011718:	2e00      	cmp	r6, #0
 801171a:	d1ef      	bne.n	80116fc <ConfigStore::Init()+0x14>
 801171c:	4c37      	ldr	r4, [pc, #220]	; (80117fc <ConfigStore::Init()+0x114>)
 801171e:	ab03      	add	r3, sp, #12
 8011720:	462a      	mov	r2, r5
 8011722:	9300      	str	r3, [sp, #0]
 8011724:	4638      	mov	r0, r7
 8011726:	4623      	mov	r3, r4
 8011728:	f000 facc 	bl	8011cc4 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>
 801172c:	7823      	ldrb	r3, [r4, #0]
 801172e:	2b41      	cmp	r3, #65	; 0x41
 8011730:	bf1c      	itt	ne
 8011732:	2341      	movne	r3, #65	; 0x41
 8011734:	7023      	strbne	r3, [r4, #0]
 8011736:	7863      	ldrb	r3, [r4, #1]
 8011738:	bf14      	ite	ne
 801173a:	4635      	movne	r5, r6
 801173c:	2501      	moveq	r5, #1
 801173e:	2b76      	cmp	r3, #118	; 0x76
 8011740:	bf1c      	itt	ne
 8011742:	2376      	movne	r3, #118	; 0x76
 8011744:	7063      	strbne	r3, [r4, #1]
 8011746:	78a3      	ldrb	r3, [r4, #2]
 8011748:	bf18      	it	ne
 801174a:	2500      	movne	r5, #0
 801174c:	2b56      	cmp	r3, #86	; 0x56
 801174e:	bf1c      	itt	ne
 8011750:	2356      	movne	r3, #86	; 0x56
 8011752:	70a3      	strbne	r3, [r4, #2]
 8011754:	78e3      	ldrb	r3, [r4, #3]
 8011756:	bf18      	it	ne
 8011758:	2500      	movne	r5, #0
 801175a:	2b10      	cmp	r3, #16
 801175c:	d01f      	beq.n	801179e <ConfigStore::Init()+0xb6>
 801175e:	2310      	movs	r3, #16
 8011760:	70e3      	strb	r3, [r4, #3]
 8011762:	2201      	movs	r2, #1
 8011764:	2500      	movs	r5, #0
 8011766:	f04f 09ff 	mov.w	r9, #255	; 0xff
 801176a:	4b25      	ldr	r3, [pc, #148]	; (8011800 <ConfigStore::Init()+0x118>)
 801176c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8011804 <ConfigStore::Init()+0x11c>
 8011770:	701a      	strb	r2, [r3, #0]
 8011772:	4631      	mov	r1, r6
 8011774:	4638      	mov	r0, r7
 8011776:	f7ff ffa9 	bl	80116cc <ConfigStore::GetStoreOffset(configstore::Store)>
 801177a:	1823      	adds	r3, r4, r0
 801177c:	5425      	strb	r5, [r4, r0]
 801177e:	705d      	strb	r5, [r3, #1]
 8011780:	709d      	strb	r5, [r3, #2]
 8011782:	70dd      	strb	r5, [r3, #3]
 8011784:	f858 3b04 	ldr.w	r3, [r8], #4
 8011788:	1d02      	adds	r2, r0, #4
 801178a:	4403      	add	r3, r0
 801178c:	429a      	cmp	r2, r3
 801178e:	d32f      	bcc.n	80117f0 <ConfigStore::Init()+0x108>
 8011790:	3601      	adds	r6, #1
 8011792:	2e1c      	cmp	r6, #28
 8011794:	d1ed      	bne.n	8011772 <ConfigStore::Init()+0x8a>
 8011796:	2501      	movs	r5, #1
 8011798:	4b1b      	ldr	r3, [pc, #108]	; (8011808 <ConfigStore::Init()+0x120>)
 801179a:	601d      	str	r5, [r3, #0]
 801179c:	e7af      	b.n	80116fe <ConfigStore::Init()+0x16>
 801179e:	2d00      	cmp	r5, #0
 80117a0:	d0df      	beq.n	8011762 <ConfigStore::Init()+0x7a>
 80117a2:	f04f 0900 	mov.w	r9, #0
 80117a6:	46c8      	mov	r8, r9
 80117a8:	4631      	mov	r1, r6
 80117aa:	4638      	mov	r0, r7
 80117ac:	f7ff ff8e 	bl	80116cc <ConfigStore::GetStoreOffset(configstore::Store)>
 80117b0:	5c23      	ldrb	r3, [r4, r0]
 80117b2:	2bff      	cmp	r3, #255	; 0xff
 80117b4:	d112      	bne.n	80117dc <ConfigStore::Init()+0xf4>
 80117b6:	1823      	adds	r3, r4, r0
 80117b8:	785a      	ldrb	r2, [r3, #1]
 80117ba:	2aff      	cmp	r2, #255	; 0xff
 80117bc:	d10e      	bne.n	80117dc <ConfigStore::Init()+0xf4>
 80117be:	789a      	ldrb	r2, [r3, #2]
 80117c0:	2aff      	cmp	r2, #255	; 0xff
 80117c2:	d10b      	bne.n	80117dc <ConfigStore::Init()+0xf4>
 80117c4:	78da      	ldrb	r2, [r3, #3]
 80117c6:	2aff      	cmp	r2, #255	; 0xff
 80117c8:	d108      	bne.n	80117dc <ConfigStore::Init()+0xf4>
 80117ca:	46a9      	mov	r9, r5
 80117cc:	f804 8000 	strb.w	r8, [r4, r0]
 80117d0:	f883 8001 	strb.w	r8, [r3, #1]
 80117d4:	f883 8002 	strb.w	r8, [r3, #2]
 80117d8:	f883 8003 	strb.w	r8, [r3, #3]
 80117dc:	3601      	adds	r6, #1
 80117de:	2e1c      	cmp	r6, #28
 80117e0:	d1e2      	bne.n	80117a8 <ConfigStore::Init()+0xc0>
 80117e2:	f1b9 0f00 	cmp.w	r9, #0
 80117e6:	d08a      	beq.n	80116fe <ConfigStore::Init()+0x16>
 80117e8:	2201      	movs	r2, #1
 80117ea:	4b07      	ldr	r3, [pc, #28]	; (8011808 <ConfigStore::Init()+0x120>)
 80117ec:	601a      	str	r2, [r3, #0]
 80117ee:	e786      	b.n	80116fe <ConfigStore::Init()+0x16>
 80117f0:	f804 9002 	strb.w	r9, [r4, r2]
 80117f4:	3201      	adds	r2, #1
 80117f6:	e7c9      	b.n	801178c <ConfigStore::Init()+0xa4>
 80117f8:	2000a080 	andcs	sl, r0, r0, lsl #1
 80117fc:	20009080 	andcs	r9, r0, r0, lsl #1
 8011800:	2000a094 	mulcs	r0, r4, r0
 8011804:	080174a0 	stmdaeq	r1, {r5, r7, sl, ip, sp, lr}
 8011808:	2000a08c 	andcs	sl, r0, ip, lsl #1

0801180c <ConfigStore::ConfigStore()>:
 801180c:	b538      	push	{r3, r4, r5, lr}
 801180e:	4604      	mov	r4, r0
 8011810:	f000 fa4c 	bl	8011cac <StoreDevice::StoreDevice()>
 8011814:	4b0b      	ldr	r3, [pc, #44]	; (8011844 <ConfigStore::ConfigStore()+0x38>)
 8011816:	4d0c      	ldr	r5, [pc, #48]	; (8011848 <ConfigStore::ConfigStore()+0x3c>)
 8011818:	601c      	str	r4, [r3, #0]
 801181a:	7863      	ldrb	r3, [r4, #1]
 801181c:	b11b      	cbz	r3, 8011826 <ConfigStore::ConfigStore()+0x1a>
 801181e:	4620      	mov	r0, r4
 8011820:	f7ff ff62 	bl	80116e8 <ConfigStore::Init()>
 8011824:	7028      	strb	r0, [r5, #0]
 8011826:	782b      	ldrb	r3, [r5, #0]
 8011828:	b153      	cbz	r3, 8011840 <ConfigStore::ConfigStore()+0x34>
 801182a:	2320      	movs	r3, #32
 801182c:	2200      	movs	r2, #0
 801182e:	4907      	ldr	r1, [pc, #28]	; (801184c <ConfigStore::ConfigStore()+0x40>)
 8011830:	f851 0b04 	ldr.w	r0, [r1], #4
 8011834:	3201      	adds	r2, #1
 8011836:	2a1c      	cmp	r2, #28
 8011838:	4403      	add	r3, r0
 801183a:	d1f9      	bne.n	8011830 <ConfigStore::ConfigStore()+0x24>
 801183c:	4a04      	ldr	r2, [pc, #16]	; (8011850 <ConfigStore::ConfigStore()+0x44>)
 801183e:	6013      	str	r3, [r2, #0]
 8011840:	4620      	mov	r0, r4
 8011842:	bd38      	pop	{r3, r4, r5, pc}
 8011844:	2000a090 	mulcs	r0, r0, r0
 8011848:	2000a084 	andcs	sl, r0, r4, lsl #1
 801184c:	080174a0 	stmdaeq	r1, {r5, r7, sl, ip, sp, lr}
 8011850:	2000a088 	andcs	sl, r0, r8, lsl #1

08011854 <ConfigStore::ResetSetList(configstore::Store)>:
 8011854:	b508      	push	{r3, lr}
 8011856:	f7ff ff39 	bl	80116cc <ConfigStore::GetStoreOffset(configstore::Store)>
 801185a:	2300      	movs	r3, #0
 801185c:	4904      	ldr	r1, [pc, #16]	; (8011870 <ConfigStore::ResetSetList(configstore::Store)+0x1c>)
 801185e:	1842      	adds	r2, r0, r1
 8011860:	540b      	strb	r3, [r1, r0]
 8011862:	7053      	strb	r3, [r2, #1]
 8011864:	7093      	strb	r3, [r2, #2]
 8011866:	70d3      	strb	r3, [r2, #3]
 8011868:	2201      	movs	r2, #1
 801186a:	4b02      	ldr	r3, [pc, #8]	; (8011874 <ConfigStore::ResetSetList(configstore::Store)+0x20>)
 801186c:	601a      	str	r2, [r3, #0]
 801186e:	bd08      	pop	{r3, pc}
 8011870:	20009080 	andcs	r9, r0, r0, lsl #1
 8011874:	2000a08c 	andcs	sl, r0, ip, lsl #1

08011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 8011878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801187c:	461c      	mov	r4, r3
 801187e:	4b19      	ldr	r3, [pc, #100]	; (80118e4 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 8011880:	4616      	mov	r6, r2
 8011882:	781f      	ldrb	r7, [r3, #0]
 8011884:	9d07      	ldr	r5, [sp, #28]
 8011886:	b307      	cbz	r7, 80118ca <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 8011888:	f7ff ff20 	bl	80116cc <ConfigStore::GetStoreOffset(configstore::Store)>
 801188c:	f04f 0c00 	mov.w	ip, #0
 8011890:	4a15      	ldr	r2, [pc, #84]	; (80118e8 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 8011892:	1831      	adds	r1, r6, r0
 8011894:	1e63      	subs	r3, r4, #1
 8011896:	9c06      	ldr	r4, [sp, #24]
 8011898:	4411      	add	r1, r2
 801189a:	440c      	add	r4, r1
 801189c:	42a1      	cmp	r1, r4
 801189e:	d116      	bne.n	80118ce <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 80118a0:	f1bc 0f00 	cmp.w	ip, #0
 80118a4:	d011      	beq.n	80118ca <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80118a6:	4b11      	ldr	r3, [pc, #68]	; (80118ec <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 80118a8:	6819      	ldr	r1, [r3, #0]
 80118aa:	b109      	cbz	r1, 80118b0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 80118ac:	2906      	cmp	r1, #6
 80118ae:	d101      	bne.n	80118b4 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 80118b0:	2101      	movs	r1, #1
 80118b2:	6019      	str	r1, [r3, #0]
 80118b4:	4b0e      	ldr	r3, [pc, #56]	; (80118f0 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 80118b6:	6819      	ldr	r1, [r3, #0]
 80118b8:	4b0e      	ldr	r3, [pc, #56]	; (80118f4 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 80118ba:	6019      	str	r1, [r3, #0]
 80118bc:	b12e      	cbz	r6, 80118ca <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80118be:	b125      	cbz	r5, 80118ca <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 80118c0:	9b08      	ldr	r3, [sp, #32]
 80118c2:	4418      	add	r0, r3
 80118c4:	5813      	ldr	r3, [r2, r0]
 80118c6:	432b      	orrs	r3, r5
 80118c8:	5013      	str	r3, [r2, r0]
 80118ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ce:	f891 8000 	ldrb.w	r8, [r1]
 80118d2:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80118d6:	3101      	adds	r1, #1
 80118d8:	45f0      	cmp	r8, lr
 80118da:	bf1c      	itt	ne
 80118dc:	f801 ec01 	strbne.w	lr, [r1, #-1]
 80118e0:	46bc      	movne	ip, r7
 80118e2:	e7db      	b.n	801189c <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 80118e4:	2000a084 	andcs	sl, r0, r4, lsl #1
 80118e8:	20009080 	andcs	r9, r0, r0, lsl #1
 80118ec:	2000a08c 	andcs	sl, r0, ip, lsl #1
 80118f0:	2000a1e4 	andcs	sl, r0, r4, ror #3
 80118f4:	2000907c 	andcs	r9, r0, ip, ror r0

080118f8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>:
 80118f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118fc:	461d      	mov	r5, r3
 80118fe:	4b15      	ldr	r3, [pc, #84]	; (8011954 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 8011900:	b085      	sub	sp, #20
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	4607      	mov	r7, r0
 8011906:	4614      	mov	r4, r2
 8011908:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801190c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8011910:	b193      	cbz	r3, 8011938 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 8011912:	f7ff fedb 	bl	80116cc <ConfigStore::GetStoreOffset(configstore::Store)>
 8011916:	4a10      	ldr	r2, [pc, #64]	; (8011958 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 8011918:	eb08 0600 	add.w	r6, r8, r0
 801191c:	18b3      	adds	r3, r6, r2
 801191e:	f1b9 0f00 	cmp.w	r9, #0
 8011922:	d013      	beq.n	801194c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 8011924:	5990      	ldr	r0, [r2, r6]
 8011926:	b988      	cbnz	r0, 801194c <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 8011928:	e9cd 0001 	strd	r0, r0, [sp, #4]
 801192c:	4623      	mov	r3, r4
 801192e:	4642      	mov	r2, r8
 8011930:	4638      	mov	r0, r7
 8011932:	9500      	str	r5, [sp, #0]
 8011934:	f7ff ffa0 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011938:	b005      	add	sp, #20
 801193a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801193e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011942:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011946:	429d      	cmp	r5, r3
 8011948:	d1f9      	bne.n	801193e <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 801194a:	e7f5      	b.n	8011938 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 801194c:	3c01      	subs	r4, #1
 801194e:	441d      	add	r5, r3
 8011950:	e7f9      	b.n	8011946 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 8011952:	bf00      	nop
 8011954:	2000a084 	andcs	sl, r0, r4, lsl #1
 8011958:	20009080 	andcs	r9, r0, r0, lsl #1

0801195c <ConfigStore::Flash()>:
 801195c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801195e:	4c24      	ldr	r4, [pc, #144]	; (80119f0 <ConfigStore::Flash()+0x94>)
 8011960:	6823      	ldr	r3, [r4, #0]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d041      	beq.n	80119ea <ConfigStore::Flash()+0x8e>
 8011966:	3b01      	subs	r3, #1
 8011968:	2b05      	cmp	r3, #5
 801196a:	d82f      	bhi.n	80119cc <ConfigStore::Flash()+0x70>
 801196c:	e8df f003 	tbb	[pc, r3]
 8011970:	2c140b03 			; <UNDEFINED> instruction: 0x2c140b03
 8011974:	4b1f2e23 	blmi	87dd208 <__exidx_end+0x7c5690>
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	4b1f      	ldr	r3, [pc, #124]	; (80119f8 <ConfigStore::Flash()+0x9c>)
 801197c:	601a      	str	r2, [r3, #0]
 801197e:	2302      	movs	r3, #2
 8011980:	6023      	str	r3, [r4, #0]
 8011982:	2001      	movs	r0, #1
 8011984:	e02f      	b.n	80119e6 <ConfigStore::Flash()+0x8a>
 8011986:	4b1b      	ldr	r3, [pc, #108]	; (80119f4 <ConfigStore::Flash()+0x98>)
 8011988:	4a1b      	ldr	r2, [pc, #108]	; (80119f8 <ConfigStore::Flash()+0x9c>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	6812      	ldr	r2, [r2, #0]
 801198e:	1a9b      	subs	r3, r3, r2
 8011990:	2b63      	cmp	r3, #99	; 0x63
 8011992:	d9f6      	bls.n	8011982 <ConfigStore::Flash()+0x26>
 8011994:	2303      	movs	r3, #3
 8011996:	e7f3      	b.n	8011980 <ConfigStore::Flash()+0x24>
 8011998:	4918      	ldr	r1, [pc, #96]	; (80119fc <ConfigStore::Flash()+0xa0>)
 801199a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801199e:	6809      	ldr	r1, [r1, #0]
 80119a0:	ab03      	add	r3, sp, #12
 80119a2:	f000 f999 	bl	8011cd8 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>
 80119a6:	2800      	cmp	r0, #0
 80119a8:	d0eb      	beq.n	8011982 <ConfigStore::Flash()+0x26>
 80119aa:	4b12      	ldr	r3, [pc, #72]	; (80119f4 <ConfigStore::Flash()+0x98>)
 80119ac:	681a      	ldr	r2, [r3, #0]
 80119ae:	4b12      	ldr	r3, [pc, #72]	; (80119f8 <ConfigStore::Flash()+0x9c>)
 80119b0:	601a      	str	r2, [r3, #0]
 80119b2:	2305      	movs	r3, #5
 80119b4:	e7e4      	b.n	8011980 <ConfigStore::Flash()+0x24>
 80119b6:	4b0f      	ldr	r3, [pc, #60]	; (80119f4 <ConfigStore::Flash()+0x98>)
 80119b8:	4a0f      	ldr	r2, [pc, #60]	; (80119f8 <ConfigStore::Flash()+0x9c>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	6812      	ldr	r2, [r2, #0]
 80119be:	1a9b      	subs	r3, r3, r2
 80119c0:	2b63      	cmp	r3, #99	; 0x63
 80119c2:	d9de      	bls.n	8011982 <ConfigStore::Flash()+0x26>
 80119c4:	2304      	movs	r3, #4
 80119c6:	e7db      	b.n	8011980 <ConfigStore::Flash()+0x24>
 80119c8:	2306      	movs	r3, #6
 80119ca:	e7d9      	b.n	8011980 <ConfigStore::Flash()+0x24>
 80119cc:	ab03      	add	r3, sp, #12
 80119ce:	4a0c      	ldr	r2, [pc, #48]	; (8011a00 <ConfigStore::Flash()+0xa4>)
 80119d0:	490a      	ldr	r1, [pc, #40]	; (80119fc <ConfigStore::Flash()+0xa0>)
 80119d2:	9300      	str	r3, [sp, #0]
 80119d4:	6812      	ldr	r2, [r2, #0]
 80119d6:	4b0b      	ldr	r3, [pc, #44]	; (8011a04 <ConfigStore::Flash()+0xa8>)
 80119d8:	6809      	ldr	r1, [r1, #0]
 80119da:	f000 f986 	bl	8011cea <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>
 80119de:	2800      	cmp	r0, #0
 80119e0:	d0cf      	beq.n	8011982 <ConfigStore::Flash()+0x26>
 80119e2:	2000      	movs	r0, #0
 80119e4:	6020      	str	r0, [r4, #0]
 80119e6:	b004      	add	sp, #16
 80119e8:	bd10      	pop	{r4, pc}
 80119ea:	4618      	mov	r0, r3
 80119ec:	e7fb      	b.n	80119e6 <ConfigStore::Flash()+0x8a>
 80119ee:	bf00      	nop
 80119f0:	2000a08c 	andcs	sl, r0, ip, lsl #1
 80119f4:	2000a1e4 	andcs	sl, r0, r4, ror #3
 80119f8:	2000907c 	andcs	r9, r0, ip, ror r0
 80119fc:	2000a080 	andcs	sl, r0, r0, lsl #1
 8011a00:	2000a088 	andcs	sl, r0, r8, lsl #1
 8011a04:	20009080 	andcs	r9, r0, r0, lsl #1

08011a08 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8011a08:	4770      	bx	lr
	...

08011a0c <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 8011a0c:	b507      	push	{r0, r1, r2, lr}
 8011a0e:	2300      	movs	r3, #0
 8011a10:	460a      	mov	r2, r1
 8011a12:	2101      	movs	r1, #1
 8011a14:	e9cd 3100 	strd	r3, r1, [sp]
 8011a18:	4804      	ldr	r0, [pc, #16]	; (8011a2c <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 8011a1a:	2322      	movs	r3, #34	; 0x22
 8011a1c:	210f      	movs	r1, #15
 8011a1e:	6800      	ldr	r0, [r0, #0]
 8011a20:	f7ff ff6a 	bl	80118f8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8011a24:	b003      	add	sp, #12
 8011a26:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a2a:	bf00      	nop
 8011a2c:	2000a090 	mulcs	r0, r0, r0

08011a30 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 8011a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a32:	2200      	movs	r2, #0
 8011a34:	460b      	mov	r3, r1
 8011a36:	2122      	movs	r1, #34	; 0x22
 8011a38:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8011a3c:	4804      	ldr	r0, [pc, #16]	; (8011a50 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 8011a3e:	9100      	str	r1, [sp, #0]
 8011a40:	6800      	ldr	r0, [r0, #0]
 8011a42:	210f      	movs	r1, #15
 8011a44:	f7ff ff18 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011a48:	b005      	add	sp, #20
 8011a4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a4e:	bf00      	nop
 8011a50:	2000a090 	mulcs	r0, r0, r0

08011a54 <StoreDisplayUdf::~StoreDisplayUdf()>:
 8011a54:	b510      	push	{r4, lr}
 8011a56:	4604      	mov	r4, r0
 8011a58:	f001 fb0a 	bl	8013070 <operator delete(void*)>
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	bd10      	pop	{r4, pc}

08011a60 <StoreDisplayUdf::StoreDisplayUdf()>:
 8011a60:	4a02      	ldr	r2, [pc, #8]	; (8011a6c <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 8011a62:	6002      	str	r2, [r0, #0]
 8011a64:	4a02      	ldr	r2, [pc, #8]	; (8011a70 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 8011a66:	6010      	str	r0, [r2, #0]
 8011a68:	4770      	bx	lr
 8011a6a:	bf00      	nop
 8011a6c:	08017518 	stmdaeq	r1, {r3, r4, r8, sl, ip, sp, lr}
 8011a70:	2000a098 	mulcs	r0, r8, r0

08011a74 <StoreDmxSend::~StoreDmxSend()>:
 8011a74:	4770      	bx	lr
	...

08011a78 <StoreDmxSend::Copy(TDmxParams*)>:
 8011a78:	b507      	push	{r0, r1, r2, lr}
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	460a      	mov	r2, r1
 8011a7e:	2101      	movs	r1, #1
 8011a80:	e9cd 3100 	strd	r3, r1, [sp]
 8011a84:	4804      	ldr	r0, [pc, #16]	; (8011a98 <StoreDmxSend::Copy(TDmxParams*)+0x20>)
 8011a86:	230a      	movs	r3, #10
 8011a88:	2102      	movs	r1, #2
 8011a8a:	6800      	ldr	r0, [r0, #0]
 8011a8c:	f7ff ff34 	bl	80118f8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8011a90:	b003      	add	sp, #12
 8011a92:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a96:	bf00      	nop
 8011a98:	2000a090 	mulcs	r0, r0, r0

08011a9c <StoreDmxSend::Update(TDmxParams const*)>:
 8011a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	210a      	movs	r1, #10
 8011aa4:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8011aa8:	4804      	ldr	r0, [pc, #16]	; (8011abc <StoreDmxSend::Update(TDmxParams const*)+0x20>)
 8011aaa:	9100      	str	r1, [sp, #0]
 8011aac:	6800      	ldr	r0, [r0, #0]
 8011aae:	2102      	movs	r1, #2
 8011ab0:	f7ff fee2 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011ab4:	b005      	add	sp, #20
 8011ab6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011aba:	bf00      	nop
 8011abc:	2000a090 	mulcs	r0, r0, r0

08011ac0 <StoreDmxSend::~StoreDmxSend()>:
 8011ac0:	b510      	push	{r4, lr}
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	f001 fad4 	bl	8013070 <operator delete(void*)>
 8011ac8:	4620      	mov	r0, r4
 8011aca:	bd10      	pop	{r4, pc}

08011acc <StoreDmxSend::StoreDmxSend()>:
 8011acc:	4a02      	ldr	r2, [pc, #8]	; (8011ad8 <StoreDmxSend::StoreDmxSend()+0xc>)
 8011ace:	6002      	str	r2, [r0, #0]
 8011ad0:	4a02      	ldr	r2, [pc, #8]	; (8011adc <StoreDmxSend::StoreDmxSend()+0x10>)
 8011ad2:	6010      	str	r0, [r2, #0]
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop
 8011ad8:	08017530 	stmdaeq	r1, {r4, r5, r8, sl, ip, sp, lr}
 8011adc:	2000a09c 	mulcs	r0, ip, r0

08011ae0 <StoreNetwork::~StoreNetwork()>:
 8011ae0:	4770      	bx	lr

08011ae2 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 8011ae2:	3804      	subs	r0, #4
 8011ae4:	4770      	bx	lr
	...

08011ae8 <StoreNetwork::Update(networkparams::Params const*)>:
 8011ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011aea:	2200      	movs	r2, #0
 8011aec:	460b      	mov	r3, r1
 8011aee:	215e      	movs	r1, #94	; 0x5e
 8011af0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8011af4:	4804      	ldr	r0, [pc, #16]	; (8011b08 <StoreNetwork::Update(networkparams::Params const*)+0x20>)
 8011af6:	9100      	str	r1, [sp, #0]
 8011af8:	6800      	ldr	r0, [r0, #0]
 8011afa:	4611      	mov	r1, r2
 8011afc:	f7ff febc 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011b00:	b005      	add	sp, #20
 8011b02:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b06:	bf00      	nop
 8011b08:	2000a090 	mulcs	r0, r0, r0

08011b0c <StoreNetwork::SaveDhcp(bool)>:
 8011b0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011b0e:	2301      	movs	r3, #1
 8011b10:	f88d 1017 	strb.w	r1, [sp, #23]
 8011b14:	2100      	movs	r1, #0
 8011b16:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011b1a:	4805      	ldr	r0, [pc, #20]	; (8011b30 <StoreNetwork::SaveDhcp(bool)+0x24>)
 8011b1c:	9300      	str	r3, [sp, #0]
 8011b1e:	2214      	movs	r2, #20
 8011b20:	6800      	ldr	r0, [r0, #0]
 8011b22:	f10d 0317 	add.w	r3, sp, #23
 8011b26:	f7ff fea7 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011b2a:	b007      	add	sp, #28
 8011b2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b30:	2000a090 	mulcs	r0, r0, r0

08011b34 <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 8011b34:	f1a0 0004 	sub.w	r0, r0, #4
 8011b38:	e7e8      	b.n	8011b0c <StoreNetwork::SaveDhcp(bool)>
 8011b3a:	bf00      	nop

08011b3c <StoreNetwork::SaveGatewayIp(unsigned int)>:
 8011b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011b3e:	2308      	movs	r3, #8
 8011b40:	9105      	str	r1, [sp, #20]
 8011b42:	2100      	movs	r1, #0
 8011b44:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011b48:	2304      	movs	r3, #4
 8011b4a:	4805      	ldr	r0, [pc, #20]	; (8011b60 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 8011b4c:	9300      	str	r3, [sp, #0]
 8011b4e:	220c      	movs	r2, #12
 8011b50:	6800      	ldr	r0, [r0, #0]
 8011b52:	ab05      	add	r3, sp, #20
 8011b54:	f7ff fe90 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011b58:	b007      	add	sp, #28
 8011b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b5e:	bf00      	nop
 8011b60:	2000a090 	mulcs	r0, r0, r0

08011b64 <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 8011b64:	f1a0 0004 	sub.w	r0, r0, #4
 8011b68:	e7e8      	b.n	8011b3c <StoreNetwork::SaveGatewayIp(unsigned int)>
 8011b6a:	bf00      	nop

08011b6c <StoreNetwork::SaveNetMask(unsigned int)>:
 8011b6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011b6e:	2304      	movs	r3, #4
 8011b70:	9105      	str	r1, [sp, #20]
 8011b72:	2100      	movs	r1, #0
 8011b74:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011b78:	4804      	ldr	r0, [pc, #16]	; (8011b8c <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 8011b7a:	9300      	str	r3, [sp, #0]
 8011b7c:	2208      	movs	r2, #8
 8011b7e:	6800      	ldr	r0, [r0, #0]
 8011b80:	ab05      	add	r3, sp, #20
 8011b82:	f7ff fe79 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011b86:	b007      	add	sp, #28
 8011b88:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b8c:	2000a090 	mulcs	r0, r0, r0

08011b90 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 8011b90:	f1a0 0004 	sub.w	r0, r0, #4
 8011b94:	e7ea      	b.n	8011b6c <StoreNetwork::SaveNetMask(unsigned int)>
 8011b96:	bf00      	nop

08011b98 <StoreNetwork::SaveIp(unsigned int)>:
 8011b98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011b9a:	2302      	movs	r3, #2
 8011b9c:	9105      	str	r1, [sp, #20]
 8011b9e:	2100      	movs	r1, #0
 8011ba0:	2204      	movs	r2, #4
 8011ba2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011ba6:	4804      	ldr	r0, [pc, #16]	; (8011bb8 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 8011ba8:	9200      	str	r2, [sp, #0]
 8011baa:	6800      	ldr	r0, [r0, #0]
 8011bac:	ab05      	add	r3, sp, #20
 8011bae:	f7ff fe63 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011bb2:	b007      	add	sp, #28
 8011bb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8011bb8:	2000a090 	mulcs	r0, r0, r0

08011bbc <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 8011bbc:	f1a0 0004 	sub.w	r0, r0, #4
 8011bc0:	e7ea      	b.n	8011b98 <StoreNetwork::SaveIp(unsigned int)>
 8011bc2:	bf00      	nop

08011bc4 <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 8011bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bc6:	460b      	mov	r3, r1
 8011bc8:	2020      	movs	r0, #32
 8011bca:	2100      	movs	r1, #0
 8011bcc:	2a40      	cmp	r2, #64	; 0x40
 8011bce:	bf28      	it	cs
 8011bd0:	2240      	movcs	r2, #64	; 0x40
 8011bd2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8011bd6:	4804      	ldr	r0, [pc, #16]	; (8011be8 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 8011bd8:	9200      	str	r2, [sp, #0]
 8011bda:	6800      	ldr	r0, [r0, #0]
 8011bdc:	2215      	movs	r2, #21
 8011bde:	f7ff fe4b 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011be2:	b005      	add	sp, #20
 8011be4:	f85d fb04 	ldr.w	pc, [sp], #4
 8011be8:	2000a090 	mulcs	r0, r0, r0

08011bec <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 8011bec:	f1a0 0004 	sub.w	r0, r0, #4
 8011bf0:	e7e8      	b.n	8011bc4 <StoreNetwork::SaveHostName(char const*, unsigned int)>
 8011bf2:	bf00      	nop

08011bf4 <StoreNetwork::~StoreNetwork()>:
 8011bf4:	b510      	push	{r4, lr}
 8011bf6:	4604      	mov	r4, r0
 8011bf8:	f001 fa3a 	bl	8013070 <operator delete(void*)>
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	bd10      	pop	{r4, pc}

08011c00 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 8011c00:	f1a0 0004 	sub.w	r0, r0, #4
 8011c04:	e7f6      	b.n	8011bf4 <StoreNetwork::~StoreNetwork()>
	...

08011c08 <StoreNetwork::Copy(networkparams::Params*)>:
 8011c08:	b507      	push	{r0, r1, r2, lr}
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	460a      	mov	r2, r1
 8011c0e:	2100      	movs	r1, #0
 8011c10:	e9cd 1300 	strd	r1, r3, [sp]
 8011c14:	4803      	ldr	r0, [pc, #12]	; (8011c24 <StoreNetwork::Copy(networkparams::Params*)+0x1c>)
 8011c16:	235e      	movs	r3, #94	; 0x5e
 8011c18:	6800      	ldr	r0, [r0, #0]
 8011c1a:	f7ff fe6d 	bl	80118f8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8011c1e:	b003      	add	sp, #12
 8011c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c24:	2000a090 	mulcs	r0, r0, r0

08011c28 <StoreNetwork::StoreNetwork()>:
 8011c28:	4a03      	ldr	r2, [pc, #12]	; (8011c38 <StoreNetwork::StoreNetwork()+0x10>)
 8011c2a:	6002      	str	r2, [r0, #0]
 8011c2c:	322c      	adds	r2, #44	; 0x2c
 8011c2e:	6042      	str	r2, [r0, #4]
 8011c30:	4a02      	ldr	r2, [pc, #8]	; (8011c3c <StoreNetwork::StoreNetwork()+0x14>)
 8011c32:	6010      	str	r0, [r2, #0]
 8011c34:	4770      	bx	lr
 8011c36:	bf00      	nop
 8011c38:	08017548 	stmdaeq	r1, {r3, r6, r8, sl, ip, sp, lr}
 8011c3c:	2000a0a0 	andcs	sl, r0, r0, lsr #1

08011c40 <StoreRemoteConfig::~StoreRemoteConfig()>:
 8011c40:	4770      	bx	lr
	...

08011c44 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 8011c44:	b507      	push	{r0, r1, r2, lr}
 8011c46:	2300      	movs	r3, #0
 8011c48:	460a      	mov	r2, r1
 8011c4a:	2101      	movs	r1, #1
 8011c4c:	e9cd 3100 	strd	r3, r1, [sp]
 8011c50:	4804      	ldr	r0, [pc, #16]	; (8011c64 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x20>)
 8011c52:	2320      	movs	r3, #32
 8011c54:	210c      	movs	r1, #12
 8011c56:	6800      	ldr	r0, [r0, #0]
 8011c58:	f7ff fe4e 	bl	80118f8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8011c5c:	b003      	add	sp, #12
 8011c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c62:	bf00      	nop
 8011c64:	2000a090 	mulcs	r0, r0, r0

08011c68 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 8011c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	2120      	movs	r1, #32
 8011c70:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8011c74:	4804      	ldr	r0, [pc, #16]	; (8011c88 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 8011c76:	9100      	str	r1, [sp, #0]
 8011c78:	6800      	ldr	r0, [r0, #0]
 8011c7a:	210c      	movs	r1, #12
 8011c7c:	f7ff fdfc 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011c80:	b005      	add	sp, #20
 8011c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c86:	bf00      	nop
 8011c88:	2000a090 	mulcs	r0, r0, r0

08011c8c <StoreRemoteConfig::~StoreRemoteConfig()>:
 8011c8c:	b510      	push	{r4, lr}
 8011c8e:	4604      	mov	r4, r0
 8011c90:	f001 f9ee 	bl	8013070 <operator delete(void*)>
 8011c94:	4620      	mov	r0, r4
 8011c96:	bd10      	pop	{r4, pc}

08011c98 <StoreRemoteConfig::StoreRemoteConfig()>:
 8011c98:	4a02      	ldr	r2, [pc, #8]	; (8011ca4 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 8011c9a:	6002      	str	r2, [r0, #0]
 8011c9c:	4a02      	ldr	r2, [pc, #8]	; (8011ca8 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 8011c9e:	6010      	str	r0, [r2, #0]
 8011ca0:	4770      	bx	lr
 8011ca2:	bf00      	nop
 8011ca4:	08017598 	stmdaeq	r1, {r3, r4, r7, r8, sl, ip, sp, lr}
 8011ca8:	2000a0a4 	andcs	sl, r0, r4, lsr #1

08011cac <StoreDevice::StoreDevice()>:
 8011cac:	b510      	push	{r4, lr}
 8011cae:	4604      	mov	r4, r0
 8011cb0:	f000 f9ea 	bl	8012088 <FlashCode::FlashCode()>
 8011cb4:	7823      	ldrb	r3, [r4, #0]
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	7063      	strb	r3, [r4, #1]
 8011cba:	bd10      	pop	{r4, pc}

08011cbc <StoreDevice::GetSize() const>:
 8011cbc:	f000 b9fe 	b.w	80120bc <FlashCode::GetSize() const>

08011cc0 <StoreDevice::GetSectorSize() const>:
 8011cc0:	f000 ba04 	b.w	80120cc <FlashCode::GetSectorSize() const>

08011cc4 <StoreDevice::Read(unsigned int, unsigned int, unsigned char*, storedevice::result&)>:
 8011cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011cc6:	ac03      	add	r4, sp, #12
 8011cc8:	9400      	str	r4, [sp, #0]
 8011cca:	f000 fa02 	bl	80120d2 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>
 8011cce:	9b06      	ldr	r3, [sp, #24]
 8011cd0:	9a03      	ldr	r2, [sp, #12]
 8011cd2:	601a      	str	r2, [r3, #0]
 8011cd4:	b004      	add	sp, #16
 8011cd6:	bd10      	pop	{r4, pc}

08011cd8 <StoreDevice::Erase(unsigned int, unsigned int, storedevice::result&)>:
 8011cd8:	b513      	push	{r0, r1, r4, lr}
 8011cda:	461c      	mov	r4, r3
 8011cdc:	ab01      	add	r3, sp, #4
 8011cde:	f000 fa07 	bl	80120f0 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>
 8011ce2:	9b01      	ldr	r3, [sp, #4]
 8011ce4:	6023      	str	r3, [r4, #0]
 8011ce6:	b002      	add	sp, #8
 8011ce8:	bd10      	pop	{r4, pc}

08011cea <StoreDevice::Write(unsigned int, unsigned int, unsigned char const*, storedevice::result&)>:
 8011cea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011cec:	ac03      	add	r4, sp, #12
 8011cee:	9400      	str	r4, [sp, #0]
 8011cf0:	f000 fa9e 	bl	8012230 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>
 8011cf4:	9b06      	ldr	r3, [sp, #24]
 8011cf6:	9a03      	ldr	r2, [sp, #12]
 8011cf8:	601a      	str	r2, [r3, #0]
 8011cfa:	b004      	add	sp, #16
 8011cfc:	bd10      	pop	{r4, pc}

08011cfe <StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 8011cfe:	4770      	bx	lr

08011d00 <non-virtual thunk to StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 8011d00:	4770      	bx	lr

08011d02 <StoreArtNet::~StoreArtNet()>:
 8011d02:	4770      	bx	lr

08011d04 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 8011d04:	3804      	subs	r0, #4
 8011d06:	4770      	bx	lr

08011d08 <StoreArtNet::Update(artnetparams::Params const*)>:
 8011d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	2187      	movs	r1, #135	; 0x87
 8011d10:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8011d14:	4804      	ldr	r0, [pc, #16]	; (8011d28 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 8011d16:	9100      	str	r1, [sp, #0]
 8011d18:	6800      	ldr	r0, [r0, #0]
 8011d1a:	2101      	movs	r1, #1
 8011d1c:	f7ff fdac 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011d20:	b005      	add	sp, #20
 8011d22:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d26:	bf00      	nop
 8011d28:	2000a090 	mulcs	r0, r0, r0

08011d2c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8011d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011d2e:	4b0d      	ldr	r3, [pc, #52]	; (8011d64 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x38>)
 8011d30:	f88d 2017 	strb.w	r2, [sp, #23]
 8011d34:	681a      	ldr	r2, [r3, #0]
 8011d36:	428a      	cmp	r2, r1
 8011d38:	d811      	bhi.n	8011d5e <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 8011d3a:	1a8a      	subs	r2, r1, r2
 8011d3c:	2a03      	cmp	r2, #3
 8011d3e:	d80e      	bhi.n	8011d5e <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 8011d40:	2300      	movs	r3, #0
 8011d42:	9302      	str	r3, [sp, #8]
 8011d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011d48:	2101      	movs	r1, #1
 8011d4a:	4093      	lsls	r3, r2
 8011d4c:	4806      	ldr	r0, [pc, #24]	; (8011d68 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x3c>)
 8011d4e:	9301      	str	r3, [sp, #4]
 8011d50:	9100      	str	r1, [sp, #0]
 8011d52:	6800      	ldr	r0, [r0, #0]
 8011d54:	f10d 0317 	add.w	r3, sp, #23
 8011d58:	3267      	adds	r2, #103	; 0x67
 8011d5a:	f7ff fd8d 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011d5e:	b007      	add	sp, #28
 8011d60:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d64:	2000a0a8 	andcs	sl, r0, r8, lsr #1
 8011d68:	2000a090 	mulcs	r0, r0, r0

08011d6c <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 8011d6c:	f1a0 0004 	sub.w	r0, r0, #4
 8011d70:	f7ff bfdc 	b.w	8011d2c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

08011d74 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 8011d74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011d76:	f88d 2017 	strb.w	r2, [sp, #23]
 8011d7a:	b951      	cbnz	r1, 8011d92 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x1e>
 8011d7c:	9102      	str	r1, [sp, #8]
 8011d7e:	2204      	movs	r2, #4
 8011d80:	2101      	movs	r1, #1
 8011d82:	e9cd 1200 	strd	r1, r2, [sp]
 8011d86:	4804      	ldr	r0, [pc, #16]	; (8011d98 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x24>)
 8011d88:	f10d 0317 	add.w	r3, sp, #23
 8011d8c:	6800      	ldr	r0, [r0, #0]
 8011d8e:	f7ff fd73 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011d92:	b007      	add	sp, #28
 8011d94:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d98:	2000a090 	mulcs	r0, r0, r0

08011d9c <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 8011d9c:	f1a0 0004 	sub.w	r0, r0, #4
 8011da0:	f7ff bfe8 	b.w	8011d74 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>

08011da4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 8011da4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011da6:	f88d 2017 	strb.w	r2, [sp, #23]
 8011daa:	b959      	cbnz	r1, 8011dc4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x20>
 8011dac:	2308      	movs	r3, #8
 8011dae:	9102      	str	r1, [sp, #8]
 8011db0:	2101      	movs	r1, #1
 8011db2:	e9cd 1300 	strd	r1, r3, [sp]
 8011db6:	4805      	ldr	r0, [pc, #20]	; (8011dcc <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x28>)
 8011db8:	2205      	movs	r2, #5
 8011dba:	6800      	ldr	r0, [r0, #0]
 8011dbc:	f10d 0317 	add.w	r3, sp, #23
 8011dc0:	f7ff fd5a 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011dc4:	b007      	add	sp, #28
 8011dc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011dca:	bf00      	nop
 8011dcc:	2000a090 	mulcs	r0, r0, r0

08011dd0 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 8011dd0:	f1a0 0004 	sub.w	r0, r0, #4
 8011dd4:	f7ff bfe6 	b.w	8011da4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>

08011dd8 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8011dd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011dda:	4b0c      	ldr	r3, [pc, #48]	; (8011e0c <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x34>)
 8011ddc:	9205      	str	r2, [sp, #20]
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	428a      	cmp	r2, r1
 8011de2:	d810      	bhi.n	8011e06 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 8011de4:	1a8a      	subs	r2, r1, r2
 8011de6:	2a03      	cmp	r2, #3
 8011de8:	d80d      	bhi.n	8011e06 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 8011dea:	2300      	movs	r3, #0
 8011dec:	9302      	str	r3, [sp, #8]
 8011dee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011df2:	2101      	movs	r1, #1
 8011df4:	4093      	lsls	r3, r2
 8011df6:	4806      	ldr	r0, [pc, #24]	; (8011e10 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x38>)
 8011df8:	9301      	str	r3, [sp, #4]
 8011dfa:	9100      	str	r1, [sp, #0]
 8011dfc:	6800      	ldr	r0, [r0, #0]
 8011dfe:	ab05      	add	r3, sp, #20
 8011e00:	326c      	adds	r2, #108	; 0x6c
 8011e02:	f7ff fd39 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011e06:	b007      	add	sp, #28
 8011e08:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e0c:	2000a0a8 	andcs	sl, r0, r8, lsr #1
 8011e10:	2000a090 	mulcs	r0, r0, r0

08011e14 <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 8011e14:	f1a0 0004 	sub.w	r0, r0, #4
 8011e18:	f7ff bfde 	b.w	8011dd8 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

08011e1c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8011e1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011e1e:	4b0c      	ldr	r3, [pc, #48]	; (8011e50 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x34>)
 8011e20:	9205      	str	r2, [sp, #20]
 8011e22:	681a      	ldr	r2, [r3, #0]
 8011e24:	428a      	cmp	r2, r1
 8011e26:	d810      	bhi.n	8011e4a <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 8011e28:	1a8a      	subs	r2, r1, r2
 8011e2a:	2a03      	cmp	r2, #3
 8011e2c:	d80d      	bhi.n	8011e4a <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 8011e2e:	2300      	movs	r3, #0
 8011e30:	9302      	str	r3, [sp, #8]
 8011e32:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011e36:	2101      	movs	r1, #1
 8011e38:	4093      	lsls	r3, r2
 8011e3a:	4806      	ldr	r0, [pc, #24]	; (8011e54 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x38>)
 8011e3c:	9301      	str	r3, [sp, #4]
 8011e3e:	9100      	str	r1, [sp, #0]
 8011e40:	6800      	ldr	r0, [r0, #0]
 8011e42:	ab05      	add	r3, sp, #20
 8011e44:	3271      	adds	r2, #113	; 0x71
 8011e46:	f7ff fd17 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011e4a:	b007      	add	sp, #28
 8011e4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e50:	2000a0a8 	andcs	sl, r0, r8, lsr #1
 8011e54:	2000a090 	mulcs	r0, r0, r0

08011e58 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 8011e58:	f1a0 0004 	sub.w	r0, r0, #4
 8011e5c:	f7ff bfde 	b.w	8011e1c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

08011e60 <StoreArtNet::SaveLongName(char const*)>:
 8011e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e62:	460b      	mov	r3, r1
 8011e64:	2200      	movs	r2, #0
 8011e66:	2101      	movs	r1, #1
 8011e68:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8011e6c:	2240      	movs	r2, #64	; 0x40
 8011e6e:	4804      	ldr	r0, [pc, #16]	; (8011e80 <StoreArtNet::SaveLongName(char const*)+0x20>)
 8011e70:	9200      	str	r2, [sp, #0]
 8011e72:	6800      	ldr	r0, [r0, #0]
 8011e74:	221e      	movs	r2, #30
 8011e76:	f7ff fcff 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011e7a:	b005      	add	sp, #20
 8011e7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e80:	2000a090 	mulcs	r0, r0, r0

08011e84 <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 8011e84:	f1a0 0004 	sub.w	r0, r0, #4
 8011e88:	e7ea      	b.n	8011e60 <StoreArtNet::SaveLongName(char const*)>
 8011e8a:	bf00      	nop

08011e8c <StoreArtNet::SaveShortName(char const*)>:
 8011e8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e8e:	460b      	mov	r3, r1
 8011e90:	2202      	movs	r2, #2
 8011e92:	2100      	movs	r1, #0
 8011e94:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011e98:	2212      	movs	r2, #18
 8011e9a:	4805      	ldr	r0, [pc, #20]	; (8011eb0 <StoreArtNet::SaveShortName(char const*)+0x24>)
 8011e9c:	9200      	str	r2, [sp, #0]
 8011e9e:	2101      	movs	r1, #1
 8011ea0:	220c      	movs	r2, #12
 8011ea2:	6800      	ldr	r0, [r0, #0]
 8011ea4:	f7ff fce8 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011ea8:	b005      	add	sp, #20
 8011eaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8011eae:	bf00      	nop
 8011eb0:	2000a090 	mulcs	r0, r0, r0

08011eb4 <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 8011eb4:	f1a0 0004 	sub.w	r0, r0, #4
 8011eb8:	e7e8      	b.n	8011e8c <StoreArtNet::SaveShortName(char const*)>
 8011eba:	bf00      	nop

08011ebc <StoreArtNet::SaveFailSafe(unsigned char)>:
 8011ebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011ebe:	2310      	movs	r3, #16
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	f88d 1017 	strb.w	r1, [sp, #23]
 8011ec6:	2101      	movs	r1, #1
 8011ec8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011ecc:	4805      	ldr	r0, [pc, #20]	; (8011ee4 <StoreArtNet::SaveFailSafe(unsigned char)+0x28>)
 8011ece:	9100      	str	r1, [sp, #0]
 8011ed0:	2206      	movs	r2, #6
 8011ed2:	6800      	ldr	r0, [r0, #0]
 8011ed4:	f10d 0317 	add.w	r3, sp, #23
 8011ed8:	f7ff fcce 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011edc:	b007      	add	sp, #28
 8011ede:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ee2:	bf00      	nop
 8011ee4:	2000a090 	mulcs	r0, r0, r0

08011ee8 <non-virtual thunk to StoreArtNet::SaveFailSafe(unsigned char)>:
 8011ee8:	f1a0 0004 	sub.w	r0, r0, #4
 8011eec:	e7e6      	b.n	8011ebc <StoreArtNet::SaveFailSafe(unsigned char)>
 8011eee:	bf00      	nop

08011ef0 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 8011ef0:	b570      	push	{r4, r5, r6, lr}
 8011ef2:	4b1b      	ldr	r3, [pc, #108]	; (8011f60 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x70>)
 8011ef4:	4615      	mov	r5, r2
 8011ef6:	681c      	ldr	r4, [r3, #0]
 8011ef8:	b086      	sub	sp, #24
 8011efa:	428c      	cmp	r4, r1
 8011efc:	d829      	bhi.n	8011f52 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 8011efe:	1b0c      	subs	r4, r1, r4
 8011f00:	2c03      	cmp	r4, #3
 8011f02:	d826      	bhi.n	8011f52 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 8011f04:	2308      	movs	r3, #8
 8011f06:	2200      	movs	r2, #0
 8011f08:	4e16      	ldr	r6, [pc, #88]	; (8011f64 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x74>)
 8011f0a:	e9cd 3200 	strd	r3, r2, [sp]
 8011f0e:	2101      	movs	r1, #1
 8011f10:	2302      	movs	r3, #2
 8011f12:	f10d 0216 	add.w	r2, sp, #22
 8011f16:	6830      	ldr	r0, [r6, #0]
 8011f18:	f7ff fcee 	bl	80118f8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8011f1c:	2201      	movs	r2, #1
 8011f1e:	f104 0308 	add.w	r3, r4, #8
 8011f22:	fa02 f303 	lsl.w	r3, r2, r3
 8011f26:	40a2      	lsls	r2, r4
 8011f28:	4313      	orrs	r3, r2
 8011f2a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	ea21 0203 	bic.w	r2, r1, r3
 8011f34:	b97d      	cbnz	r5, 8011f56 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x66>
 8011f36:	f8ad 2016 	strh.w	r2, [sp, #22]
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8011f40:	2302      	movs	r3, #2
 8011f42:	2208      	movs	r2, #8
 8011f44:	9300      	str	r3, [sp, #0]
 8011f46:	2101      	movs	r1, #1
 8011f48:	6830      	ldr	r0, [r6, #0]
 8011f4a:	f10d 0316 	add.w	r3, sp, #22
 8011f4e:	f7ff fc93 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011f52:	b006      	add	sp, #24
 8011f54:	bd70      	pop	{r4, r5, r6, pc}
 8011f56:	4319      	orrs	r1, r3
 8011f58:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011f5c:	e7ed      	b.n	8011f3a <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x4a>
 8011f5e:	bf00      	nop
 8011f60:	2000a0a8 	andcs	sl, r0, r8, lsr #1
 8011f64:	2000a090 	mulcs	r0, r0, r0

08011f68 <non-virtual thunk to StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 8011f68:	f1a0 0004 	sub.w	r0, r0, #4
 8011f6c:	f7ff bfc0 	b.w	8011ef0 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>

08011f70 <StoreArtNet::Copy(artnetparams::Params*)>:
 8011f70:	b507      	push	{r0, r1, r2, lr}
 8011f72:	2300      	movs	r3, #0
 8011f74:	460a      	mov	r2, r1
 8011f76:	2101      	movs	r1, #1
 8011f78:	e9cd 3100 	strd	r3, r1, [sp]
 8011f7c:	4803      	ldr	r0, [pc, #12]	; (8011f8c <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 8011f7e:	2387      	movs	r3, #135	; 0x87
 8011f80:	6800      	ldr	r0, [r0, #0]
 8011f82:	f7ff fcb9 	bl	80118f8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8011f86:	b003      	add	sp, #12
 8011f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f8c:	2000a090 	mulcs	r0, r0, r0

08011f90 <StoreArtNet::~StoreArtNet()>:
 8011f90:	b510      	push	{r4, lr}
 8011f92:	4604      	mov	r4, r0
 8011f94:	f001 f86c 	bl	8013070 <operator delete(void*)>
 8011f98:	4620      	mov	r0, r4
 8011f9a:	bd10      	pop	{r4, pc}

08011f9c <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 8011f9c:	f1a0 0004 	sub.w	r0, r0, #4
 8011fa0:	e7f6      	b.n	8011f90 <StoreArtNet::~StoreArtNet()>
	...

08011fa4 <StoreArtNet::StoreArtNet(unsigned int)>:
 8011fa4:	b510      	push	{r4, lr}
 8011fa6:	4a05      	ldr	r2, [pc, #20]	; (8011fbc <StoreArtNet::StoreArtNet(unsigned int)+0x18>)
 8011fa8:	4b05      	ldr	r3, [pc, #20]	; (8011fc0 <StoreArtNet::StoreArtNet(unsigned int)+0x1c>)
 8011faa:	f102 0408 	add.w	r4, r2, #8
 8011fae:	3248      	adds	r2, #72	; 0x48
 8011fb0:	6042      	str	r2, [r0, #4]
 8011fb2:	4a04      	ldr	r2, [pc, #16]	; (8011fc4 <StoreArtNet::StoreArtNet(unsigned int)+0x20>)
 8011fb4:	6004      	str	r4, [r0, #0]
 8011fb6:	6010      	str	r0, [r2, #0]
 8011fb8:	6019      	str	r1, [r3, #0]
 8011fba:	bd10      	pop	{r4, pc}
 8011fbc:	080175a8 	stmdaeq	r1, {r3, r5, r7, r8, sl, ip, sp, lr}
 8011fc0:	2000a0a8 	andcs	sl, r0, r8, lsr #1
 8011fc4:	2000a0ac 	andcs	sl, r0, ip, lsr #1

08011fc8 <StoreRDMDevice::~StoreRDMDevice()>:
 8011fc8:	4770      	bx	lr

08011fca <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8011fca:	3804      	subs	r0, #4
 8011fcc:	4770      	bx	lr
	...

08011fd0 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 8011fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	460b      	mov	r3, r1
 8011fd6:	2129      	movs	r1, #41	; 0x29
 8011fd8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8011fdc:	4804      	ldr	r0, [pc, #16]	; (8011ff0 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 8011fde:	9100      	str	r1, [sp, #0]
 8011fe0:	6800      	ldr	r0, [r0, #0]
 8011fe2:	210b      	movs	r1, #11
 8011fe4:	f7ff fc48 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8011fe8:	b005      	add	sp, #20
 8011fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fee:	bf00      	nop
 8011ff0:	2000a090 	mulcs	r0, r0, r0

08011ff4 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8011ff4:	b570      	push	{r4, r5, r6, lr}
 8011ff6:	2401      	movs	r4, #1
 8011ff8:	2600      	movs	r6, #0
 8011ffa:	4d0c      	ldr	r5, [pc, #48]	; (801202c <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 8011ffc:	b086      	sub	sp, #24
 8011ffe:	460b      	mov	r3, r1
 8012000:	6828      	ldr	r0, [r5, #0]
 8012002:	f88d 2017 	strb.w	r2, [sp, #23]
 8012006:	9200      	str	r2, [sp, #0]
 8012008:	210b      	movs	r1, #11
 801200a:	2204      	movs	r2, #4
 801200c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8012010:	f7ff fc32 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012014:	2224      	movs	r2, #36	; 0x24
 8012016:	210b      	movs	r1, #11
 8012018:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801201c:	6828      	ldr	r0, [r5, #0]
 801201e:	9400      	str	r4, [sp, #0]
 8012020:	f10d 0317 	add.w	r3, sp, #23
 8012024:	f7ff fc28 	bl	8011878 <ConfigStore::Update(configstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 8012028:	b006      	add	sp, #24
 801202a:	bd70      	pop	{r4, r5, r6, pc}
 801202c:	2000a090 	mulcs	r0, r0, r0

08012030 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 8012030:	f1a0 0004 	sub.w	r0, r0, #4
 8012034:	e7de      	b.n	8011ff4 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 8012036:	bf00      	nop

08012038 <StoreRDMDevice::~StoreRDMDevice()>:
 8012038:	b510      	push	{r4, lr}
 801203a:	4604      	mov	r4, r0
 801203c:	f001 f818 	bl	8013070 <operator delete(void*)>
 8012040:	4620      	mov	r0, r4
 8012042:	bd10      	pop	{r4, pc}

08012044 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 8012044:	f1a0 0004 	sub.w	r0, r0, #4
 8012048:	e7f6      	b.n	8012038 <StoreRDMDevice::~StoreRDMDevice()>
	...

0801204c <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 801204c:	b507      	push	{r0, r1, r2, lr}
 801204e:	2300      	movs	r3, #0
 8012050:	460a      	mov	r2, r1
 8012052:	2101      	movs	r1, #1
 8012054:	e9cd 3100 	strd	r3, r1, [sp]
 8012058:	4804      	ldr	r0, [pc, #16]	; (801206c <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x20>)
 801205a:	2329      	movs	r3, #41	; 0x29
 801205c:	210b      	movs	r1, #11
 801205e:	6800      	ldr	r0, [r0, #0]
 8012060:	f7ff fc4a 	bl	80118f8 <ConfigStore::Copy(configstore::Store, void*, unsigned int, unsigned int, bool)>
 8012064:	b003      	add	sp, #12
 8012066:	f85d fb04 	ldr.w	pc, [sp], #4
 801206a:	bf00      	nop
 801206c:	2000a090 	mulcs	r0, r0, r0

08012070 <StoreRDMDevice::StoreRDMDevice()>:
 8012070:	4a03      	ldr	r2, [pc, #12]	; (8012080 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 8012072:	6002      	str	r2, [r0, #0]
 8012074:	321c      	adds	r2, #28
 8012076:	6042      	str	r2, [r0, #4]
 8012078:	4a02      	ldr	r2, [pc, #8]	; (8012084 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 801207a:	6010      	str	r0, [r2, #0]
 801207c:	4770      	bx	lr
 801207e:	bf00      	nop
 8012080:	08017628 	stmdaeq	r1, {r3, r5, r9, sl, ip, sp, lr}
 8012084:	2000a0b0 	strhcs	sl, [r0], -r0

08012088 <FlashCode::FlashCode()>:
 8012088:	b538      	push	{r3, r4, r5, lr}
 801208a:	4b09      	ldr	r3, [pc, #36]	; (80120b0 <FlashCode::FlashCode()+0x28>)
 801208c:	4604      	mov	r4, r0
 801208e:	6018      	str	r0, [r3, #0]
 8012090:	2301      	movs	r3, #1
 8012092:	7003      	strb	r3, [r0, #0]
 8012094:	f000 f812 	bl	80120bc <FlashCode::GetSize() const>
 8012098:	4605      	mov	r5, r0
 801209a:	4620      	mov	r0, r4
 801209c:	f000 f80e 	bl	80120bc <FlashCode::GetSize() const>
 80120a0:	462a      	mov	r2, r5
 80120a2:	0a83      	lsrs	r3, r0, #10
 80120a4:	4903      	ldr	r1, [pc, #12]	; (80120b4 <FlashCode::FlashCode()+0x2c>)
 80120a6:	4804      	ldr	r0, [pc, #16]	; (80120b8 <FlashCode::FlashCode()+0x30>)
 80120a8:	f001 faae 	bl	8013608 <printf>
 80120ac:	4620      	mov	r0, r4
 80120ae:	bd38      	pop	{r3, r4, r5, pc}
 80120b0:	2000a0b8 	strhcs	sl, [r0], -r8
 80120b4:	08016022 	stmdaeq	r1, {r1, r5, sp, lr}
 80120b8:	08017650 	stmdaeq	r1, {r4, r6, r9, sl, ip, sp, lr}

080120bc <FlashCode::GetSize() const>:
 80120bc:	4b02      	ldr	r3, [pc, #8]	; (80120c8 <FlashCode::GetSize() const+0xc>)
 80120be:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 80120c2:	0280      	lsls	r0, r0, #10
 80120c4:	4770      	bx	lr
 80120c6:	bf00      	nop
 80120c8:	1ffff700 	svcne	0x00fff700

080120cc <FlashCode::GetSectorSize() const>:
 80120cc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80120d0:	4770      	bx	lr

080120d2 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)>:
 80120d2:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80120d6:	441a      	add	r2, r3
 80120d8:	4293      	cmp	r3, r2
 80120da:	d104      	bne.n	80120e6 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x14>
 80120dc:	2200      	movs	r2, #0
 80120de:	9b00      	ldr	r3, [sp, #0]
 80120e0:	2001      	movs	r0, #1
 80120e2:	601a      	str	r2, [r3, #0]
 80120e4:	4770      	bx	lr
 80120e6:	f851 0b04 	ldr.w	r0, [r1], #4
 80120ea:	f843 0b04 	str.w	r0, [r3], #4
 80120ee:	e7f3      	b.n	80120d8 <FlashCode::Read(unsigned int, unsigned int, unsigned char*, flashcode::result&)+0x6>

080120f0 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)>:
 80120f0:	2000      	movs	r0, #0
 80120f2:	b538      	push	{r3, r4, r5, lr}
 80120f4:	4c47      	ldr	r4, [pc, #284]	; (8012214 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x124>)
 80120f6:	6018      	str	r0, [r3, #0]
 80120f8:	6823      	ldr	r3, [r4, #0]
 80120fa:	2b04      	cmp	r3, #4
 80120fc:	f200 8082 	bhi.w	8012204 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 8012100:	e8df f003 	tbb	[pc, r3]
 8012104:	78452003 	stmdavc	r5, {r0, r1, sp}^
 8012108:	4b430080 	blmi	90d2310 <__exidx_end+0x10ba798>
 801210c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8012110:	6019      	str	r1, [r3, #0]
 8012112:	4b42      	ldr	r3, [pc, #264]	; (801221c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8012114:	601a      	str	r2, [r3, #0]
 8012116:	4b42      	ldr	r3, [pc, #264]	; (8012220 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x130>)
 8012118:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 801211c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012120:	4b40      	ldr	r3, [pc, #256]	; (8012224 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8012122:	d807      	bhi.n	8012134 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x44>
 8012124:	2201      	movs	r2, #1
 8012126:	701a      	strb	r2, [r3, #0]
 8012128:	f002 f8ec 	bl	8014304 <fmc_bank0_unlock>
 801212c:	2301      	movs	r3, #1
 801212e:	6023      	str	r3, [r4, #0]
 8012130:	2000      	movs	r0, #0
 8012132:	e026      	b.n	8012182 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 8012134:	4a3c      	ldr	r2, [pc, #240]	; (8012228 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x138>)
 8012136:	4291      	cmp	r1, r2
 8012138:	d3f4      	bcc.n	8012124 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x34>
 801213a:	2200      	movs	r2, #0
 801213c:	701a      	strb	r2, [r3, #0]
 801213e:	f002 f8ef 	bl	8014320 <fmc_bank1_unlock>
 8012142:	e7f3      	b.n	801212c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 8012144:	4d37      	ldr	r5, [pc, #220]	; (8012224 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8012146:	782b      	ldrb	r3, [r5, #0]
 8012148:	b15b      	cbz	r3, 8012162 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x72>
 801214a:	f002 f907 	bl	801435c <fmc_bank0_state_get>
 801214e:	2801      	cmp	r0, #1
 8012150:	d0ee      	beq.n	8012130 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x40>
 8012152:	7829      	ldrb	r1, [r5, #0]
 8012154:	4b35      	ldr	r3, [pc, #212]	; (801222c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 8012156:	b939      	cbnz	r1, 8012168 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x78>
 8012158:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801215a:	f022 0202 	bic.w	r2, r2, #2
 801215e:	651a      	str	r2, [r3, #80]	; 0x50
 8012160:	e006      	b.n	8012170 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x80>
 8012162:	f002 f90d 	bl	8014380 <fmc_bank1_state_get>
 8012166:	e7f2      	b.n	801214e <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x5e>
 8012168:	691a      	ldr	r2, [r3, #16]
 801216a:	f022 0202 	bic.w	r2, r2, #2
 801216e:	611a      	str	r2, [r3, #16]
 8012170:	4b2a      	ldr	r3, [pc, #168]	; (801221c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	b94b      	cbnz	r3, 801218a <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x9a>
 8012176:	b129      	cbz	r1, 8012184 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x94>
 8012178:	f002 f8e0 	bl	801433c <fmc_bank0_lock>
 801217c:	2300      	movs	r3, #0
 801217e:	2001      	movs	r0, #1
 8012180:	6023      	str	r3, [r4, #0]
 8012182:	bd38      	pop	{r3, r4, r5, pc}
 8012184:	f002 f8e2 	bl	801434c <fmc_bank1_lock>
 8012188:	e7f8      	b.n	801217c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x8c>
 801218a:	2302      	movs	r3, #2
 801218c:	e7cf      	b.n	801212e <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3e>
 801218e:	4923      	ldr	r1, [pc, #140]	; (801221c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x12c>)
 8012190:	680b      	ldr	r3, [r1, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d0ca      	beq.n	801212c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 8012196:	4b23      	ldr	r3, [pc, #140]	; (8012224 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 8012198:	4a1f      	ldr	r2, [pc, #124]	; (8012218 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x128>)
 801219a:	7818      	ldrb	r0, [r3, #0]
 801219c:	4b23      	ldr	r3, [pc, #140]	; (801222c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 801219e:	b190      	cbz	r0, 80121c6 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd6>
 80121a0:	6918      	ldr	r0, [r3, #16]
 80121a2:	f040 0002 	orr.w	r0, r0, #2
 80121a6:	6118      	str	r0, [r3, #16]
 80121a8:	6810      	ldr	r0, [r2, #0]
 80121aa:	6158      	str	r0, [r3, #20]
 80121ac:	6918      	ldr	r0, [r3, #16]
 80121ae:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80121b2:	6118      	str	r0, [r3, #16]
 80121b4:	680b      	ldr	r3, [r1, #0]
 80121b6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80121ba:	600b      	str	r3, [r1, #0]
 80121bc:	6813      	ldr	r3, [r2, #0]
 80121be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121c2:	6013      	str	r3, [r2, #0]
 80121c4:	e7b2      	b.n	801212c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x3c>
 80121c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80121c8:	f040 0002 	orr.w	r0, r0, #2
 80121cc:	6518      	str	r0, [r3, #80]	; 0x50
 80121ce:	6810      	ldr	r0, [r2, #0]
 80121d0:	6558      	str	r0, [r3, #84]	; 0x54
 80121d2:	69dd      	ldr	r5, [r3, #28]
 80121d4:	07ad      	lsls	r5, r5, #30
 80121d6:	bf48      	it	mi
 80121d8:	6158      	strmi	r0, [r3, #20]
 80121da:	4814      	ldr	r0, [pc, #80]	; (801222c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 80121dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80121de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121e2:	6503      	str	r3, [r0, #80]	; 0x50
 80121e4:	680b      	ldr	r3, [r1, #0]
 80121e6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80121ea:	600b      	str	r3, [r1, #0]
 80121ec:	6813      	ldr	r3, [r2, #0]
 80121ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80121f2:	e7e6      	b.n	80121c2 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0xd2>
 80121f4:	4b0b      	ldr	r3, [pc, #44]	; (8012224 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x134>)
 80121f6:	781a      	ldrb	r2, [r3, #0]
 80121f8:	4b0c      	ldr	r3, [pc, #48]	; (801222c <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x13c>)
 80121fa:	b132      	cbz	r2, 801220a <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x11a>
 80121fc:	691a      	ldr	r2, [r3, #16]
 80121fe:	f022 0201 	bic.w	r2, r2, #1
 8012202:	611a      	str	r2, [r3, #16]
 8012204:	2000      	movs	r0, #0
 8012206:	6020      	str	r0, [r4, #0]
 8012208:	e7bb      	b.n	8012182 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x92>
 801220a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801220c:	f022 0201 	bic.w	r2, r2, #1
 8012210:	651a      	str	r2, [r3, #80]	; 0x50
 8012212:	e7f7      	b.n	8012204 <FlashCode::Erase(unsigned int, unsigned int, flashcode::result&)+0x114>
 8012214:	2000a0c0 	andcs	sl, r0, r0, asr #1
 8012218:	2000a0c4 	andcs	sl, r0, r4, asr #1
 801221c:	2000a0d0 	ldrdcs	sl, [r0], -r0
 8012220:	1ffff700 	svcne	0x00fff700
 8012224:	2000a0cc 	andcs	sl, r0, ip, asr #1
 8012228:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 801222c:	40022000 	andmi	r2, r2, r0

08012230 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)>:
 8012230:	b570      	push	{r4, r5, r6, lr}
 8012232:	2400      	movs	r4, #0
 8012234:	9804      	ldr	r0, [sp, #16]
 8012236:	6004      	str	r4, [r0, #0]
 8012238:	4c48      	ldr	r4, [pc, #288]	; (801235c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x12c>)
 801223a:	6820      	ldr	r0, [r4, #0]
 801223c:	2804      	cmp	r0, #4
 801223e:	d848      	bhi.n	80122d2 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xa2>
 8012240:	e8df f000 	tbb	[pc, r0]
 8012244:	22847c03 	addcs	r7, r4, #768	; 0x300
 8012248:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 801224c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8012250:	6001      	str	r1, [r0, #0]
 8012252:	4844      	ldr	r0, [pc, #272]	; (8012364 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 8012254:	6003      	str	r3, [r0, #0]
 8012256:	4b44      	ldr	r3, [pc, #272]	; (8012368 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 8012258:	601a      	str	r2, [r3, #0]
 801225a:	4b44      	ldr	r3, [pc, #272]	; (801236c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x13c>)
 801225c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8012260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012264:	4b42      	ldr	r3, [pc, #264]	; (8012370 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8012266:	d807      	bhi.n	8012278 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x48>
 8012268:	2201      	movs	r2, #1
 801226a:	701a      	strb	r2, [r3, #0]
 801226c:	f002 f84a 	bl	8014304 <fmc_bank0_unlock>
 8012270:	2303      	movs	r3, #3
 8012272:	6023      	str	r3, [r4, #0]
 8012274:	2000      	movs	r0, #0
 8012276:	e026      	b.n	80122c6 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 8012278:	4a3e      	ldr	r2, [pc, #248]	; (8012374 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x144>)
 801227a:	4291      	cmp	r1, r2
 801227c:	d3f4      	bcc.n	8012268 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x38>
 801227e:	2200      	movs	r2, #0
 8012280:	701a      	strb	r2, [r3, #0]
 8012282:	f002 f84d 	bl	8014320 <fmc_bank1_unlock>
 8012286:	e7f3      	b.n	8012270 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8012288:	4d39      	ldr	r5, [pc, #228]	; (8012370 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 801228a:	782b      	ldrb	r3, [r5, #0]
 801228c:	b15b      	cbz	r3, 80122a6 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x76>
 801228e:	f002 f865 	bl	801435c <fmc_bank0_state_get>
 8012292:	2801      	cmp	r0, #1
 8012294:	d0ee      	beq.n	8012274 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x44>
 8012296:	7829      	ldrb	r1, [r5, #0]
 8012298:	4b37      	ldr	r3, [pc, #220]	; (8012378 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 801229a:	b939      	cbnz	r1, 80122ac <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x7c>
 801229c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801229e:	f022 0201 	bic.w	r2, r2, #1
 80122a2:	651a      	str	r2, [r3, #80]	; 0x50
 80122a4:	e006      	b.n	80122b4 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x84>
 80122a6:	f002 f86b 	bl	8014380 <fmc_bank1_state_get>
 80122aa:	e7f2      	b.n	8012292 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x62>
 80122ac:	691a      	ldr	r2, [r3, #16]
 80122ae:	f022 0201 	bic.w	r2, r2, #1
 80122b2:	611a      	str	r2, [r3, #16]
 80122b4:	4b2c      	ldr	r3, [pc, #176]	; (8012368 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	b94b      	cbnz	r3, 80122ce <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x9e>
 80122ba:	b129      	cbz	r1, 80122c8 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x98>
 80122bc:	f002 f83e 	bl	801433c <fmc_bank0_lock>
 80122c0:	2300      	movs	r3, #0
 80122c2:	2001      	movs	r0, #1
 80122c4:	6023      	str	r3, [r4, #0]
 80122c6:	bd70      	pop	{r4, r5, r6, pc}
 80122c8:	f002 f840 	bl	801434c <fmc_bank1_lock>
 80122cc:	e7f8      	b.n	80122c0 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x90>
 80122ce:	2304      	movs	r3, #4
 80122d0:	e7cf      	b.n	8012272 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x42>
 80122d2:	4a25      	ldr	r2, [pc, #148]	; (8012368 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x138>)
 80122d4:	6813      	ldr	r3, [r2, #0]
 80122d6:	2b03      	cmp	r3, #3
 80122d8:	d91a      	bls.n	8012310 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xe0>
 80122da:	4b25      	ldr	r3, [pc, #148]	; (8012370 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 80122dc:	7819      	ldrb	r1, [r3, #0]
 80122de:	4b26      	ldr	r3, [pc, #152]	; (8012378 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 80122e0:	b189      	cbz	r1, 8012306 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xd6>
 80122e2:	6919      	ldr	r1, [r3, #16]
 80122e4:	f041 0101 	orr.w	r1, r1, #1
 80122e8:	6119      	str	r1, [r3, #16]
 80122ea:	4d1e      	ldr	r5, [pc, #120]	; (8012364 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 80122ec:	481c      	ldr	r0, [pc, #112]	; (8012360 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 80122ee:	6829      	ldr	r1, [r5, #0]
 80122f0:	6803      	ldr	r3, [r0, #0]
 80122f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80122f6:	f843 6b04 	str.w	r6, [r3], #4
 80122fa:	6003      	str	r3, [r0, #0]
 80122fc:	6813      	ldr	r3, [r2, #0]
 80122fe:	6029      	str	r1, [r5, #0]
 8012300:	3b04      	subs	r3, #4
 8012302:	6013      	str	r3, [r2, #0]
 8012304:	e7b4      	b.n	8012270 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8012306:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8012308:	f041 0101 	orr.w	r1, r1, #1
 801230c:	6519      	str	r1, [r3, #80]	; 0x50
 801230e:	e7ec      	b.n	80122ea <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xba>
 8012310:	2b00      	cmp	r3, #0
 8012312:	d0ad      	beq.n	8012270 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8012314:	4b16      	ldr	r3, [pc, #88]	; (8012370 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 8012316:	781a      	ldrb	r2, [r3, #0]
 8012318:	4b17      	ldr	r3, [pc, #92]	; (8012378 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 801231a:	b152      	cbz	r2, 8012332 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x102>
 801231c:	691a      	ldr	r2, [r3, #16]
 801231e:	f042 0201 	orr.w	r2, r2, #1
 8012322:	611a      	str	r2, [r3, #16]
 8012324:	4a0f      	ldr	r2, [pc, #60]	; (8012364 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x134>)
 8012326:	4b0e      	ldr	r3, [pc, #56]	; (8012360 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x130>)
 8012328:	6812      	ldr	r2, [r2, #0]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	6812      	ldr	r2, [r2, #0]
 801232e:	601a      	str	r2, [r3, #0]
 8012330:	e79e      	b.n	8012270 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x40>
 8012332:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012334:	f042 0201 	orr.w	r2, r2, #1
 8012338:	651a      	str	r2, [r3, #80]	; 0x50
 801233a:	e7f3      	b.n	8012324 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0xf4>
 801233c:	4b0c      	ldr	r3, [pc, #48]	; (8012370 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x140>)
 801233e:	781a      	ldrb	r2, [r3, #0]
 8012340:	4b0d      	ldr	r3, [pc, #52]	; (8012378 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x148>)
 8012342:	b132      	cbz	r2, 8012352 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x122>
 8012344:	691a      	ldr	r2, [r3, #16]
 8012346:	f022 0202 	bic.w	r2, r2, #2
 801234a:	611a      	str	r2, [r3, #16]
 801234c:	2000      	movs	r0, #0
 801234e:	6020      	str	r0, [r4, #0]
 8012350:	e7b9      	b.n	80122c6 <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x96>
 8012352:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012354:	f022 0202 	bic.w	r2, r2, #2
 8012358:	651a      	str	r2, [r3, #80]	; 0x50
 801235a:	e7f7      	b.n	801234c <FlashCode::Write(unsigned int, unsigned int, unsigned char const*, flashcode::result&)+0x11c>
 801235c:	2000a0c0 	andcs	sl, r0, r0, asr #1
 8012360:	2000a0bc 	strhcs	sl, [r0], -ip
 8012364:	2000a0c8 	andcs	sl, r0, r8, asr #1
 8012368:	2000a0d0 	ldrdcs	sl, [r0], -r0
 801236c:	1ffff700 	svcne	0x00fff700
 8012370:	2000a0cc 	andcs	sl, r0, ip, asr #1
 8012374:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 8012378:	40022000 	andmi	r2, r2, r0

0801237c <properties::convert_json_file(char*, unsigned short, bool)>:
 801237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012380:	4603      	mov	r3, r0
 8012382:	7800      	ldrb	r0, [r0, #0]
 8012384:	287b      	cmp	r0, #123	; 0x7b
 8012386:	f040 80a2 	bne.w	80124ce <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 801238a:	b17a      	cbz	r2, 80123ac <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 801238c:	2401      	movs	r4, #1
 801238e:	461e      	mov	r6, r3
 8012390:	4620      	mov	r0, r4
 8012392:	2a00      	cmp	r2, #0
 8012394:	bf0c      	ite	eq
 8012396:	f04f 0c0a 	moveq.w	ip, #10
 801239a:	f04f 0c00 	movne.w	ip, #0
 801239e:	273d      	movs	r7, #61	; 0x3d
 80123a0:	42a1      	cmp	r1, r4
 80123a2:	d850      	bhi.n	8012446 <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 80123a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123a8:	463c      	mov	r4, r7
 80123aa:	e7f2      	b.n	8012392 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 80123ac:	2023      	movs	r0, #35	; 0x23
 80123ae:	f803 0b01 	strb.w	r0, [r3], #1
 80123b2:	461c      	mov	r4, r3
 80123b4:	2701      	movs	r7, #1
 80123b6:	42b9      	cmp	r1, r7
 80123b8:	d811      	bhi.n	80123de <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 80123ba:	2001      	movs	r0, #1
 80123bc:	461e      	mov	r6, r3
 80123be:	230a      	movs	r3, #10
 80123c0:	4625      	mov	r5, r4
 80123c2:	f806 3b01 	strb.w	r3, [r6], #1
 80123c6:	3001      	adds	r0, #1
 80123c8:	462b      	mov	r3, r5
 80123ca:	781c      	ldrb	r4, [r3, #0]
 80123cc:	3501      	adds	r5, #1
 80123ce:	2c7b      	cmp	r4, #123	; 0x7b
 80123d0:	d0ea      	beq.n	80123a8 <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 80123d2:	42b9      	cmp	r1, r7
 80123d4:	f107 0401 	add.w	r4, r7, #1
 80123d8:	d9db      	bls.n	8012392 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 80123da:	4627      	mov	r7, r4
 80123dc:	e7f4      	b.n	80123c8 <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 80123de:	f814 0b01 	ldrb.w	r0, [r4], #1
 80123e2:	2822      	cmp	r0, #34	; 0x22
 80123e4:	d119      	bne.n	801241a <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 80123e6:	46a4      	mov	ip, r4
 80123e8:	461d      	mov	r5, r3
 80123ea:	2601      	movs	r6, #1
 80123ec:	f89c e000 	ldrb.w	lr, [ip]
 80123f0:	4664      	mov	r4, ip
 80123f2:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 80123f6:	462b      	mov	r3, r5
 80123f8:	4630      	mov	r0, r6
 80123fa:	f10c 0c01 	add.w	ip, ip, #1
 80123fe:	f105 0501 	add.w	r5, r5, #1
 8012402:	f106 0601 	add.w	r6, r6, #1
 8012406:	d0d9      	beq.n	80123bc <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8012408:	3701      	adds	r7, #1
 801240a:	42b9      	cmp	r1, r7
 801240c:	4664      	mov	r4, ip
 801240e:	f805 ec01 	strb.w	lr, [r5, #-1]
 8012412:	d8eb      	bhi.n	80123ec <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8012414:	4630      	mov	r0, r6
 8012416:	462b      	mov	r3, r5
 8012418:	e7d0      	b.n	80123bc <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 801241a:	3701      	adds	r7, #1
 801241c:	e7cb      	b.n	80123b6 <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 801241e:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8012422:	d110      	bne.n	8012446 <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8012424:	eba0 0803 	sub.w	r8, r0, r3
 8012428:	461a      	mov	r2, r3
 801242a:	eb08 0003 	add.w	r0, r8, r3
 801242e:	f813 eb01 	ldrb.w	lr, [r3], #1
 8012432:	1c65      	adds	r5, r4, #1
 8012434:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8012438:	d04c      	beq.n	80124d4 <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 801243a:	42a1      	cmp	r1, r4
 801243c:	d911      	bls.n	8012462 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 801243e:	462c      	mov	r4, r5
 8012440:	f806 eb01 	strb.w	lr, [r6], #1
 8012444:	e7f0      	b.n	8012428 <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8012446:	42a1      	cmp	r1, r4
 8012448:	461d      	mov	r5, r3
 801244a:	f893 e000 	ldrb.w	lr, [r3]
 801244e:	f104 0401 	add.w	r4, r4, #1
 8012452:	f103 0301 	add.w	r3, r3, #1
 8012456:	d8e2      	bhi.n	801241e <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8012458:	462b      	mov	r3, r5
 801245a:	e7e3      	b.n	8012424 <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 801245c:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 8012460:	d009      	beq.n	8012476 <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8012462:	42a9      	cmp	r1, r5
 8012464:	4614      	mov	r4, r2
 8012466:	f892 e000 	ldrb.w	lr, [r2]
 801246a:	f105 0501 	add.w	r5, r5, #1
 801246e:	f102 0201 	add.w	r2, r2, #1
 8012472:	d8f3      	bhi.n	801245c <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 8012474:	4622      	mov	r2, r4
 8012476:	7814      	ldrb	r4, [r2, #0]
 8012478:	4696      	mov	lr, r2
 801247a:	2c2f      	cmp	r4, #47	; 0x2f
 801247c:	462b      	mov	r3, r5
 801247e:	f102 0201 	add.w	r2, r2, #1
 8012482:	f105 0501 	add.w	r5, r5, #1
 8012486:	d81a      	bhi.n	80124be <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 8012488:	4299      	cmp	r1, r3
 801248a:	d8f4      	bhi.n	8012476 <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 801248c:	2c22      	cmp	r4, #34	; 0x22
 801248e:	bf08      	it	eq
 8012490:	4696      	moveq	lr, r2
 8012492:	4673      	mov	r3, lr
 8012494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012498:	1c6c      	adds	r4, r5, #1
 801249a:	2a22      	cmp	r2, #34	; 0x22
 801249c:	d011      	beq.n	80124c2 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 801249e:	2a2c      	cmp	r2, #44	; 0x2c
 80124a0:	d00f      	beq.n	80124c2 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 80124a2:	2a7d      	cmp	r2, #125	; 0x7d
 80124a4:	d00d      	beq.n	80124c2 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 80124a6:	42a9      	cmp	r1, r5
 80124a8:	d90f      	bls.n	80124ca <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 80124aa:	f1a2 0520 	sub.w	r5, r2, #32
 80124ae:	2d5a      	cmp	r5, #90	; 0x5a
 80124b0:	d803      	bhi.n	80124ba <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 80124b2:	469e      	mov	lr, r3
 80124b4:	f806 2b01 	strb.w	r2, [r6], #1
 80124b8:	3001      	adds	r0, #1
 80124ba:	4625      	mov	r5, r4
 80124bc:	e7e9      	b.n	8012492 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 80124be:	461d      	mov	r5, r3
 80124c0:	e7e7      	b.n	8012492 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 80124c2:	462c      	mov	r4, r5
 80124c4:	f806 cb01 	strb.w	ip, [r6], #1
 80124c8:	3001      	adds	r0, #1
 80124ca:	3401      	adds	r4, #1
 80124cc:	e768      	b.n	80123a0 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 80124ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80124d2:	e767      	b.n	80123a4 <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 80124d4:	4625      	mov	r5, r4
 80124d6:	f806 7b01 	strb.w	r7, [r6], #1
 80124da:	3001      	adds	r0, #1
 80124dc:	e7c1      	b.n	8012462 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

080124e0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 80124e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124e4:	6002      	str	r2, [r0, #0]
 80124e6:	4614      	mov	r4, r2
 80124e8:	2200      	movs	r2, #0
 80124ea:	80c2      	strh	r2, [r0, #6]
 80124ec:	4a1c      	ldr	r2, [pc, #112]	; (8012560 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 80124ee:	4606      	mov	r6, r0
 80124f0:	7812      	ldrb	r2, [r2, #0]
 80124f2:	8083      	strh	r3, [r0, #4]
 80124f4:	f002 0201 	and.w	r2, r2, #1
 80124f8:	7202      	strb	r2, [r0, #8]
 80124fa:	4608      	mov	r0, r1
 80124fc:	4605      	mov	r5, r0
 80124fe:	782f      	ldrb	r7, [r5, #0]
 8012500:	3001      	adds	r0, #1
 8012502:	2f00      	cmp	r7, #0
 8012504:	d1fa      	bne.n	80124fc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8012506:	1a6d      	subs	r5, r5, r1
 8012508:	b29b      	uxth	r3, r3
 801250a:	b1d2      	cbz	r2, 8012542 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 801250c:	1d2f      	adds	r7, r5, #4
 801250e:	429f      	cmp	r7, r3
 8012510:	d814      	bhi.n	801253c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8012512:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8012516:	f04f 0922 	mov.w	r9, #34	; 0x22
 801251a:	462a      	mov	r2, r5
 801251c:	f884 8000 	strb.w	r8, [r4]
 8012520:	f884 9001 	strb.w	r9, [r4, #1]
 8012524:	1ca0      	adds	r0, r4, #2
 8012526:	f000 fe3e 	bl	80131a6 <memmove>
 801252a:	223a      	movs	r2, #58	; 0x3a
 801252c:	1963      	adds	r3, r4, r5
 801252e:	3505      	adds	r5, #5
 8012530:	f883 9002 	strb.w	r9, [r3, #2]
 8012534:	70da      	strb	r2, [r3, #3]
 8012536:	80f5      	strh	r5, [r6, #6]
 8012538:	f804 8007 	strb.w	r8, [r4, r7]
 801253c:	4630      	mov	r0, r6
 801253e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012542:	1caf      	adds	r7, r5, #2
 8012544:	429f      	cmp	r7, r3
 8012546:	d8f9      	bhi.n	801253c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8012548:	4620      	mov	r0, r4
 801254a:	2323      	movs	r3, #35	; 0x23
 801254c:	462a      	mov	r2, r5
 801254e:	f800 3b01 	strb.w	r3, [r0], #1
 8012552:	f000 fe28 	bl	80131a6 <memmove>
 8012556:	230a      	movs	r3, #10
 8012558:	442c      	add	r4, r5
 801255a:	7063      	strb	r3, [r4, #1]
 801255c:	80f7      	strh	r7, [r6, #6]
 801255e:	e7ed      	b.n	801253c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8012560:	2000a0d4 	ldrdcs	sl, [r0], -r4

08012564 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8012564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012566:	469c      	mov	ip, r3
 8012568:	8885      	ldrh	r5, [r0, #4]
 801256a:	88c3      	ldrh	r3, [r0, #6]
 801256c:	b085      	sub	sp, #20
 801256e:	42ab      	cmp	r3, r5
 8012570:	d302      	bcc.n	8012578 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 8012572:	2000      	movs	r0, #0
 8012574:	b005      	add	sp, #20
 8012576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012578:	4604      	mov	r4, r0
 801257a:	6800      	ldr	r0, [r0, #0]
 801257c:	1aed      	subs	r5, r5, r3
 801257e:	4418      	add	r0, r3
 8012580:	b2d6      	uxtb	r6, r2
 8012582:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8012586:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801258a:	f894 e008 	ldrb.w	lr, [r4, #8]
 801258e:	0e12      	lsrs	r2, r2, #24
 8012590:	f1bc 0f00 	cmp.w	ip, #0
 8012594:	d109      	bne.n	80125aa <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 8012596:	f1be 0f00 	cmp.w	lr, #0
 801259a:	d109      	bne.n	80125b0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 801259c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80125a0:	e9cd 6700 	strd	r6, r7, [sp]
 80125a4:	460b      	mov	r3, r1
 80125a6:	4a0e      	ldr	r2, [pc, #56]	; (80125e0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 80125a8:	e008      	b.n	80125bc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80125aa:	f1be 0f00 	cmp.w	lr, #0
 80125ae:	d00f      	beq.n	80125d0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 80125b0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80125b4:	460b      	mov	r3, r1
 80125b6:	e9cd 6700 	strd	r6, r7, [sp]
 80125ba:	4a0a      	ldr	r2, [pc, #40]	; (80125e4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 80125bc:	4629      	mov	r1, r5
 80125be:	f001 f84b 	bl	8013658 <snprintf>
 80125c2:	4285      	cmp	r5, r0
 80125c4:	dbd5      	blt.n	8012572 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 80125c6:	88e3      	ldrh	r3, [r4, #6]
 80125c8:	4403      	add	r3, r0
 80125ca:	80e3      	strh	r3, [r4, #6]
 80125cc:	2001      	movs	r0, #1
 80125ce:	e7d1      	b.n	8012574 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 80125d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80125d4:	e9cd 6700 	strd	r6, r7, [sp]
 80125d8:	460b      	mov	r3, r1
 80125da:	4a03      	ldr	r2, [pc, #12]	; (80125e8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 80125dc:	e7ee      	b.n	80125bc <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 80125de:	bf00      	nop
 80125e0:	08017692 	stmdaeq	r1, {r1, r4, r7, r9, sl, ip, sp, lr}
 80125e4:	0801767e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r9, sl, ip, sp, lr}
 80125e8:	08017693 	stmdaeq	r1, {r0, r1, r4, r7, r9, sl, ip, sp, lr}

080125ec <PropertiesBuilder::AddComment(char const*)>:
 80125ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ee:	7a06      	ldrb	r6, [r0, #8]
 80125f0:	b996      	cbnz	r6, 8012618 <PropertiesBuilder::AddComment(char const*)+0x2c>
 80125f2:	4604      	mov	r4, r0
 80125f4:	88c0      	ldrh	r0, [r0, #6]
 80125f6:	88a5      	ldrh	r5, [r4, #4]
 80125f8:	42a8      	cmp	r0, r5
 80125fa:	d20d      	bcs.n	8012618 <PropertiesBuilder::AddComment(char const*)+0x2c>
 80125fc:	6827      	ldr	r7, [r4, #0]
 80125fe:	1a2d      	subs	r5, r5, r0
 8012600:	460b      	mov	r3, r1
 8012602:	4a06      	ldr	r2, [pc, #24]	; (801261c <PropertiesBuilder::AddComment(char const*)+0x30>)
 8012604:	4629      	mov	r1, r5
 8012606:	4438      	add	r0, r7
 8012608:	f001 f826 	bl	8013658 <snprintf>
 801260c:	4285      	cmp	r5, r0
 801260e:	bfa1      	itttt	ge
 8012610:	2601      	movge	r6, #1
 8012612:	88e3      	ldrhge	r3, [r4, #6]
 8012614:	18c0      	addge	r0, r0, r3
 8012616:	80e0      	strhge	r0, [r4, #6]
 8012618:	4630      	mov	r0, r6
 801261a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801261c:	080176a3 	stmdaeq	r1, {r0, r1, r5, r7, r9, sl, ip, sp, lr}

08012620 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8012620:	e9c0 1200 	strd	r1, r2, [r0]
 8012624:	4770      	bx	lr

08012626 <ReadConfigFile::~ReadConfigFile()>:
 8012626:	4770      	bx	lr

08012628 <ReadConfigFile::Read(char const*, unsigned int)>:
 8012628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801262c:	4606      	mov	r6, r0
 801262e:	460d      	mov	r5, r1
 8012630:	4614      	mov	r4, r2
 8012632:	f04f 0800 	mov.w	r8, #0
 8012636:	b0a0      	sub	sp, #128	; 0x80
 8012638:	b33c      	cbz	r4, 801268a <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 801263a:	466b      	mov	r3, sp
 801263c:	462a      	mov	r2, r5
 801263e:	4619      	mov	r1, r3
 8012640:	e007      	b.n	8012652 <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 8012642:	f803 7b01 	strb.w	r7, [r3], #1
 8012646:	1a58      	subs	r0, r3, r1
 8012648:	287f      	cmp	r0, #127	; 0x7f
 801264a:	4615      	mov	r5, r2
 801264c:	dc1d      	bgt.n	801268a <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 801264e:	3c01      	subs	r4, #1
 8012650:	d00f      	beq.n	8012672 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8012652:	7817      	ldrb	r7, [r2, #0]
 8012654:	4610      	mov	r0, r2
 8012656:	2f0d      	cmp	r7, #13
 8012658:	f102 0201 	add.w	r2, r2, #1
 801265c:	d001      	beq.n	8012662 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 801265e:	2f0a      	cmp	r7, #10
 8012660:	d1ef      	bne.n	8012642 <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 8012662:	4605      	mov	r5, r0
 8012664:	b12c      	cbz	r4, 8012672 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 8012666:	f810 2b01 	ldrb.w	r2, [r0], #1
 801266a:	2a0d      	cmp	r2, #13
 801266c:	d00b      	beq.n	8012686 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 801266e:	2a0a      	cmp	r2, #10
 8012670:	d009      	beq.n	8012686 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 8012672:	f89d 2000 	ldrb.w	r2, [sp]
 8012676:	2a60      	cmp	r2, #96	; 0x60
 8012678:	d9de      	bls.n	8012638 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 801267a:	f883 8000 	strb.w	r8, [r3]
 801267e:	e9d6 3000 	ldrd	r3, r0, [r6]
 8012682:	4798      	blx	r3
 8012684:	e7d8      	b.n	8012638 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8012686:	3c01      	subs	r4, #1
 8012688:	e7eb      	b.n	8012662 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 801268a:	b020      	add	sp, #128	; 0x80
 801268c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012690 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8012690:	b570      	push	{r4, r5, r6, lr}
 8012692:	4615      	mov	r5, r2
 8012694:	461c      	mov	r4, r3
 8012696:	f000 f890 	bl	80127ba <Sscan::checkName(char const*, char const*)>
 801269a:	b180      	cbz	r0, 80126be <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 801269c:	2100      	movs	r1, #0
 801269e:	5c43      	ldrb	r3, [r0, r1]
 80126a0:	6826      	ldr	r6, [r4, #0]
 80126a2:	b28a      	uxth	r2, r1
 80126a4:	b143      	cbz	r3, 80126b8 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 80126a6:	42b2      	cmp	r2, r6
 80126a8:	d303      	bcc.n	80126b2 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 80126aa:	2b0a      	cmp	r3, #10
 80126ac:	d004      	beq.n	80126b8 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 80126ae:	2002      	movs	r0, #2
 80126b0:	e004      	b.n	80126bc <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 80126b2:	546b      	strb	r3, [r5, r1]
 80126b4:	3101      	adds	r1, #1
 80126b6:	e7f2      	b.n	801269e <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 80126b8:	2000      	movs	r0, #0
 80126ba:	6022      	str	r2, [r4, #0]
 80126bc:	bd70      	pop	{r4, r5, r6, pc}
 80126be:	2001      	movs	r0, #1
 80126c0:	e7fc      	b.n	80126bc <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

080126c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 80126c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126c4:	4615      	mov	r5, r2
 80126c6:	f000 f878 	bl	80127ba <Sscan::checkName(char const*, char const*)>
 80126ca:	bb58      	cbnz	r0, 8012724 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 80126cc:	2001      	movs	r0, #1
 80126ce:	e027      	b.n	8012720 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 80126d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80126d4:	2b09      	cmp	r3, #9
 80126d6:	d822      	bhi.n	801271e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80126d8:	4603      	mov	r3, r0
 80126da:	fb0c 2101 	mla	r1, ip, r1, r2
 80126de:	3930      	subs	r1, #48	; 0x30
 80126e0:	4618      	mov	r0, r3
 80126e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126e6:	2a2e      	cmp	r2, #46	; 0x2e
 80126e8:	d115      	bne.n	8012716 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 80126ea:	29ff      	cmp	r1, #255	; 0xff
 80126ec:	d817      	bhi.n	801271e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80126ee:	3401      	adds	r4, #1
 80126f0:	2c03      	cmp	r4, #3
 80126f2:	f806 1b01 	strb.w	r1, [r6], #1
 80126f6:	d119      	bne.n	801272c <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 80126f8:	2400      	movs	r4, #0
 80126fa:	260a      	movs	r6, #10
 80126fc:	1d1a      	adds	r2, r3, #4
 80126fe:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012702:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8012706:	d115      	bne.n	8012734 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 8012708:	2cff      	cmp	r4, #255	; 0xff
 801270a:	d808      	bhi.n	801271e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801270c:	f88d 4007 	strb.w	r4, [sp, #7]
 8012710:	9b01      	ldr	r3, [sp, #4]
 8012712:	602b      	str	r3, [r5, #0]
 8012714:	e004      	b.n	8012720 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8012716:	2a00      	cmp	r2, #0
 8012718:	d0e7      	beq.n	80126ea <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 801271a:	42b8      	cmp	r0, r7
 801271c:	d1d8      	bne.n	80126d0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 801271e:	2002      	movs	r0, #2
 8012720:	b003      	add	sp, #12
 8012722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012724:	2400      	movs	r4, #0
 8012726:	f04f 0c0a 	mov.w	ip, #10
 801272a:	ae01      	add	r6, sp, #4
 801272c:	4603      	mov	r3, r0
 801272e:	2100      	movs	r1, #0
 8012730:	1d07      	adds	r7, r0, #4
 8012732:	e7d5      	b.n	80126e0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 8012734:	4293      	cmp	r3, r2
 8012736:	d0f2      	beq.n	801271e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012738:	3930      	subs	r1, #48	; 0x30
 801273a:	2909      	cmp	r1, #9
 801273c:	d8ef      	bhi.n	801271e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801273e:	fb06 1404 	mla	r4, r6, r4, r1
 8012742:	e7dc      	b.n	80126fe <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

08012744 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8012744:	b538      	push	{r3, r4, r5, lr}
 8012746:	4615      	mov	r5, r2
 8012748:	f000 f837 	bl	80127ba <Sscan::checkName(char const*, char const*)>
 801274c:	b1a0      	cbz	r0, 8012778 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 801274e:	4604      	mov	r4, r0
 8012750:	2100      	movs	r1, #0
 8012752:	220a      	movs	r2, #10
 8012754:	7823      	ldrb	r3, [r4, #0]
 8012756:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 801275a:	2809      	cmp	r0, #9
 801275c:	d80e      	bhi.n	801277c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 801275e:	fb02 3101 	mla	r1, r2, r1, r3
 8012762:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012766:	3930      	subs	r1, #48	; 0x30
 8012768:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 801276c:	d1f2      	bne.n	8012754 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 801276e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8012772:	d203      	bcs.n	801277c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8012774:	8029      	strh	r1, [r5, #0]
 8012776:	bd38      	pop	{r3, r4, r5, pc}
 8012778:	2001      	movs	r0, #1
 801277a:	e7fc      	b.n	8012776 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 801277c:	2002      	movs	r0, #2
 801277e:	e7fa      	b.n	8012776 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08012780 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8012780:	b538      	push	{r3, r4, r5, lr}
 8012782:	4615      	mov	r5, r2
 8012784:	f000 f819 	bl	80127ba <Sscan::checkName(char const*, char const*)>
 8012788:	b198      	cbz	r0, 80127b2 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 801278a:	4604      	mov	r4, r0
 801278c:	2100      	movs	r1, #0
 801278e:	220a      	movs	r2, #10
 8012790:	7823      	ldrb	r3, [r4, #0]
 8012792:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8012796:	2809      	cmp	r0, #9
 8012798:	d80d      	bhi.n	80127b6 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 801279a:	fb02 3101 	mla	r1, r2, r1, r3
 801279e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80127a2:	3930      	subs	r1, #48	; 0x30
 80127a4:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 80127a8:	d1f2      	bne.n	8012790 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 80127aa:	29ff      	cmp	r1, #255	; 0xff
 80127ac:	d803      	bhi.n	80127b6 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 80127ae:	7029      	strb	r1, [r5, #0]
 80127b0:	bd38      	pop	{r3, r4, r5, pc}
 80127b2:	2001      	movs	r0, #1
 80127b4:	e7fc      	b.n	80127b0 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 80127b6:	2002      	movs	r0, #2
 80127b8:	e7fa      	b.n	80127b0 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

080127ba <Sscan::checkName(char const*, char const*)>:
 80127ba:	4603      	mov	r3, r0
 80127bc:	b510      	push	{r4, lr}
 80127be:	3901      	subs	r1, #1
 80127c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80127c4:	461c      	mov	r4, r3
 80127c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127ca:	b120      	cbz	r0, 80127d6 <Sscan::checkName(char const*, char const*)+0x1c>
 80127cc:	b10a      	cbz	r2, 80127d2 <Sscan::checkName(char const*, char const*)+0x18>
 80127ce:	4290      	cmp	r0, r2
 80127d0:	d0f6      	beq.n	80127c0 <Sscan::checkName(char const*, char const*)+0x6>
 80127d2:	2000      	movs	r0, #0
 80127d4:	e006      	b.n	80127e4 <Sscan::checkName(char const*, char const*)+0x2a>
 80127d6:	2a3d      	cmp	r2, #61	; 0x3d
 80127d8:	d104      	bne.n	80127e4 <Sscan::checkName(char const*, char const*)+0x2a>
 80127da:	7860      	ldrb	r0, [r4, #1]
 80127dc:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 80127e0:	d000      	beq.n	80127e4 <Sscan::checkName(char const*, char const*)+0x2a>
 80127e2:	1c60      	adds	r0, r4, #1
 80127e4:	bd10      	pop	{r4, pc}

080127e6 <LightSet::GetDmxStartAddress()>:
 80127e6:	2001      	movs	r0, #1
 80127e8:	4770      	bx	lr

080127ea <LightSet::GetDmxFootprint()>:
 80127ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80127ee:	4770      	bx	lr

080127f0 <LightSet::SetDmxStartAddress(unsigned short)>:
 80127f0:	2000      	movs	r0, #0
 80127f2:	4770      	bx	lr

080127f4 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 80127f4:	2300      	movs	r3, #0
 80127f6:	2001      	movs	r0, #1
 80127f8:	7093      	strb	r3, [r2, #2]
 80127fa:	8010      	strh	r0, [r2, #0]
 80127fc:	4770      	bx	lr
	...

08012800 <Display::PrintInfo() [clone .isra.0]>:
 8012800:	b910      	cbnz	r0, 8012808 <Display::PrintInfo() [clone .isra.0]+0x8>
 8012802:	4803      	ldr	r0, [pc, #12]	; (8012810 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8012804:	f000 bf50 	b.w	80136a8 <puts>
 8012808:	6803      	ldr	r3, [r0, #0]
 801280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801280c:	4718      	bx	r3
 801280e:	bf00      	nop
 8012810:	080177b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, ip, sp, lr}

08012814 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8012814:	b513      	push	{r0, r1, r4, lr}
 8012816:	4604      	mov	r4, r0
 8012818:	0a13      	lsrs	r3, r2, #8
 801281a:	7800      	ldrb	r0, [r0, #0]
 801281c:	f88d 1004 	strb.w	r1, [sp, #4]
 8012820:	f88d 3005 	strb.w	r3, [sp, #5]
 8012824:	f88d 2006 	strb.w	r2, [sp, #6]
 8012828:	f002 fa56 	bl	8014cd8 <gd32_i2c_set_address>
 801282c:	6860      	ldr	r0, [r4, #4]
 801282e:	f002 fa4b 	bl	8014cc8 <gd32_i2c_set_baudrate>
 8012832:	2103      	movs	r1, #3
 8012834:	a801      	add	r0, sp, #4
 8012836:	f002 fa55 	bl	8014ce4 <gd32_i2c_write>
 801283a:	b002      	add	sp, #8
 801283c:	bd10      	pop	{r4, pc}

0801283e <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 801283e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012840:	460d      	mov	r5, r1
 8012842:	4604      	mov	r4, r0
 8012844:	f002 fa48 	bl	8014cd8 <gd32_i2c_set_address>
 8012848:	4628      	mov	r0, r5
 801284a:	f002 fa3d 	bl	8014cc8 <gd32_i2c_set_baudrate>
 801284e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012852:	2b07      	cmp	r3, #7
 8012854:	d902      	bls.n	801285c <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 8012856:	3c50      	subs	r4, #80	; 0x50
 8012858:	2c0f      	cmp	r4, #15
 801285a:	d809      	bhi.n	8012870 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 801285c:	2101      	movs	r1, #1
 801285e:	f10d 0007 	add.w	r0, sp, #7
 8012862:	f002 faa5 	bl	8014db0 <gd32_i2c_read>
 8012866:	fab0 f080 	clz	r0, r0
 801286a:	0940      	lsrs	r0, r0, #5
 801286c:	b003      	add	sp, #12
 801286e:	bd30      	pop	{r4, r5, pc}
 8012870:	2100      	movs	r1, #0
 8012872:	4608      	mov	r0, r1
 8012874:	f002 fa36 	bl	8014ce4 <gd32_i2c_write>
 8012878:	e7f5      	b.n	8012866 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

0801287a <Display::Detect7Segment()>:
 801287a:	b538      	push	{r3, r4, r5, lr}
 801287c:	68c1      	ldr	r1, [r0, #12]
 801287e:	4604      	mov	r4, r0
 8012880:	7a00      	ldrb	r0, [r0, #8]
 8012882:	f7ff ffdc 	bl	801283e <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 8012886:	7460      	strb	r0, [r4, #17]
 8012888:	b170      	cbz	r0, 80128a8 <Display::Detect7Segment()+0x2e>
 801288a:	2200      	movs	r2, #0
 801288c:	f104 0508 	add.w	r5, r4, #8
 8012890:	4611      	mov	r1, r2
 8012892:	4628      	mov	r0, r5
 8012894:	f7ff ffbe 	bl	8012814 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8012898:	7c63      	ldrb	r3, [r4, #17]
 801289a:	b12b      	cbz	r3, 80128a8 <Display::Detect7Segment()+0x2e>
 801289c:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 80128a0:	2112      	movs	r1, #18
 80128a2:	4628      	mov	r0, r5
 80128a4:	f7ff ffb6 	bl	8012814 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 80128a8:	bd38      	pop	{r3, r4, r5, pc}

080128aa <Display::Detect(display::Type)>:
 80128aa:	2902      	cmp	r1, #2
 80128ac:	b538      	push	{r3, r4, r5, lr}
 80128ae:	4604      	mov	r4, r0
 80128b0:	d014      	beq.n	80128dc <Display::Detect(display::Type)+0x32>
 80128b2:	2904      	cmp	r1, #4
 80128b4:	d01b      	beq.n	80128ee <Display::Detect(display::Type)+0x44>
 80128b6:	69a0      	ldr	r0, [r4, #24]
 80128b8:	b168      	cbz	r0, 80128d6 <Display::Detect(display::Type)+0x2c>
 80128ba:	6803      	ldr	r3, [r0, #0]
 80128bc:	689b      	ldr	r3, [r3, #8]
 80128be:	4798      	blx	r3
 80128c0:	4603      	mov	r3, r0
 80128c2:	69a0      	ldr	r0, [r4, #24]
 80128c4:	b9ab      	cbnz	r3, 80128f2 <Display::Detect(display::Type)+0x48>
 80128c6:	b110      	cbz	r0, 80128ce <Display::Detect(display::Type)+0x24>
 80128c8:	6803      	ldr	r3, [r0, #0]
 80128ca:	685b      	ldr	r3, [r3, #4]
 80128cc:	4798      	blx	r3
 80128ce:	2300      	movs	r3, #0
 80128d0:	61a3      	str	r3, [r4, #24]
 80128d2:	2304      	movs	r3, #4
 80128d4:	6023      	str	r3, [r4, #0]
 80128d6:	2300      	movs	r3, #0
 80128d8:	6163      	str	r3, [r4, #20]
 80128da:	e010      	b.n	80128fe <Display::Detect(display::Type)+0x54>
 80128dc:	2018      	movs	r0, #24
 80128de:	f000 fbcb 	bl	8013078 <operator new(unsigned int)>
 80128e2:	4605      	mov	r5, r0
 80128e4:	2100      	movs	r1, #0
 80128e6:	f000 f89d 	bl	8012a24 <Ssd1306::Ssd1306(TOledPanel)>
 80128ea:	61a5      	str	r5, [r4, #24]
 80128ec:	e7e3      	b.n	80128b6 <Display::Detect(display::Type)+0xc>
 80128ee:	6001      	str	r1, [r0, #0]
 80128f0:	e7e1      	b.n	80128b6 <Display::Detect(display::Type)+0xc>
 80128f2:	6803      	ldr	r3, [r0, #0]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	4798      	blx	r3
 80128f8:	69a3      	ldr	r3, [r4, #24]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d0eb      	beq.n	80128d6 <Display::Detect(display::Type)+0x2c>
 80128fe:	bd38      	pop	{r3, r4, r5, pc}

08012900 <Display::Display()>:
 8012900:	2304      	movs	r3, #4
 8012902:	b510      	push	{r4, lr}
 8012904:	6003      	str	r3, [r0, #0]
 8012906:	4b0f      	ldr	r3, [pc, #60]	; (8012944 <Display::Display()+0x44>)
 8012908:	4604      	mov	r4, r0
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	4a0e      	ldr	r2, [pc, #56]	; (8012948 <Display::Display()+0x48>)
 801290e:	6043      	str	r3, [r0, #4]
 8012910:	2321      	movs	r3, #33	; 0x21
 8012912:	7203      	strb	r3, [r0, #8]
 8012914:	4b0d      	ldr	r3, [pc, #52]	; (801294c <Display::Display()+0x4c>)
 8012916:	2102      	movs	r1, #2
 8012918:	60c3      	str	r3, [r0, #12]
 801291a:	2300      	movs	r3, #0
 801291c:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8012920:	8203      	strh	r3, [r0, #16]
 8012922:	4b0b      	ldr	r3, [pc, #44]	; (8012950 <Display::Display()+0x50>)
 8012924:	6018      	str	r0, [r3, #0]
 8012926:	f7ff ffc0 	bl	80128aa <Display::Detect(display::Type)>
 801292a:	4620      	mov	r0, r4
 801292c:	f7ff ffa5 	bl	801287a <Display::Detect7Segment()>
 8012930:	69a3      	ldr	r3, [r4, #24]
 8012932:	b10b      	cbz	r3, 8012938 <Display::Display()+0x38>
 8012934:	f7f5 f9e0 	bl	8007cf8 <display::timeout::gpio_init()>
 8012938:	69a0      	ldr	r0, [r4, #24]
 801293a:	f7ff ff61 	bl	8012800 <Display::PrintInfo() [clone .isra.0]>
 801293e:	4620      	mov	r0, r4
 8012940:	bd10      	pop	{r4, pc}
 8012942:	bf00      	nop
 8012944:	2000a1e4 	andcs	sl, r0, r4, ror #3
 8012948:	000493e0 	andeq	r9, r4, r0, ror #7
 801294c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8012950:	2000a0d8 	ldrdcs	sl, [r0], -r8

08012954 <Ssd1306::~Ssd1306()>:
 8012954:	4770      	bx	lr

08012956 <Ssd1306::SetCursor(unsigned int)>:
 8012956:	4770      	bx	lr

08012958 <Ssd1306::PrintInfo()>:
 8012958:	b410      	push	{r4}
 801295a:	4906      	ldr	r1, [pc, #24]	; (8012974 <Ssd1306::PrintInfo()+0x1c>)
 801295c:	7c44      	ldrb	r4, [r0, #17]
 801295e:	7903      	ldrb	r3, [r0, #4]
 8012960:	7942      	ldrb	r2, [r0, #5]
 8012962:	4805      	ldr	r0, [pc, #20]	; (8012978 <Ssd1306::PrintInfo()+0x20>)
 8012964:	2c00      	cmp	r4, #0
 8012966:	bf08      	it	eq
 8012968:	4601      	moveq	r1, r0
 801296a:	4804      	ldr	r0, [pc, #16]	; (801297c <Ssd1306::PrintInfo()+0x24>)
 801296c:	bc10      	pop	{r4}
 801296e:	f000 be4b 	b.w	8013608 <printf>
 8012972:	bf00      	nop
 8012974:	080177c6 	stmdaeq	r1, {r1, r2, r6, r7, r8, r9, sl, ip, sp, lr}
 8012978:	080177cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, sl, ip, sp, lr}
 801297c:	080177d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, sl, ip, sp, lr}

08012980 <Ssd1306::~Ssd1306()>:
 8012980:	b510      	push	{r4, lr}
 8012982:	4604      	mov	r4, r0
 8012984:	f000 fb74 	bl	8013070 <operator delete(void*)>
 8012988:	4620      	mov	r0, r4
 801298a:	bd10      	pop	{r4, pc}

0801298c <HAL_I2C::Setup()>:
 801298c:	b510      	push	{r4, lr}
 801298e:	4604      	mov	r4, r0
 8012990:	7800      	ldrb	r0, [r0, #0]
 8012992:	f002 f9a1 	bl	8014cd8 <gd32_i2c_set_address>
 8012996:	6860      	ldr	r0, [r4, #4]
 8012998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801299c:	f002 b994 	b.w	8014cc8 <gd32_i2c_set_baudrate>

080129a0 <Ssd1306::PutChar(int)>:
 80129a0:	b510      	push	{r4, lr}
 80129a2:	f1a1 0420 	sub.w	r4, r1, #32
 80129a6:	2c5f      	cmp	r4, #95	; 0x5f
 80129a8:	bf88      	it	hi
 80129aa:	2400      	movhi	r4, #0
 80129ac:	3008      	adds	r0, #8
 80129ae:	f7ff ffed 	bl	801298c <HAL_I2C::Setup()>
 80129b2:	4804      	ldr	r0, [pc, #16]	; (80129c4 <Ssd1306::PutChar(int)+0x24>)
 80129b4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80129b8:	4420      	add	r0, r4
 80129ba:	2107      	movs	r1, #7
 80129bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129c0:	f002 b990 	b.w	8014ce4 <gd32_i2c_write>
 80129c4:	080177e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, r9, sl, ip, sp, lr}

080129c8 <Ssd1306::PutString(char const*)>:
 80129c8:	b538      	push	{r3, r4, r5, lr}
 80129ca:	4605      	mov	r5, r0
 80129cc:	1e4c      	subs	r4, r1, #1
 80129ce:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80129d2:	b901      	cbnz	r1, 80129d6 <Ssd1306::PutString(char const*)+0xe>
 80129d4:	bd38      	pop	{r3, r4, r5, pc}
 80129d6:	4628      	mov	r0, r5
 80129d8:	f7ff ffe2 	bl	80129a0 <Ssd1306::PutChar(int)>
 80129dc:	e7f7      	b.n	80129ce <Ssd1306::PutString(char const*)+0x6>

080129de <Ssd1306::Text(char const*, unsigned int)>:
 80129de:	b570      	push	{r4, r5, r6, lr}
 80129e0:	7903      	ldrb	r3, [r0, #4]
 80129e2:	4605      	mov	r5, r0
 80129e4:	460c      	mov	r4, r1
 80129e6:	4293      	cmp	r3, r2
 80129e8:	bf94      	ite	ls
 80129ea:	18ce      	addls	r6, r1, r3
 80129ec:	188e      	addhi	r6, r1, r2
 80129ee:	42b4      	cmp	r4, r6
 80129f0:	d100      	bne.n	80129f4 <Ssd1306::Text(char const*, unsigned int)+0x16>
 80129f2:	bd70      	pop	{r4, r5, r6, pc}
 80129f4:	4628      	mov	r0, r5
 80129f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129fa:	f7ff ffd1 	bl	80129a0 <Ssd1306::PutChar(int)>
 80129fe:	e7f6      	b.n	80129ee <Ssd1306::Text(char const*, unsigned int)+0x10>

08012a00 <Ssd1306::InitMembers()>:
 8012a00:	7c03      	ldrb	r3, [r0, #16]
 8012a02:	b14b      	cbz	r3, 8012a18 <Ssd1306::InitMembers()+0x18>
 8012a04:	3b01      	subs	r3, #1
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	d909      	bls.n	8012a1e <Ssd1306::InitMembers()+0x1e>
 8012a0a:	2308      	movs	r3, #8
 8012a0c:	2204      	movs	r2, #4
 8012a0e:	2115      	movs	r1, #21
 8012a10:	7143      	strb	r3, [r0, #5]
 8012a12:	7101      	strb	r1, [r0, #4]
 8012a14:	6142      	str	r2, [r0, #20]
 8012a16:	4770      	bx	lr
 8012a18:	2308      	movs	r3, #8
 8012a1a:	461a      	mov	r2, r3
 8012a1c:	e7f7      	b.n	8012a0e <Ssd1306::InitMembers()+0xe>
 8012a1e:	2304      	movs	r3, #4
 8012a20:	e7fb      	b.n	8012a1a <Ssd1306::InitMembers()+0x1a>
	...

08012a24 <Ssd1306::Ssd1306(TOledPanel)>:
 8012a24:	4a08      	ldr	r2, [pc, #32]	; (8012a48 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8012a26:	b508      	push	{r3, lr}
 8012a28:	6002      	str	r2, [r0, #0]
 8012a2a:	227f      	movs	r2, #127	; 0x7f
 8012a2c:	80c2      	strh	r2, [r0, #6]
 8012a2e:	223c      	movs	r2, #60	; 0x3c
 8012a30:	7202      	strb	r2, [r0, #8]
 8012a32:	4a06      	ldr	r2, [pc, #24]	; (8012a4c <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8012a34:	7401      	strb	r1, [r0, #16]
 8012a36:	60c2      	str	r2, [r0, #12]
 8012a38:	2200      	movs	r2, #0
 8012a3a:	7442      	strb	r2, [r0, #17]
 8012a3c:	4a04      	ldr	r2, [pc, #16]	; (8012a50 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8012a3e:	6010      	str	r0, [r2, #0]
 8012a40:	f7ff ffde 	bl	8012a00 <Ssd1306::InitMembers()>
 8012a44:	bd08      	pop	{r3, pc}
 8012a46:	bf00      	nop
 8012a48:	08017ac0 	stmdaeq	r1, {r6, r7, r9, fp, ip, sp, lr}
 8012a4c:	00061a80 	andeq	r1, r6, r0, lsl #21
 8012a50:	2000a164 	andcs	sl, r0, r4, ror #2

08012a54 <Ssd1306::SendCommand(unsigned char)>:
 8012a54:	2300      	movs	r3, #0
 8012a56:	b507      	push	{r0, r1, r2, lr}
 8012a58:	3008      	adds	r0, #8
 8012a5a:	f88d 3004 	strb.w	r3, [sp, #4]
 8012a5e:	f88d 1005 	strb.w	r1, [sp, #5]
 8012a62:	f7ff ff93 	bl	801298c <HAL_I2C::Setup()>
 8012a66:	2102      	movs	r1, #2
 8012a68:	a801      	add	r0, sp, #4
 8012a6a:	f002 f93b 	bl	8014ce4 <gd32_i2c_write>
 8012a6e:	b003      	add	sp, #12
 8012a70:	f85d fb04 	ldr.w	pc, [sp], #4

08012a74 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8012a74:	2914      	cmp	r1, #20
 8012a76:	b570      	push	{r4, r5, r6, lr}
 8012a78:	4605      	mov	r5, r0
 8012a7a:	4616      	mov	r6, r2
 8012a7c:	d81c      	bhi.n	8012ab8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8012a7e:	7943      	ldrb	r3, [r0, #5]
 8012a80:	4293      	cmp	r3, r2
 8012a82:	d919      	bls.n	8012ab8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8012a84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012a88:	7c43      	ldrb	r3, [r0, #17]
 8012a8a:	004c      	lsls	r4, r1, #1
 8012a8c:	b2e4      	uxtb	r4, r4
 8012a8e:	b10b      	cbz	r3, 8012a94 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8012a90:	3404      	adds	r4, #4
 8012a92:	b2e4      	uxtb	r4, r4
 8012a94:	4628      	mov	r0, r5
 8012a96:	f004 010e 	and.w	r1, r4, #14
 8012a9a:	f7ff ffdb 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012a9e:	0921      	lsrs	r1, r4, #4
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	f041 0110 	orr.w	r1, r1, #16
 8012aa6:	f7ff ffd5 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012aaa:	4628      	mov	r0, r5
 8012aac:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 8012ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ab4:	f7ff bfce 	b.w	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012ab8:	bd70      	pop	{r4, r5, r6, pc}

08012aba <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8012aba:	b570      	push	{r4, r5, r6, lr}
 8012abc:	461e      	mov	r6, r3
 8012abe:	7943      	ldrb	r3, [r0, #5]
 8012ac0:	4604      	mov	r4, r0
 8012ac2:	428b      	cmp	r3, r1
 8012ac4:	4615      	mov	r5, r2
 8012ac6:	d30b      	bcc.n	8012ae0 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x26>
 8012ac8:	3901      	subs	r1, #1
 8012aca:	b2ca      	uxtb	r2, r1
 8012acc:	2100      	movs	r1, #0
 8012ace:	f7ff ffd1 	bl	8012a74 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8012ad2:	4632      	mov	r2, r6
 8012ad4:	4629      	mov	r1, r5
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012adc:	f7ff bf7f 	b.w	80129de <Ssd1306::Text(char const*, unsigned int)>
 8012ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

08012ae4 <Ssd1306::ClearLine(unsigned char)>:
 8012ae4:	b538      	push	{r3, r4, r5, lr}
 8012ae6:	7943      	ldrb	r3, [r0, #5]
 8012ae8:	4605      	mov	r5, r0
 8012aea:	428b      	cmp	r3, r1
 8012aec:	d314      	bcc.n	8012b18 <Ssd1306::ClearLine(unsigned char)+0x34>
 8012aee:	3901      	subs	r1, #1
 8012af0:	b2cc      	uxtb	r4, r1
 8012af2:	4622      	mov	r2, r4
 8012af4:	2100      	movs	r1, #0
 8012af6:	f7ff ffbd 	bl	8012a74 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8012afa:	f105 0008 	add.w	r0, r5, #8
 8012afe:	f7ff ff45 	bl	801298c <HAL_I2C::Setup()>
 8012b02:	2181      	movs	r1, #129	; 0x81
 8012b04:	4805      	ldr	r0, [pc, #20]	; (8012b1c <Ssd1306::ClearLine(unsigned char)+0x38>)
 8012b06:	f002 f8ed 	bl	8014ce4 <gd32_i2c_write>
 8012b0a:	4622      	mov	r2, r4
 8012b0c:	4628      	mov	r0, r5
 8012b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b12:	2100      	movs	r1, #0
 8012b14:	f7ff bfae 	b.w	8012a74 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8012b18:	bd38      	pop	{r3, r4, r5, pc}
 8012b1a:	bf00      	nop
 8012b1c:	2000a0dc 	ldrdcs	sl, [r0], -ip

08012b20 <Ssd1306::SetSleep(bool)>:
 8012b20:	b111      	cbz	r1, 8012b28 <Ssd1306::SetSleep(bool)+0x8>
 8012b22:	21ae      	movs	r1, #174	; 0xae
 8012b24:	f7ff bf96 	b.w	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012b28:	21af      	movs	r1, #175	; 0xaf
 8012b2a:	e7fb      	b.n	8012b24 <Ssd1306::SetSleep(bool)+0x4>

08012b2c <Ssd1306::SetContrast(unsigned char)>:
 8012b2c:	b538      	push	{r3, r4, r5, lr}
 8012b2e:	4604      	mov	r4, r0
 8012b30:	460d      	mov	r5, r1
 8012b32:	7181      	strb	r1, [r0, #6]
 8012b34:	2181      	movs	r1, #129	; 0x81
 8012b36:	f7ff ff8d 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012b3a:	4629      	mov	r1, r5
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b42:	f7ff bf87 	b.w	8012a54 <Ssd1306::SendCommand(unsigned char)>

08012b46 <Ssd1306::SetFlipVertically(bool)>:
 8012b46:	b510      	push	{r4, lr}
 8012b48:	4604      	mov	r4, r0
 8012b4a:	71c1      	strb	r1, [r0, #7]
 8012b4c:	b141      	cbz	r1, 8012b60 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8012b4e:	21c0      	movs	r1, #192	; 0xc0
 8012b50:	f7ff ff80 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012b54:	21a0      	movs	r1, #160	; 0xa0
 8012b56:	4620      	mov	r0, r4
 8012b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b5c:	f7ff bf7a 	b.w	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012b60:	21c8      	movs	r1, #200	; 0xc8
 8012b62:	f7ff ff77 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012b66:	21a1      	movs	r1, #161	; 0xa1
 8012b68:	e7f5      	b.n	8012b56 <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08012b6c <Ssd1306::CheckSH1106()>:
 8012b6c:	b530      	push	{r4, r5, lr}
 8012b6e:	4604      	mov	r4, r0
 8012b70:	b087      	sub	sp, #28
 8012b72:	2100      	movs	r1, #0
 8012b74:	f7ff ff6e 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012b78:	2190      	movs	r1, #144	; 0x90
 8012b7a:	4620      	mov	r0, r4
 8012b7c:	f7ff ff6a 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012b80:	21b0      	movs	r1, #176	; 0xb0
 8012b82:	4620      	mov	r0, r4
 8012b84:	f7ff ff66 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012b88:	4b22      	ldr	r3, [pc, #136]	; (8012c14 <Ssd1306::CheckSH1106()+0xa8>)
 8012b8a:	f104 0508 	add.w	r5, r4, #8
 8012b8e:	6818      	ldr	r0, [r3, #0]
 8012b90:	791b      	ldrb	r3, [r3, #4]
 8012b92:	9002      	str	r0, [sp, #8]
 8012b94:	4628      	mov	r0, r5
 8012b96:	f88d 300c 	strb.w	r3, [sp, #12]
 8012b9a:	f7ff fef7 	bl	801298c <HAL_I2C::Setup()>
 8012b9e:	2105      	movs	r1, #5
 8012ba0:	a802      	add	r0, sp, #8
 8012ba2:	f002 f89f 	bl	8014ce4 <gd32_i2c_write>
 8012ba6:	2100      	movs	r1, #0
 8012ba8:	4620      	mov	r0, r4
 8012baa:	f7ff ff53 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012bae:	2190      	movs	r1, #144	; 0x90
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	f7ff ff4f 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012bb6:	21b0      	movs	r1, #176	; 0xb0
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f7ff ff4b 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	9304      	str	r3, [sp, #16]
 8012bc2:	f88d 3014 	strb.w	r3, [sp, #20]
 8012bc6:	2340      	movs	r3, #64	; 0x40
 8012bc8:	4628      	mov	r0, r5
 8012bca:	f88d 3007 	strb.w	r3, [sp, #7]
 8012bce:	f7ff fedd 	bl	801298c <HAL_I2C::Setup()>
 8012bd2:	2101      	movs	r1, #1
 8012bd4:	f10d 0007 	add.w	r0, sp, #7
 8012bd8:	f002 f884 	bl	8014ce4 <gd32_i2c_write>
 8012bdc:	4628      	mov	r0, r5
 8012bde:	f7ff fed5 	bl	801298c <HAL_I2C::Setup()>
 8012be2:	2105      	movs	r1, #5
 8012be4:	a804      	add	r0, sp, #16
 8012be6:	f002 f8e3 	bl	8014db0 <gd32_i2c_read>
 8012bea:	2004      	movs	r0, #4
 8012bec:	aa02      	add	r2, sp, #8
 8012bee:	a904      	add	r1, sp, #16
 8012bf0:	3801      	subs	r0, #1
 8012bf2:	d201      	bcs.n	8012bf8 <Ssd1306::CheckSH1106()+0x8c>
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	e006      	b.n	8012c06 <Ssd1306::CheckSH1106()+0x9a>
 8012bf8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012bfc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8012c00:	42ab      	cmp	r3, r5
 8012c02:	d0f5      	beq.n	8012bf0 <Ssd1306::CheckSH1106()+0x84>
 8012c04:	1b5b      	subs	r3, r3, r5
 8012c06:	fab3 f383 	clz	r3, r3
 8012c0a:	095b      	lsrs	r3, r3, #5
 8012c0c:	7463      	strb	r3, [r4, #17]
 8012c0e:	b007      	add	sp, #28
 8012c10:	bd30      	pop	{r4, r5, pc}
 8012c12:	bf00      	nop
 8012c14:	080177e1 	stmdaeq	r1, {r0, r5, r6, r7, r8, r9, sl, ip, sp, lr}

08012c18 <Ssd1306::Cls()>:
 8012c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c1c:	4604      	mov	r4, r0
 8012c1e:	2600      	movs	r6, #0
 8012c20:	7c45      	ldrb	r5, [r0, #17]
 8012c22:	00ad      	lsls	r5, r5, #2
 8012c24:	b2ed      	uxtb	r5, r5
 8012c26:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8012c2a:	f045 0810 	orr.w	r8, r5, #16
 8012c2e:	b2ff      	uxtb	r7, r7
 8012c30:	6963      	ldr	r3, [r4, #20]
 8012c32:	4629      	mov	r1, r5
 8012c34:	42b3      	cmp	r3, r6
 8012c36:	4620      	mov	r0, r4
 8012c38:	d80b      	bhi.n	8012c52 <Ssd1306::Cls()+0x3a>
 8012c3a:	f7ff ff0b 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012c3e:	4641      	mov	r1, r8
 8012c40:	4620      	mov	r0, r4
 8012c42:	f7ff ff07 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012c46:	4620      	mov	r0, r4
 8012c48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c4c:	21b0      	movs	r1, #176	; 0xb0
 8012c4e:	f7ff bf01 	b.w	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012c52:	f7ff feff 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012c56:	4641      	mov	r1, r8
 8012c58:	4620      	mov	r0, r4
 8012c5a:	f7ff fefb 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012c5e:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8012c62:	4620      	mov	r0, r4
 8012c64:	b2c9      	uxtb	r1, r1
 8012c66:	f7ff fef5 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012c6a:	7c23      	ldrb	r3, [r4, #16]
 8012c6c:	b123      	cbz	r3, 8012c78 <Ssd1306::Cls()+0x60>
 8012c6e:	3b01      	subs	r3, #1
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	d901      	bls.n	8012c78 <Ssd1306::Cls()+0x60>
 8012c74:	3601      	adds	r6, #1
 8012c76:	e7db      	b.n	8012c30 <Ssd1306::Cls()+0x18>
 8012c78:	f104 0008 	add.w	r0, r4, #8
 8012c7c:	f7ff fe86 	bl	801298c <HAL_I2C::Setup()>
 8012c80:	4639      	mov	r1, r7
 8012c82:	4802      	ldr	r0, [pc, #8]	; (8012c8c <Ssd1306::Cls()+0x74>)
 8012c84:	f002 f82e 	bl	8014ce4 <gd32_i2c_write>
 8012c88:	e7f4      	b.n	8012c74 <Ssd1306::Cls()+0x5c>
 8012c8a:	bf00      	nop
 8012c8c:	2000a0dc 	ldrdcs	sl, [r0], -ip

08012c90 <Ssd1306::Start()>:
 8012c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c92:	7a04      	ldrb	r4, [r0, #8]
 8012c94:	68c6      	ldr	r6, [r0, #12]
 8012c96:	4605      	mov	r5, r0
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f002 f81d 	bl	8014cd8 <gd32_i2c_set_address>
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f002 f812 	bl	8014cc8 <gd32_i2c_set_baudrate>
 8012ca4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012ca8:	2b07      	cmp	r3, #7
 8012caa:	d902      	bls.n	8012cb2 <Ssd1306::Start()+0x22>
 8012cac:	3c50      	subs	r4, #80	; 0x50
 8012cae:	2c0f      	cmp	r4, #15
 8012cb0:	d80f      	bhi.n	8012cd2 <Ssd1306::Start()+0x42>
 8012cb2:	2101      	movs	r1, #1
 8012cb4:	f10d 0007 	add.w	r0, sp, #7
 8012cb8:	f002 f87a 	bl	8014db0 <gd32_i2c_read>
 8012cbc:	fab0 f480 	clz	r4, r0
 8012cc0:	0964      	lsrs	r4, r4, #5
 8012cc2:	b35c      	cbz	r4, 8012d1c <Ssd1306::Start()+0x8c>
 8012cc4:	7c2e      	ldrb	r6, [r5, #16]
 8012cc6:	b14e      	cbz	r6, 8012cdc <Ssd1306::Start()+0x4c>
 8012cc8:	3e01      	subs	r6, #1
 8012cca:	2e01      	cmp	r6, #1
 8012ccc:	d929      	bls.n	8012d22 <Ssd1306::Start()+0x92>
 8012cce:	2400      	movs	r4, #0
 8012cd0:	e024      	b.n	8012d1c <Ssd1306::Start()+0x8c>
 8012cd2:	2100      	movs	r1, #0
 8012cd4:	4608      	mov	r0, r1
 8012cd6:	f002 f805 	bl	8014ce4 <gd32_i2c_write>
 8012cda:	e7ef      	b.n	8012cbc <Ssd1306::Start()+0x2c>
 8012cdc:	4f16      	ldr	r7, [pc, #88]	; (8012d38 <Ssd1306::Start()+0xa8>)
 8012cde:	4628      	mov	r0, r5
 8012ce0:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012ce4:	3601      	adds	r6, #1
 8012ce6:	f7ff feb5 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012cea:	2e18      	cmp	r6, #24
 8012cec:	d1f7      	bne.n	8012cde <Ssd1306::Start()+0x4e>
 8012cee:	2300      	movs	r3, #0
 8012cf0:	4a12      	ldr	r2, [pc, #72]	; (8012d3c <Ssd1306::Start()+0xac>)
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	4611      	mov	r1, r2
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	2b86      	cmp	r3, #134	; 0x86
 8012cfa:	f802 0b01 	strb.w	r0, [r2], #1
 8012cfe:	d1fa      	bne.n	8012cf6 <Ssd1306::Start()+0x66>
 8012d00:	2340      	movs	r3, #64	; 0x40
 8012d02:	4628      	mov	r0, r5
 8012d04:	700b      	strb	r3, [r1, #0]
 8012d06:	f7ff ff31 	bl	8012b6c <Ssd1306::CheckSH1106()>
 8012d0a:	4628      	mov	r0, r5
 8012d0c:	f7ff ff84 	bl	8012c18 <Ssd1306::Cls()>
 8012d10:	21af      	movs	r1, #175	; 0xaf
 8012d12:	4628      	mov	r0, r5
 8012d14:	f7ff fe9e 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012d18:	2301      	movs	r3, #1
 8012d1a:	71eb      	strb	r3, [r5, #7]
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	b003      	add	sp, #12
 8012d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d22:	2600      	movs	r6, #0
 8012d24:	4f06      	ldr	r7, [pc, #24]	; (8012d40 <Ssd1306::Start()+0xb0>)
 8012d26:	4628      	mov	r0, r5
 8012d28:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012d2c:	3601      	adds	r6, #1
 8012d2e:	f7ff fe91 	bl	8012a54 <Ssd1306::SendCommand(unsigned char)>
 8012d32:	2e18      	cmp	r6, #24
 8012d34:	d1f7      	bne.n	8012d26 <Ssd1306::Start()+0x96>
 8012d36:	e7da      	b.n	8012cee <Ssd1306::Start()+0x5e>
 8012d38:	08017aa0 	stmdaeq	r1, {r5, r7, r9, fp, ip, sp, lr}
 8012d3c:	2000a0dc 	ldrdcs	sl, [r0], -ip
 8012d40:	08017a88 	stmdaeq	r1, {r3, r7, r9, fp, ip, sp, lr}

08012d44 <console_putc>:
 8012d44:	f000 bdb2 	b.w	80138ac <uart0_putc>

08012d48 <console_puts>:
 8012d48:	f000 bdd0 	b.w	80138ec <uart0_puts>

08012d4c <console_set_fg_color>:
 8012d4c:	2807      	cmp	r0, #7
 8012d4e:	d810      	bhi.n	8012d72 <console_set_fg_color+0x26>
 8012d50:	e8df f000 	tbb	[pc, r0]
 8012d54:	0b090704 	bleq	825496c <__exidx_end+0x23cdf4>
 8012d58:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8012d24 <Ssd1306::Start()+0x94>
 8012d5c:	4806      	ldr	r0, [pc, #24]	; (8012d78 <console_set_fg_color+0x2c>)
 8012d5e:	f000 bdc5 	b.w	80138ec <uart0_puts>
 8012d62:	4806      	ldr	r0, [pc, #24]	; (8012d7c <console_set_fg_color+0x30>)
 8012d64:	e7fb      	b.n	8012d5e <console_set_fg_color+0x12>
 8012d66:	4806      	ldr	r0, [pc, #24]	; (8012d80 <console_set_fg_color+0x34>)
 8012d68:	e7f9      	b.n	8012d5e <console_set_fg_color+0x12>
 8012d6a:	4806      	ldr	r0, [pc, #24]	; (8012d84 <console_set_fg_color+0x38>)
 8012d6c:	e7f7      	b.n	8012d5e <console_set_fg_color+0x12>
 8012d6e:	4806      	ldr	r0, [pc, #24]	; (8012d88 <console_set_fg_color+0x3c>)
 8012d70:	e7f5      	b.n	8012d5e <console_set_fg_color+0x12>
 8012d72:	4806      	ldr	r0, [pc, #24]	; (8012d8c <console_set_fg_color+0x40>)
 8012d74:	e7f3      	b.n	8012d5e <console_set_fg_color+0x12>
 8012d76:	bf00      	nop
 8012d78:	08017afe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r9, fp, ip, sp, lr}
 8012d7c:	08017b04 	stmdaeq	r1, {r2, r8, r9, fp, ip, sp, lr}
 8012d80:	08017b0a 	stmdaeq	r1, {r1, r3, r8, r9, fp, ip, sp, lr}
 8012d84:	08017b10 	stmdaeq	r1, {r4, r8, r9, fp, ip, sp, lr}
 8012d88:	08015911 	stmdaeq	r1, {r0, r4, r8, fp, ip, lr}
 8012d8c:	08017b16 	stmdaeq	r1, {r1, r2, r4, r8, r9, fp, ip, sp, lr}

08012d90 <console_error>:
 8012d90:	b510      	push	{r4, lr}
 8012d92:	4604      	mov	r4, r0
 8012d94:	4805      	ldr	r0, [pc, #20]	; (8012dac <console_error+0x1c>)
 8012d96:	f000 fda9 	bl	80138ec <uart0_puts>
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f000 fda6 	bl	80138ec <uart0_puts>
 8012da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012da4:	4802      	ldr	r0, [pc, #8]	; (8012db0 <console_error+0x20>)
 8012da6:	f000 bda1 	b.w	80138ec <uart0_puts>
 8012daa:	bf00      	nop
 8012dac:	08017b04 	stmdaeq	r1, {r2, r8, r9, fp, ip, sp, lr}
 8012db0:	08015911 	stmdaeq	r1, {r0, r4, r8, fp, ip, lr}

08012db4 <console_status>:
 8012db4:	b510      	push	{r4, lr}
 8012db6:	460c      	mov	r4, r1
 8012db8:	b280      	uxth	r0, r0
 8012dba:	f7ff ffc7 	bl	8012d4c <console_set_fg_color>
 8012dbe:	4807      	ldr	r0, [pc, #28]	; (8012ddc <console_status+0x28>)
 8012dc0:	f000 fd94 	bl	80138ec <uart0_puts>
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	f000 fd91 	bl	80138ec <uart0_puts>
 8012dca:	200a      	movs	r0, #10
 8012dcc:	f000 fd6e 	bl	80138ac <uart0_putc>
 8012dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dd4:	4802      	ldr	r0, [pc, #8]	; (8012de0 <console_status+0x2c>)
 8012dd6:	f000 bd89 	b.w	80138ec <uart0_puts>
 8012dda:	bf00      	nop
 8012ddc:	08017af8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r9, fp, ip, sp, lr}
 8012de0:	08015911 	stmdaeq	r1, {r0, r4, r8, fp, ip, lr}

08012de4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8012de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de8:	4617      	mov	r7, r2
 8012dea:	461e      	mov	r6, r3
 8012dec:	4d14      	ldr	r5, [pc, #80]	; (8012e40 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8012dee:	4b15      	ldr	r3, [pc, #84]	; (8012e44 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8012df0:	b086      	sub	sp, #24
 8012df2:	6018      	str	r0, [r3, #0]
 8012df4:	4604      	mov	r4, r0
 8012df6:	f105 0803 	add.w	r8, r5, #3
 8012dfa:	2203      	movs	r2, #3
 8012dfc:	4628      	mov	r0, r5
 8012dfe:	f000 f9d2 	bl	80131a6 <memmove>
 8012e02:	4639      	mov	r1, r7
 8012e04:	220b      	movs	r2, #11
 8012e06:	4640      	mov	r0, r8
 8012e08:	f000 f9cd 	bl	80131a6 <memmove>
 8012e0c:	f105 030e 	add.w	r3, r5, #14
 8012e10:	4631      	mov	r1, r6
 8012e12:	2208      	movs	r2, #8
 8012e14:	4618      	mov	r0, r3
 8012e16:	f000 f9c6 	bl	80131a6 <memmove>
 8012e1a:	2308      	movs	r3, #8
 8012e1c:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8012e20:	230b      	movs	r3, #11
 8012e22:	9302      	str	r3, [sp, #8]
 8012e24:	4b08      	ldr	r3, [pc, #32]	; (8012e48 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8012e26:	9005      	str	r0, [sp, #20]
 8012e28:	e9cd 5300 	strd	r5, r3, [sp]
 8012e2c:	213f      	movs	r1, #63	; 0x3f
 8012e2e:	2303      	movs	r3, #3
 8012e30:	4a06      	ldr	r2, [pc, #24]	; (8012e4c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8012e32:	4807      	ldr	r0, [pc, #28]	; (8012e50 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8012e34:	f000 fc10 	bl	8013658 <snprintf>
 8012e38:	4620      	mov	r0, r4
 8012e3a:	b006      	add	sp, #24
 8012e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e40:	2000a168 	andcs	sl, r0, r8, ror #2
 8012e44:	2000a1c0 	andcs	sl, r0, r0, asr #3
 8012e48:	08016022 	stmdaeq	r1, {r1, r5, sp, lr}
 8012e4c:	08017b1c 	stmdaeq	r1, {r2, r3, r4, r8, r9, fp, ip, sp, lr}
 8012e50:	2000a17e 	andcs	sl, r0, lr, ror r1

08012e54 <FirmwareVersion::Print(char const*)>:
 8012e54:	b510      	push	{r4, lr}
 8012e56:	460c      	mov	r4, r1
 8012e58:	4804      	ldr	r0, [pc, #16]	; (8012e6c <FirmwareVersion::Print(char const*)+0x18>)
 8012e5a:	f000 fc25 	bl	80136a8 <puts>
 8012e5e:	b124      	cbz	r4, 8012e6a <FirmwareVersion::Print(char const*)+0x16>
 8012e60:	4620      	mov	r0, r4
 8012e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e66:	f000 bc1f 	b.w	80136a8 <puts>
 8012e6a:	bd10      	pop	{r4, pc}
 8012e6c:	2000a17e 	andcs	sl, r0, lr, ror r1

08012e70 <LedBlink::LedBlink()>:
 8012e70:	b538      	push	{r3, r4, r5, lr}
 8012e72:	2205      	movs	r2, #5
 8012e74:	2300      	movs	r3, #0
 8012e76:	e9c0 3200 	strd	r3, r2, [r0]
 8012e7a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8012e7e:	6083      	str	r3, [r0, #8]
 8012e80:	e9c0 2303 	strd	r2, r3, [r0, #12]
 8012e84:	6143      	str	r3, [r0, #20]
 8012e86:	4b09      	ldr	r3, [pc, #36]	; (8012eac <LedBlink::LedBlink()+0x3c>)
 8012e88:	4d09      	ldr	r5, [pc, #36]	; (8012eb0 <LedBlink::LedBlink()+0x40>)
 8012e8a:	4604      	mov	r4, r0
 8012e8c:	6018      	str	r0, [r3, #0]
 8012e8e:	f240 6004 	movw	r0, #1540	; 0x604
 8012e92:	f001 fb59 	bl	8014548 <rcu_periph_clock_enable>
 8012e96:	4628      	mov	r0, r5
 8012e98:	2301      	movs	r3, #1
 8012e9a:	2203      	movs	r2, #3
 8012e9c:	2110      	movs	r1, #16
 8012e9e:	f001 fabb 	bl	8014418 <gpio_init>
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	616b      	str	r3, [r5, #20]
 8012ea8:	bd38      	pop	{r3, r4, r5, pc}
 8012eaa:	bf00      	nop
 8012eac:	2000a1c4 	andcs	sl, r0, r4, asr #3
 8012eb0:	40011000 	andmi	r1, r1, r0

08012eb4 <LedBlink::SetMode(ledblink::Mode)>:
 8012eb4:	6843      	ldr	r3, [r0, #4]
 8012eb6:	428b      	cmp	r3, r1
 8012eb8:	d02f      	beq.n	8012f1a <LedBlink::SetMode(ledblink::Mode)+0x66>
 8012eba:	6041      	str	r1, [r0, #4]
 8012ebc:	2904      	cmp	r1, #4
 8012ebe:	d822      	bhi.n	8012f06 <LedBlink::SetMode(ledblink::Mode)+0x52>
 8012ec0:	e8df f001 	tbb	[pc, r1]
 8012ec4:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 8012ec8:	23ff001d 	mvnscs	r0, #29
 8012ecc:	6003      	str	r3, [r0, #0]
 8012ece:	2300      	movs	r3, #0
 8012ed0:	2201      	movs	r2, #1
 8012ed2:	60c3      	str	r3, [r0, #12]
 8012ed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012ed8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8012edc:	611a      	str	r2, [r3, #16]
 8012ede:	6880      	ldr	r0, [r0, #8]
 8012ee0:	b1d8      	cbz	r0, 8012f1a <LedBlink::SetMode(ledblink::Mode)+0x66>
 8012ee2:	6803      	ldr	r3, [r0, #0]
 8012ee4:	689b      	ldr	r3, [r3, #8]
 8012ee6:	4718      	bx	r3
 8012ee8:	2301      	movs	r3, #1
 8012eea:	6003      	str	r3, [r0, #0]
 8012eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012ef0:	60c3      	str	r3, [r0, #12]
 8012ef2:	e7f4      	b.n	8012ede <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8012ef4:	2303      	movs	r3, #3
 8012ef6:	6003      	str	r3, [r0, #0]
 8012ef8:	f240 134d 	movw	r3, #333	; 0x14d
 8012efc:	e7f8      	b.n	8012ef0 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8012efe:	2305      	movs	r3, #5
 8012f00:	6003      	str	r3, [r0, #0]
 8012f02:	23c8      	movs	r3, #200	; 0xc8
 8012f04:	e7f4      	b.n	8012ef0 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8012f06:	2300      	movs	r3, #0
 8012f08:	2201      	movs	r2, #1
 8012f0a:	6003      	str	r3, [r0, #0]
 8012f0c:	60c3      	str	r3, [r0, #12]
 8012f0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012f12:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8012f16:	615a      	str	r2, [r3, #20]
 8012f18:	e7e1      	b.n	8012ede <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8012f1a:	4770      	bx	lr

08012f1c <Hardware::Hardware()>:
 8012f1c:	b570      	push	{r4, r5, r6, lr}
 8012f1e:	2400      	movs	r4, #0
 8012f20:	4b24      	ldr	r3, [pc, #144]	; (8012fb4 <Hardware::Hardware()+0x98>)
 8012f22:	b090      	sub	sp, #64	; 0x40
 8012f24:	7004      	strb	r4, [r0, #0]
 8012f26:	6018      	str	r0, [r3, #0]
 8012f28:	4605      	mov	r5, r0
 8012f2a:	f7f4 fae9 	bl	8007500 <console_init>
 8012f2e:	f000 fced 	bl	801390c <systick_config>
 8012f32:	f002 f8bb 	bl	80150ac <udelay_init()>
 8012f36:	f002 f8b7 	bl	80150a8 <micros_init()>
 8012f3a:	f240 701b 	movw	r0, #1819	; 0x71b
 8012f3e:	f001 fb03 	bl	8014548 <rcu_periph_clock_enable>
 8012f42:	f240 701c 	movw	r0, #1820	; 0x71c
 8012f46:	f001 faff 	bl	8014548 <rcu_periph_clock_enable>
 8012f4a:	4e1b      	ldr	r6, [pc, #108]	; (8012fb8 <Hardware::Hardware()+0x9c>)
 8012f4c:	f001 faf4 	bl	8014538 <pmu_backup_write_enable>
 8012f50:	4621      	mov	r1, r4
 8012f52:	2002      	movs	r0, #2
 8012f54:	f000 fd78 	bl	8013a48 <bkp_data_write>
 8012f58:	f240 7004 	movw	r0, #1796	; 0x704
 8012f5c:	f001 faf4 	bl	8014548 <rcu_periph_clock_enable>
 8012f60:	4630      	mov	r0, r6
 8012f62:	f001 fc3f 	bl	80147e4 <timer_deinit>
 8012f66:	236b      	movs	r3, #107	; 0x6b
 8012f68:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f70:	a903      	add	r1, sp, #12
 8012f72:	4630      	mov	r0, r6
 8012f74:	9305      	str	r3, [sp, #20]
 8012f76:	f001 fc97 	bl	80148a8 <timer_init>
 8012f7a:	4630      	mov	r0, r6
 8012f7c:	f001 fcec 	bl	8014958 <timer_enable>
 8012f80:	f001 fe14 	bl	8014bac <gd32_adc_init()>
 8012f84:	2219      	movs	r2, #25
 8012f86:	230b      	movs	r3, #11
 8012f88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012f8c:	237a      	movs	r3, #122	; 0x7a
 8012f8e:	a807      	add	r0, sp, #28
 8012f90:	930c      	str	r3, [sp, #48]	; 0x30
 8012f92:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8012f96:	9407      	str	r4, [sp, #28]
 8012f98:	940f      	str	r4, [sp, #60]	; 0x3c
 8012f9a:	f000 fbdd 	bl	8013758 <mktime>
 8012f9e:	4621      	mov	r1, r4
 8012fa0:	e9cd 0401 	strd	r0, r4, [sp, #4]
 8012fa4:	a801      	add	r0, sp, #4
 8012fa6:	f000 fc4d 	bl	8013844 <settimeofday>
 8012faa:	f001 fe59 	bl	8014c60 <gd32_i2c_begin>
 8012fae:	4628      	mov	r0, r5
 8012fb0:	b010      	add	sp, #64	; 0x40
 8012fb2:	bd70      	pop	{r4, r5, r6, pc}
 8012fb4:	2000a1c8 	andcs	sl, r0, r8, asr #3
 8012fb8:	40001000 	andmi	r1, r0, r0

08012fbc <Hardware::GetUuid(unsigned char*)>:
 8012fbc:	4a0c      	ldr	r2, [pc, #48]	; (8012ff0 <Hardware::GetUuid(unsigned char*)+0x34>)
 8012fbe:	b084      	sub	sp, #16
 8012fc0:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8012fc4:	9300      	str	r3, [sp, #0]
 8012fc6:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 8012fca:	9001      	str	r0, [sp, #4]
 8012fcc:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 8012fd0:	4403      	add	r3, r0
 8012fd2:	4413      	add	r3, r2
 8012fd4:	9202      	str	r2, [sp, #8]
 8012fd6:	466a      	mov	r2, sp
 8012fd8:	9303      	str	r3, [sp, #12]
 8012fda:	1e4b      	subs	r3, r1, #1
 8012fdc:	310f      	adds	r1, #15
 8012fde:	428b      	cmp	r3, r1
 8012fe0:	d101      	bne.n	8012fe6 <Hardware::GetUuid(unsigned char*)+0x2a>
 8012fe2:	b004      	add	sp, #16
 8012fe4:	4770      	bx	lr
 8012fe6:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012fea:	f803 0f01 	strb.w	r0, [r3, #1]!
 8012fee:	e7f6      	b.n	8012fde <Hardware::GetUuid(unsigned char*)+0x22>
 8012ff0:	1ffff000 	svcne	0x00fff000

08012ff4 <Hardware::SetTime(tm const*)>:
 8012ff4:	2000      	movs	r0, #0
 8012ff6:	4770      	bx	lr

08012ff8 <Hardware::Reboot()>:
 8012ff8:	b508      	push	{r3, lr}
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	4604      	mov	r4, r0
 8012ffe:	7003      	strb	r3, [r0, #0]
 8013000:	2104      	movs	r1, #4
 8013002:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013006:	f001 f9dd 	bl	80143c4 <fwdgt_config>
 801300a:	4620      	mov	r0, r4
 801300c:	f7f4 febe 	bl	8007d8c <Hardware::RebootHandler()>
 8013010:	2102      	movs	r1, #2
 8013012:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013016:	f001 f9d5 	bl	80143c4 <fwdgt_config>
 801301a:	2801      	cmp	r0, #1
 801301c:	bf0c      	ite	eq
 801301e:	2301      	moveq	r3, #1
 8013020:	2300      	movne	r3, #0
 8013022:	7023      	strb	r3, [r4, #0]
 8013024:	d101      	bne.n	801302a <Hardware::Reboot()+0x32>
 8013026:	f001 f9bd 	bl	80143a4 <fwdgt_enable>
 801302a:	2208      	movs	r2, #8
 801302c:	4b0d      	ldr	r3, [pc, #52]	; (8013064 <Hardware::Reboot()+0x6c>)
 801302e:	2501      	movs	r5, #1
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	480d      	ldr	r0, [pc, #52]	; (8013068 <Hardware::Reboot()+0x70>)
 8013034:	601a      	str	r2, [r3, #0]
 8013036:	227d      	movs	r2, #125	; 0x7d
 8013038:	490c      	ldr	r1, [pc, #48]	; (801306c <Hardware::Reboot()+0x74>)
 801303a:	60da      	str	r2, [r3, #12]
 801303c:	68dc      	ldr	r4, [r3, #12]
 801303e:	b904      	cbnz	r4, 8013042 <Hardware::Reboot()+0x4a>
 8013040:	e7fe      	b.n	8013040 <Hardware::Reboot()+0x48>
 8013042:	6802      	ldr	r2, [r0, #0]
 8013044:	695e      	ldr	r6, [r3, #20]
 8013046:	1b92      	subs	r2, r2, r6
 8013048:	4294      	cmp	r4, r2
 801304a:	d8f8      	bhi.n	801303e <Hardware::Reboot()+0x46>
 801304c:	6802      	ldr	r2, [r0, #0]
 801304e:	615a      	str	r2, [r3, #20]
 8013050:	691a      	ldr	r2, [r3, #16]
 8013052:	2a01      	cmp	r2, #1
 8013054:	f082 0401 	eor.w	r4, r2, #1
 8013058:	611c      	str	r4, [r3, #16]
 801305a:	bf14      	ite	ne
 801305c:	610d      	strne	r5, [r1, #16]
 801305e:	614a      	streq	r2, [r1, #20]
 8013060:	e7ec      	b.n	801303c <Hardware::Reboot()+0x44>
 8013062:	bf00      	nop
 8013064:	2000a1c4 	andcs	sl, r0, r4, asr #3
 8013068:	2000a1e4 	andcs	sl, r0, r4, ror #3
 801306c:	40011000 	andmi	r1, r1, r0

08013070 <operator delete(void*)>:
 8013070:	f000 b874 	b.w	801315c <free>

08013074 <operator delete[](void*)>:
 8013074:	f000 b872 	b.w	801315c <free>

08013078 <operator new(unsigned int)>:
 8013078:	f000 b842 	b.w	8013100 <malloc>

0801307c <operator new[](unsigned int)>:
 801307c:	f000 b840 	b.w	8013100 <malloc>

08013080 <inet_aton>:
 8013080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013082:	f04f 0c0a 	mov.w	ip, #10
 8013086:	2500      	movs	r5, #0
 8013088:	ae01      	add	r6, sp, #4
 801308a:	4603      	mov	r3, r0
 801308c:	2200      	movs	r2, #0
 801308e:	1d07      	adds	r7, r0, #4
 8013090:	e007      	b.n	80130a2 <inet_aton+0x22>
 8013092:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013096:	2b09      	cmp	r3, #9
 8013098:	d820      	bhi.n	80130dc <inet_aton+0x5c>
 801309a:	4603      	mov	r3, r0
 801309c:	fb0c 4202 	mla	r2, ip, r2, r4
 80130a0:	3a30      	subs	r2, #48	; 0x30
 80130a2:	4618      	mov	r0, r3
 80130a4:	f810 4b01 	ldrb.w	r4, [r0], #1
 80130a8:	2c2e      	cmp	r4, #46	; 0x2e
 80130aa:	d111      	bne.n	80130d0 <inet_aton+0x50>
 80130ac:	3501      	adds	r5, #1
 80130ae:	2d03      	cmp	r5, #3
 80130b0:	f806 2b01 	strb.w	r2, [r6], #1
 80130b4:	d1e9      	bne.n	801308a <inet_aton+0xa>
 80130b6:	2200      	movs	r2, #0
 80130b8:	250a      	movs	r5, #10
 80130ba:	1d1c      	adds	r4, r3, #4
 80130bc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80130c0:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 80130c4:	d10d      	bne.n	80130e2 <inet_aton+0x62>
 80130c6:	f88d 2007 	strb.w	r2, [sp, #7]
 80130ca:	b9b1      	cbnz	r1, 80130fa <inet_aton+0x7a>
 80130cc:	2001      	movs	r0, #1
 80130ce:	e006      	b.n	80130de <inet_aton+0x5e>
 80130d0:	2c00      	cmp	r4, #0
 80130d2:	d0eb      	beq.n	80130ac <inet_aton+0x2c>
 80130d4:	2c0a      	cmp	r4, #10
 80130d6:	d0e9      	beq.n	80130ac <inet_aton+0x2c>
 80130d8:	42b8      	cmp	r0, r7
 80130da:	d1da      	bne.n	8013092 <inet_aton+0x12>
 80130dc:	2000      	movs	r0, #0
 80130de:	b003      	add	sp, #12
 80130e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130e2:	280a      	cmp	r0, #10
 80130e4:	d0ef      	beq.n	80130c6 <inet_aton+0x46>
 80130e6:	42a3      	cmp	r3, r4
 80130e8:	d0f8      	beq.n	80130dc <inet_aton+0x5c>
 80130ea:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 80130ee:	2e09      	cmp	r6, #9
 80130f0:	d8f4      	bhi.n	80130dc <inet_aton+0x5c>
 80130f2:	fb05 0202 	mla	r2, r5, r2, r0
 80130f6:	3a30      	subs	r2, #48	; 0x30
 80130f8:	e7e0      	b.n	80130bc <inet_aton+0x3c>
 80130fa:	9b01      	ldr	r3, [sp, #4]
 80130fc:	600b      	str	r3, [r1, #0]
 80130fe:	e7e5      	b.n	80130cc <inet_aton+0x4c>

08013100 <malloc>:
 8013100:	b510      	push	{r4, lr}
 8013102:	b1d8      	cbz	r0, 801313c <malloc+0x3c>
 8013104:	4a11      	ldr	r2, [pc, #68]	; (801314c <malloc+0x4c>)
 8013106:	6811      	ldr	r1, [r2, #0]
 8013108:	b971      	cbnz	r1, 8013128 <malloc+0x28>
 801310a:	4911      	ldr	r1, [pc, #68]	; (8013150 <malloc+0x50>)
 801310c:	f100 021b 	add.w	r2, r0, #27
 8013110:	680b      	ldr	r3, [r1, #0]
 8013112:	4c10      	ldr	r4, [pc, #64]	; (8013154 <malloc+0x54>)
 8013114:	f022 020f 	bic.w	r2, r2, #15
 8013118:	441a      	add	r2, r3
 801311a:	42a2      	cmp	r2, r4
 801311c:	d80f      	bhi.n	801313e <malloc+0x3e>
 801311e:	600a      	str	r2, [r1, #0]
 8013120:	4a0d      	ldr	r2, [pc, #52]	; (8013158 <malloc+0x58>)
 8013122:	e9c3 2000 	strd	r2, r0, [r3]
 8013126:	e005      	b.n	8013134 <malloc+0x34>
 8013128:	4288      	cmp	r0, r1
 801312a:	d90a      	bls.n	8013142 <malloc+0x42>
 801312c:	3208      	adds	r2, #8
 801312e:	e7ea      	b.n	8013106 <malloc+0x6>
 8013130:	6899      	ldr	r1, [r3, #8]
 8013132:	6051      	str	r1, [r2, #4]
 8013134:	2200      	movs	r2, #0
 8013136:	f103 000c 	add.w	r0, r3, #12
 801313a:	609a      	str	r2, [r3, #8]
 801313c:	bd10      	pop	{r4, pc}
 801313e:	2000      	movs	r0, #0
 8013140:	e7fc      	b.n	801313c <malloc+0x3c>
 8013142:	6853      	ldr	r3, [r2, #4]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d1f3      	bne.n	8013130 <malloc+0x30>
 8013148:	4608      	mov	r0, r1
 801314a:	e7de      	b.n	801310a <malloc+0xa>
 801314c:	20000020 	andcs	r0, r0, r0, lsr #32
 8013150:	2000001c 	andcs	r0, r0, ip, lsl r0
 8013154:	20016000 	andcs	r6, r1, r0
 8013158:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

0801315c <free>:
 801315c:	b138      	cbz	r0, 801316e <free+0x12>
 801315e:	f850 2c0c 	ldr.w	r2, [r0, #-12]
 8013162:	4b09      	ldr	r3, [pc, #36]	; (8013188 <free+0x2c>)
 8013164:	429a      	cmp	r2, r3
 8013166:	d102      	bne.n	801316e <free+0x12>
 8013168:	4b08      	ldr	r3, [pc, #32]	; (801318c <free+0x30>)
 801316a:	681a      	ldr	r2, [r3, #0]
 801316c:	b902      	cbnz	r2, 8013170 <free+0x14>
 801316e:	4770      	bx	lr
 8013170:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8013174:	4291      	cmp	r1, r2
 8013176:	d104      	bne.n	8013182 <free+0x26>
 8013178:	685a      	ldr	r2, [r3, #4]
 801317a:	380c      	subs	r0, #12
 801317c:	6082      	str	r2, [r0, #8]
 801317e:	6058      	str	r0, [r3, #4]
 8013180:	4770      	bx	lr
 8013182:	3308      	adds	r3, #8
 8013184:	e7f1      	b.n	801316a <free+0xe>
 8013186:	bf00      	nop
 8013188:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 801318c:	20000020 	andcs	r0, r0, r0, lsr #32

08013190 <memcpy>:
 8013190:	b510      	push	{r4, lr}
 8013192:	1e43      	subs	r3, r0, #1
 8013194:	440a      	add	r2, r1
 8013196:	4291      	cmp	r1, r2
 8013198:	d100      	bne.n	801319c <memcpy+0xc>
 801319a:	bd10      	pop	{r4, pc}
 801319c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131a4:	e7f7      	b.n	8013196 <memcpy+0x6>

080131a6 <memmove>:
 80131a6:	4288      	cmp	r0, r1
 80131a8:	b510      	push	{r4, lr}
 80131aa:	eb01 0302 	add.w	r3, r1, r2
 80131ae:	d208      	bcs.n	80131c2 <memmove+0x1c>
 80131b0:	1e42      	subs	r2, r0, #1
 80131b2:	4299      	cmp	r1, r3
 80131b4:	d100      	bne.n	80131b8 <memmove+0x12>
 80131b6:	bd10      	pop	{r4, pc}
 80131b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80131c0:	e7f7      	b.n	80131b2 <memmove+0xc>
 80131c2:	4601      	mov	r1, r0
 80131c4:	4402      	add	r2, r0
 80131c6:	428a      	cmp	r2, r1
 80131c8:	d0f5      	beq.n	80131b6 <memmove+0x10>
 80131ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80131ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80131d2:	e7f8      	b.n	80131c6 <memmove+0x20>

080131d4 <memset>:
 80131d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131d6:	b1c2      	cbz	r2, 801320a <memset+0x36>
 80131d8:	4603      	mov	r3, r0
 80131da:	b2c9      	uxtb	r1, r1
 80131dc:	075c      	lsls	r4, r3, #29
 80131de:	d110      	bne.n	8013202 <memset+0x2e>
 80131e0:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 80131e4:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 80131e8:	463d      	mov	r5, r7
 80131ea:	461e      	mov	r6, r3
 80131ec:	f022 0407 	bic.w	r4, r2, #7
 80131f0:	441c      	add	r4, r3
 80131f2:	42a6      	cmp	r6, r4
 80131f4:	d10a      	bne.n	801320c <memset+0x38>
 80131f6:	4413      	add	r3, r2
 80131f8:	429c      	cmp	r4, r3
 80131fa:	d006      	beq.n	801320a <memset+0x36>
 80131fc:	f804 1b01 	strb.w	r1, [r4], #1
 8013200:	e7fa      	b.n	80131f8 <memset+0x24>
 8013202:	3a01      	subs	r2, #1
 8013204:	f803 1b01 	strb.w	r1, [r3], #1
 8013208:	d1e8      	bne.n	80131dc <memset+0x8>
 801320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801320c:	f846 7b08 	str.w	r7, [r6], #8
 8013210:	f846 5c04 	str.w	r5, [r6, #-4]
 8013214:	e7ed      	b.n	80131f2 <memset+0x1e>
	...

08013218 <_xputch>:
 8013218:	4603      	mov	r3, r0
 801321a:	b410      	push	{r4}
 801321c:	4c08      	ldr	r4, [pc, #32]	; (8013240 <_xputch+0x28>)
 801321e:	68da      	ldr	r2, [r3, #12]
 8013220:	4608      	mov	r0, r1
 8013222:	6821      	ldr	r1, [r4, #0]
 8013224:	3201      	adds	r2, #1
 8013226:	60da      	str	r2, [r3, #12]
 8013228:	b139      	cbz	r1, 801323a <_xputch+0x22>
 801322a:	691b      	ldr	r3, [r3, #16]
 801322c:	429a      	cmp	r2, r3
 801322e:	da02      	bge.n	8013236 <_xputch+0x1e>
 8013230:	1c4b      	adds	r3, r1, #1
 8013232:	6023      	str	r3, [r4, #0]
 8013234:	7008      	strb	r0, [r1, #0]
 8013236:	bc10      	pop	{r4}
 8013238:	4770      	bx	lr
 801323a:	bc10      	pop	{r4}
 801323c:	f7ff bd82 	b.w	8012d44 <console_putc>
 8013240:	2000a1cc 	andcs	sl, r0, ip, asr #3

08013244 <_format_int>:
 8013244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013248:	4698      	mov	r8, r3
 801324a:	b091      	sub	sp, #68	; 0x44
 801324c:	ea52 0308 	orrs.w	r3, r2, r8
 8013250:	4606      	mov	r6, r0
 8013252:	4617      	mov	r7, r2
 8013254:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8013258:	d133      	bne.n	80132c2 <_format_int+0x7e>
 801325a:	2330      	movs	r3, #48	; 0x30
 801325c:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8013260:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8013264:	6833      	ldr	r3, [r6, #0]
 8013266:	07d8      	lsls	r0, r3, #31
 8013268:	d507      	bpl.n	801327a <_format_int+0x36>
 801326a:	466a      	mov	r2, sp
 801326c:	2030      	movs	r0, #48	; 0x30
 801326e:	6871      	ldr	r1, [r6, #4]
 8013270:	1b2f      	subs	r7, r5, r4
 8013272:	428f      	cmp	r7, r1
 8013274:	da01      	bge.n	801327a <_format_int+0x36>
 8013276:	4294      	cmp	r4, r2
 8013278:	d839      	bhi.n	80132ee <_format_int+0xaa>
 801327a:	0699      	lsls	r1, r3, #26
 801327c:	d507      	bpl.n	801328e <_format_int+0x4a>
 801327e:	466a      	mov	r2, sp
 8013280:	2030      	movs	r0, #48	; 0x30
 8013282:	68b1      	ldr	r1, [r6, #8]
 8013284:	1b2f      	subs	r7, r5, r4
 8013286:	428f      	cmp	r7, r1
 8013288:	da01      	bge.n	801328e <_format_int+0x4a>
 801328a:	4294      	cmp	r4, r2
 801328c:	d832      	bhi.n	80132f4 <_format_int+0xb0>
 801328e:	071a      	lsls	r2, r3, #28
 8013290:	bf44      	itt	mi
 8013292:	222d      	movmi	r2, #45	; 0x2d
 8013294:	f804 2901 	strbmi.w	r2, [r4], #-1
 8013298:	065b      	lsls	r3, r3, #25
 801329a:	d407      	bmi.n	80132ac <_format_int+0x68>
 801329c:	466b      	mov	r3, sp
 801329e:	2120      	movs	r1, #32
 80132a0:	68b2      	ldr	r2, [r6, #8]
 80132a2:	1b28      	subs	r0, r5, r4
 80132a4:	4290      	cmp	r0, r2
 80132a6:	da01      	bge.n	80132ac <_format_int+0x68>
 80132a8:	429c      	cmp	r4, r3
 80132aa:	d826      	bhi.n	80132fa <_format_int+0xb6>
 80132ac:	1b2d      	subs	r5, r5, r4
 80132ae:	3401      	adds	r4, #1
 80132b0:	ab10      	add	r3, sp, #64	; 0x40
 80132b2:	429c      	cmp	r4, r3
 80132b4:	d324      	bcc.n	8013300 <_format_int+0xbc>
 80132b6:	68b3      	ldr	r3, [r6, #8]
 80132b8:	42ab      	cmp	r3, r5
 80132ba:	dc27      	bgt.n	801330c <_format_int+0xc8>
 80132bc:	b011      	add	sp, #68	; 0x44
 80132be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132c2:	462c      	mov	r4, r5
 80132c4:	46e9      	mov	r9, sp
 80132c6:	4638      	mov	r0, r7
 80132c8:	4641      	mov	r1, r8
 80132ca:	220a      	movs	r2, #10
 80132cc:	2300      	movs	r3, #0
 80132ce:	f7f4 fc09 	bl	8007ae4 <__aeabi_uldivmod>
 80132d2:	3230      	adds	r2, #48	; 0x30
 80132d4:	f804 2901 	strb.w	r2, [r4], #-1
 80132d8:	463a      	mov	r2, r7
 80132da:	4643      	mov	r3, r8
 80132dc:	2a0a      	cmp	r2, #10
 80132de:	f173 0300 	sbcs.w	r3, r3, #0
 80132e2:	4607      	mov	r7, r0
 80132e4:	4688      	mov	r8, r1
 80132e6:	d3bd      	bcc.n	8013264 <_format_int+0x20>
 80132e8:	454c      	cmp	r4, r9
 80132ea:	d1ec      	bne.n	80132c6 <_format_int+0x82>
 80132ec:	e7ba      	b.n	8013264 <_format_int+0x20>
 80132ee:	f804 0901 	strb.w	r0, [r4], #-1
 80132f2:	e7bd      	b.n	8013270 <_format_int+0x2c>
 80132f4:	f804 0901 	strb.w	r0, [r4], #-1
 80132f8:	e7c4      	b.n	8013284 <_format_int+0x40>
 80132fa:	f804 1901 	strb.w	r1, [r4], #-1
 80132fe:	e7d0      	b.n	80132a2 <_format_int+0x5e>
 8013300:	4630      	mov	r0, r6
 8013302:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013306:	f7ff ff87 	bl	8013218 <_xputch>
 801330a:	e7d1      	b.n	80132b0 <_format_int+0x6c>
 801330c:	2120      	movs	r1, #32
 801330e:	4630      	mov	r0, r6
 8013310:	f7ff ff82 	bl	8013218 <_xputch>
 8013314:	3501      	adds	r5, #1
 8013316:	e7ce      	b.n	80132b6 <_format_int+0x72>

08013318 <_format_hex>:
 8013318:	b5f0      	push	{r4, r5, r6, r7, lr}
 801331a:	b091      	sub	sp, #68	; 0x44
 801331c:	4606      	mov	r6, r0
 801331e:	6804      	ldr	r4, [r0, #0]
 8013320:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8013324:	bb61      	cbnz	r1, 8013380 <_format_hex+0x68>
 8013326:	2330      	movs	r3, #48	; 0x30
 8013328:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 801332c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8013330:	07e5      	lsls	r5, r4, #31
 8013332:	d507      	bpl.n	8013344 <_format_hex+0x2c>
 8013334:	4669      	mov	r1, sp
 8013336:	2530      	movs	r5, #48	; 0x30
 8013338:	6870      	ldr	r0, [r6, #4]
 801333a:	1ad7      	subs	r7, r2, r3
 801333c:	4287      	cmp	r7, r0
 801333e:	da01      	bge.n	8013344 <_format_hex+0x2c>
 8013340:	428b      	cmp	r3, r1
 8013342:	d831      	bhi.n	80133a8 <_format_hex+0x90>
 8013344:	06a0      	lsls	r0, r4, #26
 8013346:	d507      	bpl.n	8013358 <_format_hex+0x40>
 8013348:	4669      	mov	r1, sp
 801334a:	2530      	movs	r5, #48	; 0x30
 801334c:	68b0      	ldr	r0, [r6, #8]
 801334e:	1ad7      	subs	r7, r2, r3
 8013350:	4287      	cmp	r7, r0
 8013352:	da01      	bge.n	8013358 <_format_hex+0x40>
 8013354:	428b      	cmp	r3, r1
 8013356:	d82a      	bhi.n	80133ae <_format_hex+0x96>
 8013358:	0661      	lsls	r1, r4, #25
 801335a:	d407      	bmi.n	801336c <_format_hex+0x54>
 801335c:	4669      	mov	r1, sp
 801335e:	2420      	movs	r4, #32
 8013360:	68b0      	ldr	r0, [r6, #8]
 8013362:	1ad5      	subs	r5, r2, r3
 8013364:	4285      	cmp	r5, r0
 8013366:	da01      	bge.n	801336c <_format_hex+0x54>
 8013368:	428b      	cmp	r3, r1
 801336a:	d823      	bhi.n	80133b4 <_format_hex+0x9c>
 801336c:	1ad5      	subs	r5, r2, r3
 801336e:	1c5c      	adds	r4, r3, #1
 8013370:	ab10      	add	r3, sp, #64	; 0x40
 8013372:	429c      	cmp	r4, r3
 8013374:	d321      	bcc.n	80133ba <_format_hex+0xa2>
 8013376:	68b3      	ldr	r3, [r6, #8]
 8013378:	429d      	cmp	r5, r3
 801337a:	db24      	blt.n	80133c6 <_format_hex+0xae>
 801337c:	b011      	add	sp, #68	; 0x44
 801337e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013380:	f014 0f02 	tst.w	r4, #2
 8013384:	bf0c      	ite	eq
 8013386:	2757      	moveq	r7, #87	; 0x57
 8013388:	2737      	movne	r7, #55	; 0x37
 801338a:	4613      	mov	r3, r2
 801338c:	466d      	mov	r5, sp
 801338e:	f001 000f 	and.w	r0, r1, #15
 8013392:	2809      	cmp	r0, #9
 8013394:	bf94      	ite	ls
 8013396:	3030      	addls	r0, #48	; 0x30
 8013398:	19c0      	addhi	r0, r0, r7
 801339a:	0909      	lsrs	r1, r1, #4
 801339c:	f803 0901 	strb.w	r0, [r3], #-1
 80133a0:	d0c6      	beq.n	8013330 <_format_hex+0x18>
 80133a2:	42ab      	cmp	r3, r5
 80133a4:	d1f3      	bne.n	801338e <_format_hex+0x76>
 80133a6:	e7c3      	b.n	8013330 <_format_hex+0x18>
 80133a8:	f803 5901 	strb.w	r5, [r3], #-1
 80133ac:	e7c5      	b.n	801333a <_format_hex+0x22>
 80133ae:	f803 5901 	strb.w	r5, [r3], #-1
 80133b2:	e7cc      	b.n	801334e <_format_hex+0x36>
 80133b4:	f803 4901 	strb.w	r4, [r3], #-1
 80133b8:	e7d3      	b.n	8013362 <_format_hex+0x4a>
 80133ba:	4630      	mov	r0, r6
 80133bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133c0:	f7ff ff2a 	bl	8013218 <_xputch>
 80133c4:	e7d4      	b.n	8013370 <_format_hex+0x58>
 80133c6:	2120      	movs	r1, #32
 80133c8:	4630      	mov	r0, r6
 80133ca:	f7ff ff25 	bl	8013218 <_xputch>
 80133ce:	3501      	adds	r5, #1
 80133d0:	e7d1      	b.n	8013376 <_format_hex+0x5e>
	...

080133d4 <_vprintf>:
 80133d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133d8:	2700      	movs	r7, #0
 80133da:	460b      	mov	r3, r1
 80133dc:	4614      	mov	r4, r2
 80133de:	f04f 080a 	mov.w	r8, #10
 80133e2:	b086      	sub	sp, #24
 80133e4:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80133e8:	7819      	ldrb	r1, [r3, #0]
 80133ea:	b919      	cbnz	r1, 80133f4 <_vprintf+0x20>
 80133ec:	9804      	ldr	r0, [sp, #16]
 80133ee:	b006      	add	sp, #24
 80133f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133f4:	2925      	cmp	r1, #37	; 0x25
 80133f6:	f103 0601 	add.w	r6, r3, #1
 80133fa:	d004      	beq.n	8013406 <_vprintf+0x32>
 80133fc:	a801      	add	r0, sp, #4
 80133fe:	f7ff ff0b 	bl	8013218 <_xputch>
 8013402:	4633      	mov	r3, r6
 8013404:	e7f0      	b.n	80133e8 <_vprintf+0x14>
 8013406:	785a      	ldrb	r2, [r3, #1]
 8013408:	e9cd 7701 	strd	r7, r7, [sp, #4]
 801340c:	2a30      	cmp	r2, #48	; 0x30
 801340e:	9703      	str	r7, [sp, #12]
 8013410:	d126      	bne.n	8013460 <_vprintf+0x8c>
 8013412:	2220      	movs	r2, #32
 8013414:	9201      	str	r2, [sp, #4]
 8013416:	1c9e      	adds	r6, r3, #2
 8013418:	2200      	movs	r2, #0
 801341a:	4635      	mov	r5, r6
 801341c:	4613      	mov	r3, r2
 801341e:	7829      	ldrb	r1, [r5, #0]
 8013420:	462e      	mov	r6, r5
 8013422:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8013426:	2809      	cmp	r0, #9
 8013428:	f105 0501 	add.w	r5, r5, #1
 801342c:	d91c      	bls.n	8013468 <_vprintf+0x94>
 801342e:	b12a      	cbz	r2, 801343c <_vprintf+0x68>
 8013430:	9303      	str	r3, [sp, #12]
 8013432:	b11b      	cbz	r3, 801343c <_vprintf+0x68>
 8013434:	9b01      	ldr	r3, [sp, #4]
 8013436:	f043 0310 	orr.w	r3, r3, #16
 801343a:	9301      	str	r3, [sp, #4]
 801343c:	292e      	cmp	r1, #46	; 0x2e
 801343e:	d122      	bne.n	8013486 <_vprintf+0xb2>
 8013440:	7873      	ldrb	r3, [r6, #1]
 8013442:	2b2a      	cmp	r3, #42	; 0x2a
 8013444:	d014      	beq.n	8013470 <_vprintf+0x9c>
 8013446:	2100      	movs	r1, #0
 8013448:	460a      	mov	r2, r1
 801344a:	1c70      	adds	r0, r6, #1
 801344c:	7803      	ldrb	r3, [r0, #0]
 801344e:	4606      	mov	r6, r0
 8013450:	3b30      	subs	r3, #48	; 0x30
 8013452:	2b09      	cmp	r3, #9
 8013454:	f100 0001 	add.w	r0, r0, #1
 8013458:	d930      	bls.n	80134bc <_vprintf+0xe8>
 801345a:	b181      	cbz	r1, 801347e <_vprintf+0xaa>
 801345c:	9202      	str	r2, [sp, #8]
 801345e:	e00e      	b.n	801347e <_vprintf+0xaa>
 8013460:	2a2d      	cmp	r2, #45	; 0x2d
 8013462:	d1d9      	bne.n	8013418 <_vprintf+0x44>
 8013464:	2240      	movs	r2, #64	; 0x40
 8013466:	e7d5      	b.n	8013414 <_vprintf+0x40>
 8013468:	2201      	movs	r2, #1
 801346a:	fb08 0303 	mla	r3, r8, r3, r0
 801346e:	e7d6      	b.n	801341e <_vprintf+0x4a>
 8013470:	f854 3b04 	ldr.w	r3, [r4], #4
 8013474:	3602      	adds	r6, #2
 8013476:	2b00      	cmp	r3, #0
 8013478:	bfb8      	it	lt
 801347a:	425b      	neglt	r3, r3
 801347c:	9302      	str	r3, [sp, #8]
 801347e:	9b01      	ldr	r3, [sp, #4]
 8013480:	f043 0301 	orr.w	r3, r3, #1
 8013484:	9301      	str	r3, [sp, #4]
 8013486:	7833      	ldrb	r3, [r6, #0]
 8013488:	2b6c      	cmp	r3, #108	; 0x6c
 801348a:	bf04      	itt	eq
 801348c:	9b01      	ldreq	r3, [sp, #4]
 801348e:	3601      	addeq	r6, #1
 8013490:	7831      	ldrb	r1, [r6, #0]
 8013492:	bf04      	itt	eq
 8013494:	f043 0304 	orreq.w	r3, r3, #4
 8013498:	9301      	streq	r3, [sp, #4]
 801349a:	2978      	cmp	r1, #120	; 0x78
 801349c:	d8ae      	bhi.n	80133fc <_vprintf+0x28>
 801349e:	296f      	cmp	r1, #111	; 0x6f
 80134a0:	d810      	bhi.n	80134c4 <_vprintf+0xf0>
 80134a2:	2963      	cmp	r1, #99	; 0x63
 80134a4:	d048      	beq.n	8013538 <_vprintf+0x164>
 80134a6:	d827      	bhi.n	80134f8 <_vprintf+0x124>
 80134a8:	2958      	cmp	r1, #88	; 0x58
 80134aa:	d1a7      	bne.n	80133fc <_vprintf+0x28>
 80134ac:	9b01      	ldr	r3, [sp, #4]
 80134ae:	f043 0302 	orr.w	r3, r3, #2
 80134b2:	9301      	str	r3, [sp, #4]
 80134b4:	4625      	mov	r5, r4
 80134b6:	f855 1b04 	ldr.w	r1, [r5], #4
 80134ba:	e056      	b.n	801356a <_vprintf+0x196>
 80134bc:	2101      	movs	r1, #1
 80134be:	fb08 3202 	mla	r2, r8, r2, r3
 80134c2:	e7c3      	b.n	801344c <_vprintf+0x78>
 80134c4:	f1a1 0370 	sub.w	r3, r1, #112	; 0x70
 80134c8:	2b08      	cmp	r3, #8
 80134ca:	d897      	bhi.n	80133fc <_vprintf+0x28>
 80134cc:	a201      	add	r2, pc, #4	; (adr r2, 80134d4 <_vprintf+0x100>)
 80134ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134d2:	bf00      	nop
 80134d4:	0801354b 	stmdaeq	r1, {r0, r1, r3, r6, r8, sl, ip, sp}
 80134d8:	080133fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
 80134dc:	080133fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
 80134e0:	08013573 	stmdaeq	r1, {r0, r1, r4, r5, r6, r8, sl, ip, sp}
 80134e4:	080133fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
 80134e8:	080135e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, sl, ip, sp}
 80134ec:	080133fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
 80134f0:	080133fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, ip, sp}
 80134f4:	080134b5 	stmdaeq	r1, {r0, r2, r4, r5, r7, sl, ip, sp}
 80134f8:	2964      	cmp	r1, #100	; 0x64
 80134fa:	d002      	beq.n	8013502 <_vprintf+0x12e>
 80134fc:	2969      	cmp	r1, #105	; 0x69
 80134fe:	f47f af7d 	bne.w	80133fc <_vprintf+0x28>
 8013502:	9901      	ldr	r1, [sp, #4]
 8013504:	074d      	lsls	r5, r1, #29
 8013506:	bf51      	iteee	pl
 8013508:	4625      	movpl	r5, r4
 801350a:	3407      	addmi	r4, #7
 801350c:	f024 0407 	bicmi.w	r4, r4, #7
 8013510:	4625      	movmi	r5, r4
 8013512:	bf55      	itete	pl
 8013514:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8013518:	6863      	ldrmi	r3, [r4, #4]
 801351a:	17d3      	asrpl	r3, r2, #31
 801351c:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8013520:	2b00      	cmp	r3, #0
 8013522:	da05      	bge.n	8013530 <_vprintf+0x15c>
 8013524:	f041 0108 	orr.w	r1, r1, #8
 8013528:	4252      	negs	r2, r2
 801352a:	9101      	str	r1, [sp, #4]
 801352c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8013530:	a801      	add	r0, sp, #4
 8013532:	f7ff fe87 	bl	8013244 <_format_int>
 8013536:	e005      	b.n	8013544 <_vprintf+0x170>
 8013538:	4625      	mov	r5, r4
 801353a:	a801      	add	r0, sp, #4
 801353c:	f855 1b04 	ldr.w	r1, [r5], #4
 8013540:	f7ff fe6a 	bl	8013218 <_xputch>
 8013544:	462c      	mov	r4, r5
 8013546:	3601      	adds	r6, #1
 8013548:	e75b      	b.n	8013402 <_vprintf+0x2e>
 801354a:	2308      	movs	r3, #8
 801354c:	4625      	mov	r5, r4
 801354e:	9303      	str	r3, [sp, #12]
 8013550:	2320      	movs	r3, #32
 8013552:	2130      	movs	r1, #48	; 0x30
 8013554:	f855 4b04 	ldr.w	r4, [r5], #4
 8013558:	a801      	add	r0, sp, #4
 801355a:	9301      	str	r3, [sp, #4]
 801355c:	f7ff fe5c 	bl	8013218 <_xputch>
 8013560:	2178      	movs	r1, #120	; 0x78
 8013562:	a801      	add	r0, sp, #4
 8013564:	f7ff fe58 	bl	8013218 <_xputch>
 8013568:	4621      	mov	r1, r4
 801356a:	a801      	add	r0, sp, #4
 801356c:	f7ff fed4 	bl	8013318 <_format_hex>
 8013570:	e7e8      	b.n	8013544 <_vprintf+0x170>
 8013572:	4625      	mov	r5, r4
 8013574:	2400      	movs	r4, #0
 8013576:	f855 9b04 	ldr.w	r9, [r5], #4
 801357a:	f819 3004 	ldrb.w	r3, [r9, r4]
 801357e:	b993      	cbnz	r3, 80135a6 <_vprintf+0x1d2>
 8013580:	9b01      	ldr	r3, [sp, #4]
 8013582:	07d9      	lsls	r1, r3, #31
 8013584:	d503      	bpl.n	801358e <_vprintf+0x1ba>
 8013586:	9b02      	ldr	r3, [sp, #8]
 8013588:	429c      	cmp	r4, r3
 801358a:	bfa8      	it	ge
 801358c:	461c      	movge	r4, r3
 801358e:	9b01      	ldr	r3, [sp, #4]
 8013590:	f104 0a01 	add.w	sl, r4, #1
 8013594:	065a      	lsls	r2, r3, #25
 8013596:	d403      	bmi.n	80135a0 <_vprintf+0x1cc>
 8013598:	9b03      	ldr	r3, [sp, #12]
 801359a:	429c      	cmp	r4, r3
 801359c:	db05      	blt.n	80135aa <_vprintf+0x1d6>
 801359e:	4654      	mov	r4, sl
 80135a0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80135a4:	e00d      	b.n	80135c2 <_vprintf+0x1ee>
 80135a6:	3401      	adds	r4, #1
 80135a8:	e7e7      	b.n	801357a <_vprintf+0x1a6>
 80135aa:	2120      	movs	r1, #32
 80135ac:	a801      	add	r0, sp, #4
 80135ae:	f7ff fe33 	bl	8013218 <_xputch>
 80135b2:	4654      	mov	r4, sl
 80135b4:	e7eb      	b.n	801358e <_vprintf+0x1ba>
 80135b6:	a801      	add	r0, sp, #4
 80135b8:	f7ff fe2e 	bl	8013218 <_xputch>
 80135bc:	9b02      	ldr	r3, [sp, #8]
 80135be:	3b01      	subs	r3, #1
 80135c0:	9302      	str	r3, [sp, #8]
 80135c2:	9b01      	ldr	r3, [sp, #4]
 80135c4:	07db      	lsls	r3, r3, #31
 80135c6:	d501      	bpl.n	80135cc <_vprintf+0x1f8>
 80135c8:	9b02      	ldr	r3, [sp, #8]
 80135ca:	b11b      	cbz	r3, 80135d4 <_vprintf+0x200>
 80135cc:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 80135d0:	2900      	cmp	r1, #0
 80135d2:	d1f0      	bne.n	80135b6 <_vprintf+0x1e2>
 80135d4:	9b03      	ldr	r3, [sp, #12]
 80135d6:	42a3      	cmp	r3, r4
 80135d8:	ddb4      	ble.n	8013544 <_vprintf+0x170>
 80135da:	2120      	movs	r1, #32
 80135dc:	a801      	add	r0, sp, #4
 80135de:	f7ff fe1b 	bl	8013218 <_xputch>
 80135e2:	3401      	adds	r4, #1
 80135e4:	e7f6      	b.n	80135d4 <_vprintf+0x200>
 80135e6:	9b01      	ldr	r3, [sp, #4]
 80135e8:	f013 0304 	ands.w	r3, r3, #4
 80135ec:	bf1d      	ittte	ne
 80135ee:	3407      	addne	r4, #7
 80135f0:	f024 0407 	bicne.w	r4, r4, #7
 80135f4:	4625      	movne	r5, r4
 80135f6:	4625      	moveq	r5, r4
 80135f8:	bf1a      	itte	ne
 80135fa:	f855 2b08 	ldrne.w	r2, [r5], #8
 80135fe:	6863      	ldrne	r3, [r4, #4]
 8013600:	f855 2b04 	ldreq.w	r2, [r5], #4
 8013604:	e794      	b.n	8013530 <_vprintf+0x15c>
 8013606:	bf00      	nop

08013608 <printf>:
 8013608:	b40f      	push	{r0, r1, r2, r3}
 801360a:	b507      	push	{r0, r1, r2, lr}
 801360c:	aa04      	add	r2, sp, #16
 801360e:	f852 1b04 	ldr.w	r1, [r2], #4
 8013612:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013616:	9201      	str	r2, [sp, #4]
 8013618:	f7ff fedc 	bl	80133d4 <_vprintf>
 801361c:	b003      	add	sp, #12
 801361e:	f85d eb04 	ldr.w	lr, [sp], #4
 8013622:	b004      	add	sp, #16
 8013624:	4770      	bx	lr
	...

08013628 <sprintf>:
 8013628:	b40e      	push	{r1, r2, r3}
 801362a:	b517      	push	{r0, r1, r2, r4, lr}
 801362c:	4c09      	ldr	r4, [pc, #36]	; (8013654 <sprintf+0x2c>)
 801362e:	aa05      	add	r2, sp, #20
 8013630:	f852 1b04 	ldr.w	r1, [r2], #4
 8013634:	6020      	str	r0, [r4, #0]
 8013636:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801363a:	9201      	str	r2, [sp, #4]
 801363c:	f7ff feca 	bl	80133d4 <_vprintf>
 8013640:	2300      	movs	r3, #0
 8013642:	6822      	ldr	r2, [r4, #0]
 8013644:	6023      	str	r3, [r4, #0]
 8013646:	7013      	strb	r3, [r2, #0]
 8013648:	b003      	add	sp, #12
 801364a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801364e:	b003      	add	sp, #12
 8013650:	4770      	bx	lr
 8013652:	bf00      	nop
 8013654:	2000a1cc 	andcs	sl, r0, ip, asr #3

08013658 <snprintf>:
 8013658:	b40c      	push	{r2, r3}
 801365a:	460b      	mov	r3, r1
 801365c:	b513      	push	{r0, r1, r4, lr}
 801365e:	4c09      	ldr	r4, [pc, #36]	; (8013684 <snprintf+0x2c>)
 8013660:	aa04      	add	r2, sp, #16
 8013662:	f852 1b04 	ldr.w	r1, [r2], #4
 8013666:	6020      	str	r0, [r4, #0]
 8013668:	4618      	mov	r0, r3
 801366a:	9201      	str	r2, [sp, #4]
 801366c:	f7ff feb2 	bl	80133d4 <_vprintf>
 8013670:	2300      	movs	r3, #0
 8013672:	6822      	ldr	r2, [r4, #0]
 8013674:	6023      	str	r3, [r4, #0]
 8013676:	7013      	strb	r3, [r2, #0]
 8013678:	b002      	add	sp, #8
 801367a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801367e:	b002      	add	sp, #8
 8013680:	4770      	bx	lr
 8013682:	bf00      	nop
 8013684:	2000a1cc 	andcs	sl, r0, ip, asr #3

08013688 <vsnprintf>:
 8013688:	b538      	push	{r3, r4, r5, lr}
 801368a:	4605      	mov	r5, r0
 801368c:	4c05      	ldr	r4, [pc, #20]	; (80136a4 <vsnprintf+0x1c>)
 801368e:	4608      	mov	r0, r1
 8013690:	4611      	mov	r1, r2
 8013692:	461a      	mov	r2, r3
 8013694:	6025      	str	r5, [r4, #0]
 8013696:	f7ff fe9d 	bl	80133d4 <_vprintf>
 801369a:	2300      	movs	r3, #0
 801369c:	6822      	ldr	r2, [r4, #0]
 801369e:	6023      	str	r3, [r4, #0]
 80136a0:	7013      	strb	r3, [r2, #0]
 80136a2:	bd38      	pop	{r3, r4, r5, pc}
 80136a4:	2000a1cc 	andcs	sl, r0, ip, asr #3

080136a8 <puts>:
 80136a8:	b508      	push	{r3, lr}
 80136aa:	f7ff fb4d 	bl	8012d48 <console_puts>
 80136ae:	200a      	movs	r0, #10
 80136b0:	f7ff fb48 	bl	8012d44 <console_putc>
 80136b4:	2001      	movs	r0, #1
 80136b6:	bd08      	pop	{r3, pc}

080136b8 <strtok>:
 80136b8:	b530      	push	{r4, r5, lr}
 80136ba:	b910      	cbnz	r0, 80136c2 <strtok+0xa>
 80136bc:	4b12      	ldr	r3, [pc, #72]	; (8013708 <strtok+0x50>)
 80136be:	6818      	ldr	r0, [r3, #0]
 80136c0:	b158      	cbz	r0, 80136da <strtok+0x22>
 80136c2:	4603      	mov	r3, r0
 80136c4:	460d      	mov	r5, r1
 80136c6:	4618      	mov	r0, r3
 80136c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80136d0:	b924      	cbnz	r4, 80136dc <strtok+0x24>
 80136d2:	b94a      	cbnz	r2, 80136e8 <strtok+0x30>
 80136d4:	4610      	mov	r0, r2
 80136d6:	4b0c      	ldr	r3, [pc, #48]	; (8013708 <strtok+0x50>)
 80136d8:	601a      	str	r2, [r3, #0]
 80136da:	bd30      	pop	{r4, r5, pc}
 80136dc:	42a2      	cmp	r2, r4
 80136de:	d1f5      	bne.n	80136cc <strtok+0x14>
 80136e0:	e7f0      	b.n	80136c4 <strtok+0xc>
 80136e2:	4613      	mov	r3, r2
 80136e4:	e00c      	b.n	8013700 <strtok+0x48>
 80136e6:	b914      	cbnz	r4, 80136ee <strtok+0x36>
 80136e8:	460d      	mov	r5, r1
 80136ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80136f2:	42a2      	cmp	r2, r4
 80136f4:	d1f7      	bne.n	80136e6 <strtok+0x2e>
 80136f6:	2a00      	cmp	r2, #0
 80136f8:	d0f3      	beq.n	80136e2 <strtok+0x2a>
 80136fa:	2200      	movs	r2, #0
 80136fc:	f803 2c01 	strb.w	r2, [r3, #-1]
 8013700:	4a01      	ldr	r2, [pc, #4]	; (8013708 <strtok+0x50>)
 8013702:	6013      	str	r3, [r2, #0]
 8013704:	e7e9      	b.n	80136da <strtok+0x22>
 8013706:	bf00      	nop
 8013708:	2000a1d0 	ldrdcs	sl, [r0], -r0

0801370c <isleapyear>:
 801370c:	2264      	movs	r2, #100	; 0x64
 801370e:	fb90 f3f2 	sdiv	r3, r0, r2
 8013712:	fb02 0313 	mls	r3, r2, r3, r0
 8013716:	b94b      	cbnz	r3, 801372c <isleapyear+0x20>
 8013718:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801371c:	fb90 f2f3 	sdiv	r2, r0, r3
 8013720:	fb03 0012 	mls	r0, r3, r2, r0
 8013724:	fab0 f080 	clz	r0, r0
 8013728:	0940      	lsrs	r0, r0, #5
 801372a:	4770      	bx	lr
 801372c:	f010 0f03 	tst.w	r0, #3
 8013730:	bf0c      	ite	eq
 8013732:	2001      	moveq	r0, #1
 8013734:	2000      	movne	r0, #0
 8013736:	4770      	bx	lr

08013738 <getdaysofmonth>:
 8013738:	b510      	push	{r4, lr}
 801373a:	4604      	mov	r4, r0
 801373c:	2c01      	cmp	r4, #1
 801373e:	4608      	mov	r0, r1
 8013740:	d102      	bne.n	8013748 <getdaysofmonth+0x10>
 8013742:	f7ff ffe3 	bl	801370c <isleapyear>
 8013746:	b918      	cbnz	r0, 8013750 <getdaysofmonth+0x18>
 8013748:	4b02      	ldr	r3, [pc, #8]	; (8013754 <getdaysofmonth+0x1c>)
 801374a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801374e:	bd10      	pop	{r4, pc}
 8013750:	201d      	movs	r0, #29
 8013752:	e7fc      	b.n	801374e <getdaysofmonth+0x16>
 8013754:	08017b40 	stmdaeq	r1, {r6, r8, r9, fp, ip, sp, lr}

08013758 <mktime>:
 8013758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801375c:	4604      	mov	r4, r0
 801375e:	2800      	cmp	r0, #0
 8013760:	d043      	beq.n	80137ea <mktime+0x92>
 8013762:	6941      	ldr	r1, [r0, #20]
 8013764:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8013768:	2b45      	cmp	r3, #69	; 0x45
 801376a:	d83e      	bhi.n	80137ea <mktime+0x92>
 801376c:	2600      	movs	r6, #0
 801376e:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8013772:	f240 186d 	movw	r8, #365	; 0x16d
 8013776:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 801377a:	42af      	cmp	r7, r5
 801377c:	da24      	bge.n	80137c8 <mktime+0x70>
 801377e:	6927      	ldr	r7, [r4, #16]
 8013780:	2f0b      	cmp	r7, #11
 8013782:	d832      	bhi.n	80137ea <mktime+0x92>
 8013784:	2500      	movs	r5, #0
 8013786:	42af      	cmp	r7, r5
 8013788:	d129      	bne.n	80137de <mktime+0x86>
 801378a:	68e5      	ldr	r5, [r4, #12]
 801378c:	2d00      	cmp	r5, #0
 801378e:	dd2c      	ble.n	80137ea <mktime+0x92>
 8013790:	4638      	mov	r0, r7
 8013792:	f7ff ffd1 	bl	8013738 <getdaysofmonth>
 8013796:	4285      	cmp	r5, r0
 8013798:	dc27      	bgt.n	80137ea <mktime+0x92>
 801379a:	2318      	movs	r3, #24
 801379c:	3d01      	subs	r5, #1
 801379e:	4435      	add	r5, r6
 80137a0:	435d      	muls	r5, r3
 80137a2:	68a3      	ldr	r3, [r4, #8]
 80137a4:	2b17      	cmp	r3, #23
 80137a6:	d820      	bhi.n	80137ea <mktime+0x92>
 80137a8:	213c      	movs	r1, #60	; 0x3c
 80137aa:	442b      	add	r3, r5
 80137ac:	fb01 f203 	mul.w	r2, r1, r3
 80137b0:	6863      	ldr	r3, [r4, #4]
 80137b2:	2b3b      	cmp	r3, #59	; 0x3b
 80137b4:	d819      	bhi.n	80137ea <mktime+0x92>
 80137b6:	6820      	ldr	r0, [r4, #0]
 80137b8:	4413      	add	r3, r2
 80137ba:	283b      	cmp	r0, #59	; 0x3b
 80137bc:	fb01 f303 	mul.w	r3, r1, r3
 80137c0:	d813      	bhi.n	80137ea <mktime+0x92>
 80137c2:	4418      	add	r0, r3
 80137c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137c8:	4628      	mov	r0, r5
 80137ca:	f7ff ff9f 	bl	801370c <isleapyear>
 80137ce:	2800      	cmp	r0, #0
 80137d0:	bf14      	ite	ne
 80137d2:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 80137d6:	4643      	moveq	r3, r8
 80137d8:	3501      	adds	r5, #1
 80137da:	441e      	add	r6, r3
 80137dc:	e7cd      	b.n	801377a <mktime+0x22>
 80137de:	4628      	mov	r0, r5
 80137e0:	f7ff ffaa 	bl	8013738 <getdaysofmonth>
 80137e4:	3501      	adds	r5, #1
 80137e6:	4406      	add	r6, r0
 80137e8:	e7cd      	b.n	8013786 <mktime+0x2e>
 80137ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80137ee:	e7e9      	b.n	80137c4 <mktime+0x6c>

080137f0 <gettimeofday>:
 80137f0:	b538      	push	{r3, r4, r5, lr}
 80137f2:	4b10      	ldr	r3, [pc, #64]	; (8013834 <gettimeofday+0x44>)
 80137f4:	4a10      	ldr	r2, [pc, #64]	; (8013838 <gettimeofday+0x48>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	6814      	ldr	r4, [r2, #0]
 80137fa:	6013      	str	r3, [r2, #0]
 80137fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013800:	429c      	cmp	r4, r3
 8013802:	bf2c      	ite	cs
 8013804:	1ae4      	subcs	r4, r4, r3
 8013806:	1b1c      	subcc	r4, r3, r4
 8013808:	4354      	muls	r4, r2
 801380a:	4b0c      	ldr	r3, [pc, #48]	; (801383c <gettimeofday+0x4c>)
 801380c:	4605      	mov	r5, r0
 801380e:	e9d3 2100 	ldrd	r2, r1, [r3]
 8013812:	18a4      	adds	r4, r4, r2
 8013814:	f141 0100 	adc.w	r1, r1, #0
 8013818:	e9c3 4100 	strd	r4, r1, [r3]
 801381c:	4620      	mov	r0, r4
 801381e:	2300      	movs	r3, #0
 8013820:	4a07      	ldr	r2, [pc, #28]	; (8013840 <gettimeofday+0x50>)
 8013822:	f7f4 f95f 	bl	8007ae4 <__aeabi_uldivmod>
 8013826:	4b06      	ldr	r3, [pc, #24]	; (8013840 <gettimeofday+0x50>)
 8013828:	6028      	str	r0, [r5, #0]
 801382a:	fb03 4410 	mls	r4, r3, r0, r4
 801382e:	2000      	movs	r0, #0
 8013830:	606c      	str	r4, [r5, #4]
 8013832:	bd38      	pop	{r3, r4, r5, pc}
 8013834:	2000a1e4 	andcs	sl, r0, r4, ror #3
 8013838:	2000a1e0 	andcs	sl, r0, r0, ror #3
 801383c:	2000a1d8 	ldrdcs	sl, [r0], -r8
 8013840:	000f4240 	andeq	r4, pc, r0, asr #4

08013844 <settimeofday>:
 8013844:	4b07      	ldr	r3, [pc, #28]	; (8013864 <settimeofday+0x20>)
 8013846:	b510      	push	{r4, lr}
 8013848:	681a      	ldr	r2, [r3, #0]
 801384a:	4b07      	ldr	r3, [pc, #28]	; (8013868 <settimeofday+0x24>)
 801384c:	6804      	ldr	r4, [r0, #0]
 801384e:	601a      	str	r2, [r3, #0]
 8013850:	6843      	ldr	r3, [r0, #4]
 8013852:	4806      	ldr	r0, [pc, #24]	; (801386c <settimeofday+0x28>)
 8013854:	17da      	asrs	r2, r3, #31
 8013856:	fbc4 3200 	smlal	r3, r2, r4, r0
 801385a:	4905      	ldr	r1, [pc, #20]	; (8013870 <settimeofday+0x2c>)
 801385c:	2000      	movs	r0, #0
 801385e:	e9c1 3200 	strd	r3, r2, [r1]
 8013862:	bd10      	pop	{r4, pc}
 8013864:	2000a1e4 	andcs	sl, r0, r4, ror #3
 8013868:	2000a1e0 	andcs	sl, r0, r0, ror #3
 801386c:	000f4240 	andeq	r4, pc, r0, asr #4
 8013870:	2000a1d8 	ldrdcs	sl, [r0], -r8

08013874 <time>:
 8013874:	b513      	push	{r0, r1, r4, lr}
 8013876:	4604      	mov	r4, r0
 8013878:	2100      	movs	r1, #0
 801387a:	4668      	mov	r0, sp
 801387c:	f7ff ffb8 	bl	80137f0 <gettimeofday>
 8013880:	9800      	ldr	r0, [sp, #0]
 8013882:	b104      	cbz	r4, 8013886 <time+0x12>
 8013884:	6020      	str	r0, [r4, #0]
 8013886:	b002      	add	sp, #8
 8013888:	bd10      	pop	{r4, pc}
	...

0801388c <uart0_init>:
 801388c:	2301      	movs	r3, #1
 801388e:	b507      	push	{r0, r1, r2, lr}
 8013890:	2208      	movs	r2, #8
 8013892:	9300      	str	r3, [sp, #0]
 8013894:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8013898:	2300      	movs	r3, #0
 801389a:	4803      	ldr	r0, [pc, #12]	; (80138a8 <uart0_init+0x1c>)
 801389c:	f001 fb2c 	bl	8014ef8 <gd32_uart_begin>
 80138a0:	b003      	add	sp, #12
 80138a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80138a6:	bf00      	nop
 80138a8:	40013800 	andmi	r3, r1, r0, lsl #16

080138ac <uart0_putc>:
 80138ac:	280a      	cmp	r0, #10
 80138ae:	b538      	push	{r3, r4, r5, lr}
 80138b0:	4604      	mov	r4, r0
 80138b2:	d10a      	bne.n	80138ca <uart0_putc+0x1e>
 80138b4:	4d0b      	ldr	r5, [pc, #44]	; (80138e4 <uart0_putc+0x38>)
 80138b6:	2107      	movs	r1, #7
 80138b8:	4628      	mov	r0, r5
 80138ba:	f001 f92f 	bl	8014b1c <usart_flag_get>
 80138be:	2800      	cmp	r0, #0
 80138c0:	d0f9      	beq.n	80138b6 <uart0_putc+0xa>
 80138c2:	220d      	movs	r2, #13
 80138c4:	4b08      	ldr	r3, [pc, #32]	; (80138e8 <uart0_putc+0x3c>)
 80138c6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80138ca:	4d06      	ldr	r5, [pc, #24]	; (80138e4 <uart0_putc+0x38>)
 80138cc:	2107      	movs	r1, #7
 80138ce:	4628      	mov	r0, r5
 80138d0:	f001 f924 	bl	8014b1c <usart_flag_get>
 80138d4:	2800      	cmp	r0, #0
 80138d6:	d0f9      	beq.n	80138cc <uart0_putc+0x20>
 80138d8:	4b03      	ldr	r3, [pc, #12]	; (80138e8 <uart0_putc+0x3c>)
 80138da:	b2e4      	uxtb	r4, r4
 80138dc:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 80138e0:	bd38      	pop	{r3, r4, r5, pc}
 80138e2:	bf00      	nop
 80138e4:	40013800 	andmi	r3, r1, r0, lsl #16
 80138e8:	40013000 	andmi	r3, r1, r0

080138ec <uart0_puts>:
 80138ec:	b510      	push	{r4, lr}
 80138ee:	1e44      	subs	r4, r0, #1
 80138f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80138f4:	b903      	cbnz	r3, 80138f8 <uart0_puts+0xc>
 80138f6:	bd10      	pop	{r4, pc}
 80138f8:	2b0a      	cmp	r3, #10
 80138fa:	d102      	bne.n	8013902 <uart0_puts+0x16>
 80138fc:	200d      	movs	r0, #13
 80138fe:	f7ff ffd5 	bl	80138ac <uart0_putc>
 8013902:	7820      	ldrb	r0, [r4, #0]
 8013904:	f7ff ffd2 	bl	80138ac <uart0_putc>
 8013908:	e7f2      	b.n	80138f0 <uart0_puts+0x4>
	...

0801390c <systick_config>:
 801390c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013910:	4b0b      	ldr	r3, [pc, #44]	; (8013940 <systick_config+0x34>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	fbb3 f3f2 	udiv	r3, r3, r2
 8013918:	3b01      	subs	r3, #1
 801391a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801391e:	d20d      	bcs.n	801393c <systick_config+0x30>
 8013920:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8013924:	21f0      	movs	r1, #240	; 0xf0
 8013926:	6153      	str	r3, [r2, #20]
 8013928:	4b06      	ldr	r3, [pc, #24]	; (8013944 <systick_config+0x38>)
 801392a:	2007      	movs	r0, #7
 801392c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8013930:	2100      	movs	r1, #0
 8013932:	6191      	str	r1, [r2, #24]
 8013934:	6110      	str	r0, [r2, #16]
 8013936:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 801393a:	4770      	bx	lr
 801393c:	e7fe      	b.n	801393c <systick_config+0x30>
 801393e:	bf00      	nop
 8013940:	20000088 	andcs	r0, r0, r8, lsl #1
 8013944:	e000ed00 	and	lr, r0, r0, lsl #26

08013948 <SysTick_Handler>:
 8013948:	4a02      	ldr	r2, [pc, #8]	; (8013954 <SysTick_Handler+0xc>)
 801394a:	6813      	ldr	r3, [r2, #0]
 801394c:	3301      	adds	r3, #1
 801394e:	6013      	str	r3, [r2, #0]
 8013950:	4770      	bx	lr
 8013952:	bf00      	nop
 8013954:	2000a1e4 	andcs	sl, r0, r4, ror #3

08013958 <SystemInit>:
 8013958:	4b37      	ldr	r3, [pc, #220]	; (8013a38 <SystemInit+0xe0>)
 801395a:	4938      	ldr	r1, [pc, #224]	; (8013a3c <SystemInit+0xe4>)
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	f042 0201 	orr.w	r2, r2, #1
 8013962:	601a      	str	r2, [r3, #0]
 8013964:	685a      	ldr	r2, [r3, #4]
 8013966:	f022 0203 	bic.w	r2, r2, #3
 801396a:	605a      	str	r2, [r3, #4]
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	400a      	ands	r2, r1
 8013970:	601a      	str	r2, [r3, #0]
 8013972:	6858      	ldr	r0, [r3, #4]
 8013974:	4a32      	ldr	r2, [pc, #200]	; (8013a40 <SystemInit+0xe8>)
 8013976:	4002      	ands	r2, r0
 8013978:	605a      	str	r2, [r3, #4]
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	400a      	ands	r2, r1
 801397e:	601a      	str	r2, [r3, #0]
 8013980:	681a      	ldr	r2, [r3, #0]
 8013982:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8013986:	601a      	str	r2, [r3, #0]
 8013988:	685a      	ldr	r2, [r3, #4]
 801398a:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 801398e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8013992:	605a      	str	r2, [r3, #4]
 8013994:	2200      	movs	r2, #0
 8013996:	62da      	str	r2, [r3, #44]	; 0x2c
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 801399e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80139a2:	601a      	str	r2, [r3, #0]
 80139a4:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80139a8:	609a      	str	r2, [r3, #8]
 80139aa:	681a      	ldr	r2, [r3, #0]
 80139ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80139b0:	601a      	str	r2, [r3, #0]
 80139b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139b6:	6819      	ldr	r1, [r3, #0]
 80139b8:	0389      	lsls	r1, r1, #14
 80139ba:	d401      	bmi.n	80139c0 <SystemInit+0x68>
 80139bc:	3a01      	subs	r2, #1
 80139be:	d1fa      	bne.n	80139b6 <SystemInit+0x5e>
 80139c0:	681a      	ldr	r2, [r3, #0]
 80139c2:	0392      	lsls	r2, r2, #14
 80139c4:	d400      	bmi.n	80139c8 <SystemInit+0x70>
 80139c6:	e7fe      	b.n	80139c6 <SystemInit+0x6e>
 80139c8:	685a      	ldr	r2, [r3, #4]
 80139ca:	605a      	str	r2, [r3, #4]
 80139cc:	685a      	ldr	r2, [r3, #4]
 80139ce:	605a      	str	r2, [r3, #4]
 80139d0:	685a      	ldr	r2, [r3, #4]
 80139d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80139d6:	605a      	str	r2, [r3, #4]
 80139d8:	685a      	ldr	r2, [r3, #4]
 80139da:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80139de:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80139e2:	605a      	str	r2, [r3, #4]
 80139e4:	685a      	ldr	r2, [r3, #4]
 80139e6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80139ea:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 80139ee:	605a      	str	r2, [r3, #4]
 80139f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80139f2:	4a14      	ldr	r2, [pc, #80]	; (8013a44 <SystemInit+0xec>)
 80139f4:	400a      	ands	r2, r1
 80139f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80139f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139fa:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 80139fe:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 8013a02:	62da      	str	r2, [r3, #44]	; 0x2c
 8013a04:	681a      	ldr	r2, [r3, #0]
 8013a06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013a0a:	601a      	str	r2, [r3, #0]
 8013a0c:	681a      	ldr	r2, [r3, #0]
 8013a0e:	0110      	lsls	r0, r2, #4
 8013a10:	d5fc      	bpl.n	8013a0c <SystemInit+0xb4>
 8013a12:	681a      	ldr	r2, [r3, #0]
 8013a14:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8013a18:	601a      	str	r2, [r3, #0]
 8013a1a:	681a      	ldr	r2, [r3, #0]
 8013a1c:	0191      	lsls	r1, r2, #6
 8013a1e:	d5fc      	bpl.n	8013a1a <SystemInit+0xc2>
 8013a20:	685a      	ldr	r2, [r3, #4]
 8013a22:	f022 0203 	bic.w	r2, r2, #3
 8013a26:	605a      	str	r2, [r3, #4]
 8013a28:	685a      	ldr	r2, [r3, #4]
 8013a2a:	f042 0202 	orr.w	r2, r2, #2
 8013a2e:	605a      	str	r2, [r3, #4]
 8013a30:	685a      	ldr	r2, [r3, #4]
 8013a32:	0712      	lsls	r2, r2, #28
 8013a34:	d5fc      	bpl.n	8013a30 <SystemInit+0xd8>
 8013a36:	4770      	bx	lr
 8013a38:	40021000 	andmi	r1, r2, r0
 8013a3c:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 8013a40:	e0ff000c 	rscs	r0, pc, ip
 8013a44:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

08013a48 <bkp_data_write>:
 8013a48:	f1a0 030b 	sub.w	r3, r0, #11
 8013a4c:	2b1f      	cmp	r3, #31
 8013a4e:	d804      	bhi.n	8013a5a <bkp_data_write+0x12>
 8013a50:	4b07      	ldr	r3, [pc, #28]	; (8013a70 <bkp_data_write+0x28>)
 8013a52:	4403      	add	r3, r0
 8013a54:	009b      	lsls	r3, r3, #2
 8013a56:	8019      	strh	r1, [r3, #0]
 8013a58:	4770      	bx	lr
 8013a5a:	1e43      	subs	r3, r0, #1
 8013a5c:	2b09      	cmp	r3, #9
 8013a5e:	bf9f      	itttt	ls
 8013a60:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8013a64:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 8013a68:	0080      	lslls	r0, r0, #2
 8013a6a:	8001      	strhls	r1, [r0, #0]
 8013a6c:	4770      	bx	lr
 8013a6e:	bf00      	nop
 8013a70:	10001b05 	andne	r1, r0, r5, lsl #22

08013a74 <bkp_data_read>:
 8013a74:	f1a0 030b 	sub.w	r3, r0, #11
 8013a78:	2b1f      	cmp	r3, #31
 8013a7a:	d805      	bhi.n	8013a88 <bkp_data_read+0x14>
 8013a7c:	4b08      	ldr	r3, [pc, #32]	; (8013aa0 <bkp_data_read+0x2c>)
 8013a7e:	4403      	add	r3, r0
 8013a80:	009b      	lsls	r3, r3, #2
 8013a82:	8818      	ldrh	r0, [r3, #0]
 8013a84:	b280      	uxth	r0, r0
 8013a86:	4770      	bx	lr
 8013a88:	1e43      	subs	r3, r0, #1
 8013a8a:	2b09      	cmp	r3, #9
 8013a8c:	d806      	bhi.n	8013a9c <bkp_data_read+0x28>
 8013a8e:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8013a92:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 8013a96:	0080      	lsls	r0, r0, #2
 8013a98:	8800      	ldrh	r0, [r0, #0]
 8013a9a:	e7f3      	b.n	8013a84 <bkp_data_read+0x10>
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	4770      	bx	lr
 8013aa0:	10001b05 	andne	r1, r0, r5, lsl #22

08013aa4 <dma_deinit>:
 8013aa4:	4b0c      	ldr	r3, [pc, #48]	; (8013ad8 <dma_deinit+0x34>)
 8013aa6:	4298      	cmp	r0, r3
 8013aa8:	d102      	bne.n	8013ab0 <dma_deinit+0xc>
 8013aaa:	2904      	cmp	r1, #4
 8013aac:	d900      	bls.n	8013ab0 <dma_deinit+0xc>
 8013aae:	e7fe      	b.n	8013aae <dma_deinit+0xa>
 8013ab0:	2314      	movs	r3, #20
 8013ab2:	fb03 0301 	mla	r3, r3, r1, r0
 8013ab6:	689a      	ldr	r2, [r3, #8]
 8013ab8:	0089      	lsls	r1, r1, #2
 8013aba:	f022 0201 	bic.w	r2, r2, #1
 8013abe:	609a      	str	r2, [r3, #8]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	609a      	str	r2, [r3, #8]
 8013ac4:	60da      	str	r2, [r3, #12]
 8013ac6:	611a      	str	r2, [r3, #16]
 8013ac8:	615a      	str	r2, [r3, #20]
 8013aca:	230f      	movs	r3, #15
 8013acc:	6842      	ldr	r2, [r0, #4]
 8013ace:	408b      	lsls	r3, r1
 8013ad0:	4313      	orrs	r3, r2
 8013ad2:	6043      	str	r3, [r0, #4]
 8013ad4:	4770      	bx	lr
 8013ad6:	bf00      	nop
 8013ad8:	40020400 	andmi	r0, r2, r0, lsl #8

08013adc <dma_init>:
 8013adc:	4b1b      	ldr	r3, [pc, #108]	; (8013b4c <dma_init+0x70>)
 8013ade:	b510      	push	{r4, lr}
 8013ae0:	4298      	cmp	r0, r3
 8013ae2:	d102      	bne.n	8013aea <dma_init+0xe>
 8013ae4:	2904      	cmp	r1, #4
 8013ae6:	d900      	bls.n	8013aea <dma_init+0xe>
 8013ae8:	e7fe      	b.n	8013ae8 <dma_init+0xc>
 8013aea:	2314      	movs	r3, #20
 8013aec:	fb03 0101 	mla	r1, r3, r1, r0
 8013af0:	6813      	ldr	r3, [r2, #0]
 8013af2:	610b      	str	r3, [r1, #16]
 8013af4:	6893      	ldr	r3, [r2, #8]
 8013af6:	614b      	str	r3, [r1, #20]
 8013af8:	8a13      	ldrh	r3, [r2, #16]
 8013afa:	60cb      	str	r3, [r1, #12]
 8013afc:	68d4      	ldr	r4, [r2, #12]
 8013afe:	6853      	ldr	r3, [r2, #4]
 8013b00:	6888      	ldr	r0, [r1, #8]
 8013b02:	4323      	orrs	r3, r4
 8013b04:	6954      	ldr	r4, [r2, #20]
 8013b06:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8013b0a:	4323      	orrs	r3, r4
 8013b0c:	4303      	orrs	r3, r0
 8013b0e:	608b      	str	r3, [r1, #8]
 8013b10:	7e13      	ldrb	r3, [r2, #24]
 8013b12:	2b01      	cmp	r3, #1
 8013b14:	688b      	ldr	r3, [r1, #8]
 8013b16:	bf0c      	ite	eq
 8013b18:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8013b1c:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8013b20:	608b      	str	r3, [r1, #8]
 8013b22:	7e53      	ldrb	r3, [r2, #25]
 8013b24:	2b01      	cmp	r3, #1
 8013b26:	688b      	ldr	r3, [r1, #8]
 8013b28:	bf0c      	ite	eq
 8013b2a:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8013b2e:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8013b32:	608b      	str	r3, [r1, #8]
 8013b34:	7e93      	ldrb	r3, [r2, #26]
 8013b36:	b923      	cbnz	r3, 8013b42 <dma_init+0x66>
 8013b38:	688b      	ldr	r3, [r1, #8]
 8013b3a:	f023 0310 	bic.w	r3, r3, #16
 8013b3e:	608b      	str	r3, [r1, #8]
 8013b40:	bd10      	pop	{r4, pc}
 8013b42:	688b      	ldr	r3, [r1, #8]
 8013b44:	f043 0310 	orr.w	r3, r3, #16
 8013b48:	e7f9      	b.n	8013b3e <dma_init+0x62>
 8013b4a:	bf00      	nop
 8013b4c:	40020400 	andmi	r0, r2, r0, lsl #8

08013b50 <dma_circulation_disable>:
 8013b50:	4b06      	ldr	r3, [pc, #24]	; (8013b6c <dma_circulation_disable+0x1c>)
 8013b52:	4298      	cmp	r0, r3
 8013b54:	d102      	bne.n	8013b5c <dma_circulation_disable+0xc>
 8013b56:	2904      	cmp	r1, #4
 8013b58:	d900      	bls.n	8013b5c <dma_circulation_disable+0xc>
 8013b5a:	e7fe      	b.n	8013b5a <dma_circulation_disable+0xa>
 8013b5c:	2314      	movs	r3, #20
 8013b5e:	4359      	muls	r1, r3
 8013b60:	3008      	adds	r0, #8
 8013b62:	580b      	ldr	r3, [r1, r0]
 8013b64:	f023 0320 	bic.w	r3, r3, #32
 8013b68:	500b      	str	r3, [r1, r0]
 8013b6a:	4770      	bx	lr
 8013b6c:	40020400 	andmi	r0, r2, r0, lsl #8

08013b70 <dma_memory_to_memory_disable>:
 8013b70:	4b06      	ldr	r3, [pc, #24]	; (8013b8c <dma_memory_to_memory_disable+0x1c>)
 8013b72:	4298      	cmp	r0, r3
 8013b74:	d102      	bne.n	8013b7c <dma_memory_to_memory_disable+0xc>
 8013b76:	2904      	cmp	r1, #4
 8013b78:	d900      	bls.n	8013b7c <dma_memory_to_memory_disable+0xc>
 8013b7a:	e7fe      	b.n	8013b7a <dma_memory_to_memory_disable+0xa>
 8013b7c:	2314      	movs	r3, #20
 8013b7e:	4359      	muls	r1, r3
 8013b80:	3008      	adds	r0, #8
 8013b82:	580b      	ldr	r3, [r1, r0]
 8013b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013b88:	500b      	str	r3, [r1, r0]
 8013b8a:	4770      	bx	lr
 8013b8c:	40020400 	andmi	r0, r2, r0, lsl #8

08013b90 <enet_delay>:
 8013b90:	2300      	movs	r3, #0
 8013b92:	b082      	sub	sp, #8
 8013b94:	9301      	str	r3, [sp, #4]
 8013b96:	9001      	str	r0, [sp, #4]
 8013b98:	9b01      	ldr	r3, [sp, #4]
 8013b9a:	b90b      	cbnz	r3, 8013ba0 <enet_delay+0x10>
 8013b9c:	b002      	add	sp, #8
 8013b9e:	4770      	bx	lr
 8013ba0:	9b01      	ldr	r3, [sp, #4]
 8013ba2:	3b01      	subs	r3, #1
 8013ba4:	9301      	str	r3, [sp, #4]
 8013ba6:	e7f7      	b.n	8013b98 <enet_delay+0x8>

08013ba8 <enet_software_reset>:
 8013ba8:	4b07      	ldr	r3, [pc, #28]	; (8013bc8 <enet_software_reset+0x20>)
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	f042 0201 	orr.w	r2, r2, #1
 8013bb0:	601a      	str	r2, [r3, #0]
 8013bb2:	4a06      	ldr	r2, [pc, #24]	; (8013bcc <enet_software_reset+0x24>)
 8013bb4:	6819      	ldr	r1, [r3, #0]
 8013bb6:	07c9      	lsls	r1, r1, #31
 8013bb8:	d501      	bpl.n	8013bbe <enet_software_reset+0x16>
 8013bba:	3a01      	subs	r2, #1
 8013bbc:	d1fa      	bne.n	8013bb4 <enet_software_reset+0xc>
 8013bbe:	6818      	ldr	r0, [r3, #0]
 8013bc0:	43c0      	mvns	r0, r0
 8013bc2:	f000 0001 	and.w	r0, r0, #1
 8013bc6:	4770      	bx	lr
 8013bc8:	40029000 	andmi	r9, r2, r0
 8013bcc:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08013bd0 <enet_descriptors_chain_init>:
 8013bd0:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 8013bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013bd6:	4a19      	ldr	r2, [pc, #100]	; (8013c3c <enet_descriptors_chain_init+0x6c>)
 8013bd8:	d125      	bne.n	8013c26 <enet_descriptors_chain_init+0x56>
 8013bda:	2500      	movs	r5, #0
 8013bdc:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8013be0:	2008      	movs	r0, #8
 8013be2:	4b17      	ldr	r3, [pc, #92]	; (8013c40 <enet_descriptors_chain_init+0x70>)
 8013be4:	4c17      	ldr	r4, [pc, #92]	; (8013c44 <enet_descriptors_chain_init+0x74>)
 8013be6:	6113      	str	r3, [r2, #16]
 8013be8:	4a17      	ldr	r2, [pc, #92]	; (8013c48 <enet_descriptors_chain_init+0x78>)
 8013bea:	6013      	str	r3, [r2, #0]
 8013bec:	2200      	movs	r2, #0
 8013bee:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 8013bf2:	4916      	ldr	r1, [pc, #88]	; (8013c4c <enet_descriptors_chain_init+0x7c>)
 8013bf4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8013bf8:	600a      	str	r2, [r1, #0]
 8013bfa:	4915      	ldr	r1, [pc, #84]	; (8013c50 <enet_descriptors_chain_init+0x80>)
 8013bfc:	600a      	str	r2, [r1, #0]
 8013bfe:	f103 0110 	add.w	r1, r3, #16
 8013c02:	fb0e 4702 	mla	r7, lr, r2, r4
 8013c06:	f841 7c08 	str.w	r7, [r1, #-8]
 8013c0a:	4594      	cmp	ip, r2
 8013c0c:	bf94      	ite	ls
 8013c0e:	461f      	movls	r7, r3
 8013c10:	460f      	movhi	r7, r1
 8013c12:	3201      	adds	r2, #1
 8013c14:	4290      	cmp	r0, r2
 8013c16:	e941 6504 	strd	r6, r5, [r1, #-16]
 8013c1a:	f841 7c04 	str.w	r7, [r1, #-4]
 8013c1e:	f101 0110 	add.w	r1, r1, #16
 8013c22:	d1ee      	bne.n	8013c02 <enet_descriptors_chain_init+0x32>
 8013c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c26:	4b0b      	ldr	r3, [pc, #44]	; (8013c54 <enet_descriptors_chain_init+0x84>)
 8013c28:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8013c2c:	60d3      	str	r3, [r2, #12]
 8013c2e:	4a0a      	ldr	r2, [pc, #40]	; (8013c58 <enet_descriptors_chain_init+0x88>)
 8013c30:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013c34:	2010      	movs	r0, #16
 8013c36:	4c09      	ldr	r4, [pc, #36]	; (8013c5c <enet_descriptors_chain_init+0x8c>)
 8013c38:	6013      	str	r3, [r2, #0]
 8013c3a:	e7d7      	b.n	8013bec <enet_descriptors_chain_init+0x1c>
 8013c3c:	40029000 	andmi	r9, r2, r0
 8013c40:	20013214 	andcs	r3, r1, r4, lsl r2
 8013c44:	20010274 	andcs	r0, r1, r4, ror r2
 8013c48:	2000a1f4 	strdcs	sl, [r0], -r4
 8013c4c:	2000a1e8 	andcs	sl, r0, r8, ror #3
 8013c50:	2000a1ec 	andcs	sl, r0, ip, ror #3
 8013c54:	20010174 	andcs	r0, r1, r4, ror r1
 8013c58:	2000a1f0 	strdcs	sl, [r0], -r0
 8013c5c:	2000a234 	andcs	sl, r0, r4, lsr r2

08013c60 <enet_frame_receive>:
 8013c60:	4a1d      	ldr	r2, [pc, #116]	; (8013cd8 <enet_frame_receive+0x78>)
 8013c62:	b510      	push	{r4, lr}
 8013c64:	6813      	ldr	r3, [r2, #0]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	db33      	blt.n	8013cd4 <enet_frame_receive+0x74>
 8013c6c:	b970      	cbnz	r0, 8013c8c <enet_frame_receive+0x2c>
 8013c6e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8013c72:	6813      	ldr	r3, [r2, #0]
 8013c74:	6019      	str	r1, [r3, #0]
 8013c76:	4919      	ldr	r1, [pc, #100]	; (8013cdc <enet_frame_receive+0x7c>)
 8013c78:	6948      	ldr	r0, [r1, #20]
 8013c7a:	0604      	lsls	r4, r0, #24
 8013c7c:	d419      	bmi.n	8013cb2 <enet_frame_receive+0x52>
 8013c7e:	6859      	ldr	r1, [r3, #4]
 8013c80:	0448      	lsls	r0, r1, #17
 8013c82:	d51b      	bpl.n	8013cbc <enet_frame_receive+0x5c>
 8013c84:	68db      	ldr	r3, [r3, #12]
 8013c86:	2001      	movs	r0, #1
 8013c88:	6013      	str	r3, [r2, #0]
 8013c8a:	bd10      	pop	{r4, pc}
 8013c8c:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 8013c90:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8013c94:	d11e      	bne.n	8013cd4 <enet_frame_receive+0x74>
 8013c96:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8013c9a:	3b04      	subs	r3, #4
 8013c9c:	428b      	cmp	r3, r1
 8013c9e:	d819      	bhi.n	8013cd4 <enet_frame_receive+0x74>
 8013ca0:	2100      	movs	r1, #0
 8013ca2:	4299      	cmp	r1, r3
 8013ca4:	6814      	ldr	r4, [r2, #0]
 8013ca6:	d2e2      	bcs.n	8013c6e <enet_frame_receive+0xe>
 8013ca8:	68a4      	ldr	r4, [r4, #8]
 8013caa:	5d0c      	ldrb	r4, [r1, r4]
 8013cac:	5444      	strb	r4, [r0, r1]
 8013cae:	3101      	adds	r1, #1
 8013cb0:	e7f7      	b.n	8013ca2 <enet_frame_receive+0x42>
 8013cb2:	2080      	movs	r0, #128	; 0x80
 8013cb4:	6148      	str	r0, [r1, #20]
 8013cb6:	2000      	movs	r0, #0
 8013cb8:	6088      	str	r0, [r1, #8]
 8013cba:	e7e0      	b.n	8013c7e <enet_frame_receive+0x1e>
 8013cbc:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8013cc0:	4906      	ldr	r1, [pc, #24]	; (8013cdc <enet_frame_receive+0x7c>)
 8013cc2:	bf05      	ittet	eq
 8013cc4:	3310      	addeq	r3, #16
 8013cc6:	6809      	ldreq	r1, [r1, #0]
 8013cc8:	68cb      	ldrne	r3, [r1, #12]
 8013cca:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8013cce:	bf08      	it	eq
 8013cd0:	185b      	addeq	r3, r3, r1
 8013cd2:	e7d8      	b.n	8013c86 <enet_frame_receive+0x26>
 8013cd4:	2000      	movs	r0, #0
 8013cd6:	e7d8      	b.n	8013c8a <enet_frame_receive+0x2a>
 8013cd8:	2000a1f0 	strdcs	sl, [r0], -r0
 8013cdc:	40029000 	andmi	r9, r2, r0

08013ce0 <enet_frame_transmit>:
 8013ce0:	4a1e      	ldr	r2, [pc, #120]	; (8013d5c <enet_frame_transmit+0x7c>)
 8013ce2:	b530      	push	{r4, r5, lr}
 8013ce4:	6813      	ldr	r3, [r2, #0]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	db34      	blt.n	8013d56 <enet_frame_transmit+0x76>
 8013cec:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8013cf0:	4299      	cmp	r1, r3
 8013cf2:	d830      	bhi.n	8013d56 <enet_frame_transmit+0x76>
 8013cf4:	b9e8      	cbnz	r0, 8013d32 <enet_frame_transmit+0x52>
 8013cf6:	6813      	ldr	r3, [r2, #0]
 8013cf8:	4819      	ldr	r0, [pc, #100]	; (8013d60 <enet_frame_transmit+0x80>)
 8013cfa:	6059      	str	r1, [r3, #4]
 8013cfc:	6819      	ldr	r1, [r3, #0]
 8013cfe:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 8013d02:	6019      	str	r1, [r3, #0]
 8013d04:	6941      	ldr	r1, [r0, #20]
 8013d06:	6944      	ldr	r4, [r0, #20]
 8013d08:	f001 0104 	and.w	r1, r1, #4
 8013d0c:	f004 0420 	and.w	r4, r4, #32
 8013d10:	4321      	orrs	r1, r4
 8013d12:	d110      	bne.n	8013d36 <enet_frame_transmit+0x56>
 8013d14:	6819      	ldr	r1, [r3, #0]
 8013d16:	02c8      	lsls	r0, r1, #11
 8013d18:	d511      	bpl.n	8013d3e <enet_frame_transmit+0x5e>
 8013d1a:	68db      	ldr	r3, [r3, #12]
 8013d1c:	2001      	movs	r0, #1
 8013d1e:	6013      	str	r3, [r2, #0]
 8013d20:	bd30      	pop	{r4, r5, pc}
 8013d22:	5cc5      	ldrb	r5, [r0, r3]
 8013d24:	68a4      	ldr	r4, [r4, #8]
 8013d26:	551d      	strb	r5, [r3, r4]
 8013d28:	3301      	adds	r3, #1
 8013d2a:	428b      	cmp	r3, r1
 8013d2c:	6814      	ldr	r4, [r2, #0]
 8013d2e:	d1f8      	bne.n	8013d22 <enet_frame_transmit+0x42>
 8013d30:	e7e1      	b.n	8013cf6 <enet_frame_transmit+0x16>
 8013d32:	2300      	movs	r3, #0
 8013d34:	e7f9      	b.n	8013d2a <enet_frame_transmit+0x4a>
 8013d36:	6141      	str	r1, [r0, #20]
 8013d38:	2100      	movs	r1, #0
 8013d3a:	6041      	str	r1, [r0, #4]
 8013d3c:	e7ea      	b.n	8013d14 <enet_frame_transmit+0x34>
 8013d3e:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8013d42:	4907      	ldr	r1, [pc, #28]	; (8013d60 <enet_frame_transmit+0x80>)
 8013d44:	bf05      	ittet	eq
 8013d46:	3310      	addeq	r3, #16
 8013d48:	6809      	ldreq	r1, [r1, #0]
 8013d4a:	690b      	ldrne	r3, [r1, #16]
 8013d4c:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8013d50:	bf08      	it	eq
 8013d52:	185b      	addeq	r3, r3, r1
 8013d54:	e7e2      	b.n	8013d1c <enet_frame_transmit+0x3c>
 8013d56:	2000      	movs	r0, #0
 8013d58:	e7e2      	b.n	8013d20 <enet_frame_transmit+0x40>
 8013d5a:	bf00      	nop
 8013d5c:	2000a1f4 	strdcs	sl, [r0], -r4
 8013d60:	40029000 	andmi	r9, r2, r0

08013d64 <enet_transmit_checksum_config>:
 8013d64:	6803      	ldr	r3, [r0, #0]
 8013d66:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8013d6a:	430b      	orrs	r3, r1
 8013d6c:	6003      	str	r3, [r0, #0]
 8013d6e:	4770      	bx	lr

08013d70 <enet_mac_address_set>:
 8013d70:	888a      	ldrh	r2, [r1, #4]
 8013d72:	4b03      	ldr	r3, [pc, #12]	; (8013d80 <enet_mac_address_set+0x10>)
 8013d74:	50c2      	str	r2, [r0, r3]
 8013d76:	680a      	ldr	r2, [r1, #0]
 8013d78:	3304      	adds	r3, #4
 8013d7a:	50c2      	str	r2, [r0, r3]
 8013d7c:	4770      	bx	lr
 8013d7e:	bf00      	nop
 8013d80:	40028040 	andmi	r8, r2, r0, asr #32

08013d84 <enet_rx_enable>:
 8013d84:	4a05      	ldr	r2, [pc, #20]	; (8013d9c <enet_rx_enable+0x18>)
 8013d86:	6813      	ldr	r3, [r2, #0]
 8013d88:	f043 0304 	orr.w	r3, r3, #4
 8013d8c:	6013      	str	r3, [r2, #0]
 8013d8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8013d92:	6993      	ldr	r3, [r2, #24]
 8013d94:	f043 0302 	orr.w	r3, r3, #2
 8013d98:	6193      	str	r3, [r2, #24]
 8013d9a:	4770      	bx	lr
 8013d9c:	40028000 	andmi	r8, r2, r0

08013da0 <enet_phy_write_read>:
 8013da0:	b530      	push	{r4, r5, lr}
 8013da2:	4604      	mov	r4, r0
 8013da4:	4d13      	ldr	r5, [pc, #76]	; (8013df4 <enet_phy_write_read+0x54>)
 8013da6:	0192      	lsls	r2, r2, #6
 8013da8:	6928      	ldr	r0, [r5, #16]
 8013daa:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 8013dae:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 8013db2:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 8013db6:	4302      	orrs	r2, r0
 8013db8:	02c9      	lsls	r1, r1, #11
 8013dba:	b289      	uxth	r1, r1
 8013dbc:	2c02      	cmp	r4, #2
 8013dbe:	ea42 0204 	orr.w	r2, r2, r4
 8013dc2:	ea42 0201 	orr.w	r2, r2, r1
 8013dc6:	bf08      	it	eq
 8013dc8:	8819      	ldrheq	r1, [r3, #0]
 8013dca:	f042 0201 	orr.w	r2, r2, #1
 8013dce:	bf08      	it	eq
 8013dd0:	6169      	streq	r1, [r5, #20]
 8013dd2:	612a      	str	r2, [r5, #16]
 8013dd4:	4907      	ldr	r1, [pc, #28]	; (8013df4 <enet_phy_write_read+0x54>)
 8013dd6:	4a08      	ldr	r2, [pc, #32]	; (8013df8 <enet_phy_write_read+0x58>)
 8013dd8:	6908      	ldr	r0, [r1, #16]
 8013dda:	07c0      	lsls	r0, r0, #31
 8013ddc:	d501      	bpl.n	8013de2 <enet_phy_write_read+0x42>
 8013dde:	3a01      	subs	r2, #1
 8013de0:	d1fa      	bne.n	8013dd8 <enet_phy_write_read+0x38>
 8013de2:	690a      	ldr	r2, [r1, #16]
 8013de4:	43d2      	mvns	r2, r2
 8013de6:	f002 0001 	and.w	r0, r2, #1
 8013dea:	b90c      	cbnz	r4, 8013df0 <enet_phy_write_read+0x50>
 8013dec:	694a      	ldr	r2, [r1, #20]
 8013dee:	801a      	strh	r2, [r3, #0]
 8013df0:	bd30      	pop	{r4, r5, pc}
 8013df2:	bf00      	nop
 8013df4:	40028000 	andmi	r8, r2, r0
 8013df8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08013dfc <enet_phy_config>:
 8013dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013dfe:	4d22      	ldr	r5, [pc, #136]	; (8013e88 <enet_phy_config+0x8c>)
 8013e00:	2001      	movs	r0, #1
 8013e02:	692c      	ldr	r4, [r5, #16]
 8013e04:	f000 fc66 	bl	80146d4 <rcu_clock_freq_get>
 8013e08:	4b20      	ldr	r3, [pc, #128]	; (8013e8c <enet_phy_config+0x90>)
 8013e0a:	4a21      	ldr	r2, [pc, #132]	; (8013e90 <enet_phy_config+0x94>)
 8013e0c:	4403      	add	r3, r0
 8013e0e:	4293      	cmp	r3, r2
 8013e10:	f024 041c 	bic.w	r4, r4, #28
 8013e14:	d21f      	bcs.n	8013e56 <enet_phy_config+0x5a>
 8013e16:	f044 0408 	orr.w	r4, r4, #8
 8013e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013e1e:	612c      	str	r4, [r5, #16]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013e26:	2101      	movs	r1, #1
 8013e28:	2002      	movs	r0, #2
 8013e2a:	f10d 0306 	add.w	r3, sp, #6
 8013e2e:	f7ff ffb7 	bl	8013da0 <enet_phy_write_read>
 8013e32:	b310      	cbz	r0, 8013e7a <enet_phy_config+0x7e>
 8013e34:	2200      	movs	r2, #0
 8013e36:	4817      	ldr	r0, [pc, #92]	; (8013e94 <enet_phy_config+0x98>)
 8013e38:	f7ff feaa 	bl	8013b90 <enet_delay>
 8013e3c:	2101      	movs	r1, #1
 8013e3e:	4610      	mov	r0, r2
 8013e40:	f10d 0306 	add.w	r3, sp, #6
 8013e44:	f7ff ffac 	bl	8013da0 <enet_phy_write_read>
 8013e48:	b1b8      	cbz	r0, 8013e7a <enet_phy_config+0x7e>
 8013e4a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013e4e:	43c0      	mvns	r0, r0
 8013e50:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8013e54:	e012      	b.n	8013e7c <enet_phy_config+0x80>
 8013e56:	4b10      	ldr	r3, [pc, #64]	; (8013e98 <enet_phy_config+0x9c>)
 8013e58:	4a10      	ldr	r2, [pc, #64]	; (8013e9c <enet_phy_config+0xa0>)
 8013e5a:	4403      	add	r3, r0
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	d802      	bhi.n	8013e66 <enet_phy_config+0x6a>
 8013e60:	f044 040c 	orr.w	r4, r4, #12
 8013e64:	e7d9      	b.n	8013e1a <enet_phy_config+0x1e>
 8013e66:	4b0e      	ldr	r3, [pc, #56]	; (8013ea0 <enet_phy_config+0xa4>)
 8013e68:	4a0e      	ldr	r2, [pc, #56]	; (8013ea4 <enet_phy_config+0xa8>)
 8013e6a:	4403      	add	r3, r0
 8013e6c:	4293      	cmp	r3, r2
 8013e6e:	d9d4      	bls.n	8013e1a <enet_phy_config+0x1e>
 8013e70:	4b0d      	ldr	r3, [pc, #52]	; (8013ea8 <enet_phy_config+0xac>)
 8013e72:	4a0e      	ldr	r2, [pc, #56]	; (8013eac <enet_phy_config+0xb0>)
 8013e74:	4403      	add	r3, r0
 8013e76:	4293      	cmp	r3, r2
 8013e78:	d902      	bls.n	8013e80 <enet_phy_config+0x84>
 8013e7a:	2000      	movs	r0, #0
 8013e7c:	b003      	add	sp, #12
 8013e7e:	bd30      	pop	{r4, r5, pc}
 8013e80:	f044 0404 	orr.w	r4, r4, #4
 8013e84:	e7c9      	b.n	8013e1a <enet_phy_config+0x1e>
 8013e86:	bf00      	nop
 8013e88:	40028000 	andmi	r8, r2, r0
 8013e8c:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8013e90:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8013e94:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8013e98:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8013e9c:	017d783f 	cmneq	sp, pc, lsr r8
 8013ea0:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8013ea4:	01c9c37f 	biceq	ip, r9, pc, ror r3
 8013ea8:	faa2b580 	blx	68c14b0 <__stack_size+0x68bf4b0>
 8013eac:	0112a880 	tsteq	r2, r0, lsl #17

08013eb0 <enet_init>:
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013eb4:	4604      	mov	r4, r0
 8013eb6:	460d      	mov	r5, r1
 8013eb8:	4616      	mov	r6, r2
 8013eba:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013ebe:	f7ff ff9d 	bl	8013dfc <enet_phy_config>
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	d037      	beq.n	8013f36 <enet_init+0x86>
 8013ec6:	4b3b      	ldr	r3, [pc, #236]	; (8013fb4 <enet_init+0x104>)
 8013ec8:	4a3b      	ldr	r2, [pc, #236]	; (8013fb8 <enet_init+0x108>)
 8013eca:	6819      	ldr	r1, [r3, #0]
 8013ecc:	2c01      	cmp	r4, #1
 8013ece:	ea02 0201 	and.w	r2, r2, r1
 8013ed2:	601a      	str	r2, [r3, #0]
 8013ed4:	f04f 0200 	mov.w	r2, #0
 8013ed8:	605a      	str	r2, [r3, #4]
 8013eda:	609a      	str	r2, [r3, #8]
 8013edc:	60da      	str	r2, [r3, #12]
 8013ede:	6999      	ldr	r1, [r3, #24]
 8013ee0:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8013ee4:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8013ee8:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8013eec:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8013ef0:	6199      	str	r1, [r3, #24]
 8013ef2:	4932      	ldr	r1, [pc, #200]	; (8013fbc <enet_init+0x10c>)
 8013ef4:	61da      	str	r2, [r3, #28]
 8013ef6:	6988      	ldr	r0, [r1, #24]
 8013ef8:	4b31      	ldr	r3, [pc, #196]	; (8013fc0 <enet_init+0x110>)
 8013efa:	ea03 0300 	and.w	r3, r3, r0
 8013efe:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8013f02:	618b      	str	r3, [r1, #24]
 8013f04:	680b      	ldr	r3, [r1, #0]
 8013f06:	4b2f      	ldr	r3, [pc, #188]	; (8013fc4 <enet_init+0x114>)
 8013f08:	600b      	str	r3, [r1, #0]
 8013f0a:	d01e      	beq.n	8013f4a <enet_init+0x9a>
 8013f0c:	08e3      	lsrs	r3, r4, #3
 8013f0e:	0861      	lsrs	r1, r4, #1
 8013f10:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8013f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f18:	430b      	orrs	r3, r1
 8013f1a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013f1e:	2101      	movs	r1, #1
 8013f20:	2002      	movs	r0, #2
 8013f22:	f10d 0306 	add.w	r3, sp, #6
 8013f26:	f7ff ff3b 	bl	8013da0 <enet_phy_write_read>
 8013f2a:	b158      	cbz	r0, 8013f44 <enet_init+0x94>
 8013f2c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013f30:	f7ff fe2e 	bl	8013b90 <enet_delay>
 8013f34:	e05d      	b.n	8013ff2 <enet_init+0x142>
 8013f36:	4824      	ldr	r0, [pc, #144]	; (8013fc8 <enet_init+0x118>)
 8013f38:	f7ff fe2a 	bl	8013b90 <enet_delay>
 8013f3c:	f7ff ff5e 	bl	8013dfc <enet_phy_config>
 8013f40:	2800      	cmp	r0, #0
 8013f42:	d1c0      	bne.n	8013ec6 <enet_init+0x16>
 8013f44:	2000      	movs	r0, #0
 8013f46:	b003      	add	sp, #12
 8013f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f4a:	4614      	mov	r4, r2
 8013f4c:	4f1f      	ldr	r7, [pc, #124]	; (8013fcc <enet_init+0x11c>)
 8013f4e:	2201      	movs	r2, #1
 8013f50:	2000      	movs	r0, #0
 8013f52:	4611      	mov	r1, r2
 8013f54:	f10d 0306 	add.w	r3, sp, #6
 8013f58:	f7ff ff22 	bl	8013da0 <enet_phy_write_read>
 8013f5c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013f60:	3401      	adds	r4, #1
 8013f62:	f002 0204 	and.w	r2, r2, #4
 8013f66:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013f6a:	b912      	cbnz	r2, 8013f72 <enet_init+0xc2>
 8013f6c:	42bc      	cmp	r4, r7
 8013f6e:	d1ee      	bne.n	8013f4e <enet_init+0x9e>
 8013f70:	e7e8      	b.n	8013f44 <enet_init+0x94>
 8013f72:	42bc      	cmp	r4, r7
 8013f74:	d0e6      	beq.n	8013f44 <enet_init+0x94>
 8013f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013f7a:	2101      	movs	r1, #1
 8013f7c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013f80:	2002      	movs	r0, #2
 8013f82:	2200      	movs	r2, #0
 8013f84:	f7ff ff0c 	bl	8013da0 <enet_phy_write_read>
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	d0db      	beq.n	8013f44 <enet_init+0x94>
 8013f8c:	2400      	movs	r4, #0
 8013f8e:	4f0f      	ldr	r7, [pc, #60]	; (8013fcc <enet_init+0x11c>)
 8013f90:	2201      	movs	r2, #1
 8013f92:	2000      	movs	r0, #0
 8013f94:	4611      	mov	r1, r2
 8013f96:	f10d 0306 	add.w	r3, sp, #6
 8013f9a:	f7ff ff01 	bl	8013da0 <enet_phy_write_read>
 8013f9e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013fa2:	3401      	adds	r4, #1
 8013fa4:	f002 0220 	and.w	r2, r2, #32
 8013fa8:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013fac:	b982      	cbnz	r2, 8013fd0 <enet_init+0x120>
 8013fae:	42bc      	cmp	r4, r7
 8013fb0:	d1ee      	bne.n	8013f90 <enet_init+0xe0>
 8013fb2:	e7c7      	b.n	8013f44 <enet_init+0x94>
 8013fb4:	40028000 	andmi	r8, r2, r0
 8013fb8:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8013fbc:	40029000 	andmi	r9, r2, r0
 8013fc0:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8013fc4:	02c16000 	sbceq	r6, r1, #0
 8013fc8:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8013fcc:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8013fd0:	42bc      	cmp	r4, r7
 8013fd2:	d0b7      	beq.n	8013f44 <enet_init+0x94>
 8013fd4:	2101      	movs	r1, #1
 8013fd6:	2210      	movs	r2, #16
 8013fd8:	2000      	movs	r0, #0
 8013fda:	f7ff fee1 	bl	8013da0 <enet_phy_write_read>
 8013fde:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013fe2:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8013fe6:	0799      	lsls	r1, r3, #30
 8013fe8:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8013fec:	d401      	bmi.n	8013ff2 <enet_init+0x142>
 8013fee:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8013ff2:	4b63      	ldr	r3, [pc, #396]	; (8014180 <enet_init+0x2d0>)
 8013ff4:	681a      	ldr	r2, [r3, #0]
 8013ff6:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 8013ffa:	4314      	orrs	r4, r2
 8013ffc:	056a      	lsls	r2, r5, #21
 8013ffe:	601c      	str	r4, [r3, #0]
 8014000:	d50b      	bpl.n	801401a <enet_init+0x16a>
 8014002:	681a      	ldr	r2, [r3, #0]
 8014004:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8014008:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801400c:	601a      	str	r2, [r3, #0]
 801400e:	4a5d      	ldr	r2, [pc, #372]	; (8014184 <enet_init+0x2d4>)
 8014010:	6993      	ldr	r3, [r2, #24]
 8014012:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014016:	431d      	orrs	r5, r3
 8014018:	6195      	str	r5, [r2, #24]
 801401a:	4959      	ldr	r1, [pc, #356]	; (8014180 <enet_init+0x2d0>)
 801401c:	684b      	ldr	r3, [r1, #4]
 801401e:	431e      	orrs	r6, r3
 8014020:	4b59      	ldr	r3, [pc, #356]	; (8014188 <enet_init+0x2d8>)
 8014022:	604e      	str	r6, [r1, #4]
 8014024:	681a      	ldr	r2, [r3, #0]
 8014026:	07d7      	lsls	r7, r2, #31
 8014028:	d510      	bpl.n	801404c <enet_init+0x19c>
 801402a:	685a      	ldr	r2, [r3, #4]
 801402c:	680c      	ldr	r4, [r1, #0]
 801402e:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8014032:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8014036:	4320      	orrs	r0, r4
 8014038:	6008      	str	r0, [r1, #0]
 801403a:	4852      	ldr	r0, [pc, #328]	; (8014184 <enet_init+0x2d4>)
 801403c:	0892      	lsrs	r2, r2, #2
 801403e:	6981      	ldr	r1, [r0, #24]
 8014040:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8014044:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8014048:	430a      	orrs	r2, r1
 801404a:	6182      	str	r2, [r0, #24]
 801404c:	681a      	ldr	r2, [r3, #0]
 801404e:	0796      	lsls	r6, r2, #30
 8014050:	d508      	bpl.n	8014064 <enet_init+0x1b4>
 8014052:	494c      	ldr	r1, [pc, #304]	; (8014184 <enet_init+0x2d4>)
 8014054:	6898      	ldr	r0, [r3, #8]
 8014056:	680a      	ldr	r2, [r1, #0]
 8014058:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 801405c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014060:	4302      	orrs	r2, r0
 8014062:	600a      	str	r2, [r1, #0]
 8014064:	681a      	ldr	r2, [r3, #0]
 8014066:	0755      	lsls	r5, r2, #29
 8014068:	d508      	bpl.n	801407c <enet_init+0x1cc>
 801406a:	4946      	ldr	r1, [pc, #280]	; (8014184 <enet_init+0x2d4>)
 801406c:	68d8      	ldr	r0, [r3, #12]
 801406e:	680a      	ldr	r2, [r1, #0]
 8014070:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8014074:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8014078:	4302      	orrs	r2, r0
 801407a:	600a      	str	r2, [r1, #0]
 801407c:	681a      	ldr	r2, [r3, #0]
 801407e:	0714      	lsls	r4, r2, #28
 8014080:	d508      	bpl.n	8014094 <enet_init+0x1e4>
 8014082:	4940      	ldr	r1, [pc, #256]	; (8014184 <enet_init+0x2d4>)
 8014084:	6918      	ldr	r0, [r3, #16]
 8014086:	680a      	ldr	r2, [r1, #0]
 8014088:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801408c:	f022 0202 	bic.w	r2, r2, #2
 8014090:	4302      	orrs	r2, r0
 8014092:	600a      	str	r2, [r1, #0]
 8014094:	681a      	ldr	r2, [r3, #0]
 8014096:	06d0      	lsls	r0, r2, #27
 8014098:	d506      	bpl.n	80140a8 <enet_init+0x1f8>
 801409a:	493a      	ldr	r1, [pc, #232]	; (8014184 <enet_init+0x2d4>)
 801409c:	4a3b      	ldr	r2, [pc, #236]	; (801418c <enet_init+0x2dc>)
 801409e:	6988      	ldr	r0, [r1, #24]
 80140a0:	4002      	ands	r2, r0
 80140a2:	6958      	ldr	r0, [r3, #20]
 80140a4:	4302      	orrs	r2, r0
 80140a6:	618a      	str	r2, [r1, #24]
 80140a8:	681a      	ldr	r2, [r3, #0]
 80140aa:	0691      	lsls	r1, r2, #26
 80140ac:	d508      	bpl.n	80140c0 <enet_init+0x210>
 80140ae:	4935      	ldr	r1, [pc, #212]	; (8014184 <enet_init+0x2d4>)
 80140b0:	6998      	ldr	r0, [r3, #24]
 80140b2:	698a      	ldr	r2, [r1, #24]
 80140b4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80140b8:	f022 0204 	bic.w	r2, r2, #4
 80140bc:	4302      	orrs	r2, r0
 80140be:	618a      	str	r2, [r1, #24]
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	0652      	lsls	r2, r2, #25
 80140c4:	d506      	bpl.n	80140d4 <enet_init+0x224>
 80140c6:	492e      	ldr	r1, [pc, #184]	; (8014180 <enet_init+0x2d0>)
 80140c8:	69d8      	ldr	r0, [r3, #28]
 80140ca:	69ca      	ldr	r2, [r1, #28]
 80140cc:	0c52      	lsrs	r2, r2, #17
 80140ce:	0452      	lsls	r2, r2, #17
 80140d0:	4302      	orrs	r2, r0
 80140d2:	61ca      	str	r2, [r1, #28]
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	0617      	lsls	r7, r2, #24
 80140d8:	d517      	bpl.n	801410a <enet_init+0x25a>
 80140da:	4c29      	ldr	r4, [pc, #164]	; (8014180 <enet_init+0x2d0>)
 80140dc:	6a1a      	ldr	r2, [r3, #32]
 80140de:	69a0      	ldr	r0, [r4, #24]
 80140e0:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 80140e4:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 80140e8:	0400      	lsls	r0, r0, #16
 80140ea:	0c00      	lsrs	r0, r0, #16
 80140ec:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 80140f0:	4301      	orrs	r1, r0
 80140f2:	4824      	ldr	r0, [pc, #144]	; (8014184 <enet_init+0x2d4>)
 80140f4:	61a1      	str	r1, [r4, #24]
 80140f6:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80140fa:	0a12      	lsrs	r2, r2, #8
 80140fc:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8014100:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8014104:	430a      	orrs	r2, r1
 8014106:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 801410a:	681a      	ldr	r2, [r3, #0]
 801410c:	05d6      	lsls	r6, r2, #23
 801410e:	bf42      	ittt	mi
 8014110:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8014112:	4a1b      	ldrmi	r2, [pc, #108]	; (8014180 <enet_init+0x2d0>)
 8014114:	6091      	strmi	r1, [r2, #8]
 8014116:	681a      	ldr	r2, [r3, #0]
 8014118:	0595      	lsls	r5, r2, #22
 801411a:	bf42      	ittt	mi
 801411c:	4a18      	ldrmi	r2, [pc, #96]	; (8014180 <enet_init+0x2d0>)
 801411e:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8014120:	60d1      	strmi	r1, [r2, #12]
 8014122:	681a      	ldr	r2, [r3, #0]
 8014124:	0554      	lsls	r4, r2, #21
 8014126:	d508      	bpl.n	801413a <enet_init+0x28a>
 8014128:	4915      	ldr	r1, [pc, #84]	; (8014180 <enet_init+0x2d0>)
 801412a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801412c:	684a      	ldr	r2, [r1, #4]
 801412e:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8014132:	f022 0206 	bic.w	r2, r2, #6
 8014136:	4302      	orrs	r2, r0
 8014138:	604a      	str	r2, [r1, #4]
 801413a:	681a      	ldr	r2, [r3, #0]
 801413c:	0510      	lsls	r0, r2, #20
 801413e:	d508      	bpl.n	8014152 <enet_init+0x2a2>
 8014140:	490f      	ldr	r1, [pc, #60]	; (8014180 <enet_init+0x2d0>)
 8014142:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014144:	680a      	ldr	r2, [r1, #0]
 8014146:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 801414a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801414e:	4302      	orrs	r2, r0
 8014150:	600a      	str	r2, [r1, #0]
 8014152:	681a      	ldr	r2, [r3, #0]
 8014154:	04d1      	lsls	r1, r2, #19
 8014156:	d506      	bpl.n	8014166 <enet_init+0x2b6>
 8014158:	4909      	ldr	r1, [pc, #36]	; (8014180 <enet_init+0x2d0>)
 801415a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801415c:	680a      	ldr	r2, [r1, #0]
 801415e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8014162:	4302      	orrs	r2, r0
 8014164:	600a      	str	r2, [r1, #0]
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	0492      	lsls	r2, r2, #18
 801416a:	d506      	bpl.n	801417a <enet_init+0x2ca>
 801416c:	4904      	ldr	r1, [pc, #16]	; (8014180 <enet_init+0x2d0>)
 801416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014170:	680a      	ldr	r2, [r1, #0]
 8014172:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8014176:	4313      	orrs	r3, r2
 8014178:	600b      	str	r3, [r1, #0]
 801417a:	2001      	movs	r0, #1
 801417c:	e6e3      	b.n	8013f46 <enet_init+0x96>
 801417e:	bf00      	nop
 8014180:	40028000 	andmi	r8, r2, r0
 8014184:	40029000 	andmi	r9, r2, r0
 8014188:	2000a1f8 	strdcs	sl, [r0], -r8
 801418c:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08014190 <enet_txfifo_flush>:
 8014190:	4b06      	ldr	r3, [pc, #24]	; (80141ac <enet_txfifo_flush+0x1c>)
 8014192:	4807      	ldr	r0, [pc, #28]	; (80141b0 <enet_txfifo_flush+0x20>)
 8014194:	699a      	ldr	r2, [r3, #24]
 8014196:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801419a:	619a      	str	r2, [r3, #24]
 801419c:	699a      	ldr	r2, [r3, #24]
 801419e:	02d2      	lsls	r2, r2, #11
 80141a0:	d502      	bpl.n	80141a8 <enet_txfifo_flush+0x18>
 80141a2:	3801      	subs	r0, #1
 80141a4:	d1fa      	bne.n	801419c <enet_txfifo_flush+0xc>
 80141a6:	4770      	bx	lr
 80141a8:	2001      	movs	r0, #1
 80141aa:	4770      	bx	lr
 80141ac:	40029000 	andmi	r9, r2, r0
 80141b0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080141b4 <enet_tx_enable>:
 80141b4:	4a06      	ldr	r2, [pc, #24]	; (80141d0 <enet_tx_enable+0x1c>)
 80141b6:	b508      	push	{r3, lr}
 80141b8:	6813      	ldr	r3, [r2, #0]
 80141ba:	f043 0308 	orr.w	r3, r3, #8
 80141be:	6013      	str	r3, [r2, #0]
 80141c0:	f7ff ffe6 	bl	8014190 <enet_txfifo_flush>
 80141c4:	4a03      	ldr	r2, [pc, #12]	; (80141d4 <enet_tx_enable+0x20>)
 80141c6:	6993      	ldr	r3, [r2, #24]
 80141c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80141cc:	6193      	str	r3, [r2, #24]
 80141ce:	bd08      	pop	{r3, pc}
 80141d0:	40028000 	andmi	r8, r2, r0
 80141d4:	40029000 	andmi	r9, r2, r0

080141d8 <enet_enable>:
 80141d8:	b508      	push	{r3, lr}
 80141da:	f7ff ffeb 	bl	80141b4 <enet_tx_enable>
 80141de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80141e2:	f7ff bdcf 	b.w	8013d84 <enet_rx_enable>

080141e6 <enet_desc_information_get>:
 80141e6:	2905      	cmp	r1, #5
 80141e8:	d817      	bhi.n	801421a <enet_desc_information_get+0x34>
 80141ea:	e8df f001 	tbb	[pc, r1]
 80141ee:	03091012 	movweq	r1, #36882	; 0x9012
 80141f2:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 80141f6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80141fa:	4770      	bx	lr
 80141fc:	88c0      	ldrh	r0, [r0, #6]
 80141fe:	e7fa      	b.n	80141f6 <enet_desc_information_get+0x10>
 8014200:	8840      	ldrh	r0, [r0, #2]
 8014202:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8014206:	2804      	cmp	r0, #4
 8014208:	d90a      	bls.n	8014220 <enet_desc_information_get+0x3a>
 801420a:	3804      	subs	r0, #4
 801420c:	4770      	bx	lr
 801420e:	6880      	ldr	r0, [r0, #8]
 8014210:	4770      	bx	lr
 8014212:	6800      	ldr	r0, [r0, #0]
 8014214:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8014218:	4770      	bx	lr
 801421a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801421e:	4770      	bx	lr
 8014220:	2000      	movs	r0, #0
 8014222:	4770      	bx	lr

08014224 <enet_rxframe_drop>:
 8014224:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014228:	4814      	ldr	r0, [pc, #80]	; (801427c <enet_rxframe_drop+0x58>)
 801422a:	b510      	push	{r4, lr}
 801422c:	6802      	ldr	r2, [r0, #0]
 801422e:	4914      	ldr	r1, [pc, #80]	; (8014280 <enet_rxframe_drop+0x5c>)
 8014230:	6854      	ldr	r4, [r2, #4]
 8014232:	6013      	str	r3, [r2, #0]
 8014234:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8014238:	680b      	ldr	r3, [r1, #0]
 801423a:	d009      	beq.n	8014250 <enet_rxframe_drop+0x2c>
 801423c:	b12b      	cbz	r3, 801424a <enet_rxframe_drop+0x26>
 801423e:	68da      	ldr	r2, [r3, #12]
 8014240:	6002      	str	r2, [r0, #0]
 8014242:	681a      	ldr	r2, [r3, #0]
 8014244:	b1ba      	cbz	r2, 8014276 <enet_rxframe_drop+0x52>
 8014246:	600a      	str	r2, [r1, #0]
 8014248:	bd10      	pop	{r4, pc}
 801424a:	68d3      	ldr	r3, [r2, #12]
 801424c:	6003      	str	r3, [r0, #0]
 801424e:	e7fb      	b.n	8014248 <enet_rxframe_drop+0x24>
 8014250:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8014254:	4c0b      	ldr	r4, [pc, #44]	; (8014284 <enet_rxframe_drop+0x60>)
 8014256:	d006      	beq.n	8014266 <enet_rxframe_drop+0x42>
 8014258:	68e2      	ldr	r2, [r4, #12]
 801425a:	6002      	str	r2, [r0, #0]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d0f3      	beq.n	8014248 <enet_rxframe_drop+0x24>
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	600b      	str	r3, [r1, #0]
 8014264:	e7f0      	b.n	8014248 <enet_rxframe_drop+0x24>
 8014266:	6824      	ldr	r4, [r4, #0]
 8014268:	3210      	adds	r2, #16
 801426a:	f3c4 0484 	ubfx	r4, r4, #2, #5
 801426e:	4422      	add	r2, r4
 8014270:	6002      	str	r2, [r0, #0]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d0e8      	beq.n	8014248 <enet_rxframe_drop+0x24>
 8014276:	3310      	adds	r3, #16
 8014278:	e7f3      	b.n	8014262 <enet_rxframe_drop+0x3e>
 801427a:	bf00      	nop
 801427c:	2000a1f0 	strdcs	sl, [r0], -r0
 8014280:	2000a1e8 	andcs	sl, r0, r8, ror #3
 8014284:	40029000 	andmi	r9, r2, r0

08014288 <enet_rxframe_size_get>:
 8014288:	b508      	push	{r3, lr}
 801428a:	4b0c      	ldr	r3, [pc, #48]	; (80142bc <enet_rxframe_size_get+0x34>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	6818      	ldr	r0, [r3, #0]
 8014290:	2800      	cmp	r0, #0
 8014292:	db10      	blt.n	80142b6 <enet_rxframe_size_get+0x2e>
 8014294:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8014298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801429c:	d003      	beq.n	80142a6 <enet_rxframe_size_get+0x1e>
 801429e:	f7ff ffc1 	bl	8014224 <enet_rxframe_drop>
 80142a2:	2001      	movs	r0, #1
 80142a4:	bd08      	pop	{r3, pc}
 80142a6:	f000 0321 	and.w	r3, r0, #33	; 0x21
 80142aa:	2b21      	cmp	r3, #33	; 0x21
 80142ac:	d0f7      	beq.n	801429e <enet_rxframe_size_get+0x16>
 80142ae:	f3c0 400d 	ubfx	r0, r0, #16, #14
 80142b2:	3804      	subs	r0, #4
 80142b4:	e7f6      	b.n	80142a4 <enet_rxframe_size_get+0x1c>
 80142b6:	2000      	movs	r0, #0
 80142b8:	e7f4      	b.n	80142a4 <enet_rxframe_size_get+0x1c>
 80142ba:	bf00      	nop
 80142bc:	2000a1f0 	strdcs	sl, [r0], -r0

080142c0 <enet_initpara_reset>:
 80142c0:	2200      	movs	r2, #0
 80142c2:	4b08      	ldr	r3, [pc, #32]	; (80142e4 <enet_initpara_reset+0x24>)
 80142c4:	e9c3 2200 	strd	r2, r2, [r3]
 80142c8:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80142cc:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80142d0:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80142d4:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80142d8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 80142dc:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 80142e0:	639a      	str	r2, [r3, #56]	; 0x38
 80142e2:	4770      	bx	lr
 80142e4:	2000a1f8 	strdcs	sl, [r0], -r8

080142e8 <enet_deinit>:
 80142e8:	b508      	push	{r3, lr}
 80142ea:	f640 200e 	movw	r0, #2574	; 0xa0e
 80142ee:	f000 f946 	bl	801457e <rcu_periph_reset_enable>
 80142f2:	f640 200e 	movw	r0, #2574	; 0xa0e
 80142f6:	f000 f944 	bl	8014582 <rcu_periph_reset_disable>
 80142fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80142fe:	f7ff bfdf 	b.w	80142c0 <enet_initpara_reset>
	...

08014304 <fmc_bank0_unlock>:
 8014304:	4b04      	ldr	r3, [pc, #16]	; (8014318 <fmc_bank0_unlock+0x14>)
 8014306:	691a      	ldr	r2, [r3, #16]
 8014308:	0612      	lsls	r2, r2, #24
 801430a:	bf41      	itttt	mi
 801430c:	4a03      	ldrmi	r2, [pc, #12]	; (801431c <fmc_bank0_unlock+0x18>)
 801430e:	605a      	strmi	r2, [r3, #4]
 8014310:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014314:	605a      	strmi	r2, [r3, #4]
 8014316:	4770      	bx	lr
 8014318:	40022000 	andmi	r2, r2, r0
 801431c:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014320 <fmc_bank1_unlock>:
 8014320:	4b04      	ldr	r3, [pc, #16]	; (8014334 <fmc_bank1_unlock+0x14>)
 8014322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014324:	0612      	lsls	r2, r2, #24
 8014326:	bf41      	itttt	mi
 8014328:	4a03      	ldrmi	r2, [pc, #12]	; (8014338 <fmc_bank1_unlock+0x18>)
 801432a:	645a      	strmi	r2, [r3, #68]	; 0x44
 801432c:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014330:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014332:	4770      	bx	lr
 8014334:	40022000 	andmi	r2, r2, r0
 8014338:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

0801433c <fmc_bank0_lock>:
 801433c:	4a02      	ldr	r2, [pc, #8]	; (8014348 <fmc_bank0_lock+0xc>)
 801433e:	6913      	ldr	r3, [r2, #16]
 8014340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014344:	6113      	str	r3, [r2, #16]
 8014346:	4770      	bx	lr
 8014348:	40022000 	andmi	r2, r2, r0

0801434c <fmc_bank1_lock>:
 801434c:	4a02      	ldr	r2, [pc, #8]	; (8014358 <fmc_bank1_lock+0xc>)
 801434e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8014350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014354:	6513      	str	r3, [r2, #80]	; 0x50
 8014356:	4770      	bx	lr
 8014358:	40022000 	andmi	r2, r2, r0

0801435c <fmc_bank0_state_get>:
 801435c:	4b07      	ldr	r3, [pc, #28]	; (801437c <fmc_bank0_state_get+0x20>)
 801435e:	68da      	ldr	r2, [r3, #12]
 8014360:	07d1      	lsls	r1, r2, #31
 8014362:	d407      	bmi.n	8014374 <fmc_bank0_state_get+0x18>
 8014364:	68da      	ldr	r2, [r3, #12]
 8014366:	06d2      	lsls	r2, r2, #27
 8014368:	d406      	bmi.n	8014378 <fmc_bank0_state_get+0x1c>
 801436a:	68d8      	ldr	r0, [r3, #12]
 801436c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8014370:	0040      	lsls	r0, r0, #1
 8014372:	4770      	bx	lr
 8014374:	2001      	movs	r0, #1
 8014376:	4770      	bx	lr
 8014378:	2003      	movs	r0, #3
 801437a:	4770      	bx	lr
 801437c:	40022000 	andmi	r2, r2, r0

08014380 <fmc_bank1_state_get>:
 8014380:	4b07      	ldr	r3, [pc, #28]	; (80143a0 <fmc_bank1_state_get+0x20>)
 8014382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014384:	07d1      	lsls	r1, r2, #31
 8014386:	d407      	bmi.n	8014398 <fmc_bank1_state_get+0x18>
 8014388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801438a:	06d2      	lsls	r2, r2, #27
 801438c:	d406      	bmi.n	801439c <fmc_bank1_state_get+0x1c>
 801438e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014390:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8014394:	0040      	lsls	r0, r0, #1
 8014396:	4770      	bx	lr
 8014398:	2001      	movs	r0, #1
 801439a:	4770      	bx	lr
 801439c:	2003      	movs	r0, #3
 801439e:	4770      	bx	lr
 80143a0:	40022000 	andmi	r2, r2, r0

080143a4 <fwdgt_enable>:
 80143a4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80143a8:	4b01      	ldr	r3, [pc, #4]	; (80143b0 <fwdgt_enable+0xc>)
 80143aa:	601a      	str	r2, [r3, #0]
 80143ac:	4770      	bx	lr
 80143ae:	bf00      	nop
 80143b0:	40003000 	andmi	r3, r0, r0

080143b4 <fwdgt_counter_reload>:
 80143b4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80143b8:	4b01      	ldr	r3, [pc, #4]	; (80143c0 <fwdgt_counter_reload+0xc>)
 80143ba:	601a      	str	r2, [r3, #0]
 80143bc:	4770      	bx	lr
 80143be:	bf00      	nop
 80143c0:	40003000 	andmi	r3, r0, r0

080143c4 <fwdgt_config>:
 80143c4:	f245 5355 	movw	r3, #21845	; 0x5555
 80143c8:	4a11      	ldr	r2, [pc, #68]	; (8014410 <fwdgt_config+0x4c>)
 80143ca:	b510      	push	{r4, lr}
 80143cc:	4c11      	ldr	r4, [pc, #68]	; (8014414 <fwdgt_config+0x50>)
 80143ce:	6013      	str	r3, [r2, #0]
 80143d0:	68d3      	ldr	r3, [r2, #12]
 80143d2:	3c01      	subs	r4, #1
 80143d4:	f003 0301 	and.w	r3, r3, #1
 80143d8:	d013      	beq.n	8014402 <fwdgt_config+0x3e>
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d1f8      	bne.n	80143d0 <fwdgt_config+0xc>
 80143de:	6051      	str	r1, [r2, #4]
 80143e0:	490c      	ldr	r1, [pc, #48]	; (8014414 <fwdgt_config+0x50>)
 80143e2:	4a0b      	ldr	r2, [pc, #44]	; (8014410 <fwdgt_config+0x4c>)
 80143e4:	68d3      	ldr	r3, [r2, #12]
 80143e6:	3901      	subs	r1, #1
 80143e8:	f003 0302 	and.w	r3, r3, #2
 80143ec:	d00d      	beq.n	801440a <fwdgt_config+0x46>
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d1f8      	bne.n	80143e4 <fwdgt_config+0x20>
 80143f2:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80143f6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80143fa:	6090      	str	r0, [r2, #8]
 80143fc:	2001      	movs	r0, #1
 80143fe:	6013      	str	r3, [r2, #0]
 8014400:	e002      	b.n	8014408 <fwdgt_config+0x44>
 8014402:	2b00      	cmp	r3, #0
 8014404:	d0eb      	beq.n	80143de <fwdgt_config+0x1a>
 8014406:	2000      	movs	r0, #0
 8014408:	bd10      	pop	{r4, pc}
 801440a:	2b00      	cmp	r3, #0
 801440c:	d1fb      	bne.n	8014406 <fwdgt_config+0x42>
 801440e:	e7f0      	b.n	80143f2 <fwdgt_config+0x2e>
 8014410:	40003000 	andmi	r3, r0, r0
 8014414:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014418 <gpio_init>:
 8014418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801441c:	f04f 0c0f 	mov.w	ip, #15
 8014420:	06cf      	lsls	r7, r1, #27
 8014422:	f04f 0400 	mov.w	r4, #0
 8014426:	f04f 0701 	mov.w	r7, #1
 801442a:	f001 050f 	and.w	r5, r1, #15
 801442e:	bf48      	it	mi
 8014430:	4315      	orrmi	r5, r2
 8014432:	fa23 f204 	lsr.w	r2, r3, r4
 8014436:	07d6      	lsls	r6, r2, #31
 8014438:	d510      	bpl.n	801445c <gpio_init+0x44>
 801443a:	00a2      	lsls	r2, r4, #2
 801443c:	6806      	ldr	r6, [r0, #0]
 801443e:	fa0c fe02 	lsl.w	lr, ip, r2
 8014442:	ea26 060e 	bic.w	r6, r6, lr
 8014446:	fa05 f202 	lsl.w	r2, r5, r2
 801444a:	2928      	cmp	r1, #40	; 0x28
 801444c:	ea42 0206 	orr.w	r2, r2, r6
 8014450:	d128      	bne.n	80144a4 <gpio_init+0x8c>
 8014452:	fa07 f604 	lsl.w	r6, r7, r4
 8014456:	401e      	ands	r6, r3
 8014458:	6146      	str	r6, [r0, #20]
 801445a:	6002      	str	r2, [r0, #0]
 801445c:	3401      	adds	r4, #1
 801445e:	2c08      	cmp	r4, #8
 8014460:	d1e7      	bne.n	8014432 <gpio_init+0x1a>
 8014462:	2600      	movs	r6, #0
 8014464:	f04f 0c0f 	mov.w	ip, #15
 8014468:	2701      	movs	r7, #1
 801446a:	f106 0208 	add.w	r2, r6, #8
 801446e:	fa23 f402 	lsr.w	r4, r3, r2
 8014472:	07e4      	lsls	r4, r4, #31
 8014474:	d511      	bpl.n	801449a <gpio_init+0x82>
 8014476:	00b4      	lsls	r4, r6, #2
 8014478:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801447c:	fa0c f804 	lsl.w	r8, ip, r4
 8014480:	ea2e 0e08 	bic.w	lr, lr, r8
 8014484:	fa05 f404 	lsl.w	r4, r5, r4
 8014488:	2928      	cmp	r1, #40	; 0x28
 801448a:	ea44 040e 	orr.w	r4, r4, lr
 801448e:	d110      	bne.n	80144b2 <gpio_init+0x9a>
 8014490:	fa07 f202 	lsl.w	r2, r7, r2
 8014494:	401a      	ands	r2, r3
 8014496:	6142      	str	r2, [r0, #20]
 8014498:	6044      	str	r4, [r0, #4]
 801449a:	3601      	adds	r6, #1
 801449c:	2e08      	cmp	r6, #8
 801449e:	d1e4      	bne.n	801446a <gpio_init+0x52>
 80144a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144a4:	2948      	cmp	r1, #72	; 0x48
 80144a6:	bf02      	ittt	eq
 80144a8:	fa07 f604 	lsleq.w	r6, r7, r4
 80144ac:	401e      	andeq	r6, r3
 80144ae:	6106      	streq	r6, [r0, #16]
 80144b0:	e7d3      	b.n	801445a <gpio_init+0x42>
 80144b2:	2948      	cmp	r1, #72	; 0x48
 80144b4:	bf02      	ittt	eq
 80144b6:	fa07 f202 	lsleq.w	r2, r7, r2
 80144ba:	401a      	andeq	r2, r3
 80144bc:	6102      	streq	r2, [r0, #16]
 80144be:	e7eb      	b.n	8014498 <gpio_init+0x80>

080144c0 <gpio_pin_remap_config>:
 80144c0:	2800      	cmp	r0, #0
 80144c2:	4a16      	ldr	r2, [pc, #88]	; (801451c <gpio_pin_remap_config+0x5c>)
 80144c4:	b530      	push	{r4, r5, lr}
 80144c6:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 80144ca:	bfb4      	ite	lt
 80144cc:	69d3      	ldrlt	r3, [r2, #28]
 80144ce:	6853      	ldrge	r3, [r2, #4]
 80144d0:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 80144d4:	b284      	uxth	r4, r0
 80144d6:	d110      	bne.n	80144fa <gpio_pin_remap_config+0x3a>
 80144d8:	6855      	ldr	r5, [r2, #4]
 80144da:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80144de:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 80144e2:	6055      	str	r5, [r2, #4]
 80144e4:	b119      	cbz	r1, 80144ee <gpio_pin_remap_config+0x2e>
 80144e6:	0d42      	lsrs	r2, r0, #21
 80144e8:	0112      	lsls	r2, r2, #4
 80144ea:	4094      	lsls	r4, r2
 80144ec:	4323      	orrs	r3, r4
 80144ee:	4a0b      	ldr	r2, [pc, #44]	; (801451c <gpio_pin_remap_config+0x5c>)
 80144f0:	2800      	cmp	r0, #0
 80144f2:	bfb4      	ite	lt
 80144f4:	61d3      	strlt	r3, [r2, #28]
 80144f6:	6053      	strge	r3, [r2, #4]
 80144f8:	bd30      	pop	{r4, r5, pc}
 80144fa:	02c2      	lsls	r2, r0, #11
 80144fc:	bf4d      	iteet	mi
 80144fe:	2203      	movmi	r2, #3
 8014500:	0d42      	lsrpl	r2, r0, #21
 8014502:	0112      	lslpl	r2, r2, #4
 8014504:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8014508:	bf4c      	ite	mi
 801450a:	40aa      	lslmi	r2, r5
 801450c:	fa04 f202 	lslpl.w	r2, r4, r2
 8014510:	ea23 0302 	bic.w	r3, r3, r2
 8014514:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8014518:	e7e4      	b.n	80144e4 <gpio_pin_remap_config+0x24>
 801451a:	bf00      	nop
 801451c:	40010000 	andmi	r0, r1, r0

08014520 <gpio_ethernet_phy_select>:
 8014520:	4b04      	ldr	r3, [pc, #16]	; (8014534 <gpio_ethernet_phy_select+0x14>)
 8014522:	685a      	ldr	r2, [r3, #4]
 8014524:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8014528:	605a      	str	r2, [r3, #4]
 801452a:	685a      	ldr	r2, [r3, #4]
 801452c:	4302      	orrs	r2, r0
 801452e:	605a      	str	r2, [r3, #4]
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop
 8014534:	40010000 	andmi	r0, r1, r0

08014538 <pmu_backup_write_enable>:
 8014538:	4a02      	ldr	r2, [pc, #8]	; (8014544 <pmu_backup_write_enable+0xc>)
 801453a:	6813      	ldr	r3, [r2, #0]
 801453c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014540:	6013      	str	r3, [r2, #0]
 8014542:	4770      	bx	lr
 8014544:	40007000 	andmi	r7, r0, r0

08014548 <rcu_periph_clock_enable>:
 8014548:	2201      	movs	r2, #1
 801454a:	0983      	lsrs	r3, r0, #6
 801454c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014550:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014554:	6819      	ldr	r1, [r3, #0]
 8014556:	f000 001f 	and.w	r0, r0, #31
 801455a:	4082      	lsls	r2, r0
 801455c:	430a      	orrs	r2, r1
 801455e:	601a      	str	r2, [r3, #0]
 8014560:	4770      	bx	lr

08014562 <rcu_periph_clock_disable>:
 8014562:	2101      	movs	r1, #1
 8014564:	0983      	lsrs	r3, r0, #6
 8014566:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801456a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801456e:	681a      	ldr	r2, [r3, #0]
 8014570:	f000 001f 	and.w	r0, r0, #31
 8014574:	4081      	lsls	r1, r0
 8014576:	ea22 0201 	bic.w	r2, r2, r1
 801457a:	601a      	str	r2, [r3, #0]
 801457c:	4770      	bx	lr

0801457e <rcu_periph_reset_enable>:
 801457e:	f7ff bfe3 	b.w	8014548 <rcu_periph_clock_enable>

08014582 <rcu_periph_reset_disable>:
 8014582:	f7ff bfee 	b.w	8014562 <rcu_periph_clock_disable>
	...

08014588 <rcu_ckout0_config>:
 8014588:	4a03      	ldr	r2, [pc, #12]	; (8014598 <rcu_ckout0_config+0x10>)
 801458a:	6853      	ldr	r3, [r2, #4]
 801458c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8014590:	4303      	orrs	r3, r0
 8014592:	6053      	str	r3, [r2, #4]
 8014594:	4770      	bx	lr
 8014596:	bf00      	nop
 8014598:	40021000 	andmi	r1, r2, r0

0801459c <rcu_pll2_config>:
 801459c:	4b04      	ldr	r3, [pc, #16]	; (80145b0 <rcu_pll2_config+0x14>)
 801459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145a0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80145a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80145a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145a8:	4302      	orrs	r2, r0
 80145aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80145ac:	4770      	bx	lr
 80145ae:	bf00      	nop
 80145b0:	40021000 	andmi	r1, r2, r0

080145b4 <rcu_adc_clock_config>:
 80145b4:	490c      	ldr	r1, [pc, #48]	; (80145e8 <rcu_adc_clock_config+0x34>)
 80145b6:	2805      	cmp	r0, #5
 80145b8:	684b      	ldr	r3, [r1, #4]
 80145ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80145be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80145c2:	d006      	beq.n	80145d2 <rcu_adc_clock_config+0x1e>
 80145c4:	d803      	bhi.n	80145ce <rcu_adc_clock_config+0x1a>
 80145c6:	2804      	cmp	r0, #4
 80145c8:	d10a      	bne.n	80145e0 <rcu_adc_clock_config+0x2c>
 80145ca:	604b      	str	r3, [r1, #4]
 80145cc:	4770      	bx	lr
 80145ce:	2807      	cmp	r0, #7
 80145d0:	d1fb      	bne.n	80145ca <rcu_adc_clock_config+0x16>
 80145d2:	4a06      	ldr	r2, [pc, #24]	; (80145ec <rcu_adc_clock_config+0x38>)
 80145d4:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 80145d8:	4313      	orrs	r3, r2
 80145da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80145de:	e7f4      	b.n	80145ca <rcu_adc_clock_config+0x16>
 80145e0:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 80145e4:	e7f1      	b.n	80145ca <rcu_adc_clock_config+0x16>
 80145e6:	bf00      	nop
 80145e8:	40021000 	andmi	r1, r2, r0
 80145ec:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

080145f0 <rcu_flag_get>:
 80145f0:	0983      	lsrs	r3, r0, #6
 80145f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80145f6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80145fa:	681a      	ldr	r2, [r3, #0]
 80145fc:	2301      	movs	r3, #1
 80145fe:	f000 001f 	and.w	r0, r0, #31
 8014602:	4083      	lsls	r3, r0
 8014604:	4213      	tst	r3, r2
 8014606:	bf14      	ite	ne
 8014608:	2001      	movne	r0, #1
 801460a:	2000      	moveq	r0, #0
 801460c:	4770      	bx	lr
	...

08014610 <rcu_osci_stab_wait>:
 8014610:	281a      	cmp	r0, #26
 8014612:	b508      	push	{r3, lr}
 8014614:	d051      	beq.n	80146ba <rcu_osci_stab_wait+0xaa>
 8014616:	d806      	bhi.n	8014626 <rcu_osci_stab_wait+0x16>
 8014618:	2810      	cmp	r0, #16
 801461a:	d015      	beq.n	8014648 <rcu_osci_stab_wait+0x38>
 801461c:	2818      	cmp	r0, #24
 801461e:	d043      	beq.n	80146a8 <rcu_osci_stab_wait+0x98>
 8014620:	b368      	cbz	r0, 801467e <rcu_osci_stab_wait+0x6e>
 8014622:	2000      	movs	r0, #0
 8014624:	bd08      	pop	{r3, pc}
 8014626:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 801462a:	d01c      	beq.n	8014666 <rcu_osci_stab_wait+0x56>
 801462c:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8014630:	d02f      	beq.n	8014692 <rcu_osci_stab_wait+0x82>
 8014632:	281c      	cmp	r0, #28
 8014634:	d1f5      	bne.n	8014622 <rcu_osci_stab_wait+0x12>
 8014636:	4925      	ldr	r1, [pc, #148]	; (80146cc <rcu_osci_stab_wait+0xbc>)
 8014638:	201d      	movs	r0, #29
 801463a:	f7ff ffd9 	bl	80145f0 <rcu_flag_get>
 801463e:	b908      	cbnz	r0, 8014644 <rcu_osci_stab_wait+0x34>
 8014640:	3901      	subs	r1, #1
 8014642:	d1f9      	bne.n	8014638 <rcu_osci_stab_wait+0x28>
 8014644:	201d      	movs	r0, #29
 8014646:	e008      	b.n	801465a <rcu_osci_stab_wait+0x4a>
 8014648:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801464c:	2011      	movs	r0, #17
 801464e:	f7ff ffcf 	bl	80145f0 <rcu_flag_get>
 8014652:	b908      	cbnz	r0, 8014658 <rcu_osci_stab_wait+0x48>
 8014654:	3901      	subs	r1, #1
 8014656:	d1f9      	bne.n	801464c <rcu_osci_stab_wait+0x3c>
 8014658:	2011      	movs	r0, #17
 801465a:	f7ff ffc9 	bl	80145f0 <rcu_flag_get>
 801465e:	3800      	subs	r0, #0
 8014660:	bf18      	it	ne
 8014662:	2001      	movne	r0, #1
 8014664:	e7de      	b.n	8014624 <rcu_osci_stab_wait+0x14>
 8014666:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 801466a:	f640 0001 	movw	r0, #2049	; 0x801
 801466e:	f7ff ffbf 	bl	80145f0 <rcu_flag_get>
 8014672:	b908      	cbnz	r0, 8014678 <rcu_osci_stab_wait+0x68>
 8014674:	3901      	subs	r1, #1
 8014676:	d1f8      	bne.n	801466a <rcu_osci_stab_wait+0x5a>
 8014678:	f640 0001 	movw	r0, #2049	; 0x801
 801467c:	e7ed      	b.n	801465a <rcu_osci_stab_wait+0x4a>
 801467e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014682:	2001      	movs	r0, #1
 8014684:	f7ff ffb4 	bl	80145f0 <rcu_flag_get>
 8014688:	b908      	cbnz	r0, 801468e <rcu_osci_stab_wait+0x7e>
 801468a:	3901      	subs	r1, #1
 801468c:	d1f9      	bne.n	8014682 <rcu_osci_stab_wait+0x72>
 801468e:	2001      	movs	r0, #1
 8014690:	e7e3      	b.n	801465a <rcu_osci_stab_wait+0x4a>
 8014692:	490e      	ldr	r1, [pc, #56]	; (80146cc <rcu_osci_stab_wait+0xbc>)
 8014694:	f640 1001 	movw	r0, #2305	; 0x901
 8014698:	f7ff ffaa 	bl	80145f0 <rcu_flag_get>
 801469c:	b908      	cbnz	r0, 80146a2 <rcu_osci_stab_wait+0x92>
 801469e:	3901      	subs	r1, #1
 80146a0:	d1f8      	bne.n	8014694 <rcu_osci_stab_wait+0x84>
 80146a2:	f640 1001 	movw	r0, #2305	; 0x901
 80146a6:	e7d8      	b.n	801465a <rcu_osci_stab_wait+0x4a>
 80146a8:	4908      	ldr	r1, [pc, #32]	; (80146cc <rcu_osci_stab_wait+0xbc>)
 80146aa:	2019      	movs	r0, #25
 80146ac:	f7ff ffa0 	bl	80145f0 <rcu_flag_get>
 80146b0:	b908      	cbnz	r0, 80146b6 <rcu_osci_stab_wait+0xa6>
 80146b2:	3901      	subs	r1, #1
 80146b4:	d1f9      	bne.n	80146aa <rcu_osci_stab_wait+0x9a>
 80146b6:	2019      	movs	r0, #25
 80146b8:	e7cf      	b.n	801465a <rcu_osci_stab_wait+0x4a>
 80146ba:	4904      	ldr	r1, [pc, #16]	; (80146cc <rcu_osci_stab_wait+0xbc>)
 80146bc:	201b      	movs	r0, #27
 80146be:	f7ff ff97 	bl	80145f0 <rcu_flag_get>
 80146c2:	b908      	cbnz	r0, 80146c8 <rcu_osci_stab_wait+0xb8>
 80146c4:	3901      	subs	r1, #1
 80146c6:	d1f9      	bne.n	80146bc <rcu_osci_stab_wait+0xac>
 80146c8:	201b      	movs	r0, #27
 80146ca:	e7c6      	b.n	801465a <rcu_osci_stab_wait+0x4a>
 80146cc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080146d0 <rcu_osci_on>:
 80146d0:	f7ff bf3a 	b.w	8014548 <rcu_periph_clock_enable>

080146d4 <rcu_clock_freq_get>:
 80146d4:	4b3e      	ldr	r3, [pc, #248]	; (80147d0 <rcu_clock_freq_get+0xfc>)
 80146d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146d8:	4604      	mov	r4, r0
 80146da:	461f      	mov	r7, r3
 80146dc:	b089      	sub	sp, #36	; 0x24
 80146de:	ad04      	add	r5, sp, #16
 80146e0:	f103 0610 	add.w	r6, r3, #16
 80146e4:	462a      	mov	r2, r5
 80146e6:	6818      	ldr	r0, [r3, #0]
 80146e8:	6859      	ldr	r1, [r3, #4]
 80146ea:	3308      	adds	r3, #8
 80146ec:	c203      	stmia	r2!, {r0, r1}
 80146ee:	42b3      	cmp	r3, r6
 80146f0:	4615      	mov	r5, r2
 80146f2:	d1f7      	bne.n	80146e4 <rcu_clock_freq_get+0x10>
 80146f4:	466b      	mov	r3, sp
 80146f6:	6938      	ldr	r0, [r7, #16]
 80146f8:	6871      	ldr	r1, [r6, #4]
 80146fa:	4a36      	ldr	r2, [pc, #216]	; (80147d4 <rcu_clock_freq_get+0x100>)
 80146fc:	c303      	stmia	r3!, {r0, r1}
 80146fe:	c303      	stmia	r3!, {r0, r1}
 8014700:	6853      	ldr	r3, [r2, #4]
 8014702:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8014706:	2b01      	cmp	r3, #1
 8014708:	d053      	beq.n	80147b2 <rcu_clock_freq_get+0xde>
 801470a:	2b02      	cmp	r3, #2
 801470c:	d153      	bne.n	80147b6 <rcu_clock_freq_get+0xe2>
 801470e:	6853      	ldr	r3, [r2, #4]
 8014710:	03dd      	lsls	r5, r3, #15
 8014712:	d523      	bpl.n	801475c <rcu_clock_freq_get+0x88>
 8014714:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8014716:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801471a:	4b2f      	ldr	r3, [pc, #188]	; (80147d8 <rcu_clock_freq_get+0x104>)
 801471c:	d00e      	beq.n	801473c <rcu_clock_freq_get+0x68>
 801471e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014720:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8014722:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8014726:	f3c0 2003 	ubfx	r0, r0, #8, #4
 801472a:	3101      	adds	r1, #1
 801472c:	280f      	cmp	r0, #15
 801472e:	f100 0502 	add.w	r5, r0, #2
 8014732:	fbb3 f3f1 	udiv	r3, r3, r1
 8014736:	bf08      	it	eq
 8014738:	2514      	moveq	r5, #20
 801473a:	436b      	muls	r3, r5
 801473c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 801473e:	f001 010f 	and.w	r1, r1, #15
 8014742:	3101      	adds	r1, #1
 8014744:	fbb3 f3f1 	udiv	r3, r3, r1
 8014748:	6851      	ldr	r1, [r2, #4]
 801474a:	6850      	ldr	r0, [r2, #4]
 801474c:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8014750:	0080      	lsls	r0, r0, #2
 8014752:	d505      	bpl.n	8014760 <rcu_clock_freq_get+0x8c>
 8014754:	f041 0110 	orr.w	r1, r1, #16
 8014758:	1c48      	adds	r0, r1, #1
 801475a:	e007      	b.n	801476c <rcu_clock_freq_get+0x98>
 801475c:	4b1f      	ldr	r3, [pc, #124]	; (80147dc <rcu_clock_freq_get+0x108>)
 801475e:	e7f3      	b.n	8014748 <rcu_clock_freq_get+0x74>
 8014760:	290f      	cmp	r1, #15
 8014762:	d0f9      	beq.n	8014758 <rcu_clock_freq_get+0x84>
 8014764:	290d      	cmp	r1, #13
 8014766:	f101 0002 	add.w	r0, r1, #2
 801476a:	d01d      	beq.n	80147a8 <rcu_clock_freq_get+0xd4>
 801476c:	4358      	muls	r0, r3
 801476e:	6853      	ldr	r3, [r2, #4]
 8014770:	6851      	ldr	r1, [r2, #4]
 8014772:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8014776:	6852      	ldr	r2, [r2, #4]
 8014778:	3320      	adds	r3, #32
 801477a:	446b      	add	r3, sp
 801477c:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8014780:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8014784:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8014788:	3120      	adds	r1, #32
 801478a:	3220      	adds	r2, #32
 801478c:	4469      	add	r1, sp
 801478e:	446a      	add	r2, sp
 8014790:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8014794:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8014798:	fa20 f303 	lsr.w	r3, r0, r3
 801479c:	2c03      	cmp	r4, #3
 801479e:	d815      	bhi.n	80147cc <rcu_clock_freq_get+0xf8>
 80147a0:	e8df f004 	tbb	[pc, r4]
 80147a4:	110e0b0c 	tstne	lr, ip, lsl #22
 80147a8:	2006      	movs	r0, #6
 80147aa:	0859      	lsrs	r1, r3, #1
 80147ac:	fb00 1003 	mla	r0, r0, r3, r1
 80147b0:	e7dd      	b.n	801476e <rcu_clock_freq_get+0x9a>
 80147b2:	4809      	ldr	r0, [pc, #36]	; (80147d8 <rcu_clock_freq_get+0x104>)
 80147b4:	e7db      	b.n	801476e <rcu_clock_freq_get+0x9a>
 80147b6:	480a      	ldr	r0, [pc, #40]	; (80147e0 <rcu_clock_freq_get+0x10c>)
 80147b8:	e7d9      	b.n	801476e <rcu_clock_freq_get+0x9a>
 80147ba:	4618      	mov	r0, r3
 80147bc:	b009      	add	sp, #36	; 0x24
 80147be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147c0:	fa23 f001 	lsr.w	r0, r3, r1
 80147c4:	e7fa      	b.n	80147bc <rcu_clock_freq_get+0xe8>
 80147c6:	fa23 f002 	lsr.w	r0, r3, r2
 80147ca:	e7f7      	b.n	80147bc <rcu_clock_freq_get+0xe8>
 80147cc:	2000      	movs	r0, #0
 80147ce:	e7f5      	b.n	80147bc <rcu_clock_freq_get+0xe8>
 80147d0:	080158a1 	stmdaeq	r1, {r0, r5, r7, fp, ip, lr}
 80147d4:	40021000 	andmi	r1, r2, r0
 80147d8:	017d7840 	cmneq	sp, r0, asr #16
 80147dc:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80147e0:	007a1200 	rsbseq	r1, sl, r0, lsl #4

080147e4 <timer_deinit>:
 80147e4:	b508      	push	{r3, lr}
 80147e6:	4b2d      	ldr	r3, [pc, #180]	; (801489c <timer_deinit+0xb8>)
 80147e8:	4298      	cmp	r0, r3
 80147ea:	d048      	beq.n	801487e <timer_deinit+0x9a>
 80147ec:	d816      	bhi.n	801481c <timer_deinit+0x38>
 80147ee:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80147f2:	4298      	cmp	r0, r3
 80147f4:	d03c      	beq.n	8014870 <timer_deinit+0x8c>
 80147f6:	d807      	bhi.n	8014808 <timer_deinit+0x24>
 80147f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80147fc:	d02a      	beq.n	8014854 <timer_deinit+0x70>
 80147fe:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8014802:	4298      	cmp	r0, r3
 8014804:	d02d      	beq.n	8014862 <timer_deinit+0x7e>
 8014806:	bd08      	pop	{r3, pc}
 8014808:	4b25      	ldr	r3, [pc, #148]	; (80148a0 <timer_deinit+0xbc>)
 801480a:	4298      	cmp	r0, r3
 801480c:	d1fb      	bne.n	8014806 <timer_deinit+0x22>
 801480e:	f240 4003 	movw	r0, #1027	; 0x403
 8014812:	f7ff feb4 	bl	801457e <rcu_periph_reset_enable>
 8014816:	f240 4003 	movw	r0, #1027	; 0x403
 801481a:	e017      	b.n	801484c <timer_deinit+0x68>
 801481c:	4b21      	ldr	r3, [pc, #132]	; (80148a4 <timer_deinit+0xc0>)
 801481e:	4298      	cmp	r0, r3
 8014820:	d00e      	beq.n	8014840 <timer_deinit+0x5c>
 8014822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014826:	4298      	cmp	r0, r3
 8014828:	d030      	beq.n	801488c <timer_deinit+0xa8>
 801482a:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 801482e:	4298      	cmp	r0, r3
 8014830:	d1e9      	bne.n	8014806 <timer_deinit+0x22>
 8014832:	f240 4005 	movw	r0, #1029	; 0x405
 8014836:	f7ff fea2 	bl	801457e <rcu_periph_reset_enable>
 801483a:	f240 4005 	movw	r0, #1029	; 0x405
 801483e:	e005      	b.n	801484c <timer_deinit+0x68>
 8014840:	f240 300b 	movw	r0, #779	; 0x30b
 8014844:	f7ff fe9b 	bl	801457e <rcu_periph_reset_enable>
 8014848:	f240 300b 	movw	r0, #779	; 0x30b
 801484c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014850:	f7ff be97 	b.w	8014582 <rcu_periph_reset_disable>
 8014854:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014858:	f7ff fe91 	bl	801457e <rcu_periph_reset_enable>
 801485c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014860:	e7f4      	b.n	801484c <timer_deinit+0x68>
 8014862:	f240 4001 	movw	r0, #1025	; 0x401
 8014866:	f7ff fe8a 	bl	801457e <rcu_periph_reset_enable>
 801486a:	f240 4001 	movw	r0, #1025	; 0x401
 801486e:	e7ed      	b.n	801484c <timer_deinit+0x68>
 8014870:	f240 4002 	movw	r0, #1026	; 0x402
 8014874:	f7ff fe83 	bl	801457e <rcu_periph_reset_enable>
 8014878:	f240 4002 	movw	r0, #1026	; 0x402
 801487c:	e7e6      	b.n	801484c <timer_deinit+0x68>
 801487e:	f240 4004 	movw	r0, #1028	; 0x404
 8014882:	f7ff fe7c 	bl	801457e <rcu_periph_reset_enable>
 8014886:	f240 4004 	movw	r0, #1028	; 0x404
 801488a:	e7df      	b.n	801484c <timer_deinit+0x68>
 801488c:	f240 300d 	movw	r0, #781	; 0x30d
 8014890:	f7ff fe75 	bl	801457e <rcu_periph_reset_enable>
 8014894:	f240 300d 	movw	r0, #781	; 0x30d
 8014898:	e7d8      	b.n	801484c <timer_deinit+0x68>
 801489a:	bf00      	nop
 801489c:	40001000 	andmi	r1, r0, r0
 80148a0:	40000c00 	andmi	r0, r0, r0, lsl #24
 80148a4:	40012c00 	andmi	r2, r1, r0, lsl #24

080148a8 <timer_init>:
 80148a8:	880b      	ldrh	r3, [r1, #0]
 80148aa:	6283      	str	r3, [r0, #40]	; 0x28
 80148ac:	4b26      	ldr	r3, [pc, #152]	; (8014948 <timer_init+0xa0>)
 80148ae:	4298      	cmp	r0, r3
 80148b0:	d018      	beq.n	80148e4 <timer_init+0x3c>
 80148b2:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 80148b6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80148ba:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 80148be:	d011      	beq.n	80148e4 <timer_init+0x3c>
 80148c0:	4a22      	ldr	r2, [pc, #136]	; (801494c <timer_init+0xa4>)
 80148c2:	4290      	cmp	r0, r2
 80148c4:	d00e      	beq.n	80148e4 <timer_init+0x3c>
 80148c6:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80148ca:	4290      	cmp	r0, r2
 80148cc:	d00a      	beq.n	80148e4 <timer_init+0x3c>
 80148ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80148d2:	4293      	cmp	r3, r2
 80148d4:	d006      	beq.n	80148e4 <timer_init+0x3c>
 80148d6:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 80148da:	4293      	cmp	r3, r2
 80148dc:	d002      	beq.n	80148e4 <timer_init+0x3c>
 80148de:	4b1c      	ldr	r3, [pc, #112]	; (8014950 <timer_init+0xa8>)
 80148e0:	4298      	cmp	r0, r3
 80148e2:	d10f      	bne.n	8014904 <timer_init+0x5c>
 80148e4:	6803      	ldr	r3, [r0, #0]
 80148e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80148ea:	6003      	str	r3, [r0, #0]
 80148ec:	884b      	ldrh	r3, [r1, #2]
 80148ee:	6802      	ldr	r2, [r0, #0]
 80148f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80148f4:	4313      	orrs	r3, r2
 80148f6:	6003      	str	r3, [r0, #0]
 80148f8:	888b      	ldrh	r3, [r1, #4]
 80148fa:	6802      	ldr	r2, [r0, #0]
 80148fc:	f003 0310 	and.w	r3, r3, #16
 8014900:	4313      	orrs	r3, r2
 8014902:	6003      	str	r3, [r0, #0]
 8014904:	688b      	ldr	r3, [r1, #8]
 8014906:	62c3      	str	r3, [r0, #44]	; 0x2c
 8014908:	4b12      	ldr	r3, [pc, #72]	; (8014954 <timer_init+0xac>)
 801490a:	4298      	cmp	r0, r3
 801490c:	d003      	beq.n	8014916 <timer_init+0x6e>
 801490e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014912:	4298      	cmp	r0, r3
 8014914:	d104      	bne.n	8014920 <timer_init+0x78>
 8014916:	6943      	ldr	r3, [r0, #20]
 8014918:	f043 0301 	orr.w	r3, r3, #1
 801491c:	6143      	str	r3, [r0, #20]
 801491e:	4770      	bx	lr
 8014920:	6803      	ldr	r3, [r0, #0]
 8014922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014926:	6003      	str	r3, [r0, #0]
 8014928:	898b      	ldrh	r3, [r1, #12]
 801492a:	6802      	ldr	r2, [r0, #0]
 801492c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014930:	4313      	orrs	r3, r2
 8014932:	6003      	str	r3, [r0, #0]
 8014934:	4b04      	ldr	r3, [pc, #16]	; (8014948 <timer_init+0xa0>)
 8014936:	4298      	cmp	r0, r3
 8014938:	d002      	beq.n	8014940 <timer_init+0x98>
 801493a:	4b04      	ldr	r3, [pc, #16]	; (801494c <timer_init+0xa4>)
 801493c:	4298      	cmp	r0, r3
 801493e:	d1ea      	bne.n	8014916 <timer_init+0x6e>
 8014940:	7b8b      	ldrb	r3, [r1, #14]
 8014942:	6303      	str	r3, [r0, #48]	; 0x30
 8014944:	e7e7      	b.n	8014916 <timer_init+0x6e>
 8014946:	bf00      	nop
 8014948:	40012c00 	andmi	r2, r1, r0, lsl #24
 801494c:	40013400 	andmi	r3, r1, r0, lsl #8
 8014950:	40002000 	andmi	r2, r0, r0
 8014954:	40001000 	andmi	r1, r0, r0

08014958 <timer_enable>:
 8014958:	6803      	ldr	r3, [r0, #0]
 801495a:	f043 0301 	orr.w	r3, r3, #1
 801495e:	6003      	str	r3, [r0, #0]
 8014960:	4770      	bx	lr

08014962 <timer_channel_output_mode_config>:
 8014962:	2903      	cmp	r1, #3
 8014964:	d81a      	bhi.n	801499c <timer_channel_output_mode_config+0x3a>
 8014966:	e8df f001 	tbb	[pc, r1]
 801496a:	1a120a02 	bne	849717a <__exidx_end+0x47f602>
 801496e:	6983      	ldr	r3, [r0, #24]
 8014970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014974:	6183      	str	r3, [r0, #24]
 8014976:	6983      	ldr	r3, [r0, #24]
 8014978:	4313      	orrs	r3, r2
 801497a:	6183      	str	r3, [r0, #24]
 801497c:	4770      	bx	lr
 801497e:	6983      	ldr	r3, [r0, #24]
 8014980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014984:	6183      	str	r3, [r0, #24]
 8014986:	6983      	ldr	r3, [r0, #24]
 8014988:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801498c:	e7f5      	b.n	801497a <timer_channel_output_mode_config+0x18>
 801498e:	69c3      	ldr	r3, [r0, #28]
 8014990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014994:	61c3      	str	r3, [r0, #28]
 8014996:	69c3      	ldr	r3, [r0, #28]
 8014998:	4313      	orrs	r3, r2
 801499a:	61c3      	str	r3, [r0, #28]
 801499c:	4770      	bx	lr
 801499e:	69c3      	ldr	r3, [r0, #28]
 80149a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80149a4:	61c3      	str	r3, [r0, #28]
 80149a6:	69c3      	ldr	r3, [r0, #28]
 80149a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80149ac:	e7f5      	b.n	801499a <timer_channel_output_mode_config+0x38>

080149ae <timer_channel_output_pulse_value_config>:
 80149ae:	2903      	cmp	r1, #3
 80149b0:	d80a      	bhi.n	80149c8 <timer_channel_output_pulse_value_config+0x1a>
 80149b2:	e8df f001 	tbb	[pc, r1]
 80149b6:	08060402 	stmdaeq	r6, {r1, sl}
 80149ba:	6342      	str	r2, [r0, #52]	; 0x34
 80149bc:	4770      	bx	lr
 80149be:	6382      	str	r2, [r0, #56]	; 0x38
 80149c0:	4770      	bx	lr
 80149c2:	63c2      	str	r2, [r0, #60]	; 0x3c
 80149c4:	4770      	bx	lr
 80149c6:	6402      	str	r2, [r0, #64]	; 0x40
 80149c8:	4770      	bx	lr

080149ca <timer_interrupt_enable>:
 80149ca:	68c3      	ldr	r3, [r0, #12]
 80149cc:	430b      	orrs	r3, r1
 80149ce:	60c3      	str	r3, [r0, #12]
 80149d0:	4770      	bx	lr

080149d2 <timer_interrupt_flag_clear>:
 80149d2:	43c9      	mvns	r1, r1
 80149d4:	6101      	str	r1, [r0, #16]
 80149d6:	4770      	bx	lr

080149d8 <timer_flag_clear>:
 80149d8:	43c9      	mvns	r1, r1
 80149da:	6101      	str	r1, [r0, #16]
 80149dc:	4770      	bx	lr
	...

080149e0 <usart_deinit>:
 80149e0:	b508      	push	{r3, lr}
 80149e2:	4b1d      	ldr	r3, [pc, #116]	; (8014a58 <usart_deinit+0x78>)
 80149e4:	4298      	cmp	r0, r3
 80149e6:	d028      	beq.n	8014a3a <usart_deinit+0x5a>
 80149e8:	d808      	bhi.n	80149fc <usart_deinit+0x1c>
 80149ea:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80149ee:	4298      	cmp	r0, r3
 80149f0:	d015      	beq.n	8014a1e <usart_deinit+0x3e>
 80149f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80149f6:	4298      	cmp	r0, r3
 80149f8:	d018      	beq.n	8014a2c <usart_deinit+0x4c>
 80149fa:	bd08      	pop	{r3, pc}
 80149fc:	4b17      	ldr	r3, [pc, #92]	; (8014a5c <usart_deinit+0x7c>)
 80149fe:	4298      	cmp	r0, r3
 8014a00:	d022      	beq.n	8014a48 <usart_deinit+0x68>
 8014a02:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8014a06:	4298      	cmp	r0, r3
 8014a08:	d1f7      	bne.n	80149fa <usart_deinit+0x1a>
 8014a0a:	f240 300e 	movw	r0, #782	; 0x30e
 8014a0e:	f7ff fdb6 	bl	801457e <rcu_periph_reset_enable>
 8014a12:	f240 300e 	movw	r0, #782	; 0x30e
 8014a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014a1a:	f7ff bdb2 	b.w	8014582 <rcu_periph_reset_disable>
 8014a1e:	f240 4011 	movw	r0, #1041	; 0x411
 8014a22:	f7ff fdac 	bl	801457e <rcu_periph_reset_enable>
 8014a26:	f240 4011 	movw	r0, #1041	; 0x411
 8014a2a:	e7f4      	b.n	8014a16 <usart_deinit+0x36>
 8014a2c:	f240 4012 	movw	r0, #1042	; 0x412
 8014a30:	f7ff fda5 	bl	801457e <rcu_periph_reset_enable>
 8014a34:	f240 4012 	movw	r0, #1042	; 0x412
 8014a38:	e7ed      	b.n	8014a16 <usart_deinit+0x36>
 8014a3a:	f240 4013 	movw	r0, #1043	; 0x413
 8014a3e:	f7ff fd9e 	bl	801457e <rcu_periph_reset_enable>
 8014a42:	f240 4013 	movw	r0, #1043	; 0x413
 8014a46:	e7e6      	b.n	8014a16 <usart_deinit+0x36>
 8014a48:	f240 4014 	movw	r0, #1044	; 0x414
 8014a4c:	f7ff fd97 	bl	801457e <rcu_periph_reset_enable>
 8014a50:	f240 4014 	movw	r0, #1044	; 0x414
 8014a54:	e7df      	b.n	8014a16 <usart_deinit+0x36>
 8014a56:	bf00      	nop
 8014a58:	40004c00 	andmi	r4, r0, r0, lsl #24
 8014a5c:	40005000 	andmi	r5, r0, r0

08014a60 <usart_baudrate_set>:
 8014a60:	b538      	push	{r3, r4, r5, lr}
 8014a62:	4b11      	ldr	r3, [pc, #68]	; (8014aa8 <usart_baudrate_set+0x48>)
 8014a64:	4604      	mov	r4, r0
 8014a66:	4298      	cmp	r0, r3
 8014a68:	460d      	mov	r5, r1
 8014a6a:	d01b      	beq.n	8014aa4 <usart_baudrate_set+0x44>
 8014a6c:	d809      	bhi.n	8014a82 <usart_baudrate_set+0x22>
 8014a6e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014a72:	4298      	cmp	r0, r3
 8014a74:	d016      	beq.n	8014aa4 <usart_baudrate_set+0x44>
 8014a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014a7a:	4298      	cmp	r0, r3
 8014a7c:	d012      	beq.n	8014aa4 <usart_baudrate_set+0x44>
 8014a7e:	2000      	movs	r0, #0
 8014a80:	e009      	b.n	8014a96 <usart_baudrate_set+0x36>
 8014a82:	4b0a      	ldr	r3, [pc, #40]	; (8014aac <usart_baudrate_set+0x4c>)
 8014a84:	4298      	cmp	r0, r3
 8014a86:	d00d      	beq.n	8014aa4 <usart_baudrate_set+0x44>
 8014a88:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8014a8c:	4298      	cmp	r0, r3
 8014a8e:	d1f6      	bne.n	8014a7e <usart_baudrate_set+0x1e>
 8014a90:	2003      	movs	r0, #3
 8014a92:	f7ff fe1f 	bl	80146d4 <rcu_clock_freq_get>
 8014a96:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 8014a9a:	fbb1 f1f5 	udiv	r1, r1, r5
 8014a9e:	b289      	uxth	r1, r1
 8014aa0:	60a1      	str	r1, [r4, #8]
 8014aa2:	bd38      	pop	{r3, r4, r5, pc}
 8014aa4:	2002      	movs	r0, #2
 8014aa6:	e7f4      	b.n	8014a92 <usart_baudrate_set+0x32>
 8014aa8:	40004c00 	andmi	r4, r0, r0, lsl #24
 8014aac:	40005000 	andmi	r5, r0, r0

08014ab0 <usart_parity_config>:
 8014ab0:	68c3      	ldr	r3, [r0, #12]
 8014ab2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8014ab6:	60c3      	str	r3, [r0, #12]
 8014ab8:	68c3      	ldr	r3, [r0, #12]
 8014aba:	430b      	orrs	r3, r1
 8014abc:	60c3      	str	r3, [r0, #12]
 8014abe:	4770      	bx	lr

08014ac0 <usart_word_length_set>:
 8014ac0:	68c3      	ldr	r3, [r0, #12]
 8014ac2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014ac6:	60c3      	str	r3, [r0, #12]
 8014ac8:	68c3      	ldr	r3, [r0, #12]
 8014aca:	430b      	orrs	r3, r1
 8014acc:	60c3      	str	r3, [r0, #12]
 8014ace:	4770      	bx	lr

08014ad0 <usart_stop_bit_set>:
 8014ad0:	6903      	ldr	r3, [r0, #16]
 8014ad2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8014ad6:	6103      	str	r3, [r0, #16]
 8014ad8:	6903      	ldr	r3, [r0, #16]
 8014ada:	430b      	orrs	r3, r1
 8014adc:	6103      	str	r3, [r0, #16]
 8014ade:	4770      	bx	lr

08014ae0 <usart_transmit_config>:
 8014ae0:	68c3      	ldr	r3, [r0, #12]
 8014ae2:	f023 0308 	bic.w	r3, r3, #8
 8014ae6:	430b      	orrs	r3, r1
 8014ae8:	60c3      	str	r3, [r0, #12]
 8014aea:	4770      	bx	lr

08014aec <usart_receive_config>:
 8014aec:	68c3      	ldr	r3, [r0, #12]
 8014aee:	f023 0304 	bic.w	r3, r3, #4
 8014af2:	430b      	orrs	r3, r1
 8014af4:	60c3      	str	r3, [r0, #12]
 8014af6:	4770      	bx	lr

08014af8 <usart_hardware_flow_rts_config>:
 8014af8:	6943      	ldr	r3, [r0, #20]
 8014afa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014afe:	430b      	orrs	r3, r1
 8014b00:	6143      	str	r3, [r0, #20]
 8014b02:	4770      	bx	lr

08014b04 <usart_hardware_flow_cts_config>:
 8014b04:	6943      	ldr	r3, [r0, #20]
 8014b06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014b0a:	430b      	orrs	r3, r1
 8014b0c:	6143      	str	r3, [r0, #20]
 8014b0e:	4770      	bx	lr

08014b10 <usart_dma_transmit_config>:
 8014b10:	6943      	ldr	r3, [r0, #20]
 8014b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014b16:	430b      	orrs	r3, r1
 8014b18:	6143      	str	r3, [r0, #20]
 8014b1a:	4770      	bx	lr

08014b1c <usart_flag_get>:
 8014b1c:	098b      	lsrs	r3, r1, #6
 8014b1e:	581a      	ldr	r2, [r3, r0]
 8014b20:	2301      	movs	r3, #1
 8014b22:	f001 011f 	and.w	r1, r1, #31
 8014b26:	408b      	lsls	r3, r1
 8014b28:	4213      	tst	r3, r2
 8014b2a:	bf14      	ite	ne
 8014b2c:	2001      	movne	r0, #1
 8014b2e:	2000      	moveq	r0, #0
 8014b30:	4770      	bx	lr

08014b32 <usart_interrupt_enable>:
 8014b32:	2301      	movs	r3, #1
 8014b34:	b510      	push	{r4, lr}
 8014b36:	f3c1 1289 	ubfx	r2, r1, #6, #10
 8014b3a:	5814      	ldr	r4, [r2, r0]
 8014b3c:	f001 011f 	and.w	r1, r1, #31
 8014b40:	408b      	lsls	r3, r1
 8014b42:	4323      	orrs	r3, r4
 8014b44:	5013      	str	r3, [r2, r0]
 8014b46:	bd10      	pop	{r4, pc}

08014b48 <usart_interrupt_disable>:
 8014b48:	2201      	movs	r2, #1
 8014b4a:	b510      	push	{r4, lr}
 8014b4c:	f3c1 1489 	ubfx	r4, r1, #6, #10
 8014b50:	5823      	ldr	r3, [r4, r0]
 8014b52:	f001 011f 	and.w	r1, r1, #31
 8014b56:	408a      	lsls	r2, r1
 8014b58:	ea23 0302 	bic.w	r3, r3, r2
 8014b5c:	5023      	str	r3, [r4, r0]
 8014b5e:	bd10      	pop	{r4, pc}

08014b60 <usart_interrupt_flag_clear>:
 8014b60:	2201      	movs	r2, #1
 8014b62:	b510      	push	{r4, lr}
 8014b64:	0d8c      	lsrs	r4, r1, #22
 8014b66:	5823      	ldr	r3, [r4, r0]
 8014b68:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8014b6c:	408a      	lsls	r2, r1
 8014b6e:	ea23 0302 	bic.w	r3, r3, r2
 8014b72:	5023      	str	r3, [r4, r0]
 8014b74:	bd10      	pop	{r4, pc}
	...

08014b78 <emac_eth_recv>:
 8014b78:	b538      	push	{r3, r4, r5, lr}
 8014b7a:	4605      	mov	r5, r0
 8014b7c:	f7ff fb84 	bl	8014288 <enet_rxframe_size_get>
 8014b80:	4604      	mov	r4, r0
 8014b82:	b138      	cbz	r0, 8014b94 <emac_eth_recv+0x1c>
 8014b84:	4b05      	ldr	r3, [pc, #20]	; (8014b9c <emac_eth_recv+0x24>)
 8014b86:	2105      	movs	r1, #5
 8014b88:	6818      	ldr	r0, [r3, #0]
 8014b8a:	f7ff fb2c 	bl	80141e6 <enet_desc_information_get>
 8014b8e:	6028      	str	r0, [r5, #0]
 8014b90:	4620      	mov	r0, r4
 8014b92:	bd38      	pop	{r3, r4, r5, pc}
 8014b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b98:	e7fb      	b.n	8014b92 <emac_eth_recv+0x1a>
 8014b9a:	bf00      	nop
 8014b9c:	2000a1f0 	strdcs	sl, [r0], -r0

08014ba0 <emac_free_pkt>:
 8014ba0:	2100      	movs	r1, #0
 8014ba2:	4608      	mov	r0, r1
 8014ba4:	f7ff b85c 	b.w	8013c60 <enet_frame_receive>

08014ba8 <emac_eth_send>:
 8014ba8:	f7ff b89a 	b.w	8013ce0 <enet_frame_transmit>

08014bac <gd32_adc_init()>:
 8014bac:	b510      	push	{r4, lr}
 8014bae:	f240 6009 	movw	r0, #1545	; 0x609
 8014bb2:	4c21      	ldr	r4, [pc, #132]	; (8014c38 <gd32_adc_init()+0x8c>)
 8014bb4:	f7ff fcc8 	bl	8014548 <rcu_periph_clock_enable>
 8014bb8:	2005      	movs	r0, #5
 8014bba:	f7ff fcfb 	bl	80145b4 <rcu_adc_clock_config>
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	2201      	movs	r2, #1
 8014bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014bc6:	f000 fb55 	bl	8015274 <adc_special_function_config>
 8014bca:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8014bce:	4620      	mov	r0, r4
 8014bd0:	2102      	movs	r1, #2
 8014bd2:	f000 fbee 	bl	80153b2 <adc_external_trigger_source_config>
 8014bd6:	2100      	movs	r1, #0
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f000 fb73 	bl	80152c4 <adc_data_alignment_config>
 8014bde:	2000      	movs	r0, #0
 8014be0:	f000 fb38 	bl	8015254 <adc_mode_config>
 8014be4:	2202      	movs	r2, #2
 8014be6:	4620      	mov	r0, r4
 8014be8:	4611      	mov	r1, r2
 8014bea:	f000 fb97 	bl	801531c <adc_channel_length_config>
 8014bee:	4620      	mov	r0, r4
 8014bf0:	2307      	movs	r3, #7
 8014bf2:	2210      	movs	r2, #16
 8014bf4:	2100      	movs	r1, #0
 8014bf6:	f000 fbae 	bl	8015356 <adc_inserted_channel_config>
 8014bfa:	2307      	movs	r3, #7
 8014bfc:	4620      	mov	r0, r4
 8014bfe:	2211      	movs	r2, #17
 8014c00:	2101      	movs	r1, #1
 8014c02:	f000 fba8 	bl	8015356 <adc_inserted_channel_config>
 8014c06:	2201      	movs	r2, #1
 8014c08:	2102      	movs	r1, #2
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f000 fbe2 	bl	80153d4 <adc_external_trigger_config>
 8014c10:	f000 fb7a 	bl	8015308 <adc_tempsensor_vrefint_enable>
 8014c14:	4620      	mov	r0, r4
 8014c16:	f000 fb5e 	bl	80152d6 <adc_enable>
 8014c1a:	2100      	movs	r1, #0
 8014c1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014c20:	f000 fa58 	bl	80150d4 <udelay(unsigned int, unsigned int)>
 8014c24:	4620      	mov	r0, r4
 8014c26:	f000 fb5e 	bl	80152e6 <adc_calibration_enable>
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c30:	2102      	movs	r1, #2
 8014c32:	f000 bbea 	b.w	801540a <adc_software_trigger_enable>
 8014c36:	bf00      	nop
 8014c38:	40012400 	andmi	r2, r1, r0, lsl #8

08014c3c <_stop() [clone .isra.0]>:
 8014c3c:	b508      	push	{r3, lr}
 8014c3e:	4806      	ldr	r0, [pc, #24]	; (8014c58 <_stop() [clone .isra.0]+0x1c>)
 8014c40:	f000 fc76 	bl	8015530 <i2c_stop_on_bus>
 8014c44:	f640 73ff 	movw	r3, #4095	; 0xfff
 8014c48:	4904      	ldr	r1, [pc, #16]	; (8014c5c <_stop() [clone .isra.0]+0x20>)
 8014c4a:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8014c4e:	0592      	lsls	r2, r2, #22
 8014c50:	d501      	bpl.n	8014c56 <_stop() [clone .isra.0]+0x1a>
 8014c52:	3b01      	subs	r3, #1
 8014c54:	d1f9      	bne.n	8014c4a <_stop() [clone .isra.0]+0xe>
 8014c56:	bd08      	pop	{r3, pc}
 8014c58:	40005400 	andmi	r5, r0, r0, lsl #8
 8014c5c:	40005000 	andmi	r5, r0, r0

08014c60 <gd32_i2c_begin>:
 8014c60:	b510      	push	{r4, lr}
 8014c62:	f240 7015 	movw	r0, #1813	; 0x715
 8014c66:	f7ff fc6f 	bl	8014548 <rcu_periph_clock_enable>
 8014c6a:	4c15      	ldr	r4, [pc, #84]	; (8014cc0 <gd32_i2c_begin+0x60>)
 8014c6c:	f240 6003 	movw	r0, #1539	; 0x603
 8014c70:	f7ff fc6a 	bl	8014548 <rcu_periph_clock_enable>
 8014c74:	f240 6003 	movw	r0, #1539	; 0x603
 8014c78:	f7ff fc66 	bl	8014548 <rcu_periph_clock_enable>
 8014c7c:	4620      	mov	r0, r4
 8014c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014c82:	2203      	movs	r2, #3
 8014c84:	211c      	movs	r1, #28
 8014c86:	f7ff fbc7 	bl	8014418 <gpio_init>
 8014c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c8e:	2203      	movs	r2, #3
 8014c90:	4620      	mov	r0, r4
 8014c92:	211c      	movs	r1, #28
 8014c94:	f7ff fbc0 	bl	8014418 <gpio_init>
 8014c98:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8014c9c:	2101      	movs	r1, #1
 8014c9e:	2002      	movs	r0, #2
 8014ca0:	f7ff fc0e 	bl	80144c0 <gpio_pin_remap_config>
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	4907      	ldr	r1, [pc, #28]	; (8014cc4 <gd32_i2c_begin+0x64>)
 8014ca8:	2200      	movs	r2, #0
 8014caa:	f000 fbbb 	bl	8015424 <i2c_clock_config>
 8014cae:	4620      	mov	r0, r4
 8014cb0:	f000 fc34 	bl	801551c <i2c_enable>
 8014cb4:	4620      	mov	r0, r4
 8014cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cba:	2101      	movs	r1, #1
 8014cbc:	f000 bc14 	b.w	80154e8 <i2c_ack_config>
 8014cc0:	40010c00 	andmi	r0, r1, r0, lsl #24
 8014cc4:	00061a80 	andeq	r1, r6, r0, lsl #21

08014cc8 <gd32_i2c_set_baudrate>:
 8014cc8:	4601      	mov	r1, r0
 8014cca:	2200      	movs	r2, #0
 8014ccc:	4801      	ldr	r0, [pc, #4]	; (8014cd4 <gd32_i2c_set_baudrate+0xc>)
 8014cce:	f000 bba9 	b.w	8015424 <i2c_clock_config>
 8014cd2:	bf00      	nop
 8014cd4:	40005400 	andmi	r5, r0, r0, lsl #8

08014cd8 <gd32_i2c_set_address>:
 8014cd8:	4b01      	ldr	r3, [pc, #4]	; (8014ce0 <gd32_i2c_set_address+0x8>)
 8014cda:	0040      	lsls	r0, r0, #1
 8014cdc:	7018      	strb	r0, [r3, #0]
 8014cde:	4770      	bx	lr
 8014ce0:	20013294 	mulcs	r1, r4, r2

08014ce4 <gd32_i2c_write>:
 8014ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ce6:	4604      	mov	r4, r0
 8014ce8:	460f      	mov	r7, r1
 8014cea:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014cee:	4e2e      	ldr	r6, [pc, #184]	; (8014da8 <gd32_i2c_write+0xc4>)
 8014cf0:	f240 6101 	movw	r1, #1537	; 0x601
 8014cf4:	4630      	mov	r0, r6
 8014cf6:	f000 fc25 	bl	8015544 <i2c_flag_get>
 8014cfa:	b9b0      	cbnz	r0, 8014d2a <gd32_i2c_write+0x46>
 8014cfc:	482a      	ldr	r0, [pc, #168]	; (8014da8 <gd32_i2c_write+0xc4>)
 8014cfe:	f000 fc12 	bl	8015526 <i2c_start_on_bus>
 8014d02:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014d06:	4e28      	ldr	r6, [pc, #160]	; (8014da8 <gd32_i2c_write+0xc4>)
 8014d08:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014d0c:	4630      	mov	r0, r6
 8014d0e:	f000 fc19 	bl	8015544 <i2c_flag_get>
 8014d12:	b190      	cbz	r0, 8014d3a <gd32_i2c_write+0x56>
 8014d14:	4b25      	ldr	r3, [pc, #148]	; (8014dac <gd32_i2c_write+0xc8>)
 8014d16:	f06f 0201 	mvn.w	r2, #1
 8014d1a:	7819      	ldrb	r1, [r3, #0]
 8014d1c:	4822      	ldr	r0, [pc, #136]	; (8014da8 <gd32_i2c_write+0xc4>)
 8014d1e:	f000 fbf5 	bl	801550c <i2c_master_addressing>
 8014d22:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014d26:	4e20      	ldr	r6, [pc, #128]	; (8014da8 <gd32_i2c_write+0xc4>)
 8014d28:	e00c      	b.n	8014d44 <gd32_i2c_write+0x60>
 8014d2a:	3d01      	subs	r5, #1
 8014d2c:	d1e0      	bne.n	8014cf0 <gd32_i2c_write+0xc>
 8014d2e:	f7ff ff85 	bl	8014c3c <_stop() [clone .isra.0]>
 8014d32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d36:	4240      	negs	r0, r0
 8014d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d3a:	3d01      	subs	r5, #1
 8014d3c:	d1e4      	bne.n	8014d08 <gd32_i2c_write+0x24>
 8014d3e:	e7f6      	b.n	8014d2e <gd32_i2c_write+0x4a>
 8014d40:	3d01      	subs	r5, #1
 8014d42:	d0f4      	beq.n	8014d2e <gd32_i2c_write+0x4a>
 8014d44:	f240 5101 	movw	r1, #1281	; 0x501
 8014d48:	4630      	mov	r0, r6
 8014d4a:	f000 fbfb 	bl	8015544 <i2c_flag_get>
 8014d4e:	2800      	cmp	r0, #0
 8014d50:	d0f6      	beq.n	8014d40 <gd32_i2c_write+0x5c>
 8014d52:	f240 5101 	movw	r1, #1281	; 0x501
 8014d56:	4814      	ldr	r0, [pc, #80]	; (8014da8 <gd32_i2c_write+0xc4>)
 8014d58:	f000 fbff 	bl	801555a <i2c_flag_clear>
 8014d5c:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014d60:	4e11      	ldr	r6, [pc, #68]	; (8014da8 <gd32_i2c_write+0xc4>)
 8014d62:	f240 5107 	movw	r1, #1287	; 0x507
 8014d66:	4630      	mov	r0, r6
 8014d68:	f000 fbec 	bl	8015544 <i2c_flag_get>
 8014d6c:	2801      	cmp	r0, #1
 8014d6e:	d107      	bne.n	8014d80 <gd32_i2c_write+0x9c>
 8014d70:	4e0d      	ldr	r6, [pc, #52]	; (8014da8 <gd32_i2c_write+0xc4>)
 8014d72:	4427      	add	r7, r4
 8014d74:	42a7      	cmp	r7, r4
 8014d76:	d106      	bne.n	8014d86 <gd32_i2c_write+0xa2>
 8014d78:	f7ff ff60 	bl	8014c3c <_stop() [clone .isra.0]>
 8014d7c:	2000      	movs	r0, #0
 8014d7e:	e7da      	b.n	8014d36 <gd32_i2c_write+0x52>
 8014d80:	3d01      	subs	r5, #1
 8014d82:	d1ee      	bne.n	8014d62 <gd32_i2c_write+0x7e>
 8014d84:	e7d3      	b.n	8014d2e <gd32_i2c_write+0x4a>
 8014d86:	4630      	mov	r0, r6
 8014d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d8c:	f000 fbd5 	bl	801553a <i2c_data_transmit>
 8014d90:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014d94:	f240 5102 	movw	r1, #1282	; 0x502
 8014d98:	4630      	mov	r0, r6
 8014d9a:	f000 fbd3 	bl	8015544 <i2c_flag_get>
 8014d9e:	2800      	cmp	r0, #0
 8014da0:	d1e8      	bne.n	8014d74 <gd32_i2c_write+0x90>
 8014da2:	3d01      	subs	r5, #1
 8014da4:	d1f6      	bne.n	8014d94 <gd32_i2c_write+0xb0>
 8014da6:	e7c2      	b.n	8014d2e <gd32_i2c_write+0x4a>
 8014da8:	40005400 	andmi	r5, r0, r0, lsl #8
 8014dac:	20013294 	mulcs	r1, r4, r2

08014db0 <gd32_i2c_read>:
 8014db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014db4:	4680      	mov	r8, r0
 8014db6:	460c      	mov	r4, r1
 8014db8:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014dbc:	4f4b      	ldr	r7, [pc, #300]	; (8014eec <gd32_i2c_read+0x13c>)
 8014dbe:	f240 6101 	movw	r1, #1537	; 0x601
 8014dc2:	4638      	mov	r0, r7
 8014dc4:	f000 fbbe 	bl	8015544 <i2c_flag_get>
 8014dc8:	4605      	mov	r5, r0
 8014dca:	bb08      	cbnz	r0, 8014e10 <gd32_i2c_read+0x60>
 8014dcc:	2c02      	cmp	r4, #2
 8014dce:	d103      	bne.n	8014dd8 <gd32_i2c_read+0x28>
 8014dd0:	4601      	mov	r1, r0
 8014dd2:	4846      	ldr	r0, [pc, #280]	; (8014eec <gd32_i2c_read+0x13c>)
 8014dd4:	f000 fb91 	bl	80154fa <i2c_ackpos_config>
 8014dd8:	4844      	ldr	r0, [pc, #272]	; (8014eec <gd32_i2c_read+0x13c>)
 8014dda:	f000 fba4 	bl	8015526 <i2c_start_on_bus>
 8014dde:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014de2:	4f42      	ldr	r7, [pc, #264]	; (8014eec <gd32_i2c_read+0x13c>)
 8014de4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014de8:	4638      	mov	r0, r7
 8014dea:	f000 fbab 	bl	8015544 <i2c_flag_get>
 8014dee:	b1a8      	cbz	r0, 8014e1c <gd32_i2c_read+0x6c>
 8014df0:	4b3f      	ldr	r3, [pc, #252]	; (8014ef0 <gd32_i2c_read+0x140>)
 8014df2:	2201      	movs	r2, #1
 8014df4:	7819      	ldrb	r1, [r3, #0]
 8014df6:	483d      	ldr	r0, [pc, #244]	; (8014eec <gd32_i2c_read+0x13c>)
 8014df8:	f000 fb88 	bl	801550c <i2c_master_addressing>
 8014dfc:	2c02      	cmp	r4, #2
 8014dfe:	d803      	bhi.n	8014e08 <gd32_i2c_read+0x58>
 8014e00:	2100      	movs	r1, #0
 8014e02:	483a      	ldr	r0, [pc, #232]	; (8014eec <gd32_i2c_read+0x13c>)
 8014e04:	f000 fb70 	bl	80154e8 <i2c_ack_config>
 8014e08:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014e0c:	4f37      	ldr	r7, [pc, #220]	; (8014eec <gd32_i2c_read+0x13c>)
 8014e0e:	e00a      	b.n	8014e26 <gd32_i2c_read+0x76>
 8014e10:	3e01      	subs	r6, #1
 8014e12:	d1d4      	bne.n	8014dbe <gd32_i2c_read+0xe>
 8014e14:	f7ff ff12 	bl	8014c3c <_stop() [clone .isra.0]>
 8014e18:	2504      	movs	r5, #4
 8014e1a:	e04d      	b.n	8014eb8 <gd32_i2c_read+0x108>
 8014e1c:	3e01      	subs	r6, #1
 8014e1e:	d1e1      	bne.n	8014de4 <gd32_i2c_read+0x34>
 8014e20:	e7f8      	b.n	8014e14 <gd32_i2c_read+0x64>
 8014e22:	3e01      	subs	r6, #1
 8014e24:	d0f6      	beq.n	8014e14 <gd32_i2c_read+0x64>
 8014e26:	f240 5101 	movw	r1, #1281	; 0x501
 8014e2a:	4638      	mov	r0, r7
 8014e2c:	f000 fb8a 	bl	8015544 <i2c_flag_get>
 8014e30:	2800      	cmp	r0, #0
 8014e32:	d0f6      	beq.n	8014e22 <gd32_i2c_read+0x72>
 8014e34:	f240 5101 	movw	r1, #1281	; 0x501
 8014e38:	482c      	ldr	r0, [pc, #176]	; (8014eec <gd32_i2c_read+0x13c>)
 8014e3a:	f000 fb8e 	bl	801555a <i2c_flag_clear>
 8014e3e:	2c01      	cmp	r4, #1
 8014e40:	d102      	bne.n	8014e48 <gd32_i2c_read+0x98>
 8014e42:	482a      	ldr	r0, [pc, #168]	; (8014eec <gd32_i2c_read+0x13c>)
 8014e44:	f000 fb74 	bl	8015530 <i2c_stop_on_bus>
 8014e48:	f640 77ff 	movw	r7, #4095	; 0xfff
 8014e4c:	4e27      	ldr	r6, [pc, #156]	; (8014eec <gd32_i2c_read+0x13c>)
 8014e4e:	e022      	b.n	8014e96 <gd32_i2c_read+0xe6>
 8014e50:	2c03      	cmp	r4, #3
 8014e52:	d134      	bne.n	8014ebe <gd32_i2c_read+0x10e>
 8014e54:	f640 79ff 	movw	r9, #4095	; 0xfff
 8014e58:	e002      	b.n	8014e60 <gd32_i2c_read+0xb0>
 8014e5a:	f1b9 0901 	subs.w	r9, r9, #1
 8014e5e:	d0d9      	beq.n	8014e14 <gd32_i2c_read+0x64>
 8014e60:	f240 5102 	movw	r1, #1282	; 0x502
 8014e64:	4630      	mov	r0, r6
 8014e66:	f000 fb6d 	bl	8015544 <i2c_flag_get>
 8014e6a:	2800      	cmp	r0, #0
 8014e6c:	d0f5      	beq.n	8014e5a <gd32_i2c_read+0xaa>
 8014e6e:	2100      	movs	r1, #0
 8014e70:	4630      	mov	r0, r6
 8014e72:	f000 fb39 	bl	80154e8 <i2c_ack_config>
 8014e76:	f240 5106 	movw	r1, #1286	; 0x506
 8014e7a:	4630      	mov	r0, r6
 8014e7c:	f000 fb62 	bl	8015544 <i2c_flag_get>
 8014e80:	b138      	cbz	r0, 8014e92 <gd32_i2c_read+0xe2>
 8014e82:	4630      	mov	r0, r6
 8014e84:	f000 fb5b 	bl	801553e <i2c_data_receive>
 8014e88:	f640 77ff 	movw	r7, #4095	; 0xfff
 8014e8c:	f808 0b01 	strb.w	r0, [r8], #1
 8014e90:	3c01      	subs	r4, #1
 8014e92:	3f01      	subs	r7, #1
 8014e94:	d0be      	beq.n	8014e14 <gd32_i2c_read+0x64>
 8014e96:	2c00      	cmp	r4, #0
 8014e98:	d1da      	bne.n	8014e50 <gd32_i2c_read+0xa0>
 8014e9a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8014e9e:	4915      	ldr	r1, [pc, #84]	; (8014ef4 <gd32_i2c_read+0x144>)
 8014ea0:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8014ea4:	0592      	lsls	r2, r2, #22
 8014ea6:	d41d      	bmi.n	8014ee4 <gd32_i2c_read+0x134>
 8014ea8:	2101      	movs	r1, #1
 8014eaa:	4810      	ldr	r0, [pc, #64]	; (8014eec <gd32_i2c_read+0x13c>)
 8014eac:	f000 fb1c 	bl	80154e8 <i2c_ack_config>
 8014eb0:	2101      	movs	r1, #1
 8014eb2:	480e      	ldr	r0, [pc, #56]	; (8014eec <gd32_i2c_read+0x13c>)
 8014eb4:	f000 fb21 	bl	80154fa <i2c_ackpos_config>
 8014eb8:	4628      	mov	r0, r5
 8014eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ebe:	2c02      	cmp	r4, #2
 8014ec0:	d1d9      	bne.n	8014e76 <gd32_i2c_read+0xc6>
 8014ec2:	f640 79ff 	movw	r9, #4095	; 0xfff
 8014ec6:	e002      	b.n	8014ece <gd32_i2c_read+0x11e>
 8014ec8:	f1b9 0901 	subs.w	r9, r9, #1
 8014ecc:	d0a2      	beq.n	8014e14 <gd32_i2c_read+0x64>
 8014ece:	f240 5102 	movw	r1, #1282	; 0x502
 8014ed2:	4630      	mov	r0, r6
 8014ed4:	f000 fb36 	bl	8015544 <i2c_flag_get>
 8014ed8:	2800      	cmp	r0, #0
 8014eda:	d0f5      	beq.n	8014ec8 <gd32_i2c_read+0x118>
 8014edc:	4630      	mov	r0, r6
 8014ede:	f000 fb27 	bl	8015530 <i2c_stop_on_bus>
 8014ee2:	e7c8      	b.n	8014e76 <gd32_i2c_read+0xc6>
 8014ee4:	3b01      	subs	r3, #1
 8014ee6:	d1db      	bne.n	8014ea0 <gd32_i2c_read+0xf0>
 8014ee8:	e796      	b.n	8014e18 <gd32_i2c_read+0x68>
 8014eea:	bf00      	nop
 8014eec:	40005400 	andmi	r5, r0, r0, lsl #8
 8014ef0:	20013294 	mulcs	r1, r4, r2
 8014ef4:	40005000 	andmi	r5, r0, r0

08014ef8 <gd32_uart_begin>:
 8014ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014efa:	461e      	mov	r6, r3
 8014efc:	4b63      	ldr	r3, [pc, #396]	; (801508c <gd32_uart_begin+0x194>)
 8014efe:	4604      	mov	r4, r0
 8014f00:	4298      	cmp	r0, r3
 8014f02:	460f      	mov	r7, r1
 8014f04:	4615      	mov	r5, r2
 8014f06:	d03b      	beq.n	8014f80 <gd32_uart_begin+0x88>
 8014f08:	d80a      	bhi.n	8014f20 <gd32_uart_begin+0x28>
 8014f0a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014f0e:	4298      	cmp	r0, r3
 8014f10:	d02f      	beq.n	8014f72 <gd32_uart_begin+0x7a>
 8014f12:	f240 7012 	movw	r0, #1810	; 0x712
 8014f16:	f7ff fb17 	bl	8014548 <rcu_periph_clock_enable>
 8014f1a:	f240 6004 	movw	r0, #1540	; 0x604
 8014f1e:	e008      	b.n	8014f32 <gd32_uart_begin+0x3a>
 8014f20:	4b5b      	ldr	r3, [pc, #364]	; (8015090 <gd32_uart_begin+0x198>)
 8014f22:	4298      	cmp	r0, r3
 8014f24:	d02f      	beq.n	8014f86 <gd32_uart_begin+0x8e>
 8014f26:	f240 600e 	movw	r0, #1550	; 0x60e
 8014f2a:	f7ff fb0d 	bl	8014548 <rcu_periph_clock_enable>
 8014f2e:	f240 6003 	movw	r0, #1539	; 0x603
 8014f32:	f7ff fb09 	bl	8014548 <rcu_periph_clock_enable>
 8014f36:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8014f3a:	f7ff fb05 	bl	8014548 <rcu_periph_clock_enable>
 8014f3e:	4b53      	ldr	r3, [pc, #332]	; (801508c <gd32_uart_begin+0x194>)
 8014f40:	429c      	cmp	r4, r3
 8014f42:	f000 8084 	beq.w	801504e <gd32_uart_begin+0x156>
 8014f46:	d829      	bhi.n	8014f9c <gd32_uart_begin+0xa4>
 8014f48:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014f4c:	429c      	cmp	r4, r3
 8014f4e:	d071      	beq.n	8015034 <gd32_uart_begin+0x13c>
 8014f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f54:	2203      	movs	r2, #3
 8014f56:	2118      	movs	r1, #24
 8014f58:	484e      	ldr	r0, [pc, #312]	; (8015094 <gd32_uart_begin+0x19c>)
 8014f5a:	f7ff fa5d 	bl	8014418 <gpio_init>
 8014f5e:	2104      	movs	r1, #4
 8014f60:	484c      	ldr	r0, [pc, #304]	; (8015094 <gd32_uart_begin+0x19c>)
 8014f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014f66:	2203      	movs	r2, #3
 8014f68:	f7ff fa56 	bl	8014418 <gpio_init>
 8014f6c:	2101      	movs	r1, #1
 8014f6e:	484a      	ldr	r0, [pc, #296]	; (8015098 <gd32_uart_begin+0x1a0>)
 8014f70:	e025      	b.n	8014fbe <gd32_uart_begin+0xc6>
 8014f72:	f240 7011 	movw	r0, #1809	; 0x711
 8014f76:	f7ff fae7 	bl	8014548 <rcu_periph_clock_enable>
 8014f7a:	f240 6002 	movw	r0, #1538	; 0x602
 8014f7e:	e7d8      	b.n	8014f32 <gd32_uart_begin+0x3a>
 8014f80:	f240 7013 	movw	r0, #1811	; 0x713
 8014f84:	e7c7      	b.n	8014f16 <gd32_uart_begin+0x1e>
 8014f86:	f240 7014 	movw	r0, #1812	; 0x714
 8014f8a:	f7ff fadd 	bl	8014548 <rcu_periph_clock_enable>
 8014f8e:	f240 6004 	movw	r0, #1540	; 0x604
 8014f92:	f7ff fad9 	bl	8014548 <rcu_periph_clock_enable>
 8014f96:	f240 6005 	movw	r0, #1541	; 0x605
 8014f9a:	e7ca      	b.n	8014f32 <gd32_uart_begin+0x3a>
 8014f9c:	4b3c      	ldr	r3, [pc, #240]	; (8015090 <gd32_uart_begin+0x198>)
 8014f9e:	429c      	cmp	r4, r3
 8014fa0:	d062      	beq.n	8015068 <gd32_uart_begin+0x170>
 8014fa2:	2340      	movs	r3, #64	; 0x40
 8014fa4:	2203      	movs	r2, #3
 8014fa6:	2118      	movs	r1, #24
 8014fa8:	483c      	ldr	r0, [pc, #240]	; (801509c <gd32_uart_begin+0x1a4>)
 8014faa:	f7ff fa35 	bl	8014418 <gpio_init>
 8014fae:	2104      	movs	r1, #4
 8014fb0:	483a      	ldr	r0, [pc, #232]	; (801509c <gd32_uart_begin+0x1a4>)
 8014fb2:	2380      	movs	r3, #128	; 0x80
 8014fb4:	2203      	movs	r2, #3
 8014fb6:	f7ff fa2f 	bl	8014418 <gpio_init>
 8014fba:	2101      	movs	r1, #1
 8014fbc:	2004      	movs	r0, #4
 8014fbe:	f7ff fa7f 	bl	80144c0 <gpio_pin_remap_config>
 8014fc2:	4620      	mov	r0, r4
 8014fc4:	f7ff fd0c 	bl	80149e0 <usart_deinit>
 8014fc8:	68e3      	ldr	r3, [r4, #12]
 8014fca:	4639      	mov	r1, r7
 8014fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014fd0:	4620      	mov	r0, r4
 8014fd2:	60e3      	str	r3, [r4, #12]
 8014fd4:	f7ff fd44 	bl	8014a60 <usart_baudrate_set>
 8014fd8:	f1a5 0309 	sub.w	r3, r5, #9
 8014fdc:	4259      	negs	r1, r3
 8014fde:	4159      	adcs	r1, r3
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	0309      	lsls	r1, r1, #12
 8014fe4:	f7ff fd6c 	bl	8014ac0 <usart_word_length_set>
 8014fe8:	9906      	ldr	r1, [sp, #24]
 8014fea:	4620      	mov	r0, r4
 8014fec:	1e8a      	subs	r2, r1, #2
 8014fee:	4251      	negs	r1, r2
 8014ff0:	4151      	adcs	r1, r2
 8014ff2:	0349      	lsls	r1, r1, #13
 8014ff4:	f7ff fd6c 	bl	8014ad0 <usart_stop_bit_set>
 8014ff8:	2e01      	cmp	r6, #1
 8014ffa:	d041      	beq.n	8015080 <gd32_uart_begin+0x188>
 8014ffc:	2e02      	cmp	r6, #2
 8014ffe:	d142      	bne.n	8015086 <gd32_uart_begin+0x18e>
 8015000:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015004:	4620      	mov	r0, r4
 8015006:	f7ff fd53 	bl	8014ab0 <usart_parity_config>
 801500a:	2100      	movs	r1, #0
 801500c:	4620      	mov	r0, r4
 801500e:	f7ff fd73 	bl	8014af8 <usart_hardware_flow_rts_config>
 8015012:	2100      	movs	r1, #0
 8015014:	4620      	mov	r0, r4
 8015016:	f7ff fd75 	bl	8014b04 <usart_hardware_flow_cts_config>
 801501a:	2104      	movs	r1, #4
 801501c:	4620      	mov	r0, r4
 801501e:	f7ff fd65 	bl	8014aec <usart_receive_config>
 8015022:	2108      	movs	r1, #8
 8015024:	4620      	mov	r0, r4
 8015026:	f7ff fd5b 	bl	8014ae0 <usart_transmit_config>
 801502a:	68e3      	ldr	r3, [r4, #12]
 801502c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015030:	60e3      	str	r3, [r4, #12]
 8015032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015034:	2304      	movs	r3, #4
 8015036:	2203      	movs	r2, #3
 8015038:	2118      	movs	r1, #24
 801503a:	4819      	ldr	r0, [pc, #100]	; (80150a0 <gd32_uart_begin+0x1a8>)
 801503c:	f7ff f9ec 	bl	8014418 <gpio_init>
 8015040:	2308      	movs	r3, #8
 8015042:	2203      	movs	r2, #3
 8015044:	2104      	movs	r1, #4
 8015046:	4816      	ldr	r0, [pc, #88]	; (80150a0 <gd32_uart_begin+0x1a8>)
 8015048:	f7ff f9e6 	bl	8014418 <gpio_init>
 801504c:	e7b9      	b.n	8014fc2 <gd32_uart_begin+0xca>
 801504e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015052:	2203      	movs	r2, #3
 8015054:	2118      	movs	r1, #24
 8015056:	480f      	ldr	r0, [pc, #60]	; (8015094 <gd32_uart_begin+0x19c>)
 8015058:	f7ff f9de 	bl	8014418 <gpio_init>
 801505c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015060:	2203      	movs	r2, #3
 8015062:	2104      	movs	r1, #4
 8015064:	480b      	ldr	r0, [pc, #44]	; (8015094 <gd32_uart_begin+0x19c>)
 8015066:	e7ef      	b.n	8015048 <gd32_uart_begin+0x150>
 8015068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801506c:	2203      	movs	r2, #3
 801506e:	2118      	movs	r1, #24
 8015070:	4808      	ldr	r0, [pc, #32]	; (8015094 <gd32_uart_begin+0x19c>)
 8015072:	f7ff f9d1 	bl	8014418 <gpio_init>
 8015076:	2304      	movs	r3, #4
 8015078:	2203      	movs	r2, #3
 801507a:	4619      	mov	r1, r3
 801507c:	4809      	ldr	r0, [pc, #36]	; (80150a4 <gd32_uart_begin+0x1ac>)
 801507e:	e7e3      	b.n	8015048 <gd32_uart_begin+0x150>
 8015080:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8015084:	e7be      	b.n	8015004 <gd32_uart_begin+0x10c>
 8015086:	2100      	movs	r1, #0
 8015088:	e7bc      	b.n	8015004 <gd32_uart_begin+0x10c>
 801508a:	bf00      	nop
 801508c:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015090:	40005000 	andmi	r5, r0, r0
 8015094:	40011000 	andmi	r1, r1, r0
 8015098:	00140010 	andseq	r0, r4, r0, lsl r0
 801509c:	40010c00 	andmi	r0, r1, r0, lsl #24
 80150a0:	40010800 	andmi	r0, r1, r0, lsl #16
 80150a4:	40011400 	andmi	r1, r1, r0, lsl #8

080150a8 <micros_init()>:
 80150a8:	4770      	bx	lr
	...

080150ac <udelay_init()>:
 80150ac:	4a07      	ldr	r2, [pc, #28]	; (80150cc <udelay_init()+0x20>)
 80150ae:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80150b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80150b6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80150ba:	2200      	movs	r2, #0
 80150bc:	4b04      	ldr	r3, [pc, #16]	; (80150d0 <udelay_init()+0x24>)
 80150be:	605a      	str	r2, [r3, #4]
 80150c0:	681a      	ldr	r2, [r3, #0]
 80150c2:	f042 0201 	orr.w	r2, r2, #1
 80150c6:	601a      	str	r2, [r3, #0]
 80150c8:	4770      	bx	lr
 80150ca:	bf00      	nop
 80150cc:	e000ed00 	and	lr, r0, r0, lsl #26
 80150d0:	e0001000 	and	r1, r0, r0

080150d4 <udelay(unsigned int, unsigned int)>:
 80150d4:	236c      	movs	r3, #108	; 0x6c
 80150d6:	b530      	push	{r4, r5, lr}
 80150d8:	4358      	muls	r0, r3
 80150da:	b909      	cbnz	r1, 80150e0 <udelay(unsigned int, unsigned int)+0xc>
 80150dc:	4b08      	ldr	r3, [pc, #32]	; (8015100 <udelay(unsigned int, unsigned int)+0x2c>)
 80150de:	6859      	ldr	r1, [r3, #4]
 80150e0:	2300      	movs	r3, #0
 80150e2:	4c07      	ldr	r4, [pc, #28]	; (8015100 <udelay(unsigned int, unsigned int)+0x2c>)
 80150e4:	6862      	ldr	r2, [r4, #4]
 80150e6:	4291      	cmp	r1, r2
 80150e8:	d0fc      	beq.n	80150e4 <udelay(unsigned int, unsigned int)+0x10>
 80150ea:	bf2a      	itet	cs
 80150ec:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 80150f0:	189b      	addcc	r3, r3, r2
 80150f2:	195b      	addcs	r3, r3, r5
 80150f4:	1a5b      	subs	r3, r3, r1
 80150f6:	4283      	cmp	r3, r0
 80150f8:	d300      	bcc.n	80150fc <udelay(unsigned int, unsigned int)+0x28>
 80150fa:	bd30      	pop	{r4, r5, pc}
 80150fc:	4611      	mov	r1, r2
 80150fe:	e7f1      	b.n	80150e4 <udelay(unsigned int, unsigned int)+0x10>
 8015100:	e0001000 	and	r1, r0, r0

08015104 <emac_start(unsigned char*)>:
 8015104:	b570      	push	{r4, r5, r6, lr}
 8015106:	4605      	mov	r5, r0
 8015108:	f240 6002 	movw	r0, #1538	; 0x602
 801510c:	f7ff fa1c 	bl	8014548 <rcu_periph_clock_enable>
 8015110:	f240 6003 	movw	r0, #1539	; 0x603
 8015114:	f7ff fa18 	bl	8014548 <rcu_periph_clock_enable>
 8015118:	f240 6004 	movw	r0, #1540	; 0x604
 801511c:	f7ff fa14 	bl	8014548 <rcu_periph_clock_enable>
 8015120:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8015124:	f7ff fa10 	bl	8014548 <rcu_periph_clock_enable>
 8015128:	f44f 7380 	mov.w	r3, #256	; 0x100
 801512c:	2203      	movs	r2, #3
 801512e:	2118      	movs	r1, #24
 8015130:	4844      	ldr	r0, [pc, #272]	; (8015244 <emac_start(unsigned char*)+0x140>)
 8015132:	f7ff f971 	bl	8014418 <gpio_init>
 8015136:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801513a:	f7ff fa2f 	bl	801459c <rcu_pll2_config>
 801513e:	201c      	movs	r0, #28
 8015140:	f7ff fac6 	bl	80146d0 <rcu_osci_on>
 8015144:	201c      	movs	r0, #28
 8015146:	f7ff fa63 	bl	8014610 <rcu_osci_stab_wait>
 801514a:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 801514e:	f7ff fa1b 	bl	8014588 <rcu_ckout0_config>
 8015152:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8015156:	f7ff f9e3 	bl	8014520 <gpio_ethernet_phy_select>
 801515a:	2302      	movs	r3, #2
 801515c:	2203      	movs	r2, #3
 801515e:	2104      	movs	r1, #4
 8015160:	4838      	ldr	r0, [pc, #224]	; (8015244 <emac_start(unsigned char*)+0x140>)
 8015162:	f7ff f959 	bl	8014418 <gpio_init>
 8015166:	2304      	movs	r3, #4
 8015168:	2203      	movs	r2, #3
 801516a:	2118      	movs	r1, #24
 801516c:	4835      	ldr	r0, [pc, #212]	; (8015244 <emac_start(unsigned char*)+0x140>)
 801516e:	f7ff f953 	bl	8014418 <gpio_init>
 8015172:	2380      	movs	r3, #128	; 0x80
 8015174:	2203      	movs	r2, #3
 8015176:	2104      	movs	r1, #4
 8015178:	4832      	ldr	r0, [pc, #200]	; (8015244 <emac_start(unsigned char*)+0x140>)
 801517a:	f7ff f94d 	bl	8014418 <gpio_init>
 801517e:	2302      	movs	r3, #2
 8015180:	2203      	movs	r2, #3
 8015182:	2118      	movs	r1, #24
 8015184:	4830      	ldr	r0, [pc, #192]	; (8015248 <emac_start(unsigned char*)+0x144>)
 8015186:	f7ff f947 	bl	8014418 <gpio_init>
 801518a:	2310      	movs	r3, #16
 801518c:	2203      	movs	r2, #3
 801518e:	2104      	movs	r1, #4
 8015190:	482d      	ldr	r0, [pc, #180]	; (8015248 <emac_start(unsigned char*)+0x144>)
 8015192:	f7ff f941 	bl	8014418 <gpio_init>
 8015196:	2320      	movs	r3, #32
 8015198:	2203      	movs	r2, #3
 801519a:	2104      	movs	r1, #4
 801519c:	482a      	ldr	r0, [pc, #168]	; (8015248 <emac_start(unsigned char*)+0x144>)
 801519e:	f7ff f93b 	bl	8014418 <gpio_init>
 80151a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80151a6:	2203      	movs	r2, #3
 80151a8:	2118      	movs	r1, #24
 80151aa:	4828      	ldr	r0, [pc, #160]	; (801524c <emac_start(unsigned char*)+0x148>)
 80151ac:	f7ff f934 	bl	8014418 <gpio_init>
 80151b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80151b4:	2203      	movs	r2, #3
 80151b6:	2118      	movs	r1, #24
 80151b8:	4824      	ldr	r0, [pc, #144]	; (801524c <emac_start(unsigned char*)+0x148>)
 80151ba:	f7ff f92d 	bl	8014418 <gpio_init>
 80151be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80151c2:	2203      	movs	r2, #3
 80151c4:	2118      	movs	r1, #24
 80151c6:	4821      	ldr	r0, [pc, #132]	; (801524c <emac_start(unsigned char*)+0x148>)
 80151c8:	f7ff f926 	bl	8014418 <gpio_init>
 80151cc:	f240 500e 	movw	r0, #1294	; 0x50e
 80151d0:	f7ff f9ba 	bl	8014548 <rcu_periph_clock_enable>
 80151d4:	f240 500f 	movw	r0, #1295	; 0x50f
 80151d8:	f7ff f9b6 	bl	8014548 <rcu_periph_clock_enable>
 80151dc:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 80151e0:	f7ff f9b2 	bl	8014548 <rcu_periph_clock_enable>
 80151e4:	f7ff f880 	bl	80142e8 <enet_deinit>
 80151e8:	f7fe fcde 	bl	8013ba8 <enet_software_reset>
 80151ec:	4604      	mov	r4, r0
 80151ee:	b138      	cbz	r0, 8015200 <emac_start(unsigned char*)+0xfc>
 80151f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80151f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80151f8:	2001      	movs	r0, #1
 80151fa:	f7fe fe59 	bl	8013eb0 <enet_init>
 80151fe:	4604      	mov	r4, r0
 8015200:	4628      	mov	r0, r5
 8015202:	f000 f9bd 	bl	8015580 <mac_address_get(unsigned char*)>
 8015206:	4629      	mov	r1, r5
 8015208:	2000      	movs	r0, #0
 801520a:	f7fe fdb1 	bl	8013d70 <enet_mac_address_set>
 801520e:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8015212:	f7fe fcdd 	bl	8013bd0 <enet_descriptors_chain_init>
 8015216:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 801521a:	f7fe fcd9 	bl	8013bd0 <enet_descriptors_chain_init>
 801521e:	2500      	movs	r5, #0
 8015220:	4e0b      	ldr	r6, [pc, #44]	; (8015250 <emac_start(unsigned char*)+0x14c>)
 8015222:	4630      	mov	r0, r6
 8015224:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8015228:	3501      	adds	r5, #1
 801522a:	f7fe fd9b 	bl	8013d64 <enet_transmit_checksum_config>
 801522e:	2d08      	cmp	r5, #8
 8015230:	f106 0610 	add.w	r6, r6, #16
 8015234:	d1f5      	bne.n	8015222 <emac_start(unsigned char*)+0x11e>
 8015236:	f7fe ffcf 	bl	80141d8 <enet_enable>
 801523a:	fab4 f084 	clz	r0, r4
 801523e:	0940      	lsrs	r0, r0, #5
 8015240:	4240      	negs	r0, r0
 8015242:	bd70      	pop	{r4, r5, r6, pc}
 8015244:	40010800 	andmi	r0, r1, r0, lsl #16
 8015248:	40011000 	andmi	r1, r1, r0
 801524c:	40010c00 	andmi	r0, r1, r0, lsl #24
 8015250:	20013214 	andcs	r3, r1, r4, lsl r2

08015254 <adc_mode_config>:
 8015254:	4b06      	ldr	r3, [pc, #24]	; (8015270 <adc_mode_config+0x1c>)
 8015256:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801525a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 801525e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8015262:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015266:	4302      	orrs	r2, r0
 8015268:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801526c:	4770      	bx	lr
 801526e:	bf00      	nop
 8015270:	40012000 	andmi	r2, r1, r0

08015274 <adc_special_function_config>:
 8015274:	b510      	push	{r4, lr}
 8015276:	f401 7380 	and.w	r3, r1, #256	; 0x100
 801527a:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 801527e:	f001 0102 	and.w	r1, r1, #2
 8015282:	b17a      	cbz	r2, 80152a4 <adc_special_function_config+0x30>
 8015284:	b11b      	cbz	r3, 801528e <adc_special_function_config+0x1a>
 8015286:	6843      	ldr	r3, [r0, #4]
 8015288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801528c:	6043      	str	r3, [r0, #4]
 801528e:	b11c      	cbz	r4, 8015298 <adc_special_function_config+0x24>
 8015290:	6843      	ldr	r3, [r0, #4]
 8015292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015296:	6043      	str	r3, [r0, #4]
 8015298:	b119      	cbz	r1, 80152a2 <adc_special_function_config+0x2e>
 801529a:	6883      	ldr	r3, [r0, #8]
 801529c:	f043 0302 	orr.w	r3, r3, #2
 80152a0:	6083      	str	r3, [r0, #8]
 80152a2:	bd10      	pop	{r4, pc}
 80152a4:	b11b      	cbz	r3, 80152ae <adc_special_function_config+0x3a>
 80152a6:	6843      	ldr	r3, [r0, #4]
 80152a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80152ac:	6043      	str	r3, [r0, #4]
 80152ae:	b11c      	cbz	r4, 80152b8 <adc_special_function_config+0x44>
 80152b0:	6843      	ldr	r3, [r0, #4]
 80152b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80152b6:	6043      	str	r3, [r0, #4]
 80152b8:	2900      	cmp	r1, #0
 80152ba:	d0f2      	beq.n	80152a2 <adc_special_function_config+0x2e>
 80152bc:	6883      	ldr	r3, [r0, #8]
 80152be:	f023 0302 	bic.w	r3, r3, #2
 80152c2:	e7ed      	b.n	80152a0 <adc_special_function_config+0x2c>

080152c4 <adc_data_alignment_config>:
 80152c4:	6883      	ldr	r3, [r0, #8]
 80152c6:	b119      	cbz	r1, 80152d0 <adc_data_alignment_config+0xc>
 80152c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80152cc:	6083      	str	r3, [r0, #8]
 80152ce:	4770      	bx	lr
 80152d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80152d4:	e7fa      	b.n	80152cc <adc_data_alignment_config+0x8>

080152d6 <adc_enable>:
 80152d6:	6883      	ldr	r3, [r0, #8]
 80152d8:	07db      	lsls	r3, r3, #31
 80152da:	bf5e      	ittt	pl
 80152dc:	6883      	ldrpl	r3, [r0, #8]
 80152de:	f043 0301 	orrpl.w	r3, r3, #1
 80152e2:	6083      	strpl	r3, [r0, #8]
 80152e4:	4770      	bx	lr

080152e6 <adc_calibration_enable>:
 80152e6:	6883      	ldr	r3, [r0, #8]
 80152e8:	f100 0208 	add.w	r2, r0, #8
 80152ec:	f043 0308 	orr.w	r3, r3, #8
 80152f0:	6083      	str	r3, [r0, #8]
 80152f2:	6813      	ldr	r3, [r2, #0]
 80152f4:	0719      	lsls	r1, r3, #28
 80152f6:	d4fc      	bmi.n	80152f2 <adc_calibration_enable+0xc>
 80152f8:	6883      	ldr	r3, [r0, #8]
 80152fa:	f043 0304 	orr.w	r3, r3, #4
 80152fe:	6083      	str	r3, [r0, #8]
 8015300:	6813      	ldr	r3, [r2, #0]
 8015302:	075b      	lsls	r3, r3, #29
 8015304:	d4fc      	bmi.n	8015300 <adc_calibration_enable+0x1a>
 8015306:	4770      	bx	lr

08015308 <adc_tempsensor_vrefint_enable>:
 8015308:	4a03      	ldr	r2, [pc, #12]	; (8015318 <adc_tempsensor_vrefint_enable+0x10>)
 801530a:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 801530e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015312:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8015316:	4770      	bx	lr
 8015318:	40012000 	andmi	r2, r1, r0

0801531c <adc_channel_length_config>:
 801531c:	2901      	cmp	r1, #1
 801531e:	d002      	beq.n	8015326 <adc_channel_length_config+0xa>
 8015320:	2902      	cmp	r1, #2
 8015322:	d00c      	beq.n	801533e <adc_channel_length_config+0x22>
 8015324:	4770      	bx	lr
 8015326:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015328:	3a01      	subs	r2, #1
 801532a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801532e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8015330:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015332:	0512      	lsls	r2, r2, #20
 8015334:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 8015338:	431a      	orrs	r2, r3
 801533a:	62c2      	str	r2, [r0, #44]	; 0x2c
 801533c:	4770      	bx	lr
 801533e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8015340:	3a01      	subs	r2, #1
 8015342:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8015346:	6383      	str	r3, [r0, #56]	; 0x38
 8015348:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801534a:	0512      	lsls	r2, r2, #20
 801534c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8015350:	431a      	orrs	r2, r3
 8015352:	6382      	str	r2, [r0, #56]	; 0x38
 8015354:	4770      	bx	lr

08015356 <adc_inserted_channel_config>:
 8015356:	b530      	push	{r4, r5, lr}
 8015358:	6b84      	ldr	r4, [r0, #56]	; 0x38
 801535a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 801535c:	f3c4 5401 	ubfx	r4, r4, #20, #2
 8015360:	1a61      	subs	r1, r4, r1
 8015362:	f06f 0404 	mvn.w	r4, #4
 8015366:	4361      	muls	r1, r4
 8015368:	241f      	movs	r4, #31
 801536a:	310f      	adds	r1, #15
 801536c:	408c      	lsls	r4, r1
 801536e:	ea25 0504 	bic.w	r5, r5, r4
 8015372:	fa02 f101 	lsl.w	r1, r2, r1
 8015376:	4329      	orrs	r1, r5
 8015378:	2a09      	cmp	r2, #9
 801537a:	6381      	str	r1, [r0, #56]	; 0x38
 801537c:	d80b      	bhi.n	8015396 <adc_inserted_channel_config+0x40>
 801537e:	2407      	movs	r4, #7
 8015380:	6901      	ldr	r1, [r0, #16]
 8015382:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015386:	4094      	lsls	r4, r2
 8015388:	ea21 0104 	bic.w	r1, r1, r4
 801538c:	fa03 f202 	lsl.w	r2, r3, r2
 8015390:	430a      	orrs	r2, r1
 8015392:	6102      	str	r2, [r0, #16]
 8015394:	bd30      	pop	{r4, r5, pc}
 8015396:	2a11      	cmp	r2, #17
 8015398:	d8fc      	bhi.n	8015394 <adc_inserted_channel_config+0x3e>
 801539a:	2407      	movs	r4, #7
 801539c:	3a0a      	subs	r2, #10
 801539e:	68c1      	ldr	r1, [r0, #12]
 80153a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80153a4:	4094      	lsls	r4, r2
 80153a6:	ea21 0104 	bic.w	r1, r1, r4
 80153aa:	4093      	lsls	r3, r2
 80153ac:	430b      	orrs	r3, r1
 80153ae:	60c3      	str	r3, [r0, #12]
 80153b0:	e7f0      	b.n	8015394 <adc_inserted_channel_config+0x3e>

080153b2 <adc_external_trigger_source_config>:
 80153b2:	2901      	cmp	r1, #1
 80153b4:	d002      	beq.n	80153bc <adc_external_trigger_source_config+0xa>
 80153b6:	2902      	cmp	r1, #2
 80153b8:	d008      	beq.n	80153cc <adc_external_trigger_source_config+0x1a>
 80153ba:	4770      	bx	lr
 80153bc:	6883      	ldr	r3, [r0, #8]
 80153be:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80153c2:	6083      	str	r3, [r0, #8]
 80153c4:	6883      	ldr	r3, [r0, #8]
 80153c6:	4313      	orrs	r3, r2
 80153c8:	6083      	str	r3, [r0, #8]
 80153ca:	4770      	bx	lr
 80153cc:	6883      	ldr	r3, [r0, #8]
 80153ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80153d2:	e7f6      	b.n	80153c2 <adc_external_trigger_source_config+0x10>

080153d4 <adc_external_trigger_config>:
 80153d4:	f001 0301 	and.w	r3, r1, #1
 80153d8:	f001 0102 	and.w	r1, r1, #2
 80153dc:	b152      	cbz	r2, 80153f4 <adc_external_trigger_config+0x20>
 80153de:	b11b      	cbz	r3, 80153e8 <adc_external_trigger_config+0x14>
 80153e0:	6883      	ldr	r3, [r0, #8]
 80153e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80153e6:	6083      	str	r3, [r0, #8]
 80153e8:	b119      	cbz	r1, 80153f2 <adc_external_trigger_config+0x1e>
 80153ea:	6883      	ldr	r3, [r0, #8]
 80153ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80153f0:	6083      	str	r3, [r0, #8]
 80153f2:	4770      	bx	lr
 80153f4:	b11b      	cbz	r3, 80153fe <adc_external_trigger_config+0x2a>
 80153f6:	6883      	ldr	r3, [r0, #8]
 80153f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80153fc:	6083      	str	r3, [r0, #8]
 80153fe:	2900      	cmp	r1, #0
 8015400:	d0f7      	beq.n	80153f2 <adc_external_trigger_config+0x1e>
 8015402:	6883      	ldr	r3, [r0, #8]
 8015404:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8015408:	e7f2      	b.n	80153f0 <adc_external_trigger_config+0x1c>

0801540a <adc_software_trigger_enable>:
 801540a:	07ca      	lsls	r2, r1, #31
 801540c:	bf42      	ittt	mi
 801540e:	6883      	ldrmi	r3, [r0, #8]
 8015410:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8015414:	6083      	strmi	r3, [r0, #8]
 8015416:	078b      	lsls	r3, r1, #30
 8015418:	bf42      	ittt	mi
 801541a:	6883      	ldrmi	r3, [r0, #8]
 801541c:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8015420:	6083      	strmi	r3, [r0, #8]
 8015422:	4770      	bx	lr

08015424 <i2c_clock_config>:
 8015424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015426:	4605      	mov	r5, r0
 8015428:	2002      	movs	r0, #2
 801542a:	460c      	mov	r4, r1
 801542c:	4617      	mov	r7, r2
 801542e:	f7ff f951 	bl	80146d4 <rcu_clock_freq_get>
 8015432:	4603      	mov	r3, r0
 8015434:	4828      	ldr	r0, [pc, #160]	; (80154d8 <i2c_clock_config+0xb4>)
 8015436:	4a29      	ldr	r2, [pc, #164]	; (80154dc <i2c_clock_config+0xb8>)
 8015438:	fbb3 f0f0 	udiv	r0, r3, r0
 801543c:	4293      	cmp	r3, r2
 801543e:	bf34      	ite	cc
 8015440:	4601      	movcc	r1, r0
 8015442:	2136      	movcs	r1, #54	; 0x36
 8015444:	686e      	ldr	r6, [r5, #4]
 8015446:	4a26      	ldr	r2, [pc, #152]	; (80154e0 <i2c_clock_config+0xbc>)
 8015448:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 801544c:	430e      	orrs	r6, r1
 801544e:	4294      	cmp	r4, r2
 8015450:	606e      	str	r6, [r5, #4]
 8015452:	d816      	bhi.n	8015482 <i2c_clock_config+0x5e>
 8015454:	3001      	adds	r0, #1
 8015456:	2835      	cmp	r0, #53	; 0x35
 8015458:	d90d      	bls.n	8015476 <i2c_clock_config+0x52>
 801545a:	2236      	movs	r2, #54	; 0x36
 801545c:	622a      	str	r2, [r5, #32]
 801545e:	0064      	lsls	r4, r4, #1
 8015460:	fbb3 f4f4 	udiv	r4, r3, r4
 8015464:	2c04      	cmp	r4, #4
 8015466:	bf38      	it	cc
 8015468:	2404      	movcc	r4, #4
 801546a:	69ea      	ldr	r2, [r5, #28]
 801546c:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8015470:	4314      	orrs	r4, r2
 8015472:	61ec      	str	r4, [r5, #28]
 8015474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015476:	2802      	cmp	r0, #2
 8015478:	d801      	bhi.n	801547e <i2c_clock_config+0x5a>
 801547a:	2202      	movs	r2, #2
 801547c:	e7ee      	b.n	801545c <i2c_clock_config+0x38>
 801547e:	6228      	str	r0, [r5, #32]
 8015480:	e7ed      	b.n	801545e <i2c_clock_config+0x3a>
 8015482:	4a18      	ldr	r2, [pc, #96]	; (80154e4 <i2c_clock_config+0xc0>)
 8015484:	4294      	cmp	r4, r2
 8015486:	d8f5      	bhi.n	8015474 <i2c_clock_config+0x50>
 8015488:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801548c:	4351      	muls	r1, r2
 801548e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015492:	fbb1 f1f2 	udiv	r1, r1, r2
 8015496:	3101      	adds	r1, #1
 8015498:	6229      	str	r1, [r5, #32]
 801549a:	b9a7      	cbnz	r7, 80154c6 <i2c_clock_config+0xa2>
 801549c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80154a0:	fbb3 f4f4 	udiv	r4, r3, r4
 80154a4:	69eb      	ldr	r3, [r5, #28]
 80154a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80154aa:	61eb      	str	r3, [r5, #28]
 80154ac:	f3c4 030b 	ubfx	r3, r4, #0, #12
 80154b0:	b90b      	cbnz	r3, 80154b6 <i2c_clock_config+0x92>
 80154b2:	f044 0401 	orr.w	r4, r4, #1
 80154b6:	69eb      	ldr	r3, [r5, #28]
 80154b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80154bc:	61eb      	str	r3, [r5, #28]
 80154be:	69eb      	ldr	r3, [r5, #28]
 80154c0:	4323      	orrs	r3, r4
 80154c2:	61eb      	str	r3, [r5, #28]
 80154c4:	e7d6      	b.n	8015474 <i2c_clock_config+0x50>
 80154c6:	2219      	movs	r2, #25
 80154c8:	4354      	muls	r4, r2
 80154ca:	fbb3 f4f4 	udiv	r4, r3, r4
 80154ce:	69eb      	ldr	r3, [r5, #28]
 80154d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80154d4:	e7e9      	b.n	80154aa <i2c_clock_config+0x86>
 80154d6:	bf00      	nop
 80154d8:	000f4240 	andeq	r4, pc, r0, asr #4
 80154dc:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 80154e0:	000186a0 	andeq	r8, r1, r0, lsr #13
 80154e4:	00061a80 	andeq	r1, r6, r0, lsl #21

080154e8 <i2c_ack_config>:
 80154e8:	6803      	ldr	r3, [r0, #0]
 80154ea:	2901      	cmp	r1, #1
 80154ec:	bf0c      	ite	eq
 80154ee:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 80154f2:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80154f6:	6003      	str	r3, [r0, #0]
 80154f8:	4770      	bx	lr

080154fa <i2c_ackpos_config>:
 80154fa:	6803      	ldr	r3, [r0, #0]
 80154fc:	b919      	cbnz	r1, 8015506 <i2c_ackpos_config+0xc>
 80154fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015502:	6003      	str	r3, [r0, #0]
 8015504:	4770      	bx	lr
 8015506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801550a:	e7fa      	b.n	8015502 <i2c_ackpos_config+0x8>

0801550c <i2c_master_addressing>:
 801550c:	3202      	adds	r2, #2
 801550e:	bf0c      	ite	eq
 8015510:	f021 0101 	biceq.w	r1, r1, #1
 8015514:	f041 0101 	orrne.w	r1, r1, #1
 8015518:	6101      	str	r1, [r0, #16]
 801551a:	4770      	bx	lr

0801551c <i2c_enable>:
 801551c:	6803      	ldr	r3, [r0, #0]
 801551e:	f043 0301 	orr.w	r3, r3, #1
 8015522:	6003      	str	r3, [r0, #0]
 8015524:	4770      	bx	lr

08015526 <i2c_start_on_bus>:
 8015526:	6803      	ldr	r3, [r0, #0]
 8015528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801552c:	6003      	str	r3, [r0, #0]
 801552e:	4770      	bx	lr

08015530 <i2c_stop_on_bus>:
 8015530:	6803      	ldr	r3, [r0, #0]
 8015532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015536:	6003      	str	r3, [r0, #0]
 8015538:	4770      	bx	lr

0801553a <i2c_data_transmit>:
 801553a:	6101      	str	r1, [r0, #16]
 801553c:	4770      	bx	lr

0801553e <i2c_data_receive>:
 801553e:	6900      	ldr	r0, [r0, #16]
 8015540:	b2c0      	uxtb	r0, r0
 8015542:	4770      	bx	lr

08015544 <i2c_flag_get>:
 8015544:	098b      	lsrs	r3, r1, #6
 8015546:	581a      	ldr	r2, [r3, r0]
 8015548:	2301      	movs	r3, #1
 801554a:	f001 011f 	and.w	r1, r1, #31
 801554e:	408b      	lsls	r3, r1
 8015550:	4213      	tst	r3, r2
 8015552:	bf14      	ite	ne
 8015554:	2001      	movne	r0, #1
 8015556:	2000      	moveq	r0, #0
 8015558:	4770      	bx	lr

0801555a <i2c_flag_clear>:
 801555a:	f240 5301 	movw	r3, #1281	; 0x501
 801555e:	4299      	cmp	r1, r3
 8015560:	b510      	push	{r4, lr}
 8015562:	d102      	bne.n	801556a <i2c_flag_clear+0x10>
 8015564:	6943      	ldr	r3, [r0, #20]
 8015566:	6983      	ldr	r3, [r0, #24]
 8015568:	bd10      	pop	{r4, pc}
 801556a:	2201      	movs	r2, #1
 801556c:	098c      	lsrs	r4, r1, #6
 801556e:	5823      	ldr	r3, [r4, r0]
 8015570:	f001 011f 	and.w	r1, r1, #31
 8015574:	408a      	lsls	r2, r1
 8015576:	ea23 0302 	bic.w	r3, r3, r2
 801557a:	5023      	str	r3, [r4, r0]
 801557c:	e7f4      	b.n	8015568 <i2c_flag_clear+0xe>
	...

08015580 <mac_address_get(unsigned char*)>:
 8015580:	2102      	movs	r1, #2
 8015582:	4a07      	ldr	r2, [pc, #28]	; (80155a0 <mac_address_get(unsigned char*)+0x20>)
 8015584:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8015588:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 801558c:	7001      	strb	r1, [r0, #0]
 801558e:	7042      	strb	r2, [r0, #1]
 8015590:	0e1a      	lsrs	r2, r3, #24
 8015592:	7082      	strb	r2, [r0, #2]
 8015594:	0c1a      	lsrs	r2, r3, #16
 8015596:	70c2      	strb	r2, [r0, #3]
 8015598:	0a1a      	lsrs	r2, r3, #8
 801559a:	7102      	strb	r2, [r0, #4]
 801559c:	7143      	strb	r3, [r0, #5]
 801559e:	4770      	bx	lr
 80155a0:	1ffff000 	svcne	0x00fff000

080155a4 <__popcountsi2>:
 80155a4:	0843      	lsrs	r3, r0, #1
 80155a6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80155aa:	1ac0      	subs	r0, r0, r3
 80155ac:	0883      	lsrs	r3, r0, #2
 80155ae:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80155b2:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80155b6:	4418      	add	r0, r3
 80155b8:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80155bc:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80155c0:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80155c4:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80155c8:	0e00      	lsrs	r0, r0, #24
 80155ca:	4770      	bx	lr

080155cc <__udivmoddi4>:
 80155cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155d0:	9e08      	ldr	r6, [sp, #32]
 80155d2:	460d      	mov	r5, r1
 80155d4:	4604      	mov	r4, r0
 80155d6:	468e      	mov	lr, r1
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d14c      	bne.n	8015676 <__udivmoddi4+0xaa>
 80155dc:	428a      	cmp	r2, r1
 80155de:	4694      	mov	ip, r2
 80155e0:	d967      	bls.n	80156b2 <__udivmoddi4+0xe6>
 80155e2:	fab2 f382 	clz	r3, r2
 80155e6:	b153      	cbz	r3, 80155fe <__udivmoddi4+0x32>
 80155e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80155ec:	f1c3 0220 	rsb	r2, r3, #32
 80155f0:	fa01 fe03 	lsl.w	lr, r1, r3
 80155f4:	fa20 f202 	lsr.w	r2, r0, r2
 80155f8:	ea42 0e0e 	orr.w	lr, r2, lr
 80155fc:	409c      	lsls	r4, r3
 80155fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8015602:	fbbe f1f7 	udiv	r1, lr, r7
 8015606:	fa1f f58c 	uxth.w	r5, ip
 801560a:	fb07 ee11 	mls	lr, r7, r1, lr
 801560e:	fb01 f005 	mul.w	r0, r1, r5
 8015612:	0c22      	lsrs	r2, r4, #16
 8015614:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8015618:	4290      	cmp	r0, r2
 801561a:	d90a      	bls.n	8015632 <__udivmoddi4+0x66>
 801561c:	eb1c 0202 	adds.w	r2, ip, r2
 8015620:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8015624:	f080 8119 	bcs.w	801585a <__udivmoddi4+0x28e>
 8015628:	4290      	cmp	r0, r2
 801562a:	f240 8116 	bls.w	801585a <__udivmoddi4+0x28e>
 801562e:	3902      	subs	r1, #2
 8015630:	4462      	add	r2, ip
 8015632:	1a12      	subs	r2, r2, r0
 8015634:	fbb2 f0f7 	udiv	r0, r2, r7
 8015638:	fb07 2210 	mls	r2, r7, r0, r2
 801563c:	fb00 f505 	mul.w	r5, r0, r5
 8015640:	b2a4      	uxth	r4, r4
 8015642:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015646:	42a5      	cmp	r5, r4
 8015648:	d90a      	bls.n	8015660 <__udivmoddi4+0x94>
 801564a:	eb1c 0404 	adds.w	r4, ip, r4
 801564e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8015652:	f080 8104 	bcs.w	801585e <__udivmoddi4+0x292>
 8015656:	42a5      	cmp	r5, r4
 8015658:	f240 8101 	bls.w	801585e <__udivmoddi4+0x292>
 801565c:	4464      	add	r4, ip
 801565e:	3802      	subs	r0, #2
 8015660:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8015664:	2100      	movs	r1, #0
 8015666:	1b64      	subs	r4, r4, r5
 8015668:	b11e      	cbz	r6, 8015672 <__udivmoddi4+0xa6>
 801566a:	40dc      	lsrs	r4, r3
 801566c:	2300      	movs	r3, #0
 801566e:	e9c6 4300 	strd	r4, r3, [r6]
 8015672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015676:	428b      	cmp	r3, r1
 8015678:	d908      	bls.n	801568c <__udivmoddi4+0xc0>
 801567a:	2e00      	cmp	r6, #0
 801567c:	f000 80ea 	beq.w	8015854 <__udivmoddi4+0x288>
 8015680:	2100      	movs	r1, #0
 8015682:	e9c6 0500 	strd	r0, r5, [r6]
 8015686:	4608      	mov	r0, r1
 8015688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801568c:	fab3 f183 	clz	r1, r3
 8015690:	2900      	cmp	r1, #0
 8015692:	d148      	bne.n	8015726 <__udivmoddi4+0x15a>
 8015694:	42ab      	cmp	r3, r5
 8015696:	d302      	bcc.n	801569e <__udivmoddi4+0xd2>
 8015698:	4282      	cmp	r2, r0
 801569a:	f200 80f8 	bhi.w	801588e <__udivmoddi4+0x2c2>
 801569e:	1a84      	subs	r4, r0, r2
 80156a0:	eb65 0203 	sbc.w	r2, r5, r3
 80156a4:	2001      	movs	r0, #1
 80156a6:	4696      	mov	lr, r2
 80156a8:	2e00      	cmp	r6, #0
 80156aa:	d0e2      	beq.n	8015672 <__udivmoddi4+0xa6>
 80156ac:	e9c6 4e00 	strd	r4, lr, [r6]
 80156b0:	e7df      	b.n	8015672 <__udivmoddi4+0xa6>
 80156b2:	b902      	cbnz	r2, 80156b6 <__udivmoddi4+0xea>
 80156b4:	deff      	udf	#255	; 0xff
 80156b6:	fab2 f382 	clz	r3, r2
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	f040 808e 	bne.w	80157dc <__udivmoddi4+0x210>
 80156c0:	1a88      	subs	r0, r1, r2
 80156c2:	2101      	movs	r1, #1
 80156c4:	0c17      	lsrs	r7, r2, #16
 80156c6:	fa1f fe82 	uxth.w	lr, r2
 80156ca:	fbb0 f5f7 	udiv	r5, r0, r7
 80156ce:	fb07 0015 	mls	r0, r7, r5, r0
 80156d2:	0c22      	lsrs	r2, r4, #16
 80156d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80156d8:	fb0e f005 	mul.w	r0, lr, r5
 80156dc:	4290      	cmp	r0, r2
 80156de:	d908      	bls.n	80156f2 <__udivmoddi4+0x126>
 80156e0:	eb1c 0202 	adds.w	r2, ip, r2
 80156e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80156e8:	d202      	bcs.n	80156f0 <__udivmoddi4+0x124>
 80156ea:	4290      	cmp	r0, r2
 80156ec:	f200 80cc 	bhi.w	8015888 <__udivmoddi4+0x2bc>
 80156f0:	4645      	mov	r5, r8
 80156f2:	1a12      	subs	r2, r2, r0
 80156f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80156f8:	fb07 2210 	mls	r2, r7, r0, r2
 80156fc:	fb0e fe00 	mul.w	lr, lr, r0
 8015700:	b2a4      	uxth	r4, r4
 8015702:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015706:	45a6      	cmp	lr, r4
 8015708:	d908      	bls.n	801571c <__udivmoddi4+0x150>
 801570a:	eb1c 0404 	adds.w	r4, ip, r4
 801570e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8015712:	d202      	bcs.n	801571a <__udivmoddi4+0x14e>
 8015714:	45a6      	cmp	lr, r4
 8015716:	f200 80b4 	bhi.w	8015882 <__udivmoddi4+0x2b6>
 801571a:	4610      	mov	r0, r2
 801571c:	eba4 040e 	sub.w	r4, r4, lr
 8015720:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8015724:	e7a0      	b.n	8015668 <__udivmoddi4+0x9c>
 8015726:	f1c1 0720 	rsb	r7, r1, #32
 801572a:	408b      	lsls	r3, r1
 801572c:	fa22 fc07 	lsr.w	ip, r2, r7
 8015730:	ea4c 0c03 	orr.w	ip, ip, r3
 8015734:	fa25 fa07 	lsr.w	sl, r5, r7
 8015738:	ea4f 491c 	mov.w	r9, ip, lsr #16
 801573c:	fbba f8f9 	udiv	r8, sl, r9
 8015740:	408d      	lsls	r5, r1
 8015742:	fa20 f307 	lsr.w	r3, r0, r7
 8015746:	fb09 aa18 	mls	sl, r9, r8, sl
 801574a:	fa1f fe8c 	uxth.w	lr, ip
 801574e:	432b      	orrs	r3, r5
 8015750:	fa00 f501 	lsl.w	r5, r0, r1
 8015754:	fb08 f00e 	mul.w	r0, r8, lr
 8015758:	0c1c      	lsrs	r4, r3, #16
 801575a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801575e:	42a0      	cmp	r0, r4
 8015760:	fa02 f201 	lsl.w	r2, r2, r1
 8015764:	d90b      	bls.n	801577e <__udivmoddi4+0x1b2>
 8015766:	eb1c 0404 	adds.w	r4, ip, r4
 801576a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 801576e:	f080 8086 	bcs.w	801587e <__udivmoddi4+0x2b2>
 8015772:	42a0      	cmp	r0, r4
 8015774:	f240 8083 	bls.w	801587e <__udivmoddi4+0x2b2>
 8015778:	f1a8 0802 	sub.w	r8, r8, #2
 801577c:	4464      	add	r4, ip
 801577e:	1a24      	subs	r4, r4, r0
 8015780:	b298      	uxth	r0, r3
 8015782:	fbb4 f3f9 	udiv	r3, r4, r9
 8015786:	fb09 4413 	mls	r4, r9, r3, r4
 801578a:	fb03 fe0e 	mul.w	lr, r3, lr
 801578e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8015792:	45a6      	cmp	lr, r4
 8015794:	d908      	bls.n	80157a8 <__udivmoddi4+0x1dc>
 8015796:	eb1c 0404 	adds.w	r4, ip, r4
 801579a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 801579e:	d26a      	bcs.n	8015876 <__udivmoddi4+0x2aa>
 80157a0:	45a6      	cmp	lr, r4
 80157a2:	d968      	bls.n	8015876 <__udivmoddi4+0x2aa>
 80157a4:	3b02      	subs	r3, #2
 80157a6:	4464      	add	r4, ip
 80157a8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80157ac:	fba0 9302 	umull	r9, r3, r0, r2
 80157b0:	eba4 040e 	sub.w	r4, r4, lr
 80157b4:	429c      	cmp	r4, r3
 80157b6:	46c8      	mov	r8, r9
 80157b8:	469e      	mov	lr, r3
 80157ba:	d354      	bcc.n	8015866 <__udivmoddi4+0x29a>
 80157bc:	d051      	beq.n	8015862 <__udivmoddi4+0x296>
 80157be:	2e00      	cmp	r6, #0
 80157c0:	d067      	beq.n	8015892 <__udivmoddi4+0x2c6>
 80157c2:	ebb5 0308 	subs.w	r3, r5, r8
 80157c6:	eb64 040e 	sbc.w	r4, r4, lr
 80157ca:	40cb      	lsrs	r3, r1
 80157cc:	fa04 f707 	lsl.w	r7, r4, r7
 80157d0:	431f      	orrs	r7, r3
 80157d2:	40cc      	lsrs	r4, r1
 80157d4:	e9c6 7400 	strd	r7, r4, [r6]
 80157d8:	2100      	movs	r1, #0
 80157da:	e74a      	b.n	8015672 <__udivmoddi4+0xa6>
 80157dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80157e0:	f1c3 0020 	rsb	r0, r3, #32
 80157e4:	40c1      	lsrs	r1, r0
 80157e6:	409d      	lsls	r5, r3
 80157e8:	fa24 f000 	lsr.w	r0, r4, r0
 80157ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80157f0:	4328      	orrs	r0, r5
 80157f2:	fbb1 f5f7 	udiv	r5, r1, r7
 80157f6:	fb07 1115 	mls	r1, r7, r5, r1
 80157fa:	fa1f fe8c 	uxth.w	lr, ip
 80157fe:	0c02      	lsrs	r2, r0, #16
 8015800:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015804:	fb05 f10e 	mul.w	r1, r5, lr
 8015808:	4291      	cmp	r1, r2
 801580a:	fa04 f403 	lsl.w	r4, r4, r3
 801580e:	d908      	bls.n	8015822 <__udivmoddi4+0x256>
 8015810:	eb1c 0202 	adds.w	r2, ip, r2
 8015814:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8015818:	d22f      	bcs.n	801587a <__udivmoddi4+0x2ae>
 801581a:	4291      	cmp	r1, r2
 801581c:	d92d      	bls.n	801587a <__udivmoddi4+0x2ae>
 801581e:	3d02      	subs	r5, #2
 8015820:	4462      	add	r2, ip
 8015822:	1a52      	subs	r2, r2, r1
 8015824:	fbb2 f1f7 	udiv	r1, r2, r7
 8015828:	fb07 2211 	mls	r2, r7, r1, r2
 801582c:	b280      	uxth	r0, r0
 801582e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8015832:	fb01 f20e 	mul.w	r2, r1, lr
 8015836:	4282      	cmp	r2, r0
 8015838:	d908      	bls.n	801584c <__udivmoddi4+0x280>
 801583a:	eb1c 0000 	adds.w	r0, ip, r0
 801583e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8015842:	d216      	bcs.n	8015872 <__udivmoddi4+0x2a6>
 8015844:	4282      	cmp	r2, r0
 8015846:	d914      	bls.n	8015872 <__udivmoddi4+0x2a6>
 8015848:	3902      	subs	r1, #2
 801584a:	4460      	add	r0, ip
 801584c:	1a80      	subs	r0, r0, r2
 801584e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8015852:	e73a      	b.n	80156ca <__udivmoddi4+0xfe>
 8015854:	4631      	mov	r1, r6
 8015856:	4630      	mov	r0, r6
 8015858:	e70b      	b.n	8015672 <__udivmoddi4+0xa6>
 801585a:	4671      	mov	r1, lr
 801585c:	e6e9      	b.n	8015632 <__udivmoddi4+0x66>
 801585e:	4610      	mov	r0, r2
 8015860:	e6fe      	b.n	8015660 <__udivmoddi4+0x94>
 8015862:	454d      	cmp	r5, r9
 8015864:	d2ab      	bcs.n	80157be <__udivmoddi4+0x1f2>
 8015866:	ebb9 0802 	subs.w	r8, r9, r2
 801586a:	eb63 0e0c 	sbc.w	lr, r3, ip
 801586e:	3801      	subs	r0, #1
 8015870:	e7a5      	b.n	80157be <__udivmoddi4+0x1f2>
 8015872:	4641      	mov	r1, r8
 8015874:	e7ea      	b.n	801584c <__udivmoddi4+0x280>
 8015876:	4603      	mov	r3, r0
 8015878:	e796      	b.n	80157a8 <__udivmoddi4+0x1dc>
 801587a:	4645      	mov	r5, r8
 801587c:	e7d1      	b.n	8015822 <__udivmoddi4+0x256>
 801587e:	46d0      	mov	r8, sl
 8015880:	e77d      	b.n	801577e <__udivmoddi4+0x1b2>
 8015882:	4464      	add	r4, ip
 8015884:	3802      	subs	r0, #2
 8015886:	e749      	b.n	801571c <__udivmoddi4+0x150>
 8015888:	3d02      	subs	r5, #2
 801588a:	4462      	add	r2, ip
 801588c:	e731      	b.n	80156f2 <__udivmoddi4+0x126>
 801588e:	4608      	mov	r0, r1
 8015890:	e70a      	b.n	80156a8 <__udivmoddi4+0xdc>
 8015892:	4631      	mov	r1, r6
 8015894:	e6ed      	b.n	8015672 <__udivmoddi4+0xa6>
 8015896:	bf00      	nop

Disassembly of section .rodata:

08015898 <vtable for DisplayHandler-0xd4>:
 8015898:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801589c:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 80158a8:	03020100 	movweq	r0, #8448	; 0x2100
 80158ac:	08070604 	stmdaeq	r7, {r2, r9, sl}
 80158b0:	00000009 	andeq	r0, r0, r9
 80158b4:	03020100 	movweq	r0, #8448	; 0x2100
 80158b8:	584d4404 	stmdapl	sp, {r2, sl, lr}^
 80158bc:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 80158c0:	00747570 	rsbseq	r7, r4, r0, ror r5
 80158c4:	20584d44 	subscs	r4, r8, r4, asr #26
 80158c8:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
 80158cc:	31310074 	teqcc	r1, r4, ror r0
 80158d0:	3a35313a 	bcc	8d61dc0 <__exidx_end+0xd4a248>
 80158d4:	44003534 	strmi	r3, [r0], #-1332	; 0xfffffacc
 80158d8:	32206365 	eorcc	r6, r0, #-1811939327	; 0x94000001
 80158dc:	30322035 	eorscc	r2, r2, r5, lsr r0
 80158e0:	1b003232 	blne	80221b0 <__exidx_end+0xa638>
 80158e4:	6d32335b 	ldcvs	3, cr3, [r2, #-364]!	; 0xfffffe94
 80158e8:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80158ec:	2074654e 	rsbscs	r6, r4, lr, asr #10
 80158f0:	4d442034 	stclmi	0, cr2, [r4, #-208]	; 0xffffff30
 80158f4:	44522f58 	ldrbmi	r2, [r2], #-3928	; 0xfffff0a8
 80158f8:	6f63204d 	svcvs	0x0063204d
 80158fc:	6f72746e 	svcvs	0x0072746e
 8015900:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 8015904:	20317b20 	eorscs	r7, r1, r0, lsr #22
 8015908:	76696e55 			; <UNDEFINED> instruction: 0x76696e55
 801590c:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8015910:	335b1b7d 	cmpcc	fp, #128000	; 0x1f400
 8015914:	2e006d37 	mcrcs	13, 0, r6, cr0, cr7, {1}
 8015918:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 801591c:	00676966 	rsbeq	r6, r7, r6, ror #18
 8015920:	74685f2e 	strbtvc	r5, [r8], #-3886	; 0xfffff0d2
 8015924:	6e007074 	mcrvs	0, 0, r7, cr0, cr4, {3}
 8015928:	3d65646f 	cfstrdcc	mvd6, [r5, #-444]!	; 0xfffffe44
 801592c:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015930:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8015934:	4d442034 	stclmi	0, cr2, [r4, #-208]	; 0xffffff30
 8015938:	44522f58 	ldrbmi	r2, [r2], #-3928	; 0xfffff0a8
 801593c:	7241004d 	subvc	r0, r1, #77	; 0x4d
 8015940:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8015944:	20342074 	eorscs	r2, r4, r4, ror r0
 8015948:	64007325 	strvs	r7, [r0], #-805	; 0xfffffcdb
 801594c:	0021786d 	eoreq	r7, r1, sp, ror #16
 8015950:	61657262 	cmnvs	r5, r2, ror #4
 8015954:	6d00236b 	stcvs	3, cr2, [r0, #-428]	; 0xfffffe54
 8015958:	00236261 	eoreq	r6, r3, r1, ror #4
 801595c:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 8015960:	23687365 	cmncs	r8, #-1811939327	; 0x94000001
 8015964:	6f6c7300 	svcvs	0x006c7300
 8015968:	00237374 	eoreq	r7, r3, r4, ror r3

0801596c <vtable for DisplayHandler>:
	...
 8015974:	08007b87 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, fp, ip, sp, lr}
 8015978:	08007bad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, r9, fp, ip, sp, lr}
 801597c:	08007bcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, fp, ip, sp, lr}

08015980 <CSWTCH.98>:
 8015980:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8015984:	 	strtcc	r3, [lr], #-326	; 0xfffffeba

08015985 <SOFTWARE_VERSION>:
 8015985:	00342e31 	eorseq	r2, r4, r1, lsr lr
 8015989:	 	andeq	r0, r0, r0

0801598c <vtable for DmxInput>:
	...
 8015994:	080082f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, pc}
 8015998:	08008391 	stmdaeq	r0, {r0, r4, r7, r8, r9, pc}
 801599c:	080082f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, pc}
 80159a0:	08008329 	stmdaeq	r0, {r0, r3, r5, r8, r9, pc}
 80159a4:	0800835d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, pc}
 80159a8:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80159ac:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80159b0:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 80159b4:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 80159b8:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 80159bc:	0a73252c 	beq	9cdee74 <__exidx_end+0x1cc72fc>
 80159c0:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 80159c4:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80159c8:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80159cc:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 80159d0:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 80159d4:	4f000a64 	svcmi	0x00000a64
 80159d8:	664f006e 	strbvs	r0, [pc], -lr, rrx
 80159dc:	69640066 	stmdbvs	r4!, {r1, r2, r5, r6}^
 80159e0:	616c7073 	smcvs	50947	; 0xc703
 80159e4:	73253a79 			; <UNDEFINED> instruction: 0x73253a79
 80159e8:	6674000a 	ldrbtvs	r0, [r4], -sl
 80159ec:	253a7074 	ldrcs	r7, [sl, #-116]!	; 0xffffff8c
 80159f0:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 80159f4:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80159f8:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 80159fc:	70750073 	rsbsvc	r0, r5, r3, ror r0
 8015a00:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8015a04:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 8015a08:	54000a73 	strpl	r0, [r0], #-2675	; 0xfffff58d
 8015a0c:	20505446 	subscs	r5, r0, r6, asr #8
 8015a10:	20206e4f 	eorcs	r6, r0, pc, asr #28
 8015a14:	6265525b 	rsbvs	r5, r5, #-1342177275	; 0xb0000005
 8015a18:	5d746f6f 	ldclpl	15, cr6, [r4, #-444]!	; 0xfffffe44
 8015a1c:	54465400 	strbpl	r5, [r6], #-1024	; 0xfffffc00
 8015a20:	664f2050 			; <UNDEFINED> instruction: 0x664f2050
 8015a24:	525b2066 	subspl	r2, fp, #102	; 0x66
 8015a28:	6f6f6265 	svcvs	0x006f6265
 8015a2c:	00205d74 	eoreq	r5, r0, r4, ror sp
 8015a30:	4f525245 	svcmi	0x00525245
 8015a34:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 8015a38:	000a7465 	andeq	r7, sl, r5, ror #8
 8015a3c:	70746674 	rsbsvc	r6, r4, r4, ror r6
 8015a40:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 8015a44:	616c7073 	smcvs	50947	; 0xc703
 8015a48:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 8015a4c:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 8015a50:	000a2123 	andeq	r2, sl, r3, lsr #2
 8015a54:	4f525245 	svcmi	0x00525245
 8015a58:	0a3f2352 	beq	8fde7a8 <__exidx_end+0xfc6c30>
 8015a5c:	62657200 	rsbvs	r7, r5, #0, 4
 8015a60:	23746f6f 	cmncs	r4, #444	; 0x1bc
 8015a64:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 8015a68:	00237473 	eoreq	r7, r3, r3, ror r4
 8015a6c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8015a70:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 8015a74:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8015a78:	76002365 	strvc	r2, [r0], -r5, ror #6
 8015a7c:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8015a80:	00236e6f 	eoreq	r6, r3, pc, ror #28
 8015a84:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 8015a88:	63616600 	cmnvs	r1, #0, 12
 8015a8c:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8015a90:	 	tstmi	r0, r3, lsr #6

08015a93 <s_Node>:
 8015a93:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015a97:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8015aa3:	41730000 	cmnmi	r3, r0
 8015aa7:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 8015aab:	31332e31 	teqcc	r3, r1, lsr lr
	...
 8015ab7:	2043534f 	subcs	r5, r3, pc, asr #6
 8015abb:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8015abf:	00007265 	andeq	r7, r0, r5, ror #4
 8015ac3:	00000000 	andeq	r0, r0, r0
 8015ac7:	544c0000 	strbpl	r0, [ip], #-0
 8015acb:	00000043 	andeq	r0, r0, r3, asr #32
	...
 8015adb:	2043534f 	subcs	r5, r3, pc, asr #6
 8015adf:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 8015ae3:	0000746e 	andeq	r7, r0, lr, ror #8
 8015ae7:	00000000 	andeq	r0, r0, r0
 8015aeb:	44520000 	ldrbmi	r0, [r2], #-0
 8015aef:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 8015af3:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 8015af7:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8015afb:	0000796c 	andeq	r7, r0, ip, ror #18
 8015aff:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 8015b03:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 8015b0f:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 8015b13:	00004944 	andeq	r4, r0, r4, asr #18
	...
 8015b23:	00504444 	subseq	r4, r0, r4, asr #8
	...
 8015b33:	69500000 	ldmdbvs	r0, {}^	; <UNPREDICTABLE>
 8015b37:	506c6578 	rsbpl	r6, ip, r8, ror r5
 8015b3b:	65687375 	strbvs	r7, [r8, #-885]!	; 0xfffffc8b
 8015b3f:	00000072 	andeq	r0, r0, r2, ror r0
 8015b43:	00000000 	andeq	r0, r0, r0
 8015b47:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

08015b59 <s_Output>:
 8015b59:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 8015b65:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 8015b71:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 8015b75:	00726f74 	rsbseq	r6, r2, r4, ror pc
 8015b79:	00000000 	andeq	r0, r0, r0
 8015b7d:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8015b81:	0000006c 	andeq	r0, r0, ip, rrx
 8015b85:	00000000 	andeq	r0, r0, r0
 8015b89:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 8015b8d:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 8015b91:	00000000 	andeq	r0, r0, r0
 8015b95:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 8015ba1:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8015ba5:	00006769 	andeq	r6, r0, r9, ror #14
 8015ba9:	00000000 	andeq	r0, r0, r0
 8015bad:	70657453 	rsbvc	r7, r5, r3, asr r4
 8015bb1:	00726570 	rsbseq	r6, r2, r0, ror r5
 8015bb5:	00000000 	andeq	r0, r0, r0
 8015bb9:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 8015bbd:	00007265 	andeq	r7, r0, r5, ror #4
 8015bc1:	00000000 	andeq	r0, r0, r0
 8015bc5:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015bc9:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8015bcd:	00000000 	andeq	r0, r0, r0
 8015bd1:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 8015bd5:	00006c61 	andeq	r6, r0, r1, ror #24
 8015bd9:	00000000 	andeq	r0, r0, r0
 8015bdd:	20424752 	subcs	r4, r2, r2, asr r7
 8015be1:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 8015be5:	0000006c 	andeq	r0, r0, ip, rrx
 8015be9:	 	strne	r0, [r0, #-0]

08015bec <RemoteConfig::s_GET>:
 8015bec:	08008f15 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, fp, pc}
 8015bf0:	00000000 	andeq	r0, r0, r0
 8015bf4:	08015a5d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, fp, ip, lr}
 8015bf8:	00000008 	andeq	r0, r0, r8
 8015bfc:	080083b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, pc}
 8015c00:	00000000 	andeq	r0, r0, r0
 8015c04:	08015a66 	stmdaeq	r1, {r1, r2, r5, r6, r9, fp, ip, lr}
 8015c08:	00000005 	andeq	r0, r0, r5
 8015c0c:	080083b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, pc}
 8015c10:	00000000 	andeq	r0, r0, r0
 8015c14:	08015a6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, fp, ip, lr}
 8015c18:	00000006 	andeq	r0, r0, r6
 8015c1c:	08008569 	stmdaeq	r0, {r0, r3, r5, r6, r8, sl, pc}
 8015c20:	00000000 	andeq	r0, r0, r0
 8015c24:	08015a73 	stmdaeq	r1, {r0, r1, r4, r5, r6, r9, fp, ip, lr}
 8015c28:	00000007 	andeq	r0, r0, r7
 8015c2c:	08008529 	stmdaeq	r0, {r0, r3, r5, r8, sl, pc}
 8015c30:	00000000 	andeq	r0, r0, r0
 8015c34:	08015a7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r9, fp, ip, lr}
 8015c38:	00000008 	andeq	r0, r0, r8
 8015c3c:	08008485 	stmdaeq	r0, {r0, r2, r7, sl, pc}
 8015c40:	00000000 	andeq	r0, r0, r0
 8015c44:	08015a42 	stmdaeq	r1, {r1, r6, r9, fp, ip, lr}
 8015c48:	00000008 	andeq	r0, r0, r8
 8015c4c:	0800883d 	stmdaeq	r0, {r0, r2, r3, r4, r5, fp, pc}
 8015c50:	00000000 	andeq	r0, r0, r0
 8015c54:	08015a84 	stmdaeq	r1, {r2, r7, r9, fp, ip, lr}
 8015c58:	00010004 	andeq	r0, r1, r4
 8015c5c:	080084d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, sl, pc}
 8015c60:	00000000 	andeq	r0, r0, r0
 8015c64:	08015a3c 	stmdaeq	r1, {r2, r3, r4, r5, r9, fp, ip, lr}
 8015c68:	00000005 	andeq	r0, r0, r5
 8015c6c:	08008c05 	stmdaeq	r0, {r0, r2, sl, fp, pc}
 8015c70:	00000000 	andeq	r0, r0, r0
 8015c74:	08015a89 	stmdaeq	r1, {r0, r3, r7, r9, fp, ip, lr}
 8015c78:	00000009 	andeq	r0, r0, r9

08015c7c <RemoteConfig::s_SET>:
 8015c7c:	08008615 	stmdaeq	r0, {r0, r2, r4, r9, sl, pc}
 8015c80:	00000000 	andeq	r0, r0, r0
 8015c84:	08015a3c 	stmdaeq	r1, {r2, r3, r4, r5, r9, fp, ip, lr}
 8015c88:	00010005 	andeq	r0, r1, r5
 8015c8c:	080085ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, pc}
 8015c90:	00000000 	andeq	r0, r0, r0
 8015c94:	08015a42 	stmdaeq	r1, {r1, r6, r9, fp, ip, lr}
 8015c98:	00010008 	andeq	r0, r1, r8
 8015c9c:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8015ca0:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 8015ca4:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8015ca8:	0a64253d 	beq	991f1a4 <__exidx_end+0x190762c>
 8015cac:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8015cb0:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8015cb4:	002c2273 	eoreq	r2, ip, r3, ror r2
 8015cb8:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8015cbc:	000a7325 	andeq	r7, sl, r5, lsr #6
 8015cc0:	6f626552 	svcvs	0x00626552
 8015cc4:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 8015cc8:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 8015ccc:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 8015cd0:	6f6f6265 	svcvs	0x006f6265
 8015cd4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8015cd8:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 8015cdc:	6f637200 	svcvs	0x00637200
 8015ce0:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8015ce4:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015ce8:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 8015cec:	6b726f77 	blvs	9cb1ad0 <__exidx_end+0x1c99f58>
 8015cf0:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015cf4:	73696400 	cmnvc	r9, #0, 8
 8015cf8:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015cfc:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015d00:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 8015d04:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8015d08:	00747874 	rsbseq	r7, r4, r4, ror r8
 8015d0c:	31333165 	teqcc	r3, r5, ror #2
 8015d10:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015d14:	72617000 	rsbvc	r7, r1, #0
 8015d18:	2e736d61 	cdpcs	13, 7, cr6, cr3, cr1, {3}
 8015d1c:	00747874 	rsbseq	r7, r4, r4, ror r8

08015d20 <RemoteConfig::s_TXT>:
 8015d20:	08008845 	stmdaeq	r0, {r0, r2, r6, fp, pc}
 8015d24:	00000000 	andeq	r0, r0, r0
 8015d28:	08008b0d 	stmdaeq	r0, {r0, r2, r3, r8, r9, fp, pc}
 8015d2c:	00000000 	andeq	r0, r0, r0
 8015d30:	08015cdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, fp, ip, lr}
 8015d34:	0000000b 	andeq	r0, r0, fp
 8015d38:	0000000c 	andeq	r0, r0, ip
 8015d3c:	08008871 	stmdaeq	r0, {r0, r4, r5, r6, fp, pc}
 8015d40:	00000000 	andeq	r0, r0, r0
 8015d44:	08008b3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9, fp, pc}
 8015d48:	00000000 	andeq	r0, r0, r0
 8015d4c:	08015ce9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl, fp, ip, lr}
 8015d50:	0000000b 	andeq	r0, r0, fp
 8015d54:	00000000 	andeq	r0, r0, r0
 8015d58:	08008921 	stmdaeq	r0, {r0, r5, r8, fp, pc}
 8015d5c:	00000000 	andeq	r0, r0, r0
 8015d60:	08008bdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, fp, pc}
 8015d64:	00000000 	andeq	r0, r0, r0
 8015d68:	08015cf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, sl, fp, ip, lr}
 8015d6c:	0000000b 	andeq	r0, r0, fp
 8015d70:	0000000f 	andeq	r0, r0, pc
 8015d74:	0800889d 	stmdaeq	r0, {r0, r2, r3, r4, r7, fp, pc}
 8015d78:	00000000 	andeq	r0, r0, r0
 8015d7c:	08008b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, pc}
 8015d80:	00000000 	andeq	r0, r0, r0
 8015d84:	08015d01 	stmdaeq	r1, {r0, r8, sl, fp, ip, lr}
 8015d88:	0000000a 	andeq	r0, r0, sl
 8015d8c:	00000001 	andeq	r0, r0, r1
 8015d90:	080088c9 	stmdaeq	r0, {r0, r3, r6, r7, fp, pc}
 8015d94:	00000000 	andeq	r0, r0, r0
 8015d98:	08008b8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, fp, pc}
 8015d9c:	00000000 	andeq	r0, r0, r0
 8015da0:	08015d0c 	stmdaeq	r1, {r2, r3, r8, sl, fp, ip, lr}
 8015da4:	00000008 	andeq	r0, r0, r8
 8015da8:	00000004 	andeq	r0, r0, r4
 8015dac:	080088f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, fp, pc}
 8015db0:	00000000 	andeq	r0, r0, r0
 8015db4:	08008bb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp, pc}
 8015db8:	00000000 	andeq	r0, r0, r0
 8015dbc:	08015d15 	stmdaeq	r1, {r0, r2, r4, r8, sl, fp, ip, lr}
 8015dc0:	0000000a 	andeq	r0, r0, sl
 8015dc4:	00000002 	andeq	r0, r0, r2
 8015dc8:	00544547 	subseq	r4, r4, r7, asr #10
 8015dcc:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 8015dd0:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 8015dd4:	0a200050 	beq	8815f1c <__exidx_end+0x7fe3a4>
 8015dd8:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 8015ddc:	43003a00 	movwmi	r3, #2560	; 0xa00
 8015de0:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8015de4:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 8015de8:	00657079 	rsbeq	r7, r5, r9, ror r0
 8015dec:	61003b20 	tstvs	r0, r0, lsr #22
 8015df0:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 8015df4:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 8015df8:	6a2f6e6f 	bvs	8bf17bc <__exidx_end+0xbd9c44>
 8015dfc:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 8015e00:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8015e04:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8015e08:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8015e0c:	2f006874 	svccs	0x00006874
 8015e10:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015e14:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8015e18:	2f006c6d 	svccs	0x00006c6d
 8015e1c:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8015e20:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8015e24:	2f007373 	svccs	0x00007373
 8015e28:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015e2c:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 8015e30:	736a2f00 	cmnvc	sl, #0, 30
 8015e34:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8015e38:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8015e3c:	72657600 	rsbvc	r7, r5, #0, 12
 8015e40:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8015e44:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8015e48:	00656d69 	rsbeq	r6, r5, r9, ror #26
 8015e4c:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015e50:	0079616c 	rsbseq	r6, r9, ip, ror #2
 8015e54:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015e58:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8015e5c:	6a2f0079 	bvs	8bd6048 <__exidx_end+0xbbe4d0>
 8015e60:	2f6e6f73 	svccs	0x006e6f73
 8015e64:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8015e68:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 8015e6c:	6f6f6265 	svcvs	0x006f6265
 8015e70:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 8015e74:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 8015e78:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 8015e7c:	434f4421 	movtmi	r4, #62497	; 0xf421
 8015e80:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8015e84:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8015e88:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8015e8c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015e90:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8015e94:	3e646165 	powccsz	f6, f4, f5
 8015e98:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015e9c:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 8015ea0:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 8015ea4:	742f3c74 	strtvc	r3, [pc], #-3188	; 8015eac <RemoteConfig::s_TXT+0x18c>
 8015ea8:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 8015eac:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015eb0:	3e646165 	powccsz	f6, f4, f5
 8015eb4:	6f623c0a 	svcvs	0x00623c0a
 8015eb8:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 8015ebc:	4f3e3168 	svcmi	0x003e3168
 8015ec0:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015ec4:	2f3c3e31 	svccs	0x003c3e31
 8015ec8:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8015ecc:	2f3c0a3e 	svccs	0x003c0a3e
 8015ed0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015ed4:	42000a3e 	andmi	r0, r0, #253952	; 0x3e000
 8015ed8:	52206461 	eorpl	r6, r0, #1627389952	; 0x61000000
 8015edc:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 8015ee0:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
 8015ee4:	4620746f 	strtmi	r7, [r0], -pc, ror #8
 8015ee8:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8015eec:	71655200 	cmnvc	r5, r0, lsl #4
 8015ef0:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 8015ef4:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 8015ef8:	20797469 	rsbscs	r7, r9, r9, ror #8
 8015efc:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 8015f00:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 8015f04:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
 8015f08:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 8015f0c:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 8015f10:	6f542049 	svcvs	0x00542049
 8015f14:	6f4c206f 	svcvs	0x004c206f
 8015f18:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 8015f1c:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8015f20:	206c616e 	rsbcs	r6, ip, lr, ror #2
 8015f24:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8015f28:	45207265 	strmi	r7, [r0, #-613]!	; 0xfffffd9b
 8015f2c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8015f30:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 8015f34:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8015f38:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8015f3c:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 8015f40:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8015f44:	00646574 	rsbeq	r6, r4, r4, ror r5
 8015f48:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8015f4c:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8015f50:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8015f54:	70707553 	rsbsvc	r7, r0, r3, asr r5
 8015f58:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 8015f5c:	6e550064 	cdpvs	0, 5, cr0, cr5, cr4, {3}
 8015f60:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 8015f64:	7245206e 	subvc	r2, r5, #110	; 0x6e
 8015f68:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8015f6c:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 8015f70:	434f4421 	movtmi	r4, #62497	; 0xf421
 8015f74:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8015f78:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8015f7c:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8015f80:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015f84:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8015f88:	3e646165 	powccsz	f6, f4, f5
 8015f8c:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015f90:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 8015f94:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8015f98:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8015f9c:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 8015fa0:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8015fa4:	0a3e6461 	beq	8faf130 <__exidx_end+0xf975b8>
 8015fa8:	646f623c 	strbtvs	r6, [pc], #-572	; 8015fb0 <RemoteConfig::s_TXT+0x290>
 8015fac:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8015fb0:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 8015fb4:	31682f3c 	cmncc	r8, ip, lsr pc
 8015fb8:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 8015fbc:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8015fc0:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015fc4:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8015fc8:	5448000a 	strbpl	r0, [r8], #-10
 8015fcc:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 8015fd0:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 8015fd4:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8015fd8:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 8015fdc:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 8015fe0:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8015fe4:	6f430a0d 	svcvs	0x00430a0d
 8015fe8:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8015fec:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 8015ff0:	203a6570 	eorscs	r6, sl, r0, ror r5
 8015ff4:	0a0d7325 	beq	8372c90 <__exidx_end+0x35b118>
 8015ff8:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8015ffc:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8016000:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8016004:	203a6874 	eorscs	r6, sl, r4, ror r8
 8016008:	0a0d7525 	beq	83734a4 <__exidx_end+0x35b92c>
 801600c:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 8016010:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8016014:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8016018:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 801601c:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 8016020:	4447000a 	strbmi	r0, [r7], #-10
 8016024:	31463233 	cmpcc	r6, r3, lsr r2
 8016028:	43523730 	cmpmi	r2, #48, 14	; 0xc00000
	...

0801602d <contentType>:
 801602d:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8016031:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8016035:	0000006c 	andeq	r0, r0, ip, rrx
	...
 801604d:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8016051:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 801606d:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8016071:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8016075:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8016079:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 801608d:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 8016091:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 8016095:	2f6e6f69 	svccs	0x006e6f69
 8016099:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

080160ad <RemoteConfigConst::PARAMS_DISABLE>:
 80160ad:	61736964 	cmnvs	r3, r4, ror #18
 80160b1:	00656c62 	rsbeq	r6, r5, r2, ror #24

080160b5 <RemoteConfigConst::PARAMS_FILE_NAME>:
 80160b5:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 80160b9:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 80160bd:	00747874 	rsbseq	r7, r4, r4, ror r8

080160c1 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 80160c1:	70736964 	rsbsvc	r6, r3, r4, ror #18
 80160c5:	5f79616c 	svcpl	0x0079616c
 80160c9:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

080160ce <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 80160ce:	61736964 	cmnvs	r3, r4, ror #18
 80160d2:	5f656c62 	svcpl	0x00656c62
 80160d6:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 80160da:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

080160dc <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 80160dc:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80160e0:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 80160e4:	6f6f6265 	svcvs	0x006f6265
 80160e8:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

080160ea <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 80160ea:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80160ee:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 8015b8a <s_Output+0x31>
 80160f2:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 80160f6:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

080160f8 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 80160f8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80160fc:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8016100:	6f746361 	svcvs	0x00746361
 8016104:	7b007972 	blvc	80346d4 <__exidx_end+0x1cb5c>
 8016108:	73696c22 	cmnvc	r9, #8704	; 0x2200
 801610c:	7b3a2274 	blvc	8e9eae4 <__exidx_end+0xe86f6c>
 8016110:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8016114:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8016118:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801611c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016120:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8016124:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016128:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801612c:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8016130:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8016134:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8016138:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801613c:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016140:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8016144:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8016148:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 801614c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8016150:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016154:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8016158:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 801615c:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8016160:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8016164:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8016168:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801616c:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8016170:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8016174:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8016178:	616f6222 	cmnvs	pc, r2, lsr #4
 801617c:	3a226472 	bcc	88af34c <__exidx_end+0x8977d4>
 8016180:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016184:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8016188:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 801618c:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 8016190:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 8016194:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8016198:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 801619c:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 80161a0:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 80161a4:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 80161a8:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 80161ac:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 80161b0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 80161b4:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 80161b8:	7b000a7d 	blvc	8018bb4 <__exidx_end+0x103c>
 80161bc:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 80161c0:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 80161c4:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 80161c8:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 80161cc:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 80161d0:	7b3a2273 	blvc	8e9eba4 <__exidx_end+0xe8702c>
 80161d4:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 80161d8:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 80161dc:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 80161e0:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 80161e4:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 80161e8:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 80161ec:	61726170 	cmnvs	r2, r0, ror r1
 80161f0:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 80161f4:	3a227478 	bcc	88b33dc <__exidx_end+0x89b864>
 80161f8:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 80161fc:	61725420 	cmnvs	r2, r0, lsr #8
 8016200:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 8016204:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8016208:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801620c:	2e79616c 	rpwcsez	f6, f1, #4.0
 8016210:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016214:	6944223a 	stmdbvs	r4, {r1, r3, r4, r5, r9, sp}^
 8016218:	616c7073 	smcvs	50947	; 0xc703
 801621c:	44552079 	ldrbmi	r2, [r5], #-121	; 0xffffff87
 8016220:	222c2246 	eorcs	r2, ip, #1610612740	; 0x60000004
 8016224:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8016228:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 801622c:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016230:	654e223a 	strbvs	r2, [lr, #-570]	; 0xfffffdc6
 8016234:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8016238:	222c226b 	eorcs	r2, ip, #-1342177274	; 0xb0000006
 801623c:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8016240:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8016244:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016248:	6552223a 	ldrbvs	r2, [r2, #-570]	; 0xfffffdc6
 801624c:	65746f6d 	ldrbvs	r6, [r4, #-3949]!	; 0xfffff093
 8016250:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8016254:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8016258:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 801625c:	7d226e6f 	stcvc	14, cr6, [r2, #-444]!	; 0xfffffe44
 8016260:	 	teqcs	ip, sp, ror r0

08016262 <index_html>:
 8016262:	4f44213c 	svcmi	0x0044213c
 8016266:	50595443 	subspl	r5, r9, r3, asr #8
 801626a:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 801626e:	0a3e6c6d 	beq	8fb142a <__exidx_end+0xf998b2>
 8016272:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 8016276:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 801627a:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 801627e:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 8016282:	6b6e696c 	blvs	9bb083a <__exidx_end+0x1b98cc2>
 8016286:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 801628a:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 801628e:	73656c79 	cmnvc	r5, #30976	; 0x7900
 8016292:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8016296:	72682022 	rsbvc	r2, r8, #34	; 0x22
 801629a:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 801629e:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 80162a2:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 80162a6:	20227373 	eorcs	r7, r2, r3, ror r3
 80162aa:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 80162ae:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 80162b2:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 80162b6:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 80162ba:	0a3e656c 	beq	8faf872 <__exidx_end+0xf97cfa>
 80162be:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 80162c2:	0a3e6461 	beq	8faf44e <__exidx_end+0xf978d6>
 80162c6:	646f623c 	strbtvs	r6, [pc], #-572	; 80162ce <index_html+0x6c>
 80162ca:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 80162ce:	6165683c 	cmnvs	r5, ip, lsr r8
 80162d2:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 80162d6:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 80162da:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 80162de:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 80162e2:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 80162e6:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 80162ea:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80162ee:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 80162f2:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 80162f6:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 80162fa:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 80162fe:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 8016302:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8016306:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 801630a:	6f746365 	svcvs	0x00746365
 801630e:	20227972 	eorcs	r7, r2, r2, ror r9
 8016312:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8016316:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 801631a:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 801631e:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016322:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8016326:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 801632a:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 801632e:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 8016332:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 8016336:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 801633a:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 801633e:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 8016342:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016346:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 801634a:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 801634e:	20227478 	eorcs	r7, r2, r8, ror r4
 8016352:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8016356:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 801635a:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 801635e:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 8016362:	0a3e656c 	beq	8faf91a <__exidx_end+0xf97da2>
 8016366:	6f663c09 	svcvs	0x00663c09
 801636a:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 801636e:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 8016372:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8016376:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 801637a:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801637e:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 8016382:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8016386:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 801638a:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 801638e:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8016392:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 8016396:	20747069 	rsbscs	r7, r4, r9, rrx
 801639a:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 801639e:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 80163a2:	6a2e7865 	bvs	8bb453e <__exidx_end+0xb9c9c6>
 80163a6:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 80163aa:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 80163ae:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 80163b2:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 80163b6:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 80163ba:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80163be:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 80163c2:	 	svcvs	0x0062000a

080163c4 <styles_css>:
 80163c4:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80163c8:	200a7b20 	andcs	r7, sl, r0, lsr #22
 80163cc:	63616220 	cmnvs	r1, #32, 4
 80163d0:	6f72676b 	svcvs	0x0072676b
 80163d4:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 80163d8:	6f6c6f63 	svcvs	0x006c6f63
 80163dc:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 80163e0:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 80163e4:	30322c30 	eorscc	r2, r2, r0, lsr ip
 80163e8:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 80163ec:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80163f0:	6f6c6f63 	svcvs	0x006c6f63
 80163f4:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 80163f8:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 80163fc:	202c3535 	eorcs	r3, ip, r5, lsr r5
 8016400:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 8016404:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 8016408:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 801640c:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 8016410:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8016414:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016418:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801641c:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8016420:	0a3b7865 	beq	8ef45bc <__exidx_end+0xedca44>
 8016424:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 8016428:	0a7b2069 	beq	9ede5d4 <__exidx_end+0x1ec6a5c>
 801642c:	696c2020 	stmdbvs	ip!, {r5, sp}^
 8016430:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 8016434:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 8016438:	6f6e203a 	svcvs	0x006e203a
 801643c:	0a3b656e 	beq	8eef9fc <__exidx_end+0xed7e84>
 8016440:	616d2020 	cmnvs	sp, r0, lsr #32
 8016444:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 8016448:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 801644c:	70352078 	eorsvc	r2, r5, r8, ror r0
 8016450:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 8016454:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 8016458:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 801645c:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8016460:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016464:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016468:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 801646c:	0a3b7865 	beq	8ef4608 <__exidx_end+0xedca90>
 8016470:	6f622020 	svcvs	0x00622020
 8016474:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8016478:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 801647c:	3a737569 	bcc	9cf3a28 <__exidx_end+0x1cdbeb0>
 8016480:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8016484:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8016488:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 801648c:	203a7265 	eorscs	r7, sl, r5, ror #4
 8016490:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016494:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8016498:	31207965 			; <UNDEFINED> instruction: 0x31207965
 801649c:	0a3b7870 	beq	8ef4664 <__exidx_end+0xedcaec>
 80164a0:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 80164a4:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 80164a8:	0a7b2072 	beq	9ede678 <__exidx_end+0x1ec6b00>
 80164ac:	69642020 	stmdbvs	r4!, {r5, sp}^
 80164b0:	616c7073 	smcvs	50947	; 0xc703
 80164b4:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 80164b8:	3b78656c 	blcc	9e2fa70 <__exidx_end+0x1e17ef8>
 80164bc:	6a20200a 	bvs	881e4ec <__exidx_end+0x806974>
 80164c0:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 80164c4:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 80164c8:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 80164cc:	203a746e 	eorscs	r7, sl, lr, ror #8
 80164d0:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 80164d4:	0a3b7265 	beq	8ef2e70 <__exidx_end+0xedb2f8>
 80164d8:	6f622020 	svcvs	0x00622020
 80164dc:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 80164e0:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 80164e4:	3a737569 	bcc	9cf3a90 <__exidx_end+0x1cdbf18>
 80164e8:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 80164ec:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 80164f0:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 80164f4:	203a7265 	eorscs	r7, sl, r5, ror #4
 80164f8:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80164fc:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8016500:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8016504:	0a3b7870 	beq	8ef46cc <__exidx_end+0xedcb54>
 8016508:	00000a7d 	andeq	r0, r0, sp, ror sl

0801650c <HttpContent>:
 801650c:	08015e1c 	stmdaeq	r1, {r2, r3, r4, r9, sl, fp, ip, lr}
 8016510:	080163c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, sp, lr}
 8016514:	08015e28 	stmdaeq	r1, {r3, r5, r9, sl, fp, ip, lr}
 8016518:	08016524 	stmdaeq	r1, {r2, r5, r8, sl, sp, lr}
 801651c:	08015e10 	stmdaeq	r1, {r4, r9, sl, fp, ip, lr}
 8016520:	08016262 	stmdaeq	r1, {r1, r5, r6, r9, sp, lr}

08016524 <index_js>:
 8016524:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8016528:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801652c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8016530:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8016534:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016538:	6a284e4f 	bvs	8a29e7c <__exidx_end+0xa12304>
 801653c:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016540:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8016544:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8016548:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 801654c:	6a2f273d 	bvs	8be0248 <__exidx_end+0xbc86d0>
 8016550:	2f6e6f73 	svccs	0x006e6f73
 8016554:	202b2027 	eorcs	r2, fp, r7, lsr #32
 8016558:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801655c:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8016560:	20797274 	rsbscs	r7, r9, r4, ror r2
 8016564:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8016568:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 801656c:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 8016570:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 8016574:	20746961 	rsbscs	r6, r4, r1, ror #18
 8016578:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 801657c:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 8016580:	0a3b296c 	beq	8ee0b38 <__exidx_end+0xec8fc0>
 8016584:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8016588:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 801658c:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 8016590:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8016594:	73657220 	cmnvc	r5, #32, 4
 8016598:	6f736a2e 	svcvs	0x00736a2e
 801659c:	3b29286e 	blcc	8a6075c <__exidx_end+0xa48be4>
 80165a0:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 80165a4:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 80165a8:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 80165ac:	6f727265 	svcvs	0x00727265
 80165b0:	7b202972 	blvc	8820b80 <__exidx_end+0x809008>
 80165b4:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80165b8:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 80165bc:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 80165c0:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 80165c4:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 80165c8:	3b29726f 	blcc	8a72f8c <__exidx_end+0xa5b414>
 80165cc:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 80165d0:	0a0a7d0a 	beq	82b5a00 <__exidx_end+0x29de88>
 80165d4:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80165d8:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80165dc:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80165e0:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 80165e4:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 80165e8:	73694c72 	cmnvc	r9, #29184	; 0x7200
 80165ec:	20292874 	eorcs	r2, r9, r4, ror r8
 80165f0:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 80165f4:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80165f8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80165fc:	6177613d 	cmnvs	r7, sp, lsr r1
 8016600:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8016604:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016608:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801660c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016610:	0a3b2927 	beq	8ee0ab4 <__exidx_end+0xec8f3c>
 8016614:	6f640909 	svcvs	0x00640909
 8016618:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 801661c:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8016620:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8016624:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8016628:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801662c:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8016630:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 8016634:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8016638:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 801663c:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8016640:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 8016644:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8016648:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 801664c:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 8016650:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 8016654:	2b656d61 	blcs	9971be0 <__exidx_end+0x195a068>
 8016658:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80165d8 <index_js+0xb4>
 801665c:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8016660:	2b223e69 	blcs	88a600c <__exidx_end+0x88e494>
 8016664:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016668:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 801666c:	6f6e2e74 	svcvs	0x006e2e74
 8016670:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 8016674:	2b657079 	blcs	9972860 <__exidx_end+0x195ace8>
 8016678:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80165f8 <index_js+0xd4>
 801667c:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8016680:	2b223e69 	blcs	88a602c <__exidx_end+0x88e4b4>
 8016684:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016688:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 801668c:	6f6e2e74 	svcvs	0x006e2e74
 8016690:	702e6564 	eorvc	r6, lr, r4, ror #10
 8016694:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 8016698:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801669c:	2f3c222b 	svccs	0x003c222b
 80166a0:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 80166a4:	0a7d0a3b 	beq	9f58f98 <__exidx_end+0x1f41420>
 80166a8:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 80166ac:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 80166b0:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 80166b4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 80166b8:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 80166bc:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80166c0:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 80166c4:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 80166c8:	0a7b2029 	beq	9ede774 <__exidx_end+0x1ec6bfc>
 80166cc:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 80166d0:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 80166d4:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 80166d8:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80166dc:	6177613d 	cmnvs	r7, sp, lsr r1
 80166e0:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80166e4:	534a7465 	movtpl	r7, #42085	; 0xa465
 80166e8:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 80166ec:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80166f0:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 80166f4:	3b292779 	blcc	8a604e0 <__exidx_end+0xa48968>
 80166f8:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80166fc:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8016700:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016704:	0a22223d 	beq	889f000 <__exidx_end+0x887488>
 8016708:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 801670c:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8016710:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 8016714:	73656d61 	cmnvc	r5, #6208	; 0x1840
 8016718:	6a624f3d 	bvs	98aa414 <__exidx_end+0x189289c>
 801671c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8016720:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 8016724:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 8016728:	6f746365 	svcvs	0x00746365
 801672c:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 8016730:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8016734:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 8016738:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801673c:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 8016740:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 8016744:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 8016748:	6145726f 	cmpvs	r5, pc, ror #4
 801674c:	66286863 	strtvs	r6, [r8], -r3, ror #16
 8016750:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8016754:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016758:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 801675c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8016760:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8016764:	20726176 	rsbscs	r6, r2, r6, ror r1
 8016768:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 801676c:	203d2065 	eorscs	r2, sp, r5, rrx
 8016770:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016774:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8016778:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 801677c:	73656c69 	cmnvc	r5, #26880	; 0x6900
 8016780:	6b5b5d22 	blvs	96edc10 <__exidx_end+0x16d6098>
 8016784:	3b5d7965 	blcc	9774d20 <__exidx_end+0x175d1a8>
 8016788:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801678c:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 8016790:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 8016794:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 8016798:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801679c:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 80167a0:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 80167a4:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 80167a8:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 80167ac:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80167b0:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80167b4:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 80167b8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80167bc:	0a3b223e 	beq	8edf0bc <__exidx_end+0xec7544>
 80167c0:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 80167c4:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80167c8:	6f640909 	svcvs	0x00640909
 80167cc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 80167d0:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 80167d4:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 80167d8:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80167dc:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 80167e0:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 80167e4:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 80167e8:	6f746365 	svcvs	0x00746365
 80167ec:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 80167f0:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 80167f4:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 80167f8:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 80167fc:	3b6c6d74 	blcc	9b31dd4 <__exidx_end+0x1b1a25c>
 8016800:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8016804:	5f746567 	svcpl	0x00746567
 8016808:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 801680c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8016810:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016814:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 8016818:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 801681c:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 8016820:	20636e79 	rsbcs	r6, r3, r9, ror lr
 8016824:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8016828:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801682c:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 8016830:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 8016834:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016838:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801683c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8016840:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8016844:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 8016848:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 801684c:	6177613d 	cmnvs	r7, sp, lsr r1
 8016850:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8016854:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016858:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801685c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016860:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 8016864:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8016868:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 801686c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 8016870:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 8016874:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 8016878:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 801687c:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 8016880:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 8016884:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8016888:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 801688c:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 8016890:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 8016894:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 8016898:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 801689c:	2b22563e 	blcs	88ac19c <__exidx_end+0x894624>
 80168a0:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80168a4:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 80168a8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80168ac:	2b6e6f69 	blcs	9bb2658 <__exidx_end+0x1b9aae0>
 80168b0:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8016830 <index_js+0x30c>
 80168b4:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80168b8:	2b223e69 	blcs	88a6264 <__exidx_end+0x88e6ec>
 80168bc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80168c0:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 80168c4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 80168c8:	61642e64 	cmnvs	r4, r4, ror #28
 80168cc:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 80168d0:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 80168d4:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 80168d8:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 80168dc:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80168e0:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 80168e4:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 80168e8:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 80168ec:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 80168f0:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 80168f4:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 80168f8:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 80168fc:	6f697372 	svcvs	0x00697372
 8016900:	6f622e6e 	svcvs	0x00622e6e
 8016904:	2b647261 	blcs	9933290 <__exidx_end+0x191b718>
 8016908:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8016888 <index_js+0x364>
 801690c:	3b223e69 	blcc	88a62b8 <__exidx_end+0x88e740>
 8016910:	0a0a7d0a 	beq	82b5d40 <__exidx_end+0x29e1c8>
 8016914:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8016918:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801691c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8016920:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8016924:	745f7465 	ldrbvc	r7, [pc], #-1125	; 801692c <index_js+0x408>
 8016928:	73287478 			; <UNDEFINED> instruction: 0x73287478
 801692c:	20296c65 	eorcs	r6, r9, r5, ror #24
 8016930:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 8016934:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 8016938:	613d7478 	teqvs	sp, r8, ror r4
 801693c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8016940:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 8016944:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 8016948:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 801694c:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8016950:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8016954:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016958:	3b22223d 	blcc	889f254 <__exidx_end+0x8876dc>
 801695c:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 8016960:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 8016964:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 8016968:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 801696c:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8016970:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 8016974:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 8016978:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 801697c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8016980:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8016984:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 8016988:	0a7b2029 	beq	9edea34 <__exidx_end+0x1ec6ebc>
 801698c:	61760909 	cmnvs	r6, r9, lsl #18
 8016990:	61762072 	cmnvs	r6, r2, ror r0
 8016994:	2065756c 	rsbcs	r7, r5, ip, ror #10
 8016998:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 801699c:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 80169a0:	6b5b5d6c 	blvs	96edf58 <__exidx_end+0x16d63e0>
 80169a4:	3b5d7965 	blcc	9774f40 <__exidx_end+0x175d3c8>
 80169a8:	2009090a 	andcs	r0, r9, sl, lsl #18
 80169ac:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80169b0:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 80169b4:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 80169b8:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80169bc:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 80169c0:	2f3c222b 	svccs	0x003c222b
 80169c4:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 80169c8:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80169cc:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80169d0:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80169d4:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 80169d8:	742f3c3e 	strtvc	r3, [pc], #-3134	; 80169e0 <index_js+0x4bc>
 80169dc:	3b223e72 	blcc	88a63ac <__exidx_end+0x88e834>
 80169e0:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 80169e4:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 80169e8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 80169ec:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 80169f0:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 80169f4:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 80169f8:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 80169fc:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 8016a00:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 8016a04:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8016a08:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8016a0c:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8016a10:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 8016a14:	0a3b6c6d 	beq	8ef1bd0 <__exidx_end+0xeda058>
 8016a18:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8016a1c:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8016a20:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8016a24:	3b292874 	blcc	8a60bfc <__exidx_end+0xa49084>
 8016a28:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8016a2c:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 8016a30:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8016a34:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016a38:	0a3b2928 	beq	8ee0ee0 <__exidx_end+0xec9368>
 8016a3c:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8016a40:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 8016a44:	6f697372 	svcvs	0x00697372
 8016a48:	3b29286e 	blcc	8a60c08 <__exidx_end+0xa49090>
 8016a4c:	2020000a 	eorcs	r0, r0, sl
 8016a50:	76696e55 			; <UNDEFINED> instruction: 0x76696e55
 8016a54:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016a58:	72612073 	rsbvc	r2, r1, #115	; 0x73
 8016a5c:	616d2065 	cmnvs	sp, r5, rrx
 8016a60:	65707070 	ldrbvs	r7, [r0, #-112]!	; 0xffffff90
 8016a64:	312b2064 			; <UNDEFINED> instruction: 0x312b2064
 8016a68:	0000000a 	andeq	r0, r0, sl

08016a6c <vtable for ArtNet4Node>:
	...
 8016a74:	080098b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, fp, ip, pc}
 8016a78:	080098d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, fp, ip, pc}
 8016a7c:	08009841 	stmdaeq	r0, {r0, r6, fp, ip, pc}
 8016a80:	08009921 	stmdaeq	r0, {r0, r5, r8, fp, ip, pc}
 8016a84:	080098eb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, fp, ip, pc}
 8016a88:	08009831 	stmdaeq	r0, {r0, r4, r5, fp, ip, pc}
 8016a8c:	080098a1 	stmdaeq	r0, {r0, r5, r7, fp, ip, pc}

08016a90 <ArtNetMsgConst::START>:
 8016a90:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 8016a94:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8016a98:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8016a9c:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

08016aa1 <ArtNetMsgConst::PARAMS>:
 8016aa1:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8016aa5:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016aa9:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016aad:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016ab1:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016ab5 <ArtNetMsgConst::RDM_RUN>:
 8016ab5:	6e6e7552 	mcrvs	5, 3, r7, cr14, cr2, {2}
 8016ab9:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016abd:	204d4452 	subcs	r4, sp, r2, asr r4
 8016ac1:	63736944 	cmnvs	r3, #68, 18	; 0x110000
 8016ac5:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 8016ac9:	 	subvc	r0, r1, #121	; 0x79

08016acb <ArtNetMsgConst::STARTED>:
 8016acb:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016acf:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016ad3:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8016ad7:	00646574 	rsbeq	r6, r4, r4, ror r5
 8016adb:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 8016adf:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 8016ae3:	00732520 	rsbseq	r2, r3, r0, lsr #10
 8016ae7:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8016aeb:	2f2f3a73 	svccs	0x002f3a73
 8016aef:	32336467 	eorscc	r6, r3, #1728053248	; 0x67000000
 8016af3:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 8016af7:	67726f2e 	ldrbvs	r6, [r2, -lr, lsr #30]!
 8016afb:	626d4500 	rsbvs	r4, sp, #0, 10
 8016aff:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 8016b03:	 	subvc	r0, r1, #100	; 0x64

08016b05 <artnet::NODE_ID>:
 8016b05:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016b09:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016b0d <defaults::SHORT_NAME>:
 8016b0d:	20567641 	subscs	r7, r6, r1, asr #12
 8016b11:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016b15:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016b19:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
 8016b1d:	34302500 	ldrtcc	r2, [r0], #-1280	; 0xfffffb00
 8016b21:	255b2078 	ldrbcs	r2, [fp, #-120]	; 0xffffff88
 8016b25:	5d643430 	cfstrdpl	mvd3, [r4, #-192]!	; 0xffffff40
 8016b29:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8016b2d:	00567641 	subseq	r7, r6, r1, asr #12

08016b31 <artnet::NODE_ID>:
 8016b31:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016b35:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016b39 <artnet::NODE_ID>:
 8016b39:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016b3d:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016b41 <artnet::NODE_ID>:
 8016b41:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016b45:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016b49:	00505448 	subseq	r5, r0, r8, asr #8
 8016b4d:	0050544c 	subseq	r5, r0, ip, asr #8
 8016b51:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016b55:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016b59:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 8016b5d:	646f4e00 	strbtvs	r4, [pc], #-3584	; 8016b65 <artnet::NODE_ID+0x24>
 8016b61:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 8016b65:	75255b20 	strvc	r5, [r5, #-2848]!	; 0xfffff4e0
 8016b69:	20000a5d 	andcs	r0, r0, sp, asr sl
 8016b6d:	6d726946 			; <UNDEFINED> instruction: 0x6d726946
 8016b71:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
 8016b75:	3a202020 	bcc	881ebfd <__exidx_end+0x807085>
 8016b79:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8016b7d:	000a6425 	andeq	r6, sl, r5, lsr #8
 8016b81:	6f685320 	svcvs	0x00685320
 8016b85:	6e207472 	mcrvs	4, 1, r7, cr0, cr2, {3}
 8016b89:	20656d61 	rsbcs	r6, r5, r1, ror #26
 8016b8d:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8016b91:	4c20000a 	stcmi	0, cr0, [r0], #-40	; 0xffffffd8
 8016b95:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 8016b99:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016b9d:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016ba1:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016ba5:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 8016ba9:	0a747570 	beq	9d34171 <__exidx_end+0x1d1c5f9>
 8016bad:	50202000 	eorpl	r2, r0, r0
 8016bb1:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016bb5:	20643225 	rsbcs	r3, r4, r5, lsr #4
 8016bb9:	20753425 	rsbscs	r3, r5, r5, lsr #8
 8016bbd:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8016bc1:	257b2000 	ldrbcs	r2, [fp, #-0]!
 8016bc5:	000a7d73 	andeq	r7, sl, r3, ror sp
 8016bc9:	706e4920 	rsbvc	r4, lr, r0, lsr #18
 8016bcd:	000a7475 	andeq	r7, sl, r5, ror r4
 8016bd1:	6f502020 	svcvs	0x00502020
 8016bd5:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
 8016bd9:	25206432 	strcs	r6, [r0, #-1074]!	; 0xfffffbce
 8016bdd:	2d207534 	cfstr32cs	mvfx7, [r0, #-208]!	; 0xffffff30
 8016be1:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 8016be5:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016be9:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016bed:	68000a64 	stmdavs	r0, {r2, r5, r6, r9, fp}
 8016bf1:	00646c6f 	rsbeq	r6, r4, pc, ror #24
 8016bf5:	0066666f 	rsbeq	r6, r6, pc, ror #12
 8016bf9:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016bfd:	6b636162 	blvs	98ef18d <__exidx_end+0x18d7615>
 8016c01:	63617300 	cmnvs	r1, #0, 6
 8016c05:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 8016c09:	00747570 	rsbseq	r7, r4, r0, ror r5
 8016c0d:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 8016c11:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
 8016c15:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
 8016c19:	6c00656c 	cfstr32vs	mvfx6, [r0], {108}	; 0x6c
 8016c1d:	68007074 	stmdavs	r0, {r2, r4, r5, r6, ip, sp, lr}
 8016c21:	61007074 	tstvs	r0, r4, ror r0
 8016c25:	656e7472 	strbvs	r7, [lr, #-1138]!	; 0xfffffb8e
 8016c29:	72410074 	subvc	r0, r1, #116	; 0x74
 8016c2d:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8016c31:	00342074 	eorseq	r2, r4, r4, ror r0
 8016c35:	 			; <UNDEFINED> instruction: 0xf0000000

08016c38 <CSWTCH.95>:
 8016c38:	08016bf0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, fp, sp, lr}
 8016c3c:	08016bf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, fp, sp, lr}
 8016c40:	08015e42 	stmdaeq	r1, {r1, r6, r9, sl, fp, ip, lr}
 8016c44:	08016bf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, fp, sp, lr}

08016c48 <ArtNetParamsConst::ENABLE_RDM>:
 8016c48:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016c4c:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8016c50:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

08016c53 <ArtNetParamsConst::MAP_UNIVERSE0>:
 8016c53:	5f70616d 	svcpl	0x0070616d
 8016c57:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016c5b:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016c5f:	 	rsbsvc	r0, r0, #48	; 0x30

08016c61 <ArtNetParamsConst::PROTOCOL_PORT>:
 8016c61:	746f7270 	strbtvc	r7, [pc], #-624	; 8016c69 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 8016c65:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016ab0 <ArtNetMsgConst::PARAMS+0xf>
 8016c69:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016c6d:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8016c71:	746f7270 	strbtvc	r7, [pc], #-624	; 8016c79 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 8016c75:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016ac0 <ArtNetMsgConst::RDM_RUN+0xb>
 8016c79:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016c7d:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016c81:	746f7270 	strbtvc	r7, [pc], #-624	; 8016c89 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8016c85:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016ad0 <ArtNetMsgConst::STARTED+0x5>
 8016c89:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016c8d:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8016c91:	746f7270 	strbtvc	r7, [pc], #-624	; 8016c99 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 8016c95:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8016ae0 <ArtNetMsgConst::STARTED+0x15>
 8016c99:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016c9d:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016ca1 <ArtNetParamsConst::NODE_LONG_NAME>:
 8016ca1:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 8016ca5:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 8016ca9:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

08016cab <ArtNetParamsConst::NODE_SHORT_NAME>:
 8016cab:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 8016caf:	616e5f74 	smcvs	58868	; 0xe5f4
 8016cb3:	 	andvc	r6, r0, #457179136	; 0x1b400000

08016cb6 <ArtNetParamsConst::RDM_ENABLE_PORT>:
 8016cb6:	5f6d6472 	svcpl	0x006d6472
 8016cba:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016cbe:	705f656c 	subsvc	r6, pc, ip, ror #10
 8016cc2:	5f74726f 	svcpl	0x0074726f
 8016cc6:	64720061 	ldrbtvs	r0, [r2], #-97	; 0xffffff9f
 8016cca:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 8016cce:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016cd2:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016cd6:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016cda:	5f6d6472 	svcpl	0x006d6472
 8016cde:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016ce2:	705f656c 	subsvc	r6, pc, ip, ror #10
 8016ce6:	5f74726f 	svcpl	0x0074726f
 8016cea:	64720063 	ldrbtvs	r0, [r2], #-99	; 0xffffff9d
 8016cee:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 8016cf2:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016cf6:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016cfa:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016cfe <ArtNetParamsConst::DESTINATION_IP_PORT>:
 8016cfe:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016d02:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016d06:	5f6e6f69 	svcpl	0x006e6f69
 8016d0a:	705f7069 	subsvc	r7, pc, r9, rrx
 8016d0e:	5f74726f 	svcpl	0x0074726f
 8016d12:	00000061 	andeq	r0, r0, r1, rrx
 8016d16:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016d1a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016d1e:	5f6e6f69 	svcpl	0x006e6f69
 8016d22:	705f7069 	subsvc	r7, pc, r9, rrx
 8016d26:	5f74726f 	svcpl	0x0074726f
 8016d2a:	00000062 	andeq	r0, r0, r2, rrx
 8016d2e:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016d32:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016d36:	5f6e6f69 	svcpl	0x006e6f69
 8016d3a:	705f7069 	subsvc	r7, pc, r9, rrx
 8016d3e:	5f74726f 	svcpl	0x0074726f
 8016d42:	00000063 	andeq	r0, r0, r3, rrx
 8016d46:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016d4a:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016d4e:	5f6e6f69 	svcpl	0x006e6f69
 8016d52:	705f7069 	subsvc	r7, pc, r9, rrx
 8016d56:	5f74726f 	svcpl	0x0074726f
 8016d5a:	00000064 	andeq	r0, r0, r4, rrx

08016d5e <ArtNetParamsConst::NET>:
 8016d5e:	0074656e 	rsbseq	r6, r4, lr, ror #10

08016d62 <ArtNetParamsConst::SUBNET>:
 8016d62:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 8016d66:	 	tstvs	r0, r5, ror #8

08016d69 <ArtNetParamsConst::FILE_NAME>:
 8016d69:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 8016d6d:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 8016d71:	 			; <UNDEFINED> instruction: 0xff007478

08016d74 <ArtNetConst::OEM_ID>:
 8016d74:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08016d76 <ArtNetConst::ESTA_ID>:
 8016d76:	 	stmdacc	r1, {r4, r6}

08016d78 <ArtNetConst::VERSION>:
 8016d78:	33323801 	teqcc	r2, #65536	; 0x10000
 8016d7c:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 8016d80:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 8016d84:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 8016d88:	20733834 	rsbscs	r3, r3, r4, lsr r8
 8016d8c:	30007325 	andcc	r7, r0, r5, lsr #6
 8016d90:	6f4e202e 	svcvs	0x004e202e
 8016d94:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 8016d98:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 8016d9c:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 8016da0:	202c6465 	eorcs	r6, ip, r5, ror #8
 8016da4:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 8016da8:	6f687320 	svcvs	0x00687320
 8016dac:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 8016db0:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 8016db4:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8016db8:	000a216e 	andeq	r2, sl, lr, ror #2
 8016dbc:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 8016dc0:	000a6567 	andeq	r6, sl, r7, ror #10
 8016dc4:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8016dc8:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8016dcc:	203a2065 	eorscs	r2, sl, r5, rrx
 8016dd0:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016dd4:	20000a64 	andcs	r0, r0, r4, ror #20
 8016dd8:	20444943 	subcs	r4, r4, r3, asr #18
 8016ddc:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016de0:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016de4:	20000a73 	andcs	r0, r0, r3, ror sl
 8016de8:	726f5020 	rsbvc	r5, pc, #32
 8016dec:	32252074 	eorcc	r2, r5, #116	; 0x74
 8016df0:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 8016df4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8016df8:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 8016dfc:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 8016e00:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8016e04:	2020000a 	eorcs	r0, r0, sl
 8016e08:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8016e0c:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8016e10:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8016e14:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016e18:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 8016e1c:	5b206433 	blpl	882fef0 <__exidx_end+0x818378>
 8016e20:	0a5d6425 	beq	976febc <__exidx_end+0x1758344>
 8016e24:	79532000 	ldmdbvc	r3, {sp}^
 8016e28:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 8016e2c:	7a696e6f 	bvc	9a727f0 <__exidx_end+0x1a5ac78>
 8016e30:	73692065 	cmnvc	r9, #101	; 0x65
 8016e34:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016e38:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016e3c:	00000a64 	andeq	r0, r0, r4, ror #20

08016e40 <CSWTCH.56>:
 8016e40:	08016bf0 	stmdaeq	r1, {r4, r5, r6, r7, r8, r9, fp, sp, lr}
 8016e44:	08016bf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, fp, sp, lr}
 8016e48:	08015e42 	stmdaeq	r1, {r1, r6, r9, sl, fp, ip, lr}
 8016e4c:	08016bf9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, fp, sp, lr}

08016e50 <E131ParamsConst::PRIORITY>:
 8016e50:	6f697270 	svcvs	0x00697270
 8016e54:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8016e58:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016e5c:	00615f74 	rsbeq	r5, r1, r4, ror pc
	...

08016e62 <E131ParamsConst::FILE_NAME>:
 8016e62:	31333165 	teqcc	r3, r5, ror #2
 8016e66:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

08016e6b <E117Const::ACN_PACKET_IDENTIFIER>:
 8016e6b:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 8016e6f:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 8016e73:	00000037 	andeq	r0, r0, r7, lsr r0

08016e77 <E131BridgeConst::VERSION>:
 8016e77:	00001901 	andeq	r1, r0, r1, lsl #18
	...

08016e7c <vtable for ArtNetRdm>:
	...

08016ea8 <UID_ALL>:
 8016ea8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8016eac:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

08016eb0 <vtable for ArtNetRdmController>:
	...
 8016eb8:	0800d1cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, ip, lr, pc}
 8016ebc:	0800d1ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, ip, lr, pc}
 8016ec0:	0800d1bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, ip, lr, pc}
 8016ec4:	0800d14d 	stmdaeq	r0, {r0, r2, r3, r6, r8, ip, lr, pc}
 8016ec8:	0800d15d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, ip, lr, pc}
 8016ecc:	0800d185 	stmdaeq	r0, {r0, r2, r7, r8, ip, lr, pc}
 8016ed0:	0800d29d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, ip, lr, pc}
 8016ed4:	0800d201 	stmdaeq	r0, {r0, r9, ip, lr, pc}
 8016ed8:	0800d3d1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, ip, lr, pc}

08016edc <UID_ALL>:
 8016edc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8016ee0:	4452ffff 	ldrbmi	pc, [r2], #-4095	; 0xfffff001	; <UNPREDICTABLE>
 8016ee4:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 8016ee8:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8016eec:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8016ef0:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8016ef4:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8016ef8:	000a6e6f 	andeq	r6, sl, pc, ror #28
 8016efc:	6e614d20 	cdpvs	13, 6, cr4, cr1, cr0, {1}
 8016f00:	63616675 	cmnvs	r1, #122683392	; 0x7500000
 8016f04:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 8016f08:	614e2072 	hvcvs	57858	; 0xe202
 8016f0c:	3a20656d 	bcc	88304c8 <__exidx_end+0x818950>
 8016f10:	2a2e2520 	bcs	8ba0398 <__exidx_end+0xb88820>
 8016f14:	20000a73 	andcs	r0, r0, r3, ror sl
 8016f18:	756e614d 	strbvc	r6, [lr, #-333]!	; 0xfffffeb3
 8016f1c:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 8016f20:	72657275 	rsbvc	r7, r5, #1342177287	; 0x50000007
 8016f24:	20444920 	subcs	r4, r4, r0, lsr #18
 8016f28:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016f2c:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016f30:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016f34:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 8016f38:	61697265 	cmnvs	r9, r5, ror #4
 8016f3c:	754e206c 	strbvc	r2, [lr, #-108]	; 0xffffff94
 8016f40:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 8016f44:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016f48:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016f4c:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8016f50:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8016f54:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8016f58:	0a58322e 	beq	9623818 <__exidx_end+0x160bca0>
 8016f5c:	6f522000 	svcvs	0x00522000
 8016f60:	6c20746f 	cfstrsvs	mvf7, [r0], #-444	; 0xfffffe44
 8016f64:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
 8016f68:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016f6c:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016f70:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8016f74:	000a732a 	andeq	r7, sl, sl, lsr #6
 8016f78:	6f725020 	svcvs	0x00725020
 8016f7c:	74637564 	strbtvc	r7, [r3], #-1380	; 0xfffffa9c
 8016f80:	74614320 	strbtvc	r4, [r1], #-800	; 0xfffffce0
 8016f84:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
 8016f88:	3a202079 	bcc	881f174 <__exidx_end+0x8075fc>
 8016f8c:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 8016f90:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 8016f94:	20000a58 	andcs	r0, r0, r8, asr sl
 8016f98:	646f7250 	strbtvs	r7, [pc], #-592	; 8016fa0 <UID_ALL+0xc4>
 8016f9c:	20746375 	rsbscs	r6, r4, r5, ror r3
 8016fa0:	61746544 	cmnvs	r4, r4, asr #10
 8016fa4:	20206c69 	eorcs	r6, r0, r9, ror #24
 8016fa8:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016fac:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016fb0:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016fb4:	 	strbmi	r0, [r7], #-10

08016fb6 <DEVICE_LABEL>:
 8016fb6:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8016fba:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 8016fbe:	52204352 	eorpl	r4, r0, #1207959553	; 0x48000001
 8016fc2:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 8016fc6:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 8016fca:	 			; <UNDEFINED> instruction: 0xffff0065

08016fcc <UID_ALL>:
 8016fcc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8016fd0:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08016fd2 <RDMConst::MANUFACTURER_ID>:
 8016fd2:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

08016fd4 <RDMConst::MANUFACTURER_NAME>:
 8016fd4:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8016fd8:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 8016fdc:	6f2e7777 	svcvs	0x002e7777
 8016fe0:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 8016fe4:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 8016fe8:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 8016fec:	0067726f 	rsbeq	r7, r7, pc, ror #4
 8016ff0:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
 8016ff4:	3430252d 	ldrtcc	r2, [r0], #-1325	; 0xfffffad3
 8016ff8:	30252d78 	eorcc	r2, r5, r8, ror sp
 8016ffc:	252d7834 	strcs	r7, [sp, #-2100]!	; 0xfffff7cc
 8017000:	25783230 	ldrbcs	r3, [r8, #-560]!	; 0xfffffdd0
 8017004:	2d783230 	lfmcs	f3, 2, [r8, #-192]!	; 0xffffff40
 8017008:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801700c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8017010:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8017014:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8017018:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 801701c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8017020:	584d4400 	stmdapl	sp, {sl, lr}^
 8017024:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 8017028:	20000a64 	andcs	r0, r0, r4, ror #20
 801702c:	61657242 	cmnvs	r5, r2, asr #4
 8017030:	6974206b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, sp}^
 8017034:	2020656d 	eorcs	r6, r0, sp, ror #10
 8017038:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 801703c:	20000a75 	andcs	r0, r0, r5, ror sl
 8017040:	2042414d 	subcs	r4, r2, sp, asr #2
 8017044:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8017048:	20202020 	eorcs	r2, r0, r0, lsr #32
 801704c:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017050:	20000a75 	andcs	r0, r0, r5, ror sl
 8017054:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
 8017058:	20687365 	rsbcs	r7, r8, r5, ror #6
 801705c:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
 8017060:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017064:	20000a75 	andcs	r0, r0, r5, ror sl
 8017068:	746f6c53 	strbtvc	r6, [pc], #-3155	; 8017070 <RDMConst::MANUFACTURER_NAME+0x9c>
 801706c:	20202073 	eorcs	r2, r0, r3, ror r0
 8017070:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017074:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017078:	00000a75 	andeq	r0, r0, r5, ror sl

0801707c <vtable for DmxSend>:
	...
 8017084:	0800ddb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, fp, ip, lr, pc}
 8017088:	0800de9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, sl, fp, ip, lr, pc}
 801708c:	0800ddb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, sl, fp, ip, lr, pc}
 8017090:	0800dde9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, sl, fp, ip, lr, pc}
 8017094:	0800de1d 	stmdaeq	r0, {r0, r2, r3, r4, r9, sl, fp, ip, lr, pc}
 8017098:	0800de2d 	stmdaeq	r0, {r0, r2, r3, r5, r9, sl, fp, ip, lr, pc}
 801709c:	0800de39 	stmdaeq	r0, {r0, r3, r4, r5, r9, sl, fp, ip, lr, pc}
 80170a0:	0800de45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, ip, lr, pc}
 80170a4:	080127f1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r8, r9, sl, sp}
 80170a8:	080127e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, r9, sl, sp}
 80170ac:	080127eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, sl, sp}
 80170b0:	080127f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, sp}

080170b4 <DmxParamsConst::BREAK_TIME>:
 80170b4:	61657262 	cmnvs	r5, r2, ror #4
 80170b8:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 80170bc:	 	movwvc	r6, #1389	; 0x56d

080170bf <DmxParamsConst::SLOTS_COUNT>:
 80170bf:	746f6c73 	strbtvc	r6, [pc], #-3187	; 80170c7 <DmxParamsConst::SLOTS_COUNT+0x8>
 80170c3:	6f635f73 	svcvs	0x00635f73
 80170c7:	00746e75 	rsbseq	r6, r4, r5, ror lr

080170cb <DmxParamsConst::REFRESH_RATE>:
 80170cb:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 80170cf:	5f687365 	svcpl	0x00687365
 80170d3:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	...

080170d8 <DmxParamsConst::MAB_TIME>:
 80170d8:	5f62616d 	svcpl	0x0062616d
 80170dc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	...

080170e1 <DmxParamsConst::FILE_NAME>:
 80170e1:	61726170 	cmnvs	r2, r0, ror r1
 80170e5:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 80170e9:	74007478 	strvc	r7, [r0], #-1144	; 0xfffffb88
 80170ed:	625f7063 	subsvs	r7, pc, #99	; 0x63
 80170f1:	6e696765 	cdpvs	7, 6, cr6, cr9, cr5, {3}
 80170f5:	6f74203a 	svcvs	0x0074203a
 80170f9:	616d206f 	cmnvs	sp, pc, rrx
 80170fd:	6320796e 			; <UNDEFINED> instruction: 0x6320796e
 8017101:	656e6e6f 	strbvs	r6, [lr, #-3695]!	; 0xfffff191
 8017105:	6f697463 	svcvs	0x00697463
 8017109:	6200736e 	andvs	r7, r0, #-1207959551	; 0xb8000001
 801710d:	00646e69 	rsbeq	r6, r4, r9, ror #28
 8017111:	69626e75 	stmdbvs	r2!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 8017115:	000a646e 	andeq	r6, sl, lr, ror #8
 8017119:	20505241 	subscs	r5, r0, r1, asr #4
 801711d:	6b6f6f6c 	blvs	9bf2ed5 <__exidx_end+0x1bdb35d>
 8017121:	66207075 			; <UNDEFINED> instruction: 0x66207075
 8017125:	656c6961 	strbvs	r6, [ip, #-2401]!	; 0xfffff69f
 8017129:	3e2d2064 	cdpcc	0, 2, cr2, cr13, cr4, {3}
 801712d:	66656420 	strbtvs	r6, [r5], -r0, lsr #8
 8017131:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 8017135:	74616720 	strbtvc	r6, [r1], #-1824	; 0xfffff8e0
 8017139:	79617765 	stmdbvc	r1!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
 801713d:	5241000a 	subpl	r0, r1, #10
 8017141:	6f6c2050 	svcvs	0x006c2050
 8017145:	70756b6f 	rsbsvc	r6, r5, pc, ror #22
 8017149:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
 801714d:	0a64656c 	beq	9930705 <__exidx_end+0x1918b8d>
	...

08017152 <NetworkConst::MSG_MDNS_CONFIG>:
 8017152:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8017156:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 801715a:	20676e69 	rsbcs	r6, r7, r9, ror #28
 801715e:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

08017163 <NetworkConst::MSG_NETWORK_INIT>:
 8017163:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8017167:	206b726f 	rsbcs	r7, fp, pc, ror #4
 801716b:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 801716f:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 8017173:	302e302e 	eorcc	r3, lr, lr, lsr #32
 8017177:	3135322e 	teqcc	r5, lr, lsr #4
 801717b:	63745f00 	cmnvs	r4, #0, 30
 801717f:	6f6c2e70 	svcvs	0x006c2e70
 8017183:	006c6163 	rsbeq	r6, ip, r3, ror #2
 8017187:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 801718b:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 801718f:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 8017197 <NetworkConst::MSG_NETWORK_INIT+0x34>
 8017193:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 8017197:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 801633b <index_html+0xd9>
 801719b:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 801719f:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 80171a3:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 80171a7:	20000a53 	andcs	r0, r0, r3, asr sl
 80171ab:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 80171af:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 80171b3:	0a676e69 	beq	99f2b5f <__exidx_end+0x19dafe7>
 80171b7:	614e2000 	mrsvs	r2, (UNDEF: 78)
 80171bb:	3a20656d 	bcc	8830777 <__exidx_end+0x818bff>
 80171bf:	0a732520 	beq	9ce0647 <__exidx_end+0x1cc8acf>
 80171c3:	73252000 			; <UNDEFINED> instruction: 0x73252000
 80171c7:	20642520 	rsbcs	r2, r4, r0, lsr #10
 80171cb:	000a7325 	andeq	r7, sl, r5, lsr #6
 80171cf:	30687465 	rsbcc	r7, r8, r5, ror #8
 80171d3:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 80171d7:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 80171db:	5f656369 	svcpl	0x00656369
 80171df:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 80171e3:	6b726f77 	blvs	9cb2fc7 <__exidx_end+0x1c9b44f>
 80171e7:	4820000a 	stmdami	r0!, {r1, r3}
 80171eb:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 80171ef:	20656d61 	rsbcs	r6, r5, r1, ror #26
 80171f3:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 80171f7:	20000a73 	andcs	r0, r0, r3, ror sl
 80171fb:	614e6649 	cmpvs	lr, r9, asr #12
 80171ff:	2020656d 	eorcs	r6, r0, sp, ror #10
 8017203:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017207:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801720b:	000a7325 	andeq	r7, sl, r5, lsr #6
 801720f:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 8017213:	20202074 	eorcs	r2, r0, r4, ror r0
 8017217:	3a202020 	bcc	881f29f <__exidx_end+0x807727>
 801721b:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801721f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017223:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017227:	0a64252f 	beq	99206eb <__exidx_end+0x1908b73>
 801722b:	654e2000 	strbvs	r2, [lr, #-0]
 801722f:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 8017233:	2020206b 	eorcs	r2, r0, fp, rrx
 8017237:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801723b:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801723f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017243:	20000a64 	andcs	r0, r0, r4, ror #20
 8017247:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 801724b:	20796177 	rsbscs	r6, r9, r7, ror r1
 801724f:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017253:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017257:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801725b:	0a64252e 	beq	992071b <__exidx_end+0x1908ba3>
 801725f:	72422000 	subvc	r2, r2, #0
 8017263:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 8017267:	20747361 	rsbscs	r7, r4, r1, ror #6
 801726b:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801726f:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017273:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017277:	20000a64 	andcs	r0, r0, r4, ror #20
 801727b:	2063614d 	rsbcs	r6, r3, sp, asr #2
 801727f:	20202020 	eorcs	r2, r0, r0, lsr #32
 8017283:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017287:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801728b:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 801728f:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8017293:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8017297:	3a78322e 	bcc	9e23b57 <__exidx_end+0x1e0bfdf>
 801729b:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 801729f:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 80172a3:	20000a78 	andcs	r0, r0, r8, ror sl
 80172a7:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 80172ab:	20202020 	eorcs	r2, r0, r0, lsr #32
 80172af:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80172b3:	000a6325 	andeq	r6, sl, r5, lsr #6
 80172b7:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 80172bb:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 80172bf:	 	rsbvc	r0, r9, r0, asr r0

080172c1 <NetworkParamsConst::IP_ADDRESS>:
 80172c1:	615f7069 	cmpvs	pc, r9, rrx
 80172c5:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 80172c9:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

080172cc <NetworkParamsConst::DEFAULT_GATEWAY>:
 80172cc:	61666564 	cmnvs	r6, r4, ror #10
 80172d0:	5f746c75 	svcpl	0x00746c75
 80172d4:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 80172d8:	00796177 	rsbseq	r6, r9, r7, ror r1

080172dc <NetworkParamsConst::DHCP_RETRY_TIME>:
 80172dc:	70636864 	rsbvc	r6, r3, r4, ror #16
 80172e0:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 80172e4:	745f7972 	ldrbvc	r7, [pc], #-2418	; 80172ec <NetworkParamsConst::HOSTNAME>
 80172e8:	00656d69 	rsbeq	r6, r5, r9, ror #26

080172ec <NetworkParamsConst::HOSTNAME>:
 80172ec:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 80172f0:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

080172f5 <NetworkParamsConst::NET_MASK>:
 80172f5:	5f74656e 	svcpl	0x0074656e
 80172f9:	6b73616d 	blvs	9cef8b5 <__exidx_end+0x1cd7d3d>
	...

080172fe <NetworkParamsConst::USE_DHCP>:
 80172fe:	5f657375 	svcpl	0x00657375
 8017302:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08017307 <NetworkParamsConst::FILE_NAME>:
 8017307:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 801730b:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 801730f:	00747874 	rsbseq	r7, r4, r4, ror r8
 8017313:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 8017317:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 801731b:	61747320 	cmnvs	r4, r0, lsr #6
 801731f:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8017323:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017327:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801732b:	252f6425 	strcs	r6, [pc, #-1061]!	; 8016f0e <UID_ALL+0x32>
 801732f:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8017333:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 8017337:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801733b:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801733f:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8017343:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 8017347:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801734b:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801734f:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8017353:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 8017357:	20657261 	rsbcs	r7, r5, r1, ror #4
 801735b:	2a2e2556 	bcs	8ba08bb <__exidx_end+0xb88d43>
 801735f:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 8017363:	72205043 	eorvc	r5, r0, #67	; 0x43
 8017367:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 801736b:	00676e69 	rsbeq	r6, r7, r9, ror #28
 801736f:	50434844 	subpl	r4, r3, r4, asr #16
 8017373:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8017377:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 801737b:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 801737f:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8017383:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8017387:	6f647475 	svcvs	0x00647475
 801738b:	00006e77 	andeq	r6, r0, r7, ror lr
	...

08017390 <pArray>:
 8017390:	08017424 	stmdaeq	r1, {r2, r5, sl, ip, sp, lr}
 8017394:	080173e0 	stmdaeq	r1, {r5, r6, r7, r8, r9, ip, sp, lr}
 8017398:	080172c1 	stmdaeq	r1, {r0, r6, r7, r9, ip, sp, lr}
 801739c:	0801742a 	stmdaeq	r1, {r1, r3, r5, sl, ip, sp, lr}
 80173a0:	08017764 	stmdaeq	r1, {r2, r5, r6, r8, r9, sl, ip, sp, lr}
 80173a4:	080173eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, ip, sp, lr}
 80173a8:	08016cab 	stmdaeq	r1, {r0, r1, r3, r5, r7, sl, fp, sp, lr}
 80173ac:	080172ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, ip, sp, lr}
 80173b0:	080176ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, r9, sl, ip, sp, lr}
 80173b4:	080176bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, ip, sp, lr}
 80173b8:	080176cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r9, sl, ip, sp, lr}
 80173bc:	080176db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r9, sl, ip, sp, lr}
 80173c0:	080172f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r9, ip, sp, lr}
 80173c4:	08017733 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, sl, ip, sp, lr}
 80173c8:	08016cfe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, sl, fp, sp, lr}
 80173cc:	08016d16 	stmdaeq	r1, {r1, r2, r4, r8, sl, fp, sp, lr}
 80173d0:	08016d2e 	stmdaeq	r1, {r1, r2, r3, r5, r8, sl, fp, sp, lr}
 80173d4:	08016d46 	stmdaeq	r1, {r1, r2, r6, r8, sl, fp, sp, lr}
 80173d8:	080172cc 	stmdaeq	r1, {r2, r3, r6, r7, r9, ip, sp, lr}
 80173dc:	080173f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, ip, sp, lr}

080173e0 <DisplayUdfParamsConst::BOARD_NAME>:
 80173e0:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 80173e4:	616e5f64 	cmnvs	lr, r4, ror #30
 80173e8:	 	tstvs	r0, sp, ror #10

080173eb <DisplayUdfParamsConst::ACTIVE_PORTS>:
 80173eb:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 80173ef:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 80173f3:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

080173f8 <DisplayUdfParamsConst::DMX_DIRECTION>:
 80173f8:	5f786d64 	svcpl	0x00786d64
 80173fc:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017400:	6f697463 	svcvs	0x00697463
 8017404:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

08017406 <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 8017406:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 801740a:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 801740e:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8016ea9 <UID_ALL+0x1>
 8017412:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

08017414 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 8017414:	70696c66 	rsbvc	r6, r9, r6, ror #24
 8017418:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 801741c:	61636974 	smcvs	13972	; 0x3694
 8017420:	00796c6c 	rsbseq	r6, r9, ip, ror #24

08017424 <DisplayUdfParamsConst::TITLE>:
 8017424:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8017428:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

0801742a <DisplayUdfParamsConst::VERSION>:
 801742a:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801742e:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08017432 <DisplayUdfParamsConst::FILE_NAME>:
 8017432:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8017436:	2e79616c 	rpwcsez	f6, f1, #4.0
 801743a:	00747874 	rsbseq	r7, r4, r4, ror r8

0801743e <DisplayUdfParamsConst::INTENSITY>:
 801743e:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8017442:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8017446:	20200079 	eorcs	r0, r0, r9, ror r0
 801744a:	4f002020 	svcmi	0x00002020
 801744e:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8017452:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8017456:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 801745a:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801745e:	4f007325 	svcmi	0x00007325
 8017462:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8017466:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 801746a:	3a64253a 	bcc	992095a <__exidx_end+0x1908de2>
 801746e:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8017472:	73252073 			; <UNDEFINED> instruction: 0x73252073
 8017476:	3a632500 	bcc	98e087e <__exidx_end+0x18c8d06>
 801747a:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801747e:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017482:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017486:	3a504100 	bcc	942788e <__exidx_end+0x140fd16>
 801748a:	00642520 	rsbeq	r2, r4, r0, lsr #10
 801748e:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 8017492:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8017496:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 801749a:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

080174a0 <s_aStorSize>:
 80174a0:	00000060 	andeq	r0, r0, r0, rrx
 80174a4:	00000090 	muleq	r0, r0, r0
 80174a8:	00000020 	andeq	r0, r0, r0, lsr #32
 80174ac:	00000040 	andeq	r0, r0, r0, asr #32
 80174b0:	00000060 	andeq	r0, r0, r0, rrx
 80174b4:	00000040 	andeq	r0, r0, r0, asr #32
 80174b8:	00000020 	andeq	r0, r0, r0, lsr #32
 80174bc:	00000020 	andeq	r0, r0, r0, lsr #32
 80174c0:	000001e0 	andeq	r0, r0, r0, ror #3
 80174c4:	00000040 	andeq	r0, r0, r0, asr #32
 80174c8:	00000020 	andeq	r0, r0, r0, lsr #32
 80174cc:	00000060 	andeq	r0, r0, r0, rrx
 80174d0:	00000030 	andeq	r0, r0, r0, lsr r0
 80174d4:	00000020 	andeq	r0, r0, r0, lsr #32
 80174d8:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 80174dc:	00000030 	andeq	r0, r0, r0, lsr r0
 80174e0:	00000040 	andeq	r0, r0, r0, asr #32
 80174e4:	00000020 	andeq	r0, r0, r0, lsr #32
 80174e8:	00000060 	andeq	r0, r0, r0, rrx
 80174ec:	00000020 	andeq	r0, r0, r0, lsr #32
 80174f0:	00000400 	andeq	r0, r0, r0, lsl #8
 80174f4:	00000020 	andeq	r0, r0, r0, lsr #32
 80174f8:	00000020 	andeq	r0, r0, r0, lsr #32
 80174fc:	00000040 	andeq	r0, r0, r0, asr #32
 8017500:	00000060 	andeq	r0, r0, r0, rrx
 8017504:	00000020 	andeq	r0, r0, r0, lsr #32
 8017508:	00000020 	andeq	r0, r0, r0, lsr #32
 801750c:	000000c0 	andeq	r0, r0, r0, asr #1

08017510 <vtable for StoreDisplayUdf>:
	...
 8017518:	08011a09 	stmdaeq	r1, {r0, r3, r9, fp, ip}
 801751c:	08011a55 	stmdaeq	r1, {r0, r2, r4, r6, r9, fp, ip}
 8017520:	08011a31 	stmdaeq	r1, {r0, r4, r5, r9, fp, ip}
 8017524:	08011a0d 	stmdaeq	r1, {r0, r2, r3, r9, fp, ip}

08017528 <vtable for StoreDmxSend>:
	...
 8017530:	08011a75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, fp, ip}
 8017534:	08011ac1 	stmdaeq	r1, {r0, r6, r7, r9, fp, ip}
 8017538:	08011a9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r9, fp, ip}
 801753c:	08011a79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r9, fp, ip}

08017540 <vtable for StoreNetwork>:
	...
 8017548:	08011ae1 	stmdaeq	r1, {r0, r5, r6, r7, r9, fp, ip}
 801754c:	08011bf5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, fp, ip}
 8017550:	08011ae9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, fp, ip}
 8017554:	08011c09 	stmdaeq	r1, {r0, r3, sl, fp, ip}
 8017558:	08011b99 	stmdaeq	r1, {r0, r3, r4, r7, r8, r9, fp, ip}
 801755c:	08011b6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, fp, ip}
 8017560:	08011b3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, r9, fp, ip}
 8017564:	08011bc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, r9, fp, ip}
 8017568:	08011b0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, fp, ip}
 801756c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017570:	00000000 	andeq	r0, r0, r0
 8017574:	08011ae3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r9, fp, ip}
 8017578:	08011c01 	stmdaeq	r1, {r0, sl, fp, ip}
 801757c:	08011bbd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, r9, fp, ip}
 8017580:	08011b91 	stmdaeq	r1, {r0, r4, r7, r8, r9, fp, ip}
 8017584:	08011b65 	stmdaeq	r1, {r0, r2, r5, r6, r8, r9, fp, ip}
 8017588:	08011bed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, r9, fp, ip}
 801758c:	08011b35 	stmdaeq	r1, {r0, r2, r4, r5, r8, r9, fp, ip}

08017590 <vtable for StoreRemoteConfig>:
	...
 8017598:	08011c41 	stmdaeq	r1, {r0, r6, sl, fp, ip}
 801759c:	08011c8d 	stmdaeq	r1, {r0, r2, r3, r7, sl, fp, ip}
 80175a0:	08011c69 	stmdaeq	r1, {r0, r3, r5, r6, sl, fp, ip}
 80175a4:	08011c45 	stmdaeq	r1, {r0, r2, r6, sl, fp, ip}

080175a8 <vtable for StoreArtNet>:
	...
 80175b0:	08011d03 	stmdaeq	r1, {r0, r1, r8, sl, fp, ip}
 80175b4:	08011f91 	stmdaeq	r1, {r0, r4, r7, r8, r9, sl, fp, ip}
 80175b8:	08011d09 	stmdaeq	r1, {r0, r3, r8, sl, fp, ip}
 80175bc:	08011f71 	stmdaeq	r1, {r0, r4, r5, r6, r8, r9, sl, fp, ip}
 80175c0:	08011ebd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r9, sl, fp, ip}
 80175c4:	08011e8d 	stmdaeq	r1, {r0, r2, r3, r7, r9, sl, fp, ip}
 80175c8:	08011e61 	stmdaeq	r1, {r0, r5, r6, r9, sl, fp, ip}
 80175cc:	08011d2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, sl, fp, ip}
 80175d0:	08011d75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, sl, fp, ip}
 80175d4:	08011da5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, fp, ip}
 80175d8:	08011dd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, sl, fp, ip}
 80175dc:	08011e1d 	stmdaeq	r1, {r0, r2, r3, r4, r9, sl, fp, ip}
 80175e0:	08011ef1 	stmdaeq	r1, {r0, r4, r5, r6, r7, r9, sl, fp, ip}
 80175e4:	08011cff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, sl, fp, ip}
 80175e8:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80175ec:	00000000 	andeq	r0, r0, r0
 80175f0:	08011d05 	stmdaeq	r1, {r0, r2, r8, sl, fp, ip}
 80175f4:	08011f9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, r9, sl, fp, ip}
 80175f8:	08011ee9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r9, sl, fp, ip}
 80175fc:	08011eb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r9, sl, fp, ip}
 8017600:	08011e85 	stmdaeq	r1, {r0, r2, r7, r9, sl, fp, ip}
 8017604:	08011d6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, sl, fp, ip}
 8017608:	08011d9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r8, sl, fp, ip}
 801760c:	08011dd1 	stmdaeq	r1, {r0, r4, r6, r7, r8, sl, fp, ip}
 8017610:	08011d01 	stmdaeq	r1, {r0, r8, sl, fp, ip}
 8017614:	08011e15 	stmdaeq	r1, {r0, r2, r4, r9, sl, fp, ip}
 8017618:	08011e59 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, fp, ip}
 801761c:	08011f69 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, sl, fp, ip}

08017620 <vtable for StoreRDMDevice>:
	...
 8017628:	08011fc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, sl, fp, ip}
 801762c:	08012039 	stmdaeq	r1, {r0, r3, r4, r5, sp}
 8017630:	08011fd1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, sl, fp, ip}
 8017634:	0801204d 	stmdaeq	r1, {r0, r2, r3, r6, sp}
 8017638:	08011ff5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 801763c:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017640:	00000000 	andeq	r0, r0, r0
 8017644:	08011fcb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, sl, fp, ip}
 8017648:	08012045 	stmdaeq	r1, {r0, r2, r6, sp}
 801764c:	08012031 	stmdaeq	r1, {r0, r4, r5, sp}
 8017650:	3a434d46 	bcc	90eab70 <__exidx_end+0x10d2ff8>
 8017654:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 8017658:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 801765c:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8017660:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8017664:	6f742068 	svcvs	0x00742068
 8017668:	206c6174 	rsbcs	r6, ip, r4, ror r1
 801766c:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 8017670:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 8017674:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8017678:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 801767c:	2522000a 	strcs	r0, [r2, #-10]!
 8017680:	223a2273 	eorscs	r2, sl, #805306375	; 0x30000007
 8017684:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017688:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801768c:	2264252e 	rsbcs	r2, r4, #192937984	; 0xb800000
 8017690:	2523002c 	strcs	r0, [r3, #-44]!	; 0xffffffd4
 8017694:	64253d73 	strtvs	r3, [r5], #-3443	; 0xfffff28d
 8017698:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801769c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80176a0:	23000a64 	movwcs	r0, #2660	; 0xa64
 80176a4:	20732520 	rsbscs	r2, r3, r0, lsr #10
 80176a8:	 	strvc	r0, [r0, #-2595]	; 0xfffff5dd

080176ab <LightSetParamsConst::UNIVERSE_PORT>:
 80176ab:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80176af:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80176b3:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80176b7:	00615f74 	rsbeq	r5, r1, r4, ror pc
 80176bb:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80176bf:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80176c3:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80176c7:	00625f74 	rsbeq	r5, r2, r4, ror pc
 80176cb:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80176cf:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80176d3:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80176d7:	00635f74 	rsbeq	r5, r3, r4, ror pc
 80176db:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80176df:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80176e3:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80176e7:	00645f74 	rsbeq	r5, r4, r4, ror pc

080176eb <LightSetParamsConst::MERGE_MODE_PORT>:
 80176eb:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80176ef:	6f6d5f65 	svcvs	0x006d5f65
 80176f3:	705f6564 	subsvc	r6, pc, r4, ror #10
 80176f7:	5f74726f 	svcpl	0x0074726f
 80176fb:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 80176ff:	5f656772 	svcpl	0x00656772
 8017703:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8017707:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801770b:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801770f:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017713:	6f6d5f65 	svcvs	0x006d5f65
 8017717:	705f6564 	subsvc	r6, pc, r4, ror #10
 801771b:	5f74726f 	svcpl	0x0074726f
 801771f:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 8017723:	5f656772 	svcpl	0x00656772
 8017727:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801772b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801772f:	00645f74 	rsbeq	r5, r4, r4, ror pc

08017733 <LightSetParamsConst::DMX_START_ADDRESS>:
 8017733:	5f786d64 	svcpl	0x00786d64
 8017737:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801773b:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 801773f:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 8017743:	 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^

08017745 <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 8017745:	61736964 	cmnvs	r3, r4, ror #18
 8017749:	5f656c62 	svcpl	0x00656c62
 801774d:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017751:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 8017755:	756f656d 	strbvc	r6, [pc, #-1389]!	; 80171f0 <NetworkConst::MSG_NETWORK_INIT+0x8d>
 8017759:	 	smcvs	24580	; 0x6004

0801775b <LightSetParamsConst::FAILSAFE>:
 801775b:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 801775f:	65666173 	strbvs	r6, [r6, #-371]!	; 0xfffffe8d
	...

08017764 <LightSetParamsConst::UNIVERSE>:
 8017764:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017768:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

0801776d <LightSetParamsConst::DIRECTION>:
 801776d:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017771:	6f697463 	svcvs	0x00697463
 8017775:	6f705f6e 	svcvs	0x00705f6e
 8017779:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 801777d:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8017781:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8017785:	5f6e6f69 	svcpl	0x006e6f69
 8017789:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801778d:	0000625f 	andeq	r6, r0, pc, asr r2
 8017791:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017795:	6f697463 	svcvs	0x00697463
 8017799:	6f705f6e 	svcvs	0x00705f6e
 801779d:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 80177a1:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 80177a5:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 80177a9:	5f6e6f69 	svcpl	0x006e6f69
 80177ad:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 80177b1:	0000645f 	andeq	r6, r0, pc, asr r4
 80177b5:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 80177b9:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 80177bd:	66207961 	strtvs	r7, [r0], -r1, ror #18
 80177c1:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 80177c5:	31485300 	mrscc	r5, (UNDEF: 120)
 80177c9:	00363031 	eorseq	r3, r6, r1, lsr r0
 80177cd:	31445353 	cmpcc	r4, r3, asr r3
 80177d1:	00363033 	eorseq	r3, r6, r3, lsr r0
 80177d5:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 80177d9:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 80177dd:	000a2964 	andeq	r2, sl, r4, ror #18
 80177e1:	aaeeaa40 	bge	7bc20e9 <__stack_size+0x7bc00e9>
 80177e5:	 	andmi	r0, r0, lr, ror #1

080177e8 <_OledFont8x6>:
 80177e8:	00000040 	andeq	r0, r0, r0, asr #32
 80177ec:	40000000 	andmi	r0, r0, r0
 80177f0:	005f0000 	subseq	r0, pc, r0
 80177f4:	00400000 	subeq	r0, r0, r0
 80177f8:	00070007 	andeq	r0, r7, r7
 80177fc:	7f144000 	svcvc	0x00144000
 8017800:	00147f14 	andseq	r7, r4, r4, lsl pc
 8017804:	7f2a2440 	svcvc	0x002a2440
 8017808:	4000122a 	andmi	r1, r0, sl, lsr #4
 801780c:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8017810:	36400062 	strbcc	r0, [r0], -r2, rrx
 8017814:	50205649 	eorpl	r5, r0, r9, asr #12
 8017818:	08004000 	stmdaeq	r0, {lr}
 801781c:	00000307 	andeq	r0, r0, r7, lsl #6
 8017820:	221c0040 	andscs	r0, ip, #64	; 0x40
 8017824:	40000041 	andmi	r0, r0, r1, asr #32
 8017828:	1c224100 	stfnes	f4, [r2], #-0
 801782c:	2a400000 	bcs	9017834 <__exidx_end+0xfffcbc>
 8017830:	2a1c7f1c 	bcs	87374a8 <__exidx_end+0x71f930>
 8017834:	08084000 	stmdaeq	r8, {lr}
 8017838:	0008083e 	andeq	r0, r8, lr, lsr r8
 801783c:	70800040 	addvc	r0, r0, r0, asr #32
 8017840:	40000030 	andmi	r0, r0, r0, lsr r0
 8017844:	08080808 	stmdaeq	r8, {r3, fp}
 8017848:	00400008 	subeq	r0, r0, r8
 801784c:	00606000 	rsbeq	r6, r0, r0
 8017850:	10204000 	eorne	r4, r0, r0
 8017854:	00020408 	andeq	r0, r2, r8, lsl #8
 8017858:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 801785c:	40003e45 	andmi	r3, r0, r5, asr #28
 8017860:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8017864:	72400000 	subvc	r0, r0, #0
 8017868:	46494949 	strbmi	r4, [r9], -r9, asr #18
 801786c:	41214000 			; <UNDEFINED> instruction: 0x41214000
 8017870:	00334d49 	eorseq	r4, r3, r9, asr #26
 8017874:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8017878:	4000107f 	andmi	r1, r0, pc, ror r0
 801787c:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8017880:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8017884:	3149494a 	cmpcc	r9, sl, asr #18
 8017888:	21414000 	mrscs	r4, (UNDEF: 65)
 801788c:	00070911 	andeq	r0, r7, r1, lsl r9
 8017890:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8017894:	40003649 	andmi	r3, r0, r9, asr #12
 8017898:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 801789c:	0040001e 	subeq	r0, r0, lr, lsl r0
 80178a0:	00001400 	andeq	r1, r0, r0, lsl #8
 80178a4:	40004000 	andmi	r4, r0, r0
 80178a8:	00000034 	andeq	r0, r0, r4, lsr r0
 80178ac:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 80178b0:	40004122 	andmi	r4, r0, r2, lsr #2
 80178b4:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 80178b8:	00400014 	subeq	r0, r0, r4, lsl r0
 80178bc:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 80178c0:	01024000 	mrseq	r4, (UNDEF: 2)
 80178c4:	00060959 	andeq	r0, r6, r9, asr r9
 80178c8:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 80178cc:	40004e59 	andmi	r4, r0, r9, asr lr
 80178d0:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 80178d4:	7f40007c 	svcvc	0x0040007c
 80178d8:	36494949 	strbcc	r4, [r9], -r9, asr #18
 80178dc:	413e4000 	teqmi	lr, r0
 80178e0:	00224141 	eoreq	r4, r2, r1, asr #2
 80178e4:	41417f40 	cmpmi	r1, r0, asr #30
 80178e8:	40003e41 	andmi	r3, r0, r1, asr #28
 80178ec:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 80178f0:	7f400041 	svcvc	0x00400041
 80178f4:	01090909 	tsteq	r9, r9, lsl #18
 80178f8:	413e4000 	teqmi	lr, r0
 80178fc:	00735141 	rsbseq	r5, r3, r1, asr #2
 8017900:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8017904:	40007f08 	andmi	r7, r0, r8, lsl #30
 8017908:	417f4100 	cmnmi	pc, r0, lsl #2
 801790c:	20400000 	subcs	r0, r0, r0
 8017910:	013f4140 	teqeq	pc, r0, asr #2
 8017914:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8017918:	00412214 	subeq	r2, r1, r4, lsl r2
 801791c:	40407f40 	submi	r7, r0, r0, asr #30
 8017920:	40004040 	andmi	r4, r0, r0, asr #32
 8017924:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 8017928:	7f40007f 	svcvc	0x0040007f
 801792c:	7f100804 	svcvc	0x00100804
 8017930:	413e4000 	teqmi	lr, r0
 8017934:	003e4141 	eorseq	r4, lr, r1, asr #2
 8017938:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 801793c:	40000609 	andmi	r0, r0, r9, lsl #12
 8017940:	2151413e 	cmpcs	r1, lr, lsr r1
 8017944:	7f40005e 	svcvc	0x0040005e
 8017948:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 801794c:	49264000 	stmdbmi	r6!, {lr}
 8017950:	00324949 	eorseq	r4, r2, r9, asr #18
 8017954:	7f010340 	svcvc	0x00010340
 8017958:	40000301 	andmi	r0, r0, r1, lsl #6
 801795c:	4040403f 	submi	r4, r0, pc, lsr r0
 8017960:	1f40003f 	svcne	0x0040003f
 8017964:	1f204020 	svcne	0x00204020
 8017968:	403f4000 	eorsmi	r4, pc, r0
 801796c:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 8017970:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 8017974:	40006314 	andmi	r6, r0, r4, lsl r3
 8017978:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 801797c:	61400003 	cmpvs	r0, r3
 8017980:	434d4959 	movtmi	r4, #55641	; 0xd959
 8017984:	7f004000 	svcvc	0x00004000
 8017988:	00414141 	subeq	r4, r1, r1, asr #2
 801798c:	08040240 	stmdaeq	r4, {r6, r9}
 8017990:	40002010 	andmi	r2, r0, r0, lsl r0
 8017994:	41414100 	mrsmi	r4, (UNDEF: 81)
 8017998:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 801799c:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 80179a0:	40404000 	submi	r4, r0, r0
 80179a4:	00404040 	subeq	r4, r0, r0, asr #32
 80179a8:	07030040 	streq	r0, [r3, -r0, asr #32]
 80179ac:	40000008 	andmi	r0, r0, r8
 80179b0:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 80179b4:	7f400040 	svcvc	0x00400040
 80179b8:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 80179bc:	44384000 	ldrtmi	r4, [r8], #-0
 80179c0:	00284444 	eoreq	r4, r8, r4, asr #8
 80179c4:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 80179c8:	40007f28 	andmi	r7, r0, r8, lsr #30
 80179cc:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 80179d0:	00400018 	subeq	r0, r0, r8, lsl r0
 80179d4:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 80179d8:	a4184000 	ldrge	r4, [r8], #-0
 80179dc:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 80179e0:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 80179e4:	40007804 	andmi	r7, r0, r4, lsl #16
 80179e8:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 80179ec:	20400000 	subcs	r0, r0, r0
 80179f0:	003d4040 	eorseq	r4, sp, r0, asr #32
 80179f4:	107f4000 	rsbsne	r4, pc, r0
 80179f8:	00004428 	andeq	r4, r0, r8, lsr #8
 80179fc:	7f410040 	svcvc	0x00410040
 8017a00:	40000040 	andmi	r0, r0, r0, asr #32
 8017a04:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 8017a08:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8017a0c:	78040408 	stmdavc	r4, {r3, sl}
 8017a10:	44384000 	ldrtmi	r4, [r8], #-0
 8017a14:	00384444 	eorseq	r4, r8, r4, asr #8
 8017a18:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 8017a1c:	40001824 	andmi	r1, r0, r4, lsr #16
 8017a20:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8017a24:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 8017a28:	08040408 	stmdaeq	r4, {r3, sl}
 8017a2c:	54484000 	strbpl	r4, [r8], #-0
 8017a30:	00245454 	eoreq	r5, r4, r4, asr r4
 8017a34:	3f040440 	svccc	0x00040440
 8017a38:	40002444 	andmi	r2, r0, r4, asr #8
 8017a3c:	2040403c 	subcs	r4, r0, ip, lsr r0
 8017a40:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8017a44:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 8017a48:	403c4000 	eorsmi	r4, ip, r0
 8017a4c:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8017a50:	10284440 	eorne	r4, r8, r0, asr #8
 8017a54:	40004428 	andmi	r4, r0, r8, lsr #8
 8017a58:	9090904c 	addsls	r9, r0, ip, asr #32
 8017a5c:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 8017a60:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 8017a64:	08004000 	stmdaeq	r0, {lr}
 8017a68:	00004136 	andeq	r4, r0, r6, lsr r1
 8017a6c:	77000040 	strvc	r0, [r0, -r0, asr #32]
 8017a70:	40000000 	andmi	r0, r0, r0
 8017a74:	08364100 	ldmdaeq	r6!, {r8, lr}
 8017a78:	02400000 	subeq	r0, r0, #0
 8017a7c:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 8017a80:	263c4000 	ldrtcs	r4, [ip], -r0
 8017a84:	003c2623 	eorseq	r2, ip, r3, lsr #12

08017a88 <oled_128x32_init>:
 8017a88:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8017a8c:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8017a90:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8017a94:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 8017a98:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8017a9c:	a6a440db 	ssatge	r4, #5, fp, asr #1

08017aa0 <oled_128x64_init>:
 8017aa0:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8017aa4:	4000d33f 	andmi	sp, r0, pc, lsr r3
 8017aa8:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8017aac:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 8017ab0:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8017ab4:	a6a440db 	ssatge	r4, #5, fp, asr #1

08017ab8 <vtable for Ssd1306>:
	...
 8017ac0:	08012955 	stmdaeq	r1, {r0, r2, r4, r6, r8, fp, sp}
 8017ac4:	08012981 	stmdaeq	r1, {r0, r7, r8, fp, sp}
 8017ac8:	08012c91 	stmdaeq	r1, {r0, r4, r7, sl, fp, sp}
 8017acc:	08012c19 	stmdaeq	r1, {r0, r3, r4, sl, fp, sp}
 8017ad0:	08012ae5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r9, fp, sp}
 8017ad4:	080129a1 	stmdaeq	r1, {r0, r5, r7, r8, fp, sp}
 8017ad8:	080129c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, fp, sp}
 8017adc:	08012abb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, fp, sp}
 8017ae0:	08012a75 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, fp, sp}
 8017ae4:	08012957 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, fp, sp}
 8017ae8:	08012b21 	stmdaeq	r1, {r0, r5, r8, r9, fp, sp}
 8017aec:	08012b2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, fp, sp}
 8017af0:	08012b47 	stmdaeq	r1, {r0, r1, r2, r6, r8, r9, fp, sp}
 8017af4:	08012959 	stmdaeq	r1, {r0, r3, r4, r6, r8, fp, sp}
 8017af8:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8017afc:	5b1b006d 	blpl	86d7cb8 <__exidx_end+0x6c0140>
 8017b00:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8017b04:	31335b1b 	teqcc	r3, fp, lsl fp
 8017b08:	5b1b006d 	blpl	86d7cc4 <__exidx_end+0x6c014c>
 8017b0c:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8017b10:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8017b14:	5b1b006d 	blpl	86d7cd0 <__exidx_end+0x6c0158>
 8017b18:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 8017b1c:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 8017b20:	205d732a 	subscs	r7, sp, sl, lsr #6
 8017b24:	43207325 			; <UNDEFINED> instruction: 0x43207325
 8017b28:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 8017b2c:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8017b30:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8017b34:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 8017b38:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 8017b3c:	00732a2e 	rsbseq	r2, r3, lr, lsr #20

08017b40 <days_of_month>:
 8017b40:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017b44:	0000001c 	andeq	r0, r0, ip, lsl r0
 8017b48:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017b4c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017b50:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017b54:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017b58:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017b5c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017b60:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017b64:	0000001f 	andeq	r0, r0, pc, lsl r0
 8017b68:	0000001e 	andeq	r0, r0, lr, lsl r0
 8017b6c:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

08017b70 <__exidx_start>:
 8017b70:	7fffda5c 	svcvc	0x00ffda5c
 8017b74:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08017b78 <.ARM.attributes>:
 8017b78:	00002e41 	andeq	r2, r0, r1, asr #28
 8017b7c:	61656100 	cmnvs	r5, r0, lsl #2
 8017b80:	01006962 	tsteq	r0, r2, ror #18
 8017b84:	00000024 	andeq	r0, r0, r4, lsr #32
 8017b88:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 8017b8c:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 8017b90:	0600334d 	streq	r3, [r0], -sp, asr #6
 8017b94:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8017b98:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 8017b9c:	17011501 	strne	r1, [r1, -r1, lsl #10]
 8017ba0:	1a011803 	bne	805dbb4 <__exidx_end+0x4603c>
 8017ba4:	Address 0x0000000008017ba4 is out of bounds.


Disassembly of section .data:

20000000 <s_nDmxTransmitPeriod>:
20000000:	000061a8 	andeq	r6, r0, r8, lsr #3

20000004 <s_nDmxTransmitMabTime>:
20000004:	0000000c 	andeq	r0, r0, ip

20000008 <s_nDmxTransmitBreakTime>:
20000008:	0000005c 	andeq	r0, r0, ip, asr r0

2000000c <DmxConfigUdp::s_nHandle>:
2000000c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000010 <s_multicast_mac>:
20000010:	005e0001 	subseq	r0, lr, r1
20000014:	00000000 	andeq	r0, r0, r0

20000018 <MDNS::s_nHandle>:
20000018:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000001c <next_block>:
2000001c:	20015800 	andcs	r5, r1, r0, lsl #16

20000020 <s_block_bucket>:
20000020:	00000010 	andeq	r0, r0, r0, lsl r0
20000024:	00000000 	andeq	r0, r0, r0
20000028:	00000020 	andeq	r0, r0, r0, lsr #32
2000002c:	00000000 	andeq	r0, r0, r0
20000030:	00000040 	andeq	r0, r0, r0, asr #32
20000034:	00000000 	andeq	r0, r0, r0
20000038:	00000060 	andeq	r0, r0, r0, rrx
2000003c:	00000000 	andeq	r0, r0, r0
20000040:	00000080 	andeq	r0, r0, r0, lsl #1
20000044:	00000000 	andeq	r0, r0, r0
20000048:	00000100 	andeq	r0, r0, r0, lsl #2
2000004c:	00000000 	andeq	r0, r0, r0
20000050:	00000140 	andeq	r0, r0, r0, asr #2
20000054:	00000000 	andeq	r0, r0, r0
20000058:	00000180 	andeq	r0, r0, r0, lsl #3
2000005c:	00000000 	andeq	r0, r0, r0
20000060:	00000200 	andeq	r0, r0, r0, lsl #4
20000064:	00000000 	andeq	r0, r0, r0
20000068:	00000300 	andeq	r0, r0, r0, lsl #6
2000006c:	00000000 	andeq	r0, r0, r0
20000070:	00000400 	andeq	r0, r0, r0, lsl #8
20000074:	00000000 	andeq	r0, r0, r0
20000078:	00000500 	andeq	r0, r0, r0, lsl #10
	...

20000088 <SystemCoreClock>:
20000088:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

20000090 <DmxInput::s_nStarted>:
20000090:	00000000 	andeq	r0, r0, r0

20000094 <RemoteConfig::s_pUdpBuffer>:
20000094:	00000000 	andeq	r0, r0, r0

20000098 <RemoteConfig::s_RemoteConfigListBin>:
	...

200000bc <RemoteConfig::s_pThis>:
200000bc:	00000000 	andeq	r0, r0, r0

200000c0 <HttpDaemon::m_Content>:
	...

20000660 <guard variable for lightset::Data::Get()::instance>:
20000660:	00000000 	andeq	r0, r0, r0

20000664 <lightset::Data::Get()::instance>:
	...

20000c68 <ArtNetNode::s_pThis>:
20000c68:	00000000 	andeq	r0, r0, r0

20000c6c <s_ReceivingMask>:
20000c6c:	00000000 	andeq	r0, r0, r0

20000c70 <ip>:
20000c70:	00000000 	andeq	r0, r0, r0

20000c74 <ip>:
20000c74:	00000000 	andeq	r0, r0, r0

20000c78 <s_nPortsMax>:
20000c78:	00000000 	andeq	r0, r0, r0

20000c7c <E131Bridge::s_pThis>:
20000c7c:	00000000 	andeq	r0, r0, r0

20000c80 <s_ReceivingMask>:
20000c80:	00000000 	andeq	r0, r0, r0

20000c84 <s_nPortsMax>:
20000c84:	00000000 	andeq	r0, r0, r0

20000c88 <ArtNetRdmController::s_rdmMessage>:
	...

20000d8c <ArtNetRdmController::m_pRDMTod>:
20000d8c:	00000000 	andeq	r0, r0, r0

20000d90 <uuid_cast>:
	...

20000d98 <DmxSend::s_nStarted>:
20000d98:	00000000 	andeq	r0, r0, r0

20000d9c <s_RxBuffer>:
	...

20000fac <s_TxBuffer>:
	...

200011b0 <sv_PortState>:
200011b0:	00000000 	andeq	r0, r0, r0

200011b4 <sv_nRxDmxPackets>:
	...

200011c4 <sv_nUartsSending>:
200011c4:	00000000 	andeq	r0, r0, r0

200011c8 <Dmx::s_pThis>:
200011c8:	00000000 	andeq	r0, r0, r0

200011cc <gv_RdmDataReceiveEnd>:
200011cc:	00000000 	andeq	r0, r0, r0

200011d0 <s_nLastSendMicros>:
200011d0:	00000000 	andeq	r0, r0, r0

200011d4 <s_TransactionNumber>:
200011d4:	00000000 	andeq	r0, r0, r0

200011d8 <DmxConfigUdp::s_pUdpBuffer>:
200011d8:	00000000 	andeq	r0, r0, r0

200011dc <g_ip_info>:
	...

200011e8 <g_mac_address>:
200011e8:	00000000 	andeq	r0, r0, r0
	...

200011ee <s_is_dhcp>:
	...

200011f0 <s_p>:
200011f0:	00000000 	andeq	r0, r0, r0

200011f4 <s_ticker>:
200011f4:	00000000 	andeq	r0, r0, r0

200011f8 <s_mac_address>:
	...

20001200 <s_mac_address_arp_reply>:
	...

20001208 <s_id>:
20001208:	00000000 	andeq	r0, r0, r0

2000120c <s_recv_queue>:
	...

20001d7c <s_tcb>:
	...

20001dc0 <s_tcp>:
	...

200023ac <broadcast_mask>:
200023ac:	00000000 	andeq	r0, r0, r0

200023b0 <gw_ip>:
200023b0:	00000000 	andeq	r0, r0, r0

200023b4 <on_network_mask>:
200023b4:	00000000 	andeq	r0, r0, r0

200023b8 <s_id>:
200023b8:	00000000 	andeq	r0, r0, r0

200023bc <s_ports_allowed>:
	...

200023dc <s_recv_queue>:
	...

2000807c <s_send_packet>:
	...

20008668 <MDNS::s_nRemoteIp>:
20008668:	00000000 	andeq	r0, r0, r0

2000866c <MDNS::s_nRemotePort>:
2000866c:	00000000 	andeq	r0, r0, r0

20008670 <MDNS::s_nMulticastIp>:
20008670:	00000000 	andeq	r0, r0, r0

20008674 <MDNS::s_AnswerLocalIp>:
	...

20008878 <MDNS::s_ServiceRecords>:
	...

20008898 <MDNS::s_nBytesReceived>:
20008898:	00000000 	andeq	r0, r0, r0

2000889c <MDNS::s_ServiceRecordsData>:
	...

20008aa0 <MDNS::s_pName>:
20008aa0:	00000000 	andeq	r0, r0, r0

20008aa4 <MDNS::s_pBuffer>:
20008aa4:	00000000 	andeq	r0, r0, r0

20008aa8 <Network::s_pThis>:
20008aa8:	00000000 	andeq	r0, r0, r0

20008aac <s_arp_announce>:
	...

20008ad8 <s_arp_reply>:
	...

20008b04 <s_arp_request>:
	...

20008b30 <s_arp_records>:
	...

20008cb0 <s_entry_current>:
20008cb0:	00000000 	andeq	r0, r0, r0

20008cb4 <s_dhcp_allocated_gw>:
20008cb4:	00000000 	andeq	r0, r0, r0

20008cb8 <s_dhcp_allocated_ip>:
20008cb8:	00000000 	andeq	r0, r0, r0

20008cbc <s_dhcp_allocated_netmask>:
20008cbc:	00000000 	andeq	r0, r0, r0

20008cc0 <s_dhcp_message>:
	...

20008ee4 <s_dhcp_server_ip>:
20008ee4:	00000000 	andeq	r0, r0, r0

20008ee8 <s_groups>:
	...

20009008 <s_id>:
20009008:	00000000 	andeq	r0, r0, r0

2000900c <s_joins_allowed_index>:
2000900c:	00000000 	andeq	r0, r0, r0

20009010 <s_leave>:
	...

20009040 <s_multicast_mac>:
	...

20009048 <s_report>:
	...

20009078 <DisplayUdf::s_pThis>:
20009078:	00000000 	andeq	r0, r0, r0

2000907c <ConfigStore::s_nWaitMillis>:
2000907c:	00000000 	andeq	r0, r0, r0

20009080 <ConfigStore::s_SpiFlashData>:
	...

2000a080 <ConfigStore::s_nStartAddress>:
2000a080:	00000000 	andeq	r0, r0, r0

2000a084 <ConfigStore::s_bHaveFlashChip>:
2000a084:	00000000 	andeq	r0, r0, r0

2000a088 <ConfigStore::s_nSpiFlashStoreSize>:
2000a088:	00000000 	andeq	r0, r0, r0

2000a08c <ConfigStore::s_State>:
2000a08c:	00000000 	andeq	r0, r0, r0

2000a090 <ConfigStore::s_pThis>:
2000a090:	00000000 	andeq	r0, r0, r0

2000a094 <ConfigStore::s_bIsNew>:
2000a094:	00000000 	andeq	r0, r0, r0

2000a098 <StoreDisplayUdf::s_pThis>:
2000a098:	00000000 	andeq	r0, r0, r0

2000a09c <StoreDmxSend::s_pThis>:
2000a09c:	00000000 	andeq	r0, r0, r0

2000a0a0 <StoreNetwork::s_pThis>:
2000a0a0:	00000000 	andeq	r0, r0, r0

2000a0a4 <StoreRemoteConfig::s_pThis>:
2000a0a4:	00000000 	andeq	r0, r0, r0

2000a0a8 <StoreArtNet::s_nPortIndexOffset>:
2000a0a8:	00000000 	andeq	r0, r0, r0

2000a0ac <StoreArtNet::s_pThis>:
2000a0ac:	00000000 	andeq	r0, r0, r0

2000a0b0 <StoreRDMDevice::s_pThis>:
2000a0b0:	00000000 	andeq	r0, r0, r0

2000a0b4 <StoreE131::s_pThis>:
2000a0b4:	00000000 	andeq	r0, r0, r0

2000a0b8 <FlashCode::s_pThis>:
2000a0b8:	00000000 	andeq	r0, r0, r0

2000a0bc <flashcode::s_nAddress>:
2000a0bc:	00000000 	andeq	r0, r0, r0

2000a0c0 <flashcode::s_State>:
2000a0c0:	00000000 	andeq	r0, r0, r0

2000a0c4 <flashcode::s_nPage>:
2000a0c4:	00000000 	andeq	r0, r0, r0

2000a0c8 <flashcode::s_pData>:
2000a0c8:	00000000 	andeq	r0, r0, r0

2000a0cc <flashcode::s_isBank0>:
2000a0cc:	00000000 	andeq	r0, r0, r0

2000a0d0 <flashcode::s_nLength>:
2000a0d0:	00000000 	andeq	r0, r0, r0

2000a0d4 <PropertiesConfig::s_Config>:
2000a0d4:	00000000 	andeq	r0, r0, r0

2000a0d8 <Display::s_pThis>:
2000a0d8:	00000000 	andeq	r0, r0, r0

2000a0dc <_ClearBuffer>:
	...

2000a164 <Ssd1306::s_pThis>:
2000a164:	00000000 	andeq	r0, r0, r0

2000a168 <FirmwareVersion::s_FirmwareVersion>:
	...

2000a17e <FirmwareVersion::s_Print>:
	...

2000a1c0 <FirmwareVersion::s_pThis>:
2000a1c0:	00000000 	andeq	r0, r0, r0

2000a1c4 <LedBlink::s_pThis>:
2000a1c4:	00000000 	andeq	r0, r0, r0

2000a1c8 <Hardware::s_pThis>:
2000a1c8:	00000000 	andeq	r0, r0, r0

2000a1cc <outptr>:
2000a1cc:	00000000 	andeq	r0, r0, r0

2000a1d0 <last.0>:
	...

2000a1d8 <s_micros>:
	...

2000a1e0 <set_timer>:
2000a1e0:	00000000 	andeq	r0, r0, r0

2000a1e4 <s_nSysTickMillis>:
2000a1e4:	00000000 	andeq	r0, r0, r0

2000a1e8 <dma_current_ptp_rxdesc>:
2000a1e8:	00000000 	andeq	r0, r0, r0

2000a1ec <dma_current_ptp_txdesc>:
2000a1ec:	00000000 	andeq	r0, r0, r0

2000a1f0 <dma_current_rxdesc>:
2000a1f0:	00000000 	andeq	r0, r0, r0

2000a1f4 <dma_current_txdesc>:
2000a1f4:	00000000 	andeq	r0, r0, r0

2000a1f8 <enet_initpara>:
	...

2000a234 <rx_buff>:
	...

20010174 <rxdesc_tab>:
	...

20010274 <tx_buff>:
	...

20013214 <txdesc_tab>:
	...

20013294 <s_nAddress>:
20013294:	00000000 	andeq	r0, r0, r0

Disassembly of section .heap:

20015800 <heap_low>:
	...

Disassembly of section .stack:

20016000 <_sp-0x2000>:
	...
