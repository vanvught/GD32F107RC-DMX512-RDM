
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	08007b19 	stmdaeq	r0, {r0, r3, r4, r8, r9, fp, ip, sp, lr}
 8007008:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800700c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007010:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007014:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007018:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
	...
 800702c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007030:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800703c:	0801340d 	stmdaeq	r1, {r0, r2, r3, sl, ip, sp}
 8007040:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007044:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007048:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800704c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007050:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007054:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007058:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800705c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007060:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007064:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007068:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800706c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007070:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007074:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007078:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800707c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007080:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007084:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007088:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800708c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007090:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007094:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007098:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800709c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070a0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070a4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070a8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070ac:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070b0:	0800df85 	stmdaeq	r0, {r0, r2, r7, r8, r9, sl, fp, ip, lr, pc}
 80070b4:	0800e03d 	stmdaeq	r0, {r0, r2, r3, r4, r5, sp, lr, pc}
 80070b8:	0800e08d 	stmdaeq	r0, {r0, r2, r3, r7, sp, lr, pc}
 80070bc:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070c0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070c4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070c8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070cc:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070d0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070d4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070d8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070dc:	0800dd2d 	stmdaeq	r0, {r0, r2, r3, r5, r8, sl, fp, ip, lr, pc}
 80070e0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070e4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070e8:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070ec:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070f0:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 80070f4:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
	...
 8007100:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800710c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007110:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007114:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007118:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800711c:	0800e0ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, sp, lr, pc}
 8007120:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007124:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007128:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800712c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007130:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007134:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007138:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800713c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007140:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007144:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8007148:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 800714c:	08007b65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, fp, ip, sp, lr}

Disassembly of section .text:

08007150 <net_init>:
 8007150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4616      	mov	r6, r2
 8007158:	9f06      	ldr	r7, [sp, #24]
 800715a:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <net_init+0x94>)
 800715c:	461d      	mov	r5, r3
 800715e:	1e43      	subs	r3, r0, #1
 8007160:	3005      	adds	r0, #5
 8007162:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007166:	4283      	cmp	r3, r0
 8007168:	f802 1b01 	strb.w	r1, [r2], #1
 800716c:	d1f9      	bne.n	8007162 <net_init+0x12>
 800716e:	4623      	mov	r3, r4
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <net_init+0x98>)
 8007172:	f104 010c 	add.w	r1, r4, #12
 8007176:	f813 0b01 	ldrb.w	r0, [r3], #1
 800717a:	428b      	cmp	r3, r1
 800717c:	f802 0b01 	strb.w	r0, [r2], #1
 8007180:	d1f9      	bne.n	8007176 <net_init+0x26>
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	4918      	ldr	r1, [pc, #96]	; (80071e8 <net_init+0x98>)
 8007188:	4816      	ldr	r0, [pc, #88]	; (80071e4 <net_init+0x94>)
 800718a:	f000 f9a7 	bl	80074dc <ip_init>
 800718e:	4815      	ldr	r0, [pc, #84]	; (80071e4 <net_init+0x94>)
 8007190:	f000 f83c 	bl	800720c <rfc3927_init>
 8007194:	f887 8000 	strb.w	r8, [r7]
 8007198:	782b      	ldrb	r3, [r5, #0]
 800719a:	b163      	cbz	r3, 80071b6 <net_init+0x66>
 800719c:	4632      	mov	r2, r6
 800719e:	4912      	ldr	r1, [pc, #72]	; (80071e8 <net_init+0x98>)
 80071a0:	4810      	ldr	r0, [pc, #64]	; (80071e4 <net_init+0x94>)
 80071a2:	f009 ff61 	bl	8011068 <dhcp_client>
 80071a6:	4540      	cmp	r0, r8
 80071a8:	da05      	bge.n	80071b6 <net_init+0x66>
 80071aa:	480f      	ldr	r0, [pc, #60]	; (80071e8 <net_init+0x98>)
 80071ac:	f885 8000 	strb.w	r8, [r5]
 80071b0:	f008 f9d4 	bl	800f55c <rfc3927>
 80071b4:	7038      	strb	r0, [r7, #0]
 80071b6:	490c      	ldr	r1, [pc, #48]	; (80071e8 <net_init+0x98>)
 80071b8:	480a      	ldr	r0, [pc, #40]	; (80071e4 <net_init+0x94>)
 80071ba:	f000 f883 	bl	80072c4 <arp_init>
 80071be:	480a      	ldr	r0, [pc, #40]	; (80071e8 <net_init+0x98>)
 80071c0:	f00a f972 	bl	80114a8 <ip_set_ip>
 80071c4:	f000 f82e 	bl	8007224 <tcp_init>
 80071c8:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <net_init+0x98>)
 80071ca:	1e63      	subs	r3, r4, #1
 80071cc:	340b      	adds	r4, #11
 80071ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80071d2:	f803 1f01 	strb.w	r1, [r3, #1]!
 80071d6:	429c      	cmp	r4, r3
 80071d8:	d1f9      	bne.n	80071ce <net_init+0x7e>
 80071da:	782a      	ldrb	r2, [r5, #0]
 80071dc:	4b03      	ldr	r3, [pc, #12]	; (80071ec <net_init+0x9c>)
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	200022a8 	andcs	r2, r0, r8, lsr #5
 80071e8:	2000229c 	mulcs	r0, ip, r2
 80071ec:	200022ae 	andcs	r2, r0, lr, lsr #5

080071f0 <net_shutdown>:
 80071f0:	b508      	push	{r3, lr}
 80071f2:	f000 f97e 	bl	80074f2 <ip_shutdown>
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <net_shutdown+0x18>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	b11b      	cbz	r3, 8007204 <net_shutdown+0x14>
 80071fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007200:	f00a b83a 	b.w	8011278 <dhcp_client_release>
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	200022ae 	andcs	r2, r0, lr, lsr #5

0800720c <rfc3927_init>:
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <rfc3927_init+0x14>)
 800720e:	1d82      	adds	r2, r0, #6
 8007210:	4290      	cmp	r0, r2
 8007212:	d100      	bne.n	8007216 <rfc3927_init+0xa>
 8007214:	4770      	bx	lr
 8007216:	f810 1b01 	ldrb.w	r1, [r0], #1
 800721a:	f803 1b01 	strb.w	r1, [r3], #1
 800721e:	e7f7      	b.n	8007210 <rfc3927_init+0x4>
 8007220:	200022b8 			; <UNDEFINED> instruction: 0x200022b8

08007224 <tcp_init>:
 8007224:	2206      	movs	r2, #6
 8007226:	b513      	push	{r0, r1, r4, lr}
 8007228:	4c0b      	ldr	r4, [pc, #44]	; (8007258 <tcp_init+0x34>)
 800722a:	490c      	ldr	r1, [pc, #48]	; (800725c <tcp_init+0x38>)
 800722c:	18a0      	adds	r0, r4, r2
 800722e:	f008 f9ef 	bl	800f610 <memcpy.isra.0>
 8007232:	2308      	movs	r3, #8
 8007234:	2204      	movs	r2, #4
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	4b09      	ldr	r3, [pc, #36]	; (8007260 <tcp_init+0x3c>)
 800723a:	eb0d 0102 	add.w	r1, sp, r2
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f104 001a 	add.w	r0, r4, #26
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	f008 f9e3 	bl	800f610 <memcpy.isra.0>
 800724a:	2345      	movs	r3, #69	; 0x45
 800724c:	81e3      	strh	r3, [r4, #14]
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <tcp_init+0x40>)
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	b002      	add	sp, #8
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	20002e80 	andcs	r2, r0, r0, lsl #29
 800725c:	200022a8 	andcs	r2, r0, r8, lsr #5
 8007260:	2000229c 	mulcs	r0, ip, r2
 8007264:	06400040 	strbeq	r0, [r0], -r0, asr #32

08007268 <udp_init>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	2200      	movs	r2, #0
 800726c:	2408      	movs	r4, #8
 800726e:	460e      	mov	r6, r1
 8007270:	4b0d      	ldr	r3, [pc, #52]	; (80072a8 <udp_init+0x40>)
 8007272:	490e      	ldr	r1, [pc, #56]	; (80072ac <udp_init+0x44>)
 8007274:	3c01      	subs	r4, #1
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	805a      	strh	r2, [r3, #2]
 800727a:	f841 2b04 	str.w	r2, [r1], #4
 800727e:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 8007282:	d1f7      	bne.n	8007274 <udp_init+0xc>
 8007284:	2206      	movs	r2, #6
 8007286:	4d0a      	ldr	r5, [pc, #40]	; (80072b0 <udp_init+0x48>)
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <udp_init+0x4c>)
 800728a:	4601      	mov	r1, r0
 800728c:	18a8      	adds	r0, r5, r2
 800728e:	801c      	strh	r4, [r3, #0]
 8007290:	f008 fb42 	bl	800f918 <memcpy.isra.0>
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <udp_init+0x50>)
 8007296:	4630      	mov	r0, r6
 8007298:	60eb      	str	r3, [r5, #12]
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <udp_init+0x54>)
 800729c:	616b      	str	r3, [r5, #20]
 800729e:	f008 fb63 	bl	800f968 <udp_set_ip>
 80072a2:	852c      	strh	r4, [r5, #40]	; 0x28
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	bf00      	nop
 80072a8:	2000349c 	mulcs	r0, ip, r4
 80072ac:	2000347c 	andcs	r3, r0, ip, ror r4
 80072b0:	2000913c 	andcs	r9, r0, ip, lsr r1
 80072b4:	20003478 	andcs	r3, r0, r8, ror r4
 80072b8:	00450008 	subeq	r0, r5, r8
 80072bc:	11400040 	cmpne	r0, r0, asr #32

080072c0 <udp_shutdown>:
 80072c0:	4770      	bx	lr
	...

080072c4 <arp_init>:
 80072c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c8:	4604      	mov	r4, r0
 80072ca:	460d      	mov	r5, r1
 80072cc:	f000 f876 	bl	80073bc <arp_cache_init>
 80072d0:	2206      	movs	r2, #6
 80072d2:	4621      	mov	r1, r4
 80072d4:	482e      	ldr	r0, [pc, #184]	; (8007390 <arp_init+0xcc>)
 80072d6:	682f      	ldr	r7, [r5, #0]
 80072d8:	f009 fd48 	bl	8010d6c <memcpy.isra.0>
 80072dc:	4b2d      	ldr	r3, [pc, #180]	; (8007394 <arp_init+0xd0>)
 80072de:	2507      	movs	r5, #7
 80072e0:	461e      	mov	r6, r3
 80072e2:	22ff      	movs	r2, #255	; 0xff
 80072e4:	3d01      	subs	r5, #1
 80072e6:	d146      	bne.n	8007376 <arp_init+0xb2>
 80072e8:	4b2b      	ldr	r3, [pc, #172]	; (8007398 <arp_init+0xd4>)
 80072ea:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800739c <arp_init+0xd8>
 80072ee:	2206      	movs	r2, #6
 80072f0:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80072f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072f8:	4621      	mov	r1, r4
 80072fa:	4829      	ldr	r0, [pc, #164]	; (80073a0 <arp_init+0xdc>)
 80072fc:	82b3      	strh	r3, [r6, #20]
 80072fe:	f009 fd35 	bl	8010d6c <memcpy.isra.0>
 8007302:	2307      	movs	r3, #7
 8007304:	4a27      	ldr	r2, [pc, #156]	; (80073a4 <arp_init+0xe0>)
 8007306:	61f7      	str	r7, [r6, #28]
 8007308:	3b01      	subs	r3, #1
 800730a:	d137      	bne.n	800737c <arp_init+0xb8>
 800730c:	2206      	movs	r2, #6
 800730e:	4621      	mov	r1, r4
 8007310:	4825      	ldr	r0, [pc, #148]	; (80073a8 <arp_init+0xe4>)
 8007312:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 8007316:	f009 fd29 	bl	8010d6c <memcpy.isra.0>
 800731a:	4a24      	ldr	r2, [pc, #144]	; (80073ac <arp_init+0xe8>)
 800731c:	2306      	movs	r3, #6
 800731e:	4615      	mov	r5, r2
 8007320:	21ff      	movs	r1, #255	; 0xff
 8007322:	3b01      	subs	r3, #1
 8007324:	d22d      	bcs.n	8007382 <arp_init+0xbe>
 8007326:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <arp_init+0xd4>)
 8007328:	2206      	movs	r2, #6
 800732a:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800732e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007332:	4621      	mov	r1, r4
 8007334:	481e      	ldr	r0, [pc, #120]	; (80073b0 <arp_init+0xec>)
 8007336:	82ab      	strh	r3, [r5, #20]
 8007338:	f009 fd18 	bl	8010d6c <memcpy.isra.0>
 800733c:	2307      	movs	r3, #7
 800733e:	2100      	movs	r1, #0
 8007340:	4a1c      	ldr	r2, [pc, #112]	; (80073b4 <arp_init+0xf0>)
 8007342:	61ef      	str	r7, [r5, #28]
 8007344:	3b01      	subs	r3, #1
 8007346:	d11f      	bne.n	8007388 <arp_init+0xc4>
 8007348:	2206      	movs	r2, #6
 800734a:	4d1b      	ldr	r5, [pc, #108]	; (80073b8 <arp_init+0xf4>)
 800734c:	4621      	mov	r1, r4
 800734e:	18a8      	adds	r0, r5, r2
 8007350:	f009 fd0c 	bl	8010d6c <memcpy.isra.0>
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <arp_init+0xd4>)
 8007356:	4621      	mov	r1, r4
 8007358:	e9c5 3803 	strd	r3, r8, [r5, #12]
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	f105 0016 	add.w	r0, r5, #22
 8007364:	2206      	movs	r2, #6
 8007366:	82ab      	strh	r3, [r5, #20]
 8007368:	f009 fd00 	bl	8010d6c <memcpy.isra.0>
 800736c:	61ef      	str	r7, [r5, #28]
 800736e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007372:	f009 bd05 	b.w	8010d80 <arp_announce>
 8007376:	f803 2b01 	strb.w	r2, [r3], #1
 800737a:	e7b3      	b.n	80072e4 <arp_init+0x20>
 800737c:	f802 5b01 	strb.w	r5, [r2], #1
 8007380:	e7c2      	b.n	8007308 <arp_init+0x44>
 8007382:	f802 1b01 	strb.w	r1, [r2], #1
 8007386:	e7cc      	b.n	8007322 <arp_init+0x5e>
 8007388:	f802 1b01 	strb.w	r1, [r2], #1
 800738c:	e7da      	b.n	8007344 <arp_init+0x80>
 800738e:	bf00      	nop
 8007390:	20009b72 	andcs	r9, r0, r2, ror fp
 8007394:	20009b6c 	andcs	r9, r0, ip, ror #22
 8007398:	01000608 	tsteq	r0, r8, lsl #12
 800739c:	04060008 	streq	r0, [r6], #-8
 80073a0:	20009b82 	andcs	r9, r0, r2, lsl #23
 80073a4:	20009b8c 	andcs	r9, r0, ip, lsl #23
 80073a8:	20009bca 	andcs	r9, r0, sl, asr #23
 80073ac:	20009bc4 	andcs	r9, r0, r4, asr #23
 80073b0:	20009bda 	ldrdcs	r9, [r0], -sl
 80073b4:	20009be4 	andcs	r9, r0, r4, ror #23
 80073b8:	20009b98 	mulcs	r0, r8, fp

080073bc <arp_cache_init>:
 80073bc:	2300      	movs	r3, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	4a09      	ldr	r2, [pc, #36]	; (80073e8 <arp_cache_init+0x2c>)
 80073c2:	b510      	push	{r4, lr}
 80073c4:	8013      	strh	r3, [r2, #0]
 80073c6:	4a09      	ldr	r2, [pc, #36]	; (80073ec <arp_cache_init+0x30>)
 80073c8:	4611      	mov	r1, r2
 80073ca:	f842 0c04 	str.w	r0, [r2, #-4]
 80073ce:	1d94      	adds	r4, r2, #6
 80073d0:	42a1      	cmp	r1, r4
 80073d2:	d105      	bne.n	80073e0 <arp_cache_init+0x24>
 80073d4:	3303      	adds	r3, #3
 80073d6:	2b60      	cmp	r3, #96	; 0x60
 80073d8:	f102 020c 	add.w	r2, r2, #12
 80073dc:	d1f4      	bne.n	80073c8 <arp_cache_init+0xc>
 80073de:	bd10      	pop	{r4, pc}
 80073e0:	f801 0b01 	strb.w	r0, [r1], #1
 80073e4:	e7f4      	b.n	80073d0 <arp_cache_init+0x14>
 80073e6:	bf00      	nop
 80073e8:	20009d70 	andcs	r9, r0, r0, ror sp
 80073ec:	20009bf4 	strdcs	r9, [r0], -r4

080073f0 <igmp_init>:
 80073f0:	2200      	movs	r2, #0
 80073f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	4b23      	ldr	r3, [pc, #140]	; (800748c <igmp_init+0x9c>)
 80073fe:	f103 0408 	add.w	r4, r3, #8
 8007402:	42a3      	cmp	r3, r4
 8007404:	d13e      	bne.n	8007484 <igmp_init+0x94>
 8007406:	3201      	adds	r2, #1
 8007408:	2a24      	cmp	r2, #36	; 0x24
 800740a:	d1f8      	bne.n	80073fe <igmp_init+0xe>
 800740c:	2600      	movs	r6, #0
 800740e:	4b20      	ldr	r3, [pc, #128]	; (8007490 <igmp_init+0xa0>)
 8007410:	4c20      	ldr	r4, [pc, #128]	; (8007494 <igmp_init+0xa4>)
 8007412:	601e      	str	r6, [r3, #0]
 8007414:	4b20      	ldr	r3, [pc, #128]	; (8007498 <igmp_init+0xa8>)
 8007416:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800741a:	801e      	strh	r6, [r3, #0]
 800741c:	f009 ffa4 	bl	8011368 <igmp_set_ip>
 8007420:	2201      	movs	r2, #1
 8007422:	4b1e      	ldr	r3, [pc, #120]	; (800749c <igmp_init+0xac>)
 8007424:	4629      	mov	r1, r5
 8007426:	801a      	strh	r2, [r3, #0]
 8007428:	225e      	movs	r2, #94	; 0x5e
 800742a:	709a      	strb	r2, [r3, #2]
 800742c:	2206      	movs	r2, #6
 800742e:	18a0      	adds	r0, r4, r2
 8007430:	f009 ff50 	bl	80112d4 <memcpy.isra.0>
 8007434:	f240 4394 	movw	r3, #1172	; 0x494
 8007438:	8463      	strh	r3, [r4, #34]	; 0x22
 800743a:	2316      	movs	r3, #22
 800743c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80074a0 <igmp_init+0xb0>
 8007440:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80074a4 <igmp_init+0xb4>
 8007444:	84e3      	strh	r3, [r4, #38]	; 0x26
 8007446:	f8c4 9014 	str.w	r9, [r4, #20]
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <igmp_init+0xb8>)
 800744c:	f8c4 800c 	str.w	r8, [r4, #12]
 8007450:	8227      	strh	r7, [r4, #16]
 8007452:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007454:	4c15      	ldr	r4, [pc, #84]	; (80074ac <igmp_init+0xbc>)
 8007456:	2206      	movs	r2, #6
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800745e:	18a0      	adds	r0, r4, r2
 8007460:	80a3      	strh	r3, [r4, #4]
 8007462:	4629      	mov	r1, r5
 8007464:	f009 ff36 	bl	80112d4 <memcpy.isra.0>
 8007468:	23e0      	movs	r3, #224	; 0xe0
 800746a:	83e3      	strh	r3, [r4, #30]
 800746c:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <igmp_init+0xc0>)
 8007472:	f8c4 9014 	str.w	r9, [r4, #20]
 8007476:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800747a:	f8c4 800c 	str.w	r8, [r4, #12]
 800747e:	8227      	strh	r7, [r4, #16]
 8007480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007484:	f803 1b01 	strb.w	r1, [r3], #1
 8007488:	e7bb      	b.n	8007402 <igmp_init+0x12>
 800748a:	bf00      	nop
 800748c:	20009fa8 	andcs	r9, r0, r8, lsr #31
 8007490:	2000a0cc 	andcs	sl, r0, ip, asr #1
 8007494:	2000a108 	andcs	sl, r0, r8, lsl #2
 8007498:	2000a0c8 	andcs	sl, r0, r8, asr #1
 800749c:	2000a100 	andcs	sl, r0, r0, lsl #2
 80074a0:	02010040 	andeq	r0, r1, #64	; 0x40
 80074a4:	00460008 	subeq	r0, r6, r8
 80074a8:	005e0001 	subseq	r0, lr, r1
 80074ac:	2000a0d0 	ldrdcs	sl, [r0], -r0
 80074b0:	04940200 	ldreq	r0, [r4], #512	; 0x200

080074b4 <igmp_shutdown>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	2500      	movs	r5, #0
 80074b8:	462e      	mov	r6, r5
 80074ba:	4c07      	ldr	r4, [pc, #28]	; (80074d8 <igmp_shutdown+0x24>)
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	b120      	cbz	r0, 80074ca <igmp_shutdown+0x16>
 80074c0:	f009 ffae 	bl	8011420 <igmp_leave>
 80074c4:	6026      	str	r6, [r4, #0]
 80074c6:	7166      	strb	r6, [r4, #5]
 80074c8:	7126      	strb	r6, [r4, #4]
 80074ca:	3501      	adds	r5, #1
 80074cc:	2d24      	cmp	r5, #36	; 0x24
 80074ce:	f104 0408 	add.w	r4, r4, #8
 80074d2:	d1f3      	bne.n	80074bc <igmp_shutdown+0x8>
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	bf00      	nop
 80074d8:	20009fa8 	andcs	r9, r0, r8, lsr #31

080074dc <ip_init>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	460d      	mov	r5, r1
 80074e2:	f7ff fec1 	bl	8007268 <udp_init>
 80074e6:	4629      	mov	r1, r5
 80074e8:	4620      	mov	r0, r4
 80074ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074ee:	f7ff bf7f 	b.w	80073f0 <igmp_init>

080074f2 <ip_shutdown>:
 80074f2:	b508      	push	{r3, lr}
 80074f4:	f7ff ffde 	bl	80074b4 <igmp_shutdown>
 80074f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80074fc:	f7ff bee0 	b.w	80072c0 <udp_shutdown>

08007500 <console_init>:
 8007500:	b508      	push	{r3, lr}
 8007502:	f00b ff25 	bl	8013350 <uart0_init>
 8007506:	4804      	ldr	r0, [pc, #16]	; (8007518 <console_init+0x18>)
 8007508:	f00b ff52 	bl	80133b0 <uart0_puts>
 800750c:	4803      	ldr	r0, [pc, #12]	; (800751c <console_init+0x1c>)
 800750e:	f00b ff4f 	bl	80133b0 <uart0_puts>
 8007512:	2000      	movs	r0, #0
 8007514:	bd08      	pop	{r3, pc}
 8007516:	bf00      	nop
 8007518:	080153f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, ip, lr}
 800751c:	080175e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, sl, ip, sp, lr}

08007520 <net_handle>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4c0c      	ldr	r4, [pc, #48]	; (8007554 <net_handle+0x34>)
 8007524:	4620      	mov	r0, r4
 8007526:	f00c fccf 	bl	8013ec8 <emac_eth_recv>
 800752a:	2800      	cmp	r0, #0
 800752c:	dd07      	ble.n	800753e <net_handle+0x1e>
 800752e:	6820      	ldr	r0, [r4, #0]
 8007530:	8983      	ldrh	r3, [r0, #12]
 8007532:	2b08      	cmp	r3, #8
 8007534:	d107      	bne.n	8007546 <net_handle+0x26>
 8007536:	f000 fa6f 	bl	8007a18 <ip_handle>
 800753a:	f00c fcd9 	bl	8013ef0 <emac_free_pkt>
 800753e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007542:	f007 bffb 	b.w	800f53c <net_timers_run>
 8007546:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800754a:	d1f6      	bne.n	800753a <net_handle+0x1a>
 800754c:	f000 fa08 	bl	8007960 <arp_handle>
 8007550:	e7f3      	b.n	800753a <net_handle+0x1a>
 8007552:	bf00      	nop
 8007554:	200022b0 			; <UNDEFINED> instruction: 0x200022b0

08007558 <tcp_handle>:
 8007558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	4605      	mov	r5, r0
 800755e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8007560:	f8b0 8010 	ldrh.w	r8, [r0, #16]
 8007564:	ba5b      	rev16	r3, r3
 8007566:	8443      	strh	r3, [r0, #34]	; 0x22
 8007568:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800756a:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 800756e:	ba5b      	rev16	r3, r3
 8007570:	8483      	strh	r3, [r0, #36]	; 0x24
 8007572:	f008 f857 	bl	800f624 <_bswap32>
 8007576:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8007578:	4ca5      	ldr	r4, [pc, #660]	; (8007810 <tcp_handle+0x2b8>)
 800757a:	ba5b      	rev16	r3, r3
 800757c:	862b      	strh	r3, [r5, #48]	; 0x30
 800757e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8007580:	8822      	ldrh	r2, [r4, #0]
 8007582:	ba5b      	rev16	r3, r3
 8007584:	86ab      	strh	r3, [r5, #52]	; 0x34
 8007586:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8007588:	429a      	cmp	r2, r3
 800758a:	d14d      	bne.n	8007628 <tcp_handle+0xd0>
 800758c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007590:	2b01      	cmp	r3, #1
 8007592:	d00d      	beq.n	80075b0 <tcp_handle+0x58>
 8007594:	2204      	movs	r2, #4
 8007596:	4668      	mov	r0, sp
 8007598:	f105 011a 	add.w	r1, r5, #26
 800759c:	f008 f838 	bl	800f610 <memcpy.isra.0>
 80075a0:	8862      	ldrh	r2, [r4, #2]
 80075a2:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d13f      	bne.n	8007628 <tcp_handle+0xd0>
 80075a8:	6862      	ldr	r2, [r4, #4]
 80075aa:	9b00      	ldr	r3, [sp, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d13b      	bne.n	8007628 <tcp_handle+0xd0>
 80075b0:	2204      	movs	r2, #4
 80075b2:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 80075b6:	eb0d 0002 	add.w	r0, sp, r2
 80075ba:	f008 f829 	bl	800f610 <memcpy.isra.0>
 80075be:	2204      	movs	r2, #4
 80075c0:	f105 0126 	add.w	r1, r5, #38	; 0x26
 80075c4:	eb0d 0002 	add.w	r0, sp, r2
 80075c8:	9e01      	ldr	r6, [sp, #4]
 80075ca:	f008 f821 	bl	800f610 <memcpy.isra.0>
 80075ce:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80075d2:	9f01      	ldr	r7, [sp, #4]
 80075d4:	2a01      	cmp	r2, #1
 80075d6:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 80075da:	d01b      	beq.n	8007614 <tcp_handle+0xbc>
 80075dc:	1ed3      	subs	r3, r2, #3
 80075de:	2b07      	cmp	r3, #7
 80075e0:	d822      	bhi.n	8007628 <tcp_handle+0xd0>
 80075e2:	fa98 f198 	rev16.w	r1, r8
 80075e6:	f64f 78ec 	movw	r8, #65516	; 0xffec
 80075ea:	ea4f 1319 	mov.w	r3, r9, lsr #4
 80075ee:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 80075f2:	4488      	add	r8, r1
 80075f4:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80075f6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 80075fa:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80075fe:	fa1f f888 	uxth.w	r8, r8
 8007602:	2900      	cmp	r1, #0
 8007604:	d142      	bne.n	800768c <tcp_handle+0x134>
 8007606:	f1b8 0f00 	cmp.w	r8, #0
 800760a:	d16b      	bne.n	80076e4 <tcp_handle+0x18c>
 800760c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760e:	42bb      	cmp	r3, r7
 8007610:	d168      	bne.n	80076e4 <tcp_handle+0x18c>
 8007612:	e048      	b.n	80076a6 <tcp_handle+0x14e>
 8007614:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007618:	075a      	lsls	r2, r3, #29
 800761a:	d405      	bmi.n	8007628 <tcp_handle+0xd0>
 800761c:	06d8      	lsls	r0, r3, #27
 800761e:	d506      	bpl.n	800762e <tcp_handle+0xd6>
 8007620:	4628      	mov	r0, r5
 8007622:	497b      	ldr	r1, [pc, #492]	; (8007810 <tcp_handle+0x2b8>)
 8007624:	f008 f8ca 	bl	800f7bc <_send_reset>
 8007628:	b004      	add	sp, #16
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	0799      	lsls	r1, r3, #30
 8007630:	d5fa      	bpl.n	8007628 <tcp_handle+0xd0>
 8007632:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 8007636:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800763a:	4668      	mov	r0, sp
 800763c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007640:	f105 011a 	add.w	r1, r5, #26
 8007644:	2204      	movs	r2, #4
 8007646:	8063      	strh	r3, [r4, #2]
 8007648:	f007 ffe2 	bl	800f610 <memcpy.isra.0>
 800764c:	2206      	movs	r2, #6
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	18a9      	adds	r1, r5, r2
 8007652:	4870      	ldr	r0, [pc, #448]	; (8007814 <tcp_handle+0x2bc>)
 8007654:	6063      	str	r3, [r4, #4]
 8007656:	f007 ffdb 	bl	800f610 <memcpy.isra.0>
 800765a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800765c:	1c7b      	adds	r3, r7, #1
 800765e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007662:	6363      	str	r3, [r4, #52]	; 0x34
 8007664:	2312      	movs	r3, #18
 8007666:	486a      	ldr	r0, [pc, #424]	; (8007810 <tcp_handle+0x2b8>)
 8007668:	a901      	add	r1, sp, #4
 800766a:	f88d 300c 	strb.w	r3, [sp, #12]
 800766e:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007672:	63e7      	str	r7, [r4, #60]	; 0x3c
 8007674:	f8c4 a018 	str.w	sl, [r4, #24]
 8007678:	f007 fffa 	bl	800f670 <_tcp_send_package>
 800767c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800767e:	1c5a      	adds	r2, r3, #1
 8007680:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8007684:	2303      	movs	r3, #3
 8007686:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800768a:	e7cd      	b.n	8007628 <tcp_handle+0xd0>
 800768c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800768e:	eba3 0c07 	sub.w	ip, r3, r7
 8007692:	f1b8 0f00 	cmp.w	r8, #0
 8007696:	d10d      	bne.n	80076b4 <tcp_handle+0x15c>
 8007698:	f1bc 0f00 	cmp.w	ip, #0
 800769c:	dc22      	bgt.n	80076e4 <tcp_handle+0x18c>
 800769e:	1afb      	subs	r3, r7, r3
 80076a0:	1a5b      	subs	r3, r3, r1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	da1e      	bge.n	80076e4 <tcp_handle+0x18c>
 80076a6:	0743      	lsls	r3, r0, #29
 80076a8:	d530      	bpl.n	800770c <tcp_handle+0x1b4>
 80076aa:	8821      	ldrh	r1, [r4, #0]
 80076ac:	4858      	ldr	r0, [pc, #352]	; (8007810 <tcp_handle+0x2b8>)
 80076ae:	f007 ff95 	bl	800f5dc <_init_tcb>
 80076b2:	e7b9      	b.n	8007628 <tcp_handle+0xd0>
 80076b4:	f1bc 0f00 	cmp.w	ip, #0
 80076b8:	dc06      	bgt.n	80076c8 <tcp_handle+0x170>
 80076ba:	eba7 0c03 	sub.w	ip, r7, r3
 80076be:	ebac 0c01 	sub.w	ip, ip, r1
 80076c2:	f1bc 0f00 	cmp.w	ip, #0
 80076c6:	dbee      	blt.n	80076a6 <tcp_handle+0x14e>
 80076c8:	eb08 0c07 	add.w	ip, r8, r7
 80076cc:	f103 0e01 	add.w	lr, r3, #1
 80076d0:	ebae 0e0c 	sub.w	lr, lr, ip
 80076d4:	f1be 0f00 	cmp.w	lr, #0
 80076d8:	dc04      	bgt.n	80076e4 <tcp_handle+0x18c>
 80076da:	43db      	mvns	r3, r3
 80076dc:	1a5b      	subs	r3, r3, r1
 80076de:	eb13 0f0c 	cmn.w	r3, ip
 80076e2:	d4e0      	bmi.n	80076a6 <tcp_handle+0x14e>
 80076e4:	0742      	lsls	r2, r0, #29
 80076e6:	d505      	bpl.n	80076f4 <tcp_handle+0x19c>
 80076e8:	8821      	ldrh	r1, [r4, #0]
 80076ea:	4849      	ldr	r0, [pc, #292]	; (8007810 <tcp_handle+0x2b8>)
 80076ec:	f007 ff76 	bl	800f5dc <_init_tcb>
 80076f0:	2301      	movs	r3, #1
 80076f2:	e7c8      	b.n	8007686 <tcp_handle+0x12e>
 80076f4:	6963      	ldr	r3, [r4, #20]
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076fa:	9302      	str	r3, [sp, #8]
 80076fc:	2310      	movs	r3, #16
 80076fe:	4844      	ldr	r0, [pc, #272]	; (8007810 <tcp_handle+0x2b8>)
 8007700:	a901      	add	r1, sp, #4
 8007702:	f88d 300c 	strb.w	r3, [sp, #12]
 8007706:	f007 ffb3 	bl	800f670 <_tcp_send_package>
 800770a:	e78d      	b.n	8007628 <tcp_handle+0xd0>
 800770c:	0781      	lsls	r1, r0, #30
 800770e:	d505      	bpl.n	800771c <tcp_handle+0x1c4>
 8007710:	2a03      	cmp	r2, #3
 8007712:	d0ed      	beq.n	80076f0 <tcp_handle+0x198>
 8007714:	4628      	mov	r0, r5
 8007716:	493e      	ldr	r1, [pc, #248]	; (8007810 <tcp_handle+0x2b8>)
 8007718:	f008 f850 	bl	800f7bc <_send_reset>
 800771c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 8007720:	06da      	lsls	r2, r3, #27
 8007722:	d581      	bpl.n	8007628 <tcp_handle+0xd0>
 8007724:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007728:	3b03      	subs	r3, #3
 800772a:	2b07      	cmp	r3, #7
 800772c:	d818      	bhi.n	8007760 <tcp_handle+0x208>
 800772e:	e8df f003 	tbb	[pc, r3]
 8007732:	75757504 	ldrbvc	r7, [r5, #-1284]!	; 0xfffffafc
 8007736:	a59c7575 	ldrge	r7, [ip, #1397]	; 0x575
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	1b9b      	subs	r3, r3, r6
 800773e:	2b00      	cmp	r3, #0
 8007740:	dc0a      	bgt.n	8007758 <tcp_handle+0x200>
 8007742:	6963      	ldr	r3, [r4, #20]
 8007744:	1af3      	subs	r3, r6, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	dc06      	bgt.n	8007758 <tcp_handle+0x200>
 800774a:	2304      	movs	r3, #4
 800774c:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007750:	f8c4 a018 	str.w	sl, [r4, #24]
 8007754:	6126      	str	r6, [r4, #16]
 8007756:	e796      	b.n	8007686 <tcp_handle+0x12e>
 8007758:	4628      	mov	r0, r5
 800775a:	492d      	ldr	r1, [pc, #180]	; (8007810 <tcp_handle+0x2b8>)
 800775c:	f008 f82e 	bl	800f7bc <_send_reset>
 8007760:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007764:	3b04      	subs	r3, #4
 8007766:	2b02      	cmp	r3, #2
 8007768:	d830      	bhi.n	80077cc <tcp_handle+0x274>
 800776a:	f1b8 0f00 	cmp.w	r8, #0
 800776e:	d02d      	beq.n	80077cc <tcp_handle+0x274>
 8007770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007772:	42bb      	cmp	r3, r7
 8007774:	f040 8091 	bne.w	800789a <tcp_handle+0x342>
 8007778:	f240 53b6 	movw	r3, #1462	; 0x5b6
 800777c:	f8df a098 	ldr.w	sl, [pc, #152]	; 8007818 <tcp_handle+0x2c0>
 8007780:	f105 0122 	add.w	r1, r5, #34	; 0x22
 8007784:	f8ba 7000 	ldrh.w	r7, [sl]
 8007788:	4642      	mov	r2, r8
 800778a:	435f      	muls	r7, r3
 800778c:	1d38      	adds	r0, r7, #4
 800778e:	4449      	add	r1, r9
 8007790:	4450      	add	r0, sl
 8007792:	f007 ff3d 	bl	800f610 <memcpy.isra.0>
 8007796:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8007798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800779a:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800779e:	8722      	strh	r2, [r4, #56]	; 0x38
 80077a0:	6962      	ldr	r2, [r4, #20]
 80077a2:	4443      	add	r3, r8
 80077a4:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077a8:	6363      	str	r3, [r4, #52]	; 0x34
 80077aa:	2310      	movs	r3, #16
 80077ac:	4457      	add	r7, sl
 80077ae:	4818      	ldr	r0, [pc, #96]	; (8007810 <tcp_handle+0x2b8>)
 80077b0:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 80077b4:	a901      	add	r1, sp, #4
 80077b6:	f88d 300c 	strb.w	r3, [sp, #12]
 80077ba:	f007 ff59 	bl	800f670 <_tcp_send_package>
 80077be:	f8ba 3000 	ldrh.w	r3, [sl]
 80077c2:	3301      	adds	r3, #1
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	f8aa 3000 	strh.w	r3, [sl]
 80077cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	f67f af29 	bls.w	8007628 <tcp_handle+0xd0>
 80077d6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80077da:	07db      	lsls	r3, r3, #31
 80077dc:	f57f af24 	bpl.w	8007628 <tcp_handle+0xd0>
 80077e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077e2:	6962      	ldr	r2, [r4, #20]
 80077e4:	3301      	adds	r3, #1
 80077e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80077ea:	6363      	str	r3, [r4, #52]	; 0x34
 80077ec:	2310      	movs	r3, #16
 80077ee:	4808      	ldr	r0, [pc, #32]	; (8007810 <tcp_handle+0x2b8>)
 80077f0:	a901      	add	r1, sp, #4
 80077f2:	f88d 300c 	strb.w	r3, [sp, #12]
 80077f6:	f007 ff3b 	bl	800f670 <_tcp_send_package>
 80077fa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80077fe:	2b05      	cmp	r3, #5
 8007800:	d053      	beq.n	80078aa <tcp_handle+0x352>
 8007802:	d84d      	bhi.n	80078a0 <tcp_handle+0x348>
 8007804:	3b03      	subs	r3, #3
 8007806:	2b01      	cmp	r3, #1
 8007808:	f63f af0e 	bhi.w	8007628 <tcp_handle+0xd0>
 800780c:	2307      	movs	r3, #7
 800780e:	e73a      	b.n	8007686 <tcp_handle+0x12e>
 8007810:	20002e3c 	andcs	r2, r0, ip, lsr lr
 8007814:	20002e44 	andcs	r2, r0, r4, asr #28
 8007818:	200022cc 	andcs	r2, r0, ip, asr #5
 800781c:	6923      	ldr	r3, [r4, #16]
 800781e:	1b99      	subs	r1, r3, r6
 8007820:	d513      	bpl.n	800784a <tcp_handle+0x2f2>
 8007822:	6962      	ldr	r2, [r4, #20]
 8007824:	1ab2      	subs	r2, r6, r2
 8007826:	2a00      	cmp	r2, #0
 8007828:	dc0f      	bgt.n	800784a <tcp_handle+0x2f2>
 800782a:	6126      	str	r6, [r4, #16]
 800782c:	6a23      	ldr	r3, [r4, #32]
 800782e:	1bda      	subs	r2, r3, r7
 8007830:	2a00      	cmp	r2, #0
 8007832:	db05      	blt.n	8007840 <tcp_handle+0x2e8>
 8007834:	42bb      	cmp	r3, r7
 8007836:	d193      	bne.n	8007760 <tcp_handle+0x208>
 8007838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800783a:	1b9b      	subs	r3, r3, r6
 800783c:	2b00      	cmp	r3, #0
 800783e:	dc8f      	bgt.n	8007760 <tcp_handle+0x208>
 8007840:	e9c4 7608 	strd	r7, r6, [r4, #32]
 8007844:	f8c4 a018 	str.w	sl, [r4, #24]
 8007848:	e78a      	b.n	8007760 <tcp_handle+0x208>
 800784a:	1af3      	subs	r3, r6, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	dc06      	bgt.n	800785e <tcp_handle+0x306>
 8007850:	2900      	cmp	r1, #0
 8007852:	dc85      	bgt.n	8007760 <tcp_handle+0x208>
 8007854:	6963      	ldr	r3, [r4, #20]
 8007856:	1af3      	subs	r3, r6, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc81      	bgt.n	8007760 <tcp_handle+0x208>
 800785c:	e7e6      	b.n	800782c <tcp_handle+0x2d4>
 800785e:	6963      	ldr	r3, [r4, #20]
 8007860:	1b9a      	subs	r2, r3, r6
 8007862:	2a00      	cmp	r2, #0
 8007864:	f6bf af7c 	bge.w	8007760 <tcp_handle+0x208>
 8007868:	e745      	b.n	80076f6 <tcp_handle+0x19e>
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	42b3      	cmp	r3, r6
 800786e:	f47f af77 	bne.w	8007760 <tcp_handle+0x208>
 8007872:	8821      	ldrh	r1, [r4, #0]
 8007874:	480f      	ldr	r0, [pc, #60]	; (80078b4 <tcp_handle+0x35c>)
 8007876:	f007 feb1 	bl	800f5dc <_init_tcb>
 800787a:	e771      	b.n	8007760 <tcp_handle+0x208>
 800787c:	6963      	ldr	r3, [r4, #20]
 800787e:	42b3      	cmp	r3, r6
 8007880:	f47f af6e 	bne.w	8007760 <tcp_handle+0x208>
 8007884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007886:	480b      	ldr	r0, [pc, #44]	; (80078b4 <tcp_handle+0x35c>)
 8007888:	9302      	str	r3, [sp, #8]
 800788a:	2310      	movs	r3, #16
 800788c:	a901      	add	r1, sp, #4
 800788e:	9601      	str	r6, [sp, #4]
 8007890:	f88d 300c 	strb.w	r3, [sp, #12]
 8007894:	f007 feec 	bl	800f670 <_tcp_send_package>
 8007898:	e762      	b.n	8007760 <tcp_handle+0x208>
 800789a:	6962      	ldr	r2, [r4, #20]
 800789c:	9201      	str	r2, [sp, #4]
 800789e:	e72c      	b.n	80076fa <tcp_handle+0x1a2>
 80078a0:	2b06      	cmp	r3, #6
 80078a2:	f47f aec1 	bne.w	8007628 <tcp_handle+0xd0>
 80078a6:	230a      	movs	r3, #10
 80078a8:	e6ed      	b.n	8007686 <tcp_handle+0x12e>
 80078aa:	6963      	ldr	r3, [r4, #20]
 80078ac:	42b3      	cmp	r3, r6
 80078ae:	d0fa      	beq.n	80078a6 <tcp_handle+0x34e>
 80078b0:	2308      	movs	r3, #8
 80078b2:	e6e8      	b.n	8007686 <tcp_handle+0x12e>
 80078b4:	20002e3c 	andcs	r2, r0, ip, lsr lr

080078b8 <udp_handle>:
 80078b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078bc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 80078be:	4607      	mov	r7, r0
 80078c0:	ba5b      	rev16	r3, r3
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 80078c8:	2a01      	cmp	r2, #1
 80078ca:	d904      	bls.n	80078d6 <udp_handle+0x1e>
 80078cc:	2b7b      	cmp	r3, #123	; 0x7b
 80078ce:	d002      	beq.n	80078d6 <udp_handle+0x1e>
 80078d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d4:	d308      	bcc.n	80078e8 <udp_handle+0x30>
 80078d6:	2400      	movs	r4, #0
 80078d8:	4a1f      	ldr	r2, [pc, #124]	; (8007958 <udp_handle+0xa0>)
 80078da:	f852 1b04 	ldr.w	r1, [r2], #4
 80078de:	4299      	cmp	r1, r3
 80078e0:	d005      	beq.n	80078ee <udp_handle+0x36>
 80078e2:	3401      	adds	r4, #1
 80078e4:	2c08      	cmp	r4, #8
 80078e6:	d1f8      	bne.n	80078da <udp_handle+0x22>
 80078e8:	b002      	add	sp, #8
 80078ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ee:	f640 3394 	movw	r3, #2964	; 0xb94
 80078f2:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 80078f4:	435c      	muls	r4, r3
 80078f6:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 80078fa:	ba76      	rev16	r6, r6
 80078fc:	3e08      	subs	r6, #8
 80078fe:	b2b6      	uxth	r6, r6
 8007900:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 8007904:	bf28      	it	cs
 8007906:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 800790a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800795c <udp_handle+0xa4>
 800790e:	1d20      	adds	r0, r4, #4
 8007910:	f838 5004 	ldrh.w	r5, [r8, r4]
 8007914:	4632      	mov	r2, r6
 8007916:	435d      	muls	r5, r3
 8007918:	4428      	add	r0, r5
 800791a:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800791e:	4440      	add	r0, r8
 8007920:	f007 fffa 	bl	800f918 <memcpy.isra.0>
 8007924:	2204      	movs	r2, #4
 8007926:	f107 011a 	add.w	r1, r7, #26
 800792a:	eb0d 0002 	add.w	r0, sp, r2
 800792e:	f007 fff3 	bl	800f918 <memcpy.isra.0>
 8007932:	9a01      	ldr	r2, [sp, #4]
 8007934:	192b      	adds	r3, r5, r4
 8007936:	4443      	add	r3, r8
 8007938:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 800793c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800793e:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 8007942:	ba52      	rev16	r2, r2
 8007944:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 8007948:	f838 3004 	ldrh.w	r3, [r8, r4]
 800794c:	3301      	adds	r3, #1
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	f828 3004 	strh.w	r3, [r8, r4]
 8007956:	e7c7      	b.n	80078e8 <udp_handle+0x30>
 8007958:	2000347c 	andcs	r3, r0, ip, ror r4
 800795c:	2000349c 	mulcs	r0, ip, r4

08007960 <arp_handle>:
 8007960:	8a83      	ldrh	r3, [r0, #20]
 8007962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007966:	d003      	beq.n	8007970 <arp_handle+0x10>
 8007968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796c:	d002      	beq.n	8007974 <arp_handle+0x14>
 800796e:	4770      	bx	lr
 8007970:	f009 ba10 	b.w	8010d94 <arp_handle_request>
 8007974:	f009 ba36 	b.w	8010de4 <arp_handle_reply>

08007978 <igmp_handle>:
 8007978:	7b83      	ldrb	r3, [r0, #14]
 800797a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800797e:	2b45      	cmp	r3, #69	; 0x45
 8007980:	d116      	bne.n	80079b0 <igmp_handle+0x38>
 8007982:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007986:	2b11      	cmp	r3, #17
 8007988:	d112      	bne.n	80079b0 <igmp_handle+0x38>
 800798a:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <igmp_handle+0x94>)
 800798c:	f100 051d 	add.w	r5, r0, #29
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	466a      	mov	r2, sp
 8007994:	462b      	mov	r3, r5
 8007996:	f100 0621 	add.w	r6, r0, #33	; 0x21
 800799a:	42b3      	cmp	r3, r6
 800799c:	d10b      	bne.n	80079b6 <igmp_handle+0x3e>
 800799e:	2401      	movs	r4, #1
 80079a0:	2100      	movs	r1, #0
 80079a2:	f04f 0c01 	mov.w	ip, #1
 80079a6:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <igmp_handle+0x98>)
 80079a8:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <igmp_handle+0x9c>)
 80079aa:	681f      	ldr	r7, [r3, #0]
 80079ac:	428f      	cmp	r7, r1
 80079ae:	d10a      	bne.n	80079c6 <igmp_handle+0x4e>
 80079b0:	b003      	add	sp, #12
 80079b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079b6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80079ba:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80079be:	428c      	cmp	r4, r1
 80079c0:	d0eb      	beq.n	800799a <igmp_handle+0x22>
 80079c2:	2400      	movs	r4, #0
 80079c4:	e7ec      	b.n	80079a0 <igmp_handle+0x28>
 80079c6:	6813      	ldr	r3, [r2, #0]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	b924      	cbnz	r4, 80079d6 <igmp_handle+0x5e>
 80079cc:	462b      	mov	r3, r5
 80079ce:	f10d 0e04 	add.w	lr, sp, #4
 80079d2:	42b3      	cmp	r3, r6
 80079d4:	d10e      	bne.n	80079f4 <igmp_handle+0x7c>
 80079d6:	f892 e005 	ldrb.w	lr, [r2, #5]
 80079da:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80079de:	f1be 0f01 	cmp.w	lr, #1
 80079e2:	d110      	bne.n	8007a06 <igmp_handle+0x8e>
 80079e4:	f892 e004 	ldrb.w	lr, [r2, #4]
 80079e8:	459e      	cmp	lr, r3
 80079ea:	d909      	bls.n	8007a00 <igmp_handle+0x88>
 80079ec:	085b      	lsrs	r3, r3, #1
 80079ee:	3301      	adds	r3, #1
 80079f0:	7113      	strb	r3, [r2, #4]
 80079f2:	e005      	b.n	8007a00 <igmp_handle+0x88>
 80079f4:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80079f8:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 80079fc:	45c1      	cmp	r9, r8
 80079fe:	d0e8      	beq.n	80079d2 <igmp_handle+0x5a>
 8007a00:	3101      	adds	r1, #1
 8007a02:	3208      	adds	r2, #8
 8007a04:	e7d2      	b.n	80079ac <igmp_handle+0x34>
 8007a06:	f882 c005 	strb.w	ip, [r2, #5]
 8007a0a:	e7ef      	b.n	80079ec <igmp_handle+0x74>
 8007a0c:	010000e0 	smlatteq	r0, r0, r0, r0
 8007a10:	2000a0cc 	andcs	sl, r0, ip, asr #1
 8007a14:	20009fa8 	andcs	r9, r0, r8, lsr #31

08007a18 <ip_handle>:
 8007a18:	7b82      	ldrb	r2, [r0, #14]
 8007a1a:	7dc3      	ldrb	r3, [r0, #23]
 8007a1c:	2a45      	cmp	r2, #69	; 0x45
 8007a1e:	d003      	beq.n	8007a28 <ip_handle+0x10>
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d111      	bne.n	8007a48 <ip_handle+0x30>
 8007a24:	f7ff bfa8 	b.w	8007978 <igmp_handle>
 8007a28:	2b06      	cmp	r3, #6
 8007a2a:	d00b      	beq.n	8007a44 <ip_handle+0x2c>
 8007a2c:	d804      	bhi.n	8007a38 <ip_handle+0x20>
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d006      	beq.n	8007a40 <ip_handle+0x28>
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d0f6      	beq.n	8007a24 <ip_handle+0xc>
 8007a36:	4770      	bx	lr
 8007a38:	2b11      	cmp	r3, #17
 8007a3a:	d105      	bne.n	8007a48 <ip_handle+0x30>
 8007a3c:	f7ff bf3c 	b.w	80078b8 <udp_handle>
 8007a40:	f000 b804 	b.w	8007a4c <icmp_handle>
 8007a44:	f7ff bd88 	b.w	8007558 <tcp_handle>
 8007a48:	4770      	bx	lr
	...

08007a4c <icmp_handle>:
 8007a4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a4e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8007a52:	4604      	mov	r4, r0
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d13e      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a58:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	d13a      	bne.n	8007ad6 <icmp_handle+0x8a>
 8007a60:	1d86      	adds	r6, r0, #6
 8007a62:	4631      	mov	r1, r6
 8007a64:	2206      	movs	r2, #6
 8007a66:	f009 fd41 	bl	80114ec <memcpy.isra.0>
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	2206      	movs	r2, #6
 8007a6e:	491b      	ldr	r1, [pc, #108]	; (8007adc <icmp_handle+0x90>)
 8007a70:	f009 fd3c 	bl	80114ec <memcpy.isra.0>
 8007a74:	8a63      	ldrh	r3, [r4, #18]
 8007a76:	f104 061a 	add.w	r6, r4, #26
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	2204      	movs	r2, #4
 8007a80:	8263      	strh	r3, [r4, #18]
 8007a82:	f104 001e 	add.w	r0, r4, #30
 8007a86:	f009 fd31 	bl	80114ec <memcpy.isra.0>
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <icmp_handle+0x94>)
 8007a8e:	eb0d 0102 	add.w	r1, sp, r2
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4630      	mov	r0, r6
 8007a96:	f104 060e 	add.w	r6, r4, #14
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	f009 fd26 	bl	80114ec <memcpy.isra.0>
 8007aa0:	2114      	movs	r1, #20
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	7625      	strb	r5, [r4, #24]
 8007aa6:	7665      	strb	r5, [r4, #25]
 8007aa8:	f009 fd07 	bl	80114ba <net_chksum>
 8007aac:	8a21      	ldrh	r1, [r4, #16]
 8007aae:	8320      	strh	r0, [r4, #24]
 8007ab0:	ba49      	rev16	r1, r1
 8007ab2:	b289      	uxth	r1, r1
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8007aba:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8007abe:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8007ac2:	f009 fcfa 	bl	80114ba <net_chksum>
 8007ac6:	8a21      	ldrh	r1, [r4, #16]
 8007ac8:	84a0      	strh	r0, [r4, #36]	; 0x24
 8007aca:	ba49      	rev16	r1, r1
 8007acc:	b289      	uxth	r1, r1
 8007ace:	4620      	mov	r0, r4
 8007ad0:	310e      	adds	r1, #14
 8007ad2:	f00c fa11 	bl	8013ef8 <emac_eth_send>
 8007ad6:	b002      	add	sp, #8
 8007ad8:	bd70      	pop	{r4, r5, r6, pc}
 8007ada:	bf00      	nop
 8007adc:	200022a8 	andcs	r2, r0, r8, lsr #5
 8007ae0:	2000229c 	mulcs	r0, ip, r2

08007ae4 <__aeabi_uldivmod>:
 8007ae4:	b953      	cbnz	r3, 8007afc <__aeabi_uldivmod+0x18>
 8007ae6:	b94a      	cbnz	r2, 8007afc <__aeabi_uldivmod+0x18>
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	bf08      	it	eq
 8007aec:	2800      	cmpeq	r0, #0
 8007aee:	bf1c      	itt	ne
 8007af0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007af4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007af8:	f000 b80c 	b.w	8007b14 <__aeabi_idiv0>
 8007afc:	f1ad 0c08 	sub.w	ip, sp, #8
 8007b00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007b04:	f00d fad6 	bl	80150b4 <__udivmoddi4>
 8007b08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b10:	b004      	add	sp, #16
 8007b12:	4770      	bx	lr

08007b14 <__aeabi_idiv0>:
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop

08007b18 <Reset_Handler>:
 8007b18:	480c      	ldr	r0, [pc, #48]	; (8007b4c <Zerobss+0x10>)
 8007b1a:	4685      	mov	sp, r0
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	e003      	b.n	8007b28 <DataInit>

08007b20 <CopyData>:
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <Zerobss+0x14>)
 8007b22:	585b      	ldr	r3, [r3, r1]
 8007b24:	5043      	str	r3, [r0, r1]
 8007b26:	3104      	adds	r1, #4

08007b28 <DataInit>:
 8007b28:	480a      	ldr	r0, [pc, #40]	; (8007b54 <Zerobss+0x18>)
 8007b2a:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <Zerobss+0x1c>)
 8007b2c:	1842      	adds	r2, r0, r1
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d3f6      	bcc.n	8007b20 <CopyData>
 8007b32:	4a0a      	ldr	r2, [pc, #40]	; (8007b5c <Zerobss+0x20>)
 8007b34:	e002      	b.n	8007b3c <Zerobss>

08007b36 <FillZerobss>:
 8007b36:	2300      	movs	r3, #0
 8007b38:	f842 3b04 	str.w	r3, [r2], #4

08007b3c <Zerobss>:
 8007b3c:	4b08      	ldr	r3, [pc, #32]	; (8007b60 <Zerobss+0x24>)
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d3f9      	bcc.n	8007b36 <FillZerobss>
 8007b42:	f00b fc6b 	bl	801341c <SystemInit>
 8007b46:	f000 f977 	bl	8007e38 <main>
 8007b4a:	4770      	bx	lr
 8007b4c:	20018000 	andcs	r8, r1, r0
 8007b50:	080176e4 	stmdaeq	r1, {r2, r5, r6, r7, r9, sl, ip, sp, lr}
 8007b54:	20000000 	andcs	r0, r0, r0
 8007b58:	200000f4 	strdcs	r0, [r0], -r4
 8007b5c:	200000f8 	strdcs	r0, [r0], -r8
 8007b60:	20013300 	andcs	r3, r1, r0, lsl #6

08007b64 <ADC0_1_IRQHandler>:
 8007b64:	e7fe      	b.n	8007b64 <ADC0_1_IRQHandler>

08007b66 <memcmp>:
 8007b66:	b510      	push	{r4, lr}
 8007b68:	3901      	subs	r1, #1
 8007b6a:	4402      	add	r2, r0
 8007b6c:	4290      	cmp	r0, r2
 8007b6e:	d101      	bne.n	8007b74 <memcmp+0xe>
 8007b70:	2000      	movs	r0, #0
 8007b72:	e005      	b.n	8007b80 <memcmp+0x1a>
 8007b74:	7803      	ldrb	r3, [r0, #0]
 8007b76:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b7a:	42a3      	cmp	r3, r4
 8007b7c:	d001      	beq.n	8007b82 <memcmp+0x1c>
 8007b7e:	1b18      	subs	r0, r3, r4
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	3001      	adds	r0, #1
 8007b84:	e7f2      	b.n	8007b6c <memcmp+0x6>

08007b86 <DisplayHandler::~DisplayHandler()>:
 8007b86:	4770      	bx	lr

08007b88 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8007b88:	4770      	bx	lr

08007b8a <DisplayUdfHandler::ShowLongName(char const*)>:
 8007b8a:	4770      	bx	lr

08007b8c <DisplayUdfHandler::ShowRdmEnabled(unsigned int, bool)>:
 8007b8c:	4770      	bx	lr

08007b8e <DisplayUdfHandler::ShowFailSafe(unsigned char)>:
 8007b8e:	4770      	bx	lr

08007b90 <dmxconfigudp::atoi(char const*, unsigned int)>:
 8007b90:	4603      	mov	r3, r0
 8007b92:	b530      	push	{r4, r5, lr}
 8007b94:	4401      	add	r1, r0
 8007b96:	250a      	movs	r5, #10
 8007b98:	2000      	movs	r0, #0
 8007b9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b9e:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8007ba2:	2c09      	cmp	r4, #9
 8007ba4:	d805      	bhi.n	8007bb2 <dmxconfigudp::atoi(char const*, unsigned int)+0x22>
 8007ba6:	fb05 2000 	mla	r0, r5, r0, r2
 8007baa:	4299      	cmp	r1, r3
 8007bac:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
 8007bb0:	d1f3      	bne.n	8007b9a <dmxconfigudp::atoi(char const*, unsigned int)+0xa>
 8007bb2:	bd30      	pop	{r4, r5, pc}

08007bb4 <DisplayHandler::~DisplayHandler()>:
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	f00a ff94 	bl	8012ae4 <operator delete(void*)>
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	bd10      	pop	{r4, pc}

08007bc0 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	f00a ff8e 	bl	8012ae4 <operator delete(void*)>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	bd10      	pop	{r4, pc}

08007bcc <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 8007bcc:	4b02      	ldr	r3, [pc, #8]	; (8007bd8 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 8007bce:	6819      	ldr	r1, [r3, #0]
 8007bd0:	4b02      	ldr	r3, [pc, #8]	; (8007bdc <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	f00a b80e 	b.w	8011bf4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007bd8:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8007bdc:	2000a138 	andcs	sl, r0, r8, lsr r1

08007be0 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 8007be0:	4b02      	ldr	r3, [pc, #8]	; (8007bec <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	4b02      	ldr	r3, [pc, #8]	; (8007bf0 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	f00a b804 	b.w	8011bf4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007bec:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8007bf0:	2000a138 	andcs	sl, r0, r8, lsr r1

08007bf4 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 8007bf4:	4b02      	ldr	r3, [pc, #8]	; (8007c00 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 8007bf6:	6819      	ldr	r1, [r3, #0]
 8007bf8:	4b02      	ldr	r3, [pc, #8]	; (8007c04 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	f009 bffa 	b.w	8011bf4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007c00:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8007c04:	2000a138 	andcs	sl, r0, r8, lsr r1

08007c08 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 8007c08:	4b02      	ldr	r3, [pc, #8]	; (8007c14 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 8007c0a:	6819      	ldr	r1, [r3, #0]
 8007c0c:	4b02      	ldr	r3, [pc, #8]	; (8007c18 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 8007c0e:	6818      	ldr	r0, [r3, #0]
 8007c10:	f009 bff0 	b.w	8011bf4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007c14:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8007c18:	2000a138 	andcs	sl, r0, r8, lsr r1

08007c1c <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 8007c1c:	4b02      	ldr	r3, [pc, #8]	; (8007c28 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 8007c1e:	6819      	ldr	r1, [r3, #0]
 8007c20:	4b02      	ldr	r3, [pc, #8]	; (8007c2c <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	f009 bfe6 	b.w	8011bf4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007c28:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8007c2c:	2000a138 	andcs	sl, r0, r8, lsr r1

08007c30 <DisplayUdfHandler::ShowShortName(char const*)>:
 8007c30:	4b02      	ldr	r3, [pc, #8]	; (8007c3c <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 8007c32:	6819      	ldr	r1, [r3, #0]
 8007c34:	4b02      	ldr	r3, [pc, #8]	; (8007c40 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 8007c36:	6818      	ldr	r0, [r3, #0]
 8007c38:	f009 bfb9 	b.w	8011bae <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8007c3c:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8007c40:	2000a138 	andcs	sl, r0, r8, lsr r1

08007c44 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>:
 8007c44:	b110      	cbz	r0, 8007c4c <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]+0x8>
 8007c46:	6803      	ldr	r3, [r0, #0]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	4718      	bx	r3
 8007c4c:	4770      	bx	lr

08007c4e <Display::PutChar(int) [clone .isra.0]>:
 8007c4e:	b110      	cbz	r0, 8007c56 <Display::PutChar(int) [clone .isra.0]+0x8>
 8007c50:	6803      	ldr	r3, [r0, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	4718      	bx	r3
 8007c56:	4770      	bx	lr

08007c58 <DisplayHandler::Print(unsigned int)>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	7903      	ldrb	r3, [r0, #4]
 8007c5c:	b1f3      	cbz	r3, 8007c9c <DisplayHandler::Print(unsigned int)+0x44>
 8007c5e:	2904      	cmp	r1, #4
 8007c60:	bf98      	it	ls
 8007c62:	4b0f      	ldrls	r3, [pc, #60]	; (8007ca0 <DisplayHandler::Print(unsigned int)+0x48>)
 8007c64:	4d0f      	ldr	r5, [pc, #60]	; (8007ca4 <DisplayHandler::Print(unsigned int)+0x4c>)
 8007c66:	bf98      	it	ls
 8007c68:	5c5c      	ldrbls	r4, [r3, r1]
 8007c6a:	682b      	ldr	r3, [r5, #0]
 8007c6c:	bf88      	it	hi
 8007c6e:	2455      	movhi	r4, #85	; 0x55
 8007c70:	6998      	ldr	r0, [r3, #24]
 8007c72:	b178      	cbz	r0, 8007c94 <DisplayHandler::Print(unsigned int)+0x3c>
 8007c74:	7901      	ldrb	r1, [r0, #4]
 8007c76:	3901      	subs	r1, #1
 8007c78:	b2c9      	uxtb	r1, r1
 8007c7a:	b168      	cbz	r0, 8007c98 <DisplayHandler::Print(unsigned int)+0x40>
 8007c7c:	7942      	ldrb	r2, [r0, #5]
 8007c7e:	3a01      	subs	r2, #1
 8007c80:	b2d2      	uxtb	r2, r2
 8007c82:	f7ff ffdf 	bl	8007c44 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8007c86:	682b      	ldr	r3, [r5, #0]
 8007c88:	4621      	mov	r1, r4
 8007c8a:	6998      	ldr	r0, [r3, #24]
 8007c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c90:	f7ff bfdd 	b.w	8007c4e <Display::PutChar(int) [clone .isra.0]>
 8007c94:	4601      	mov	r1, r0
 8007c96:	e7ee      	b.n	8007c76 <DisplayHandler::Print(unsigned int)+0x1e>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	e7f0      	b.n	8007c7e <DisplayHandler::Print(unsigned int)+0x26>
 8007c9c:	bd38      	pop	{r3, r4, r5, pc}
 8007c9e:	bf00      	nop
 8007ca0:	0801549c 	stmdaeq	r1, {r2, r3, r4, r7, sl, ip, lr}
 8007ca4:	2000a140 	andcs	sl, r0, r0, asr #2

08007ca8 <Display::TextStatus(char const*)>:
 8007ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cac:	4604      	mov	r4, r0
 8007cae:	6980      	ldr	r0, [r0, #24]
 8007cb0:	460d      	mov	r5, r1
 8007cb2:	b360      	cbz	r0, 8007d0e <Display::TextStatus(char const*)+0x66>
 8007cb4:	7947      	ldrb	r7, [r0, #5]
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	1e7e      	subs	r6, r7, #1
 8007cba:	b2f6      	uxtb	r6, r6
 8007cbc:	4632      	mov	r2, r6
 8007cbe:	f890 9004 	ldrb.w	r9, [r0, #4]
 8007cc2:	f04f 0800 	mov.w	r8, #0
 8007cc6:	f7ff ffbd 	bl	8007c44 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8007cca:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8007cce:	45c1      	cmp	r9, r8
 8007cd0:	69a0      	ldr	r0, [r4, #24]
 8007cd2:	d816      	bhi.n	8007d02 <Display::TextStatus(char const*)+0x5a>
 8007cd4:	4632      	mov	r2, r6
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	f7ff ffb4 	bl	8007c44 <Display::SetCursorPos(unsigned char, unsigned char) [clone .isra.0]>
 8007cdc:	69a0      	ldr	r0, [r4, #24]
 8007cde:	b1b0      	cbz	r0, 8007d0e <Display::TextStatus(char const*)+0x66>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	7901      	ldrb	r1, [r0, #4]
 8007ce4:	5cea      	ldrb	r2, [r5, r3]
 8007ce6:	b11a      	cbz	r2, 8007cf0 <Display::TextStatus(char const*)+0x48>
 8007ce8:	1c5a      	adds	r2, r3, #1
 8007cea:	4299      	cmp	r1, r3
 8007cec:	4613      	mov	r3, r2
 8007cee:	dcf9      	bgt.n	8007ce4 <Display::TextStatus(char const*)+0x3c>
 8007cf0:	6802      	ldr	r2, [r0, #0]
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	69d4      	ldr	r4, [r2, #28]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	462a      	mov	r2, r5
 8007cfa:	46a4      	mov	ip, r4
 8007cfc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d00:	4760      	bx	ip
 8007d02:	2120      	movs	r1, #32
 8007d04:	f7ff ffa3 	bl	8007c4e <Display::PutChar(int) [clone .isra.0]>
 8007d08:	f108 0801 	add.w	r8, r8, #1
 8007d0c:	e7df      	b.n	8007cce <Display::TextStatus(char const*)+0x26>
 8007d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d12 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8007d12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d14:	4605      	mov	r5, r0
 8007d16:	461e      	mov	r6, r3
 8007d18:	460f      	mov	r7, r1
 8007d1a:	4614      	mov	r4, r2
 8007d1c:	f7ff ffc4 	bl	8007ca8 <Display::TextStatus(char const*)>
 8007d20:	7c6b      	ldrb	r3, [r5, #17]
 8007d22:	b19b      	cbz	r3, 8007d4c <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x3a>
 8007d24:	43e2      	mvns	r2, r4
 8007d26:	2312      	movs	r3, #18
 8007d28:	7a28      	ldrb	r0, [r5, #8]
 8007d2a:	f88d 3004 	strb.w	r3, [sp, #4]
 8007d2e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8007d32:	f88d 3005 	strb.w	r3, [sp, #5]
 8007d36:	f88d 2006 	strb.w	r2, [sp, #6]
 8007d3a:	f00c f975 	bl	8014028 <gd32_i2c_set_address>
 8007d3e:	68e8      	ldr	r0, [r5, #12]
 8007d40:	f00c f96a 	bl	8014018 <gd32_i2c_set_baudrate>
 8007d44:	2103      	movs	r1, #3
 8007d46:	a801      	add	r0, sp, #4
 8007d48:	f00c f974 	bl	8014034 <gd32_i2c_write>
 8007d4c:	1c73      	adds	r3, r6, #1
 8007d4e:	d006      	beq.n	8007d5e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x4c>
 8007d50:	4639      	mov	r1, r7
 8007d52:	4630      	mov	r0, r6
 8007d54:	b003      	add	sp, #12
 8007d56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007d5a:	f00a bd65 	b.w	8012828 <console_status>
 8007d5e:	b003      	add	sp, #12
 8007d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007d64 <Display::SetSleep(bool)>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	4604      	mov	r4, r0
 8007d68:	6980      	ldr	r0, [r0, #24]
 8007d6a:	460d      	mov	r5, r1
 8007d6c:	b138      	cbz	r0, 8007d7e <Display::SetSleep(bool)+0x1a>
 8007d6e:	6803      	ldr	r3, [r0, #0]
 8007d70:	7421      	strb	r1, [r4, #16]
 8007d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d74:	4798      	blx	r3
 8007d76:	b915      	cbnz	r5, 8007d7e <Display::SetSleep(bool)+0x1a>
 8007d78:	4b01      	ldr	r3, [pc, #4]	; (8007d80 <Display::SetSleep(bool)+0x1c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6063      	str	r3, [r4, #4]
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	2000a24c 	andcs	sl, r0, ip, asr #4

08007d84 <display::timeout::gpio_init()>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	f240 6003 	movw	r0, #1539	; 0x603
 8007d8a:	f00b fd85 	bl	8013898 <rcu_periph_clock_enable>
 8007d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d96:	2203      	movs	r2, #3
 8007d98:	2148      	movs	r1, #72	; 0x48
 8007d9a:	4801      	ldr	r0, [pc, #4]	; (8007da0 <display::timeout::gpio_init()+0x1c>)
 8007d9c:	f00b bce4 	b.w	8013768 <gpio_init>
 8007da0:	40010c00 	andmi	r0, r1, r0, lsl #24

08007da4 <display::timeout::gpio_renew()>:
 8007da4:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <display::timeout::gpio_renew()+0x10>)
 8007da6:	f8d3 0c08 	ldr.w	r0, [r3, #3080]	; 0xc08
 8007daa:	f480 4080 	eor.w	r0, r0, #16384	; 0x4000
 8007dae:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8007db2:	4770      	bx	lr
 8007db4:	40010000 	andmi	r0, r1, r0

08007db8 <RDMDevice::Init()>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	2301      	movs	r3, #1
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8007dc2:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 8007dc6:	3051      	adds	r0, #81	; 0x51
 8007dc8:	2a20      	cmp	r2, #32
 8007dca:	bf28      	it	cs
 8007dcc:	2220      	movcs	r2, #32
 8007dce:	4613      	mov	r3, r2
 8007dd0:	f104 010a 	add.w	r1, r4, #10
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	d215      	bcs.n	8007e04 <RDMDevice::Init()+0x4c>
 8007dd8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007dda:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
 8007dde:	b110      	cbz	r0, 8007de6 <RDMDevice::Init()+0x2e>
 8007de0:	6803      	ldr	r3, [r0, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	4798      	blx	r3
 8007de6:	f06f 0508 	mvn.w	r5, #8
 8007dea:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
 8007dee:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8007df2:	f104 0209 	add.w	r2, r4, #9
 8007df6:	1b2d      	subs	r5, r5, r4
 8007df8:	18a9      	adds	r1, r5, r2
 8007dfa:	4288      	cmp	r0, r1
 8007dfc:	d807      	bhi.n	8007e0e <RDMDevice::Init()+0x56>
 8007dfe:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	f810 5b01 	ldrb.w	r5, [r0], #1
 8007e08:	f800 5c48 	strb.w	r5, [r0, #-72]
 8007e0c:	e7e2      	b.n	8007dd4 <RDMDevice::Init()+0x1c>
 8007e0e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8007e12:	440b      	add	r3, r1
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	e7ef      	b.n	8007df8 <RDMDevice::Init()+0x40>

08007e18 <Hardware::RebootHandler()>:
 8007e18:	b508      	push	{r3, lr}
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <Hardware::RebootHandler()+0x18>)
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	f006 fbef 	bl	800e600 <Dmx::Blackout()>
 8007e22:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <Hardware::RebootHandler()+0x1c>)
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007e2a:	f001 bef1 	b.w	8009c10 <ArtNetNode::Stop()>
 8007e2e:	bf00      	nop
 8007e30:	20001230 	andcs	r1, r0, r0, lsr r2
 8007e34:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08007e38 <main>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	2501      	movs	r5, #1
 8007e3e:	f5ad 5d8c 	sub.w	sp, sp, #4480	; 0x1180
 8007e42:	b081      	sub	sp, #4
 8007e44:	a805      	add	r0, sp, #20
 8007e46:	f00a fda3 	bl	8012990 <Hardware::Hardware()>
 8007e4a:	a889      	add	r0, sp, #548	; 0x224
 8007e4c:	f008 fad8 	bl	8010400 <Network::Network()>
 8007e50:	a81b      	add	r0, sp, #108	; 0x6c
 8007e52:	f00a fd47 	bl	80128e4 <LedBlink::LedBlink()>
 8007e56:	a850      	add	r0, sp, #320	; 0x140
 8007e58:	f009 fb86 	bl	8011568 <DisplayUdf::DisplayUdf()>
 8007e5c:	4bb3      	ldr	r3, [pc, #716]	; (800812c <main+0x2f4>)
 8007e5e:	4ab4      	ldr	r2, [pc, #720]	; (8008130 <main+0x2f8>)
 8007e60:	49b4      	ldr	r1, [pc, #720]	; (8008134 <main+0x2fc>)
 8007e62:	a806      	add	r0, sp, #24
 8007e64:	f00a fcf8 	bl	8012858 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8007e68:	a807      	add	r0, sp, #28
 8007e6a:	f007 f9a1 	bl	800f1b0 <FlashRom::FlashRom()>
 8007e6e:	4fb2      	ldr	r7, [pc, #712]	; (8008138 <main+0x300>)
 8007e70:	a808      	add	r0, sp, #32
 8007e72:	f006 fd81 	bl	800e978 <SpiFlashStore::SpiFlashStore()>
 8007e76:	49b1      	ldr	r1, [pc, #708]	; (800813c <main+0x304>)
 8007e78:	a806      	add	r0, sp, #24
 8007e7a:	f00a fd25 	bl	80128c8 <FirmwareVersion::Print(char const*)>
 8007e7e:	2008      	movs	r0, #8
 8007e80:	613d      	str	r5, [r7, #16]
 8007e82:	f00a fe33 	bl	8012aec <operator new(unsigned int)>
 8007e86:	4bae      	ldr	r3, [pc, #696]	; (8008140 <main+0x308>)
 8007e88:	2400      	movs	r4, #0
 8007e8a:	6003      	str	r3, [r0, #0]
 8007e8c:	4bad      	ldr	r3, [pc, #692]	; (8008144 <main+0x30c>)
 8007e8e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	49ac      	ldr	r1, [pc, #688]	; (8008148 <main+0x310>)
 8007e96:	3b00      	subs	r3, #0
 8007e98:	bf18      	it	ne
 8007e9a:	2301      	movne	r3, #1
 8007e9c:	7103      	strb	r3, [r0, #4]
 8007e9e:	901d      	str	r0, [sp, #116]	; 0x74
 8007ea0:	ab1b      	add	r3, sp, #108	; 0x6c
 8007ea2:	a850      	add	r0, sp, #320	; 0x140
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	f7ff ff34 	bl	8007d12 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007eaa:	a811      	add	r0, sp, #68	; 0x44
 8007eac:	f006 ff78 	bl	800eda0 <StoreNetwork::StoreNetwork()>
 8007eb0:	ab12      	add	r3, sp, #72	; 0x48
 8007eb2:	a911      	add	r1, sp, #68	; 0x44
 8007eb4:	a889      	add	r0, sp, #548	; 0x224
 8007eb6:	93b7      	str	r3, [sp, #732]	; 0x2dc
 8007eb8:	f008 fafc 	bl	80104b4 <Network::Init(NetworkParamsStore*)>
 8007ebc:	a889      	add	r0, sp, #548	; 0x224
 8007ebe:	f008 fce9 	bl	8010894 <Network::Print()>
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007ec8:	49a0      	ldr	r1, [pc, #640]	; (800814c <main+0x314>)
 8007eca:	a850      	add	r0, sp, #320	; 0x140
 8007ecc:	f7ff ff21 	bl	8007d12 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007ed0:	a809      	add	r0, sp, #36	; 0x24
 8007ed2:	f007 fed7 	bl	800fc84 <MDNS::MDNS()>
 8007ed6:	a809      	add	r0, sp, #36	; 0x24
 8007ed8:	f007 ff94 	bl	800fe04 <MDNS::Start()>
 8007edc:	f642 1305 	movw	r3, #10501	; 0x2905
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	4a9b      	ldr	r2, [pc, #620]	; (8008150 <main+0x318>)
 8007ee4:	e9cd 4400 	strd	r4, r4, [sp]
 8007ee8:	a809      	add	r0, sp, #36	; 0x24
 8007eea:	f008 f8f5 	bl	80100d8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8007eee:	4b99      	ldr	r3, [pc, #612]	; (8008154 <main+0x31c>)
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4a99      	ldr	r2, [pc, #612]	; (8008158 <main+0x320>)
 8007ef4:	e9cd 5300 	strd	r5, r3, [sp]
 8007ef8:	a809      	add	r0, sp, #36	; 0x24
 8007efa:	2350      	movs	r3, #80	; 0x50
 8007efc:	f008 f8ec 	bl	80100d8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 8007f00:	a809      	add	r0, sp, #36	; 0x24
 8007f02:	f008 fa2f 	bl	8010364 <MDNS::Print()>
 8007f06:	a83a      	add	r0, sp, #232	; 0xe8
 8007f08:	f001 f90e 	bl	8009128 <HttpDaemon::HttpDaemon()>
 8007f0c:	a83a      	add	r0, sp, #232	; 0xe8
 8007f0e:	f001 f91f 	bl	8009150 <HttpDaemon::Start()>
 8007f12:	2303      	movs	r3, #3
 8007f14:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 8007f18:	4990      	ldr	r1, [pc, #576]	; (800815c <main+0x324>)
 8007f1a:	a850      	add	r0, sp, #320	; 0x140
 8007f1c:	f7ff fef9 	bl	8007d12 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8007f20:	4621      	mov	r1, r4
 8007f22:	a813      	add	r0, sp, #76	; 0x4c
 8007f24:	f007 f932 	bl	800f18c <StoreArtNet::StoreArtNet(unsigned int)>
 8007f28:	a913      	add	r1, sp, #76	; 0x4c
 8007f2a:	a866      	add	r0, sp, #408	; 0x198
 8007f2c:	f003 fa80 	bl	800b430 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8007f30:	a8bc      	add	r0, sp, #752	; 0x2f0
 8007f32:	f001 fdc7 	bl	8009ac4 <ArtNet4Node::ArtNet4Node()>
 8007f36:	a866      	add	r0, sp, #408	; 0x198
 8007f38:	f003 fa9a 	bl	800b470 <ArtNetParams::Load()>
 8007f3c:	b130      	cbz	r0, 8007f4c <main+0x114>
 8007f3e:	a866      	add	r0, sp, #408	; 0x198
 8007f40:	f003 feb4 	bl	800bcac <ArtNetParams::Dump()>
 8007f44:	4621      	mov	r1, r4
 8007f46:	a866      	add	r0, sp, #408	; 0x198
 8007f48:	f003 fe2e 	bl	800bba8 <ArtNetParams::Set(unsigned int)>
 8007f4c:	4a84      	ldr	r2, [pc, #528]	; (8008160 <main+0x328>)
 8007f4e:	ab0a      	add	r3, sp, #40	; 0x28
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	f8bd 2211 	ldrh.w	r2, [sp, #529]	; 0x211
 8007f56:	ab0a      	add	r3, sp, #40	; 0x28
 8007f58:	93c5      	str	r3, [sp, #788]	; 0x314
 8007f5a:	ab14      	add	r3, sp, #80	; 0x50
 8007f5c:	f002 0203 	and.w	r2, r2, #3
 8007f60:	2100      	movs	r1, #0
 8007f62:	93c4      	str	r3, [sp, #784]	; 0x310
 8007f64:	a8bd      	add	r0, sp, #756	; 0x2f4
 8007f66:	f89d 3203 	ldrb.w	r3, [sp, #515]	; 0x203
 8007f6a:	f002 f8db 	bl	800a124 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8007f6e:	a80b      	add	r0, sp, #44	; 0x2c
 8007f70:	f006 fe68 	bl	800ec44 <StoreDmxSend::StoreDmxSend()>
 8007f74:	a90b      	add	r1, sp, #44	; 0x2c
 8007f76:	a817      	add	r0, sp, #92	; 0x5c
 8007f78:	f005 fd4c 	bl	800da14 <DmxParams::DmxParams(DmxParamsStore*)>
 8007f7c:	a821      	add	r0, sp, #132	; 0x84
 8007f7e:	f006 f9e7 	bl	800e350 <Dmx::Dmx()>
 8007f82:	a817      	add	r0, sp, #92	; 0x5c
 8007f84:	f005 fd52 	bl	800da2c <DmxParams::Load()>
 8007f88:	b130      	cbz	r0, 8007f98 <main+0x160>
 8007f8a:	a817      	add	r0, sp, #92	; 0x5c
 8007f8c:	f005 fe9c 	bl	800dcc8 <DmxParams::Dump()>
 8007f90:	a921      	add	r1, sp, #132	; 0x84
 8007f92:	a817      	add	r0, sp, #92	; 0x5c
 8007f94:	f005 fe6e 	bl	800dc74 <DmxParams::Set(Dmx*)>
 8007f98:	4a72      	ldr	r2, [pc, #456]	; (8008164 <main+0x32c>)
 8007f9a:	ac0c      	add	r4, sp, #48	; 0x30
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	920c      	str	r2, [sp, #48]	; 0x30
 8007fa0:	ab0c      	add	r3, sp, #48	; 0x30
 8007fa2:	f005 fcdd 	bl	800d960 <DmxSend::Print()>
 8007fa6:	f89d 5bde 	ldrb.w	r5, [sp, #3038]	; 0xbde
 8007faa:	b165      	cbz	r5, 8007fc6 <main+0x18e>
 8007fac:	2001      	movs	r0, #1
 8007fae:	94be      	str	r4, [sp, #760]	; 0x2f8
 8007fb0:	f00a fd9c 	bl	8012aec <operator new(unsigned int)>
 8007fb4:	4b6c      	ldr	r3, [pc, #432]	; (8008168 <main+0x330>)
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8007fbc:	6818      	ldr	r0, [r3, #0]
 8007fbe:	f008 fa51 	bl	8010464 <Network::Begin(unsigned short)>
 8007fc2:	4b6a      	ldr	r3, [pc, #424]	; (800816c <main+0x334>)
 8007fc4:	6018      	str	r0, [r3, #0]
 8007fc6:	ac0d      	add	r4, sp, #52	; 0x34
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f000 fa2d 	bl	8008428 <DmxInput::DmxInput()>
 8007fce:	f89d 3bdf 	ldrb.w	r3, [sp, #3039]	; 0xbdf
 8007fd2:	b103      	cbz	r3, 8007fd6 <main+0x19e>
 8007fd4:	94c1      	str	r4, [sp, #772]	; 0x304
 8007fd6:	ab15      	add	r3, sp, #84	; 0x54
 8007fd8:	4618      	mov	r0, r3
 8007fda:	9303      	str	r3, [sp, #12]
 8007fdc:	f006 ff40 	bl	800ee60 <StoreRDMDevice::StoreRDMDevice()>
 8007fe0:	f89d 3bde 	ldrb.w	r3, [sp, #3038]	; 0xbde
 8007fe4:	b39b      	cbz	r3, 800804e <main+0x216>
 8007fe6:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8007fe8:	069a      	lsls	r2, r3, #26
 8007fea:	d530      	bpl.n	800804e <main+0x216>
 8007fec:	f44f 70cc 	mov.w	r0, #408	; 0x198
 8007ff0:	f00a fd7c 	bl	8012aec <operator new(unsigned int)>
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	f005 f85e 	bl	800d0b8 <ArtNetRdmController::ArtNetRdmController(unsigned int)>
 8007ffc:	9903      	ldr	r1, [sp, #12]
 8007ffe:	a844      	add	r0, sp, #272	; 0x110
 8008000:	f005 fb7c 	bl	800d6fc <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>
 8008004:	a844      	add	r0, sp, #272	; 0x110
 8008006:	f005 fb8b 	bl	800d720 <RDMDeviceParams::Load()>
 800800a:	1d26      	adds	r6, r4, #4
 800800c:	b130      	cbz	r0, 800801c <main+0x1e4>
 800800e:	a844      	add	r0, sp, #272	; 0x110
 8008010:	4631      	mov	r1, r6
 8008012:	f005 fb90 	bl	800d736 <RDMDeviceParams::Set(RDMDevice*)>
 8008016:	a844      	add	r0, sp, #272	; 0x110
 8008018:	f005 fbc2 	bl	800d7a0 <RDMDeviceParams::Dump()>
 800801c:	4630      	mov	r0, r6
 800801e:	f7ff fecb 	bl	8007db8 <RDMDevice::Init()>
 8008022:	4630      	mov	r0, r6
 8008024:	f005 fb26 	bl	800d674 <RDMDevice::Print()>
 8008028:	2303      	movs	r3, #3
 800802a:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
 800802e:	4950      	ldr	r1, [pc, #320]	; (8008170 <main+0x338>)
 8008030:	a850      	add	r0, sp, #320	; 0x140
 8008032:	f7ff fe6e 	bl	8007d12 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008036:	4b4f      	ldr	r3, [pc, #316]	; (8008174 <main+0x33c>)
 8008038:	2100      	movs	r1, #0
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8008040:	f005 fa42 	bl	800d4c8 <RDMDiscovery::Full(unsigned int, RDMTod*)>
 8008044:	2200      	movs	r2, #0
 8008046:	4621      	mov	r1, r4
 8008048:	a8bd      	add	r0, sp, #756	; 0x2f4
 800804a:	f003 f804 	bl	800b056 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>
 800804e:	a8bc      	add	r0, sp, #752	; 0x2f0
 8008050:	f001 fd7c 	bl	8009b4c <ArtNet4Node::Print()>
 8008054:	f89d 3bdf 	ldrb.w	r3, [sp, #3039]	; 0xbdf
 8008058:	f89d 4bde 	ldrb.w	r4, [sp, #3038]	; 0xbde
 800805c:	441c      	add	r4, r3
 800805e:	f8bd 3211 	ldrh.w	r3, [sp, #529]	; 0x211
 8008062:	079b      	lsls	r3, r3, #30
 8008064:	f000 8120 	beq.w	80082a8 <main+0x470>
 8008068:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800806a:	4a43      	ldr	r2, [pc, #268]	; (8008178 <main+0x340>)
 800806c:	f013 0f20 	tst.w	r3, #32
 8008070:	4b42      	ldr	r3, [pc, #264]	; (800817c <main+0x344>)
 8008072:	bf08      	it	eq
 8008074:	461a      	moveq	r2, r3
 8008076:	4942      	ldr	r1, [pc, #264]	; (8008180 <main+0x348>)
 8008078:	a850      	add	r0, sp, #320	; 0x140
 800807a:	f009 fa8b 	bl	8011594 <DisplayUdf::SetTitle(char const*, ...)>
 800807e:	2206      	movs	r2, #6
 8008080:	2102      	movs	r1, #2
 8008082:	a850      	add	r0, sp, #320	; 0x140
 8008084:	f009 fa99 	bl	80115ba <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008088:	2202      	movs	r2, #2
 800808a:	2103      	movs	r1, #3
 800808c:	a850      	add	r0, sp, #320	; 0x140
 800808e:	f009 fa94 	bl	80115ba <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8008092:	2203      	movs	r2, #3
 8008094:	2104      	movs	r1, #4
 8008096:	a850      	add	r0, sp, #320	; 0x140
 8008098:	f009 fa8f 	bl	80115ba <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 800809c:	2204      	movs	r2, #4
 800809e:	2105      	movs	r1, #5
 80080a0:	a850      	add	r0, sp, #320	; 0x140
 80080a2:	f009 fa8a 	bl	80115ba <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80080a6:	2207      	movs	r2, #7
 80080a8:	2106      	movs	r1, #6
 80080aa:	a850      	add	r0, sp, #320	; 0x140
 80080ac:	f009 fa85 	bl	80115ba <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80080b0:	a80e      	add	r0, sp, #56	; 0x38
 80080b2:	f006 fd91 	bl	800ebd8 <StoreDisplayUdf::StoreDisplayUdf()>
 80080b6:	a90e      	add	r1, sp, #56	; 0x38
 80080b8:	a844      	add	r0, sp, #272	; 0x110
 80080ba:	f009 fbff 	bl	80118bc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80080be:	a844      	add	r0, sp, #272	; 0x110
 80080c0:	f009 fc09 	bl	80118d6 <DisplayUdfParams::Load()>
 80080c4:	b130      	cbz	r0, 80080d4 <main+0x29c>
 80080c6:	a844      	add	r0, sp, #272	; 0x110
 80080c8:	f009 fd70 	bl	8011bac <DisplayUdfParams::Dump()>
 80080cc:	a950      	add	r1, sp, #320	; 0x140
 80080ce:	a844      	add	r0, sp, #272	; 0x110
 80080d0:	f009 fd39 	bl	8011b46 <DisplayUdfParams::Set(DisplayUdf*)>
 80080d4:	a9bd      	add	r1, sp, #756	; 0x2f4
 80080d6:	a850      	add	r0, sp, #320	; 0x140
 80080d8:	f009 fe28 	bl	8011d2c <DisplayUdf::Show(ArtNetNode*)>
 80080dc:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 80080de:	4623      	mov	r3, r4
 80080e0:	2100      	movs	r1, #0
 80080e2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80080e6:	a828      	add	r0, sp, #160	; 0xa0
 80080e8:	f000 fb0e 	bl	8008708 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 80080ec:	a80f      	add	r0, sp, #60	; 0x3c
 80080ee:	f006 feef 	bl	800eed0 <StoreRemoteConfig::StoreRemoteConfig()>
 80080f2:	a90f      	add	r1, sp, #60	; 0x3c
 80080f4:	a831      	add	r0, sp, #196	; 0xc4
 80080f6:	f000 fe01 	bl	8008cfc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 80080fa:	a831      	add	r0, sp, #196	; 0xc4
 80080fc:	f000 fe08 	bl	8008d10 <RemoteConfigParams::Load()>
 8008100:	b130      	cbz	r0, 8008110 <main+0x2d8>
 8008102:	a831      	add	r0, sp, #196	; 0xc4
 8008104:	f000 ff4b 	bl	8008f9e <RemoteConfigParams::Dump()>
 8008108:	a928      	add	r1, sp, #160	; 0xa0
 800810a:	a831      	add	r0, sp, #196	; 0xc4
 800810c:	f000 ff27 	bl	8008f5e <RemoteConfigParams::Set(RemoteConfig*)>
 8008110:	a808      	add	r0, sp, #32
 8008112:	f006 fcdb 	bl	800eacc <SpiFlashStore::Flash()>
 8008116:	2800      	cmp	r0, #0
 8008118:	d1fa      	bne.n	8008110 <main+0x2d8>
 800811a:	2303      	movs	r3, #3
 800811c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8008120:	4918      	ldr	r1, [pc, #96]	; (8008184 <main+0x34c>)
 8008122:	a850      	add	r0, sp, #320	; 0x140
 8008124:	f7ff fdf5 	bl	8007d12 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008128:	e02e      	b.n	8008188 <main+0x350>
 800812a:	bf00      	nop
 800812c:	080153b6 	stmdaeq	r1, {r1, r2, r4, r5, r7, r8, r9, ip, lr}
 8008130:	080153bf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, r9, ip, lr}
 8008134:	080154a1 	stmdaeq	r1, {r0, r5, r7, sl, ip, lr}
 8008138:	40011000 	andmi	r1, r1, r0
 800813c:	080153cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, ip, lr}
 8008140:	0801545c 	stmdaeq	r1, {r2, r3, r4, r6, sl, ip, lr}
 8008144:	2000a140 	andcs	sl, r0, r0, asr #2
 8008148:	08016e35 	stmdaeq	r1, {r0, r2, r4, r5, r9, sl, fp, sp, lr}
 800814c:	08016e24 	stmdaeq	r1, {r2, r5, r9, sl, fp, sp, lr}
 8008150:	080153ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, ip, lr}
 8008154:	0801540f 	stmdaeq	r1, {r0, r1, r2, r3, sl, ip, lr}
 8008158:	08015408 	stmdaeq	r1, {r3, sl, ip, lr}
 800815c:	080165bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, r8, sl, sp, lr}
 8008160:	08015470 	stmdaeq	r1, {r4, r5, r6, sl, ip, lr}
 8008164:	08016b78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, fp, sp, lr}
 8008168:	20009b68 	andcs	r9, r0, r8, ror #22
 800816c:	2000000c 	andcs	r0, r0, ip
 8008170:	080165d1 	stmdaeq	r1, {r0, r4, r6, r7, r8, sl, sp, lr}
 8008174:	20000df4 	strdcs	r0, [r0], -r4
 8008178:	08015422 	stmdaeq	r1, {r1, r5, sl, ip, lr}
 800817c:	080153a1 	stmdaeq	r1, {r0, r5, r7, r8, r9, ip, lr}
 8008180:	08015426 	stmdaeq	r1, {r1, r2, r5, sl, ip, lr}
 8008184:	080165ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, sl, sp, lr}
 8008188:	a8bc      	add	r0, sp, #752	; 0x2f0
 800818a:	f001 fcab 	bl	8009ae4 <ArtNet4Node::Start()>
 800818e:	f248 0280 	movw	r2, #32896	; 0x8080
 8008192:	2302      	movs	r3, #2
 8008194:	496d      	ldr	r1, [pc, #436]	; (800834c <main+0x514>)
 8008196:	a850      	add	r0, sp, #320	; 0x140
 8008198:	f7ff fdbb 	bl	8007d12 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800819c:	2102      	movs	r1, #2
 800819e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80081a2:	f00b fab7 	bl	8013714 <fwdgt_config>
 80081a6:	2801      	cmp	r0, #1
 80081a8:	bf0c      	ite	eq
 80081aa:	2201      	moveq	r2, #1
 80081ac:	2200      	movne	r2, #0
 80081ae:	ab05      	add	r3, sp, #20
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	d101      	bne.n	80081b8 <main+0x380>
 80081b4:	f00b fa9e 	bl	80136f4 <fwdgt_enable>
 80081b8:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8008350 <main+0x518>
 80081bc:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8008354 <main+0x51c>
 80081c0:	f8df a194 	ldr.w	sl, [pc, #404]	; 8008358 <main+0x520>
 80081c4:	f00b fa9e 	bl	8013704 <fwdgt_counter_reload>
 80081c8:	f7ff f9aa 	bl	8007520 <net_handle>
 80081cc:	a8bc      	add	r0, sp, #752	; 0x2f0
 80081ce:	f001 fcad 	bl	8009b2c <ArtNet4Node::Run()>
 80081d2:	a828      	add	r0, sp, #160	; 0xa0
 80081d4:	f000 fc42 	bl	8008a5c <RemoteConfig::Run()>
 80081d8:	a808      	add	r0, sp, #32
 80081da:	f006 fc77 	bl	800eacc <SpiFlashStore::Flash()>
 80081de:	2d00      	cmp	r5, #0
 80081e0:	d036      	beq.n	8008250 <main+0x418>
 80081e2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80081e6:	495a      	ldr	r1, [pc, #360]	; (8008350 <main+0x518>)
 80081e8:	f899 0000 	ldrb.w	r0, [r9]
 80081ec:	aa10      	add	r2, sp, #64	; 0x40
 80081ee:	f007 fc4b 	bl	800fa88 <udp_recv2>
 80081f2:	f1a0 030b 	sub.w	r3, r0, #11
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2b05      	cmp	r3, #5
 80081fa:	4604      	mov	r4, r0
 80081fc:	d828      	bhi.n	8008250 <main+0x418>
 80081fe:	f8d8 6000 	ldr.w	r6, [r8]
 8008202:	2204      	movs	r2, #4
 8008204:	4631      	mov	r1, r6
 8008206:	4650      	mov	r0, sl
 8008208:	f7ff fcad 	bl	8007b66 <memcmp>
 800820c:	bb00      	cbnz	r0, 8008250 <main+0x418>
 800820e:	1933      	adds	r3, r6, r4
 8008210:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008214:	f106 0b04 	add.w	fp, r6, #4
 8008218:	2b0a      	cmp	r3, #10
 800821a:	bf04      	itt	eq
 800821c:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8008220:	b2a4      	uxtheq	r4, r4
 8008222:	2c0a      	cmp	r4, #10
 8008224:	d042      	beq.n	80082ac <main+0x474>
 8008226:	2c0e      	cmp	r4, #14
 8008228:	d840      	bhi.n	80082ac <main+0x474>
 800822a:	2206      	movs	r2, #6
 800822c:	4659      	mov	r1, fp
 800822e:	484b      	ldr	r0, [pc, #300]	; (800835c <main+0x524>)
 8008230:	f7ff fc99 	bl	8007b66 <memcmp>
 8008234:	2800      	cmp	r0, #0
 8008236:	d139      	bne.n	80082ac <main+0x474>
 8008238:	2104      	movs	r1, #4
 800823a:	f106 000a 	add.w	r0, r6, #10
 800823e:	f7ff fca7 	bl	8007b90 <dmxconfigudp::atoi(char const*, unsigned int)>
 8008242:	285b      	cmp	r0, #91	; 0x5b
 8008244:	4601      	mov	r1, r0
 8008246:	d903      	bls.n	8008250 <main+0x418>
 8008248:	4b45      	ldr	r3, [pc, #276]	; (8008360 <main+0x528>)
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	f006 f98e 	bl	800e56c <Dmx::SetDmxBreakTime(unsigned int)>
 8008250:	a809      	add	r0, sp, #36	; 0x24
 8008252:	f008 f863 	bl	801031c <MDNS::Run()>
 8008256:	a83a      	add	r0, sp, #232	; 0xe8
 8008258:	f001 f9e6 	bl	8009628 <HttpDaemon::Run()>
 800825c:	9a55      	ldr	r2, [sp, #340]	; 0x154
 800825e:	b16a      	cbz	r2, 800827c <main+0x444>
 8008260:	f89d 3150 	ldrb.w	r3, [sp, #336]	; 0x150
 8008264:	2b00      	cmp	r3, #0
 8008266:	d16b      	bne.n	8008340 <main+0x508>
 8008268:	4b3e      	ldr	r3, [pc, #248]	; (8008364 <main+0x52c>)
 800826a:	9951      	ldr	r1, [sp, #324]	; 0x144
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	1a5b      	subs	r3, r3, r1
 8008270:	429a      	cmp	r2, r3
 8008272:	d203      	bcs.n	800827c <main+0x444>
 8008274:	2101      	movs	r1, #1
 8008276:	a850      	add	r0, sp, #320	; 0x140
 8008278:	f7ff fd74 	bl	8007d64 <Display::SetSleep(bool)>
 800827c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800827e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008280:	2c00      	cmp	r4, #0
 8008282:	d09f      	beq.n	80081c4 <main+0x38c>
 8008284:	4937      	ldr	r1, [pc, #220]	; (8008364 <main+0x52c>)
 8008286:	6958      	ldr	r0, [r3, #20]
 8008288:	680a      	ldr	r2, [r1, #0]
 800828a:	1a12      	subs	r2, r2, r0
 800828c:	4294      	cmp	r4, r2
 800828e:	d899      	bhi.n	80081c4 <main+0x38c>
 8008290:	680a      	ldr	r2, [r1, #0]
 8008292:	615a      	str	r2, [r3, #20]
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	2a01      	cmp	r2, #1
 8008298:	f082 0101 	eor.w	r1, r2, #1
 800829c:	6119      	str	r1, [r3, #16]
 800829e:	bf16      	itet	ne
 80082a0:	2301      	movne	r3, #1
 80082a2:	617a      	streq	r2, [r7, #20]
 80082a4:	613b      	strne	r3, [r7, #16]
 80082a6:	e78d      	b.n	80081c4 <main+0x38c>
 80082a8:	4a2f      	ldr	r2, [pc, #188]	; (8008368 <main+0x530>)
 80082aa:	e6e4      	b.n	8008076 <main+0x23e>
 80082ac:	2204      	movs	r2, #4
 80082ae:	4659      	mov	r1, fp
 80082b0:	482e      	ldr	r0, [pc, #184]	; (800836c <main+0x534>)
 80082b2:	f7ff fc58 	bl	8007b66 <memcmp>
 80082b6:	b978      	cbnz	r0, 80082d8 <main+0x4a0>
 80082b8:	2107      	movs	r1, #7
 80082ba:	f106 0008 	add.w	r0, r6, #8
 80082be:	f7ff fc67 	bl	8007b90 <dmxconfigudp::atoi(char const*, unsigned int)>
 80082c2:	4b2b      	ldr	r3, [pc, #172]	; (8008370 <main+0x538>)
 80082c4:	f1a0 020c 	sub.w	r2, r0, #12
 80082c8:	429a      	cmp	r2, r3
 80082ca:	4601      	mov	r1, r0
 80082cc:	d8c0      	bhi.n	8008250 <main+0x418>
 80082ce:	4b24      	ldr	r3, [pc, #144]	; (8008360 <main+0x528>)
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f006 f955 	bl	800e580 <Dmx::SetDmxMabTime(unsigned int)>
 80082d6:	e7bb      	b.n	8008250 <main+0x418>
 80082d8:	2c0c      	cmp	r4, #12
 80082da:	d916      	bls.n	800830a <main+0x4d2>
 80082dc:	2c0e      	cmp	r4, #14
 80082de:	d82c      	bhi.n	800833a <main+0x502>
 80082e0:	2208      	movs	r2, #8
 80082e2:	4659      	mov	r1, fp
 80082e4:	4823      	ldr	r0, [pc, #140]	; (8008374 <main+0x53c>)
 80082e6:	f7ff fc3e 	bl	8007b66 <memcmp>
 80082ea:	bb30      	cbnz	r0, 800833a <main+0x502>
 80082ec:	2102      	movs	r1, #2
 80082ee:	f106 000c 	add.w	r0, r6, #12
 80082f2:	f7ff fc4d 	bl	8007b90 <dmxconfigudp::atoi(char const*, unsigned int)>
 80082f6:	4601      	mov	r1, r0
 80082f8:	b110      	cbz	r0, 8008300 <main+0x4c8>
 80082fa:	4b1f      	ldr	r3, [pc, #124]	; (8008378 <main+0x540>)
 80082fc:	fbb3 f1f0 	udiv	r1, r3, r0
 8008300:	4b17      	ldr	r3, [pc, #92]	; (8008360 <main+0x528>)
 8008302:	6818      	ldr	r0, [r3, #0]
 8008304:	f006 f902 	bl	800e50c <Dmx::SetDmxPeriodTime(unsigned int)>
 8008308:	e7a2      	b.n	8008250 <main+0x418>
 800830a:	2c0a      	cmp	r4, #10
 800830c:	d0a0      	beq.n	8008250 <main+0x418>
 800830e:	2206      	movs	r2, #6
 8008310:	4659      	mov	r1, fp
 8008312:	481a      	ldr	r0, [pc, #104]	; (800837c <main+0x544>)
 8008314:	f7ff fc27 	bl	8007b66 <memcmp>
 8008318:	2800      	cmp	r0, #0
 800831a:	d199      	bne.n	8008250 <main+0x418>
 800831c:	2103      	movs	r1, #3
 800831e:	f106 000a 	add.w	r0, r6, #10
 8008322:	f7ff fc35 	bl	8007b90 <dmxconfigudp::atoi(char const*, unsigned int)>
 8008326:	1e83      	subs	r3, r0, #2
 8008328:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800832c:	d890      	bhi.n	8008250 <main+0x418>
 800832e:	4b0c      	ldr	r3, [pc, #48]	; (8008360 <main+0x528>)
 8008330:	b281      	uxth	r1, r0
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	f006 f92e 	bl	800e594 <Dmx::SetDmxSlots(unsigned short)>
 8008338:	e78a      	b.n	8008250 <main+0x418>
 800833a:	2c0d      	cmp	r4, #13
 800833c:	d188      	bne.n	8008250 <main+0x418>
 800833e:	e7e6      	b.n	800830e <main+0x4d6>
 8008340:	f7ff fd30 	bl	8007da4 <display::timeout::gpio_renew()>
 8008344:	2800      	cmp	r0, #0
 8008346:	d099      	beq.n	800827c <main+0x444>
 8008348:	2100      	movs	r1, #0
 800834a:	e794      	b.n	8008276 <main+0x43e>
 800834c:	080165e7 	stmdaeq	r1, {r0, r1, r2, r5, r6, r7, r8, sl, sp, lr}
 8008350:	20001240 	andcs	r1, r0, r0, asr #4
 8008354:	2000000c 	andcs	r0, r0, ip
 8008358:	08015433 	stmdaeq	r1, {r0, r1, r4, r5, sl, ip, lr}
 800835c:	08015438 	stmdaeq	r1, {r3, r4, r5, sl, ip, lr}
 8008360:	20001230 	andcs	r1, r0, r0, lsr r2
 8008364:	2000a24c 	andcs	sl, r0, ip, asr #4
 8008368:	080153ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, ip, lr}
 800836c:	0801543f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, sl, ip, lr}
 8008370:	000f4234 	andeq	r4, pc, r4, lsr r2	; <UNPREDICTABLE>
 8008374:	08015444 	stmdaeq	r1, {r2, r6, sl, ip, lr}
 8008378:	000f4240 	andeq	r4, pc, r0, asr #4
 800837c:	0801544d 	stmdaeq	r1, {r0, r2, r3, r6, sl, ip, lr}

08008380 <DmxInput::~DmxInput()>:
 8008380:	4770      	bx	lr
	...

08008384 <DmxInput::Start(unsigned int)>:
 8008384:	2301      	movs	r3, #1
 8008386:	b410      	push	{r4}
 8008388:	4808      	ldr	r0, [pc, #32]	; (80083ac <DmxInput::Start(unsigned int)+0x28>)
 800838a:	fa03 f101 	lsl.w	r1, r3, r1
 800838e:	7802      	ldrb	r2, [r0, #0]
 8008390:	ea31 0402 	bics.w	r4, r1, r2
 8008394:	d008      	beq.n	80083a8 <DmxInput::Start(unsigned int)+0x24>
 8008396:	430a      	orrs	r2, r1
 8008398:	7002      	strb	r2, [r0, #0]
 800839a:	4805      	ldr	r0, [pc, #20]	; (80083b0 <DmxInput::Start(unsigned int)+0x2c>)
 800839c:	461a      	mov	r2, r3
 800839e:	2100      	movs	r1, #0
 80083a0:	6800      	ldr	r0, [r0, #0]
 80083a2:	bc10      	pop	{r4}
 80083a4:	f005 bfa6 	b.w	800e2f4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80083a8:	bc10      	pop	{r4}
 80083aa:	4770      	bx	lr
 80083ac:	200000f8 	strdcs	r0, [r0], -r8
 80083b0:	20001230 	andcs	r1, r0, r0, lsr r2

080083b4 <DmxInput::Stop(unsigned int)>:
 80083b4:	2201      	movs	r2, #1
 80083b6:	b410      	push	{r4}
 80083b8:	4809      	ldr	r0, [pc, #36]	; (80083e0 <DmxInput::Stop(unsigned int)+0x2c>)
 80083ba:	fa02 f101 	lsl.w	r1, r2, r1
 80083be:	7803      	ldrb	r3, [r0, #0]
 80083c0:	ea31 0403 	bics.w	r4, r1, r3
 80083c4:	d109      	bne.n	80083da <DmxInput::Stop(unsigned int)+0x26>
 80083c6:	ea23 0301 	bic.w	r3, r3, r1
 80083ca:	7003      	strb	r3, [r0, #0]
 80083cc:	2300      	movs	r3, #0
 80083ce:	4805      	ldr	r0, [pc, #20]	; (80083e4 <DmxInput::Stop(unsigned int)+0x30>)
 80083d0:	4619      	mov	r1, r3
 80083d2:	6800      	ldr	r0, [r0, #0]
 80083d4:	bc10      	pop	{r4}
 80083d6:	f005 bf8d 	b.w	800e2f4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 80083da:	bc10      	pop	{r4}
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	200000f8 	strdcs	r0, [r0], -r8
 80083e4:	20001230 	andcs	r1, r0, r0, lsr r2

080083e8 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	4f0b      	ldr	r7, [pc, #44]	; (8008418 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x30>)
 80083ec:	2100      	movs	r1, #0
 80083ee:	6838      	ldr	r0, [r7, #0]
 80083f0:	461e      	mov	r6, r3
 80083f2:	4615      	mov	r5, r2
 80083f4:	f006 f954 	bl	800e6a0 <Dmx::GetDmxAvailable(unsigned int)>
 80083f8:	2100      	movs	r1, #0
 80083fa:	4604      	mov	r4, r0
 80083fc:	6838      	ldr	r0, [r7, #0]
 80083fe:	f006 f963 	bl	800e6c8 <Dmx::GetUpdatesPerSecond(unsigned int)>
 8008402:	6030      	str	r0, [r6, #0]
 8008404:	b12c      	cbz	r4, 8008412 <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x2a>
 8008406:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 800840a:	3401      	adds	r4, #1
 800840c:	4620      	mov	r0, r4
 800840e:	602b      	str	r3, [r5, #0]
 8008410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008412:	4623      	mov	r3, r4
 8008414:	e7fa      	b.n	800840c <DmxInput::Handler(unsigned int, unsigned int&, unsigned int&)+0x24>
 8008416:	bf00      	nop
 8008418:	20001230 	andcs	r1, r0, r0, lsr r2

0800841c <DmxInput::~DmxInput()>:
 800841c:	b510      	push	{r4, lr}
 800841e:	4604      	mov	r4, r0
 8008420:	f00a fb60 	bl	8012ae4 <operator delete(void*)>
 8008424:	4620      	mov	r0, r4
 8008426:	bd10      	pop	{r4, pc}

08008428 <DmxInput::DmxInput()>:
 8008428:	b510      	push	{r4, lr}
 800842a:	4604      	mov	r4, r0
 800842c:	4b03      	ldr	r3, [pc, #12]	; (800843c <DmxInput::DmxInput()+0x14>)
 800842e:	2100      	movs	r1, #0
 8008430:	6003      	str	r3, [r0, #0]
 8008432:	f7ff ffbf 	bl	80083b4 <DmxInput::Stop(unsigned int)>
 8008436:	4620      	mov	r0, r4
 8008438:	bd10      	pop	{r4, pc}
 800843a:	bf00      	nop
 800843c:	080154b0 	stmdaeq	r1, {r4, r5, r7, sl, ip, lr}

08008440 <RemoteConfig::HandleList()>:
 8008440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008444:	6801      	ldr	r1, [r0, #0]
 8008446:	4604      	mov	r4, r0
 8008448:	2012      	movs	r0, #18
 800844a:	f04f 080c 	mov.w	r8, #12
 800844e:	4a29      	ldr	r2, [pc, #164]	; (80084f4 <RemoteConfig::HandleList()+0xb4>)
 8008450:	4b29      	ldr	r3, [pc, #164]	; (80084f8 <RemoteConfig::HandleList()+0xb8>)
 8008452:	fb00 2201 	mla	r2, r0, r1, r2
 8008456:	6860      	ldr	r0, [r4, #4]
 8008458:	4928      	ldr	r1, [pc, #160]	; (80084fc <RemoteConfig::HandleList()+0xbc>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	fb08 1100 	mla	r1, r8, r0, r1
 8008460:	4e27      	ldr	r6, [pc, #156]	; (8008500 <RemoteConfig::HandleList()+0xc0>)
 8008462:	4828      	ldr	r0, [pc, #160]	; (8008504 <RemoteConfig::HandleList()+0xc4>)
 8008464:	695f      	ldr	r7, [r3, #20]
 8008466:	6835      	ldr	r5, [r6, #0]
 8008468:	f890 9009 	ldrb.w	r9, [r0, #9]
 800846c:	b2fb      	uxtb	r3, r7
 800846e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8008472:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8008476:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800847a:	b089      	sub	sp, #36	; 0x24
 800847c:	3507      	adds	r5, #7
 800847e:	0e3f      	lsrs	r7, r7, #24
 8008480:	f1b9 0f00 	cmp.w	r9, #0
 8008484:	d01d      	beq.n	80084c2 <RemoteConfig::HandleList()+0x82>
 8008486:	3009      	adds	r0, #9
 8008488:	e9cd 2103 	strd	r2, r1, [sp, #12]
 800848c:	e9cd 8005 	strd	r8, r0, [sp, #20]
 8008490:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8008494:	4628      	mov	r0, r5
 8008496:	e9cd e701 	strd	lr, r7, [sp, #4]
 800849a:	4a1b      	ldr	r2, [pc, #108]	; (8008508 <RemoteConfig::HandleList()+0xc8>)
 800849c:	f8cd c000 	str.w	ip, [sp]
 80084a0:	f00a fe3c 	bl	801311c <snprintf>
 80084a4:	69e3      	ldr	r3, [r4, #28]
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	d118      	bne.n	80084dc <RemoteConfig::HandleList()+0x9c>
 80084aa:	f642 1305 	movw	r3, #10501	; 0x2905
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	69a3      	ldr	r3, [r4, #24]
 80084b2:	b282      	uxth	r2, r0
 80084b4:	4629      	mov	r1, r5
 80084b6:	7d20      	ldrb	r0, [r4, #20]
 80084b8:	f007 fb0c 	bl	800fad4 <udp_send>
 80084bc:	b009      	add	sp, #36	; 0x24
 80084be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084c2:	e9cd 1804 	strd	r1, r8, [sp, #16]
 80084c6:	e9cd 7202 	strd	r7, r2, [sp, #8]
 80084ca:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80084ce:	4628      	mov	r0, r5
 80084d0:	e9cd ce00 	strd	ip, lr, [sp]
 80084d4:	4a0d      	ldr	r2, [pc, #52]	; (800850c <RemoteConfig::HandleList()+0xcc>)
 80084d6:	f00a fe21 	bl	801311c <snprintf>
 80084da:	e7e3      	b.n	80084a4 <RemoteConfig::HandleList()+0x64>
 80084dc:	2b06      	cmp	r3, #6
 80084de:	d1ed      	bne.n	80084bc <RemoteConfig::HandleList()+0x7c>
 80084e0:	6833      	ldr	r3, [r6, #0]
 80084e2:	799b      	ldrb	r3, [r3, #6]
 80084e4:	2b2a      	cmp	r3, #42	; 0x2a
 80084e6:	d1e9      	bne.n	80084bc <RemoteConfig::HandleList()+0x7c>
 80084e8:	f642 1305 	movw	r3, #10501	; 0x2905
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084f2:	e7de      	b.n	80084b2 <RemoteConfig::HandleList()+0x72>
 80084f4:	080155af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, sl, ip, lr}
 80084f8:	20009b68 	andcs	r9, r0, r8, ror #22
 80084fc:	08015675 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, sl, ip, lr}
 8008500:	200000fc 	strdcs	r0, [r0], -ip
 8008504:	20000100 	andcs	r0, r0, r0, lsl #2
 8008508:	080154c4 	stmdaeq	r1, {r2, r6, r7, sl, ip, lr}
 800850c:	080154dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, sl, ip, lr}

08008510 <RemoteConfig::HandleDisplayGet()>:
 8008510:	69c3      	ldr	r3, [r0, #28]
 8008512:	2b08      	cmp	r3, #8
 8008514:	d11b      	bne.n	800854e <RemoteConfig::HandleDisplayGet()+0x3e>
 8008516:	4b0e      	ldr	r3, [pc, #56]	; (8008550 <RemoteConfig::HandleDisplayGet()+0x40>)
 8008518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4d0d      	ldr	r5, [pc, #52]	; (8008554 <RemoteConfig::HandleDisplayGet()+0x44>)
 800851e:	7c19      	ldrb	r1, [r3, #16]
 8008520:	4a0d      	ldr	r2, [pc, #52]	; (8008558 <RemoteConfig::HandleDisplayGet()+0x48>)
 8008522:	4b0e      	ldr	r3, [pc, #56]	; (800855c <RemoteConfig::HandleDisplayGet()+0x4c>)
 8008524:	4604      	mov	r4, r0
 8008526:	2900      	cmp	r1, #0
 8008528:	bf18      	it	ne
 800852a:	4613      	movne	r3, r2
 800852c:	6828      	ldr	r0, [r5, #0]
 800852e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008532:	4a0b      	ldr	r2, [pc, #44]	; (8008560 <RemoteConfig::HandleDisplayGet()+0x50>)
 8008534:	f00a fdf2 	bl	801311c <snprintf>
 8008538:	f642 1305 	movw	r3, #10501	; 0x2905
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	b282      	uxth	r2, r0
 8008540:	69a3      	ldr	r3, [r4, #24]
 8008542:	6829      	ldr	r1, [r5, #0]
 8008544:	7d20      	ldrb	r0, [r4, #20]
 8008546:	f007 fac5 	bl	800fad4 <udp_send>
 800854a:	b003      	add	sp, #12
 800854c:	bd30      	pop	{r4, r5, pc}
 800854e:	4770      	bx	lr
 8008550:	2000a140 	andcs	sl, r0, r0, asr #2
 8008554:	200000fc 	strdcs	r0, [r0], -ip
 8008558:	080154f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, sl, ip, lr}
 800855c:	080154f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, sl, ip, lr}
 8008560:	080154fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, sl, ip, lr}

08008564 <RemoteConfig::HandleTftpGet()>:
 8008564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008566:	4604      	mov	r4, r0
 8008568:	f000 fd9e 	bl	80090a8 <RemoteConfig::PlatformHandleTftpGet()>
 800856c:	69e3      	ldr	r3, [r4, #28]
 800856e:	2b05      	cmp	r3, #5
 8008570:	d116      	bne.n	80085a0 <RemoteConfig::HandleTftpGet()+0x3c>
 8008572:	f894 1020 	ldrb.w	r1, [r4, #32]
 8008576:	4d0b      	ldr	r5, [pc, #44]	; (80085a4 <RemoteConfig::HandleTftpGet()+0x40>)
 8008578:	4a0b      	ldr	r2, [pc, #44]	; (80085a8 <RemoteConfig::HandleTftpGet()+0x44>)
 800857a:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <RemoteConfig::HandleTftpGet()+0x48>)
 800857c:	6828      	ldr	r0, [r5, #0]
 800857e:	2900      	cmp	r1, #0
 8008580:	bf08      	it	eq
 8008582:	4613      	moveq	r3, r2
 8008584:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008588:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <RemoteConfig::HandleTftpGet()+0x4c>)
 800858a:	f00a fdc7 	bl	801311c <snprintf>
 800858e:	f642 1305 	movw	r3, #10501	; 0x2905
 8008592:	b282      	uxth	r2, r0
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	6829      	ldr	r1, [r5, #0]
 8008598:	69a3      	ldr	r3, [r4, #24]
 800859a:	7d20      	ldrb	r0, [r4, #20]
 800859c:	f007 fa9a 	bl	800fad4 <udp_send>
 80085a0:	b003      	add	sp, #12
 80085a2:	bd30      	pop	{r4, r5, pc}
 80085a4:	200000fc 	strdcs	r0, [r0], -ip
 80085a8:	080154f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, sl, ip, lr}
 80085ac:	080154f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, sl, ip, lr}
 80085b0:	08015506 	stmdaeq	r1, {r1, r2, r8, sl, ip, lr}

080085b4 <RemoteConfig::HandleVersion()>:
 80085b4:	69c3      	ldr	r3, [r0, #28]
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	d114      	bne.n	80085e4 <RemoteConfig::HandleVersion()+0x30>
 80085ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085bc:	4d0a      	ldr	r5, [pc, #40]	; (80085e8 <RemoteConfig::HandleVersion()+0x34>)
 80085be:	4604      	mov	r4, r0
 80085c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80085c4:	4b09      	ldr	r3, [pc, #36]	; (80085ec <RemoteConfig::HandleVersion()+0x38>)
 80085c6:	4a0a      	ldr	r2, [pc, #40]	; (80085f0 <RemoteConfig::HandleVersion()+0x3c>)
 80085c8:	6828      	ldr	r0, [r5, #0]
 80085ca:	f00a fda7 	bl	801311c <snprintf>
 80085ce:	f642 1305 	movw	r3, #10501	; 0x2905
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	b282      	uxth	r2, r0
 80085d6:	69a3      	ldr	r3, [r4, #24]
 80085d8:	6829      	ldr	r1, [r5, #0]
 80085da:	7d20      	ldrb	r0, [r4, #20]
 80085dc:	f007 fa7a 	bl	800fad4 <udp_send>
 80085e0:	b003      	add	sp, #12
 80085e2:	bd30      	pop	{r4, r5, pc}
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	200000fc 	strdcs	r0, [r0], -ip
 80085ec:	2000a1e6 	andcs	sl, r0, r6, ror #3
 80085f0:	0801550f 	stmdaeq	r1, {r0, r1, r2, r3, r8, sl, ip, lr}

080085f4 <RemoteConfig::HandleUptime()>:
 80085f4:	7bc3      	ldrb	r3, [r0, #15]
 80085f6:	b1e3      	cbz	r3, 8008632 <RemoteConfig::HandleUptime()+0x3e>
 80085f8:	4b0e      	ldr	r3, [pc, #56]	; (8008634 <RemoteConfig::HandleUptime()+0x40>)
 80085fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	69c3      	ldr	r3, [r0, #28]
 8008600:	4604      	mov	r4, r0
 8008602:	2b07      	cmp	r3, #7
 8008604:	d113      	bne.n	800862e <RemoteConfig::HandleUptime()+0x3a>
 8008606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800860a:	4d0b      	ldr	r5, [pc, #44]	; (8008638 <RemoteConfig::HandleUptime()+0x44>)
 800860c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008610:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008614:	4a09      	ldr	r2, [pc, #36]	; (800863c <RemoteConfig::HandleUptime()+0x48>)
 8008616:	6828      	ldr	r0, [r5, #0]
 8008618:	f00a fd80 	bl	801311c <snprintf>
 800861c:	f642 1305 	movw	r3, #10501	; 0x2905
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	b282      	uxth	r2, r0
 8008624:	69a3      	ldr	r3, [r4, #24]
 8008626:	6829      	ldr	r1, [r5, #0]
 8008628:	7d20      	ldrb	r0, [r4, #20]
 800862a:	f007 fa53 	bl	800fad4 <udp_send>
 800862e:	b003      	add	sp, #12
 8008630:	bd30      	pop	{r4, r5, pc}
 8008632:	4770      	bx	lr
 8008634:	2000a24c 	andcs	sl, r0, ip, asr #4
 8008638:	200000fc 	strdcs	r0, [r0], -ip
 800863c:	0801551a 	stmdaeq	r1, {r1, r3, r4, r8, sl, ip, lr}

08008640 <Display::Status(Display7SegmentMessage)>:
 8008640:	7c43      	ldrb	r3, [r0, #17]
 8008642:	b1bb      	cbz	r3, 8008674 <Display::Status(Display7SegmentMessage)+0x34>
 8008644:	b513      	push	{r0, r1, r4, lr}
 8008646:	2312      	movs	r3, #18
 8008648:	43c9      	mvns	r1, r1
 800864a:	4604      	mov	r4, r0
 800864c:	f88d 3004 	strb.w	r3, [sp, #4]
 8008650:	7a00      	ldrb	r0, [r0, #8]
 8008652:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8008656:	f88d 3005 	strb.w	r3, [sp, #5]
 800865a:	f88d 1006 	strb.w	r1, [sp, #6]
 800865e:	f00b fce3 	bl	8014028 <gd32_i2c_set_address>
 8008662:	68e0      	ldr	r0, [r4, #12]
 8008664:	f00b fcd8 	bl	8014018 <gd32_i2c_set_baudrate>
 8008668:	2103      	movs	r1, #3
 800866a:	a801      	add	r0, sp, #4
 800866c:	f00b fce2 	bl	8014034 <gd32_i2c_write>
 8008670:	b002      	add	sp, #8
 8008672:	bd10      	pop	{r4, pc}
 8008674:	4770      	bx	lr
	...

08008678 <RemoteConfig::HandleDisplaySet()>:
 8008678:	b508      	push	{r3, lr}
 800867a:	69c3      	ldr	r3, [r0, #28]
 800867c:	2b09      	cmp	r3, #9
 800867e:	d10a      	bne.n	8008696 <RemoteConfig::HandleDisplaySet()+0x1e>
 8008680:	4b05      	ldr	r3, [pc, #20]	; (8008698 <RemoteConfig::HandleDisplaySet()+0x20>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	7a59      	ldrb	r1, [r3, #9]
 8008686:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800868a:	4259      	negs	r1, r3
 800868c:	4159      	adcs	r1, r3
 800868e:	4b03      	ldr	r3, [pc, #12]	; (800869c <RemoteConfig::HandleDisplaySet()+0x24>)
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	f7ff fb67 	bl	8007d64 <Display::SetSleep(bool)>
 8008696:	bd08      	pop	{r3, pc}
 8008698:	200000fc 	strdcs	r0, [r0], -ip
 800869c:	2000a140 	andcs	sl, r0, r0, asr #2

080086a0 <RemoteConfig::HandleTftpSet()>:
 80086a0:	69c3      	ldr	r3, [r0, #28]
 80086a2:	2b06      	cmp	r3, #6
 80086a4:	d127      	bne.n	80086f6 <RemoteConfig::HandleTftpSet()+0x56>
 80086a6:	b570      	push	{r4, r5, r6, lr}
 80086a8:	4b13      	ldr	r3, [pc, #76]	; (80086f8 <RemoteConfig::HandleTftpSet()+0x58>)
 80086aa:	4e14      	ldr	r6, [pc, #80]	; (80086fc <RemoteConfig::HandleTftpSet()+0x5c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4604      	mov	r4, r0
 80086b0:	799b      	ldrb	r3, [r3, #6]
 80086b2:	6835      	ldr	r5, [r6, #0]
 80086b4:	2b30      	cmp	r3, #48	; 0x30
 80086b6:	bf14      	ite	ne
 80086b8:	2301      	movne	r3, #1
 80086ba:	2300      	moveq	r3, #0
 80086bc:	f880 3020 	strb.w	r3, [r0, #32]
 80086c0:	d012      	beq.n	80086e8 <RemoteConfig::HandleTftpSet()+0x48>
 80086c2:	4628      	mov	r0, r5
 80086c4:	2100      	movs	r1, #0
 80086c6:	f7ff fb4d 	bl	8007d64 <Display::SetSleep(bool)>
 80086ca:	6835      	ldr	r5, [r6, #0]
 80086cc:	490c      	ldr	r1, [pc, #48]	; (8008700 <RemoteConfig::HandleTftpSet()+0x60>)
 80086ce:	4628      	mov	r0, r5
 80086d0:	f7ff faea 	bl	8007ca8 <Display::TextStatus(char const*)>
 80086d4:	f244 0171 	movw	r1, #16497	; 0x4071
 80086d8:	4628      	mov	r0, r5
 80086da:	f7ff ffb1 	bl	8008640 <Display::Status(Display7SegmentMessage)>
 80086de:	4620      	mov	r0, r4
 80086e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086e4:	f000 bcd8 	b.w	8009098 <RemoteConfig::PlatformHandleTftpSet()>
 80086e8:	4906      	ldr	r1, [pc, #24]	; (8008704 <RemoteConfig::HandleTftpSet()+0x64>)
 80086ea:	4628      	mov	r0, r5
 80086ec:	f7ff fadc 	bl	8007ca8 <Display::TextStatus(char const*)>
 80086f0:	f248 0171 	movw	r1, #32881	; 0x8071
 80086f4:	e7f0      	b.n	80086d8 <RemoteConfig::HandleTftpSet()+0x38>
 80086f6:	4770      	bx	lr
 80086f8:	200000fc 	strdcs	r0, [r0], -ip
 80086fc:	2000a140 	andcs	sl, r0, r0, asr #2
 8008700:	08015527 	stmdaeq	r1, {r0, r1, r2, r5, r8, sl, ip, lr}
 8008704:	08015539 	stmdaeq	r1, {r0, r3, r4, r5, r8, sl, ip, lr}

08008708 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 8008708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800870c:	2500      	movs	r5, #0
 800870e:	461f      	mov	r7, r3
 8008710:	6083      	str	r3, [r0, #8]
 8008712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008716:	4690      	mov	r8, r2
 8008718:	4689      	mov	r9, r1
 800871a:	4e12      	ldr	r6, [pc, #72]	; (8008764 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x5c>)
 800871c:	e9c0 3505 	strd	r3, r5, [r0, #20]
 8008720:	f8df a044 	ldr.w	sl, [pc, #68]	; 8008768 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x60>
 8008724:	4b11      	ldr	r3, [pc, #68]	; (800876c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x64>)
 8008726:	e9c0 1200 	strd	r1, r2, [r0]
 800872a:	4604      	mov	r4, r0
 800872c:	6018      	str	r0, [r3, #0]
 800872e:	4631      	mov	r1, r6
 8008730:	60c5      	str	r5, [r0, #12]
 8008732:	8205      	strh	r5, [r0, #16]
 8008734:	61c5      	str	r5, [r0, #28]
 8008736:	f880 5020 	strb.w	r5, [r0, #32]
 800873a:	f8da 0000 	ldr.w	r0, [sl]
 800873e:	f007 fe97 	bl	8010470 <Network::MacAddressCopyTo(unsigned char*)>
 8008742:	f642 1105 	movw	r1, #10501	; 0x2905
 8008746:	f8da 0000 	ldr.w	r0, [sl]
 800874a:	f886 9006 	strb.w	r9, [r6, #6]
 800874e:	f886 8007 	strb.w	r8, [r6, #7]
 8008752:	7237      	strb	r7, [r6, #8]
 8008754:	7275      	strb	r5, [r6, #9]
 8008756:	f007 fe85 	bl	8010464 <Network::Begin(unsigned short)>
 800875a:	6160      	str	r0, [r4, #20]
 800875c:	4620      	mov	r0, r4
 800875e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008762:	bf00      	nop
 8008764:	20000100 	andcs	r0, r0, r0, lsl #2
 8008768:	20009b68 	andcs	r9, r0, r8, ror #22
 800876c:	20000124 	andcs	r0, r0, r4, lsr #2

08008770 <RemoteConfig::GetStringNode() const>:
 8008770:	2012      	movs	r0, #18
 8008772:	4b03      	ldr	r3, [pc, #12]	; (8008780 <RemoteConfig::GetStringNode() const+0x10>)
 8008774:	799a      	ldrb	r2, [r3, #6]
 8008776:	4b03      	ldr	r3, [pc, #12]	; (8008784 <RemoteConfig::GetStringNode() const+0x14>)
 8008778:	fb00 3002 	mla	r0, r0, r2, r3
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	20000100 	andcs	r0, r0, r0, lsl #2
 8008784:	080155af 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, sl, ip, lr}

08008788 <RemoteConfig::GetStringOutput() const>:
 8008788:	200c      	movs	r0, #12
 800878a:	4b03      	ldr	r3, [pc, #12]	; (8008798 <RemoteConfig::GetStringOutput() const+0x10>)
 800878c:	79da      	ldrb	r2, [r3, #7]
 800878e:	4b03      	ldr	r3, [pc, #12]	; (800879c <RemoteConfig::GetStringOutput() const+0x14>)
 8008790:	fb00 3002 	mla	r0, r0, r2, r3
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	20000100 	andcs	r0, r0, r0, lsl #2
 800879c:	08015675 	stmdaeq	r1, {r0, r2, r4, r5, r6, r9, sl, ip, lr}

080087a0 <RemoteConfig::SetDisable(bool)>:
 80087a0:	b538      	push	{r3, r4, r5, lr}
 80087a2:	4604      	mov	r4, r0
 80087a4:	7b03      	ldrb	r3, [r0, #12]
 80087a6:	b161      	cbz	r1, 80087c2 <RemoteConfig::SetDisable(bool)+0x22>
 80087a8:	b953      	cbnz	r3, 80087c0 <RemoteConfig::SetDisable(bool)+0x20>
 80087aa:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <RemoteConfig::SetDisable(bool)+0x3c>)
 80087ac:	f642 1105 	movw	r1, #10501	; 0x2905
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	f007 fe5a 	bl	801046a <Network::End(unsigned short)>
 80087b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087ba:	6163      	str	r3, [r4, #20]
 80087bc:	2301      	movs	r3, #1
 80087be:	7323      	strb	r3, [r4, #12]
 80087c0:	bd38      	pop	{r3, r4, r5, pc}
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0fc      	beq.n	80087c0 <RemoteConfig::SetDisable(bool)+0x20>
 80087c6:	4b05      	ldr	r3, [pc, #20]	; (80087dc <RemoteConfig::SetDisable(bool)+0x3c>)
 80087c8:	460d      	mov	r5, r1
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	f642 1105 	movw	r1, #10501	; 0x2905
 80087d0:	f007 fe48 	bl	8010464 <Network::Begin(unsigned short)>
 80087d4:	7325      	strb	r5, [r4, #12]
 80087d6:	6160      	str	r0, [r4, #20]
 80087d8:	e7f2      	b.n	80087c0 <RemoteConfig::SetDisable(bool)+0x20>
 80087da:	bf00      	nop
 80087dc:	20009b68 	andcs	r9, r0, r8, ror #22

080087e0 <RemoteConfig::SetDisplayName(char const*)>:
 80087e0:	2217      	movs	r2, #23
 80087e2:	4809      	ldr	r0, [pc, #36]	; (8008808 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 80087e4:	b508      	push	{r3, lr}
 80087e6:	1e4b      	subs	r3, r1, #1
 80087e8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80087ec:	b911      	cbnz	r1, 80087f4 <RemoteConfig::SetDisplayName(char const*)+0x14>
 80087ee:	f00a fa53 	bl	8012c98 <memset>
 80087f2:	e003      	b.n	80087fc <RemoteConfig::SetDisplayName(char const*)+0x1c>
 80087f4:	3a01      	subs	r2, #1
 80087f6:	f800 1b01 	strb.w	r1, [r0], #1
 80087fa:	d1f5      	bne.n	80087e8 <RemoteConfig::SetDisplayName(char const*)+0x8>
 80087fc:	2200      	movs	r2, #0
 80087fe:	4b03      	ldr	r3, [pc, #12]	; (800880c <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 8008800:	f883 2020 	strb.w	r2, [r3, #32]
 8008804:	bd08      	pop	{r3, pc}
 8008806:	bf00      	nop
 8008808:	20000109 	andcs	r0, r0, r9, lsl #2
 800880c:	20000100 	andcs	r0, r0, r0, lsl #2

08008810 <RemoteConfig::HandleGet(void*, unsigned int)>:
 8008810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	4616      	mov	r6, r2
 8008816:	460d      	mov	r5, r1
 8008818:	4f28      	ldr	r7, [pc, #160]	; (80088bc <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800881a:	b085      	sub	sp, #20
 800881c:	b9a9      	cbnz	r1, 800884a <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800881e:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	aa03      	add	r2, sp, #12
 8008826:	3105      	adds	r1, #5
 8008828:	9303      	str	r3, [sp, #12]
 800882a:	f000 fc0b 	bl	8009044 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800882e:	1e03      	subs	r3, r0, #0
 8008830:	da1b      	bge.n	800886a <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 8008832:	f642 1305 	movw	r3, #10501	; 0x2905
 8008836:	220b      	movs	r2, #11
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	4921      	ldr	r1, [pc, #132]	; (80088c0 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800883c:	69a3      	ldr	r3, [r4, #24]
 800883e:	7d20      	ldrb	r0, [r4, #20]
 8008840:	f007 f948 	bl	800fad4 <udp_send>
 8008844:	200c      	movs	r0, #12
 8008846:	b005      	add	sp, #20
 8008848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800884a:	9203      	str	r2, [sp, #12]
 800884c:	aa03      	add	r2, sp, #12
 800884e:	6039      	str	r1, [r7, #0]
 8008850:	f000 fbf8 	bl	8009044 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 8008854:	1e03      	subs	r3, r0, #0
 8008856:	da08      	bge.n	800886a <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 8008858:	2e0b      	cmp	r6, #11
 800885a:	4632      	mov	r2, r6
 800885c:	4628      	mov	r0, r5
 800885e:	bf28      	it	cs
 8008860:	220b      	movcs	r2, #11
 8008862:	4917      	ldr	r1, [pc, #92]	; (80088c0 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 8008864:	f00a f9f6 	bl	8012c54 <memcpy>
 8008868:	e7ec      	b.n	8008844 <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 800886a:	221c      	movs	r2, #28
 800886c:	4353      	muls	r3, r2
 800886e:	4915      	ldr	r1, [pc, #84]	; (80088c4 <RemoteConfig::HandleGet(void*, unsigned int)+0xb4>)
 8008870:	18ca      	adds	r2, r1, r3
 8008872:	6852      	ldr	r2, [r2, #4]
 8008874:	58cb      	ldr	r3, [r1, r3]
 8008876:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800887a:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800887e:	07d2      	lsls	r2, r2, #31
 8008880:	bf48      	it	mi
 8008882:	f854 200c 	ldrmi.w	r2, [r4, ip]
 8008886:	a903      	add	r1, sp, #12
 8008888:	bf48      	it	mi
 800888a:	58d3      	ldrmi	r3, [r2, r3]
 800888c:	4798      	blx	r3
 800888e:	b95d      	cbnz	r5, 80088a8 <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 8008890:	f642 1305 	movw	r3, #10501	; 0x2905
 8008894:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	69a3      	ldr	r3, [r4, #24]
 800889e:	7d20      	ldrb	r0, [r4, #20]
 80088a0:	f007 f918 	bl	800fad4 <udp_send>
 80088a4:	9803      	ldr	r0, [sp, #12]
 80088a6:	e7ce      	b.n	8008846 <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 80088a8:	9a03      	ldr	r2, [sp, #12]
 80088aa:	4628      	mov	r0, r5
 80088ac:	42b2      	cmp	r2, r6
 80088ae:	bf28      	it	cs
 80088b0:	4632      	movcs	r2, r6
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	f00a f9d9 	bl	8012c6a <memmove>
 80088b8:	e7f4      	b.n	80088a4 <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 80088ba:	bf00      	nop
 80088bc:	200000fc 	strdcs	r0, [r0], -ip
 80088c0:	0801554c 	stmdaeq	r1, {r2, r3, r6, r8, sl, ip, lr}
 80088c4:	0801583c 	stmdaeq	r1, {r2, r3, r4, r5, fp, ip, lr}

080088c8 <RemoteConfig::HandleGetNoParams()>:
 80088c8:	2200      	movs	r2, #0
 80088ca:	4611      	mov	r1, r2
 80088cc:	f7ff bfa0 	b.w	8008810 <RemoteConfig::HandleGet(void*, unsigned int)>

080088d0 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 80088d0:	b510      	push	{r4, lr}
 80088d2:	460c      	mov	r4, r1
 80088d4:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 80088d6:	b08a      	sub	sp, #40	; 0x28
 80088d8:	6819      	ldr	r1, [r3, #0]
 80088da:	a801      	add	r0, sp, #4
 80088dc:	f000 fa0e 	bl	8008cfc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 80088e0:	4905      	ldr	r1, [pc, #20]	; (80088f8 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 80088e2:	4623      	mov	r3, r4
 80088e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088e8:	6809      	ldr	r1, [r1, #0]
 80088ea:	a801      	add	r0, sp, #4
 80088ec:	f000 fb2a 	bl	8008f44 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 80088f0:	b00a      	add	sp, #40	; 0x28
 80088f2:	bd10      	pop	{r4, pc}
 80088f4:	20002270 	andcs	r2, r0, r0, ror r2
 80088f8:	200000fc 	strdcs	r0, [r0], -ip

080088fc <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 80088fc:	b510      	push	{r4, lr}
 80088fe:	460c      	mov	r4, r1
 8008900:	4b07      	ldr	r3, [pc, #28]	; (8008920 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 8008902:	b09a      	sub	sp, #104	; 0x68
 8008904:	6819      	ldr	r1, [r3, #0]
 8008906:	a801      	add	r0, sp, #4
 8008908:	f008 f84c 	bl	80109a4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800890c:	4905      	ldr	r1, [pc, #20]	; (8008924 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800890e:	4623      	mov	r3, r4
 8008910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008914:	6809      	ldr	r1, [r1, #0]
 8008916:	a801      	add	r0, sp, #4
 8008918:	f008 fa1a 	bl	8010d50 <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800891c:	b01a      	add	sp, #104	; 0x68
 800891e:	bd10      	pop	{r4, pc}
 8008920:	20002268 	andcs	r2, r0, r8, ror #4
 8008924:	200000fc 	strdcs	r0, [r0], -ip

08008928 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 8008928:	b510      	push	{r4, lr}
 800892a:	460c      	mov	r4, r1
 800892c:	4b07      	ldr	r3, [pc, #28]	; (800894c <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 800892e:	b0a4      	sub	sp, #144	; 0x90
 8008930:	6819      	ldr	r1, [r3, #0]
 8008932:	a801      	add	r0, sp, #4
 8008934:	f002 fd7c 	bl	800b430 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8008938:	4905      	ldr	r1, [pc, #20]	; (8008950 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800893a:	4623      	mov	r3, r4
 800893c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008940:	6809      	ldr	r1, [r1, #0]
 8008942:	a801      	add	r0, sp, #4
 8008944:	f003 f922 	bl	800bb8c <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 8008948:	b024      	add	sp, #144	; 0x90
 800894a:	bd10      	pop	{r4, pc}
 800894c:	20002278 	andcs	r2, r0, r8, ror r2
 8008950:	200000fc 	strdcs	r0, [r0], -ip

08008954 <RemoteConfig::HandleGetE131Txt(unsigned int&)>:
 8008954:	b510      	push	{r4, lr}
 8008956:	460c      	mov	r4, r1
 8008958:	4b07      	ldr	r3, [pc, #28]	; (8008978 <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x24>)
 800895a:	b086      	sub	sp, #24
 800895c:	6819      	ldr	r1, [r3, #0]
 800895e:	4668      	mov	r0, sp
 8008960:	f004 f87a 	bl	800ca58 <E131Params::E131Params(E131ParamsStore*)>
 8008964:	4905      	ldr	r1, [pc, #20]	; (800897c <RemoteConfig::HandleGetE131Txt(unsigned int&)+0x28>)
 8008966:	4623      	mov	r3, r4
 8008968:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800896c:	4668      	mov	r0, sp
 800896e:	6809      	ldr	r1, [r1, #0]
 8008970:	f004 fb26 	bl	800cfc0 <E131Params::Save(char*, unsigned int, unsigned int&)>
 8008974:	b006      	add	sp, #24
 8008976:	bd10      	pop	{r4, pc}
 8008978:	2000227c 	andcs	r2, r0, ip, ror r2
 800897c:	200000fc 	strdcs	r0, [r0], -ip

08008980 <RemoteConfig::HandleGetParamsTxt(unsigned int&)>:
 8008980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008982:	460c      	mov	r4, r1
 8008984:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x24>)
 8008986:	4668      	mov	r0, sp
 8008988:	6819      	ldr	r1, [r3, #0]
 800898a:	f005 f843 	bl	800da14 <DmxParams::DmxParams(DmxParamsStore*)>
 800898e:	4906      	ldr	r1, [pc, #24]	; (80089a8 <RemoteConfig::HandleGetParamsTxt(unsigned int&)+0x28>)
 8008990:	4623      	mov	r3, r4
 8008992:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008996:	4668      	mov	r0, sp
 8008998:	6809      	ldr	r1, [r1, #0]
 800899a:	f005 f95d 	bl	800dc58 <DmxParams::Save(char*, unsigned int, unsigned int&)>
 800899e:	b004      	add	sp, #16
 80089a0:	bd10      	pop	{r4, pc}
 80089a2:	bf00      	nop
 80089a4:	20002264 	andcs	r2, r0, r4, ror #4
 80089a8:	200000fc 	strdcs	r0, [r0], -ip

080089ac <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 80089ac:	b510      	push	{r4, lr}
 80089ae:	460c      	mov	r4, r1
 80089b0:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 80089b2:	b08a      	sub	sp, #40	; 0x28
 80089b4:	6819      	ldr	r1, [r3, #0]
 80089b6:	4668      	mov	r0, sp
 80089b8:	f008 ff80 	bl	80118bc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 80089bc:	4905      	ldr	r1, [pc, #20]	; (80089d4 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 80089be:	4623      	mov	r3, r4
 80089c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089c4:	4668      	mov	r0, sp
 80089c6:	6809      	ldr	r1, [r1, #0]
 80089c8:	f009 f8b0 	bl	8011b2c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 80089cc:	b00a      	add	sp, #40	; 0x28
 80089ce:	bd10      	pop	{r4, pc}
 80089d0:	20002260 	andcs	r2, r0, r0, ror #4
 80089d4:	200000fc 	strdcs	r0, [r0], -ip

080089d8 <RemoteConfig::HandleSet(void*, unsigned int)>:
 80089d8:	b530      	push	{r4, r5, lr}
 80089da:	b085      	sub	sp, #20
 80089dc:	4604      	mov	r4, r0
 80089de:	9201      	str	r2, [sp, #4]
 80089e0:	b9d1      	cbnz	r1, 8008a18 <RemoteConfig::HandleSet(void*, unsigned int)+0x40>
 80089e2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80089e6:	9303      	str	r3, [sp, #12]
 80089e8:	4b19      	ldr	r3, [pc, #100]	; (8008a50 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 80089ea:	aa03      	add	r2, sp, #12
 80089ec:	6819      	ldr	r1, [r3, #0]
 80089ee:	3101      	adds	r1, #1
 80089f0:	f000 fb28 	bl	8009044 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	db0d      	blt.n	8008a14 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 80089f8:	221c      	movs	r2, #28
 80089fa:	4b16      	ldr	r3, [pc, #88]	; (8008a54 <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>)
 80089fc:	fb02 3300 	mla	r3, r2, r0, r3
 8008a00:	68da      	ldr	r2, [r3, #12]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	1051      	asrs	r1, r2, #1
 8008a06:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008a0a:	07d2      	lsls	r2, r2, #31
 8008a0c:	bf44      	itt	mi
 8008a0e:	5862      	ldrmi	r2, [r4, r1]
 8008a10:	58d3      	ldrmi	r3, [r2, r3]
 8008a12:	4798      	blx	r3
 8008a14:	b005      	add	sp, #20
 8008a16:	bd30      	pop	{r4, r5, pc}
 8008a18:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8008a1c:	d8fa      	bhi.n	8008a14 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 8008a1e:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 8008a20:	460d      	mov	r5, r1
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	07d9      	lsls	r1, r3, #31
 8008a26:	d50b      	bpl.n	8008a40 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 8008a28:	782b      	ldrb	r3, [r5, #0]
 8008a2a:	2b7b      	cmp	r3, #123	; 0x7b
 8008a2c:	d108      	bne.n	8008a40 <RemoteConfig::HandleSet(void*, unsigned int)+0x68>
 8008a2e:	1e51      	subs	r1, r2, #1
 8008a30:	4628      	mov	r0, r5
 8008a32:	2200      	movs	r2, #0
 8008a34:	b289      	uxth	r1, r1
 8008a36:	f009 f9db 	bl	8011df0 <properties::convert_json_file(char*, unsigned short, bool)>
 8008a3a:	1e02      	subs	r2, r0, #0
 8008a3c:	ddea      	ble.n	8008a14 <RemoteConfig::HandleSet(void*, unsigned int)+0x3c>
 8008a3e:	b292      	uxth	r2, r2
 8008a40:	4b03      	ldr	r3, [pc, #12]	; (8008a50 <RemoteConfig::HandleSet(void*, unsigned int)+0x78>)
 8008a42:	61e2      	str	r2, [r4, #28]
 8008a44:	4620      	mov	r0, r4
 8008a46:	601d      	str	r5, [r3, #0]
 8008a48:	aa01      	add	r2, sp, #4
 8008a4a:	1c69      	adds	r1, r5, #1
 8008a4c:	e7d0      	b.n	80089f0 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 8008a4e:	bf00      	nop
 8008a50:	200000fc 	strdcs	r0, [r0], -ip
 8008a54:	0801583c 	stmdaeq	r1, {r2, r3, r4, r5, fp, ip, lr}
 8008a58:	2000a13c 	andcs	sl, r0, ip, lsr r1

08008a5c <RemoteConfig::Run()>:
 8008a5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008a60:	7b05      	ldrb	r5, [r0, #12]
 8008a62:	2d00      	cmp	r5, #0
 8008a64:	d156      	bne.n	8008b14 <RemoteConfig::Run()+0xb8>
 8008a66:	4e45      	ldr	r6, [pc, #276]	; (8008b7c <RemoteConfig::Run()+0x120>)
 8008a68:	4604      	mov	r4, r0
 8008a6a:	f100 0218 	add.w	r2, r0, #24
 8008a6e:	4631      	mov	r1, r6
 8008a70:	7d00      	ldrb	r0, [r0, #20]
 8008a72:	f10d 030e 	add.w	r3, sp, #14
 8008a76:	f007 f807 	bl	800fa88 <udp_recv2>
 8008a7a:	2803      	cmp	r0, #3
 8008a7c:	61e0      	str	r0, [r4, #28]
 8008a7e:	d949      	bls.n	8008b14 <RemoteConfig::Run()+0xb8>
 8008a80:	6831      	ldr	r1, [r6, #0]
 8008a82:	1e43      	subs	r3, r0, #1
 8008a84:	5cca      	ldrb	r2, [r1, r3]
 8008a86:	2a0a      	cmp	r2, #10
 8008a88:	bf18      	it	ne
 8008a8a:	4603      	movne	r3, r0
 8008a8c:	61e3      	str	r3, [r4, #28]
 8008a8e:	7808      	ldrb	r0, [r1, #0]
 8008a90:	283f      	cmp	r0, #63	; 0x3f
 8008a92:	d137      	bne.n	8008b04 <RemoteConfig::Run()+0xa8>
 8008a94:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 8008b80 <RemoteConfig::Run()+0x124>
 8008a98:	462a      	mov	r2, r5
 8008a9a:	4667      	mov	r7, ip
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	61e3      	str	r3, [r4, #28]
 8008aa0:	f89c 500e 	ldrb.w	r5, [ip, #14]
 8008aa4:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 8008aa8:	b16d      	cbz	r5, 8008ac6 <RemoteConfig::Run()+0x6a>
 8008aaa:	4283      	cmp	r3, r0
 8008aac:	d80d      	bhi.n	8008aca <RemoteConfig::Run()+0x6e>
 8008aae:	3201      	adds	r2, #1
 8008ab0:	2a09      	cmp	r2, #9
 8008ab2:	f10c 0c10 	add.w	ip, ip, #16
 8008ab6:	d1f3      	bne.n	8008aa0 <RemoteConfig::Run()+0x44>
 8008ab8:	f642 1305 	movw	r3, #10501	; 0x2905
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	2208      	movs	r2, #8
 8008ac0:	69a3      	ldr	r3, [r4, #24]
 8008ac2:	4930      	ldr	r1, [pc, #192]	; (8008b84 <RemoteConfig::Run()+0x128>)
 8008ac4:	e04e      	b.n	8008b64 <RemoteConfig::Run()+0x108>
 8008ac6:	4283      	cmp	r3, r0
 8008ac8:	d1f1      	bne.n	8008aae <RemoteConfig::Run()+0x52>
 8008aca:	460e      	mov	r6, r1
 8008acc:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8008ad0:	4408      	add	r0, r1
 8008ad2:	3d01      	subs	r5, #1
 8008ad4:	4286      	cmp	r6, r0
 8008ad6:	d10b      	bne.n	8008af0 <RemoteConfig::Run()+0x94>
 8008ad8:	0113      	lsls	r3, r2, #4
 8008ada:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 8008ade:	6852      	ldr	r2, [r2, #4]
 8008ae0:	58fb      	ldr	r3, [r7, r3]
 8008ae2:	1051      	asrs	r1, r2, #1
 8008ae4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8008ae8:	07d2      	lsls	r2, r2, #31
 8008aea:	d408      	bmi.n	8008afe <RemoteConfig::Run()+0xa2>
 8008aec:	4798      	blx	r3
 8008aee:	e011      	b.n	8008b14 <RemoteConfig::Run()+0xb8>
 8008af0:	f816 8f01 	ldrb.w	r8, [r6, #1]!
 8008af4:	f815 ef01 	ldrb.w	lr, [r5, #1]!
 8008af8:	45f0      	cmp	r8, lr
 8008afa:	d0eb      	beq.n	8008ad4 <RemoteConfig::Run()+0x78>
 8008afc:	e7d7      	b.n	8008aae <RemoteConfig::Run()+0x52>
 8008afe:	5862      	ldr	r2, [r4, r1]
 8008b00:	58d3      	ldr	r3, [r2, r3]
 8008b02:	e7f3      	b.n	8008aec <RemoteConfig::Run()+0x90>
 8008b04:	7b62      	ldrb	r2, [r4, #13]
 8008b06:	b92a      	cbnz	r2, 8008b14 <RemoteConfig::Run()+0xb8>
 8008b08:	2823      	cmp	r0, #35	; 0x23
 8008b0a:	d106      	bne.n	8008b1a <RemoteConfig::Run()+0xbe>
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f7ff ff62 	bl	80089d8 <RemoteConfig::HandleSet(void*, unsigned int)>
 8008b14:	b004      	add	sp, #16
 8008b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b1a:	2821      	cmp	r0, #33	; 0x21
 8008b1c:	d1fa      	bne.n	8008b14 <RemoteConfig::Run()+0xb8>
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	2b05      	cmp	r3, #5
 8008b22:	61e3      	str	r3, [r4, #28]
 8008b24:	d918      	bls.n	8008b58 <RemoteConfig::Run()+0xfc>
 8008b26:	460a      	mov	r2, r1
 8008b28:	4608      	mov	r0, r1
 8008b2a:	4d17      	ldr	r5, [pc, #92]	; (8008b88 <RemoteConfig::Run()+0x12c>)
 8008b2c:	f101 0c05 	add.w	ip, r1, #5
 8008b30:	4560      	cmp	r0, ip
 8008b32:	d01b      	beq.n	8008b6c <RemoteConfig::Run()+0x110>
 8008b34:	f815 6b01 	ldrb.w	r6, [r5], #1
 8008b38:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8008b3c:	42b7      	cmp	r7, r6
 8008b3e:	d0f7      	beq.n	8008b30 <RemoteConfig::Run()+0xd4>
 8008b40:	2b08      	cmp	r3, #8
 8008b42:	d909      	bls.n	8008b58 <RemoteConfig::Run()+0xfc>
 8008b44:	4b11      	ldr	r3, [pc, #68]	; (8008b8c <RemoteConfig::Run()+0x130>)
 8008b46:	3108      	adds	r1, #8
 8008b48:	428a      	cmp	r2, r1
 8008b4a:	d015      	beq.n	8008b78 <RemoteConfig::Run()+0x11c>
 8008b4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008b50:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008b54:	4285      	cmp	r5, r0
 8008b56:	d0f7      	beq.n	8008b48 <RemoteConfig::Run()+0xec>
 8008b58:	f642 1305 	movw	r3, #10501	; 0x2905
 8008b5c:	2208      	movs	r2, #8
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	69a3      	ldr	r3, [r4, #24]
 8008b62:	490b      	ldr	r1, [pc, #44]	; (8008b90 <RemoteConfig::Run()+0x134>)
 8008b64:	7d20      	ldrb	r0, [r4, #20]
 8008b66:	f006 ffb5 	bl	800fad4 <udp_send>
 8008b6a:	e7d3      	b.n	8008b14 <RemoteConfig::Run()+0xb8>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	4a09      	ldr	r2, [pc, #36]	; (8008b94 <RemoteConfig::Run()+0x138>)
 8008b70:	011b      	lsls	r3, r3, #4
 8008b72:	4620      	mov	r0, r4
 8008b74:	58d3      	ldr	r3, [r2, r3]
 8008b76:	e7b9      	b.n	8008aec <RemoteConfig::Run()+0x90>
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e7f8      	b.n	8008b6e <RemoteConfig::Run()+0x112>
 8008b7c:	200000fc 	strdcs	r0, [r0], -ip
 8008b80:	08015708 	stmdaeq	r1, {r3, r8, r9, sl, ip, lr}
 8008b84:	08015570 	stmdaeq	r1, {r4, r5, r6, r8, sl, ip, lr}
 8008b88:	08015558 	stmdaeq	r1, {r3, r4, r6, r8, sl, ip, lr}
 8008b8c:	0801555e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, ip, lr}
 8008b90:	08015567 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sl, ip, lr}
 8008b94:	08015798 	stmdaeq	r1, {r3, r4, r7, r8, r9, sl, ip, lr}

08008b98 <RemoteConfig::HandleSetRconfig()>:
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	4b08      	ldr	r3, [pc, #32]	; (8008bc0 <RemoteConfig::HandleSetRconfig()+0x28>)
 8008b9e:	b08a      	sub	sp, #40	; 0x28
 8008ba0:	6819      	ldr	r1, [r3, #0]
 8008ba2:	a801      	add	r0, sp, #4
 8008ba4:	f000 f8aa 	bl	8008cfc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008ba8:	4b06      	ldr	r3, [pc, #24]	; (8008bc4 <RemoteConfig::HandleSetRconfig()+0x2c>)
 8008baa:	69e2      	ldr	r2, [r4, #28]
 8008bac:	6819      	ldr	r1, [r3, #0]
 8008bae:	a801      	add	r0, sp, #4
 8008bb0:	f000 f8ba 	bl	8008d28 <RemoteConfigParams::Load(char const*, unsigned int)>
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	a801      	add	r0, sp, #4
 8008bb8:	f000 f9d1 	bl	8008f5e <RemoteConfigParams::Set(RemoteConfig*)>
 8008bbc:	b00a      	add	sp, #40	; 0x28
 8008bbe:	bd10      	pop	{r4, pc}
 8008bc0:	20002270 	andcs	r2, r0, r0, ror r2
 8008bc4:	200000fc 	strdcs	r0, [r0], -ip

08008bc8 <RemoteConfig::HandleSetNetworkTxt()>:
 8008bc8:	b510      	push	{r4, lr}
 8008bca:	4604      	mov	r4, r0
 8008bcc:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 8008bce:	b09a      	sub	sp, #104	; 0x68
 8008bd0:	6819      	ldr	r1, [r3, #0]
 8008bd2:	a801      	add	r0, sp, #4
 8008bd4:	f007 fee6 	bl	80109a4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 8008bd8:	4b04      	ldr	r3, [pc, #16]	; (8008bec <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 8008bda:	69e2      	ldr	r2, [r4, #28]
 8008bdc:	6819      	ldr	r1, [r3, #0]
 8008bde:	a801      	add	r0, sp, #4
 8008be0:	f007 fef8 	bl	80109d4 <NetworkParams::Load(char const*, unsigned int)>
 8008be4:	b01a      	add	sp, #104	; 0x68
 8008be6:	bd10      	pop	{r4, pc}
 8008be8:	20002268 	andcs	r2, r0, r8, ror #4
 8008bec:	200000fc 	strdcs	r0, [r0], -ip

08008bf0 <RemoteConfig::HandleSetArtnetTxt()>:
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 8008bf6:	b0a4      	sub	sp, #144	; 0x90
 8008bf8:	6819      	ldr	r1, [r3, #0]
 8008bfa:	a801      	add	r0, sp, #4
 8008bfc:	f002 fc18 	bl	800b430 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8008c00:	4b04      	ldr	r3, [pc, #16]	; (8008c14 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 8008c02:	69e2      	ldr	r2, [r4, #28]
 8008c04:	6819      	ldr	r1, [r3, #0]
 8008c06:	a801      	add	r0, sp, #4
 8008c08:	f002 fc40 	bl	800b48c <ArtNetParams::Load(char const*, unsigned int)>
 8008c0c:	b024      	add	sp, #144	; 0x90
 8008c0e:	bd10      	pop	{r4, pc}
 8008c10:	20002278 	andcs	r2, r0, r8, ror r2
 8008c14:	200000fc 	strdcs	r0, [r0], -ip

08008c18 <RemoteConfig::HandleSetE131Txt()>:
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <RemoteConfig::HandleSetE131Txt()+0x20>)
 8008c1e:	b086      	sub	sp, #24
 8008c20:	6819      	ldr	r1, [r3, #0]
 8008c22:	4668      	mov	r0, sp
 8008c24:	f003 ff18 	bl	800ca58 <E131Params::E131Params(E131ParamsStore*)>
 8008c28:	4b04      	ldr	r3, [pc, #16]	; (8008c3c <RemoteConfig::HandleSetE131Txt()+0x24>)
 8008c2a:	4668      	mov	r0, sp
 8008c2c:	69e2      	ldr	r2, [r4, #28]
 8008c2e:	6819      	ldr	r1, [r3, #0]
 8008c30:	f003 ff2a 	bl	800ca88 <E131Params::Load(char const*, unsigned int)>
 8008c34:	b006      	add	sp, #24
 8008c36:	bd10      	pop	{r4, pc}
 8008c38:	2000227c 	andcs	r2, r0, ip, ror r2
 8008c3c:	200000fc 	strdcs	r0, [r0], -ip

08008c40 <RemoteConfig::HandleSetParamsTxt()>:
 8008c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c42:	4604      	mov	r4, r0
 8008c44:	4b06      	ldr	r3, [pc, #24]	; (8008c60 <RemoteConfig::HandleSetParamsTxt()+0x20>)
 8008c46:	4668      	mov	r0, sp
 8008c48:	6819      	ldr	r1, [r3, #0]
 8008c4a:	f004 fee3 	bl	800da14 <DmxParams::DmxParams(DmxParamsStore*)>
 8008c4e:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <RemoteConfig::HandleSetParamsTxt()+0x24>)
 8008c50:	4668      	mov	r0, sp
 8008c52:	69e2      	ldr	r2, [r4, #28]
 8008c54:	6819      	ldr	r1, [r3, #0]
 8008c56:	f004 fef5 	bl	800da44 <DmxParams::Load(char const*, unsigned int)>
 8008c5a:	b004      	add	sp, #16
 8008c5c:	bd10      	pop	{r4, pc}
 8008c5e:	bf00      	nop
 8008c60:	20002264 	andcs	r2, r0, r4, ror #4
 8008c64:	200000fc 	strdcs	r0, [r0], -ip

08008c68 <RemoteConfig::HandleSetDisplayTxt()>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 8008c6e:	b08a      	sub	sp, #40	; 0x28
 8008c70:	6819      	ldr	r1, [r3, #0]
 8008c72:	4668      	mov	r0, sp
 8008c74:	f008 fe22 	bl	80118bc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008c78:	4b04      	ldr	r3, [pc, #16]	; (8008c8c <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 8008c7a:	4668      	mov	r0, sp
 8008c7c:	69e2      	ldr	r2, [r4, #28]
 8008c7e:	6819      	ldr	r1, [r3, #0]
 8008c80:	f008 fe36 	bl	80118f0 <DisplayUdfParams::Load(char const*, unsigned int)>
 8008c84:	b00a      	add	sp, #40	; 0x28
 8008c86:	bd10      	pop	{r4, pc}
 8008c88:	20002260 	andcs	r2, r0, r0, ror #4
 8008c8c:	200000fc 	strdcs	r0, [r0], -ip

08008c90 <RemoteConfig::HandleFactory()>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	2400      	movs	r4, #0
 8008c94:	4d04      	ldr	r5, [pc, #16]	; (8008ca8 <RemoteConfig::HandleFactory()+0x18>)
 8008c96:	4621      	mov	r1, r4
 8008c98:	6828      	ldr	r0, [r5, #0]
 8008c9a:	3401      	adds	r4, #1
 8008c9c:	f005 fe92 	bl	800e9c4 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 8008ca0:	2c1c      	cmp	r4, #28
 8008ca2:	d1f8      	bne.n	8008c96 <RemoteConfig::HandleFactory()+0x6>
 8008ca4:	bd38      	pop	{r3, r4, r5, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20002258 	andcs	r2, r0, r8, asr r2

08008cac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 8008cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cae:	460b      	mov	r3, r1
 8008cb0:	8885      	ldrh	r5, [r0, #4]
 8008cb2:	88c1      	ldrh	r1, [r0, #6]
 8008cb4:	42a9      	cmp	r1, r5
 8008cb6:	d214      	bcs.n	8008ce2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 8008cb8:	4604      	mov	r4, r0
 8008cba:	6800      	ldr	r0, [r0, #0]
 8008cbc:	1a6d      	subs	r5, r5, r1
 8008cbe:	4408      	add	r0, r1
 8008cc0:	7a21      	ldrb	r1, [r4, #8]
 8008cc2:	b91a      	cbnz	r2, 8008ccc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 8008cc4:	b919      	cbnz	r1, 8008cce <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 8008cc6:	4a0a      	ldr	r2, [pc, #40]	; (8008cf0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 8008cc8:	9100      	str	r1, [sp, #0]
 8008cca:	e002      	b.n	8008cd2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8008ccc:	b159      	cbz	r1, 8008ce6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 8008cce:	9200      	str	r2, [sp, #0]
 8008cd0:	4a08      	ldr	r2, [pc, #32]	; (8008cf4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	f00a fa22 	bl	801311c <snprintf>
 8008cd8:	4285      	cmp	r5, r0
 8008cda:	bfa2      	ittt	ge
 8008cdc:	88e3      	ldrhge	r3, [r4, #6]
 8008cde:	181b      	addge	r3, r3, r0
 8008ce0:	80e3      	strhge	r3, [r4, #6]
 8008ce2:	b003      	add	sp, #12
 8008ce4:	bd30      	pop	{r4, r5, pc}
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	9200      	str	r2, [sp, #0]
 8008cea:	4a03      	ldr	r2, [pc, #12]	; (8008cf8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 8008cec:	e7f1      	b.n	8008cd2 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 8008cee:	bf00      	nop
 8008cf0:	080157c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip, lr}
 8008cf4:	080157b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
 8008cf8:	080157c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, ip, lr}

08008cfc <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	4604      	mov	r4, r0
 8008d00:	2220      	movs	r2, #32
 8008d02:	f840 1b04 	str.w	r1, [r0], #4
 8008d06:	2100      	movs	r1, #0
 8008d08:	f009 ffc6 	bl	8012c98 <memset>
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	bd10      	pop	{r4, pc}

08008d10 <RemoteConfigParams::Load()>:
 8008d10:	b508      	push	{r3, lr}
 8008d12:	2300      	movs	r3, #0
 8008d14:	4601      	mov	r1, r0
 8008d16:	6043      	str	r3, [r0, #4]
 8008d18:	6800      	ldr	r0, [r0, #0]
 8008d1a:	b120      	cbz	r0, 8008d26 <RemoteConfigParams::Load()+0x16>
 8008d1c:	6803      	ldr	r3, [r0, #0]
 8008d1e:	3104      	adds	r1, #4
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	4798      	blx	r3
 8008d24:	2001      	movs	r0, #1
 8008d26:	bd08      	pop	{r3, pc}

08008d28 <RemoteConfigParams::Load(char const*, unsigned int)>:
 8008d28:	2300      	movs	r3, #0
 8008d2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	4616      	mov	r6, r2
 8008d30:	4604      	mov	r4, r0
 8008d32:	6043      	str	r3, [r0, #4]
 8008d34:	4602      	mov	r2, r0
 8008d36:	490a      	ldr	r1, [pc, #40]	; (8008d60 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 8008d38:	4668      	mov	r0, sp
 8008d3a:	f009 f9ab 	bl	8012094 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8008d3e:	4632      	mov	r2, r6
 8008d40:	4629      	mov	r1, r5
 8008d42:	4668      	mov	r0, sp
 8008d44:	f009 f9aa 	bl	801209c <ReadConfigFile::Read(char const*, unsigned int)>
 8008d48:	4621      	mov	r1, r4
 8008d4a:	f851 0b04 	ldr.w	r0, [r1], #4
 8008d4e:	6803      	ldr	r3, [r0, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	4798      	blx	r3
 8008d54:	4668      	mov	r0, sp
 8008d56:	f009 f9a0 	bl	801209a <ReadConfigFile::~ReadConfigFile()>
 8008d5a:	b002      	add	sp, #8
 8008d5c:	bd70      	pop	{r4, r5, r6, pc}
 8008d5e:	bf00      	nop
 8008d60:	08008e21 	stmdaeq	r0, {r0, r5, r9, sl, fp, pc}

08008d64 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 8008d64:	6843      	ldr	r3, [r0, #4]
 8008d66:	b111      	cbz	r1, 8008d6e <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	6043      	str	r3, [r0, #4]
 8008d6c:	4770      	bx	lr
 8008d6e:	ea23 0302 	bic.w	r3, r3, r2
 8008d72:	e7fa      	b.n	8008d6a <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

08008d74 <RemoteConfigParams::callbackFunction(char const*)>:
 8008d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d76:	460d      	mov	r5, r1
 8008d78:	4604      	mov	r4, r0
 8008d7a:	4923      	ldr	r1, [pc, #140]	; (8008e08 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	f10d 0203 	add.w	r2, sp, #3
 8008d82:	f009 fa37 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8008d86:	b940      	cbnz	r0, 8008d9a <RemoteConfigParams::callbackFunction(char const*)+0x26>
 8008d88:	2201      	movs	r2, #1
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8008d90:	b003      	add	sp, #12
 8008d92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d96:	f7ff bfe5 	b.w	8008d64 <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	491b      	ldr	r1, [pc, #108]	; (8008e0c <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 8008d9e:	f10d 0203 	add.w	r2, sp, #3
 8008da2:	f009 fa27 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8008da6:	b908      	cbnz	r0, 8008dac <RemoteConfigParams::callbackFunction(char const*)+0x38>
 8008da8:	2202      	movs	r2, #2
 8008daa:	e7ee      	b.n	8008d8a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8008dac:	4628      	mov	r0, r5
 8008dae:	4918      	ldr	r1, [pc, #96]	; (8008e10 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 8008db0:	f10d 0203 	add.w	r2, sp, #3
 8008db4:	f009 fa1e 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8008db8:	b908      	cbnz	r0, 8008dbe <RemoteConfigParams::callbackFunction(char const*)+0x4a>
 8008dba:	2204      	movs	r2, #4
 8008dbc:	e7e5      	b.n	8008d8a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	4914      	ldr	r1, [pc, #80]	; (8008e14 <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 8008dc2:	f10d 0203 	add.w	r2, sp, #3
 8008dc6:	f009 fa15 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8008dca:	b908      	cbnz	r0, 8008dd0 <RemoteConfigParams::callbackFunction(char const*)+0x5c>
 8008dcc:	2208      	movs	r2, #8
 8008dce:	e7dc      	b.n	8008d8a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	4911      	ldr	r1, [pc, #68]	; (8008e18 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 8008dd4:	f10d 0203 	add.w	r2, sp, #3
 8008dd8:	f009 fa0c 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8008ddc:	b908      	cbnz	r0, 8008de2 <RemoteConfigParams::callbackFunction(char const*)+0x6e>
 8008dde:	2220      	movs	r2, #32
 8008de0:	e7d3      	b.n	8008d8a <RemoteConfigParams::callbackFunction(char const*)+0x16>
 8008de2:	2317      	movs	r3, #23
 8008de4:	4628      	mov	r0, r5
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	490c      	ldr	r1, [pc, #48]	; (8008e1c <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 8008dea:	ab01      	add	r3, sp, #4
 8008dec:	f104 020c 	add.w	r2, r4, #12
 8008df0:	f009 f988 	bl	8012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8008df4:	b930      	cbnz	r0, 8008e04 <RemoteConfigParams::callbackFunction(char const*)+0x90>
 8008df6:	9b01      	ldr	r3, [sp, #4]
 8008df8:	4423      	add	r3, r4
 8008dfa:	7318      	strb	r0, [r3, #12]
 8008dfc:	6863      	ldr	r3, [r4, #4]
 8008dfe:	f043 0310 	orr.w	r3, r3, #16
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	b003      	add	sp, #12
 8008e06:	bd30      	pop	{r4, r5, pc}
 8008e08:	08015bc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, fp, ip, lr}
 8008e0c:	08015bea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, r9, fp, ip, lr}
 8008e10:	08015bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
 8008e14:	08015c06 	stmdaeq	r1, {r1, r2, sl, fp, ip, lr}
 8008e18:	08015c14 	stmdaeq	r1, {r2, r4, sl, fp, ip, lr}
 8008e1c:	08015bdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, fp, ip, lr}

08008e20 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 8008e20:	f7ff bfa8 	b.w	8008d74 <RemoteConfigParams::callbackFunction(char const*)>

08008e24 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	4604      	mov	r4, r0
 8008e28:	4615      	mov	r5, r2
 8008e2a:	461e      	mov	r6, r3
 8008e2c:	b086      	sub	sp, #24
 8008e2e:	3004      	adds	r0, #4
 8008e30:	2900      	cmp	r1, #0
 8008e32:	d041      	beq.n	8008eb8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x94>
 8008e34:	2220      	movs	r2, #32
 8008e36:	f009 ff18 	bl	8012c6a <memmove>
 8008e3a:	4633      	mov	r3, r6
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	4937      	ldr	r1, [pc, #220]	; (8008f1c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 8008e40:	a803      	add	r0, sp, #12
 8008e42:	f009 f887 	bl	8011f54 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8008e46:	6862      	ldr	r2, [r4, #4]
 8008e48:	4935      	ldr	r1, [pc, #212]	; (8008f20 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 8008e4a:	f002 0201 	and.w	r2, r2, #1
 8008e4e:	a803      	add	r0, sp, #12
 8008e50:	f7ff ff2c 	bl	8008cac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8008e54:	6862      	ldr	r2, [r4, #4]
 8008e56:	4933      	ldr	r1, [pc, #204]	; (8008f24 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 8008e58:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8008e5c:	a803      	add	r0, sp, #12
 8008e5e:	f7ff ff25 	bl	8008cac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8008e62:	6862      	ldr	r2, [r4, #4]
 8008e64:	4930      	ldr	r1, [pc, #192]	; (8008f28 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 8008e66:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8008e6a:	a803      	add	r0, sp, #12
 8008e6c:	f7ff ff1e 	bl	8008cac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8008e70:	6862      	ldr	r2, [r4, #4]
 8008e72:	492e      	ldr	r1, [pc, #184]	; (8008f2c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 8008e74:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8008e78:	a803      	add	r0, sp, #12
 8008e7a:	f7ff ff17 	bl	8008cac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8008e7e:	6862      	ldr	r2, [r4, #4]
 8008e80:	492b      	ldr	r1, [pc, #172]	; (8008f30 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 8008e82:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008e86:	a803      	add	r0, sp, #12
 8008e88:	f7ff ff10 	bl	8008cac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 8008e8c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008e90:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8008e94:	6862      	ldr	r2, [r4, #4]
 8008e96:	42ab      	cmp	r3, r5
 8008e98:	d223      	bcs.n	8008ee2 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbe>
 8008e9a:	9803      	ldr	r0, [sp, #12]
 8008e9c:	06d2      	lsls	r2, r2, #27
 8008e9e:	4418      	add	r0, r3
 8008ea0:	eba5 0503 	sub.w	r5, r5, r3
 8008ea4:	f104 040c 	add.w	r4, r4, #12
 8008ea8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008eac:	d40b      	bmi.n	8008ec6 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 8008eae:	b95b      	cbnz	r3, 8008ec8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa4>
 8008eb0:	4b20      	ldr	r3, [pc, #128]	; (8008f34 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8008eb2:	4a21      	ldr	r2, [pc, #132]	; (8008f38 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 8008eb4:	9400      	str	r4, [sp, #0]
 8008eb6:	e00a      	b.n	8008ece <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	4601      	mov	r1, r0
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	68d2      	ldr	r2, [r2, #12]
 8008ec2:	4790      	blx	r2
 8008ec4:	e7b9      	b.n	8008e3a <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 8008ec6:	b32b      	cbz	r3, 8008f14 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf0>
 8008ec8:	4b1a      	ldr	r3, [pc, #104]	; (8008f34 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8008eca:	4a1c      	ldr	r2, [pc, #112]	; (8008f3c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 8008ecc:	9400      	str	r4, [sp, #0]
 8008ece:	4629      	mov	r1, r5
 8008ed0:	f00a f924 	bl	801311c <snprintf>
 8008ed4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008ed8:	4285      	cmp	r5, r0
 8008eda:	bfa4      	itt	ge
 8008edc:	181b      	addge	r3, r3, r0
 8008ede:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8008ee2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008ee6:	b17b      	cbz	r3, 8008f08 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe4>
 8008ee8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008eec:	9b03      	ldr	r3, [sp, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	227d      	movs	r2, #125	; 0x7d
 8008ef2:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008ef6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008efa:	9903      	ldr	r1, [sp, #12]
 8008efc:	54ca      	strb	r2, [r1, r3]
 8008efe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8008f02:	3301      	adds	r3, #1
 8008f04:	f8ad 3012 	strh.w	r3, [sp, #18]
 8008f08:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8008f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0e:	601a      	str	r2, [r3, #0]
 8008f10:	b006      	add	sp, #24
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8008f16:	4a0a      	ldr	r2, [pc, #40]	; (8008f40 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 8008f18:	9400      	str	r4, [sp, #0]
 8008f1a:	e7d8      	b.n	8008ece <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xaa>
 8008f1c:	08015bd1 	stmdaeq	r1, {r0, r4, r6, r7, r8, r9, fp, ip, lr}
 8008f20:	08015bc9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, fp, ip, lr}
 8008f24:	08015bea 	stmdaeq	r1, {r1, r3, r5, r6, r7, r8, r9, fp, ip, lr}
 8008f28:	08015bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, ip, lr}
 8008f2c:	08015c06 	stmdaeq	r1, {r1, r2, sl, fp, ip, lr}
 8008f30:	08015c14 	stmdaeq	r1, {r2, r4, sl, fp, ip, lr}
 8008f34:	08015bdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, fp, ip, lr}
 8008f38:	080157d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
 8008f3c:	080157c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, sl, ip, lr}
 8008f40:	080157d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, sl, ip, lr}

08008f44 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 8008f44:	b513      	push	{r0, r1, r4, lr}
 8008f46:	6804      	ldr	r4, [r0, #0]
 8008f48:	b914      	cbnz	r4, 8008f50 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8008f4a:	601c      	str	r4, [r3, #0]
 8008f4c:	b002      	add	sp, #8
 8008f4e:	bd10      	pop	{r4, pc}
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	4613      	mov	r3, r2
 8008f54:	460a      	mov	r2, r1
 8008f56:	2100      	movs	r1, #0
 8008f58:	f7ff ff64 	bl	8008e24 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 8008f5c:	e7f6      	b.n	8008f4c <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

08008f5e <RemoteConfigParams::Set(RemoteConfig*)>:
 8008f5e:	b538      	push	{r3, r4, r5, lr}
 8008f60:	460c      	mov	r4, r1
 8008f62:	4605      	mov	r5, r0
 8008f64:	6841      	ldr	r1, [r0, #4]
 8008f66:	4620      	mov	r0, r4
 8008f68:	f001 0101 	and.w	r1, r1, #1
 8008f6c:	f7ff fc18 	bl	80087a0 <RemoteConfig::SetDisable(bool)>
 8008f70:	686b      	ldr	r3, [r5, #4]
 8008f72:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8008f76:	7362      	strb	r2, [r4, #13]
 8008f78:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8008f7c:	73a2      	strb	r2, [r4, #14]
 8008f7e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8008f82:	73e2      	strb	r2, [r4, #15]
 8008f84:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8008f88:	06db      	lsls	r3, r3, #27
 8008f8a:	7422      	strb	r2, [r4, #16]
 8008f8c:	d506      	bpl.n	8008f9c <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f105 010c 	add.w	r1, r5, #12
 8008f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f98:	f7ff bc22 	b.w	80087e0 <RemoteConfig::SetDisplayName(char const*)>
 8008f9c:	bd38      	pop	{r3, r4, r5, pc}

08008f9e <RemoteConfigParams::Dump()>:
 8008f9e:	4770      	bx	lr

08008fa0 <RemoteConfig::HandleReboot()>:
 8008fa0:	7b83      	ldrb	r3, [r0, #14]
 8008fa2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d03c      	beq.n	8009022 <RemoteConfig::HandleReboot()+0x82>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	4c1f      	ldr	r4, [pc, #124]	; (8009028 <RemoteConfig::HandleReboot()+0x88>)
 8008fac:	7443      	strb	r3, [r0, #17]
 8008fae:	6825      	ldr	r5, [r4, #0]
 8008fb0:	69a8      	ldr	r0, [r5, #24]
 8008fb2:	b138      	cbz	r0, 8008fc4 <RemoteConfig::HandleReboot()+0x24>
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	6803      	ldr	r3, [r0, #0]
 8008fb8:	7429      	strb	r1, [r5, #16]
 8008fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbc:	4798      	blx	r3
 8008fbe:	4b1b      	ldr	r3, [pc, #108]	; (800902c <RemoteConfig::HandleReboot()+0x8c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	606b      	str	r3, [r5, #4]
 8008fc4:	4d1a      	ldr	r5, [pc, #104]	; (8009030 <RemoteConfig::HandleReboot()+0x90>)
 8008fc6:	6828      	ldr	r0, [r5, #0]
 8008fc8:	f005 fd80 	bl	800eacc <SpiFlashStore::Flash()>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d1fa      	bne.n	8008fc6 <RemoteConfig::HandleReboot()+0x26>
 8008fd0:	4b18      	ldr	r3, [pc, #96]	; (8009034 <RemoteConfig::HandleReboot()+0x94>)
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	f007 fa3e 	bl	8010454 <Network::Shutdown()>
 8008fd8:	4817      	ldr	r0, [pc, #92]	; (8009038 <RemoteConfig::HandleReboot()+0x98>)
 8008fda:	f00a f877 	bl	80130cc <printf>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	6998      	ldr	r0, [r3, #24]
 8008fe2:	b110      	cbz	r0, 8008fea <RemoteConfig::HandleReboot()+0x4a>
 8008fe4:	6803      	ldr	r3, [r0, #0]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	4798      	blx	r3
 8008fea:	6824      	ldr	r4, [r4, #0]
 8008fec:	4913      	ldr	r1, [pc, #76]	; (800903c <RemoteConfig::HandleReboot()+0x9c>)
 8008fee:	4620      	mov	r0, r4
 8008ff0:	f7fe fe5a 	bl	8007ca8 <Display::TextStatus(char const*)>
 8008ff4:	7c63      	ldrb	r3, [r4, #17]
 8008ff6:	b183      	cbz	r3, 800901a <RemoteConfig::HandleReboot()+0x7a>
 8008ff8:	f64b 7312 	movw	r3, #48914	; 0xbf12
 8008ffc:	f8ad 3004 	strh.w	r3, [sp, #4]
 8009000:	23bf      	movs	r3, #191	; 0xbf
 8009002:	7a20      	ldrb	r0, [r4, #8]
 8009004:	f88d 3006 	strb.w	r3, [sp, #6]
 8009008:	f00b f80e 	bl	8014028 <gd32_i2c_set_address>
 800900c:	68e0      	ldr	r0, [r4, #12]
 800900e:	f00b f803 	bl	8014018 <gd32_i2c_set_baudrate>
 8009012:	2103      	movs	r1, #3
 8009014:	a801      	add	r0, sp, #4
 8009016:	f00b f80d 	bl	8014034 <gd32_i2c_write>
 800901a:	4b09      	ldr	r3, [pc, #36]	; (8009040 <RemoteConfig::HandleReboot()+0xa0>)
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	f009 fd25 	bl	8012a6c <Hardware::Reboot()>
 8009022:	b003      	add	sp, #12
 8009024:	bd30      	pop	{r4, r5, pc}
 8009026:	bf00      	nop
 8009028:	2000a140 	andcs	sl, r0, r0, asr #2
 800902c:	2000a24c 	andcs	sl, r0, ip, asr #4
 8009030:	20002258 	andcs	r2, r0, r8, asr r2
 8009034:	20009b68 	andcs	r9, r0, r8, ror #22
 8009038:	080157dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, r9, sl, ip, lr}
 800903c:	080157eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, sl, ip, lr}
 8009040:	2000a230 	andcs	sl, r0, r0, lsr r2

08009044 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 8009044:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009048:	2000      	movs	r0, #0
 800904a:	4d12      	ldr	r5, [pc, #72]	; (8009094 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800904c:	f10d 0c04 	add.w	ip, sp, #4
 8009050:	6814      	ldr	r4, [r2, #0]
 8009052:	7d2b      	ldrb	r3, [r5, #20]
 8009054:	692e      	ldr	r6, [r5, #16]
 8009056:	42a3      	cmp	r3, r4
 8009058:	bf34      	ite	cc
 800905a:	4664      	movcc	r4, ip
 800905c:	4614      	movcs	r4, r2
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	6827      	ldr	r7, [r4, #0]
 8009062:	460c      	mov	r4, r1
 8009064:	3e01      	subs	r6, #1
 8009066:	440f      	add	r7, r1
 8009068:	42bc      	cmp	r4, r7
 800906a:	d101      	bne.n	8009070 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x2c>
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	e00c      	b.n	800908a <RemoteConfig::GetIndex(void const*, unsigned int&)+0x46>
 8009070:	f894 8000 	ldrb.w	r8, [r4]
 8009074:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 8009078:	45f0      	cmp	r8, lr
 800907a:	d009      	beq.n	8009090 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800907c:	3001      	adds	r0, #1
 800907e:	2806      	cmp	r0, #6
 8009080:	f105 051c 	add.w	r5, r5, #28
 8009084:	d1e4      	bne.n	8009050 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 8009086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800908a:	b002      	add	sp, #8
 800908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009090:	3401      	adds	r4, #1
 8009092:	e7e9      	b.n	8009068 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 8009094:	0801583c 	stmdaeq	r1, {r2, r3, r4, r5, fp, ip, lr}

08009098 <RemoteConfig::PlatformHandleTftpSet()>:
 8009098:	f890 1020 	ldrb.w	r1, [r0, #32]
 800909c:	b109      	cbz	r1, 80090a2 <RemoteConfig::PlatformHandleTftpSet()+0xa>
 800909e:	f24a 51a5 	movw	r1, #42405	; 0xa5a5
 80090a2:	2002      	movs	r0, #2
 80090a4:	f00a ba32 	b.w	801350c <bkp_data_write>

080090a8 <RemoteConfig::PlatformHandleTftpGet()>:
 80090a8:	b510      	push	{r4, lr}
 80090aa:	4604      	mov	r4, r0
 80090ac:	2002      	movs	r0, #2
 80090ae:	f00a fa43 	bl	8013538 <bkp_data_read>
 80090b2:	f24a 53a5 	movw	r3, #42405	; 0xa5a5
 80090b6:	1ac3      	subs	r3, r0, r3
 80090b8:	4258      	negs	r0, r3
 80090ba:	4158      	adcs	r0, r3
 80090bc:	f884 0020 	strb.w	r0, [r4, #32]
 80090c0:	bd10      	pop	{r4, pc}

080090c2 <strcmp>:
 80090c2:	1e43      	subs	r3, r0, #1
 80090c4:	3901      	subs	r1, #1
 80090c6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80090ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80090ce:	4290      	cmp	r0, r2
 80090d0:	d001      	beq.n	80090d6 <strcmp+0x14>
 80090d2:	1a80      	subs	r0, r0, r2
 80090d4:	e001      	b.n	80090da <strcmp+0x18>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d1f5      	bne.n	80090c6 <strcmp+0x4>
 80090da:	4770      	bx	lr

080090dc <strcasecmp>:
 80090dc:	b530      	push	{r4, r5, lr}
 80090de:	1e42      	subs	r2, r0, #1
 80090e0:	3901      	subs	r1, #1
 80090e2:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80090e6:	4604      	mov	r4, r0
 80090e8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80090ec:	2b19      	cmp	r3, #25
 80090ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090f2:	bf98      	it	ls
 80090f4:	f100 0420 	addls.w	r4, r0, #32
 80090f8:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 80090fc:	2d19      	cmp	r5, #25
 80090fe:	bf98      	it	ls
 8009100:	3320      	addls	r3, #32
 8009102:	42a3      	cmp	r3, r4
 8009104:	d001      	beq.n	800910a <strcasecmp+0x2e>
 8009106:	1ae0      	subs	r0, r4, r3
 8009108:	e001      	b.n	800910e <strcasecmp+0x32>
 800910a:	2800      	cmp	r0, #0
 800910c:	d1e9      	bne.n	80090e2 <strcasecmp+0x6>
 800910e:	bd30      	pop	{r4, r5, pc}

08009110 <PropertiesConfig::EnableJSON(bool)>:
 8009110:	4a04      	ldr	r2, [pc, #16]	; (8009124 <PropertiesConfig::EnableJSON(bool)+0x14>)
 8009112:	7813      	ldrb	r3, [r2, #0]
 8009114:	b118      	cbz	r0, 800911e <PropertiesConfig::EnableJSON(bool)+0xe>
 8009116:	f043 0301 	orr.w	r3, r3, #1
 800911a:	7013      	strb	r3, [r2, #0]
 800911c:	4770      	bx	lr
 800911e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009122:	e7fa      	b.n	800911a <PropertiesConfig::EnableJSON(bool)+0xa>
 8009124:	2000a13c 	andcs	sl, r0, ip, lsr r1

08009128 <HttpDaemon::HttpDaemon()>:
 8009128:	4a08      	ldr	r2, [pc, #32]	; (800914c <HttpDaemon::HttpDaemon()+0x24>)
 800912a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800912e:	6002      	str	r2, [r0, #0]
 8009130:	2200      	movs	r2, #0
 8009132:	f44f 7c02 	mov.w	ip, #520	; 0x208
 8009136:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800913a:	2102      	movs	r1, #2
 800913c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8009140:	e9c0 c106 	strd	ip, r1, [r0, #24]
 8009144:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8009148:	60c2      	str	r2, [r0, #12]
 800914a:	4770      	bx	lr
 800914c:	08015b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, ip, lr}

08009150 <HttpDaemon::Start()>:
 8009150:	4b04      	ldr	r3, [pc, #16]	; (8009164 <HttpDaemon::Start()+0x14>)
 8009152:	b510      	push	{r4, lr}
 8009154:	2150      	movs	r1, #80	; 0x50
 8009156:	4604      	mov	r4, r0
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	f007 fc17 	bl	801098c <Network::TcpBegin(unsigned short)>
 800915e:	6120      	str	r0, [r4, #16]
 8009160:	bd10      	pop	{r4, pc}
 8009162:	bf00      	nop
 8009164:	20009b68 	andcs	r9, r0, r8, ror #22

08009168 <HttpDaemon::ParseMethod(char*)>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4604      	mov	r4, r0
 800916c:	4608      	mov	r0, r1
 800916e:	491a      	ldr	r1, [pc, #104]	; (80091d8 <HttpDaemon::ParseMethod(char*)+0x70>)
 8009170:	f00a f804 	bl	801317c <strtok>
 8009174:	4605      	mov	r5, r0
 8009176:	b360      	cbz	r0, 80091d2 <HttpDaemon::ParseMethod(char*)+0x6a>
 8009178:	4918      	ldr	r1, [pc, #96]	; (80091dc <HttpDaemon::ParseMethod(char*)+0x74>)
 800917a:	f7ff ffa2 	bl	80090c2 <strcmp>
 800917e:	b128      	cbz	r0, 800918c <HttpDaemon::ParseMethod(char*)+0x24>
 8009180:	4628      	mov	r0, r5
 8009182:	4917      	ldr	r1, [pc, #92]	; (80091e0 <HttpDaemon::ParseMethod(char*)+0x78>)
 8009184:	f7ff ff9d 	bl	80090c2 <strcmp>
 8009188:	bb18      	cbnz	r0, 80091d2 <HttpDaemon::ParseMethod(char*)+0x6a>
 800918a:	2001      	movs	r0, #1
 800918c:	61e0      	str	r0, [r4, #28]
 800918e:	4912      	ldr	r1, [pc, #72]	; (80091d8 <HttpDaemon::ParseMethod(char*)+0x70>)
 8009190:	2000      	movs	r0, #0
 8009192:	f009 fff3 	bl	801317c <strtok>
 8009196:	b910      	cbnz	r0, 800919e <HttpDaemon::ParseMethod(char*)+0x36>
 8009198:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800919c:	bd38      	pop	{r3, r4, r5, pc}
 800919e:	6060      	str	r0, [r4, #4]
 80091a0:	4910      	ldr	r1, [pc, #64]	; (80091e4 <HttpDaemon::ParseMethod(char*)+0x7c>)
 80091a2:	2000      	movs	r0, #0
 80091a4:	f009 ffea 	bl	801317c <strtok>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d0f5      	beq.n	8009198 <HttpDaemon::ParseMethod(char*)+0x30>
 80091ac:	490e      	ldr	r1, [pc, #56]	; (80091e8 <HttpDaemon::ParseMethod(char*)+0x80>)
 80091ae:	f7ff ff88 	bl	80090c2 <strcmp>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d1f0      	bne.n	8009198 <HttpDaemon::ParseMethod(char*)+0x30>
 80091b6:	490d      	ldr	r1, [pc, #52]	; (80091ec <HttpDaemon::ParseMethod(char*)+0x84>)
 80091b8:	f009 ffe0 	bl	801317c <strtok>
 80091bc:	2800      	cmp	r0, #0
 80091be:	d0eb      	beq.n	8009198 <HttpDaemon::ParseMethod(char*)+0x30>
 80091c0:	490b      	ldr	r1, [pc, #44]	; (80091f0 <HttpDaemon::ParseMethod(char*)+0x88>)
 80091c2:	f7ff ff7e 	bl	80090c2 <strcmp>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f240 10f9 	movw	r0, #505	; 0x1f9
 80091cc:	bf08      	it	eq
 80091ce:	20c8      	moveq	r0, #200	; 0xc8
 80091d0:	e7e4      	b.n	800919c <HttpDaemon::ParseMethod(char*)+0x34>
 80091d2:	f240 10f5 	movw	r0, #501	; 0x1f5
 80091d6:	e7e1      	b.n	800919c <HttpDaemon::ParseMethod(char*)+0x34>
 80091d8:	0801711b 	stmdaeq	r1, {r0, r1, r3, r4, r8, ip, sp, lr}
 80091dc:	080158e4 	stmdaeq	r1, {r2, r5, r6, r7, fp, ip, lr}
 80091e0:	080158e8 	stmdaeq	r1, {r3, r5, r6, r7, fp, ip, lr}
 80091e4:	08015952 	stmdaeq	r1, {r1, r4, r6, r8, fp, ip, lr}
 80091e8:	080158ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, fp, ip, lr}
 80091ec:	080158f2 	stmdaeq	r1, {r1, r4, r5, r6, r7, fp, ip, lr}
 80091f0:	080158f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, fp, ip, lr}

080091f4 <HttpDaemon::ParseHeaderField(char*)>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4605      	mov	r5, r0
 80091f8:	4608      	mov	r0, r1
 80091fa:	491d      	ldr	r1, [pc, #116]	; (8009270 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 80091fc:	f009 ffbe 	bl	801317c <strtok>
 8009200:	4604      	mov	r4, r0
 8009202:	b910      	cbnz	r0, 800920a <HttpDaemon::ParseHeaderField(char*)+0x16>
 8009204:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009208:	bd38      	pop	{r3, r4, r5, pc}
 800920a:	491a      	ldr	r1, [pc, #104]	; (8009274 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800920c:	f7ff ff66 	bl	80090dc <strcasecmp>
 8009210:	b970      	cbnz	r0, 8009230 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 8009212:	4919      	ldr	r1, [pc, #100]	; (8009278 <HttpDaemon::ParseHeaderField(char*)+0x84>)
 8009214:	f009 ffb2 	bl	801317c <strtok>
 8009218:	2800      	cmp	r0, #0
 800921a:	d0f3      	beq.n	8009204 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800921c:	4917      	ldr	r1, [pc, #92]	; (800927c <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800921e:	f7ff ff50 	bl	80090c2 <strcmp>
 8009222:	b108      	cbz	r0, 8009228 <HttpDaemon::ParseHeaderField(char*)+0x34>
 8009224:	20c8      	movs	r0, #200	; 0xc8
 8009226:	e7ef      	b.n	8009208 <HttpDaemon::ParseHeaderField(char*)+0x14>
 8009228:	2301      	movs	r3, #1
 800922a:	f885 3020 	strb.w	r3, [r5, #32]
 800922e:	e7f9      	b.n	8009224 <HttpDaemon::ParseHeaderField(char*)+0x30>
 8009230:	4620      	mov	r0, r4
 8009232:	4913      	ldr	r1, [pc, #76]	; (8009280 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 8009234:	f7ff ff52 	bl	80090dc <strcasecmp>
 8009238:	4604      	mov	r4, r0
 800923a:	2800      	cmp	r0, #0
 800923c:	d1f2      	bne.n	8009224 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800923e:	4911      	ldr	r1, [pc, #68]	; (8009284 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 8009240:	f009 ff9c 	bl	801317c <strtok>
 8009244:	2800      	cmp	r0, #0
 8009246:	d0dd      	beq.n	8009204 <HttpDaemon::ParseHeaderField(char*)+0x10>
 8009248:	1e42      	subs	r2, r0, #1
 800924a:	4623      	mov	r3, r4
 800924c:	200a      	movs	r0, #10
 800924e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009252:	b909      	cbnz	r1, 8009258 <HttpDaemon::ParseHeaderField(char*)+0x64>
 8009254:	84eb      	strh	r3, [r5, #38]	; 0x26
 8009256:	e7e5      	b.n	8009224 <HttpDaemon::ParseHeaderField(char*)+0x30>
 8009258:	3930      	subs	r1, #48	; 0x30
 800925a:	2909      	cmp	r1, #9
 800925c:	d8d2      	bhi.n	8009204 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800925e:	fb00 1303 	mla	r3, r0, r3, r1
 8009262:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8009266:	d9f2      	bls.n	800924e <HttpDaemon::ParseHeaderField(char*)+0x5a>
 8009268:	f240 109d 	movw	r0, #413	; 0x19d
 800926c:	e7cc      	b.n	8009208 <HttpDaemon::ParseHeaderField(char*)+0x14>
 800926e:	bf00      	nop
 8009270:	080158f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, fp, ip, lr}
 8009274:	080158fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, fp, ip, lr}
 8009278:	08015908 	stmdaeq	r1, {r3, r8, fp, ip, lr}
 800927c:	0801590b 	stmdaeq	r1, {r0, r1, r3, r8, fp, ip, lr}
 8009280:	0801591c 	stmdaeq	r1, {r2, r3, r4, r8, fp, ip, lr}
 8009284:	0801711b 	stmdaeq	r1, {r0, r1, r3, r4, r8, ip, sp, lr}

08009288 <HttpDaemon::ParseRequest()>:
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928a:	2400      	movs	r4, #0
 800928c:	4605      	mov	r5, r0
 800928e:	4622      	mov	r2, r4
 8009290:	4626      	mov	r6, r4
 8009292:	68c1      	ldr	r1, [r0, #12]
 8009294:	f880 4020 	strb.w	r4, [r0, #32]
 8009298:	6244      	str	r4, [r0, #36]	; 0x24
 800929a:	8aab      	ldrh	r3, [r5, #20]
 800929c:	42a3      	cmp	r3, r4
 800929e:	d91d      	bls.n	80092dc <HttpDaemon::ParseRequest()+0x54>
 80092a0:	68eb      	ldr	r3, [r5, #12]
 80092a2:	5d18      	ldrb	r0, [r3, r4]
 80092a4:	280a      	cmp	r0, #10
 80092a6:	d10e      	bne.n	80092c6 <HttpDaemon::ParseRequest()+0x3e>
 80092a8:	4423      	add	r3, r4
 80092aa:	f803 6c01 	strb.w	r6, [r3, #-1]
 80092ae:	1c57      	adds	r7, r2, #1
 80092b0:	b962      	cbnz	r2, 80092cc <HttpDaemon::ParseRequest()+0x44>
 80092b2:	4628      	mov	r0, r5
 80092b4:	f7ff ff58 	bl	8009168 <HttpDaemon::ParseMethod(char*)>
 80092b8:	28c8      	cmp	r0, #200	; 0xc8
 80092ba:	d110      	bne.n	80092de <HttpDaemon::ParseRequest()+0x56>
 80092bc:	463a      	mov	r2, r7
 80092be:	68e9      	ldr	r1, [r5, #12]
 80092c0:	3401      	adds	r4, #1
 80092c2:	b2a4      	uxth	r4, r4
 80092c4:	4421      	add	r1, r4
 80092c6:	3401      	adds	r4, #1
 80092c8:	b2a4      	uxth	r4, r4
 80092ca:	e7e6      	b.n	800929a <HttpDaemon::ParseRequest()+0x12>
 80092cc:	7808      	ldrb	r0, [r1, #0]
 80092ce:	b968      	cbnz	r0, 80092ec <HttpDaemon::ParseRequest()+0x64>
 80092d0:	696b      	ldr	r3, [r5, #20]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	1b1b      	subs	r3, r3, r4
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	84ab      	strh	r3, [r5, #36]	; 0x24
 80092da:	b90b      	cbnz	r3, 80092e0 <HttpDaemon::ParseRequest()+0x58>
 80092dc:	20c8      	movs	r0, #200	; 0xc8
 80092de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092e0:	68ea      	ldr	r2, [r5, #12]
 80092e2:	3401      	adds	r4, #1
 80092e4:	4414      	add	r4, r2
 80092e6:	60ac      	str	r4, [r5, #8]
 80092e8:	54e0      	strb	r0, [r4, r3]
 80092ea:	e7f7      	b.n	80092dc <HttpDaemon::ParseRequest()+0x54>
 80092ec:	4628      	mov	r0, r5
 80092ee:	f7ff ff81 	bl	80091f4 <HttpDaemon::ParseHeaderField(char*)>
 80092f2:	e7e1      	b.n	80092b8 <HttpDaemon::ParseRequest()+0x30>

080092f4 <HttpDaemon::HandleGetTxt()>:
 80092f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f8:	6846      	ldr	r6, [r0, #4]
 80092fa:	4607      	mov	r7, r0
 80092fc:	1db4      	adds	r4, r6, #6
 80092fe:	4622      	mov	r2, r4
 8009300:	4613      	mov	r3, r2
 8009302:	7819      	ldrb	r1, [r3, #0]
 8009304:	3201      	adds	r2, #1
 8009306:	2900      	cmp	r1, #0
 8009308:	d1fa      	bne.n	8009300 <HttpDaemon::HandleGetTxt()+0xc>
 800930a:	1b1b      	subs	r3, r3, r4
 800930c:	2b04      	cmp	r3, #4
 800930e:	d803      	bhi.n	8009318 <HttpDaemon::HandleGetTxt()+0x24>
 8009310:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	3b04      	subs	r3, #4
 800931a:	4914      	ldr	r1, [pc, #80]	; (800936c <HttpDaemon::HandleGetTxt()+0x78>)
 800931c:	18e0      	adds	r0, r4, r3
 800931e:	f7ff fed0 	bl	80090c2 <strcmp>
 8009322:	2800      	cmp	r0, #0
 8009324:	d1f4      	bne.n	8009310 <HttpDaemon::HandleGetTxt()+0x1c>
 8009326:	4b12      	ldr	r3, [pc, #72]	; (8009370 <HttpDaemon::HandleGetTxt()+0x7c>)
 8009328:	2001      	movs	r0, #1
 800932a:	f893 8000 	ldrb.w	r8, [r3]
 800932e:	f7ff feef 	bl	8009110 <PropertiesConfig::EnableJSON(bool)>
 8009332:	4b10      	ldr	r3, [pc, #64]	; (8009374 <HttpDaemon::HandleGetTxt()+0x80>)
 8009334:	f240 529b 	movw	r2, #1435	; 0x59b
 8009338:	4621      	mov	r1, r4
 800933a:	6818      	ldr	r0, [r3, #0]
 800933c:	f7ff fa68 	bl	8008810 <RemoteConfig::HandleGet(void*, unsigned int)>
 8009340:	4605      	mov	r5, r0
 8009342:	f008 0801 	and.w	r8, r8, #1
 8009346:	4640      	mov	r0, r8
 8009348:	f7ff fee2 	bl	8009110 <PropertiesConfig::EnableJSON(bool)>
 800934c:	2d00      	cmp	r5, #0
 800934e:	d0df      	beq.n	8009310 <HttpDaemon::HandleGetTxt()+0x1c>
 8009350:	847d      	strh	r5, [r7, #34]	; 0x22
 8009352:	4b09      	ldr	r3, [pc, #36]	; (8009378 <HttpDaemon::HandleGetTxt()+0x84>)
 8009354:	3506      	adds	r5, #6
 8009356:	442e      	add	r6, r5
 8009358:	42b4      	cmp	r4, r6
 800935a:	d101      	bne.n	8009360 <HttpDaemon::HandleGetTxt()+0x6c>
 800935c:	20c8      	movs	r0, #200	; 0xc8
 800935e:	e7d9      	b.n	8009314 <HttpDaemon::HandleGetTxt()+0x20>
 8009360:	f814 2b01 	ldrb.w	r2, [r4], #1
 8009364:	f803 2b01 	strb.w	r2, [r3], #1
 8009368:	e7f6      	b.n	8009358 <HttpDaemon::HandleGetTxt()+0x64>
 800936a:	bf00      	nop
 800936c:	0801582c 	stmdaeq	r1, {r2, r3, r5, fp, ip, lr}
 8009370:	2000a13c 	andcs	sl, r0, ip, lsr r1
 8009374:	20000124 	andcs	r0, r0, r4, lsr #2
 8009378:	20000128 	andcs	r0, r0, r8, lsr #2

0800937c <HttpDaemon::HandleGet()>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	6845      	ldr	r5, [r0, #4]
 8009380:	4604      	mov	r4, r0
 8009382:	493e      	ldr	r1, [pc, #248]	; (800947c <HttpDaemon::HandleGet()+0x100>)
 8009384:	4628      	mov	r0, r5
 8009386:	f7ff fe9c 	bl	80090c2 <strcmp>
 800938a:	b120      	cbz	r0, 8009396 <HttpDaemon::HandleGet()+0x1a>
 800938c:	4628      	mov	r0, r5
 800938e:	493c      	ldr	r1, [pc, #240]	; (8009480 <HttpDaemon::HandleGet()+0x104>)
 8009390:	f7ff fe97 	bl	80090c2 <strcmp>
 8009394:	b950      	cbnz	r0, 80093ac <HttpDaemon::HandleGet()+0x30>
 8009396:	4b3b      	ldr	r3, [pc, #236]	; (8009484 <HttpDaemon::HandleGet()+0x108>)
 8009398:	493b      	ldr	r1, [pc, #236]	; (8009488 <HttpDaemon::HandleGet()+0x10c>)
 800939a:	483c      	ldr	r0, [pc, #240]	; (800948c <HttpDaemon::HandleGet()+0x110>)
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	f000 fa67 	bl	8009870 <get_file_content(char const*, char*)>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	dd2f      	ble.n	8009406 <HttpDaemon::HandleGet()+0x8a>
 80093a6:	8460      	strh	r0, [r4, #34]	; 0x22
 80093a8:	20c8      	movs	r0, #200	; 0xc8
 80093aa:	bd70      	pop	{r4, r5, r6, pc}
 80093ac:	4628      	mov	r0, r5
 80093ae:	4938      	ldr	r1, [pc, #224]	; (8009490 <HttpDaemon::HandleGet()+0x114>)
 80093b0:	f7ff fe87 	bl	80090c2 <strcmp>
 80093b4:	b920      	cbnz	r0, 80093c0 <HttpDaemon::HandleGet()+0x44>
 80093b6:	4b37      	ldr	r3, [pc, #220]	; (8009494 <HttpDaemon::HandleGet()+0x118>)
 80093b8:	4933      	ldr	r1, [pc, #204]	; (8009488 <HttpDaemon::HandleGet()+0x10c>)
 80093ba:	4837      	ldr	r0, [pc, #220]	; (8009498 <HttpDaemon::HandleGet()+0x11c>)
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	e7ee      	b.n	800939e <HttpDaemon::HandleGet()+0x22>
 80093c0:	4628      	mov	r0, r5
 80093c2:	4936      	ldr	r1, [pc, #216]	; (800949c <HttpDaemon::HandleGet()+0x120>)
 80093c4:	f7ff fe7d 	bl	80090c2 <strcmp>
 80093c8:	b190      	cbz	r0, 80093f0 <HttpDaemon::HandleGet()+0x74>
 80093ca:	4a35      	ldr	r2, [pc, #212]	; (80094a0 <HttpDaemon::HandleGet()+0x124>)
 80093cc:	1e6b      	subs	r3, r5, #1
 80093ce:	1d69      	adds	r1, r5, #5
 80093d0:	428b      	cmp	r3, r1
 80093d2:	d112      	bne.n	80093fa <HttpDaemon::HandleGet()+0x7e>
 80093d4:	4b33      	ldr	r3, [pc, #204]	; (80094a4 <HttpDaemon::HandleGet()+0x128>)
 80093d6:	3506      	adds	r5, #6
 80093d8:	4628      	mov	r0, r5
 80093da:	4933      	ldr	r1, [pc, #204]	; (80094a8 <HttpDaemon::HandleGet()+0x12c>)
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	f7ff fe70 	bl	80090c2 <strcmp>
 80093e2:	b998      	cbnz	r0, 800940c <HttpDaemon::HandleGet()+0x90>
 80093e4:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 80093e8:	4827      	ldr	r0, [pc, #156]	; (8009488 <HttpDaemon::HandleGet()+0x10c>)
 80093ea:	f000 f9c9 	bl	8009780 <remoteconfig::json_get_list(char*, unsigned short)>
 80093ee:	e7d8      	b.n	80093a2 <HttpDaemon::HandleGet()+0x26>
 80093f0:	4b2e      	ldr	r3, [pc, #184]	; (80094ac <HttpDaemon::HandleGet()+0x130>)
 80093f2:	4925      	ldr	r1, [pc, #148]	; (8009488 <HttpDaemon::HandleGet()+0x10c>)
 80093f4:	482e      	ldr	r0, [pc, #184]	; (80094b0 <HttpDaemon::HandleGet()+0x134>)
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	e7d1      	b.n	800939e <HttpDaemon::HandleGet()+0x22>
 80093fa:	f812 0b01 	ldrb.w	r0, [r2], #1
 80093fe:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 8009402:	4286      	cmp	r6, r0
 8009404:	d0e4      	beq.n	80093d0 <HttpDaemon::HandleGet()+0x54>
 8009406:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800940a:	e7ce      	b.n	80093aa <HttpDaemon::HandleGet()+0x2e>
 800940c:	4628      	mov	r0, r5
 800940e:	4929      	ldr	r1, [pc, #164]	; (80094b4 <HttpDaemon::HandleGet()+0x138>)
 8009410:	f7ff fe57 	bl	80090c2 <strcmp>
 8009414:	b928      	cbnz	r0, 8009422 <HttpDaemon::HandleGet()+0xa6>
 8009416:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800941a:	481b      	ldr	r0, [pc, #108]	; (8009488 <HttpDaemon::HandleGet()+0x10c>)
 800941c:	f000 f9e4 	bl	80097e8 <remoteconfig::json_get_version(char*, unsigned short)>
 8009420:	e7bf      	b.n	80093a2 <HttpDaemon::HandleGet()+0x26>
 8009422:	4628      	mov	r0, r5
 8009424:	4924      	ldr	r1, [pc, #144]	; (80094b8 <HttpDaemon::HandleGet()+0x13c>)
 8009426:	f7ff fe4c 	bl	80090c2 <strcmp>
 800942a:	b948      	cbnz	r0, 8009440 <HttpDaemon::HandleGet()+0xc4>
 800942c:	4b23      	ldr	r3, [pc, #140]	; (80094bc <HttpDaemon::HandleGet()+0x140>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	7bdb      	ldrb	r3, [r3, #15]
 8009432:	b303      	cbz	r3, 8009476 <HttpDaemon::HandleGet()+0xfa>
 8009434:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8009438:	4813      	ldr	r0, [pc, #76]	; (8009488 <HttpDaemon::HandleGet()+0x10c>)
 800943a:	f000 f9f1 	bl	8009820 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800943e:	e7b0      	b.n	80093a2 <HttpDaemon::HandleGet()+0x26>
 8009440:	4628      	mov	r0, r5
 8009442:	491f      	ldr	r1, [pc, #124]	; (80094c0 <HttpDaemon::HandleGet()+0x144>)
 8009444:	f7ff fe3d 	bl	80090c2 <strcmp>
 8009448:	b928      	cbnz	r0, 8009456 <HttpDaemon::HandleGet()+0xda>
 800944a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800944e:	480e      	ldr	r0, [pc, #56]	; (8009488 <HttpDaemon::HandleGet()+0x10c>)
 8009450:	f000 f9f6 	bl	8009840 <remoteconfig::json_get_display(char*, unsigned short)>
 8009454:	e7a5      	b.n	80093a2 <HttpDaemon::HandleGet()+0x26>
 8009456:	4628      	mov	r0, r5
 8009458:	491a      	ldr	r1, [pc, #104]	; (80094c4 <HttpDaemon::HandleGet()+0x148>)
 800945a:	f7ff fe32 	bl	80090c2 <strcmp>
 800945e:	b928      	cbnz	r0, 800946c <HttpDaemon::HandleGet()+0xf0>
 8009460:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8009464:	4808      	ldr	r0, [pc, #32]	; (8009488 <HttpDaemon::HandleGet()+0x10c>)
 8009466:	f000 f9fb 	bl	8009860 <remoteconfig::json_get_directory(char*, unsigned short)>
 800946a:	e79a      	b.n	80093a2 <HttpDaemon::HandleGet()+0x26>
 800946c:	4620      	mov	r0, r4
 800946e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009472:	f7ff bf3f 	b.w	80092f4 <HttpDaemon::HandleGetTxt()>
 8009476:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800947a:	e796      	b.n	80093aa <HttpDaemon::HandleGet()+0x2e>
 800947c:	08015952 	stmdaeq	r1, {r1, r4, r6, r8, fp, ip, lr}
 8009480:	0801592b 	stmdaeq	r1, {r0, r1, r3, r5, r8, fp, ip, lr}
 8009484:	08015b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, ip, lr}
 8009488:	20000128 	andcs	r0, r0, r8, lsr #2
 800948c:	0801592c 	stmdaeq	r1, {r2, r3, r5, r8, fp, ip, lr}
 8009490:	08015937 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, fp, ip, lr}
 8009494:	08015b69 	stmdaeq	r1, {r0, r3, r5, r6, r8, r9, fp, ip, lr}
 8009498:	08015938 	stmdaeq	r1, {r3, r4, r5, r8, fp, ip, lr}
 800949c:	08015943 	stmdaeq	r1, {r0, r1, r6, r8, fp, ip, lr}
 80094a0:	0801594d 	stmdaeq	r1, {r0, r2, r3, r6, r8, fp, ip, lr}
 80094a4:	08015ba9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, fp, ip, lr}
 80094a8:	08015954 	stmdaeq	r1, {r2, r4, r6, r8, fp, ip, lr}
 80094ac:	08015b89 	stmdaeq	r1, {r0, r3, r7, r8, r9, fp, ip, lr}
 80094b0:	08015944 	stmdaeq	r1, {r2, r6, r8, fp, ip, lr}
 80094b4:	08015959 	stmdaeq	r1, {r0, r3, r4, r6, r8, fp, ip, lr}
 80094b8:	08015961 	stmdaeq	r1, {r0, r5, r6, r8, fp, ip, lr}
 80094bc:	20000124 	andcs	r0, r0, r4, lsr #2
 80094c0:	08015968 	stmdaeq	r1, {r3, r5, r6, r8, fp, ip, lr}
 80094c4:	08015970 	stmdaeq	r1, {r4, r5, r6, r8, fp, ip, lr}

080094c8 <HttpDaemon::HandlePost(bool)>:
 80094c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094ca:	4604      	mov	r4, r0
 80094cc:	2900      	cmp	r1, #0
 80094ce:	f040 808a 	bne.w	80095e6 <HttpDaemon::HandlePost(bool)+0x11e>
 80094d2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d05a      	beq.n	8009590 <HttpDaemon::HandlePost(bool)+0xc8>
 80094da:	6845      	ldr	r5, [r0, #4]
 80094dc:	4944      	ldr	r1, [pc, #272]	; (80095f0 <HttpDaemon::HandlePost(bool)+0x128>)
 80094de:	4628      	mov	r0, r5
 80094e0:	f7ff fdef 	bl	80090c2 <strcmp>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	bf0c      	ite	eq
 80094e8:	2301      	moveq	r3, #1
 80094ea:	2300      	movne	r3, #0
 80094ec:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 80094f0:	d052      	beq.n	8009598 <HttpDaemon::HandlePost(bool)+0xd0>
 80094f2:	4628      	mov	r0, r5
 80094f4:	493f      	ldr	r1, [pc, #252]	; (80095f4 <HttpDaemon::HandlePost(bool)+0x12c>)
 80094f6:	f7ff fde4 	bl	80090c2 <strcmp>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d04c      	beq.n	8009598 <HttpDaemon::HandlePost(bool)+0xd0>
 80094fe:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8009502:	e047      	b.n	8009594 <HttpDaemon::HandlePost(bool)+0xcc>
 8009504:	493c      	ldr	r1, [pc, #240]	; (80095f8 <HttpDaemon::HandlePost(bool)+0x130>)
 8009506:	68a0      	ldr	r0, [r4, #8]
 8009508:	f10d 0207 	add.w	r2, sp, #7
 800950c:	f008 fe72 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009510:	b9d8      	cbnz	r0, 800954a <HttpDaemon::HandlePost(bool)+0x82>
 8009512:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8009516:	4b39      	ldr	r3, [pc, #228]	; (80095fc <HttpDaemon::HandlePost(bool)+0x134>)
 8009518:	fab6 f186 	clz	r1, r6
 800951c:	681d      	ldr	r5, [r3, #0]
 800951e:	0949      	lsrs	r1, r1, #5
 8009520:	69a8      	ldr	r0, [r5, #24]
 8009522:	b138      	cbz	r0, 8009534 <HttpDaemon::HandlePost(bool)+0x6c>
 8009524:	6803      	ldr	r3, [r0, #0]
 8009526:	7429      	strb	r1, [r5, #16]
 8009528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952a:	4798      	blx	r3
 800952c:	b116      	cbz	r6, 8009534 <HttpDaemon::HandlePost(bool)+0x6c>
 800952e:	4b34      	ldr	r3, [pc, #208]	; (8009600 <HttpDaemon::HandlePost(bool)+0x138>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	606b      	str	r3, [r5, #4]
 8009534:	4b33      	ldr	r3, [pc, #204]	; (8009604 <HttpDaemon::HandlePost(bool)+0x13c>)
 8009536:	f240 519f 	movw	r1, #1439	; 0x59f
 800953a:	4a33      	ldr	r2, [pc, #204]	; (8009608 <HttpDaemon::HandlePost(bool)+0x140>)
 800953c:	4833      	ldr	r0, [pc, #204]	; (800960c <HttpDaemon::HandlePost(bool)+0x144>)
 800953e:	6023      	str	r3, [r4, #0]
 8009540:	f009 fdec 	bl	801311c <snprintf>
 8009544:	8460      	strh	r0, [r4, #34]	; 0x22
 8009546:	20c8      	movs	r0, #200	; 0xc8
 8009548:	e024      	b.n	8009594 <HttpDaemon::HandlePost(bool)+0xcc>
 800954a:	4931      	ldr	r1, [pc, #196]	; (8009610 <HttpDaemon::HandlePost(bool)+0x148>)
 800954c:	68a0      	ldr	r0, [r4, #8]
 800954e:	f10d 0207 	add.w	r2, sp, #7
 8009552:	f008 fe4f 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8009556:	b9d8      	cbnz	r0, 8009590 <HttpDaemon::HandlePost(bool)+0xc8>
 8009558:	4b2e      	ldr	r3, [pc, #184]	; (8009614 <HttpDaemon::HandlePost(bool)+0x14c>)
 800955a:	6818      	ldr	r0, [r3, #0]
 800955c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009560:	b11b      	cbz	r3, 800956a <HttpDaemon::HandlePost(bool)+0xa2>
 8009562:	2104      	movs	r1, #4
 8009564:	f009 f9e0 	bl	8012928 <LedBlink::SetMode(ledblink::Mode)>
 8009568:	e7e4      	b.n	8009534 <HttpDaemon::HandlePost(bool)+0x6c>
 800956a:	2102      	movs	r1, #2
 800956c:	e7fa      	b.n	8009564 <HttpDaemon::HandlePost(bool)+0x9c>
 800956e:	4b2a      	ldr	r3, [pc, #168]	; (8009618 <HttpDaemon::HandlePost(bool)+0x150>)
 8009570:	2001      	movs	r0, #1
 8009572:	781d      	ldrb	r5, [r3, #0]
 8009574:	f7ff fdcc 	bl	8009110 <PropertiesConfig::EnableJSON(bool)>
 8009578:	4b28      	ldr	r3, [pc, #160]	; (800961c <HttpDaemon::HandlePost(bool)+0x154>)
 800957a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800957c:	6818      	ldr	r0, [r3, #0]
 800957e:	68a1      	ldr	r1, [r4, #8]
 8009580:	f005 0501 	and.w	r5, r5, #1
 8009584:	f7ff fa28 	bl	80089d8 <RemoteConfig::HandleSet(void*, unsigned int)>
 8009588:	4628      	mov	r0, r5
 800958a:	f7ff fdc1 	bl	8009110 <PropertiesConfig::EnableJSON(bool)>
 800958e:	e7d1      	b.n	8009534 <HttpDaemon::HandlePost(bool)+0x6c>
 8009590:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009594:	b002      	add	sp, #8
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800959a:	6962      	ldr	r2, [r4, #20]
 800959c:	429a      	cmp	r2, r3
 800959e:	dbd2      	blt.n	8009546 <HttpDaemon::HandlePost(bool)+0x7e>
 80095a0:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0cf      	beq.n	8009546 <HttpDaemon::HandlePost(bool)+0x7e>
 80095a6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0df      	beq.n	800956e <HttpDaemon::HandlePost(bool)+0xa6>
 80095ae:	2201      	movs	r2, #1
 80095b0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 80095b2:	68a0      	ldr	r0, [r4, #8]
 80095b4:	f008 fc1c 	bl	8011df0 <properties::convert_json_file(char*, unsigned short, bool)>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	dde9      	ble.n	8009590 <HttpDaemon::HandlePost(bool)+0xc8>
 80095bc:	4918      	ldr	r1, [pc, #96]	; (8009620 <HttpDaemon::HandlePost(bool)+0x158>)
 80095be:	68a0      	ldr	r0, [r4, #8]
 80095c0:	f10d 0207 	add.w	r2, sp, #7
 80095c4:	f008 fe16 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d19b      	bne.n	8009504 <HttpDaemon::HandlePost(bool)+0x3c>
 80095cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0af      	beq.n	8009534 <HttpDaemon::HandlePost(bool)+0x6c>
 80095d4:	4b11      	ldr	r3, [pc, #68]	; (800961c <HttpDaemon::HandlePost(bool)+0x154>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	7b9b      	ldrb	r3, [r3, #14]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0d8      	beq.n	8009590 <HttpDaemon::HandlePost(bool)+0xc8>
 80095de:	4b11      	ldr	r3, [pc, #68]	; (8009624 <HttpDaemon::HandlePost(bool)+0x15c>)
 80095e0:	6818      	ldr	r0, [r3, #0]
 80095e2:	f009 fa43 	bl	8012a6c <Hardware::Reboot()>
 80095e6:	68c3      	ldr	r3, [r0, #12]
 80095e8:	6083      	str	r3, [r0, #8]
 80095ea:	6943      	ldr	r3, [r0, #20]
 80095ec:	8483      	strh	r3, [r0, #36]	; 0x24
 80095ee:	e7da      	b.n	80095a6 <HttpDaemon::HandlePost(bool)+0xde>
 80095f0:	0801597a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r8, fp, ip, lr}
 80095f4:	08015916 	stmdaeq	r1, {r1, r2, r4, r8, fp, ip, lr}
 80095f8:	08015968 	stmdaeq	r1, {r3, r5, r6, r8, fp, ip, lr}
 80095fc:	2000a140 	andcs	sl, r0, r0, asr #2
 8009600:	2000a24c 	andcs	sl, r0, ip, asr #4
 8009604:	08015b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, ip, lr}
 8009608:	08015997 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, fp, ip, lr}
 800960c:	20000128 	andcs	r0, r0, r8, lsr #2
 8009610:	0801598e 	stmdaeq	r1, {r1, r2, r3, r7, r8, fp, ip, lr}
 8009614:	2000a22c 	andcs	sl, r0, ip, lsr #4
 8009618:	2000a13c 	andcs	sl, r0, ip, lsr r1
 800961c:	20000124 	andcs	r0, r0, r4, lsr #2
 8009620:	08015987 	stmdaeq	r1, {r0, r1, r2, r7, r8, fp, ip, lr}
 8009624:	2000a230 	andcs	sl, r0, r0, lsr r2

08009628 <HttpDaemon::Run()>:
 8009628:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800962a:	4e46      	ldr	r6, [pc, #280]	; (8009744 <HttpDaemon::Run()+0x11c>)
 800962c:	4604      	mov	r4, r0
 800962e:	6901      	ldr	r1, [r0, #16]
 8009630:	f100 020c 	add.w	r2, r0, #12
 8009634:	6830      	ldr	r0, [r6, #0]
 8009636:	f007 f9ac 	bl	8010992 <Network::TcpRead(int, unsigned char const**)>
 800963a:	6160      	str	r0, [r4, #20]
 800963c:	2800      	cmp	r0, #0
 800963e:	d05b      	beq.n	80096f8 <HttpDaemon::Run()+0xd0>
 8009640:	69a3      	ldr	r3, [r4, #24]
 8009642:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8009646:	d159      	bne.n	80096fc <HttpDaemon::Run()+0xd4>
 8009648:	4620      	mov	r0, r4
 800964a:	f7ff fe1d 	bl	8009288 <HttpDaemon::ParseRequest()>
 800964e:	28c8      	cmp	r0, #200	; 0xc8
 8009650:	61a0      	str	r0, [r4, #24]
 8009652:	d106      	bne.n	8009662 <HttpDaemon::Run()+0x3a>
 8009654:	69e3      	ldr	r3, [r4, #28]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d142      	bne.n	80096e0 <HttpDaemon::Run()+0xb8>
 800965a:	4620      	mov	r0, r4
 800965c:	f7ff fe8e 	bl	800937c <HttpDaemon::HandleGet()>
 8009660:	61a0      	str	r0, [r4, #24]
 8009662:	69a3      	ldr	r3, [r4, #24]
 8009664:	2bc8      	cmp	r3, #200	; 0xc8
 8009666:	d06b      	beq.n	8009740 <HttpDaemon::Run()+0x118>
 8009668:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800966c:	d05e      	beq.n	800972c <HttpDaemon::Run()+0x104>
 800966e:	dc4e      	bgt.n	800970e <HttpDaemon::Run()+0xe6>
 8009670:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8009674:	d05c      	beq.n	8009730 <HttpDaemon::Run()+0x108>
 8009676:	f240 129d 	movw	r2, #413	; 0x19d
 800967a:	4293      	cmp	r3, r2
 800967c:	d05a      	beq.n	8009734 <HttpDaemon::Run()+0x10c>
 800967e:	4d32      	ldr	r5, [pc, #200]	; (8009748 <HttpDaemon::Run()+0x120>)
 8009680:	4a32      	ldr	r2, [pc, #200]	; (800974c <HttpDaemon::Run()+0x124>)
 8009682:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009686:	bf18      	it	ne
 8009688:	4615      	movne	r5, r2
 800968a:	4a31      	ldr	r2, [pc, #196]	; (8009750 <HttpDaemon::Run()+0x128>)
 800968c:	f240 519f 	movw	r1, #1439	; 0x59f
 8009690:	6022      	str	r2, [r4, #0]
 8009692:	e9cd 5500 	strd	r5, r5, [sp]
 8009696:	4a2f      	ldr	r2, [pc, #188]	; (8009754 <HttpDaemon::Run()+0x12c>)
 8009698:	482f      	ldr	r0, [pc, #188]	; (8009758 <HttpDaemon::Run()+0x130>)
 800969a:	f009 fd3f 	bl	801311c <snprintf>
 800969e:	8460      	strh	r0, [r4, #34]	; 0x22
 80096a0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80096a2:	f240 519f 	movw	r1, #1439	; 0x59f
 80096a6:	9303      	str	r3, [sp, #12]
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	4a2c      	ldr	r2, [pc, #176]	; (800975c <HttpDaemon::Run()+0x134>)
 80096ac:	9302      	str	r3, [sp, #8]
 80096ae:	4b2c      	ldr	r3, [pc, #176]	; (8009760 <HttpDaemon::Run()+0x138>)
 80096b0:	68e0      	ldr	r0, [r4, #12]
 80096b2:	e9cd 5300 	strd	r5, r3, [sp]
 80096b6:	69a3      	ldr	r3, [r4, #24]
 80096b8:	f009 fd30 	bl	801311c <snprintf>
 80096bc:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80096c0:	b283      	uxth	r3, r0
 80096c2:	6830      	ldr	r0, [r6, #0]
 80096c4:	f007 f969 	bl	801099a <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 80096c8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80096ca:	4a23      	ldr	r2, [pc, #140]	; (8009758 <HttpDaemon::Run()+0x130>)
 80096cc:	6921      	ldr	r1, [r4, #16]
 80096ce:	6830      	ldr	r0, [r6, #0]
 80096d0:	f007 f963 	bl	801099a <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 80096d4:	f44f 7202 	mov.w	r2, #520	; 0x208
 80096d8:	2302      	movs	r3, #2
 80096da:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80096de:	e00b      	b.n	80096f8 <HttpDaemon::Run()+0xd0>
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d1be      	bne.n	8009662 <HttpDaemon::Run()+0x3a>
 80096e4:	2100      	movs	r1, #0
 80096e6:	4620      	mov	r0, r4
 80096e8:	f7ff feee 	bl	80094c8 <HttpDaemon::HandlePost(bool)>
 80096ec:	28c8      	cmp	r0, #200	; 0xc8
 80096ee:	61a0      	str	r0, [r4, #24]
 80096f0:	d1b7      	bne.n	8009662 <HttpDaemon::Run()+0x3a>
 80096f2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1b4      	bne.n	8009662 <HttpDaemon::Run()+0x3a>
 80096f8:	b004      	add	sp, #16
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	2bc8      	cmp	r3, #200	; 0xc8
 80096fe:	d1b0      	bne.n	8009662 <HttpDaemon::Run()+0x3a>
 8009700:	69e1      	ldr	r1, [r4, #28]
 8009702:	2901      	cmp	r1, #1
 8009704:	d1ad      	bne.n	8009662 <HttpDaemon::Run()+0x3a>
 8009706:	4620      	mov	r0, r4
 8009708:	f7ff fede 	bl	80094c8 <HttpDaemon::HandlePost(bool)>
 800970c:	e7a8      	b.n	8009660 <HttpDaemon::Run()+0x38>
 800970e:	f240 12f5 	movw	r2, #501	; 0x1f5
 8009712:	4293      	cmp	r3, r2
 8009714:	d010      	beq.n	8009738 <HttpDaemon::Run()+0x110>
 8009716:	f240 12f9 	movw	r2, #505	; 0x1f9
 800971a:	4293      	cmp	r3, r2
 800971c:	d00e      	beq.n	800973c <HttpDaemon::Run()+0x114>
 800971e:	4d11      	ldr	r5, [pc, #68]	; (8009764 <HttpDaemon::Run()+0x13c>)
 8009720:	4a0a      	ldr	r2, [pc, #40]	; (800974c <HttpDaemon::Run()+0x124>)
 8009722:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009726:	bf18      	it	ne
 8009728:	4615      	movne	r5, r2
 800972a:	e7ae      	b.n	800968a <HttpDaemon::Run()+0x62>
 800972c:	4d0e      	ldr	r5, [pc, #56]	; (8009768 <HttpDaemon::Run()+0x140>)
 800972e:	e7ac      	b.n	800968a <HttpDaemon::Run()+0x62>
 8009730:	4d0e      	ldr	r5, [pc, #56]	; (800976c <HttpDaemon::Run()+0x144>)
 8009732:	e7aa      	b.n	800968a <HttpDaemon::Run()+0x62>
 8009734:	4d0e      	ldr	r5, [pc, #56]	; (8009770 <HttpDaemon::Run()+0x148>)
 8009736:	e7a8      	b.n	800968a <HttpDaemon::Run()+0x62>
 8009738:	4d0e      	ldr	r5, [pc, #56]	; (8009774 <HttpDaemon::Run()+0x14c>)
 800973a:	e7a6      	b.n	800968a <HttpDaemon::Run()+0x62>
 800973c:	4d0e      	ldr	r5, [pc, #56]	; (8009778 <HttpDaemon::Run()+0x150>)
 800973e:	e7a4      	b.n	800968a <HttpDaemon::Run()+0x62>
 8009740:	4d0e      	ldr	r5, [pc, #56]	; (800977c <HttpDaemon::Run()+0x154>)
 8009742:	e7ad      	b.n	80096a0 <HttpDaemon::Run()+0x78>
 8009744:	20009b68 	andcs	r9, r0, r8, ror #22
 8009748:	080159f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8, fp, ip, lr}
 800974c:	08015a7a 	stmdaeq	r1, {r1, r3, r4, r5, r6, r9, fp, ip, lr}
 8009750:	08015b49 	stmdaeq	r1, {r0, r3, r6, r8, r9, fp, ip, lr}
 8009754:	08015a8b 	stmdaeq	r1, {r0, r1, r3, r7, r9, fp, ip, lr}
 8009758:	20000128 	andcs	r0, r0, r8, lsr #2
 800975c:	08015ae6 	stmdaeq	r1, {r1, r2, r5, r6, r7, r9, fp, ip, lr}
 8009760:	08015b3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, fp, ip, lr}
 8009764:	08015a37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r9, fp, ip, lr}
 8009768:	08015a22 	stmdaeq	r1, {r1, r5, r9, fp, ip, lr}
 800976c:	080159ff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, fp, ip, lr}
 8009770:	08015a09 	stmdaeq	r1, {r0, r3, r9, fp, ip, lr}
 8009774:	08015a4d 	stmdaeq	r1, {r0, r2, r3, r6, r9, fp, ip, lr}
 8009778:	08015a64 	stmdaeq	r1, {r2, r5, r6, r9, fp, ip, lr}
 800977c:	08015a88 	stmdaeq	r1, {r3, r7, r9, fp, ip, lr}

08009780 <remoteconfig::json_get_list(char*, unsigned short)>:
 8009780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009784:	4b14      	ldr	r3, [pc, #80]	; (80097d8 <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 8009786:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80097dc <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	b088      	sub	sp, #32
 800978e:	4605      	mov	r5, r0
 8009790:	f8d8 0000 	ldr.w	r0, [r8]
 8009794:	695c      	ldr	r4, [r3, #20]
 8009796:	460e      	mov	r6, r1
 8009798:	f7fe ffea 	bl	8008770 <RemoteConfig::GetStringNode() const>
 800979c:	4607      	mov	r7, r0
 800979e:	f8d8 0000 	ldr.w	r0, [r8]
 80097a2:	f7fe fff1 	bl	8008788 <RemoteConfig::GetStringOutput() const>
 80097a6:	4b0e      	ldr	r3, [pc, #56]	; (80097e0 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 80097a8:	4631      	mov	r1, r6
 80097aa:	7a1a      	ldrb	r2, [r3, #8]
 80097ac:	3309      	adds	r3, #9
 80097ae:	9303      	str	r3, [sp, #12]
 80097b0:	0e23      	lsrs	r3, r4, #24
 80097b2:	9302      	str	r3, [sp, #8]
 80097b4:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80097b8:	9301      	str	r3, [sp, #4]
 80097ba:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80097be:	e9cd 0205 	strd	r0, r2, [sp, #20]
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	4628      	mov	r0, r5
 80097c6:	4a07      	ldr	r2, [pc, #28]	; (80097e4 <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 80097c8:	9704      	str	r7, [sp, #16]
 80097ca:	b2e3      	uxtb	r3, r4
 80097cc:	f009 fca6 	bl	801311c <snprintf>
 80097d0:	b280      	uxth	r0, r0
 80097d2:	b008      	add	sp, #32
 80097d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d8:	20009b68 	andcs	r9, r0, r8, ror #22
 80097dc:	20000124 	andcs	r0, r0, r4, lsr #2
 80097e0:	20000100 	andcs	r0, r0, r0, lsl #2
 80097e4:	08015c23 	stmdaeq	r1, {r0, r1, r5, sl, fp, ip, lr}

080097e8 <remoteconfig::json_get_version(char*, unsigned short)>:
 80097e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80097ea:	2208      	movs	r2, #8
 80097ec:	4b09      	ldr	r3, [pc, #36]	; (8009814 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 80097ee:	9204      	str	r2, [sp, #16]
 80097f0:	f1a3 020b 	sub.w	r2, r3, #11
 80097f4:	9203      	str	r2, [sp, #12]
 80097f6:	220b      	movs	r2, #11
 80097f8:	9202      	str	r2, [sp, #8]
 80097fa:	4a07      	ldr	r2, [pc, #28]	; (8009818 <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 80097fc:	9305      	str	r3, [sp, #20]
 80097fe:	3b0e      	subs	r3, #14
 8009800:	9201      	str	r2, [sp, #4]
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	4a05      	ldr	r2, [pc, #20]	; (800981c <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 8009806:	2303      	movs	r3, #3
 8009808:	f009 fc88 	bl	801311c <snprintf>
 800980c:	b280      	uxth	r0, r0
 800980e:	b007      	add	sp, #28
 8009810:	f85d fb04 	ldr.w	pc, [sp], #4
 8009814:	2000a1de 	ldrdcs	sl, [r0], -lr
 8009818:	08015b3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, fp, ip, lr}
 800981c:	08015c82 	stmdaeq	r1, {r1, r7, sl, fp, ip, lr}

08009820 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 8009820:	b508      	push	{r3, lr}
 8009822:	4b05      	ldr	r3, [pc, #20]	; (8009838 <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800982a:	fbb2 f3f3 	udiv	r3, r2, r3
 800982e:	4a03      	ldr	r2, [pc, #12]	; (800983c <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 8009830:	f009 fc74 	bl	801311c <snprintf>
 8009834:	b280      	uxth	r0, r0
 8009836:	bd08      	pop	{r3, pc}
 8009838:	2000a24c 	andcs	sl, r0, ip, asr #4
 800983c:	08015cc8 	stmdaeq	r1, {r3, r6, r7, sl, fp, ip, lr}

08009840 <remoteconfig::json_get_display(char*, unsigned short)>:
 8009840:	b508      	push	{r3, lr}
 8009842:	4b05      	ldr	r3, [pc, #20]	; (8009858 <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 8009844:	4a05      	ldr	r2, [pc, #20]	; (800985c <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	7c1b      	ldrb	r3, [r3, #16]
 800984a:	f083 0301 	eor.w	r3, r3, #1
 800984e:	f009 fc65 	bl	801311c <snprintf>
 8009852:	b280      	uxth	r0, r0
 8009854:	bd08      	pop	{r3, pc}
 8009856:	bf00      	nop
 8009858:	2000a140 	andcs	sl, r0, r0, asr #2
 800985c:	08015cd7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, sl, fp, ip, lr}

08009860 <remoteconfig::json_get_directory(char*, unsigned short)>:
 8009860:	b508      	push	{r3, lr}
 8009862:	4a02      	ldr	r2, [pc, #8]	; (800986c <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 8009864:	f009 fc5a 	bl	801311c <snprintf>
 8009868:	b280      	uxth	r0, r0
 800986a:	bd08      	pop	{r3, pc}
 800986c:	08015ce6 	stmdaeq	r1, {r1, r2, r5, r6, r7, sl, fp, ip, lr}

08009870 <get_file_content(char const*, char*)>:
 8009870:	2300      	movs	r3, #0
 8009872:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009874:	4a10      	ldr	r2, [pc, #64]	; (80098b8 <get_file_content(char const*, char*)+0x48>)
 8009876:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800987a:	1e46      	subs	r6, r0, #1
 800987c:	3c01      	subs	r4, #1
 800987e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8009882:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8009886:	42bd      	cmp	r5, r7
 8009888:	d005      	beq.n	8009896 <get_file_content(char const*, char*)+0x26>
 800988a:	3301      	adds	r3, #1
 800988c:	2b03      	cmp	r3, #3
 800988e:	d1f2      	bne.n	8009876 <get_file_content(char const*, char*)+0x6>
 8009890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009896:	2d00      	cmp	r5, #0
 8009898:	d1f1      	bne.n	800987e <get_file_content(char const*, char*)+0xe>
 800989a:	4608      	mov	r0, r1
 800989c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80098a0:	6853      	ldr	r3, [r2, #4]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80098a8:	f800 2b01 	strb.w	r2, [r0], #1
 80098ac:	2a00      	cmp	r2, #0
 80098ae:	d1f9      	bne.n	80098a4 <get_file_content(char const*, char*)+0x34>
 80098b0:	1a40      	subs	r0, r0, r1
 80098b2:	3801      	subs	r0, #1
 80098b4:	e7ee      	b.n	8009894 <get_file_content(char const*, char*)+0x24>
 80098b6:	bf00      	nop
 80098b8:	08016028 	stmdaeq	r1, {r3, r5, sp, lr}

080098bc <ArtNet4Node::IsStatusChanged()>:
 80098bc:	4603      	mov	r3, r0
 80098be:	f890 0e24 	ldrb.w	r0, [r0, #3620]	; 0xe24
 80098c2:	b110      	cbz	r0, 80098ca <ArtNet4Node::IsStatusChanged()+0xe>
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2e24 	strb.w	r2, [r3, #3620]	; 0xe24
 80098ca:	4770      	bx	lr

080098cc <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 80098cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ce:	4616      	mov	r6, r2
 80098d0:	1d07      	adds	r7, r0, #4
 80098d2:	4604      	mov	r4, r0
 80098d4:	4613      	mov	r3, r2
 80098d6:	4638      	mov	r0, r7
 80098d8:	f10d 0206 	add.w	r2, sp, #6
 80098dc:	460d      	mov	r5, r1
 80098de:	f000 fbfb 	bl	800a0d8 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 80098e2:	b1be      	cbz	r6, 8009914 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 80098e4:	b1b0      	cbz	r0, 8009914 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 80098e6:	2328      	movs	r3, #40	; 0x28
 80098e8:	fb03 4305 	mla	r3, r3, r5, r4
 80098ec:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d10f      	bne.n	8009914 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
 80098f4:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 80098f8:	b123      	cbz	r3, 8009904 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x38>
 80098fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80098fe:	3301      	adds	r3, #1
 8009900:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009904:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009908:	b933      	cbnz	r3, 8009918 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4c>
 800990a:	2202      	movs	r2, #2
 800990c:	4629      	mov	r1, r5
 800990e:	4638      	mov	r0, r7
 8009910:	f000 fc08 	bl	800a124 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 8009914:	b003      	add	sp, #12
 8009916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009918:	1e71      	subs	r1, r6, #1
 800991a:	424a      	negs	r2, r1
 800991c:	414a      	adcs	r2, r1
 800991e:	f604 102c 	addw	r0, r4, #2348	; 0x92c
 8009922:	4629      	mov	r1, r5
 8009924:	f002 fad4 	bl	800bed0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8009928:	e7f4      	b.n	8009914 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x48>
	...

0800992c <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)>:
 800992c:	1e8a      	subs	r2, r1, #2
 800992e:	4253      	negs	r3, r2
 8009930:	4153      	adcs	r3, r2
 8009932:	f880 3934 	strb.w	r3, [r0, #2356]	; 0x934
 8009936:	4b02      	ldr	r3, [pc, #8]	; (8009940 <ArtNet4Node::SetLedBlinkMode(ledblink::Mode)+0x14>)
 8009938:	6818      	ldr	r0, [r3, #0]
 800993a:	f008 bff5 	b.w	8012928 <LedBlink::SetMode(ledblink::Mode)>
 800993e:	bf00      	nop
 8009940:	2000a22c 	andcs	sl, r0, ip, lsr #4

08009944 <ArtNet4Node::~ArtNet4Node()>:
 8009944:	b510      	push	{r4, lr}
 8009946:	4604      	mov	r4, r0
 8009948:	4b05      	ldr	r3, [pc, #20]	; (8009960 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 800994a:	6003      	str	r3, [r0, #0]
 800994c:	f600 102c 	addw	r0, r0, #2348	; 0x92c
 8009950:	f002 fa4a 	bl	800bde8 <E131Bridge::~E131Bridge()>
 8009954:	1d20      	adds	r0, r4, #4
 8009956:	f000 f920 	bl	8009b9a <ArtNetNode::~ArtNetNode()>
 800995a:	4620      	mov	r0, r4
 800995c:	bd10      	pop	{r4, pc}
 800995e:	bf00      	nop
 8009960:	08016590 	stmdaeq	r1, {r4, r7, r8, sl, sp, lr}

08009964 <ArtNet4Node::~ArtNet4Node()>:
 8009964:	b510      	push	{r4, lr}
 8009966:	4604      	mov	r4, r0
 8009968:	f7ff ffec 	bl	8009944 <ArtNet4Node::~ArtNet4Node()>
 800996c:	4620      	mov	r0, r4
 800996e:	f009 f8b9 	bl	8012ae4 <operator delete(void*)>
 8009972:	4620      	mov	r0, r4
 8009974:	bd10      	pop	{r4, pc}

08009976 <ArtNet4Node::GetStatus(unsigned int)>:
 8009976:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009978:	2301      	movs	r3, #1
 800997a:	4604      	mov	r4, r0
 800997c:	f10d 0206 	add.w	r2, sp, #6
 8009980:	f600 102c 	addw	r0, r0, #2348	; 0x92c
 8009984:	460d      	mov	r5, r1
 8009986:	f002 fb0d 	bl	800bfa4 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800998a:	b160      	cbz	r0, 80099a6 <ArtNet4Node::GetStatus(unsigned int)+0x30>
 800998c:	2344      	movs	r3, #68	; 0x44
 800998e:	fb03 4405 	mla	r4, r3, r5, r4
 8009992:	f894 0e82 	ldrb.w	r0, [r4, #3714]	; 0xe82
 8009996:	f894 3e81 	ldrb.w	r3, [r4, #3713]	; 0xe81
 800999a:	01c0      	lsls	r0, r0, #7
 800999c:	ea40 00c3 	orr.w	r0, r0, r3, lsl #3
 80099a0:	f040 0001 	orr.w	r0, r0, #1
 80099a4:	b2c0      	uxtb	r0, r0
 80099a6:	b003      	add	sp, #12
 80099a8:	bd30      	pop	{r4, r5, pc}
	...

080099ac <ArtNet4Node::HandleAddress(unsigned char)>:
 80099ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099ae:	2301      	movs	r3, #1
 80099b0:	4605      	mov	r5, r0
 80099b2:	460c      	mov	r4, r1
 80099b4:	f10d 0206 	add.w	r2, sp, #6
 80099b8:	2100      	movs	r1, #0
 80099ba:	3004      	adds	r0, #4
 80099bc:	f000 fb8c 	bl	800a0d8 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 80099c0:	b150      	cbz	r0, 80099d8 <ArtNet4Node::HandleAddress(unsigned char)+0x2c>
 80099c2:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
 80099c6:	b123      	cbz	r3, 80099d2 <ArtNet4Node::HandleAddress(unsigned char)+0x26>
 80099c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80099cc:	3301      	adds	r3, #1
 80099ce:	f8ad 3006 	strh.w	r3, [sp, #6]
 80099d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80099d6:	b9eb      	cbnz	r3, 8009a14 <ArtNet4Node::HandleAddress(unsigned char)+0x68>
 80099d8:	2c13      	cmp	r4, #19
 80099da:	f004 0603 	and.w	r6, r4, #3
 80099de:	d80a      	bhi.n	80099f6 <ArtNet4Node::HandleAddress(unsigned char)+0x4a>
 80099e0:	2c0f      	cmp	r4, #15
 80099e2:	d824      	bhi.n	8009a2e <ArtNet4Node::HandleAddress(unsigned char)+0x82>
 80099e4:	2c02      	cmp	r4, #2
 80099e6:	d020      	beq.n	8009a2a <ArtNet4Node::HandleAddress(unsigned char)+0x7e>
 80099e8:	3c03      	subs	r4, #3
 80099ea:	2c01      	cmp	r4, #1
 80099ec:	d810      	bhi.n	8009a10 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 80099ee:	2300      	movs	r3, #0
 80099f0:	f885 3934 	strb.w	r3, [r5, #2356]	; 0x934
 80099f4:	e00c      	b.n	8009a10 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 80099f6:	2c53      	cmp	r4, #83	; 0x53
 80099f8:	d806      	bhi.n	8009a08 <ArtNet4Node::HandleAddress(unsigned char)+0x5c>
 80099fa:	2c4f      	cmp	r4, #79	; 0x4f
 80099fc:	d908      	bls.n	8009a10 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 80099fe:	2344      	movs	r3, #68	; 0x44
 8009a00:	2200      	movs	r2, #0
 8009a02:	fb03 5306 	mla	r3, r3, r6, r5
 8009a06:	e016      	b.n	8009a36 <ArtNet4Node::HandleAddress(unsigned char)+0x8a>
 8009a08:	3470      	adds	r4, #112	; 0x70
 8009a0a:	b2e4      	uxtb	r4, r4
 8009a0c:	2c03      	cmp	r4, #3
 8009a0e:	d915      	bls.n	8009a3c <ArtNet4Node::HandleAddress(unsigned char)+0x90>
 8009a10:	b003      	add	sp, #12
 8009a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a14:	f8d5 2914 	ldr.w	r2, [r5, #2324]	; 0x914
 8009a18:	2100      	movs	r1, #0
 8009a1a:	2a01      	cmp	r2, #1
 8009a1c:	bf18      	it	ne
 8009a1e:	2202      	movne	r2, #2
 8009a20:	f605 102c 	addw	r0, r5, #2348	; 0x92c
 8009a24:	f002 fa54 	bl	800bed0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8009a28:	e7d6      	b.n	80099d8 <ArtNet4Node::HandleAddress(unsigned char)+0x2c>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e7e0      	b.n	80099f0 <ArtNet4Node::HandleAddress(unsigned char)+0x44>
 8009a2e:	2344      	movs	r3, #68	; 0x44
 8009a30:	2201      	movs	r2, #1
 8009a32:	fb03 5306 	mla	r3, r3, r6, r5
 8009a36:	f8c3 2e7c 	str.w	r2, [r3, #3708]	; 0xe7c
 8009a3a:	e7e9      	b.n	8009a10 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 8009a3c:	2328      	movs	r3, #40	; 0x28
 8009a3e:	fb03 5306 	mla	r3, r3, r6, r5
 8009a42:	f8d3 2914 	ldr.w	r2, [r3, #2324]	; 0x914
 8009a46:	2a01      	cmp	r2, #1
 8009a48:	d1e2      	bne.n	8009a10 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 8009a4a:	4b1c      	ldr	r3, [pc, #112]	; (8009abc <ArtNet4Node::HandleAddress(unsigned char)+0x110>)
 8009a4c:	2700      	movs	r7, #0
 8009a4e:	6819      	ldr	r1, [r3, #0]
 8009a50:	f8d5 0930 	ldr.w	r0, [r5, #2352]	; 0x930
 8009a54:	07c9      	lsls	r1, r1, #31
 8009a56:	bf58      	it	pl
 8009a58:	601a      	strpl	r2, [r3, #0]
 8009a5a:	f240 6204 	movw	r2, #1540	; 0x604
 8009a5e:	4372      	muls	r2, r6
 8009a60:	4b17      	ldr	r3, [pc, #92]	; (8009ac0 <ArtNet4Node::HandleAddress(unsigned char)+0x114>)
 8009a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a66:	441a      	add	r2, r3
 8009a68:	4611      	mov	r1, r2
 8009a6a:	f502 7400 	add.w	r4, r2, #512	; 0x200
 8009a6e:	42a1      	cmp	r1, r4
 8009a70:	d121      	bne.n	8009ab6 <ArtNet4Node::HandleAddress(unsigned char)+0x10a>
 8009a72:	f240 6104 	movw	r1, #1540	; 0x604
 8009a76:	fb01 3106 	mla	r1, r1, r6, r3
 8009a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a7e:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 8009a82:	6801      	ldr	r1, [r0, #0]
 8009a84:	690c      	ldr	r4, [r1, #16]
 8009a86:	4631      	mov	r1, r6
 8009a88:	47a0      	blx	r4
 8009a8a:	2444      	movs	r4, #68	; 0x44
 8009a8c:	fb04 5406 	mla	r4, r4, r6, r5
 8009a90:	f894 3e42 	ldrb.w	r3, [r4, #3650]	; 0xe42
 8009a94:	b15b      	cbz	r3, 8009aae <ArtNet4Node::HandleAddress(unsigned char)+0x102>
 8009a96:	f894 3e82 	ldrb.w	r3, [r4, #3714]	; 0xe82
 8009a9a:	b943      	cbnz	r3, 8009aae <ArtNet4Node::HandleAddress(unsigned char)+0x102>
 8009a9c:	f8d5 0930 	ldr.w	r0, [r5, #2352]	; 0x930
 8009aa0:	4631      	mov	r1, r6
 8009aa2:	6803      	ldr	r3, [r0, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	4798      	blx	r3
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	f884 3e82 	strb.w	r3, [r4, #3714]	; 0xe82
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f885 3e20 	strb.w	r3, [r5, #3616]	; 0xe20
 8009ab4:	e7ac      	b.n	8009a10 <ArtNet4Node::HandleAddress(unsigned char)+0x64>
 8009ab6:	f801 7b01 	strb.w	r7, [r1], #1
 8009aba:	e7d8      	b.n	8009a6e <ArtNet4Node::HandleAddress(unsigned char)+0xc2>
 8009abc:	200006c8 	andcs	r0, r0, r8, asr #13
 8009ac0:	200006cc 	andcs	r0, r0, ip, asr #13

08009ac4 <ArtNet4Node::ArtNet4Node()>:
 8009ac4:	b510      	push	{r4, lr}
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	3004      	adds	r0, #4
 8009aca:	f000 f92f 	bl	8009d2c <ArtNetNode::ArtNetNode()>
 8009ace:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <ArtNet4Node::ArtNet4Node()+0x1c>)
 8009ad0:	f604 102c 	addw	r0, r4, #2348	; 0x92c
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	f002 f929 	bl	800bd2c <E131Bridge::E131Bridge()>
 8009ada:	4620      	mov	r0, r4
 8009adc:	61e4      	str	r4, [r4, #28]
 8009ade:	bd10      	pop	{r4, pc}
 8009ae0:	08016590 	stmdaeq	r1, {r4, r7, r8, sl, sp, lr}

08009ae4 <ArtNet4Node::Start()>:
 8009ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ae6:	1d05      	adds	r5, r0, #4
 8009ae8:	4604      	mov	r4, r0
 8009aea:	2301      	movs	r3, #1
 8009aec:	2100      	movs	r1, #0
 8009aee:	4628      	mov	r0, r5
 8009af0:	f10d 0206 	add.w	r2, sp, #6
 8009af4:	f000 faf0 	bl	800a0d8 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8009af8:	b138      	cbz	r0, 8009b0a <ArtNet4Node::Start()+0x26>
 8009afa:	f8d4 3914 	ldr.w	r3, [r4, #2324]	; 0x914
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	bf04      	itt	eq
 8009b02:	f8d4 390c 	ldreq.w	r3, [r4, #2316]	; 0x90c
 8009b06:	f8c4 3e7c 	streq.w	r3, [r4, #3708]	; 0xe7c
 8009b0a:	f894 38ec 	ldrb.w	r3, [r4, #2284]	; 0x8ec
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f884 3e25 	strb.w	r3, [r4, #3621]	; 0xe25
 8009b14:	68a3      	ldr	r3, [r4, #8]
 8009b16:	f8c4 3930 	str.w	r3, [r4, #2352]	; 0x930
 8009b1a:	f000 f83f 	bl	8009b9c <ArtNetNode::Start()>
 8009b1e:	f604 102c 	addw	r0, r4, #2348	; 0x92c
 8009b22:	b003      	add	sp, #12
 8009b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b28:	f002 b960 	b.w	800bdec <E131Bridge::Start()>

08009b2c <ArtNet4Node::Run()>:
 8009b2c:	b510      	push	{r4, lr}
 8009b2e:	4604      	mov	r4, r0
 8009b30:	3004      	adds	r0, #4
 8009b32:	f000 f9f5 	bl	8009f20 <ArtNetNode::Run()>
 8009b36:	f894 3e37 	ldrb.w	r3, [r4, #3639]	; 0xe37
 8009b3a:	b12b      	cbz	r3, 8009b48 <ArtNet4Node::Run()+0x1c>
 8009b3c:	f604 102c 	addw	r0, r4, #2348	; 0x92c
 8009b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b44:	f002 bcbe 	b.w	800c4c4 <E131Bridge::Run()>
 8009b48:	bd10      	pop	{r4, pc}
	...

08009b4c <ArtNet4Node::Print()>:
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	4604      	mov	r4, r0
 8009b50:	3004      	adds	r0, #4
 8009b52:	f001 fb51 	bl	800b1f8 <ArtNetNode::Print()>
 8009b56:	f894 38ee 	ldrb.w	r3, [r4, #2286]	; 0x8ee
 8009b5a:	b15b      	cbz	r3, 8009b74 <ArtNet4Node::Print()+0x28>
 8009b5c:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 8009b60:	b113      	cbz	r3, 8009b68 <ArtNet4Node::Print()+0x1c>
 8009b62:	4805      	ldr	r0, [pc, #20]	; (8009b78 <ArtNet4Node::Print()+0x2c>)
 8009b64:	f009 fab2 	bl	80130cc <printf>
 8009b68:	f604 102c 	addw	r0, r4, #2348	; 0x92c
 8009b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b70:	f002 bed0 	b.w	800c914 <E131Bridge::Print()>
 8009b74:	bd10      	pop	{r4, pc}
 8009b76:	bf00      	nop
 8009b78:	0801656a 	stmdaeq	r1, {r1, r3, r5, r6, r8, sl, sp, lr}

08009b7c <strncpy.isra.0>:
 8009b7c:	3901      	subs	r1, #1
 8009b7e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b82:	b92b      	cbnz	r3, 8009b90 <strncpy.isra.0+0x14>
 8009b84:	4402      	add	r2, r0
 8009b86:	4290      	cmp	r0, r2
 8009b88:	d006      	beq.n	8009b98 <strncpy.isra.0+0x1c>
 8009b8a:	f800 3b01 	strb.w	r3, [r0], #1
 8009b8e:	e7fa      	b.n	8009b86 <strncpy.isra.0+0xa>
 8009b90:	3a01      	subs	r2, #1
 8009b92:	f800 3b01 	strb.w	r3, [r0], #1
 8009b96:	d1f2      	bne.n	8009b7e <strncpy.isra.0+0x2>
 8009b98:	4770      	bx	lr

08009b9a <ArtNetNode::~ArtNetNode()>:
 8009b9a:	4770      	bx	lr

08009b9c <ArtNetNode::Start()>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4d1a      	ldr	r5, [pc, #104]	; (8009c08 <ArtNetNode::Start()+0x6c>)
 8009ba0:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8009ba4:	682a      	ldr	r2, [r5, #0]
 8009ba6:	f023 0302 	bic.w	r3, r3, #2
 8009baa:	7951      	ldrb	r1, [r2, #5]
 8009bac:	4604      	mov	r4, r0
 8009bae:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8009bb2:	b25b      	sxtb	r3, r3
 8009bb4:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
 8009bb8:	7912      	ldrb	r2, [r2, #4]
 8009bba:	f023 0304 	bic.w	r3, r3, #4
 8009bbe:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8009bc2:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
 8009bc6:	f001 f83b 	bl	800ac40 <ArtNetNode::FillPollReply()>
 8009bca:	f641 1136 	movw	r1, #6454	; 0x1936
 8009bce:	6828      	ldr	r0, [r5, #0]
 8009bd0:	f006 fc48 	bl	8010464 <Network::Begin(unsigned short)>
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	6020      	str	r0, [r4, #0]
 8009bd8:	6920      	ldr	r0, [r4, #16]
 8009bda:	f884 38e1 	strb.w	r3, [r4, #2273]	; 0x8e1
 8009bde:	b950      	cbnz	r0, 8009bf6 <ArtNetNode::Start()+0x5a>
 8009be0:	4b0a      	ldr	r3, [pc, #40]	; (8009c0c <ArtNetNode::Start()+0x70>)
 8009be2:	2102      	movs	r1, #2
 8009be4:	6818      	ldr	r0, [r3, #0]
 8009be6:	f008 fe9f 	bl	8012928 <LedBlink::SetMode(ledblink::Mode)>
 8009bea:	4620      	mov	r0, r4
 8009bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	f001 b8e7 	b.w	800adc4 <ArtNetNode::SendPollRelply(bool)>
 8009bf6:	f894 391c 	ldrb.w	r3, [r4, #2332]	; 0x91c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d0f0      	beq.n	8009be0 <ArtNetNode::Start()+0x44>
 8009bfe:	6803      	ldr	r3, [r0, #0]
 8009c00:	2100      	movs	r1, #0
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	4798      	blx	r3
 8009c06:	e7eb      	b.n	8009be0 <ArtNetNode::Start()+0x44>
 8009c08:	20009b68 	andcs	r9, r0, r8, ror #22
 8009c0c:	2000a22c 	andcs	sl, r0, ip, lsr #4

08009c10 <ArtNetNode::Stop()>:
 8009c10:	f8d0 1910 	ldr.w	r1, [r0, #2320]	; 0x910
 8009c14:	b570      	push	{r4, r5, r6, lr}
 8009c16:	4604      	mov	r4, r0
 8009c18:	b981      	cbnz	r1, 8009c3c <ArtNetNode::Stop()+0x2c>
 8009c1a:	6840      	ldr	r0, [r0, #4]
 8009c1c:	b110      	cbz	r0, 8009c24 <ArtNetNode::Stop()+0x14>
 8009c1e:	6803      	ldr	r3, [r0, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	4798      	blx	r3
 8009c24:	4b16      	ldr	r3, [pc, #88]	; (8009c80 <ArtNetNode::Stop()+0x70>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	07d2      	lsls	r2, r2, #31
 8009c2a:	bf5c      	itt	pl
 8009c2c:	2201      	movpl	r2, #1
 8009c2e:	601a      	strpl	r2, [r3, #0]
 8009c30:	2300      	movs	r3, #0
 8009c32:	4a14      	ldr	r2, [pc, #80]	; (8009c84 <ArtNetNode::Stop()+0x74>)
 8009c34:	f884 3915 	strb.w	r3, [r4, #2325]	; 0x915
 8009c38:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 8009c3c:	6923      	ldr	r3, [r4, #16]
 8009c3e:	b16b      	cbz	r3, 8009c5c <ArtNetNode::Stop()+0x4c>
 8009c40:	2500      	movs	r5, #0
 8009c42:	f604 161c 	addw	r6, r4, #2332	; 0x91c
 8009c46:	012b      	lsls	r3, r5, #4
 8009c48:	5cf3      	ldrb	r3, [r6, r3]
 8009c4a:	b123      	cbz	r3, 8009c56 <ArtNetNode::Stop()+0x46>
 8009c4c:	6920      	ldr	r0, [r4, #16]
 8009c4e:	4629      	mov	r1, r5
 8009c50:	6803      	ldr	r3, [r0, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	4798      	blx	r3
 8009c56:	3501      	adds	r5, #1
 8009c58:	2d04      	cmp	r5, #4
 8009c5a:	d1f4      	bne.n	8009c46 <ArtNetNode::Stop()+0x36>
 8009c5c:	4b0a      	ldr	r3, [pc, #40]	; (8009c88 <ArtNetNode::Stop()+0x78>)
 8009c5e:	2100      	movs	r1, #0
 8009c60:	6818      	ldr	r0, [r3, #0]
 8009c62:	f008 fe61 	bl	8012928 <LedBlink::SetMode(ledblink::Mode)>
 8009c66:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 8009c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c72:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
 8009c76:	2301      	movs	r3, #1
 8009c78:	f884 38e1 	strb.w	r3, [r4, #2273]	; 0x8e1
 8009c7c:	bd70      	pop	{r4, r5, r6, pc}
 8009c7e:	bf00      	nop
 8009c80:	200006c8 	andcs	r0, r0, r8, asr #13
 8009c84:	200006cc 	andcs	r0, r0, ip, asr #13
 8009c88:	2000a22c 	andcs	sl, r0, ip, lsr #4

08009c8c <ArtNetNode::SetShortName(char const*)>:
 8009c8c:	b570      	push	{r4, r5, r6, lr}
 8009c8e:	f100 053c 	add.w	r5, r0, #60	; 0x3c
 8009c92:	4604      	mov	r4, r0
 8009c94:	2211      	movs	r2, #17
 8009c96:	4628      	mov	r0, r5
 8009c98:	f7ff ff70 	bl	8009b7c <strncpy.isra.0>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8009ca2:	462b      	mov	r3, r5
 8009ca4:	f104 024e 	add.w	r2, r4, #78	; 0x4e
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d111      	bne.n	8009cd0 <ArtNetNode::SetShortName(char const*)+0x44>
 8009cac:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d112      	bne.n	8009cda <ArtNetNode::SetShortName(char const*)+0x4e>
 8009cb4:	69e0      	ldr	r0, [r4, #28]
 8009cb6:	b118      	cbz	r0, 8009cc0 <ArtNetNode::SetShortName(char const*)+0x34>
 8009cb8:	6803      	ldr	r3, [r0, #0]
 8009cba:	4629      	mov	r1, r5
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	4798      	blx	r3
 8009cc0:	6a20      	ldr	r0, [r4, #32]
 8009cc2:	b150      	cbz	r0, 8009cda <ArtNetNode::SetShortName(char const*)+0x4e>
 8009cc4:	6803      	ldr	r3, [r0, #0]
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	4718      	bx	r3
 8009cd0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009cd4:	f883 154d 	strb.w	r1, [r3, #1357]	; 0x54d
 8009cd8:	e7e6      	b.n	8009ca8 <ArtNetNode::SetShortName(char const*)+0x1c>
 8009cda:	bd70      	pop	{r4, r5, r6, pc}

08009cdc <ArtNetNode::SetLongName(char const*)>:
 8009cdc:	b570      	push	{r4, r5, r6, lr}
 8009cde:	f100 054e 	add.w	r5, r0, #78	; 0x4e
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	223f      	movs	r2, #63	; 0x3f
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f7ff ff48 	bl	8009b7c <strncpy.isra.0>
 8009cec:	2300      	movs	r3, #0
 8009cee:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
 8009cf2:	462b      	mov	r3, r5
 8009cf4:	f104 028e 	add.w	r2, r4, #142	; 0x8e
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d111      	bne.n	8009d20 <ArtNetNode::SetLongName(char const*)+0x44>
 8009cfc:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d112      	bne.n	8009d2a <ArtNetNode::SetLongName(char const*)+0x4e>
 8009d04:	69e0      	ldr	r0, [r4, #28]
 8009d06:	b118      	cbz	r0, 8009d10 <ArtNetNode::SetLongName(char const*)+0x34>
 8009d08:	6803      	ldr	r3, [r0, #0]
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	4798      	blx	r3
 8009d10:	6a20      	ldr	r0, [r4, #32]
 8009d12:	b150      	cbz	r0, 8009d2a <ArtNetNode::SetLongName(char const*)+0x4e>
 8009d14:	6803      	ldr	r3, [r0, #0]
 8009d16:	4629      	mov	r1, r5
 8009d18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	4718      	bx	r3
 8009d20:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009d24:	f883 154d 	strb.w	r1, [r3, #1357]	; 0x54d
 8009d28:	e7e6      	b.n	8009cf8 <ArtNetNode::SetLongName(char const*)+0x1c>
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}

08009d2c <ArtNetNode::ArtNetNode()>:
 8009d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d34:	4604      	mov	r4, r0
 8009d36:	e9c0 2300 	strd	r2, r3, [r0]
 8009d3a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8009d3e:	4a43      	ldr	r2, [pc, #268]	; (8009e4c <ArtNetNode::ArtNetNode()+0x120>)
 8009d40:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d44:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8009d48:	6010      	str	r0, [r2, #0]
 8009d4a:	6203      	str	r3, [r0, #32]
 8009d4c:	f8c0 3874 	str.w	r3, [r0, #2164]	; 0x874
 8009d50:	f8c0 3878 	str.w	r3, [r0, #2168]	; 0x878
 8009d54:	f880 387c 	strb.w	r3, [r0, #2172]	; 0x87c
 8009d58:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8009d5c:	f100 019c 	add.w	r1, r0, #156	; 0x9c
 8009d60:	428a      	cmp	r2, r1
 8009d62:	d161      	bne.n	8009e28 <ArtNetNode::ArtNetNode()+0xfc>
 8009d64:	4b3a      	ldr	r3, [pc, #232]	; (8009e50 <ArtNetNode::ArtNetNode()+0x124>)
 8009d66:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8009d6a:	6818      	ldr	r0, [r3, #0]
 8009d6c:	6943      	ldr	r3, [r0, #20]
 8009d6e:	6263      	str	r3, [r4, #36]	; 0x24
 8009d70:	69c2      	ldr	r2, [r0, #28]
 8009d72:	ea63 0302 	orn	r3, r3, r2
 8009d76:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d78:	6323      	str	r3, [r4, #48]	; 0x30
 8009d7a:	f006 fb79 	bl	8010470 <Network::MacAddressCopyTo(unsigned char*)>
 8009d7e:	23d0      	movs	r3, #208	; 0xd0
 8009d80:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
 8009d84:	f642 0398 	movw	r3, #10392	; 0x2898
 8009d88:	2100      	movs	r1, #0
 8009d8a:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 8009d8e:	f504 620f 	add.w	r2, r4, #2288	; 0x8f0
 8009d92:	f504 630d 	add.w	r3, r4, #2256	; 0x8d0
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d149      	bne.n	8009e2e <ArtNetNode::ArtNetNode()+0x102>
 8009d9a:	f240 1201 	movw	r2, #257	; 0x101
 8009d9e:	2100      	movs	r1, #0
 8009da0:	f8a4 28e0 	strh.w	r2, [r4, #2272]	; 0x8e0
 8009da4:	f604 1218 	addw	r2, r4, #2328	; 0x918
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d143      	bne.n	8009e34 <ArtNetNode::ArtNetNode()+0x108>
 8009dac:	2100      	movs	r1, #0
 8009dae:	f604 1228 	addw	r2, r4, #2344	; 0x928
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d141      	bne.n	8009e3a <ArtNetNode::ArtNetNode()+0x10e>
 8009db6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009db8:	4620      	mov	r0, r4
 8009dba:	f8c4 3920 	str.w	r3, [r4, #2336]	; 0x920
 8009dbe:	2308      	movs	r3, #8
 8009dc0:	4924      	ldr	r1, [pc, #144]	; (8009e54 <ArtNetNode::ArtNetNode()+0x128>)
 8009dc2:	f884 391b 	strb.w	r3, [r4, #2331]	; 0x91b
 8009dc6:	f7ff ff61 	bl	8009c8c <ArtNetNode::SetShortName(char const*)>
 8009dca:	4b23      	ldr	r3, [pc, #140]	; (8009e58 <ArtNetNode::ArtNetNode()+0x12c>)
 8009dcc:	4d23      	ldr	r5, [pc, #140]	; (8009e5c <ArtNetNode::ArtNetNode()+0x130>)
 8009dce:	9302      	str	r3, [sp, #8]
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	f604 068d 	addw	r6, r4, #2189	; 0x88d
 8009dd6:	4a22      	ldr	r2, [pc, #136]	; (8009e60 <ArtNetNode::ArtNetNode()+0x134>)
 8009dd8:	2140      	movs	r1, #64	; 0x40
 8009dda:	9301      	str	r3, [sp, #4]
 8009ddc:	4630      	mov	r0, r6
 8009dde:	4b21      	ldr	r3, [pc, #132]	; (8009e64 <ArtNetNode::ArtNetNode()+0x138>)
 8009de0:	9500      	str	r5, [sp, #0]
 8009de2:	f009 f99b 	bl	801311c <snprintf>
 8009de6:	4631      	mov	r1, r6
 8009de8:	4620      	mov	r0, r4
 8009dea:	f7ff ff77 	bl	8009cdc <ArtNetNode::SetLongName(char const*)>
 8009dee:	220f      	movs	r2, #15
 8009df0:	491d      	ldr	r1, [pc, #116]	; (8009e68 <ArtNetNode::ArtNetNode()+0x13c>)
 8009df2:	f604 007d 	addw	r0, r4, #2173	; 0x87d
 8009df6:	f7ff fec1 	bl	8009b7c <strncpy.isra.0>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f204 6266 	addw	r2, r4, #1638	; 0x666
 8009e00:	f884 388c 	strb.w	r3, [r4, #2188]	; 0x88c
 8009e04:	f204 635e 	addw	r3, r4, #1630	; 0x65e
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d119      	bne.n	8009e40 <ArtNetNode::ArtNetNode()+0x114>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	2250      	movs	r2, #80	; 0x50
 8009e10:	4620      	mov	r0, r4
 8009e12:	f884 3667 	strb.w	r3, [r4, #1639]	; 0x667
 8009e16:	f884 3669 	strb.w	r3, [r4, #1641]	; 0x669
 8009e1a:	230e      	movs	r3, #14
 8009e1c:	f884 2668 	strb.w	r2, [r4, #1640]	; 0x668
 8009e20:	f884 366a 	strb.w	r3, [r4, #1642]	; 0x66a
 8009e24:	b004      	add	sp, #16
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	f802 3b01 	strb.w	r3, [r2], #1
 8009e2c:	e798      	b.n	8009d60 <ArtNetNode::ArtNetNode()+0x34>
 8009e2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e32:	e7b0      	b.n	8009d96 <ArtNetNode::ArtNetNode()+0x6a>
 8009e34:	f803 1b01 	strb.w	r1, [r3], #1
 8009e38:	e7b6      	b.n	8009da8 <ArtNetNode::ArtNetNode()+0x7c>
 8009e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e3e:	e7b8      	b.n	8009db2 <ArtNetNode::ArtNetNode()+0x86>
 8009e40:	f815 1b01 	ldrb.w	r1, [r5], #1
 8009e44:	f803 1f01 	strb.w	r1, [r3, #1]!
 8009e48:	e7de      	b.n	8009e08 <ArtNetNode::ArtNetNode()+0xdc>
 8009e4a:	bf00      	nop
 8009e4c:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8009e50:	20009b68 	andcs	r9, r0, r8, ror #22
 8009e54:	08016629 	stmdaeq	r1, {r0, r3, r5, r9, sl, sp, lr}
 8009e58:	08016603 	stmdaeq	r1, {r0, r1, r9, sl, sp, lr}
 8009e5c:	08016621 	stmdaeq	r1, {r0, r5, r9, sl, sp, lr}
 8009e60:	080165f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, sl, sp, lr}
 8009e64:	08015b3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, fp, ip, lr}
 8009e68:	08016618 	stmdaeq	r1, {r3, r4, r9, sl, sp, lr}

08009e6c <ArtNetNode::SetNetworkDataLossCondition()>:
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f8d0 28fc 	ldr.w	r2, [r0, #2300]	; 0x8fc
 8009e72:	f8d0 1904 	ldr.w	r1, [r0, #2308]	; 0x904
 8009e76:	f880 38e6 	strb.w	r3, [r0, #2278]	; 0x8e6
 8009e7a:	42ca      	cmn	r2, r1
 8009e7c:	f880 38e5 	strb.w	r3, [r0, #2277]	; 0x8e5
 8009e80:	d020      	beq.n	8009ec4 <ArtNetNode::SetNetworkDataLossCondition()+0x58>
 8009e82:	f8c0 38fc 	str.w	r3, [r0, #2300]	; 0x8fc
 8009e86:	f8c0 3904 	str.w	r3, [r0, #2308]	; 0x904
 8009e8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ec8 <ArtNetNode::SetNetworkDataLossCondition()+0x5c>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	07d2      	lsls	r2, r2, #31
 8009e90:	d401      	bmi.n	8009e96 <ArtNetNode::SetNetworkDataLossCondition()+0x2a>
 8009e92:	2201      	movs	r2, #1
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	2200      	movs	r2, #0
 8009e98:	4b0c      	ldr	r3, [pc, #48]	; (8009ecc <ArtNetNode::SetNetworkDataLossCondition()+0x60>)
 8009e9a:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
 8009e9e:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8009ea2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ea6:	2b40      	cmp	r3, #64	; 0x40
 8009ea8:	d003      	beq.n	8009eb2 <ArtNetNode::SetNetworkDataLossCondition()+0x46>
 8009eaa:	d90b      	bls.n	8009ec4 <ArtNetNode::SetNetworkDataLossCondition()+0x58>
 8009eac:	2b80      	cmp	r3, #128	; 0x80
 8009eae:	d005      	beq.n	8009ebc <ArtNetNode::SetNetworkDataLossCondition()+0x50>
 8009eb0:	4770      	bx	lr
 8009eb2:	6840      	ldr	r0, [r0, #4]
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	6803      	ldr	r3, [r0, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	4718      	bx	r3
 8009ebc:	6840      	ldr	r0, [r0, #4]
 8009ebe:	6803      	ldr	r3, [r0, #0]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	4718      	bx	r3
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	200006c8 	andcs	r0, r0, r8, asr #13
 8009ecc:	200006cc 	andcs	r0, r0, ip, asr #13

08009ed0 <ArtNetNode::GetType()>:
 8009ed0:	f8b0 356c 	ldrh.w	r3, [r0, #1388]	; 0x56c
 8009ed4:	b530      	push	{r4, r5, lr}
 8009ed6:	2b0b      	cmp	r3, #11
 8009ed8:	d91d      	bls.n	8009f16 <ArtNetNode::GetType()+0x46>
 8009eda:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8009ede:	b9d3      	cbnz	r3, 8009f16 <ArtNetNode::GetType()+0x46>
 8009ee0:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
 8009ee4:	2a0e      	cmp	r2, #14
 8009ee6:	d10d      	bne.n	8009f04 <ArtNetNode::GetType()+0x34>
 8009ee8:	4a0c      	ldr	r2, [pc, #48]	; (8009f1c <ArtNetNode::GetType()+0x4c>)
 8009eea:	f100 039b 	add.w	r3, r0, #155	; 0x9b
 8009eee:	f100 01a3 	add.w	r1, r0, #163	; 0xa3
 8009ef2:	428b      	cmp	r3, r1
 8009ef4:	d109      	bne.n	8009f0a <ArtNetNode::GetType()+0x3a>
 8009ef6:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 8009efa:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8009efe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	f8a0 356e 	strh.w	r3, [r0, #1390]	; 0x56e
 8009f08:	bd30      	pop	{r4, r5, pc}
 8009f0a:	f812 4b01 	ldrb.w	r4, [r2], #1
 8009f0e:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 8009f12:	42a5      	cmp	r5, r4
 8009f14:	d0ed      	beq.n	8009ef2 <ArtNetNode::GetType()+0x22>
 8009f16:	2300      	movs	r3, #0
 8009f18:	e7f4      	b.n	8009f04 <ArtNetNode::GetType()+0x34>
 8009f1a:	bf00      	nop
 8009f1c:	08015380 	stmdaeq	r1, {r7, r8, r9, ip, lr}

08009f20 <ArtNetNode::Run()>:
 8009f20:	b530      	push	{r4, r5, lr}
 8009f22:	4601      	mov	r1, r0
 8009f24:	4604      	mov	r4, r0
 8009f26:	b085      	sub	sp, #20
 8009f28:	f10d 030e 	add.w	r3, sp, #14
 8009f2c:	f811 0b9c 	ldrb.w	r0, [r1], #156
 8009f30:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	f504 63ad 	add.w	r3, r4, #1384	; 0x568
 8009f3a:	f005 fd6f 	bl	800fa1c <udp_recv>
 8009f3e:	4b64      	ldr	r3, [pc, #400]	; (800a0d0 <ArtNetNode::Run()+0x1b0>)
 8009f40:	681d      	ldr	r5, [r3, #0]
 8009f42:	f8c4 5874 	str.w	r5, [r4, #2164]	; 0x874
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d142      	bne.n	8009fd0 <ArtNetNode::Run()+0xb0>
 8009f4a:	f8d4 3878 	ldr.w	r3, [r4, #2168]	; 0x878
 8009f4e:	1aed      	subs	r5, r5, r3
 8009f50:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f54:	429d      	cmp	r5, r3
 8009f56:	d902      	bls.n	8009f5e <ArtNetNode::Run()+0x3e>
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f7ff ff87 	bl	8009e6c <ArtNetNode::SetNetworkDataLossCondition()>
 8009f5e:	f894 38e2 	ldrb.w	r3, [r4, #2274]	; 0x8e2
 8009f62:	b15b      	cbz	r3, 8009f7c <ArtNetNode::Run()+0x5c>
 8009f64:	69a0      	ldr	r0, [r4, #24]
 8009f66:	f894 58e7 	ldrb.w	r5, [r4, #2279]	; 0x8e7
 8009f6a:	6803      	ldr	r3, [r0, #0]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	4798      	blx	r3
 8009f70:	b905      	cbnz	r5, 8009f74 <ArtNetNode::Run()+0x54>
 8009f72:	b118      	cbz	r0, 8009f7c <ArtNetNode::Run()+0x5c>
 8009f74:	2100      	movs	r1, #0
 8009f76:	4620      	mov	r0, r4
 8009f78:	f000 ff24 	bl	800adc4 <ArtNetNode::SendPollRelply(bool)>
 8009f7c:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 8009f80:	f8d4 2878 	ldr.w	r2, [r4, #2168]	; 0x878
 8009f84:	1a9b      	subs	r3, r3, r2
 8009f86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f8a:	d305      	bcc.n	8009f98 <ArtNetNode::Run()+0x78>
 8009f8c:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 8009f90:	f023 0302 	bic.w	r3, r3, #2
 8009f94:	f884 38e9 	strb.w	r3, [r4, #2281]	; 0x8e9
 8009f98:	6923      	ldr	r3, [r4, #16]
 8009f9a:	b113      	cbz	r3, 8009fa2 <ArtNetNode::Run()+0x82>
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f000 fcfb 	bl	800a998 <ArtNetNode::HandleDmxIn()>
 8009fa2:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 8009fa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009faa:	2bc0      	cmp	r3, #192	; 0xc0
 8009fac:	d10e      	bne.n	8009fcc <ArtNetNode::Run()+0xac>
 8009fae:	4b49      	ldr	r3, [pc, #292]	; (800a0d4 <ArtNetNode::Run()+0x1b4>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	2b04      	cmp	r3, #4
 8009fb6:	d009      	beq.n	8009fcc <ArtNetNode::Run()+0xac>
 8009fb8:	69a0      	ldr	r0, [r4, #24]
 8009fba:	f894 28e9 	ldrb.w	r2, [r4, #2281]	; 0x8e9
 8009fbe:	6803      	ldr	r3, [r0, #0]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	2a00      	cmp	r2, #0
 8009fc4:	f000 8081 	beq.w	800a0ca <ArtNetNode::Run()+0x1aa>
 8009fc8:	2103      	movs	r1, #3
 8009fca:	4798      	blx	r3
 8009fcc:	b005      	add	sp, #20
 8009fce:	bd30      	pop	{r4, r5, pc}
 8009fd0:	f8a4 056c 	strh.w	r0, [r4, #1388]	; 0x56c
 8009fd4:	f8c4 5878 	str.w	r5, [r4, #2168]	; 0x878
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f7ff ff79 	bl	8009ed0 <ArtNetNode::GetType()>
 8009fde:	f894 38e5 	ldrb.w	r3, [r4, #2277]	; 0x8e5
 8009fe2:	b143      	cbz	r3, 8009ff6 <ArtNetNode::Run()+0xd6>
 8009fe4:	f8d4 38dc 	ldr.w	r3, [r4, #2268]	; 0x8dc
 8009fe8:	1aed      	subs	r5, r5, r3
 8009fea:	f5b5 6f7a 	cmp.w	r5, #4000	; 0xfa0
 8009fee:	bf24      	itt	cs
 8009ff0:	2300      	movcs	r3, #0
 8009ff2:	f884 38e5 	strbcs.w	r3, [r4, #2277]	; 0x8e5
 8009ff6:	f8b4 356e 	ldrh.w	r3, [r4, #1390]	; 0x56e
 8009ffa:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8009ffe:	d04c      	beq.n	800a09a <ArtNetNode::Run()+0x17a>
 800a000:	d81d      	bhi.n	800a03e <ArtNetNode::Run()+0x11e>
 800a002:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 800a006:	d039      	beq.n	800a07c <ArtNetNode::Run()+0x15c>
 800a008:	d80c      	bhi.n	800a024 <ArtNetNode::Run()+0x104>
 800a00a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a00e:	d031      	beq.n	800a074 <ArtNetNode::Run()+0x154>
 800a010:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a014:	d1c0      	bne.n	8009f98 <ArtNetNode::Run()+0x78>
 800a016:	6863      	ldr	r3, [r4, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0bd      	beq.n	8009f98 <ArtNetNode::Run()+0x78>
 800a01c:	4620      	mov	r0, r4
 800a01e:	f000 fbe6 	bl	800a7ee <ArtNetNode::HandleDmx()>
 800a022:	e7b9      	b.n	8009f98 <ArtNetNode::Run()+0x78>
 800a024:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a028:	d02f      	beq.n	800a08a <ArtNetNode::Run()+0x16a>
 800a02a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a02e:	d1b3      	bne.n	8009f98 <ArtNetNode::Run()+0x78>
 800a030:	68e3      	ldr	r3, [r4, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0b0      	beq.n	8009f98 <ArtNetNode::Run()+0x78>
 800a036:	4620      	mov	r0, r4
 800a038:	f000 fff9 	bl	800b02e <ArtNetNode::HandleTodRequest()>
 800a03c:	e7ac      	b.n	8009f98 <ArtNetNode::Run()+0x78>
 800a03e:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800a042:	d026      	beq.n	800a092 <ArtNetNode::Run()+0x172>
 800a044:	d80c      	bhi.n	800a060 <ArtNetNode::Run()+0x140>
 800a046:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 800a04a:	d02e      	beq.n	800a0aa <ArtNetNode::Run()+0x18a>
 800a04c:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 800a050:	d1a2      	bne.n	8009f98 <ArtNetNode::Run()+0x78>
 800a052:	68a3      	ldr	r3, [r4, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d09f      	beq.n	8009f98 <ArtNetNode::Run()+0x78>
 800a058:	4620      	mov	r0, r4
 800a05a:	f001 f8a5 	bl	800b1a8 <ArtNetNode::HandleTimeCode()>
 800a05e:	e79b      	b.n	8009f98 <ArtNetNode::Run()+0x78>
 800a060:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 800a064:	d029      	beq.n	800a0ba <ArtNetNode::Run()+0x19a>
 800a066:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800a06a:	d195      	bne.n	8009f98 <ArtNetNode::Run()+0x78>
 800a06c:	4620      	mov	r0, r4
 800a06e:	f000 fd21 	bl	800aab4 <ArtNetNode::HandleIpProg()>
 800a072:	e791      	b.n	8009f98 <ArtNetNode::Run()+0x78>
 800a074:	4620      	mov	r0, r4
 800a076:	f000 fef1 	bl	800ae5c <ArtNetNode::HandlePoll()>
 800a07a:	e78d      	b.n	8009f98 <ArtNetNode::Run()+0x78>
 800a07c:	6863      	ldr	r3, [r4, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d08a      	beq.n	8009f98 <ArtNetNode::Run()+0x78>
 800a082:	4620      	mov	r0, r4
 800a084:	f001 f858 	bl	800b138 <ArtNetNode::HandleSync()>
 800a088:	e786      	b.n	8009f98 <ArtNetNode::Run()+0x78>
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 f9a6 	bl	800a3dc <ArtNetNode::HandleAddress()>
 800a090:	e782      	b.n	8009f98 <ArtNetNode::Run()+0x78>
 800a092:	4620      	mov	r0, r4
 800a094:	f001 f88e 	bl	800b1b4 <ArtNetNode::HandleTimeSync()>
 800a098:	e77e      	b.n	8009f98 <ArtNetNode::Run()+0x78>
 800a09a:	68e3      	ldr	r3, [r4, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f43f af7b 	beq.w	8009f98 <ArtNetNode::Run()+0x78>
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 ff8d 	bl	800afc2 <ArtNetNode::HandleTodControl()>
 800a0a8:	e776      	b.n	8009f98 <ArtNetNode::Run()+0x78>
 800a0aa:	68e3      	ldr	r3, [r4, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f43f af73 	beq.w	8009f98 <ArtNetNode::Run()+0x78>
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 ffdd 	bl	800b072 <ArtNetNode::HandleRdm()>
 800a0b8:	e76e      	b.n	8009f98 <ArtNetNode::Run()+0x78>
 800a0ba:	6963      	ldr	r3, [r4, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f43f af6b 	beq.w	8009f98 <ArtNetNode::Run()+0x78>
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f001 fdf4 	bl	800bcb0 <ArtNetNode::HandleTrigger()>
 800a0c8:	e766      	b.n	8009f98 <ArtNetNode::Run()+0x78>
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	e77d      	b.n	8009fca <ArtNetNode::Run()+0xaa>
 800a0ce:	bf00      	nop
 800a0d0:	2000a24c 	andcs	sl, r0, ip, asr #4
 800a0d4:	2000a22c 	andcs	sl, r0, ip, lsr #4

0800a0d8 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 800a0d8:	b93b      	cbnz	r3, 800a0ea <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 800a0da:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800a0de:	f8b0 3918 	ldrh.w	r3, [r0, #2328]	; 0x918
 800a0e2:	f890 091c 	ldrb.w	r0, [r0, #2332]	; 0x91c
 800a0e6:	8013      	strh	r3, [r2, #0]
 800a0e8:	4770      	bx	lr
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	bf01      	itttt	eq
 800a0ee:	2328      	moveq	r3, #40	; 0x28
 800a0f0:	fb03 0001 	mlaeq	r0, r3, r1, r0
 800a0f4:	f8b0 38f0 	ldrheq.w	r3, [r0, #2288]	; 0x8f0
 800a0f8:	f890 08f4 	ldrbeq.w	r0, [r0, #2292]	; 0x8f4
 800a0fc:	bf0c      	ite	eq
 800a0fe:	8013      	strheq	r3, [r2, #0]
 800a100:	2000      	movne	r0, #0
 800a102:	4770      	bx	lr

0800a104 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 800a104:	4402      	add	r2, r0
 800a106:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 800a10a:	f892 203b 	ldrb.w	r2, [r2, #59]	; 0x3b
 800a10e:	021b      	lsls	r3, r3, #8
 800a110:	0112      	lsls	r2, r2, #4
 800a112:	b2d2      	uxtb	r2, r2
 800a114:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800a118:	4313      	orrs	r3, r2
 800a11a:	f001 010f 	and.w	r1, r1, #15
 800a11e:	ea43 0001 	orr.w	r0, r3, r1
 800a122:	4770      	bx	lr

0800a124 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	4604      	mov	r4, r0
 800a128:	4616      	mov	r6, r2
 800a12a:	461d      	mov	r5, r3
 800a12c:	2900      	cmp	r1, #0
 800a12e:	f040 808d 	bne.w	800a24c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x128>
 800a132:	2a02      	cmp	r2, #2
 800a134:	d11a      	bne.n	800a16c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x48>
 800a136:	f890 38f4 	ldrb.w	r3, [r0, #2292]	; 0x8f4
 800a13a:	b133      	cbz	r3, 800a14a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x26>
 800a13c:	f890 38ea 	ldrb.w	r3, [r0, #2282]	; 0x8ea
 800a140:	f880 18f4 	strb.w	r1, [r0, #2292]	; 0x8f4
 800a144:	3b01      	subs	r3, #1
 800a146:	f880 38ea 	strb.w	r3, [r0, #2282]	; 0x8ea
 800a14a:	f894 391c 	ldrb.w	r3, [r4, #2332]	; 0x91c
 800a14e:	b90b      	cbnz	r3, 800a154 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x30>
 800a150:	2000      	movs	r0, #0
 800a152:	e00a      	b.n	800a16a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x46>
 800a154:	2308      	movs	r3, #8
 800a156:	2000      	movs	r0, #0
 800a158:	f884 391b 	strb.w	r3, [r4, #2331]	; 0x91b
 800a15c:	f894 38eb 	ldrb.w	r3, [r4, #2283]	; 0x8eb
 800a160:	f884 091c 	strb.w	r0, [r4, #2332]	; 0x91c
 800a164:	3b01      	subs	r3, #1
 800a166:	f884 38eb 	strb.w	r3, [r4, #2283]	; 0x8eb
 800a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a16c:	2a00      	cmp	r2, #0
 800a16e:	d135      	bne.n	800a1dc <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb8>
 800a170:	f890 391c 	ldrb.w	r3, [r0, #2332]	; 0x91c
 800a174:	b923      	cbnz	r3, 800a180 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5c>
 800a176:	f890 38eb 	ldrb.w	r3, [r0, #2283]	; 0x8eb
 800a17a:	3301      	adds	r3, #1
 800a17c:	f880 38eb 	strb.w	r3, [r0, #2283]	; 0x8eb
 800a180:	2301      	movs	r3, #1
 800a182:	2700      	movs	r7, #0
 800a184:	f884 391c 	strb.w	r3, [r4, #2332]	; 0x91c
 800a188:	f005 030f 	and.w	r3, r5, #15
 800a18c:	f884 391a 	strb.w	r3, [r4, #2330]	; 0x91a
 800a190:	463a      	mov	r2, r7
 800a192:	4629      	mov	r1, r5
 800a194:	4620      	mov	r0, r4
 800a196:	f884 791b 	strb.w	r7, [r4, #2331]	; 0x91b
 800a19a:	f7ff ffb3 	bl	800a104 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a19e:	f894 38f4 	ldrb.w	r3, [r4, #2292]	; 0x8f4
 800a1a2:	f8a4 0918 	strh.w	r0, [r4, #2328]	; 0x918
 800a1a6:	b133      	cbz	r3, 800a1b6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x92>
 800a1a8:	f894 38ea 	ldrb.w	r3, [r4, #2282]	; 0x8ea
 800a1ac:	f884 78f4 	strb.w	r7, [r4, #2292]	; 0x8f4
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	f884 38ea 	strb.w	r3, [r4, #2282]	; 0x8ea
 800a1b6:	69a0      	ldr	r0, [r4, #24]
 800a1b8:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d03a      	beq.n	800a236 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x112>
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d133      	bne.n	800a22c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x108>
 800a1c4:	69e0      	ldr	r0, [r4, #28]
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	d13a      	bne.n	800a240 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x11c>
 800a1ca:	6a20      	ldr	r0, [r4, #32]
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d0bf      	beq.n	800a150 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x2c>
 800a1d0:	6803      	ldr	r3, [r0, #0]
 800a1d2:	462a      	mov	r2, r5
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	4798      	blx	r3
 800a1da:	e7b9      	b.n	800a150 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x2c>
 800a1dc:	2a01      	cmp	r2, #1
 800a1de:	d1ea      	bne.n	800a1b6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x92>
 800a1e0:	f890 38f4 	ldrb.w	r3, [r0, #2292]	; 0x8f4
 800a1e4:	b923      	cbnz	r3, 800a1f0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xcc>
 800a1e6:	f890 38ea 	ldrb.w	r3, [r0, #2282]	; 0x8ea
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	f880 38ea 	strb.w	r3, [r0, #2282]	; 0x8ea
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	f884 38f4 	strb.w	r3, [r4, #2292]	; 0x8f4
 800a1f6:	f005 030f 	and.w	r3, r5, #15
 800a1fa:	f884 38f2 	strb.w	r3, [r4, #2290]	; 0x8f2
 800a1fe:	2200      	movs	r2, #0
 800a200:	4629      	mov	r1, r5
 800a202:	4620      	mov	r0, r4
 800a204:	f7ff ff7e 	bl	800a104 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a208:	f894 391c 	ldrb.w	r3, [r4, #2332]	; 0x91c
 800a20c:	f8a4 08f0 	strh.w	r0, [r4, #2288]	; 0x8f0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0d0      	beq.n	800a1b6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x92>
 800a214:	2300      	movs	r3, #0
 800a216:	f884 391c 	strb.w	r3, [r4, #2332]	; 0x91c
 800a21a:	2308      	movs	r3, #8
 800a21c:	f884 391b 	strb.w	r3, [r4, #2331]	; 0x91b
 800a220:	f894 38eb 	ldrb.w	r3, [r4, #2283]	; 0x8eb
 800a224:	3b01      	subs	r3, #1
 800a226:	f884 38eb 	strb.w	r3, [r4, #2283]	; 0x8eb
 800a22a:	e7c4      	b.n	800a1b6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x92>
 800a22c:	6803      	ldr	r3, [r0, #0]
 800a22e:	4632      	mov	r2, r6
 800a230:	2100      	movs	r1, #0
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	4798      	blx	r3
 800a236:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	d188      	bne.n	800a150 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x2c>
 800a23e:	e7c1      	b.n	800a1c4 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xa0>
 800a240:	6803      	ldr	r3, [r0, #0]
 800a242:	462a      	mov	r2, r5
 800a244:	2100      	movs	r1, #0
 800a246:	695b      	ldr	r3, [r3, #20]
 800a248:	4798      	blx	r3
 800a24a:	e7be      	b.n	800a1ca <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xa6>
 800a24c:	f06f 0004 	mvn.w	r0, #4
 800a250:	e78b      	b.n	800a16a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x46>

0800a252 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 800a252:	b510      	push	{r4, lr}
 800a254:	4604      	mov	r4, r0
 800a256:	4608      	mov	r0, r1
 800a258:	b971      	cbnz	r1, 800a278 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x26>
 800a25a:	b92b      	cbnz	r3, 800a268 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 800a25c:	f894 391a 	ldrb.w	r3, [r4, #2330]	; 0x91a
 800a260:	7013      	strb	r3, [r2, #0]
 800a262:	f894 091c 	ldrb.w	r0, [r4, #2332]	; 0x91c
 800a266:	bd10      	pop	{r4, pc}
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d0fc      	beq.n	800a266 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x14>
 800a26c:	f894 38f2 	ldrb.w	r3, [r4, #2290]	; 0x8f2
 800a270:	7013      	strb	r3, [r2, #0]
 800a272:	f894 08f4 	ldrb.w	r0, [r4, #2292]	; 0x8f4
 800a276:	e7f6      	b.n	800a266 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x14>
 800a278:	2000      	movs	r0, #0
 800a27a:	e7f4      	b.n	800a266 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x14>

0800a27c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 800a27c:	1883      	adds	r3, r0, r2
 800a27e:	b570      	push	{r4, r5, r6, lr}
 800a280:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
 800a284:	0093      	lsls	r3, r2, #2
 800a286:	4604      	mov	r4, r0
 800a288:	460e      	mov	r6, r1
 800a28a:	4615      	mov	r5, r2
 800a28c:	d105      	bne.n	800a29a <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x1e>
 800a28e:	f8b0 18f0 	ldrh.w	r1, [r0, #2288]	; 0x8f0
 800a292:	f7ff ff37 	bl	800a104 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a296:	f8a4 08f0 	strh.w	r0, [r4, #2288]	; 0x8f0
 800a29a:	69e0      	ldr	r0, [r4, #28]
 800a29c:	b150      	cbz	r0, 800a2b4 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x38>
 800a29e:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d106      	bne.n	800a2b4 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x38>
 800a2a6:	6803      	ldr	r3, [r0, #0]
 800a2a8:	4632      	mov	r2, r6
 800a2aa:	4629      	mov	r1, r5
 800a2ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	4718      	bx	r3
 800a2b4:	bd70      	pop	{r4, r5, r6, pc}

0800a2b6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 800a2b6:	1883      	adds	r3, r0, r2
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
 800a2be:	0093      	lsls	r3, r2, #2
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	460e      	mov	r6, r1
 800a2c4:	4615      	mov	r5, r2
 800a2c6:	d105      	bne.n	800a2d4 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x1e>
 800a2c8:	f8b0 18f0 	ldrh.w	r1, [r0, #2288]	; 0x8f0
 800a2cc:	f7ff ff1a 	bl	800a104 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 800a2d0:	f8a4 08f0 	strh.w	r0, [r4, #2288]	; 0x8f0
 800a2d4:	69e0      	ldr	r0, [r4, #28]
 800a2d6:	b150      	cbz	r0, 800a2ee <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x38>
 800a2d8:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d106      	bne.n	800a2ee <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x38>
 800a2e0:	6803      	ldr	r3, [r0, #0]
 800a2e2:	4632      	mov	r2, r6
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	4718      	bx	r3
 800a2ee:	bd70      	pop	{r4, r5, r6, pc}

0800a2f0 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800a2f0:	b570      	push	{r4, r5, r6, lr}
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4615      	mov	r5, r2
 800a2f6:	b9f1      	cbnz	r1, 800a336 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x46>
 800a2f8:	f8c4 2910 	str.w	r2, [r4, #2320]	; 0x910
 800a2fc:	f890 38f3 	ldrb.w	r3, [r0, #2291]	; 0x8f3
 800a300:	2a01      	cmp	r2, #1
 800a302:	bf0c      	ite	eq
 800a304:	f043 0301 	orreq.w	r3, r3, #1
 800a308:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800a30c:	f880 38f3 	strb.w	r3, [r0, #2291]	; 0x8f3
 800a310:	f890 38e1 	ldrb.w	r3, [r0, #2273]	; 0x8e1
 800a314:	2b02      	cmp	r3, #2
 800a316:	d10e      	bne.n	800a336 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x46>
 800a318:	69c0      	ldr	r0, [r0, #28]
 800a31a:	b118      	cbz	r0, 800a324 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x34>
 800a31c:	6803      	ldr	r3, [r0, #0]
 800a31e:	2100      	movs	r1, #0
 800a320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a322:	4798      	blx	r3
 800a324:	6a20      	ldr	r0, [r4, #32]
 800a326:	b130      	cbz	r0, 800a336 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x46>
 800a328:	6803      	ldr	r3, [r0, #0]
 800a32a:	462a      	mov	r2, r5
 800a32c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a330:	2100      	movs	r1, #0
 800a332:	6a1b      	ldr	r3, [r3, #32]
 800a334:	4718      	bx	r3
 800a336:	bd70      	pop	{r4, r5, r6, pc}

0800a338 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	4604      	mov	r4, r0
 800a33c:	4615      	mov	r5, r2
 800a33e:	b9f1      	cbnz	r1, 800a37e <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x46>
 800a340:	f8c4 2908 	str.w	r2, [r4, #2312]	; 0x908
 800a344:	f890 38f3 	ldrb.w	r3, [r0, #2291]	; 0x8f3
 800a348:	2a01      	cmp	r2, #1
 800a34a:	bf0c      	ite	eq
 800a34c:	f043 0302 	orreq.w	r3, r3, #2
 800a350:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 800a354:	f880 38f3 	strb.w	r3, [r0, #2291]	; 0x8f3
 800a358:	f890 38e1 	ldrb.w	r3, [r0, #2273]	; 0x8e1
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d10e      	bne.n	800a37e <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x46>
 800a360:	69c0      	ldr	r0, [r0, #28]
 800a362:	b118      	cbz	r0, 800a36c <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x34>
 800a364:	6803      	ldr	r3, [r0, #0]
 800a366:	2100      	movs	r1, #0
 800a368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36a:	4798      	blx	r3
 800a36c:	6a20      	ldr	r0, [r4, #32]
 800a36e:	b130      	cbz	r0, 800a37e <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x46>
 800a370:	6803      	ldr	r3, [r0, #0]
 800a372:	462a      	mov	r2, r5
 800a374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a378:	2100      	movs	r1, #0
 800a37a:	69db      	ldr	r3, [r3, #28]
 800a37c:	4718      	bx	r3
 800a37e:	bd70      	pop	{r4, r5, r6, pc}

0800a380 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>:
 800a380:	b570      	push	{r4, r5, r6, lr}
 800a382:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 800a386:	f1a1 0208 	sub.w	r2, r1, #8
 800a38a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a38e:	4604      	mov	r4, r0
 800a390:	f880 3091 	strb.w	r3, [r0, #145]	; 0x91
 800a394:	2a04      	cmp	r2, #4
 800a396:	d81f      	bhi.n	800a3d8 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800a398:	e8df f002 	tbb	[pc, r2]
 800a39c:	1e1b0307 	cdpne	3, 1, cr0, cr11, cr7, {0}
 800a3a0:	f043001e 			; <UNDEFINED> instruction: 0xf043001e
 800a3a4:	0340      	lsls	r0, r0, #13
 800a3a6:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
 800a3aa:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d112      	bne.n	800a3d8 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800a3b2:	69e0      	ldr	r0, [r4, #28]
 800a3b4:	f001 0507 	and.w	r5, r1, #7
 800a3b8:	b118      	cbz	r0, 800a3c2 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x42>
 800a3ba:	6803      	ldr	r3, [r0, #0]
 800a3bc:	4629      	mov	r1, r5
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	4798      	blx	r3
 800a3c2:	6a20      	ldr	r0, [r4, #32]
 800a3c4:	b140      	cbz	r0, 800a3d8 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x58>
 800a3c6:	6803      	ldr	r3, [r0, #0]
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d0:	4718      	bx	r3
 800a3d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3d6:	e7e6      	b.n	800a3a6 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)+0x26>
 800a3d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a3dc <ArtNetNode::HandleAddress()>:
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e2:	f880 38e0 	strb.w	r3, [r0, #2272]	; 0x8e0
 800a3e6:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	b133      	cbz	r3, 800a3fc <ArtNetNode::HandleAddress()+0x20>
 800a3ee:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 800a3f2:	f7ff fc4b 	bl	8009c8c <ArtNetNode::SetShortName(char const*)>
 800a3f6:	2306      	movs	r3, #6
 800a3f8:	f884 38e0 	strb.w	r3, [r4, #2272]	; 0x8e0
 800a3fc:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 800a400:	b13b      	cbz	r3, 800a412 <ArtNetNode::HandleAddress()+0x36>
 800a402:	4620      	mov	r0, r4
 800a404:	f104 01bc 	add.w	r1, r4, #188	; 0xbc
 800a408:	f7ff fc68 	bl	8009cdc <ArtNetNode::SetLongName(char const*)>
 800a40c:	2307      	movs	r3, #7
 800a40e:	f884 38e0 	strb.w	r3, [r4, #2272]	; 0x8e0
 800a412:	f894 50a9 	ldrb.w	r5, [r4, #169]	; 0xa9
 800a416:	b105      	cbz	r5, 800a41a <ArtNetNode::HandleAddress()+0x3e>
 800a418:	3d01      	subs	r5, #1
 800a41a:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
 800a41e:	2900      	cmp	r1, #0
 800a420:	d146      	bne.n	800a4b0 <ArtNetNode::HandleAddress()+0xd4>
 800a422:	462a      	mov	r2, r5
 800a424:	4620      	mov	r0, r4
 800a426:	f7ff ff29 	bl	800a27c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800a42a:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
 800a42e:	2900      	cmp	r1, #0
 800a430:	d144      	bne.n	800a4bc <ArtNetNode::HandleAddress()+0xe0>
 800a432:	462a      	mov	r2, r5
 800a434:	4620      	mov	r0, r4
 800a436:	f7ff ff3e 	bl	800a2b6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800a43a:	00ad      	lsls	r5, r5, #2
 800a43c:	462e      	mov	r6, r5
 800a43e:	f104 07fb 	add.w	r7, r4, #251	; 0xfb
 800a442:	f104 08ff 	add.w	r8, r4, #255	; 0xff
 800a446:	797b      	ldrb	r3, [r7, #5]
 800a448:	2b7f      	cmp	r3, #127	; 0x7f
 800a44a:	d007      	beq.n	800a45c <ArtNetNode::HandleAddress()+0x80>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d13b      	bne.n	800a4c8 <ArtNetNode::HandleAddress()+0xec>
 800a450:	2301      	movs	r3, #1
 800a452:	2201      	movs	r2, #1
 800a454:	4631      	mov	r1, r6
 800a456:	4620      	mov	r0, r4
 800a458:	f7ff fe64 	bl	800a124 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800a45c:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800a460:	2a7f      	cmp	r2, #127	; 0x7f
 800a462:	d005      	beq.n	800a470 <ArtNetNode::HandleAddress()+0x94>
 800a464:	bbaa      	cbnz	r2, 800a4d2 <ArtNetNode::HandleAddress()+0xf6>
 800a466:	2301      	movs	r3, #1
 800a468:	4631      	mov	r1, r6
 800a46a:	4620      	mov	r0, r4
 800a46c:	f7ff fe5a 	bl	800a124 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 800a470:	45b8      	cmp	r8, r7
 800a472:	f106 0601 	add.w	r6, r6, #1
 800a476:	d1e6      	bne.n	800a446 <ArtNetNode::HandleAddress()+0x6a>
 800a478:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
 800a47c:	f003 0103 	and.w	r1, r3, #3
 800a480:	2b53      	cmp	r3, #83	; 0x53
 800a482:	4429      	add	r1, r5
 800a484:	d82b      	bhi.n	800a4de <ArtNetNode::HandleAddress()+0x102>
 800a486:	2b4f      	cmp	r3, #79	; 0x4f
 800a488:	f200 808d 	bhi.w	800a5a6 <ArtNetNode::HandleAddress()+0x1ca>
 800a48c:	1e5a      	subs	r2, r3, #1
 800a48e:	b2d0      	uxtb	r0, r2
 800a490:	2812      	cmp	r0, #18
 800a492:	d834      	bhi.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a494:	2a12      	cmp	r2, #18
 800a496:	d832      	bhi.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a498:	e8df f002 	tbb	[pc, r2]
 800a49c:	6f63574d 	svcvs	0x0063574d
 800a4a0:	7b313131 	blvc	8c5696c <__exidx_end+0xc3f288>
 800a4a4:	7b7b7b7b 	blvc	9ee9298 <__exidx_end+0x1ed1bb4>
 800a4a8:	80313131 	eorshi	r3, r1, r1, lsr r1
 800a4ac:	00808080 	addeq	r8, r0, r0, lsl #1
 800a4b0:	060f      	lsls	r7, r1, #24
 800a4b2:	d5ba      	bpl.n	800a42a <ArtNetNode::HandleAddress()+0x4e>
 800a4b4:	462a      	mov	r2, r5
 800a4b6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a4ba:	e7b3      	b.n	800a424 <ArtNetNode::HandleAddress()+0x48>
 800a4bc:	060e      	lsls	r6, r1, #24
 800a4be:	d5bc      	bpl.n	800a43a <ArtNetNode::HandleAddress()+0x5e>
 800a4c0:	462a      	mov	r2, r5
 800a4c2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a4c6:	e7b5      	b.n	800a434 <ArtNetNode::HandleAddress()+0x58>
 800a4c8:	0618      	lsls	r0, r3, #24
 800a4ca:	d5c7      	bpl.n	800a45c <ArtNetNode::HandleAddress()+0x80>
 800a4cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4d0:	e7bf      	b.n	800a452 <ArtNetNode::HandleAddress()+0x76>
 800a4d2:	0611      	lsls	r1, r2, #24
 800a4d4:	d5cc      	bpl.n	800a470 <ArtNetNode::HandleAddress()+0x94>
 800a4d6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800a4da:	2200      	movs	r2, #0
 800a4dc:	e7c4      	b.n	800a468 <ArtNetNode::HandleAddress()+0x8c>
 800a4de:	2b93      	cmp	r3, #147	; 0x93
 800a4e0:	d81a      	bhi.n	800a518 <ArtNetNode::HandleAddress()+0x13c>
 800a4e2:	2b8f      	cmp	r3, #143	; 0x8f
 800a4e4:	d863      	bhi.n	800a5ae <ArtNetNode::HandleAddress()+0x1d2>
 800a4e6:	2b63      	cmp	r3, #99	; 0x63
 800a4e8:	d806      	bhi.n	800a4f8 <ArtNetNode::HandleAddress()+0x11c>
 800a4ea:	2b5f      	cmp	r3, #95	; 0x5f
 800a4ec:	d907      	bls.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f7ff fefd 	bl	800a2f0 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800a4f6:	e002      	b.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a4f8:	3b70      	subs	r3, #112	; 0x70
 800a4fa:	2b03      	cmp	r3, #3
 800a4fc:	d955      	bls.n	800a5aa <ArtNetNode::HandleAddress()+0x1ce>
 800a4fe:	69a0      	ldr	r0, [r4, #24]
 800a500:	b120      	cbz	r0, 800a50c <ArtNetNode::HandleAddress()+0x130>
 800a502:	6803      	ldr	r3, [r0, #0]
 800a504:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	4798      	blx	r3
 800a50c:	4620      	mov	r0, r4
 800a50e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a512:	2101      	movs	r1, #1
 800a514:	f000 bc56 	b.w	800adc4 <ArtNetNode::SendPollRelply(bool)>
 800a518:	2bc3      	cmp	r3, #195	; 0xc3
 800a51a:	d806      	bhi.n	800a52a <ArtNetNode::HandleAddress()+0x14e>
 800a51c:	2bbf      	cmp	r3, #191	; 0xbf
 800a51e:	d9ee      	bls.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a520:	2201      	movs	r2, #1
 800a522:	4620      	mov	r0, r4
 800a524:	f000 fcd6 	bl	800aed4 <ArtNetNode::SetRmd(unsigned int, bool)>
 800a528:	e7e9      	b.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a52a:	3330      	adds	r3, #48	; 0x30
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d8e5      	bhi.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a532:	2200      	movs	r2, #0
 800a534:	e7f5      	b.n	800a522 <ArtNetNode::HandleAddress()+0x146>
 800a536:	2300      	movs	r3, #0
 800a538:	f884 38e6 	strb.w	r3, [r4, #2278]	; 0x8e6
 800a53c:	f894 38f3 	ldrb.w	r3, [r4, #2291]	; 0x8f3
 800a540:	f023 0308 	bic.w	r3, r3, #8
 800a544:	f884 38f3 	strb.w	r3, [r4, #2291]	; 0x8f3
 800a548:	e7d9      	b.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a54a:	4b37      	ldr	r3, [pc, #220]	; (800a628 <ArtNetNode::HandleAddress()+0x24c>)
 800a54c:	2102      	movs	r1, #2
 800a54e:	6818      	ldr	r0, [r3, #0]
 800a550:	f008 f9ea 	bl	8012928 <LedBlink::SetMode(ledblink::Mode)>
 800a554:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800a558:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800a55c:	f884 308f 	strb.w	r3, [r4, #143]	; 0x8f
 800a560:	e7cd      	b.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a562:	4b31      	ldr	r3, [pc, #196]	; (800a628 <ArtNetNode::HandleAddress()+0x24c>)
 800a564:	2100      	movs	r1, #0
 800a566:	6818      	ldr	r0, [r3, #0]
 800a568:	f008 f9de 	bl	8012928 <LedBlink::SetMode(ledblink::Mode)>
 800a56c:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800a570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a574:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a578:	e7f0      	b.n	800a55c <ArtNetNode::HandleAddress()+0x180>
 800a57a:	4b2b      	ldr	r3, [pc, #172]	; (800a628 <ArtNetNode::HandleAddress()+0x24c>)
 800a57c:	2104      	movs	r1, #4
 800a57e:	6818      	ldr	r0, [r3, #0]
 800a580:	f008 f9d2 	bl	8012928 <LedBlink::SetMode(ledblink::Mode)>
 800a584:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800a588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a58c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a590:	e7e4      	b.n	800a55c <ArtNetNode::HandleAddress()+0x180>
 800a592:	4619      	mov	r1, r3
 800a594:	4620      	mov	r0, r4
 800a596:	f7ff fef3 	bl	800a380 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800a59a:	e7b0      	b.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a59c:	2201      	movs	r2, #1
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f7ff feca 	bl	800a338 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800a5a4:	e7ab      	b.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	e7f9      	b.n	800a59e <ArtNetNode::HandleAddress()+0x1c2>
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	e7a0      	b.n	800a4f0 <ArtNetNode::HandleAddress()+0x114>
 800a5ae:	4b1f      	ldr	r3, [pc, #124]	; (800a62c <ArtNetNode::HandleAddress()+0x250>)
 800a5b0:	b2cd      	uxtb	r5, r1
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	2700      	movs	r7, #0
 800a5b6:	07d2      	lsls	r2, r2, #31
 800a5b8:	bf5c      	itt	pl
 800a5ba:	2201      	movpl	r2, #1
 800a5bc:	601a      	strpl	r2, [r3, #0]
 800a5be:	f240 6204 	movw	r2, #1540	; 0x604
 800a5c2:	436a      	muls	r2, r5
 800a5c4:	4b1a      	ldr	r3, [pc, #104]	; (800a630 <ArtNetNode::HandleAddress()+0x254>)
 800a5c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5ca:	441a      	add	r2, r3
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	6860      	ldr	r0, [r4, #4]
 800a5d0:	f502 7600 	add.w	r6, r2, #512	; 0x200
 800a5d4:	42b1      	cmp	r1, r6
 800a5d6:	d123      	bne.n	800a620 <ArtNetNode::HandleAddress()+0x244>
 800a5d8:	f240 6104 	movw	r1, #1540	; 0x604
 800a5dc:	fb01 3105 	mla	r1, r1, r5, r3
 800a5e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5e4:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 800a5e8:	6801      	ldr	r1, [r0, #0]
 800a5ea:	690e      	ldr	r6, [r1, #16]
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	47b0      	blx	r6
 800a5f0:	2d00      	cmp	r5, #0
 800a5f2:	d184      	bne.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a5f4:	f8d4 3910 	ldr.w	r3, [r4, #2320]	; 0x910
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d180      	bne.n	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a5fc:	f894 3915 	ldrb.w	r3, [r4, #2325]	; 0x915
 800a600:	2b00      	cmp	r3, #0
 800a602:	f47f af7c 	bne.w	800a4fe <ArtNetNode::HandleAddress()+0x122>
 800a606:	6860      	ldr	r0, [r4, #4]
 800a608:	4629      	mov	r1, r5
 800a60a:	6803      	ldr	r3, [r0, #0]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	4798      	blx	r3
 800a610:	2301      	movs	r3, #1
 800a612:	f884 3915 	strb.w	r3, [r4, #2325]	; 0x915
 800a616:	f894 38f3 	ldrb.w	r3, [r4, #2291]	; 0x8f3
 800a61a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a61e:	e791      	b.n	800a544 <ArtNetNode::HandleAddress()+0x168>
 800a620:	f801 7b01 	strb.w	r7, [r1], #1
 800a624:	e7d6      	b.n	800a5d4 <ArtNetNode::HandleAddress()+0x1f8>
 800a626:	bf00      	nop
 800a628:	2000a22c 	andcs	sl, r0, ip, lsr #4
 800a62c:	200006c8 	andcs	r0, r0, r8, asr #13
 800a630:	200006cc 	andcs	r0, r0, ip, asr #13

0800a634 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 800a634:	f240 6304 	movw	r3, #1540	; 0x604
 800a638:	fb03 0001 	mla	r0, r3, r1, r0
 800a63c:	2300      	movs	r3, #0
 800a63e:	b510      	push	{r4, lr}
 800a640:	4293      	cmp	r3, r2
 800a642:	d100      	bne.n	800a646 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x12>
 800a644:	bd10      	pop	{r4, pc}
 800a646:	f810 4b01 	ldrb.w	r4, [r0], #1
 800a64a:	3301      	adds	r3, #1
 800a64c:	f890 11ff 	ldrb.w	r1, [r0, #511]	; 0x1ff
 800a650:	42a1      	cmp	r1, r4
 800a652:	bf38      	it	cc
 800a654:	4621      	movcc	r1, r4
 800a656:	f880 13ff 	strb.w	r1, [r0, #1023]	; 0x3ff
 800a65a:	e7f1      	b.n	800a640 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>

0800a65c <memcpy.isra.0>:
 800a65c:	3801      	subs	r0, #1
 800a65e:	440a      	add	r2, r1
 800a660:	4291      	cmp	r1, r2
 800a662:	d100      	bne.n	800a666 <memcpy.isra.0+0xa>
 800a664:	4770      	bx	lr
 800a666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a66a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800a66e:	e7f7      	b.n	800a660 <memcpy.isra.0+0x4>

0800a670 <lightset::Data::Get()>:
 800a670:	4b03      	ldr	r3, [pc, #12]	; (800a680 <lightset::Data::Get()+0x10>)
 800a672:	4804      	ldr	r0, [pc, #16]	; (800a684 <lightset::Data::Get()+0x14>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	07d2      	lsls	r2, r2, #31
 800a678:	bf5c      	itt	pl
 800a67a:	2201      	movpl	r2, #1
 800a67c:	601a      	strpl	r2, [r3, #0]
 800a67e:	4770      	bx	lr
 800a680:	200006c8 	andcs	r0, r0, r8, asr #13
 800a684:	200006cc 	andcs	r0, r0, ip, asr #13

0800a688 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 800a688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a68c:	4615      	mov	r5, r2
 800a68e:	460f      	mov	r7, r1
 800a690:	4604      	mov	r4, r0
 800a692:	f7ff ffed 	bl	800a670 <lightset::Data::Get()>
 800a696:	f240 6304 	movw	r3, #1540	; 0x604
 800a69a:	4606      	mov	r6, r0
 800a69c:	435c      	muls	r4, r3
 800a69e:	eb00 0804 	add.w	r8, r0, r4
 800a6a2:	462a      	mov	r2, r5
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a6ac:	f7ff ffd6 	bl	800a65c <memcpy.isra.0>
 800a6b0:	462a      	mov	r2, r5
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 800a6b8:	1930      	adds	r0, r6, r4
 800a6ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6be:	f7ff bfcd 	b.w	800a65c <memcpy.isra.0>

0800a6c2 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800a6c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c6:	4680      	mov	r8, r0
 800a6c8:	f240 6404 	movw	r4, #1540	; 0x604
 800a6cc:	4615      	mov	r5, r2
 800a6ce:	460f      	mov	r7, r1
 800a6d0:	4699      	mov	r9, r3
 800a6d2:	f7ff ffcd 	bl	800a670 <lightset::Data::Get()>
 800a6d6:	fb04 f408 	mul.w	r4, r4, r8
 800a6da:	eb00 0a04 	add.w	sl, r0, r4
 800a6de:	4606      	mov	r6, r0
 800a6e0:	462a      	mov	r2, r5
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	4650      	mov	r0, sl
 800a6e6:	f7ff ffb9 	bl	800a65c <memcpy.isra.0>
 800a6ea:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 800a6ee:	f1b9 0f00 	cmp.w	r9, #0
 800a6f2:	d106      	bne.n	800a702 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 800a6f4:	462a      	mov	r2, r5
 800a6f6:	4641      	mov	r1, r8
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fe:	f7ff bf99 	b.w	800a634 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800a702:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a706:	462a      	mov	r2, r5
 800a708:	4639      	mov	r1, r7
 800a70a:	1930      	adds	r0, r6, r4
 800a70c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a710:	f7ff bfa4 	b.w	800a65c <memcpy.isra.0>

0800a714 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 800a714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a718:	4616      	mov	r6, r2
 800a71a:	4699      	mov	r9, r3
 800a71c:	4680      	mov	r8, r0
 800a71e:	460f      	mov	r7, r1
 800a720:	f7ff ffa6 	bl	800a670 <lightset::Data::Get()>
 800a724:	f240 6404 	movw	r4, #1540	; 0x604
 800a728:	4605      	mov	r5, r0
 800a72a:	fb04 f408 	mul.w	r4, r4, r8
 800a72e:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800a732:	4632      	mov	r2, r6
 800a734:	4639      	mov	r1, r7
 800a736:	4428      	add	r0, r5
 800a738:	f7ff ff90 	bl	800a65c <memcpy.isra.0>
 800a73c:	192b      	adds	r3, r5, r4
 800a73e:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 800a742:	f1b9 0f00 	cmp.w	r9, #0
 800a746:	d106      	bne.n	800a756 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 800a748:	4632      	mov	r2, r6
 800a74a:	4641      	mov	r1, r8
 800a74c:	4628      	mov	r0, r5
 800a74e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a752:	f7ff bf6f 	b.w	800a634 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 800a756:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a75a:	4632      	mov	r2, r6
 800a75c:	4639      	mov	r1, r7
 800a75e:	1928      	adds	r0, r5, r4
 800a760:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a764:	f7ff bf7a 	b.w	800a65c <memcpy.isra.0>

0800a768 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 800a768:	f890 38e6 	ldrb.w	r3, [r0, #2278]	; 0x8e6
 800a76c:	b91b      	cbnz	r3, 800a776 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 800a76e:	f240 1301 	movw	r3, #257	; 0x101
 800a772:	f8a0 38e6 	strh.w	r3, [r0, #2278]	; 0x8e6
 800a776:	2328      	movs	r3, #40	; 0x28
 800a778:	fb03 0001 	mla	r0, r3, r1, r0
 800a77c:	f890 38f3 	ldrb.w	r3, [r0, #2291]	; 0x8f3
 800a780:	f043 0308 	orr.w	r3, r3, #8
 800a784:	f880 38f3 	strb.w	r3, [r0, #2291]	; 0x8f3
 800a788:	4770      	bx	lr

0800a78a <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 800a78a:	2328      	movs	r3, #40	; 0x28
 800a78c:	b530      	push	{r4, r5, lr}
 800a78e:	f242 7510 	movw	r5, #10000	; 0x2710
 800a792:	fb03 0301 	mla	r3, r3, r1, r0
 800a796:	f8d0 2874 	ldr.w	r2, [r0, #2164]	; 0x874
 800a79a:	f8d3 48f8 	ldr.w	r4, [r3, #2296]	; 0x8f8
 800a79e:	1b14      	subs	r4, r2, r4
 800a7a0:	42ac      	cmp	r4, r5
 800a7a2:	d908      	bls.n	800a7b6 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 800a7a4:	2400      	movs	r4, #0
 800a7a6:	f8c3 48fc 	str.w	r4, [r3, #2300]	; 0x8fc
 800a7aa:	f893 48f3 	ldrb.w	r4, [r3, #2291]	; 0x8f3
 800a7ae:	f024 0408 	bic.w	r4, r4, #8
 800a7b2:	f883 48f3 	strb.w	r4, [r3, #2291]	; 0x8f3
 800a7b6:	2328      	movs	r3, #40	; 0x28
 800a7b8:	fb03 0101 	mla	r1, r3, r1, r0
 800a7bc:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800a7c0:	1ad2      	subs	r2, r2, r3
 800a7c2:	f242 7310 	movw	r3, #10000	; 0x2710
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d908      	bls.n	800a7dc <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f8c1 3904 	str.w	r3, [r1, #2308]	; 0x904
 800a7d0:	f891 38f3 	ldrb.w	r3, [r1, #2291]	; 0x8f3
 800a7d4:	f023 0308 	bic.w	r3, r3, #8
 800a7d8:	f881 38f3 	strb.w	r3, [r1, #2291]	; 0x8f3
 800a7dc:	f890 38f3 	ldrb.w	r3, [r0, #2291]	; 0x8f3
 800a7e0:	071b      	lsls	r3, r3, #28
 800a7e2:	bf5c      	itt	pl
 800a7e4:	f44f 7380 	movpl.w	r3, #256	; 0x100
 800a7e8:	f8a0 38e6 	strhpl.w	r3, [r0, #2278]	; 0x8e6
 800a7ec:	bd30      	pop	{r4, r5, pc}

0800a7ee <ArtNetNode::HandleDmx()>:
 800a7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f0:	f8b0 50ac 	ldrh.w	r5, [r0, #172]	; 0xac
 800a7f4:	f890 38f4 	ldrb.w	r3, [r0, #2292]	; 0x8f4
 800a7f8:	ba6d      	rev16	r5, r5
 800a7fa:	b2ad      	uxth	r5, r5
 800a7fc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a800:	4604      	mov	r4, r0
 800a802:	bf28      	it	cs
 800a804:	f44f 7500 	movcs.w	r5, #512	; 0x200
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d077      	beq.n	800a8fc <ArtNetNode::HandleDmx()+0x10e>
 800a80c:	f8d0 3910 	ldr.w	r3, [r0, #2320]	; 0x910
 800a810:	2b00      	cmp	r3, #0
 800a812:	d173      	bne.n	800a8fc <ArtNetNode::HandleDmx()+0x10e>
 800a814:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
 800a818:	f8b0 38f0 	ldrh.w	r3, [r0, #2288]	; 0x8f0
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d16d      	bne.n	800a8fc <ArtNetNode::HandleDmx()+0x10e>
 800a820:	f890 38f3 	ldrb.w	r3, [r0, #2291]	; 0x8f3
 800a824:	f8d0 78fc 	ldr.w	r7, [r0, #2300]	; 0x8fc
 800a828:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a82c:	f880 38f3 	strb.w	r3, [r0, #2291]	; 0x8f3
 800a830:	f890 38e6 	ldrb.w	r3, [r0, #2278]	; 0x8e6
 800a834:	f8d0 6904 	ldr.w	r6, [r0, #2308]	; 0x904
 800a838:	b123      	cbz	r3, 800a844 <ArtNetNode::HandleDmx()+0x56>
 800a83a:	f890 18e8 	ldrb.w	r1, [r0, #2280]	; 0x8e8
 800a83e:	b909      	cbnz	r1, 800a844 <ArtNetNode::HandleDmx()+0x56>
 800a840:	f7ff ffa3 	bl	800a78a <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 800a844:	ea57 0006 	orrs.w	r0, r7, r6
 800a848:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 800a84c:	d12c      	bne.n	800a8a8 <ArtNetNode::HandleDmx()+0xba>
 800a84e:	462a      	mov	r2, r5
 800a850:	f8c4 38fc 	str.w	r3, [r4, #2300]	; 0x8fc
 800a854:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800a858:	f104 01ae 	add.w	r1, r4, #174	; 0xae
 800a85c:	f8c4 38f8 	str.w	r3, [r4, #2296]	; 0x8f8
 800a860:	f7ff ff12 	bl	800a688 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800a864:	f894 68e5 	ldrb.w	r6, [r4, #2277]	; 0x8e5
 800a868:	b9be      	cbnz	r6, 800a89a <ArtNetNode::HandleDmx()+0xac>
 800a86a:	6865      	ldr	r5, [r4, #4]
 800a86c:	f7ff ff00 	bl	800a670 <lightset::Data::Get()>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	4631      	mov	r1, r6
 800a874:	691f      	ldr	r7, [r3, #16]
 800a876:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800a87a:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
 800a87e:	4628      	mov	r0, r5
 800a880:	47b8      	blx	r7
 800a882:	f894 1915 	ldrb.w	r1, [r4, #2325]	; 0x915
 800a886:	b941      	cbnz	r1, 800a89a <ArtNetNode::HandleDmx()+0xac>
 800a888:	6860      	ldr	r0, [r4, #4]
 800a88a:	6803      	ldr	r3, [r0, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	4798      	blx	r3
 800a890:	2301      	movs	r3, #1
 800a892:	f884 38e7 	strb.w	r3, [r4, #2279]	; 0x8e7
 800a896:	f884 3915 	strb.w	r3, [r4, #2325]	; 0x915
 800a89a:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 800a89e:	f043 0302 	orr.w	r3, r3, #2
 800a8a2:	f884 38e9 	strb.w	r3, [r4, #2281]	; 0x8e9
 800a8a6:	e029      	b.n	800a8fc <ArtNetNode::HandleDmx()+0x10e>
 800a8a8:	42bb      	cmp	r3, r7
 800a8aa:	d10a      	bne.n	800a8c2 <ArtNetNode::HandleDmx()+0xd4>
 800a8ac:	2e00      	cmp	r6, #0
 800a8ae:	d14f      	bne.n	800a950 <ArtNetNode::HandleDmx()+0x162>
 800a8b0:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800a8b4:	462a      	mov	r2, r5
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f8c4 38f8 	str.w	r3, [r4, #2296]	; 0x8f8
 800a8bc:	f104 01ae 	add.w	r1, r4, #174	; 0xae
 800a8c0:	e7ce      	b.n	800a860 <ArtNetNode::HandleDmx()+0x72>
 800a8c2:	bb6f      	cbnz	r7, 800a920 <ArtNetNode::HandleDmx()+0x132>
 800a8c4:	42b3      	cmp	r3, r6
 800a8c6:	f8d4 2874 	ldr.w	r2, [r4, #2164]	; 0x874
 800a8ca:	f104 07ae 	add.w	r7, r4, #174	; 0xae
 800a8ce:	d116      	bne.n	800a8fe <ArtNetNode::HandleDmx()+0x110>
 800a8d0:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
 800a8d4:	f7ff fecc 	bl	800a670 <lightset::Data::Get()>
 800a8d8:	4606      	mov	r6, r0
 800a8da:	462a      	mov	r2, r5
 800a8dc:	4639      	mov	r1, r7
 800a8de:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800a8e2:	f7ff febb 	bl	800a65c <memcpy.isra.0>
 800a8e6:	462a      	mov	r2, r5
 800a8e8:	4639      	mov	r1, r7
 800a8ea:	f8c6 5600 	str.w	r5, [r6, #1536]	; 0x600
 800a8ee:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800a8f2:	f7ff feb3 	bl	800a65c <memcpy.isra.0>
 800a8f6:	e7b5      	b.n	800a864 <ArtNetNode::HandleDmx()+0x76>
 800a8f8:	42b3      	cmp	r3, r6
 800a8fa:	d015      	beq.n	800a928 <ArtNetNode::HandleDmx()+0x13a>
 800a8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fe:	bb23      	cbnz	r3, 800a94a <ArtNetNode::HandleDmx()+0x15c>
 800a900:	2100      	movs	r1, #0
 800a902:	f8c4 38fc 	str.w	r3, [r4, #2300]	; 0x8fc
 800a906:	f8c4 28f8 	str.w	r2, [r4, #2296]	; 0x8f8
 800a90a:	4620      	mov	r0, r4
 800a90c:	f7ff ff2c 	bl	800a768 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a910:	462a      	mov	r2, r5
 800a912:	4639      	mov	r1, r7
 800a914:	f8d4 3908 	ldr.w	r3, [r4, #2312]	; 0x908
 800a918:	2000      	movs	r0, #0
 800a91a:	f7ff fed2 	bl	800a6c2 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800a91e:	e7a1      	b.n	800a864 <ArtNetNode::HandleDmx()+0x76>
 800a920:	2e00      	cmp	r6, #0
 800a922:	d1e9      	bne.n	800a8f8 <ArtNetNode::HandleDmx()+0x10a>
 800a924:	f8c4 3904 	str.w	r3, [r4, #2308]	; 0x904
 800a928:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800a92c:	4620      	mov	r0, r4
 800a92e:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
 800a932:	2100      	movs	r1, #0
 800a934:	f7ff ff18 	bl	800a768 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a938:	462a      	mov	r2, r5
 800a93a:	2000      	movs	r0, #0
 800a93c:	f8d4 3908 	ldr.w	r3, [r4, #2312]	; 0x908
 800a940:	f104 01ae 	add.w	r1, r4, #174	; 0xae
 800a944:	f7ff fee6 	bl	800a714 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800a948:	e78c      	b.n	800a864 <ArtNetNode::HandleDmx()+0x76>
 800a94a:	2e00      	cmp	r6, #0
 800a94c:	d0ea      	beq.n	800a924 <ArtNetNode::HandleDmx()+0x136>
 800a94e:	e7d7      	b.n	800a900 <ArtNetNode::HandleDmx()+0x112>
 800a950:	2f00      	cmp	r7, #0
 800a952:	d0b7      	beq.n	800a8c4 <ArtNetNode::HandleDmx()+0xd6>
 800a954:	42b7      	cmp	r7, r6
 800a956:	d0d1      	beq.n	800a8fc <ArtNetNode::HandleDmx()+0x10e>
 800a958:	f8d4 3874 	ldr.w	r3, [r4, #2164]	; 0x874
 800a95c:	2100      	movs	r1, #0
 800a95e:	f8c4 38f8 	str.w	r3, [r4, #2296]	; 0x8f8
 800a962:	4620      	mov	r0, r4
 800a964:	f7ff ff00 	bl	800a768 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 800a968:	462a      	mov	r2, r5
 800a96a:	f8d4 3908 	ldr.w	r3, [r4, #2312]	; 0x908
 800a96e:	f104 01ae 	add.w	r1, r4, #174	; 0xae
 800a972:	e7d1      	b.n	800a918 <ArtNetNode::HandleDmx()+0x12a>

0800a974 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 800a974:	b961      	cbnz	r1, 800a990 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x1c>
 800a976:	4b07      	ldr	r3, [pc, #28]	; (800a994 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x20>)
 800a978:	6819      	ldr	r1, [r3, #0]
 800a97a:	694b      	ldr	r3, [r1, #20]
 800a97c:	69c9      	ldr	r1, [r1, #28]
 800a97e:	4053      	eors	r3, r2
 800a980:	420b      	tst	r3, r1
 800a982:	d102      	bne.n	800a98a <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x16>
 800a984:	f8c0 2920 	str.w	r2, [r0, #2336]	; 0x920
 800a988:	4770      	bx	lr
 800a98a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a98c:	f8c0 3920 	str.w	r3, [r0, #2336]	; 0x920
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	20009b68 	andcs	r9, r0, r8, ror #22

0800a998 <ArtNetNode::HandleDmxIn()>:
 800a998:	b530      	push	{r4, r5, lr}
 800a99a:	f890 391c 	ldrb.w	r3, [r0, #2332]	; 0x91c
 800a99e:	4604      	mov	r4, r0
 800a9a0:	b085      	sub	sp, #20
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d047      	beq.n	800aa36 <ArtNetNode::HandleDmxIn()+0x9e>
 800a9a6:	6900      	ldr	r0, [r0, #16]
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	6803      	ldr	r3, [r0, #0]
 800a9ac:	aa02      	add	r2, sp, #8
 800a9ae:	691d      	ldr	r5, [r3, #16]
 800a9b0:	ab03      	add	r3, sp, #12
 800a9b2:	47a8      	blx	r5
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	d045      	beq.n	800aa44 <ArtNetNode::HandleDmxIn()+0xac>
 800a9b8:	f894 3924 	ldrb.w	r3, [r4, #2340]	; 0x924
 800a9bc:	f504 62ce 	add.w	r2, r4, #1648	; 0x670
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f884 3924 	strb.w	r3, [r4, #2340]	; 0x924
 800a9c8:	f884 366b 	strb.w	r3, [r4, #1643]	; 0x66b
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f884 366c 	strb.w	r3, [r4, #1644]	; 0x66c
 800a9d2:	f8b4 3918 	ldrh.w	r3, [r4, #2328]	; 0x918
 800a9d6:	f8a4 366d 	strh.w	r3, [r4, #1645]	; 0x66d
 800a9da:	9b02      	ldr	r3, [sp, #8]
 800a9dc:	18c1      	adds	r1, r0, r3
 800a9de:	4281      	cmp	r1, r0
 800a9e0:	d12b      	bne.n	800aa3a <ArtNetNode::HandleDmxIn()+0xa2>
 800a9e2:	07d8      	lsls	r0, r3, #31
 800a9e4:	d505      	bpl.n	800a9f2 <ArtNetNode::HandleDmxIn()+0x5a>
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	18e2      	adds	r2, r4, r3
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	f882 1671 	strb.w	r1, [r2, #1649]	; 0x671
 800a9f0:	9302      	str	r3, [sp, #8]
 800a9f2:	9b02      	ldr	r3, [sp, #8]
 800a9f4:	f204 615f 	addw	r1, r4, #1631	; 0x65f
 800a9f8:	0a1a      	lsrs	r2, r3, #8
 800a9fa:	f884 3670 	strb.w	r3, [r4, #1648]	; 0x670
 800a9fe:	2380      	movs	r3, #128	; 0x80
 800aa00:	f884 391b 	strb.w	r3, [r4, #2331]	; 0x91b
 800aa04:	f641 1336 	movw	r3, #6454	; 0x1936
 800aa08:	f884 266f 	strb.w	r2, [r4, #1647]	; 0x66f
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	f240 2212 	movw	r2, #530	; 0x212
 800aa12:	f8d4 3920 	ldr.w	r3, [r4, #2336]	; 0x920
 800aa16:	7820      	ldrb	r0, [r4, #0]
 800aa18:	f005 f85c 	bl	800fad4 <udp_send>
 800aa1c:	4a16      	ldr	r2, [pc, #88]	; (800aa78 <ArtNetNode::HandleDmxIn()+0xe0>)
 800aa1e:	6813      	ldr	r3, [r2, #0]
 800aa20:	07d9      	lsls	r1, r3, #31
 800aa22:	d408      	bmi.n	800aa36 <ArtNetNode::HandleDmxIn()+0x9e>
 800aa24:	f043 0301 	orr.w	r3, r3, #1
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 800aa2e:	f043 0301 	orr.w	r3, r3, #1
 800aa32:	f884 38e9 	strb.w	r3, [r4, #2281]	; 0x8e9
 800aa36:	b005      	add	sp, #20
 800aa38:	bd30      	pop	{r4, r5, pc}
 800aa3a:	f810 5b01 	ldrb.w	r5, [r0], #1
 800aa3e:	f802 5f01 	strb.w	r5, [r2, #1]!
 800aa42:	e7cc      	b.n	800a9de <ArtNetNode::HandleDmxIn()+0x46>
 800aa44:	f994 291b 	ldrsb.w	r2, [r4, #2331]	; 0x91b
 800aa48:	f894 391b 	ldrb.w	r3, [r4, #2331]	; 0x91b
 800aa4c:	2a00      	cmp	r2, #0
 800aa4e:	daf2      	bge.n	800aa36 <ArtNetNode::HandleDmxIn()+0x9e>
 800aa50:	9a03      	ldr	r2, [sp, #12]
 800aa52:	2a00      	cmp	r2, #0
 800aa54:	d1ef      	bne.n	800aa36 <ArtNetNode::HandleDmxIn()+0x9e>
 800aa56:	4a08      	ldr	r2, [pc, #32]	; (800aa78 <ArtNetNode::HandleDmxIn()+0xe0>)
 800aa58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa5c:	f884 391b 	strb.w	r3, [r4, #2331]	; 0x91b
 800aa60:	6813      	ldr	r3, [r2, #0]
 800aa62:	f023 0301 	bic.w	r3, r3, #1
 800aa66:	6013      	str	r3, [r2, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1e4      	bne.n	800aa36 <ArtNetNode::HandleDmxIn()+0x9e>
 800aa6c:	f894 38e9 	ldrb.w	r3, [r4, #2281]	; 0x8e9
 800aa70:	f023 0301 	bic.w	r3, r3, #1
 800aa74:	e7dd      	b.n	800aa32 <ArtNetNode::HandleDmxIn()+0x9a>
 800aa76:	bf00      	nop
 800aa78:	20000cd4 	ldrdcs	r0, [r0], -r4

0800aa7c <memcmp.constprop.0>:
 800aa7c:	b510      	push	{r4, lr}
 800aa7e:	4907      	ldr	r1, [pc, #28]	; (800aa9c <memcmp.constprop.0+0x20>)
 800aa80:	1e42      	subs	r2, r0, #1
 800aa82:	3003      	adds	r0, #3
 800aa84:	4282      	cmp	r2, r0
 800aa86:	d101      	bne.n	800aa8c <memcmp.constprop.0+0x10>
 800aa88:	2000      	movs	r0, #0
 800aa8a:	e006      	b.n	800aa9a <memcmp.constprop.0+0x1e>
 800aa8c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800aa90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	d0f5      	beq.n	800aa84 <memcmp.constprop.0+0x8>
 800aa98:	1b18      	subs	r0, r3, r4
 800aa9a:	bd10      	pop	{r4, pc}
 800aa9c:	20000cd8 	ldrdcs	r0, [r0], -r8

0800aaa0 <memcpy.constprop.0.isra.0>:
 800aaa0:	3801      	subs	r0, #1
 800aaa2:	1d0b      	adds	r3, r1, #4
 800aaa4:	4299      	cmp	r1, r3
 800aaa6:	d100      	bne.n	800aaaa <memcpy.constprop.0.isra.0+0xa>
 800aaa8:	4770      	bx	lr
 800aaaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aaae:	f800 2f01 	strb.w	r2, [r0, #1]!
 800aab2:	e7f7      	b.n	800aaa4 <memcpy.constprop.0.isra.0+0x4>

0800aab4 <ArtNetNode::HandleIpProg()>:
 800aab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab8:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 800aabc:	b085      	sub	sp, #20
 800aabe:	4604      	mov	r4, r0
 800aac0:	9303      	str	r3, [sp, #12]
 800aac2:	2300      	movs	r3, #0
 800aac4:	4d57      	ldr	r5, [pc, #348]	; (800ac24 <ArtNetNode::HandleIpProg()+0x170>)
 800aac6:	f890 70aa 	ldrb.w	r7, [r0, #170]	; 0xaa
 800aaca:	6828      	ldr	r0, [r5, #0]
 800aacc:	f890 b005 	ldrb.w	fp, [r0, #5]
 800aad0:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 800aad4:	f06f 0306 	mvn.w	r3, #6
 800aad8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 800aadc:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 800aae0:	2bc0      	cmp	r3, #192	; 0xc0
 800aae2:	d101      	bne.n	800aae8 <ArtNetNode::HandleIpProg()+0x34>
 800aae4:	f005 fe88 	bl	80107f8 <Network::EnableDhcp()>
 800aae8:	f007 0388 	and.w	r3, r7, #136	; 0x88
 800aaec:	2b88      	cmp	r3, #136	; 0x88
 800aaee:	d103      	bne.n	800aaf8 <ArtNetNode::HandleIpProg()+0x44>
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	6828      	ldr	r0, [r5, #0]
 800aaf4:	f005 fe24 	bl	8010740 <Network::SetIp(unsigned int)>
 800aaf8:	f007 0384 	and.w	r3, r7, #132	; 0x84
 800aafc:	2b84      	cmp	r3, #132	; 0x84
 800aafe:	4e4a      	ldr	r6, [pc, #296]	; (800ac28 <ArtNetNode::HandleIpProg()+0x174>)
 800ab00:	f104 08ac 	add.w	r8, r4, #172	; 0xac
 800ab04:	d107      	bne.n	800ab16 <ArtNetNode::HandleIpProg()+0x62>
 800ab06:	4641      	mov	r1, r8
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f7ff ffc9 	bl	800aaa0 <memcpy.constprop.0.isra.0>
 800ab0e:	6831      	ldr	r1, [r6, #0]
 800ab10:	6828      	ldr	r0, [r5, #0]
 800ab12:	f005 fe15 	bl	8010740 <Network::SetIp(unsigned int)>
 800ab16:	f007 0382 	and.w	r3, r7, #130	; 0x82
 800ab1a:	2b82      	cmp	r3, #130	; 0x82
 800ab1c:	f104 09b0 	add.w	r9, r4, #176	; 0xb0
 800ab20:	d107      	bne.n	800ab32 <ArtNetNode::HandleIpProg()+0x7e>
 800ab22:	4649      	mov	r1, r9
 800ab24:	4840      	ldr	r0, [pc, #256]	; (800ac28 <ArtNetNode::HandleIpProg()+0x174>)
 800ab26:	f7ff ffbb 	bl	800aaa0 <memcpy.constprop.0.isra.0>
 800ab2a:	6831      	ldr	r1, [r6, #0]
 800ab2c:	6828      	ldr	r0, [r5, #0]
 800ab2e:	f005 fe35 	bl	801079c <Network::SetNetmask(unsigned int)>
 800ab32:	f007 0790 	and.w	r7, r7, #144	; 0x90
 800ab36:	2f90      	cmp	r7, #144	; 0x90
 800ab38:	f104 0ab6 	add.w	sl, r4, #182	; 0xb6
 800ab3c:	d107      	bne.n	800ab4e <ArtNetNode::HandleIpProg()+0x9a>
 800ab3e:	4651      	mov	r1, sl
 800ab40:	4839      	ldr	r0, [pc, #228]	; (800ac28 <ArtNetNode::HandleIpProg()+0x174>)
 800ab42:	f7ff ffad 	bl	800aaa0 <memcpy.constprop.0.isra.0>
 800ab46:	6831      	ldr	r1, [r6, #0]
 800ab48:	6828      	ldr	r0, [r5, #0]
 800ab4a:	f005 fe3d 	bl	80107c8 <Network::SetGatewayIp(unsigned int)>
 800ab4e:	6829      	ldr	r1, [r5, #0]
 800ab50:	794a      	ldrb	r2, [r1, #5]
 800ab52:	0192      	lsls	r2, r2, #6
 800ab54:	f884 20b6 	strb.w	r2, [r4, #182]	; 0xb6
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f884 20b7 	strb.w	r2, [r4, #183]	; 0xb7
 800ab5e:	7948      	ldrb	r0, [r1, #5]
 800ab60:	6949      	ldr	r1, [r1, #20]
 800ab62:	ea8b 0b00 	eor.w	fp, fp, r0
 800ab66:	4640      	mov	r0, r8
 800ab68:	6031      	str	r1, [r6, #0]
 800ab6a:	f7ff ff87 	bl	800aa7c <memcmp.constprop.0>
 800ab6e:	492e      	ldr	r1, [pc, #184]	; (800ac28 <ArtNetNode::HandleIpProg()+0x174>)
 800ab70:	4607      	mov	r7, r0
 800ab72:	4640      	mov	r0, r8
 800ab74:	f7ff ff94 	bl	800aaa0 <memcpy.constprop.0.isra.0>
 800ab78:	6829      	ldr	r1, [r5, #0]
 800ab7a:	4648      	mov	r0, r9
 800ab7c:	69c9      	ldr	r1, [r1, #28]
 800ab7e:	6031      	str	r1, [r6, #0]
 800ab80:	f7ff ff7c 	bl	800aa7c <memcmp.constprop.0>
 800ab84:	4928      	ldr	r1, [pc, #160]	; (800ac28 <ArtNetNode::HandleIpProg()+0x174>)
 800ab86:	9003      	str	r0, [sp, #12]
 800ab88:	4648      	mov	r0, r9
 800ab8a:	f7ff ff89 	bl	800aaa0 <memcpy.constprop.0.isra.0>
 800ab8e:	6829      	ldr	r1, [r5, #0]
 800ab90:	4650      	mov	r0, sl
 800ab92:	6989      	ldr	r1, [r1, #24]
 800ab94:	6031      	str	r1, [r6, #0]
 800ab96:	f7ff ff71 	bl	800aa7c <memcmp.constprop.0>
 800ab9a:	9b03      	ldr	r3, [sp, #12]
 800ab9c:	4922      	ldr	r1, [pc, #136]	; (800ac28 <ArtNetNode::HandleIpProg()+0x174>)
 800ab9e:	431f      	orrs	r7, r3
 800aba0:	4307      	orrs	r7, r0
 800aba2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 800aba6:	bf0c      	ite	eq
 800aba8:	465e      	moveq	r6, fp
 800abaa:	f04b 0601 	orrne.w	r6, fp, #1
 800abae:	f7ff ff77 	bl	800aaa0 <memcpy.constprop.0.isra.0>
 800abb2:	2200      	movs	r2, #0
 800abb4:	f641 1336 	movw	r3, #6454	; 0x1936
 800abb8:	f884 20bc 	strb.w	r2, [r4, #188]	; 0xbc
 800abbc:	f884 20bd 	strb.w	r2, [r4, #189]	; 0xbd
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	2222      	movs	r2, #34	; 0x22
 800abc4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 800abc8:	7820      	ldrb	r0, [r4, #0]
 800abca:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 800abce:	f004 ff81 	bl	800fad4 <udp_send>
 800abd2:	b31e      	cbz	r6, 800ac1c <ArtNetNode::HandleIpProg()+0x168>
 800abd4:	682a      	ldr	r2, [r5, #0]
 800abd6:	f204 507a 	addw	r0, r4, #1402	; 0x57a
 800abda:	6953      	ldr	r3, [r2, #20]
 800abdc:	6263      	str	r3, [r4, #36]	; 0x24
 800abde:	69d1      	ldr	r1, [r2, #28]
 800abe0:	7952      	ldrb	r2, [r2, #5]
 800abe2:	ea63 0301 	orn	r3, r3, r1
 800abe6:	62a3      	str	r3, [r4, #40]	; 0x28
 800abe8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800abec:	4641      	mov	r1, r8
 800abee:	f023 0302 	bic.w	r3, r3, #2
 800abf2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 800abf6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 800abfa:	f7ff ff51 	bl	800aaa0 <memcpy.constprop.0.isra.0>
 800abfe:	4641      	mov	r1, r8
 800ac00:	f204 603f 	addw	r0, r4, #1599	; 0x63f
 800ac04:	f7ff ff4c 	bl	800aaa0 <memcpy.constprop.0.isra.0>
 800ac08:	f894 38e2 	ldrb.w	r3, [r4, #2274]	; 0x8e2
 800ac0c:	b133      	cbz	r3, 800ac1c <ArtNetNode::HandleIpProg()+0x168>
 800ac0e:	2101      	movs	r1, #1
 800ac10:	4620      	mov	r0, r4
 800ac12:	b005      	add	sp, #20
 800ac14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac18:	f000 b8d4 	b.w	800adc4 <ArtNetNode::SendPollRelply(bool)>
 800ac1c:	b005      	add	sp, #20
 800ac1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac22:	bf00      	nop
 800ac24:	20009b68 	andcs	r9, r0, r8, ror #22
 800ac28:	20000cd8 	ldrdcs	r0, [r0], -r8

0800ac2c <memcpy.isra.0>:
 800ac2c:	3801      	subs	r0, #1
 800ac2e:	440a      	add	r2, r1
 800ac30:	4291      	cmp	r1, r2
 800ac32:	d100      	bne.n	800ac36 <memcpy.isra.0+0xa>
 800ac34:	4770      	bx	lr
 800ac36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac3a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ac3e:	e7f7      	b.n	800ac30 <memcpy.isra.0+0x4>

0800ac40 <ArtNetNode::FillPollReply()>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4604      	mov	r4, r0
 800ac44:	f500 60ae 	add.w	r0, r0, #1392	; 0x570
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	f204 625f 	addw	r2, r4, #1631	; 0x65f
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d153      	bne.n	800acfc <ArtNetNode::FillPollReply()+0xbc>
 800ac54:	2208      	movs	r2, #8
 800ac56:	492b      	ldr	r1, [pc, #172]	; (800ad04 <ArtNetNode::FillPollReply()+0xc4>)
 800ac58:	f7ff ffe8 	bl	800ac2c <memcpy.isra.0>
 800ac5c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800ac60:	4d29      	ldr	r5, [pc, #164]	; (800ad08 <ArtNetNode::FillPollReply()+0xc8>)
 800ac62:	f8a4 3578 	strh.w	r3, [r4, #1400]	; 0x578
 800ac66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac68:	4629      	mov	r1, r5
 800ac6a:	f204 507a 	addw	r0, r4, #1402	; 0x57a
 800ac6e:	2204      	movs	r2, #4
 800ac70:	602b      	str	r3, [r5, #0]
 800ac72:	f7ff ffdb 	bl	800ac2c <memcpy.isra.0>
 800ac76:	f641 1336 	movw	r3, #6454	; 0x1936
 800ac7a:	f8a4 357e 	strh.w	r3, [r4, #1406]	; 0x57e
 800ac7e:	4b23      	ldr	r3, [pc, #140]	; (800ad0c <ArtNetNode::FillPollReply()+0xcc>)
 800ac80:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800ac84:	781a      	ldrb	r2, [r3, #0]
 800ac86:	f204 508a 	addw	r0, r4, #1418	; 0x58a
 800ac8a:	f884 2580 	strb.w	r2, [r4, #1408]	; 0x580
 800ac8e:	785b      	ldrb	r3, [r3, #1]
 800ac90:	f884 3581 	strb.w	r3, [r4, #1409]	; 0x581
 800ac94:	4b1e      	ldr	r3, [pc, #120]	; (800ad10 <ArtNetNode::FillPollReply()+0xd0>)
 800ac96:	781a      	ldrb	r2, [r3, #0]
 800ac98:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 800ac9c:	785b      	ldrb	r3, [r3, #1]
 800ac9e:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 800aca2:	4b1c      	ldr	r3, [pc, #112]	; (800ad14 <ArtNetNode::FillPollReply()+0xd4>)
 800aca4:	785a      	ldrb	r2, [r3, #1]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	f884 2588 	strb.w	r2, [r4, #1416]	; 0x588
 800acac:	f884 3589 	strb.w	r3, [r4, #1417]	; 0x589
 800acb0:	2212      	movs	r2, #18
 800acb2:	f7ff ffbb 	bl	800ac2c <memcpy.isra.0>
 800acb6:	f104 014e 	add.w	r1, r4, #78	; 0x4e
 800acba:	f204 509c 	addw	r0, r4, #1436	; 0x59c
 800acbe:	2240      	movs	r2, #64	; 0x40
 800acc0:	f7ff ffb4 	bl	800ac2c <memcpy.isra.0>
 800acc4:	2300      	movs	r3, #0
 800acc6:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800acca:	f884 3638 	strb.w	r3, [r4, #1592]	; 0x638
 800acce:	f204 6039 	addw	r0, r4, #1593	; 0x639
 800acd2:	2206      	movs	r2, #6
 800acd4:	f7ff ffaa 	bl	800ac2c <memcpy.isra.0>
 800acd8:	4629      	mov	r1, r5
 800acda:	f204 603f 	addw	r0, r4, #1599	; 0x63f
 800acde:	2204      	movs	r2, #4
 800ace0:	f7ff ffa4 	bl	800ac2c <memcpy.isra.0>
 800ace4:	2304      	movs	r3, #4
 800ace6:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800acea:	f884 361d 	strb.w	r3, [r4, #1565]	; 0x61d
 800acee:	f204 604a 	addw	r0, r4, #1610	; 0x64a
 800acf2:	2206      	movs	r2, #6
 800acf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acf8:	f7ff bf98 	b.w	800ac2c <memcpy.isra.0>
 800acfc:	f803 1b01 	strb.w	r1, [r3], #1
 800ad00:	e7a6      	b.n	800ac50 <ArtNetNode::FillPollReply()+0x10>
 800ad02:	bf00      	nop
 800ad04:	0801664d 	stmdaeq	r1, {r0, r2, r3, r6, r9, sl, sp, lr}
 800ad08:	20000cdc 	ldrdcs	r0, [r0], -ip
 800ad0c:	08016884 	stmdaeq	r1, {r2, r7, fp, sp, lr}
 800ad10:	08016880 	stmdaeq	r1, {r7, fp, sp, lr}
 800ad14:	08016882 	stmdaeq	r1, {r1, r7, fp, sp, lr}

0800ad18 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>:
 800ad18:	1a8a      	subs	r2, r1, r2
 800ad1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1c:	4605      	mov	r5, r0
 800ad1e:	461e      	mov	r6, r3
 800ad20:	1884      	adds	r4, r0, r2
 800ad22:	b169      	cbz	r1, 800ad40 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x28>
 800ad24:	2300      	movs	r3, #0
 800ad26:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800ad2a:	f884 3626 	strb.w	r3, [r4, #1574]	; 0x626
 800ad2e:	f884 3645 	strb.w	r3, [r4, #1605]	; 0x645
 800ad32:	f884 362e 	strb.w	r3, [r4, #1582]	; 0x62e
 800ad36:	f884 3622 	strb.w	r3, [r4, #1570]	; 0x622
 800ad3a:	f884 362a 	strb.w	r3, [r4, #1578]	; 0x62a
 800ad3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad40:	f8d5 3910 	ldr.w	r3, [r5, #2320]	; 0x910
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d111      	bne.n	800ad6c <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x54>
 800ad48:	69a8      	ldr	r0, [r5, #24]
 800ad4a:	f895 78f3 	ldrb.w	r7, [r5, #2291]	; 0x8f3
 800ad4e:	6803      	ldr	r3, [r0, #0]
 800ad50:	f007 0776 	and.w	r7, r7, #118	; 0x76
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	4798      	blx	r3
 800ad58:	f000 0089 	and.w	r0, r0, #137	; 0x89
 800ad5c:	4307      	orrs	r7, r0
 800ad5e:	f010 0001 	ands.w	r0, r0, #1
 800ad62:	bf08      	it	eq
 800ad64:	f8c5 0910 	streq.w	r0, [r5, #2320]	; 0x910
 800ad68:	f885 78f3 	strb.w	r7, [r5, #2291]	; 0x8f3
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800ad72:	f895 38f4 	ldrb.w	r3, [r5, #2292]	; 0x8f4
 800ad76:	b12b      	cbz	r3, 800ad84 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x6c>
 800ad78:	2380      	movs	r3, #128	; 0x80
 800ad7a:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800ad7e:	6833      	ldr	r3, [r6, #0]
 800ad80:	3301      	adds	r3, #1
 800ad82:	6033      	str	r3, [r6, #0]
 800ad84:	f895 38f3 	ldrb.w	r3, [r5, #2291]	; 0x8f3
 800ad88:	f884 3626 	strb.w	r3, [r4, #1574]	; 0x626
 800ad8c:	f895 390c 	ldrb.w	r3, [r5, #2316]	; 0x90c
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	bf14      	ite	ne
 800ad94:	2340      	movne	r3, #64	; 0x40
 800ad96:	23c0      	moveq	r3, #192	; 0xc0
 800ad98:	f884 3645 	strb.w	r3, [r4, #1605]	; 0x645
 800ad9c:	f895 38f2 	ldrb.w	r3, [r5, #2290]	; 0x8f2
 800ada0:	f884 362e 	strb.w	r3, [r4, #1582]	; 0x62e
 800ada4:	f895 391c 	ldrb.w	r3, [r5, #2332]	; 0x91c
 800ada8:	b12b      	cbz	r3, 800adb6 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x9e>
 800adaa:	2340      	movs	r3, #64	; 0x40
 800adac:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 800adb0:	6833      	ldr	r3, [r6, #0]
 800adb2:	3301      	adds	r3, #1
 800adb4:	6033      	str	r3, [r6, #0]
 800adb6:	f895 391b 	ldrb.w	r3, [r5, #2331]	; 0x91b
 800adba:	f884 3622 	strb.w	r3, [r4, #1570]	; 0x622
 800adbe:	f895 391a 	ldrb.w	r3, [r5, #2330]	; 0x91a
 800adc2:	e7ba      	b.n	800ad3a <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)+0x22>

0800adc4 <ArtNetNode::SendPollRelply(bool)>:
 800adc4:	b530      	push	{r4, r5, lr}
 800adc6:	4604      	mov	r4, r0
 800adc8:	b085      	sub	sp, #20
 800adca:	b941      	cbnz	r1, 800adde <ArtNetNode::SendPollRelply(bool)+0x1a>
 800adcc:	f890 38e1 	ldrb.w	r3, [r0, #2273]	; 0x8e1
 800add0:	2b02      	cmp	r3, #2
 800add2:	bf02      	ittt	eq
 800add4:	f8d0 38d0 	ldreq.w	r3, [r0, #2256]	; 0x8d0
 800add8:	3301      	addeq	r3, #1
 800adda:	f8c0 38d0 	streq.w	r3, [r0, #2256]	; 0x8d0
 800adde:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
 800ade2:	2500      	movs	r5, #0
 800ade4:	f884 3587 	strb.w	r3, [r4, #1415]	; 0x587
 800ade8:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800adec:	9503      	str	r5, [sp, #12]
 800adee:	f884 3644 	strb.w	r3, [r4, #1604]	; 0x644
 800adf2:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800adf6:	f884 3649 	strb.w	r3, [r4, #1609]	; 0x649
 800adfa:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800adfc:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
 800ae00:	2301      	movs	r3, #1
 800ae02:	f884 3643 	strb.w	r3, [r4, #1603]	; 0x643
 800ae06:	4629      	mov	r1, r5
 800ae08:	2200      	movs	r2, #0
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	ab03      	add	r3, sp, #12
 800ae0e:	3501      	adds	r5, #1
 800ae10:	f7ff ff82 	bl	800ad18 <ArtNetNode::ProcessPollRelply(unsigned int, unsigned int, unsigned int&)>
 800ae14:	2d04      	cmp	r5, #4
 800ae16:	d1f6      	bne.n	800ae06 <ArtNetNode::SendPollRelply(bool)+0x42>
 800ae18:	9b03      	ldr	r3, [sp, #12]
 800ae1a:	2140      	movs	r1, #64	; 0x40
 800ae1c:	f884 361d 	strb.w	r3, [r4, #1565]	; 0x61d
 800ae20:	f604 037d 	addw	r3, r4, #2173	; 0x87d
 800ae24:	9301      	str	r3, [sp, #4]
 800ae26:	f8d4 38d0 	ldr.w	r3, [r4, #2256]	; 0x8d0
 800ae2a:	4a0b      	ldr	r2, [pc, #44]	; (800ae58 <ArtNetNode::SendPollRelply(bool)+0x94>)
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	f204 50dc 	addw	r0, r4, #1500	; 0x5dc
 800ae32:	f894 38e0 	ldrb.w	r3, [r4, #2272]	; 0x8e0
 800ae36:	f008 f971 	bl	801311c <snprintf>
 800ae3a:	f641 1336 	movw	r3, #6454	; 0x1936
 800ae3e:	22ef      	movs	r2, #239	; 0xef
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	7820      	ldrb	r0, [r4, #0]
 800ae44:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae46:	f504 61ae 	add.w	r1, r4, #1392	; 0x570
 800ae4a:	f004 fe43 	bl	800fad4 <udp_send>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f884 38e7 	strb.w	r3, [r4, #2279]	; 0x8e7
 800ae54:	b005      	add	sp, #20
 800ae56:	bd30      	pop	{r4, r5, pc}
 800ae58:	0801663a 	stmdaeq	r1, {r1, r3, r4, r5, r9, sl, sp, lr}

0800ae5c <ArtNetNode::HandlePoll()>:
 800ae5c:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 800ae60:	b410      	push	{r4}
 800ae62:	f3c2 0340 	ubfx	r3, r2, #1, #1
 800ae66:	f880 38e2 	strb.w	r3, [r0, #2274]	; 0x8e2
 800ae6a:	f012 0304 	ands.w	r3, r2, #4
 800ae6e:	d02e      	beq.n	800aece <ArtNetNode::HandlePoll()+0x72>
 800ae70:	2301      	movs	r3, #1
 800ae72:	f8d0 18d8 	ldr.w	r1, [r0, #2264]	; 0x8d8
 800ae76:	f890 48e4 	ldrb.w	r4, [r0, #2276]	; 0x8e4
 800ae7a:	f880 38e3 	strb.w	r3, [r0, #2275]	; 0x8e3
 800ae7e:	b979      	cbnz	r1, 800aea0 <ArtNetNode::HandlePoll()+0x44>
 800ae80:	f8d0 3568 	ldr.w	r3, [r0, #1384]	; 0x568
 800ae84:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
 800ae88:	b19c      	cbz	r4, 800aeb2 <ArtNetNode::HandlePoll()+0x56>
 800ae8a:	f890 38ec 	ldrb.w	r3, [r0, #2284]	; 0x8ec
 800ae8e:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
 800ae92:	4293      	cmp	r3, r2
 800ae94:	bf28      	it	cs
 800ae96:	4613      	movcs	r3, r2
 800ae98:	f880 38ec 	strb.w	r3, [r0, #2284]	; 0x8ec
 800ae9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ae9e:	e010      	b.n	800aec2 <ArtNetNode::HandlePoll()+0x66>
 800aea0:	2c00      	cmp	r4, #0
 800aea2:	d1f2      	bne.n	800ae8a <ArtNetNode::HandlePoll()+0x2e>
 800aea4:	f8d0 4568 	ldr.w	r4, [r0, #1384]	; 0x568
 800aea8:	42a1      	cmp	r1, r4
 800aeaa:	d002      	beq.n	800aeb2 <ArtNetNode::HandlePoll()+0x56>
 800aeac:	f880 38e4 	strb.w	r3, [r0, #2276]	; 0x8e4
 800aeb0:	e7eb      	b.n	800ae8a <ArtNetNode::HandlePoll()+0x2e>
 800aeb2:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
 800aeb6:	f880 38ec 	strb.w	r3, [r0, #2284]	; 0x8ec
 800aeba:	0713      	lsls	r3, r2, #28
 800aebc:	d5ee      	bpl.n	800ae9c <ArtNetNode::HandlePoll()+0x40>
 800aebe:	f8d0 3568 	ldr.w	r3, [r0, #1384]	; 0x568
 800aec2:	2101      	movs	r1, #1
 800aec4:	bc10      	pop	{r4}
 800aec6:	f8c0 38d4 	str.w	r3, [r0, #2260]	; 0x8d4
 800aeca:	f7ff bf7b 	b.w	800adc4 <ArtNetNode::SendPollRelply(bool)>
 800aece:	f880 38e3 	strb.w	r3, [r0, #2275]	; 0x8e3
 800aed2:	e7f6      	b.n	800aec2 <ArtNetNode::HandlePoll()+0x66>

0800aed4 <ArtNetNode::SetRmd(unsigned int, bool)>:
 800aed4:	2328      	movs	r3, #40	; 0x28
 800aed6:	fb03 0301 	mla	r3, r3, r1, r0
 800aeda:	b570      	push	{r4, r5, r6, lr}
 800aedc:	4604      	mov	r4, r0
 800aede:	f893 090c 	ldrb.w	r0, [r3, #2316]	; 0x90c
 800aee2:	460e      	mov	r6, r1
 800aee4:	4290      	cmp	r0, r2
 800aee6:	4615      	mov	r5, r2
 800aee8:	f883 290c 	strb.w	r2, [r3, #2316]	; 0x90c
 800aeec:	d011      	beq.n	800af12 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800aeee:	f894 38e1 	ldrb.w	r3, [r4, #2273]	; 0x8e1
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d10d      	bne.n	800af12 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800aef6:	69e0      	ldr	r0, [r4, #28]
 800aef8:	b110      	cbz	r0, 800af00 <ArtNetNode::SetRmd(unsigned int, bool)+0x2c>
 800aefa:	6803      	ldr	r3, [r0, #0]
 800aefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefe:	4798      	blx	r3
 800af00:	6a20      	ldr	r0, [r4, #32]
 800af02:	b130      	cbz	r0, 800af12 <ArtNetNode::SetRmd(unsigned int, bool)+0x3e>
 800af04:	6803      	ldr	r3, [r0, #0]
 800af06:	462a      	mov	r2, r5
 800af08:	4631      	mov	r1, r6
 800af0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af10:	4718      	bx	r3
 800af12:	bd70      	pop	{r4, r5, r6, pc}

0800af14 <ArtNetNode::SendTod(unsigned int)>:
 800af14:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800af18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800af1c:	2500      	movs	r5, #0
 800af1e:	f880 30a5 	strb.w	r3, [r0, #165]	; 0xa5
 800af22:	2301      	movs	r3, #1
 800af24:	4688      	mov	r8, r1
 800af26:	4604      	mov	r4, r0
 800af28:	f880 30a8 	strb.w	r3, [r0, #168]	; 0xa8
 800af2c:	f880 50a4 	strb.w	r5, [r0, #164]	; 0xa4
 800af30:	68c0      	ldr	r0, [r0, #12]
 800af32:	088f      	lsrs	r7, r1, #2
 800af34:	6803      	ldr	r3, [r0, #0]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	4798      	blx	r3
 800af3a:	f008 0303 	and.w	r3, r8, #3
 800af3e:	3301      	adds	r3, #1
 800af40:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 800af44:	1c7b      	adds	r3, r7, #1
 800af46:	b2ff      	uxtb	r7, r7
 800af48:	f884 50aa 	strb.w	r5, [r4, #170]	; 0xaa
 800af4c:	f884 50ab 	strb.w	r5, [r4, #171]	; 0xab
 800af50:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 800af54:	f884 50ad 	strb.w	r5, [r4, #173]	; 0xad
 800af58:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 800af5c:	f884 50af 	strb.w	r5, [r4, #175]	; 0xaf
 800af60:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 800af64:	4427      	add	r7, r4
 800af66:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800af6a:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 800af6e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 800af72:	2328      	movs	r3, #40	; 0x28
 800af74:	fb03 4308 	mla	r3, r3, r8, r4
 800af78:	f893 38f2 	ldrb.w	r3, [r3, #2290]	; 0x8f2
 800af7c:	b2c6      	uxtb	r6, r0
 800af7e:	68e0      	ldr	r0, [r4, #12]
 800af80:	f884 50b4 	strb.w	r5, [r4, #180]	; 0xb4
 800af84:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 800af88:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
 800af8c:	f884 60b5 	strb.w	r6, [r4, #181]	; 0xb5
 800af90:	f884 60b7 	strb.w	r6, [r4, #183]	; 0xb7
 800af94:	6803      	ldr	r3, [r0, #0]
 800af96:	4641      	mov	r1, r8
 800af98:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	4798      	blx	r3
 800afa0:	2306      	movs	r3, #6
 800afa2:	fb03 f206 	mul.w	r2, r3, r6
 800afa6:	f641 1336 	movw	r3, #6454	; 0x1936
 800afaa:	f104 059c 	add.w	r5, r4, #156	; 0x9c
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	4629      	mov	r1, r5
 800afb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800afb4:	7820      	ldrb	r0, [r4, #0]
 800afb6:	321c      	adds	r2, #28
 800afb8:	f004 fd8c 	bl	800fad4 <udp_send>
 800afbc:	b002      	add	sp, #8
 800afbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800afc2 <ArtNetNode::HandleTodControl()>:
 800afc2:	b510      	push	{r4, lr}
 800afc4:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 800afc8:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
 800afcc:	4604      	mov	r4, r0
 800afce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800afd2:	f890 290c 	ldrb.w	r2, [r0, #2316]	; 0x90c
 800afd6:	b34a      	cbz	r2, 800b02c <ArtNetNode::HandleTodControl()+0x6a>
 800afd8:	f8b0 28f0 	ldrh.w	r2, [r0, #2288]	; 0x8f0
 800afdc:	429a      	cmp	r2, r3
 800afde:	d125      	bne.n	800b02c <ArtNetNode::HandleTodControl()+0x6a>
 800afe0:	f890 38f4 	ldrb.w	r3, [r0, #2292]	; 0x8f4
 800afe4:	b313      	cbz	r3, 800b02c <ArtNetNode::HandleTodControl()+0x6a>
 800afe6:	f890 3915 	ldrb.w	r3, [r0, #2325]	; 0x915
 800afea:	b133      	cbz	r3, 800affa <ArtNetNode::HandleTodControl()+0x38>
 800afec:	f890 187c 	ldrb.w	r1, [r0, #2172]	; 0x87c
 800aff0:	b919      	cbnz	r1, 800affa <ArtNetNode::HandleTodControl()+0x38>
 800aff2:	6840      	ldr	r0, [r0, #4]
 800aff4:	6803      	ldr	r3, [r0, #0]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	4798      	blx	r3
 800affa:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
 800affe:	2b01      	cmp	r3, #1
 800b000:	d104      	bne.n	800b00c <ArtNetNode::HandleTodControl()+0x4a>
 800b002:	68e0      	ldr	r0, [r4, #12]
 800b004:	2100      	movs	r1, #0
 800b006:	6803      	ldr	r3, [r0, #0]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	4798      	blx	r3
 800b00c:	2100      	movs	r1, #0
 800b00e:	4620      	mov	r0, r4
 800b010:	f7ff ff80 	bl	800af14 <ArtNetNode::SendTod(unsigned int)>
 800b014:	f894 3915 	ldrb.w	r3, [r4, #2325]	; 0x915
 800b018:	b143      	cbz	r3, 800b02c <ArtNetNode::HandleTodControl()+0x6a>
 800b01a:	f894 187c 	ldrb.w	r1, [r4, #2172]	; 0x87c
 800b01e:	b929      	cbnz	r1, 800b02c <ArtNetNode::HandleTodControl()+0x6a>
 800b020:	6860      	ldr	r0, [r4, #4]
 800b022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b026:	6803      	ldr	r3, [r0, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	4718      	bx	r3
 800b02c:	bd10      	pop	{r4, pc}

0800b02e <ArtNetNode::HandleTodRequest()>:
 800b02e:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
 800b032:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
 800b036:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b03a:	f890 190c 	ldrb.w	r1, [r0, #2316]	; 0x90c
 800b03e:	b149      	cbz	r1, 800b054 <ArtNetNode::HandleTodRequest()+0x26>
 800b040:	f8b0 18f0 	ldrh.w	r1, [r0, #2288]	; 0x8f0
 800b044:	4291      	cmp	r1, r2
 800b046:	d105      	bne.n	800b054 <ArtNetNode::HandleTodRequest()+0x26>
 800b048:	f890 38f4 	ldrb.w	r3, [r0, #2292]	; 0x8f4
 800b04c:	b113      	cbz	r3, 800b054 <ArtNetNode::HandleTodRequest()+0x26>
 800b04e:	2100      	movs	r1, #0
 800b050:	f7ff bf60 	b.w	800af14 <ArtNetNode::SendTod(unsigned int)>
 800b054:	4770      	bx	lr

0800b056 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)>:
 800b056:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
 800b05a:	60c1      	str	r1, [r0, #12]
 800b05c:	b131      	cbz	r1, 800b06c <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x16>
 800b05e:	f880 287c 	strb.w	r2, [r0, #2172]	; 0x87c
 800b062:	f043 0302 	orr.w	r3, r3, #2
 800b066:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
 800b06a:	4770      	bx	lr
 800b06c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800b070:	e7f9      	b.n	800b066 <ArtNetNode::SetRdmHandler(ArtNetRdm*, bool)+0x10>

0800b072 <ArtNetNode::HandleRdm()>:
 800b072:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b074:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 800b078:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
 800b07c:	4604      	mov	r4, r0
 800b07e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b082:	f890 290c 	ldrb.w	r2, [r0, #2316]	; 0x90c
 800b086:	2a00      	cmp	r2, #0
 800b088:	d053      	beq.n	800b132 <ArtNetNode::HandleRdm()+0xc0>
 800b08a:	f8b0 28f0 	ldrh.w	r2, [r0, #2288]	; 0x8f0
 800b08e:	429a      	cmp	r2, r3
 800b090:	d14f      	bne.n	800b132 <ArtNetNode::HandleRdm()+0xc0>
 800b092:	f890 38f4 	ldrb.w	r3, [r0, #2292]	; 0x8f4
 800b096:	2b00      	cmp	r3, #0
 800b098:	d04b      	beq.n	800b132 <ArtNetNode::HandleRdm()+0xc0>
 800b09a:	f890 187c 	ldrb.w	r1, [r0, #2172]	; 0x87c
 800b09e:	b9b9      	cbnz	r1, 800b0d0 <ArtNetNode::HandleRdm()+0x5e>
 800b0a0:	f8d0 3910 	ldr.w	r3, [r0, #2320]	; 0x910
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d10b      	bne.n	800b0c0 <ArtNetNode::HandleRdm()+0x4e>
 800b0a8:	6980      	ldr	r0, [r0, #24]
 800b0aa:	b148      	cbz	r0, 800b0c0 <ArtNetNode::HandleRdm()+0x4e>
 800b0ac:	6803      	ldr	r3, [r0, #0]
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	4798      	blx	r3
 800b0b2:	f010 0f89 	tst.w	r0, #137	; 0x89
 800b0b6:	bf14      	ite	ne
 800b0b8:	2301      	movne	r3, #1
 800b0ba:	2300      	moveq	r3, #0
 800b0bc:	f884 3915 	strb.w	r3, [r4, #2325]	; 0x915
 800b0c0:	f894 3915 	ldrb.w	r3, [r4, #2325]	; 0x915
 800b0c4:	b123      	cbz	r3, 800b0d0 <ArtNetNode::HandleRdm()+0x5e>
 800b0c6:	6860      	ldr	r0, [r4, #4]
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	6803      	ldr	r3, [r0, #0]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	4798      	blx	r3
 800b0d0:	68e0      	ldr	r0, [r4, #12]
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	6803      	ldr	r3, [r0, #0]
 800b0d6:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800b0da:	695b      	ldr	r3, [r3, #20]
 800b0dc:	4798      	blx	r3
 800b0de:	b1b0      	cbz	r0, 800b10e <ArtNetNode::HandleRdm()+0x9c>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 800b0e6:	7881      	ldrb	r1, [r0, #2]
 800b0e8:	18c3      	adds	r3, r0, r3
 800b0ea:	460a      	mov	r2, r1
 800b0ec:	3102      	adds	r1, #2
 800b0ee:	f104 05b3 	add.w	r5, r4, #179	; 0xb3
 800b0f2:	4408      	add	r0, r1
 800b0f4:	4298      	cmp	r0, r3
 800b0f6:	d117      	bne.n	800b128 <ArtNetNode::HandleRdm()+0xb6>
 800b0f8:	f641 1336 	movw	r3, #6454	; 0x1936
 800b0fc:	4621      	mov	r1, r4
 800b0fe:	3219      	adds	r2, #25
 800b100:	f811 0b9c 	ldrb.w	r0, [r1], #156
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
 800b10a:	f004 fce3 	bl	800fad4 <udp_send>
 800b10e:	f894 3915 	ldrb.w	r3, [r4, #2325]	; 0x915
 800b112:	b173      	cbz	r3, 800b132 <ArtNetNode::HandleRdm()+0xc0>
 800b114:	f894 187c 	ldrb.w	r1, [r4, #2172]	; 0x87c
 800b118:	b959      	cbnz	r1, 800b132 <ArtNetNode::HandleRdm()+0xc0>
 800b11a:	6860      	ldr	r0, [r4, #4]
 800b11c:	6803      	ldr	r3, [r0, #0]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	b003      	add	sp, #12
 800b122:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b126:	4718      	bx	r3
 800b128:	f813 1b01 	ldrb.w	r1, [r3], #1
 800b12c:	f805 1f01 	strb.w	r1, [r5, #1]!
 800b130:	e7e0      	b.n	800b0f4 <ArtNetNode::HandleRdm()+0x82>
 800b132:	b003      	add	sp, #12
 800b134:	bd30      	pop	{r4, r5, pc}
	...

0800b138 <ArtNetNode::HandleSync()>:
 800b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13a:	2301      	movs	r3, #1
 800b13c:	4a17      	ldr	r2, [pc, #92]	; (800b19c <ArtNetNode::HandleSync()+0x64>)
 800b13e:	4604      	mov	r4, r0
 800b140:	6812      	ldr	r2, [r2, #0]
 800b142:	f880 38e5 	strb.w	r3, [r0, #2277]	; 0x8e5
 800b146:	f8c0 28dc 	str.w	r2, [r0, #2268]	; 0x8dc
 800b14a:	f8d0 2910 	ldr.w	r2, [r0, #2320]	; 0x910
 800b14e:	bb1a      	cbnz	r2, 800b198 <ArtNetNode::HandleSync()+0x60>
 800b150:	f890 28f4 	ldrb.w	r2, [r0, #2292]	; 0x8f4
 800b154:	b302      	cbz	r2, 800b198 <ArtNetNode::HandleSync()+0x60>
 800b156:	4d12      	ldr	r5, [pc, #72]	; (800b1a0 <ArtNetNode::HandleSync()+0x68>)
 800b158:	6840      	ldr	r0, [r0, #4]
 800b15a:	682a      	ldr	r2, [r5, #0]
 800b15c:	4e11      	ldr	r6, [pc, #68]	; (800b1a4 <ArtNetNode::HandleSync()+0x6c>)
 800b15e:	07d2      	lsls	r2, r2, #31
 800b160:	bf58      	it	pl
 800b162:	602b      	strpl	r3, [r5, #0]
 800b164:	6803      	ldr	r3, [r0, #0]
 800b166:	2100      	movs	r1, #0
 800b168:	691f      	ldr	r7, [r3, #16]
 800b16a:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800b16e:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800b172:	47b8      	blx	r7
 800b174:	f894 1915 	ldrb.w	r1, [r4, #2325]	; 0x915
 800b178:	b931      	cbnz	r1, 800b188 <ArtNetNode::HandleSync()+0x50>
 800b17a:	6860      	ldr	r0, [r4, #4]
 800b17c:	6803      	ldr	r3, [r0, #0]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	4798      	blx	r3
 800b182:	2301      	movs	r3, #1
 800b184:	f884 3915 	strb.w	r3, [r4, #2325]	; 0x915
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	07db      	lsls	r3, r3, #31
 800b18c:	bf5c      	itt	pl
 800b18e:	2301      	movpl	r3, #1
 800b190:	602b      	strpl	r3, [r5, #0]
 800b192:	2300      	movs	r3, #0
 800b194:	f8c6 3600 	str.w	r3, [r6, #1536]	; 0x600
 800b198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b19a:	bf00      	nop
 800b19c:	2000a24c 	andcs	sl, r0, ip, asr #4
 800b1a0:	200006c8 	andcs	r0, r0, r8, asr #13
 800b1a4:	200006cc 	andcs	r0, r0, ip, asr #13

0800b1a8 <ArtNetNode::HandleTimeCode()>:
 800b1a8:	4601      	mov	r1, r0
 800b1aa:	6880      	ldr	r0, [r0, #8]
 800b1ac:	31aa      	adds	r1, #170	; 0xaa
 800b1ae:	6803      	ldr	r3, [r0, #0]
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	4718      	bx	r3

0800b1b4 <ArtNetNode::HandleTimeSync()>:
 800b1b4:	b500      	push	{lr}
 800b1b6:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 800b1ba:	b08b      	sub	sp, #44	; 0x2c
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 800b1c2:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
 800b1c6:	9302      	str	r3, [sp, #8]
 800b1c8:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
 800b1cc:	a901      	add	r1, sp, #4
 800b1ce:	9303      	str	r3, [sp, #12]
 800b1d0:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800b1d4:	9304      	str	r3, [sp, #16]
 800b1d6:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 800b1da:	9305      	str	r3, [sp, #20]
 800b1dc:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800b1e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b1e4:	9306      	str	r3, [sp, #24]
 800b1e6:	4b03      	ldr	r3, [pc, #12]	; (800b1f4 <ArtNetNode::HandleTimeSync()+0x40>)
 800b1e8:	6818      	ldr	r0, [r3, #0]
 800b1ea:	f007 fc3d 	bl	8012a68 <Hardware::SetTime(tm const*)>
 800b1ee:	b00b      	add	sp, #44	; 0x2c
 800b1f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1f4:	2000a230 	andcs	sl, r0, r0, lsr r2

0800b1f8 <ArtNetNode::Print()>:
 800b1f8:	b510      	push	{r4, lr}
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	b086      	sub	sp, #24
 800b1fe:	2201      	movs	r2, #1
 800b200:	2104      	movs	r1, #4
 800b202:	4830      	ldr	r0, [pc, #192]	; (800b2c4 <ArtNetNode::Print()+0xcc>)
 800b204:	f007 ff62 	bl	80130cc <printf>
 800b208:	4b2f      	ldr	r3, [pc, #188]	; (800b2c8 <ArtNetNode::Print()+0xd0>)
 800b20a:	4830      	ldr	r0, [pc, #192]	; (800b2cc <ArtNetNode::Print()+0xd4>)
 800b20c:	7819      	ldrb	r1, [r3, #0]
 800b20e:	785a      	ldrb	r2, [r3, #1]
 800b210:	f007 ff5c 	bl	80130cc <printf>
 800b214:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800b218:	482d      	ldr	r0, [pc, #180]	; (800b2d0 <ArtNetNode::Print()+0xd8>)
 800b21a:	f007 ff57 	bl	80130cc <printf>
 800b21e:	482d      	ldr	r0, [pc, #180]	; (800b2d4 <ArtNetNode::Print()+0xdc>)
 800b220:	f104 014e 	add.w	r1, r4, #78	; 0x4e
 800b224:	f007 ff52 	bl	80130cc <printf>
 800b228:	f894 38ea 	ldrb.w	r3, [r4, #2282]	; 0x8ea
 800b22c:	b313      	cbz	r3, 800b274 <ArtNetNode::Print()+0x7c>
 800b22e:	482a      	ldr	r0, [pc, #168]	; (800b2d8 <ArtNetNode::Print()+0xe0>)
 800b230:	f007 ff4c 	bl	80130cc <printf>
 800b234:	2301      	movs	r3, #1
 800b236:	2100      	movs	r1, #0
 800b238:	4620      	mov	r0, r4
 800b23a:	f10d 0216 	add.w	r2, sp, #22
 800b23e:	f7fe ff4b 	bl	800a0d8 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b242:	b1b8      	cbz	r0, 800b274 <ArtNetNode::Print()+0x7c>
 800b244:	f8d4 1908 	ldr.w	r1, [r4, #2312]	; 0x908
 800b248:	4a24      	ldr	r2, [pc, #144]	; (800b2dc <ArtNetNode::Print()+0xe4>)
 800b24a:	4b25      	ldr	r3, [pc, #148]	; (800b2e0 <ArtNetNode::Print()+0xe8>)
 800b24c:	4825      	ldr	r0, [pc, #148]	; (800b2e4 <ArtNetNode::Print()+0xec>)
 800b24e:	2900      	cmp	r1, #0
 800b250:	bf18      	it	ne
 800b252:	4613      	movne	r3, r2
 800b254:	2100      	movs	r1, #0
 800b256:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800b25a:	f007 ff37 	bl	80130cc <printf>
 800b25e:	f8d4 1910 	ldr.w	r1, [r4, #2320]	; 0x910
 800b262:	4a21      	ldr	r2, [pc, #132]	; (800b2e8 <ArtNetNode::Print()+0xf0>)
 800b264:	4b21      	ldr	r3, [pc, #132]	; (800b2ec <ArtNetNode::Print()+0xf4>)
 800b266:	4822      	ldr	r0, [pc, #136]	; (800b2f0 <ArtNetNode::Print()+0xf8>)
 800b268:	2900      	cmp	r1, #0
 800b26a:	bf0c      	ite	eq
 800b26c:	4611      	moveq	r1, r2
 800b26e:	4619      	movne	r1, r3
 800b270:	f007 ff2c 	bl	80130cc <printf>
 800b274:	f894 38eb 	ldrb.w	r3, [r4, #2283]	; 0x8eb
 800b278:	b313      	cbz	r3, 800b2c0 <ArtNetNode::Print()+0xc8>
 800b27a:	481e      	ldr	r0, [pc, #120]	; (800b2f4 <ArtNetNode::Print()+0xfc>)
 800b27c:	f007 ff26 	bl	80130cc <printf>
 800b280:	2300      	movs	r3, #0
 800b282:	4620      	mov	r0, r4
 800b284:	4619      	mov	r1, r3
 800b286:	f10d 0216 	add.w	r2, sp, #22
 800b28a:	f7fe ff25 	bl	800a0d8 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800b28e:	b1b8      	cbz	r0, 800b2c0 <ArtNetNode::Print()+0xc8>
 800b290:	f8d4 3920 	ldr.w	r3, [r4, #2336]	; 0x920
 800b294:	b92b      	cbnz	r3, 800b2a2 <ArtNetNode::Print()+0xaa>
 800b296:	4b18      	ldr	r3, [pc, #96]	; (800b2f8 <ArtNetNode::Print()+0x100>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69da      	ldr	r2, [r3, #28]
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	ea63 0302 	orn	r3, r3, r2
 800b2a2:	0e1a      	lsrs	r2, r3, #24
 800b2a4:	9202      	str	r2, [sp, #8]
 800b2a6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800b2aa:	9201      	str	r2, [sp, #4]
 800b2ac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b2b0:	9200      	str	r2, [sp, #0]
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800b2b8:	4810      	ldr	r0, [pc, #64]	; (800b2fc <ArtNetNode::Print()+0x104>)
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	f007 ff06 	bl	80130cc <printf>
 800b2c0:	b006      	add	sp, #24
 800b2c2:	bd10      	pop	{r4, pc}
 800b2c4:	0801666a 	stmdaeq	r1, {r1, r3, r5, r6, r9, sl, sp, lr}
 800b2c8:	08016884 	stmdaeq	r1, {r2, r7, fp, sp, lr}
 800b2cc:	08016678 	stmdaeq	r1, {r3, r4, r5, r6, r9, sl, sp, lr}
 800b2d0:	0801668d 	stmdaeq	r1, {r0, r2, r3, r7, r9, sl, sp, lr}
 800b2d4:	0801669f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r9, sl, sp, lr}
 800b2d8:	080166b1 	stmdaeq	r1, {r0, r4, r5, r7, r9, sl, sp, lr}
 800b2dc:	08016659 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, sp, lr}
 800b2e0:	08016655 	stmdaeq	r1, {r0, r2, r4, r6, r9, sl, sp, lr}
 800b2e4:	080166ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r9, sl, sp, lr}
 800b2e8:	0801665d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r9, sl, sp, lr}
 800b2ec:	08016665 	stmdaeq	r1, {r0, r2, r5, r6, r9, sl, sp, lr}
 800b2f0:	080166ce 	stmdaeq	r1, {r1, r2, r3, r6, r7, r9, sl, sp, lr}
 800b2f4:	080166d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, sl, sp, lr}
 800b2f8:	20009b68 	andcs	r9, r0, r8, ror #22
 800b2fc:	080166dd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r9, sl, sp, lr}

0800b300 <memcmp>:
 800b300:	4402      	add	r2, r0
 800b302:	4290      	cmp	r0, r2
 800b304:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800b308:	d106      	bne.n	800b318 <memcmp+0x18>
 800b30a:	2000      	movs	r0, #0
 800b30c:	4770      	bx	lr
 800b30e:	3001      	adds	r0, #1
 800b310:	4290      	cmp	r0, r2
 800b312:	d102      	bne.n	800b31a <memcmp+0x1a>
 800b314:	2000      	movs	r0, #0
 800b316:	e006      	b.n	800b326 <memcmp+0x26>
 800b318:	b510      	push	{r4, lr}
 800b31a:	7803      	ldrb	r3, [r0, #0]
 800b31c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b320:	42a3      	cmp	r3, r4
 800b322:	d0f4      	beq.n	800b30e <memcmp+0xe>
 800b324:	1b18      	subs	r0, r3, r4
 800b326:	bd10      	pop	{r4, pc}

0800b328 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800b328:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b32a:	88c6      	ldrh	r6, [r0, #6]
 800b32c:	8885      	ldrh	r5, [r0, #4]
 800b32e:	42ae      	cmp	r6, r5
 800b330:	d216      	bcs.n	800b360 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800b332:	4604      	mov	r4, r0
 800b334:	6800      	ldr	r0, [r0, #0]
 800b336:	1bad      	subs	r5, r5, r6
 800b338:	4430      	add	r0, r6
 800b33a:	7a26      	ldrb	r6, [r4, #8]
 800b33c:	b923      	cbnz	r3, 800b348 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800b33e:	b926      	cbnz	r6, 800b34a <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800b340:	9200      	str	r2, [sp, #0]
 800b342:	460b      	mov	r3, r1
 800b344:	4a09      	ldr	r2, [pc, #36]	; (800b36c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800b346:	e003      	b.n	800b350 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800b348:	b166      	cbz	r6, 800b364 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800b34a:	460b      	mov	r3, r1
 800b34c:	9200      	str	r2, [sp, #0]
 800b34e:	4a08      	ldr	r2, [pc, #32]	; (800b370 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800b350:	4629      	mov	r1, r5
 800b352:	f007 fee3 	bl	801311c <snprintf>
 800b356:	4285      	cmp	r5, r0
 800b358:	bfa2      	ittt	ge
 800b35a:	88e3      	ldrhge	r3, [r4, #6]
 800b35c:	181b      	addge	r3, r3, r0
 800b35e:	80e3      	strhge	r3, [r4, #6]
 800b360:	b002      	add	sp, #8
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	9200      	str	r2, [sp, #0]
 800b366:	460b      	mov	r3, r1
 800b368:	4a02      	ldr	r2, [pc, #8]	; (800b374 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800b36a:	e7f1      	b.n	800b350 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800b36c:	080157c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip, lr}
 800b370:	080157b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
 800b374:	080157c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, ip, lr}

0800b378 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800b378:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b37a:	88c6      	ldrh	r6, [r0, #6]
 800b37c:	8885      	ldrh	r5, [r0, #4]
 800b37e:	42ae      	cmp	r6, r5
 800b380:	d216      	bcs.n	800b3b0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800b382:	4604      	mov	r4, r0
 800b384:	6800      	ldr	r0, [r0, #0]
 800b386:	1bad      	subs	r5, r5, r6
 800b388:	4430      	add	r0, r6
 800b38a:	7a26      	ldrb	r6, [r4, #8]
 800b38c:	b923      	cbnz	r3, 800b398 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800b38e:	b926      	cbnz	r6, 800b39a <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800b390:	9200      	str	r2, [sp, #0]
 800b392:	460b      	mov	r3, r1
 800b394:	4a09      	ldr	r2, [pc, #36]	; (800b3bc <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800b396:	e003      	b.n	800b3a0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800b398:	b166      	cbz	r6, 800b3b4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800b39a:	460b      	mov	r3, r1
 800b39c:	9200      	str	r2, [sp, #0]
 800b39e:	4a08      	ldr	r2, [pc, #32]	; (800b3c0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	f007 febb 	bl	801311c <snprintf>
 800b3a6:	4285      	cmp	r5, r0
 800b3a8:	bfa2      	ittt	ge
 800b3aa:	88e3      	ldrhge	r3, [r4, #6]
 800b3ac:	181b      	addge	r3, r3, r0
 800b3ae:	80e3      	strhge	r3, [r4, #6]
 800b3b0:	b002      	add	sp, #8
 800b3b2:	bd70      	pop	{r4, r5, r6, pc}
 800b3b4:	9200      	str	r2, [sp, #0]
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	4a02      	ldr	r2, [pc, #8]	; (800b3c4 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800b3ba:	e7f1      	b.n	800b3a0 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800b3bc:	080157d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
 800b3c0:	080157c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, sl, ip, lr}
 800b3c4:	080157d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, sl, ip, lr}

0800b3c8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800b3c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	8885      	ldrh	r5, [r0, #4]
 800b3ce:	88c1      	ldrh	r1, [r0, #6]
 800b3d0:	42a9      	cmp	r1, r5
 800b3d2:	d214      	bcs.n	800b3fe <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	6800      	ldr	r0, [r0, #0]
 800b3d8:	1a6d      	subs	r5, r5, r1
 800b3da:	4408      	add	r0, r1
 800b3dc:	7a21      	ldrb	r1, [r4, #8]
 800b3de:	b91a      	cbnz	r2, 800b3e8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800b3e0:	b919      	cbnz	r1, 800b3ea <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800b3e2:	4a0a      	ldr	r2, [pc, #40]	; (800b40c <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800b3e4:	9100      	str	r1, [sp, #0]
 800b3e6:	e002      	b.n	800b3ee <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b3e8:	b159      	cbz	r1, 800b402 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800b3ea:	9200      	str	r2, [sp, #0]
 800b3ec:	4a08      	ldr	r2, [pc, #32]	; (800b410 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	f007 fe94 	bl	801311c <snprintf>
 800b3f4:	4285      	cmp	r5, r0
 800b3f6:	bfa2      	ittt	ge
 800b3f8:	88e3      	ldrhge	r3, [r4, #6]
 800b3fa:	181b      	addge	r3, r3, r0
 800b3fc:	80e3      	strhge	r3, [r4, #6]
 800b3fe:	b003      	add	sp, #12
 800b400:	bd30      	pop	{r4, r5, pc}
 800b402:	2201      	movs	r2, #1
 800b404:	9200      	str	r2, [sp, #0]
 800b406:	4a03      	ldr	r2, [pc, #12]	; (800b414 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800b408:	e7f1      	b.n	800b3ee <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800b40a:	bf00      	nop
 800b40c:	080157c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip, lr}
 800b410:	080157b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
 800b414:	080157c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, ip, lr}

0800b418 <strncpy.isra.0>:
 800b418:	1e4b      	subs	r3, r1, #1
 800b41a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800b41e:	b909      	cbnz	r1, 800b424 <strncpy.isra.0+0xc>
 800b420:	f007 bc3a 	b.w	8012c98 <memset>
 800b424:	3a01      	subs	r2, #1
 800b426:	f800 1b01 	strb.w	r1, [r0], #1
 800b42a:	d1f6      	bne.n	800b41a <strncpy.isra.0+0x2>
 800b42c:	4770      	bx	lr
	...

0800b430 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800b430:	b510      	push	{r4, lr}
 800b432:	2287      	movs	r2, #135	; 0x87
 800b434:	4604      	mov	r4, r0
 800b436:	f840 1b04 	str.w	r1, [r0], #4
 800b43a:	2100      	movs	r1, #0
 800b43c:	f007 fc2c 	bl	8012c98 <memset>
 800b440:	f240 3302 	movw	r3, #770	; 0x302
 800b444:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800b448:	2304      	movs	r3, #4
 800b44a:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800b44e:	2355      	movs	r3, #85	; 0x55
 800b450:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
 800b454:	2300      	movs	r3, #0
 800b456:	2201      	movs	r2, #1
 800b458:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800b45c:	4b03      	ldr	r3, [pc, #12]	; (800b46c <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x3c>)
 800b45e:	f884 206b 	strb.w	r2, [r4, #107]	; 0x6b
 800b462:	6819      	ldr	r1, [r3, #0]
 800b464:	b901      	cbnz	r1, 800b468 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x38>
 800b466:	601a      	str	r2, [r3, #0]
 800b468:	4620      	mov	r0, r4
 800b46a:	bd10      	pop	{r4, pc}
 800b46c:	20000ce0 	andcs	r0, r0, r0, ror #25

0800b470 <ArtNetParams::Load()>:
 800b470:	b508      	push	{r3, lr}
 800b472:	2300      	movs	r3, #0
 800b474:	4601      	mov	r1, r0
 800b476:	6043      	str	r3, [r0, #4]
 800b478:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800b47c:	6800      	ldr	r0, [r0, #0]
 800b47e:	b120      	cbz	r0, 800b48a <ArtNetParams::Load()+0x1a>
 800b480:	6803      	ldr	r3, [r0, #0]
 800b482:	3104      	adds	r1, #4
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	4798      	blx	r3
 800b488:	2001      	movs	r0, #1
 800b48a:	bd08      	pop	{r3, pc}

0800b48c <ArtNetParams::Load(char const*, unsigned int)>:
 800b48c:	6803      	ldr	r3, [r0, #0]
 800b48e:	b1e3      	cbz	r3, 800b4ca <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800b490:	2300      	movs	r3, #0
 800b492:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b494:	460d      	mov	r5, r1
 800b496:	4616      	mov	r6, r2
 800b498:	4604      	mov	r4, r0
 800b49a:	6043      	str	r3, [r0, #4]
 800b49c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	490a      	ldr	r1, [pc, #40]	; (800b4cc <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800b4a4:	4668      	mov	r0, sp
 800b4a6:	f006 fdf5 	bl	8012094 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800b4aa:	4632      	mov	r2, r6
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	4668      	mov	r0, sp
 800b4b0:	f006 fdf4 	bl	801209c <ReadConfigFile::Read(char const*, unsigned int)>
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	f851 0b04 	ldr.w	r0, [r1], #4
 800b4ba:	6803      	ldr	r3, [r0, #0]
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	4798      	blx	r3
 800b4c0:	4668      	mov	r0, sp
 800b4c2:	f006 fdea 	bl	801209a <ReadConfigFile::~ReadConfigFile()>
 800b4c6:	b002      	add	sp, #8
 800b4c8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ca:	4770      	bx	lr
 800b4cc:	0800b8b1 	stmdaeq	r0, {r0, r4, r5, r7, fp, ip, sp, pc}

0800b4d0 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800b4d0:	6843      	ldr	r3, [r0, #4]
 800b4d2:	b111      	cbz	r1, 800b4da <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	6043      	str	r3, [r0, #4]
 800b4d8:	4770      	bx	lr
 800b4da:	ea23 0302 	bic.w	r3, r3, r2
 800b4de:	e7fa      	b.n	800b4d6 <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800b4e0 <ArtNetParams::callbackFunction(char const*)>:
 800b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	460e      	mov	r6, r1
 800b4e6:	b0a7      	sub	sp, #156	; 0x9c
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	499d      	ldr	r1, [pc, #628]	; (800b760 <ArtNetParams::callbackFunction(char const*)+0x280>)
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f10d 020f 	add.w	r2, sp, #15
 800b4f2:	f006 fe7f 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b4f6:	b940      	cbnz	r0, 800b50a <ArtNetParams::callbackFunction(char const*)+0x2a>
 800b4f8:	2220      	movs	r2, #32
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800b500:	b027      	add	sp, #156	; 0x9c
 800b502:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b506:	f7ff bfe3 	b.w	800b4d0 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800b50a:	2708      	movs	r7, #8
 800b50c:	4630      	mov	r0, r6
 800b50e:	4995      	ldr	r1, [pc, #596]	; (800b764 <ArtNetParams::callbackFunction(char const*)+0x284>)
 800b510:	ab05      	add	r3, sp, #20
 800b512:	aa06      	add	r2, sp, #24
 800b514:	9705      	str	r7, [sp, #20]
 800b516:	f006 fdf5 	bl	8012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b51a:	bb40      	cbnz	r0, 800b56e <ArtNetParams::callbackFunction(char const*)+0x8e>
 800b51c:	2204      	movs	r2, #4
 800b51e:	4992      	ldr	r1, [pc, #584]	; (800b768 <ArtNetParams::callbackFunction(char const*)+0x288>)
 800b520:	a806      	add	r0, sp, #24
 800b522:	f7ff feed 	bl	800b300 <memcmp>
 800b526:	6865      	ldr	r5, [r4, #4]
 800b528:	b188      	cbz	r0, 800b54e <ArtNetParams::callbackFunction(char const*)+0x6e>
 800b52a:	2203      	movs	r2, #3
 800b52c:	498f      	ldr	r1, [pc, #572]	; (800b76c <ArtNetParams::callbackFunction(char const*)+0x28c>)
 800b52e:	a806      	add	r0, sp, #24
 800b530:	f7ff fee6 	bl	800b300 <memcmp>
 800b534:	b198      	cbz	r0, 800b55e <ArtNetParams::callbackFunction(char const*)+0x7e>
 800b536:	2202      	movs	r2, #2
 800b538:	498d      	ldr	r1, [pc, #564]	; (800b770 <ArtNetParams::callbackFunction(char const*)+0x290>)
 800b53a:	a806      	add	r0, sp, #24
 800b53c:	f7ff fee0 	bl	800b300 <memcmp>
 800b540:	b188      	cbz	r0, 800b566 <ArtNetParams::callbackFunction(char const*)+0x86>
 800b542:	463a      	mov	r2, r7
 800b544:	498b      	ldr	r1, [pc, #556]	; (800b774 <ArtNetParams::callbackFunction(char const*)+0x294>)
 800b546:	a806      	add	r0, sp, #24
 800b548:	f7ff feda 	bl	800b300 <memcmp>
 800b54c:	b168      	cbz	r0, 800b56a <ArtNetParams::callbackFunction(char const*)+0x8a>
 800b54e:	2300      	movs	r3, #0
 800b550:	f025 0510 	bic.w	r5, r5, #16
 800b554:	6065      	str	r5, [r4, #4]
 800b556:	72a3      	strb	r3, [r4, #10]
 800b558:	b027      	add	sp, #156	; 0x9c
 800b55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55e:	2301      	movs	r3, #1
 800b560:	f045 0510 	orr.w	r5, r5, #16
 800b564:	e7f6      	b.n	800b554 <ArtNetParams::callbackFunction(char const*)+0x74>
 800b566:	2302      	movs	r3, #2
 800b568:	e7fa      	b.n	800b560 <ArtNetParams::callbackFunction(char const*)+0x80>
 800b56a:	2303      	movs	r3, #3
 800b56c:	e7f8      	b.n	800b560 <ArtNetParams::callbackFunction(char const*)+0x80>
 800b56e:	2311      	movs	r3, #17
 800b570:	4630      	mov	r0, r6
 800b572:	9305      	str	r3, [sp, #20]
 800b574:	4980      	ldr	r1, [pc, #512]	; (800b778 <ArtNetParams::callbackFunction(char const*)+0x298>)
 800b576:	ab05      	add	r3, sp, #20
 800b578:	f104 0210 	add.w	r2, r4, #16
 800b57c:	f006 fdc2 	bl	8012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b580:	b938      	cbnz	r0, 800b592 <ArtNetParams::callbackFunction(char const*)+0xb2>
 800b582:	9b05      	ldr	r3, [sp, #20]
 800b584:	4423      	add	r3, r4
 800b586:	7418      	strb	r0, [r3, #16]
 800b588:	6863      	ldr	r3, [r4, #4]
 800b58a:	f043 0302 	orr.w	r3, r3, #2
 800b58e:	6063      	str	r3, [r4, #4]
 800b590:	e7e2      	b.n	800b558 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b592:	233f      	movs	r3, #63	; 0x3f
 800b594:	4630      	mov	r0, r6
 800b596:	9305      	str	r3, [sp, #20]
 800b598:	4978      	ldr	r1, [pc, #480]	; (800b77c <ArtNetParams::callbackFunction(char const*)+0x29c>)
 800b59a:	ab05      	add	r3, sp, #20
 800b59c:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800b5a0:	f006 fdb0 	bl	8012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b5a4:	b938      	cbnz	r0, 800b5b6 <ArtNetParams::callbackFunction(char const*)+0xd6>
 800b5a6:	9b05      	ldr	r3, [sp, #20]
 800b5a8:	4423      	add	r3, r4
 800b5aa:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800b5ae:	6863      	ldr	r3, [r4, #4]
 800b5b0:	f043 0301 	orr.w	r3, r3, #1
 800b5b4:	e7eb      	b.n	800b58e <ArtNetParams::callbackFunction(char const*)+0xae>
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	4971      	ldr	r1, [pc, #452]	; (800b780 <ArtNetParams::callbackFunction(char const*)+0x2a0>)
 800b5ba:	f10d 020f 	add.w	r2, sp, #15
 800b5be:	f006 fe19 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b5c2:	b950      	cbnz	r0, 800b5da <ArtNetParams::callbackFunction(char const*)+0xfa>
 800b5c4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b5c8:	6863      	ldr	r3, [r4, #4]
 800b5ca:	7222      	strb	r2, [r4, #8]
 800b5cc:	b112      	cbz	r2, 800b5d4 <ArtNetParams::callbackFunction(char const*)+0xf4>
 800b5ce:	f043 0304 	orr.w	r3, r3, #4
 800b5d2:	e7dc      	b.n	800b58e <ArtNetParams::callbackFunction(char const*)+0xae>
 800b5d4:	f023 0304 	bic.w	r3, r3, #4
 800b5d8:	e7d9      	b.n	800b58e <ArtNetParams::callbackFunction(char const*)+0xae>
 800b5da:	4630      	mov	r0, r6
 800b5dc:	4969      	ldr	r1, [pc, #420]	; (800b784 <ArtNetParams::callbackFunction(char const*)+0x2a4>)
 800b5de:	f10d 020f 	add.w	r2, sp, #15
 800b5e2:	f006 fe07 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b5e6:	b950      	cbnz	r0, 800b5fe <ArtNetParams::callbackFunction(char const*)+0x11e>
 800b5e8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800b5ec:	6863      	ldr	r3, [r4, #4]
 800b5ee:	7262      	strb	r2, [r4, #9]
 800b5f0:	b112      	cbz	r2, 800b5f8 <ArtNetParams::callbackFunction(char const*)+0x118>
 800b5f2:	f043 0308 	orr.w	r3, r3, #8
 800b5f6:	e7ca      	b.n	800b58e <ArtNetParams::callbackFunction(char const*)+0xae>
 800b5f8:	f023 0308 	bic.w	r3, r3, #8
 800b5fc:	e7c7      	b.n	800b58e <ArtNetParams::callbackFunction(char const*)+0xae>
 800b5fe:	2500      	movs	r5, #0
 800b600:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800b788 <ArtNetParams::callbackFunction(char const*)+0x2a8>
 800b604:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800b78c <ArtNetParams::callbackFunction(char const*)+0x2ac>
 800b608:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b790 <ArtNetParams::callbackFunction(char const*)+0x2b0>
 800b60c:	4649      	mov	r1, r9
 800b60e:	4630      	mov	r0, r6
 800b610:	f10d 020f 	add.w	r2, sp, #15
 800b614:	f006 fdee 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b618:	b9a8      	cbnz	r0, 800b646 <ArtNetParams::callbackFunction(char const*)+0x166>
 800b61a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b61e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800b622:	6862      	ldr	r2, [r4, #4]
 800b624:	280f      	cmp	r0, #15
 800b626:	fa03 f305 	lsl.w	r3, r3, r5
 800b62a:	eb04 0105 	add.w	r1, r4, r5
 800b62e:	d803      	bhi.n	800b638 <ArtNetParams::callbackFunction(char const*)+0x158>
 800b630:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800b634:	4313      	orrs	r3, r2
 800b636:	e7aa      	b.n	800b58e <ArtNetParams::callbackFunction(char const*)+0xae>
 800b638:	3501      	adds	r5, #1
 800b63a:	ea22 0203 	bic.w	r2, r2, r3
 800b63e:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800b642:	6062      	str	r2, [r4, #4]
 800b644:	e788      	b.n	800b558 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b646:	2712      	movs	r7, #18
 800b648:	2303      	movs	r3, #3
 800b64a:	436f      	muls	r7, r5
 800b64c:	4951      	ldr	r1, [pc, #324]	; (800b794 <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800b64e:	9305      	str	r3, [sp, #20]
 800b650:	4630      	mov	r0, r6
 800b652:	ab05      	add	r3, sp, #20
 800b654:	aa06      	add	r2, sp, #24
 800b656:	4439      	add	r1, r7
 800b658:	f006 fd54 	bl	8012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b65c:	bb00      	cbnz	r0, 800b6a0 <ArtNetParams::callbackFunction(char const*)+0x1c0>
 800b65e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800b662:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800b666:	40aa      	lsls	r2, r5
 800b668:	f041 0120 	orr.w	r1, r1, #32
 800b66c:	296c      	cmp	r1, #108	; 0x6c
 800b66e:	6863      	ldr	r3, [r4, #4]
 800b670:	4425      	add	r5, r4
 800b672:	d10f      	bne.n	800b694 <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800b674:	f89d 1019 	ldrb.w	r1, [sp, #25]
 800b678:	f041 0120 	orr.w	r1, r1, #32
 800b67c:	2974      	cmp	r1, #116	; 0x74
 800b67e:	d109      	bne.n	800b694 <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800b680:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800b684:	f041 0120 	orr.w	r1, r1, #32
 800b688:	2970      	cmp	r1, #112	; 0x70
 800b68a:	d103      	bne.n	800b694 <ArtNetParams::callbackFunction(char const*)+0x1b4>
 800b68c:	2101      	movs	r1, #1
 800b68e:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800b692:	e7cf      	b.n	800b634 <ArtNetParams::callbackFunction(char const*)+0x154>
 800b694:	2100      	movs	r1, #0
 800b696:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800b69a:	ea23 0302 	bic.w	r3, r3, r2
 800b69e:	e776      	b.n	800b58e <ArtNetParams::callbackFunction(char const*)+0xae>
 800b6a0:	f04f 0a04 	mov.w	sl, #4
 800b6a4:	493c      	ldr	r1, [pc, #240]	; (800b798 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	ab05      	add	r3, sp, #20
 800b6aa:	aa06      	add	r2, sp, #24
 800b6ac:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800b6b0:	f8cd a014 	str.w	sl, [sp, #20]
 800b6b4:	f006 fd26 	bl	8012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b6b8:	b9a0      	cbnz	r0, 800b6e4 <ArtNetParams::callbackFunction(char const*)+0x204>
 800b6ba:	4652      	mov	r2, sl
 800b6bc:	9001      	str	r0, [sp, #4]
 800b6be:	4937      	ldr	r1, [pc, #220]	; (800b79c <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800b6c0:	a806      	add	r0, sp, #24
 800b6c2:	f7ff fe1d 	bl	800b300 <memcmp>
 800b6c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b6ca:	9b01      	ldr	r3, [sp, #4]
 800b6cc:	40aa      	lsls	r2, r5
 800b6ce:	4425      	add	r5, r4
 800b6d0:	b920      	cbnz	r0, 800b6dc <ArtNetParams::callbackFunction(char const*)+0x1fc>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800b6d8:	6863      	ldr	r3, [r4, #4]
 800b6da:	e7ab      	b.n	800b634 <ArtNetParams::callbackFunction(char const*)+0x154>
 800b6dc:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
 800b6e0:	6863      	ldr	r3, [r4, #4]
 800b6e2:	e7da      	b.n	800b69a <ArtNetParams::callbackFunction(char const*)+0x1ba>
 800b6e4:	2307      	movs	r3, #7
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	9305      	str	r3, [sp, #20]
 800b6ea:	aa06      	add	r2, sp, #24
 800b6ec:	ab05      	add	r3, sp, #20
 800b6ee:	eb0b 0107 	add.w	r1, fp, r7
 800b6f2:	f006 fd07 	bl	8012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d17d      	bne.n	800b7f6 <ArtNetParams::callbackFunction(char const*)+0x316>
 800b6fa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800b6fe:	f043 0320 	orr.w	r3, r3, #32
 800b702:	2b69      	cmp	r3, #105	; 0x69
 800b704:	d14c      	bne.n	800b7a0 <ArtNetParams::callbackFunction(char const*)+0x2c0>
 800b706:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b70a:	f043 0320 	orr.w	r3, r3, #32
 800b70e:	2b6e      	cmp	r3, #110	; 0x6e
 800b710:	d16f      	bne.n	800b7f2 <ArtNetParams::callbackFunction(char const*)+0x312>
 800b712:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800b716:	f043 0320 	orr.w	r3, r3, #32
 800b71a:	2b70      	cmp	r3, #112	; 0x70
 800b71c:	d169      	bne.n	800b7f2 <ArtNetParams::callbackFunction(char const*)+0x312>
 800b71e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b722:	f043 0320 	orr.w	r3, r3, #32
 800b726:	2b75      	cmp	r3, #117	; 0x75
 800b728:	d163      	bne.n	800b7f2 <ArtNetParams::callbackFunction(char const*)+0x312>
 800b72a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b72e:	f043 0320 	orr.w	r3, r3, #32
 800b732:	3b74      	subs	r3, #116	; 0x74
 800b734:	bf18      	it	ne
 800b736:	2301      	movne	r3, #1
 800b738:	2103      	movs	r1, #3
 800b73a:	f8b4 2079 	ldrh.w	r2, [r4, #121]	; 0x79
 800b73e:	006d      	lsls	r5, r5, #1
 800b740:	40a9      	lsls	r1, r5
 800b742:	ea22 0201 	bic.w	r2, r2, r1
 800b746:	b143      	cbz	r3, 800b75a <ArtNetParams::callbackFunction(char const*)+0x27a>
 800b748:	2b02      	cmp	r3, #2
 800b74a:	bf15      	itete	ne
 800b74c:	2301      	movne	r3, #1
 800b74e:	40ab      	lsleq	r3, r5
 800b750:	fa03 f505 	lslne.w	r5, r3, r5
 800b754:	431a      	orreq	r2, r3
 800b756:	bf18      	it	ne
 800b758:	432a      	orrne	r2, r5
 800b75a:	f8a4 2079 	strh.w	r2, [r4, #121]	; 0x79
 800b75e:	e6fb      	b.n	800b558 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b760:	08016754 	stmdaeq	r1, {r2, r4, r6, r8, r9, sl, sp, lr}
 800b764:	0801724c 	stmdaeq	r1, {r2, r3, r6, r9, ip, sp, lr}
 800b768:	080166fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
 800b76c:	08016701 	stmdaeq	r1, {r0, r8, r9, sl, sp, lr}
 800b770:	0801595e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, fp, ip, lr}
 800b774:	08016705 	stmdaeq	r1, {r0, r2, r8, r9, sl, sp, lr}
 800b778:	080167b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, r9, sl, sp, lr}
 800b77c:	080167ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, sl, sp, lr}
 800b780:	0801686a 	stmdaeq	r1, {r1, r3, r5, r6, fp, sp, lr}
 800b784:	0801686e 	stmdaeq	r1, {r1, r2, r3, r5, r6, fp, sp, lr}
 800b788:	0801719c 	stmdaeq	r1, {r2, r3, r4, r7, r8, ip, sp, lr}
 800b78c:	080167c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, sp, lr}
 800b790:	0801725e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, ip, sp, lr}
 800b794:	080171dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, ip, sp, lr}
 800b798:	0801676d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 800b79c:	0801670e 	stmdaeq	r1, {r1, r2, r3, r8, r9, sl, sp, lr}
 800b7a0:	2b64      	cmp	r3, #100	; 0x64
 800b7a2:	d126      	bne.n	800b7f2 <ArtNetParams::callbackFunction(char const*)+0x312>
 800b7a4:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800b7a8:	f043 0320 	orr.w	r3, r3, #32
 800b7ac:	2b69      	cmp	r3, #105	; 0x69
 800b7ae:	d120      	bne.n	800b7f2 <ArtNetParams::callbackFunction(char const*)+0x312>
 800b7b0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800b7b4:	f043 0320 	orr.w	r3, r3, #32
 800b7b8:	2b73      	cmp	r3, #115	; 0x73
 800b7ba:	d11a      	bne.n	800b7f2 <ArtNetParams::callbackFunction(char const*)+0x312>
 800b7bc:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b7c0:	f043 0320 	orr.w	r3, r3, #32
 800b7c4:	2b61      	cmp	r3, #97	; 0x61
 800b7c6:	d114      	bne.n	800b7f2 <ArtNetParams::callbackFunction(char const*)+0x312>
 800b7c8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b7cc:	f043 0320 	orr.w	r3, r3, #32
 800b7d0:	2b62      	cmp	r3, #98	; 0x62
 800b7d2:	d10e      	bne.n	800b7f2 <ArtNetParams::callbackFunction(char const*)+0x312>
 800b7d4:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800b7d8:	f043 0320 	orr.w	r3, r3, #32
 800b7dc:	2b6c      	cmp	r3, #108	; 0x6c
 800b7de:	d108      	bne.n	800b7f2 <ArtNetParams::callbackFunction(char const*)+0x312>
 800b7e0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800b7e4:	f043 0320 	orr.w	r3, r3, #32
 800b7e8:	2b65      	cmp	r3, #101	; 0x65
 800b7ea:	bf14      	ite	ne
 800b7ec:	2301      	movne	r3, #1
 800b7ee:	2302      	moveq	r3, #2
 800b7f0:	e7a2      	b.n	800b738 <ArtNetParams::callbackFunction(char const*)+0x258>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e7a0      	b.n	800b738 <ArtNetParams::callbackFunction(char const*)+0x258>
 800b7f6:	2118      	movs	r1, #24
 800b7f8:	4b2a      	ldr	r3, [pc, #168]	; (800b8a4 <ArtNetParams::callbackFunction(char const*)+0x3c4>)
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	fb01 3105 	mla	r1, r1, r5, r3
 800b800:	aa04      	add	r2, sp, #16
 800b802:	f006 fc98 	bl	8012136 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800b806:	b998      	cbnz	r0, 800b830 <ArtNetParams::callbackFunction(char const*)+0x350>
 800b808:	9904      	ldr	r1, [sp, #16]
 800b80a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b80e:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800b812:	2301      	movs	r3, #1
 800b814:	40ab      	lsls	r3, r5
 800b816:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	b119      	cbz	r1, 800b826 <ArtNetParams::callbackFunction(char const*)+0x346>
 800b81e:	4313      	orrs	r3, r2
 800b820:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800b824:	e698      	b.n	800b558 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b826:	ea22 0203 	bic.w	r2, r2, r3
 800b82a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800b82e:	e693      	b.n	800b558 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b830:	4641      	mov	r1, r8
 800b832:	4630      	mov	r0, r6
 800b834:	f10d 020f 	add.w	r2, sp, #15
 800b838:	f006 fcdc 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b83c:	b998      	cbnz	r0, 800b866 <ArtNetParams::callbackFunction(char const*)+0x386>
 800b83e:	2201      	movs	r2, #1
 800b840:	f105 0308 	add.w	r3, r5, #8
 800b844:	fa02 f303 	lsl.w	r3, r2, r3
 800b848:	40aa      	lsls	r2, r5
 800b84a:	4313      	orrs	r3, r2
 800b84c:	89a2      	ldrh	r2, [r4, #12]
 800b84e:	b29b      	uxth	r3, r3
 800b850:	ea22 0103 	bic.w	r1, r2, r3
 800b854:	81a1      	strh	r1, [r4, #12]
 800b856:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800b85a:	2900      	cmp	r1, #0
 800b85c:	f43f ae7c 	beq.w	800b558 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b860:	431a      	orrs	r2, r3
 800b862:	81a2      	strh	r2, [r4, #12]
 800b864:	e678      	b.n	800b558 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b866:	3501      	adds	r5, #1
 800b868:	2d04      	cmp	r5, #4
 800b86a:	f109 0910 	add.w	r9, r9, #16
 800b86e:	f108 0812 	add.w	r8, r8, #18
 800b872:	f47f aecb 	bne.w	800b60c <ArtNetParams::callbackFunction(char const*)+0x12c>
 800b876:	4630      	mov	r0, r6
 800b878:	490b      	ldr	r1, [pc, #44]	; (800b8a8 <ArtNetParams::callbackFunction(char const*)+0x3c8>)
 800b87a:	f10d 020f 	add.w	r2, sp, #15
 800b87e:	f006 fcb9 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b882:	b910      	cbnz	r0, 800b88a <ArtNetParams::callbackFunction(char const*)+0x3aa>
 800b884:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b888:	e637      	b.n	800b4fa <ArtNetParams::callbackFunction(char const*)+0x1a>
 800b88a:	4630      	mov	r0, r6
 800b88c:	4907      	ldr	r1, [pc, #28]	; (800b8ac <ArtNetParams::callbackFunction(char const*)+0x3cc>)
 800b88e:	f10d 020f 	add.w	r2, sp, #15
 800b892:	f006 fcaf 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800b896:	2800      	cmp	r0, #0
 800b898:	f47f ae5e 	bne.w	800b558 <ArtNetParams::callbackFunction(char const*)+0x78>
 800b89c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b8a0:	e62b      	b.n	800b4fa <ArtNetParams::callbackFunction(char const*)+0x1a>
 800b8a2:	bf00      	nop
 800b8a4:	0801680a 	stmdaeq	r1, {r1, r3, fp, sp, lr}
 800b8a8:	0801675f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}
 800b8ac:	08017236 	stmdaeq	r1, {r1, r2, r4, r5, r9, ip, sp, lr}

0800b8b0 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800b8b0:	f7ff be16 	b.w	800b4e0 <ArtNetParams::callbackFunction(char const*)>

0800b8b4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800b8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	4615      	mov	r5, r2
 800b8bc:	461e      	mov	r6, r3
 800b8be:	b085      	sub	sp, #20
 800b8c0:	3004      	adds	r0, #4
 800b8c2:	2900      	cmp	r1, #0
 800b8c4:	f000 80a4 	beq.w	800ba10 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x15c>
 800b8c8:	2287      	movs	r2, #135	; 0x87
 800b8ca:	f007 f9ce 	bl	8012c6a <memmove>
 800b8ce:	4633      	mov	r3, r6
 800b8d0:	462a      	mov	r2, r5
 800b8d2:	4993      	ldr	r1, [pc, #588]	; (800bb20 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x26c>)
 800b8d4:	a801      	add	r0, sp, #4
 800b8d6:	f006 fb3d 	bl	8011f54 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800b8da:	6863      	ldr	r3, [r4, #4]
 800b8dc:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800b8e0:	f013 0501 	ands.w	r5, r3, #1
 800b8e4:	d108      	bne.n	800b8f8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x44>
 800b8e6:	4b8f      	ldr	r3, [pc, #572]	; (800bb24 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800b8e8:	223f      	movs	r2, #63	; 0x3f
 800b8ea:	6819      	ldr	r1, [r3, #0]
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	314e      	adds	r1, #78	; 0x4e
 800b8f0:	f7ff fd92 	bl	800b418 <strncpy.isra.0>
 800b8f4:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800b8f8:	6863      	ldr	r3, [r4, #4]
 800b8fa:	4632      	mov	r2, r6
 800b8fc:	f003 0301 	and.w	r3, r3, #1
 800b900:	4989      	ldr	r1, [pc, #548]	; (800bb28 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800b902:	a801      	add	r0, sp, #4
 800b904:	f7ff fd38 	bl	800b378 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b908:	6863      	ldr	r3, [r4, #4]
 800b90a:	f104 0610 	add.w	r6, r4, #16
 800b90e:	f013 0502 	ands.w	r5, r3, #2
 800b912:	d108      	bne.n	800b926 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x72>
 800b914:	4b83      	ldr	r3, [pc, #524]	; (800bb24 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800b916:	2211      	movs	r2, #17
 800b918:	6819      	ldr	r1, [r3, #0]
 800b91a:	4630      	mov	r0, r6
 800b91c:	313c      	adds	r1, #60	; 0x3c
 800b91e:	f7ff fd7b 	bl	800b418 <strncpy.isra.0>
 800b922:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800b926:	6863      	ldr	r3, [r4, #4]
 800b928:	4632      	mov	r2, r6
 800b92a:	4980      	ldr	r1, [pc, #512]	; (800bb2c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800b92c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b930:	a801      	add	r0, sp, #4
 800b932:	f7ff fd21 	bl	800b378 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b936:	6863      	ldr	r3, [r4, #4]
 800b938:	7a22      	ldrb	r2, [r4, #8]
 800b93a:	497d      	ldr	r1, [pc, #500]	; (800bb30 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800b93c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b940:	a801      	add	r0, sp, #4
 800b942:	f7ff fcf1 	bl	800b328 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b946:	6863      	ldr	r3, [r4, #4]
 800b948:	7a62      	ldrb	r2, [r4, #9]
 800b94a:	497a      	ldr	r1, [pc, #488]	; (800bb34 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x280>)
 800b94c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b950:	a801      	add	r0, sp, #4
 800b952:	f7ff fce9 	bl	800b328 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800b956:	6862      	ldr	r2, [r4, #4]
 800b958:	4977      	ldr	r1, [pc, #476]	; (800bb38 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x284>)
 800b95a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800b95e:	a801      	add	r0, sp, #4
 800b960:	f7ff fd32 	bl	800b3c8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b964:	2500      	movs	r5, #0
 800b966:	4f75      	ldr	r7, [pc, #468]	; (800bb3c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800b968:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800bb40 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x28c>
 800b96c:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 800bb44 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x290>
 800b970:	f104 086a 	add.w	r8, r4, #106	; 0x6a
 800b974:	f8d9 2000 	ldr.w	r2, [r9]
 800b978:	6863      	ldr	r3, [r4, #4]
 800b97a:	42aa      	cmp	r2, r5
 800b97c:	d84f      	bhi.n	800ba1e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x16a>
 800b97e:	7aa1      	ldrb	r1, [r4, #10]
 800b980:	4a71      	ldr	r2, [pc, #452]	; (800bb48 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800b982:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b986:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b98a:	a801      	add	r0, sp, #4
 800b98c:	496f      	ldr	r1, [pc, #444]	; (800bb4c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800b98e:	f7ff fcf3 	bl	800b378 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800b992:	496f      	ldr	r1, [pc, #444]	; (800bb50 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800b994:	a801      	add	r0, sp, #4
 800b996:	f006 fb63 	bl	8012060 <PropertiesBuilder::AddComment(char const*)>
 800b99a:	2500      	movs	r5, #0
 800b99c:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 800b9a0:	4e6c      	ldr	r6, [pc, #432]	; (800bb54 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800b9a2:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 800bb58 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a4>
 800b9a6:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800bb5c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2a8>
 800b9aa:	f104 0774 	add.w	r7, r4, #116	; 0x74
 800b9ae:	f8d9 3000 	ldr.w	r3, [r9]
 800b9b2:	42ab      	cmp	r3, r5
 800b9b4:	6863      	ldr	r3, [r4, #4]
 800b9b6:	f200 80a0 	bhi.w	800bafa <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800b9ba:	f3c3 62c0 	ubfx	r2, r3, #27, #1
 800b9be:	4968      	ldr	r1, [pc, #416]	; (800bb60 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ac>)
 800b9c0:	a801      	add	r0, sp, #4
 800b9c2:	f7ff fd01 	bl	800b3c8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b9c6:	4967      	ldr	r1, [pc, #412]	; (800bb64 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b0>)
 800b9c8:	a801      	add	r0, sp, #4
 800b9ca:	f006 fb49 	bl	8012060 <PropertiesBuilder::AddComment(char const*)>
 800b9ce:	6862      	ldr	r2, [r4, #4]
 800b9d0:	4965      	ldr	r1, [pc, #404]	; (800bb68 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b4>)
 800b9d2:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800b9d6:	a801      	add	r0, sp, #4
 800b9d8:	f7ff fcf6 	bl	800b3c8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800b9dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800b9e0:	b17b      	cbz	r3, 800ba02 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x14e>
 800b9e2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800b9e6:	9b01      	ldr	r3, [sp, #4]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	227d      	movs	r2, #125	; 0x7d
 800b9ec:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b9f0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800b9f4:	9901      	ldr	r1, [sp, #4]
 800b9f6:	54ca      	strb	r2, [r1, r3]
 800b9f8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	f8ad 300a 	strh.w	r3, [sp, #10]
 800ba02:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800ba06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba08:	601a      	str	r2, [r3, #0]
 800ba0a:	b005      	add	sp, #20
 800ba0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba10:	6823      	ldr	r3, [r4, #0]
 800ba12:	4601      	mov	r1, r0
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	4618      	mov	r0, r3
 800ba18:	68d2      	ldr	r2, [r2, #12]
 800ba1a:	4790      	blx	r2
 800ba1c:	e757      	b.n	800b8ce <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800ba1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ba22:	f04f 0b12 	mov.w	fp, #18
 800ba26:	40aa      	lsls	r2, r5
 800ba28:	439a      	bics	r2, r3
 800ba2a:	bf0c      	ite	eq
 800ba2c:	2301      	moveq	r3, #1
 800ba2e:	2300      	movne	r3, #0
 800ba30:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800ba34:	eb0a 1105 	add.w	r1, sl, r5, lsl #4
 800ba38:	a801      	add	r0, sp, #4
 800ba3a:	f7ff fc75 	bl	800b328 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800ba3e:	fb0b fb05 	mul.w	fp, fp, r5
 800ba42:	f8b4 3079 	ldrh.w	r3, [r4, #121]	; 0x79
 800ba46:	006a      	lsls	r2, r5, #1
 800ba48:	4948      	ldr	r1, [pc, #288]	; (800bb6c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800ba4a:	40d3      	lsrs	r3, r2
 800ba4c:	f013 0303 	ands.w	r3, r3, #3
 800ba50:	4459      	add	r1, fp
 800ba52:	d04e      	beq.n	800baf2 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x23e>
 800ba54:	4a46      	ldr	r2, [pc, #280]	; (800bb70 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800ba56:	4847      	ldr	r0, [pc, #284]	; (800bb74 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>)
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	bf08      	it	eq
 800ba5c:	4602      	moveq	r2, r0
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	bf18      	it	ne
 800ba62:	2301      	movne	r3, #1
 800ba64:	a801      	add	r0, sp, #4
 800ba66:	f7ff fc87 	bl	800b378 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ba6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ba6e:	2601      	movs	r6, #1
 800ba70:	6862      	ldr	r2, [r4, #4]
 800ba72:	40ab      	lsls	r3, r5
 800ba74:	4393      	bics	r3, r2
 800ba76:	f898 0005 	ldrb.w	r0, [r8, #5]
 800ba7a:	493f      	ldr	r1, [pc, #252]	; (800bb78 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800ba7c:	4a3f      	ldr	r2, [pc, #252]	; (800bb7c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800ba7e:	bf0c      	ite	eq
 800ba80:	2301      	moveq	r3, #1
 800ba82:	2300      	movne	r3, #0
 800ba84:	2800      	cmp	r0, #0
 800ba86:	bf18      	it	ne
 800ba88:	460a      	movne	r2, r1
 800ba8a:	493d      	ldr	r1, [pc, #244]	; (800bb80 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800ba8c:	a801      	add	r0, sp, #4
 800ba8e:	4459      	add	r1, fp
 800ba90:	f7ff fc72 	bl	800b378 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ba94:	f105 0308 	add.w	r3, r5, #8
 800ba98:	89a2      	ldrh	r2, [r4, #12]
 800ba9a:	fa06 f303 	lsl.w	r3, r6, r3
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	4938      	ldr	r1, [pc, #224]	; (800bb84 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800baa2:	4393      	bics	r3, r2
 800baa4:	bf0c      	ite	eq
 800baa6:	4632      	moveq	r2, r6
 800baa8:	2200      	movne	r2, #0
 800baaa:	4459      	add	r1, fp
 800baac:	a801      	add	r0, sp, #4
 800baae:	f7ff fc8b 	bl	800b3c8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800bab2:	40ae      	lsls	r6, r5
 800bab4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800bab8:	b2b6      	uxth	r6, r6
 800baba:	4033      	ands	r3, r6
 800babc:	429e      	cmp	r6, r3
 800babe:	bf0c      	ite	eq
 800bac0:	2301      	moveq	r3, #1
 800bac2:	2300      	movne	r3, #0
 800bac4:	f105 021c 	add.w	r2, r5, #28
 800bac8:	d008      	beq.n	800badc <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x228>
 800baca:	4916      	ldr	r1, [pc, #88]	; (800bb24 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800bacc:	6809      	ldr	r1, [r1, #0]
 800bace:	b995      	cbnz	r5, 800baf6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x242>
 800bad0:	f8d1 1920 	ldr.w	r1, [r1, #2336]	; 0x920
 800bad4:	eb04 0082 	add.w	r0, r4, r2, lsl #2
 800bad8:	f8c0 100b 	str.w	r1, [r0, #11]
 800badc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bae0:	4639      	mov	r1, r7
 800bae2:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800bae6:	a801      	add	r0, sp, #4
 800bae8:	f006 fa76 	bl	8011fd8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800baec:	3501      	adds	r5, #1
 800baee:	3718      	adds	r7, #24
 800baf0:	e740      	b.n	800b974 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xc0>
 800baf2:	4a25      	ldr	r2, [pc, #148]	; (800bb88 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800baf4:	e7b3      	b.n	800ba5e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1aa>
 800baf6:	2100      	movs	r1, #0
 800baf8:	e7ec      	b.n	800bad4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x220>
 800bafa:	fa0b f105 	lsl.w	r1, fp, r5
 800bafe:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800bb02:	4399      	bics	r1, r3
 800bb04:	bf0c      	ite	eq
 800bb06:	2301      	moveq	r3, #1
 800bb08:	2300      	movne	r3, #0
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	2a00      	cmp	r2, #0
 800bb0e:	bf0c      	ite	eq
 800bb10:	4642      	moveq	r2, r8
 800bb12:	4652      	movne	r2, sl
 800bb14:	a801      	add	r0, sp, #4
 800bb16:	f7ff fc2f 	bl	800b378 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800bb1a:	3501      	adds	r5, #1
 800bb1c:	3610      	adds	r6, #16
 800bb1e:	e746      	b.n	800b9ae <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xfa>
 800bb20:	08016875 	stmdaeq	r1, {r0, r2, r4, r5, r6, fp, sp, lr}
 800bb24:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800bb28:	080167ad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, sl, sp, lr}
 800bb2c:	080167b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, r9, sl, sp, lr}
 800bb30:	0801686a 	stmdaeq	r1, {r1, r3, r5, r6, fp, sp, lr}
 800bb34:	0801686e 	stmdaeq	r1, {r1, r2, r3, r5, r6, fp, sp, lr}
 800bb38:	08016754 	stmdaeq	r1, {r2, r4, r6, r8, r9, sl, sp, lr}
 800bb3c:	0801680a 	stmdaeq	r1, {r1, r3, fp, sp, lr}
 800bb40:	20000ce0 	andcs	r0, r0, r0, ror #25
 800bb44:	0801719c 	stmdaeq	r1, {r2, r3, r4, r7, r8, ip, sp, lr}
 800bb48:	08016744 	stmdaeq	r1, {r2, r6, r8, r9, sl, sp, lr}
 800bb4c:	0801724c 	stmdaeq	r1, {r2, r3, r6, r9, ip, sp, lr}
 800bb50:	08016737 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, r9, sl, sp, lr}
 800bb54:	0801676d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 800bb58:	08016730 	stmdaeq	r1, {r4, r5, r8, r9, sl, sp, lr}
 800bb5c:	0801670e 	stmdaeq	r1, {r1, r2, r3, r8, r9, sl, sp, lr}
 800bb60:	0801675f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}
 800bb64:	08015580 	stmdaeq	r1, {r7, r8, sl, ip, lr}
 800bb68:	08017236 	stmdaeq	r1, {r1, r2, r4, r5, r9, ip, sp, lr}
 800bb6c:	0801725e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, ip, sp, lr}
 800bb70:	08016719 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, sp, lr}
 800bb74:	08016720 	stmdaeq	r1, {r5, r8, r9, sl, sp, lr}
 800bb78:	08016728 	stmdaeq	r1, {r3, r5, r8, r9, sl, sp, lr}
 800bb7c:	0801672c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, sp, lr}
 800bb80:	080171dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, ip, sp, lr}
 800bb84:	080167c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, sp, lr}
 800bb88:	08016713 	stmdaeq	r1, {r0, r1, r4, r8, r9, sl, sp, lr}

0800bb8c <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800bb8c:	b513      	push	{r0, r1, r4, lr}
 800bb8e:	6804      	ldr	r4, [r0, #0]
 800bb90:	b914      	cbnz	r4, 800bb98 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800bb92:	601c      	str	r4, [r3, #0]
 800bb94:	b002      	add	sp, #8
 800bb96:	bd10      	pop	{r4, pc}
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	460a      	mov	r2, r1
 800bb9e:	2100      	movs	r1, #0
 800bba0:	f7ff fe88 	bl	800b8b4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800bba4:	e7f6      	b.n	800bb94 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800bba8 <ArtNetParams::Set(unsigned int)>:
 800bba8:	6843      	ldr	r3, [r0, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d078      	beq.n	800bca0 <ArtNetParams::Set(unsigned int)+0xf8>
 800bbae:	4a3d      	ldr	r2, [pc, #244]	; (800bca4 <ArtNetParams::Set(unsigned int)+0xfc>)
 800bbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb4:	079f      	lsls	r7, r3, #30
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4688      	mov	r8, r1
 800bbba:	6815      	ldr	r5, [r2, #0]
 800bbbc:	d504      	bpl.n	800bbc8 <ArtNetParams::Set(unsigned int)+0x20>
 800bbbe:	f100 0110 	add.w	r1, r0, #16
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	f7fe f862 	bl	8009c8c <ArtNetNode::SetShortName(char const*)>
 800bbc8:	6863      	ldr	r3, [r4, #4]
 800bbca:	07de      	lsls	r6, r3, #31
 800bbcc:	d504      	bpl.n	800bbd8 <ArtNetParams::Set(unsigned int)+0x30>
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800bbd4:	f7fe f882 	bl	8009cdc <ArtNetNode::SetLongName(char const*)>
 800bbd8:	6863      	ldr	r3, [r4, #4]
 800bbda:	0758      	lsls	r0, r3, #29
 800bbdc:	d504      	bpl.n	800bbe8 <ArtNetParams::Set(unsigned int)+0x40>
 800bbde:	2200      	movs	r2, #0
 800bbe0:	4628      	mov	r0, r5
 800bbe2:	7a21      	ldrb	r1, [r4, #8]
 800bbe4:	f7fe fb67 	bl	800a2b6 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800bbe8:	6863      	ldr	r3, [r4, #4]
 800bbea:	0719      	lsls	r1, r3, #28
 800bbec:	d504      	bpl.n	800bbf8 <ArtNetParams::Set(unsigned int)+0x50>
 800bbee:	2200      	movs	r2, #0
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	7a61      	ldrb	r1, [r4, #9]
 800bbf4:	f7fe fb42 	bl	800a27c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800bbf8:	2600      	movs	r6, #0
 800bbfa:	f44f 0a00 	mov.w	sl, #8388608	; 0x800000
 800bbfe:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800bca8 <ArtNetParams::Set(unsigned int)+0x100>
 800bc02:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800bc06:	f8d9 3000 	ldr.w	r3, [r9]
 800bc0a:	42b3      	cmp	r3, r6
 800bc0c:	d810      	bhi.n	800bc30 <ArtNetParams::Set(unsigned int)+0x88>
 800bc0e:	4628      	mov	r0, r5
 800bc10:	7aa1      	ldrb	r1, [r4, #10]
 800bc12:	f7fe fbb5 	bl	800a380 <ArtNetNode::SetFailSafe(artnetnode::FailSafe)>
 800bc16:	6863      	ldr	r3, [r4, #4]
 800bc18:	011a      	lsls	r2, r3, #4
 800bc1a:	bf44      	itt	mi
 800bc1c:	2201      	movmi	r2, #1
 800bc1e:	f885 2098 	strbmi.w	r2, [r5, #152]	; 0x98
 800bc22:	04db      	lsls	r3, r3, #19
 800bc24:	bf44      	itt	mi
 800bc26:	2301      	movmi	r3, #1
 800bc28:	f885 38e8 	strbmi.w	r3, [r5, #2280]	; 0x8e8
 800bc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc30:	eb16 0108 	adds.w	r1, r6, r8
 800bc34:	d1eb      	bne.n	800bc0e <ArtNetParams::Set(unsigned int)+0x66>
 800bc36:	6862      	ldr	r2, [r4, #4]
 800bc38:	fa0a f306 	lsl.w	r3, sl, r6
 800bc3c:	4393      	bics	r3, r2
 800bc3e:	d103      	bne.n	800bc48 <ArtNetParams::Set(unsigned int)+0xa0>
 800bc40:	4628      	mov	r0, r5
 800bc42:	797a      	ldrb	r2, [r7, #5]
 800bc44:	f7fe fb54 	bl	800a2f0 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800bc48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc4c:	6862      	ldr	r2, [r4, #4]
 800bc4e:	40b3      	lsls	r3, r6
 800bc50:	4393      	bics	r3, r2
 800bc52:	d104      	bne.n	800bc5e <ArtNetParams::Set(unsigned int)+0xb6>
 800bc54:	2100      	movs	r1, #0
 800bc56:	4628      	mov	r0, r5
 800bc58:	783a      	ldrb	r2, [r7, #0]
 800bc5a:	f7fe fb6d 	bl	800a338 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800bc64:	40b3      	lsls	r3, r6
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	4393      	bics	r3, r2
 800bc6a:	d109      	bne.n	800bc80 <ArtNetParams::Set(unsigned int)+0xd8>
 800bc6c:	f106 031c 	add.w	r3, r6, #28
 800bc70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bc74:	2100      	movs	r1, #0
 800bc76:	4628      	mov	r0, r5
 800bc78:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800bc7c:	f7fe fe7a 	bl	800a974 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800bc80:	2201      	movs	r2, #1
 800bc82:	f106 0308 	add.w	r3, r6, #8
 800bc86:	89a1      	ldrh	r1, [r4, #12]
 800bc88:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	438b      	bics	r3, r1
 800bc90:	d103      	bne.n	800bc9a <ArtNetParams::Set(unsigned int)+0xf2>
 800bc92:	2100      	movs	r1, #0
 800bc94:	4628      	mov	r0, r5
 800bc96:	f7ff f91d 	bl	800aed4 <ArtNetNode::SetRmd(unsigned int, bool)>
 800bc9a:	3601      	adds	r6, #1
 800bc9c:	3701      	adds	r7, #1
 800bc9e:	e7b2      	b.n	800bc06 <ArtNetParams::Set(unsigned int)+0x5e>
 800bca0:	4770      	bx	lr
 800bca2:	bf00      	nop
 800bca4:	20000cd0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800bca8:	20000ce0 	andcs	r0, r0, r0, ror #25

0800bcac <ArtNetParams::Dump()>:
 800bcac:	4770      	bx	lr
	...

0800bcb0 <ArtNetNode::HandleTrigger()>:
 800bcb0:	f890 20aa 	ldrb.w	r2, [r0, #170]	; 0xaa
 800bcb4:	4601      	mov	r1, r0
 800bcb6:	2aff      	cmp	r2, #255	; 0xff
 800bcb8:	d103      	bne.n	800bcc2 <ArtNetNode::HandleTrigger()+0x12>
 800bcba:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 800bcbe:	2bff      	cmp	r3, #255	; 0xff
 800bcc0:	d008      	beq.n	800bcd4 <ArtNetNode::HandleTrigger()+0x24>
 800bcc2:	4b07      	ldr	r3, [pc, #28]	; (800bce0 <ArtNetNode::HandleTrigger()+0x30>)
 800bcc4:	7818      	ldrb	r0, [r3, #0]
 800bcc6:	4290      	cmp	r0, r2
 800bcc8:	d109      	bne.n	800bcde <ArtNetNode::HandleTrigger()+0x2e>
 800bcca:	f891 20ab 	ldrb.w	r2, [r1, #171]	; 0xab
 800bcce:	785b      	ldrb	r3, [r3, #1]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d104      	bne.n	800bcde <ArtNetNode::HandleTrigger()+0x2e>
 800bcd4:	6948      	ldr	r0, [r1, #20]
 800bcd6:	31ac      	adds	r1, #172	; 0xac
 800bcd8:	6803      	ldr	r3, [r0, #0]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	4718      	bx	r3
 800bcde:	4770      	bx	lr
 800bce0:	08016880 	stmdaeq	r1, {r7, fp, sp, lr}

0800bce4 <e131::universe_to_multicast_ip(unsigned short)>:
 800bce4:	b513      	push	{r0, r1, r4, lr}
 800bce6:	4604      	mov	r4, r0
 800bce8:	a901      	add	r1, sp, #4
 800bcea:	4806      	ldr	r0, [pc, #24]	; (800bd04 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800bcec:	f006 ff02 	bl	8012af4 <inet_aton>
 800bcf0:	9801      	ldr	r0, [sp, #4]
 800bcf2:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800bcf6:	0224      	lsls	r4, r4, #8
 800bcf8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800bcfc:	4320      	orrs	r0, r4
 800bcfe:	b002      	add	sp, #8
 800bd00:	bd10      	pop	{r4, pc}
 800bd02:	bf00      	nop
 800bd04:	08016886 	stmdaeq	r1, {r1, r2, r7, fp, sp, lr}

0800bd08 <memset.constprop.0.isra.0>:
 800bd08:	2300      	movs	r3, #0
 800bd0a:	4401      	add	r1, r0
 800bd0c:	4288      	cmp	r0, r1
 800bd0e:	d100      	bne.n	800bd12 <memset.constprop.0.isra.0+0xa>
 800bd10:	4770      	bx	lr
 800bd12:	f800 3b01 	strb.w	r3, [r0], #1
 800bd16:	e7f9      	b.n	800bd0c <memset.constprop.0.isra.0+0x4>

0800bd18 <memcpy.isra.0>:
 800bd18:	3801      	subs	r0, #1
 800bd1a:	440a      	add	r2, r1
 800bd1c:	4291      	cmp	r1, r2
 800bd1e:	d100      	bne.n	800bd22 <memcpy.isra.0+0xa>
 800bd20:	4770      	bx	lr
 800bd22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd26:	f800 3f01 	strb.w	r3, [r0, #1]!
 800bd2a:	e7f7      	b.n	800bd1c <memcpy.isra.0+0x4>

0800bd2c <E131Bridge::E131Bridge()>:
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd32:	b530      	push	{r4, r5, lr}
 800bd34:	e9c0 2300 	strd	r2, r3, [r0]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd40:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800bd44:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800bd48:	6743      	str	r3, [r0, #116]	; 0x74
 800bd4a:	4b22      	ldr	r3, [pc, #136]	; (800bdd4 <E131Bridge::E131Bridge()+0xa8>)
 800bd4c:	b093      	sub	sp, #76	; 0x4c
 800bd4e:	6018      	str	r0, [r3, #0]
 800bd50:	7202      	strb	r2, [r0, #8]
 800bd52:	2144      	movs	r1, #68	; 0x44
 800bd54:	f200 5014 	addw	r0, r0, #1300	; 0x514
 800bd58:	f7ff ffd6 	bl	800bd08 <memset.constprop.0.isra.0>
 800bd5c:	210c      	movs	r1, #12
 800bd5e:	f504 60ab 	add.w	r0, r4, #1368	; 0x558
 800bd62:	f7ff ffd1 	bl	800bd08 <memset.constprop.0.isra.0>
 800bd66:	2364      	movs	r3, #100	; 0x64
 800bd68:	4d1b      	ldr	r5, [pc, #108]	; (800bdd8 <E131Bridge::E131Bridge()+0xac>)
 800bd6a:	2120      	movs	r1, #32
 800bd6c:	f884 3561 	strb.w	r3, [r4, #1377]	; 0x561
 800bd70:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800bd74:	f7ff ffc8 	bl	800bd08 <memset.constprop.0.isra.0>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	f884 250c 	strb.w	r2, [r4, #1292]	; 0x50c
 800bd7e:	4a17      	ldr	r2, [pc, #92]	; (800bddc <E131Bridge::E131Bridge()+0xb0>)
 800bd80:	2140      	movs	r1, #64	; 0x40
 800bd82:	9200      	str	r2, [sp, #0]
 800bd84:	3320      	adds	r3, #32
 800bd86:	4a16      	ldr	r2, [pc, #88]	; (800bde0 <E131Bridge::E131Bridge()+0xb4>)
 800bd88:	a802      	add	r0, sp, #8
 800bd8a:	f007 f9c7 	bl	801311c <snprintf>
 800bd8e:	233f      	movs	r3, #63	; 0x3f
 800bd90:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800bd94:	a902      	add	r1, sp, #8
 800bd96:	f811 0b01 	ldrb.w	r0, [r1], #1
 800bd9a:	b928      	cbnz	r0, 800bda8 <E131Bridge::E131Bridge()+0x7c>
 800bd9c:	4413      	add	r3, r2
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d006      	beq.n	800bdb0 <E131Bridge::E131Bridge()+0x84>
 800bda2:	f802 0b01 	strb.w	r0, [r2], #1
 800bda6:	e7fa      	b.n	800bd9e <E131Bridge::E131Bridge()+0x72>
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	f802 0b01 	strb.w	r0, [r2], #1
 800bdae:	d1f2      	bne.n	800bd96 <E131Bridge::E131Bridge()+0x6a>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800bdb6:	f884 3073 	strb.w	r3, [r4, #115]	; 0x73
 800bdba:	6828      	ldr	r0, [r5, #0]
 800bdbc:	f004 fb52 	bl	8010464 <Network::Begin(unsigned short)>
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	4b08      	ldr	r3, [pc, #32]	; (800bde4 <E131Bridge::E131Bridge()+0xb8>)
 800bdc4:	f841 0b24 	str.w	r0, [r1], #36
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	f006 fe31 	bl	8012a30 <Hardware::GetUuid(unsigned char*)>
 800bdce:	4620      	mov	r0, r4
 800bdd0:	b013      	add	sp, #76	; 0x4c
 800bdd2:	bd30      	pop	{r4, r5, pc}
 800bdd4:	20000ce4 	andcs	r0, r0, r4, ror #25
 800bdd8:	20009b68 	andcs	r9, r0, r8, ror #22
 800bddc:	08015b3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, fp, ip, lr}
 800bde0:	08016892 	stmdaeq	r1, {r1, r4, r7, fp, sp, lr}
 800bde4:	2000a230 	andcs	sl, r0, r0, lsr r2

0800bde8 <E131Bridge::~E131Bridge()>:
 800bde8:	4770      	bx	lr
	...

0800bdec <E131Bridge::Start()>:
 800bdec:	6943      	ldr	r3, [r0, #20]
 800bdee:	b513      	push	{r0, r1, r4, lr}
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	b31b      	cbz	r3, 800be3c <E131Bridge::Start()+0x50>
 800bdf4:	6983      	ldr	r3, [r0, #24]
 800bdf6:	b9cb      	cbnz	r3, 800be2c <E131Bridge::Start()+0x40>
 800bdf8:	a901      	add	r1, sp, #4
 800bdfa:	4814      	ldr	r0, [pc, #80]	; (800be4c <E131Bridge::Start()+0x60>)
 800bdfc:	f006 fe7a 	bl	8012af4 <inet_aton>
 800be00:	9b01      	ldr	r3, [sp, #4]
 800be02:	f240 207e 	movw	r0, #638	; 0x27e
 800be06:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800be0a:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800be0e:	6223      	str	r3, [r4, #32]
 800be10:	f006 fe6c 	bl	8012aec <operator new(unsigned int)>
 800be14:	61a0      	str	r0, [r4, #24]
 800be16:	4620      	mov	r0, r4
 800be18:	f000 fc7c 	bl	800c714 <E131Bridge::FillDataPacket()>
 800be1c:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800be20:	f006 fe64 	bl	8012aec <operator new(unsigned int)>
 800be24:	61e0      	str	r0, [r4, #28]
 800be26:	4620      	mov	r0, r4
 800be28:	f000 fbd4 	bl	800c5d4 <E131Bridge::FillDiscoveryPacket()>
 800be2c:	f894 355a 	ldrb.w	r3, [r4, #1370]	; 0x55a
 800be30:	b123      	cbz	r3, 800be3c <E131Bridge::Start()+0x50>
 800be32:	6960      	ldr	r0, [r4, #20]
 800be34:	2100      	movs	r1, #0
 800be36:	6803      	ldr	r3, [r0, #0]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	4798      	blx	r3
 800be3c:	2102      	movs	r1, #2
 800be3e:	4b04      	ldr	r3, [pc, #16]	; (800be50 <E131Bridge::Start()+0x64>)
 800be40:	6818      	ldr	r0, [r3, #0]
 800be42:	b002      	add	sp, #8
 800be44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be48:	f006 bd6e 	b.w	8012928 <LedBlink::SetMode(ledblink::Mode)>
 800be4c:	08016886 	stmdaeq	r1, {r1, r2, r7, fp, sp, lr}
 800be50:	2000a22c 	andcs	sl, r0, ip, lsr #4

0800be54 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4603      	mov	r3, r0
 800be58:	4610      	mov	r0, r2
 800be5a:	b119      	cbz	r1, 800be64 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x10>
 800be5c:	f8b3 2514 	ldrh.w	r2, [r3, #1300]	; 0x514
 800be60:	4282      	cmp	r2, r0
 800be62:	d00b      	beq.n	800be7c <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x28>
 800be64:	681d      	ldr	r5, [r3, #0]
 800be66:	4b06      	ldr	r3, [pc, #24]	; (800be80 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x2c>)
 800be68:	681c      	ldr	r4, [r3, #0]
 800be6a:	f7ff ff3b 	bl	800bce4 <e131::universe_to_multicast_ip(unsigned short)>
 800be6e:	4629      	mov	r1, r5
 800be70:	4602      	mov	r2, r0
 800be72:	4620      	mov	r0, r4
 800be74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be78:	f004 bb08 	b.w	801048c <Network::LeaveGroup(int, unsigned int)>
 800be7c:	bd38      	pop	{r3, r4, r5, pc}
 800be7e:	bf00      	nop
 800be80:	20009b68 	andcs	r9, r0, r8, ror #22

0800be84 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800be84:	b570      	push	{r4, r5, r6, lr}
 800be86:	4604      	mov	r4, r0
 800be88:	461d      	mov	r5, r3
 800be8a:	b1c1      	cbz	r1, 800bebe <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800be8c:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800be90:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800be94:	b12a      	cbz	r2, 800bea2 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x1e>
 800be96:	42aa      	cmp	r2, r5
 800be98:	d017      	beq.n	800beca <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800be9a:	2101      	movs	r1, #1
 800be9c:	4620      	mov	r0, r4
 800be9e:	f7ff ffd9 	bl	800be54 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800bea2:	4b0a      	ldr	r3, [pc, #40]	; (800becc <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>)
 800bea4:	8035      	strh	r5, [r6, #0]
 800bea6:	4628      	mov	r0, r5
 800bea8:	6826      	ldr	r6, [r4, #0]
 800beaa:	681c      	ldr	r4, [r3, #0]
 800beac:	f7ff ff1a 	bl	800bce4 <e131::universe_to_multicast_ip(unsigned short)>
 800beb0:	4631      	mov	r1, r6
 800beb2:	4602      	mov	r2, r0
 800beb4:	4620      	mov	r0, r4
 800beb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800beba:	f004 bae4 	b.w	8010486 <Network::JoinGroup(int, unsigned int)>
 800bebe:	b122      	cbz	r2, 800beca <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x46>
 800bec0:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800bec4:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800bec8:	e7e4      	b.n	800be94 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800beca:	bd70      	pop	{r4, r5, r6, pc}
 800becc:	20009b68 	andcs	r9, r0, r8, ror #22

0800bed0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800bed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed4:	4604      	mov	r4, r0
 800bed6:	460d      	mov	r5, r1
 800bed8:	461e      	mov	r6, r3
 800beda:	b9ca      	cbnz	r2, 800bf10 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x40>
 800bedc:	bbb1      	cbnz	r1, 800bf4c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x7c>
 800bede:	f890 355a 	ldrb.w	r3, [r0, #1370]	; 0x55a
 800bee2:	b12b      	cbz	r3, 800bef0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x20>
 800bee4:	f8b0 3558 	ldrh.w	r3, [r0, #1368]	; 0x558
 800bee8:	42b3      	cmp	r3, r6
 800beea:	d109      	bne.n	800bf00 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x30>
 800beec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef0:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800bef4:	3301      	adds	r3, #1
 800bef6:	f880 350a 	strb.w	r3, [r0, #1290]	; 0x50a
 800befa:	2301      	movs	r3, #1
 800befc:	f880 355a 	strb.w	r3, [r0, #1370]	; 0x55a
 800bf00:	4630      	mov	r0, r6
 800bf02:	f8a4 6558 	strh.w	r6, [r4, #1368]	; 0x558
 800bf06:	f7ff feed 	bl	800bce4 <e131::universe_to_multicast_ip(unsigned short)>
 800bf0a:	f8c4 055c 	str.w	r0, [r4, #1372]	; 0x55c
 800bf0e:	e7ed      	b.n	800beec <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800bf10:	2a02      	cmp	r2, #2
 800bf12:	d11b      	bne.n	800bf4c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x7c>
 800bf14:	2900      	cmp	r1, #0
 800bf16:	d1e9      	bne.n	800beec <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800bf18:	f890 3516 	ldrb.w	r3, [r0, #1302]	; 0x516
 800bf1c:	b14b      	cbz	r3, 800bf32 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x62>
 800bf1e:	f884 1516 	strb.w	r1, [r4, #1302]	; 0x516
 800bf22:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800bf26:	4632      	mov	r2, r6
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800bf2e:	f7ff ff91 	bl	800be54 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800bf32:	f894 355a 	ldrb.w	r3, [r4, #1370]	; 0x55a
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d0d8      	beq.n	800beec <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f884 355a 	strb.w	r3, [r4, #1370]	; 0x55a
 800bf40:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800bf44:	3b01      	subs	r3, #1
 800bf46:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800bf4a:	e7cf      	b.n	800beec <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800bf4c:	2344      	movs	r3, #68	; 0x44
 800bf4e:	fb03 4305 	mla	r3, r3, r5, r4
 800bf52:	f893 2516 	ldrb.w	r2, [r3, #1302]	; 0x516
 800bf56:	b1d2      	cbz	r2, 800bf8e <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xbe>
 800bf58:	f8b3 3514 	ldrh.w	r3, [r3, #1300]	; 0x514
 800bf5c:	42b3      	cmp	r3, r6
 800bf5e:	d0c5      	beq.n	800beec <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800bf60:	4632      	mov	r2, r6
 800bf62:	4629      	mov	r1, r5
 800bf64:	4620      	mov	r0, r4
 800bf66:	f7ff ff75 	bl	800be54 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800bf6a:	4b0d      	ldr	r3, [pc, #52]	; (800bfa0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xd0>)
 800bf6c:	4630      	mov	r0, r6
 800bf6e:	681f      	ldr	r7, [r3, #0]
 800bf70:	f8d4 8000 	ldr.w	r8, [r4]
 800bf74:	f7ff feb6 	bl	800bce4 <e131::universe_to_multicast_ip(unsigned short)>
 800bf78:	4641      	mov	r1, r8
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	4638      	mov	r0, r7
 800bf7e:	f004 fa82 	bl	8010486 <Network::JoinGroup(int, unsigned int)>
 800bf82:	2344      	movs	r3, #68	; 0x44
 800bf84:	fb03 4505 	mla	r5, r3, r5, r4
 800bf88:	f8a5 6514 	strh.w	r6, [r5, #1300]	; 0x514
 800bf8c:	e7ae      	b.n	800beec <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x1c>
 800bf8e:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800bf92:	3201      	adds	r2, #1
 800bf94:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
 800bf9e:	e7e4      	b.n	800bf6a <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x9a>
 800bfa0:	20009b68 	andcs	r9, r0, r8, ror #22

0800bfa4 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800bfa4:	b510      	push	{r4, lr}
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	b933      	cbnz	r3, 800bfba <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x16>
 800bfac:	b921      	cbnz	r1, 800bfb8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x14>
 800bfae:	f8b4 3558 	ldrh.w	r3, [r4, #1368]	; 0x558
 800bfb2:	f894 055a 	ldrb.w	r0, [r4, #1370]	; 0x55a
 800bfb6:	8013      	strh	r3, [r2, #0]
 800bfb8:	bd10      	pop	{r4, pc}
 800bfba:	2344      	movs	r3, #68	; 0x44
 800bfbc:	fb03 4401 	mla	r4, r3, r1, r4
 800bfc0:	f8b4 3514 	ldrh.w	r3, [r4, #1300]	; 0x514
 800bfc4:	f894 0516 	ldrb.w	r0, [r4, #1302]	; 0x516
 800bfc8:	8013      	strh	r3, [r2, #0]
 800bfca:	e7f5      	b.n	800bfb8 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x14>

0800bfcc <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800bfcc:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800bfd0:	b923      	cbnz	r3, 800bfdc <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800bfd8:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800bfdc:	2344      	movs	r3, #68	; 0x44
 800bfde:	fb03 0001 	mla	r0, r3, r1, r0
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	f880 3555 	strb.w	r3, [r0, #1365]	; 0x555
 800bfe8:	4770      	bx	lr

0800bfea <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800bfea:	4602      	mov	r2, r0
 800bfec:	2044      	movs	r0, #68	; 0x44
 800bfee:	4348      	muls	r0, r1
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	1815      	adds	r5, r2, r0
 800bff4:	460c      	mov	r4, r1
 800bff6:	68d3      	ldr	r3, [r2, #12]
 800bff8:	f8d5 1518 	ldr.w	r1, [r5, #1304]	; 0x518
 800bffc:	1a5b      	subs	r3, r3, r1
 800bffe:	f242 7110 	movw	r1, #10000	; 0x2710
 800c002:	428b      	cmp	r3, r1
 800c004:	d90a      	bls.n	800c01c <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800c006:	2600      	movs	r6, #0
 800c008:	f500 60a4 	add.w	r0, r0, #1312	; 0x520
 800c00c:	2110      	movs	r1, #16
 800c00e:	f8c5 651c 	str.w	r6, [r5, #1308]	; 0x51c
 800c012:	4410      	add	r0, r2
 800c014:	f7ff fe78 	bl	800bd08 <memset.constprop.0.isra.0>
 800c018:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800c01c:	2344      	movs	r3, #68	; 0x44
 800c01e:	435c      	muls	r4, r3
 800c020:	1915      	adds	r5, r2, r4
 800c022:	f8d5 1534 	ldr.w	r1, [r5, #1332]	; 0x534
 800c026:	68d3      	ldr	r3, [r2, #12]
 800c028:	1a5b      	subs	r3, r3, r1
 800c02a:	f242 7110 	movw	r1, #10000	; 0x2710
 800c02e:	428b      	cmp	r3, r1
 800c030:	d90a      	bls.n	800c048 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800c032:	2600      	movs	r6, #0
 800c034:	f204 543c 	addw	r4, r4, #1340	; 0x53c
 800c038:	2110      	movs	r1, #16
 800c03a:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
 800c03e:	1910      	adds	r0, r2, r4
 800c040:	f7ff fe62 	bl	800bd08 <memset.constprop.0.isra.0>
 800c044:	f885 6555 	strb.w	r6, [r5, #1365]	; 0x555
 800c048:	f892 3555 	ldrb.w	r3, [r2, #1365]	; 0x555
 800c04c:	b923      	cbnz	r3, 800c058 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x6e>
 800c04e:	2101      	movs	r1, #1
 800c050:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800c054:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800c058:	bd70      	pop	{r4, r5, r6, pc}

0800c05a <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800c05a:	2244      	movs	r2, #68	; 0x44
 800c05c:	fb02 0101 	mla	r1, r2, r1, r0
 800c060:	68c3      	ldr	r3, [r0, #12]
 800c062:	b510      	push	{r4, lr}
 800c064:	f8d1 2534 	ldr.w	r2, [r1, #1332]	; 0x534
 800c068:	f8d1 451c 	ldr.w	r4, [r1, #1308]	; 0x51c
 800c06c:	f8d1 0538 	ldr.w	r0, [r1, #1336]	; 0x538
 800c070:	1a9a      	subs	r2, r3, r2
 800c072:	b184      	cbz	r4, 800c096 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800c074:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800c078:	1a5b      	subs	r3, r3, r1
 800c07a:	b128      	cbz	r0, 800c088 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800c07c:	f242 700f 	movw	r0, #9999	; 0x270f
 800c080:	4283      	cmp	r3, r0
 800c082:	d90d      	bls.n	800c0a0 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800c084:	4282      	cmp	r2, r0
 800c086:	e002      	b.n	800c08e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800c088:	f242 7010 	movw	r0, #10000	; 0x2710
 800c08c:	4283      	cmp	r3, r0
 800c08e:	bf94      	ite	ls
 800c090:	2000      	movls	r0, #0
 800c092:	2001      	movhi	r0, #1
 800c094:	bd10      	pop	{r4, pc}
 800c096:	2800      	cmp	r0, #0
 800c098:	d0fc      	beq.n	800c094 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800c09a:	f242 7010 	movw	r0, #10000	; 0x2710
 800c09e:	e7f1      	b.n	800c084 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	e7f7      	b.n	800c094 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800c0a4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800c0a4:	684a      	ldr	r2, [r1, #4]
 800c0a6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800c0a8:	b510      	push	{r4, lr}
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d10d      	bne.n	800c0ca <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800c0ae:	f100 0391 	add.w	r3, r0, #145	; 0x91
 800c0b2:	3107      	adds	r1, #7
 800c0b4:	30a1      	adds	r0, #161	; 0xa1
 800c0b6:	4283      	cmp	r3, r0
 800c0b8:	d101      	bne.n	800c0be <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x1a>
 800c0ba:	2001      	movs	r0, #1
 800c0bc:	bd10      	pop	{r4, pc}
 800c0be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c0c2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800c0c6:	4294      	cmp	r4, r2
 800c0c8:	d0f5      	beq.n	800c0b6 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	e7f6      	b.n	800c0bc <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x18>
	...

0800c0d0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800c0d0:	b538      	push	{r3, r4, r5, lr}
 800c0d2:	4604      	mov	r4, r0
 800c0d4:	2001      	movs	r0, #1
 800c0d6:	460d      	mov	r5, r1
 800c0d8:	f894 3556 	ldrb.w	r3, [r4, #1366]	; 0x556
 800c0dc:	f884 04f8 	strb.w	r0, [r4, #1272]	; 0x4f8
 800c0e0:	2900      	cmp	r1, #0
 800c0e2:	d052      	beq.n	800c18a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800c0e4:	2a00      	cmp	r2, #0
 800c0e6:	d037      	beq.n	800c158 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x88>
 800c0e8:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
 800c0ec:	f884 050c 	strb.w	r0, [r4, #1292]	; 0x50c
 800c0f0:	b1e3      	cbz	r3, 800c12c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c0f2:	2500      	movs	r5, #0
 800c0f4:	2110      	movs	r1, #16
 800c0f6:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800c0fa:	f8c4 551c 	str.w	r5, [r4, #1308]	; 0x51c
 800c0fe:	f7ff fe03 	bl	800bd08 <memset.constprop.0.isra.0>
 800c102:	2110      	movs	r1, #16
 800c104:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 800c108:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
 800c10c:	f7ff fdfc 	bl	800bd08 <memset.constprop.0.isra.0>
 800c110:	f7fe faae 	bl	800a670 <lightset::Data::Get()>
 800c114:	f8c0 5600 	str.w	r5, [r0, #1536]	; 0x600
 800c118:	f8a4 5554 	strh.w	r5, [r4, #1364]	; 0x554
 800c11c:	f8d4 1510 	ldr.w	r1, [r4, #1296]	; 0x510
 800c120:	f884 5556 	strb.w	r5, [r4, #1366]	; 0x556
 800c124:	2901      	cmp	r1, #1
 800c126:	d00d      	beq.n	800c144 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x74>
 800c128:	2902      	cmp	r1, #2
 800c12a:	d010      	beq.n	800c14e <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x7e>
 800c12c:	4b20      	ldr	r3, [pc, #128]	; (800c1b0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xe0>)
 800c12e:	2102      	movs	r1, #2
 800c130:	6818      	ldr	r0, [r3, #0]
 800c132:	f006 fbf9 	bl	8012928 <LedBlink::SetMode(ledblink::Mode)>
 800c136:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c13a:	f023 0302 	bic.w	r3, r3, #2
 800c13e:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	6860      	ldr	r0, [r4, #4]
 800c146:	6803      	ldr	r3, [r0, #0]
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	4798      	blx	r3
 800c14c:	e7ee      	b.n	800c12c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c14e:	6860      	ldr	r0, [r4, #4]
 800c150:	6803      	ldr	r3, [r0, #0]
 800c152:	699b      	ldr	r3, [r3, #24]
 800c154:	4798      	blx	r3
 800c156:	e7e9      	b.n	800c12c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d0e7      	beq.n	800c12c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c15c:	f8d4 351c 	ldr.w	r3, [r4, #1308]	; 0x51c
 800c160:	b143      	cbz	r3, 800c174 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xa4>
 800c162:	2110      	movs	r1, #16
 800c164:	f8c4 251c 	str.w	r2, [r4, #1308]	; 0x51c
 800c168:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800c16c:	f7ff fdcc 	bl	800bd08 <memset.constprop.0.isra.0>
 800c170:	f884 2555 	strb.w	r2, [r4, #1365]	; 0x555
 800c174:	f894 54f5 	ldrb.w	r5, [r4, #1269]	; 0x4f5
 800c178:	2d00      	cmp	r5, #0
 800c17a:	d1d7      	bne.n	800c12c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c17c:	f7fe fa78 	bl	800a670 <lightset::Data::Get()>
 800c180:	f8c0 5600 	str.w	r5, [r0, #1536]	; 0x600
 800c184:	f884 5554 	strb.w	r5, [r4, #1364]	; 0x554
 800c188:	e7c8      	b.n	800c11c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x4c>
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d0ce      	beq.n	800c12c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x5c>
 800c18e:	2a00      	cmp	r2, #0
 800c190:	d0f0      	beq.n	800c174 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xa4>
 800c192:	f8d4 3538 	ldr.w	r3, [r4, #1336]	; 0x538
 800c196:	2b00      	cmp	r3, #0
 800c198:	d0ec      	beq.n	800c174 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xa4>
 800c19a:	2110      	movs	r1, #16
 800c19c:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
 800c1a0:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 800c1a4:	f7ff fdb0 	bl	800bd08 <memset.constprop.0.isra.0>
 800c1a8:	f884 5555 	strb.w	r5, [r4, #1365]	; 0x555
 800c1ac:	e7e2      	b.n	800c174 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xa4>
 800c1ae:	bf00      	nop
 800c1b0:	2000a22c 	andcs	sl, r0, ip, lsr #4

0800c1b4 <E131Bridge::HandleDmx()>:
 800c1b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b8:	f8b0 50f7 	ldrh.w	r5, [r0, #247]	; 0xf7
 800c1bc:	f890 3516 	ldrb.w	r3, [r0, #1302]	; 0x516
 800c1c0:	ba6d      	rev16	r5, r5
 800c1c2:	b2ad      	uxth	r5, r5
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	f100 08fa 	add.w	r8, r0, #250	; 0xfa
 800c1ca:	3d01      	subs	r5, #1
 800c1cc:	b343      	cbz	r3, 800c220 <E131Bridge::HandleDmx()+0x6c>
 800c1ce:	f8b0 3514 	ldrh.w	r3, [r0, #1300]	; 0x514
 800c1d2:	f8b0 20ed 	ldrh.w	r2, [r0, #237]	; 0xed
 800c1d6:	ba5b      	rev16	r3, r3
 800c1d8:	b29b      	uxth	r3, r3
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d120      	bne.n	800c220 <E131Bridge::HandleDmx()+0x6c>
 800c1de:	f500 61a3 	add.w	r1, r0, #1304	; 0x518
 800c1e2:	f8d0 a51c 	ldr.w	sl, [r0, #1308]	; 0x51c
 800c1e6:	f8d0 9538 	ldr.w	r9, [r0, #1336]	; 0x538
 800c1ea:	f7ff ff5b 	bl	800c0a4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800c1ee:	f204 5134 	addw	r1, r4, #1332	; 0x534
 800c1f2:	4607      	mov	r7, r0
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f7ff ff55 	bl	800c0a4 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	b197      	cbz	r7, 800c224 <E131Bridge::HandleDmx()+0x70>
 800c1fe:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c202:	f894 2530 	ldrb.w	r2, [r4, #1328]	; 0x530
 800c206:	f884 3530 	strb.w	r3, [r4, #1328]	; 0x530
 800c20a:	3313      	adds	r3, #19
 800c20c:	1a9b      	subs	r3, r3, r2
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	2b13      	cmp	r3, #19
 800c212:	d905      	bls.n	800c220 <E131Bridge::HandleDmx()+0x6c>
 800c214:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800c218:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	da0a      	bge.n	800c236 <E131Bridge::HandleDmx()+0x82>
 800c220:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c224:	2800      	cmp	r0, #0
 800c226:	d0f5      	beq.n	800c214 <E131Bridge::HandleDmx()+0x60>
 800c228:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c22c:	f894 254c 	ldrb.w	r2, [r4, #1356]	; 0x54c
 800c230:	f884 354c 	strb.w	r3, [r4, #1356]	; 0x54c
 800c234:	e7e9      	b.n	800c20a <E131Bridge::HandleDmx()+0x56>
 800c236:	065a      	lsls	r2, r3, #25
 800c238:	d509      	bpl.n	800c24e <E131Bridge::HandleDmx()+0x9a>
 800c23a:	b90f      	cbnz	r7, 800c240 <E131Bridge::HandleDmx()+0x8c>
 800c23c:	2e00      	cmp	r6, #0
 800c23e:	d0ef      	beq.n	800c220 <E131Bridge::HandleDmx()+0x6c>
 800c240:	4632      	mov	r2, r6
 800c242:	4639      	mov	r1, r7
 800c244:	4620      	mov	r0, r4
 800c246:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24a:	f7ff bf41 	b.w	800c0d0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800c24e:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800c252:	b12b      	cbz	r3, 800c260 <E131Bridge::HandleDmx()+0xac>
 800c254:	f894 14f9 	ldrb.w	r1, [r4, #1273]	; 0x4f9
 800c258:	b911      	cbnz	r1, 800c260 <E131Bridge::HandleDmx()+0xac>
 800c25a:	4620      	mov	r0, r4
 800c25c:	f7ff fec5 	bl	800bfea <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800c260:	f894 b0e8 	ldrb.w	fp, [r4, #232]	; 0xe8
 800c264:	f894 350c 	ldrb.w	r3, [r4, #1292]	; 0x50c
 800c268:	459b      	cmp	fp, r3
 800c26a:	d258      	bcs.n	800c31e <E131Bridge::HandleDmx()+0x16a>
 800c26c:	2100      	movs	r1, #0
 800c26e:	4620      	mov	r0, r4
 800c270:	f7ff fef3 	bl	800c05a <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800c274:	2800      	cmp	r0, #0
 800c276:	d0d3      	beq.n	800c220 <E131Bridge::HandleDmx()+0x6c>
 800c278:	f884 b50c 	strb.w	fp, [r4, #1292]	; 0x50c
 800c27c:	f1ba 0f00 	cmp.w	sl, #0
 800c280:	d156      	bne.n	800c330 <E131Bridge::HandleDmx()+0x17c>
 800c282:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c286:	f1b9 0f00 	cmp.w	r9, #0
 800c28a:	d15c      	bne.n	800c346 <E131Bridge::HandleDmx()+0x192>
 800c28c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800c28e:	f884 3530 	strb.w	r3, [r4, #1328]	; 0x530
 800c292:	f8c4 251c 	str.w	r2, [r4, #1308]	; 0x51c
 800c296:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c29a:	2210      	movs	r2, #16
 800c29c:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800c2a0:	f7ff fd3a 	bl	800bd18 <memcpy.isra.0>
 800c2a4:	68e3      	ldr	r3, [r4, #12]
 800c2a6:	462a      	mov	r2, r5
 800c2a8:	4641      	mov	r1, r8
 800c2aa:	4648      	mov	r0, r9
 800c2ac:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
 800c2b0:	f7fe f9ea 	bl	800a688 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800c2b4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800c2b8:	069b      	lsls	r3, r3, #26
 800c2ba:	f100 80a2 	bmi.w	800c402 <E131Bridge::HandleDmx()+0x24e>
 800c2be:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	2a00      	cmp	r2, #0
 800c2c6:	f000 809f 	beq.w	800c408 <E131Bridge::HandleDmx()+0x254>
 800c2ca:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800c2ce:	2a00      	cmp	r2, #0
 800c2d0:	f040 809a 	bne.w	800c408 <E131Bridge::HandleDmx()+0x254>
 800c2d4:	ba5b      	rev16	r3, r3
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	2f00      	cmp	r7, #0
 800c2da:	f040 808f 	bne.w	800c3fc <E131Bridge::HandleDmx()+0x248>
 800c2de:	2e00      	cmp	r6, #0
 800c2e0:	f040 808c 	bne.w	800c3fc <E131Bridge::HandleDmx()+0x248>
 800c2e4:	f8d4 2538 	ldr.w	r2, [r4, #1336]	; 0x538
 800c2e8:	f8d4 151c 	ldr.w	r1, [r4, #1308]	; 0x51c
 800c2ec:	3a00      	subs	r2, #0
 800c2ee:	bf18      	it	ne
 800c2f0:	2201      	movne	r2, #1
 800c2f2:	3900      	subs	r1, #0
 800c2f4:	bf18      	it	ne
 800c2f6:	2101      	movne	r1, #1
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f7ff fdc3 	bl	800be84 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800c2fe:	f240 1301 	movw	r3, #257	; 0x101
 800c302:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800c306:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f040 8081 	bne.w	800c412 <E131Bridge::HandleDmx()+0x25e>
 800c310:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c314:	f043 0302 	orr.w	r3, r3, #2
 800c318:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c31c:	e780      	b.n	800c220 <E131Bridge::HandleDmx()+0x6c>
 800c31e:	d9ad      	bls.n	800c27c <E131Bridge::HandleDmx()+0xc8>
 800c320:	2300      	movs	r3, #0
 800c322:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
 800c326:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
 800c32a:	f884 34f5 	strb.w	r3, [r4, #1269]	; 0x4f5
 800c32e:	e7a3      	b.n	800c278 <E131Bridge::HandleDmx()+0xc4>
 800c330:	2f00      	cmp	r7, #0
 800c332:	f000 8089 	beq.w	800c448 <E131Bridge::HandleDmx()+0x294>
 800c336:	f1b9 0f00 	cmp.w	r9, #0
 800c33a:	d154      	bne.n	800c3e6 <E131Bridge::HandleDmx()+0x232>
 800c33c:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c340:	f884 3530 	strb.w	r3, [r4, #1328]	; 0x530
 800c344:	e7ae      	b.n	800c2a4 <E131Bridge::HandleDmx()+0xf0>
 800c346:	b39e      	cbz	r6, 800c3b0 <E131Bridge::HandleDmx()+0x1fc>
 800c348:	f884 354c 	strb.w	r3, [r4, #1356]	; 0x54c
 800c34c:	68e3      	ldr	r3, [r4, #12]
 800c34e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
 800c352:	f7fe f98d 	bl	800a670 <lightset::Data::Get()>
 800c356:	4681      	mov	r9, r0
 800c358:	462a      	mov	r2, r5
 800c35a:	4641      	mov	r1, r8
 800c35c:	f500 7000 	add.w	r0, r0, #512	; 0x200
 800c360:	f7ff fcda 	bl	800bd18 <memcpy.isra.0>
 800c364:	462a      	mov	r2, r5
 800c366:	4641      	mov	r1, r8
 800c368:	f8c9 5600 	str.w	r5, [r9, #1536]	; 0x600
 800c36c:	f509 6080 	add.w	r0, r9, #1024	; 0x400
 800c370:	f7ff fcd2 	bl	800bd18 <memcpy.isra.0>
 800c374:	e79e      	b.n	800c2b4 <E131Bridge::HandleDmx()+0x100>
 800c376:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c378:	2210      	movs	r2, #16
 800c37a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
 800c37e:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c382:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c386:	f884 354c 	strb.w	r3, [r4, #1356]	; 0x54c
 800c38a:	f204 503c 	addw	r0, r4, #1340	; 0x53c
 800c38e:	f7ff fcc3 	bl	800bd18 <memcpy.isra.0>
 800c392:	68e3      	ldr	r3, [r4, #12]
 800c394:	4639      	mov	r1, r7
 800c396:	4620      	mov	r0, r4
 800c398:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
 800c39c:	f7ff fe16 	bl	800bfcc <E131Bridge::UpdateMergeStatus(unsigned int)>
 800c3a0:	462a      	mov	r2, r5
 800c3a2:	4641      	mov	r1, r8
 800c3a4:	4638      	mov	r0, r7
 800c3a6:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
 800c3aa:	f7fe f9b3 	bl	800a714 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c3ae:	e781      	b.n	800c2b4 <E131Bridge::HandleDmx()+0x100>
 800c3b0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800c3b2:	f884 3530 	strb.w	r3, [r4, #1328]	; 0x530
 800c3b6:	f8c4 251c 	str.w	r2, [r4, #1308]	; 0x51c
 800c3ba:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800c3be:	2210      	movs	r2, #16
 800c3c0:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800c3c4:	f7ff fca8 	bl	800bd18 <memcpy.isra.0>
 800c3c8:	68e3      	ldr	r3, [r4, #12]
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
 800c3d2:	f7ff fdfb 	bl	800bfcc <E131Bridge::UpdateMergeStatus(unsigned int)>
 800c3d6:	462a      	mov	r2, r5
 800c3d8:	4641      	mov	r1, r8
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
 800c3e0:	f7fe f96f 	bl	800a6c2 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800c3e4:	e766      	b.n	800c2b4 <E131Bridge::HandleDmx()+0x100>
 800c3e6:	b926      	cbnz	r6, 800c3f2 <E131Bridge::HandleDmx()+0x23e>
 800c3e8:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c3ec:	f884 3530 	strb.w	r3, [r4, #1328]	; 0x530
 800c3f0:	e7ea      	b.n	800c3c8 <E131Bridge::HandleDmx()+0x214>
 800c3f2:	481a      	ldr	r0, [pc, #104]	; (800c45c <E131Bridge::HandleDmx()+0x2a8>)
 800c3f4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f8:	f006 be68 	b.w	80130cc <printf>
 800c3fc:	4632      	mov	r2, r6
 800c3fe:	4639      	mov	r1, r7
 800c400:	e77a      	b.n	800c2f8 <E131Bridge::HandleDmx()+0x144>
 800c402:	2300      	movs	r3, #0
 800c404:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800c408:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f47f af7a 	bne.w	800c306 <E131Bridge::HandleDmx()+0x152>
 800c412:	6865      	ldr	r5, [r4, #4]
 800c414:	f7fe f92c 	bl	800a670 <lightset::Data::Get()>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	2100      	movs	r1, #0
 800c41c:	691e      	ldr	r6, [r3, #16]
 800c41e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800c422:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
 800c426:	4628      	mov	r0, r5
 800c428:	47b0      	blx	r6
 800c42a:	f894 1556 	ldrb.w	r1, [r4, #1366]	; 0x556
 800c42e:	2900      	cmp	r1, #0
 800c430:	f47f af6e 	bne.w	800c310 <E131Bridge::HandleDmx()+0x15c>
 800c434:	6860      	ldr	r0, [r4, #4]
 800c436:	6803      	ldr	r3, [r0, #0]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	4798      	blx	r3
 800c43c:	2301      	movs	r3, #1
 800c43e:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800c442:	f884 3556 	strb.w	r3, [r4, #1366]	; 0x556
 800c446:	e763      	b.n	800c310 <E131Bridge::HandleDmx()+0x15c>
 800c448:	f1b9 0f00 	cmp.w	r9, #0
 800c44c:	d093      	beq.n	800c376 <E131Bridge::HandleDmx()+0x1c2>
 800c44e:	2e00      	cmp	r6, #0
 800c450:	d0cf      	beq.n	800c3f2 <E131Bridge::HandleDmx()+0x23e>
 800c452:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800c456:	f884 354c 	strb.w	r3, [r4, #1356]	; 0x54c
 800c45a:	e79a      	b.n	800c392 <E131Bridge::HandleDmx()+0x1de>
 800c45c:	0801689b 	stmdaeq	r1, {r0, r1, r3, r4, r7, fp, sp, lr}

0800c460 <E131Bridge::IsValidRoot()>:
 800c460:	b530      	push	{r4, r5, lr}
 800c462:	4a0d      	ldr	r2, [pc, #52]	; (800c498 <E131Bridge::IsValidRoot()+0x38>)
 800c464:	f100 037f 	add.w	r3, r0, #127	; 0x7f
 800c468:	f100 018b 	add.w	r1, r0, #139	; 0x8b
 800c46c:	4299      	cmp	r1, r3
 800c46e:	d109      	bne.n	800c484 <E131Bridge::IsValidRoot()+0x24>
 800c470:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800c474:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800c478:	d00c      	beq.n	800c494 <E131Bridge::IsValidRoot()+0x34>
 800c47a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800c47e:	4258      	negs	r0, r3
 800c480:	4158      	adcs	r0, r3
 800c482:	bd30      	pop	{r4, r5, pc}
 800c484:	f812 4b01 	ldrb.w	r4, [r2], #1
 800c488:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800c48c:	42a5      	cmp	r5, r4
 800c48e:	d0ed      	beq.n	800c46c <E131Bridge::IsValidRoot()+0xc>
 800c490:	2000      	movs	r0, #0
 800c492:	e7f6      	b.n	800c482 <E131Bridge::IsValidRoot()+0x22>
 800c494:	2001      	movs	r0, #1
 800c496:	e7f4      	b.n	800c482 <E131Bridge::IsValidRoot()+0x22>
 800c498:	08016977 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}

0800c49c <E131Bridge::IsValidDataPacket()>:
 800c49c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d10d      	bne.n	800c4c0 <E131Bridge::IsValidDataPacket()+0x24>
 800c4a4:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800c4a8:	2ba1      	cmp	r3, #161	; 0xa1
 800c4aa:	d109      	bne.n	800c4c0 <E131Bridge::IsValidDataPacket()+0x24>
 800c4ac:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800c4b0:	b933      	cbnz	r3, 800c4c0 <E131Bridge::IsValidDataPacket()+0x24>
 800c4b2:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800c4b6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800c4ba:	4258      	negs	r0, r3
 800c4bc:	4158      	adcs	r0, r3
 800c4be:	4770      	bx	lr
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	4770      	bx	lr

0800c4c4 <E131Bridge::Run()>:
 800c4c4:	b530      	push	{r4, r5, lr}
 800c4c6:	4601      	mov	r1, r0
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	f10d 030e 	add.w	r3, sp, #14
 800c4d0:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800c4d4:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800c4de:	f003 fa9d 	bl	800fa1c <udp_recv>
 800c4e2:	4b3a      	ldr	r3, [pc, #232]	; (800c5cc <E131Bridge::Run()+0x108>)
 800c4e4:	681d      	ldr	r5, [r3, #0]
 800c4e6:	60e5      	str	r5, [r4, #12]
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d138      	bne.n	800c55e <E131Bridge::Run()+0x9a>
 800c4ec:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800c4f0:	b16b      	cbz	r3, 800c50e <E131Bridge::Run()+0x4a>
 800c4f2:	6923      	ldr	r3, [r4, #16]
 800c4f4:	1aed      	subs	r5, r5, r3
 800c4f6:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800c4fa:	429d      	cmp	r5, r3
 800c4fc:	d928      	bls.n	800c550 <E131Bridge::Run()+0x8c>
 800c4fe:	6863      	ldr	r3, [r4, #4]
 800c500:	b9eb      	cbnz	r3, 800c53e <E131Bridge::Run()+0x7a>
 800c502:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c506:	f023 0302 	bic.w	r3, r3, #2
 800c50a:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c50e:	6963      	ldr	r3, [r4, #20]
 800c510:	b12b      	cbz	r3, 800c51e <E131Bridge::Run()+0x5a>
 800c512:	4620      	mov	r0, r4
 800c514:	f000 f944 	bl	800c7a0 <E131Bridge::HandleDmxIn()>
 800c518:	4620      	mov	r0, r4
 800c51a:	f000 f8c7 	bl	800c6ac <E131Bridge::SendDiscoveryPacket()>
 800c51e:	7a23      	ldrb	r3, [r4, #8]
 800c520:	b15b      	cbz	r3, 800c53a <E131Bridge::Run()+0x76>
 800c522:	4b2b      	ldr	r3, [pc, #172]	; (800c5d0 <E131Bridge::Run()+0x10c>)
 800c524:	6818      	ldr	r0, [r3, #0]
 800c526:	6843      	ldr	r3, [r0, #4]
 800c528:	2b04      	cmp	r3, #4
 800c52a:	d006      	beq.n	800c53a <E131Bridge::Run()+0x76>
 800c52c:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c530:	2b00      	cmp	r3, #0
 800c532:	d049      	beq.n	800c5c8 <E131Bridge::Run()+0x104>
 800c534:	2103      	movs	r1, #3
 800c536:	f006 f9f7 	bl	8012928 <LedBlink::SetMode(ledblink::Mode)>
 800c53a:	b005      	add	sp, #20
 800c53c:	bd30      	pop	{r4, r5, pc}
 800c53e:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800c542:	2b00      	cmp	r3, #0
 800c544:	d1dd      	bne.n	800c502 <E131Bridge::Run()+0x3e>
 800c546:	2201      	movs	r2, #1
 800c548:	4620      	mov	r0, r4
 800c54a:	4611      	mov	r1, r2
 800c54c:	f7ff fdc0 	bl	800c0d0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800c550:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c55a:	d3d8      	bcc.n	800c50e <E131Bridge::Run()+0x4a>
 800c55c:	e7d1      	b.n	800c502 <E131Bridge::Run()+0x3e>
 800c55e:	4620      	mov	r0, r4
 800c560:	f7ff ff7e 	bl	800c460 <E131Bridge::IsValidRoot()>
 800c564:	2800      	cmp	r0, #0
 800c566:	d0e8      	beq.n	800c53a <E131Bridge::Run()+0x76>
 800c568:	2300      	movs	r3, #0
 800c56a:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800c56e:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800c572:	6125      	str	r5, [r4, #16]
 800c574:	b15b      	cbz	r3, 800c58e <E131Bridge::Run()+0xca>
 800c576:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800c57a:	b943      	cbnz	r3, 800c58e <E131Bridge::Run()+0xca>
 800c57c:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800c580:	1aad      	subs	r5, r5, r2
 800c582:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800c586:	4295      	cmp	r5, r2
 800c588:	bf88      	it	hi
 800c58a:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800c58e:	6863      	ldr	r3, [r4, #4]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d0bc      	beq.n	800c50e <E131Bridge::Run()+0x4a>
 800c594:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800c598:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c59c:	ba1a      	rev	r2, r3
 800c59e:	d108      	bne.n	800c5b2 <E131Bridge::Run()+0xee>
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f7ff ff7b 	bl	800c49c <E131Bridge::IsValidDataPacket()>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	d0b1      	beq.n	800c50e <E131Bridge::Run()+0x4a>
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f7ff fe02 	bl	800c1b4 <E131Bridge::HandleDmx()>
 800c5b0:	e7ad      	b.n	800c50e <E131Bridge::Run()+0x4a>
 800c5b2:	2a08      	cmp	r2, #8
 800c5b4:	d1ab      	bne.n	800c50e <E131Bridge::Run()+0x4a>
 800c5b6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800c5ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c5be:	d1a6      	bne.n	800c50e <E131Bridge::Run()+0x4a>
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f000 f959 	bl	800c878 <E131Bridge::HandleSynchronization()>
 800c5c6:	e7a2      	b.n	800c50e <E131Bridge::Run()+0x4a>
 800c5c8:	2102      	movs	r1, #2
 800c5ca:	e7b4      	b.n	800c536 <E131Bridge::Run()+0x72>
 800c5cc:	2000a24c 	andcs	sl, r0, ip, asr #4
 800c5d0:	2000a22c 	andcs	sl, r0, ip, lsr #4

0800c5d4 <E131Bridge::FillDiscoveryPacket()>:
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c5da:	b510      	push	{r4, lr}
 800c5dc:	333c      	adds	r3, #60	; 0x3c
 800c5de:	005b      	lsls	r3, r3, #1
 800c5e0:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800c5e4:	69c3      	ldr	r3, [r0, #28]
 800c5e6:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800c5ea:	428b      	cmp	r3, r1
 800c5ec:	d14a      	bne.n	800c684 <E131Bridge::FillDiscoveryPacket()+0xb0>
 800c5ee:	69c3      	ldr	r3, [r0, #28]
 800c5f0:	492d      	ldr	r1, [pc, #180]	; (800c6a8 <E131Bridge::FillDiscoveryPacket()+0xd4>)
 800c5f2:	701a      	strb	r2, [r3, #0]
 800c5f4:	2210      	movs	r2, #16
 800c5f6:	705a      	strb	r2, [r3, #1]
 800c5f8:	1cda      	adds	r2, r3, #3
 800c5fa:	330f      	adds	r3, #15
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d144      	bne.n	800c68a <E131Bridge::FillDiscoveryPacket()+0xb6>
 800c600:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c604:	69c3      	ldr	r3, [r0, #28]
 800c606:	3234      	adds	r2, #52	; 0x34
 800c608:	0052      	lsls	r2, r2, #1
 800c60a:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800c60e:	ba52      	rev16	r2, r2
 800c610:	821a      	strh	r2, [r3, #16]
 800c612:	2200      	movs	r2, #0
 800c614:	749a      	strb	r2, [r3, #18]
 800c616:	74da      	strb	r2, [r3, #19]
 800c618:	751a      	strb	r2, [r3, #20]
 800c61a:	2208      	movs	r2, #8
 800c61c:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800c620:	f803 2f15 	strb.w	r2, [r3, #21]!
 800c624:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800c628:	4291      	cmp	r1, r2
 800c62a:	d133      	bne.n	800c694 <E131Bridge::FillDiscoveryPacket()+0xc0>
 800c62c:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800c630:	69c3      	ldr	r3, [r0, #28]
 800c632:	3229      	adds	r2, #41	; 0x29
 800c634:	0052      	lsls	r2, r2, #1
 800c636:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800c63a:	ba52      	rev16	r2, r2
 800c63c:	84da      	strh	r2, [r3, #38]	; 0x26
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c644:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800c648:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800c64c:	2202      	movs	r2, #2
 800c64e:	f803 2f2b 	strb.w	r2, [r3, #43]!
 800c652:	f100 0274 	add.w	r2, r0, #116	; 0x74
 800c656:	4291      	cmp	r1, r2
 800c658:	d121      	bne.n	800c69e <E131Bridge::FillDiscoveryPacket()+0xca>
 800c65a:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c65e:	69c2      	ldr	r2, [r0, #28]
 800c660:	3304      	adds	r3, #4
 800c662:	005b      	lsls	r3, r3, #1
 800c664:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800c668:	ba5b      	rev16	r3, r3
 800c66a:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800c66e:	2300      	movs	r3, #0
 800c670:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800c674:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800c678:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800c67c:	2301      	movs	r3, #1
 800c67e:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800c682:	bd10      	pop	{r4, pc}
 800c684:	f803 2b01 	strb.w	r2, [r3], #1
 800c688:	e7af      	b.n	800c5ea <E131Bridge::FillDiscoveryPacket()+0x16>
 800c68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c68e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c692:	e7b3      	b.n	800c5fc <E131Bridge::FillDiscoveryPacket()+0x28>
 800c694:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c69c:	e7c4      	b.n	800c628 <E131Bridge::FillDiscoveryPacket()+0x54>
 800c69e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6a6:	e7d6      	b.n	800c656 <E131Bridge::FillDiscoveryPacket()+0x82>
 800c6a8:	08016977 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}

0800c6ac <E131Bridge::SendDiscoveryPacket()>:
 800c6ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6ae:	f242 710f 	movw	r1, #9999	; 0x270f
 800c6b2:	68c2      	ldr	r2, [r0, #12]
 800c6b4:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	428b      	cmp	r3, r1
 800c6be:	d90e      	bls.n	800c6de <E131Bridge::SendDiscoveryPacket()+0x32>
 800c6c0:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800c6c4:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800c6c8:	b95b      	cbnz	r3, 800c6e2 <E131Bridge::SendDiscoveryPacket()+0x36>
 800c6ca:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800c6ce:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800c6d2:	9300      	str	r3, [sp, #0]
 800c6d4:	69e1      	ldr	r1, [r4, #28]
 800c6d6:	6a23      	ldr	r3, [r4, #32]
 800c6d8:	7820      	ldrb	r0, [r4, #0]
 800c6da:	f003 f9fb 	bl	800fad4 <udp_send>
 800c6de:	b004      	add	sp, #16
 800c6e0:	bd10      	pop	{r4, pc}
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	f10d 020e 	add.w	r2, sp, #14
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	f7ff fc5b 	bl	800bfa4 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d0eb      	beq.n	800c6ca <E131Bridge::SendDiscoveryPacket()+0x1e>
 800c6f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800c6f6:	69e2      	ldr	r2, [r4, #28]
 800c6f8:	ba5b      	rev16	r3, r3
 800c6fa:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
 800c6fe:	e7e4      	b.n	800c6ca <E131Bridge::SendDiscoveryPacket()+0x1e>

0800c700 <memcpy.isra.0>:
 800c700:	3801      	subs	r0, #1
 800c702:	440a      	add	r2, r1
 800c704:	4291      	cmp	r1, r2
 800c706:	d100      	bne.n	800c70a <memcpy.isra.0+0xa>
 800c708:	4770      	bx	lr
 800c70a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c70e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800c712:	e7f7      	b.n	800c704 <memcpy.isra.0+0x4>

0800c714 <E131Bridge::FillDataPacket()>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	2400      	movs	r4, #0
 800c718:	2610      	movs	r6, #16
 800c71a:	4605      	mov	r5, r0
 800c71c:	6980      	ldr	r0, [r0, #24]
 800c71e:	220c      	movs	r2, #12
 800c720:	7046      	strb	r6, [r0, #1]
 800c722:	7004      	strb	r4, [r0, #0]
 800c724:	7084      	strb	r4, [r0, #2]
 800c726:	70c4      	strb	r4, [r0, #3]
 800c728:	491c      	ldr	r1, [pc, #112]	; (800c79c <E131Bridge::FillDataPacket()+0x88>)
 800c72a:	3004      	adds	r0, #4
 800c72c:	f7ff ffe8 	bl	800c700 <memcpy.isra.0>
 800c730:	2304      	movs	r3, #4
 800c732:	4632      	mov	r2, r6
 800c734:	2602      	movs	r6, #2
 800c736:	69a8      	ldr	r0, [r5, #24]
 800c738:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800c73c:	7543      	strb	r3, [r0, #21]
 800c73e:	7484      	strb	r4, [r0, #18]
 800c740:	74c4      	strb	r4, [r0, #19]
 800c742:	7504      	strb	r4, [r0, #20]
 800c744:	3016      	adds	r0, #22
 800c746:	f7ff ffdb 	bl	800c700 <memcpy.isra.0>
 800c74a:	69a8      	ldr	r0, [r5, #24]
 800c74c:	2240      	movs	r2, #64	; 0x40
 800c74e:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800c752:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800c756:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800c75a:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800c75e:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800c762:	302c      	adds	r0, #44	; 0x2c
 800c764:	f7ff ffcc 	bl	800c700 <memcpy.isra.0>
 800c768:	22a1      	movs	r2, #161	; 0xa1
 800c76a:	69ab      	ldr	r3, [r5, #24]
 800c76c:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800c770:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800c774:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800c778:	69ab      	ldr	r3, [r5, #24]
 800c77a:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800c77e:	69ab      	ldr	r3, [r5, #24]
 800c780:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800c784:	2201      	movs	r2, #1
 800c786:	69ab      	ldr	r3, [r5, #24]
 800c788:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800c78c:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800c790:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800c794:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800c798:	bd70      	pop	{r4, r5, r6, pc}
 800c79a:	bf00      	nop
 800c79c:	08016977 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}

0800c7a0 <E131Bridge::HandleDmxIn()>:
 800c7a0:	b530      	push	{r4, r5, lr}
 800c7a2:	f890 355a 	ldrb.w	r3, [r0, #1370]	; 0x55a
 800c7a6:	4604      	mov	r4, r0
 800c7a8:	b085      	sub	sp, #20
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d050      	beq.n	800c850 <E131Bridge::HandleDmxIn()+0xb0>
 800c7ae:	6940      	ldr	r0, [r0, #20]
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	6803      	ldr	r3, [r0, #0]
 800c7b4:	aa02      	add	r2, sp, #8
 800c7b6:	691d      	ldr	r5, [r3, #16]
 800c7b8:	ab03      	add	r3, sp, #12
 800c7ba:	47a8      	blx	r5
 800c7bc:	4601      	mov	r1, r0
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d048      	beq.n	800c854 <E131Bridge::HandleDmxIn()+0xb4>
 800c7c2:	9a02      	ldr	r2, [sp, #8]
 800c7c4:	69a0      	ldr	r0, [r4, #24]
 800c7c6:	b293      	uxth	r3, r2
 800c7c8:	f103 056d 	add.w	r5, r3, #109	; 0x6d
 800c7cc:	f445 45e0 	orr.w	r5, r5, #28672	; 0x7000
 800c7d0:	ba6d      	rev16	r5, r5
 800c7d2:	8205      	strh	r5, [r0, #16]
 800c7d4:	f103 0557 	add.w	r5, r3, #87	; 0x57
 800c7d8:	f445 45e0 	orr.w	r5, r5, #28672	; 0x7000
 800c7dc:	ba6d      	rev16	r5, r5
 800c7de:	84c5      	strh	r5, [r0, #38]	; 0x26
 800c7e0:	f894 5561 	ldrb.w	r5, [r4, #1377]	; 0x561
 800c7e4:	330a      	adds	r3, #10
 800c7e6:	f880 506c 	strb.w	r5, [r0, #108]	; 0x6c
 800c7ea:	f894 0560 	ldrb.w	r0, [r4, #1376]	; 0x560
 800c7ee:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800c7f2:	1c45      	adds	r5, r0, #1
 800c7f4:	f884 5560 	strb.w	r5, [r4, #1376]	; 0x560
 800c7f8:	69a5      	ldr	r5, [r4, #24]
 800c7fa:	ba5b      	rev16	r3, r3
 800c7fc:	f885 006f 	strb.w	r0, [r5, #111]	; 0x6f
 800c800:	f8b4 5558 	ldrh.w	r5, [r4, #1368]	; 0x558
 800c804:	69a0      	ldr	r0, [r4, #24]
 800c806:	ba6d      	rev16	r5, r5
 800c808:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800c80c:	f8a0 5071 	strh.w	r5, [r0, #113]	; 0x71
 800c810:	307d      	adds	r0, #125	; 0x7d
 800c812:	f7ff ff75 	bl	800c700 <memcpy.isra.0>
 800c816:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800c81a:	69a1      	ldr	r1, [r4, #24]
 800c81c:	ba53      	rev16	r3, r2
 800c81e:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800c822:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800c826:	327d      	adds	r2, #125	; 0x7d
 800c828:	9300      	str	r3, [sp, #0]
 800c82a:	b292      	uxth	r2, r2
 800c82c:	f8d4 355c 	ldr.w	r3, [r4, #1372]	; 0x55c
 800c830:	7820      	ldrb	r0, [r4, #0]
 800c832:	f003 f94f 	bl	800fad4 <udp_send>
 800c836:	4a0f      	ldr	r2, [pc, #60]	; (800c874 <E131Bridge::HandleDmxIn()+0xd4>)
 800c838:	6813      	ldr	r3, [r2, #0]
 800c83a:	07d9      	lsls	r1, r3, #31
 800c83c:	d408      	bmi.n	800c850 <E131Bridge::HandleDmxIn()+0xb0>
 800c83e:	f043 0301 	orr.w	r3, r3, #1
 800c842:	6013      	str	r3, [r2, #0]
 800c844:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c848:	f043 0301 	orr.w	r3, r3, #1
 800c84c:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800c850:	b005      	add	sp, #20
 800c852:	bd30      	pop	{r4, r5, pc}
 800c854:	9b03      	ldr	r3, [sp, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d1fa      	bne.n	800c850 <E131Bridge::HandleDmxIn()+0xb0>
 800c85a:	4a06      	ldr	r2, [pc, #24]	; (800c874 <E131Bridge::HandleDmxIn()+0xd4>)
 800c85c:	6813      	ldr	r3, [r2, #0]
 800c85e:	f023 0301 	bic.w	r3, r3, #1
 800c862:	6013      	str	r3, [r2, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1f3      	bne.n	800c850 <E131Bridge::HandleDmxIn()+0xb0>
 800c868:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800c86c:	f023 0301 	bic.w	r3, r3, #1
 800c870:	e7ec      	b.n	800c84c <E131Bridge::HandleDmxIn()+0xac>
 800c872:	bf00      	nop
 800c874:	20000ce8 	andcs	r0, r0, r8, ror #25

0800c878 <E131Bridge::HandleSynchronization()>:
 800c878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c87c:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800c880:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800c884:	ba5b      	rev16	r3, r3
 800c886:	b29b      	uxth	r3, r3
 800c888:	429a      	cmp	r2, r3
 800c88a:	4604      	mov	r4, r0
 800c88c:	d00a      	beq.n	800c8a4 <E131Bridge::HandleSynchronization()+0x2c>
 800c88e:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800c892:	429a      	cmp	r2, r3
 800c894:	d006      	beq.n	800c8a4 <E131Bridge::HandleSynchronization()+0x2c>
 800c896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c89a:	4b1b      	ldr	r3, [pc, #108]	; (800c908 <E131Bridge::HandleSynchronization()+0x90>)
 800c89c:	2102      	movs	r1, #2
 800c89e:	6818      	ldr	r0, [r3, #0]
 800c8a0:	f006 b842 	b.w	8012928 <LedBlink::SetMode(ledblink::Mode)>
 800c8a4:	68e3      	ldr	r3, [r4, #12]
 800c8a6:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800c8aa:	f894 3516 	ldrb.w	r3, [r4, #1302]	; 0x516
 800c8ae:	b30b      	cbz	r3, 800c8f4 <E131Bridge::HandleSynchronization()+0x7c>
 800c8b0:	4d16      	ldr	r5, [pc, #88]	; (800c90c <E131Bridge::HandleSynchronization()+0x94>)
 800c8b2:	6860      	ldr	r0, [r4, #4]
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	4e16      	ldr	r6, [pc, #88]	; (800c910 <E131Bridge::HandleSynchronization()+0x98>)
 800c8b8:	07da      	lsls	r2, r3, #31
 800c8ba:	bf5c      	itt	pl
 800c8bc:	2301      	movpl	r3, #1
 800c8be:	602b      	strpl	r3, [r5, #0]
 800c8c0:	6803      	ldr	r3, [r0, #0]
 800c8c2:	2100      	movs	r1, #0
 800c8c4:	691f      	ldr	r7, [r3, #16]
 800c8c6:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800c8ca:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800c8ce:	47b8      	blx	r7
 800c8d0:	f894 1556 	ldrb.w	r1, [r4, #1366]	; 0x556
 800c8d4:	b931      	cbnz	r1, 800c8e4 <E131Bridge::HandleSynchronization()+0x6c>
 800c8d6:	6860      	ldr	r0, [r4, #4]
 800c8d8:	6803      	ldr	r3, [r0, #0]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	4798      	blx	r3
 800c8de:	2301      	movs	r3, #1
 800c8e0:	f884 3556 	strb.w	r3, [r4, #1366]	; 0x556
 800c8e4:	682b      	ldr	r3, [r5, #0]
 800c8e6:	07db      	lsls	r3, r3, #31
 800c8e8:	bf5c      	itt	pl
 800c8ea:	2301      	movpl	r3, #1
 800c8ec:	602b      	strpl	r3, [r5, #0]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f8c6 3600 	str.w	r3, [r6, #1536]	; 0x600
 800c8f4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c8f6:	b120      	cbz	r0, 800c902 <E131Bridge::HandleSynchronization()+0x8a>
 800c8f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8fc:	6803      	ldr	r3, [r0, #0]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	4718      	bx	r3
 800c902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c906:	bf00      	nop
 800c908:	2000a22c 	andcs	sl, r0, ip, lsr #4
 800c90c:	200006c8 	andcs	r0, r0, r8, asr #13
 800c910:	200006cc 	andcs	r0, r0, ip, asr #13

0800c914 <E131Bridge::Print()>:
 800c914:	b530      	push	{r4, r5, lr}
 800c916:	2500      	movs	r5, #0
 800c918:	4604      	mov	r4, r0
 800c91a:	b08d      	sub	sp, #52	; 0x34
 800c91c:	a902      	add	r1, sp, #8
 800c91e:	3024      	adds	r0, #36	; 0x24
 800c920:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800c924:	f000 ffce 	bl	800d8c4 <uuid_unparse>
 800c928:	4822      	ldr	r0, [pc, #136]	; (800c9b4 <E131Bridge::Print()+0xa0>)
 800c92a:	f006 fbcf 	bl	80130cc <printf>
 800c92e:	4b22      	ldr	r3, [pc, #136]	; (800c9b8 <E131Bridge::Print()+0xa4>)
 800c930:	4822      	ldr	r0, [pc, #136]	; (800c9bc <E131Bridge::Print()+0xa8>)
 800c932:	7819      	ldrb	r1, [r3, #0]
 800c934:	785a      	ldrb	r2, [r3, #1]
 800c936:	f006 fbc9 	bl	80130cc <printf>
 800c93a:	4821      	ldr	r0, [pc, #132]	; (800c9c0 <E131Bridge::Print()+0xac>)
 800c93c:	a902      	add	r1, sp, #8
 800c93e:	f006 fbc5 	bl	80130cc <printf>
 800c942:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800c946:	b1bb      	cbz	r3, 800c978 <E131Bridge::Print()+0x64>
 800c948:	481e      	ldr	r0, [pc, #120]	; (800c9c4 <E131Bridge::Print()+0xb0>)
 800c94a:	f006 fbbf 	bl	80130cc <printf>
 800c94e:	2301      	movs	r3, #1
 800c950:	4629      	mov	r1, r5
 800c952:	4620      	mov	r0, r4
 800c954:	f10d 0206 	add.w	r2, sp, #6
 800c958:	f7ff fb24 	bl	800bfa4 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c95c:	b160      	cbz	r0, 800c978 <E131Bridge::Print()+0x64>
 800c95e:	f8d4 1550 	ldr.w	r1, [r4, #1360]	; 0x550
 800c962:	4a19      	ldr	r2, [pc, #100]	; (800c9c8 <E131Bridge::Print()+0xb4>)
 800c964:	4b19      	ldr	r3, [pc, #100]	; (800c9cc <E131Bridge::Print()+0xb8>)
 800c966:	481a      	ldr	r0, [pc, #104]	; (800c9d0 <E131Bridge::Print()+0xbc>)
 800c968:	42a9      	cmp	r1, r5
 800c96a:	bf18      	it	ne
 800c96c:	4613      	movne	r3, r2
 800c96e:	4629      	mov	r1, r5
 800c970:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c974:	f006 fbaa 	bl	80130cc <printf>
 800c978:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800c97c:	b193      	cbz	r3, 800c9a4 <E131Bridge::Print()+0x90>
 800c97e:	4815      	ldr	r0, [pc, #84]	; (800c9d4 <E131Bridge::Print()+0xc0>)
 800c980:	f006 fba4 	bl	80130cc <printf>
 800c984:	2300      	movs	r3, #0
 800c986:	4620      	mov	r0, r4
 800c988:	4619      	mov	r1, r3
 800c98a:	f10d 0206 	add.w	r2, sp, #6
 800c98e:	f7ff fb09 	bl	800bfa4 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800c992:	b138      	cbz	r0, 800c9a4 <E131Bridge::Print()+0x90>
 800c994:	2100      	movs	r1, #0
 800c996:	f894 3561 	ldrb.w	r3, [r4, #1377]	; 0x561
 800c99a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c99e:	480e      	ldr	r0, [pc, #56]	; (800c9d8 <E131Bridge::Print()+0xc4>)
 800c9a0:	f006 fb94 	bl	80130cc <printf>
 800c9a4:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800c9a8:	b113      	cbz	r3, 800c9b0 <E131Bridge::Print()+0x9c>
 800c9aa:	480c      	ldr	r0, [pc, #48]	; (800c9dc <E131Bridge::Print()+0xc8>)
 800c9ac:	f006 fb8e 	bl	80130cc <printf>
 800c9b0:	b00d      	add	sp, #52	; 0x34
 800c9b2:	bd30      	pop	{r4, r5, pc}
 800c9b4:	080168c8 	stmdaeq	r1, {r3, r6, r7, fp, sp, lr}
 800c9b8:	08016983 	stmdaeq	r1, {r0, r1, r7, r8, fp, sp, lr}
 800c9bc:	080168d0 	stmdaeq	r1, {r4, r6, r7, fp, sp, lr}
 800c9c0:	080168e3 	stmdaeq	r1, {r0, r1, r5, r6, r7, fp, sp, lr}
 800c9c4:	080166b1 	stmdaeq	r1, {r0, r4, r5, r7, r9, sl, sp, lr}
 800c9c8:	08016659 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, sp, lr}
 800c9cc:	08016655 	stmdaeq	r1, {r0, r2, r4, r6, r9, sl, sp, lr}
 800c9d0:	080168f3 	stmdaeq	r1, {r0, r1, r4, r5, r6, r7, fp, sp, lr}
 800c9d4:	080166d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, sl, sp, lr}
 800c9d8:	08016912 	stmdaeq	r1, {r1, r4, r8, fp, sp, lr}
 800c9dc:	08016931 	stmdaeq	r1, {r0, r4, r5, r8, fp, sp, lr}

0800c9e0 <memcmp>:
 800c9e0:	4402      	add	r2, r0
 800c9e2:	4290      	cmp	r0, r2
 800c9e4:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800c9e8:	d106      	bne.n	800c9f8 <memcmp+0x18>
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	4770      	bx	lr
 800c9ee:	3001      	adds	r0, #1
 800c9f0:	4290      	cmp	r0, r2
 800c9f2:	d102      	bne.n	800c9fa <memcmp+0x1a>
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	e006      	b.n	800ca06 <memcmp+0x26>
 800c9f8:	b510      	push	{r4, lr}
 800c9fa:	7803      	ldrb	r3, [r0, #0]
 800c9fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ca00:	42a3      	cmp	r3, r4
 800ca02:	d0f4      	beq.n	800c9ee <memcmp+0xe>
 800ca04:	1b18      	subs	r0, r3, r4
 800ca06:	bd10      	pop	{r4, pc}

0800ca08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800ca08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca0a:	88c6      	ldrh	r6, [r0, #6]
 800ca0c:	8885      	ldrh	r5, [r0, #4]
 800ca0e:	42ae      	cmp	r6, r5
 800ca10:	d216      	bcs.n	800ca40 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800ca12:	4604      	mov	r4, r0
 800ca14:	6800      	ldr	r0, [r0, #0]
 800ca16:	1bad      	subs	r5, r5, r6
 800ca18:	4430      	add	r0, r6
 800ca1a:	7a26      	ldrb	r6, [r4, #8]
 800ca1c:	b923      	cbnz	r3, 800ca28 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800ca1e:	b926      	cbnz	r6, 800ca2a <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800ca20:	9200      	str	r2, [sp, #0]
 800ca22:	460b      	mov	r3, r1
 800ca24:	4a09      	ldr	r2, [pc, #36]	; (800ca4c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800ca26:	e003      	b.n	800ca30 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800ca28:	b166      	cbz	r6, 800ca44 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	9200      	str	r2, [sp, #0]
 800ca2e:	4a08      	ldr	r2, [pc, #32]	; (800ca50 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800ca30:	4629      	mov	r1, r5
 800ca32:	f006 fb73 	bl	801311c <snprintf>
 800ca36:	4285      	cmp	r5, r0
 800ca38:	bfa2      	ittt	ge
 800ca3a:	88e3      	ldrhge	r3, [r4, #6]
 800ca3c:	181b      	addge	r3, r3, r0
 800ca3e:	80e3      	strhge	r3, [r4, #6]
 800ca40:	b002      	add	sp, #8
 800ca42:	bd70      	pop	{r4, r5, r6, pc}
 800ca44:	9200      	str	r2, [sp, #0]
 800ca46:	460b      	mov	r3, r1
 800ca48:	4a02      	ldr	r2, [pc, #8]	; (800ca54 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800ca4a:	e7f1      	b.n	800ca30 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800ca4c:	080157d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
 800ca50:	080157c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, sl, ip, lr}
 800ca54:	080157d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, sl, ip, lr}

0800ca58 <E131Params::E131Params(E131ParamsStore*)>:
 800ca58:	b510      	push	{r4, lr}
 800ca5a:	2210      	movs	r2, #16
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	f840 1b04 	str.w	r1, [r0], #4
 800ca62:	2100      	movs	r1, #0
 800ca64:	f006 f918 	bl	8012c98 <memset>
 800ca68:	2200      	movs	r2, #0
 800ca6a:	7322      	strb	r2, [r4, #12]
 800ca6c:	2264      	movs	r2, #100	; 0x64
 800ca6e:	2301      	movs	r3, #1
 800ca70:	75a2      	strb	r2, [r4, #22]
 800ca72:	4a04      	ldr	r2, [pc, #16]	; (800ca84 <E131Params::E131Params(E131ParamsStore*)+0x2c>)
 800ca74:	72e3      	strb	r3, [r4, #11]
 800ca76:	6811      	ldr	r1, [r2, #0]
 800ca78:	82a3      	strh	r3, [r4, #20]
 800ca7a:	b901      	cbnz	r1, 800ca7e <E131Params::E131Params(E131ParamsStore*)+0x26>
 800ca7c:	6013      	str	r3, [r2, #0]
 800ca7e:	4620      	mov	r0, r4
 800ca80:	bd10      	pop	{r4, pc}
 800ca82:	bf00      	nop
 800ca84:	20000cec 	andcs	r0, r0, ip, ror #25

0800ca88 <E131Params::Load(char const*, unsigned int)>:
 800ca88:	6803      	ldr	r3, [r0, #0]
 800ca8a:	b1d3      	cbz	r3, 800cac2 <E131Params::Load(char const*, unsigned int)+0x3a>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca90:	460d      	mov	r5, r1
 800ca92:	4616      	mov	r6, r2
 800ca94:	4604      	mov	r4, r0
 800ca96:	6043      	str	r3, [r0, #4]
 800ca98:	4602      	mov	r2, r0
 800ca9a:	490a      	ldr	r1, [pc, #40]	; (800cac4 <E131Params::Load(char const*, unsigned int)+0x3c>)
 800ca9c:	4668      	mov	r0, sp
 800ca9e:	f005 faf9 	bl	8012094 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800caa2:	4632      	mov	r2, r6
 800caa4:	4629      	mov	r1, r5
 800caa6:	4668      	mov	r0, sp
 800caa8:	f005 faf8 	bl	801209c <ReadConfigFile::Read(char const*, unsigned int)>
 800caac:	4621      	mov	r1, r4
 800caae:	f851 0b04 	ldr.w	r0, [r1], #4
 800cab2:	6803      	ldr	r3, [r0, #0]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	4798      	blx	r3
 800cab8:	4668      	mov	r0, sp
 800caba:	f005 faee 	bl	801209a <ReadConfigFile::~ReadConfigFile()>
 800cabe:	b002      	add	sp, #8
 800cac0:	bd70      	pop	{r4, r5, r6, pc}
 800cac2:	4770      	bx	lr
 800cac4:	0800cd11 	stmdaeq	r0, {r0, r4, r8, sl, fp, lr, pc}

0800cac8 <E131Params::callbackFunction(char const*)>:
 800cac8:	b570      	push	{r4, r5, r6, lr}
 800caca:	460d      	mov	r5, r1
 800cacc:	2608      	movs	r6, #8
 800cace:	b086      	sub	sp, #24
 800cad0:	4604      	mov	r4, r0
 800cad2:	4985      	ldr	r1, [pc, #532]	; (800cce8 <E131Params::callbackFunction(char const*)+0x220>)
 800cad4:	4628      	mov	r0, r5
 800cad6:	ab01      	add	r3, sp, #4
 800cad8:	eb0d 0206 	add.w	r2, sp, r6
 800cadc:	9601      	str	r6, [sp, #4]
 800cade:	f005 fb11 	bl	8012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	f040 80de 	bne.w	800cca4 <E131Params::callbackFunction(char const*)+0x1dc>
 800cae8:	2204      	movs	r2, #4
 800caea:	4980      	ldr	r1, [pc, #512]	; (800ccec <E131Params::callbackFunction(char const*)+0x224>)
 800caec:	eb0d 0006 	add.w	r0, sp, r6
 800caf0:	f7ff ff76 	bl	800c9e0 <memcmp>
 800caf4:	6865      	ldr	r5, [r4, #4]
 800caf6:	b1a0      	cbz	r0, 800cb22 <E131Params::callbackFunction(char const*)+0x5a>
 800caf8:	2203      	movs	r2, #3
 800cafa:	497d      	ldr	r1, [pc, #500]	; (800ccf0 <E131Params::callbackFunction(char const*)+0x228>)
 800cafc:	eb0d 0006 	add.w	r0, sp, r6
 800cb00:	f7ff ff6e 	bl	800c9e0 <memcmp>
 800cb04:	b1a8      	cbz	r0, 800cb32 <E131Params::callbackFunction(char const*)+0x6a>
 800cb06:	2202      	movs	r2, #2
 800cb08:	497a      	ldr	r1, [pc, #488]	; (800ccf4 <E131Params::callbackFunction(char const*)+0x22c>)
 800cb0a:	eb0d 0006 	add.w	r0, sp, r6
 800cb0e:	f7ff ff67 	bl	800c9e0 <memcmp>
 800cb12:	b190      	cbz	r0, 800cb3a <E131Params::callbackFunction(char const*)+0x72>
 800cb14:	4632      	mov	r2, r6
 800cb16:	4978      	ldr	r1, [pc, #480]	; (800ccf8 <E131Params::callbackFunction(char const*)+0x230>)
 800cb18:	eb0d 0006 	add.w	r0, sp, r6
 800cb1c:	f7ff ff60 	bl	800c9e0 <memcmp>
 800cb20:	b168      	cbz	r0, 800cb3e <E131Params::callbackFunction(char const*)+0x76>
 800cb22:	2300      	movs	r3, #0
 800cb24:	f025 0501 	bic.w	r5, r5, #1
 800cb28:	6065      	str	r5, [r4, #4]
 800cb2a:	f8a4 3009 	strh.w	r3, [r4, #9]
 800cb2e:	b006      	add	sp, #24
 800cb30:	bd70      	pop	{r4, r5, r6, pc}
 800cb32:	2301      	movs	r3, #1
 800cb34:	f045 0501 	orr.w	r5, r5, #1
 800cb38:	e7f6      	b.n	800cb28 <E131Params::callbackFunction(char const*)+0x60>
 800cb3a:	2302      	movs	r3, #2
 800cb3c:	e7fa      	b.n	800cb34 <E131Params::callbackFunction(char const*)+0x6c>
 800cb3e:	2303      	movs	r3, #3
 800cb40:	e7f8      	b.n	800cb34 <E131Params::callbackFunction(char const*)+0x6c>
 800cb42:	2303      	movs	r3, #3
 800cb44:	4628      	mov	r0, r5
 800cb46:	9301      	str	r3, [sp, #4]
 800cb48:	496c      	ldr	r1, [pc, #432]	; (800ccfc <E131Params::callbackFunction(char const*)+0x234>)
 800cb4a:	ab01      	add	r3, sp, #4
 800cb4c:	aa02      	add	r2, sp, #8
 800cb4e:	f005 fad9 	bl	8012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800cb52:	b9e0      	cbnz	r0, 800cb8e <E131Params::callbackFunction(char const*)+0xc6>
 800cb54:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800cb58:	6863      	ldr	r3, [r4, #4]
 800cb5a:	f042 0220 	orr.w	r2, r2, #32
 800cb5e:	2a6c      	cmp	r2, #108	; 0x6c
 800cb60:	d110      	bne.n	800cb84 <E131Params::callbackFunction(char const*)+0xbc>
 800cb62:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800cb66:	f042 0220 	orr.w	r2, r2, #32
 800cb6a:	2a74      	cmp	r2, #116	; 0x74
 800cb6c:	d10a      	bne.n	800cb84 <E131Params::callbackFunction(char const*)+0xbc>
 800cb6e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800cb72:	f042 0220 	orr.w	r2, r2, #32
 800cb76:	2a70      	cmp	r2, #112	; 0x70
 800cb78:	d104      	bne.n	800cb84 <E131Params::callbackFunction(char const*)+0xbc>
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb80:	73a2      	strb	r2, [r4, #14]
 800cb82:	e0ab      	b.n	800ccdc <E131Params::callbackFunction(char const*)+0x214>
 800cb84:	2200      	movs	r2, #0
 800cb86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb8a:	73a2      	strb	r2, [r4, #14]
 800cb8c:	e0a6      	b.n	800ccdc <E131Params::callbackFunction(char const*)+0x214>
 800cb8e:	2307      	movs	r3, #7
 800cb90:	4628      	mov	r0, r5
 800cb92:	9301      	str	r3, [sp, #4]
 800cb94:	495a      	ldr	r1, [pc, #360]	; (800cd00 <E131Params::callbackFunction(char const*)+0x238>)
 800cb96:	ab01      	add	r3, sp, #4
 800cb98:	aa02      	add	r2, sp, #8
 800cb9a:	f005 fab3 	bl	8012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d157      	bne.n	800cc52 <E131Params::callbackFunction(char const*)+0x18a>
 800cba2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800cba6:	f043 0320 	orr.w	r3, r3, #32
 800cbaa:	2b69      	cmp	r3, #105	; 0x69
 800cbac:	d11f      	bne.n	800cbee <E131Params::callbackFunction(char const*)+0x126>
 800cbae:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800cbb2:	f043 0320 	orr.w	r3, r3, #32
 800cbb6:	2b6e      	cmp	r3, #110	; 0x6e
 800cbb8:	d142      	bne.n	800cc40 <E131Params::callbackFunction(char const*)+0x178>
 800cbba:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800cbbe:	f043 0320 	orr.w	r3, r3, #32
 800cbc2:	2b70      	cmp	r3, #112	; 0x70
 800cbc4:	d13c      	bne.n	800cc40 <E131Params::callbackFunction(char const*)+0x178>
 800cbc6:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800cbca:	f043 0320 	orr.w	r3, r3, #32
 800cbce:	2b75      	cmp	r3, #117	; 0x75
 800cbd0:	d136      	bne.n	800cc40 <E131Params::callbackFunction(char const*)+0x178>
 800cbd2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cbd6:	f043 0320 	orr.w	r3, r3, #32
 800cbda:	3b74      	subs	r3, #116	; 0x74
 800cbdc:	bf18      	it	ne
 800cbde:	2301      	movne	r3, #1
 800cbe0:	8aa2      	ldrh	r2, [r4, #20]
 800cbe2:	f022 0203 	bic.w	r2, r2, #3
 800cbe6:	b292      	uxth	r2, r2
 800cbe8:	bb63      	cbnz	r3, 800cc44 <E131Params::callbackFunction(char const*)+0x17c>
 800cbea:	82a2      	strh	r2, [r4, #20]
 800cbec:	e79f      	b.n	800cb2e <E131Params::callbackFunction(char const*)+0x66>
 800cbee:	2b64      	cmp	r3, #100	; 0x64
 800cbf0:	d126      	bne.n	800cc40 <E131Params::callbackFunction(char const*)+0x178>
 800cbf2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800cbf6:	f043 0320 	orr.w	r3, r3, #32
 800cbfa:	2b69      	cmp	r3, #105	; 0x69
 800cbfc:	d120      	bne.n	800cc40 <E131Params::callbackFunction(char const*)+0x178>
 800cbfe:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800cc02:	f043 0320 	orr.w	r3, r3, #32
 800cc06:	2b73      	cmp	r3, #115	; 0x73
 800cc08:	d11a      	bne.n	800cc40 <E131Params::callbackFunction(char const*)+0x178>
 800cc0a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800cc0e:	f043 0320 	orr.w	r3, r3, #32
 800cc12:	2b61      	cmp	r3, #97	; 0x61
 800cc14:	d114      	bne.n	800cc40 <E131Params::callbackFunction(char const*)+0x178>
 800cc16:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cc1a:	f043 0320 	orr.w	r3, r3, #32
 800cc1e:	2b62      	cmp	r3, #98	; 0x62
 800cc20:	d10e      	bne.n	800cc40 <E131Params::callbackFunction(char const*)+0x178>
 800cc22:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800cc26:	f043 0320 	orr.w	r3, r3, #32
 800cc2a:	2b6c      	cmp	r3, #108	; 0x6c
 800cc2c:	d108      	bne.n	800cc40 <E131Params::callbackFunction(char const*)+0x178>
 800cc2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800cc32:	f043 0320 	orr.w	r3, r3, #32
 800cc36:	2b65      	cmp	r3, #101	; 0x65
 800cc38:	bf14      	ite	ne
 800cc3a:	2301      	movne	r3, #1
 800cc3c:	2302      	moveq	r3, #2
 800cc3e:	e7cf      	b.n	800cbe0 <E131Params::callbackFunction(char const*)+0x118>
 800cc40:	2301      	movs	r3, #1
 800cc42:	e7cd      	b.n	800cbe0 <E131Params::callbackFunction(char const*)+0x118>
 800cc44:	2b02      	cmp	r3, #2
 800cc46:	bf0c      	ite	eq
 800cc48:	f042 0202 	orreq.w	r2, r2, #2
 800cc4c:	f042 0201 	orrne.w	r2, r2, #1
 800cc50:	e7cb      	b.n	800cbea <E131Params::callbackFunction(char const*)+0x122>
 800cc52:	4628      	mov	r0, r5
 800cc54:	492b      	ldr	r1, [pc, #172]	; (800cd04 <E131Params::callbackFunction(char const*)+0x23c>)
 800cc56:	f10d 0201 	add.w	r2, sp, #1
 800cc5a:	f005 facb 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cc5e:	b178      	cbz	r0, 800cc80 <E131Params::callbackFunction(char const*)+0x1b8>
 800cc60:	4628      	mov	r0, r5
 800cc62:	4929      	ldr	r1, [pc, #164]	; (800cd08 <E131Params::callbackFunction(char const*)+0x240>)
 800cc64:	f10d 0201 	add.w	r2, sp, #1
 800cc68:	f005 fac4 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	f47f af5e 	bne.w	800cb2e <E131Params::callbackFunction(char const*)+0x66>
 800cc72:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cc76:	6863      	ldr	r3, [r4, #4]
 800cc78:	b392      	cbz	r2, 800cce0 <E131Params::callbackFunction(char const*)+0x218>
 800cc7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cc7e:	e02d      	b.n	800ccdc <E131Params::callbackFunction(char const*)+0x214>
 800cc80:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cc84:	6863      	ldr	r3, [r4, #4]
 800cc86:	1e51      	subs	r1, r2, #1
 800cc88:	b2c9      	uxtb	r1, r1
 800cc8a:	29c7      	cmp	r1, #199	; 0xc7
 800cc8c:	d805      	bhi.n	800cc9a <E131Params::callbackFunction(char const*)+0x1d2>
 800cc8e:	2a64      	cmp	r2, #100	; 0x64
 800cc90:	d003      	beq.n	800cc9a <E131Params::callbackFunction(char const*)+0x1d2>
 800cc92:	75a2      	strb	r2, [r4, #22]
 800cc94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc98:	e020      	b.n	800ccdc <E131Params::callbackFunction(char const*)+0x214>
 800cc9a:	2264      	movs	r2, #100	; 0x64
 800cc9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cca0:	75a2      	strb	r2, [r4, #22]
 800cca2:	e01b      	b.n	800ccdc <E131Params::callbackFunction(char const*)+0x214>
 800cca4:	4628      	mov	r0, r5
 800cca6:	4919      	ldr	r1, [pc, #100]	; (800cd0c <E131Params::callbackFunction(char const*)+0x244>)
 800cca8:	f10d 0202 	add.w	r2, sp, #2
 800ccac:	f005 fa84 	bl	80121b8 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800ccb0:	2800      	cmp	r0, #0
 800ccb2:	f47f af46 	bne.w	800cb42 <E131Params::callbackFunction(char const*)+0x7a>
 800ccb6:	f64f 15fe 	movw	r5, #63998	; 0xf9fe
 800ccba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800ccbe:	6863      	ldr	r3, [r4, #4]
 800ccc0:	1e4a      	subs	r2, r1, #1
 800ccc2:	b292      	uxth	r2, r2
 800ccc4:	42aa      	cmp	r2, r5
 800ccc6:	bf81      	itttt	hi
 800ccc8:	2201      	movhi	r2, #1
 800ccca:	7320      	strbhi	r0, [r4, #12]
 800cccc:	72e2      	strbhi	r2, [r4, #11]
 800ccce:	f023 0310 	bichi.w	r3, r3, #16
 800ccd2:	bf9c      	itt	ls
 800ccd4:	f8a4 100b 	strhls.w	r1, [r4, #11]
 800ccd8:	f043 0310 	orrls.w	r3, r3, #16
 800ccdc:	6063      	str	r3, [r4, #4]
 800ccde:	e726      	b.n	800cb2e <E131Params::callbackFunction(char const*)+0x66>
 800cce0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cce4:	e7fa      	b.n	800ccdc <E131Params::callbackFunction(char const*)+0x214>
 800cce6:	bf00      	nop
 800cce8:	0801724c 	stmdaeq	r1, {r2, r3, r6, r9, ip, sp, lr}
 800ccec:	080166fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
 800ccf0:	08016701 	stmdaeq	r1, {r0, r8, r9, sl, sp, lr}
 800ccf4:	0801595e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, fp, ip, lr}
 800ccf8:	08016705 	stmdaeq	r1, {r0, r2, r8, r9, sl, sp, lr}
 800ccfc:	080171dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, ip, sp, lr}
 800cd00:	0801725e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, ip, sp, lr}
 800cd04:	0801695c 	stmdaeq	r1, {r2, r3, r4, r6, r8, fp, sp, lr}
 800cd08:	08017236 	stmdaeq	r1, {r1, r2, r4, r5, r9, ip, sp, lr}
 800cd0c:	0801719c 	stmdaeq	r1, {r2, r3, r4, r7, r8, ip, sp, lr}

0800cd10 <E131Params::staticCallbackFunction(void*, char const*)>:
 800cd10:	f7ff beda 	b.w	800cac8 <E131Params::callbackFunction(char const*)>

0800cd14 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>:
 800cd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd18:	4604      	mov	r4, r0
 800cd1a:	4615      	mov	r5, r2
 800cd1c:	461e      	mov	r6, r3
 800cd1e:	b087      	sub	sp, #28
 800cd20:	3004      	adds	r0, #4
 800cd22:	2900      	cmp	r1, #0
 800cd24:	d05f      	beq.n	800cde6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xd2>
 800cd26:	2213      	movs	r2, #19
 800cd28:	f005 ff9f 	bl	8012c6a <memmove>
 800cd2c:	4633      	mov	r3, r6
 800cd2e:	462a      	mov	r2, r5
 800cd30:	498f      	ldr	r1, [pc, #572]	; (800cf70 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x25c>)
 800cd32:	a803      	add	r0, sp, #12
 800cd34:	f005 f90e 	bl	8011f54 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800cd38:	2500      	movs	r5, #0
 800cd3a:	4f8e      	ldr	r7, [pc, #568]	; (800cf74 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x260>)
 800cd3c:	4e8e      	ldr	r6, [pc, #568]	; (800cf78 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x264>)
 800cd3e:	f8df 823c 	ldr.w	r8, [pc, #572]	; 800cf7c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x268>
 800cd42:	f8df 923c 	ldr.w	r9, [pc, #572]	; 800cf80 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>
 800cd46:	f8d8 2000 	ldr.w	r2, [r8]
 800cd4a:	6863      	ldr	r3, [r4, #4]
 800cd4c:	42aa      	cmp	r2, r5
 800cd4e:	d851      	bhi.n	800cdf4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0xe0>
 800cd50:	f8b4 1009 	ldrh.w	r1, [r4, #9]
 800cd54:	4a8b      	ldr	r2, [pc, #556]	; (800cf84 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x270>)
 800cd56:	f003 0301 	and.w	r3, r3, #1
 800cd5a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cd5e:	a803      	add	r0, sp, #12
 800cd60:	4989      	ldr	r1, [pc, #548]	; (800cf88 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x274>)
 800cd62:	f7ff fe51 	bl	800ca08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800cd66:	4989      	ldr	r1, [pc, #548]	; (800cf8c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x278>)
 800cd68:	a803      	add	r0, sp, #12
 800cd6a:	f005 f979 	bl	8012060 <PropertiesBuilder::AddComment(char const*)>
 800cd6e:	2500      	movs	r5, #0
 800cd70:	f44f 7b80 	mov.w	fp, #256	; 0x100
 800cd74:	4e86      	ldr	r6, [pc, #536]	; (800cf90 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x27c>)
 800cd76:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800cf94 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x280>
 800cd7a:	f8df a21c 	ldr.w	sl, [pc, #540]	; 800cf98 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x284>
 800cd7e:	f104 070d 	add.w	r7, r4, #13
 800cd82:	f8d8 3000 	ldr.w	r3, [r8]
 800cd86:	42ab      	cmp	r3, r5
 800cd88:	d87e      	bhi.n	800ce88 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x174>
 800cd8a:	4984      	ldr	r1, [pc, #528]	; (800cf9c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x288>)
 800cd8c:	a803      	add	r0, sp, #12
 800cd8e:	f005 f967 	bl	8012060 <PropertiesBuilder::AddComment(char const*)>
 800cd92:	2700      	movs	r7, #0
 800cd94:	4e82      	ldr	r6, [pc, #520]	; (800cfa0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x28c>)
 800cd96:	f8df a20c 	ldr.w	sl, [pc, #524]	; 800cfa4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>
 800cd9a:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800cfa8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>
 800cd9e:	f104 0915 	add.w	r9, r4, #21
 800cda2:	f8d8 3000 	ldr.w	r3, [r8]
 800cda6:	42bb      	cmp	r3, r7
 800cda8:	f200 8082 	bhi.w	800ceb0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x19c>
 800cdac:	497f      	ldr	r1, [pc, #508]	; (800cfac <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x298>)
 800cdae:	a803      	add	r0, sp, #12
 800cdb0:	f005 f956 	bl	8012060 <PropertiesBuilder::AddComment(char const*)>
 800cdb4:	6863      	ldr	r3, [r4, #4]
 800cdb6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cdba:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 800cdbe:	42a2      	cmp	r2, r4
 800cdc0:	f080 80b7 	bcs.w	800cf32 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x21e>
 800cdc4:	9803      	ldr	r0, [sp, #12]
 800cdc6:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 800cdca:	4410      	add	r0, r2
 800cdcc:	eba4 0402 	sub.w	r4, r4, r2
 800cdd0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800cdd4:	f040 809c 	bne.w	800cf10 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fc>
 800cdd8:	2a00      	cmp	r2, #0
 800cdda:	f040 809a 	bne.w	800cf12 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1fe>
 800cdde:	9200      	str	r2, [sp, #0]
 800cde0:	4b73      	ldr	r3, [pc, #460]	; (800cfb0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800cde2:	4a71      	ldr	r2, [pc, #452]	; (800cfa8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800cde4:	e09b      	b.n	800cf1e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20a>
 800cde6:	6823      	ldr	r3, [r4, #0]
 800cde8:	4601      	mov	r1, r0
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	4618      	mov	r0, r3
 800cdee:	68d2      	ldr	r2, [r2, #12]
 800cdf0:	4790      	blx	r2
 800cdf2:	e79b      	b.n	800cd2c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x18>
 800cdf4:	f8bd c012 	ldrh.w	ip, [sp, #18]
 800cdf8:	f8bd b010 	ldrh.w	fp, [sp, #16]
 800cdfc:	eb04 0245 	add.w	r2, r4, r5, lsl #1
 800ce00:	45dc      	cmp	ip, fp
 800ce02:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800ce06:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800ce0a:	d221      	bcs.n	800ce50 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x13c>
 800ce0c:	2110      	movs	r1, #16
 800ce0e:	9803      	ldr	r0, [sp, #12]
 800ce10:	40a9      	lsls	r1, r5
 800ce12:	ea31 0303 	bics.w	r3, r1, r3
 800ce16:	4460      	add	r0, ip
 800ce18:	ebab 0b0c 	sub.w	fp, fp, ip
 800ce1c:	f89d c014 	ldrb.w	ip, [sp, #20]
 800ce20:	d006      	beq.n	800ce30 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 800ce22:	f1bc 0f00 	cmp.w	ip, #0
 800ce26:	d106      	bne.n	800ce36 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x122>
 800ce28:	9200      	str	r2, [sp, #0]
 800ce2a:	4633      	mov	r3, r6
 800ce2c:	4a5e      	ldr	r2, [pc, #376]	; (800cfa8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x294>)
 800ce2e:	e005      	b.n	800ce3c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800ce30:	f1bc 0f00 	cmp.w	ip, #0
 800ce34:	d022      	beq.n	800ce7c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x168>
 800ce36:	9200      	str	r2, [sp, #0]
 800ce38:	4633      	mov	r3, r6
 800ce3a:	464a      	mov	r2, r9
 800ce3c:	4659      	mov	r1, fp
 800ce3e:	f006 f96d 	bl	801311c <snprintf>
 800ce42:	4583      	cmp	fp, r0
 800ce44:	bfa2      	ittt	ge
 800ce46:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800ce4a:	18c0      	addge	r0, r0, r3
 800ce4c:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800ce50:	8aa3      	ldrh	r3, [r4, #20]
 800ce52:	fa23 f30a 	lsr.w	r3, r3, sl
 800ce56:	f013 0303 	ands.w	r3, r3, #3
 800ce5a:	d013      	beq.n	800ce84 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x170>
 800ce5c:	4a55      	ldr	r2, [pc, #340]	; (800cfb4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a0>)
 800ce5e:	4956      	ldr	r1, [pc, #344]	; (800cfb8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a4>)
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	bf08      	it	eq
 800ce64:	460a      	moveq	r2, r1
 800ce66:	3b01      	subs	r3, #1
 800ce68:	4639      	mov	r1, r7
 800ce6a:	bf18      	it	ne
 800ce6c:	2301      	movne	r3, #1
 800ce6e:	a803      	add	r0, sp, #12
 800ce70:	f7ff fdca 	bl	800ca08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ce74:	3501      	adds	r5, #1
 800ce76:	3712      	adds	r7, #18
 800ce78:	3610      	adds	r6, #16
 800ce7a:	e764      	b.n	800cd46 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x32>
 800ce7c:	9200      	str	r2, [sp, #0]
 800ce7e:	4633      	mov	r3, r6
 800ce80:	4a48      	ldr	r2, [pc, #288]	; (800cfa4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800ce82:	e7db      	b.n	800ce3c <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x128>
 800ce84:	4a4d      	ldr	r2, [pc, #308]	; (800cfbc <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x2a8>)
 800ce86:	e7ee      	b.n	800ce66 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x152>
 800ce88:	6861      	ldr	r1, [r4, #4]
 800ce8a:	fa0b f305 	lsl.w	r3, fp, r5
 800ce8e:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 800ce92:	438b      	bics	r3, r1
 800ce94:	bf0c      	ite	eq
 800ce96:	2301      	moveq	r3, #1
 800ce98:	2300      	movne	r3, #0
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	2a00      	cmp	r2, #0
 800ce9e:	bf0c      	ite	eq
 800cea0:	464a      	moveq	r2, r9
 800cea2:	4652      	movne	r2, sl
 800cea4:	a803      	add	r0, sp, #12
 800cea6:	f7ff fdaf 	bl	800ca08 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800ceaa:	3501      	adds	r5, #1
 800ceac:	3612      	adds	r6, #18
 800ceae:	e768      	b.n	800cd82 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x6e>
 800ceb0:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800ceb4:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800ceb8:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800cebc:	42a9      	cmp	r1, r5
 800cebe:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800cec2:	d21e      	bcs.n	800cf02 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1ee>
 800cec4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cec8:	9803      	ldr	r0, [sp, #12]
 800ceca:	40ba      	lsls	r2, r7
 800cecc:	ea32 0c0c 	bics.w	ip, r2, ip
 800ced0:	4408      	add	r0, r1
 800ced2:	eba5 0501 	sub.w	r5, r5, r1
 800ced6:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800ceda:	d004      	beq.n	800cee6 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d2>
 800cedc:	b921      	cbnz	r1, 800cee8 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1d4>
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	465a      	mov	r2, fp
 800cee2:	4633      	mov	r3, r6
 800cee4:	e003      	b.n	800ceee <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1da>
 800cee6:	b179      	cbz	r1, 800cf08 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1f4>
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	4633      	mov	r3, r6
 800ceec:	4a24      	ldr	r2, [pc, #144]	; (800cf80 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>)
 800ceee:	4629      	mov	r1, r5
 800cef0:	f006 f914 	bl	801311c <snprintf>
 800cef4:	4285      	cmp	r5, r0
 800cef6:	bfa2      	ittt	ge
 800cef8:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800cefc:	18c0      	addge	r0, r0, r3
 800cefe:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800cf02:	3701      	adds	r7, #1
 800cf04:	3612      	adds	r6, #18
 800cf06:	e74c      	b.n	800cda2 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	4652      	mov	r2, sl
 800cf0c:	4633      	mov	r3, r6
 800cf0e:	e7ee      	b.n	800ceee <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x1da>
 800cf10:	b34a      	cbz	r2, 800cf66 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x252>
 800cf12:	3b00      	subs	r3, #0
 800cf14:	bf18      	it	ne
 800cf16:	2301      	movne	r3, #1
 800cf18:	4a19      	ldr	r2, [pc, #100]	; (800cf80 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x26c>)
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	4b24      	ldr	r3, [pc, #144]	; (800cfb0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800cf1e:	4621      	mov	r1, r4
 800cf20:	f006 f8fc 	bl	801311c <snprintf>
 800cf24:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cf28:	4284      	cmp	r4, r0
 800cf2a:	bfa4      	itt	ge
 800cf2c:	181b      	addge	r3, r3, r0
 800cf2e:	f8ad 3012 	strhge.w	r3, [sp, #18]
 800cf32:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800cf36:	b17b      	cbz	r3, 800cf58 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x244>
 800cf38:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cf3c:	9b03      	ldr	r3, [sp, #12]
 800cf3e:	4413      	add	r3, r2
 800cf40:	227d      	movs	r2, #125	; 0x7d
 800cf42:	f803 2c01 	strb.w	r2, [r3, #-1]
 800cf46:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cf4a:	9903      	ldr	r1, [sp, #12]
 800cf4c:	54ca      	strb	r2, [r1, r3]
 800cf4e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800cf52:	3301      	adds	r3, #1
 800cf54:	f8ad 3012 	strh.w	r3, [sp, #18]
 800cf58:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800cf5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf5e:	601a      	str	r2, [r3, #0]
 800cf60:	b007      	add	sp, #28
 800cf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf66:	2301      	movs	r3, #1
 800cf68:	4a0e      	ldr	r2, [pc, #56]	; (800cfa4 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x290>)
 800cf6a:	9300      	str	r3, [sp, #0]
 800cf6c:	4b10      	ldr	r3, [pc, #64]	; (800cfb0 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x29c>)
 800cf6e:	e7d6      	b.n	800cf1e <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)+0x20a>
 800cf70:	0801696e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, fp, sp, lr}
 800cf74:	0801725e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r9, ip, sp, lr}
 800cf78:	0801719c 	stmdaeq	r1, {r2, r3, r4, r7, r8, ip, sp, lr}
 800cf7c:	20000cec 	andcs	r0, r0, ip, ror #25
 800cf80:	080157b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
 800cf84:	0801694c 	stmdaeq	r1, {r2, r3, r6, r8, fp, sp, lr}
 800cf88:	0801724c 	stmdaeq	r1, {r2, r3, r6, r9, ip, sp, lr}
 800cf8c:	080153a1 	stmdaeq	r1, {r0, r5, r7, r8, r9, ip, lr}
 800cf90:	080171dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, ip, sp, lr}
 800cf94:	0801672c 	stmdaeq	r1, {r2, r3, r5, r8, r9, sl, sp, lr}
 800cf98:	08016728 	stmdaeq	r1, {r3, r5, r8, r9, sl, sp, lr}
 800cf9c:	080153ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, r9, ip, lr}
 800cfa0:	0801695c 	stmdaeq	r1, {r2, r3, r4, r6, r8, fp, sp, lr}
 800cfa4:	080157c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, ip, lr}
 800cfa8:	080157c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip, lr}
 800cfac:	08015580 	stmdaeq	r1, {r7, r8, sl, ip, lr}
 800cfb0:	08017236 	stmdaeq	r1, {r1, r2, r4, r5, r9, ip, sp, lr}
 800cfb4:	08016719 	stmdaeq	r1, {r0, r3, r4, r8, r9, sl, sp, lr}
 800cfb8:	08016720 	stmdaeq	r1, {r5, r8, r9, sl, sp, lr}
 800cfbc:	08016713 	stmdaeq	r1, {r0, r1, r4, r8, r9, sl, sp, lr}

0800cfc0 <E131Params::Save(char*, unsigned int, unsigned int&)>:
 800cfc0:	b513      	push	{r0, r1, r4, lr}
 800cfc2:	6804      	ldr	r4, [r0, #0]
 800cfc4:	b914      	cbnz	r4, 800cfcc <E131Params::Save(char*, unsigned int, unsigned int&)+0xc>
 800cfc6:	601c      	str	r4, [r3, #0]
 800cfc8:	b002      	add	sp, #8
 800cfca:	bd10      	pop	{r4, pc}
 800cfcc:	9300      	str	r3, [sp, #0]
 800cfce:	4613      	mov	r3, r2
 800cfd0:	460a      	mov	r2, r1
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	f7ff fe9e 	bl	800cd14 <E131Params::Builder(e131params::Params const*, char*, unsigned int, unsigned int&)>
 800cfd8:	e7f6      	b.n	800cfc8 <E131Params::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800cfdc <ArtNetRdmController::GetUidCount(unsigned int)>:
 800cfdc:	4b02      	ldr	r3, [pc, #8]	; (800cfe8 <ArtNetRdmController::GetUidCount(unsigned int)+0xc>)
 800cfde:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800cfe2:	b100      	cbz	r0, 800cfe6 <ArtNetRdmController::GetUidCount(unsigned int)+0xa>
 800cfe4:	6800      	ldr	r0, [r0, #0]
 800cfe6:	4770      	bx	lr
 800cfe8:	20000df4 	strdcs	r0, [r0], -r4

0800cfec <ArtNetRdmController::Copy(unsigned int, unsigned char*)>:
 800cfec:	4b08      	ldr	r3, [pc, #32]	; (800d010 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x24>)
 800cfee:	b530      	push	{r4, r5, lr}
 800cff0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800cff4:	b130      	cbz	r0, 800d004 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x18>
 800cff6:	2300      	movs	r3, #0
 800cff8:	2406      	movs	r4, #6
 800cffa:	6845      	ldr	r5, [r0, #4]
 800cffc:	6801      	ldr	r1, [r0, #0]
 800cffe:	4361      	muls	r1, r4
 800d000:	428b      	cmp	r3, r1
 800d002:	d300      	bcc.n	800d006 <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x1a>
 800d004:	bd30      	pop	{r4, r5, pc}
 800d006:	5ce9      	ldrb	r1, [r5, r3]
 800d008:	54d1      	strb	r1, [r2, r3]
 800d00a:	3301      	adds	r3, #1
 800d00c:	e7f6      	b.n	800cffc <ArtNetRdmController::Copy(unsigned int, unsigned char*)+0x10>
 800d00e:	bf00      	nop
 800d010:	20000df4 	strdcs	r0, [r0], -r4

0800d014 <ArtNetRdmController::Full(unsigned int)>:
 800d014:	4b02      	ldr	r3, [pc, #8]	; (800d020 <ArtNetRdmController::Full(unsigned int)+0xc>)
 800d016:	307c      	adds	r0, #124	; 0x7c
 800d018:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800d01c:	f000 ba54 	b.w	800d4c8 <RDMDiscovery::Full(unsigned int, RDMTod*)>
 800d020:	20000df4 	strdcs	r0, [r0], -r4

0800d024 <ArtNetRdmController::~ArtNetRdmController()>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	4e09      	ldr	r6, [pc, #36]	; (800d04c <ArtNetRdmController::~ArtNetRdmController()+0x28>)
 800d028:	4b09      	ldr	r3, [pc, #36]	; (800d050 <ArtNetRdmController::~ArtNetRdmController()+0x2c>)
 800d02a:	6835      	ldr	r5, [r6, #0]
 800d02c:	4604      	mov	r4, r0
 800d02e:	6003      	str	r3, [r0, #0]
 800d030:	b155      	cbz	r5, 800d048 <ArtNetRdmController::~ArtNetRdmController()+0x24>
 800d032:	2300      	movs	r3, #0
 800d034:	6868      	ldr	r0, [r5, #4]
 800d036:	602b      	str	r3, [r5, #0]
 800d038:	b108      	cbz	r0, 800d03e <ArtNetRdmController::~ArtNetRdmController()+0x1a>
 800d03a:	f005 fd55 	bl	8012ae8 <operator delete[](void*)>
 800d03e:	4628      	mov	r0, r5
 800d040:	f005 fd50 	bl	8012ae4 <operator delete(void*)>
 800d044:	2300      	movs	r3, #0
 800d046:	6033      	str	r3, [r6, #0]
 800d048:	4620      	mov	r0, r4
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
 800d04c:	20000df4 	strdcs	r0, [r0], -r4
 800d050:	080169b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, fp, sp, lr}

0800d054 <ArtNetRdmController::~ArtNetRdmController()>:
 800d054:	b510      	push	{r4, lr}
 800d056:	4604      	mov	r4, r0
 800d058:	f7ff ffe4 	bl	800d024 <ArtNetRdmController::~ArtNetRdmController()>
 800d05c:	4620      	mov	r0, r4
 800d05e:	f005 fd41 	bl	8012ae4 <operator delete(void*)>
 800d062:	4620      	mov	r0, r4
 800d064:	bd10      	pop	{r4, pc}
	...

0800d068 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)>:
 800d068:	b538      	push	{r3, r4, r5, lr}
 800d06a:	460d      	mov	r5, r1
 800d06c:	4614      	mov	r4, r2
 800d06e:	b1f2      	cbz	r2, 800d0ae <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x46>
 800d070:	f006 fb48 	bl	8013704 <fwdgt_counter_reload>
 800d074:	4628      	mov	r0, r5
 800d076:	f000 fe29 	bl	800dccc <Rdm::Receive(unsigned int)>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d1f8      	bne.n	800d070 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x8>
 800d07e:	4621      	mov	r1, r4
 800d080:	7863      	ldrb	r3, [r4, #1]
 800d082:	4a0c      	ldr	r2, [pc, #48]	; (800d0b4 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x4c>)
 800d084:	3b01      	subs	r3, #1
 800d086:	1cd8      	adds	r0, r3, #3
 800d088:	d10c      	bne.n	800d0a4 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x3c>
 800d08a:	7862      	ldrb	r2, [r4, #1]
 800d08c:	4628      	mov	r0, r5
 800d08e:	4909      	ldr	r1, [pc, #36]	; (800d0b4 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x4c>)
 800d090:	3202      	adds	r2, #2
 800d092:	f000 fe2b 	bl	800dcec <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800d096:	4628      	mov	r0, r5
 800d098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d09c:	f64e 2160 	movw	r1, #60000	; 0xea60
 800d0a0:	f000 be1c 	b.w	800dcdc <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d0a4:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d0a8:	f802 0f01 	strb.w	r0, [r2, #1]!
 800d0ac:	e7ea      	b.n	800d084 <ArtNetRdmController::Handler(unsigned int, unsigned char const*)+0x1c>
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	bd38      	pop	{r3, r4, r5, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20000cf0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

0800d0b8 <ArtNetRdmController::ArtNetRdmController(unsigned int)>:
 800d0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0bc:	4604      	mov	r4, r0
 800d0be:	1d05      	adds	r5, r0, #4
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	460f      	mov	r7, r1
 800d0c4:	f000 fa64 	bl	800d590 <RDMDevice::RDMDevice()>
 800d0c8:	4629      	mov	r1, r5
 800d0ca:	2500      	movs	r5, #0
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800d13c <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x84>
 800d0d2:	46a8      	mov	r8, r5
 800d0d4:	46ca      	mov	sl, r9
 800d0d6:	4b1a      	ldr	r3, [pc, #104]	; (800d140 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x88>)
 800d0d8:	f840 3b7c 	str.w	r3, [r0], #124
 800d0dc:	f000 f875 	bl	800d1ca <RDMDiscovery::RDMDiscovery(unsigned char const*)>
 800d0e0:	4b18      	ldr	r3, [pc, #96]	; (800d144 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x8c>)
 800d0e2:	6023      	str	r3, [r4, #0]
 800d0e4:	4b18      	ldr	r3, [pc, #96]	; (800d148 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x90>)
 800d0e6:	601f      	str	r7, [r3, #0]
 800d0e8:	42bd      	cmp	r5, r7
 800d0ea:	d108      	bne.n	800d0fe <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x46>
 800d0ec:	b90d      	cbnz	r5, 800d0f2 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x3a>
 800d0ee:	f8ca 5000 	str.w	r5, [sl]
 800d0f2:	22cc      	movs	r2, #204	; 0xcc
 800d0f4:	4b15      	ldr	r3, [pc, #84]	; (800d14c <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x94>)
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	701a      	strb	r2, [r3, #0]
 800d0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0fe:	2008      	movs	r0, #8
 800d100:	f005 fcf4 	bl	8012aec <operator new(unsigned int)>
 800d104:	4606      	mov	r6, r0
 800d106:	f8c0 8000 	str.w	r8, [r0]
 800d10a:	2030      	movs	r0, #48	; 0x30
 800d10c:	f005 fcf0 	bl	8012af0 <operator new[](unsigned int)>
 800d110:	2200      	movs	r2, #0
 800d112:	6070      	str	r0, [r6, #4]
 800d114:	6873      	ldr	r3, [r6, #4]
 800d116:	480e      	ldr	r0, [pc, #56]	; (800d150 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x98>)
 800d118:	4413      	add	r3, r2
 800d11a:	1e59      	subs	r1, r3, #1
 800d11c:	3305      	adds	r3, #5
 800d11e:	428b      	cmp	r3, r1
 800d120:	d106      	bne.n	800d130 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x78>
 800d122:	3206      	adds	r2, #6
 800d124:	2a30      	cmp	r2, #48	; 0x30
 800d126:	d1f5      	bne.n	800d114 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x5c>
 800d128:	f849 6b04 	str.w	r6, [r9], #4
 800d12c:	3501      	adds	r5, #1
 800d12e:	e7db      	b.n	800d0e8 <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x30>
 800d130:	f810 cb01 	ldrb.w	ip, [r0], #1
 800d134:	f801 cf01 	strb.w	ip, [r1, #1]!
 800d138:	e7f1      	b.n	800d11e <ArtNetRdmController::ArtNetRdmController(unsigned int)+0x66>
 800d13a:	bf00      	nop
 800d13c:	20000df4 	strdcs	r0, [r0], -r4
 800d140:	08016990 	stmdaeq	r1, {r4, r7, r8, fp, sp, lr}
 800d144:	080169b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, fp, sp, lr}
 800d148:	20000df0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800d14c:	20000cf0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 800d150:	080169a8 	stmdaeq	r1, {r3, r5, r7, r8, fp, sp, lr}

0800d154 <memcmp.constprop.0>:
 800d154:	b510      	push	{r4, lr}
 800d156:	1e4a      	subs	r2, r1, #1
 800d158:	1e43      	subs	r3, r0, #1
 800d15a:	3105      	adds	r1, #5
 800d15c:	428a      	cmp	r2, r1
 800d15e:	d101      	bne.n	800d164 <memcmp.constprop.0+0x10>
 800d160:	2000      	movs	r0, #0
 800d162:	e006      	b.n	800d172 <memcmp.constprop.0+0x1e>
 800d164:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800d168:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800d16c:	42a0      	cmp	r0, r4
 800d16e:	d0f5      	beq.n	800d15c <memcmp.constprop.0+0x8>
 800d170:	1b00      	subs	r0, r0, r4
 800d172:	bd10      	pop	{r4, pc}

0800d174 <memcpy.constprop.0.isra.0>:
 800d174:	3801      	subs	r0, #1
 800d176:	1d8b      	adds	r3, r1, #6
 800d178:	4299      	cmp	r1, r3
 800d17a:	d100      	bne.n	800d17e <memcpy.constprop.0.isra.0+0xa>
 800d17c:	4770      	bx	lr
 800d17e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d182:	f800 2f01 	strb.w	r2, [r0, #1]!
 800d186:	e7f7      	b.n	800d178 <memcpy.constprop.0.isra.0+0x4>

0800d188 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>:
 800d188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d18c:	6805      	ldr	r5, [r0, #0]
 800d18e:	4604      	mov	r4, r0
 800d190:	2d08      	cmp	r5, #8
 800d192:	460e      	mov	r6, r1
 800d194:	d017      	beq.n	800d1c6 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800d196:	2700      	movs	r7, #0
 800d198:	f04f 0906 	mov.w	r9, #6
 800d19c:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800d1a0:	42bd      	cmp	r5, r7
 800d1a2:	d108      	bne.n	800d1b6 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x2e>
 800d1a4:	1c6b      	adds	r3, r5, #1
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	fb09 8005 	mla	r0, r9, r5, r8
 800d1ac:	6023      	str	r3, [r4, #0]
 800d1ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b2:	f7ff bfdf 	b.w	800d174 <memcpy.constprop.0.isra.0>
 800d1b6:	4631      	mov	r1, r6
 800d1b8:	fb09 8007 	mla	r0, r9, r7, r8
 800d1bc:	f7ff ffca 	bl	800d154 <memcmp.constprop.0>
 800d1c0:	b108      	cbz	r0, 800d1c6 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x3e>
 800d1c2:	3701      	adds	r7, #1
 800d1c4:	e7ec      	b.n	800d1a0 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]+0x18>
 800d1c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800d1ca <RDMDiscovery::RDMDiscovery(unsigned char const*)>:
 800d1ca:	b538      	push	{r3, r4, r5, lr}
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	460d      	mov	r5, r1
 800d1d0:	f000 faf2 	bl	800d7b8 <RDMMessage::RDMMessage()>
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	f504 7084 	add.w	r0, r4, #264	; 0x108
 800d1da:	f7ff ffcb 	bl	800d174 <memcpy.constprop.0.isra.0>
 800d1de:	4620      	mov	r0, r4
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	f000 fb07 	bl	800d7f4 <RDMMessage::SetSrcUid(unsigned char const*)>
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	bd38      	pop	{r3, r4, r5, pc}

0800d1ea <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>:
 800d1ea:	b570      	push	{r4, r5, r6, lr}
 800d1ec:	780b      	ldrb	r3, [r1, #0]
 800d1ee:	2bfe      	cmp	r3, #254	; 0xfe
 800d1f0:	d001      	beq.n	800d1f6 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xc>
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	bd70      	pop	{r4, r5, r6, pc}
 800d1f6:	7a48      	ldrb	r0, [r1, #9]
 800d1f8:	7a0b      	ldrb	r3, [r1, #8]
 800d1fa:	1e54      	subs	r4, r2, #1
 800d1fc:	4003      	ands	r3, r0
 800d1fe:	7013      	strb	r3, [r2, #0]
 800d200:	7ac8      	ldrb	r0, [r1, #11]
 800d202:	7a8b      	ldrb	r3, [r1, #10]
 800d204:	3205      	adds	r2, #5
 800d206:	4003      	ands	r3, r0
 800d208:	f802 3c04 	strb.w	r3, [r2, #-4]
 800d20c:	7b48      	ldrb	r0, [r1, #13]
 800d20e:	7b0b      	ldrb	r3, [r1, #12]
 800d210:	4003      	ands	r3, r0
 800d212:	f802 3c03 	strb.w	r3, [r2, #-3]
 800d216:	7bc8      	ldrb	r0, [r1, #15]
 800d218:	7b8b      	ldrb	r3, [r1, #14]
 800d21a:	4003      	ands	r3, r0
 800d21c:	f802 3c02 	strb.w	r3, [r2, #-2]
 800d220:	7c48      	ldrb	r0, [r1, #17]
 800d222:	7c0b      	ldrb	r3, [r1, #16]
 800d224:	4003      	ands	r3, r0
 800d226:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d22a:	7cc8      	ldrb	r0, [r1, #19]
 800d22c:	7c8b      	ldrb	r3, [r1, #18]
 800d22e:	4003      	ands	r3, r0
 800d230:	7013      	strb	r3, [r2, #0]
 800d232:	7d0b      	ldrb	r3, [r1, #20]
 800d234:	7d88      	ldrb	r0, [r1, #22]
 800d236:	7dcd      	ldrb	r5, [r1, #23]
 800d238:	7d49      	ldrb	r1, [r1, #21]
 800d23a:	4019      	ands	r1, r3
 800d23c:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800d240:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 800d244:	4433      	add	r3, r6
 800d246:	4294      	cmp	r4, r2
 800d248:	b29b      	uxth	r3, r3
 800d24a:	d1f9      	bne.n	800d240 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x56>
 800d24c:	ebb1 2f13 	cmp.w	r1, r3, lsr #8
 800d250:	d1cf      	bne.n	800d1f2 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0x8>
 800d252:	4028      	ands	r0, r5
 800d254:	b2db      	uxtb	r3, r3
 800d256:	1ac3      	subs	r3, r0, r3
 800d258:	4258      	negs	r0, r3
 800d25a:	4158      	adcs	r0, r3
 800d25c:	e7ca      	b.n	800d1f4 <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)+0xa>
	...

0800d260 <RDMDiscovery::QuickFind(unsigned char const*)>:
 800d260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d262:	4604      	mov	r4, r0
 800d264:	460d      	mov	r5, r1
 800d266:	f006 fa4d 	bl	8013704 <fwdgt_counter_reload>
 800d26a:	2110      	movs	r1, #16
 800d26c:	4620      	mov	r0, r4
 800d26e:	f000 fac9 	bl	800d804 <RDMMessage::SetCc(unsigned char)>
 800d272:	2102      	movs	r1, #2
 800d274:	4620      	mov	r0, r4
 800d276:	f000 fac7 	bl	800d808 <RDMMessage::SetPid(unsigned short)>
 800d27a:	4629      	mov	r1, r5
 800d27c:	4620      	mov	r0, r4
 800d27e:	f000 fabd 	bl	800d7fc <RDMMessage::SetDstUid(unsigned char const*)>
 800d282:	2200      	movs	r2, #0
 800d284:	4620      	mov	r0, r4
 800d286:	4611      	mov	r1, r2
 800d288:	f000 fac2 	bl	800d810 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800d28c:	4620      	mov	r0, r4
 800d28e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800d292:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800d296:	f000 facd 	bl	800d834 <RDMMessage::Send(unsigned int, unsigned int)>
 800d29a:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d29e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800d2a2:	f000 fd1b 	bl	800dcdc <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d2a6:	b168      	cbz	r0, 800d2c4 <RDMDiscovery::QuickFind(unsigned char const*)+0x64>
 800d2a8:	7d03      	ldrb	r3, [r0, #20]
 800d2aa:	2b11      	cmp	r3, #17
 800d2ac:	d10a      	bne.n	800d2c4 <RDMDiscovery::QuickFind(unsigned char const*)+0x64>
 800d2ae:	f100 0109 	add.w	r1, r0, #9
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f7ff ff4e 	bl	800d154 <memcmp.constprop.0>
 800d2b8:	b920      	cbnz	r0, 800d2c4 <RDMDiscovery::QuickFind(unsigned char const*)+0x64>
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800d2c0:	f7ff ff62 	bl	800d188 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800d2c4:	f006 fa1e 	bl	8013704 <fwdgt_counter_reload>
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	491c      	ldr	r1, [pc, #112]	; (800d33c <RDMDiscovery::QuickFind(unsigned char const*)+0xdc>)
 800d2cc:	f000 fa96 	bl	800d7fc <RDMMessage::SetDstUid(unsigned char const*)>
 800d2d0:	2110      	movs	r1, #16
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f000 fa96 	bl	800d804 <RDMMessage::SetCc(unsigned char)>
 800d2d8:	2101      	movs	r1, #1
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f000 fa94 	bl	800d808 <RDMMessage::SetPid(unsigned short)>
 800d2e0:	220c      	movs	r2, #12
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f504 7187 	add.w	r1, r4, #270	; 0x10e
 800d2e8:	f000 fa92 	bl	800d810 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800d2ec:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800d2f6:	f000 fa9d 	bl	800d834 <RDMMessage::Send(unsigned int, unsigned int)>
 800d2fa:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d2fe:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800d302:	f000 fceb 	bl	800dcdc <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d306:	4605      	mov	r5, r0
 800d308:	f006 f9fc 	bl	8013704 <fwdgt_counter_reload>
 800d30c:	b14d      	cbz	r5, 800d322 <RDMDiscovery::QuickFind(unsigned char const*)+0xc2>
 800d30e:	466a      	mov	r2, sp
 800d310:	4629      	mov	r1, r5
 800d312:	4620      	mov	r0, r4
 800d314:	f7ff ff69 	bl	800d1ea <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800d318:	b130      	cbz	r0, 800d328 <RDMDiscovery::QuickFind(unsigned char const*)+0xc8>
 800d31a:	4669      	mov	r1, sp
 800d31c:	4620      	mov	r0, r4
 800d31e:	f7ff ff9f 	bl	800d260 <RDMDiscovery::QuickFind(unsigned char const*)>
 800d322:	2000      	movs	r0, #0
 800d324:	b003      	add	sp, #12
 800d326:	bd30      	pop	{r4, r5, pc}
 800d328:	466a      	mov	r2, sp
 800d32a:	4629      	mov	r1, r5
 800d32c:	4620      	mov	r0, r4
 800d32e:	f7ff ff5c 	bl	800d1ea <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800d332:	f080 0001 	eor.w	r0, r0, #1
 800d336:	b2c0      	uxtb	r0, r0
 800d338:	e7f4      	b.n	800d324 <RDMDiscovery::QuickFind(unsigned char const*)+0xc4>
 800d33a:	bf00      	nop
 800d33c:	080169d0 	stmdaeq	r1, {r4, r6, r7, r8, fp, sp, lr}

0800d340 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>:
 800d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d344:	4691      	mov	r9, r2
 800d346:	469b      	mov	fp, r3
 800d348:	b085      	sub	sp, #20
 800d34a:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 800d34e:	4604      	mov	r4, r0
 800d350:	f006 f9d8 	bl	8013704 <fwdgt_counter_reload>
 800d354:	45c3      	cmp	fp, r8
 800d356:	bf08      	it	eq
 800d358:	45b9      	cmpeq	r9, r7
 800d35a:	ea4f 430b 	mov.w	r3, fp, lsl #16
 800d35e:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800d362:	ea4f 4209 	mov.w	r2, r9, lsl #16
 800d366:	4d56      	ldr	r5, [pc, #344]	; (800d4c0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x180>)
 800d368:	ba12      	rev	r2, r2
 800d36a:	ba1b      	rev	r3, r3
 800d36c:	d139      	bne.n	800d3e2 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0xa2>
 800d36e:	4629      	mov	r1, r5
 800d370:	a802      	add	r0, sp, #8
 800d372:	e9c5 3200 	strd	r3, r2, [r5]
 800d376:	f7ff fefd 	bl	800d174 <memcpy.constprop.0.isra.0>
 800d37a:	2110      	movs	r1, #16
 800d37c:	4620      	mov	r0, r4
 800d37e:	f000 fa41 	bl	800d804 <RDMMessage::SetCc(unsigned char)>
 800d382:	2102      	movs	r1, #2
 800d384:	4620      	mov	r0, r4
 800d386:	f000 fa3f 	bl	800d808 <RDMMessage::SetPid(unsigned short)>
 800d38a:	4620      	mov	r0, r4
 800d38c:	a902      	add	r1, sp, #8
 800d38e:	f000 fa35 	bl	800d7fc <RDMMessage::SetDstUid(unsigned char const*)>
 800d392:	2200      	movs	r2, #0
 800d394:	4620      	mov	r0, r4
 800d396:	4611      	mov	r1, r2
 800d398:	f000 fa3a 	bl	800d810 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800d39c:	4620      	mov	r0, r4
 800d39e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800d3a2:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800d3a6:	f000 fa45 	bl	800d834 <RDMMessage::Send(unsigned int, unsigned int)>
 800d3aa:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d3ae:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800d3b2:	f000 fc93 	bl	800dcdc <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d07f      	beq.n	800d4ba <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x17a>
 800d3ba:	7d03      	ldrb	r3, [r0, #20]
 800d3bc:	2b11      	cmp	r3, #17
 800d3be:	d003      	beq.n	800d3c8 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x88>
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	b005      	add	sp, #20
 800d3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3c8:	f100 0109 	add.w	r1, r0, #9
 800d3cc:	a802      	add	r0, sp, #8
 800d3ce:	f7ff fec1 	bl	800d154 <memcmp.constprop.0>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d1f4      	bne.n	800d3c0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800d3d6:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
 800d3da:	a902      	add	r1, sp, #8
 800d3dc:	f7ff fed4 	bl	800d188 <RDMTod::AddUid(unsigned char const*) [clone .isra.0]>
 800d3e0:	e7ee      	b.n	800d3c0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800d3e2:	f504 7687 	add.w	r6, r4, #270	; 0x10e
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	e9c5 3200 	strd	r3, r2, [r5]
 800d3ee:	f7ff fec1 	bl	800d174 <memcpy.constprop.0.isra.0>
 800d3f2:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800d3f6:	ea43 4317 	orr.w	r3, r3, r7, lsr #16
 800d3fa:	043a      	lsls	r2, r7, #16
 800d3fc:	ba1b      	rev	r3, r3
 800d3fe:	ba12      	rev	r2, r2
 800d400:	4629      	mov	r1, r5
 800d402:	f504 708a 	add.w	r0, r4, #276	; 0x114
 800d406:	e9c5 3200 	strd	r3, r2, [r5]
 800d40a:	f7ff feb3 	bl	800d174 <memcpy.constprop.0.isra.0>
 800d40e:	4620      	mov	r0, r4
 800d410:	492c      	ldr	r1, [pc, #176]	; (800d4c4 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x184>)
 800d412:	f000 f9f3 	bl	800d7fc <RDMMessage::SetDstUid(unsigned char const*)>
 800d416:	2110      	movs	r1, #16
 800d418:	4620      	mov	r0, r4
 800d41a:	f000 f9f3 	bl	800d804 <RDMMessage::SetCc(unsigned char)>
 800d41e:	2101      	movs	r1, #1
 800d420:	4620      	mov	r0, r4
 800d422:	f000 f9f1 	bl	800d808 <RDMMessage::SetPid(unsigned short)>
 800d426:	220c      	movs	r2, #12
 800d428:	4631      	mov	r1, r6
 800d42a:	4620      	mov	r0, r4
 800d42c:	f000 f9f0 	bl	800d810 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800d430:	f241 62a8 	movw	r2, #5800	; 0x16a8
 800d434:	4620      	mov	r0, r4
 800d436:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800d43a:	f000 f9fb 	bl	800d834 <RDMMessage::Send(unsigned int, unsigned int)>
 800d43e:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d442:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800d446:	f000 fc49 	bl	800dcdc <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d44a:	4601      	mov	r1, r0
 800d44c:	2800      	cmp	r0, #0
 800d44e:	d0b7      	beq.n	800d3c0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800d450:	4620      	mov	r0, r4
 800d452:	aa02      	add	r2, sp, #8
 800d454:	f7ff fec9 	bl	800d1ea <RDMDiscovery::IsValidDiscoveryResponse(unsigned char const*, unsigned char*)>
 800d458:	bb40      	cbnz	r0, 800d4ac <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x16c>
 800d45a:	ea4f 0a58 	mov.w	sl, r8, lsr #1
 800d45e:	ea4f 035b 	mov.w	r3, fp, lsr #1
 800d462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d466:	f40a 4a80 	and.w	sl, sl, #16384	; 0x4000
 800d46a:	eb19 0607 	adds.w	r6, r9, r7
 800d46e:	449a      	add	sl, r3
 800d470:	f3c8 020e 	ubfx	r2, r8, #0, #15
 800d474:	f3cb 030e 	ubfx	r3, fp, #0, #15
 800d478:	eb43 0302 	adc.w	r3, r3, r2
 800d47c:	0876      	lsrs	r6, r6, #1
 800d47e:	ea46 76c3 	orr.w	r6, r6, r3, lsl #31
 800d482:	eb0a 0a53 	add.w	sl, sl, r3, lsr #1
 800d486:	464a      	mov	r2, r9
 800d488:	465b      	mov	r3, fp
 800d48a:	4620      	mov	r0, r4
 800d48c:	e9cd 6a00 	strd	r6, sl, [sp]
 800d490:	f7ff ff56 	bl	800d340 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800d494:	1c72      	adds	r2, r6, #1
 800d496:	4605      	mov	r5, r0
 800d498:	e9cd 7800 	strd	r7, r8, [sp]
 800d49c:	4620      	mov	r0, r4
 800d49e:	f14a 0300 	adc.w	r3, sl, #0
 800d4a2:	f7ff ff4d 	bl	800d340 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800d4a6:	4328      	orrs	r0, r5
 800d4a8:	b2c0      	uxtb	r0, r0
 800d4aa:	e78a      	b.n	800d3c2 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	a902      	add	r1, sp, #8
 800d4b0:	f7ff fed6 	bl	800d260 <RDMDiscovery::QuickFind(unsigned char const*)>
 800d4b4:	2800      	cmp	r0, #0
 800d4b6:	d1d0      	bne.n	800d45a <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x11a>
 800d4b8:	e782      	b.n	800d3c0 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x80>
 800d4ba:	2001      	movs	r0, #1
 800d4bc:	e781      	b.n	800d3c2 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)+0x82>
 800d4be:	bf00      	nop
 800d4c0:	20000df8 	strdcs	r0, [r0], -r8
 800d4c4:	080169d0 	stmdaeq	r1, {r4, r6, r7, r8, fp, sp, lr}

0800d4c8 <RDMDiscovery::Full(unsigned int, RDMTod*)>:
 800d4c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	4616      	mov	r6, r2
 800d4d0:	2500      	movs	r5, #0
 800d4d2:	2706      	movs	r7, #6
 800d4d4:	e9c0 1240 	strd	r1, r2, [r0, #256]	; 0x100
 800d4d8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800d58c <RDMDiscovery::Full(unsigned int, RDMTod*)+0xc4>
 800d4dc:	6833      	ldr	r3, [r6, #0]
 800d4de:	429d      	cmp	r5, r3
 800d4e0:	d34c      	bcc.n	800d57c <RDMDiscovery::Full(unsigned int, RDMTod*)+0xb4>
 800d4e2:	2500      	movs	r5, #0
 800d4e4:	6035      	str	r5, [r6, #0]
 800d4e6:	f006 f90d 	bl	8013704 <fwdgt_counter_reload>
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	4927      	ldr	r1, [pc, #156]	; (800d58c <RDMDiscovery::Full(unsigned int, RDMTod*)+0xc4>)
 800d4ee:	f000 f985 	bl	800d7fc <RDMMessage::SetDstUid(unsigned char const*)>
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	2110      	movs	r1, #16
 800d4f6:	f000 f985 	bl	800d804 <RDMMessage::SetCc(unsigned char)>
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	2103      	movs	r1, #3
 800d4fe:	f000 f983 	bl	800d808 <RDMMessage::SetPid(unsigned short)>
 800d502:	462a      	mov	r2, r5
 800d504:	4629      	mov	r1, r5
 800d506:	4620      	mov	r0, r4
 800d508:	f000 f982 	bl	800d810 <RDMMessage::SetPd(unsigned char const*, unsigned char)>
 800d50c:	462a      	mov	r2, r5
 800d50e:	4620      	mov	r0, r4
 800d510:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800d514:	f000 f98e 	bl	800d834 <RDMMessage::Send(unsigned int, unsigned int)>
 800d518:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d51c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800d520:	f000 fbdc 	bl	800dcdc <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d524:	f006 f8ee 	bl	8013704 <fwdgt_counter_reload>
 800d528:	4629      	mov	r1, r5
 800d52a:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800d52e:	f006 ff79 	bl	8014424 <udelay(unsigned int, unsigned int)>
 800d532:	f006 f8e7 	bl	8013704 <fwdgt_counter_reload>
 800d536:	462a      	mov	r2, r5
 800d538:	4620      	mov	r0, r4
 800d53a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800d53e:	f000 f979 	bl	800d834 <RDMMessage::Send(unsigned int, unsigned int)>
 800d542:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 800d546:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 800d54a:	f000 fbc7 	bl	800dcdc <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>
 800d54e:	f006 f8d9 	bl	8013704 <fwdgt_counter_reload>
 800d552:	4629      	mov	r1, r5
 800d554:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800d558:	f006 ff64 	bl	8014424 <udelay(unsigned int, unsigned int)>
 800d55c:	f006 f8d2 	bl	8013704 <fwdgt_counter_reload>
 800d560:	f06f 0201 	mvn.w	r2, #1
 800d564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d568:	4620      	mov	r0, r4
 800d56a:	e9cd 2300 	strd	r2, r3, [sp]
 800d56e:	2200      	movs	r2, #0
 800d570:	2300      	movs	r3, #0
 800d572:	f7ff fee5 	bl	800d340 <RDMDiscovery::FindDevices(unsigned long long, unsigned long long)>
 800d576:	b002      	add	sp, #8
 800d578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d57c:	6870      	ldr	r0, [r6, #4]
 800d57e:	4641      	mov	r1, r8
 800d580:	fb07 0005 	mla	r0, r7, r5, r0
 800d584:	f7ff fdf6 	bl	800d174 <memcpy.constprop.0.isra.0>
 800d588:	3501      	adds	r5, #1
 800d58a:	e7a7      	b.n	800d4dc <RDMDiscovery::Full(unsigned int, RDMTod*)+0x14>
 800d58c:	080169d0 	stmdaeq	r1, {r4, r6, r7, r8, fp, sp, lr}

0800d590 <RDMDevice::RDMDevice()>:
 800d590:	4a33      	ldr	r2, [pc, #204]	; (800d660 <RDMDevice::RDMDevice()+0xd0>)
 800d592:	2300      	movs	r3, #0
 800d594:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d596:	4604      	mov	r4, r0
 800d598:	4611      	mov	r1, r2
 800d59a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800d59e:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800d5a2:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
 800d5a6:	6743      	str	r3, [r0, #116]	; 0x74
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	7818      	ldrb	r0, [r3, #0]
 800d5ac:	3201      	adds	r2, #1
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d1fa      	bne.n	800d5a8 <RDMDevice::RDMDevice()+0x18>
 800d5b2:	1a5b      	subs	r3, r3, r1
 800d5b4:	2b20      	cmp	r3, #32
 800d5b6:	bf28      	it	cs
 800d5b8:	2320      	movcs	r3, #32
 800d5ba:	f104 052a 	add.w	r5, r4, #42	; 0x2a
 800d5be:	4629      	mov	r1, r5
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	4827      	ldr	r0, [pc, #156]	; (800d660 <RDMDevice::RDMDevice()+0xd0>)
 800d5c4:	3a01      	subs	r2, #1
 800d5c6:	d23b      	bcs.n	800d640 <RDMDevice::RDMDevice()+0xb0>
 800d5c8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800d5cc:	4b25      	ldr	r3, [pc, #148]	; (800d664 <RDMDevice::RDMDevice()+0xd4>)
 800d5ce:	4669      	mov	r1, sp
 800d5d0:	781a      	ldrb	r2, [r3, #0]
 800d5d2:	7022      	strb	r2, [r4, #0]
 800d5d4:	785b      	ldrb	r3, [r3, #1]
 800d5d6:	7063      	strb	r3, [r4, #1]
 800d5d8:	4b23      	ldr	r3, [pc, #140]	; (800d668 <RDMDevice::RDMDevice()+0xd8>)
 800d5da:	6818      	ldr	r0, [r3, #0]
 800d5dc:	f002 ff48 	bl	8010470 <Network::MacAddressCopyTo(unsigned char*)>
 800d5e0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d5e4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d5e8:	70a3      	strb	r3, [r4, #2]
 800d5ea:	7263      	strb	r3, [r4, #9]
 800d5ec:	4b1f      	ldr	r3, [pc, #124]	; (800d66c <RDMDevice::RDMDevice()+0xdc>)
 800d5ee:	70e2      	strb	r2, [r4, #3]
 800d5f0:	7222      	strb	r2, [r4, #8]
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d5f8:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800d5fc:	7121      	strb	r1, [r4, #4]
 800d5fe:	7160      	strb	r0, [r4, #5]
 800d600:	71a0      	strb	r0, [r4, #6]
 800d602:	71e1      	strb	r1, [r4, #7]
 800d604:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d608:	2900      	cmp	r1, #0
 800d60a:	d1fb      	bne.n	800d604 <RDMDevice::RDMDevice()+0x74>
 800d60c:	1a9b      	subs	r3, r3, r2
 800d60e:	2b20      	cmp	r3, #32
 800d610:	bf28      	it	cs
 800d612:	2320      	movcs	r3, #32
 800d614:	461a      	mov	r2, r3
 800d616:	4915      	ldr	r1, [pc, #84]	; (800d66c <RDMDevice::RDMDevice()+0xdc>)
 800d618:	3a01      	subs	r2, #1
 800d61a:	d216      	bcs.n	800d64a <RDMDevice::RDMDevice()+0xba>
 800d61c:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
 800d620:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
 800d624:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d626:	2315      	movs	r3, #21
 800d628:	4a11      	ldr	r2, [pc, #68]	; (800d670 <RDMDevice::RDMDevice()+0xe0>)
 800d62a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
 800d62e:	f104 0165 	add.w	r1, r4, #101	; 0x65
 800d632:	f104 0350 	add.w	r3, r4, #80	; 0x50
 800d636:	4299      	cmp	r1, r3
 800d638:	d10c      	bne.n	800d654 <RDMDevice::RDMDevice()+0xc4>
 800d63a:	4620      	mov	r0, r4
 800d63c:	b002      	add	sp, #8
 800d63e:	bd70      	pop	{r4, r5, r6, pc}
 800d640:	f810 6b01 	ldrb.w	r6, [r0], #1
 800d644:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d648:	e7bc      	b.n	800d5c4 <RDMDevice::RDMDevice()+0x34>
 800d64a:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d64e:	f805 0f01 	strb.w	r0, [r5, #1]!
 800d652:	e7e1      	b.n	800d618 <RDMDevice::RDMDevice()+0x88>
 800d654:	f812 0b01 	ldrb.w	r0, [r2], #1
 800d658:	f803 0f01 	strb.w	r0, [r3, #1]!
 800d65c:	e7eb      	b.n	800d636 <RDMDevice::RDMDevice()+0xa6>
 800d65e:	bf00      	nop
 800d660:	08016ac8 	stmdaeq	r1, {r3, r6, r7, r9, fp, sp, lr}
 800d664:	08016ac6 	stmdaeq	r1, {r1, r2, r6, r7, r9, fp, sp, lr}
 800d668:	20009b68 	andcs	r9, r0, r8, ror #22
 800d66c:	08016603 	stmdaeq	r1, {r0, r1, r9, sl, sp, lr}
 800d670:	08016aaa 	stmdaeq	r1, {r1, r3, r5, r7, r9, fp, sp, lr}

0800d674 <RDMDevice::Print()>:
 800d674:	b513      	push	{r0, r1, r4, lr}
 800d676:	4604      	mov	r4, r0
 800d678:	4818      	ldr	r0, [pc, #96]	; (800d6dc <RDMDevice::Print()+0x68>)
 800d67a:	f005 fd27 	bl	80130cc <printf>
 800d67e:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 800d682:	f104 022b 	add.w	r2, r4, #43	; 0x2b
 800d686:	4816      	ldr	r0, [pc, #88]	; (800d6e0 <RDMDevice::Print()+0x6c>)
 800d688:	f005 fd20 	bl	80130cc <printf>
 800d68c:	7862      	ldrb	r2, [r4, #1]
 800d68e:	7821      	ldrb	r1, [r4, #0]
 800d690:	4814      	ldr	r0, [pc, #80]	; (800d6e4 <RDMDevice::Print()+0x70>)
 800d692:	f005 fd1b 	bl	80130cc <printf>
 800d696:	79a3      	ldrb	r3, [r4, #6]
 800d698:	7a22      	ldrb	r2, [r4, #8]
 800d69a:	7a61      	ldrb	r1, [r4, #9]
 800d69c:	9300      	str	r3, [sp, #0]
 800d69e:	4812      	ldr	r0, [pc, #72]	; (800d6e8 <RDMDevice::Print()+0x74>)
 800d6a0:	79e3      	ldrb	r3, [r4, #7]
 800d6a2:	f005 fd13 	bl	80130cc <printf>
 800d6a6:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800d6aa:	f104 020a 	add.w	r2, r4, #10
 800d6ae:	480f      	ldr	r0, [pc, #60]	; (800d6ec <RDMDevice::Print()+0x78>)
 800d6b0:	f005 fd0c 	bl	80130cc <printf>
 800d6b4:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 800d6b8:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800d6bc:	0a09      	lsrs	r1, r1, #8
 800d6be:	480c      	ldr	r0, [pc, #48]	; (800d6f0 <RDMDevice::Print()+0x7c>)
 800d6c0:	f005 fd04 	bl	80130cc <printf>
 800d6c4:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800d6c8:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800d6cc:	4809      	ldr	r0, [pc, #36]	; (800d6f4 <RDMDevice::Print()+0x80>)
 800d6ce:	0a09      	lsrs	r1, r1, #8
 800d6d0:	b002      	add	sp, #8
 800d6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6d6:	f005 bcf9 	b.w	80130cc <printf>
 800d6da:	bf00      	nop
 800d6dc:	080169d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, r8, fp, sp, lr}
 800d6e0:	080169f0 	stmdaeq	r1, {r4, r5, r6, r7, r8, fp, sp, lr}
 800d6e4:	08016a0b 	stmdaeq	r1, {r0, r1, r3, r9, fp, sp, lr}
 800d6e8:	08016a2a 	stmdaeq	r1, {r1, r3, r5, r9, fp, sp, lr}
 800d6ec:	08016a51 	stmdaeq	r1, {r0, r4, r6, r9, fp, sp, lr}
 800d6f0:	08016a6c 	stmdaeq	r1, {r2, r3, r5, r6, r9, fp, sp, lr}
 800d6f4:	08016a8b 	stmdaeq	r1, {r0, r1, r3, r7, r9, fp, sp, lr}

0800d6f8 <memcpy.isra.0>:
 800d6f8:	f005 baac 	b.w	8012c54 <memcpy>

0800d6fc <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)>:
 800d6fc:	b510      	push	{r4, lr}
 800d6fe:	6001      	str	r1, [r0, #0]
 800d700:	2100      	movs	r1, #0
 800d702:	4604      	mov	r4, r0
 800d704:	6041      	str	r1, [r0, #4]
 800d706:	2220      	movs	r2, #32
 800d708:	3008      	adds	r0, #8
 800d70a:	f005 fac5 	bl	8012c98 <memset>
 800d70e:	4b03      	ldr	r3, [pc, #12]	; (800d71c <RDMDeviceParams::RDMDeviceParams(RDMDeviceParamsStore*)+0x20>)
 800d710:	4620      	mov	r0, r4
 800d712:	62a3      	str	r3, [r4, #40]	; 0x28
 800d714:	237f      	movs	r3, #127	; 0x7f
 800d716:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800d71a:	bd10      	pop	{r4, pc}
 800d71c:	ff7fff00 			; <UNDEFINED> instruction: 0xff7fff00

0800d720 <RDMDeviceParams::Load()>:
 800d720:	4601      	mov	r1, r0
 800d722:	6800      	ldr	r0, [r0, #0]
 800d724:	b130      	cbz	r0, 800d734 <RDMDeviceParams::Load()+0x14>
 800d726:	b508      	push	{r3, lr}
 800d728:	6803      	ldr	r3, [r0, #0]
 800d72a:	3104      	adds	r1, #4
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	4798      	blx	r3
 800d730:	2001      	movs	r0, #1
 800d732:	bd08      	pop	{r3, pc}
 800d734:	4770      	bx	lr

0800d736 <RDMDeviceParams::Set(RDMDevice*)>:
 800d736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d738:	6843      	ldr	r3, [r0, #4]
 800d73a:	460c      	mov	r4, r1
 800d73c:	07d9      	lsls	r1, r3, #31
 800d73e:	4605      	mov	r5, r0
 800d740:	d518      	bpl.n	800d774 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800d742:	f890 6028 	ldrb.w	r6, [r0, #40]	; 0x28
 800d746:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800d74a:	2e20      	cmp	r6, #32
 800d74c:	bf28      	it	cs
 800d74e:	2620      	movcs	r6, #32
 800d750:	f100 0108 	add.w	r1, r0, #8
 800d754:	b1e3      	cbz	r3, 800d790 <RDMDeviceParams::Set(RDMDevice*)+0x5a>
 800d756:	f104 070a 	add.w	r7, r4, #10
 800d75a:	4638      	mov	r0, r7
 800d75c:	4632      	mov	r2, r6
 800d75e:	f7ff ffcb 	bl	800d6f8 <memcpy.isra.0>
 800d762:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800d764:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800d768:	b120      	cbz	r0, 800d774 <RDMDeviceParams::Set(RDMDevice*)+0x3e>
 800d76a:	6803      	ldr	r3, [r0, #0]
 800d76c:	4632      	mov	r2, r6
 800d76e:	4639      	mov	r1, r7
 800d770:	689b      	ldr	r3, [r3, #8]
 800d772:	4798      	blx	r3
 800d774:	686b      	ldr	r3, [r5, #4]
 800d776:	079a      	lsls	r2, r3, #30
 800d778:	bf44      	itt	mi
 800d77a:	f8b5 2029 	ldrhmi.w	r2, [r5, #41]	; 0x29
 800d77e:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c
 800d782:	075b      	lsls	r3, r3, #29
 800d784:	bf44      	itt	mi
 800d786:	f8b5 302b 	ldrhmi.w	r3, [r5, #43]	; 0x2b
 800d78a:	f8a4 304e 	strhmi.w	r3, [r4, #78]	; 0x4e
 800d78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d790:	4632      	mov	r2, r6
 800d792:	f104 0051 	add.w	r0, r4, #81	; 0x51
 800d796:	f7ff ffaf 	bl	800d6f8 <memcpy.isra.0>
 800d79a:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
 800d79e:	e7e9      	b.n	800d774 <RDMDeviceParams::Set(RDMDevice*)+0x3e>

0800d7a0 <RDMDeviceParams::Dump()>:
 800d7a0:	4770      	bx	lr

0800d7a2 <memcpy.isra.0>:
 800d7a2:	3801      	subs	r0, #1
 800d7a4:	440a      	add	r2, r1
 800d7a6:	4291      	cmp	r1, r2
 800d7a8:	d100      	bne.n	800d7ac <memcpy.isra.0+0xa>
 800d7aa:	4770      	bx	lr
 800d7ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7b0:	f800 3f01 	strb.w	r3, [r0, #1]!
 800d7b4:	e7f7      	b.n	800d7a6 <memcpy.isra.0+0x4>
	...

0800d7b8 <RDMMessage::RDMMessage()>:
 800d7b8:	23cc      	movs	r3, #204	; 0xcc
 800d7ba:	b570      	push	{r4, r5, r6, lr}
 800d7bc:	7003      	strb	r3, [r0, #0]
 800d7be:	2501      	movs	r5, #1
 800d7c0:	2318      	movs	r3, #24
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	4e0a      	ldr	r6, [pc, #40]	; (800d7f0 <RDMMessage::RDMMessage()+0x38>)
 800d7c6:	7083      	strb	r3, [r0, #2]
 800d7c8:	7045      	strb	r5, [r0, #1]
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	2206      	movs	r2, #6
 800d7ce:	3009      	adds	r0, #9
 800d7d0:	f7ff ffe7 	bl	800d7a2 <memcpy.isra.0>
 800d7d4:	1ce0      	adds	r0, r4, #3
 800d7d6:	2206      	movs	r2, #6
 800d7d8:	4631      	mov	r1, r6
 800d7da:	f7ff ffe2 	bl	800d7a2 <memcpy.isra.0>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	7425      	strb	r5, [r4, #16]
 800d7e4:	7463      	strb	r3, [r4, #17]
 800d7e6:	74a3      	strb	r3, [r4, #18]
 800d7e8:	74e3      	strb	r3, [r4, #19]
 800d7ea:	75e3      	strb	r3, [r4, #23]
 800d7ec:	bd70      	pop	{r4, r5, r6, pc}
 800d7ee:	bf00      	nop
 800d7f0:	08016ac0 	stmdaeq	r1, {r6, r7, r9, fp, sp, lr}

0800d7f4 <RDMMessage::SetSrcUid(unsigned char const*)>:
 800d7f4:	2206      	movs	r2, #6
 800d7f6:	3009      	adds	r0, #9
 800d7f8:	f7ff bfd3 	b.w	800d7a2 <memcpy.isra.0>

0800d7fc <RDMMessage::SetDstUid(unsigned char const*)>:
 800d7fc:	2206      	movs	r2, #6
 800d7fe:	3003      	adds	r0, #3
 800d800:	f7ff bfcf 	b.w	800d7a2 <memcpy.isra.0>

0800d804 <RDMMessage::SetCc(unsigned char)>:
 800d804:	7501      	strb	r1, [r0, #20]
 800d806:	4770      	bx	lr

0800d808 <RDMMessage::SetPid(unsigned short)>:
 800d808:	0a0b      	lsrs	r3, r1, #8
 800d80a:	7543      	strb	r3, [r0, #21]
 800d80c:	7581      	strb	r1, [r0, #22]
 800d80e:	4770      	bx	lr

0800d810 <RDMMessage::SetPd(unsigned char const*, unsigned char)>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	4604      	mov	r4, r0
 800d814:	7883      	ldrb	r3, [r0, #2]
 800d816:	7dc0      	ldrb	r0, [r0, #23]
 800d818:	4615      	mov	r5, r2
 800d81a:	1a1b      	subs	r3, r3, r0
 800d81c:	70a3      	strb	r3, [r4, #2]
 800d81e:	75e2      	strb	r2, [r4, #23]
 800d820:	b121      	cbz	r1, 800d82c <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800d822:	b11a      	cbz	r2, 800d82c <RDMMessage::SetPd(unsigned char const*, unsigned char)+0x1c>
 800d824:	f104 0018 	add.w	r0, r4, #24
 800d828:	f7ff ffbb 	bl	800d7a2 <memcpy.isra.0>
 800d82c:	78a3      	ldrb	r3, [r4, #2]
 800d82e:	441d      	add	r5, r3
 800d830:	70a5      	strb	r5, [r4, #2]
 800d832:	bd38      	pop	{r3, r4, r5, pc}

0800d834 <RDMMessage::Send(unsigned int, unsigned int)>:
 800d834:	460b      	mov	r3, r1
 800d836:	4601      	mov	r1, r0
 800d838:	4618      	mov	r0, r3
 800d83a:	f000 bfb7 	b.w	800e7ac <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>

0800d83e <uuid_unparse_x>:
 800d83e:	4603      	mov	r3, r0
 800d840:	b530      	push	{r4, r5, lr}
 800d842:	4608      	mov	r0, r1
 800d844:	4611      	mov	r1, r2
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	b08f      	sub	sp, #60	; 0x3c
 800d84a:	ba12      	rev	r2, r2
 800d84c:	920a      	str	r2, [sp, #40]	; 0x28
 800d84e:	889a      	ldrh	r2, [r3, #4]
 800d850:	891c      	ldrh	r4, [r3, #8]
 800d852:	ba52      	rev16	r2, r2
 800d854:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800d858:	88da      	ldrh	r2, [r3, #6]
 800d85a:	ba64      	rev16	r4, r4
 800d85c:	ba52      	rev16	r2, r2
 800d85e:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800d862:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800d866:	f103 020a 	add.w	r2, r3, #10
 800d86a:	f10d 0431 	add.w	r4, sp, #49	; 0x31
 800d86e:	3310      	adds	r3, #16
 800d870:	4293      	cmp	r3, r2
 800d872:	d122      	bne.n	800d8ba <uuid_unparse_x+0x7c>
 800d874:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800d878:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800d87c:	9208      	str	r2, [sp, #32]
 800d87e:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800d882:	0a1b      	lsrs	r3, r3, #8
 800d884:	9207      	str	r2, [sp, #28]
 800d886:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	9206      	str	r2, [sp, #24]
 800d88e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800d892:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800d896:	9205      	str	r2, [sp, #20]
 800d898:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	9204      	str	r2, [sp, #16]
 800d8a0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800d8a4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800d8a8:	9203      	str	r2, [sp, #12]
 800d8aa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800d8ae:	9202      	str	r2, [sp, #8]
 800d8b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8b2:	f005 fc1b 	bl	80130ec <sprintf>
 800d8b6:	b00f      	add	sp, #60	; 0x3c
 800d8b8:	bd30      	pop	{r4, r5, pc}
 800d8ba:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d8be:	f804 5f01 	strb.w	r5, [r4, #1]!
 800d8c2:	e7d5      	b.n	800d870 <uuid_unparse_x+0x32>

0800d8c4 <uuid_unparse>:
 800d8c4:	4a01      	ldr	r2, [pc, #4]	; (800d8cc <uuid_unparse+0x8>)
 800d8c6:	f7ff bfba 	b.w	800d83e <uuid_unparse_x>
 800d8ca:	bf00      	nop
 800d8cc:	08016ae4 	stmdaeq	r1, {r2, r5, r6, r7, r9, fp, sp, lr}

0800d8d0 <DmxSend::~DmxSend()>:
 800d8d0:	4770      	bx	lr
	...

0800d8d4 <DmxSend::Start(unsigned int)>:
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	b430      	push	{r4, r5}
 800d8d8:	4c08      	ldr	r4, [pc, #32]	; (800d8fc <DmxSend::Start(unsigned int)+0x28>)
 800d8da:	fa03 f001 	lsl.w	r0, r3, r1
 800d8de:	7822      	ldrb	r2, [r4, #0]
 800d8e0:	ea30 0502 	bics.w	r5, r0, r2
 800d8e4:	d007      	beq.n	800d8f6 <DmxSend::Start(unsigned int)+0x22>
 800d8e6:	4302      	orrs	r2, r0
 800d8e8:	4805      	ldr	r0, [pc, #20]	; (800d900 <DmxSend::Start(unsigned int)+0x2c>)
 800d8ea:	7022      	strb	r2, [r4, #0]
 800d8ec:	6800      	ldr	r0, [r0, #0]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	bc30      	pop	{r4, r5}
 800d8f2:	f000 bcff 	b.w	800e2f4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800d8f6:	bc30      	pop	{r4, r5}
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	20000e00 	andcs	r0, r0, r0, lsl #28
 800d900:	20001230 	andcs	r1, r0, r0, lsr r2

0800d904 <DmxSend::Stop(unsigned int)>:
 800d904:	2201      	movs	r2, #1
 800d906:	b410      	push	{r4}
 800d908:	4809      	ldr	r0, [pc, #36]	; (800d930 <DmxSend::Stop(unsigned int)+0x2c>)
 800d90a:	408a      	lsls	r2, r1
 800d90c:	7803      	ldrb	r3, [r0, #0]
 800d90e:	ea03 0402 	and.w	r4, r3, r2
 800d912:	439a      	bics	r2, r3
 800d914:	d109      	bne.n	800d92a <DmxSend::Stop(unsigned int)+0x26>
 800d916:	ea23 0304 	bic.w	r3, r3, r4
 800d91a:	7003      	strb	r3, [r0, #0]
 800d91c:	2300      	movs	r3, #0
 800d91e:	4805      	ldr	r0, [pc, #20]	; (800d934 <DmxSend::Stop(unsigned int)+0x30>)
 800d920:	461a      	mov	r2, r3
 800d922:	6800      	ldr	r0, [r0, #0]
 800d924:	bc10      	pop	{r4}
 800d926:	f000 bce5 	b.w	800e2f4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800d92a:	bc10      	pop	{r4}
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	20000e00 	andcs	r0, r0, r0, lsl #28
 800d934:	20001230 	andcs	r1, r0, r0, lsr r2

0800d938 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800d938:	b11b      	cbz	r3, 800d942 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xa>
 800d93a:	4802      	ldr	r0, [pc, #8]	; (800d944 <DmxSend::SetData(unsigned int, unsigned char const*, unsigned int)+0xc>)
 800d93c:	6800      	ldr	r0, [r0, #0]
 800d93e:	f000 be39 	b.w	800e5b4 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>
 800d942:	4770      	bx	lr
 800d944:	20001230 	andcs	r1, r0, r0, lsr r2

0800d948 <DmxSend::Blackout(bool)>:
 800d948:	4b01      	ldr	r3, [pc, #4]	; (800d950 <DmxSend::Blackout(bool)+0x8>)
 800d94a:	6818      	ldr	r0, [r3, #0]
 800d94c:	f000 be58 	b.w	800e600 <Dmx::Blackout()>
 800d950:	20001230 	andcs	r1, r0, r0, lsr r2

0800d954 <DmxSend::FullOn()>:
 800d954:	4b01      	ldr	r3, [pc, #4]	; (800d95c <DmxSend::FullOn()+0x8>)
 800d956:	6818      	ldr	r0, [r3, #0]
 800d958:	f000 be7a 	b.w	800e650 <Dmx::FullOn()>
 800d95c:	20001230 	andcs	r1, r0, r0, lsr r2

0800d960 <DmxSend::Print()>:
 800d960:	b510      	push	{r4, lr}
 800d962:	4c0e      	ldr	r4, [pc, #56]	; (800d99c <DmxSend::Print()+0x3c>)
 800d964:	480e      	ldr	r0, [pc, #56]	; (800d9a0 <DmxSend::Print()+0x40>)
 800d966:	f005 fbb1 	bl	80130cc <printf>
 800d96a:	6823      	ldr	r3, [r4, #0]
 800d96c:	480d      	ldr	r0, [pc, #52]	; (800d9a4 <DmxSend::Print()+0x44>)
 800d96e:	6819      	ldr	r1, [r3, #0]
 800d970:	f005 fbac 	bl	80130cc <printf>
 800d974:	6823      	ldr	r3, [r4, #0]
 800d976:	480c      	ldr	r0, [pc, #48]	; (800d9a8 <DmxSend::Print()+0x48>)
 800d978:	6859      	ldr	r1, [r3, #4]
 800d97a:	f005 fba7 	bl	80130cc <printf>
 800d97e:	6823      	ldr	r3, [r4, #0]
 800d980:	490a      	ldr	r1, [pc, #40]	; (800d9ac <DmxSend::Print()+0x4c>)
 800d982:	689b      	ldr	r3, [r3, #8]
 800d984:	480a      	ldr	r0, [pc, #40]	; (800d9b0 <DmxSend::Print()+0x50>)
 800d986:	fbb1 f1f3 	udiv	r1, r1, r3
 800d98a:	f005 fb9f 	bl	80130cc <printf>
 800d98e:	6823      	ldr	r3, [r4, #0]
 800d990:	4808      	ldr	r0, [pc, #32]	; (800d9b4 <DmxSend::Print()+0x54>)
 800d992:	8a19      	ldrh	r1, [r3, #16]
 800d994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d998:	f005 bb98 	b.w	80130cc <printf>
 800d99c:	20001230 	andcs	r1, r0, r0, lsr r2
 800d9a0:	08016b15 	stmdaeq	r1, {r0, r2, r4, r8, r9, fp, sp, lr}
 800d9a4:	08016b1f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r8, r9, fp, sp, lr}
 800d9a8:	08016b33 	stmdaeq	r1, {r0, r1, r4, r5, r8, r9, fp, sp, lr}
 800d9ac:	000f4240 	andeq	r4, pc, r0, asr #4
 800d9b0:	08016b47 	stmdaeq	r1, {r0, r1, r2, r6, r8, r9, fp, sp, lr}
 800d9b4:	08016b5b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r8, r9, fp, sp, lr}

0800d9b8 <DmxSend::~DmxSend()>:
 800d9b8:	b510      	push	{r4, lr}
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	f005 f892 	bl	8012ae4 <operator delete(void*)>
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	bd10      	pop	{r4, pc}

0800d9c4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800d9c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9c6:	88c6      	ldrh	r6, [r0, #6]
 800d9c8:	8885      	ldrh	r5, [r0, #4]
 800d9ca:	42ae      	cmp	r6, r5
 800d9cc:	d216      	bcs.n	800d9fc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	6800      	ldr	r0, [r0, #0]
 800d9d2:	1bad      	subs	r5, r5, r6
 800d9d4:	4430      	add	r0, r6
 800d9d6:	7a26      	ldrb	r6, [r4, #8]
 800d9d8:	b923      	cbnz	r3, 800d9e4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800d9da:	b926      	cbnz	r6, 800d9e6 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800d9dc:	9200      	str	r2, [sp, #0]
 800d9de:	460b      	mov	r3, r1
 800d9e0:	4a09      	ldr	r2, [pc, #36]	; (800da08 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800d9e2:	e003      	b.n	800d9ec <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800d9e4:	b166      	cbz	r6, 800da00 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	9200      	str	r2, [sp, #0]
 800d9ea:	4a08      	ldr	r2, [pc, #32]	; (800da0c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	f005 fb95 	bl	801311c <snprintf>
 800d9f2:	4285      	cmp	r5, r0
 800d9f4:	bfa2      	ittt	ge
 800d9f6:	88e3      	ldrhge	r3, [r4, #6]
 800d9f8:	181b      	addge	r3, r3, r0
 800d9fa:	80e3      	strhge	r3, [r4, #6]
 800d9fc:	b002      	add	sp, #8
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
 800da00:	9200      	str	r2, [sp, #0]
 800da02:	460b      	mov	r3, r1
 800da04:	4a02      	ldr	r2, [pc, #8]	; (800da10 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800da06:	e7f1      	b.n	800d9ec <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800da08:	080157c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip, lr}
 800da0c:	080157b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
 800da10:	080157c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, ip, lr}

0800da14 <DmxParams::DmxParams(DmxParamsStore*)>:
 800da14:	6001      	str	r1, [r0, #0]
 800da16:	2100      	movs	r1, #0
 800da18:	4a03      	ldr	r2, [pc, #12]	; (800da28 <DmxParams::DmxParams(DmxParamsStore*)+0x14>)
 800da1a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800da1e:	f64f 7228 	movw	r2, #65320	; 0xff28
 800da22:	8182      	strh	r2, [r0, #12]
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	000c00b0 	strheq	r0, [ip], -r0	; <UNPREDICTABLE>

0800da2c <DmxParams::Load()>:
 800da2c:	b508      	push	{r3, lr}
 800da2e:	2300      	movs	r3, #0
 800da30:	4601      	mov	r1, r0
 800da32:	6043      	str	r3, [r0, #4]
 800da34:	6800      	ldr	r0, [r0, #0]
 800da36:	b120      	cbz	r0, 800da42 <DmxParams::Load()+0x16>
 800da38:	6803      	ldr	r3, [r0, #0]
 800da3a:	3104      	adds	r1, #4
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	4798      	blx	r3
 800da40:	2001      	movs	r0, #1
 800da42:	bd08      	pop	{r3, pc}

0800da44 <DmxParams::Load(char const*, unsigned int)>:
 800da44:	6803      	ldr	r3, [r0, #0]
 800da46:	b1d3      	cbz	r3, 800da7e <DmxParams::Load(char const*, unsigned int)+0x3a>
 800da48:	2300      	movs	r3, #0
 800da4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da4c:	460d      	mov	r5, r1
 800da4e:	4616      	mov	r6, r2
 800da50:	4604      	mov	r4, r0
 800da52:	6043      	str	r3, [r0, #4]
 800da54:	4602      	mov	r2, r0
 800da56:	490a      	ldr	r1, [pc, #40]	; (800da80 <DmxParams::Load(char const*, unsigned int)+0x3c>)
 800da58:	4668      	mov	r0, sp
 800da5a:	f004 fb1b 	bl	8012094 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800da5e:	4632      	mov	r2, r6
 800da60:	4629      	mov	r1, r5
 800da62:	4668      	mov	r0, sp
 800da64:	f004 fb1a 	bl	801209c <ReadConfigFile::Read(char const*, unsigned int)>
 800da68:	4621      	mov	r1, r4
 800da6a:	f851 0b04 	ldr.w	r0, [r1], #4
 800da6e:	6803      	ldr	r3, [r0, #0]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	4798      	blx	r3
 800da74:	4668      	mov	r0, sp
 800da76:	f004 fb10 	bl	801209a <ReadConfigFile::~ReadConfigFile()>
 800da7a:	b002      	add	sp, #8
 800da7c:	bd70      	pop	{r4, r5, r6, pc}
 800da7e:	4770      	bx	lr
 800da80:	0800db51 	stmdaeq	r0, {r0, r4, r6, r8, r9, fp, ip, lr, pc}

0800da84 <DmxParams::callbackFunction(char const*)>:
 800da84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da86:	460d      	mov	r5, r1
 800da88:	4604      	mov	r4, r0
 800da8a:	492d      	ldr	r1, [pc, #180]	; (800db40 <DmxParams::callbackFunction(char const*)+0xbc>)
 800da8c:	4628      	mov	r0, r5
 800da8e:	f10d 0206 	add.w	r2, sp, #6
 800da92:	f004 fb91 	bl	80121b8 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800da96:	b988      	cbnz	r0, 800dabc <DmxParams::callbackFunction(char const*)+0x38>
 800da98:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800da9c:	6863      	ldr	r3, [r4, #4]
 800da9e:	2a5b      	cmp	r2, #91	; 0x5b
 800daa0:	d907      	bls.n	800dab2 <DmxParams::callbackFunction(char const*)+0x2e>
 800daa2:	2ab0      	cmp	r2, #176	; 0xb0
 800daa4:	d005      	beq.n	800dab2 <DmxParams::callbackFunction(char const*)+0x2e>
 800daa6:	8122      	strh	r2, [r4, #8]
 800daa8:	f043 0301 	orr.w	r3, r3, #1
 800daac:	6063      	str	r3, [r4, #4]
 800daae:	b003      	add	sp, #12
 800dab0:	bd30      	pop	{r4, r5, pc}
 800dab2:	22b0      	movs	r2, #176	; 0xb0
 800dab4:	f023 0301 	bic.w	r3, r3, #1
 800dab8:	8122      	strh	r2, [r4, #8]
 800daba:	e7f7      	b.n	800daac <DmxParams::callbackFunction(char const*)+0x28>
 800dabc:	4628      	mov	r0, r5
 800dabe:	4921      	ldr	r1, [pc, #132]	; (800db44 <DmxParams::callbackFunction(char const*)+0xc0>)
 800dac0:	f10d 0206 	add.w	r2, sp, #6
 800dac4:	f004 fb78 	bl	80121b8 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800dac8:	b968      	cbnz	r0, 800dae6 <DmxParams::callbackFunction(char const*)+0x62>
 800daca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dace:	6863      	ldr	r3, [r4, #4]
 800dad0:	2a0c      	cmp	r2, #12
 800dad2:	bf93      	iteet	ls
 800dad4:	220c      	movls	r2, #12
 800dad6:	8162      	strhhi	r2, [r4, #10]
 800dad8:	f043 0302 	orrhi.w	r3, r3, #2
 800dadc:	8162      	strhls	r2, [r4, #10]
 800dade:	bf98      	it	ls
 800dae0:	f023 0302 	bicls.w	r3, r3, #2
 800dae4:	e7e2      	b.n	800daac <DmxParams::callbackFunction(char const*)+0x28>
 800dae6:	4628      	mov	r0, r5
 800dae8:	4917      	ldr	r1, [pc, #92]	; (800db48 <DmxParams::callbackFunction(char const*)+0xc4>)
 800daea:	f10d 0205 	add.w	r2, sp, #5
 800daee:	f004 fb81 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800daf2:	b950      	cbnz	r0, 800db0a <DmxParams::callbackFunction(char const*)+0x86>
 800daf4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800daf8:	6863      	ldr	r3, [r4, #4]
 800dafa:	2a28      	cmp	r2, #40	; 0x28
 800dafc:	7322      	strb	r2, [r4, #12]
 800dafe:	bf14      	ite	ne
 800db00:	f043 0304 	orrne.w	r3, r3, #4
 800db04:	f023 0304 	biceq.w	r3, r3, #4
 800db08:	e7d0      	b.n	800daac <DmxParams::callbackFunction(char const*)+0x28>
 800db0a:	4628      	mov	r0, r5
 800db0c:	490f      	ldr	r1, [pc, #60]	; (800db4c <DmxParams::callbackFunction(char const*)+0xc8>)
 800db0e:	f10d 0206 	add.w	r2, sp, #6
 800db12:	f004 fb51 	bl	80121b8 <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800db16:	2800      	cmp	r0, #0
 800db18:	d1c9      	bne.n	800daae <DmxParams::callbackFunction(char const*)+0x2a>
 800db1a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800db1e:	6863      	ldr	r3, [r4, #4]
 800db20:	1e91      	subs	r1, r2, #2
 800db22:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800db26:	bf2f      	iteee	cs
 800db28:	22ff      	movcs	r2, #255	; 0xff
 800db2a:	0852      	lsrcc	r2, r2, #1
 800db2c:	f102 32ff 	addcc.w	r2, r2, #4294967295	; 0xffffffff
 800db30:	7362      	strbcc	r2, [r4, #13]
 800db32:	bf32      	itee	cc
 800db34:	f043 0308 	orrcc.w	r3, r3, #8
 800db38:	7362      	strbcs	r2, [r4, #13]
 800db3a:	f023 0308 	biccs.w	r3, r3, #8
 800db3e:	e7b5      	b.n	800daac <DmxParams::callbackFunction(char const*)+0x28>
 800db40:	08016ba8 	stmdaeq	r1, {r3, r5, r7, r8, r9, fp, sp, lr}
 800db44:	08016bcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, fp, sp, lr}
 800db48:	08016bbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
 800db4c:	08016bb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r8, r9, fp, sp, lr}

0800db50 <DmxParams::staticCallbackFunction(void*, char const*)>:
 800db50:	f7ff bf98 	b.w	800da84 <DmxParams::callbackFunction(char const*)>

0800db54 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>:
 800db54:	b570      	push	{r4, r5, r6, lr}
 800db56:	4604      	mov	r4, r0
 800db58:	4615      	mov	r5, r2
 800db5a:	461e      	mov	r6, r3
 800db5c:	b086      	sub	sp, #24
 800db5e:	3004      	adds	r0, #4
 800db60:	b369      	cbz	r1, 800dbbe <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x6a>
 800db62:	220a      	movs	r2, #10
 800db64:	f005 f881 	bl	8012c6a <memmove>
 800db68:	462a      	mov	r2, r5
 800db6a:	4633      	mov	r3, r6
 800db6c:	4932      	ldr	r1, [pc, #200]	; (800dc38 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe4>)
 800db6e:	a803      	add	r0, sp, #12
 800db70:	f004 f9f0 	bl	8011f54 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800db74:	6863      	ldr	r3, [r4, #4]
 800db76:	8922      	ldrh	r2, [r4, #8]
 800db78:	4930      	ldr	r1, [pc, #192]	; (800dc3c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xe8>)
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	a803      	add	r0, sp, #12
 800db80:	f7ff ff20 	bl	800d9c4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800db84:	6863      	ldr	r3, [r4, #4]
 800db86:	8962      	ldrh	r2, [r4, #10]
 800db88:	492d      	ldr	r1, [pc, #180]	; (800dc40 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xec>)
 800db8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800db8e:	a803      	add	r0, sp, #12
 800db90:	f7ff ff18 	bl	800d9c4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800db94:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800db98:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800db9c:	7b23      	ldrb	r3, [r4, #12]
 800db9e:	42aa      	cmp	r2, r5
 800dba0:	6861      	ldr	r1, [r4, #4]
 800dba2:	d221      	bcs.n	800dbe8 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x94>
 800dba4:	9803      	ldr	r0, [sp, #12]
 800dba6:	0749      	lsls	r1, r1, #29
 800dba8:	4410      	add	r0, r2
 800dbaa:	eba5 0502 	sub.w	r5, r5, r2
 800dbae:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800dbb2:	d40b      	bmi.n	800dbcc <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x78>
 800dbb4:	b95a      	cbnz	r2, 800dbce <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x7a>
 800dbb6:	9300      	str	r3, [sp, #0]
 800dbb8:	4a22      	ldr	r2, [pc, #136]	; (800dc44 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf0>)
 800dbba:	4b23      	ldr	r3, [pc, #140]	; (800dc48 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800dbbc:	e00a      	b.n	800dbd4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 800dbbe:	6823      	ldr	r3, [r4, #0]
 800dbc0:	4601      	mov	r1, r0
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	68d2      	ldr	r2, [r2, #12]
 800dbc8:	4790      	blx	r2
 800dbca:	e7cd      	b.n	800db68 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x14>
 800dbcc:	b37a      	cbz	r2, 800dc2e <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xda>
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	4a1e      	ldr	r2, [pc, #120]	; (800dc4c <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800dbd2:	4b1d      	ldr	r3, [pc, #116]	; (800dc48 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800dbd4:	4629      	mov	r1, r5
 800dbd6:	f005 faa1 	bl	801311c <snprintf>
 800dbda:	4285      	cmp	r5, r0
 800dbdc:	bfa2      	ittt	ge
 800dbde:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800dbe2:	18c0      	addge	r0, r0, r3
 800dbe4:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800dbe8:	7b62      	ldrb	r2, [r4, #13]
 800dbea:	6863      	ldr	r3, [r4, #4]
 800dbec:	3201      	adds	r2, #1
 800dbee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800dbf2:	4917      	ldr	r1, [pc, #92]	; (800dc50 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800dbf4:	0052      	lsls	r2, r2, #1
 800dbf6:	a803      	add	r0, sp, #12
 800dbf8:	f7ff fee4 	bl	800d9c4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800dbfc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800dc00:	b17b      	cbz	r3, 800dc22 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xce>
 800dc02:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800dc06:	9b03      	ldr	r3, [sp, #12]
 800dc08:	4413      	add	r3, r2
 800dc0a:	227d      	movs	r2, #125	; 0x7d
 800dc0c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800dc10:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800dc14:	9903      	ldr	r1, [sp, #12]
 800dc16:	54ca      	strb	r2, [r1, r3]
 800dc18:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	f8ad 3012 	strh.w	r3, [sp, #18]
 800dc22:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800dc26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc28:	601a      	str	r2, [r3, #0]
 800dc2a:	b006      	add	sp, #24
 800dc2c:	bd70      	pop	{r4, r5, r6, pc}
 800dc2e:	9300      	str	r3, [sp, #0]
 800dc30:	4a08      	ldr	r2, [pc, #32]	; (800dc54 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800dc32:	4b05      	ldr	r3, [pc, #20]	; (800dc48 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0xf4>)
 800dc34:	e7ce      	b.n	800dbd4 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)+0x80>
 800dc36:	bf00      	nop
 800dc38:	08016bd5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, fp, sp, lr}
 800dc3c:	08016ba8 	stmdaeq	r1, {r3, r5, r7, r8, r9, fp, sp, lr}
 800dc40:	08016bcc 	stmdaeq	r1, {r2, r3, r6, r7, r8, r9, fp, sp, lr}
 800dc44:	080157c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip, lr}
 800dc48:	08016bbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
 800dc4c:	080157b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
 800dc50:	08016bb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r8, r9, fp, sp, lr}
 800dc54:	080157c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, ip, lr}

0800dc58 <DmxParams::Save(char*, unsigned int, unsigned int&)>:
 800dc58:	b513      	push	{r0, r1, r4, lr}
 800dc5a:	6804      	ldr	r4, [r0, #0]
 800dc5c:	b914      	cbnz	r4, 800dc64 <DmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800dc5e:	601c      	str	r4, [r3, #0]
 800dc60:	b002      	add	sp, #8
 800dc62:	bd10      	pop	{r4, pc}
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	4613      	mov	r3, r2
 800dc68:	460a      	mov	r2, r1
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	f7ff ff72 	bl	800db54 <DmxParams::Builder(TDmxParams const*, char*, unsigned int, unsigned int&)>
 800dc70:	e7f6      	b.n	800dc60 <DmxParams::Save(char*, unsigned int, unsigned int&)+0x8>
	...

0800dc74 <DmxParams::Set(Dmx*)>:
 800dc74:	b538      	push	{r3, r4, r5, lr}
 800dc76:	6843      	ldr	r3, [r0, #4]
 800dc78:	4604      	mov	r4, r0
 800dc7a:	07d8      	lsls	r0, r3, #31
 800dc7c:	460d      	mov	r5, r1
 800dc7e:	d503      	bpl.n	800dc88 <DmxParams::Set(Dmx*)+0x14>
 800dc80:	4628      	mov	r0, r5
 800dc82:	8921      	ldrh	r1, [r4, #8]
 800dc84:	f000 fc72 	bl	800e56c <Dmx::SetDmxBreakTime(unsigned int)>
 800dc88:	6863      	ldr	r3, [r4, #4]
 800dc8a:	0799      	lsls	r1, r3, #30
 800dc8c:	d503      	bpl.n	800dc96 <DmxParams::Set(Dmx*)+0x22>
 800dc8e:	4628      	mov	r0, r5
 800dc90:	8961      	ldrh	r1, [r4, #10]
 800dc92:	f000 fc75 	bl	800e580 <Dmx::SetDmxMabTime(unsigned int)>
 800dc96:	6863      	ldr	r3, [r4, #4]
 800dc98:	075a      	lsls	r2, r3, #29
 800dc9a:	d507      	bpl.n	800dcac <DmxParams::Set(Dmx*)+0x38>
 800dc9c:	7b21      	ldrb	r1, [r4, #12]
 800dc9e:	b111      	cbz	r1, 800dca6 <DmxParams::Set(Dmx*)+0x32>
 800dca0:	4b08      	ldr	r3, [pc, #32]	; (800dcc4 <DmxParams::Set(Dmx*)+0x50>)
 800dca2:	fbb3 f1f1 	udiv	r1, r3, r1
 800dca6:	4628      	mov	r0, r5
 800dca8:	f000 fc30 	bl	800e50c <Dmx::SetDmxPeriodTime(unsigned int)>
 800dcac:	6863      	ldr	r3, [r4, #4]
 800dcae:	071b      	lsls	r3, r3, #28
 800dcb0:	d507      	bpl.n	800dcc2 <DmxParams::Set(Dmx*)+0x4e>
 800dcb2:	7b61      	ldrb	r1, [r4, #13]
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcba:	3101      	adds	r1, #1
 800dcbc:	0049      	lsls	r1, r1, #1
 800dcbe:	f000 bc69 	b.w	800e594 <Dmx::SetDmxSlots(unsigned short)>
 800dcc2:	bd38      	pop	{r3, r4, r5, pc}
 800dcc4:	000f4240 	andeq	r4, pc, r0, asr #4

0800dcc8 <DmxParams::Dump()>:
 800dcc8:	4770      	bx	lr
	...

0800dccc <Rdm::Receive(unsigned int)>:
 800dccc:	4b02      	ldr	r3, [pc, #8]	; (800dcd8 <Rdm::Receive(unsigned int)+0xc>)
 800dcce:	4601      	mov	r1, r0
 800dcd0:	6818      	ldr	r0, [r3, #0]
 800dcd2:	f000 bd47 	b.w	800e764 <Dmx::RdmReceive(unsigned int)>
 800dcd6:	bf00      	nop
 800dcd8:	20001230 	andcs	r1, r0, r0, lsr r2

0800dcdc <Rdm::ReceiveTimeOut(unsigned int, unsigned short)>:
 800dcdc:	4b02      	ldr	r3, [pc, #8]	; (800dce8 <Rdm::ReceiveTimeOut(unsigned int, unsigned short)+0xc>)
 800dcde:	460a      	mov	r2, r1
 800dce0:	4601      	mov	r1, r0
 800dce2:	6818      	ldr	r0, [r3, #0]
 800dce4:	f000 bd50 	b.w	800e788 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>
 800dce8:	20001230 	andcs	r1, r0, r0, lsr r2

0800dcec <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800dcec:	2300      	movs	r3, #0
 800dcee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	460e      	mov	r6, r1
 800dcf6:	4617      	mov	r7, r2
 800dcf8:	4d0b      	ldr	r5, [pc, #44]	; (800dd28 <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)+0x3c>)
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	4601      	mov	r1, r0
 800dcfe:	6828      	ldr	r0, [r5, #0]
 800dd00:	f000 faf8 	bl	800e2f4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800dd04:	463b      	mov	r3, r7
 800dd06:	4632      	mov	r2, r6
 800dd08:	4621      	mov	r1, r4
 800dd0a:	6828      	ldr	r0, [r5, #0]
 800dd0c:	f000 fce4 	bl	800e6d8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>
 800dd10:	2100      	movs	r1, #0
 800dd12:	2004      	movs	r0, #4
 800dd14:	f006 fb86 	bl	8014424 <udelay(unsigned int, unsigned int)>
 800dd18:	2301      	movs	r3, #1
 800dd1a:	4621      	mov	r1, r4
 800dd1c:	6828      	ldr	r0, [r5, #0]
 800dd1e:	461a      	mov	r2, r3
 800dd20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd24:	f000 bae6 	b.w	800e2f4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800dd28:	20001230 	andcs	r1, r0, r0, lsr r2

0800dd2c <USART2_IRQHandler>:
 800dd2c:	b510      	push	{r4, lr}
 800dd2e:	f3bf 8f5f 	dmb	sy
 800dd32:	2408      	movs	r4, #8
 800dd34:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800dd38:	498c      	ldr	r1, [pc, #560]	; (800df6c <USART2_IRQHandler+0x240>)
 800dd3a:	f8c1 4c10 	str.w	r4, [r1, #3088]	; 0xc10
 800dd3e:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800dd42:	f013 0f02 	tst.w	r3, #2
 800dd46:	4b8a      	ldr	r3, [pc, #552]	; (800df70 <USART2_IRQHandler+0x244>)
 800dd48:	d016      	beq.n	800dd78 <USART2_IRQHandler+0x4c>
 800dd4a:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
 800dd4e:	f020 0002 	bic.w	r0, r0, #2
 800dd52:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
 800dd56:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800dd60:	2202      	movs	r2, #2
 800dd62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800dd66:	2310      	movs	r3, #16
 800dd68:	f8c1 4c14 	str.w	r4, [r1, #3092]	; 0xc14
 800dd6c:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 800dd70:	2320      	movs	r3, #32
 800dd72:	f8c1 3c14 	str.w	r3, [r1, #3092]	; 0xc14
 800dd76:	bd10      	pop	{r4, pc}
 800dd78:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 800dd7c:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 800dd80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd84:	280a      	cmp	r0, #10
 800dd86:	f200 80ec 	bhi.w	800df62 <USART2_IRQHandler+0x236>
 800dd8a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800dd8e:	00ea000b 	rsceq	r0, sl, fp
 800dd92:	00ea0019 	rsceq	r0, sl, r9, lsl r0
 800dd96:	005c0039 	subseq	r0, ip, r9, lsr r0
 800dd9a:	00870077 	addeq	r0, r7, r7, ror r0
 800dd9e:	00ba00a8 	adcseq	r0, sl, r8, lsr #1
 800dda2:	210800ce 	smlabtcs	r8, lr, r0, r0
 800dda6:	701a      	strb	r2, [r3, #0]
 800dda8:	2201      	movs	r2, #1
 800ddaa:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800ddae:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800ddb2:	2208      	movs	r2, #8
 800ddb4:	4b6d      	ldr	r3, [pc, #436]	; (800df6c <USART2_IRQHandler+0x240>)
 800ddb6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800ddba:	f3bf 8f5f 	dmb	sy
 800ddbe:	e7da      	b.n	800dd76 <USART2_IRQHandler+0x4a>
 800ddc0:	b11a      	cbz	r2, 800ddca <USART2_IRQHandler+0x9e>
 800ddc2:	2acc      	cmp	r2, #204	; 0xcc
 800ddc4:	d016      	beq.n	800ddf4 <USART2_IRQHandler+0xc8>
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	e065      	b.n	800de96 <USART2_IRQHandler+0x16a>
 800ddca:	701a      	strb	r2, [r3, #0]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800ddd2:	4a68      	ldr	r2, [pc, #416]	; (800df74 <USART2_IRQHandler+0x248>)
 800ddd4:	6851      	ldr	r1, [r2, #4]
 800ddd6:	3101      	adds	r1, #1
 800ddd8:	6051      	str	r1, [r2, #4]
 800ddda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ddde:	f8d1 1424 	ldr.w	r1, [r1, #1060]	; 0x424
 800dde2:	60d1      	str	r1, [r2, #12]
 800dde4:	2204      	movs	r2, #4
 800dde6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800ddea:	2210      	movs	r2, #16
 800ddec:	4b5f      	ldr	r3, [pc, #380]	; (800df6c <USART2_IRQHandler+0x240>)
 800ddee:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800ddf2:	e7de      	b.n	800ddb2 <USART2_IRQHandler+0x86>
 800ddf4:	701a      	strb	r2, [r3, #0]
 800ddf6:	4a60      	ldr	r2, [pc, #384]	; (800df78 <USART2_IRQHandler+0x24c>)
 800ddf8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800ddfc:	2205      	movs	r2, #5
 800ddfe:	e7f2      	b.n	800dde6 <USART2_IRQHandler+0xba>
 800de00:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800de04:	b288      	uxth	r0, r1
 800de06:	541a      	strb	r2, [r3, r0]
 800de08:	1c4a      	adds	r2, r1, #1
 800de0a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800de0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800de12:	d90b      	bls.n	800de2c <USART2_IRQHandler+0x100>
 800de14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800de1c:	2200      	movs	r2, #0
 800de1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800de22:	2210      	movs	r2, #16
 800de24:	4b51      	ldr	r3, [pc, #324]	; (800df6c <USART2_IRQHandler+0x240>)
 800de26:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800de2a:	e7c2      	b.n	800ddb2 <USART2_IRQHandler+0x86>
 800de2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800de30:	4850      	ldr	r0, [pc, #320]	; (800df74 <USART2_IRQHandler+0x248>)
 800de32:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
 800de36:	68c3      	ldr	r3, [r0, #12]
 800de38:	60c1      	str	r1, [r0, #12]
 800de3a:	ebc3 0341 	rsb	r3, r3, r1, lsl #1
 800de3e:	3304      	adds	r3, #4
 800de40:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
 800de44:	e7b5      	b.n	800ddb2 <USART2_IRQHandler+0x86>
 800de46:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 800de4a:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 800de4e:	541a      	strb	r2, [r3, r0]
 800de50:	1c41      	adds	r1, r0, #1
 800de52:	3817      	subs	r0, #23
 800de54:	b289      	uxth	r1, r1
 800de56:	4422      	add	r2, r4
 800de58:	28e7      	cmp	r0, #231	; 0xe7
 800de5a:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800de5e:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800de62:	d808      	bhi.n	800de76 <USART2_IRQHandler+0x14a>
 800de64:	789a      	ldrb	r2, [r3, #2]
 800de66:	428a      	cmp	r2, r1
 800de68:	d105      	bne.n	800de76 <USART2_IRQHandler+0x14a>
 800de6a:	2206      	movs	r2, #6
 800de6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800de70:	2220      	movs	r2, #32
 800de72:	4b3e      	ldr	r3, [pc, #248]	; (800df6c <USART2_IRQHandler+0x240>)
 800de74:	e7bb      	b.n	800ddee <USART2_IRQHandler+0xc2>
 800de76:	29ff      	cmp	r1, #255	; 0xff
 800de78:	d99b      	bls.n	800ddb2 <USART2_IRQHandler+0x86>
 800de7a:	e7a4      	b.n	800ddc6 <USART2_IRQHandler+0x9a>
 800de7c:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800de80:	545a      	strb	r2, [r3, r1]
 800de82:	3101      	adds	r1, #1
 800de84:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800de88:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 800de8c:	eba1 2202 	sub.w	r2, r1, r2, lsl #8
 800de90:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800de94:	2207      	movs	r2, #7
 800de96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800de9a:	e78a      	b.n	800ddb2 <USART2_IRQHandler+0x86>
 800de9c:	2020      	movs	r0, #32
 800de9e:	f8c1 0c14 	str.w	r0, [r1, #3092]	; 0xc14
 800dea2:	f8b3 4206 	ldrh.w	r4, [r3, #518]	; 0x206
 800dea6:	f8b3 0204 	ldrh.w	r0, [r3, #516]	; 0x204
 800deaa:	541a      	strb	r2, [r3, r0]
 800deac:	1aa2      	subs	r2, r4, r2
 800deae:	b292      	uxth	r2, r2
 800deb0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800deb4:	b912      	cbnz	r2, 800debc <USART2_IRQHandler+0x190>
 800deb6:	785a      	ldrb	r2, [r3, #1]
 800deb8:	2a01      	cmp	r2, #1
 800deba:	d003      	beq.n	800dec4 <USART2_IRQHandler+0x198>
 800debc:	2200      	movs	r2, #0
 800debe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800dec2:	e780      	b.n	800ddc6 <USART2_IRQHandler+0x9a>
 800dec4:	3001      	adds	r0, #1
 800dec6:	4a2d      	ldr	r2, [pc, #180]	; (800df7c <USART2_IRQHandler+0x250>)
 800dec8:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 800decc:	f8a3 0204 	strh.w	r0, [r3, #516]	; 0x204
 800ded0:	6850      	ldr	r0, [r2, #4]
 800ded2:	4a2b      	ldr	r2, [pc, #172]	; (800df80 <USART2_IRQHandler+0x254>)
 800ded4:	6010      	str	r0, [r2, #0]
 800ded6:	2210      	movs	r2, #16
 800ded8:	f8c1 2c14 	str.w	r2, [r1, #3092]	; 0xc14
 800dedc:	e773      	b.n	800ddc6 <USART2_IRQHandler+0x9a>
 800dede:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800dee2:	2aaa      	cmp	r2, #170	; 0xaa
 800dee4:	545a      	strb	r2, [r3, r1]
 800dee6:	f101 0101 	add.w	r1, r1, #1
 800deea:	b289      	uxth	r1, r1
 800deec:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800def0:	d002      	beq.n	800def8 <USART2_IRQHandler+0x1cc>
 800def2:	2909      	cmp	r1, #9
 800def4:	f47f af5d 	bne.w	800ddb2 <USART2_IRQHandler+0x86>
 800def8:	2200      	movs	r2, #0
 800defa:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800defe:	2209      	movs	r2, #9
 800df00:	e7c9      	b.n	800de96 <USART2_IRQHandler+0x16a>
 800df02:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800df06:	545a      	strb	r2, [r3, r1]
 800df08:	f8b3 2208 	ldrh.w	r2, [r3, #520]	; 0x208
 800df0c:	3101      	adds	r1, #1
 800df0e:	3201      	adds	r2, #1
 800df10:	b292      	uxth	r2, r2
 800df12:	2a0c      	cmp	r2, #12
 800df14:	f8a3 1204 	strh.w	r1, [r3, #516]	; 0x204
 800df18:	d002      	beq.n	800df20 <USART2_IRQHandler+0x1f4>
 800df1a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800df1e:	e748      	b.n	800ddb2 <USART2_IRQHandler+0x86>
 800df20:	2200      	movs	r2, #0
 800df22:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
 800df26:	220a      	movs	r2, #10
 800df28:	e7b5      	b.n	800de96 <USART2_IRQHandler+0x16a>
 800df2a:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 800df2e:	545a      	strb	r2, [r3, r1]
 800df30:	1c4a      	adds	r2, r1, #1
 800df32:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 800df36:	b292      	uxth	r2, r2
 800df38:	3101      	adds	r1, #1
 800df3a:	b289      	uxth	r1, r1
 800df3c:	2904      	cmp	r1, #4
 800df3e:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800df42:	f8a3 1208 	strh.w	r1, [r3, #520]	; 0x208
 800df46:	f47f af34 	bne.w	800ddb2 <USART2_IRQHandler+0x86>
 800df4a:	2100      	movs	r1, #0
 800df4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800df50:	f8c3 120c 	str.w	r1, [r3, #524]	; 0x20c
 800df54:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
 800df58:	4b08      	ldr	r3, [pc, #32]	; (800df7c <USART2_IRQHandler+0x250>)
 800df5a:	685a      	ldr	r2, [r3, #4]
 800df5c:	4b08      	ldr	r3, [pc, #32]	; (800df80 <USART2_IRQHandler+0x254>)
 800df5e:	601a      	str	r2, [r3, #0]
 800df60:	e727      	b.n	800ddb2 <USART2_IRQHandler+0x86>
 800df62:	2200      	movs	r2, #0
 800df64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800df68:	e795      	b.n	800de96 <USART2_IRQHandler+0x16a>
 800df6a:	bf00      	nop
 800df6c:	40010000 	andmi	r0, r1, r0
 800df70:	20000e04 	andcs	r0, r0, r4, lsl #28
 800df74:	2000121c 	andcs	r1, r0, ip, lsl r2
 800df78:	00cc0001 	sbceq	r0, ip, r1
 800df7c:	e0001000 	and	r1, r0, r0
 800df80:	20001234 	andcs	r1, r0, r4, lsr r2

0800df84 <TIMER1_IRQHandler>:
 800df84:	b538      	push	{r3, r4, r5, lr}
 800df86:	f3bf 8f5f 	dmb	sy
 800df8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df8e:	2008      	movs	r0, #8
 800df90:	4a24      	ldr	r2, [pc, #144]	; (800e024 <TIMER1_IRQHandler+0xa0>)
 800df92:	691c      	ldr	r4, [r3, #16]
 800df94:	4924      	ldr	r1, [pc, #144]	; (800e028 <TIMER1_IRQHandler+0xa4>)
 800df96:	8813      	ldrh	r3, [r2, #0]
 800df98:	f8c1 0c10 	str.w	r0, [r1, #3088]	; 0xc10
 800df9c:	07a1      	lsls	r1, r4, #30
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	d51d      	bpl.n	800dfde <TIMER1_IRQHandler+0x5a>
 800dfa2:	07dd      	lsls	r5, r3, #31
 800dfa4:	d50f      	bpl.n	800dfc6 <TIMER1_IRQHandler+0x42>
 800dfa6:	8813      	ldrh	r3, [r2, #0]
 800dfa8:	4d20      	ldr	r5, [pc, #128]	; (800e02c <TIMER1_IRQHandler+0xa8>)
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfb0:	8013      	strh	r3, [r2, #0]
 800dfb2:	2110      	movs	r1, #16
 800dfb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfb8:	2203      	movs	r2, #3
 800dfba:	4628      	mov	r0, r5
 800dfbc:	f005 fbd4 	bl	8013768 <gpio_init>
 800dfc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfc4:	616b      	str	r3, [r5, #20]
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800dfcc:	f005 fea9 	bl	8013d22 <timer_interrupt_flag_clear>
 800dfd0:	2208      	movs	r2, #8
 800dfd2:	4b15      	ldr	r3, [pc, #84]	; (800e028 <TIMER1_IRQHandler+0xa4>)
 800dfd4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800dfd8:	f3bf 8f5f 	dmb	sy
 800dfdc:	bd38      	pop	{r3, r4, r5, pc}
 800dfde:	0760      	lsls	r0, r4, #29
 800dfe0:	d509      	bpl.n	800dff6 <TIMER1_IRQHandler+0x72>
 800dfe2:	05d9      	lsls	r1, r3, #23
 800dfe4:	d5ef      	bpl.n	800dfc6 <TIMER1_IRQHandler+0x42>
 800dfe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfea:	2203      	movs	r2, #3
 800dfec:	2118      	movs	r1, #24
 800dfee:	480f      	ldr	r0, [pc, #60]	; (800e02c <TIMER1_IRQHandler+0xa8>)
 800dff0:	f005 fbba 	bl	8013768 <gpio_init>
 800dff4:	e7e7      	b.n	800dfc6 <TIMER1_IRQHandler+0x42>
 800dff6:	0722      	lsls	r2, r4, #28
 800dff8:	d5e5      	bpl.n	800dfc6 <TIMER1_IRQHandler+0x42>
 800dffa:	05db      	lsls	r3, r3, #23
 800dffc:	d5e3      	bpl.n	800dfc6 <TIMER1_IRQHandler+0x42>
 800dffe:	4b0c      	ldr	r3, [pc, #48]	; (800e030 <TIMER1_IRQHandler+0xac>)
 800e000:	2180      	movs	r1, #128	; 0x80
 800e002:	69da      	ldr	r2, [r3, #28]
 800e004:	480b      	ldr	r0, [pc, #44]	; (800e034 <TIMER1_IRQHandler+0xb0>)
 800e006:	f022 0201 	bic.w	r2, r2, #1
 800e00a:	61da      	str	r2, [r3, #28]
 800e00c:	4a0a      	ldr	r2, [pc, #40]	; (800e038 <TIMER1_IRQHandler+0xb4>)
 800e00e:	629a      	str	r2, [r3, #40]	; 0x28
 800e010:	f8b2 2202 	ldrh.w	r2, [r2, #514]	; 0x202
 800e014:	621a      	str	r2, [r3, #32]
 800e016:	69da      	ldr	r2, [r3, #28]
 800e018:	f042 0201 	orr.w	r2, r2, #1
 800e01c:	61da      	str	r2, [r3, #28]
 800e01e:	f005 ff1f 	bl	8013e60 <usart_dma_transmit_config>
 800e022:	e7d0      	b.n	800dfc6 <TIMER1_IRQHandler+0x42>
 800e024:	2000122c 	andcs	r1, r0, ip, lsr #4
 800e028:	40010000 	andmi	r0, r1, r0
 800e02c:	40011000 	andmi	r1, r1, r0
 800e030:	40020000 	andmi	r0, r2, r0
 800e034:	40004800 	andmi	r4, r0, r0, lsl #16
 800e038:	20001014 	andcs	r1, r0, r4, lsl r0

0800e03c <TIMER2_IRQHandler>:
 800e03c:	b508      	push	{r3, lr}
 800e03e:	f3bf 8f5f 	dmb	sy
 800e042:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e046:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 800e04a:	078b      	lsls	r3, r1, #30
 800e04c:	d511      	bpl.n	800e072 <TIMER2_IRQHandler+0x36>
 800e04e:	4b0c      	ldr	r3, [pc, #48]	; (800e080 <TIMER2_IRQHandler+0x44>)
 800e050:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800e054:	2a04      	cmp	r2, #4
 800e056:	d10c      	bne.n	800e072 <TIMER2_IRQHandler+0x36>
 800e058:	2200      	movs	r2, #0
 800e05a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e05e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e062:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e066:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800e06a:	2210      	movs	r2, #16
 800e06c:	4b05      	ldr	r3, [pc, #20]	; (800e084 <TIMER2_IRQHandler+0x48>)
 800e06e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e072:	4805      	ldr	r0, [pc, #20]	; (800e088 <TIMER2_IRQHandler+0x4c>)
 800e074:	f005 fe55 	bl	8013d22 <timer_interrupt_flag_clear>
 800e078:	f3bf 8f5f 	dmb	sy
 800e07c:	bd08      	pop	{r3, pc}
 800e07e:	bf00      	nop
 800e080:	20000e04 	andcs	r0, r0, r4, lsl #28
 800e084:	40010000 	andmi	r0, r1, r0
 800e088:	40000400 	andmi	r0, r0, r0, lsl #8

0800e08c <TIMER3_IRQHandler>:
 800e08c:	b508      	push	{r3, lr}
 800e08e:	f3bf 8f5f 	dmb	sy
 800e092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e096:	4804      	ldr	r0, [pc, #16]	; (800e0a8 <TIMER3_IRQHandler+0x1c>)
 800e098:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 800e09c:	f005 fe41 	bl	8013d22 <timer_interrupt_flag_clear>
 800e0a0:	f3bf 8f5f 	dmb	sy
 800e0a4:	bd08      	pop	{r3, pc}
 800e0a6:	bf00      	nop
 800e0a8:	40000800 	andmi	r0, r0, r0, lsl #16

0800e0ac <TIMER6_IRQHandler>:
 800e0ac:	b508      	push	{r3, lr}
 800e0ae:	f3bf 8f5f 	dmb	sy
 800e0b2:	4b07      	ldr	r3, [pc, #28]	; (800e0d0 <TIMER6_IRQHandler+0x24>)
 800e0b4:	4807      	ldr	r0, [pc, #28]	; (800e0d4 <TIMER6_IRQHandler+0x28>)
 800e0b6:	685a      	ldr	r2, [r3, #4]
 800e0b8:	6899      	ldr	r1, [r3, #8]
 800e0ba:	1a52      	subs	r2, r2, r1
 800e0bc:	601a      	str	r2, [r3, #0]
 800e0be:	685a      	ldr	r2, [r3, #4]
 800e0c0:	2101      	movs	r1, #1
 800e0c2:	609a      	str	r2, [r3, #8]
 800e0c4:	f005 fe2d 	bl	8013d22 <timer_interrupt_flag_clear>
 800e0c8:	f3bf 8f5f 	dmb	sy
 800e0cc:	bd08      	pop	{r3, pc}
 800e0ce:	bf00      	nop
 800e0d0:	2000121c 	andcs	r1, r0, ip, lsl r2
 800e0d4:	40001400 	andmi	r1, r0, r0, lsl #8

0800e0d8 <Dmx::ClearData(unsigned int)>:
 800e0d8:	f44f 7301 	mov.w	r3, #516	; 0x204
 800e0dc:	b510      	push	{r4, lr}
 800e0de:	2400      	movs	r4, #0
 800e0e0:	4a08      	ldr	r2, [pc, #32]	; (800e104 <Dmx::ClearData(unsigned int)+0x2c>)
 800e0e2:	fb03 2301 	mla	r3, r3, r1, r2
 800e0e6:	f203 2002 	addw	r0, r3, #514	; 0x202
 800e0ea:	f823 4b02 	strh.w	r4, [r3], #2
 800e0ee:	4283      	cmp	r3, r0
 800e0f0:	d1fb      	bne.n	800e0ea <Dmx::ClearData(unsigned int)+0x12>
 800e0f2:	f44f 7301 	mov.w	r3, #516	; 0x204
 800e0f6:	fb03 2201 	mla	r2, r3, r1, r2
 800e0fa:	f240 2301 	movw	r3, #513	; 0x201
 800e0fe:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 800e102:	bd10      	pop	{r4, pc}
 800e104:	20001014 	andcs	r1, r0, r4, lsl r0

0800e108 <Dmx::StartData(unsigned int, unsigned int)>:
 800e108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e10a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e10e:	6943      	ldr	r3, [r0, #20]
 800e110:	460c      	mov	r4, r1
 800e112:	4615      	mov	r5, r2
 800e114:	b085      	sub	sp, #20
 800e116:	2b00      	cmp	r3, #0
 800e118:	d16c      	bne.n	800e1f4 <Dmx::StartData(unsigned int, unsigned int)+0xec>
 800e11a:	4e48      	ldr	r6, [pc, #288]	; (800e23c <Dmx::StartData(unsigned int, unsigned int)+0x134>)
 800e11c:	8834      	ldrh	r4, [r6, #0]
 800e11e:	b2a4      	uxth	r4, r4
 800e120:	2c00      	cmp	r4, #0
 800e122:	d15b      	bne.n	800e1dc <Dmx::StartData(unsigned int, unsigned int)+0xd4>
 800e124:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800e128:	f005 fbb6 	bl	8013898 <rcu_periph_clock_enable>
 800e12c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e130:	f005 fd00 	bl	8013b34 <timer_deinit>
 800e134:	236b      	movs	r3, #107	; 0x6b
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	4b41      	ldr	r3, [pc, #260]	; (800e240 <Dmx::StartData(unsigned int, unsigned int)+0x138>)
 800e13a:	4669      	mov	r1, sp
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e142:	9302      	str	r3, [sp, #8]
 800e144:	f8ad 4004 	strh.w	r4, [sp, #4]
 800e148:	f8ad 400c 	strh.w	r4, [sp, #12]
 800e14c:	f88d 400e 	strb.w	r4, [sp, #14]
 800e150:	f005 fd52 	bl	8013bf8 <timer_init>
 800e154:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e158:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e15c:	f005 fde4 	bl	8013d28 <timer_flag_clear>
 800e160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e164:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e168:	f005 fddb 	bl	8013d22 <timer_interrupt_flag_clear>
 800e16c:	2210      	movs	r2, #16
 800e16e:	4621      	mov	r1, r4
 800e170:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e174:	f005 fd9d 	bl	8013cb2 <timer_channel_output_mode_config>
 800e178:	2210      	movs	r2, #16
 800e17a:	2101      	movs	r1, #1
 800e17c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e180:	f005 fd97 	bl	8013cb2 <timer_channel_output_mode_config>
 800e184:	4f2f      	ldr	r7, [pc, #188]	; (800e244 <Dmx::StartData(unsigned int, unsigned int)+0x13c>)
 800e186:	2210      	movs	r2, #16
 800e188:	2102      	movs	r1, #2
 800e18a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e18e:	f005 fd90 	bl	8013cb2 <timer_channel_output_mode_config>
 800e192:	4622      	mov	r2, r4
 800e194:	4621      	mov	r1, r4
 800e196:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e19a:	f005 fdb0 	bl	8013cfe <timer_channel_output_pulse_value_config>
 800e19e:	2101      	movs	r1, #1
 800e1a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e1a4:	883a      	ldrh	r2, [r7, #0]
 800e1a6:	f005 fdaa 	bl	8013cfe <timer_channel_output_pulse_value_config>
 800e1aa:	4b27      	ldr	r3, [pc, #156]	; (800e248 <Dmx::StartData(unsigned int, unsigned int)+0x140>)
 800e1ac:	683a      	ldr	r2, [r7, #0]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2102      	movs	r1, #2
 800e1b2:	441a      	add	r2, r3
 800e1b4:	b292      	uxth	r2, r2
 800e1b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e1ba:	f005 fda0 	bl	8013cfe <timer_channel_output_pulse_value_config>
 800e1be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e1c2:	210e      	movs	r1, #14
 800e1c4:	f005 fda9 	bl	8013d1a <timer_interrupt_enable>
 800e1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1cc:	4b1f      	ldr	r3, [pc, #124]	; (800e24c <Dmx::StartData(unsigned int, unsigned int)+0x144>)
 800e1ce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800e1d2:	f883 431c 	strb.w	r4, [r3, #796]	; 0x31c
 800e1d6:	601a      	str	r2, [r3, #0]
 800e1d8:	f005 fd66 	bl	8013ca8 <timer_enable>
 800e1dc:	2201      	movs	r2, #1
 800e1de:	8831      	ldrh	r1, [r6, #0]
 800e1e0:	fa02 f305 	lsl.w	r3, r2, r5
 800e1e4:	430b      	orrs	r3, r1
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	8033      	strh	r3, [r6, #0]
 800e1ea:	4b19      	ldr	r3, [pc, #100]	; (800e250 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800e1ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1f0:	b005      	add	sp, #20
 800e1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1f4:	f44f 7204 	mov.w	r2, #528	; 0x210
 800e1f8:	4b16      	ldr	r3, [pc, #88]	; (800e254 <Dmx::StartData(unsigned int, unsigned int)+0x14c>)
 800e1fa:	fb02 3305 	mla	r3, r2, r5, r3
 800e1fe:	2200      	movs	r2, #0
 800e200:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e204:	2107      	movs	r1, #7
 800e206:	4620      	mov	r0, r4
 800e208:	f005 fe30 	bl	8013e6c <usart_flag_get>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d0f9      	beq.n	800e204 <Dmx::StartData(unsigned int, unsigned int)+0xfc>
 800e210:	4620      	mov	r0, r4
 800e212:	4911      	ldr	r1, [pc, #68]	; (800e258 <Dmx::StartData(unsigned int, unsigned int)+0x150>)
 800e214:	f005 fe4c 	bl	8013eb0 <usart_interrupt_flag_clear>
 800e218:	f240 3105 	movw	r1, #773	; 0x305
 800e21c:	4620      	mov	r0, r4
 800e21e:	f005 fe30 	bl	8013e82 <usart_interrupt_enable>
 800e222:	2202      	movs	r2, #2
 800e224:	4b0a      	ldr	r3, [pc, #40]	; (800e250 <Dmx::StartData(unsigned int, unsigned int)+0x148>)
 800e226:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e22a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e22e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800e232:	f043 0302 	orr.w	r3, r3, #2
 800e236:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800e23a:	e7d9      	b.n	800e1f0 <Dmx::StartData(unsigned int, unsigned int)+0xe8>
 800e23c:	2000122c 	andcs	r1, r0, ip, lsr #4
 800e240:	20000000 	andcs	r0, r0, r0
 800e244:	20000008 	andcs	r0, r0, r8
 800e248:	20000004 	andcs	r0, r0, r4
 800e24c:	e000e100 	and	lr, r0, r0, lsl #2
 800e250:	20001218 	andcs	r1, r0, r8, lsl r2
 800e254:	20000e04 	andcs	r0, r0, r4, lsl #28
 800e258:	00050305 	andeq	r0, r5, r5, lsl #6

0800e25c <Dmx::StopData(unsigned int, unsigned int)>:
 800e25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e260:	4f21      	ldr	r7, [pc, #132]	; (800e2e8 <Dmx::StopData(unsigned int, unsigned int)+0x8c>)
 800e262:	4688      	mov	r8, r1
 800e264:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 800e268:	4614      	mov	r4, r2
 800e26a:	b323      	cbz	r3, 800e2b6 <Dmx::StopData(unsigned int, unsigned int)+0x5a>
 800e26c:	6943      	ldr	r3, [r0, #20]
 800e26e:	bb23      	cbnz	r3, 800e2ba <Dmx::StopData(unsigned int, unsigned int)+0x5e>
 800e270:	2601      	movs	r6, #1
 800e272:	4d1e      	ldr	r5, [pc, #120]	; (800e2ec <Dmx::StopData(unsigned int, unsigned int)+0x90>)
 800e274:	fa06 f202 	lsl.w	r2, r6, r2
 800e278:	882b      	ldrh	r3, [r5, #0]
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	ea23 0302 	bic.w	r3, r3, r2
 800e280:	802b      	strh	r3, [r5, #0]
 800e282:	f3bf 8f5f 	dmb	sy
 800e286:	882b      	ldrh	r3, [r5, #0]
 800e288:	f104 0208 	add.w	r2, r4, #8
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	4096      	lsls	r6, r2
 800e290:	ea36 0303 	bics.w	r3, r6, r3
 800e294:	d105      	bne.n	800e2a2 <Dmx::StopData(unsigned int, unsigned int)+0x46>
 800e296:	2107      	movs	r1, #7
 800e298:	4640      	mov	r0, r8
 800e29a:	f005 fde7 	bl	8013e6c <usart_flag_get>
 800e29e:	2801      	cmp	r0, #1
 800e2a0:	d1f9      	bne.n	800e296 <Dmx::StopData(unsigned int, unsigned int)+0x3a>
 800e2a2:	882b      	ldrh	r3, [r5, #0]
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	ea23 0306 	bic.w	r3, r3, r6
 800e2aa:	802b      	strh	r3, [r5, #0]
 800e2ac:	f3bf 8f4f 	dsb	sy
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	f847 3024 	str.w	r3, [r7, r4, lsl #2]
 800e2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2ba:	f240 3105 	movw	r1, #773	; 0x305
 800e2be:	4640      	mov	r0, r8
 800e2c0:	f005 fdea 	bl	8013e98 <usart_interrupt_disable>
 800e2c4:	f44f 7204 	mov.w	r2, #528	; 0x210
 800e2c8:	4b09      	ldr	r3, [pc, #36]	; (800e2f0 <Dmx::StopData(unsigned int, unsigned int)+0x94>)
 800e2ca:	fb02 3304 	mla	r3, r2, r4, r3
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800e2d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e2d8:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800e2dc:	f023 0302 	bic.w	r3, r3, #2
 800e2e0:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
 800e2e4:	e7e4      	b.n	800e2b0 <Dmx::StopData(unsigned int, unsigned int)+0x54>
 800e2e6:	bf00      	nop
 800e2e8:	20001218 	andcs	r1, r0, r8, lsl r2
 800e2ec:	2000122c 	andcs	r1, r0, ip, lsr #4
 800e2f0:	20000e04 	andcs	r0, r0, r4, lsl #28

0800e2f4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>:
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	461d      	mov	r5, r3
 800e2f8:	6943      	ldr	r3, [r0, #20]
 800e2fa:	4606      	mov	r6, r0
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	4614      	mov	r4, r2
 800e300:	d014      	beq.n	800e32c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x38>
 800e302:	6142      	str	r2, [r0, #20]
 800e304:	4910      	ldr	r1, [pc, #64]	; (800e348 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800e306:	2200      	movs	r2, #0
 800e308:	f7ff ffa8 	bl	800e25c <Dmx::StopData(unsigned int, unsigned int)>
 800e30c:	b934      	cbnz	r4, 800e31c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x28>
 800e30e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e312:	4b0e      	ldr	r3, [pc, #56]	; (800e34c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800e314:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 800e318:	b94d      	cbnz	r5, 800e32e <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x3a>
 800e31a:	bd70      	pop	{r4, r5, r6, pc}
 800e31c:	2c01      	cmp	r4, #1
 800e31e:	d1fb      	bne.n	800e318 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800e320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e324:	4b09      	ldr	r3, [pc, #36]	; (800e34c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x58>)
 800e326:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 800e32a:	e7f5      	b.n	800e318 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x24>
 800e32c:	b135      	cbz	r5, 800e33c <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x48>
 800e32e:	4630      	mov	r0, r6
 800e330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e334:	2200      	movs	r2, #0
 800e336:	4904      	ldr	r1, [pc, #16]	; (800e348 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800e338:	f7ff bee6 	b.w	800e108 <Dmx::StartData(unsigned int, unsigned int)>
 800e33c:	462a      	mov	r2, r5
 800e33e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e342:	4901      	ldr	r1, [pc, #4]	; (800e348 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)+0x54>)
 800e344:	f7ff bf8a 	b.w	800e25c <Dmx::StopData(unsigned int, unsigned int)>
 800e348:	40004800 	andmi	r4, r0, r0, lsl #16
 800e34c:	40010000 	andmi	r0, r1, r0

0800e350 <Dmx::Dmx()>:
 800e350:	225c      	movs	r2, #92	; 0x5c
 800e352:	230c      	movs	r3, #12
 800e354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e358:	e9c0 2300 	strd	r2, r3, [r0]
 800e35c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 800e360:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800e364:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e368:	2400      	movs	r4, #0
 800e36a:	4605      	mov	r5, r0
 800e36c:	8203      	strh	r3, [r0, #16]
 800e36e:	4b5d      	ldr	r3, [pc, #372]	; (800e4e4 <Dmx::Dmx()+0x194>)
 800e370:	b08b      	sub	sp, #44	; 0x2c
 800e372:	6018      	str	r0, [r3, #0]
 800e374:	4b5c      	ldr	r3, [pc, #368]	; (800e4e8 <Dmx::Dmx()+0x198>)
 800e376:	2203      	movs	r2, #3
 800e378:	801c      	strh	r4, [r3, #0]
 800e37a:	2110      	movs	r1, #16
 800e37c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e380:	485a      	ldr	r0, [pc, #360]	; (800e4ec <Dmx::Dmx()+0x19c>)
 800e382:	f005 f9f1 	bl	8013768 <gpio_init>
 800e386:	4621      	mov	r1, r4
 800e388:	4628      	mov	r0, r5
 800e38a:	f7ff fea5 	bl	800e0d8 <Dmx::ClearData(unsigned int)>
 800e38e:	4b58      	ldr	r3, [pc, #352]	; (800e4f0 <Dmx::Dmx()+0x1a0>)
 800e390:	2201      	movs	r2, #1
 800e392:	4628      	mov	r0, r5
 800e394:	601c      	str	r4, [r3, #0]
 800e396:	4623      	mov	r3, r4
 800e398:	f7ff ffac 	bl	800e2f4 <Dmx::SetPortDirection(unsigned int, dmx::PortDirection, bool)>
 800e39c:	4b55      	ldr	r3, [pc, #340]	; (800e4f4 <Dmx::Dmx()+0x1a4>)
 800e39e:	4e56      	ldr	r6, [pc, #344]	; (800e4f8 <Dmx::Dmx()+0x1a8>)
 800e3a0:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
 800e3a4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800e3a8:	f005 fa76 	bl	8013898 <rcu_periph_clock_enable>
 800e3ac:	f240 5001 	movw	r0, #1281	; 0x501
 800e3b0:	f005 fa72 	bl	8013898 <rcu_periph_clock_enable>
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	2101      	movs	r1, #1
 800e3b8:	f005 f8d6 	bl	8013568 <dma_deinit>
 800e3bc:	4b4f      	ldr	r3, [pc, #316]	; (800e4fc <Dmx::Dmx()+0x1ac>)
 800e3be:	2701      	movs	r7, #1
 800e3c0:	e9cd 3403 	strd	r3, r4, [sp, #12]
 800e3c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e3c8:	9308      	str	r3, [sp, #32]
 800e3ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e3ce:	aa03      	add	r2, sp, #12
 800e3d0:	4639      	mov	r1, r7
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e3d8:	9406      	str	r4, [sp, #24]
 800e3da:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800e3de:	f005 f8df 	bl	80135a0 <dma_init>
 800e3e2:	4639      	mov	r1, r7
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	f005 f915 	bl	8013614 <dma_circulation_disable>
 800e3ea:	4639      	mov	r1, r7
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	f005 f921 	bl	8013634 <dma_memory_to_memory_disable>
 800e3f2:	f5a6 36fe 	sub.w	r6, r6, #130048	; 0x1fc00
 800e3f6:	f240 7001 	movw	r0, #1793	; 0x701
 800e3fa:	f005 fa4d 	bl	8013898 <rcu_periph_clock_enable>
 800e3fe:	4630      	mov	r0, r6
 800e400:	f005 fb98 	bl	8013b34 <timer_deinit>
 800e404:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800e408:	236b      	movs	r3, #107	; 0x6b
 800e40a:	4630      	mov	r0, r6
 800e40c:	a903      	add	r1, sp, #12
 800e40e:	9303      	str	r3, [sp, #12]
 800e410:	f8ad 4010 	strh.w	r4, [sp, #16]
 800e414:	f8cd 9014 	str.w	r9, [sp, #20]
 800e418:	f8ad 4018 	strh.w	r4, [sp, #24]
 800e41c:	f88d 401a 	strb.w	r4, [sp, #26]
 800e420:	f005 fbea 	bl	8013bf8 <timer_init>
 800e424:	4649      	mov	r1, r9
 800e426:	4630      	mov	r0, r6
 800e428:	f005 fc7e 	bl	8013d28 <timer_flag_clear>
 800e42c:	4649      	mov	r1, r9
 800e42e:	4630      	mov	r0, r6
 800e430:	f005 fc77 	bl	8013d22 <timer_interrupt_flag_clear>
 800e434:	4621      	mov	r1, r4
 800e436:	4630      	mov	r0, r6
 800e438:	2210      	movs	r2, #16
 800e43a:	f005 fc3a 	bl	8013cb2 <timer_channel_output_mode_config>
 800e43e:	4639      	mov	r1, r7
 800e440:	4630      	mov	r0, r6
 800e442:	2210      	movs	r2, #16
 800e444:	f005 fc35 	bl	8013cb2 <timer_channel_output_mode_config>
 800e448:	4630      	mov	r0, r6
 800e44a:	2210      	movs	r2, #16
 800e44c:	2102      	movs	r1, #2
 800e44e:	f005 fc30 	bl	8013cb2 <timer_channel_output_mode_config>
 800e452:	2210      	movs	r2, #16
 800e454:	2103      	movs	r1, #3
 800e456:	4630      	mov	r0, r6
 800e458:	f005 fc2b 	bl	8013cb2 <timer_channel_output_mode_config>
 800e45c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e460:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800e500 <Dmx::Dmx()+0x1b0>
 800e464:	4630      	mov	r0, r6
 800e466:	f888 431d 	strb.w	r4, [r8, #797]	; 0x31d
 800e46a:	f8c8 3000 	str.w	r3, [r8]
 800e46e:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 800e472:	f005 fc19 	bl	8013ca8 <timer_enable>
 800e476:	f240 7005 	movw	r0, #1797	; 0x705
 800e47a:	f005 fa0d 	bl	8013898 <rcu_periph_clock_enable>
 800e47e:	4630      	mov	r0, r6
 800e480:	f005 fb58 	bl	8013b34 <timer_deinit>
 800e484:	f642 232f 	movw	r3, #10799	; 0x2a2f
 800e488:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e48c:	f242 7310 	movw	r3, #10000	; 0x2710
 800e490:	4630      	mov	r0, r6
 800e492:	a903      	add	r1, sp, #12
 800e494:	9305      	str	r3, [sp, #20]
 800e496:	f005 fbaf 	bl	8013bf8 <timer_init>
 800e49a:	4649      	mov	r1, r9
 800e49c:	4630      	mov	r0, r6
 800e49e:	f005 fc43 	bl	8013d28 <timer_flag_clear>
 800e4a2:	4649      	mov	r1, r9
 800e4a4:	4630      	mov	r0, r6
 800e4a6:	f005 fc3c 	bl	8013d22 <timer_interrupt_flag_clear>
 800e4aa:	4639      	mov	r1, r7
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	f005 fc34 	bl	8013d1a <timer_interrupt_enable>
 800e4b2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f888 4337 	strb.w	r4, [r8, #823]	; 0x337
 800e4bc:	f8c8 3004 	str.w	r3, [r8, #4]
 800e4c0:	f005 fbf2 	bl	8013ca8 <timer_enable>
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	2208      	movs	r2, #8
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	490e      	ldr	r1, [pc, #56]	; (800e504 <Dmx::Dmx()+0x1b4>)
 800e4cc:	4623      	mov	r3, r4
 800e4ce:	480e      	ldr	r0, [pc, #56]	; (800e508 <Dmx::Dmx()+0x1b8>)
 800e4d0:	f005 feba 	bl	8014248 <gd32_uart_begin>
 800e4d4:	2380      	movs	r3, #128	; 0x80
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	f8c8 3004 	str.w	r3, [r8, #4]
 800e4dc:	b00b      	add	sp, #44	; 0x2c
 800e4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4e2:	bf00      	nop
 800e4e4:	20001230 	andcs	r1, r0, r0, lsr r2
 800e4e8:	2000122c 	andcs	r1, r0, ip, lsr #4
 800e4ec:	40010c00 	andmi	r0, r1, r0, lsl #24
 800e4f0:	20001218 	andcs	r1, r0, r8, lsl r2
 800e4f4:	20000e04 	andcs	r0, r0, r4, lsl #28
 800e4f8:	40020000 	andmi	r0, r2, r0
 800e4fc:	40004804 	andmi	r4, r0, r4, lsl #16
 800e500:	e000e100 	and	lr, r0, r0, lsl #2
 800e504:	0003d090 	muleq	r3, r0, r0
 800e508:	40004800 	andmi	r4, r0, r0, lsl #16

0800e50c <Dmx::SetDmxPeriodTime(unsigned int)>:
 800e50c:	4b13      	ldr	r3, [pc, #76]	; (800e55c <Dmx::SetDmxPeriodTime(unsigned int)+0x50>)
 800e50e:	b570      	push	{r4, r5, r6, lr}
 800e510:	60c1      	str	r1, [r0, #12]
 800e512:	f8b3 0202 	ldrh.w	r0, [r3, #514]	; 0x202
 800e516:	232c      	movs	r3, #44	; 0x2c
 800e518:	f64f 76d3 	movw	r6, #65491	; 0xffd3
 800e51c:	4d10      	ldr	r5, [pc, #64]	; (800e560 <Dmx::SetDmxPeriodTime(unsigned int)+0x54>)
 800e51e:	4c11      	ldr	r4, [pc, #68]	; (800e564 <Dmx::SetDmxPeriodTime(unsigned int)+0x58>)
 800e520:	4358      	muls	r0, r3
 800e522:	682a      	ldr	r2, [r5, #0]
 800e524:	6823      	ldr	r3, [r4, #0]
 800e526:	4413      	add	r3, r2
 800e528:	4403      	add	r3, r0
 800e52a:	42b3      	cmp	r3, r6
 800e52c:	d908      	bls.n	800e540 <Dmx::SetDmxPeriodTime(unsigned int)+0x34>
 800e52e:	2ab0      	cmp	r2, #176	; 0xb0
 800e530:	4613      	mov	r3, r2
 800e532:	bf28      	it	cs
 800e534:	23b0      	movcs	r3, #176	; 0xb0
 800e536:	220c      	movs	r2, #12
 800e538:	602b      	str	r3, [r5, #0]
 800e53a:	4413      	add	r3, r2
 800e53c:	6022      	str	r2, [r4, #0]
 800e53e:	4403      	add	r3, r0
 800e540:	b109      	cbz	r1, 800e546 <Dmx::SetDmxPeriodTime(unsigned int)+0x3a>
 800e542:	428b      	cmp	r3, r1
 800e544:	d906      	bls.n	800e554 <Dmx::SetDmxPeriodTime(unsigned int)+0x48>
 800e546:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800e54a:	f240 43b4 	movw	r3, #1204	; 0x4b4
 800e54e:	4299      	cmp	r1, r3
 800e550:	bf38      	it	cc
 800e552:	4619      	movcc	r1, r3
 800e554:	4b04      	ldr	r3, [pc, #16]	; (800e568 <Dmx::SetDmxPeriodTime(unsigned int)+0x5c>)
 800e556:	6019      	str	r1, [r3, #0]
 800e558:	bd70      	pop	{r4, r5, r6, pc}
 800e55a:	bf00      	nop
 800e55c:	20001014 	andcs	r1, r0, r4, lsl r0
 800e560:	20000008 	andcs	r0, r0, r8
 800e564:	20000004 	andcs	r0, r0, r4
 800e568:	20000000 	andcs	r0, r0, r0

0800e56c <Dmx::SetDmxBreakTime(unsigned int)>:
 800e56c:	295c      	cmp	r1, #92	; 0x5c
 800e56e:	bf38      	it	cc
 800e570:	215c      	movcc	r1, #92	; 0x5c
 800e572:	4b02      	ldr	r3, [pc, #8]	; (800e57c <Dmx::SetDmxBreakTime(unsigned int)+0x10>)
 800e574:	6019      	str	r1, [r3, #0]
 800e576:	68c1      	ldr	r1, [r0, #12]
 800e578:	f7ff bfc8 	b.w	800e50c <Dmx::SetDmxPeriodTime(unsigned int)>
 800e57c:	20000008 	andcs	r0, r0, r8

0800e580 <Dmx::SetDmxMabTime(unsigned int)>:
 800e580:	290c      	cmp	r1, #12
 800e582:	bf38      	it	cc
 800e584:	210c      	movcc	r1, #12
 800e586:	4b02      	ldr	r3, [pc, #8]	; (800e590 <Dmx::SetDmxMabTime(unsigned int)+0x10>)
 800e588:	6019      	str	r1, [r3, #0]
 800e58a:	68c1      	ldr	r1, [r0, #12]
 800e58c:	f7ff bfbe 	b.w	800e50c <Dmx::SetDmxPeriodTime(unsigned int)>
 800e590:	20000004 	andcs	r0, r0, r4

0800e594 <Dmx::SetDmxSlots(unsigned short)>:
 800e594:	1e8b      	subs	r3, r1, #2
 800e596:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800e59a:	d809      	bhi.n	800e5b0 <Dmx::SetDmxSlots(unsigned short)+0x1c>
 800e59c:	6983      	ldr	r3, [r0, #24]
 800e59e:	8201      	strh	r1, [r0, #16]
 800e5a0:	b11b      	cbz	r3, 800e5aa <Dmx::SetDmxSlots(unsigned short)+0x16>
 800e5a2:	4299      	cmp	r1, r3
 800e5a4:	bf94      	ite	ls
 800e5a6:	6181      	strls	r1, [r0, #24]
 800e5a8:	6183      	strhi	r3, [r0, #24]
 800e5aa:	68c1      	ldr	r1, [r0, #12]
 800e5ac:	f7ff bfae 	b.w	800e50c <Dmx::SetDmxPeriodTime(unsigned int)>
 800e5b0:	4770      	bx	lr
	...

0800e5b4 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)>:
 800e5b4:	b470      	push	{r4, r5, r6}
 800e5b6:	8a04      	ldrh	r4, [r0, #16]
 800e5b8:	f44f 7501 	mov.w	r5, #516	; 0x204
 800e5bc:	42a3      	cmp	r3, r4
 800e5be:	bf28      	it	cs
 800e5c0:	4623      	movcs	r3, r4
 800e5c2:	4c0e      	ldr	r4, [pc, #56]	; (800e5fc <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x48>)
 800e5c4:	f892 f000 	pld	[r2]
 800e5c8:	fb05 4401 	mla	r4, r5, r1, r4
 800e5cc:	1c5d      	adds	r5, r3, #1
 800e5ce:	f8a4 5202 	strh.w	r5, [r4, #514]	; 0x202
 800e5d2:	18d5      	adds	r5, r2, r3
 800e5d4:	4295      	cmp	r5, r2
 800e5d6:	d109      	bne.n	800e5ec <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x38>
 800e5d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e5dc:	698a      	ldr	r2, [r1, #24]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d009      	beq.n	800e5f6 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x42>
 800e5e2:	bc70      	pop	{r4, r5, r6}
 800e5e4:	618b      	str	r3, [r1, #24]
 800e5e6:	68c1      	ldr	r1, [r0, #12]
 800e5e8:	f7ff bf90 	b.w	800e50c <Dmx::SetDmxPeriodTime(unsigned int)>
 800e5ec:	f812 6b01 	ldrb.w	r6, [r2], #1
 800e5f0:	f804 6f01 	strb.w	r6, [r4, #1]!
 800e5f4:	e7ee      	b.n	800e5d4 <Dmx::SetPortSendDataWithoutSC(unsigned int, unsigned char const*, unsigned int)+0x20>
 800e5f6:	bc70      	pop	{r4, r5, r6}
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	20001014 	andcs	r1, r0, r4, lsl r0

0800e600 <Dmx::Blackout()>:
 800e600:	4a10      	ldr	r2, [pc, #64]	; (800e644 <Dmx::Blackout()+0x44>)
 800e602:	b510      	push	{r4, lr}
 800e604:	8813      	ldrh	r3, [r2, #0]
 800e606:	b29b      	uxth	r3, r3
 800e608:	b903      	cbnz	r3, 800e60c <Dmx::Blackout()+0xc>
 800e60a:	bd10      	pop	{r4, pc}
 800e60c:	f3bf 8f5f 	dmb	sy
 800e610:	8813      	ldrh	r3, [r2, #0]
 800e612:	05db      	lsls	r3, r3, #23
 800e614:	d5f9      	bpl.n	800e60a <Dmx::Blackout()+0xa>
 800e616:	4c0c      	ldr	r4, [pc, #48]	; (800e648 <Dmx::Blackout()+0x48>)
 800e618:	2107      	movs	r1, #7
 800e61a:	4620      	mov	r0, r4
 800e61c:	f005 fc26 	bl	8013e6c <usart_flag_get>
 800e620:	2801      	cmp	r0, #1
 800e622:	d1f9      	bne.n	800e618 <Dmx::Blackout()+0x18>
 800e624:	2300      	movs	r3, #0
 800e626:	4a09      	ldr	r2, [pc, #36]	; (800e64c <Dmx::Blackout()+0x4c>)
 800e628:	461c      	mov	r4, r3
 800e62a:	4611      	mov	r1, r2
 800e62c:	f240 1001 	movw	r0, #257	; 0x101
 800e630:	3301      	adds	r3, #1
 800e632:	4283      	cmp	r3, r0
 800e634:	f822 4b02 	strh.w	r4, [r2], #2
 800e638:	d1fa      	bne.n	800e630 <Dmx::Blackout()+0x30>
 800e63a:	f04f 0300 	mov.w	r3, #0
 800e63e:	700b      	strb	r3, [r1, #0]
 800e640:	e7e3      	b.n	800e60a <Dmx::Blackout()+0xa>
 800e642:	bf00      	nop
 800e644:	2000122c 	andcs	r1, r0, ip, lsr #4
 800e648:	40004800 	andmi	r4, r0, r0, lsl #16
 800e64c:	20001014 	andcs	r1, r0, r4, lsl r0

0800e650 <Dmx::FullOn()>:
 800e650:	4a10      	ldr	r2, [pc, #64]	; (800e694 <Dmx::FullOn()+0x44>)
 800e652:	b510      	push	{r4, lr}
 800e654:	8813      	ldrh	r3, [r2, #0]
 800e656:	b29b      	uxth	r3, r3
 800e658:	b903      	cbnz	r3, 800e65c <Dmx::FullOn()+0xc>
 800e65a:	bd10      	pop	{r4, pc}
 800e65c:	f3bf 8f5f 	dmb	sy
 800e660:	8813      	ldrh	r3, [r2, #0]
 800e662:	05db      	lsls	r3, r3, #23
 800e664:	d5f9      	bpl.n	800e65a <Dmx::FullOn()+0xa>
 800e666:	4c0c      	ldr	r4, [pc, #48]	; (800e698 <Dmx::FullOn()+0x48>)
 800e668:	2107      	movs	r1, #7
 800e66a:	4620      	mov	r0, r4
 800e66c:	f005 fbfe 	bl	8013e6c <usart_flag_get>
 800e670:	2801      	cmp	r0, #1
 800e672:	d1f9      	bne.n	800e668 <Dmx::FullOn()+0x18>
 800e674:	4a09      	ldr	r2, [pc, #36]	; (800e69c <Dmx::FullOn()+0x4c>)
 800e676:	2300      	movs	r3, #0
 800e678:	4611      	mov	r1, r2
 800e67a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800e67e:	f240 1001 	movw	r0, #257	; 0x101
 800e682:	3301      	adds	r3, #1
 800e684:	4283      	cmp	r3, r0
 800e686:	f822 4b02 	strh.w	r4, [r2], #2
 800e68a:	d1fa      	bne.n	800e682 <Dmx::FullOn()+0x32>
 800e68c:	2300      	movs	r3, #0
 800e68e:	700b      	strb	r3, [r1, #0]
 800e690:	e7e3      	b.n	800e65a <Dmx::FullOn()+0xa>
 800e692:	bf00      	nop
 800e694:	2000122c 	andcs	r1, r0, ip, lsr #4
 800e698:	40004800 	andmi	r4, r0, r0, lsl #16
 800e69c:	20001014 	andcs	r1, r0, r4, lsl r0

0800e6a0 <Dmx::GetDmxAvailable(unsigned int)>:
 800e6a0:	f44f 7204 	mov.w	r2, #528	; 0x210
 800e6a4:	4b07      	ldr	r3, [pc, #28]	; (800e6c4 <Dmx::GetDmxAvailable(unsigned int)+0x24>)
 800e6a6:	fb02 3101 	mla	r1, r2, r1, r3
 800e6aa:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
 800e6ae:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800e6b2:	bf1f      	itttt	ne
 800e6b4:	f423 4300 	bicne.w	r3, r3, #32768	; 0x8000
 800e6b8:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
 800e6bc:	4608      	movne	r0, r1
 800e6be:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800e6c2:	4770      	bx	lr
 800e6c4:	20000e04 	andcs	r0, r0, r4, lsl #28

0800e6c8 <Dmx::GetUpdatesPerSecond(unsigned int)>:
 800e6c8:	f3bf 8f5f 	dmb	sy
 800e6cc:	4b01      	ldr	r3, [pc, #4]	; (800e6d4 <Dmx::GetUpdatesPerSecond(unsigned int)+0xc>)
 800e6ce:	0109      	lsls	r1, r1, #4
 800e6d0:	5858      	ldr	r0, [r3, r1]
 800e6d2:	4770      	bx	lr
 800e6d4:	2000121c 	andcs	r1, r0, ip, lsl r2

0800e6d8 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)>:
 800e6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6da:	4614      	mov	r4, r2
 800e6dc:	461d      	mov	r5, r3
 800e6de:	4e1f      	ldr	r6, [pc, #124]	; (800e75c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800e6e0:	2106      	movs	r1, #6
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	f005 fbc2 	bl	8013e6c <usart_flag_get>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	d0f9      	beq.n	800e6e0 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x8>
 800e6ec:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800e6f0:	4e1b      	ldr	r6, [pc, #108]	; (800e760 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x88>)
 800e6f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6f6:	2203      	movs	r2, #3
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	2110      	movs	r1, #16
 800e6fc:	f005 f834 	bl	8013768 <gpio_init>
 800e700:	6177      	str	r7, [r6, #20]
 800e702:	2100      	movs	r1, #0
 800e704:	20b0      	movs	r0, #176	; 0xb0
 800e706:	f005 fe8d 	bl	8014424 <udelay(unsigned int, unsigned int)>
 800e70a:	463b      	mov	r3, r7
 800e70c:	4630      	mov	r0, r6
 800e70e:	2203      	movs	r2, #3
 800e710:	2118      	movs	r1, #24
 800e712:	f005 f829 	bl	8013768 <gpio_init>
 800e716:	2100      	movs	r1, #0
 800e718:	200c      	movs	r0, #12
 800e71a:	f005 fe83 	bl	8014424 <udelay(unsigned int, unsigned int)>
 800e71e:	f04f 2740 	mov.w	r7, #1073758208	; 0x40004000
 800e722:	4425      	add	r5, r4
 800e724:	f5a6 4648 	sub.w	r6, r6, #51200	; 0xc800
 800e728:	42ac      	cmp	r4, r5
 800e72a:	d109      	bne.n	800e740 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 800e72c:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 800e730:	4c0a      	ldr	r4, [pc, #40]	; (800e75c <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x84>)
 800e732:	2106      	movs	r1, #6
 800e734:	4620      	mov	r0, r4
 800e736:	f005 fb99 	bl	8013e6c <usart_flag_get>
 800e73a:	2801      	cmp	r0, #1
 800e73c:	d10b      	bne.n	800e756 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x7e>
 800e73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e740:	2107      	movs	r1, #7
 800e742:	4630      	mov	r0, r6
 800e744:	f005 fb92 	bl	8013e6c <usart_flag_get>
 800e748:	2800      	cmp	r0, #0
 800e74a:	d0f9      	beq.n	800e740 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x68>
 800e74c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e750:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 800e754:	e7e8      	b.n	800e728 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x50>
 800e756:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800e75a:	e7ea      	b.n	800e732 <Dmx::RdmSendRaw(unsigned int, unsigned char const*, unsigned int)+0x5a>
 800e75c:	40004800 	andmi	r4, r0, r0, lsl #16
 800e760:	40011000 	andmi	r1, r1, r0

0800e764 <Dmx::RdmReceive(unsigned int)>:
 800e764:	f44f 7204 	mov.w	r2, #528	; 0x210
 800e768:	4b06      	ldr	r3, [pc, #24]	; (800e784 <Dmx::RdmReceive(unsigned int)+0x20>)
 800e76a:	fb02 3101 	mla	r1, r2, r1, r3
 800e76e:	f8b1 0204 	ldrh.w	r0, [r1, #516]	; 0x204
 800e772:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 800e776:	bf1e      	ittt	ne
 800e778:	2300      	movne	r3, #0
 800e77a:	4608      	movne	r0, r1
 800e77c:	f8c1 3204 	strne.w	r3, [r1, #516]	; 0x204
 800e780:	4770      	bx	lr
 800e782:	bf00      	nop
 800e784:	20000e04 	andcs	r0, r0, r4, lsl #28

0800e788 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)>:
 800e788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e78a:	2300      	movs	r3, #0
 800e78c:	4605      	mov	r5, r0
 800e78e:	460e      	mov	r6, r1
 800e790:	4614      	mov	r4, r2
 800e792:	4f05      	ldr	r7, [pc, #20]	; (800e7a8 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x20>)
 800e794:	627b      	str	r3, [r7, #36]	; 0x24
 800e796:	4631      	mov	r1, r6
 800e798:	4628      	mov	r0, r5
 800e79a:	f7ff ffe3 	bl	800e764 <Dmx::RdmReceive(unsigned int)>
 800e79e:	b910      	cbnz	r0, 800e7a6 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0x1e>
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a2:	42a3      	cmp	r3, r4
 800e7a4:	d3f7      	bcc.n	800e796 <Dmx::RdmReceiveTimeOut(unsigned int, unsigned short)+0xe>
 800e7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7a8:	40001000 	andmi	r1, r0, r0

0800e7ac <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)>:
 800e7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	b192      	cbz	r2, 800e7d8 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x2c>
 800e7b2:	256c      	movs	r5, #108	; 0x6c
 800e7b4:	4e19      	ldr	r6, [pc, #100]	; (800e81c <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800e7b6:	4b1a      	ldr	r3, [pc, #104]	; (800e820 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x74>)
 800e7b8:	6870      	ldr	r0, [r6, #4]
 800e7ba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e7be:	fbb0 f0f5 	udiv	r0, r0, r5
 800e7c2:	1ac7      	subs	r7, r0, r3
 800e7c4:	42ba      	cmp	r2, r7
 800e7c6:	d907      	bls.n	800e7d8 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x2c>
 800e7c8:	1a1b      	subs	r3, r3, r0
 800e7ca:	441a      	add	r2, r3
 800e7cc:	6873      	ldr	r3, [r6, #4]
 800e7ce:	fbb3 f3f5 	udiv	r3, r3, r5
 800e7d2:	1a1b      	subs	r3, r3, r0
 800e7d4:	4293      	cmp	r3, r2
 800e7d6:	d3f9      	bcc.n	800e7cc <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x20>
 800e7d8:	4d12      	ldr	r5, [pc, #72]	; (800e824 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x78>)
 800e7da:	460a      	mov	r2, r1
 800e7dc:	5d2b      	ldrb	r3, [r5, r4]
 800e7de:	7888      	ldrb	r0, [r1, #2]
 800e7e0:	73cb      	strb	r3, [r1, #15]
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	1846      	adds	r6, r0, r1
 800e7e6:	42b2      	cmp	r2, r6
 800e7e8:	d113      	bne.n	800e812 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x66>
 800e7ea:	0a1e      	lsrs	r6, r3, #8
 800e7ec:	540e      	strb	r6, [r1, r0]
 800e7ee:	7053      	strb	r3, [r2, #1]
 800e7f0:	788a      	ldrb	r2, [r1, #2]
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	3202      	adds	r2, #2
 800e7f6:	f7ff fa79 	bl	800dcec <Rdm::SendRaw(unsigned int, unsigned char const*, unsigned int)>
 800e7fa:	226c      	movs	r2, #108	; 0x6c
 800e7fc:	4b07      	ldr	r3, [pc, #28]	; (800e81c <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x70>)
 800e7fe:	685b      	ldr	r3, [r3, #4]
 800e800:	fbb3 f3f2 	udiv	r3, r3, r2
 800e804:	4a06      	ldr	r2, [pc, #24]	; (800e820 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x74>)
 800e806:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e80a:	5d2b      	ldrb	r3, [r5, r4]
 800e80c:	3301      	adds	r3, #1
 800e80e:	552b      	strb	r3, [r5, r4]
 800e810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e812:	f812 7b01 	ldrb.w	r7, [r2], #1
 800e816:	443b      	add	r3, r7
 800e818:	b29b      	uxth	r3, r3
 800e81a:	e7e4      	b.n	800e7e6 <Rdm::Send(unsigned int, TRdmMessage*, unsigned int)+0x3a>
 800e81c:	e0001000 	and	r1, r0, r0
 800e820:	20001238 	andcs	r1, r0, r8, lsr r2
 800e824:	2000123c 	andcs	r1, r0, ip, lsr r2

0800e828 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800e828:	2300      	movs	r3, #0
 800e82a:	2020      	movs	r0, #32
 800e82c:	b510      	push	{r4, lr}
 800e82e:	4a04      	ldr	r2, [pc, #16]	; (800e840 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800e830:	428b      	cmp	r3, r1
 800e832:	d100      	bne.n	800e836 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0xe>
 800e834:	bd10      	pop	{r4, pc}
 800e836:	f852 4b04 	ldr.w	r4, [r2], #4
 800e83a:	3301      	adds	r3, #1
 800e83c:	4420      	add	r0, r4
 800e83e:	e7f7      	b.n	800e830 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800e840:	08016be0 	stmdaeq	r1, {r5, r6, r7, r8, r9, fp, sp, lr}

0800e844 <SpiFlashStore::Init()>:
 800e844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e848:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800e960 <SpiFlashStore::Init()+0x11c>
 800e84c:	4607      	mov	r7, r0
 800e84e:	b085      	sub	sp, #20
 800e850:	f8d8 0000 	ldr.w	r0, [r8]
 800e854:	f000 fccc 	bl	800f1f0 <FlashRom::GetSectorSize() const>
 800e858:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e85c:	4605      	mov	r5, r0
 800e85e:	d17d      	bne.n	800e95c <SpiFlashStore::Init()+0x118>
 800e860:	f8d8 0000 	ldr.w	r0, [r8]
 800e864:	f000 fcbc 	bl	800f1e0 <FlashRom::GetSize() const>
 800e868:	4b3e      	ldr	r3, [pc, #248]	; (800e964 <SpiFlashStore::Init()+0x120>)
 800e86a:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800e86e:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800e872:	6019      	str	r1, [r3, #0]
 800e874:	2e00      	cmp	r6, #0
 800e876:	d171      	bne.n	800e95c <SpiFlashStore::Init()+0x118>
 800e878:	4c3b      	ldr	r4, [pc, #236]	; (800e968 <SpiFlashStore::Init()+0x124>)
 800e87a:	ab03      	add	r3, sp, #12
 800e87c:	9300      	str	r3, [sp, #0]
 800e87e:	462a      	mov	r2, r5
 800e880:	4623      	mov	r3, r4
 800e882:	f8d8 0000 	ldr.w	r0, [r8]
 800e886:	f000 fcb6 	bl	800f1f6 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800e88a:	7823      	ldrb	r3, [r4, #0]
 800e88c:	2b41      	cmp	r3, #65	; 0x41
 800e88e:	bf1c      	itt	ne
 800e890:	2341      	movne	r3, #65	; 0x41
 800e892:	7023      	strbne	r3, [r4, #0]
 800e894:	7863      	ldrb	r3, [r4, #1]
 800e896:	bf14      	ite	ne
 800e898:	4635      	movne	r5, r6
 800e89a:	2501      	moveq	r5, #1
 800e89c:	2b76      	cmp	r3, #118	; 0x76
 800e89e:	bf1c      	itt	ne
 800e8a0:	2376      	movne	r3, #118	; 0x76
 800e8a2:	7063      	strbne	r3, [r4, #1]
 800e8a4:	78a3      	ldrb	r3, [r4, #2]
 800e8a6:	bf18      	it	ne
 800e8a8:	2500      	movne	r5, #0
 800e8aa:	2b56      	cmp	r3, #86	; 0x56
 800e8ac:	bf1c      	itt	ne
 800e8ae:	2356      	movne	r3, #86	; 0x56
 800e8b0:	70a3      	strbne	r3, [r4, #2]
 800e8b2:	78e3      	ldrb	r3, [r4, #3]
 800e8b4:	bf18      	it	ne
 800e8b6:	2500      	movne	r5, #0
 800e8b8:	2b10      	cmp	r3, #16
 800e8ba:	d022      	beq.n	800e902 <SpiFlashStore::Init()+0xbe>
 800e8bc:	2310      	movs	r3, #16
 800e8be:	70e3      	strb	r3, [r4, #3]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	2500      	movs	r5, #0
 800e8c4:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800e8c8:	4b28      	ldr	r3, [pc, #160]	; (800e96c <SpiFlashStore::Init()+0x128>)
 800e8ca:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800e970 <SpiFlashStore::Init()+0x12c>
 800e8ce:	701a      	strb	r2, [r3, #0]
 800e8d0:	4631      	mov	r1, r6
 800e8d2:	4638      	mov	r0, r7
 800e8d4:	f7ff ffa8 	bl	800e828 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e8d8:	1823      	adds	r3, r4, r0
 800e8da:	5425      	strb	r5, [r4, r0]
 800e8dc:	705d      	strb	r5, [r3, #1]
 800e8de:	709d      	strb	r5, [r3, #2]
 800e8e0:	70dd      	strb	r5, [r3, #3]
 800e8e2:	f858 3b04 	ldr.w	r3, [r8], #4
 800e8e6:	1d02      	adds	r2, r0, #4
 800e8e8:	4403      	add	r3, r0
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d332      	bcc.n	800e954 <SpiFlashStore::Init()+0x110>
 800e8ee:	3601      	adds	r6, #1
 800e8f0:	2e1c      	cmp	r6, #28
 800e8f2:	d1ed      	bne.n	800e8d0 <SpiFlashStore::Init()+0x8c>
 800e8f4:	2501      	movs	r5, #1
 800e8f6:	4b1f      	ldr	r3, [pc, #124]	; (800e974 <SpiFlashStore::Init()+0x130>)
 800e8f8:	601d      	str	r5, [r3, #0]
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	b005      	add	sp, #20
 800e8fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e902:	2d00      	cmp	r5, #0
 800e904:	d0dc      	beq.n	800e8c0 <SpiFlashStore::Init()+0x7c>
 800e906:	f04f 0900 	mov.w	r9, #0
 800e90a:	46c8      	mov	r8, r9
 800e90c:	4631      	mov	r1, r6
 800e90e:	4638      	mov	r0, r7
 800e910:	f7ff ff8a 	bl	800e828 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e914:	5c23      	ldrb	r3, [r4, r0]
 800e916:	2bff      	cmp	r3, #255	; 0xff
 800e918:	d112      	bne.n	800e940 <SpiFlashStore::Init()+0xfc>
 800e91a:	1823      	adds	r3, r4, r0
 800e91c:	785a      	ldrb	r2, [r3, #1]
 800e91e:	2aff      	cmp	r2, #255	; 0xff
 800e920:	d10e      	bne.n	800e940 <SpiFlashStore::Init()+0xfc>
 800e922:	789a      	ldrb	r2, [r3, #2]
 800e924:	2aff      	cmp	r2, #255	; 0xff
 800e926:	d10b      	bne.n	800e940 <SpiFlashStore::Init()+0xfc>
 800e928:	78da      	ldrb	r2, [r3, #3]
 800e92a:	2aff      	cmp	r2, #255	; 0xff
 800e92c:	d108      	bne.n	800e940 <SpiFlashStore::Init()+0xfc>
 800e92e:	46a9      	mov	r9, r5
 800e930:	f804 8000 	strb.w	r8, [r4, r0]
 800e934:	f883 8001 	strb.w	r8, [r3, #1]
 800e938:	f883 8002 	strb.w	r8, [r3, #2]
 800e93c:	f883 8003 	strb.w	r8, [r3, #3]
 800e940:	3601      	adds	r6, #1
 800e942:	2e1c      	cmp	r6, #28
 800e944:	d1e2      	bne.n	800e90c <SpiFlashStore::Init()+0xc8>
 800e946:	f1b9 0f00 	cmp.w	r9, #0
 800e94a:	d0d6      	beq.n	800e8fa <SpiFlashStore::Init()+0xb6>
 800e94c:	2201      	movs	r2, #1
 800e94e:	4b09      	ldr	r3, [pc, #36]	; (800e974 <SpiFlashStore::Init()+0x130>)
 800e950:	601a      	str	r2, [r3, #0]
 800e952:	e7d2      	b.n	800e8fa <SpiFlashStore::Init()+0xb6>
 800e954:	f804 9002 	strb.w	r9, [r4, r2]
 800e958:	3201      	adds	r2, #1
 800e95a:	e7c6      	b.n	800e8ea <SpiFlashStore::Init()+0xa6>
 800e95c:	2500      	movs	r5, #0
 800e95e:	e7cc      	b.n	800e8fa <SpiFlashStore::Init()+0xb6>
 800e960:	20002280 	andcs	r2, r0, r0, lsl #5
 800e964:	20002248 	andcs	r2, r0, r8, asr #4
 800e968:	20001248 	andcs	r1, r0, r8, asr #4
 800e96c:	2000225c 	andcs	r2, r0, ip, asr r2
 800e970:	08016be0 	stmdaeq	r1, {r5, r6, r7, r8, r9, fp, sp, lr}
 800e974:	20002254 	andcs	r2, r0, r4, asr r2

0800e978 <SpiFlashStore::SpiFlashStore()>:
 800e978:	b538      	push	{r3, r4, r5, lr}
 800e97a:	4b0d      	ldr	r3, [pc, #52]	; (800e9b0 <SpiFlashStore::SpiFlashStore()+0x38>)
 800e97c:	4604      	mov	r4, r0
 800e97e:	6018      	str	r0, [r3, #0]
 800e980:	4b0c      	ldr	r3, [pc, #48]	; (800e9b4 <SpiFlashStore::SpiFlashStore()+0x3c>)
 800e982:	4d0d      	ldr	r5, [pc, #52]	; (800e9b8 <SpiFlashStore::SpiFlashStore()+0x40>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	b113      	cbz	r3, 800e990 <SpiFlashStore::SpiFlashStore()+0x18>
 800e98a:	f7ff ff5b 	bl	800e844 <SpiFlashStore::Init()>
 800e98e:	7028      	strb	r0, [r5, #0]
 800e990:	782b      	ldrb	r3, [r5, #0]
 800e992:	b153      	cbz	r3, 800e9aa <SpiFlashStore::SpiFlashStore()+0x32>
 800e994:	2320      	movs	r3, #32
 800e996:	2200      	movs	r2, #0
 800e998:	4908      	ldr	r1, [pc, #32]	; (800e9bc <SpiFlashStore::SpiFlashStore()+0x44>)
 800e99a:	f851 0b04 	ldr.w	r0, [r1], #4
 800e99e:	3201      	adds	r2, #1
 800e9a0:	2a1c      	cmp	r2, #28
 800e9a2:	4403      	add	r3, r0
 800e9a4:	d1f9      	bne.n	800e99a <SpiFlashStore::SpiFlashStore()+0x22>
 800e9a6:	4a06      	ldr	r2, [pc, #24]	; (800e9c0 <SpiFlashStore::SpiFlashStore()+0x48>)
 800e9a8:	6013      	str	r3, [r2, #0]
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	bd38      	pop	{r3, r4, r5, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20002258 	andcs	r2, r0, r8, asr r2
 800e9b4:	20002280 	andcs	r2, r0, r0, lsl #5
 800e9b8:	2000224c 	andcs	r2, r0, ip, asr #4
 800e9bc:	08016be0 	stmdaeq	r1, {r5, r6, r7, r8, r9, fp, sp, lr}
 800e9c0:	20002250 	andcs	r2, r0, r0, asr r2

0800e9c4 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800e9c4:	b508      	push	{r3, lr}
 800e9c6:	f7ff ff2f 	bl	800e828 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	4904      	ldr	r1, [pc, #16]	; (800e9e0 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800e9ce:	1842      	adds	r2, r0, r1
 800e9d0:	540b      	strb	r3, [r1, r0]
 800e9d2:	7053      	strb	r3, [r2, #1]
 800e9d4:	7093      	strb	r3, [r2, #2]
 800e9d6:	70d3      	strb	r3, [r2, #3]
 800e9d8:	2201      	movs	r2, #1
 800e9da:	4b02      	ldr	r3, [pc, #8]	; (800e9e4 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800e9dc:	601a      	str	r2, [r3, #0]
 800e9de:	bd08      	pop	{r3, pc}
 800e9e0:	20001248 	andcs	r1, r0, r8, asr #4
 800e9e4:	20002254 	andcs	r2, r0, r4, asr r2

0800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800e9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ec:	461c      	mov	r4, r3
 800e9ee:	4b19      	ldr	r3, [pc, #100]	; (800ea54 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800e9f0:	4616      	mov	r6, r2
 800e9f2:	781f      	ldrb	r7, [r3, #0]
 800e9f4:	9d07      	ldr	r5, [sp, #28]
 800e9f6:	b307      	cbz	r7, 800ea3a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800e9f8:	f7ff ff16 	bl	800e828 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e9fc:	f04f 0c00 	mov.w	ip, #0
 800ea00:	4a15      	ldr	r2, [pc, #84]	; (800ea58 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800ea02:	1831      	adds	r1, r6, r0
 800ea04:	1e63      	subs	r3, r4, #1
 800ea06:	9c06      	ldr	r4, [sp, #24]
 800ea08:	4411      	add	r1, r2
 800ea0a:	440c      	add	r4, r1
 800ea0c:	42a1      	cmp	r1, r4
 800ea0e:	d116      	bne.n	800ea3e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x56>
 800ea10:	f1bc 0f00 	cmp.w	ip, #0
 800ea14:	d011      	beq.n	800ea3a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800ea16:	4b11      	ldr	r3, [pc, #68]	; (800ea5c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800ea18:	6819      	ldr	r1, [r3, #0]
 800ea1a:	b109      	cbz	r1, 800ea20 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x38>
 800ea1c:	2906      	cmp	r1, #6
 800ea1e:	d101      	bne.n	800ea24 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3c>
 800ea20:	2101      	movs	r1, #1
 800ea22:	6019      	str	r1, [r3, #0]
 800ea24:	4b0e      	ldr	r3, [pc, #56]	; (800ea60 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800ea26:	6819      	ldr	r1, [r3, #0]
 800ea28:	4b0e      	ldr	r3, [pc, #56]	; (800ea64 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800ea2a:	6019      	str	r1, [r3, #0]
 800ea2c:	b12e      	cbz	r6, 800ea3a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800ea2e:	b125      	cbz	r5, 800ea3a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800ea30:	9b08      	ldr	r3, [sp, #32]
 800ea32:	4418      	add	r0, r3
 800ea34:	5813      	ldr	r3, [r2, r0]
 800ea36:	432b      	orrs	r3, r5
 800ea38:	5013      	str	r3, [r2, r0]
 800ea3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea3e:	f891 8000 	ldrb.w	r8, [r1]
 800ea42:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800ea46:	3101      	adds	r1, #1
 800ea48:	45f0      	cmp	r8, lr
 800ea4a:	bf1c      	itt	ne
 800ea4c:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800ea50:	46bc      	movne	ip, r7
 800ea52:	e7db      	b.n	800ea0c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800ea54:	2000224c 	andcs	r2, r0, ip, asr #4
 800ea58:	20001248 	andcs	r1, r0, r8, asr #4
 800ea5c:	20002254 	andcs	r2, r0, r4, asr r2
 800ea60:	2000a24c 	andcs	sl, r0, ip, asr #4
 800ea64:	20001244 	andcs	r1, r0, r4, asr #4

0800ea68 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>:
 800ea68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea6c:	461d      	mov	r5, r3
 800ea6e:	4b15      	ldr	r3, [pc, #84]	; (800eac4 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x5c>)
 800ea70:	b085      	sub	sp, #20
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	4607      	mov	r7, r0
 800ea76:	4614      	mov	r4, r2
 800ea78:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800ea7c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 800ea80:	b193      	cbz	r3, 800eaa8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 800ea82:	f7ff fed1 	bl	800e828 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800ea86:	4a10      	ldr	r2, [pc, #64]	; (800eac8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x60>)
 800ea88:	eb08 0600 	add.w	r6, r8, r0
 800ea8c:	18b3      	adds	r3, r6, r2
 800ea8e:	f1b9 0f00 	cmp.w	r9, #0
 800ea92:	d013      	beq.n	800eabc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 800ea94:	5990      	ldr	r0, [r2, r6]
 800ea96:	b988      	cbnz	r0, 800eabc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x54>
 800ea98:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800ea9c:	4623      	mov	r3, r4
 800ea9e:	4642      	mov	r2, r8
 800eaa0:	4638      	mov	r0, r7
 800eaa2:	9500      	str	r5, [sp, #0]
 800eaa4:	f7ff ffa0 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eaa8:	b005      	add	sp, #20
 800eaaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eab2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eab6:	429d      	cmp	r5, r3
 800eab8:	d1f9      	bne.n	800eaae <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x46>
 800eaba:	e7f5      	b.n	800eaa8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x40>
 800eabc:	3c01      	subs	r4, #1
 800eabe:	441d      	add	r5, r3
 800eac0:	e7f9      	b.n	800eab6 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)+0x4e>
 800eac2:	bf00      	nop
 800eac4:	2000224c 	andcs	r2, r0, ip, asr #4
 800eac8:	20001248 	andcs	r1, r0, r8, asr #4

0800eacc <SpiFlashStore::Flash()>:
 800eacc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eace:	4c25      	ldr	r4, [pc, #148]	; (800eb64 <SpiFlashStore::Flash()+0x98>)
 800ead0:	6820      	ldr	r0, [r4, #0]
 800ead2:	2800      	cmp	r0, #0
 800ead4:	d043      	beq.n	800eb5e <SpiFlashStore::Flash()+0x92>
 800ead6:	3801      	subs	r0, #1
 800ead8:	2805      	cmp	r0, #5
 800eada:	d831      	bhi.n	800eb40 <SpiFlashStore::Flash()+0x74>
 800eadc:	e8df f000 	tbb	[pc, r0]
 800eae0:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800eae4:	4b203025 	blmi	881ab80 <__exidx_end+0x80349c>
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	4b20      	ldr	r3, [pc, #128]	; (800eb6c <SpiFlashStore::Flash()+0xa0>)
 800eaec:	601a      	str	r2, [r3, #0]
 800eaee:	2302      	movs	r3, #2
 800eaf0:	6023      	str	r3, [r4, #0]
 800eaf2:	2001      	movs	r0, #1
 800eaf4:	e033      	b.n	800eb5e <SpiFlashStore::Flash()+0x92>
 800eaf6:	4b1c      	ldr	r3, [pc, #112]	; (800eb68 <SpiFlashStore::Flash()+0x9c>)
 800eaf8:	4a1c      	ldr	r2, [pc, #112]	; (800eb6c <SpiFlashStore::Flash()+0xa0>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	6812      	ldr	r2, [r2, #0]
 800eafe:	1a9b      	subs	r3, r3, r2
 800eb00:	2b63      	cmp	r3, #99	; 0x63
 800eb02:	d9f6      	bls.n	800eaf2 <SpiFlashStore::Flash()+0x26>
 800eb04:	2303      	movs	r3, #3
 800eb06:	e7f3      	b.n	800eaf0 <SpiFlashStore::Flash()+0x24>
 800eb08:	4919      	ldr	r1, [pc, #100]	; (800eb70 <SpiFlashStore::Flash()+0xa4>)
 800eb0a:	481a      	ldr	r0, [pc, #104]	; (800eb74 <SpiFlashStore::Flash()+0xa8>)
 800eb0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eb10:	6809      	ldr	r1, [r1, #0]
 800eb12:	6800      	ldr	r0, [r0, #0]
 800eb14:	ab03      	add	r3, sp, #12
 800eb16:	f000 fb7d 	bl	800f214 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	d0e9      	beq.n	800eaf2 <SpiFlashStore::Flash()+0x26>
 800eb1e:	4b12      	ldr	r3, [pc, #72]	; (800eb68 <SpiFlashStore::Flash()+0x9c>)
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	4b12      	ldr	r3, [pc, #72]	; (800eb6c <SpiFlashStore::Flash()+0xa0>)
 800eb24:	601a      	str	r2, [r3, #0]
 800eb26:	2305      	movs	r3, #5
 800eb28:	e7e2      	b.n	800eaf0 <SpiFlashStore::Flash()+0x24>
 800eb2a:	4b0f      	ldr	r3, [pc, #60]	; (800eb68 <SpiFlashStore::Flash()+0x9c>)
 800eb2c:	4a0f      	ldr	r2, [pc, #60]	; (800eb6c <SpiFlashStore::Flash()+0xa0>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	6812      	ldr	r2, [r2, #0]
 800eb32:	1a9b      	subs	r3, r3, r2
 800eb34:	2b63      	cmp	r3, #99	; 0x63
 800eb36:	d9dc      	bls.n	800eaf2 <SpiFlashStore::Flash()+0x26>
 800eb38:	2304      	movs	r3, #4
 800eb3a:	e7d9      	b.n	800eaf0 <SpiFlashStore::Flash()+0x24>
 800eb3c:	2306      	movs	r3, #6
 800eb3e:	e7d7      	b.n	800eaf0 <SpiFlashStore::Flash()+0x24>
 800eb40:	ab03      	add	r3, sp, #12
 800eb42:	4a0d      	ldr	r2, [pc, #52]	; (800eb78 <SpiFlashStore::Flash()+0xac>)
 800eb44:	490a      	ldr	r1, [pc, #40]	; (800eb70 <SpiFlashStore::Flash()+0xa4>)
 800eb46:	480b      	ldr	r0, [pc, #44]	; (800eb74 <SpiFlashStore::Flash()+0xa8>)
 800eb48:	9300      	str	r3, [sp, #0]
 800eb4a:	6812      	ldr	r2, [r2, #0]
 800eb4c:	4b0b      	ldr	r3, [pc, #44]	; (800eb7c <SpiFlashStore::Flash()+0xb0>)
 800eb4e:	6809      	ldr	r1, [r1, #0]
 800eb50:	6800      	ldr	r0, [r0, #0]
 800eb52:	f000 fbff 	bl	800f354 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d0cb      	beq.n	800eaf2 <SpiFlashStore::Flash()+0x26>
 800eb5a:	2000      	movs	r0, #0
 800eb5c:	6020      	str	r0, [r4, #0]
 800eb5e:	b004      	add	sp, #16
 800eb60:	bd10      	pop	{r4, pc}
 800eb62:	bf00      	nop
 800eb64:	20002254 	andcs	r2, r0, r4, asr r2
 800eb68:	2000a24c 	andcs	sl, r0, ip, asr #4
 800eb6c:	20001244 	andcs	r1, r0, r4, asr #4
 800eb70:	20002248 	andcs	r2, r0, r8, asr #4
 800eb74:	20002280 	andcs	r2, r0, r0, lsl #5
 800eb78:	20002250 	andcs	r2, r0, r0, asr r2
 800eb7c:	20001248 	andcs	r1, r0, r8, asr #4

0800eb80 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800eb80:	4770      	bx	lr
	...

0800eb84 <StoreDisplayUdf::Copy(displayudfparams::Params*)>:
 800eb84:	b507      	push	{r0, r1, r2, lr}
 800eb86:	2300      	movs	r3, #0
 800eb88:	460a      	mov	r2, r1
 800eb8a:	2101      	movs	r1, #1
 800eb8c:	e9cd 3100 	strd	r3, r1, [sp]
 800eb90:	4804      	ldr	r0, [pc, #16]	; (800eba4 <StoreDisplayUdf::Copy(displayudfparams::Params*)+0x20>)
 800eb92:	2322      	movs	r3, #34	; 0x22
 800eb94:	210f      	movs	r1, #15
 800eb96:	6800      	ldr	r0, [r0, #0]
 800eb98:	f7ff ff66 	bl	800ea68 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800eb9c:	b003      	add	sp, #12
 800eb9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800eba2:	bf00      	nop
 800eba4:	20002258 	andcs	r2, r0, r8, asr r2

0800eba8 <StoreDisplayUdf::Update(displayudfparams::Params const*)>:
 800eba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebaa:	2200      	movs	r2, #0
 800ebac:	460b      	mov	r3, r1
 800ebae:	2122      	movs	r1, #34	; 0x22
 800ebb0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ebb4:	4804      	ldr	r0, [pc, #16]	; (800ebc8 <StoreDisplayUdf::Update(displayudfparams::Params const*)+0x20>)
 800ebb6:	9100      	str	r1, [sp, #0]
 800ebb8:	6800      	ldr	r0, [r0, #0]
 800ebba:	210f      	movs	r1, #15
 800ebbc:	f7ff ff14 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ebc0:	b005      	add	sp, #20
 800ebc2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebc6:	bf00      	nop
 800ebc8:	20002258 	andcs	r2, r0, r8, asr r2

0800ebcc <StoreDisplayUdf::~StoreDisplayUdf()>:
 800ebcc:	b510      	push	{r4, lr}
 800ebce:	4604      	mov	r4, r0
 800ebd0:	f003 ff88 	bl	8012ae4 <operator delete(void*)>
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	bd10      	pop	{r4, pc}

0800ebd8 <StoreDisplayUdf::StoreDisplayUdf()>:
 800ebd8:	4a02      	ldr	r2, [pc, #8]	; (800ebe4 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800ebda:	6002      	str	r2, [r0, #0]
 800ebdc:	4a02      	ldr	r2, [pc, #8]	; (800ebe8 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 800ebde:	6010      	str	r0, [r2, #0]
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	08016c58 	stmdaeq	r1, {r3, r4, r6, sl, fp, sp, lr}
 800ebe8:	20002260 	andcs	r2, r0, r0, ror #4

0800ebec <StoreDmxSend::~StoreDmxSend()>:
 800ebec:	4770      	bx	lr
	...

0800ebf0 <StoreDmxSend::Copy(TDmxParams*)>:
 800ebf0:	b507      	push	{r0, r1, r2, lr}
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	460a      	mov	r2, r1
 800ebf6:	2101      	movs	r1, #1
 800ebf8:	e9cd 3100 	strd	r3, r1, [sp]
 800ebfc:	4804      	ldr	r0, [pc, #16]	; (800ec10 <StoreDmxSend::Copy(TDmxParams*)+0x20>)
 800ebfe:	230a      	movs	r3, #10
 800ec00:	2102      	movs	r1, #2
 800ec02:	6800      	ldr	r0, [r0, #0]
 800ec04:	f7ff ff30 	bl	800ea68 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800ec08:	b003      	add	sp, #12
 800ec0a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec0e:	bf00      	nop
 800ec10:	20002258 	andcs	r2, r0, r8, asr r2

0800ec14 <StoreDmxSend::Update(TDmxParams const*)>:
 800ec14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec16:	2200      	movs	r2, #0
 800ec18:	460b      	mov	r3, r1
 800ec1a:	210a      	movs	r1, #10
 800ec1c:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ec20:	4804      	ldr	r0, [pc, #16]	; (800ec34 <StoreDmxSend::Update(TDmxParams const*)+0x20>)
 800ec22:	9100      	str	r1, [sp, #0]
 800ec24:	6800      	ldr	r0, [r0, #0]
 800ec26:	2102      	movs	r1, #2
 800ec28:	f7ff fede 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ec2c:	b005      	add	sp, #20
 800ec2e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec32:	bf00      	nop
 800ec34:	20002258 	andcs	r2, r0, r8, asr r2

0800ec38 <StoreDmxSend::~StoreDmxSend()>:
 800ec38:	b510      	push	{r4, lr}
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	f003 ff52 	bl	8012ae4 <operator delete(void*)>
 800ec40:	4620      	mov	r0, r4
 800ec42:	bd10      	pop	{r4, pc}

0800ec44 <StoreDmxSend::StoreDmxSend()>:
 800ec44:	4a02      	ldr	r2, [pc, #8]	; (800ec50 <StoreDmxSend::StoreDmxSend()+0xc>)
 800ec46:	6002      	str	r2, [r0, #0]
 800ec48:	4a02      	ldr	r2, [pc, #8]	; (800ec54 <StoreDmxSend::StoreDmxSend()+0x10>)
 800ec4a:	6010      	str	r0, [r2, #0]
 800ec4c:	4770      	bx	lr
 800ec4e:	bf00      	nop
 800ec50:	08016c70 	stmdaeq	r1, {r4, r5, r6, sl, fp, sp, lr}
 800ec54:	20002264 	andcs	r2, r0, r4, ror #4

0800ec58 <StoreNetwork::~StoreNetwork()>:
 800ec58:	4770      	bx	lr

0800ec5a <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800ec5a:	3804      	subs	r0, #4
 800ec5c:	4770      	bx	lr
	...

0800ec60 <StoreNetwork::Update(networkparams::Params const*)>:
 800ec60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec62:	2200      	movs	r2, #0
 800ec64:	460b      	mov	r3, r1
 800ec66:	215e      	movs	r1, #94	; 0x5e
 800ec68:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ec6c:	4804      	ldr	r0, [pc, #16]	; (800ec80 <StoreNetwork::Update(networkparams::Params const*)+0x20>)
 800ec6e:	9100      	str	r1, [sp, #0]
 800ec70:	6800      	ldr	r0, [r0, #0]
 800ec72:	4611      	mov	r1, r2
 800ec74:	f7ff feb8 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ec78:	b005      	add	sp, #20
 800ec7a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec7e:	bf00      	nop
 800ec80:	20002258 	andcs	r2, r0, r8, asr r2

0800ec84 <StoreNetwork::SaveDhcp(bool)>:
 800ec84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ec86:	2301      	movs	r3, #1
 800ec88:	f88d 1017 	strb.w	r1, [sp, #23]
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ec92:	4805      	ldr	r0, [pc, #20]	; (800eca8 <StoreNetwork::SaveDhcp(bool)+0x24>)
 800ec94:	9300      	str	r3, [sp, #0]
 800ec96:	2214      	movs	r2, #20
 800ec98:	6800      	ldr	r0, [r0, #0]
 800ec9a:	f10d 0317 	add.w	r3, sp, #23
 800ec9e:	f7ff fea3 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eca2:	b007      	add	sp, #28
 800eca4:	f85d fb04 	ldr.w	pc, [sp], #4
 800eca8:	20002258 	andcs	r2, r0, r8, asr r2

0800ecac <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800ecac:	f1a0 0004 	sub.w	r0, r0, #4
 800ecb0:	e7e8      	b.n	800ec84 <StoreNetwork::SaveDhcp(bool)>
 800ecb2:	bf00      	nop

0800ecb4 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 800ecb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ecb6:	2308      	movs	r3, #8
 800ecb8:	9105      	str	r1, [sp, #20]
 800ecba:	2100      	movs	r1, #0
 800ecbc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ecc0:	2304      	movs	r3, #4
 800ecc2:	4805      	ldr	r0, [pc, #20]	; (800ecd8 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 800ecc4:	9300      	str	r3, [sp, #0]
 800ecc6:	220c      	movs	r2, #12
 800ecc8:	6800      	ldr	r0, [r0, #0]
 800ecca:	ab05      	add	r3, sp, #20
 800eccc:	f7ff fe8c 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ecd0:	b007      	add	sp, #28
 800ecd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecd6:	bf00      	nop
 800ecd8:	20002258 	andcs	r2, r0, r8, asr r2

0800ecdc <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 800ecdc:	f1a0 0004 	sub.w	r0, r0, #4
 800ece0:	e7e8      	b.n	800ecb4 <StoreNetwork::SaveGatewayIp(unsigned int)>
 800ece2:	bf00      	nop

0800ece4 <StoreNetwork::SaveNetMask(unsigned int)>:
 800ece4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ece6:	2304      	movs	r3, #4
 800ece8:	9105      	str	r1, [sp, #20]
 800ecea:	2100      	movs	r1, #0
 800ecec:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ecf0:	4804      	ldr	r0, [pc, #16]	; (800ed04 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 800ecf2:	9300      	str	r3, [sp, #0]
 800ecf4:	2208      	movs	r2, #8
 800ecf6:	6800      	ldr	r0, [r0, #0]
 800ecf8:	ab05      	add	r3, sp, #20
 800ecfa:	f7ff fe75 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ecfe:	b007      	add	sp, #28
 800ed00:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed04:	20002258 	andcs	r2, r0, r8, asr r2

0800ed08 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 800ed08:	f1a0 0004 	sub.w	r0, r0, #4
 800ed0c:	e7ea      	b.n	800ece4 <StoreNetwork::SaveNetMask(unsigned int)>
 800ed0e:	bf00      	nop

0800ed10 <StoreNetwork::SaveIp(unsigned int)>:
 800ed10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ed12:	2302      	movs	r3, #2
 800ed14:	9105      	str	r1, [sp, #20]
 800ed16:	2100      	movs	r1, #0
 800ed18:	2204      	movs	r2, #4
 800ed1a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ed1e:	4804      	ldr	r0, [pc, #16]	; (800ed30 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 800ed20:	9200      	str	r2, [sp, #0]
 800ed22:	6800      	ldr	r0, [r0, #0]
 800ed24:	ab05      	add	r3, sp, #20
 800ed26:	f7ff fe5f 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ed2a:	b007      	add	sp, #28
 800ed2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed30:	20002258 	andcs	r2, r0, r8, asr r2

0800ed34 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 800ed34:	f1a0 0004 	sub.w	r0, r0, #4
 800ed38:	e7ea      	b.n	800ed10 <StoreNetwork::SaveIp(unsigned int)>
 800ed3a:	bf00      	nop

0800ed3c <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800ed3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed3e:	460b      	mov	r3, r1
 800ed40:	2020      	movs	r0, #32
 800ed42:	2100      	movs	r1, #0
 800ed44:	2a40      	cmp	r2, #64	; 0x40
 800ed46:	bf28      	it	cs
 800ed48:	2240      	movcs	r2, #64	; 0x40
 800ed4a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800ed4e:	4804      	ldr	r0, [pc, #16]	; (800ed60 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 800ed50:	9200      	str	r2, [sp, #0]
 800ed52:	6800      	ldr	r0, [r0, #0]
 800ed54:	2215      	movs	r2, #21
 800ed56:	f7ff fe47 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ed5a:	b005      	add	sp, #20
 800ed5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed60:	20002258 	andcs	r2, r0, r8, asr r2

0800ed64 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800ed64:	f1a0 0004 	sub.w	r0, r0, #4
 800ed68:	e7e8      	b.n	800ed3c <StoreNetwork::SaveHostName(char const*, unsigned int)>
 800ed6a:	bf00      	nop

0800ed6c <StoreNetwork::~StoreNetwork()>:
 800ed6c:	b510      	push	{r4, lr}
 800ed6e:	4604      	mov	r4, r0
 800ed70:	f003 feb8 	bl	8012ae4 <operator delete(void*)>
 800ed74:	4620      	mov	r0, r4
 800ed76:	bd10      	pop	{r4, pc}

0800ed78 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800ed78:	f1a0 0004 	sub.w	r0, r0, #4
 800ed7c:	e7f6      	b.n	800ed6c <StoreNetwork::~StoreNetwork()>
	...

0800ed80 <StoreNetwork::Copy(networkparams::Params*)>:
 800ed80:	b507      	push	{r0, r1, r2, lr}
 800ed82:	2301      	movs	r3, #1
 800ed84:	460a      	mov	r2, r1
 800ed86:	2100      	movs	r1, #0
 800ed88:	e9cd 1300 	strd	r1, r3, [sp]
 800ed8c:	4803      	ldr	r0, [pc, #12]	; (800ed9c <StoreNetwork::Copy(networkparams::Params*)+0x1c>)
 800ed8e:	235e      	movs	r3, #94	; 0x5e
 800ed90:	6800      	ldr	r0, [r0, #0]
 800ed92:	f7ff fe69 	bl	800ea68 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800ed96:	b003      	add	sp, #12
 800ed98:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed9c:	20002258 	andcs	r2, r0, r8, asr r2

0800eda0 <StoreNetwork::StoreNetwork()>:
 800eda0:	4a03      	ldr	r2, [pc, #12]	; (800edb0 <StoreNetwork::StoreNetwork()+0x10>)
 800eda2:	6002      	str	r2, [r0, #0]
 800eda4:	322c      	adds	r2, #44	; 0x2c
 800eda6:	6042      	str	r2, [r0, #4]
 800eda8:	4a02      	ldr	r2, [pc, #8]	; (800edb4 <StoreNetwork::StoreNetwork()+0x14>)
 800edaa:	6010      	str	r0, [r2, #0]
 800edac:	4770      	bx	lr
 800edae:	bf00      	nop
 800edb0:	08016c88 	stmdaeq	r1, {r3, r7, sl, fp, sp, lr}
 800edb4:	20002268 	andcs	r2, r0, r8, ror #4

0800edb8 <StoreRDMDevice::~StoreRDMDevice()>:
 800edb8:	4770      	bx	lr

0800edba <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800edba:	3804      	subs	r0, #4
 800edbc:	4770      	bx	lr
	...

0800edc0 <StoreRDMDevice::Update(TRDMDeviceParams const*)>:
 800edc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edc2:	2200      	movs	r2, #0
 800edc4:	460b      	mov	r3, r1
 800edc6:	2129      	movs	r1, #41	; 0x29
 800edc8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800edcc:	4804      	ldr	r0, [pc, #16]	; (800ede0 <StoreRDMDevice::Update(TRDMDeviceParams const*)+0x20>)
 800edce:	9100      	str	r1, [sp, #0]
 800edd0:	6800      	ldr	r0, [r0, #0]
 800edd2:	210b      	movs	r1, #11
 800edd4:	f7ff fe08 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800edd8:	b005      	add	sp, #20
 800edda:	f85d fb04 	ldr.w	pc, [sp], #4
 800edde:	bf00      	nop
 800ede0:	20002258 	andcs	r2, r0, r8, asr r2

0800ede4 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800ede4:	b570      	push	{r4, r5, r6, lr}
 800ede6:	2401      	movs	r4, #1
 800ede8:	2600      	movs	r6, #0
 800edea:	4d0c      	ldr	r5, [pc, #48]	; (800ee1c <StoreRDMDevice::SaveLabel(char const*, unsigned char)+0x38>)
 800edec:	b086      	sub	sp, #24
 800edee:	460b      	mov	r3, r1
 800edf0:	6828      	ldr	r0, [r5, #0]
 800edf2:	f88d 2017 	strb.w	r2, [sp, #23]
 800edf6:	9200      	str	r2, [sp, #0]
 800edf8:	210b      	movs	r1, #11
 800edfa:	2204      	movs	r2, #4
 800edfc:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800ee00:	f7ff fdf2 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ee04:	2224      	movs	r2, #36	; 0x24
 800ee06:	210b      	movs	r1, #11
 800ee08:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800ee0c:	6828      	ldr	r0, [r5, #0]
 800ee0e:	9400      	str	r4, [sp, #0]
 800ee10:	f10d 0317 	add.w	r3, sp, #23
 800ee14:	f7ff fde8 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ee18:	b006      	add	sp, #24
 800ee1a:	bd70      	pop	{r4, r5, r6, pc}
 800ee1c:	20002258 	andcs	r2, r0, r8, asr r2

0800ee20 <non-virtual thunk to StoreRDMDevice::SaveLabel(char const*, unsigned char)>:
 800ee20:	f1a0 0004 	sub.w	r0, r0, #4
 800ee24:	e7de      	b.n	800ede4 <StoreRDMDevice::SaveLabel(char const*, unsigned char)>
 800ee26:	bf00      	nop

0800ee28 <StoreRDMDevice::~StoreRDMDevice()>:
 800ee28:	b510      	push	{r4, lr}
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	f003 fe5a 	bl	8012ae4 <operator delete(void*)>
 800ee30:	4620      	mov	r0, r4
 800ee32:	bd10      	pop	{r4, pc}

0800ee34 <non-virtual thunk to StoreRDMDevice::~StoreRDMDevice()>:
 800ee34:	f1a0 0004 	sub.w	r0, r0, #4
 800ee38:	e7f6      	b.n	800ee28 <StoreRDMDevice::~StoreRDMDevice()>
	...

0800ee3c <StoreRDMDevice::Copy(TRDMDeviceParams*)>:
 800ee3c:	b507      	push	{r0, r1, r2, lr}
 800ee3e:	2300      	movs	r3, #0
 800ee40:	460a      	mov	r2, r1
 800ee42:	2101      	movs	r1, #1
 800ee44:	e9cd 3100 	strd	r3, r1, [sp]
 800ee48:	4804      	ldr	r0, [pc, #16]	; (800ee5c <StoreRDMDevice::Copy(TRDMDeviceParams*)+0x20>)
 800ee4a:	2329      	movs	r3, #41	; 0x29
 800ee4c:	210b      	movs	r1, #11
 800ee4e:	6800      	ldr	r0, [r0, #0]
 800ee50:	f7ff fe0a 	bl	800ea68 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800ee54:	b003      	add	sp, #12
 800ee56:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee5a:	bf00      	nop
 800ee5c:	20002258 	andcs	r2, r0, r8, asr r2

0800ee60 <StoreRDMDevice::StoreRDMDevice()>:
 800ee60:	4a03      	ldr	r2, [pc, #12]	; (800ee70 <StoreRDMDevice::StoreRDMDevice()+0x10>)
 800ee62:	6002      	str	r2, [r0, #0]
 800ee64:	321c      	adds	r2, #28
 800ee66:	6042      	str	r2, [r0, #4]
 800ee68:	4a02      	ldr	r2, [pc, #8]	; (800ee74 <StoreRDMDevice::StoreRDMDevice()+0x14>)
 800ee6a:	6010      	str	r0, [r2, #0]
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop
 800ee70:	08016cd8 	stmdaeq	r1, {r3, r4, r6, r7, sl, fp, sp, lr}
 800ee74:	2000226c 	andcs	r2, r0, ip, ror #4

0800ee78 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800ee78:	4770      	bx	lr
	...

0800ee7c <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 800ee7c:	b507      	push	{r0, r1, r2, lr}
 800ee7e:	2300      	movs	r3, #0
 800ee80:	460a      	mov	r2, r1
 800ee82:	2101      	movs	r1, #1
 800ee84:	e9cd 3100 	strd	r3, r1, [sp]
 800ee88:	4804      	ldr	r0, [pc, #16]	; (800ee9c <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x20>)
 800ee8a:	2320      	movs	r3, #32
 800ee8c:	210c      	movs	r1, #12
 800ee8e:	6800      	ldr	r0, [r0, #0]
 800ee90:	f7ff fdea 	bl	800ea68 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800ee94:	b003      	add	sp, #12
 800ee96:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee9a:	bf00      	nop
 800ee9c:	20002258 	andcs	r2, r0, r8, asr r2

0800eea0 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 800eea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eea2:	2200      	movs	r2, #0
 800eea4:	460b      	mov	r3, r1
 800eea6:	2120      	movs	r1, #32
 800eea8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800eeac:	4804      	ldr	r0, [pc, #16]	; (800eec0 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 800eeae:	9100      	str	r1, [sp, #0]
 800eeb0:	6800      	ldr	r0, [r0, #0]
 800eeb2:	210c      	movs	r1, #12
 800eeb4:	f7ff fd98 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eeb8:	b005      	add	sp, #20
 800eeba:	f85d fb04 	ldr.w	pc, [sp], #4
 800eebe:	bf00      	nop
 800eec0:	20002258 	andcs	r2, r0, r8, asr r2

0800eec4 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800eec4:	b510      	push	{r4, lr}
 800eec6:	4604      	mov	r4, r0
 800eec8:	f003 fe0c 	bl	8012ae4 <operator delete(void*)>
 800eecc:	4620      	mov	r0, r4
 800eece:	bd10      	pop	{r4, pc}

0800eed0 <StoreRemoteConfig::StoreRemoteConfig()>:
 800eed0:	4a02      	ldr	r2, [pc, #8]	; (800eedc <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 800eed2:	6002      	str	r2, [r0, #0]
 800eed4:	4a02      	ldr	r2, [pc, #8]	; (800eee0 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 800eed6:	6010      	str	r0, [r2, #0]
 800eed8:	4770      	bx	lr
 800eeda:	bf00      	nop
 800eedc:	08016d08 	stmdaeq	r1, {r3, r8, sl, fp, sp, lr}
 800eee0:	20002270 	andcs	r2, r0, r0, ror r2

0800eee4 <StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 800eee4:	4770      	bx	lr

0800eee6 <non-virtual thunk to StoreArtNet::SaveUniverse(unsigned int, unsigned short)>:
 800eee6:	4770      	bx	lr

0800eee8 <StoreArtNet::~StoreArtNet()>:
 800eee8:	4770      	bx	lr

0800eeea <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800eeea:	3804      	subs	r0, #4
 800eeec:	4770      	bx	lr
	...

0800eef0 <StoreArtNet::Update(artnetparams::Params const*)>:
 800eef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eef2:	2200      	movs	r2, #0
 800eef4:	460b      	mov	r3, r1
 800eef6:	2187      	movs	r1, #135	; 0x87
 800eef8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800eefc:	4804      	ldr	r0, [pc, #16]	; (800ef10 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 800eefe:	9100      	str	r1, [sp, #0]
 800ef00:	6800      	ldr	r0, [r0, #0]
 800ef02:	2101      	movs	r1, #1
 800ef04:	f7ff fd70 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ef08:	b005      	add	sp, #20
 800ef0a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef0e:	bf00      	nop
 800ef10:	20002258 	andcs	r2, r0, r8, asr r2

0800ef14 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800ef14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ef16:	4b0d      	ldr	r3, [pc, #52]	; (800ef4c <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x38>)
 800ef18:	f88d 2017 	strb.w	r2, [sp, #23]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	428a      	cmp	r2, r1
 800ef20:	d811      	bhi.n	800ef46 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 800ef22:	1a8a      	subs	r2, r1, r2
 800ef24:	2a03      	cmp	r2, #3
 800ef26:	d80e      	bhi.n	800ef46 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x32>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	9302      	str	r3, [sp, #8]
 800ef2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ef30:	2101      	movs	r1, #1
 800ef32:	4093      	lsls	r3, r2
 800ef34:	4806      	ldr	r0, [pc, #24]	; (800ef50 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x3c>)
 800ef36:	9301      	str	r3, [sp, #4]
 800ef38:	9100      	str	r1, [sp, #0]
 800ef3a:	6800      	ldr	r0, [r0, #0]
 800ef3c:	f10d 0317 	add.w	r3, sp, #23
 800ef40:	3267      	adds	r2, #103	; 0x67
 800ef42:	f7ff fd51 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ef46:	b007      	add	sp, #28
 800ef48:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef4c:	20002274 	andcs	r2, r0, r4, ror r2
 800ef50:	20002258 	andcs	r2, r0, r8, asr r2

0800ef54 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800ef54:	f1a0 0004 	sub.w	r0, r0, #4
 800ef58:	f7ff bfdc 	b.w	800ef14 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

0800ef5c <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 800ef5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ef5e:	f88d 2017 	strb.w	r2, [sp, #23]
 800ef62:	b951      	cbnz	r1, 800ef7a <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x1e>
 800ef64:	9102      	str	r1, [sp, #8]
 800ef66:	2204      	movs	r2, #4
 800ef68:	2101      	movs	r1, #1
 800ef6a:	e9cd 1200 	strd	r1, r2, [sp]
 800ef6e:	4804      	ldr	r0, [pc, #16]	; (800ef80 <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)+0x24>)
 800ef70:	f10d 0317 	add.w	r3, sp, #23
 800ef74:	6800      	ldr	r0, [r0, #0]
 800ef76:	f7ff fd37 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ef7a:	b007      	add	sp, #28
 800ef7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ef80:	20002258 	andcs	r2, r0, r8, asr r2

0800ef84 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>:
 800ef84:	f1a0 0004 	sub.w	r0, r0, #4
 800ef88:	f7ff bfe8 	b.w	800ef5c <StoreArtNet::SaveNetSwitch(unsigned int, unsigned char)>

0800ef8c <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 800ef8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ef8e:	f88d 2017 	strb.w	r2, [sp, #23]
 800ef92:	b959      	cbnz	r1, 800efac <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x20>
 800ef94:	2308      	movs	r3, #8
 800ef96:	9102      	str	r1, [sp, #8]
 800ef98:	2101      	movs	r1, #1
 800ef9a:	e9cd 1300 	strd	r1, r3, [sp]
 800ef9e:	4805      	ldr	r0, [pc, #20]	; (800efb4 <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)+0x28>)
 800efa0:	2205      	movs	r2, #5
 800efa2:	6800      	ldr	r0, [r0, #0]
 800efa4:	f10d 0317 	add.w	r3, sp, #23
 800efa8:	f7ff fd1e 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800efac:	b007      	add	sp, #28
 800efae:	f85d fb04 	ldr.w	pc, [sp], #4
 800efb2:	bf00      	nop
 800efb4:	20002258 	andcs	r2, r0, r8, asr r2

0800efb8 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>:
 800efb8:	f1a0 0004 	sub.w	r0, r0, #4
 800efbc:	f7ff bfe6 	b.w	800ef8c <StoreArtNet::SaveSubnetSwitch(unsigned int, unsigned char)>

0800efc0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800efc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800efc2:	4b0c      	ldr	r3, [pc, #48]	; (800eff4 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x34>)
 800efc4:	9205      	str	r2, [sp, #20]
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	428a      	cmp	r2, r1
 800efca:	d810      	bhi.n	800efee <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 800efcc:	1a8a      	subs	r2, r1, r2
 800efce:	2a03      	cmp	r2, #3
 800efd0:	d80d      	bhi.n	800efee <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x2e>
 800efd2:	2300      	movs	r3, #0
 800efd4:	9302      	str	r3, [sp, #8]
 800efd6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800efda:	2101      	movs	r1, #1
 800efdc:	4093      	lsls	r3, r2
 800efde:	4806      	ldr	r0, [pc, #24]	; (800eff8 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x38>)
 800efe0:	9301      	str	r3, [sp, #4]
 800efe2:	9100      	str	r1, [sp, #0]
 800efe4:	6800      	ldr	r0, [r0, #0]
 800efe6:	ab05      	add	r3, sp, #20
 800efe8:	326c      	adds	r2, #108	; 0x6c
 800efea:	f7ff fcfd 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800efee:	b007      	add	sp, #28
 800eff0:	f85d fb04 	ldr.w	pc, [sp], #4
 800eff4:	20002274 	andcs	r2, r0, r4, ror r2
 800eff8:	20002258 	andcs	r2, r0, r8, asr r2

0800effc <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800effc:	f1a0 0004 	sub.w	r0, r0, #4
 800f000:	f7ff bfde 	b.w	800efc0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

0800f004 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800f004:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f006:	4b0c      	ldr	r3, [pc, #48]	; (800f038 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x34>)
 800f008:	9205      	str	r2, [sp, #20]
 800f00a:	681a      	ldr	r2, [r3, #0]
 800f00c:	428a      	cmp	r2, r1
 800f00e:	d810      	bhi.n	800f032 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 800f010:	1a8a      	subs	r2, r1, r2
 800f012:	2a03      	cmp	r2, #3
 800f014:	d80d      	bhi.n	800f032 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x2e>
 800f016:	2300      	movs	r3, #0
 800f018:	9302      	str	r3, [sp, #8]
 800f01a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f01e:	2101      	movs	r1, #1
 800f020:	4093      	lsls	r3, r2
 800f022:	4806      	ldr	r0, [pc, #24]	; (800f03c <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x38>)
 800f024:	9301      	str	r3, [sp, #4]
 800f026:	9100      	str	r1, [sp, #0]
 800f028:	6800      	ldr	r0, [r0, #0]
 800f02a:	ab05      	add	r3, sp, #20
 800f02c:	3271      	adds	r2, #113	; 0x71
 800f02e:	f7ff fcdb 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f032:	b007      	add	sp, #28
 800f034:	f85d fb04 	ldr.w	pc, [sp], #4
 800f038:	20002274 	andcs	r2, r0, r4, ror r2
 800f03c:	20002258 	andcs	r2, r0, r8, asr r2

0800f040 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800f040:	f1a0 0004 	sub.w	r0, r0, #4
 800f044:	f7ff bfde 	b.w	800f004 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

0800f048 <StoreArtNet::SaveLongName(char const*)>:
 800f048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f04a:	460b      	mov	r3, r1
 800f04c:	2200      	movs	r2, #0
 800f04e:	2101      	movs	r1, #1
 800f050:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800f054:	2240      	movs	r2, #64	; 0x40
 800f056:	4804      	ldr	r0, [pc, #16]	; (800f068 <StoreArtNet::SaveLongName(char const*)+0x20>)
 800f058:	9200      	str	r2, [sp, #0]
 800f05a:	6800      	ldr	r0, [r0, #0]
 800f05c:	221e      	movs	r2, #30
 800f05e:	f7ff fcc3 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f062:	b005      	add	sp, #20
 800f064:	f85d fb04 	ldr.w	pc, [sp], #4
 800f068:	20002258 	andcs	r2, r0, r8, asr r2

0800f06c <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 800f06c:	f1a0 0004 	sub.w	r0, r0, #4
 800f070:	e7ea      	b.n	800f048 <StoreArtNet::SaveLongName(char const*)>
 800f072:	bf00      	nop

0800f074 <StoreArtNet::SaveShortName(char const*)>:
 800f074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f076:	460b      	mov	r3, r1
 800f078:	2202      	movs	r2, #2
 800f07a:	2100      	movs	r1, #0
 800f07c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800f080:	2212      	movs	r2, #18
 800f082:	4805      	ldr	r0, [pc, #20]	; (800f098 <StoreArtNet::SaveShortName(char const*)+0x24>)
 800f084:	9200      	str	r2, [sp, #0]
 800f086:	2101      	movs	r1, #1
 800f088:	220c      	movs	r2, #12
 800f08a:	6800      	ldr	r0, [r0, #0]
 800f08c:	f7ff fcac 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f090:	b005      	add	sp, #20
 800f092:	f85d fb04 	ldr.w	pc, [sp], #4
 800f096:	bf00      	nop
 800f098:	20002258 	andcs	r2, r0, r8, asr r2

0800f09c <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 800f09c:	f1a0 0004 	sub.w	r0, r0, #4
 800f0a0:	e7e8      	b.n	800f074 <StoreArtNet::SaveShortName(char const*)>
 800f0a2:	bf00      	nop

0800f0a4 <StoreArtNet::SaveFailSafe(unsigned char)>:
 800f0a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f0a6:	2310      	movs	r3, #16
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f88d 1017 	strb.w	r1, [sp, #23]
 800f0ae:	2101      	movs	r1, #1
 800f0b0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f0b4:	4805      	ldr	r0, [pc, #20]	; (800f0cc <StoreArtNet::SaveFailSafe(unsigned char)+0x28>)
 800f0b6:	9100      	str	r1, [sp, #0]
 800f0b8:	2206      	movs	r2, #6
 800f0ba:	6800      	ldr	r0, [r0, #0]
 800f0bc:	f10d 0317 	add.w	r3, sp, #23
 800f0c0:	f7ff fc92 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f0c4:	b007      	add	sp, #28
 800f0c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0ca:	bf00      	nop
 800f0cc:	20002258 	andcs	r2, r0, r8, asr r2

0800f0d0 <non-virtual thunk to StoreArtNet::SaveFailSafe(unsigned char)>:
 800f0d0:	f1a0 0004 	sub.w	r0, r0, #4
 800f0d4:	e7e6      	b.n	800f0a4 <StoreArtNet::SaveFailSafe(unsigned char)>
 800f0d6:	bf00      	nop

0800f0d8 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 800f0d8:	b570      	push	{r4, r5, r6, lr}
 800f0da:	4b1b      	ldr	r3, [pc, #108]	; (800f148 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x70>)
 800f0dc:	4615      	mov	r5, r2
 800f0de:	681c      	ldr	r4, [r3, #0]
 800f0e0:	b086      	sub	sp, #24
 800f0e2:	428c      	cmp	r4, r1
 800f0e4:	d829      	bhi.n	800f13a <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 800f0e6:	1b0c      	subs	r4, r1, r4
 800f0e8:	2c03      	cmp	r4, #3
 800f0ea:	d826      	bhi.n	800f13a <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x62>
 800f0ec:	2308      	movs	r3, #8
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	4e16      	ldr	r6, [pc, #88]	; (800f14c <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x74>)
 800f0f2:	e9cd 3200 	strd	r3, r2, [sp]
 800f0f6:	2101      	movs	r1, #1
 800f0f8:	2302      	movs	r3, #2
 800f0fa:	f10d 0216 	add.w	r2, sp, #22
 800f0fe:	6830      	ldr	r0, [r6, #0]
 800f100:	f7ff fcb2 	bl	800ea68 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800f104:	2201      	movs	r2, #1
 800f106:	f104 0308 	add.w	r3, r4, #8
 800f10a:	fa02 f303 	lsl.w	r3, r2, r3
 800f10e:	40a2      	lsls	r2, r4
 800f110:	4313      	orrs	r3, r2
 800f112:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800f116:	b29b      	uxth	r3, r3
 800f118:	ea21 0203 	bic.w	r2, r1, r3
 800f11c:	b97d      	cbnz	r5, 800f13e <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x66>
 800f11e:	f8ad 2016 	strh.w	r2, [sp, #22]
 800f122:	2300      	movs	r3, #0
 800f124:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800f128:	2302      	movs	r3, #2
 800f12a:	2208      	movs	r2, #8
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	2101      	movs	r1, #1
 800f130:	6830      	ldr	r0, [r6, #0]
 800f132:	f10d 0316 	add.w	r3, sp, #22
 800f136:	f7ff fc57 	bl	800e9e8 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800f13a:	b006      	add	sp, #24
 800f13c:	bd70      	pop	{r4, r5, r6, pc}
 800f13e:	4319      	orrs	r1, r3
 800f140:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f144:	e7ed      	b.n	800f122 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)+0x4a>
 800f146:	bf00      	nop
 800f148:	20002274 	andcs	r2, r0, r4, ror r2
 800f14c:	20002258 	andcs	r2, r0, r8, asr r2

0800f150 <non-virtual thunk to StoreArtNet::SaveRdmEnabled(unsigned int, bool)>:
 800f150:	f1a0 0004 	sub.w	r0, r0, #4
 800f154:	f7ff bfc0 	b.w	800f0d8 <StoreArtNet::SaveRdmEnabled(unsigned int, bool)>

0800f158 <StoreArtNet::Copy(artnetparams::Params*)>:
 800f158:	b507      	push	{r0, r1, r2, lr}
 800f15a:	2300      	movs	r3, #0
 800f15c:	460a      	mov	r2, r1
 800f15e:	2101      	movs	r1, #1
 800f160:	e9cd 3100 	strd	r3, r1, [sp]
 800f164:	4803      	ldr	r0, [pc, #12]	; (800f174 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 800f166:	2387      	movs	r3, #135	; 0x87
 800f168:	6800      	ldr	r0, [r0, #0]
 800f16a:	f7ff fc7d 	bl	800ea68 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int, bool)>
 800f16e:	b003      	add	sp, #12
 800f170:	f85d fb04 	ldr.w	pc, [sp], #4
 800f174:	20002258 	andcs	r2, r0, r8, asr r2

0800f178 <StoreArtNet::~StoreArtNet()>:
 800f178:	b510      	push	{r4, lr}
 800f17a:	4604      	mov	r4, r0
 800f17c:	f003 fcb2 	bl	8012ae4 <operator delete(void*)>
 800f180:	4620      	mov	r0, r4
 800f182:	bd10      	pop	{r4, pc}

0800f184 <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800f184:	f1a0 0004 	sub.w	r0, r0, #4
 800f188:	e7f6      	b.n	800f178 <StoreArtNet::~StoreArtNet()>
	...

0800f18c <StoreArtNet::StoreArtNet(unsigned int)>:
 800f18c:	b510      	push	{r4, lr}
 800f18e:	4a05      	ldr	r2, [pc, #20]	; (800f1a4 <StoreArtNet::StoreArtNet(unsigned int)+0x18>)
 800f190:	4b05      	ldr	r3, [pc, #20]	; (800f1a8 <StoreArtNet::StoreArtNet(unsigned int)+0x1c>)
 800f192:	f102 0408 	add.w	r4, r2, #8
 800f196:	3248      	adds	r2, #72	; 0x48
 800f198:	6042      	str	r2, [r0, #4]
 800f19a:	4a04      	ldr	r2, [pc, #16]	; (800f1ac <StoreArtNet::StoreArtNet(unsigned int)+0x20>)
 800f19c:	6004      	str	r4, [r0, #0]
 800f19e:	6010      	str	r0, [r2, #0]
 800f1a0:	6019      	str	r1, [r3, #0]
 800f1a2:	bd10      	pop	{r4, pc}
 800f1a4:	08016d18 	stmdaeq	r1, {r3, r4, r8, sl, fp, sp, lr}
 800f1a8:	20002274 	andcs	r2, r0, r4, ror r2
 800f1ac:	20002278 	andcs	r2, r0, r8, ror r2

0800f1b0 <FlashRom::FlashRom()>:
 800f1b0:	4b07      	ldr	r3, [pc, #28]	; (800f1d0 <FlashRom::FlashRom()+0x20>)
 800f1b2:	b510      	push	{r4, lr}
 800f1b4:	6018      	str	r0, [r3, #0]
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	7003      	strb	r3, [r0, #0]
 800f1bc:	4b05      	ldr	r3, [pc, #20]	; (800f1d4 <FlashRom::FlashRom()+0x24>)
 800f1be:	4906      	ldr	r1, [pc, #24]	; (800f1d8 <FlashRom::FlashRom()+0x28>)
 800f1c0:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800f1c4:	4805      	ldr	r0, [pc, #20]	; (800f1dc <FlashRom::FlashRom()+0x2c>)
 800f1c6:	029a      	lsls	r2, r3, #10
 800f1c8:	f003 ff80 	bl	80130cc <printf>
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	bd10      	pop	{r4, pc}
 800f1d0:	20002280 	andcs	r2, r0, r0, lsl #5
 800f1d4:	1ffff700 	svcne	0x00fff700
 800f1d8:	08015b3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, fp, ip, lr}
 800f1dc:	08016d90 	stmdaeq	r1, {r4, r7, r8, sl, fp, sp, lr}

0800f1e0 <FlashRom::GetSize() const>:
 800f1e0:	4b02      	ldr	r3, [pc, #8]	; (800f1ec <FlashRom::GetSize() const+0xc>)
 800f1e2:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800f1e6:	0280      	lsls	r0, r0, #10
 800f1e8:	4770      	bx	lr
 800f1ea:	bf00      	nop
 800f1ec:	1ffff700 	svcne	0x00fff700

0800f1f0 <FlashRom::GetSectorSize() const>:
 800f1f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f1f4:	4770      	bx	lr

0800f1f6 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 800f1f6:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800f1fa:	441a      	add	r2, r3
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d104      	bne.n	800f20a <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 800f200:	2200      	movs	r2, #0
 800f202:	9b00      	ldr	r3, [sp, #0]
 800f204:	2001      	movs	r0, #1
 800f206:	601a      	str	r2, [r3, #0]
 800f208:	4770      	bx	lr
 800f20a:	f851 0b04 	ldr.w	r0, [r1], #4
 800f20e:	f843 0b04 	str.w	r0, [r3], #4
 800f212:	e7f3      	b.n	800f1fc <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>

0800f214 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 800f214:	2000      	movs	r0, #0
 800f216:	b538      	push	{r3, r4, r5, lr}
 800f218:	4c47      	ldr	r4, [pc, #284]	; (800f338 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 800f21a:	6018      	str	r0, [r3, #0]
 800f21c:	6823      	ldr	r3, [r4, #0]
 800f21e:	2b04      	cmp	r3, #4
 800f220:	f200 8082 	bhi.w	800f328 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800f224:	e8df f003 	tbb	[pc, r3]
 800f228:	78452003 	stmdavc	r5, {r0, r1, sp}^
 800f22c:	4b430080 	blmi	90cf434 <__exidx_end+0x10b7d50>
 800f230:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800f234:	6019      	str	r1, [r3, #0]
 800f236:	4b42      	ldr	r3, [pc, #264]	; (800f340 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800f238:	601a      	str	r2, [r3, #0]
 800f23a:	4b42      	ldr	r3, [pc, #264]	; (800f344 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 800f23c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800f240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f244:	4b40      	ldr	r3, [pc, #256]	; (800f348 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800f246:	d807      	bhi.n	800f258 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 800f248:	2201      	movs	r2, #1
 800f24a:	701a      	strb	r2, [r3, #0]
 800f24c:	f004 fa02 	bl	8013654 <fmc_bank0_unlock>
 800f250:	2301      	movs	r3, #1
 800f252:	6023      	str	r3, [r4, #0]
 800f254:	2000      	movs	r0, #0
 800f256:	e026      	b.n	800f2a6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800f258:	4a3c      	ldr	r2, [pc, #240]	; (800f34c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 800f25a:	4291      	cmp	r1, r2
 800f25c:	d3f4      	bcc.n	800f248 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 800f25e:	2200      	movs	r2, #0
 800f260:	701a      	strb	r2, [r3, #0]
 800f262:	f004 fa05 	bl	8013670 <fmc_bank1_unlock>
 800f266:	e7f3      	b.n	800f250 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800f268:	4d37      	ldr	r5, [pc, #220]	; (800f348 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800f26a:	782b      	ldrb	r3, [r5, #0]
 800f26c:	b15b      	cbz	r3, 800f286 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 800f26e:	f004 fa1d 	bl	80136ac <fmc_bank0_state_get>
 800f272:	2801      	cmp	r0, #1
 800f274:	d0ee      	beq.n	800f254 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 800f276:	7829      	ldrb	r1, [r5, #0]
 800f278:	4b35      	ldr	r3, [pc, #212]	; (800f350 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800f27a:	b939      	cbnz	r1, 800f28c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 800f27c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f27e:	f022 0202 	bic.w	r2, r2, #2
 800f282:	651a      	str	r2, [r3, #80]	; 0x50
 800f284:	e006      	b.n	800f294 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 800f286:	f004 fa23 	bl	80136d0 <fmc_bank1_state_get>
 800f28a:	e7f2      	b.n	800f272 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 800f28c:	691a      	ldr	r2, [r3, #16]
 800f28e:	f022 0202 	bic.w	r2, r2, #2
 800f292:	611a      	str	r2, [r3, #16]
 800f294:	4b2a      	ldr	r3, [pc, #168]	; (800f340 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	b94b      	cbnz	r3, 800f2ae <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 800f29a:	b129      	cbz	r1, 800f2a8 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 800f29c:	f004 f9f6 	bl	801368c <fmc_bank0_lock>
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	2001      	movs	r0, #1
 800f2a4:	6023      	str	r3, [r4, #0]
 800f2a6:	bd38      	pop	{r3, r4, r5, pc}
 800f2a8:	f004 f9f8 	bl	801369c <fmc_bank1_lock>
 800f2ac:	e7f8      	b.n	800f2a0 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 800f2ae:	2302      	movs	r3, #2
 800f2b0:	e7cf      	b.n	800f252 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 800f2b2:	4923      	ldr	r1, [pc, #140]	; (800f340 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800f2b4:	680b      	ldr	r3, [r1, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d0ca      	beq.n	800f250 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800f2ba:	4b23      	ldr	r3, [pc, #140]	; (800f348 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800f2bc:	4a1f      	ldr	r2, [pc, #124]	; (800f33c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 800f2be:	7818      	ldrb	r0, [r3, #0]
 800f2c0:	4b23      	ldr	r3, [pc, #140]	; (800f350 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800f2c2:	b190      	cbz	r0, 800f2ea <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 800f2c4:	6918      	ldr	r0, [r3, #16]
 800f2c6:	f040 0002 	orr.w	r0, r0, #2
 800f2ca:	6118      	str	r0, [r3, #16]
 800f2cc:	6810      	ldr	r0, [r2, #0]
 800f2ce:	6158      	str	r0, [r3, #20]
 800f2d0:	6918      	ldr	r0, [r3, #16]
 800f2d2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800f2d6:	6118      	str	r0, [r3, #16]
 800f2d8:	680b      	ldr	r3, [r1, #0]
 800f2da:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800f2de:	600b      	str	r3, [r1, #0]
 800f2e0:	6813      	ldr	r3, [r2, #0]
 800f2e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2e6:	6013      	str	r3, [r2, #0]
 800f2e8:	e7b2      	b.n	800f250 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800f2ea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f2ec:	f040 0002 	orr.w	r0, r0, #2
 800f2f0:	6518      	str	r0, [r3, #80]	; 0x50
 800f2f2:	6810      	ldr	r0, [r2, #0]
 800f2f4:	6558      	str	r0, [r3, #84]	; 0x54
 800f2f6:	69dd      	ldr	r5, [r3, #28]
 800f2f8:	07ad      	lsls	r5, r5, #30
 800f2fa:	bf48      	it	mi
 800f2fc:	6158      	strmi	r0, [r3, #20]
 800f2fe:	4814      	ldr	r0, [pc, #80]	; (800f350 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800f300:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f306:	6503      	str	r3, [r0, #80]	; 0x50
 800f308:	680b      	ldr	r3, [r1, #0]
 800f30a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800f30e:	600b      	str	r3, [r1, #0]
 800f310:	6813      	ldr	r3, [r2, #0]
 800f312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f316:	e7e6      	b.n	800f2e6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 800f318:	4b0b      	ldr	r3, [pc, #44]	; (800f348 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800f31a:	781a      	ldrb	r2, [r3, #0]
 800f31c:	4b0c      	ldr	r3, [pc, #48]	; (800f350 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800f31e:	b132      	cbz	r2, 800f32e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 800f320:	691a      	ldr	r2, [r3, #16]
 800f322:	f022 0201 	bic.w	r2, r2, #1
 800f326:	611a      	str	r2, [r3, #16]
 800f328:	2000      	movs	r0, #0
 800f32a:	6020      	str	r0, [r4, #0]
 800f32c:	e7bb      	b.n	800f2a6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800f32e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f330:	f022 0201 	bic.w	r2, r2, #1
 800f334:	651a      	str	r2, [r3, #80]	; 0x50
 800f336:	e7f7      	b.n	800f328 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800f338:	20002288 	andcs	r2, r0, r8, lsl #5
 800f33c:	2000228c 	andcs	r2, r0, ip, lsl #5
 800f340:	20002298 	mulcs	r0, r8, r2
 800f344:	1ffff700 	svcne	0x00fff700
 800f348:	20002294 	mulcs	r0, r4, r2
 800f34c:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800f350:	40022000 	andmi	r2, r2, r0

0800f354 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 800f354:	b570      	push	{r4, r5, r6, lr}
 800f356:	2400      	movs	r4, #0
 800f358:	9804      	ldr	r0, [sp, #16]
 800f35a:	6004      	str	r4, [r0, #0]
 800f35c:	4c48      	ldr	r4, [pc, #288]	; (800f480 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 800f35e:	6820      	ldr	r0, [r4, #0]
 800f360:	2804      	cmp	r0, #4
 800f362:	d848      	bhi.n	800f3f6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 800f364:	e8df f000 	tbb	[pc, r0]
 800f368:	22847c03 	addcs	r7, r4, #768	; 0x300
 800f36c:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 800f370:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800f374:	6001      	str	r1, [r0, #0]
 800f376:	4844      	ldr	r0, [pc, #272]	; (800f488 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800f378:	6003      	str	r3, [r0, #0]
 800f37a:	4b44      	ldr	r3, [pc, #272]	; (800f48c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800f37c:	601a      	str	r2, [r3, #0]
 800f37e:	4b44      	ldr	r3, [pc, #272]	; (800f490 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 800f380:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800f384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f388:	4b42      	ldr	r3, [pc, #264]	; (800f494 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f38a:	d807      	bhi.n	800f39c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 800f38c:	2201      	movs	r2, #1
 800f38e:	701a      	strb	r2, [r3, #0]
 800f390:	f004 f960 	bl	8013654 <fmc_bank0_unlock>
 800f394:	2303      	movs	r3, #3
 800f396:	6023      	str	r3, [r4, #0]
 800f398:	2000      	movs	r0, #0
 800f39a:	e026      	b.n	800f3ea <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800f39c:	4a3e      	ldr	r2, [pc, #248]	; (800f498 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 800f39e:	4291      	cmp	r1, r2
 800f3a0:	d3f4      	bcc.n	800f38c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	701a      	strb	r2, [r3, #0]
 800f3a6:	f004 f963 	bl	8013670 <fmc_bank1_unlock>
 800f3aa:	e7f3      	b.n	800f394 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f3ac:	4d39      	ldr	r5, [pc, #228]	; (800f494 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f3ae:	782b      	ldrb	r3, [r5, #0]
 800f3b0:	b15b      	cbz	r3, 800f3ca <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 800f3b2:	f004 f97b 	bl	80136ac <fmc_bank0_state_get>
 800f3b6:	2801      	cmp	r0, #1
 800f3b8:	d0ee      	beq.n	800f398 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 800f3ba:	7829      	ldrb	r1, [r5, #0]
 800f3bc:	4b37      	ldr	r3, [pc, #220]	; (800f49c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f3be:	b939      	cbnz	r1, 800f3d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 800f3c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3c2:	f022 0201 	bic.w	r2, r2, #1
 800f3c6:	651a      	str	r2, [r3, #80]	; 0x50
 800f3c8:	e006      	b.n	800f3d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 800f3ca:	f004 f981 	bl	80136d0 <fmc_bank1_state_get>
 800f3ce:	e7f2      	b.n	800f3b6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 800f3d0:	691a      	ldr	r2, [r3, #16]
 800f3d2:	f022 0201 	bic.w	r2, r2, #1
 800f3d6:	611a      	str	r2, [r3, #16]
 800f3d8:	4b2c      	ldr	r3, [pc, #176]	; (800f48c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	b94b      	cbnz	r3, 800f3f2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 800f3de:	b129      	cbz	r1, 800f3ec <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 800f3e0:	f004 f954 	bl	801368c <fmc_bank0_lock>
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	2001      	movs	r0, #1
 800f3e8:	6023      	str	r3, [r4, #0]
 800f3ea:	bd70      	pop	{r4, r5, r6, pc}
 800f3ec:	f004 f956 	bl	801369c <fmc_bank1_lock>
 800f3f0:	e7f8      	b.n	800f3e4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 800f3f2:	2304      	movs	r3, #4
 800f3f4:	e7cf      	b.n	800f396 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 800f3f6:	4a25      	ldr	r2, [pc, #148]	; (800f48c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800f3f8:	6813      	ldr	r3, [r2, #0]
 800f3fa:	2b03      	cmp	r3, #3
 800f3fc:	d91a      	bls.n	800f434 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 800f3fe:	4b25      	ldr	r3, [pc, #148]	; (800f494 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f400:	7819      	ldrb	r1, [r3, #0]
 800f402:	4b26      	ldr	r3, [pc, #152]	; (800f49c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f404:	b189      	cbz	r1, 800f42a <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 800f406:	6919      	ldr	r1, [r3, #16]
 800f408:	f041 0101 	orr.w	r1, r1, #1
 800f40c:	6119      	str	r1, [r3, #16]
 800f40e:	4d1e      	ldr	r5, [pc, #120]	; (800f488 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800f410:	481c      	ldr	r0, [pc, #112]	; (800f484 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800f412:	6829      	ldr	r1, [r5, #0]
 800f414:	6803      	ldr	r3, [r0, #0]
 800f416:	f851 6b04 	ldr.w	r6, [r1], #4
 800f41a:	f843 6b04 	str.w	r6, [r3], #4
 800f41e:	6003      	str	r3, [r0, #0]
 800f420:	6813      	ldr	r3, [r2, #0]
 800f422:	6029      	str	r1, [r5, #0]
 800f424:	3b04      	subs	r3, #4
 800f426:	6013      	str	r3, [r2, #0]
 800f428:	e7b4      	b.n	800f394 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f42a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f42c:	f041 0101 	orr.w	r1, r1, #1
 800f430:	6519      	str	r1, [r3, #80]	; 0x50
 800f432:	e7ec      	b.n	800f40e <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 800f434:	2b00      	cmp	r3, #0
 800f436:	d0ad      	beq.n	800f394 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f438:	4b16      	ldr	r3, [pc, #88]	; (800f494 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f43a:	781a      	ldrb	r2, [r3, #0]
 800f43c:	4b17      	ldr	r3, [pc, #92]	; (800f49c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f43e:	b152      	cbz	r2, 800f456 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 800f440:	691a      	ldr	r2, [r3, #16]
 800f442:	f042 0201 	orr.w	r2, r2, #1
 800f446:	611a      	str	r2, [r3, #16]
 800f448:	4a0f      	ldr	r2, [pc, #60]	; (800f488 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800f44a:	4b0e      	ldr	r3, [pc, #56]	; (800f484 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800f44c:	6812      	ldr	r2, [r2, #0]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	6812      	ldr	r2, [r2, #0]
 800f452:	601a      	str	r2, [r3, #0]
 800f454:	e79e      	b.n	800f394 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f458:	f042 0201 	orr.w	r2, r2, #1
 800f45c:	651a      	str	r2, [r3, #80]	; 0x50
 800f45e:	e7f3      	b.n	800f448 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 800f460:	4b0c      	ldr	r3, [pc, #48]	; (800f494 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f462:	781a      	ldrb	r2, [r3, #0]
 800f464:	4b0d      	ldr	r3, [pc, #52]	; (800f49c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f466:	b132      	cbz	r2, 800f476 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 800f468:	691a      	ldr	r2, [r3, #16]
 800f46a:	f022 0202 	bic.w	r2, r2, #2
 800f46e:	611a      	str	r2, [r3, #16]
 800f470:	2000      	movs	r0, #0
 800f472:	6020      	str	r0, [r4, #0]
 800f474:	e7b9      	b.n	800f3ea <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800f476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f478:	f022 0202 	bic.w	r2, r2, #2
 800f47c:	651a      	str	r2, [r3, #80]	; 0x50
 800f47e:	e7f7      	b.n	800f470 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 800f480:	20002288 	andcs	r2, r0, r8, lsl #5
 800f484:	20002284 	andcs	r2, r0, r4, lsl #5
 800f488:	20002290 	mulcs	r0, r0, r2
 800f48c:	20002298 	mulcs	r0, r8, r2
 800f490:	1ffff700 	svcne	0x00fff700
 800f494:	20002294 	mulcs	r0, r4, r2
 800f498:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800f49c:	40022000 	andmi	r2, r2, r0

0800f4a0 <net_set_ip>:
 800f4a0:	b510      	push	{r4, lr}
 800f4a2:	4c05      	ldr	r4, [pc, #20]	; (800f4b8 <net_set_ip+0x18>)
 800f4a4:	6020      	str	r0, [r4, #0]
 800f4a6:	4621      	mov	r1, r4
 800f4a8:	4804      	ldr	r0, [pc, #16]	; (800f4bc <net_set_ip+0x1c>)
 800f4aa:	f7f7 ff0b 	bl	80072c4 <arp_init>
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4b4:	f001 bff8 	b.w	80114a8 <ip_set_ip>
 800f4b8:	2000229c 	mulcs	r0, ip, r2
 800f4bc:	200022a8 	andcs	r2, r0, r8, lsr #5

0800f4c0 <net_set_gw>:
 800f4c0:	4b02      	ldr	r3, [pc, #8]	; (800f4cc <net_set_gw+0xc>)
 800f4c2:	6098      	str	r0, [r3, #8]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f001 bfef 	b.w	80114a8 <ip_set_ip>
 800f4ca:	bf00      	nop
 800f4cc:	2000229c 	mulcs	r0, ip, r2

0800f4d0 <net_set_dhcp>:
 800f4d0:	b570      	push	{r4, r5, r6, lr}
 800f4d2:	2400      	movs	r4, #0
 800f4d4:	4605      	mov	r5, r0
 800f4d6:	7014      	strb	r4, [r2, #0]
 800f4d8:	4616      	mov	r6, r2
 800f4da:	4810      	ldr	r0, [pc, #64]	; (800f51c <net_set_dhcp+0x4c>)
 800f4dc:	460a      	mov	r2, r1
 800f4de:	4910      	ldr	r1, [pc, #64]	; (800f520 <net_set_dhcp+0x50>)
 800f4e0:	f001 fdc2 	bl	8011068 <dhcp_client>
 800f4e4:	42a0      	cmp	r0, r4
 800f4e6:	da17      	bge.n	800f518 <net_set_dhcp+0x48>
 800f4e8:	480d      	ldr	r0, [pc, #52]	; (800f520 <net_set_dhcp+0x50>)
 800f4ea:	f000 f837 	bl	800f55c <rfc3927>
 800f4ee:	7030      	strb	r0, [r6, #0]
 800f4f0:	490b      	ldr	r1, [pc, #44]	; (800f520 <net_set_dhcp+0x50>)
 800f4f2:	480a      	ldr	r0, [pc, #40]	; (800f51c <net_set_dhcp+0x4c>)
 800f4f4:	f7f7 fee6 	bl	80072c4 <arp_init>
 800f4f8:	4809      	ldr	r0, [pc, #36]	; (800f520 <net_set_dhcp+0x50>)
 800f4fa:	f001 ffd5 	bl	80114a8 <ip_set_ip>
 800f4fe:	4a08      	ldr	r2, [pc, #32]	; (800f520 <net_set_dhcp+0x50>)
 800f500:	1e6b      	subs	r3, r5, #1
 800f502:	350b      	adds	r5, #11
 800f504:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f508:	f803 1f01 	strb.w	r1, [r3, #1]!
 800f50c:	42ab      	cmp	r3, r5
 800f50e:	d1f9      	bne.n	800f504 <net_set_dhcp+0x34>
 800f510:	4b04      	ldr	r3, [pc, #16]	; (800f524 <net_set_dhcp+0x54>)
 800f512:	4620      	mov	r0, r4
 800f514:	701c      	strb	r4, [r3, #0]
 800f516:	bd70      	pop	{r4, r5, r6, pc}
 800f518:	2401      	movs	r4, #1
 800f51a:	e7e9      	b.n	800f4f0 <net_set_dhcp+0x20>
 800f51c:	200022a8 	andcs	r2, r0, r8, lsr #5
 800f520:	2000229c 	mulcs	r0, ip, r2
 800f524:	200022ae 	andcs	r2, r0, lr, lsr #5

0800f528 <net_dhcp_release>:
 800f528:	b508      	push	{r3, lr}
 800f52a:	f001 fea5 	bl	8011278 <dhcp_client_release>
 800f52e:	2200      	movs	r2, #0
 800f530:	4b01      	ldr	r3, [pc, #4]	; (800f538 <net_dhcp_release+0x10>)
 800f532:	701a      	strb	r2, [r3, #0]
 800f534:	bd08      	pop	{r3, pc}
 800f536:	bf00      	nop
 800f538:	200022ae 	andcs	r2, r0, lr, lsr #5

0800f53c <net_timers_run>:
 800f53c:	4b05      	ldr	r3, [pc, #20]	; (800f554 <net_timers_run+0x18>)
 800f53e:	4a06      	ldr	r2, [pc, #24]	; (800f558 <net_timers_run+0x1c>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	6811      	ldr	r1, [r2, #0]
 800f544:	4299      	cmp	r1, r3
 800f546:	d803      	bhi.n	800f550 <net_timers_run+0x14>
 800f548:	3364      	adds	r3, #100	; 0x64
 800f54a:	6013      	str	r3, [r2, #0]
 800f54c:	f001 bf22 	b.w	8011394 <igmp_timer>
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	2000a24c 	andcs	sl, r0, ip, asr #4
 800f558:	200022b4 			; <UNDEFINED> instruction: 0x200022b4

0800f55c <rfc3927>:
 800f55c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f560:	4606      	mov	r6, r0
 800f562:	25ff      	movs	r5, #255	; 0xff
 800f564:	4b18      	ldr	r3, [pc, #96]	; (800f5c8 <rfc3927+0x6c>)
 800f566:	4f19      	ldr	r7, [pc, #100]	; (800f5cc <rfc3927+0x70>)
 800f568:	791a      	ldrb	r2, [r3, #4]
 800f56a:	78dc      	ldrb	r4, [r3, #3]
 800f56c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800f5d0 <rfc3927+0x74>
 800f570:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800f574:	f8d7 9000 	ldr.w	r9, [r7]
 800f578:	f8df b058 	ldr.w	fp, [pc, #88]	; 800f5d4 <rfc3927+0x78>
 800f57c:	f8df a058 	ldr.w	sl, [pc, #88]	; 800f5d8 <rfc3927+0x7c>
 800f580:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800f584:	4659      	mov	r1, fp
 800f586:	4620      	mov	r0, r4
 800f588:	f001 fc62 	bl	8010e50 <arp_cache_lookup>
 800f58c:	b190      	cbz	r0, 800f5b4 <rfc3927+0x58>
 800f58e:	ba24      	rev	r4, r4
 800f590:	3401      	adds	r4, #1
 800f592:	3d01      	subs	r5, #1
 800f594:	ba24      	rev	r4, r4
 800f596:	b2ad      	uxth	r5, r5
 800f598:	4554      	cmp	r4, sl
 800f59a:	bf08      	it	eq
 800f59c:	4644      	moveq	r4, r8
 800f59e:	b18d      	cbz	r5, 800f5c4 <rfc3927+0x68>
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	eba3 0309 	sub.w	r3, r3, r9
 800f5a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f5aa:	d3eb      	bcc.n	800f584 <rfc3927+0x28>
 800f5ac:	2400      	movs	r4, #0
 800f5ae:	4623      	mov	r3, r4
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	e002      	b.n	800f5ba <rfc3927+0x5e>
 800f5b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5b8:	2001      	movs	r0, #1
 800f5ba:	e9c6 3401 	strd	r3, r4, [r6, #4]
 800f5be:	6034      	str	r4, [r6, #0]
 800f5c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c4:	462c      	mov	r4, r5
 800f5c6:	e7f2      	b.n	800f5ae <rfc3927+0x52>
 800f5c8:	200022b8 			; <UNDEFINED> instruction: 0x200022b8
 800f5cc:	2000a24c 	andcs	sl, r0, ip, asr #4
 800f5d0:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 800f5d4:	200022c0 	andcs	r2, r0, r0, asr #5
 800f5d8:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

0800f5dc <_init_tcb>:
 800f5dc:	b510      	push	{r4, lr}
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2400      	movs	r4, #0
 800f5e2:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d10d      	bne.n	800f606 <_init_tcb+0x2a>
 800f5ea:	4b08      	ldr	r3, [pc, #32]	; (800f60c <_init_tcb+0x30>)
 800f5ec:	f640 3268 	movw	r2, #2920	; 0xb68
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	8702      	strh	r2, [r0, #56]	; 0x38
 800f5f4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5f8:	6283      	str	r3, [r0, #40]	; 0x28
 800f5fa:	6243      	str	r3, [r0, #36]	; 0x24
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	8001      	strh	r1, [r0, #0]
 800f600:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800f604:	bd10      	pop	{r4, pc}
 800f606:	f803 4b01 	strb.w	r4, [r3], #1
 800f60a:	e7ec      	b.n	800f5e6 <_init_tcb+0xa>
 800f60c:	2000a24c 	andcs	sl, r0, ip, asr #4

0800f610 <memcpy.isra.0>:
 800f610:	3801      	subs	r0, #1
 800f612:	440a      	add	r2, r1
 800f614:	4291      	cmp	r1, r2
 800f616:	d100      	bne.n	800f61a <memcpy.isra.0+0xa>
 800f618:	4770      	bx	lr
 800f61a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f61e:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f622:	e7f7      	b.n	800f614 <memcpy.isra.0+0x4>

0800f624 <_bswap32>:
 800f624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f626:	2204      	movs	r2, #4
 800f628:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 800f62c:	4629      	mov	r1, r5
 800f62e:	4604      	mov	r4, r0
 800f630:	eb0d 0002 	add.w	r0, sp, r2
 800f634:	f7ff ffec 	bl	800f610 <memcpy.isra.0>
 800f638:	2204      	movs	r2, #4
 800f63a:	9b01      	ldr	r3, [sp, #4]
 800f63c:	eb0d 0102 	add.w	r1, sp, r2
 800f640:	ba1b      	rev	r3, r3
 800f642:	4628      	mov	r0, r5
 800f644:	9301      	str	r3, [sp, #4]
 800f646:	f7ff ffe3 	bl	800f610 <memcpy.isra.0>
 800f64a:	2204      	movs	r2, #4
 800f64c:	3426      	adds	r4, #38	; 0x26
 800f64e:	eb0d 0002 	add.w	r0, sp, r2
 800f652:	4621      	mov	r1, r4
 800f654:	f7ff ffdc 	bl	800f610 <memcpy.isra.0>
 800f658:	2204      	movs	r2, #4
 800f65a:	9b01      	ldr	r3, [sp, #4]
 800f65c:	4620      	mov	r0, r4
 800f65e:	ba1b      	rev	r3, r3
 800f660:	eb0d 0102 	add.w	r1, sp, r2
 800f664:	9301      	str	r3, [sp, #4]
 800f666:	f7ff ffd3 	bl	800f610 <memcpy.isra.0>
 800f66a:	b003      	add	sp, #12
 800f66c:	bd30      	pop	{r4, r5, pc}
	...

0800f670 <_tcp_send_package>:
 800f670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f674:	7a0b      	ldrb	r3, [r1, #8]
 800f676:	4605      	mov	r5, r0
 800f678:	f013 0f02 	tst.w	r3, #2
 800f67c:	bf0c      	ite	eq
 800f67e:	f04f 0805 	moveq.w	r8, #5
 800f682:	f04f 0806 	movne.w	r8, #6
 800f686:	f04f 0a00 	mov.w	sl, #0
 800f68a:	4c47      	ldr	r4, [pc, #284]	; (800f7a8 <_tcp_send_package+0x138>)
 800f68c:	460f      	mov	r7, r1
 800f68e:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 800f690:	f100 0108 	add.w	r1, r0, #8
 800f694:	2206      	movs	r2, #6
 800f696:	4620      	mov	r0, r4
 800f698:	f7ff ffba 	bl	800f610 <memcpy.isra.0>
 800f69c:	4a43      	ldr	r2, [pc, #268]	; (800f7ac <_tcp_send_package+0x13c>)
 800f69e:	eb06 0688 	add.w	r6, r6, r8, lsl #2
 800f6a2:	8813      	ldrh	r3, [r2, #0]
 800f6a4:	b2b6      	uxth	r6, r6
 800f6a6:	1c59      	adds	r1, r3, #1
 800f6a8:	8263      	strh	r3, [r4, #18]
 800f6aa:	f105 0904 	add.w	r9, r5, #4
 800f6ae:	f106 0314 	add.w	r3, r6, #20
 800f6b2:	ba5b      	rev16	r3, r3
 800f6b4:	8011      	strh	r1, [r2, #0]
 800f6b6:	f104 001e 	add.w	r0, r4, #30
 800f6ba:	2204      	movs	r2, #4
 800f6bc:	4649      	mov	r1, r9
 800f6be:	8223      	strh	r3, [r4, #16]
 800f6c0:	f7ff ffa6 	bl	800f610 <memcpy.isra.0>
 800f6c4:	2114      	movs	r1, #20
 800f6c6:	f104 000e 	add.w	r0, r4, #14
 800f6ca:	f8a4 a018 	strh.w	sl, [r4, #24]
 800f6ce:	f001 fef4 	bl	80114ba <net_chksum>
 800f6d2:	882b      	ldrh	r3, [r5, #0]
 800f6d4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800f6d8:	8463      	strh	r3, [r4, #34]	; 0x22
 800f6da:	886b      	ldrh	r3, [r5, #2]
 800f6dc:	8320      	strh	r0, [r4, #24]
 800f6de:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 800f6e4:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f884 802e 	strb.w	r8, [r4, #46]	; 0x2e
 800f6ee:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 800f6f2:	7a3b      	ldrb	r3, [r7, #8]
 800f6f4:	8622      	strh	r2, [r4, #48]	; 0x30
 800f6f6:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800f6fa:	079b      	lsls	r3, r3, #30
 800f6fc:	bf48      	it	mi
 800f6fe:	f240 4302 	movwmi	r3, #1026	; 0x402
 800f702:	8baa      	ldrh	r2, [r5, #28]
 800f704:	bf48      	it	mi
 800f706:	86e3      	strhmi	r3, [r4, #54]	; 0x36
 800f708:	86a2      	strh	r2, [r4, #52]	; 0x34
 800f70a:	bf42      	ittt	mi
 800f70c:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 800f710:	4622      	movmi	r2, r4
 800f712:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 800f716:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f718:	f8a4 a032 	strh.w	sl, [r4, #50]	; 0x32
 800f71c:	bf58      	it	pl
 800f71e:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 800f722:	2b00      	cmp	r3, #0
 800f724:	d13e      	bne.n	800f7a4 <_tcp_send_package+0x134>
 800f726:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800f728:	481f      	ldr	r0, [pc, #124]	; (800f7a8 <_tcp_send_package+0x138>)
 800f72a:	ba5b      	rev16	r3, r3
 800f72c:	8463      	strh	r3, [r4, #34]	; 0x22
 800f72e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800f730:	ba5b      	rev16	r3, r3
 800f732:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f734:	f7ff ff76 	bl	800f624 <_bswap32>
 800f738:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800f73a:	a801      	add	r0, sp, #4
 800f73c:	ba5b      	rev16	r3, r3
 800f73e:	8623      	strh	r3, [r4, #48]	; 0x30
 800f740:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f742:	220c      	movs	r2, #12
 800f744:	ba5b      	rev16	r3, r3
 800f746:	491a      	ldr	r1, [pc, #104]	; (800f7b0 <_tcp_send_package+0x140>)
 800f748:	86a3      	strh	r3, [r4, #52]	; 0x34
 800f74a:	f7ff ff61 	bl	800f610 <memcpy.isra.0>
 800f74e:	2204      	movs	r2, #4
 800f750:	4918      	ldr	r1, [pc, #96]	; (800f7b4 <_tcp_send_package+0x144>)
 800f752:	4817      	ldr	r0, [pc, #92]	; (800f7b0 <_tcp_send_package+0x140>)
 800f754:	f7ff ff5c 	bl	800f610 <memcpy.isra.0>
 800f758:	2204      	movs	r2, #4
 800f75a:	4649      	mov	r1, r9
 800f75c:	4816      	ldr	r0, [pc, #88]	; (800f7b8 <_tcp_send_package+0x148>)
 800f75e:	f7ff ff57 	bl	800f610 <memcpy.isra.0>
 800f762:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f766:	f106 010c 	add.w	r1, r6, #12
 800f76a:	83e3      	strh	r3, [r4, #30]
 800f76c:	4810      	ldr	r0, [pc, #64]	; (800f7b0 <_tcp_send_package+0x140>)
 800f76e:	ba73      	rev16	r3, r6
 800f770:	8423      	strh	r3, [r4, #32]
 800f772:	f001 fea2 	bl	80114ba <net_chksum>
 800f776:	a901      	add	r1, sp, #4
 800f778:	4605      	mov	r5, r0
 800f77a:	220c      	movs	r2, #12
 800f77c:	480c      	ldr	r0, [pc, #48]	; (800f7b0 <_tcp_send_package+0x140>)
 800f77e:	f7ff ff47 	bl	800f610 <memcpy.isra.0>
 800f782:	4809      	ldr	r0, [pc, #36]	; (800f7a8 <_tcp_send_package+0x138>)
 800f784:	f106 0122 	add.w	r1, r6, #34	; 0x22
 800f788:	8665      	strh	r5, [r4, #50]	; 0x32
 800f78a:	b004      	add	sp, #16
 800f78c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f790:	f004 bbb2 	b.w	8013ef8 <emac_eth_send>
 800f794:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800f796:	5cc9      	ldrb	r1, [r1, r3]
 800f798:	54d1      	strb	r1, [r2, r3]
 800f79a:	3301      	adds	r3, #1
 800f79c:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800f79e:	4299      	cmp	r1, r3
 800f7a0:	d8f8      	bhi.n	800f794 <_tcp_send_package+0x124>
 800f7a2:	e7c0      	b.n	800f726 <_tcp_send_package+0xb6>
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	e7f9      	b.n	800f79c <_tcp_send_package+0x12c>
 800f7a8:	20002e80 	andcs	r2, r0, r0, lsl #29
 800f7ac:	200022c8 	andcs	r2, r0, r8, asr #5
 800f7b0:	20002e96 	mulcs	r0, r6, lr
 800f7b4:	2000229c 	mulcs	r0, ip, r2
 800f7b8:	20002e9a 	mulcs	r0, sl, lr

0800f7bc <_send_reset>:
 800f7bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f7be:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800f7c2:	4604      	mov	r4, r0
 800f7c4:	075a      	lsls	r2, r3, #29
 800f7c6:	460e      	mov	r6, r1
 800f7c8:	d421      	bmi.n	800f80e <_send_reset+0x52>
 800f7ca:	2204      	movs	r2, #4
 800f7cc:	f013 0310 	ands.w	r3, r3, #16
 800f7d0:	f88d 200c 	strb.w	r2, [sp, #12]
 800f7d4:	d01d      	beq.n	800f812 <_send_reset+0x56>
 800f7d6:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 800f7da:	4668      	mov	r0, sp
 800f7dc:	f7ff ff18 	bl	800f610 <memcpy.isra.0>
 800f7e0:	9b00      	ldr	r3, [sp, #0]
 800f7e2:	9301      	str	r3, [sp, #4]
 800f7e4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800f7e8:	4668      	mov	r0, sp
 800f7ea:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800f7ee:	f104 0126 	add.w	r1, r4, #38	; 0x26
 800f7f2:	07db      	lsls	r3, r3, #31
 800f7f4:	f04f 0204 	mov.w	r2, #4
 800f7f8:	bf48      	it	mi
 800f7fa:	3501      	addmi	r5, #1
 800f7fc:	f7ff ff08 	bl	800f610 <memcpy.isra.0>
 800f800:	9b00      	ldr	r3, [sp, #0]
 800f802:	4630      	mov	r0, r6
 800f804:	441d      	add	r5, r3
 800f806:	a901      	add	r1, sp, #4
 800f808:	9502      	str	r5, [sp, #8]
 800f80a:	f7ff ff31 	bl	800f670 <_tcp_send_package>
 800f80e:	b004      	add	sp, #16
 800f810:	bd70      	pop	{r4, r5, r6, pc}
 800f812:	9301      	str	r3, [sp, #4]
 800f814:	2314      	movs	r3, #20
 800f816:	f88d 300c 	strb.w	r3, [sp, #12]
 800f81a:	e7e3      	b.n	800f7e4 <_send_reset+0x28>

0800f81c <tcp_begin>:
 800f81c:	b508      	push	{r3, lr}
 800f81e:	4b0a      	ldr	r3, [pc, #40]	; (800f848 <tcp_begin+0x2c>)
 800f820:	4601      	mov	r1, r0
 800f822:	881a      	ldrh	r2, [r3, #0]
 800f824:	4282      	cmp	r2, r0
 800f826:	d102      	bne.n	800f82e <tcp_begin+0x12>
 800f828:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f82c:	b130      	cbz	r0, 800f83c <tcp_begin+0x20>
 800f82e:	b12a      	cbz	r2, 800f83c <tcp_begin+0x20>
 800f830:	4806      	ldr	r0, [pc, #24]	; (800f84c <tcp_begin+0x30>)
 800f832:	f002 ffe7 	bl	8012804 <console_error>
 800f836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f83a:	bd08      	pop	{r3, pc}
 800f83c:	4802      	ldr	r0, [pc, #8]	; (800f848 <tcp_begin+0x2c>)
 800f83e:	8019      	strh	r1, [r3, #0]
 800f840:	f7ff fecc 	bl	800f5dc <_init_tcb>
 800f844:	2000      	movs	r0, #0
 800f846:	e7f8      	b.n	800f83a <tcp_begin+0x1e>
 800f848:	20002e3c 	andcs	r2, r0, ip, lsr lr
 800f84c:	08016dbe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, sl, fp, sp, lr}

0800f850 <tcp_write>:
 800f850:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800f854:	429a      	cmp	r2, r3
 800f856:	bf28      	it	cs
 800f858:	461a      	movcs	r2, r3
 800f85a:	2344      	movs	r3, #68	; 0x44
 800f85c:	b530      	push	{r4, r5, lr}
 800f85e:	4c0d      	ldr	r4, [pc, #52]	; (800f894 <tcp_write+0x44>)
 800f860:	b085      	sub	sp, #20
 800f862:	fb03 4400 	mla	r4, r3, r0, r4
 800f866:	6963      	ldr	r3, [r4, #20]
 800f868:	62e1      	str	r1, [r4, #44]	; 0x2c
 800f86a:	9301      	str	r3, [sp, #4]
 800f86c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f86e:	4620      	mov	r0, r4
 800f870:	9302      	str	r3, [sp, #8]
 800f872:	2318      	movs	r3, #24
 800f874:	8622      	strh	r2, [r4, #48]	; 0x30
 800f876:	a901      	add	r1, sp, #4
 800f878:	4615      	mov	r5, r2
 800f87a:	f88d 300c 	strb.w	r3, [sp, #12]
 800f87e:	f7ff fef7 	bl	800f670 <_tcp_send_package>
 800f882:	2300      	movs	r3, #0
 800f884:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f886:	8623      	strh	r3, [r4, #48]	; 0x30
 800f888:	6963      	ldr	r3, [r4, #20]
 800f88a:	442b      	add	r3, r5
 800f88c:	6163      	str	r3, [r4, #20]
 800f88e:	b005      	add	sp, #20
 800f890:	bd30      	pop	{r4, r5, pc}
 800f892:	bf00      	nop
 800f894:	20002e3c 	andcs	r2, r0, ip, lsr lr

0800f898 <tcp_read>:
 800f898:	2344      	movs	r3, #68	; 0x44
 800f89a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f89c:	4c1c      	ldr	r4, [pc, #112]	; (800f910 <tcp_read+0x78>)
 800f89e:	b085      	sub	sp, #20
 800f8a0:	fb03 4400 	mla	r4, r3, r0, r4
 800f8a4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f8a8:	2b07      	cmp	r3, #7
 800f8aa:	d112      	bne.n	800f8d2 <tcp_read+0x3a>
 800f8ac:	6963      	ldr	r3, [r4, #20]
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	9301      	str	r3, [sp, #4]
 800f8b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8b4:	a901      	add	r1, sp, #4
 800f8b6:	9302      	str	r3, [sp, #8]
 800f8b8:	2311      	movs	r3, #17
 800f8ba:	f88d 300c 	strb.w	r3, [sp, #12]
 800f8be:	f7ff fed7 	bl	800f670 <_tcp_send_package>
 800f8c2:	2309      	movs	r3, #9
 800f8c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f8c8:	6963      	ldr	r3, [r4, #20]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	6163      	str	r3, [r4, #20]
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	e01b      	b.n	800f90a <tcp_read+0x72>
 800f8d2:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 800f8d6:	4358      	muls	r0, r3
 800f8d8:	4a0e      	ldr	r2, [pc, #56]	; (800f914 <tcp_read+0x7c>)
 800f8da:	1817      	adds	r7, r2, r0
 800f8dc:	887b      	ldrh	r3, [r7, #2]
 800f8de:	5a15      	ldrh	r5, [r2, r0]
 800f8e0:	429d      	cmp	r5, r3
 800f8e2:	d0f4      	beq.n	800f8ce <tcp_read+0x36>
 800f8e4:	f240 55b6 	movw	r5, #1462	; 0x5b6
 800f8e8:	435d      	muls	r5, r3
 800f8ea:	1d06      	adds	r6, r0, #4
 800f8ec:	442e      	add	r6, r5
 800f8ee:	4416      	add	r6, r2
 800f8f0:	4405      	add	r5, r0
 800f8f2:	600e      	str	r6, [r1, #0]
 800f8f4:	442a      	add	r2, r5
 800f8f6:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 800f8fa:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800f902:	f003 0301 	and.w	r3, r3, #1
 800f906:	8722      	strh	r2, [r4, #56]	; 0x38
 800f908:	807b      	strh	r3, [r7, #2]
 800f90a:	b005      	add	sp, #20
 800f90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f90e:	bf00      	nop
 800f910:	20002e3c 	andcs	r2, r0, ip, lsr lr
 800f914:	200022cc 	andcs	r2, r0, ip, asr #5

0800f918 <memcpy.isra.0>:
 800f918:	3801      	subs	r0, #1
 800f91a:	440a      	add	r2, r1
 800f91c:	4291      	cmp	r1, r2
 800f91e:	d100      	bne.n	800f922 <memcpy.isra.0+0xa>
 800f920:	4770      	bx	lr
 800f922:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f926:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f92a:	e7f7      	b.n	800f91c <memcpy.isra.0+0x4>

0800f92c <net_memcpy>:
 800f92c:	ea40 0301 	orr.w	r3, r0, r1
 800f930:	079b      	lsls	r3, r3, #30
 800f932:	b570      	push	{r4, r5, r6, lr}
 800f934:	d108      	bne.n	800f948 <net_memcpy+0x1c>
 800f936:	f022 0303 	bic.w	r3, r2, #3
 800f93a:	1f04      	subs	r4, r0, #4
 800f93c:	18cd      	adds	r5, r1, r3
 800f93e:	42a9      	cmp	r1, r5
 800f940:	d108      	bne.n	800f954 <net_memcpy+0x28>
 800f942:	1ad2      	subs	r2, r2, r3
 800f944:	4403      	add	r3, r0
 800f946:	e000      	b.n	800f94a <net_memcpy+0x1e>
 800f948:	4603      	mov	r3, r0
 800f94a:	3b01      	subs	r3, #1
 800f94c:	440a      	add	r2, r1
 800f94e:	4291      	cmp	r1, r2
 800f950:	d105      	bne.n	800f95e <net_memcpy+0x32>
 800f952:	bd70      	pop	{r4, r5, r6, pc}
 800f954:	f851 6b04 	ldr.w	r6, [r1], #4
 800f958:	f844 6f04 	str.w	r6, [r4, #4]!
 800f95c:	e7ef      	b.n	800f93e <net_memcpy+0x12>
 800f95e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f962:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f966:	e7f2      	b.n	800f94e <net_memcpy+0x22>

0800f968 <udp_set_ip>:
 800f968:	2204      	movs	r2, #4
 800f96a:	b513      	push	{r0, r1, r4, lr}
 800f96c:	4604      	mov	r4, r0
 800f96e:	6803      	ldr	r3, [r0, #0]
 800f970:	eb0d 0102 	add.w	r1, sp, r2
 800f974:	4808      	ldr	r0, [pc, #32]	; (800f998 <udp_set_ip+0x30>)
 800f976:	9301      	str	r3, [sp, #4]
 800f978:	f7ff ffce 	bl	800f918 <memcpy.isra.0>
 800f97c:	6862      	ldr	r2, [r4, #4]
 800f97e:	4b07      	ldr	r3, [pc, #28]	; (800f99c <udp_set_ip+0x34>)
 800f980:	43d1      	mvns	r1, r2
 800f982:	6019      	str	r1, [r3, #0]
 800f984:	6823      	ldr	r3, [r4, #0]
 800f986:	4013      	ands	r3, r2
 800f988:	4a05      	ldr	r2, [pc, #20]	; (800f9a0 <udp_set_ip+0x38>)
 800f98a:	6013      	str	r3, [r2, #0]
 800f98c:	68a2      	ldr	r2, [r4, #8]
 800f98e:	4b05      	ldr	r3, [pc, #20]	; (800f9a4 <udp_set_ip+0x3c>)
 800f990:	601a      	str	r2, [r3, #0]
 800f992:	b002      	add	sp, #8
 800f994:	bd10      	pop	{r4, pc}
 800f996:	bf00      	nop
 800f998:	20009156 	andcs	r9, r0, r6, asr r1
 800f99c:	2000346c 	andcs	r3, r0, ip, ror #8
 800f9a0:	20003474 	andcs	r3, r0, r4, ror r4
 800f9a4:	20003470 	andcs	r3, r0, r0, ror r4

0800f9a8 <udp_bind>:
 800f9a8:	4a0a      	ldr	r2, [pc, #40]	; (800f9d4 <udp_bind+0x2c>)
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	b510      	push	{r4, lr}
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	4614      	mov	r4, r2
 800f9b2:	f852 1b04 	ldr.w	r1, [r2], #4
 800f9b6:	4299      	cmp	r1, r3
 800f9b8:	d008      	beq.n	800f9cc <udp_bind+0x24>
 800f9ba:	b141      	cbz	r1, 800f9ce <udp_bind+0x26>
 800f9bc:	3001      	adds	r0, #1
 800f9be:	2808      	cmp	r0, #8
 800f9c0:	d1f7      	bne.n	800f9b2 <udp_bind+0xa>
 800f9c2:	4805      	ldr	r0, [pc, #20]	; (800f9d8 <udp_bind+0x30>)
 800f9c4:	f002 ff1e 	bl	8012804 <console_error>
 800f9c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9cc:	bd10      	pop	{r4, pc}
 800f9ce:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800f9d2:	e7fb      	b.n	800f9cc <udp_bind+0x24>
 800f9d4:	2000347c 	andcs	r3, r0, ip, ror r4
 800f9d8:	08016dde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, sl, fp, sp, lr}

0800f9dc <udp_unbind>:
 800f9dc:	4a0c      	ldr	r2, [pc, #48]	; (800fa10 <udp_unbind+0x34>)
 800f9de:	2300      	movs	r3, #0
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	b510      	push	{r4, lr}
 800f9e4:	f852 4b04 	ldr.w	r4, [r2], #4
 800f9e8:	4284      	cmp	r4, r0
 800f9ea:	d108      	bne.n	800f9fe <udp_unbind+0x22>
 800f9ec:	2000      	movs	r0, #0
 800f9ee:	f640 3294 	movw	r2, #2964	; 0xb94
 800f9f2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800f9f6:	4353      	muls	r3, r2
 800f9f8:	4a06      	ldr	r2, [pc, #24]	; (800fa14 <udp_unbind+0x38>)
 800f9fa:	50d0      	str	r0, [r2, r3]
 800f9fc:	bd10      	pop	{r4, pc}
 800f9fe:	3301      	adds	r3, #1
 800fa00:	2b08      	cmp	r3, #8
 800fa02:	d1ef      	bne.n	800f9e4 <udp_unbind+0x8>
 800fa04:	4804      	ldr	r0, [pc, #16]	; (800fa18 <udp_unbind+0x3c>)
 800fa06:	f002 fefd 	bl	8012804 <console_error>
 800fa0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa0e:	e7f5      	b.n	800f9fc <udp_unbind+0x20>
 800fa10:	2000347c 	andcs	r3, r0, ip, ror r4
 800fa14:	2000349c 	mulcs	r0, ip, r4
 800fa18:	08016de3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r8, sl, fp, sp, lr}

0800fa1c <udp_recv>:
 800fa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa20:	4604      	mov	r4, r0
 800fa22:	4698      	mov	r8, r3
 800fa24:	f640 3394 	movw	r3, #2964	; 0xb94
 800fa28:	435c      	muls	r4, r3
 800fa2a:	4608      	mov	r0, r1
 800fa2c:	4915      	ldr	r1, [pc, #84]	; (800fa84 <udp_recv+0x68>)
 800fa2e:	190f      	adds	r7, r1, r4
 800fa30:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800fa34:	5b0b      	ldrh	r3, [r1, r4]
 800fa36:	4563      	cmp	r3, ip
 800fa38:	d021      	beq.n	800fa7e <udp_recv+0x62>
 800fa3a:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800fa3e:	fb03 fc0c 	mul.w	ip, r3, ip
 800fa42:	eb0c 0604 	add.w	r6, ip, r4
 800fa46:	440e      	add	r6, r1
 800fa48:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 800fa4c:	3404      	adds	r4, #4
 800fa4e:	4295      	cmp	r5, r2
 800fa50:	bf28      	it	cs
 800fa52:	4615      	movcs	r5, r2
 800fa54:	4464      	add	r4, ip
 800fa56:	462a      	mov	r2, r5
 800fa58:	4421      	add	r1, r4
 800fa5a:	f7ff ff67 	bl	800f92c <net_memcpy>
 800fa5e:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 800fa62:	f8c8 3000 	str.w	r3, [r8]
 800fa66:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 800fa6a:	9b06      	ldr	r3, [sp, #24]
 800fa6c:	801a      	strh	r2, [r3, #0]
 800fa6e:	887b      	ldrh	r3, [r7, #2]
 800fa70:	3301      	adds	r3, #1
 800fa72:	f003 0301 	and.w	r3, r3, #1
 800fa76:	807b      	strh	r3, [r7, #2]
 800fa78:	4628      	mov	r0, r5
 800fa7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa7e:	2500      	movs	r5, #0
 800fa80:	e7fa      	b.n	800fa78 <udp_recv+0x5c>
 800fa82:	bf00      	nop
 800fa84:	2000349c 	mulcs	r0, ip, r4

0800fa88 <udp_recv2>:
 800fa88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa8a:	f640 3594 	movw	r5, #2964	; 0xb94
 800fa8e:	4368      	muls	r0, r5
 800fa90:	4c0f      	ldr	r4, [pc, #60]	; (800fad0 <udp_recv2+0x48>)
 800fa92:	1827      	adds	r7, r4, r0
 800fa94:	887d      	ldrh	r5, [r7, #2]
 800fa96:	5a26      	ldrh	r6, [r4, r0]
 800fa98:	42ae      	cmp	r6, r5
 800fa9a:	d017      	beq.n	800facc <udp_recv2+0x44>
 800fa9c:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 800faa0:	fb0c f505 	mul.w	r5, ip, r5
 800faa4:	1d06      	adds	r6, r0, #4
 800faa6:	442e      	add	r6, r5
 800faa8:	4405      	add	r5, r0
 800faaa:	4426      	add	r6, r4
 800faac:	442c      	add	r4, r5
 800faae:	600e      	str	r6, [r1, #0]
 800fab0:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 800fab4:	6011      	str	r1, [r2, #0]
 800fab6:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 800faba:	801a      	strh	r2, [r3, #0]
 800fabc:	887b      	ldrh	r3, [r7, #2]
 800fabe:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 800fac2:	3301      	adds	r3, #1
 800fac4:	f003 0301 	and.w	r3, r3, #1
 800fac8:	807b      	strh	r3, [r7, #2]
 800faca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800facc:	2000      	movs	r0, #0
 800face:	e7fc      	b.n	800faca <udp_recv2+0x42>
 800fad0:	2000349c 	mulcs	r0, ip, r4

0800fad4 <udp_send>:
 800fad4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fad8:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800fc0c <udp_send+0x138>
 800fadc:	461c      	mov	r4, r3
 800fade:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 800fae2:	4607      	mov	r7, r0
 800fae4:	4688      	mov	r8, r1
 800fae6:	4616      	mov	r6, r2
 800fae8:	2b00      	cmp	r3, #0
 800faea:	f000 808b 	beq.w	800fc04 <udp_send+0x130>
 800faee:	1c63      	adds	r3, r4, #1
 800faf0:	d141      	bne.n	800fb76 <udp_send+0xa2>
 800faf2:	4a47      	ldr	r2, [pc, #284]	; (800fc10 <udp_send+0x13c>)
 800faf4:	2307      	movs	r3, #7
 800faf6:	4611      	mov	r1, r2
 800faf8:	20ff      	movs	r0, #255	; 0xff
 800fafa:	e001      	b.n	800fb00 <udp_send+0x2c>
 800fafc:	f802 0b01 	strb.w	r0, [r2], #1
 800fb00:	3b01      	subs	r3, #1
 800fb02:	d1fb      	bne.n	800fafc <udp_send+0x28>
 800fb04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb08:	83cb      	strh	r3, [r1, #30]
 800fb0a:	840b      	strh	r3, [r1, #32]
 800fb0c:	2500      	movs	r5, #0
 800fb0e:	f8df a104 	ldr.w	sl, [pc, #260]	; 800fc14 <udp_send+0x140>
 800fb12:	4c3f      	ldr	r4, [pc, #252]	; (800fc10 <udp_send+0x13c>)
 800fb14:	f8ba 3000 	ldrh.w	r3, [sl]
 800fb18:	2114      	movs	r1, #20
 800fb1a:	8263      	strh	r3, [r4, #18]
 800fb1c:	f106 031c 	add.w	r3, r6, #28
 800fb20:	ba5b      	rev16	r3, r3
 800fb22:	f104 000e 	add.w	r0, r4, #14
 800fb26:	8223      	strh	r3, [r4, #16]
 800fb28:	8325      	strh	r5, [r4, #24]
 800fb2a:	f001 fcc6 	bl	80114ba <net_chksum>
 800fb2e:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 800fb32:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800fb36:	ba5b      	rev16	r3, r3
 800fb38:	8463      	strh	r3, [r4, #34]	; 0x22
 800fb3a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800fb3e:	4632      	mov	r2, r6
 800fb40:	ba5b      	rev16	r3, r3
 800fb42:	84a3      	strh	r3, [r4, #36]	; 0x24
 800fb44:	f106 0308 	add.w	r3, r6, #8
 800fb48:	ba5b      	rev16	r3, r3
 800fb4a:	bf28      	it	cs
 800fb4c:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 800fb50:	4641      	mov	r1, r8
 800fb52:	8320      	strh	r0, [r4, #24]
 800fb54:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800fb58:	84e3      	strh	r3, [r4, #38]	; 0x26
 800fb5a:	f7ff fee7 	bl	800f92c <net_memcpy>
 800fb5e:	4620      	mov	r0, r4
 800fb60:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 800fb64:	f004 f9c8 	bl	8013ef8 <emac_eth_send>
 800fb68:	f8ba 3000 	ldrh.w	r3, [sl]
 800fb6c:	4628      	mov	r0, r5
 800fb6e:	3301      	adds	r3, #1
 800fb70:	f8aa 3000 	strh.w	r3, [sl]
 800fb74:	e037      	b.n	800fbe6 <udp_send+0x112>
 800fb76:	4b28      	ldr	r3, [pc, #160]	; (800fc18 <udp_send+0x144>)
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	43a3      	bics	r3, r4
 800fb7c:	d10f      	bne.n	800fb9e <udp_send+0xca>
 800fb7e:	2307      	movs	r3, #7
 800fb80:	21ff      	movs	r1, #255	; 0xff
 800fb82:	4a23      	ldr	r2, [pc, #140]	; (800fc10 <udp_send+0x13c>)
 800fb84:	e001      	b.n	800fb8a <udp_send+0xb6>
 800fb86:	f802 1b01 	strb.w	r1, [r2], #1
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	d1fb      	bne.n	800fb86 <udp_send+0xb2>
 800fb8e:	2204      	movs	r2, #4
 800fb90:	4822      	ldr	r0, [pc, #136]	; (800fc1c <udp_send+0x148>)
 800fb92:	eb0d 0102 	add.w	r1, sp, r2
 800fb96:	9401      	str	r4, [sp, #4]
 800fb98:	f7ff febe 	bl	800f918 <memcpy.isra.0>
 800fb9c:	e7b6      	b.n	800fb0c <udp_send+0x38>
 800fb9e:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 800fba2:	2be0      	cmp	r3, #224	; 0xe0
 800fba4:	d10e      	bne.n	800fbc4 <udp_send+0xf0>
 800fba6:	491e      	ldr	r1, [pc, #120]	; (800fc20 <udp_send+0x14c>)
 800fba8:	f3c4 2306 	ubfx	r3, r4, #8, #7
 800fbac:	70cb      	strb	r3, [r1, #3]
 800fbae:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800fbb2:	710b      	strb	r3, [r1, #4]
 800fbb4:	f3c4 6307 	ubfx	r3, r4, #24, #8
 800fbb8:	2206      	movs	r2, #6
 800fbba:	4815      	ldr	r0, [pc, #84]	; (800fc10 <udp_send+0x13c>)
 800fbbc:	714b      	strb	r3, [r1, #5]
 800fbbe:	f7ff feab 	bl	800f918 <memcpy.isra.0>
 800fbc2:	e7e4      	b.n	800fb8e <udp_send+0xba>
 800fbc4:	4b17      	ldr	r3, [pc, #92]	; (800fc24 <udp_send+0x150>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	43a3      	bics	r3, r4
 800fbca:	d00f      	beq.n	800fbec <udp_send+0x118>
 800fbcc:	4d16      	ldr	r5, [pc, #88]	; (800fc28 <udp_send+0x154>)
 800fbce:	4910      	ldr	r1, [pc, #64]	; (800fc10 <udp_send+0x13c>)
 800fbd0:	6828      	ldr	r0, [r5, #0]
 800fbd2:	f001 f93d 	bl	8010e50 <arp_cache_lookup>
 800fbd6:	682b      	ldr	r3, [r5, #0]
 800fbd8:	4298      	cmp	r0, r3
 800fbda:	d0d8      	beq.n	800fb8e <udp_send+0xba>
 800fbdc:	4813      	ldr	r0, [pc, #76]	; (800fc2c <udp_send+0x158>)
 800fbde:	f002 fe11 	bl	8012804 <console_error>
 800fbe2:	f06f 0002 	mvn.w	r0, #2
 800fbe6:	b002      	add	sp, #8
 800fbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbec:	4620      	mov	r0, r4
 800fbee:	4908      	ldr	r1, [pc, #32]	; (800fc10 <udp_send+0x13c>)
 800fbf0:	f001 f92e 	bl	8010e50 <arp_cache_lookup>
 800fbf4:	42a0      	cmp	r0, r4
 800fbf6:	d0ca      	beq.n	800fb8e <udp_send+0xba>
 800fbf8:	480d      	ldr	r0, [pc, #52]	; (800fc30 <udp_send+0x15c>)
 800fbfa:	f002 fe03 	bl	8012804 <console_error>
 800fbfe:	f06f 0001 	mvn.w	r0, #1
 800fc02:	e7f0      	b.n	800fbe6 <udp_send+0x112>
 800fc04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc08:	e7ed      	b.n	800fbe6 <udp_send+0x112>
 800fc0a:	bf00      	nop
 800fc0c:	2000347c 	andcs	r3, r0, ip, ror r4
 800fc10:	2000913c 	andcs	r9, r0, ip, lsr r1
 800fc14:	20003478 	andcs	r3, r0, r8, ror r4
 800fc18:	2000346c 	andcs	r3, r0, ip, ror #8
 800fc1c:	2000915a 	andcs	r9, r0, sl, asr r1
 800fc20:	20000010 	andcs	r0, r0, r0, lsl r0
 800fc24:	20003474 	andcs	r3, r0, r4, ror r4
 800fc28:	20003470 	andcs	r3, r0, r0, ror r4
 800fc2c:	08016deb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, sl, fp, sp, lr}
 800fc30:	08016e11 	stmdaeq	r1, {r0, r4, r9, sl, fp, sp, lr}

0800fc34 <strlen>:
 800fc34:	4603      	mov	r3, r0
 800fc36:	461a      	mov	r2, r3
 800fc38:	7811      	ldrb	r1, [r2, #0]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	2900      	cmp	r1, #0
 800fc3e:	d1fa      	bne.n	800fc36 <strlen+0x2>
 800fc40:	1a10      	subs	r0, r2, r0
 800fc42:	4770      	bx	lr

0800fc44 <strcmp>:
 800fc44:	1e43      	subs	r3, r0, #1
 800fc46:	3901      	subs	r1, #1
 800fc48:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800fc4c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fc50:	4290      	cmp	r0, r2
 800fc52:	d001      	beq.n	800fc58 <strcmp+0x14>
 800fc54:	1a80      	subs	r0, r0, r2
 800fc56:	e001      	b.n	800fc5c <strcmp+0x18>
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	d1f5      	bne.n	800fc48 <strcmp+0x4>
 800fc5c:	4770      	bx	lr

0800fc5e <strcpy.isra.0>:
 800fc5e:	3801      	subs	r0, #1
 800fc60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc64:	f800 3f01 	strb.w	r3, [r0, #1]!
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d1f9      	bne.n	800fc60 <strcpy.isra.0+0x2>
 800fc6c:	4770      	bx	lr

0800fc6e <strcat.isra.0>:
 800fc6e:	b538      	push	{r3, r4, r5, lr}
 800fc70:	4604      	mov	r4, r0
 800fc72:	460d      	mov	r5, r1
 800fc74:	f7ff ffde 	bl	800fc34 <strlen>
 800fc78:	4629      	mov	r1, r5
 800fc7a:	4420      	add	r0, r4
 800fc7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc80:	f7ff bfed 	b.w	800fc5e <strcpy.isra.0>

0800fc84 <MDNS::MDNS()>:
 800fc84:	b513      	push	{r0, r1, r4, lr}
 800fc86:	4604      	mov	r4, r0
 800fc88:	a901      	add	r1, sp, #4
 800fc8a:	4804      	ldr	r0, [pc, #16]	; (800fc9c <MDNS::MDNS()+0x18>)
 800fc8c:	f002 ff32 	bl	8012af4 <inet_aton>
 800fc90:	4620      	mov	r0, r4
 800fc92:	4b03      	ldr	r3, [pc, #12]	; (800fca0 <MDNS::MDNS()+0x1c>)
 800fc94:	9a01      	ldr	r2, [sp, #4]
 800fc96:	601a      	str	r2, [r3, #0]
 800fc98:	b002      	add	sp, #8
 800fc9a:	bd10      	pop	{r4, pc}
 800fc9c:	08016e42 	stmdaeq	r1, {r1, r6, r9, sl, fp, sp, lr}
 800fca0:	20009730 	andcs	r9, r0, r0, lsr r7

0800fca4 <MDNS::SetName(char const*)>:
 800fca4:	b538      	push	{r3, r4, r5, lr}
 800fca6:	4d0b      	ldr	r5, [pc, #44]	; (800fcd4 <MDNS::SetName(char const*)+0x30>)
 800fca8:	460c      	mov	r4, r1
 800fcaa:	6828      	ldr	r0, [r5, #0]
 800fcac:	b108      	cbz	r0, 800fcb2 <MDNS::SetName(char const*)+0xe>
 800fcae:	f002 ff1b 	bl	8012ae8 <operator delete[](void*)>
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	f7ff ffbe 	bl	800fc34 <strlen>
 800fcb8:	3007      	adds	r0, #7
 800fcba:	f002 ff19 	bl	8012af0 <operator new[](unsigned int)>
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	6028      	str	r0, [r5, #0]
 800fcc2:	f7ff ffcc 	bl	800fc5e <strcpy.isra.0>
 800fcc6:	6828      	ldr	r0, [r5, #0]
 800fcc8:	4903      	ldr	r1, [pc, #12]	; (800fcd8 <MDNS::SetName(char const*)+0x34>)
 800fcca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcce:	f7ff bfce 	b.w	800fc6e <strcat.isra.0>
 800fcd2:	bf00      	nop
 800fcd4:	20009b60 	andcs	r9, r0, r0, ror #22
 800fcd8:	08016e52 	stmdaeq	r1, {r1, r4, r6, r9, sl, fp, sp, lr}

0800fcdc <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 800fcdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fce0:	f04f 0e00 	mov.w	lr, #0
 800fce4:	f04f 0c2e 	mov.w	ip, #46	; 0x2e
 800fce8:	4675      	mov	r5, lr
 800fcea:	4e1b      	ldr	r6, [pc, #108]	; (800fd58 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7c>)
 800fcec:	4f1b      	ldr	r7, [pc, #108]	; (800fd5c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x80>)
 800fcee:	780b      	ldrb	r3, [r1, #0]
 800fcf0:	1c68      	adds	r0, r5, #1
 800fcf2:	b913      	cbnz	r3, 800fcfa <MDNS::DecodeDNSNameNotation(char const*, char*)+0x1e>
 800fcf4:	7013      	strb	r3, [r2, #0]
 800fcf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcfa:	2b3f      	cmp	r3, #63	; 0x3f
 800fcfc:	d91c      	bls.n	800fd38 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5c>
 800fcfe:	7849      	ldrb	r1, [r1, #1]
 800fd00:	ea06 2303 	and.w	r3, r6, r3, lsl #8
 800fd04:	430b      	orrs	r3, r1
 800fd06:	6839      	ldr	r1, [r7, #0]
 800fd08:	f1be 0f00 	cmp.w	lr, #0
 800fd0c:	bf08      	it	eq
 800fd0e:	4605      	moveq	r5, r0
 800fd10:	5ccc      	ldrb	r4, [r1, r3]
 800fd12:	3301      	adds	r3, #1
 800fd14:	4419      	add	r1, r3
 800fd16:	2300      	movs	r3, #0
 800fd18:	42a3      	cmp	r3, r4
 800fd1a:	5cc8      	ldrb	r0, [r1, r3]
 800fd1c:	d309      	bcc.n	800fd32 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x56>
 800fd1e:	f04f 0e01 	mov.w	lr, #1
 800fd22:	4421      	add	r1, r4
 800fd24:	4414      	add	r4, r2
 800fd26:	780b      	ldrb	r3, [r1, #0]
 800fd28:	b10b      	cbz	r3, 800fd2e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x52>
 800fd2a:	f804 cb01 	strb.w	ip, [r4], #1
 800fd2e:	4622      	mov	r2, r4
 800fd30:	e7dd      	b.n	800fcee <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 800fd32:	54d0      	strb	r0, [r2, r3]
 800fd34:	3301      	adds	r3, #1
 800fd36:	e7ef      	b.n	800fd18 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x3c>
 800fd38:	4688      	mov	r8, r1
 800fd3a:	18d4      	adds	r4, r2, r3
 800fd3c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 800fd40:	f802 9b01 	strb.w	r9, [r2], #1
 800fd44:	4294      	cmp	r4, r2
 800fd46:	d1f9      	bne.n	800fd3c <MDNS::DecodeDNSNameNotation(char const*, char*)+0x60>
 800fd48:	1c5a      	adds	r2, r3, #1
 800fd4a:	4411      	add	r1, r2
 800fd4c:	f1be 0f00 	cmp.w	lr, #0
 800fd50:	d1e9      	bne.n	800fd26 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 800fd52:	181d      	adds	r5, r3, r0
 800fd54:	e7e7      	b.n	800fd26 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4a>
 800fd56:	bf00      	nop
 800fd58:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 800fd5c:	20009b64 	andcs	r9, r0, r4, ror #22

0800fd60 <MDNS::FindFirstDotFromRight(char const*) const>:
 800fd60:	b510      	push	{r4, lr}
 800fd62:	4608      	mov	r0, r1
 800fd64:	460c      	mov	r4, r1
 800fd66:	f7ff ff65 	bl	800fc34 <strlen>
 800fd6a:	4420      	add	r0, r4
 800fd6c:	42a0      	cmp	r0, r4
 800fd6e:	d903      	bls.n	800fd78 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 800fd70:	f810 3901 	ldrb.w	r3, [r0], #-1
 800fd74:	2b2e      	cmp	r3, #46	; 0x2e
 800fd76:	d1f9      	bne.n	800fd6c <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 800fd78:	3001      	adds	r0, #1
 800fd7a:	bd10      	pop	{r4, pc}

0800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>:
 800fd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd7e:	4614      	mov	r4, r2
 800fd80:	460f      	mov	r7, r1
 800fd82:	1c60      	adds	r0, r4, #1
 800fd84:	463d      	mov	r5, r7
 800fd86:	f817 6b01 	ldrb.w	r6, [r7], #1
 800fd8a:	b946      	cbnz	r6, 800fd9e <MDNS::WriteDnsName(char const*, char*, bool)+0x22>
 800fd8c:	1a69      	subs	r1, r5, r1
 800fd8e:	7021      	strb	r1, [r4, #0]
 800fd90:	7829      	ldrb	r1, [r5, #0]
 800fd92:	b949      	cbnz	r1, 800fda8 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 800fd94:	b10b      	cbz	r3, 800fd9a <MDNS::WriteDnsName(char const*, char*, bool)+0x1e>
 800fd96:	f800 1b01 	strb.w	r1, [r0], #1
 800fd9a:	1a80      	subs	r0, r0, r2
 800fd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd9e:	2e2e      	cmp	r6, #46	; 0x2e
 800fda0:	d0f4      	beq.n	800fd8c <MDNS::WriteDnsName(char const*, char*, bool)+0x10>
 800fda2:	f800 6b01 	strb.w	r6, [r0], #1
 800fda6:	e7ed      	b.n	800fd84 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 800fda8:	4604      	mov	r4, r0
 800fdaa:	1c69      	adds	r1, r5, #1
 800fdac:	e7e8      	b.n	800fd80 <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

0800fdb0 <MDNS::CreateAnswerLocalIpAddress()>:
 800fdb0:	2384      	movs	r3, #132	; 0x84
 800fdb2:	b510      	push	{r4, lr}
 800fdb4:	4c0f      	ldr	r4, [pc, #60]	; (800fdf4 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 800fdb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fdba:	80e3      	strh	r3, [r4, #6]
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	490e      	ldr	r1, [pc, #56]	; (800fdf8 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 800fdc0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800fdc4:	6809      	ldr	r1, [r1, #0]
 800fdc6:	f104 0210 	add.w	r2, r4, #16
 800fdca:	2301      	movs	r3, #1
 800fdcc:	f7ff ffd6 	bl	800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>
 800fdd0:	490a      	ldr	r1, [pc, #40]	; (800fdfc <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 800fdd2:	1813      	adds	r3, r2, r0
 800fdd4:	5011      	str	r1, [r2, r0]
 800fdd6:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 800fdda:	605a      	str	r2, [r3, #4]
 800fddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fde0:	811a      	strh	r2, [r3, #8]
 800fde2:	4a07      	ldr	r2, [pc, #28]	; (800fe00 <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 800fde4:	6812      	ldr	r2, [r2, #0]
 800fde6:	6952      	ldr	r2, [r2, #20]
 800fde8:	f8c3 200a 	str.w	r2, [r3, #10]
 800fdec:	1b1b      	subs	r3, r3, r4
 800fdee:	330a      	adds	r3, #10
 800fdf0:	6023      	str	r3, [r4, #0]
 800fdf2:	bd10      	pop	{r4, pc}
 800fdf4:	20009734 	andcs	r9, r0, r4, lsr r7
 800fdf8:	20009b60 	andcs	r9, r0, r0, ror #22
 800fdfc:	01800100 	orreq	r0, r0, r0, lsl #2
 800fe00:	20009b68 	andcs	r9, r0, r8, ror #22

0800fe04 <MDNS::Start()>:
 800fe04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe06:	4c1d      	ldr	r4, [pc, #116]	; (800fe7c <MDNS::Start()+0x78>)
 800fe08:	f241 41e9 	movw	r1, #5353	; 0x14e9
 800fe0c:	4605      	mov	r5, r0
 800fe0e:	6820      	ldr	r0, [r4, #0]
 800fe10:	f000 fb28 	bl	8010464 <Network::Begin(unsigned short)>
 800fe14:	4e1a      	ldr	r6, [pc, #104]	; (800fe80 <MDNS::Start()+0x7c>)
 800fe16:	4f1b      	ldr	r7, [pc, #108]	; (800fe84 <MDNS::Start()+0x80>)
 800fe18:	4601      	mov	r1, r0
 800fe1a:	6030      	str	r0, [r6, #0]
 800fe1c:	683a      	ldr	r2, [r7, #0]
 800fe1e:	6820      	ldr	r0, [r4, #0]
 800fe20:	f000 fb31 	bl	8010486 <Network::JoinGroup(int, unsigned int)>
 800fe24:	4b18      	ldr	r3, [pc, #96]	; (800fe88 <MDNS::Start()+0x84>)
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	b923      	cbnz	r3, 800fe34 <MDNS::Start()+0x30>
 800fe2a:	6821      	ldr	r1, [r4, #0]
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	3120      	adds	r1, #32
 800fe30:	f7ff ff38 	bl	800fca4 <MDNS::SetName(char const*)>
 800fe34:	4628      	mov	r0, r5
 800fe36:	f7ff ffbb 	bl	800fdb0 <MDNS::CreateAnswerLocalIpAddress()>
 800fe3a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 800fe3e:	4913      	ldr	r1, [pc, #76]	; (800fe8c <MDNS::Start()+0x88>)
 800fe40:	7830      	ldrb	r0, [r6, #0]
 800fe42:	f831 2b04 	ldrh.w	r2, [r1], #4
 800fe46:	9300      	str	r3, [sp, #0]
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	f7ff fe43 	bl	800fad4 <udp_send>
 800fe4e:	233f      	movs	r3, #63	; 0x3f
 800fe50:	6820      	ldr	r0, [r4, #0]
 800fe52:	4c0f      	ldr	r4, [pc, #60]	; (800fe90 <MDNS::Start()+0x8c>)
 800fe54:	f100 0260 	add.w	r2, r0, #96	; 0x60
 800fe58:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800fe5c:	b929      	cbnz	r1, 800fe6a <MDNS::Start()+0x66>
 800fe5e:	4413      	add	r3, r2
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d006      	beq.n	800fe72 <MDNS::Start()+0x6e>
 800fe64:	f802 1b01 	strb.w	r1, [r2], #1
 800fe68:	e7fa      	b.n	800fe60 <MDNS::Start()+0x5c>
 800fe6a:	3b01      	subs	r3, #1
 800fe6c:	f802 1b01 	strb.w	r1, [r2], #1
 800fe70:	d1f2      	bne.n	800fe58 <MDNS::Start()+0x54>
 800fe72:	2300      	movs	r3, #0
 800fe74:	f880 309f 	strb.w	r3, [r0, #159]	; 0x9f
 800fe78:	b003      	add	sp, #12
 800fe7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe7c:	20009b68 	andcs	r9, r0, r8, ror #22
 800fe80:	20000018 	andcs	r0, r0, r8, lsl r0
 800fe84:	20009730 	andcs	r9, r0, r0, lsr r7
 800fe88:	20009b60 	andcs	r9, r0, r0, ror #22
 800fe8c:	20009734 	andcs	r9, r0, r4, lsr r7
 800fe90:	08016e52 	stmdaeq	r1, {r1, r4, r6, r9, sl, fp, sp, lr}

0800fe94 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 800fe94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe98:	4c1b      	ldr	r4, [pc, #108]	; (800ff08 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 800fe9a:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 800fe9e:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 800fea2:	2300      	movs	r3, #0
 800fea4:	f854 100c 	ldr.w	r1, [r4, ip]
 800fea8:	4607      	mov	r7, r0
 800feaa:	f7ff ff67 	bl	800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>
 800feae:	2301      	movs	r3, #1
 800feb0:	7bac      	ldrb	r4, [r5, #14]
 800feb2:	4616      	mov	r6, r2
 800feb4:	4915      	ldr	r1, [pc, #84]	; (800ff0c <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 800feb6:	4402      	add	r2, r0
 800feb8:	4815      	ldr	r0, [pc, #84]	; (800ff10 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 800feba:	429c      	cmp	r4, r3
 800febc:	bf18      	it	ne
 800febe:	4601      	movne	r1, r0
 800fec0:	4638      	mov	r0, r7
 800fec2:	f7ff ff5b 	bl	800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>
 800fec6:	4b13      	ldr	r3, [pc, #76]	; (800ff14 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 800fec8:	1814      	adds	r4, r2, r0
 800feca:	5013      	str	r3, [r2, r0]
 800fecc:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800fed0:	6063      	str	r3, [r4, #4]
 800fed2:	4b11      	ldr	r3, [pc, #68]	; (800ff18 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 800fed4:	f8d3 8000 	ldr.w	r8, [r3]
 800fed8:	4640      	mov	r0, r8
 800feda:	f7ff feab 	bl	800fc34 <strlen>
 800fede:	f100 0308 	add.w	r3, r0, #8
 800fee2:	ba5b      	rev16	r3, r3
 800fee4:	8123      	strh	r3, [r4, #8]
 800fee6:	2300      	movs	r3, #0
 800fee8:	f8c4 300a 	str.w	r3, [r4, #10]
 800feec:	89ab      	ldrh	r3, [r5, #12]
 800feee:	f104 0210 	add.w	r2, r4, #16
 800fef2:	ba5b      	rev16	r3, r3
 800fef4:	81e3      	strh	r3, [r4, #14]
 800fef6:	4641      	mov	r1, r8
 800fef8:	2301      	movs	r3, #1
 800fefa:	4638      	mov	r0, r7
 800fefc:	f7ff ff3e 	bl	800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>
 800ff00:	4410      	add	r0, r2
 800ff02:	1b80      	subs	r0, r0, r6
 800ff04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff08:	20009938 	andcs	r9, r0, r8, lsr r9
 800ff0c:	08016e4e 	stmdaeq	r1, {r1, r2, r3, r6, r9, sl, fp, sp, lr}
 800ff10:	08016e6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, sl, fp, sp, lr}
 800ff14:	01802100 	orreq	r2, r0, r0, lsl #2
 800ff18:	20009b60 	andcs	r9, r0, r0, ror #22

0800ff1c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 800ff1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff20:	4e19      	ldr	r6, [pc, #100]	; (800ff88 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 800ff22:	010f      	lsls	r7, r1, #4
 800ff24:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 800ff28:	2300      	movs	r3, #0
 800ff2a:	59f1      	ldr	r1, [r6, r7]
 800ff2c:	4604      	mov	r4, r0
 800ff2e:	f7ff ff25 	bl	800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>
 800ff32:	2301      	movs	r3, #1
 800ff34:	7bae      	ldrb	r6, [r5, #14]
 800ff36:	4690      	mov	r8, r2
 800ff38:	4914      	ldr	r1, [pc, #80]	; (800ff8c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 800ff3a:	4402      	add	r2, r0
 800ff3c:	4814      	ldr	r0, [pc, #80]	; (800ff90 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 800ff3e:	429e      	cmp	r6, r3
 800ff40:	bf18      	it	ne
 800ff42:	4601      	movne	r1, r0
 800ff44:	4620      	mov	r0, r4
 800ff46:	f7ff ff19 	bl	800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>
 800ff4a:	4b12      	ldr	r3, [pc, #72]	; (800ff94 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 800ff4c:	1816      	adds	r6, r2, r0
 800ff4e:	5013      	str	r3, [r2, r0]
 800ff50:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800ff54:	68a8      	ldr	r0, [r5, #8]
 800ff56:	6073      	str	r3, [r6, #4]
 800ff58:	f106 040b 	add.w	r4, r6, #11
 800ff5c:	b938      	cbnz	r0, 800ff6e <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 800ff5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff62:	72b0      	strb	r0, [r6, #10]
 800ff64:	8133      	strh	r3, [r6, #8]
 800ff66:	eba4 0008 	sub.w	r0, r4, r8
 800ff6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff6e:	f7ff fe61 	bl	800fc34 <strlen>
 800ff72:	4607      	mov	r7, r0
 800ff74:	1c43      	adds	r3, r0, #1
 800ff76:	72b0      	strb	r0, [r6, #10]
 800ff78:	ba5b      	rev16	r3, r3
 800ff7a:	4620      	mov	r0, r4
 800ff7c:	68a9      	ldr	r1, [r5, #8]
 800ff7e:	8133      	strh	r3, [r6, #8]
 800ff80:	f7ff fe6d 	bl	800fc5e <strcpy.isra.0>
 800ff84:	443c      	add	r4, r7
 800ff86:	e7ee      	b.n	800ff66 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 800ff88:	20009938 	andcs	r9, r0, r8, lsr r9
 800ff8c:	08016e4e 	stmdaeq	r1, {r1, r2, r3, r6, r9, sl, fp, sp, lr}
 800ff90:	08016e6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, sl, fp, sp, lr}
 800ff94:	01801000 	orreq	r1, r0, r0

0800ff98 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 800ff98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff9c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8010000 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 800ffa0:	ea4f 1901 	mov.w	r9, r1, lsl #4
 800ffa4:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 800ffa8:	6869      	ldr	r1, [r5, #4]
 800ffaa:	2301      	movs	r3, #1
 800ffac:	4607      	mov	r7, r0
 800ffae:	f7ff fee5 	bl	800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>
 800ffb2:	4b14      	ldr	r3, [pc, #80]	; (8010004 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 800ffb4:	f858 8009 	ldr.w	r8, [r8, r9]
 800ffb8:	5013      	str	r3, [r2, r0]
 800ffba:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800ffbe:	1816      	adds	r6, r2, r0
 800ffc0:	6073      	str	r3, [r6, #4]
 800ffc2:	4640      	mov	r0, r8
 800ffc4:	4614      	mov	r4, r2
 800ffc6:	f7ff fe35 	bl	800fc34 <strlen>
 800ffca:	f100 030d 	add.w	r3, r0, #13
 800ffce:	ba5b      	rev16	r3, r3
 800ffd0:	4641      	mov	r1, r8
 800ffd2:	8133      	strh	r3, [r6, #8]
 800ffd4:	f106 020a 	add.w	r2, r6, #10
 800ffd8:	2300      	movs	r3, #0
 800ffda:	4638      	mov	r0, r7
 800ffdc:	f7ff fece 	bl	800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	4402      	add	r2, r0
 800ffe4:	7bad      	ldrb	r5, [r5, #14]
 800ffe6:	4808      	ldr	r0, [pc, #32]	; (8010008 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 800ffe8:	4908      	ldr	r1, [pc, #32]	; (801000c <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 800ffea:	429d      	cmp	r5, r3
 800ffec:	bf18      	it	ne
 800ffee:	4601      	movne	r1, r0
 800fff0:	4638      	mov	r0, r7
 800fff2:	f7ff fec3 	bl	800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>
 800fff6:	4410      	add	r0, r2
 800fff8:	1b00      	subs	r0, r0, r4
 800fffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fffe:	bf00      	nop
 8010000:	20009938 	andcs	r9, r0, r8, lsr r9
 8010004:	01000c00 	tsteq	r0, r0, lsl #24
 8010008:	08016e6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, sl, fp, sp, lr}
 801000c:	08016e4e 	stmdaeq	r1, {r1, r2, r3, r6, r9, sl, fp, sp, lr}

08010010 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 8010010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010012:	460f      	mov	r7, r1
 8010014:	2301      	movs	r3, #1
 8010016:	490f      	ldr	r1, [pc, #60]	; (8010054 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 8010018:	4606      	mov	r6, r0
 801001a:	f7ff feaf 	bl	800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>
 801001e:	4b0e      	ldr	r3, [pc, #56]	; (8010058 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8010020:	490e      	ldr	r1, [pc, #56]	; (801005c <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 8010022:	5013      	str	r3, [r2, r0]
 8010024:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010028:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 801002c:	684f      	ldr	r7, [r1, #4]
 801002e:	1815      	adds	r5, r2, r0
 8010030:	606b      	str	r3, [r5, #4]
 8010032:	4638      	mov	r0, r7
 8010034:	4614      	mov	r4, r2
 8010036:	f7ff fdfd 	bl	800fc34 <strlen>
 801003a:	1c83      	adds	r3, r0, #2
 801003c:	ba5b      	rev16	r3, r3
 801003e:	812b      	strh	r3, [r5, #8]
 8010040:	f105 020a 	add.w	r2, r5, #10
 8010044:	2301      	movs	r3, #1
 8010046:	4639      	mov	r1, r7
 8010048:	4630      	mov	r0, r6
 801004a:	f7ff fe97 	bl	800fd7c <MDNS::WriteDnsName(char const*, char*, bool)>
 801004e:	4410      	add	r0, r2
 8010050:	1b00      	subs	r0, r0, r4
 8010052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010054:	08016e59 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, fp, sp, lr}
 8010058:	01000c00 	tsteq	r0, r0, lsl #24
 801005c:	20009938 	andcs	r9, r0, r8, lsr r9

08010060 <MDNS::CreateMDNSMessage(unsigned int)>:
 8010060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010062:	2384      	movs	r3, #132	; 0x84
 8010064:	4d19      	ldr	r5, [pc, #100]	; (80100cc <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 8010066:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801006a:	80eb      	strh	r3, [r5, #6]
 801006c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010070:	f105 0410 	add.w	r4, r5, #16
 8010074:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8010078:	4622      	mov	r2, r4
 801007a:	4606      	mov	r6, r0
 801007c:	460f      	mov	r7, r1
 801007e:	f7ff ff09 	bl	800fe94 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 8010082:	4404      	add	r4, r0
 8010084:	4622      	mov	r2, r4
 8010086:	4639      	mov	r1, r7
 8010088:	4630      	mov	r0, r6
 801008a:	f7ff ff47 	bl	800ff1c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 801008e:	4404      	add	r4, r0
 8010090:	4622      	mov	r2, r4
 8010092:	4639      	mov	r1, r7
 8010094:	4630      	mov	r0, r6
 8010096:	f7ff ffbb 	bl	8010010 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 801009a:	4404      	add	r4, r0
 801009c:	4622      	mov	r2, r4
 801009e:	4639      	mov	r1, r7
 80100a0:	4630      	mov	r0, r6
 80100a2:	f7ff ff79 	bl	800ff98 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 80100a6:	4a0a      	ldr	r2, [pc, #40]	; (80100d0 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 80100a8:	4404      	add	r4, r0
 80100aa:	f852 3b10 	ldr.w	r3, [r2], #16
 80100ae:	1e60      	subs	r0, r4, #1
 80100b0:	3b0c      	subs	r3, #12
 80100b2:	4619      	mov	r1, r3
 80100b4:	3901      	subs	r1, #1
 80100b6:	d204      	bcs.n	80100c2 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 80100b8:	441c      	add	r4, r3
 80100ba:	4b06      	ldr	r3, [pc, #24]	; (80100d4 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 80100bc:	1ae4      	subs	r4, r4, r3
 80100be:	602c      	str	r4, [r5, #0]
 80100c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100c2:	f812 6b01 	ldrb.w	r6, [r2], #1
 80100c6:	f800 6f01 	strb.w	r6, [r0, #1]!
 80100ca:	e7f3      	b.n	80100b4 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 80100cc:	2000995c 	andcs	r9, r0, ip, asr r9
 80100d0:	20009734 	andcs	r9, r0, r4, lsr r7
 80100d4:	20009960 	andcs	r9, r0, r0, ror #18

080100d8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 80100d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100dc:	4d40      	ldr	r5, [pc, #256]	; (80101e0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 80100de:	b085      	sub	sp, #20
 80100e0:	682c      	ldr	r4, [r5, #0]
 80100e2:	4680      	mov	r8, r0
 80100e4:	460f      	mov	r7, r1
 80100e6:	4616      	mov	r6, r2
 80100e8:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80100ec:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80100f0:	b11c      	cbz	r4, 80100fa <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 80100f2:	692a      	ldr	r2, [r5, #16]
 80100f4:	2a00      	cmp	r2, #0
 80100f6:	d16e      	bne.n	80101d6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 80100f8:	2401      	movs	r4, #1
 80100fa:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 80100fe:	ea4f 1904 	mov.w	r9, r4, lsl #4
 8010102:	8193      	strh	r3, [r2, #12]
 8010104:	f882 b00e 	strb.w	fp, [r2, #14]
 8010108:	2f00      	cmp	r7, #0
 801010a:	d154      	bne.n	80101b6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xde>
 801010c:	4b35      	ldr	r3, [pc, #212]	; (80101e4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 801010e:	6818      	ldr	r0, [r3, #0]
 8010110:	3020      	adds	r0, #32
 8010112:	f7ff fd8f 	bl	800fc34 <strlen>
 8010116:	4607      	mov	r7, r0
 8010118:	4630      	mov	r0, r6
 801011a:	f7ff fd8b 	bl	800fc34 <strlen>
 801011e:	4438      	add	r0, r7
 8010120:	3001      	adds	r0, #1
 8010122:	f002 fce5 	bl	8012af0 <operator new[](unsigned int)>
 8010126:	4b2f      	ldr	r3, [pc, #188]	; (80101e4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 8010128:	f845 0009 	str.w	r0, [r5, r9]
 801012c:	6819      	ldr	r1, [r3, #0]
 801012e:	3120      	adds	r1, #32
 8010130:	f7ff fd95 	bl	800fc5e <strcpy.isra.0>
 8010134:	f855 0009 	ldr.w	r0, [r5, r9]
 8010138:	4631      	mov	r1, r6
 801013a:	f7ff fd98 	bl	800fc6e <strcat.isra.0>
 801013e:	4631      	mov	r1, r6
 8010140:	4640      	mov	r0, r8
 8010142:	f7ff fe0d 	bl	800fd60 <MDNS::FindFirstDotFromRight(char const*) const>
 8010146:	eb05 0709 	add.w	r7, r5, r9
 801014a:	4605      	mov	r5, r0
 801014c:	f7ff fd72 	bl	800fc34 <strlen>
 8010150:	300d      	adds	r0, #13
 8010152:	f002 fccd 	bl	8012af0 <operator new[](unsigned int)>
 8010156:	4629      	mov	r1, r5
 8010158:	6078      	str	r0, [r7, #4]
 801015a:	f7ff fd80 	bl	800fc5e <strcpy.isra.0>
 801015e:	4922      	ldr	r1, [pc, #136]	; (80101e8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f7ff fd84 	bl	800fc6e <strcat.isra.0>
 8010166:	4921      	ldr	r1, [pc, #132]	; (80101ec <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 8010168:	4b21      	ldr	r3, [pc, #132]	; (80101f0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f1bb 0f01 	cmp.w	fp, #1
 8010170:	bf18      	it	ne
 8010172:	4619      	movne	r1, r3
 8010174:	f7ff fd7b 	bl	800fc6e <strcat.isra.0>
 8010178:	f1ba 0f00 	cmp.w	sl, #0
 801017c:	d009      	beq.n	8010192 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xba>
 801017e:	4650      	mov	r0, sl
 8010180:	f7ff fd58 	bl	800fc34 <strlen>
 8010184:	3001      	adds	r0, #1
 8010186:	f002 fcb3 	bl	8012af0 <operator new[](unsigned int)>
 801018a:	4651      	mov	r1, sl
 801018c:	60b8      	str	r0, [r7, #8]
 801018e:	f7ff fd66 	bl	800fc5e <strcpy.isra.0>
 8010192:	4621      	mov	r1, r4
 8010194:	4640      	mov	r0, r8
 8010196:	f7ff ff63 	bl	8010060 <MDNS::CreateMDNSMessage(unsigned int)>
 801019a:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801019e:	4915      	ldr	r1, [pc, #84]	; (80101f4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 80101a0:	4815      	ldr	r0, [pc, #84]	; (80101f8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 80101a2:	f831 2b04 	ldrh.w	r2, [r1], #4
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	4b14      	ldr	r3, [pc, #80]	; (80101fc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x124>)
 80101aa:	7800      	ldrb	r0, [r0, #0]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f7ff fc91 	bl	800fad4 <udp_send>
 80101b2:	2001      	movs	r0, #1
 80101b4:	e010      	b.n	80101d8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x100>
 80101b6:	4638      	mov	r0, r7
 80101b8:	f7ff fd3c 	bl	800fc34 <strlen>
 80101bc:	9003      	str	r0, [sp, #12]
 80101be:	4630      	mov	r0, r6
 80101c0:	f7ff fd38 	bl	800fc34 <strlen>
 80101c4:	9b03      	ldr	r3, [sp, #12]
 80101c6:	4418      	add	r0, r3
 80101c8:	3001      	adds	r0, #1
 80101ca:	f002 fc91 	bl	8012af0 <operator new[](unsigned int)>
 80101ce:	4639      	mov	r1, r7
 80101d0:	f845 0009 	str.w	r0, [r5, r9]
 80101d4:	e7ac      	b.n	8010130 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x58>
 80101d6:	2000      	movs	r0, #0
 80101d8:	b005      	add	sp, #20
 80101da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101de:	bf00      	nop
 80101e0:	20009938 	andcs	r9, r0, r8, lsr r9
 80101e4:	20009b68 	andcs	r9, r0, r8, ror #22
 80101e8:	080157f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, ip, lr}
 80101ec:	08016e4e 	stmdaeq	r1, {r1, r2, r3, r6, r9, sl, fp, sp, lr}
 80101f0:	08016e6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, sl, fp, sp, lr}
 80101f4:	2000995c 	andcs	r9, r0, ip, asr r9
 80101f8:	20000018 	andcs	r0, r0, r8, lsl r0
 80101fc:	20009730 	andcs	r9, r0, r0, lsr r7

08010200 <MDNS::HandleRequest(unsigned short)>:
 8010200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	4605      	mov	r5, r0
 8010206:	2700      	movs	r7, #0
 8010208:	f04f 080c 	mov.w	r8, #12
 801020c:	b0c5      	sub	sp, #276	; 0x114
 801020e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80102d0 <MDNS::HandleRequest(unsigned short)+0xd0>
 8010212:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 80102d4 <MDNS::HandleRequest(unsigned short)+0xd4>
 8010216:	9103      	str	r1, [sp, #12]
 8010218:	9b03      	ldr	r3, [sp, #12]
 801021a:	42bb      	cmp	r3, r7
 801021c:	d802      	bhi.n	8010224 <MDNS::HandleRequest(unsigned short)+0x24>
 801021e:	b045      	add	sp, #276	; 0x114
 8010220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010224:	f8da 1000 	ldr.w	r1, [sl]
 8010228:	aa04      	add	r2, sp, #16
 801022a:	4441      	add	r1, r8
 801022c:	4628      	mov	r0, r5
 801022e:	f7ff fd55 	bl	800fcdc <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8010232:	f8da 2000 	ldr.w	r2, [sl]
 8010236:	4440      	add	r0, r8
 8010238:	1813      	adds	r3, r2, r0
 801023a:	885b      	ldrh	r3, [r3, #2]
 801023c:	f100 0804 	add.w	r8, r0, #4
 8010240:	ba5b      	rev16	r3, r3
 8010242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010246:	2b01      	cmp	r3, #1
 8010248:	d13d      	bne.n	80102c6 <MDNS::HandleRequest(unsigned short)+0xc6>
 801024a:	5a14      	ldrh	r4, [r2, r0]
 801024c:	4b22      	ldr	r3, [pc, #136]	; (80102d8 <MDNS::HandleRequest(unsigned short)+0xd8>)
 801024e:	ba64      	rev16	r4, r4
 8010250:	6818      	ldr	r0, [r3, #0]
 8010252:	a904      	add	r1, sp, #16
 8010254:	b2a4      	uxth	r4, r4
 8010256:	f7ff fcf5 	bl	800fc44 <strcmp>
 801025a:	b968      	cbnz	r0, 8010278 <MDNS::HandleRequest(unsigned short)+0x78>
 801025c:	2c01      	cmp	r4, #1
 801025e:	d10b      	bne.n	8010278 <MDNS::HandleRequest(unsigned short)+0x78>
 8010260:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010264:	491d      	ldr	r1, [pc, #116]	; (80102dc <MDNS::HandleRequest(unsigned short)+0xdc>)
 8010266:	481e      	ldr	r0, [pc, #120]	; (80102e0 <MDNS::HandleRequest(unsigned short)+0xe0>)
 8010268:	f831 2b04 	ldrh.w	r2, [r1], #4
 801026c:	9300      	str	r3, [sp, #0]
 801026e:	4b1d      	ldr	r3, [pc, #116]	; (80102e4 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8010270:	7800      	ldrb	r0, [r0, #0]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f7ff fc2e 	bl	800fad4 <udp_send>
 8010278:	481b      	ldr	r0, [pc, #108]	; (80102e8 <MDNS::HandleRequest(unsigned short)+0xe8>)
 801027a:	a904      	add	r1, sp, #16
 801027c:	f7ff fce2 	bl	800fc44 <strcmp>
 8010280:	f04f 0900 	mov.w	r9, #0
 8010284:	4e19      	ldr	r6, [pc, #100]	; (80102ec <MDNS::HandleRequest(unsigned short)+0xec>)
 8010286:	9002      	str	r0, [sp, #8]
 8010288:	6833      	ldr	r3, [r6, #0]
 801028a:	b1c3      	cbz	r3, 80102be <MDNS::HandleRequest(unsigned short)+0xbe>
 801028c:	9b02      	ldr	r3, [sp, #8]
 801028e:	b123      	cbz	r3, 801029a <MDNS::HandleRequest(unsigned short)+0x9a>
 8010290:	6870      	ldr	r0, [r6, #4]
 8010292:	a904      	add	r1, sp, #16
 8010294:	f7ff fcd6 	bl	800fc44 <strcmp>
 8010298:	b988      	cbnz	r0, 80102be <MDNS::HandleRequest(unsigned short)+0xbe>
 801029a:	2c0c      	cmp	r4, #12
 801029c:	d10f      	bne.n	80102be <MDNS::HandleRequest(unsigned short)+0xbe>
 801029e:	4649      	mov	r1, r9
 80102a0:	4628      	mov	r0, r5
 80102a2:	f7ff fedd 	bl	8010060 <MDNS::CreateMDNSMessage(unsigned int)>
 80102a6:	f241 43e9 	movw	r3, #5353	; 0x14e9
 80102aa:	480d      	ldr	r0, [pc, #52]	; (80102e0 <MDNS::HandleRequest(unsigned short)+0xe0>)
 80102ac:	9300      	str	r3, [sp, #0]
 80102ae:	4b0d      	ldr	r3, [pc, #52]	; (80102e4 <MDNS::HandleRequest(unsigned short)+0xe4>)
 80102b0:	f8bb 2000 	ldrh.w	r2, [fp]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	490e      	ldr	r1, [pc, #56]	; (80102f0 <MDNS::HandleRequest(unsigned short)+0xf0>)
 80102b8:	7800      	ldrb	r0, [r0, #0]
 80102ba:	f7ff fc0b 	bl	800fad4 <udp_send>
 80102be:	3610      	adds	r6, #16
 80102c0:	f1b9 0f00 	cmp.w	r9, #0
 80102c4:	d001      	beq.n	80102ca <MDNS::HandleRequest(unsigned short)+0xca>
 80102c6:	3701      	adds	r7, #1
 80102c8:	e7a6      	b.n	8010218 <MDNS::HandleRequest(unsigned short)+0x18>
 80102ca:	f04f 0901 	mov.w	r9, #1
 80102ce:	e7db      	b.n	8010288 <MDNS::HandleRequest(unsigned short)+0x88>
 80102d0:	20009b64 	andcs	r9, r0, r4, ror #22
 80102d4:	2000995c 	andcs	r9, r0, ip, asr r9
 80102d8:	20009b60 	andcs	r9, r0, r0, ror #22
 80102dc:	20009734 	andcs	r9, r0, r4, lsr r7
 80102e0:	20000018 	andcs	r0, r0, r8, lsl r0
 80102e4:	20009730 	andcs	r9, r0, r0, lsr r7
 80102e8:	08016e59 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, fp, sp, lr}
 80102ec:	20009938 	andcs	r9, r0, r8, lsr r9
 80102f0:	20009960 	andcs	r9, r0, r0, ror #18

080102f4 <MDNS::Parse()>:
 80102f4:	4b08      	ldr	r3, [pc, #32]	; (8010318 <MDNS::Parse()+0x24>)
 80102f6:	681a      	ldr	r2, [r3, #0]
 80102f8:	8853      	ldrh	r3, [r2, #2]
 80102fa:	ba5b      	rev16	r3, r3
 80102fc:	b299      	uxth	r1, r3
 80102fe:	041b      	lsls	r3, r3, #16
 8010300:	d408      	bmi.n	8010314 <MDNS::Parse()+0x20>
 8010302:	0b89      	lsrs	r1, r1, #14
 8010304:	d106      	bne.n	8010314 <MDNS::Parse()+0x20>
 8010306:	8891      	ldrh	r1, [r2, #4]
 8010308:	b28b      	uxth	r3, r1
 801030a:	b11b      	cbz	r3, 8010314 <MDNS::Parse()+0x20>
 801030c:	ba49      	rev16	r1, r1
 801030e:	b289      	uxth	r1, r1
 8010310:	f7ff bf76 	b.w	8010200 <MDNS::HandleRequest(unsigned short)>
 8010314:	4770      	bx	lr
 8010316:	bf00      	nop
 8010318:	20009b64 	andcs	r9, r0, r4, ror #22

0801031c <MDNS::Run()>:
 801031c:	b538      	push	{r3, r4, r5, lr}
 801031e:	4d0c      	ldr	r5, [pc, #48]	; (8010350 <MDNS::Run()+0x34>)
 8010320:	4604      	mov	r4, r0
 8010322:	480c      	ldr	r0, [pc, #48]	; (8010354 <MDNS::Run()+0x38>)
 8010324:	462b      	mov	r3, r5
 8010326:	4a0c      	ldr	r2, [pc, #48]	; (8010358 <MDNS::Run()+0x3c>)
 8010328:	490c      	ldr	r1, [pc, #48]	; (801035c <MDNS::Run()+0x40>)
 801032a:	7800      	ldrb	r0, [r0, #0]
 801032c:	f7ff fbac 	bl	800fa88 <udp_recv2>
 8010330:	4b0b      	ldr	r3, [pc, #44]	; (8010360 <MDNS::Run()+0x44>)
 8010332:	882a      	ldrh	r2, [r5, #0]
 8010334:	8018      	strh	r0, [r3, #0]
 8010336:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801033a:	429a      	cmp	r2, r3
 801033c:	d106      	bne.n	801034c <MDNS::Run()+0x30>
 801033e:	280c      	cmp	r0, #12
 8010340:	d904      	bls.n	801034c <MDNS::Run()+0x30>
 8010342:	4620      	mov	r0, r4
 8010344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010348:	f7ff bfd4 	b.w	80102f4 <MDNS::Parse()>
 801034c:	bd38      	pop	{r3, r4, r5, pc}
 801034e:	bf00      	nop
 8010350:	2000972c 	andcs	r9, r0, ip, lsr #14
 8010354:	20000018 	andcs	r0, r0, r8, lsl r0
 8010358:	20009728 	andcs	r9, r0, r8, lsr #14
 801035c:	20009b64 	andcs	r9, r0, r4, ror #22
 8010360:	20009958 	andcs	r9, r0, r8, asr r9

08010364 <MDNS::Print()>:
 8010364:	b510      	push	{r4, lr}
 8010366:	4816      	ldr	r0, [pc, #88]	; (80103c0 <MDNS::Print()+0x5c>)
 8010368:	f002 feb0 	bl	80130cc <printf>
 801036c:	4b15      	ldr	r3, [pc, #84]	; (80103c4 <MDNS::Print()+0x60>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	3301      	adds	r3, #1
 8010372:	d104      	bne.n	801037e <MDNS::Print()+0x1a>
 8010374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010378:	4813      	ldr	r0, [pc, #76]	; (80103c8 <MDNS::Print()+0x64>)
 801037a:	f002 bea7 	b.w	80130cc <printf>
 801037e:	4b13      	ldr	r3, [pc, #76]	; (80103cc <MDNS::Print()+0x68>)
 8010380:	4c13      	ldr	r4, [pc, #76]	; (80103d0 <MDNS::Print()+0x6c>)
 8010382:	6819      	ldr	r1, [r3, #0]
 8010384:	4813      	ldr	r0, [pc, #76]	; (80103d4 <MDNS::Print()+0x70>)
 8010386:	f002 fea1 	bl	80130cc <printf>
 801038a:	6823      	ldr	r3, [r4, #0]
 801038c:	b14b      	cbz	r3, 80103a2 <MDNS::Print()+0x3e>
 801038e:	4a12      	ldr	r2, [pc, #72]	; (80103d8 <MDNS::Print()+0x74>)
 8010390:	68a3      	ldr	r3, [r4, #8]
 8010392:	6861      	ldr	r1, [r4, #4]
 8010394:	2b00      	cmp	r3, #0
 8010396:	bf08      	it	eq
 8010398:	4613      	moveq	r3, r2
 801039a:	4810      	ldr	r0, [pc, #64]	; (80103dc <MDNS::Print()+0x78>)
 801039c:	89a2      	ldrh	r2, [r4, #12]
 801039e:	f002 fe95 	bl	80130cc <printf>
 80103a2:	6923      	ldr	r3, [r4, #16]
 80103a4:	b15b      	cbz	r3, 80103be <MDNS::Print()+0x5a>
 80103a6:	69a3      	ldr	r3, [r4, #24]
 80103a8:	4a0b      	ldr	r2, [pc, #44]	; (80103d8 <MDNS::Print()+0x74>)
 80103aa:	6961      	ldr	r1, [r4, #20]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	bf08      	it	eq
 80103b0:	4613      	moveq	r3, r2
 80103b2:	480a      	ldr	r0, [pc, #40]	; (80103dc <MDNS::Print()+0x78>)
 80103b4:	8ba2      	ldrh	r2, [r4, #28]
 80103b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103ba:	f002 be87 	b.w	80130cc <printf>
 80103be:	bd10      	pop	{r4, pc}
 80103c0:	08016e76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, sl, fp, sp, lr}
 80103c4:	20000018 	andcs	r0, r0, r8, lsl r0
 80103c8:	08016e7c 	stmdaeq	r1, {r2, r3, r4, r5, r6, r9, sl, fp, sp, lr}
 80103cc:	20009b60 	andcs	r9, r0, r0, ror #22
 80103d0:	20009938 	andcs	r9, r0, r8, lsr r9
 80103d4:	08016e8a 	stmdaeq	r1, {r1, r3, r7, r9, sl, fp, sp, lr}
 80103d8:	08015b3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, r9, fp, ip, lr}
 80103dc:	08016e96 	stmdaeq	r1, {r1, r2, r4, r7, r9, sl, fp, sp, lr}

080103e0 <strncpy.constprop.0.isra.0>:
 80103e0:	233f      	movs	r3, #63	; 0x3f
 80103e2:	3901      	subs	r1, #1
 80103e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80103e8:	b92a      	cbnz	r2, 80103f6 <strncpy.constprop.0.isra.0+0x16>
 80103ea:	4403      	add	r3, r0
 80103ec:	4298      	cmp	r0, r3
 80103ee:	d006      	beq.n	80103fe <strncpy.constprop.0.isra.0+0x1e>
 80103f0:	f800 2b01 	strb.w	r2, [r0], #1
 80103f4:	e7fa      	b.n	80103ec <strncpy.constprop.0.isra.0+0xc>
 80103f6:	3b01      	subs	r3, #1
 80103f8:	f800 2b01 	strb.w	r2, [r0], #1
 80103fc:	d1f2      	bne.n	80103e4 <strncpy.constprop.0.isra.0+0x4>
 80103fe:	4770      	bx	lr

08010400 <Network::Network()>:
 8010400:	4a12      	ldr	r2, [pc, #72]	; (801044c <Network::Network()+0x4c>)
 8010402:	2300      	movs	r3, #0
 8010404:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010408:	6010      	str	r0, [r2, #0]
 801040a:	2201      	movs	r2, #1
 801040c:	e9c0 2100 	strd	r2, r1, [r0]
 8010410:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010414:	2200      	movs	r2, #0
 8010416:	e9c0 3330 	strd	r3, r3, [r0, #192]	; 0xc0
 801041a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801041e:	490c      	ldr	r1, [pc, #48]	; (8010450 <Network::Network()+0x50>)
 8010420:	6102      	str	r2, [r0, #16]
 8010422:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 8010426:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
 801042a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801042e:	61c3      	str	r3, [r0, #28]
 8010430:	f880 3020 	strb.w	r3, [r0, #32]
 8010434:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8010438:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
 801043c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010440:	f802 3f01 	strb.w	r3, [r2, #1]!
 8010444:	2b00      	cmp	r3, #0
 8010446:	d1f9      	bne.n	801043c <Network::Network()+0x3c>
 8010448:	4770      	bx	lr
 801044a:	bf00      	nop
 801044c:	20009b68 	andcs	r9, r0, r8, ror #22
 8010450:	08016ea1 	stmdaeq	r1, {r0, r5, r7, r9, sl, fp, sp, lr}

08010454 <Network::Shutdown()>:
 8010454:	b508      	push	{r3, lr}
 8010456:	30bc      	adds	r0, #188	; 0xbc
 8010458:	f001 fcbe 	bl	8011dd8 <NetworkDisplay::ShowShutdown()>
 801045c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010460:	f7f6 bec6 	b.w	80071f0 <net_shutdown>

08010464 <Network::Begin(unsigned short)>:
 8010464:	4608      	mov	r0, r1
 8010466:	f7ff ba9f 	b.w	800f9a8 <udp_bind>

0801046a <Network::End(unsigned short)>:
 801046a:	4608      	mov	r0, r1
 801046c:	f7ff bab6 	b.w	800f9dc <udp_unbind>

08010470 <Network::MacAddressCopyTo(unsigned char*)>:
 8010470:	f100 039f 	add.w	r3, r0, #159	; 0x9f
 8010474:	3901      	subs	r1, #1
 8010476:	30a5      	adds	r0, #165	; 0xa5
 8010478:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801047c:	4283      	cmp	r3, r0
 801047e:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010482:	d1f9      	bne.n	8010478 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8010484:	4770      	bx	lr

08010486 <Network::JoinGroup(int, unsigned int)>:
 8010486:	4610      	mov	r0, r2
 8010488:	f000 bf9e 	b.w	80113c8 <igmp_join>

0801048c <Network::LeaveGroup(int, unsigned int)>:
 801048c:	4610      	mov	r0, r2
 801048e:	f000 bfc7 	b.w	8011420 <igmp_leave>

08010492 <Network::SetDefaultIp()>:
 8010492:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 8010496:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
 801049a:	041b      	lsls	r3, r3, #16
 801049c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80104a0:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
 80104a4:	3302      	adds	r3, #2
 80104a6:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80104aa:	22ff      	movs	r2, #255	; 0xff
 80104ac:	6143      	str	r3, [r0, #20]
 80104ae:	e9c0 3206 	strd	r3, r2, [r0, #24]
 80104b2:	4770      	bx	lr

080104b4 <Network::Init(NetworkParamsStore*)>:
 80104b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b8:	b0a5      	sub	sp, #148	; 0x94
 80104ba:	4604      	mov	r4, r0
 80104bc:	a80b      	add	r0, sp, #44	; 0x2c
 80104be:	f000 fa71 	bl	80109a4 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 80104c2:	a80b      	add	r0, sp, #44	; 0x2c
 80104c4:	f000 fa7a 	bl	80109bc <NetworkParams::Load()>
 80104c8:	b110      	cbz	r0, 80104d0 <Network::Init(NetworkParamsStore*)+0x1c>
 80104ca:	a80b      	add	r0, sp, #44	; 0x2c
 80104cc:	f000 fc4d 	bl	8010d6a <NetworkParams::Dump()>
 80104d0:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 80104d4:	4628      	mov	r0, r5
 80104d6:	f001 fc67 	bl	8011da8 <NetworkDisplay::ShowEmacStart()>
 80104da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80104dc:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 80104e0:	9308      	str	r3, [sp, #32]
 80104e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104e4:	4630      	mov	r0, r6
 80104e6:	9309      	str	r3, [sp, #36]	; 0x24
 80104e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104ea:	f104 0720 	add.w	r7, r4, #32
 80104ee:	930a      	str	r3, [sp, #40]	; 0x28
 80104f0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80104f4:	7163      	strb	r3, [r4, #5]
 80104f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104f8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 80104fc:	bf18      	it	ne
 80104fe:	f8dd 2085 	ldrne.w	r2, [sp, #133]	; 0x85
 8010502:	061b      	lsls	r3, r3, #24
 8010504:	bf54      	ite	pl
 8010506:	2300      	movpl	r3, #0
 8010508:	f8dd 3089 	ldrmi.w	r3, [sp, #137]	; 0x89
 801050c:	60e2      	str	r2, [r4, #12]
 801050e:	6123      	str	r3, [r4, #16]
 8010510:	f003 ffa0 	bl	8014454 <emac_start(unsigned char*)>
 8010514:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8010518:	2b00      	cmp	r3, #0
 801051a:	f040 80c7 	bne.w	80106ac <Network::Init(NetworkParamsStore*)+0x1f8>
 801051e:	4984      	ldr	r1, [pc, #528]	; (8010730 <Network::Init(NetworkParamsStore*)+0x27c>)
 8010520:	f104 001f 	add.w	r0, r4, #31
 8010524:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010528:	f103 0c01 	add.w	ip, r3, #1
 801052c:	2a00      	cmp	r2, #0
 801052e:	f040 80b9 	bne.w	80106a4 <Network::Init(NetworkParamsStore*)+0x1f0>
 8010532:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
 8010536:	18e1      	adds	r1, r4, r3
 8010538:	0910      	lsrs	r0, r2, #4
 801053a:	2a9f      	cmp	r2, #159	; 0x9f
 801053c:	f002 020f 	and.w	r2, r2, #15
 8010540:	bf94      	ite	ls
 8010542:	3030      	addls	r0, #48	; 0x30
 8010544:	3037      	addhi	r0, #55	; 0x37
 8010546:	2a09      	cmp	r2, #9
 8010548:	bf94      	ite	ls
 801054a:	3230      	addls	r2, #48	; 0x30
 801054c:	3237      	addhi	r2, #55	; 0x37
 801054e:	44a4      	add	ip, r4
 8010550:	f881 0020 	strb.w	r0, [r1, #32]
 8010554:	f88c 2020 	strb.w	r2, [ip, #32]
 8010558:	f894 20a4 	ldrb.w	r2, [r4, #164]	; 0xa4
 801055c:	f103 0802 	add.w	r8, r3, #2
 8010560:	0910      	lsrs	r0, r2, #4
 8010562:	2a9f      	cmp	r2, #159	; 0x9f
 8010564:	f002 020f 	and.w	r2, r2, #15
 8010568:	bf94      	ite	ls
 801056a:	3030      	addls	r0, #48	; 0x30
 801056c:	3037      	addhi	r0, #55	; 0x37
 801056e:	f103 0e03 	add.w	lr, r3, #3
 8010572:	2a09      	cmp	r2, #9
 8010574:	eb04 0c08 	add.w	ip, r4, r8
 8010578:	f88c 0020 	strb.w	r0, [ip, #32]
 801057c:	bf94      	ite	ls
 801057e:	3230      	addls	r2, #48	; 0x30
 8010580:	3237      	addhi	r2, #55	; 0x37
 8010582:	eb04 000e 	add.w	r0, r4, lr
 8010586:	f880 2020 	strb.w	r2, [r0, #32]
 801058a:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
 801058e:	f103 0c04 	add.w	ip, r3, #4
 8010592:	0910      	lsrs	r0, r2, #4
 8010594:	2a9f      	cmp	r2, #159	; 0x9f
 8010596:	f002 020f 	and.w	r2, r2, #15
 801059a:	bf94      	ite	ls
 801059c:	3030      	addls	r0, #48	; 0x30
 801059e:	3037      	addhi	r0, #55	; 0x37
 80105a0:	3305      	adds	r3, #5
 80105a2:	2a09      	cmp	r2, #9
 80105a4:	4423      	add	r3, r4
 80105a6:	44a4      	add	ip, r4
 80105a8:	bf94      	ite	ls
 80105aa:	3230      	addls	r2, #48	; 0x30
 80105ac:	3237      	addhi	r2, #55	; 0x37
 80105ae:	f88c 0020 	strb.w	r0, [ip, #32]
 80105b2:	f883 2020 	strb.w	r2, [r3, #32]
 80105b6:	2300      	movs	r3, #0
 80105b8:	f881 3026 	strb.w	r3, [r1, #38]	; 0x26
 80105bc:	f003 fff2 	bl	80145a4 <net::link_register_read()>
 80105c0:	7963      	ldrb	r3, [r4, #5]
 80105c2:	6020      	str	r0, [r4, #0]
 80105c4:	2800      	cmp	r0, #0
 80105c6:	f040 809c 	bne.w	8010702 <Network::Init(NetworkParamsStore*)+0x24e>
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	f040 80aa 	bne.w	8010724 <Network::Init(NetworkParamsStore*)+0x270>
 80105d0:	9b08      	ldr	r3, [sp, #32]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d173      	bne.n	80106be <Network::Init(NetworkParamsStore*)+0x20a>
 80105d6:	4620      	mov	r0, r4
 80105d8:	f7ff ff5b 	bl	8010492 <Network::SetDefaultIp()>
 80105dc:	6963      	ldr	r3, [r4, #20]
 80105de:	69e2      	ldr	r2, [r4, #28]
 80105e0:	9308      	str	r3, [sp, #32]
 80105e2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
 80105e6:	1de3      	adds	r3, r4, #7
 80105e8:	f104 0905 	add.w	r9, r4, #5
 80105ec:	9302      	str	r3, [sp, #8]
 80105ee:	9300      	str	r3, [sp, #0]
 80105f0:	463a      	mov	r2, r7
 80105f2:	464b      	mov	r3, r9
 80105f4:	4630      	mov	r0, r6
 80105f6:	a908      	add	r1, sp, #32
 80105f8:	f7f6 fdaa 	bl	8007150 <net_init>
 80105fc:	79e3      	ldrb	r3, [r4, #7]
 80105fe:	b11b      	cbz	r3, 8010608 <Network::Init(NetworkParamsStore*)+0x154>
 8010600:	2104      	movs	r1, #4
 8010602:	4628      	mov	r0, r5
 8010604:	f001 fbee 	bl	8011de4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010608:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801060c:	f89d a08d 	ldrb.w	sl, [sp, #141]	; 0x8d
 8010610:	9304      	str	r3, [sp, #16]
 8010612:	233c      	movs	r3, #60	; 0x3c
 8010614:	fb03 f30a 	mul.w	r3, r3, sl
 8010618:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8010734 <Network::Init(NetworkParamsStore*)+0x280>
 801061c:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010738 <Network::Init(NetworkParamsStore*)+0x284>
 8010620:	9303      	str	r3, [sp, #12]
 8010622:	79e3      	ldrb	r3, [r4, #7]
 8010624:	b393      	cbz	r3, 801068c <Network::Init(NetworkParamsStore*)+0x1d8>
 8010626:	f1ba 0f00 	cmp.w	sl, #0
 801062a:	d02f      	beq.n	801068c <Network::Init(NetworkParamsStore*)+0x1d8>
 801062c:	9b04      	ldr	r3, [sp, #16]
 801062e:	b36b      	cbz	r3, 801068c <Network::Init(NetworkParamsStore*)+0x1d8>
 8010630:	2104      	movs	r1, #4
 8010632:	f8d8 0000 	ldr.w	r0, [r8]
 8010636:	f002 f977 	bl	8012928 <LedBlink::SetMode(ledblink::Mode)>
 801063a:	2103      	movs	r1, #3
 801063c:	4628      	mov	r0, r5
 801063e:	f001 fbd1 	bl	8011de4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010642:	2000      	movs	r0, #0
 8010644:	f002 fe78 	bl	8013338 <time>
 8010648:	9005      	str	r0, [sp, #20]
 801064a:	2000      	movs	r0, #0
 801064c:	f002 fe74 	bl	8013338 <time>
 8010650:	9b05      	ldr	r3, [sp, #20]
 8010652:	493a      	ldr	r1, [pc, #232]	; (801073c <Network::Init(NetworkParamsStore*)+0x288>)
 8010654:	1ac0      	subs	r0, r0, r3
 8010656:	9b03      	ldr	r3, [sp, #12]
 8010658:	4298      	cmp	r0, r3
 801065a:	db38      	blt.n	80106ce <Network::Init(NetworkParamsStore*)+0x21a>
 801065c:	2101      	movs	r1, #1
 801065e:	4628      	mov	r0, r5
 8010660:	f001 fbc0 	bl	8011de4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010664:	2101      	movs	r1, #1
 8010666:	f8d8 0000 	ldr.w	r0, [r8]
 801066a:	f002 f95d 	bl	8012928 <LedBlink::SetMode(ledblink::Mode)>
 801066e:	2301      	movs	r3, #1
 8010670:	7163      	strb	r3, [r4, #5]
 8010672:	2300      	movs	r3, #0
 8010674:	71e3      	strb	r3, [r4, #7]
 8010676:	9b02      	ldr	r3, [sp, #8]
 8010678:	463a      	mov	r2, r7
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	4630      	mov	r0, r6
 801067e:	464b      	mov	r3, r9
 8010680:	a908      	add	r1, sp, #32
 8010682:	f7f6 fd65 	bl	8007150 <net_init>
 8010686:	7963      	ldrb	r3, [r4, #5]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d0ca      	beq.n	8010622 <Network::Init(NetworkParamsStore*)+0x16e>
 801068c:	9b08      	ldr	r3, [sp, #32]
 801068e:	4628      	mov	r0, r5
 8010690:	6163      	str	r3, [r4, #20]
 8010692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010694:	61e3      	str	r3, [r4, #28]
 8010696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010698:	61a3      	str	r3, [r4, #24]
 801069a:	f001 fb8b 	bl	8011db4 <NetworkDisplay::ShowIp()>
 801069e:	b025      	add	sp, #148	; 0x94
 80106a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a4:	4663      	mov	r3, ip
 80106a6:	f800 2f01 	strb.w	r2, [r0, #1]!
 80106aa:	e73b      	b.n	8010524 <Network::Init(NetworkParamsStore*)+0x70>
 80106ac:	4638      	mov	r0, r7
 80106ae:	f10d 0145 	add.w	r1, sp, #69	; 0x45
 80106b2:	f7ff fe95 	bl	80103e0 <strncpy.constprop.0.isra.0>
 80106b6:	2300      	movs	r3, #0
 80106b8:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
 80106bc:	e77e      	b.n	80105bc <Network::Init(NetworkParamsStore*)+0x108>
 80106be:	69e1      	ldr	r1, [r4, #28]
 80106c0:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 80106c4:	4053      	eors	r3, r2
 80106c6:	420b      	tst	r3, r1
 80106c8:	bf18      	it	ne
 80106ca:	920a      	strne	r2, [sp, #40]	; 0x28
 80106cc:	e78b      	b.n	80105e6 <Network::Init(NetworkParamsStore*)+0x132>
 80106ce:	f8d8 3000 	ldr.w	r3, [r8]
 80106d2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80106d6:	f1bc 0f00 	cmp.w	ip, #0
 80106da:	d0b6      	beq.n	801064a <Network::Init(NetworkParamsStore*)+0x196>
 80106dc:	6808      	ldr	r0, [r1, #0]
 80106de:	695a      	ldr	r2, [r3, #20]
 80106e0:	1a80      	subs	r0, r0, r2
 80106e2:	4584      	cmp	ip, r0
 80106e4:	d8b1      	bhi.n	801064a <Network::Init(NetworkParamsStore*)+0x196>
 80106e6:	6808      	ldr	r0, [r1, #0]
 80106e8:	6158      	str	r0, [r3, #20]
 80106ea:	6918      	ldr	r0, [r3, #16]
 80106ec:	2801      	cmp	r0, #1
 80106ee:	f080 0201 	eor.w	r2, r0, #1
 80106f2:	611a      	str	r2, [r3, #16]
 80106f4:	bf16      	itet	ne
 80106f6:	2301      	movne	r3, #1
 80106f8:	f8cb 0014 	streq.w	r0, [fp, #20]
 80106fc:	f8cb 3010 	strne.w	r3, [fp, #16]
 8010700:	e7a3      	b.n	801064a <Network::Init(NetworkParamsStore*)+0x196>
 8010702:	b11b      	cbz	r3, 801070c <Network::Init(NetworkParamsStore*)+0x258>
 8010704:	2300      	movs	r3, #0
 8010706:	e9c4 3306 	strd	r3, r3, [r4, #24]
 801070a:	9308      	str	r3, [sp, #32]
 801070c:	2300      	movs	r3, #0
 801070e:	f88d 301f 	strb.w	r3, [sp, #31]
 8010712:	f10d 031f 	add.w	r3, sp, #31
 8010716:	463a      	mov	r2, r7
 8010718:	4630      	mov	r0, r6
 801071a:	9300      	str	r3, [sp, #0]
 801071c:	a908      	add	r1, sp, #32
 801071e:	f7f6 fd17 	bl	8007150 <net_init>
 8010722:	e7b3      	b.n	801068c <Network::Init(NetworkParamsStore*)+0x1d8>
 8010724:	2101      	movs	r1, #1
 8010726:	4628      	mov	r0, r5
 8010728:	f001 fb5c 	bl	8011de4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801072c:	e75b      	b.n	80105e6 <Network::Init(NetworkParamsStore*)+0x132>
 801072e:	bf00      	nop
 8010730:	08016ea6 	stmdaeq	r1, {r1, r2, r5, r7, r9, sl, fp, sp, lr}
 8010734:	2000a22c 	andcs	sl, r0, ip, lsr #4
 8010738:	40011000 	andmi	r1, r1, r0
 801073c:	2000a24c 	andcs	sl, r0, ip, asr #4

08010740 <Network::SetIp(unsigned int)>:
 8010740:	7943      	ldrb	r3, [r0, #5]
 8010742:	b570      	push	{r4, r5, r6, lr}
 8010744:	4604      	mov	r4, r0
 8010746:	460d      	mov	r5, r1
 8010748:	2600      	movs	r6, #0
 801074a:	b113      	cbz	r3, 8010752 <Network::SetIp(unsigned int)+0x12>
 801074c:	7146      	strb	r6, [r0, #5]
 801074e:	f7fe feeb 	bl	800f528 <net_dhcp_release>
 8010752:	71e6      	strb	r6, [r4, #7]
 8010754:	b975      	cbnz	r5, 8010774 <Network::SetIp(unsigned int)+0x34>
 8010756:	4620      	mov	r0, r4
 8010758:	f7ff fe9b 	bl	8010492 <Network::SetDefaultIp()>
 801075c:	6960      	ldr	r0, [r4, #20]
 801075e:	f7fe fe9f 	bl	800f4a0 <net_set_ip>
 8010762:	34bc      	adds	r4, #188	; 0xbc
 8010764:	4620      	mov	r0, r4
 8010766:	f001 fb25 	bl	8011db4 <NetworkDisplay::ShowIp()>
 801076a:	4620      	mov	r0, r4
 801076c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010770:	f001 bb26 	b.w	8011dc0 <NetworkDisplay::ShowNetMask()>
 8010774:	4628      	mov	r0, r5
 8010776:	f7fe fe93 	bl	800f4a0 <net_set_ip>
 801077a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801077e:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010782:	2800      	cmp	r0, #0
 8010784:	d0ed      	beq.n	8010762 <Network::SetIp(unsigned int)+0x22>
 8010786:	6803      	ldr	r3, [r0, #0]
 8010788:	4629      	mov	r1, r5
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	4798      	blx	r3
 801078e:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8010792:	2100      	movs	r1, #0
 8010794:	6803      	ldr	r3, [r0, #0]
 8010796:	699b      	ldr	r3, [r3, #24]
 8010798:	4798      	blx	r3
 801079a:	e7e2      	b.n	8010762 <Network::SetIp(unsigned int)+0x22>

0801079c <Network::SetNetmask(unsigned int)>:
 801079c:	69c2      	ldr	r2, [r0, #28]
 801079e:	b510      	push	{r4, lr}
 80107a0:	428a      	cmp	r2, r1
 80107a2:	4604      	mov	r4, r0
 80107a4:	d00f      	beq.n	80107c6 <Network::SetNetmask(unsigned int)+0x2a>
 80107a6:	61c1      	str	r1, [r0, #28]
 80107a8:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 80107ac:	b110      	cbz	r0, 80107b4 <Network::SetNetmask(unsigned int)+0x18>
 80107ae:	6803      	ldr	r3, [r0, #0]
 80107b0:	68db      	ldr	r3, [r3, #12]
 80107b2:	4798      	blx	r3
 80107b4:	34bc      	adds	r4, #188	; 0xbc
 80107b6:	4620      	mov	r0, r4
 80107b8:	f001 fafc 	bl	8011db4 <NetworkDisplay::ShowIp()>
 80107bc:	4620      	mov	r0, r4
 80107be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107c2:	f001 bafd 	b.w	8011dc0 <NetworkDisplay::ShowNetMask()>
 80107c6:	bd10      	pop	{r4, pc}

080107c8 <Network::SetGatewayIp(unsigned int)>:
 80107c8:	b538      	push	{r3, r4, r5, lr}
 80107ca:	6983      	ldr	r3, [r0, #24]
 80107cc:	4604      	mov	r4, r0
 80107ce:	428b      	cmp	r3, r1
 80107d0:	460d      	mov	r5, r1
 80107d2:	d00f      	beq.n	80107f4 <Network::SetGatewayIp(unsigned int)+0x2c>
 80107d4:	4608      	mov	r0, r1
 80107d6:	f7fe fe73 	bl	800f4c0 <net_set_gw>
 80107da:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80107de:	b118      	cbz	r0, 80107e8 <Network::SetGatewayIp(unsigned int)+0x20>
 80107e0:	6803      	ldr	r3, [r0, #0]
 80107e2:	4629      	mov	r1, r5
 80107e4:	691b      	ldr	r3, [r3, #16]
 80107e6:	4798      	blx	r3
 80107e8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80107ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107f0:	f001 baec 	b.w	8011dcc <NetworkDisplay::ShowGatewayIp()>
 80107f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080107f8 <Network::EnableDhcp()>:
 80107f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107fa:	4e25      	ldr	r6, [pc, #148]	; (8010890 <Network::EnableDhcp()+0x98>)
 80107fc:	4604      	mov	r4, r0
 80107fe:	6833      	ldr	r3, [r6, #0]
 8010800:	b085      	sub	sp, #20
 8010802:	781f      	ldrb	r7, [r3, #0]
 8010804:	b137      	cbz	r7, 8010814 <Network::EnableDhcp()+0x1c>
 8010806:	2200      	movs	r2, #0
 8010808:	2104      	movs	r1, #4
 801080a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801080e:	701a      	strb	r2, [r3, #0]
 8010810:	f002 ff80 	bl	8013714 <fwdgt_config>
 8010814:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
 8010818:	2101      	movs	r1, #1
 801081a:	4628      	mov	r0, r5
 801081c:	f001 fae2 	bl	8011de4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010820:	1de2      	adds	r2, r4, #7
 8010822:	f104 0120 	add.w	r1, r4, #32
 8010826:	a801      	add	r0, sp, #4
 8010828:	f7fe fe52 	bl	800f4d0 <net_set_dhcp>
 801082c:	79e3      	ldrb	r3, [r4, #7]
 801082e:	7160      	strb	r0, [r4, #5]
 8010830:	b35b      	cbz	r3, 801088a <Network::EnableDhcp()+0x92>
 8010832:	2104      	movs	r1, #4
 8010834:	4628      	mov	r0, r5
 8010836:	f001 fad5 	bl	8011de4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 801083a:	b16f      	cbz	r7, 8010858 <Network::EnableDhcp()+0x60>
 801083c:	2102      	movs	r1, #2
 801083e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010842:	6836      	ldr	r6, [r6, #0]
 8010844:	f002 ff66 	bl	8013714 <fwdgt_config>
 8010848:	2801      	cmp	r0, #1
 801084a:	bf0c      	ite	eq
 801084c:	2301      	moveq	r3, #1
 801084e:	2300      	movne	r3, #0
 8010850:	7033      	strb	r3, [r6, #0]
 8010852:	d101      	bne.n	8010858 <Network::EnableDhcp()+0x60>
 8010854:	f002 ff4e 	bl	80136f4 <fwdgt_enable>
 8010858:	9b01      	ldr	r3, [sp, #4]
 801085a:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 801085e:	6163      	str	r3, [r4, #20]
 8010860:	9b02      	ldr	r3, [sp, #8]
 8010862:	61e3      	str	r3, [r4, #28]
 8010864:	9b03      	ldr	r3, [sp, #12]
 8010866:	61a3      	str	r3, [r4, #24]
 8010868:	b118      	cbz	r0, 8010872 <Network::EnableDhcp()+0x7a>
 801086a:	6803      	ldr	r3, [r0, #0]
 801086c:	7961      	ldrb	r1, [r4, #5]
 801086e:	699b      	ldr	r3, [r3, #24]
 8010870:	4798      	blx	r3
 8010872:	4628      	mov	r0, r5
 8010874:	f001 fa9e 	bl	8011db4 <NetworkDisplay::ShowIp()>
 8010878:	4628      	mov	r0, r5
 801087a:	f001 faa1 	bl	8011dc0 <NetworkDisplay::ShowNetMask()>
 801087e:	4628      	mov	r0, r5
 8010880:	f001 faa4 	bl	8011dcc <NetworkDisplay::ShowGatewayIp()>
 8010884:	7960      	ldrb	r0, [r4, #5]
 8010886:	b005      	add	sp, #20
 8010888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801088a:	2102      	movs	r1, #2
 801088c:	e7d2      	b.n	8010834 <Network::EnableDhcp()+0x3c>
 801088e:	bf00      	nop
 8010890:	2000a230 	andcs	sl, r0, r0, lsr r2

08010894 <Network::Print()>:
 8010894:	b530      	push	{r4, r5, lr}
 8010896:	4604      	mov	r4, r0
 8010898:	b085      	sub	sp, #20
 801089a:	4832      	ldr	r0, [pc, #200]	; (8010964 <Network::Print()+0xd0>)
 801089c:	f002 fc16 	bl	80130cc <printf>
 80108a0:	f104 0120 	add.w	r1, r4, #32
 80108a4:	4830      	ldr	r0, [pc, #192]	; (8010968 <Network::Print()+0xd4>)
 80108a6:	f002 fc11 	bl	80130cc <printf>
 80108aa:	68a1      	ldr	r1, [r4, #8]
 80108ac:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
 80108b0:	482e      	ldr	r0, [pc, #184]	; (801096c <Network::Print()+0xd8>)
 80108b2:	f002 fc0b 	bl	80130cc <printf>
 80108b6:	69e0      	ldr	r0, [r4, #28]
 80108b8:	f004 fbe8 	bl	801508c <__popcountsi2>
 80108bc:	6965      	ldr	r5, [r4, #20]
 80108be:	9001      	str	r0, [sp, #4]
 80108c0:	0e2b      	lsrs	r3, r5, #24
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80108c8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80108cc:	b2e9      	uxtb	r1, r5
 80108ce:	4828      	ldr	r0, [pc, #160]	; (8010970 <Network::Print()+0xdc>)
 80108d0:	f002 fbfc 	bl	80130cc <printf>
 80108d4:	69e1      	ldr	r1, [r4, #28]
 80108d6:	4827      	ldr	r0, [pc, #156]	; (8010974 <Network::Print()+0xe0>)
 80108d8:	0e0b      	lsrs	r3, r1, #24
 80108da:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80108de:	9300      	str	r3, [sp, #0]
 80108e0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80108e4:	b2c9      	uxtb	r1, r1
 80108e6:	f002 fbf1 	bl	80130cc <printf>
 80108ea:	69a1      	ldr	r1, [r4, #24]
 80108ec:	4822      	ldr	r0, [pc, #136]	; (8010978 <Network::Print()+0xe4>)
 80108ee:	0e0b      	lsrs	r3, r1, #24
 80108f0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80108f4:	9300      	str	r3, [sp, #0]
 80108f6:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80108fa:	b2c9      	uxtb	r1, r1
 80108fc:	f002 fbe6 	bl	80130cc <printf>
 8010900:	69e3      	ldr	r3, [r4, #28]
 8010902:	6961      	ldr	r1, [r4, #20]
 8010904:	481d      	ldr	r0, [pc, #116]	; (801097c <Network::Print()+0xe8>)
 8010906:	ea61 0103 	orn	r1, r1, r3
 801090a:	0e0b      	lsrs	r3, r1, #24
 801090c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010910:	9300      	str	r3, [sp, #0]
 8010912:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010916:	b2c9      	uxtb	r1, r1
 8010918:	f002 fbd8 	bl	80130cc <printf>
 801091c:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8010920:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 8010924:	9302      	str	r3, [sp, #8]
 8010926:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 801092a:	f894 10a0 	ldrb.w	r1, [r4, #160]	; 0xa0
 801092e:	9301      	str	r3, [sp, #4]
 8010930:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
 8010934:	4812      	ldr	r0, [pc, #72]	; (8010980 <Network::Print()+0xec>)
 8010936:	9300      	str	r3, [sp, #0]
 8010938:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 801093c:	f002 fbc6 	bl	80130cc <printf>
 8010940:	4b10      	ldr	r3, [pc, #64]	; (8010984 <Network::Print()+0xf0>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	79da      	ldrb	r2, [r3, #7]
 8010946:	b952      	cbnz	r2, 801095e <Network::Print()+0xca>
 8010948:	795b      	ldrb	r3, [r3, #5]
 801094a:	2b00      	cmp	r3, #0
 801094c:	bf14      	ite	ne
 801094e:	2144      	movne	r1, #68	; 0x44
 8010950:	2153      	moveq	r1, #83	; 0x53
 8010952:	480d      	ldr	r0, [pc, #52]	; (8010988 <Network::Print()+0xf4>)
 8010954:	b005      	add	sp, #20
 8010956:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801095a:	f002 bbb7 	b.w	80130cc <printf>
 801095e:	215a      	movs	r1, #90	; 0x5a
 8010960:	e7f7      	b.n	8010952 <Network::Print()+0xbe>
 8010962:	bf00      	nop
 8010964:	08016eb2 	stmdaeq	r1, {r1, r4, r5, r7, r9, sl, fp, sp, lr}
 8010968:	08016ebb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, sl, fp, sp, lr}
 801096c:	08016ecc 	stmdaeq	r1, {r2, r3, r6, r7, r9, sl, fp, sp, lr}
 8010970:	08016ee1 	stmdaeq	r1, {r0, r5, r6, r7, r9, sl, fp, sp, lr}
 8010974:	08016efe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r7, r9, sl, fp, sp, lr}
 8010978:	08016f18 	stmdaeq	r1, {r3, r4, r8, r9, sl, fp, sp, lr}
 801097c:	08016f32 	stmdaeq	r1, {r1, r4, r5, r8, r9, sl, fp, sp, lr}
 8010980:	08016f4c 	stmdaeq	r1, {r2, r3, r6, r8, r9, sl, fp, sp, lr}
 8010984:	20009b68 	andcs	r9, r0, r8, ror #22
 8010988:	08016f78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, sl, fp, sp, lr}

0801098c <Network::TcpBegin(unsigned short)>:
 801098c:	4608      	mov	r0, r1
 801098e:	f7fe bf45 	b.w	800f81c <tcp_begin>

08010992 <Network::TcpRead(int, unsigned char const**)>:
 8010992:	4608      	mov	r0, r1
 8010994:	4611      	mov	r1, r2
 8010996:	f7fe bf7f 	b.w	800f898 <tcp_read>

0801099a <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 801099a:	4608      	mov	r0, r1
 801099c:	4611      	mov	r1, r2
 801099e:	461a      	mov	r2, r3
 80109a0:	f7fe bf56 	b.w	800f850 <tcp_write>

080109a4 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 80109a4:	b510      	push	{r4, lr}
 80109a6:	225e      	movs	r2, #94	; 0x5e
 80109a8:	4604      	mov	r4, r0
 80109aa:	f840 1b04 	str.w	r1, [r0], #4
 80109ae:	2100      	movs	r1, #0
 80109b0:	f002 f972 	bl	8012c98 <memset>
 80109b4:	2301      	movs	r3, #1
 80109b6:	4620      	mov	r0, r4
 80109b8:	7623      	strb	r3, [r4, #24]
 80109ba:	bd10      	pop	{r4, pc}

080109bc <NetworkParams::Load()>:
 80109bc:	b508      	push	{r3, lr}
 80109be:	2300      	movs	r3, #0
 80109c0:	4601      	mov	r1, r0
 80109c2:	6043      	str	r3, [r0, #4]
 80109c4:	6800      	ldr	r0, [r0, #0]
 80109c6:	b120      	cbz	r0, 80109d2 <NetworkParams::Load()+0x16>
 80109c8:	6803      	ldr	r3, [r0, #0]
 80109ca:	3104      	adds	r1, #4
 80109cc:	68db      	ldr	r3, [r3, #12]
 80109ce:	4798      	blx	r3
 80109d0:	2001      	movs	r0, #1
 80109d2:	bd08      	pop	{r3, pc}

080109d4 <NetworkParams::Load(char const*, unsigned int)>:
 80109d4:	6803      	ldr	r3, [r0, #0]
 80109d6:	b1d3      	cbz	r3, 8010a0e <NetworkParams::Load(char const*, unsigned int)+0x3a>
 80109d8:	2300      	movs	r3, #0
 80109da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80109dc:	460d      	mov	r5, r1
 80109de:	4616      	mov	r6, r2
 80109e0:	4604      	mov	r4, r0
 80109e2:	6043      	str	r3, [r0, #4]
 80109e4:	4602      	mov	r2, r0
 80109e6:	490a      	ldr	r1, [pc, #40]	; (8010a10 <NetworkParams::Load(char const*, unsigned int)+0x3c>)
 80109e8:	4668      	mov	r0, sp
 80109ea:	f001 fb53 	bl	8012094 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 80109ee:	4632      	mov	r2, r6
 80109f0:	4629      	mov	r1, r5
 80109f2:	4668      	mov	r0, sp
 80109f4:	f001 fb52 	bl	801209c <ReadConfigFile::Read(char const*, unsigned int)>
 80109f8:	4621      	mov	r1, r4
 80109fa:	f851 0b04 	ldr.w	r0, [r1], #4
 80109fe:	6803      	ldr	r3, [r0, #0]
 8010a00:	689b      	ldr	r3, [r3, #8]
 8010a02:	4798      	blx	r3
 8010a04:	4668      	mov	r0, sp
 8010a06:	f001 fb48 	bl	801209a <ReadConfigFile::~ReadConfigFile()>
 8010a0a:	b002      	add	sp, #8
 8010a0c:	bd70      	pop	{r4, r5, r6, pc}
 8010a0e:	4770      	bx	lr
 8010a10:	08010b35 	stmdaeq	r1, {r0, r2, r4, r5, r8, r9, fp}

08010a14 <NetworkParams::callbackFunction(char const*)>:
 8010a14:	b530      	push	{r4, r5, lr}
 8010a16:	460d      	mov	r5, r1
 8010a18:	b085      	sub	sp, #20
 8010a1a:	4604      	mov	r4, r0
 8010a1c:	493f      	ldr	r1, [pc, #252]	; (8010b1c <NetworkParams::callbackFunction(char const*)+0x108>)
 8010a1e:	4628      	mov	r0, r5
 8010a20:	f10d 0207 	add.w	r2, sp, #7
 8010a24:	f001 fbe6 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010a28:	b978      	cbnz	r0, 8010a4a <NetworkParams::callbackFunction(char const*)+0x36>
 8010a2a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010a2e:	6863      	ldr	r3, [r4, #4]
 8010a30:	b142      	cbz	r2, 8010a44 <NetworkParams::callbackFunction(char const*)+0x30>
 8010a32:	f023 0301 	bic.w	r3, r3, #1
 8010a36:	3a00      	subs	r2, #0
 8010a38:	bf18      	it	ne
 8010a3a:	2201      	movne	r2, #1
 8010a3c:	6063      	str	r3, [r4, #4]
 8010a3e:	7622      	strb	r2, [r4, #24]
 8010a40:	b005      	add	sp, #20
 8010a42:	bd30      	pop	{r4, r5, pc}
 8010a44:	f043 0301 	orr.w	r3, r3, #1
 8010a48:	e7f5      	b.n	8010a36 <NetworkParams::callbackFunction(char const*)+0x22>
 8010a4a:	4628      	mov	r0, r5
 8010a4c:	4934      	ldr	r1, [pc, #208]	; (8010b20 <NetworkParams::callbackFunction(char const*)+0x10c>)
 8010a4e:	f10d 0207 	add.w	r2, sp, #7
 8010a52:	f001 fbcf 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010a56:	b980      	cbnz	r0, 8010a7a <NetworkParams::callbackFunction(char const*)+0x66>
 8010a58:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010a5c:	6863      	ldr	r3, [r4, #4]
 8010a5e:	1e51      	subs	r1, r2, #1
 8010a60:	2904      	cmp	r1, #4
 8010a62:	bf97      	itett	ls
 8010a64:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8010a68:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 8010a6c:	6063      	strls	r3, [r4, #4]
 8010a6e:	f884 2061 	strbls.w	r2, [r4, #97]	; 0x61
 8010a72:	bf84      	itt	hi
 8010a74:	6063      	strhi	r3, [r4, #4]
 8010a76:	f884 0061 	strbhi.w	r0, [r4, #97]	; 0x61
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	4929      	ldr	r1, [pc, #164]	; (8010b24 <NetworkParams::callbackFunction(char const*)+0x110>)
 8010a7e:	aa02      	add	r2, sp, #8
 8010a80:	f001 fb59 	bl	8012136 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010a84:	b9c8      	cbnz	r0, 8010aba <NetworkParams::callbackFunction(char const*)+0xa6>
 8010a86:	9b02      	ldr	r3, [sp, #8]
 8010a88:	b2d9      	uxtb	r1, r3
 8010a8a:	29ac      	cmp	r1, #172	; 0xac
 8010a8c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010a90:	d009      	beq.n	8010aa6 <NetworkParams::callbackFunction(char const*)+0x92>
 8010a92:	29c0      	cmp	r1, #192	; 0xc0
 8010a94:	d00b      	beq.n	8010aae <NetworkParams::callbackFunction(char const*)+0x9a>
 8010a96:	290a      	cmp	r1, #10
 8010a98:	d10c      	bne.n	8010ab4 <NetworkParams::callbackFunction(char const*)+0xa0>
 8010a9a:	60a3      	str	r3, [r4, #8]
 8010a9c:	6863      	ldr	r3, [r4, #4]
 8010a9e:	f043 0302 	orr.w	r3, r3, #2
 8010aa2:	6063      	str	r3, [r4, #4]
 8010aa4:	e7cc      	b.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010aa6:	3a10      	subs	r2, #16
 8010aa8:	2a0f      	cmp	r2, #15
 8010aaa:	d8c9      	bhi.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010aac:	e7f5      	b.n	8010a9a <NetworkParams::callbackFunction(char const*)+0x86>
 8010aae:	2aa8      	cmp	r2, #168	; 0xa8
 8010ab0:	d1c6      	bne.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010ab2:	e7f2      	b.n	8010a9a <NetworkParams::callbackFunction(char const*)+0x86>
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d0f0      	beq.n	8010a9a <NetworkParams::callbackFunction(char const*)+0x86>
 8010ab8:	e7c2      	b.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010aba:	4628      	mov	r0, r5
 8010abc:	491a      	ldr	r1, [pc, #104]	; (8010b28 <NetworkParams::callbackFunction(char const*)+0x114>)
 8010abe:	aa02      	add	r2, sp, #8
 8010ac0:	f001 fb39 	bl	8012136 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010ac4:	b960      	cbnz	r0, 8010ae0 <NetworkParams::callbackFunction(char const*)+0xcc>
 8010ac6:	9b02      	ldr	r3, [sp, #8]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d0b9      	beq.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010acc:	ba1a      	rev	r2, r3
 8010ace:	43d1      	mvns	r1, r2
 8010ad0:	ea12 0251 	ands.w	r2, r2, r1, lsr #1
 8010ad4:	d1b4      	bne.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010ad6:	60e3      	str	r3, [r4, #12]
 8010ad8:	6863      	ldr	r3, [r4, #4]
 8010ada:	f043 0304 	orr.w	r3, r3, #4
 8010ade:	e7e0      	b.n	8010aa2 <NetworkParams::callbackFunction(char const*)+0x8e>
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	4912      	ldr	r1, [pc, #72]	; (8010b2c <NetworkParams::callbackFunction(char const*)+0x118>)
 8010ae4:	aa02      	add	r2, sp, #8
 8010ae6:	f001 fb26 	bl	8012136 <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010aea:	b928      	cbnz	r0, 8010af8 <NetworkParams::callbackFunction(char const*)+0xe4>
 8010aec:	9b02      	ldr	r3, [sp, #8]
 8010aee:	6123      	str	r3, [r4, #16]
 8010af0:	6863      	ldr	r3, [r4, #4]
 8010af2:	f043 0308 	orr.w	r3, r3, #8
 8010af6:	e7d4      	b.n	8010aa2 <NetworkParams::callbackFunction(char const*)+0x8e>
 8010af8:	233f      	movs	r3, #63	; 0x3f
 8010afa:	4628      	mov	r0, r5
 8010afc:	9303      	str	r3, [sp, #12]
 8010afe:	490c      	ldr	r1, [pc, #48]	; (8010b30 <NetworkParams::callbackFunction(char const*)+0x11c>)
 8010b00:	ab03      	add	r3, sp, #12
 8010b02:	f104 0219 	add.w	r2, r4, #25
 8010b06:	f001 fafd 	bl	8012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	d198      	bne.n	8010a40 <NetworkParams::callbackFunction(char const*)+0x2c>
 8010b0e:	9b03      	ldr	r3, [sp, #12]
 8010b10:	4423      	add	r3, r4
 8010b12:	7658      	strb	r0, [r3, #25]
 8010b14:	6863      	ldr	r3, [r4, #4]
 8010b16:	f043 0320 	orr.w	r3, r3, #32
 8010b1a:	e7c2      	b.n	8010aa2 <NetworkParams::callbackFunction(char const*)+0x8e>
 8010b1c:	08016fd0 	stmdaeq	r1, {r4, r6, r7, r8, r9, sl, fp, sp, lr}
 8010b20:	08016fae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, sl, fp, sp, lr}
 8010b24:	08016f93 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, sl, fp, sp, lr}
 8010b28:	08016fc7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, r9, sl, fp, sp, lr}
 8010b2c:	08016f9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, r9, sl, fp, sp, lr}
 8010b30:	08016fbe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp, lr}

08010b34 <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8010b34:	f7ff bf6e 	b.w	8010a14 <NetworkParams::callbackFunction(char const*)>

08010b38 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>:
 8010b38:	b570      	push	{r4, r5, r6, lr}
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	4615      	mov	r5, r2
 8010b3e:	461e      	mov	r6, r3
 8010b40:	b086      	sub	sp, #24
 8010b42:	3004      	adds	r0, #4
 8010b44:	2900      	cmp	r1, #0
 8010b46:	d02b      	beq.n	8010ba0 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x68>
 8010b48:	225e      	movs	r2, #94	; 0x5e
 8010b4a:	f002 f88e 	bl	8012c6a <memmove>
 8010b4e:	462a      	mov	r2, r5
 8010b50:	4633      	mov	r3, r6
 8010b52:	4970      	ldr	r1, [pc, #448]	; (8010d14 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1dc>)
 8010b54:	a803      	add	r0, sp, #12
 8010b56:	f001 f9fd 	bl	8011f54 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8010b5a:	6863      	ldr	r3, [r4, #4]
 8010b5c:	079a      	lsls	r2, r3, #30
 8010b5e:	bf5f      	itttt	pl
 8010b60:	4a6d      	ldrpl	r2, [pc, #436]	; (8010d18 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8010b62:	6812      	ldrpl	r2, [r2, #0]
 8010b64:	6952      	ldrpl	r2, [r2, #20]
 8010b66:	60a2      	strpl	r2, [r4, #8]
 8010b68:	075e      	lsls	r6, r3, #29
 8010b6a:	bf5f      	itttt	pl
 8010b6c:	4a6a      	ldrpl	r2, [pc, #424]	; (8010d18 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8010b6e:	6812      	ldrpl	r2, [r2, #0]
 8010b70:	69d2      	ldrpl	r2, [r2, #28]
 8010b72:	60e2      	strpl	r2, [r4, #12]
 8010b74:	071d      	lsls	r5, r3, #28
 8010b76:	bf58      	it	pl
 8010b78:	4a67      	ldrpl	r2, [pc, #412]	; (8010d18 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8010b7a:	f104 0519 	add.w	r5, r4, #25
 8010b7e:	bf5e      	ittt	pl
 8010b80:	6812      	ldrpl	r2, [r2, #0]
 8010b82:	6992      	ldrpl	r2, [r2, #24]
 8010b84:	6122      	strpl	r2, [r4, #16]
 8010b86:	0698      	lsls	r0, r3, #26
 8010b88:	d418      	bmi.n	8010bbc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x84>
 8010b8a:	4628      	mov	r0, r5
 8010b8c:	223f      	movs	r2, #63	; 0x3f
 8010b8e:	4b62      	ldr	r3, [pc, #392]	; (8010d18 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e0>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	331f      	adds	r3, #31
 8010b94:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010b98:	b949      	cbnz	r1, 8010bae <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x76>
 8010b9a:	f002 f87d 	bl	8012c98 <memset>
 8010b9e:	e00a      	b.n	8010bb6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8010ba0:	6823      	ldr	r3, [r4, #0]
 8010ba2:	4601      	mov	r1, r0
 8010ba4:	681a      	ldr	r2, [r3, #0]
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	68d2      	ldr	r2, [r2, #12]
 8010baa:	4790      	blx	r2
 8010bac:	e7cf      	b.n	8010b4e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8010bae:	3a01      	subs	r2, #1
 8010bb0:	f800 1b01 	strb.w	r1, [r0], #1
 8010bb4:	d1ee      	bne.n	8010b94 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x5c>
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8010bbc:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010bc0:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8010bc4:	7e23      	ldrb	r3, [r4, #24]
 8010bc6:	42b2      	cmp	r2, r6
 8010bc8:	6861      	ldr	r1, [r4, #4]
 8010bca:	d21a      	bcs.n	8010c02 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xca>
 8010bcc:	9803      	ldr	r0, [sp, #12]
 8010bce:	07c9      	lsls	r1, r1, #31
 8010bd0:	4410      	add	r0, r2
 8010bd2:	eba6 0602 	sub.w	r6, r6, r2
 8010bd6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8010bda:	d404      	bmi.n	8010be6 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xae>
 8010bdc:	b922      	cbnz	r2, 8010be8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb0>
 8010bde:	9300      	str	r3, [sp, #0]
 8010be0:	4a4e      	ldr	r2, [pc, #312]	; (8010d1c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8010be2:	4b4f      	ldr	r3, [pc, #316]	; (8010d20 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8010be4:	e003      	b.n	8010bee <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 8010be6:	b312      	cbz	r2, 8010c2e <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xf6>
 8010be8:	9300      	str	r3, [sp, #0]
 8010bea:	4a4e      	ldr	r2, [pc, #312]	; (8010d24 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8010bec:	4b4c      	ldr	r3, [pc, #304]	; (8010d20 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8010bee:	4631      	mov	r1, r6
 8010bf0:	f002 fa94 	bl	801311c <snprintf>
 8010bf4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010bf8:	4286      	cmp	r6, r0
 8010bfa:	bfa4      	itt	ge
 8010bfc:	181b      	addge	r3, r3, r0
 8010bfe:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8010c02:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010c06:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 8010c0a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8010c0e:	42b2      	cmp	r2, r6
 8010c10:	6861      	ldr	r1, [r4, #4]
 8010c12:	d21f      	bcs.n	8010c54 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>
 8010c14:	9803      	ldr	r0, [sp, #12]
 8010c16:	05c9      	lsls	r1, r1, #23
 8010c18:	4410      	add	r0, r2
 8010c1a:	eba6 0602 	sub.w	r6, r6, r2
 8010c1e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8010c22:	d408      	bmi.n	8010c36 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xfe>
 8010c24:	b94a      	cbnz	r2, 8010c3a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x102>
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	4a3c      	ldr	r2, [pc, #240]	; (8010d1c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e4>)
 8010c2a:	4b3f      	ldr	r3, [pc, #252]	; (8010d28 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8010c2c:	e008      	b.n	8010c40 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 8010c2e:	9300      	str	r3, [sp, #0]
 8010c30:	4a3e      	ldr	r2, [pc, #248]	; (8010d2c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8010c32:	4b3b      	ldr	r3, [pc, #236]	; (8010d20 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1e8>)
 8010c34:	e7db      	b.n	8010bee <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0xb6>
 8010c36:	2a00      	cmp	r2, #0
 8010c38:	d03c      	beq.n	8010cb4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x17c>
 8010c3a:	9300      	str	r3, [sp, #0]
 8010c3c:	4a39      	ldr	r2, [pc, #228]	; (8010d24 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1ec>)
 8010c3e:	4b3a      	ldr	r3, [pc, #232]	; (8010d28 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8010c40:	4631      	mov	r1, r6
 8010c42:	f002 fa6b 	bl	801311c <snprintf>
 8010c46:	4286      	cmp	r6, r0
 8010c48:	bfa2      	ittt	ge
 8010c4a:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8010c4e:	18c0      	addge	r0, r0, r3
 8010c50:	f8ad 0012 	strhge.w	r0, [sp, #18]
 8010c54:	4936      	ldr	r1, [pc, #216]	; (8010d30 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f8>)
 8010c56:	a803      	add	r0, sp, #12
 8010c58:	f001 fa02 	bl	8012060 <PropertiesBuilder::AddComment(char const*)>
 8010c5c:	6863      	ldr	r3, [r4, #4]
 8010c5e:	68a2      	ldr	r2, [r4, #8]
 8010c60:	4934      	ldr	r1, [pc, #208]	; (8010d34 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1fc>)
 8010c62:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010c66:	a803      	add	r0, sp, #12
 8010c68:	f001 f9b6 	bl	8011fd8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010c6c:	6863      	ldr	r3, [r4, #4]
 8010c6e:	68e2      	ldr	r2, [r4, #12]
 8010c70:	4931      	ldr	r1, [pc, #196]	; (8010d38 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x200>)
 8010c72:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010c76:	a803      	add	r0, sp, #12
 8010c78:	f001 f9ae 	bl	8011fd8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010c7c:	6863      	ldr	r3, [r4, #4]
 8010c7e:	6922      	ldr	r2, [r4, #16]
 8010c80:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010c84:	492d      	ldr	r1, [pc, #180]	; (8010d3c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x204>)
 8010c86:	a803      	add	r0, sp, #12
 8010c88:	f001 f9a6 	bl	8011fd8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010c8c:	6862      	ldr	r2, [r4, #4]
 8010c8e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010c92:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8010c96:	42a3      	cmp	r3, r4
 8010c98:	d21e      	bcs.n	8010cd8 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1a0>
 8010c9a:	9803      	ldr	r0, [sp, #12]
 8010c9c:	0692      	lsls	r2, r2, #26
 8010c9e:	4418      	add	r0, r3
 8010ca0:	eba4 0403 	sub.w	r4, r4, r3
 8010ca4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010ca8:	d408      	bmi.n	8010cbc <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x184>
 8010caa:	b943      	cbnz	r3, 8010cbe <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x186>
 8010cac:	4b24      	ldr	r3, [pc, #144]	; (8010d40 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 8010cae:	4a25      	ldr	r2, [pc, #148]	; (8010d44 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x20c>)
 8010cb0:	9500      	str	r5, [sp, #0]
 8010cb2:	e007      	b.n	8010cc4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	4a1d      	ldr	r2, [pc, #116]	; (8010d2c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f4>)
 8010cb8:	4b1b      	ldr	r3, [pc, #108]	; (8010d28 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1f0>)
 8010cba:	e7c1      	b.n	8010c40 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x108>
 8010cbc:	b32b      	cbz	r3, 8010d0a <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1d2>
 8010cbe:	4b20      	ldr	r3, [pc, #128]	; (8010d40 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 8010cc0:	4a21      	ldr	r2, [pc, #132]	; (8010d48 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x210>)
 8010cc2:	9500      	str	r5, [sp, #0]
 8010cc4:	4621      	mov	r1, r4
 8010cc6:	f002 fa29 	bl	801311c <snprintf>
 8010cca:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010cce:	4284      	cmp	r4, r0
 8010cd0:	bfa4      	itt	ge
 8010cd2:	181b      	addge	r3, r3, r0
 8010cd4:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8010cd8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010cdc:	b17b      	cbz	r3, 8010cfe <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x1c6>
 8010cde:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010ce2:	9b03      	ldr	r3, [sp, #12]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	227d      	movs	r2, #125	; 0x7d
 8010ce8:	f803 2c01 	strb.w	r2, [r3, #-1]
 8010cec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010cf0:	9903      	ldr	r1, [sp, #12]
 8010cf2:	54ca      	strb	r2, [r1, r3]
 8010cf4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	f8ad 3012 	strh.w	r3, [sp, #18]
 8010cfe:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8010d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d04:	601a      	str	r2, [r3, #0]
 8010d06:	b006      	add	sp, #24
 8010d08:	bd70      	pop	{r4, r5, r6, pc}
 8010d0a:	4b0d      	ldr	r3, [pc, #52]	; (8010d40 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x208>)
 8010d0c:	4a0f      	ldr	r2, [pc, #60]	; (8010d4c <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x214>)
 8010d0e:	9500      	str	r5, [sp, #0]
 8010d10:	e7d8      	b.n	8010cc4 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)+0x18c>
 8010d12:	bf00      	nop
 8010d14:	08016fd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, sl, fp, sp, lr}
 8010d18:	20009b68 	andcs	r9, r0, r8, ror #22
 8010d1c:	080157c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip, lr}
 8010d20:	08016fd0 	stmdaeq	r1, {r4, r6, r7, r8, r9, sl, fp, sp, lr}
 8010d24:	080157b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
 8010d28:	08016fae 	stmdaeq	r1, {r1, r2, r3, r5, r7, r8, r9, sl, fp, sp, lr}
 8010d2c:	080157c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, ip, lr}
 8010d30:	08016f89 	stmdaeq	r1, {r0, r3, r7, r8, r9, sl, fp, sp, lr}
 8010d34:	08016f93 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, sl, fp, sp, lr}
 8010d38:	08016fc7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, r9, sl, fp, sp, lr}
 8010d3c:	08016f9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, r9, sl, fp, sp, lr}
 8010d40:	08016fbe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp, lr}
 8010d44:	080157d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, r9, sl, ip, lr}
 8010d48:	080157c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, sl, ip, lr}
 8010d4c:	080157d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, sl, ip, lr}

08010d50 <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 8010d50:	b513      	push	{r0, r1, r4, lr}
 8010d52:	6804      	ldr	r4, [r0, #0]
 8010d54:	b914      	cbnz	r4, 8010d5c <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8010d56:	601c      	str	r4, [r3, #0]
 8010d58:	b002      	add	sp, #8
 8010d5a:	bd10      	pop	{r4, pc}
 8010d5c:	9300      	str	r3, [sp, #0]
 8010d5e:	4613      	mov	r3, r2
 8010d60:	460a      	mov	r2, r1
 8010d62:	2100      	movs	r1, #0
 8010d64:	f7ff fee8 	bl	8010b38 <NetworkParams::Builder(networkparams::Params const*, char*, unsigned int, unsigned int&)>
 8010d68:	e7f6      	b.n	8010d58 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

08010d6a <NetworkParams::Dump()>:
 8010d6a:	4770      	bx	lr

08010d6c <memcpy.isra.0>:
 8010d6c:	3801      	subs	r0, #1
 8010d6e:	440a      	add	r2, r1
 8010d70:	4291      	cmp	r1, r2
 8010d72:	d100      	bne.n	8010d76 <memcpy.isra.0+0xa>
 8010d74:	4770      	bx	lr
 8010d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d7a:	f800 3f01 	strb.w	r3, [r0, #1]!
 8010d7e:	e7f7      	b.n	8010d70 <memcpy.isra.0+0x4>

08010d80 <arp_announce>:
 8010d80:	4803      	ldr	r0, [pc, #12]	; (8010d90 <arp_announce+0x10>)
 8010d82:	69c3      	ldr	r3, [r0, #28]
 8010d84:	b113      	cbz	r3, 8010d8c <arp_announce+0xc>
 8010d86:	212a      	movs	r1, #42	; 0x2a
 8010d88:	f003 b8b6 	b.w	8013ef8 <emac_eth_send>
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	20009b6c 	andcs	r9, r0, ip, ror #22

08010d94 <arp_handle_request>:
 8010d94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d96:	2204      	movs	r2, #4
 8010d98:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	eb0d 0002 	add.w	r0, sp, r2
 8010da2:	f7ff ffe3 	bl	8010d6c <memcpy.isra.0>
 8010da6:	4b0d      	ldr	r3, [pc, #52]	; (8010ddc <arp_handle_request+0x48>)
 8010da8:	9a01      	ldr	r2, [sp, #4]
 8010daa:	69db      	ldr	r3, [r3, #28]
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d113      	bne.n	8010dd8 <arp_handle_request+0x44>
 8010db0:	2206      	movs	r2, #6
 8010db2:	4d0b      	ldr	r5, [pc, #44]	; (8010de0 <arp_handle_request+0x4c>)
 8010db4:	18a1      	adds	r1, r4, r2
 8010db6:	4628      	mov	r0, r5
 8010db8:	f7ff ffd8 	bl	8010d6c <memcpy.isra.0>
 8010dbc:	f104 0116 	add.w	r1, r4, #22
 8010dc0:	f105 0020 	add.w	r0, r5, #32
 8010dc4:	2206      	movs	r2, #6
 8010dc6:	f7ff ffd1 	bl	8010d6c <memcpy.isra.0>
 8010dca:	69e3      	ldr	r3, [r4, #28]
 8010dcc:	212a      	movs	r1, #42	; 0x2a
 8010dce:	4628      	mov	r0, r5
 8010dd0:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8010dd4:	f003 f890 	bl	8013ef8 <emac_eth_send>
 8010dd8:	b003      	add	sp, #12
 8010dda:	bd30      	pop	{r4, r5, pc}
 8010ddc:	20009b6c 	andcs	r9, r0, ip, ror #22
 8010de0:	20009b98 	mulcs	r0, r8, fp

08010de4 <arp_handle_reply>:
 8010de4:	69c1      	ldr	r1, [r0, #28]
 8010de6:	3016      	adds	r0, #22
 8010de8:	f000 b80a 	b.w	8010e00 <arp_cache_update>

08010dec <arp_send_request>:
 8010dec:	4b03      	ldr	r3, [pc, #12]	; (8010dfc <arp_send_request+0x10>)
 8010dee:	212a      	movs	r1, #42	; 0x2a
 8010df0:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8010df4:	4618      	mov	r0, r3
 8010df6:	f003 b87f 	b.w	8013ef8 <emac_eth_send>
 8010dfa:	bf00      	nop
 8010dfc:	20009bc4 	andcs	r9, r0, r4, asr #23

08010e00 <arp_cache_update>:
 8010e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e02:	4e11      	ldr	r6, [pc, #68]	; (8010e48 <arp_cache_update+0x48>)
 8010e04:	8833      	ldrh	r3, [r6, #0]
 8010e06:	2b20      	cmp	r3, #32
 8010e08:	d018      	beq.n	8010e3c <arp_cache_update+0x3c>
 8010e0a:	2400      	movs	r4, #0
 8010e0c:	220c      	movs	r2, #12
 8010e0e:	4d0f      	ldr	r5, [pc, #60]	; (8010e4c <arp_cache_update+0x4c>)
 8010e10:	b2a7      	uxth	r7, r4
 8010e12:	42bb      	cmp	r3, r7
 8010e14:	d80b      	bhi.n	8010e2e <arp_cache_update+0x2e>
 8010e16:	fb02 5203 	mla	r2, r2, r3, r5
 8010e1a:	1d84      	adds	r4, r0, #6
 8010e1c:	3203      	adds	r2, #3
 8010e1e:	42a0      	cmp	r0, r4
 8010e20:	d10d      	bne.n	8010e3e <arp_cache_update+0x3e>
 8010e22:	220c      	movs	r2, #12
 8010e24:	435a      	muls	r2, r3
 8010e26:	3301      	adds	r3, #1
 8010e28:	50a9      	str	r1, [r5, r2]
 8010e2a:	8033      	strh	r3, [r6, #0]
 8010e2c:	e006      	b.n	8010e3c <arp_cache_update+0x3c>
 8010e2e:	3401      	adds	r4, #1
 8010e30:	fb02 5704 	mla	r7, r2, r4, r5
 8010e34:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 8010e38:	428f      	cmp	r7, r1
 8010e3a:	d1e9      	bne.n	8010e10 <arp_cache_update+0x10>
 8010e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e3e:	f810 7b01 	ldrb.w	r7, [r0], #1
 8010e42:	f802 7f01 	strb.w	r7, [r2, #1]!
 8010e46:	e7ea      	b.n	8010e1e <arp_cache_update+0x1e>
 8010e48:	20009d70 	andcs	r9, r0, r0, ror sp
 8010e4c:	20009bf0 	strdcs	r9, [r0], -r0

08010e50 <arp_cache_lookup>:
 8010e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e54:	2200      	movs	r2, #0
 8010e56:	4606      	mov	r6, r0
 8010e58:	460c      	mov	r4, r1
 8010e5a:	200c      	movs	r0, #12
 8010e5c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8010ee4 <arp_cache_lookup+0x94>
 8010e60:	fb00 f302 	mul.w	r3, r0, r2
 8010e64:	f853 1008 	ldr.w	r1, [r3, r8]
 8010e68:	42b1      	cmp	r1, r6
 8010e6a:	d10d      	bne.n	8010e88 <arp_cache_lookup+0x38>
 8010e6c:	3304      	adds	r3, #4
 8010e6e:	4443      	add	r3, r8
 8010e70:	3c01      	subs	r4, #1
 8010e72:	1d9a      	adds	r2, r3, #6
 8010e74:	4293      	cmp	r3, r2
 8010e76:	d102      	bne.n	8010e7e <arp_cache_lookup+0x2e>
 8010e78:	4630      	mov	r0, r6
 8010e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e7e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010e82:	f804 1f01 	strb.w	r1, [r4, #1]!
 8010e86:	e7f5      	b.n	8010e74 <arp_cache_lookup+0x24>
 8010e88:	b111      	cbz	r1, 8010e90 <arp_cache_lookup+0x40>
 8010e8a:	3201      	adds	r2, #1
 8010e8c:	2a20      	cmp	r2, #32
 8010e8e:	d1e7      	bne.n	8010e60 <arp_cache_lookup+0x10>
 8010e90:	2704      	movs	r7, #4
 8010e92:	f8df a054 	ldr.w	sl, [pc, #84]	; 8010ee8 <arp_cache_lookup+0x98>
 8010e96:	f8ba 5000 	ldrh.w	r5, [sl]
 8010e9a:	3f01      	subs	r7, #1
 8010e9c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8010ea0:	d101      	bne.n	8010ea6 <arp_cache_lookup+0x56>
 8010ea2:	463e      	mov	r6, r7
 8010ea4:	e7e8      	b.n	8010e78 <arp_cache_lookup+0x28>
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	f7ff ffa0 	bl	8010dec <arp_send_request>
 8010eac:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8010eb0:	f1b9 0901 	subs.w	r9, r9, #1
 8010eb4:	f8ba 3000 	ldrh.w	r3, [sl]
 8010eb8:	d011      	beq.n	8010ede <arp_cache_lookup+0x8e>
 8010eba:	429d      	cmp	r5, r3
 8010ebc:	d00c      	beq.n	8010ed8 <arp_cache_lookup+0x88>
 8010ebe:	230c      	movs	r3, #12
 8010ec0:	fb03 8505 	mla	r5, r3, r5, r8
 8010ec4:	3c01      	subs	r4, #1
 8010ec6:	1d2b      	adds	r3, r5, #4
 8010ec8:	350a      	adds	r5, #10
 8010eca:	42ab      	cmp	r3, r5
 8010ecc:	d0d4      	beq.n	8010e78 <arp_cache_lookup+0x28>
 8010ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ed2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010ed6:	e7f8      	b.n	8010eca <arp_cache_lookup+0x7a>
 8010ed8:	f7f6 fb22 	bl	8007520 <net_handle>
 8010edc:	e7e8      	b.n	8010eb0 <arp_cache_lookup+0x60>
 8010ede:	429d      	cmp	r5, r3
 8010ee0:	d0db      	beq.n	8010e9a <arp_cache_lookup+0x4a>
 8010ee2:	e7ec      	b.n	8010ebe <arp_cache_lookup+0x6e>
 8010ee4:	20009bf0 	strdcs	r9, [r0], -r0
 8010ee8:	20009d70 	andcs	r9, r0, r0, ror sp

08010eec <_parse_response>:
 8010eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef0:	2400      	movs	r4, #0
 8010ef2:	460d      	mov	r5, r1
 8010ef4:	46a3      	mov	fp, r4
 8010ef6:	4627      	mov	r7, r4
 8010ef8:	46a2      	mov	sl, r4
 8010efa:	46a1      	mov	r9, r4
 8010efc:	46a0      	mov	r8, r4
 8010efe:	4e50      	ldr	r6, [pc, #320]	; (8011040 <_parse_response+0x154>)
 8010f00:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8010f04:	6833      	ldr	r3, [r6, #0]
 8010f06:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8010f0a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8010f0e:	9009      	str	r0, [sp, #36]	; 0x24
 8010f10:	9402      	str	r4, [sp, #8]
 8010f12:	9407      	str	r4, [sp, #28]
 8010f14:	9308      	str	r3, [sp, #32]
 8010f16:	f7f6 fb03 	bl	8007520 <net_handle>
 8010f1a:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8010f1e:	9300      	str	r3, [sp, #0]
 8010f20:	f44f 7209 	mov.w	r2, #548	; 0x224
 8010f24:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 8010f28:	ab0c      	add	r3, sp, #48	; 0x30
 8010f2a:	a90d      	add	r1, sp, #52	; 0x34
 8010f2c:	f7fe fd76 	bl	800fa1c <udp_recv>
 8010f30:	2800      	cmp	r0, #0
 8010f32:	d03f      	beq.n	8010fb4 <_parse_response+0xc8>
 8010f34:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8010f38:	2b43      	cmp	r3, #67	; 0x43
 8010f3a:	d13b      	bne.n	8010fb4 <_parse_response+0xc8>
 8010f3c:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 8010f40:	1e6b      	subs	r3, r5, #1
 8010f42:	1d69      	adds	r1, r5, #5
 8010f44:	4299      	cmp	r1, r3
 8010f46:	d12f      	bne.n	8010fa8 <_parse_response+0xbc>
 8010f48:	2100      	movs	r1, #0
 8010f4a:	ab0d      	add	r3, sp, #52	; 0x34
 8010f4c:	181d      	adds	r5, r3, r0
 8010f4e:	468c      	mov	ip, r1
 8010f50:	460e      	mov	r6, r1
 8010f52:	4608      	mov	r0, r1
 8010f54:	ab49      	add	r3, sp, #292	; 0x124
 8010f56:	42ab      	cmp	r3, r5
 8010f58:	d337      	bcc.n	8010fca <_parse_response+0xde>
 8010f5a:	b141      	cbz	r1, 8010f6e <_parse_response+0x82>
 8010f5c:	4b39      	ldr	r3, [pc, #228]	; (8011044 <_parse_response+0x158>)
 8010f5e:	9a07      	ldr	r2, [sp, #28]
 8010f60:	f883 8003 	strb.w	r8, [r3, #3]
 8010f64:	709a      	strb	r2, [r3, #2]
 8010f66:	9a06      	ldr	r2, [sp, #24]
 8010f68:	705a      	strb	r2, [r3, #1]
 8010f6a:	9a05      	ldr	r2, [sp, #20]
 8010f6c:	701a      	strb	r2, [r3, #0]
 8010f6e:	f1bc 0f00 	cmp.w	ip, #0
 8010f72:	d007      	beq.n	8010f84 <_parse_response+0x98>
 8010f74:	4b34      	ldr	r3, [pc, #208]	; (8011048 <_parse_response+0x15c>)
 8010f76:	9a04      	ldr	r2, [sp, #16]
 8010f78:	705c      	strb	r4, [r3, #1]
 8010f7a:	70da      	strb	r2, [r3, #3]
 8010f7c:	9a03      	ldr	r2, [sp, #12]
 8010f7e:	709a      	strb	r2, [r3, #2]
 8010f80:	9a02      	ldr	r2, [sp, #8]
 8010f82:	701a      	strb	r2, [r3, #0]
 8010f84:	b13e      	cbz	r6, 8010f96 <_parse_response+0xaa>
 8010f86:	4b31      	ldr	r3, [pc, #196]	; (801104c <_parse_response+0x160>)
 8010f88:	70df      	strb	r7, [r3, #3]
 8010f8a:	f883 a002 	strb.w	sl, [r3, #2]
 8010f8e:	f883 9001 	strb.w	r9, [r3, #1]
 8010f92:	f883 b000 	strb.w	fp, [r3]
 8010f96:	2802      	cmp	r0, #2
 8010f98:	d102      	bne.n	8010fa0 <_parse_response+0xb4>
 8010f9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010f9c:	4b2c      	ldr	r3, [pc, #176]	; (8011050 <_parse_response+0x164>)
 8010f9e:	601a      	str	r2, [r3, #0]
 8010fa0:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8010fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fa8:	f812 ef01 	ldrb.w	lr, [r2, #1]!
 8010fac:	f813 cf01 	ldrb.w	ip, [r3, #1]!
 8010fb0:	45e6      	cmp	lr, ip
 8010fb2:	d0c7      	beq.n	8010f44 <_parse_response+0x58>
 8010fb4:	6833      	ldr	r3, [r6, #0]
 8010fb6:	9a08      	ldr	r2, [sp, #32]
 8010fb8:	1a9b      	subs	r3, r3, r2
 8010fba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010fbe:	d3aa      	bcc.n	8010f16 <_parse_response+0x2a>
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	d1c1      	bne.n	8010f48 <_parse_response+0x5c>
 8010fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010fc8:	e7ea      	b.n	8010fa0 <_parse_response+0xb4>
 8010fca:	781a      	ldrb	r2, [r3, #0]
 8010fcc:	2a35      	cmp	r2, #53	; 0x35
 8010fce:	d011      	beq.n	8010ff4 <_parse_response+0x108>
 8010fd0:	d808      	bhi.n	8010fe4 <_parse_response+0xf8>
 8010fd2:	2a01      	cmp	r2, #1
 8010fd4:	d011      	beq.n	8010ffa <_parse_response+0x10e>
 8010fd6:	2a03      	cmp	r2, #3
 8010fd8:	d019      	beq.n	801100e <_parse_response+0x122>
 8010fda:	b14a      	cbz	r2, 8010ff0 <_parse_response+0x104>
 8010fdc:	1c9a      	adds	r2, r3, #2
 8010fde:	785b      	ldrb	r3, [r3, #1]
 8010fe0:	4413      	add	r3, r2
 8010fe2:	e7b8      	b.n	8010f56 <_parse_response+0x6a>
 8010fe4:	2a36      	cmp	r2, #54	; 0x36
 8010fe6:	d01f      	beq.n	8011028 <_parse_response+0x13c>
 8010fe8:	2aff      	cmp	r2, #255	; 0xff
 8010fea:	d1f7      	bne.n	8010fdc <_parse_response+0xf0>
 8010fec:	462b      	mov	r3, r5
 8010fee:	e7b2      	b.n	8010f56 <_parse_response+0x6a>
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	e7b0      	b.n	8010f56 <_parse_response+0x6a>
 8010ff4:	7898      	ldrb	r0, [r3, #2]
 8010ff6:	3303      	adds	r3, #3
 8010ff8:	e7ad      	b.n	8010f56 <_parse_response+0x6a>
 8010ffa:	f893 b002 	ldrb.w	fp, [r3, #2]
 8010ffe:	f893 9003 	ldrb.w	r9, [r3, #3]
 8011002:	f893 a004 	ldrb.w	sl, [r3, #4]
 8011006:	795f      	ldrb	r7, [r3, #5]
 8011008:	4616      	mov	r6, r2
 801100a:	3306      	adds	r3, #6
 801100c:	e7a3      	b.n	8010f56 <_parse_response+0x6a>
 801100e:	789a      	ldrb	r2, [r3, #2]
 8011010:	78dc      	ldrb	r4, [r3, #3]
 8011012:	9202      	str	r2, [sp, #8]
 8011014:	791a      	ldrb	r2, [r3, #4]
 8011016:	f04f 0c01 	mov.w	ip, #1
 801101a:	9203      	str	r2, [sp, #12]
 801101c:	795a      	ldrb	r2, [r3, #5]
 801101e:	9204      	str	r2, [sp, #16]
 8011020:	785a      	ldrb	r2, [r3, #1]
 8011022:	4413      	add	r3, r2
 8011024:	3302      	adds	r3, #2
 8011026:	e796      	b.n	8010f56 <_parse_response+0x6a>
 8011028:	789a      	ldrb	r2, [r3, #2]
 801102a:	f893 8005 	ldrb.w	r8, [r3, #5]
 801102e:	9205      	str	r2, [sp, #20]
 8011030:	78da      	ldrb	r2, [r3, #3]
 8011032:	2101      	movs	r1, #1
 8011034:	9206      	str	r2, [sp, #24]
 8011036:	791a      	ldrb	r2, [r3, #4]
 8011038:	3306      	adds	r3, #6
 801103a:	9207      	str	r2, [sp, #28]
 801103c:	e78b      	b.n	8010f56 <_parse_response+0x6a>
 801103e:	bf00      	nop
 8011040:	2000a24c 	andcs	sl, r0, ip, asr #4
 8011044:	20009fa4 	andcs	r9, r0, r4, lsr #31
 8011048:	20009d74 	andcs	r9, r0, r4, ror sp
 801104c:	20009d7c 	andcs	r9, r0, ip, ror sp
 8011050:	20009d78 	andcs	r9, r0, r8, ror sp

08011054 <memcpy.isra.0>:
 8011054:	3801      	subs	r0, #1
 8011056:	440a      	add	r2, r1
 8011058:	4291      	cmp	r1, r2
 801105a:	d100      	bne.n	801105e <memcpy.isra.0+0xa>
 801105c:	4770      	bx	lr
 801105e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011062:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011066:	e7f7      	b.n	8011058 <memcpy.isra.0+0x4>

08011068 <dhcp_client>:
 8011068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	b087      	sub	sp, #28
 801106e:	9203      	str	r2, [sp, #12]
 8011070:	4a77      	ldr	r2, [pc, #476]	; (8011250 <dhcp_client+0x1e8>)
 8011072:	460f      	mov	r7, r1
 8011074:	4605      	mov	r5, r0
 8011076:	f44f 7309 	mov.w	r3, #548	; 0x224
 801107a:	4614      	mov	r4, r2
 801107c:	2100      	movs	r1, #0
 801107e:	3b01      	subs	r3, #1
 8011080:	f802 1b01 	strb.w	r1, [r2], #1
 8011084:	d1fb      	bne.n	801107e <dhcp_client+0x16>
 8011086:	f240 1301 	movw	r3, #257	; 0x101
 801108a:	2206      	movs	r2, #6
 801108c:	4629      	mov	r1, r5
 801108e:	4871      	ldr	r0, [pc, #452]	; (8011254 <dhcp_client+0x1ec>)
 8011090:	8023      	strh	r3, [r4, #0]
 8011092:	70a2      	strb	r2, [r4, #2]
 8011094:	f7ff ffde 	bl	8011054 <memcpy.isra.0>
 8011098:	4b6f      	ldr	r3, [pc, #444]	; (8011258 <dhcp_client+0x1f0>)
 801109a:	2044      	movs	r0, #68	; 0x44
 801109c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80110a0:	f240 1335 	movw	r3, #309	; 0x135
 80110a4:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 80110a8:	f7fe fc7e 	bl	800f9a8 <udp_bind>
 80110ac:	1e06      	subs	r6, r0, #0
 80110ae:	f2c0 80c9 	blt.w	8011244 <dhcp_client+0x1dc>
 80110b2:	f04f 0915 	mov.w	r9, #21
 80110b6:	f8df a198 	ldr.w	sl, [pc, #408]	; 8011250 <dhcp_client+0x1e8>
 80110ba:	f1b9 0901 	subs.w	r9, r9, #1
 80110be:	d11f      	bne.n	8011100 <dhcp_client+0x98>
 80110c0:	464c      	mov	r4, r9
 80110c2:	2044      	movs	r0, #68	; 0x44
 80110c4:	f7fe fc8a 	bl	800f9dc <udp_unbind>
 80110c8:	2c00      	cmp	r4, #0
 80110ca:	f000 80be 	beq.w	801124a <dhcp_client+0x1e2>
 80110ce:	2204      	movs	r2, #4
 80110d0:	4962      	ldr	r1, [pc, #392]	; (801125c <dhcp_client+0x1f4>)
 80110d2:	a805      	add	r0, sp, #20
 80110d4:	f7ff ffbe 	bl	8011054 <memcpy.isra.0>
 80110d8:	9b05      	ldr	r3, [sp, #20]
 80110da:	2204      	movs	r2, #4
 80110dc:	4960      	ldr	r1, [pc, #384]	; (8011260 <dhcp_client+0x1f8>)
 80110de:	603b      	str	r3, [r7, #0]
 80110e0:	a805      	add	r0, sp, #20
 80110e2:	f7ff ffb7 	bl	8011054 <memcpy.isra.0>
 80110e6:	9b05      	ldr	r3, [sp, #20]
 80110e8:	a805      	add	r0, sp, #20
 80110ea:	60bb      	str	r3, [r7, #8]
 80110ec:	2204      	movs	r2, #4
 80110ee:	495d      	ldr	r1, [pc, #372]	; (8011264 <dhcp_client+0x1fc>)
 80110f0:	f7ff ffb0 	bl	8011054 <memcpy.isra.0>
 80110f4:	2000      	movs	r0, #0
 80110f6:	9b05      	ldr	r3, [sp, #20]
 80110f8:	607b      	str	r3, [r7, #4]
 80110fa:	b007      	add	sp, #28
 80110fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011100:	f643 5301 	movw	r3, #15617	; 0x3d01
 8011104:	f240 1807 	movw	r8, #263	; 0x107
 8011108:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 801110c:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8011110:	782b      	ldrb	r3, [r5, #0]
 8011112:	4a55      	ldr	r2, [pc, #340]	; (8011268 <dhcp_client+0x200>)
 8011114:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8011118:	786b      	ldrb	r3, [r5, #1]
 801111a:	fa5f fb86 	uxtb.w	fp, r6
 801111e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8011122:	78ab      	ldrb	r3, [r5, #2]
 8011124:	4651      	mov	r1, sl
 8011126:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 801112a:	78eb      	ldrb	r3, [r5, #3]
 801112c:	4658      	mov	r0, fp
 801112e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8011132:	792b      	ldrb	r3, [r5, #4]
 8011134:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8011138:	796b      	ldrb	r3, [r5, #5]
 801113a:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 801113e:	4b4b      	ldr	r3, [pc, #300]	; (801126c <dhcp_client+0x204>)
 8011140:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8011144:	23ff      	movs	r3, #255	; 0xff
 8011146:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 801114a:	2343      	movs	r3, #67	; 0x43
 801114c:	f240 1205 	movw	r2, #261	; 0x105
 8011150:	9300      	str	r3, [sp, #0]
 8011152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011156:	f7fe fcbd 	bl	800fad4 <udp_send>
 801115a:	4629      	mov	r1, r5
 801115c:	4630      	mov	r0, r6
 801115e:	f7ff fec5 	bl	8010eec <_parse_response>
 8011162:	2802      	cmp	r0, #2
 8011164:	d1a9      	bne.n	80110ba <dhcp_client+0x52>
 8011166:	f643 5303 	movw	r3, #15619	; 0x3d03
 801116a:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 801116e:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8011172:	782b      	ldrb	r3, [r5, #0]
 8011174:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8011270 <dhcp_client+0x208>
 8011178:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 801117c:	786b      	ldrb	r3, [r5, #1]
 801117e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8011182:	78ab      	ldrb	r3, [r5, #2]
 8011184:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8011188:	78eb      	ldrb	r3, [r5, #3]
 801118a:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 801118e:	792b      	ldrb	r3, [r5, #4]
 8011190:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8011194:	796b      	ldrb	r3, [r5, #5]
 8011196:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 801119a:	f240 4332 	movw	r3, #1074	; 0x432
 801119e:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 80111a2:	4b2e      	ldr	r3, [pc, #184]	; (801125c <dhcp_client+0x1f4>)
 80111a4:	881a      	ldrh	r2, [r3, #0]
 80111a6:	885b      	ldrh	r3, [r3, #2]
 80111a8:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 80111ac:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 80111b0:	f240 4336 	movw	r3, #1078	; 0x436
 80111b4:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 80111b8:	4b2e      	ldr	r3, [pc, #184]	; (8011274 <dhcp_client+0x20c>)
 80111ba:	221e      	movs	r2, #30
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 80111c2:	230c      	movs	r3, #12
 80111c4:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 80111c8:	9b03      	ldr	r3, [sp, #12]
 80111ca:	1e58      	subs	r0, r3, #1
 80111cc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80111d0:	f1a2 0e1e 	sub.w	lr, r2, #30
 80111d4:	1c51      	adds	r1, r2, #1
 80111d6:	bb8b      	cbnz	r3, 801123c <dhcp_client+0x1d4>
 80111d8:	2037      	movs	r0, #55	; 0x37
 80111da:	18a3      	adds	r3, r4, r2
 80111dc:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 80111e0:	2006      	movs	r0, #6
 80111e2:	4421      	add	r1, r4
 80111e4:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 80111e8:	2103      	movs	r1, #3
 80111ea:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 80111ee:	210f      	movs	r1, #15
 80111f0:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 80111f4:	213a      	movs	r1, #58	; 0x3a
 80111f6:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 80111fa:	213b      	movs	r1, #59	; 0x3b
 80111fc:	f04f 0801 	mov.w	r8, #1
 8011200:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8011204:	21ff      	movs	r1, #255	; 0xff
 8011206:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 801120a:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 801120e:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8011212:	2343      	movs	r3, #67	; 0x43
 8011214:	32f5      	adds	r2, #245	; 0xf5
 8011216:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 801121a:	4651      	mov	r1, sl
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	b292      	uxth	r2, r2
 8011220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011224:	4658      	mov	r0, fp
 8011226:	f7fe fc55 	bl	800fad4 <udp_send>
 801122a:	4629      	mov	r1, r5
 801122c:	4630      	mov	r0, r6
 801122e:	f7ff fe5d 	bl	8010eec <_parse_response>
 8011232:	2805      	cmp	r0, #5
 8011234:	f47f af41 	bne.w	80110ba <dhcp_client+0x52>
 8011238:	4644      	mov	r4, r8
 801123a:	e742      	b.n	80110c2 <dhcp_client+0x5a>
 801123c:	460a      	mov	r2, r1
 801123e:	f80c 3f01 	strb.w	r3, [ip, #1]!
 8011242:	e7c3      	b.n	80111cc <dhcp_client+0x164>
 8011244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011248:	e757      	b.n	80110fa <dhcp_client+0x92>
 801124a:	f06f 0001 	mvn.w	r0, #1
 801124e:	e754      	b.n	80110fa <dhcp_client+0x92>
 8011250:	20009d80 	andcs	r9, r0, r0, lsl #27
 8011254:	20009d9c 	mulcs	r0, ip, sp
 8011258:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 801125c:	20009d78 	andcs	r9, r0, r8, ror sp
 8011260:	20009d74 	andcs	r9, r0, r4, ror sp
 8011264:	20009d7c 	andcs	r9, r0, ip, ror sp
 8011268:	03010637 	movweq	r0, #5687	; 0x1637
 801126c:	3b3a0f06 	blcc	8e94e8c <__exidx_end+0xe7d7a8>
 8011270:	20009e89 	andcs	r9, r0, r9, lsl #29
 8011274:	20009fa4 	andcs	r9, r0, r4, lsr #31

08011278 <dhcp_client_release>:
 8011278:	b507      	push	{r0, r1, r2, lr}
 801127a:	2044      	movs	r0, #68	; 0x44
 801127c:	f7fe fb94 	bl	800f9a8 <udp_bind>
 8011280:	f243 6307 	movw	r3, #13831	; 0x3607
 8011284:	4911      	ldr	r1, [pc, #68]	; (80112cc <dhcp_client_release+0x54>)
 8011286:	b2c0      	uxtb	r0, r0
 8011288:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 801128c:	2304      	movs	r3, #4
 801128e:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8011292:	4b0f      	ldr	r3, [pc, #60]	; (80112d0 <dhcp_client_release+0x58>)
 8011294:	781a      	ldrb	r2, [r3, #0]
 8011296:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 801129a:	785a      	ldrb	r2, [r3, #1]
 801129c:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 80112a0:	789a      	ldrb	r2, [r3, #2]
 80112a2:	78db      	ldrb	r3, [r3, #3]
 80112a4:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 80112a8:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 80112ac:	23ff      	movs	r3, #255	; 0xff
 80112ae:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 80112b2:	2343      	movs	r3, #67	; 0x43
 80112b4:	22fa      	movs	r2, #250	; 0xfa
 80112b6:	9300      	str	r3, [sp, #0]
 80112b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80112bc:	f7fe fc0a 	bl	800fad4 <udp_send>
 80112c0:	2044      	movs	r0, #68	; 0x44
 80112c2:	b003      	add	sp, #12
 80112c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80112c8:	f7fe bb88 	b.w	800f9dc <udp_unbind>
 80112cc:	20009d80 	andcs	r9, r0, r0, lsl #27
 80112d0:	20009fa4 	andcs	r9, r0, r4, lsr #31

080112d4 <memcpy.isra.0>:
 80112d4:	3801      	subs	r0, #1
 80112d6:	440a      	add	r2, r1
 80112d8:	4291      	cmp	r1, r2
 80112da:	d100      	bne.n	80112de <memcpy.isra.0+0xa>
 80112dc:	4770      	bx	lr
 80112de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112e2:	f800 3f01 	strb.w	r3, [r0, #1]!
 80112e6:	e7f7      	b.n	80112d8 <memcpy.isra.0+0x4>

080112e8 <_send_report>:
 80112e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80112ea:	491c      	ldr	r1, [pc, #112]	; (801135c <_send_report+0x74>)
 80112ec:	4c1c      	ldr	r4, [pc, #112]	; (8011360 <_send_report+0x78>)
 80112ee:	f3c0 2306 	ubfx	r3, r0, #8, #7
 80112f2:	9001      	str	r0, [sp, #4]
 80112f4:	70cb      	strb	r3, [r1, #3]
 80112f6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80112fa:	f3c0 6007 	ubfx	r0, r0, #24, #8
 80112fe:	710b      	strb	r3, [r1, #4]
 8011300:	7148      	strb	r0, [r1, #5]
 8011302:	2206      	movs	r2, #6
 8011304:	4620      	mov	r0, r4
 8011306:	f7ff ffe5 	bl	80112d4 <memcpy.isra.0>
 801130a:	2204      	movs	r2, #4
 801130c:	2700      	movs	r7, #0
 801130e:	4d15      	ldr	r5, [pc, #84]	; (8011364 <_send_report+0x7c>)
 8011310:	eb0d 0102 	add.w	r1, sp, r2
 8011314:	882b      	ldrh	r3, [r5, #0]
 8011316:	f104 001e 	add.w	r0, r4, #30
 801131a:	f104 060e 	add.w	r6, r4, #14
 801131e:	8263      	strh	r3, [r4, #18]
 8011320:	f7ff ffd8 	bl	80112d4 <memcpy.isra.0>
 8011324:	2118      	movs	r1, #24
 8011326:	4630      	mov	r0, r6
 8011328:	8327      	strh	r7, [r4, #24]
 801132a:	f000 f8c6 	bl	80114ba <net_chksum>
 801132e:	2204      	movs	r2, #4
 8011330:	8320      	strh	r0, [r4, #24]
 8011332:	eb0d 0102 	add.w	r1, sp, r2
 8011336:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801133a:	f7ff ffcb 	bl	80112d4 <memcpy.isra.0>
 801133e:	2120      	movs	r1, #32
 8011340:	4630      	mov	r0, r6
 8011342:	8527      	strh	r7, [r4, #40]	; 0x28
 8011344:	f000 f8b9 	bl	80114ba <net_chksum>
 8011348:	212e      	movs	r1, #46	; 0x2e
 801134a:	8520      	strh	r0, [r4, #40]	; 0x28
 801134c:	4620      	mov	r0, r4
 801134e:	f002 fdd3 	bl	8013ef8 <emac_eth_send>
 8011352:	882b      	ldrh	r3, [r5, #0]
 8011354:	3301      	adds	r3, #1
 8011356:	802b      	strh	r3, [r5, #0]
 8011358:	b003      	add	sp, #12
 801135a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801135c:	2000a100 	andcs	sl, r0, r0, lsl #2
 8011360:	2000a108 	andcs	sl, r0, r8, lsl #2
 8011364:	2000a0c8 	andcs	sl, r0, r8, asr #1

08011368 <igmp_set_ip>:
 8011368:	b507      	push	{r0, r1, r2, lr}
 801136a:	2204      	movs	r2, #4
 801136c:	6803      	ldr	r3, [r0, #0]
 801136e:	eb0d 0102 	add.w	r1, sp, r2
 8011372:	4806      	ldr	r0, [pc, #24]	; (801138c <igmp_set_ip+0x24>)
 8011374:	9301      	str	r3, [sp, #4]
 8011376:	f7ff ffad 	bl	80112d4 <memcpy.isra.0>
 801137a:	2204      	movs	r2, #4
 801137c:	4804      	ldr	r0, [pc, #16]	; (8011390 <igmp_set_ip+0x28>)
 801137e:	eb0d 0102 	add.w	r1, sp, r2
 8011382:	f7ff ffa7 	bl	80112d4 <memcpy.isra.0>
 8011386:	b003      	add	sp, #12
 8011388:	f85d fb04 	ldr.w	pc, [sp], #4
 801138c:	2000a122 	andcs	sl, r0, r2, lsr #2
 8011390:	2000a0ea 	andcs	sl, r0, sl, ror #1

08011394 <igmp_timer>:
 8011394:	b570      	push	{r4, r5, r6, lr}
 8011396:	2500      	movs	r5, #0
 8011398:	2602      	movs	r6, #2
 801139a:	4c0a      	ldr	r4, [pc, #40]	; (80113c4 <igmp_timer+0x30>)
 801139c:	7963      	ldrb	r3, [r4, #5]
 801139e:	2b01      	cmp	r3, #1
 80113a0:	d109      	bne.n	80113b6 <igmp_timer+0x22>
 80113a2:	7923      	ldrb	r3, [r4, #4]
 80113a4:	b13b      	cbz	r3, 80113b6 <igmp_timer+0x22>
 80113a6:	3b01      	subs	r3, #1
 80113a8:	b2db      	uxtb	r3, r3
 80113aa:	7123      	strb	r3, [r4, #4]
 80113ac:	b91b      	cbnz	r3, 80113b6 <igmp_timer+0x22>
 80113ae:	6820      	ldr	r0, [r4, #0]
 80113b0:	f7ff ff9a 	bl	80112e8 <_send_report>
 80113b4:	7166      	strb	r6, [r4, #5]
 80113b6:	3501      	adds	r5, #1
 80113b8:	2d24      	cmp	r5, #36	; 0x24
 80113ba:	f104 0408 	add.w	r4, r4, #8
 80113be:	d1ed      	bne.n	801139c <igmp_timer+0x8>
 80113c0:	bd70      	pop	{r4, r5, r6, pc}
 80113c2:	bf00      	nop
 80113c4:	20009fa8 	andcs	r9, r0, r8, lsr #31

080113c8 <igmp_join>:
 80113c8:	b538      	push	{r3, r4, r5, lr}
 80113ca:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 80113ce:	2be0      	cmp	r3, #224	; 0xe0
 80113d0:	d11b      	bne.n	801140a <igmp_join+0x42>
 80113d2:	4911      	ldr	r1, [pc, #68]	; (8011418 <igmp_join+0x50>)
 80113d4:	680c      	ldr	r4, [r1, #0]
 80113d6:	2c24      	cmp	r4, #36	; 0x24
 80113d8:	d01a      	beq.n	8011410 <igmp_join+0x48>
 80113da:	2300      	movs	r3, #0
 80113dc:	4a0f      	ldr	r2, [pc, #60]	; (801141c <igmp_join+0x54>)
 80113de:	429c      	cmp	r4, r3
 80113e0:	dc0d      	bgt.n	80113fe <igmp_join+0x36>
 80113e2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80113e6:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 80113ea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80113ee:	8093      	strh	r3, [r2, #4]
 80113f0:	1c63      	adds	r3, r4, #1
 80113f2:	600b      	str	r3, [r1, #0]
 80113f4:	f7ff ff78 	bl	80112e8 <_send_report>
 80113f8:	4623      	mov	r3, r4
 80113fa:	4618      	mov	r0, r3
 80113fc:	bd38      	pop	{r3, r4, r5, pc}
 80113fe:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8011402:	4285      	cmp	r5, r0
 8011404:	d0f9      	beq.n	80113fa <igmp_join+0x32>
 8011406:	3301      	adds	r3, #1
 8011408:	e7e9      	b.n	80113de <igmp_join+0x16>
 801140a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801140e:	e7f4      	b.n	80113fa <igmp_join+0x32>
 8011410:	f06f 0301 	mvn.w	r3, #1
 8011414:	e7f1      	b.n	80113fa <igmp_join+0x32>
 8011416:	bf00      	nop
 8011418:	2000a0cc 	andcs	sl, r0, ip, asr #1
 801141c:	20009fa8 	andcs	r9, r0, r8, lsr #31

08011420 <igmp_leave>:
 8011420:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011424:	2600      	movs	r6, #0
 8011426:	4f1c      	ldr	r7, [pc, #112]	; (8011498 <igmp_leave+0x78>)
 8011428:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 801142c:	4283      	cmp	r3, r0
 801142e:	d007      	beq.n	8011440 <igmp_leave+0x20>
 8011430:	3601      	adds	r6, #1
 8011432:	2e24      	cmp	r6, #36	; 0x24
 8011434:	d1f8      	bne.n	8011428 <igmp_leave+0x8>
 8011436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801143a:	b002      	add	sp, #8
 801143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011440:	2400      	movs	r4, #0
 8011442:	f8df 8058 	ldr.w	r8, [pc, #88]	; 801149c <igmp_leave+0x7c>
 8011446:	4d16      	ldr	r5, [pc, #88]	; (80114a0 <igmp_leave+0x80>)
 8011448:	f8b8 3000 	ldrh.w	r3, [r8]
 801144c:	2118      	movs	r1, #24
 801144e:	9001      	str	r0, [sp, #4]
 8011450:	4814      	ldr	r0, [pc, #80]	; (80114a4 <igmp_leave+0x84>)
 8011452:	826b      	strh	r3, [r5, #18]
 8011454:	832c      	strh	r4, [r5, #24]
 8011456:	f000 f830 	bl	80114ba <net_chksum>
 801145a:	2204      	movs	r2, #4
 801145c:	8328      	strh	r0, [r5, #24]
 801145e:	eb0d 0102 	add.w	r1, sp, r2
 8011462:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8011466:	f7ff ff35 	bl	80112d4 <memcpy.isra.0>
 801146a:	2120      	movs	r1, #32
 801146c:	f105 000e 	add.w	r0, r5, #14
 8011470:	852c      	strh	r4, [r5, #40]	; 0x28
 8011472:	f000 f822 	bl	80114ba <net_chksum>
 8011476:	212e      	movs	r1, #46	; 0x2e
 8011478:	8528      	strh	r0, [r5, #40]	; 0x28
 801147a:	4628      	mov	r0, r5
 801147c:	f002 fd3c 	bl	8013ef8 <emac_eth_send>
 8011480:	f8b8 3000 	ldrh.w	r3, [r8]
 8011484:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8011488:	3301      	adds	r3, #1
 801148a:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 801148e:	4620      	mov	r0, r4
 8011490:	f8a8 3000 	strh.w	r3, [r8]
 8011494:	80bc      	strh	r4, [r7, #4]
 8011496:	e7d0      	b.n	801143a <igmp_leave+0x1a>
 8011498:	20009fa8 	andcs	r9, r0, r8, lsr #31
 801149c:	2000a0c8 	andcs	sl, r0, r8, asr #1
 80114a0:	2000a0d0 	ldrdcs	sl, [r0], -r0
 80114a4:	2000a116 	andcs	sl, r0, r6, lsl r1

080114a8 <ip_set_ip>:
 80114a8:	b510      	push	{r4, lr}
 80114aa:	4604      	mov	r4, r0
 80114ac:	f7fe fa5c 	bl	800f968 <udp_set_ip>
 80114b0:	4620      	mov	r0, r4
 80114b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114b6:	f7ff bf57 	b.w	8011368 <igmp_set_ip>

080114ba <net_chksum>:
 80114ba:	2300      	movs	r3, #0
 80114bc:	f021 0201 	bic.w	r2, r1, #1
 80114c0:	b530      	push	{r4, r5, lr}
 80114c2:	1884      	adds	r4, r0, r2
 80114c4:	42a0      	cmp	r0, r4
 80114c6:	d10b      	bne.n	80114e0 <net_chksum+0x26>
 80114c8:	4291      	cmp	r1, r2
 80114ca:	d004      	beq.n	80114d6 <net_chksum+0x1c>
 80114cc:	7802      	ldrb	r2, [r0, #0]
 80114ce:	0212      	lsls	r2, r2, #8
 80114d0:	ba52      	rev16	r2, r2
 80114d2:	b292      	uxth	r2, r2
 80114d4:	4413      	add	r3, r2
 80114d6:	0c1a      	lsrs	r2, r3, #16
 80114d8:	d106      	bne.n	80114e8 <net_chksum+0x2e>
 80114da:	43d8      	mvns	r0, r3
 80114dc:	b280      	uxth	r0, r0
 80114de:	bd30      	pop	{r4, r5, pc}
 80114e0:	f830 5b02 	ldrh.w	r5, [r0], #2
 80114e4:	442b      	add	r3, r5
 80114e6:	e7ed      	b.n	80114c4 <net_chksum+0xa>
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	e7f3      	b.n	80114d4 <net_chksum+0x1a>

080114ec <memcpy.isra.0>:
 80114ec:	3801      	subs	r0, #1
 80114ee:	440a      	add	r2, r1
 80114f0:	4291      	cmp	r1, r2
 80114f2:	d100      	bne.n	80114f6 <memcpy.isra.0+0xa>
 80114f4:	4770      	bx	lr
 80114f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114fa:	f800 3f01 	strb.w	r3, [r0, #1]!
 80114fe:	e7f7      	b.n	80114f0 <memcpy.isra.0+0x4>

08011500 <Display::Write(unsigned char, char const*) [clone .isra.0]>:
 8011500:	b430      	push	{r4, r5}
 8011502:	b168      	cbz	r0, 8011520 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x20>
 8011504:	2300      	movs	r3, #0
 8011506:	7905      	ldrb	r5, [r0, #4]
 8011508:	5cd4      	ldrb	r4, [r2, r3]
 801150a:	b11c      	cbz	r4, 8011514 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x14>
 801150c:	1c5c      	adds	r4, r3, #1
 801150e:	429d      	cmp	r5, r3
 8011510:	4623      	mov	r3, r4
 8011512:	dcf9      	bgt.n	8011508 <Display::Write(unsigned char, char const*) [clone .isra.0]+0x8>
 8011514:	6804      	ldr	r4, [r0, #0]
 8011516:	b2db      	uxtb	r3, r3
 8011518:	69e4      	ldr	r4, [r4, #28]
 801151a:	46a4      	mov	ip, r4
 801151c:	bc30      	pop	{r4, r5}
 801151e:	4760      	bx	ip
 8011520:	bc30      	pop	{r4, r5}
 8011522:	4770      	bx	lr

08011524 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8011524:	b110      	cbz	r0, 801152c <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8011526:	6803      	ldr	r3, [r0, #0]
 8011528:	691b      	ldr	r3, [r3, #16]
 801152a:	4718      	bx	r3
 801152c:	4770      	bx	lr

0801152e <Display::Printf(unsigned char, char const*, ...)>:
 801152e:	b40c      	push	{r2, r3}
 8011530:	b570      	push	{r4, r5, r6, lr}
 8011532:	6984      	ldr	r4, [r0, #24]
 8011534:	4605      	mov	r5, r0
 8011536:	460e      	mov	r6, r1
 8011538:	b08a      	sub	sp, #40	; 0x28
 801153a:	b174      	cbz	r4, 801155a <Display::Printf(unsigned char, char const*, ...)+0x2c>
 801153c:	ab0f      	add	r3, sp, #60	; 0x3c
 801153e:	2120      	movs	r1, #32
 8011540:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011542:	a802      	add	r0, sp, #8
 8011544:	9301      	str	r3, [sp, #4]
 8011546:	f001 fe01 	bl	801314c <vsnprintf>
 801154a:	4604      	mov	r4, r0
 801154c:	69a8      	ldr	r0, [r5, #24]
 801154e:	4631      	mov	r1, r6
 8011550:	6803      	ldr	r3, [r0, #0]
 8011552:	aa02      	add	r2, sp, #8
 8011554:	69dd      	ldr	r5, [r3, #28]
 8011556:	b2a3      	uxth	r3, r4
 8011558:	47a8      	blx	r5
 801155a:	4620      	mov	r0, r4
 801155c:	b00a      	add	sp, #40	; 0x28
 801155e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011562:	b002      	add	sp, #8
 8011564:	4770      	bx	lr
	...

08011568 <DisplayUdf::DisplayUdf()>:
 8011568:	b510      	push	{r4, lr}
 801156a:	4604      	mov	r4, r0
 801156c:	f000 ff02 	bl	8012374 <Display::Display()>
 8011570:	2202      	movs	r2, #2
 8011572:	2300      	movs	r3, #0
 8011574:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
 8011578:	4b05      	ldr	r3, [pc, #20]	; (8011590 <DisplayUdf::DisplayUdf()+0x28>)
 801157a:	f104 023b 	add.w	r2, r4, #59	; 0x3b
 801157e:	601c      	str	r4, [r3, #0]
 8011580:	2301      	movs	r3, #1
 8011582:	f802 3f01 	strb.w	r3, [r2, #1]!
 8011586:	3301      	adds	r3, #1
 8011588:	2b15      	cmp	r3, #21
 801158a:	d1fa      	bne.n	8011582 <DisplayUdf::DisplayUdf()+0x1a>
 801158c:	4620      	mov	r0, r4
 801158e:	bd10      	pop	{r4, pc}
 8011590:	2000a138 	andcs	sl, r0, r8, lsr r1

08011594 <DisplayUdf::SetTitle(char const*, ...)>:
 8011594:	b40e      	push	{r1, r2, r3}
 8011596:	b517      	push	{r0, r1, r2, r4, lr}
 8011598:	ab05      	add	r3, sp, #20
 801159a:	f853 2b04 	ldr.w	r2, [r3], #4
 801159e:	4604      	mov	r4, r0
 80115a0:	211f      	movs	r1, #31
 80115a2:	301c      	adds	r0, #28
 80115a4:	9301      	str	r3, [sp, #4]
 80115a6:	f001 fdd1 	bl	801314c <vsnprintf>
 80115aa:	2300      	movs	r3, #0
 80115ac:	4404      	add	r4, r0
 80115ae:	7723      	strb	r3, [r4, #28]
 80115b0:	b003      	add	sp, #12
 80115b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115b6:	b003      	add	sp, #12
 80115b8:	4770      	bx	lr

080115ba <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 80115ba:	1e4b      	subs	r3, r1, #1
 80115bc:	2b05      	cmp	r3, #5
 80115be:	b530      	push	{r4, r5, lr}
 80115c0:	d80f      	bhi.n	80115e2 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 80115c2:	2300      	movs	r3, #0
 80115c4:	f100 043b 	add.w	r4, r0, #59	; 0x3b
 80115c8:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80115cc:	428d      	cmp	r5, r1
 80115ce:	d109      	bne.n	80115e4 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 80115d0:	1884      	adds	r4, r0, r2
 80115d2:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 80115d6:	4403      	add	r3, r0
 80115d8:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
 80115dc:	4410      	add	r0, r2
 80115de:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
 80115e2:	bd30      	pop	{r4, r5, pc}
 80115e4:	3301      	adds	r3, #1
 80115e6:	2b14      	cmp	r3, #20
 80115e8:	d1ee      	bne.n	80115c8 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 80115ea:	e7f7      	b.n	80115dc <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>

080115ec <DisplayUdf::ShowEmacStart()>:
 80115ec:	b510      	push	{r4, lr}
 80115ee:	4604      	mov	r4, r0
 80115f0:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 80115f4:	6980      	ldr	r0, [r0, #24]
 80115f6:	f7ff ff95 	bl	8011524 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80115fa:	4620      	mov	r0, r4
 80115fc:	4a02      	ldr	r2, [pc, #8]	; (8011608 <DisplayUdf::ShowEmacStart()+0x1c>)
 80115fe:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 8011602:	f7ff ff94 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 8011606:	bd10      	pop	{r4, pc}
 8011608:	08016fe5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, r9, sl, fp, sp, lr}

0801160c <DisplayUdf::ShowIpAddress()>:
 801160c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011610:	4604      	mov	r4, r0
 8011612:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8011616:	b086      	sub	sp, #24
 8011618:	6980      	ldr	r0, [r0, #24]
 801161a:	f7ff ff83 	bl	8011524 <Display::ClearLine(unsigned char) [clone .isra.0]>
 801161e:	4b13      	ldr	r3, [pc, #76]	; (801166c <DisplayUdf::ShowIpAddress()+0x60>)
 8011620:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
 8011624:	681d      	ldr	r5, [r3, #0]
 8011626:	69e8      	ldr	r0, [r5, #28]
 8011628:	696e      	ldr	r6, [r5, #20]
 801162a:	f003 fd2f 	bl	801508c <__popcountsi2>
 801162e:	79eb      	ldrb	r3, [r5, #7]
 8011630:	fa5f f886 	uxtb.w	r8, r6
 8011634:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8011638:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 801163c:	0e36      	lsrs	r6, r6, #24
 801163e:	b99b      	cbnz	r3, 8011668 <DisplayUdf::ShowIpAddress()+0x5c>
 8011640:	796b      	ldrb	r3, [r5, #5]
 8011642:	2b00      	cmp	r3, #0
 8011644:	bf14      	ite	ne
 8011646:	2244      	movne	r2, #68	; 0x44
 8011648:	2253      	moveq	r2, #83	; 0x53
 801164a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801164e:	4643      	mov	r3, r8
 8011650:	4639      	mov	r1, r7
 8011652:	4620      	mov	r0, r4
 8011654:	e9cd a601 	strd	sl, r6, [sp, #4]
 8011658:	4a05      	ldr	r2, [pc, #20]	; (8011670 <DisplayUdf::ShowIpAddress()+0x64>)
 801165a:	f8cd 9000 	str.w	r9, [sp]
 801165e:	f7ff ff66 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 8011662:	b006      	add	sp, #24
 8011664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011668:	225a      	movs	r2, #90	; 0x5a
 801166a:	e7ee      	b.n	801164a <DisplayUdf::ShowIpAddress()+0x3e>
 801166c:	20009b68 	andcs	r9, r0, r8, ror #22
 8011670:	08016ff4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}

08011674 <DisplayUdf::ShowNetmask()>:
 8011674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011676:	4604      	mov	r4, r0
 8011678:	4b0b      	ldr	r3, [pc, #44]	; (80116a8 <DisplayUdf::ShowNetmask()+0x34>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	69db      	ldr	r3, [r3, #28]
 801167e:	0e1a      	lsrs	r2, r3, #24
 8011680:	9202      	str	r2, [sp, #8]
 8011682:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011686:	9201      	str	r2, [sp, #4]
 8011688:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801168c:	9200      	str	r2, [sp, #0]
 801168e:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8011692:	4a06      	ldr	r2, [pc, #24]	; (80116ac <DisplayUdf::ShowNetmask()+0x38>)
 8011694:	b2db      	uxtb	r3, r3
 8011696:	f7ff ff4a 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 801169a:	4620      	mov	r0, r4
 801169c:	b004      	add	sp, #16
 801169e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116a2:	f7ff bfb3 	b.w	801160c <DisplayUdf::ShowIpAddress()>
 80116a6:	bf00      	nop
 80116a8:	20009b68 	andcs	r9, r0, r8, ror #22
 80116ac:	08017006 	stmdaeq	r1, {r1, r2, ip, sp, lr}

080116b0 <DisplayUdf::ShowGatewayIp()>:
 80116b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116b2:	4604      	mov	r4, r0
 80116b4:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 80116b8:	6980      	ldr	r0, [r0, #24]
 80116ba:	f7ff ff33 	bl	8011524 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80116be:	4b0a      	ldr	r3, [pc, #40]	; (80116e8 <DisplayUdf::ShowGatewayIp()+0x38>)
 80116c0:	4620      	mov	r0, r4
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f894 104e 	ldrb.w	r1, [r4, #78]	; 0x4e
 80116c8:	699b      	ldr	r3, [r3, #24]
 80116ca:	0e1a      	lsrs	r2, r3, #24
 80116cc:	9202      	str	r2, [sp, #8]
 80116ce:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80116d2:	9201      	str	r2, [sp, #4]
 80116d4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80116d8:	9200      	str	r2, [sp, #0]
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	4a03      	ldr	r2, [pc, #12]	; (80116ec <DisplayUdf::ShowGatewayIp()+0x3c>)
 80116de:	f7ff ff26 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 80116e2:	b004      	add	sp, #16
 80116e4:	bd10      	pop	{r4, pc}
 80116e6:	bf00      	nop
 80116e8:	20009b68 	andcs	r9, r0, r8, ror #22
 80116ec:	08017015 	stmdaeq	r1, {r0, r2, r4, ip, sp, lr}

080116f0 <DisplayUdf::ShowHostName()>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	4604      	mov	r4, r0
 80116f4:	f890 1043 	ldrb.w	r1, [r0, #67]	; 0x43
 80116f8:	6980      	ldr	r0, [r0, #24]
 80116fa:	f7ff ff13 	bl	8011524 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80116fe:	4b05      	ldr	r3, [pc, #20]	; (8011714 <DisplayUdf::ShowHostName()+0x24>)
 8011700:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8011704:	681a      	ldr	r2, [r3, #0]
 8011706:	69a0      	ldr	r0, [r4, #24]
 8011708:	3220      	adds	r2, #32
 801170a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801170e:	f7ff bef7 	b.w	8011500 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8011712:	bf00      	nop
 8011714:	20009b68 	andcs	r9, r0, r8, ror #22

08011718 <DisplayUdf::Show()>:
 8011718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801171a:	4604      	mov	r4, r0
 801171c:	21ff      	movs	r1, #255	; 0xff
 801171e:	f100 033b 	add.w	r3, r0, #59	; 0x3b
 8011722:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 8011726:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 801172a:	2806      	cmp	r0, #6
 801172c:	bf88      	it	hi
 801172e:	7019      	strbhi	r1, [r3, #0]
 8011730:	429a      	cmp	r2, r3
 8011732:	d1f8      	bne.n	8011726 <DisplayUdf::Show()+0xe>
 8011734:	2501      	movs	r5, #1
 8011736:	4629      	mov	r1, r5
 8011738:	3501      	adds	r5, #1
 801173a:	69a0      	ldr	r0, [r4, #24]
 801173c:	b2ed      	uxtb	r5, r5
 801173e:	f7ff fef1 	bl	8011524 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011742:	2d06      	cmp	r5, #6
 8011744:	d1f7      	bne.n	8011736 <DisplayUdf::Show()+0x1e>
 8011746:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 801174a:	69a0      	ldr	r0, [r4, #24]
 801174c:	f104 021c 	add.w	r2, r4, #28
 8011750:	f7ff fed6 	bl	8011500 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8011754:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8011758:	69a0      	ldr	r0, [r4, #24]
 801175a:	4a0d      	ldr	r2, [pc, #52]	; (8011790 <DisplayUdf::Show()+0x78>)
 801175c:	f7ff fed0 	bl	8011500 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 8011760:	4b0c      	ldr	r3, [pc, #48]	; (8011794 <DisplayUdf::Show()+0x7c>)
 8011762:	4a0d      	ldr	r2, [pc, #52]	; (8011798 <DisplayUdf::Show()+0x80>)
 8011764:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8011768:	9300      	str	r3, [sp, #0]
 801176a:	4620      	mov	r0, r4
 801176c:	2303      	movs	r3, #3
 801176e:	f7ff fede 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 8011772:	4620      	mov	r0, r4
 8011774:	f7ff ff4a 	bl	801160c <DisplayUdf::ShowIpAddress()>
 8011778:	4620      	mov	r0, r4
 801177a:	f7ff ff99 	bl	80116b0 <DisplayUdf::ShowGatewayIp()>
 801177e:	4620      	mov	r0, r4
 8011780:	f7ff ff78 	bl	8011674 <DisplayUdf::ShowNetmask()>
 8011784:	4620      	mov	r0, r4
 8011786:	b003      	add	sp, #12
 8011788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801178c:	f7ff bfb0 	b.w	80116f0 <DisplayUdf::ShowHostName()>
 8011790:	08015b3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, fp, ip, lr}
 8011794:	2000a1d0 	ldrdcs	sl, [r0], -r0
 8011798:	08017024 	stmdaeq	r1, {r2, r5, ip, sp, lr}

0801179c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 801179c:	3901      	subs	r1, #1
 801179e:	b510      	push	{r4, lr}
 80117a0:	4604      	mov	r4, r0
 80117a2:	2903      	cmp	r1, #3
 80117a4:	d814      	bhi.n	80117d0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 80117a6:	e8df f001 	tbb	[pc, r1]
 80117aa:	281b1402 	ldmdacs	fp, {r1, sl, ip}
 80117ae:	4b14      	ldr	r3, [pc, #80]	; (8011800 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80117b0:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 80117b4:	6818      	ldr	r0, [r3, #0]
 80117b6:	f7f6 ff43 	bl	8008640 <Display::Status(Display7SegmentMessage)>
 80117ba:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80117be:	69a0      	ldr	r0, [r4, #24]
 80117c0:	f7ff feb0 	bl	8011524 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80117c4:	4a0f      	ldr	r2, [pc, #60]	; (8011804 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>)
 80117c6:	4620      	mov	r0, r4
 80117c8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80117cc:	f7ff feaf 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 80117d0:	bd10      	pop	{r4, pc}
 80117d2:	f248 0180 	movw	r1, #32896	; 0x8080
 80117d6:	4b0a      	ldr	r3, [pc, #40]	; (8011800 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80117d8:	6818      	ldr	r0, [r3, #0]
 80117da:	f7f6 ff31 	bl	8008640 <Display::Status(Display7SegmentMessage)>
 80117de:	e7f7      	b.n	80117d0 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x34>
 80117e0:	4b07      	ldr	r3, [pc, #28]	; (8011800 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x64>)
 80117e2:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 80117e6:	6818      	ldr	r0, [r3, #0]
 80117e8:	f7f6 ff2a 	bl	8008640 <Display::Status(Display7SegmentMessage)>
 80117ec:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80117f0:	69a0      	ldr	r0, [r4, #24]
 80117f2:	f7ff fe97 	bl	8011524 <Display::ClearLine(unsigned char) [clone .isra.0]>
 80117f6:	4a04      	ldr	r2, [pc, #16]	; (8011808 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 80117f8:	e7e5      	b.n	80117c6 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 80117fa:	f645 3179 	movw	r1, #23417	; 0x5b79
 80117fe:	e7ea      	b.n	80117d6 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3a>
 8011800:	2000a140 	andcs	sl, r0, r0, asr #2
 8011804:	08017033 	stmdaeq	r1, {r0, r1, r4, r5, ip, sp, lr}
 8011808:	08017041 	stmdaeq	r1, {r0, r6, ip, sp, lr}

0801180c <DisplayUdf::ShowShutdown()>:
 801180c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011810:	4604      	mov	r4, r0
 8011812:	6980      	ldr	r0, [r0, #24]
 8011814:	b1d0      	cbz	r0, 801184c <DisplayUdf::ShowShutdown()+0x40>
 8011816:	f890 8005 	ldrb.w	r8, [r0, #5]
 801181a:	6803      	ldr	r3, [r0, #0]
 801181c:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 8011820:	b2ed      	uxtb	r5, r5
 8011822:	462a      	mov	r2, r5
 8011824:	2100      	movs	r1, #0
 8011826:	6a1b      	ldr	r3, [r3, #32]
 8011828:	7906      	ldrb	r6, [r0, #4]
 801182a:	2700      	movs	r7, #0
 801182c:	4798      	blx	r3
 801182e:	3e01      	subs	r6, #1
 8011830:	42b7      	cmp	r7, r6
 8011832:	69a0      	ldr	r0, [r4, #24]
 8011834:	d311      	bcc.n	801185a <DisplayUdf::ShowShutdown()+0x4e>
 8011836:	b120      	cbz	r0, 8011842 <DisplayUdf::ShowShutdown()+0x36>
 8011838:	6803      	ldr	r3, [r0, #0]
 801183a:	462a      	mov	r2, r5
 801183c:	2100      	movs	r1, #0
 801183e:	6a1b      	ldr	r3, [r3, #32]
 8011840:	4798      	blx	r3
 8011842:	4641      	mov	r1, r8
 8011844:	4a08      	ldr	r2, [pc, #32]	; (8011868 <DisplayUdf::ShowShutdown()+0x5c>)
 8011846:	69a0      	ldr	r0, [r4, #24]
 8011848:	f7ff fe5a 	bl	8011500 <Display::Write(unsigned char, char const*) [clone .isra.0]>
 801184c:	f44f 41de 	mov.w	r1, #28416	; 0x6f00
 8011850:	4620      	mov	r0, r4
 8011852:	f7f6 fef5 	bl	8008640 <Display::Status(Display7SegmentMessage)>
 8011856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801185a:	b118      	cbz	r0, 8011864 <DisplayUdf::ShowShutdown()+0x58>
 801185c:	6803      	ldr	r3, [r0, #0]
 801185e:	2120      	movs	r1, #32
 8011860:	695b      	ldr	r3, [r3, #20]
 8011862:	4798      	blx	r3
 8011864:	3701      	adds	r7, #1
 8011866:	e7e3      	b.n	8011830 <DisplayUdf::ShowShutdown()+0x24>
 8011868:	0801704f 	stmdaeq	r1, {r0, r1, r2, r3, r6, ip, sp, lr}

0801186c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 801186c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801186e:	88c6      	ldrh	r6, [r0, #6]
 8011870:	8885      	ldrh	r5, [r0, #4]
 8011872:	42ae      	cmp	r6, r5
 8011874:	d216      	bcs.n	80118a4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8011876:	4604      	mov	r4, r0
 8011878:	6800      	ldr	r0, [r0, #0]
 801187a:	1bad      	subs	r5, r5, r6
 801187c:	4430      	add	r0, r6
 801187e:	7a26      	ldrb	r6, [r4, #8]
 8011880:	b923      	cbnz	r3, 801188c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8011882:	b926      	cbnz	r6, 801188e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8011884:	9200      	str	r2, [sp, #0]
 8011886:	460b      	mov	r3, r1
 8011888:	4a09      	ldr	r2, [pc, #36]	; (80118b0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 801188a:	e003      	b.n	8011894 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 801188c:	b166      	cbz	r6, 80118a8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 801188e:	460b      	mov	r3, r1
 8011890:	9200      	str	r2, [sp, #0]
 8011892:	4a08      	ldr	r2, [pc, #32]	; (80118b4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8011894:	4629      	mov	r1, r5
 8011896:	f001 fc41 	bl	801311c <snprintf>
 801189a:	4285      	cmp	r5, r0
 801189c:	bfa2      	ittt	ge
 801189e:	88e3      	ldrhge	r3, [r4, #6]
 80118a0:	181b      	addge	r3, r3, r0
 80118a2:	80e3      	strhge	r3, [r4, #6]
 80118a4:	b002      	add	sp, #8
 80118a6:	bd70      	pop	{r4, r5, r6, pc}
 80118a8:	9200      	str	r2, [sp, #0]
 80118aa:	460b      	mov	r3, r1
 80118ac:	4a02      	ldr	r2, [pc, #8]	; (80118b8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 80118ae:	e7f1      	b.n	8011894 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 80118b0:	080157c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip, lr}
 80118b4:	080157b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
 80118b8:	080157c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, ip, lr}

080118bc <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 80118bc:	b510      	push	{r4, lr}
 80118be:	2220      	movs	r2, #32
 80118c0:	4604      	mov	r4, r0
 80118c2:	f840 1b04 	str.w	r1, [r0], #4
 80118c6:	2100      	movs	r1, #0
 80118c8:	f001 f9e6 	bl	8012c98 <memset>
 80118cc:	f647 7305 	movw	r3, #32517	; 0x7f05
 80118d0:	4620      	mov	r0, r4
 80118d2:	84a3      	strh	r3, [r4, #36]	; 0x24
 80118d4:	bd10      	pop	{r4, pc}

080118d6 <DisplayUdfParams::Load()>:
 80118d6:	b508      	push	{r3, lr}
 80118d8:	2300      	movs	r3, #0
 80118da:	4601      	mov	r1, r0
 80118dc:	6043      	str	r3, [r0, #4]
 80118de:	6800      	ldr	r0, [r0, #0]
 80118e0:	b120      	cbz	r0, 80118ec <DisplayUdfParams::Load()+0x16>
 80118e2:	6803      	ldr	r3, [r0, #0]
 80118e4:	3104      	adds	r1, #4
 80118e6:	68db      	ldr	r3, [r3, #12]
 80118e8:	4798      	blx	r3
 80118ea:	2001      	movs	r0, #1
 80118ec:	bd08      	pop	{r3, pc}
	...

080118f0 <DisplayUdfParams::Load(char const*, unsigned int)>:
 80118f0:	6803      	ldr	r3, [r0, #0]
 80118f2:	b1d3      	cbz	r3, 801192a <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 80118f4:	2300      	movs	r3, #0
 80118f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80118f8:	460d      	mov	r5, r1
 80118fa:	4616      	mov	r6, r2
 80118fc:	4604      	mov	r4, r0
 80118fe:	6043      	str	r3, [r0, #4]
 8011900:	4602      	mov	r2, r0
 8011902:	490a      	ldr	r1, [pc, #40]	; (801192c <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8011904:	4668      	mov	r0, sp
 8011906:	f000 fbc5 	bl	8012094 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 801190a:	4632      	mov	r2, r6
 801190c:	4629      	mov	r1, r5
 801190e:	4668      	mov	r0, sp
 8011910:	f000 fbc4 	bl	801209c <ReadConfigFile::Read(char const*, unsigned int)>
 8011914:	4621      	mov	r1, r4
 8011916:	f851 0b04 	ldr.w	r0, [r1], #4
 801191a:	6803      	ldr	r3, [r0, #0]
 801191c:	689b      	ldr	r3, [r3, #8]
 801191e:	4798      	blx	r3
 8011920:	4668      	mov	r0, sp
 8011922:	f000 fbba 	bl	801209a <ReadConfigFile::~ReadConfigFile()>
 8011926:	b002      	add	sp, #8
 8011928:	bd70      	pop	{r4, r5, r6, pc}
 801192a:	4770      	bx	lr
 801192c:	080119f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, fp, ip}

08011930 <DisplayUdfParams::callbackFunction(char const*)>:
 8011930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011932:	460e      	mov	r6, r1
 8011934:	4604      	mov	r4, r0
 8011936:	492c      	ldr	r1, [pc, #176]	; (80119e8 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8011938:	4630      	mov	r0, r6
 801193a:	f10d 0207 	add.w	r2, sp, #7
 801193e:	f000 fc59 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011942:	b968      	cbnz	r0, 8011960 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8011944:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011948:	6863      	ldr	r3, [r4, #4]
 801194a:	2a7f      	cmp	r2, #127	; 0x7f
 801194c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8011950:	bf14      	ite	ne
 8011952:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 8011956:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 801195a:	6063      	str	r3, [r4, #4]
 801195c:	b003      	add	sp, #12
 801195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011960:	4630      	mov	r0, r6
 8011962:	4922      	ldr	r1, [pc, #136]	; (80119ec <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 8011964:	f10d 0207 	add.w	r2, sp, #7
 8011968:	f000 fc44 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801196c:	b958      	cbnz	r0, 8011986 <DisplayUdfParams::callbackFunction(char const*)+0x56>
 801196e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011972:	6863      	ldr	r3, [r4, #4]
 8011974:	2a05      	cmp	r2, #5
 8011976:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 801197a:	bf14      	ite	ne
 801197c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8011980:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8011984:	e7e9      	b.n	801195a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8011986:	4630      	mov	r0, r6
 8011988:	4919      	ldr	r1, [pc, #100]	; (80119f0 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 801198a:	f10d 0207 	add.w	r2, sp, #7
 801198e:	f000 fc31 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8011992:	b948      	cbnz	r0, 80119a8 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8011994:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011998:	6863      	ldr	r3, [r4, #4]
 801199a:	b112      	cbz	r2, 80119a2 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 801199c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80119a0:	e7db      	b.n	801195a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80119a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80119a6:	e7d8      	b.n	801195a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80119a8:	2500      	movs	r5, #0
 80119aa:	4f12      	ldr	r7, [pc, #72]	; (80119f4 <DisplayUdfParams::callbackFunction(char const*)+0xc4>)
 80119ac:	4630      	mov	r0, r6
 80119ae:	f857 1b04 	ldr.w	r1, [r7], #4
 80119b2:	f10d 0207 	add.w	r2, sp, #7
 80119b6:	f000 fc1d 	bl	80121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80119ba:	b980      	cbnz	r0, 80119de <DisplayUdfParams::callbackFunction(char const*)+0xae>
 80119bc:	2301      	movs	r3, #1
 80119be:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80119c2:	40ab      	lsls	r3, r5
 80119c4:	1e4e      	subs	r6, r1, #1
 80119c6:	2e05      	cmp	r6, #5
 80119c8:	6862      	ldr	r2, [r4, #4]
 80119ca:	4425      	add	r5, r4
 80119cc:	d802      	bhi.n	80119d4 <DisplayUdfParams::callbackFunction(char const*)+0xa4>
 80119ce:	7229      	strb	r1, [r5, #8]
 80119d0:	4313      	orrs	r3, r2
 80119d2:	e7c2      	b.n	801195a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80119d4:	ea22 0203 	bic.w	r2, r2, r3
 80119d8:	7228      	strb	r0, [r5, #8]
 80119da:	6062      	str	r2, [r4, #4]
 80119dc:	e7be      	b.n	801195c <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80119de:	3501      	adds	r5, #1
 80119e0:	2d14      	cmp	r5, #20
 80119e2:	d1e3      	bne.n	80119ac <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 80119e4:	e7ba      	b.n	801195c <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80119e6:	bf00      	nop
 80119e8:	0801710e 	stmdaeq	r1, {r1, r2, r3, r8, ip, sp, lr}
 80119ec:	080170d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, ip, sp, lr}
 80119f0:	080170e4 	stmdaeq	r1, {r2, r5, r6, r7, ip, sp, lr}
 80119f4:	08017060 	stmdaeq	r1, {r5, r6, ip, sp, lr}

080119f8 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 80119f8:	f7ff bf9a 	b.w	8011930 <DisplayUdfParams::callbackFunction(char const*)>

080119fc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>:
 80119fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a00:	4604      	mov	r4, r0
 8011a02:	4615      	mov	r5, r2
 8011a04:	461e      	mov	r6, r3
 8011a06:	b086      	sub	sp, #24
 8011a08:	3004      	adds	r0, #4
 8011a0a:	b379      	cbz	r1, 8011a6c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x70>
 8011a0c:	2222      	movs	r2, #34	; 0x22
 8011a0e:	f001 f92c 	bl	8012c6a <memmove>
 8011a12:	462a      	mov	r2, r5
 8011a14:	4633      	mov	r3, r6
 8011a16:	493d      	ldr	r1, [pc, #244]	; (8011b0c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x110>)
 8011a18:	a803      	add	r0, sp, #12
 8011a1a:	f000 fa9b 	bl	8011f54 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8011a1e:	6863      	ldr	r3, [r4, #4]
 8011a20:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8011a24:	493a      	ldr	r1, [pc, #232]	; (8011b10 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x114>)
 8011a26:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8011a2a:	a803      	add	r0, sp, #12
 8011a2c:	f7ff ff1e 	bl	801186c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8011a30:	6863      	ldr	r3, [r4, #4]
 8011a32:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8011a36:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8011a3a:	4936      	ldr	r1, [pc, #216]	; (8011b14 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x118>)
 8011a3c:	a803      	add	r0, sp, #12
 8011a3e:	f7ff ff15 	bl	801186c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8011a42:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011a46:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8011a4a:	6863      	ldr	r3, [r4, #4]
 8011a4c:	42aa      	cmp	r2, r5
 8011a4e:	d226      	bcs.n	8011a9e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xa2>
 8011a50:	9803      	ldr	r0, [sp, #12]
 8011a52:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8011a56:	4410      	add	r0, r2
 8011a58:	eba5 0502 	sub.w	r5, r5, r2
 8011a5c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8011a60:	d10b      	bne.n	8011a7a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x7e>
 8011a62:	b962      	cbnz	r2, 8011a7e <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x82>
 8011a64:	9200      	str	r2, [sp, #0]
 8011a66:	4b2c      	ldr	r3, [pc, #176]	; (8011b18 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8011a68:	4a2c      	ldr	r2, [pc, #176]	; (8011b1c <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x120>)
 8011a6a:	e00e      	b.n	8011a8a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8011a6c:	6823      	ldr	r3, [r4, #0]
 8011a6e:	4601      	mov	r1, r0
 8011a70:	681a      	ldr	r2, [r3, #0]
 8011a72:	4618      	mov	r0, r3
 8011a74:	68d2      	ldr	r2, [r2, #12]
 8011a76:	4790      	blx	r2
 8011a78:	e7cb      	b.n	8011a12 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x16>
 8011a7a:	2a00      	cmp	r2, #0
 8011a7c:	d041      	beq.n	8011b02 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 8011a7e:	3b00      	subs	r3, #0
 8011a80:	bf18      	it	ne
 8011a82:	2301      	movne	r3, #1
 8011a84:	4a26      	ldr	r2, [pc, #152]	; (8011b20 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x124>)
 8011a86:	9300      	str	r3, [sp, #0]
 8011a88:	4b23      	ldr	r3, [pc, #140]	; (8011b18 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8011a8a:	4629      	mov	r1, r5
 8011a8c:	f001 fb46 	bl	801311c <snprintf>
 8011a90:	4285      	cmp	r5, r0
 8011a92:	bfa2      	ittt	ge
 8011a94:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8011a98:	181b      	addge	r3, r3, r0
 8011a9a:	f8ad 3012 	strhge.w	r3, [sp, #18]
 8011a9e:	2500      	movs	r5, #0
 8011aa0:	2701      	movs	r7, #1
 8011aa2:	4e20      	ldr	r6, [pc, #128]	; (8011b24 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x128>)
 8011aa4:	f104 0808 	add.w	r8, r4, #8
 8011aa8:	f856 1b04 	ldr.w	r1, [r6], #4
 8011aac:	780b      	ldrb	r3, [r1, #0]
 8011aae:	b15b      	cbz	r3, 8011ac8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xcc>
 8011ab0:	6862      	ldr	r2, [r4, #4]
 8011ab2:	fa07 f305 	lsl.w	r3, r7, r5
 8011ab6:	4393      	bics	r3, r2
 8011ab8:	bf0c      	ite	eq
 8011aba:	2301      	moveq	r3, #1
 8011abc:	2300      	movne	r3, #0
 8011abe:	f818 2005 	ldrb.w	r2, [r8, r5]
 8011ac2:	a803      	add	r0, sp, #12
 8011ac4:	f7ff fed2 	bl	801186c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 8011ac8:	3501      	adds	r5, #1
 8011aca:	2d14      	cmp	r5, #20
 8011acc:	d1ec      	bne.n	8011aa8 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xac>
 8011ace:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8011ad2:	b17b      	cbz	r3, 8011af4 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0xf8>
 8011ad4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011ad8:	9b03      	ldr	r3, [sp, #12]
 8011ada:	4413      	add	r3, r2
 8011adc:	227d      	movs	r2, #125	; 0x7d
 8011ade:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011ae2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011ae6:	9903      	ldr	r1, [sp, #12]
 8011ae8:	54ca      	strb	r2, [r1, r3]
 8011aea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011aee:	3301      	adds	r3, #1
 8011af0:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011af4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8011af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011afa:	601a      	str	r2, [r3, #0]
 8011afc:	b006      	add	sp, #24
 8011afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b02:	2301      	movs	r3, #1
 8011b04:	4a08      	ldr	r2, [pc, #32]	; (8011b28 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x12c>)
 8011b06:	9300      	str	r3, [sp, #0]
 8011b08:	4b03      	ldr	r3, [pc, #12]	; (8011b18 <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x11c>)
 8011b0a:	e7be      	b.n	8011a8a <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 8011b0c:	08017102 	stmdaeq	r1, {r1, r8, ip, sp, lr}
 8011b10:	0801710e 	stmdaeq	r1, {r1, r2, r3, r8, ip, sp, lr}
 8011b14:	080170d6 	stmdaeq	r1, {r1, r2, r4, r6, r7, ip, sp, lr}
 8011b18:	080170e4 	stmdaeq	r1, {r2, r5, r6, r7, ip, sp, lr}
 8011b1c:	080157c1 	stmdaeq	r1, {r0, r6, r7, r8, r9, sl, ip, lr}
 8011b20:	080157b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, r9, sl, ip, lr}
 8011b24:	08017060 	stmdaeq	r1, {r5, r6, ip, sp, lr}
 8011b28:	080157c2 	stmdaeq	r1, {r1, r6, r7, r8, r9, sl, ip, lr}

08011b2c <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8011b2c:	b513      	push	{r0, r1, r4, lr}
 8011b2e:	6804      	ldr	r4, [r0, #0]
 8011b30:	b914      	cbnz	r4, 8011b38 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 8011b32:	601c      	str	r4, [r3, #0]
 8011b34:	b002      	add	sp, #8
 8011b36:	bd10      	pop	{r4, pc}
 8011b38:	9300      	str	r3, [sp, #0]
 8011b3a:	4613      	mov	r3, r2
 8011b3c:	460a      	mov	r2, r1
 8011b3e:	2100      	movs	r1, #0
 8011b40:	f7ff ff5c 	bl	80119fc <DisplayUdfParams::Builder(displayudfparams::Params const*, char*, unsigned int, unsigned int&)>
 8011b44:	e7f6      	b.n	8011b34 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

08011b46 <DisplayUdfParams::Set(DisplayUdf*)>:
 8011b46:	6843      	ldr	r3, [r0, #4]
 8011b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b4c:	009a      	lsls	r2, r3, #2
 8011b4e:	4604      	mov	r4, r0
 8011b50:	460e      	mov	r6, r1
 8011b52:	d506      	bpl.n	8011b62 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8011b54:	6988      	ldr	r0, [r1, #24]
 8011b56:	b120      	cbz	r0, 8011b62 <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8011b58:	6803      	ldr	r3, [r0, #0]
 8011b5a:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 8011b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b60:	4798      	blx	r3
 8011b62:	6863      	ldr	r3, [r4, #4]
 8011b64:	69b0      	ldr	r0, [r6, #24]
 8011b66:	00db      	lsls	r3, r3, #3
 8011b68:	bf41      	itttt	mi
 8011b6a:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 8011b6e:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 8011b72:	4353      	mulmi	r3, r2
 8011b74:	6173      	strmi	r3, [r6, #20]
 8011b76:	6861      	ldr	r1, [r4, #4]
 8011b78:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8011b7c:	b110      	cbz	r0, 8011b84 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 8011b7e:	6803      	ldr	r3, [r0, #0]
 8011b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b82:	4798      	blx	r3
 8011b84:	2500      	movs	r5, #0
 8011b86:	2701      	movs	r7, #1
 8011b88:	f104 0808 	add.w	r8, r4, #8
 8011b8c:	6862      	ldr	r2, [r4, #4]
 8011b8e:	fa07 f305 	lsl.w	r3, r7, r5
 8011b92:	4393      	bics	r3, r2
 8011b94:	d105      	bne.n	8011ba2 <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8011b96:	462a      	mov	r2, r5
 8011b98:	4630      	mov	r0, r6
 8011b9a:	f818 1005 	ldrb.w	r1, [r8, r5]
 8011b9e:	f7ff fd0c 	bl	80115ba <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 8011ba2:	3501      	adds	r5, #1
 8011ba4:	2d14      	cmp	r5, #20
 8011ba6:	d1f1      	bne.n	8011b8c <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8011ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011bac <DisplayUdfParams::Dump()>:
 8011bac:	4770      	bx	lr

08011bae <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 8011bae:	b570      	push	{r4, r5, r6, lr}
 8011bb0:	4605      	mov	r5, r0
 8011bb2:	6980      	ldr	r0, [r0, #24]
 8011bb4:	460c      	mov	r4, r1
 8011bb6:	b120      	cbz	r0, 8011bc2 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 8011bb8:	6803      	ldr	r3, [r0, #0]
 8011bba:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8011bbe:	691b      	ldr	r3, [r3, #16]
 8011bc0:	4798      	blx	r3
 8011bc2:	69a8      	ldr	r0, [r5, #24]
 8011bc4:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8011bc8:	b190      	cbz	r0, 8011bf0 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x42>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	7906      	ldrb	r6, [r0, #4]
 8011bce:	343b      	adds	r4, #59	; 0x3b
 8011bd0:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8011bd4:	b119      	cbz	r1, 8011bde <DisplayUdf::ShowNodeName(ArtNetNode*)+0x30>
 8011bd6:	1c59      	adds	r1, r3, #1
 8011bd8:	429e      	cmp	r6, r3
 8011bda:	460b      	mov	r3, r1
 8011bdc:	dcf8      	bgt.n	8011bd0 <DisplayUdf::ShowNodeName(ArtNetNode*)+0x22>
 8011bde:	6801      	ldr	r1, [r0, #0]
 8011be0:	b2db      	uxtb	r3, r3
 8011be2:	69cc      	ldr	r4, [r1, #28]
 8011be4:	f895 1042 	ldrb.w	r1, [r5, #66]	; 0x42
 8011be8:	46a4      	mov	ip, r4
 8011bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011bee:	4760      	bx	ip
 8011bf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08011bf4 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 8011bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bf8:	460c      	mov	r4, r1
 8011bfa:	b089      	sub	sp, #36	; 0x24
 8011bfc:	4606      	mov	r6, r0
 8011bfe:	2301      	movs	r3, #1
 8011c00:	2100      	movs	r1, #0
 8011c02:	4620      	mov	r0, r4
 8011c04:	f10d 021f 	add.w	r2, sp, #31
 8011c08:	f7f8 fb23 	bl	800a252 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8011c0c:	b1e8      	cbz	r0, 8011c4a <DisplayUdf::ShowUniverse(ArtNetNode*)+0x56>
 8011c0e:	f8d4 5908 	ldr.w	r5, [r4, #2312]	; 0x908
 8011c12:	4a2b      	ldr	r2, [pc, #172]	; (8011cc0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>)
 8011c14:	4b2b      	ldr	r3, [pc, #172]	; (8011cc4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>)
 8011c16:	4f2c      	ldr	r7, [pc, #176]	; (8011cc8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>)
 8011c18:	2d00      	cmp	r5, #0
 8011c1a:	bf18      	it	ne
 8011c1c:	4613      	movne	r3, r2
 8011c1e:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8011c22:	4a2a      	ldr	r2, [pc, #168]	; (8011ccc <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>)
 8011c24:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
 8011c28:	2d00      	cmp	r5, #0
 8011c2a:	bf18      	it	ne
 8011c2c:	463a      	movne	r2, r7
 8011c2e:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8011c32:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011c36:	e9cd 1000 	strd	r1, r0, [sp]
 8011c3a:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8011c3e:	4630      	mov	r0, r6
 8011c40:	4a23      	ldr	r2, [pc, #140]	; (8011cd0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xdc>)
 8011c42:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
 8011c46:	f7ff fc72 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 8011c4a:	4627      	mov	r7, r4
 8011c4c:	2500      	movs	r5, #0
 8011c4e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8011cc4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd0>
 8011c52:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8011cc0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xcc>
 8011c56:	f8df a074 	ldr.w	sl, [pc, #116]	; 8011ccc <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd8>
 8011c5a:	4629      	mov	r1, r5
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f10d 021f 	add.w	r2, sp, #31
 8011c64:	f7f8 faf5 	bl	800a252 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8011c68:	3501      	adds	r5, #1
 8011c6a:	b308      	cbz	r0, 8011cb0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xbc>
 8011c6c:	f8d7 c908 	ldr.w	ip, [r7, #2312]	; 0x908
 8011c70:	f8df b054 	ldr.w	fp, [pc, #84]	; 8011cc8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xd4>
 8011c74:	f1bc 0f00 	cmp.w	ip, #0
 8011c78:	bf0c      	ite	eq
 8011c7a:	46c6      	moveq	lr, r8
 8011c7c:	46ce      	movne	lr, r9
 8011c7e:	f8d7 c910 	ldr.w	ip, [r7, #2320]	; 0x910
 8011c82:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 8011c86:	f1bc 0f00 	cmp.w	ip, #0
 8011c8a:	bf08      	it	eq
 8011c8c:	46d3      	moveq	fp, sl
 8011c8e:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8011c92:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8011c96:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8011c9a:	e9cd eb03 	strd	lr, fp, [sp, #12]
 8011c9e:	9300      	str	r3, [sp, #0]
 8011ca0:	f106 0143 	add.w	r1, r6, #67	; 0x43
 8011ca4:	462b      	mov	r3, r5
 8011ca6:	4630      	mov	r0, r6
 8011ca8:	4a0a      	ldr	r2, [pc, #40]	; (8011cd4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xe0>)
 8011caa:	5d49      	ldrb	r1, [r1, r5]
 8011cac:	f7ff fc3f 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 8011cb0:	2d04      	cmp	r5, #4
 8011cb2:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8011cb6:	d1d0      	bne.n	8011c5a <DisplayUdf::ShowUniverse(ArtNetNode*)+0x66>
 8011cb8:	b009      	add	sp, #36	; 0x24
 8011cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cbe:	bf00      	nop
 8011cc0:	08016659 	stmdaeq	r1, {r0, r3, r4, r6, r9, sl, sp, lr}
 8011cc4:	08016655 	stmdaeq	r1, {r0, r2, r4, r6, r9, sl, sp, lr}
 8011cc8:	08016665 	stmdaeq	r1, {r0, r2, r5, r6, r9, sl, sp, lr}
 8011ccc:	08017118 	stmdaeq	r1, {r3, r4, r8, ip, sp, lr}
 8011cd0:	0801711d 	stmdaeq	r1, {r0, r2, r3, r4, r8, ip, sp, lr}
 8011cd4:	08017131 	stmdaeq	r1, {r0, r4, r5, r8, ip, sp, lr}

08011cd8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 8011cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cdc:	4606      	mov	r6, r0
 8011cde:	460f      	mov	r7, r1
 8011ce0:	2500      	movs	r5, #0
 8011ce2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8011d28 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x50>
 8011ce6:	b085      	sub	sp, #20
 8011ce8:	f100 0849 	add.w	r8, r0, #73	; 0x49
 8011cec:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8011cf0:	f105 0341 	add.w	r3, r5, #65	; 0x41
 8011cf4:	b9ad      	cbnz	r5, 8011d22 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x4a>
 8011cf6:	f8d7 4920 	ldr.w	r4, [r7, #2336]	; 0x920
 8011cfa:	0e22      	lsrs	r2, r4, #24
 8011cfc:	9203      	str	r2, [sp, #12]
 8011cfe:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8011d02:	9202      	str	r2, [sp, #8]
 8011d04:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8011d08:	b2e4      	uxtb	r4, r4
 8011d0a:	9201      	str	r2, [sp, #4]
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	464a      	mov	r2, r9
 8011d10:	9400      	str	r4, [sp, #0]
 8011d12:	3501      	adds	r5, #1
 8011d14:	f7ff fc0b 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 8011d18:	2d04      	cmp	r5, #4
 8011d1a:	d1e7      	bne.n	8011cec <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x14>
 8011d1c:	b005      	add	sp, #20
 8011d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d22:	2400      	movs	r4, #0
 8011d24:	e7e9      	b.n	8011cfa <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x22>
 8011d26:	bf00      	nop
 8011d28:	08017147 	stmdaeq	r1, {r0, r1, r2, r6, r8, ip, sp, lr}

08011d2c <DisplayUdf::Show(ArtNetNode*)>:
 8011d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d2e:	4604      	mov	r4, r0
 8011d30:	460d      	mov	r5, r1
 8011d32:	f7ff fcf1 	bl	8011718 <DisplayUdf::Show()>
 8011d36:	4629      	mov	r1, r5
 8011d38:	4620      	mov	r0, r4
 8011d3a:	f7ff ff38 	bl	8011bae <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8011d3e:	4629      	mov	r1, r5
 8011d40:	4620      	mov	r0, r4
 8011d42:	f7ff ff57 	bl	8011bf4 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8011d46:	4629      	mov	r1, r5
 8011d48:	4620      	mov	r0, r4
 8011d4a:	f7ff ffc5 	bl	8011cd8 <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 8011d4e:	f895 28eb 	ldrb.w	r2, [r5, #2283]	; 0x8eb
 8011d52:	f895 38ea 	ldrb.w	r3, [r5, #2282]	; 0x8ea
 8011d56:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8011d5a:	4413      	add	r3, r2
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	4a0d      	ldr	r2, [pc, #52]	; (8011d94 <DisplayUdf::Show(ArtNetNode*)+0x68>)
 8011d60:	f7ff fbe5 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 8011d64:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8011d66:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
 8011d6a:	2a02      	cmp	r2, #2
 8011d6c:	d001      	beq.n	8011d72 <DisplayUdf::Show(ArtNetNode*)+0x46>
 8011d6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8011d70:	b92b      	cbnz	r3, 8011d7e <DisplayUdf::Show(ArtNetNode*)+0x52>
 8011d72:	4620      	mov	r0, r4
 8011d74:	4a08      	ldr	r2, [pc, #32]	; (8011d98 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 8011d76:	f7ff fbda 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 8011d7a:	b003      	add	sp, #12
 8011d7c:	bd30      	pop	{r4, r5, pc}
 8011d7e:	4807      	ldr	r0, [pc, #28]	; (8011d9c <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8011d80:	9300      	str	r3, [sp, #0]
 8011d82:	4b07      	ldr	r3, [pc, #28]	; (8011da0 <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8011d84:	2a00      	cmp	r2, #0
 8011d86:	bf08      	it	eq
 8011d88:	4603      	moveq	r3, r0
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	4a05      	ldr	r2, [pc, #20]	; (8011da4 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8011d8e:	f7ff fbce 	bl	801152e <Display::Printf(unsigned char, char const*, ...)>
 8011d92:	e7f2      	b.n	8011d7a <DisplayUdf::Show(ArtNetNode*)+0x4e>
 8011d94:	08017157 	stmdaeq	r1, {r0, r1, r2, r4, r6, r8, ip, sp, lr}
 8011d98:	0801715e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, ip, sp, lr}
 8011d9c:	080153b0 	stmdaeq	r1, {r4, r5, r7, r8, r9, ip, lr}
 8011da0:	080153a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, ip, lr}
 8011da4:	08017165 	stmdaeq	r1, {r0, r2, r5, r6, r8, ip, sp, lr}

08011da8 <NetworkDisplay::ShowEmacStart()>:
 8011da8:	4b01      	ldr	r3, [pc, #4]	; (8011db0 <NetworkDisplay::ShowEmacStart()+0x8>)
 8011daa:	6818      	ldr	r0, [r3, #0]
 8011dac:	f7ff bc1e 	b.w	80115ec <DisplayUdf::ShowEmacStart()>
 8011db0:	2000a138 	andcs	sl, r0, r8, lsr r1

08011db4 <NetworkDisplay::ShowIp()>:
 8011db4:	4b01      	ldr	r3, [pc, #4]	; (8011dbc <NetworkDisplay::ShowIp()+0x8>)
 8011db6:	6818      	ldr	r0, [r3, #0]
 8011db8:	f7ff bc28 	b.w	801160c <DisplayUdf::ShowIpAddress()>
 8011dbc:	2000a138 	andcs	sl, r0, r8, lsr r1

08011dc0 <NetworkDisplay::ShowNetMask()>:
 8011dc0:	4b01      	ldr	r3, [pc, #4]	; (8011dc8 <NetworkDisplay::ShowNetMask()+0x8>)
 8011dc2:	6818      	ldr	r0, [r3, #0]
 8011dc4:	f7ff bc56 	b.w	8011674 <DisplayUdf::ShowNetmask()>
 8011dc8:	2000a138 	andcs	sl, r0, r8, lsr r1

08011dcc <NetworkDisplay::ShowGatewayIp()>:
 8011dcc:	4b01      	ldr	r3, [pc, #4]	; (8011dd4 <NetworkDisplay::ShowGatewayIp()+0x8>)
 8011dce:	6818      	ldr	r0, [r3, #0]
 8011dd0:	f7ff bc6e 	b.w	80116b0 <DisplayUdf::ShowGatewayIp()>
 8011dd4:	2000a138 	andcs	sl, r0, r8, lsr r1

08011dd8 <NetworkDisplay::ShowShutdown()>:
 8011dd8:	4b01      	ldr	r3, [pc, #4]	; (8011de0 <NetworkDisplay::ShowShutdown()+0x8>)
 8011dda:	6818      	ldr	r0, [r3, #0]
 8011ddc:	f7ff bd16 	b.w	801180c <DisplayUdf::ShowShutdown()>
 8011de0:	2000a138 	andcs	sl, r0, r8, lsr r1

08011de4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8011de4:	4b01      	ldr	r3, [pc, #4]	; (8011dec <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 8011de6:	6818      	ldr	r0, [r3, #0]
 8011de8:	f7ff bcd8 	b.w	801179c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8011dec:	2000a138 	andcs	sl, r0, r8, lsr r1

08011df0 <properties::convert_json_file(char*, unsigned short, bool)>:
 8011df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df4:	4603      	mov	r3, r0
 8011df6:	7800      	ldrb	r0, [r0, #0]
 8011df8:	287b      	cmp	r0, #123	; 0x7b
 8011dfa:	f040 80a2 	bne.w	8011f42 <properties::convert_json_file(char*, unsigned short, bool)+0x152>
 8011dfe:	b17a      	cbz	r2, 8011e20 <properties::convert_json_file(char*, unsigned short, bool)+0x30>
 8011e00:	2401      	movs	r4, #1
 8011e02:	461e      	mov	r6, r3
 8011e04:	4620      	mov	r0, r4
 8011e06:	2a00      	cmp	r2, #0
 8011e08:	bf0c      	ite	eq
 8011e0a:	f04f 0c0a 	moveq.w	ip, #10
 8011e0e:	f04f 0c00 	movne.w	ip, #0
 8011e12:	273d      	movs	r7, #61	; 0x3d
 8011e14:	42a1      	cmp	r1, r4
 8011e16:	d850      	bhi.n	8011eba <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8011e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e1c:	463c      	mov	r4, r7
 8011e1e:	e7f2      	b.n	8011e06 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8011e20:	2023      	movs	r0, #35	; 0x23
 8011e22:	f803 0b01 	strb.w	r0, [r3], #1
 8011e26:	461c      	mov	r4, r3
 8011e28:	2701      	movs	r7, #1
 8011e2a:	42b9      	cmp	r1, r7
 8011e2c:	d811      	bhi.n	8011e52 <properties::convert_json_file(char*, unsigned short, bool)+0x62>
 8011e2e:	2001      	movs	r0, #1
 8011e30:	461e      	mov	r6, r3
 8011e32:	230a      	movs	r3, #10
 8011e34:	4625      	mov	r5, r4
 8011e36:	f806 3b01 	strb.w	r3, [r6], #1
 8011e3a:	3001      	adds	r0, #1
 8011e3c:	462b      	mov	r3, r5
 8011e3e:	781c      	ldrb	r4, [r3, #0]
 8011e40:	3501      	adds	r5, #1
 8011e42:	2c7b      	cmp	r4, #123	; 0x7b
 8011e44:	d0ea      	beq.n	8011e1c <properties::convert_json_file(char*, unsigned short, bool)+0x2c>
 8011e46:	42b9      	cmp	r1, r7
 8011e48:	f107 0401 	add.w	r4, r7, #1
 8011e4c:	d9db      	bls.n	8011e06 <properties::convert_json_file(char*, unsigned short, bool)+0x16>
 8011e4e:	4627      	mov	r7, r4
 8011e50:	e7f4      	b.n	8011e3c <properties::convert_json_file(char*, unsigned short, bool)+0x4c>
 8011e52:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011e56:	2822      	cmp	r0, #34	; 0x22
 8011e58:	d119      	bne.n	8011e8e <properties::convert_json_file(char*, unsigned short, bool)+0x9e>
 8011e5a:	46a4      	mov	ip, r4
 8011e5c:	461d      	mov	r5, r3
 8011e5e:	2601      	movs	r6, #1
 8011e60:	f89c e000 	ldrb.w	lr, [ip]
 8011e64:	4664      	mov	r4, ip
 8011e66:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011e6a:	462b      	mov	r3, r5
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	f10c 0c01 	add.w	ip, ip, #1
 8011e72:	f105 0501 	add.w	r5, r5, #1
 8011e76:	f106 0601 	add.w	r6, r6, #1
 8011e7a:	d0d9      	beq.n	8011e30 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8011e7c:	3701      	adds	r7, #1
 8011e7e:	42b9      	cmp	r1, r7
 8011e80:	4664      	mov	r4, ip
 8011e82:	f805 ec01 	strb.w	lr, [r5, #-1]
 8011e86:	d8eb      	bhi.n	8011e60 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 8011e88:	4630      	mov	r0, r6
 8011e8a:	462b      	mov	r3, r5
 8011e8c:	e7d0      	b.n	8011e30 <properties::convert_json_file(char*, unsigned short, bool)+0x40>
 8011e8e:	3701      	adds	r7, #1
 8011e90:	e7cb      	b.n	8011e2a <properties::convert_json_file(char*, unsigned short, bool)+0x3a>
 8011e92:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011e96:	d110      	bne.n	8011eba <properties::convert_json_file(char*, unsigned short, bool)+0xca>
 8011e98:	eba0 0803 	sub.w	r8, r0, r3
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	eb08 0003 	add.w	r0, r8, r3
 8011ea2:	f813 eb01 	ldrb.w	lr, [r3], #1
 8011ea6:	1c65      	adds	r5, r4, #1
 8011ea8:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8011eac:	d04c      	beq.n	8011f48 <properties::convert_json_file(char*, unsigned short, bool)+0x158>
 8011eae:	42a1      	cmp	r1, r4
 8011eb0:	d911      	bls.n	8011ed6 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 8011eb2:	462c      	mov	r4, r5
 8011eb4:	f806 eb01 	strb.w	lr, [r6], #1
 8011eb8:	e7f0      	b.n	8011e9c <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 8011eba:	42a1      	cmp	r1, r4
 8011ebc:	461d      	mov	r5, r3
 8011ebe:	f893 e000 	ldrb.w	lr, [r3]
 8011ec2:	f104 0401 	add.w	r4, r4, #1
 8011ec6:	f103 0301 	add.w	r3, r3, #1
 8011eca:	d8e2      	bhi.n	8011e92 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8011ecc:	462b      	mov	r3, r5
 8011ece:	e7e3      	b.n	8011e98 <properties::convert_json_file(char*, unsigned short, bool)+0xa8>
 8011ed0:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
 8011ed4:	d009      	beq.n	8011eea <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8011ed6:	42a9      	cmp	r1, r5
 8011ed8:	4614      	mov	r4, r2
 8011eda:	f892 e000 	ldrb.w	lr, [r2]
 8011ede:	f105 0501 	add.w	r5, r5, #1
 8011ee2:	f102 0201 	add.w	r2, r2, #1
 8011ee6:	d8f3      	bhi.n	8011ed0 <properties::convert_json_file(char*, unsigned short, bool)+0xe0>
 8011ee8:	4622      	mov	r2, r4
 8011eea:	7814      	ldrb	r4, [r2, #0]
 8011eec:	4696      	mov	lr, r2
 8011eee:	2c2f      	cmp	r4, #47	; 0x2f
 8011ef0:	462b      	mov	r3, r5
 8011ef2:	f102 0201 	add.w	r2, r2, #1
 8011ef6:	f105 0501 	add.w	r5, r5, #1
 8011efa:	d81a      	bhi.n	8011f32 <properties::convert_json_file(char*, unsigned short, bool)+0x142>
 8011efc:	4299      	cmp	r1, r3
 8011efe:	d8f4      	bhi.n	8011eea <properties::convert_json_file(char*, unsigned short, bool)+0xfa>
 8011f00:	2c22      	cmp	r4, #34	; 0x22
 8011f02:	bf08      	it	eq
 8011f04:	4696      	moveq	lr, r2
 8011f06:	4673      	mov	r3, lr
 8011f08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f0c:	1c6c      	adds	r4, r5, #1
 8011f0e:	2a22      	cmp	r2, #34	; 0x22
 8011f10:	d011      	beq.n	8011f36 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8011f12:	2a2c      	cmp	r2, #44	; 0x2c
 8011f14:	d00f      	beq.n	8011f36 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8011f16:	2a7d      	cmp	r2, #125	; 0x7d
 8011f18:	d00d      	beq.n	8011f36 <properties::convert_json_file(char*, unsigned short, bool)+0x146>
 8011f1a:	42a9      	cmp	r1, r5
 8011f1c:	d90f      	bls.n	8011f3e <properties::convert_json_file(char*, unsigned short, bool)+0x14e>
 8011f1e:	f1a2 0520 	sub.w	r5, r2, #32
 8011f22:	2d5a      	cmp	r5, #90	; 0x5a
 8011f24:	d803      	bhi.n	8011f2e <properties::convert_json_file(char*, unsigned short, bool)+0x13e>
 8011f26:	469e      	mov	lr, r3
 8011f28:	f806 2b01 	strb.w	r2, [r6], #1
 8011f2c:	3001      	adds	r0, #1
 8011f2e:	4625      	mov	r5, r4
 8011f30:	e7e9      	b.n	8011f06 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8011f32:	461d      	mov	r5, r3
 8011f34:	e7e7      	b.n	8011f06 <properties::convert_json_file(char*, unsigned short, bool)+0x116>
 8011f36:	462c      	mov	r4, r5
 8011f38:	f806 cb01 	strb.w	ip, [r6], #1
 8011f3c:	3001      	adds	r0, #1
 8011f3e:	3401      	adds	r4, #1
 8011f40:	e768      	b.n	8011e14 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 8011f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f46:	e767      	b.n	8011e18 <properties::convert_json_file(char*, unsigned short, bool)+0x28>
 8011f48:	4625      	mov	r5, r4
 8011f4a:	f806 7b01 	strb.w	r7, [r6], #1
 8011f4e:	3001      	adds	r0, #1
 8011f50:	e7c1      	b.n	8011ed6 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
	...

08011f54 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 8011f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f58:	6002      	str	r2, [r0, #0]
 8011f5a:	4614      	mov	r4, r2
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	80c2      	strh	r2, [r0, #6]
 8011f60:	4a1c      	ldr	r2, [pc, #112]	; (8011fd4 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 8011f62:	4606      	mov	r6, r0
 8011f64:	7812      	ldrb	r2, [r2, #0]
 8011f66:	8083      	strh	r3, [r0, #4]
 8011f68:	f002 0201 	and.w	r2, r2, #1
 8011f6c:	7202      	strb	r2, [r0, #8]
 8011f6e:	4608      	mov	r0, r1
 8011f70:	4605      	mov	r5, r0
 8011f72:	782f      	ldrb	r7, [r5, #0]
 8011f74:	3001      	adds	r0, #1
 8011f76:	2f00      	cmp	r7, #0
 8011f78:	d1fa      	bne.n	8011f70 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8011f7a:	1a6d      	subs	r5, r5, r1
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	b1d2      	cbz	r2, 8011fb6 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8011f80:	1d2f      	adds	r7, r5, #4
 8011f82:	429f      	cmp	r7, r3
 8011f84:	d814      	bhi.n	8011fb0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8011f86:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8011f8a:	f04f 0922 	mov.w	r9, #34	; 0x22
 8011f8e:	462a      	mov	r2, r5
 8011f90:	f884 8000 	strb.w	r8, [r4]
 8011f94:	f884 9001 	strb.w	r9, [r4, #1]
 8011f98:	1ca0      	adds	r0, r4, #2
 8011f9a:	f000 fe66 	bl	8012c6a <memmove>
 8011f9e:	223a      	movs	r2, #58	; 0x3a
 8011fa0:	1963      	adds	r3, r4, r5
 8011fa2:	3505      	adds	r5, #5
 8011fa4:	f883 9002 	strb.w	r9, [r3, #2]
 8011fa8:	70da      	strb	r2, [r3, #3]
 8011faa:	80f5      	strh	r5, [r6, #6]
 8011fac:	f804 8007 	strb.w	r8, [r4, r7]
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fb6:	1caf      	adds	r7, r5, #2
 8011fb8:	429f      	cmp	r7, r3
 8011fba:	d8f9      	bhi.n	8011fb0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	2323      	movs	r3, #35	; 0x23
 8011fc0:	462a      	mov	r2, r5
 8011fc2:	f800 3b01 	strb.w	r3, [r0], #1
 8011fc6:	f000 fe50 	bl	8012c6a <memmove>
 8011fca:	230a      	movs	r3, #10
 8011fcc:	442c      	add	r4, r5
 8011fce:	7063      	strb	r3, [r4, #1]
 8011fd0:	80f7      	strh	r7, [r6, #6]
 8011fd2:	e7ed      	b.n	8011fb0 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 8011fd4:	2000a13c 	andcs	sl, r0, ip, lsr r1

08011fd8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 8011fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fda:	469c      	mov	ip, r3
 8011fdc:	8885      	ldrh	r5, [r0, #4]
 8011fde:	88c3      	ldrh	r3, [r0, #6]
 8011fe0:	b085      	sub	sp, #20
 8011fe2:	42ab      	cmp	r3, r5
 8011fe4:	d302      	bcc.n	8011fec <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 8011fe6:	2000      	movs	r0, #0
 8011fe8:	b005      	add	sp, #20
 8011fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fec:	4604      	mov	r4, r0
 8011fee:	6800      	ldr	r0, [r0, #0]
 8011ff0:	1aed      	subs	r5, r5, r3
 8011ff2:	4418      	add	r0, r3
 8011ff4:	b2d6      	uxtb	r6, r2
 8011ff6:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8011ffa:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8011ffe:	f894 e008 	ldrb.w	lr, [r4, #8]
 8012002:	0e12      	lsrs	r2, r2, #24
 8012004:	f1bc 0f00 	cmp.w	ip, #0
 8012008:	d109      	bne.n	801201e <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 801200a:	f1be 0f00 	cmp.w	lr, #0
 801200e:	d109      	bne.n	8012024 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 8012010:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012014:	e9cd 6700 	strd	r6, r7, [sp]
 8012018:	460b      	mov	r3, r1
 801201a:	4a0e      	ldr	r2, [pc, #56]	; (8012054 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 801201c:	e008      	b.n	8012030 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 801201e:	f1be 0f00 	cmp.w	lr, #0
 8012022:	d00f      	beq.n	8012044 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 8012024:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012028:	460b      	mov	r3, r1
 801202a:	e9cd 6700 	strd	r6, r7, [sp]
 801202e:	4a0a      	ldr	r2, [pc, #40]	; (8012058 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8012030:	4629      	mov	r1, r5
 8012032:	f001 f873 	bl	801311c <snprintf>
 8012036:	4285      	cmp	r5, r0
 8012038:	dbd5      	blt.n	8011fe6 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 801203a:	88e3      	ldrh	r3, [r4, #6]
 801203c:	4403      	add	r3, r0
 801203e:	80e3      	strh	r3, [r4, #6]
 8012040:	2001      	movs	r0, #1
 8012042:	e7d1      	b.n	8011fe8 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 8012044:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012048:	e9cd 6700 	strd	r6, r7, [sp]
 801204c:	460b      	mov	r3, r1
 801204e:	4a03      	ldr	r2, [pc, #12]	; (801205c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8012050:	e7ee      	b.n	8012030 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8012052:	bf00      	nop
 8012054:	08017183 	stmdaeq	r1, {r0, r1, r7, r8, ip, sp, lr}
 8012058:	0801716f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, ip, sp, lr}
 801205c:	08017184 	stmdaeq	r1, {r2, r7, r8, ip, sp, lr}

08012060 <PropertiesBuilder::AddComment(char const*)>:
 8012060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012062:	7a06      	ldrb	r6, [r0, #8]
 8012064:	b996      	cbnz	r6, 801208c <PropertiesBuilder::AddComment(char const*)+0x2c>
 8012066:	4604      	mov	r4, r0
 8012068:	88c0      	ldrh	r0, [r0, #6]
 801206a:	88a5      	ldrh	r5, [r4, #4]
 801206c:	42a8      	cmp	r0, r5
 801206e:	d20d      	bcs.n	801208c <PropertiesBuilder::AddComment(char const*)+0x2c>
 8012070:	6827      	ldr	r7, [r4, #0]
 8012072:	1a2d      	subs	r5, r5, r0
 8012074:	460b      	mov	r3, r1
 8012076:	4a06      	ldr	r2, [pc, #24]	; (8012090 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8012078:	4629      	mov	r1, r5
 801207a:	4438      	add	r0, r7
 801207c:	f001 f84e 	bl	801311c <snprintf>
 8012080:	4285      	cmp	r5, r0
 8012082:	bfa1      	itttt	ge
 8012084:	2601      	movge	r6, #1
 8012086:	88e3      	ldrhge	r3, [r4, #6]
 8012088:	18c0      	addge	r0, r0, r3
 801208a:	80e0      	strhge	r0, [r4, #6]
 801208c:	4630      	mov	r0, r6
 801208e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012090:	08017194 	stmdaeq	r1, {r2, r4, r7, r8, ip, sp, lr}

08012094 <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 8012094:	e9c0 1200 	strd	r1, r2, [r0]
 8012098:	4770      	bx	lr

0801209a <ReadConfigFile::~ReadConfigFile()>:
 801209a:	4770      	bx	lr

0801209c <ReadConfigFile::Read(char const*, unsigned int)>:
 801209c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120a0:	4606      	mov	r6, r0
 80120a2:	460d      	mov	r5, r1
 80120a4:	4614      	mov	r4, r2
 80120a6:	f04f 0800 	mov.w	r8, #0
 80120aa:	b0a0      	sub	sp, #128	; 0x80
 80120ac:	b33c      	cbz	r4, 80120fe <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80120ae:	466b      	mov	r3, sp
 80120b0:	462a      	mov	r2, r5
 80120b2:	4619      	mov	r1, r3
 80120b4:	e007      	b.n	80120c6 <ReadConfigFile::Read(char const*, unsigned int)+0x2a>
 80120b6:	f803 7b01 	strb.w	r7, [r3], #1
 80120ba:	1a58      	subs	r0, r3, r1
 80120bc:	287f      	cmp	r0, #127	; 0x7f
 80120be:	4615      	mov	r5, r2
 80120c0:	dc1d      	bgt.n	80120fe <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80120c2:	3c01      	subs	r4, #1
 80120c4:	d00f      	beq.n	80120e6 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 80120c6:	7817      	ldrb	r7, [r2, #0]
 80120c8:	4610      	mov	r0, r2
 80120ca:	2f0d      	cmp	r7, #13
 80120cc:	f102 0201 	add.w	r2, r2, #1
 80120d0:	d001      	beq.n	80120d6 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 80120d2:	2f0a      	cmp	r7, #10
 80120d4:	d1ef      	bne.n	80120b6 <ReadConfigFile::Read(char const*, unsigned int)+0x1a>
 80120d6:	4605      	mov	r5, r0
 80120d8:	b12c      	cbz	r4, 80120e6 <ReadConfigFile::Read(char const*, unsigned int)+0x4a>
 80120da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120de:	2a0d      	cmp	r2, #13
 80120e0:	d00b      	beq.n	80120fa <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80120e2:	2a0a      	cmp	r2, #10
 80120e4:	d009      	beq.n	80120fa <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 80120e6:	f89d 2000 	ldrb.w	r2, [sp]
 80120ea:	2a60      	cmp	r2, #96	; 0x60
 80120ec:	d9de      	bls.n	80120ac <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80120ee:	f883 8000 	strb.w	r8, [r3]
 80120f2:	e9d6 3000 	ldrd	r3, r0, [r6]
 80120f6:	4798      	blx	r3
 80120f8:	e7d8      	b.n	80120ac <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 80120fa:	3c01      	subs	r4, #1
 80120fc:	e7eb      	b.n	80120d6 <ReadConfigFile::Read(char const*, unsigned int)+0x3a>
 80120fe:	b020      	add	sp, #128	; 0x80
 8012100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012104 <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 8012104:	b570      	push	{r4, r5, r6, lr}
 8012106:	4615      	mov	r5, r2
 8012108:	461c      	mov	r4, r3
 801210a:	f000 f890 	bl	801222e <Sscan::checkName(char const*, char const*)>
 801210e:	b180      	cbz	r0, 8012132 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2e>
 8012110:	2100      	movs	r1, #0
 8012112:	5c43      	ldrb	r3, [r0, r1]
 8012114:	6826      	ldr	r6, [r4, #0]
 8012116:	b28a      	uxth	r2, r1
 8012118:	b143      	cbz	r3, 801212c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 801211a:	42b2      	cmp	r2, r6
 801211c:	d303      	bcc.n	8012126 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x22>
 801211e:	2b0a      	cmp	r3, #10
 8012120:	d004      	beq.n	801212c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x28>
 8012122:	2002      	movs	r0, #2
 8012124:	e004      	b.n	8012130 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>
 8012126:	546b      	strb	r3, [r5, r1]
 8012128:	3101      	adds	r1, #1
 801212a:	e7f2      	b.n	8012112 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 801212c:	2000      	movs	r0, #0
 801212e:	6022      	str	r2, [r4, #0]
 8012130:	bd70      	pop	{r4, r5, r6, pc}
 8012132:	2001      	movs	r0, #1
 8012134:	e7fc      	b.n	8012130 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2c>

08012136 <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 8012136:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012138:	4615      	mov	r5, r2
 801213a:	f000 f878 	bl	801222e <Sscan::checkName(char const*, char const*)>
 801213e:	bb58      	cbnz	r0, 8012198 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x62>
 8012140:	2001      	movs	r0, #1
 8012142:	e027      	b.n	8012194 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 8012144:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8012148:	2b09      	cmp	r3, #9
 801214a:	d822      	bhi.n	8012192 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 801214c:	4603      	mov	r3, r0
 801214e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012152:	3930      	subs	r1, #48	; 0x30
 8012154:	4618      	mov	r0, r3
 8012156:	f810 2b01 	ldrb.w	r2, [r0], #1
 801215a:	2a2e      	cmp	r2, #46	; 0x2e
 801215c:	d115      	bne.n	801218a <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 801215e:	29ff      	cmp	r1, #255	; 0xff
 8012160:	d817      	bhi.n	8012192 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012162:	3401      	adds	r4, #1
 8012164:	2c03      	cmp	r4, #3
 8012166:	f806 1b01 	strb.w	r1, [r6], #1
 801216a:	d119      	bne.n	80121a0 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6a>
 801216c:	2400      	movs	r4, #0
 801216e:	260a      	movs	r6, #10
 8012170:	1d1a      	adds	r2, r3, #4
 8012172:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8012176:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 801217a:	d115      	bne.n	80121a8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x72>
 801217c:	2cff      	cmp	r4, #255	; 0xff
 801217e:	d808      	bhi.n	8012192 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 8012180:	f88d 4007 	strb.w	r4, [sp, #7]
 8012184:	9b01      	ldr	r3, [sp, #4]
 8012186:	602b      	str	r3, [r5, #0]
 8012188:	e004      	b.n	8012194 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5e>
 801218a:	2a00      	cmp	r2, #0
 801218c:	d0e7      	beq.n	801215e <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 801218e:	42b8      	cmp	r0, r7
 8012190:	d1d8      	bne.n	8012144 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0xe>
 8012192:	2002      	movs	r0, #2
 8012194:	b003      	add	sp, #12
 8012196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012198:	2400      	movs	r4, #0
 801219a:	f04f 0c0a 	mov.w	ip, #10
 801219e:	ae01      	add	r6, sp, #4
 80121a0:	4603      	mov	r3, r0
 80121a2:	2100      	movs	r1, #0
 80121a4:	1d07      	adds	r7, r0, #4
 80121a6:	e7d5      	b.n	8012154 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x1e>
 80121a8:	4293      	cmp	r3, r2
 80121aa:	d0f2      	beq.n	8012192 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80121ac:	3930      	subs	r1, #48	; 0x30
 80121ae:	2909      	cmp	r1, #9
 80121b0:	d8ef      	bhi.n	8012192 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x5c>
 80121b2:	fb06 1404 	mla	r4, r6, r4, r1
 80121b6:	e7dc      	b.n	8012172 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x3c>

080121b8 <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 80121b8:	b538      	push	{r3, r4, r5, lr}
 80121ba:	4615      	mov	r5, r2
 80121bc:	f000 f837 	bl	801222e <Sscan::checkName(char const*, char const*)>
 80121c0:	b1a0      	cbz	r0, 80121ec <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 80121c2:	4604      	mov	r4, r0
 80121c4:	2100      	movs	r1, #0
 80121c6:	220a      	movs	r2, #10
 80121c8:	7823      	ldrb	r3, [r4, #0]
 80121ca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80121ce:	2809      	cmp	r0, #9
 80121d0:	d80e      	bhi.n	80121f0 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 80121d2:	fb02 3101 	mla	r1, r2, r1, r3
 80121d6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80121da:	3930      	subs	r1, #48	; 0x30
 80121dc:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 80121e0:	d1f2      	bne.n	80121c8 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 80121e2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80121e6:	d203      	bcs.n	80121f0 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 80121e8:	8029      	strh	r1, [r5, #0]
 80121ea:	bd38      	pop	{r3, r4, r5, pc}
 80121ec:	2001      	movs	r0, #1
 80121ee:	e7fc      	b.n	80121ea <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 80121f0:	2002      	movs	r0, #2
 80121f2:	e7fa      	b.n	80121ea <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

080121f4 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 80121f4:	b538      	push	{r3, r4, r5, lr}
 80121f6:	4615      	mov	r5, r2
 80121f8:	f000 f819 	bl	801222e <Sscan::checkName(char const*, char const*)>
 80121fc:	b198      	cbz	r0, 8012226 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 80121fe:	4604      	mov	r4, r0
 8012200:	2100      	movs	r1, #0
 8012202:	220a      	movs	r2, #10
 8012204:	7823      	ldrb	r3, [r4, #0]
 8012206:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 801220a:	2809      	cmp	r0, #9
 801220c:	d80d      	bhi.n	801222a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 801220e:	fb02 3101 	mla	r1, r2, r1, r3
 8012212:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012216:	3930      	subs	r1, #48	; 0x30
 8012218:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 801221c:	d1f2      	bne.n	8012204 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 801221e:	29ff      	cmp	r1, #255	; 0xff
 8012220:	d803      	bhi.n	801222a <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8012222:	7029      	strb	r1, [r5, #0]
 8012224:	bd38      	pop	{r3, r4, r5, pc}
 8012226:	2001      	movs	r0, #1
 8012228:	e7fc      	b.n	8012224 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 801222a:	2002      	movs	r0, #2
 801222c:	e7fa      	b.n	8012224 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

0801222e <Sscan::checkName(char const*, char const*)>:
 801222e:	4603      	mov	r3, r0
 8012230:	b510      	push	{r4, lr}
 8012232:	3901      	subs	r1, #1
 8012234:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012238:	461c      	mov	r4, r3
 801223a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801223e:	b120      	cbz	r0, 801224a <Sscan::checkName(char const*, char const*)+0x1c>
 8012240:	b10a      	cbz	r2, 8012246 <Sscan::checkName(char const*, char const*)+0x18>
 8012242:	4290      	cmp	r0, r2
 8012244:	d0f6      	beq.n	8012234 <Sscan::checkName(char const*, char const*)+0x6>
 8012246:	2000      	movs	r0, #0
 8012248:	e006      	b.n	8012258 <Sscan::checkName(char const*, char const*)+0x2a>
 801224a:	2a3d      	cmp	r2, #61	; 0x3d
 801224c:	d104      	bne.n	8012258 <Sscan::checkName(char const*, char const*)+0x2a>
 801224e:	7860      	ldrb	r0, [r4, #1]
 8012250:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8012254:	d000      	beq.n	8012258 <Sscan::checkName(char const*, char const*)+0x2a>
 8012256:	1c60      	adds	r0, r4, #1
 8012258:	bd10      	pop	{r4, pc}

0801225a <LightSet::GetDmxStartAddress()>:
 801225a:	2001      	movs	r0, #1
 801225c:	4770      	bx	lr

0801225e <LightSet::GetDmxFootprint()>:
 801225e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012262:	4770      	bx	lr

08012264 <LightSet::SetDmxStartAddress(unsigned short)>:
 8012264:	2000      	movs	r0, #0
 8012266:	4770      	bx	lr

08012268 <LightSet::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 8012268:	2300      	movs	r3, #0
 801226a:	2001      	movs	r0, #1
 801226c:	7093      	strb	r3, [r2, #2]
 801226e:	8010      	strh	r0, [r2, #0]
 8012270:	4770      	bx	lr
	...

08012274 <Display::PrintInfo() [clone .isra.0]>:
 8012274:	b910      	cbnz	r0, 801227c <Display::PrintInfo() [clone .isra.0]+0x8>
 8012276:	4803      	ldr	r0, [pc, #12]	; (8012284 <Display::PrintInfo() [clone .isra.0]+0x10>)
 8012278:	f000 bf78 	b.w	801316c <puts>
 801227c:	6803      	ldr	r3, [r0, #0]
 801227e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012280:	4718      	bx	r3
 8012282:	bf00      	nop
 8012284:	080172a6 	stmdaeq	r1, {r1, r2, r5, r7, r9, ip, sp, lr}

08012288 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8012288:	b513      	push	{r0, r1, r4, lr}
 801228a:	4604      	mov	r4, r0
 801228c:	0a13      	lsrs	r3, r2, #8
 801228e:	7800      	ldrb	r0, [r0, #0]
 8012290:	f88d 1004 	strb.w	r1, [sp, #4]
 8012294:	f88d 3005 	strb.w	r3, [sp, #5]
 8012298:	f88d 2006 	strb.w	r2, [sp, #6]
 801229c:	f001 fec4 	bl	8014028 <gd32_i2c_set_address>
 80122a0:	6860      	ldr	r0, [r4, #4]
 80122a2:	f001 feb9 	bl	8014018 <gd32_i2c_set_baudrate>
 80122a6:	2103      	movs	r1, #3
 80122a8:	a801      	add	r0, sp, #4
 80122aa:	f001 fec3 	bl	8014034 <gd32_i2c_write>
 80122ae:	b002      	add	sp, #8
 80122b0:	bd10      	pop	{r4, pc}

080122b2 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>:
 80122b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122b4:	460d      	mov	r5, r1
 80122b6:	4604      	mov	r4, r0
 80122b8:	f001 feb6 	bl	8014028 <gd32_i2c_set_address>
 80122bc:	4628      	mov	r0, r5
 80122be:	f001 feab 	bl	8014018 <gd32_i2c_set_baudrate>
 80122c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80122c6:	2b07      	cmp	r3, #7
 80122c8:	d902      	bls.n	80122d0 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x1e>
 80122ca:	3c50      	subs	r4, #80	; 0x50
 80122cc:	2c0f      	cmp	r4, #15
 80122ce:	d809      	bhi.n	80122e4 <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x32>
 80122d0:	2101      	movs	r1, #1
 80122d2:	f10d 0007 	add.w	r0, sp, #7
 80122d6:	f001 ff13 	bl	8014100 <gd32_i2c_read>
 80122da:	fab0 f080 	clz	r0, r0
 80122de:	0940      	lsrs	r0, r0, #5
 80122e0:	b003      	add	sp, #12
 80122e2:	bd30      	pop	{r4, r5, pc}
 80122e4:	2100      	movs	r1, #0
 80122e6:	4608      	mov	r0, r1
 80122e8:	f001 fea4 	bl	8014034 <gd32_i2c_write>
 80122ec:	e7f5      	b.n	80122da <HAL_I2C::IsConnected_(unsigned char, unsigned int)+0x28>

080122ee <Display::Detect7Segment()>:
 80122ee:	b538      	push	{r3, r4, r5, lr}
 80122f0:	68c1      	ldr	r1, [r0, #12]
 80122f2:	4604      	mov	r4, r0
 80122f4:	7a00      	ldrb	r0, [r0, #8]
 80122f6:	f7ff ffdc 	bl	80122b2 <HAL_I2C::IsConnected_(unsigned char, unsigned int)>
 80122fa:	7460      	strb	r0, [r4, #17]
 80122fc:	b170      	cbz	r0, 801231c <Display::Detect7Segment()+0x2e>
 80122fe:	2200      	movs	r2, #0
 8012300:	f104 0508 	add.w	r5, r4, #8
 8012304:	4611      	mov	r1, r2
 8012306:	4628      	mov	r0, r5
 8012308:	f7ff ffbe 	bl	8012288 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 801230c:	7c63      	ldrb	r3, [r4, #17]
 801230e:	b12b      	cbz	r3, 801231c <Display::Detect7Segment()+0x2e>
 8012310:	f24c 02ff 	movw	r2, #49407	; 0xc0ff
 8012314:	2112      	movs	r1, #18
 8012316:	4628      	mov	r0, r5
 8012318:	f7ff ffb6 	bl	8012288 <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 801231c:	bd38      	pop	{r3, r4, r5, pc}

0801231e <Display::Detect(display::Type)>:
 801231e:	2902      	cmp	r1, #2
 8012320:	b538      	push	{r3, r4, r5, lr}
 8012322:	4604      	mov	r4, r0
 8012324:	d014      	beq.n	8012350 <Display::Detect(display::Type)+0x32>
 8012326:	2904      	cmp	r1, #4
 8012328:	d01b      	beq.n	8012362 <Display::Detect(display::Type)+0x44>
 801232a:	69a0      	ldr	r0, [r4, #24]
 801232c:	b168      	cbz	r0, 801234a <Display::Detect(display::Type)+0x2c>
 801232e:	6803      	ldr	r3, [r0, #0]
 8012330:	689b      	ldr	r3, [r3, #8]
 8012332:	4798      	blx	r3
 8012334:	4603      	mov	r3, r0
 8012336:	69a0      	ldr	r0, [r4, #24]
 8012338:	b9ab      	cbnz	r3, 8012366 <Display::Detect(display::Type)+0x48>
 801233a:	b110      	cbz	r0, 8012342 <Display::Detect(display::Type)+0x24>
 801233c:	6803      	ldr	r3, [r0, #0]
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	4798      	blx	r3
 8012342:	2300      	movs	r3, #0
 8012344:	61a3      	str	r3, [r4, #24]
 8012346:	2304      	movs	r3, #4
 8012348:	6023      	str	r3, [r4, #0]
 801234a:	2300      	movs	r3, #0
 801234c:	6163      	str	r3, [r4, #20]
 801234e:	e010      	b.n	8012372 <Display::Detect(display::Type)+0x54>
 8012350:	2018      	movs	r0, #24
 8012352:	f000 fbcb 	bl	8012aec <operator new(unsigned int)>
 8012356:	4605      	mov	r5, r0
 8012358:	2100      	movs	r1, #0
 801235a:	f000 f89d 	bl	8012498 <Ssd1306::Ssd1306(TOledPanel)>
 801235e:	61a5      	str	r5, [r4, #24]
 8012360:	e7e3      	b.n	801232a <Display::Detect(display::Type)+0xc>
 8012362:	6001      	str	r1, [r0, #0]
 8012364:	e7e1      	b.n	801232a <Display::Detect(display::Type)+0xc>
 8012366:	6803      	ldr	r3, [r0, #0]
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	4798      	blx	r3
 801236c:	69a3      	ldr	r3, [r4, #24]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d0eb      	beq.n	801234a <Display::Detect(display::Type)+0x2c>
 8012372:	bd38      	pop	{r3, r4, r5, pc}

08012374 <Display::Display()>:
 8012374:	2304      	movs	r3, #4
 8012376:	b510      	push	{r4, lr}
 8012378:	6003      	str	r3, [r0, #0]
 801237a:	4b0f      	ldr	r3, [pc, #60]	; (80123b8 <Display::Display()+0x44>)
 801237c:	4604      	mov	r4, r0
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4a0e      	ldr	r2, [pc, #56]	; (80123bc <Display::Display()+0x48>)
 8012382:	6043      	str	r3, [r0, #4]
 8012384:	2321      	movs	r3, #33	; 0x21
 8012386:	7203      	strb	r3, [r0, #8]
 8012388:	4b0d      	ldr	r3, [pc, #52]	; (80123c0 <Display::Display()+0x4c>)
 801238a:	2102      	movs	r1, #2
 801238c:	60c3      	str	r3, [r0, #12]
 801238e:	2300      	movs	r3, #0
 8012390:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8012394:	8203      	strh	r3, [r0, #16]
 8012396:	4b0b      	ldr	r3, [pc, #44]	; (80123c4 <Display::Display()+0x50>)
 8012398:	6018      	str	r0, [r3, #0]
 801239a:	f7ff ffc0 	bl	801231e <Display::Detect(display::Type)>
 801239e:	4620      	mov	r0, r4
 80123a0:	f7ff ffa5 	bl	80122ee <Display::Detect7Segment()>
 80123a4:	69a3      	ldr	r3, [r4, #24]
 80123a6:	b10b      	cbz	r3, 80123ac <Display::Display()+0x38>
 80123a8:	f7f5 fcec 	bl	8007d84 <display::timeout::gpio_init()>
 80123ac:	69a0      	ldr	r0, [r4, #24]
 80123ae:	f7ff ff61 	bl	8012274 <Display::PrintInfo() [clone .isra.0]>
 80123b2:	4620      	mov	r0, r4
 80123b4:	bd10      	pop	{r4, pc}
 80123b6:	bf00      	nop
 80123b8:	2000a24c 	andcs	sl, r0, ip, asr #4
 80123bc:	000493e0 	andeq	r9, r4, r0, ror #7
 80123c0:	00061a80 	andeq	r1, r6, r0, lsl #21
 80123c4:	2000a140 	andcs	sl, r0, r0, asr #2

080123c8 <Ssd1306::~Ssd1306()>:
 80123c8:	4770      	bx	lr

080123ca <Ssd1306::SetCursor(unsigned int)>:
 80123ca:	4770      	bx	lr

080123cc <Ssd1306::PrintInfo()>:
 80123cc:	b410      	push	{r4}
 80123ce:	4906      	ldr	r1, [pc, #24]	; (80123e8 <Ssd1306::PrintInfo()+0x1c>)
 80123d0:	7c44      	ldrb	r4, [r0, #17]
 80123d2:	7903      	ldrb	r3, [r0, #4]
 80123d4:	7942      	ldrb	r2, [r0, #5]
 80123d6:	4805      	ldr	r0, [pc, #20]	; (80123ec <Ssd1306::PrintInfo()+0x20>)
 80123d8:	2c00      	cmp	r4, #0
 80123da:	bf08      	it	eq
 80123dc:	4601      	moveq	r1, r0
 80123de:	4804      	ldr	r0, [pc, #16]	; (80123f0 <Ssd1306::PrintInfo()+0x24>)
 80123e0:	bc10      	pop	{r4}
 80123e2:	f000 be73 	b.w	80130cc <printf>
 80123e6:	bf00      	nop
 80123e8:	080172b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r9, ip, sp, lr}
 80123ec:	080172be 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r9, ip, sp, lr}
 80123f0:	080172c6 	stmdaeq	r1, {r1, r2, r6, r7, r9, ip, sp, lr}

080123f4 <Ssd1306::~Ssd1306()>:
 80123f4:	b510      	push	{r4, lr}
 80123f6:	4604      	mov	r4, r0
 80123f8:	f000 fb74 	bl	8012ae4 <operator delete(void*)>
 80123fc:	4620      	mov	r0, r4
 80123fe:	bd10      	pop	{r4, pc}

08012400 <HAL_I2C::Setup()>:
 8012400:	b510      	push	{r4, lr}
 8012402:	4604      	mov	r4, r0
 8012404:	7800      	ldrb	r0, [r0, #0]
 8012406:	f001 fe0f 	bl	8014028 <gd32_i2c_set_address>
 801240a:	6860      	ldr	r0, [r4, #4]
 801240c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012410:	f001 be02 	b.w	8014018 <gd32_i2c_set_baudrate>

08012414 <Ssd1306::PutChar(int)>:
 8012414:	b510      	push	{r4, lr}
 8012416:	f1a1 0420 	sub.w	r4, r1, #32
 801241a:	2c5f      	cmp	r4, #95	; 0x5f
 801241c:	bf88      	it	hi
 801241e:	2400      	movhi	r4, #0
 8012420:	3008      	adds	r0, #8
 8012422:	f7ff ffed 	bl	8012400 <HAL_I2C::Setup()>
 8012426:	4804      	ldr	r0, [pc, #16]	; (8012438 <Ssd1306::PutChar(int)+0x24>)
 8012428:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 801242c:	4420      	add	r0, r4
 801242e:	2107      	movs	r1, #7
 8012430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012434:	f001 bdfe 	b.w	8014034 <gd32_i2c_write>
 8012438:	080172d8 	stmdaeq	r1, {r3, r4, r6, r7, r9, ip, sp, lr}

0801243c <Ssd1306::PutString(char const*)>:
 801243c:	b538      	push	{r3, r4, r5, lr}
 801243e:	4605      	mov	r5, r0
 8012440:	1e4c      	subs	r4, r1, #1
 8012442:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8012446:	b901      	cbnz	r1, 801244a <Ssd1306::PutString(char const*)+0xe>
 8012448:	bd38      	pop	{r3, r4, r5, pc}
 801244a:	4628      	mov	r0, r5
 801244c:	f7ff ffe2 	bl	8012414 <Ssd1306::PutChar(int)>
 8012450:	e7f7      	b.n	8012442 <Ssd1306::PutString(char const*)+0x6>

08012452 <Ssd1306::Text(char const*, unsigned int)>:
 8012452:	b570      	push	{r4, r5, r6, lr}
 8012454:	7903      	ldrb	r3, [r0, #4]
 8012456:	4605      	mov	r5, r0
 8012458:	460c      	mov	r4, r1
 801245a:	4293      	cmp	r3, r2
 801245c:	bf94      	ite	ls
 801245e:	18ce      	addls	r6, r1, r3
 8012460:	188e      	addhi	r6, r1, r2
 8012462:	42b4      	cmp	r4, r6
 8012464:	d100      	bne.n	8012468 <Ssd1306::Text(char const*, unsigned int)+0x16>
 8012466:	bd70      	pop	{r4, r5, r6, pc}
 8012468:	4628      	mov	r0, r5
 801246a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801246e:	f7ff ffd1 	bl	8012414 <Ssd1306::PutChar(int)>
 8012472:	e7f6      	b.n	8012462 <Ssd1306::Text(char const*, unsigned int)+0x10>

08012474 <Ssd1306::InitMembers()>:
 8012474:	7c03      	ldrb	r3, [r0, #16]
 8012476:	b14b      	cbz	r3, 801248c <Ssd1306::InitMembers()+0x18>
 8012478:	3b01      	subs	r3, #1
 801247a:	2b01      	cmp	r3, #1
 801247c:	d909      	bls.n	8012492 <Ssd1306::InitMembers()+0x1e>
 801247e:	2308      	movs	r3, #8
 8012480:	2204      	movs	r2, #4
 8012482:	2115      	movs	r1, #21
 8012484:	7143      	strb	r3, [r0, #5]
 8012486:	7101      	strb	r1, [r0, #4]
 8012488:	6142      	str	r2, [r0, #20]
 801248a:	4770      	bx	lr
 801248c:	2308      	movs	r3, #8
 801248e:	461a      	mov	r2, r3
 8012490:	e7f7      	b.n	8012482 <Ssd1306::InitMembers()+0xe>
 8012492:	2304      	movs	r3, #4
 8012494:	e7fb      	b.n	801248e <Ssd1306::InitMembers()+0x1a>
	...

08012498 <Ssd1306::Ssd1306(TOledPanel)>:
 8012498:	4a08      	ldr	r2, [pc, #32]	; (80124bc <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 801249a:	b508      	push	{r3, lr}
 801249c:	6002      	str	r2, [r0, #0]
 801249e:	227f      	movs	r2, #127	; 0x7f
 80124a0:	80c2      	strh	r2, [r0, #6]
 80124a2:	223c      	movs	r2, #60	; 0x3c
 80124a4:	7202      	strb	r2, [r0, #8]
 80124a6:	4a06      	ldr	r2, [pc, #24]	; (80124c0 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 80124a8:	7401      	strb	r1, [r0, #16]
 80124aa:	60c2      	str	r2, [r0, #12]
 80124ac:	2200      	movs	r2, #0
 80124ae:	7442      	strb	r2, [r0, #17]
 80124b0:	4a04      	ldr	r2, [pc, #16]	; (80124c4 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 80124b2:	6010      	str	r0, [r2, #0]
 80124b4:	f7ff ffde 	bl	8012474 <Ssd1306::InitMembers()>
 80124b8:	bd08      	pop	{r3, pc}
 80124ba:	bf00      	nop
 80124bc:	080175b0 	stmdaeq	r1, {r4, r5, r7, r8, sl, ip, sp, lr}
 80124c0:	00061a80 	andeq	r1, r6, r0, lsl #21
 80124c4:	2000a1cc 	andcs	sl, r0, ip, asr #3

080124c8 <Ssd1306::SendCommand(unsigned char)>:
 80124c8:	2300      	movs	r3, #0
 80124ca:	b507      	push	{r0, r1, r2, lr}
 80124cc:	3008      	adds	r0, #8
 80124ce:	f88d 3004 	strb.w	r3, [sp, #4]
 80124d2:	f88d 1005 	strb.w	r1, [sp, #5]
 80124d6:	f7ff ff93 	bl	8012400 <HAL_I2C::Setup()>
 80124da:	2102      	movs	r1, #2
 80124dc:	a801      	add	r0, sp, #4
 80124de:	f001 fda9 	bl	8014034 <gd32_i2c_write>
 80124e2:	b003      	add	sp, #12
 80124e4:	f85d fb04 	ldr.w	pc, [sp], #4

080124e8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 80124e8:	2914      	cmp	r1, #20
 80124ea:	b570      	push	{r4, r5, r6, lr}
 80124ec:	4605      	mov	r5, r0
 80124ee:	4616      	mov	r6, r2
 80124f0:	d81c      	bhi.n	801252c <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80124f2:	7943      	ldrb	r3, [r0, #5]
 80124f4:	4293      	cmp	r3, r2
 80124f6:	d919      	bls.n	801252c <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 80124f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80124fc:	7c43      	ldrb	r3, [r0, #17]
 80124fe:	004c      	lsls	r4, r1, #1
 8012500:	b2e4      	uxtb	r4, r4
 8012502:	b10b      	cbz	r3, 8012508 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8012504:	3404      	adds	r4, #4
 8012506:	b2e4      	uxtb	r4, r4
 8012508:	4628      	mov	r0, r5
 801250a:	f004 010e 	and.w	r1, r4, #14
 801250e:	f7ff ffdb 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 8012512:	0921      	lsrs	r1, r4, #4
 8012514:	4628      	mov	r0, r5
 8012516:	f041 0110 	orr.w	r1, r1, #16
 801251a:	f7ff ffd5 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 801251e:	4628      	mov	r0, r5
 8012520:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 8012524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012528:	f7ff bfce 	b.w	80124c8 <Ssd1306::SendCommand(unsigned char)>
 801252c:	bd70      	pop	{r4, r5, r6, pc}

0801252e <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 801252e:	b570      	push	{r4, r5, r6, lr}
 8012530:	461e      	mov	r6, r3
 8012532:	7943      	ldrb	r3, [r0, #5]
 8012534:	4604      	mov	r4, r0
 8012536:	428b      	cmp	r3, r1
 8012538:	4615      	mov	r5, r2
 801253a:	d30b      	bcc.n	8012554 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x26>
 801253c:	3901      	subs	r1, #1
 801253e:	b2ca      	uxtb	r2, r1
 8012540:	2100      	movs	r1, #0
 8012542:	f7ff ffd1 	bl	80124e8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8012546:	4632      	mov	r2, r6
 8012548:	4629      	mov	r1, r5
 801254a:	4620      	mov	r0, r4
 801254c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012550:	f7ff bf7f 	b.w	8012452 <Ssd1306::Text(char const*, unsigned int)>
 8012554:	bd70      	pop	{r4, r5, r6, pc}
	...

08012558 <Ssd1306::ClearLine(unsigned char)>:
 8012558:	b538      	push	{r3, r4, r5, lr}
 801255a:	7943      	ldrb	r3, [r0, #5]
 801255c:	4605      	mov	r5, r0
 801255e:	428b      	cmp	r3, r1
 8012560:	d314      	bcc.n	801258c <Ssd1306::ClearLine(unsigned char)+0x34>
 8012562:	3901      	subs	r1, #1
 8012564:	b2cc      	uxtb	r4, r1
 8012566:	4622      	mov	r2, r4
 8012568:	2100      	movs	r1, #0
 801256a:	f7ff ffbd 	bl	80124e8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 801256e:	f105 0008 	add.w	r0, r5, #8
 8012572:	f7ff ff45 	bl	8012400 <HAL_I2C::Setup()>
 8012576:	2181      	movs	r1, #129	; 0x81
 8012578:	4805      	ldr	r0, [pc, #20]	; (8012590 <Ssd1306::ClearLine(unsigned char)+0x38>)
 801257a:	f001 fd5b 	bl	8014034 <gd32_i2c_write>
 801257e:	4622      	mov	r2, r4
 8012580:	4628      	mov	r0, r5
 8012582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012586:	2100      	movs	r1, #0
 8012588:	f7ff bfae 	b.w	80124e8 <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 801258c:	bd38      	pop	{r3, r4, r5, pc}
 801258e:	bf00      	nop
 8012590:	2000a144 	andcs	sl, r0, r4, asr #2

08012594 <Ssd1306::SetSleep(bool)>:
 8012594:	b111      	cbz	r1, 801259c <Ssd1306::SetSleep(bool)+0x8>
 8012596:	21ae      	movs	r1, #174	; 0xae
 8012598:	f7ff bf96 	b.w	80124c8 <Ssd1306::SendCommand(unsigned char)>
 801259c:	21af      	movs	r1, #175	; 0xaf
 801259e:	e7fb      	b.n	8012598 <Ssd1306::SetSleep(bool)+0x4>

080125a0 <Ssd1306::SetContrast(unsigned char)>:
 80125a0:	b538      	push	{r3, r4, r5, lr}
 80125a2:	4604      	mov	r4, r0
 80125a4:	460d      	mov	r5, r1
 80125a6:	7181      	strb	r1, [r0, #6]
 80125a8:	2181      	movs	r1, #129	; 0x81
 80125aa:	f7ff ff8d 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80125ae:	4629      	mov	r1, r5
 80125b0:	4620      	mov	r0, r4
 80125b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125b6:	f7ff bf87 	b.w	80124c8 <Ssd1306::SendCommand(unsigned char)>

080125ba <Ssd1306::SetFlipVertically(bool)>:
 80125ba:	b510      	push	{r4, lr}
 80125bc:	4604      	mov	r4, r0
 80125be:	71c1      	strb	r1, [r0, #7]
 80125c0:	b141      	cbz	r1, 80125d4 <Ssd1306::SetFlipVertically(bool)+0x1a>
 80125c2:	21c0      	movs	r1, #192	; 0xc0
 80125c4:	f7ff ff80 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80125c8:	21a0      	movs	r1, #160	; 0xa0
 80125ca:	4620      	mov	r0, r4
 80125cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125d0:	f7ff bf7a 	b.w	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80125d4:	21c8      	movs	r1, #200	; 0xc8
 80125d6:	f7ff ff77 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80125da:	21a1      	movs	r1, #161	; 0xa1
 80125dc:	e7f5      	b.n	80125ca <Ssd1306::SetFlipVertically(bool)+0x10>
	...

080125e0 <Ssd1306::CheckSH1106()>:
 80125e0:	b530      	push	{r4, r5, lr}
 80125e2:	4604      	mov	r4, r0
 80125e4:	b087      	sub	sp, #28
 80125e6:	2100      	movs	r1, #0
 80125e8:	f7ff ff6e 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80125ec:	2190      	movs	r1, #144	; 0x90
 80125ee:	4620      	mov	r0, r4
 80125f0:	f7ff ff6a 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80125f4:	21b0      	movs	r1, #176	; 0xb0
 80125f6:	4620      	mov	r0, r4
 80125f8:	f7ff ff66 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80125fc:	4b22      	ldr	r3, [pc, #136]	; (8012688 <Ssd1306::CheckSH1106()+0xa8>)
 80125fe:	f104 0508 	add.w	r5, r4, #8
 8012602:	6818      	ldr	r0, [r3, #0]
 8012604:	791b      	ldrb	r3, [r3, #4]
 8012606:	9002      	str	r0, [sp, #8]
 8012608:	4628      	mov	r0, r5
 801260a:	f88d 300c 	strb.w	r3, [sp, #12]
 801260e:	f7ff fef7 	bl	8012400 <HAL_I2C::Setup()>
 8012612:	2105      	movs	r1, #5
 8012614:	a802      	add	r0, sp, #8
 8012616:	f001 fd0d 	bl	8014034 <gd32_i2c_write>
 801261a:	2100      	movs	r1, #0
 801261c:	4620      	mov	r0, r4
 801261e:	f7ff ff53 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 8012622:	2190      	movs	r1, #144	; 0x90
 8012624:	4620      	mov	r0, r4
 8012626:	f7ff ff4f 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 801262a:	21b0      	movs	r1, #176	; 0xb0
 801262c:	4620      	mov	r0, r4
 801262e:	f7ff ff4b 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 8012632:	2300      	movs	r3, #0
 8012634:	9304      	str	r3, [sp, #16]
 8012636:	f88d 3014 	strb.w	r3, [sp, #20]
 801263a:	2340      	movs	r3, #64	; 0x40
 801263c:	4628      	mov	r0, r5
 801263e:	f88d 3007 	strb.w	r3, [sp, #7]
 8012642:	f7ff fedd 	bl	8012400 <HAL_I2C::Setup()>
 8012646:	2101      	movs	r1, #1
 8012648:	f10d 0007 	add.w	r0, sp, #7
 801264c:	f001 fcf2 	bl	8014034 <gd32_i2c_write>
 8012650:	4628      	mov	r0, r5
 8012652:	f7ff fed5 	bl	8012400 <HAL_I2C::Setup()>
 8012656:	2105      	movs	r1, #5
 8012658:	a804      	add	r0, sp, #16
 801265a:	f001 fd51 	bl	8014100 <gd32_i2c_read>
 801265e:	2004      	movs	r0, #4
 8012660:	aa02      	add	r2, sp, #8
 8012662:	a904      	add	r1, sp, #16
 8012664:	3801      	subs	r0, #1
 8012666:	d201      	bcs.n	801266c <Ssd1306::CheckSH1106()+0x8c>
 8012668:	2300      	movs	r3, #0
 801266a:	e006      	b.n	801267a <Ssd1306::CheckSH1106()+0x9a>
 801266c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012670:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8012674:	42ab      	cmp	r3, r5
 8012676:	d0f5      	beq.n	8012664 <Ssd1306::CheckSH1106()+0x84>
 8012678:	1b5b      	subs	r3, r3, r5
 801267a:	fab3 f383 	clz	r3, r3
 801267e:	095b      	lsrs	r3, r3, #5
 8012680:	7463      	strb	r3, [r4, #17]
 8012682:	b007      	add	sp, #28
 8012684:	bd30      	pop	{r4, r5, pc}
 8012686:	bf00      	nop
 8012688:	080172d2 	stmdaeq	r1, {r1, r4, r6, r7, r9, ip, sp, lr}

0801268c <Ssd1306::Cls()>:
 801268c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012690:	4604      	mov	r4, r0
 8012692:	2600      	movs	r6, #0
 8012694:	7c45      	ldrb	r5, [r0, #17]
 8012696:	00ad      	lsls	r5, r5, #2
 8012698:	b2ed      	uxtb	r5, r5
 801269a:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 801269e:	f045 0810 	orr.w	r8, r5, #16
 80126a2:	b2ff      	uxtb	r7, r7
 80126a4:	6963      	ldr	r3, [r4, #20]
 80126a6:	4629      	mov	r1, r5
 80126a8:	42b3      	cmp	r3, r6
 80126aa:	4620      	mov	r0, r4
 80126ac:	d80b      	bhi.n	80126c6 <Ssd1306::Cls()+0x3a>
 80126ae:	f7ff ff0b 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80126b2:	4641      	mov	r1, r8
 80126b4:	4620      	mov	r0, r4
 80126b6:	f7ff ff07 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80126ba:	4620      	mov	r0, r4
 80126bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80126c0:	21b0      	movs	r1, #176	; 0xb0
 80126c2:	f7ff bf01 	b.w	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80126c6:	f7ff feff 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80126ca:	4641      	mov	r1, r8
 80126cc:	4620      	mov	r0, r4
 80126ce:	f7ff fefb 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80126d2:	f066 014f 	orn	r1, r6, #79	; 0x4f
 80126d6:	4620      	mov	r0, r4
 80126d8:	b2c9      	uxtb	r1, r1
 80126da:	f7ff fef5 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80126de:	7c23      	ldrb	r3, [r4, #16]
 80126e0:	b123      	cbz	r3, 80126ec <Ssd1306::Cls()+0x60>
 80126e2:	3b01      	subs	r3, #1
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	d901      	bls.n	80126ec <Ssd1306::Cls()+0x60>
 80126e8:	3601      	adds	r6, #1
 80126ea:	e7db      	b.n	80126a4 <Ssd1306::Cls()+0x18>
 80126ec:	f104 0008 	add.w	r0, r4, #8
 80126f0:	f7ff fe86 	bl	8012400 <HAL_I2C::Setup()>
 80126f4:	4639      	mov	r1, r7
 80126f6:	4802      	ldr	r0, [pc, #8]	; (8012700 <Ssd1306::Cls()+0x74>)
 80126f8:	f001 fc9c 	bl	8014034 <gd32_i2c_write>
 80126fc:	e7f4      	b.n	80126e8 <Ssd1306::Cls()+0x5c>
 80126fe:	bf00      	nop
 8012700:	2000a144 	andcs	sl, r0, r4, asr #2

08012704 <Ssd1306::Start()>:
 8012704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012706:	7a04      	ldrb	r4, [r0, #8]
 8012708:	68c6      	ldr	r6, [r0, #12]
 801270a:	4605      	mov	r5, r0
 801270c:	4620      	mov	r0, r4
 801270e:	f001 fc8b 	bl	8014028 <gd32_i2c_set_address>
 8012712:	4630      	mov	r0, r6
 8012714:	f001 fc80 	bl	8014018 <gd32_i2c_set_baudrate>
 8012718:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801271c:	2b07      	cmp	r3, #7
 801271e:	d902      	bls.n	8012726 <Ssd1306::Start()+0x22>
 8012720:	3c50      	subs	r4, #80	; 0x50
 8012722:	2c0f      	cmp	r4, #15
 8012724:	d80f      	bhi.n	8012746 <Ssd1306::Start()+0x42>
 8012726:	2101      	movs	r1, #1
 8012728:	f10d 0007 	add.w	r0, sp, #7
 801272c:	f001 fce8 	bl	8014100 <gd32_i2c_read>
 8012730:	fab0 f480 	clz	r4, r0
 8012734:	0964      	lsrs	r4, r4, #5
 8012736:	b35c      	cbz	r4, 8012790 <Ssd1306::Start()+0x8c>
 8012738:	7c2e      	ldrb	r6, [r5, #16]
 801273a:	b14e      	cbz	r6, 8012750 <Ssd1306::Start()+0x4c>
 801273c:	3e01      	subs	r6, #1
 801273e:	2e01      	cmp	r6, #1
 8012740:	d929      	bls.n	8012796 <Ssd1306::Start()+0x92>
 8012742:	2400      	movs	r4, #0
 8012744:	e024      	b.n	8012790 <Ssd1306::Start()+0x8c>
 8012746:	2100      	movs	r1, #0
 8012748:	4608      	mov	r0, r1
 801274a:	f001 fc73 	bl	8014034 <gd32_i2c_write>
 801274e:	e7ef      	b.n	8012730 <Ssd1306::Start()+0x2c>
 8012750:	4f16      	ldr	r7, [pc, #88]	; (80127ac <Ssd1306::Start()+0xa8>)
 8012752:	4628      	mov	r0, r5
 8012754:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012758:	3601      	adds	r6, #1
 801275a:	f7ff feb5 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 801275e:	2e18      	cmp	r6, #24
 8012760:	d1f7      	bne.n	8012752 <Ssd1306::Start()+0x4e>
 8012762:	2300      	movs	r3, #0
 8012764:	4a12      	ldr	r2, [pc, #72]	; (80127b0 <Ssd1306::Start()+0xac>)
 8012766:	4618      	mov	r0, r3
 8012768:	4611      	mov	r1, r2
 801276a:	3301      	adds	r3, #1
 801276c:	2b86      	cmp	r3, #134	; 0x86
 801276e:	f802 0b01 	strb.w	r0, [r2], #1
 8012772:	d1fa      	bne.n	801276a <Ssd1306::Start()+0x66>
 8012774:	2340      	movs	r3, #64	; 0x40
 8012776:	4628      	mov	r0, r5
 8012778:	700b      	strb	r3, [r1, #0]
 801277a:	f7ff ff31 	bl	80125e0 <Ssd1306::CheckSH1106()>
 801277e:	4628      	mov	r0, r5
 8012780:	f7ff ff84 	bl	801268c <Ssd1306::Cls()>
 8012784:	21af      	movs	r1, #175	; 0xaf
 8012786:	4628      	mov	r0, r5
 8012788:	f7ff fe9e 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 801278c:	2301      	movs	r3, #1
 801278e:	71eb      	strb	r3, [r5, #7]
 8012790:	4620      	mov	r0, r4
 8012792:	b003      	add	sp, #12
 8012794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012796:	2600      	movs	r6, #0
 8012798:	4f06      	ldr	r7, [pc, #24]	; (80127b4 <Ssd1306::Start()+0xb0>)
 801279a:	4628      	mov	r0, r5
 801279c:	f817 1b01 	ldrb.w	r1, [r7], #1
 80127a0:	3601      	adds	r6, #1
 80127a2:	f7ff fe91 	bl	80124c8 <Ssd1306::SendCommand(unsigned char)>
 80127a6:	2e18      	cmp	r6, #24
 80127a8:	d1f7      	bne.n	801279a <Ssd1306::Start()+0x96>
 80127aa:	e7da      	b.n	8012762 <Ssd1306::Start()+0x5e>
 80127ac:	08017590 	stmdaeq	r1, {r4, r7, r8, sl, ip, sp, lr}
 80127b0:	2000a144 	andcs	sl, r0, r4, asr #2
 80127b4:	08017578 	stmdaeq	r1, {r3, r4, r5, r6, r8, sl, ip, sp, lr}

080127b8 <console_putc>:
 80127b8:	f000 bdda 	b.w	8013370 <uart0_putc>

080127bc <console_puts>:
 80127bc:	f000 bdf8 	b.w	80133b0 <uart0_puts>

080127c0 <console_set_fg_color>:
 80127c0:	2807      	cmp	r0, #7
 80127c2:	d810      	bhi.n	80127e6 <console_set_fg_color+0x26>
 80127c4:	e8df f000 	tbb	[pc, r0]
 80127c8:	0b090704 	bleq	82543e0 <__exidx_end+0x23ccfc>
 80127cc:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8012798 <Ssd1306::Start()+0x94>
 80127d0:	4806      	ldr	r0, [pc, #24]	; (80127ec <console_set_fg_color+0x2c>)
 80127d2:	f000 bded 	b.w	80133b0 <uart0_puts>
 80127d6:	4806      	ldr	r0, [pc, #24]	; (80127f0 <console_set_fg_color+0x30>)
 80127d8:	e7fb      	b.n	80127d2 <console_set_fg_color+0x12>
 80127da:	4806      	ldr	r0, [pc, #24]	; (80127f4 <console_set_fg_color+0x34>)
 80127dc:	e7f9      	b.n	80127d2 <console_set_fg_color+0x12>
 80127de:	4806      	ldr	r0, [pc, #24]	; (80127f8 <console_set_fg_color+0x38>)
 80127e0:	e7f7      	b.n	80127d2 <console_set_fg_color+0x12>
 80127e2:	4806      	ldr	r0, [pc, #24]	; (80127fc <console_set_fg_color+0x3c>)
 80127e4:	e7f5      	b.n	80127d2 <console_set_fg_color+0x12>
 80127e6:	4806      	ldr	r0, [pc, #24]	; (8012800 <console_set_fg_color+0x40>)
 80127e8:	e7f3      	b.n	80127d2 <console_set_fg_color+0x12>
 80127ea:	bf00      	nop
 80127ec:	080175ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, sl, ip, sp, lr}
 80127f0:	080175f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 80127f4:	080175fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 80127f8:	08017600 	stmdaeq	r1, {r9, sl, ip, sp, lr}
 80127fc:	080153f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, ip, lr}
 8012800:	08017606 	stmdaeq	r1, {r1, r2, r9, sl, ip, sp, lr}

08012804 <console_error>:
 8012804:	b510      	push	{r4, lr}
 8012806:	4604      	mov	r4, r0
 8012808:	4805      	ldr	r0, [pc, #20]	; (8012820 <console_error+0x1c>)
 801280a:	f000 fdd1 	bl	80133b0 <uart0_puts>
 801280e:	4620      	mov	r0, r4
 8012810:	f000 fdce 	bl	80133b0 <uart0_puts>
 8012814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012818:	4802      	ldr	r0, [pc, #8]	; (8012824 <console_error+0x20>)
 801281a:	f000 bdc9 	b.w	80133b0 <uart0_puts>
 801281e:	bf00      	nop
 8012820:	080175f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, sl, ip, sp, lr}
 8012824:	080153f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, ip, lr}

08012828 <console_status>:
 8012828:	b510      	push	{r4, lr}
 801282a:	460c      	mov	r4, r1
 801282c:	b280      	uxth	r0, r0
 801282e:	f7ff ffc7 	bl	80127c0 <console_set_fg_color>
 8012832:	4807      	ldr	r0, [pc, #28]	; (8012850 <console_status+0x28>)
 8012834:	f000 fdbc 	bl	80133b0 <uart0_puts>
 8012838:	4620      	mov	r0, r4
 801283a:	f000 fdb9 	bl	80133b0 <uart0_puts>
 801283e:	200a      	movs	r0, #10
 8012840:	f000 fd96 	bl	8013370 <uart0_putc>
 8012844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012848:	4802      	ldr	r0, [pc, #8]	; (8012854 <console_status+0x2c>)
 801284a:	f000 bdb1 	b.w	80133b0 <uart0_puts>
 801284e:	bf00      	nop
 8012850:	080175e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, sl, ip, sp, lr}
 8012854:	080153f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, ip, lr}

08012858 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8012858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801285c:	4617      	mov	r7, r2
 801285e:	461e      	mov	r6, r3
 8012860:	4d14      	ldr	r5, [pc, #80]	; (80128b4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 8012862:	4b15      	ldr	r3, [pc, #84]	; (80128b8 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8012864:	b086      	sub	sp, #24
 8012866:	6018      	str	r0, [r3, #0]
 8012868:	4604      	mov	r4, r0
 801286a:	f105 0803 	add.w	r8, r5, #3
 801286e:	2203      	movs	r2, #3
 8012870:	4628      	mov	r0, r5
 8012872:	f000 f9fa 	bl	8012c6a <memmove>
 8012876:	4639      	mov	r1, r7
 8012878:	220b      	movs	r2, #11
 801287a:	4640      	mov	r0, r8
 801287c:	f000 f9f5 	bl	8012c6a <memmove>
 8012880:	f105 030e 	add.w	r3, r5, #14
 8012884:	4631      	mov	r1, r6
 8012886:	2208      	movs	r2, #8
 8012888:	4618      	mov	r0, r3
 801288a:	f000 f9ee 	bl	8012c6a <memmove>
 801288e:	2308      	movs	r3, #8
 8012890:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8012894:	230b      	movs	r3, #11
 8012896:	9302      	str	r3, [sp, #8]
 8012898:	4b08      	ldr	r3, [pc, #32]	; (80128bc <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 801289a:	9005      	str	r0, [sp, #20]
 801289c:	e9cd 5300 	strd	r5, r3, [sp]
 80128a0:	213f      	movs	r1, #63	; 0x3f
 80128a2:	2303      	movs	r3, #3
 80128a4:	4a06      	ldr	r2, [pc, #24]	; (80128c0 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 80128a6:	4807      	ldr	r0, [pc, #28]	; (80128c4 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 80128a8:	f000 fc38 	bl	801311c <snprintf>
 80128ac:	4620      	mov	r0, r4
 80128ae:	b006      	add	sp, #24
 80128b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128b4:	2000a1d0 	ldrdcs	sl, [r0], -r0
 80128b8:	2000a228 	andcs	sl, r0, r8, lsr #4
 80128bc:	08015b3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, fp, ip, lr}
 80128c0:	0801760c 	stmdaeq	r1, {r2, r3, r9, sl, ip, sp, lr}
 80128c4:	2000a1e6 	andcs	sl, r0, r6, ror #3

080128c8 <FirmwareVersion::Print(char const*)>:
 80128c8:	b510      	push	{r4, lr}
 80128ca:	460c      	mov	r4, r1
 80128cc:	4804      	ldr	r0, [pc, #16]	; (80128e0 <FirmwareVersion::Print(char const*)+0x18>)
 80128ce:	f000 fc4d 	bl	801316c <puts>
 80128d2:	b124      	cbz	r4, 80128de <FirmwareVersion::Print(char const*)+0x16>
 80128d4:	4620      	mov	r0, r4
 80128d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128da:	f000 bc47 	b.w	801316c <puts>
 80128de:	bd10      	pop	{r4, pc}
 80128e0:	2000a1e6 	andcs	sl, r0, r6, ror #3

080128e4 <LedBlink::LedBlink()>:
 80128e4:	b538      	push	{r3, r4, r5, lr}
 80128e6:	2205      	movs	r2, #5
 80128e8:	2300      	movs	r3, #0
 80128ea:	e9c0 3200 	strd	r3, r2, [r0]
 80128ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80128f2:	6083      	str	r3, [r0, #8]
 80128f4:	e9c0 2303 	strd	r2, r3, [r0, #12]
 80128f8:	6143      	str	r3, [r0, #20]
 80128fa:	4b09      	ldr	r3, [pc, #36]	; (8012920 <LedBlink::LedBlink()+0x3c>)
 80128fc:	4d09      	ldr	r5, [pc, #36]	; (8012924 <LedBlink::LedBlink()+0x40>)
 80128fe:	4604      	mov	r4, r0
 8012900:	6018      	str	r0, [r3, #0]
 8012902:	f240 6004 	movw	r0, #1540	; 0x604
 8012906:	f000 ffc7 	bl	8013898 <rcu_periph_clock_enable>
 801290a:	4628      	mov	r0, r5
 801290c:	2301      	movs	r3, #1
 801290e:	2203      	movs	r2, #3
 8012910:	2110      	movs	r1, #16
 8012912:	f000 ff29 	bl	8013768 <gpio_init>
 8012916:	2301      	movs	r3, #1
 8012918:	4620      	mov	r0, r4
 801291a:	616b      	str	r3, [r5, #20]
 801291c:	bd38      	pop	{r3, r4, r5, pc}
 801291e:	bf00      	nop
 8012920:	2000a22c 	andcs	sl, r0, ip, lsr #4
 8012924:	40011000 	andmi	r1, r1, r0

08012928 <LedBlink::SetMode(ledblink::Mode)>:
 8012928:	6843      	ldr	r3, [r0, #4]
 801292a:	428b      	cmp	r3, r1
 801292c:	d02f      	beq.n	801298e <LedBlink::SetMode(ledblink::Mode)+0x66>
 801292e:	6041      	str	r1, [r0, #4]
 8012930:	2904      	cmp	r1, #4
 8012932:	d822      	bhi.n	801297a <LedBlink::SetMode(ledblink::Mode)+0x52>
 8012934:	e8df f001 	tbb	[pc, r1]
 8012938:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 801293c:	23ff001d 	mvnscs	r0, #29
 8012940:	6003      	str	r3, [r0, #0]
 8012942:	2300      	movs	r3, #0
 8012944:	2201      	movs	r2, #1
 8012946:	60c3      	str	r3, [r0, #12]
 8012948:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801294c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8012950:	611a      	str	r2, [r3, #16]
 8012952:	6880      	ldr	r0, [r0, #8]
 8012954:	b1d8      	cbz	r0, 801298e <LedBlink::SetMode(ledblink::Mode)+0x66>
 8012956:	6803      	ldr	r3, [r0, #0]
 8012958:	689b      	ldr	r3, [r3, #8]
 801295a:	4718      	bx	r3
 801295c:	2301      	movs	r3, #1
 801295e:	6003      	str	r3, [r0, #0]
 8012960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012964:	60c3      	str	r3, [r0, #12]
 8012966:	e7f4      	b.n	8012952 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8012968:	2303      	movs	r3, #3
 801296a:	6003      	str	r3, [r0, #0]
 801296c:	f240 134d 	movw	r3, #333	; 0x14d
 8012970:	e7f8      	b.n	8012964 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8012972:	2305      	movs	r3, #5
 8012974:	6003      	str	r3, [r0, #0]
 8012976:	23c8      	movs	r3, #200	; 0xc8
 8012978:	e7f4      	b.n	8012964 <LedBlink::SetMode(ledblink::Mode)+0x3c>
 801297a:	2300      	movs	r3, #0
 801297c:	2201      	movs	r2, #1
 801297e:	6003      	str	r3, [r0, #0]
 8012980:	60c3      	str	r3, [r0, #12]
 8012982:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012986:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 801298a:	615a      	str	r2, [r3, #20]
 801298c:	e7e1      	b.n	8012952 <LedBlink::SetMode(ledblink::Mode)+0x2a>
 801298e:	4770      	bx	lr

08012990 <Hardware::Hardware()>:
 8012990:	b570      	push	{r4, r5, r6, lr}
 8012992:	2400      	movs	r4, #0
 8012994:	4b24      	ldr	r3, [pc, #144]	; (8012a28 <Hardware::Hardware()+0x98>)
 8012996:	b090      	sub	sp, #64	; 0x40
 8012998:	7004      	strb	r4, [r0, #0]
 801299a:	6018      	str	r0, [r3, #0]
 801299c:	4605      	mov	r5, r0
 801299e:	f7f4 fdaf 	bl	8007500 <console_init>
 80129a2:	f000 fd15 	bl	80133d0 <systick_config>
 80129a6:	f001 fd29 	bl	80143fc <udelay_init()>
 80129aa:	f001 fd25 	bl	80143f8 <micros_init()>
 80129ae:	f240 701b 	movw	r0, #1819	; 0x71b
 80129b2:	f000 ff71 	bl	8013898 <rcu_periph_clock_enable>
 80129b6:	f240 701c 	movw	r0, #1820	; 0x71c
 80129ba:	f000 ff6d 	bl	8013898 <rcu_periph_clock_enable>
 80129be:	4e1b      	ldr	r6, [pc, #108]	; (8012a2c <Hardware::Hardware()+0x9c>)
 80129c0:	f000 ff62 	bl	8013888 <pmu_backup_write_enable>
 80129c4:	4621      	mov	r1, r4
 80129c6:	2002      	movs	r0, #2
 80129c8:	f000 fda0 	bl	801350c <bkp_data_write>
 80129cc:	f240 7004 	movw	r0, #1796	; 0x704
 80129d0:	f000 ff62 	bl	8013898 <rcu_periph_clock_enable>
 80129d4:	4630      	mov	r0, r6
 80129d6:	f001 f8ad 	bl	8013b34 <timer_deinit>
 80129da:	236b      	movs	r3, #107	; 0x6b
 80129dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80129e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129e4:	a903      	add	r1, sp, #12
 80129e6:	4630      	mov	r0, r6
 80129e8:	9305      	str	r3, [sp, #20]
 80129ea:	f001 f905 	bl	8013bf8 <timer_init>
 80129ee:	4630      	mov	r0, r6
 80129f0:	f001 f95a 	bl	8013ca8 <timer_enable>
 80129f4:	f001 fa82 	bl	8013efc <gd32_adc_init()>
 80129f8:	220b      	movs	r2, #11
 80129fa:	2309      	movs	r3, #9
 80129fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012a00:	237a      	movs	r3, #122	; 0x7a
 8012a02:	a807      	add	r0, sp, #28
 8012a04:	930c      	str	r3, [sp, #48]	; 0x30
 8012a06:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8012a0a:	9407      	str	r4, [sp, #28]
 8012a0c:	940f      	str	r4, [sp, #60]	; 0x3c
 8012a0e:	f000 fc05 	bl	801321c <mktime>
 8012a12:	4621      	mov	r1, r4
 8012a14:	e9cd 0401 	strd	r0, r4, [sp, #4]
 8012a18:	a801      	add	r0, sp, #4
 8012a1a:	f000 fc75 	bl	8013308 <settimeofday>
 8012a1e:	f001 fac7 	bl	8013fb0 <gd32_i2c_begin>
 8012a22:	4628      	mov	r0, r5
 8012a24:	b010      	add	sp, #64	; 0x40
 8012a26:	bd70      	pop	{r4, r5, r6, pc}
 8012a28:	2000a230 	andcs	sl, r0, r0, lsr r2
 8012a2c:	40001000 	andmi	r1, r0, r0

08012a30 <Hardware::GetUuid(unsigned char*)>:
 8012a30:	4a0c      	ldr	r2, [pc, #48]	; (8012a64 <Hardware::GetUuid(unsigned char*)+0x34>)
 8012a32:	b084      	sub	sp, #16
 8012a34:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8012a38:	9300      	str	r3, [sp, #0]
 8012a3a:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 8012a3e:	9001      	str	r0, [sp, #4]
 8012a40:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 8012a44:	4403      	add	r3, r0
 8012a46:	4413      	add	r3, r2
 8012a48:	9202      	str	r2, [sp, #8]
 8012a4a:	466a      	mov	r2, sp
 8012a4c:	9303      	str	r3, [sp, #12]
 8012a4e:	1e4b      	subs	r3, r1, #1
 8012a50:	310f      	adds	r1, #15
 8012a52:	428b      	cmp	r3, r1
 8012a54:	d101      	bne.n	8012a5a <Hardware::GetUuid(unsigned char*)+0x2a>
 8012a56:	b004      	add	sp, #16
 8012a58:	4770      	bx	lr
 8012a5a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8012a5e:	f803 0f01 	strb.w	r0, [r3, #1]!
 8012a62:	e7f6      	b.n	8012a52 <Hardware::GetUuid(unsigned char*)+0x22>
 8012a64:	1ffff000 	svcne	0x00fff000

08012a68 <Hardware::SetTime(tm const*)>:
 8012a68:	2000      	movs	r0, #0
 8012a6a:	4770      	bx	lr

08012a6c <Hardware::Reboot()>:
 8012a6c:	b508      	push	{r3, lr}
 8012a6e:	2300      	movs	r3, #0
 8012a70:	4604      	mov	r4, r0
 8012a72:	7003      	strb	r3, [r0, #0]
 8012a74:	2104      	movs	r1, #4
 8012a76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012a7a:	f000 fe4b 	bl	8013714 <fwdgt_config>
 8012a7e:	4620      	mov	r0, r4
 8012a80:	f7f5 f9ca 	bl	8007e18 <Hardware::RebootHandler()>
 8012a84:	2102      	movs	r1, #2
 8012a86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012a8a:	f000 fe43 	bl	8013714 <fwdgt_config>
 8012a8e:	2801      	cmp	r0, #1
 8012a90:	bf0c      	ite	eq
 8012a92:	2301      	moveq	r3, #1
 8012a94:	2300      	movne	r3, #0
 8012a96:	7023      	strb	r3, [r4, #0]
 8012a98:	d101      	bne.n	8012a9e <Hardware::Reboot()+0x32>
 8012a9a:	f000 fe2b 	bl	80136f4 <fwdgt_enable>
 8012a9e:	2208      	movs	r2, #8
 8012aa0:	4b0d      	ldr	r3, [pc, #52]	; (8012ad8 <Hardware::Reboot()+0x6c>)
 8012aa2:	2501      	movs	r5, #1
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	480d      	ldr	r0, [pc, #52]	; (8012adc <Hardware::Reboot()+0x70>)
 8012aa8:	601a      	str	r2, [r3, #0]
 8012aaa:	227d      	movs	r2, #125	; 0x7d
 8012aac:	490c      	ldr	r1, [pc, #48]	; (8012ae0 <Hardware::Reboot()+0x74>)
 8012aae:	60da      	str	r2, [r3, #12]
 8012ab0:	68dc      	ldr	r4, [r3, #12]
 8012ab2:	b904      	cbnz	r4, 8012ab6 <Hardware::Reboot()+0x4a>
 8012ab4:	e7fe      	b.n	8012ab4 <Hardware::Reboot()+0x48>
 8012ab6:	6802      	ldr	r2, [r0, #0]
 8012ab8:	695e      	ldr	r6, [r3, #20]
 8012aba:	1b92      	subs	r2, r2, r6
 8012abc:	4294      	cmp	r4, r2
 8012abe:	d8f8      	bhi.n	8012ab2 <Hardware::Reboot()+0x46>
 8012ac0:	6802      	ldr	r2, [r0, #0]
 8012ac2:	615a      	str	r2, [r3, #20]
 8012ac4:	691a      	ldr	r2, [r3, #16]
 8012ac6:	2a01      	cmp	r2, #1
 8012ac8:	f082 0401 	eor.w	r4, r2, #1
 8012acc:	611c      	str	r4, [r3, #16]
 8012ace:	bf14      	ite	ne
 8012ad0:	610d      	strne	r5, [r1, #16]
 8012ad2:	614a      	streq	r2, [r1, #20]
 8012ad4:	e7ec      	b.n	8012ab0 <Hardware::Reboot()+0x44>
 8012ad6:	bf00      	nop
 8012ad8:	2000a22c 	andcs	sl, r0, ip, lsr #4
 8012adc:	2000a24c 	andcs	sl, r0, ip, asr #4
 8012ae0:	40011000 	andmi	r1, r1, r0

08012ae4 <operator delete(void*)>:
 8012ae4:	f000 b890 	b.w	8012c08 <free>

08012ae8 <operator delete[](void*)>:
 8012ae8:	f000 b88e 	b.w	8012c08 <free>

08012aec <operator new(unsigned int)>:
 8012aec:	f000 b842 	b.w	8012b74 <malloc>

08012af0 <operator new[](unsigned int)>:
 8012af0:	f000 b840 	b.w	8012b74 <malloc>

08012af4 <inet_aton>:
 8012af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012af6:	f04f 0c0a 	mov.w	ip, #10
 8012afa:	2500      	movs	r5, #0
 8012afc:	ae01      	add	r6, sp, #4
 8012afe:	4603      	mov	r3, r0
 8012b00:	2200      	movs	r2, #0
 8012b02:	1d07      	adds	r7, r0, #4
 8012b04:	e007      	b.n	8012b16 <inet_aton+0x22>
 8012b06:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012b0a:	2b09      	cmp	r3, #9
 8012b0c:	d820      	bhi.n	8012b50 <inet_aton+0x5c>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	fb0c 4202 	mla	r2, ip, r2, r4
 8012b14:	3a30      	subs	r2, #48	; 0x30
 8012b16:	4618      	mov	r0, r3
 8012b18:	f810 4b01 	ldrb.w	r4, [r0], #1
 8012b1c:	2c2e      	cmp	r4, #46	; 0x2e
 8012b1e:	d111      	bne.n	8012b44 <inet_aton+0x50>
 8012b20:	3501      	adds	r5, #1
 8012b22:	2d03      	cmp	r5, #3
 8012b24:	f806 2b01 	strb.w	r2, [r6], #1
 8012b28:	d1e9      	bne.n	8012afe <inet_aton+0xa>
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	250a      	movs	r5, #10
 8012b2e:	1d1c      	adds	r4, r3, #4
 8012b30:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8012b34:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8012b38:	d10d      	bne.n	8012b56 <inet_aton+0x62>
 8012b3a:	f88d 2007 	strb.w	r2, [sp, #7]
 8012b3e:	b9b1      	cbnz	r1, 8012b6e <inet_aton+0x7a>
 8012b40:	2001      	movs	r0, #1
 8012b42:	e006      	b.n	8012b52 <inet_aton+0x5e>
 8012b44:	2c00      	cmp	r4, #0
 8012b46:	d0eb      	beq.n	8012b20 <inet_aton+0x2c>
 8012b48:	2c0a      	cmp	r4, #10
 8012b4a:	d0e9      	beq.n	8012b20 <inet_aton+0x2c>
 8012b4c:	42b8      	cmp	r0, r7
 8012b4e:	d1da      	bne.n	8012b06 <inet_aton+0x12>
 8012b50:	2000      	movs	r0, #0
 8012b52:	b003      	add	sp, #12
 8012b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b56:	280a      	cmp	r0, #10
 8012b58:	d0ef      	beq.n	8012b3a <inet_aton+0x46>
 8012b5a:	42a3      	cmp	r3, r4
 8012b5c:	d0f8      	beq.n	8012b50 <inet_aton+0x5c>
 8012b5e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 8012b62:	2e09      	cmp	r6, #9
 8012b64:	d8f4      	bhi.n	8012b50 <inet_aton+0x5c>
 8012b66:	fb05 0202 	mla	r2, r5, r2, r0
 8012b6a:	3a30      	subs	r2, #48	; 0x30
 8012b6c:	e7e0      	b.n	8012b30 <inet_aton+0x3c>
 8012b6e:	9b01      	ldr	r3, [sp, #4]
 8012b70:	600b      	str	r3, [r1, #0]
 8012b72:	e7e5      	b.n	8012b40 <inet_aton+0x4c>

08012b74 <malloc>:
 8012b74:	b538      	push	{r3, r4, r5, lr}
 8012b76:	4604      	mov	r4, r0
 8012b78:	4601      	mov	r1, r0
 8012b7a:	481c      	ldr	r0, [pc, #112]	; (8012bec <malloc+0x78>)
 8012b7c:	f000 faa6 	bl	80130cc <printf>
 8012b80:	b17c      	cbz	r4, 8012ba2 <malloc+0x2e>
 8012b82:	4b1b      	ldr	r3, [pc, #108]	; (8012bf0 <malloc+0x7c>)
 8012b84:	6818      	ldr	r0, [r3, #0]
 8012b86:	b978      	cbnz	r0, 8012ba8 <malloc+0x34>
 8012b88:	4a1a      	ldr	r2, [pc, #104]	; (8012bf4 <malloc+0x80>)
 8012b8a:	f104 031b 	add.w	r3, r4, #27
 8012b8e:	6811      	ldr	r1, [r2, #0]
 8012b90:	4819      	ldr	r0, [pc, #100]	; (8012bf8 <malloc+0x84>)
 8012b92:	f023 030f 	bic.w	r3, r3, #15
 8012b96:	440b      	add	r3, r1
 8012b98:	4283      	cmp	r3, r0
 8012b9a:	d921      	bls.n	8012be0 <malloc+0x6c>
 8012b9c:	4817      	ldr	r0, [pc, #92]	; (8012bfc <malloc+0x88>)
 8012b9e:	f000 fa95 	bl	80130cc <printf>
 8012ba2:	2500      	movs	r5, #0
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	bd38      	pop	{r3, r4, r5, pc}
 8012ba8:	4284      	cmp	r4, r0
 8012baa:	d80a      	bhi.n	8012bc2 <malloc+0x4e>
 8012bac:	685a      	ldr	r2, [r3, #4]
 8012bae:	6899      	ldr	r1, [r3, #8]
 8012bb0:	3201      	adds	r2, #1
 8012bb2:	428a      	cmp	r2, r1
 8012bb4:	605a      	str	r2, [r3, #4]
 8012bb6:	d900      	bls.n	8012bba <malloc+0x46>
 8012bb8:	609a      	str	r2, [r3, #8]
 8012bba:	68d9      	ldr	r1, [r3, #12]
 8012bbc:	b919      	cbnz	r1, 8012bc6 <malloc+0x52>
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	e7e2      	b.n	8012b88 <malloc+0x14>
 8012bc2:	3310      	adds	r3, #16
 8012bc4:	e7de      	b.n	8012b84 <malloc+0x10>
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	688a      	ldr	r2, [r1, #8]
 8012bca:	60da      	str	r2, [r3, #12]
 8012bcc:	2300      	movs	r3, #0
 8012bce:	f101 050c 	add.w	r5, r1, #12
 8012bd2:	608b      	str	r3, [r1, #8]
 8012bd4:	4622      	mov	r2, r4
 8012bd6:	462b      	mov	r3, r5
 8012bd8:	4809      	ldr	r0, [pc, #36]	; (8012c00 <malloc+0x8c>)
 8012bda:	f000 fa77 	bl	80130cc <printf>
 8012bde:	e7e1      	b.n	8012ba4 <malloc+0x30>
 8012be0:	6013      	str	r3, [r2, #0]
 8012be2:	4b08      	ldr	r3, [pc, #32]	; (8012c04 <malloc+0x90>)
 8012be4:	e9c1 3400 	strd	r3, r4, [r1]
 8012be8:	e7f0      	b.n	8012bcc <malloc+0x58>
 8012bea:	bf00      	nop
 8012bec:	08017630 	stmdaeq	r1, {r4, r5, r9, sl, ip, sp, lr}
 8012bf0:	20000020 	andcs	r0, r0, r0, lsr #32
 8012bf4:	2000001c 	andcs	r0, r0, ip, lsl r0
 8012bf8:	20016000 	andcs	r6, r1, r0
 8012bfc:	0801763c 	stmdaeq	r1, {r2, r3, r4, r5, r9, sl, ip, sp, lr}
 8012c00:	08017658 	stmdaeq	r1, {r3, r4, r6, r9, sl, ip, sp, lr}
 8012c04:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

08012c08 <free>:
 8012c08:	b538      	push	{r3, r4, r5, lr}
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	b1c8      	cbz	r0, 8012c42 <free+0x3a>
 8012c0e:	f1a0 050c 	sub.w	r5, r0, #12
 8012c12:	4602      	mov	r2, r0
 8012c14:	4629      	mov	r1, r5
 8012c16:	480c      	ldr	r0, [pc, #48]	; (8012c48 <free+0x40>)
 8012c18:	f000 fa58 	bl	80130cc <printf>
 8012c1c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 8012c20:	4b0a      	ldr	r3, [pc, #40]	; (8012c4c <free+0x44>)
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d10d      	bne.n	8012c42 <free+0x3a>
 8012c26:	4b0a      	ldr	r3, [pc, #40]	; (8012c50 <free+0x48>)
 8012c28:	681a      	ldr	r2, [r3, #0]
 8012c2a:	b152      	cbz	r2, 8012c42 <free+0x3a>
 8012c2c:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8012c30:	4291      	cmp	r1, r2
 8012c32:	d107      	bne.n	8012c44 <free+0x3c>
 8012c34:	68da      	ldr	r2, [r3, #12]
 8012c36:	f844 2c04 	str.w	r2, [r4, #-4]
 8012c3a:	685a      	ldr	r2, [r3, #4]
 8012c3c:	60dd      	str	r5, [r3, #12]
 8012c3e:	3a01      	subs	r2, #1
 8012c40:	605a      	str	r2, [r3, #4]
 8012c42:	bd38      	pop	{r3, r4, r5, pc}
 8012c44:	3310      	adds	r3, #16
 8012c46:	e7ef      	b.n	8012c28 <free+0x20>
 8012c48:	08017683 	stmdaeq	r1, {r0, r1, r7, r9, sl, ip, sp, lr}
 8012c4c:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 8012c50:	20000020 	andcs	r0, r0, r0, lsr #32

08012c54 <memcpy>:
 8012c54:	b510      	push	{r4, lr}
 8012c56:	1e43      	subs	r3, r0, #1
 8012c58:	440a      	add	r2, r1
 8012c5a:	4291      	cmp	r1, r2
 8012c5c:	d100      	bne.n	8012c60 <memcpy+0xc>
 8012c5e:	bd10      	pop	{r4, pc}
 8012c60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c68:	e7f7      	b.n	8012c5a <memcpy+0x6>

08012c6a <memmove>:
 8012c6a:	4288      	cmp	r0, r1
 8012c6c:	b510      	push	{r4, lr}
 8012c6e:	eb01 0302 	add.w	r3, r1, r2
 8012c72:	d208      	bcs.n	8012c86 <memmove+0x1c>
 8012c74:	1e42      	subs	r2, r0, #1
 8012c76:	4299      	cmp	r1, r3
 8012c78:	d100      	bne.n	8012c7c <memmove+0x12>
 8012c7a:	bd10      	pop	{r4, pc}
 8012c7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c80:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012c84:	e7f7      	b.n	8012c76 <memmove+0xc>
 8012c86:	4601      	mov	r1, r0
 8012c88:	4402      	add	r2, r0
 8012c8a:	428a      	cmp	r2, r1
 8012c8c:	d0f5      	beq.n	8012c7a <memmove+0x10>
 8012c8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012c92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012c96:	e7f8      	b.n	8012c8a <memmove+0x20>

08012c98 <memset>:
 8012c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c9a:	b1c2      	cbz	r2, 8012cce <memset+0x36>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	b2c9      	uxtb	r1, r1
 8012ca0:	075c      	lsls	r4, r3, #29
 8012ca2:	d110      	bne.n	8012cc6 <memset+0x2e>
 8012ca4:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8012ca8:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8012cac:	463d      	mov	r5, r7
 8012cae:	461e      	mov	r6, r3
 8012cb0:	f022 0407 	bic.w	r4, r2, #7
 8012cb4:	441c      	add	r4, r3
 8012cb6:	42a6      	cmp	r6, r4
 8012cb8:	d10a      	bne.n	8012cd0 <memset+0x38>
 8012cba:	4413      	add	r3, r2
 8012cbc:	429c      	cmp	r4, r3
 8012cbe:	d006      	beq.n	8012cce <memset+0x36>
 8012cc0:	f804 1b01 	strb.w	r1, [r4], #1
 8012cc4:	e7fa      	b.n	8012cbc <memset+0x24>
 8012cc6:	3a01      	subs	r2, #1
 8012cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8012ccc:	d1e8      	bne.n	8012ca0 <memset+0x8>
 8012cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cd0:	f846 7b08 	str.w	r7, [r6], #8
 8012cd4:	f846 5c04 	str.w	r5, [r6, #-4]
 8012cd8:	e7ed      	b.n	8012cb6 <memset+0x1e>
	...

08012cdc <_xputch>:
 8012cdc:	4603      	mov	r3, r0
 8012cde:	b410      	push	{r4}
 8012ce0:	4c08      	ldr	r4, [pc, #32]	; (8012d04 <_xputch+0x28>)
 8012ce2:	68da      	ldr	r2, [r3, #12]
 8012ce4:	4608      	mov	r0, r1
 8012ce6:	6821      	ldr	r1, [r4, #0]
 8012ce8:	3201      	adds	r2, #1
 8012cea:	60da      	str	r2, [r3, #12]
 8012cec:	b139      	cbz	r1, 8012cfe <_xputch+0x22>
 8012cee:	691b      	ldr	r3, [r3, #16]
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	da02      	bge.n	8012cfa <_xputch+0x1e>
 8012cf4:	1c4b      	adds	r3, r1, #1
 8012cf6:	6023      	str	r3, [r4, #0]
 8012cf8:	7008      	strb	r0, [r1, #0]
 8012cfa:	bc10      	pop	{r4}
 8012cfc:	4770      	bx	lr
 8012cfe:	bc10      	pop	{r4}
 8012d00:	f7ff bd5a 	b.w	80127b8 <console_putc>
 8012d04:	2000a234 	andcs	sl, r0, r4, lsr r2

08012d08 <_format_int>:
 8012d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d0c:	4698      	mov	r8, r3
 8012d0e:	b091      	sub	sp, #68	; 0x44
 8012d10:	ea52 0308 	orrs.w	r3, r2, r8
 8012d14:	4606      	mov	r6, r0
 8012d16:	4617      	mov	r7, r2
 8012d18:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8012d1c:	d133      	bne.n	8012d86 <_format_int+0x7e>
 8012d1e:	2330      	movs	r3, #48	; 0x30
 8012d20:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 8012d24:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8012d28:	6833      	ldr	r3, [r6, #0]
 8012d2a:	07d8      	lsls	r0, r3, #31
 8012d2c:	d507      	bpl.n	8012d3e <_format_int+0x36>
 8012d2e:	466a      	mov	r2, sp
 8012d30:	2030      	movs	r0, #48	; 0x30
 8012d32:	6871      	ldr	r1, [r6, #4]
 8012d34:	1b2f      	subs	r7, r5, r4
 8012d36:	428f      	cmp	r7, r1
 8012d38:	da01      	bge.n	8012d3e <_format_int+0x36>
 8012d3a:	4294      	cmp	r4, r2
 8012d3c:	d839      	bhi.n	8012db2 <_format_int+0xaa>
 8012d3e:	0699      	lsls	r1, r3, #26
 8012d40:	d507      	bpl.n	8012d52 <_format_int+0x4a>
 8012d42:	466a      	mov	r2, sp
 8012d44:	2030      	movs	r0, #48	; 0x30
 8012d46:	68b1      	ldr	r1, [r6, #8]
 8012d48:	1b2f      	subs	r7, r5, r4
 8012d4a:	428f      	cmp	r7, r1
 8012d4c:	da01      	bge.n	8012d52 <_format_int+0x4a>
 8012d4e:	4294      	cmp	r4, r2
 8012d50:	d832      	bhi.n	8012db8 <_format_int+0xb0>
 8012d52:	071a      	lsls	r2, r3, #28
 8012d54:	bf44      	itt	mi
 8012d56:	222d      	movmi	r2, #45	; 0x2d
 8012d58:	f804 2901 	strbmi.w	r2, [r4], #-1
 8012d5c:	065b      	lsls	r3, r3, #25
 8012d5e:	d407      	bmi.n	8012d70 <_format_int+0x68>
 8012d60:	466b      	mov	r3, sp
 8012d62:	2120      	movs	r1, #32
 8012d64:	68b2      	ldr	r2, [r6, #8]
 8012d66:	1b28      	subs	r0, r5, r4
 8012d68:	4290      	cmp	r0, r2
 8012d6a:	da01      	bge.n	8012d70 <_format_int+0x68>
 8012d6c:	429c      	cmp	r4, r3
 8012d6e:	d826      	bhi.n	8012dbe <_format_int+0xb6>
 8012d70:	1b2d      	subs	r5, r5, r4
 8012d72:	3401      	adds	r4, #1
 8012d74:	ab10      	add	r3, sp, #64	; 0x40
 8012d76:	429c      	cmp	r4, r3
 8012d78:	d324      	bcc.n	8012dc4 <_format_int+0xbc>
 8012d7a:	68b3      	ldr	r3, [r6, #8]
 8012d7c:	42ab      	cmp	r3, r5
 8012d7e:	dc27      	bgt.n	8012dd0 <_format_int+0xc8>
 8012d80:	b011      	add	sp, #68	; 0x44
 8012d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d86:	462c      	mov	r4, r5
 8012d88:	46e9      	mov	r9, sp
 8012d8a:	4638      	mov	r0, r7
 8012d8c:	4641      	mov	r1, r8
 8012d8e:	220a      	movs	r2, #10
 8012d90:	2300      	movs	r3, #0
 8012d92:	f7f4 fea7 	bl	8007ae4 <__aeabi_uldivmod>
 8012d96:	3230      	adds	r2, #48	; 0x30
 8012d98:	f804 2901 	strb.w	r2, [r4], #-1
 8012d9c:	463a      	mov	r2, r7
 8012d9e:	4643      	mov	r3, r8
 8012da0:	2a0a      	cmp	r2, #10
 8012da2:	f173 0300 	sbcs.w	r3, r3, #0
 8012da6:	4607      	mov	r7, r0
 8012da8:	4688      	mov	r8, r1
 8012daa:	d3bd      	bcc.n	8012d28 <_format_int+0x20>
 8012dac:	454c      	cmp	r4, r9
 8012dae:	d1ec      	bne.n	8012d8a <_format_int+0x82>
 8012db0:	e7ba      	b.n	8012d28 <_format_int+0x20>
 8012db2:	f804 0901 	strb.w	r0, [r4], #-1
 8012db6:	e7bd      	b.n	8012d34 <_format_int+0x2c>
 8012db8:	f804 0901 	strb.w	r0, [r4], #-1
 8012dbc:	e7c4      	b.n	8012d48 <_format_int+0x40>
 8012dbe:	f804 1901 	strb.w	r1, [r4], #-1
 8012dc2:	e7d0      	b.n	8012d66 <_format_int+0x5e>
 8012dc4:	4630      	mov	r0, r6
 8012dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dca:	f7ff ff87 	bl	8012cdc <_xputch>
 8012dce:	e7d1      	b.n	8012d74 <_format_int+0x6c>
 8012dd0:	2120      	movs	r1, #32
 8012dd2:	4630      	mov	r0, r6
 8012dd4:	f7ff ff82 	bl	8012cdc <_xputch>
 8012dd8:	3501      	adds	r5, #1
 8012dda:	e7ce      	b.n	8012d7a <_format_int+0x72>

08012ddc <_format_hex>:
 8012ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012dde:	b091      	sub	sp, #68	; 0x44
 8012de0:	4606      	mov	r6, r0
 8012de2:	6804      	ldr	r4, [r0, #0]
 8012de4:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8012de8:	bb61      	cbnz	r1, 8012e44 <_format_hex+0x68>
 8012dea:	2330      	movs	r3, #48	; 0x30
 8012dec:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8012df0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8012df4:	07e5      	lsls	r5, r4, #31
 8012df6:	d507      	bpl.n	8012e08 <_format_hex+0x2c>
 8012df8:	4669      	mov	r1, sp
 8012dfa:	2530      	movs	r5, #48	; 0x30
 8012dfc:	6870      	ldr	r0, [r6, #4]
 8012dfe:	1ad7      	subs	r7, r2, r3
 8012e00:	4287      	cmp	r7, r0
 8012e02:	da01      	bge.n	8012e08 <_format_hex+0x2c>
 8012e04:	428b      	cmp	r3, r1
 8012e06:	d831      	bhi.n	8012e6c <_format_hex+0x90>
 8012e08:	06a0      	lsls	r0, r4, #26
 8012e0a:	d507      	bpl.n	8012e1c <_format_hex+0x40>
 8012e0c:	4669      	mov	r1, sp
 8012e0e:	2530      	movs	r5, #48	; 0x30
 8012e10:	68b0      	ldr	r0, [r6, #8]
 8012e12:	1ad7      	subs	r7, r2, r3
 8012e14:	4287      	cmp	r7, r0
 8012e16:	da01      	bge.n	8012e1c <_format_hex+0x40>
 8012e18:	428b      	cmp	r3, r1
 8012e1a:	d82a      	bhi.n	8012e72 <_format_hex+0x96>
 8012e1c:	0661      	lsls	r1, r4, #25
 8012e1e:	d407      	bmi.n	8012e30 <_format_hex+0x54>
 8012e20:	4669      	mov	r1, sp
 8012e22:	2420      	movs	r4, #32
 8012e24:	68b0      	ldr	r0, [r6, #8]
 8012e26:	1ad5      	subs	r5, r2, r3
 8012e28:	4285      	cmp	r5, r0
 8012e2a:	da01      	bge.n	8012e30 <_format_hex+0x54>
 8012e2c:	428b      	cmp	r3, r1
 8012e2e:	d823      	bhi.n	8012e78 <_format_hex+0x9c>
 8012e30:	1ad5      	subs	r5, r2, r3
 8012e32:	1c5c      	adds	r4, r3, #1
 8012e34:	ab10      	add	r3, sp, #64	; 0x40
 8012e36:	429c      	cmp	r4, r3
 8012e38:	d321      	bcc.n	8012e7e <_format_hex+0xa2>
 8012e3a:	68b3      	ldr	r3, [r6, #8]
 8012e3c:	429d      	cmp	r5, r3
 8012e3e:	db24      	blt.n	8012e8a <_format_hex+0xae>
 8012e40:	b011      	add	sp, #68	; 0x44
 8012e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e44:	f014 0f02 	tst.w	r4, #2
 8012e48:	bf0c      	ite	eq
 8012e4a:	2757      	moveq	r7, #87	; 0x57
 8012e4c:	2737      	movne	r7, #55	; 0x37
 8012e4e:	4613      	mov	r3, r2
 8012e50:	466d      	mov	r5, sp
 8012e52:	f001 000f 	and.w	r0, r1, #15
 8012e56:	2809      	cmp	r0, #9
 8012e58:	bf94      	ite	ls
 8012e5a:	3030      	addls	r0, #48	; 0x30
 8012e5c:	19c0      	addhi	r0, r0, r7
 8012e5e:	0909      	lsrs	r1, r1, #4
 8012e60:	f803 0901 	strb.w	r0, [r3], #-1
 8012e64:	d0c6      	beq.n	8012df4 <_format_hex+0x18>
 8012e66:	42ab      	cmp	r3, r5
 8012e68:	d1f3      	bne.n	8012e52 <_format_hex+0x76>
 8012e6a:	e7c3      	b.n	8012df4 <_format_hex+0x18>
 8012e6c:	f803 5901 	strb.w	r5, [r3], #-1
 8012e70:	e7c5      	b.n	8012dfe <_format_hex+0x22>
 8012e72:	f803 5901 	strb.w	r5, [r3], #-1
 8012e76:	e7cc      	b.n	8012e12 <_format_hex+0x36>
 8012e78:	f803 4901 	strb.w	r4, [r3], #-1
 8012e7c:	e7d3      	b.n	8012e26 <_format_hex+0x4a>
 8012e7e:	4630      	mov	r0, r6
 8012e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e84:	f7ff ff2a 	bl	8012cdc <_xputch>
 8012e88:	e7d4      	b.n	8012e34 <_format_hex+0x58>
 8012e8a:	2120      	movs	r1, #32
 8012e8c:	4630      	mov	r0, r6
 8012e8e:	f7ff ff25 	bl	8012cdc <_xputch>
 8012e92:	3501      	adds	r5, #1
 8012e94:	e7d1      	b.n	8012e3a <_format_hex+0x5e>
	...

08012e98 <_vprintf>:
 8012e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e9c:	2700      	movs	r7, #0
 8012e9e:	460b      	mov	r3, r1
 8012ea0:	4614      	mov	r4, r2
 8012ea2:	f04f 080a 	mov.w	r8, #10
 8012ea6:	b086      	sub	sp, #24
 8012ea8:	e9cd 7004 	strd	r7, r0, [sp, #16]
 8012eac:	7819      	ldrb	r1, [r3, #0]
 8012eae:	b919      	cbnz	r1, 8012eb8 <_vprintf+0x20>
 8012eb0:	9804      	ldr	r0, [sp, #16]
 8012eb2:	b006      	add	sp, #24
 8012eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eb8:	2925      	cmp	r1, #37	; 0x25
 8012eba:	f103 0601 	add.w	r6, r3, #1
 8012ebe:	d004      	beq.n	8012eca <_vprintf+0x32>
 8012ec0:	a801      	add	r0, sp, #4
 8012ec2:	f7ff ff0b 	bl	8012cdc <_xputch>
 8012ec6:	4633      	mov	r3, r6
 8012ec8:	e7f0      	b.n	8012eac <_vprintf+0x14>
 8012eca:	785a      	ldrb	r2, [r3, #1]
 8012ecc:	e9cd 7701 	strd	r7, r7, [sp, #4]
 8012ed0:	2a30      	cmp	r2, #48	; 0x30
 8012ed2:	9703      	str	r7, [sp, #12]
 8012ed4:	d126      	bne.n	8012f24 <_vprintf+0x8c>
 8012ed6:	2220      	movs	r2, #32
 8012ed8:	9201      	str	r2, [sp, #4]
 8012eda:	1c9e      	adds	r6, r3, #2
 8012edc:	2200      	movs	r2, #0
 8012ede:	4635      	mov	r5, r6
 8012ee0:	4613      	mov	r3, r2
 8012ee2:	7829      	ldrb	r1, [r5, #0]
 8012ee4:	462e      	mov	r6, r5
 8012ee6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8012eea:	2809      	cmp	r0, #9
 8012eec:	f105 0501 	add.w	r5, r5, #1
 8012ef0:	d91c      	bls.n	8012f2c <_vprintf+0x94>
 8012ef2:	b12a      	cbz	r2, 8012f00 <_vprintf+0x68>
 8012ef4:	9303      	str	r3, [sp, #12]
 8012ef6:	b11b      	cbz	r3, 8012f00 <_vprintf+0x68>
 8012ef8:	9b01      	ldr	r3, [sp, #4]
 8012efa:	f043 0310 	orr.w	r3, r3, #16
 8012efe:	9301      	str	r3, [sp, #4]
 8012f00:	292e      	cmp	r1, #46	; 0x2e
 8012f02:	d122      	bne.n	8012f4a <_vprintf+0xb2>
 8012f04:	7873      	ldrb	r3, [r6, #1]
 8012f06:	2b2a      	cmp	r3, #42	; 0x2a
 8012f08:	d014      	beq.n	8012f34 <_vprintf+0x9c>
 8012f0a:	2100      	movs	r1, #0
 8012f0c:	460a      	mov	r2, r1
 8012f0e:	1c70      	adds	r0, r6, #1
 8012f10:	7803      	ldrb	r3, [r0, #0]
 8012f12:	4606      	mov	r6, r0
 8012f14:	3b30      	subs	r3, #48	; 0x30
 8012f16:	2b09      	cmp	r3, #9
 8012f18:	f100 0001 	add.w	r0, r0, #1
 8012f1c:	d930      	bls.n	8012f80 <_vprintf+0xe8>
 8012f1e:	b181      	cbz	r1, 8012f42 <_vprintf+0xaa>
 8012f20:	9202      	str	r2, [sp, #8]
 8012f22:	e00e      	b.n	8012f42 <_vprintf+0xaa>
 8012f24:	2a2d      	cmp	r2, #45	; 0x2d
 8012f26:	d1d9      	bne.n	8012edc <_vprintf+0x44>
 8012f28:	2240      	movs	r2, #64	; 0x40
 8012f2a:	e7d5      	b.n	8012ed8 <_vprintf+0x40>
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	fb08 0303 	mla	r3, r8, r3, r0
 8012f32:	e7d6      	b.n	8012ee2 <_vprintf+0x4a>
 8012f34:	f854 3b04 	ldr.w	r3, [r4], #4
 8012f38:	3602      	adds	r6, #2
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	bfb8      	it	lt
 8012f3e:	425b      	neglt	r3, r3
 8012f40:	9302      	str	r3, [sp, #8]
 8012f42:	9b01      	ldr	r3, [sp, #4]
 8012f44:	f043 0301 	orr.w	r3, r3, #1
 8012f48:	9301      	str	r3, [sp, #4]
 8012f4a:	7833      	ldrb	r3, [r6, #0]
 8012f4c:	2b6c      	cmp	r3, #108	; 0x6c
 8012f4e:	bf04      	itt	eq
 8012f50:	9b01      	ldreq	r3, [sp, #4]
 8012f52:	3601      	addeq	r6, #1
 8012f54:	7831      	ldrb	r1, [r6, #0]
 8012f56:	bf04      	itt	eq
 8012f58:	f043 0304 	orreq.w	r3, r3, #4
 8012f5c:	9301      	streq	r3, [sp, #4]
 8012f5e:	2978      	cmp	r1, #120	; 0x78
 8012f60:	d8ae      	bhi.n	8012ec0 <_vprintf+0x28>
 8012f62:	296f      	cmp	r1, #111	; 0x6f
 8012f64:	d810      	bhi.n	8012f88 <_vprintf+0xf0>
 8012f66:	2963      	cmp	r1, #99	; 0x63
 8012f68:	d048      	beq.n	8012ffc <_vprintf+0x164>
 8012f6a:	d827      	bhi.n	8012fbc <_vprintf+0x124>
 8012f6c:	2958      	cmp	r1, #88	; 0x58
 8012f6e:	d1a7      	bne.n	8012ec0 <_vprintf+0x28>
 8012f70:	9b01      	ldr	r3, [sp, #4]
 8012f72:	f043 0302 	orr.w	r3, r3, #2
 8012f76:	9301      	str	r3, [sp, #4]
 8012f78:	4625      	mov	r5, r4
 8012f7a:	f855 1b04 	ldr.w	r1, [r5], #4
 8012f7e:	e056      	b.n	801302e <_vprintf+0x196>
 8012f80:	2101      	movs	r1, #1
 8012f82:	fb08 3202 	mla	r2, r8, r2, r3
 8012f86:	e7c3      	b.n	8012f10 <_vprintf+0x78>
 8012f88:	f1a1 0370 	sub.w	r3, r1, #112	; 0x70
 8012f8c:	2b08      	cmp	r3, #8
 8012f8e:	d897      	bhi.n	8012ec0 <_vprintf+0x28>
 8012f90:	a201      	add	r2, pc, #4	; (adr r2, 8012f98 <_vprintf+0x100>)
 8012f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f96:	bf00      	nop
 8012f98:	0801300f 	stmdaeq	r1, {r0, r1, r2, r3, ip, sp}
 8012f9c:	08012ec1 	stmdaeq	r1, {r0, r6, r7, r9, sl, fp, sp}
 8012fa0:	08012ec1 	stmdaeq	r1, {r0, r6, r7, r9, sl, fp, sp}
 8012fa4:	08013037 	stmdaeq	r1, {r0, r1, r2, r4, r5, ip, sp}
 8012fa8:	08012ec1 	stmdaeq	r1, {r0, r6, r7, r9, sl, fp, sp}
 8012fac:	080130ab 	stmdaeq	r1, {r0, r1, r3, r5, r7, ip, sp}
 8012fb0:	08012ec1 	stmdaeq	r1, {r0, r6, r7, r9, sl, fp, sp}
 8012fb4:	08012ec1 	stmdaeq	r1, {r0, r6, r7, r9, sl, fp, sp}
 8012fb8:	08012f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, sp}
 8012fbc:	2964      	cmp	r1, #100	; 0x64
 8012fbe:	d002      	beq.n	8012fc6 <_vprintf+0x12e>
 8012fc0:	2969      	cmp	r1, #105	; 0x69
 8012fc2:	f47f af7d 	bne.w	8012ec0 <_vprintf+0x28>
 8012fc6:	9901      	ldr	r1, [sp, #4]
 8012fc8:	074d      	lsls	r5, r1, #29
 8012fca:	bf51      	iteee	pl
 8012fcc:	4625      	movpl	r5, r4
 8012fce:	3407      	addmi	r4, #7
 8012fd0:	f024 0407 	bicmi.w	r4, r4, #7
 8012fd4:	4625      	movmi	r5, r4
 8012fd6:	bf55      	itete	pl
 8012fd8:	f855 2b04 	ldrpl.w	r2, [r5], #4
 8012fdc:	6863      	ldrmi	r3, [r4, #4]
 8012fde:	17d3      	asrpl	r3, r2, #31
 8012fe0:	f855 2b08 	ldrmi.w	r2, [r5], #8
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	da05      	bge.n	8012ff4 <_vprintf+0x15c>
 8012fe8:	f041 0108 	orr.w	r1, r1, #8
 8012fec:	4252      	negs	r2, r2
 8012fee:	9101      	str	r1, [sp, #4]
 8012ff0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8012ff4:	a801      	add	r0, sp, #4
 8012ff6:	f7ff fe87 	bl	8012d08 <_format_int>
 8012ffa:	e005      	b.n	8013008 <_vprintf+0x170>
 8012ffc:	4625      	mov	r5, r4
 8012ffe:	a801      	add	r0, sp, #4
 8013000:	f855 1b04 	ldr.w	r1, [r5], #4
 8013004:	f7ff fe6a 	bl	8012cdc <_xputch>
 8013008:	462c      	mov	r4, r5
 801300a:	3601      	adds	r6, #1
 801300c:	e75b      	b.n	8012ec6 <_vprintf+0x2e>
 801300e:	2308      	movs	r3, #8
 8013010:	4625      	mov	r5, r4
 8013012:	9303      	str	r3, [sp, #12]
 8013014:	2320      	movs	r3, #32
 8013016:	2130      	movs	r1, #48	; 0x30
 8013018:	f855 4b04 	ldr.w	r4, [r5], #4
 801301c:	a801      	add	r0, sp, #4
 801301e:	9301      	str	r3, [sp, #4]
 8013020:	f7ff fe5c 	bl	8012cdc <_xputch>
 8013024:	2178      	movs	r1, #120	; 0x78
 8013026:	a801      	add	r0, sp, #4
 8013028:	f7ff fe58 	bl	8012cdc <_xputch>
 801302c:	4621      	mov	r1, r4
 801302e:	a801      	add	r0, sp, #4
 8013030:	f7ff fed4 	bl	8012ddc <_format_hex>
 8013034:	e7e8      	b.n	8013008 <_vprintf+0x170>
 8013036:	4625      	mov	r5, r4
 8013038:	2400      	movs	r4, #0
 801303a:	f855 9b04 	ldr.w	r9, [r5], #4
 801303e:	f819 3004 	ldrb.w	r3, [r9, r4]
 8013042:	b993      	cbnz	r3, 801306a <_vprintf+0x1d2>
 8013044:	9b01      	ldr	r3, [sp, #4]
 8013046:	07d9      	lsls	r1, r3, #31
 8013048:	d503      	bpl.n	8013052 <_vprintf+0x1ba>
 801304a:	9b02      	ldr	r3, [sp, #8]
 801304c:	429c      	cmp	r4, r3
 801304e:	bfa8      	it	ge
 8013050:	461c      	movge	r4, r3
 8013052:	9b01      	ldr	r3, [sp, #4]
 8013054:	f104 0a01 	add.w	sl, r4, #1
 8013058:	065a      	lsls	r2, r3, #25
 801305a:	d403      	bmi.n	8013064 <_vprintf+0x1cc>
 801305c:	9b03      	ldr	r3, [sp, #12]
 801305e:	429c      	cmp	r4, r3
 8013060:	db05      	blt.n	801306e <_vprintf+0x1d6>
 8013062:	4654      	mov	r4, sl
 8013064:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8013068:	e00d      	b.n	8013086 <_vprintf+0x1ee>
 801306a:	3401      	adds	r4, #1
 801306c:	e7e7      	b.n	801303e <_vprintf+0x1a6>
 801306e:	2120      	movs	r1, #32
 8013070:	a801      	add	r0, sp, #4
 8013072:	f7ff fe33 	bl	8012cdc <_xputch>
 8013076:	4654      	mov	r4, sl
 8013078:	e7eb      	b.n	8013052 <_vprintf+0x1ba>
 801307a:	a801      	add	r0, sp, #4
 801307c:	f7ff fe2e 	bl	8012cdc <_xputch>
 8013080:	9b02      	ldr	r3, [sp, #8]
 8013082:	3b01      	subs	r3, #1
 8013084:	9302      	str	r3, [sp, #8]
 8013086:	9b01      	ldr	r3, [sp, #4]
 8013088:	07db      	lsls	r3, r3, #31
 801308a:	d501      	bpl.n	8013090 <_vprintf+0x1f8>
 801308c:	9b02      	ldr	r3, [sp, #8]
 801308e:	b11b      	cbz	r3, 8013098 <_vprintf+0x200>
 8013090:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8013094:	2900      	cmp	r1, #0
 8013096:	d1f0      	bne.n	801307a <_vprintf+0x1e2>
 8013098:	9b03      	ldr	r3, [sp, #12]
 801309a:	42a3      	cmp	r3, r4
 801309c:	ddb4      	ble.n	8013008 <_vprintf+0x170>
 801309e:	2120      	movs	r1, #32
 80130a0:	a801      	add	r0, sp, #4
 80130a2:	f7ff fe1b 	bl	8012cdc <_xputch>
 80130a6:	3401      	adds	r4, #1
 80130a8:	e7f6      	b.n	8013098 <_vprintf+0x200>
 80130aa:	9b01      	ldr	r3, [sp, #4]
 80130ac:	f013 0304 	ands.w	r3, r3, #4
 80130b0:	bf1d      	ittte	ne
 80130b2:	3407      	addne	r4, #7
 80130b4:	f024 0407 	bicne.w	r4, r4, #7
 80130b8:	4625      	movne	r5, r4
 80130ba:	4625      	moveq	r5, r4
 80130bc:	bf1a      	itte	ne
 80130be:	f855 2b08 	ldrne.w	r2, [r5], #8
 80130c2:	6863      	ldrne	r3, [r4, #4]
 80130c4:	f855 2b04 	ldreq.w	r2, [r5], #4
 80130c8:	e794      	b.n	8012ff4 <_vprintf+0x15c>
 80130ca:	bf00      	nop

080130cc <printf>:
 80130cc:	b40f      	push	{r0, r1, r2, r3}
 80130ce:	b507      	push	{r0, r1, r2, lr}
 80130d0:	aa04      	add	r2, sp, #16
 80130d2:	f852 1b04 	ldr.w	r1, [r2], #4
 80130d6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80130da:	9201      	str	r2, [sp, #4]
 80130dc:	f7ff fedc 	bl	8012e98 <_vprintf>
 80130e0:	b003      	add	sp, #12
 80130e2:	f85d eb04 	ldr.w	lr, [sp], #4
 80130e6:	b004      	add	sp, #16
 80130e8:	4770      	bx	lr
	...

080130ec <sprintf>:
 80130ec:	b40e      	push	{r1, r2, r3}
 80130ee:	b517      	push	{r0, r1, r2, r4, lr}
 80130f0:	4c09      	ldr	r4, [pc, #36]	; (8013118 <sprintf+0x2c>)
 80130f2:	aa05      	add	r2, sp, #20
 80130f4:	f852 1b04 	ldr.w	r1, [r2], #4
 80130f8:	6020      	str	r0, [r4, #0]
 80130fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80130fe:	9201      	str	r2, [sp, #4]
 8013100:	f7ff feca 	bl	8012e98 <_vprintf>
 8013104:	2300      	movs	r3, #0
 8013106:	6822      	ldr	r2, [r4, #0]
 8013108:	6023      	str	r3, [r4, #0]
 801310a:	7013      	strb	r3, [r2, #0]
 801310c:	b003      	add	sp, #12
 801310e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013112:	b003      	add	sp, #12
 8013114:	4770      	bx	lr
 8013116:	bf00      	nop
 8013118:	2000a234 	andcs	sl, r0, r4, lsr r2

0801311c <snprintf>:
 801311c:	b40c      	push	{r2, r3}
 801311e:	460b      	mov	r3, r1
 8013120:	b513      	push	{r0, r1, r4, lr}
 8013122:	4c09      	ldr	r4, [pc, #36]	; (8013148 <snprintf+0x2c>)
 8013124:	aa04      	add	r2, sp, #16
 8013126:	f852 1b04 	ldr.w	r1, [r2], #4
 801312a:	6020      	str	r0, [r4, #0]
 801312c:	4618      	mov	r0, r3
 801312e:	9201      	str	r2, [sp, #4]
 8013130:	f7ff feb2 	bl	8012e98 <_vprintf>
 8013134:	2300      	movs	r3, #0
 8013136:	6822      	ldr	r2, [r4, #0]
 8013138:	6023      	str	r3, [r4, #0]
 801313a:	7013      	strb	r3, [r2, #0]
 801313c:	b002      	add	sp, #8
 801313e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013142:	b002      	add	sp, #8
 8013144:	4770      	bx	lr
 8013146:	bf00      	nop
 8013148:	2000a234 	andcs	sl, r0, r4, lsr r2

0801314c <vsnprintf>:
 801314c:	b538      	push	{r3, r4, r5, lr}
 801314e:	4605      	mov	r5, r0
 8013150:	4c05      	ldr	r4, [pc, #20]	; (8013168 <vsnprintf+0x1c>)
 8013152:	4608      	mov	r0, r1
 8013154:	4611      	mov	r1, r2
 8013156:	461a      	mov	r2, r3
 8013158:	6025      	str	r5, [r4, #0]
 801315a:	f7ff fe9d 	bl	8012e98 <_vprintf>
 801315e:	2300      	movs	r3, #0
 8013160:	6822      	ldr	r2, [r4, #0]
 8013162:	6023      	str	r3, [r4, #0]
 8013164:	7013      	strb	r3, [r2, #0]
 8013166:	bd38      	pop	{r3, r4, r5, pc}
 8013168:	2000a234 	andcs	sl, r0, r4, lsr r2

0801316c <puts>:
 801316c:	b508      	push	{r3, lr}
 801316e:	f7ff fb25 	bl	80127bc <console_puts>
 8013172:	200a      	movs	r0, #10
 8013174:	f7ff fb20 	bl	80127b8 <console_putc>
 8013178:	2001      	movs	r0, #1
 801317a:	bd08      	pop	{r3, pc}

0801317c <strtok>:
 801317c:	b530      	push	{r4, r5, lr}
 801317e:	b910      	cbnz	r0, 8013186 <strtok+0xa>
 8013180:	4b12      	ldr	r3, [pc, #72]	; (80131cc <strtok+0x50>)
 8013182:	6818      	ldr	r0, [r3, #0]
 8013184:	b158      	cbz	r0, 801319e <strtok+0x22>
 8013186:	4603      	mov	r3, r0
 8013188:	460d      	mov	r5, r1
 801318a:	4618      	mov	r0, r3
 801318c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013190:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013194:	b924      	cbnz	r4, 80131a0 <strtok+0x24>
 8013196:	b94a      	cbnz	r2, 80131ac <strtok+0x30>
 8013198:	4610      	mov	r0, r2
 801319a:	4b0c      	ldr	r3, [pc, #48]	; (80131cc <strtok+0x50>)
 801319c:	601a      	str	r2, [r3, #0]
 801319e:	bd30      	pop	{r4, r5, pc}
 80131a0:	42a2      	cmp	r2, r4
 80131a2:	d1f5      	bne.n	8013190 <strtok+0x14>
 80131a4:	e7f0      	b.n	8013188 <strtok+0xc>
 80131a6:	4613      	mov	r3, r2
 80131a8:	e00c      	b.n	80131c4 <strtok+0x48>
 80131aa:	b914      	cbnz	r4, 80131b2 <strtok+0x36>
 80131ac:	460d      	mov	r5, r1
 80131ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80131b6:	42a2      	cmp	r2, r4
 80131b8:	d1f7      	bne.n	80131aa <strtok+0x2e>
 80131ba:	2a00      	cmp	r2, #0
 80131bc:	d0f3      	beq.n	80131a6 <strtok+0x2a>
 80131be:	2200      	movs	r2, #0
 80131c0:	f803 2c01 	strb.w	r2, [r3, #-1]
 80131c4:	4a01      	ldr	r2, [pc, #4]	; (80131cc <strtok+0x50>)
 80131c6:	6013      	str	r3, [r2, #0]
 80131c8:	e7e9      	b.n	801319e <strtok+0x22>
 80131ca:	bf00      	nop
 80131cc:	2000a238 	andcs	sl, r0, r8, lsr r2

080131d0 <isleapyear>:
 80131d0:	2264      	movs	r2, #100	; 0x64
 80131d2:	fb90 f3f2 	sdiv	r3, r0, r2
 80131d6:	fb02 0313 	mls	r3, r2, r3, r0
 80131da:	b94b      	cbnz	r3, 80131f0 <isleapyear+0x20>
 80131dc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80131e0:	fb90 f2f3 	sdiv	r2, r0, r3
 80131e4:	fb03 0012 	mls	r0, r3, r2, r0
 80131e8:	fab0 f080 	clz	r0, r0
 80131ec:	0940      	lsrs	r0, r0, #5
 80131ee:	4770      	bx	lr
 80131f0:	f010 0f03 	tst.w	r0, #3
 80131f4:	bf0c      	ite	eq
 80131f6:	2001      	moveq	r0, #1
 80131f8:	2000      	movne	r0, #0
 80131fa:	4770      	bx	lr

080131fc <getdaysofmonth>:
 80131fc:	b510      	push	{r4, lr}
 80131fe:	4604      	mov	r4, r0
 8013200:	2c01      	cmp	r4, #1
 8013202:	4608      	mov	r0, r1
 8013204:	d102      	bne.n	801320c <getdaysofmonth+0x10>
 8013206:	f7ff ffe3 	bl	80131d0 <isleapyear>
 801320a:	b918      	cbnz	r0, 8013214 <getdaysofmonth+0x18>
 801320c:	4b02      	ldr	r3, [pc, #8]	; (8013218 <getdaysofmonth+0x1c>)
 801320e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013212:	bd10      	pop	{r4, pc}
 8013214:	201d      	movs	r0, #29
 8013216:	e7fc      	b.n	8013212 <getdaysofmonth+0x16>
 8013218:	080176ac 	stmdaeq	r1, {r2, r3, r5, r7, r9, sl, ip, sp, lr}

0801321c <mktime>:
 801321c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013220:	4604      	mov	r4, r0
 8013222:	2800      	cmp	r0, #0
 8013224:	d043      	beq.n	80132ae <mktime+0x92>
 8013226:	6941      	ldr	r1, [r0, #20]
 8013228:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 801322c:	2b45      	cmp	r3, #69	; 0x45
 801322e:	d83e      	bhi.n	80132ae <mktime+0x92>
 8013230:	2600      	movs	r6, #0
 8013232:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8013236:	f240 186d 	movw	r8, #365	; 0x16d
 801323a:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 801323e:	42af      	cmp	r7, r5
 8013240:	da24      	bge.n	801328c <mktime+0x70>
 8013242:	6927      	ldr	r7, [r4, #16]
 8013244:	2f0b      	cmp	r7, #11
 8013246:	d832      	bhi.n	80132ae <mktime+0x92>
 8013248:	2500      	movs	r5, #0
 801324a:	42af      	cmp	r7, r5
 801324c:	d129      	bne.n	80132a2 <mktime+0x86>
 801324e:	68e5      	ldr	r5, [r4, #12]
 8013250:	2d00      	cmp	r5, #0
 8013252:	dd2c      	ble.n	80132ae <mktime+0x92>
 8013254:	4638      	mov	r0, r7
 8013256:	f7ff ffd1 	bl	80131fc <getdaysofmonth>
 801325a:	4285      	cmp	r5, r0
 801325c:	dc27      	bgt.n	80132ae <mktime+0x92>
 801325e:	2318      	movs	r3, #24
 8013260:	3d01      	subs	r5, #1
 8013262:	4435      	add	r5, r6
 8013264:	435d      	muls	r5, r3
 8013266:	68a3      	ldr	r3, [r4, #8]
 8013268:	2b17      	cmp	r3, #23
 801326a:	d820      	bhi.n	80132ae <mktime+0x92>
 801326c:	213c      	movs	r1, #60	; 0x3c
 801326e:	442b      	add	r3, r5
 8013270:	fb01 f203 	mul.w	r2, r1, r3
 8013274:	6863      	ldr	r3, [r4, #4]
 8013276:	2b3b      	cmp	r3, #59	; 0x3b
 8013278:	d819      	bhi.n	80132ae <mktime+0x92>
 801327a:	6820      	ldr	r0, [r4, #0]
 801327c:	4413      	add	r3, r2
 801327e:	283b      	cmp	r0, #59	; 0x3b
 8013280:	fb01 f303 	mul.w	r3, r1, r3
 8013284:	d813      	bhi.n	80132ae <mktime+0x92>
 8013286:	4418      	add	r0, r3
 8013288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801328c:	4628      	mov	r0, r5
 801328e:	f7ff ff9f 	bl	80131d0 <isleapyear>
 8013292:	2800      	cmp	r0, #0
 8013294:	bf14      	ite	ne
 8013296:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 801329a:	4643      	moveq	r3, r8
 801329c:	3501      	adds	r5, #1
 801329e:	441e      	add	r6, r3
 80132a0:	e7cd      	b.n	801323e <mktime+0x22>
 80132a2:	4628      	mov	r0, r5
 80132a4:	f7ff ffaa 	bl	80131fc <getdaysofmonth>
 80132a8:	3501      	adds	r5, #1
 80132aa:	4406      	add	r6, r0
 80132ac:	e7cd      	b.n	801324a <mktime+0x2e>
 80132ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132b2:	e7e9      	b.n	8013288 <mktime+0x6c>

080132b4 <gettimeofday>:
 80132b4:	b538      	push	{r3, r4, r5, lr}
 80132b6:	4b10      	ldr	r3, [pc, #64]	; (80132f8 <gettimeofday+0x44>)
 80132b8:	4a10      	ldr	r2, [pc, #64]	; (80132fc <gettimeofday+0x48>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	6814      	ldr	r4, [r2, #0]
 80132be:	6013      	str	r3, [r2, #0]
 80132c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80132c4:	429c      	cmp	r4, r3
 80132c6:	bf2c      	ite	cs
 80132c8:	1ae4      	subcs	r4, r4, r3
 80132ca:	1b1c      	subcc	r4, r3, r4
 80132cc:	4354      	muls	r4, r2
 80132ce:	4b0c      	ldr	r3, [pc, #48]	; (8013300 <gettimeofday+0x4c>)
 80132d0:	4605      	mov	r5, r0
 80132d2:	e9d3 2100 	ldrd	r2, r1, [r3]
 80132d6:	18a4      	adds	r4, r4, r2
 80132d8:	f141 0100 	adc.w	r1, r1, #0
 80132dc:	e9c3 4100 	strd	r4, r1, [r3]
 80132e0:	4620      	mov	r0, r4
 80132e2:	2300      	movs	r3, #0
 80132e4:	4a07      	ldr	r2, [pc, #28]	; (8013304 <gettimeofday+0x50>)
 80132e6:	f7f4 fbfd 	bl	8007ae4 <__aeabi_uldivmod>
 80132ea:	4b06      	ldr	r3, [pc, #24]	; (8013304 <gettimeofday+0x50>)
 80132ec:	6028      	str	r0, [r5, #0]
 80132ee:	fb03 4410 	mls	r4, r3, r0, r4
 80132f2:	2000      	movs	r0, #0
 80132f4:	606c      	str	r4, [r5, #4]
 80132f6:	bd38      	pop	{r3, r4, r5, pc}
 80132f8:	2000a24c 	andcs	sl, r0, ip, asr #4
 80132fc:	2000a248 	andcs	sl, r0, r8, asr #4
 8013300:	2000a240 	andcs	sl, r0, r0, asr #4
 8013304:	000f4240 	andeq	r4, pc, r0, asr #4

08013308 <settimeofday>:
 8013308:	4b07      	ldr	r3, [pc, #28]	; (8013328 <settimeofday+0x20>)
 801330a:	b510      	push	{r4, lr}
 801330c:	681a      	ldr	r2, [r3, #0]
 801330e:	4b07      	ldr	r3, [pc, #28]	; (801332c <settimeofday+0x24>)
 8013310:	6804      	ldr	r4, [r0, #0]
 8013312:	601a      	str	r2, [r3, #0]
 8013314:	6843      	ldr	r3, [r0, #4]
 8013316:	4806      	ldr	r0, [pc, #24]	; (8013330 <settimeofday+0x28>)
 8013318:	17da      	asrs	r2, r3, #31
 801331a:	fbc4 3200 	smlal	r3, r2, r4, r0
 801331e:	4905      	ldr	r1, [pc, #20]	; (8013334 <settimeofday+0x2c>)
 8013320:	2000      	movs	r0, #0
 8013322:	e9c1 3200 	strd	r3, r2, [r1]
 8013326:	bd10      	pop	{r4, pc}
 8013328:	2000a24c 	andcs	sl, r0, ip, asr #4
 801332c:	2000a248 	andcs	sl, r0, r8, asr #4
 8013330:	000f4240 	andeq	r4, pc, r0, asr #4
 8013334:	2000a240 	andcs	sl, r0, r0, asr #4

08013338 <time>:
 8013338:	b513      	push	{r0, r1, r4, lr}
 801333a:	4604      	mov	r4, r0
 801333c:	2100      	movs	r1, #0
 801333e:	4668      	mov	r0, sp
 8013340:	f7ff ffb8 	bl	80132b4 <gettimeofday>
 8013344:	9800      	ldr	r0, [sp, #0]
 8013346:	b104      	cbz	r4, 801334a <time+0x12>
 8013348:	6020      	str	r0, [r4, #0]
 801334a:	b002      	add	sp, #8
 801334c:	bd10      	pop	{r4, pc}
	...

08013350 <uart0_init>:
 8013350:	2301      	movs	r3, #1
 8013352:	b507      	push	{r0, r1, r2, lr}
 8013354:	2208      	movs	r2, #8
 8013356:	9300      	str	r3, [sp, #0]
 8013358:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 801335c:	2300      	movs	r3, #0
 801335e:	4803      	ldr	r0, [pc, #12]	; (801336c <uart0_init+0x1c>)
 8013360:	f000 ff72 	bl	8014248 <gd32_uart_begin>
 8013364:	b003      	add	sp, #12
 8013366:	f85d fb04 	ldr.w	pc, [sp], #4
 801336a:	bf00      	nop
 801336c:	40013800 	andmi	r3, r1, r0, lsl #16

08013370 <uart0_putc>:
 8013370:	280a      	cmp	r0, #10
 8013372:	b538      	push	{r3, r4, r5, lr}
 8013374:	4604      	mov	r4, r0
 8013376:	d10a      	bne.n	801338e <uart0_putc+0x1e>
 8013378:	4d0b      	ldr	r5, [pc, #44]	; (80133a8 <uart0_putc+0x38>)
 801337a:	2107      	movs	r1, #7
 801337c:	4628      	mov	r0, r5
 801337e:	f000 fd75 	bl	8013e6c <usart_flag_get>
 8013382:	2800      	cmp	r0, #0
 8013384:	d0f9      	beq.n	801337a <uart0_putc+0xa>
 8013386:	220d      	movs	r2, #13
 8013388:	4b08      	ldr	r3, [pc, #32]	; (80133ac <uart0_putc+0x3c>)
 801338a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 801338e:	4d06      	ldr	r5, [pc, #24]	; (80133a8 <uart0_putc+0x38>)
 8013390:	2107      	movs	r1, #7
 8013392:	4628      	mov	r0, r5
 8013394:	f000 fd6a 	bl	8013e6c <usart_flag_get>
 8013398:	2800      	cmp	r0, #0
 801339a:	d0f9      	beq.n	8013390 <uart0_putc+0x20>
 801339c:	4b03      	ldr	r3, [pc, #12]	; (80133ac <uart0_putc+0x3c>)
 801339e:	b2e4      	uxtb	r4, r4
 80133a0:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 80133a4:	bd38      	pop	{r3, r4, r5, pc}
 80133a6:	bf00      	nop
 80133a8:	40013800 	andmi	r3, r1, r0, lsl #16
 80133ac:	40013000 	andmi	r3, r1, r0

080133b0 <uart0_puts>:
 80133b0:	b510      	push	{r4, lr}
 80133b2:	1e44      	subs	r4, r0, #1
 80133b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80133b8:	b903      	cbnz	r3, 80133bc <uart0_puts+0xc>
 80133ba:	bd10      	pop	{r4, pc}
 80133bc:	2b0a      	cmp	r3, #10
 80133be:	d102      	bne.n	80133c6 <uart0_puts+0x16>
 80133c0:	200d      	movs	r0, #13
 80133c2:	f7ff ffd5 	bl	8013370 <uart0_putc>
 80133c6:	7820      	ldrb	r0, [r4, #0]
 80133c8:	f7ff ffd2 	bl	8013370 <uart0_putc>
 80133cc:	e7f2      	b.n	80133b4 <uart0_puts+0x4>
	...

080133d0 <systick_config>:
 80133d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80133d4:	4b0b      	ldr	r3, [pc, #44]	; (8013404 <systick_config+0x34>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80133dc:	3b01      	subs	r3, #1
 80133de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80133e2:	d20d      	bcs.n	8013400 <systick_config+0x30>
 80133e4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80133e8:	21f0      	movs	r1, #240	; 0xf0
 80133ea:	6153      	str	r3, [r2, #20]
 80133ec:	4b06      	ldr	r3, [pc, #24]	; (8013408 <systick_config+0x38>)
 80133ee:	2007      	movs	r0, #7
 80133f0:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80133f4:	2100      	movs	r1, #0
 80133f6:	6191      	str	r1, [r2, #24]
 80133f8:	6110      	str	r0, [r2, #16]
 80133fa:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80133fe:	4770      	bx	lr
 8013400:	e7fe      	b.n	8013400 <systick_config+0x30>
 8013402:	bf00      	nop
 8013404:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8013408:	e000ed00 	and	lr, r0, r0, lsl #26

0801340c <SysTick_Handler>:
 801340c:	4a02      	ldr	r2, [pc, #8]	; (8013418 <SysTick_Handler+0xc>)
 801340e:	6813      	ldr	r3, [r2, #0]
 8013410:	3301      	adds	r3, #1
 8013412:	6013      	str	r3, [r2, #0]
 8013414:	4770      	bx	lr
 8013416:	bf00      	nop
 8013418:	2000a24c 	andcs	sl, r0, ip, asr #4

0801341c <SystemInit>:
 801341c:	4b37      	ldr	r3, [pc, #220]	; (80134fc <SystemInit+0xe0>)
 801341e:	4938      	ldr	r1, [pc, #224]	; (8013500 <SystemInit+0xe4>)
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	f042 0201 	orr.w	r2, r2, #1
 8013426:	601a      	str	r2, [r3, #0]
 8013428:	685a      	ldr	r2, [r3, #4]
 801342a:	f022 0203 	bic.w	r2, r2, #3
 801342e:	605a      	str	r2, [r3, #4]
 8013430:	681a      	ldr	r2, [r3, #0]
 8013432:	400a      	ands	r2, r1
 8013434:	601a      	str	r2, [r3, #0]
 8013436:	6858      	ldr	r0, [r3, #4]
 8013438:	4a32      	ldr	r2, [pc, #200]	; (8013504 <SystemInit+0xe8>)
 801343a:	4002      	ands	r2, r0
 801343c:	605a      	str	r2, [r3, #4]
 801343e:	681a      	ldr	r2, [r3, #0]
 8013440:	400a      	ands	r2, r1
 8013442:	601a      	str	r2, [r3, #0]
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801344a:	601a      	str	r2, [r3, #0]
 801344c:	685a      	ldr	r2, [r3, #4]
 801344e:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 8013452:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8013456:	605a      	str	r2, [r3, #4]
 8013458:	2200      	movs	r2, #0
 801345a:	62da      	str	r2, [r3, #44]	; 0x2c
 801345c:	681a      	ldr	r2, [r3, #0]
 801345e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8013462:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8013466:	601a      	str	r2, [r3, #0]
 8013468:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 801346c:	609a      	str	r2, [r3, #8]
 801346e:	681a      	ldr	r2, [r3, #0]
 8013470:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8013474:	601a      	str	r2, [r3, #0]
 8013476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801347a:	6819      	ldr	r1, [r3, #0]
 801347c:	0389      	lsls	r1, r1, #14
 801347e:	d401      	bmi.n	8013484 <SystemInit+0x68>
 8013480:	3a01      	subs	r2, #1
 8013482:	d1fa      	bne.n	801347a <SystemInit+0x5e>
 8013484:	681a      	ldr	r2, [r3, #0]
 8013486:	0392      	lsls	r2, r2, #14
 8013488:	d400      	bmi.n	801348c <SystemInit+0x70>
 801348a:	e7fe      	b.n	801348a <SystemInit+0x6e>
 801348c:	685a      	ldr	r2, [r3, #4]
 801348e:	605a      	str	r2, [r3, #4]
 8013490:	685a      	ldr	r2, [r3, #4]
 8013492:	605a      	str	r2, [r3, #4]
 8013494:	685a      	ldr	r2, [r3, #4]
 8013496:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801349a:	605a      	str	r2, [r3, #4]
 801349c:	685a      	ldr	r2, [r3, #4]
 801349e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80134a2:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80134a6:	605a      	str	r2, [r3, #4]
 80134a8:	685a      	ldr	r2, [r3, #4]
 80134aa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80134ae:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 80134b2:	605a      	str	r2, [r3, #4]
 80134b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80134b6:	4a14      	ldr	r2, [pc, #80]	; (8013508 <SystemInit+0xec>)
 80134b8:	400a      	ands	r2, r1
 80134ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80134bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134be:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 80134c2:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 80134c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80134c8:	681a      	ldr	r2, [r3, #0]
 80134ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80134ce:	601a      	str	r2, [r3, #0]
 80134d0:	681a      	ldr	r2, [r3, #0]
 80134d2:	0110      	lsls	r0, r2, #4
 80134d4:	d5fc      	bpl.n	80134d0 <SystemInit+0xb4>
 80134d6:	681a      	ldr	r2, [r3, #0]
 80134d8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80134dc:	601a      	str	r2, [r3, #0]
 80134de:	681a      	ldr	r2, [r3, #0]
 80134e0:	0191      	lsls	r1, r2, #6
 80134e2:	d5fc      	bpl.n	80134de <SystemInit+0xc2>
 80134e4:	685a      	ldr	r2, [r3, #4]
 80134e6:	f022 0203 	bic.w	r2, r2, #3
 80134ea:	605a      	str	r2, [r3, #4]
 80134ec:	685a      	ldr	r2, [r3, #4]
 80134ee:	f042 0202 	orr.w	r2, r2, #2
 80134f2:	605a      	str	r2, [r3, #4]
 80134f4:	685a      	ldr	r2, [r3, #4]
 80134f6:	0712      	lsls	r2, r2, #28
 80134f8:	d5fc      	bpl.n	80134f4 <SystemInit+0xd8>
 80134fa:	4770      	bx	lr
 80134fc:	40021000 	andmi	r1, r2, r0
 8013500:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 8013504:	e0ff000c 	rscs	r0, pc, ip
 8013508:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

0801350c <bkp_data_write>:
 801350c:	f1a0 030b 	sub.w	r3, r0, #11
 8013510:	2b1f      	cmp	r3, #31
 8013512:	d804      	bhi.n	801351e <bkp_data_write+0x12>
 8013514:	4b07      	ldr	r3, [pc, #28]	; (8013534 <bkp_data_write+0x28>)
 8013516:	4403      	add	r3, r0
 8013518:	009b      	lsls	r3, r3, #2
 801351a:	8019      	strh	r1, [r3, #0]
 801351c:	4770      	bx	lr
 801351e:	1e43      	subs	r3, r0, #1
 8013520:	2b09      	cmp	r3, #9
 8013522:	bf9f      	itttt	ls
 8013524:	f100 5080 	addls.w	r0, r0, #268435456	; 0x10000000
 8013528:	f500 50d8 	addls.w	r0, r0, #6912	; 0x1b00
 801352c:	0080      	lslls	r0, r0, #2
 801352e:	8001      	strhls	r1, [r0, #0]
 8013530:	4770      	bx	lr
 8013532:	bf00      	nop
 8013534:	10001b05 	andne	r1, r0, r5, lsl #22

08013538 <bkp_data_read>:
 8013538:	f1a0 030b 	sub.w	r3, r0, #11
 801353c:	2b1f      	cmp	r3, #31
 801353e:	d805      	bhi.n	801354c <bkp_data_read+0x14>
 8013540:	4b08      	ldr	r3, [pc, #32]	; (8013564 <bkp_data_read+0x2c>)
 8013542:	4403      	add	r3, r0
 8013544:	009b      	lsls	r3, r3, #2
 8013546:	8818      	ldrh	r0, [r3, #0]
 8013548:	b280      	uxth	r0, r0
 801354a:	4770      	bx	lr
 801354c:	1e43      	subs	r3, r0, #1
 801354e:	2b09      	cmp	r3, #9
 8013550:	d806      	bhi.n	8013560 <bkp_data_read+0x28>
 8013552:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8013556:	f500 50d8 	add.w	r0, r0, #6912	; 0x1b00
 801355a:	0080      	lsls	r0, r0, #2
 801355c:	8800      	ldrh	r0, [r0, #0]
 801355e:	e7f3      	b.n	8013548 <bkp_data_read+0x10>
 8013560:	2000      	movs	r0, #0
 8013562:	4770      	bx	lr
 8013564:	10001b05 	andne	r1, r0, r5, lsl #22

08013568 <dma_deinit>:
 8013568:	4b0c      	ldr	r3, [pc, #48]	; (801359c <dma_deinit+0x34>)
 801356a:	4298      	cmp	r0, r3
 801356c:	d102      	bne.n	8013574 <dma_deinit+0xc>
 801356e:	2904      	cmp	r1, #4
 8013570:	d900      	bls.n	8013574 <dma_deinit+0xc>
 8013572:	e7fe      	b.n	8013572 <dma_deinit+0xa>
 8013574:	2314      	movs	r3, #20
 8013576:	fb03 0301 	mla	r3, r3, r1, r0
 801357a:	689a      	ldr	r2, [r3, #8]
 801357c:	0089      	lsls	r1, r1, #2
 801357e:	f022 0201 	bic.w	r2, r2, #1
 8013582:	609a      	str	r2, [r3, #8]
 8013584:	2200      	movs	r2, #0
 8013586:	609a      	str	r2, [r3, #8]
 8013588:	60da      	str	r2, [r3, #12]
 801358a:	611a      	str	r2, [r3, #16]
 801358c:	615a      	str	r2, [r3, #20]
 801358e:	230f      	movs	r3, #15
 8013590:	6842      	ldr	r2, [r0, #4]
 8013592:	408b      	lsls	r3, r1
 8013594:	4313      	orrs	r3, r2
 8013596:	6043      	str	r3, [r0, #4]
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop
 801359c:	40020400 	andmi	r0, r2, r0, lsl #8

080135a0 <dma_init>:
 80135a0:	4b1b      	ldr	r3, [pc, #108]	; (8013610 <dma_init+0x70>)
 80135a2:	b510      	push	{r4, lr}
 80135a4:	4298      	cmp	r0, r3
 80135a6:	d102      	bne.n	80135ae <dma_init+0xe>
 80135a8:	2904      	cmp	r1, #4
 80135aa:	d900      	bls.n	80135ae <dma_init+0xe>
 80135ac:	e7fe      	b.n	80135ac <dma_init+0xc>
 80135ae:	2314      	movs	r3, #20
 80135b0:	fb03 0101 	mla	r1, r3, r1, r0
 80135b4:	6813      	ldr	r3, [r2, #0]
 80135b6:	610b      	str	r3, [r1, #16]
 80135b8:	6893      	ldr	r3, [r2, #8]
 80135ba:	614b      	str	r3, [r1, #20]
 80135bc:	8a13      	ldrh	r3, [r2, #16]
 80135be:	60cb      	str	r3, [r1, #12]
 80135c0:	68d4      	ldr	r4, [r2, #12]
 80135c2:	6853      	ldr	r3, [r2, #4]
 80135c4:	6888      	ldr	r0, [r1, #8]
 80135c6:	4323      	orrs	r3, r4
 80135c8:	6954      	ldr	r4, [r2, #20]
 80135ca:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80135ce:	4323      	orrs	r3, r4
 80135d0:	4303      	orrs	r3, r0
 80135d2:	608b      	str	r3, [r1, #8]
 80135d4:	7e13      	ldrb	r3, [r2, #24]
 80135d6:	2b01      	cmp	r3, #1
 80135d8:	688b      	ldr	r3, [r1, #8]
 80135da:	bf0c      	ite	eq
 80135dc:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 80135e0:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 80135e4:	608b      	str	r3, [r1, #8]
 80135e6:	7e53      	ldrb	r3, [r2, #25]
 80135e8:	2b01      	cmp	r3, #1
 80135ea:	688b      	ldr	r3, [r1, #8]
 80135ec:	bf0c      	ite	eq
 80135ee:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 80135f2:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 80135f6:	608b      	str	r3, [r1, #8]
 80135f8:	7e93      	ldrb	r3, [r2, #26]
 80135fa:	b923      	cbnz	r3, 8013606 <dma_init+0x66>
 80135fc:	688b      	ldr	r3, [r1, #8]
 80135fe:	f023 0310 	bic.w	r3, r3, #16
 8013602:	608b      	str	r3, [r1, #8]
 8013604:	bd10      	pop	{r4, pc}
 8013606:	688b      	ldr	r3, [r1, #8]
 8013608:	f043 0310 	orr.w	r3, r3, #16
 801360c:	e7f9      	b.n	8013602 <dma_init+0x62>
 801360e:	bf00      	nop
 8013610:	40020400 	andmi	r0, r2, r0, lsl #8

08013614 <dma_circulation_disable>:
 8013614:	4b06      	ldr	r3, [pc, #24]	; (8013630 <dma_circulation_disable+0x1c>)
 8013616:	4298      	cmp	r0, r3
 8013618:	d102      	bne.n	8013620 <dma_circulation_disable+0xc>
 801361a:	2904      	cmp	r1, #4
 801361c:	d900      	bls.n	8013620 <dma_circulation_disable+0xc>
 801361e:	e7fe      	b.n	801361e <dma_circulation_disable+0xa>
 8013620:	2314      	movs	r3, #20
 8013622:	4359      	muls	r1, r3
 8013624:	3008      	adds	r0, #8
 8013626:	580b      	ldr	r3, [r1, r0]
 8013628:	f023 0320 	bic.w	r3, r3, #32
 801362c:	500b      	str	r3, [r1, r0]
 801362e:	4770      	bx	lr
 8013630:	40020400 	andmi	r0, r2, r0, lsl #8

08013634 <dma_memory_to_memory_disable>:
 8013634:	4b06      	ldr	r3, [pc, #24]	; (8013650 <dma_memory_to_memory_disable+0x1c>)
 8013636:	4298      	cmp	r0, r3
 8013638:	d102      	bne.n	8013640 <dma_memory_to_memory_disable+0xc>
 801363a:	2904      	cmp	r1, #4
 801363c:	d900      	bls.n	8013640 <dma_memory_to_memory_disable+0xc>
 801363e:	e7fe      	b.n	801363e <dma_memory_to_memory_disable+0xa>
 8013640:	2314      	movs	r3, #20
 8013642:	4359      	muls	r1, r3
 8013644:	3008      	adds	r0, #8
 8013646:	580b      	ldr	r3, [r1, r0]
 8013648:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801364c:	500b      	str	r3, [r1, r0]
 801364e:	4770      	bx	lr
 8013650:	40020400 	andmi	r0, r2, r0, lsl #8

08013654 <fmc_bank0_unlock>:
 8013654:	4b04      	ldr	r3, [pc, #16]	; (8013668 <fmc_bank0_unlock+0x14>)
 8013656:	691a      	ldr	r2, [r3, #16]
 8013658:	0612      	lsls	r2, r2, #24
 801365a:	bf41      	itttt	mi
 801365c:	4a03      	ldrmi	r2, [pc, #12]	; (801366c <fmc_bank0_unlock+0x18>)
 801365e:	605a      	strmi	r2, [r3, #4]
 8013660:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8013664:	605a      	strmi	r2, [r3, #4]
 8013666:	4770      	bx	lr
 8013668:	40022000 	andmi	r2, r2, r0
 801366c:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08013670 <fmc_bank1_unlock>:
 8013670:	4b04      	ldr	r3, [pc, #16]	; (8013684 <fmc_bank1_unlock+0x14>)
 8013672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013674:	0612      	lsls	r2, r2, #24
 8013676:	bf41      	itttt	mi
 8013678:	4a03      	ldrmi	r2, [pc, #12]	; (8013688 <fmc_bank1_unlock+0x18>)
 801367a:	645a      	strmi	r2, [r3, #68]	; 0x44
 801367c:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8013680:	645a      	strmi	r2, [r3, #68]	; 0x44
 8013682:	4770      	bx	lr
 8013684:	40022000 	andmi	r2, r2, r0
 8013688:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

0801368c <fmc_bank0_lock>:
 801368c:	4a02      	ldr	r2, [pc, #8]	; (8013698 <fmc_bank0_lock+0xc>)
 801368e:	6913      	ldr	r3, [r2, #16]
 8013690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013694:	6113      	str	r3, [r2, #16]
 8013696:	4770      	bx	lr
 8013698:	40022000 	andmi	r2, r2, r0

0801369c <fmc_bank1_lock>:
 801369c:	4a02      	ldr	r2, [pc, #8]	; (80136a8 <fmc_bank1_lock+0xc>)
 801369e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80136a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136a4:	6513      	str	r3, [r2, #80]	; 0x50
 80136a6:	4770      	bx	lr
 80136a8:	40022000 	andmi	r2, r2, r0

080136ac <fmc_bank0_state_get>:
 80136ac:	4b07      	ldr	r3, [pc, #28]	; (80136cc <fmc_bank0_state_get+0x20>)
 80136ae:	68da      	ldr	r2, [r3, #12]
 80136b0:	07d1      	lsls	r1, r2, #31
 80136b2:	d407      	bmi.n	80136c4 <fmc_bank0_state_get+0x18>
 80136b4:	68da      	ldr	r2, [r3, #12]
 80136b6:	06d2      	lsls	r2, r2, #27
 80136b8:	d406      	bmi.n	80136c8 <fmc_bank0_state_get+0x1c>
 80136ba:	68d8      	ldr	r0, [r3, #12]
 80136bc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80136c0:	0040      	lsls	r0, r0, #1
 80136c2:	4770      	bx	lr
 80136c4:	2001      	movs	r0, #1
 80136c6:	4770      	bx	lr
 80136c8:	2003      	movs	r0, #3
 80136ca:	4770      	bx	lr
 80136cc:	40022000 	andmi	r2, r2, r0

080136d0 <fmc_bank1_state_get>:
 80136d0:	4b07      	ldr	r3, [pc, #28]	; (80136f0 <fmc_bank1_state_get+0x20>)
 80136d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80136d4:	07d1      	lsls	r1, r2, #31
 80136d6:	d407      	bmi.n	80136e8 <fmc_bank1_state_get+0x18>
 80136d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80136da:	06d2      	lsls	r2, r2, #27
 80136dc:	d406      	bmi.n	80136ec <fmc_bank1_state_get+0x1c>
 80136de:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80136e0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80136e4:	0040      	lsls	r0, r0, #1
 80136e6:	4770      	bx	lr
 80136e8:	2001      	movs	r0, #1
 80136ea:	4770      	bx	lr
 80136ec:	2003      	movs	r0, #3
 80136ee:	4770      	bx	lr
 80136f0:	40022000 	andmi	r2, r2, r0

080136f4 <fwdgt_enable>:
 80136f4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80136f8:	4b01      	ldr	r3, [pc, #4]	; (8013700 <fwdgt_enable+0xc>)
 80136fa:	601a      	str	r2, [r3, #0]
 80136fc:	4770      	bx	lr
 80136fe:	bf00      	nop
 8013700:	40003000 	andmi	r3, r0, r0

08013704 <fwdgt_counter_reload>:
 8013704:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8013708:	4b01      	ldr	r3, [pc, #4]	; (8013710 <fwdgt_counter_reload+0xc>)
 801370a:	601a      	str	r2, [r3, #0]
 801370c:	4770      	bx	lr
 801370e:	bf00      	nop
 8013710:	40003000 	andmi	r3, r0, r0

08013714 <fwdgt_config>:
 8013714:	f245 5355 	movw	r3, #21845	; 0x5555
 8013718:	4a11      	ldr	r2, [pc, #68]	; (8013760 <fwdgt_config+0x4c>)
 801371a:	b510      	push	{r4, lr}
 801371c:	4c11      	ldr	r4, [pc, #68]	; (8013764 <fwdgt_config+0x50>)
 801371e:	6013      	str	r3, [r2, #0]
 8013720:	68d3      	ldr	r3, [r2, #12]
 8013722:	3c01      	subs	r4, #1
 8013724:	f003 0301 	and.w	r3, r3, #1
 8013728:	d013      	beq.n	8013752 <fwdgt_config+0x3e>
 801372a:	2b00      	cmp	r3, #0
 801372c:	d1f8      	bne.n	8013720 <fwdgt_config+0xc>
 801372e:	6051      	str	r1, [r2, #4]
 8013730:	490c      	ldr	r1, [pc, #48]	; (8013764 <fwdgt_config+0x50>)
 8013732:	4a0b      	ldr	r2, [pc, #44]	; (8013760 <fwdgt_config+0x4c>)
 8013734:	68d3      	ldr	r3, [r2, #12]
 8013736:	3901      	subs	r1, #1
 8013738:	f003 0302 	and.w	r3, r3, #2
 801373c:	d00d      	beq.n	801375a <fwdgt_config+0x46>
 801373e:	2b00      	cmp	r3, #0
 8013740:	d1f8      	bne.n	8013734 <fwdgt_config+0x20>
 8013742:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8013746:	f3c0 000b 	ubfx	r0, r0, #0, #12
 801374a:	6090      	str	r0, [r2, #8]
 801374c:	2001      	movs	r0, #1
 801374e:	6013      	str	r3, [r2, #0]
 8013750:	e002      	b.n	8013758 <fwdgt_config+0x44>
 8013752:	2b00      	cmp	r3, #0
 8013754:	d0eb      	beq.n	801372e <fwdgt_config+0x1a>
 8013756:	2000      	movs	r0, #0
 8013758:	bd10      	pop	{r4, pc}
 801375a:	2b00      	cmp	r3, #0
 801375c:	d1fb      	bne.n	8013756 <fwdgt_config+0x42>
 801375e:	e7f0      	b.n	8013742 <fwdgt_config+0x2e>
 8013760:	40003000 	andmi	r3, r0, r0
 8013764:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08013768 <gpio_init>:
 8013768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801376c:	f04f 0c0f 	mov.w	ip, #15
 8013770:	06cf      	lsls	r7, r1, #27
 8013772:	f04f 0400 	mov.w	r4, #0
 8013776:	f04f 0701 	mov.w	r7, #1
 801377a:	f001 050f 	and.w	r5, r1, #15
 801377e:	bf48      	it	mi
 8013780:	4315      	orrmi	r5, r2
 8013782:	fa23 f204 	lsr.w	r2, r3, r4
 8013786:	07d6      	lsls	r6, r2, #31
 8013788:	d510      	bpl.n	80137ac <gpio_init+0x44>
 801378a:	00a2      	lsls	r2, r4, #2
 801378c:	6806      	ldr	r6, [r0, #0]
 801378e:	fa0c fe02 	lsl.w	lr, ip, r2
 8013792:	ea26 060e 	bic.w	r6, r6, lr
 8013796:	fa05 f202 	lsl.w	r2, r5, r2
 801379a:	2928      	cmp	r1, #40	; 0x28
 801379c:	ea42 0206 	orr.w	r2, r2, r6
 80137a0:	d128      	bne.n	80137f4 <gpio_init+0x8c>
 80137a2:	fa07 f604 	lsl.w	r6, r7, r4
 80137a6:	401e      	ands	r6, r3
 80137a8:	6146      	str	r6, [r0, #20]
 80137aa:	6002      	str	r2, [r0, #0]
 80137ac:	3401      	adds	r4, #1
 80137ae:	2c08      	cmp	r4, #8
 80137b0:	d1e7      	bne.n	8013782 <gpio_init+0x1a>
 80137b2:	2600      	movs	r6, #0
 80137b4:	f04f 0c0f 	mov.w	ip, #15
 80137b8:	2701      	movs	r7, #1
 80137ba:	f106 0208 	add.w	r2, r6, #8
 80137be:	fa23 f402 	lsr.w	r4, r3, r2
 80137c2:	07e4      	lsls	r4, r4, #31
 80137c4:	d511      	bpl.n	80137ea <gpio_init+0x82>
 80137c6:	00b4      	lsls	r4, r6, #2
 80137c8:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80137cc:	fa0c f804 	lsl.w	r8, ip, r4
 80137d0:	ea2e 0e08 	bic.w	lr, lr, r8
 80137d4:	fa05 f404 	lsl.w	r4, r5, r4
 80137d8:	2928      	cmp	r1, #40	; 0x28
 80137da:	ea44 040e 	orr.w	r4, r4, lr
 80137de:	d110      	bne.n	8013802 <gpio_init+0x9a>
 80137e0:	fa07 f202 	lsl.w	r2, r7, r2
 80137e4:	401a      	ands	r2, r3
 80137e6:	6142      	str	r2, [r0, #20]
 80137e8:	6044      	str	r4, [r0, #4]
 80137ea:	3601      	adds	r6, #1
 80137ec:	2e08      	cmp	r6, #8
 80137ee:	d1e4      	bne.n	80137ba <gpio_init+0x52>
 80137f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137f4:	2948      	cmp	r1, #72	; 0x48
 80137f6:	bf02      	ittt	eq
 80137f8:	fa07 f604 	lsleq.w	r6, r7, r4
 80137fc:	401e      	andeq	r6, r3
 80137fe:	6106      	streq	r6, [r0, #16]
 8013800:	e7d3      	b.n	80137aa <gpio_init+0x42>
 8013802:	2948      	cmp	r1, #72	; 0x48
 8013804:	bf02      	ittt	eq
 8013806:	fa07 f202 	lsleq.w	r2, r7, r2
 801380a:	401a      	andeq	r2, r3
 801380c:	6102      	streq	r2, [r0, #16]
 801380e:	e7eb      	b.n	80137e8 <gpio_init+0x80>

08013810 <gpio_pin_remap_config>:
 8013810:	2800      	cmp	r0, #0
 8013812:	4a16      	ldr	r2, [pc, #88]	; (801386c <gpio_pin_remap_config+0x5c>)
 8013814:	b530      	push	{r4, r5, lr}
 8013816:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 801381a:	bfb4      	ite	lt
 801381c:	69d3      	ldrlt	r3, [r2, #28]
 801381e:	6853      	ldrge	r3, [r2, #4]
 8013820:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 8013824:	b284      	uxth	r4, r0
 8013826:	d110      	bne.n	801384a <gpio_pin_remap_config+0x3a>
 8013828:	6855      	ldr	r5, [r2, #4]
 801382a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 801382e:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8013832:	6055      	str	r5, [r2, #4]
 8013834:	b119      	cbz	r1, 801383e <gpio_pin_remap_config+0x2e>
 8013836:	0d42      	lsrs	r2, r0, #21
 8013838:	0112      	lsls	r2, r2, #4
 801383a:	4094      	lsls	r4, r2
 801383c:	4323      	orrs	r3, r4
 801383e:	4a0b      	ldr	r2, [pc, #44]	; (801386c <gpio_pin_remap_config+0x5c>)
 8013840:	2800      	cmp	r0, #0
 8013842:	bfb4      	ite	lt
 8013844:	61d3      	strlt	r3, [r2, #28]
 8013846:	6053      	strge	r3, [r2, #4]
 8013848:	bd30      	pop	{r4, r5, pc}
 801384a:	02c2      	lsls	r2, r0, #11
 801384c:	bf4d      	iteet	mi
 801384e:	2203      	movmi	r2, #3
 8013850:	0d42      	lsrpl	r2, r0, #21
 8013852:	0112      	lslpl	r2, r2, #4
 8013854:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 8013858:	bf4c      	ite	mi
 801385a:	40aa      	lslmi	r2, r5
 801385c:	fa04 f202 	lslpl.w	r2, r4, r2
 8013860:	ea23 0302 	bic.w	r3, r3, r2
 8013864:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8013868:	e7e4      	b.n	8013834 <gpio_pin_remap_config+0x24>
 801386a:	bf00      	nop
 801386c:	40010000 	andmi	r0, r1, r0

08013870 <gpio_ethernet_phy_select>:
 8013870:	4b04      	ldr	r3, [pc, #16]	; (8013884 <gpio_ethernet_phy_select+0x14>)
 8013872:	685a      	ldr	r2, [r3, #4]
 8013874:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8013878:	605a      	str	r2, [r3, #4]
 801387a:	685a      	ldr	r2, [r3, #4]
 801387c:	4302      	orrs	r2, r0
 801387e:	605a      	str	r2, [r3, #4]
 8013880:	4770      	bx	lr
 8013882:	bf00      	nop
 8013884:	40010000 	andmi	r0, r1, r0

08013888 <pmu_backup_write_enable>:
 8013888:	4a02      	ldr	r2, [pc, #8]	; (8013894 <pmu_backup_write_enable+0xc>)
 801388a:	6813      	ldr	r3, [r2, #0]
 801388c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013890:	6013      	str	r3, [r2, #0]
 8013892:	4770      	bx	lr
 8013894:	40007000 	andmi	r7, r0, r0

08013898 <rcu_periph_clock_enable>:
 8013898:	2201      	movs	r2, #1
 801389a:	0983      	lsrs	r3, r0, #6
 801389c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80138a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80138a4:	6819      	ldr	r1, [r3, #0]
 80138a6:	f000 001f 	and.w	r0, r0, #31
 80138aa:	4082      	lsls	r2, r0
 80138ac:	430a      	orrs	r2, r1
 80138ae:	601a      	str	r2, [r3, #0]
 80138b0:	4770      	bx	lr

080138b2 <rcu_periph_clock_disable>:
 80138b2:	2101      	movs	r1, #1
 80138b4:	0983      	lsrs	r3, r0, #6
 80138b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80138ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80138be:	681a      	ldr	r2, [r3, #0]
 80138c0:	f000 001f 	and.w	r0, r0, #31
 80138c4:	4081      	lsls	r1, r0
 80138c6:	ea22 0201 	bic.w	r2, r2, r1
 80138ca:	601a      	str	r2, [r3, #0]
 80138cc:	4770      	bx	lr

080138ce <rcu_periph_reset_enable>:
 80138ce:	f7ff bfe3 	b.w	8013898 <rcu_periph_clock_enable>

080138d2 <rcu_periph_reset_disable>:
 80138d2:	f7ff bfee 	b.w	80138b2 <rcu_periph_clock_disable>
	...

080138d8 <rcu_ckout0_config>:
 80138d8:	4a03      	ldr	r2, [pc, #12]	; (80138e8 <rcu_ckout0_config+0x10>)
 80138da:	6853      	ldr	r3, [r2, #4]
 80138dc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80138e0:	4303      	orrs	r3, r0
 80138e2:	6053      	str	r3, [r2, #4]
 80138e4:	4770      	bx	lr
 80138e6:	bf00      	nop
 80138e8:	40021000 	andmi	r1, r2, r0

080138ec <rcu_pll2_config>:
 80138ec:	4b04      	ldr	r3, [pc, #16]	; (8013900 <rcu_pll2_config+0x14>)
 80138ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138f0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80138f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80138f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138f8:	4302      	orrs	r2, r0
 80138fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80138fc:	4770      	bx	lr
 80138fe:	bf00      	nop
 8013900:	40021000 	andmi	r1, r2, r0

08013904 <rcu_adc_clock_config>:
 8013904:	490c      	ldr	r1, [pc, #48]	; (8013938 <rcu_adc_clock_config+0x34>)
 8013906:	2805      	cmp	r0, #5
 8013908:	684b      	ldr	r3, [r1, #4]
 801390a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801390e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8013912:	d006      	beq.n	8013922 <rcu_adc_clock_config+0x1e>
 8013914:	d803      	bhi.n	801391e <rcu_adc_clock_config+0x1a>
 8013916:	2804      	cmp	r0, #4
 8013918:	d10a      	bne.n	8013930 <rcu_adc_clock_config+0x2c>
 801391a:	604b      	str	r3, [r1, #4]
 801391c:	4770      	bx	lr
 801391e:	2807      	cmp	r0, #7
 8013920:	d1fb      	bne.n	801391a <rcu_adc_clock_config+0x16>
 8013922:	4a06      	ldr	r2, [pc, #24]	; (801393c <rcu_adc_clock_config+0x38>)
 8013924:	ea02 3280 	and.w	r2, r2, r0, lsl #14
 8013928:	4313      	orrs	r3, r2
 801392a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801392e:	e7f4      	b.n	801391a <rcu_adc_clock_config+0x16>
 8013930:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 8013934:	e7f1      	b.n	801391a <rcu_adc_clock_config+0x16>
 8013936:	bf00      	nop
 8013938:	40021000 	andmi	r1, r2, r0
 801393c:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

08013940 <rcu_flag_get>:
 8013940:	0983      	lsrs	r3, r0, #6
 8013942:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013946:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	2301      	movs	r3, #1
 801394e:	f000 001f 	and.w	r0, r0, #31
 8013952:	4083      	lsls	r3, r0
 8013954:	4213      	tst	r3, r2
 8013956:	bf14      	ite	ne
 8013958:	2001      	movne	r0, #1
 801395a:	2000      	moveq	r0, #0
 801395c:	4770      	bx	lr
	...

08013960 <rcu_osci_stab_wait>:
 8013960:	281a      	cmp	r0, #26
 8013962:	b508      	push	{r3, lr}
 8013964:	d051      	beq.n	8013a0a <rcu_osci_stab_wait+0xaa>
 8013966:	d806      	bhi.n	8013976 <rcu_osci_stab_wait+0x16>
 8013968:	2810      	cmp	r0, #16
 801396a:	d015      	beq.n	8013998 <rcu_osci_stab_wait+0x38>
 801396c:	2818      	cmp	r0, #24
 801396e:	d043      	beq.n	80139f8 <rcu_osci_stab_wait+0x98>
 8013970:	b368      	cbz	r0, 80139ce <rcu_osci_stab_wait+0x6e>
 8013972:	2000      	movs	r0, #0
 8013974:	bd08      	pop	{r3, pc}
 8013976:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 801397a:	d01c      	beq.n	80139b6 <rcu_osci_stab_wait+0x56>
 801397c:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8013980:	d02f      	beq.n	80139e2 <rcu_osci_stab_wait+0x82>
 8013982:	281c      	cmp	r0, #28
 8013984:	d1f5      	bne.n	8013972 <rcu_osci_stab_wait+0x12>
 8013986:	4925      	ldr	r1, [pc, #148]	; (8013a1c <rcu_osci_stab_wait+0xbc>)
 8013988:	201d      	movs	r0, #29
 801398a:	f7ff ffd9 	bl	8013940 <rcu_flag_get>
 801398e:	b908      	cbnz	r0, 8013994 <rcu_osci_stab_wait+0x34>
 8013990:	3901      	subs	r1, #1
 8013992:	d1f9      	bne.n	8013988 <rcu_osci_stab_wait+0x28>
 8013994:	201d      	movs	r0, #29
 8013996:	e008      	b.n	80139aa <rcu_osci_stab_wait+0x4a>
 8013998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801399c:	2011      	movs	r0, #17
 801399e:	f7ff ffcf 	bl	8013940 <rcu_flag_get>
 80139a2:	b908      	cbnz	r0, 80139a8 <rcu_osci_stab_wait+0x48>
 80139a4:	3901      	subs	r1, #1
 80139a6:	d1f9      	bne.n	801399c <rcu_osci_stab_wait+0x3c>
 80139a8:	2011      	movs	r0, #17
 80139aa:	f7ff ffc9 	bl	8013940 <rcu_flag_get>
 80139ae:	3800      	subs	r0, #0
 80139b0:	bf18      	it	ne
 80139b2:	2001      	movne	r0, #1
 80139b4:	e7de      	b.n	8013974 <rcu_osci_stab_wait+0x14>
 80139b6:	f06f 417c 	mvn.w	r1, #4227858432	; 0xfc000000
 80139ba:	f640 0001 	movw	r0, #2049	; 0x801
 80139be:	f7ff ffbf 	bl	8013940 <rcu_flag_get>
 80139c2:	b908      	cbnz	r0, 80139c8 <rcu_osci_stab_wait+0x68>
 80139c4:	3901      	subs	r1, #1
 80139c6:	d1f8      	bne.n	80139ba <rcu_osci_stab_wait+0x5a>
 80139c8:	f640 0001 	movw	r0, #2049	; 0x801
 80139cc:	e7ed      	b.n	80139aa <rcu_osci_stab_wait+0x4a>
 80139ce:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80139d2:	2001      	movs	r0, #1
 80139d4:	f7ff ffb4 	bl	8013940 <rcu_flag_get>
 80139d8:	b908      	cbnz	r0, 80139de <rcu_osci_stab_wait+0x7e>
 80139da:	3901      	subs	r1, #1
 80139dc:	d1f9      	bne.n	80139d2 <rcu_osci_stab_wait+0x72>
 80139de:	2001      	movs	r0, #1
 80139e0:	e7e3      	b.n	80139aa <rcu_osci_stab_wait+0x4a>
 80139e2:	490e      	ldr	r1, [pc, #56]	; (8013a1c <rcu_osci_stab_wait+0xbc>)
 80139e4:	f640 1001 	movw	r0, #2305	; 0x901
 80139e8:	f7ff ffaa 	bl	8013940 <rcu_flag_get>
 80139ec:	b908      	cbnz	r0, 80139f2 <rcu_osci_stab_wait+0x92>
 80139ee:	3901      	subs	r1, #1
 80139f0:	d1f8      	bne.n	80139e4 <rcu_osci_stab_wait+0x84>
 80139f2:	f640 1001 	movw	r0, #2305	; 0x901
 80139f6:	e7d8      	b.n	80139aa <rcu_osci_stab_wait+0x4a>
 80139f8:	4908      	ldr	r1, [pc, #32]	; (8013a1c <rcu_osci_stab_wait+0xbc>)
 80139fa:	2019      	movs	r0, #25
 80139fc:	f7ff ffa0 	bl	8013940 <rcu_flag_get>
 8013a00:	b908      	cbnz	r0, 8013a06 <rcu_osci_stab_wait+0xa6>
 8013a02:	3901      	subs	r1, #1
 8013a04:	d1f9      	bne.n	80139fa <rcu_osci_stab_wait+0x9a>
 8013a06:	2019      	movs	r0, #25
 8013a08:	e7cf      	b.n	80139aa <rcu_osci_stab_wait+0x4a>
 8013a0a:	4904      	ldr	r1, [pc, #16]	; (8013a1c <rcu_osci_stab_wait+0xbc>)
 8013a0c:	201b      	movs	r0, #27
 8013a0e:	f7ff ff97 	bl	8013940 <rcu_flag_get>
 8013a12:	b908      	cbnz	r0, 8013a18 <rcu_osci_stab_wait+0xb8>
 8013a14:	3901      	subs	r1, #1
 8013a16:	d1f9      	bne.n	8013a0c <rcu_osci_stab_wait+0xac>
 8013a18:	201b      	movs	r0, #27
 8013a1a:	e7c6      	b.n	80139aa <rcu_osci_stab_wait+0x4a>
 8013a1c:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08013a20 <rcu_osci_on>:
 8013a20:	f7ff bf3a 	b.w	8013898 <rcu_periph_clock_enable>

08013a24 <rcu_clock_freq_get>:
 8013a24:	4b3e      	ldr	r3, [pc, #248]	; (8013b20 <rcu_clock_freq_get+0xfc>)
 8013a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a28:	4604      	mov	r4, r0
 8013a2a:	461f      	mov	r7, r3
 8013a2c:	b089      	sub	sp, #36	; 0x24
 8013a2e:	ad04      	add	r5, sp, #16
 8013a30:	f103 0610 	add.w	r6, r3, #16
 8013a34:	462a      	mov	r2, r5
 8013a36:	6818      	ldr	r0, [r3, #0]
 8013a38:	6859      	ldr	r1, [r3, #4]
 8013a3a:	3308      	adds	r3, #8
 8013a3c:	c203      	stmia	r2!, {r0, r1}
 8013a3e:	42b3      	cmp	r3, r6
 8013a40:	4615      	mov	r5, r2
 8013a42:	d1f7      	bne.n	8013a34 <rcu_clock_freq_get+0x10>
 8013a44:	466b      	mov	r3, sp
 8013a46:	6938      	ldr	r0, [r7, #16]
 8013a48:	6871      	ldr	r1, [r6, #4]
 8013a4a:	4a36      	ldr	r2, [pc, #216]	; (8013b24 <rcu_clock_freq_get+0x100>)
 8013a4c:	c303      	stmia	r3!, {r0, r1}
 8013a4e:	c303      	stmia	r3!, {r0, r1}
 8013a50:	6853      	ldr	r3, [r2, #4]
 8013a52:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013a56:	2b01      	cmp	r3, #1
 8013a58:	d053      	beq.n	8013b02 <rcu_clock_freq_get+0xde>
 8013a5a:	2b02      	cmp	r3, #2
 8013a5c:	d153      	bne.n	8013b06 <rcu_clock_freq_get+0xe2>
 8013a5e:	6853      	ldr	r3, [r2, #4]
 8013a60:	03dd      	lsls	r5, r3, #15
 8013a62:	d523      	bpl.n	8013aac <rcu_clock_freq_get+0x88>
 8013a64:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8013a66:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8013a6a:	4b2f      	ldr	r3, [pc, #188]	; (8013b28 <rcu_clock_freq_get+0x104>)
 8013a6c:	d00e      	beq.n	8013a8c <rcu_clock_freq_get+0x68>
 8013a6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8013a70:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8013a72:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8013a76:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8013a7a:	3101      	adds	r1, #1
 8013a7c:	280f      	cmp	r0, #15
 8013a7e:	f100 0502 	add.w	r5, r0, #2
 8013a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8013a86:	bf08      	it	eq
 8013a88:	2514      	moveq	r5, #20
 8013a8a:	436b      	muls	r3, r5
 8013a8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8013a8e:	f001 010f 	and.w	r1, r1, #15
 8013a92:	3101      	adds	r1, #1
 8013a94:	fbb3 f3f1 	udiv	r3, r3, r1
 8013a98:	6851      	ldr	r1, [r2, #4]
 8013a9a:	6850      	ldr	r0, [r2, #4]
 8013a9c:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8013aa0:	0080      	lsls	r0, r0, #2
 8013aa2:	d505      	bpl.n	8013ab0 <rcu_clock_freq_get+0x8c>
 8013aa4:	f041 0110 	orr.w	r1, r1, #16
 8013aa8:	1c48      	adds	r0, r1, #1
 8013aaa:	e007      	b.n	8013abc <rcu_clock_freq_get+0x98>
 8013aac:	4b1f      	ldr	r3, [pc, #124]	; (8013b2c <rcu_clock_freq_get+0x108>)
 8013aae:	e7f3      	b.n	8013a98 <rcu_clock_freq_get+0x74>
 8013ab0:	290f      	cmp	r1, #15
 8013ab2:	d0f9      	beq.n	8013aa8 <rcu_clock_freq_get+0x84>
 8013ab4:	290d      	cmp	r1, #13
 8013ab6:	f101 0002 	add.w	r0, r1, #2
 8013aba:	d01d      	beq.n	8013af8 <rcu_clock_freq_get+0xd4>
 8013abc:	4358      	muls	r0, r3
 8013abe:	6853      	ldr	r3, [r2, #4]
 8013ac0:	6851      	ldr	r1, [r2, #4]
 8013ac2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8013ac6:	6852      	ldr	r2, [r2, #4]
 8013ac8:	3320      	adds	r3, #32
 8013aca:	446b      	add	r3, sp
 8013acc:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8013ad0:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8013ad4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8013ad8:	3120      	adds	r1, #32
 8013ada:	3220      	adds	r2, #32
 8013adc:	4469      	add	r1, sp
 8013ade:	446a      	add	r2, sp
 8013ae0:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8013ae4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8013ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8013aec:	2c03      	cmp	r4, #3
 8013aee:	d815      	bhi.n	8013b1c <rcu_clock_freq_get+0xf8>
 8013af0:	e8df f004 	tbb	[pc, r4]
 8013af4:	110e0b0c 	tstne	lr, ip, lsl #22
 8013af8:	2006      	movs	r0, #6
 8013afa:	0859      	lsrs	r1, r3, #1
 8013afc:	fb00 1003 	mla	r0, r0, r3, r1
 8013b00:	e7dd      	b.n	8013abe <rcu_clock_freq_get+0x9a>
 8013b02:	4809      	ldr	r0, [pc, #36]	; (8013b28 <rcu_clock_freq_get+0x104>)
 8013b04:	e7db      	b.n	8013abe <rcu_clock_freq_get+0x9a>
 8013b06:	480a      	ldr	r0, [pc, #40]	; (8013b30 <rcu_clock_freq_get+0x10c>)
 8013b08:	e7d9      	b.n	8013abe <rcu_clock_freq_get+0x9a>
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	b009      	add	sp, #36	; 0x24
 8013b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b10:	fa23 f001 	lsr.w	r0, r3, r1
 8013b14:	e7fa      	b.n	8013b0c <rcu_clock_freq_get+0xe8>
 8013b16:	fa23 f002 	lsr.w	r0, r3, r2
 8013b1a:	e7f7      	b.n	8013b0c <rcu_clock_freq_get+0xe8>
 8013b1c:	2000      	movs	r0, #0
 8013b1e:	e7f5      	b.n	8013b0c <rcu_clock_freq_get+0xe8>
 8013b20:	08015389 	stmdaeq	r1, {r0, r3, r7, r8, r9, ip, lr}
 8013b24:	40021000 	andmi	r1, r2, r0
 8013b28:	017d7840 	cmneq	sp, r0, asr #16
 8013b2c:	003d0900 	eorseq	r0, sp, r0, lsl #18
 8013b30:	007a1200 	rsbseq	r1, sl, r0, lsl #4

08013b34 <timer_deinit>:
 8013b34:	b508      	push	{r3, lr}
 8013b36:	4b2d      	ldr	r3, [pc, #180]	; (8013bec <timer_deinit+0xb8>)
 8013b38:	4298      	cmp	r0, r3
 8013b3a:	d048      	beq.n	8013bce <timer_deinit+0x9a>
 8013b3c:	d816      	bhi.n	8013b6c <timer_deinit+0x38>
 8013b3e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013b42:	4298      	cmp	r0, r3
 8013b44:	d03c      	beq.n	8013bc0 <timer_deinit+0x8c>
 8013b46:	d807      	bhi.n	8013b58 <timer_deinit+0x24>
 8013b48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8013b4c:	d02a      	beq.n	8013ba4 <timer_deinit+0x70>
 8013b4e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013b52:	4298      	cmp	r0, r3
 8013b54:	d02d      	beq.n	8013bb2 <timer_deinit+0x7e>
 8013b56:	bd08      	pop	{r3, pc}
 8013b58:	4b25      	ldr	r3, [pc, #148]	; (8013bf0 <timer_deinit+0xbc>)
 8013b5a:	4298      	cmp	r0, r3
 8013b5c:	d1fb      	bne.n	8013b56 <timer_deinit+0x22>
 8013b5e:	f240 4003 	movw	r0, #1027	; 0x403
 8013b62:	f7ff feb4 	bl	80138ce <rcu_periph_reset_enable>
 8013b66:	f240 4003 	movw	r0, #1027	; 0x403
 8013b6a:	e017      	b.n	8013b9c <timer_deinit+0x68>
 8013b6c:	4b21      	ldr	r3, [pc, #132]	; (8013bf4 <timer_deinit+0xc0>)
 8013b6e:	4298      	cmp	r0, r3
 8013b70:	d00e      	beq.n	8013b90 <timer_deinit+0x5c>
 8013b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b76:	4298      	cmp	r0, r3
 8013b78:	d030      	beq.n	8013bdc <timer_deinit+0xa8>
 8013b7a:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8013b7e:	4298      	cmp	r0, r3
 8013b80:	d1e9      	bne.n	8013b56 <timer_deinit+0x22>
 8013b82:	f240 4005 	movw	r0, #1029	; 0x405
 8013b86:	f7ff fea2 	bl	80138ce <rcu_periph_reset_enable>
 8013b8a:	f240 4005 	movw	r0, #1029	; 0x405
 8013b8e:	e005      	b.n	8013b9c <timer_deinit+0x68>
 8013b90:	f240 300b 	movw	r0, #779	; 0x30b
 8013b94:	f7ff fe9b 	bl	80138ce <rcu_periph_reset_enable>
 8013b98:	f240 300b 	movw	r0, #779	; 0x30b
 8013b9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013ba0:	f7ff be97 	b.w	80138d2 <rcu_periph_reset_disable>
 8013ba4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013ba8:	f7ff fe91 	bl	80138ce <rcu_periph_reset_enable>
 8013bac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013bb0:	e7f4      	b.n	8013b9c <timer_deinit+0x68>
 8013bb2:	f240 4001 	movw	r0, #1025	; 0x401
 8013bb6:	f7ff fe8a 	bl	80138ce <rcu_periph_reset_enable>
 8013bba:	f240 4001 	movw	r0, #1025	; 0x401
 8013bbe:	e7ed      	b.n	8013b9c <timer_deinit+0x68>
 8013bc0:	f240 4002 	movw	r0, #1026	; 0x402
 8013bc4:	f7ff fe83 	bl	80138ce <rcu_periph_reset_enable>
 8013bc8:	f240 4002 	movw	r0, #1026	; 0x402
 8013bcc:	e7e6      	b.n	8013b9c <timer_deinit+0x68>
 8013bce:	f240 4004 	movw	r0, #1028	; 0x404
 8013bd2:	f7ff fe7c 	bl	80138ce <rcu_periph_reset_enable>
 8013bd6:	f240 4004 	movw	r0, #1028	; 0x404
 8013bda:	e7df      	b.n	8013b9c <timer_deinit+0x68>
 8013bdc:	f240 300d 	movw	r0, #781	; 0x30d
 8013be0:	f7ff fe75 	bl	80138ce <rcu_periph_reset_enable>
 8013be4:	f240 300d 	movw	r0, #781	; 0x30d
 8013be8:	e7d8      	b.n	8013b9c <timer_deinit+0x68>
 8013bea:	bf00      	nop
 8013bec:	40001000 	andmi	r1, r0, r0
 8013bf0:	40000c00 	andmi	r0, r0, r0, lsl #24
 8013bf4:	40012c00 	andmi	r2, r1, r0, lsl #24

08013bf8 <timer_init>:
 8013bf8:	880b      	ldrh	r3, [r1, #0]
 8013bfa:	6283      	str	r3, [r0, #40]	; 0x28
 8013bfc:	4b26      	ldr	r3, [pc, #152]	; (8013c98 <timer_init+0xa0>)
 8013bfe:	4298      	cmp	r0, r3
 8013c00:	d018      	beq.n	8013c34 <timer_init+0x3c>
 8013c02:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 8013c06:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8013c0a:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8013c0e:	d011      	beq.n	8013c34 <timer_init+0x3c>
 8013c10:	4a22      	ldr	r2, [pc, #136]	; (8013c9c <timer_init+0xa4>)
 8013c12:	4290      	cmp	r0, r2
 8013c14:	d00e      	beq.n	8013c34 <timer_init+0x3c>
 8013c16:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8013c1a:	4290      	cmp	r0, r2
 8013c1c:	d00a      	beq.n	8013c34 <timer_init+0x3c>
 8013c1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013c22:	4293      	cmp	r3, r2
 8013c24:	d006      	beq.n	8013c34 <timer_init+0x3c>
 8013c26:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 8013c2a:	4293      	cmp	r3, r2
 8013c2c:	d002      	beq.n	8013c34 <timer_init+0x3c>
 8013c2e:	4b1c      	ldr	r3, [pc, #112]	; (8013ca0 <timer_init+0xa8>)
 8013c30:	4298      	cmp	r0, r3
 8013c32:	d10f      	bne.n	8013c54 <timer_init+0x5c>
 8013c34:	6803      	ldr	r3, [r0, #0]
 8013c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c3a:	6003      	str	r3, [r0, #0]
 8013c3c:	884b      	ldrh	r3, [r1, #2]
 8013c3e:	6802      	ldr	r2, [r0, #0]
 8013c40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013c44:	4313      	orrs	r3, r2
 8013c46:	6003      	str	r3, [r0, #0]
 8013c48:	888b      	ldrh	r3, [r1, #4]
 8013c4a:	6802      	ldr	r2, [r0, #0]
 8013c4c:	f003 0310 	and.w	r3, r3, #16
 8013c50:	4313      	orrs	r3, r2
 8013c52:	6003      	str	r3, [r0, #0]
 8013c54:	688b      	ldr	r3, [r1, #8]
 8013c56:	62c3      	str	r3, [r0, #44]	; 0x2c
 8013c58:	4b12      	ldr	r3, [pc, #72]	; (8013ca4 <timer_init+0xac>)
 8013c5a:	4298      	cmp	r0, r3
 8013c5c:	d003      	beq.n	8013c66 <timer_init+0x6e>
 8013c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013c62:	4298      	cmp	r0, r3
 8013c64:	d104      	bne.n	8013c70 <timer_init+0x78>
 8013c66:	6943      	ldr	r3, [r0, #20]
 8013c68:	f043 0301 	orr.w	r3, r3, #1
 8013c6c:	6143      	str	r3, [r0, #20]
 8013c6e:	4770      	bx	lr
 8013c70:	6803      	ldr	r3, [r0, #0]
 8013c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013c76:	6003      	str	r3, [r0, #0]
 8013c78:	898b      	ldrh	r3, [r1, #12]
 8013c7a:	6802      	ldr	r2, [r0, #0]
 8013c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013c80:	4313      	orrs	r3, r2
 8013c82:	6003      	str	r3, [r0, #0]
 8013c84:	4b04      	ldr	r3, [pc, #16]	; (8013c98 <timer_init+0xa0>)
 8013c86:	4298      	cmp	r0, r3
 8013c88:	d002      	beq.n	8013c90 <timer_init+0x98>
 8013c8a:	4b04      	ldr	r3, [pc, #16]	; (8013c9c <timer_init+0xa4>)
 8013c8c:	4298      	cmp	r0, r3
 8013c8e:	d1ea      	bne.n	8013c66 <timer_init+0x6e>
 8013c90:	7b8b      	ldrb	r3, [r1, #14]
 8013c92:	6303      	str	r3, [r0, #48]	; 0x30
 8013c94:	e7e7      	b.n	8013c66 <timer_init+0x6e>
 8013c96:	bf00      	nop
 8013c98:	40012c00 	andmi	r2, r1, r0, lsl #24
 8013c9c:	40013400 	andmi	r3, r1, r0, lsl #8
 8013ca0:	40002000 	andmi	r2, r0, r0
 8013ca4:	40001000 	andmi	r1, r0, r0

08013ca8 <timer_enable>:
 8013ca8:	6803      	ldr	r3, [r0, #0]
 8013caa:	f043 0301 	orr.w	r3, r3, #1
 8013cae:	6003      	str	r3, [r0, #0]
 8013cb0:	4770      	bx	lr

08013cb2 <timer_channel_output_mode_config>:
 8013cb2:	2903      	cmp	r1, #3
 8013cb4:	d81a      	bhi.n	8013cec <timer_channel_output_mode_config+0x3a>
 8013cb6:	e8df f001 	tbb	[pc, r1]
 8013cba:	1a120a02 	bne	84964ca <__exidx_end+0x47ede6>
 8013cbe:	6983      	ldr	r3, [r0, #24]
 8013cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013cc4:	6183      	str	r3, [r0, #24]
 8013cc6:	6983      	ldr	r3, [r0, #24]
 8013cc8:	4313      	orrs	r3, r2
 8013cca:	6183      	str	r3, [r0, #24]
 8013ccc:	4770      	bx	lr
 8013cce:	6983      	ldr	r3, [r0, #24]
 8013cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013cd4:	6183      	str	r3, [r0, #24]
 8013cd6:	6983      	ldr	r3, [r0, #24]
 8013cd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013cdc:	e7f5      	b.n	8013cca <timer_channel_output_mode_config+0x18>
 8013cde:	69c3      	ldr	r3, [r0, #28]
 8013ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013ce4:	61c3      	str	r3, [r0, #28]
 8013ce6:	69c3      	ldr	r3, [r0, #28]
 8013ce8:	4313      	orrs	r3, r2
 8013cea:	61c3      	str	r3, [r0, #28]
 8013cec:	4770      	bx	lr
 8013cee:	69c3      	ldr	r3, [r0, #28]
 8013cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013cf4:	61c3      	str	r3, [r0, #28]
 8013cf6:	69c3      	ldr	r3, [r0, #28]
 8013cf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8013cfc:	e7f5      	b.n	8013cea <timer_channel_output_mode_config+0x38>

08013cfe <timer_channel_output_pulse_value_config>:
 8013cfe:	2903      	cmp	r1, #3
 8013d00:	d80a      	bhi.n	8013d18 <timer_channel_output_pulse_value_config+0x1a>
 8013d02:	e8df f001 	tbb	[pc, r1]
 8013d06:	08060402 	stmdaeq	r6, {r1, sl}
 8013d0a:	6342      	str	r2, [r0, #52]	; 0x34
 8013d0c:	4770      	bx	lr
 8013d0e:	6382      	str	r2, [r0, #56]	; 0x38
 8013d10:	4770      	bx	lr
 8013d12:	63c2      	str	r2, [r0, #60]	; 0x3c
 8013d14:	4770      	bx	lr
 8013d16:	6402      	str	r2, [r0, #64]	; 0x40
 8013d18:	4770      	bx	lr

08013d1a <timer_interrupt_enable>:
 8013d1a:	68c3      	ldr	r3, [r0, #12]
 8013d1c:	430b      	orrs	r3, r1
 8013d1e:	60c3      	str	r3, [r0, #12]
 8013d20:	4770      	bx	lr

08013d22 <timer_interrupt_flag_clear>:
 8013d22:	43c9      	mvns	r1, r1
 8013d24:	6101      	str	r1, [r0, #16]
 8013d26:	4770      	bx	lr

08013d28 <timer_flag_clear>:
 8013d28:	43c9      	mvns	r1, r1
 8013d2a:	6101      	str	r1, [r0, #16]
 8013d2c:	4770      	bx	lr
	...

08013d30 <usart_deinit>:
 8013d30:	b508      	push	{r3, lr}
 8013d32:	4b1d      	ldr	r3, [pc, #116]	; (8013da8 <usart_deinit+0x78>)
 8013d34:	4298      	cmp	r0, r3
 8013d36:	d028      	beq.n	8013d8a <usart_deinit+0x5a>
 8013d38:	d808      	bhi.n	8013d4c <usart_deinit+0x1c>
 8013d3a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013d3e:	4298      	cmp	r0, r3
 8013d40:	d015      	beq.n	8013d6e <usart_deinit+0x3e>
 8013d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013d46:	4298      	cmp	r0, r3
 8013d48:	d018      	beq.n	8013d7c <usart_deinit+0x4c>
 8013d4a:	bd08      	pop	{r3, pc}
 8013d4c:	4b17      	ldr	r3, [pc, #92]	; (8013dac <usart_deinit+0x7c>)
 8013d4e:	4298      	cmp	r0, r3
 8013d50:	d022      	beq.n	8013d98 <usart_deinit+0x68>
 8013d52:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8013d56:	4298      	cmp	r0, r3
 8013d58:	d1f7      	bne.n	8013d4a <usart_deinit+0x1a>
 8013d5a:	f240 300e 	movw	r0, #782	; 0x30e
 8013d5e:	f7ff fdb6 	bl	80138ce <rcu_periph_reset_enable>
 8013d62:	f240 300e 	movw	r0, #782	; 0x30e
 8013d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013d6a:	f7ff bdb2 	b.w	80138d2 <rcu_periph_reset_disable>
 8013d6e:	f240 4011 	movw	r0, #1041	; 0x411
 8013d72:	f7ff fdac 	bl	80138ce <rcu_periph_reset_enable>
 8013d76:	f240 4011 	movw	r0, #1041	; 0x411
 8013d7a:	e7f4      	b.n	8013d66 <usart_deinit+0x36>
 8013d7c:	f240 4012 	movw	r0, #1042	; 0x412
 8013d80:	f7ff fda5 	bl	80138ce <rcu_periph_reset_enable>
 8013d84:	f240 4012 	movw	r0, #1042	; 0x412
 8013d88:	e7ed      	b.n	8013d66 <usart_deinit+0x36>
 8013d8a:	f240 4013 	movw	r0, #1043	; 0x413
 8013d8e:	f7ff fd9e 	bl	80138ce <rcu_periph_reset_enable>
 8013d92:	f240 4013 	movw	r0, #1043	; 0x413
 8013d96:	e7e6      	b.n	8013d66 <usart_deinit+0x36>
 8013d98:	f240 4014 	movw	r0, #1044	; 0x414
 8013d9c:	f7ff fd97 	bl	80138ce <rcu_periph_reset_enable>
 8013da0:	f240 4014 	movw	r0, #1044	; 0x414
 8013da4:	e7df      	b.n	8013d66 <usart_deinit+0x36>
 8013da6:	bf00      	nop
 8013da8:	40004c00 	andmi	r4, r0, r0, lsl #24
 8013dac:	40005000 	andmi	r5, r0, r0

08013db0 <usart_baudrate_set>:
 8013db0:	b538      	push	{r3, r4, r5, lr}
 8013db2:	4b11      	ldr	r3, [pc, #68]	; (8013df8 <usart_baudrate_set+0x48>)
 8013db4:	4604      	mov	r4, r0
 8013db6:	4298      	cmp	r0, r3
 8013db8:	460d      	mov	r5, r1
 8013dba:	d01b      	beq.n	8013df4 <usart_baudrate_set+0x44>
 8013dbc:	d809      	bhi.n	8013dd2 <usart_baudrate_set+0x22>
 8013dbe:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8013dc2:	4298      	cmp	r0, r3
 8013dc4:	d016      	beq.n	8013df4 <usart_baudrate_set+0x44>
 8013dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013dca:	4298      	cmp	r0, r3
 8013dcc:	d012      	beq.n	8013df4 <usart_baudrate_set+0x44>
 8013dce:	2000      	movs	r0, #0
 8013dd0:	e009      	b.n	8013de6 <usart_baudrate_set+0x36>
 8013dd2:	4b0a      	ldr	r3, [pc, #40]	; (8013dfc <usart_baudrate_set+0x4c>)
 8013dd4:	4298      	cmp	r0, r3
 8013dd6:	d00d      	beq.n	8013df4 <usart_baudrate_set+0x44>
 8013dd8:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8013ddc:	4298      	cmp	r0, r3
 8013dde:	d1f6      	bne.n	8013dce <usart_baudrate_set+0x1e>
 8013de0:	2003      	movs	r0, #3
 8013de2:	f7ff fe1f 	bl	8013a24 <rcu_clock_freq_get>
 8013de6:	eb00 0155 	add.w	r1, r0, r5, lsr #1
 8013dea:	fbb1 f1f5 	udiv	r1, r1, r5
 8013dee:	b289      	uxth	r1, r1
 8013df0:	60a1      	str	r1, [r4, #8]
 8013df2:	bd38      	pop	{r3, r4, r5, pc}
 8013df4:	2002      	movs	r0, #2
 8013df6:	e7f4      	b.n	8013de2 <usart_baudrate_set+0x32>
 8013df8:	40004c00 	andmi	r4, r0, r0, lsl #24
 8013dfc:	40005000 	andmi	r5, r0, r0

08013e00 <usart_parity_config>:
 8013e00:	68c3      	ldr	r3, [r0, #12]
 8013e02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8013e06:	60c3      	str	r3, [r0, #12]
 8013e08:	68c3      	ldr	r3, [r0, #12]
 8013e0a:	430b      	orrs	r3, r1
 8013e0c:	60c3      	str	r3, [r0, #12]
 8013e0e:	4770      	bx	lr

08013e10 <usart_word_length_set>:
 8013e10:	68c3      	ldr	r3, [r0, #12]
 8013e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e16:	60c3      	str	r3, [r0, #12]
 8013e18:	68c3      	ldr	r3, [r0, #12]
 8013e1a:	430b      	orrs	r3, r1
 8013e1c:	60c3      	str	r3, [r0, #12]
 8013e1e:	4770      	bx	lr

08013e20 <usart_stop_bit_set>:
 8013e20:	6903      	ldr	r3, [r0, #16]
 8013e22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8013e26:	6103      	str	r3, [r0, #16]
 8013e28:	6903      	ldr	r3, [r0, #16]
 8013e2a:	430b      	orrs	r3, r1
 8013e2c:	6103      	str	r3, [r0, #16]
 8013e2e:	4770      	bx	lr

08013e30 <usart_transmit_config>:
 8013e30:	68c3      	ldr	r3, [r0, #12]
 8013e32:	f023 0308 	bic.w	r3, r3, #8
 8013e36:	430b      	orrs	r3, r1
 8013e38:	60c3      	str	r3, [r0, #12]
 8013e3a:	4770      	bx	lr

08013e3c <usart_receive_config>:
 8013e3c:	68c3      	ldr	r3, [r0, #12]
 8013e3e:	f023 0304 	bic.w	r3, r3, #4
 8013e42:	430b      	orrs	r3, r1
 8013e44:	60c3      	str	r3, [r0, #12]
 8013e46:	4770      	bx	lr

08013e48 <usart_hardware_flow_rts_config>:
 8013e48:	6943      	ldr	r3, [r0, #20]
 8013e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e4e:	430b      	orrs	r3, r1
 8013e50:	6143      	str	r3, [r0, #20]
 8013e52:	4770      	bx	lr

08013e54 <usart_hardware_flow_cts_config>:
 8013e54:	6943      	ldr	r3, [r0, #20]
 8013e56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013e5a:	430b      	orrs	r3, r1
 8013e5c:	6143      	str	r3, [r0, #20]
 8013e5e:	4770      	bx	lr

08013e60 <usart_dma_transmit_config>:
 8013e60:	6943      	ldr	r3, [r0, #20]
 8013e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013e66:	430b      	orrs	r3, r1
 8013e68:	6143      	str	r3, [r0, #20]
 8013e6a:	4770      	bx	lr

08013e6c <usart_flag_get>:
 8013e6c:	098b      	lsrs	r3, r1, #6
 8013e6e:	581a      	ldr	r2, [r3, r0]
 8013e70:	2301      	movs	r3, #1
 8013e72:	f001 011f 	and.w	r1, r1, #31
 8013e76:	408b      	lsls	r3, r1
 8013e78:	4213      	tst	r3, r2
 8013e7a:	bf14      	ite	ne
 8013e7c:	2001      	movne	r0, #1
 8013e7e:	2000      	moveq	r0, #0
 8013e80:	4770      	bx	lr

08013e82 <usart_interrupt_enable>:
 8013e82:	2301      	movs	r3, #1
 8013e84:	b510      	push	{r4, lr}
 8013e86:	f3c1 1289 	ubfx	r2, r1, #6, #10
 8013e8a:	5814      	ldr	r4, [r2, r0]
 8013e8c:	f001 011f 	and.w	r1, r1, #31
 8013e90:	408b      	lsls	r3, r1
 8013e92:	4323      	orrs	r3, r4
 8013e94:	5013      	str	r3, [r2, r0]
 8013e96:	bd10      	pop	{r4, pc}

08013e98 <usart_interrupt_disable>:
 8013e98:	2201      	movs	r2, #1
 8013e9a:	b510      	push	{r4, lr}
 8013e9c:	f3c1 1489 	ubfx	r4, r1, #6, #10
 8013ea0:	5823      	ldr	r3, [r4, r0]
 8013ea2:	f001 011f 	and.w	r1, r1, #31
 8013ea6:	408a      	lsls	r2, r1
 8013ea8:	ea23 0302 	bic.w	r3, r3, r2
 8013eac:	5023      	str	r3, [r4, r0]
 8013eae:	bd10      	pop	{r4, pc}

08013eb0 <usart_interrupt_flag_clear>:
 8013eb0:	2201      	movs	r2, #1
 8013eb2:	b510      	push	{r4, lr}
 8013eb4:	0d8c      	lsrs	r4, r1, #22
 8013eb6:	5823      	ldr	r3, [r4, r0]
 8013eb8:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8013ebc:	408a      	lsls	r2, r1
 8013ebe:	ea23 0302 	bic.w	r3, r3, r2
 8013ec2:	5023      	str	r3, [r4, r0]
 8013ec4:	bd10      	pop	{r4, pc}
	...

08013ec8 <emac_eth_recv>:
 8013ec8:	b538      	push	{r3, r4, r5, lr}
 8013eca:	4605      	mov	r5, r0
 8013ecc:	f000 ffe0 	bl	8014e90 <enet_rxframe_size_get>
 8013ed0:	4604      	mov	r4, r0
 8013ed2:	b138      	cbz	r0, 8013ee4 <emac_eth_recv+0x1c>
 8013ed4:	4b05      	ldr	r3, [pc, #20]	; (8013eec <emac_eth_recv+0x24>)
 8013ed6:	2105      	movs	r1, #5
 8013ed8:	6818      	ldr	r0, [r3, #0]
 8013eda:	f000 ff88 	bl	8014dee <enet_desc_information_get>
 8013ede:	6028      	str	r0, [r5, #0]
 8013ee0:	4620      	mov	r0, r4
 8013ee2:	bd38      	pop	{r3, r4, r5, pc}
 8013ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ee8:	e7fb      	b.n	8013ee2 <emac_eth_recv+0x1a>
 8013eea:	bf00      	nop
 8013eec:	2000a25c 	andcs	sl, r0, ip, asr r2

08013ef0 <emac_free_pkt>:
 8013ef0:	2100      	movs	r1, #0
 8013ef2:	4608      	mov	r0, r1
 8013ef4:	f000 bcb8 	b.w	8014868 <enet_frame_receive>

08013ef8 <emac_eth_send>:
 8013ef8:	f000 bcf6 	b.w	80148e8 <enet_frame_transmit>

08013efc <gd32_adc_init()>:
 8013efc:	b510      	push	{r4, lr}
 8013efe:	f240 6009 	movw	r0, #1545	; 0x609
 8013f02:	4c21      	ldr	r4, [pc, #132]	; (8013f88 <gd32_adc_init()+0x8c>)
 8013f04:	f7ff fcc8 	bl	8013898 <rcu_periph_clock_enable>
 8013f08:	2005      	movs	r0, #5
 8013f0a:	f7ff fcfb 	bl	8013904 <rcu_adc_clock_config>
 8013f0e:	4620      	mov	r0, r4
 8013f10:	2201      	movs	r2, #1
 8013f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013f16:	f000 fb67 	bl	80145e8 <adc_special_function_config>
 8013f1a:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8013f1e:	4620      	mov	r0, r4
 8013f20:	2102      	movs	r1, #2
 8013f22:	f000 fc00 	bl	8014726 <adc_external_trigger_source_config>
 8013f26:	2100      	movs	r1, #0
 8013f28:	4620      	mov	r0, r4
 8013f2a:	f000 fb85 	bl	8014638 <adc_data_alignment_config>
 8013f2e:	2000      	movs	r0, #0
 8013f30:	f000 fb4a 	bl	80145c8 <adc_mode_config>
 8013f34:	2202      	movs	r2, #2
 8013f36:	4620      	mov	r0, r4
 8013f38:	4611      	mov	r1, r2
 8013f3a:	f000 fba9 	bl	8014690 <adc_channel_length_config>
 8013f3e:	4620      	mov	r0, r4
 8013f40:	2307      	movs	r3, #7
 8013f42:	2210      	movs	r2, #16
 8013f44:	2100      	movs	r1, #0
 8013f46:	f000 fbc0 	bl	80146ca <adc_inserted_channel_config>
 8013f4a:	2307      	movs	r3, #7
 8013f4c:	4620      	mov	r0, r4
 8013f4e:	2211      	movs	r2, #17
 8013f50:	2101      	movs	r1, #1
 8013f52:	f000 fbba 	bl	80146ca <adc_inserted_channel_config>
 8013f56:	2201      	movs	r2, #1
 8013f58:	2102      	movs	r1, #2
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	f000 fbf4 	bl	8014748 <adc_external_trigger_config>
 8013f60:	f000 fb8c 	bl	801467c <adc_tempsensor_vrefint_enable>
 8013f64:	4620      	mov	r0, r4
 8013f66:	f000 fb70 	bl	801464a <adc_enable>
 8013f6a:	2100      	movs	r1, #0
 8013f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013f70:	f000 fa58 	bl	8014424 <udelay(unsigned int, unsigned int)>
 8013f74:	4620      	mov	r0, r4
 8013f76:	f000 fb70 	bl	801465a <adc_calibration_enable>
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f80:	2102      	movs	r1, #2
 8013f82:	f000 bbfc 	b.w	801477e <adc_software_trigger_enable>
 8013f86:	bf00      	nop
 8013f88:	40012400 	andmi	r2, r1, r0, lsl #8

08013f8c <_stop() [clone .isra.0]>:
 8013f8c:	b508      	push	{r3, lr}
 8013f8e:	4806      	ldr	r0, [pc, #24]	; (8013fa8 <_stop() [clone .isra.0]+0x1c>)
 8013f90:	f001 f842 	bl	8015018 <i2c_stop_on_bus>
 8013f94:	f640 73ff 	movw	r3, #4095	; 0xfff
 8013f98:	4904      	ldr	r1, [pc, #16]	; (8013fac <_stop() [clone .isra.0]+0x20>)
 8013f9a:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 8013f9e:	0592      	lsls	r2, r2, #22
 8013fa0:	d501      	bpl.n	8013fa6 <_stop() [clone .isra.0]+0x1a>
 8013fa2:	3b01      	subs	r3, #1
 8013fa4:	d1f9      	bne.n	8013f9a <_stop() [clone .isra.0]+0xe>
 8013fa6:	bd08      	pop	{r3, pc}
 8013fa8:	40005400 	andmi	r5, r0, r0, lsl #8
 8013fac:	40005000 	andmi	r5, r0, r0

08013fb0 <gd32_i2c_begin>:
 8013fb0:	b510      	push	{r4, lr}
 8013fb2:	f240 7015 	movw	r0, #1813	; 0x715
 8013fb6:	f7ff fc6f 	bl	8013898 <rcu_periph_clock_enable>
 8013fba:	4c15      	ldr	r4, [pc, #84]	; (8014010 <gd32_i2c_begin+0x60>)
 8013fbc:	f240 6003 	movw	r0, #1539	; 0x603
 8013fc0:	f7ff fc6a 	bl	8013898 <rcu_periph_clock_enable>
 8013fc4:	f240 6003 	movw	r0, #1539	; 0x603
 8013fc8:	f7ff fc66 	bl	8013898 <rcu_periph_clock_enable>
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013fd2:	2203      	movs	r2, #3
 8013fd4:	211c      	movs	r1, #28
 8013fd6:	f7ff fbc7 	bl	8013768 <gpio_init>
 8013fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013fde:	2203      	movs	r2, #3
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	211c      	movs	r1, #28
 8013fe4:	f7ff fbc0 	bl	8013768 <gpio_init>
 8013fe8:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8013fec:	2101      	movs	r1, #1
 8013fee:	2002      	movs	r0, #2
 8013ff0:	f7ff fc0e 	bl	8013810 <gpio_pin_remap_config>
 8013ff4:	4620      	mov	r0, r4
 8013ff6:	4907      	ldr	r1, [pc, #28]	; (8014014 <gd32_i2c_begin+0x64>)
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	f000 ff87 	bl	8014f0c <i2c_clock_config>
 8013ffe:	4620      	mov	r0, r4
 8014000:	f001 f800 	bl	8015004 <i2c_enable>
 8014004:	4620      	mov	r0, r4
 8014006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801400a:	2101      	movs	r1, #1
 801400c:	f000 bfe0 	b.w	8014fd0 <i2c_ack_config>
 8014010:	40010c00 	andmi	r0, r1, r0, lsl #24
 8014014:	00061a80 	andeq	r1, r6, r0, lsl #21

08014018 <gd32_i2c_set_baudrate>:
 8014018:	4601      	mov	r1, r0
 801401a:	2200      	movs	r2, #0
 801401c:	4801      	ldr	r0, [pc, #4]	; (8014024 <gd32_i2c_set_baudrate+0xc>)
 801401e:	f000 bf75 	b.w	8014f0c <i2c_clock_config>
 8014022:	bf00      	nop
 8014024:	40005400 	andmi	r5, r0, r0, lsl #8

08014028 <gd32_i2c_set_address>:
 8014028:	4b01      	ldr	r3, [pc, #4]	; (8014030 <gd32_i2c_set_address+0x8>)
 801402a:	0040      	lsls	r0, r0, #1
 801402c:	7018      	strb	r0, [r3, #0]
 801402e:	4770      	bx	lr
 8014030:	2000a250 	andcs	sl, r0, r0, asr r2

08014034 <gd32_i2c_write>:
 8014034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014036:	4604      	mov	r4, r0
 8014038:	460f      	mov	r7, r1
 801403a:	f640 75ff 	movw	r5, #4095	; 0xfff
 801403e:	4e2e      	ldr	r6, [pc, #184]	; (80140f8 <gd32_i2c_write+0xc4>)
 8014040:	f240 6101 	movw	r1, #1537	; 0x601
 8014044:	4630      	mov	r0, r6
 8014046:	f000 fff1 	bl	801502c <i2c_flag_get>
 801404a:	b9b0      	cbnz	r0, 801407a <gd32_i2c_write+0x46>
 801404c:	482a      	ldr	r0, [pc, #168]	; (80140f8 <gd32_i2c_write+0xc4>)
 801404e:	f000 ffde 	bl	801500e <i2c_start_on_bus>
 8014052:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014056:	4e28      	ldr	r6, [pc, #160]	; (80140f8 <gd32_i2c_write+0xc4>)
 8014058:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 801405c:	4630      	mov	r0, r6
 801405e:	f000 ffe5 	bl	801502c <i2c_flag_get>
 8014062:	b190      	cbz	r0, 801408a <gd32_i2c_write+0x56>
 8014064:	4b25      	ldr	r3, [pc, #148]	; (80140fc <gd32_i2c_write+0xc8>)
 8014066:	f06f 0201 	mvn.w	r2, #1
 801406a:	7819      	ldrb	r1, [r3, #0]
 801406c:	4822      	ldr	r0, [pc, #136]	; (80140f8 <gd32_i2c_write+0xc4>)
 801406e:	f000 ffc1 	bl	8014ff4 <i2c_master_addressing>
 8014072:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014076:	4e20      	ldr	r6, [pc, #128]	; (80140f8 <gd32_i2c_write+0xc4>)
 8014078:	e00c      	b.n	8014094 <gd32_i2c_write+0x60>
 801407a:	3d01      	subs	r5, #1
 801407c:	d1e0      	bne.n	8014040 <gd32_i2c_write+0xc>
 801407e:	f7ff ff85 	bl	8013f8c <_stop() [clone .isra.0]>
 8014082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014086:	4240      	negs	r0, r0
 8014088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801408a:	3d01      	subs	r5, #1
 801408c:	d1e4      	bne.n	8014058 <gd32_i2c_write+0x24>
 801408e:	e7f6      	b.n	801407e <gd32_i2c_write+0x4a>
 8014090:	3d01      	subs	r5, #1
 8014092:	d0f4      	beq.n	801407e <gd32_i2c_write+0x4a>
 8014094:	f240 5101 	movw	r1, #1281	; 0x501
 8014098:	4630      	mov	r0, r6
 801409a:	f000 ffc7 	bl	801502c <i2c_flag_get>
 801409e:	2800      	cmp	r0, #0
 80140a0:	d0f6      	beq.n	8014090 <gd32_i2c_write+0x5c>
 80140a2:	f240 5101 	movw	r1, #1281	; 0x501
 80140a6:	4814      	ldr	r0, [pc, #80]	; (80140f8 <gd32_i2c_write+0xc4>)
 80140a8:	f000 ffcb 	bl	8015042 <i2c_flag_clear>
 80140ac:	f640 75ff 	movw	r5, #4095	; 0xfff
 80140b0:	4e11      	ldr	r6, [pc, #68]	; (80140f8 <gd32_i2c_write+0xc4>)
 80140b2:	f240 5107 	movw	r1, #1287	; 0x507
 80140b6:	4630      	mov	r0, r6
 80140b8:	f000 ffb8 	bl	801502c <i2c_flag_get>
 80140bc:	2801      	cmp	r0, #1
 80140be:	d107      	bne.n	80140d0 <gd32_i2c_write+0x9c>
 80140c0:	4e0d      	ldr	r6, [pc, #52]	; (80140f8 <gd32_i2c_write+0xc4>)
 80140c2:	4427      	add	r7, r4
 80140c4:	42a7      	cmp	r7, r4
 80140c6:	d106      	bne.n	80140d6 <gd32_i2c_write+0xa2>
 80140c8:	f7ff ff60 	bl	8013f8c <_stop() [clone .isra.0]>
 80140cc:	2000      	movs	r0, #0
 80140ce:	e7da      	b.n	8014086 <gd32_i2c_write+0x52>
 80140d0:	3d01      	subs	r5, #1
 80140d2:	d1ee      	bne.n	80140b2 <gd32_i2c_write+0x7e>
 80140d4:	e7d3      	b.n	801407e <gd32_i2c_write+0x4a>
 80140d6:	4630      	mov	r0, r6
 80140d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140dc:	f000 ffa1 	bl	8015022 <i2c_data_transmit>
 80140e0:	f640 75ff 	movw	r5, #4095	; 0xfff
 80140e4:	f240 5102 	movw	r1, #1282	; 0x502
 80140e8:	4630      	mov	r0, r6
 80140ea:	f000 ff9f 	bl	801502c <i2c_flag_get>
 80140ee:	2800      	cmp	r0, #0
 80140f0:	d1e8      	bne.n	80140c4 <gd32_i2c_write+0x90>
 80140f2:	3d01      	subs	r5, #1
 80140f4:	d1f6      	bne.n	80140e4 <gd32_i2c_write+0xb0>
 80140f6:	e7c2      	b.n	801407e <gd32_i2c_write+0x4a>
 80140f8:	40005400 	andmi	r5, r0, r0, lsl #8
 80140fc:	2000a250 	andcs	sl, r0, r0, asr r2

08014100 <gd32_i2c_read>:
 8014100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014104:	4680      	mov	r8, r0
 8014106:	460c      	mov	r4, r1
 8014108:	f640 76ff 	movw	r6, #4095	; 0xfff
 801410c:	4f4b      	ldr	r7, [pc, #300]	; (801423c <gd32_i2c_read+0x13c>)
 801410e:	f240 6101 	movw	r1, #1537	; 0x601
 8014112:	4638      	mov	r0, r7
 8014114:	f000 ff8a 	bl	801502c <i2c_flag_get>
 8014118:	4605      	mov	r5, r0
 801411a:	bb08      	cbnz	r0, 8014160 <gd32_i2c_read+0x60>
 801411c:	2c02      	cmp	r4, #2
 801411e:	d103      	bne.n	8014128 <gd32_i2c_read+0x28>
 8014120:	4601      	mov	r1, r0
 8014122:	4846      	ldr	r0, [pc, #280]	; (801423c <gd32_i2c_read+0x13c>)
 8014124:	f000 ff5d 	bl	8014fe2 <i2c_ackpos_config>
 8014128:	4844      	ldr	r0, [pc, #272]	; (801423c <gd32_i2c_read+0x13c>)
 801412a:	f000 ff70 	bl	801500e <i2c_start_on_bus>
 801412e:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014132:	4f42      	ldr	r7, [pc, #264]	; (801423c <gd32_i2c_read+0x13c>)
 8014134:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014138:	4638      	mov	r0, r7
 801413a:	f000 ff77 	bl	801502c <i2c_flag_get>
 801413e:	b1a8      	cbz	r0, 801416c <gd32_i2c_read+0x6c>
 8014140:	4b3f      	ldr	r3, [pc, #252]	; (8014240 <gd32_i2c_read+0x140>)
 8014142:	2201      	movs	r2, #1
 8014144:	7819      	ldrb	r1, [r3, #0]
 8014146:	483d      	ldr	r0, [pc, #244]	; (801423c <gd32_i2c_read+0x13c>)
 8014148:	f000 ff54 	bl	8014ff4 <i2c_master_addressing>
 801414c:	2c02      	cmp	r4, #2
 801414e:	d803      	bhi.n	8014158 <gd32_i2c_read+0x58>
 8014150:	2100      	movs	r1, #0
 8014152:	483a      	ldr	r0, [pc, #232]	; (801423c <gd32_i2c_read+0x13c>)
 8014154:	f000 ff3c 	bl	8014fd0 <i2c_ack_config>
 8014158:	f640 76ff 	movw	r6, #4095	; 0xfff
 801415c:	4f37      	ldr	r7, [pc, #220]	; (801423c <gd32_i2c_read+0x13c>)
 801415e:	e00a      	b.n	8014176 <gd32_i2c_read+0x76>
 8014160:	3e01      	subs	r6, #1
 8014162:	d1d4      	bne.n	801410e <gd32_i2c_read+0xe>
 8014164:	f7ff ff12 	bl	8013f8c <_stop() [clone .isra.0]>
 8014168:	2504      	movs	r5, #4
 801416a:	e04d      	b.n	8014208 <gd32_i2c_read+0x108>
 801416c:	3e01      	subs	r6, #1
 801416e:	d1e1      	bne.n	8014134 <gd32_i2c_read+0x34>
 8014170:	e7f8      	b.n	8014164 <gd32_i2c_read+0x64>
 8014172:	3e01      	subs	r6, #1
 8014174:	d0f6      	beq.n	8014164 <gd32_i2c_read+0x64>
 8014176:	f240 5101 	movw	r1, #1281	; 0x501
 801417a:	4638      	mov	r0, r7
 801417c:	f000 ff56 	bl	801502c <i2c_flag_get>
 8014180:	2800      	cmp	r0, #0
 8014182:	d0f6      	beq.n	8014172 <gd32_i2c_read+0x72>
 8014184:	f240 5101 	movw	r1, #1281	; 0x501
 8014188:	482c      	ldr	r0, [pc, #176]	; (801423c <gd32_i2c_read+0x13c>)
 801418a:	f000 ff5a 	bl	8015042 <i2c_flag_clear>
 801418e:	2c01      	cmp	r4, #1
 8014190:	d102      	bne.n	8014198 <gd32_i2c_read+0x98>
 8014192:	482a      	ldr	r0, [pc, #168]	; (801423c <gd32_i2c_read+0x13c>)
 8014194:	f000 ff40 	bl	8015018 <i2c_stop_on_bus>
 8014198:	f640 77ff 	movw	r7, #4095	; 0xfff
 801419c:	4e27      	ldr	r6, [pc, #156]	; (801423c <gd32_i2c_read+0x13c>)
 801419e:	e022      	b.n	80141e6 <gd32_i2c_read+0xe6>
 80141a0:	2c03      	cmp	r4, #3
 80141a2:	d134      	bne.n	801420e <gd32_i2c_read+0x10e>
 80141a4:	f640 79ff 	movw	r9, #4095	; 0xfff
 80141a8:	e002      	b.n	80141b0 <gd32_i2c_read+0xb0>
 80141aa:	f1b9 0901 	subs.w	r9, r9, #1
 80141ae:	d0d9      	beq.n	8014164 <gd32_i2c_read+0x64>
 80141b0:	f240 5102 	movw	r1, #1282	; 0x502
 80141b4:	4630      	mov	r0, r6
 80141b6:	f000 ff39 	bl	801502c <i2c_flag_get>
 80141ba:	2800      	cmp	r0, #0
 80141bc:	d0f5      	beq.n	80141aa <gd32_i2c_read+0xaa>
 80141be:	2100      	movs	r1, #0
 80141c0:	4630      	mov	r0, r6
 80141c2:	f000 ff05 	bl	8014fd0 <i2c_ack_config>
 80141c6:	f240 5106 	movw	r1, #1286	; 0x506
 80141ca:	4630      	mov	r0, r6
 80141cc:	f000 ff2e 	bl	801502c <i2c_flag_get>
 80141d0:	b138      	cbz	r0, 80141e2 <gd32_i2c_read+0xe2>
 80141d2:	4630      	mov	r0, r6
 80141d4:	f000 ff27 	bl	8015026 <i2c_data_receive>
 80141d8:	f640 77ff 	movw	r7, #4095	; 0xfff
 80141dc:	f808 0b01 	strb.w	r0, [r8], #1
 80141e0:	3c01      	subs	r4, #1
 80141e2:	3f01      	subs	r7, #1
 80141e4:	d0be      	beq.n	8014164 <gd32_i2c_read+0x64>
 80141e6:	2c00      	cmp	r4, #0
 80141e8:	d1da      	bne.n	80141a0 <gd32_i2c_read+0xa0>
 80141ea:	f640 73ff 	movw	r3, #4095	; 0xfff
 80141ee:	4915      	ldr	r1, [pc, #84]	; (8014244 <gd32_i2c_read+0x144>)
 80141f0:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
 80141f4:	0592      	lsls	r2, r2, #22
 80141f6:	d41d      	bmi.n	8014234 <gd32_i2c_read+0x134>
 80141f8:	2101      	movs	r1, #1
 80141fa:	4810      	ldr	r0, [pc, #64]	; (801423c <gd32_i2c_read+0x13c>)
 80141fc:	f000 fee8 	bl	8014fd0 <i2c_ack_config>
 8014200:	2101      	movs	r1, #1
 8014202:	480e      	ldr	r0, [pc, #56]	; (801423c <gd32_i2c_read+0x13c>)
 8014204:	f000 feed 	bl	8014fe2 <i2c_ackpos_config>
 8014208:	4628      	mov	r0, r5
 801420a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801420e:	2c02      	cmp	r4, #2
 8014210:	d1d9      	bne.n	80141c6 <gd32_i2c_read+0xc6>
 8014212:	f640 79ff 	movw	r9, #4095	; 0xfff
 8014216:	e002      	b.n	801421e <gd32_i2c_read+0x11e>
 8014218:	f1b9 0901 	subs.w	r9, r9, #1
 801421c:	d0a2      	beq.n	8014164 <gd32_i2c_read+0x64>
 801421e:	f240 5102 	movw	r1, #1282	; 0x502
 8014222:	4630      	mov	r0, r6
 8014224:	f000 ff02 	bl	801502c <i2c_flag_get>
 8014228:	2800      	cmp	r0, #0
 801422a:	d0f5      	beq.n	8014218 <gd32_i2c_read+0x118>
 801422c:	4630      	mov	r0, r6
 801422e:	f000 fef3 	bl	8015018 <i2c_stop_on_bus>
 8014232:	e7c8      	b.n	80141c6 <gd32_i2c_read+0xc6>
 8014234:	3b01      	subs	r3, #1
 8014236:	d1db      	bne.n	80141f0 <gd32_i2c_read+0xf0>
 8014238:	e796      	b.n	8014168 <gd32_i2c_read+0x68>
 801423a:	bf00      	nop
 801423c:	40005400 	andmi	r5, r0, r0, lsl #8
 8014240:	2000a250 	andcs	sl, r0, r0, asr r2
 8014244:	40005000 	andmi	r5, r0, r0

08014248 <gd32_uart_begin>:
 8014248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801424a:	461e      	mov	r6, r3
 801424c:	4b63      	ldr	r3, [pc, #396]	; (80143dc <gd32_uart_begin+0x194>)
 801424e:	4604      	mov	r4, r0
 8014250:	4298      	cmp	r0, r3
 8014252:	460f      	mov	r7, r1
 8014254:	4615      	mov	r5, r2
 8014256:	d03b      	beq.n	80142d0 <gd32_uart_begin+0x88>
 8014258:	d80a      	bhi.n	8014270 <gd32_uart_begin+0x28>
 801425a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801425e:	4298      	cmp	r0, r3
 8014260:	d02f      	beq.n	80142c2 <gd32_uart_begin+0x7a>
 8014262:	f240 7012 	movw	r0, #1810	; 0x712
 8014266:	f7ff fb17 	bl	8013898 <rcu_periph_clock_enable>
 801426a:	f240 6004 	movw	r0, #1540	; 0x604
 801426e:	e008      	b.n	8014282 <gd32_uart_begin+0x3a>
 8014270:	4b5b      	ldr	r3, [pc, #364]	; (80143e0 <gd32_uart_begin+0x198>)
 8014272:	4298      	cmp	r0, r3
 8014274:	d02f      	beq.n	80142d6 <gd32_uart_begin+0x8e>
 8014276:	f240 600e 	movw	r0, #1550	; 0x60e
 801427a:	f7ff fb0d 	bl	8013898 <rcu_periph_clock_enable>
 801427e:	f240 6003 	movw	r0, #1539	; 0x603
 8014282:	f7ff fb09 	bl	8013898 <rcu_periph_clock_enable>
 8014286:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 801428a:	f7ff fb05 	bl	8013898 <rcu_periph_clock_enable>
 801428e:	4b53      	ldr	r3, [pc, #332]	; (80143dc <gd32_uart_begin+0x194>)
 8014290:	429c      	cmp	r4, r3
 8014292:	f000 8084 	beq.w	801439e <gd32_uart_begin+0x156>
 8014296:	d829      	bhi.n	80142ec <gd32_uart_begin+0xa4>
 8014298:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 801429c:	429c      	cmp	r4, r3
 801429e:	d071      	beq.n	8014384 <gd32_uart_begin+0x13c>
 80142a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80142a4:	2203      	movs	r2, #3
 80142a6:	2118      	movs	r1, #24
 80142a8:	484e      	ldr	r0, [pc, #312]	; (80143e4 <gd32_uart_begin+0x19c>)
 80142aa:	f7ff fa5d 	bl	8013768 <gpio_init>
 80142ae:	2104      	movs	r1, #4
 80142b0:	484c      	ldr	r0, [pc, #304]	; (80143e4 <gd32_uart_begin+0x19c>)
 80142b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80142b6:	2203      	movs	r2, #3
 80142b8:	f7ff fa56 	bl	8013768 <gpio_init>
 80142bc:	2101      	movs	r1, #1
 80142be:	484a      	ldr	r0, [pc, #296]	; (80143e8 <gd32_uart_begin+0x1a0>)
 80142c0:	e025      	b.n	801430e <gd32_uart_begin+0xc6>
 80142c2:	f240 7011 	movw	r0, #1809	; 0x711
 80142c6:	f7ff fae7 	bl	8013898 <rcu_periph_clock_enable>
 80142ca:	f240 6002 	movw	r0, #1538	; 0x602
 80142ce:	e7d8      	b.n	8014282 <gd32_uart_begin+0x3a>
 80142d0:	f240 7013 	movw	r0, #1811	; 0x713
 80142d4:	e7c7      	b.n	8014266 <gd32_uart_begin+0x1e>
 80142d6:	f240 7014 	movw	r0, #1812	; 0x714
 80142da:	f7ff fadd 	bl	8013898 <rcu_periph_clock_enable>
 80142de:	f240 6004 	movw	r0, #1540	; 0x604
 80142e2:	f7ff fad9 	bl	8013898 <rcu_periph_clock_enable>
 80142e6:	f240 6005 	movw	r0, #1541	; 0x605
 80142ea:	e7ca      	b.n	8014282 <gd32_uart_begin+0x3a>
 80142ec:	4b3c      	ldr	r3, [pc, #240]	; (80143e0 <gd32_uart_begin+0x198>)
 80142ee:	429c      	cmp	r4, r3
 80142f0:	d062      	beq.n	80143b8 <gd32_uart_begin+0x170>
 80142f2:	2340      	movs	r3, #64	; 0x40
 80142f4:	2203      	movs	r2, #3
 80142f6:	2118      	movs	r1, #24
 80142f8:	483c      	ldr	r0, [pc, #240]	; (80143ec <gd32_uart_begin+0x1a4>)
 80142fa:	f7ff fa35 	bl	8013768 <gpio_init>
 80142fe:	2104      	movs	r1, #4
 8014300:	483a      	ldr	r0, [pc, #232]	; (80143ec <gd32_uart_begin+0x1a4>)
 8014302:	2380      	movs	r3, #128	; 0x80
 8014304:	2203      	movs	r2, #3
 8014306:	f7ff fa2f 	bl	8013768 <gpio_init>
 801430a:	2101      	movs	r1, #1
 801430c:	2004      	movs	r0, #4
 801430e:	f7ff fa7f 	bl	8013810 <gpio_pin_remap_config>
 8014312:	4620      	mov	r0, r4
 8014314:	f7ff fd0c 	bl	8013d30 <usart_deinit>
 8014318:	68e3      	ldr	r3, [r4, #12]
 801431a:	4639      	mov	r1, r7
 801431c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014320:	4620      	mov	r0, r4
 8014322:	60e3      	str	r3, [r4, #12]
 8014324:	f7ff fd44 	bl	8013db0 <usart_baudrate_set>
 8014328:	f1a5 0309 	sub.w	r3, r5, #9
 801432c:	4259      	negs	r1, r3
 801432e:	4159      	adcs	r1, r3
 8014330:	4620      	mov	r0, r4
 8014332:	0309      	lsls	r1, r1, #12
 8014334:	f7ff fd6c 	bl	8013e10 <usart_word_length_set>
 8014338:	9906      	ldr	r1, [sp, #24]
 801433a:	4620      	mov	r0, r4
 801433c:	1e8a      	subs	r2, r1, #2
 801433e:	4251      	negs	r1, r2
 8014340:	4151      	adcs	r1, r2
 8014342:	0349      	lsls	r1, r1, #13
 8014344:	f7ff fd6c 	bl	8013e20 <usart_stop_bit_set>
 8014348:	2e01      	cmp	r6, #1
 801434a:	d041      	beq.n	80143d0 <gd32_uart_begin+0x188>
 801434c:	2e02      	cmp	r6, #2
 801434e:	d142      	bne.n	80143d6 <gd32_uart_begin+0x18e>
 8014350:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014354:	4620      	mov	r0, r4
 8014356:	f7ff fd53 	bl	8013e00 <usart_parity_config>
 801435a:	2100      	movs	r1, #0
 801435c:	4620      	mov	r0, r4
 801435e:	f7ff fd73 	bl	8013e48 <usart_hardware_flow_rts_config>
 8014362:	2100      	movs	r1, #0
 8014364:	4620      	mov	r0, r4
 8014366:	f7ff fd75 	bl	8013e54 <usart_hardware_flow_cts_config>
 801436a:	2104      	movs	r1, #4
 801436c:	4620      	mov	r0, r4
 801436e:	f7ff fd65 	bl	8013e3c <usart_receive_config>
 8014372:	2108      	movs	r1, #8
 8014374:	4620      	mov	r0, r4
 8014376:	f7ff fd5b 	bl	8013e30 <usart_transmit_config>
 801437a:	68e3      	ldr	r3, [r4, #12]
 801437c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014380:	60e3      	str	r3, [r4, #12]
 8014382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014384:	2304      	movs	r3, #4
 8014386:	2203      	movs	r2, #3
 8014388:	2118      	movs	r1, #24
 801438a:	4819      	ldr	r0, [pc, #100]	; (80143f0 <gd32_uart_begin+0x1a8>)
 801438c:	f7ff f9ec 	bl	8013768 <gpio_init>
 8014390:	2308      	movs	r3, #8
 8014392:	2203      	movs	r2, #3
 8014394:	2104      	movs	r1, #4
 8014396:	4816      	ldr	r0, [pc, #88]	; (80143f0 <gd32_uart_begin+0x1a8>)
 8014398:	f7ff f9e6 	bl	8013768 <gpio_init>
 801439c:	e7b9      	b.n	8014312 <gd32_uart_begin+0xca>
 801439e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143a2:	2203      	movs	r2, #3
 80143a4:	2118      	movs	r1, #24
 80143a6:	480f      	ldr	r0, [pc, #60]	; (80143e4 <gd32_uart_begin+0x19c>)
 80143a8:	f7ff f9de 	bl	8013768 <gpio_init>
 80143ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80143b0:	2203      	movs	r2, #3
 80143b2:	2104      	movs	r1, #4
 80143b4:	480b      	ldr	r0, [pc, #44]	; (80143e4 <gd32_uart_begin+0x19c>)
 80143b6:	e7ef      	b.n	8014398 <gd32_uart_begin+0x150>
 80143b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80143bc:	2203      	movs	r2, #3
 80143be:	2118      	movs	r1, #24
 80143c0:	4808      	ldr	r0, [pc, #32]	; (80143e4 <gd32_uart_begin+0x19c>)
 80143c2:	f7ff f9d1 	bl	8013768 <gpio_init>
 80143c6:	2304      	movs	r3, #4
 80143c8:	2203      	movs	r2, #3
 80143ca:	4619      	mov	r1, r3
 80143cc:	4809      	ldr	r0, [pc, #36]	; (80143f4 <gd32_uart_begin+0x1ac>)
 80143ce:	e7e3      	b.n	8014398 <gd32_uart_begin+0x150>
 80143d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80143d4:	e7be      	b.n	8014354 <gd32_uart_begin+0x10c>
 80143d6:	2100      	movs	r1, #0
 80143d8:	e7bc      	b.n	8014354 <gd32_uart_begin+0x10c>
 80143da:	bf00      	nop
 80143dc:	40004c00 	andmi	r4, r0, r0, lsl #24
 80143e0:	40005000 	andmi	r5, r0, r0
 80143e4:	40011000 	andmi	r1, r1, r0
 80143e8:	00140010 	andseq	r0, r4, r0, lsl r0
 80143ec:	40010c00 	andmi	r0, r1, r0, lsl #24
 80143f0:	40010800 	andmi	r0, r1, r0, lsl #16
 80143f4:	40011400 	andmi	r1, r1, r0, lsl #8

080143f8 <micros_init()>:
 80143f8:	4770      	bx	lr
	...

080143fc <udelay_init()>:
 80143fc:	4a07      	ldr	r2, [pc, #28]	; (801441c <udelay_init()+0x20>)
 80143fe:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8014402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014406:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 801440a:	2200      	movs	r2, #0
 801440c:	4b04      	ldr	r3, [pc, #16]	; (8014420 <udelay_init()+0x24>)
 801440e:	605a      	str	r2, [r3, #4]
 8014410:	681a      	ldr	r2, [r3, #0]
 8014412:	f042 0201 	orr.w	r2, r2, #1
 8014416:	601a      	str	r2, [r3, #0]
 8014418:	4770      	bx	lr
 801441a:	bf00      	nop
 801441c:	e000ed00 	and	lr, r0, r0, lsl #26
 8014420:	e0001000 	and	r1, r0, r0

08014424 <udelay(unsigned int, unsigned int)>:
 8014424:	236c      	movs	r3, #108	; 0x6c
 8014426:	b530      	push	{r4, r5, lr}
 8014428:	4358      	muls	r0, r3
 801442a:	b909      	cbnz	r1, 8014430 <udelay(unsigned int, unsigned int)+0xc>
 801442c:	4b08      	ldr	r3, [pc, #32]	; (8014450 <udelay(unsigned int, unsigned int)+0x2c>)
 801442e:	6859      	ldr	r1, [r3, #4]
 8014430:	2300      	movs	r3, #0
 8014432:	4c07      	ldr	r4, [pc, #28]	; (8014450 <udelay(unsigned int, unsigned int)+0x2c>)
 8014434:	6862      	ldr	r2, [r4, #4]
 8014436:	4291      	cmp	r1, r2
 8014438:	d0fc      	beq.n	8014434 <udelay(unsigned int, unsigned int)+0x10>
 801443a:	bf2a      	itet	cs
 801443c:	f102 35ff 	addcs.w	r5, r2, #4294967295	; 0xffffffff
 8014440:	189b      	addcc	r3, r3, r2
 8014442:	195b      	addcs	r3, r3, r5
 8014444:	1a5b      	subs	r3, r3, r1
 8014446:	4283      	cmp	r3, r0
 8014448:	d300      	bcc.n	801444c <udelay(unsigned int, unsigned int)+0x28>
 801444a:	bd30      	pop	{r4, r5, pc}
 801444c:	4611      	mov	r1, r2
 801444e:	e7f1      	b.n	8014434 <udelay(unsigned int, unsigned int)+0x10>
 8014450:	e0001000 	and	r1, r0, r0

08014454 <emac_start(unsigned char*)>:
 8014454:	b570      	push	{r4, r5, r6, lr}
 8014456:	4605      	mov	r5, r0
 8014458:	f240 6002 	movw	r0, #1538	; 0x602
 801445c:	f7ff fa1c 	bl	8013898 <rcu_periph_clock_enable>
 8014460:	f240 6003 	movw	r0, #1539	; 0x603
 8014464:	f7ff fa18 	bl	8013898 <rcu_periph_clock_enable>
 8014468:	f240 6004 	movw	r0, #1540	; 0x604
 801446c:	f7ff fa14 	bl	8013898 <rcu_periph_clock_enable>
 8014470:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8014474:	f7ff fa10 	bl	8013898 <rcu_periph_clock_enable>
 8014478:	f44f 7380 	mov.w	r3, #256	; 0x100
 801447c:	2203      	movs	r2, #3
 801447e:	2118      	movs	r1, #24
 8014480:	4844      	ldr	r0, [pc, #272]	; (8014594 <emac_start(unsigned char*)+0x140>)
 8014482:	f7ff f971 	bl	8013768 <gpio_init>
 8014486:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 801448a:	f7ff fa2f 	bl	80138ec <rcu_pll2_config>
 801448e:	201c      	movs	r0, #28
 8014490:	f7ff fac6 	bl	8013a20 <rcu_osci_on>
 8014494:	201c      	movs	r0, #28
 8014496:	f7ff fa63 	bl	8013960 <rcu_osci_stab_wait>
 801449a:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 801449e:	f7ff fa1b 	bl	80138d8 <rcu_ckout0_config>
 80144a2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80144a6:	f7ff f9e3 	bl	8013870 <gpio_ethernet_phy_select>
 80144aa:	2302      	movs	r3, #2
 80144ac:	2203      	movs	r2, #3
 80144ae:	2104      	movs	r1, #4
 80144b0:	4838      	ldr	r0, [pc, #224]	; (8014594 <emac_start(unsigned char*)+0x140>)
 80144b2:	f7ff f959 	bl	8013768 <gpio_init>
 80144b6:	2304      	movs	r3, #4
 80144b8:	2203      	movs	r2, #3
 80144ba:	2118      	movs	r1, #24
 80144bc:	4835      	ldr	r0, [pc, #212]	; (8014594 <emac_start(unsigned char*)+0x140>)
 80144be:	f7ff f953 	bl	8013768 <gpio_init>
 80144c2:	2380      	movs	r3, #128	; 0x80
 80144c4:	2203      	movs	r2, #3
 80144c6:	2104      	movs	r1, #4
 80144c8:	4832      	ldr	r0, [pc, #200]	; (8014594 <emac_start(unsigned char*)+0x140>)
 80144ca:	f7ff f94d 	bl	8013768 <gpio_init>
 80144ce:	2302      	movs	r3, #2
 80144d0:	2203      	movs	r2, #3
 80144d2:	2118      	movs	r1, #24
 80144d4:	4830      	ldr	r0, [pc, #192]	; (8014598 <emac_start(unsigned char*)+0x144>)
 80144d6:	f7ff f947 	bl	8013768 <gpio_init>
 80144da:	2310      	movs	r3, #16
 80144dc:	2203      	movs	r2, #3
 80144de:	2104      	movs	r1, #4
 80144e0:	482d      	ldr	r0, [pc, #180]	; (8014598 <emac_start(unsigned char*)+0x144>)
 80144e2:	f7ff f941 	bl	8013768 <gpio_init>
 80144e6:	2320      	movs	r3, #32
 80144e8:	2203      	movs	r2, #3
 80144ea:	2104      	movs	r1, #4
 80144ec:	482a      	ldr	r0, [pc, #168]	; (8014598 <emac_start(unsigned char*)+0x144>)
 80144ee:	f7ff f93b 	bl	8013768 <gpio_init>
 80144f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80144f6:	2203      	movs	r2, #3
 80144f8:	2118      	movs	r1, #24
 80144fa:	4828      	ldr	r0, [pc, #160]	; (801459c <emac_start(unsigned char*)+0x148>)
 80144fc:	f7ff f934 	bl	8013768 <gpio_init>
 8014500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014504:	2203      	movs	r2, #3
 8014506:	2118      	movs	r1, #24
 8014508:	4824      	ldr	r0, [pc, #144]	; (801459c <emac_start(unsigned char*)+0x148>)
 801450a:	f7ff f92d 	bl	8013768 <gpio_init>
 801450e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014512:	2203      	movs	r2, #3
 8014514:	2118      	movs	r1, #24
 8014516:	4821      	ldr	r0, [pc, #132]	; (801459c <emac_start(unsigned char*)+0x148>)
 8014518:	f7ff f926 	bl	8013768 <gpio_init>
 801451c:	f240 500e 	movw	r0, #1294	; 0x50e
 8014520:	f7ff f9ba 	bl	8013898 <rcu_periph_clock_enable>
 8014524:	f240 500f 	movw	r0, #1295	; 0x50f
 8014528:	f7ff f9b6 	bl	8013898 <rcu_periph_clock_enable>
 801452c:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8014530:	f7ff f9b2 	bl	8013898 <rcu_periph_clock_enable>
 8014534:	f000 fcdc 	bl	8014ef0 <enet_deinit>
 8014538:	f000 f93a 	bl	80147b0 <enet_software_reset>
 801453c:	4604      	mov	r4, r0
 801453e:	b138      	cbz	r0, 8014550 <emac_start(unsigned char*)+0xfc>
 8014540:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014548:	2001      	movs	r0, #1
 801454a:	f000 fab5 	bl	8014ab8 <enet_init>
 801454e:	4604      	mov	r4, r0
 8014550:	4628      	mov	r0, r5
 8014552:	f000 fd89 	bl	8015068 <mac_address_get(unsigned char*)>
 8014556:	4629      	mov	r1, r5
 8014558:	2000      	movs	r0, #0
 801455a:	f000 fa0d 	bl	8014978 <enet_mac_address_set>
 801455e:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 8014562:	f000 f939 	bl	80147d8 <enet_descriptors_chain_init>
 8014566:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 801456a:	f000 f935 	bl	80147d8 <enet_descriptors_chain_init>
 801456e:	2500      	movs	r5, #0
 8014570:	4e0b      	ldr	r6, [pc, #44]	; (80145a0 <emac_start(unsigned char*)+0x14c>)
 8014572:	4630      	mov	r0, r6
 8014574:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 8014578:	3501      	adds	r5, #1
 801457a:	f000 f9f7 	bl	801496c <enet_transmit_checksum_config>
 801457e:	2d08      	cmp	r5, #8
 8014580:	f106 0610 	add.w	r6, r6, #16
 8014584:	d1f5      	bne.n	8014572 <emac_start(unsigned char*)+0x11e>
 8014586:	f000 fc2b 	bl	8014de0 <enet_enable>
 801458a:	fab4 f084 	clz	r0, r4
 801458e:	0940      	lsrs	r0, r0, #5
 8014590:	4240      	negs	r0, r0
 8014592:	bd70      	pop	{r4, r5, r6, pc}
 8014594:	40010800 	andmi	r0, r1, r0, lsl #16
 8014598:	40011000 	andmi	r1, r1, r0
 801459c:	40010c00 	andmi	r0, r1, r0, lsl #24
 80145a0:	20013280 	andcs	r3, r1, r0, lsl #5

080145a4 <net::link_register_read()>:
 80145a4:	b507      	push	{r0, r1, r2, lr}
 80145a6:	2201      	movs	r2, #1
 80145a8:	f10d 0306 	add.w	r3, sp, #6
 80145ac:	4611      	mov	r1, r2
 80145ae:	2000      	movs	r0, #0
 80145b0:	f000 f9fa 	bl	80149a8 <enet_phy_write_read>
 80145b4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80145b8:	f080 0004 	eor.w	r0, r0, #4
 80145bc:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80145c0:	b003      	add	sp, #12
 80145c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080145c8 <adc_mode_config>:
 80145c8:	4b06      	ldr	r3, [pc, #24]	; (80145e4 <adc_mode_config+0x1c>)
 80145ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80145ce:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80145d2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80145d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80145da:	4302      	orrs	r2, r0
 80145dc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80145e0:	4770      	bx	lr
 80145e2:	bf00      	nop
 80145e4:	40012000 	andmi	r2, r1, r0

080145e8 <adc_special_function_config>:
 80145e8:	b510      	push	{r4, lr}
 80145ea:	f401 7380 	and.w	r3, r1, #256	; 0x100
 80145ee:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 80145f2:	f001 0102 	and.w	r1, r1, #2
 80145f6:	b17a      	cbz	r2, 8014618 <adc_special_function_config+0x30>
 80145f8:	b11b      	cbz	r3, 8014602 <adc_special_function_config+0x1a>
 80145fa:	6843      	ldr	r3, [r0, #4]
 80145fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014600:	6043      	str	r3, [r0, #4]
 8014602:	b11c      	cbz	r4, 801460c <adc_special_function_config+0x24>
 8014604:	6843      	ldr	r3, [r0, #4]
 8014606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801460a:	6043      	str	r3, [r0, #4]
 801460c:	b119      	cbz	r1, 8014616 <adc_special_function_config+0x2e>
 801460e:	6883      	ldr	r3, [r0, #8]
 8014610:	f043 0302 	orr.w	r3, r3, #2
 8014614:	6083      	str	r3, [r0, #8]
 8014616:	bd10      	pop	{r4, pc}
 8014618:	b11b      	cbz	r3, 8014622 <adc_special_function_config+0x3a>
 801461a:	6843      	ldr	r3, [r0, #4]
 801461c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014620:	6043      	str	r3, [r0, #4]
 8014622:	b11c      	cbz	r4, 801462c <adc_special_function_config+0x44>
 8014624:	6843      	ldr	r3, [r0, #4]
 8014626:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801462a:	6043      	str	r3, [r0, #4]
 801462c:	2900      	cmp	r1, #0
 801462e:	d0f2      	beq.n	8014616 <adc_special_function_config+0x2e>
 8014630:	6883      	ldr	r3, [r0, #8]
 8014632:	f023 0302 	bic.w	r3, r3, #2
 8014636:	e7ed      	b.n	8014614 <adc_special_function_config+0x2c>

08014638 <adc_data_alignment_config>:
 8014638:	6883      	ldr	r3, [r0, #8]
 801463a:	b119      	cbz	r1, 8014644 <adc_data_alignment_config+0xc>
 801463c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014640:	6083      	str	r3, [r0, #8]
 8014642:	4770      	bx	lr
 8014644:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014648:	e7fa      	b.n	8014640 <adc_data_alignment_config+0x8>

0801464a <adc_enable>:
 801464a:	6883      	ldr	r3, [r0, #8]
 801464c:	07db      	lsls	r3, r3, #31
 801464e:	bf5e      	ittt	pl
 8014650:	6883      	ldrpl	r3, [r0, #8]
 8014652:	f043 0301 	orrpl.w	r3, r3, #1
 8014656:	6083      	strpl	r3, [r0, #8]
 8014658:	4770      	bx	lr

0801465a <adc_calibration_enable>:
 801465a:	6883      	ldr	r3, [r0, #8]
 801465c:	f100 0208 	add.w	r2, r0, #8
 8014660:	f043 0308 	orr.w	r3, r3, #8
 8014664:	6083      	str	r3, [r0, #8]
 8014666:	6813      	ldr	r3, [r2, #0]
 8014668:	0719      	lsls	r1, r3, #28
 801466a:	d4fc      	bmi.n	8014666 <adc_calibration_enable+0xc>
 801466c:	6883      	ldr	r3, [r0, #8]
 801466e:	f043 0304 	orr.w	r3, r3, #4
 8014672:	6083      	str	r3, [r0, #8]
 8014674:	6813      	ldr	r3, [r2, #0]
 8014676:	075b      	lsls	r3, r3, #29
 8014678:	d4fc      	bmi.n	8014674 <adc_calibration_enable+0x1a>
 801467a:	4770      	bx	lr

0801467c <adc_tempsensor_vrefint_enable>:
 801467c:	4a03      	ldr	r2, [pc, #12]	; (801468c <adc_tempsensor_vrefint_enable+0x10>)
 801467e:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8014682:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014686:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 801468a:	4770      	bx	lr
 801468c:	40012000 	andmi	r2, r1, r0

08014690 <adc_channel_length_config>:
 8014690:	2901      	cmp	r1, #1
 8014692:	d002      	beq.n	801469a <adc_channel_length_config+0xa>
 8014694:	2902      	cmp	r1, #2
 8014696:	d00c      	beq.n	80146b2 <adc_channel_length_config+0x22>
 8014698:	4770      	bx	lr
 801469a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801469c:	3a01      	subs	r2, #1
 801469e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80146a2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80146a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80146a6:	0512      	lsls	r2, r2, #20
 80146a8:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 80146ac:	431a      	orrs	r2, r3
 80146ae:	62c2      	str	r2, [r0, #44]	; 0x2c
 80146b0:	4770      	bx	lr
 80146b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80146b4:	3a01      	subs	r2, #1
 80146b6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80146ba:	6383      	str	r3, [r0, #56]	; 0x38
 80146bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80146be:	0512      	lsls	r2, r2, #20
 80146c0:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80146c4:	431a      	orrs	r2, r3
 80146c6:	6382      	str	r2, [r0, #56]	; 0x38
 80146c8:	4770      	bx	lr

080146ca <adc_inserted_channel_config>:
 80146ca:	b530      	push	{r4, r5, lr}
 80146cc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80146ce:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80146d0:	f3c4 5401 	ubfx	r4, r4, #20, #2
 80146d4:	1a61      	subs	r1, r4, r1
 80146d6:	f06f 0404 	mvn.w	r4, #4
 80146da:	4361      	muls	r1, r4
 80146dc:	241f      	movs	r4, #31
 80146de:	310f      	adds	r1, #15
 80146e0:	408c      	lsls	r4, r1
 80146e2:	ea25 0504 	bic.w	r5, r5, r4
 80146e6:	fa02 f101 	lsl.w	r1, r2, r1
 80146ea:	4329      	orrs	r1, r5
 80146ec:	2a09      	cmp	r2, #9
 80146ee:	6381      	str	r1, [r0, #56]	; 0x38
 80146f0:	d80b      	bhi.n	801470a <adc_inserted_channel_config+0x40>
 80146f2:	2407      	movs	r4, #7
 80146f4:	6901      	ldr	r1, [r0, #16]
 80146f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80146fa:	4094      	lsls	r4, r2
 80146fc:	ea21 0104 	bic.w	r1, r1, r4
 8014700:	fa03 f202 	lsl.w	r2, r3, r2
 8014704:	430a      	orrs	r2, r1
 8014706:	6102      	str	r2, [r0, #16]
 8014708:	bd30      	pop	{r4, r5, pc}
 801470a:	2a11      	cmp	r2, #17
 801470c:	d8fc      	bhi.n	8014708 <adc_inserted_channel_config+0x3e>
 801470e:	2407      	movs	r4, #7
 8014710:	3a0a      	subs	r2, #10
 8014712:	68c1      	ldr	r1, [r0, #12]
 8014714:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014718:	4094      	lsls	r4, r2
 801471a:	ea21 0104 	bic.w	r1, r1, r4
 801471e:	4093      	lsls	r3, r2
 8014720:	430b      	orrs	r3, r1
 8014722:	60c3      	str	r3, [r0, #12]
 8014724:	e7f0      	b.n	8014708 <adc_inserted_channel_config+0x3e>

08014726 <adc_external_trigger_source_config>:
 8014726:	2901      	cmp	r1, #1
 8014728:	d002      	beq.n	8014730 <adc_external_trigger_source_config+0xa>
 801472a:	2902      	cmp	r1, #2
 801472c:	d008      	beq.n	8014740 <adc_external_trigger_source_config+0x1a>
 801472e:	4770      	bx	lr
 8014730:	6883      	ldr	r3, [r0, #8]
 8014732:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8014736:	6083      	str	r3, [r0, #8]
 8014738:	6883      	ldr	r3, [r0, #8]
 801473a:	4313      	orrs	r3, r2
 801473c:	6083      	str	r3, [r0, #8]
 801473e:	4770      	bx	lr
 8014740:	6883      	ldr	r3, [r0, #8]
 8014742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014746:	e7f6      	b.n	8014736 <adc_external_trigger_source_config+0x10>

08014748 <adc_external_trigger_config>:
 8014748:	f001 0301 	and.w	r3, r1, #1
 801474c:	f001 0102 	and.w	r1, r1, #2
 8014750:	b152      	cbz	r2, 8014768 <adc_external_trigger_config+0x20>
 8014752:	b11b      	cbz	r3, 801475c <adc_external_trigger_config+0x14>
 8014754:	6883      	ldr	r3, [r0, #8]
 8014756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801475a:	6083      	str	r3, [r0, #8]
 801475c:	b119      	cbz	r1, 8014766 <adc_external_trigger_config+0x1e>
 801475e:	6883      	ldr	r3, [r0, #8]
 8014760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014764:	6083      	str	r3, [r0, #8]
 8014766:	4770      	bx	lr
 8014768:	b11b      	cbz	r3, 8014772 <adc_external_trigger_config+0x2a>
 801476a:	6883      	ldr	r3, [r0, #8]
 801476c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014770:	6083      	str	r3, [r0, #8]
 8014772:	2900      	cmp	r1, #0
 8014774:	d0f7      	beq.n	8014766 <adc_external_trigger_config+0x1e>
 8014776:	6883      	ldr	r3, [r0, #8]
 8014778:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801477c:	e7f2      	b.n	8014764 <adc_external_trigger_config+0x1c>

0801477e <adc_software_trigger_enable>:
 801477e:	07ca      	lsls	r2, r1, #31
 8014780:	bf42      	ittt	mi
 8014782:	6883      	ldrmi	r3, [r0, #8]
 8014784:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8014788:	6083      	strmi	r3, [r0, #8]
 801478a:	078b      	lsls	r3, r1, #30
 801478c:	bf42      	ittt	mi
 801478e:	6883      	ldrmi	r3, [r0, #8]
 8014790:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8014794:	6083      	strmi	r3, [r0, #8]
 8014796:	4770      	bx	lr

08014798 <enet_delay>:
 8014798:	2300      	movs	r3, #0
 801479a:	b082      	sub	sp, #8
 801479c:	9301      	str	r3, [sp, #4]
 801479e:	9001      	str	r0, [sp, #4]
 80147a0:	9b01      	ldr	r3, [sp, #4]
 80147a2:	b90b      	cbnz	r3, 80147a8 <enet_delay+0x10>
 80147a4:	b002      	add	sp, #8
 80147a6:	4770      	bx	lr
 80147a8:	9b01      	ldr	r3, [sp, #4]
 80147aa:	3b01      	subs	r3, #1
 80147ac:	9301      	str	r3, [sp, #4]
 80147ae:	e7f7      	b.n	80147a0 <enet_delay+0x8>

080147b0 <enet_software_reset>:
 80147b0:	4b07      	ldr	r3, [pc, #28]	; (80147d0 <enet_software_reset+0x20>)
 80147b2:	681a      	ldr	r2, [r3, #0]
 80147b4:	f042 0201 	orr.w	r2, r2, #1
 80147b8:	601a      	str	r2, [r3, #0]
 80147ba:	4a06      	ldr	r2, [pc, #24]	; (80147d4 <enet_software_reset+0x24>)
 80147bc:	6819      	ldr	r1, [r3, #0]
 80147be:	07c9      	lsls	r1, r1, #31
 80147c0:	d501      	bpl.n	80147c6 <enet_software_reset+0x16>
 80147c2:	3a01      	subs	r2, #1
 80147c4:	d1fa      	bne.n	80147bc <enet_software_reset+0xc>
 80147c6:	6818      	ldr	r0, [r3, #0]
 80147c8:	43c0      	mvns	r0, r0
 80147ca:	f000 0001 	and.w	r0, r0, #1
 80147ce:	4770      	bx	lr
 80147d0:	40029000 	andmi	r9, r2, r0
 80147d4:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080147d8 <enet_descriptors_chain_init>:
 80147d8:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 80147dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147de:	4a19      	ldr	r2, [pc, #100]	; (8014844 <enet_descriptors_chain_init+0x6c>)
 80147e0:	d125      	bne.n	801482e <enet_descriptors_chain_init+0x56>
 80147e2:	2500      	movs	r5, #0
 80147e4:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80147e8:	2008      	movs	r0, #8
 80147ea:	4b17      	ldr	r3, [pc, #92]	; (8014848 <enet_descriptors_chain_init+0x70>)
 80147ec:	4c17      	ldr	r4, [pc, #92]	; (801484c <enet_descriptors_chain_init+0x74>)
 80147ee:	6113      	str	r3, [r2, #16]
 80147f0:	4a17      	ldr	r2, [pc, #92]	; (8014850 <enet_descriptors_chain_init+0x78>)
 80147f2:	6013      	str	r3, [r2, #0]
 80147f4:	2200      	movs	r2, #0
 80147f6:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 80147fa:	4916      	ldr	r1, [pc, #88]	; (8014854 <enet_descriptors_chain_init+0x7c>)
 80147fc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8014800:	600a      	str	r2, [r1, #0]
 8014802:	4915      	ldr	r1, [pc, #84]	; (8014858 <enet_descriptors_chain_init+0x80>)
 8014804:	600a      	str	r2, [r1, #0]
 8014806:	f103 0110 	add.w	r1, r3, #16
 801480a:	fb0e 4702 	mla	r7, lr, r2, r4
 801480e:	f841 7c08 	str.w	r7, [r1, #-8]
 8014812:	4594      	cmp	ip, r2
 8014814:	bf94      	ite	ls
 8014816:	461f      	movls	r7, r3
 8014818:	460f      	movhi	r7, r1
 801481a:	3201      	adds	r2, #1
 801481c:	4290      	cmp	r0, r2
 801481e:	e941 6504 	strd	r6, r5, [r1, #-16]
 8014822:	f841 7c04 	str.w	r7, [r1, #-4]
 8014826:	f101 0110 	add.w	r1, r1, #16
 801482a:	d1ee      	bne.n	801480a <enet_descriptors_chain_init+0x32>
 801482c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801482e:	4b0b      	ldr	r3, [pc, #44]	; (801485c <enet_descriptors_chain_init+0x84>)
 8014830:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8014834:	60d3      	str	r3, [r2, #12]
 8014836:	4a0a      	ldr	r2, [pc, #40]	; (8014860 <enet_descriptors_chain_init+0x88>)
 8014838:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801483c:	2010      	movs	r0, #16
 801483e:	4c09      	ldr	r4, [pc, #36]	; (8014864 <enet_descriptors_chain_init+0x8c>)
 8014840:	6013      	str	r3, [r2, #0]
 8014842:	e7d7      	b.n	80147f4 <enet_descriptors_chain_init+0x1c>
 8014844:	40029000 	andmi	r9, r2, r0
 8014848:	20013280 	andcs	r3, r1, r0, lsl #5
 801484c:	200102e0 	andcs	r0, r1, r0, ror #5
 8014850:	2000a260 	andcs	sl, r0, r0, ror #4
 8014854:	2000a254 	andcs	sl, r0, r4, asr r2
 8014858:	2000a258 	andcs	sl, r0, r8, asr r2
 801485c:	200101e0 	andcs	r0, r1, r0, ror #3
 8014860:	2000a25c 	andcs	sl, r0, ip, asr r2
 8014864:	2000a2a0 	andcs	sl, r0, r0, lsr #5

08014868 <enet_frame_receive>:
 8014868:	4a1d      	ldr	r2, [pc, #116]	; (80148e0 <enet_frame_receive+0x78>)
 801486a:	b510      	push	{r4, lr}
 801486c:	6813      	ldr	r3, [r2, #0]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	2b00      	cmp	r3, #0
 8014872:	db33      	blt.n	80148dc <enet_frame_receive+0x74>
 8014874:	b970      	cbnz	r0, 8014894 <enet_frame_receive+0x2c>
 8014876:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801487a:	6813      	ldr	r3, [r2, #0]
 801487c:	6019      	str	r1, [r3, #0]
 801487e:	4919      	ldr	r1, [pc, #100]	; (80148e4 <enet_frame_receive+0x7c>)
 8014880:	6948      	ldr	r0, [r1, #20]
 8014882:	0604      	lsls	r4, r0, #24
 8014884:	d419      	bmi.n	80148ba <enet_frame_receive+0x52>
 8014886:	6859      	ldr	r1, [r3, #4]
 8014888:	0448      	lsls	r0, r1, #17
 801488a:	d51b      	bpl.n	80148c4 <enet_frame_receive+0x5c>
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	2001      	movs	r0, #1
 8014890:	6013      	str	r3, [r2, #0]
 8014892:	bd10      	pop	{r4, pc}
 8014894:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 8014898:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 801489c:	d11e      	bne.n	80148dc <enet_frame_receive+0x74>
 801489e:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80148a2:	3b04      	subs	r3, #4
 80148a4:	428b      	cmp	r3, r1
 80148a6:	d819      	bhi.n	80148dc <enet_frame_receive+0x74>
 80148a8:	2100      	movs	r1, #0
 80148aa:	4299      	cmp	r1, r3
 80148ac:	6814      	ldr	r4, [r2, #0]
 80148ae:	d2e2      	bcs.n	8014876 <enet_frame_receive+0xe>
 80148b0:	68a4      	ldr	r4, [r4, #8]
 80148b2:	5d0c      	ldrb	r4, [r1, r4]
 80148b4:	5444      	strb	r4, [r0, r1]
 80148b6:	3101      	adds	r1, #1
 80148b8:	e7f7      	b.n	80148aa <enet_frame_receive+0x42>
 80148ba:	2080      	movs	r0, #128	; 0x80
 80148bc:	6148      	str	r0, [r1, #20]
 80148be:	2000      	movs	r0, #0
 80148c0:	6088      	str	r0, [r1, #8]
 80148c2:	e7e0      	b.n	8014886 <enet_frame_receive+0x1e>
 80148c4:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80148c8:	4906      	ldr	r1, [pc, #24]	; (80148e4 <enet_frame_receive+0x7c>)
 80148ca:	bf05      	ittet	eq
 80148cc:	3310      	addeq	r3, #16
 80148ce:	6809      	ldreq	r1, [r1, #0]
 80148d0:	68cb      	ldrne	r3, [r1, #12]
 80148d2:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80148d6:	bf08      	it	eq
 80148d8:	185b      	addeq	r3, r3, r1
 80148da:	e7d8      	b.n	801488e <enet_frame_receive+0x26>
 80148dc:	2000      	movs	r0, #0
 80148de:	e7d8      	b.n	8014892 <enet_frame_receive+0x2a>
 80148e0:	2000a25c 	andcs	sl, r0, ip, asr r2
 80148e4:	40029000 	andmi	r9, r2, r0

080148e8 <enet_frame_transmit>:
 80148e8:	4a1e      	ldr	r2, [pc, #120]	; (8014964 <enet_frame_transmit+0x7c>)
 80148ea:	b530      	push	{r4, r5, lr}
 80148ec:	6813      	ldr	r3, [r2, #0]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	db34      	blt.n	801495e <enet_frame_transmit+0x76>
 80148f4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80148f8:	4299      	cmp	r1, r3
 80148fa:	d830      	bhi.n	801495e <enet_frame_transmit+0x76>
 80148fc:	b9e8      	cbnz	r0, 801493a <enet_frame_transmit+0x52>
 80148fe:	6813      	ldr	r3, [r2, #0]
 8014900:	4819      	ldr	r0, [pc, #100]	; (8014968 <enet_frame_transmit+0x80>)
 8014902:	6059      	str	r1, [r3, #4]
 8014904:	6819      	ldr	r1, [r3, #0]
 8014906:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 801490a:	6019      	str	r1, [r3, #0]
 801490c:	6941      	ldr	r1, [r0, #20]
 801490e:	6944      	ldr	r4, [r0, #20]
 8014910:	f001 0104 	and.w	r1, r1, #4
 8014914:	f004 0420 	and.w	r4, r4, #32
 8014918:	4321      	orrs	r1, r4
 801491a:	d110      	bne.n	801493e <enet_frame_transmit+0x56>
 801491c:	6819      	ldr	r1, [r3, #0]
 801491e:	02c8      	lsls	r0, r1, #11
 8014920:	d511      	bpl.n	8014946 <enet_frame_transmit+0x5e>
 8014922:	68db      	ldr	r3, [r3, #12]
 8014924:	2001      	movs	r0, #1
 8014926:	6013      	str	r3, [r2, #0]
 8014928:	bd30      	pop	{r4, r5, pc}
 801492a:	5cc5      	ldrb	r5, [r0, r3]
 801492c:	68a4      	ldr	r4, [r4, #8]
 801492e:	551d      	strb	r5, [r3, r4]
 8014930:	3301      	adds	r3, #1
 8014932:	428b      	cmp	r3, r1
 8014934:	6814      	ldr	r4, [r2, #0]
 8014936:	d1f8      	bne.n	801492a <enet_frame_transmit+0x42>
 8014938:	e7e1      	b.n	80148fe <enet_frame_transmit+0x16>
 801493a:	2300      	movs	r3, #0
 801493c:	e7f9      	b.n	8014932 <enet_frame_transmit+0x4a>
 801493e:	6141      	str	r1, [r0, #20]
 8014940:	2100      	movs	r1, #0
 8014942:	6041      	str	r1, [r0, #4]
 8014944:	e7ea      	b.n	801491c <enet_frame_transmit+0x34>
 8014946:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 801494a:	4907      	ldr	r1, [pc, #28]	; (8014968 <enet_frame_transmit+0x80>)
 801494c:	bf05      	ittet	eq
 801494e:	3310      	addeq	r3, #16
 8014950:	6809      	ldreq	r1, [r1, #0]
 8014952:	690b      	ldrne	r3, [r1, #16]
 8014954:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8014958:	bf08      	it	eq
 801495a:	185b      	addeq	r3, r3, r1
 801495c:	e7e2      	b.n	8014924 <enet_frame_transmit+0x3c>
 801495e:	2000      	movs	r0, #0
 8014960:	e7e2      	b.n	8014928 <enet_frame_transmit+0x40>
 8014962:	bf00      	nop
 8014964:	2000a260 	andcs	sl, r0, r0, ror #4
 8014968:	40029000 	andmi	r9, r2, r0

0801496c <enet_transmit_checksum_config>:
 801496c:	6803      	ldr	r3, [r0, #0]
 801496e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8014972:	430b      	orrs	r3, r1
 8014974:	6003      	str	r3, [r0, #0]
 8014976:	4770      	bx	lr

08014978 <enet_mac_address_set>:
 8014978:	888a      	ldrh	r2, [r1, #4]
 801497a:	4b03      	ldr	r3, [pc, #12]	; (8014988 <enet_mac_address_set+0x10>)
 801497c:	50c2      	str	r2, [r0, r3]
 801497e:	680a      	ldr	r2, [r1, #0]
 8014980:	3304      	adds	r3, #4
 8014982:	50c2      	str	r2, [r0, r3]
 8014984:	4770      	bx	lr
 8014986:	bf00      	nop
 8014988:	40028040 	andmi	r8, r2, r0, asr #32

0801498c <enet_rx_enable>:
 801498c:	4a05      	ldr	r2, [pc, #20]	; (80149a4 <enet_rx_enable+0x18>)
 801498e:	6813      	ldr	r3, [r2, #0]
 8014990:	f043 0304 	orr.w	r3, r3, #4
 8014994:	6013      	str	r3, [r2, #0]
 8014996:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801499a:	6993      	ldr	r3, [r2, #24]
 801499c:	f043 0302 	orr.w	r3, r3, #2
 80149a0:	6193      	str	r3, [r2, #24]
 80149a2:	4770      	bx	lr
 80149a4:	40028000 	andmi	r8, r2, r0

080149a8 <enet_phy_write_read>:
 80149a8:	b530      	push	{r4, r5, lr}
 80149aa:	4604      	mov	r4, r0
 80149ac:	4d13      	ldr	r5, [pc, #76]	; (80149fc <enet_phy_write_read+0x54>)
 80149ae:	0192      	lsls	r2, r2, #6
 80149b0:	6928      	ldr	r0, [r5, #16]
 80149b2:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80149b6:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 80149ba:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 80149be:	4302      	orrs	r2, r0
 80149c0:	02c9      	lsls	r1, r1, #11
 80149c2:	b289      	uxth	r1, r1
 80149c4:	2c02      	cmp	r4, #2
 80149c6:	ea42 0204 	orr.w	r2, r2, r4
 80149ca:	ea42 0201 	orr.w	r2, r2, r1
 80149ce:	bf08      	it	eq
 80149d0:	8819      	ldrheq	r1, [r3, #0]
 80149d2:	f042 0201 	orr.w	r2, r2, #1
 80149d6:	bf08      	it	eq
 80149d8:	6169      	streq	r1, [r5, #20]
 80149da:	612a      	str	r2, [r5, #16]
 80149dc:	4907      	ldr	r1, [pc, #28]	; (80149fc <enet_phy_write_read+0x54>)
 80149de:	4a08      	ldr	r2, [pc, #32]	; (8014a00 <enet_phy_write_read+0x58>)
 80149e0:	6908      	ldr	r0, [r1, #16]
 80149e2:	07c0      	lsls	r0, r0, #31
 80149e4:	d501      	bpl.n	80149ea <enet_phy_write_read+0x42>
 80149e6:	3a01      	subs	r2, #1
 80149e8:	d1fa      	bne.n	80149e0 <enet_phy_write_read+0x38>
 80149ea:	690a      	ldr	r2, [r1, #16]
 80149ec:	43d2      	mvns	r2, r2
 80149ee:	f002 0001 	and.w	r0, r2, #1
 80149f2:	b90c      	cbnz	r4, 80149f8 <enet_phy_write_read+0x50>
 80149f4:	694a      	ldr	r2, [r1, #20]
 80149f6:	801a      	strh	r2, [r3, #0]
 80149f8:	bd30      	pop	{r4, r5, pc}
 80149fa:	bf00      	nop
 80149fc:	40028000 	andmi	r8, r2, r0
 8014a00:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014a04 <enet_phy_config>:
 8014a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a06:	4d22      	ldr	r5, [pc, #136]	; (8014a90 <enet_phy_config+0x8c>)
 8014a08:	2001      	movs	r0, #1
 8014a0a:	692c      	ldr	r4, [r5, #16]
 8014a0c:	f7ff f80a 	bl	8013a24 <rcu_clock_freq_get>
 8014a10:	4b20      	ldr	r3, [pc, #128]	; (8014a94 <enet_phy_config+0x90>)
 8014a12:	4a21      	ldr	r2, [pc, #132]	; (8014a98 <enet_phy_config+0x94>)
 8014a14:	4403      	add	r3, r0
 8014a16:	4293      	cmp	r3, r2
 8014a18:	f024 041c 	bic.w	r4, r4, #28
 8014a1c:	d21f      	bcs.n	8014a5e <enet_phy_config+0x5a>
 8014a1e:	f044 0408 	orr.w	r4, r4, #8
 8014a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a26:	612c      	str	r4, [r5, #16]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014a2e:	2101      	movs	r1, #1
 8014a30:	2002      	movs	r0, #2
 8014a32:	f10d 0306 	add.w	r3, sp, #6
 8014a36:	f7ff ffb7 	bl	80149a8 <enet_phy_write_read>
 8014a3a:	b310      	cbz	r0, 8014a82 <enet_phy_config+0x7e>
 8014a3c:	2200      	movs	r2, #0
 8014a3e:	4817      	ldr	r0, [pc, #92]	; (8014a9c <enet_phy_config+0x98>)
 8014a40:	f7ff feaa 	bl	8014798 <enet_delay>
 8014a44:	2101      	movs	r1, #1
 8014a46:	4610      	mov	r0, r2
 8014a48:	f10d 0306 	add.w	r3, sp, #6
 8014a4c:	f7ff ffac 	bl	80149a8 <enet_phy_write_read>
 8014a50:	b1b8      	cbz	r0, 8014a82 <enet_phy_config+0x7e>
 8014a52:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014a56:	43c0      	mvns	r0, r0
 8014a58:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8014a5c:	e012      	b.n	8014a84 <enet_phy_config+0x80>
 8014a5e:	4b10      	ldr	r3, [pc, #64]	; (8014aa0 <enet_phy_config+0x9c>)
 8014a60:	4a10      	ldr	r2, [pc, #64]	; (8014aa4 <enet_phy_config+0xa0>)
 8014a62:	4403      	add	r3, r0
 8014a64:	4293      	cmp	r3, r2
 8014a66:	d802      	bhi.n	8014a6e <enet_phy_config+0x6a>
 8014a68:	f044 040c 	orr.w	r4, r4, #12
 8014a6c:	e7d9      	b.n	8014a22 <enet_phy_config+0x1e>
 8014a6e:	4b0e      	ldr	r3, [pc, #56]	; (8014aa8 <enet_phy_config+0xa4>)
 8014a70:	4a0e      	ldr	r2, [pc, #56]	; (8014aac <enet_phy_config+0xa8>)
 8014a72:	4403      	add	r3, r0
 8014a74:	4293      	cmp	r3, r2
 8014a76:	d9d4      	bls.n	8014a22 <enet_phy_config+0x1e>
 8014a78:	4b0d      	ldr	r3, [pc, #52]	; (8014ab0 <enet_phy_config+0xac>)
 8014a7a:	4a0e      	ldr	r2, [pc, #56]	; (8014ab4 <enet_phy_config+0xb0>)
 8014a7c:	4403      	add	r3, r0
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d902      	bls.n	8014a88 <enet_phy_config+0x84>
 8014a82:	2000      	movs	r0, #0
 8014a84:	b003      	add	sp, #12
 8014a86:	bd30      	pop	{r4, r5, pc}
 8014a88:	f044 0404 	orr.w	r4, r4, #4
 8014a8c:	e7c9      	b.n	8014a22 <enet_phy_config+0x1e>
 8014a8e:	bf00      	nop
 8014a90:	40028000 	andmi	r8, r2, r0
 8014a94:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8014a98:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8014a9c:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8014aa0:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8014aa4:	017d783f 	cmneq	sp, pc, lsr r8
 8014aa8:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8014aac:	01c9c37f 	biceq	ip, r9, pc, ror r3
 8014ab0:	faa2b580 	blx	68c20b8 <__stack_size+0x68c00b8>
 8014ab4:	0112a880 	tsteq	r2, r0, lsl #17

08014ab8 <enet_init>:
 8014ab8:	2300      	movs	r3, #0
 8014aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014abc:	4604      	mov	r4, r0
 8014abe:	460d      	mov	r5, r1
 8014ac0:	4616      	mov	r6, r2
 8014ac2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014ac6:	f7ff ff9d 	bl	8014a04 <enet_phy_config>
 8014aca:	2800      	cmp	r0, #0
 8014acc:	d037      	beq.n	8014b3e <enet_init+0x86>
 8014ace:	4b3b      	ldr	r3, [pc, #236]	; (8014bbc <enet_init+0x104>)
 8014ad0:	4a3b      	ldr	r2, [pc, #236]	; (8014bc0 <enet_init+0x108>)
 8014ad2:	6819      	ldr	r1, [r3, #0]
 8014ad4:	2c01      	cmp	r4, #1
 8014ad6:	ea02 0201 	and.w	r2, r2, r1
 8014ada:	601a      	str	r2, [r3, #0]
 8014adc:	f04f 0200 	mov.w	r2, #0
 8014ae0:	605a      	str	r2, [r3, #4]
 8014ae2:	609a      	str	r2, [r3, #8]
 8014ae4:	60da      	str	r2, [r3, #12]
 8014ae6:	6999      	ldr	r1, [r3, #24]
 8014ae8:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8014aec:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8014af0:	ea4f 4111 	mov.w	r1, r1, lsr #16
 8014af4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8014af8:	6199      	str	r1, [r3, #24]
 8014afa:	4932      	ldr	r1, [pc, #200]	; (8014bc4 <enet_init+0x10c>)
 8014afc:	61da      	str	r2, [r3, #28]
 8014afe:	6988      	ldr	r0, [r1, #24]
 8014b00:	4b31      	ldr	r3, [pc, #196]	; (8014bc8 <enet_init+0x110>)
 8014b02:	ea03 0300 	and.w	r3, r3, r0
 8014b06:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8014b0a:	618b      	str	r3, [r1, #24]
 8014b0c:	680b      	ldr	r3, [r1, #0]
 8014b0e:	4b2f      	ldr	r3, [pc, #188]	; (8014bcc <enet_init+0x114>)
 8014b10:	600b      	str	r3, [r1, #0]
 8014b12:	d01e      	beq.n	8014b52 <enet_init+0x9a>
 8014b14:	08e3      	lsrs	r3, r4, #3
 8014b16:	0861      	lsrs	r1, r4, #1
 8014b18:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8014b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b20:	430b      	orrs	r3, r1
 8014b22:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014b26:	2101      	movs	r1, #1
 8014b28:	2002      	movs	r0, #2
 8014b2a:	f10d 0306 	add.w	r3, sp, #6
 8014b2e:	f7ff ff3b 	bl	80149a8 <enet_phy_write_read>
 8014b32:	b158      	cbz	r0, 8014b4c <enet_init+0x94>
 8014b34:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014b38:	f7ff fe2e 	bl	8014798 <enet_delay>
 8014b3c:	e05d      	b.n	8014bfa <enet_init+0x142>
 8014b3e:	4824      	ldr	r0, [pc, #144]	; (8014bd0 <enet_init+0x118>)
 8014b40:	f7ff fe2a 	bl	8014798 <enet_delay>
 8014b44:	f7ff ff5e 	bl	8014a04 <enet_phy_config>
 8014b48:	2800      	cmp	r0, #0
 8014b4a:	d1c0      	bne.n	8014ace <enet_init+0x16>
 8014b4c:	2000      	movs	r0, #0
 8014b4e:	b003      	add	sp, #12
 8014b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b52:	4614      	mov	r4, r2
 8014b54:	4f1f      	ldr	r7, [pc, #124]	; (8014bd4 <enet_init+0x11c>)
 8014b56:	2201      	movs	r2, #1
 8014b58:	2000      	movs	r0, #0
 8014b5a:	4611      	mov	r1, r2
 8014b5c:	f10d 0306 	add.w	r3, sp, #6
 8014b60:	f7ff ff22 	bl	80149a8 <enet_phy_write_read>
 8014b64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014b68:	3401      	adds	r4, #1
 8014b6a:	f002 0204 	and.w	r2, r2, #4
 8014b6e:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014b72:	b912      	cbnz	r2, 8014b7a <enet_init+0xc2>
 8014b74:	42bc      	cmp	r4, r7
 8014b76:	d1ee      	bne.n	8014b56 <enet_init+0x9e>
 8014b78:	e7e8      	b.n	8014b4c <enet_init+0x94>
 8014b7a:	42bc      	cmp	r4, r7
 8014b7c:	d0e6      	beq.n	8014b4c <enet_init+0x94>
 8014b7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014b82:	2101      	movs	r1, #1
 8014b84:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014b88:	2002      	movs	r0, #2
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	f7ff ff0c 	bl	80149a8 <enet_phy_write_read>
 8014b90:	2800      	cmp	r0, #0
 8014b92:	d0db      	beq.n	8014b4c <enet_init+0x94>
 8014b94:	2400      	movs	r4, #0
 8014b96:	4f0f      	ldr	r7, [pc, #60]	; (8014bd4 <enet_init+0x11c>)
 8014b98:	2201      	movs	r2, #1
 8014b9a:	2000      	movs	r0, #0
 8014b9c:	4611      	mov	r1, r2
 8014b9e:	f10d 0306 	add.w	r3, sp, #6
 8014ba2:	f7ff ff01 	bl	80149a8 <enet_phy_write_read>
 8014ba6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014baa:	3401      	adds	r4, #1
 8014bac:	f002 0220 	and.w	r2, r2, #32
 8014bb0:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014bb4:	b982      	cbnz	r2, 8014bd8 <enet_init+0x120>
 8014bb6:	42bc      	cmp	r4, r7
 8014bb8:	d1ee      	bne.n	8014b98 <enet_init+0xe0>
 8014bba:	e7c7      	b.n	8014b4c <enet_init+0x94>
 8014bbc:	40028000 	andmi	r8, r2, r0
 8014bc0:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 8014bc4:	40029000 	andmi	r9, r2, r0
 8014bc8:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 8014bcc:	02c16000 	sbceq	r6, r1, #0
 8014bd0:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 8014bd4:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 8014bd8:	42bc      	cmp	r4, r7
 8014bda:	d0b7      	beq.n	8014b4c <enet_init+0x94>
 8014bdc:	2101      	movs	r1, #1
 8014bde:	2210      	movs	r2, #16
 8014be0:	2000      	movs	r0, #0
 8014be2:	f7ff fee1 	bl	80149a8 <enet_phy_write_read>
 8014be6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014bea:	f3c3 0480 	ubfx	r4, r3, #2, #1
 8014bee:	0799      	lsls	r1, r3, #30
 8014bf0:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8014bf4:	d401      	bmi.n	8014bfa <enet_init+0x142>
 8014bf6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8014bfa:	4b63      	ldr	r3, [pc, #396]	; (8014d88 <enet_init+0x2d0>)
 8014bfc:	681a      	ldr	r2, [r3, #0]
 8014bfe:	f422 42b0 	bic.w	r2, r2, #22528	; 0x5800
 8014c02:	4314      	orrs	r4, r2
 8014c04:	056a      	lsls	r2, r5, #21
 8014c06:	601c      	str	r4, [r3, #0]
 8014c08:	d50b      	bpl.n	8014c22 <enet_init+0x16a>
 8014c0a:	681a      	ldr	r2, [r3, #0]
 8014c0c:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8014c10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014c14:	601a      	str	r2, [r3, #0]
 8014c16:	4a5d      	ldr	r2, [pc, #372]	; (8014d8c <enet_init+0x2d4>)
 8014c18:	6993      	ldr	r3, [r2, #24]
 8014c1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8014c1e:	431d      	orrs	r5, r3
 8014c20:	6195      	str	r5, [r2, #24]
 8014c22:	4959      	ldr	r1, [pc, #356]	; (8014d88 <enet_init+0x2d0>)
 8014c24:	684b      	ldr	r3, [r1, #4]
 8014c26:	431e      	orrs	r6, r3
 8014c28:	4b59      	ldr	r3, [pc, #356]	; (8014d90 <enet_init+0x2d8>)
 8014c2a:	604e      	str	r6, [r1, #4]
 8014c2c:	681a      	ldr	r2, [r3, #0]
 8014c2e:	07d7      	lsls	r7, r2, #31
 8014c30:	d510      	bpl.n	8014c54 <enet_init+0x19c>
 8014c32:	685a      	ldr	r2, [r3, #4]
 8014c34:	680c      	ldr	r4, [r1, #0]
 8014c36:	f002 0080 	and.w	r0, r2, #128	; 0x80
 8014c3a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8014c3e:	4320      	orrs	r0, r4
 8014c40:	6008      	str	r0, [r1, #0]
 8014c42:	4852      	ldr	r0, [pc, #328]	; (8014d8c <enet_init+0x2d4>)
 8014c44:	0892      	lsrs	r2, r2, #2
 8014c46:	6981      	ldr	r1, [r0, #24]
 8014c48:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8014c4c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8014c50:	430a      	orrs	r2, r1
 8014c52:	6182      	str	r2, [r0, #24]
 8014c54:	681a      	ldr	r2, [r3, #0]
 8014c56:	0796      	lsls	r6, r2, #30
 8014c58:	d508      	bpl.n	8014c6c <enet_init+0x1b4>
 8014c5a:	494c      	ldr	r1, [pc, #304]	; (8014d8c <enet_init+0x2d4>)
 8014c5c:	6898      	ldr	r0, [r3, #8]
 8014c5e:	680a      	ldr	r2, [r1, #0]
 8014c60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8014c64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8014c68:	4302      	orrs	r2, r0
 8014c6a:	600a      	str	r2, [r1, #0]
 8014c6c:	681a      	ldr	r2, [r3, #0]
 8014c6e:	0755      	lsls	r5, r2, #29
 8014c70:	d508      	bpl.n	8014c84 <enet_init+0x1cc>
 8014c72:	4946      	ldr	r1, [pc, #280]	; (8014d8c <enet_init+0x2d4>)
 8014c74:	68d8      	ldr	r0, [r3, #12]
 8014c76:	680a      	ldr	r2, [r1, #0]
 8014c78:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8014c7c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8014c80:	4302      	orrs	r2, r0
 8014c82:	600a      	str	r2, [r1, #0]
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	0714      	lsls	r4, r2, #28
 8014c88:	d508      	bpl.n	8014c9c <enet_init+0x1e4>
 8014c8a:	4940      	ldr	r1, [pc, #256]	; (8014d8c <enet_init+0x2d4>)
 8014c8c:	6918      	ldr	r0, [r3, #16]
 8014c8e:	680a      	ldr	r2, [r1, #0]
 8014c90:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8014c94:	f022 0202 	bic.w	r2, r2, #2
 8014c98:	4302      	orrs	r2, r0
 8014c9a:	600a      	str	r2, [r1, #0]
 8014c9c:	681a      	ldr	r2, [r3, #0]
 8014c9e:	06d0      	lsls	r0, r2, #27
 8014ca0:	d506      	bpl.n	8014cb0 <enet_init+0x1f8>
 8014ca2:	493a      	ldr	r1, [pc, #232]	; (8014d8c <enet_init+0x2d4>)
 8014ca4:	4a3b      	ldr	r2, [pc, #236]	; (8014d94 <enet_init+0x2dc>)
 8014ca6:	6988      	ldr	r0, [r1, #24]
 8014ca8:	4002      	ands	r2, r0
 8014caa:	6958      	ldr	r0, [r3, #20]
 8014cac:	4302      	orrs	r2, r0
 8014cae:	618a      	str	r2, [r1, #24]
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	0691      	lsls	r1, r2, #26
 8014cb4:	d508      	bpl.n	8014cc8 <enet_init+0x210>
 8014cb6:	4935      	ldr	r1, [pc, #212]	; (8014d8c <enet_init+0x2d4>)
 8014cb8:	6998      	ldr	r0, [r3, #24]
 8014cba:	698a      	ldr	r2, [r1, #24]
 8014cbc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8014cc0:	f022 0204 	bic.w	r2, r2, #4
 8014cc4:	4302      	orrs	r2, r0
 8014cc6:	618a      	str	r2, [r1, #24]
 8014cc8:	681a      	ldr	r2, [r3, #0]
 8014cca:	0652      	lsls	r2, r2, #25
 8014ccc:	d506      	bpl.n	8014cdc <enet_init+0x224>
 8014cce:	492e      	ldr	r1, [pc, #184]	; (8014d88 <enet_init+0x2d0>)
 8014cd0:	69d8      	ldr	r0, [r3, #28]
 8014cd2:	69ca      	ldr	r2, [r1, #28]
 8014cd4:	0c52      	lsrs	r2, r2, #17
 8014cd6:	0452      	lsls	r2, r2, #17
 8014cd8:	4302      	orrs	r2, r0
 8014cda:	61ca      	str	r2, [r1, #28]
 8014cdc:	681a      	ldr	r2, [r3, #0]
 8014cde:	0617      	lsls	r7, r2, #24
 8014ce0:	d517      	bpl.n	8014d12 <enet_init+0x25a>
 8014ce2:	4c29      	ldr	r4, [pc, #164]	; (8014d88 <enet_init+0x2d0>)
 8014ce4:	6a1a      	ldr	r2, [r3, #32]
 8014ce6:	69a0      	ldr	r0, [r4, #24]
 8014ce8:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8014cec:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 8014cf0:	0400      	lsls	r0, r0, #16
 8014cf2:	0c00      	lsrs	r0, r0, #16
 8014cf4:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8014cf8:	4301      	orrs	r1, r0
 8014cfa:	4824      	ldr	r0, [pc, #144]	; (8014d8c <enet_init+0x2d4>)
 8014cfc:	61a1      	str	r1, [r4, #24]
 8014cfe:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8014d02:	0a12      	lsrs	r2, r2, #8
 8014d04:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 8014d08:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8014d0c:	430a      	orrs	r2, r1
 8014d0e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8014d12:	681a      	ldr	r2, [r3, #0]
 8014d14:	05d6      	lsls	r6, r2, #23
 8014d16:	bf42      	ittt	mi
 8014d18:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 8014d1a:	4a1b      	ldrmi	r2, [pc, #108]	; (8014d88 <enet_init+0x2d0>)
 8014d1c:	6091      	strmi	r1, [r2, #8]
 8014d1e:	681a      	ldr	r2, [r3, #0]
 8014d20:	0595      	lsls	r5, r2, #22
 8014d22:	bf42      	ittt	mi
 8014d24:	4a18      	ldrmi	r2, [pc, #96]	; (8014d88 <enet_init+0x2d0>)
 8014d26:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 8014d28:	60d1      	strmi	r1, [r2, #12]
 8014d2a:	681a      	ldr	r2, [r3, #0]
 8014d2c:	0554      	lsls	r4, r2, #21
 8014d2e:	d508      	bpl.n	8014d42 <enet_init+0x28a>
 8014d30:	4915      	ldr	r1, [pc, #84]	; (8014d88 <enet_init+0x2d0>)
 8014d32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8014d34:	684a      	ldr	r2, [r1, #4]
 8014d36:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 8014d3a:	f022 0206 	bic.w	r2, r2, #6
 8014d3e:	4302      	orrs	r2, r0
 8014d40:	604a      	str	r2, [r1, #4]
 8014d42:	681a      	ldr	r2, [r3, #0]
 8014d44:	0510      	lsls	r0, r2, #20
 8014d46:	d508      	bpl.n	8014d5a <enet_init+0x2a2>
 8014d48:	490f      	ldr	r1, [pc, #60]	; (8014d88 <enet_init+0x2d0>)
 8014d4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014d4c:	680a      	ldr	r2, [r1, #0]
 8014d4e:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8014d52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8014d56:	4302      	orrs	r2, r0
 8014d58:	600a      	str	r2, [r1, #0]
 8014d5a:	681a      	ldr	r2, [r3, #0]
 8014d5c:	04d1      	lsls	r1, r2, #19
 8014d5e:	d506      	bpl.n	8014d6e <enet_init+0x2b6>
 8014d60:	4909      	ldr	r1, [pc, #36]	; (8014d88 <enet_init+0x2d0>)
 8014d62:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014d64:	680a      	ldr	r2, [r1, #0]
 8014d66:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8014d6a:	4302      	orrs	r2, r0
 8014d6c:	600a      	str	r2, [r1, #0]
 8014d6e:	681a      	ldr	r2, [r3, #0]
 8014d70:	0492      	lsls	r2, r2, #18
 8014d72:	d506      	bpl.n	8014d82 <enet_init+0x2ca>
 8014d74:	4904      	ldr	r1, [pc, #16]	; (8014d88 <enet_init+0x2d0>)
 8014d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d78:	680a      	ldr	r2, [r1, #0]
 8014d7a:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8014d7e:	4313      	orrs	r3, r2
 8014d80:	600b      	str	r3, [r1, #0]
 8014d82:	2001      	movs	r0, #1
 8014d84:	e6e3      	b.n	8014b4e <enet_init+0x96>
 8014d86:	bf00      	nop
 8014d88:	40028000 	andmi	r8, r2, r0
 8014d8c:	40029000 	andmi	r9, r2, r0
 8014d90:	2000a264 	andcs	sl, r0, r4, ror #4
 8014d94:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

08014d98 <enet_txfifo_flush>:
 8014d98:	4b06      	ldr	r3, [pc, #24]	; (8014db4 <enet_txfifo_flush+0x1c>)
 8014d9a:	4807      	ldr	r0, [pc, #28]	; (8014db8 <enet_txfifo_flush+0x20>)
 8014d9c:	699a      	ldr	r2, [r3, #24]
 8014d9e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014da2:	619a      	str	r2, [r3, #24]
 8014da4:	699a      	ldr	r2, [r3, #24]
 8014da6:	02d2      	lsls	r2, r2, #11
 8014da8:	d502      	bpl.n	8014db0 <enet_txfifo_flush+0x18>
 8014daa:	3801      	subs	r0, #1
 8014dac:	d1fa      	bne.n	8014da4 <enet_txfifo_flush+0xc>
 8014dae:	4770      	bx	lr
 8014db0:	2001      	movs	r0, #1
 8014db2:	4770      	bx	lr
 8014db4:	40029000 	andmi	r9, r2, r0
 8014db8:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

08014dbc <enet_tx_enable>:
 8014dbc:	4a06      	ldr	r2, [pc, #24]	; (8014dd8 <enet_tx_enable+0x1c>)
 8014dbe:	b508      	push	{r3, lr}
 8014dc0:	6813      	ldr	r3, [r2, #0]
 8014dc2:	f043 0308 	orr.w	r3, r3, #8
 8014dc6:	6013      	str	r3, [r2, #0]
 8014dc8:	f7ff ffe6 	bl	8014d98 <enet_txfifo_flush>
 8014dcc:	4a03      	ldr	r2, [pc, #12]	; (8014ddc <enet_tx_enable+0x20>)
 8014dce:	6993      	ldr	r3, [r2, #24]
 8014dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014dd4:	6193      	str	r3, [r2, #24]
 8014dd6:	bd08      	pop	{r3, pc}
 8014dd8:	40028000 	andmi	r8, r2, r0
 8014ddc:	40029000 	andmi	r9, r2, r0

08014de0 <enet_enable>:
 8014de0:	b508      	push	{r3, lr}
 8014de2:	f7ff ffeb 	bl	8014dbc <enet_tx_enable>
 8014de6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014dea:	f7ff bdcf 	b.w	801498c <enet_rx_enable>

08014dee <enet_desc_information_get>:
 8014dee:	2905      	cmp	r1, #5
 8014df0:	d817      	bhi.n	8014e22 <enet_desc_information_get+0x34>
 8014df2:	e8df f001 	tbb	[pc, r1]
 8014df6:	03091012 	movweq	r1, #36882	; 0x9012
 8014dfa:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 8014dfe:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8014e02:	4770      	bx	lr
 8014e04:	88c0      	ldrh	r0, [r0, #6]
 8014e06:	e7fa      	b.n	8014dfe <enet_desc_information_get+0x10>
 8014e08:	8840      	ldrh	r0, [r0, #2]
 8014e0a:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8014e0e:	2804      	cmp	r0, #4
 8014e10:	d90a      	bls.n	8014e28 <enet_desc_information_get+0x3a>
 8014e12:	3804      	subs	r0, #4
 8014e14:	4770      	bx	lr
 8014e16:	6880      	ldr	r0, [r0, #8]
 8014e18:	4770      	bx	lr
 8014e1a:	6800      	ldr	r0, [r0, #0]
 8014e1c:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8014e20:	4770      	bx	lr
 8014e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e26:	4770      	bx	lr
 8014e28:	2000      	movs	r0, #0
 8014e2a:	4770      	bx	lr

08014e2c <enet_rxframe_drop>:
 8014e2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014e30:	4814      	ldr	r0, [pc, #80]	; (8014e84 <enet_rxframe_drop+0x58>)
 8014e32:	b510      	push	{r4, lr}
 8014e34:	6802      	ldr	r2, [r0, #0]
 8014e36:	4914      	ldr	r1, [pc, #80]	; (8014e88 <enet_rxframe_drop+0x5c>)
 8014e38:	6854      	ldr	r4, [r2, #4]
 8014e3a:	6013      	str	r3, [r2, #0]
 8014e3c:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8014e40:	680b      	ldr	r3, [r1, #0]
 8014e42:	d009      	beq.n	8014e58 <enet_rxframe_drop+0x2c>
 8014e44:	b12b      	cbz	r3, 8014e52 <enet_rxframe_drop+0x26>
 8014e46:	68da      	ldr	r2, [r3, #12]
 8014e48:	6002      	str	r2, [r0, #0]
 8014e4a:	681a      	ldr	r2, [r3, #0]
 8014e4c:	b1ba      	cbz	r2, 8014e7e <enet_rxframe_drop+0x52>
 8014e4e:	600a      	str	r2, [r1, #0]
 8014e50:	bd10      	pop	{r4, pc}
 8014e52:	68d3      	ldr	r3, [r2, #12]
 8014e54:	6003      	str	r3, [r0, #0]
 8014e56:	e7fb      	b.n	8014e50 <enet_rxframe_drop+0x24>
 8014e58:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8014e5c:	4c0b      	ldr	r4, [pc, #44]	; (8014e8c <enet_rxframe_drop+0x60>)
 8014e5e:	d006      	beq.n	8014e6e <enet_rxframe_drop+0x42>
 8014e60:	68e2      	ldr	r2, [r4, #12]
 8014e62:	6002      	str	r2, [r0, #0]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d0f3      	beq.n	8014e50 <enet_rxframe_drop+0x24>
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	600b      	str	r3, [r1, #0]
 8014e6c:	e7f0      	b.n	8014e50 <enet_rxframe_drop+0x24>
 8014e6e:	6824      	ldr	r4, [r4, #0]
 8014e70:	3210      	adds	r2, #16
 8014e72:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8014e76:	4422      	add	r2, r4
 8014e78:	6002      	str	r2, [r0, #0]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d0e8      	beq.n	8014e50 <enet_rxframe_drop+0x24>
 8014e7e:	3310      	adds	r3, #16
 8014e80:	e7f3      	b.n	8014e6a <enet_rxframe_drop+0x3e>
 8014e82:	bf00      	nop
 8014e84:	2000a25c 	andcs	sl, r0, ip, asr r2
 8014e88:	2000a254 	andcs	sl, r0, r4, asr r2
 8014e8c:	40029000 	andmi	r9, r2, r0

08014e90 <enet_rxframe_size_get>:
 8014e90:	b508      	push	{r3, lr}
 8014e92:	4b0c      	ldr	r3, [pc, #48]	; (8014ec4 <enet_rxframe_size_get+0x34>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	6818      	ldr	r0, [r3, #0]
 8014e98:	2800      	cmp	r0, #0
 8014e9a:	db10      	blt.n	8014ebe <enet_rxframe_size_get+0x2e>
 8014e9c:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8014ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014ea4:	d003      	beq.n	8014eae <enet_rxframe_size_get+0x1e>
 8014ea6:	f7ff ffc1 	bl	8014e2c <enet_rxframe_drop>
 8014eaa:	2001      	movs	r0, #1
 8014eac:	bd08      	pop	{r3, pc}
 8014eae:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8014eb2:	2b21      	cmp	r3, #33	; 0x21
 8014eb4:	d0f7      	beq.n	8014ea6 <enet_rxframe_size_get+0x16>
 8014eb6:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8014eba:	3804      	subs	r0, #4
 8014ebc:	e7f6      	b.n	8014eac <enet_rxframe_size_get+0x1c>
 8014ebe:	2000      	movs	r0, #0
 8014ec0:	e7f4      	b.n	8014eac <enet_rxframe_size_get+0x1c>
 8014ec2:	bf00      	nop
 8014ec4:	2000a25c 	andcs	sl, r0, ip, asr r2

08014ec8 <enet_initpara_reset>:
 8014ec8:	2200      	movs	r2, #0
 8014eca:	4b08      	ldr	r3, [pc, #32]	; (8014eec <enet_initpara_reset+0x24>)
 8014ecc:	e9c3 2200 	strd	r2, r2, [r3]
 8014ed0:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8014ed4:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8014ed8:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8014edc:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8014ee0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8014ee4:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8014ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8014eea:	4770      	bx	lr
 8014eec:	2000a264 	andcs	sl, r0, r4, ror #4

08014ef0 <enet_deinit>:
 8014ef0:	b508      	push	{r3, lr}
 8014ef2:	f640 200e 	movw	r0, #2574	; 0xa0e
 8014ef6:	f7fe fcea 	bl	80138ce <rcu_periph_reset_enable>
 8014efa:	f640 200e 	movw	r0, #2574	; 0xa0e
 8014efe:	f7fe fce8 	bl	80138d2 <rcu_periph_reset_disable>
 8014f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014f06:	f7ff bfdf 	b.w	8014ec8 <enet_initpara_reset>
	...

08014f0c <i2c_clock_config>:
 8014f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f0e:	4605      	mov	r5, r0
 8014f10:	2002      	movs	r0, #2
 8014f12:	460c      	mov	r4, r1
 8014f14:	4617      	mov	r7, r2
 8014f16:	f7fe fd85 	bl	8013a24 <rcu_clock_freq_get>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	4828      	ldr	r0, [pc, #160]	; (8014fc0 <i2c_clock_config+0xb4>)
 8014f1e:	4a29      	ldr	r2, [pc, #164]	; (8014fc4 <i2c_clock_config+0xb8>)
 8014f20:	fbb3 f0f0 	udiv	r0, r3, r0
 8014f24:	4293      	cmp	r3, r2
 8014f26:	bf34      	ite	cc
 8014f28:	4601      	movcc	r1, r0
 8014f2a:	2136      	movcs	r1, #54	; 0x36
 8014f2c:	686e      	ldr	r6, [r5, #4]
 8014f2e:	4a26      	ldr	r2, [pc, #152]	; (8014fc8 <i2c_clock_config+0xbc>)
 8014f30:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8014f34:	430e      	orrs	r6, r1
 8014f36:	4294      	cmp	r4, r2
 8014f38:	606e      	str	r6, [r5, #4]
 8014f3a:	d816      	bhi.n	8014f6a <i2c_clock_config+0x5e>
 8014f3c:	3001      	adds	r0, #1
 8014f3e:	2835      	cmp	r0, #53	; 0x35
 8014f40:	d90d      	bls.n	8014f5e <i2c_clock_config+0x52>
 8014f42:	2236      	movs	r2, #54	; 0x36
 8014f44:	622a      	str	r2, [r5, #32]
 8014f46:	0064      	lsls	r4, r4, #1
 8014f48:	fbb3 f4f4 	udiv	r4, r3, r4
 8014f4c:	2c04      	cmp	r4, #4
 8014f4e:	bf38      	it	cc
 8014f50:	2404      	movcc	r4, #4
 8014f52:	69ea      	ldr	r2, [r5, #28]
 8014f54:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8014f58:	4314      	orrs	r4, r2
 8014f5a:	61ec      	str	r4, [r5, #28]
 8014f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f5e:	2802      	cmp	r0, #2
 8014f60:	d801      	bhi.n	8014f66 <i2c_clock_config+0x5a>
 8014f62:	2202      	movs	r2, #2
 8014f64:	e7ee      	b.n	8014f44 <i2c_clock_config+0x38>
 8014f66:	6228      	str	r0, [r5, #32]
 8014f68:	e7ed      	b.n	8014f46 <i2c_clock_config+0x3a>
 8014f6a:	4a18      	ldr	r2, [pc, #96]	; (8014fcc <i2c_clock_config+0xc0>)
 8014f6c:	4294      	cmp	r4, r2
 8014f6e:	d8f5      	bhi.n	8014f5c <i2c_clock_config+0x50>
 8014f70:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014f74:	4351      	muls	r1, r2
 8014f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014f7a:	fbb1 f1f2 	udiv	r1, r1, r2
 8014f7e:	3101      	adds	r1, #1
 8014f80:	6229      	str	r1, [r5, #32]
 8014f82:	b9a7      	cbnz	r7, 8014fae <i2c_clock_config+0xa2>
 8014f84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014f88:	fbb3 f4f4 	udiv	r4, r3, r4
 8014f8c:	69eb      	ldr	r3, [r5, #28]
 8014f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014f92:	61eb      	str	r3, [r5, #28]
 8014f94:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8014f98:	b90b      	cbnz	r3, 8014f9e <i2c_clock_config+0x92>
 8014f9a:	f044 0401 	orr.w	r4, r4, #1
 8014f9e:	69eb      	ldr	r3, [r5, #28]
 8014fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014fa4:	61eb      	str	r3, [r5, #28]
 8014fa6:	69eb      	ldr	r3, [r5, #28]
 8014fa8:	4323      	orrs	r3, r4
 8014faa:	61eb      	str	r3, [r5, #28]
 8014fac:	e7d6      	b.n	8014f5c <i2c_clock_config+0x50>
 8014fae:	2219      	movs	r2, #25
 8014fb0:	4354      	muls	r4, r2
 8014fb2:	fbb3 f4f4 	udiv	r4, r3, r4
 8014fb6:	69eb      	ldr	r3, [r5, #28]
 8014fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014fbc:	e7e9      	b.n	8014f92 <i2c_clock_config+0x86>
 8014fbe:	bf00      	nop
 8014fc0:	000f4240 	andeq	r4, pc, r0, asr #4
 8014fc4:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8014fc8:	000186a0 	andeq	r8, r1, r0, lsr #13
 8014fcc:	00061a80 	andeq	r1, r6, r0, lsl #21

08014fd0 <i2c_ack_config>:
 8014fd0:	6803      	ldr	r3, [r0, #0]
 8014fd2:	2901      	cmp	r1, #1
 8014fd4:	bf0c      	ite	eq
 8014fd6:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8014fda:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8014fde:	6003      	str	r3, [r0, #0]
 8014fe0:	4770      	bx	lr

08014fe2 <i2c_ackpos_config>:
 8014fe2:	6803      	ldr	r3, [r0, #0]
 8014fe4:	b919      	cbnz	r1, 8014fee <i2c_ackpos_config+0xc>
 8014fe6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014fea:	6003      	str	r3, [r0, #0]
 8014fec:	4770      	bx	lr
 8014fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014ff2:	e7fa      	b.n	8014fea <i2c_ackpos_config+0x8>

08014ff4 <i2c_master_addressing>:
 8014ff4:	3202      	adds	r2, #2
 8014ff6:	bf0c      	ite	eq
 8014ff8:	f021 0101 	biceq.w	r1, r1, #1
 8014ffc:	f041 0101 	orrne.w	r1, r1, #1
 8015000:	6101      	str	r1, [r0, #16]
 8015002:	4770      	bx	lr

08015004 <i2c_enable>:
 8015004:	6803      	ldr	r3, [r0, #0]
 8015006:	f043 0301 	orr.w	r3, r3, #1
 801500a:	6003      	str	r3, [r0, #0]
 801500c:	4770      	bx	lr

0801500e <i2c_start_on_bus>:
 801500e:	6803      	ldr	r3, [r0, #0]
 8015010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015014:	6003      	str	r3, [r0, #0]
 8015016:	4770      	bx	lr

08015018 <i2c_stop_on_bus>:
 8015018:	6803      	ldr	r3, [r0, #0]
 801501a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801501e:	6003      	str	r3, [r0, #0]
 8015020:	4770      	bx	lr

08015022 <i2c_data_transmit>:
 8015022:	6101      	str	r1, [r0, #16]
 8015024:	4770      	bx	lr

08015026 <i2c_data_receive>:
 8015026:	6900      	ldr	r0, [r0, #16]
 8015028:	b2c0      	uxtb	r0, r0
 801502a:	4770      	bx	lr

0801502c <i2c_flag_get>:
 801502c:	098b      	lsrs	r3, r1, #6
 801502e:	581a      	ldr	r2, [r3, r0]
 8015030:	2301      	movs	r3, #1
 8015032:	f001 011f 	and.w	r1, r1, #31
 8015036:	408b      	lsls	r3, r1
 8015038:	4213      	tst	r3, r2
 801503a:	bf14      	ite	ne
 801503c:	2001      	movne	r0, #1
 801503e:	2000      	moveq	r0, #0
 8015040:	4770      	bx	lr

08015042 <i2c_flag_clear>:
 8015042:	f240 5301 	movw	r3, #1281	; 0x501
 8015046:	4299      	cmp	r1, r3
 8015048:	b510      	push	{r4, lr}
 801504a:	d102      	bne.n	8015052 <i2c_flag_clear+0x10>
 801504c:	6943      	ldr	r3, [r0, #20]
 801504e:	6983      	ldr	r3, [r0, #24]
 8015050:	bd10      	pop	{r4, pc}
 8015052:	2201      	movs	r2, #1
 8015054:	098c      	lsrs	r4, r1, #6
 8015056:	5823      	ldr	r3, [r4, r0]
 8015058:	f001 011f 	and.w	r1, r1, #31
 801505c:	408a      	lsls	r2, r1
 801505e:	ea23 0302 	bic.w	r3, r3, r2
 8015062:	5023      	str	r3, [r4, r0]
 8015064:	e7f4      	b.n	8015050 <i2c_flag_clear+0xe>
	...

08015068 <mac_address_get(unsigned char*)>:
 8015068:	2102      	movs	r1, #2
 801506a:	4a07      	ldr	r2, [pc, #28]	; (8015088 <mac_address_get(unsigned char*)+0x20>)
 801506c:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 8015070:	f8d2 27ec 	ldr.w	r2, [r2, #2028]	; 0x7ec
 8015074:	7001      	strb	r1, [r0, #0]
 8015076:	7042      	strb	r2, [r0, #1]
 8015078:	0e1a      	lsrs	r2, r3, #24
 801507a:	7082      	strb	r2, [r0, #2]
 801507c:	0c1a      	lsrs	r2, r3, #16
 801507e:	70c2      	strb	r2, [r0, #3]
 8015080:	0a1a      	lsrs	r2, r3, #8
 8015082:	7102      	strb	r2, [r0, #4]
 8015084:	7143      	strb	r3, [r0, #5]
 8015086:	4770      	bx	lr
 8015088:	1ffff000 	svcne	0x00fff000

0801508c <__popcountsi2>:
 801508c:	0843      	lsrs	r3, r0, #1
 801508e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8015092:	1ac0      	subs	r0, r0, r3
 8015094:	0883      	lsrs	r3, r0, #2
 8015096:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 801509a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 801509e:	4418      	add	r0, r3
 80150a0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80150a4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80150a8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80150ac:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80150b0:	0e00      	lsrs	r0, r0, #24
 80150b2:	4770      	bx	lr

080150b4 <__udivmoddi4>:
 80150b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150b8:	9e08      	ldr	r6, [sp, #32]
 80150ba:	460d      	mov	r5, r1
 80150bc:	4604      	mov	r4, r0
 80150be:	468e      	mov	lr, r1
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d14c      	bne.n	801515e <__udivmoddi4+0xaa>
 80150c4:	428a      	cmp	r2, r1
 80150c6:	4694      	mov	ip, r2
 80150c8:	d967      	bls.n	801519a <__udivmoddi4+0xe6>
 80150ca:	fab2 f382 	clz	r3, r2
 80150ce:	b153      	cbz	r3, 80150e6 <__udivmoddi4+0x32>
 80150d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80150d4:	f1c3 0220 	rsb	r2, r3, #32
 80150d8:	fa01 fe03 	lsl.w	lr, r1, r3
 80150dc:	fa20 f202 	lsr.w	r2, r0, r2
 80150e0:	ea42 0e0e 	orr.w	lr, r2, lr
 80150e4:	409c      	lsls	r4, r3
 80150e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80150ea:	fbbe f1f7 	udiv	r1, lr, r7
 80150ee:	fa1f f58c 	uxth.w	r5, ip
 80150f2:	fb07 ee11 	mls	lr, r7, r1, lr
 80150f6:	fb01 f005 	mul.w	r0, r1, r5
 80150fa:	0c22      	lsrs	r2, r4, #16
 80150fc:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8015100:	4290      	cmp	r0, r2
 8015102:	d90a      	bls.n	801511a <__udivmoddi4+0x66>
 8015104:	eb1c 0202 	adds.w	r2, ip, r2
 8015108:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 801510c:	f080 8119 	bcs.w	8015342 <__udivmoddi4+0x28e>
 8015110:	4290      	cmp	r0, r2
 8015112:	f240 8116 	bls.w	8015342 <__udivmoddi4+0x28e>
 8015116:	3902      	subs	r1, #2
 8015118:	4462      	add	r2, ip
 801511a:	1a12      	subs	r2, r2, r0
 801511c:	fbb2 f0f7 	udiv	r0, r2, r7
 8015120:	fb07 2210 	mls	r2, r7, r0, r2
 8015124:	fb00 f505 	mul.w	r5, r0, r5
 8015128:	b2a4      	uxth	r4, r4
 801512a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801512e:	42a5      	cmp	r5, r4
 8015130:	d90a      	bls.n	8015148 <__udivmoddi4+0x94>
 8015132:	eb1c 0404 	adds.w	r4, ip, r4
 8015136:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 801513a:	f080 8104 	bcs.w	8015346 <__udivmoddi4+0x292>
 801513e:	42a5      	cmp	r5, r4
 8015140:	f240 8101 	bls.w	8015346 <__udivmoddi4+0x292>
 8015144:	4464      	add	r4, ip
 8015146:	3802      	subs	r0, #2
 8015148:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 801514c:	2100      	movs	r1, #0
 801514e:	1b64      	subs	r4, r4, r5
 8015150:	b11e      	cbz	r6, 801515a <__udivmoddi4+0xa6>
 8015152:	40dc      	lsrs	r4, r3
 8015154:	2300      	movs	r3, #0
 8015156:	e9c6 4300 	strd	r4, r3, [r6]
 801515a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801515e:	428b      	cmp	r3, r1
 8015160:	d908      	bls.n	8015174 <__udivmoddi4+0xc0>
 8015162:	2e00      	cmp	r6, #0
 8015164:	f000 80ea 	beq.w	801533c <__udivmoddi4+0x288>
 8015168:	2100      	movs	r1, #0
 801516a:	e9c6 0500 	strd	r0, r5, [r6]
 801516e:	4608      	mov	r0, r1
 8015170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015174:	fab3 f183 	clz	r1, r3
 8015178:	2900      	cmp	r1, #0
 801517a:	d148      	bne.n	801520e <__udivmoddi4+0x15a>
 801517c:	42ab      	cmp	r3, r5
 801517e:	d302      	bcc.n	8015186 <__udivmoddi4+0xd2>
 8015180:	4282      	cmp	r2, r0
 8015182:	f200 80f8 	bhi.w	8015376 <__udivmoddi4+0x2c2>
 8015186:	1a84      	subs	r4, r0, r2
 8015188:	eb65 0203 	sbc.w	r2, r5, r3
 801518c:	2001      	movs	r0, #1
 801518e:	4696      	mov	lr, r2
 8015190:	2e00      	cmp	r6, #0
 8015192:	d0e2      	beq.n	801515a <__udivmoddi4+0xa6>
 8015194:	e9c6 4e00 	strd	r4, lr, [r6]
 8015198:	e7df      	b.n	801515a <__udivmoddi4+0xa6>
 801519a:	b902      	cbnz	r2, 801519e <__udivmoddi4+0xea>
 801519c:	deff      	udf	#255	; 0xff
 801519e:	fab2 f382 	clz	r3, r2
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	f040 808e 	bne.w	80152c4 <__udivmoddi4+0x210>
 80151a8:	1a88      	subs	r0, r1, r2
 80151aa:	2101      	movs	r1, #1
 80151ac:	0c17      	lsrs	r7, r2, #16
 80151ae:	fa1f fe82 	uxth.w	lr, r2
 80151b2:	fbb0 f5f7 	udiv	r5, r0, r7
 80151b6:	fb07 0015 	mls	r0, r7, r5, r0
 80151ba:	0c22      	lsrs	r2, r4, #16
 80151bc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80151c0:	fb0e f005 	mul.w	r0, lr, r5
 80151c4:	4290      	cmp	r0, r2
 80151c6:	d908      	bls.n	80151da <__udivmoddi4+0x126>
 80151c8:	eb1c 0202 	adds.w	r2, ip, r2
 80151cc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80151d0:	d202      	bcs.n	80151d8 <__udivmoddi4+0x124>
 80151d2:	4290      	cmp	r0, r2
 80151d4:	f200 80cc 	bhi.w	8015370 <__udivmoddi4+0x2bc>
 80151d8:	4645      	mov	r5, r8
 80151da:	1a12      	subs	r2, r2, r0
 80151dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80151e0:	fb07 2210 	mls	r2, r7, r0, r2
 80151e4:	fb0e fe00 	mul.w	lr, lr, r0
 80151e8:	b2a4      	uxth	r4, r4
 80151ea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80151ee:	45a6      	cmp	lr, r4
 80151f0:	d908      	bls.n	8015204 <__udivmoddi4+0x150>
 80151f2:	eb1c 0404 	adds.w	r4, ip, r4
 80151f6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80151fa:	d202      	bcs.n	8015202 <__udivmoddi4+0x14e>
 80151fc:	45a6      	cmp	lr, r4
 80151fe:	f200 80b4 	bhi.w	801536a <__udivmoddi4+0x2b6>
 8015202:	4610      	mov	r0, r2
 8015204:	eba4 040e 	sub.w	r4, r4, lr
 8015208:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 801520c:	e7a0      	b.n	8015150 <__udivmoddi4+0x9c>
 801520e:	f1c1 0720 	rsb	r7, r1, #32
 8015212:	408b      	lsls	r3, r1
 8015214:	fa22 fc07 	lsr.w	ip, r2, r7
 8015218:	ea4c 0c03 	orr.w	ip, ip, r3
 801521c:	fa25 fa07 	lsr.w	sl, r5, r7
 8015220:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8015224:	fbba f8f9 	udiv	r8, sl, r9
 8015228:	408d      	lsls	r5, r1
 801522a:	fa20 f307 	lsr.w	r3, r0, r7
 801522e:	fb09 aa18 	mls	sl, r9, r8, sl
 8015232:	fa1f fe8c 	uxth.w	lr, ip
 8015236:	432b      	orrs	r3, r5
 8015238:	fa00 f501 	lsl.w	r5, r0, r1
 801523c:	fb08 f00e 	mul.w	r0, r8, lr
 8015240:	0c1c      	lsrs	r4, r3, #16
 8015242:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015246:	42a0      	cmp	r0, r4
 8015248:	fa02 f201 	lsl.w	r2, r2, r1
 801524c:	d90b      	bls.n	8015266 <__udivmoddi4+0x1b2>
 801524e:	eb1c 0404 	adds.w	r4, ip, r4
 8015252:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8015256:	f080 8086 	bcs.w	8015366 <__udivmoddi4+0x2b2>
 801525a:	42a0      	cmp	r0, r4
 801525c:	f240 8083 	bls.w	8015366 <__udivmoddi4+0x2b2>
 8015260:	f1a8 0802 	sub.w	r8, r8, #2
 8015264:	4464      	add	r4, ip
 8015266:	1a24      	subs	r4, r4, r0
 8015268:	b298      	uxth	r0, r3
 801526a:	fbb4 f3f9 	udiv	r3, r4, r9
 801526e:	fb09 4413 	mls	r4, r9, r3, r4
 8015272:	fb03 fe0e 	mul.w	lr, r3, lr
 8015276:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 801527a:	45a6      	cmp	lr, r4
 801527c:	d908      	bls.n	8015290 <__udivmoddi4+0x1dc>
 801527e:	eb1c 0404 	adds.w	r4, ip, r4
 8015282:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8015286:	d26a      	bcs.n	801535e <__udivmoddi4+0x2aa>
 8015288:	45a6      	cmp	lr, r4
 801528a:	d968      	bls.n	801535e <__udivmoddi4+0x2aa>
 801528c:	3b02      	subs	r3, #2
 801528e:	4464      	add	r4, ip
 8015290:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8015294:	fba0 9302 	umull	r9, r3, r0, r2
 8015298:	eba4 040e 	sub.w	r4, r4, lr
 801529c:	429c      	cmp	r4, r3
 801529e:	46c8      	mov	r8, r9
 80152a0:	469e      	mov	lr, r3
 80152a2:	d354      	bcc.n	801534e <__udivmoddi4+0x29a>
 80152a4:	d051      	beq.n	801534a <__udivmoddi4+0x296>
 80152a6:	2e00      	cmp	r6, #0
 80152a8:	d067      	beq.n	801537a <__udivmoddi4+0x2c6>
 80152aa:	ebb5 0308 	subs.w	r3, r5, r8
 80152ae:	eb64 040e 	sbc.w	r4, r4, lr
 80152b2:	40cb      	lsrs	r3, r1
 80152b4:	fa04 f707 	lsl.w	r7, r4, r7
 80152b8:	431f      	orrs	r7, r3
 80152ba:	40cc      	lsrs	r4, r1
 80152bc:	e9c6 7400 	strd	r7, r4, [r6]
 80152c0:	2100      	movs	r1, #0
 80152c2:	e74a      	b.n	801515a <__udivmoddi4+0xa6>
 80152c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80152c8:	f1c3 0020 	rsb	r0, r3, #32
 80152cc:	40c1      	lsrs	r1, r0
 80152ce:	409d      	lsls	r5, r3
 80152d0:	fa24 f000 	lsr.w	r0, r4, r0
 80152d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80152d8:	4328      	orrs	r0, r5
 80152da:	fbb1 f5f7 	udiv	r5, r1, r7
 80152de:	fb07 1115 	mls	r1, r7, r5, r1
 80152e2:	fa1f fe8c 	uxth.w	lr, ip
 80152e6:	0c02      	lsrs	r2, r0, #16
 80152e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80152ec:	fb05 f10e 	mul.w	r1, r5, lr
 80152f0:	4291      	cmp	r1, r2
 80152f2:	fa04 f403 	lsl.w	r4, r4, r3
 80152f6:	d908      	bls.n	801530a <__udivmoddi4+0x256>
 80152f8:	eb1c 0202 	adds.w	r2, ip, r2
 80152fc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8015300:	d22f      	bcs.n	8015362 <__udivmoddi4+0x2ae>
 8015302:	4291      	cmp	r1, r2
 8015304:	d92d      	bls.n	8015362 <__udivmoddi4+0x2ae>
 8015306:	3d02      	subs	r5, #2
 8015308:	4462      	add	r2, ip
 801530a:	1a52      	subs	r2, r2, r1
 801530c:	fbb2 f1f7 	udiv	r1, r2, r7
 8015310:	fb07 2211 	mls	r2, r7, r1, r2
 8015314:	b280      	uxth	r0, r0
 8015316:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801531a:	fb01 f20e 	mul.w	r2, r1, lr
 801531e:	4282      	cmp	r2, r0
 8015320:	d908      	bls.n	8015334 <__udivmoddi4+0x280>
 8015322:	eb1c 0000 	adds.w	r0, ip, r0
 8015326:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 801532a:	d216      	bcs.n	801535a <__udivmoddi4+0x2a6>
 801532c:	4282      	cmp	r2, r0
 801532e:	d914      	bls.n	801535a <__udivmoddi4+0x2a6>
 8015330:	3902      	subs	r1, #2
 8015332:	4460      	add	r0, ip
 8015334:	1a80      	subs	r0, r0, r2
 8015336:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 801533a:	e73a      	b.n	80151b2 <__udivmoddi4+0xfe>
 801533c:	4631      	mov	r1, r6
 801533e:	4630      	mov	r0, r6
 8015340:	e70b      	b.n	801515a <__udivmoddi4+0xa6>
 8015342:	4671      	mov	r1, lr
 8015344:	e6e9      	b.n	801511a <__udivmoddi4+0x66>
 8015346:	4610      	mov	r0, r2
 8015348:	e6fe      	b.n	8015148 <__udivmoddi4+0x94>
 801534a:	454d      	cmp	r5, r9
 801534c:	d2ab      	bcs.n	80152a6 <__udivmoddi4+0x1f2>
 801534e:	ebb9 0802 	subs.w	r8, r9, r2
 8015352:	eb63 0e0c 	sbc.w	lr, r3, ip
 8015356:	3801      	subs	r0, #1
 8015358:	e7a5      	b.n	80152a6 <__udivmoddi4+0x1f2>
 801535a:	4641      	mov	r1, r8
 801535c:	e7ea      	b.n	8015334 <__udivmoddi4+0x280>
 801535e:	4603      	mov	r3, r0
 8015360:	e796      	b.n	8015290 <__udivmoddi4+0x1dc>
 8015362:	4645      	mov	r5, r8
 8015364:	e7d1      	b.n	801530a <__udivmoddi4+0x256>
 8015366:	46d0      	mov	r8, sl
 8015368:	e77d      	b.n	8015266 <__udivmoddi4+0x1b2>
 801536a:	4464      	add	r4, ip
 801536c:	3802      	subs	r0, #2
 801536e:	e749      	b.n	8015204 <__udivmoddi4+0x150>
 8015370:	3d02      	subs	r5, #2
 8015372:	4462      	add	r2, ip
 8015374:	e731      	b.n	80151da <__udivmoddi4+0x126>
 8015376:	4608      	mov	r0, r1
 8015378:	e70a      	b.n	8015190 <__udivmoddi4+0xdc>
 801537a:	4631      	mov	r1, r6
 801537c:	e6ed      	b.n	801515a <__udivmoddi4+0xa6>
 801537e:	bf00      	nop

Disassembly of section .rodata:

08015380 <vtable for DisplayHandler-0xd4>:
 8015380:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015384:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8015390:	03020100 	movweq	r0, #8448	; 0x2100
 8015394:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8015398:	00000009 	andeq	r0, r0, r9
 801539c:	03020100 	movweq	r0, #8448	; 0x2100
 80153a0:	584d4404 	stmdapl	sp, {r2, sl, lr}^
 80153a4:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 80153a8:	00747570 	rsbseq	r7, r4, r0, ror r5
 80153ac:	20584d44 	subscs	r4, r8, r4, asr #26
 80153b0:	75706e49 	ldrbvc	r6, [r0, #-3657]!	; 0xfffff1b7
 80153b4:	31310074 	teqcc	r1, r4, ror r0
 80153b8:	3a36323a 	bcc	8da1ca8 <__exidx_end+0xd8a5c4>
 80153bc:	4f003034 	svcmi	0x00003034
 80153c0:	31207463 			; <UNDEFINED> instruction: 0x31207463
 80153c4:	30322031 	eorscc	r2, r2, r1, lsr r0
 80153c8:	1b003232 	blne	8021c98 <__exidx_end+0xa5b4>
 80153cc:	6d32335b 	ldcvs	3, cr3, [r2, #-364]!	; 0xfffffe94
 80153d0:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80153d4:	2074654e 	rsbscs	r6, r4, lr, asr #10
 80153d8:	4d442034 	stclmi	0, cr2, [r4, #-208]	; 0xffffff30
 80153dc:	44522f58 	ldrbmi	r2, [r2], #-3928	; 0xfffff0a8
 80153e0:	6f63204d 	svcvs	0x0063204d
 80153e4:	6f72746e 	svcvs	0x0072746e
 80153e8:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 80153ec:	20317b20 	eorscs	r7, r1, r0, lsr #22
 80153f0:	76696e55 			; <UNDEFINED> instruction: 0x76696e55
 80153f4:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80153f8:	335b1b7d 	cmpcc	fp, #128000	; 0x1f400
 80153fc:	2e006d37 	mcrcs	13, 0, r6, cr0, cr7, {1}
 8015400:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 8015404:	00676966 	rsbeq	r6, r7, r6, ror #18
 8015408:	74685f2e 	strbtvc	r5, [r8], #-3886	; 0xfffff0d2
 801540c:	6e007074 	mcrvs	0, 0, r7, cr0, cr4, {3}
 8015410:	3d65646f 	cfstrdcc	mvd6, [r5, #-444]!	; 0xfffffe44
 8015414:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015418:	2074654e 	rsbscs	r6, r4, lr, asr #10
 801541c:	4d442034 	stclmi	0, cr2, [r4, #-208]	; 0xffffff30
 8015420:	44522f58 	ldrbmi	r2, [r2], #-3928	; 0xfffff0a8
 8015424:	7241004d 	subvc	r0, r1, #77	; 0x4d
 8015428:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 801542c:	20342074 	eorscs	r2, r4, r4, ror r0
 8015430:	64007325 	strvs	r7, [r0], #-805	; 0xfffffcdb
 8015434:	0021786d 	eoreq	r7, r1, sp, ror #16
 8015438:	61657262 	cmnvs	r5, r2, ror #4
 801543c:	6d00236b 	stcvs	3, cr2, [r0, #-428]	; 0xfffffe54
 8015440:	00236261 	eoreq	r6, r3, r1, ror #4
 8015444:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 8015448:	23687365 	cmncs	r8, #-1811939327	; 0x94000001
 801544c:	6f6c7300 	svcvs	0x006c7300
 8015450:	00237374 	eoreq	r7, r3, r4, ror r3

08015454 <vtable for DisplayHandler>:
	...
 801545c:	08007b87 	stmdaeq	r0, {r0, r1, r2, r7, r8, r9, fp, ip, sp, lr}
 8015460:	08007bb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp, ip, sp, lr}
 8015464:	08007c59 	stmdaeq	r0, {r0, r3, r4, r6, sl, fp, ip, sp, lr}

08015468 <vtable for DisplayUdfHandler>:
	...
 8015470:	08007b89 	stmdaeq	r0, {r0, r3, r7, r8, r9, fp, ip, sp, lr}
 8015474:	08007bc1 	stmdaeq	r0, {r0, r6, r7, r8, r9, fp, ip, sp, lr}
 8015478:	08007c31 	stmdaeq	r0, {r0, r4, r5, sl, fp, ip, sp, lr}
 801547c:	08007b8b 	stmdaeq	r0, {r0, r1, r3, r7, r8, r9, fp, ip, sp, lr}
 8015480:	08007c1d 	stmdaeq	r0, {r0, r2, r3, r4, sl, fp, ip, sp, lr}
 8015484:	08007c09 	stmdaeq	r0, {r0, r3, sl, fp, ip, sp, lr}
 8015488:	08007bf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 801548c:	08007be1 	stmdaeq	r0, {r0, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 8015490:	08007bcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, fp, ip, sp, lr}
 8015494:	08007b8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, fp, ip, sp, lr}
 8015498:	08007b8f 	stmdaeq	r0, {r0, r1, r2, r3, r7, r8, r9, fp, ip, sp, lr}

0801549c <CSWTCH.99>:
 801549c:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 80154a0:	 			; <UNDEFINED> instruction: 0x332e3146

080154a1 <SOFTWARE_VERSION>:
 80154a1:	00332e31 	eorseq	r2, r3, r1, lsr lr
 80154a5:	 	andeq	r0, r0, r0

080154a8 <vtable for DmxInput>:
	...
 80154b0:	08008381 	stmdaeq	r0, {r0, r7, r8, r9, pc}
 80154b4:	0800841d 	stmdaeq	r0, {r0, r2, r3, r4, sl, pc}
 80154b8:	08008385 	stmdaeq	r0, {r0, r2, r7, r8, r9, pc}
 80154bc:	080083b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, pc}
 80154c0:	080083e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, r9, pc}
 80154c4:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80154c8:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80154cc:	2c64252e 	cfstr64cs	mvdx2, [r4], #-184	; 0xffffff48
 80154d0:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 80154d4:	64252c73 	strtvs	r2, [r5], #-3187	; 0xfffff38d
 80154d8:	0a73252c 	beq	9cde990 <__exidx_end+0x1cc72ac>
 80154dc:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 80154e0:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80154e4:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 80154e8:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 80154ec:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 80154f0:	4f000a64 	svcmi	0x00000a64
 80154f4:	664f006e 	strbvs	r0, [pc], -lr, rrx
 80154f8:	69640066 	stmdbvs	r4!, {r1, r2, r5, r6}^
 80154fc:	616c7073 	smcvs	50947	; 0xc703
 8015500:	73253a79 			; <UNDEFINED> instruction: 0x73253a79
 8015504:	6674000a 	ldrbtvs	r0, [r4], -sl
 8015508:	253a7074 	ldrcs	r7, [sl, #-116]!	; 0xffffff8c
 801550c:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 8015510:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8015514:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 8015518:	70750073 	rsbsvc	r0, r5, r3, ror r0
 801551c:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8015520:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 8015524:	54000a73 	strpl	r0, [r0], #-2675	; 0xfffff58d
 8015528:	20505446 	subscs	r5, r0, r6, asr #8
 801552c:	20206e4f 	eorcs	r6, r0, pc, asr #28
 8015530:	6265525b 	rsbvs	r5, r5, #-1342177275	; 0xb0000005
 8015534:	5d746f6f 	ldclpl	15, cr6, [r4, #-444]!	; 0xfffffe44
 8015538:	54465400 	strbpl	r5, [r6], #-1024	; 0xfffffc00
 801553c:	664f2050 			; <UNDEFINED> instruction: 0x664f2050
 8015540:	525b2066 	subspl	r2, fp, #102	; 0x66
 8015544:	6f6f6265 	svcvs	0x006f6265
 8015548:	00205d74 	eoreq	r5, r0, r4, ror sp
 801554c:	4f525245 	svcmi	0x00525245
 8015550:	673f2352 			; <UNDEFINED> instruction: 0x673f2352
 8015554:	000a7465 	andeq	r7, sl, r5, ror #8
 8015558:	70746674 	rsbsvc	r6, r4, r4, ror r6
 801555c:	69640023 	stmdbvs	r4!, {r0, r1, r5}^
 8015560:	616c7073 	smcvs	50947	; 0xc703
 8015564:	45002379 	strmi	r2, [r0, #-889]	; 0xfffffc87
 8015568:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 801556c:	000a2123 	andeq	r2, sl, r3, lsr #2
 8015570:	4f525245 	svcmi	0x00525245
 8015574:	0a3f2352 	beq	8fde2c4 <__exidx_end+0xfc6be0>
 8015578:	62657200 	rsbvs	r7, r5, #0, 4
 801557c:	23746f6f 	cmncs	r4, #444	; 0x1bc
 8015580:	696c0023 	stmdbvs	ip!, {r0, r1, r5}^
 8015584:	00237473 	eoreq	r7, r3, r3, ror r4
 8015588:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801558c:	75002a23 	strvc	r2, [r0, #-2595]	; 0xfffff5dd
 8015590:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8015594:	76002365 	strvc	r2, [r0], -r5, ror #6
 8015598:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 801559c:	00236e6f 	eoreq	r6, r3, pc, ror #28
 80155a0:	23746567 	cmncs	r4, #432013312	; 0x19c00000
 80155a4:	63616600 	cmnvs	r1, #0, 12
 80155a8:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80155ac:	 	tstmi	r0, r3, lsr #6

080155af <s_Node>:
 80155af:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80155b3:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 80155bf:	41730000 	cmnmi	r3, r0
 80155c3:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 80155c7:	31332e31 	teqcc	r3, r1, lsr lr
	...
 80155d3:	2043534f 	subcs	r5, r3, pc, asr #6
 80155d7:	76726553 			; <UNDEFINED> instruction: 0x76726553
 80155db:	00007265 	andeq	r7, r0, r5, ror #4
 80155df:	00000000 	andeq	r0, r0, r0
 80155e3:	544c0000 	strbpl	r0, [ip], #-0
 80155e7:	00000043 	andeq	r0, r0, r3, asr #32
	...
 80155f7:	2043534f 	subcs	r5, r3, pc, asr #6
 80155fb:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 80155ff:	0000746e 	andeq	r7, r0, lr, ror #8
 8015603:	00000000 	andeq	r0, r0, r0
 8015607:	44520000 	ldrbmi	r0, [r2], #-0
 801560b:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 801560f:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 8015613:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8015617:	0000796c 	andeq	r7, r0, ip, ror #18
 801561b:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 801561f:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 801562b:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 801562f:	00004944 	andeq	r4, r0, r4, asr #18
	...
 801563f:	00504444 	subseq	r4, r0, r4, asr #8
	...
 801564f:	69500000 	ldmdbvs	r0, {}^	; <UNPREDICTABLE>
 8015653:	506c6578 	rsbpl	r6, ip, r8, ror r5
 8015657:	65687375 	strbvs	r7, [r8, #-885]!	; 0xfffffc8b
 801565b:	00000072 	andeq	r0, r0, r2, ror r0
 801565f:	00000000 	andeq	r0, r0, r0
 8015663:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

08015675 <s_Output>:
 8015675:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 8015681:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 801568d:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 8015691:	00726f74 	rsbseq	r6, r2, r4, ror pc
 8015695:	00000000 	andeq	r0, r0, r0
 8015699:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 801569d:	0000006c 	andeq	r0, r0, ip, rrx
 80156a1:	00000000 	andeq	r0, r0, r0
 80156a5:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 80156a9:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 80156ad:	00000000 	andeq	r0, r0, r0
 80156b1:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 80156bd:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80156c1:	00006769 	andeq	r6, r0, r9, ror #14
 80156c5:	00000000 	andeq	r0, r0, r0
 80156c9:	70657453 	rsbvc	r7, r5, r3, asr r4
 80156cd:	00726570 	rsbseq	r6, r2, r0, ror r5
 80156d1:	00000000 	andeq	r0, r0, r0
 80156d5:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 80156d9:	00007265 	andeq	r7, r0, r5, ror #4
 80156dd:	00000000 	andeq	r0, r0, r0
 80156e1:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80156e5:	0074654e 	rsbseq	r6, r4, lr, asr #10
 80156e9:	00000000 	andeq	r0, r0, r0
 80156ed:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 80156f1:	00006c61 	andeq	r6, r0, r1, ror #24
 80156f5:	00000000 	andeq	r0, r0, r0
 80156f9:	20424752 	subcs	r4, r2, r2, asr r7
 80156fd:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 8015701:	0000006c 	andeq	r0, r0, ip, rrx
 8015705:	 	mrsge	r0, (UNDEF: 0)

08015708 <RemoteConfig::s_GET>:
 8015708:	08008fa1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sl, fp, pc}
 801570c:	00000000 	andeq	r0, r0, r0
 8015710:	08015579 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, sl, ip, lr}
 8015714:	00000008 	andeq	r0, r0, r8
 8015718:	08008441 	stmdaeq	r0, {r0, r6, sl, pc}
 801571c:	00000000 	andeq	r0, r0, r0
 8015720:	08015582 	stmdaeq	r1, {r1, r7, r8, sl, ip, lr}
 8015724:	00000005 	andeq	r0, r0, r5
 8015728:	08008441 	stmdaeq	r0, {r0, r6, sl, pc}
 801572c:	00000000 	andeq	r0, r0, r0
 8015730:	08015588 	stmdaeq	r1, {r3, r7, r8, sl, ip, lr}
 8015734:	00000006 	andeq	r0, r0, r6
 8015738:	080085f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl, pc}
 801573c:	00000000 	andeq	r0, r0, r0
 8015740:	0801558f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, sl, ip, lr}
 8015744:	00000007 	andeq	r0, r0, r7
 8015748:	080085b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, sl, pc}
 801574c:	00000000 	andeq	r0, r0, r0
 8015750:	08015597 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, sl, ip, lr}
 8015754:	00000008 	andeq	r0, r0, r8
 8015758:	08008511 	stmdaeq	r0, {r0, r4, r8, sl, pc}
 801575c:	00000000 	andeq	r0, r0, r0
 8015760:	0801555e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, ip, lr}
 8015764:	00000008 	andeq	r0, r0, r8
 8015768:	080088c9 	stmdaeq	r0, {r0, r3, r6, r7, fp, pc}
 801576c:	00000000 	andeq	r0, r0, r0
 8015770:	080155a0 	stmdaeq	r1, {r5, r7, r8, sl, ip, lr}
 8015774:	00010004 	andeq	r0, r1, r4
 8015778:	08008565 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl, pc}
 801577c:	00000000 	andeq	r0, r0, r0
 8015780:	08015558 	stmdaeq	r1, {r3, r4, r6, r8, sl, ip, lr}
 8015784:	00000005 	andeq	r0, r0, r5
 8015788:	08008c91 	stmdaeq	r0, {r0, r4, r7, sl, fp, pc}
 801578c:	00000000 	andeq	r0, r0, r0
 8015790:	080155a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, ip, lr}
 8015794:	00000009 	andeq	r0, r0, r9

08015798 <RemoteConfig::s_SET>:
 8015798:	080086a1 	stmdaeq	r0, {r0, r5, r7, r9, sl, pc}
 801579c:	00000000 	andeq	r0, r0, r0
 80157a0:	08015558 	stmdaeq	r1, {r3, r4, r6, r8, sl, ip, lr}
 80157a4:	00010005 	andeq	r0, r1, r5
 80157a8:	08008679 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, pc}
 80157ac:	00000000 	andeq	r0, r0, r0
 80157b0:	0801555e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, ip, lr}
 80157b4:	00010008 	andeq	r0, r1, r8
 80157b8:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 80157bc:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 80157c0:	73252300 			; <UNDEFINED> instruction: 0x73252300
 80157c4:	0a64253d 	beq	991ecc0 <__exidx_end+0x19075dc>
 80157c8:	73252200 			; <UNDEFINED> instruction: 0x73252200
 80157cc:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 80157d0:	002c2273 	eoreq	r2, ip, r3, ror r2
 80157d4:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 80157d8:	000a7325 	andeq	r7, sl, r5, lsr #6
 80157dc:	6f626552 	svcvs	0x00626552
 80157e0:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 80157e4:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 80157e8:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 80157ec:	6f6f6265 	svcvs	0x006f6265
 80157f0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80157f4:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 80157f8:	6f637200 	svcvs	0x00637200
 80157fc:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8015800:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015804:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 8015808:	6b726f77 	blvs	9cb15ec <__exidx_end+0x1c99f08>
 801580c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015810:	73696400 	cmnvc	r9, #0, 8
 8015814:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015818:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 801581c:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 8015820:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8015824:	00747874 	rsbseq	r7, r4, r4, ror r8
 8015828:	31333165 	teqcc	r3, r5, ror #2
 801582c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8015830:	72617000 	rsbvc	r7, r1, #0
 8015834:	2e736d61 	cdpcs	13, 7, cr6, cr3, cr1, {3}
 8015838:	00747874 	rsbseq	r7, r4, r4, ror r8

0801583c <RemoteConfig::s_TXT>:
 801583c:	080088d1 	stmdaeq	r0, {r0, r4, r6, r7, fp, pc}
 8015840:	00000000 	andeq	r0, r0, r0
 8015844:	08008b99 	stmdaeq	r0, {r0, r3, r4, r7, r8, r9, fp, pc}
 8015848:	00000000 	andeq	r0, r0, r0
 801584c:	080157f9 	stmdaeq	r1, {r0, r3, r4, r5, r6, r7, r8, r9, sl, ip, lr}
 8015850:	0000000b 	andeq	r0, r0, fp
 8015854:	0000000c 	andeq	r0, r0, ip
 8015858:	080088fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, fp, pc}
 801585c:	00000000 	andeq	r0, r0, r0
 8015860:	08008bc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, fp, pc}
 8015864:	00000000 	andeq	r0, r0, r0
 8015868:	08015805 	stmdaeq	r1, {r0, r2, fp, ip, lr}
 801586c:	0000000b 	andeq	r0, r0, fp
 8015870:	00000000 	andeq	r0, r0, r0
 8015874:	080089ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, fp, pc}
 8015878:	00000000 	andeq	r0, r0, r0
 801587c:	08008c69 	stmdaeq	r0, {r0, r3, r5, r6, sl, fp, pc}
 8015880:	00000000 	andeq	r0, r0, r0
 8015884:	08015811 	stmdaeq	r1, {r0, r4, fp, ip, lr}
 8015888:	0000000b 	andeq	r0, r0, fp
 801588c:	0000000f 	andeq	r0, r0, pc
 8015890:	08008929 	stmdaeq	r0, {r0, r3, r5, r8, fp, pc}
 8015894:	00000000 	andeq	r0, r0, r0
 8015898:	08008bf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp, pc}
 801589c:	00000000 	andeq	r0, r0, r0
 80158a0:	0801581d 	stmdaeq	r1, {r0, r2, r3, r4, fp, ip, lr}
 80158a4:	0000000a 	andeq	r0, r0, sl
 80158a8:	00000001 	andeq	r0, r0, r1
 80158ac:	08008955 	stmdaeq	r0, {r0, r2, r4, r6, r8, fp, pc}
 80158b0:	00000000 	andeq	r0, r0, r0
 80158b4:	08008c19 	stmdaeq	r0, {r0, r3, r4, sl, fp, pc}
 80158b8:	00000000 	andeq	r0, r0, r0
 80158bc:	08015828 	stmdaeq	r1, {r3, r5, fp, ip, lr}
 80158c0:	00000008 	andeq	r0, r0, r8
 80158c4:	00000004 	andeq	r0, r0, r4
 80158c8:	08008981 	stmdaeq	r0, {r0, r7, r8, fp, pc}
 80158cc:	00000000 	andeq	r0, r0, r0
 80158d0:	08008c41 	stmdaeq	r0, {r0, r6, sl, fp, pc}
 80158d4:	00000000 	andeq	r0, r0, r0
 80158d8:	08015831 	stmdaeq	r1, {r0, r4, r5, fp, ip, lr}
 80158dc:	0000000a 	andeq	r0, r0, sl
 80158e0:	00000002 	andeq	r0, r0, r2
 80158e4:	00544547 	subseq	r4, r4, r7, asr #10
 80158e8:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 80158ec:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 80158f0:	0a200050 	beq	8815a38 <__exidx_end+0x7fe354>
 80158f4:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 80158f8:	43003a00 	movwmi	r3, #2560	; 0xa00
 80158fc:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8015900:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 8015904:	00657079 	rsbeq	r7, r5, r9, ror r0
 8015908:	61003b20 	tstvs	r0, r0, lsr #22
 801590c:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 8015910:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 8015914:	6a2f6e6f 	bvs	8bf12d8 <__exidx_end+0xbd9bf4>
 8015918:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 801591c:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8015920:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8015924:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8015928:	2f006874 	svccs	0x00006874
 801592c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015930:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8015934:	2f006c6d 	svccs	0x00006c6d
 8015938:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801593c:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8015940:	2f007373 	svccs	0x00007373
 8015944:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8015948:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 801594c:	736a2f00 	cmnvc	sl, #0, 30
 8015950:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8015954:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8015958:	72657600 	rsbvc	r7, r5, #0, 12
 801595c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8015960:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8015964:	00656d69 	rsbeq	r6, r5, r9, ror #26
 8015968:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801596c:	0079616c 	rsbseq	r6, r9, ip, ror #2
 8015970:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8015974:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8015978:	6a2f0079 	bvs	8bd5b64 <__exidx_end+0xbbe480>
 801597c:	2f6e6f73 	svccs	0x006e6f73
 8015980:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8015984:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 8015988:	6f6f6265 	svcvs	0x006f6265
 801598c:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 8015990:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 8015994:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 8015998:	434f4421 	movtmi	r4, #62497	; 0xf421
 801599c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 80159a0:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 80159a4:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 80159a8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80159ac:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 80159b0:	3e646165 	powccsz	f6, f4, f5
 80159b4:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 80159b8:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 80159bc:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 80159c0:	742f3c74 	strtvc	r3, [pc], #-3188	; 80159c8 <RemoteConfig::s_TXT+0x18c>
 80159c4:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 80159c8:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80159cc:	3e646165 	powccsz	f6, f4, f5
 80159d0:	6f623c0a 	svcvs	0x00623c0a
 80159d4:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 80159d8:	4f3e3168 	svcmi	0x003e3168
 80159dc:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80159e0:	2f3c3e31 	svccs	0x003c3e31
 80159e4:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80159e8:	2f3c0a3e 	svccs	0x003c0a3e
 80159ec:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80159f0:	42000a3e 	andmi	r0, r0, #253952	; 0x3e000
 80159f4:	52206461 	eorpl	r6, r0, #1627389952	; 0x61000000
 80159f8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 80159fc:	4e007473 	mcrmi	4, 0, r7, cr0, cr3, {3}
 8015a00:	4620746f 	strtmi	r7, [r0], -pc, ror #8
 8015a04:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8015a08:	71655200 	cmnvc	r5, r0, lsl #4
 8015a0c:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0xfffffa8b
 8015a10:	746e4520 	strbtvc	r4, [lr], #-1312	; 0xfffffae0
 8015a14:	20797469 	rsbscs	r7, r9, r9, ror #8
 8015a18:	206f6f54 	rsbcs	r6, pc, r4, asr pc	; <UNPREDICTABLE>
 8015a1c:	6772614c 	ldrbvs	r6, [r2, -ip, asr #2]!
 8015a20:	65520065 	ldrbvs	r0, [r2, #-101]	; 0xffffff9b
 8015a24:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 8015a28:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 8015a2c:	6f542049 	svcvs	0x00542049
 8015a30:	6f4c206f 	svcvs	0x004c206f
 8015a34:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 8015a38:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
 8015a3c:	206c616e 	rsbcs	r6, ip, lr, ror #2
 8015a40:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8015a44:	45207265 	strmi	r7, [r0, #-613]!	; 0xfffffd9b
 8015a48:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
 8015a4c:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 8015a50:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8015a54:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8015a58:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 8015a5c:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8015a60:	00646574 	rsbeq	r6, r4, r4, ror r5
 8015a64:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8015a68:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 8015a6c:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8015a70:	70707553 	rsbsvc	r7, r0, r3, asr r5
 8015a74:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
 8015a78:	6e550064 	cdpvs	0, 5, cr0, cr5, cr4, {3}
 8015a7c:	776f6e6b 	strbvc	r6, [pc, -fp, ror #28]!
 8015a80:	7245206e 	subvc	r2, r5, #110	; 0x6e
 8015a84:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8015a88:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 8015a8c:	434f4421 	movtmi	r4, #62497	; 0xf421
 8015a90:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8015a94:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8015a98:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8015a9c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8015aa0:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8015aa4:	3e646165 	powccsz	f6, f4, f5
 8015aa8:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015aac:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 8015ab0:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8015ab4:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8015ab8:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 8015abc:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8015ac0:	0a3e6461 	beq	8faec4c <__exidx_end+0xf97568>
 8015ac4:	646f623c 	strbtvs	r6, [pc], #-572	; 8015acc <RemoteConfig::s_TXT+0x290>
 8015ac8:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8015acc:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 8015ad0:	31682f3c 	cmncc	r8, ip, lsr pc
 8015ad4:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 8015ad8:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8015adc:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015ae0:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8015ae4:	5448000a 	strbpl	r0, [r8], #-10
 8015ae8:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 8015aec:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 8015af0:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8015af4:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 8015af8:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 8015afc:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8015b00:	6f430a0d 	svcvs	0x00430a0d
 8015b04:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8015b08:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 8015b0c:	203a6570 	eorscs	r6, sl, r0, ror r5
 8015b10:	0a0d7325 	beq	83727ac <__exidx_end+0x35b0c8>
 8015b14:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8015b18:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8015b1c:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8015b20:	203a6874 	eorscs	r6, sl, r4, ror r8
 8015b24:	0a0d7525 	beq	8372fc0 <__exidx_end+0x35b8dc>
 8015b28:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 8015b2c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8015b30:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8015b34:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 8015b38:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 8015b3c:	4447000a 	strbmi	r0, [r7], #-10
 8015b40:	31463233 	cmpcc	r6, r3, lsr r2
 8015b44:	43523730 	cmpmi	r2, #48, 14	; 0xc00000
	...

08015b49 <contentType>:
 8015b49:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8015b4d:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8015b51:	0000006c 	andeq	r0, r0, ip, rrx
	...
 8015b69:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8015b6d:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 8015b89:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8015b8d:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8015b91:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8015b95:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 8015ba9:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 8015bad:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 8015bb1:	2f6e6f69 	svccs	0x006e6f69
 8015bb5:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

08015bc9 <RemoteConfigConst::PARAMS_DISABLE>:
 8015bc9:	61736964 	cmnvs	r3, r4, ror #18
 8015bcd:	00656c62 	rsbeq	r6, r5, r2, ror #24

08015bd1 <RemoteConfigConst::PARAMS_FILE_NAME>:
 8015bd1:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8015bd5:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8015bd9:	00747874 	rsbseq	r7, r4, r4, ror r8

08015bdd <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 8015bdd:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015be1:	5f79616c 	svcpl	0x0079616c
 8015be5:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08015bea <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 8015bea:	61736964 	cmnvs	r3, r4, ror #18
 8015bee:	5f656c62 	svcpl	0x00656c62
 8015bf2:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 8015bf6:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08015bf8 <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 8015bf8:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8015bfc:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8015c00:	6f6f6265 	svcvs	0x006f6265
 8015c04:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

08015c06 <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 8015c06:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8015c0a:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 80156a6 <s_Output+0x31>
 8015c0e:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8015c12:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08015c14 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8015c14:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8015c18:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8015c1c:	6f746361 	svcvs	0x00746361
 8015c20:	7b007972 	blvc	80341f0 <__exidx_end+0x1cb0c>
 8015c24:	73696c22 	cmnvc	r9, #8704	; 0x2200
 8015c28:	7b3a2274 	blvc	8e9e600 <__exidx_end+0xe86f1c>
 8015c2c:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8015c30:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8015c34:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8015c38:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8015c3c:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8015c40:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8015c44:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8015c48:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8015c4c:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8015c50:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8015c54:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8015c58:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8015c5c:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8015c60:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8015c64:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8015c68:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8015c6c:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8015c70:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8015c74:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8015c78:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8015c7c:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8015c80:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8015c84:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8015c88:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8015c8c:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8015c90:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8015c94:	616f6222 	cmnvs	pc, r2, lsr #4
 8015c98:	3a226472 	bcc	88aee68 <__exidx_end+0x897784>
 8015c9c:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8015ca0:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8015ca4:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 8015ca8:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 8015cac:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 8015cb0:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8015cb4:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8015cb8:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 8015cbc:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 8015cc0:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 8015cc4:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8015cc8:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 8015ccc:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8015cd0:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 8015cd4:	7b000a7d 	blvc	80186d0 <__exidx_end+0xfec>
 8015cd8:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 8015cdc:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015ce0:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 8015ce4:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8015ce8:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8015cec:	7b3a2273 	blvc	8e9e6c0 <__exidx_end+0xe86fdc>
 8015cf0:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 8015cf4:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8015cf8:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8015cfc:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 8015d00:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8015d04:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8015d08:	61726170 	cmnvs	r2, r0, ror r1
 8015d0c:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8015d10:	3a227478 	bcc	88b2ef8 <__exidx_end+0x89b814>
 8015d14:	584d4422 	stmdapl	sp, {r1, r5, sl, lr}^
 8015d18:	61725420 	cmnvs	r2, r0, lsr #8
 8015d1c:	696d736e 	stmdbvs	sp!, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}^
 8015d20:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8015d24:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8015d28:	2e79616c 	rpwcsez	f6, f1, #4.0
 8015d2c:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8015d30:	6944223a 	stmdbvs	r4, {r1, r3, r4, r5, r9, sp}^
 8015d34:	616c7073 	smcvs	50947	; 0xc703
 8015d38:	44552079 	ldrbmi	r2, [r5], #-121	; 0xffffff87
 8015d3c:	222c2246 	eorcs	r2, ip, #1610612740	; 0x60000004
 8015d40:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8015d44:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8015d48:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8015d4c:	654e223a 	strbvs	r2, [lr, #-570]	; 0xfffffdc6
 8015d50:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8015d54:	222c226b 	eorcs	r2, ip, #-1342177274	; 0xb0000006
 8015d58:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8015d5c:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8015d60:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8015d64:	6552223a 	ldrbvs	r2, [r2, #-570]	; 0xfffffdc6
 8015d68:	65746f6d 	ldrbvs	r6, [r4, #-3949]!	; 0xfffff093
 8015d6c:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8015d70:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 8015d74:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 8015d78:	7d226e6f 	stcvc	14, cr6, [r2, #-444]!	; 0xfffffe44
 8015d7c:	 	teqcs	ip, sp, ror r0

08015d7e <index_html>:
 8015d7e:	4f44213c 	svcmi	0x0044213c
 8015d82:	50595443 	subspl	r5, r9, r3, asr #8
 8015d86:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 8015d8a:	0a3e6c6d 	beq	8fb0f46 <__exidx_end+0xf99862>
 8015d8e:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 8015d92:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8015d96:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 8015d9a:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 8015d9e:	6b6e696c 	blvs	9bb0356 <__exidx_end+0x1b98c72>
 8015da2:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 8015da6:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 8015daa:	73656c79 	cmnvc	r5, #30976	; 0x7900
 8015dae:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8015db2:	72682022 	rsbvc	r2, r8, #34	; 0x22
 8015db6:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 8015dba:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8015dbe:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8015dc2:	20227373 	eorcs	r7, r2, r3, ror r3
 8015dc6:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 8015dca:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8015dce:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8015dd2:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8015dd6:	0a3e656c 	beq	8faf38e <__exidx_end+0xf97caa>
 8015dda:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8015dde:	0a3e6461 	beq	8faef6a <__exidx_end+0xf97886>
 8015de2:	646f623c 	strbtvs	r6, [pc], #-572	; 8015dea <index_html+0x6c>
 8015de6:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8015dea:	6165683c 	cmnvs	r5, ip, lsr r8
 8015dee:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8015df2:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8015df6:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8015dfa:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 8015dfe:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8015e02:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8015e06:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015e0a:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8015e0e:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8015e12:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8015e16:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8015e1a:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 8015e1e:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8015e22:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8015e26:	6f746365 	svcvs	0x00746365
 8015e2a:	20227972 	eorcs	r7, r2, r2, ror r9
 8015e2e:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8015e32:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 8015e36:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8015e3a:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8015e3e:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8015e42:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 8015e46:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8015e4a:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 8015e4e:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 8015e52:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 8015e56:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 8015e5a:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 8015e5e:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8015e62:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8015e66:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 8015e6a:	20227478 	eorcs	r7, r2, r8, ror r4
 8015e6e:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8015e72:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 8015e76:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 8015e7a:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 8015e7e:	0a3e656c 	beq	8faf436 <__exidx_end+0xf97d52>
 8015e82:	6f663c09 	svcvs	0x00663c09
 8015e86:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 8015e8a:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 8015e8e:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8015e92:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 8015e96:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8015e9a:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 8015e9e:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8015ea2:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 8015ea6:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8015eaa:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8015eae:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 8015eb2:	20747069 	rsbscs	r7, r4, r9, rrx
 8015eb6:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 8015eba:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 8015ebe:	6a2e7865 	bvs	8bb405a <__exidx_end+0xb9c976>
 8015ec2:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 8015ec6:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 8015eca:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 8015ece:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 8015ed2:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8015ed6:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8015eda:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8015ede:	 	svcvs	0x0062000a

08015ee0 <styles_css>:
 8015ee0:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8015ee4:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8015ee8:	63616220 	cmnvs	r1, #32, 4
 8015eec:	6f72676b 	svcvs	0x0072676b
 8015ef0:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 8015ef4:	6f6c6f63 	svcvs	0x006c6f63
 8015ef8:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8015efc:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8015f00:	30322c30 	eorscc	r2, r2, r0, lsr ip
 8015f04:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8015f08:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8015f0c:	6f6c6f63 	svcvs	0x006c6f63
 8015f10:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8015f14:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8015f18:	202c3535 	eorcs	r3, ip, r5, lsr r5
 8015f1c:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 8015f20:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 8015f24:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8015f28:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 8015f2c:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8015f30:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8015f34:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015f38:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8015f3c:	0a3b7865 	beq	8ef40d8 <__exidx_end+0xedc9f4>
 8015f40:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 8015f44:	0a7b2069 	beq	9ede0f0 <__exidx_end+0x1ec6a0c>
 8015f48:	696c2020 	stmdbvs	ip!, {r5, sp}^
 8015f4c:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 8015f50:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 8015f54:	6f6e203a 	svcvs	0x006e203a
 8015f58:	0a3b656e 	beq	8eef518 <__exidx_end+0xed7e34>
 8015f5c:	616d2020 	cmnvs	sp, r0, lsr #32
 8015f60:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 8015f64:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 8015f68:	70352078 	eorsvc	r2, r5, r8, ror r0
 8015f6c:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 8015f70:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 8015f74:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8015f78:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8015f7c:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8015f80:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8015f84:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8015f88:	0a3b7865 	beq	8ef4124 <__exidx_end+0xedca40>
 8015f8c:	6f622020 	svcvs	0x00622020
 8015f90:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8015f94:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8015f98:	3a737569 	bcc	9cf3544 <__exidx_end+0x1cdbe60>
 8015f9c:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8015fa0:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8015fa4:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8015fa8:	203a7265 	eorscs	r7, sl, r5, ror #4
 8015fac:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8015fb0:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8015fb4:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8015fb8:	0a3b7870 	beq	8ef4180 <__exidx_end+0xedca9c>
 8015fbc:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 8015fc0:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8015fc4:	0a7b2072 	beq	9ede194 <__exidx_end+0x1ec6ab0>
 8015fc8:	69642020 	stmdbvs	r4!, {r5, sp}^
 8015fcc:	616c7073 	smcvs	50947	; 0xc703
 8015fd0:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 8015fd4:	3b78656c 	blcc	9e2f58c <__exidx_end+0x1e17ea8>
 8015fd8:	6a20200a 	bvs	881e008 <__exidx_end+0x806924>
 8015fdc:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 8015fe0:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 8015fe4:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8015fe8:	203a746e 	eorscs	r7, sl, lr, ror #8
 8015fec:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 8015ff0:	0a3b7265 	beq	8ef298c <__exidx_end+0xedb2a8>
 8015ff4:	6f622020 	svcvs	0x00622020
 8015ff8:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8015ffc:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8016000:	3a737569 	bcc	9cf35ac <__exidx_end+0x1cdbec8>
 8016004:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8016008:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 801600c:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8016010:	203a7265 	eorscs	r7, sl, r5, ror #4
 8016014:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016018:	72672064 	rsbvc	r2, r7, #100	; 0x64
 801601c:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8016020:	0a3b7870 	beq	8ef41e8 <__exidx_end+0xedcb04>
 8016024:	00000a7d 	andeq	r0, r0, sp, ror sl

08016028 <HttpContent>:
 8016028:	08015938 	stmdaeq	r1, {r3, r4, r5, r8, fp, ip, lr}
 801602c:	08015ee0 	stmdaeq	r1, {r5, r6, r7, r9, sl, fp, ip, lr}
 8016030:	08015944 	stmdaeq	r1, {r2, r6, r8, fp, ip, lr}
 8016034:	08016040 	stmdaeq	r1, {r6, sp, lr}
 8016038:	0801592c 	stmdaeq	r1, {r2, r3, r5, r8, fp, ip, lr}
 801603c:	08015d7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, sl, fp, ip, lr}

08016040 <index_js>:
 8016040:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8016044:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8016048:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801604c:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8016050:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016054:	6a284e4f 	bvs	8a29998 <__exidx_end+0xa122b4>
 8016058:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 801605c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8016060:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8016064:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 8016068:	6a2f273d 	bvs	8bdfd64 <__exidx_end+0xbc8680>
 801606c:	2f6e6f73 	svccs	0x006e6f73
 8016070:	202b2027 	eorcs	r2, fp, r7, lsr #32
 8016074:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 8016078:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801607c:	20797274 	rsbscs	r7, r9, r4, ror r2
 8016080:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8016084:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 8016088:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 801608c:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 8016090:	20746961 	rsbscs	r6, r4, r1, ror #18
 8016094:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 8016098:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 801609c:	0a3b296c 	beq	8ee0654 <__exidx_end+0xec8f70>
 80160a0:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 80160a4:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 80160a8:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 80160ac:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 80160b0:	73657220 	cmnvc	r5, #32, 4
 80160b4:	6f736a2e 	svcvs	0x00736a2e
 80160b8:	3b29286e 	blcc	8a60278 <__exidx_end+0xa48b94>
 80160bc:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 80160c0:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 80160c4:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 80160c8:	6f727265 	svcvs	0x00727265
 80160cc:	7b202972 	blvc	882069c <__exidx_end+0x808fb8>
 80160d0:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80160d4:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 80160d8:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 80160dc:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 80160e0:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 80160e4:	3b29726f 	blcc	8a72aa8 <__exidx_end+0xa5b3c4>
 80160e8:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 80160ec:	0a0a7d0a 	beq	82b551c <__exidx_end+0x29de38>
 80160f0:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80160f4:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80160f8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80160fc:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 8016100:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8016104:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8016108:	20292874 	eorcs	r2, r9, r4, ror r8
 801610c:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8016110:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8016114:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016118:	6177613d 	cmnvs	r7, sp, lsr r1
 801611c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8016120:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016124:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016128:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 801612c:	0a3b2927 	beq	8ee05d0 <__exidx_end+0xec8eec>
 8016130:	6f640909 	svcvs	0x00640909
 8016134:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 8016138:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 801613c:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8016140:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8016144:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 8016148:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 801614c:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 8016150:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8016154:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8016158:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 801615c:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 8016160:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8016164:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 8016168:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 801616c:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 8016170:	2b656d61 	blcs	99716fc <__exidx_end+0x195a018>
 8016174:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80160f4 <index_js+0xb4>
 8016178:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801617c:	2b223e69 	blcs	88a5b28 <__exidx_end+0x88e444>
 8016180:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016184:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 8016188:	6f6e2e74 	svcvs	0x006e2e74
 801618c:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 8016190:	2b657079 	blcs	997237c <__exidx_end+0x195ac98>
 8016194:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8016114 <index_js+0xd4>
 8016198:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 801619c:	2b223e69 	blcs	88a5b48 <__exidx_end+0x88e464>
 80161a0:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80161a4:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 80161a8:	6f6e2e74 	svcvs	0x006e2e74
 80161ac:	702e6564 	eorvc	r6, lr, r4, ror #10
 80161b0:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 80161b4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 80161b8:	2f3c222b 	svccs	0x003c222b
 80161bc:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 80161c0:	0a7d0a3b 	beq	9f58ab4 <__exidx_end+0x1f413d0>
 80161c4:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 80161c8:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 80161cc:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 80161d0:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 80161d4:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 80161d8:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80161dc:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 80161e0:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 80161e4:	0a7b2029 	beq	9ede290 <__exidx_end+0x1ec6bac>
 80161e8:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 80161ec:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 80161f0:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 80161f4:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80161f8:	6177613d 	cmnvs	r7, sp, lsr r1
 80161fc:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8016200:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016204:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016208:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 801620c:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8016210:	3b292779 	blcc	8a5fffc <__exidx_end+0xa48918>
 8016214:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8016218:	2074656c 	rsbscs	r6, r4, ip, ror #10
 801621c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016220:	0a22223d 	beq	889eb1c <__exidx_end+0x887438>
 8016224:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 8016228:	66207465 	strtvs	r7, [r0], -r5, ror #8
 801622c:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 8016230:	73656d61 	cmnvc	r5, #6208	; 0x1840
 8016234:	6a624f3d 	bvs	98a9f30 <__exidx_end+0x189284c>
 8016238:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 801623c:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 8016240:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 8016244:	6f746365 	svcvs	0x00746365
 8016248:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 801624c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8016250:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 8016254:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8016258:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 801625c:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 8016260:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 8016264:	6145726f 	cmpvs	r5, pc, ror #4
 8016268:	66286863 	strtvs	r6, [r8], -r3, ror #16
 801626c:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8016270:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016274:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 8016278:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801627c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8016280:	20726176 	rsbscs	r6, r2, r6, ror r1
 8016284:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8016288:	203d2065 	eorscs	r2, sp, r5, rrx
 801628c:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016290:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8016294:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 8016298:	73656c69 	cmnvc	r5, #26880	; 0x6900
 801629c:	6b5b5d22 	blvs	96ed72c <__exidx_end+0x16d6048>
 80162a0:	3b5d7965 	blcc	977483c <__exidx_end+0x175d158>
 80162a4:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80162a8:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 80162ac:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 80162b0:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 80162b4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80162b8:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 80162bc:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 80162c0:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 80162c4:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 80162c8:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80162cc:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80162d0:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 80162d4:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80162d8:	0a3b223e 	beq	8edebd8 <__exidx_end+0xec74f4>
 80162dc:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 80162e0:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80162e4:	6f640909 	svcvs	0x00640909
 80162e8:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 80162ec:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 80162f0:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 80162f4:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80162f8:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 80162fc:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8016300:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8016304:	6f746365 	svcvs	0x00746365
 8016308:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 801630c:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 8016310:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 8016314:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 8016318:	3b6c6d74 	blcc	9b318f0 <__exidx_end+0x1b1a20c>
 801631c:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 8016320:	5f746567 	svcpl	0x00746567
 8016324:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 8016328:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 801632c:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016330:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 8016334:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8016338:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 801633c:	20636e79 	rsbcs	r6, r3, r9, ror lr
 8016340:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8016344:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8016348:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 801634c:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 8016350:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016354:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 8016358:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 801635c:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8016360:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 8016364:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8016368:	6177613d 	cmnvs	r7, sp, lsr r1
 801636c:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8016370:	534a7465 	movtpl	r7, #42085	; 0xa465
 8016374:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 8016378:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801637c:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 8016380:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8016384:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 8016388:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 801638c:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 8016390:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 8016394:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 8016398:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 801639c:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 80163a0:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 80163a4:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 80163a8:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 80163ac:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 80163b0:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 80163b4:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 80163b8:	2b22563e 	blcs	88abcb8 <__exidx_end+0x8945d4>
 80163bc:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80163c0:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 80163c4:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80163c8:	2b6e6f69 	blcs	9bb2174 <__exidx_end+0x1b9aa90>
 80163cc:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 801634c <index_js+0x30c>
 80163d0:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80163d4:	2b223e69 	blcs	88a5d80 <__exidx_end+0x88e69c>
 80163d8:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80163dc:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 80163e0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 80163e4:	61642e64 	cmnvs	r4, r4, ror #28
 80163e8:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 80163ec:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 80163f0:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 80163f4:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 80163f8:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80163fc:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 8016400:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 8016404:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 8016408:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 801640c:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 8016410:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 8016414:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 8016418:	6f697372 	svcvs	0x00697372
 801641c:	6f622e6e 	svcvs	0x00622e6e
 8016420:	2b647261 	blcs	9932dac <__exidx_end+0x191b6c8>
 8016424:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80163a4 <index_js+0x364>
 8016428:	3b223e69 	blcc	88a5dd4 <__exidx_end+0x88e6f0>
 801642c:	0a0a7d0a 	beq	82b585c <__exidx_end+0x29e178>
 8016430:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8016434:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 8016438:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 801643c:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8016440:	745f7465 	ldrbvc	r7, [pc], #-1125	; 8016448 <index_js+0x408>
 8016444:	73287478 			; <UNDEFINED> instruction: 0x73287478
 8016448:	20296c65 	eorcs	r6, r9, r5, ror #24
 801644c:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 8016450:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 8016454:	613d7478 	teqvs	sp, r8, ror r4
 8016458:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 801645c:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 8016460:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 8016464:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 8016468:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 801646c:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8016470:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016474:	3b22223d 	blcc	889ed70 <__exidx_end+0x88768c>
 8016478:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 801647c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 8016480:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 8016484:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 8016488:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 801648c:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 8016490:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 8016494:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 8016498:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 801649c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80164a0:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 80164a4:	0a7b2029 	beq	9ede550 <__exidx_end+0x1ec6e6c>
 80164a8:	61760909 	cmnvs	r6, r9, lsl #18
 80164ac:	61762072 	cmnvs	r6, r2, ror r0
 80164b0:	2065756c 	rsbcs	r7, r5, ip, ror #10
 80164b4:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 80164b8:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 80164bc:	6b5b5d6c 	blvs	96eda74 <__exidx_end+0x16d6390>
 80164c0:	3b5d7965 	blcc	9774a5c <__exidx_end+0x175d378>
 80164c4:	2009090a 	andcs	r0, r9, sl, lsl #18
 80164c8:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80164cc:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 80164d0:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 80164d4:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80164d8:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 80164dc:	2f3c222b 	svccs	0x003c222b
 80164e0:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 80164e4:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80164e8:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80164ec:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80164f0:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 80164f4:	742f3c3e 	strtvc	r3, [pc], #-3134	; 80164fc <index_js+0x4bc>
 80164f8:	3b223e72 	blcc	88a5ec8 <__exidx_end+0x88e7e4>
 80164fc:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 8016500:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 8016504:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 8016508:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 801650c:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 8016510:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 8016514:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 8016518:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 801651c:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 8016520:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8016524:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 8016528:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 801652c:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 8016530:	0a3b6c6d 	beq	8ef16ec <__exidx_end+0xeda008>
 8016534:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 8016538:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 801653c:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8016540:	3b292874 	blcc	8a60718 <__exidx_end+0xa49034>
 8016544:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 8016548:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 801654c:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8016550:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016554:	0a3b2928 	beq	8ee09fc <__exidx_end+0xec9318>
 8016558:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 801655c:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 8016560:	6f697372 	svcvs	0x00697372
 8016564:	3b29286e 	blcc	8a60724 <__exidx_end+0xa49040>
 8016568:	2020000a 	eorcs	r0, r0, sl
 801656c:	76696e55 			; <UNDEFINED> instruction: 0x76696e55
 8016570:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016574:	72612073 	rsbvc	r2, r1, #115	; 0x73
 8016578:	616d2065 	cmnvs	sp, r5, rrx
 801657c:	65707070 	ldrbvs	r7, [r0, #-112]!	; 0xffffff90
 8016580:	312b2064 			; <UNDEFINED> instruction: 0x312b2064
 8016584:	0000000a 	andeq	r0, r0, sl

08016588 <vtable for ArtNet4Node>:
	...
 8016590:	08009945 	stmdaeq	r0, {r0, r2, r6, r8, fp, ip, pc}
 8016594:	08009965 	stmdaeq	r0, {r0, r2, r5, r6, r8, fp, ip, pc}
 8016598:	080098cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, fp, ip, pc}
 801659c:	080099ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, fp, ip, pc}
 80165a0:	08009977 	stmdaeq	r0, {r0, r1, r2, r4, r5, r6, r8, fp, ip, pc}
 80165a4:	080098bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, fp, ip, pc}
 80165a8:	0800992d 	stmdaeq	r0, {r0, r2, r3, r5, r8, fp, ip, pc}

080165ac <ArtNetMsgConst::START>:
 80165ac:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 80165b0:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80165b4:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 80165b8:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

080165bd <ArtNetMsgConst::PARAMS>:
 80165bd:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 80165c1:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80165c5:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80165c9:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80165cd:	0074654e 	rsbseq	r6, r4, lr, asr #10

080165d1 <ArtNetMsgConst::RDM_RUN>:
 80165d1:	6e6e7552 	mcrvs	5, 3, r7, cr14, cr2, {2}
 80165d5:	20676e69 	rsbcs	r6, r7, r9, ror #28
 80165d9:	204d4452 	subcs	r4, sp, r2, asr r4
 80165dd:	63736944 	cmnvs	r3, #68, 18	; 0x110000
 80165e1:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 80165e5:	 	subvc	r0, r1, #121	; 0x79

080165e7 <ArtNetMsgConst::STARTED>:
 80165e7:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80165eb:	2074654e 	rsbscs	r6, r4, lr, asr #10
 80165ef:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 80165f3:	00646574 	rsbeq	r6, r4, r4, ror r5
 80165f7:	25207325 	strcs	r7, [r0, #-805]!	; 0xfffffcdb
 80165fb:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 80165ff:	00732520 	rsbseq	r2, r3, r0, lsr #10
 8016603:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8016607:	2f2f3a73 	svccs	0x002f3a73
 801660b:	32336467 	eorscc	r6, r3, #1728053248	; 0x67000000
 801660f:	786d642d 	stmdavc	sp!, {r0, r2, r3, r5, sl, sp, lr}^
 8016613:	67726f2e 	ldrbvs	r6, [r2, -lr, lsr #30]!
 8016617:	626d4500 	rsbvs	r4, sp, #0, 10
 801661b:	65646465 	strbvs	r6, [r4, #-1125]!	; 0xfffffb9b
 801661f:	 	subvc	r0, r1, #100	; 0x64

08016621 <artnet::NODE_ID>:
 8016621:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016625:	0074654e 	rsbseq	r6, r4, lr, asr #10

08016629 <defaults::SHORT_NAME>:
 8016629:	20567641 	subscs	r7, r6, r1, asr #12
 801662d:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016631:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8016635:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
 8016639:	34302500 	ldrtcc	r2, [r0], #-1280	; 0xfffffb00
 801663d:	255b2078 	ldrbcs	r2, [fp, #-120]	; 0xffffff88
 8016641:	5d643430 	cfstrdpl	mvd3, [r4, #-192]!	; 0xffffff40
 8016645:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8016649:	00567641 	subseq	r7, r6, r1, asr #12

0801664d <artnet::NODE_ID>:
 801664d:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016651:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016655:	00505448 	subseq	r5, r0, r8, asr #8
 8016659:	0050544c 	subseq	r5, r0, ip, asr #8
 801665d:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016661:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016665:	4e434173 	mcrmi	1, 2, r4, cr3, cr3, {3}
 8016669:	646f4e00 	strbtvs	r4, [pc], #-3584	; 8016671 <artnet::NODE_ID+0x24>
 801666d:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 8016671:	75255b20 	strvc	r5, [r5, #-2848]!	; 0xfffff4e0
 8016675:	20000a5d 	andcs	r0, r0, sp, asr sl
 8016679:	6d726946 			; <UNDEFINED> instruction: 0x6d726946
 801667d:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0xfffffe89
 8016681:	3a202020 	bcc	881e709 <__exidx_end+0x807025>
 8016685:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8016689:	000a6425 	andeq	r6, sl, r5, lsr #8
 801668d:	6f685320 	svcvs	0x00685320
 8016691:	6e207472 	mcrvs	4, 1, r7, cr0, cr2, {3}
 8016695:	20656d61 	rsbcs	r6, r5, r1, ror #26
 8016699:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 801669d:	4c20000a 	stcmi	0, cr0, [r0], #-40	; 0xffffffd8
 80166a1:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 80166a5:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 80166a9:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80166ad:	000a7325 	andeq	r7, sl, r5, lsr #6
 80166b1:	74754f20 	ldrbtvc	r4, [r5], #-3872	; 0xfffff0e0
 80166b5:	0a747570 	beq	9d33c7d <__exidx_end+0x1d1c599>
 80166b9:	50202000 	eorpl	r2, r0, r0
 80166bd:	2074726f 	rsbscs	r7, r4, pc, ror #4
 80166c1:	20643225 	rsbcs	r3, r4, r5, lsr #4
 80166c5:	20753425 	rsbscs	r3, r5, r5, lsr #8
 80166c9:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 80166cd:	257b2000 	ldrbcs	r2, [fp, #-0]!
 80166d1:	000a7d73 	andeq	r7, sl, r3, ror sp
 80166d5:	706e4920 	rsbvc	r4, lr, r0, lsr #18
 80166d9:	000a7475 	andeq	r7, sl, r5, ror r4
 80166dd:	6f502020 	svcvs	0x00502020
 80166e1:	25207472 	strcs	r7, [r0, #-1138]!	; 0xfffffb8e
 80166e5:	25206432 	strcs	r6, [r0, #-1074]!	; 0xfffffbce
 80166e9:	2d207534 	cfstr32cs	mvfx7, [r0, #-208]!	; 0xffffff30
 80166ed:	6425203e 	strtvs	r2, [r5], #-62	; 0xffffffc2
 80166f1:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 80166f5:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80166f9:	68000a64 	stmdavs	r0, {r2, r5, r6, r9, fp}
 80166fd:	00646c6f 	rsbeq	r6, r4, pc, ror #24
 8016701:	0066666f 	rsbeq	r6, r6, pc, ror #12
 8016705:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016709:	6b636162 	blvs	98eec99 <__exidx_end+0x18d75b5>
 801670d:	63617300 	cmnvs	r1, #0, 6
 8016711:	6e69006e 	cdpvs	0, 6, cr0, cr9, cr14, {3}
 8016715:	00747570 	rsbseq	r7, r4, r0, ror r5
 8016719:	7074756f 	rsbsvc	r7, r4, pc, ror #10
 801671d:	64007475 	strvs	r7, [r0], #-1141	; 0xfffffb8b
 8016721:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
 8016725:	6c00656c 	cfstr32vs	mvfx6, [r0], {108}	; 0x6c
 8016729:	68007074 	stmdavs	r0, {r2, r4, r5, r6, ip, sp, lr}
 801672d:	61007074 	tstvs	r0, r4, ror r0
 8016731:	656e7472 	strbvs	r7, [lr, #-1138]!	; 0xfffffb8e
 8016735:	72410074 	subvc	r0, r1, #116	; 0x74
 8016739:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 801673d:	00342074 	eorseq	r2, r4, r4, ror r0
 8016741:	 	stc2	0, cr0, [r0], {-0}

08016744 <CSWTCH.93>:
 8016744:	080166fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
 8016748:	08016701 	stmdaeq	r1, {r0, r8, r9, sl, sp, lr}
 801674c:	0801595e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, fp, ip, lr}
 8016750:	08016705 	stmdaeq	r1, {r0, r2, r8, r9, sl, sp, lr}

08016754 <ArtNetParamsConst::ENABLE_RDM>:
 8016754:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016758:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 801675c:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

0801675f <ArtNetParamsConst::MAP_UNIVERSE0>:
 801675f:	5f70616d 	svcpl	0x0070616d
 8016763:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8016767:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 801676b:	 	rsbsvc	r0, r0, #48	; 0x30

0801676d <ArtNetParamsConst::PROTOCOL_PORT>:
 801676d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016775 <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 8016771:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80165bc <ArtNetMsgConst::START+0x10>
 8016775:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016779:	00615f74 	rsbeq	r5, r1, r4, ror pc
 801677d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016785 <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 8016781:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80165cc <ArtNetMsgConst::PARAMS+0xf>
 8016785:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016789:	00625f74 	rsbeq	r5, r2, r4, ror pc
 801678d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016795 <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8016791:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80165dc <ArtNetMsgConst::RDM_RUN+0xb>
 8016795:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016799:	00635f74 	rsbeq	r5, r3, r4, ror pc
 801679d:	746f7270 	strbtvc	r7, [pc], #-624	; 80167a5 <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 80167a1:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 80165ec <ArtNetMsgConst::STARTED+0x5>
 80167a5:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80167a9:	00645f74 	rsbeq	r5, r4, r4, ror pc

080167ad <ArtNetParamsConst::NODE_LONG_NAME>:
 80167ad:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 80167b1:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 80167b5:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

080167b7 <ArtNetParamsConst::NODE_SHORT_NAME>:
 80167b7:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 80167bb:	616e5f74 	smcvs	58868	; 0xe5f4
 80167bf:	 	andvc	r6, r0, #457179136	; 0x1b400000

080167c2 <ArtNetParamsConst::RDM_ENABLE_PORT>:
 80167c2:	5f6d6472 	svcpl	0x006d6472
 80167c6:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80167ca:	705f656c 	subsvc	r6, pc, ip, ror #10
 80167ce:	5f74726f 	svcpl	0x0074726f
 80167d2:	64720061 	ldrbtvs	r0, [r2], #-97	; 0xffffff9f
 80167d6:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 80167da:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80167de:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80167e2:	00625f74 	rsbeq	r5, r2, r4, ror pc
 80167e6:	5f6d6472 	svcpl	0x006d6472
 80167ea:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80167ee:	705f656c 	subsvc	r6, pc, ip, ror #10
 80167f2:	5f74726f 	svcpl	0x0074726f
 80167f6:	64720063 	ldrbtvs	r0, [r2], #-99	; 0xffffff9d
 80167fa:	6e655f6d 	cdpvs	15, 6, cr5, cr5, cr13, {3}
 80167fe:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016802:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016806:	00645f74 	rsbeq	r5, r4, r4, ror pc

0801680a <ArtNetParamsConst::DESTINATION_IP_PORT>:
 801680a:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801680e:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016812:	5f6e6f69 	svcpl	0x006e6f69
 8016816:	705f7069 	subsvc	r7, pc, r9, rrx
 801681a:	5f74726f 	svcpl	0x0074726f
 801681e:	00000061 	andeq	r0, r0, r1, rrx
 8016822:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016826:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801682a:	5f6e6f69 	svcpl	0x006e6f69
 801682e:	705f7069 	subsvc	r7, pc, r9, rrx
 8016832:	5f74726f 	svcpl	0x0074726f
 8016836:	00000062 	andeq	r0, r0, r2, rrx
 801683a:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801683e:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016842:	5f6e6f69 	svcpl	0x006e6f69
 8016846:	705f7069 	subsvc	r7, pc, r9, rrx
 801684a:	5f74726f 	svcpl	0x0074726f
 801684e:	00000063 	andeq	r0, r0, r3, rrx
 8016852:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016856:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801685a:	5f6e6f69 	svcpl	0x006e6f69
 801685e:	705f7069 	subsvc	r7, pc, r9, rrx
 8016862:	5f74726f 	svcpl	0x0074726f
 8016866:	00000064 	andeq	r0, r0, r4, rrx

0801686a <ArtNetParamsConst::NET>:
 801686a:	0074656e 	rsbseq	r6, r4, lr, ror #10

0801686e <ArtNetParamsConst::SUBNET>:
 801686e:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 8016872:	 	tstvs	r0, r5, ror #8

08016875 <ArtNetParamsConst::FILE_NAME>:
 8016875:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 8016879:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 801687d:	 			; <UNDEFINED> instruction: 0xff007478

08016880 <ArtNetConst::OEM_ID>:
 8016880:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08016882 <ArtNetConst::ESTA_ID>:
 8016882:	 	smlsdcc	r1, r0, r0, r0

08016884 <ArtNetConst::VERSION>:
 8016884:	33323701 	teqcc	r2, #262144	; 0x40000
 8016888:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801688c:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 8016890:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 8016894:	20733834 	rsbscs	r3, r3, r4, lsr r8
 8016898:	30007325 	andcc	r7, r0, r5, lsr #6
 801689c:	6f4e202e 	svcvs	0x004e202e
 80168a0:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 80168a4:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 80168a8:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 80168ac:	202c6465 	eorcs	r6, ip, r5, ror #8
 80168b0:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 80168b4:	6f687320 	svcvs	0x00687320
 80168b8:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 80168bc:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 80168c0:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 80168c4:	000a216e 	andeq	r2, sl, lr, ror #2
 80168c8:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 80168cc:	000a6567 	andeq	r6, sl, r7, ror #10
 80168d0:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 80168d4:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 80168d8:	203a2065 	eorscs	r2, sl, r5, rrx
 80168dc:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 80168e0:	20000a64 	andcs	r0, r0, r4, ror #20
 80168e4:	20444943 	subcs	r4, r4, r3, asr #18
 80168e8:	20202020 	eorcs	r2, r0, r0, lsr #32
 80168ec:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 80168f0:	20000a73 	andcs	r0, r0, r3, ror sl
 80168f4:	726f5020 	rsbvc	r5, pc, #32
 80168f8:	32252074 	eorcc	r2, r5, #116	; 0x74
 80168fc:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 8016900:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8016904:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 8016908:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 801690c:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 8016910:	2020000a 	eorcs	r0, r0, sl
 8016914:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8016918:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 801691c:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 8016920:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016924:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 8016928:	5b206433 	blpl	882f9fc <__exidx_end+0x818318>
 801692c:	0a5d6425 	beq	976f9c8 <__exidx_end+0x17582e4>
 8016930:	79532000 	ldmdbvc	r3, {sp}^
 8016934:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 8016938:	7a696e6f 	bvc	9a722fc <__exidx_end+0x1a5ac18>
 801693c:	73692065 	cmnvc	r9, #101	; 0x65
 8016940:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016944:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016948:	00000a64 	andeq	r0, r0, r4, ror #20

0801694c <CSWTCH.56>:
 801694c:	080166fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r9, sl, sp, lr}
 8016950:	08016701 	stmdaeq	r1, {r0, r8, r9, sl, sp, lr}
 8016954:	0801595e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, fp, ip, lr}
 8016958:	08016705 	stmdaeq	r1, {r0, r2, r8, r9, sl, sp, lr}

0801695c <E131ParamsConst::PRIORITY>:
 801695c:	6f697270 	svcvs	0x00697270
 8016960:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8016964:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8016968:	00615f74 	rsbeq	r5, r1, r4, ror pc
	...

0801696e <E131ParamsConst::FILE_NAME>:
 801696e:	31333165 	teqcc	r3, r5, ror #2
 8016972:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
	...

08016977 <E117Const::ACN_PACKET_IDENTIFIER>:
 8016977:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 801697b:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 801697f:	00000037 	andeq	r0, r0, r7, lsr r0

08016983 <E131BridgeConst::VERSION>:
 8016983:	00001901 	andeq	r1, r0, r1, lsl #18
	...

08016988 <vtable for ArtNetRdm>:
	...

080169a8 <UID_ALL>:
 80169a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 80169ac:	0000ffff 	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>

080169b0 <vtable for ArtNetRdmController>:
	...
 80169b8:	0800d025 	stmdaeq	r0, {r0, r2, r5, ip, lr, pc}
 80169bc:	0800d055 	stmdaeq	r0, {r0, r2, r4, r6, ip, lr, pc}
 80169c0:	0800d015 	stmdaeq	r0, {r0, r2, r4, ip, lr, pc}
 80169c4:	0800cfdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, sl, fp, lr, pc}
 80169c8:	0800cfed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, sl, fp, lr, pc}
 80169cc:	0800d069 	stmdaeq	r0, {r0, r3, r5, r6, ip, lr, pc}

080169d0 <UID_ALL>:
 80169d0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 80169d4:	4452ffff 	ldrbmi	pc, [r2], #-4095	; 0xfffff001	; <UNPREDICTABLE>
 80169d8:	6544204d 	strbvs	r2, [r4, #-77]	; 0xffffffb3
 80169dc:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 80169e0:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 80169e4:	75676966 	strbvc	r6, [r7, #-2406]!	; 0xfffff69a
 80169e8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
 80169ec:	000a6e6f 	andeq	r6, sl, pc, ror #28
 80169f0:	6e614d20 	cdpvs	13, 6, cr4, cr1, cr0, {1}
 80169f4:	63616675 	cmnvs	r1, #122683392	; 0x7500000
 80169f8:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0xfffffa8c
 80169fc:	614e2072 	hvcvs	57858	; 0xe202
 8016a00:	3a20656d 	bcc	882ffbc <__exidx_end+0x8188d8>
 8016a04:	2a2e2520 	bcs	8b9fe8c <__exidx_end+0xb887a8>
 8016a08:	20000a73 	andcs	r0, r0, r3, ror sl
 8016a0c:	756e614d 	strbvc	r6, [lr, #-333]!	; 0xfffffeb3
 8016a10:	74636166 	strbtvc	r6, [r3], #-358	; 0xfffffe9a
 8016a14:	72657275 	rsbvc	r7, r5, #1342177287	; 0x50000007
 8016a18:	20444920 	subcs	r4, r4, r0, lsr #18
 8016a1c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016a20:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016a24:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016a28:	5320000a 			; <UNDEFINED> instruction: 0x5320000a
 8016a2c:	61697265 	cmnvs	r9, r5, ror #4
 8016a30:	754e206c 	strbvc	r2, [lr, #-108]	; 0xffffff94
 8016a34:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
 8016a38:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016a3c:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016a40:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8016a44:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8016a48:	2558322e 	ldrbcs	r3, [r8, #-558]	; 0xfffffdd2
 8016a4c:	0a58322e 	beq	962330c <__exidx_end+0x160bc28>
 8016a50:	6f522000 	svcvs	0x00522000
 8016a54:	6c20746f 	cfstrsvs	mvf7, [r0], #-444	; 0xfffffe44
 8016a58:	6c656261 	sfmvs	f6, 2, [r5], #-388	; 0xfffffe7c
 8016a5c:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016a60:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016a64:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8016a68:	000a732a 	andeq	r7, sl, sl, lsr #6
 8016a6c:	6f725020 	svcvs	0x00725020
 8016a70:	74637564 	strbtvc	r7, [r3], #-1380	; 0xfffffa9c
 8016a74:	74614320 	strbtvc	r4, [r1], #-800	; 0xfffffce0
 8016a78:	726f6765 	rsbvc	r6, pc, #26476544	; 0x1940000
 8016a7c:	3a202079 	bcc	881ec68 <__exidx_end+0x807584>
 8016a80:	322e2520 	eorcc	r2, lr, #32, 10	; 0x8000000
 8016a84:	322e2558 	eorcc	r2, lr, #88, 10	; 0x16000000
 8016a88:	20000a58 	andcs	r0, r0, r8, asr sl
 8016a8c:	646f7250 	strbtvs	r7, [pc], #-592	; 8016a94 <UID_ALL+0xc4>
 8016a90:	20746375 	rsbscs	r6, r4, r5, ror r3
 8016a94:	61746544 	cmnvs	r4, r4, asr #10
 8016a98:	20206c69 	eorcs	r6, r0, r9, ror #24
 8016a9c:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016aa0:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016aa4:	58322e25 	ldmdapl	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016aa8:	 	strbmi	r0, [r7], #-10

08016aaa <DEVICE_LABEL>:
 8016aaa:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8016aae:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 8016ab2:	52204352 	eorpl	r4, r0, #1207959553	; 0x48000001
 8016ab6:	44204d44 	strtmi	r4, [r0], #-3396	; 0xfffff2bc
 8016aba:	63697665 	cmnvs	r9, #105906176	; 0x6500000
 8016abe:	 			; <UNDEFINED> instruction: 0xffff0065

08016ac0 <UID_ALL>:
 8016ac0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 8016ac4:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08016ac6 <RDMConst::MANUFACTURER_ID>:
 8016ac6:	 	strbtvc	r0, [r8], #-80	; 0xffffffb0

08016ac8 <RDMConst::MANUFACTURER_NAME>:
 8016ac8:	70747468 	rsbsvc	r7, r4, r8, ror #8
 8016acc:	772f2f3a 			; <UNDEFINED> instruction: 0x772f2f3a
 8016ad0:	6f2e7777 	svcvs	0x002e7777
 8016ad4:	676e6172 			; <UNDEFINED> instruction: 0x676e6172
 8016ad8:	2d697065 	stclcs	0, cr7, [r9, #-404]!	; 0xfffffe6c
 8016adc:	2e786d64 	cdpcs	13, 7, cr6, cr8, cr4, {3}
 8016ae0:	0067726f 	rsbeq	r7, r7, pc, ror #4
 8016ae4:	78383025 	ldmdavc	r8!, {r0, r2, r5, ip, sp}
 8016ae8:	3430252d 	ldrtcc	r2, [r0], #-1325	; 0xfffffad3
 8016aec:	30252d78 	eorcc	r2, r5, r8, ror sp
 8016af0:	252d7834 	strcs	r7, [sp, #-2100]!	; 0xfffff7cc
 8016af4:	25783230 	ldrbcs	r3, [r8, #-560]!	; 0xfffffdd0
 8016af8:	2d783230 	lfmcs	f3, 2, [r8, #-192]!	; 0xffffff40
 8016afc:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8016b00:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8016b04:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8016b08:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8016b0c:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8016b10:	78323025 	ldmdavc	r2!, {r0, r2, r5, ip, sp}
 8016b14:	584d4400 	stmdapl	sp, {sl, lr}^
 8016b18:	6e655320 	cdpvs	3, 6, cr5, cr5, cr0, {1}
 8016b1c:	20000a64 	andcs	r0, r0, r4, ror #20
 8016b20:	61657242 	cmnvs	r5, r2, asr #4
 8016b24:	6974206b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, sp}^
 8016b28:	2020656d 	eorcs	r6, r0, sp, ror #10
 8016b2c:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016b30:	20000a75 	andcs	r0, r0, r5, ror sl
 8016b34:	2042414d 	subcs	r4, r2, sp, asr #2
 8016b38:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8016b3c:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016b40:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016b44:	20000a75 	andcs	r0, r0, r5, ror sl
 8016b48:	72666552 	rsbvc	r6, r6, #343932928	; 0x14800000
 8016b4c:	20687365 	rsbcs	r7, r8, r5, ror #6
 8016b50:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
 8016b54:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016b58:	20000a75 	andcs	r0, r0, r5, ror sl
 8016b5c:	746f6c53 	strbtvc	r6, [pc], #-3155	; 8016b64 <RDMConst::MANUFACTURER_NAME+0x9c>
 8016b60:	20202073 	eorcs	r2, r0, r3, ror r0
 8016b64:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016b68:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016b6c:	00000a75 	andeq	r0, r0, r5, ror sl

08016b70 <vtable for DmxSend>:
	...
 8016b78:	0800d8d1 	stmdaeq	r0, {r0, r4, r6, r7, fp, ip, lr, pc}
 8016b7c:	0800d9b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, fp, ip, lr, pc}
 8016b80:	0800d8d5 	stmdaeq	r0, {r0, r2, r4, r6, r7, fp, ip, lr, pc}
 8016b84:	0800d905 	stmdaeq	r0, {r0, r2, r8, fp, ip, lr, pc}
 8016b88:	0800d939 	stmdaeq	r0, {r0, r3, r4, r5, r8, fp, ip, lr, pc}
 8016b8c:	0800d949 	stmdaeq	r0, {r0, r3, r6, r8, fp, ip, lr, pc}
 8016b90:	0800d955 	stmdaeq	r0, {r0, r2, r4, r6, r8, fp, ip, lr, pc}
 8016b94:	0800d961 	stmdaeq	r0, {r0, r5, r6, r8, fp, ip, lr, pc}
 8016b98:	08012265 	stmdaeq	r1, {r0, r2, r5, r6, r9, sp}
 8016b9c:	0801225b 	stmdaeq	r1, {r0, r1, r3, r4, r6, r9, sp}
 8016ba0:	0801225f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r9, sp}
 8016ba4:	08012269 	stmdaeq	r1, {r0, r3, r5, r6, r9, sp}

08016ba8 <DmxParamsConst::BREAK_TIME>:
 8016ba8:	61657262 	cmnvs	r5, r2, ror #4
 8016bac:	69745f6b 	ldmdbvs	r4!, {r0, r1, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016bb0:	 	movwvc	r6, #1389	; 0x56d

08016bb3 <DmxParamsConst::SLOTS_COUNT>:
 8016bb3:	746f6c73 	strbtvc	r6, [pc], #-3187	; 8016bbb <DmxParamsConst::SLOTS_COUNT+0x8>
 8016bb7:	6f635f73 	svcvs	0x00635f73
 8016bbb:	00746e75 	rsbseq	r6, r4, r5, ror lr

08016bbf <DmxParamsConst::REFRESH_RATE>:
 8016bbf:	72666572 	rsbvc	r6, r6, #478150656	; 0x1c800000
 8016bc3:	5f687365 	svcpl	0x00687365
 8016bc7:	65746172 	ldrbvs	r6, [r4, #-370]!	; 0xfffffe8e
	...

08016bcc <DmxParamsConst::MAB_TIME>:
 8016bcc:	5f62616d 	svcpl	0x0062616d
 8016bd0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
	...

08016bd5 <DmxParamsConst::FILE_NAME>:
 8016bd5:	61726170 	cmnvs	r2, r0, ror r1
 8016bd9:	742e736d 	strtvc	r7, [lr], #-877	; 0xfffffc93
 8016bdd:	 	andvs	r7, r0, r8, ror r4

08016be0 <s_aStorSize>:
 8016be0:	00000060 	andeq	r0, r0, r0, rrx
 8016be4:	00000090 	muleq	r0, r0, r0
 8016be8:	00000020 	andeq	r0, r0, r0, lsr #32
 8016bec:	00000040 	andeq	r0, r0, r0, asr #32
 8016bf0:	00000060 	andeq	r0, r0, r0, rrx
 8016bf4:	00000040 	andeq	r0, r0, r0, asr #32
 8016bf8:	00000020 	andeq	r0, r0, r0, lsr #32
 8016bfc:	00000020 	andeq	r0, r0, r0, lsr #32
 8016c00:	000001e0 	andeq	r0, r0, r0, ror #3
 8016c04:	00000040 	andeq	r0, r0, r0, asr #32
 8016c08:	00000020 	andeq	r0, r0, r0, lsr #32
 8016c0c:	00000060 	andeq	r0, r0, r0, rrx
 8016c10:	00000030 	andeq	r0, r0, r0, lsr r0
 8016c14:	00000020 	andeq	r0, r0, r0, lsr #32
 8016c18:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 8016c1c:	00000030 	andeq	r0, r0, r0, lsr r0
 8016c20:	00000040 	andeq	r0, r0, r0, asr #32
 8016c24:	00000020 	andeq	r0, r0, r0, lsr #32
 8016c28:	00000060 	andeq	r0, r0, r0, rrx
 8016c2c:	00000020 	andeq	r0, r0, r0, lsr #32
 8016c30:	00000400 	andeq	r0, r0, r0, lsl #8
 8016c34:	00000020 	andeq	r0, r0, r0, lsr #32
 8016c38:	00000020 	andeq	r0, r0, r0, lsr #32
 8016c3c:	00000040 	andeq	r0, r0, r0, asr #32
 8016c40:	00000060 	andeq	r0, r0, r0, rrx
 8016c44:	00000020 	andeq	r0, r0, r0, lsr #32
 8016c48:	00000020 	andeq	r0, r0, r0, lsr #32
 8016c4c:	000000c0 	andeq	r0, r0, r0, asr #1

08016c50 <vtable for StoreDisplayUdf>:
	...
 8016c58:	0800eb81 	stmdaeq	r0, {r0, r7, r8, r9, fp, sp, lr, pc}
 8016c5c:	0800ebcd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, r9, fp, sp, lr, pc}
 8016c60:	0800eba9 	stmdaeq	r0, {r0, r3, r5, r7, r8, r9, fp, sp, lr, pc}
 8016c64:	0800eb85 	stmdaeq	r0, {r0, r2, r7, r8, r9, fp, sp, lr, pc}

08016c68 <vtable for StoreDmxSend>:
	...
 8016c70:	0800ebed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, fp, sp, lr, pc}
 8016c74:	0800ec39 	stmdaeq	r0, {r0, r3, r4, r5, sl, fp, sp, lr, pc}
 8016c78:	0800ec15 	stmdaeq	r0, {r0, r2, r4, sl, fp, sp, lr, pc}
 8016c7c:	0800ebf1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8, r9, fp, sp, lr, pc}

08016c80 <vtable for StoreNetwork>:
	...
 8016c88:	0800ec59 	stmdaeq	r0, {r0, r3, r4, r6, sl, fp, sp, lr, pc}
 8016c8c:	0800ed6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl, fp, sp, lr, pc}
 8016c90:	0800ec61 	stmdaeq	r0, {r0, r5, r6, sl, fp, sp, lr, pc}
 8016c94:	0800ed81 	stmdaeq	r0, {r0, r7, r8, sl, fp, sp, lr, pc}
 8016c98:	0800ed11 	stmdaeq	r0, {r0, r4, r8, sl, fp, sp, lr, pc}
 8016c9c:	0800ece5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, fp, sp, lr, pc}
 8016ca0:	0800ecb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, sl, fp, sp, lr, pc}
 8016ca4:	0800ed3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, fp, sp, lr, pc}
 8016ca8:	0800ec85 	stmdaeq	r0, {r0, r2, r7, sl, fp, sp, lr, pc}
 8016cac:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8016cb0:	00000000 	andeq	r0, r0, r0
 8016cb4:	0800ec5b 	stmdaeq	r0, {r0, r1, r3, r4, r6, sl, fp, sp, lr, pc}
 8016cb8:	0800ed79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, sl, fp, sp, lr, pc}
 8016cbc:	0800ed35 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, fp, sp, lr, pc}
 8016cc0:	0800ed09 	stmdaeq	r0, {r0, r3, r8, sl, fp, sp, lr, pc}
 8016cc4:	0800ecdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, fp, sp, lr, pc}
 8016cc8:	0800ed65 	stmdaeq	r0, {r0, r2, r5, r6, r8, sl, fp, sp, lr, pc}
 8016ccc:	0800ecad 	stmdaeq	r0, {r0, r2, r3, r5, r7, sl, fp, sp, lr, pc}

08016cd0 <vtable for StoreRDMDevice>:
	...
 8016cd8:	0800edb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, sl, fp, sp, lr, pc}
 8016cdc:	0800ee29 	stmdaeq	r0, {r0, r3, r5, r9, sl, fp, sp, lr, pc}
 8016ce0:	0800edc1 	stmdaeq	r0, {r0, r6, r7, r8, sl, fp, sp, lr, pc}
 8016ce4:	0800ee3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, sl, fp, sp, lr, pc}
 8016ce8:	0800ede5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, fp, sp, lr, pc}
 8016cec:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8016cf0:	00000000 	andeq	r0, r0, r0
 8016cf4:	0800edbb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r8, sl, fp, sp, lr, pc}
 8016cf8:	0800ee35 	stmdaeq	r0, {r0, r2, r4, r5, r9, sl, fp, sp, lr, pc}
 8016cfc:	0800ee21 	stmdaeq	r0, {r0, r5, r9, sl, fp, sp, lr, pc}

08016d00 <vtable for StoreRemoteConfig>:
	...
 8016d08:	0800ee79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, fp, sp, lr, pc}
 8016d0c:	0800eec5 	stmdaeq	r0, {r0, r2, r6, r7, r9, sl, fp, sp, lr, pc}
 8016d10:	0800eea1 	stmdaeq	r0, {r0, r5, r7, r9, sl, fp, sp, lr, pc}
 8016d14:	0800ee7d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r9, sl, fp, sp, lr, pc}

08016d18 <vtable for StoreArtNet>:
	...
 8016d20:	0800eee9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r9, sl, fp, sp, lr, pc}
 8016d24:	0800f179 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, ip, sp, lr, pc}
 8016d28:	0800eef1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r9, sl, fp, sp, lr, pc}
 8016d2c:	0800f159 	stmdaeq	r0, {r0, r3, r4, r6, r8, ip, sp, lr, pc}
 8016d30:	0800f0a5 	stmdaeq	r0, {r0, r2, r5, r7, ip, sp, lr, pc}
 8016d34:	0800f075 	stmdaeq	r0, {r0, r2, r4, r5, r6, ip, sp, lr, pc}
 8016d38:	0800f049 	stmdaeq	r0, {r0, r3, r6, ip, sp, lr, pc}
 8016d3c:	0800ef15 	stmdaeq	r0, {r0, r2, r4, r8, r9, sl, fp, sp, lr, pc}
 8016d40:	0800ef5d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, r9, sl, fp, sp, lr, pc}
 8016d44:	0800ef8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, sl, fp, sp, lr, pc}
 8016d48:	0800efc1 	stmdaeq	r0, {r0, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8016d4c:	0800f005 	stmdaeq	r0, {r0, r2, ip, sp, lr, pc}
 8016d50:	0800f0d9 	stmdaeq	r0, {r0, r3, r4, r6, r7, ip, sp, lr, pc}
 8016d54:	0800eee5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, fp, sp, lr, pc}
 8016d58:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8016d5c:	00000000 	andeq	r0, r0, r0
 8016d60:	0800eeeb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r9, sl, fp, sp, lr, pc}
 8016d64:	0800f185 	stmdaeq	r0, {r0, r2, r7, r8, ip, sp, lr, pc}
 8016d68:	0800f0d1 	stmdaeq	r0, {r0, r4, r6, r7, ip, sp, lr, pc}
 8016d6c:	0800f09d 	stmdaeq	r0, {r0, r2, r3, r4, r7, ip, sp, lr, pc}
 8016d70:	0800f06d 	stmdaeq	r0, {r0, r2, r3, r5, r6, ip, sp, lr, pc}
 8016d74:	0800ef55 	stmdaeq	r0, {r0, r2, r4, r6, r8, r9, sl, fp, sp, lr, pc}
 8016d78:	0800ef85 	stmdaeq	r0, {r0, r2, r7, r8, r9, sl, fp, sp, lr, pc}
 8016d7c:	0800efb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, sl, fp, sp, lr, pc}
 8016d80:	0800eee7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r9, sl, fp, sp, lr, pc}
 8016d84:	0800effd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr, pc}
 8016d88:	0800f041 	stmdaeq	r0, {r0, r6, ip, sp, lr, pc}
 8016d8c:	0800f151 	stmdaeq	r0, {r0, r4, r6, r8, ip, sp, lr, pc}
 8016d90:	3a434d46 	bcc	90ea2b0 <__exidx_end+0x10d2bcc>
 8016d94:	74654420 	strbtvc	r4, [r5], #-1056	; 0xfffffbe0
 8016d98:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 8016d9c:	73252064 			; <UNDEFINED> instruction: 0x73252064
 8016da0:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 8016da4:	6f742068 	svcvs	0x00742068
 8016da8:	206c6174 	rsbcs	r6, ip, r4, ror r1
 8016dac:	62206425 	eorvs	r6, r0, #620756992	; 0x25000000
 8016db0:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
 8016db4:	64255b20 	strtvs	r5, [r5], #-2848	; 0xfffff4e0
 8016db8:	5d426b20 	vstrpl	d22, [r2, #-128]	; 0xffffff80
 8016dbc:	6374000a 	cmnvs	r4, #10
 8016dc0:	65625f70 	strbvs	r5, [r2, #-3952]!	; 0xfffff090
 8016dc4:	3a6e6967 	bcc	9bb1368 <__exidx_end+0x1b99c84>
 8016dc8:	6f6f7420 	svcvs	0x006f7420
 8016dcc:	6e616d20 	cdpvs	13, 6, cr6, cr1, cr0, {1}
 8016dd0:	6f632079 	svcvs	0x00632079
 8016dd4:	63656e6e 	cmnvs	r5, #1760	; 0x6e0
 8016dd8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8016ddc:	69620073 	stmdbvs	r2!, {r0, r1, r4, r5, r6}^
 8016de0:	7500646e 	strvc	r6, [r0, #-1134]	; 0xfffffb92
 8016de4:	6e69626e 	cdpvs	2, 6, cr6, cr9, cr14, {3}
 8016de8:	41000a64 	tstmi	r0, r4, ror #20
 8016dec:	6c205052 	stcvs	0, cr5, [r0], #-328	; 0xfffffeb8
 8016df0:	756b6f6f 	strbvc	r6, [fp, #-3951]!	; 0xfffff091
 8016df4:	61662070 	smcvs	25088	; 0x6200
 8016df8:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
 8016dfc:	203e2d20 	eorscs	r2, lr, r0, lsr #26
 8016e00:	61666564 	cmnvs	r6, r4, ror #10
 8016e04:	20746c75 	rsbscs	r6, r4, r5, ror ip
 8016e08:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8016e0c:	0a796177 	beq	9e6f3f0 <__exidx_end+0x1e57d0c>
 8016e10:	50524100 	subspl	r4, r2, r0, lsl #2
 8016e14:	6f6f6c20 	svcvs	0x006f6c20
 8016e18:	2070756b 	rsbscs	r7, r0, fp, ror #10
 8016e1c:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 8016e20:	000a6465 	andeq	r6, sl, r5, ror #8

08016e24 <NetworkConst::MSG_MDNS_CONFIG>:
 8016e24:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8016e28:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8016e2c:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8016e30:	534e444d 	movtpl	r4, #58445	; 0xe44d
	...

08016e35 <NetworkConst::MSG_NETWORK_INIT>:
 8016e35:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8016e39:	206b726f 	rsbcs	r7, fp, pc, ror #4
 8016e3d:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 8016e41:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 8016e45:	302e302e 	eorcc	r3, lr, lr, lsr #32
 8016e49:	3135322e 	teqcc	r5, lr, lsr #4
 8016e4d:	63745f00 	cmnvs	r4, #0, 30
 8016e51:	6f6c2e70 	svcvs	0x006c2e70
 8016e55:	006c6163 	rsbeq	r6, ip, r3, ror #2
 8016e59:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 8016e5d:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 8016e61:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 8016e69 <NetworkConst::MSG_NETWORK_INIT+0x34>
 8016e65:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 8016e69:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 801600d <styles_css+0x12d>
 8016e6d:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 8016e71:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 8016e75:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 8016e79:	20000a53 	andcs	r0, r0, r3, asr sl
 8016e7d:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8016e81:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 8016e85:	0a676e69 	beq	99f2831 <__exidx_end+0x19db14d>
 8016e89:	614e2000 	mrsvs	r2, (UNDEF: 78)
 8016e8d:	3a20656d 	bcc	8830449 <__exidx_end+0x818d65>
 8016e91:	0a732520 	beq	9ce0319 <__exidx_end+0x1cc8c35>
 8016e95:	73252000 			; <UNDEFINED> instruction: 0x73252000
 8016e99:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8016e9d:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016ea1:	30687465 	rsbcc	r7, r8, r5, ror #8
 8016ea5:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 8016ea9:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 8016ead:	5f656369 	svcpl	0x00656369
 8016eb1:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 8016eb5:	6b726f77 	blvs	9cb2c99 <__exidx_end+0x1c9b5b5>
 8016eb9:	4820000a 	stmdami	r0!, {r1, r3}
 8016ebd:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 8016ec1:	20656d61 	rsbcs	r6, r5, r1, ror #26
 8016ec5:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016ec9:	20000a73 	andcs	r0, r0, r3, ror sl
 8016ecd:	614e6649 	cmpvs	lr, r9, asr #12
 8016ed1:	2020656d 	eorcs	r6, r0, sp, ror #10
 8016ed5:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016ed9:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8016edd:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016ee1:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 8016ee5:	20202074 	eorcs	r2, r0, r4, ror r0
 8016ee9:	3a202020 	bcc	881ef71 <__exidx_end+0x80788d>
 8016eed:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8016ef1:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016ef5:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016ef9:	0a64252f 	beq	99203bd <__exidx_end+0x1908cd9>
 8016efd:	654e2000 	strbvs	r2, [lr, #-0]
 8016f01:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 8016f05:	2020206b 	eorcs	r2, r0, fp, rrx
 8016f09:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016f0d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016f11:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016f15:	20000a64 	andcs	r0, r0, r4, ror #20
 8016f19:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 8016f1d:	20796177 	rsbscs	r6, r9, r7, ror r1
 8016f21:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016f25:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016f29:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016f2d:	0a64252e 	beq	99203ed <__exidx_end+0x1908d09>
 8016f31:	72422000 	subvc	r2, r2, #0
 8016f35:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 8016f39:	20747361 	rsbscs	r7, r4, r1, ror #6
 8016f3d:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8016f41:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016f45:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016f49:	20000a64 	andcs	r0, r0, r4, ror #20
 8016f4d:	2063614d 	rsbcs	r6, r3, sp, asr #2
 8016f51:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016f55:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016f59:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016f5d:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8016f61:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 8016f65:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 8016f69:	3a78322e 	bcc	9e23829 <__exidx_end+0x1e0c145>
 8016f6d:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 8016f71:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 8016f75:	20000a78 	andcs	r0, r0, r8, ror sl
 8016f79:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 8016f7d:	20202020 	eorcs	r2, r0, r0, lsr #32
 8016f81:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016f85:	000a6325 	andeq	r6, sl, r5, lsr #6
 8016f89:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 8016f8d:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 8016f91:	 	rsbvc	r0, r9, r0, asr r0

08016f93 <NetworkParamsConst::IP_ADDRESS>:
 8016f93:	615f7069 	cmpvs	pc, r9, rrx
 8016f97:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 8016f9b:	 	strvs	r7, [r0], #-883	; 0xfffffc8d

08016f9e <NetworkParamsConst::DEFAULT_GATEWAY>:
 8016f9e:	61666564 	cmnvs	r6, r4, ror #10
 8016fa2:	5f746c75 	svcpl	0x00746c75
 8016fa6:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 8016faa:	00796177 	rsbseq	r6, r9, r7, ror r1

08016fae <NetworkParamsConst::DHCP_RETRY_TIME>:
 8016fae:	70636864 	rsbvc	r6, r3, r4, ror #16
 8016fb2:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8016fb6:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8016fbe <NetworkParamsConst::HOSTNAME>
 8016fba:	00656d69 	rsbeq	r6, r5, r9, ror #26

08016fbe <NetworkParamsConst::HOSTNAME>:
 8016fbe:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8016fc2:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08016fc7 <NetworkParamsConst::NET_MASK>:
 8016fc7:	5f74656e 	svcpl	0x0074656e
 8016fcb:	6b73616d 	blvs	9cef587 <__exidx_end+0x1cd7ea3>
	...

08016fd0 <NetworkParamsConst::USE_DHCP>:
 8016fd0:	5f657375 	svcpl	0x00657375
 8016fd4:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

08016fd9 <NetworkParamsConst::FILE_NAME>:
 8016fd9:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8016fdd:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8016fe1:	00747874 	rsbseq	r7, r4, r4, ror r8
 8016fe5:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 8016fe9:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 8016fed:	61747320 	cmnvs	r4, r0, lsr #6
 8016ff1:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8016ff5:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016ff9:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016ffd:	252f6425 	strcs	r6, [pc, #-1061]!	; 8016be0 <s_aStorSize>
 8017001:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8017005:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 8017009:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801700d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017011:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8017015:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 8017019:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801701d:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017021:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8017025:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 8017029:	20657261 	rsbcs	r7, r5, r1, ror #4
 801702d:	2a2e2556 	bcs	8ba058d <__exidx_end+0xb88ea9>
 8017031:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 8017035:	72205043 	eorvc	r5, r0, #67	; 0x43
 8017039:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 801703d:	00676e69 	rsbeq	r6, r7, r9, ror #28
 8017041:	50434844 	subpl	r4, r3, r4, asr #16
 8017045:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 8017049:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 801704d:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 8017051:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8017055:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 8017059:	6f647475 	svcvs	0x00647475
 801705d:	 			; <UNDEFINED> instruction: 0xf4006e77

08017060 <pArray>:
 8017060:	080170f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, ip, sp, lr}
 8017064:	080170b0 	stmdaeq	r1, {r4, r5, r7, ip, sp, lr}
 8017068:	08016f93 	stmdaeq	r1, {r0, r1, r4, r7, r8, r9, sl, fp, sp, lr}
 801706c:	080170fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, ip, sp, lr}
 8017070:	08017255 	stmdaeq	r1, {r0, r2, r4, r6, r9, ip, sp, lr}
 8017074:	080170bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, ip, sp, lr}
 8017078:	080167b7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r7, r8, r9, sl, sp, lr}
 801707c:	08016fbe 	stmdaeq	r1, {r1, r2, r3, r4, r5, r7, r8, r9, sl, fp, sp, lr}
 8017080:	0801719c 	stmdaeq	r1, {r2, r3, r4, r7, r8, ip, sp, lr}
 8017084:	080171ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, ip, sp, lr}
 8017088:	080171bc 	stmdaeq	r1, {r2, r3, r4, r5, r7, r8, ip, sp, lr}
 801708c:	080171cc 	stmdaeq	r1, {r2, r3, r6, r7, r8, ip, sp, lr}
 8017090:	08016fc7 	stmdaeq	r1, {r0, r1, r2, r6, r7, r8, r9, sl, fp, sp, lr}
 8017094:	08017224 	stmdaeq	r1, {r2, r5, r9, ip, sp, lr}
 8017098:	0801680a 	stmdaeq	r1, {r1, r3, fp, sp, lr}
 801709c:	08016822 	stmdaeq	r1, {r1, r5, fp, sp, lr}
 80170a0:	0801683a 	stmdaeq	r1, {r1, r3, r4, r5, fp, sp, lr}
 80170a4:	08016852 	stmdaeq	r1, {r1, r4, r6, fp, sp, lr}
 80170a8:	08016f9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, r9, sl, fp, sp, lr}
 80170ac:	080170c8 	stmdaeq	r1, {r3, r6, r7, ip, sp, lr}

080170b0 <DisplayUdfParamsConst::BOARD_NAME>:
 80170b0:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 80170b4:	616e5f64 	cmnvs	lr, r4, ror #30
 80170b8:	 	tstvs	r0, sp, ror #10

080170bb <DisplayUdfParamsConst::ACTIVE_PORTS>:
 80170bb:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 80170bf:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 80170c3:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

080170c8 <DisplayUdfParamsConst::DMX_DIRECTION>:
 80170c8:	5f786d64 	svcpl	0x00786d64
 80170cc:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80170d0:	6f697463 	svcvs	0x00697463
 80170d4:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

080170d6 <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 80170d6:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 80170da:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 80170de:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8016b79 <vtable for DmxSend+0x9>
 80170e2:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

080170e4 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 80170e4:	70696c66 	rsbvc	r6, r9, r6, ror #24
 80170e8:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 80170ec:	61636974 	smcvs	13972	; 0x3694
 80170f0:	00796c6c 	rsbseq	r6, r9, ip, ror #24

080170f4 <DisplayUdfParamsConst::TITLE>:
 80170f4:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 80170f8:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

080170fa <DisplayUdfParamsConst::VERSION>:
 80170fa:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80170fe:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08017102 <DisplayUdfParamsConst::FILE_NAME>:
 8017102:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8017106:	2e79616c 	rpwcsez	f6, f1, #4.0
 801710a:	00747874 	rsbseq	r7, r4, r4, ror r8

0801710e <DisplayUdfParamsConst::INTENSITY>:
 801710e:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8017112:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8017116:	20200079 	eorcs	r0, r0, r9, ror r0
 801711a:	4f002020 	svcmi	0x00002020
 801711e:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8017122:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8017126:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 801712a:	20632520 	rsbcs	r2, r3, r0, lsr #10
 801712e:	4f007325 	svcmi	0x00007325
 8017132:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8017136:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 801713a:	3a64253a 	bcc	992062a <__exidx_end+0x1908f46>
 801713e:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8017142:	73252063 			; <UNDEFINED> instruction: 0x73252063
 8017146:	3a632500 	bcc	98e054e <__exidx_end+0x18c8e6a>
 801714a:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801714e:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017152:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017156:	3a504100 	bcc	942755e <__exidx_end+0x140fe7a>
 801715a:	00642520 	rsbeq	r2, r4, r0, lsr #10
 801715e:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 8017162:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8017166:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 801716a:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
 801716e:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8017172:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8017176:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801717a:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801717e:	2c226425 	cfstrscs	mvf6, [r2], #-148	; 0xffffff6c
 8017182:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8017186:	2e64253d 	mcrcs	5, 3, r2, cr4, cr13, {1}
 801718a:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801718e:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017192:	2023000a 	eorcs	r0, r3, sl
 8017196:	23207325 			; <UNDEFINED> instruction: 0x23207325
 801719a:	 	cdpvs	0, 7, cr0, cr5, cr10, {0}

0801719c <LightSetParamsConst::UNIVERSE_PORT>:
 801719c:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80171a0:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80171a4:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80171a8:	00615f74 	rsbeq	r5, r1, r4, ror pc
 80171ac:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80171b0:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80171b4:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80171b8:	00625f74 	rsbeq	r5, r2, r4, ror pc
 80171bc:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80171c0:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80171c4:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80171c8:	00635f74 	rsbeq	r5, r3, r4, ror pc
 80171cc:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 80171d0:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 80171d4:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80171d8:	00645f74 	rsbeq	r5, r4, r4, ror pc

080171dc <LightSetParamsConst::MERGE_MODE_PORT>:
 80171dc:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80171e0:	6f6d5f65 	svcvs	0x006d5f65
 80171e4:	705f6564 	subsvc	r6, pc, r4, ror #10
 80171e8:	5f74726f 	svcpl	0x0074726f
 80171ec:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 80171f0:	5f656772 	svcpl	0x00656772
 80171f4:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 80171f8:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 80171fc:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8017200:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017204:	6f6d5f65 	svcvs	0x006d5f65
 8017208:	705f6564 	subsvc	r6, pc, r4, ror #10
 801720c:	5f74726f 	svcpl	0x0074726f
 8017210:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 8017214:	5f656772 	svcpl	0x00656772
 8017218:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 801721c:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017220:	00645f74 	rsbeq	r5, r4, r4, ror pc

08017224 <LightSetParamsConst::DMX_START_ADDRESS>:
 8017224:	5f786d64 	svcpl	0x00786d64
 8017228:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 801722c:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8017230:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 8017234:	 	stmdbvs	r4!, {r0, r1, r4, r5, r6}^

08017236 <LightSetParamsConst::DISABLE_MERGE_TIMEOUT>:
 8017236:	61736964 	cmnvs	r3, r4, ror #18
 801723a:	5f656c62 	svcpl	0x00656c62
 801723e:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017242:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 8017246:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8016ce1 <vtable for StoreRDMDevice+0x11>
 801724a:	 	smcvs	24580	; 0x6004

0801724c <LightSetParamsConst::FAILSAFE>:
 801724c:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
 8017250:	65666173 	strbvs	r6, [r6, #-371]!	; 0xfffffe8d
	...

08017255 <LightSetParamsConst::UNIVERSE>:
 8017255:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017259:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

0801725e <LightSetParamsConst::DIRECTION>:
 801725e:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017262:	6f697463 	svcvs	0x00697463
 8017266:	6f705f6e 	svcvs	0x00705f6e
 801726a:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 801726e:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8017272:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8017276:	5f6e6f69 	svcpl	0x006e6f69
 801727a:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 801727e:	0000625f 	andeq	r6, r0, pc, asr r2
 8017282:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017286:	6f697463 	svcvs	0x00697463
 801728a:	6f705f6e 	svcvs	0x00705f6e
 801728e:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 8017292:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8017296:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 801729a:	5f6e6f69 	svcpl	0x006e6f69
 801729e:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 80172a2:	0000645f 	andeq	r6, r0, pc, asr r4
 80172a6:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 80172aa:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 80172ae:	66207961 	strtvs	r7, [r0], -r1, ror #18
 80172b2:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 80172b6:	31485300 	mrscc	r5, (UNDEF: 120)
 80172ba:	00363031 	eorseq	r3, r6, r1, lsr r0
 80172be:	31445353 	cmpcc	r4, r3, asr r3
 80172c2:	00363033 	eorseq	r3, r6, r3, lsr r0
 80172c6:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 80172ca:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 80172ce:	000a2964 	andeq	r2, sl, r4, ror #18
 80172d2:	aaeeaa40 	bge	7bc1bda <__stack_size+0x7bbfbda>
 80172d6:	 	subeq	r0, r0, lr, ror #1

080172d8 <_OledFont8x6>:
 80172d8:	00000040 	andeq	r0, r0, r0, asr #32
 80172dc:	40000000 	andmi	r0, r0, r0
 80172e0:	005f0000 	subseq	r0, pc, r0
 80172e4:	00400000 	subeq	r0, r0, r0
 80172e8:	00070007 	andeq	r0, r7, r7
 80172ec:	7f144000 	svcvc	0x00144000
 80172f0:	00147f14 	andseq	r7, r4, r4, lsl pc
 80172f4:	7f2a2440 	svcvc	0x002a2440
 80172f8:	4000122a 	andmi	r1, r0, sl, lsr #4
 80172fc:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8017300:	36400062 	strbcc	r0, [r0], -r2, rrx
 8017304:	50205649 	eorpl	r5, r0, r9, asr #12
 8017308:	08004000 	stmdaeq	r0, {lr}
 801730c:	00000307 	andeq	r0, r0, r7, lsl #6
 8017310:	221c0040 	andscs	r0, ip, #64	; 0x40
 8017314:	40000041 	andmi	r0, r0, r1, asr #32
 8017318:	1c224100 	stfnes	f4, [r2], #-0
 801731c:	2a400000 	bcs	9017324 <__exidx_end+0xfffc40>
 8017320:	2a1c7f1c 	bcs	8736f98 <__exidx_end+0x71f8b4>
 8017324:	08084000 	stmdaeq	r8, {lr}
 8017328:	0008083e 	andeq	r0, r8, lr, lsr r8
 801732c:	70800040 	addvc	r0, r0, r0, asr #32
 8017330:	40000030 	andmi	r0, r0, r0, lsr r0
 8017334:	08080808 	stmdaeq	r8, {r3, fp}
 8017338:	00400008 	subeq	r0, r0, r8
 801733c:	00606000 	rsbeq	r6, r0, r0
 8017340:	10204000 	eorne	r4, r0, r0
 8017344:	00020408 	andeq	r0, r2, r8, lsl #8
 8017348:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 801734c:	40003e45 	andmi	r3, r0, r5, asr #28
 8017350:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8017354:	72400000 	subvc	r0, r0, #0
 8017358:	46494949 	strbmi	r4, [r9], -r9, asr #18
 801735c:	41214000 			; <UNDEFINED> instruction: 0x41214000
 8017360:	00334d49 	eorseq	r4, r3, r9, asr #26
 8017364:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8017368:	4000107f 	andmi	r1, r0, pc, ror r0
 801736c:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8017370:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8017374:	3149494a 	cmpcc	r9, sl, asr #18
 8017378:	21414000 	mrscs	r4, (UNDEF: 65)
 801737c:	00070911 	andeq	r0, r7, r1, lsl r9
 8017380:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8017384:	40003649 	andmi	r3, r0, r9, asr #12
 8017388:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 801738c:	0040001e 	subeq	r0, r0, lr, lsl r0
 8017390:	00001400 	andeq	r1, r0, r0, lsl #8
 8017394:	40004000 	andmi	r4, r0, r0
 8017398:	00000034 	andeq	r0, r0, r4, lsr r0
 801739c:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 80173a0:	40004122 	andmi	r4, r0, r2, lsr #2
 80173a4:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 80173a8:	00400014 	subeq	r0, r0, r4, lsl r0
 80173ac:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 80173b0:	01024000 	mrseq	r4, (UNDEF: 2)
 80173b4:	00060959 	andeq	r0, r6, r9, asr r9
 80173b8:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 80173bc:	40004e59 	andmi	r4, r0, r9, asr lr
 80173c0:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 80173c4:	7f40007c 	svcvc	0x0040007c
 80173c8:	36494949 	strbcc	r4, [r9], -r9, asr #18
 80173cc:	413e4000 	teqmi	lr, r0
 80173d0:	00224141 	eoreq	r4, r2, r1, asr #2
 80173d4:	41417f40 	cmpmi	r1, r0, asr #30
 80173d8:	40003e41 	andmi	r3, r0, r1, asr #28
 80173dc:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 80173e0:	7f400041 	svcvc	0x00400041
 80173e4:	01090909 	tsteq	r9, r9, lsl #18
 80173e8:	413e4000 	teqmi	lr, r0
 80173ec:	00735141 	rsbseq	r5, r3, r1, asr #2
 80173f0:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 80173f4:	40007f08 	andmi	r7, r0, r8, lsl #30
 80173f8:	417f4100 	cmnmi	pc, r0, lsl #2
 80173fc:	20400000 	subcs	r0, r0, r0
 8017400:	013f4140 	teqeq	pc, r0, asr #2
 8017404:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8017408:	00412214 	subeq	r2, r1, r4, lsl r2
 801740c:	40407f40 	submi	r7, r0, r0, asr #30
 8017410:	40004040 	andmi	r4, r0, r0, asr #32
 8017414:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 8017418:	7f40007f 	svcvc	0x0040007f
 801741c:	7f100804 	svcvc	0x00100804
 8017420:	413e4000 	teqmi	lr, r0
 8017424:	003e4141 	eorseq	r4, lr, r1, asr #2
 8017428:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 801742c:	40000609 	andmi	r0, r0, r9, lsl #12
 8017430:	2151413e 	cmpcs	r1, lr, lsr r1
 8017434:	7f40005e 	svcvc	0x0040005e
 8017438:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 801743c:	49264000 	stmdbmi	r6!, {lr}
 8017440:	00324949 	eorseq	r4, r2, r9, asr #18
 8017444:	7f010340 	svcvc	0x00010340
 8017448:	40000301 	andmi	r0, r0, r1, lsl #6
 801744c:	4040403f 	submi	r4, r0, pc, lsr r0
 8017450:	1f40003f 	svcne	0x0040003f
 8017454:	1f204020 	svcne	0x00204020
 8017458:	403f4000 	eorsmi	r4, pc, r0
 801745c:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 8017460:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 8017464:	40006314 	andmi	r6, r0, r4, lsl r3
 8017468:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 801746c:	61400003 	cmpvs	r0, r3
 8017470:	434d4959 	movtmi	r4, #55641	; 0xd959
 8017474:	7f004000 	svcvc	0x00004000
 8017478:	00414141 	subeq	r4, r1, r1, asr #2
 801747c:	08040240 	stmdaeq	r4, {r6, r9}
 8017480:	40002010 	andmi	r2, r0, r0, lsl r0
 8017484:	41414100 	mrsmi	r4, (UNDEF: 81)
 8017488:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 801748c:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 8017490:	40404000 	submi	r4, r0, r0
 8017494:	00404040 	subeq	r4, r0, r0, asr #32
 8017498:	07030040 	streq	r0, [r3, -r0, asr #32]
 801749c:	40000008 	andmi	r0, r0, r8
 80174a0:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 80174a4:	7f400040 	svcvc	0x00400040
 80174a8:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 80174ac:	44384000 	ldrtmi	r4, [r8], #-0
 80174b0:	00284444 	eoreq	r4, r8, r4, asr #8
 80174b4:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 80174b8:	40007f28 	andmi	r7, r0, r8, lsr #30
 80174bc:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 80174c0:	00400018 	subeq	r0, r0, r8, lsl r0
 80174c4:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 80174c8:	a4184000 	ldrge	r4, [r8], #-0
 80174cc:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 80174d0:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 80174d4:	40007804 	andmi	r7, r0, r4, lsl #16
 80174d8:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 80174dc:	20400000 	subcs	r0, r0, r0
 80174e0:	003d4040 	eorseq	r4, sp, r0, asr #32
 80174e4:	107f4000 	rsbsne	r4, pc, r0
 80174e8:	00004428 	andeq	r4, r0, r8, lsr #8
 80174ec:	7f410040 	svcvc	0x00410040
 80174f0:	40000040 	andmi	r0, r0, r0, asr #32
 80174f4:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 80174f8:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 80174fc:	78040408 	stmdavc	r4, {r3, sl}
 8017500:	44384000 	ldrtmi	r4, [r8], #-0
 8017504:	00384444 	eorseq	r4, r8, r4, asr #8
 8017508:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 801750c:	40001824 	andmi	r1, r0, r4, lsr #16
 8017510:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8017514:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 8017518:	08040408 	stmdaeq	r4, {r3, sl}
 801751c:	54484000 	strbpl	r4, [r8], #-0
 8017520:	00245454 	eoreq	r5, r4, r4, asr r4
 8017524:	3f040440 	svccc	0x00040440
 8017528:	40002444 	andmi	r2, r0, r4, asr #8
 801752c:	2040403c 	subcs	r4, r0, ip, lsr r0
 8017530:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8017534:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 8017538:	403c4000 	eorsmi	r4, ip, r0
 801753c:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8017540:	10284440 	eorne	r4, r8, r0, asr #8
 8017544:	40004428 	andmi	r4, r0, r8, lsr #8
 8017548:	9090904c 	addsls	r9, r0, ip, asr #32
 801754c:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 8017550:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 8017554:	08004000 	stmdaeq	r0, {lr}
 8017558:	00004136 	andeq	r4, r0, r6, lsr r1
 801755c:	77000040 	strvc	r0, [r0, -r0, asr #32]
 8017560:	40000000 	andmi	r0, r0, r0
 8017564:	08364100 	ldmdaeq	r6!, {r8, lr}
 8017568:	02400000 	subeq	r0, r0, #0
 801756c:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 8017570:	263c4000 	ldrtcs	r4, [ip], -r0
 8017574:	003c2623 	eorseq	r2, ip, r3, lsr #12

08017578 <oled_128x32_init>:
 8017578:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 801757c:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8017580:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8017584:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 8017588:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 801758c:	a6a440db 	ssatge	r4, #5, fp, asr #1

08017590 <oled_128x64_init>:
 8017590:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8017594:	4000d33f 	andmi	sp, r0, pc, lsr r3
 8017598:	0020148d 	eoreq	r1, r0, sp, lsl #9
 801759c:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 80175a0:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 80175a4:	a6a440db 	ssatge	r4, #5, fp, asr #1

080175a8 <vtable for Ssd1306>:
	...
 80175b0:	080123c9 	stmdaeq	r1, {r0, r3, r6, r7, r8, r9, sp}
 80175b4:	080123f5 	stmdaeq	r1, {r0, r2, r4, r5, r6, r7, r8, r9, sp}
 80175b8:	08012705 	stmdaeq	r1, {r0, r2, r8, r9, sl, sp}
 80175bc:	0801268d 	stmdaeq	r1, {r0, r2, r3, r7, r9, sl, sp}
 80175c0:	08012559 	stmdaeq	r1, {r0, r3, r4, r6, r8, sl, sp}
 80175c4:	08012415 	stmdaeq	r1, {r0, r2, r4, sl, sp}
 80175c8:	0801243d 	stmdaeq	r1, {r0, r2, r3, r4, r5, sl, sp}
 80175cc:	0801252f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, sl, sp}
 80175d0:	080124e9 	stmdaeq	r1, {r0, r3, r5, r6, r7, sl, sp}
 80175d4:	080123cb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r8, r9, sp}
 80175d8:	08012595 	stmdaeq	r1, {r0, r2, r4, r7, r8, sl, sp}
 80175dc:	080125a1 	stmdaeq	r1, {r0, r5, r7, r8, sl, sp}
 80175e0:	080125bb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r8, sl, sp}
 80175e4:	080123cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, sp}
 80175e8:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 80175ec:	5b1b006d 	blpl	86d77a8 <__exidx_end+0x6c00c4>
 80175f0:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 80175f4:	31335b1b 	teqcc	r3, fp, lsl fp
 80175f8:	5b1b006d 	blpl	86d77b4 <__exidx_end+0x6c00d0>
 80175fc:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8017600:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8017604:	5b1b006d 	blpl	86d77c0 <__exidx_end+0x6c00dc>
 8017608:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 801760c:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 8017610:	205d732a 	subscs	r7, sp, sl, lsr #6
 8017614:	43207325 			; <UNDEFINED> instruction: 0x43207325
 8017618:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 801761c:	2064656c 	rsbcs	r6, r4, ip, ror #10
 8017620:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 8017624:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 8017628:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 801762c:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 8017630:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8017634:	203a636f 	eorscs	r6, sl, pc, ror #6
 8017638:	000a7525 	andeq	r7, sl, r5, lsr #10
 801763c:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 8017640:	203a636f 	eorscs	r6, sl, pc, ror #6
 8017644:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 8017648:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 801764c:	6b636f6c 	blvs	98f3404 <__exidx_end+0x18dbd20>
 8017650:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 8017654:	000a7469 	andeq	r7, sl, r9, ror #8
 8017658:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 801765c:	203a636f 	eorscs	r6, sl, pc, ror #6
 8017660:	6f6c4270 	svcvs	0x006c4270
 8017664:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 8017668:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 801766c:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 8017670:	7a697320 	bvc	9a742f8 <__exidx_end+0x1a5cc14>
 8017674:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 8017678:	6164202c 	cmnvs	r4, ip, lsr #32
 801767c:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 8017680:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 8017684:	3a656572 	bcc	9970c54 <__exidx_end+0x1959570>
 8017688:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 801768c:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017690:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8017694:	203d2072 	eorscs	r2, sp, r2, ror r0
 8017698:	202c7025 	eorcs	r7, ip, r5, lsr #32
 801769c:	6f6c4270 	svcvs	0x006c4270
 80176a0:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 80176a4:	0a702520 	beq	9c20b2c <__exidx_end+0x1c09448>
 80176a8:	00000000 	andeq	r0, r0, r0

080176ac <days_of_month>:
 80176ac:	0000001f 	andeq	r0, r0, pc, lsl r0
 80176b0:	0000001c 	andeq	r0, r0, ip, lsl r0
 80176b4:	0000001f 	andeq	r0, r0, pc, lsl r0
 80176b8:	0000001e 	andeq	r0, r0, lr, lsl r0
 80176bc:	0000001f 	andeq	r0, r0, pc, lsl r0
 80176c0:	0000001e 	andeq	r0, r0, lr, lsl r0
 80176c4:	0000001f 	andeq	r0, r0, pc, lsl r0
 80176c8:	0000001f 	andeq	r0, r0, pc, lsl r0
 80176cc:	0000001e 	andeq	r0, r0, lr, lsl r0
 80176d0:	0000001f 	andeq	r0, r0, pc, lsl r0
 80176d4:	0000001e 	andeq	r0, r0, lr, lsl r0
 80176d8:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

080176dc <__exidx_start>:
 80176dc:	7fffd9d8 	svcvc	0x00ffd9d8
 80176e0:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

080176e4 <.ARM.attributes>:
 80176e4:	00002e41 	andeq	r2, r0, r1, asr #28
 80176e8:	61656100 	cmnvs	r5, r0, lsl #2
 80176ec:	01006962 	tsteq	r0, r2, ror #18
 80176f0:	00000024 	andeq	r0, r0, r4, lsr #32
 80176f4:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 80176f8:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 80176fc:	0600334d 	streq	r3, [r0], -sp, asr #6
 8017700:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8017704:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 8017708:	17011501 	strne	r1, [r1, -r1, lsl #10]
 801770c:	1a011803 	bne	805d720 <__exidx_end+0x4603c>
 8017710:	Address 0x0000000008017710 is out of bounds.


Disassembly of section .data:

20000000 <s_nDmxTransmitPeriod>:
20000000:	000061a8 	andeq	r6, r0, r8, lsr #3

20000004 <s_nDmxTransmitMabTime>:
20000004:	0000000c 	andeq	r0, r0, ip

20000008 <s_nDmxTransmitBreakTime>:
20000008:	0000005c 	andeq	r0, r0, ip, asr r0

2000000c <DmxConfigUdp::s_nHandle>:
2000000c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

20000010 <s_multicast_mac>:
20000010:	005e0001 	subseq	r0, lr, r1
20000014:	00000000 	andeq	r0, r0, r0

20000018 <MDNS::s_nHandle>:
20000018:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000001c <next_block>:
2000001c:	20015800 	andcs	r5, r1, r0, lsl #16

20000020 <s_block_bucket>:
20000020:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000030:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000040:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000050:	00000060 	andeq	r0, r0, r0, rrx
	...
20000060:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000070:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000080:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000090:	00000180 	andeq	r0, r0, r0, lsl #3
	...
200000a0:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000b0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000c0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000d0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000f0 <SystemCoreClock>:
200000f0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000f8 <DmxInput::s_nStarted>:
200000f8:	00000000 	andeq	r0, r0, r0

200000fc <RemoteConfig::s_pUdpBuffer>:
200000fc:	00000000 	andeq	r0, r0, r0

20000100 <RemoteConfig::s_RemoteConfigListBin>:
	...

20000124 <RemoteConfig::s_pThis>:
20000124:	00000000 	andeq	r0, r0, r0

20000128 <HttpDaemon::m_Content>:
	...

200006c8 <guard variable for lightset::Data::Get()::instance>:
200006c8:	00000000 	andeq	r0, r0, r0

200006cc <lightset::Data::Get()::instance>:
	...

20000cd0 <ArtNetNode::s_pThis>:
20000cd0:	00000000 	andeq	r0, r0, r0

20000cd4 <s_ReceivingMask>:
20000cd4:	00000000 	andeq	r0, r0, r0

20000cd8 <ip>:
20000cd8:	00000000 	andeq	r0, r0, r0

20000cdc <ip>:
20000cdc:	00000000 	andeq	r0, r0, r0

20000ce0 <s_nPortsMax>:
20000ce0:	00000000 	andeq	r0, r0, r0

20000ce4 <E131Bridge::s_pThis>:
20000ce4:	00000000 	andeq	r0, r0, r0

20000ce8 <s_ReceivingMask>:
20000ce8:	00000000 	andeq	r0, r0, r0

20000cec <s_nPortsMax>:
20000cec:	00000000 	andeq	r0, r0, r0

20000cf0 <ArtNetRdmController::s_rdmMessage>:
	...

20000df0 <ArtNetRdmController::s_nPorts>:
20000df0:	00000000 	andeq	r0, r0, r0

20000df4 <ArtNetRdmController::m_pRDMTod>:
20000df4:	00000000 	andeq	r0, r0, r0

20000df8 <uuid_cast>:
	...

20000e00 <DmxSend::s_nStarted>:
20000e00:	00000000 	andeq	r0, r0, r0

20000e04 <s_RxBuffer>:
	...

20001014 <s_TxBuffer>:
	...

20001218 <sv_PortState>:
20001218:	00000000 	andeq	r0, r0, r0

2000121c <sv_nRxDmxPackets>:
	...

2000122c <sv_nUartsSending>:
2000122c:	00000000 	andeq	r0, r0, r0

20001230 <Dmx::s_pThis>:
20001230:	00000000 	andeq	r0, r0, r0

20001234 <gv_RdmDataReceiveEnd>:
20001234:	00000000 	andeq	r0, r0, r0

20001238 <s_nLastSendMicros>:
20001238:	00000000 	andeq	r0, r0, r0

2000123c <s_TransactionNumber>:
2000123c:	00000000 	andeq	r0, r0, r0

20001240 <DmxConfigUdp::s_pUdpBuffer>:
20001240:	00000000 	andeq	r0, r0, r0

20001244 <SpiFlashStore::s_nWaitMillis>:
20001244:	00000000 	andeq	r0, r0, r0

20001248 <SpiFlashStore::s_SpiFlashData>:
	...

20002248 <SpiFlashStore::s_nStartAddress>:
20002248:	00000000 	andeq	r0, r0, r0

2000224c <SpiFlashStore::s_bHaveFlashChip>:
2000224c:	00000000 	andeq	r0, r0, r0

20002250 <SpiFlashStore::s_nSpiFlashStoreSize>:
20002250:	00000000 	andeq	r0, r0, r0

20002254 <SpiFlashStore::s_State>:
20002254:	00000000 	andeq	r0, r0, r0

20002258 <SpiFlashStore::s_pThis>:
20002258:	00000000 	andeq	r0, r0, r0

2000225c <SpiFlashStore::s_bIsNew>:
2000225c:	00000000 	andeq	r0, r0, r0

20002260 <StoreDisplayUdf::s_pThis>:
20002260:	00000000 	andeq	r0, r0, r0

20002264 <StoreDmxSend::s_pThis>:
20002264:	00000000 	andeq	r0, r0, r0

20002268 <StoreNetwork::s_pThis>:
20002268:	00000000 	andeq	r0, r0, r0

2000226c <StoreRDMDevice::s_pThis>:
2000226c:	00000000 	andeq	r0, r0, r0

20002270 <StoreRemoteConfig::s_pThis>:
20002270:	00000000 	andeq	r0, r0, r0

20002274 <StoreArtNet::s_nPortIndexOffset>:
20002274:	00000000 	andeq	r0, r0, r0

20002278 <StoreArtNet::s_pThis>:
20002278:	00000000 	andeq	r0, r0, r0

2000227c <StoreE131::s_pThis>:
2000227c:	00000000 	andeq	r0, r0, r0

20002280 <FlashRom::s_pThis>:
20002280:	00000000 	andeq	r0, r0, r0

20002284 <flashrom::s_nAddress>:
20002284:	00000000 	andeq	r0, r0, r0

20002288 <flashrom::s_State>:
20002288:	00000000 	andeq	r0, r0, r0

2000228c <flashrom::s_nPage>:
2000228c:	00000000 	andeq	r0, r0, r0

20002290 <flashrom::s_pData>:
20002290:	00000000 	andeq	r0, r0, r0

20002294 <flashrom::s_isBank0>:
20002294:	00000000 	andeq	r0, r0, r0

20002298 <flashrom::s_nLength>:
20002298:	00000000 	andeq	r0, r0, r0

2000229c <g_ip_info>:
	...

200022a8 <g_mac_address>:
200022a8:	00000000 	andeq	r0, r0, r0
	...

200022ae <s_is_dhcp>:
	...

200022b0 <s_p>:
200022b0:	00000000 	andeq	r0, r0, r0

200022b4 <s_ticker>:
200022b4:	00000000 	andeq	r0, r0, r0

200022b8 <s_mac_address>:
	...

200022c0 <s_mac_address_arp_reply>:
	...

200022c8 <s_id>:
200022c8:	00000000 	andeq	r0, r0, r0

200022cc <s_recv_queue>:
	...

20002e3c <s_tcb>:
	...

20002e80 <s_tcp>:
	...

2000346c <broadcast_mask>:
2000346c:	00000000 	andeq	r0, r0, r0

20003470 <gw_ip>:
20003470:	00000000 	andeq	r0, r0, r0

20003474 <on_network_mask>:
20003474:	00000000 	andeq	r0, r0, r0

20003478 <s_id>:
20003478:	00000000 	andeq	r0, r0, r0

2000347c <s_ports_allowed>:
	...

2000349c <s_recv_queue>:
	...

2000913c <s_send_packet>:
	...

20009728 <MDNS::s_nRemoteIp>:
20009728:	00000000 	andeq	r0, r0, r0

2000972c <MDNS::s_nRemotePort>:
2000972c:	00000000 	andeq	r0, r0, r0

20009730 <MDNS::s_nMulticastIp>:
20009730:	00000000 	andeq	r0, r0, r0

20009734 <MDNS::s_AnswerLocalIp>:
	...

20009938 <MDNS::s_ServiceRecords>:
	...

20009958 <MDNS::s_nBytesReceived>:
20009958:	00000000 	andeq	r0, r0, r0

2000995c <MDNS::s_ServiceRecordsData>:
	...

20009b60 <MDNS::s_pName>:
20009b60:	00000000 	andeq	r0, r0, r0

20009b64 <MDNS::s_pBuffer>:
20009b64:	00000000 	andeq	r0, r0, r0

20009b68 <Network::s_pThis>:
20009b68:	00000000 	andeq	r0, r0, r0

20009b6c <s_arp_announce>:
	...

20009b98 <s_arp_reply>:
	...

20009bc4 <s_arp_request>:
	...

20009bf0 <s_arp_records>:
	...

20009d70 <s_entry_current>:
20009d70:	00000000 	andeq	r0, r0, r0

20009d74 <s_dhcp_allocated_gw>:
20009d74:	00000000 	andeq	r0, r0, r0

20009d78 <s_dhcp_allocated_ip>:
20009d78:	00000000 	andeq	r0, r0, r0

20009d7c <s_dhcp_allocated_netmask>:
20009d7c:	00000000 	andeq	r0, r0, r0

20009d80 <s_dhcp_message>:
	...

20009fa4 <s_dhcp_server_ip>:
20009fa4:	00000000 	andeq	r0, r0, r0

20009fa8 <s_groups>:
	...

2000a0c8 <s_id>:
2000a0c8:	00000000 	andeq	r0, r0, r0

2000a0cc <s_joins_allowed_index>:
2000a0cc:	00000000 	andeq	r0, r0, r0

2000a0d0 <s_leave>:
	...

2000a100 <s_multicast_mac>:
	...

2000a108 <s_report>:
	...

2000a138 <DisplayUdf::s_pThis>:
2000a138:	00000000 	andeq	r0, r0, r0

2000a13c <PropertiesConfig::s_Config>:
2000a13c:	00000000 	andeq	r0, r0, r0

2000a140 <Display::s_pThis>:
2000a140:	00000000 	andeq	r0, r0, r0

2000a144 <_ClearBuffer>:
	...

2000a1cc <Ssd1306::s_pThis>:
2000a1cc:	00000000 	andeq	r0, r0, r0

2000a1d0 <FirmwareVersion::s_FirmwareVersion>:
	...

2000a1e6 <FirmwareVersion::s_Print>:
	...

2000a228 <FirmwareVersion::s_pThis>:
2000a228:	00000000 	andeq	r0, r0, r0

2000a22c <LedBlink::s_pThis>:
2000a22c:	00000000 	andeq	r0, r0, r0

2000a230 <Hardware::s_pThis>:
2000a230:	00000000 	andeq	r0, r0, r0

2000a234 <outptr>:
2000a234:	00000000 	andeq	r0, r0, r0

2000a238 <last.0>:
	...

2000a240 <s_micros>:
	...

2000a248 <set_timer>:
2000a248:	00000000 	andeq	r0, r0, r0

2000a24c <s_nSysTickMillis>:
2000a24c:	00000000 	andeq	r0, r0, r0

2000a250 <s_nAddress>:
2000a250:	00000000 	andeq	r0, r0, r0

2000a254 <dma_current_ptp_rxdesc>:
2000a254:	00000000 	andeq	r0, r0, r0

2000a258 <dma_current_ptp_txdesc>:
2000a258:	00000000 	andeq	r0, r0, r0

2000a25c <dma_current_rxdesc>:
2000a25c:	00000000 	andeq	r0, r0, r0

2000a260 <dma_current_txdesc>:
2000a260:	00000000 	andeq	r0, r0, r0

2000a264 <enet_initpara>:
	...

2000a2a0 <rx_buff>:
	...

200101e0 <rxdesc_tab>:
	...

200102e0 <tx_buff>:
	...

20013280 <txdesc_tab>:
	...

Disassembly of section .heap:

20015800 <heap_low>:
	...

Disassembly of section .stack:

20016000 <_sp-0x2000>:
	...
