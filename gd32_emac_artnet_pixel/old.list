
build_gd32/main.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08007000 <__gVectors>:
 8007000:	20018000 	andcs	r8, r1, r0
 8007004:	08007e8d 	stmdaeq	r0, {r0, r2, r3, r7, r9, sl, fp, ip, sp, lr}
 8007008:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800700c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007010:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007014:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007018:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
	...
 800702c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007030:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007034:	00000000 	andeq	r0, r0, r0
 8007038:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800703c:	08013fe5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, r9, sl, fp, ip, sp}
 8007040:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007044:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007048:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800704c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007050:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007054:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007058:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800705c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007060:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007064:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007068:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800706c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007070:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007074:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007078:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800707c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007080:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007084:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007088:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800708c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007090:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007094:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007098:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800709c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070a0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070a4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070a8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070ac:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070b0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070b4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070b8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070bc:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070c0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070c4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070c8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070cc:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070d0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070d4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070d8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070dc:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070e0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070e4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070e8:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070ec:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070f0:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 80070f4:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
	...
 8007100:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007104:	00000000 	andeq	r0, r0, r0
 8007108:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800710c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007110:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007114:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007118:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800711c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007120:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007124:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007128:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800712c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007130:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007134:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007138:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800713c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007140:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007144:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8007148:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 800714c:	08007ed9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}

Disassembly of section .text:

08007150 <__aeabi_drsub>:
 8007150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007154:	e002      	b.n	800715c <__adddf3>
 8007156:	bf00      	nop

08007158 <__aeabi_dsub>:
 8007158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800715c <__adddf3>:
 800715c:	b530      	push	{r4, r5, lr}
 800715e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007166:	ea94 0f05 	teq	r4, r5
 800716a:	bf08      	it	eq
 800716c:	ea90 0f02 	teqeq	r0, r2
 8007170:	bf1f      	itttt	ne
 8007172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800717a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800717e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007182:	f000 80e2 	beq.w	800734a <__adddf3+0x1ee>
 8007186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800718a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800718e:	bfb8      	it	lt
 8007190:	426d      	neglt	r5, r5
 8007192:	dd0c      	ble.n	80071ae <__adddf3+0x52>
 8007194:	442c      	add	r4, r5
 8007196:	ea80 0202 	eor.w	r2, r0, r2
 800719a:	ea81 0303 	eor.w	r3, r1, r3
 800719e:	ea82 0000 	eor.w	r0, r2, r0
 80071a2:	ea83 0101 	eor.w	r1, r3, r1
 80071a6:	ea80 0202 	eor.w	r2, r0, r2
 80071aa:	ea81 0303 	eor.w	r3, r1, r3
 80071ae:	2d36      	cmp	r5, #54	; 0x36
 80071b0:	bf88      	it	hi
 80071b2:	bd30      	pophi	{r4, r5, pc}
 80071b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80071b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80071bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80071c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80071c4:	d002      	beq.n	80071cc <__adddf3+0x70>
 80071c6:	4240      	negs	r0, r0
 80071c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80071cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80071d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80071d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80071d8:	d002      	beq.n	80071e0 <__adddf3+0x84>
 80071da:	4252      	negs	r2, r2
 80071dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80071e0:	ea94 0f05 	teq	r4, r5
 80071e4:	f000 80a7 	beq.w	8007336 <__adddf3+0x1da>
 80071e8:	f1a4 0401 	sub.w	r4, r4, #1
 80071ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80071f0:	db0d      	blt.n	800720e <__adddf3+0xb2>
 80071f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80071f6:	fa22 f205 	lsr.w	r2, r2, r5
 80071fa:	1880      	adds	r0, r0, r2
 80071fc:	f141 0100 	adc.w	r1, r1, #0
 8007200:	fa03 f20e 	lsl.w	r2, r3, lr
 8007204:	1880      	adds	r0, r0, r2
 8007206:	fa43 f305 	asr.w	r3, r3, r5
 800720a:	4159      	adcs	r1, r3
 800720c:	e00e      	b.n	800722c <__adddf3+0xd0>
 800720e:	f1a5 0520 	sub.w	r5, r5, #32
 8007212:	f10e 0e20 	add.w	lr, lr, #32
 8007216:	2a01      	cmp	r2, #1
 8007218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800721c:	bf28      	it	cs
 800721e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007222:	fa43 f305 	asr.w	r3, r3, r5
 8007226:	18c0      	adds	r0, r0, r3
 8007228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800722c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007230:	d507      	bpl.n	8007242 <__adddf3+0xe6>
 8007232:	f04f 0e00 	mov.w	lr, #0
 8007236:	f1dc 0c00 	rsbs	ip, ip, #0
 800723a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800723e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007246:	d31b      	bcc.n	8007280 <__adddf3+0x124>
 8007248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800724c:	d30c      	bcc.n	8007268 <__adddf3+0x10c>
 800724e:	0849      	lsrs	r1, r1, #1
 8007250:	ea5f 0030 	movs.w	r0, r0, rrx
 8007254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007258:	f104 0401 	add.w	r4, r4, #1
 800725c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007264:	f080 809a 	bcs.w	800739c <__adddf3+0x240>
 8007268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800726c:	bf08      	it	eq
 800726e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007272:	f150 0000 	adcs.w	r0, r0, #0
 8007276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800727a:	ea41 0105 	orr.w	r1, r1, r5
 800727e:	bd30      	pop	{r4, r5, pc}
 8007280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007284:	4140      	adcs	r0, r0
 8007286:	eb41 0101 	adc.w	r1, r1, r1
 800728a:	3c01      	subs	r4, #1
 800728c:	bf28      	it	cs
 800728e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8007292:	d2e9      	bcs.n	8007268 <__adddf3+0x10c>
 8007294:	f091 0f00 	teq	r1, #0
 8007298:	bf04      	itt	eq
 800729a:	4601      	moveq	r1, r0
 800729c:	2000      	moveq	r0, #0
 800729e:	fab1 f381 	clz	r3, r1
 80072a2:	bf08      	it	eq
 80072a4:	3320      	addeq	r3, #32
 80072a6:	f1a3 030b 	sub.w	r3, r3, #11
 80072aa:	f1b3 0220 	subs.w	r2, r3, #32
 80072ae:	da0c      	bge.n	80072ca <__adddf3+0x16e>
 80072b0:	320c      	adds	r2, #12
 80072b2:	dd08      	ble.n	80072c6 <__adddf3+0x16a>
 80072b4:	f102 0c14 	add.w	ip, r2, #20
 80072b8:	f1c2 020c 	rsb	r2, r2, #12
 80072bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80072c0:	fa21 f102 	lsr.w	r1, r1, r2
 80072c4:	e00c      	b.n	80072e0 <__adddf3+0x184>
 80072c6:	f102 0214 	add.w	r2, r2, #20
 80072ca:	bfd8      	it	le
 80072cc:	f1c2 0c20 	rsble	ip, r2, #32
 80072d0:	fa01 f102 	lsl.w	r1, r1, r2
 80072d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80072d8:	bfdc      	itt	le
 80072da:	ea41 010c 	orrle.w	r1, r1, ip
 80072de:	4090      	lslle	r0, r2
 80072e0:	1ae4      	subs	r4, r4, r3
 80072e2:	bfa2      	ittt	ge
 80072e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80072e8:	4329      	orrge	r1, r5
 80072ea:	bd30      	popge	{r4, r5, pc}
 80072ec:	ea6f 0404 	mvn.w	r4, r4
 80072f0:	3c1f      	subs	r4, #31
 80072f2:	da1c      	bge.n	800732e <__adddf3+0x1d2>
 80072f4:	340c      	adds	r4, #12
 80072f6:	dc0e      	bgt.n	8007316 <__adddf3+0x1ba>
 80072f8:	f104 0414 	add.w	r4, r4, #20
 80072fc:	f1c4 0220 	rsb	r2, r4, #32
 8007300:	fa20 f004 	lsr.w	r0, r0, r4
 8007304:	fa01 f302 	lsl.w	r3, r1, r2
 8007308:	ea40 0003 	orr.w	r0, r0, r3
 800730c:	fa21 f304 	lsr.w	r3, r1, r4
 8007310:	ea45 0103 	orr.w	r1, r5, r3
 8007314:	bd30      	pop	{r4, r5, pc}
 8007316:	f1c4 040c 	rsb	r4, r4, #12
 800731a:	f1c4 0220 	rsb	r2, r4, #32
 800731e:	fa20 f002 	lsr.w	r0, r0, r2
 8007322:	fa01 f304 	lsl.w	r3, r1, r4
 8007326:	ea40 0003 	orr.w	r0, r0, r3
 800732a:	4629      	mov	r1, r5
 800732c:	bd30      	pop	{r4, r5, pc}
 800732e:	fa21 f004 	lsr.w	r0, r1, r4
 8007332:	4629      	mov	r1, r5
 8007334:	bd30      	pop	{r4, r5, pc}
 8007336:	f094 0f00 	teq	r4, #0
 800733a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800733e:	bf06      	itte	eq
 8007340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007344:	3401      	addeq	r4, #1
 8007346:	3d01      	subne	r5, #1
 8007348:	e74e      	b.n	80071e8 <__adddf3+0x8c>
 800734a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800734e:	bf18      	it	ne
 8007350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007354:	d029      	beq.n	80073aa <__adddf3+0x24e>
 8007356:	ea94 0f05 	teq	r4, r5
 800735a:	bf08      	it	eq
 800735c:	ea90 0f02 	teqeq	r0, r2
 8007360:	d005      	beq.n	800736e <__adddf3+0x212>
 8007362:	ea54 0c00 	orrs.w	ip, r4, r0
 8007366:	bf04      	itt	eq
 8007368:	4619      	moveq	r1, r3
 800736a:	4610      	moveq	r0, r2
 800736c:	bd30      	pop	{r4, r5, pc}
 800736e:	ea91 0f03 	teq	r1, r3
 8007372:	bf1e      	ittt	ne
 8007374:	2100      	movne	r1, #0
 8007376:	2000      	movne	r0, #0
 8007378:	bd30      	popne	{r4, r5, pc}
 800737a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800737e:	d105      	bne.n	800738c <__adddf3+0x230>
 8007380:	0040      	lsls	r0, r0, #1
 8007382:	4149      	adcs	r1, r1
 8007384:	bf28      	it	cs
 8007386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800738a:	bd30      	pop	{r4, r5, pc}
 800738c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007390:	bf3c      	itt	cc
 8007392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007396:	bd30      	popcc	{r4, r5, pc}
 8007398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800739c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80073a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073a4:	f04f 0000 	mov.w	r0, #0
 80073a8:	bd30      	pop	{r4, r5, pc}
 80073aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80073ae:	bf1a      	itte	ne
 80073b0:	4619      	movne	r1, r3
 80073b2:	4610      	movne	r0, r2
 80073b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80073b8:	bf1c      	itt	ne
 80073ba:	460b      	movne	r3, r1
 80073bc:	4602      	movne	r2, r0
 80073be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80073c2:	bf06      	itte	eq
 80073c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80073c8:	ea91 0f03 	teqeq	r1, r3
 80073cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80073d0:	bd30      	pop	{r4, r5, pc}
 80073d2:	bf00      	nop

080073d4 <__aeabi_ui2d>:
 80073d4:	f090 0f00 	teq	r0, #0
 80073d8:	bf04      	itt	eq
 80073da:	2100      	moveq	r1, #0
 80073dc:	4770      	bxeq	lr
 80073de:	b530      	push	{r4, r5, lr}
 80073e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80073e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80073e8:	f04f 0500 	mov.w	r5, #0
 80073ec:	f04f 0100 	mov.w	r1, #0
 80073f0:	e750      	b.n	8007294 <__adddf3+0x138>
 80073f2:	bf00      	nop

080073f4 <__aeabi_i2d>:
 80073f4:	f090 0f00 	teq	r0, #0
 80073f8:	bf04      	itt	eq
 80073fa:	2100      	moveq	r1, #0
 80073fc:	4770      	bxeq	lr
 80073fe:	b530      	push	{r4, r5, lr}
 8007400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800740c:	bf48      	it	mi
 800740e:	4240      	negmi	r0, r0
 8007410:	f04f 0100 	mov.w	r1, #0
 8007414:	e73e      	b.n	8007294 <__adddf3+0x138>
 8007416:	bf00      	nop

08007418 <__aeabi_f2d>:
 8007418:	0042      	lsls	r2, r0, #1
 800741a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800741e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007426:	bf1f      	itttt	ne
 8007428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800742c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007434:	4770      	bxne	lr
 8007436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800743a:	bf08      	it	eq
 800743c:	4770      	bxeq	lr
 800743e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007442:	bf04      	itt	eq
 8007444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007448:	4770      	bxeq	lr
 800744a:	b530      	push	{r4, r5, lr}
 800744c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007458:	e71c      	b.n	8007294 <__adddf3+0x138>
 800745a:	bf00      	nop

0800745c <__aeabi_ul2d>:
 800745c:	ea50 0201 	orrs.w	r2, r0, r1
 8007460:	bf08      	it	eq
 8007462:	4770      	bxeq	lr
 8007464:	b530      	push	{r4, r5, lr}
 8007466:	f04f 0500 	mov.w	r5, #0
 800746a:	e00a      	b.n	8007482 <__aeabi_l2d+0x16>

0800746c <__aeabi_l2d>:
 800746c:	ea50 0201 	orrs.w	r2, r0, r1
 8007470:	bf08      	it	eq
 8007472:	4770      	bxeq	lr
 8007474:	b530      	push	{r4, r5, lr}
 8007476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800747a:	d502      	bpl.n	8007482 <__aeabi_l2d+0x16>
 800747c:	4240      	negs	r0, r0
 800747e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800748a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800748e:	f43f aed8 	beq.w	8007242 <__adddf3+0xe6>
 8007492:	f04f 0203 	mov.w	r2, #3
 8007496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800749a:	bf18      	it	ne
 800749c:	3203      	addne	r2, #3
 800749e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80074a2:	bf18      	it	ne
 80074a4:	3203      	addne	r2, #3
 80074a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80074aa:	f1c2 0320 	rsb	r3, r2, #32
 80074ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80074b2:	fa20 f002 	lsr.w	r0, r0, r2
 80074b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80074ba:	ea40 000e 	orr.w	r0, r0, lr
 80074be:	fa21 f102 	lsr.w	r1, r1, r2
 80074c2:	4414      	add	r4, r2
 80074c4:	e6bd      	b.n	8007242 <__adddf3+0xe6>
 80074c6:	bf00      	nop

080074c8 <__aeabi_d2f>:
 80074c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80074cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80074d0:	bf24      	itt	cs
 80074d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80074d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80074da:	d90d      	bls.n	80074f8 <__aeabi_d2f+0x30>
 80074dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80074e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80074e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80074e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80074ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80074f0:	bf08      	it	eq
 80074f2:	f020 0001 	biceq.w	r0, r0, #1
 80074f6:	4770      	bx	lr
 80074f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80074fc:	d121      	bne.n	8007542 <__aeabi_d2f+0x7a>
 80074fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007502:	bfbc      	itt	lt
 8007504:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007508:	4770      	bxlt	lr
 800750a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800750e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007512:	f1c2 0218 	rsb	r2, r2, #24
 8007516:	f1c2 0c20 	rsb	ip, r2, #32
 800751a:	fa10 f30c 	lsls.w	r3, r0, ip
 800751e:	fa20 f002 	lsr.w	r0, r0, r2
 8007522:	bf18      	it	ne
 8007524:	f040 0001 	orrne.w	r0, r0, #1
 8007528:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800752c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007530:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007534:	ea40 000c 	orr.w	r0, r0, ip
 8007538:	fa23 f302 	lsr.w	r3, r3, r2
 800753c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007540:	e7cc      	b.n	80074dc <__aeabi_d2f+0x14>
 8007542:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007546:	d107      	bne.n	8007558 <__aeabi_d2f+0x90>
 8007548:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800754c:	bf1e      	ittt	ne
 800754e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8007552:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007556:	4770      	bxne	lr
 8007558:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800755c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8007560:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop

08007568 <__aeabi_frsub>:
 8007568:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800756c:	e002      	b.n	8007574 <__addsf3>
 800756e:	bf00      	nop

08007570 <__aeabi_fsub>:
 8007570:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08007574 <__addsf3>:
 8007574:	0042      	lsls	r2, r0, #1
 8007576:	bf1f      	itttt	ne
 8007578:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800757c:	ea92 0f03 	teqne	r2, r3
 8007580:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8007584:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007588:	d06a      	beq.n	8007660 <__addsf3+0xec>
 800758a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800758e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8007592:	bfc1      	itttt	gt
 8007594:	18d2      	addgt	r2, r2, r3
 8007596:	4041      	eorgt	r1, r0
 8007598:	4048      	eorgt	r0, r1
 800759a:	4041      	eorgt	r1, r0
 800759c:	bfb8      	it	lt
 800759e:	425b      	neglt	r3, r3
 80075a0:	2b19      	cmp	r3, #25
 80075a2:	bf88      	it	hi
 80075a4:	4770      	bxhi	lr
 80075a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80075aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80075ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80075b2:	bf18      	it	ne
 80075b4:	4240      	negne	r0, r0
 80075b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80075ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80075be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80075c2:	bf18      	it	ne
 80075c4:	4249      	negne	r1, r1
 80075c6:	ea92 0f03 	teq	r2, r3
 80075ca:	d03f      	beq.n	800764c <__addsf3+0xd8>
 80075cc:	f1a2 0201 	sub.w	r2, r2, #1
 80075d0:	fa41 fc03 	asr.w	ip, r1, r3
 80075d4:	eb10 000c 	adds.w	r0, r0, ip
 80075d8:	f1c3 0320 	rsb	r3, r3, #32
 80075dc:	fa01 f103 	lsl.w	r1, r1, r3
 80075e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80075e4:	d502      	bpl.n	80075ec <__addsf3+0x78>
 80075e6:	4249      	negs	r1, r1
 80075e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80075ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80075f0:	d313      	bcc.n	800761a <__addsf3+0xa6>
 80075f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80075f6:	d306      	bcc.n	8007606 <__addsf3+0x92>
 80075f8:	0840      	lsrs	r0, r0, #1
 80075fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80075fe:	f102 0201 	add.w	r2, r2, #1
 8007602:	2afe      	cmp	r2, #254	; 0xfe
 8007604:	d251      	bcs.n	80076aa <__addsf3+0x136>
 8007606:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800760a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800760e:	bf08      	it	eq
 8007610:	f020 0001 	biceq.w	r0, r0, #1
 8007614:	ea40 0003 	orr.w	r0, r0, r3
 8007618:	4770      	bx	lr
 800761a:	0049      	lsls	r1, r1, #1
 800761c:	eb40 0000 	adc.w	r0, r0, r0
 8007620:	3a01      	subs	r2, #1
 8007622:	bf28      	it	cs
 8007624:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8007628:	d2ed      	bcs.n	8007606 <__addsf3+0x92>
 800762a:	fab0 fc80 	clz	ip, r0
 800762e:	f1ac 0c08 	sub.w	ip, ip, #8
 8007632:	ebb2 020c 	subs.w	r2, r2, ip
 8007636:	fa00 f00c 	lsl.w	r0, r0, ip
 800763a:	bfaa      	itet	ge
 800763c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8007640:	4252      	neglt	r2, r2
 8007642:	4318      	orrge	r0, r3
 8007644:	bfbc      	itt	lt
 8007646:	40d0      	lsrlt	r0, r2
 8007648:	4318      	orrlt	r0, r3
 800764a:	4770      	bx	lr
 800764c:	f092 0f00 	teq	r2, #0
 8007650:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8007654:	bf06      	itte	eq
 8007656:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800765a:	3201      	addeq	r2, #1
 800765c:	3b01      	subne	r3, #1
 800765e:	e7b5      	b.n	80075cc <__addsf3+0x58>
 8007660:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007664:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007668:	bf18      	it	ne
 800766a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800766e:	d021      	beq.n	80076b4 <__addsf3+0x140>
 8007670:	ea92 0f03 	teq	r2, r3
 8007674:	d004      	beq.n	8007680 <__addsf3+0x10c>
 8007676:	f092 0f00 	teq	r2, #0
 800767a:	bf08      	it	eq
 800767c:	4608      	moveq	r0, r1
 800767e:	4770      	bx	lr
 8007680:	ea90 0f01 	teq	r0, r1
 8007684:	bf1c      	itt	ne
 8007686:	2000      	movne	r0, #0
 8007688:	4770      	bxne	lr
 800768a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800768e:	d104      	bne.n	800769a <__addsf3+0x126>
 8007690:	0040      	lsls	r0, r0, #1
 8007692:	bf28      	it	cs
 8007694:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8007698:	4770      	bx	lr
 800769a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800769e:	bf3c      	itt	cc
 80076a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80076a4:	4770      	bxcc	lr
 80076a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80076aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80076ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80076b2:	4770      	bx	lr
 80076b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80076b8:	bf16      	itet	ne
 80076ba:	4608      	movne	r0, r1
 80076bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80076c0:	4601      	movne	r1, r0
 80076c2:	0242      	lsls	r2, r0, #9
 80076c4:	bf06      	itte	eq
 80076c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80076ca:	ea90 0f01 	teqeq	r0, r1
 80076ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80076d2:	4770      	bx	lr

080076d4 <__aeabi_ui2f>:
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	e004      	b.n	80076e4 <__aeabi_i2f+0x8>
 80076da:	bf00      	nop

080076dc <__aeabi_i2f>:
 80076dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80076e0:	bf48      	it	mi
 80076e2:	4240      	negmi	r0, r0
 80076e4:	ea5f 0c00 	movs.w	ip, r0
 80076e8:	bf08      	it	eq
 80076ea:	4770      	bxeq	lr
 80076ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80076f0:	4601      	mov	r1, r0
 80076f2:	f04f 0000 	mov.w	r0, #0
 80076f6:	e01c      	b.n	8007732 <__aeabi_l2f+0x2a>

080076f8 <__aeabi_ul2f>:
 80076f8:	ea50 0201 	orrs.w	r2, r0, r1
 80076fc:	bf08      	it	eq
 80076fe:	4770      	bxeq	lr
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	e00a      	b.n	800771c <__aeabi_l2f+0x14>
 8007706:	bf00      	nop

08007708 <__aeabi_l2f>:
 8007708:	ea50 0201 	orrs.w	r2, r0, r1
 800770c:	bf08      	it	eq
 800770e:	4770      	bxeq	lr
 8007710:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8007714:	d502      	bpl.n	800771c <__aeabi_l2f+0x14>
 8007716:	4240      	negs	r0, r0
 8007718:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800771c:	ea5f 0c01 	movs.w	ip, r1
 8007720:	bf02      	ittt	eq
 8007722:	4684      	moveq	ip, r0
 8007724:	4601      	moveq	r1, r0
 8007726:	2000      	moveq	r0, #0
 8007728:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800772c:	bf08      	it	eq
 800772e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8007732:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8007736:	fabc f28c 	clz	r2, ip
 800773a:	3a08      	subs	r2, #8
 800773c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8007740:	db10      	blt.n	8007764 <__aeabi_l2f+0x5c>
 8007742:	fa01 fc02 	lsl.w	ip, r1, r2
 8007746:	4463      	add	r3, ip
 8007748:	fa00 fc02 	lsl.w	ip, r0, r2
 800774c:	f1c2 0220 	rsb	r2, r2, #32
 8007750:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007754:	fa20 f202 	lsr.w	r2, r0, r2
 8007758:	eb43 0002 	adc.w	r0, r3, r2
 800775c:	bf08      	it	eq
 800775e:	f020 0001 	biceq.w	r0, r0, #1
 8007762:	4770      	bx	lr
 8007764:	f102 0220 	add.w	r2, r2, #32
 8007768:	fa01 fc02 	lsl.w	ip, r1, r2
 800776c:	f1c2 0220 	rsb	r2, r2, #32
 8007770:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8007774:	fa21 f202 	lsr.w	r2, r1, r2
 8007778:	eb43 0002 	adc.w	r0, r3, r2
 800777c:	bf08      	it	eq
 800777e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007782:	4770      	bx	lr

08007784 <__aeabi_fmul>:
 8007784:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007788:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800778c:	bf1e      	ittt	ne
 800778e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8007792:	ea92 0f0c 	teqne	r2, ip
 8007796:	ea93 0f0c 	teqne	r3, ip
 800779a:	d06f      	beq.n	800787c <__aeabi_fmul+0xf8>
 800779c:	441a      	add	r2, r3
 800779e:	ea80 0c01 	eor.w	ip, r0, r1
 80077a2:	0240      	lsls	r0, r0, #9
 80077a4:	bf18      	it	ne
 80077a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80077aa:	d01e      	beq.n	80077ea <__aeabi_fmul+0x66>
 80077ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80077b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80077b8:	fba0 3101 	umull	r3, r1, r0, r1
 80077bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80077c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80077c4:	bf3e      	ittt	cc
 80077c6:	0049      	lslcc	r1, r1, #1
 80077c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80077cc:	005b      	lslcc	r3, r3, #1
 80077ce:	ea40 0001 	orr.w	r0, r0, r1
 80077d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80077d6:	2afd      	cmp	r2, #253	; 0xfd
 80077d8:	d81d      	bhi.n	8007816 <__aeabi_fmul+0x92>
 80077da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80077e2:	bf08      	it	eq
 80077e4:	f020 0001 	biceq.w	r0, r0, #1
 80077e8:	4770      	bx	lr
 80077ea:	f090 0f00 	teq	r0, #0
 80077ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80077f2:	bf08      	it	eq
 80077f4:	0249      	lsleq	r1, r1, #9
 80077f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80077fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80077fe:	3a7f      	subs	r2, #127	; 0x7f
 8007800:	bfc2      	ittt	gt
 8007802:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8007806:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800780a:	4770      	bxgt	lr
 800780c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	3a01      	subs	r2, #1
 8007816:	dc5d      	bgt.n	80078d4 <__aeabi_fmul+0x150>
 8007818:	f112 0f19 	cmn.w	r2, #25
 800781c:	bfdc      	itt	le
 800781e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8007822:	4770      	bxle	lr
 8007824:	f1c2 0200 	rsb	r2, r2, #0
 8007828:	0041      	lsls	r1, r0, #1
 800782a:	fa21 f102 	lsr.w	r1, r1, r2
 800782e:	f1c2 0220 	rsb	r2, r2, #32
 8007832:	fa00 fc02 	lsl.w	ip, r0, r2
 8007836:	ea5f 0031 	movs.w	r0, r1, rrx
 800783a:	f140 0000 	adc.w	r0, r0, #0
 800783e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8007842:	bf08      	it	eq
 8007844:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8007848:	4770      	bx	lr
 800784a:	f092 0f00 	teq	r2, #0
 800784e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8007852:	bf02      	ittt	eq
 8007854:	0040      	lsleq	r0, r0, #1
 8007856:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800785a:	3a01      	subeq	r2, #1
 800785c:	d0f9      	beq.n	8007852 <__aeabi_fmul+0xce>
 800785e:	ea40 000c 	orr.w	r0, r0, ip
 8007862:	f093 0f00 	teq	r3, #0
 8007866:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800786a:	bf02      	ittt	eq
 800786c:	0049      	lsleq	r1, r1, #1
 800786e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8007872:	3b01      	subeq	r3, #1
 8007874:	d0f9      	beq.n	800786a <__aeabi_fmul+0xe6>
 8007876:	ea41 010c 	orr.w	r1, r1, ip
 800787a:	e78f      	b.n	800779c <__aeabi_fmul+0x18>
 800787c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8007880:	ea92 0f0c 	teq	r2, ip
 8007884:	bf18      	it	ne
 8007886:	ea93 0f0c 	teqne	r3, ip
 800788a:	d00a      	beq.n	80078a2 <__aeabi_fmul+0x11e>
 800788c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8007890:	bf18      	it	ne
 8007892:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8007896:	d1d8      	bne.n	800784a <__aeabi_fmul+0xc6>
 8007898:	ea80 0001 	eor.w	r0, r0, r1
 800789c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80078a0:	4770      	bx	lr
 80078a2:	f090 0f00 	teq	r0, #0
 80078a6:	bf17      	itett	ne
 80078a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80078ac:	4608      	moveq	r0, r1
 80078ae:	f091 0f00 	teqne	r1, #0
 80078b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80078b6:	d014      	beq.n	80078e2 <__aeabi_fmul+0x15e>
 80078b8:	ea92 0f0c 	teq	r2, ip
 80078bc:	d101      	bne.n	80078c2 <__aeabi_fmul+0x13e>
 80078be:	0242      	lsls	r2, r0, #9
 80078c0:	d10f      	bne.n	80078e2 <__aeabi_fmul+0x15e>
 80078c2:	ea93 0f0c 	teq	r3, ip
 80078c6:	d103      	bne.n	80078d0 <__aeabi_fmul+0x14c>
 80078c8:	024b      	lsls	r3, r1, #9
 80078ca:	bf18      	it	ne
 80078cc:	4608      	movne	r0, r1
 80078ce:	d108      	bne.n	80078e2 <__aeabi_fmul+0x15e>
 80078d0:	ea80 0001 	eor.w	r0, r0, r1
 80078d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80078d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80078dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80078e0:	4770      	bx	lr
 80078e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80078e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80078ea:	4770      	bx	lr

080078ec <__aeabi_fdiv>:
 80078ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80078f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80078f4:	bf1e      	ittt	ne
 80078f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80078fa:	ea92 0f0c 	teqne	r2, ip
 80078fe:	ea93 0f0c 	teqne	r3, ip
 8007902:	d069      	beq.n	80079d8 <__aeabi_fdiv+0xec>
 8007904:	eba2 0203 	sub.w	r2, r2, r3
 8007908:	ea80 0c01 	eor.w	ip, r0, r1
 800790c:	0249      	lsls	r1, r1, #9
 800790e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8007912:	d037      	beq.n	8007984 <__aeabi_fdiv+0x98>
 8007914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007918:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800791c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8007920:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8007924:	428b      	cmp	r3, r1
 8007926:	bf38      	it	cc
 8007928:	005b      	lslcc	r3, r3, #1
 800792a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800792e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8007932:	428b      	cmp	r3, r1
 8007934:	bf24      	itt	cs
 8007936:	1a5b      	subcs	r3, r3, r1
 8007938:	ea40 000c 	orrcs.w	r0, r0, ip
 800793c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8007940:	bf24      	itt	cs
 8007942:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8007946:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800794a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800794e:	bf24      	itt	cs
 8007950:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8007954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007958:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800795c:	bf24      	itt	cs
 800795e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8007962:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007966:	011b      	lsls	r3, r3, #4
 8007968:	bf18      	it	ne
 800796a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800796e:	d1e0      	bne.n	8007932 <__aeabi_fdiv+0x46>
 8007970:	2afd      	cmp	r2, #253	; 0xfd
 8007972:	f63f af50 	bhi.w	8007816 <__aeabi_fmul+0x92>
 8007976:	428b      	cmp	r3, r1
 8007978:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800797c:	bf08      	it	eq
 800797e:	f020 0001 	biceq.w	r0, r0, #1
 8007982:	4770      	bx	lr
 8007984:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8007988:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800798c:	327f      	adds	r2, #127	; 0x7f
 800798e:	bfc2      	ittt	gt
 8007990:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8007994:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8007998:	4770      	bxgt	lr
 800799a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800799e:	f04f 0300 	mov.w	r3, #0
 80079a2:	3a01      	subs	r2, #1
 80079a4:	e737      	b.n	8007816 <__aeabi_fmul+0x92>
 80079a6:	f092 0f00 	teq	r2, #0
 80079aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80079ae:	bf02      	ittt	eq
 80079b0:	0040      	lsleq	r0, r0, #1
 80079b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80079b6:	3a01      	subeq	r2, #1
 80079b8:	d0f9      	beq.n	80079ae <__aeabi_fdiv+0xc2>
 80079ba:	ea40 000c 	orr.w	r0, r0, ip
 80079be:	f093 0f00 	teq	r3, #0
 80079c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80079c6:	bf02      	ittt	eq
 80079c8:	0049      	lsleq	r1, r1, #1
 80079ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80079ce:	3b01      	subeq	r3, #1
 80079d0:	d0f9      	beq.n	80079c6 <__aeabi_fdiv+0xda>
 80079d2:	ea41 010c 	orr.w	r1, r1, ip
 80079d6:	e795      	b.n	8007904 <__aeabi_fdiv+0x18>
 80079d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80079dc:	ea92 0f0c 	teq	r2, ip
 80079e0:	d108      	bne.n	80079f4 <__aeabi_fdiv+0x108>
 80079e2:	0242      	lsls	r2, r0, #9
 80079e4:	f47f af7d 	bne.w	80078e2 <__aeabi_fmul+0x15e>
 80079e8:	ea93 0f0c 	teq	r3, ip
 80079ec:	f47f af70 	bne.w	80078d0 <__aeabi_fmul+0x14c>
 80079f0:	4608      	mov	r0, r1
 80079f2:	e776      	b.n	80078e2 <__aeabi_fmul+0x15e>
 80079f4:	ea93 0f0c 	teq	r3, ip
 80079f8:	d104      	bne.n	8007a04 <__aeabi_fdiv+0x118>
 80079fa:	024b      	lsls	r3, r1, #9
 80079fc:	f43f af4c 	beq.w	8007898 <__aeabi_fmul+0x114>
 8007a00:	4608      	mov	r0, r1
 8007a02:	e76e      	b.n	80078e2 <__aeabi_fmul+0x15e>
 8007a04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8007a08:	bf18      	it	ne
 8007a0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8007a0e:	d1ca      	bne.n	80079a6 <__aeabi_fdiv+0xba>
 8007a10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8007a14:	f47f af5c 	bne.w	80078d0 <__aeabi_fmul+0x14c>
 8007a18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8007a1c:	f47f af3c 	bne.w	8007898 <__aeabi_fmul+0x114>
 8007a20:	e75f      	b.n	80078e2 <__aeabi_fmul+0x15e>
 8007a22:	bf00      	nop

08007a24 <__gesf2>:
 8007a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007a28:	e006      	b.n	8007a38 <__cmpsf2+0x4>
 8007a2a:	bf00      	nop

08007a2c <__lesf2>:
 8007a2c:	f04f 0c01 	mov.w	ip, #1
 8007a30:	e002      	b.n	8007a38 <__cmpsf2+0x4>
 8007a32:	bf00      	nop

08007a34 <__cmpsf2>:
 8007a34:	f04f 0c01 	mov.w	ip, #1
 8007a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8007a3c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007a40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8007a44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007a48:	bf18      	it	ne
 8007a4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8007a4e:	d011      	beq.n	8007a74 <__cmpsf2+0x40>
 8007a50:	b001      	add	sp, #4
 8007a52:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8007a56:	bf18      	it	ne
 8007a58:	ea90 0f01 	teqne	r0, r1
 8007a5c:	bf58      	it	pl
 8007a5e:	ebb2 0003 	subspl.w	r0, r2, r3
 8007a62:	bf88      	it	hi
 8007a64:	17c8      	asrhi	r0, r1, #31
 8007a66:	bf38      	it	cc
 8007a68:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8007a6c:	bf18      	it	ne
 8007a6e:	f040 0001 	orrne.w	r0, r0, #1
 8007a72:	4770      	bx	lr
 8007a74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8007a78:	d102      	bne.n	8007a80 <__cmpsf2+0x4c>
 8007a7a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8007a7e:	d105      	bne.n	8007a8c <__cmpsf2+0x58>
 8007a80:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8007a84:	d1e4      	bne.n	8007a50 <__cmpsf2+0x1c>
 8007a86:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8007a8a:	d0e1      	beq.n	8007a50 <__cmpsf2+0x1c>
 8007a8c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop

08007a94 <__aeabi_cfrcmple>:
 8007a94:	4684      	mov	ip, r0
 8007a96:	4608      	mov	r0, r1
 8007a98:	4661      	mov	r1, ip
 8007a9a:	e7ff      	b.n	8007a9c <__aeabi_cfcmpeq>

08007a9c <__aeabi_cfcmpeq>:
 8007a9c:	b50f      	push	{r0, r1, r2, r3, lr}
 8007a9e:	f7ff ffc9 	bl	8007a34 <__cmpsf2>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	bf48      	it	mi
 8007aa6:	f110 0f00 	cmnmi.w	r0, #0
 8007aaa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08007aac <__aeabi_fcmpeq>:
 8007aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ab0:	f7ff fff4 	bl	8007a9c <__aeabi_cfcmpeq>
 8007ab4:	bf0c      	ite	eq
 8007ab6:	2001      	moveq	r0, #1
 8007ab8:	2000      	movne	r0, #0
 8007aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8007abe:	bf00      	nop

08007ac0 <__aeabi_fcmplt>:
 8007ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ac4:	f7ff ffea 	bl	8007a9c <__aeabi_cfcmpeq>
 8007ac8:	bf34      	ite	cc
 8007aca:	2001      	movcc	r0, #1
 8007acc:	2000      	movcs	r0, #0
 8007ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ad2:	bf00      	nop

08007ad4 <__aeabi_fcmple>:
 8007ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007ad8:	f7ff ffe0 	bl	8007a9c <__aeabi_cfcmpeq>
 8007adc:	bf94      	ite	ls
 8007ade:	2001      	movls	r0, #1
 8007ae0:	2000      	movhi	r0, #0
 8007ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8007ae6:	bf00      	nop

08007ae8 <__aeabi_fcmpge>:
 8007ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007aec:	f7ff ffd2 	bl	8007a94 <__aeabi_cfrcmple>
 8007af0:	bf94      	ite	ls
 8007af2:	2001      	movls	r0, #1
 8007af4:	2000      	movhi	r0, #0
 8007af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8007afa:	bf00      	nop

08007afc <__aeabi_fcmpgt>:
 8007afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007b00:	f7ff ffc8 	bl	8007a94 <__aeabi_cfrcmple>
 8007b04:	bf34      	ite	cc
 8007b06:	2001      	movcc	r0, #1
 8007b08:	2000      	movcs	r0, #0
 8007b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8007b0e:	bf00      	nop

08007b10 <__aeabi_f2iz>:
 8007b10:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8007b14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8007b18:	d30f      	bcc.n	8007b3a <__aeabi_f2iz+0x2a>
 8007b1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8007b1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8007b22:	d90d      	bls.n	8007b40 <__aeabi_f2iz+0x30>
 8007b24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8007b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b2c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8007b30:	fa23 f002 	lsr.w	r0, r3, r2
 8007b34:	bf18      	it	ne
 8007b36:	4240      	negne	r0, r0
 8007b38:	4770      	bx	lr
 8007b3a:	f04f 0000 	mov.w	r0, #0
 8007b3e:	4770      	bx	lr
 8007b40:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8007b44:	d101      	bne.n	8007b4a <__aeabi_f2iz+0x3a>
 8007b46:	0242      	lsls	r2, r0, #9
 8007b48:	d105      	bne.n	8007b56 <__aeabi_f2iz+0x46>
 8007b4a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8007b4e:	bf08      	it	eq
 8007b50:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8007b54:	4770      	bx	lr
 8007b56:	f04f 0000 	mov.w	r0, #0
 8007b5a:	4770      	bx	lr

08007b5c <__aeabi_uldivmod>:
 8007b5c:	b953      	cbnz	r3, 8007b74 <__aeabi_uldivmod+0x18>
 8007b5e:	b94a      	cbnz	r2, 8007b74 <__aeabi_uldivmod+0x18>
 8007b60:	2900      	cmp	r1, #0
 8007b62:	bf08      	it	eq
 8007b64:	2800      	cmpeq	r0, #0
 8007b66:	bf1c      	itt	ne
 8007b68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007b6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007b70:	f000 b98a 	b.w	8007e88 <__aeabi_idiv0>
 8007b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8007b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007b7c:	f000 f81a 	bl	8007bb4 <__udivmoddi4>
 8007b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b88:	b004      	add	sp, #16
 8007b8a:	4770      	bx	lr

08007b8c <__popcountsi2>:
 8007b8c:	0843      	lsrs	r3, r0, #1
 8007b8e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8007b92:	1ac0      	subs	r0, r0, r3
 8007b94:	0883      	lsrs	r3, r0, #2
 8007b96:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8007b9a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8007b9e:	4418      	add	r0, r3
 8007ba0:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8007ba4:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8007ba8:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8007bac:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8007bb0:	0e00      	lsrs	r0, r0, #24
 8007bb2:	4770      	bx	lr

08007bb4 <__udivmoddi4>:
 8007bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb8:	9e08      	ldr	r6, [sp, #32]
 8007bba:	460d      	mov	r5, r1
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	4688      	mov	r8, r1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d14d      	bne.n	8007c60 <__udivmoddi4+0xac>
 8007bc4:	428a      	cmp	r2, r1
 8007bc6:	4694      	mov	ip, r2
 8007bc8:	d968      	bls.n	8007c9c <__udivmoddi4+0xe8>
 8007bca:	fab2 f282 	clz	r2, r2
 8007bce:	b152      	cbz	r2, 8007be6 <__udivmoddi4+0x32>
 8007bd0:	fa01 f302 	lsl.w	r3, r1, r2
 8007bd4:	f1c2 0120 	rsb	r1, r2, #32
 8007bd8:	fa20 f101 	lsr.w	r1, r0, r1
 8007bdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8007be0:	ea41 0803 	orr.w	r8, r1, r3
 8007be4:	4094      	lsls	r4, r2
 8007be6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8007bea:	fbb8 f7f1 	udiv	r7, r8, r1
 8007bee:	fa1f fe8c 	uxth.w	lr, ip
 8007bf2:	fb01 8817 	mls	r8, r1, r7, r8
 8007bf6:	fb07 f00e 	mul.w	r0, r7, lr
 8007bfa:	0c23      	lsrs	r3, r4, #16
 8007bfc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007c00:	4298      	cmp	r0, r3
 8007c02:	d90a      	bls.n	8007c1a <__udivmoddi4+0x66>
 8007c04:	eb1c 0303 	adds.w	r3, ip, r3
 8007c08:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8007c0c:	f080 811e 	bcs.w	8007e4c <__udivmoddi4+0x298>
 8007c10:	4298      	cmp	r0, r3
 8007c12:	f240 811b 	bls.w	8007e4c <__udivmoddi4+0x298>
 8007c16:	3f02      	subs	r7, #2
 8007c18:	4463      	add	r3, ip
 8007c1a:	1a1b      	subs	r3, r3, r0
 8007c1c:	fbb3 f0f1 	udiv	r0, r3, r1
 8007c20:	fb01 3310 	mls	r3, r1, r0, r3
 8007c24:	fb00 fe0e 	mul.w	lr, r0, lr
 8007c28:	b2a4      	uxth	r4, r4
 8007c2a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007c2e:	45a6      	cmp	lr, r4
 8007c30:	d90a      	bls.n	8007c48 <__udivmoddi4+0x94>
 8007c32:	eb1c 0404 	adds.w	r4, ip, r4
 8007c36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c3a:	f080 8109 	bcs.w	8007e50 <__udivmoddi4+0x29c>
 8007c3e:	45a6      	cmp	lr, r4
 8007c40:	f240 8106 	bls.w	8007e50 <__udivmoddi4+0x29c>
 8007c44:	4464      	add	r4, ip
 8007c46:	3802      	subs	r0, #2
 8007c48:	2100      	movs	r1, #0
 8007c4a:	eba4 040e 	sub.w	r4, r4, lr
 8007c4e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007c52:	b11e      	cbz	r6, 8007c5c <__udivmoddi4+0xa8>
 8007c54:	2300      	movs	r3, #0
 8007c56:	40d4      	lsrs	r4, r2
 8007c58:	e9c6 4300 	strd	r4, r3, [r6]
 8007c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c60:	428b      	cmp	r3, r1
 8007c62:	d908      	bls.n	8007c76 <__udivmoddi4+0xc2>
 8007c64:	2e00      	cmp	r6, #0
 8007c66:	f000 80ee 	beq.w	8007e46 <__udivmoddi4+0x292>
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	e9c6 0500 	strd	r0, r5, [r6]
 8007c70:	4608      	mov	r0, r1
 8007c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c76:	fab3 f183 	clz	r1, r3
 8007c7a:	2900      	cmp	r1, #0
 8007c7c:	d14a      	bne.n	8007d14 <__udivmoddi4+0x160>
 8007c7e:	42ab      	cmp	r3, r5
 8007c80:	d302      	bcc.n	8007c88 <__udivmoddi4+0xd4>
 8007c82:	4282      	cmp	r2, r0
 8007c84:	f200 80fc 	bhi.w	8007e80 <__udivmoddi4+0x2cc>
 8007c88:	1a84      	subs	r4, r0, r2
 8007c8a:	eb65 0303 	sbc.w	r3, r5, r3
 8007c8e:	2001      	movs	r0, #1
 8007c90:	4698      	mov	r8, r3
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	d0e2      	beq.n	8007c5c <__udivmoddi4+0xa8>
 8007c96:	e9c6 4800 	strd	r4, r8, [r6]
 8007c9a:	e7df      	b.n	8007c5c <__udivmoddi4+0xa8>
 8007c9c:	b902      	cbnz	r2, 8007ca0 <__udivmoddi4+0xec>
 8007c9e:	deff      	udf	#255	; 0xff
 8007ca0:	fab2 f282 	clz	r2, r2
 8007ca4:	2a00      	cmp	r2, #0
 8007ca6:	f040 8091 	bne.w	8007dcc <__udivmoddi4+0x218>
 8007caa:	eba1 000c 	sub.w	r0, r1, ip
 8007cae:	2101      	movs	r1, #1
 8007cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007cb4:	fa1f fe8c 	uxth.w	lr, ip
 8007cb8:	fbb0 f3f7 	udiv	r3, r0, r7
 8007cbc:	fb07 0013 	mls	r0, r7, r3, r0
 8007cc0:	0c25      	lsrs	r5, r4, #16
 8007cc2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8007cc6:	fb0e f003 	mul.w	r0, lr, r3
 8007cca:	42a8      	cmp	r0, r5
 8007ccc:	d908      	bls.n	8007ce0 <__udivmoddi4+0x12c>
 8007cce:	eb1c 0505 	adds.w	r5, ip, r5
 8007cd2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007cd6:	d202      	bcs.n	8007cde <__udivmoddi4+0x12a>
 8007cd8:	42a8      	cmp	r0, r5
 8007cda:	f200 80ce 	bhi.w	8007e7a <__udivmoddi4+0x2c6>
 8007cde:	4643      	mov	r3, r8
 8007ce0:	1a2d      	subs	r5, r5, r0
 8007ce2:	fbb5 f0f7 	udiv	r0, r5, r7
 8007ce6:	fb07 5510 	mls	r5, r7, r0, r5
 8007cea:	fb0e fe00 	mul.w	lr, lr, r0
 8007cee:	b2a4      	uxth	r4, r4
 8007cf0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007cf4:	45a6      	cmp	lr, r4
 8007cf6:	d908      	bls.n	8007d0a <__udivmoddi4+0x156>
 8007cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8007cfc:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8007d00:	d202      	bcs.n	8007d08 <__udivmoddi4+0x154>
 8007d02:	45a6      	cmp	lr, r4
 8007d04:	f200 80b6 	bhi.w	8007e74 <__udivmoddi4+0x2c0>
 8007d08:	4628      	mov	r0, r5
 8007d0a:	eba4 040e 	sub.w	r4, r4, lr
 8007d0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8007d12:	e79e      	b.n	8007c52 <__udivmoddi4+0x9e>
 8007d14:	f1c1 0720 	rsb	r7, r1, #32
 8007d18:	408b      	lsls	r3, r1
 8007d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8007d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8007d22:	fa25 fa07 	lsr.w	sl, r5, r7
 8007d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8007d2a:	fbba f8f9 	udiv	r8, sl, r9
 8007d2e:	fa20 f307 	lsr.w	r3, r0, r7
 8007d32:	fb09 aa18 	mls	sl, r9, r8, sl
 8007d36:	408d      	lsls	r5, r1
 8007d38:	fa1f fe8c 	uxth.w	lr, ip
 8007d3c:	431d      	orrs	r5, r3
 8007d3e:	fa00 f301 	lsl.w	r3, r0, r1
 8007d42:	fb08 f00e 	mul.w	r0, r8, lr
 8007d46:	0c2c      	lsrs	r4, r5, #16
 8007d48:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	fa02 f201 	lsl.w	r2, r2, r1
 8007d52:	d90b      	bls.n	8007d6c <__udivmoddi4+0x1b8>
 8007d54:	eb1c 0404 	adds.w	r4, ip, r4
 8007d58:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8007d5c:	f080 8088 	bcs.w	8007e70 <__udivmoddi4+0x2bc>
 8007d60:	42a0      	cmp	r0, r4
 8007d62:	f240 8085 	bls.w	8007e70 <__udivmoddi4+0x2bc>
 8007d66:	f1a8 0802 	sub.w	r8, r8, #2
 8007d6a:	4464      	add	r4, ip
 8007d6c:	1a24      	subs	r4, r4, r0
 8007d6e:	fbb4 f0f9 	udiv	r0, r4, r9
 8007d72:	fb09 4410 	mls	r4, r9, r0, r4
 8007d76:	fb00 fe0e 	mul.w	lr, r0, lr
 8007d7a:	b2ad      	uxth	r5, r5
 8007d7c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8007d80:	45a6      	cmp	lr, r4
 8007d82:	d908      	bls.n	8007d96 <__udivmoddi4+0x1e2>
 8007d84:	eb1c 0404 	adds.w	r4, ip, r4
 8007d88:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8007d8c:	d26c      	bcs.n	8007e68 <__udivmoddi4+0x2b4>
 8007d8e:	45a6      	cmp	lr, r4
 8007d90:	d96a      	bls.n	8007e68 <__udivmoddi4+0x2b4>
 8007d92:	3802      	subs	r0, #2
 8007d94:	4464      	add	r4, ip
 8007d96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8007d9a:	fba0 9502 	umull	r9, r5, r0, r2
 8007d9e:	eba4 040e 	sub.w	r4, r4, lr
 8007da2:	42ac      	cmp	r4, r5
 8007da4:	46c8      	mov	r8, r9
 8007da6:	46ae      	mov	lr, r5
 8007da8:	d356      	bcc.n	8007e58 <__udivmoddi4+0x2a4>
 8007daa:	d053      	beq.n	8007e54 <__udivmoddi4+0x2a0>
 8007dac:	2e00      	cmp	r6, #0
 8007dae:	d069      	beq.n	8007e84 <__udivmoddi4+0x2d0>
 8007db0:	ebb3 0208 	subs.w	r2, r3, r8
 8007db4:	eb64 040e 	sbc.w	r4, r4, lr
 8007db8:	fa22 f301 	lsr.w	r3, r2, r1
 8007dbc:	fa04 f707 	lsl.w	r7, r4, r7
 8007dc0:	431f      	orrs	r7, r3
 8007dc2:	40cc      	lsrs	r4, r1
 8007dc4:	e9c6 7400 	strd	r7, r4, [r6]
 8007dc8:	2100      	movs	r1, #0
 8007dca:	e747      	b.n	8007c5c <__udivmoddi4+0xa8>
 8007dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8007dd0:	f1c2 0120 	rsb	r1, r2, #32
 8007dd4:	fa25 f301 	lsr.w	r3, r5, r1
 8007dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8007ddc:	fa20 f101 	lsr.w	r1, r0, r1
 8007de0:	4095      	lsls	r5, r2
 8007de2:	430d      	orrs	r5, r1
 8007de4:	fbb3 f1f7 	udiv	r1, r3, r7
 8007de8:	fb07 3311 	mls	r3, r7, r1, r3
 8007dec:	fa1f fe8c 	uxth.w	lr, ip
 8007df0:	0c28      	lsrs	r0, r5, #16
 8007df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8007df6:	fb01 f30e 	mul.w	r3, r1, lr
 8007dfa:	4283      	cmp	r3, r0
 8007dfc:	fa04 f402 	lsl.w	r4, r4, r2
 8007e00:	d908      	bls.n	8007e14 <__udivmoddi4+0x260>
 8007e02:	eb1c 0000 	adds.w	r0, ip, r0
 8007e06:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8007e0a:	d22f      	bcs.n	8007e6c <__udivmoddi4+0x2b8>
 8007e0c:	4283      	cmp	r3, r0
 8007e0e:	d92d      	bls.n	8007e6c <__udivmoddi4+0x2b8>
 8007e10:	3902      	subs	r1, #2
 8007e12:	4460      	add	r0, ip
 8007e14:	1ac0      	subs	r0, r0, r3
 8007e16:	fbb0 f3f7 	udiv	r3, r0, r7
 8007e1a:	fb07 0013 	mls	r0, r7, r3, r0
 8007e1e:	b2ad      	uxth	r5, r5
 8007e20:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8007e24:	fb03 f00e 	mul.w	r0, r3, lr
 8007e28:	42a8      	cmp	r0, r5
 8007e2a:	d908      	bls.n	8007e3e <__udivmoddi4+0x28a>
 8007e2c:	eb1c 0505 	adds.w	r5, ip, r5
 8007e30:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007e34:	d216      	bcs.n	8007e64 <__udivmoddi4+0x2b0>
 8007e36:	42a8      	cmp	r0, r5
 8007e38:	d914      	bls.n	8007e64 <__udivmoddi4+0x2b0>
 8007e3a:	3b02      	subs	r3, #2
 8007e3c:	4465      	add	r5, ip
 8007e3e:	1a28      	subs	r0, r5, r0
 8007e40:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8007e44:	e738      	b.n	8007cb8 <__udivmoddi4+0x104>
 8007e46:	4631      	mov	r1, r6
 8007e48:	4630      	mov	r0, r6
 8007e4a:	e707      	b.n	8007c5c <__udivmoddi4+0xa8>
 8007e4c:	462f      	mov	r7, r5
 8007e4e:	e6e4      	b.n	8007c1a <__udivmoddi4+0x66>
 8007e50:	4618      	mov	r0, r3
 8007e52:	e6f9      	b.n	8007c48 <__udivmoddi4+0x94>
 8007e54:	454b      	cmp	r3, r9
 8007e56:	d2a9      	bcs.n	8007dac <__udivmoddi4+0x1f8>
 8007e58:	ebb9 0802 	subs.w	r8, r9, r2
 8007e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8007e60:	3801      	subs	r0, #1
 8007e62:	e7a3      	b.n	8007dac <__udivmoddi4+0x1f8>
 8007e64:	4643      	mov	r3, r8
 8007e66:	e7ea      	b.n	8007e3e <__udivmoddi4+0x28a>
 8007e68:	4628      	mov	r0, r5
 8007e6a:	e794      	b.n	8007d96 <__udivmoddi4+0x1e2>
 8007e6c:	4641      	mov	r1, r8
 8007e6e:	e7d1      	b.n	8007e14 <__udivmoddi4+0x260>
 8007e70:	46d0      	mov	r8, sl
 8007e72:	e77b      	b.n	8007d6c <__udivmoddi4+0x1b8>
 8007e74:	4464      	add	r4, ip
 8007e76:	3802      	subs	r0, #2
 8007e78:	e747      	b.n	8007d0a <__udivmoddi4+0x156>
 8007e7a:	3b02      	subs	r3, #2
 8007e7c:	4465      	add	r5, ip
 8007e7e:	e72f      	b.n	8007ce0 <__udivmoddi4+0x12c>
 8007e80:	4608      	mov	r0, r1
 8007e82:	e706      	b.n	8007c92 <__udivmoddi4+0xde>
 8007e84:	4631      	mov	r1, r6
 8007e86:	e6e9      	b.n	8007c5c <__udivmoddi4+0xa8>

08007e88 <__aeabi_idiv0>:
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop

08007e8c <Reset_Handler>:
 8007e8c:	480c      	ldr	r0, [pc, #48]	; (8007ec0 <Zerobss+0x10>)
 8007e8e:	4685      	mov	sp, r0
 8007e90:	2100      	movs	r1, #0
 8007e92:	e003      	b.n	8007e9c <DataInit>

08007e94 <CopyData>:
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <Zerobss+0x14>)
 8007e96:	585b      	ldr	r3, [r3, r1]
 8007e98:	5043      	str	r3, [r0, r1]
 8007e9a:	3104      	adds	r1, #4

08007e9c <DataInit>:
 8007e9c:	480a      	ldr	r0, [pc, #40]	; (8007ec8 <Zerobss+0x18>)
 8007e9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <Zerobss+0x1c>)
 8007ea0:	1842      	adds	r2, r0, r1
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3f6      	bcc.n	8007e94 <CopyData>
 8007ea6:	4a0a      	ldr	r2, [pc, #40]	; (8007ed0 <Zerobss+0x20>)
 8007ea8:	e002      	b.n	8007eb0 <Zerobss>

08007eaa <FillZerobss>:
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f842 3b04 	str.w	r3, [r2], #4

08007eb0 <Zerobss>:
 8007eb0:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <Zerobss+0x24>)
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d3f9      	bcc.n	8007eaa <FillZerobss>
 8007eb6:	f00c f89d 	bl	8013ff4 <SystemInit>
 8007eba:	f000 f94f 	bl	800815c <main>
 8007ebe:	4770      	bx	lr
 8007ec0:	20018000 	andcs	r8, r1, r0
 8007ec4:	08018168 	stmdaeq	r1, {r3, r5, r6, r8, pc}
 8007ec8:	20000000 	andcs	r0, r0, r0
 8007ecc:	200000e4 	andcs	r0, r0, r4, ror #1
 8007ed0:	200000e8 	andcs	r0, r0, r8, ror #1
 8007ed4:	200159f4 	strdcs	r5, [r1], -r4

08007ed8 <ADC0_1_IRQHandler>:
 8007ed8:	e7fe      	b.n	8007ed8 <ADC0_1_IRQHandler>

08007eda <DisplayHandler::~DisplayHandler()>:
 8007eda:	4770      	bx	lr

08007edc <DisplayUdfHandler::~DisplayUdfHandler()>:
 8007edc:	4770      	bx	lr

08007ede <DisplayUdfHandler::ShowLongName(char const*)>:
 8007ede:	4770      	bx	lr

08007ee0 <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8007ee0:	4770      	bx	lr

08007ee2 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8007ee2:	4770      	bx	lr

08007ee4 <PixelDmxStartStop::Start()>:
 8007ee4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ee8:	4b01      	ldr	r3, [pc, #4]	; (8007ef0 <PixelDmxStartStop::Start()+0xc>)
 8007eea:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
 8007eee:	4770      	bx	lr
 8007ef0:	40010000 	andmi	r0, r1, r0

08007ef4 <PixelDmxStartStop::Stop()>:
 8007ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ef8:	4b01      	ldr	r3, [pc, #4]	; (8007f00 <PixelDmxStartStop::Stop()+0xc>)
 8007efa:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 8007efe:	4770      	bx	lr
 8007f00:	40010000 	andmi	r0, r1, r0

08007f04 <Reboot::~Reboot()>:
 8007f04:	4770      	bx	lr
	...

08007f08 <Reboot::Run()>:
 8007f08:	b508      	push	{r3, lr}
 8007f0a:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <Reboot::Run()+0x18>)
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	f000 fcc9 	bl	80088a4 <ArtNetNode::Stop()>
 8007f12:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <Reboot::Run()+0x1c>)
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f1a:	f005 b931 	b.w	800d180 <WS28xx::Blackout()>
 8007f1e:	bf00      	nop
 8007f20:	200018fc 	strdcs	r1, [r0], -ip
 8007f24:	20001954 	andcs	r1, r0, r4, asr r9

08007f28 <Reboot::~Reboot()>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	f00b fab0 	bl	8013490 <operator delete(void*)>
 8007f30:	4620      	mov	r0, r4
 8007f32:	bd10      	pop	{r4, pc}

08007f34 <DisplayHandler::~DisplayHandler()>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	4604      	mov	r4, r0
 8007f38:	f00b faaa 	bl	8013490 <operator delete(void*)>
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	bd10      	pop	{r4, pc}

08007f40 <DisplayUdfHandler::~DisplayUdfHandler()>:
 8007f40:	b510      	push	{r4, lr}
 8007f42:	4604      	mov	r4, r0
 8007f44:	f00b faa4 	bl	8013490 <operator delete(void*)>
 8007f48:	4620      	mov	r0, r4
 8007f4a:	bd10      	pop	{r4, pc}

08007f4c <ArtNetTriggerHandler::~ArtNetTriggerHandler()>:
 8007f4c:	b510      	push	{r4, lr}
 8007f4e:	4604      	mov	r4, r0
 8007f50:	f00b fa9e 	bl	8013490 <operator delete(void*)>
 8007f54:	4620      	mov	r0, r4
 8007f56:	bd10      	pop	{r4, pc}

08007f58 <PixelDmxStartStop::~PixelDmxStartStop()>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	f00b fa98 	bl	8013490 <operator delete(void*)>
 8007f60:	4620      	mov	r0, r4
 8007f62:	bd10      	pop	{r4, pc}

08007f64 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)>:
 8007f64:	4b02      	ldr	r3, [pc, #8]	; (8007f70 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0xc>)
 8007f66:	6819      	ldr	r1, [r3, #0]
 8007f68:	4b02      	ldr	r3, [pc, #8]	; (8007f74 <DisplayUdfHandler::ShowPortProtocol(unsigned int, artnet::PortProtocol)+0x10>)
 8007f6a:	6818      	ldr	r0, [r3, #0]
 8007f6c:	f00a b9a8 	b.w	80122c0 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007f70:	200018fc 	strdcs	r1, [r0], -ip
 8007f74:	2000a868 	andcs	sl, r0, r8, ror #16

08007f78 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)>:
 8007f78:	4b02      	ldr	r3, [pc, #8]	; (8007f84 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0xc>)
 8007f7a:	6819      	ldr	r1, [r3, #0]
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <DisplayUdfHandler::ShowMergeMode(unsigned int, lightset::MergeMode)+0x10>)
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	f00a b99e 	b.w	80122c0 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007f84:	200018fc 	strdcs	r1, [r0], -ip
 8007f88:	2000a868 	andcs	sl, r0, r8, ror #16

08007f8c <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)>:
 8007f8c:	4b02      	ldr	r3, [pc, #8]	; (8007f98 <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0xc>)
 8007f8e:	6819      	ldr	r1, [r3, #0]
 8007f90:	4b02      	ldr	r3, [pc, #8]	; (8007f9c <DisplayUdfHandler::ShowSubnetSwitch(unsigned char)+0x10>)
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	f00a b994 	b.w	80122c0 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007f98:	200018fc 	strdcs	r1, [r0], -ip
 8007f9c:	2000a868 	andcs	sl, r0, r8, ror #16

08007fa0 <DisplayUdfHandler::ShowNetSwitch(unsigned char)>:
 8007fa0:	4b02      	ldr	r3, [pc, #8]	; (8007fac <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0xc>)
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	4b02      	ldr	r3, [pc, #8]	; (8007fb0 <DisplayUdfHandler::ShowNetSwitch(unsigned char)+0x10>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	f00a b98a 	b.w	80122c0 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007fac:	200018fc 	strdcs	r1, [r0], -ip
 8007fb0:	2000a868 	andcs	sl, r0, r8, ror #16

08007fb4 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)>:
 8007fb4:	4b02      	ldr	r3, [pc, #8]	; (8007fc0 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0xc>)
 8007fb6:	6819      	ldr	r1, [r3, #0]
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <DisplayUdfHandler::ShowUniverseSwitch(unsigned int, unsigned char)+0x10>)
 8007fba:	6818      	ldr	r0, [r3, #0]
 8007fbc:	f00a b980 	b.w	80122c0 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8007fc0:	200018fc 	strdcs	r1, [r0], -ip
 8007fc4:	2000a868 	andcs	sl, r0, r8, ror #16

08007fc8 <DisplayUdfHandler::ShowShortName(char const*)>:
 8007fc8:	4b02      	ldr	r3, [pc, #8]	; (8007fd4 <DisplayUdfHandler::ShowShortName(char const*)+0xc>)
 8007fca:	6819      	ldr	r1, [r3, #0]
 8007fcc:	4b02      	ldr	r3, [pc, #8]	; (8007fd8 <DisplayUdfHandler::ShowShortName(char const*)+0x10>)
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	f00a b963 	b.w	801229a <DisplayUdf::ShowNodeName(ArtNetNode*)>
 8007fd4:	200018fc 	strdcs	r1, [r0], -ip
 8007fd8:	2000a868 	andcs	sl, r0, r8, ror #16

08007fdc <DisplayHandler::Print(unsigned int)>:
 8007fdc:	7903      	ldrb	r3, [r0, #4]
 8007fde:	b570      	push	{r4, r5, r6, lr}
 8007fe0:	b1eb      	cbz	r3, 800801e <DisplayHandler::Print(unsigned int)+0x42>
 8007fe2:	4d0f      	ldr	r5, [pc, #60]	; (8008020 <DisplayHandler::Print(unsigned int)+0x44>)
 8007fe4:	2904      	cmp	r1, #4
 8007fe6:	6828      	ldr	r0, [r5, #0]
 8007fe8:	bf98      	it	ls
 8007fea:	4b0e      	ldrls	r3, [pc, #56]	; (8008024 <DisplayHandler::Print(unsigned int)+0x48>)
 8007fec:	6842      	ldr	r2, [r0, #4]
 8007fee:	bf8c      	ite	hi
 8007ff0:	2455      	movhi	r4, #85	; 0x55
 8007ff2:	5c5c      	ldrbls	r4, [r3, r1]
 8007ff4:	b18a      	cbz	r2, 800801a <DisplayHandler::Print(unsigned int)+0x3e>
 8007ff6:	7911      	ldrb	r1, [r2, #4]
 8007ff8:	3901      	subs	r1, #1
 8007ffa:	b2c9      	uxtb	r1, r1
 8007ffc:	b102      	cbz	r2, 8008000 <DisplayHandler::Print(unsigned int)+0x24>
 8007ffe:	7952      	ldrb	r2, [r2, #5]
 8008000:	3a01      	subs	r2, #1
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	f00a fddd 	bl	8012bc2 <Display::SetCursorPos(unsigned char, unsigned char)>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	6858      	ldr	r0, [r3, #4]
 800800c:	b138      	cbz	r0, 800801e <DisplayHandler::Print(unsigned int)+0x42>
 800800e:	6803      	ldr	r3, [r0, #0]
 8008010:	4621      	mov	r1, r4
 8008012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	4718      	bx	r3
 800801a:	4611      	mov	r1, r2
 800801c:	e7ec      	b.n	8007ff8 <DisplayHandler::Print(unsigned int)+0x1c>
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	2000a870 	andcs	sl, r0, r0, ror r8
 8008024:	08015ea8 	stmdaeq	r1, {r3, r5, r7, r9, sl, fp, ip, lr}

08008028 <Display::ClearLine(unsigned char)>:
 8008028:	6840      	ldr	r0, [r0, #4]
 800802a:	b110      	cbz	r0, 8008032 <Display::ClearLine(unsigned char)+0xa>
 800802c:	6803      	ldr	r3, [r0, #0]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	4718      	bx	r3
 8008032:	4770      	bx	lr

08008034 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>:
 8008034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008036:	2905      	cmp	r1, #5
 8008038:	b085      	sub	sp, #20
 800803a:	dc46      	bgt.n	80080ca <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x96>
 800803c:	4b24      	ldr	r3, [pc, #144]	; (80080d0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x9c>)
 800803e:	6019      	str	r1, [r3, #0]
 8008040:	2905      	cmp	r1, #5
 8008042:	d809      	bhi.n	8008058 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 8008044:	e8df f001 	tbb	[pc, r1]
 8008048:	130a032c 	movwne	r0, #41772	; 0xa32c
 800804c:	2300211a 	movwcs	r2, #282	; 0x11a
 8008050:	2264      	movs	r2, #100	; 0x64
 8008052:	4619      	mov	r1, r3
 8008054:	f004 fbec 	bl	800c830 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>
 8008058:	2001      	movs	r0, #1
 800805a:	e037      	b.n	80080cc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x98>
 800805c:	2200      	movs	r2, #0
 800805e:	2364      	movs	r3, #100	; 0x64
 8008060:	4611      	mov	r1, r2
 8008062:	e9cd 3200 	strd	r3, r2, [sp]
 8008066:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 8008068:	f004 fbf6 	bl	800c858 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800806c:	e7f4      	b.n	8008058 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 800806e:	2100      	movs	r1, #0
 8008070:	2364      	movs	r3, #100	; 0x64
 8008072:	4a18      	ldr	r2, [pc, #96]	; (80080d4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 8008074:	9100      	str	r1, [sp, #0]
 8008076:	f004 fc0b 	bl	800c890 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800807a:	e7ed      	b.n	8008058 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 800807c:	2364      	movs	r3, #100	; 0x64
 800807e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008082:	2100      	movs	r1, #0
 8008084:	f004 fc1e 	bl	800c8c4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>
 8008088:	e7e6      	b.n	8008058 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 800808a:	2200      	movs	r2, #0
 800808c:	2364      	movs	r3, #100	; 0x64
 800808e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008092:	230a      	movs	r3, #10
 8008094:	4611      	mov	r1, r2
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	4b0e      	ldr	r3, [pc, #56]	; (80080d4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa0>)
 800809a:	f004 fc45 	bl	800c928 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>
 800809e:	e7db      	b.n	8008058 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80080a0:	2400      	movs	r4, #0
 80080a2:	4625      	mov	r5, r4
 80080a4:	4b0c      	ldr	r3, [pc, #48]	; (80080d8 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa4>)
 80080a6:	4e0d      	ldr	r6, [pc, #52]	; (80080dc <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xa8>)
 80080a8:	4f0d      	ldr	r7, [pc, #52]	; (80080e0 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0xac>)
 80080aa:	61dc      	str	r4, [r3, #28]
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	6830      	ldr	r0, [r6, #0]
 80080b0:	42a3      	cmp	r3, r4
 80080b2:	d907      	bls.n	80080c4 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x90>
 80080b4:	2300      	movs	r3, #0
 80080b6:	4621      	mov	r1, r4
 80080b8:	461a      	mov	r2, r3
 80080ba:	9500      	str	r5, [sp, #0]
 80080bc:	f004 ff45 	bl	800cf4a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 80080c0:	3401      	adds	r4, #1
 80080c2:	e7f3      	b.n	80080ac <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x78>
 80080c4:	f004 fed4 	bl	800ce70 <WS28xx::Update()>
 80080c8:	e7c6      	b.n	8008058 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)+0x24>
 80080ca:	2000      	movs	r0, #0
 80080cc:	b005      	add	sp, #20
 80080ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d0:	2000194c 	andcs	r1, r0, ip, asr #18
 80080d4:	00646464 	rsbeq	r6, r4, r4, ror #8
 80080d8:	20001918 	andcs	r1, r0, r8, lsl r9
 80080dc:	20001944 	andcs	r1, r0, r4, asr #18
 80080e0:	20001940 	andcs	r1, r0, r0, asr #18

080080e4 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)>:
 80080e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080e6:	780b      	ldrb	r3, [r1, #0]
 80080e8:	4605      	mov	r5, r0
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	d11f      	bne.n	800812e <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 80080ee:	4b15      	ldr	r3, [pc, #84]	; (8008144 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x60>)
 80080f0:	784c      	ldrb	r4, [r1, #1]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	429c      	cmp	r4, r3
 80080f6:	d01a      	beq.n	800812e <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 80080f8:	4b13      	ldr	r3, [pc, #76]	; (8008148 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x64>)
 80080fa:	4621      	mov	r1, r4
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	f7ff ff99 	bl	8008034 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8008102:	b1a0      	cbz	r0, 800812e <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4a>
 8008104:	4b11      	ldr	r3, [pc, #68]	; (800814c <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x68>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	b19c      	cbz	r4, 8008132 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x4e>
 800810a:	2200      	movs	r2, #0
 800810c:	4d10      	ldr	r5, [pc, #64]	; (8008150 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x6c>)
 800810e:	609a      	str	r2, [r3, #8]
 8008110:	2106      	movs	r1, #6
 8008112:	6828      	ldr	r0, [r5, #0]
 8008114:	f7ff ff88 	bl	8008028 <Display::ClearLine(unsigned char)>
 8008118:	4620      	mov	r0, r4
 800811a:	682d      	ldr	r5, [r5, #0]
 800811c:	f004 fb7c 	bl	800c818 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008120:	2106      	movs	r1, #6
 8008122:	4603      	mov	r3, r0
 8008124:	4a0b      	ldr	r2, [pc, #44]	; (8008154 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x70>)
 8008126:	4628      	mov	r0, r5
 8008128:	9400      	str	r4, [sp, #0]
 800812a:	f00a fd1b 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 800812e:	b003      	add	sp, #12
 8008130:	bd30      	pop	{r4, r5, pc}
 8008132:	686a      	ldr	r2, [r5, #4]
 8008134:	609a      	str	r2, [r3, #8]
 8008136:	4b08      	ldr	r3, [pc, #32]	; (8008158 <ArtNetTriggerHandler::Handler(TArtNetTrigger const*)+0x74>)
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	b003      	add	sp, #12
 800813c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008140:	f009 be68 	b.w	8011e14 <DisplayUdf::Show()>
 8008144:	2000194c 	andcs	r1, r0, ip, asr #18
 8008148:	20001948 	andcs	r1, r0, r8, asr #18
 800814c:	200018fc 	strdcs	r1, [r0], -ip
 8008150:	2000a870 	andcs	sl, r0, r0, ror r8
 8008154:	08015d85 	stmdaeq	r1, {r0, r2, r7, r8, sl, fp, ip, lr}
 8008158:	2000a868 	andcs	sl, r0, r8, ror #16

0800815c <main>:
 800815c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008160:	2601      	movs	r6, #1
 8008162:	f5ad 5db7 	sub.w	sp, sp, #5856	; 0x16e0
 8008166:	b085      	sub	sp, #20
 8008168:	ac14      	add	r4, sp, #80	; 0x50
 800816a:	f1a4 0018 	sub.w	r0, r4, #24
 800816e:	f00b f8e3 	bl	8013338 <Hardware::Hardware()>
 8008172:	a88d      	add	r0, sp, #564	; 0x234
 8008174:	f008 fab6 	bl	80106e4 <Network::Network()>
 8008178:	a816      	add	r0, sp, #88	; 0x58
 800817a:	f00b f899 	bl	80132b0 <LedBlink::LedBlink()>
 800817e:	a853      	add	r0, sp, #332	; 0x14c
 8008180:	f009 fd86 	bl	8011c90 <DisplayUdf::DisplayUdf()>
 8008184:	4a70      	ldr	r2, [pc, #448]	; (8008348 <main+0x1ec>)
 8008186:	4b71      	ldr	r3, [pc, #452]	; (800834c <main+0x1f0>)
 8008188:	4971      	ldr	r1, [pc, #452]	; (8008350 <main+0x1f4>)
 800818a:	a806      	add	r0, sp, #24
 800818c:	f00b f84a 	bl	8013224 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>
 8008190:	a807      	add	r0, sp, #28
 8008192:	f006 fe81 	bl	800ee98 <FlashRom::FlashRom()>
 8008196:	4f6f      	ldr	r7, [pc, #444]	; (8008354 <main+0x1f8>)
 8008198:	a808      	add	r0, sp, #32
 800819a:	f006 fa77 	bl	800e68c <SpiFlashStore::SpiFlashStore()>
 800819e:	496e      	ldr	r1, [pc, #440]	; (8008358 <main+0x1fc>)
 80081a0:	a806      	add	r0, sp, #24
 80081a2:	f00b f877 	bl	8013294 <FirmwareVersion::Print(char const*)>
 80081a6:	2004      	movs	r0, #4
 80081a8:	613e      	str	r6, [r7, #16]
 80081aa:	f00b f975 	bl	8013498 <operator new(unsigned int)>
 80081ae:	4b6b      	ldr	r3, [pc, #428]	; (800835c <main+0x200>)
 80081b0:	2500      	movs	r5, #0
 80081b2:	6003      	str	r3, [r0, #0]
 80081b4:	900e      	str	r0, [sp, #56]	; 0x38
 80081b6:	2008      	movs	r0, #8
 80081b8:	ab0e      	add	r3, sp, #56	; 0x38
 80081ba:	f00b f96d 	bl	8013498 <operator new(unsigned int)>
 80081be:	4b68      	ldr	r3, [pc, #416]	; (8008360 <main+0x204>)
 80081c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80081c4:	6003      	str	r3, [r0, #0]
 80081c6:	4b67      	ldr	r3, [pc, #412]	; (8008364 <main+0x208>)
 80081c8:	4967      	ldr	r1, [pc, #412]	; (8008368 <main+0x20c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3b00      	subs	r3, #0
 80081ce:	bf18      	it	ne
 80081d0:	2301      	movne	r3, #1
 80081d2:	7103      	strb	r3, [r0, #4]
 80081d4:	9018      	str	r0, [sp, #96]	; 0x60
 80081d6:	ab16      	add	r3, sp, #88	; 0x58
 80081d8:	a853      	add	r0, sp, #332	; 0x14c
 80081da:	2303      	movs	r3, #3
 80081dc:	f00a fd23 	bl	8012c26 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80081e0:	a810      	add	r0, sp, #64	; 0x40
 80081e2:	f006 fd3b 	bl	800ec5c <StoreNetwork::StoreNetwork()>
 80081e6:	ab8d      	add	r3, sp, #564	; 0x234
 80081e8:	4618      	mov	r0, r3
 80081ea:	f1a4 020c 	sub.w	r2, r4, #12
 80081ee:	a910      	add	r1, sp, #64	; 0x40
 80081f0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80081f4:	f008 face 	bl	8010794 <Network::Init(NetworkParamsStore*)>
 80081f8:	a88d      	add	r0, sp, #564	; 0x234
 80081fa:	f008 fc99 	bl	8010b30 <Network::Print()>
 80081fe:	a809      	add	r0, sp, #36	; 0x24
 8008200:	f007 feaa 	bl	800ff58 <MDNS::MDNS()>
 8008204:	a809      	add	r0, sp, #36	; 0x24
 8008206:	f007 ff6b 	bl	80100e0 <MDNS::Start()>
 800820a:	f642 1305 	movw	r3, #10501	; 0x2905
 800820e:	4629      	mov	r1, r5
 8008210:	4a56      	ldr	r2, [pc, #344]	; (800836c <main+0x210>)
 8008212:	e9cd 5500 	strd	r5, r5, [sp]
 8008216:	a809      	add	r0, sp, #36	; 0x24
 8008218:	f008 f8ce 	bl	80103b8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 800821c:	4b54      	ldr	r3, [pc, #336]	; (8008370 <main+0x214>)
 800821e:	4629      	mov	r1, r5
 8008220:	4a54      	ldr	r2, [pc, #336]	; (8008374 <main+0x218>)
 8008222:	e9cd 6300 	strd	r6, r3, [sp]
 8008226:	a809      	add	r0, sp, #36	; 0x24
 8008228:	2350      	movs	r3, #80	; 0x50
 800822a:	f008 f8c5 	bl	80103b8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>
 800822e:	a809      	add	r0, sp, #36	; 0x24
 8008230:	f008 fa08 	bl	8010644 <MDNS::Print()>
 8008234:	2303      	movs	r3, #3
 8008236:	f44f 42cc 	mov.w	r2, #26112	; 0x6600
 800823a:	494f      	ldr	r1, [pc, #316]	; (8008378 <main+0x21c>)
 800823c:	a853      	add	r0, sp, #332	; 0x14c
 800823e:	f00a fcf2 	bl	8012c26 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8008242:	a812      	add	r0, sp, #72	; 0x48
 8008244:	f006 fc26 	bl	800ea94 <StoreArtNet::StoreArtNet()>
 8008248:	a912      	add	r1, sp, #72	; 0x48
 800824a:	a86a      	add	r0, sp, #424	; 0x1a8
 800824c:	f002 f844 	bl	800a2d8 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 8008250:	4631      	mov	r1, r6
 8008252:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 8008256:	f000 fa59 	bl	800870c <ArtNet4Node::ArtNet4Node(unsigned char)>
 800825a:	a86a      	add	r0, sp, #424	; 0x1a8
 800825c:	f002 f860 	bl	800a320 <ArtNetParams::Load()>
 8008260:	b138      	cbz	r0, 8008272 <main+0x116>
 8008262:	a86a      	add	r0, sp, #424	; 0x1a8
 8008264:	f60d 01ec 	addw	r1, sp, #2284	; 0x8ec
 8008268:	f002 fc11 	bl	800aa8e <ArtNetParams::Set(ArtNetNode*)>
 800826c:	a86a      	add	r0, sp, #424	; 0x1a8
 800826e:	f002 fc90 	bl	800ab92 <ArtNetParams::Dump()>
 8008272:	4a42      	ldr	r2, [pc, #264]	; (800837c <main+0x220>)
 8008274:	ab0b      	add	r3, sp, #44	; 0x2c
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	4e41      	ldr	r6, [pc, #260]	; (8008380 <main+0x224>)
 800827a:	ab0b      	add	r3, sp, #44	; 0x2c
 800827c:	f8cd 3910 	str.w	r3, [sp, #2320]	; 0x910
 8008280:	ad1c      	add	r5, sp, #112	; 0x70
 8008282:	1f23      	subs	r3, r4, #4
 8008284:	f8cd 390c 	str.w	r3, [sp, #2316]	; 0x90c
 8008288:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800828a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800828c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8008290:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8008294:	2008      	movs	r0, #8
 8008296:	f00b f8ff 	bl	8013498 <operator new(unsigned int)>
 800829a:	4605      	mov	r5, r0
 800829c:	f006 fdf0 	bl	800ee80 <StoreWS28xxDmx::StoreWS28xxDmx()>
 80082a0:	4629      	mov	r1, r5
 80082a2:	a837      	add	r0, sp, #220	; 0xdc
 80082a4:	f003 fe8c 	bl	800bfc0 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 80082a8:	a837      	add	r0, sp, #220	; 0xdc
 80082aa:	f003 fec5 	bl	800c038 <WS28xxDmxParams::Load()>
 80082ae:	b130      	cbz	r0, 80082be <main+0x162>
 80082b0:	a837      	add	r0, sp, #220	; 0xdc
 80082b2:	a91c      	add	r1, sp, #112	; 0x70
 80082b4:	f004 f93d 	bl	800c532 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>
 80082b8:	a837      	add	r0, sp, #220	; 0xdc
 80082ba:	f004 f970 	bl	800c59e <WS28xxDmxParams::Dump()>
 80082be:	f50d 7884 	add.w	r8, sp, #264	; 0x108
 80082c2:	a91c      	add	r1, sp, #112	; 0x70
 80082c4:	4640      	mov	r0, r8
 80082c6:	f003 fd81 	bl	800bdcc <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>
 80082ca:	2004      	movs	r0, #4
 80082cc:	f00b f8e4 	bl	8013498 <operator new(unsigned int)>
 80082d0:	4b2c      	ldr	r3, [pc, #176]	; (8008384 <main+0x228>)
 80082d2:	4605      	mov	r5, r0
 80082d4:	6003      	str	r3, [r0, #0]
 80082d6:	2203      	movs	r2, #3
 80082d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082dc:	2110      	movs	r1, #16
 80082de:	482a      	ldr	r0, [pc, #168]	; (8008388 <main+0x22c>)
 80082e0:	f00b ff8e 	bl	8014200 <gpio_init>
 80082e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082e8:	2601      	movs	r6, #1
 80082ea:	4b28      	ldr	r3, [pc, #160]	; (800838c <main+0x230>)
 80082ec:	2101      	movs	r1, #1
 80082ee:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
 80082f2:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
 80082f6:	f2a3 6a14 	subw	sl, r3, #1556	; 0x614
 80082fa:	f8c8 503c 	str.w	r5, [r8, #60]	; 0x3c
 80082fe:	f89a 502a 	ldrb.w	r5, [sl, #42]	; 0x2a
 8008302:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008390 <main+0x234>
 8008306:	a80a      	add	r0, sp, #40	; 0x28
 8008308:	f004 fa66 	bl	800c7d8 <PixelPatterns::PixelPatterns(unsigned int)>
 800830c:	4629      	mov	r1, r5
 800830e:	a80a      	add	r0, sp, #40	; 0x28
 8008310:	f8c9 5000 	str.w	r5, [r9]
 8008314:	f7ff fe8e 	bl	8008034 <PixelTestPattern::SetPattern(pixelpatterns::Pattern)>
 8008318:	f8ba a01a 	ldrh.w	sl, [sl, #26]
 800831c:	2201      	movs	r2, #1
 800831e:	4653      	mov	r3, sl
 8008320:	2100      	movs	r1, #0
 8008322:	f60d 00ec 	addw	r0, sp, #2284	; 0x8ec
 8008326:	f000 fe3d 	bl	8008fa4 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 800832a:	f8d8 b01c 	ldr.w	fp, [r8, #28]
 800832e:	455e      	cmp	r6, fp
 8008330:	d230      	bcs.n	8008394 <main+0x238>
 8008332:	eb0a 0306 	add.w	r3, sl, r6
 8008336:	4631      	mov	r1, r6
 8008338:	2201      	movs	r2, #1
 800833a:	b29b      	uxth	r3, r3
 800833c:	f60d 00ec 	addw	r0, sp, #2284	; 0x8ec
 8008340:	f000 fe30 	bl	8008fa4 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008344:	3601      	adds	r6, #1
 8008346:	e7f2      	b.n	800832e <main+0x1d2>
 8008348:	08015d94 	stmdaeq	r1, {r2, r4, r7, r8, sl, fp, ip, lr}
 800834c:	08015d8b 	stmdaeq	r1, {r0, r1, r3, r7, r8, sl, fp, ip, lr}
 8008350:	08015ead 	stmdaeq	r1, {r0, r2, r3, r5, r7, r9, sl, fp, ip, lr}
 8008354:	40011000 	andmi	r1, r1, r0
 8008358:	08015da0 	stmdaeq	r1, {r5, r7, r8, sl, fp, ip, lr}
 800835c:	08015e9c 	stmdaeq	r1, {r2, r3, r4, r7, r9, sl, fp, ip, lr}
 8008360:	08015e30 	stmdaeq	r1, {r4, r5, r9, sl, fp, ip, lr}
 8008364:	2000a870 	andcs	sl, r0, r0, ror r8
 8008368:	08017783 	stmdaeq	r1, {r0, r1, r7, r8, r9, sl, ip, sp, lr}
 800836c:	08015de4 	stmdaeq	r1, {r2, r5, r6, r7, r8, sl, fp, ip, lr}
 8008370:	08015df4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, sl, fp, ip, lr}
 8008374:	08015ded 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, sl, fp, ip, lr}
 8008378:	08015f01 	stmdaeq	r1, {r0, r8, r9, sl, fp, ip, lr}
 800837c:	08015e44 	stmdaeq	r1, {r2, r6, r9, sl, fp, ip, lr}
 8008380:	08015d44 	stmdaeq	r1, {r2, r6, r8, sl, fp, ip, lr}
 8008384:	08015e84 	stmdaeq	r1, {r2, r7, r9, sl, fp, ip, lr}
 8008388:	40010c00 	andmi	r0, r1, r0, lsl #24
 800838c:	40010000 	andmi	r0, r1, r0
 8008390:	2000194c 	andcs	r1, r0, ip, asr #18
 8008394:	f8d9 3000 	ldr.w	r3, [r9]
 8008398:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 800839c:	2b00      	cmp	r3, #0
 800839e:	bf0c      	ite	eq
 80083a0:	4643      	moveq	r3, r8
 80083a2:	2300      	movne	r3, #0
 80083a4:	f8cd 38f4 	str.w	r3, [sp, #2292]	; 0x8f4
 80083a8:	4b69      	ldr	r3, [pc, #420]	; (8008550 <main+0x3f4>)
 80083aa:	e9c4 3800 	strd	r3, r8, [r4]
 80083ae:	4b69      	ldr	r3, [pc, #420]	; (8008554 <main+0x3f8>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	619c      	str	r4, [r3, #24]
 80083b4:	f000 fa08 	bl	80087c8 <ArtNet4Node::Print()>
 80083b8:	4640      	mov	r0, r8
 80083ba:	f004 f8f1 	bl	800c5a0 <WS28xxDmx::Print()>
 80083be:	4966      	ldr	r1, [pc, #408]	; (8008558 <main+0x3fc>)
 80083c0:	a853      	add	r0, sp, #332	; 0x14c
 80083c2:	f009 fc7b 	bl	8011cbc <DisplayUdf::SetTitle(char const*, ...)>
 80083c6:	2202      	movs	r2, #2
 80083c8:	a853      	add	r0, sp, #332	; 0x14c
 80083ca:	4611      	mov	r1, r2
 80083cc:	f009 fdac 	bl	8011f28 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80083d0:	2206      	movs	r2, #6
 80083d2:	2103      	movs	r1, #3
 80083d4:	a853      	add	r0, sp, #332	; 0x14c
 80083d6:	f009 fda7 	bl	8011f28 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80083da:	2203      	movs	r2, #3
 80083dc:	2104      	movs	r1, #4
 80083de:	a853      	add	r0, sp, #332	; 0x14c
 80083e0:	f009 fda2 	bl	8011f28 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80083e4:	2208      	movs	r2, #8
 80083e6:	2105      	movs	r1, #5
 80083e8:	a853      	add	r0, sp, #332	; 0x14c
 80083ea:	f009 fd9d 	bl	8011f28 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80083ee:	2205      	movs	r2, #5
 80083f0:	2106      	movs	r1, #6
 80083f2:	a853      	add	r0, sp, #332	; 0x14c
 80083f4:	f009 fd98 	bl	8011f28 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 80083f8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80083fa:	f004 fc55 	bl	800cca8 <PixelType::GetType(pixel::Type)>
 80083fe:	4606      	mov	r6, r0
 8008400:	981e      	ldr	r0, [sp, #120]	; 0x78
 8008402:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008406:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 800840a:	f004 fca5 	bl	800cd58 <PixelType::GetMap(pixel::Map)>
 800840e:	4633      	mov	r3, r6
 8008410:	2107      	movs	r1, #7
 8008412:	4a52      	ldr	r2, [pc, #328]	; (800855c <main+0x400>)
 8008414:	e9cd a001 	strd	sl, r0, [sp, #4]
 8008418:	f8cd 8000 	str.w	r8, [sp]
 800841c:	a853      	add	r0, sp, #332	; 0x14c
 800841e:	f00a fba1 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 8008422:	a80c      	add	r0, sp, #48	; 0x30
 8008424:	f006 fb6e 	bl	800eb04 <StoreDisplayUdf::StoreDisplayUdf()>
 8008428:	a90c      	add	r1, sp, #48	; 0x30
 800842a:	a82d      	add	r0, sp, #180	; 0xb4
 800842c:	f009 fdbe 	bl	8011fac <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 8008430:	a82d      	add	r0, sp, #180	; 0xb4
 8008432:	f009 fdc8 	bl	8011fc6 <DisplayUdfParams::Load()>
 8008436:	b130      	cbz	r0, 8008446 <main+0x2ea>
 8008438:	a82d      	add	r0, sp, #180	; 0xb4
 800843a:	a953      	add	r1, sp, #332	; 0x14c
 800843c:	f009 fef9 	bl	8012232 <DisplayUdfParams::Set(DisplayUdf*)>
 8008440:	a82d      	add	r0, sp, #180	; 0xb4
 8008442:	f009 ff29 	bl	8012298 <DisplayUdfParams::Dump()>
 8008446:	f60d 01ec 	addw	r1, sp, #2284	; 0x8ec
 800844a:	a853      	add	r0, sp, #332	; 0x14c
 800844c:	f009 ffe4 	bl	8012418 <DisplayUdf::Show(ArtNetNode*)>
 8008450:	b16d      	cbz	r5, 800846e <main+0x312>
 8008452:	2106      	movs	r1, #6
 8008454:	a853      	add	r0, sp, #332	; 0x14c
 8008456:	f7ff fde7 	bl	8008028 <Display::ClearLine(unsigned char)>
 800845a:	4628      	mov	r0, r5
 800845c:	f004 f9dc 	bl	800c818 <PixelPatterns::GetName(pixelpatterns::Pattern)>
 8008460:	2106      	movs	r1, #6
 8008462:	4603      	mov	r3, r0
 8008464:	4a3e      	ldr	r2, [pc, #248]	; (8008560 <main+0x404>)
 8008466:	9500      	str	r5, [sp, #0]
 8008468:	a853      	add	r0, sp, #332	; 0x14c
 800846a:	f00a fb7b 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 800846e:	2203      	movs	r2, #3
 8008470:	2100      	movs	r1, #0
 8008472:	f89d 3fca 	ldrb.w	r3, [sp, #4042]	; 0xfca
 8008476:	a8bf      	add	r0, sp, #764	; 0x2fc
 8008478:	f004 ffd4 	bl	800d424 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>
 800847c:	f1a4 031c 	sub.w	r3, r4, #28
 8008480:	4618      	mov	r0, r3
 8008482:	9305      	str	r3, [sp, #20]
 8008484:	f006 fc20 	bl	800ecc8 <StoreRemoteConfig::StoreRemoteConfig()>
 8008488:	9905      	ldr	r1, [sp, #20]
 800848a:	a824      	add	r0, sp, #144	; 0x90
 800848c:	f005 fa92 	bl	800d9b4 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 8008490:	a824      	add	r0, sp, #144	; 0x90
 8008492:	f005 fa99 	bl	800d9c8 <RemoteConfigParams::Load()>
 8008496:	b130      	cbz	r0, 80084a6 <main+0x34a>
 8008498:	a824      	add	r0, sp, #144	; 0x90
 800849a:	a9bf      	add	r1, sp, #764	; 0x2fc
 800849c:	f005 fbbb 	bl	800dc16 <RemoteConfigParams::Set(RemoteConfig*)>
 80084a0:	a824      	add	r0, sp, #144	; 0x90
 80084a2:	f005 fbd8 	bl	800dc56 <RemoteConfigParams::Dump()>
 80084a6:	a808      	add	r0, sp, #32
 80084a8:	f006 f99c 	bl	800e7e4 <SpiFlashStore::Flash()>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d1fa      	bne.n	80084a6 <main+0x34a>
 80084b0:	2303      	movs	r3, #3
 80084b2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80084b6:	492b      	ldr	r1, [pc, #172]	; (8008564 <main+0x408>)
 80084b8:	a853      	add	r0, sp, #332	; 0x14c
 80084ba:	f00a fbb4 	bl	8012c26 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80084be:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 80084c2:	f000 f937 	bl	8008734 <ArtNet4Node::Start()>
 80084c6:	f248 0280 	movw	r2, #32896	; 0x8080
 80084ca:	2302      	movs	r3, #2
 80084cc:	4926      	ldr	r1, [pc, #152]	; (8008568 <main+0x40c>)
 80084ce:	a853      	add	r0, sp, #332	; 0x14c
 80084d0:	f00a fba9 	bl	8012c26 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 80084d4:	2102      	movs	r1, #2
 80084d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80084da:	f00b fe67 	bl	80141ac <fwdgt_config>
 80084de:	2801      	cmp	r0, #1
 80084e0:	bf0c      	ite	eq
 80084e2:	2201      	moveq	r2, #1
 80084e4:	2200      	movne	r2, #0
 80084e6:	ab0e      	add	r3, sp, #56	; 0x38
 80084e8:	711a      	strb	r2, [r3, #4]
 80084ea:	d101      	bne.n	80084f0 <main+0x394>
 80084ec:	f00b fe4e 	bl	801418c <fwdgt_enable>
 80084f0:	2601      	movs	r6, #1
 80084f2:	4d1e      	ldr	r5, [pc, #120]	; (800856c <main+0x410>)
 80084f4:	ac16      	add	r4, sp, #88	; 0x58
 80084f6:	f00b fe51 	bl	801419c <fwdgt_counter_reload>
 80084fa:	f006 fef3 	bl	800f2e4 <net_handle>
 80084fe:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
 8008502:	f000 f952 	bl	80087aa <ArtNet4Node::Run()>
 8008506:	a8bf      	add	r0, sp, #764	; 0x2fc
 8008508:	f005 f928 	bl	800d75c <RemoteConfig::Run()>
 800850c:	a808      	add	r0, sp, #32
 800850e:	f006 f969 	bl	800e7e4 <SpiFlashStore::Flash()>
 8008512:	68e2      	ldr	r2, [r4, #12]
 8008514:	b172      	cbz	r2, 8008534 <main+0x3d8>
 8008516:	682b      	ldr	r3, [r5, #0]
 8008518:	6961      	ldr	r1, [r4, #20]
 800851a:	1a5b      	subs	r3, r3, r1
 800851c:	429a      	cmp	r2, r3
 800851e:	d809      	bhi.n	8008534 <main+0x3d8>
 8008520:	682b      	ldr	r3, [r5, #0]
 8008522:	6163      	str	r3, [r4, #20]
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	2b01      	cmp	r3, #1
 8008528:	f083 0201 	eor.w	r2, r3, #1
 800852c:	6122      	str	r2, [r4, #16]
 800852e:	bf14      	ite	ne
 8008530:	613e      	strne	r6, [r7, #16]
 8008532:	617b      	streq	r3, [r7, #20]
 8008534:	a853      	add	r0, sp, #332	; 0x14c
 8008536:	f00a fbc9 	bl	8012ccc <Display::Run()>
 800853a:	f8d9 3000 	ldr.w	r3, [r9]
 800853e:	b113      	cbz	r3, 8008546 <main+0x3ea>
 8008540:	a80a      	add	r0, sp, #40	; 0x28
 8008542:	f004 fb87 	bl	800cc54 <PixelPatterns::Run()>
 8008546:	a809      	add	r0, sp, #36	; 0x24
 8008548:	f008 f858 	bl	80105fc <MDNS::Run()>
 800854c:	e7d3      	b.n	80084f6 <main+0x39a>
 800854e:	bf00      	nop
 8008550:	08015e70 	stmdaeq	r1, {r4, r5, r6, r9, sl, fp, ip, lr}
 8008554:	200018fc 	strdcs	r1, [r0], -ip
 8008558:	08015e07 	stmdaeq	r1, {r0, r1, r2, r9, sl, fp, ip, lr}
 800855c:	08015e19 	stmdaeq	r1, {r0, r3, r4, r9, sl, fp, ip, lr}
 8008560:	08015d85 	stmdaeq	r1, {r0, r2, r7, r8, sl, fp, ip, lr}
 8008564:	08015ef0 	stmdaeq	r1, {r4, r5, r6, r7, r9, sl, fp, ip, lr}
 8008568:	08015f15 	stmdaeq	r1, {r0, r2, r4, r8, r9, sl, fp, ip, lr}
 800856c:	2000a97c 	andcs	sl, r0, ip, ror r9

08008570 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)>:
 8008570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008572:	4616      	mov	r6, r2
 8008574:	1d07      	adds	r7, r0, #4
 8008576:	4604      	mov	r4, r0
 8008578:	4613      	mov	r3, r2
 800857a:	4638      	mov	r0, r7
 800857c:	f10d 0206 	add.w	r2, sp, #6
 8008580:	460d      	mov	r5, r1
 8008582:	f000 fc1d 	bl	8008dc0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8008586:	b1b6      	cbz	r6, 80085b6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008588:	b1a8      	cbz	r0, 80085b6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 800858a:	4629      	mov	r1, r5
 800858c:	4638      	mov	r0, r7
 800858e:	f000 fda0 	bl	80090d2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8008592:	2801      	cmp	r0, #1
 8008594:	d10f      	bne.n	80085b6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>
 8008596:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 800859a:	b123      	cbz	r3, 80085a6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x36>
 800859c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80085a0:	3301      	adds	r3, #1
 80085a2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80085a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80085aa:	b933      	cbnz	r3, 80085ba <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x4a>
 80085ac:	2202      	movs	r2, #2
 80085ae:	4629      	mov	r1, r5
 80085b0:	4638      	mov	r0, r7
 80085b2:	f000 fc48 	bl	8008e46 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 80085b6:	b003      	add	sp, #12
 80085b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ba:	1e71      	subs	r1, r6, #1
 80085bc:	424a      	negs	r2, r1
 80085be:	414a      	adcs	r2, r1
 80085c0:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80085c4:	4629      	mov	r1, r5
 80085c6:	f002 fc61 	bl	800ae8c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 80085ca:	e7f4      	b.n	80085b6 <ArtNet4Node::SetPort(unsigned int, lightset::PortDir)+0x46>

080085cc <ArtNet4Node::~ArtNet4Node()>:
 80085cc:	b510      	push	{r4, lr}
 80085ce:	4604      	mov	r4, r0
 80085d0:	4b05      	ldr	r3, [pc, #20]	; (80085e8 <ArtNet4Node::~ArtNet4Node()+0x1c>)
 80085d2:	6003      	str	r3, [r0, #0]
 80085d4:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 80085d8:	f002 fb68 	bl	800acac <E131Bridge::Stop()>
 80085dc:	1d20      	adds	r0, r4, #4
 80085de:	f000 f961 	bl	80088a4 <ArtNetNode::Stop()>
 80085e2:	4620      	mov	r0, r4
 80085e4:	bd10      	pop	{r4, pc}
 80085e6:	bf00      	nop
 80085e8:	08015ed8 	stmdaeq	r1, {r3, r4, r6, r7, r9, sl, fp, ip, lr}

080085ec <ArtNet4Node::HandleAddress(unsigned char)>:
 80085ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ee:	4605      	mov	r5, r0
 80085f0:	460c      	mov	r4, r1
 80085f2:	2600      	movs	r6, #0
 80085f4:	1d07      	adds	r7, r0, #4
 80085f6:	792b      	ldrb	r3, [r5, #4]
 80085f8:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 80085fc:	d224      	bcs.n	8008648 <ArtNet4Node::HandleAddress(unsigned char)+0x5c>
 80085fe:	2301      	movs	r3, #1
 8008600:	4631      	mov	r1, r6
 8008602:	4638      	mov	r0, r7
 8008604:	f10d 0206 	add.w	r2, sp, #6
 8008608:	f000 fbda 	bl	8008dc0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800860c:	b150      	cbz	r0, 8008624 <ArtNet4Node::HandleAddress(unsigned char)+0x38>
 800860e:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
 8008612:	b123      	cbz	r3, 800861e <ArtNet4Node::HandleAddress(unsigned char)+0x32>
 8008614:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008618:	3301      	adds	r3, #1
 800861a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800861e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008622:	b90b      	cbnz	r3, 8008628 <ArtNet4Node::HandleAddress(unsigned char)+0x3c>
 8008624:	3601      	adds	r6, #1
 8008626:	e7e6      	b.n	80085f6 <ArtNet4Node::HandleAddress(unsigned char)+0xa>
 8008628:	4631      	mov	r1, r6
 800862a:	4638      	mov	r0, r7
 800862c:	f000 fd51 	bl	80090d2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8008630:	4602      	mov	r2, r0
 8008632:	2a01      	cmp	r2, #1
 8008634:	bf18      	it	ne
 8008636:	2202      	movne	r2, #2
 8008638:	4631      	mov	r1, r6
 800863a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800863e:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 8008642:	f002 fc23 	bl	800ae8c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>
 8008646:	e7ed      	b.n	8008624 <ArtNet4Node::HandleAddress(unsigned char)+0x38>
 8008648:	2c13      	cmp	r4, #19
 800864a:	f004 0603 	and.w	r6, r4, #3
 800864e:	d80a      	bhi.n	8008666 <ArtNet4Node::HandleAddress(unsigned char)+0x7a>
 8008650:	2c0f      	cmp	r4, #15
 8008652:	d819      	bhi.n	8008688 <ArtNet4Node::HandleAddress(unsigned char)+0x9c>
 8008654:	2c02      	cmp	r4, #2
 8008656:	d015      	beq.n	8008684 <ArtNet4Node::HandleAddress(unsigned char)+0x98>
 8008658:	3c03      	subs	r4, #3
 800865a:	2c01      	cmp	r4, #1
 800865c:	d810      	bhi.n	8008680 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800865e:	2300      	movs	r3, #0
 8008660:	f885 37c0 	strb.w	r3, [r5, #1984]	; 0x7c0
 8008664:	e00c      	b.n	8008680 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008666:	2c53      	cmp	r4, #83	; 0x53
 8008668:	d806      	bhi.n	8008678 <ArtNet4Node::HandleAddress(unsigned char)+0x8c>
 800866a:	2c4f      	cmp	r4, #79	; 0x4f
 800866c:	d908      	bls.n	8008680 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 800866e:	2144      	movs	r1, #68	; 0x44
 8008670:	2300      	movs	r3, #0
 8008672:	fb01 5506 	mla	r5, r1, r6, r5
 8008676:	e00b      	b.n	8008690 <ArtNet4Node::HandleAddress(unsigned char)+0xa4>
 8008678:	3470      	adds	r4, #112	; 0x70
 800867a:	b2e4      	uxtb	r4, r4
 800867c:	2c03      	cmp	r4, #3
 800867e:	d90a      	bls.n	8008696 <ArtNet4Node::HandleAddress(unsigned char)+0xaa>
 8008680:	b003      	add	sp, #12
 8008682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008684:	2301      	movs	r3, #1
 8008686:	e7eb      	b.n	8008660 <ArtNet4Node::HandleAddress(unsigned char)+0x74>
 8008688:	2144      	movs	r1, #68	; 0x44
 800868a:	2301      	movs	r3, #1
 800868c:	fb01 5506 	mla	r5, r1, r6, r5
 8008690:	f8c5 3d04 	str.w	r3, [r5, #3332]	; 0xd04
 8008694:	e7f4      	b.n	8008680 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 8008696:	4631      	mov	r1, r6
 8008698:	1d28      	adds	r0, r5, #4
 800869a:	f000 fd1a 	bl	80090d2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 800869e:	2801      	cmp	r0, #1
 80086a0:	d1ee      	bne.n	8008680 <ArtNet4Node::HandleAddress(unsigned char)+0x94>
 80086a2:	4631      	mov	r1, r6
 80086a4:	f505 60f7 	add.w	r0, r5, #1976	; 0x7b8
 80086a8:	b003      	add	sp, #12
 80086aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80086ae:	f002 bf07 	b.w	800b4c0 <E131Bridge::Clear(unsigned int)>

080086b2 <ArtNet4Node::IsStatusChanged()>:
 80086b2:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 80086b6:	f002 befb 	b.w	800b4b0 <E131Bridge::IsStatusChanged()>

080086ba <ArtNet4Node::~ArtNet4Node()>:
 80086ba:	b510      	push	{r4, lr}
 80086bc:	4604      	mov	r4, r0
 80086be:	f7ff ff85 	bl	80085cc <ArtNet4Node::~ArtNet4Node()>
 80086c2:	4620      	mov	r0, r4
 80086c4:	f00a fee4 	bl	8013490 <operator delete(void*)>
 80086c8:	4620      	mov	r0, r4
 80086ca:	bd10      	pop	{r4, pc}

080086cc <ArtNet4Node::GetStatus(unsigned int)>:
 80086cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ce:	2301      	movs	r3, #1
 80086d0:	4604      	mov	r4, r0
 80086d2:	f10d 0206 	add.w	r2, sp, #6
 80086d6:	f500 60f7 	add.w	r0, r0, #1976	; 0x7b8
 80086da:	460d      	mov	r5, r1
 80086dc:	f002 fc4e 	bl	800af7c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 80086e0:	b188      	cbz	r0, 8008706 <ArtNet4Node::GetStatus(unsigned int)+0x3a>
 80086e2:	2144      	movs	r1, #68	; 0x44
 80086e4:	fb01 4405 	mla	r4, r1, r5, r4
 80086e8:	f894 3d0a 	ldrb.w	r3, [r4, #3338]	; 0xd0a
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f894 3d09 	ldrb.w	r3, [r4, #3337]	; 0xd09
 80086f2:	bf14      	ite	ne
 80086f4:	2080      	movne	r0, #128	; 0x80
 80086f6:	2000      	moveq	r0, #0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bf14      	ite	ne
 80086fc:	2308      	movne	r3, #8
 80086fe:	2300      	moveq	r3, #0
 8008700:	4318      	orrs	r0, r3
 8008702:	f040 0001 	orr.w	r0, r0, #1
 8008706:	b003      	add	sp, #12
 8008708:	bd30      	pop	{r4, r5, pc}
	...

0800870c <ArtNet4Node::ArtNet4Node(unsigned char)>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4604      	mov	r4, r0
 8008710:	1d05      	adds	r5, r0, #4
 8008712:	4628      	mov	r0, r5
 8008714:	f000 f964 	bl	80089e0 <ArtNetNode::ArtNetNode(unsigned char)>
 8008718:	4b05      	ldr	r3, [pc, #20]	; (8008730 <ArtNet4Node::ArtNet4Node(unsigned char)+0x24>)
 800871a:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	f002 fb14 	bl	800ad4c <E131Bridge::E131Bridge()>
 8008724:	4628      	mov	r0, r5
 8008726:	4621      	mov	r1, r4
 8008728:	f000 f866 	bl	80087f8 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>
 800872c:	4620      	mov	r0, r4
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	08015ed8 	stmdaeq	r1, {r3, r4, r6, r7, r9, sl, fp, ip, lr}

08008734 <ArtNet4Node::Start()>:
 8008734:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008736:	4604      	mov	r4, r0
 8008738:	2500      	movs	r5, #0
 800873a:	1d06      	adds	r6, r0, #4
 800873c:	7923      	ldrb	r3, [r4, #4]
 800873e:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 8008742:	d218      	bcs.n	8008776 <ArtNet4Node::Start()+0x42>
 8008744:	2301      	movs	r3, #1
 8008746:	4629      	mov	r1, r5
 8008748:	4630      	mov	r0, r6
 800874a:	f10d 0206 	add.w	r2, sp, #6
 800874e:	f000 fb37 	bl	8008dc0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 8008752:	b170      	cbz	r0, 8008772 <ArtNet4Node::Start()+0x3e>
 8008754:	4629      	mov	r1, r5
 8008756:	4630      	mov	r0, r6
 8008758:	f000 fcbb 	bl	80090d2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 800875c:	2801      	cmp	r0, #1
 800875e:	d108      	bne.n	8008772 <ArtNet4Node::Start()+0x3e>
 8008760:	4629      	mov	r1, r5
 8008762:	4630      	mov	r0, r6
 8008764:	f000 fce6 	bl	8009134 <ArtNetNode::GetMergeMode(unsigned int) const>
 8008768:	2344      	movs	r3, #68	; 0x44
 800876a:	436b      	muls	r3, r5
 800876c:	f604 5204 	addw	r2, r4, #3332	; 0xd04
 8008770:	50d0      	str	r0, [r2, r3]
 8008772:	3501      	adds	r5, #1
 8008774:	e7e2      	b.n	800873c <ArtNet4Node::Start()+0x8>
 8008776:	f8d4 36d0 	ldr.w	r3, [r4, #1744]	; 0x6d0
 800877a:	4630      	mov	r0, r6
 800877c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008780:	bf2c      	ite	cs
 8008782:	2300      	movcs	r3, #0
 8008784:	2301      	movcc	r3, #1
 8008786:	f884 3cb1 	strb.w	r3, [r4, #3249]	; 0xcb1
 800878a:	f894 36e0 	ldrb.w	r3, [r4, #1760]	; 0x6e0
 800878e:	f884 3cb2 	strb.w	r3, [r4, #3250]	; 0xcb2
 8008792:	68e3      	ldr	r3, [r4, #12]
 8008794:	f8c4 37bc 	str.w	r3, [r4, #1980]	; 0x7bc
 8008798:	f000 f840 	bl	800881c <ArtNetNode::Start()>
 800879c:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80087a0:	b002      	add	sp, #8
 80087a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80087a6:	f002 ba45 	b.w	800ac34 <E131Bridge::Start()>

080087aa <ArtNet4Node::Run()>:
 80087aa:	b510      	push	{r4, lr}
 80087ac:	4604      	mov	r4, r0
 80087ae:	3004      	adds	r0, #4
 80087b0:	f000 fa28 	bl	8008c04 <ArtNetNode::Run()>
 80087b4:	f894 3cc3 	ldrb.w	r3, [r4, #3267]	; 0xcc3
 80087b8:	b12b      	cbz	r3, 80087c6 <ArtNet4Node::Run()+0x1c>
 80087ba:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80087be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c2:	f002 bedf 	b.w	800b584 <E131Bridge::Run()>
 80087c6:	bd10      	pop	{r4, pc}

080087c8 <ArtNet4Node::Print()>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	4604      	mov	r4, r0
 80087cc:	3004      	adds	r0, #4
 80087ce:	f001 fc31 	bl	800a034 <ArtNetNode::Print()>
 80087d2:	f894 36e2 	ldrb.w	r3, [r4, #1762]	; 0x6e2
 80087d6:	b15b      	cbz	r3, 80087f0 <ArtNet4Node::Print()+0x28>
 80087d8:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
 80087dc:	b113      	cbz	r3, 80087e4 <ArtNet4Node::Print()+0x1c>
 80087de:	4805      	ldr	r0, [pc, #20]	; (80087f4 <ArtNet4Node::Print()+0x2c>)
 80087e0:	f00b fa60 	bl	8013ca4 <printf>
 80087e4:	f504 60f7 	add.w	r0, r4, #1976	; 0x7b8
 80087e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ec:	f003 b91e 	b.w	800ba2c <E131Bridge::Print()>
 80087f0:	bd10      	pop	{r4, pc}
 80087f2:	bf00      	nop
 80087f4:	08015eb1 	stmdaeq	r1, {r0, r4, r5, r7, r9, sl, fp, ip, lr}

080087f8 <ArtNetNode::SetArtNet4Handler(ArtNet4Handler*)>:
 80087f8:	61c1      	str	r1, [r0, #28]
 80087fa:	4770      	bx	lr

080087fc <strncpy.isra.0>:
 80087fc:	3901      	subs	r1, #1
 80087fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008802:	b92b      	cbnz	r3, 8008810 <strncpy.isra.0+0x14>
 8008804:	4402      	add	r2, r0
 8008806:	4290      	cmp	r0, r2
 8008808:	d007      	beq.n	800881a <strncpy.isra.0+0x1e>
 800880a:	f800 3b01 	strb.w	r3, [r0], #1
 800880e:	e7fa      	b.n	8008806 <strncpy.isra.0+0xa>
 8008810:	3a01      	subs	r2, #1
 8008812:	f800 3b01 	strb.w	r3, [r0], #1
 8008816:	d1f2      	bne.n	80087fe <strncpy.isra.0+0x2>
 8008818:	4770      	bx	lr
 800881a:	4770      	bx	lr

0800881c <ArtNetNode::Start()>:
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	4d1f      	ldr	r5, [pc, #124]	; (800889c <ArtNetNode::Start()+0x80>)
 8008820:	f990 3096 	ldrsb.w	r3, [r0, #150]	; 0x96
 8008824:	682a      	ldr	r2, [r5, #0]
 8008826:	f023 0302 	bic.w	r3, r3, #2
 800882a:	7851      	ldrb	r1, [r2, #1]
 800882c:	4604      	mov	r4, r0
 800882e:	2900      	cmp	r1, #0
 8008830:	bf14      	ite	ne
 8008832:	2102      	movne	r1, #2
 8008834:	2100      	moveq	r1, #0
 8008836:	430b      	orrs	r3, r1
 8008838:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 800883c:	7812      	ldrb	r2, [r2, #0]
 800883e:	f023 0304 	bic.w	r3, r3, #4
 8008842:	2a00      	cmp	r2, #0
 8008844:	bf14      	ite	ne
 8008846:	2204      	movne	r2, #4
 8008848:	2200      	moveq	r2, #0
 800884a:	4313      	orrs	r3, r2
 800884c:	f880 3096 	strb.w	r3, [r0, #150]	; 0x96
 8008850:	f001 f8ec 	bl	8009a2c <ArtNetNode::FillPollReply()>
 8008854:	f641 1136 	movw	r1, #6454	; 0x1936
 8008858:	6828      	ldr	r0, [r5, #0]
 800885a:	f007 ff73 	bl	8010744 <Network::Begin(unsigned short)>
 800885e:	2302      	movs	r3, #2
 8008860:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 8008864:	6963      	ldr	r3, [r4, #20]
 8008866:	6060      	str	r0, [r4, #4]
 8008868:	b16b      	cbz	r3, 8008886 <ArtNetNode::Start()+0x6a>
 800886a:	2500      	movs	r5, #0
 800886c:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 8008870:	012b      	lsls	r3, r5, #4
 8008872:	5cf3      	ldrb	r3, [r6, r3]
 8008874:	b123      	cbz	r3, 8008880 <ArtNetNode::Start()+0x64>
 8008876:	6960      	ldr	r0, [r4, #20]
 8008878:	4629      	mov	r1, r5
 800887a:	6803      	ldr	r3, [r0, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	4798      	blx	r3
 8008880:	3501      	adds	r5, #1
 8008882:	2d04      	cmp	r5, #4
 8008884:	d1f4      	bne.n	8008870 <ArtNetNode::Start()+0x54>
 8008886:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <ArtNetNode::Start()+0x84>)
 8008888:	2102      	movs	r1, #2
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	f00a fd20 	bl	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 8008890:	4620      	mov	r0, r4
 8008892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008896:	2100      	movs	r1, #0
 8008898:	f001 b93a 	b.w	8009b10 <ArtNetNode::SendPollRelply(bool)>
 800889c:	2000a298 	mulcs	r0, r8, r2
 80088a0:	2000a960 	andcs	sl, r0, r0, ror #18

080088a4 <ArtNetNode::Stop()>:
 80088a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	2500      	movs	r5, #0
 80088aa:	4604      	mov	r4, r0
 80088ac:	4606      	mov	r6, r0
 80088ae:	46a9      	mov	r9, r5
 80088b0:	f04f 0a01 	mov.w	sl, #1
 80088b4:	4f1f      	ldr	r7, [pc, #124]	; (8008934 <ArtNetNode::Stop()+0x90>)
 80088b6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8008938 <ArtNetNode::Stop()+0x94>
 80088ba:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 80088be:	b97b      	cbnz	r3, 80088e0 <ArtNetNode::Stop()+0x3c>
 80088c0:	68a0      	ldr	r0, [r4, #8]
 80088c2:	b118      	cbz	r0, 80088cc <ArtNetNode::Stop()+0x28>
 80088c4:	6803      	ldr	r3, [r0, #0]
 80088c6:	4629      	mov	r1, r5
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	4798      	blx	r3
 80088cc:	f8d8 3000 	ldr.w	r3, [r8]
 80088d0:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 80088d4:	07db      	lsls	r3, r3, #31
 80088d6:	bf58      	it	pl
 80088d8:	f8c8 a000 	strpl.w	sl, [r8]
 80088dc:	f886 9705 	strb.w	r9, [r6, #1797]	; 0x705
 80088e0:	3501      	adds	r5, #1
 80088e2:	2d04      	cmp	r5, #4
 80088e4:	f106 0624 	add.w	r6, r6, #36	; 0x24
 80088e8:	f207 6704 	addw	r7, r7, #1540	; 0x604
 80088ec:	d1e5      	bne.n	80088ba <ArtNetNode::Stop()+0x16>
 80088ee:	6963      	ldr	r3, [r4, #20]
 80088f0:	b16b      	cbz	r3, 800890e <ArtNetNode::Stop()+0x6a>
 80088f2:	2500      	movs	r5, #0
 80088f4:	f504 66ef 	add.w	r6, r4, #1912	; 0x778
 80088f8:	012b      	lsls	r3, r5, #4
 80088fa:	5cf3      	ldrb	r3, [r6, r3]
 80088fc:	b123      	cbz	r3, 8008908 <ArtNetNode::Stop()+0x64>
 80088fe:	6960      	ldr	r0, [r4, #20]
 8008900:	4629      	mov	r1, r5
 8008902:	6803      	ldr	r3, [r0, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	4798      	blx	r3
 8008908:	3501      	adds	r5, #1
 800890a:	2d04      	cmp	r5, #4
 800890c:	d1f4      	bne.n	80088f8 <ArtNetNode::Stop()+0x54>
 800890e:	4b0b      	ldr	r3, [pc, #44]	; (800893c <ArtNetNode::Stop()+0x98>)
 8008910:	2100      	movs	r1, #0
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	f00a fcdc 	bl	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 8008918:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800891c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008920:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008924:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008928:	2300      	movs	r3, #0
 800892a:	f884 36d5 	strb.w	r3, [r4, #1749]	; 0x6d5
 800892e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008932:	bf00      	nop
 8008934:	200000ec 	andcs	r0, r0, ip, ror #1
 8008938:	200000e8 	andcs	r0, r0, r8, ror #1
 800893c:	2000a960 	andcs	sl, r0, r0, ror #18

08008940 <ArtNetNode::SetShortName(char const*)>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	f100 0542 	add.w	r5, r0, #66	; 0x42
 8008946:	4604      	mov	r4, r0
 8008948:	2211      	movs	r2, #17
 800894a:	4628      	mov	r0, r5
 800894c:	f7ff ff56 	bl	80087fc <strncpy.isra.0>
 8008950:	2300      	movs	r3, #0
 8008952:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 8008956:	462b      	mov	r3, r5
 8008958:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800895c:	428b      	cmp	r3, r1
 800895e:	d004      	beq.n	800896a <ArtNetNode::SetShortName(char const*)+0x2a>
 8008960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008964:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 8008968:	e7f8      	b.n	800895c <ArtNetNode::SetShortName(char const*)+0x1c>
 800896a:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800896e:	2b02      	cmp	r3, #2
 8008970:	d10d      	bne.n	800898e <ArtNetNode::SetShortName(char const*)+0x4e>
 8008972:	6a20      	ldr	r0, [r4, #32]
 8008974:	b118      	cbz	r0, 800897e <ArtNetNode::SetShortName(char const*)+0x3e>
 8008976:	6803      	ldr	r3, [r0, #0]
 8008978:	4629      	mov	r1, r5
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	4798      	blx	r3
 800897e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008980:	b128      	cbz	r0, 800898e <ArtNetNode::SetShortName(char const*)+0x4e>
 8008982:	6803      	ldr	r3, [r0, #0]
 8008984:	4629      	mov	r1, r5
 8008986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	4718      	bx	r3
 800898e:	bd70      	pop	{r4, r5, r6, pc}

08008990 <ArtNetNode::SetLongName(char const*)>:
 8008990:	b570      	push	{r4, r5, r6, lr}
 8008992:	f100 0554 	add.w	r5, r0, #84	; 0x54
 8008996:	4604      	mov	r4, r0
 8008998:	223f      	movs	r2, #63	; 0x3f
 800899a:	4628      	mov	r0, r5
 800899c:	f7ff ff2e 	bl	80087fc <strncpy.isra.0>
 80089a0:	2300      	movs	r3, #0
 80089a2:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
 80089a6:	462b      	mov	r3, r5
 80089a8:	f104 0194 	add.w	r1, r4, #148	; 0x94
 80089ac:	428b      	cmp	r3, r1
 80089ae:	d004      	beq.n	80089ba <ArtNetNode::SetLongName(char const*)+0x2a>
 80089b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b4:	f883 254b 	strb.w	r2, [r3, #1355]	; 0x54b
 80089b8:	e7f8      	b.n	80089ac <ArtNetNode::SetLongName(char const*)+0x1c>
 80089ba:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d10d      	bne.n	80089de <ArtNetNode::SetLongName(char const*)+0x4e>
 80089c2:	6a20      	ldr	r0, [r4, #32]
 80089c4:	b118      	cbz	r0, 80089ce <ArtNetNode::SetLongName(char const*)+0x3e>
 80089c6:	6803      	ldr	r3, [r0, #0]
 80089c8:	4629      	mov	r1, r5
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	4798      	blx	r3
 80089ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80089d0:	b128      	cbz	r0, 80089de <ArtNetNode::SetLongName(char const*)+0x4e>
 80089d2:	6803      	ldr	r3, [r0, #0]
 80089d4:	4629      	mov	r1, r5
 80089d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	4718      	bx	r3
 80089de:	bd70      	pop	{r4, r5, r6, pc}

080089e0 <ArtNetNode::ArtNetNode(unsigned char)>:
 80089e0:	2300      	movs	r3, #0
 80089e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089e6:	2901      	cmp	r1, #1
 80089e8:	bf28      	it	cs
 80089ea:	2101      	movcs	r1, #1
 80089ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ee:	4604      	mov	r4, r0
 80089f0:	e9c0 2301 	strd	r2, r3, [r0, #4]
 80089f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089f8:	4a41      	ldr	r2, [pc, #260]	; (8008b00 <ArtNetNode::ArtNetNode(unsigned char)+0x120>)
 80089fa:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80089fe:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8008a02:	7001      	strb	r1, [r0, #0]
 8008a04:	6010      	str	r0, [r2, #0]
 8008a06:	b085      	sub	sp, #20
 8008a08:	6243      	str	r3, [r0, #36]	; 0x24
 8008a0a:	f8c0 3664 	str.w	r3, [r0, #1636]	; 0x664
 8008a0e:	f8c0 3668 	str.w	r3, [r0, #1640]	; 0x668
 8008a12:	f880 366e 	strb.w	r3, [r0, #1646]	; 0x66e
 8008a16:	f100 0228 	add.w	r2, r0, #40	; 0x28
 8008a1a:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8008a1e:	428a      	cmp	r2, r1
 8008a20:	d002      	beq.n	8008a28 <ArtNetNode::ArtNetNode(unsigned char)+0x48>
 8008a22:	f802 3b01 	strb.w	r3, [r2], #1
 8008a26:	e7fa      	b.n	8008a1e <ArtNetNode::ArtNetNode(unsigned char)+0x3e>
 8008a28:	4b36      	ldr	r3, [pc, #216]	; (8008b04 <ArtNetNode::ArtNetNode(unsigned char)+0x124>)
 8008a2a:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8008a2e:	6818      	ldr	r0, [r3, #0]
 8008a30:	6903      	ldr	r3, [r0, #16]
 8008a32:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a34:	6982      	ldr	r2, [r0, #24]
 8008a36:	ea63 0302 	orn	r3, r3, r2
 8008a3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a3e:	f007 fe87 	bl	8010750 <Network::MacAddressCopyTo(unsigned char*)>
 8008a42:	23d0      	movs	r3, #208	; 0xd0
 8008a44:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8008a48:	f244 0318 	movw	r3, #16408	; 0x4018
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 8008a52:	f204 61e4 	addw	r1, r4, #1764	; 0x6e4
 8008a56:	f504 63d8 	add.w	r3, r4, #1728	; 0x6c0
 8008a5a:	428b      	cmp	r3, r1
 8008a5c:	d002      	beq.n	8008a64 <ArtNetNode::ArtNetNode(unsigned char)+0x84>
 8008a5e:	f803 2b01 	strb.w	r2, [r3], #1
 8008a62:	e7fa      	b.n	8008a5a <ArtNetNode::ArtNetNode(unsigned char)+0x7a>
 8008a64:	f240 1201 	movw	r2, #257	; 0x101
 8008a68:	f8a4 26d4 	strh.w	r2, [r4, #1748]	; 0x6d4
 8008a6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8008a70:	2500      	movs	r5, #0
 8008a72:	2708      	movs	r7, #8
 8008a74:	f8c4 26cc 	str.w	r2, [r4, #1740]	; 0x6cc
 8008a78:	f204 7174 	addw	r1, r4, #1908	; 0x774
 8008a7c:	f204 76b4 	addw	r6, r4, #1972	; 0x7b4
 8008a80:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008a84:	4283      	cmp	r3, r0
 8008a86:	d005      	beq.n	8008a94 <ArtNetNode::ArtNetNode(unsigned char)+0xb4>
 8008a88:	f803 5b01 	strb.w	r5, [r3], #1
 8008a8c:	e7fa      	b.n	8008a84 <ArtNetNode::ArtNetNode(unsigned char)+0xa4>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	4611      	mov	r1, r2
 8008a92:	e7f5      	b.n	8008a80 <ArtNetNode::ArtNetNode(unsigned char)+0xa0>
 8008a94:	460a      	mov	r2, r1
 8008a96:	f101 0310 	add.w	r3, r1, #16
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d002      	beq.n	8008aa4 <ArtNetNode::ArtNetNode(unsigned char)+0xc4>
 8008a9e:	f802 5b01 	strb.w	r5, [r2], #1
 8008aa2:	e7fa      	b.n	8008a9a <ArtNetNode::ArtNetNode(unsigned char)+0xba>
 8008aa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008aa6:	4296      	cmp	r6, r2
 8008aa8:	608b      	str	r3, [r1, #8]
 8008aaa:	70cf      	strb	r7, [r1, #3]
 8008aac:	d1ef      	bne.n	8008a8e <ArtNetNode::ArtNetNode(unsigned char)+0xae>
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4915      	ldr	r1, [pc, #84]	; (8008b08 <ArtNetNode::ArtNetNode(unsigned char)+0x128>)
 8008ab2:	f7ff ff45 	bl	8008940 <ArtNetNode::SetShortName(char const*)>
 8008ab6:	4b15      	ldr	r3, [pc, #84]	; (8008b0c <ArtNetNode::ArtNetNode(unsigned char)+0x12c>)
 8008ab8:	f204 657f 	addw	r5, r4, #1663	; 0x67f
 8008abc:	9302      	str	r3, [sp, #8]
 8008abe:	2304      	movs	r3, #4
 8008ac0:	9301      	str	r3, [sp, #4]
 8008ac2:	4b13      	ldr	r3, [pc, #76]	; (8008b10 <ArtNetNode::ArtNetNode(unsigned char)+0x130>)
 8008ac4:	4a13      	ldr	r2, [pc, #76]	; (8008b14 <ArtNetNode::ArtNetNode(unsigned char)+0x134>)
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	2140      	movs	r1, #64	; 0x40
 8008aca:	4b13      	ldr	r3, [pc, #76]	; (8008b18 <ArtNetNode::ArtNetNode(unsigned char)+0x138>)
 8008acc:	4628      	mov	r0, r5
 8008ace:	f00b f911 	bl	8013cf4 <snprintf>
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f7ff ff5b 	bl	8008990 <ArtNetNode::SetLongName(char const*)>
 8008ada:	4b10      	ldr	r3, [pc, #64]	; (8008b1c <ArtNetNode::ArtNetNode(unsigned char)+0x13c>)
 8008adc:	f204 606f 	addw	r0, r4, #1647	; 0x66f
 8008ae0:	781a      	ldrb	r2, [r3, #0]
 8008ae2:	490f      	ldr	r1, [pc, #60]	; (8008b20 <ArtNetNode::ArtNetNode(unsigned char)+0x140>)
 8008ae4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	220f      	movs	r2, #15
 8008aec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8008af0:	f7ff fe84 	bl	80087fc <strncpy.isra.0>
 8008af4:	2300      	movs	r3, #0
 8008af6:	4620      	mov	r0, r4
 8008af8:	f884 367e 	strb.w	r3, [r4, #1662]	; 0x67e
 8008afc:	b005      	add	sp, #20
 8008afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b00:	200018fc 	strdcs	r1, [r0], -ip
 8008b04:	2000a298 	mulcs	r0, r8, r2
 8008b08:	08015f60 	stmdaeq	r1, {r5, r6, r8, r9, sl, fp, ip, lr}
 8008b0c:	08015f3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, r9, sl, fp, ip, lr}
 8008b10:	08015f58 	stmdaeq	r1, {r3, r4, r6, r8, r9, sl, fp, ip, lr}
 8008b14:	08015f2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r8, r9, sl, fp, ip, lr}
 8008b18:	08015f25 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl, fp, ip, lr}
 8008b1c:	08016221 	stmdaeq	r1, {r0, r5, r9, sp, lr}
 8008b20:	08015f4f 	stmdaeq	r1, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}

08008b24 <ArtNetNode::SetOemValue(unsigned char const*)>:
 8008b24:	780b      	ldrb	r3, [r1, #0]
 8008b26:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008b2a:	784b      	ldrb	r3, [r1, #1]
 8008b2c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008b30:	4770      	bx	lr
	...

08008b34 <ArtNetNode::SetNetworkDataLossCondition()>:
 8008b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b38:	2400      	movs	r4, #0
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	46a0      	mov	r8, r4
 8008b40:	46a2      	mov	sl, r4
 8008b42:	4f1a      	ldr	r7, [pc, #104]	; (8008bac <ArtNetNode::SetNetworkDataLossCondition()+0x78>)
 8008b44:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8008bb0 <ArtNetNode::SetNetworkDataLossCondition()+0x7c>
 8008b48:	f880 46da 	strb.w	r4, [r0, #1754]	; 0x6da
 8008b4c:	f880 46d9 	strb.w	r4, [r0, #1753]	; 0x6d9
 8008b50:	7833      	ldrb	r3, [r6, #0]
 8008b52:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8008b56:	d227      	bcs.n	8008ba8 <ArtNetNode::SetNetworkDataLossCondition()+0x74>
 8008b58:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8008b5c:	b953      	cbnz	r3, 8008b74 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8008b5e:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8008b62:	b13b      	cbz	r3, 8008b74 <ArtNetNode::SetNetworkDataLossCondition()+0x40>
 8008b64:	68b0      	ldr	r0, [r6, #8]
 8008b66:	b118      	cbz	r0, 8008b70 <ArtNetNode::SetNetworkDataLossCondition()+0x3c>
 8008b68:	6803      	ldr	r3, [r0, #0]
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	4798      	blx	r3
 8008b70:	f885 8705 	strb.w	r8, [r5, #1797]	; 0x705
 8008b74:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 8008b78:	f8c5 86f0 	str.w	r8, [r5, #1776]	; 0x6f0
 8008b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b80:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 8008b84:	f8c5 86f8 	str.w	r8, [r5, #1784]	; 0x6f8
 8008b88:	f8d9 3000 	ldr.w	r3, [r9]
 8008b8c:	f8c7 a600 	str.w	sl, [r7, #1536]	; 0x600
 8008b90:	07db      	lsls	r3, r3, #31
 8008b92:	bf58      	it	pl
 8008b94:	2301      	movpl	r3, #1
 8008b96:	f104 0401 	add.w	r4, r4, #1
 8008b9a:	bf58      	it	pl
 8008b9c:	f8c9 3000 	strpl.w	r3, [r9]
 8008ba0:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8008ba4:	3524      	adds	r5, #36	; 0x24
 8008ba6:	e7d3      	b.n	8008b50 <ArtNetNode::SetNetworkDataLossCondition()+0x1c>
 8008ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bac:	200000ec 	andcs	r0, r0, ip, ror #1
 8008bb0:	200000e8 	andcs	r0, r0, r8, ror #1

08008bb4 <ArtNetNode::GetType()>:
 8008bb4:	f8b0 3570 	ldrh.w	r3, [r0, #1392]	; 0x570
 8008bb8:	b530      	push	{r4, r5, lr}
 8008bba:	2b0b      	cmp	r3, #11
 8008bbc:	d803      	bhi.n	8008bc6 <ArtNetNode::GetType()+0x12>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f8a0 3572 	strh.w	r3, [r0, #1394]	; 0x572
 8008bc4:	bd30      	pop	{r4, r5, pc}
 8008bc6:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1f7      	bne.n	8008bbe <ArtNetNode::GetType()+0xa>
 8008bce:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
 8008bd2:	2b0e      	cmp	r3, #14
 8008bd4:	d1f3      	bne.n	8008bbe <ArtNetNode::GetType()+0xa>
 8008bd6:	4a0a      	ldr	r2, [pc, #40]	; (8008c00 <ArtNetNode::GetType()+0x4c>)
 8008bd8:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 8008bdc:	f100 05a8 	add.w	r5, r0, #168	; 0xa8
 8008be0:	42ab      	cmp	r3, r5
 8008be2:	d006      	beq.n	8008bf2 <ArtNetNode::GetType()+0x3e>
 8008be4:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008be8:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008bec:	428c      	cmp	r4, r1
 8008bee:	d0f7      	beq.n	8008be0 <ArtNetNode::GetType()+0x2c>
 8008bf0:	e7e5      	b.n	8008bbe <ArtNetNode::GetType()+0xa>
 8008bf2:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
 8008bf6:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
 8008bfa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008bfe:	e7df      	b.n	8008bc0 <ArtNetNode::GetType()+0xc>
 8008c00:	08015d64 	stmdaeq	r1, {r2, r5, r6, r8, sl, fp, ip, lr}

08008c04 <ArtNetNode::Run()>:
 8008c04:	b530      	push	{r4, r5, lr}
 8008c06:	b085      	sub	sp, #20
 8008c08:	f10d 030e 	add.w	r3, sp, #14
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	4604      	mov	r4, r0
 8008c10:	f200 536c 	addw	r3, r0, #1388	; 0x56c
 8008c14:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8008c18:	f240 42cc 	movw	r2, #1228	; 0x4cc
 8008c1c:	7900      	ldrb	r0, [r0, #4]
 8008c1e:	f007 f865 	bl	800fcec <udp_recv>
 8008c22:	4b65      	ldr	r3, [pc, #404]	; (8008db8 <ArtNetNode::Run()+0x1b4>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f8c4 3664 	str.w	r3, [r4, #1636]	; 0x664
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d143      	bne.n	8008cb6 <ArtNetNode::Run()+0xb2>
 8008c2e:	f8d4 26cc 	ldr.w	r2, [r4, #1740]	; 0x6cc
 8008c32:	b13a      	cbz	r2, 8008c44 <ArtNetNode::Run()+0x40>
 8008c34:	f8d4 1668 	ldr.w	r1, [r4, #1640]	; 0x668
 8008c38:	1a5b      	subs	r3, r3, r1
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d802      	bhi.n	8008c44 <ArtNetNode::Run()+0x40>
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f7ff ff78 	bl	8008b34 <ArtNetNode::SetNetworkDataLossCondition()>
 8008c44:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 8008c48:	b16b      	cbz	r3, 8008c66 <ArtNetNode::Run()+0x62>
 8008c4a:	69e0      	ldr	r0, [r4, #28]
 8008c4c:	f894 56db 	ldrb.w	r5, [r4, #1755]	; 0x6db
 8008c50:	b120      	cbz	r0, 8008c5c <ArtNetNode::Run()+0x58>
 8008c52:	6803      	ldr	r3, [r0, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	4798      	blx	r3
 8008c58:	4305      	orrs	r5, r0
 8008c5a:	b2ed      	uxtb	r5, r5
 8008c5c:	b11d      	cbz	r5, 8008c66 <ArtNetNode::Run()+0x62>
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4620      	mov	r0, r4
 8008c62:	f000 ff55 	bl	8009b10 <ArtNetNode::SendPollRelply(bool)>
 8008c66:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8008c6a:	f8d4 2668 	ldr.w	r2, [r4, #1640]	; 0x668
 8008c6e:	1a9b      	subs	r3, r3, r2
 8008c70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c74:	d305      	bcc.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008c76:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8008c7a:	f023 0302 	bic.w	r3, r3, #2
 8008c7e:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 8008c82:	6963      	ldr	r3, [r4, #20]
 8008c84:	b113      	cbz	r3, 8008c8c <ArtNetNode::Run()+0x88>
 8008c86:	4620      	mov	r0, r4
 8008c88:	f000 fd56 	bl	8009738 <ArtNetNode::HandleDmxIn()>
 8008c8c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8008c90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c94:	2bc0      	cmp	r3, #192	; 0xc0
 8008c96:	d10c      	bne.n	8008cb2 <ArtNetNode::Run()+0xae>
 8008c98:	4b48      	ldr	r3, [pc, #288]	; (8008dbc <ArtNetNode::Run()+0x1b8>)
 8008c9a:	6818      	ldr	r0, [r3, #0]
 8008c9c:	6843      	ldr	r3, [r0, #4]
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d007      	beq.n	8008cb2 <ArtNetNode::Run()+0xae>
 8008ca2:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 8084 	beq.w	8008db4 <ArtNetNode::Run()+0x1b0>
 8008cac:	2103      	movs	r1, #3
 8008cae:	f00a fb0f 	bl	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 8008cb2:	b005      	add	sp, #20
 8008cb4:	bd30      	pop	{r4, r5, pc}
 8008cb6:	f8a4 0570 	strh.w	r0, [r4, #1392]	; 0x570
 8008cba:	f8c4 3668 	str.w	r3, [r4, #1640]	; 0x668
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f7ff ff78 	bl	8008bb4 <ArtNetNode::GetType()>
 8008cc4:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 8008cc8:	b153      	cbz	r3, 8008ce0 <ArtNetNode::Run()+0xdc>
 8008cca:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8008cce:	f8d4 26d0 	ldr.w	r2, [r4, #1744]	; 0x6d0
 8008cd2:	1a9b      	subs	r3, r3, r2
 8008cd4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008cd8:	bf24      	itt	cs
 8008cda:	2300      	movcs	r3, #0
 8008cdc:	f884 36d9 	strbcs.w	r3, [r4, #1753]	; 0x6d9
 8008ce0:	f8b4 3572 	ldrh.w	r3, [r4, #1394]	; 0x572
 8008ce4:	f5b3 4f02 	cmp.w	r3, #33280	; 0x8200
 8008ce8:	d04c      	beq.n	8008d84 <ArtNetNode::Run()+0x180>
 8008cea:	d81d      	bhi.n	8008d28 <ArtNetNode::Run()+0x124>
 8008cec:	f5b3 4fa4 	cmp.w	r3, #20992	; 0x5200
 8008cf0:	d039      	beq.n	8008d66 <ArtNetNode::Run()+0x162>
 8008cf2:	d80c      	bhi.n	8008d0e <ArtNetNode::Run()+0x10a>
 8008cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cf8:	d031      	beq.n	8008d5e <ArtNetNode::Run()+0x15a>
 8008cfa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008cfe:	d1c0      	bne.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d00:	68a3      	ldr	r3, [r4, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0bd      	beq.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d06:	4620      	mov	r0, r4
 8008d08:	f000 fc2e 	bl	8009568 <ArtNetNode::HandleDmx()>
 8008d0c:	e7b9      	b.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008d12:	d02f      	beq.n	8008d74 <ArtNetNode::Run()+0x170>
 8008d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d18:	d1b3      	bne.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0b0      	beq.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d20:	4620      	mov	r0, r4
 8008d22:	f001 f889 	bl	8009e38 <ArtNetNode::HandleTodRequest()>
 8008d26:	e7ac      	b.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d28:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 8008d2c:	d026      	beq.n	8008d7c <ArtNetNode::Run()+0x178>
 8008d2e:	d80c      	bhi.n	8008d4a <ArtNetNode::Run()+0x146>
 8008d30:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8008d34:	d02e      	beq.n	8008d94 <ArtNetNode::Run()+0x190>
 8008d36:	f5b3 4f17 	cmp.w	r3, #38656	; 0x9700
 8008d3a:	d1a2      	bne.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d3c:	68e3      	ldr	r3, [r4, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d09f      	beq.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d42:	4620      	mov	r0, r4
 8008d44:	f001 f94e 	bl	8009fe4 <ArtNetNode::HandleTimeCode()>
 8008d48:	e79b      	b.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d4a:	f5b3 4f19 	cmp.w	r3, #39168	; 0x9900
 8008d4e:	d029      	beq.n	8008da4 <ArtNetNode::Run()+0x1a0>
 8008d50:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8008d54:	d195      	bne.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 fd9c 	bl	8009894 <ArtNetNode::HandleIpProg()>
 8008d5c:	e791      	b.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 ff9c 	bl	8009c9c <ArtNetNode::HandlePoll()>
 8008d64:	e78d      	b.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d66:	68a3      	ldr	r3, [r4, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d08a      	beq.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f001 f8ed 	bl	8009f4c <ArtNetNode::HandleSync()>
 8008d72:	e786      	b.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d74:	4620      	mov	r0, r4
 8008d76:	f000 f9e3 	bl	8009140 <ArtNetNode::HandleAddress()>
 8008d7a:	e782      	b.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d7c:	4620      	mov	r0, r4
 8008d7e:	f001 f937 	bl	8009ff0 <ArtNetNode::HandleTimeSync()>
 8008d82:	e77e      	b.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d84:	6923      	ldr	r3, [r4, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f43f af7b 	beq.w	8008c82 <ArtNetNode::Run()+0x7e>
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f001 f819 	bl	8009dc4 <ArtNetNode::HandleTodControl()>
 8008d92:	e776      	b.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008d94:	6923      	ldr	r3, [r4, #16]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f43f af73 	beq.w	8008c82 <ArtNetNode::Run()+0x7e>
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f001 f867 	bl	8009e70 <ArtNetNode::HandleRdm()>
 8008da2:	e76e      	b.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008da4:	69a3      	ldr	r3, [r4, #24]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f43f af6b 	beq.w	8008c82 <ArtNetNode::Run()+0x7e>
 8008dac:	4620      	mov	r0, r4
 8008dae:	f001 fef1 	bl	800ab94 <ArtNetNode::HandleTrigger()>
 8008db2:	e766      	b.n	8008c82 <ArtNetNode::Run()+0x7e>
 8008db4:	2102      	movs	r1, #2
 8008db6:	e77a      	b.n	8008cae <ArtNetNode::Run()+0xaa>
 8008db8:	2000a97c 	andcs	sl, r0, ip, ror r9
 8008dbc:	2000a960 	andcs	sl, r0, r0, ror #18

08008dc0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>:
 8008dc0:	b93b      	cbnz	r3, 8008dd2 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const+0x12>
 8008dc2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8008dc6:	f8b0 3774 	ldrh.w	r3, [r0, #1908]	; 0x774
 8008dca:	8013      	strh	r3, [r2, #0]
 8008dcc:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8008dd0:	4770      	bx	lr
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	bf01      	itttt	eq
 8008dd6:	2324      	moveq	r3, #36	; 0x24
 8008dd8:	fb03 0001 	mlaeq	r0, r3, r1, r0
 8008ddc:	f8b0 36e4 	ldrheq.w	r3, [r0, #1764]	; 0x6e4
 8008de0:	f890 06e8 	ldrbeq.w	r0, [r0, #1768]	; 0x6e8
 8008de4:	bf0c      	ite	eq
 8008de6:	8013      	strheq	r3, [r2, #0]
 8008de8:	2000      	movne	r0, #0
 8008dea:	4770      	bx	lr

08008dec <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>:
 8008dec:	b94b      	cbnz	r3, 8008e02 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x16>
 8008dee:	2903      	cmp	r1, #3
 8008df0:	d810      	bhi.n	8008e14 <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const+0x28>
 8008df2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8008df6:	f890 3776 	ldrb.w	r3, [r0, #1910]	; 0x776
 8008dfa:	7013      	strb	r3, [r2, #0]
 8008dfc:	f890 0778 	ldrb.w	r0, [r0, #1912]	; 0x778
 8008e00:	4770      	bx	lr
 8008e02:	2324      	movs	r3, #36	; 0x24
 8008e04:	fb03 0001 	mla	r0, r3, r1, r0
 8008e08:	f890 36e6 	ldrb.w	r3, [r0, #1766]	; 0x6e6
 8008e0c:	7013      	strb	r3, [r2, #0]
 8008e0e:	f890 06e8 	ldrb.w	r0, [r0, #1768]	; 0x6e8
 8008e12:	4770      	bx	lr
 8008e14:	4618      	mov	r0, r3
 8008e16:	4770      	bx	lr

08008e18 <ArtNetNode::GetSubnetSwitch(unsigned int) const>:
 8008e18:	4408      	add	r0, r1
 8008e1a:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
 8008e1e:	4770      	bx	lr

08008e20 <ArtNetNode::GetNetSwitch(unsigned int) const>:
 8008e20:	4408      	add	r0, r1
 8008e22:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 8008e26:	4770      	bx	lr

08008e28 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>:
 8008e28:	4402      	add	r2, r0
 8008e2a:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 8008e2e:	f892 003f 	ldrb.w	r0, [r2, #63]	; 0x3f
 8008e32:	021b      	lsls	r3, r3, #8
 8008e34:	0100      	lsls	r0, r0, #4
 8008e36:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8008e3a:	b2c0      	uxtb	r0, r0
 8008e3c:	4318      	orrs	r0, r3
 8008e3e:	f001 010f 	and.w	r1, r1, #15
 8008e42:	4308      	orrs	r0, r1
 8008e44:	4770      	bx	lr

08008e46 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>:
 8008e46:	2903      	cmp	r1, #3
 8008e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	460d      	mov	r5, r1
 8008e50:	4617      	mov	r7, r2
 8008e52:	461e      	mov	r6, r3
 8008e54:	f200 80a3 	bhi.w	8008f9e <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x158>
 8008e58:	2a02      	cmp	r2, #2
 8008e5a:	d121      	bne.n	8008ea0 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x5a>
 8008e5c:	2324      	movs	r3, #36	; 0x24
 8008e5e:	fb03 0301 	mla	r3, r3, r1, r0
 8008e62:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 8008e66:	b13a      	cbz	r2, 8008e78 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x32>
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 26e8 	strb.w	r2, [r3, #1768]	; 0x6e8
 8008e6e:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 8008e72:	3b01      	subs	r3, #1
 8008e74:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 8008e78:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8008e7c:	f895 3778 	ldrb.w	r3, [r5, #1912]	; 0x778
 8008e80:	b90b      	cbnz	r3, 8008e86 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x40>
 8008e82:	2000      	movs	r0, #0
 8008e84:	e00a      	b.n	8008e9c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>
 8008e86:	2308      	movs	r3, #8
 8008e88:	2000      	movs	r0, #0
 8008e8a:	f885 3777 	strb.w	r3, [r5, #1911]	; 0x777
 8008e8e:	f885 0778 	strb.w	r0, [r5, #1912]	; 0x778
 8008e92:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 8008e96:	3b01      	subs	r3, #1
 8008e98:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 8008e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ea0:	2a00      	cmp	r2, #0
 8008ea2:	d13b      	bne.n	8008f1c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xd6>
 8008ea4:	eb00 1801 	add.w	r8, r0, r1, lsl #4
 8008ea8:	f898 3778 	ldrb.w	r3, [r8, #1912]	; 0x778
 8008eac:	b923      	cbnz	r3, 8008eb8 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x72>
 8008eae:	f890 36df 	ldrb.w	r3, [r0, #1759]	; 0x6df
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	f880 36df 	strb.w	r3, [r0, #1759]	; 0x6df
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f04f 0900 	mov.w	r9, #0
 8008ebe:	f888 3778 	strb.w	r3, [r8, #1912]	; 0x778
 8008ec2:	f006 030f 	and.w	r3, r6, #15
 8008ec6:	464a      	mov	r2, r9
 8008ec8:	f888 3776 	strb.w	r3, [r8, #1910]	; 0x776
 8008ecc:	4631      	mov	r1, r6
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f888 9777 	strb.w	r9, [r8, #1911]	; 0x777
 8008ed4:	f7ff ffa8 	bl	8008e28 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8008ed8:	2324      	movs	r3, #36	; 0x24
 8008eda:	fb03 4305 	mla	r3, r3, r5, r4
 8008ede:	f8a8 0774 	strh.w	r0, [r8, #1908]	; 0x774
 8008ee2:	f893 26e8 	ldrb.w	r2, [r3, #1768]	; 0x6e8
 8008ee6:	b132      	cbz	r2, 8008ef6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8008ee8:	f883 96e8 	strb.w	r9, [r3, #1768]	; 0x6e8
 8008eec:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 8008ef0:	3b01      	subs	r3, #1
 8008ef2:	f884 36de 	strb.w	r3, [r4, #1758]	; 0x6de
 8008ef6:	69e0      	ldr	r0, [r4, #28]
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d044      	beq.n	8008f86 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x140>
 8008efc:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d13b      	bne.n	8008f7c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x136>
 8008f04:	6a20      	ldr	r0, [r4, #32]
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d143      	bne.n	8008f92 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x14c>
 8008f0a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	d0b8      	beq.n	8008e82 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8008f10:	6803      	ldr	r3, [r0, #0]
 8008f12:	4632      	mov	r2, r6
 8008f14:	4629      	mov	r1, r5
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	4798      	blx	r3
 8008f1a:	e7b2      	b.n	8008e82 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8008f1c:	2a01      	cmp	r2, #1
 8008f1e:	d1ea      	bne.n	8008ef6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8008f20:	f04f 0824 	mov.w	r8, #36	; 0x24
 8008f24:	fb08 0301 	mla	r3, r8, r1, r0
 8008f28:	f893 36e8 	ldrb.w	r3, [r3, #1768]	; 0x6e8
 8008f2c:	b923      	cbnz	r3, 8008f38 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xf2>
 8008f2e:	f890 36de 	ldrb.w	r3, [r0, #1758]	; 0x6de
 8008f32:	3301      	adds	r3, #1
 8008f34:	f880 36de 	strb.w	r3, [r0, #1758]	; 0x6de
 8008f38:	2301      	movs	r3, #1
 8008f3a:	fb08 4805 	mla	r8, r8, r5, r4
 8008f3e:	f888 36e8 	strb.w	r3, [r8, #1768]	; 0x6e8
 8008f42:	f006 030f 	and.w	r3, r6, #15
 8008f46:	2200      	movs	r2, #0
 8008f48:	f888 36e6 	strb.w	r3, [r8, #1766]	; 0x6e6
 8008f4c:	4631      	mov	r1, r6
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f7ff ff6a 	bl	8008e28 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8008f54:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 8008f58:	f8a8 06e4 	strh.w	r0, [r8, #1764]	; 0x6e4
 8008f5c:	f893 2778 	ldrb.w	r2, [r3, #1912]	; 0x778
 8008f60:	2a00      	cmp	r2, #0
 8008f62:	d0c8      	beq.n	8008ef6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8008f64:	2200      	movs	r2, #0
 8008f66:	f883 2778 	strb.w	r2, [r3, #1912]	; 0x778
 8008f6a:	2208      	movs	r2, #8
 8008f6c:	f883 2777 	strb.w	r2, [r3, #1911]	; 0x777
 8008f70:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 8008f74:	3b01      	subs	r3, #1
 8008f76:	f884 36df 	strb.w	r3, [r4, #1759]	; 0x6df
 8008f7a:	e7bc      	b.n	8008ef6 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xb0>
 8008f7c:	6803      	ldr	r3, [r0, #0]
 8008f7e:	463a      	mov	r2, r7
 8008f80:	4629      	mov	r1, r5
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	4798      	blx	r3
 8008f86:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	f47f af79 	bne.w	8008e82 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x3c>
 8008f90:	e7b8      	b.n	8008f04 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xbe>
 8008f92:	6803      	ldr	r3, [r0, #0]
 8008f94:	4632      	mov	r2, r6
 8008f96:	4629      	mov	r1, r5
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	4798      	blx	r3
 8008f9c:	e7b5      	b.n	8008f0a <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0xc4>
 8008f9e:	f06f 0004 	mvn.w	r0, #4
 8008fa2:	e77b      	b.n	8008e9c <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)+0x56>

08008fa4 <ArtNetNode::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 8008fa4:	b430      	push	{r4, r5}
 8008fa6:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 8008faa:	f3c3 2506 	ubfx	r5, r3, #8, #7
 8008fae:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
 8008fb2:	f3c3 1503 	ubfx	r5, r3, #4, #4
 8008fb6:	f884 503f 	strb.w	r5, [r4, #63]	; 0x3f
 8008fba:	f003 030f 	and.w	r3, r3, #15
 8008fbe:	bc30      	pop	{r4, r5}
 8008fc0:	f7ff bf41 	b.w	8008e46 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>

08008fc4 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>:
 8008fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc8:	2524      	movs	r5, #36	; 0x24
 8008fca:	4604      	mov	r4, r0
 8008fcc:	460f      	mov	r7, r1
 8008fce:	4616      	mov	r6, r2
 8008fd0:	1883      	adds	r3, r0, r2
 8008fd2:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 8008fd6:	0093      	lsls	r3, r2, #2
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	fb05 0503 	mla	r5, r5, r3, r0
 8008fde:	f103 0905 	add.w	r9, r3, #5
 8008fe2:	f103 0801 	add.w	r8, r3, #1
 8008fe6:	45c8      	cmp	r8, r9
 8008fe8:	f105 0524 	add.w	r5, r5, #36	; 0x24
 8008fec:	d009      	beq.n	8009002 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x3e>
 8008fee:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 8008ff2:	089a      	lsrs	r2, r3, #2
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f7ff ff17 	bl	8008e28 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8008ffa:	4643      	mov	r3, r8
 8008ffc:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 8009000:	e7ef      	b.n	8008fe2 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x1e>
 8009002:	6a20      	ldr	r0, [r4, #32]
 8009004:	b150      	cbz	r0, 800901c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 8009006:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 800900a:	2b02      	cmp	r3, #2
 800900c:	d106      	bne.n	800901c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 800900e:	b92e      	cbnz	r6, 800901c <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)+0x58>
 8009010:	6803      	ldr	r3, [r0, #0]
 8009012:	4639      	mov	r1, r7
 8009014:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	4718      	bx	r3
 800901c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009020 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>:
 8009020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009024:	2524      	movs	r5, #36	; 0x24
 8009026:	4604      	mov	r4, r0
 8009028:	460f      	mov	r7, r1
 800902a:	4616      	mov	r6, r2
 800902c:	1883      	adds	r3, r0, r2
 800902e:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
 8009032:	0093      	lsls	r3, r2, #2
 8009034:	b2db      	uxtb	r3, r3
 8009036:	fb05 0503 	mla	r5, r5, r3, r0
 800903a:	f103 0905 	add.w	r9, r3, #5
 800903e:	f103 0801 	add.w	r8, r3, #1
 8009042:	45c8      	cmp	r8, r9
 8009044:	f105 0524 	add.w	r5, r5, #36	; 0x24
 8009048:	d009      	beq.n	800905e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x3e>
 800904a:	f8b5 16c0 	ldrh.w	r1, [r5, #1728]	; 0x6c0
 800904e:	089a      	lsrs	r2, r3, #2
 8009050:	4620      	mov	r0, r4
 8009052:	f7ff fee9 	bl	8008e28 <ArtNetNode::MakePortAddress(unsigned short, unsigned int)>
 8009056:	4643      	mov	r3, r8
 8009058:	f8a5 06c0 	strh.w	r0, [r5, #1728]	; 0x6c0
 800905c:	e7ef      	b.n	800903e <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x1e>
 800905e:	6a20      	ldr	r0, [r4, #32]
 8009060:	b150      	cbz	r0, 8009078 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 8009062:	f894 36d5 	ldrb.w	r3, [r4, #1749]	; 0x6d5
 8009066:	2b02      	cmp	r3, #2
 8009068:	d106      	bne.n	8009078 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800906a:	b92e      	cbnz	r6, 8009078 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)+0x58>
 800906c:	6803      	ldr	r3, [r0, #0]
 800906e:	4639      	mov	r1, r7
 8009070:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	4718      	bx	r3
 8009078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800907c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>:
 800907c:	b570      	push	{r4, r5, r6, lr}
 800907e:	4616      	mov	r6, r2
 8009080:	2224      	movs	r2, #36	; 0x24
 8009082:	fb02 0301 	mla	r3, r2, r1, r0
 8009086:	fb02 0201 	mla	r2, r2, r1, r0
 800908a:	f8c3 6700 	str.w	r6, [r3, #1792]	; 0x700
 800908e:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 8009092:	2e01      	cmp	r6, #1
 8009094:	bf0c      	ite	eq
 8009096:	f043 0301 	orreq.w	r3, r3, #1
 800909a:	f003 03fe 	andne.w	r3, r3, #254	; 0xfe
 800909e:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 80090a2:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 80090a6:	4605      	mov	r5, r0
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	460c      	mov	r4, r1
 80090ac:	d110      	bne.n	80090d0 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 80090ae:	2903      	cmp	r1, #3
 80090b0:	d80e      	bhi.n	80090d0 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 80090b2:	6a00      	ldr	r0, [r0, #32]
 80090b4:	b118      	cbz	r0, 80090be <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x42>
 80090b6:	6803      	ldr	r3, [r0, #0]
 80090b8:	4632      	mov	r2, r6
 80090ba:	6a1b      	ldr	r3, [r3, #32]
 80090bc:	4798      	blx	r3
 80090be:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80090c0:	b130      	cbz	r0, 80090d0 <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)+0x54>
 80090c2:	6803      	ldr	r3, [r0, #0]
 80090c4:	4632      	mov	r2, r6
 80090c6:	4621      	mov	r1, r4
 80090c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	4718      	bx	r3
 80090d0:	bd70      	pop	{r4, r5, r6, pc}

080090d2 <ArtNetNode::GetPortProtocol(unsigned int) const>:
 80090d2:	2324      	movs	r3, #36	; 0x24
 80090d4:	fb03 0001 	mla	r0, r3, r1, r0
 80090d8:	f8d0 0700 	ldr.w	r0, [r0, #1792]	; 0x700
 80090dc:	4770      	bx	lr

080090de <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>:
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	4616      	mov	r6, r2
 80090e2:	2224      	movs	r2, #36	; 0x24
 80090e4:	fb02 0301 	mla	r3, r2, r1, r0
 80090e8:	fb02 0201 	mla	r2, r2, r1, r0
 80090ec:	f8c3 66fc 	str.w	r6, [r3, #1788]	; 0x6fc
 80090f0:	f893 36e7 	ldrb.w	r3, [r3, #1767]	; 0x6e7
 80090f4:	2e01      	cmp	r6, #1
 80090f6:	bf0c      	ite	eq
 80090f8:	f043 0302 	orreq.w	r3, r3, #2
 80090fc:	f003 03fd 	andne.w	r3, r3, #253	; 0xfd
 8009100:	f882 36e7 	strb.w	r3, [r2, #1767]	; 0x6e7
 8009104:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 8009108:	4605      	mov	r5, r0
 800910a:	2b02      	cmp	r3, #2
 800910c:	460c      	mov	r4, r1
 800910e:	d110      	bne.n	8009132 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 8009110:	2903      	cmp	r1, #3
 8009112:	d80e      	bhi.n	8009132 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 8009114:	6a00      	ldr	r0, [r0, #32]
 8009116:	b118      	cbz	r0, 8009120 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x42>
 8009118:	6803      	ldr	r3, [r0, #0]
 800911a:	4632      	mov	r2, r6
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	4798      	blx	r3
 8009120:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009122:	b130      	cbz	r0, 8009132 <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)+0x54>
 8009124:	6803      	ldr	r3, [r0, #0]
 8009126:	4632      	mov	r2, r6
 8009128:	4621      	mov	r1, r4
 800912a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	4718      	bx	r3
 8009132:	bd70      	pop	{r4, r5, r6, pc}

08009134 <ArtNetNode::GetMergeMode(unsigned int) const>:
 8009134:	2324      	movs	r3, #36	; 0x24
 8009136:	fb03 0001 	mla	r0, r3, r1, r0
 800913a:	f8d0 06fc 	ldr.w	r0, [r0, #1788]	; 0x6fc
 800913e:	4770      	bx	lr

08009140 <ArtNetNode::HandleAddress()>:
 8009140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009144:	2301      	movs	r3, #1
 8009146:	f880 36d4 	strb.w	r3, [r0, #1748]	; 0x6d4
 800914a:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800914e:	4604      	mov	r4, r0
 8009150:	b133      	cbz	r3, 8009160 <ArtNetNode::HandleAddress()+0x20>
 8009152:	f100 01ae 	add.w	r1, r0, #174	; 0xae
 8009156:	f7ff fbf3 	bl	8008940 <ArtNetNode::SetShortName(char const*)>
 800915a:	2306      	movs	r3, #6
 800915c:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 8009160:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
 8009164:	b13b      	cbz	r3, 8009176 <ArtNetNode::HandleAddress()+0x36>
 8009166:	4620      	mov	r0, r4
 8009168:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
 800916c:	f7ff fc10 	bl	8008990 <ArtNetNode::SetLongName(char const*)>
 8009170:	2307      	movs	r3, #7
 8009172:	f884 36d4 	strb.w	r3, [r4, #1748]	; 0x6d4
 8009176:	f894 50ad 	ldrb.w	r5, [r4, #173]	; 0xad
 800917a:	b105      	cbz	r5, 800917e <ArtNetNode::HandleAddress()+0x3e>
 800917c:	3d01      	subs	r5, #1
 800917e:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 8009182:	2900      	cmp	r1, #0
 8009184:	d13d      	bne.n	8009202 <ArtNetNode::HandleAddress()+0xc2>
 8009186:	462a      	mov	r2, r5
 8009188:	4620      	mov	r0, r4
 800918a:	f7ff ff1b 	bl	8008fc4 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800918e:	f894 10ac 	ldrb.w	r1, [r4, #172]	; 0xac
 8009192:	2900      	cmp	r1, #0
 8009194:	d13b      	bne.n	800920e <ArtNetNode::HandleAddress()+0xce>
 8009196:	462a      	mov	r2, r5
 8009198:	4620      	mov	r0, r4
 800919a:	f7ff ff41 	bl	8009020 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800919e:	00ad      	lsls	r5, r5, #2
 80091a0:	b2ed      	uxtb	r5, r5
 80091a2:	4627      	mov	r7, r4
 80091a4:	462e      	mov	r6, r5
 80091a6:	f504 7882 	add.w	r8, r4, #260	; 0x104
 80091aa:	f504 7984 	add.w	r9, r4, #264	; 0x108
 80091ae:	f818 3b01 	ldrb.w	r3, [r8], #1
 80091b2:	2b7f      	cmp	r3, #127	; 0x7f
 80091b4:	d006      	beq.n	80091c4 <ArtNetNode::HandleAddress()+0x84>
 80091b6:	bb83      	cbnz	r3, 800921a <ArtNetNode::HandleAddress()+0xda>
 80091b8:	2301      	movs	r3, #1
 80091ba:	2201      	movs	r2, #1
 80091bc:	4631      	mov	r1, r6
 80091be:	4620      	mov	r0, r4
 80091c0:	f7ff fe41 	bl	8008e46 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 80091c4:	f818 2c05 	ldrb.w	r2, [r8, #-5]
 80091c8:	2a7f      	cmp	r2, #127	; 0x7f
 80091ca:	d005      	beq.n	80091d8 <ArtNetNode::HandleAddress()+0x98>
 80091cc:	bb52      	cbnz	r2, 8009224 <ArtNetNode::HandleAddress()+0xe4>
 80091ce:	2301      	movs	r3, #1
 80091d0:	4631      	mov	r1, r6
 80091d2:	4620      	mov	r0, r4
 80091d4:	f7ff fe37 	bl	8008e46 <ArtNetNode::SetUniverseSwitch(unsigned int, lightset::PortDir, unsigned char)>
 80091d8:	3601      	adds	r6, #1
 80091da:	45c1      	cmp	r9, r8
 80091dc:	b2f6      	uxtb	r6, r6
 80091de:	d1e6      	bne.n	80091ae <ArtNetNode::HandleAddress()+0x6e>
 80091e0:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 80091e4:	2913      	cmp	r1, #19
 80091e6:	d823      	bhi.n	8009230 <ArtNetNode::HandleAddress()+0xf0>
 80091e8:	290f      	cmp	r1, #15
 80091ea:	f200 8092 	bhi.w	8009312 <ArtNetNode::HandleAddress()+0x1d2>
 80091ee:	3901      	subs	r1, #1
 80091f0:	b2cb      	uxtb	r3, r1
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d82a      	bhi.n	800924c <ArtNetNode::HandleAddress()+0x10c>
 80091f6:	2903      	cmp	r1, #3
 80091f8:	d828      	bhi.n	800924c <ArtNetNode::HandleAddress()+0x10c>
 80091fa:	e8df f001 	tbb	[pc, r1]
 80091fe:	7e726654 	mrcvc	6, 3, r6, cr2, cr4, {2}
 8009202:	060f      	lsls	r7, r1, #24
 8009204:	d5c3      	bpl.n	800918e <ArtNetNode::HandleAddress()+0x4e>
 8009206:	462a      	mov	r2, r5
 8009208:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800920c:	e7bc      	b.n	8009188 <ArtNetNode::HandleAddress()+0x48>
 800920e:	060e      	lsls	r6, r1, #24
 8009210:	d5c5      	bpl.n	800919e <ArtNetNode::HandleAddress()+0x5e>
 8009212:	462a      	mov	r2, r5
 8009214:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8009218:	e7be      	b.n	8009198 <ArtNetNode::HandleAddress()+0x58>
 800921a:	0618      	lsls	r0, r3, #24
 800921c:	d5d2      	bpl.n	80091c4 <ArtNetNode::HandleAddress()+0x84>
 800921e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009222:	e7ca      	b.n	80091ba <ArtNetNode::HandleAddress()+0x7a>
 8009224:	0611      	lsls	r1, r2, #24
 8009226:	d5d7      	bpl.n	80091d8 <ArtNetNode::HandleAddress()+0x98>
 8009228:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 800922c:	2200      	movs	r2, #0
 800922e:	e7cf      	b.n	80091d0 <ArtNetNode::HandleAddress()+0x90>
 8009230:	2973      	cmp	r1, #115	; 0x73
 8009232:	d818      	bhi.n	8009266 <ArtNetNode::HandleAddress()+0x126>
 8009234:	296f      	cmp	r1, #111	; 0x6f
 8009236:	d87a      	bhi.n	800932e <ArtNetNode::HandleAddress()+0x1ee>
 8009238:	2953      	cmp	r1, #83	; 0x53
 800923a:	d803      	bhi.n	8009244 <ArtNetNode::HandleAddress()+0x104>
 800923c:	294f      	cmp	r1, #79	; 0x4f
 800923e:	d905      	bls.n	800924c <ArtNetNode::HandleAddress()+0x10c>
 8009240:	2200      	movs	r2, #0
 8009242:	e067      	b.n	8009314 <ArtNetNode::HandleAddress()+0x1d4>
 8009244:	f1a1 0360 	sub.w	r3, r1, #96	; 0x60
 8009248:	2b03      	cmp	r3, #3
 800924a:	d969      	bls.n	8009320 <ArtNetNode::HandleAddress()+0x1e0>
 800924c:	69e0      	ldr	r0, [r4, #28]
 800924e:	b120      	cbz	r0, 800925a <ArtNetNode::HandleAddress()+0x11a>
 8009250:	6803      	ldr	r3, [r0, #0]
 8009252:	f894 110a 	ldrb.w	r1, [r4, #266]	; 0x10a
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	4798      	blx	r3
 800925a:	4620      	mov	r0, r4
 800925c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009260:	2101      	movs	r1, #1
 8009262:	f000 bc55 	b.w	8009b10 <ArtNetNode::SendPollRelply(bool)>
 8009266:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b03      	cmp	r3, #3
 800926e:	d8ed      	bhi.n	800924c <ArtNetNode::HandleAddress()+0x10c>
 8009270:	4b45      	ldr	r3, [pc, #276]	; (8009388 <ArtNetNode::HandleAddress()+0x248>)
 8009272:	f001 0103 	and.w	r1, r1, #3
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	440d      	add	r5, r1
 800927a:	07d2      	lsls	r2, r2, #31
 800927c:	bf5c      	itt	pl
 800927e:	2201      	movpl	r2, #1
 8009280:	601a      	strpl	r2, [r3, #0]
 8009282:	f240 6204 	movw	r2, #1540	; 0x604
 8009286:	b2ed      	uxtb	r5, r5
 8009288:	436a      	muls	r2, r5
 800928a:	4b40      	ldr	r3, [pc, #256]	; (800938c <ArtNetNode::HandleAddress()+0x24c>)
 800928c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009290:	441a      	add	r2, r3
 8009292:	4611      	mov	r1, r2
 8009294:	2600      	movs	r6, #0
 8009296:	68a0      	ldr	r0, [r4, #8]
 8009298:	f502 7700 	add.w	r7, r2, #512	; 0x200
 800929c:	42b9      	cmp	r1, r7
 800929e:	d048      	beq.n	8009332 <ArtNetNode::HandleAddress()+0x1f2>
 80092a0:	f801 6b01 	strb.w	r6, [r1], #1
 80092a4:	e7fa      	b.n	800929c <ArtNetNode::HandleAddress()+0x15c>
 80092a6:	2300      	movs	r3, #0
 80092a8:	2224      	movs	r2, #36	; 0x24
 80092aa:	f884 36da 	strb.w	r3, [r4, #1754]	; 0x6da
 80092ae:	7823      	ldrb	r3, [r4, #0]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	fb02 4303 	mla	r3, r2, r3, r4
 80092b6:	429f      	cmp	r7, r3
 80092b8:	d0c8      	beq.n	800924c <ArtNetNode::HandleAddress()+0x10c>
 80092ba:	f897 26e7 	ldrb.w	r2, [r7, #1767]	; 0x6e7
 80092be:	3724      	adds	r7, #36	; 0x24
 80092c0:	f022 0208 	bic.w	r2, r2, #8
 80092c4:	f887 26c3 	strb.w	r2, [r7, #1731]	; 0x6c3
 80092c8:	e7f5      	b.n	80092b6 <ArtNetNode::HandleAddress()+0x176>
 80092ca:	4b31      	ldr	r3, [pc, #196]	; (8009390 <ArtNetNode::HandleAddress()+0x250>)
 80092cc:	2102      	movs	r1, #2
 80092ce:	6818      	ldr	r0, [r3, #0]
 80092d0:	f009 fffe 	bl	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 80092d4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80092d8:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80092dc:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80092e0:	e7b4      	b.n	800924c <ArtNetNode::HandleAddress()+0x10c>
 80092e2:	4b2b      	ldr	r3, [pc, #172]	; (8009390 <ArtNetNode::HandleAddress()+0x250>)
 80092e4:	2100      	movs	r1, #0
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	f009 fff2 	bl	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 80092ec:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 80092f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092f8:	e7f0      	b.n	80092dc <ArtNetNode::HandleAddress()+0x19c>
 80092fa:	4b25      	ldr	r3, [pc, #148]	; (8009390 <ArtNetNode::HandleAddress()+0x250>)
 80092fc:	2104      	movs	r1, #4
 80092fe:	6818      	ldr	r0, [r3, #0]
 8009300:	f009 ffe6 	bl	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 8009304:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800930c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009310:	e7e4      	b.n	80092dc <ArtNetNode::HandleAddress()+0x19c>
 8009312:	2201      	movs	r2, #1
 8009314:	4620      	mov	r0, r4
 8009316:	f001 0103 	and.w	r1, r1, #3
 800931a:	f7ff fee0 	bl	80090de <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800931e:	e795      	b.n	800924c <ArtNetNode::HandleAddress()+0x10c>
 8009320:	2200      	movs	r2, #0
 8009322:	4620      	mov	r0, r4
 8009324:	f001 0103 	and.w	r1, r1, #3
 8009328:	f7ff fea8 	bl	800907c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800932c:	e78e      	b.n	800924c <ArtNetNode::HandleAddress()+0x10c>
 800932e:	2201      	movs	r2, #1
 8009330:	e7f7      	b.n	8009322 <ArtNetNode::HandleAddress()+0x1e2>
 8009332:	f240 6104 	movw	r1, #1540	; 0x604
 8009336:	fb01 3105 	mla	r1, r1, r5, r3
 800933a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800933e:	f8c1 3600 	str.w	r3, [r1, #1536]	; 0x600
 8009342:	6801      	ldr	r1, [r0, #0]
 8009344:	690e      	ldr	r6, [r1, #16]
 8009346:	4629      	mov	r1, r5
 8009348:	47b0      	blx	r6
 800934a:	2d03      	cmp	r5, #3
 800934c:	f63f af7e 	bhi.w	800924c <ArtNetNode::HandleAddress()+0x10c>
 8009350:	2624      	movs	r6, #36	; 0x24
 8009352:	fb06 4605 	mla	r6, r6, r5, r4
 8009356:	f8d6 3700 	ldr.w	r3, [r6, #1792]	; 0x700
 800935a:	2b00      	cmp	r3, #0
 800935c:	f47f af76 	bne.w	800924c <ArtNetNode::HandleAddress()+0x10c>
 8009360:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8009364:	2b00      	cmp	r3, #0
 8009366:	f47f af71 	bne.w	800924c <ArtNetNode::HandleAddress()+0x10c>
 800936a:	68a0      	ldr	r0, [r4, #8]
 800936c:	4629      	mov	r1, r5
 800936e:	6803      	ldr	r3, [r0, #0]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	4798      	blx	r3
 8009374:	2301      	movs	r3, #1
 8009376:	f886 3705 	strb.w	r3, [r6, #1797]	; 0x705
 800937a:	f896 36e7 	ldrb.w	r3, [r6, #1767]	; 0x6e7
 800937e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009382:	f886 36e7 	strb.w	r3, [r6, #1767]	; 0x6e7
 8009386:	e761      	b.n	800924c <ArtNetNode::HandleAddress()+0x10c>
 8009388:	200000e8 	andcs	r0, r0, r8, ror #1
 800938c:	200000ec 	andcs	r0, r0, ip, ror #1
 8009390:	2000a960 	andcs	sl, r0, r0, ror #18

08009394 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>:
 8009394:	f240 6304 	movw	r3, #1540	; 0x604
 8009398:	fb03 0101 	mla	r1, r3, r1, r0
 800939c:	2300      	movs	r3, #0
 800939e:	b510      	push	{r4, lr}
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d00a      	beq.n	80093ba <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0x26>
 80093a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093a8:	3301      	adds	r3, #1
 80093aa:	f891 01ff 	ldrb.w	r0, [r1, #511]	; 0x1ff
 80093ae:	42a0      	cmp	r0, r4
 80093b0:	bf38      	it	cc
 80093b2:	4620      	movcc	r0, r4
 80093b4:	f881 03ff 	strb.w	r0, [r1, #1023]	; 0x3ff
 80093b8:	e7f2      	b.n	80093a0 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]+0xc>
 80093ba:	bd10      	pop	{r4, pc}

080093bc <memcpy.isra.0>:
 80093bc:	3801      	subs	r0, #1
 80093be:	440a      	add	r2, r1
 80093c0:	4291      	cmp	r1, r2
 80093c2:	d004      	beq.n	80093ce <memcpy.isra.0+0x12>
 80093c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c8:	f800 3f01 	strb.w	r3, [r0, #1]!
 80093cc:	e7f8      	b.n	80093c0 <memcpy.isra.0+0x4>
 80093ce:	4770      	bx	lr

080093d0 <lightset::Data::Get()>:
 80093d0:	4b03      	ldr	r3, [pc, #12]	; (80093e0 <lightset::Data::Get()+0x10>)
 80093d2:	4804      	ldr	r0, [pc, #16]	; (80093e4 <lightset::Data::Get()+0x14>)
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	07d2      	lsls	r2, r2, #31
 80093d8:	bf5c      	itt	pl
 80093da:	2201      	movpl	r2, #1
 80093dc:	601a      	strpl	r2, [r3, #0]
 80093de:	4770      	bx	lr
 80093e0:	200000e8 	andcs	r0, r0, r8, ror #1
 80093e4:	200000ec 	andcs	r0, r0, ip, ror #1

080093e8 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>:
 80093e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ec:	4615      	mov	r5, r2
 80093ee:	460f      	mov	r7, r1
 80093f0:	4604      	mov	r4, r0
 80093f2:	f7ff ffed 	bl	80093d0 <lightset::Data::Get()>
 80093f6:	4606      	mov	r6, r0
 80093f8:	f240 6004 	movw	r0, #1540	; 0x604
 80093fc:	4344      	muls	r4, r0
 80093fe:	eb06 0804 	add.w	r8, r6, r4
 8009402:	462a      	mov	r2, r5
 8009404:	4639      	mov	r1, r7
 8009406:	4640      	mov	r0, r8
 8009408:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800940c:	f7ff ffd6 	bl	80093bc <memcpy.isra.0>
 8009410:	462a      	mov	r2, r5
 8009412:	4639      	mov	r1, r7
 8009414:	f8c8 5600 	str.w	r5, [r8, #1536]	; 0x600
 8009418:	1930      	adds	r0, r6, r4
 800941a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800941e:	f7ff bfcd 	b.w	80093bc <memcpy.isra.0>

08009422 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 8009422:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009426:	4680      	mov	r8, r0
 8009428:	f240 6404 	movw	r4, #1540	; 0x604
 800942c:	4615      	mov	r5, r2
 800942e:	460f      	mov	r7, r1
 8009430:	4699      	mov	r9, r3
 8009432:	f7ff ffcd 	bl	80093d0 <lightset::Data::Get()>
 8009436:	fb04 f408 	mul.w	r4, r4, r8
 800943a:	eb00 0a04 	add.w	sl, r0, r4
 800943e:	4606      	mov	r6, r0
 8009440:	462a      	mov	r2, r5
 8009442:	4639      	mov	r1, r7
 8009444:	4650      	mov	r0, sl
 8009446:	f7ff ffb9 	bl	80093bc <memcpy.isra.0>
 800944a:	f8ca 5600 	str.w	r5, [sl, #1536]	; 0x600
 800944e:	f1b9 0f00 	cmp.w	r9, #0
 8009452:	d106      	bne.n	8009462 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x40>
 8009454:	462a      	mov	r2, r5
 8009456:	4641      	mov	r1, r8
 8009458:	4630      	mov	r0, r6
 800945a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800945e:	f7ff bf99 	b.w	8009394 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 8009462:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009466:	462a      	mov	r2, r5
 8009468:	4639      	mov	r1, r7
 800946a:	1930      	adds	r0, r6, r4
 800946c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	f7ff bfa4 	b.w	80093bc <memcpy.isra.0>

08009474 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>:
 8009474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009478:	4616      	mov	r6, r2
 800947a:	4699      	mov	r9, r3
 800947c:	4680      	mov	r8, r0
 800947e:	460f      	mov	r7, r1
 8009480:	f7ff ffa6 	bl	80093d0 <lightset::Data::Get()>
 8009484:	f240 6404 	movw	r4, #1540	; 0x604
 8009488:	4605      	mov	r5, r0
 800948a:	fb04 f408 	mul.w	r4, r4, r8
 800948e:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8009492:	4632      	mov	r2, r6
 8009494:	4639      	mov	r1, r7
 8009496:	4428      	add	r0, r5
 8009498:	f7ff ff90 	bl	80093bc <memcpy.isra.0>
 800949c:	192b      	adds	r3, r5, r4
 800949e:	f8c3 6600 	str.w	r6, [r3, #1536]	; 0x600
 80094a2:	f1b9 0f00 	cmp.w	r9, #0
 80094a6:	d106      	bne.n	80094b6 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)+0x42>
 80094a8:	4632      	mov	r2, r6
 80094aa:	4641      	mov	r1, r8
 80094ac:	4628      	mov	r0, r5
 80094ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b2:	f7ff bf6f 	b.w	8009394 <lightset::Data::IMergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode) [clone .part.0]>
 80094b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80094ba:	4632      	mov	r2, r6
 80094bc:	4639      	mov	r1, r7
 80094be:	1928      	adds	r0, r5, r4
 80094c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094c4:	f7ff bf7a 	b.w	80093bc <memcpy.isra.0>

080094c8 <ArtNetNode::UpdateMergeStatus(unsigned int)>:
 80094c8:	f890 36da 	ldrb.w	r3, [r0, #1754]	; 0x6da
 80094cc:	b91b      	cbnz	r3, 80094d6 <ArtNetNode::UpdateMergeStatus(unsigned int)+0xe>
 80094ce:	f240 1301 	movw	r3, #257	; 0x101
 80094d2:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 80094d6:	2324      	movs	r3, #36	; 0x24
 80094d8:	fb03 0001 	mla	r0, r3, r1, r0
 80094dc:	f890 36e7 	ldrb.w	r3, [r0, #1767]	; 0x6e7
 80094e0:	f043 0308 	orr.w	r3, r3, #8
 80094e4:	f880 36e7 	strb.w	r3, [r0, #1767]	; 0x6e7
 80094e8:	4770      	bx	lr

080094ea <ArtNetNode::CheckMergeTimeouts(unsigned int)>:
 80094ea:	2324      	movs	r3, #36	; 0x24
 80094ec:	b530      	push	{r4, r5, lr}
 80094ee:	f242 7510 	movw	r5, #10000	; 0x2710
 80094f2:	fb03 0301 	mla	r3, r3, r1, r0
 80094f6:	f8d0 2664 	ldr.w	r2, [r0, #1636]	; 0x664
 80094fa:	f8d3 46ec 	ldr.w	r4, [r3, #1772]	; 0x6ec
 80094fe:	1b14      	subs	r4, r2, r4
 8009500:	42ac      	cmp	r4, r5
 8009502:	d908      	bls.n	8009516 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x2c>
 8009504:	2400      	movs	r4, #0
 8009506:	f8c3 46f0 	str.w	r4, [r3, #1776]	; 0x6f0
 800950a:	f893 46e7 	ldrb.w	r4, [r3, #1767]	; 0x6e7
 800950e:	f024 0408 	bic.w	r4, r4, #8
 8009512:	f883 46e7 	strb.w	r4, [r3, #1767]	; 0x6e7
 8009516:	2324      	movs	r3, #36	; 0x24
 8009518:	fb03 0101 	mla	r1, r3, r1, r0
 800951c:	f8d1 36f4 	ldr.w	r3, [r1, #1780]	; 0x6f4
 8009520:	1ad2      	subs	r2, r2, r3
 8009522:	f242 7310 	movw	r3, #10000	; 0x2710
 8009526:	429a      	cmp	r2, r3
 8009528:	d908      	bls.n	800953c <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x52>
 800952a:	2300      	movs	r3, #0
 800952c:	f8c1 36f8 	str.w	r3, [r1, #1784]	; 0x6f8
 8009530:	f891 36e7 	ldrb.w	r3, [r1, #1767]	; 0x6e7
 8009534:	f023 0308 	bic.w	r3, r3, #8
 8009538:	f881 36e7 	strb.w	r3, [r1, #1767]	; 0x6e7
 800953c:	2124      	movs	r1, #36	; 0x24
 800953e:	7803      	ldrb	r3, [r0, #0]
 8009540:	4602      	mov	r2, r0
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	fb01 0303 	mla	r3, r1, r3, r0
 8009548:	2100      	movs	r1, #0
 800954a:	429a      	cmp	r2, r3
 800954c:	d006      	beq.n	800955c <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x72>
 800954e:	f892 46e7 	ldrb.w	r4, [r2, #1767]	; 0x6e7
 8009552:	3224      	adds	r2, #36	; 0x24
 8009554:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8009558:	4321      	orrs	r1, r4
 800955a:	e7f6      	b.n	800954a <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x60>
 800955c:	b919      	cbnz	r1, 8009566 <ArtNetNode::CheckMergeTimeouts(unsigned int)+0x7c>
 800955e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009562:	f8a0 36da 	strh.w	r3, [r0, #1754]	; 0x6da
 8009566:	bd30      	pop	{r4, r5, pc}

08009568 <ArtNetNode::HandleDmx()>:
 8009568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800956c:	f8b0 70b0 	ldrh.w	r7, [r0, #176]	; 0xb0
 8009570:	4604      	mov	r4, r0
 8009572:	ba7f      	rev16	r7, r7
 8009574:	b2bf      	uxth	r7, r7
 8009576:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 800957a:	bf28      	it	cs
 800957c:	f44f 7700 	movcs.w	r7, #512	; 0x200
 8009580:	4605      	mov	r5, r0
 8009582:	2600      	movs	r6, #0
 8009584:	f04f 0901 	mov.w	r9, #1
 8009588:	f100 08b2 	add.w	r8, r0, #178	; 0xb2
 800958c:	7823      	ldrb	r3, [r4, #0]
 800958e:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8009592:	f080 809f 	bcs.w	80096d4 <ArtNetNode::HandleDmx()+0x16c>
 8009596:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 800959a:	2b00      	cmp	r3, #0
 800959c:	d056      	beq.n	800964c <ArtNetNode::HandleDmx()+0xe4>
 800959e:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d152      	bne.n	800964c <ArtNetNode::HandleDmx()+0xe4>
 80095a6:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
 80095aa:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d14c      	bne.n	800964c <ArtNetNode::HandleDmx()+0xe4>
 80095b2:	f895 36e7 	ldrb.w	r3, [r5, #1767]	; 0x6e7
 80095b6:	f8d5 b6f0 	ldr.w	fp, [r5, #1776]	; 0x6f0
 80095ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095be:	f885 36e7 	strb.w	r3, [r5, #1767]	; 0x6e7
 80095c2:	f894 36da 	ldrb.w	r3, [r4, #1754]	; 0x6da
 80095c6:	f8d5 a6f8 	ldr.w	sl, [r5, #1784]	; 0x6f8
 80095ca:	b133      	cbz	r3, 80095da <ArtNetNode::HandleDmx()+0x72>
 80095cc:	f894 36dc 	ldrb.w	r3, [r4, #1756]	; 0x6dc
 80095d0:	b91b      	cbnz	r3, 80095da <ArtNetNode::HandleDmx()+0x72>
 80095d2:	4631      	mov	r1, r6
 80095d4:	4620      	mov	r0, r4
 80095d6:	f7ff ff88 	bl	80094ea <ArtNetNode::CheckMergeTimeouts(unsigned int)>
 80095da:	ea5b 020a 	orrs.w	r2, fp, sl
 80095de:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 80095e2:	d136      	bne.n	8009652 <ArtNetNode::HandleDmx()+0xea>
 80095e4:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 80095e8:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 80095ec:	463a      	mov	r2, r7
 80095ee:	4641      	mov	r1, r8
 80095f0:	4630      	mov	r0, r6
 80095f2:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 80095f6:	f7ff fef7 	bl	80093e8 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 80095fa:	f894 36d9 	ldrb.w	r3, [r4, #1753]	; 0x6d9
 80095fe:	b9fb      	cbnz	r3, 8009640 <ArtNetNode::HandleDmx()+0xd8>
 8009600:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8009604:	f7ff fee4 	bl	80093d0 <lightset::Data::Get()>
 8009608:	f240 6304 	movw	r3, #1540	; 0x604
 800960c:	4373      	muls	r3, r6
 800960e:	18c1      	adds	r1, r0, r3
 8009610:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8009614:	f8da 3000 	ldr.w	r3, [sl]
 8009618:	4402      	add	r2, r0
 800961a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 800961e:	4650      	mov	r0, sl
 8009620:	f8d1 3600 	ldr.w	r3, [r1, #1536]	; 0x600
 8009624:	4631      	mov	r1, r6
 8009626:	47d8      	blx	fp
 8009628:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 800962c:	b943      	cbnz	r3, 8009640 <ArtNetNode::HandleDmx()+0xd8>
 800962e:	68a0      	ldr	r0, [r4, #8]
 8009630:	4631      	mov	r1, r6
 8009632:	6803      	ldr	r3, [r0, #0]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	4798      	blx	r3
 8009638:	f884 96db 	strb.w	r9, [r4, #1755]	; 0x6db
 800963c:	f885 9705 	strb.w	r9, [r5, #1797]	; 0x705
 8009640:	f894 36dd 	ldrb.w	r3, [r4, #1757]	; 0x6dd
 8009644:	f043 0302 	orr.w	r3, r3, #2
 8009648:	f884 36dd 	strb.w	r3, [r4, #1757]	; 0x6dd
 800964c:	3601      	adds	r6, #1
 800964e:	3524      	adds	r5, #36	; 0x24
 8009650:	e79c      	b.n	800958c <ArtNetNode::HandleDmx()+0x24>
 8009652:	459b      	cmp	fp, r3
 8009654:	d104      	bne.n	8009660 <ArtNetNode::HandleDmx()+0xf8>
 8009656:	f1ba 0f00 	cmp.w	sl, #0
 800965a:	d0c5      	beq.n	80095e8 <ArtNetNode::HandleDmx()+0x80>
 800965c:	b11b      	cbz	r3, 8009666 <ArtNetNode::HandleDmx()+0xfe>
 800965e:	e037      	b.n	80096d0 <ArtNetNode::HandleDmx()+0x168>
 8009660:	f1bb 0f00 	cmp.w	fp, #0
 8009664:	d132      	bne.n	80096cc <ArtNetNode::HandleDmx()+0x164>
 8009666:	459a      	cmp	sl, r3
 8009668:	d11d      	bne.n	80096a6 <ArtNetNode::HandleDmx()+0x13e>
 800966a:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 800966e:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 8009672:	f7ff fead 	bl	80093d0 <lightset::Data::Get()>
 8009676:	f240 6304 	movw	r3, #1540	; 0x604
 800967a:	4683      	mov	fp, r0
 800967c:	fb03 fa06 	mul.w	sl, r3, r6
 8009680:	f50a 7000 	add.w	r0, sl, #512	; 0x200
 8009684:	463a      	mov	r2, r7
 8009686:	4641      	mov	r1, r8
 8009688:	4458      	add	r0, fp
 800968a:	f7ff fe97 	bl	80093bc <memcpy.isra.0>
 800968e:	eb0b 030a 	add.w	r3, fp, sl
 8009692:	f50a 6080 	add.w	r0, sl, #1024	; 0x400
 8009696:	463a      	mov	r2, r7
 8009698:	4641      	mov	r1, r8
 800969a:	f8c3 7600 	str.w	r7, [r3, #1536]	; 0x600
 800969e:	4458      	add	r0, fp
 80096a0:	f7ff fe8c 	bl	80093bc <memcpy.isra.0>
 80096a4:	e7a9      	b.n	80095fa <ArtNetNode::HandleDmx()+0x92>
 80096a6:	b9bb      	cbnz	r3, 80096d8 <ArtNetNode::HandleDmx()+0x170>
 80096a8:	f8c5 36f0 	str.w	r3, [r5, #1776]	; 0x6f0
 80096ac:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 80096b0:	4631      	mov	r1, r6
 80096b2:	4620      	mov	r0, r4
 80096b4:	f8c5 36ec 	str.w	r3, [r5, #1772]	; 0x6ec
 80096b8:	f7ff ff06 	bl	80094c8 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 80096bc:	463a      	mov	r2, r7
 80096be:	4641      	mov	r1, r8
 80096c0:	4630      	mov	r0, r6
 80096c2:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 80096c6:	f7ff feac 	bl	8009422 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 80096ca:	e796      	b.n	80095fa <ArtNetNode::HandleDmx()+0x92>
 80096cc:	459b      	cmp	fp, r3
 80096ce:	d118      	bne.n	8009702 <ArtNetNode::HandleDmx()+0x19a>
 80096d0:	459a      	cmp	sl, r3
 80096d2:	d1eb      	bne.n	80096ac <ArtNetNode::HandleDmx()+0x144>
 80096d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d8:	f1ba 0f00 	cmp.w	sl, #0
 80096dc:	d1e4      	bne.n	80096a8 <ArtNetNode::HandleDmx()+0x140>
 80096de:	f8c5 36f8 	str.w	r3, [r5, #1784]	; 0x6f8
 80096e2:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 80096e6:	4631      	mov	r1, r6
 80096e8:	4620      	mov	r0, r4
 80096ea:	f8c5 36f4 	str.w	r3, [r5, #1780]	; 0x6f4
 80096ee:	f7ff feeb 	bl	80094c8 <ArtNetNode::UpdateMergeStatus(unsigned int)>
 80096f2:	463a      	mov	r2, r7
 80096f4:	4641      	mov	r1, r8
 80096f6:	4630      	mov	r0, r6
 80096f8:	f8d5 36fc 	ldr.w	r3, [r5, #1788]	; 0x6fc
 80096fc:	f7ff feba 	bl	8009474 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 8009700:	e77b      	b.n	80095fa <ArtNetNode::HandleDmx()+0x92>
 8009702:	f1ba 0f00 	cmp.w	sl, #0
 8009706:	d0ea      	beq.n	80096de <ArtNetNode::HandleDmx()+0x176>
 8009708:	459a      	cmp	sl, r3
 800970a:	d0ea      	beq.n	80096e2 <ArtNetNode::HandleDmx()+0x17a>
 800970c:	e7e2      	b.n	80096d4 <ArtNetNode::HandleDmx()+0x16c>
	...

08009710 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>:
 8009710:	2903      	cmp	r1, #3
 8009712:	b510      	push	{r4, lr}
 8009714:	d80d      	bhi.n	8009732 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x22>
 8009716:	4b07      	ldr	r3, [pc, #28]	; (8009734 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)+0x24>)
 8009718:	0109      	lsls	r1, r1, #4
 800971a:	681c      	ldr	r4, [r3, #0]
 800971c:	4401      	add	r1, r0
 800971e:	6923      	ldr	r3, [r4, #16]
 8009720:	69a4      	ldr	r4, [r4, #24]
 8009722:	4053      	eors	r3, r2
 8009724:	4223      	tst	r3, r4
 8009726:	bf16      	itet	ne
 8009728:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
 800972a:	f8c1 277c 	streq.w	r2, [r1, #1916]	; 0x77c
 800972e:	f8c1 377c 	strne.w	r3, [r1, #1916]	; 0x77c
 8009732:	bd10      	pop	{r4, pc}
 8009734:	2000a298 	mulcs	r0, r8, r2

08009738 <ArtNetNode::HandleDmxIn()>:
 8009738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800973c:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8009740:	ab05      	add	r3, sp, #20
 8009742:	4607      	mov	r7, r0
 8009744:	2208      	movs	r2, #8
 8009746:	461e      	mov	r6, r3
 8009748:	4942      	ldr	r1, [pc, #264]	; (8009854 <ArtNetNode::HandleDmxIn()+0x11c>)
 800974a:	3a01      	subs	r2, #1
 800974c:	d304      	bcc.n	8009758 <ArtNetNode::HandleDmxIn()+0x20>
 800974e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8009752:	f803 0b01 	strb.w	r0, [r3], #1
 8009756:	e7f8      	b.n	800974a <ArtNetNode::HandleDmxIn()+0x12>
 8009758:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800975c:	2500      	movs	r5, #0
 800975e:	8133      	strh	r3, [r6, #8]
 8009760:	230e      	movs	r3, #14
 8009762:	463c      	mov	r4, r7
 8009764:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8009858 <ArtNetNode::HandleDmxIn()+0x120>
 8009768:	72b5      	strb	r5, [r6, #10]
 800976a:	72f3      	strb	r3, [r6, #11]
 800976c:	f894 3778 	ldrb.w	r3, [r4, #1912]	; 0x778
 8009770:	2b00      	cmp	r3, #0
 8009772:	d049      	beq.n	8009808 <ArtNetNode::HandleDmxIn()+0xd0>
 8009774:	6978      	ldr	r0, [r7, #20]
 8009776:	4629      	mov	r1, r5
 8009778:	6803      	ldr	r3, [r0, #0]
 800977a:	aa03      	add	r2, sp, #12
 800977c:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8009780:	ab04      	add	r3, sp, #16
 8009782:	47c8      	blx	r9
 8009784:	2800      	cmp	r0, #0
 8009786:	d048      	beq.n	800981a <ArtNetNode::HandleDmxIn()+0xe2>
 8009788:	f894 3780 	ldrb.w	r3, [r4, #1920]	; 0x780
 800978c:	7375      	strb	r5, [r6, #13]
 800978e:	3301      	adds	r3, #1
 8009790:	b2db      	uxtb	r3, r3
 8009792:	f884 3780 	strb.w	r3, [r4, #1920]	; 0x780
 8009796:	7333      	strb	r3, [r6, #12]
 8009798:	f8b4 3774 	ldrh.w	r3, [r4, #1908]	; 0x774
 800979c:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 80097a0:	81f3      	strh	r3, [r6, #14]
 80097a2:	9b03      	ldr	r3, [sp, #12]
 80097a4:	eb00 0c03 	add.w	ip, r0, r3
 80097a8:	4560      	cmp	r0, ip
 80097aa:	d004      	beq.n	80097b6 <ArtNetNode::HandleDmxIn()+0x7e>
 80097ac:	f810 1b01 	ldrb.w	r1, [r0], #1
 80097b0:	f802 1b01 	strb.w	r1, [r2], #1
 80097b4:	e7f8      	b.n	80097a8 <ArtNetNode::HandleDmxIn()+0x70>
 80097b6:	07da      	lsls	r2, r3, #31
 80097b8:	d504      	bpl.n	80097c4 <ArtNetNode::HandleDmxIn()+0x8c>
 80097ba:	2100      	movs	r1, #0
 80097bc:	18f2      	adds	r2, r6, r3
 80097be:	3301      	adds	r3, #1
 80097c0:	7491      	strb	r1, [r2, #18]
 80097c2:	9303      	str	r3, [sp, #12]
 80097c4:	9b03      	ldr	r3, [sp, #12]
 80097c6:	4631      	mov	r1, r6
 80097c8:	0a1a      	lsrs	r2, r3, #8
 80097ca:	7473      	strb	r3, [r6, #17]
 80097cc:	2380      	movs	r3, #128	; 0x80
 80097ce:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 80097d2:	f641 1336 	movw	r3, #6454	; 0x1936
 80097d6:	7432      	strb	r2, [r6, #16]
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	f240 2212 	movw	r2, #530	; 0x212
 80097de:	f8d4 377c 	ldr.w	r3, [r4, #1916]	; 0x77c
 80097e2:	7938      	ldrb	r0, [r7, #4]
 80097e4:	f006 fade 	bl	800fda4 <udp_send>
 80097e8:	2301      	movs	r3, #1
 80097ea:	f8d8 2000 	ldr.w	r2, [r8]
 80097ee:	40ab      	lsls	r3, r5
 80097f0:	ea33 0102 	bics.w	r1, r3, r2
 80097f4:	d008      	beq.n	8009808 <ArtNetNode::HandleDmxIn()+0xd0>
 80097f6:	4313      	orrs	r3, r2
 80097f8:	f8c8 3000 	str.w	r3, [r8]
 80097fc:	f897 36dd 	ldrb.w	r3, [r7, #1757]	; 0x6dd
 8009800:	f043 0301 	orr.w	r3, r3, #1
 8009804:	f887 36dd 	strb.w	r3, [r7, #1757]	; 0x6dd
 8009808:	3501      	adds	r5, #1
 800980a:	2d04      	cmp	r5, #4
 800980c:	f104 0410 	add.w	r4, r4, #16
 8009810:	d1ac      	bne.n	800976c <ArtNetNode::HandleDmxIn()+0x34>
 8009812:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
 8009816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800981a:	f994 2777 	ldrsb.w	r2, [r4, #1911]	; 0x777
 800981e:	f894 3777 	ldrb.w	r3, [r4, #1911]	; 0x777
 8009822:	2a00      	cmp	r2, #0
 8009824:	daf0      	bge.n	8009808 <ArtNetNode::HandleDmxIn()+0xd0>
 8009826:	9a04      	ldr	r2, [sp, #16]
 8009828:	2a00      	cmp	r2, #0
 800982a:	d1ed      	bne.n	8009808 <ArtNetNode::HandleDmxIn()+0xd0>
 800982c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009830:	f884 3777 	strb.w	r3, [r4, #1911]	; 0x777
 8009834:	2301      	movs	r3, #1
 8009836:	fa03 f205 	lsl.w	r2, r3, r5
 800983a:	f8d8 3000 	ldr.w	r3, [r8]
 800983e:	ea23 0302 	bic.w	r3, r3, r2
 8009842:	f8c8 3000 	str.w	r3, [r8]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1de      	bne.n	8009808 <ArtNetNode::HandleDmxIn()+0xd0>
 800984a:	f897 36dd 	ldrb.w	r3, [r7, #1757]	; 0x6dd
 800984e:	f023 0301 	bic.w	r3, r3, #1
 8009852:	e7d7      	b.n	8009804 <ArtNetNode::HandleDmxIn()+0xcc>
 8009854:	08015f71 	stmdaeq	r1, {r0, r4, r5, r6, r8, r9, sl, fp, ip, lr}
 8009858:	20001900 	andcs	r1, r0, r0, lsl #18

0800985c <memcmp.constprop.0>:
 800985c:	b510      	push	{r4, lr}
 800985e:	4c07      	ldr	r4, [pc, #28]	; (800987c <memcmp.constprop.0+0x20>)
 8009860:	1e42      	subs	r2, r0, #1
 8009862:	3003      	adds	r0, #3
 8009864:	4282      	cmp	r2, r0
 8009866:	d007      	beq.n	8009878 <memcmp.constprop.0+0x1c>
 8009868:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800986c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009870:	428b      	cmp	r3, r1
 8009872:	d0f7      	beq.n	8009864 <memcmp.constprop.0+0x8>
 8009874:	1a58      	subs	r0, r3, r1
 8009876:	bd10      	pop	{r4, pc}
 8009878:	2000      	movs	r0, #0
 800987a:	e7fc      	b.n	8009876 <memcmp.constprop.0+0x1a>
 800987c:	20001904 	andcs	r1, r0, r4, lsl #18

08009880 <memcpy.constprop.0.isra.0>:
 8009880:	3801      	subs	r0, #1
 8009882:	1d0a      	adds	r2, r1, #4
 8009884:	4291      	cmp	r1, r2
 8009886:	d004      	beq.n	8009892 <memcpy.constprop.0.isra.0+0x12>
 8009888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800988c:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009890:	e7f8      	b.n	8009884 <memcpy.constprop.0.isra.0+0x4>
 8009892:	4770      	bx	lr

08009894 <ArtNetNode::HandleIpProg()>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
 800989c:	b085      	sub	sp, #20
 800989e:	4604      	mov	r4, r0
 80098a0:	9303      	str	r3, [sp, #12]
 80098a2:	2300      	movs	r3, #0
 80098a4:	4d5a      	ldr	r5, [pc, #360]	; (8009a10 <ArtNetNode::HandleIpProg()+0x17c>)
 80098a6:	f890 70ae 	ldrb.w	r7, [r0, #174]	; 0xae
 80098aa:	6828      	ldr	r0, [r5, #0]
 80098ac:	f890 b001 	ldrb.w	fp, [r0, #1]
 80098b0:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
 80098b4:	f06f 0306 	mvn.w	r3, #6
 80098b8:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
 80098bc:	f007 03c0 	and.w	r3, r7, #192	; 0xc0
 80098c0:	2bc0      	cmp	r3, #192	; 0xc0
 80098c2:	d101      	bne.n	80098c8 <ArtNetNode::HandleIpProg()+0x34>
 80098c4:	f007 f8ea 	bl	8010a9c <Network::EnableDhcp()>
 80098c8:	f007 0388 	and.w	r3, r7, #136	; 0x88
 80098cc:	2b88      	cmp	r3, #136	; 0x88
 80098ce:	d103      	bne.n	80098d8 <ArtNetNode::HandleIpProg()+0x44>
 80098d0:	2100      	movs	r1, #0
 80098d2:	6828      	ldr	r0, [r5, #0]
 80098d4:	f007 f886 	bl	80109e4 <Network::SetIp(unsigned int)>
 80098d8:	f007 0384 	and.w	r3, r7, #132	; 0x84
 80098dc:	2b84      	cmp	r3, #132	; 0x84
 80098de:	4e4d      	ldr	r6, [pc, #308]	; (8009a14 <ArtNetNode::HandleIpProg()+0x180>)
 80098e0:	f104 08b0 	add.w	r8, r4, #176	; 0xb0
 80098e4:	d107      	bne.n	80098f6 <ArtNetNode::HandleIpProg()+0x62>
 80098e6:	4641      	mov	r1, r8
 80098e8:	4630      	mov	r0, r6
 80098ea:	f7ff ffc9 	bl	8009880 <memcpy.constprop.0.isra.0>
 80098ee:	6831      	ldr	r1, [r6, #0]
 80098f0:	6828      	ldr	r0, [r5, #0]
 80098f2:	f007 f877 	bl	80109e4 <Network::SetIp(unsigned int)>
 80098f6:	f007 0382 	and.w	r3, r7, #130	; 0x82
 80098fa:	2b82      	cmp	r3, #130	; 0x82
 80098fc:	f104 09b4 	add.w	r9, r4, #180	; 0xb4
 8009900:	d107      	bne.n	8009912 <ArtNetNode::HandleIpProg()+0x7e>
 8009902:	4649      	mov	r1, r9
 8009904:	4843      	ldr	r0, [pc, #268]	; (8009a14 <ArtNetNode::HandleIpProg()+0x180>)
 8009906:	f7ff ffbb 	bl	8009880 <memcpy.constprop.0.isra.0>
 800990a:	6831      	ldr	r1, [r6, #0]
 800990c:	6828      	ldr	r0, [r5, #0]
 800990e:	f007 f897 	bl	8010a40 <Network::SetNetmask(unsigned int)>
 8009912:	f007 0790 	and.w	r7, r7, #144	; 0x90
 8009916:	2f90      	cmp	r7, #144	; 0x90
 8009918:	f104 0aba 	add.w	sl, r4, #186	; 0xba
 800991c:	d107      	bne.n	800992e <ArtNetNode::HandleIpProg()+0x9a>
 800991e:	4651      	mov	r1, sl
 8009920:	483c      	ldr	r0, [pc, #240]	; (8009a14 <ArtNetNode::HandleIpProg()+0x180>)
 8009922:	f7ff ffad 	bl	8009880 <memcpy.constprop.0.isra.0>
 8009926:	6831      	ldr	r1, [r6, #0]
 8009928:	6828      	ldr	r0, [r5, #0]
 800992a:	f007 f89f 	bl	8010a6c <Network::SetGatewayIp(unsigned int)>
 800992e:	2200      	movs	r2, #0
 8009930:	6829      	ldr	r1, [r5, #0]
 8009932:	7848      	ldrb	r0, [r1, #1]
 8009934:	f884 20bb 	strb.w	r2, [r4, #187]	; 0xbb
 8009938:	4290      	cmp	r0, r2
 800993a:	bf0c      	ite	eq
 800993c:	4610      	moveq	r0, r2
 800993e:	2040      	movne	r0, #64	; 0x40
 8009940:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
 8009944:	7848      	ldrb	r0, [r1, #1]
 8009946:	6909      	ldr	r1, [r1, #16]
 8009948:	ea8b 0b00 	eor.w	fp, fp, r0
 800994c:	4640      	mov	r0, r8
 800994e:	6031      	str	r1, [r6, #0]
 8009950:	f7ff ff84 	bl	800985c <memcmp.constprop.0>
 8009954:	492f      	ldr	r1, [pc, #188]	; (8009a14 <ArtNetNode::HandleIpProg()+0x180>)
 8009956:	4607      	mov	r7, r0
 8009958:	4640      	mov	r0, r8
 800995a:	f7ff ff91 	bl	8009880 <memcpy.constprop.0.isra.0>
 800995e:	6829      	ldr	r1, [r5, #0]
 8009960:	4648      	mov	r0, r9
 8009962:	6989      	ldr	r1, [r1, #24]
 8009964:	6031      	str	r1, [r6, #0]
 8009966:	f7ff ff79 	bl	800985c <memcmp.constprop.0>
 800996a:	492a      	ldr	r1, [pc, #168]	; (8009a14 <ArtNetNode::HandleIpProg()+0x180>)
 800996c:	9003      	str	r0, [sp, #12]
 800996e:	4648      	mov	r0, r9
 8009970:	f7ff ff86 	bl	8009880 <memcpy.constprop.0.isra.0>
 8009974:	6829      	ldr	r1, [r5, #0]
 8009976:	4650      	mov	r0, sl
 8009978:	6949      	ldr	r1, [r1, #20]
 800997a:	6031      	str	r1, [r6, #0]
 800997c:	f7ff ff6e 	bl	800985c <memcmp.constprop.0>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	4924      	ldr	r1, [pc, #144]	; (8009a14 <ArtNetNode::HandleIpProg()+0x180>)
 8009984:	431f      	orrs	r7, r3
 8009986:	ea57 0300 	orrs.w	r3, r7, r0
 800998a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800998e:	bf0c      	ite	eq
 8009990:	465e      	moveq	r6, fp
 8009992:	f04b 0601 	orrne.w	r6, fp, #1
 8009996:	f7ff ff73 	bl	8009880 <memcpy.constprop.0.isra.0>
 800999a:	2200      	movs	r2, #0
 800999c:	f641 1336 	movw	r3, #6454	; 0x1936
 80099a0:	f884 20c0 	strb.w	r2, [r4, #192]	; 0xc0
 80099a4:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	2222      	movs	r2, #34	; 0x22
 80099ac:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 80099b0:	7920      	ldrb	r0, [r4, #4]
 80099b2:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 80099b6:	f006 f9f5 	bl	800fda4 <udp_send>
 80099ba:	b336      	cbz	r6, 8009a0a <ArtNetNode::HandleIpProg()+0x176>
 80099bc:	682a      	ldr	r2, [r5, #0]
 80099be:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 80099c2:	6913      	ldr	r3, [r2, #16]
 80099c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80099c6:	6991      	ldr	r1, [r2, #24]
 80099c8:	7852      	ldrb	r2, [r2, #1]
 80099ca:	ea63 0301 	orn	r3, r3, r1
 80099ce:	2a00      	cmp	r2, #0
 80099d0:	bf14      	ite	ne
 80099d2:	2202      	movne	r2, #2
 80099d4:	2200      	moveq	r2, #0
 80099d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099d8:	f994 3096 	ldrsb.w	r3, [r4, #150]	; 0x96
 80099dc:	4641      	mov	r1, r8
 80099de:	f023 0302 	bic.w	r3, r3, #2
 80099e2:	4313      	orrs	r3, r2
 80099e4:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
 80099e8:	f7ff ff4a 	bl	8009880 <memcpy.constprop.0.isra.0>
 80099ec:	4641      	mov	r1, r8
 80099ee:	f204 6043 	addw	r0, r4, #1603	; 0x643
 80099f2:	f7ff ff45 	bl	8009880 <memcpy.constprop.0.isra.0>
 80099f6:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 80099fa:	b133      	cbz	r3, 8009a0a <ArtNetNode::HandleIpProg()+0x176>
 80099fc:	2101      	movs	r1, #1
 80099fe:	4620      	mov	r0, r4
 8009a00:	b005      	add	sp, #20
 8009a02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a06:	f000 b883 	b.w	8009b10 <ArtNetNode::SendPollRelply(bool)>
 8009a0a:	b005      	add	sp, #20
 8009a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a10:	2000a298 	mulcs	r0, r8, r2
 8009a14:	20001904 	andcs	r1, r0, r4, lsl #18

08009a18 <memcpy.isra.0>:
 8009a18:	3801      	subs	r0, #1
 8009a1a:	440a      	add	r2, r1
 8009a1c:	4291      	cmp	r1, r2
 8009a1e:	d004      	beq.n	8009a2a <memcpy.isra.0+0x12>
 8009a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a24:	f800 3f01 	strb.w	r3, [r0, #1]!
 8009a28:	e7f8      	b.n	8009a1c <memcpy.isra.0+0x4>
 8009a2a:	4770      	bx	lr

08009a2c <ArtNetNode::FillPollReply()>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	4604      	mov	r4, r0
 8009a30:	f200 5074 	addw	r0, r0, #1396	; 0x574
 8009a34:	4603      	mov	r3, r0
 8009a36:	2200      	movs	r2, #0
 8009a38:	f204 6163 	addw	r1, r4, #1635	; 0x663
 8009a3c:	4299      	cmp	r1, r3
 8009a3e:	d002      	beq.n	8009a46 <ArtNetNode::FillPollReply()+0x1a>
 8009a40:	f803 2b01 	strb.w	r2, [r3], #1
 8009a44:	e7fa      	b.n	8009a3c <ArtNetNode::FillPollReply()+0x10>
 8009a46:	2208      	movs	r2, #8
 8009a48:	492d      	ldr	r1, [pc, #180]	; (8009b00 <ArtNetNode::FillPollReply()+0xd4>)
 8009a4a:	f7ff ffe5 	bl	8009a18 <memcpy.isra.0>
 8009a4e:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8009a52:	4d2c      	ldr	r5, [pc, #176]	; (8009b04 <ArtNetNode::FillPollReply()+0xd8>)
 8009a54:	f8a4 357c 	strh.w	r3, [r4, #1404]	; 0x57c
 8009a58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	f204 507e 	addw	r0, r4, #1406	; 0x57e
 8009a60:	2204      	movs	r2, #4
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	f7ff ffd8 	bl	8009a18 <memcpy.isra.0>
 8009a68:	f641 1336 	movw	r3, #6454	; 0x1936
 8009a6c:	f8a4 3582 	strh.w	r3, [r4, #1410]	; 0x582
 8009a70:	4b25      	ldr	r3, [pc, #148]	; (8009b08 <ArtNetNode::FillPollReply()+0xdc>)
 8009a72:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8009a76:	781a      	ldrb	r2, [r3, #0]
 8009a78:	f204 508e 	addw	r0, r4, #1422	; 0x58e
 8009a7c:	f884 2584 	strb.w	r2, [r4, #1412]	; 0x584
 8009a80:	785b      	ldrb	r3, [r3, #1]
 8009a82:	f884 3585 	strb.w	r3, [r4, #1413]	; 0x585
 8009a86:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8009a8a:	f8a4 3588 	strh.w	r3, [r4, #1416]	; 0x588
 8009a8e:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009a92:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 8009a96:	4b1d      	ldr	r3, [pc, #116]	; (8009b0c <ArtNetNode::FillPollReply()+0xe0>)
 8009a98:	785a      	ldrb	r2, [r3, #1]
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	f884 258c 	strb.w	r2, [r4, #1420]	; 0x58c
 8009aa0:	f884 358d 	strb.w	r3, [r4, #1421]	; 0x58d
 8009aa4:	2212      	movs	r2, #18
 8009aa6:	f7ff ffb7 	bl	8009a18 <memcpy.isra.0>
 8009aaa:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8009aae:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
 8009ab2:	2240      	movs	r2, #64	; 0x40
 8009ab4:	f7ff ffb0 	bl	8009a18 <memcpy.isra.0>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8009abe:	f884 363c 	strb.w	r3, [r4, #1596]	; 0x63c
 8009ac2:	f204 603d 	addw	r0, r4, #1597	; 0x63d
 8009ac6:	2206      	movs	r2, #6
 8009ac8:	f7ff ffa6 	bl	8009a18 <memcpy.isra.0>
 8009acc:	4629      	mov	r1, r5
 8009ace:	f204 6043 	addw	r0, r4, #1603	; 0x643
 8009ad2:	2204      	movs	r2, #4
 8009ad4:	f7ff ffa0 	bl	8009a18 <memcpy.isra.0>
 8009ad8:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8009adc:	f104 0198 	add.w	r1, r4, #152	; 0x98
 8009ae0:	f884 3648 	strb.w	r3, [r4, #1608]	; 0x648
 8009ae4:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 8009ae8:	f204 604e 	addw	r0, r4, #1614	; 0x64e
 8009aec:	f884 364d 	strb.w	r3, [r4, #1613]	; 0x64d
 8009af0:	2304      	movs	r3, #4
 8009af2:	2206      	movs	r2, #6
 8009af4:	f884 3621 	strb.w	r3, [r4, #1569]	; 0x621
 8009af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009afc:	f7ff bf8c 	b.w	8009a18 <memcpy.isra.0>
 8009b00:	08015f8c 	stmdaeq	r1, {r2, r3, r7, r8, r9, sl, fp, ip, lr}
 8009b04:	20001908 	andcs	r1, r0, r8, lsl #18
 8009b08:	08016225 	stmdaeq	r1, {r0, r2, r5, r9, sp, lr}
 8009b0c:	08016223 	stmdaeq	r1, {r0, r1, r5, r9, sp, lr}

08009b10 <ArtNetNode::SendPollRelply(bool)>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	4604      	mov	r4, r0
 8009b16:	b087      	sub	sp, #28
 8009b18:	b941      	cbnz	r1, 8009b2c <ArtNetNode::SendPollRelply(bool)+0x1c>
 8009b1a:	f890 36d5 	ldrb.w	r3, [r0, #1749]	; 0x6d5
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	bf02      	ittt	eq
 8009b22:	f8d0 36c0 	ldreq.w	r3, [r0, #1728]	; 0x6c0
 8009b26:	3301      	addeq	r3, #1
 8009b28:	f8c0 36c0 	streq.w	r3, [r0, #1728]	; 0x6c0
 8009b2c:	f04f 0900 	mov.w	r9, #0
 8009b30:	46c8      	mov	r8, r9
 8009b32:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009b36:	f884 358b 	strb.w	r3, [r4, #1419]	; 0x58b
 8009b3a:	f104 033e 	add.w	r3, r4, #62	; 0x3e
 8009b3e:	9303      	str	r3, [sp, #12]
 8009b40:	7823      	ldrb	r3, [r4, #0]
 8009b42:	4543      	cmp	r3, r8
 8009b44:	f340 80a1 	ble.w	8009c8a <ArtNetNode::SendPollRelply(bool)+0x17a>
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	9a03      	ldr	r2, [sp, #12]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	2590      	movs	r5, #144	; 0x90
 8009b50:	f884 3586 	strb.w	r3, [r4, #1414]	; 0x586
 8009b54:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009b58:	4649      	mov	r1, r9
 8009b5a:	f884 3587 	strb.w	r3, [r4, #1415]	; 0x587
 8009b5e:	f108 0301 	add.w	r3, r8, #1
 8009b62:	f884 3647 	strb.w	r3, [r4, #1607]	; 0x647
 8009b66:	fa5f f389 	uxtb.w	r3, r9
 8009b6a:	2bfb      	cmp	r3, #251	; 0xfb
 8009b6c:	9203      	str	r2, [sp, #12]
 8009b6e:	f04f 0a00 	mov.w	sl, #0
 8009b72:	bf8c      	ite	hi
 8009b74:	2201      	movhi	r2, #1
 8009b76:	2205      	movls	r2, #5
 8009b78:	fb05 4508 	mla	r5, r5, r8, r4
 8009b7c:	eb04 1b88 	add.w	fp, r4, r8, lsl #6
 8009b80:	f204 6722 	addw	r7, r4, #1570	; 0x622
 8009b84:	2a01      	cmp	r2, #1
 8009b86:	d061      	beq.n	8009c4c <ArtNetNode::SendPollRelply(bool)+0x13c>
 8009b88:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8009b8c:	f895 66e7 	ldrb.w	r6, [r5, #1767]	; 0x6e7
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d144      	bne.n	8009c1e <ArtNetNode::SendPollRelply(bool)+0x10e>
 8009b94:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	; 0x6f0
 8009b98:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 8009b9c:	b14b      	cbz	r3, 8009bb2 <ArtNetNode::SendPollRelply(bool)+0xa2>
 8009b9e:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009ba2:	f8d5 06ec 	ldr.w	r0, [r5, #1772]	; 0x6ec
 8009ba6:	1a1b      	subs	r3, r3, r0
 8009ba8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bac:	bf38      	it	cc
 8009bae:	f046 0680 	orrcc.w	r6, r6, #128	; 0x80
 8009bb2:	f8d5 36f8 	ldr.w	r3, [r5, #1784]	; 0x6f8
 8009bb6:	b14b      	cbz	r3, 8009bcc <ArtNetNode::SendPollRelply(bool)+0xbc>
 8009bb8:	f8d4 3664 	ldr.w	r3, [r4, #1636]	; 0x664
 8009bbc:	f8d5 06f4 	ldr.w	r0, [r5, #1780]	; 0x6f4
 8009bc0:	1a1b      	subs	r3, r3, r0
 8009bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009bc6:	d201      	bcs.n	8009bcc <ArtNetNode::SendPollRelply(bool)+0xbc>
 8009bc8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8009bcc:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009bd0:	f885 66e7 	strb.w	r6, [r5, #1767]	; 0x6e7
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d037      	beq.n	8009c48 <ArtNetNode::SendPollRelply(bool)+0x138>
 8009bd8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8009bdc:	f10a 0a01 	add.w	sl, sl, #1
 8009be0:	703b      	strb	r3, [r7, #0]
 8009be2:	723e      	strb	r6, [r7, #8]
 8009be4:	f895 36e6 	ldrb.w	r3, [r5, #1766]	; 0x6e6
 8009be8:	743b      	strb	r3, [r7, #16]
 8009bea:	b2cb      	uxtb	r3, r1
 8009bec:	2b03      	cmp	r3, #3
 8009bee:	d80e      	bhi.n	8009c0e <ArtNetNode::SendPollRelply(bool)+0xfe>
 8009bf0:	f89b 3778 	ldrb.w	r3, [fp, #1912]	; 0x778
 8009bf4:	b12b      	cbz	r3, 8009c02 <ArtNetNode::SendPollRelply(bool)+0xf2>
 8009bf6:	783b      	ldrb	r3, [r7, #0]
 8009bf8:	f10a 0a01 	add.w	sl, sl, #1
 8009bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c00:	703b      	strb	r3, [r7, #0]
 8009c02:	f89b 3777 	ldrb.w	r3, [fp, #1911]	; 0x777
 8009c06:	713b      	strb	r3, [r7, #4]
 8009c08:	f89b 3776 	ldrb.w	r3, [fp, #1910]	; 0x776
 8009c0c:	733b      	strb	r3, [r7, #12]
 8009c0e:	1e53      	subs	r3, r2, #1
 8009c10:	3101      	adds	r1, #1
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	f10b 0b10 	add.w	fp, fp, #16
 8009c18:	3701      	adds	r7, #1
 8009c1a:	3524      	adds	r5, #36	; 0x24
 8009c1c:	e7b2      	b.n	8009b84 <ArtNetNode::SendPollRelply(bool)+0x74>
 8009c1e:	69e0      	ldr	r0, [r4, #28]
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d0d3      	beq.n	8009bcc <ArtNetNode::SendPollRelply(bool)+0xbc>
 8009c24:	6803      	ldr	r3, [r0, #0]
 8009c26:	9205      	str	r2, [sp, #20]
 8009c28:	9104      	str	r1, [sp, #16]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	4798      	blx	r3
 8009c2e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009c32:	f000 0089 	and.w	r0, r0, #137	; 0x89
 8009c36:	f006 0676 	and.w	r6, r6, #118	; 0x76
 8009c3a:	4306      	orrs	r6, r0
 8009c3c:	f010 0001 	ands.w	r0, r0, #1
 8009c40:	bf08      	it	eq
 8009c42:	f8c5 0700 	streq.w	r0, [r5, #1792]	; 0x700
 8009c46:	e7c1      	b.n	8009bcc <ArtNetNode::SendPollRelply(bool)+0xbc>
 8009c48:	703b      	strb	r3, [r7, #0]
 8009c4a:	e7ca      	b.n	8009be2 <ArtNetNode::SendPollRelply(bool)+0xd2>
 8009c4c:	f204 636f 	addw	r3, r4, #1647	; 0x66f
 8009c50:	9301      	str	r3, [sp, #4]
 8009c52:	f8d4 36c0 	ldr.w	r3, [r4, #1728]	; 0x6c0
 8009c56:	2140      	movs	r1, #64	; 0x40
 8009c58:	4a0f      	ldr	r2, [pc, #60]	; (8009c98 <ArtNetNode::SendPollRelply(bool)+0x188>)
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	f884 a621 	strb.w	sl, [r4, #1569]	; 0x621
 8009c60:	f894 36d4 	ldrb.w	r3, [r4, #1748]	; 0x6d4
 8009c64:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8009c68:	f00a f844 	bl	8013cf4 <snprintf>
 8009c6c:	f641 1336 	movw	r3, #6454	; 0x1936
 8009c70:	22ef      	movs	r2, #239	; 0xef
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	7920      	ldrb	r0, [r4, #4]
 8009c76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c78:	f204 5174 	addw	r1, r4, #1396	; 0x574
 8009c7c:	f006 f892 	bl	800fda4 <udp_send>
 8009c80:	f108 0801 	add.w	r8, r8, #1
 8009c84:	f109 0904 	add.w	r9, r9, #4
 8009c88:	e75a      	b.n	8009b40 <ArtNetNode::SendPollRelply(bool)+0x30>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f884 36db 	strb.w	r3, [r4, #1755]	; 0x6db
 8009c90:	b007      	add	sp, #28
 8009c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c96:	bf00      	nop
 8009c98:	08015f79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}

08009c9c <ArtNetNode::HandlePoll()>:
 8009c9c:	f890 30ac 	ldrb.w	r3, [r0, #172]	; 0xac
 8009ca0:	b410      	push	{r4}
 8009ca2:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8009ca6:	f880 26d6 	strb.w	r2, [r0, #1750]	; 0x6d6
 8009caa:	f013 0204 	ands.w	r2, r3, #4
 8009cae:	d02e      	beq.n	8009d0e <ArtNetNode::HandlePoll()+0x72>
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f8d0 16c8 	ldr.w	r1, [r0, #1736]	; 0x6c8
 8009cb6:	f890 46d8 	ldrb.w	r4, [r0, #1752]	; 0x6d8
 8009cba:	f880 26d7 	strb.w	r2, [r0, #1751]	; 0x6d7
 8009cbe:	b979      	cbnz	r1, 8009ce0 <ArtNetNode::HandlePoll()+0x44>
 8009cc0:	f8d0 256c 	ldr.w	r2, [r0, #1388]	; 0x56c
 8009cc4:	f8c0 26c8 	str.w	r2, [r0, #1736]	; 0x6c8
 8009cc8:	b19c      	cbz	r4, 8009cf2 <ArtNetNode::HandlePoll()+0x56>
 8009cca:	f890 36e0 	ldrb.w	r3, [r0, #1760]	; 0x6e0
 8009cce:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	bf28      	it	cs
 8009cd6:	4613      	movcs	r3, r2
 8009cd8:	f880 36e0 	strb.w	r3, [r0, #1760]	; 0x6e0
 8009cdc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009cde:	e010      	b.n	8009d02 <ArtNetNode::HandlePoll()+0x66>
 8009ce0:	2c00      	cmp	r4, #0
 8009ce2:	d1f2      	bne.n	8009cca <ArtNetNode::HandlePoll()+0x2e>
 8009ce4:	f8d0 456c 	ldr.w	r4, [r0, #1388]	; 0x56c
 8009ce8:	42a1      	cmp	r1, r4
 8009cea:	d002      	beq.n	8009cf2 <ArtNetNode::HandlePoll()+0x56>
 8009cec:	f880 26d8 	strb.w	r2, [r0, #1752]	; 0x6d8
 8009cf0:	e7eb      	b.n	8009cca <ArtNetNode::HandlePoll()+0x2e>
 8009cf2:	f890 20ad 	ldrb.w	r2, [r0, #173]	; 0xad
 8009cf6:	071b      	lsls	r3, r3, #28
 8009cf8:	f880 26e0 	strb.w	r2, [r0, #1760]	; 0x6e0
 8009cfc:	d5ee      	bpl.n	8009cdc <ArtNetNode::HandlePoll()+0x40>
 8009cfe:	f8d0 356c 	ldr.w	r3, [r0, #1388]	; 0x56c
 8009d02:	f8c0 36c4 	str.w	r3, [r0, #1732]	; 0x6c4
 8009d06:	2101      	movs	r1, #1
 8009d08:	bc10      	pop	{r4}
 8009d0a:	f7ff bf01 	b.w	8009b10 <ArtNetNode::SendPollRelply(bool)>
 8009d0e:	f880 26d7 	strb.w	r2, [r0, #1751]	; 0x6d7
 8009d12:	f8c0 26c4 	str.w	r2, [r0, #1732]	; 0x6c4
 8009d16:	e7f6      	b.n	8009d06 <ArtNetNode::HandlePoll()+0x6a>

08009d18 <ArtNetNode::SendTod(unsigned int)>:
 8009d18:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8009d1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009d20:	2500      	movs	r5, #0
 8009d22:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
 8009d26:	2301      	movs	r3, #1
 8009d28:	4688      	mov	r8, r1
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
 8009d30:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
 8009d34:	6900      	ldr	r0, [r0, #16]
 8009d36:	088f      	lsrs	r7, r1, #2
 8009d38:	6803      	ldr	r3, [r0, #0]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	4798      	blx	r3
 8009d3e:	f008 0303 	and.w	r3, r8, #3
 8009d42:	3301      	adds	r3, #1
 8009d44:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
 8009d48:	1c7b      	adds	r3, r7, #1
 8009d4a:	b2ff      	uxtb	r7, r7
 8009d4c:	f884 50ae 	strb.w	r5, [r4, #174]	; 0xae
 8009d50:	f884 50af 	strb.w	r5, [r4, #175]	; 0xaf
 8009d54:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 8009d58:	f884 50b1 	strb.w	r5, [r4, #177]	; 0xb1
 8009d5c:	f884 50b2 	strb.w	r5, [r4, #178]	; 0xb2
 8009d60:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
 8009d64:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8009d68:	4427      	add	r7, r4
 8009d6a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009d6e:	f884 50b6 	strb.w	r5, [r4, #182]	; 0xb6
 8009d72:	f884 30b5 	strb.w	r3, [r4, #181]	; 0xb5
 8009d76:	2324      	movs	r3, #36	; 0x24
 8009d78:	fb03 4308 	mla	r3, r3, r8, r4
 8009d7c:	f893 36e6 	ldrb.w	r3, [r3, #1766]	; 0x6e6
 8009d80:	4606      	mov	r6, r0
 8009d82:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
 8009d86:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
 8009d8a:	6920      	ldr	r0, [r4, #16]
 8009d8c:	f884 50b8 	strb.w	r5, [r4, #184]	; 0xb8
 8009d90:	f884 50ba 	strb.w	r5, [r4, #186]	; 0xba
 8009d94:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
 8009d98:	6803      	ldr	r3, [r0, #0]
 8009d9a:	4641      	mov	r1, r8
 8009d9c:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	4798      	blx	r3
 8009da4:	2206      	movs	r2, #6
 8009da6:	f641 1336 	movw	r3, #6454	; 0x1936
 8009daa:	4372      	muls	r2, r6
 8009dac:	f104 05a0 	add.w	r5, r4, #160	; 0xa0
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	4629      	mov	r1, r5
 8009db4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009db6:	7920      	ldrb	r0, [r4, #4]
 8009db8:	321c      	adds	r2, #28
 8009dba:	f005 fff3 	bl	800fda4 <udp_send>
 8009dbe:	b002      	add	sp, #8
 8009dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009dc4 <ArtNetNode::HandleTodControl()>:
 8009dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	4606      	mov	r6, r0
 8009dca:	2500      	movs	r5, #0
 8009dcc:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009dd0:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 8009dd4:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8009dd8:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 8009ddc:	42bb      	cmp	r3, r7
 8009dde:	d125      	bne.n	8009e2c <ArtNetNode::HandleTodControl()+0x68>
 8009de0:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 8009de4:	b313      	cbz	r3, 8009e2c <ArtNetNode::HandleTodControl()+0x68>
 8009de6:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8009dea:	b13b      	cbz	r3, 8009dfc <ArtNetNode::HandleTodControl()+0x38>
 8009dec:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 8009df0:	b923      	cbnz	r3, 8009dfc <ArtNetNode::HandleTodControl()+0x38>
 8009df2:	68a0      	ldr	r0, [r4, #8]
 8009df4:	4629      	mov	r1, r5
 8009df6:	6803      	ldr	r3, [r0, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	4798      	blx	r3
 8009dfc:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d104      	bne.n	8009e0e <ArtNetNode::HandleTodControl()+0x4a>
 8009e04:	6920      	ldr	r0, [r4, #16]
 8009e06:	4629      	mov	r1, r5
 8009e08:	6803      	ldr	r3, [r0, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	4798      	blx	r3
 8009e0e:	4629      	mov	r1, r5
 8009e10:	4620      	mov	r0, r4
 8009e12:	f7ff ff81 	bl	8009d18 <ArtNetNode::SendTod(unsigned int)>
 8009e16:	f896 3705 	ldrb.w	r3, [r6, #1797]	; 0x705
 8009e1a:	b13b      	cbz	r3, 8009e2c <ArtNetNode::HandleTodControl()+0x68>
 8009e1c:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 8009e20:	b923      	cbnz	r3, 8009e2c <ArtNetNode::HandleTodControl()+0x68>
 8009e22:	68a0      	ldr	r0, [r4, #8]
 8009e24:	4629      	mov	r1, r5
 8009e26:	6803      	ldr	r3, [r0, #0]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	4798      	blx	r3
 8009e2c:	3501      	adds	r5, #1
 8009e2e:	2d04      	cmp	r5, #4
 8009e30:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8009e34:	d1d0      	bne.n	8009dd8 <ArtNetNode::HandleTodControl()+0x14>
 8009e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e38 <ArtNetNode::HandleTodRequest()>:
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	4606      	mov	r6, r0
 8009e3e:	2500      	movs	r5, #0
 8009e40:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009e44:	f890 70b8 	ldrb.w	r7, [r0, #184]	; 0xb8
 8009e48:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8009e4c:	f8b6 36e4 	ldrh.w	r3, [r6, #1764]	; 0x6e4
 8009e50:	42bb      	cmp	r3, r7
 8009e52:	d106      	bne.n	8009e62 <ArtNetNode::HandleTodRequest()+0x2a>
 8009e54:	f896 36e8 	ldrb.w	r3, [r6, #1768]	; 0x6e8
 8009e58:	b11b      	cbz	r3, 8009e62 <ArtNetNode::HandleTodRequest()+0x2a>
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f7ff ff5b 	bl	8009d18 <ArtNetNode::SendTod(unsigned int)>
 8009e62:	3501      	adds	r5, #1
 8009e64:	2d04      	cmp	r5, #4
 8009e66:	f106 0624 	add.w	r6, r6, #36	; 0x24
 8009e6a:	d1ef      	bne.n	8009e4c <ArtNetNode::HandleTodRequest()+0x14>
 8009e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e70 <ArtNetNode::HandleRdm()>:
 8009e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	4604      	mov	r4, r0
 8009e76:	4605      	mov	r5, r0
 8009e78:	2600      	movs	r6, #0
 8009e7a:	f04f 0b01 	mov.w	fp, #1
 8009e7e:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 8009e82:	f890 70b7 	ldrb.w	r7, [r0, #183]	; 0xb7
 8009e86:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8009f48 <ArtNetNode::HandleRdm()+0xd8>
 8009e8a:	f100 09a0 	add.w	r9, r0, #160	; 0xa0
 8009e8e:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8009e92:	f100 08b8 	add.w	r8, r0, #184	; 0xb8
 8009e96:	f8b5 36e4 	ldrh.w	r3, [r5, #1764]	; 0x6e4
 8009e9a:	42bb      	cmp	r3, r7
 8009e9c:	d148      	bne.n	8009f30 <ArtNetNode::HandleRdm()+0xc0>
 8009e9e:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d044      	beq.n	8009f30 <ArtNetNode::HandleRdm()+0xc0>
 8009ea6:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 8009eaa:	b9c3      	cbnz	r3, 8009ede <ArtNetNode::HandleRdm()+0x6e>
 8009eac:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d10c      	bne.n	8009ece <ArtNetNode::HandleRdm()+0x5e>
 8009eb4:	69e0      	ldr	r0, [r4, #28]
 8009eb6:	b150      	cbz	r0, 8009ece <ArtNetNode::HandleRdm()+0x5e>
 8009eb8:	6803      	ldr	r3, [r0, #0]
 8009eba:	4631      	mov	r1, r6
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	4798      	blx	r3
 8009ec0:	f010 0f89 	tst.w	r0, #137	; 0x89
 8009ec4:	bf14      	ite	ne
 8009ec6:	2301      	movne	r3, #1
 8009ec8:	2300      	moveq	r3, #0
 8009eca:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 8009ece:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8009ed2:	b123      	cbz	r3, 8009ede <ArtNetNode::HandleRdm()+0x6e>
 8009ed4:	68a0      	ldr	r0, [r4, #8]
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	6803      	ldr	r3, [r0, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	4798      	blx	r3
 8009ede:	6920      	ldr	r0, [r4, #16]
 8009ee0:	4642      	mov	r2, r8
 8009ee2:	6803      	ldr	r3, [r0, #0]
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	4798      	blx	r3
 8009eea:	b348      	cbz	r0, 8009f40 <ArtNetNode::HandleRdm()+0xd0>
 8009eec:	4641      	mov	r1, r8
 8009eee:	f884 b0ac 	strb.w	fp, [r4, #172]	; 0xac
 8009ef2:	7882      	ldrb	r2, [r0, #2]
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	1c53      	adds	r3, r2, #1
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	d304      	bcc.n	8009f06 <ArtNetNode::HandleRdm()+0x96>
 8009efc:	f810 cb01 	ldrb.w	ip, [r0], #1
 8009f00:	f801 cb01 	strb.w	ip, [r1], #1
 8009f04:	e7f8      	b.n	8009ef8 <ArtNetNode::HandleRdm()+0x88>
 8009f06:	f641 1336 	movw	r3, #6454	; 0x1936
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	7920      	ldrb	r0, [r4, #4]
 8009f10:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
 8009f14:	3219      	adds	r2, #25
 8009f16:	f005 ff45 	bl	800fda4 <udp_send>
 8009f1a:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8009f1e:	b13b      	cbz	r3, 8009f30 <ArtNetNode::HandleRdm()+0xc0>
 8009f20:	f894 366e 	ldrb.w	r3, [r4, #1646]	; 0x66e
 8009f24:	b923      	cbnz	r3, 8009f30 <ArtNetNode::HandleRdm()+0xc0>
 8009f26:	68a0      	ldr	r0, [r4, #8]
 8009f28:	4631      	mov	r1, r6
 8009f2a:	6803      	ldr	r3, [r0, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	4798      	blx	r3
 8009f30:	3601      	adds	r6, #1
 8009f32:	2e04      	cmp	r6, #4
 8009f34:	f105 0524 	add.w	r5, r5, #36	; 0x24
 8009f38:	d1ad      	bne.n	8009e96 <ArtNetNode::HandleRdm()+0x26>
 8009f3a:	b003      	add	sp, #12
 8009f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f40:	4650      	mov	r0, sl
 8009f42:	f009 feaf 	bl	8013ca4 <printf>
 8009f46:	e7e8      	b.n	8009f1a <ArtNetNode::HandleRdm()+0xaa>
 8009f48:	08015f94 	stmdaeq	r1, {r2, r4, r7, r8, r9, sl, fp, ip, lr}

08009f4c <ArtNetNode::HandleSync()>:
 8009f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	2600      	movs	r6, #0
 8009f52:	2301      	movs	r3, #1
 8009f54:	4604      	mov	r4, r0
 8009f56:	4605      	mov	r5, r0
 8009f58:	46b1      	mov	r9, r6
 8009f5a:	f880 36d9 	strb.w	r3, [r0, #1753]	; 0x6d9
 8009f5e:	4b1e      	ldr	r3, [pc, #120]	; (8009fd8 <ArtNetNode::HandleSync()+0x8c>)
 8009f60:	4f1e      	ldr	r7, [pc, #120]	; (8009fdc <ArtNetNode::HandleSync()+0x90>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8009fe0 <ArtNetNode::HandleSync()+0x94>
 8009f68:	f8c0 36d0 	str.w	r3, [r0, #1744]	; 0x6d0
 8009f6c:	7823      	ldrb	r3, [r4, #0]
 8009f6e:	ebb6 0f83 	cmp.w	r6, r3, lsl #2
 8009f72:	d22f      	bcs.n	8009fd4 <ArtNetNode::HandleSync()+0x88>
 8009f74:	f8d5 3700 	ldr.w	r3, [r5, #1792]	; 0x700
 8009f78:	bb3b      	cbnz	r3, 8009fca <ArtNetNode::HandleSync()+0x7e>
 8009f7a:	f895 36e8 	ldrb.w	r3, [r5, #1768]	; 0x6e8
 8009f7e:	b323      	cbz	r3, 8009fca <ArtNetNode::HandleSync()+0x7e>
 8009f80:	f8d8 3000 	ldr.w	r3, [r8]
 8009f84:	68a0      	ldr	r0, [r4, #8]
 8009f86:	07da      	lsls	r2, r3, #31
 8009f88:	bf5c      	itt	pl
 8009f8a:	2301      	movpl	r3, #1
 8009f8c:	f8c8 3000 	strpl.w	r3, [r8]
 8009f90:	6803      	ldr	r3, [r0, #0]
 8009f92:	4631      	mov	r1, r6
 8009f94:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8009f98:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8009f9c:	f8d7 3600 	ldr.w	r3, [r7, #1536]	; 0x600
 8009fa0:	47d0      	blx	sl
 8009fa2:	f895 3705 	ldrb.w	r3, [r5, #1797]	; 0x705
 8009fa6:	b93b      	cbnz	r3, 8009fb8 <ArtNetNode::HandleSync()+0x6c>
 8009fa8:	68a0      	ldr	r0, [r4, #8]
 8009faa:	4631      	mov	r1, r6
 8009fac:	6803      	ldr	r3, [r0, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	4798      	blx	r3
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f885 3705 	strb.w	r3, [r5, #1797]	; 0x705
 8009fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8009fbc:	f8c7 9600 	str.w	r9, [r7, #1536]	; 0x600
 8009fc0:	07db      	lsls	r3, r3, #31
 8009fc2:	bf5c      	itt	pl
 8009fc4:	2301      	movpl	r3, #1
 8009fc6:	f8c8 3000 	strpl.w	r3, [r8]
 8009fca:	3601      	adds	r6, #1
 8009fcc:	f207 6704 	addw	r7, r7, #1540	; 0x604
 8009fd0:	3524      	adds	r5, #36	; 0x24
 8009fd2:	e7cb      	b.n	8009f6c <ArtNetNode::HandleSync()+0x20>
 8009fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd8:	2000a97c 	andcs	sl, r0, ip, ror r9
 8009fdc:	200000ec 	andcs	r0, r0, ip, ror #1
 8009fe0:	200000e8 	andcs	r0, r0, r8, ror #1

08009fe4 <ArtNetNode::HandleTimeCode()>:
 8009fe4:	4601      	mov	r1, r0
 8009fe6:	68c0      	ldr	r0, [r0, #12]
 8009fe8:	31ae      	adds	r1, #174	; 0xae
 8009fea:	6803      	ldr	r3, [r0, #0]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	4718      	bx	r3

08009ff0 <ArtNetNode::HandleTimeSync()>:
 8009ff0:	b500      	push	{lr}
 8009ff2:	f890 30af 	ldrb.w	r3, [r0, #175]	; 0xaf
 8009ff6:	b08b      	sub	sp, #44	; 0x2c
 8009ff8:	9301      	str	r3, [sp, #4]
 8009ffa:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 8009ffe:	f890 20b4 	ldrb.w	r2, [r0, #180]	; 0xb4
 800a002:	9302      	str	r3, [sp, #8]
 800a004:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
 800a008:	a901      	add	r1, sp, #4
 800a00a:	9303      	str	r3, [sp, #12]
 800a00c:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
 800a010:	9304      	str	r3, [sp, #16]
 800a012:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
 800a016:	9305      	str	r3, [sp, #20]
 800a018:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
 800a01c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a020:	9306      	str	r3, [sp, #24]
 800a022:	4b03      	ldr	r3, [pc, #12]	; (800a030 <ArtNetNode::HandleTimeSync()+0x40>)
 800a024:	6818      	ldr	r0, [r3, #0]
 800a026:	f009 f9f3 	bl	8013410 <Hardware::SetTime(tm const*)>
 800a02a:	b00b      	add	sp, #44	; 0x2c
 800a02c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a030:	2000a964 	andcs	sl, r0, r4, ror #18

0800a034 <ArtNetNode::Print()>:
 800a034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a038:	4605      	mov	r5, r0
 800a03a:	4604      	mov	r4, r0
 800a03c:	b08b      	sub	sp, #44	; 0x2c
 800a03e:	f815 2b42 	ldrb.w	r2, [r5], #66
 800a042:	2104      	movs	r1, #4
 800a044:	4853      	ldr	r0, [pc, #332]	; (800a194 <ArtNetNode::Print()+0x160>)
 800a046:	f009 fe2d 	bl	8013ca4 <printf>
 800a04a:	4b53      	ldr	r3, [pc, #332]	; (800a198 <ArtNetNode::Print()+0x164>)
 800a04c:	4853      	ldr	r0, [pc, #332]	; (800a19c <ArtNetNode::Print()+0x168>)
 800a04e:	7819      	ldrb	r1, [r3, #0]
 800a050:	785a      	ldrb	r2, [r3, #1]
 800a052:	f009 fe27 	bl	8013ca4 <printf>
 800a056:	4629      	mov	r1, r5
 800a058:	4851      	ldr	r0, [pc, #324]	; (800a1a0 <ArtNetNode::Print()+0x16c>)
 800a05a:	f009 fe23 	bl	8013ca4 <printf>
 800a05e:	4851      	ldr	r0, [pc, #324]	; (800a1a4 <ArtNetNode::Print()+0x170>)
 800a060:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800a064:	f009 fe1e 	bl	8013ca4 <printf>
 800a068:	f894 36de 	ldrb.w	r3, [r4, #1758]	; 0x6de
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d044      	beq.n	800a0fa <ArtNetNode::Print()+0xc6>
 800a070:	484d      	ldr	r0, [pc, #308]	; (800a1a8 <ArtNetNode::Print()+0x174>)
 800a072:	f009 fe17 	bl	8013ca4 <printf>
 800a076:	4626      	mov	r6, r4
 800a078:	2500      	movs	r5, #0
 800a07a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800a1ac <ArtNetNode::Print()+0x178>
 800a07e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800a1b0 <ArtNetNode::Print()+0x17c>
 800a082:	7823      	ldrb	r3, [r4, #0]
 800a084:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
 800a088:	d237      	bcs.n	800a0fa <ArtNetNode::Print()+0xc6>
 800a08a:	2301      	movs	r3, #1
 800a08c:	4629      	mov	r1, r5
 800a08e:	4620      	mov	r0, r4
 800a090:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800a094:	f7fe feaa 	bl	8008dec <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800a098:	b360      	cbz	r0, 800a0f4 <ArtNetNode::Print()+0xc0>
 800a09a:	eb04 0395 	add.w	r3, r4, r5, lsr #2
 800a09e:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
 800a0a2:	f893 b03f 	ldrb.w	fp, [r3, #63]	; 0x3f
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f7fe fe86 	bl	8008dc0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a0b4:	f8d6 06fc 	ldr.w	r0, [r6, #1788]	; 0x6fc
 800a0b8:	493e      	ldr	r1, [pc, #248]	; (800a1b4 <ArtNetNode::Print()+0x180>)
 800a0ba:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	bf18      	it	ne
 800a0c2:	4641      	movne	r1, r8
 800a0c4:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
 800a0c8:	08af      	lsrs	r7, r5, #2
 800a0ca:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800a0ce:	e9cd b300 	strd	fp, r3, [sp]
 800a0d2:	463a      	mov	r2, r7
 800a0d4:	4653      	mov	r3, sl
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	4648      	mov	r0, r9
 800a0da:	f009 fde3 	bl	8013ca4 <printf>
 800a0de:	f8d6 1700 	ldr.w	r1, [r6, #1792]	; 0x700
 800a0e2:	4a35      	ldr	r2, [pc, #212]	; (800a1b8 <ArtNetNode::Print()+0x184>)
 800a0e4:	4b35      	ldr	r3, [pc, #212]	; (800a1bc <ArtNetNode::Print()+0x188>)
 800a0e6:	4836      	ldr	r0, [pc, #216]	; (800a1c0 <ArtNetNode::Print()+0x18c>)
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	bf0c      	ite	eq
 800a0ec:	4611      	moveq	r1, r2
 800a0ee:	4619      	movne	r1, r3
 800a0f0:	f009 fdd8 	bl	8013ca4 <printf>
 800a0f4:	3501      	adds	r5, #1
 800a0f6:	3624      	adds	r6, #36	; 0x24
 800a0f8:	e7c3      	b.n	800a082 <ArtNetNode::Print()+0x4e>
 800a0fa:	f894 36df 	ldrb.w	r3, [r4, #1759]	; 0x6df
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d045      	beq.n	800a18e <ArtNetNode::Print()+0x15a>
 800a102:	4830      	ldr	r0, [pc, #192]	; (800a1c4 <ArtNetNode::Print()+0x190>)
 800a104:	f009 fdce 	bl	8013ca4 <printf>
 800a108:	f04f 0b00 	mov.w	fp, #0
 800a10c:	4e2e      	ldr	r6, [pc, #184]	; (800a1c8 <ArtNetNode::Print()+0x194>)
 800a10e:	4f2f      	ldr	r7, [pc, #188]	; (800a1cc <ArtNetNode::Print()+0x198>)
 800a110:	7823      	ldrb	r3, [r4, #0]
 800a112:	ebbb 0f83 	cmp.w	fp, r3, lsl #2
 800a116:	d23a      	bcs.n	800a18e <ArtNetNode::Print()+0x15a>
 800a118:	2300      	movs	r3, #0
 800a11a:	4659      	mov	r1, fp
 800a11c:	4620      	mov	r0, r4
 800a11e:	f10d 0225 	add.w	r2, sp, #37	; 0x25
 800a122:	f7fe fe63 	bl	8008dec <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 800a126:	b378      	cbz	r0, 800a188 <ArtNetNode::Print()+0x154>
 800a128:	eb04 039b 	add.w	r3, r4, fp, lsr #2
 800a12c:	f893 903e 	ldrb.w	r9, [r3, #62]	; 0x3e
 800a130:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
 800a134:	eb04 130b 	add.w	r3, r4, fp, lsl #4
 800a138:	f8d3 577c 	ldr.w	r5, [r3, #1916]	; 0x77c
 800a13c:	ea4f 089b 	mov.w	r8, fp, lsr #2
 800a140:	b925      	cbnz	r5, 800a14c <ArtNetNode::Print()+0x118>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	699a      	ldr	r2, [r3, #24]
 800a146:	691d      	ldr	r5, [r3, #16]
 800a148:	ea65 0502 	orn	r5, r5, r2
 800a14c:	2300      	movs	r3, #0
 800a14e:	4659      	mov	r1, fp
 800a150:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800a154:	4620      	mov	r0, r4
 800a156:	f7fe fe33 	bl	8008dc0 <ArtNetNode::GetPortAddress(unsigned int, unsigned short&, lightset::PortDir) const>
 800a15a:	0e2b      	lsrs	r3, r5, #24
 800a15c:	9306      	str	r3, [sp, #24]
 800a15e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800a162:	9305      	str	r3, [sp, #20]
 800a164:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a168:	9304      	str	r3, [sp, #16]
 800a16a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800a16e:	b2ed      	uxtb	r5, r5
 800a170:	9302      	str	r3, [sp, #8]
 800a172:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800a176:	4642      	mov	r2, r8
 800a178:	e9cd a300 	strd	sl, r3, [sp]
 800a17c:	4659      	mov	r1, fp
 800a17e:	464b      	mov	r3, r9
 800a180:	4630      	mov	r0, r6
 800a182:	9503      	str	r5, [sp, #12]
 800a184:	f009 fd8e 	bl	8013ca4 <printf>
 800a188:	f10b 0b01 	add.w	fp, fp, #1
 800a18c:	e7c0      	b.n	800a110 <ArtNetNode::Print()+0xdc>
 800a18e:	b00b      	add	sp, #44	; 0x2c
 800a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a194:	08015fba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, r9, sl, fp, ip, lr}
 800a198:	08016225 	stmdaeq	r1, {r0, r2, r5, r9, sp, lr}
 800a19c:	08015fc8 	stmdaeq	r1, {r3, r6, r7, r8, r9, sl, fp, ip, lr}
 800a1a0:	08015fdd 	stmdaeq	r1, {r0, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, lr}
 800a1a4:	08015fef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800a1a8:	08016001 	stmdaeq	r1, {r0, sp, lr}
 800a1ac:	08015fa9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, sl, fp, ip, lr}
 800a1b0:	0801600a 	stmdaeq	r1, {r1, r3, sp, lr}
 800a1b4:	08015fa5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, sl, fp, ip, lr}
 800a1b8:	08015fad 	stmdaeq	r1, {r0, r2, r3, r5, r7, r8, r9, sl, fp, ip, lr}
 800a1bc:	08015fb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip, lr}
 800a1c0:	08016032 	stmdaeq	r1, {r1, r4, r5, sp, lr}
 800a1c4:	08016039 	stmdaeq	r1, {r0, r3, r4, r5, sp, lr}
 800a1c8:	08016041 	stmdaeq	r1, {r0, r6, sp, lr}
 800a1cc:	2000a298 	mulcs	r0, r8, r2

0800a1d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800a1d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1d2:	88c5      	ldrh	r5, [r0, #6]
 800a1d4:	8886      	ldrh	r6, [r0, #4]
 800a1d6:	42b5      	cmp	r5, r6
 800a1d8:	d216      	bcs.n	800a208 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800a1da:	4604      	mov	r4, r0
 800a1dc:	6800      	ldr	r0, [r0, #0]
 800a1de:	4428      	add	r0, r5
 800a1e0:	1b75      	subs	r5, r6, r5
 800a1e2:	7a26      	ldrb	r6, [r4, #8]
 800a1e4:	b923      	cbnz	r3, 800a1f0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800a1e6:	b926      	cbnz	r6, 800a1f2 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800a1e8:	9200      	str	r2, [sp, #0]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4a09      	ldr	r2, [pc, #36]	; (800a214 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800a1ee:	e003      	b.n	800a1f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800a1f0:	b166      	cbz	r6, 800a20c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	9200      	str	r2, [sp, #0]
 800a1f6:	4a08      	ldr	r2, [pc, #32]	; (800a218 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	f009 fd7b 	bl	8013cf4 <snprintf>
 800a1fe:	4285      	cmp	r5, r0
 800a200:	bfa2      	ittt	ge
 800a202:	88e3      	ldrhge	r3, [r4, #6]
 800a204:	181b      	addge	r3, r3, r0
 800a206:	80e3      	strhge	r3, [r4, #6]
 800a208:	b002      	add	sp, #8
 800a20a:	bd70      	pop	{r4, r5, r6, pc}
 800a20c:	9200      	str	r2, [sp, #0]
 800a20e:	460b      	mov	r3, r1
 800a210:	4a02      	ldr	r2, [pc, #8]	; (800a21c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a212:	e7f1      	b.n	800a1f8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800a214:	0801607d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sp, lr}
 800a218:	08016074 	stmdaeq	r1, {r2, r4, r5, r6, sp, lr}
 800a21c:	0801607e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sp, lr}

0800a220 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800a220:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a222:	88c5      	ldrh	r5, [r0, #6]
 800a224:	8886      	ldrh	r6, [r0, #4]
 800a226:	42b5      	cmp	r5, r6
 800a228:	d216      	bcs.n	800a258 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800a22a:	4604      	mov	r4, r0
 800a22c:	6800      	ldr	r0, [r0, #0]
 800a22e:	4428      	add	r0, r5
 800a230:	1b75      	subs	r5, r6, r5
 800a232:	7a26      	ldrb	r6, [r4, #8]
 800a234:	b923      	cbnz	r3, 800a240 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800a236:	b926      	cbnz	r6, 800a242 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800a238:	9200      	str	r2, [sp, #0]
 800a23a:	460b      	mov	r3, r1
 800a23c:	4a09      	ldr	r2, [pc, #36]	; (800a264 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800a23e:	e003      	b.n	800a248 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a240:	b166      	cbz	r6, 800a25c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800a242:	460b      	mov	r3, r1
 800a244:	9200      	str	r2, [sp, #0]
 800a246:	4a08      	ldr	r2, [pc, #32]	; (800a268 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800a248:	4629      	mov	r1, r5
 800a24a:	f009 fd53 	bl	8013cf4 <snprintf>
 800a24e:	4285      	cmp	r5, r0
 800a250:	bfa2      	ittt	ge
 800a252:	88e3      	ldrhge	r3, [r4, #6]
 800a254:	181b      	addge	r3, r3, r0
 800a256:	80e3      	strhge	r3, [r4, #6]
 800a258:	b002      	add	sp, #8
 800a25a:	bd70      	pop	{r4, r5, r6, pc}
 800a25c:	9200      	str	r2, [sp, #0]
 800a25e:	460b      	mov	r3, r1
 800a260:	4a02      	ldr	r2, [pc, #8]	; (800a26c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800a262:	e7f1      	b.n	800a248 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800a264:	08016090 	stmdaeq	r1, {r4, r7, sp, lr}
 800a268:	08016085 	stmdaeq	r1, {r0, r2, r7, sp, lr}
 800a26c:	08016091 	stmdaeq	r1, {r0, r4, r7, sp, lr}

0800a270 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800a270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a272:	460b      	mov	r3, r1
 800a274:	8885      	ldrh	r5, [r0, #4]
 800a276:	88c1      	ldrh	r1, [r0, #6]
 800a278:	42a9      	cmp	r1, r5
 800a27a:	d214      	bcs.n	800a2a6 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800a27c:	4604      	mov	r4, r0
 800a27e:	6800      	ldr	r0, [r0, #0]
 800a280:	1a6d      	subs	r5, r5, r1
 800a282:	4408      	add	r0, r1
 800a284:	7a21      	ldrb	r1, [r4, #8]
 800a286:	b91a      	cbnz	r2, 800a290 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800a288:	b919      	cbnz	r1, 800a292 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800a28a:	4a0a      	ldr	r2, [pc, #40]	; (800a2b4 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800a28c:	9100      	str	r1, [sp, #0]
 800a28e:	e002      	b.n	800a296 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800a290:	b159      	cbz	r1, 800a2aa <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800a292:	9200      	str	r2, [sp, #0]
 800a294:	4a08      	ldr	r2, [pc, #32]	; (800a2b8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800a296:	4629      	mov	r1, r5
 800a298:	f009 fd2c 	bl	8013cf4 <snprintf>
 800a29c:	4285      	cmp	r5, r0
 800a29e:	bfa2      	ittt	ge
 800a2a0:	88e3      	ldrhge	r3, [r4, #6]
 800a2a2:	181b      	addge	r3, r3, r0
 800a2a4:	80e3      	strhge	r3, [r4, #6]
 800a2a6:	b003      	add	sp, #12
 800a2a8:	bd30      	pop	{r4, r5, pc}
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	9200      	str	r2, [sp, #0]
 800a2ae:	4a03      	ldr	r2, [pc, #12]	; (800a2bc <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800a2b0:	e7f1      	b.n	800a296 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800a2b2:	bf00      	nop
 800a2b4:	0801607d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sp, lr}
 800a2b8:	08016074 	stmdaeq	r1, {r2, r4, r5, r6, sp, lr}
 800a2bc:	0801607e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sp, lr}

0800a2c0 <strncpy.isra.0>:
 800a2c0:	1e4b      	subs	r3, r1, #1
 800a2c2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800a2c6:	b909      	cbnz	r1, 800a2cc <strncpy.isra.0+0xc>
 800a2c8:	f009 b9bc 	b.w	8013644 <memset>
 800a2cc:	3a01      	subs	r2, #1
 800a2ce:	f800 1b01 	strb.w	r1, [r0], #1
 800a2d2:	d1f6      	bne.n	800a2c2 <strncpy.isra.0+0x2>
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>:
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	2287      	movs	r2, #135	; 0x87
 800a2dc:	4604      	mov	r4, r0
 800a2de:	f840 1b04 	str.w	r1, [r0], #4
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	f009 f9ae 	bl	8013644 <memset>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800a2ee:	f240 3302 	movw	r3, #770	; 0x302
 800a2f2:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
 800a2f6:	2304      	movs	r3, #4
 800a2f8:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800a2fc:	4b07      	ldr	r3, [pc, #28]	; (800a31c <ArtNetParams::ArtNetParams(ArtNetParamsStore*)+0x44>)
 800a2fe:	4620      	mov	r0, r4
 800a300:	785a      	ldrb	r2, [r3, #1]
 800a302:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 800a30c:	230a      	movs	r3, #10
 800a30e:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
 800a312:	23ff      	movs	r3, #255	; 0xff
 800a314:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800a318:	bd10      	pop	{r4, pc}
 800a31a:	bf00      	nop
 800a31c:	08016221 	stmdaeq	r1, {r0, r5, r9, sp, lr}

0800a320 <ArtNetParams::Load()>:
 800a320:	b508      	push	{r3, lr}
 800a322:	2300      	movs	r3, #0
 800a324:	4601      	mov	r1, r0
 800a326:	6043      	str	r3, [r0, #4]
 800a328:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800a32c:	6800      	ldr	r0, [r0, #0]
 800a32e:	b120      	cbz	r0, 800a33a <ArtNetParams::Load()+0x1a>
 800a330:	6803      	ldr	r3, [r0, #0]
 800a332:	3104      	adds	r1, #4
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	4798      	blx	r3
 800a338:	2001      	movs	r0, #1
 800a33a:	bd08      	pop	{r3, pc}

0800a33c <ArtNetParams::Load(char const*, unsigned int)>:
 800a33c:	6803      	ldr	r3, [r0, #0]
 800a33e:	b1e3      	cbz	r3, 800a37a <ArtNetParams::Load(char const*, unsigned int)+0x3e>
 800a340:	2300      	movs	r3, #0
 800a342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a344:	460d      	mov	r5, r1
 800a346:	4616      	mov	r6, r2
 800a348:	4604      	mov	r4, r0
 800a34a:	6043      	str	r3, [r0, #4]
 800a34c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
 800a350:	4602      	mov	r2, r0
 800a352:	490a      	ldr	r1, [pc, #40]	; (800a37c <ArtNetParams::Load(char const*, unsigned int)+0x40>)
 800a354:	4668      	mov	r0, sp
 800a356:	f008 fa41 	bl	80127dc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800a35a:	4632      	mov	r2, r6
 800a35c:	4629      	mov	r1, r5
 800a35e:	4668      	mov	r0, sp
 800a360:	f008 fa40 	bl	80127e4 <ReadConfigFile::Read(char const*, unsigned int)>
 800a364:	4621      	mov	r1, r4
 800a366:	f851 0b04 	ldr.w	r0, [r1], #4
 800a36a:	6803      	ldr	r3, [r0, #0]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	4798      	blx	r3
 800a370:	4668      	mov	r0, sp
 800a372:	f008 fa36 	bl	80127e2 <ReadConfigFile::~ReadConfigFile()>
 800a376:	b002      	add	sp, #8
 800a378:	bd70      	pop	{r4, r5, r6, pc}
 800a37a:	4770      	bx	lr
 800a37c:	0800a745 	stmdaeq	r0, {r0, r2, r6, r8, r9, sl, sp, pc}

0800a380 <ArtNetParams::SetBool(unsigned char, unsigned int)>:
 800a380:	6843      	ldr	r3, [r0, #4]
 800a382:	b111      	cbz	r1, 800a38a <ArtNetParams::SetBool(unsigned char, unsigned int)+0xa>
 800a384:	4313      	orrs	r3, r2
 800a386:	6043      	str	r3, [r0, #4]
 800a388:	4770      	bx	lr
 800a38a:	ea23 0302 	bic.w	r3, r3, r2
 800a38e:	e7fa      	b.n	800a386 <ArtNetParams::SetBool(unsigned char, unsigned int)+0x6>

0800a390 <ArtNetParams::callbackFunction(char const*)>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	460e      	mov	r6, r1
 800a396:	b0a5      	sub	sp, #148	; 0x94
 800a398:	4604      	mov	r4, r0
 800a39a:	49a7      	ldr	r1, [pc, #668]	; (800a638 <ArtNetParams::callbackFunction(char const*)+0x2a8>)
 800a39c:	4630      	mov	r0, r6
 800a39e:	f10d 0205 	add.w	r2, sp, #5
 800a3a2:	f008 fb81 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a3a6:	b930      	cbnz	r0, 800a3b6 <ArtNetParams::callbackFunction(char const*)+0x26>
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800a3b0:	f7ff ffe6 	bl	800a380 <ArtNetParams::SetBool(unsigned char, unsigned int)>
 800a3b4:	e010      	b.n	800a3d8 <ArtNetParams::callbackFunction(char const*)+0x48>
 800a3b6:	2311      	movs	r3, #17
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	9303      	str	r3, [sp, #12]
 800a3bc:	499f      	ldr	r1, [pc, #636]	; (800a63c <ArtNetParams::callbackFunction(char const*)+0x2ac>)
 800a3be:	ab03      	add	r3, sp, #12
 800a3c0:	f104 0210 	add.w	r2, r4, #16
 800a3c4:	f008 fa42 	bl	801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a3c8:	b948      	cbnz	r0, 800a3de <ArtNetParams::callbackFunction(char const*)+0x4e>
 800a3ca:	9b03      	ldr	r3, [sp, #12]
 800a3cc:	4423      	add	r3, r4
 800a3ce:	7418      	strb	r0, [r3, #16]
 800a3d0:	6863      	ldr	r3, [r4, #4]
 800a3d2:	f043 0302 	orr.w	r3, r3, #2
 800a3d6:	6063      	str	r3, [r4, #4]
 800a3d8:	b025      	add	sp, #148	; 0x94
 800a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3de:	233f      	movs	r3, #63	; 0x3f
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	9303      	str	r3, [sp, #12]
 800a3e4:	4996      	ldr	r1, [pc, #600]	; (800a640 <ArtNetParams::callbackFunction(char const*)+0x2b0>)
 800a3e6:	ab03      	add	r3, sp, #12
 800a3e8:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800a3ec:	f008 fa2e 	bl	801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a3f0:	b938      	cbnz	r0, 800a402 <ArtNetParams::callbackFunction(char const*)+0x72>
 800a3f2:	9b03      	ldr	r3, [sp, #12]
 800a3f4:	4423      	add	r3, r4
 800a3f6:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
 800a3fa:	6863      	ldr	r3, [r4, #4]
 800a3fc:	f043 0301 	orr.w	r3, r3, #1
 800a400:	e7e9      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a402:	4630      	mov	r0, r6
 800a404:	498f      	ldr	r1, [pc, #572]	; (800a644 <ArtNetParams::callbackFunction(char const*)+0x2b4>)
 800a406:	f10d 0206 	add.w	r2, sp, #6
 800a40a:	f008 fa9b 	bl	8012944 <Sscan::HexUint16(char const*, char const*, unsigned short&)>
 800a40e:	b940      	cbnz	r0, 800a422 <ArtNetParams::callbackFunction(char const*)+0x92>
 800a410:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a414:	ba5b      	rev16	r3, r3
 800a416:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 800a41a:	6863      	ldr	r3, [r4, #4]
 800a41c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a420:	e7d9      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a422:	4630      	mov	r0, r6
 800a424:	4988      	ldr	r1, [pc, #544]	; (800a648 <ArtNetParams::callbackFunction(char const*)+0x2b8>)
 800a426:	f10d 0205 	add.w	r2, sp, #5
 800a42a:	f008 fb3d 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a42e:	b958      	cbnz	r0, 800a448 <ArtNetParams::callbackFunction(char const*)+0xb8>
 800a430:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a434:	6863      	ldr	r3, [r4, #4]
 800a436:	2a0a      	cmp	r2, #10
 800a438:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
 800a43c:	bf14      	ite	ne
 800a43e:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
 800a442:	f423 6300 	biceq.w	r3, r3, #2048	; 0x800
 800a446:	e7c6      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a448:	4630      	mov	r0, r6
 800a44a:	4980      	ldr	r1, [pc, #512]	; (800a64c <ArtNetParams::callbackFunction(char const*)+0x2bc>)
 800a44c:	f10d 0205 	add.w	r2, sp, #5
 800a450:	f008 fb2a 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a454:	b910      	cbnz	r0, 800a45c <ArtNetParams::callbackFunction(char const*)+0xcc>
 800a456:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a45a:	e7a6      	b.n	800a3aa <ArtNetParams::callbackFunction(char const*)+0x1a>
 800a45c:	4630      	mov	r0, r6
 800a45e:	497c      	ldr	r1, [pc, #496]	; (800a650 <ArtNetParams::callbackFunction(char const*)+0x2c0>)
 800a460:	f10d 0205 	add.w	r2, sp, #5
 800a464:	f008 fb20 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a468:	b950      	cbnz	r0, 800a480 <ArtNetParams::callbackFunction(char const*)+0xf0>
 800a46a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a46e:	6863      	ldr	r3, [r4, #4]
 800a470:	7222      	strb	r2, [r4, #8]
 800a472:	b112      	cbz	r2, 800a47a <ArtNetParams::callbackFunction(char const*)+0xea>
 800a474:	f043 0304 	orr.w	r3, r3, #4
 800a478:	e7ad      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a47a:	f023 0304 	bic.w	r3, r3, #4
 800a47e:	e7aa      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a480:	4630      	mov	r0, r6
 800a482:	4974      	ldr	r1, [pc, #464]	; (800a654 <ArtNetParams::callbackFunction(char const*)+0x2c4>)
 800a484:	f10d 0205 	add.w	r2, sp, #5
 800a488:	f008 fb0e 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a48c:	b950      	cbnz	r0, 800a4a4 <ArtNetParams::callbackFunction(char const*)+0x114>
 800a48e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a492:	6863      	ldr	r3, [r4, #4]
 800a494:	7262      	strb	r2, [r4, #9]
 800a496:	b112      	cbz	r2, 800a49e <ArtNetParams::callbackFunction(char const*)+0x10e>
 800a498:	f043 0308 	orr.w	r3, r3, #8
 800a49c:	e79b      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a49e:	f023 0308 	bic.w	r3, r3, #8
 800a4a2:	e798      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	9303      	str	r3, [sp, #12]
 800a4aa:	496b      	ldr	r1, [pc, #428]	; (800a658 <ArtNetParams::callbackFunction(char const*)+0x2c8>)
 800a4ac:	ab03      	add	r3, sp, #12
 800a4ae:	aa04      	add	r2, sp, #16
 800a4b0:	f008 f9cc 	bl	801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a4b4:	b9f0      	cbnz	r0, 800a4f4 <ArtNetParams::callbackFunction(char const*)+0x164>
 800a4b6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800a4ba:	6863      	ldr	r3, [r4, #4]
 800a4bc:	f042 0220 	orr.w	r2, r2, #32
 800a4c0:	2a6c      	cmp	r2, #108	; 0x6c
 800a4c2:	d111      	bne.n	800a4e8 <ArtNetParams::callbackFunction(char const*)+0x158>
 800a4c4:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800a4c8:	f042 0220 	orr.w	r2, r2, #32
 800a4cc:	2a74      	cmp	r2, #116	; 0x74
 800a4ce:	d10b      	bne.n	800a4e8 <ArtNetParams::callbackFunction(char const*)+0x158>
 800a4d0:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800a4d4:	f042 0220 	orr.w	r2, r2, #32
 800a4d8:	2a70      	cmp	r2, #112	; 0x70
 800a4da:	d105      	bne.n	800a4e8 <ArtNetParams::callbackFunction(char const*)+0x158>
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4e2:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800a4e6:	e776      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a4ee:	f884 206f 	strb.w	r2, [r4, #111]	; 0x6f
 800a4f2:	e770      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a4f4:	2304      	movs	r3, #4
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	9303      	str	r3, [sp, #12]
 800a4fa:	4958      	ldr	r1, [pc, #352]	; (800a65c <ArtNetParams::callbackFunction(char const*)+0x2cc>)
 800a4fc:	ab03      	add	r3, sp, #12
 800a4fe:	aa04      	add	r2, sp, #16
 800a500:	f008 f9a4 	bl	801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a504:	b9c0      	cbnz	r0, 800a538 <ArtNetParams::callbackFunction(char const*)+0x1a8>
 800a506:	2304      	movs	r3, #4
 800a508:	4a55      	ldr	r2, [pc, #340]	; (800a660 <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800a50a:	a904      	add	r1, sp, #16
 800a50c:	3b01      	subs	r3, #1
 800a50e:	d30c      	bcc.n	800a52a <ArtNetParams::callbackFunction(char const*)+0x19a>
 800a510:	f811 5b01 	ldrb.w	r5, [r1], #1
 800a514:	f812 0b01 	ldrb.w	r0, [r2], #1
 800a518:	4285      	cmp	r5, r0
 800a51a:	d0f7      	beq.n	800a50c <ArtNetParams::callbackFunction(char const*)+0x17c>
 800a51c:	2200      	movs	r2, #0
 800a51e:	6863      	ldr	r3, [r4, #4]
 800a520:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
 800a524:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a528:	e755      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a52a:	2301      	movs	r3, #1
 800a52c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 800a530:	6863      	ldr	r3, [r4, #4]
 800a532:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a536:	e74e      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a538:	2500      	movs	r5, #0
 800a53a:	4f4a      	ldr	r7, [pc, #296]	; (800a664 <ArtNetParams::callbackFunction(char const*)+0x2d4>)
 800a53c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800a668 <ArtNetParams::callbackFunction(char const*)+0x2d8>
 800a540:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a66c <ArtNetParams::callbackFunction(char const*)+0x2dc>
 800a544:	f8df a128 	ldr.w	sl, [pc, #296]	; 800a670 <ArtNetParams::callbackFunction(char const*)+0x2e0>
 800a548:	4639      	mov	r1, r7
 800a54a:	4630      	mov	r0, r6
 800a54c:	f10d 0205 	add.w	r2, sp, #5
 800a550:	f008 faaa 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a554:	b9a0      	cbnz	r0, 800a580 <ArtNetParams::callbackFunction(char const*)+0x1f0>
 800a556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a55a:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800a55e:	6862      	ldr	r2, [r4, #4]
 800a560:	280f      	cmp	r0, #15
 800a562:	fa03 f305 	lsl.w	r3, r3, r5
 800a566:	eb04 0105 	add.w	r1, r4, r5
 800a56a:	d803      	bhi.n	800a574 <ArtNetParams::callbackFunction(char const*)+0x1e4>
 800a56c:	f881 006b 	strb.w	r0, [r1, #107]	; 0x6b
 800a570:	4313      	orrs	r3, r2
 800a572:	e730      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a574:	3501      	adds	r5, #1
 800a576:	f881 506b 	strb.w	r5, [r1, #107]	; 0x6b
 800a57a:	ea22 0303 	bic.w	r3, r2, r3
 800a57e:	e72a      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a580:	f04f 0b12 	mov.w	fp, #18
 800a584:	2303      	movs	r3, #3
 800a586:	fb0b fb05 	mul.w	fp, fp, r5
 800a58a:	9303      	str	r3, [sp, #12]
 800a58c:	4630      	mov	r0, r6
 800a58e:	ab03      	add	r3, sp, #12
 800a590:	aa04      	add	r2, sp, #16
 800a592:	eb08 010b 	add.w	r1, r8, fp
 800a596:	f008 f959 	bl	801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a59a:	b9f0      	cbnz	r0, 800a5da <ArtNetParams::callbackFunction(char const*)+0x24a>
 800a59c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a5a0:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800a5a4:	40ab      	lsls	r3, r5
 800a5a6:	f041 0120 	orr.w	r1, r1, #32
 800a5aa:	296c      	cmp	r1, #108	; 0x6c
 800a5ac:	6862      	ldr	r2, [r4, #4]
 800a5ae:	4425      	add	r5, r4
 800a5b0:	d10f      	bne.n	800a5d2 <ArtNetParams::callbackFunction(char const*)+0x242>
 800a5b2:	f89d 1011 	ldrb.w	r1, [sp, #17]
 800a5b6:	f041 0120 	orr.w	r1, r1, #32
 800a5ba:	2974      	cmp	r1, #116	; 0x74
 800a5bc:	d109      	bne.n	800a5d2 <ArtNetParams::callbackFunction(char const*)+0x242>
 800a5be:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800a5c2:	f041 0120 	orr.w	r1, r1, #32
 800a5c6:	2970      	cmp	r1, #112	; 0x70
 800a5c8:	d103      	bne.n	800a5d2 <ArtNetParams::callbackFunction(char const*)+0x242>
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800a5d0:	e7ce      	b.n	800a570 <ArtNetParams::callbackFunction(char const*)+0x1e0>
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
 800a5d8:	e7cf      	b.n	800a57a <ArtNetParams::callbackFunction(char const*)+0x1ea>
 800a5da:	2304      	movs	r3, #4
 800a5dc:	4630      	mov	r0, r6
 800a5de:	9303      	str	r3, [sp, #12]
 800a5e0:	aa04      	add	r2, sp, #16
 800a5e2:	ab03      	add	r3, sp, #12
 800a5e4:	eb09 1105 	add.w	r1, r9, r5, lsl #4
 800a5e8:	f008 f930 	bl	801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a5ec:	2305      	movs	r3, #5
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d140      	bne.n	800a674 <ArtNetParams::callbackFunction(char const*)+0x2e4>
 800a5f2:	4a1b      	ldr	r2, [pc, #108]	; (800a660 <ArtNetParams::callbackFunction(char const*)+0x2d0>)
 800a5f4:	a904      	add	r1, sp, #16
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	d012      	beq.n	800a620 <ArtNetParams::callbackFunction(char const*)+0x290>
 800a5fa:	f811 6b01 	ldrb.w	r6, [r1], #1
 800a5fe:	f812 0b01 	ldrb.w	r0, [r2], #1
 800a602:	4286      	cmp	r6, r0
 800a604:	d0f7      	beq.n	800a5f6 <ArtNetParams::callbackFunction(char const*)+0x266>
 800a606:	2100      	movs	r1, #0
 800a608:	1962      	adds	r2, r4, r5
 800a60a:	6863      	ldr	r3, [r4, #4]
 800a60c:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 800a610:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a614:	fa02 f505 	lsl.w	r5, r2, r5
 800a618:	ea23 0505 	bic.w	r5, r3, r5
 800a61c:	6065      	str	r5, [r4, #4]
 800a61e:	e6db      	b.n	800a3d8 <ArtNetParams::callbackFunction(char const*)+0x48>
 800a620:	2201      	movs	r2, #1
 800a622:	1963      	adds	r3, r4, r5
 800a624:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 800a628:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a62c:	fa03 f505 	lsl.w	r5, r3, r5
 800a630:	6863      	ldr	r3, [r4, #4]
 800a632:	432b      	orrs	r3, r5
 800a634:	e6cf      	b.n	800a3d6 <ArtNetParams::callbackFunction(char const*)+0x46>
 800a636:	bf00      	nop
 800a638:	080160fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, sp, lr}
 800a63c:	08016167 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sp, lr}
 800a640:	08016153 	stmdaeq	r1, {r0, r1, r4, r6, r8, sp, lr}
 800a644:	0801615d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sp, lr}
 800a648:	080161e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, sp, lr}
 800a64c:	080161d2 	stmdaeq	r1, {r1, r4, r6, r7, r8, sp, lr}
 800a650:	08016202 	stmdaeq	r1, {r1, r9, sp, lr}
 800a654:	08016206 	stmdaeq	r1, {r1, r2, r9, sp, lr}
 800a658:	08017b97 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, r9, fp, ip, sp, lr}
 800a65c:	0801620d 	stmdaeq	r1, {r0, r2, r3, r9, sp, lr}
 800a660:	08016098 	stmdaeq	r1, {r3, r4, r7, sp, lr}
 800a664:	08017baf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, fp, ip, sp, lr}
 800a668:	08017c7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, sl, fp, ip, sp, lr}
 800a66c:	08016113 	stmdaeq	r1, {r0, r1, r4, r8, sp, lr}
 800a670:	08017ce2 	stmdaeq	r1, {r1, r5, r6, r7, sl, fp, ip, sp, lr}
 800a674:	9303      	str	r3, [sp, #12]
 800a676:	4630      	mov	r0, r6
 800a678:	ab03      	add	r3, sp, #12
 800a67a:	aa04      	add	r2, sp, #16
 800a67c:	eb0a 010b 	add.w	r1, sl, fp
 800a680:	f008 f8e4 	bl	801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800a684:	bb68      	cbnz	r0, 800a6e2 <ArtNetParams::callbackFunction(char const*)+0x352>
 800a686:	2301      	movs	r3, #1
 800a688:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 800a68c:	40ab      	lsls	r3, r5
 800a68e:	ea22 0303 	bic.w	r3, r2, r3
 800a692:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800a696:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800a69a:	f042 0220 	orr.w	r2, r2, #32
 800a69e:	2a69      	cmp	r2, #105	; 0x69
 800a6a0:	d118      	bne.n	800a6d4 <ArtNetParams::callbackFunction(char const*)+0x344>
 800a6a2:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800a6a6:	f042 0220 	orr.w	r2, r2, #32
 800a6aa:	2a6e      	cmp	r2, #110	; 0x6e
 800a6ac:	d112      	bne.n	800a6d4 <ArtNetParams::callbackFunction(char const*)+0x344>
 800a6ae:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800a6b2:	f042 0220 	orr.w	r2, r2, #32
 800a6b6:	2a70      	cmp	r2, #112	; 0x70
 800a6b8:	d10c      	bne.n	800a6d4 <ArtNetParams::callbackFunction(char const*)+0x344>
 800a6ba:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800a6be:	f042 0220 	orr.w	r2, r2, #32
 800a6c2:	2a75      	cmp	r2, #117	; 0x75
 800a6c4:	d106      	bne.n	800a6d4 <ArtNetParams::callbackFunction(char const*)+0x344>
 800a6c6:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800a6ca:	f042 0220 	orr.w	r2, r2, #32
 800a6ce:	2a74      	cmp	r2, #116	; 0x74
 800a6d0:	f43f ae82 	beq.w	800a3d8 <ArtNetParams::callbackFunction(char const*)+0x48>
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	fa02 f505 	lsl.w	r5, r2, r5
 800a6da:	432b      	orrs	r3, r5
 800a6dc:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
 800a6e0:	e67a      	b.n	800a3d8 <ArtNetParams::callbackFunction(char const*)+0x48>
 800a6e2:	2118      	movs	r1, #24
 800a6e4:	4b15      	ldr	r3, [pc, #84]	; (800a73c <ArtNetParams::callbackFunction(char const*)+0x3ac>)
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	fb01 3105 	mla	r1, r1, r5, r3
 800a6ec:	aa02      	add	r2, sp, #8
 800a6ee:	f008 f954 	bl	801299a <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 800a6f2:	b968      	cbnz	r0, 800a710 <ArtNetParams::callbackFunction(char const*)+0x380>
 800a6f4:	9902      	ldr	r1, [sp, #8]
 800a6f6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a6fa:	f8c3 107b 	str.w	r1, [r3, #123]	; 0x7b
 800a6fe:	2301      	movs	r3, #1
 800a700:	40ab      	lsls	r3, r5
 800a702:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800a706:	b29b      	uxth	r3, r3
 800a708:	b1a1      	cbz	r1, 800a734 <ArtNetParams::callbackFunction(char const*)+0x3a4>
 800a70a:	4313      	orrs	r3, r2
 800a70c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800a710:	3501      	adds	r5, #1
 800a712:	2d04      	cmp	r5, #4
 800a714:	f107 0710 	add.w	r7, r7, #16
 800a718:	f47f af16 	bne.w	800a548 <ArtNetParams::callbackFunction(char const*)+0x1b8>
 800a71c:	4630      	mov	r0, r6
 800a71e:	4908      	ldr	r1, [pc, #32]	; (800a740 <ArtNetParams::callbackFunction(char const*)+0x3b0>)
 800a720:	f10d 0205 	add.w	r2, sp, #5
 800a724:	f008 f9c0 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800a728:	2800      	cmp	r0, #0
 800a72a:	f47f ae55 	bne.w	800a3d8 <ArtNetParams::callbackFunction(char const*)+0x48>
 800a72e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a732:	e63a      	b.n	800a3aa <ArtNetParams::callbackFunction(char const*)+0x1a>
 800a734:	ea22 0303 	bic.w	r3, r2, r3
 800a738:	e7e8      	b.n	800a70c <ArtNetParams::callbackFunction(char const*)+0x37c>
 800a73a:	bf00      	nop
 800a73c:	08016172 	stmdaeq	r1, {r1, r4, r5, r6, r8, sp, lr}
 800a740:	08016105 	stmdaeq	r1, {r0, r2, r8, sp, lr}

0800a744 <ArtNetParams::staticCallbackFunction(void*, char const*)>:
 800a744:	f7ff be24 	b.w	800a390 <ArtNetParams::callbackFunction(char const*)>

0800a748 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>:
 800a748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a74c:	4604      	mov	r4, r0
 800a74e:	4615      	mov	r5, r2
 800a750:	461e      	mov	r6, r3
 800a752:	b086      	sub	sp, #24
 800a754:	3004      	adds	r0, #4
 800a756:	2900      	cmp	r1, #0
 800a758:	f000 814b 	beq.w	800a9f2 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2aa>
 800a75c:	2287      	movs	r2, #135	; 0x87
 800a75e:	f008 ff5a 	bl	8013616 <memmove>
 800a762:	4633      	mov	r3, r6
 800a764:	462a      	mov	r2, r5
 800a766:	49a6      	ldr	r1, [pc, #664]	; (800aa00 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2b8>)
 800a768:	a803      	add	r0, sp, #12
 800a76a:	f007 ff67 	bl	801263c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800a76e:	2500      	movs	r5, #0
 800a770:	4ea4      	ldr	r6, [pc, #656]	; (800aa04 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2bc>)
 800a772:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800aa08 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c0>
 800a776:	4fa5      	ldr	r7, [pc, #660]	; (800aa0c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c4>)
 800a778:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 800a77c:	4631      	mov	r1, r6
 800a77e:	412b      	asrs	r3, r5
 800a780:	f013 0f01 	tst.w	r3, #1
 800a784:	ea6f 0303 	mvn.w	r3, r3
 800a788:	bf0c      	ite	eq
 800a78a:	4642      	moveq	r2, r8
 800a78c:	463a      	movne	r2, r7
 800a78e:	f003 0301 	and.w	r3, r3, #1
 800a792:	a803      	add	r0, sp, #12
 800a794:	3501      	adds	r5, #1
 800a796:	f7ff fd43 	bl	800a220 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a79a:	2d04      	cmp	r5, #4
 800a79c:	f106 0612 	add.w	r6, r6, #18
 800a7a0:	d1ea      	bne.n	800a778 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30>
 800a7a2:	6863      	ldr	r3, [r4, #4]
 800a7a4:	7a22      	ldrb	r2, [r4, #8]
 800a7a6:	499a      	ldr	r1, [pc, #616]	; (800aa10 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2c8>)
 800a7a8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a7ac:	a803      	add	r0, sp, #12
 800a7ae:	f7ff fd0f 	bl	800a1d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a7b2:	6863      	ldr	r3, [r4, #4]
 800a7b4:	7a62      	ldrb	r2, [r4, #9]
 800a7b6:	4997      	ldr	r1, [pc, #604]	; (800aa14 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2cc>)
 800a7b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a7bc:	a803      	add	r0, sp, #12
 800a7be:	f7ff fd07 	bl	800a1d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a7c2:	4995      	ldr	r1, [pc, #596]	; (800aa18 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d0>)
 800a7c4:	a803      	add	r0, sp, #12
 800a7c6:	f007 ffbf 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800a7ca:	2500      	movs	r5, #0
 800a7cc:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800a7d0:	4e92      	ldr	r6, [pc, #584]	; (800aa1c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d4>)
 800a7d2:	f104 076b 	add.w	r7, r4, #107	; 0x6b
 800a7d6:	6862      	ldr	r2, [r4, #4]
 800a7d8:	fa08 f305 	lsl.w	r3, r8, r5
 800a7dc:	4393      	bics	r3, r2
 800a7de:	bf0c      	ite	eq
 800a7e0:	2301      	moveq	r3, #1
 800a7e2:	2300      	movne	r3, #0
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a7ea:	a803      	add	r0, sp, #12
 800a7ec:	3501      	adds	r5, #1
 800a7ee:	f7ff fcef 	bl	800a1d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a7f2:	2d04      	cmp	r5, #4
 800a7f4:	f106 0610 	add.w	r6, r6, #16
 800a7f8:	d1ed      	bne.n	800a7d6 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x8e>
 800a7fa:	4989      	ldr	r1, [pc, #548]	; (800aa20 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2d8>)
 800a7fc:	a803      	add	r0, sp, #12
 800a7fe:	f007 ffa3 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800a802:	6863      	ldr	r3, [r4, #4]
 800a804:	f104 0622 	add.w	r6, r4, #34	; 0x22
 800a808:	f013 0501 	ands.w	r5, r3, #1
 800a80c:	d108      	bne.n	800a820 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0xd8>
 800a80e:	4b85      	ldr	r3, [pc, #532]	; (800aa24 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800a810:	223f      	movs	r2, #63	; 0x3f
 800a812:	6819      	ldr	r1, [r3, #0]
 800a814:	4630      	mov	r0, r6
 800a816:	3154      	adds	r1, #84	; 0x54
 800a818:	f7ff fd52 	bl	800a2c0 <strncpy.isra.0>
 800a81c:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 800a820:	6863      	ldr	r3, [r4, #4]
 800a822:	4632      	mov	r2, r6
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	497f      	ldr	r1, [pc, #508]	; (800aa28 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e0>)
 800a82a:	a803      	add	r0, sp, #12
 800a82c:	f7ff fcf8 	bl	800a220 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a830:	6863      	ldr	r3, [r4, #4]
 800a832:	f104 0610 	add.w	r6, r4, #16
 800a836:	f013 0502 	ands.w	r5, r3, #2
 800a83a:	d108      	bne.n	800a84e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x106>
 800a83c:	4b79      	ldr	r3, [pc, #484]	; (800aa24 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800a83e:	2211      	movs	r2, #17
 800a840:	6819      	ldr	r1, [r3, #0]
 800a842:	4630      	mov	r0, r6
 800a844:	3142      	adds	r1, #66	; 0x42
 800a846:	f7ff fd3b 	bl	800a2c0 <strncpy.isra.0>
 800a84a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800a84e:	6863      	ldr	r3, [r4, #4]
 800a850:	4632      	mov	r2, r6
 800a852:	4976      	ldr	r1, [pc, #472]	; (800aa2c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e4>)
 800a854:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a858:	a803      	add	r0, sp, #12
 800a85a:	f7ff fce1 	bl	800a220 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a85e:	2104      	movs	r1, #4
 800a860:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800a864:	6863      	ldr	r3, [r4, #4]
 800a866:	ba52      	rev16	r2, r2
 800a868:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800a86c:	b292      	uxth	r2, r2
 800a86e:	9100      	str	r1, [sp, #0]
 800a870:	a803      	add	r0, sp, #12
 800a872:	496f      	ldr	r1, [pc, #444]	; (800aa30 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2e8>)
 800a874:	f007 ff82 	bl	801277c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>
 800a878:	496e      	ldr	r1, [pc, #440]	; (800aa34 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2ec>)
 800a87a:	a803      	add	r0, sp, #12
 800a87c:	f007 ff64 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800a880:	6862      	ldr	r2, [r4, #4]
 800a882:	496d      	ldr	r1, [pc, #436]	; (800aa38 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f0>)
 800a884:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800a888:	a803      	add	r0, sp, #12
 800a88a:	f7ff fcf1 	bl	800a270 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a88e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800aa3c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f4>
 800a892:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 800a896:	6863      	ldr	r3, [r4, #4]
 800a898:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800aa40 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2f8>
 800a89c:	4969      	ldr	r1, [pc, #420]	; (800aa44 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2fc>)
 800a89e:	2a00      	cmp	r2, #0
 800a8a0:	bf0c      	ite	eq
 800a8a2:	464a      	moveq	r2, r9
 800a8a4:	4642      	movne	r2, r8
 800a8a6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800a8aa:	a803      	add	r0, sp, #12
 800a8ac:	f7ff fcb8 	bl	800a220 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a8b0:	f894 0074 	ldrb.w	r0, [r4, #116]	; 0x74
 800a8b4:	6863      	ldr	r3, [r4, #4]
 800a8b6:	4964      	ldr	r1, [pc, #400]	; (800aa48 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800a8b8:	4a64      	ldr	r2, [pc, #400]	; (800aa4c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800a8ba:	f3c3 5380 	ubfx	r3, r3, #22, #1
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	bf18      	it	ne
 800a8c2:	460a      	movne	r2, r1
 800a8c4:	4962      	ldr	r1, [pc, #392]	; (800aa50 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x308>)
 800a8c6:	a803      	add	r0, sp, #12
 800a8c8:	f7ff fcaa 	bl	800a220 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a8cc:	2500      	movs	r5, #0
 800a8ce:	4e61      	ldr	r6, [pc, #388]	; (800aa54 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x30c>)
 800a8d0:	f8df a184 	ldr.w	sl, [pc, #388]	; 800aa58 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x310>
 800a8d4:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800a8d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a8dc:	6861      	ldr	r1, [r4, #4]
 800a8de:	40ab      	lsls	r3, r5
 800a8e0:	438b      	bics	r3, r1
 800a8e2:	f04f 0112 	mov.w	r1, #18
 800a8e6:	f817 2b01 	ldrb.w	r2, [r7], #1
 800a8ea:	bf0c      	ite	eq
 800a8ec:	2301      	moveq	r3, #1
 800a8ee:	2300      	movne	r3, #0
 800a8f0:	fb01 a105 	mla	r1, r1, r5, sl
 800a8f4:	2a00      	cmp	r2, #0
 800a8f6:	bf0c      	ite	eq
 800a8f8:	464a      	moveq	r2, r9
 800a8fa:	4642      	movne	r2, r8
 800a8fc:	a803      	add	r0, sp, #12
 800a8fe:	f7ff fc8f 	bl	800a220 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a902:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a906:	6862      	ldr	r2, [r4, #4]
 800a908:	40ab      	lsls	r3, r5
 800a90a:	4393      	bics	r3, r2
 800a90c:	7938      	ldrb	r0, [r7, #4]
 800a90e:	494e      	ldr	r1, [pc, #312]	; (800aa48 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x300>)
 800a910:	4a4e      	ldr	r2, [pc, #312]	; (800aa4c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x304>)
 800a912:	bf0c      	ite	eq
 800a914:	2301      	moveq	r3, #1
 800a916:	2300      	movne	r3, #0
 800a918:	3501      	adds	r5, #1
 800a91a:	2800      	cmp	r0, #0
 800a91c:	bf18      	it	ne
 800a91e:	460a      	movne	r2, r1
 800a920:	4631      	mov	r1, r6
 800a922:	a803      	add	r0, sp, #12
 800a924:	f7ff fc7c 	bl	800a220 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800a928:	2d04      	cmp	r5, #4
 800a92a:	f106 0610 	add.w	r6, r6, #16
 800a92e:	d1d3      	bne.n	800a8d8 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x190>
 800a930:	6863      	ldr	r3, [r4, #4]
 800a932:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 800a936:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800a93a:	4948      	ldr	r1, [pc, #288]	; (800aa5c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x314>)
 800a93c:	a803      	add	r0, sp, #12
 800a93e:	f7ff fc47 	bl	800a1d0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800a942:	6862      	ldr	r2, [r4, #4]
 800a944:	4946      	ldr	r1, [pc, #280]	; (800aa60 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x318>)
 800a946:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800a94a:	a803      	add	r0, sp, #12
 800a94c:	f7ff fc90 	bl	800a270 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a950:	4944      	ldr	r1, [pc, #272]	; (800aa64 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x31c>)
 800a952:	a803      	add	r0, sp, #12
 800a954:	f007 fef8 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800a958:	2500      	movs	r5, #0
 800a95a:	2601      	movs	r6, #1
 800a95c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 800aa68 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x320>
 800a960:	4f30      	ldr	r7, [pc, #192]	; (800aa24 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x2dc>)
 800a962:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800a966:	fa06 f305 	lsl.w	r3, r6, r5
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	401a      	ands	r2, r3
 800a96e:	4293      	cmp	r3, r2
 800a970:	bf0c      	ite	eq
 800a972:	2301      	moveq	r3, #1
 800a974:	2300      	movne	r3, #0
 800a976:	f105 021c 	add.w	r2, r5, #28
 800a97a:	d008      	beq.n	800a98e <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x246>
 800a97c:	6839      	ldr	r1, [r7, #0]
 800a97e:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800a982:	f8d1 077c 	ldr.w	r0, [r1, #1916]	; 0x77c
 800a986:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800a98a:	f8c1 000b 	str.w	r0, [r1, #11]
 800a98e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a992:	4641      	mov	r1, r8
 800a994:	f8d2 200b 	ldr.w	r2, [r2, #11]
 800a998:	a803      	add	r0, sp, #12
 800a99a:	3501      	adds	r5, #1
 800a99c:	f007 fe90 	bl	80126c0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 800a9a0:	2d04      	cmp	r5, #4
 800a9a2:	f108 0818 	add.w	r8, r8, #24
 800a9a6:	d1dc      	bne.n	800a962 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x21a>
 800a9a8:	4930      	ldr	r1, [pc, #192]	; (800aa6c <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x324>)
 800a9aa:	a803      	add	r0, sp, #12
 800a9ac:	f007 fecc 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800a9b0:	6862      	ldr	r2, [r4, #4]
 800a9b2:	492f      	ldr	r1, [pc, #188]	; (800aa70 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x328>)
 800a9b4:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 800a9b8:	a803      	add	r0, sp, #12
 800a9ba:	f7ff fc59 	bl	800a270 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800a9be:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800a9c2:	b17b      	cbz	r3, 800a9e4 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x29c>
 800a9c4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a9c8:	9b03      	ldr	r3, [sp, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	227d      	movs	r2, #125	; 0x7d
 800a9ce:	f803 2c01 	strb.w	r2, [r3, #-1]
 800a9d2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a9d6:	9903      	ldr	r1, [sp, #12]
 800a9d8:	54ca      	strb	r2, [r1, r3]
 800a9da:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	f8ad 3012 	strh.w	r3, [sp, #18]
 800a9e4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800a9e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	b006      	add	sp, #24
 800a9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	4601      	mov	r1, r0
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	68d2      	ldr	r2, [r2, #12]
 800a9fc:	4790      	blx	r2
 800a9fe:	e6b0      	b.n	800a762 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)+0x1a>
 800aa00:	08016216 	stmdaeq	r1, {r1, r2, r4, r9, sp, lr}
 800aa04:	08017ce2 	stmdaeq	r1, {r1, r5, r6, r7, sl, fp, ip, sp, lr}
 800aa08:	0801609d 	stmdaeq	r1, {r0, r2, r3, r4, r7, sp, lr}
 800aa0c:	080160a3 	stmdaeq	r1, {r0, r1, r5, r7, sp, lr}
 800aa10:	08016202 	stmdaeq	r1, {r1, r9, sp, lr}
 800aa14:	08016206 	stmdaeq	r1, {r1, r2, r9, sp, lr}
 800aa18:	080160b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, sp, lr}
 800aa1c:	08017baf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, fp, ip, sp, lr}
 800aa20:	080160d2 	stmdaeq	r1, {r1, r4, r6, r7, sp, lr}
 800aa24:	200018fc 	strdcs	r1, [r0], -ip
 800aa28:	08016153 	stmdaeq	r1, {r0, r1, r4, r6, r8, sp, lr}
 800aa2c:	08016167 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sp, lr}
 800aa30:	0801615d 	stmdaeq	r1, {r0, r2, r3, r4, r6, r8, sp, lr}
 800aa34:	080160d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, sp, lr}
 800aa38:	080160fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, sp, lr}
 800aa3c:	080160aa 	stmdaeq	r1, {r1, r3, r5, r7, sp, lr}
 800aa40:	080160ae 	stmdaeq	r1, {r1, r2, r3, r5, r7, sp, lr}
 800aa44:	08017b97 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, r9, fp, ip, sp, lr}
 800aa48:	08016098 	stmdaeq	r1, {r3, r4, r7, sp, lr}
 800aa4c:	080160b2 	stmdaeq	r1, {r1, r4, r5, r7, sp, lr}
 800aa50:	0801620d 	stmdaeq	r1, {r0, r2, r3, r9, sp, lr}
 800aa54:	08016113 	stmdaeq	r1, {r0, r1, r4, r8, sp, lr}
 800aa58:	08017c7f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, sl, fp, ip, sp, lr}
 800aa5c:	080161e8 	stmdaeq	r1, {r3, r5, r6, r7, r8, sp, lr}
 800aa60:	080161d2 	stmdaeq	r1, {r1, r4, r6, r7, r8, sp, lr}
 800aa64:	080160e6 	stmdaeq	r1, {r1, r2, r5, r6, r7, sp, lr}
 800aa68:	08016172 	stmdaeq	r1, {r1, r4, r5, r6, r8, sp, lr}
 800aa6c:	080160f0 	stmdaeq	r1, {r4, r5, r6, r7, sp, lr}
 800aa70:	08016105 	stmdaeq	r1, {r0, r2, r8, sp, lr}

0800aa74 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>:
 800aa74:	b513      	push	{r0, r1, r4, lr}
 800aa76:	6804      	ldr	r4, [r0, #0]
 800aa78:	b914      	cbnz	r4, 800aa80 <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800aa7a:	601c      	str	r4, [r3, #0]
 800aa7c:	b002      	add	sp, #8
 800aa7e:	bd10      	pop	{r4, pc}
 800aa80:	9300      	str	r3, [sp, #0]
 800aa82:	4613      	mov	r3, r2
 800aa84:	460a      	mov	r2, r1
 800aa86:	2100      	movs	r1, #0
 800aa88:	f7ff fe5e 	bl	800a748 <ArtNetParams::Builder(artnetparams::Params const*, char*, unsigned int, unsigned int&)>
 800aa8c:	e7f6      	b.n	800aa7c <ArtNetParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800aa8e <ArtNetParams::Set(ArtNetNode*)>:
 800aa8e:	6843      	ldr	r3, [r0, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d07d      	beq.n	800ab90 <ArtNetParams::Set(ArtNetNode*)+0x102>
 800aa94:	079a      	lsls	r2, r3, #30
 800aa96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	460d      	mov	r5, r1
 800aa9e:	d504      	bpl.n	800aaaa <ArtNetParams::Set(ArtNetNode*)+0x1c>
 800aaa0:	f100 0110 	add.w	r1, r0, #16
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	f7fd ff4b 	bl	8008940 <ArtNetNode::SetShortName(char const*)>
 800aaaa:	6863      	ldr	r3, [r4, #4]
 800aaac:	07db      	lsls	r3, r3, #31
 800aaae:	d504      	bpl.n	800aaba <ArtNetParams::Set(ArtNetNode*)+0x2c>
 800aab0:	4628      	mov	r0, r5
 800aab2:	f104 0122 	add.w	r1, r4, #34	; 0x22
 800aab6:	f7fd ff6b 	bl	8008990 <ArtNetNode::SetLongName(char const*)>
 800aaba:	6863      	ldr	r3, [r4, #4]
 800aabc:	075f      	lsls	r7, r3, #29
 800aabe:	d504      	bpl.n	800aaca <ArtNetParams::Set(ArtNetNode*)+0x3c>
 800aac0:	2200      	movs	r2, #0
 800aac2:	4628      	mov	r0, r5
 800aac4:	7a21      	ldrb	r1, [r4, #8]
 800aac6:	f7fe faab 	bl	8009020 <ArtNetNode::SetNetSwitch(unsigned char, unsigned int)>
 800aaca:	6863      	ldr	r3, [r4, #4]
 800aacc:	071e      	lsls	r6, r3, #28
 800aace:	d504      	bpl.n	800aada <ArtNetParams::Set(ArtNetNode*)+0x4c>
 800aad0:	2200      	movs	r2, #0
 800aad2:	4628      	mov	r0, r5
 800aad4:	7a61      	ldrb	r1, [r4, #9]
 800aad6:	f7fe fa75 	bl	8008fc4 <ArtNetNode::SetSubnetSwitch(unsigned char, unsigned int)>
 800aada:	6863      	ldr	r3, [r4, #4]
 800aadc:	0558      	lsls	r0, r3, #21
 800aade:	d504      	bpl.n	800aaea <ArtNetParams::Set(ArtNetNode*)+0x5c>
 800aae0:	4628      	mov	r0, r5
 800aae2:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800aae6:	f7fe f81d 	bl	8008b24 <ArtNetNode::SetOemValue(unsigned char const*)>
 800aaea:	6863      	ldr	r3, [r4, #4]
 800aaec:	2600      	movs	r6, #0
 800aaee:	0519      	lsls	r1, r3, #20
 800aaf0:	bf44      	itt	mi
 800aaf2:	f44f 727a 	movmi.w	r2, #1000	; 0x3e8
 800aaf6:	f894 3066 	ldrbmi.w	r3, [r4, #102]	; 0x66
 800aafa:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 800aafe:	bf44      	itt	mi
 800ab00:	4353      	mulmi	r3, r2
 800ab02:	f8c5 36cc 	strmi.w	r3, [r5, #1740]	; 0x6cc
 800ab06:	6863      	ldr	r3, [r4, #4]
 800ab08:	f44f 0900 	mov.w	r9, #8388608	; 0x800000
 800ab0c:	04da      	lsls	r2, r3, #19
 800ab0e:	bf48      	it	mi
 800ab10:	2301      	movmi	r3, #1
 800ab12:	f04f 0a01 	mov.w	sl, #1
 800ab16:	bf48      	it	mi
 800ab18:	f885 36dc 	strbmi.w	r3, [r5, #1756]	; 0x6dc
 800ab1c:	f104 0770 	add.w	r7, r4, #112	; 0x70
 800ab20:	6863      	ldr	r3, [r4, #4]
 800ab22:	fa08 f206 	lsl.w	r2, r8, r6
 800ab26:	ea32 0303 	bics.w	r3, r2, r3
 800ab2a:	bf0c      	ite	eq
 800ab2c:	783a      	ldrbeq	r2, [r7, #0]
 800ab2e:	f894 206f 	ldrbne.w	r2, [r4, #111]	; 0x6f
 800ab32:	4631      	mov	r1, r6
 800ab34:	4628      	mov	r0, r5
 800ab36:	f7fe fad2 	bl	80090de <ArtNetNode::SetMergeMode(unsigned int, lightset::MergeMode)>
 800ab3a:	6863      	ldr	r3, [r4, #4]
 800ab3c:	fa09 f206 	lsl.w	r2, r9, r6
 800ab40:	ea32 0303 	bics.w	r3, r2, r3
 800ab44:	bf0c      	ite	eq
 800ab46:	797a      	ldrbeq	r2, [r7, #5]
 800ab48:	f894 2074 	ldrbne.w	r2, [r4, #116]	; 0x74
 800ab4c:	4631      	mov	r1, r6
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f7fe fa94 	bl	800907c <ArtNetNode::SetPortProtocol(unsigned int, artnet::PortProtocol)>
 800ab54:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800ab58:	fa0a f306 	lsl.w	r3, sl, r6
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	4393      	bics	r3, r2
 800ab60:	d109      	bne.n	800ab76 <ArtNetParams::Set(ArtNetNode*)+0xe8>
 800ab62:	f106 031c 	add.w	r3, r6, #28
 800ab66:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800ab72:	f7fe fdcd 	bl	8009710 <ArtNetNode::SetDestinationIp(unsigned int, unsigned int)>
 800ab76:	3601      	adds	r6, #1
 800ab78:	2e04      	cmp	r6, #4
 800ab7a:	f107 0701 	add.w	r7, r7, #1
 800ab7e:	d1cf      	bne.n	800ab20 <ArtNetParams::Set(ArtNetNode*)+0x92>
 800ab80:	6863      	ldr	r3, [r4, #4]
 800ab82:	011b      	lsls	r3, r3, #4
 800ab84:	bf44      	itt	mi
 800ab86:	2301      	movmi	r3, #1
 800ab88:	f885 309e 	strbmi.w	r3, [r5, #158]	; 0x9e
 800ab8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab90:	4770      	bx	lr

0800ab92 <ArtNetParams::Dump()>:
 800ab92:	4770      	bx	lr

0800ab94 <ArtNetNode::HandleTrigger()>:
 800ab94:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
 800ab98:	4601      	mov	r1, r0
 800ab9a:	2bff      	cmp	r3, #255	; 0xff
 800ab9c:	d103      	bne.n	800aba6 <ArtNetNode::HandleTrigger()+0x12>
 800ab9e:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
 800aba2:	2aff      	cmp	r2, #255	; 0xff
 800aba4:	d009      	beq.n	800abba <ArtNetNode::HandleTrigger()+0x26>
 800aba6:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
 800abaa:	429a      	cmp	r2, r3
 800abac:	d10a      	bne.n	800abc4 <ArtNetNode::HandleTrigger()+0x30>
 800abae:	f891 20af 	ldrb.w	r2, [r1, #175]	; 0xaf
 800abb2:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d104      	bne.n	800abc4 <ArtNetNode::HandleTrigger()+0x30>
 800abba:	6988      	ldr	r0, [r1, #24]
 800abbc:	31b0      	adds	r1, #176	; 0xb0
 800abbe:	6803      	ldr	r3, [r0, #0]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	4718      	bx	r3
 800abc4:	4770      	bx	lr
	...

0800abc8 <e131::universe_to_multicast_ip(unsigned short)>:
 800abc8:	b513      	push	{r0, r1, r4, lr}
 800abca:	4604      	mov	r4, r0
 800abcc:	a901      	add	r1, sp, #4
 800abce:	4806      	ldr	r0, [pc, #24]	; (800abe8 <e131::universe_to_multicast_ip(unsigned short)+0x20>)
 800abd0:	f008 fc66 	bl	80134a0 <inet_aton>
 800abd4:	9801      	ldr	r0, [sp, #4]
 800abd6:	ea40 6004 	orr.w	r0, r0, r4, lsl #24
 800abda:	0224      	lsls	r4, r4, #8
 800abdc:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800abe0:	4320      	orrs	r0, r4
 800abe2:	b002      	add	sp, #8
 800abe4:	bd10      	pop	{r4, pc}
 800abe6:	bf00      	nop
 800abe8:	08016227 	stmdaeq	r1, {r0, r1, r2, r5, r9, sp, lr}

0800abec <memset.constprop.0.isra.0>:
 800abec:	2300      	movs	r3, #0
 800abee:	4401      	add	r1, r0
 800abf0:	4288      	cmp	r0, r1
 800abf2:	d002      	beq.n	800abfa <memset.constprop.0.isra.0+0xe>
 800abf4:	f800 3b01 	strb.w	r3, [r0], #1
 800abf8:	e7fa      	b.n	800abf0 <memset.constprop.0.isra.0+0x4>
 800abfa:	4770      	bx	lr

0800abfc <memcpy.isra.0>:
 800abfc:	3801      	subs	r0, #1
 800abfe:	440a      	add	r2, r1
 800ac00:	4291      	cmp	r1, r2
 800ac02:	d004      	beq.n	800ac0e <memcpy.isra.0+0x12>
 800ac04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac08:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ac0c:	e7f8      	b.n	800ac00 <memcpy.isra.0+0x4>
 800ac0e:	4770      	bx	lr

0800ac10 <lightset::Data::IOutput(LightSet*, unsigned int) const>:
 800ac10:	f240 6304 	movw	r3, #1540	; 0x604
 800ac14:	b470      	push	{r4, r5, r6}
 800ac16:	4605      	mov	r5, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	4353      	muls	r3, r2
 800ac1c:	4611      	mov	r1, r2
 800ac1e:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 800ac22:	18ea      	adds	r2, r5, r3
 800ac24:	6803      	ldr	r3, [r0, #0]
 800ac26:	691e      	ldr	r6, [r3, #16]
 800ac28:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 800ac2c:	46b4      	mov	ip, r6
 800ac2e:	192a      	adds	r2, r5, r4
 800ac30:	bc70      	pop	{r4, r5, r6}
 800ac32:	4760      	bx	ip

0800ac34 <E131Bridge::Start()>:
 800ac34:	6943      	ldr	r3, [r0, #20]
 800ac36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac38:	4604      	mov	r4, r0
 800ac3a:	b35b      	cbz	r3, 800ac94 <E131Bridge::Start()+0x60>
 800ac3c:	6983      	ldr	r3, [r0, #24]
 800ac3e:	b9cb      	cbnz	r3, 800ac74 <E131Bridge::Start()+0x40>
 800ac40:	a901      	add	r1, sp, #4
 800ac42:	4818      	ldr	r0, [pc, #96]	; (800aca4 <E131Bridge::Start()+0x70>)
 800ac44:	f008 fc2c 	bl	80134a0 <inet_aton>
 800ac48:	9b01      	ldr	r3, [sp, #4]
 800ac4a:	f240 207e 	movw	r0, #638	; 0x27e
 800ac4e:	f043 4356 	orr.w	r3, r3, #3590324224	; 0xd6000000
 800ac52:	f443 037a 	orr.w	r3, r3, #16384000	; 0xfa0000
 800ac56:	6223      	str	r3, [r4, #32]
 800ac58:	f008 fc1e 	bl	8013498 <operator new(unsigned int)>
 800ac5c:	61a0      	str	r0, [r4, #24]
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 fdc6 	bl	800b7f0 <E131Bridge::FillDataPacket()>
 800ac64:	f44f 608f 	mov.w	r0, #1144	; 0x478
 800ac68:	f008 fc16 	bl	8013498 <operator new(unsigned int)>
 800ac6c:	61e0      	str	r0, [r4, #28]
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 fd14 	bl	800b69c <E131Bridge::FillDiscoveryPacket()>
 800ac74:	2500      	movs	r5, #0
 800ac76:	270c      	movs	r7, #12
 800ac78:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800ac7c:	fb07 f305 	mul.w	r3, r7, r5
 800ac80:	5cf3      	ldrb	r3, [r6, r3]
 800ac82:	b123      	cbz	r3, 800ac8e <E131Bridge::Start()+0x5a>
 800ac84:	6960      	ldr	r0, [r4, #20]
 800ac86:	4629      	mov	r1, r5
 800ac88:	6803      	ldr	r3, [r0, #0]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	4798      	blx	r3
 800ac8e:	3501      	adds	r5, #1
 800ac90:	2d04      	cmp	r5, #4
 800ac92:	d1f3      	bne.n	800ac7c <E131Bridge::Start()+0x48>
 800ac94:	2102      	movs	r1, #2
 800ac96:	4b04      	ldr	r3, [pc, #16]	; (800aca8 <E131Bridge::Start()+0x74>)
 800ac98:	6818      	ldr	r0, [r3, #0]
 800ac9a:	b003      	add	sp, #12
 800ac9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800aca0:	f008 bb16 	b.w	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 800aca4:	08016227 	stmdaeq	r1, {r0, r1, r2, r5, r9, sp, lr}
 800aca8:	2000a960 	andcs	sl, r0, r0, ror #18

0800acac <E131Bridge::Stop()>:
 800acac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb0:	2500      	movs	r5, #0
 800acb2:	2301      	movs	r3, #1
 800acb4:	4604      	mov	r4, r0
 800acb6:	f240 6804 	movw	r8, #1540	; 0x604
 800acba:	462e      	mov	r6, r5
 800acbc:	f880 34f4 	strb.w	r3, [r0, #1268]	; 0x4f4
 800acc0:	f500 67aa 	add.w	r7, r0, #1360	; 0x550
 800acc4:	6860      	ldr	r0, [r4, #4]
 800acc6:	b118      	cbz	r0, 800acd0 <E131Bridge::Stop()+0x24>
 800acc8:	6803      	ldr	r3, [r0, #0]
 800acca:	4629      	mov	r1, r5
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	4798      	blx	r3
 800acd0:	f7fe fb7e 	bl	80093d0 <lightset::Data::Get()>
 800acd4:	2344      	movs	r3, #68	; 0x44
 800acd6:	fb08 0005 	mla	r0, r8, r5, r0
 800acda:	436b      	muls	r3, r5
 800acdc:	3501      	adds	r5, #1
 800acde:	2d04      	cmp	r5, #4
 800ace0:	f8c0 6600 	str.w	r6, [r0, #1536]	; 0x600
 800ace4:	54fe      	strb	r6, [r7, r3]
 800ace6:	d1ed      	bne.n	800acc4 <E131Bridge::Stop()+0x18>
 800ace8:	6963      	ldr	r3, [r4, #20]
 800acea:	b17b      	cbz	r3, 800ad0c <E131Bridge::Stop()+0x60>
 800acec:	2500      	movs	r5, #0
 800acee:	270c      	movs	r7, #12
 800acf0:	f204 6622 	addw	r6, r4, #1570	; 0x622
 800acf4:	fb07 f305 	mul.w	r3, r7, r5
 800acf8:	5cf3      	ldrb	r3, [r6, r3]
 800acfa:	b123      	cbz	r3, 800ad06 <E131Bridge::Stop()+0x5a>
 800acfc:	6960      	ldr	r0, [r4, #20]
 800acfe:	4629      	mov	r1, r5
 800ad00:	6803      	ldr	r3, [r0, #0]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	4798      	blx	r3
 800ad06:	3501      	adds	r5, #1
 800ad08:	2d04      	cmp	r5, #4
 800ad0a:	d1f3      	bne.n	800acf4 <E131Bridge::Stop()+0x48>
 800ad0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad10:	4b02      	ldr	r3, [pc, #8]	; (800ad1c <E131Bridge::Stop()+0x70>)
 800ad12:	2100      	movs	r1, #0
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	f008 badb 	b.w	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 800ad1a:	bf00      	nop
 800ad1c:	2000a960 	andcs	sl, r0, r0, ror #18

0800ad20 <E131Bridge::SetSourceName(char const*)>:
 800ad20:	223f      	movs	r2, #63	; 0x3f
 800ad22:	b510      	push	{r4, lr}
 800ad24:	f100 0334 	add.w	r3, r0, #52	; 0x34
 800ad28:	3901      	subs	r1, #1
 800ad2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad2e:	b92c      	cbnz	r4, 800ad3c <E131Bridge::SetSourceName(char const*)+0x1c>
 800ad30:	441a      	add	r2, r3
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d006      	beq.n	800ad44 <E131Bridge::SetSourceName(char const*)+0x24>
 800ad36:	f803 4b01 	strb.w	r4, [r3], #1
 800ad3a:	e7fa      	b.n	800ad32 <E131Bridge::SetSourceName(char const*)+0x12>
 800ad3c:	3a01      	subs	r2, #1
 800ad3e:	f803 4b01 	strb.w	r4, [r3], #1
 800ad42:	d1f2      	bne.n	800ad2a <E131Bridge::SetSourceName(char const*)+0xa>
 800ad44:	2300      	movs	r3, #0
 800ad46:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
 800ad4a:	bd10      	pop	{r4, pc}

0800ad4c <E131Bridge::E131Bridge()>:
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad54:	e9c0 2300 	strd	r2, r3, [r0]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	2764      	movs	r7, #100	; 0x64
 800ad5e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad62:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800ad66:	e9c0 3307 	strd	r3, r3, [r0, #28]
 800ad6a:	6743      	str	r3, [r0, #116]	; 0x74
 800ad6c:	4b1e      	ldr	r3, [pc, #120]	; (800ade8 <E131Bridge::E131Bridge()+0x9c>)
 800ad6e:	7202      	strb	r2, [r0, #8]
 800ad70:	b093      	sub	sp, #76	; 0x4c
 800ad72:	6018      	str	r0, [r3, #0]
 800ad74:	f500 65a2 	add.w	r5, r0, #1296	; 0x510
 800ad78:	f500 62c4 	add.w	r2, r0, #1568	; 0x620
 800ad7c:	f500 66ca 	add.w	r6, r0, #1616	; 0x650
 800ad80:	4628      	mov	r0, r5
 800ad82:	2144      	movs	r1, #68	; 0x44
 800ad84:	f7ff ff32 	bl	800abec <memset.constprop.0.isra.0>
 800ad88:	4610      	mov	r0, r2
 800ad8a:	210c      	movs	r1, #12
 800ad8c:	f7ff ff2e 	bl	800abec <memset.constprop.0.isra.0>
 800ad90:	320c      	adds	r2, #12
 800ad92:	f802 7c03 	strb.w	r7, [r2, #-3]
 800ad96:	42b2      	cmp	r2, r6
 800ad98:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800ad9c:	d1f0      	bne.n	800ad80 <E131Bridge::E131Bridge()+0x34>
 800ad9e:	f204 40f4 	addw	r0, r4, #1268	; 0x4f4
 800ada2:	211c      	movs	r1, #28
 800ada4:	f7ff ff22 	bl	800abec <memset.constprop.0.isra.0>
 800ada8:	2301      	movs	r3, #1
 800adaa:	4d10      	ldr	r5, [pc, #64]	; (800adec <E131Bridge::E131Bridge()+0xa0>)
 800adac:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800adb0:	4a0f      	ldr	r2, [pc, #60]	; (800adf0 <E131Bridge::E131Bridge()+0xa4>)
 800adb2:	682b      	ldr	r3, [r5, #0]
 800adb4:	2140      	movs	r1, #64	; 0x40
 800adb6:	331c      	adds	r3, #28
 800adb8:	9200      	str	r2, [sp, #0]
 800adba:	a802      	add	r0, sp, #8
 800adbc:	4a0d      	ldr	r2, [pc, #52]	; (800adf4 <E131Bridge::E131Bridge()+0xa8>)
 800adbe:	f008 ff99 	bl	8013cf4 <snprintf>
 800adc2:	4620      	mov	r0, r4
 800adc4:	a902      	add	r1, sp, #8
 800adc6:	f7ff ffab 	bl	800ad20 <E131Bridge::SetSourceName(char const*)>
 800adca:	f44f 51ae 	mov.w	r1, #5568	; 0x15c0
 800adce:	6828      	ldr	r0, [r5, #0]
 800add0:	f005 fcb8 	bl	8010744 <Network::Begin(unsigned short)>
 800add4:	4621      	mov	r1, r4
 800add6:	4b08      	ldr	r3, [pc, #32]	; (800adf8 <E131Bridge::E131Bridge()+0xac>)
 800add8:	f841 0b24 	str.w	r0, [r1], #36
 800addc:	6818      	ldr	r0, [r3, #0]
 800adde:	f008 fafb 	bl	80133d8 <Hardware::GetUuid(unsigned char*)>
 800ade2:	4620      	mov	r0, r4
 800ade4:	b013      	add	sp, #76	; 0x4c
 800ade6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade8:	2000190c 	andcs	r1, r0, ip, lsl #18
 800adec:	2000a298 	mulcs	r0, r8, r2
 800adf0:	08015f25 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl, fp, ip, lr}
 800adf4:	08016233 	stmdaeq	r1, {r0, r1, r4, r5, r9, sp, lr}
 800adf8:	2000a964 	andcs	sl, r0, r4, ror #18

0800adfc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	4604      	mov	r4, r0
 800ae00:	2300      	movs	r3, #0
 800ae02:	2544      	movs	r5, #68	; 0x44
 800ae04:	4610      	mov	r0, r2
 800ae06:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
 800ae0a:	4299      	cmp	r1, r3
 800ae0c:	d004      	beq.n	800ae18 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x1c>
 800ae0e:	fb05 f603 	mul.w	r6, r5, r3
 800ae12:	5b96      	ldrh	r6, [r2, r6]
 800ae14:	4286      	cmp	r6, r0
 800ae16:	d00e      	beq.n	800ae36 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3a>
 800ae18:	3301      	adds	r3, #1
 800ae1a:	2b04      	cmp	r3, #4
 800ae1c:	d1f5      	bne.n	800ae0a <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0xe>
 800ae1e:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <E131Bridge::LeaveUniverse(unsigned int, unsigned short)+0x3c>)
 800ae20:	6824      	ldr	r4, [r4, #0]
 800ae22:	681d      	ldr	r5, [r3, #0]
 800ae24:	f7ff fed0 	bl	800abc8 <e131::universe_to_multicast_ip(unsigned short)>
 800ae28:	4621      	mov	r1, r4
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae32:	f005 bc9b 	b.w	801076c <Network::LeaveGroup(int, unsigned int)>
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	2000a298 	mulcs	r0, r8, r2

0800ae3c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	4604      	mov	r4, r0
 800ae40:	461d      	mov	r5, r3
 800ae42:	b191      	cbz	r1, 800ae6a <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x2e>
 800ae44:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800ae48:	f200 5606 	addw	r6, r0, #1286	; 0x506
 800ae4c:	b99a      	cbnz	r2, 800ae76 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x3a>
 800ae4e:	4b0e      	ldr	r3, [pc, #56]	; (800ae88 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x4c>)
 800ae50:	8035      	strh	r5, [r6, #0]
 800ae52:	4628      	mov	r0, r5
 800ae54:	6826      	ldr	r6, [r4, #0]
 800ae56:	681c      	ldr	r4, [r3, #0]
 800ae58:	f7ff feb6 	bl	800abc8 <e131::universe_to_multicast_ip(unsigned short)>
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4602      	mov	r2, r0
 800ae60:	4620      	mov	r0, r4
 800ae62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae66:	f005 bc7e 	b.w	8010766 <Network::JoinGroup(int, unsigned int)>
 800ae6a:	b15a      	cbz	r2, 800ae84 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800ae6c:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800ae70:	f500 66a1 	add.w	r6, r0, #1288	; 0x508
 800ae74:	e7ea      	b.n	800ae4c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x10>
 800ae76:	42aa      	cmp	r2, r5
 800ae78:	d004      	beq.n	800ae84 <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x48>
 800ae7a:	2104      	movs	r1, #4
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f7ff ffbd 	bl	800adfc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800ae82:	e7e4      	b.n	800ae4e <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)+0x12>
 800ae84:	bd70      	pop	{r4, r5, r6, pc}
 800ae86:	bf00      	nop
 800ae88:	2000a298 	mulcs	r0, r8, r2

0800ae8c <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)>:
 800ae8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae90:	4604      	mov	r4, r0
 800ae92:	460d      	mov	r5, r1
 800ae94:	461e      	mov	r6, r3
 800ae96:	bb02      	cbnz	r2, 800aeda <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x4e>
 800ae98:	2903      	cmp	r1, #3
 800ae9a:	d843      	bhi.n	800af24 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800ae9c:	230c      	movs	r3, #12
 800ae9e:	fb03 0301 	mla	r3, r3, r1, r0
 800aea2:	f893 2622 	ldrb.w	r2, [r3, #1570]	; 0x622
 800aea6:	b12a      	cbz	r2, 800aeb4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x28>
 800aea8:	f8b3 3620 	ldrh.w	r3, [r3, #1568]	; 0x620
 800aeac:	42b3      	cmp	r3, r6
 800aeae:	d109      	bne.n	800aec4 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x38>
 800aeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb4:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800aeb8:	3201      	adds	r2, #1
 800aeba:	f880 250a 	strb.w	r2, [r0, #1290]	; 0x50a
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 2622 	strb.w	r2, [r3, #1570]	; 0x622
 800aec4:	210c      	movs	r1, #12
 800aec6:	fb01 4405 	mla	r4, r1, r5, r4
 800aeca:	4630      	mov	r0, r6
 800aecc:	f8a4 6620 	strh.w	r6, [r4, #1568]	; 0x620
 800aed0:	f7ff fe7a 	bl	800abc8 <e131::universe_to_multicast_ip(unsigned short)>
 800aed4:	f8c4 0624 	str.w	r0, [r4, #1572]	; 0x624
 800aed8:	e7ea      	b.n	800aeb0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800aeda:	2a02      	cmp	r2, #2
 800aedc:	d122      	bne.n	800af24 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x98>
 800aede:	2903      	cmp	r1, #3
 800aee0:	d8e6      	bhi.n	800aeb0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800aee2:	2344      	movs	r3, #68	; 0x44
 800aee4:	fb03 0301 	mla	r3, r3, r1, r0
 800aee8:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800aeec:	b152      	cbz	r2, 800af04 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x78>
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800aef4:	f890 350b 	ldrb.w	r3, [r0, #1291]	; 0x50b
 800aef8:	4632      	mov	r2, r6
 800aefa:	3b01      	subs	r3, #1
 800aefc:	f880 350b 	strb.w	r3, [r0, #1291]	; 0x50b
 800af00:	f7ff ff7c 	bl	800adfc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800af04:	210c      	movs	r1, #12
 800af06:	fb01 4505 	mla	r5, r1, r5, r4
 800af0a:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d0ce      	beq.n	800aeb0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800af12:	2300      	movs	r3, #0
 800af14:	f885 3622 	strb.w	r3, [r5, #1570]	; 0x622
 800af18:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800af1c:	3b01      	subs	r3, #1
 800af1e:	f884 350a 	strb.w	r3, [r4, #1290]	; 0x50a
 800af22:	e7c5      	b.n	800aeb0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800af24:	2344      	movs	r3, #68	; 0x44
 800af26:	fb03 4305 	mla	r3, r3, r5, r4
 800af2a:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 800af2e:	b1d2      	cbz	r2, 800af66 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xda>
 800af30:	f8b3 3510 	ldrh.w	r3, [r3, #1296]	; 0x510
 800af34:	42b3      	cmp	r3, r6
 800af36:	d0bb      	beq.n	800aeb0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800af38:	4632      	mov	r2, r6
 800af3a:	4629      	mov	r1, r5
 800af3c:	4620      	mov	r0, r4
 800af3e:	f7ff ff5d 	bl	800adfc <E131Bridge::LeaveUniverse(unsigned int, unsigned short)>
 800af42:	4b0d      	ldr	r3, [pc, #52]	; (800af78 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xec>)
 800af44:	4630      	mov	r0, r6
 800af46:	681f      	ldr	r7, [r3, #0]
 800af48:	f8d4 8000 	ldr.w	r8, [r4]
 800af4c:	f7ff fe3c 	bl	800abc8 <e131::universe_to_multicast_ip(unsigned short)>
 800af50:	4641      	mov	r1, r8
 800af52:	4602      	mov	r2, r0
 800af54:	4638      	mov	r0, r7
 800af56:	f005 fc06 	bl	8010766 <Network::JoinGroup(int, unsigned int)>
 800af5a:	2144      	movs	r1, #68	; 0x44
 800af5c:	fb01 4405 	mla	r4, r1, r5, r4
 800af60:	f8a4 6510 	strh.w	r6, [r4, #1296]	; 0x510
 800af64:	e7a4      	b.n	800aeb0 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0x24>
 800af66:	f894 250b 	ldrb.w	r2, [r4, #1291]	; 0x50b
 800af6a:	3201      	adds	r2, #1
 800af6c:	f884 250b 	strb.w	r2, [r4, #1291]	; 0x50b
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2512 	strb.w	r2, [r3, #1298]	; 0x512
 800af76:	e7e4      	b.n	800af42 <E131Bridge::SetUniverse(unsigned int, lightset::PortDir, unsigned short)+0xb6>
 800af78:	2000a298 	mulcs	r0, r8, r2

0800af7c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>:
 800af7c:	b953      	cbnz	r3, 800af94 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x18>
 800af7e:	2903      	cmp	r1, #3
 800af80:	d811      	bhi.n	800afa6 <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const+0x2a>
 800af82:	230c      	movs	r3, #12
 800af84:	fb03 0001 	mla	r0, r3, r1, r0
 800af88:	f8b0 3620 	ldrh.w	r3, [r0, #1568]	; 0x620
 800af8c:	f890 0622 	ldrb.w	r0, [r0, #1570]	; 0x622
 800af90:	8013      	strh	r3, [r2, #0]
 800af92:	4770      	bx	lr
 800af94:	2344      	movs	r3, #68	; 0x44
 800af96:	fb03 0001 	mla	r0, r3, r1, r0
 800af9a:	f8b0 3510 	ldrh.w	r3, [r0, #1296]	; 0x510
 800af9e:	f890 0512 	ldrb.w	r0, [r0, #1298]	; 0x512
 800afa2:	8013      	strh	r3, [r2, #0]
 800afa4:	4770      	bx	lr
 800afa6:	4618      	mov	r0, r3
 800afa8:	4770      	bx	lr

0800afaa <E131Bridge::UpdateMergeStatus(unsigned int)>:
 800afaa:	f890 34f5 	ldrb.w	r3, [r0, #1269]	; 0x4f5
 800afae:	b923      	cbnz	r3, 800afba <E131Bridge::UpdateMergeStatus(unsigned int)+0x10>
 800afb0:	2301      	movs	r3, #1
 800afb2:	f880 34f5 	strb.w	r3, [r0, #1269]	; 0x4f5
 800afb6:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800afba:	2344      	movs	r3, #68	; 0x44
 800afbc:	fb03 0001 	mla	r0, r3, r1, r0
 800afc0:	2301      	movs	r3, #1
 800afc2:	f880 3551 	strb.w	r3, [r0, #1361]	; 0x551
 800afc6:	4770      	bx	lr

0800afc8 <E131Bridge::CheckMergeTimeouts(unsigned int)>:
 800afc8:	4602      	mov	r2, r0
 800afca:	2044      	movs	r0, #68	; 0x44
 800afcc:	4348      	muls	r0, r1
 800afce:	b570      	push	{r4, r5, r6, lr}
 800afd0:	1815      	adds	r5, r2, r0
 800afd2:	460c      	mov	r4, r1
 800afd4:	68d3      	ldr	r3, [r2, #12]
 800afd6:	f8d5 1514 	ldr.w	r1, [r5, #1300]	; 0x514
 800afda:	1a5b      	subs	r3, r3, r1
 800afdc:	f242 7110 	movw	r1, #10000	; 0x2710
 800afe0:	428b      	cmp	r3, r1
 800afe2:	d90a      	bls.n	800affa <E131Bridge::CheckMergeTimeouts(unsigned int)+0x32>
 800afe4:	2600      	movs	r6, #0
 800afe6:	f200 501c 	addw	r0, r0, #1308	; 0x51c
 800afea:	2110      	movs	r1, #16
 800afec:	f8c5 6518 	str.w	r6, [r5, #1304]	; 0x518
 800aff0:	4410      	add	r0, r2
 800aff2:	f7ff fdfb 	bl	800abec <memset.constprop.0.isra.0>
 800aff6:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800affa:	2044      	movs	r0, #68	; 0x44
 800affc:	4344      	muls	r4, r0
 800affe:	1915      	adds	r5, r2, r4
 800b000:	f8d5 1530 	ldr.w	r1, [r5, #1328]	; 0x530
 800b004:	68d3      	ldr	r3, [r2, #12]
 800b006:	1a5b      	subs	r3, r3, r1
 800b008:	f242 7110 	movw	r1, #10000	; 0x2710
 800b00c:	428b      	cmp	r3, r1
 800b00e:	d90a      	bls.n	800b026 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x5e>
 800b010:	2600      	movs	r6, #0
 800b012:	f504 64a7 	add.w	r4, r4, #1336	; 0x538
 800b016:	2110      	movs	r1, #16
 800b018:	f8c5 6534 	str.w	r6, [r5, #1332]	; 0x534
 800b01c:	1910      	adds	r0, r2, r4
 800b01e:	f7ff fde5 	bl	800abec <memset.constprop.0.isra.0>
 800b022:	f885 6551 	strb.w	r6, [r5, #1361]	; 0x551
 800b026:	f892 1595 	ldrb.w	r1, [r2, #1429]	; 0x595
 800b02a:	f892 3551 	ldrb.w	r3, [r2, #1361]	; 0x551
 800b02e:	430b      	orrs	r3, r1
 800b030:	f892 15d9 	ldrb.w	r1, [r2, #1497]	; 0x5d9
 800b034:	430b      	orrs	r3, r1
 800b036:	d107      	bne.n	800b048 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800b038:	f892 361d 	ldrb.w	r3, [r2, #1565]	; 0x61d
 800b03c:	b923      	cbnz	r3, 800b048 <E131Bridge::CheckMergeTimeouts(unsigned int)+0x80>
 800b03e:	2101      	movs	r1, #1
 800b040:	f882 34f5 	strb.w	r3, [r2, #1269]	; 0x4f5
 800b044:	f882 14f8 	strb.w	r1, [r2, #1272]	; 0x4f8
 800b048:	bd70      	pop	{r4, r5, r6, pc}

0800b04a <E131Bridge::IsPriorityTimeOut(unsigned int) const>:
 800b04a:	2244      	movs	r2, #68	; 0x44
 800b04c:	fb02 0101 	mla	r1, r2, r1, r0
 800b050:	68c3      	ldr	r3, [r0, #12]
 800b052:	f8d1 0530 	ldr.w	r0, [r1, #1328]	; 0x530
 800b056:	b510      	push	{r4, lr}
 800b058:	1a1a      	subs	r2, r3, r0
 800b05a:	f8d1 4514 	ldr.w	r4, [r1, #1300]	; 0x514
 800b05e:	f8d1 0534 	ldr.w	r0, [r1, #1332]	; 0x534
 800b062:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
 800b066:	b171      	cbz	r1, 800b086 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3c>
 800b068:	1b1b      	subs	r3, r3, r4
 800b06a:	b128      	cbz	r0, 800b078 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2e>
 800b06c:	f242 700f 	movw	r0, #9999	; 0x270f
 800b070:	4283      	cmp	r3, r0
 800b072:	d90d      	bls.n	800b090 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x46>
 800b074:	4282      	cmp	r2, r0
 800b076:	e002      	b.n	800b07e <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x34>
 800b078:	f242 7010 	movw	r0, #10000	; 0x2710
 800b07c:	4283      	cmp	r3, r0
 800b07e:	bf94      	ite	ls
 800b080:	2000      	movls	r0, #0
 800b082:	2001      	movhi	r0, #1
 800b084:	bd10      	pop	{r4, pc}
 800b086:	2800      	cmp	r0, #0
 800b088:	d0fc      	beq.n	800b084 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>
 800b08a:	f242 7010 	movw	r0, #10000	; 0x2710
 800b08e:	e7f1      	b.n	800b074 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x2a>
 800b090:	2000      	movs	r0, #0
 800b092:	e7f7      	b.n	800b084 <E131Bridge::IsPriorityTimeOut(unsigned int) const+0x3a>

0800b094 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>:
 800b094:	684a      	ldr	r2, [r1, #4]
 800b096:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b098:	b510      	push	{r4, lr}
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d10b      	bne.n	800b0b6 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x22>
 800b09e:	f100 0392 	add.w	r3, r0, #146	; 0x92
 800b0a2:	3108      	adds	r1, #8
 800b0a4:	30a2      	adds	r0, #162	; 0xa2
 800b0a6:	4298      	cmp	r0, r3
 800b0a8:	d007      	beq.n	800b0ba <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x26>
 800b0aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0b2:	4294      	cmp	r4, r2
 800b0b4:	d0f7      	beq.n	800b0a6 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x12>
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	bd10      	pop	{r4, pc}
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	e7fc      	b.n	800b0b8 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const+0x24>
	...

0800b0c0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>:
 800b0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	4690      	mov	r8, r2
 800b0ca:	460f      	mov	r7, r1
 800b0cc:	f880 34f8 	strb.w	r3, [r0, #1272]	; 0x4f8
 800b0d0:	2900      	cmp	r1, #0
 800b0d2:	d03d      	beq.n	800b150 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800b0d4:	2a00      	cmp	r2, #0
 800b0d6:	d03b      	beq.n	800b150 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x90>
 800b0d8:	2600      	movs	r6, #0
 800b0da:	f240 6804 	movw	r8, #1540	; 0x604
 800b0de:	4637      	mov	r7, r6
 800b0e0:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
 800b0e4:	f880 350c 	strb.w	r3, [r0, #1292]	; 0x50c
 800b0e8:	f200 541c 	addw	r4, r0, #1308	; 0x51c
 800b0ec:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800b0f0:	b1e3      	cbz	r3, 800b12c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x6c>
 800b0f2:	6868      	ldr	r0, [r5, #4]
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	6803      	ldr	r3, [r0, #0]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	4798      	blx	r3
 800b0fc:	2110      	movs	r1, #16
 800b0fe:	4620      	mov	r0, r4
 800b100:	f844 7c04 	str.w	r7, [r4, #-4]
 800b104:	f7ff fd72 	bl	800abec <memset.constprop.0.isra.0>
 800b108:	2110      	movs	r1, #16
 800b10a:	f104 001c 	add.w	r0, r4, #28
 800b10e:	61a7      	str	r7, [r4, #24]
 800b110:	f7ff fd6c 	bl	800abec <memset.constprop.0.isra.0>
 800b114:	f7fe f95c 	bl	80093d0 <lightset::Data::Get()>
 800b118:	fb08 0006 	mla	r0, r8, r6, r0
 800b11c:	f8c0 7600 	str.w	r7, [r0, #1536]	; 0x600
 800b120:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 800b124:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
 800b128:	f884 7035 	strb.w	r7, [r4, #53]	; 0x35
 800b12c:	3601      	adds	r6, #1
 800b12e:	2e04      	cmp	r6, #4
 800b130:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800b134:	d1da      	bne.n	800b0ec <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x2c>
 800b136:	4b25      	ldr	r3, [pc, #148]	; (800b1cc <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x10c>)
 800b138:	2102      	movs	r1, #2
 800b13a:	6818      	ldr	r0, [r3, #0]
 800b13c:	f008 f8c8 	bl	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 800b140:	f895 350d 	ldrb.w	r3, [r5, #1293]	; 0x50d
 800b144:	f023 0302 	bic.w	r3, r3, #2
 800b148:	f885 350d 	strb.w	r3, [r5, #1293]	; 0x50d
 800b14c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b150:	2600      	movs	r6, #0
 800b152:	f240 6b04 	movw	fp, #1540	; 0x604
 800b156:	46b1      	mov	r9, r6
 800b158:	f505 64a7 	add.w	r4, r5, #1336	; 0x538
 800b15c:	7ea3      	ldrb	r3, [r4, #26]
 800b15e:	b373      	cbz	r3, 800b1be <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800b160:	b15f      	cbz	r7, 800b17a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800b162:	f854 3c20 	ldr.w	r3, [r4, #-32]
 800b166:	b143      	cbz	r3, 800b17a <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xba>
 800b168:	2110      	movs	r1, #16
 800b16a:	f844 9c20 	str.w	r9, [r4, #-32]
 800b16e:	f1a4 001c 	sub.w	r0, r4, #28
 800b172:	f7ff fd3b 	bl	800abec <memset.constprop.0.isra.0>
 800b176:	f884 9019 	strb.w	r9, [r4, #25]
 800b17a:	f1b8 0f00 	cmp.w	r8, #0
 800b17e:	d00a      	beq.n	800b196 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800b180:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b184:	b13b      	cbz	r3, 800b196 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xd6>
 800b186:	2110      	movs	r1, #16
 800b188:	4620      	mov	r0, r4
 800b18a:	f844 9c04 	str.w	r9, [r4, #-4]
 800b18e:	f7ff fd2d 	bl	800abec <memset.constprop.0.isra.0>
 800b192:	f884 9019 	strb.w	r9, [r4, #25]
 800b196:	f895 a4f5 	ldrb.w	sl, [r5, #1269]	; 0x4f5
 800b19a:	f1ba 0f00 	cmp.w	sl, #0
 800b19e:	d10e      	bne.n	800b1be <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0xfe>
 800b1a0:	6868      	ldr	r0, [r5, #4]
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	6803      	ldr	r3, [r0, #0]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	4798      	blx	r3
 800b1aa:	f7fe f911 	bl	80093d0 <lightset::Data::Get()>
 800b1ae:	fb0b 0006 	mla	r0, fp, r6, r0
 800b1b2:	f8c0 a600 	str.w	sl, [r0, #1536]	; 0x600
 800b1b6:	f884 a018 	strb.w	sl, [r4, #24]
 800b1ba:	f884 a01a 	strb.w	sl, [r4, #26]
 800b1be:	3601      	adds	r6, #1
 800b1c0:	2e04      	cmp	r6, #4
 800b1c2:	f104 0444 	add.w	r4, r4, #68	; 0x44
 800b1c6:	d1c9      	bne.n	800b15c <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x9c>
 800b1c8:	e7b5      	b.n	800b136 <E131Bridge::SetNetworkDataLossCondition(bool, bool)+0x76>
 800b1ca:	bf00      	nop
 800b1cc:	2000a960 	andcs	sl, r0, r0, ror #18

0800b1d0 <E131Bridge::HandleDmx()>:
 800b1d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	4604      	mov	r4, r0
 800b1d6:	2600      	movs	r6, #0
 800b1d8:	f8b0 70f7 	ldrh.w	r7, [r0, #247]	; 0xf7
 800b1dc:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 800b1e0:	ba7f      	rev16	r7, r7
 800b1e2:	b2bf      	uxth	r7, r7
 800b1e4:	3f01      	subs	r7, #1
 800b1e6:	f200 551c 	addw	r5, r0, #1308	; 0x51c
 800b1ea:	f815 3c0a 	ldrb.w	r3, [r5, #-10]
 800b1ee:	b353      	cbz	r3, 800b246 <E131Bridge::HandleDmx()+0x76>
 800b1f0:	f835 3c0c 	ldrh.w	r3, [r5, #-12]
 800b1f4:	f8b4 20ed 	ldrh.w	r2, [r4, #237]	; 0xed
 800b1f8:	ba5b      	rev16	r3, r3
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d122      	bne.n	800b246 <E131Bridge::HandleDmx()+0x76>
 800b200:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b204:	f1a5 0108 	sub.w	r1, r5, #8
 800b208:	4620      	mov	r0, r4
 800b20a:	9300      	str	r3, [sp, #0]
 800b20c:	f7ff ff42 	bl	800b094 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800b210:	f105 0114 	add.w	r1, r5, #20
 800b214:	4682      	mov	sl, r0
 800b216:	4620      	mov	r0, r4
 800b218:	f7ff ff3c 	bl	800b094 <E131Bridge::isIpCidMatch(e131bridge::Source const*) const>
 800b21c:	f8d5 b018 	ldr.w	fp, [r5, #24]
 800b220:	4680      	mov	r8, r0
 800b222:	f1ba 0f00 	cmp.w	sl, #0
 800b226:	d016      	beq.n	800b256 <E131Bridge::HandleDmx()+0x86>
 800b228:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b22c:	7c2a      	ldrb	r2, [r5, #16]
 800b22e:	742b      	strb	r3, [r5, #16]
 800b230:	3313      	adds	r3, #19
 800b232:	1a9b      	subs	r3, r3, r2
 800b234:	b2db      	uxtb	r3, r3
 800b236:	2b13      	cmp	r3, #19
 800b238:	d905      	bls.n	800b246 <E131Bridge::HandleDmx()+0x76>
 800b23a:	f994 20ec 	ldrsb.w	r2, [r4, #236]	; 0xec
 800b23e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800b242:	2a00      	cmp	r2, #0
 800b244:	da10      	bge.n	800b268 <E131Bridge::HandleDmx()+0x98>
 800b246:	3601      	adds	r6, #1
 800b248:	2e04      	cmp	r6, #4
 800b24a:	f105 0544 	add.w	r5, r5, #68	; 0x44
 800b24e:	d1cc      	bne.n	800b1ea <E131Bridge::HandleDmx()+0x1a>
 800b250:	b003      	add	sp, #12
 800b252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b256:	2800      	cmp	r0, #0
 800b258:	d0ef      	beq.n	800b23a <E131Bridge::HandleDmx()+0x6a>
 800b25a:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b25e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800b262:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800b266:	e7e3      	b.n	800b230 <E131Bridge::HandleDmx()+0x60>
 800b268:	065a      	lsls	r2, r3, #25
 800b26a:	d50b      	bpl.n	800b284 <E131Bridge::HandleDmx()+0xb4>
 800b26c:	f1ba 0f00 	cmp.w	sl, #0
 800b270:	d102      	bne.n	800b278 <E131Bridge::HandleDmx()+0xa8>
 800b272:	f1b8 0f00 	cmp.w	r8, #0
 800b276:	d0e6      	beq.n	800b246 <E131Bridge::HandleDmx()+0x76>
 800b278:	4642      	mov	r2, r8
 800b27a:	4651      	mov	r1, sl
 800b27c:	4620      	mov	r0, r4
 800b27e:	f7ff ff1f 	bl	800b0c0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800b282:	e7e0      	b.n	800b246 <E131Bridge::HandleDmx()+0x76>
 800b284:	f894 34f5 	ldrb.w	r3, [r4, #1269]	; 0x4f5
 800b288:	b133      	cbz	r3, 800b298 <E131Bridge::HandleDmx()+0xc8>
 800b28a:	f894 34fa 	ldrb.w	r3, [r4, #1274]	; 0x4fa
 800b28e:	b91b      	cbnz	r3, 800b298 <E131Bridge::HandleDmx()+0xc8>
 800b290:	4631      	mov	r1, r6
 800b292:	4620      	mov	r0, r4
 800b294:	f7ff fe98 	bl	800afc8 <E131Bridge::CheckMergeTimeouts(unsigned int)>
 800b298:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
 800b29c:	f894 250c 	ldrb.w	r2, [r4, #1292]	; 0x50c
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d259      	bcs.n	800b358 <E131Bridge::HandleDmx()+0x188>
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	f7ff fece 	bl	800b04a <E131Bridge::IsPriorityTimeOut(unsigned int) const>
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d0c9      	beq.n	800b246 <E131Bridge::HandleDmx()+0x76>
 800b2b2:	9b01      	ldr	r3, [sp, #4]
 800b2b4:	f884 350c 	strb.w	r3, [r4, #1292]	; 0x50c
 800b2b8:	9b00      	ldr	r3, [sp, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d154      	bne.n	800b368 <E131Bridge::HandleDmx()+0x198>
 800b2be:	f1bb 0f00 	cmp.w	fp, #0
 800b2c2:	d15c      	bne.n	800b37e <E131Bridge::HandleDmx()+0x1ae>
 800b2c4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b2c6:	2210      	movs	r2, #16
 800b2c8:	f845 3c04 	str.w	r3, [r5, #-4]
 800b2cc:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	742b      	strb	r3, [r5, #16]
 800b2d4:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800b2d8:	f7ff fc90 	bl	800abfc <memcpy.isra.0>
 800b2dc:	68e3      	ldr	r3, [r4, #12]
 800b2de:	463a      	mov	r2, r7
 800b2e0:	4649      	mov	r1, r9
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f845 3c08 	str.w	r3, [r5, #-8]
 800b2e8:	f7fe f87e 	bl	80093e8 <lightset::Data::SetSourceA(unsigned int, unsigned char const*, unsigned int)>
 800b2ec:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 800b2f0:	069b      	lsls	r3, r3, #26
 800b2f2:	f100 80ad 	bmi.w	800b450 <E131Bridge::HandleDmx()+0x280>
 800b2f6:	f8b4 30e9 	ldrh.w	r3, [r4, #233]	; 0xe9
 800b2fa:	b29a      	uxth	r2, r3
 800b2fc:	2a00      	cmp	r2, #0
 800b2fe:	f000 80ab 	beq.w	800b458 <E131Bridge::HandleDmx()+0x288>
 800b302:	f894 24f7 	ldrb.w	r2, [r4, #1271]	; 0x4f7
 800b306:	2a00      	cmp	r2, #0
 800b308:	f040 80a6 	bne.w	800b458 <E131Bridge::HandleDmx()+0x288>
 800b30c:	ba5b      	rev16	r3, r3
 800b30e:	b29b      	uxth	r3, r3
 800b310:	f1ba 0f00 	cmp.w	sl, #0
 800b314:	f040 8099 	bne.w	800b44a <E131Bridge::HandleDmx()+0x27a>
 800b318:	f1b8 0f00 	cmp.w	r8, #0
 800b31c:	f040 8095 	bne.w	800b44a <E131Bridge::HandleDmx()+0x27a>
 800b320:	69aa      	ldr	r2, [r5, #24]
 800b322:	f855 1c04 	ldr.w	r1, [r5, #-4]
 800b326:	3a00      	subs	r2, #0
 800b328:	bf18      	it	ne
 800b32a:	2201      	movne	r2, #1
 800b32c:	3900      	subs	r1, #0
 800b32e:	bf18      	it	ne
 800b330:	2101      	movne	r1, #1
 800b332:	4620      	mov	r0, r4
 800b334:	f7ff fd82 	bl	800ae3c <E131Bridge::SetSynchronizationAddress(bool, bool, unsigned short)>
 800b338:	f240 1301 	movw	r3, #257	; 0x101
 800b33c:	f8a4 34f6 	strh.w	r3, [r4, #1270]	; 0x4f6
 800b340:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800b344:	2b00      	cmp	r3, #0
 800b346:	f040 808c 	bne.w	800b462 <E131Bridge::HandleDmx()+0x292>
 800b34a:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b34e:	f043 0302 	orr.w	r3, r3, #2
 800b352:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800b356:	e776      	b.n	800b246 <E131Bridge::HandleDmx()+0x76>
 800b358:	d9ae      	bls.n	800b2b8 <E131Bridge::HandleDmx()+0xe8>
 800b35a:	2200      	movs	r2, #0
 800b35c:	f845 2c04 	str.w	r2, [r5, #-4]
 800b360:	61aa      	str	r2, [r5, #24]
 800b362:	f884 24f5 	strb.w	r2, [r4, #1269]	; 0x4f5
 800b366:	e7a5      	b.n	800b2b4 <E131Bridge::HandleDmx()+0xe4>
 800b368:	f1ba 0f00 	cmp.w	sl, #0
 800b36c:	f000 8092 	beq.w	800b494 <E131Bridge::HandleDmx()+0x2c4>
 800b370:	f1bb 0f00 	cmp.w	fp, #0
 800b374:	d15c      	bne.n	800b430 <E131Bridge::HandleDmx()+0x260>
 800b376:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b37a:	742b      	strb	r3, [r5, #16]
 800b37c:	e7ae      	b.n	800b2dc <E131Bridge::HandleDmx()+0x10c>
 800b37e:	f1b8 0f00 	cmp.w	r8, #0
 800b382:	d03b      	beq.n	800b3fc <E131Bridge::HandleDmx()+0x22c>
 800b384:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b388:	f240 6b04 	movw	fp, #1540	; 0x604
 800b38c:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800b390:	68e3      	ldr	r3, [r4, #12]
 800b392:	fb0b fb06 	mul.w	fp, fp, r6
 800b396:	616b      	str	r3, [r5, #20]
 800b398:	f7fe f81a 	bl	80093d0 <lightset::Data::Get()>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f50b 7000 	add.w	r0, fp, #512	; 0x200
 800b3a2:	463a      	mov	r2, r7
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	4418      	add	r0, r3
 800b3a8:	9300      	str	r3, [sp, #0]
 800b3aa:	f7ff fc27 	bl	800abfc <memcpy.isra.0>
 800b3ae:	9b00      	ldr	r3, [sp, #0]
 800b3b0:	f50b 6080 	add.w	r0, fp, #1024	; 0x400
 800b3b4:	eb03 020b 	add.w	r2, r3, fp
 800b3b8:	f8c2 7600 	str.w	r7, [r2, #1536]	; 0x600
 800b3bc:	4649      	mov	r1, r9
 800b3be:	463a      	mov	r2, r7
 800b3c0:	4418      	add	r0, r3
 800b3c2:	f7ff fc1b 	bl	800abfc <memcpy.isra.0>
 800b3c6:	e791      	b.n	800b2ec <E131Bridge::HandleDmx()+0x11c>
 800b3c8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b3ca:	2210      	movs	r2, #16
 800b3cc:	61ab      	str	r3, [r5, #24]
 800b3ce:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b3d2:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800b3d6:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800b3da:	f105 001c 	add.w	r0, r5, #28
 800b3de:	f7ff fc0d 	bl	800abfc <memcpy.isra.0>
 800b3e2:	68e3      	ldr	r3, [r4, #12]
 800b3e4:	4631      	mov	r1, r6
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	616b      	str	r3, [r5, #20]
 800b3ea:	f7ff fdde 	bl	800afaa <E131Bridge::UpdateMergeStatus(unsigned int)>
 800b3ee:	463a      	mov	r2, r7
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b3f6:	f7fe f83d 	bl	8009474 <lightset::Data::MergeSourceB(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b3fa:	e777      	b.n	800b2ec <E131Bridge::HandleDmx()+0x11c>
 800b3fc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b3fe:	2210      	movs	r2, #16
 800b400:	f845 3c04 	str.w	r3, [r5, #-4]
 800b404:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b408:	4628      	mov	r0, r5
 800b40a:	742b      	strb	r3, [r5, #16]
 800b40c:	f104 0192 	add.w	r1, r4, #146	; 0x92
 800b410:	f7ff fbf4 	bl	800abfc <memcpy.isra.0>
 800b414:	68e3      	ldr	r3, [r4, #12]
 800b416:	4631      	mov	r1, r6
 800b418:	4620      	mov	r0, r4
 800b41a:	f845 3c08 	str.w	r3, [r5, #-8]
 800b41e:	f7ff fdc4 	bl	800afaa <E131Bridge::UpdateMergeStatus(unsigned int)>
 800b422:	463a      	mov	r2, r7
 800b424:	4649      	mov	r1, r9
 800b426:	4630      	mov	r0, r6
 800b428:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b42a:	f7fd fffa 	bl	8009422 <lightset::Data::MergeSourceA(unsigned int, unsigned char const*, unsigned int, lightset::MergeMode)>
 800b42e:	e75d      	b.n	800b2ec <E131Bridge::HandleDmx()+0x11c>
 800b430:	f1b8 0f00 	cmp.w	r8, #0
 800b434:	d103      	bne.n	800b43e <E131Bridge::HandleDmx()+0x26e>
 800b436:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b43a:	742b      	strb	r3, [r5, #16]
 800b43c:	e7ea      	b.n	800b414 <E131Bridge::HandleDmx()+0x244>
 800b43e:	481b      	ldr	r0, [pc, #108]	; (800b4ac <E131Bridge::HandleDmx()+0x2dc>)
 800b440:	b003      	add	sp, #12
 800b442:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b446:	f008 bc2d 	b.w	8013ca4 <printf>
 800b44a:	4642      	mov	r2, r8
 800b44c:	4651      	mov	r1, sl
 800b44e:	e770      	b.n	800b332 <E131Bridge::HandleDmx()+0x162>
 800b450:	f04f 0300 	mov.w	r3, #0
 800b454:	f884 34f7 	strb.w	r3, [r4, #1271]	; 0x4f7
 800b458:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	f47f af6f 	bne.w	800b340 <E131Bridge::HandleDmx()+0x170>
 800b462:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b466:	f7fd ffb3 	bl	80093d0 <lightset::Data::Get()>
 800b46a:	4632      	mov	r2, r6
 800b46c:	4641      	mov	r1, r8
 800b46e:	f7ff fbcf 	bl	800ac10 <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800b472:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 800b476:	2b00      	cmp	r3, #0
 800b478:	f47f af67 	bne.w	800b34a <E131Bridge::HandleDmx()+0x17a>
 800b47c:	6860      	ldr	r0, [r4, #4]
 800b47e:	4631      	mov	r1, r6
 800b480:	6803      	ldr	r3, [r0, #0]
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	4798      	blx	r3
 800b486:	f04f 0301 	mov.w	r3, #1
 800b48a:	f884 34f8 	strb.w	r3, [r4, #1272]	; 0x4f8
 800b48e:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
 800b492:	e75a      	b.n	800b34a <E131Bridge::HandleDmx()+0x17a>
 800b494:	f1bb 0f00 	cmp.w	fp, #0
 800b498:	d096      	beq.n	800b3c8 <E131Bridge::HandleDmx()+0x1f8>
 800b49a:	f1b8 0f00 	cmp.w	r8, #0
 800b49e:	d0ce      	beq.n	800b43e <E131Bridge::HandleDmx()+0x26e>
 800b4a0:	f894 30eb 	ldrb.w	r3, [r4, #235]	; 0xeb
 800b4a4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
 800b4a8:	e79b      	b.n	800b3e2 <E131Bridge::HandleDmx()+0x212>
 800b4aa:	bf00      	nop
 800b4ac:	0801623c 	stmdaeq	r1, {r2, r3, r4, r5, r9, sp, lr}

0800b4b0 <E131Bridge::IsStatusChanged()>:
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	f890 04f8 	ldrb.w	r0, [r0, #1272]	; 0x4f8
 800b4b6:	b110      	cbz	r0, 800b4be <E131Bridge::IsStatusChanged()+0xe>
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f883 24f8 	strb.w	r2, [r3, #1272]	; 0x4f8
 800b4be:	4770      	bx	lr

0800b4c0 <E131Bridge::Clear(unsigned int)>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	460d      	mov	r5, r1
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	6847      	ldr	r7, [r0, #4]
 800b4c8:	f7fd ff82 	bl	80093d0 <lightset::Data::Get()>
 800b4cc:	f240 6204 	movw	r2, #1540	; 0x604
 800b4d0:	4606      	mov	r6, r0
 800b4d2:	436a      	muls	r2, r5
 800b4d4:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800b4d8:	4430      	add	r0, r6
 800b4da:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b4de:	f7ff fb85 	bl	800abec <memset.constprop.0.isra.0>
 800b4e2:	4432      	add	r2, r6
 800b4e4:	4630      	mov	r0, r6
 800b4e6:	2644      	movs	r6, #68	; 0x44
 800b4e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4ec:	fb06 4605 	mla	r6, r6, r5, r4
 800b4f0:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
 800b4f4:	4639      	mov	r1, r7
 800b4f6:	462a      	mov	r2, r5
 800b4f8:	f7ff fb8a 	bl	800ac10 <lightset::Data::IOutput(LightSet*, unsigned int) const>
 800b4fc:	f896 3512 	ldrb.w	r3, [r6, #1298]	; 0x512
 800b500:	b153      	cbz	r3, 800b518 <E131Bridge::Clear(unsigned int)+0x58>
 800b502:	f896 3552 	ldrb.w	r3, [r6, #1362]	; 0x552
 800b506:	b93b      	cbnz	r3, 800b518 <E131Bridge::Clear(unsigned int)+0x58>
 800b508:	6860      	ldr	r0, [r4, #4]
 800b50a:	4629      	mov	r1, r5
 800b50c:	6803      	ldr	r3, [r0, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	4798      	blx	r3
 800b512:	2301      	movs	r3, #1
 800b514:	f886 3552 	strb.w	r3, [r6, #1362]	; 0x552
 800b518:	2300      	movs	r3, #0
 800b51a:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800b51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b520 <E131Bridge::IsValidRoot()>:
 800b520:	4a0d      	ldr	r2, [pc, #52]	; (800b558 <E131Bridge::IsValidRoot()+0x38>)
 800b522:	b530      	push	{r4, r5, lr}
 800b524:	f100 0380 	add.w	r3, r0, #128	; 0x80
 800b528:	f100 058c 	add.w	r5, r0, #140	; 0x8c
 800b52c:	42ab      	cmp	r3, r5
 800b52e:	d007      	beq.n	800b540 <E131Bridge::IsValidRoot()+0x20>
 800b530:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b534:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b538:	428c      	cmp	r4, r1
 800b53a:	d0f7      	beq.n	800b52c <E131Bridge::IsValidRoot()+0xc>
 800b53c:	2000      	movs	r0, #0
 800b53e:	e008      	b.n	800b552 <E131Bridge::IsValidRoot()+0x32>
 800b540:	f8d0 008e 	ldr.w	r0, [r0, #142]	; 0x8e
 800b544:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800b548:	d004      	beq.n	800b554 <E131Bridge::IsValidRoot()+0x34>
 800b54a:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
 800b54e:	4258      	negs	r0, r3
 800b550:	4158      	adcs	r0, r3
 800b552:	bd30      	pop	{r4, r5, pc}
 800b554:	2001      	movs	r0, #1
 800b556:	e7fc      	b.n	800b552 <E131Bridge::IsValidRoot()+0x32>
 800b558:	080162ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sp, lr}

0800b55c <E131Bridge::IsValidDataPacket()>:
 800b55c:	f890 30f1 	ldrb.w	r3, [r0, #241]	; 0xf1
 800b560:	2b02      	cmp	r3, #2
 800b562:	d10d      	bne.n	800b580 <E131Bridge::IsValidDataPacket()+0x24>
 800b564:	f890 30f2 	ldrb.w	r3, [r0, #242]	; 0xf2
 800b568:	2ba1      	cmp	r3, #161	; 0xa1
 800b56a:	d109      	bne.n	800b580 <E131Bridge::IsValidDataPacket()+0x24>
 800b56c:	f8b0 30f3 	ldrh.w	r3, [r0, #243]	; 0xf3
 800b570:	b933      	cbnz	r3, 800b580 <E131Bridge::IsValidDataPacket()+0x24>
 800b572:	f8b0 00f5 	ldrh.w	r0, [r0, #245]	; 0xf5
 800b576:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800b57a:	4258      	negs	r0, r3
 800b57c:	4158      	adcs	r0, r3
 800b57e:	4770      	bx	lr
 800b580:	2000      	movs	r0, #0
 800b582:	4770      	bx	lr

0800b584 <E131Bridge::Run()>:
 800b584:	b530      	push	{r4, r5, lr}
 800b586:	4601      	mov	r1, r0
 800b588:	4604      	mov	r4, r0
 800b58a:	b085      	sub	sp, #20
 800b58c:	f10d 030e 	add.w	r3, sp, #14
 800b590:	f811 0b7c 	ldrb.w	r0, [r1], #124
 800b594:	f44f 628f 	mov.w	r2, #1144	; 0x478
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	f104 0378 	add.w	r3, r4, #120	; 0x78
 800b59e:	f004 fba5 	bl	800fcec <udp_recv>
 800b5a2:	4b3c      	ldr	r3, [pc, #240]	; (800b694 <E131Bridge::Run()+0x110>)
 800b5a4:	681d      	ldr	r5, [r3, #0]
 800b5a6:	60e5      	str	r5, [r4, #12]
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d13b      	bne.n	800b624 <E131Bridge::Run()+0xa0>
 800b5ac:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800b5b0:	b183      	cbz	r3, 800b5d4 <E131Bridge::Run()+0x50>
 800b5b2:	f894 34f9 	ldrb.w	r3, [r4, #1273]	; 0x4f9
 800b5b6:	bb73      	cbnz	r3, 800b616 <E131Bridge::Run()+0x92>
 800b5b8:	6923      	ldr	r3, [r4, #16]
 800b5ba:	1aed      	subs	r5, r5, r3
 800b5bc:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800b5c0:	429d      	cmp	r5, r3
 800b5c2:	d928      	bls.n	800b616 <E131Bridge::Run()+0x92>
 800b5c4:	6863      	ldr	r3, [r4, #4]
 800b5c6:	b9eb      	cbnz	r3, 800b604 <E131Bridge::Run()+0x80>
 800b5c8:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b5cc:	f023 0302 	bic.w	r3, r3, #2
 800b5d0:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800b5d4:	6963      	ldr	r3, [r4, #20]
 800b5d6:	b12b      	cbz	r3, 800b5e4 <E131Bridge::Run()+0x60>
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f000 f94f 	bl	800b87c <E131Bridge::HandleDmxIn()>
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 f8ca 	bl	800b778 <E131Bridge::SendDiscoveryPacket()>
 800b5e4:	7a23      	ldrb	r3, [r4, #8]
 800b5e6:	b15b      	cbz	r3, 800b600 <E131Bridge::Run()+0x7c>
 800b5e8:	4b2b      	ldr	r3, [pc, #172]	; (800b698 <E131Bridge::Run()+0x114>)
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	6843      	ldr	r3, [r0, #4]
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d006      	beq.n	800b600 <E131Bridge::Run()+0x7c>
 800b5f2:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d049      	beq.n	800b68e <E131Bridge::Run()+0x10a>
 800b5fa:	2103      	movs	r1, #3
 800b5fc:	f007 fe68 	bl	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 800b600:	b005      	add	sp, #20
 800b602:	bd30      	pop	{r4, r5, pc}
 800b604:	f894 34f4 	ldrb.w	r3, [r4, #1268]	; 0x4f4
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1dd      	bne.n	800b5c8 <E131Bridge::Run()+0x44>
 800b60c:	2201      	movs	r2, #1
 800b60e:	4620      	mov	r0, r4
 800b610:	4611      	mov	r1, r2
 800b612:	f7ff fd55 	bl	800b0c0 <E131Bridge::SetNetworkDataLossCondition(bool, bool)>
 800b616:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
 800b61a:	1a9b      	subs	r3, r3, r2
 800b61c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b620:	d3d8      	bcc.n	800b5d4 <E131Bridge::Run()+0x50>
 800b622:	e7d1      	b.n	800b5c8 <E131Bridge::Run()+0x44>
 800b624:	4620      	mov	r0, r4
 800b626:	f7ff ff7b 	bl	800b520 <E131Bridge::IsValidRoot()>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d0e8      	beq.n	800b600 <E131Bridge::Run()+0x7c>
 800b62e:	2300      	movs	r3, #0
 800b630:	f884 34f4 	strb.w	r3, [r4, #1268]	; 0x4f4
 800b634:	f894 34f6 	ldrb.w	r3, [r4, #1270]	; 0x4f6
 800b638:	6125      	str	r5, [r4, #16]
 800b63a:	b15b      	cbz	r3, 800b654 <E131Bridge::Run()+0xd0>
 800b63c:	f894 34f7 	ldrb.w	r3, [r4, #1271]	; 0x4f7
 800b640:	b943      	cbnz	r3, 800b654 <E131Bridge::Run()+0xd0>
 800b642:	f8d4 24fc 	ldr.w	r2, [r4, #1276]	; 0x4fc
 800b646:	1aad      	subs	r5, r5, r2
 800b648:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800b64c:	4295      	cmp	r5, r2
 800b64e:	bf88      	it	hi
 800b650:	f884 34f6 	strbhi.w	r3, [r4, #1270]	; 0x4f6
 800b654:	6863      	ldr	r3, [r4, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d0bc      	beq.n	800b5d4 <E131Bridge::Run()+0x50>
 800b65a:	f8d4 308e 	ldr.w	r3, [r4, #142]	; 0x8e
 800b65e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b662:	ba1a      	rev	r2, r3
 800b664:	d108      	bne.n	800b678 <E131Bridge::Run()+0xf4>
 800b666:	4620      	mov	r0, r4
 800b668:	f7ff ff78 	bl	800b55c <E131Bridge::IsValidDataPacket()>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d0b1      	beq.n	800b5d4 <E131Bridge::Run()+0x50>
 800b670:	4620      	mov	r0, r4
 800b672:	f7ff fdad 	bl	800b1d0 <E131Bridge::HandleDmx()>
 800b676:	e7ad      	b.n	800b5d4 <E131Bridge::Run()+0x50>
 800b678:	2a08      	cmp	r2, #8
 800b67a:	d1ab      	bne.n	800b5d4 <E131Bridge::Run()+0x50>
 800b67c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b684:	d1a6      	bne.n	800b5d4 <E131Bridge::Run()+0x50>
 800b686:	4620      	mov	r0, r4
 800b688:	f000 f972 	bl	800b970 <E131Bridge::HandleSynchronization()>
 800b68c:	e7a2      	b.n	800b5d4 <E131Bridge::Run()+0x50>
 800b68e:	2102      	movs	r1, #2
 800b690:	e7b4      	b.n	800b5fc <E131Bridge::Run()+0x78>
 800b692:	bf00      	nop
 800b694:	2000a97c 	andcs	sl, r0, ip, ror r9
 800b698:	2000a960 	andcs	sl, r0, r0, ror #18

0800b69c <E131Bridge::FillDiscoveryPacket()>:
 800b69c:	2200      	movs	r2, #0
 800b69e:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	333c      	adds	r3, #60	; 0x3c
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	f8a0 3504 	strh.w	r3, [r0, #1284]	; 0x504
 800b6ac:	69c3      	ldr	r3, [r0, #28]
 800b6ae:	f503 618f 	add.w	r1, r3, #1144	; 0x478
 800b6b2:	428b      	cmp	r3, r1
 800b6b4:	d002      	beq.n	800b6bc <E131Bridge::FillDiscoveryPacket()+0x20>
 800b6b6:	f803 2b01 	strb.w	r2, [r3], #1
 800b6ba:	e7fa      	b.n	800b6b2 <E131Bridge::FillDiscoveryPacket()+0x16>
 800b6bc:	69c3      	ldr	r3, [r0, #28]
 800b6be:	492d      	ldr	r1, [pc, #180]	; (800b774 <E131Bridge::FillDiscoveryPacket()+0xd8>)
 800b6c0:	701a      	strb	r2, [r3, #0]
 800b6c2:	2210      	movs	r2, #16
 800b6c4:	705a      	strb	r2, [r3, #1]
 800b6c6:	1d1a      	adds	r2, r3, #4
 800b6c8:	3310      	adds	r3, #16
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d004      	beq.n	800b6d8 <E131Bridge::FillDiscoveryPacket()+0x3c>
 800b6ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6d2:	f802 4b01 	strb.w	r4, [r2], #1
 800b6d6:	e7f8      	b.n	800b6ca <E131Bridge::FillDiscoveryPacket()+0x2e>
 800b6d8:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800b6dc:	69c3      	ldr	r3, [r0, #28]
 800b6de:	3234      	adds	r2, #52	; 0x34
 800b6e0:	0052      	lsls	r2, r2, #1
 800b6e2:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800b6e6:	ba52      	rev16	r2, r2
 800b6e8:	821a      	strh	r2, [r3, #16]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	749a      	strb	r2, [r3, #18]
 800b6ee:	74da      	strb	r2, [r3, #19]
 800b6f0:	751a      	strb	r2, [r3, #20]
 800b6f2:	2208      	movs	r2, #8
 800b6f4:	f100 0124 	add.w	r1, r0, #36	; 0x24
 800b6f8:	755a      	strb	r2, [r3, #21]
 800b6fa:	f100 0434 	add.w	r4, r0, #52	; 0x34
 800b6fe:	3316      	adds	r3, #22
 800b700:	42a1      	cmp	r1, r4
 800b702:	d004      	beq.n	800b70e <E131Bridge::FillDiscoveryPacket()+0x72>
 800b704:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b708:	f803 2b01 	strb.w	r2, [r3], #1
 800b70c:	e7f8      	b.n	800b700 <E131Bridge::FillDiscoveryPacket()+0x64>
 800b70e:	f890 250a 	ldrb.w	r2, [r0, #1290]	; 0x50a
 800b712:	69c3      	ldr	r3, [r0, #28]
 800b714:	3229      	adds	r2, #41	; 0x29
 800b716:	0052      	lsls	r2, r2, #1
 800b718:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800b71c:	ba52      	rev16	r2, r2
 800b71e:	84da      	strh	r2, [r3, #38]	; 0x26
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800b726:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800b72a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800b72e:	2202      	movs	r2, #2
 800b730:	332c      	adds	r3, #44	; 0x2c
 800b732:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b736:	f100 0474 	add.w	r4, r0, #116	; 0x74
 800b73a:	42a1      	cmp	r1, r4
 800b73c:	d004      	beq.n	800b748 <E131Bridge::FillDiscoveryPacket()+0xac>
 800b73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b742:	f803 2b01 	strb.w	r2, [r3], #1
 800b746:	e7f8      	b.n	800b73a <E131Bridge::FillDiscoveryPacket()+0x9e>
 800b748:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800b74c:	69c2      	ldr	r2, [r0, #28]
 800b74e:	3304      	adds	r3, #4
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800b756:	ba5b      	rev16	r3, r3
 800b758:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
 800b75c:	2300      	movs	r3, #0
 800b75e:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 800b762:	f882 3073 	strb.w	r3, [r2, #115]	; 0x73
 800b766:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
 800b76a:	2301      	movs	r3, #1
 800b76c:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
 800b770:	bd10      	pop	{r4, pc}
 800b772:	bf00      	nop
 800b774:	080162ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sp, lr}

0800b778 <E131Bridge::SendDiscoveryPacket()>:
 800b778:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b77a:	f242 710f 	movw	r1, #9999	; 0x270f
 800b77e:	68c2      	ldr	r2, [r0, #12]
 800b780:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
 800b784:	4604      	mov	r4, r0
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	428b      	cmp	r3, r1
 800b78a:	d924      	bls.n	800b7d6 <E131Bridge::SendDiscoveryPacket()+0x5e>
 800b78c:	f890 350a 	ldrb.w	r3, [r0, #1290]	; 0x50a
 800b790:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
 800b794:	b1ab      	cbz	r3, 800b7c2 <E131Bridge::SendDiscoveryPacket()+0x4a>
 800b796:	2500      	movs	r5, #0
 800b798:	462e      	mov	r6, r5
 800b79a:	2300      	movs	r3, #0
 800b79c:	4629      	mov	r1, r5
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f10d 020e 	add.w	r2, sp, #14
 800b7a4:	f7ff fbea 	bl	800af7c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800b7a8:	b140      	cbz	r0, 800b7bc <E131Bridge::SendDiscoveryPacket()+0x44>
 800b7aa:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b7ae:	69e2      	ldr	r2, [r4, #28]
 800b7b0:	f106 013c 	add.w	r1, r6, #60	; 0x3c
 800b7b4:	ba5b      	rev16	r3, r3
 800b7b6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800b7ba:	3601      	adds	r6, #1
 800b7bc:	3501      	adds	r5, #1
 800b7be:	2d04      	cmp	r5, #4
 800b7c0:	d1eb      	bne.n	800b79a <E131Bridge::SendDiscoveryPacket()+0x22>
 800b7c2:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800b7c6:	f8b4 2504 	ldrh.w	r2, [r4, #1284]	; 0x504
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	69e1      	ldr	r1, [r4, #28]
 800b7ce:	6a23      	ldr	r3, [r4, #32]
 800b7d0:	7820      	ldrb	r0, [r4, #0]
 800b7d2:	f004 fae7 	bl	800fda4 <udp_send>
 800b7d6:	b004      	add	sp, #16
 800b7d8:	bd70      	pop	{r4, r5, r6, pc}

0800b7da <memcpy.isra.0>:
 800b7da:	3801      	subs	r0, #1
 800b7dc:	440a      	add	r2, r1
 800b7de:	4291      	cmp	r1, r2
 800b7e0:	d004      	beq.n	800b7ec <memcpy.isra.0+0x12>
 800b7e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7e6:	f800 3f01 	strb.w	r3, [r0, #1]!
 800b7ea:	e7f8      	b.n	800b7de <memcpy.isra.0+0x4>
 800b7ec:	4770      	bx	lr
	...

0800b7f0 <E131Bridge::FillDataPacket()>:
 800b7f0:	b570      	push	{r4, r5, r6, lr}
 800b7f2:	2400      	movs	r4, #0
 800b7f4:	2610      	movs	r6, #16
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	6980      	ldr	r0, [r0, #24]
 800b7fa:	220c      	movs	r2, #12
 800b7fc:	7046      	strb	r6, [r0, #1]
 800b7fe:	7004      	strb	r4, [r0, #0]
 800b800:	7084      	strb	r4, [r0, #2]
 800b802:	70c4      	strb	r4, [r0, #3]
 800b804:	491c      	ldr	r1, [pc, #112]	; (800b878 <E131Bridge::FillDataPacket()+0x88>)
 800b806:	3004      	adds	r0, #4
 800b808:	f7ff ffe7 	bl	800b7da <memcpy.isra.0>
 800b80c:	2304      	movs	r3, #4
 800b80e:	4632      	mov	r2, r6
 800b810:	2602      	movs	r6, #2
 800b812:	69a8      	ldr	r0, [r5, #24]
 800b814:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800b818:	7543      	strb	r3, [r0, #21]
 800b81a:	7484      	strb	r4, [r0, #18]
 800b81c:	74c4      	strb	r4, [r0, #19]
 800b81e:	7504      	strb	r4, [r0, #20]
 800b820:	3016      	adds	r0, #22
 800b822:	f7ff ffda 	bl	800b7da <memcpy.isra.0>
 800b826:	69a8      	ldr	r0, [r5, #24]
 800b828:	2240      	movs	r2, #64	; 0x40
 800b82a:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
 800b82e:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
 800b832:	f880 402a 	strb.w	r4, [r0, #42]	; 0x2a
 800b836:	f880 602b 	strb.w	r6, [r0, #43]	; 0x2b
 800b83a:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800b83e:	302c      	adds	r0, #44	; 0x2c
 800b840:	f7ff ffcb 	bl	800b7da <memcpy.isra.0>
 800b844:	22a1      	movs	r2, #161	; 0xa1
 800b846:	69ab      	ldr	r3, [r5, #24]
 800b848:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
 800b84c:	f883 406d 	strb.w	r4, [r3, #109]	; 0x6d
 800b850:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800b854:	69ab      	ldr	r3, [r5, #24]
 800b856:	f883 6075 	strb.w	r6, [r3, #117]	; 0x75
 800b85a:	69ab      	ldr	r3, [r5, #24]
 800b85c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 800b860:	2201      	movs	r2, #1
 800b862:	69ab      	ldr	r3, [r5, #24]
 800b864:	f883 4077 	strb.w	r4, [r3, #119]	; 0x77
 800b868:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
 800b86c:	f883 4079 	strb.w	r4, [r3, #121]	; 0x79
 800b870:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 800b874:	bd70      	pop	{r4, r5, r6, pc}
 800b876:	bf00      	nop
 800b878:	080162ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r9, sp, lr}

0800b87c <E131Bridge::HandleDmxIn()>:
 800b87c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b880:	4604      	mov	r4, r0
 800b882:	4605      	mov	r5, r0
 800b884:	2600      	movs	r6, #0
 800b886:	4f39      	ldr	r7, [pc, #228]	; (800b96c <E131Bridge::HandleDmxIn()+0xf0>)
 800b888:	f895 3622 	ldrb.w	r3, [r5, #1570]	; 0x622
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d053      	beq.n	800b938 <E131Bridge::HandleDmxIn()+0xbc>
 800b890:	6960      	ldr	r0, [r4, #20]
 800b892:	4631      	mov	r1, r6
 800b894:	6803      	ldr	r3, [r0, #0]
 800b896:	aa02      	add	r2, sp, #8
 800b898:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800b89c:	ab03      	add	r3, sp, #12
 800b89e:	47c0      	blx	r8
 800b8a0:	4601      	mov	r1, r0
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d050      	beq.n	800b948 <E131Bridge::HandleDmxIn()+0xcc>
 800b8a6:	9b02      	ldr	r3, [sp, #8]
 800b8a8:	69a0      	ldr	r0, [r4, #24]
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 800b8b0:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800b8b4:	ba52      	rev16	r2, r2
 800b8b6:	8202      	strh	r2, [r0, #16]
 800b8b8:	f103 0257 	add.w	r2, r3, #87	; 0x57
 800b8bc:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800b8c0:	ba52      	rev16	r2, r2
 800b8c2:	84c2      	strh	r2, [r0, #38]	; 0x26
 800b8c4:	f895 2629 	ldrb.w	r2, [r5, #1577]	; 0x629
 800b8c8:	330a      	adds	r3, #10
 800b8ca:	f880 206c 	strb.w	r2, [r0, #108]	; 0x6c
 800b8ce:	f895 2628 	ldrb.w	r2, [r5, #1576]	; 0x628
 800b8d2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800b8d6:	1c50      	adds	r0, r2, #1
 800b8d8:	f885 0628 	strb.w	r0, [r5, #1576]	; 0x628
 800b8dc:	69a0      	ldr	r0, [r4, #24]
 800b8de:	ba5b      	rev16	r3, r3
 800b8e0:	f880 206f 	strb.w	r2, [r0, #111]	; 0x6f
 800b8e4:	f8b5 2620 	ldrh.w	r2, [r5, #1568]	; 0x620
 800b8e8:	69a0      	ldr	r0, [r4, #24]
 800b8ea:	ba52      	rev16	r2, r2
 800b8ec:	f8a0 2071 	strh.w	r2, [r0, #113]	; 0x71
 800b8f0:	f8a0 3073 	strh.w	r3, [r0, #115]	; 0x73
 800b8f4:	9a02      	ldr	r2, [sp, #8]
 800b8f6:	307d      	adds	r0, #125	; 0x7d
 800b8f8:	f7ff ff6f 	bl	800b7da <memcpy.isra.0>
 800b8fc:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800b900:	69a1      	ldr	r1, [r4, #24]
 800b902:	ba53      	rev16	r3, r2
 800b904:	f8a1 307b 	strh.w	r3, [r1, #123]	; 0x7b
 800b908:	f44f 53ae 	mov.w	r3, #5568	; 0x15c0
 800b90c:	327d      	adds	r2, #125	; 0x7d
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 800b914:	b292      	uxth	r2, r2
 800b916:	7820      	ldrb	r0, [r4, #0]
 800b918:	f004 fa44 	bl	800fda4 <udp_send>
 800b91c:	2301      	movs	r3, #1
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	40b3      	lsls	r3, r6
 800b922:	ea33 0102 	bics.w	r1, r3, r2
 800b926:	d007      	beq.n	800b938 <E131Bridge::HandleDmxIn()+0xbc>
 800b928:	4313      	orrs	r3, r2
 800b92a:	603b      	str	r3, [r7, #0]
 800b92c:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b930:	f043 0301 	orr.w	r3, r3, #1
 800b934:	f884 350d 	strb.w	r3, [r4, #1293]	; 0x50d
 800b938:	3601      	adds	r6, #1
 800b93a:	2e04      	cmp	r6, #4
 800b93c:	f105 050c 	add.w	r5, r5, #12
 800b940:	d1a2      	bne.n	800b888 <E131Bridge::HandleDmxIn()+0xc>
 800b942:	b004      	add	sp, #16
 800b944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1f4      	bne.n	800b938 <E131Bridge::HandleDmxIn()+0xbc>
 800b94e:	2301      	movs	r3, #1
 800b950:	fa03 f206 	lsl.w	r2, r3, r6
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	ea23 0302 	bic.w	r3, r3, r2
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d1eb      	bne.n	800b938 <E131Bridge::HandleDmxIn()+0xbc>
 800b960:	f894 350d 	ldrb.w	r3, [r4, #1293]	; 0x50d
 800b964:	f023 0301 	bic.w	r3, r3, #1
 800b968:	e7e4      	b.n	800b934 <E131Bridge::HandleDmxIn()+0xb8>
 800b96a:	bf00      	nop
 800b96c:	20001910 	andcs	r1, r0, r0, lsl r9

0800b970 <E131Bridge::HandleSynchronization()>:
 800b970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b974:	f8b0 30a9 	ldrh.w	r3, [r0, #169]	; 0xa9
 800b978:	f8b0 2506 	ldrh.w	r2, [r0, #1286]	; 0x506
 800b97c:	ba5b      	rev16	r3, r3
 800b97e:	b29b      	uxth	r3, r3
 800b980:	429a      	cmp	r2, r3
 800b982:	4604      	mov	r4, r0
 800b984:	d00a      	beq.n	800b99c <E131Bridge::HandleSynchronization()+0x2c>
 800b986:	f8b0 2508 	ldrh.w	r2, [r0, #1288]	; 0x508
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d006      	beq.n	800b99c <E131Bridge::HandleSynchronization()+0x2c>
 800b98e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b992:	4b23      	ldr	r3, [pc, #140]	; (800ba20 <E131Bridge::HandleSynchronization()+0xb0>)
 800b994:	2102      	movs	r1, #2
 800b996:	6818      	ldr	r0, [r3, #0]
 800b998:	f007 bc9a 	b.w	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 800b99c:	2500      	movs	r5, #0
 800b99e:	4627      	mov	r7, r4
 800b9a0:	46a9      	mov	r9, r5
 800b9a2:	68e3      	ldr	r3, [r4, #12]
 800b9a4:	4e1f      	ldr	r6, [pc, #124]	; (800ba24 <E131Bridge::HandleSynchronization()+0xb4>)
 800b9a6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 800ba28 <E131Bridge::HandleSynchronization()+0xb8>
 800b9aa:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 800b9ae:	f897 3512 	ldrb.w	r3, [r7, #1298]	; 0x512
 800b9b2:	b323      	cbz	r3, 800b9fe <E131Bridge::HandleSynchronization()+0x8e>
 800b9b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b9b8:	6860      	ldr	r0, [r4, #4]
 800b9ba:	07da      	lsls	r2, r3, #31
 800b9bc:	bf5c      	itt	pl
 800b9be:	2301      	movpl	r3, #1
 800b9c0:	f8c8 3000 	strpl.w	r3, [r8]
 800b9c4:	6803      	ldr	r3, [r0, #0]
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800b9cc:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 800b9d0:	f8d6 3600 	ldr.w	r3, [r6, #1536]	; 0x600
 800b9d4:	47d0      	blx	sl
 800b9d6:	f897 3552 	ldrb.w	r3, [r7, #1362]	; 0x552
 800b9da:	b93b      	cbnz	r3, 800b9ec <E131Bridge::HandleSynchronization()+0x7c>
 800b9dc:	6860      	ldr	r0, [r4, #4]
 800b9de:	4629      	mov	r1, r5
 800b9e0:	6803      	ldr	r3, [r0, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	4798      	blx	r3
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	f887 3552 	strb.w	r3, [r7, #1362]	; 0x552
 800b9ec:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f0:	f8c6 9600 	str.w	r9, [r6, #1536]	; 0x600
 800b9f4:	07db      	lsls	r3, r3, #31
 800b9f6:	bf5c      	itt	pl
 800b9f8:	2301      	movpl	r3, #1
 800b9fa:	f8c8 3000 	strpl.w	r3, [r8]
 800b9fe:	3501      	adds	r5, #1
 800ba00:	2d04      	cmp	r5, #4
 800ba02:	f107 0744 	add.w	r7, r7, #68	; 0x44
 800ba06:	f206 6604 	addw	r6, r6, #1540	; 0x604
 800ba0a:	d1d0      	bne.n	800b9ae <E131Bridge::HandleSynchronization()+0x3e>
 800ba0c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800ba0e:	b120      	cbz	r0, 800ba1a <E131Bridge::HandleSynchronization()+0xaa>
 800ba10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba14:	6803      	ldr	r3, [r0, #0]
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	4718      	bx	r3
 800ba1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1e:	bf00      	nop
 800ba20:	2000a960 	andcs	sl, r0, r0, ror #18
 800ba24:	200000ec 	andcs	r0, r0, ip, ror #1
 800ba28:	200000e8 	andcs	r0, r0, r8, ror #1

0800ba2c <E131Bridge::Print()>:
 800ba2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba30:	2500      	movs	r5, #0
 800ba32:	4604      	mov	r4, r0
 800ba34:	b08c      	sub	sp, #48	; 0x30
 800ba36:	a902      	add	r1, sp, #8
 800ba38:	3024      	adds	r0, #36	; 0x24
 800ba3a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800ba3e:	f000 f8b3 	bl	800bba8 <uuid_unparse>
 800ba42:	482c      	ldr	r0, [pc, #176]	; (800baf4 <E131Bridge::Print()+0xc8>)
 800ba44:	f008 f92e 	bl	8013ca4 <printf>
 800ba48:	4b2b      	ldr	r3, [pc, #172]	; (800baf8 <E131Bridge::Print()+0xcc>)
 800ba4a:	482c      	ldr	r0, [pc, #176]	; (800bafc <E131Bridge::Print()+0xd0>)
 800ba4c:	7819      	ldrb	r1, [r3, #0]
 800ba4e:	785a      	ldrb	r2, [r3, #1]
 800ba50:	f008 f928 	bl	8013ca4 <printf>
 800ba54:	482a      	ldr	r0, [pc, #168]	; (800bb00 <E131Bridge::Print()+0xd4>)
 800ba56:	a902      	add	r1, sp, #8
 800ba58:	f008 f924 	bl	8013ca4 <printf>
 800ba5c:	f894 350b 	ldrb.w	r3, [r4, #1291]	; 0x50b
 800ba60:	b303      	cbz	r3, 800baa4 <E131Bridge::Print()+0x78>
 800ba62:	4828      	ldr	r0, [pc, #160]	; (800bb04 <E131Bridge::Print()+0xd8>)
 800ba64:	f008 f91e 	bl	8013ca4 <printf>
 800ba68:	4e27      	ldr	r6, [pc, #156]	; (800bb08 <E131Bridge::Print()+0xdc>)
 800ba6a:	4f28      	ldr	r7, [pc, #160]	; (800bb0c <E131Bridge::Print()+0xe0>)
 800ba6c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800bb10 <E131Bridge::Print()+0xe4>
 800ba70:	2301      	movs	r3, #1
 800ba72:	4629      	mov	r1, r5
 800ba74:	4620      	mov	r0, r4
 800ba76:	f10d 0206 	add.w	r2, sp, #6
 800ba7a:	f7ff fa7f 	bl	800af7c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800ba7e:	b170      	cbz	r0, 800ba9e <E131Bridge::Print()+0x72>
 800ba80:	2344      	movs	r3, #68	; 0x44
 800ba82:	436b      	muls	r3, r5
 800ba84:	f204 524c 	addw	r2, r4, #1356	; 0x54c
 800ba88:	58d3      	ldr	r3, [r2, r3]
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	bf0c      	ite	eq
 800ba90:	4633      	moveq	r3, r6
 800ba92:	463b      	movne	r3, r7
 800ba94:	4640      	mov	r0, r8
 800ba96:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba9a:	f008 f903 	bl	8013ca4 <printf>
 800ba9e:	3501      	adds	r5, #1
 800baa0:	2d04      	cmp	r5, #4
 800baa2:	d1e5      	bne.n	800ba70 <E131Bridge::Print()+0x44>
 800baa4:	f894 350a 	ldrb.w	r3, [r4, #1290]	; 0x50a
 800baa8:	b1d3      	cbz	r3, 800bae0 <E131Bridge::Print()+0xb4>
 800baaa:	481a      	ldr	r0, [pc, #104]	; (800bb14 <E131Bridge::Print()+0xe8>)
 800baac:	f008 f8fa 	bl	8013ca4 <printf>
 800bab0:	2500      	movs	r5, #0
 800bab2:	4e19      	ldr	r6, [pc, #100]	; (800bb18 <E131Bridge::Print()+0xec>)
 800bab4:	2300      	movs	r3, #0
 800bab6:	4629      	mov	r1, r5
 800bab8:	4620      	mov	r0, r4
 800baba:	f10d 0206 	add.w	r2, sp, #6
 800babe:	f7ff fa5d 	bl	800af7c <E131Bridge::GetUniverse(unsigned int, unsigned short&, lightset::PortDir) const>
 800bac2:	b150      	cbz	r0, 800bada <E131Bridge::Print()+0xae>
 800bac4:	230c      	movs	r3, #12
 800bac6:	436b      	muls	r3, r5
 800bac8:	f204 6229 	addw	r2, r4, #1577	; 0x629
 800bacc:	5cd3      	ldrb	r3, [r2, r3]
 800bace:	4629      	mov	r1, r5
 800bad0:	4630      	mov	r0, r6
 800bad2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bad6:	f008 f8e5 	bl	8013ca4 <printf>
 800bada:	3501      	adds	r5, #1
 800badc:	2d04      	cmp	r5, #4
 800bade:	d1e9      	bne.n	800bab4 <E131Bridge::Print()+0x88>
 800bae0:	f894 34fb 	ldrb.w	r3, [r4, #1275]	; 0x4fb
 800bae4:	b113      	cbz	r3, 800baec <E131Bridge::Print()+0xc0>
 800bae6:	480d      	ldr	r0, [pc, #52]	; (800bb1c <E131Bridge::Print()+0xf0>)
 800bae8:	f008 f8dc 	bl	8013ca4 <printf>
 800baec:	b00c      	add	sp, #48	; 0x30
 800baee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf2:	bf00      	nop
 800baf4:	08016269 	stmdaeq	r1, {r0, r3, r5, r6, r9, sp, lr}
 800baf8:	080162f8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r9, sp, lr}
 800bafc:	08016271 	stmdaeq	r1, {r0, r4, r5, r6, r9, sp, lr}
 800bb00:	08016284 	stmdaeq	r1, {r2, r7, r9, sp, lr}
 800bb04:	08016001 	stmdaeq	r1, {r0, sp, lr}
 800bb08:	08015fa5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, sl, fp, ip, lr}
 800bb0c:	08015fa9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, sl, fp, ip, lr}
 800bb10:	08016294 	stmdaeq	r1, {r2, r4, r7, r9, sp, lr}
 800bb14:	08016039 	stmdaeq	r1, {r0, r3, r4, r5, sp, lr}
 800bb18:	080162b3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, sp, lr}
 800bb1c:	080162d2 	stmdaeq	r1, {r1, r4, r6, r7, r9, sp, lr}

0800bb20 <uuid_unparse_x>:
 800bb20:	4603      	mov	r3, r0
 800bb22:	b530      	push	{r4, r5, lr}
 800bb24:	4608      	mov	r0, r1
 800bb26:	4611      	mov	r1, r2
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	b08f      	sub	sp, #60	; 0x3c
 800bb2c:	ba12      	rev	r2, r2
 800bb2e:	920a      	str	r2, [sp, #40]	; 0x28
 800bb30:	889a      	ldrh	r2, [r3, #4]
 800bb32:	891c      	ldrh	r4, [r3, #8]
 800bb34:	ba52      	rev16	r2, r2
 800bb36:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800bb3a:	88da      	ldrh	r2, [r3, #6]
 800bb3c:	ba64      	rev16	r4, r4
 800bb3e:	ba52      	rev16	r2, r2
 800bb40:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 800bb44:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
 800bb48:	f103 020a 	add.w	r2, r3, #10
 800bb4c:	f10d 0432 	add.w	r4, sp, #50	; 0x32
 800bb50:	3310      	adds	r3, #16
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d122      	bne.n	800bb9c <uuid_unparse_x+0x7c>
 800bb56:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 800bb5a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 800bb5e:	9208      	str	r2, [sp, #32]
 800bb60:	f89d 2036 	ldrb.w	r2, [sp, #54]	; 0x36
 800bb64:	0a1b      	lsrs	r3, r3, #8
 800bb66:	9207      	str	r2, [sp, #28]
 800bb68:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800bb6c:	9301      	str	r3, [sp, #4]
 800bb6e:	9206      	str	r2, [sp, #24]
 800bb70:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800bb74:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800bb78:	9205      	str	r2, [sp, #20]
 800bb7a:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	9204      	str	r2, [sp, #16]
 800bb82:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 800bb86:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800bb8a:	9203      	str	r2, [sp, #12]
 800bb8c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 800bb90:	9202      	str	r2, [sp, #8]
 800bb92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb94:	f008 f896 	bl	8013cc4 <sprintf>
 800bb98:	b00f      	add	sp, #60	; 0x3c
 800bb9a:	bd30      	pop	{r4, r5, pc}
 800bb9c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bba0:	f804 5b01 	strb.w	r5, [r4], #1
 800bba4:	e7d5      	b.n	800bb52 <uuid_unparse_x+0x32>
	...

0800bba8 <uuid_unparse>:
 800bba8:	4a01      	ldr	r2, [pc, #4]	; (800bbb0 <uuid_unparse+0x8>)
 800bbaa:	f7ff bfb9 	b.w	800bb20 <uuid_unparse_x>
 800bbae:	bf00      	nop
 800bbb0:	080162fa 	stmdaeq	r1, {r1, r3, r4, r5, r6, r7, r9, sp, lr}

0800bbb4 <WS28xxDmx::GetDmxStartAddress()>:
 800bbb4:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 800bbb6:	4770      	bx	lr

0800bbb8 <WS28xxDmx::GetDmxFootprint()>:
 800bbb8:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800bbba:	4770      	bx	lr

0800bbbc <WS28xxDmx::~WS28xxDmx()>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	4b06      	ldr	r3, [pc, #24]	; (800bbd8 <WS28xxDmx::~WS28xxDmx()+0x1c>)
 800bbc0:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	6003      	str	r3, [r0, #0]
 800bbc6:	b12d      	cbz	r5, 800bbd4 <WS28xxDmx::~WS28xxDmx()+0x18>
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f001 f94b 	bl	800ce64 <WS28xx::~WS28xx()>
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f007 fc5e 	bl	8013490 <operator delete(void*)>
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	08016334 	stmdaeq	r1, {r2, r4, r5, r8, r9, sp, lr}

0800bbdc <WS28xxDmx::~WS28xxDmx()>:
 800bbdc:	b510      	push	{r4, lr}
 800bbde:	4604      	mov	r4, r0
 800bbe0:	f7ff ffec 	bl	800bbbc <WS28xxDmx::~WS28xxDmx()>
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f007 fc53 	bl	8013490 <operator delete(void*)>
 800bbea:	4620      	mov	r0, r4
 800bbec:	bd10      	pop	{r4, pc}

0800bbee <WS28xxDmx::Blackout(bool)>:
 800bbee:	b538      	push	{r3, r4, r5, lr}
 800bbf0:	4605      	mov	r5, r0
 800bbf2:	460c      	mov	r4, r1
 800bbf4:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
 800bbf8:	f009 f95e 	bl	8014eb8 <gd32_spi_dma_tx_is_active()>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d1fb      	bne.n	800bbf8 <WS28xxDmx::Blackout(bool)+0xa>
 800bc00:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800bc02:	b11c      	cbz	r4, 800bc0c <WS28xxDmx::Blackout(bool)+0x1e>
 800bc04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc08:	f001 baba 	b.w	800d180 <WS28xx::Blackout()>
 800bc0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc10:	f001 b92e 	b.w	800ce70 <WS28xx::Update()>

0800bc14 <WS28xxDmx::Start(unsigned int)>:
 800bc14:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bc18:	b93b      	cbnz	r3, 800bc2a <WS28xxDmx::Start(unsigned int)+0x16>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800bc20:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800bc22:	b110      	cbz	r0, 800bc2a <WS28xxDmx::Start(unsigned int)+0x16>
 800bc24:	6803      	ldr	r3, [r0, #0]
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	4718      	bx	r3
 800bc2a:	4770      	bx	lr

0800bc2c <WS28xxDmx::SetDmxStartAddress(unsigned short)>:
 800bc2c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
 800bc2e:	b508      	push	{r3, lr}
 800bc30:	428a      	cmp	r2, r1
 800bc32:	d101      	bne.n	800bc38 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xc>
 800bc34:	2001      	movs	r0, #1
 800bc36:	bd08      	pop	{r3, pc}
 800bc38:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 800bc3a:	440a      	add	r2, r1
 800bc3c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800bc40:	dc0b      	bgt.n	800bc5a <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800bc42:	1e4a      	subs	r2, r1, #1
 800bc44:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800bc48:	d207      	bcs.n	800bc5a <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x2e>
 800bc4a:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800bc4c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d0f0      	beq.n	800bc34 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800bc52:	6803      	ldr	r3, [r0, #0]
 800bc54:	69db      	ldr	r3, [r3, #28]
 800bc56:	4798      	blx	r3
 800bc58:	e7ec      	b.n	800bc34 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0x8>
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	e7eb      	b.n	800bc36 <WS28xxDmx::SetDmxStartAddress(unsigned short)+0xa>

0800bc5e <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)>:
 800bc5e:	4603      	mov	r3, r0
 800bc60:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 800bc62:	4288      	cmp	r0, r1
 800bc64:	f04f 0000 	mov.w	r0, #0
 800bc68:	d30f      	bcc.n	800bc8a <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x2c>
 800bc6a:	7090      	strb	r0, [r2, #2]
 800bc6c:	6a1b      	ldr	r3, [r3, #32]
 800bc6e:	fbb1 f0f3 	udiv	r0, r1, r3
 800bc72:	fb03 1110 	mls	r1, r3, r0, r1
 800bc76:	2903      	cmp	r1, #3
 800bc78:	d80e      	bhi.n	800bc98 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x3a>
 800bc7a:	e8df f001 	tbb	[pc, r1]
 800bc7e:	0d0a0702 	stceq	7, cr0, [sl, #-8]
 800bc82:	f240 2305 	movw	r3, #517	; 0x205
 800bc86:	2001      	movs	r0, #1
 800bc88:	8013      	strh	r3, [r2, #0]
 800bc8a:	4770      	bx	lr
 800bc8c:	f240 2306 	movw	r3, #518	; 0x206
 800bc90:	e7f9      	b.n	800bc86 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800bc92:	f240 2307 	movw	r3, #519	; 0x207
 800bc96:	e7f6      	b.n	800bc86 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>
 800bc98:	f240 2312 	movw	r3, #530	; 0x212
 800bc9c:	e7f3      	b.n	800bc86 <WS28xxDmx::GetSlotInfo(unsigned short, lightset::SlotInfo&)+0x28>

0800bc9e <WS28xxDmx::Stop(unsigned int)>:
 800bc9e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bca2:	b510      	push	{r4, lr}
 800bca4:	4604      	mov	r4, r0
 800bca6:	b193      	cbz	r3, 800bcce <WS28xxDmx::Stop(unsigned int)+0x30>
 800bca8:	2300      	movs	r3, #0
 800bcaa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800bcae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bcb0:	b133      	cbz	r3, 800bcc0 <WS28xxDmx::Stop(unsigned int)+0x22>
 800bcb2:	f009 f901 	bl	8014eb8 <gd32_spi_dma_tx_is_active()>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d1fb      	bne.n	800bcb2 <WS28xxDmx::Stop(unsigned int)+0x14>
 800bcba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800bcbc:	f001 fa60 	bl	800d180 <WS28xx::Blackout()>
 800bcc0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800bcc2:	b120      	cbz	r0, 800bcce <WS28xxDmx::Stop(unsigned int)+0x30>
 800bcc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcc8:	6803      	ldr	r3, [r0, #0]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	4718      	bx	r3
 800bcce:	bd10      	pop	{r4, pc}

0800bcd0 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	b085      	sub	sp, #20
 800bcd6:	4606      	mov	r6, r0
 800bcd8:	4690      	mov	r8, r2
 800bcda:	4699      	mov	r9, r3
 800bcdc:	9103      	str	r1, [sp, #12]
 800bcde:	f009 f8eb 	bl	8014eb8 <gd32_spi_dma_tx_is_active()>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d16f      	bne.n	800bdc6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf6>
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	6972      	ldr	r2, [r6, #20]
 800bcea:	f003 0103 	and.w	r1, r3, #3
 800bcee:	6a33      	ldr	r3, [r6, #32]
 800bcf0:	2902      	cmp	r1, #2
 800bcf2:	fbb9 f7f3 	udiv	r7, r9, r3
 800bcf6:	d02c      	beq.n	800bd52 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x82>
 800bcf8:	2903      	cmp	r1, #3
 800bcfa:	d031      	beq.n	800bd60 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x90>
 800bcfc:	2901      	cmp	r1, #1
 800bcfe:	6875      	ldr	r5, [r6, #4]
 800bd00:	d028      	beq.n	800bd54 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x84>
 800bd02:	4297      	cmp	r7, r2
 800bd04:	bf28      	it	cs
 800bd06:	4617      	movcs	r7, r2
 800bd08:	4295      	cmp	r5, r2
 800bd0a:	d92b      	bls.n	800bd64 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x94>
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	8df4      	ldrh	r4, [r6, #46]	; 0x2e
 800bd10:	3c01      	subs	r4, #1
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	4444      	add	r4, r8
 800bd16:	d12d      	bne.n	800bd74 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa4>
 800bd18:	42af      	cmp	r7, r5
 800bd1a:	d94a      	bls.n	800bdb2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe2>
 800bd1c:	eba4 0308 	sub.w	r3, r4, r8
 800bd20:	4599      	cmp	r9, r3
 800bd22:	d946      	bls.n	800bdb2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe2>
 800bd24:	f04f 0b00 	mov.w	fp, #0
 800bd28:	69b3      	ldr	r3, [r6, #24]
 800bd2a:	f894 f000 	pld	[r4]
 800bd2e:	fb03 fa05 	mul.w	sl, r3, r5
 800bd32:	69b3      	ldr	r3, [r6, #24]
 800bd34:	fa1f f18b 	uxth.w	r1, fp
 800bd38:	428b      	cmp	r3, r1
 800bd3a:	f10b 0b01 	add.w	fp, fp, #1
 800bd3e:	d914      	bls.n	800bd6a <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x9a>
 800bd40:	78a2      	ldrb	r2, [r4, #2]
 800bd42:	7863      	ldrb	r3, [r4, #1]
 800bd44:	9200      	str	r2, [sp, #0]
 800bd46:	7822      	ldrb	r2, [r4, #0]
 800bd48:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800bd4a:	4451      	add	r1, sl
 800bd4c:	f001 f8fd 	bl	800cf4a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800bd50:	e7ef      	b.n	800bd32 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x62>
 800bd52:	68b5      	ldr	r5, [r6, #8]
 800bd54:	442f      	add	r7, r5
 800bd56:	4297      	cmp	r7, r2
 800bd58:	bf28      	it	cs
 800bd5a:	4617      	movcs	r7, r2
 800bd5c:	4604      	mov	r4, r0
 800bd5e:	e7d8      	b.n	800bd12 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800bd60:	68f5      	ldr	r5, [r6, #12]
 800bd62:	e7f7      	b.n	800bd54 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x84>
 800bd64:	4605      	mov	r5, r0
 800bd66:	4604      	mov	r4, r0
 800bd68:	e7d3      	b.n	800bd12 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x42>
 800bd6a:	3501      	adds	r5, #1
 800bd6c:	3403      	adds	r4, #3
 800bd6e:	e7d3      	b.n	800bd18 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0x48>
 800bd70:	3501      	adds	r5, #1
 800bd72:	3404      	adds	r4, #4
 800bd74:	42af      	cmp	r7, r5
 800bd76:	d91c      	bls.n	800bdb2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe2>
 800bd78:	eba4 0308 	sub.w	r3, r4, r8
 800bd7c:	4599      	cmp	r9, r3
 800bd7e:	d918      	bls.n	800bdb2 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xe2>
 800bd80:	f04f 0a00 	mov.w	sl, #0
 800bd84:	69b3      	ldr	r3, [r6, #24]
 800bd86:	f894 f000 	pld	[r4]
 800bd8a:	fb03 fb05 	mul.w	fp, r3, r5
 800bd8e:	69b3      	ldr	r3, [r6, #24]
 800bd90:	fa1f f18a 	uxth.w	r1, sl
 800bd94:	428b      	cmp	r3, r1
 800bd96:	f10a 0a01 	add.w	sl, sl, #1
 800bd9a:	d9e9      	bls.n	800bd70 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xa0>
 800bd9c:	78e2      	ldrb	r2, [r4, #3]
 800bd9e:	7863      	ldrb	r3, [r4, #1]
 800bda0:	9201      	str	r2, [sp, #4]
 800bda2:	78a2      	ldrb	r2, [r4, #2]
 800bda4:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800bda6:	9200      	str	r2, [sp, #0]
 800bda8:	7822      	ldrb	r2, [r4, #0]
 800bdaa:	4459      	add	r1, fp
 800bdac:	f001 fa25 	bl	800d1fa <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>
 800bdb0:	e7ed      	b.n	800bd8e <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xbe>
 800bdb2:	6933      	ldr	r3, [r6, #16]
 800bdb4:	9a03      	ldr	r2, [sp, #12]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d105      	bne.n	800bdc6 <WS28xxDmx::SetData(unsigned int, unsigned char const*, unsigned int)+0xf6>
 800bdba:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800bdbc:	b005      	add	sp, #20
 800bdbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc2:	f001 b855 	b.w	800ce70 <WS28xx::Update()>
 800bdc6:	b005      	add	sp, #20
 800bdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bdcc <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)>:
 800bdcc:	22ff      	movs	r2, #255	; 0xff
 800bdce:	4b1d      	ldr	r3, [pc, #116]	; (800be44 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x78>)
 800bdd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bdd2:	6003      	str	r3, [r0, #0]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	460d      	mov	r5, r1
 800bdd8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800bddc:	2101      	movs	r1, #1
 800bdde:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 800bde2:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 800bde6:	8483      	strh	r3, [r0, #36]	; 0x24
 800bde8:	6283      	str	r3, [r0, #40]	; 0x28
 800bdea:	63c3      	str	r3, [r0, #60]	; 0x3c
 800bdec:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800bdf0:	4b15      	ldr	r3, [pc, #84]	; (800be48 <WS28xxDmx::WS28xxDmx(PixelDmxConfiguration&)+0x7c>)
 800bdf2:	85c1      	strh	r1, [r0, #46]	; 0x2e
 800bdf4:	6018      	str	r0, [r3, #0]
 800bdf6:	f100 031c 	add.w	r3, r0, #28
 800bdfa:	8602      	strh	r2, [r0, #48]	; 0x30
 800bdfc:	9301      	str	r3, [sp, #4]
 800bdfe:	f100 0314 	add.w	r3, r0, #20
 800be02:	4604      	mov	r4, r0
 800be04:	f100 0220 	add.w	r2, r0, #32
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	1d03      	adds	r3, r0, #4
 800be0c:	4628      	mov	r0, r5
 800be0e:	f000 fbdb 	bl	800c5c8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>
 800be12:	201c      	movs	r0, #28
 800be14:	f007 fb40 	bl	8013498 <operator new(unsigned int)>
 800be18:	4606      	mov	r6, r0
 800be1a:	4629      	mov	r1, r5
 800be1c:	f001 f970 	bl	800d100 <WS28xx::WS28xx(PixelConfiguration&)>
 800be20:	4630      	mov	r0, r6
 800be22:	6366      	str	r6, [r4, #52]	; 0x34
 800be24:	f001 f9ac 	bl	800d180 <WS28xx::Blackout()>
 800be28:	69ab      	ldr	r3, [r5, #24]
 800be2a:	6a22      	ldr	r2, [r4, #32]
 800be2c:	61a3      	str	r3, [r4, #24]
 800be2e:	8bab      	ldrh	r3, [r5, #28]
 800be30:	4628      	mov	r0, r5
 800be32:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800be34:	6963      	ldr	r3, [r4, #20]
 800be36:	4353      	muls	r3, r2
 800be38:	8623      	strh	r3, [r4, #48]	; 0x30
 800be3a:	f000 fc1f 	bl	800c67c <PixelDmxConfiguration::Dump()>
 800be3e:	4620      	mov	r0, r4
 800be40:	b002      	add	sp, #8
 800be42:	bd70      	pop	{r4, r5, r6, pc}
 800be44:	08016334 	stmdaeq	r1, {r2, r4, r5, r8, r9, sp, lr}
 800be48:	20001914 	andcs	r1, r0, r4, lsl r9

0800be4c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 800be4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be4e:	88c5      	ldrh	r5, [r0, #6]
 800be50:	8886      	ldrh	r6, [r0, #4]
 800be52:	42b5      	cmp	r5, r6
 800be54:	d216      	bcs.n	800be84 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 800be56:	4604      	mov	r4, r0
 800be58:	6800      	ldr	r0, [r0, #0]
 800be5a:	4428      	add	r0, r5
 800be5c:	1b75      	subs	r5, r6, r5
 800be5e:	7a26      	ldrb	r6, [r4, #8]
 800be60:	b923      	cbnz	r3, 800be6c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 800be62:	b926      	cbnz	r6, 800be6e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 800be64:	9200      	str	r2, [sp, #0]
 800be66:	460b      	mov	r3, r1
 800be68:	4a09      	ldr	r2, [pc, #36]	; (800be90 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 800be6a:	e003      	b.n	800be74 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800be6c:	b166      	cbz	r6, 800be88 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 800be6e:	460b      	mov	r3, r1
 800be70:	9200      	str	r2, [sp, #0]
 800be72:	4a08      	ldr	r2, [pc, #32]	; (800be94 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 800be74:	4629      	mov	r1, r5
 800be76:	f007 ff3d 	bl	8013cf4 <snprintf>
 800be7a:	4285      	cmp	r5, r0
 800be7c:	bfa2      	ittt	ge
 800be7e:	88e3      	ldrhge	r3, [r4, #6]
 800be80:	181b      	addge	r3, r3, r0
 800be82:	80e3      	strhge	r3, [r4, #6]
 800be84:	b002      	add	sp, #8
 800be86:	bd70      	pop	{r4, r5, r6, pc}
 800be88:	9200      	str	r2, [sp, #0]
 800be8a:	460b      	mov	r3, r1
 800be8c:	4a02      	ldr	r2, [pc, #8]	; (800be98 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 800be8e:	e7f1      	b.n	800be74 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 800be90:	0801607d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sp, lr}
 800be94:	08016074 	stmdaeq	r1, {r2, r4, r5, r6, sp, lr}
 800be98:	0801607e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sp, lr}

0800be9c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>:
 800be9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be9e:	88c5      	ldrh	r5, [r0, #6]
 800bea0:	8886      	ldrh	r6, [r0, #4]
 800bea2:	42b5      	cmp	r5, r6
 800bea4:	d216      	bcs.n	800bed4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x38>
 800bea6:	4604      	mov	r4, r0
 800bea8:	6800      	ldr	r0, [r0, #0]
 800beaa:	4428      	add	r0, r5
 800beac:	1b75      	subs	r5, r6, r5
 800beae:	7a26      	ldrb	r6, [r4, #8]
 800beb0:	b923      	cbnz	r3, 800bebc <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x20>
 800beb2:	b926      	cbnz	r6, 800bebe <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x22>
 800beb4:	9200      	str	r2, [sp, #0]
 800beb6:	460b      	mov	r3, r1
 800beb8:	4a09      	ldr	r2, [pc, #36]	; (800bee0 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x44>)
 800beba:	e003      	b.n	800bec4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800bebc:	b166      	cbz	r6, 800bed8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x3c>
 800bebe:	460b      	mov	r3, r1
 800bec0:	9200      	str	r2, [sp, #0]
 800bec2:	4a08      	ldr	r2, [pc, #32]	; (800bee4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x48>)
 800bec4:	4629      	mov	r1, r5
 800bec6:	f007 ff15 	bl	8013cf4 <snprintf>
 800beca:	4285      	cmp	r5, r0
 800becc:	bfa2      	ittt	ge
 800bece:	88e3      	ldrhge	r3, [r4, #6]
 800bed0:	181b      	addge	r3, r3, r0
 800bed2:	80e3      	strhge	r3, [r4, #6]
 800bed4:	b002      	add	sp, #8
 800bed6:	bd70      	pop	{r4, r5, r6, pc}
 800bed8:	9200      	str	r2, [sp, #0]
 800beda:	460b      	mov	r3, r1
 800bedc:	4a02      	ldr	r2, [pc, #8]	; (800bee8 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x4c>)
 800bede:	e7f1      	b.n	800bec4 <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]+0x28>
 800bee0:	0801607d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sp, lr}
 800bee4:	08016074 	stmdaeq	r1, {r2, r4, r5, r6, sp, lr}
 800bee8:	0801607e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sp, lr}

0800beec <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>:
 800beec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800beee:	88c5      	ldrh	r5, [r0, #6]
 800bef0:	8886      	ldrh	r6, [r0, #4]
 800bef2:	42b5      	cmp	r5, r6
 800bef4:	d216      	bcs.n	800bf24 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x38>
 800bef6:	4604      	mov	r4, r0
 800bef8:	6800      	ldr	r0, [r0, #0]
 800befa:	4428      	add	r0, r5
 800befc:	1b75      	subs	r5, r6, r5
 800befe:	7a26      	ldrb	r6, [r4, #8]
 800bf00:	b923      	cbnz	r3, 800bf0c <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x20>
 800bf02:	b926      	cbnz	r6, 800bf0e <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x22>
 800bf04:	9200      	str	r2, [sp, #0]
 800bf06:	460b      	mov	r3, r1
 800bf08:	4a09      	ldr	r2, [pc, #36]	; (800bf30 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x44>)
 800bf0a:	e003      	b.n	800bf14 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800bf0c:	b166      	cbz	r6, 800bf28 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x3c>
 800bf0e:	460b      	mov	r3, r1
 800bf10:	9200      	str	r2, [sp, #0]
 800bf12:	4a08      	ldr	r2, [pc, #32]	; (800bf34 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x48>)
 800bf14:	4629      	mov	r1, r5
 800bf16:	f007 feed 	bl	8013cf4 <snprintf>
 800bf1a:	4285      	cmp	r5, r0
 800bf1c:	bfa2      	ittt	ge
 800bf1e:	88e3      	ldrhge	r3, [r4, #6]
 800bf20:	181b      	addge	r3, r3, r0
 800bf22:	80e3      	strhge	r3, [r4, #6]
 800bf24:	b002      	add	sp, #8
 800bf26:	bd70      	pop	{r4, r5, r6, pc}
 800bf28:	9200      	str	r2, [sp, #0]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	4a02      	ldr	r2, [pc, #8]	; (800bf38 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x4c>)
 800bf2e:	e7f1      	b.n	800bf14 <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]+0x28>
 800bf30:	08016090 	stmdaeq	r1, {r4, r7, sp, lr}
 800bf34:	08016085 	stmdaeq	r1, {r0, r2, r7, sp, lr}
 800bf38:	08016091 	stmdaeq	r1, {r0, r4, r7, sp, lr}

0800bf3c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>:
 800bf3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf40:	4699      	mov	r9, r3
 800bf42:	8885      	ldrh	r5, [r0, #4]
 800bf44:	88c3      	ldrh	r3, [r0, #6]
 800bf46:	4604      	mov	r4, r0
 800bf48:	42ab      	cmp	r3, r5
 800bf4a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800bf4e:	d227      	bcs.n	800bfa0 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x64>
 800bf50:	6826      	ldr	r6, [r4, #0]
 800bf52:	4610      	mov	r0, r2
 800bf54:	460f      	mov	r7, r1
 800bf56:	f894 a008 	ldrb.w	sl, [r4, #8]
 800bf5a:	441e      	add	r6, r3
 800bf5c:	1aed      	subs	r5, r5, r3
 800bf5e:	f7fb fa5b 	bl	8007418 <__aeabi_f2d>
 800bf62:	f1b9 0f00 	cmp.w	r9, #0
 800bf66:	d109      	bne.n	800bf7c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x40>
 800bf68:	f1ba 0f00 	cmp.w	sl, #0
 800bf6c:	d109      	bne.n	800bf82 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x46>
 800bf6e:	463b      	mov	r3, r7
 800bf70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf74:	4a0f      	ldr	r2, [pc, #60]	; (800bfb4 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x78>)
 800bf76:	f8cd 8000 	str.w	r8, [sp]
 800bf7a:	e008      	b.n	800bf8e <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800bf7c:	f1ba 0f00 	cmp.w	sl, #0
 800bf80:	d011      	beq.n	800bfa6 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x6a>
 800bf82:	463b      	mov	r3, r7
 800bf84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf88:	4a0b      	ldr	r2, [pc, #44]	; (800bfb8 <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x7c>)
 800bf8a:	f8cd 8000 	str.w	r8, [sp]
 800bf8e:	4629      	mov	r1, r5
 800bf90:	4630      	mov	r0, r6
 800bf92:	f007 feaf 	bl	8013cf4 <snprintf>
 800bf96:	4285      	cmp	r5, r0
 800bf98:	bfa2      	ittt	ge
 800bf9a:	88e3      	ldrhge	r3, [r4, #6]
 800bf9c:	181b      	addge	r3, r3, r0
 800bf9e:	80e3      	strhge	r3, [r4, #6]
 800bfa0:	b004      	add	sp, #16
 800bfa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfa6:	463b      	mov	r3, r7
 800bfa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfac:	4a03      	ldr	r2, [pc, #12]	; (800bfbc <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x80>)
 800bfae:	f8cd 8000 	str.w	r8, [sp]
 800bfb2:	e7ec      	b.n	800bf8e <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]+0x52>
 800bfb4:	0801636b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, r9, sp, lr}
 800bfb8:	08016360 	stmdaeq	r1, {r5, r6, r8, r9, sp, lr}
 800bfbc:	0801636c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, sp, lr}

0800bfc0 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>:
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	4a1c      	ldr	r2, [pc, #112]	; (800c034 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x74>)
 800bfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfc6:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800bfca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800bfce:	81c2      	strh	r2, [r0, #14]
 800bfd0:	223d      	movs	r2, #61	; 0x3d
 800bfd2:	8202      	strh	r2, [r0, #16]
 800bfd4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bfd8:	8242      	strh	r2, [r0, #18]
 800bfda:	2206      	movs	r2, #6
 800bfdc:	2601      	movs	r6, #1
 800bfde:	75c2      	strb	r2, [r0, #23]
 800bfe0:	f647 7cf0 	movw	ip, #32752	; 0x7ff0
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	6001      	str	r1, [r0, #0]
 800bfe8:	7303      	strb	r3, [r0, #12]
 800bfea:	7546      	strb	r6, [r0, #21]
 800bfec:	7583      	strb	r3, [r0, #22]
 800bfee:	8303      	strh	r3, [r0, #24]
 800bff0:	f100 011a 	add.w	r1, r0, #26
 800bff4:	f821 6b02 	strh.w	r6, [r1], #2
 800bff8:	b1aa      	cbz	r2, 800c026 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x66>
 800bffa:	f831 3c04 	ldrh.w	r3, [r1, #-4]
 800bffe:	1d1c      	adds	r4, r3, #4
 800c000:	3307      	adds	r3, #7
 800c002:	b2a5      	uxth	r5, r4
 800c004:	b29f      	uxth	r7, r3
 800c006:	f404 44fe 	and.w	r4, r4, #32512	; 0x7f00
 800c00a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800c00e:	429c      	cmp	r4, r3
 800c010:	d105      	bne.n	800c01e <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x5e>
 800c012:	f005 03f0 	and.w	r3, r5, #240	; 0xf0
 800c016:	f007 04f0 	and.w	r4, r7, #240	; 0xf0
 800c01a:	42a3      	cmp	r3, r4
 800c01c:	d001      	beq.n	800c022 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x62>
 800c01e:	ea07 050c 	and.w	r5, r7, ip
 800c022:	f821 5c02 	strh.w	r5, [r1, #-2]
 800c026:	3201      	adds	r2, #1
 800c028:	2a08      	cmp	r2, #8
 800c02a:	d1e3      	bne.n	800bff4 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)+0x34>
 800c02c:	2300      	movs	r3, #0
 800c02e:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 800c032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c034:	0100aa03 	tsteq	r0, r3, lsl #20

0800c038 <WS28xxDmxParams::Load()>:
 800c038:	b508      	push	{r3, lr}
 800c03a:	2300      	movs	r3, #0
 800c03c:	4601      	mov	r1, r0
 800c03e:	6043      	str	r3, [r0, #4]
 800c040:	6800      	ldr	r0, [r0, #0]
 800c042:	b120      	cbz	r0, 800c04e <WS28xxDmxParams::Load()+0x16>
 800c044:	6803      	ldr	r3, [r0, #0]
 800c046:	3104      	adds	r1, #4
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	4798      	blx	r3
 800c04c:	2001      	movs	r0, #1
 800c04e:	bd08      	pop	{r3, pc}

0800c050 <WS28xxDmxParams::Load(char const*, unsigned int)>:
 800c050:	6803      	ldr	r3, [r0, #0]
 800c052:	b1d3      	cbz	r3, 800c08a <WS28xxDmxParams::Load(char const*, unsigned int)+0x3a>
 800c054:	2300      	movs	r3, #0
 800c056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c058:	460d      	mov	r5, r1
 800c05a:	4616      	mov	r6, r2
 800c05c:	4604      	mov	r4, r0
 800c05e:	6043      	str	r3, [r0, #4]
 800c060:	4602      	mov	r2, r0
 800c062:	490a      	ldr	r1, [pc, #40]	; (800c08c <WS28xxDmxParams::Load(char const*, unsigned int)+0x3c>)
 800c064:	4668      	mov	r0, sp
 800c066:	f006 fbb9 	bl	80127dc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800c06a:	4632      	mov	r2, r6
 800c06c:	4629      	mov	r1, r5
 800c06e:	4668      	mov	r0, sp
 800c070:	f006 fbb8 	bl	80127e4 <ReadConfigFile::Read(char const*, unsigned int)>
 800c074:	4621      	mov	r1, r4
 800c076:	f851 0b04 	ldr.w	r0, [r1], #4
 800c07a:	6803      	ldr	r3, [r0, #0]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	4798      	blx	r3
 800c080:	4668      	mov	r0, sp
 800c082:	f006 fbae 	bl	80127e2 <ReadConfigFile::~ReadConfigFile()>
 800c086:	b002      	add	sp, #8
 800c088:	bd70      	pop	{r4, r5, r6, pc}
 800c08a:	4770      	bx	lr
 800c08c:	0800c2cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, lr, pc}

0800c090 <WS28xxDmxParams::callbackFunction(char const*)>:
 800c090:	b530      	push	{r4, r5, lr}
 800c092:	2308      	movs	r3, #8
 800c094:	460d      	mov	r5, r1
 800c096:	b089      	sub	sp, #36	; 0x24
 800c098:	4604      	mov	r4, r0
 800c09a:	9302      	str	r3, [sp, #8]
 800c09c:	4628      	mov	r0, r5
 800c09e:	497f      	ldr	r1, [pc, #508]	; (800c29c <WS28xxDmxParams::callbackFunction(char const*)+0x20c>)
 800c0a0:	446b      	add	r3, sp
 800c0a2:	aa04      	add	r2, sp, #16
 800c0a4:	f006 fbd2 	bl	801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800c0a8:	b9a0      	cbnz	r0, 800c0d4 <WS28xxDmxParams::callbackFunction(char const*)+0x44>
 800c0aa:	9b02      	ldr	r3, [sp, #8]
 800c0ac:	3320      	adds	r3, #32
 800c0ae:	446b      	add	r3, sp
 800c0b0:	f803 0c10 	strb.w	r0, [r3, #-16]
 800c0b4:	a804      	add	r0, sp, #16
 800c0b6:	f000 fe03 	bl	800ccc0 <PixelType::GetType(char const*)>
 800c0ba:	280e      	cmp	r0, #14
 800c0bc:	bf08      	it	eq
 800c0be:	2203      	moveq	r2, #3
 800c0c0:	6863      	ldr	r3, [r4, #4]
 800c0c2:	bf19      	ittee	ne
 800c0c4:	7220      	strbne	r0, [r4, #8]
 800c0c6:	f043 0301 	orrne.w	r3, r3, #1
 800c0ca:	7222      	strbeq	r2, [r4, #8]
 800c0cc:	f023 0301 	biceq.w	r3, r3, #1
 800c0d0:	6063      	str	r3, [r4, #4]
 800c0d2:	e033      	b.n	800c13c <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	4972      	ldr	r1, [pc, #456]	; (800c2a0 <WS28xxDmxParams::callbackFunction(char const*)+0x210>)
 800c0d8:	f10d 0202 	add.w	r2, sp, #2
 800c0dc:	f006 fc9d 	bl	8012a1a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c0e0:	b990      	cbnz	r0, 800c108 <WS28xxDmxParams::callbackFunction(char const*)+0x78>
 800c0e2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c0e6:	6863      	ldr	r3, [r4, #4]
 800c0e8:	1e51      	subs	r1, r2, #1
 800c0ea:	f5b1 7f2a 	cmp.w	r1, #680	; 0x2a8
 800c0ee:	bf2d      	iteet	cs
 800c0f0:	f06f 0255 	mvncs.w	r2, #85	; 0x55
 800c0f4:	f8a4 2009 	strhcc.w	r2, [r4, #9]
 800c0f8:	f043 0302 	orrcc.w	r3, r3, #2
 800c0fc:	7262      	strbcs	r2, [r4, #9]
 800c0fe:	bf24      	itt	cs
 800c100:	72a0      	strbcs	r0, [r4, #10]
 800c102:	f023 0302 	biccs.w	r3, r3, #2
 800c106:	e7e3      	b.n	800c0d0 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800c108:	2303      	movs	r3, #3
 800c10a:	4628      	mov	r0, r5
 800c10c:	9302      	str	r3, [sp, #8]
 800c10e:	4965      	ldr	r1, [pc, #404]	; (800c2a4 <WS28xxDmxParams::callbackFunction(char const*)+0x214>)
 800c110:	ab02      	add	r3, sp, #8
 800c112:	aa04      	add	r2, sp, #16
 800c114:	f006 fb9a 	bl	801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800c118:	b990      	cbnz	r0, 800c140 <WS28xxDmxParams::callbackFunction(char const*)+0xb0>
 800c11a:	9b02      	ldr	r3, [sp, #8]
 800c11c:	3320      	adds	r3, #32
 800c11e:	446b      	add	r3, sp
 800c120:	f803 0c10 	strb.w	r0, [r3, #-16]
 800c124:	a804      	add	r0, sp, #16
 800c126:	f000 fdef 	bl	800cd08 <PixelType::GetMap(char const*)>
 800c12a:	6863      	ldr	r3, [r4, #4]
 800c12c:	2806      	cmp	r0, #6
 800c12e:	bf14      	ite	ne
 800c130:	f443 7300 	orrne.w	r3, r3, #512	; 0x200
 800c134:	f423 7300 	biceq.w	r3, r3, #512	; 0x200
 800c138:	6063      	str	r3, [r4, #4]
 800c13a:	75e0      	strb	r0, [r4, #23]
 800c13c:	b009      	add	sp, #36	; 0x24
 800c13e:	bd30      	pop	{r4, r5, pc}
 800c140:	4628      	mov	r0, r5
 800c142:	4959      	ldr	r1, [pc, #356]	; (800c2a8 <WS28xxDmxParams::callbackFunction(char const*)+0x218>)
 800c144:	aa01      	add	r2, sp, #4
 800c146:	f006 fb9a 	bl	801287e <Sscan::Float(char const*, char const*, float&)>
 800c14a:	b960      	cbnz	r0, 800c166 <WS28xxDmxParams::callbackFunction(char const*)+0xd6>
 800c14c:	9801      	ldr	r0, [sp, #4]
 800c14e:	f000 fe3d 	bl	800cdcc <PixelType::ConvertTxH(float)>
 800c152:	6863      	ldr	r3, [r4, #4]
 800c154:	b120      	cbz	r0, 800c160 <WS28xxDmxParams::callbackFunction(char const*)+0xd0>
 800c156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c15a:	6063      	str	r3, [r4, #4]
 800c15c:	7620      	strb	r0, [r4, #24]
 800c15e:	e7ed      	b.n	800c13c <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800c160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c164:	e7f9      	b.n	800c15a <WS28xxDmxParams::callbackFunction(char const*)+0xca>
 800c166:	4628      	mov	r0, r5
 800c168:	4950      	ldr	r1, [pc, #320]	; (800c2ac <WS28xxDmxParams::callbackFunction(char const*)+0x21c>)
 800c16a:	aa01      	add	r2, sp, #4
 800c16c:	f006 fb87 	bl	801287e <Sscan::Float(char const*, char const*, float&)>
 800c170:	b960      	cbnz	r0, 800c18c <WS28xxDmxParams::callbackFunction(char const*)+0xfc>
 800c172:	9801      	ldr	r0, [sp, #4]
 800c174:	f000 fe2a 	bl	800cdcc <PixelType::ConvertTxH(float)>
 800c178:	6863      	ldr	r3, [r4, #4]
 800c17a:	b120      	cbz	r0, 800c186 <WS28xxDmxParams::callbackFunction(char const*)+0xf6>
 800c17c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c180:	6063      	str	r3, [r4, #4]
 800c182:	7660      	strb	r0, [r4, #25]
 800c184:	e7da      	b.n	800c13c <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800c186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c18a:	e7f9      	b.n	800c180 <WS28xxDmxParams::callbackFunction(char const*)+0xf0>
 800c18c:	4628      	mov	r0, r5
 800c18e:	4948      	ldr	r1, [pc, #288]	; (800c2b0 <WS28xxDmxParams::callbackFunction(char const*)+0x220>)
 800c190:	f10d 0202 	add.w	r2, sp, #2
 800c194:	f006 fc41 	bl	8012a1a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c198:	b998      	cbnz	r0, 800c1c2 <WS28xxDmxParams::callbackFunction(char const*)+0x132>
 800c19a:	f240 25a6 	movw	r5, #678	; 0x2a6
 800c19e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800c1a2:	6863      	ldr	r3, [r4, #4]
 800c1a4:	1e8a      	subs	r2, r1, #2
 800c1a6:	b292      	uxth	r2, r2
 800c1a8:	42aa      	cmp	r2, r5
 800c1aa:	bf81      	itttt	hi
 800c1ac:	2201      	movhi	r2, #1
 800c1ae:	75a0      	strbhi	r0, [r4, #22]
 800c1b0:	7562      	strbhi	r2, [r4, #21]
 800c1b2:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 800c1b6:	bf9c      	itt	ls
 800c1b8:	f8a4 1015 	strhls.w	r1, [r4, #21]
 800c1bc:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 800c1c0:	e786      	b.n	800c0d0 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	493b      	ldr	r1, [pc, #236]	; (800c2b4 <WS28xxDmxParams::callbackFunction(char const*)+0x224>)
 800c1c6:	aa03      	add	r2, sp, #12
 800c1c8:	f006 fc45 	bl	8012a56 <Sscan::Uint32(char const*, char const*, unsigned int&)>
 800c1cc:	b960      	cbnz	r0, 800c1e8 <WS28xxDmxParams::callbackFunction(char const*)+0x158>
 800c1ce:	9a03      	ldr	r2, [sp, #12]
 800c1d0:	4939      	ldr	r1, [pc, #228]	; (800c2b8 <WS28xxDmxParams::callbackFunction(char const*)+0x228>)
 800c1d2:	6863      	ldr	r3, [r4, #4]
 800c1d4:	428a      	cmp	r2, r1
 800c1d6:	bf14      	ite	ne
 800c1d8:	f043 0310 	orrne.w	r3, r3, #16
 800c1dc:	f023 0310 	biceq.w	r3, r3, #16
 800c1e0:	6063      	str	r3, [r4, #4]
 800c1e2:	f8c4 200e 	str.w	r2, [r4, #14]
 800c1e6:	e7a9      	b.n	800c13c <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	4934      	ldr	r1, [pc, #208]	; (800c2bc <WS28xxDmxParams::callbackFunction(char const*)+0x22c>)
 800c1ec:	f10d 0201 	add.w	r2, sp, #1
 800c1f0:	f006 fc5a 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c1f4:	b988      	cbnz	r0, 800c21a <WS28xxDmxParams::callbackFunction(char const*)+0x18a>
 800c1f6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800c1fa:	6863      	ldr	r3, [r4, #4]
 800c1fc:	1e4a      	subs	r2, r1, #1
 800c1fe:	b2d2      	uxtb	r2, r2
 800c200:	2afd      	cmp	r2, #253	; 0xfd
 800c202:	bf83      	ittte	hi
 800c204:	f023 0320 	bichi.w	r3, r3, #32
 800c208:	6063      	strhi	r3, [r4, #4]
 800c20a:	23ff      	movhi	r3, #255	; 0xff
 800c20c:	f043 0320 	orrls.w	r3, r3, #32
 800c210:	bf9a      	itte	ls
 800c212:	6063      	strls	r3, [r4, #4]
 800c214:	74a1      	strbls	r1, [r4, #18]
 800c216:	74a3      	strbhi	r3, [r4, #18]
 800c218:	e790      	b.n	800c13c <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800c21a:	4628      	mov	r0, r5
 800c21c:	4928      	ldr	r1, [pc, #160]	; (800c2c0 <WS28xxDmxParams::callbackFunction(char const*)+0x230>)
 800c21e:	f10d 0202 	add.w	r2, sp, #2
 800c222:	f006 fbfa 	bl	8012a1a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c226:	b990      	cbnz	r0, 800c24e <WS28xxDmxParams::callbackFunction(char const*)+0x1be>
 800c228:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c22c:	6863      	ldr	r3, [r4, #4]
 800c22e:	1e91      	subs	r1, r2, #2
 800c230:	f5b1 7fff 	cmp.w	r1, #510	; 0x1fe
 800c234:	bf83      	ittte	hi
 800c236:	2201      	movhi	r2, #1
 800c238:	72e2      	strbhi	r2, [r4, #11]
 800c23a:	2200      	movhi	r2, #0
 800c23c:	f8a4 200b 	strhls.w	r2, [r4, #11]
 800c240:	bf92      	itee	ls
 800c242:	f043 0304 	orrls.w	r3, r3, #4
 800c246:	7322      	strbhi	r2, [r4, #12]
 800c248:	f023 0304 	bichi.w	r3, r3, #4
 800c24c:	e740      	b.n	800c0d0 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800c24e:	4628      	mov	r0, r5
 800c250:	491c      	ldr	r1, [pc, #112]	; (800c2c4 <WS28xxDmxParams::callbackFunction(char const*)+0x234>)
 800c252:	f10d 0202 	add.w	r2, sp, #2
 800c256:	f006 fbe0 	bl	8012a1a <Sscan::Uint16(char const*, char const*, unsigned short&)>
 800c25a:	b930      	cbnz	r0, 800c26a <WS28xxDmxParams::callbackFunction(char const*)+0x1da>
 800c25c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800c260:	8363      	strh	r3, [r4, #26]
 800c262:	6863      	ldr	r3, [r4, #4]
 800c264:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c268:	6063      	str	r3, [r4, #4]
 800c26a:	4628      	mov	r0, r5
 800c26c:	4916      	ldr	r1, [pc, #88]	; (800c2c8 <WS28xxDmxParams::callbackFunction(char const*)+0x238>)
 800c26e:	f10d 0201 	add.w	r2, sp, #1
 800c272:	f006 fc19 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800c276:	2800      	cmp	r0, #0
 800c278:	f47f af60 	bne.w	800c13c <WS28xxDmxParams::callbackFunction(char const*)+0xac>
 800c27c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c280:	6863      	ldr	r3, [r4, #4]
 800c282:	1e51      	subs	r1, r2, #1
 800c284:	2904      	cmp	r1, #4
 800c286:	bf99      	ittee	ls
 800c288:	f884 202a 	strbls.w	r2, [r4, #42]	; 0x2a
 800c28c:	f443 1380 	orrls.w	r3, r3, #1048576	; 0x100000
 800c290:	f884 002a 	strbhi.w	r0, [r4, #42]	; 0x2a
 800c294:	f423 1380 	bichi.w	r3, r3, #1048576	; 0x100000
 800c298:	e71a      	b.n	800c0d0 <WS28xxDmxParams::callbackFunction(char const*)+0x40>
 800c29a:	bf00      	nop
 800c29c:	08017b24 	stmdaeq	r1, {r2, r5, r8, r9, fp, ip, sp, lr}
 800c2a0:	08017b2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, fp, ip, sp, lr}
 800c2a4:	08017b14 	stmdaeq	r1, {r2, r4, r8, r9, fp, ip, sp, lr}
 800c2a8:	08017b37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, r9, fp, ip, sp, lr}
 800c2ac:	08017b3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, fp, ip, sp, lr}
 800c2b0:	08017af2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, fp, ip, sp, lr}
 800c2b4:	08017ae3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r9, fp, ip, sp, lr}
 800c2b8:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800c2bc:	08017b02 	stmdaeq	r1, {r1, r8, r9, fp, ip, sp, lr}
 800c2c0:	08017cc7 	stmdaeq	r1, {r0, r1, r2, r6, r7, sl, fp, ip, sp, lr}
 800c2c4:	08017bef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 800c2c8:	08017ba2 	stmdaeq	r1, {r1, r5, r7, r8, r9, fp, ip, sp, lr}

0800c2cc <WS28xxDmxParams::staticCallbackFunction(void*, char const*)>:
 800c2cc:	f7ff bee0 	b.w	800c090 <WS28xxDmxParams::callbackFunction(char const*)>

0800c2d0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>:
 800c2d0:	b570      	push	{r4, r5, r6, lr}
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4615      	mov	r5, r2
 800c2d6:	461e      	mov	r6, r3
 800c2d8:	b086      	sub	sp, #24
 800c2da:	3004      	adds	r0, #4
 800c2dc:	2900      	cmp	r1, #0
 800c2de:	f000 808e 	beq.w	800c3fe <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x12e>
 800c2e2:	2227      	movs	r2, #39	; 0x27
 800c2e4:	f007 f997 	bl	8013616 <memmove>
 800c2e8:	4633      	mov	r3, r6
 800c2ea:	462a      	mov	r2, r5
 800c2ec:	4974      	ldr	r1, [pc, #464]	; (800c4c0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f0>)
 800c2ee:	a803      	add	r0, sp, #12
 800c2f0:	f006 f9a4 	bl	801263c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800c2f4:	7a20      	ldrb	r0, [r4, #8]
 800c2f6:	f000 fcd7 	bl	800cca8 <PixelType::GetType(pixel::Type)>
 800c2fa:	6863      	ldr	r3, [r4, #4]
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	4971      	ldr	r1, [pc, #452]	; (800c4c4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f4>)
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	a803      	add	r0, sp, #12
 800c306:	f7ff fdf1 	bl	800beec <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c30a:	6863      	ldr	r3, [r4, #4]
 800c30c:	f8b4 2009 	ldrh.w	r2, [r4, #9]
 800c310:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c314:	496c      	ldr	r1, [pc, #432]	; (800c4c8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1f8>)
 800c316:	a803      	add	r0, sp, #12
 800c318:	f7ff fdc0 	bl	800be9c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800c31c:	496b      	ldr	r1, [pc, #428]	; (800c4cc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1fc>)
 800c31e:	a803      	add	r0, sp, #12
 800c320:	f006 fa12 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800c324:	6863      	ldr	r3, [r4, #4]
 800c326:	059e      	lsls	r6, r3, #22
 800c328:	d403      	bmi.n	800c332 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x62>
 800c32a:	7a20      	ldrb	r0, [r4, #8]
 800c32c:	f000 f9a7 	bl	800c67e <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800c330:	75e0      	strb	r0, [r4, #23]
 800c332:	7de0      	ldrb	r0, [r4, #23]
 800c334:	f000 fd10 	bl	800cd58 <PixelType::GetMap(pixel::Map)>
 800c338:	6863      	ldr	r3, [r4, #4]
 800c33a:	4602      	mov	r2, r0
 800c33c:	f3c3 2340 	ubfx	r3, r3, #9, #1
 800c340:	4963      	ldr	r1, [pc, #396]	; (800c4d0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x200>)
 800c342:	a803      	add	r0, sp, #12
 800c344:	f7ff fdd2 	bl	800beec <bool PropertiesBuilder::Add<char const*>(char const*, char const*, bool, unsigned int) [clone .isra.0]>
 800c348:	6863      	ldr	r3, [r4, #4]
 800c34a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c34e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c352:	d011      	beq.n	800c378 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800c354:	f10d 020b 	add.w	r2, sp, #11
 800c358:	7a20      	ldrb	r0, [r4, #8]
 800c35a:	f10d 010a 	add.w	r1, sp, #10
 800c35e:	f000 f99d 	bl	800c69c <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800c362:	6863      	ldr	r3, [r4, #4]
 800c364:	055d      	lsls	r5, r3, #21
 800c366:	bf5c      	itt	pl
 800c368:	f89d 200a 	ldrbpl.w	r2, [sp, #10]
 800c36c:	7622      	strbpl	r2, [r4, #24]
 800c36e:	0518      	lsls	r0, r3, #20
 800c370:	bf5c      	itt	pl
 800c372:	f89d 300b 	ldrbpl.w	r3, [sp, #11]
 800c376:	7663      	strbpl	r3, [r4, #25]
 800c378:	4956      	ldr	r1, [pc, #344]	; (800c4d4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x204>)
 800c37a:	a803      	add	r0, sp, #12
 800c37c:	f006 f9e4 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800c380:	7e20      	ldrb	r0, [r4, #24]
 800c382:	f000 fcf5 	bl	800cd70 <PixelType::ConvertTxH(unsigned char)>
 800c386:	2502      	movs	r5, #2
 800c388:	6863      	ldr	r3, [r4, #4]
 800c38a:	4602      	mov	r2, r0
 800c38c:	4952      	ldr	r1, [pc, #328]	; (800c4d8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x208>)
 800c38e:	f3c3 2380 	ubfx	r3, r3, #10, #1
 800c392:	9500      	str	r5, [sp, #0]
 800c394:	a803      	add	r0, sp, #12
 800c396:	f7ff fdd1 	bl	800bf3c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800c39a:	7e60      	ldrb	r0, [r4, #25]
 800c39c:	f000 fce8 	bl	800cd70 <PixelType::ConvertTxH(unsigned char)>
 800c3a0:	6863      	ldr	r3, [r4, #4]
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	f3c3 23c0 	ubfx	r3, r3, #11, #1
 800c3a8:	494c      	ldr	r1, [pc, #304]	; (800c4dc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x20c>)
 800c3aa:	9500      	str	r5, [sp, #0]
 800c3ac:	a803      	add	r0, sp, #12
 800c3ae:	f7ff fdc5 	bl	800bf3c <bool PropertiesBuilder::Add<float>(char const*, float, bool, unsigned int) [clone .isra.0]>
 800c3b2:	494b      	ldr	r1, [pc, #300]	; (800c4e0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x210>)
 800c3b4:	a803      	add	r0, sp, #12
 800c3b6:	f006 f9c7 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800c3ba:	6863      	ldr	r3, [r4, #4]
 800c3bc:	f8b4 2015 	ldrh.w	r2, [r4, #21]
 800c3c0:	4948      	ldr	r1, [pc, #288]	; (800c4e4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x214>)
 800c3c2:	f3c3 2300 	ubfx	r3, r3, #8, #1
 800c3c6:	a803      	add	r0, sp, #12
 800c3c8:	f7ff fd68 	bl	800be9c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800c3cc:	4946      	ldr	r1, [pc, #280]	; (800c4e8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x218>)
 800c3ce:	a803      	add	r0, sp, #12
 800c3d0:	f006 f9ba 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800c3d4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800c3d8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800c3dc:	42a9      	cmp	r1, r5
 800c3de:	d224      	bcs.n	800c42a <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x15a>
 800c3e0:	9803      	ldr	r0, [sp, #12]
 800c3e2:	1a6d      	subs	r5, r5, r1
 800c3e4:	4408      	add	r0, r1
 800c3e6:	6861      	ldr	r1, [r4, #4]
 800c3e8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800c3ec:	06c9      	lsls	r1, r1, #27
 800c3ee:	f8d4 300e 	ldr.w	r3, [r4, #14]
 800c3f2:	d40b      	bmi.n	800c40c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x13c>
 800c3f4:	b962      	cbnz	r2, 800c410 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x140>
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	4a3c      	ldr	r2, [pc, #240]	; (800c4ec <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x21c>)
 800c3fa:	4b3d      	ldr	r3, [pc, #244]	; (800c4f0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800c3fc:	e00b      	b.n	800c416 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x146>
 800c3fe:	6823      	ldr	r3, [r4, #0]
 800c400:	4601      	mov	r1, r0
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	4618      	mov	r0, r3
 800c406:	68d2      	ldr	r2, [r2, #12]
 800c408:	4790      	blx	r2
 800c40a:	e76d      	b.n	800c2e8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x18>
 800c40c:	2a00      	cmp	r2, #0
 800c40e:	d053      	beq.n	800c4b8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1e8>
 800c410:	9300      	str	r3, [sp, #0]
 800c412:	4a38      	ldr	r2, [pc, #224]	; (800c4f4 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x224>)
 800c414:	4b36      	ldr	r3, [pc, #216]	; (800c4f0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800c416:	4629      	mov	r1, r5
 800c418:	f007 fc6c 	bl	8013cf4 <snprintf>
 800c41c:	4285      	cmp	r5, r0
 800c41e:	bfa2      	ittt	ge
 800c420:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800c424:	18c0      	addge	r0, r0, r3
 800c426:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800c42a:	4933      	ldr	r1, [pc, #204]	; (800c4f8 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x228>)
 800c42c:	a803      	add	r0, sp, #12
 800c42e:	f006 f98b 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800c432:	6863      	ldr	r3, [r4, #4]
 800c434:	7ca2      	ldrb	r2, [r4, #18]
 800c436:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800c43a:	4930      	ldr	r1, [pc, #192]	; (800c4fc <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x22c>)
 800c43c:	a803      	add	r0, sp, #12
 800c43e:	f7ff fd05 	bl	800be4c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800c442:	492f      	ldr	r1, [pc, #188]	; (800c500 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x230>)
 800c444:	a803      	add	r0, sp, #12
 800c446:	f006 f97f 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800c44a:	6863      	ldr	r3, [r4, #4]
 800c44c:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 800c450:	492c      	ldr	r1, [pc, #176]	; (800c504 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x234>)
 800c452:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800c456:	a803      	add	r0, sp, #12
 800c458:	f7ff fd20 	bl	800be9c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800c45c:	6863      	ldr	r3, [r4, #4]
 800c45e:	8b62      	ldrh	r2, [r4, #26]
 800c460:	f3c3 3300 	ubfx	r3, r3, #12, #1
 800c464:	4928      	ldr	r1, [pc, #160]	; (800c508 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x238>)
 800c466:	a803      	add	r0, sp, #12
 800c468:	f7ff fd18 	bl	800be9c <bool PropertiesBuilder::Add<unsigned short>(char const*, unsigned short, bool, unsigned int) [clone .isra.0]>
 800c46c:	4927      	ldr	r1, [pc, #156]	; (800c50c <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x23c>)
 800c46e:	a803      	add	r0, sp, #12
 800c470:	f006 f96a 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 800c474:	6863      	ldr	r3, [r4, #4]
 800c476:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800c47a:	f3c3 5300 	ubfx	r3, r3, #20, #1
 800c47e:	4924      	ldr	r1, [pc, #144]	; (800c510 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x240>)
 800c480:	a803      	add	r0, sp, #12
 800c482:	f7ff fce3 	bl	800be4c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 800c486:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800c48a:	b17b      	cbz	r3, 800c4ac <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x1dc>
 800c48c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800c490:	9b03      	ldr	r3, [sp, #12]
 800c492:	4413      	add	r3, r2
 800c494:	227d      	movs	r2, #125	; 0x7d
 800c496:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c49a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800c49e:	9903      	ldr	r1, [sp, #12]
 800c4a0:	54ca      	strb	r2, [r1, r3]
 800c4a2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	f8ad 3012 	strh.w	r3, [sp, #18]
 800c4ac:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800c4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	b006      	add	sp, #24
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	9300      	str	r3, [sp, #0]
 800c4ba:	4a16      	ldr	r2, [pc, #88]	; (800c514 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x244>)
 800c4bc:	4b0c      	ldr	r3, [pc, #48]	; (800c4f0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x220>)
 800c4be:	e7aa      	b.n	800c416 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)+0x146>
 800c4c0:	08017b47 	stmdaeq	r1, {r0, r1, r2, r6, r8, r9, fp, ip, sp, lr}
 800c4c4:	08017b24 	stmdaeq	r1, {r2, r5, r8, r9, fp, ip, sp, lr}
 800c4c8:	08017b2d 	stmdaeq	r1, {r0, r2, r3, r5, r8, r9, fp, ip, sp, lr}
 800c4cc:	08016375 	stmdaeq	r1, {r0, r2, r4, r5, r6, r8, r9, sp, lr}
 800c4d0:	08017b14 	stmdaeq	r1, {r2, r4, r8, r9, fp, ip, sp, lr}
 800c4d4:	08016389 	stmdaeq	r1, {r0, r3, r7, r8, r9, sp, lr}
 800c4d8:	08017b37 	stmdaeq	r1, {r0, r1, r2, r4, r5, r8, r9, fp, ip, sp, lr}
 800c4dc:	08017b3f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r8, r9, fp, ip, sp, lr}
 800c4e0:	0801639f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, r8, r9, sp, lr}
 800c4e4:	08017af2 	stmdaeq	r1, {r1, r4, r5, r6, r7, r9, fp, ip, sp, lr}
 800c4e8:	080163a8 	stmdaeq	r1, {r3, r5, r7, r8, r9, sp, lr}
 800c4ec:	0801607d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sp, lr}
 800c4f0:	08017ae3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r9, fp, ip, sp, lr}
 800c4f4:	08016074 	stmdaeq	r1, {r2, r4, r5, r6, sp, lr}
 800c4f8:	080163ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, r9, sp, lr}
 800c4fc:	08017b02 	stmdaeq	r1, {r1, r8, r9, fp, ip, sp, lr}
 800c500:	08017ad5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r9, fp, ip, sp, lr}
 800c504:	08017cc7 	stmdaeq	r1, {r0, r1, r2, r6, r7, sl, fp, ip, sp, lr}
 800c508:	08017bef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, sp, lr}
 800c50c:	080163c8 	stmdaeq	r1, {r3, r6, r7, r8, r9, sp, lr}
 800c510:	08017ba2 	stmdaeq	r1, {r1, r5, r7, r8, r9, fp, ip, sp, lr}
 800c514:	0801607e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sp, lr}

0800c518 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>:
 800c518:	b513      	push	{r0, r1, r4, lr}
 800c51a:	6804      	ldr	r4, [r0, #0]
 800c51c:	b914      	cbnz	r4, 800c524 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800c51e:	601c      	str	r4, [r3, #0]
 800c520:	b002      	add	sp, #8
 800c522:	bd10      	pop	{r4, pc}
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	4613      	mov	r3, r2
 800c528:	460a      	mov	r2, r1
 800c52a:	2100      	movs	r1, #0
 800c52c:	f7ff fed0 	bl	800c2d0 <WS28xxDmxParams::Builder(TWS28xxDmxParams const*, char*, unsigned int, unsigned int&)>
 800c530:	e7f6      	b.n	800c520 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800c532 <WS28xxDmxParams::Set(PixelDmxConfiguration*)>:
 800c532:	6843      	ldr	r3, [r0, #4]
 800c534:	07da      	lsls	r2, r3, #31
 800c536:	bf44      	itt	mi
 800c538:	7a02      	ldrbmi	r2, [r0, #8]
 800c53a:	600a      	strmi	r2, [r1, #0]
 800c53c:	079a      	lsls	r2, r3, #30
 800c53e:	d505      	bpl.n	800c54c <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x1a>
 800c540:	f8b0 2009 	ldrh.w	r2, [r0, #9]
 800c544:	2a00      	cmp	r2, #0
 800c546:	bf08      	it	eq
 800c548:	22aa      	moveq	r2, #170	; 0xaa
 800c54a:	604a      	str	r2, [r1, #4]
 800c54c:	059a      	lsls	r2, r3, #22
 800c54e:	bf44      	itt	mi
 800c550:	7dc2      	ldrbmi	r2, [r0, #23]
 800c552:	608a      	strmi	r2, [r1, #8]
 800c554:	055a      	lsls	r2, r3, #21
 800c556:	bf44      	itt	mi
 800c558:	7e02      	ldrbmi	r2, [r0, #24]
 800c55a:	740a      	strbmi	r2, [r1, #16]
 800c55c:	051a      	lsls	r2, r3, #20
 800c55e:	bf44      	itt	mi
 800c560:	7e42      	ldrbmi	r2, [r0, #25]
 800c562:	744a      	strbmi	r2, [r1, #17]
 800c564:	06da      	lsls	r2, r3, #27
 800c566:	bf44      	itt	mi
 800c568:	f8d0 200e 	ldrmi.w	r2, [r0, #14]
 800c56c:	60ca      	strmi	r2, [r1, #12]
 800c56e:	069a      	lsls	r2, r3, #26
 800c570:	bf44      	itt	mi
 800c572:	7c82      	ldrbmi	r2, [r0, #18]
 800c574:	748a      	strbmi	r2, [r1, #18]
 800c576:	075a      	lsls	r2, r3, #29
 800c578:	d50b      	bpl.n	800c592 <WS28xxDmxParams::Set(PixelDmxConfiguration*)+0x60>
 800c57a:	7ac2      	ldrb	r2, [r0, #11]
 800c57c:	b510      	push	{r4, lr}
 800c57e:	7b04      	ldrb	r4, [r0, #12]
 800c580:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800c584:	838a      	strh	r2, [r1, #28]
 800c586:	05da      	lsls	r2, r3, #23
 800c588:	bf44      	itt	mi
 800c58a:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800c58e:	618b      	strmi	r3, [r1, #24]
 800c590:	bd10      	pop	{r4, pc}
 800c592:	05db      	lsls	r3, r3, #23
 800c594:	bf44      	itt	mi
 800c596:	f8b0 3015 	ldrhmi.w	r3, [r0, #21]
 800c59a:	618b      	strmi	r3, [r1, #24]
 800c59c:	4770      	bx	lr

0800c59e <WS28xxDmxParams::Dump()>:
 800c59e:	4770      	bx	lr

0800c5a0 <WS28xxDmx::Print()>:
 800c5a0:	b510      	push	{r4, lr}
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800c5a6:	f000 fc7f 	bl	800cea8 <WS28xx::Print()>
 800c5aa:	4805      	ldr	r0, [pc, #20]	; (800c5c0 <WS28xxDmx::Print()+0x20>)
 800c5ac:	f007 fb7a 	bl	8013ca4 <printf>
 800c5b0:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800c5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5b8:	4802      	ldr	r0, [pc, #8]	; (800c5c4 <WS28xxDmx::Print()+0x24>)
 800c5ba:	f007 bb73 	b.w	8013ca4 <printf>
 800c5be:	bf00      	nop
 800c5c0:	080163d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, r8, r9, sp, lr}
 800c5c4:	080163eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, r8, r9, sp, lr}

0800c5c8 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)>:
 800c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5cc:	460e      	mov	r6, r1
 800c5ce:	4611      	mov	r1, r2
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	4690      	mov	r8, r2
 800c5d4:	461d      	mov	r5, r3
 800c5d6:	9f06      	ldr	r7, [sp, #24]
 800c5d8:	f000 f86e 	bl	800c6b8 <PixelConfiguration::Validate(unsigned int&)>
 800c5dc:	2e01      	cmp	r6, #1
 800c5de:	d009      	beq.n	800c5f4 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800c5e0:	7ce2      	ldrb	r2, [r4, #19]
 800c5e2:	b93a      	cbnz	r2, 800c5f4 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x2c>
 800c5e4:	2e04      	cmp	r6, #4
 800c5e6:	d141      	bne.n	800c66c <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0xa4>
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	6023      	str	r3, [r4, #0]
 800c5ec:	4641      	mov	r1, r8
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f000 f862 	bl	800c6b8 <PixelConfiguration::Validate(unsigned int&)>
 800c5f4:	6823      	ldr	r3, [r4, #0]
 800c5f6:	2b07      	cmp	r3, #7
 800c5f8:	bf0d      	iteet	eq
 800c5fa:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800c5fe:	f44f 73aa 	movne.w	r3, #340	; 0x154
 800c602:	22aa      	movne	r2, #170	; 0xaa
 800c604:	2180      	moveq	r1, #128	; 0x80
 800c606:	bf15      	itete	ne
 800c608:	e9c5 2300 	strdne	r2, r3, [r5]
 800c60c:	e9c5 1300 	strdeq	r1, r3, [r5]
 800c610:	f44f 73ff 	movne.w	r3, #510	; 0x1fe
 800c614:	f44f 73c0 	moveq.w	r3, #384	; 0x180
 800c618:	69a2      	ldr	r2, [r4, #24]
 800c61a:	60ab      	str	r3, [r5, #8]
 800c61c:	6863      	ldr	r3, [r4, #4]
 800c61e:	b10a      	cbz	r2, 800c624 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5c>
 800c620:	4293      	cmp	r3, r2
 800c622:	d200      	bcs.n	800c626 <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x5e>
 800c624:	61a3      	str	r3, [r4, #24]
 800c626:	69a2      	ldr	r2, [r4, #24]
 800c628:	fbb3 f3f2 	udiv	r3, r3, r2
 800c62c:	603b      	str	r3, [r7, #0]
 800c62e:	6963      	ldr	r3, [r4, #20]
 800c630:	42b3      	cmp	r3, r6
 800c632:	bf94      	ite	ls
 800c634:	6163      	strls	r3, [r4, #20]
 800c636:	6166      	strhi	r6, [r4, #20]
 800c638:	682b      	ldr	r3, [r5, #0]
 800c63a:	2e01      	cmp	r6, #1
 800c63c:	f103 0201 	add.w	r2, r3, #1
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	fbb3 f3f2 	udiv	r3, r3, r2
 800c646:	9a07      	ldr	r2, [sp, #28]
 800c648:	f103 0101 	add.w	r1, r3, #1
 800c64c:	6011      	str	r1, [r2, #0]
 800c64e:	bf09      	itett	eq
 800c650:	682b      	ldreq	r3, [r5, #0]
 800c652:	6962      	ldrne	r2, [r4, #20]
 800c654:	1c5a      	addeq	r2, r3, #1
 800c656:	683b      	ldreq	r3, [r7, #0]
 800c658:	bf16      	itet	ne
 800c65a:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
 800c65e:	fbb3 f3f2 	udiveq	r3, r3, r2
 800c662:	eb03 0382 	addne.w	r3, r3, r2, lsl #2
 800c666:	60eb      	str	r3, [r5, #12]
 800c668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c66c:	6823      	ldr	r3, [r4, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d0bc      	beq.n	800c5ec <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>
 800c672:	3b0b      	subs	r3, #11
 800c674:	2b01      	cmp	r3, #1
 800c676:	bf88      	it	hi
 800c678:	6022      	strhi	r2, [r4, #0]
 800c67a:	e7b7      	b.n	800c5ec <PixelDmxConfiguration::Validate(unsigned int, unsigned int&, pixeldmxconfiguration::PortInfo&, unsigned int&, unsigned int&)+0x24>

0800c67c <PixelDmxConfiguration::Dump()>:
 800c67c:	4770      	bx	lr

0800c67e <PixelConfiguration::GetRgbMapping(pixel::Type)>:
 800c67e:	f020 0308 	bic.w	r3, r0, #8
 800c682:	2b01      	cmp	r3, #1
 800c684:	d006      	beq.n	800c694 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x16>
 800c686:	2808      	cmp	r0, #8
 800c688:	d006      	beq.n	800c698 <PixelConfiguration::GetRgbMapping(pixel::Type)+0x1a>
 800c68a:	280a      	cmp	r0, #10
 800c68c:	bf14      	ite	ne
 800c68e:	2002      	movne	r0, #2
 800c690:	2005      	moveq	r0, #5
 800c692:	4770      	bx	lr
 800c694:	2000      	movs	r0, #0
 800c696:	4770      	bx	lr
 800c698:	2004      	movs	r0, #4
 800c69a:	4770      	bx	lr

0800c69c <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>:
 800c69c:	23c0      	movs	r3, #192	; 0xc0
 800c69e:	2803      	cmp	r0, #3
 800c6a0:	700b      	strb	r3, [r1, #0]
 800c6a2:	d006      	beq.n	800c6b2 <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x16>
 800c6a4:	3808      	subs	r0, #8
 800c6a6:	2803      	cmp	r0, #3
 800c6a8:	bf34      	ite	cc
 800c6aa:	23fc      	movcc	r3, #252	; 0xfc
 800c6ac:	23f0      	movcs	r3, #240	; 0xf0
 800c6ae:	7013      	strb	r3, [r2, #0]
 800c6b0:	4770      	bx	lr
 800c6b2:	23f8      	movs	r3, #248	; 0xf8
 800c6b4:	e7fb      	b.n	800c6ae <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)+0x12>
	...

0800c6b8 <PixelConfiguration::Validate(unsigned int&)>:
 800c6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6ba:	e9d0 5300 	ldrd	r5, r3, [r0]
 800c6be:	2d07      	cmp	r5, #7
 800c6c0:	4604      	mov	r4, r0
 800c6c2:	6882      	ldr	r2, [r0, #8]
 800c6c4:	d129      	bne.n	800c71a <PixelConfiguration::Validate(unsigned int&)+0x62>
 800c6c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6ca:	bf28      	it	cs
 800c6cc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800c6d0:	6043      	str	r3, [r0, #4]
 800c6d2:	2304      	movs	r3, #4
 800c6d4:	600b      	str	r3, [r1, #0]
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	2a06      	cmp	r2, #6
 800c6da:	74e3      	strb	r3, [r4, #19]
 800c6dc:	d103      	bne.n	800c6e6 <PixelConfiguration::Validate(unsigned int&)+0x2e>
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f7ff ffcd 	bl	800c67e <PixelConfiguration::GetRgbMapping(pixel::Type)>
 800c6e4:	60a0      	str	r0, [r4, #8]
 800c6e6:	7c63      	ldrb	r3, [r4, #17]
 800c6e8:	7c22      	ldrb	r2, [r4, #16]
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	bf28      	it	cs
 800c6f0:	2300      	movcs	r3, #0
 800c6f2:	f10d 0207 	add.w	r2, sp, #7
 800c6f6:	bf28      	it	cs
 800c6f8:	8223      	strhcs	r3, [r4, #16]
 800c6fa:	f10d 0106 	add.w	r1, sp, #6
 800c6fe:	f7ff ffcd 	bl	800c69c <PixelConfiguration::GetTxH(pixel::Type, unsigned char&, unsigned char&)>
 800c702:	7c23      	ldrb	r3, [r4, #16]
 800c704:	b913      	cbnz	r3, 800c70c <PixelConfiguration::Validate(unsigned int&)+0x54>
 800c706:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c70a:	7423      	strb	r3, [r4, #16]
 800c70c:	7c63      	ldrb	r3, [r4, #17]
 800c70e:	b913      	cbnz	r3, 800c716 <PixelConfiguration::Validate(unsigned int&)+0x5e>
 800c710:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c714:	7463      	strb	r3, [r4, #17]
 800c716:	4b1a      	ldr	r3, [pc, #104]	; (800c780 <PixelConfiguration::Validate(unsigned int&)+0xc8>)
 800c718:	e020      	b.n	800c75c <PixelConfiguration::Validate(unsigned int&)+0xa4>
 800c71a:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800c71e:	bf28      	it	cs
 800c720:	f44f 732a 	movcs.w	r3, #680	; 0x2a8
 800c724:	6043      	str	r3, [r0, #4]
 800c726:	2303      	movs	r3, #3
 800c728:	600b      	str	r3, [r1, #0]
 800c72a:	f1a5 030b 	sub.w	r3, r5, #11
 800c72e:	2b01      	cmp	r3, #1
 800c730:	d806      	bhi.n	800c740 <PixelConfiguration::Validate(unsigned int&)+0x88>
 800c732:	7c83      	ldrb	r3, [r0, #18]
 800c734:	2b1f      	cmp	r3, #31
 800c736:	d81d      	bhi.n	800c774 <PixelConfiguration::Validate(unsigned int&)+0xbc>
 800c738:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800c73c:	74a3      	strb	r3, [r4, #18]
 800c73e:	e000      	b.n	800c742 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800c740:	b9d5      	cbnz	r5, 800c778 <PixelConfiguration::Validate(unsigned int&)+0xc0>
 800c742:	2300      	movs	r3, #0
 800c744:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800c748:	2a06      	cmp	r2, #6
 800c74a:	bf08      	it	eq
 800c74c:	60a3      	streq	r3, [r4, #8]
 800c74e:	2d0d      	cmp	r5, #13
 800c750:	74e3      	strb	r3, [r4, #19]
 800c752:	8221      	strh	r1, [r4, #16]
 800c754:	68e3      	ldr	r3, [r4, #12]
 800c756:	d109      	bne.n	800c76c <PixelConfiguration::Validate(unsigned int&)+0xb4>
 800c758:	b913      	cbnz	r3, 800c760 <PixelConfiguration::Validate(unsigned int&)+0xa8>
 800c75a:	4b0a      	ldr	r3, [pc, #40]	; (800c784 <PixelConfiguration::Validate(unsigned int&)+0xcc>)
 800c75c:	60e3      	str	r3, [r4, #12]
 800c75e:	e003      	b.n	800c768 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800c760:	4a09      	ldr	r2, [pc, #36]	; (800c788 <PixelConfiguration::Validate(unsigned int&)+0xd0>)
 800c762:	4293      	cmp	r3, r2
 800c764:	d900      	bls.n	800c768 <PixelConfiguration::Validate(unsigned int&)+0xb0>
 800c766:	60e2      	str	r2, [r4, #12]
 800c768:	b003      	add	sp, #12
 800c76a:	bd30      	pop	{r4, r5, pc}
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d0f4      	beq.n	800c75a <PixelConfiguration::Validate(unsigned int&)+0xa2>
 800c770:	4a06      	ldr	r2, [pc, #24]	; (800c78c <PixelConfiguration::Validate(unsigned int&)+0xd4>)
 800c772:	e7f6      	b.n	800c762 <PixelConfiguration::Validate(unsigned int&)+0xaa>
 800c774:	23ff      	movs	r3, #255	; 0xff
 800c776:	e7e1      	b.n	800c73c <PixelConfiguration::Validate(unsigned int&)+0x84>
 800c778:	2d0d      	cmp	r5, #13
 800c77a:	d0e2      	beq.n	800c742 <PixelConfiguration::Validate(unsigned int&)+0x8a>
 800c77c:	e7ab      	b.n	800c6d6 <PixelConfiguration::Validate(unsigned int&)+0x1e>
 800c77e:	bf00      	nop
 800c780:	0061a800 	rsbeq	sl, r1, r0, lsl #16
 800c784:	003d0900 	eorseq	r0, sp, r0, lsl #18
 800c788:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 800c78c:	017d7840 	cmneq	sp, r0, asr #16

0800c790 <PixelConfiguration::Dump()>:
 800c790:	4770      	bx	lr
	...

0800c794 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>:
 800c794:	b507      	push	{r0, r1, r2, lr}
 800c796:	b2cb      	uxtb	r3, r1
 800c798:	9300      	str	r3, [sp, #0]
 800c79a:	f3c1 4207 	ubfx	r2, r1, #16, #8
 800c79e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800c7a2:	4601      	mov	r1, r0
 800c7a4:	4803      	ldr	r0, [pc, #12]	; (800c7b4 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]+0x20>)
 800c7a6:	6800      	ldr	r0, [r0, #0]
 800c7a8:	f000 fbcf 	bl	800cf4a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800c7ac:	b003      	add	sp, #12
 800c7ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7b2:	bf00      	nop
 800c7b4:	20001944 	andcs	r1, r0, r4, asr #18

0800c7b8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	2400      	movs	r4, #0
 800c7bc:	4d05      	ldr	r5, [pc, #20]	; (800c7d4 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x1c>)
 800c7be:	682b      	ldr	r3, [r5, #0]
 800c7c0:	42a3      	cmp	r3, r4
 800c7c2:	d905      	bls.n	800c7d0 <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x18>
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	f7ff ffe4 	bl	800c794 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800c7cc:	3401      	adds	r4, #1
 800c7ce:	e7f6      	b.n	800c7be <PixelPatterns::Clear(unsigned int) [clone .isra.0]+0x6>
 800c7d0:	bd38      	pop	{r3, r4, r5, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20001940 	andcs	r1, r0, r0, asr #18

0800c7d8 <PixelPatterns::PixelPatterns(unsigned int)>:
 800c7d8:	2901      	cmp	r1, #1
 800c7da:	bf28      	it	cs
 800c7dc:	2101      	movcs	r1, #1
 800c7de:	4b08      	ldr	r3, [pc, #32]	; (800c800 <PixelPatterns::PixelPatterns(unsigned int)+0x28>)
 800c7e0:	4a08      	ldr	r2, [pc, #32]	; (800c804 <PixelPatterns::PixelPatterns(unsigned int)+0x2c>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6013      	str	r3, [r2, #0]
 800c7e6:	4a08      	ldr	r2, [pc, #32]	; (800c808 <PixelPatterns::PixelPatterns(unsigned int)+0x30>)
 800c7e8:	6011      	str	r1, [r2, #0]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	4b07      	ldr	r3, [pc, #28]	; (800c80c <PixelPatterns::PixelPatterns(unsigned int)+0x34>)
 800c7ee:	601a      	str	r2, [r3, #0]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	4b07      	ldr	r3, [pc, #28]	; (800c810 <PixelPatterns::PixelPatterns(unsigned int)+0x38>)
 800c7f4:	6819      	ldr	r1, [r3, #0]
 800c7f6:	4b07      	ldr	r3, [pc, #28]	; (800c814 <PixelPatterns::PixelPatterns(unsigned int)+0x3c>)
 800c7f8:	61da      	str	r2, [r3, #28]
 800c7fa:	6019      	str	r1, [r3, #0]
 800c7fc:	619a      	str	r2, [r3, #24]
 800c7fe:	4770      	bx	lr
 800c800:	20001954 	andcs	r1, r0, r4, asr r9
 800c804:	20001944 	andcs	r1, r0, r4, asr #18
 800c808:	20001938 	andcs	r1, r0, r8, lsr r9
 800c80c:	20001940 	andcs	r1, r0, r0, asr #18
 800c810:	2000a97c 	andcs	sl, r0, ip, ror r9
 800c814:	20001918 	andcs	r1, r0, r8, lsl r9

0800c818 <PixelPatterns::GetName(pixelpatterns::Pattern)>:
 800c818:	2805      	cmp	r0, #5
 800c81a:	bfdd      	ittte	le
 800c81c:	220e      	movle	r2, #14
 800c81e:	4b02      	ldrle	r3, [pc, #8]	; (800c828 <PixelPatterns::GetName(pixelpatterns::Pattern)+0x10>)
 800c820:	fb02 3000 	mlale	r0, r2, r0, r3
 800c824:	4801      	ldrgt	r0, [pc, #4]	; (800c82c <PixelPatterns::GetName(pixelpatterns::Pattern)+0x14>)
 800c826:	4770      	bx	lr
 800c828:	08016417 	stmdaeq	r1, {r0, r1, r2, r4, sl, sp, lr}
 800c82c:	0801640f 	stmdaeq	r1, {r0, r1, r2, r3, sl, sp, lr}

0800c830 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)>:
 800c830:	b570      	push	{r4, r5, r6, lr}
 800c832:	460e      	mov	r6, r1
 800c834:	4615      	mov	r5, r2
 800c836:	461c      	mov	r4, r3
 800c838:	f7ff ffbe 	bl	800c7b8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800c83c:	2301      	movs	r3, #1
 800c83e:	4905      	ldr	r1, [pc, #20]	; (800c854 <PixelPatterns::RainbowCycle(unsigned int, unsigned int, pixelpatterns::Direction)+0x24>)
 800c840:	22ff      	movs	r2, #255	; 0xff
 800c842:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800c846:	61cb      	str	r3, [r1, #28]
 800c848:	2300      	movs	r3, #0
 800c84a:	604d      	str	r5, [r1, #4]
 800c84c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800c850:	618c      	str	r4, [r1, #24]
 800c852:	bd70      	pop	{r4, r5, r6, pc}
 800c854:	20001918 	andcs	r1, r0, r8, lsl r9

0800c858 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800c858:	b570      	push	{r4, r5, r6, lr}
 800c85a:	460e      	mov	r6, r1
 800c85c:	461c      	mov	r4, r3
 800c85e:	4615      	mov	r5, r2
 800c860:	f7ff ffaa 	bl	800c7b8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800c864:	2302      	movs	r3, #2
 800c866:	4908      	ldr	r1, [pc, #32]	; (800c888 <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800c868:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800c86c:	61cb      	str	r3, [r1, #28]
 800c86e:	9b04      	ldr	r3, [sp, #16]
 800c870:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800c874:	604b      	str	r3, [r1, #4]
 800c876:	4b05      	ldr	r3, [pc, #20]	; (800c88c <PixelPatterns::TheaterChase(unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x34>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	610b      	str	r3, [r1, #16]
 800c87c:	2300      	movs	r3, #0
 800c87e:	614b      	str	r3, [r1, #20]
 800c880:	9b05      	ldr	r3, [sp, #20]
 800c882:	618b      	str	r3, [r1, #24]
 800c884:	bd70      	pop	{r4, r5, r6, pc}
 800c886:	bf00      	nop
 800c888:	20001918 	andcs	r1, r0, r8, lsl r9
 800c88c:	20001940 	andcs	r1, r0, r0, asr #18

0800c890 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	460e      	mov	r6, r1
 800c894:	461d      	mov	r5, r3
 800c896:	4614      	mov	r4, r2
 800c898:	f7ff ff8e 	bl	800c7b8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800c89c:	2303      	movs	r3, #3
 800c89e:	4907      	ldr	r1, [pc, #28]	; (800c8bc <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800c8a0:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800c8a4:	61cb      	str	r3, [r1, #28]
 800c8a6:	4b06      	ldr	r3, [pc, #24]	; (800c8c0 <PixelPatterns::ColourWipe(unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x30>)
 800c8a8:	604d      	str	r5, [r1, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	608c      	str	r4, [r1, #8]
 800c8ae:	610b      	str	r3, [r1, #16]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	614b      	str	r3, [r1, #20]
 800c8b4:	9b04      	ldr	r3, [sp, #16]
 800c8b6:	618b      	str	r3, [r1, #24]
 800c8b8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ba:	bf00      	nop
 800c8bc:	20001918 	andcs	r1, r0, r8, lsl r9
 800c8c0:	20001940 	andcs	r1, r0, r0, asr #18

0800c8c4 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)>:
 800c8c4:	b570      	push	{r4, r5, r6, lr}
 800c8c6:	460e      	mov	r6, r1
 800c8c8:	461d      	mov	r5, r3
 800c8ca:	4614      	mov	r4, r2
 800c8cc:	f7ff ff74 	bl	800c7b8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800c8d0:	2304      	movs	r3, #4
 800c8d2:	4912      	ldr	r1, [pc, #72]	; (800c91c <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x58>)
 800c8d4:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800c8d8:	604d      	str	r5, [r1, #4]
 800c8da:	4d11      	ldr	r5, [pc, #68]	; (800c920 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x5c>)
 800c8dc:	61cb      	str	r3, [r1, #28]
 800c8de:	6828      	ldr	r0, [r5, #0]
 800c8e0:	608c      	str	r4, [r1, #8]
 800c8e2:	1e43      	subs	r3, r0, #1
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	610b      	str	r3, [r1, #16]
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	4c0d      	ldr	r4, [pc, #52]	; (800c924 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x60>)
 800c8ee:	614b      	str	r3, [r1, #20]
 800c8f0:	6823      	ldr	r3, [r4, #0]
 800c8f2:	b993      	cbnz	r3, 800c91a <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 800c8f4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c8f8:	4298      	cmp	r0, r3
 800c8fa:	bf2c      	ite	cs
 800c8fc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 800c900:	0080      	lslcc	r0, r0, #2
 800c902:	f006 fdcb 	bl	801349c <operator new[](unsigned int)>
 800c906:	2200      	movs	r2, #0
 800c908:	682b      	ldr	r3, [r5, #0]
 800c90a:	6020      	str	r0, [r4, #0]
 800c90c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c910:	4298      	cmp	r0, r3
 800c912:	d002      	beq.n	800c91a <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x56>
 800c914:	f840 2b04 	str.w	r2, [r0], #4
 800c918:	e7fa      	b.n	800c910 <PixelPatterns::Scanner(unsigned int, unsigned int, unsigned int)+0x4c>
 800c91a:	bd70      	pop	{r4, r5, r6, pc}
 800c91c:	20001918 	andcs	r1, r0, r8, lsl r9
 800c920:	20001940 	andcs	r1, r0, r0, asr #18
 800c924:	2000193c 	andcs	r1, r0, ip, lsr r9

0800c928 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)>:
 800c928:	b570      	push	{r4, r5, r6, lr}
 800c92a:	460e      	mov	r6, r1
 800c92c:	461c      	mov	r4, r3
 800c92e:	4615      	mov	r5, r2
 800c930:	f7ff ff42 	bl	800c7b8 <PixelPatterns::Clear(unsigned int) [clone .isra.0]>
 800c934:	2305      	movs	r3, #5
 800c936:	4907      	ldr	r1, [pc, #28]	; (800c954 <PixelPatterns::Fade(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, pixelpatterns::Direction)+0x2c>)
 800c938:	eb01 1146 	add.w	r1, r1, r6, lsl #5
 800c93c:	61cb      	str	r3, [r1, #28]
 800c93e:	9b05      	ldr	r3, [sp, #20]
 800c940:	e9c1 5402 	strd	r5, r4, [r1, #8]
 800c944:	604b      	str	r3, [r1, #4]
 800c946:	9b04      	ldr	r3, [sp, #16]
 800c948:	610b      	str	r3, [r1, #16]
 800c94a:	2300      	movs	r3, #0
 800c94c:	614b      	str	r3, [r1, #20]
 800c94e:	9b06      	ldr	r3, [sp, #24]
 800c950:	618b      	str	r3, [r1, #24]
 800c952:	bd70      	pop	{r4, r5, r6, pc}
 800c954:	20001918 	andcs	r1, r0, r8, lsl r9

0800c958 <PixelPatterns::Wheel(unsigned char)>:
 800c958:	43c9      	mvns	r1, r1
 800c95a:	b2c9      	uxtb	r1, r1
 800c95c:	2954      	cmp	r1, #84	; 0x54
 800c95e:	d809      	bhi.n	800c974 <PixelPatterns::Wheel(unsigned char)+0x1c>
 800c960:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 800c964:	3801      	subs	r0, #1
 800c966:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800c96a:	b2c3      	uxtb	r3, r0
 800c96c:	b2c8      	uxtb	r0, r1
 800c96e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800c972:	4770      	bx	lr
 800c974:	29a9      	cmp	r1, #169	; 0xa9
 800c976:	d80b      	bhi.n	800c990 <PixelPatterns::Wheel(unsigned char)+0x38>
 800c978:	3955      	subs	r1, #85	; 0x55
 800c97a:	b2c9      	uxtb	r1, r1
 800c97c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800c980:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
 800c984:	b2c3      	uxtb	r3, r0
 800c986:	1e48      	subs	r0, r1, #1
 800c988:	b2c0      	uxtb	r0, r0
 800c98a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800c98e:	4770      	bx	lr
 800c990:	3156      	adds	r1, #86	; 0x56
 800c992:	b2c9      	uxtb	r1, r1
 800c994:	eba1 0081 	sub.w	r0, r1, r1, lsl #2
 800c998:	3801      	subs	r0, #1
 800c99a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800c99e:	b2c3      	uxtb	r3, r0
 800c9a0:	b2c8      	uxtb	r0, r1
 800c9a2:	0400      	lsls	r0, r0, #16
 800c9a4:	e7f1      	b.n	800c98a <PixelPatterns::Wheel(unsigned char)+0x32>
	...

0800c9a8 <PixelPatterns::Increment(unsigned int)>:
 800c9a8:	4a0d      	ldr	r2, [pc, #52]	; (800c9e0 <PixelPatterns::Increment(unsigned int)+0x38>)
 800c9aa:	b510      	push	{r4, lr}
 800c9ac:	014c      	lsls	r4, r1, #5
 800c9ae:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800c9b2:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
 800c9b6:	b930      	cbnz	r0, 800c9c6 <PixelPatterns::Increment(unsigned int)+0x1e>
 800c9b8:	690a      	ldr	r2, [r1, #16]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	bf18      	it	ne
 800c9c0:	4618      	movne	r0, r3
 800c9c2:	6148      	str	r0, [r1, #20]
 800c9c4:	bd10      	pop	{r4, pc}
 800c9c6:	b92b      	cbnz	r3, 800c9d4 <PixelPatterns::Increment(unsigned int)+0x2c>
 800c9c8:	4422      	add	r2, r4
 800c9ca:	6913      	ldr	r3, [r2, #16]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	6153      	str	r3, [r2, #20]
 800c9d2:	e7f7      	b.n	800c9c4 <PixelPatterns::Increment(unsigned int)+0x1c>
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	614b      	str	r3, [r1, #20]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1f3      	bne.n	800c9c4 <PixelPatterns::Increment(unsigned int)+0x1c>
 800c9dc:	e7f4      	b.n	800c9c8 <PixelPatterns::Increment(unsigned int)+0x20>
 800c9de:	bf00      	nop
 800c9e0:	20001918 	andcs	r1, r0, r8, lsl r9

0800c9e4 <PixelPatterns::RainbowCycleUpdate(unsigned int)>:
 800c9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	460d      	mov	r5, r1
 800c9ec:	2600      	movs	r6, #0
 800c9ee:	4b10      	ldr	r3, [pc, #64]	; (800ca30 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x4c>)
 800c9f0:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800ca34 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x50>
 800c9f4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c9f8:	695f      	ldr	r7, [r3, #20]
 800c9fa:	f8d8 1000 	ldr.w	r1, [r8]
 800c9fe:	b2b2      	uxth	r2, r6
 800ca00:	4291      	cmp	r1, r2
 800ca02:	f106 0601 	add.w	r6, r6, #1
 800ca06:	d90c      	bls.n	800ca22 <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x3e>
 800ca08:	0213      	lsls	r3, r2, #8
 800ca0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca0e:	443b      	add	r3, r7
 800ca10:	b2d9      	uxtb	r1, r3
 800ca12:	4620      	mov	r0, r4
 800ca14:	f7ff ffa0 	bl	800c958 <PixelPatterns::Wheel(unsigned char)>
 800ca18:	4601      	mov	r1, r0
 800ca1a:	4610      	mov	r0, r2
 800ca1c:	f7ff feba 	bl	800c794 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800ca20:	e7eb      	b.n	800c9fa <PixelPatterns::RainbowCycleUpdate(unsigned int)+0x16>
 800ca22:	4629      	mov	r1, r5
 800ca24:	4620      	mov	r0, r4
 800ca26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2a:	f7ff bfbd 	b.w	800c9a8 <PixelPatterns::Increment(unsigned int)>
 800ca2e:	bf00      	nop
 800ca30:	20001918 	andcs	r1, r0, r8, lsl r9
 800ca34:	20001940 	andcs	r1, r0, r0, asr #18

0800ca38 <PixelPatterns::TheaterChaseUpdate(unsigned int)>:
 800ca38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	4605      	mov	r5, r0
 800ca3e:	460c      	mov	r4, r1
 800ca40:	f04f 0b00 	mov.w	fp, #0
 800ca44:	4b12      	ldr	r3, [pc, #72]	; (800ca90 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x58>)
 800ca46:	f8df 904c 	ldr.w	r9, [pc, #76]	; 800ca94 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x5c>
 800ca4a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ca4e:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800ca52:	f8df a044 	ldr.w	sl, [pc, #68]	; 800ca98 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x60>
 800ca56:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
 800ca5a:	f8d9 3000 	ldr.w	r3, [r9]
 800ca5e:	fa1f f08b 	uxth.w	r0, fp
 800ca62:	4283      	cmp	r3, r0
 800ca64:	d90d      	bls.n	800ca82 <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x4a>
 800ca66:	eb08 0300 	add.w	r3, r8, r0
 800ca6a:	fb0a f303 	mul.w	r3, sl, r3
 800ca6e:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
 800ca72:	bf94      	ite	ls
 800ca74:	4631      	movls	r1, r6
 800ca76:	4639      	movhi	r1, r7
 800ca78:	f7ff fe8c 	bl	800c794 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800ca7c:	f10b 0b01 	add.w	fp, fp, #1
 800ca80:	e7eb      	b.n	800ca5a <PixelPatterns::TheaterChaseUpdate(unsigned int)+0x22>
 800ca82:	4621      	mov	r1, r4
 800ca84:	4628      	mov	r0, r5
 800ca86:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8a:	f7ff bf8d 	b.w	800c9a8 <PixelPatterns::Increment(unsigned int)>
 800ca8e:	bf00      	nop
 800ca90:	20001918 	andcs	r1, r0, r8, lsl r9
 800ca94:	20001940 	andcs	r1, r0, r0, asr #18
 800ca98:	aaaaaaab 	bge	6ab754c <__stack_size+0x6ab5d4c>

0800ca9c <PixelPatterns::ColourWipeUpdate(unsigned int)>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4605      	mov	r5, r0
 800caa0:	460c      	mov	r4, r1
 800caa2:	4b06      	ldr	r3, [pc, #24]	; (800cabc <PixelPatterns::ColourWipeUpdate(unsigned int)+0x20>)
 800caa4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800caa8:	6899      	ldr	r1, [r3, #8]
 800caaa:	6958      	ldr	r0, [r3, #20]
 800caac:	f7ff fe72 	bl	800c794 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800cab0:	4621      	mov	r1, r4
 800cab2:	4628      	mov	r0, r5
 800cab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cab8:	f7ff bf76 	b.w	800c9a8 <PixelPatterns::Increment(unsigned int)>
 800cabc:	20001918 	andcs	r1, r0, r8, lsl r9

0800cac0 <PixelPatterns::ScannerUpdate(unsigned int)>:
 800cac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac4:	460d      	mov	r5, r1
 800cac6:	f04f 0900 	mov.w	r9, #0
 800caca:	4a27      	ldr	r2, [pc, #156]	; (800cb68 <PixelPatterns::ScannerUpdate(unsigned int)+0xa8>)
 800cacc:	b085      	sub	sp, #20
 800cace:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800cad2:	e9d2 7604 	ldrd	r7, r6, [r2, #16]
 800cad6:	f8d2 a008 	ldr.w	sl, [r2, #8]
 800cada:	00b3      	lsls	r3, r6, #2
 800cadc:	f8df b08c 	ldr.w	fp, [pc, #140]	; 800cb6c <PixelPatterns::ScannerUpdate(unsigned int)+0xac>
 800cae0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800cb70 <PixelPatterns::ScannerUpdate(unsigned int)+0xb0>
 800cae4:	9002      	str	r0, [sp, #8]
 800cae6:	9301      	str	r3, [sp, #4]
 800cae8:	1bbf      	subs	r7, r7, r6
 800caea:	f8db 1000 	ldr.w	r1, [fp]
 800caee:	fa1f f489 	uxth.w	r4, r9
 800caf2:	42a1      	cmp	r1, r4
 800caf4:	d930      	bls.n	800cb58 <PixelPatterns::ScannerUpdate(unsigned int)+0x98>
 800caf6:	42a6      	cmp	r6, r4
 800caf8:	d10b      	bne.n	800cb12 <PixelPatterns::ScannerUpdate(unsigned int)+0x52>
 800cafa:	4651      	mov	r1, sl
 800cafc:	4630      	mov	r0, r6
 800cafe:	f7ff fe49 	bl	800c794 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800cb02:	f8d8 1000 	ldr.w	r1, [r8]
 800cb06:	9b01      	ldr	r3, [sp, #4]
 800cb08:	f841 a003 	str.w	sl, [r1, r3]
 800cb0c:	f109 0901 	add.w	r9, r9, #1
 800cb10:	e7eb      	b.n	800caea <PixelPatterns::ScannerUpdate(unsigned int)+0x2a>
 800cb12:	42a7      	cmp	r7, r4
 800cb14:	d108      	bne.n	800cb28 <PixelPatterns::ScannerUpdate(unsigned int)+0x68>
 800cb16:	4651      	mov	r1, sl
 800cb18:	4638      	mov	r0, r7
 800cb1a:	f7ff fe3b 	bl	800c794 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800cb1e:	f8d8 1000 	ldr.w	r1, [r8]
 800cb22:	f841 a024 	str.w	sl, [r1, r4, lsl #2]
 800cb26:	e7f1      	b.n	800cb0c <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 800cb28:	f8d8 1000 	ldr.w	r1, [r8]
 800cb2c:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800cb30:	f3c0 2146 	ubfx	r1, r0, #9, #7
 800cb34:	f3c0 4c46 	ubfx	ip, r0, #17, #7
 800cb38:	0209      	lsls	r1, r1, #8
 800cb3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800cb3e:	f3c0 0046 	ubfx	r0, r0, #1, #7
 800cb42:	4301      	orrs	r1, r0
 800cb44:	4620      	mov	r0, r4
 800cb46:	9103      	str	r1, [sp, #12]
 800cb48:	f7ff fe24 	bl	800c794 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800cb4c:	f8d8 0000 	ldr.w	r0, [r8]
 800cb50:	9903      	ldr	r1, [sp, #12]
 800cb52:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
 800cb56:	e7d9      	b.n	800cb0c <PixelPatterns::ScannerUpdate(unsigned int)+0x4c>
 800cb58:	4629      	mov	r1, r5
 800cb5a:	9802      	ldr	r0, [sp, #8]
 800cb5c:	b005      	add	sp, #20
 800cb5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb62:	f7ff bf21 	b.w	800c9a8 <PixelPatterns::Increment(unsigned int)>
 800cb66:	bf00      	nop
 800cb68:	20001918 	andcs	r1, r0, r8, lsl r9
 800cb6c:	20001940 	andcs	r1, r0, r0, asr #18
 800cb70:	2000193c 	andcs	r1, r0, ip, lsr r9

0800cb74 <PixelPatterns::FadeUpdate(unsigned int)>:
 800cb74:	4a21      	ldr	r2, [pc, #132]	; (800cbfc <PixelPatterns::FadeUpdate(unsigned int)+0x88>)
 800cb76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb7a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800cb7e:	4605      	mov	r5, r0
 800cb80:	e9d2 3002 	ldrd	r3, r0, [r2, #8]
 800cb84:	460c      	mov	r4, r1
 800cb86:	e9d2 6104 	ldrd	r6, r1, [r2, #16]
 800cb8a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800cb8e:	434a      	muls	r2, r1
 800cb90:	1a77      	subs	r7, r6, r1
 800cb92:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 800cb96:	fb07 220c 	mla	r2, r7, ip, r2
 800cb9a:	fbb2 f2f6 	udiv	r2, r2, r6
 800cb9e:	0212      	lsls	r2, r2, #8
 800cba0:	fa1f fc82 	uxth.w	ip, r2
 800cba4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800cba8:	434a      	muls	r2, r1
 800cbaa:	f3c3 4e07 	ubfx	lr, r3, #16, #8
 800cbae:	fb07 220e 	mla	r2, r7, lr, r2
 800cbb2:	fbb2 f2f6 	udiv	r2, r2, r6
 800cbb6:	0412      	lsls	r2, r2, #16
 800cbb8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800cbbc:	ea4c 0202 	orr.w	r2, ip, r2
 800cbc0:	fa5f fc83 	uxtb.w	ip, r3
 800cbc4:	b2c3      	uxtb	r3, r0
 800cbc6:	434b      	muls	r3, r1
 800cbc8:	fb07 330c 	mla	r3, r7, ip, r3
 800cbcc:	fbb3 f3f6 	udiv	r3, r3, r6
 800cbd0:	2700      	movs	r7, #0
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800cc00 <PixelPatterns::FadeUpdate(unsigned int)+0x8c>
 800cbd8:	ea42 0603 	orr.w	r6, r2, r3
 800cbdc:	f8d8 3000 	ldr.w	r3, [r8]
 800cbe0:	42bb      	cmp	r3, r7
 800cbe2:	d905      	bls.n	800cbf0 <PixelPatterns::FadeUpdate(unsigned int)+0x7c>
 800cbe4:	4638      	mov	r0, r7
 800cbe6:	4631      	mov	r1, r6
 800cbe8:	f7ff fdd4 	bl	800c794 <PixelPatterns::SetPixelColour(unsigned int, unsigned int, unsigned int) [clone .constprop.0]>
 800cbec:	3701      	adds	r7, #1
 800cbee:	e7f5      	b.n	800cbdc <PixelPatterns::FadeUpdate(unsigned int)+0x68>
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	4628      	mov	r0, r5
 800cbf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf8:	f7ff bed6 	b.w	800c9a8 <PixelPatterns::Increment(unsigned int)>
 800cbfc:	20001918 	andcs	r1, r0, r8, lsl r9
 800cc00:	20001940 	andcs	r1, r0, r0, asr #18

0800cc04 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	4b12      	ldr	r3, [pc, #72]	; (800cc50 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x4c>)
 800cc08:	014e      	lsls	r6, r1, #5
 800cc0a:	599c      	ldr	r4, [r3, r6]
 800cc0c:	eb03 1541 	add.w	r5, r3, r1, lsl #5
 800cc10:	686f      	ldr	r7, [r5, #4]
 800cc12:	1b14      	subs	r4, r2, r4
 800cc14:	42bc      	cmp	r4, r7
 800cc16:	d319      	bcc.n	800cc4c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800cc18:	519a      	str	r2, [r3, r6]
 800cc1a:	69eb      	ldr	r3, [r5, #28]
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	2b04      	cmp	r3, #4
 800cc20:	d814      	bhi.n	800cc4c <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x48>
 800cc22:	e8df f003 	tbb	[pc, r3]
 800cc26:	0d0a0703 	stceq	7, cr0, [sl, #-12]
 800cc2a:	f7ff0010 			; <UNDEFINED> instruction: 0xf7ff0010
 800cc2e:	feda 2001 	cdp2	0, 13, cr2, cr10, cr1, {0}
 800cc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc34:	f7ff ff00 	bl	800ca38 <PixelPatterns::TheaterChaseUpdate(unsigned int)>
 800cc38:	e7fa      	b.n	800cc30 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800cc3a:	f7ff ff2f 	bl	800ca9c <PixelPatterns::ColourWipeUpdate(unsigned int)>
 800cc3e:	e7f7      	b.n	800cc30 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800cc40:	f7ff ff3e 	bl	800cac0 <PixelPatterns::ScannerUpdate(unsigned int)>
 800cc44:	e7f4      	b.n	800cc30 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800cc46:	f7ff ff95 	bl	800cb74 <PixelPatterns::FadeUpdate(unsigned int)>
 800cc4a:	e7f1      	b.n	800cc30 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2c>
 800cc4c:	2000      	movs	r0, #0
 800cc4e:	e7f0      	b.n	800cc32 <PixelPatterns::PortUpdate(unsigned int, unsigned int)+0x2e>
 800cc50:	20001918 	andcs	r1, r0, r8, lsl r9

0800cc54 <PixelPatterns::Run()>:
 800cc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc58:	4605      	mov	r5, r0
 800cc5a:	f008 f92d 	bl	8014eb8 <gd32_spi_dma_tx_is_active()>
 800cc5e:	4604      	mov	r4, r0
 800cc60:	b9c8      	cbnz	r0, 800cc96 <PixelPatterns::Run()+0x42>
 800cc62:	4606      	mov	r6, r0
 800cc64:	4b0d      	ldr	r3, [pc, #52]	; (800cc9c <PixelPatterns::Run()+0x48>)
 800cc66:	f8df 8038 	ldr.w	r8, [pc, #56]	; 800cca0 <PixelPatterns::Run()+0x4c>
 800cc6a:	681f      	ldr	r7, [r3, #0]
 800cc6c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc70:	b2f1      	uxtb	r1, r6
 800cc72:	428b      	cmp	r3, r1
 800cc74:	f106 0601 	add.w	r6, r6, #1
 800cc78:	d906      	bls.n	800cc88 <PixelPatterns::Run()+0x34>
 800cc7a:	463a      	mov	r2, r7
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	f7ff ffc1 	bl	800cc04 <PixelPatterns::PortUpdate(unsigned int, unsigned int)>
 800cc82:	4304      	orrs	r4, r0
 800cc84:	b2e4      	uxtb	r4, r4
 800cc86:	e7f1      	b.n	800cc6c <PixelPatterns::Run()+0x18>
 800cc88:	b12c      	cbz	r4, 800cc96 <PixelPatterns::Run()+0x42>
 800cc8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8e:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <PixelPatterns::Run()+0x50>)
 800cc90:	6818      	ldr	r0, [r3, #0]
 800cc92:	f000 b8ed 	b.w	800ce70 <WS28xx::Update()>
 800cc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9a:	bf00      	nop
 800cc9c:	2000a97c 	andcs	sl, r0, ip, ror r9
 800cca0:	20001938 	andcs	r1, r0, r8, lsr r9
 800cca4:	20001944 	andcs	r1, r0, r4, asr #18

0800cca8 <PixelType::GetType(pixel::Type)>:
 800cca8:	280d      	cmp	r0, #13
 800ccaa:	bfda      	itte	le
 800ccac:	4b02      	ldrle	r3, [pc, #8]	; (800ccb8 <PixelType::GetType(pixel::Type)+0x10>)
 800ccae:	eb03 00c0 	addle.w	r0, r3, r0, lsl #3
 800ccb2:	4802      	ldrgt	r0, [pc, #8]	; (800ccbc <PixelType::GetType(pixel::Type)+0x14>)
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	0801648d 	stmdaeq	r1, {r0, r2, r3, r7, sl, sp, lr}
 800ccbc:	0801640f 	stmdaeq	r1, {r0, r1, r2, r3, sl, sp, lr}

0800ccc0 <PixelType::GetType(char const*)>:
 800ccc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	490f      	ldr	r1, [pc, #60]	; (800cd04 <PixelType::GetType(char const*)+0x44>)
 800ccc8:	1e66      	subs	r6, r4, #1
 800ccca:	1e4d      	subs	r5, r1, #1
 800cccc:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800ccd0:	461f      	mov	r7, r3
 800ccd2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ccd6:	2a19      	cmp	r2, #25
 800ccd8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ccdc:	bf98      	it	ls
 800ccde:	f103 0720 	addls.w	r7, r3, #32
 800cce2:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
 800cce6:	f1bc 0f19 	cmp.w	ip, #25
 800ccea:	bf98      	it	ls
 800ccec:	3220      	addls	r2, #32
 800ccee:	42ba      	cmp	r2, r7
 800ccf0:	d102      	bne.n	800ccf8 <PixelType::GetType(char const*)+0x38>
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1ea      	bne.n	800cccc <PixelType::GetType(char const*)+0xc>
 800ccf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	280e      	cmp	r0, #14
 800ccfc:	f101 0108 	add.w	r1, r1, #8
 800cd00:	d1e2      	bne.n	800ccc8 <PixelType::GetType(char const*)+0x8>
 800cd02:	e7f8      	b.n	800ccf6 <PixelType::GetType(char const*)+0x36>
 800cd04:	0801648d 	stmdaeq	r1, {r0, r2, r3, r7, sl, sp, lr}

0800cd08 <PixelType::GetMap(char const*)>:
 800cd08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	4b11      	ldr	r3, [pc, #68]	; (800cd54 <PixelType::GetMap(char const*)+0x4c>)
 800cd10:	1e5c      	subs	r4, r3, #1
 800cd12:	1e6e      	subs	r6, r5, #1
 800cd14:	f103 0c02 	add.w	ip, r3, #2
 800cd18:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800cd1c:	4617      	mov	r7, r2
 800cd1e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800cd22:	2919      	cmp	r1, #25
 800cd24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cd28:	bf98      	it	ls
 800cd2a:	f102 0720 	addls.w	r7, r2, #32
 800cd2e:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 800cd32:	f1be 0f19 	cmp.w	lr, #25
 800cd36:	bf98      	it	ls
 800cd38:	3120      	addls	r1, #32
 800cd3a:	42b9      	cmp	r1, r7
 800cd3c:	d005      	beq.n	800cd4a <PixelType::GetMap(char const*)+0x42>
 800cd3e:	3001      	adds	r0, #1
 800cd40:	2806      	cmp	r0, #6
 800cd42:	f103 0304 	add.w	r3, r3, #4
 800cd46:	d1e3      	bne.n	800cd10 <PixelType::GetMap(char const*)+0x8>
 800cd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd4a:	2a00      	cmp	r2, #0
 800cd4c:	d0fc      	beq.n	800cd48 <PixelType::GetMap(char const*)+0x40>
 800cd4e:	4564      	cmp	r4, ip
 800cd50:	d1e2      	bne.n	800cd18 <PixelType::GetMap(char const*)+0x10>
 800cd52:	e7f9      	b.n	800cd48 <PixelType::GetMap(char const*)+0x40>
 800cd54:	08016475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, sp, lr}

0800cd58 <PixelType::GetMap(pixel::Map)>:
 800cd58:	2805      	cmp	r0, #5
 800cd5a:	bfda      	itte	le
 800cd5c:	4b02      	ldrle	r3, [pc, #8]	; (800cd68 <PixelType::GetMap(pixel::Map)+0x10>)
 800cd5e:	eb03 0080 	addle.w	r0, r3, r0, lsl #2
 800cd62:	4802      	ldrgt	r0, [pc, #8]	; (800cd6c <PixelType::GetMap(pixel::Map)+0x14>)
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	08016475 	stmdaeq	r1, {r0, r2, r4, r5, r6, sl, sp, lr}
 800cd6c:	0801646b 	stmdaeq	r1, {r0, r1, r3, r5, r6, sl, sp, lr}

0800cd70 <PixelType::ConvertTxH(unsigned char)>:
 800cd70:	28f0      	cmp	r0, #240	; 0xf0
 800cd72:	d010      	beq.n	800cd96 <PixelType::ConvertTxH(unsigned char)+0x26>
 800cd74:	d807      	bhi.n	800cd86 <PixelType::ConvertTxH(unsigned char)+0x16>
 800cd76:	28c0      	cmp	r0, #192	; 0xc0
 800cd78:	d00f      	beq.n	800cd9a <PixelType::ConvertTxH(unsigned char)+0x2a>
 800cd7a:	28e0      	cmp	r0, #224	; 0xe0
 800cd7c:	d00f      	beq.n	800cd9e <PixelType::ConvertTxH(unsigned char)+0x2e>
 800cd7e:	2880      	cmp	r0, #128	; 0x80
 800cd80:	d113      	bne.n	800cdaa <PixelType::ConvertTxH(unsigned char)+0x3a>
 800cd82:	480b      	ldr	r0, [pc, #44]	; (800cdb0 <PixelType::ConvertTxH(unsigned char)+0x40>)
 800cd84:	4770      	bx	lr
 800cd86:	28fc      	cmp	r0, #252	; 0xfc
 800cd88:	d00b      	beq.n	800cda2 <PixelType::ConvertTxH(unsigned char)+0x32>
 800cd8a:	28fe      	cmp	r0, #254	; 0xfe
 800cd8c:	d00b      	beq.n	800cda6 <PixelType::ConvertTxH(unsigned char)+0x36>
 800cd8e:	28f8      	cmp	r0, #248	; 0xf8
 800cd90:	d10b      	bne.n	800cdaa <PixelType::ConvertTxH(unsigned char)+0x3a>
 800cd92:	4808      	ldr	r0, [pc, #32]	; (800cdb4 <PixelType::ConvertTxH(unsigned char)+0x44>)
 800cd94:	4770      	bx	lr
 800cd96:	4808      	ldr	r0, [pc, #32]	; (800cdb8 <PixelType::ConvertTxH(unsigned char)+0x48>)
 800cd98:	4770      	bx	lr
 800cd9a:	4808      	ldr	r0, [pc, #32]	; (800cdbc <PixelType::ConvertTxH(unsigned char)+0x4c>)
 800cd9c:	4770      	bx	lr
 800cd9e:	4808      	ldr	r0, [pc, #32]	; (800cdc0 <PixelType::ConvertTxH(unsigned char)+0x50>)
 800cda0:	4770      	bx	lr
 800cda2:	4808      	ldr	r0, [pc, #32]	; (800cdc4 <PixelType::ConvertTxH(unsigned char)+0x54>)
 800cda4:	4770      	bx	lr
 800cda6:	4808      	ldr	r0, [pc, #32]	; (800cdc8 <PixelType::ConvertTxH(unsigned char)+0x58>)
 800cda8:	4770      	bx	lr
 800cdaa:	2000      	movs	r0, #0
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	3e200000 	cdpcc	0, 2, cr0, cr0, cr0, {0}
 800cdb4:	3f480000 	svccc	0x00480000
 800cdb8:	3f200000 	svccc	0x00200000
 800cdbc:	3ea00000 	cdpcc	0, 10, cr0, cr0, cr0, {0}
 800cdc0:	3ef00000 	cdpcc	0, 15, cr0, cr0, cr0, {0}
 800cdc4:	3f700000 	svccc	0x00700000
 800cdc8:	3f8c0000 	svccc	0x008c0000

0800cdcc <PixelType::ConvertTxH(float)>:
 800cdcc:	b510      	push	{r4, lr}
 800cdce:	491d      	ldr	r1, [pc, #116]	; (800ce44 <PixelType::ConvertTxH(float)+0x78>)
 800cdd0:	4604      	mov	r4, r0
 800cdd2:	f7fa fe75 	bl	8007ac0 <__aeabi_fcmplt>
 800cdd6:	bb30      	cbnz	r0, 800ce26 <PixelType::ConvertTxH(float)+0x5a>
 800cdd8:	4620      	mov	r0, r4
 800cdda:	491b      	ldr	r1, [pc, #108]	; (800ce48 <PixelType::ConvertTxH(float)+0x7c>)
 800cddc:	f7fa fe70 	bl	8007ac0 <__aeabi_fcmplt>
 800cde0:	bb18      	cbnz	r0, 800ce2a <PixelType::ConvertTxH(float)+0x5e>
 800cde2:	4620      	mov	r0, r4
 800cde4:	4919      	ldr	r1, [pc, #100]	; (800ce4c <PixelType::ConvertTxH(float)+0x80>)
 800cde6:	f7fa fe6b 	bl	8007ac0 <__aeabi_fcmplt>
 800cdea:	bb00      	cbnz	r0, 800ce2e <PixelType::ConvertTxH(float)+0x62>
 800cdec:	4620      	mov	r0, r4
 800cdee:	4918      	ldr	r1, [pc, #96]	; (800ce50 <PixelType::ConvertTxH(float)+0x84>)
 800cdf0:	f7fa fe66 	bl	8007ac0 <__aeabi_fcmplt>
 800cdf4:	b9e8      	cbnz	r0, 800ce32 <PixelType::ConvertTxH(float)+0x66>
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	4916      	ldr	r1, [pc, #88]	; (800ce54 <PixelType::ConvertTxH(float)+0x88>)
 800cdfa:	f7fa fe61 	bl	8007ac0 <__aeabi_fcmplt>
 800cdfe:	b9d0      	cbnz	r0, 800ce36 <PixelType::ConvertTxH(float)+0x6a>
 800ce00:	4620      	mov	r0, r4
 800ce02:	4915      	ldr	r1, [pc, #84]	; (800ce58 <PixelType::ConvertTxH(float)+0x8c>)
 800ce04:	f7fa fe5c 	bl	8007ac0 <__aeabi_fcmplt>
 800ce08:	b9b8      	cbnz	r0, 800ce3a <PixelType::ConvertTxH(float)+0x6e>
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	4913      	ldr	r1, [pc, #76]	; (800ce5c <PixelType::ConvertTxH(float)+0x90>)
 800ce0e:	f7fa fe57 	bl	8007ac0 <__aeabi_fcmplt>
 800ce12:	b9a0      	cbnz	r0, 800ce3e <PixelType::ConvertTxH(float)+0x72>
 800ce14:	4620      	mov	r0, r4
 800ce16:	4912      	ldr	r1, [pc, #72]	; (800ce60 <PixelType::ConvertTxH(float)+0x94>)
 800ce18:	f7fa fe52 	bl	8007ac0 <__aeabi_fcmplt>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	bf14      	ite	ne
 800ce20:	20fe      	movne	r0, #254	; 0xfe
 800ce22:	2000      	moveq	r0, #0
 800ce24:	bd10      	pop	{r4, pc}
 800ce26:	2000      	movs	r0, #0
 800ce28:	e7fc      	b.n	800ce24 <PixelType::ConvertTxH(float)+0x58>
 800ce2a:	2080      	movs	r0, #128	; 0x80
 800ce2c:	e7fa      	b.n	800ce24 <PixelType::ConvertTxH(float)+0x58>
 800ce2e:	20c0      	movs	r0, #192	; 0xc0
 800ce30:	e7f8      	b.n	800ce24 <PixelType::ConvertTxH(float)+0x58>
 800ce32:	20e0      	movs	r0, #224	; 0xe0
 800ce34:	e7f6      	b.n	800ce24 <PixelType::ConvertTxH(float)+0x58>
 800ce36:	20f0      	movs	r0, #240	; 0xf0
 800ce38:	e7f4      	b.n	800ce24 <PixelType::ConvertTxH(float)+0x58>
 800ce3a:	20f8      	movs	r0, #248	; 0xf8
 800ce3c:	e7f2      	b.n	800ce24 <PixelType::ConvertTxH(float)+0x58>
 800ce3e:	20fc      	movs	r0, #252	; 0xfc
 800ce40:	e7f0      	b.n	800ce24 <PixelType::ConvertTxH(float)+0x58>
 800ce42:	bf00      	nop
 800ce44:	3da00000 	stccc	0, cr0, [r0]
 800ce48:	3e700000 	cdpcc	0, 7, cr0, cr0, cr0, {0}
 800ce4c:	3ec80000 	cdpcc	0, 12, cr0, cr8, cr0, {0}
 800ce50:	3f0c0000 	svccc	0x000c0000
 800ce54:	3f340000 	svccc	0x00340000
 800ce58:	3f5c0000 	svccc	0x005c0000
 800ce5c:	3f820000 	svccc	0x00820000
 800ce60:	3f960000 	svccc	0x00960000

0800ce64 <WS28xx::~WS28xx()>:
 800ce64:	2200      	movs	r2, #0
 800ce66:	4b01      	ldr	r3, [pc, #4]	; (800ce6c <WS28xx::~WS28xx()+0x8>)
 800ce68:	601a      	str	r2, [r3, #0]
 800ce6a:	4770      	bx	lr
 800ce6c:	20001954 	andcs	r1, r0, r4, asr r9

0800ce70 <WS28xx::Update()>:
 800ce70:	2200      	movs	r2, #0
 800ce72:	b430      	push	{r4, r5}
 800ce74:	4b0b      	ldr	r3, [pc, #44]	; (800cea4 <WS28xx::Update()+0x34>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	68c1      	ldr	r1, [r0, #12]
 800ce7a:	6944      	ldr	r4, [r0, #20]
 800ce7c:	4299      	cmp	r1, r3
 800ce7e:	d902      	bls.n	800ce86 <WS28xx::Update()+0x16>
 800ce80:	54e2      	strb	r2, [r4, r3]
 800ce82:	3301      	adds	r3, #1
 800ce84:	e7f8      	b.n	800ce78 <WS28xx::Update()+0x8>
 800ce86:	2300      	movs	r3, #0
 800ce88:	6980      	ldr	r0, [r0, #24]
 800ce8a:	084d      	lsrs	r5, r1, #1
 800ce8c:	429d      	cmp	r5, r3
 800ce8e:	d006      	beq.n	800ce9e <WS28xx::Update()+0x2e>
 800ce90:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 800ce94:	ba52      	rev16	r2, r2
 800ce96:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	e7f6      	b.n	800ce8c <WS28xx::Update()+0x1c>
 800ce9e:	bc30      	pop	{r4, r5}
 800cea0:	f007 bff0 	b.w	8014e84 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>
 800cea4:	20001950 	andcs	r1, r0, r0, asr r9

0800cea8 <WS28xx::Print()>:
 800cea8:	b513      	push	{r0, r1, r4, lr}
 800ceaa:	4604      	mov	r4, r0
 800ceac:	4819      	ldr	r0, [pc, #100]	; (800cf14 <WS28xx::Print()+0x6c>)
 800ceae:	f006 fef9 	bl	8013ca4 <printf>
 800ceb2:	6820      	ldr	r0, [r4, #0]
 800ceb4:	f7ff fef8 	bl	800cca8 <PixelType::GetType(pixel::Type)>
 800ceb8:	6822      	ldr	r2, [r4, #0]
 800ceba:	4601      	mov	r1, r0
 800cebc:	4816      	ldr	r0, [pc, #88]	; (800cf18 <WS28xx::Print()+0x70>)
 800cebe:	f006 fef1 	bl	8013ca4 <printf>
 800cec2:	6861      	ldr	r1, [r4, #4]
 800cec4:	4815      	ldr	r0, [pc, #84]	; (800cf1c <WS28xx::Print()+0x74>)
 800cec6:	f006 feed 	bl	8013ca4 <printf>
 800ceca:	7ca3      	ldrb	r3, [r4, #18]
 800cecc:	b1fb      	cbz	r3, 800cf0e <WS28xx::Print()+0x66>
 800cece:	68a0      	ldr	r0, [r4, #8]
 800ced0:	f7ff ff42 	bl	800cd58 <PixelType::GetMap(pixel::Map)>
 800ced4:	68a2      	ldr	r2, [r4, #8]
 800ced6:	4601      	mov	r1, r0
 800ced8:	4811      	ldr	r0, [pc, #68]	; (800cf20 <WS28xx::Print()+0x78>)
 800ceda:	f006 fee3 	bl	8013ca4 <printf>
 800cede:	7c20      	ldrb	r0, [r4, #16]
 800cee0:	f7ff ff46 	bl	800cd70 <PixelType::ConvertTxH(unsigned char)>
 800cee4:	f7fa fa98 	bl	8007418 <__aeabi_f2d>
 800cee8:	460b      	mov	r3, r1
 800ceea:	7c21      	ldrb	r1, [r4, #16]
 800ceec:	4602      	mov	r2, r0
 800ceee:	9100      	str	r1, [sp, #0]
 800cef0:	480c      	ldr	r0, [pc, #48]	; (800cf24 <WS28xx::Print()+0x7c>)
 800cef2:	f006 fed7 	bl	8013ca4 <printf>
 800cef6:	7c60      	ldrb	r0, [r4, #17]
 800cef8:	f7ff ff3a 	bl	800cd70 <PixelType::ConvertTxH(unsigned char)>
 800cefc:	f7fa fa8c 	bl	8007418 <__aeabi_f2d>
 800cf00:	460b      	mov	r3, r1
 800cf02:	7c61      	ldrb	r1, [r4, #17]
 800cf04:	4602      	mov	r2, r0
 800cf06:	9100      	str	r1, [sp, #0]
 800cf08:	4807      	ldr	r0, [pc, #28]	; (800cf28 <WS28xx::Print()+0x80>)
 800cf0a:	f006 fecb 	bl	8013ca4 <printf>
 800cf0e:	b002      	add	sp, #8
 800cf10:	bd10      	pop	{r4, pc}
 800cf12:	bf00      	nop
 800cf14:	080164fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, sl, sp, lr}
 800cf18:	0801650f 	stmdaeq	r1, {r0, r1, r2, r3, r8, sl, sp, lr}
 800cf1c:	08016523 	stmdaeq	r1, {r0, r1, r5, r8, sl, sp, lr}
 800cf20:	08016532 	stmdaeq	r1, {r1, r4, r5, r8, sl, sp, lr}
 800cf24:	08016546 	stmdaeq	r1, {r1, r2, r6, r8, sl, sp, lr}
 800cf28:	0801655e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, sl, sp, lr}

0800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	2480      	movs	r4, #128	; 0x80
 800cf30:	1c4b      	adds	r3, r1, #1
 800cf32:	3109      	adds	r1, #9
 800cf34:	4222      	tst	r2, r4
 800cf36:	bf14      	ite	ne
 800cf38:	7c46      	ldrbne	r6, [r0, #17]
 800cf3a:	7c06      	ldrbeq	r6, [r0, #16]
 800cf3c:	6945      	ldr	r5, [r0, #20]
 800cf3e:	0864      	lsrs	r4, r4, #1
 800cf40:	54ee      	strb	r6, [r5, r3]
 800cf42:	3301      	adds	r3, #1
 800cf44:	4299      	cmp	r1, r3
 800cf46:	d1f5      	bne.n	800cf34 <WS28xx::SetColorWS28xx(unsigned int, unsigned char)+0x8>
 800cf48:	bd70      	pop	{r4, r5, r6, pc}

0800cf4a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>:
 800cf4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4e:	461d      	mov	r5, r3
 800cf50:	7c83      	ldrb	r3, [r0, #18]
 800cf52:	4614      	mov	r4, r2
 800cf54:	f89d 6018 	ldrb.w	r6, [sp, #24]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d03c      	beq.n	800cfd6 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x8c>
 800cf5c:	2318      	movs	r3, #24
 800cf5e:	4359      	muls	r1, r3
 800cf60:	6883      	ldr	r3, [r0, #8]
 800cf62:	f101 0808 	add.w	r8, r1, #8
 800cf66:	3b01      	subs	r3, #1
 800cf68:	f101 0710 	add.w	r7, r1, #16
 800cf6c:	2b04      	cmp	r3, #4
 800cf6e:	d82d      	bhi.n	800cfcc <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x82>
 800cf70:	e8df f003 	tbb	[pc, r3]
 800cf74:	22191003 	andscs	r1, r9, #3
 800cf78:	46220027 	strtmi	r0, [r2], -r7, lsr #32
 800cf7c:	f7ff ffd6 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800cf80:	4632      	mov	r2, r6
 800cf82:	4641      	mov	r1, r8
 800cf84:	f7ff ffd2 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800cf88:	462a      	mov	r2, r5
 800cf8a:	4639      	mov	r1, r7
 800cf8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf90:	f7ff bfcc 	b.w	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800cf94:	462a      	mov	r2, r5
 800cf96:	f7ff ffc9 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800cf9a:	4622      	mov	r2, r4
 800cf9c:	4641      	mov	r1, r8
 800cf9e:	f7ff ffc5 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800cfa2:	4632      	mov	r2, r6
 800cfa4:	e7f1      	b.n	800cf8a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x40>
 800cfa6:	462a      	mov	r2, r5
 800cfa8:	f7ff ffc0 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800cfac:	4632      	mov	r2, r6
 800cfae:	4641      	mov	r1, r8
 800cfb0:	f7ff ffbc 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800cfb4:	4622      	mov	r2, r4
 800cfb6:	e7e8      	b.n	800cf8a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x40>
 800cfb8:	4632      	mov	r2, r6
 800cfba:	f7ff ffb7 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	e7df      	b.n	800cf82 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x38>
 800cfc2:	4632      	mov	r2, r6
 800cfc4:	f7ff ffb2 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800cfc8:	462a      	mov	r2, r5
 800cfca:	e7f0      	b.n	800cfae <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x64>
 800cfcc:	4622      	mov	r2, r4
 800cfce:	f7ff ffad 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800cfd2:	462a      	mov	r2, r5
 800cfd4:	e7e2      	b.n	800cf9c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0x52>
 800cfd6:	6803      	ldr	r3, [r0, #0]
 800cfd8:	f1a3 020b 	sub.w	r2, r3, #11
 800cfdc:	2a01      	cmp	r2, #1
 800cfde:	6942      	ldr	r2, [r0, #20]
 800cfe0:	d811      	bhi.n	800d006 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0xbc>
 800cfe2:	7cc3      	ldrb	r3, [r0, #19]
 800cfe4:	3101      	adds	r1, #1
 800cfe6:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800cfea:	6943      	ldr	r3, [r0, #20]
 800cfec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cff0:	705c      	strb	r4, [r3, #1]
 800cff2:	6943      	ldr	r3, [r0, #20]
 800cff4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cff8:	709d      	strb	r5, [r3, #2]
 800cffa:	6943      	ldr	r3, [r0, #20]
 800cffc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d000:	70ce      	strb	r6, [r1, #3]
 800d002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d006:	b94b      	cbnz	r3, 800d01c <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0xd2>
 800d008:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d00c:	5454      	strb	r4, [r2, r1]
 800d00e:	6943      	ldr	r3, [r0, #20]
 800d010:	440b      	add	r3, r1
 800d012:	705d      	strb	r5, [r3, #1]
 800d014:	6943      	ldr	r3, [r0, #20]
 800d016:	4419      	add	r1, r3
 800d018:	708e      	strb	r6, [r1, #2]
 800d01a:	e7f2      	b.n	800d002 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0xb8>
 800d01c:	ea6f 0396 	mvn.w	r3, r6, lsr #2
 800d020:	f084 07c0 	eor.w	r7, r4, #192	; 0xc0
 800d024:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d028:	ea43 1397 	orr.w	r3, r3, r7, lsr #6
 800d02c:	ea6f 1715 	mvn.w	r7, r5, lsr #4
 800d030:	f007 070c 	and.w	r7, r7, #12
 800d034:	433b      	orrs	r3, r7
 800d036:	3101      	adds	r1, #1
 800d038:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800d03c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
 800d040:	6943      	ldr	r3, [r0, #20]
 800d042:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d046:	705e      	strb	r6, [r3, #1]
 800d048:	6943      	ldr	r3, [r0, #20]
 800d04a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d04e:	709d      	strb	r5, [r3, #2]
 800d050:	6943      	ldr	r3, [r0, #20]
 800d052:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d056:	70cc      	strb	r4, [r1, #3]
 800d058:	e7d3      	b.n	800d002 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)+0xb8>
	...

0800d05c <WS28xx::SetupBuffers()>:
 800d05c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d05e:	4604      	mov	r4, r0
 800d060:	a803      	add	r0, sp, #12
 800d062:	f007 ff07 	bl	8014e74 <gd32_spi_dma_tx_prepare(unsigned int*)>
 800d066:	2100      	movs	r1, #0
 800d068:	9b03      	ldr	r3, [sp, #12]
 800d06a:	6160      	str	r0, [r4, #20]
 800d06c:	085b      	lsrs	r3, r3, #1
 800d06e:	f023 0303 	bic.w	r3, r3, #3
 800d072:	4403      	add	r3, r0
 800d074:	61a3      	str	r3, [r4, #24]
 800d076:	6823      	ldr	r3, [r4, #0]
 800d078:	7001      	strb	r1, [r0, #0]
 800d07a:	3b0b      	subs	r3, #11
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d82d      	bhi.n	800d0dc <WS28xx::SetupBuffers()+0x80>
 800d080:	460d      	mov	r5, r1
 800d082:	460e      	mov	r6, r1
 800d084:	7041      	strb	r1, [r0, #1]
 800d086:	7081      	strb	r1, [r0, #2]
 800d088:	70c1      	strb	r1, [r0, #3]
 800d08a:	6863      	ldr	r3, [r4, #4]
 800d08c:	42ab      	cmp	r3, r5
 800d08e:	d908      	bls.n	800d0a2 <WS28xx::SetupBuffers()+0x46>
 800d090:	2300      	movs	r3, #0
 800d092:	4629      	mov	r1, r5
 800d094:	461a      	mov	r2, r3
 800d096:	4620      	mov	r0, r4
 800d098:	9600      	str	r6, [sp, #0]
 800d09a:	f7ff ff56 	bl	800cf4a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800d09e:	3501      	adds	r5, #1
 800d0a0:	e7f3      	b.n	800d08a <WS28xx::SetupBuffers()+0x2e>
 800d0a2:	6821      	ldr	r1, [r4, #0]
 800d0a4:	68e2      	ldr	r2, [r4, #12]
 800d0a6:	390b      	subs	r1, #11
 800d0a8:	2901      	cmp	r1, #1
 800d0aa:	bf94      	ite	ls
 800d0ac:	21ff      	movls	r1, #255	; 0xff
 800d0ae:	2100      	movhi	r1, #0
 800d0b0:	6960      	ldr	r0, [r4, #20]
 800d0b2:	3a04      	subs	r2, #4
 800d0b4:	1883      	adds	r3, r0, r2
 800d0b6:	5481      	strb	r1, [r0, r2]
 800d0b8:	7059      	strb	r1, [r3, #1]
 800d0ba:	7099      	strb	r1, [r3, #2]
 800d0bc:	70d9      	strb	r1, [r3, #3]
 800d0be:	2100      	movs	r1, #0
 800d0c0:	68e3      	ldr	r3, [r4, #12]
 800d0c2:	4a0e      	ldr	r2, [pc, #56]	; (800d0fc <WS28xx::SetupBuffers()+0xa0>)
 800d0c4:	6013      	str	r3, [r2, #0]
 800d0c6:	1cda      	adds	r2, r3, #3
 800d0c8:	f022 0203 	bic.w	r2, r2, #3
 800d0cc:	60e2      	str	r2, [r4, #12]
 800d0ce:	68e2      	ldr	r2, [r4, #12]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d910      	bls.n	800d0f6 <WS28xx::SetupBuffers()+0x9a>
 800d0d4:	6962      	ldr	r2, [r4, #20]
 800d0d6:	54d1      	strb	r1, [r2, r3]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	e7f8      	b.n	800d0ce <WS28xx::SetupBuffers()+0x72>
 800d0dc:	6963      	ldr	r3, [r4, #20]
 800d0de:	6821      	ldr	r1, [r4, #0]
 800d0e0:	1c5a      	adds	r2, r3, #1
 800d0e2:	b101      	cbz	r1, 800d0e6 <WS28xx::SetupBuffers()+0x8a>
 800d0e4:	7c21      	ldrb	r1, [r4, #16]
 800d0e6:	68e0      	ldr	r0, [r4, #12]
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	4403      	add	r3, r0
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d0e6      	beq.n	800d0be <WS28xx::SetupBuffers()+0x62>
 800d0f0:	f802 1b01 	strb.w	r1, [r2], #1
 800d0f4:	e7fa      	b.n	800d0ec <WS28xx::SetupBuffers()+0x90>
 800d0f6:	b004      	add	sp, #16
 800d0f8:	bd70      	pop	{r4, r5, r6, pc}
 800d0fa:	bf00      	nop
 800d0fc:	20001950 	andcs	r1, r0, r0, asr r9

0800d100 <WS28xx::WS28xx(PixelConfiguration&)>:
 800d100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d102:	23aa      	movs	r3, #170	; 0xaa
 800d104:	2203      	movs	r2, #3
 800d106:	e9c0 2300 	strd	r2, r3, [r0]
 800d10a:	2306      	movs	r3, #6
 800d10c:	6083      	str	r3, [r0, #8]
 800d10e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800d112:	8243      	strh	r3, [r0, #18]
 800d114:	2300      	movs	r3, #0
 800d116:	460d      	mov	r5, r1
 800d118:	4604      	mov	r4, r0
 800d11a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 800d11e:	4b17      	ldr	r3, [pc, #92]	; (800d17c <WS28xx::WS28xx(PixelConfiguration&)+0x7c>)
 800d120:	a901      	add	r1, sp, #4
 800d122:	6018      	str	r0, [r3, #0]
 800d124:	4628      	mov	r0, r5
 800d126:	f7ff fac7 	bl	800c6b8 <PixelConfiguration::Validate(unsigned int&)>
 800d12a:	4628      	mov	r0, r5
 800d12c:	f7ff fb30 	bl	800c790 <PixelConfiguration::Dump()>
 800d130:	68ab      	ldr	r3, [r5, #8]
 800d132:	686a      	ldr	r2, [r5, #4]
 800d134:	60a3      	str	r3, [r4, #8]
 800d136:	8a2b      	ldrh	r3, [r5, #16]
 800d138:	6829      	ldr	r1, [r5, #0]
 800d13a:	8223      	strh	r3, [r4, #16]
 800d13c:	7cab      	ldrb	r3, [r5, #18]
 800d13e:	7ce8      	ldrb	r0, [r5, #19]
 800d140:	74e3      	strb	r3, [r4, #19]
 800d142:	9b01      	ldr	r3, [sp, #4]
 800d144:	6021      	str	r1, [r4, #0]
 800d146:	4353      	muls	r3, r2
 800d148:	6062      	str	r2, [r4, #4]
 800d14a:	74a0      	strb	r0, [r4, #18]
 800d14c:	b998      	cbnz	r0, 800d176 <WS28xx::WS28xx(PixelConfiguration&)+0x76>
 800d14e:	390b      	subs	r1, #11
 800d150:	2902      	cmp	r1, #2
 800d152:	60e3      	str	r3, [r4, #12]
 800d154:	bf9e      	ittt	ls
 800d156:	68e3      	ldrls	r3, [r4, #12]
 800d158:	3208      	addls	r2, #8
 800d15a:	18d2      	addls	r2, r2, r3
 800d15c:	4620      	mov	r0, r4
 800d15e:	bf98      	it	ls
 800d160:	60e2      	strls	r2, [r4, #12]
 800d162:	f7ff ff7b 	bl	800d05c <WS28xx::SetupBuffers()>
 800d166:	f007 fdff 	bl	8014d68 <gd32_spi_dma_begin()>
 800d16a:	68e8      	ldr	r0, [r5, #12]
 800d16c:	f007 fe6e 	bl	8014e4c <gd32_spi_dma_set_speed_hz(unsigned int)>
 800d170:	4620      	mov	r0, r4
 800d172:	b003      	add	sp, #12
 800d174:	bd30      	pop	{r4, r5, pc}
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	3301      	adds	r3, #1
 800d17a:	e7e8      	b.n	800d14e <WS28xx::WS28xx(PixelConfiguration&)+0x4e>
 800d17c:	20001954 	andcs	r1, r0, r4, asr r9

0800d180 <WS28xx::Blackout()>:
 800d180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d182:	2100      	movs	r1, #0
 800d184:	6802      	ldr	r2, [r0, #0]
 800d186:	6943      	ldr	r3, [r0, #20]
 800d188:	3a0b      	subs	r2, #11
 800d18a:	2a02      	cmp	r2, #2
 800d18c:	7019      	strb	r1, [r3, #0]
 800d18e:	d827      	bhi.n	800d1e0 <WS28xx::Blackout()+0x60>
 800d190:	460c      	mov	r4, r1
 800d192:	460d      	mov	r5, r1
 800d194:	7059      	strb	r1, [r3, #1]
 800d196:	7099      	strb	r1, [r3, #2]
 800d198:	70d9      	strb	r1, [r3, #3]
 800d19a:	6843      	ldr	r3, [r0, #4]
 800d19c:	42a3      	cmp	r3, r4
 800d19e:	d907      	bls.n	800d1b0 <WS28xx::Blackout()+0x30>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4621      	mov	r1, r4
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	9500      	str	r5, [sp, #0]
 800d1a8:	f7ff fecf 	bl	800cf4a <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char)>
 800d1ac:	3401      	adds	r4, #1
 800d1ae:	e7f4      	b.n	800d19a <WS28xx::Blackout()+0x1a>
 800d1b0:	6801      	ldr	r1, [r0, #0]
 800d1b2:	68c2      	ldr	r2, [r0, #12]
 800d1b4:	390b      	subs	r1, #11
 800d1b6:	2901      	cmp	r1, #1
 800d1b8:	bf94      	ite	ls
 800d1ba:	21ff      	movls	r1, #255	; 0xff
 800d1bc:	2100      	movhi	r1, #0
 800d1be:	6944      	ldr	r4, [r0, #20]
 800d1c0:	3a04      	subs	r2, #4
 800d1c2:	18a3      	adds	r3, r4, r2
 800d1c4:	54a1      	strb	r1, [r4, r2]
 800d1c6:	7059      	strb	r1, [r3, #1]
 800d1c8:	7099      	strb	r1, [r3, #2]
 800d1ca:	70d9      	strb	r1, [r3, #3]
 800d1cc:	f7ff fe50 	bl	800ce70 <WS28xx::Update()>
 800d1d0:	f3bf 8f6f 	isb	sy
 800d1d4:	f007 fe70 	bl	8014eb8 <gd32_spi_dma_tx_is_active()>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	d1f9      	bne.n	800d1d0 <WS28xx::Blackout()+0x50>
 800d1dc:	b003      	add	sp, #12
 800d1de:	bd30      	pop	{r4, r5, pc}
 800d1e0:	6943      	ldr	r3, [r0, #20]
 800d1e2:	6801      	ldr	r1, [r0, #0]
 800d1e4:	1c5a      	adds	r2, r3, #1
 800d1e6:	b101      	cbz	r1, 800d1ea <WS28xx::Blackout()+0x6a>
 800d1e8:	7c01      	ldrb	r1, [r0, #16]
 800d1ea:	68c4      	ldr	r4, [r0, #12]
 800d1ec:	3401      	adds	r4, #1
 800d1ee:	4423      	add	r3, r4
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d0eb      	beq.n	800d1cc <WS28xx::Blackout()+0x4c>
 800d1f4:	f802 1b01 	strb.w	r1, [r2], #1
 800d1f8:	e7fa      	b.n	800d1f0 <WS28xx::Blackout()+0x70>

0800d1fa <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)>:
 800d1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1fc:	4615      	mov	r5, r2
 800d1fe:	461a      	mov	r2, r3
 800d200:	6803      	ldr	r3, [r0, #0]
 800d202:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800d206:	2b07      	cmp	r3, #7
 800d208:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800d20c:	d114      	bne.n	800d238 <WS28xx::SetPixel(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char)+0x3e>
 800d20e:	014c      	lsls	r4, r1, #5
 800d210:	4621      	mov	r1, r4
 800d212:	f7ff fe8b 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800d216:	462a      	mov	r2, r5
 800d218:	f104 0108 	add.w	r1, r4, #8
 800d21c:	f7ff fe86 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800d220:	463a      	mov	r2, r7
 800d222:	f104 0110 	add.w	r1, r4, #16
 800d226:	f7ff fe81 	bl	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800d22a:	4632      	mov	r2, r6
 800d22c:	f104 0118 	add.w	r1, r4, #24
 800d230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d234:	f7ff be7a 	b.w	800cf2c <WS28xx::SetColorWS28xx(unsigned int, unsigned char)>
 800d238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d23c <RemoteConfig::HandleList()>:
 800d23c:	2212      	movs	r2, #18
 800d23e:	6803      	ldr	r3, [r0, #0]
 800d240:	492f      	ldr	r1, [pc, #188]	; (800d300 <RemoteConfig::HandleList()+0xc4>)
 800d242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d246:	fb02 1103 	mla	r1, r2, r3, r1
 800d24a:	220c      	movs	r2, #12
 800d24c:	4604      	mov	r4, r0
 800d24e:	6843      	ldr	r3, [r0, #4]
 800d250:	482c      	ldr	r0, [pc, #176]	; (800d304 <RemoteConfig::HandleList()+0xc8>)
 800d252:	4e2d      	ldr	r6, [pc, #180]	; (800d308 <RemoteConfig::HandleList()+0xcc>)
 800d254:	fb02 0003 	mla	r0, r2, r3, r0
 800d258:	4b2c      	ldr	r3, [pc, #176]	; (800d30c <RemoteConfig::HandleList()+0xd0>)
 800d25a:	4f2d      	ldr	r7, [pc, #180]	; (800d310 <RemoteConfig::HandleList()+0xd4>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	6835      	ldr	r5, [r6, #0]
 800d260:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800d264:	f897 9009 	ldrb.w	r9, [r7, #9]
 800d268:	fa5f f38c 	uxtb.w	r3, ip
 800d26c:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 800d270:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800d274:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800d278:	b089      	sub	sp, #36	; 0x24
 800d27a:	3507      	adds	r5, #7
 800d27c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 800d280:	f1b9 0f00 	cmp.w	r9, #0
 800d284:	d020      	beq.n	800d2c8 <RemoteConfig::HandleList()+0x8c>
 800d286:	b2d2      	uxtb	r2, r2
 800d288:	3709      	adds	r7, #9
 800d28a:	9201      	str	r2, [sp, #4]
 800d28c:	fa5f f28c 	uxtb.w	r2, ip
 800d290:	e9cd 1003 	strd	r1, r0, [sp, #12]
 800d294:	9200      	str	r2, [sp, #0]
 800d296:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800d29a:	4628      	mov	r0, r5
 800d29c:	e9cd 8705 	strd	r8, r7, [sp, #20]
 800d2a0:	4a1c      	ldr	r2, [pc, #112]	; (800d314 <RemoteConfig::HandleList()+0xd8>)
 800d2a2:	f8cd e008 	str.w	lr, [sp, #8]
 800d2a6:	f006 fd25 	bl	8013cf4 <snprintf>
 800d2aa:	8ba3      	ldrh	r3, [r4, #28]
 800d2ac:	2b05      	cmp	r3, #5
 800d2ae:	d11b      	bne.n	800d2e8 <RemoteConfig::HandleList()+0xac>
 800d2b0:	f642 1305 	movw	r3, #10501	; 0x2905
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	69a3      	ldr	r3, [r4, #24]
 800d2b8:	b282      	uxth	r2, r0
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	7d20      	ldrb	r0, [r4, #20]
 800d2be:	f002 fd71 	bl	800fda4 <udp_send>
 800d2c2:	b009      	add	sp, #36	; 0x24
 800d2c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2c8:	b2d2      	uxtb	r2, r2
 800d2ca:	9201      	str	r2, [sp, #4]
 800d2cc:	fa5f f28c 	uxtb.w	r2, ip
 800d2d0:	e9cd 0804 	strd	r0, r8, [sp, #16]
 800d2d4:	e9cd e102 	strd	lr, r1, [sp, #8]
 800d2d8:	9200      	str	r2, [sp, #0]
 800d2da:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800d2de:	4628      	mov	r0, r5
 800d2e0:	4a0d      	ldr	r2, [pc, #52]	; (800d318 <RemoteConfig::HandleList()+0xdc>)
 800d2e2:	f006 fd07 	bl	8013cf4 <snprintf>
 800d2e6:	e7e0      	b.n	800d2aa <RemoteConfig::HandleList()+0x6e>
 800d2e8:	2b06      	cmp	r3, #6
 800d2ea:	d1ea      	bne.n	800d2c2 <RemoteConfig::HandleList()+0x86>
 800d2ec:	6833      	ldr	r3, [r6, #0]
 800d2ee:	799b      	ldrb	r3, [r3, #6]
 800d2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2f2:	d1e6      	bne.n	800d2c2 <RemoteConfig::HandleList()+0x86>
 800d2f4:	f642 1305 	movw	r3, #10501	; 0x2905
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2fe:	e7db      	b.n	800d2b8 <RemoteConfig::HandleList()+0x7c>
 800d300:	0801662d 	stmdaeq	r1, {r0, r2, r3, r5, r9, sl, sp, lr}
 800d304:	080166cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, sl, sp, lr}
 800d308:	20001958 	andcs	r1, r0, r8, asr r9
 800d30c:	2000a298 	mulcs	r0, r8, r2
 800d310:	2000195c 	andcs	r1, r0, ip, asr r9
 800d314:	08016576 	stmdaeq	r1, {r1, r2, r4, r5, r6, r8, sl, sp, lr}
 800d318:	0801658f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r8, sl, sp, lr}

0800d31c <RemoteConfig::HandleDisplayGet()>:
 800d31c:	8b83      	ldrh	r3, [r0, #28]
 800d31e:	2b08      	cmp	r3, #8
 800d320:	d11b      	bne.n	800d35a <RemoteConfig::HandleDisplayGet()+0x3e>
 800d322:	4b0e      	ldr	r3, [pc, #56]	; (800d35c <RemoteConfig::HandleDisplayGet()+0x40>)
 800d324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4d0d      	ldr	r5, [pc, #52]	; (800d360 <RemoteConfig::HandleDisplayGet()+0x44>)
 800d32a:	7a19      	ldrb	r1, [r3, #8]
 800d32c:	4a0d      	ldr	r2, [pc, #52]	; (800d364 <RemoteConfig::HandleDisplayGet()+0x48>)
 800d32e:	4b0e      	ldr	r3, [pc, #56]	; (800d368 <RemoteConfig::HandleDisplayGet()+0x4c>)
 800d330:	4604      	mov	r4, r0
 800d332:	2900      	cmp	r1, #0
 800d334:	bf18      	it	ne
 800d336:	4613      	movne	r3, r2
 800d338:	6828      	ldr	r0, [r5, #0]
 800d33a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800d33e:	4a0b      	ldr	r2, [pc, #44]	; (800d36c <RemoteConfig::HandleDisplayGet()+0x50>)
 800d340:	f006 fcd8 	bl	8013cf4 <snprintf>
 800d344:	f642 1305 	movw	r3, #10501	; 0x2905
 800d348:	9300      	str	r3, [sp, #0]
 800d34a:	b282      	uxth	r2, r0
 800d34c:	69a3      	ldr	r3, [r4, #24]
 800d34e:	6829      	ldr	r1, [r5, #0]
 800d350:	7d20      	ldrb	r0, [r4, #20]
 800d352:	f002 fd27 	bl	800fda4 <udp_send>
 800d356:	b003      	add	sp, #12
 800d358:	bd30      	pop	{r4, r5, pc}
 800d35a:	4770      	bx	lr
 800d35c:	2000a870 	andcs	sl, r0, r0, ror r8
 800d360:	20001958 	andcs	r1, r0, r8, asr r9
 800d364:	080165a8 	stmdaeq	r1, {r3, r5, r7, r8, sl, sp, lr}
 800d368:	080165a5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, sp, lr}
 800d36c:	080165ac 	stmdaeq	r1, {r2, r3, r5, r7, r8, sl, sp, lr}

0800d370 <RemoteConfig::HandleVersion()>:
 800d370:	8b83      	ldrh	r3, [r0, #28]
 800d372:	2b08      	cmp	r3, #8
 800d374:	d114      	bne.n	800d3a0 <RemoteConfig::HandleVersion()+0x30>
 800d376:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d378:	4d0a      	ldr	r5, [pc, #40]	; (800d3a4 <RemoteConfig::HandleVersion()+0x34>)
 800d37a:	4604      	mov	r4, r0
 800d37c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800d380:	4b09      	ldr	r3, [pc, #36]	; (800d3a8 <RemoteConfig::HandleVersion()+0x38>)
 800d382:	4a0a      	ldr	r2, [pc, #40]	; (800d3ac <RemoteConfig::HandleVersion()+0x3c>)
 800d384:	6828      	ldr	r0, [r5, #0]
 800d386:	f006 fcb5 	bl	8013cf4 <snprintf>
 800d38a:	f642 1305 	movw	r3, #10501	; 0x2905
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	b282      	uxth	r2, r0
 800d392:	69a3      	ldr	r3, [r4, #24]
 800d394:	6829      	ldr	r1, [r5, #0]
 800d396:	7d20      	ldrb	r0, [r4, #20]
 800d398:	f002 fd04 	bl	800fda4 <udp_send>
 800d39c:	b003      	add	sp, #12
 800d39e:	bd30      	pop	{r4, r5, pc}
 800d3a0:	4770      	bx	lr
 800d3a2:	bf00      	nop
 800d3a4:	20001958 	andcs	r1, r0, r8, asr r9
 800d3a8:	2000a91a 	andcs	sl, r0, sl, lsl r9
 800d3ac:	080165b8 	stmdaeq	r1, {r3, r4, r5, r7, r8, sl, sp, lr}

0800d3b0 <RemoteConfig::HandleUptime()>:
 800d3b0:	7bc3      	ldrb	r3, [r0, #15]
 800d3b2:	b1e3      	cbz	r3, 800d3ee <RemoteConfig::HandleUptime()+0x3e>
 800d3b4:	4b0e      	ldr	r3, [pc, #56]	; (800d3f0 <RemoteConfig::HandleUptime()+0x40>)
 800d3b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3b8:	681a      	ldr	r2, [r3, #0]
 800d3ba:	8b83      	ldrh	r3, [r0, #28]
 800d3bc:	4604      	mov	r4, r0
 800d3be:	2b07      	cmp	r3, #7
 800d3c0:	d113      	bne.n	800d3ea <RemoteConfig::HandleUptime()+0x3a>
 800d3c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d3c6:	4d0b      	ldr	r5, [pc, #44]	; (800d3f4 <RemoteConfig::HandleUptime()+0x44>)
 800d3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3cc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800d3d0:	4a09      	ldr	r2, [pc, #36]	; (800d3f8 <RemoteConfig::HandleUptime()+0x48>)
 800d3d2:	6828      	ldr	r0, [r5, #0]
 800d3d4:	f006 fc8e 	bl	8013cf4 <snprintf>
 800d3d8:	f642 1305 	movw	r3, #10501	; 0x2905
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	b282      	uxth	r2, r0
 800d3e0:	69a3      	ldr	r3, [r4, #24]
 800d3e2:	6829      	ldr	r1, [r5, #0]
 800d3e4:	7d20      	ldrb	r0, [r4, #20]
 800d3e6:	f002 fcdd 	bl	800fda4 <udp_send>
 800d3ea:	b003      	add	sp, #12
 800d3ec:	bd30      	pop	{r4, r5, pc}
 800d3ee:	4770      	bx	lr
 800d3f0:	2000a97c 	andcs	sl, r0, ip, ror r9
 800d3f4:	20001958 	andcs	r1, r0, r8, asr r9
 800d3f8:	080165c3 	stmdaeq	r1, {r0, r1, r6, r7, r8, sl, sp, lr}

0800d3fc <RemoteConfig::HandleDisplaySet()>:
 800d3fc:	8b83      	ldrh	r3, [r0, #28]
 800d3fe:	2b09      	cmp	r3, #9
 800d400:	d10a      	bne.n	800d418 <RemoteConfig::HandleDisplaySet()+0x1c>
 800d402:	4b06      	ldr	r3, [pc, #24]	; (800d41c <RemoteConfig::HandleDisplaySet()+0x20>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	7a59      	ldrb	r1, [r3, #9]
 800d408:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d40c:	4259      	negs	r1, r3
 800d40e:	4159      	adcs	r1, r3
 800d410:	4b03      	ldr	r3, [pc, #12]	; (800d420 <RemoteConfig::HandleDisplaySet()+0x24>)
 800d412:	6818      	ldr	r0, [r3, #0]
 800d414:	f005 bc4a 	b.w	8012cac <Display::SetSleep(bool)>
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	20001958 	andcs	r1, r0, r8, asr r9
 800d420:	2000a870 	andcs	sl, r0, r0, ror r8

0800d424 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)>:
 800d424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d428:	2500      	movs	r5, #0
 800d42a:	461f      	mov	r7, r3
 800d42c:	6083      	str	r3, [r0, #8]
 800d42e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d432:	4604      	mov	r4, r0
 800d434:	4690      	mov	r8, r2
 800d436:	4689      	mov	r9, r1
 800d438:	f100 0a24 	add.w	sl, r0, #36	; 0x24
 800d43c:	e9c0 1200 	strd	r1, r2, [r0]
 800d440:	4e12      	ldr	r6, [pc, #72]	; (800d48c <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x68>)
 800d442:	e9c0 3505 	strd	r3, r5, [r0, #20]
 800d446:	f8df b048 	ldr.w	fp, [pc, #72]	; 800d490 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x6c>
 800d44a:	60c5      	str	r5, [r0, #12]
 800d44c:	8205      	strh	r5, [r0, #16]
 800d44e:	8385      	strh	r5, [r0, #28]
 800d450:	6205      	str	r5, [r0, #32]
 800d452:	4650      	mov	r0, sl
 800d454:	f000 fc94 	bl	800dd80 <HttpDaemon::HttpDaemon()>
 800d458:	4b0e      	ldr	r3, [pc, #56]	; (800d494 <RemoteConfig::RemoteConfig(remoteconfig::Node, remoteconfig::Output, unsigned int)+0x70>)
 800d45a:	4631      	mov	r1, r6
 800d45c:	f8db 0000 	ldr.w	r0, [fp]
 800d460:	601c      	str	r4, [r3, #0]
 800d462:	f003 f975 	bl	8010750 <Network::MacAddressCopyTo(unsigned char*)>
 800d466:	f642 1105 	movw	r1, #10501	; 0x2905
 800d46a:	f8db 0000 	ldr.w	r0, [fp]
 800d46e:	f886 9006 	strb.w	r9, [r6, #6]
 800d472:	f886 8007 	strb.w	r8, [r6, #7]
 800d476:	7237      	strb	r7, [r6, #8]
 800d478:	7275      	strb	r5, [r6, #9]
 800d47a:	f003 f963 	bl	8010744 <Network::Begin(unsigned short)>
 800d47e:	6160      	str	r0, [r4, #20]
 800d480:	4650      	mov	r0, sl
 800d482:	f000 fc95 	bl	800ddb0 <HttpDaemon::Start()>
 800d486:	4620      	mov	r0, r4
 800d488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48c:	2000195c 	andcs	r1, r0, ip, asr r9
 800d490:	2000a298 	mulcs	r0, r8, r2
 800d494:	20001980 	andcs	r1, r0, r0, lsl #19

0800d498 <RemoteConfig::GetStringNode() const>:
 800d498:	2012      	movs	r0, #18
 800d49a:	4b03      	ldr	r3, [pc, #12]	; (800d4a8 <RemoteConfig::GetStringNode() const+0x10>)
 800d49c:	799a      	ldrb	r2, [r3, #6]
 800d49e:	4b03      	ldr	r3, [pc, #12]	; (800d4ac <RemoteConfig::GetStringNode() const+0x14>)
 800d4a0:	fb00 3002 	mla	r0, r0, r2, r3
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	2000195c 	andcs	r1, r0, ip, asr r9
 800d4ac:	0801662d 	stmdaeq	r1, {r0, r2, r3, r5, r9, sl, sp, lr}

0800d4b0 <RemoteConfig::GetStringOutput() const>:
 800d4b0:	200c      	movs	r0, #12
 800d4b2:	4b03      	ldr	r3, [pc, #12]	; (800d4c0 <RemoteConfig::GetStringOutput() const+0x10>)
 800d4b4:	79da      	ldrb	r2, [r3, #7]
 800d4b6:	4b03      	ldr	r3, [pc, #12]	; (800d4c4 <RemoteConfig::GetStringOutput() const+0x14>)
 800d4b8:	fb00 3002 	mla	r0, r0, r2, r3
 800d4bc:	4770      	bx	lr
 800d4be:	bf00      	nop
 800d4c0:	2000195c 	andcs	r1, r0, ip, asr r9
 800d4c4:	080166cf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r9, sl, sp, lr}

0800d4c8 <RemoteConfig::SetDisable(bool)>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	7b03      	ldrb	r3, [r0, #12]
 800d4ce:	b161      	cbz	r1, 800d4ea <RemoteConfig::SetDisable(bool)+0x22>
 800d4d0:	b953      	cbnz	r3, 800d4e8 <RemoteConfig::SetDisable(bool)+0x20>
 800d4d2:	4b0c      	ldr	r3, [pc, #48]	; (800d504 <RemoteConfig::SetDisable(bool)+0x3c>)
 800d4d4:	f642 1105 	movw	r1, #10501	; 0x2905
 800d4d8:	6818      	ldr	r0, [r3, #0]
 800d4da:	f003 f936 	bl	801074a <Network::End(unsigned short)>
 800d4de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4e2:	6163      	str	r3, [r4, #20]
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	7323      	strb	r3, [r4, #12]
 800d4e8:	bd38      	pop	{r3, r4, r5, pc}
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d0fc      	beq.n	800d4e8 <RemoteConfig::SetDisable(bool)+0x20>
 800d4ee:	4b05      	ldr	r3, [pc, #20]	; (800d504 <RemoteConfig::SetDisable(bool)+0x3c>)
 800d4f0:	460d      	mov	r5, r1
 800d4f2:	6818      	ldr	r0, [r3, #0]
 800d4f4:	f642 1105 	movw	r1, #10501	; 0x2905
 800d4f8:	f003 f924 	bl	8010744 <Network::Begin(unsigned short)>
 800d4fc:	7325      	strb	r5, [r4, #12]
 800d4fe:	6160      	str	r0, [r4, #20]
 800d500:	e7f2      	b.n	800d4e8 <RemoteConfig::SetDisable(bool)+0x20>
 800d502:	bf00      	nop
 800d504:	2000a298 	mulcs	r0, r8, r2

0800d508 <RemoteConfig::SetDisplayName(char const*)>:
 800d508:	2217      	movs	r2, #23
 800d50a:	4809      	ldr	r0, [pc, #36]	; (800d530 <RemoteConfig::SetDisplayName(char const*)+0x28>)
 800d50c:	b508      	push	{r3, lr}
 800d50e:	1e4b      	subs	r3, r1, #1
 800d510:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d514:	b931      	cbnz	r1, 800d524 <RemoteConfig::SetDisplayName(char const*)+0x1c>
 800d516:	f006 f895 	bl	8013644 <memset>
 800d51a:	2200      	movs	r2, #0
 800d51c:	4b05      	ldr	r3, [pc, #20]	; (800d534 <RemoteConfig::SetDisplayName(char const*)+0x2c>)
 800d51e:	f883 2020 	strb.w	r2, [r3, #32]
 800d522:	bd08      	pop	{r3, pc}
 800d524:	3a01      	subs	r2, #1
 800d526:	f800 1b01 	strb.w	r1, [r0], #1
 800d52a:	d1f1      	bne.n	800d510 <RemoteConfig::SetDisplayName(char const*)+0x8>
 800d52c:	e7f5      	b.n	800d51a <RemoteConfig::SetDisplayName(char const*)+0x12>
 800d52e:	bf00      	nop
 800d530:	20001965 	andcs	r1, r0, r5, ror #18
 800d534:	2000195c 	andcs	r1, r0, ip, asr r9

0800d538 <RemoteConfig::HandleGet(void*, unsigned int)>:
 800d538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d53a:	4604      	mov	r4, r0
 800d53c:	4616      	mov	r6, r2
 800d53e:	460d      	mov	r5, r1
 800d540:	4f27      	ldr	r7, [pc, #156]	; (800d5e0 <RemoteConfig::HandleGet(void*, unsigned int)+0xa8>)
 800d542:	b085      	sub	sp, #20
 800d544:	b9a9      	cbnz	r1, 800d572 <RemoteConfig::HandleGet(void*, unsigned int)+0x3a>
 800d546:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	aa03      	add	r2, sp, #12
 800d54e:	3105      	adds	r1, #5
 800d550:	9303      	str	r3, [sp, #12]
 800d552:	f000 fbb7 	bl	800dcc4 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d556:	1e03      	subs	r3, r0, #0
 800d558:	da1b      	bge.n	800d592 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800d55a:	f642 1305 	movw	r3, #10501	; 0x2905
 800d55e:	220b      	movs	r2, #11
 800d560:	9300      	str	r3, [sp, #0]
 800d562:	4920      	ldr	r1, [pc, #128]	; (800d5e4 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800d564:	69a3      	ldr	r3, [r4, #24]
 800d566:	7d20      	ldrb	r0, [r4, #20]
 800d568:	f002 fc1c 	bl	800fda4 <udp_send>
 800d56c:	200c      	movs	r0, #12
 800d56e:	b005      	add	sp, #20
 800d570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d572:	9203      	str	r2, [sp, #12]
 800d574:	aa03      	add	r2, sp, #12
 800d576:	6039      	str	r1, [r7, #0]
 800d578:	f000 fba4 	bl	800dcc4 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d57c:	1e03      	subs	r3, r0, #0
 800d57e:	da08      	bge.n	800d592 <RemoteConfig::HandleGet(void*, unsigned int)+0x5a>
 800d580:	2e0b      	cmp	r6, #11
 800d582:	4632      	mov	r2, r6
 800d584:	4628      	mov	r0, r5
 800d586:	bf28      	it	cs
 800d588:	220b      	movcs	r2, #11
 800d58a:	4916      	ldr	r1, [pc, #88]	; (800d5e4 <RemoteConfig::HandleGet(void*, unsigned int)+0xac>)
 800d58c:	f006 f838 	bl	8013600 <memcpy>
 800d590:	e7ec      	b.n	800d56c <RemoteConfig::HandleGet(void*, unsigned int)+0x34>
 800d592:	201c      	movs	r0, #28
 800d594:	4343      	muls	r3, r0
 800d596:	4914      	ldr	r1, [pc, #80]	; (800d5e8 <RemoteConfig::HandleGet(void*, unsigned int)+0xb0>)
 800d598:	18ca      	adds	r2, r1, r3
 800d59a:	6852      	ldr	r2, [r2, #4]
 800d59c:	58cb      	ldr	r3, [r1, r3]
 800d59e:	ea4f 0c62 	mov.w	ip, r2, asr #1
 800d5a2:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d5a6:	07d2      	lsls	r2, r2, #31
 800d5a8:	bf48      	it	mi
 800d5aa:	f854 200c 	ldrmi.w	r2, [r4, ip]
 800d5ae:	a903      	add	r1, sp, #12
 800d5b0:	bf48      	it	mi
 800d5b2:	58d3      	ldrmi	r3, [r2, r3]
 800d5b4:	4798      	blx	r3
 800d5b6:	9a03      	ldr	r2, [sp, #12]
 800d5b8:	b955      	cbnz	r5, 800d5d0 <RemoteConfig::HandleGet(void*, unsigned int)+0x98>
 800d5ba:	f642 1305 	movw	r3, #10501	; 0x2905
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	7d20      	ldrb	r0, [r4, #20]
 800d5c4:	69a3      	ldr	r3, [r4, #24]
 800d5c6:	b292      	uxth	r2, r2
 800d5c8:	f002 fbec 	bl	800fda4 <udp_send>
 800d5cc:	9803      	ldr	r0, [sp, #12]
 800d5ce:	e7ce      	b.n	800d56e <RemoteConfig::HandleGet(void*, unsigned int)+0x36>
 800d5d0:	42b2      	cmp	r2, r6
 800d5d2:	bf28      	it	cs
 800d5d4:	4632      	movcs	r2, r6
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	6839      	ldr	r1, [r7, #0]
 800d5da:	f006 f81c 	bl	8013616 <memmove>
 800d5de:	e7f5      	b.n	800d5cc <RemoteConfig::HandleGet(void*, unsigned int)+0x94>
 800d5e0:	20001958 	andcs	r1, r0, r8, asr r9
 800d5e4:	080165d0 	stmdaeq	r1, {r4, r6, r7, r8, sl, sp, lr}
 800d5e8:	08016838 	stmdaeq	r1, {r3, r4, r5, fp, sp, lr}

0800d5ec <RemoteConfig::HandleGetNoParams()>:
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	4611      	mov	r1, r2
 800d5f0:	f7ff bfa2 	b.w	800d538 <RemoteConfig::HandleGet(void*, unsigned int)>

0800d5f4 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)>:
 800d5f4:	b510      	push	{r4, lr}
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	4b07      	ldr	r3, [pc, #28]	; (800d618 <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x24>)
 800d5fa:	b08a      	sub	sp, #40	; 0x28
 800d5fc:	6819      	ldr	r1, [r3, #0]
 800d5fe:	a801      	add	r0, sp, #4
 800d600:	f000 f9d8 	bl	800d9b4 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800d604:	4905      	ldr	r1, [pc, #20]	; (800d61c <RemoteConfig::HandleGetRconfigTxt(unsigned int&)+0x28>)
 800d606:	4623      	mov	r3, r4
 800d608:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d60c:	6809      	ldr	r1, [r1, #0]
 800d60e:	a801      	add	r0, sp, #4
 800d610:	f000 faf4 	bl	800dbfc <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>
 800d614:	b00a      	add	sp, #40	; 0x28
 800d616:	bd10      	pop	{r4, pc}
 800d618:	200029ac 	andcs	r2, r0, ip, lsr #19
 800d61c:	20001958 	andcs	r1, r0, r8, asr r9

0800d620 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)>:
 800d620:	b510      	push	{r4, lr}
 800d622:	460c      	mov	r4, r1
 800d624:	4b07      	ldr	r3, [pc, #28]	; (800d644 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x24>)
 800d626:	b09a      	sub	sp, #104	; 0x68
 800d628:	6819      	ldr	r1, [r3, #0]
 800d62a:	a801      	add	r0, sp, #4
 800d62c:	f003 fb08 	bl	8010c40 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800d630:	4905      	ldr	r1, [pc, #20]	; (800d648 <RemoteConfig::HandleGetNetworkTxt(unsigned int&)+0x28>)
 800d632:	4623      	mov	r3, r4
 800d634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d638:	6809      	ldr	r1, [r1, #0]
 800d63a:	a801      	add	r0, sp, #4
 800d63c:	f003 fd56 	bl	80110ec <NetworkParams::Save(char*, unsigned int, unsigned int&)>
 800d640:	b01a      	add	sp, #104	; 0x68
 800d642:	bd10      	pop	{r4, pc}
 800d644:	200029a8 	andcs	r2, r0, r8, lsr #19
 800d648:	20001958 	andcs	r1, r0, r8, asr r9

0800d64c <RemoteConfig::HandleGetArtnetTxt(unsigned int&)>:
 800d64c:	b510      	push	{r4, lr}
 800d64e:	460c      	mov	r4, r1
 800d650:	4b07      	ldr	r3, [pc, #28]	; (800d670 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x24>)
 800d652:	b0a4      	sub	sp, #144	; 0x90
 800d654:	6819      	ldr	r1, [r3, #0]
 800d656:	a801      	add	r0, sp, #4
 800d658:	f7fc fe3e 	bl	800a2d8 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800d65c:	4905      	ldr	r1, [pc, #20]	; (800d674 <RemoteConfig::HandleGetArtnetTxt(unsigned int&)+0x28>)
 800d65e:	4623      	mov	r3, r4
 800d660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d664:	6809      	ldr	r1, [r1, #0]
 800d666:	a801      	add	r0, sp, #4
 800d668:	f7fd fa04 	bl	800aa74 <ArtNetParams::Save(char*, unsigned int, unsigned int&)>
 800d66c:	b024      	add	sp, #144	; 0x90
 800d66e:	bd10      	pop	{r4, pc}
 800d670:	200029a0 	andcs	r2, r0, r0, lsr #19
 800d674:	20001958 	andcs	r1, r0, r8, asr r9

0800d678 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)>:
 800d678:	b510      	push	{r4, lr}
 800d67a:	460c      	mov	r4, r1
 800d67c:	4b07      	ldr	r3, [pc, #28]	; (800d69c <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x24>)
 800d67e:	b08c      	sub	sp, #48	; 0x30
 800d680:	6819      	ldr	r1, [r3, #0]
 800d682:	a801      	add	r0, sp, #4
 800d684:	f7fe fc9c 	bl	800bfc0 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800d688:	4905      	ldr	r1, [pc, #20]	; (800d6a0 <RemoteConfig::HandleGetDevicesTxt(unsigned int&)+0x28>)
 800d68a:	4623      	mov	r3, r4
 800d68c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d690:	6809      	ldr	r1, [r1, #0]
 800d692:	a801      	add	r0, sp, #4
 800d694:	f7fe ff40 	bl	800c518 <WS28xxDmxParams::Save(char*, unsigned int, unsigned int&)>
 800d698:	b00c      	add	sp, #48	; 0x30
 800d69a:	bd10      	pop	{r4, pc}
 800d69c:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 800d6a0:	20001958 	andcs	r1, r0, r8, asr r9

0800d6a4 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)>:
 800d6a4:	b510      	push	{r4, lr}
 800d6a6:	460c      	mov	r4, r1
 800d6a8:	4b07      	ldr	r3, [pc, #28]	; (800d6c8 <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x24>)
 800d6aa:	b08a      	sub	sp, #40	; 0x28
 800d6ac:	6819      	ldr	r1, [r3, #0]
 800d6ae:	4668      	mov	r0, sp
 800d6b0:	f004 fc7c 	bl	8011fac <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800d6b4:	4905      	ldr	r1, [pc, #20]	; (800d6cc <RemoteConfig::HandleGetDisplayTxt(unsigned int&)+0x28>)
 800d6b6:	4623      	mov	r3, r4
 800d6b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d6bc:	4668      	mov	r0, sp
 800d6be:	6809      	ldr	r1, [r1, #0]
 800d6c0:	f004 fdaa 	bl	8012218 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>
 800d6c4:	b00a      	add	sp, #40	; 0x28
 800d6c6:	bd10      	pop	{r4, pc}
 800d6c8:	200029a4 	andcs	r2, r0, r4, lsr #19
 800d6cc:	20001958 	andcs	r1, r0, r8, asr r9

0800d6d0 <RemoteConfig::HandleSet(void*, unsigned int)>:
 800d6d0:	b530      	push	{r4, r5, lr}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	9201      	str	r2, [sp, #4]
 800d6d8:	b9c9      	cbnz	r1, 800d70e <RemoteConfig::HandleSet(void*, unsigned int)+0x3e>
 800d6da:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800d6de:	9303      	str	r3, [sp, #12]
 800d6e0:	4b1b      	ldr	r3, [pc, #108]	; (800d750 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800d6e2:	aa03      	add	r2, sp, #12
 800d6e4:	6819      	ldr	r1, [r3, #0]
 800d6e6:	3101      	adds	r1, #1
 800d6e8:	f000 faec 	bl	800dcc4 <RemoteConfig::GetIndex(void const*, unsigned int&)>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	db24      	blt.n	800d73a <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800d6f0:	221c      	movs	r2, #28
 800d6f2:	4b18      	ldr	r3, [pc, #96]	; (800d754 <RemoteConfig::HandleSet(void*, unsigned int)+0x84>)
 800d6f4:	fb02 3300 	mla	r3, r2, r0, r3
 800d6f8:	68da      	ldr	r2, [r3, #12]
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	1051      	asrs	r1, r2, #1
 800d6fe:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d702:	07d2      	lsls	r2, r2, #31
 800d704:	bf44      	itt	mi
 800d706:	5862      	ldrmi	r2, [r4, r1]
 800d708:	58d3      	ldrmi	r3, [r2, r3]
 800d70a:	4798      	blx	r3
 800d70c:	e015      	b.n	800d73a <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800d70e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800d712:	4613      	mov	r3, r2
 800d714:	d811      	bhi.n	800d73a <RemoteConfig::HandleSet(void*, unsigned int)+0x6a>
 800d716:	2200      	movs	r2, #0
 800d718:	460d      	mov	r5, r1
 800d71a:	490f      	ldr	r1, [pc, #60]	; (800d758 <RemoteConfig::HandleSet(void*, unsigned int)+0x88>)
 800d71c:	6202      	str	r2, [r0, #32]
 800d71e:	7809      	ldrb	r1, [r1, #0]
 800d720:	b29b      	uxth	r3, r3
 800d722:	07c9      	lsls	r1, r1, #31
 800d724:	d50b      	bpl.n	800d73e <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800d726:	7829      	ldrb	r1, [r5, #0]
 800d728:	297b      	cmp	r1, #123	; 0x7b
 800d72a:	d108      	bne.n	800d73e <RemoteConfig::HandleSet(void*, unsigned int)+0x6e>
 800d72c:	3b01      	subs	r3, #1
 800d72e:	4628      	mov	r0, r5
 800d730:	b299      	uxth	r1, r3
 800d732:	f004 fed5 	bl	80124e0 <properties::convert_json_file(char*, unsigned short, bool)>
 800d736:	2800      	cmp	r0, #0
 800d738:	dc08      	bgt.n	800d74c <RemoteConfig::HandleSet(void*, unsigned int)+0x7c>
 800d73a:	b005      	add	sp, #20
 800d73c:	bd30      	pop	{r4, r5, pc}
 800d73e:	83a3      	strh	r3, [r4, #28]
 800d740:	4b03      	ldr	r3, [pc, #12]	; (800d750 <RemoteConfig::HandleSet(void*, unsigned int)+0x80>)
 800d742:	4620      	mov	r0, r4
 800d744:	601d      	str	r5, [r3, #0]
 800d746:	aa01      	add	r2, sp, #4
 800d748:	1c69      	adds	r1, r5, #1
 800d74a:	e7cd      	b.n	800d6e8 <RemoteConfig::HandleSet(void*, unsigned int)+0x18>
 800d74c:	83a0      	strh	r0, [r4, #28]
 800d74e:	e7f7      	b.n	800d740 <RemoteConfig::HandleSet(void*, unsigned int)+0x70>
 800d750:	20001958 	andcs	r1, r0, r8, asr r9
 800d754:	08016838 	stmdaeq	r1, {r3, r4, r5, fp, sp, lr}
 800d758:	2000a86c 	andcs	sl, r0, ip, ror #16

0800d75c <RemoteConfig::Run()>:
 800d75c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d760:	7b03      	ldrb	r3, [r0, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d14f      	bne.n	800d806 <RemoteConfig::Run()+0xaa>
 800d766:	4604      	mov	r4, r0
 800d768:	4d3e      	ldr	r5, [pc, #248]	; (800d864 <RemoteConfig::Run()+0x108>)
 800d76a:	3024      	adds	r0, #36	; 0x24
 800d76c:	f000 fd90 	bl	800e290 <HttpDaemon::Run()>
 800d770:	4629      	mov	r1, r5
 800d772:	7d20      	ldrb	r0, [r4, #20]
 800d774:	f10d 030e 	add.w	r3, sp, #14
 800d778:	f104 0218 	add.w	r2, r4, #24
 800d77c:	f002 faec 	bl	800fd58 <udp_recv2>
 800d780:	2803      	cmp	r0, #3
 800d782:	83a0      	strh	r0, [r4, #28]
 800d784:	d93f      	bls.n	800d806 <RemoteConfig::Run()+0xaa>
 800d786:	682b      	ldr	r3, [r5, #0]
 800d788:	181a      	adds	r2, r3, r0
 800d78a:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800d78e:	2a0a      	cmp	r2, #10
 800d790:	bf04      	itt	eq
 800d792:	f100 30ff 	addeq.w	r0, r0, #4294967295	; 0xffffffff
 800d796:	83a0      	strheq	r0, [r4, #28]
 800d798:	7819      	ldrb	r1, [r3, #0]
 800d79a:	293f      	cmp	r1, #63	; 0x3f
 800d79c:	d139      	bne.n	800d812 <RemoteConfig::Run()+0xb6>
 800d79e:	4832      	ldr	r0, [pc, #200]	; (800d868 <RemoteConfig::Run()+0x10c>)
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	4607      	mov	r7, r0
 800d7a4:	8ba1      	ldrh	r1, [r4, #28]
 800d7a6:	3901      	subs	r1, #1
 800d7a8:	b289      	uxth	r1, r1
 800d7aa:	83a1      	strh	r1, [r4, #28]
 800d7ac:	7b86      	ldrb	r6, [r0, #14]
 800d7ae:	8985      	ldrh	r5, [r0, #12]
 800d7b0:	b17e      	cbz	r6, 800d7d2 <RemoteConfig::Run()+0x76>
 800d7b2:	42a9      	cmp	r1, r5
 800d7b4:	d80f      	bhi.n	800d7d6 <RemoteConfig::Run()+0x7a>
 800d7b6:	3201      	adds	r2, #1
 800d7b8:	2a08      	cmp	r2, #8
 800d7ba:	f100 0010 	add.w	r0, r0, #16
 800d7be:	d1f5      	bne.n	800d7ac <RemoteConfig::Run()+0x50>
 800d7c0:	f642 1305 	movw	r3, #10501	; 0x2905
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	69a3      	ldr	r3, [r4, #24]
 800d7c8:	4928      	ldr	r1, [pc, #160]	; (800d86c <RemoteConfig::Run()+0x110>)
 800d7ca:	7d20      	ldrb	r0, [r4, #20]
 800d7cc:	f002 faea 	bl	800fda4 <udp_send>
 800d7d0:	e019      	b.n	800d806 <RemoteConfig::Run()+0xaa>
 800d7d2:	42a9      	cmp	r1, r5
 800d7d4:	d1ef      	bne.n	800d7b6 <RemoteConfig::Run()+0x5a>
 800d7d6:	6886      	ldr	r6, [r0, #8]
 800d7d8:	f103 0c01 	add.w	ip, r3, #1
 800d7dc:	4435      	add	r5, r6
 800d7de:	42b5      	cmp	r5, r6
 800d7e0:	d006      	beq.n	800d7f0 <RemoteConfig::Run()+0x94>
 800d7e2:	f81c 8b01 	ldrb.w	r8, [ip], #1
 800d7e6:	f816 eb01 	ldrb.w	lr, [r6], #1
 800d7ea:	45f0      	cmp	r8, lr
 800d7ec:	d0f7      	beq.n	800d7de <RemoteConfig::Run()+0x82>
 800d7ee:	e7e2      	b.n	800d7b6 <RemoteConfig::Run()+0x5a>
 800d7f0:	0113      	lsls	r3, r2, #4
 800d7f2:	eb07 1202 	add.w	r2, r7, r2, lsl #4
 800d7f6:	6852      	ldr	r2, [r2, #4]
 800d7f8:	58fb      	ldr	r3, [r7, r3]
 800d7fa:	1051      	asrs	r1, r2, #1
 800d7fc:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800d800:	07d2      	lsls	r2, r2, #31
 800d802:	d403      	bmi.n	800d80c <RemoteConfig::Run()+0xb0>
 800d804:	4798      	blx	r3
 800d806:	b004      	add	sp, #16
 800d808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d80c:	5862      	ldr	r2, [r4, r1]
 800d80e:	58d3      	ldr	r3, [r2, r3]
 800d810:	e7f8      	b.n	800d804 <RemoteConfig::Run()+0xa8>
 800d812:	7b62      	ldrb	r2, [r4, #13]
 800d814:	2a00      	cmp	r2, #0
 800d816:	d1f6      	bne.n	800d806 <RemoteConfig::Run()+0xaa>
 800d818:	2923      	cmp	r1, #35	; 0x23
 800d81a:	d105      	bne.n	800d828 <RemoteConfig::Run()+0xcc>
 800d81c:	4611      	mov	r1, r2
 800d81e:	4620      	mov	r0, r4
 800d820:	6222      	str	r2, [r4, #32]
 800d822:	f7ff ff55 	bl	800d6d0 <RemoteConfig::HandleSet(void*, unsigned int)>
 800d826:	e7ee      	b.n	800d806 <RemoteConfig::Run()+0xaa>
 800d828:	2921      	cmp	r1, #33	; 0x21
 800d82a:	d1ec      	bne.n	800d806 <RemoteConfig::Run()+0xaa>
 800d82c:	8ba2      	ldrh	r2, [r4, #28]
 800d82e:	3a01      	subs	r2, #1
 800d830:	b292      	uxth	r2, r2
 800d832:	2a08      	cmp	r2, #8
 800d834:	83a2      	strh	r2, [r4, #28]
 800d836:	d90a      	bls.n	800d84e <RemoteConfig::Run()+0xf2>
 800d838:	490d      	ldr	r1, [pc, #52]	; (800d870 <RemoteConfig::Run()+0x114>)
 800d83a:	1c5a      	adds	r2, r3, #1
 800d83c:	3309      	adds	r3, #9
 800d83e:	4293      	cmp	r3, r2
 800d840:	d00c      	beq.n	800d85c <RemoteConfig::Run()+0x100>
 800d842:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d846:	f811 0b01 	ldrb.w	r0, [r1], #1
 800d84a:	4285      	cmp	r5, r0
 800d84c:	d0f7      	beq.n	800d83e <RemoteConfig::Run()+0xe2>
 800d84e:	f642 1305 	movw	r3, #10501	; 0x2905
 800d852:	9300      	str	r3, [sp, #0]
 800d854:	2208      	movs	r2, #8
 800d856:	69a3      	ldr	r3, [r4, #24]
 800d858:	4906      	ldr	r1, [pc, #24]	; (800d874 <RemoteConfig::Run()+0x118>)
 800d85a:	e7b6      	b.n	800d7ca <RemoteConfig::Run()+0x6e>
 800d85c:	4620      	mov	r0, r4
 800d85e:	f7ff fdcd 	bl	800d3fc <RemoteConfig::HandleDisplaySet()>
 800d862:	e7d0      	b.n	800d806 <RemoteConfig::Run()+0xaa>
 800d864:	20001958 	andcs	r1, r0, r8, asr r9
 800d868:	08016760 	stmdaeq	r1, {r5, r6, r8, r9, sl, sp, lr}
 800d86c:	080165e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, r8, sl, sp, lr}
 800d870:	080165dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, sl, sp, lr}
 800d874:	080165ee 	stmdaeq	r1, {r1, r2, r3, r5, r6, r7, r8, sl, sp, lr}

0800d878 <RemoteConfig::HandleSetRconfig()>:
 800d878:	b510      	push	{r4, lr}
 800d87a:	4604      	mov	r4, r0
 800d87c:	4b08      	ldr	r3, [pc, #32]	; (800d8a0 <RemoteConfig::HandleSetRconfig()+0x28>)
 800d87e:	b08a      	sub	sp, #40	; 0x28
 800d880:	6819      	ldr	r1, [r3, #0]
 800d882:	a801      	add	r0, sp, #4
 800d884:	f000 f896 	bl	800d9b4 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>
 800d888:	4b06      	ldr	r3, [pc, #24]	; (800d8a4 <RemoteConfig::HandleSetRconfig()+0x2c>)
 800d88a:	8ba2      	ldrh	r2, [r4, #28]
 800d88c:	6819      	ldr	r1, [r3, #0]
 800d88e:	a801      	add	r0, sp, #4
 800d890:	f000 f8a6 	bl	800d9e0 <RemoteConfigParams::Load(char const*, unsigned int)>
 800d894:	4621      	mov	r1, r4
 800d896:	a801      	add	r0, sp, #4
 800d898:	f000 f9bd 	bl	800dc16 <RemoteConfigParams::Set(RemoteConfig*)>
 800d89c:	b00a      	add	sp, #40	; 0x28
 800d89e:	bd10      	pop	{r4, pc}
 800d8a0:	200029ac 	andcs	r2, r0, ip, lsr #19
 800d8a4:	20001958 	andcs	r1, r0, r8, asr r9

0800d8a8 <RemoteConfig::HandleSetNetworkTxt()>:
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	4604      	mov	r4, r0
 800d8ac:	4b06      	ldr	r3, [pc, #24]	; (800d8c8 <RemoteConfig::HandleSetNetworkTxt()+0x20>)
 800d8ae:	b09a      	sub	sp, #104	; 0x68
 800d8b0:	6819      	ldr	r1, [r3, #0]
 800d8b2:	a801      	add	r0, sp, #4
 800d8b4:	f003 f9c4 	bl	8010c40 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 800d8b8:	4b04      	ldr	r3, [pc, #16]	; (800d8cc <RemoteConfig::HandleSetNetworkTxt()+0x24>)
 800d8ba:	8ba2      	ldrh	r2, [r4, #28]
 800d8bc:	6819      	ldr	r1, [r3, #0]
 800d8be:	a801      	add	r0, sp, #4
 800d8c0:	f003 f9d6 	bl	8010c70 <NetworkParams::Load(char const*, unsigned int)>
 800d8c4:	b01a      	add	sp, #104	; 0x68
 800d8c6:	bd10      	pop	{r4, pc}
 800d8c8:	200029a8 	andcs	r2, r0, r8, lsr #19
 800d8cc:	20001958 	andcs	r1, r0, r8, asr r9

0800d8d0 <RemoteConfig::HandleSetArtnetTxt()>:
 800d8d0:	b510      	push	{r4, lr}
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	4b06      	ldr	r3, [pc, #24]	; (800d8f0 <RemoteConfig::HandleSetArtnetTxt()+0x20>)
 800d8d6:	b0a4      	sub	sp, #144	; 0x90
 800d8d8:	6819      	ldr	r1, [r3, #0]
 800d8da:	a801      	add	r0, sp, #4
 800d8dc:	f7fc fcfc 	bl	800a2d8 <ArtNetParams::ArtNetParams(ArtNetParamsStore*)>
 800d8e0:	4b04      	ldr	r3, [pc, #16]	; (800d8f4 <RemoteConfig::HandleSetArtnetTxt()+0x24>)
 800d8e2:	8ba2      	ldrh	r2, [r4, #28]
 800d8e4:	6819      	ldr	r1, [r3, #0]
 800d8e6:	a801      	add	r0, sp, #4
 800d8e8:	f7fc fd28 	bl	800a33c <ArtNetParams::Load(char const*, unsigned int)>
 800d8ec:	b024      	add	sp, #144	; 0x90
 800d8ee:	bd10      	pop	{r4, pc}
 800d8f0:	200029a0 	andcs	r2, r0, r0, lsr #19
 800d8f4:	20001958 	andcs	r1, r0, r8, asr r9

0800d8f8 <RemoteConfig::HandleSetDevicesTxt()>:
 800d8f8:	b510      	push	{r4, lr}
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	4b06      	ldr	r3, [pc, #24]	; (800d918 <RemoteConfig::HandleSetDevicesTxt()+0x20>)
 800d8fe:	b08c      	sub	sp, #48	; 0x30
 800d900:	6819      	ldr	r1, [r3, #0]
 800d902:	a801      	add	r0, sp, #4
 800d904:	f7fe fb5c 	bl	800bfc0 <WS28xxDmxParams::WS28xxDmxParams(WS28xxDmxParamsStore*)>
 800d908:	4b04      	ldr	r3, [pc, #16]	; (800d91c <RemoteConfig::HandleSetDevicesTxt()+0x24>)
 800d90a:	8ba2      	ldrh	r2, [r4, #28]
 800d90c:	6819      	ldr	r1, [r3, #0]
 800d90e:	a801      	add	r0, sp, #4
 800d910:	f7fe fb9e 	bl	800c050 <WS28xxDmxParams::Load(char const*, unsigned int)>
 800d914:	b00c      	add	sp, #48	; 0x30
 800d916:	bd10      	pop	{r4, pc}
 800d918:	200029b0 			; <UNDEFINED> instruction: 0x200029b0
 800d91c:	20001958 	andcs	r1, r0, r8, asr r9

0800d920 <RemoteConfig::HandleSetDisplayTxt()>:
 800d920:	b510      	push	{r4, lr}
 800d922:	4604      	mov	r4, r0
 800d924:	4b06      	ldr	r3, [pc, #24]	; (800d940 <RemoteConfig::HandleSetDisplayTxt()+0x20>)
 800d926:	b08a      	sub	sp, #40	; 0x28
 800d928:	6819      	ldr	r1, [r3, #0]
 800d92a:	4668      	mov	r0, sp
 800d92c:	f004 fb3e 	bl	8011fac <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>
 800d930:	4b04      	ldr	r3, [pc, #16]	; (800d944 <RemoteConfig::HandleSetDisplayTxt()+0x24>)
 800d932:	4668      	mov	r0, sp
 800d934:	8ba2      	ldrh	r2, [r4, #28]
 800d936:	6819      	ldr	r1, [r3, #0]
 800d938:	f004 fb52 	bl	8011fe0 <DisplayUdfParams::Load(char const*, unsigned int)>
 800d93c:	b00a      	add	sp, #40	; 0x28
 800d93e:	bd10      	pop	{r4, pc}
 800d940:	200029a4 	andcs	r2, r0, r4, lsr #19
 800d944:	20001958 	andcs	r1, r0, r8, asr r9

0800d948 <RemoteConfig::HandleFactory()>:
 800d948:	b538      	push	{r3, r4, r5, lr}
 800d94a:	2400      	movs	r4, #0
 800d94c:	4d04      	ldr	r5, [pc, #16]	; (800d960 <RemoteConfig::HandleFactory()+0x18>)
 800d94e:	4621      	mov	r1, r4
 800d950:	6828      	ldr	r0, [r5, #0]
 800d952:	3401      	adds	r4, #1
 800d954:	f000 fec0 	bl	800e6d8 <SpiFlashStore::ResetSetList(spiflashstore::Store)>
 800d958:	2c1c      	cmp	r4, #28
 800d95a:	d1f8      	bne.n	800d94e <RemoteConfig::HandleFactory()+0x6>
 800d95c:	bd38      	pop	{r3, r4, r5, pc}
 800d95e:	bf00      	nop
 800d960:	20002998 	mulcs	r0, r8, r9

0800d964 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>:
 800d964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d966:	460b      	mov	r3, r1
 800d968:	8885      	ldrh	r5, [r0, #4]
 800d96a:	88c1      	ldrh	r1, [r0, #6]
 800d96c:	42a9      	cmp	r1, r5
 800d96e:	d214      	bcs.n	800d99a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x36>
 800d970:	4604      	mov	r4, r0
 800d972:	6800      	ldr	r0, [r0, #0]
 800d974:	1a6d      	subs	r5, r5, r1
 800d976:	4408      	add	r0, r1
 800d978:	7a21      	ldrb	r1, [r4, #8]
 800d97a:	b91a      	cbnz	r2, 800d984 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x20>
 800d97c:	b919      	cbnz	r1, 800d986 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x22>
 800d97e:	4a0a      	ldr	r2, [pc, #40]	; (800d9a8 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x44>)
 800d980:	9100      	str	r1, [sp, #0]
 800d982:	e002      	b.n	800d98a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d984:	b159      	cbz	r1, 800d99e <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x3a>
 800d986:	9200      	str	r2, [sp, #0]
 800d988:	4a08      	ldr	r2, [pc, #32]	; (800d9ac <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x48>)
 800d98a:	4629      	mov	r1, r5
 800d98c:	f006 f9b2 	bl	8013cf4 <snprintf>
 800d990:	4285      	cmp	r5, r0
 800d992:	bfa2      	ittt	ge
 800d994:	88e3      	ldrhge	r3, [r4, #6]
 800d996:	181b      	addge	r3, r3, r0
 800d998:	80e3      	strhge	r3, [r4, #6]
 800d99a:	b003      	add	sp, #12
 800d99c:	bd30      	pop	{r4, r5, pc}
 800d99e:	2201      	movs	r2, #1
 800d9a0:	9200      	str	r2, [sp, #0]
 800d9a2:	4a03      	ldr	r2, [pc, #12]	; (800d9b0 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x4c>)
 800d9a4:	e7f1      	b.n	800d98a <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]+0x26>
 800d9a6:	bf00      	nop
 800d9a8:	0801607d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sp, lr}
 800d9ac:	08016074 	stmdaeq	r1, {r2, r4, r5, r6, sp, lr}
 800d9b0:	0801607e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sp, lr}

0800d9b4 <RemoteConfigParams::RemoteConfigParams(RemoteConfigParamsStore*)>:
 800d9b4:	b510      	push	{r4, lr}
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	2220      	movs	r2, #32
 800d9ba:	f840 1b04 	str.w	r1, [r0], #4
 800d9be:	2100      	movs	r1, #0
 800d9c0:	f005 fe40 	bl	8013644 <memset>
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	bd10      	pop	{r4, pc}

0800d9c8 <RemoteConfigParams::Load()>:
 800d9c8:	b508      	push	{r3, lr}
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	4601      	mov	r1, r0
 800d9ce:	6043      	str	r3, [r0, #4]
 800d9d0:	6800      	ldr	r0, [r0, #0]
 800d9d2:	b120      	cbz	r0, 800d9de <RemoteConfigParams::Load()+0x16>
 800d9d4:	6803      	ldr	r3, [r0, #0]
 800d9d6:	3104      	adds	r1, #4
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	4798      	blx	r3
 800d9dc:	2001      	movs	r0, #1
 800d9de:	bd08      	pop	{r3, pc}

0800d9e0 <RemoteConfigParams::Load(char const*, unsigned int)>:
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9e4:	460d      	mov	r5, r1
 800d9e6:	4616      	mov	r6, r2
 800d9e8:	4604      	mov	r4, r0
 800d9ea:	6043      	str	r3, [r0, #4]
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	490a      	ldr	r1, [pc, #40]	; (800da18 <RemoteConfigParams::Load(char const*, unsigned int)+0x38>)
 800d9f0:	4668      	mov	r0, sp
 800d9f2:	f004 fef3 	bl	80127dc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 800d9f6:	4632      	mov	r2, r6
 800d9f8:	4629      	mov	r1, r5
 800d9fa:	4668      	mov	r0, sp
 800d9fc:	f004 fef2 	bl	80127e4 <ReadConfigFile::Read(char const*, unsigned int)>
 800da00:	4621      	mov	r1, r4
 800da02:	f851 0b04 	ldr.w	r0, [r1], #4
 800da06:	6803      	ldr	r3, [r0, #0]
 800da08:	689b      	ldr	r3, [r3, #8]
 800da0a:	4798      	blx	r3
 800da0c:	4668      	mov	r0, sp
 800da0e:	f004 fee8 	bl	80127e2 <ReadConfigFile::~ReadConfigFile()>
 800da12:	b002      	add	sp, #8
 800da14:	bd70      	pop	{r4, r5, r6, pc}
 800da16:	bf00      	nop
 800da18:	0800dad9 	stmdaeq	r0, {r0, r3, r4, r6, r7, r9, fp, ip, lr, pc}

0800da1c <RemoteConfigParams::SetBool(unsigned char, unsigned int)>:
 800da1c:	6843      	ldr	r3, [r0, #4]
 800da1e:	b111      	cbz	r1, 800da26 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0xa>
 800da20:	4313      	orrs	r3, r2
 800da22:	6043      	str	r3, [r0, #4]
 800da24:	4770      	bx	lr
 800da26:	ea23 0302 	bic.w	r3, r3, r2
 800da2a:	e7fa      	b.n	800da22 <RemoteConfigParams::SetBool(unsigned char, unsigned int)+0x6>

0800da2c <RemoteConfigParams::callbackFunction(char const*)>:
 800da2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da2e:	460d      	mov	r5, r1
 800da30:	4604      	mov	r4, r0
 800da32:	4923      	ldr	r1, [pc, #140]	; (800dac0 <RemoteConfigParams::callbackFunction(char const*)+0x94>)
 800da34:	4628      	mov	r0, r5
 800da36:	f10d 0203 	add.w	r2, sp, #3
 800da3a:	f005 f835 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800da3e:	b938      	cbnz	r0, 800da50 <RemoteConfigParams::callbackFunction(char const*)+0x24>
 800da40:	2201      	movs	r2, #1
 800da42:	4620      	mov	r0, r4
 800da44:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800da48:	f7ff ffe8 	bl	800da1c <RemoteConfigParams::SetBool(unsigned char, unsigned int)>
 800da4c:	b003      	add	sp, #12
 800da4e:	bd30      	pop	{r4, r5, pc}
 800da50:	4628      	mov	r0, r5
 800da52:	491c      	ldr	r1, [pc, #112]	; (800dac4 <RemoteConfigParams::callbackFunction(char const*)+0x98>)
 800da54:	f10d 0203 	add.w	r2, sp, #3
 800da58:	f005 f826 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800da5c:	b908      	cbnz	r0, 800da62 <RemoteConfigParams::callbackFunction(char const*)+0x36>
 800da5e:	2202      	movs	r2, #2
 800da60:	e7ef      	b.n	800da42 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800da62:	4628      	mov	r0, r5
 800da64:	4918      	ldr	r1, [pc, #96]	; (800dac8 <RemoteConfigParams::callbackFunction(char const*)+0x9c>)
 800da66:	f10d 0203 	add.w	r2, sp, #3
 800da6a:	f005 f81d 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800da6e:	b908      	cbnz	r0, 800da74 <RemoteConfigParams::callbackFunction(char const*)+0x48>
 800da70:	2204      	movs	r2, #4
 800da72:	e7e6      	b.n	800da42 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800da74:	4628      	mov	r0, r5
 800da76:	4915      	ldr	r1, [pc, #84]	; (800dacc <RemoteConfigParams::callbackFunction(char const*)+0xa0>)
 800da78:	f10d 0203 	add.w	r2, sp, #3
 800da7c:	f005 f814 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800da80:	b908      	cbnz	r0, 800da86 <RemoteConfigParams::callbackFunction(char const*)+0x5a>
 800da82:	2208      	movs	r2, #8
 800da84:	e7dd      	b.n	800da42 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800da86:	4628      	mov	r0, r5
 800da88:	4911      	ldr	r1, [pc, #68]	; (800dad0 <RemoteConfigParams::callbackFunction(char const*)+0xa4>)
 800da8a:	f10d 0203 	add.w	r2, sp, #3
 800da8e:	f005 f80b 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800da92:	b908      	cbnz	r0, 800da98 <RemoteConfigParams::callbackFunction(char const*)+0x6c>
 800da94:	2220      	movs	r2, #32
 800da96:	e7d4      	b.n	800da42 <RemoteConfigParams::callbackFunction(char const*)+0x16>
 800da98:	2317      	movs	r3, #23
 800da9a:	4628      	mov	r0, r5
 800da9c:	9301      	str	r3, [sp, #4]
 800da9e:	490d      	ldr	r1, [pc, #52]	; (800dad4 <RemoteConfigParams::callbackFunction(char const*)+0xa8>)
 800daa0:	ab01      	add	r3, sp, #4
 800daa2:	f104 020c 	add.w	r2, r4, #12
 800daa6:	f004 fed1 	bl	801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 800daaa:	2800      	cmp	r0, #0
 800daac:	d1ce      	bne.n	800da4c <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800daae:	9b01      	ldr	r3, [sp, #4]
 800dab0:	4423      	add	r3, r4
 800dab2:	7318      	strb	r0, [r3, #12]
 800dab4:	6863      	ldr	r3, [r4, #4]
 800dab6:	f043 0310 	orr.w	r3, r3, #16
 800daba:	6063      	str	r3, [r4, #4]
 800dabc:	e7c6      	b.n	800da4c <RemoteConfigParams::callbackFunction(char const*)+0x20>
 800dabe:	bf00      	nop
 800dac0:	08016b9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, r9, fp, sp, lr}
 800dac4:	08016bbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
 800dac8:	08016bcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, fp, sp, lr}
 800dacc:	08016bdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, r9, fp, sp, lr}
 800dad0:	08016be9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, fp, sp, lr}
 800dad4:	08016bb2 	stmdaeq	r1, {r1, r4, r5, r7, r8, r9, fp, sp, lr}

0800dad8 <RemoteConfigParams::staticCallbackFunction(void*, char const*)>:
 800dad8:	f7ff bfa8 	b.w	800da2c <RemoteConfigParams::callbackFunction(char const*)>

0800dadc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>:
 800dadc:	b570      	push	{r4, r5, r6, lr}
 800dade:	4604      	mov	r4, r0
 800dae0:	4615      	mov	r5, r2
 800dae2:	461e      	mov	r6, r3
 800dae4:	b086      	sub	sp, #24
 800dae6:	3004      	adds	r0, #4
 800dae8:	2900      	cmp	r1, #0
 800daea:	d040      	beq.n	800db6e <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x92>
 800daec:	2220      	movs	r2, #32
 800daee:	f005 fd92 	bl	8013616 <memmove>
 800daf2:	4633      	mov	r3, r6
 800daf4:	462a      	mov	r2, r5
 800daf6:	4937      	ldr	r1, [pc, #220]	; (800dbd4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xf8>)
 800daf8:	a803      	add	r0, sp, #12
 800dafa:	f004 fd9f 	bl	801263c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 800dafe:	6862      	ldr	r2, [r4, #4]
 800db00:	4935      	ldr	r1, [pc, #212]	; (800dbd8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xfc>)
 800db02:	f002 0201 	and.w	r2, r2, #1
 800db06:	a803      	add	r0, sp, #12
 800db08:	f7ff ff2c 	bl	800d964 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800db0c:	6862      	ldr	r2, [r4, #4]
 800db0e:	4933      	ldr	r1, [pc, #204]	; (800dbdc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x100>)
 800db10:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800db14:	a803      	add	r0, sp, #12
 800db16:	f7ff ff25 	bl	800d964 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800db1a:	6862      	ldr	r2, [r4, #4]
 800db1c:	4930      	ldr	r1, [pc, #192]	; (800dbe0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x104>)
 800db1e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800db22:	a803      	add	r0, sp, #12
 800db24:	f7ff ff1e 	bl	800d964 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800db28:	6862      	ldr	r2, [r4, #4]
 800db2a:	492e      	ldr	r1, [pc, #184]	; (800dbe4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x108>)
 800db2c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800db30:	a803      	add	r0, sp, #12
 800db32:	f7ff ff17 	bl	800d964 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800db36:	6862      	ldr	r2, [r4, #4]
 800db38:	492b      	ldr	r1, [pc, #172]	; (800dbe8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x10c>)
 800db3a:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800db3e:	a803      	add	r0, sp, #12
 800db40:	f7ff ff10 	bl	800d964 <PropertiesBuilder::Add(char const*, bool) [clone .isra.0]>
 800db44:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 800db48:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 800db4c:	42a9      	cmp	r1, r5
 800db4e:	d223      	bcs.n	800db98 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xbc>
 800db50:	9803      	ldr	r0, [sp, #12]
 800db52:	1a6d      	subs	r5, r5, r1
 800db54:	4408      	add	r0, r1
 800db56:	6861      	ldr	r1, [r4, #4]
 800db58:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800db5c:	06c9      	lsls	r1, r1, #27
 800db5e:	f104 030c 	add.w	r3, r4, #12
 800db62:	d40b      	bmi.n	800db7c <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa0>
 800db64:	b95a      	cbnz	r2, 800db7e <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa2>
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	4a20      	ldr	r2, [pc, #128]	; (800dbec <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x110>)
 800db6a:	4b21      	ldr	r3, [pc, #132]	; (800dbf0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800db6c:	e00a      	b.n	800db84 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	4601      	mov	r1, r0
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	4618      	mov	r0, r3
 800db76:	68d2      	ldr	r2, [r2, #12]
 800db78:	4790      	blx	r2
 800db7a:	e7ba      	b.n	800daf2 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x16>
 800db7c:	b32a      	cbz	r2, 800dbca <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xee>
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	4a1c      	ldr	r2, [pc, #112]	; (800dbf4 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x118>)
 800db82:	4b1b      	ldr	r3, [pc, #108]	; (800dbf0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800db84:	4629      	mov	r1, r5
 800db86:	f006 f8b5 	bl	8013cf4 <snprintf>
 800db8a:	4285      	cmp	r5, r0
 800db8c:	bfa2      	ittt	ge
 800db8e:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 800db92:	18c0      	addge	r0, r0, r3
 800db94:	f8ad 0012 	strhge.w	r0, [sp, #18]
 800db98:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800db9c:	b17b      	cbz	r3, 800dbbe <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xe2>
 800db9e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800dba2:	9b03      	ldr	r3, [sp, #12]
 800dba4:	4413      	add	r3, r2
 800dba6:	227d      	movs	r2, #125	; 0x7d
 800dba8:	f803 2c01 	strb.w	r2, [r3, #-1]
 800dbac:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800dbb0:	9903      	ldr	r1, [sp, #12]
 800dbb2:	54ca      	strb	r2, [r1, r3]
 800dbb4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	f8ad 3012 	strh.w	r3, [sp, #18]
 800dbbe:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800dbc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbc4:	601a      	str	r2, [r3, #0]
 800dbc6:	b006      	add	sp, #24
 800dbc8:	bd70      	pop	{r4, r5, r6, pc}
 800dbca:	9300      	str	r3, [sp, #0]
 800dbcc:	4a0a      	ldr	r2, [pc, #40]	; (800dbf8 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 800dbce:	4b08      	ldr	r3, [pc, #32]	; (800dbf0 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0x114>)
 800dbd0:	e7d8      	b.n	800db84 <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)+0xa8>
 800dbd2:	bf00      	nop
 800dbd4:	08016ba6 	stmdaeq	r1, {r1, r2, r5, r7, r8, r9, fp, sp, lr}
 800dbd8:	08016b9e 	stmdaeq	r1, {r1, r2, r3, r4, r7, r8, r9, fp, sp, lr}
 800dbdc:	08016bbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, r9, fp, sp, lr}
 800dbe0:	08016bcd 	stmdaeq	r1, {r0, r2, r3, r6, r7, r8, r9, fp, sp, lr}
 800dbe4:	08016bdb 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, r8, r9, fp, sp, lr}
 800dbe8:	08016be9 	stmdaeq	r1, {r0, r3, r5, r6, r7, r8, r9, fp, sp, lr}
 800dbec:	08016090 	stmdaeq	r1, {r4, r7, sp, lr}
 800dbf0:	08016bb2 	stmdaeq	r1, {r1, r4, r5, r7, r8, r9, fp, sp, lr}
 800dbf4:	08016085 	stmdaeq	r1, {r0, r2, r7, sp, lr}
 800dbf8:	08016091 	stmdaeq	r1, {r0, r4, r7, sp, lr}

0800dbfc <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)>:
 800dbfc:	b513      	push	{r0, r1, r4, lr}
 800dbfe:	6804      	ldr	r4, [r0, #0]
 800dc00:	b914      	cbnz	r4, 800dc08 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0xc>
 800dc02:	601c      	str	r4, [r3, #0]
 800dc04:	b002      	add	sp, #8
 800dc06:	bd10      	pop	{r4, pc}
 800dc08:	9300      	str	r3, [sp, #0]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	460a      	mov	r2, r1
 800dc0e:	2100      	movs	r1, #0
 800dc10:	f7ff ff64 	bl	800dadc <RemoteConfigParams::Builder(TRemoteConfigParams const*, char*, unsigned int, unsigned int&)>
 800dc14:	e7f6      	b.n	800dc04 <RemoteConfigParams::Save(char*, unsigned int, unsigned int&)+0x8>

0800dc16 <RemoteConfigParams::Set(RemoteConfig*)>:
 800dc16:	b538      	push	{r3, r4, r5, lr}
 800dc18:	460c      	mov	r4, r1
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	6841      	ldr	r1, [r0, #4]
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f001 0101 	and.w	r1, r1, #1
 800dc24:	f7ff fc50 	bl	800d4c8 <RemoteConfig::SetDisable(bool)>
 800dc28:	686b      	ldr	r3, [r5, #4]
 800dc2a:	f3c3 0240 	ubfx	r2, r3, #1, #1
 800dc2e:	7362      	strb	r2, [r4, #13]
 800dc30:	f3c3 0280 	ubfx	r2, r3, #2, #1
 800dc34:	73a2      	strb	r2, [r4, #14]
 800dc36:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 800dc3a:	73e2      	strb	r2, [r4, #15]
 800dc3c:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800dc40:	06db      	lsls	r3, r3, #27
 800dc42:	7422      	strb	r2, [r4, #16]
 800dc44:	d506      	bpl.n	800dc54 <RemoteConfigParams::Set(RemoteConfig*)+0x3e>
 800dc46:	4620      	mov	r0, r4
 800dc48:	f105 010c 	add.w	r1, r5, #12
 800dc4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc50:	f7ff bc5a 	b.w	800d508 <RemoteConfig::SetDisplayName(char const*)>
 800dc54:	bd38      	pop	{r3, r4, r5, pc}

0800dc56 <RemoteConfigParams::Dump()>:
 800dc56:	4770      	bx	lr

0800dc58 <RemoteConfig::HandleReboot()>:
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	7b83      	ldrb	r3, [r0, #14]
 800dc5c:	b32b      	cbz	r3, 800dcaa <RemoteConfig::HandleReboot()+0x52>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	4c12      	ldr	r4, [pc, #72]	; (800dcac <RemoteConfig::HandleReboot()+0x54>)
 800dc62:	7443      	strb	r3, [r0, #17]
 800dc64:	2100      	movs	r1, #0
 800dc66:	6820      	ldr	r0, [r4, #0]
 800dc68:	f005 f820 	bl	8012cac <Display::SetSleep(bool)>
 800dc6c:	4d10      	ldr	r5, [pc, #64]	; (800dcb0 <RemoteConfig::HandleReboot()+0x58>)
 800dc6e:	6828      	ldr	r0, [r5, #0]
 800dc70:	f000 fdb8 	bl	800e7e4 <SpiFlashStore::Flash()>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	d1fa      	bne.n	800dc6e <RemoteConfig::HandleReboot()+0x16>
 800dc78:	4b0e      	ldr	r3, [pc, #56]	; (800dcb4 <RemoteConfig::HandleReboot()+0x5c>)
 800dc7a:	6818      	ldr	r0, [r3, #0]
 800dc7c:	f002 fd5a 	bl	8010734 <Network::Shutdown()>
 800dc80:	480d      	ldr	r0, [pc, #52]	; (800dcb8 <RemoteConfig::HandleReboot()+0x60>)
 800dc82:	f006 f80f 	bl	8013ca4 <printf>
 800dc86:	6823      	ldr	r3, [r4, #0]
 800dc88:	6858      	ldr	r0, [r3, #4]
 800dc8a:	b110      	cbz	r0, 800dc92 <RemoteConfig::HandleReboot()+0x3a>
 800dc8c:	6803      	ldr	r3, [r0, #0]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	4798      	blx	r3
 800dc92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc96:	6820      	ldr	r0, [r4, #0]
 800dc98:	f244 0240 	movw	r2, #16448	; 0x4040
 800dc9c:	4907      	ldr	r1, [pc, #28]	; (800dcbc <RemoteConfig::HandleReboot()+0x64>)
 800dc9e:	f004 ffc2 	bl	8012c26 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 800dca2:	4b07      	ldr	r3, [pc, #28]	; (800dcc0 <RemoteConfig::HandleReboot()+0x68>)
 800dca4:	6818      	ldr	r0, [r3, #0]
 800dca6:	f005 fbb5 	bl	8013414 <Hardware::Reboot()>
 800dcaa:	bd38      	pop	{r3, r4, r5, pc}
 800dcac:	2000a870 	andcs	sl, r0, r0, ror r8
 800dcb0:	20002998 	mulcs	r0, r8, r9
 800dcb4:	2000a298 	mulcs	r0, r8, r2
 800dcb8:	080167e0 	stmdaeq	r1, {r5, r6, r7, r8, r9, sl, sp, lr}
 800dcbc:	080167ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sl, sp, lr}
 800dcc0:	2000a964 	andcs	sl, r0, r4, ror #18

0800dcc4 <RemoteConfig::GetIndex(void const*, unsigned int&)>:
 800dcc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dcc8:	2000      	movs	r0, #0
 800dcca:	4d12      	ldr	r5, [pc, #72]	; (800dd14 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x50>)
 800dccc:	f10d 0c04 	add.w	ip, sp, #4
 800dcd0:	6814      	ldr	r4, [r2, #0]
 800dcd2:	7d2b      	ldrb	r3, [r5, #20]
 800dcd4:	692e      	ldr	r6, [r5, #16]
 800dcd6:	42a3      	cmp	r3, r4
 800dcd8:	bf34      	ite	cc
 800dcda:	4664      	movcc	r4, ip
 800dcdc:	4614      	movcs	r4, r2
 800dcde:	9301      	str	r3, [sp, #4]
 800dce0:	6827      	ldr	r7, [r4, #0]
 800dce2:	460c      	mov	r4, r1
 800dce4:	3e01      	subs	r6, #1
 800dce6:	440f      	add	r7, r1
 800dce8:	42bc      	cmp	r4, r7
 800dcea:	d011      	beq.n	800dd10 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x4c>
 800dcec:	f894 8000 	ldrb.w	r8, [r4]
 800dcf0:	f816 ef01 	ldrb.w	lr, [r6, #1]!
 800dcf4:	45f0      	cmp	r8, lr
 800dcf6:	d009      	beq.n	800dd0c <RemoteConfig::GetIndex(void const*, unsigned int&)+0x48>
 800dcf8:	3001      	adds	r0, #1
 800dcfa:	2805      	cmp	r0, #5
 800dcfc:	f105 051c 	add.w	r5, r5, #28
 800dd00:	d1e6      	bne.n	800dcd0 <RemoteConfig::GetIndex(void const*, unsigned int&)+0xc>
 800dd02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd06:	b002      	add	sp, #8
 800dd08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd0c:	3401      	adds	r4, #1
 800dd0e:	e7eb      	b.n	800dce8 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x24>
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	e7f8      	b.n	800dd06 <RemoteConfig::GetIndex(void const*, unsigned int&)+0x42>
 800dd14:	08016838 	stmdaeq	r1, {r3, r4, r5, fp, sp, lr}

0800dd18 <strcmp>:
 800dd18:	1e43      	subs	r3, r0, #1
 800dd1a:	3901      	subs	r1, #1
 800dd1c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800dd20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd24:	4290      	cmp	r0, r2
 800dd26:	d102      	bne.n	800dd2e <strcmp+0x16>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	d1f7      	bne.n	800dd1c <strcmp+0x4>
 800dd2c:	4770      	bx	lr
 800dd2e:	1a80      	subs	r0, r0, r2
 800dd30:	4770      	bx	lr

0800dd32 <strcasecmp>:
 800dd32:	b530      	push	{r4, r5, lr}
 800dd34:	1e42      	subs	r2, r0, #1
 800dd36:	3901      	subs	r1, #1
 800dd38:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dd42:	2b19      	cmp	r3, #25
 800dd44:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dd48:	bf98      	it	ls
 800dd4a:	f100 0420 	addls.w	r4, r0, #32
 800dd4e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 800dd52:	2d19      	cmp	r5, #25
 800dd54:	bf98      	it	ls
 800dd56:	3320      	addls	r3, #32
 800dd58:	42a3      	cmp	r3, r4
 800dd5a:	d102      	bne.n	800dd62 <strcasecmp+0x30>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d1eb      	bne.n	800dd38 <strcasecmp+0x6>
 800dd60:	bd30      	pop	{r4, r5, pc}
 800dd62:	1ae0      	subs	r0, r4, r3
 800dd64:	e7fc      	b.n	800dd60 <strcasecmp+0x2e>
	...

0800dd68 <PropertiesConfig::EnableJSON(bool)>:
 800dd68:	4a04      	ldr	r2, [pc, #16]	; (800dd7c <PropertiesConfig::EnableJSON(bool)+0x14>)
 800dd6a:	7813      	ldrb	r3, [r2, #0]
 800dd6c:	b118      	cbz	r0, 800dd76 <PropertiesConfig::EnableJSON(bool)+0xe>
 800dd6e:	f043 0301 	orr.w	r3, r3, #1
 800dd72:	7013      	strb	r3, [r2, #0]
 800dd74:	4770      	bx	lr
 800dd76:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800dd7a:	e7fa      	b.n	800dd72 <PropertiesConfig::EnableJSON(bool)+0xa>
 800dd7c:	2000a86c 	andcs	sl, r0, ip, ror #16

0800dd80 <HttpDaemon::HttpDaemon()>:
 800dd80:	4a0a      	ldr	r2, [pc, #40]	; (800ddac <HttpDaemon::HttpDaemon()+0x2c>)
 800dd82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800dd86:	6002      	str	r2, [r0, #0]
 800dd88:	2200      	movs	r2, #0
 800dd8a:	f44f 7c02 	mov.w	ip, #520	; 0x208
 800dd8e:	e9c0 1204 	strd	r1, r2, [r0, #16]
 800dd92:	2102      	movs	r1, #2
 800dd94:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800dd98:	e9c0 c106 	strd	ip, r1, [r0, #24]
 800dd9c:	60c2      	str	r2, [r0, #12]
 800dd9e:	8402      	strh	r2, [r0, #32]
 800dda0:	f8a0 25c2 	strh.w	r2, [r0, #1474]	; 0x5c2
 800dda4:	f8c0 25c4 	str.w	r2, [r0, #1476]	; 0x5c4
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop
 800ddac:	08016b1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, fp, sp, lr}

0800ddb0 <HttpDaemon::Start()>:
 800ddb0:	4b04      	ldr	r3, [pc, #16]	; (800ddc4 <HttpDaemon::Start()+0x14>)
 800ddb2:	b510      	push	{r4, lr}
 800ddb4:	2150      	movs	r1, #80	; 0x50
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	6818      	ldr	r0, [r3, #0]
 800ddba:	f002 ff35 	bl	8010c28 <Network::TcpBegin(unsigned short)>
 800ddbe:	6120      	str	r0, [r4, #16]
 800ddc0:	bd10      	pop	{r4, pc}
 800ddc2:	bf00      	nop
 800ddc4:	2000a298 	mulcs	r0, r8, r2

0800ddc8 <HttpDaemon::ParseMethod(char*)>:
 800ddc8:	b538      	push	{r3, r4, r5, lr}
 800ddca:	4604      	mov	r4, r0
 800ddcc:	4608      	mov	r0, r1
 800ddce:	491b      	ldr	r1, [pc, #108]	; (800de3c <HttpDaemon::ParseMethod(char*)+0x74>)
 800ddd0:	f005 ffc0 	bl	8013d54 <strtok>
 800ddd4:	4605      	mov	r5, r0
 800ddd6:	b370      	cbz	r0, 800de36 <HttpDaemon::ParseMethod(char*)+0x6e>
 800ddd8:	4919      	ldr	r1, [pc, #100]	; (800de40 <HttpDaemon::ParseMethod(char*)+0x78>)
 800ddda:	f7ff ff9d 	bl	800dd18 <strcmp>
 800ddde:	b940      	cbnz	r0, 800ddf2 <HttpDaemon::ParseMethod(char*)+0x2a>
 800dde0:	61e0      	str	r0, [r4, #28]
 800dde2:	2000      	movs	r0, #0
 800dde4:	4915      	ldr	r1, [pc, #84]	; (800de3c <HttpDaemon::ParseMethod(char*)+0x74>)
 800dde6:	f005 ffb5 	bl	8013d54 <strtok>
 800ddea:	b950      	cbnz	r0, 800de02 <HttpDaemon::ParseMethod(char*)+0x3a>
 800ddec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ddf0:	bd38      	pop	{r3, r4, r5, pc}
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	4913      	ldr	r1, [pc, #76]	; (800de44 <HttpDaemon::ParseMethod(char*)+0x7c>)
 800ddf6:	f7ff ff8f 	bl	800dd18 <strcmp>
 800ddfa:	b9e0      	cbnz	r0, 800de36 <HttpDaemon::ParseMethod(char*)+0x6e>
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	61e3      	str	r3, [r4, #28]
 800de00:	e7ef      	b.n	800dde2 <HttpDaemon::ParseMethod(char*)+0x1a>
 800de02:	6060      	str	r0, [r4, #4]
 800de04:	4910      	ldr	r1, [pc, #64]	; (800de48 <HttpDaemon::ParseMethod(char*)+0x80>)
 800de06:	2000      	movs	r0, #0
 800de08:	f005 ffa4 	bl	8013d54 <strtok>
 800de0c:	2800      	cmp	r0, #0
 800de0e:	d0ed      	beq.n	800ddec <HttpDaemon::ParseMethod(char*)+0x24>
 800de10:	490e      	ldr	r1, [pc, #56]	; (800de4c <HttpDaemon::ParseMethod(char*)+0x84>)
 800de12:	f7ff ff81 	bl	800dd18 <strcmp>
 800de16:	2800      	cmp	r0, #0
 800de18:	d1e8      	bne.n	800ddec <HttpDaemon::ParseMethod(char*)+0x24>
 800de1a:	490d      	ldr	r1, [pc, #52]	; (800de50 <HttpDaemon::ParseMethod(char*)+0x88>)
 800de1c:	f005 ff9a 	bl	8013d54 <strtok>
 800de20:	2800      	cmp	r0, #0
 800de22:	d0e3      	beq.n	800ddec <HttpDaemon::ParseMethod(char*)+0x24>
 800de24:	490b      	ldr	r1, [pc, #44]	; (800de54 <HttpDaemon::ParseMethod(char*)+0x8c>)
 800de26:	f7ff ff77 	bl	800dd18 <strcmp>
 800de2a:	2800      	cmp	r0, #0
 800de2c:	f240 10f9 	movw	r0, #505	; 0x1f9
 800de30:	bf08      	it	eq
 800de32:	20c8      	moveq	r0, #200	; 0xc8
 800de34:	e7dc      	b.n	800ddf0 <HttpDaemon::ParseMethod(char*)+0x28>
 800de36:	f240 10f5 	movw	r0, #501	; 0x1f5
 800de3a:	e7d9      	b.n	800ddf0 <HttpDaemon::ParseMethod(char*)+0x28>
 800de3c:	08017a8f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r9, fp, ip, sp, lr}
 800de40:	080168c4 	stmdaeq	r1, {r2, r6, r7, fp, sp, lr}
 800de44:	080168c8 	stmdaeq	r1, {r3, r6, r7, fp, sp, lr}
 800de48:	08016932 	stmdaeq	r1, {r1, r4, r5, r8, fp, sp, lr}
 800de4c:	080168cd 	stmdaeq	r1, {r0, r2, r3, r6, r7, fp, sp, lr}
 800de50:	080168d2 	stmdaeq	r1, {r1, r4, r6, r7, fp, sp, lr}
 800de54:	080168d5 	stmdaeq	r1, {r0, r2, r4, r6, r7, fp, sp, lr}

0800de58 <HttpDaemon::ParseHeaderField(char*)>:
 800de58:	b538      	push	{r3, r4, r5, lr}
 800de5a:	4605      	mov	r5, r0
 800de5c:	4608      	mov	r0, r1
 800de5e:	491d      	ldr	r1, [pc, #116]	; (800ded4 <HttpDaemon::ParseHeaderField(char*)+0x7c>)
 800de60:	f005 ff78 	bl	8013d54 <strtok>
 800de64:	4604      	mov	r4, r0
 800de66:	b910      	cbnz	r0, 800de6e <HttpDaemon::ParseHeaderField(char*)+0x16>
 800de68:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800de6c:	bd38      	pop	{r3, r4, r5, pc}
 800de6e:	491a      	ldr	r1, [pc, #104]	; (800ded8 <HttpDaemon::ParseHeaderField(char*)+0x80>)
 800de70:	f7ff ff5f 	bl	800dd32 <strcasecmp>
 800de74:	b970      	cbnz	r0, 800de94 <HttpDaemon::ParseHeaderField(char*)+0x3c>
 800de76:	4919      	ldr	r1, [pc, #100]	; (800dedc <HttpDaemon::ParseHeaderField(char*)+0x84>)
 800de78:	f005 ff6c 	bl	8013d54 <strtok>
 800de7c:	2800      	cmp	r0, #0
 800de7e:	d0f3      	beq.n	800de68 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800de80:	4917      	ldr	r1, [pc, #92]	; (800dee0 <HttpDaemon::ParseHeaderField(char*)+0x88>)
 800de82:	f7ff ff49 	bl	800dd18 <strcmp>
 800de86:	b108      	cbz	r0, 800de8c <HttpDaemon::ParseHeaderField(char*)+0x34>
 800de88:	20c8      	movs	r0, #200	; 0xc8
 800de8a:	e7ef      	b.n	800de6c <HttpDaemon::ParseHeaderField(char*)+0x14>
 800de8c:	2301      	movs	r3, #1
 800de8e:	f885 3020 	strb.w	r3, [r5, #32]
 800de92:	e7f9      	b.n	800de88 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800de94:	4620      	mov	r0, r4
 800de96:	4913      	ldr	r1, [pc, #76]	; (800dee4 <HttpDaemon::ParseHeaderField(char*)+0x8c>)
 800de98:	f7ff ff4b 	bl	800dd32 <strcasecmp>
 800de9c:	4604      	mov	r4, r0
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d1f2      	bne.n	800de88 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800dea2:	4911      	ldr	r1, [pc, #68]	; (800dee8 <HttpDaemon::ParseHeaderField(char*)+0x90>)
 800dea4:	f005 ff56 	bl	8013d54 <strtok>
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d0dd      	beq.n	800de68 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800deac:	1e42      	subs	r2, r0, #1
 800deae:	4623      	mov	r3, r4
 800deb0:	200a      	movs	r0, #10
 800deb2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800deb6:	b151      	cbz	r1, 800dece <HttpDaemon::ParseHeaderField(char*)+0x76>
 800deb8:	3930      	subs	r1, #48	; 0x30
 800deba:	2909      	cmp	r1, #9
 800debc:	d8d4      	bhi.n	800de68 <HttpDaemon::ParseHeaderField(char*)+0x10>
 800debe:	fb00 1303 	mla	r3, r0, r3, r1
 800dec2:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 800dec6:	d9f4      	bls.n	800deb2 <HttpDaemon::ParseHeaderField(char*)+0x5a>
 800dec8:	f240 109d 	movw	r0, #413	; 0x19d
 800decc:	e7ce      	b.n	800de6c <HttpDaemon::ParseHeaderField(char*)+0x14>
 800dece:	f8a5 35c6 	strh.w	r3, [r5, #1478]	; 0x5c6
 800ded2:	e7d9      	b.n	800de88 <HttpDaemon::ParseHeaderField(char*)+0x30>
 800ded4:	080168d9 	stmdaeq	r1, {r0, r3, r4, r6, r7, fp, sp, lr}
 800ded8:	080168db 	stmdaeq	r1, {r0, r1, r3, r4, r6, r7, fp, sp, lr}
 800dedc:	080168e8 	stmdaeq	r1, {r3, r5, r6, r7, fp, sp, lr}
 800dee0:	080168eb 	stmdaeq	r1, {r0, r1, r3, r5, r6, r7, fp, sp, lr}
 800dee4:	080168fc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, fp, sp, lr}
 800dee8:	08017a8f 	stmdaeq	r1, {r0, r1, r2, r3, r7, r9, fp, ip, sp, lr}

0800deec <HttpDaemon::ParseRequest()>:
 800deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deee:	2400      	movs	r4, #0
 800def0:	4605      	mov	r5, r0
 800def2:	4622      	mov	r2, r4
 800def4:	4626      	mov	r6, r4
 800def6:	68c1      	ldr	r1, [r0, #12]
 800def8:	f880 4020 	strb.w	r4, [r0, #32]
 800defc:	f8c0 45c4 	str.w	r4, [r0, #1476]	; 0x5c4
 800df00:	8aab      	ldrh	r3, [r5, #20]
 800df02:	42a3      	cmp	r3, r4
 800df04:	d923      	bls.n	800df4e <HttpDaemon::ParseRequest()+0x62>
 800df06:	68eb      	ldr	r3, [r5, #12]
 800df08:	5d18      	ldrb	r0, [r3, r4]
 800df0a:	280a      	cmp	r0, #10
 800df0c:	d10e      	bne.n	800df2c <HttpDaemon::ParseRequest()+0x40>
 800df0e:	4423      	add	r3, r4
 800df10:	f803 6c01 	strb.w	r6, [r3, #-1]
 800df14:	1c57      	adds	r7, r2, #1
 800df16:	b962      	cbnz	r2, 800df32 <HttpDaemon::ParseRequest()+0x46>
 800df18:	4628      	mov	r0, r5
 800df1a:	f7ff ff55 	bl	800ddc8 <HttpDaemon::ParseMethod(char*)>
 800df1e:	28c8      	cmp	r0, #200	; 0xc8
 800df20:	d116      	bne.n	800df50 <HttpDaemon::ParseRequest()+0x64>
 800df22:	463a      	mov	r2, r7
 800df24:	68e9      	ldr	r1, [r5, #12]
 800df26:	3401      	adds	r4, #1
 800df28:	b2a4      	uxth	r4, r4
 800df2a:	4421      	add	r1, r4
 800df2c:	3401      	adds	r4, #1
 800df2e:	b2a4      	uxth	r4, r4
 800df30:	e7e6      	b.n	800df00 <HttpDaemon::ParseRequest()+0x14>
 800df32:	7808      	ldrb	r0, [r1, #0]
 800df34:	b968      	cbnz	r0, 800df52 <HttpDaemon::ParseRequest()+0x66>
 800df36:	696b      	ldr	r3, [r5, #20]
 800df38:	3b01      	subs	r3, #1
 800df3a:	1b1b      	subs	r3, r3, r4
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	f8a5 35c4 	strh.w	r3, [r5, #1476]	; 0x5c4
 800df42:	b123      	cbz	r3, 800df4e <HttpDaemon::ParseRequest()+0x62>
 800df44:	68ea      	ldr	r2, [r5, #12]
 800df46:	3401      	adds	r4, #1
 800df48:	4414      	add	r4, r2
 800df4a:	60ac      	str	r4, [r5, #8]
 800df4c:	54e0      	strb	r0, [r4, r3]
 800df4e:	20c8      	movs	r0, #200	; 0xc8
 800df50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df52:	4628      	mov	r0, r5
 800df54:	f7ff ff80 	bl	800de58 <HttpDaemon::ParseHeaderField(char*)>
 800df58:	e7e1      	b.n	800df1e <HttpDaemon::ParseRequest()+0x32>
	...

0800df5c <HttpDaemon::HandleGetTxt()>:
 800df5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df60:	6847      	ldr	r7, [r0, #4]
 800df62:	4604      	mov	r4, r0
 800df64:	1dbd      	adds	r5, r7, #6
 800df66:	462b      	mov	r3, r5
 800df68:	4618      	mov	r0, r3
 800df6a:	7802      	ldrb	r2, [r0, #0]
 800df6c:	3301      	adds	r3, #1
 800df6e:	2a00      	cmp	r2, #0
 800df70:	d1fa      	bne.n	800df68 <HttpDaemon::HandleGetTxt()+0xc>
 800df72:	1b40      	subs	r0, r0, r5
 800df74:	2804      	cmp	r0, #4
 800df76:	d925      	bls.n	800dfc4 <HttpDaemon::HandleGetTxt()+0x68>
 800df78:	3804      	subs	r0, #4
 800df7a:	4915      	ldr	r1, [pc, #84]	; (800dfd0 <HttpDaemon::HandleGetTxt()+0x74>)
 800df7c:	4428      	add	r0, r5
 800df7e:	f7ff fecb 	bl	800dd18 <strcmp>
 800df82:	b9f8      	cbnz	r0, 800dfc4 <HttpDaemon::HandleGetTxt()+0x68>
 800df84:	4b13      	ldr	r3, [pc, #76]	; (800dfd4 <HttpDaemon::HandleGetTxt()+0x78>)
 800df86:	2001      	movs	r0, #1
 800df88:	f893 8000 	ldrb.w	r8, [r3]
 800df8c:	f7ff feec 	bl	800dd68 <PropertiesConfig::EnableJSON(bool)>
 800df90:	4b11      	ldr	r3, [pc, #68]	; (800dfd8 <HttpDaemon::HandleGetTxt()+0x7c>)
 800df92:	f240 529b 	movw	r2, #1435	; 0x59b
 800df96:	4629      	mov	r1, r5
 800df98:	6818      	ldr	r0, [r3, #0]
 800df9a:	f7ff facd 	bl	800d538 <RemoteConfig::HandleGet(void*, unsigned int)>
 800df9e:	4606      	mov	r6, r0
 800dfa0:	f008 0801 	and.w	r8, r8, #1
 800dfa4:	4640      	mov	r0, r8
 800dfa6:	f7ff fedf 	bl	800dd68 <PropertiesConfig::EnableJSON(bool)>
 800dfaa:	b15e      	cbz	r6, 800dfc4 <HttpDaemon::HandleGetTxt()+0x68>
 800dfac:	f8a4 65c2 	strh.w	r6, [r4, #1474]	; 0x5c2
 800dfb0:	3606      	adds	r6, #6
 800dfb2:	3422      	adds	r4, #34	; 0x22
 800dfb4:	443e      	add	r6, r7
 800dfb6:	42b5      	cmp	r5, r6
 800dfb8:	d008      	beq.n	800dfcc <HttpDaemon::HandleGetTxt()+0x70>
 800dfba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dfbe:	f804 3b01 	strb.w	r3, [r4], #1
 800dfc2:	e7f8      	b.n	800dfb6 <HttpDaemon::HandleGetTxt()+0x5a>
 800dfc4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800dfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfcc:	20c8      	movs	r0, #200	; 0xc8
 800dfce:	e7fb      	b.n	800dfc8 <HttpDaemon::HandleGetTxt()+0x6c>
 800dfd0:	08016804 	stmdaeq	r1, {r2, fp, sp, lr}
 800dfd4:	2000a86c 	andcs	sl, r0, ip, ror #16
 800dfd8:	20001980 	andcs	r1, r0, r0, lsl #19

0800dfdc <HttpDaemon::HandleGet()>:
 800dfdc:	b570      	push	{r4, r5, r6, lr}
 800dfde:	6845      	ldr	r5, [r0, #4]
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	4943      	ldr	r1, [pc, #268]	; (800e0f0 <HttpDaemon::HandleGet()+0x114>)
 800dfe4:	4628      	mov	r0, r5
 800dfe6:	f7ff fe97 	bl	800dd18 <strcmp>
 800dfea:	b120      	cbz	r0, 800dff6 <HttpDaemon::HandleGet()+0x1a>
 800dfec:	4628      	mov	r0, r5
 800dfee:	4941      	ldr	r1, [pc, #260]	; (800e0f4 <HttpDaemon::HandleGet()+0x118>)
 800dff0:	f7ff fe92 	bl	800dd18 <strcmp>
 800dff4:	b960      	cbnz	r0, 800e010 <HttpDaemon::HandleGet()+0x34>
 800dff6:	4621      	mov	r1, r4
 800dff8:	4b3f      	ldr	r3, [pc, #252]	; (800e0f8 <HttpDaemon::HandleGet()+0x11c>)
 800dffa:	4840      	ldr	r0, [pc, #256]	; (800e0fc <HttpDaemon::HandleGet()+0x120>)
 800dffc:	f841 3b22 	str.w	r3, [r1], #34
 800e000:	f000 fa70 	bl	800e4e4 <get_file_content(char const*, char*)>
 800e004:	2800      	cmp	r0, #0
 800e006:	dd1e      	ble.n	800e046 <HttpDaemon::HandleGet()+0x6a>
 800e008:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800e00c:	20c8      	movs	r0, #200	; 0xc8
 800e00e:	bd70      	pop	{r4, r5, r6, pc}
 800e010:	4628      	mov	r0, r5
 800e012:	493b      	ldr	r1, [pc, #236]	; (800e100 <HttpDaemon::HandleGet()+0x124>)
 800e014:	f7ff fe80 	bl	800dd18 <strcmp>
 800e018:	b928      	cbnz	r0, 800e026 <HttpDaemon::HandleGet()+0x4a>
 800e01a:	4621      	mov	r1, r4
 800e01c:	4b39      	ldr	r3, [pc, #228]	; (800e104 <HttpDaemon::HandleGet()+0x128>)
 800e01e:	483a      	ldr	r0, [pc, #232]	; (800e108 <HttpDaemon::HandleGet()+0x12c>)
 800e020:	f841 3b22 	str.w	r3, [r1], #34
 800e024:	e7ec      	b.n	800e000 <HttpDaemon::HandleGet()+0x24>
 800e026:	4628      	mov	r0, r5
 800e028:	4938      	ldr	r1, [pc, #224]	; (800e10c <HttpDaemon::HandleGet()+0x130>)
 800e02a:	f7ff fe75 	bl	800dd18 <strcmp>
 800e02e:	b168      	cbz	r0, 800e04c <HttpDaemon::HandleGet()+0x70>
 800e030:	4a37      	ldr	r2, [pc, #220]	; (800e110 <HttpDaemon::HandleGet()+0x134>)
 800e032:	1e6b      	subs	r3, r5, #1
 800e034:	1d6e      	adds	r6, r5, #5
 800e036:	42b3      	cmp	r3, r6
 800e038:	d00e      	beq.n	800e058 <HttpDaemon::HandleGet()+0x7c>
 800e03a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800e03e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800e042:	4288      	cmp	r0, r1
 800e044:	d0f7      	beq.n	800e036 <HttpDaemon::HandleGet()+0x5a>
 800e046:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800e04a:	e7e0      	b.n	800e00e <HttpDaemon::HandleGet()+0x32>
 800e04c:	4621      	mov	r1, r4
 800e04e:	4b31      	ldr	r3, [pc, #196]	; (800e114 <HttpDaemon::HandleGet()+0x138>)
 800e050:	4831      	ldr	r0, [pc, #196]	; (800e118 <HttpDaemon::HandleGet()+0x13c>)
 800e052:	f841 3b22 	str.w	r3, [r1], #34
 800e056:	e7d3      	b.n	800e000 <HttpDaemon::HandleGet()+0x24>
 800e058:	4b30      	ldr	r3, [pc, #192]	; (800e11c <HttpDaemon::HandleGet()+0x140>)
 800e05a:	3506      	adds	r5, #6
 800e05c:	4628      	mov	r0, r5
 800e05e:	4930      	ldr	r1, [pc, #192]	; (800e120 <HttpDaemon::HandleGet()+0x144>)
 800e060:	6023      	str	r3, [r4, #0]
 800e062:	f7ff fe59 	bl	800dd18 <strcmp>
 800e066:	b930      	cbnz	r0, 800e076 <HttpDaemon::HandleGet()+0x9a>
 800e068:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800e06c:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800e070:	f000 f9c0 	bl	800e3f4 <remoteconfig::json_get_list(char*, unsigned short)>
 800e074:	e7c6      	b.n	800e004 <HttpDaemon::HandleGet()+0x28>
 800e076:	4628      	mov	r0, r5
 800e078:	492a      	ldr	r1, [pc, #168]	; (800e124 <HttpDaemon::HandleGet()+0x148>)
 800e07a:	f7ff fe4d 	bl	800dd18 <strcmp>
 800e07e:	b930      	cbnz	r0, 800e08e <HttpDaemon::HandleGet()+0xb2>
 800e080:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800e084:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800e088:	f000 f9e8 	bl	800e45c <remoteconfig::json_get_version(char*, unsigned short)>
 800e08c:	e7ba      	b.n	800e004 <HttpDaemon::HandleGet()+0x28>
 800e08e:	4628      	mov	r0, r5
 800e090:	4925      	ldr	r1, [pc, #148]	; (800e128 <HttpDaemon::HandleGet()+0x14c>)
 800e092:	f7ff fe41 	bl	800dd18 <strcmp>
 800e096:	b950      	cbnz	r0, 800e0ae <HttpDaemon::HandleGet()+0xd2>
 800e098:	4b24      	ldr	r3, [pc, #144]	; (800e12c <HttpDaemon::HandleGet()+0x150>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	7bdb      	ldrb	r3, [r3, #15]
 800e09e:	b31b      	cbz	r3, 800e0e8 <HttpDaemon::HandleGet()+0x10c>
 800e0a0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800e0a4:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800e0a8:	f000 f9f4 	bl	800e494 <remoteconfig::json_get_uptime(char*, unsigned short)>
 800e0ac:	e7aa      	b.n	800e004 <HttpDaemon::HandleGet()+0x28>
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	491f      	ldr	r1, [pc, #124]	; (800e130 <HttpDaemon::HandleGet()+0x154>)
 800e0b2:	f7ff fe31 	bl	800dd18 <strcmp>
 800e0b6:	b930      	cbnz	r0, 800e0c6 <HttpDaemon::HandleGet()+0xea>
 800e0b8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800e0bc:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800e0c0:	f000 f9f8 	bl	800e4b4 <remoteconfig::json_get_display(char*, unsigned short)>
 800e0c4:	e79e      	b.n	800e004 <HttpDaemon::HandleGet()+0x28>
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	491a      	ldr	r1, [pc, #104]	; (800e134 <HttpDaemon::HandleGet()+0x158>)
 800e0ca:	f7ff fe25 	bl	800dd18 <strcmp>
 800e0ce:	b930      	cbnz	r0, 800e0de <HttpDaemon::HandleGet()+0x102>
 800e0d0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 800e0d4:	f104 0022 	add.w	r0, r4, #34	; 0x22
 800e0d8:	f000 f9fc 	bl	800e4d4 <remoteconfig::json_get_directory(char*, unsigned short)>
 800e0dc:	e792      	b.n	800e004 <HttpDaemon::HandleGet()+0x28>
 800e0de:	4620      	mov	r0, r4
 800e0e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0e4:	f7ff bf3a 	b.w	800df5c <HttpDaemon::HandleGetTxt()>
 800e0e8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e0ec:	e78f      	b.n	800e00e <HttpDaemon::HandleGet()+0x32>
 800e0ee:	bf00      	nop
 800e0f0:	08016932 	stmdaeq	r1, {r1, r4, r5, r8, fp, sp, lr}
 800e0f4:	0801690b 	stmdaeq	r1, {r0, r1, r3, r8, fp, sp, lr}
 800e0f8:	08016b1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, fp, sp, lr}
 800e0fc:	0801690c 	stmdaeq	r1, {r2, r3, r8, fp, sp, lr}
 800e100:	08016917 	stmdaeq	r1, {r0, r1, r2, r4, r8, fp, sp, lr}
 800e104:	08016b3e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r8, r9, fp, sp, lr}
 800e108:	08016918 	stmdaeq	r1, {r3, r4, r8, fp, sp, lr}
 800e10c:	08016923 	stmdaeq	r1, {r0, r1, r5, r8, fp, sp, lr}
 800e110:	0801692d 	stmdaeq	r1, {r0, r2, r3, r5, r8, fp, sp, lr}
 800e114:	08016b5e 	stmdaeq	r1, {r1, r2, r3, r4, r6, r8, r9, fp, sp, lr}
 800e118:	08016924 	stmdaeq	r1, {r2, r5, r8, fp, sp, lr}
 800e11c:	08016b7e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, r8, r9, fp, sp, lr}
 800e120:	08016934 	stmdaeq	r1, {r2, r4, r5, r8, fp, sp, lr}
 800e124:	08016939 	stmdaeq	r1, {r0, r3, r4, r5, r8, fp, sp, lr}
 800e128:	08016941 	stmdaeq	r1, {r0, r6, r8, fp, sp, lr}
 800e12c:	20001980 	andcs	r1, r0, r0, lsl #19
 800e130:	08016948 	stmdaeq	r1, {r3, r6, r8, fp, sp, lr}
 800e134:	08016950 	stmdaeq	r1, {r4, r6, r8, fp, sp, lr}

0800e138 <HttpDaemon::HandlePost(bool)>:
 800e138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e13a:	4604      	mov	r4, r0
 800e13c:	2900      	cmp	r1, #0
 800e13e:	f040 8088 	bne.w	800e252 <HttpDaemon::HandlePost(bool)+0x11a>
 800e142:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d055      	beq.n	800e1f6 <HttpDaemon::HandlePost(bool)+0xbe>
 800e14a:	6845      	ldr	r5, [r0, #4]
 800e14c:	4944      	ldr	r1, [pc, #272]	; (800e260 <HttpDaemon::HandlePost(bool)+0x128>)
 800e14e:	4628      	mov	r0, r5
 800e150:	f7ff fde2 	bl	800dd18 <strcmp>
 800e154:	2800      	cmp	r0, #0
 800e156:	bf0c      	ite	eq
 800e158:	2301      	moveq	r3, #1
 800e15a:	2300      	movne	r3, #0
 800e15c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 800e160:	d04d      	beq.n	800e1fe <HttpDaemon::HandlePost(bool)+0xc6>
 800e162:	4628      	mov	r0, r5
 800e164:	493f      	ldr	r1, [pc, #252]	; (800e264 <HttpDaemon::HandlePost(bool)+0x12c>)
 800e166:	f7ff fdd7 	bl	800dd18 <strcmp>
 800e16a:	2800      	cmp	r0, #0
 800e16c:	d047      	beq.n	800e1fe <HttpDaemon::HandlePost(bool)+0xc6>
 800e16e:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800e172:	e042      	b.n	800e1fa <HttpDaemon::HandlePost(bool)+0xc2>
 800e174:	493c      	ldr	r1, [pc, #240]	; (800e268 <HttpDaemon::HandlePost(bool)+0x130>)
 800e176:	68a0      	ldr	r0, [r4, #8]
 800e178:	f10d 0207 	add.w	r2, sp, #7
 800e17c:	f004 fc94 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e180:	b9a8      	cbnz	r0, 800e1ae <HttpDaemon::HandlePost(bool)+0x76>
 800e182:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e186:	4b39      	ldr	r3, [pc, #228]	; (800e26c <HttpDaemon::HandlePost(bool)+0x134>)
 800e188:	fab1 f181 	clz	r1, r1
 800e18c:	6818      	ldr	r0, [r3, #0]
 800e18e:	0949      	lsrs	r1, r1, #5
 800e190:	f004 fd8c 	bl	8012cac <Display::SetSleep(bool)>
 800e194:	4620      	mov	r0, r4
 800e196:	4b36      	ldr	r3, [pc, #216]	; (800e270 <HttpDaemon::HandlePost(bool)+0x138>)
 800e198:	f240 519f 	movw	r1, #1439	; 0x59f
 800e19c:	4a35      	ldr	r2, [pc, #212]	; (800e274 <HttpDaemon::HandlePost(bool)+0x13c>)
 800e19e:	f840 3b22 	str.w	r3, [r0], #34
 800e1a2:	f005 fda7 	bl	8013cf4 <snprintf>
 800e1a6:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800e1aa:	20c8      	movs	r0, #200	; 0xc8
 800e1ac:	e025      	b.n	800e1fa <HttpDaemon::HandlePost(bool)+0xc2>
 800e1ae:	4932      	ldr	r1, [pc, #200]	; (800e278 <HttpDaemon::HandlePost(bool)+0x140>)
 800e1b0:	68a0      	ldr	r0, [r4, #8]
 800e1b2:	f10d 0207 	add.w	r2, sp, #7
 800e1b6:	f004 fc77 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e1ba:	b9e0      	cbnz	r0, 800e1f6 <HttpDaemon::HandlePost(bool)+0xbe>
 800e1bc:	4b2f      	ldr	r3, [pc, #188]	; (800e27c <HttpDaemon::HandlePost(bool)+0x144>)
 800e1be:	6818      	ldr	r0, [r3, #0]
 800e1c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e1c4:	b11b      	cbz	r3, 800e1ce <HttpDaemon::HandlePost(bool)+0x96>
 800e1c6:	2104      	movs	r1, #4
 800e1c8:	f005 f882 	bl	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 800e1cc:	e7e2      	b.n	800e194 <HttpDaemon::HandlePost(bool)+0x5c>
 800e1ce:	2102      	movs	r1, #2
 800e1d0:	e7fa      	b.n	800e1c8 <HttpDaemon::HandlePost(bool)+0x90>
 800e1d2:	4b2b      	ldr	r3, [pc, #172]	; (800e280 <HttpDaemon::HandlePost(bool)+0x148>)
 800e1d4:	2001      	movs	r0, #1
 800e1d6:	781d      	ldrb	r5, [r3, #0]
 800e1d8:	f7ff fdc6 	bl	800dd68 <PropertiesConfig::EnableJSON(bool)>
 800e1dc:	4b29      	ldr	r3, [pc, #164]	; (800e284 <HttpDaemon::HandlePost(bool)+0x14c>)
 800e1de:	f8b4 25c4 	ldrh.w	r2, [r4, #1476]	; 0x5c4
 800e1e2:	6818      	ldr	r0, [r3, #0]
 800e1e4:	68a1      	ldr	r1, [r4, #8]
 800e1e6:	f005 0501 	and.w	r5, r5, #1
 800e1ea:	f7ff fa71 	bl	800d6d0 <RemoteConfig::HandleSet(void*, unsigned int)>
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f7ff fdba 	bl	800dd68 <PropertiesConfig::EnableJSON(bool)>
 800e1f4:	e7ce      	b.n	800e194 <HttpDaemon::HandlePost(bool)+0x5c>
 800e1f6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800e1fa:	b003      	add	sp, #12
 800e1fc:	bd30      	pop	{r4, r5, pc}
 800e1fe:	f8b4 35c6 	ldrh.w	r3, [r4, #1478]	; 0x5c6
 800e202:	6962      	ldr	r2, [r4, #20]
 800e204:	429a      	cmp	r2, r3
 800e206:	dbd0      	blt.n	800e1aa <HttpDaemon::HandlePost(bool)+0x72>
 800e208:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d0cc      	beq.n	800e1aa <HttpDaemon::HandlePost(bool)+0x72>
 800e210:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800e214:	2b00      	cmp	r3, #0
 800e216:	d0dc      	beq.n	800e1d2 <HttpDaemon::HandlePost(bool)+0x9a>
 800e218:	2201      	movs	r2, #1
 800e21a:	f8b4 15c4 	ldrh.w	r1, [r4, #1476]	; 0x5c4
 800e21e:	68a0      	ldr	r0, [r4, #8]
 800e220:	f004 f95e 	bl	80124e0 <properties::convert_json_file(char*, unsigned short, bool)>
 800e224:	2800      	cmp	r0, #0
 800e226:	dde6      	ble.n	800e1f6 <HttpDaemon::HandlePost(bool)+0xbe>
 800e228:	4917      	ldr	r1, [pc, #92]	; (800e288 <HttpDaemon::HandlePost(bool)+0x150>)
 800e22a:	68a0      	ldr	r0, [r4, #8]
 800e22c:	f10d 0207 	add.w	r2, sp, #7
 800e230:	f004 fc3a 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 800e234:	2800      	cmp	r0, #0
 800e236:	d19d      	bne.n	800e174 <HttpDaemon::HandlePost(bool)+0x3c>
 800e238:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d0a9      	beq.n	800e194 <HttpDaemon::HandlePost(bool)+0x5c>
 800e240:	4b10      	ldr	r3, [pc, #64]	; (800e284 <HttpDaemon::HandlePost(bool)+0x14c>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	7b9b      	ldrb	r3, [r3, #14]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d0d5      	beq.n	800e1f6 <HttpDaemon::HandlePost(bool)+0xbe>
 800e24a:	4b10      	ldr	r3, [pc, #64]	; (800e28c <HttpDaemon::HandlePost(bool)+0x154>)
 800e24c:	6818      	ldr	r0, [r3, #0]
 800e24e:	f005 f8e1 	bl	8013414 <Hardware::Reboot()>
 800e252:	68c3      	ldr	r3, [r0, #12]
 800e254:	6083      	str	r3, [r0, #8]
 800e256:	6943      	ldr	r3, [r0, #20]
 800e258:	f8a0 35c4 	strh.w	r3, [r0, #1476]	; 0x5c4
 800e25c:	e7d8      	b.n	800e210 <HttpDaemon::HandlePost(bool)+0xd8>
 800e25e:	bf00      	nop
 800e260:	0801695a 	stmdaeq	r1, {r1, r3, r4, r6, r8, fp, sp, lr}
 800e264:	080168f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, fp, sp, lr}
 800e268:	08016948 	stmdaeq	r1, {r3, r6, r8, fp, sp, lr}
 800e26c:	2000a870 	andcs	sl, r0, r0, ror r8
 800e270:	08016b1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, fp, sp, lr}
 800e274:	08016977 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}
 800e278:	0801696e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r8, fp, sp, lr}
 800e27c:	2000a960 	andcs	sl, r0, r0, ror #18
 800e280:	2000a86c 	andcs	sl, r0, ip, ror #16
 800e284:	20001980 	andcs	r1, r0, r0, lsl #19
 800e288:	08016967 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, fp, sp, lr}
 800e28c:	2000a964 	andcs	sl, r0, r4, ror #18

0800e290 <HttpDaemon::Run()>:
 800e290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e292:	4e4a      	ldr	r6, [pc, #296]	; (800e3bc <HttpDaemon::Run()+0x12c>)
 800e294:	4604      	mov	r4, r0
 800e296:	6901      	ldr	r1, [r0, #16]
 800e298:	f100 020c 	add.w	r2, r0, #12
 800e29c:	b085      	sub	sp, #20
 800e29e:	6830      	ldr	r0, [r6, #0]
 800e2a0:	f002 fcc5 	bl	8010c2e <Network::TcpRead(int, unsigned char const**)>
 800e2a4:	6160      	str	r0, [r4, #20]
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d061      	beq.n	800e36e <HttpDaemon::Run()+0xde>
 800e2aa:	69a3      	ldr	r3, [r4, #24]
 800e2ac:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800e2b0:	d15f      	bne.n	800e372 <HttpDaemon::Run()+0xe2>
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f7ff fe1a 	bl	800deec <HttpDaemon::ParseRequest()>
 800e2b8:	28c8      	cmp	r0, #200	; 0xc8
 800e2ba:	61a0      	str	r0, [r4, #24]
 800e2bc:	d106      	bne.n	800e2cc <HttpDaemon::Run()+0x3c>
 800e2be:	69e3      	ldr	r3, [r4, #28]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d147      	bne.n	800e354 <HttpDaemon::Run()+0xc4>
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f7ff fe89 	bl	800dfdc <HttpDaemon::HandleGet()>
 800e2ca:	61a0      	str	r0, [r4, #24]
 800e2cc:	69a3      	ldr	r3, [r4, #24]
 800e2ce:	f104 0722 	add.w	r7, r4, #34	; 0x22
 800e2d2:	2bc8      	cmp	r3, #200	; 0xc8
 800e2d4:	d06f      	beq.n	800e3b6 <HttpDaemon::Run()+0x126>
 800e2d6:	f5b3 7fcf 	cmp.w	r3, #414	; 0x19e
 800e2da:	d062      	beq.n	800e3a2 <HttpDaemon::Run()+0x112>
 800e2dc:	dc52      	bgt.n	800e384 <HttpDaemon::Run()+0xf4>
 800e2de:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 800e2e2:	d060      	beq.n	800e3a6 <HttpDaemon::Run()+0x116>
 800e2e4:	f240 129d 	movw	r2, #413	; 0x19d
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d05e      	beq.n	800e3aa <HttpDaemon::Run()+0x11a>
 800e2ec:	4d34      	ldr	r5, [pc, #208]	; (800e3c0 <HttpDaemon::Run()+0x130>)
 800e2ee:	4a35      	ldr	r2, [pc, #212]	; (800e3c4 <HttpDaemon::Run()+0x134>)
 800e2f0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800e2f4:	bf18      	it	ne
 800e2f6:	4615      	movne	r5, r2
 800e2f8:	4a33      	ldr	r2, [pc, #204]	; (800e3c8 <HttpDaemon::Run()+0x138>)
 800e2fa:	f240 519f 	movw	r1, #1439	; 0x59f
 800e2fe:	6022      	str	r2, [r4, #0]
 800e300:	4638      	mov	r0, r7
 800e302:	e9cd 5500 	strd	r5, r5, [sp]
 800e306:	4a31      	ldr	r2, [pc, #196]	; (800e3cc <HttpDaemon::Run()+0x13c>)
 800e308:	f005 fcf4 	bl	8013cf4 <snprintf>
 800e30c:	f8a4 05c2 	strh.w	r0, [r4, #1474]	; 0x5c2
 800e310:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800e314:	f240 519f 	movw	r1, #1439	; 0x59f
 800e318:	9303      	str	r3, [sp, #12]
 800e31a:	6823      	ldr	r3, [r4, #0]
 800e31c:	4a2c      	ldr	r2, [pc, #176]	; (800e3d0 <HttpDaemon::Run()+0x140>)
 800e31e:	9302      	str	r3, [sp, #8]
 800e320:	4b2c      	ldr	r3, [pc, #176]	; (800e3d4 <HttpDaemon::Run()+0x144>)
 800e322:	68e0      	ldr	r0, [r4, #12]
 800e324:	e9cd 5300 	strd	r5, r3, [sp]
 800e328:	69a3      	ldr	r3, [r4, #24]
 800e32a:	f005 fce3 	bl	8013cf4 <snprintf>
 800e32e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800e332:	b283      	uxth	r3, r0
 800e334:	6830      	ldr	r0, [r6, #0]
 800e336:	f002 fc7e 	bl	8010c36 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800e33a:	463a      	mov	r2, r7
 800e33c:	f8b4 35c2 	ldrh.w	r3, [r4, #1474]	; 0x5c2
 800e340:	6921      	ldr	r1, [r4, #16]
 800e342:	6830      	ldr	r0, [r6, #0]
 800e344:	f002 fc77 	bl	8010c36 <Network::TcpWrite(int, unsigned char const*, unsigned short)>
 800e348:	f44f 7202 	mov.w	r2, #520	; 0x208
 800e34c:	2302      	movs	r3, #2
 800e34e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800e352:	e00c      	b.n	800e36e <HttpDaemon::Run()+0xde>
 800e354:	2b01      	cmp	r3, #1
 800e356:	d1b9      	bne.n	800e2cc <HttpDaemon::Run()+0x3c>
 800e358:	2100      	movs	r1, #0
 800e35a:	4620      	mov	r0, r4
 800e35c:	f7ff feec 	bl	800e138 <HttpDaemon::HandlePost(bool)>
 800e360:	28c8      	cmp	r0, #200	; 0xc8
 800e362:	61a0      	str	r0, [r4, #24]
 800e364:	d1b2      	bne.n	800e2cc <HttpDaemon::Run()+0x3c>
 800e366:	f8b4 35c4 	ldrh.w	r3, [r4, #1476]	; 0x5c4
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d1ae      	bne.n	800e2cc <HttpDaemon::Run()+0x3c>
 800e36e:	b005      	add	sp, #20
 800e370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e372:	2bc8      	cmp	r3, #200	; 0xc8
 800e374:	d1aa      	bne.n	800e2cc <HttpDaemon::Run()+0x3c>
 800e376:	69e1      	ldr	r1, [r4, #28]
 800e378:	2901      	cmp	r1, #1
 800e37a:	d1a7      	bne.n	800e2cc <HttpDaemon::Run()+0x3c>
 800e37c:	4620      	mov	r0, r4
 800e37e:	f7ff fedb 	bl	800e138 <HttpDaemon::HandlePost(bool)>
 800e382:	e7a2      	b.n	800e2ca <HttpDaemon::Run()+0x3a>
 800e384:	f240 12f5 	movw	r2, #501	; 0x1f5
 800e388:	4293      	cmp	r3, r2
 800e38a:	d010      	beq.n	800e3ae <HttpDaemon::Run()+0x11e>
 800e38c:	f240 12f9 	movw	r2, #505	; 0x1f9
 800e390:	4293      	cmp	r3, r2
 800e392:	d00e      	beq.n	800e3b2 <HttpDaemon::Run()+0x122>
 800e394:	4d10      	ldr	r5, [pc, #64]	; (800e3d8 <HttpDaemon::Run()+0x148>)
 800e396:	4a0b      	ldr	r2, [pc, #44]	; (800e3c4 <HttpDaemon::Run()+0x134>)
 800e398:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e39c:	bf18      	it	ne
 800e39e:	4615      	movne	r5, r2
 800e3a0:	e7aa      	b.n	800e2f8 <HttpDaemon::Run()+0x68>
 800e3a2:	4d0e      	ldr	r5, [pc, #56]	; (800e3dc <HttpDaemon::Run()+0x14c>)
 800e3a4:	e7a8      	b.n	800e2f8 <HttpDaemon::Run()+0x68>
 800e3a6:	4d0e      	ldr	r5, [pc, #56]	; (800e3e0 <HttpDaemon::Run()+0x150>)
 800e3a8:	e7a6      	b.n	800e2f8 <HttpDaemon::Run()+0x68>
 800e3aa:	4d0e      	ldr	r5, [pc, #56]	; (800e3e4 <HttpDaemon::Run()+0x154>)
 800e3ac:	e7a4      	b.n	800e2f8 <HttpDaemon::Run()+0x68>
 800e3ae:	4d0e      	ldr	r5, [pc, #56]	; (800e3e8 <HttpDaemon::Run()+0x158>)
 800e3b0:	e7a2      	b.n	800e2f8 <HttpDaemon::Run()+0x68>
 800e3b2:	4d0e      	ldr	r5, [pc, #56]	; (800e3ec <HttpDaemon::Run()+0x15c>)
 800e3b4:	e7a0      	b.n	800e2f8 <HttpDaemon::Run()+0x68>
 800e3b6:	4d0e      	ldr	r5, [pc, #56]	; (800e3f0 <HttpDaemon::Run()+0x160>)
 800e3b8:	e7aa      	b.n	800e310 <HttpDaemon::Run()+0x80>
 800e3ba:	bf00      	nop
 800e3bc:	2000a298 	mulcs	r0, r8, r2
 800e3c0:	08016a38 	stmdaeq	r1, {r3, r4, r5, r9, fp, sp, lr}
 800e3c4:	08016a44 	stmdaeq	r1, {r2, r6, r9, fp, sp, lr}
 800e3c8:	08016b1e 	stmdaeq	r1, {r1, r2, r3, r4, r8, r9, fp, sp, lr}
 800e3cc:	08016a6b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r9, fp, sp, lr}
 800e3d0:	08016ac6 	stmdaeq	r1, {r1, r2, r6, r7, r9, fp, sp, lr}
 800e3d4:	08015f25 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl, fp, ip, lr}
 800e3d8:	08016a52 	stmdaeq	r1, {r1, r4, r6, r9, fp, sp, lr}
 800e3dc:	080169f6 	stmdaeq	r1, {r1, r2, r4, r5, r6, r7, r8, fp, sp, lr}
 800e3e0:	080169ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, r8, fp, sp, lr}
 800e3e4:	080169d3 	stmdaeq	r1, {r0, r1, r4, r6, r7, r8, fp, sp, lr}
 800e3e8:	08016a21 	stmdaeq	r1, {r0, r5, r9, fp, sp, lr}
 800e3ec:	08016a0b 	stmdaeq	r1, {r0, r1, r3, r9, fp, sp, lr}
 800e3f0:	08016a68 	stmdaeq	r1, {r3, r5, r6, r9, fp, sp, lr}

0800e3f4 <remoteconfig::json_get_list(char*, unsigned short)>:
 800e3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f8:	4b14      	ldr	r3, [pc, #80]	; (800e44c <remoteconfig::json_get_list(char*, unsigned short)+0x58>)
 800e3fa:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800e450 <remoteconfig::json_get_list(char*, unsigned short)+0x5c>
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	b088      	sub	sp, #32
 800e402:	4605      	mov	r5, r0
 800e404:	f8d8 0000 	ldr.w	r0, [r8]
 800e408:	691c      	ldr	r4, [r3, #16]
 800e40a:	460e      	mov	r6, r1
 800e40c:	f7ff f844 	bl	800d498 <RemoteConfig::GetStringNode() const>
 800e410:	4607      	mov	r7, r0
 800e412:	f8d8 0000 	ldr.w	r0, [r8]
 800e416:	f7ff f84b 	bl	800d4b0 <RemoteConfig::GetStringOutput() const>
 800e41a:	4b0e      	ldr	r3, [pc, #56]	; (800e454 <remoteconfig::json_get_list(char*, unsigned short)+0x60>)
 800e41c:	4631      	mov	r1, r6
 800e41e:	7a1a      	ldrb	r2, [r3, #8]
 800e420:	3309      	adds	r3, #9
 800e422:	9303      	str	r3, [sp, #12]
 800e424:	0e23      	lsrs	r3, r4, #24
 800e426:	9302      	str	r3, [sp, #8]
 800e428:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800e42c:	9301      	str	r3, [sp, #4]
 800e42e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800e432:	e9cd 0205 	strd	r0, r2, [sp, #20]
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	4628      	mov	r0, r5
 800e43a:	4a07      	ldr	r2, [pc, #28]	; (800e458 <remoteconfig::json_get_list(char*, unsigned short)+0x64>)
 800e43c:	9704      	str	r7, [sp, #16]
 800e43e:	b2e3      	uxtb	r3, r4
 800e440:	f005 fc58 	bl	8013cf4 <snprintf>
 800e444:	b280      	uxth	r0, r0
 800e446:	b008      	add	sp, #32
 800e448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e44c:	2000a298 	mulcs	r0, r8, r2
 800e450:	20001980 	andcs	r1, r0, r0, lsl #19
 800e454:	2000195c 	andcs	r1, r0, ip, asr r9
 800e458:	08016bf8 	stmdaeq	r1, {r3, r4, r5, r6, r7, r8, r9, fp, sp, lr}

0800e45c <remoteconfig::json_get_version(char*, unsigned short)>:
 800e45c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e45e:	2208      	movs	r2, #8
 800e460:	4b09      	ldr	r3, [pc, #36]	; (800e488 <remoteconfig::json_get_version(char*, unsigned short)+0x2c>)
 800e462:	9204      	str	r2, [sp, #16]
 800e464:	f1a3 020b 	sub.w	r2, r3, #11
 800e468:	9203      	str	r2, [sp, #12]
 800e46a:	220b      	movs	r2, #11
 800e46c:	9202      	str	r2, [sp, #8]
 800e46e:	4a07      	ldr	r2, [pc, #28]	; (800e48c <remoteconfig::json_get_version(char*, unsigned short)+0x30>)
 800e470:	9305      	str	r3, [sp, #20]
 800e472:	3b0e      	subs	r3, #14
 800e474:	9201      	str	r2, [sp, #4]
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	4a05      	ldr	r2, [pc, #20]	; (800e490 <remoteconfig::json_get_version(char*, unsigned short)+0x34>)
 800e47a:	2303      	movs	r3, #3
 800e47c:	f005 fc3a 	bl	8013cf4 <snprintf>
 800e480:	b280      	uxth	r0, r0
 800e482:	b007      	add	sp, #28
 800e484:	f85d fb04 	ldr.w	pc, [sp], #4
 800e488:	2000a912 	andcs	sl, r0, r2, lsl r9
 800e48c:	08015f25 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl, fp, ip, lr}
 800e490:	08016c57 	stmdaeq	r1, {r0, r1, r2, r4, r6, sl, fp, sp, lr}

0800e494 <remoteconfig::json_get_uptime(char*, unsigned short)>:
 800e494:	b508      	push	{r3, lr}
 800e496:	4b05      	ldr	r3, [pc, #20]	; (800e4ac <remoteconfig::json_get_uptime(char*, unsigned short)+0x18>)
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4a2:	4a03      	ldr	r2, [pc, #12]	; (800e4b0 <remoteconfig::json_get_uptime(char*, unsigned short)+0x1c>)
 800e4a4:	f005 fc26 	bl	8013cf4 <snprintf>
 800e4a8:	b280      	uxth	r0, r0
 800e4aa:	bd08      	pop	{r3, pc}
 800e4ac:	2000a97c 	andcs	sl, r0, ip, ror r9
 800e4b0:	08016c9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, sl, fp, sp, lr}

0800e4b4 <remoteconfig::json_get_display(char*, unsigned short)>:
 800e4b4:	b508      	push	{r3, lr}
 800e4b6:	4b05      	ldr	r3, [pc, #20]	; (800e4cc <remoteconfig::json_get_display(char*, unsigned short)+0x18>)
 800e4b8:	4a05      	ldr	r2, [pc, #20]	; (800e4d0 <remoteconfig::json_get_display(char*, unsigned short)+0x1c>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	7a1b      	ldrb	r3, [r3, #8]
 800e4be:	f083 0301 	eor.w	r3, r3, #1
 800e4c2:	f005 fc17 	bl	8013cf4 <snprintf>
 800e4c6:	b280      	uxth	r0, r0
 800e4c8:	bd08      	pop	{r3, pc}
 800e4ca:	bf00      	nop
 800e4cc:	2000a870 	andcs	sl, r0, r0, ror r8
 800e4d0:	08016cac 	stmdaeq	r1, {r2, r3, r5, r7, sl, fp, sp, lr}

0800e4d4 <remoteconfig::json_get_directory(char*, unsigned short)>:
 800e4d4:	b508      	push	{r3, lr}
 800e4d6:	4a02      	ldr	r2, [pc, #8]	; (800e4e0 <remoteconfig::json_get_directory(char*, unsigned short)+0xc>)
 800e4d8:	f005 fc0c 	bl	8013cf4 <snprintf>
 800e4dc:	b280      	uxth	r0, r0
 800e4de:	bd08      	pop	{r3, pc}
 800e4e0:	08016cbb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, sl, fp, sp, lr}

0800e4e4 <get_file_content(char const*, char*)>:
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4e8:	4a10      	ldr	r2, [pc, #64]	; (800e52c <get_file_content(char const*, char*)+0x48>)
 800e4ea:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800e4ee:	1e46      	subs	r6, r0, #1
 800e4f0:	3c01      	subs	r4, #1
 800e4f2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800e4f6:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 800e4fa:	42bd      	cmp	r5, r7
 800e4fc:	d10f      	bne.n	800e51e <get_file_content(char const*, char*)+0x3a>
 800e4fe:	2d00      	cmp	r5, #0
 800e500:	d1f7      	bne.n	800e4f2 <get_file_content(char const*, char*)+0xe>
 800e502:	4608      	mov	r0, r1
 800e504:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	3b01      	subs	r3, #1
 800e50c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800e510:	f800 2b01 	strb.w	r2, [r0], #1
 800e514:	2a00      	cmp	r2, #0
 800e516:	d1f9      	bne.n	800e50c <get_file_content(char const*, char*)+0x28>
 800e518:	1a40      	subs	r0, r0, r1
 800e51a:	3801      	subs	r0, #1
 800e51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e51e:	3301      	adds	r3, #1
 800e520:	2b03      	cmp	r3, #3
 800e522:	d1e2      	bne.n	800e4ea <get_file_content(char const*, char*)+0x6>
 800e524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e528:	e7f8      	b.n	800e51c <get_file_content(char const*, char*)+0x38>
 800e52a:	bf00      	nop
 800e52c:	08016ffc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}

0800e530 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>:
 800e530:	2300      	movs	r3, #0
 800e532:	2020      	movs	r0, #32
 800e534:	b510      	push	{r4, lr}
 800e536:	4a04      	ldr	r2, [pc, #16]	; (800e548 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x18>)
 800e538:	428b      	cmp	r3, r1
 800e53a:	d004      	beq.n	800e546 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x16>
 800e53c:	f852 4b04 	ldr.w	r4, [r2], #4
 800e540:	3301      	adds	r3, #1
 800e542:	4420      	add	r0, r4
 800e544:	e7f8      	b.n	800e538 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)+0x8>
 800e546:	bd10      	pop	{r4, pc}
 800e548:	08017540 	stmdaeq	r1, {r6, r8, sl, ip, sp, lr}

0800e54c <SpiFlashStore::Init()>:
 800e54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e550:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800e674 <SpiFlashStore::Init()+0x128>
 800e554:	4607      	mov	r7, r0
 800e556:	b085      	sub	sp, #20
 800e558:	f8d8 0000 	ldr.w	r0, [r8]
 800e55c:	f000 fcbe 	bl	800eedc <FlashRom::GetSectorSize()>
 800e560:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800e564:	4605      	mov	r5, r0
 800e566:	f040 8083 	bne.w	800e670 <SpiFlashStore::Init()+0x124>
 800e56a:	f8d8 0000 	ldr.w	r0, [r8]
 800e56e:	f000 fcad 	bl	800eecc <FlashRom::GetSize()>
 800e572:	4b41      	ldr	r3, [pc, #260]	; (800e678 <SpiFlashStore::Init()+0x12c>)
 800e574:	f5a0 5180 	sub.w	r1, r0, #4096	; 0x1000
 800e578:	f3c1 060b 	ubfx	r6, r1, #0, #12
 800e57c:	6019      	str	r1, [r3, #0]
 800e57e:	2e00      	cmp	r6, #0
 800e580:	d176      	bne.n	800e670 <SpiFlashStore::Init()+0x124>
 800e582:	4c3e      	ldr	r4, [pc, #248]	; (800e67c <SpiFlashStore::Init()+0x130>)
 800e584:	ab03      	add	r3, sp, #12
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	462a      	mov	r2, r5
 800e58a:	4623      	mov	r3, r4
 800e58c:	f8d8 0000 	ldr.w	r0, [r8]
 800e590:	f000 fca7 	bl	800eee2 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>
 800e594:	7823      	ldrb	r3, [r4, #0]
 800e596:	2b41      	cmp	r3, #65	; 0x41
 800e598:	bf1c      	itt	ne
 800e59a:	2341      	movne	r3, #65	; 0x41
 800e59c:	7023      	strbne	r3, [r4, #0]
 800e59e:	7863      	ldrb	r3, [r4, #1]
 800e5a0:	bf14      	ite	ne
 800e5a2:	4635      	movne	r5, r6
 800e5a4:	2501      	moveq	r5, #1
 800e5a6:	2b76      	cmp	r3, #118	; 0x76
 800e5a8:	bf1c      	itt	ne
 800e5aa:	2376      	movne	r3, #118	; 0x76
 800e5ac:	7063      	strbne	r3, [r4, #1]
 800e5ae:	78a3      	ldrb	r3, [r4, #2]
 800e5b0:	bf18      	it	ne
 800e5b2:	2500      	movne	r5, #0
 800e5b4:	2b56      	cmp	r3, #86	; 0x56
 800e5b6:	bf1c      	itt	ne
 800e5b8:	2356      	movne	r3, #86	; 0x56
 800e5ba:	70a3      	strbne	r3, [r4, #2]
 800e5bc:	78e3      	ldrb	r3, [r4, #3]
 800e5be:	bf18      	it	ne
 800e5c0:	2500      	movne	r5, #0
 800e5c2:	2b10      	cmp	r3, #16
 800e5c4:	d01c      	beq.n	800e600 <SpiFlashStore::Init()+0xb4>
 800e5c6:	2310      	movs	r3, #16
 800e5c8:	70e3      	strb	r3, [r4, #3]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	2500      	movs	r5, #0
 800e5ce:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800e5d2:	4b2b      	ldr	r3, [pc, #172]	; (800e680 <SpiFlashStore::Init()+0x134>)
 800e5d4:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800e684 <SpiFlashStore::Init()+0x138>
 800e5d8:	701a      	strb	r2, [r3, #0]
 800e5da:	4631      	mov	r1, r6
 800e5dc:	4638      	mov	r0, r7
 800e5de:	f7ff ffa7 	bl	800e530 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e5e2:	1823      	adds	r3, r4, r0
 800e5e4:	5425      	strb	r5, [r4, r0]
 800e5e6:	705d      	strb	r5, [r3, #1]
 800e5e8:	709d      	strb	r5, [r3, #2]
 800e5ea:	70dd      	strb	r5, [r3, #3]
 800e5ec:	f858 3b04 	ldr.w	r3, [r8], #4
 800e5f0:	1d02      	adds	r2, r0, #4
 800e5f2:	4403      	add	r3, r0
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d931      	bls.n	800e65c <SpiFlashStore::Init()+0x110>
 800e5f8:	f804 9002 	strb.w	r9, [r4, r2]
 800e5fc:	3201      	adds	r2, #1
 800e5fe:	e7f9      	b.n	800e5f4 <SpiFlashStore::Init()+0xa8>
 800e600:	2d00      	cmp	r5, #0
 800e602:	d0e2      	beq.n	800e5ca <SpiFlashStore::Init()+0x7e>
 800e604:	f04f 0900 	mov.w	r9, #0
 800e608:	46c8      	mov	r8, r9
 800e60a:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800e688 <SpiFlashStore::Init()+0x13c>
 800e60e:	f8da b000 	ldr.w	fp, [sl]
 800e612:	4631      	mov	r1, r6
 800e614:	4638      	mov	r0, r7
 800e616:	f7ff ff8b 	bl	800e530 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e61a:	5c23      	ldrb	r3, [r4, r0]
 800e61c:	2bff      	cmp	r3, #255	; 0xff
 800e61e:	d114      	bne.n	800e64a <SpiFlashStore::Init()+0xfe>
 800e620:	1823      	adds	r3, r4, r0
 800e622:	785a      	ldrb	r2, [r3, #1]
 800e624:	2aff      	cmp	r2, #255	; 0xff
 800e626:	d110      	bne.n	800e64a <SpiFlashStore::Init()+0xfe>
 800e628:	789a      	ldrb	r2, [r3, #2]
 800e62a:	2aff      	cmp	r2, #255	; 0xff
 800e62c:	d10d      	bne.n	800e64a <SpiFlashStore::Init()+0xfe>
 800e62e:	78da      	ldrb	r2, [r3, #3]
 800e630:	2aff      	cmp	r2, #255	; 0xff
 800e632:	d10a      	bne.n	800e64a <SpiFlashStore::Init()+0xfe>
 800e634:	46a9      	mov	r9, r5
 800e636:	f04f 0b01 	mov.w	fp, #1
 800e63a:	f804 8000 	strb.w	r8, [r4, r0]
 800e63e:	f883 8001 	strb.w	r8, [r3, #1]
 800e642:	f883 8002 	strb.w	r8, [r3, #2]
 800e646:	f883 8003 	strb.w	r8, [r3, #3]
 800e64a:	3601      	adds	r6, #1
 800e64c:	2e1c      	cmp	r6, #28
 800e64e:	d1e0      	bne.n	800e612 <SpiFlashStore::Init()+0xc6>
 800e650:	f1b9 0f00 	cmp.w	r9, #0
 800e654:	d008      	beq.n	800e668 <SpiFlashStore::Init()+0x11c>
 800e656:	f8ca b000 	str.w	fp, [sl]
 800e65a:	e005      	b.n	800e668 <SpiFlashStore::Init()+0x11c>
 800e65c:	3601      	adds	r6, #1
 800e65e:	2e1c      	cmp	r6, #28
 800e660:	d1bb      	bne.n	800e5da <SpiFlashStore::Init()+0x8e>
 800e662:	2501      	movs	r5, #1
 800e664:	4b08      	ldr	r3, [pc, #32]	; (800e688 <SpiFlashStore::Init()+0x13c>)
 800e666:	601d      	str	r5, [r3, #0]
 800e668:	4628      	mov	r0, r5
 800e66a:	b005      	add	sp, #20
 800e66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e670:	2500      	movs	r5, #0
 800e672:	e7f9      	b.n	800e668 <SpiFlashStore::Init()+0x11c>
 800e674:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800e678:	20002988 	andcs	r2, r0, r8, lsl #19
 800e67c:	20001988 	andcs	r1, r0, r8, lsl #19
 800e680:	2000299c 	mulcs	r0, ip, r9
 800e684:	08017540 	stmdaeq	r1, {r6, r8, sl, ip, sp, lr}
 800e688:	20002994 	mulcs	r0, r4, r9

0800e68c <SpiFlashStore::SpiFlashStore()>:
 800e68c:	b538      	push	{r3, r4, r5, lr}
 800e68e:	4b0d      	ldr	r3, [pc, #52]	; (800e6c4 <SpiFlashStore::SpiFlashStore()+0x38>)
 800e690:	4604      	mov	r4, r0
 800e692:	6018      	str	r0, [r3, #0]
 800e694:	4b0c      	ldr	r3, [pc, #48]	; (800e6c8 <SpiFlashStore::SpiFlashStore()+0x3c>)
 800e696:	4d0d      	ldr	r5, [pc, #52]	; (800e6cc <SpiFlashStore::SpiFlashStore()+0x40>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	b113      	cbz	r3, 800e6a4 <SpiFlashStore::SpiFlashStore()+0x18>
 800e69e:	f7ff ff55 	bl	800e54c <SpiFlashStore::Init()>
 800e6a2:	7028      	strb	r0, [r5, #0]
 800e6a4:	782b      	ldrb	r3, [r5, #0]
 800e6a6:	b153      	cbz	r3, 800e6be <SpiFlashStore::SpiFlashStore()+0x32>
 800e6a8:	2320      	movs	r3, #32
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	4908      	ldr	r1, [pc, #32]	; (800e6d0 <SpiFlashStore::SpiFlashStore()+0x44>)
 800e6ae:	f851 0b04 	ldr.w	r0, [r1], #4
 800e6b2:	3201      	adds	r2, #1
 800e6b4:	2a1c      	cmp	r2, #28
 800e6b6:	4403      	add	r3, r0
 800e6b8:	d1f9      	bne.n	800e6ae <SpiFlashStore::SpiFlashStore()+0x22>
 800e6ba:	4a06      	ldr	r2, [pc, #24]	; (800e6d4 <SpiFlashStore::SpiFlashStore()+0x48>)
 800e6bc:	6013      	str	r3, [r2, #0]
 800e6be:	4620      	mov	r0, r4
 800e6c0:	bd38      	pop	{r3, r4, r5, pc}
 800e6c2:	bf00      	nop
 800e6c4:	20002998 	mulcs	r0, r8, r9
 800e6c8:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800e6cc:	2000298c 	andcs	r2, r0, ip, lsl #19
 800e6d0:	08017540 	stmdaeq	r1, {r6, r8, sl, ip, sp, lr}
 800e6d4:	20002990 	mulcs	r0, r0, r9

0800e6d8 <SpiFlashStore::ResetSetList(spiflashstore::Store)>:
 800e6d8:	b508      	push	{r3, lr}
 800e6da:	f7ff ff29 	bl	800e530 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	4904      	ldr	r1, [pc, #16]	; (800e6f4 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x1c>)
 800e6e2:	1842      	adds	r2, r0, r1
 800e6e4:	540b      	strb	r3, [r1, r0]
 800e6e6:	7053      	strb	r3, [r2, #1]
 800e6e8:	7093      	strb	r3, [r2, #2]
 800e6ea:	70d3      	strb	r3, [r2, #3]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	4b02      	ldr	r3, [pc, #8]	; (800e6f8 <SpiFlashStore::ResetSetList(spiflashstore::Store)+0x20>)
 800e6f0:	601a      	str	r2, [r3, #0]
 800e6f2:	bd08      	pop	{r3, pc}
 800e6f4:	20001988 	andcs	r1, r0, r8, lsl #19
 800e6f8:	20002994 	mulcs	r0, r4, r9

0800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>:
 800e6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e700:	461c      	mov	r4, r3
 800e702:	4b19      	ldr	r3, [pc, #100]	; (800e768 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x6c>)
 800e704:	4615      	mov	r5, r2
 800e706:	781f      	ldrb	r7, [r3, #0]
 800e708:	9e07      	ldr	r6, [sp, #28]
 800e70a:	b35f      	cbz	r7, 800e764 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800e70c:	f7ff ff10 	bl	800e530 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e710:	f04f 0c00 	mov.w	ip, #0
 800e714:	4a15      	ldr	r2, [pc, #84]	; (800e76c <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x70>)
 800e716:	1941      	adds	r1, r0, r5
 800e718:	1e63      	subs	r3, r4, #1
 800e71a:	9c06      	ldr	r4, [sp, #24]
 800e71c:	4411      	add	r1, r2
 800e71e:	440c      	add	r4, r1
 800e720:	42a1      	cmp	r1, r4
 800e722:	d00a      	beq.n	800e73a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x3e>
 800e724:	f891 8000 	ldrb.w	r8, [r1]
 800e728:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800e72c:	3101      	adds	r1, #1
 800e72e:	45f0      	cmp	r8, lr
 800e730:	bf1c      	itt	ne
 800e732:	f801 ec01 	strbne.w	lr, [r1, #-1]
 800e736:	46bc      	movne	ip, r7
 800e738:	e7f2      	b.n	800e720 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x24>
 800e73a:	f1bc 0f00 	cmp.w	ip, #0
 800e73e:	d011      	beq.n	800e764 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800e740:	4b0b      	ldr	r3, [pc, #44]	; (800e770 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x74>)
 800e742:	6819      	ldr	r1, [r3, #0]
 800e744:	b109      	cbz	r1, 800e74a <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x4e>
 800e746:	2906      	cmp	r1, #6
 800e748:	d101      	bne.n	800e74e <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x52>
 800e74a:	2101      	movs	r1, #1
 800e74c:	6019      	str	r1, [r3, #0]
 800e74e:	4b09      	ldr	r3, [pc, #36]	; (800e774 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x78>)
 800e750:	6819      	ldr	r1, [r3, #0]
 800e752:	4b09      	ldr	r3, [pc, #36]	; (800e778 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x7c>)
 800e754:	6019      	str	r1, [r3, #0]
 800e756:	b12d      	cbz	r5, 800e764 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800e758:	b126      	cbz	r6, 800e764 <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)+0x68>
 800e75a:	9b08      	ldr	r3, [sp, #32]
 800e75c:	4418      	add	r0, r3
 800e75e:	5813      	ldr	r3, [r2, r0]
 800e760:	4333      	orrs	r3, r6
 800e762:	5013      	str	r3, [r2, r0]
 800e764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e768:	2000298c 	andcs	r2, r0, ip, lsl #19
 800e76c:	20001988 	andcs	r1, r0, r8, lsl #19
 800e770:	20002994 	mulcs	r0, r4, r9
 800e774:	2000a97c 	andcs	sl, r0, ip, ror r9
 800e778:	20001984 	andcs	r1, r0, r4, lsl #19

0800e77c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>:
 800e77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e780:	461d      	mov	r5, r3
 800e782:	4b15      	ldr	r3, [pc, #84]	; (800e7d8 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x5c>)
 800e784:	b085      	sub	sp, #20
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	4607      	mov	r7, r0
 800e78a:	4688      	mov	r8, r1
 800e78c:	4614      	mov	r4, r2
 800e78e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800e792:	b1eb      	cbz	r3, 800e7d0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 800e794:	f7ff fecc 	bl	800e530 <SpiFlashStore::GetStoreOffset(spiflashstore::Store)>
 800e798:	4910      	ldr	r1, [pc, #64]	; (800e7dc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x60>)
 800e79a:	4a11      	ldr	r2, [pc, #68]	; (800e7e0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x64>)
 800e79c:	7809      	ldrb	r1, [r1, #0]
 800e79e:	eb00 0309 	add.w	r3, r0, r9
 800e7a2:	189e      	adds	r6, r3, r2
 800e7a4:	b951      	cbnz	r1, 800e7bc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 800e7a6:	589b      	ldr	r3, [r3, r2]
 800e7a8:	b143      	cbz	r3, 800e7bc <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x40>
 800e7aa:	3c01      	subs	r4, #1
 800e7ac:	4435      	add	r5, r6
 800e7ae:	42b5      	cmp	r5, r6
 800e7b0:	d00e      	beq.n	800e7d0 <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x54>
 800e7b2:	f816 3b01 	ldrb.w	r3, [r6], #1
 800e7b6:	f804 3f01 	strb.w	r3, [r4, #1]!
 800e7ba:	e7f8      	b.n	800e7ae <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)+0x32>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	464a      	mov	r2, r9
 800e7c0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800e7c4:	4641      	mov	r1, r8
 800e7c6:	4623      	mov	r3, r4
 800e7c8:	4638      	mov	r0, r7
 800e7ca:	9500      	str	r5, [sp, #0]
 800e7cc:	f7ff ff96 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e7d0:	b005      	add	sp, #20
 800e7d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7d6:	bf00      	nop
 800e7d8:	2000298c 	andcs	r2, r0, ip, lsl #19
 800e7dc:	2000299c 	mulcs	r0, ip, r9
 800e7e0:	20001988 	andcs	r1, r0, r8, lsl #19

0800e7e4 <SpiFlashStore::Flash()>:
 800e7e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7e6:	4c25      	ldr	r4, [pc, #148]	; (800e87c <SpiFlashStore::Flash()+0x98>)
 800e7e8:	6820      	ldr	r0, [r4, #0]
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d043      	beq.n	800e876 <SpiFlashStore::Flash()+0x92>
 800e7ee:	3801      	subs	r0, #1
 800e7f0:	2805      	cmp	r0, #5
 800e7f2:	d831      	bhi.n	800e858 <SpiFlashStore::Flash()+0x74>
 800e7f4:	e8df f000 	tbb	[pc, r0]
 800e7f8:	2e140b03 	vnmlscs.f64	d0, d4, d3
 800e7fc:	4b203025 	blmi	881a898 <__exidx_end+0x802730>
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	4b20      	ldr	r3, [pc, #128]	; (800e884 <SpiFlashStore::Flash()+0xa0>)
 800e804:	601a      	str	r2, [r3, #0]
 800e806:	2302      	movs	r3, #2
 800e808:	6023      	str	r3, [r4, #0]
 800e80a:	2001      	movs	r0, #1
 800e80c:	e033      	b.n	800e876 <SpiFlashStore::Flash()+0x92>
 800e80e:	4b1c      	ldr	r3, [pc, #112]	; (800e880 <SpiFlashStore::Flash()+0x9c>)
 800e810:	4a1c      	ldr	r2, [pc, #112]	; (800e884 <SpiFlashStore::Flash()+0xa0>)
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	6812      	ldr	r2, [r2, #0]
 800e816:	1a9b      	subs	r3, r3, r2
 800e818:	2b63      	cmp	r3, #99	; 0x63
 800e81a:	d9f6      	bls.n	800e80a <SpiFlashStore::Flash()+0x26>
 800e81c:	2303      	movs	r3, #3
 800e81e:	e7f3      	b.n	800e808 <SpiFlashStore::Flash()+0x24>
 800e820:	4919      	ldr	r1, [pc, #100]	; (800e888 <SpiFlashStore::Flash()+0xa4>)
 800e822:	481a      	ldr	r0, [pc, #104]	; (800e88c <SpiFlashStore::Flash()+0xa8>)
 800e824:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e828:	6809      	ldr	r1, [r1, #0]
 800e82a:	6800      	ldr	r0, [r0, #0]
 800e82c:	ab03      	add	r3, sp, #12
 800e82e:	f000 fb67 	bl	800ef00 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>
 800e832:	2800      	cmp	r0, #0
 800e834:	d0e9      	beq.n	800e80a <SpiFlashStore::Flash()+0x26>
 800e836:	4b12      	ldr	r3, [pc, #72]	; (800e880 <SpiFlashStore::Flash()+0x9c>)
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	4b12      	ldr	r3, [pc, #72]	; (800e884 <SpiFlashStore::Flash()+0xa0>)
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	2305      	movs	r3, #5
 800e840:	e7e2      	b.n	800e808 <SpiFlashStore::Flash()+0x24>
 800e842:	4b0f      	ldr	r3, [pc, #60]	; (800e880 <SpiFlashStore::Flash()+0x9c>)
 800e844:	4a0f      	ldr	r2, [pc, #60]	; (800e884 <SpiFlashStore::Flash()+0xa0>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	6812      	ldr	r2, [r2, #0]
 800e84a:	1a9b      	subs	r3, r3, r2
 800e84c:	2b63      	cmp	r3, #99	; 0x63
 800e84e:	d9dc      	bls.n	800e80a <SpiFlashStore::Flash()+0x26>
 800e850:	2304      	movs	r3, #4
 800e852:	e7d9      	b.n	800e808 <SpiFlashStore::Flash()+0x24>
 800e854:	2306      	movs	r3, #6
 800e856:	e7d7      	b.n	800e808 <SpiFlashStore::Flash()+0x24>
 800e858:	ab03      	add	r3, sp, #12
 800e85a:	4a0d      	ldr	r2, [pc, #52]	; (800e890 <SpiFlashStore::Flash()+0xac>)
 800e85c:	490a      	ldr	r1, [pc, #40]	; (800e888 <SpiFlashStore::Flash()+0xa4>)
 800e85e:	480b      	ldr	r0, [pc, #44]	; (800e88c <SpiFlashStore::Flash()+0xa8>)
 800e860:	9300      	str	r3, [sp, #0]
 800e862:	6812      	ldr	r2, [r2, #0]
 800e864:	4b0b      	ldr	r3, [pc, #44]	; (800e894 <SpiFlashStore::Flash()+0xb0>)
 800e866:	6809      	ldr	r1, [r1, #0]
 800e868:	6800      	ldr	r0, [r0, #0]
 800e86a:	f000 fbe9 	bl	800f040 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>
 800e86e:	2800      	cmp	r0, #0
 800e870:	d0cb      	beq.n	800e80a <SpiFlashStore::Flash()+0x26>
 800e872:	2000      	movs	r0, #0
 800e874:	6020      	str	r0, [r4, #0]
 800e876:	b004      	add	sp, #16
 800e878:	bd10      	pop	{r4, pc}
 800e87a:	bf00      	nop
 800e87c:	20002994 	mulcs	r0, r4, r9
 800e880:	2000a97c 	andcs	sl, r0, ip, ror r9
 800e884:	20001984 	andcs	r1, r0, r4, lsl #19
 800e888:	20002988 	andcs	r2, r0, r8, lsl #19
 800e88c:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800e890:	20002990 	mulcs	r0, r0, r9
 800e894:	20001988 	andcs	r1, r0, r8, lsl #19

0800e898 <StoreArtNet::~StoreArtNet()>:
 800e898:	4770      	bx	lr

0800e89a <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800e89a:	3804      	subs	r0, #4
 800e89c:	4770      	bx	lr
	...

0800e8a0 <StoreArtNet::Update(artnetparams::Params const*)>:
 800e8a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	2187      	movs	r1, #135	; 0x87
 800e8a8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800e8ac:	4804      	ldr	r0, [pc, #16]	; (800e8c0 <StoreArtNet::Update(artnetparams::Params const*)+0x20>)
 800e8ae:	9100      	str	r1, [sp, #0]
 800e8b0:	6800      	ldr	r0, [r0, #0]
 800e8b2:	2101      	movs	r1, #1
 800e8b4:	f7ff ff22 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e8b8:	b005      	add	sp, #20
 800e8ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8be:	bf00      	nop
 800e8c0:	20002998 	mulcs	r0, r8, r9

0800e8c4 <StoreArtNet::SaveShortName(char const*)>:
 800e8c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	2202      	movs	r2, #2
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e8d0:	2212      	movs	r2, #18
 800e8d2:	4805      	ldr	r0, [pc, #20]	; (800e8e8 <StoreArtNet::SaveShortName(char const*)+0x24>)
 800e8d4:	9200      	str	r2, [sp, #0]
 800e8d6:	2101      	movs	r1, #1
 800e8d8:	220c      	movs	r2, #12
 800e8da:	6800      	ldr	r0, [r0, #0]
 800e8dc:	f7ff ff0e 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e8e0:	b005      	add	sp, #20
 800e8e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8e6:	bf00      	nop
 800e8e8:	20002998 	mulcs	r0, r8, r9

0800e8ec <non-virtual thunk to StoreArtNet::SaveShortName(char const*)>:
 800e8ec:	f1a0 0004 	sub.w	r0, r0, #4
 800e8f0:	f7ff bfe8 	b.w	800e8c4 <StoreArtNet::SaveShortName(char const*)>

0800e8f4 <StoreArtNet::SaveLongName(char const*)>:
 800e8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8f6:	460b      	mov	r3, r1
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	2101      	movs	r1, #1
 800e8fc:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800e900:	2240      	movs	r2, #64	; 0x40
 800e902:	4804      	ldr	r0, [pc, #16]	; (800e914 <StoreArtNet::SaveLongName(char const*)+0x20>)
 800e904:	9200      	str	r2, [sp, #0]
 800e906:	6800      	ldr	r0, [r0, #0]
 800e908:	221e      	movs	r2, #30
 800e90a:	f7ff fef7 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e90e:	b005      	add	sp, #20
 800e910:	f85d fb04 	ldr.w	pc, [sp], #4
 800e914:	20002998 	mulcs	r0, r8, r9

0800e918 <non-virtual thunk to StoreArtNet::SaveLongName(char const*)>:
 800e918:	f1a0 0004 	sub.w	r0, r0, #4
 800e91c:	f7ff bfea 	b.w	800e8f4 <StoreArtNet::SaveLongName(char const*)>

0800e920 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800e920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e922:	2300      	movs	r3, #0
 800e924:	9302      	str	r3, [sp, #8]
 800e926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e92a:	4608      	mov	r0, r1
 800e92c:	408b      	lsls	r3, r1
 800e92e:	2101      	movs	r1, #1
 800e930:	f88d 2017 	strb.w	r2, [sp, #23]
 800e934:	f100 0267 	add.w	r2, r0, #103	; 0x67
 800e938:	4805      	ldr	r0, [pc, #20]	; (800e950 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)+0x30>)
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	9100      	str	r1, [sp, #0]
 800e93e:	6800      	ldr	r0, [r0, #0]
 800e940:	f10d 0317 	add.w	r3, sp, #23
 800e944:	f7ff feda 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e948:	b007      	add	sp, #28
 800e94a:	f85d fb04 	ldr.w	pc, [sp], #4
 800e94e:	bf00      	nop
 800e950:	20002998 	mulcs	r0, r8, r9

0800e954 <non-virtual thunk to StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>:
 800e954:	f1a0 0004 	sub.w	r0, r0, #4
 800e958:	f7ff bfe2 	b.w	800e920 <StoreArtNet::SaveUniverseSwitch(unsigned int, unsigned char)>

0800e95c <StoreArtNet::SaveNetSwitch(unsigned char)>:
 800e95c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e95e:	2204      	movs	r2, #4
 800e960:	2300      	movs	r3, #0
 800e962:	f88d 1017 	strb.w	r1, [sp, #23]
 800e966:	2101      	movs	r1, #1
 800e968:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800e96c:	4804      	ldr	r0, [pc, #16]	; (800e980 <StoreArtNet::SaveNetSwitch(unsigned char)+0x24>)
 800e96e:	9100      	str	r1, [sp, #0]
 800e970:	6800      	ldr	r0, [r0, #0]
 800e972:	f10d 0317 	add.w	r3, sp, #23
 800e976:	f7ff fec1 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e97a:	b007      	add	sp, #28
 800e97c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e980:	20002998 	mulcs	r0, r8, r9

0800e984 <non-virtual thunk to StoreArtNet::SaveNetSwitch(unsigned char)>:
 800e984:	f1a0 0004 	sub.w	r0, r0, #4
 800e988:	f7ff bfe8 	b.w	800e95c <StoreArtNet::SaveNetSwitch(unsigned char)>

0800e98c <StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800e98c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e98e:	2308      	movs	r3, #8
 800e990:	2200      	movs	r2, #0
 800e992:	f88d 1017 	strb.w	r1, [sp, #23]
 800e996:	2101      	movs	r1, #1
 800e998:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e99c:	4805      	ldr	r0, [pc, #20]	; (800e9b4 <StoreArtNet::SaveSubnetSwitch(unsigned char)+0x28>)
 800e99e:	9100      	str	r1, [sp, #0]
 800e9a0:	2205      	movs	r2, #5
 800e9a2:	6800      	ldr	r0, [r0, #0]
 800e9a4:	f10d 0317 	add.w	r3, sp, #23
 800e9a8:	f7ff fea8 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e9ac:	b007      	add	sp, #28
 800e9ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9b2:	bf00      	nop
 800e9b4:	20002998 	mulcs	r0, r8, r9

0800e9b8 <non-virtual thunk to StoreArtNet::SaveSubnetSwitch(unsigned char)>:
 800e9b8:	f1a0 0004 	sub.w	r0, r0, #4
 800e9bc:	f7ff bfe6 	b.w	800e98c <StoreArtNet::SaveSubnetSwitch(unsigned char)>

0800e9c0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800e9c0:	b530      	push	{r4, r5, lr}
 800e9c2:	b087      	sub	sp, #28
 800e9c4:	460c      	mov	r4, r1
 800e9c6:	4d0f      	ldr	r5, [pc, #60]	; (800ea04 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x44>)
 800e9c8:	9205      	str	r2, [sp, #20]
 800e9ca:	b951      	cbnz	r1, 800e9e2 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)+0x22>
 800e9cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e9d0:	9102      	str	r1, [sp, #8]
 800e9d2:	2101      	movs	r1, #1
 800e9d4:	226b      	movs	r2, #107	; 0x6b
 800e9d6:	e9cd 1300 	strd	r1, r3, [sp]
 800e9da:	6828      	ldr	r0, [r5, #0]
 800e9dc:	ab05      	add	r3, sp, #20
 800e9de:	f7ff fe8d 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	9302      	str	r3, [sp, #8]
 800e9e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e9ea:	2101      	movs	r1, #1
 800e9ec:	40a3      	lsls	r3, r4
 800e9ee:	9301      	str	r3, [sp, #4]
 800e9f0:	6828      	ldr	r0, [r5, #0]
 800e9f2:	9100      	str	r1, [sp, #0]
 800e9f4:	ab05      	add	r3, sp, #20
 800e9f6:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 800e9fa:	f7ff fe7f 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800e9fe:	b007      	add	sp, #28
 800ea00:	bd30      	pop	{r4, r5, pc}
 800ea02:	bf00      	nop
 800ea04:	20002998 	mulcs	r0, r8, r9

0800ea08 <non-virtual thunk to StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>:
 800ea08:	f1a0 0004 	sub.w	r0, r0, #4
 800ea0c:	f7ff bfd8 	b.w	800e9c0 <StoreArtNet::SaveMergeMode(unsigned int, lightset::MergeMode)>

0800ea10 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800ea10:	b530      	push	{r4, r5, lr}
 800ea12:	b087      	sub	sp, #28
 800ea14:	460c      	mov	r4, r1
 800ea16:	4d0f      	ldr	r5, [pc, #60]	; (800ea54 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x44>)
 800ea18:	9205      	str	r2, [sp, #20]
 800ea1a:	b951      	cbnz	r1, 800ea32 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)+0x22>
 800ea1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ea20:	9102      	str	r1, [sp, #8]
 800ea22:	2101      	movs	r1, #1
 800ea24:	2270      	movs	r2, #112	; 0x70
 800ea26:	e9cd 1300 	strd	r1, r3, [sp]
 800ea2a:	6828      	ldr	r0, [r5, #0]
 800ea2c:	ab05      	add	r3, sp, #20
 800ea2e:	f7ff fe65 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ea32:	2300      	movs	r3, #0
 800ea34:	9302      	str	r3, [sp, #8]
 800ea36:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ea3a:	2101      	movs	r1, #1
 800ea3c:	40a3      	lsls	r3, r4
 800ea3e:	9301      	str	r3, [sp, #4]
 800ea40:	6828      	ldr	r0, [r5, #0]
 800ea42:	9100      	str	r1, [sp, #0]
 800ea44:	ab05      	add	r3, sp, #20
 800ea46:	f104 0271 	add.w	r2, r4, #113	; 0x71
 800ea4a:	f7ff fe57 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ea4e:	b007      	add	sp, #28
 800ea50:	bd30      	pop	{r4, r5, pc}
 800ea52:	bf00      	nop
 800ea54:	20002998 	mulcs	r0, r8, r9

0800ea58 <non-virtual thunk to StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>:
 800ea58:	f1a0 0004 	sub.w	r0, r0, #4
 800ea5c:	f7ff bfd8 	b.w	800ea10 <StoreArtNet::SavePortProtocol(unsigned int, artnet::PortProtocol)>

0800ea60 <StoreArtNet::~StoreArtNet()>:
 800ea60:	b510      	push	{r4, lr}
 800ea62:	4604      	mov	r4, r0
 800ea64:	f004 fd14 	bl	8013490 <operator delete(void*)>
 800ea68:	4620      	mov	r0, r4
 800ea6a:	bd10      	pop	{r4, pc}

0800ea6c <non-virtual thunk to StoreArtNet::~StoreArtNet()>:
 800ea6c:	f1a0 0004 	sub.w	r0, r0, #4
 800ea70:	e7f6      	b.n	800ea60 <StoreArtNet::~StoreArtNet()>
	...

0800ea74 <StoreArtNet::Copy(artnetparams::Params*)>:
 800ea74:	2300      	movs	r3, #0
 800ea76:	b507      	push	{r0, r1, r2, lr}
 800ea78:	4805      	ldr	r0, [pc, #20]	; (800ea90 <StoreArtNet::Copy(artnetparams::Params*)+0x1c>)
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	460a      	mov	r2, r1
 800ea7e:	2387      	movs	r3, #135	; 0x87
 800ea80:	2101      	movs	r1, #1
 800ea82:	6800      	ldr	r0, [r0, #0]
 800ea84:	f7ff fe7a 	bl	800e77c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800ea88:	b003      	add	sp, #12
 800ea8a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea8e:	bf00      	nop
 800ea90:	20002998 	mulcs	r0, r8, r9

0800ea94 <StoreArtNet::StoreArtNet()>:
 800ea94:	4a04      	ldr	r2, [pc, #16]	; (800eaa8 <StoreArtNet::StoreArtNet()+0x14>)
 800ea96:	f102 0108 	add.w	r1, r2, #8
 800ea9a:	323c      	adds	r2, #60	; 0x3c
 800ea9c:	6042      	str	r2, [r0, #4]
 800ea9e:	4a03      	ldr	r2, [pc, #12]	; (800eaac <StoreArtNet::StoreArtNet()+0x18>)
 800eaa0:	6001      	str	r1, [r0, #0]
 800eaa2:	6010      	str	r0, [r2, #0]
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	080175b0 	stmdaeq	r1, {r4, r5, r7, r8, sl, ip, sp, lr}
 800eaac:	200029a0 	andcs	r2, r0, r0, lsr #19

0800eab0 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800eab0:	4770      	bx	lr
	...

0800eab4 <StoreDisplayUdf::Copy(TDisplayUdfParams*)>:
 800eab4:	2300      	movs	r3, #0
 800eab6:	b507      	push	{r0, r1, r2, lr}
 800eab8:	4805      	ldr	r0, [pc, #20]	; (800ead0 <StoreDisplayUdf::Copy(TDisplayUdfParams*)+0x1c>)
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	460a      	mov	r2, r1
 800eabe:	2322      	movs	r3, #34	; 0x22
 800eac0:	210f      	movs	r1, #15
 800eac2:	6800      	ldr	r0, [r0, #0]
 800eac4:	f7ff fe5a 	bl	800e77c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800eac8:	b003      	add	sp, #12
 800eaca:	f85d fb04 	ldr.w	pc, [sp], #4
 800eace:	bf00      	nop
 800ead0:	20002998 	mulcs	r0, r8, r9

0800ead4 <StoreDisplayUdf::Update(TDisplayUdfParams const*)>:
 800ead4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ead6:	2200      	movs	r2, #0
 800ead8:	460b      	mov	r3, r1
 800eada:	2122      	movs	r1, #34	; 0x22
 800eadc:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800eae0:	4804      	ldr	r0, [pc, #16]	; (800eaf4 <StoreDisplayUdf::Update(TDisplayUdfParams const*)+0x20>)
 800eae2:	9100      	str	r1, [sp, #0]
 800eae4:	6800      	ldr	r0, [r0, #0]
 800eae6:	210f      	movs	r1, #15
 800eae8:	f7ff fe08 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eaec:	b005      	add	sp, #20
 800eaee:	f85d fb04 	ldr.w	pc, [sp], #4
 800eaf2:	bf00      	nop
 800eaf4:	20002998 	mulcs	r0, r8, r9

0800eaf8 <StoreDisplayUdf::~StoreDisplayUdf()>:
 800eaf8:	b510      	push	{r4, lr}
 800eafa:	4604      	mov	r4, r0
 800eafc:	f004 fcc8 	bl	8013490 <operator delete(void*)>
 800eb00:	4620      	mov	r0, r4
 800eb02:	bd10      	pop	{r4, pc}

0800eb04 <StoreDisplayUdf::StoreDisplayUdf()>:
 800eb04:	4a02      	ldr	r2, [pc, #8]	; (800eb10 <StoreDisplayUdf::StoreDisplayUdf()+0xc>)
 800eb06:	6002      	str	r2, [r0, #0]
 800eb08:	4a02      	ldr	r2, [pc, #8]	; (800eb14 <StoreDisplayUdf::StoreDisplayUdf()+0x10>)
 800eb0a:	6010      	str	r0, [r2, #0]
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	08017618 	stmdaeq	r1, {r3, r4, r9, sl, ip, sp, lr}
 800eb14:	200029a4 	andcs	r2, r0, r4, lsr #19

0800eb18 <StoreNetwork::~StoreNetwork()>:
 800eb18:	4770      	bx	lr

0800eb1a <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800eb1a:	3804      	subs	r0, #4
 800eb1c:	4770      	bx	lr
	...

0800eb20 <StoreNetwork::Update(TNetworkParams const*)>:
 800eb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb22:	2200      	movs	r2, #0
 800eb24:	460b      	mov	r3, r1
 800eb26:	215e      	movs	r1, #94	; 0x5e
 800eb28:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800eb2c:	4804      	ldr	r0, [pc, #16]	; (800eb40 <StoreNetwork::Update(TNetworkParams const*)+0x20>)
 800eb2e:	9100      	str	r1, [sp, #0]
 800eb30:	6800      	ldr	r0, [r0, #0]
 800eb32:	4611      	mov	r1, r2
 800eb34:	f7ff fde2 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eb38:	b005      	add	sp, #20
 800eb3a:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb3e:	bf00      	nop
 800eb40:	20002998 	mulcs	r0, r8, r9

0800eb44 <StoreNetwork::SaveDhcp(bool)>:
 800eb44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800eb46:	2301      	movs	r3, #1
 800eb48:	f88d 1017 	strb.w	r1, [sp, #23]
 800eb4c:	2100      	movs	r1, #0
 800eb4e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800eb52:	4805      	ldr	r0, [pc, #20]	; (800eb68 <StoreNetwork::SaveDhcp(bool)+0x24>)
 800eb54:	9300      	str	r3, [sp, #0]
 800eb56:	2214      	movs	r2, #20
 800eb58:	6800      	ldr	r0, [r0, #0]
 800eb5a:	f10d 0317 	add.w	r3, sp, #23
 800eb5e:	f7ff fdcd 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eb62:	b007      	add	sp, #28
 800eb64:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb68:	20002998 	mulcs	r0, r8, r9

0800eb6c <non-virtual thunk to StoreNetwork::SaveDhcp(bool)>:
 800eb6c:	f1a0 0004 	sub.w	r0, r0, #4
 800eb70:	e7e8      	b.n	800eb44 <StoreNetwork::SaveDhcp(bool)>
 800eb72:	bf00      	nop

0800eb74 <StoreNetwork::SaveGatewayIp(unsigned int)>:
 800eb74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800eb76:	2308      	movs	r3, #8
 800eb78:	9105      	str	r1, [sp, #20]
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800eb80:	2304      	movs	r3, #4
 800eb82:	4805      	ldr	r0, [pc, #20]	; (800eb98 <StoreNetwork::SaveGatewayIp(unsigned int)+0x24>)
 800eb84:	9300      	str	r3, [sp, #0]
 800eb86:	220c      	movs	r2, #12
 800eb88:	6800      	ldr	r0, [r0, #0]
 800eb8a:	ab05      	add	r3, sp, #20
 800eb8c:	f7ff fdb6 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800eb90:	b007      	add	sp, #28
 800eb92:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb96:	bf00      	nop
 800eb98:	20002998 	mulcs	r0, r8, r9

0800eb9c <non-virtual thunk to StoreNetwork::SaveGatewayIp(unsigned int)>:
 800eb9c:	f1a0 0004 	sub.w	r0, r0, #4
 800eba0:	e7e8      	b.n	800eb74 <StoreNetwork::SaveGatewayIp(unsigned int)>
 800eba2:	bf00      	nop

0800eba4 <StoreNetwork::SaveNetMask(unsigned int)>:
 800eba4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800eba6:	2304      	movs	r3, #4
 800eba8:	9105      	str	r1, [sp, #20]
 800ebaa:	2100      	movs	r1, #0
 800ebac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ebb0:	4804      	ldr	r0, [pc, #16]	; (800ebc4 <StoreNetwork::SaveNetMask(unsigned int)+0x20>)
 800ebb2:	9300      	str	r3, [sp, #0]
 800ebb4:	2208      	movs	r2, #8
 800ebb6:	6800      	ldr	r0, [r0, #0]
 800ebb8:	ab05      	add	r3, sp, #20
 800ebba:	f7ff fd9f 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ebbe:	b007      	add	sp, #28
 800ebc0:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebc4:	20002998 	mulcs	r0, r8, r9

0800ebc8 <non-virtual thunk to StoreNetwork::SaveNetMask(unsigned int)>:
 800ebc8:	f1a0 0004 	sub.w	r0, r0, #4
 800ebcc:	e7ea      	b.n	800eba4 <StoreNetwork::SaveNetMask(unsigned int)>
 800ebce:	bf00      	nop

0800ebd0 <StoreNetwork::SaveIp(unsigned int)>:
 800ebd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ebd2:	2302      	movs	r3, #2
 800ebd4:	9105      	str	r1, [sp, #20]
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	2204      	movs	r2, #4
 800ebda:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ebde:	4804      	ldr	r0, [pc, #16]	; (800ebf0 <StoreNetwork::SaveIp(unsigned int)+0x20>)
 800ebe0:	9200      	str	r2, [sp, #0]
 800ebe2:	6800      	ldr	r0, [r0, #0]
 800ebe4:	ab05      	add	r3, sp, #20
 800ebe6:	f7ff fd89 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ebea:	b007      	add	sp, #28
 800ebec:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebf0:	20002998 	mulcs	r0, r8, r9

0800ebf4 <non-virtual thunk to StoreNetwork::SaveIp(unsigned int)>:
 800ebf4:	f1a0 0004 	sub.w	r0, r0, #4
 800ebf8:	e7ea      	b.n	800ebd0 <StoreNetwork::SaveIp(unsigned int)>
 800ebfa:	bf00      	nop

0800ebfc <StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800ebfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebfe:	460b      	mov	r3, r1
 800ec00:	2020      	movs	r0, #32
 800ec02:	2100      	movs	r1, #0
 800ec04:	2a40      	cmp	r2, #64	; 0x40
 800ec06:	bf28      	it	cs
 800ec08:	2240      	movcs	r2, #64	; 0x40
 800ec0a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800ec0e:	4804      	ldr	r0, [pc, #16]	; (800ec20 <StoreNetwork::SaveHostName(char const*, unsigned int)+0x24>)
 800ec10:	9200      	str	r2, [sp, #0]
 800ec12:	6800      	ldr	r0, [r0, #0]
 800ec14:	2215      	movs	r2, #21
 800ec16:	f7ff fd71 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ec1a:	b005      	add	sp, #20
 800ec1c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec20:	20002998 	mulcs	r0, r8, r9

0800ec24 <non-virtual thunk to StoreNetwork::SaveHostName(char const*, unsigned int)>:
 800ec24:	f1a0 0004 	sub.w	r0, r0, #4
 800ec28:	e7e8      	b.n	800ebfc <StoreNetwork::SaveHostName(char const*, unsigned int)>
 800ec2a:	bf00      	nop

0800ec2c <StoreNetwork::~StoreNetwork()>:
 800ec2c:	b510      	push	{r4, lr}
 800ec2e:	4604      	mov	r4, r0
 800ec30:	f004 fc2e 	bl	8013490 <operator delete(void*)>
 800ec34:	4620      	mov	r0, r4
 800ec36:	bd10      	pop	{r4, pc}

0800ec38 <non-virtual thunk to StoreNetwork::~StoreNetwork()>:
 800ec38:	f1a0 0004 	sub.w	r0, r0, #4
 800ec3c:	e7f6      	b.n	800ec2c <StoreNetwork::~StoreNetwork()>
	...

0800ec40 <StoreNetwork::Copy(TNetworkParams*)>:
 800ec40:	b507      	push	{r0, r1, r2, lr}
 800ec42:	460a      	mov	r2, r1
 800ec44:	2100      	movs	r1, #0
 800ec46:	4804      	ldr	r0, [pc, #16]	; (800ec58 <StoreNetwork::Copy(TNetworkParams*)+0x18>)
 800ec48:	9100      	str	r1, [sp, #0]
 800ec4a:	235e      	movs	r3, #94	; 0x5e
 800ec4c:	6800      	ldr	r0, [r0, #0]
 800ec4e:	f7ff fd95 	bl	800e77c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800ec52:	b003      	add	sp, #12
 800ec54:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec58:	20002998 	mulcs	r0, r8, r9

0800ec5c <StoreNetwork::StoreNetwork()>:
 800ec5c:	4a03      	ldr	r2, [pc, #12]	; (800ec6c <StoreNetwork::StoreNetwork()+0x10>)
 800ec5e:	6002      	str	r2, [r0, #0]
 800ec60:	322c      	adds	r2, #44	; 0x2c
 800ec62:	6042      	str	r2, [r0, #4]
 800ec64:	4a02      	ldr	r2, [pc, #8]	; (800ec70 <StoreNetwork::StoreNetwork()+0x14>)
 800ec66:	6010      	str	r0, [r2, #0]
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop
 800ec6c:	08017630 	stmdaeq	r1, {r4, r5, r9, sl, ip, sp, lr}
 800ec70:	200029a8 	andcs	r2, r0, r8, lsr #19

0800ec74 <StoreRemoteConfig::~StoreRemoteConfig()>:
 800ec74:	4770      	bx	lr
	...

0800ec78 <StoreRemoteConfig::Copy(TRemoteConfigParams*)>:
 800ec78:	2300      	movs	r3, #0
 800ec7a:	b507      	push	{r0, r1, r2, lr}
 800ec7c:	4805      	ldr	r0, [pc, #20]	; (800ec94 <StoreRemoteConfig::Copy(TRemoteConfigParams*)+0x1c>)
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	460a      	mov	r2, r1
 800ec82:	2320      	movs	r3, #32
 800ec84:	210c      	movs	r1, #12
 800ec86:	6800      	ldr	r0, [r0, #0]
 800ec88:	f7ff fd78 	bl	800e77c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800ec8c:	b003      	add	sp, #12
 800ec8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ec92:	bf00      	nop
 800ec94:	20002998 	mulcs	r0, r8, r9

0800ec98 <StoreRemoteConfig::Update(TRemoteConfigParams const*)>:
 800ec98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	2120      	movs	r1, #32
 800eca0:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800eca4:	4804      	ldr	r0, [pc, #16]	; (800ecb8 <StoreRemoteConfig::Update(TRemoteConfigParams const*)+0x20>)
 800eca6:	9100      	str	r1, [sp, #0]
 800eca8:	6800      	ldr	r0, [r0, #0]
 800ecaa:	210c      	movs	r1, #12
 800ecac:	f7ff fd26 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ecb0:	b005      	add	sp, #20
 800ecb2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecb6:	bf00      	nop
 800ecb8:	20002998 	mulcs	r0, r8, r9

0800ecbc <StoreRemoteConfig::~StoreRemoteConfig()>:
 800ecbc:	b510      	push	{r4, lr}
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	f004 fbe6 	bl	8013490 <operator delete(void*)>
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	bd10      	pop	{r4, pc}

0800ecc8 <StoreRemoteConfig::StoreRemoteConfig()>:
 800ecc8:	4a02      	ldr	r2, [pc, #8]	; (800ecd4 <StoreRemoteConfig::StoreRemoteConfig()+0xc>)
 800ecca:	6002      	str	r2, [r0, #0]
 800eccc:	4a02      	ldr	r2, [pc, #8]	; (800ecd8 <StoreRemoteConfig::StoreRemoteConfig()+0x10>)
 800ecce:	6010      	str	r0, [r2, #0]
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	08017680 	stmdaeq	r1, {r7, r9, sl, ip, sp, lr}
 800ecd8:	200029ac 	andcs	r2, r0, ip, lsr #19

0800ecdc <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800ecdc:	4770      	bx	lr

0800ecde <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800ecde:	3804      	subs	r0, #4
 800ece0:	4770      	bx	lr
	...

0800ece4 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)>:
 800ece4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ece6:	2200      	movs	r2, #0
 800ece8:	460b      	mov	r3, r1
 800ecea:	2127      	movs	r1, #39	; 0x27
 800ecec:	e9cd 2201 	strd	r2, r2, [sp, #4]
 800ecf0:	4804      	ldr	r0, [pc, #16]	; (800ed04 <StoreWS28xxDmx::Update(TWS28xxDmxParams const*)+0x20>)
 800ecf2:	9100      	str	r1, [sp, #0]
 800ecf4:	6800      	ldr	r0, [r0, #0]
 800ecf6:	2103      	movs	r1, #3
 800ecf8:	f7ff fd00 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ecfc:	b005      	add	sp, #20
 800ecfe:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed02:	bf00      	nop
 800ed04:	20002998 	mulcs	r0, r8, r9

0800ed08 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 800ed08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ed0a:	2304      	movs	r3, #4
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ed12:	2302      	movs	r3, #2
 800ed14:	4806      	ldr	r0, [pc, #24]	; (800ed30 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)+0x28>)
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	f8ad 1016 	strh.w	r1, [sp, #22]
 800ed1c:	2207      	movs	r2, #7
 800ed1e:	2103      	movs	r1, #3
 800ed20:	6800      	ldr	r0, [r0, #0]
 800ed22:	f10d 0316 	add.w	r3, sp, #22
 800ed26:	f7ff fce9 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ed2a:	b007      	add	sp, #28
 800ed2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed30:	20002998 	mulcs	r0, r8, r9

0800ed34 <non-virtual thunk to StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>:
 800ed34:	f1a0 0004 	sub.w	r0, r0, #4
 800ed38:	e7e6      	b.n	800ed08 <StoreWS28xxDmx::SaveDmxStartAddress(unsigned short)>
 800ed3a:	bf00      	nop

0800ed3c <StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800ed3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ed3e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ed42:	2200      	movs	r2, #0
 800ed44:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ed48:	2301      	movs	r3, #1
 800ed4a:	4807      	ldr	r0, [pc, #28]	; (800ed68 <StoreWS28xxDmx::SaveTestPattern(unsigned char)+0x2c>)
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	f88d 1017 	strb.w	r1, [sp, #23]
 800ed52:	2226      	movs	r2, #38	; 0x26
 800ed54:	2103      	movs	r1, #3
 800ed56:	6800      	ldr	r0, [r0, #0]
 800ed58:	f10d 0317 	add.w	r3, sp, #23
 800ed5c:	f7ff fcce 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ed60:	b007      	add	sp, #28
 800ed62:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed66:	bf00      	nop
 800ed68:	20002998 	mulcs	r0, r8, r9

0800ed6c <non-virtual thunk to StoreWS28xxDmx::SaveTestPattern(unsigned char)>:
 800ed6c:	f1a0 0004 	sub.w	r0, r0, #4
 800ed70:	e7e4      	b.n	800ed3c <StoreWS28xxDmx::SaveTestPattern(unsigned char)>
 800ed72:	bf00      	nop

0800ed74 <StoreWS28xxDmx::SaveMap(unsigned char)>:
 800ed74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ed76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ed80:	2301      	movs	r3, #1
 800ed82:	4807      	ldr	r0, [pc, #28]	; (800eda0 <StoreWS28xxDmx::SaveMap(unsigned char)+0x2c>)
 800ed84:	9300      	str	r3, [sp, #0]
 800ed86:	f88d 1017 	strb.w	r1, [sp, #23]
 800ed8a:	2213      	movs	r2, #19
 800ed8c:	2103      	movs	r1, #3
 800ed8e:	6800      	ldr	r0, [r0, #0]
 800ed90:	f10d 0317 	add.w	r3, sp, #23
 800ed94:	f7ff fcb2 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ed98:	b007      	add	sp, #28
 800ed9a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed9e:	bf00      	nop
 800eda0:	20002998 	mulcs	r0, r8, r9

0800eda4 <non-virtual thunk to StoreWS28xxDmx::SaveMap(unsigned char)>:
 800eda4:	f1a0 0004 	sub.w	r0, r0, #4
 800eda8:	e7e4      	b.n	800ed74 <StoreWS28xxDmx::SaveMap(unsigned char)>
 800edaa:	bf00      	nop

0800edac <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 800edac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800edae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edb2:	2200      	movs	r2, #0
 800edb4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800edb8:	2302      	movs	r3, #2
 800edba:	4807      	ldr	r0, [pc, #28]	; (800edd8 <StoreWS28xxDmx::SaveGroupingCount(unsigned short)+0x2c>)
 800edbc:	9300      	str	r3, [sp, #0]
 800edbe:	f8ad 1016 	strh.w	r1, [sp, #22]
 800edc2:	2211      	movs	r2, #17
 800edc4:	2103      	movs	r1, #3
 800edc6:	6800      	ldr	r0, [r0, #0]
 800edc8:	f10d 0316 	add.w	r3, sp, #22
 800edcc:	f7ff fc96 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800edd0:	b007      	add	sp, #28
 800edd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800edd6:	bf00      	nop
 800edd8:	20002998 	mulcs	r0, r8, r9

0800eddc <non-virtual thunk to StoreWS28xxDmx::SaveGroupingCount(unsigned short)>:
 800eddc:	f1a0 0004 	sub.w	r0, r0, #4
 800ede0:	e7e4      	b.n	800edac <StoreWS28xxDmx::SaveGroupingCount(unsigned short)>
 800ede2:	bf00      	nop

0800ede4 <StoreWS28xxDmx::SaveCount(unsigned short)>:
 800ede4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ede6:	2302      	movs	r3, #2
 800ede8:	2200      	movs	r2, #0
 800edea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800edee:	4807      	ldr	r0, [pc, #28]	; (800ee0c <StoreWS28xxDmx::SaveCount(unsigned short)+0x28>)
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	f8ad 1016 	strh.w	r1, [sp, #22]
 800edf6:	2205      	movs	r2, #5
 800edf8:	2103      	movs	r1, #3
 800edfa:	6800      	ldr	r0, [r0, #0]
 800edfc:	f10d 0316 	add.w	r3, sp, #22
 800ee00:	f7ff fc7c 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ee04:	b007      	add	sp, #28
 800ee06:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee0a:	bf00      	nop
 800ee0c:	20002998 	mulcs	r0, r8, r9

0800ee10 <non-virtual thunk to StoreWS28xxDmx::SaveCount(unsigned short)>:
 800ee10:	f1a0 0004 	sub.w	r0, r0, #4
 800ee14:	e7e6      	b.n	800ede4 <StoreWS28xxDmx::SaveCount(unsigned short)>
 800ee16:	bf00      	nop

0800ee18 <StoreWS28xxDmx::SaveType(unsigned char)>:
 800ee18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ee22:	4807      	ldr	r0, [pc, #28]	; (800ee40 <StoreWS28xxDmx::SaveType(unsigned char)+0x28>)
 800ee24:	9300      	str	r3, [sp, #0]
 800ee26:	f88d 1017 	strb.w	r1, [sp, #23]
 800ee2a:	2204      	movs	r2, #4
 800ee2c:	2103      	movs	r1, #3
 800ee2e:	6800      	ldr	r0, [r0, #0]
 800ee30:	f10d 0317 	add.w	r3, sp, #23
 800ee34:	f7ff fc62 	bl	800e6fc <SpiFlashStore::Update(spiflashstore::Store, unsigned int, void const*, unsigned int, unsigned int, unsigned int)>
 800ee38:	b007      	add	sp, #28
 800ee3a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee3e:	bf00      	nop
 800ee40:	20002998 	mulcs	r0, r8, r9

0800ee44 <non-virtual thunk to StoreWS28xxDmx::SaveType(unsigned char)>:
 800ee44:	f1a0 0004 	sub.w	r0, r0, #4
 800ee48:	e7e6      	b.n	800ee18 <StoreWS28xxDmx::SaveType(unsigned char)>
 800ee4a:	bf00      	nop

0800ee4c <StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800ee4c:	b510      	push	{r4, lr}
 800ee4e:	4604      	mov	r4, r0
 800ee50:	f004 fb1e 	bl	8013490 <operator delete(void*)>
 800ee54:	4620      	mov	r0, r4
 800ee56:	bd10      	pop	{r4, pc}

0800ee58 <non-virtual thunk to StoreWS28xxDmx::~StoreWS28xxDmx()>:
 800ee58:	f1a0 0004 	sub.w	r0, r0, #4
 800ee5c:	e7f6      	b.n	800ee4c <StoreWS28xxDmx::~StoreWS28xxDmx()>
	...

0800ee60 <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)>:
 800ee60:	2300      	movs	r3, #0
 800ee62:	b507      	push	{r0, r1, r2, lr}
 800ee64:	4805      	ldr	r0, [pc, #20]	; (800ee7c <StoreWS28xxDmx::Copy(TWS28xxDmxParams*)+0x1c>)
 800ee66:	9300      	str	r3, [sp, #0]
 800ee68:	460a      	mov	r2, r1
 800ee6a:	2327      	movs	r3, #39	; 0x27
 800ee6c:	2103      	movs	r1, #3
 800ee6e:	6800      	ldr	r0, [r0, #0]
 800ee70:	f7ff fc84 	bl	800e77c <SpiFlashStore::Copy(spiflashstore::Store, void*, unsigned int, unsigned int)>
 800ee74:	b003      	add	sp, #12
 800ee76:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee7a:	bf00      	nop
 800ee7c:	20002998 	mulcs	r0, r8, r9

0800ee80 <StoreWS28xxDmx::StoreWS28xxDmx()>:
 800ee80:	4a03      	ldr	r2, [pc, #12]	; (800ee90 <StoreWS28xxDmx::StoreWS28xxDmx()+0x10>)
 800ee82:	6002      	str	r2, [r0, #0]
 800ee84:	3230      	adds	r2, #48	; 0x30
 800ee86:	6042      	str	r2, [r0, #4]
 800ee88:	4a02      	ldr	r2, [pc, #8]	; (800ee94 <StoreWS28xxDmx::StoreWS28xxDmx()+0x14>)
 800ee8a:	6010      	str	r0, [r2, #0]
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	08017698 	stmdaeq	r1, {r3, r4, r7, r9, sl, ip, sp, lr}
 800ee94:	200029b0 			; <UNDEFINED> instruction: 0x200029b0

0800ee98 <FlashRom::FlashRom()>:
 800ee98:	4b08      	ldr	r3, [pc, #32]	; (800eebc <FlashRom::FlashRom()+0x24>)
 800ee9a:	b510      	push	{r4, lr}
 800ee9c:	6018      	str	r0, [r3, #0]
 800ee9e:	2301      	movs	r3, #1
 800eea0:	4604      	mov	r4, r0
 800eea2:	7003      	strb	r3, [r0, #0]
 800eea4:	4b06      	ldr	r3, [pc, #24]	; (800eec0 <FlashRom::FlashRom()+0x28>)
 800eea6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eeaa:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800eeae:	4905      	ldr	r1, [pc, #20]	; (800eec4 <FlashRom::FlashRom()+0x2c>)
 800eeb0:	029b      	lsls	r3, r3, #10
 800eeb2:	4805      	ldr	r0, [pc, #20]	; (800eec8 <FlashRom::FlashRom()+0x30>)
 800eeb4:	f004 fef6 	bl	8013ca4 <printf>
 800eeb8:	4620      	mov	r0, r4
 800eeba:	bd10      	pop	{r4, pc}
 800eebc:	200029b4 			; <UNDEFINED> instruction: 0x200029b4
 800eec0:	1ffff700 	svcne	0x00fff700
 800eec4:	080176e8 	stmdaeq	r1, {r3, r5, r6, r7, r9, sl, ip, sp, lr}
 800eec8:	080176ed 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r9, sl, ip, sp, lr}

0800eecc <FlashRom::GetSize()>:
 800eecc:	4b02      	ldr	r3, [pc, #8]	; (800eed8 <FlashRom::GetSize()+0xc>)
 800eece:	f8b3 00e0 	ldrh.w	r0, [r3, #224]	; 0xe0
 800eed2:	0280      	lsls	r0, r0, #10
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	1ffff700 	svcne	0x00fff700

0800eedc <FlashRom::GetSectorSize()>:
 800eedc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800eee0:	4770      	bx	lr

0800eee2 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)>:
 800eee2:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800eee6:	441a      	add	r2, r3
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d004      	beq.n	800eef6 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x14>
 800eeec:	f851 0b04 	ldr.w	r0, [r1], #4
 800eef0:	f843 0b04 	str.w	r0, [r3], #4
 800eef4:	e7f8      	b.n	800eee8 <FlashRom::Read(unsigned int, unsigned int, unsigned char*, flashrom::result&)+0x6>
 800eef6:	2200      	movs	r2, #0
 800eef8:	9b00      	ldr	r3, [sp, #0]
 800eefa:	2001      	movs	r0, #1
 800eefc:	601a      	str	r2, [r3, #0]
 800eefe:	4770      	bx	lr

0800ef00 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)>:
 800ef00:	2000      	movs	r0, #0
 800ef02:	b538      	push	{r3, r4, r5, lr}
 800ef04:	4c47      	ldr	r4, [pc, #284]	; (800f024 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x124>)
 800ef06:	6018      	str	r0, [r3, #0]
 800ef08:	6823      	ldr	r3, [r4, #0]
 800ef0a:	2b04      	cmp	r3, #4
 800ef0c:	f200 8082 	bhi.w	800f014 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800ef10:	e8df f003 	tbb	[pc, r3]
 800ef14:	78452003 	stmdavc	r5, {r0, r1, sp}^
 800ef18:	4b430080 	blmi	90cf120 <__exidx_end+0x10b6fb8>
 800ef1c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800ef20:	6019      	str	r1, [r3, #0]
 800ef22:	4b42      	ldr	r3, [pc, #264]	; (800f02c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800ef24:	601a      	str	r2, [r3, #0]
 800ef26:	4b42      	ldr	r3, [pc, #264]	; (800f030 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x130>)
 800ef28:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800ef2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef30:	4b40      	ldr	r3, [pc, #256]	; (800f034 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800ef32:	d807      	bhi.n	800ef44 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x44>
 800ef34:	2201      	movs	r2, #1
 800ef36:	701a      	strb	r2, [r3, #0]
 800ef38:	f005 f8d4 	bl	80140e4 <fmc_bank0_unlock>
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	6023      	str	r3, [r4, #0]
 800ef40:	2000      	movs	r0, #0
 800ef42:	e026      	b.n	800ef92 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800ef44:	4a3c      	ldr	r2, [pc, #240]	; (800f038 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x138>)
 800ef46:	4291      	cmp	r1, r2
 800ef48:	d3f4      	bcc.n	800ef34 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x34>
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	701a      	strb	r2, [r3, #0]
 800ef4e:	f005 f8d7 	bl	8014100 <fmc_bank1_unlock>
 800ef52:	e7f3      	b.n	800ef3c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800ef54:	4d37      	ldr	r5, [pc, #220]	; (800f034 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800ef56:	782b      	ldrb	r3, [r5, #0]
 800ef58:	b15b      	cbz	r3, 800ef72 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x72>
 800ef5a:	f005 f8ef 	bl	801413c <fmc_bank0_state_get>
 800ef5e:	2801      	cmp	r0, #1
 800ef60:	d0ee      	beq.n	800ef40 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x40>
 800ef62:	7829      	ldrb	r1, [r5, #0]
 800ef64:	4b35      	ldr	r3, [pc, #212]	; (800f03c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800ef66:	b939      	cbnz	r1, 800ef78 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x78>
 800ef68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef6a:	f022 0202 	bic.w	r2, r2, #2
 800ef6e:	651a      	str	r2, [r3, #80]	; 0x50
 800ef70:	e006      	b.n	800ef80 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x80>
 800ef72:	f005 f8f7 	bl	8014164 <fmc_bank1_state_get>
 800ef76:	e7f2      	b.n	800ef5e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x5e>
 800ef78:	691a      	ldr	r2, [r3, #16]
 800ef7a:	f022 0202 	bic.w	r2, r2, #2
 800ef7e:	611a      	str	r2, [r3, #16]
 800ef80:	4b2a      	ldr	r3, [pc, #168]	; (800f02c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	b94b      	cbnz	r3, 800ef9a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x9a>
 800ef86:	b129      	cbz	r1, 800ef94 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x94>
 800ef88:	f005 f8c8 	bl	801411c <fmc_bank0_lock>
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	2001      	movs	r0, #1
 800ef90:	6023      	str	r3, [r4, #0]
 800ef92:	bd38      	pop	{r3, r4, r5, pc}
 800ef94:	f005 f8ca 	bl	801412c <fmc_bank1_lock>
 800ef98:	e7f8      	b.n	800ef8c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x8c>
 800ef9a:	2302      	movs	r3, #2
 800ef9c:	e7cf      	b.n	800ef3e <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3e>
 800ef9e:	4923      	ldr	r1, [pc, #140]	; (800f02c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x12c>)
 800efa0:	680b      	ldr	r3, [r1, #0]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d0ca      	beq.n	800ef3c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800efa6:	4b23      	ldr	r3, [pc, #140]	; (800f034 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800efa8:	4a1f      	ldr	r2, [pc, #124]	; (800f028 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x128>)
 800efaa:	7818      	ldrb	r0, [r3, #0]
 800efac:	4b23      	ldr	r3, [pc, #140]	; (800f03c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800efae:	b190      	cbz	r0, 800efd6 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd6>
 800efb0:	6918      	ldr	r0, [r3, #16]
 800efb2:	f040 0002 	orr.w	r0, r0, #2
 800efb6:	6118      	str	r0, [r3, #16]
 800efb8:	6810      	ldr	r0, [r2, #0]
 800efba:	6158      	str	r0, [r3, #20]
 800efbc:	6918      	ldr	r0, [r3, #16]
 800efbe:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800efc2:	6118      	str	r0, [r3, #16]
 800efc4:	680b      	ldr	r3, [r1, #0]
 800efc6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800efca:	600b      	str	r3, [r1, #0]
 800efcc:	6813      	ldr	r3, [r2, #0]
 800efce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efd2:	6013      	str	r3, [r2, #0]
 800efd4:	e7b2      	b.n	800ef3c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x3c>
 800efd6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800efd8:	f040 0002 	orr.w	r0, r0, #2
 800efdc:	6518      	str	r0, [r3, #80]	; 0x50
 800efde:	6810      	ldr	r0, [r2, #0]
 800efe0:	6558      	str	r0, [r3, #84]	; 0x54
 800efe2:	69dd      	ldr	r5, [r3, #28]
 800efe4:	07ad      	lsls	r5, r5, #30
 800efe6:	bf48      	it	mi
 800efe8:	6158      	strmi	r0, [r3, #20]
 800efea:	4814      	ldr	r0, [pc, #80]	; (800f03c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800efec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800efee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eff2:	6503      	str	r3, [r0, #80]	; 0x50
 800eff4:	680b      	ldr	r3, [r1, #0]
 800eff6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800effa:	600b      	str	r3, [r1, #0]
 800effc:	6813      	ldr	r3, [r2, #0]
 800effe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f002:	e7e6      	b.n	800efd2 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0xd2>
 800f004:	4b0b      	ldr	r3, [pc, #44]	; (800f034 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x134>)
 800f006:	781a      	ldrb	r2, [r3, #0]
 800f008:	4b0c      	ldr	r3, [pc, #48]	; (800f03c <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x13c>)
 800f00a:	b132      	cbz	r2, 800f01a <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x11a>
 800f00c:	691a      	ldr	r2, [r3, #16]
 800f00e:	f022 0201 	bic.w	r2, r2, #1
 800f012:	611a      	str	r2, [r3, #16]
 800f014:	2000      	movs	r0, #0
 800f016:	6020      	str	r0, [r4, #0]
 800f018:	e7bb      	b.n	800ef92 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x92>
 800f01a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f01c:	f022 0201 	bic.w	r2, r2, #1
 800f020:	651a      	str	r2, [r3, #80]	; 0x50
 800f022:	e7f7      	b.n	800f014 <FlashRom::Erase(unsigned int, unsigned int, flashrom::result&)+0x114>
 800f024:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 800f028:	200029c0 	andcs	r2, r0, r0, asr #19
 800f02c:	200029cc 	andcs	r2, r0, ip, asr #19
 800f030:	1ffff700 	svcne	0x00fff700
 800f034:	200029c8 	andcs	r2, r0, r8, asr #19
 800f038:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800f03c:	40022000 	andmi	r2, r2, r0

0800f040 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)>:
 800f040:	b570      	push	{r4, r5, r6, lr}
 800f042:	2400      	movs	r4, #0
 800f044:	9804      	ldr	r0, [sp, #16]
 800f046:	6004      	str	r4, [r0, #0]
 800f048:	4c48      	ldr	r4, [pc, #288]	; (800f16c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x12c>)
 800f04a:	6820      	ldr	r0, [r4, #0]
 800f04c:	2804      	cmp	r0, #4
 800f04e:	d848      	bhi.n	800f0e2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xa2>
 800f050:	e8df f000 	tbb	[pc, r0]
 800f054:	22847c03 	addcs	r7, r4, #768	; 0x300
 800f058:	48450047 	stmdami	r5, {r0, r1, r2, r6}^
 800f05c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 800f060:	6001      	str	r1, [r0, #0]
 800f062:	4844      	ldr	r0, [pc, #272]	; (800f174 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800f064:	6003      	str	r3, [r0, #0]
 800f066:	4b44      	ldr	r3, [pc, #272]	; (800f178 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800f068:	601a      	str	r2, [r3, #0]
 800f06a:	4b44      	ldr	r3, [pc, #272]	; (800f17c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x13c>)
 800f06c:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 800f070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f074:	4b42      	ldr	r3, [pc, #264]	; (800f180 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f076:	d807      	bhi.n	800f088 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x48>
 800f078:	2201      	movs	r2, #1
 800f07a:	701a      	strb	r2, [r3, #0]
 800f07c:	f005 f832 	bl	80140e4 <fmc_bank0_unlock>
 800f080:	2303      	movs	r3, #3
 800f082:	6023      	str	r3, [r4, #0]
 800f084:	2000      	movs	r0, #0
 800f086:	e026      	b.n	800f0d6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800f088:	4a3e      	ldr	r2, [pc, #248]	; (800f184 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x144>)
 800f08a:	4291      	cmp	r1, r2
 800f08c:	d3f4      	bcc.n	800f078 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x38>
 800f08e:	2200      	movs	r2, #0
 800f090:	701a      	strb	r2, [r3, #0]
 800f092:	f005 f835 	bl	8014100 <fmc_bank1_unlock>
 800f096:	e7f3      	b.n	800f080 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f098:	4d39      	ldr	r5, [pc, #228]	; (800f180 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f09a:	782b      	ldrb	r3, [r5, #0]
 800f09c:	b15b      	cbz	r3, 800f0b6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x76>
 800f09e:	f005 f84d 	bl	801413c <fmc_bank0_state_get>
 800f0a2:	2801      	cmp	r0, #1
 800f0a4:	d0ee      	beq.n	800f084 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x44>
 800f0a6:	7829      	ldrb	r1, [r5, #0]
 800f0a8:	4b37      	ldr	r3, [pc, #220]	; (800f188 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f0aa:	b939      	cbnz	r1, 800f0bc <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x7c>
 800f0ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0ae:	f022 0201 	bic.w	r2, r2, #1
 800f0b2:	651a      	str	r2, [r3, #80]	; 0x50
 800f0b4:	e006      	b.n	800f0c4 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x84>
 800f0b6:	f005 f855 	bl	8014164 <fmc_bank1_state_get>
 800f0ba:	e7f2      	b.n	800f0a2 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x62>
 800f0bc:	691a      	ldr	r2, [r3, #16]
 800f0be:	f022 0201 	bic.w	r2, r2, #1
 800f0c2:	611a      	str	r2, [r3, #16]
 800f0c4:	4b2c      	ldr	r3, [pc, #176]	; (800f178 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	b94b      	cbnz	r3, 800f0de <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x9e>
 800f0ca:	b129      	cbz	r1, 800f0d8 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x98>
 800f0cc:	f005 f826 	bl	801411c <fmc_bank0_lock>
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	2001      	movs	r0, #1
 800f0d4:	6023      	str	r3, [r4, #0]
 800f0d6:	bd70      	pop	{r4, r5, r6, pc}
 800f0d8:	f005 f828 	bl	801412c <fmc_bank1_lock>
 800f0dc:	e7f8      	b.n	800f0d0 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x90>
 800f0de:	2304      	movs	r3, #4
 800f0e0:	e7cf      	b.n	800f082 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x42>
 800f0e2:	4a25      	ldr	r2, [pc, #148]	; (800f178 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x138>)
 800f0e4:	6813      	ldr	r3, [r2, #0]
 800f0e6:	2b03      	cmp	r3, #3
 800f0e8:	d91a      	bls.n	800f120 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xe0>
 800f0ea:	4b25      	ldr	r3, [pc, #148]	; (800f180 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f0ec:	7819      	ldrb	r1, [r3, #0]
 800f0ee:	4b26      	ldr	r3, [pc, #152]	; (800f188 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f0f0:	b189      	cbz	r1, 800f116 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xd6>
 800f0f2:	6919      	ldr	r1, [r3, #16]
 800f0f4:	f041 0101 	orr.w	r1, r1, #1
 800f0f8:	6119      	str	r1, [r3, #16]
 800f0fa:	4d1e      	ldr	r5, [pc, #120]	; (800f174 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800f0fc:	481c      	ldr	r0, [pc, #112]	; (800f170 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800f0fe:	6829      	ldr	r1, [r5, #0]
 800f100:	6803      	ldr	r3, [r0, #0]
 800f102:	f851 6b04 	ldr.w	r6, [r1], #4
 800f106:	f843 6b04 	str.w	r6, [r3], #4
 800f10a:	6003      	str	r3, [r0, #0]
 800f10c:	6813      	ldr	r3, [r2, #0]
 800f10e:	6029      	str	r1, [r5, #0]
 800f110:	3b04      	subs	r3, #4
 800f112:	6013      	str	r3, [r2, #0]
 800f114:	e7b4      	b.n	800f080 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f116:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800f118:	f041 0101 	orr.w	r1, r1, #1
 800f11c:	6519      	str	r1, [r3, #80]	; 0x50
 800f11e:	e7ec      	b.n	800f0fa <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xba>
 800f120:	2b00      	cmp	r3, #0
 800f122:	d0ad      	beq.n	800f080 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f124:	4b16      	ldr	r3, [pc, #88]	; (800f180 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f126:	781a      	ldrb	r2, [r3, #0]
 800f128:	4b17      	ldr	r3, [pc, #92]	; (800f188 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f12a:	b152      	cbz	r2, 800f142 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x102>
 800f12c:	691a      	ldr	r2, [r3, #16]
 800f12e:	f042 0201 	orr.w	r2, r2, #1
 800f132:	611a      	str	r2, [r3, #16]
 800f134:	4a0f      	ldr	r2, [pc, #60]	; (800f174 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x134>)
 800f136:	4b0e      	ldr	r3, [pc, #56]	; (800f170 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x130>)
 800f138:	6812      	ldr	r2, [r2, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	6812      	ldr	r2, [r2, #0]
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	e79e      	b.n	800f080 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x40>
 800f142:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f144:	f042 0201 	orr.w	r2, r2, #1
 800f148:	651a      	str	r2, [r3, #80]	; 0x50
 800f14a:	e7f3      	b.n	800f134 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0xf4>
 800f14c:	4b0c      	ldr	r3, [pc, #48]	; (800f180 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x140>)
 800f14e:	781a      	ldrb	r2, [r3, #0]
 800f150:	4b0d      	ldr	r3, [pc, #52]	; (800f188 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x148>)
 800f152:	b132      	cbz	r2, 800f162 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x122>
 800f154:	691a      	ldr	r2, [r3, #16]
 800f156:	f022 0202 	bic.w	r2, r2, #2
 800f15a:	611a      	str	r2, [r3, #16]
 800f15c:	2000      	movs	r0, #0
 800f15e:	6020      	str	r0, [r4, #0]
 800f160:	e7b9      	b.n	800f0d6 <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x96>
 800f162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f164:	f022 0202 	bic.w	r2, r2, #2
 800f168:	651a      	str	r2, [r3, #80]	; 0x50
 800f16a:	e7f7      	b.n	800f15c <FlashRom::Write(unsigned int, unsigned int, unsigned char const*, flashrom::result&)+0x11c>
 800f16c:	200029bc 			; <UNDEFINED> instruction: 0x200029bc
 800f170:	200029b8 			; <UNDEFINED> instruction: 0x200029b8
 800f174:	200029c4 	andcs	r2, r0, r4, asr #19
 800f178:	200029cc 	andcs	r2, r0, ip, asr #19
 800f17c:	1ffff700 	svcne	0x00fff700
 800f180:	200029c8 	andcs	r2, r0, r8, asr #19
 800f184:	0807ffff 	stmdaeq	r7, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}
 800f188:	40022000 	andmi	r2, r2, r0

0800f18c <net_init>:
 800f18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f190:	460c      	mov	r4, r1
 800f192:	4616      	mov	r6, r2
 800f194:	9f06      	ldr	r7, [sp, #24]
 800f196:	4a22      	ldr	r2, [pc, #136]	; (800f220 <net_init+0x94>)
 800f198:	461d      	mov	r5, r3
 800f19a:	1e43      	subs	r3, r0, #1
 800f19c:	3005      	adds	r0, #5
 800f19e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f1a2:	4283      	cmp	r3, r0
 800f1a4:	f802 1b01 	strb.w	r1, [r2], #1
 800f1a8:	d1f9      	bne.n	800f19e <net_init+0x12>
 800f1aa:	4623      	mov	r3, r4
 800f1ac:	4a1d      	ldr	r2, [pc, #116]	; (800f224 <net_init+0x98>)
 800f1ae:	f104 010c 	add.w	r1, r4, #12
 800f1b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f1b6:	428b      	cmp	r3, r1
 800f1b8:	f802 0b01 	strb.w	r0, [r2], #1
 800f1bc:	d1f9      	bne.n	800f1b2 <net_init+0x26>
 800f1be:	f04f 0800 	mov.w	r8, #0
 800f1c2:	4918      	ldr	r1, [pc, #96]	; (800f224 <net_init+0x98>)
 800f1c4:	4816      	ldr	r0, [pc, #88]	; (800f220 <net_init+0x94>)
 800f1c6:	f002 fcbe 	bl	8011b46 <ip_init>
 800f1ca:	4815      	ldr	r0, [pc, #84]	; (800f220 <net_init+0x94>)
 800f1cc:	f000 f8b6 	bl	800f33c <rfc3927_init>
 800f1d0:	f887 8000 	strb.w	r8, [r7]
 800f1d4:	782b      	ldrb	r3, [r5, #0]
 800f1d6:	b163      	cbz	r3, 800f1f2 <net_init+0x66>
 800f1d8:	4632      	mov	r2, r6
 800f1da:	4912      	ldr	r1, [pc, #72]	; (800f224 <net_init+0x98>)
 800f1dc:	4810      	ldr	r0, [pc, #64]	; (800f220 <net_init+0x94>)
 800f1de:	f002 f9c3 	bl	8011568 <dhcp_client>
 800f1e2:	4540      	cmp	r0, r8
 800f1e4:	da05      	bge.n	800f1f2 <net_init+0x66>
 800f1e6:	480f      	ldr	r0, [pc, #60]	; (800f224 <net_init+0x98>)
 800f1e8:	f885 8000 	strb.w	r8, [r5]
 800f1ec:	f000 f8b2 	bl	800f354 <rfc3927>
 800f1f0:	7038      	strb	r0, [r7, #0]
 800f1f2:	490c      	ldr	r1, [pc, #48]	; (800f224 <net_init+0x98>)
 800f1f4:	480a      	ldr	r0, [pc, #40]	; (800f220 <net_init+0x94>)
 800f1f6:	f001 ffc7 	bl	8011188 <arp_init>
 800f1fa:	480a      	ldr	r0, [pc, #40]	; (800f224 <net_init+0x98>)
 800f1fc:	f002 fc9a 	bl	8011b34 <ip_set_ip>
 800f200:	f000 fa10 	bl	800f624 <tcp_init>
 800f204:	4a07      	ldr	r2, [pc, #28]	; (800f224 <net_init+0x98>)
 800f206:	1e63      	subs	r3, r4, #1
 800f208:	340b      	adds	r4, #11
 800f20a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f20e:	f803 1f01 	strb.w	r1, [r3, #1]!
 800f212:	429c      	cmp	r4, r3
 800f214:	d1f9      	bne.n	800f20a <net_init+0x7e>
 800f216:	782a      	ldrb	r2, [r5, #0]
 800f218:	4b03      	ldr	r3, [pc, #12]	; (800f228 <net_init+0x9c>)
 800f21a:	701a      	strb	r2, [r3, #0]
 800f21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f220:	200029dc 	ldrdcs	r2, [r0], -ip
 800f224:	200029d0 	ldrdcs	r2, [r0], -r0
 800f228:	200029e2 	andcs	r2, r0, r2, ror #19

0800f22c <net_shutdown>:
 800f22c:	b508      	push	{r3, lr}
 800f22e:	f002 fc95 	bl	8011b5c <ip_shutdown>
 800f232:	4b04      	ldr	r3, [pc, #16]	; (800f244 <net_shutdown+0x18>)
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	b11b      	cbz	r3, 800f240 <net_shutdown+0x14>
 800f238:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f23c:	f002 ba9c 	b.w	8011778 <dhcp_client_release>
 800f240:	bd08      	pop	{r3, pc}
 800f242:	bf00      	nop
 800f244:	200029e2 	andcs	r2, r0, r2, ror #19

0800f248 <net_set_ip>:
 800f248:	b510      	push	{r4, lr}
 800f24a:	4c05      	ldr	r4, [pc, #20]	; (800f260 <net_set_ip+0x18>)
 800f24c:	6020      	str	r0, [r4, #0]
 800f24e:	4621      	mov	r1, r4
 800f250:	4804      	ldr	r0, [pc, #16]	; (800f264 <net_set_ip+0x1c>)
 800f252:	f001 ff99 	bl	8011188 <arp_init>
 800f256:	4620      	mov	r0, r4
 800f258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f25c:	f002 bc6a 	b.w	8011b34 <ip_set_ip>
 800f260:	200029d0 	ldrdcs	r2, [r0], -r0
 800f264:	200029dc 	ldrdcs	r2, [r0], -ip

0800f268 <net_set_gw>:
 800f268:	4b02      	ldr	r3, [pc, #8]	; (800f274 <net_set_gw+0xc>)
 800f26a:	6098      	str	r0, [r3, #8]
 800f26c:	4618      	mov	r0, r3
 800f26e:	f002 bc61 	b.w	8011b34 <ip_set_ip>
 800f272:	bf00      	nop
 800f274:	200029d0 	ldrdcs	r2, [r0], -r0

0800f278 <net_set_dhcp>:
 800f278:	b570      	push	{r4, r5, r6, lr}
 800f27a:	2400      	movs	r4, #0
 800f27c:	4605      	mov	r5, r0
 800f27e:	7014      	strb	r4, [r2, #0]
 800f280:	4616      	mov	r6, r2
 800f282:	4810      	ldr	r0, [pc, #64]	; (800f2c4 <net_set_dhcp+0x4c>)
 800f284:	460a      	mov	r2, r1
 800f286:	4910      	ldr	r1, [pc, #64]	; (800f2c8 <net_set_dhcp+0x50>)
 800f288:	f002 f96e 	bl	8011568 <dhcp_client>
 800f28c:	42a0      	cmp	r0, r4
 800f28e:	da17      	bge.n	800f2c0 <net_set_dhcp+0x48>
 800f290:	480d      	ldr	r0, [pc, #52]	; (800f2c8 <net_set_dhcp+0x50>)
 800f292:	f000 f85f 	bl	800f354 <rfc3927>
 800f296:	7030      	strb	r0, [r6, #0]
 800f298:	490b      	ldr	r1, [pc, #44]	; (800f2c8 <net_set_dhcp+0x50>)
 800f29a:	480a      	ldr	r0, [pc, #40]	; (800f2c4 <net_set_dhcp+0x4c>)
 800f29c:	f001 ff74 	bl	8011188 <arp_init>
 800f2a0:	4809      	ldr	r0, [pc, #36]	; (800f2c8 <net_set_dhcp+0x50>)
 800f2a2:	f002 fc47 	bl	8011b34 <ip_set_ip>
 800f2a6:	4a08      	ldr	r2, [pc, #32]	; (800f2c8 <net_set_dhcp+0x50>)
 800f2a8:	1e6b      	subs	r3, r5, #1
 800f2aa:	350b      	adds	r5, #11
 800f2ac:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f2b0:	f803 1f01 	strb.w	r1, [r3, #1]!
 800f2b4:	42ab      	cmp	r3, r5
 800f2b6:	d1f9      	bne.n	800f2ac <net_set_dhcp+0x34>
 800f2b8:	4b04      	ldr	r3, [pc, #16]	; (800f2cc <net_set_dhcp+0x54>)
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	701c      	strb	r4, [r3, #0]
 800f2be:	bd70      	pop	{r4, r5, r6, pc}
 800f2c0:	2401      	movs	r4, #1
 800f2c2:	e7e9      	b.n	800f298 <net_set_dhcp+0x20>
 800f2c4:	200029dc 	ldrdcs	r2, [r0], -ip
 800f2c8:	200029d0 	ldrdcs	r2, [r0], -r0
 800f2cc:	200029e2 	andcs	r2, r0, r2, ror #19

0800f2d0 <net_dhcp_release>:
 800f2d0:	b508      	push	{r3, lr}
 800f2d2:	f002 fa51 	bl	8011778 <dhcp_client_release>
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	4b01      	ldr	r3, [pc, #4]	; (800f2e0 <net_dhcp_release+0x10>)
 800f2da:	701a      	strb	r2, [r3, #0]
 800f2dc:	bd08      	pop	{r3, pc}
 800f2de:	bf00      	nop
 800f2e0:	200029e2 	andcs	r2, r0, r2, ror #19

0800f2e4 <net_handle>:
 800f2e4:	b510      	push	{r4, lr}
 800f2e6:	4c0c      	ldr	r4, [pc, #48]	; (800f318 <net_handle+0x34>)
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f005 fb81 	bl	80149f0 <emac_eth_recv>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	dd07      	ble.n	800f302 <net_handle+0x1e>
 800f2f2:	6820      	ldr	r0, [r4, #0]
 800f2f4:	8983      	ldrh	r3, [r0, #12]
 800f2f6:	2b08      	cmp	r3, #8
 800f2f8:	d107      	bne.n	800f30a <net_handle+0x26>
 800f2fa:	f002 fc36 	bl	8011b6a <ip_handle>
 800f2fe:	f005 fb8b 	bl	8014a18 <emac_free_pkt>
 800f302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f306:	f000 b809 	b.w	800f31c <net_timers_run>
 800f30a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f30e:	d1f6      	bne.n	800f2fe <net_handle+0x1a>
 800f310:	f001 ffc0 	bl	8011294 <arp_handle>
 800f314:	e7f3      	b.n	800f2fe <net_handle+0x1a>
 800f316:	bf00      	nop
 800f318:	200029e4 	andcs	r2, r0, r4, ror #19

0800f31c <net_timers_run>:
 800f31c:	4b05      	ldr	r3, [pc, #20]	; (800f334 <net_timers_run+0x18>)
 800f31e:	4a06      	ldr	r2, [pc, #24]	; (800f338 <net_timers_run+0x1c>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	6811      	ldr	r1, [r2, #0]
 800f324:	4299      	cmp	r1, r3
 800f326:	d803      	bhi.n	800f330 <net_timers_run+0x14>
 800f328:	3364      	adds	r3, #100	; 0x64
 800f32a:	6013      	str	r3, [r2, #0]
 800f32c:	f002 bb64 	b.w	80119f8 <igmp_timer>
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	2000a97c 	andcs	sl, r0, ip, ror r9
 800f338:	200029e8 	andcs	r2, r0, r8, ror #19

0800f33c <rfc3927_init>:
 800f33c:	4b04      	ldr	r3, [pc, #16]	; (800f350 <rfc3927_init+0x14>)
 800f33e:	1d82      	adds	r2, r0, #6
 800f340:	4290      	cmp	r0, r2
 800f342:	d100      	bne.n	800f346 <rfc3927_init+0xa>
 800f344:	4770      	bx	lr
 800f346:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f34a:	f803 1b01 	strb.w	r1, [r3], #1
 800f34e:	e7f7      	b.n	800f340 <rfc3927_init+0x4>
 800f350:	200029ec 	andcs	r2, r0, ip, ror #19

0800f354 <rfc3927>:
 800f354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f358:	4605      	mov	r5, r0
 800f35a:	26ff      	movs	r6, #255	; 0xff
 800f35c:	4b18      	ldr	r3, [pc, #96]	; (800f3c0 <rfc3927+0x6c>)
 800f35e:	4f19      	ldr	r7, [pc, #100]	; (800f3c4 <rfc3927+0x70>)
 800f360:	791a      	ldrb	r2, [r3, #4]
 800f362:	78dc      	ldrb	r4, [r3, #3]
 800f364:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800f3c8 <rfc3927+0x74>
 800f368:	eb04 2402 	add.w	r4, r4, r2, lsl #8
 800f36c:	f8d7 9000 	ldr.w	r9, [r7]
 800f370:	f8df b058 	ldr.w	fp, [pc, #88]	; 800f3cc <rfc3927+0x78>
 800f374:	f8df a058 	ldr.w	sl, [pc, #88]	; 800f3d0 <rfc3927+0x7c>
 800f378:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800f37c:	4659      	mov	r1, fp
 800f37e:	4620      	mov	r0, r4
 800f380:	f001 ffd6 	bl	8011330 <arp_cache_lookup>
 800f384:	b938      	cbnz	r0, 800f396 <rfc3927+0x42>
 800f386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f38a:	2001      	movs	r0, #1
 800f38c:	602c      	str	r4, [r5, #0]
 800f38e:	60ac      	str	r4, [r5, #8]
 800f390:	606b      	str	r3, [r5, #4]
 800f392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f396:	ba24      	rev	r4, r4
 800f398:	3401      	adds	r4, #1
 800f39a:	3e01      	subs	r6, #1
 800f39c:	ba24      	rev	r4, r4
 800f39e:	b2b6      	uxth	r6, r6
 800f3a0:	4554      	cmp	r4, sl
 800f3a2:	bf08      	it	eq
 800f3a4:	4644      	moveq	r4, r8
 800f3a6:	b12e      	cbz	r6, 800f3b4 <rfc3927+0x60>
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	eba3 0309 	sub.w	r3, r3, r9
 800f3ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f3b2:	d3e3      	bcc.n	800f37c <rfc3927+0x28>
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	e9c5 0001 	strd	r0, r0, [r5, #4]
 800f3ba:	6028      	str	r0, [r5, #0]
 800f3bc:	e7e9      	b.n	800f392 <rfc3927+0x3e>
 800f3be:	bf00      	nop
 800f3c0:	200029ec 	andcs	r2, r0, ip, ror #19
 800f3c4:	2000a97c 	andcs	sl, r0, ip, ror r9
 800f3c8:	0100fea9 	smlatbeq	r0, r9, lr, pc	; <UNPREDICTABLE>
 800f3cc:	200029f4 	strdcs	r2, [r0], -r4
 800f3d0:	fffefea9 			; <UNDEFINED> instruction: 0xfffefea9

0800f3d4 <_init_tcb>:
 800f3d4:	b510      	push	{r4, lr}
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2400      	movs	r4, #0
 800f3da:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800f3de:	4293      	cmp	r3, r2
 800f3e0:	d10d      	bne.n	800f3fe <_init_tcb+0x2a>
 800f3e2:	4b08      	ldr	r3, [pc, #32]	; (800f404 <_init_tcb+0x30>)
 800f3e4:	f640 3268 	movw	r2, #2920	; 0xb68
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	8702      	strh	r2, [r0, #56]	; 0x38
 800f3ec:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f3f0:	6283      	str	r3, [r0, #40]	; 0x28
 800f3f2:	6243      	str	r3, [r0, #36]	; 0x24
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	8001      	strh	r1, [r0, #0]
 800f3f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800f3fc:	bd10      	pop	{r4, pc}
 800f3fe:	f803 4b01 	strb.w	r4, [r3], #1
 800f402:	e7ec      	b.n	800f3de <_init_tcb+0xa>
 800f404:	2000a97c 	andcs	sl, r0, ip, ror r9

0800f408 <memcpy.isra.0>:
 800f408:	3801      	subs	r0, #1
 800f40a:	440a      	add	r2, r1
 800f40c:	4291      	cmp	r1, r2
 800f40e:	d100      	bne.n	800f412 <memcpy.isra.0+0xa>
 800f410:	4770      	bx	lr
 800f412:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f416:	f800 3f01 	strb.w	r3, [r0, #1]!
 800f41a:	e7f7      	b.n	800f40c <memcpy.isra.0+0x4>

0800f41c <_bswap32>:
 800f41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f41e:	2204      	movs	r2, #4
 800f420:	f100 052a 	add.w	r5, r0, #42	; 0x2a
 800f424:	4629      	mov	r1, r5
 800f426:	4604      	mov	r4, r0
 800f428:	eb0d 0002 	add.w	r0, sp, r2
 800f42c:	f7ff ffec 	bl	800f408 <memcpy.isra.0>
 800f430:	2204      	movs	r2, #4
 800f432:	9b01      	ldr	r3, [sp, #4]
 800f434:	eb0d 0102 	add.w	r1, sp, r2
 800f438:	ba1b      	rev	r3, r3
 800f43a:	4628      	mov	r0, r5
 800f43c:	9301      	str	r3, [sp, #4]
 800f43e:	f7ff ffe3 	bl	800f408 <memcpy.isra.0>
 800f442:	2204      	movs	r2, #4
 800f444:	3426      	adds	r4, #38	; 0x26
 800f446:	eb0d 0002 	add.w	r0, sp, r2
 800f44a:	4621      	mov	r1, r4
 800f44c:	f7ff ffdc 	bl	800f408 <memcpy.isra.0>
 800f450:	2204      	movs	r2, #4
 800f452:	9b01      	ldr	r3, [sp, #4]
 800f454:	4620      	mov	r0, r4
 800f456:	ba1b      	rev	r3, r3
 800f458:	eb0d 0102 	add.w	r1, sp, r2
 800f45c:	9301      	str	r3, [sp, #4]
 800f45e:	f7ff ffd3 	bl	800f408 <memcpy.isra.0>
 800f462:	b003      	add	sp, #12
 800f464:	bd30      	pop	{r4, r5, pc}
	...

0800f468 <_tcp_send_package>:
 800f468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f46c:	7a0b      	ldrb	r3, [r1, #8]
 800f46e:	4605      	mov	r5, r0
 800f470:	f013 0f02 	tst.w	r3, #2
 800f474:	bf0c      	ite	eq
 800f476:	f04f 0905 	moveq.w	r9, #5
 800f47a:	f04f 0906 	movne.w	r9, #6
 800f47e:	f04f 0800 	mov.w	r8, #0
 800f482:	4c4b      	ldr	r4, [pc, #300]	; (800f5b0 <_tcp_send_package+0x148>)
 800f484:	460f      	mov	r7, r1
 800f486:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 800f488:	f100 0108 	add.w	r1, r0, #8
 800f48c:	2206      	movs	r2, #6
 800f48e:	4620      	mov	r0, r4
 800f490:	f7ff ffba 	bl	800f408 <memcpy.isra.0>
 800f494:	4a47      	ldr	r2, [pc, #284]	; (800f5b4 <_tcp_send_package+0x14c>)
 800f496:	eb06 0689 	add.w	r6, r6, r9, lsl #2
 800f49a:	8813      	ldrh	r3, [r2, #0]
 800f49c:	b2b6      	uxth	r6, r6
 800f49e:	1c59      	adds	r1, r3, #1
 800f4a0:	8263      	strh	r3, [r4, #18]
 800f4a2:	f105 0a04 	add.w	sl, r5, #4
 800f4a6:	f106 0314 	add.w	r3, r6, #20
 800f4aa:	ba5b      	rev16	r3, r3
 800f4ac:	8011      	strh	r1, [r2, #0]
 800f4ae:	f104 001e 	add.w	r0, r4, #30
 800f4b2:	2204      	movs	r2, #4
 800f4b4:	4651      	mov	r1, sl
 800f4b6:	8223      	strh	r3, [r4, #16]
 800f4b8:	f7ff ffa6 	bl	800f408 <memcpy.isra.0>
 800f4bc:	2114      	movs	r1, #20
 800f4be:	f104 000e 	add.w	r0, r4, #14
 800f4c2:	f884 8018 	strb.w	r8, [r4, #24]
 800f4c6:	f884 8019 	strb.w	r8, [r4, #25]
 800f4ca:	f002 fb67 	bl	8011b9c <net_chksum>
 800f4ce:	882b      	ldrh	r3, [r5, #0]
 800f4d0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800f4d4:	8463      	strh	r3, [r4, #34]	; 0x22
 800f4d6:	886b      	ldrh	r3, [r5, #2]
 800f4d8:	8320      	strh	r0, [r4, #24]
 800f4da:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
 800f4e0:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f884 902e 	strb.w	r9, [r4, #46]	; 0x2e
 800f4ea:	f8c4 302a 	str.w	r3, [r4, #42]	; 0x2a
 800f4ee:	7a3b      	ldrb	r3, [r7, #8]
 800f4f0:	8622      	strh	r2, [r4, #48]	; 0x30
 800f4f2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 800f4f6:	079b      	lsls	r3, r3, #30
 800f4f8:	bf48      	it	mi
 800f4fa:	2302      	movmi	r3, #2
 800f4fc:	8baa      	ldrh	r2, [r5, #28]
 800f4fe:	bf44      	itt	mi
 800f500:	f884 3036 	strbmi.w	r3, [r4, #54]	; 0x36
 800f504:	2304      	movmi	r3, #4
 800f506:	86a2      	strh	r2, [r4, #52]	; 0x34
 800f508:	bf41      	itttt	mi
 800f50a:	f884 3037 	strbmi.w	r3, [r4, #55]	; 0x37
 800f50e:	4622      	movmi	r2, r4
 800f510:	f24b 4305 	movwmi	r3, #46085	; 0xb405
 800f514:	f822 3f38 	strhmi.w	r3, [r2, #56]!
 800f518:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f51a:	f884 8032 	strb.w	r8, [r4, #50]	; 0x32
 800f51e:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
 800f522:	bf58      	it	pl
 800f524:	f104 0236 	addpl.w	r2, r4, #54	; 0x36
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d13f      	bne.n	800f5ac <_tcp_send_package+0x144>
 800f52c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800f52e:	4820      	ldr	r0, [pc, #128]	; (800f5b0 <_tcp_send_package+0x148>)
 800f530:	ba5b      	rev16	r3, r3
 800f532:	8463      	strh	r3, [r4, #34]	; 0x22
 800f534:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
 800f536:	ba5b      	rev16	r3, r3
 800f538:	84a3      	strh	r3, [r4, #36]	; 0x24
 800f53a:	f7ff ff6f 	bl	800f41c <_bswap32>
 800f53e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800f540:	a801      	add	r0, sp, #4
 800f542:	ba5b      	rev16	r3, r3
 800f544:	8623      	strh	r3, [r4, #48]	; 0x30
 800f546:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f548:	220c      	movs	r2, #12
 800f54a:	ba5b      	rev16	r3, r3
 800f54c:	491a      	ldr	r1, [pc, #104]	; (800f5b8 <_tcp_send_package+0x150>)
 800f54e:	86a3      	strh	r3, [r4, #52]	; 0x34
 800f550:	f7ff ff5a 	bl	800f408 <memcpy.isra.0>
 800f554:	2204      	movs	r2, #4
 800f556:	4919      	ldr	r1, [pc, #100]	; (800f5bc <_tcp_send_package+0x154>)
 800f558:	4817      	ldr	r0, [pc, #92]	; (800f5b8 <_tcp_send_package+0x150>)
 800f55a:	f7ff ff55 	bl	800f408 <memcpy.isra.0>
 800f55e:	2204      	movs	r2, #4
 800f560:	4651      	mov	r1, sl
 800f562:	4817      	ldr	r0, [pc, #92]	; (800f5c0 <_tcp_send_package+0x158>)
 800f564:	f7ff ff50 	bl	800f408 <memcpy.isra.0>
 800f568:	2300      	movs	r3, #0
 800f56a:	77a3      	strb	r3, [r4, #30]
 800f56c:	2306      	movs	r3, #6
 800f56e:	f106 010c 	add.w	r1, r6, #12
 800f572:	77e3      	strb	r3, [r4, #31]
 800f574:	4810      	ldr	r0, [pc, #64]	; (800f5b8 <_tcp_send_package+0x150>)
 800f576:	ba73      	rev16	r3, r6
 800f578:	8423      	strh	r3, [r4, #32]
 800f57a:	f002 fb0f 	bl	8011b9c <net_chksum>
 800f57e:	a901      	add	r1, sp, #4
 800f580:	4605      	mov	r5, r0
 800f582:	220c      	movs	r2, #12
 800f584:	480c      	ldr	r0, [pc, #48]	; (800f5b8 <_tcp_send_package+0x150>)
 800f586:	f7ff ff3f 	bl	800f408 <memcpy.isra.0>
 800f58a:	4809      	ldr	r0, [pc, #36]	; (800f5b0 <_tcp_send_package+0x148>)
 800f58c:	f106 0122 	add.w	r1, r6, #34	; 0x22
 800f590:	8665      	strh	r5, [r4, #50]	; 0x32
 800f592:	b004      	add	sp, #16
 800f594:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f598:	f005 ba42 	b.w	8014a20 <emac_eth_send>
 800f59c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800f59e:	5cc9      	ldrb	r1, [r1, r3]
 800f5a0:	54d1      	strb	r1, [r2, r3]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800f5a6:	4299      	cmp	r1, r3
 800f5a8:	d8f8      	bhi.n	800f59c <_tcp_send_package+0x134>
 800f5aa:	e7bf      	b.n	800f52c <_tcp_send_package+0xc4>
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	e7f9      	b.n	800f5a4 <_tcp_send_package+0x13c>
 800f5b0:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
 800f5b4:	200029fa 	strdcs	r2, [r0], -sl
 800f5b8:	200035c6 	andcs	r3, r0, r6, asr #11
 800f5bc:	200029d0 	ldrdcs	r2, [r0], -r0
 800f5c0:	200035ca 	andcs	r3, r0, sl, asr #11

0800f5c4 <_send_reset>:
 800f5c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f5c6:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	075a      	lsls	r2, r3, #29
 800f5ce:	460e      	mov	r6, r1
 800f5d0:	d421      	bmi.n	800f616 <_send_reset+0x52>
 800f5d2:	2204      	movs	r2, #4
 800f5d4:	f013 0310 	ands.w	r3, r3, #16
 800f5d8:	f88d 200c 	strb.w	r2, [sp, #12]
 800f5dc:	d01d      	beq.n	800f61a <_send_reset+0x56>
 800f5de:	f100 012a 	add.w	r1, r0, #42	; 0x2a
 800f5e2:	4668      	mov	r0, sp
 800f5e4:	f7ff ff10 	bl	800f408 <memcpy.isra.0>
 800f5e8:	9b00      	ldr	r3, [sp, #0]
 800f5ea:	9301      	str	r3, [sp, #4]
 800f5ec:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800f5f0:	4668      	mov	r0, sp
 800f5f2:	f3c3 0540 	ubfx	r5, r3, #1, #1
 800f5f6:	f104 0126 	add.w	r1, r4, #38	; 0x26
 800f5fa:	07db      	lsls	r3, r3, #31
 800f5fc:	f04f 0204 	mov.w	r2, #4
 800f600:	bf48      	it	mi
 800f602:	3501      	addmi	r5, #1
 800f604:	f7ff ff00 	bl	800f408 <memcpy.isra.0>
 800f608:	9b00      	ldr	r3, [sp, #0]
 800f60a:	4630      	mov	r0, r6
 800f60c:	441d      	add	r5, r3
 800f60e:	a901      	add	r1, sp, #4
 800f610:	9502      	str	r5, [sp, #8]
 800f612:	f7ff ff29 	bl	800f468 <_tcp_send_package>
 800f616:	b004      	add	sp, #16
 800f618:	bd70      	pop	{r4, r5, r6, pc}
 800f61a:	9301      	str	r3, [sp, #4]
 800f61c:	2314      	movs	r3, #20
 800f61e:	f88d 300c 	strb.w	r3, [sp, #12]
 800f622:	e7e3      	b.n	800f5ec <_send_reset+0x28>

0800f624 <tcp_init>:
 800f624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f626:	2206      	movs	r2, #6
 800f628:	4c0e      	ldr	r4, [pc, #56]	; (800f664 <tcp_init+0x40>)
 800f62a:	490f      	ldr	r1, [pc, #60]	; (800f668 <tcp_init+0x44>)
 800f62c:	18a0      	adds	r0, r4, r2
 800f62e:	f7ff feeb 	bl	800f408 <memcpy.isra.0>
 800f632:	2308      	movs	r3, #8
 800f634:	2204      	movs	r2, #4
 800f636:	2500      	movs	r5, #0
 800f638:	7323      	strb	r3, [r4, #12]
 800f63a:	4b0c      	ldr	r3, [pc, #48]	; (800f66c <tcp_init+0x48>)
 800f63c:	eb0d 0102 	add.w	r1, sp, r2
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f104 001a 	add.w	r0, r4, #26
 800f646:	9301      	str	r3, [sp, #4]
 800f648:	7365      	strb	r5, [r4, #13]
 800f64a:	f7ff fedd 	bl	800f408 <memcpy.isra.0>
 800f64e:	2345      	movs	r3, #69	; 0x45
 800f650:	73a3      	strb	r3, [r4, #14]
 800f652:	2340      	movs	r3, #64	; 0x40
 800f654:	7523      	strb	r3, [r4, #20]
 800f656:	75a3      	strb	r3, [r4, #22]
 800f658:	2306      	movs	r3, #6
 800f65a:	73e5      	strb	r5, [r4, #15]
 800f65c:	7565      	strb	r5, [r4, #21]
 800f65e:	75e3      	strb	r3, [r4, #23]
 800f660:	b003      	add	sp, #12
 800f662:	bd30      	pop	{r4, r5, pc}
 800f664:	200035b0 			; <UNDEFINED> instruction: 0x200035b0
 800f668:	200029dc 	ldrdcs	r2, [r0], -ip
 800f66c:	200029d0 	ldrdcs	r2, [r0], -r0

0800f670 <tcp_handle>:
 800f670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f674:	4605      	mov	r5, r0
 800f676:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800f678:	b085      	sub	sp, #20
 800f67a:	ba5b      	rev16	r3, r3
 800f67c:	8443      	strh	r3, [r0, #34]	; 0x22
 800f67e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800f680:	f8b0 b010 	ldrh.w	fp, [r0, #16]
 800f684:	ba5b      	rev16	r3, r3
 800f686:	8483      	strh	r3, [r0, #36]	; 0x24
 800f688:	f890 802e 	ldrb.w	r8, [r0, #46]	; 0x2e
 800f68c:	f7ff fec6 	bl	800f41c <_bswap32>
 800f690:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 800f692:	4ca6      	ldr	r4, [pc, #664]	; (800f92c <tcp_handle+0x2bc>)
 800f694:	ba5b      	rev16	r3, r3
 800f696:	862b      	strh	r3, [r5, #48]	; 0x30
 800f698:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 800f69a:	8822      	ldrh	r2, [r4, #0]
 800f69c:	ba5b      	rev16	r3, r3
 800f69e:	86ab      	strh	r3, [r5, #52]	; 0x34
 800f6a0:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d14d      	bne.n	800f742 <tcp_handle+0xd2>
 800f6a6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	d00d      	beq.n	800f6ca <tcp_handle+0x5a>
 800f6ae:	2204      	movs	r2, #4
 800f6b0:	4668      	mov	r0, sp
 800f6b2:	f105 011a 	add.w	r1, r5, #26
 800f6b6:	f7ff fea7 	bl	800f408 <memcpy.isra.0>
 800f6ba:	8862      	ldrh	r2, [r4, #2]
 800f6bc:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d13f      	bne.n	800f742 <tcp_handle+0xd2>
 800f6c2:	6862      	ldr	r2, [r4, #4]
 800f6c4:	9b00      	ldr	r3, [sp, #0]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d13b      	bne.n	800f742 <tcp_handle+0xd2>
 800f6ca:	2204      	movs	r2, #4
 800f6cc:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 800f6d0:	eb0d 0002 	add.w	r0, sp, r2
 800f6d4:	f7ff fe98 	bl	800f408 <memcpy.isra.0>
 800f6d8:	2204      	movs	r2, #4
 800f6da:	f105 0126 	add.w	r1, r5, #38	; 0x26
 800f6de:	eb0d 0002 	add.w	r0, sp, r2
 800f6e2:	9e01      	ldr	r6, [sp, #4]
 800f6e4:	f7ff fe90 	bl	800f408 <memcpy.isra.0>
 800f6e8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800f6ec:	9f01      	ldr	r7, [sp, #4]
 800f6ee:	2a01      	cmp	r2, #1
 800f6f0:	f8b5 a030 	ldrh.w	sl, [r5, #48]	; 0x30
 800f6f4:	d01b      	beq.n	800f72e <tcp_handle+0xbe>
 800f6f6:	1ed3      	subs	r3, r2, #3
 800f6f8:	2b07      	cmp	r3, #7
 800f6fa:	d822      	bhi.n	800f742 <tcp_handle+0xd2>
 800f6fc:	ea4f 1318 	mov.w	r3, r8, lsr #4
 800f700:	f64f 78ec 	movw	r8, #65516	; 0xffec
 800f704:	fa9b fb9b 	rev16.w	fp, fp
 800f708:	eba8 0883 	sub.w	r8, r8, r3, lsl #2
 800f70c:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 800f70e:	44d8      	add	r8, fp
 800f710:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 800f714:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800f718:	fa1f f888 	uxth.w	r8, r8
 800f71c:	2900      	cmp	r1, #0
 800f71e:	d142      	bne.n	800f7a6 <tcp_handle+0x136>
 800f720:	f1b8 0f00 	cmp.w	r8, #0
 800f724:	d16b      	bne.n	800f7fe <tcp_handle+0x18e>
 800f726:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f728:	42bb      	cmp	r3, r7
 800f72a:	d168      	bne.n	800f7fe <tcp_handle+0x18e>
 800f72c:	e048      	b.n	800f7c0 <tcp_handle+0x150>
 800f72e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800f732:	075a      	lsls	r2, r3, #29
 800f734:	d405      	bmi.n	800f742 <tcp_handle+0xd2>
 800f736:	06d8      	lsls	r0, r3, #27
 800f738:	d506      	bpl.n	800f748 <tcp_handle+0xd8>
 800f73a:	4628      	mov	r0, r5
 800f73c:	497b      	ldr	r1, [pc, #492]	; (800f92c <tcp_handle+0x2bc>)
 800f73e:	f7ff ff41 	bl	800f5c4 <_send_reset>
 800f742:	b005      	add	sp, #20
 800f744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f748:	0799      	lsls	r1, r3, #30
 800f74a:	d5fa      	bpl.n	800f742 <tcp_handle+0xd2>
 800f74c:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
 800f750:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800f754:	4668      	mov	r0, sp
 800f756:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f75a:	f105 011a 	add.w	r1, r5, #26
 800f75e:	2204      	movs	r2, #4
 800f760:	8063      	strh	r3, [r4, #2]
 800f762:	f7ff fe51 	bl	800f408 <memcpy.isra.0>
 800f766:	2206      	movs	r2, #6
 800f768:	9b00      	ldr	r3, [sp, #0]
 800f76a:	18a9      	adds	r1, r5, r2
 800f76c:	4870      	ldr	r0, [pc, #448]	; (800f930 <tcp_handle+0x2c0>)
 800f76e:	6063      	str	r3, [r4, #4]
 800f770:	f7ff fe4a 	bl	800f408 <memcpy.isra.0>
 800f774:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f776:	1c7b      	adds	r3, r7, #1
 800f778:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800f77c:	6363      	str	r3, [r4, #52]	; 0x34
 800f77e:	2312      	movs	r3, #18
 800f780:	486a      	ldr	r0, [pc, #424]	; (800f92c <tcp_handle+0x2bc>)
 800f782:	a901      	add	r1, sp, #4
 800f784:	f88d 300c 	strb.w	r3, [sp, #12]
 800f788:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800f78c:	63e7      	str	r7, [r4, #60]	; 0x3c
 800f78e:	f8c4 a018 	str.w	sl, [r4, #24]
 800f792:	f7ff fe69 	bl	800f468 <_tcp_send_package>
 800f796:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f798:	1c5a      	adds	r2, r3, #1
 800f79a:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800f79e:	2303      	movs	r3, #3
 800f7a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800f7a4:	e7cd      	b.n	800f742 <tcp_handle+0xd2>
 800f7a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7a8:	eba3 0c07 	sub.w	ip, r3, r7
 800f7ac:	f1b8 0f00 	cmp.w	r8, #0
 800f7b0:	d10d      	bne.n	800f7ce <tcp_handle+0x15e>
 800f7b2:	f1bc 0f00 	cmp.w	ip, #0
 800f7b6:	dc22      	bgt.n	800f7fe <tcp_handle+0x18e>
 800f7b8:	1afb      	subs	r3, r7, r3
 800f7ba:	1a5b      	subs	r3, r3, r1
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	da1e      	bge.n	800f7fe <tcp_handle+0x18e>
 800f7c0:	0743      	lsls	r3, r0, #29
 800f7c2:	d530      	bpl.n	800f826 <tcp_handle+0x1b6>
 800f7c4:	8821      	ldrh	r1, [r4, #0]
 800f7c6:	4859      	ldr	r0, [pc, #356]	; (800f92c <tcp_handle+0x2bc>)
 800f7c8:	f7ff fe04 	bl	800f3d4 <_init_tcb>
 800f7cc:	e7b9      	b.n	800f742 <tcp_handle+0xd2>
 800f7ce:	f1bc 0f00 	cmp.w	ip, #0
 800f7d2:	dc06      	bgt.n	800f7e2 <tcp_handle+0x172>
 800f7d4:	eba7 0c03 	sub.w	ip, r7, r3
 800f7d8:	ebac 0c01 	sub.w	ip, ip, r1
 800f7dc:	f1bc 0f00 	cmp.w	ip, #0
 800f7e0:	dbee      	blt.n	800f7c0 <tcp_handle+0x150>
 800f7e2:	eb08 0c07 	add.w	ip, r8, r7
 800f7e6:	f103 0e01 	add.w	lr, r3, #1
 800f7ea:	ebae 0e0c 	sub.w	lr, lr, ip
 800f7ee:	f1be 0f00 	cmp.w	lr, #0
 800f7f2:	dc04      	bgt.n	800f7fe <tcp_handle+0x18e>
 800f7f4:	43db      	mvns	r3, r3
 800f7f6:	1a5b      	subs	r3, r3, r1
 800f7f8:	eb13 0f0c 	cmn.w	r3, ip
 800f7fc:	d4e0      	bmi.n	800f7c0 <tcp_handle+0x150>
 800f7fe:	0742      	lsls	r2, r0, #29
 800f800:	d505      	bpl.n	800f80e <tcp_handle+0x19e>
 800f802:	8821      	ldrh	r1, [r4, #0]
 800f804:	4849      	ldr	r0, [pc, #292]	; (800f92c <tcp_handle+0x2bc>)
 800f806:	f7ff fde5 	bl	800f3d4 <_init_tcb>
 800f80a:	2301      	movs	r3, #1
 800f80c:	e7c8      	b.n	800f7a0 <tcp_handle+0x130>
 800f80e:	6963      	ldr	r3, [r4, #20]
 800f810:	9301      	str	r3, [sp, #4]
 800f812:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f814:	9302      	str	r3, [sp, #8]
 800f816:	2310      	movs	r3, #16
 800f818:	4844      	ldr	r0, [pc, #272]	; (800f92c <tcp_handle+0x2bc>)
 800f81a:	a901      	add	r1, sp, #4
 800f81c:	f88d 300c 	strb.w	r3, [sp, #12]
 800f820:	f7ff fe22 	bl	800f468 <_tcp_send_package>
 800f824:	e78d      	b.n	800f742 <tcp_handle+0xd2>
 800f826:	0781      	lsls	r1, r0, #30
 800f828:	d505      	bpl.n	800f836 <tcp_handle+0x1c6>
 800f82a:	2a03      	cmp	r2, #3
 800f82c:	d0ed      	beq.n	800f80a <tcp_handle+0x19a>
 800f82e:	4628      	mov	r0, r5
 800f830:	493e      	ldr	r1, [pc, #248]	; (800f92c <tcp_handle+0x2bc>)
 800f832:	f7ff fec7 	bl	800f5c4 <_send_reset>
 800f836:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800f83a:	06da      	lsls	r2, r3, #27
 800f83c:	d581      	bpl.n	800f742 <tcp_handle+0xd2>
 800f83e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f842:	3b03      	subs	r3, #3
 800f844:	2b07      	cmp	r3, #7
 800f846:	d818      	bhi.n	800f87a <tcp_handle+0x20a>
 800f848:	e8df f003 	tbb	[pc, r3]
 800f84c:	76767604 	ldrbtvc	r7, [r6], -r4, lsl #12
 800f850:	a69d7676 			; <UNDEFINED> instruction: 0xa69d7676
 800f854:	6923      	ldr	r3, [r4, #16]
 800f856:	1b9b      	subs	r3, r3, r6
 800f858:	2b00      	cmp	r3, #0
 800f85a:	dc0a      	bgt.n	800f872 <tcp_handle+0x202>
 800f85c:	6963      	ldr	r3, [r4, #20]
 800f85e:	1af3      	subs	r3, r6, r3
 800f860:	2b00      	cmp	r3, #0
 800f862:	dc06      	bgt.n	800f872 <tcp_handle+0x202>
 800f864:	2304      	movs	r3, #4
 800f866:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800f86a:	f8c4 a018 	str.w	sl, [r4, #24]
 800f86e:	6126      	str	r6, [r4, #16]
 800f870:	e796      	b.n	800f7a0 <tcp_handle+0x130>
 800f872:	4628      	mov	r0, r5
 800f874:	492d      	ldr	r1, [pc, #180]	; (800f92c <tcp_handle+0x2bc>)
 800f876:	f7ff fea5 	bl	800f5c4 <_send_reset>
 800f87a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f87e:	3b04      	subs	r3, #4
 800f880:	2b02      	cmp	r3, #2
 800f882:	d830      	bhi.n	800f8e6 <tcp_handle+0x276>
 800f884:	f1b8 0f00 	cmp.w	r8, #0
 800f888:	d02d      	beq.n	800f8e6 <tcp_handle+0x276>
 800f88a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f88c:	42bb      	cmp	r3, r7
 800f88e:	f040 8092 	bne.w	800f9b6 <tcp_handle+0x346>
 800f892:	f240 53b6 	movw	r3, #1462	; 0x5b6
 800f896:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800f934 <tcp_handle+0x2c4>
 800f89a:	f105 0122 	add.w	r1, r5, #34	; 0x22
 800f89e:	f8ba 7000 	ldrh.w	r7, [sl]
 800f8a2:	4642      	mov	r2, r8
 800f8a4:	435f      	muls	r7, r3
 800f8a6:	1d38      	adds	r0, r7, #4
 800f8a8:	4449      	add	r1, r9
 800f8aa:	4450      	add	r0, sl
 800f8ac:	f7ff fdac 	bl	800f408 <memcpy.isra.0>
 800f8b0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800f8b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8b4:	f2a2 52b4 	subw	r2, r2, #1460	; 0x5b4
 800f8b8:	8722      	strh	r2, [r4, #56]	; 0x38
 800f8ba:	6962      	ldr	r2, [r4, #20]
 800f8bc:	4443      	add	r3, r8
 800f8be:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800f8c2:	6363      	str	r3, [r4, #52]	; 0x34
 800f8c4:	2310      	movs	r3, #16
 800f8c6:	4457      	add	r7, sl
 800f8c8:	4818      	ldr	r0, [pc, #96]	; (800f92c <tcp_handle+0x2bc>)
 800f8ca:	f8a7 85b8 	strh.w	r8, [r7, #1464]	; 0x5b8
 800f8ce:	a901      	add	r1, sp, #4
 800f8d0:	f88d 300c 	strb.w	r3, [sp, #12]
 800f8d4:	f7ff fdc8 	bl	800f468 <_tcp_send_package>
 800f8d8:	f8ba 3000 	ldrh.w	r3, [sl]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	f003 0301 	and.w	r3, r3, #1
 800f8e2:	f8aa 3000 	strh.w	r3, [sl]
 800f8e6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f8ea:	2b02      	cmp	r3, #2
 800f8ec:	f67f af29 	bls.w	800f742 <tcp_handle+0xd2>
 800f8f0:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800f8f4:	07db      	lsls	r3, r3, #31
 800f8f6:	f57f af24 	bpl.w	800f742 <tcp_handle+0xd2>
 800f8fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8fc:	6962      	ldr	r2, [r4, #20]
 800f8fe:	3301      	adds	r3, #1
 800f900:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800f904:	6363      	str	r3, [r4, #52]	; 0x34
 800f906:	2310      	movs	r3, #16
 800f908:	4808      	ldr	r0, [pc, #32]	; (800f92c <tcp_handle+0x2bc>)
 800f90a:	a901      	add	r1, sp, #4
 800f90c:	f88d 300c 	strb.w	r3, [sp, #12]
 800f910:	f7ff fdaa 	bl	800f468 <_tcp_send_package>
 800f914:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800f918:	2b05      	cmp	r3, #5
 800f91a:	d054      	beq.n	800f9c6 <tcp_handle+0x356>
 800f91c:	d84e      	bhi.n	800f9bc <tcp_handle+0x34c>
 800f91e:	3b03      	subs	r3, #3
 800f920:	2b01      	cmp	r3, #1
 800f922:	f63f af0e 	bhi.w	800f742 <tcp_handle+0xd2>
 800f926:	2307      	movs	r3, #7
 800f928:	e73a      	b.n	800f7a0 <tcp_handle+0x130>
 800f92a:	bf00      	nop
 800f92c:	2000356c 	andcs	r3, r0, ip, ror #10
 800f930:	20003574 	andcs	r3, r0, r4, ror r5
 800f934:	200029fc 	strdcs	r2, [r0], -ip
 800f938:	6923      	ldr	r3, [r4, #16]
 800f93a:	1b99      	subs	r1, r3, r6
 800f93c:	d513      	bpl.n	800f966 <tcp_handle+0x2f6>
 800f93e:	6962      	ldr	r2, [r4, #20]
 800f940:	1ab2      	subs	r2, r6, r2
 800f942:	2a00      	cmp	r2, #0
 800f944:	dc0f      	bgt.n	800f966 <tcp_handle+0x2f6>
 800f946:	6126      	str	r6, [r4, #16]
 800f948:	6a23      	ldr	r3, [r4, #32]
 800f94a:	1bda      	subs	r2, r3, r7
 800f94c:	2a00      	cmp	r2, #0
 800f94e:	db05      	blt.n	800f95c <tcp_handle+0x2ec>
 800f950:	42bb      	cmp	r3, r7
 800f952:	d192      	bne.n	800f87a <tcp_handle+0x20a>
 800f954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f956:	1b9b      	subs	r3, r3, r6
 800f958:	2b00      	cmp	r3, #0
 800f95a:	dc8e      	bgt.n	800f87a <tcp_handle+0x20a>
 800f95c:	e9c4 7608 	strd	r7, r6, [r4, #32]
 800f960:	f8c4 a018 	str.w	sl, [r4, #24]
 800f964:	e789      	b.n	800f87a <tcp_handle+0x20a>
 800f966:	1af3      	subs	r3, r6, r3
 800f968:	2b00      	cmp	r3, #0
 800f96a:	dc06      	bgt.n	800f97a <tcp_handle+0x30a>
 800f96c:	2900      	cmp	r1, #0
 800f96e:	dc84      	bgt.n	800f87a <tcp_handle+0x20a>
 800f970:	6963      	ldr	r3, [r4, #20]
 800f972:	1af3      	subs	r3, r6, r3
 800f974:	2b00      	cmp	r3, #0
 800f976:	dc80      	bgt.n	800f87a <tcp_handle+0x20a>
 800f978:	e7e6      	b.n	800f948 <tcp_handle+0x2d8>
 800f97a:	6963      	ldr	r3, [r4, #20]
 800f97c:	1b9a      	subs	r2, r3, r6
 800f97e:	2a00      	cmp	r2, #0
 800f980:	f6bf af7b 	bge.w	800f87a <tcp_handle+0x20a>
 800f984:	e744      	b.n	800f810 <tcp_handle+0x1a0>
 800f986:	6963      	ldr	r3, [r4, #20]
 800f988:	42b3      	cmp	r3, r6
 800f98a:	f47f af76 	bne.w	800f87a <tcp_handle+0x20a>
 800f98e:	8821      	ldrh	r1, [r4, #0]
 800f990:	480f      	ldr	r0, [pc, #60]	; (800f9d0 <tcp_handle+0x360>)
 800f992:	f7ff fd1f 	bl	800f3d4 <_init_tcb>
 800f996:	e770      	b.n	800f87a <tcp_handle+0x20a>
 800f998:	6963      	ldr	r3, [r4, #20]
 800f99a:	42b3      	cmp	r3, r6
 800f99c:	f47f af6d 	bne.w	800f87a <tcp_handle+0x20a>
 800f9a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9a2:	480b      	ldr	r0, [pc, #44]	; (800f9d0 <tcp_handle+0x360>)
 800f9a4:	9302      	str	r3, [sp, #8]
 800f9a6:	2310      	movs	r3, #16
 800f9a8:	a901      	add	r1, sp, #4
 800f9aa:	9601      	str	r6, [sp, #4]
 800f9ac:	f88d 300c 	strb.w	r3, [sp, #12]
 800f9b0:	f7ff fd5a 	bl	800f468 <_tcp_send_package>
 800f9b4:	e761      	b.n	800f87a <tcp_handle+0x20a>
 800f9b6:	6962      	ldr	r2, [r4, #20]
 800f9b8:	9201      	str	r2, [sp, #4]
 800f9ba:	e72b      	b.n	800f814 <tcp_handle+0x1a4>
 800f9bc:	2b06      	cmp	r3, #6
 800f9be:	f47f aec0 	bne.w	800f742 <tcp_handle+0xd2>
 800f9c2:	230a      	movs	r3, #10
 800f9c4:	e6ec      	b.n	800f7a0 <tcp_handle+0x130>
 800f9c6:	6963      	ldr	r3, [r4, #20]
 800f9c8:	42b3      	cmp	r3, r6
 800f9ca:	d0fa      	beq.n	800f9c2 <tcp_handle+0x352>
 800f9cc:	2308      	movs	r3, #8
 800f9ce:	e6e7      	b.n	800f7a0 <tcp_handle+0x130>
 800f9d0:	2000356c 	andcs	r3, r0, ip, ror #10

0800f9d4 <tcp_begin>:
 800f9d4:	b508      	push	{r3, lr}
 800f9d6:	4b0a      	ldr	r3, [pc, #40]	; (800fa00 <tcp_begin+0x2c>)
 800f9d8:	4601      	mov	r1, r0
 800f9da:	881a      	ldrh	r2, [r3, #0]
 800f9dc:	4282      	cmp	r2, r0
 800f9de:	d102      	bne.n	800f9e6 <tcp_begin+0x12>
 800f9e0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f9e4:	b130      	cbz	r0, 800f9f4 <tcp_begin+0x20>
 800f9e6:	b12a      	cbz	r2, 800f9f4 <tcp_begin+0x20>
 800f9e8:	4806      	ldr	r0, [pc, #24]	; (800fa04 <tcp_begin+0x30>)
 800f9ea:	f003 fbf1 	bl	80131d0 <console_error>
 800f9ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9f2:	bd08      	pop	{r3, pc}
 800f9f4:	4802      	ldr	r0, [pc, #8]	; (800fa00 <tcp_begin+0x2c>)
 800f9f6:	8019      	strh	r1, [r3, #0]
 800f9f8:	f7ff fcec 	bl	800f3d4 <_init_tcb>
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	e7f8      	b.n	800f9f2 <tcp_begin+0x1e>
 800fa00:	2000356c 	andcs	r3, r0, ip, ror #10
 800fa04:	0801771d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, sl, ip, sp, lr}

0800fa08 <tcp_write>:
 800fa08:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	bf28      	it	cs
 800fa10:	461a      	movcs	r2, r3
 800fa12:	2344      	movs	r3, #68	; 0x44
 800fa14:	b530      	push	{r4, r5, lr}
 800fa16:	4c0d      	ldr	r4, [pc, #52]	; (800fa4c <tcp_write+0x44>)
 800fa18:	b085      	sub	sp, #20
 800fa1a:	fb03 4400 	mla	r4, r3, r0, r4
 800fa1e:	6963      	ldr	r3, [r4, #20]
 800fa20:	4615      	mov	r5, r2
 800fa22:	9301      	str	r3, [sp, #4]
 800fa24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa26:	62e1      	str	r1, [r4, #44]	; 0x2c
 800fa28:	9302      	str	r3, [sp, #8]
 800fa2a:	2318      	movs	r3, #24
 800fa2c:	8622      	strh	r2, [r4, #48]	; 0x30
 800fa2e:	4620      	mov	r0, r4
 800fa30:	a901      	add	r1, sp, #4
 800fa32:	f88d 300c 	strb.w	r3, [sp, #12]
 800fa36:	f7ff fd17 	bl	800f468 <_tcp_send_package>
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	6962      	ldr	r2, [r4, #20]
 800fa3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa40:	442a      	add	r2, r5
 800fa42:	8623      	strh	r3, [r4, #48]	; 0x30
 800fa44:	6162      	str	r2, [r4, #20]
 800fa46:	b005      	add	sp, #20
 800fa48:	bd30      	pop	{r4, r5, pc}
 800fa4a:	bf00      	nop
 800fa4c:	2000356c 	andcs	r3, r0, ip, ror #10

0800fa50 <tcp_read>:
 800fa50:	2344      	movs	r3, #68	; 0x44
 800fa52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa54:	4c1c      	ldr	r4, [pc, #112]	; (800fac8 <tcp_read+0x78>)
 800fa56:	b085      	sub	sp, #20
 800fa58:	fb03 4400 	mla	r4, r3, r0, r4
 800fa5c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800fa60:	2b07      	cmp	r3, #7
 800fa62:	d112      	bne.n	800fa8a <tcp_read+0x3a>
 800fa64:	6963      	ldr	r3, [r4, #20]
 800fa66:	4620      	mov	r0, r4
 800fa68:	9301      	str	r3, [sp, #4]
 800fa6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa6c:	a901      	add	r1, sp, #4
 800fa6e:	9302      	str	r3, [sp, #8]
 800fa70:	2311      	movs	r3, #17
 800fa72:	f88d 300c 	strb.w	r3, [sp, #12]
 800fa76:	f7ff fcf7 	bl	800f468 <_tcp_send_package>
 800fa7a:	2309      	movs	r3, #9
 800fa7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800fa80:	6963      	ldr	r3, [r4, #20]
 800fa82:	3301      	adds	r3, #1
 800fa84:	6163      	str	r3, [r4, #20]
 800fa86:	2000      	movs	r0, #0
 800fa88:	e01b      	b.n	800fac2 <tcp_read+0x72>
 800fa8a:	f44f 6337 	mov.w	r3, #2928	; 0xb70
 800fa8e:	4358      	muls	r0, r3
 800fa90:	4a0e      	ldr	r2, [pc, #56]	; (800facc <tcp_read+0x7c>)
 800fa92:	1817      	adds	r7, r2, r0
 800fa94:	887b      	ldrh	r3, [r7, #2]
 800fa96:	5a15      	ldrh	r5, [r2, r0]
 800fa98:	429d      	cmp	r5, r3
 800fa9a:	d0f4      	beq.n	800fa86 <tcp_read+0x36>
 800fa9c:	f240 55b6 	movw	r5, #1462	; 0x5b6
 800faa0:	435d      	muls	r5, r3
 800faa2:	1d06      	adds	r6, r0, #4
 800faa4:	442e      	add	r6, r5
 800faa6:	4416      	add	r6, r2
 800faa8:	4428      	add	r0, r5
 800faaa:	600e      	str	r6, [r1, #0]
 800faac:	4402      	add	r2, r0
 800faae:	f8b2 05b8 	ldrh.w	r0, [r2, #1464]	; 0x5b8
 800fab2:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 800fab4:	3301      	adds	r3, #1
 800fab6:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800faba:	f003 0301 	and.w	r3, r3, #1
 800fabe:	8722      	strh	r2, [r4, #56]	; 0x38
 800fac0:	807b      	strh	r3, [r7, #2]
 800fac2:	b005      	add	sp, #20
 800fac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fac6:	bf00      	nop
 800fac8:	2000356c 	andcs	r3, r0, ip, ror #10
 800facc:	200029fc 	strdcs	r2, [r0], -ip

0800fad0 <memcpy.isra.0>:
 800fad0:	3801      	subs	r0, #1
 800fad2:	440a      	add	r2, r1
 800fad4:	4291      	cmp	r1, r2
 800fad6:	d100      	bne.n	800fada <memcpy.isra.0+0xa>
 800fad8:	4770      	bx	lr
 800fada:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fade:	f800 3f01 	strb.w	r3, [r0, #1]!
 800fae2:	e7f7      	b.n	800fad4 <memcpy.isra.0+0x4>

0800fae4 <net_memcpy>:
 800fae4:	ea41 0300 	orr.w	r3, r1, r0
 800fae8:	079b      	lsls	r3, r3, #30
 800faea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faec:	d115      	bne.n	800fb1a <net_memcpy+0x36>
 800faee:	f022 0303 	bic.w	r3, r2, #3
 800faf2:	1f04      	subs	r4, r0, #4
 800faf4:	0895      	lsrs	r5, r2, #2
 800faf6:	18ce      	adds	r6, r1, r3
 800faf8:	42b1      	cmp	r1, r6
 800fafa:	d109      	bne.n	800fb10 <net_memcpy+0x2c>
 800fafc:	f06f 0403 	mvn.w	r4, #3
 800fb00:	fb04 2205 	mla	r2, r4, r5, r2
 800fb04:	4403      	add	r3, r0
 800fb06:	3b01      	subs	r3, #1
 800fb08:	440a      	add	r2, r1
 800fb0a:	4291      	cmp	r1, r2
 800fb0c:	d107      	bne.n	800fb1e <net_memcpy+0x3a>
 800fb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb10:	f851 7b04 	ldr.w	r7, [r1], #4
 800fb14:	f844 7f04 	str.w	r7, [r4, #4]!
 800fb18:	e7ee      	b.n	800faf8 <net_memcpy+0x14>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	e7f3      	b.n	800fb06 <net_memcpy+0x22>
 800fb1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb26:	e7f0      	b.n	800fb0a <net_memcpy+0x26>

0800fb28 <udp_set_ip>:
 800fb28:	2204      	movs	r2, #4
 800fb2a:	b513      	push	{r0, r1, r4, lr}
 800fb2c:	4604      	mov	r4, r0
 800fb2e:	6803      	ldr	r3, [r0, #0]
 800fb30:	eb0d 0102 	add.w	r1, sp, r2
 800fb34:	4808      	ldr	r0, [pc, #32]	; (800fb58 <udp_set_ip+0x30>)
 800fb36:	9301      	str	r3, [sp, #4]
 800fb38:	f7ff ffca 	bl	800fad0 <memcpy.isra.0>
 800fb3c:	6862      	ldr	r2, [r4, #4]
 800fb3e:	4b07      	ldr	r3, [pc, #28]	; (800fb5c <udp_set_ip+0x34>)
 800fb40:	43d1      	mvns	r1, r2
 800fb42:	6019      	str	r1, [r3, #0]
 800fb44:	6823      	ldr	r3, [r4, #0]
 800fb46:	4013      	ands	r3, r2
 800fb48:	4a05      	ldr	r2, [pc, #20]	; (800fb60 <udp_set_ip+0x38>)
 800fb4a:	6013      	str	r3, [r2, #0]
 800fb4c:	68a2      	ldr	r2, [r4, #8]
 800fb4e:	4b05      	ldr	r3, [pc, #20]	; (800fb64 <udp_set_ip+0x3c>)
 800fb50:	601a      	str	r2, [r3, #0]
 800fb52:	b002      	add	sp, #8
 800fb54:	bd10      	pop	{r4, pc}
 800fb56:	bf00      	nop
 800fb58:	20009886 	andcs	r9, r0, r6, lsl #17
 800fb5c:	20003b9c 	mulcs	r0, ip, fp
 800fb60:	20003ba4 	andcs	r3, r0, r4, lsr #23
 800fb64:	20003ba0 	andcs	r3, r0, r0, lsr #23

0800fb68 <udp_init>:
 800fb68:	b570      	push	{r4, r5, r6, lr}
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	2508      	movs	r5, #8
 800fb6e:	460e      	mov	r6, r1
 800fb70:	4b12      	ldr	r3, [pc, #72]	; (800fbbc <udp_init+0x54>)
 800fb72:	4913      	ldr	r1, [pc, #76]	; (800fbc0 <udp_init+0x58>)
 800fb74:	3d01      	subs	r5, #1
 800fb76:	801a      	strh	r2, [r3, #0]
 800fb78:	805a      	strh	r2, [r3, #2]
 800fb7a:	f841 2b04 	str.w	r2, [r1], #4
 800fb7e:	f603 3394 	addw	r3, r3, #2964	; 0xb94
 800fb82:	d1f7      	bne.n	800fb74 <udp_init+0xc>
 800fb84:	2206      	movs	r2, #6
 800fb86:	4c0f      	ldr	r4, [pc, #60]	; (800fbc4 <udp_init+0x5c>)
 800fb88:	4b0f      	ldr	r3, [pc, #60]	; (800fbc8 <udp_init+0x60>)
 800fb8a:	4601      	mov	r1, r0
 800fb8c:	18a0      	adds	r0, r4, r2
 800fb8e:	801d      	strh	r5, [r3, #0]
 800fb90:	f7ff ff9e 	bl	800fad0 <memcpy.isra.0>
 800fb94:	2308      	movs	r3, #8
 800fb96:	7323      	strb	r3, [r4, #12]
 800fb98:	2345      	movs	r3, #69	; 0x45
 800fb9a:	73a3      	strb	r3, [r4, #14]
 800fb9c:	2340      	movs	r3, #64	; 0x40
 800fb9e:	7523      	strb	r3, [r4, #20]
 800fba0:	75a3      	strb	r3, [r4, #22]
 800fba2:	2311      	movs	r3, #17
 800fba4:	4630      	mov	r0, r6
 800fba6:	7365      	strb	r5, [r4, #13]
 800fba8:	73e5      	strb	r5, [r4, #15]
 800fbaa:	7565      	strb	r5, [r4, #21]
 800fbac:	75e3      	strb	r3, [r4, #23]
 800fbae:	f7ff ffbb 	bl	800fb28 <udp_set_ip>
 800fbb2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 800fbb6:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
 800fbba:	bd70      	pop	{r4, r5, r6, pc}
 800fbbc:	20003bcc 	andcs	r3, r0, ip, asr #23
 800fbc0:	20003bac 	andcs	r3, r0, ip, lsr #23
 800fbc4:	2000986c 	andcs	r9, r0, ip, ror #16
 800fbc8:	20003ba8 	andcs	r3, r0, r8, lsr #23

0800fbcc <udp_shutdown>:
 800fbcc:	4770      	bx	lr
	...

0800fbd0 <udp_handle>:
 800fbd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fbd4:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 800fbd6:	4607      	mov	r7, r0
 800fbd8:	ba5b      	rev16	r3, r3
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 800fbe0:	2a01      	cmp	r2, #1
 800fbe2:	d904      	bls.n	800fbee <udp_handle+0x1e>
 800fbe4:	2b7b      	cmp	r3, #123	; 0x7b
 800fbe6:	d002      	beq.n	800fbee <udp_handle+0x1e>
 800fbe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fbec:	d308      	bcc.n	800fc00 <udp_handle+0x30>
 800fbee:	2400      	movs	r4, #0
 800fbf0:	4a1f      	ldr	r2, [pc, #124]	; (800fc70 <udp_handle+0xa0>)
 800fbf2:	f852 1b04 	ldr.w	r1, [r2], #4
 800fbf6:	4299      	cmp	r1, r3
 800fbf8:	d005      	beq.n	800fc06 <udp_handle+0x36>
 800fbfa:	3401      	adds	r4, #1
 800fbfc:	2c08      	cmp	r4, #8
 800fbfe:	d1f8      	bne.n	800fbf2 <udp_handle+0x22>
 800fc00:	b002      	add	sp, #8
 800fc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc06:	f640 3394 	movw	r3, #2964	; 0xb94
 800fc0a:	8cfe      	ldrh	r6, [r7, #38]	; 0x26
 800fc0c:	435c      	muls	r4, r3
 800fc0e:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800fc12:	ba76      	rev16	r6, r6
 800fc14:	3e08      	subs	r6, #8
 800fc16:	b2b6      	uxth	r6, r6
 800fc18:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800fc1c:	bf28      	it	cs
 800fc1e:	f44f 66b8 	movcs.w	r6, #1472	; 0x5c0
 800fc22:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800fc74 <udp_handle+0xa4>
 800fc26:	1d20      	adds	r0, r4, #4
 800fc28:	f838 5004 	ldrh.w	r5, [r8, r4]
 800fc2c:	4632      	mov	r2, r6
 800fc2e:	435d      	muls	r5, r3
 800fc30:	4428      	add	r0, r5
 800fc32:	f107 012a 	add.w	r1, r7, #42	; 0x2a
 800fc36:	4440      	add	r0, r8
 800fc38:	f7ff ff4a 	bl	800fad0 <memcpy.isra.0>
 800fc3c:	2204      	movs	r2, #4
 800fc3e:	f107 011a 	add.w	r1, r7, #26
 800fc42:	eb0d 0002 	add.w	r0, sp, r2
 800fc46:	f7ff ff43 	bl	800fad0 <memcpy.isra.0>
 800fc4a:	9a01      	ldr	r2, [sp, #4]
 800fc4c:	192b      	adds	r3, r5, r4
 800fc4e:	4443      	add	r3, r8
 800fc50:	f8c3 25c4 	str.w	r2, [r3, #1476]	; 0x5c4
 800fc54:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fc56:	f8a3 65ca 	strh.w	r6, [r3, #1482]	; 0x5ca
 800fc5a:	ba52      	rev16	r2, r2
 800fc5c:	f8a3 25c8 	strh.w	r2, [r3, #1480]	; 0x5c8
 800fc60:	f838 3004 	ldrh.w	r3, [r8, r4]
 800fc64:	3301      	adds	r3, #1
 800fc66:	f003 0301 	and.w	r3, r3, #1
 800fc6a:	f828 3004 	strh.w	r3, [r8, r4]
 800fc6e:	e7c7      	b.n	800fc00 <udp_handle+0x30>
 800fc70:	20003bac 	andcs	r3, r0, ip, lsr #23
 800fc74:	20003bcc 	andcs	r3, r0, ip, asr #23

0800fc78 <udp_bind>:
 800fc78:	4a0a      	ldr	r2, [pc, #40]	; (800fca4 <udp_bind+0x2c>)
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	b510      	push	{r4, lr}
 800fc7e:	2000      	movs	r0, #0
 800fc80:	4614      	mov	r4, r2
 800fc82:	f852 1b04 	ldr.w	r1, [r2], #4
 800fc86:	4299      	cmp	r1, r3
 800fc88:	d008      	beq.n	800fc9c <udp_bind+0x24>
 800fc8a:	b141      	cbz	r1, 800fc9e <udp_bind+0x26>
 800fc8c:	3001      	adds	r0, #1
 800fc8e:	2808      	cmp	r0, #8
 800fc90:	d1f7      	bne.n	800fc82 <udp_bind+0xa>
 800fc92:	4805      	ldr	r0, [pc, #20]	; (800fca8 <udp_bind+0x30>)
 800fc94:	f003 fa9c 	bl	80131d0 <console_error>
 800fc98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc9c:	bd10      	pop	{r4, pc}
 800fc9e:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
 800fca2:	e7fb      	b.n	800fc9c <udp_bind+0x24>
 800fca4:	20003bac 	andcs	r3, r0, ip, lsr #23
 800fca8:	0801773d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r8, r9, sl, ip, sp, lr}

0800fcac <udp_unbind>:
 800fcac:	4a0c      	ldr	r2, [pc, #48]	; (800fce0 <udp_unbind+0x34>)
 800fcae:	2300      	movs	r3, #0
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	b510      	push	{r4, lr}
 800fcb4:	f852 4b04 	ldr.w	r4, [r2], #4
 800fcb8:	4284      	cmp	r4, r0
 800fcba:	d108      	bne.n	800fcce <udp_unbind+0x22>
 800fcbc:	2000      	movs	r0, #0
 800fcbe:	f640 3294 	movw	r2, #2964	; 0xb94
 800fcc2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 800fcc6:	4353      	muls	r3, r2
 800fcc8:	4a06      	ldr	r2, [pc, #24]	; (800fce4 <udp_unbind+0x38>)
 800fcca:	5098      	str	r0, [r3, r2]
 800fccc:	bd10      	pop	{r4, pc}
 800fcce:	3301      	adds	r3, #1
 800fcd0:	2b08      	cmp	r3, #8
 800fcd2:	d1ef      	bne.n	800fcb4 <udp_unbind+0x8>
 800fcd4:	4804      	ldr	r0, [pc, #16]	; (800fce8 <udp_unbind+0x3c>)
 800fcd6:	f003 fa7b 	bl	80131d0 <console_error>
 800fcda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcde:	e7f5      	b.n	800fccc <udp_unbind+0x20>
 800fce0:	20003bac 	andcs	r3, r0, ip, lsr #23
 800fce4:	20003bcc 	andcs	r3, r0, ip, asr #23
 800fce8:	08017742 	stmdaeq	r1, {r1, r6, r8, r9, sl, ip, sp, lr}

0800fcec <udp_recv>:
 800fcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	4698      	mov	r8, r3
 800fcf4:	f640 3394 	movw	r3, #2964	; 0xb94
 800fcf8:	435c      	muls	r4, r3
 800fcfa:	4608      	mov	r0, r1
 800fcfc:	4915      	ldr	r1, [pc, #84]	; (800fd54 <udp_recv+0x68>)
 800fcfe:	190f      	adds	r7, r1, r4
 800fd00:	f8b7 c002 	ldrh.w	ip, [r7, #2]
 800fd04:	5b0b      	ldrh	r3, [r1, r4]
 800fd06:	4563      	cmp	r3, ip
 800fd08:	d021      	beq.n	800fd4e <udp_recv+0x62>
 800fd0a:	f44f 63b9 	mov.w	r3, #1480	; 0x5c8
 800fd0e:	fb03 fc0c 	mul.w	ip, r3, ip
 800fd12:	eb0c 0604 	add.w	r6, ip, r4
 800fd16:	440e      	add	r6, r1
 800fd18:	f8b6 55ca 	ldrh.w	r5, [r6, #1482]	; 0x5ca
 800fd1c:	3404      	adds	r4, #4
 800fd1e:	4295      	cmp	r5, r2
 800fd20:	bf28      	it	cs
 800fd22:	4615      	movcs	r5, r2
 800fd24:	4464      	add	r4, ip
 800fd26:	462a      	mov	r2, r5
 800fd28:	4421      	add	r1, r4
 800fd2a:	f7ff fedb 	bl	800fae4 <net_memcpy>
 800fd2e:	f8d6 35c4 	ldr.w	r3, [r6, #1476]	; 0x5c4
 800fd32:	f8c8 3000 	str.w	r3, [r8]
 800fd36:	f8b6 25c8 	ldrh.w	r2, [r6, #1480]	; 0x5c8
 800fd3a:	9b06      	ldr	r3, [sp, #24]
 800fd3c:	801a      	strh	r2, [r3, #0]
 800fd3e:	887b      	ldrh	r3, [r7, #2]
 800fd40:	3301      	adds	r3, #1
 800fd42:	f003 0301 	and.w	r3, r3, #1
 800fd46:	807b      	strh	r3, [r7, #2]
 800fd48:	4628      	mov	r0, r5
 800fd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd4e:	2500      	movs	r5, #0
 800fd50:	e7fa      	b.n	800fd48 <udp_recv+0x5c>
 800fd52:	bf00      	nop
 800fd54:	20003bcc 	andcs	r3, r0, ip, asr #23

0800fd58 <udp_recv2>:
 800fd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd5a:	f640 3594 	movw	r5, #2964	; 0xb94
 800fd5e:	4368      	muls	r0, r5
 800fd60:	4c0f      	ldr	r4, [pc, #60]	; (800fda0 <udp_recv2+0x48>)
 800fd62:	1827      	adds	r7, r4, r0
 800fd64:	887d      	ldrh	r5, [r7, #2]
 800fd66:	5a26      	ldrh	r6, [r4, r0]
 800fd68:	42ae      	cmp	r6, r5
 800fd6a:	d017      	beq.n	800fd9c <udp_recv2+0x44>
 800fd6c:	f44f 6cb9 	mov.w	ip, #1480	; 0x5c8
 800fd70:	fb0c f505 	mul.w	r5, ip, r5
 800fd74:	1d06      	adds	r6, r0, #4
 800fd76:	442e      	add	r6, r5
 800fd78:	4405      	add	r5, r0
 800fd7a:	4426      	add	r6, r4
 800fd7c:	442c      	add	r4, r5
 800fd7e:	600e      	str	r6, [r1, #0]
 800fd80:	f8d4 15c4 	ldr.w	r1, [r4, #1476]	; 0x5c4
 800fd84:	6011      	str	r1, [r2, #0]
 800fd86:	f8b4 25c8 	ldrh.w	r2, [r4, #1480]	; 0x5c8
 800fd8a:	801a      	strh	r2, [r3, #0]
 800fd8c:	887b      	ldrh	r3, [r7, #2]
 800fd8e:	f8b4 05ca 	ldrh.w	r0, [r4, #1482]	; 0x5ca
 800fd92:	3301      	adds	r3, #1
 800fd94:	f003 0301 	and.w	r3, r3, #1
 800fd98:	807b      	strh	r3, [r7, #2]
 800fd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	e7fc      	b.n	800fd9a <udp_recv2+0x42>
 800fda0:	20003bcc 	andcs	r3, r0, ip, asr #23

0800fda4 <udp_send>:
 800fda4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800fda8:	f8df 9134 	ldr.w	r9, [pc, #308]	; 800fee0 <udp_send+0x13c>
 800fdac:	461c      	mov	r4, r3
 800fdae:	f859 3020 	ldr.w	r3, [r9, r0, lsl #2]
 800fdb2:	4607      	mov	r7, r0
 800fdb4:	4688      	mov	r8, r1
 800fdb6:	4616      	mov	r6, r2
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	f000 808e 	beq.w	800feda <udp_send+0x136>
 800fdbe:	1c63      	adds	r3, r4, #1
 800fdc0:	d144      	bne.n	800fe4c <udp_send+0xa8>
 800fdc2:	4848      	ldr	r0, [pc, #288]	; (800fee4 <udp_send+0x140>)
 800fdc4:	2107      	movs	r1, #7
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	23ff      	movs	r3, #255	; 0xff
 800fdca:	e001      	b.n	800fdd0 <udp_send+0x2c>
 800fdcc:	f800 3b01 	strb.w	r3, [r0], #1
 800fdd0:	3901      	subs	r1, #1
 800fdd2:	d1fb      	bne.n	800fdcc <udp_send+0x28>
 800fdd4:	7793      	strb	r3, [r2, #30]
 800fdd6:	77d3      	strb	r3, [r2, #31]
 800fdd8:	f882 3020 	strb.w	r3, [r2, #32]
 800fddc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
 800fde0:	2500      	movs	r5, #0
 800fde2:	f8df a104 	ldr.w	sl, [pc, #260]	; 800fee8 <udp_send+0x144>
 800fde6:	4c3f      	ldr	r4, [pc, #252]	; (800fee4 <udp_send+0x140>)
 800fde8:	f8ba 3000 	ldrh.w	r3, [sl]
 800fdec:	2114      	movs	r1, #20
 800fdee:	8263      	strh	r3, [r4, #18]
 800fdf0:	f106 031c 	add.w	r3, r6, #28
 800fdf4:	ba5b      	rev16	r3, r3
 800fdf6:	f104 000e 	add.w	r0, r4, #14
 800fdfa:	8223      	strh	r3, [r4, #16]
 800fdfc:	7625      	strb	r5, [r4, #24]
 800fdfe:	7665      	strb	r5, [r4, #25]
 800fe00:	f001 fecc 	bl	8011b9c <net_chksum>
 800fe04:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
 800fe08:	f5b6 6fb8 	cmp.w	r6, #1472	; 0x5c0
 800fe0c:	ba5b      	rev16	r3, r3
 800fe0e:	8463      	strh	r3, [r4, #34]	; 0x22
 800fe10:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 800fe14:	4632      	mov	r2, r6
 800fe16:	ba5b      	rev16	r3, r3
 800fe18:	84a3      	strh	r3, [r4, #36]	; 0x24
 800fe1a:	f106 0308 	add.w	r3, r6, #8
 800fe1e:	ba5b      	rev16	r3, r3
 800fe20:	bf28      	it	cs
 800fe22:	f44f 62b8 	movcs.w	r2, #1472	; 0x5c0
 800fe26:	4641      	mov	r1, r8
 800fe28:	8320      	strh	r0, [r4, #24]
 800fe2a:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 800fe2e:	84e3      	strh	r3, [r4, #38]	; 0x26
 800fe30:	f7ff fe58 	bl	800fae4 <net_memcpy>
 800fe34:	4620      	mov	r0, r4
 800fe36:	f106 012a 	add.w	r1, r6, #42	; 0x2a
 800fe3a:	f004 fdf1 	bl	8014a20 <emac_eth_send>
 800fe3e:	f8ba 3000 	ldrh.w	r3, [sl]
 800fe42:	4628      	mov	r0, r5
 800fe44:	3301      	adds	r3, #1
 800fe46:	f8aa 3000 	strh.w	r3, [sl]
 800fe4a:	e037      	b.n	800febc <udp_send+0x118>
 800fe4c:	4b27      	ldr	r3, [pc, #156]	; (800feec <udp_send+0x148>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	43a3      	bics	r3, r4
 800fe52:	d10f      	bne.n	800fe74 <udp_send+0xd0>
 800fe54:	2307      	movs	r3, #7
 800fe56:	21ff      	movs	r1, #255	; 0xff
 800fe58:	4a22      	ldr	r2, [pc, #136]	; (800fee4 <udp_send+0x140>)
 800fe5a:	e001      	b.n	800fe60 <udp_send+0xbc>
 800fe5c:	f802 1b01 	strb.w	r1, [r2], #1
 800fe60:	3b01      	subs	r3, #1
 800fe62:	d1fb      	bne.n	800fe5c <udp_send+0xb8>
 800fe64:	2204      	movs	r2, #4
 800fe66:	4822      	ldr	r0, [pc, #136]	; (800fef0 <udp_send+0x14c>)
 800fe68:	eb0d 0102 	add.w	r1, sp, r2
 800fe6c:	9401      	str	r4, [sp, #4]
 800fe6e:	f7ff fe2f 	bl	800fad0 <memcpy.isra.0>
 800fe72:	e7b5      	b.n	800fde0 <udp_send+0x3c>
 800fe74:	f004 03e0 	and.w	r3, r4, #224	; 0xe0
 800fe78:	2be0      	cmp	r3, #224	; 0xe0
 800fe7a:	d10e      	bne.n	800fe9a <udp_send+0xf6>
 800fe7c:	491d      	ldr	r1, [pc, #116]	; (800fef4 <udp_send+0x150>)
 800fe7e:	f3c4 2306 	ubfx	r3, r4, #8, #7
 800fe82:	70cb      	strb	r3, [r1, #3]
 800fe84:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800fe88:	710b      	strb	r3, [r1, #4]
 800fe8a:	f3c4 6307 	ubfx	r3, r4, #24, #8
 800fe8e:	2206      	movs	r2, #6
 800fe90:	4814      	ldr	r0, [pc, #80]	; (800fee4 <udp_send+0x140>)
 800fe92:	714b      	strb	r3, [r1, #5]
 800fe94:	f7ff fe1c 	bl	800fad0 <memcpy.isra.0>
 800fe98:	e7e4      	b.n	800fe64 <udp_send+0xc0>
 800fe9a:	4b17      	ldr	r3, [pc, #92]	; (800fef8 <udp_send+0x154>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	43a3      	bics	r3, r4
 800fea0:	d00f      	beq.n	800fec2 <udp_send+0x11e>
 800fea2:	4d16      	ldr	r5, [pc, #88]	; (800fefc <udp_send+0x158>)
 800fea4:	490f      	ldr	r1, [pc, #60]	; (800fee4 <udp_send+0x140>)
 800fea6:	6828      	ldr	r0, [r5, #0]
 800fea8:	f001 fa42 	bl	8011330 <arp_cache_lookup>
 800feac:	682b      	ldr	r3, [r5, #0]
 800feae:	4298      	cmp	r0, r3
 800feb0:	d0d8      	beq.n	800fe64 <udp_send+0xc0>
 800feb2:	4813      	ldr	r0, [pc, #76]	; (800ff00 <udp_send+0x15c>)
 800feb4:	f003 f98c 	bl	80131d0 <console_error>
 800feb8:	f06f 0002 	mvn.w	r0, #2
 800febc:	b002      	add	sp, #8
 800febe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fec2:	4620      	mov	r0, r4
 800fec4:	4907      	ldr	r1, [pc, #28]	; (800fee4 <udp_send+0x140>)
 800fec6:	f001 fa33 	bl	8011330 <arp_cache_lookup>
 800feca:	42a0      	cmp	r0, r4
 800fecc:	d0ca      	beq.n	800fe64 <udp_send+0xc0>
 800fece:	480d      	ldr	r0, [pc, #52]	; (800ff04 <udp_send+0x160>)
 800fed0:	f003 f97e 	bl	80131d0 <console_error>
 800fed4:	f06f 0001 	mvn.w	r0, #1
 800fed8:	e7f0      	b.n	800febc <udp_send+0x118>
 800feda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fede:	e7ed      	b.n	800febc <udp_send+0x118>
 800fee0:	20003bac 	andcs	r3, r0, ip, lsr #23
 800fee4:	2000986c 	andcs	r9, r0, ip, ror #16
 800fee8:	20003ba8 	andcs	r3, r0, r8, lsr #23
 800feec:	20003b9c 	mulcs	r0, ip, fp
 800fef0:	2000988a 	andcs	r9, r0, sl, lsl #17
 800fef4:	20000000 	andcs	r0, r0, r0
 800fef8:	20003ba4 	andcs	r3, r0, r4, lsr #23
 800fefc:	20003ba0 	andcs	r3, r0, r0, lsr #23
 800ff00:	0801774a 	stmdaeq	r1, {r1, r3, r6, r8, r9, sl, ip, sp, lr}
 800ff04:	08017770 	stmdaeq	r1, {r4, r5, r6, r8, r9, sl, ip, sp, lr}

0800ff08 <strlen>:
 800ff08:	4603      	mov	r3, r0
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	7811      	ldrb	r1, [r2, #0]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	2900      	cmp	r1, #0
 800ff12:	d1fa      	bne.n	800ff0a <strlen+0x2>
 800ff14:	1a10      	subs	r0, r2, r0
 800ff16:	4770      	bx	lr

0800ff18 <strcmp>:
 800ff18:	1e43      	subs	r3, r0, #1
 800ff1a:	3901      	subs	r1, #1
 800ff1c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ff20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ff24:	4290      	cmp	r0, r2
 800ff26:	d102      	bne.n	800ff2e <strcmp+0x16>
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	d1f7      	bne.n	800ff1c <strcmp+0x4>
 800ff2c:	4770      	bx	lr
 800ff2e:	1a80      	subs	r0, r0, r2
 800ff30:	4770      	bx	lr

0800ff32 <strcpy.isra.0>:
 800ff32:	3801      	subs	r0, #1
 800ff34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff38:	f800 3f01 	strb.w	r3, [r0, #1]!
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d1f9      	bne.n	800ff34 <strcpy.isra.0+0x2>
 800ff40:	4770      	bx	lr

0800ff42 <strcat.isra.0>:
 800ff42:	b538      	push	{r3, r4, r5, lr}
 800ff44:	4604      	mov	r4, r0
 800ff46:	460d      	mov	r5, r1
 800ff48:	f7ff ffde 	bl	800ff08 <strlen>
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	4420      	add	r0, r4
 800ff50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff54:	f7ff bfed 	b.w	800ff32 <strcpy.isra.0>

0800ff58 <MDNS::MDNS()>:
 800ff58:	b513      	push	{r0, r1, r4, lr}
 800ff5a:	4604      	mov	r4, r0
 800ff5c:	a901      	add	r1, sp, #4
 800ff5e:	4804      	ldr	r0, [pc, #16]	; (800ff70 <MDNS::MDNS()+0x18>)
 800ff60:	f003 fa9e 	bl	80134a0 <inet_aton>
 800ff64:	4620      	mov	r0, r4
 800ff66:	4b03      	ldr	r3, [pc, #12]	; (800ff74 <MDNS::MDNS()+0x1c>)
 800ff68:	9a01      	ldr	r2, [sp, #4]
 800ff6a:	601a      	str	r2, [r3, #0]
 800ff6c:	b002      	add	sp, #8
 800ff6e:	bd10      	pop	{r4, pc}
 800ff70:	08017790 	stmdaeq	r1, {r4, r7, r8, r9, sl, ip, sp, lr}
 800ff74:	20009e60 	andcs	r9, r0, r0, ror #28

0800ff78 <MDNS::SetName(char const*)>:
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	4d0b      	ldr	r5, [pc, #44]	; (800ffa8 <MDNS::SetName(char const*)+0x30>)
 800ff7c:	460c      	mov	r4, r1
 800ff7e:	6828      	ldr	r0, [r5, #0]
 800ff80:	b108      	cbz	r0, 800ff86 <MDNS::SetName(char const*)+0xe>
 800ff82:	f003 fa87 	bl	8013494 <operator delete[](void*)>
 800ff86:	4620      	mov	r0, r4
 800ff88:	f7ff ffbe 	bl	800ff08 <strlen>
 800ff8c:	3007      	adds	r0, #7
 800ff8e:	f003 fa85 	bl	801349c <operator new[](unsigned int)>
 800ff92:	4621      	mov	r1, r4
 800ff94:	6028      	str	r0, [r5, #0]
 800ff96:	f7ff ffcc 	bl	800ff32 <strcpy.isra.0>
 800ff9a:	6828      	ldr	r0, [r5, #0]
 800ff9c:	4903      	ldr	r1, [pc, #12]	; (800ffac <MDNS::SetName(char const*)+0x34>)
 800ff9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ffa2:	f7ff bfce 	b.w	800ff42 <strcat.isra.0>
 800ffa6:	bf00      	nop
 800ffa8:	2000a290 	mulcs	r0, r0, r2
 800ffac:	080177a0 	stmdaeq	r1, {r5, r7, r8, r9, sl, ip, sp, lr}

0800ffb0 <MDNS::DecodeDNSNameNotation(char const*, char*)>:
 800ffb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ffb4:	f04f 0e00 	mov.w	lr, #0
 800ffb8:	262e      	movs	r6, #46	; 0x2e
 800ffba:	4675      	mov	r5, lr
 800ffbc:	4694      	mov	ip, r2
 800ffbe:	4f1d      	ldr	r7, [pc, #116]	; (8010034 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x84>)
 800ffc0:	4a1d      	ldr	r2, [pc, #116]	; (8010038 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x88>)
 800ffc2:	780b      	ldrb	r3, [r1, #0]
 800ffc4:	1c68      	adds	r0, r5, #1
 800ffc6:	b383      	cbz	r3, 801002a <MDNS::DecodeDNSNameNotation(char const*, char*)+0x7a>
 800ffc8:	2b3f      	cmp	r3, #63	; 0x3f
 800ffca:	d91d      	bls.n	8010008 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x58>
 800ffcc:	f1be 0f00 	cmp.w	lr, #0
 800ffd0:	bf08      	it	eq
 800ffd2:	4605      	moveq	r5, r0
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	7849      	ldrb	r1, [r1, #1]
 800ffd8:	ea07 2303 	and.w	r3, r7, r3, lsl #8
 800ffdc:	430b      	orrs	r3, r1
 800ffde:	6811      	ldr	r1, [r2, #0]
 800ffe0:	5ccc      	ldrb	r4, [r1, r3]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	440b      	add	r3, r1
 800ffe6:	42a0      	cmp	r0, r4
 800ffe8:	5c19      	ldrb	r1, [r3, r0]
 800ffea:	d309      	bcc.n	8010000 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x50>
 800ffec:	f04f 0e01 	mov.w	lr, #1
 800fff0:	1919      	adds	r1, r3, r4
 800fff2:	4464      	add	r4, ip
 800fff4:	780b      	ldrb	r3, [r1, #0]
 800fff6:	b10b      	cbz	r3, 800fffc <MDNS::DecodeDNSNameNotation(char const*, char*)+0x4c>
 800fff8:	f804 6b01 	strb.w	r6, [r4], #1
 800fffc:	46a4      	mov	ip, r4
 800fffe:	e7e0      	b.n	800ffc2 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x12>
 8010000:	f80c 1000 	strb.w	r1, [ip, r0]
 8010004:	3001      	adds	r0, #1
 8010006:	e7ee      	b.n	800ffe6 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x36>
 8010008:	4688      	mov	r8, r1
 801000a:	eb0c 0403 	add.w	r4, ip, r3
 801000e:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8010012:	f80c 9b01 	strb.w	r9, [ip], #1
 8010016:	4564      	cmp	r4, ip
 8010018:	d1f9      	bne.n	801000e <MDNS::DecodeDNSNameNotation(char const*, char*)+0x5e>
 801001a:	f103 0c01 	add.w	ip, r3, #1
 801001e:	4461      	add	r1, ip
 8010020:	f1be 0f00 	cmp.w	lr, #0
 8010024:	d1e6      	bne.n	800fff4 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 8010026:	18c5      	adds	r5, r0, r3
 8010028:	e7e4      	b.n	800fff4 <MDNS::DecodeDNSNameNotation(char const*, char*)+0x44>
 801002a:	f88c 3000 	strb.w	r3, [ip]
 801002e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010032:	bf00      	nop
 8010034:	ffff3f00 			; <UNDEFINED> instruction: 0xffff3f00
 8010038:	2000a294 	mulcs	r0, r4, r2

0801003c <MDNS::FindFirstDotFromRight(char const*) const>:
 801003c:	b510      	push	{r4, lr}
 801003e:	4608      	mov	r0, r1
 8010040:	460c      	mov	r4, r1
 8010042:	f7ff ff61 	bl	800ff08 <strlen>
 8010046:	4420      	add	r0, r4
 8010048:	42a0      	cmp	r0, r4
 801004a:	d903      	bls.n	8010054 <MDNS::FindFirstDotFromRight(char const*) const+0x18>
 801004c:	f810 3901 	ldrb.w	r3, [r0], #-1
 8010050:	2b2e      	cmp	r3, #46	; 0x2e
 8010052:	d1f9      	bne.n	8010048 <MDNS::FindFirstDotFromRight(char const*) const+0xc>
 8010054:	3001      	adds	r0, #1
 8010056:	bd10      	pop	{r4, pc}

08010058 <MDNS::WriteDnsName(char const*, char*, bool)>:
 8010058:	4610      	mov	r0, r2
 801005a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801005c:	460f      	mov	r7, r1
 801005e:	1c44      	adds	r4, r0, #1
 8010060:	463d      	mov	r5, r7
 8010062:	f817 6b01 	ldrb.w	r6, [r7], #1
 8010066:	b126      	cbz	r6, 8010072 <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 8010068:	2e2e      	cmp	r6, #46	; 0x2e
 801006a:	d002      	beq.n	8010072 <MDNS::WriteDnsName(char const*, char*, bool)+0x1a>
 801006c:	f804 6b01 	strb.w	r6, [r4], #1
 8010070:	e7f6      	b.n	8010060 <MDNS::WriteDnsName(char const*, char*, bool)+0x8>
 8010072:	1a69      	subs	r1, r5, r1
 8010074:	7001      	strb	r1, [r0, #0]
 8010076:	7829      	ldrb	r1, [r5, #0]
 8010078:	b921      	cbnz	r1, 8010084 <MDNS::WriteDnsName(char const*, char*, bool)+0x2c>
 801007a:	b10b      	cbz	r3, 8010080 <MDNS::WriteDnsName(char const*, char*, bool)+0x28>
 801007c:	f804 1b01 	strb.w	r1, [r4], #1
 8010080:	1aa0      	subs	r0, r4, r2
 8010082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010084:	4620      	mov	r0, r4
 8010086:	1c69      	adds	r1, r5, #1
 8010088:	e7e8      	b.n	801005c <MDNS::WriteDnsName(char const*, char*, bool)+0x4>
	...

0801008c <MDNS::CreateAnswerLocalIpAddress()>:
 801008c:	2384      	movs	r3, #132	; 0x84
 801008e:	b510      	push	{r4, lr}
 8010090:	4c0f      	ldr	r4, [pc, #60]	; (80100d0 <MDNS::CreateAnswerLocalIpAddress()+0x44>)
 8010092:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010096:	80e3      	strh	r3, [r4, #6]
 8010098:	2300      	movs	r3, #0
 801009a:	490e      	ldr	r1, [pc, #56]	; (80100d4 <MDNS::CreateAnswerLocalIpAddress()+0x48>)
 801009c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80100a0:	6809      	ldr	r1, [r1, #0]
 80100a2:	f104 0210 	add.w	r2, r4, #16
 80100a6:	2301      	movs	r3, #1
 80100a8:	f7ff ffd6 	bl	8010058 <MDNS::WriteDnsName(char const*, char*, bool)>
 80100ac:	490a      	ldr	r1, [pc, #40]	; (80100d8 <MDNS::CreateAnswerLocalIpAddress()+0x4c>)
 80100ae:	1813      	adds	r3, r2, r0
 80100b0:	5011      	str	r1, [r2, r0]
 80100b2:	f04f 42f0 	mov.w	r2, #2013265920	; 0x78000000
 80100b6:	605a      	str	r2, [r3, #4]
 80100b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80100bc:	811a      	strh	r2, [r3, #8]
 80100be:	4a07      	ldr	r2, [pc, #28]	; (80100dc <MDNS::CreateAnswerLocalIpAddress()+0x50>)
 80100c0:	6812      	ldr	r2, [r2, #0]
 80100c2:	6912      	ldr	r2, [r2, #16]
 80100c4:	f8c3 200a 	str.w	r2, [r3, #10]
 80100c8:	1b1b      	subs	r3, r3, r4
 80100ca:	330a      	adds	r3, #10
 80100cc:	6023      	str	r3, [r4, #0]
 80100ce:	bd10      	pop	{r4, pc}
 80100d0:	20009e64 	andcs	r9, r0, r4, ror #28
 80100d4:	2000a290 	mulcs	r0, r0, r2
 80100d8:	01800100 	orreq	r0, r0, r0, lsl #2
 80100dc:	2000a298 	mulcs	r0, r8, r2

080100e0 <MDNS::Start()>:
 80100e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80100e2:	4c1e      	ldr	r4, [pc, #120]	; (801015c <MDNS::Start()+0x7c>)
 80100e4:	f241 41e9 	movw	r1, #5353	; 0x14e9
 80100e8:	4605      	mov	r5, r0
 80100ea:	6820      	ldr	r0, [r4, #0]
 80100ec:	f000 fb2a 	bl	8010744 <Network::Begin(unsigned short)>
 80100f0:	4e1b      	ldr	r6, [pc, #108]	; (8010160 <MDNS::Start()+0x80>)
 80100f2:	4f1c      	ldr	r7, [pc, #112]	; (8010164 <MDNS::Start()+0x84>)
 80100f4:	4601      	mov	r1, r0
 80100f6:	6030      	str	r0, [r6, #0]
 80100f8:	683a      	ldr	r2, [r7, #0]
 80100fa:	6820      	ldr	r0, [r4, #0]
 80100fc:	f000 fb33 	bl	8010766 <Network::JoinGroup(int, unsigned int)>
 8010100:	4b19      	ldr	r3, [pc, #100]	; (8010168 <MDNS::Start()+0x88>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	b923      	cbnz	r3, 8010110 <MDNS::Start()+0x30>
 8010106:	6821      	ldr	r1, [r4, #0]
 8010108:	4628      	mov	r0, r5
 801010a:	311c      	adds	r1, #28
 801010c:	f7ff ff34 	bl	800ff78 <MDNS::SetName(char const*)>
 8010110:	4628      	mov	r0, r5
 8010112:	f7ff ffbb 	bl	801008c <MDNS::CreateAnswerLocalIpAddress()>
 8010116:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801011a:	4914      	ldr	r1, [pc, #80]	; (801016c <MDNS::Start()+0x8c>)
 801011c:	7830      	ldrb	r0, [r6, #0]
 801011e:	f851 2b04 	ldr.w	r2, [r1], #4
 8010122:	9300      	str	r3, [sp, #0]
 8010124:	b292      	uxth	r2, r2
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	f7ff fe3c 	bl	800fda4 <udp_send>
 801012c:	223f      	movs	r2, #63	; 0x3f
 801012e:	6820      	ldr	r0, [r4, #0]
 8010130:	4c0f      	ldr	r4, [pc, #60]	; (8010170 <MDNS::Start()+0x90>)
 8010132:	f100 035c 	add.w	r3, r0, #92	; 0x5c
 8010136:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 801013a:	b929      	cbnz	r1, 8010148 <MDNS::Start()+0x68>
 801013c:	441a      	add	r2, r3
 801013e:	4293      	cmp	r3, r2
 8010140:	d006      	beq.n	8010150 <MDNS::Start()+0x70>
 8010142:	f803 1b01 	strb.w	r1, [r3], #1
 8010146:	e7fa      	b.n	801013e <MDNS::Start()+0x5e>
 8010148:	3a01      	subs	r2, #1
 801014a:	f803 1b01 	strb.w	r1, [r3], #1
 801014e:	d1f2      	bne.n	8010136 <MDNS::Start()+0x56>
 8010150:	2300      	movs	r3, #0
 8010152:	f880 309b 	strb.w	r3, [r0, #155]	; 0x9b
 8010156:	b003      	add	sp, #12
 8010158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801015a:	bf00      	nop
 801015c:	2000a298 	mulcs	r0, r8, r2
 8010160:	20000008 	andcs	r0, r0, r8
 8010164:	20009e60 	andcs	r9, r0, r0, ror #28
 8010168:	2000a290 	mulcs	r0, r0, r2
 801016c:	20009e64 	andcs	r9, r0, r4, ror #28
 8010170:	080177a0 	stmdaeq	r1, {r5, r7, r8, r9, sl, ip, sp, lr}

08010174 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>:
 8010174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010178:	4c1b      	ldr	r4, [pc, #108]	; (80101e8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x74>)
 801017a:	ea4f 1c01 	mov.w	ip, r1, lsl #4
 801017e:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 8010182:	2300      	movs	r3, #0
 8010184:	f854 100c 	ldr.w	r1, [r4, ip]
 8010188:	4607      	mov	r7, r0
 801018a:	f7ff ff65 	bl	8010058 <MDNS::WriteDnsName(char const*, char*, bool)>
 801018e:	2301      	movs	r3, #1
 8010190:	7bac      	ldrb	r4, [r5, #14]
 8010192:	4616      	mov	r6, r2
 8010194:	4915      	ldr	r1, [pc, #84]	; (80101ec <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x78>)
 8010196:	4402      	add	r2, r0
 8010198:	4815      	ldr	r0, [pc, #84]	; (80101f0 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x7c>)
 801019a:	429c      	cmp	r4, r3
 801019c:	bf18      	it	ne
 801019e:	4601      	movne	r1, r0
 80101a0:	4638      	mov	r0, r7
 80101a2:	f7ff ff59 	bl	8010058 <MDNS::WriteDnsName(char const*, char*, bool)>
 80101a6:	4b13      	ldr	r3, [pc, #76]	; (80101f4 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x80>)
 80101a8:	1814      	adds	r4, r2, r0
 80101aa:	5013      	str	r3, [r2, r0]
 80101ac:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 80101b0:	6063      	str	r3, [r4, #4]
 80101b2:	4b11      	ldr	r3, [pc, #68]	; (80101f8 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)+0x84>)
 80101b4:	f8d3 8000 	ldr.w	r8, [r3]
 80101b8:	4640      	mov	r0, r8
 80101ba:	f7ff fea5 	bl	800ff08 <strlen>
 80101be:	f100 0308 	add.w	r3, r0, #8
 80101c2:	ba5b      	rev16	r3, r3
 80101c4:	8123      	strh	r3, [r4, #8]
 80101c6:	2300      	movs	r3, #0
 80101c8:	f8c4 300a 	str.w	r3, [r4, #10]
 80101cc:	89ab      	ldrh	r3, [r5, #12]
 80101ce:	f104 0210 	add.w	r2, r4, #16
 80101d2:	ba5b      	rev16	r3, r3
 80101d4:	81e3      	strh	r3, [r4, #14]
 80101d6:	4641      	mov	r1, r8
 80101d8:	2301      	movs	r3, #1
 80101da:	4638      	mov	r0, r7
 80101dc:	f7ff ff3c 	bl	8010058 <MDNS::WriteDnsName(char const*, char*, bool)>
 80101e0:	4410      	add	r0, r2
 80101e2:	1b80      	subs	r0, r0, r6
 80101e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101e8:	2000a068 	andcs	sl, r0, r8, rrx
 80101ec:	0801779c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
 80101f0:	080177b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 80101f4:	01802100 	orreq	r2, r0, r0, lsl #2
 80101f8:	2000a290 	mulcs	r0, r0, r2

080101fc <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>:
 80101fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010200:	4e19      	ldr	r6, [pc, #100]	; (8010268 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x6c>)
 8010202:	010f      	lsls	r7, r1, #4
 8010204:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 8010208:	2300      	movs	r3, #0
 801020a:	59f1      	ldr	r1, [r6, r7]
 801020c:	4604      	mov	r4, r0
 801020e:	f7ff ff23 	bl	8010058 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010212:	2301      	movs	r3, #1
 8010214:	7bae      	ldrb	r6, [r5, #14]
 8010216:	4690      	mov	r8, r2
 8010218:	4914      	ldr	r1, [pc, #80]	; (801026c <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x70>)
 801021a:	4402      	add	r2, r0
 801021c:	4814      	ldr	r0, [pc, #80]	; (8010270 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x74>)
 801021e:	429e      	cmp	r6, r3
 8010220:	bf18      	it	ne
 8010222:	4601      	movne	r1, r0
 8010224:	4620      	mov	r0, r4
 8010226:	f7ff ff17 	bl	8010058 <MDNS::WriteDnsName(char const*, char*, bool)>
 801022a:	4b12      	ldr	r3, [pc, #72]	; (8010274 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x78>)
 801022c:	1816      	adds	r6, r2, r0
 801022e:	5013      	str	r3, [r2, r0]
 8010230:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010234:	68a8      	ldr	r0, [r5, #8]
 8010236:	6073      	str	r3, [r6, #4]
 8010238:	f106 040b 	add.w	r4, r6, #11
 801023c:	b938      	cbnz	r0, 801024e <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x52>
 801023e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010242:	72b0      	strb	r0, [r6, #10]
 8010244:	8133      	strh	r3, [r6, #8]
 8010246:	eba4 0008 	sub.w	r0, r4, r8
 801024a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801024e:	f7ff fe5b 	bl	800ff08 <strlen>
 8010252:	4607      	mov	r7, r0
 8010254:	1c43      	adds	r3, r0, #1
 8010256:	72b0      	strb	r0, [r6, #10]
 8010258:	ba5b      	rev16	r3, r3
 801025a:	4620      	mov	r0, r4
 801025c:	68a9      	ldr	r1, [r5, #8]
 801025e:	8133      	strh	r3, [r6, #8]
 8010260:	f7ff fe67 	bl	800ff32 <strcpy.isra.0>
 8010264:	443c      	add	r4, r7
 8010266:	e7ee      	b.n	8010246 <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)+0x4a>
 8010268:	2000a068 	andcs	sl, r0, r8, rrx
 801026c:	0801779c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
 8010270:	080177b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 8010274:	01801000 	orreq	r1, r0, r0

08010278 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>:
 8010278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801027c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80102e0 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x68>
 8010280:	ea4f 1901 	mov.w	r9, r1, lsl #4
 8010284:	eb08 1501 	add.w	r5, r8, r1, lsl #4
 8010288:	6869      	ldr	r1, [r5, #4]
 801028a:	2301      	movs	r3, #1
 801028c:	4607      	mov	r7, r0
 801028e:	f7ff fee3 	bl	8010058 <MDNS::WriteDnsName(char const*, char*, bool)>
 8010292:	4b14      	ldr	r3, [pc, #80]	; (80102e4 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x6c>)
 8010294:	f858 8009 	ldr.w	r8, [r8, r9]
 8010298:	5013      	str	r3, [r2, r0]
 801029a:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 801029e:	1816      	adds	r6, r2, r0
 80102a0:	6073      	str	r3, [r6, #4]
 80102a2:	4640      	mov	r0, r8
 80102a4:	4614      	mov	r4, r2
 80102a6:	f7ff fe2f 	bl	800ff08 <strlen>
 80102aa:	f100 030d 	add.w	r3, r0, #13
 80102ae:	ba5b      	rev16	r3, r3
 80102b0:	4641      	mov	r1, r8
 80102b2:	8133      	strh	r3, [r6, #8]
 80102b4:	f106 020a 	add.w	r2, r6, #10
 80102b8:	2300      	movs	r3, #0
 80102ba:	4638      	mov	r0, r7
 80102bc:	f7ff fecc 	bl	8010058 <MDNS::WriteDnsName(char const*, char*, bool)>
 80102c0:	2301      	movs	r3, #1
 80102c2:	4402      	add	r2, r0
 80102c4:	7bad      	ldrb	r5, [r5, #14]
 80102c6:	4808      	ldr	r0, [pc, #32]	; (80102e8 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x70>)
 80102c8:	4908      	ldr	r1, [pc, #32]	; (80102ec <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)+0x74>)
 80102ca:	429d      	cmp	r5, r3
 80102cc:	bf18      	it	ne
 80102ce:	4601      	movne	r1, r0
 80102d0:	4638      	mov	r0, r7
 80102d2:	f7ff fec1 	bl	8010058 <MDNS::WriteDnsName(char const*, char*, bool)>
 80102d6:	4410      	add	r0, r2
 80102d8:	1b00      	subs	r0, r0, r4
 80102da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102de:	bf00      	nop
 80102e0:	2000a068 	andcs	sl, r0, r8, rrx
 80102e4:	01000c00 	tsteq	r0, r0, lsl #24
 80102e8:	080177b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 80102ec:	0801779c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}

080102f0 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>:
 80102f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f2:	460f      	mov	r7, r1
 80102f4:	2301      	movs	r3, #1
 80102f6:	490f      	ldr	r1, [pc, #60]	; (8010334 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x44>)
 80102f8:	4606      	mov	r6, r0
 80102fa:	f7ff fead 	bl	8010058 <MDNS::WriteDnsName(char const*, char*, bool)>
 80102fe:	4b0e      	ldr	r3, [pc, #56]	; (8010338 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x48>)
 8010300:	490e      	ldr	r1, [pc, #56]	; (801033c <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)+0x4c>)
 8010302:	5013      	str	r3, [r2, r0]
 8010304:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8010308:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 801030c:	684f      	ldr	r7, [r1, #4]
 801030e:	1815      	adds	r5, r2, r0
 8010310:	606b      	str	r3, [r5, #4]
 8010312:	4638      	mov	r0, r7
 8010314:	4614      	mov	r4, r2
 8010316:	f7ff fdf7 	bl	800ff08 <strlen>
 801031a:	1c83      	adds	r3, r0, #2
 801031c:	ba5b      	rev16	r3, r3
 801031e:	812b      	strh	r3, [r5, #8]
 8010320:	f105 020a 	add.w	r2, r5, #10
 8010324:	2301      	movs	r3, #1
 8010326:	4639      	mov	r1, r7
 8010328:	4630      	mov	r0, r6
 801032a:	f7ff fe95 	bl	8010058 <MDNS::WriteDnsName(char const*, char*, bool)>
 801032e:	4410      	add	r0, r2
 8010330:	1b00      	subs	r0, r0, r4
 8010332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010334:	080177a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, r9, sl, ip, sp, lr}
 8010338:	01000c00 	tsteq	r0, r0, lsl #24
 801033c:	2000a068 	andcs	sl, r0, r8, rrx

08010340 <MDNS::CreateMDNSMessage(unsigned int)>:
 8010340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010342:	2384      	movs	r3, #132	; 0x84
 8010344:	4d19      	ldr	r5, [pc, #100]	; (80103ac <MDNS::CreateMDNSMessage(unsigned int)+0x6c>)
 8010346:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801034a:	80eb      	strh	r3, [r5, #6]
 801034c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010350:	f105 0410 	add.w	r4, r5, #16
 8010354:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8010358:	4622      	mov	r2, r4
 801035a:	4606      	mov	r6, r0
 801035c:	460f      	mov	r7, r1
 801035e:	f7ff ff09 	bl	8010174 <MDNS::CreateAnswerServiceSrv(unsigned int, unsigned char*)>
 8010362:	4404      	add	r4, r0
 8010364:	4622      	mov	r2, r4
 8010366:	4639      	mov	r1, r7
 8010368:	4630      	mov	r0, r6
 801036a:	f7ff ff47 	bl	80101fc <MDNS::CreateAnswerServiceTxt(unsigned int, unsigned char*)>
 801036e:	4404      	add	r4, r0
 8010370:	4622      	mov	r2, r4
 8010372:	4639      	mov	r1, r7
 8010374:	4630      	mov	r0, r6
 8010376:	f7ff ffbb 	bl	80102f0 <MDNS::CreateAnswerServiceDnsSd(unsigned int, unsigned char*)>
 801037a:	4404      	add	r4, r0
 801037c:	4622      	mov	r2, r4
 801037e:	4639      	mov	r1, r7
 8010380:	4630      	mov	r0, r6
 8010382:	f7ff ff79 	bl	8010278 <MDNS::CreateAnswerServicePtr(unsigned int, unsigned char*)>
 8010386:	4b0a      	ldr	r3, [pc, #40]	; (80103b0 <MDNS::CreateMDNSMessage(unsigned int)+0x70>)
 8010388:	4404      	add	r4, r0
 801038a:	f853 2b10 	ldr.w	r2, [r3], #16
 801038e:	1e60      	subs	r0, r4, #1
 8010390:	3a0c      	subs	r2, #12
 8010392:	4611      	mov	r1, r2
 8010394:	3901      	subs	r1, #1
 8010396:	d304      	bcc.n	80103a2 <MDNS::CreateMDNSMessage(unsigned int)+0x62>
 8010398:	f813 6b01 	ldrb.w	r6, [r3], #1
 801039c:	f800 6f01 	strb.w	r6, [r0, #1]!
 80103a0:	e7f8      	b.n	8010394 <MDNS::CreateMDNSMessage(unsigned int)+0x54>
 80103a2:	4414      	add	r4, r2
 80103a4:	4a03      	ldr	r2, [pc, #12]	; (80103b4 <MDNS::CreateMDNSMessage(unsigned int)+0x74>)
 80103a6:	1aa4      	subs	r4, r4, r2
 80103a8:	602c      	str	r4, [r5, #0]
 80103aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103ac:	2000a08c 	andcs	sl, r0, ip, lsl #1
 80103b0:	20009e64 	andcs	r9, r0, r4, ror #28
 80103b4:	2000a090 	mulcs	r0, r0, r0

080103b8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)>:
 80103b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103bc:	4d3f      	ldr	r5, [pc, #252]	; (80104bc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x104>)
 80103be:	b085      	sub	sp, #20
 80103c0:	682c      	ldr	r4, [r5, #0]
 80103c2:	4680      	mov	r8, r0
 80103c4:	460f      	mov	r7, r1
 80103c6:	4616      	mov	r6, r2
 80103c8:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80103cc:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80103d0:	b11c      	cbz	r4, 80103da <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x22>
 80103d2:	692a      	ldr	r2, [r5, #16]
 80103d4:	2a00      	cmp	r2, #0
 80103d6:	d16d      	bne.n	80104b4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfc>
 80103d8:	2401      	movs	r4, #1
 80103da:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 80103de:	ea4f 1904 	mov.w	r9, r4, lsl #4
 80103e2:	8193      	strh	r3, [r2, #12]
 80103e4:	f882 b00e 	strb.w	fp, [r2, #14]
 80103e8:	2f00      	cmp	r7, #0
 80103ea:	d153      	bne.n	8010494 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xdc>
 80103ec:	4630      	mov	r0, r6
 80103ee:	f7ff fd8b 	bl	800ff08 <strlen>
 80103f2:	4f33      	ldr	r7, [pc, #204]	; (80104c0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x108>)
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	331c      	adds	r3, #28
 80103f8:	4418      	add	r0, r3
 80103fa:	f7ff fd85 	bl	800ff08 <strlen>
 80103fe:	3001      	adds	r0, #1
 8010400:	f003 f84c 	bl	801349c <operator new[](unsigned int)>
 8010404:	6839      	ldr	r1, [r7, #0]
 8010406:	f845 0009 	str.w	r0, [r5, r9]
 801040a:	311c      	adds	r1, #28
 801040c:	f7ff fd91 	bl	800ff32 <strcpy.isra.0>
 8010410:	f855 0009 	ldr.w	r0, [r5, r9]
 8010414:	4631      	mov	r1, r6
 8010416:	f7ff fd94 	bl	800ff42 <strcat.isra.0>
 801041a:	4631      	mov	r1, r6
 801041c:	4640      	mov	r0, r8
 801041e:	f7ff fe0d 	bl	801003c <MDNS::FindFirstDotFromRight(char const*) const>
 8010422:	eb05 0709 	add.w	r7, r5, r9
 8010426:	4605      	mov	r5, r0
 8010428:	f7ff fd6e 	bl	800ff08 <strlen>
 801042c:	300d      	adds	r0, #13
 801042e:	f003 f835 	bl	801349c <operator new[](unsigned int)>
 8010432:	4629      	mov	r1, r5
 8010434:	6078      	str	r0, [r7, #4]
 8010436:	f7ff fd7c 	bl	800ff32 <strcpy.isra.0>
 801043a:	4922      	ldr	r1, [pc, #136]	; (80104c4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x10c>)
 801043c:	6878      	ldr	r0, [r7, #4]
 801043e:	f7ff fd80 	bl	800ff42 <strcat.isra.0>
 8010442:	4921      	ldr	r1, [pc, #132]	; (80104c8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x110>)
 8010444:	4b21      	ldr	r3, [pc, #132]	; (80104cc <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x114>)
 8010446:	6878      	ldr	r0, [r7, #4]
 8010448:	f1bb 0f01 	cmp.w	fp, #1
 801044c:	bf18      	it	ne
 801044e:	4619      	movne	r1, r3
 8010450:	f7ff fd77 	bl	800ff42 <strcat.isra.0>
 8010454:	f1ba 0f00 	cmp.w	sl, #0
 8010458:	d009      	beq.n	801046e <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xb6>
 801045a:	4650      	mov	r0, sl
 801045c:	f7ff fd54 	bl	800ff08 <strlen>
 8010460:	3001      	adds	r0, #1
 8010462:	f003 f81b 	bl	801349c <operator new[](unsigned int)>
 8010466:	4651      	mov	r1, sl
 8010468:	60b8      	str	r0, [r7, #8]
 801046a:	f7ff fd62 	bl	800ff32 <strcpy.isra.0>
 801046e:	4621      	mov	r1, r4
 8010470:	4640      	mov	r0, r8
 8010472:	f7ff ff65 	bl	8010340 <MDNS::CreateMDNSMessage(unsigned int)>
 8010476:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801047a:	4915      	ldr	r1, [pc, #84]	; (80104d0 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x118>)
 801047c:	4815      	ldr	r0, [pc, #84]	; (80104d4 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x11c>)
 801047e:	f851 2b04 	ldr.w	r2, [r1], #4
 8010482:	9300      	str	r3, [sp, #0]
 8010484:	4b14      	ldr	r3, [pc, #80]	; (80104d8 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x120>)
 8010486:	7800      	ldrb	r0, [r0, #0]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	b292      	uxth	r2, r2
 801048c:	f7ff fc8a 	bl	800fda4 <udp_send>
 8010490:	2001      	movs	r0, #1
 8010492:	e010      	b.n	80104b6 <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0xfe>
 8010494:	4638      	mov	r0, r7
 8010496:	f7ff fd37 	bl	800ff08 <strlen>
 801049a:	9003      	str	r0, [sp, #12]
 801049c:	4630      	mov	r0, r6
 801049e:	f7ff fd33 	bl	800ff08 <strlen>
 80104a2:	9b03      	ldr	r3, [sp, #12]
 80104a4:	4418      	add	r0, r3
 80104a6:	3001      	adds	r0, #1
 80104a8:	f002 fff8 	bl	801349c <operator new[](unsigned int)>
 80104ac:	4639      	mov	r1, r7
 80104ae:	f845 0009 	str.w	r0, [r5, r9]
 80104b2:	e7ab      	b.n	801040c <MDNS::AddServiceRecord(char const*, char const*, unsigned short, mdns::Protocol, char const*)+0x54>
 80104b4:	2000      	movs	r0, #0
 80104b6:	b005      	add	sp, #20
 80104b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104bc:	2000a068 	andcs	sl, r0, r8, rrx
 80104c0:	2000a298 	mulcs	r0, r8, r2
 80104c4:	080167fb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 80104c8:	0801779c 	stmdaeq	r1, {r2, r3, r4, r7, r8, r9, sl, ip, sp, lr}
 80104cc:	080177b9 	stmdaeq	r1, {r0, r3, r4, r5, r7, r8, r9, sl, ip, sp, lr}
 80104d0:	2000a08c 	andcs	sl, r0, ip, lsl #1
 80104d4:	20000008 	andcs	r0, r0, r8
 80104d8:	20009e60 	andcs	r9, r0, r0, ror #28

080104dc <MDNS::HandleRequest(unsigned short)>:
 80104dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e0:	4605      	mov	r5, r0
 80104e2:	2700      	movs	r7, #0
 80104e4:	f04f 080c 	mov.w	r8, #12
 80104e8:	b0c5      	sub	sp, #276	; 0x114
 80104ea:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80105b0 <MDNS::HandleRequest(unsigned short)+0xd4>
 80104ee:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80105b4 <MDNS::HandleRequest(unsigned short)+0xd8>
 80104f2:	9103      	str	r1, [sp, #12]
 80104f4:	9b03      	ldr	r3, [sp, #12]
 80104f6:	42bb      	cmp	r3, r7
 80104f8:	d956      	bls.n	80105a8 <MDNS::HandleRequest(unsigned short)+0xcc>
 80104fa:	f8da 1000 	ldr.w	r1, [sl]
 80104fe:	aa04      	add	r2, sp, #16
 8010500:	4441      	add	r1, r8
 8010502:	4628      	mov	r0, r5
 8010504:	f7ff fd54 	bl	800ffb0 <MDNS::DecodeDNSNameNotation(char const*, char*)>
 8010508:	f8da 2000 	ldr.w	r2, [sl]
 801050c:	4440      	add	r0, r8
 801050e:	1813      	adds	r3, r2, r0
 8010510:	885b      	ldrh	r3, [r3, #2]
 8010512:	f100 0804 	add.w	r8, r0, #4
 8010516:	ba5b      	rev16	r3, r3
 8010518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801051c:	2b01      	cmp	r3, #1
 801051e:	d13e      	bne.n	801059e <MDNS::HandleRequest(unsigned short)+0xc2>
 8010520:	5a14      	ldrh	r4, [r2, r0]
 8010522:	4b25      	ldr	r3, [pc, #148]	; (80105b8 <MDNS::HandleRequest(unsigned short)+0xdc>)
 8010524:	ba64      	rev16	r4, r4
 8010526:	6818      	ldr	r0, [r3, #0]
 8010528:	a904      	add	r1, sp, #16
 801052a:	b2a4      	uxth	r4, r4
 801052c:	f7ff fcf4 	bl	800ff18 <strcmp>
 8010530:	b970      	cbnz	r0, 8010550 <MDNS::HandleRequest(unsigned short)+0x74>
 8010532:	2c01      	cmp	r4, #1
 8010534:	d10c      	bne.n	8010550 <MDNS::HandleRequest(unsigned short)+0x74>
 8010536:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801053a:	4920      	ldr	r1, [pc, #128]	; (80105bc <MDNS::HandleRequest(unsigned short)+0xe0>)
 801053c:	4820      	ldr	r0, [pc, #128]	; (80105c0 <MDNS::HandleRequest(unsigned short)+0xe4>)
 801053e:	f851 2b04 	ldr.w	r2, [r1], #4
 8010542:	9300      	str	r3, [sp, #0]
 8010544:	4b1f      	ldr	r3, [pc, #124]	; (80105c4 <MDNS::HandleRequest(unsigned short)+0xe8>)
 8010546:	7800      	ldrb	r0, [r0, #0]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	b292      	uxth	r2, r2
 801054c:	f7ff fc2a 	bl	800fda4 <udp_send>
 8010550:	481d      	ldr	r0, [pc, #116]	; (80105c8 <MDNS::HandleRequest(unsigned short)+0xec>)
 8010552:	a904      	add	r1, sp, #16
 8010554:	f7ff fce0 	bl	800ff18 <strcmp>
 8010558:	f04f 0900 	mov.w	r9, #0
 801055c:	4e1b      	ldr	r6, [pc, #108]	; (80105cc <MDNS::HandleRequest(unsigned short)+0xf0>)
 801055e:	9002      	str	r0, [sp, #8]
 8010560:	6833      	ldr	r3, [r6, #0]
 8010562:	b1c3      	cbz	r3, 8010596 <MDNS::HandleRequest(unsigned short)+0xba>
 8010564:	9b02      	ldr	r3, [sp, #8]
 8010566:	b123      	cbz	r3, 8010572 <MDNS::HandleRequest(unsigned short)+0x96>
 8010568:	6870      	ldr	r0, [r6, #4]
 801056a:	a904      	add	r1, sp, #16
 801056c:	f7ff fcd4 	bl	800ff18 <strcmp>
 8010570:	b988      	cbnz	r0, 8010596 <MDNS::HandleRequest(unsigned short)+0xba>
 8010572:	2c0c      	cmp	r4, #12
 8010574:	d10f      	bne.n	8010596 <MDNS::HandleRequest(unsigned short)+0xba>
 8010576:	4649      	mov	r1, r9
 8010578:	4628      	mov	r0, r5
 801057a:	f7ff fee1 	bl	8010340 <MDNS::CreateMDNSMessage(unsigned int)>
 801057e:	f241 43e9 	movw	r3, #5353	; 0x14e9
 8010582:	480f      	ldr	r0, [pc, #60]	; (80105c0 <MDNS::HandleRequest(unsigned short)+0xe4>)
 8010584:	9300      	str	r3, [sp, #0]
 8010586:	4b0f      	ldr	r3, [pc, #60]	; (80105c4 <MDNS::HandleRequest(unsigned short)+0xe8>)
 8010588:	f8bb 2000 	ldrh.w	r2, [fp]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	4910      	ldr	r1, [pc, #64]	; (80105d0 <MDNS::HandleRequest(unsigned short)+0xf4>)
 8010590:	7800      	ldrb	r0, [r0, #0]
 8010592:	f7ff fc07 	bl	800fda4 <udp_send>
 8010596:	3610      	adds	r6, #16
 8010598:	f1b9 0f00 	cmp.w	r9, #0
 801059c:	d001      	beq.n	80105a2 <MDNS::HandleRequest(unsigned short)+0xc6>
 801059e:	3701      	adds	r7, #1
 80105a0:	e7a8      	b.n	80104f4 <MDNS::HandleRequest(unsigned short)+0x18>
 80105a2:	f04f 0901 	mov.w	r9, #1
 80105a6:	e7db      	b.n	8010560 <MDNS::HandleRequest(unsigned short)+0x84>
 80105a8:	b045      	add	sp, #276	; 0x114
 80105aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ae:	bf00      	nop
 80105b0:	2000a294 	mulcs	r0, r4, r2
 80105b4:	2000a08c 	andcs	sl, r0, ip, lsl #1
 80105b8:	2000a290 	mulcs	r0, r0, r2
 80105bc:	20009e64 	andcs	r9, r0, r4, ror #28
 80105c0:	20000008 	andcs	r0, r0, r8
 80105c4:	20009e60 	andcs	r9, r0, r0, ror #28
 80105c8:	080177a7 	stmdaeq	r1, {r0, r1, r2, r5, r7, r8, r9, sl, ip, sp, lr}
 80105cc:	2000a068 	andcs	sl, r0, r8, rrx
 80105d0:	2000a090 	mulcs	r0, r0, r0

080105d4 <MDNS::Parse()>:
 80105d4:	4b08      	ldr	r3, [pc, #32]	; (80105f8 <MDNS::Parse()+0x24>)
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	8853      	ldrh	r3, [r2, #2]
 80105da:	ba5b      	rev16	r3, r3
 80105dc:	b299      	uxth	r1, r3
 80105de:	041b      	lsls	r3, r3, #16
 80105e0:	d408      	bmi.n	80105f4 <MDNS::Parse()+0x20>
 80105e2:	0b8b      	lsrs	r3, r1, #14
 80105e4:	d106      	bne.n	80105f4 <MDNS::Parse()+0x20>
 80105e6:	8891      	ldrh	r1, [r2, #4]
 80105e8:	b28b      	uxth	r3, r1
 80105ea:	b11b      	cbz	r3, 80105f4 <MDNS::Parse()+0x20>
 80105ec:	ba49      	rev16	r1, r1
 80105ee:	b289      	uxth	r1, r1
 80105f0:	f7ff bf74 	b.w	80104dc <MDNS::HandleRequest(unsigned short)>
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	2000a294 	mulcs	r0, r4, r2

080105fc <MDNS::Run()>:
 80105fc:	b538      	push	{r3, r4, r5, lr}
 80105fe:	4d0c      	ldr	r5, [pc, #48]	; (8010630 <MDNS::Run()+0x34>)
 8010600:	4604      	mov	r4, r0
 8010602:	480c      	ldr	r0, [pc, #48]	; (8010634 <MDNS::Run()+0x38>)
 8010604:	462b      	mov	r3, r5
 8010606:	4a0c      	ldr	r2, [pc, #48]	; (8010638 <MDNS::Run()+0x3c>)
 8010608:	490c      	ldr	r1, [pc, #48]	; (801063c <MDNS::Run()+0x40>)
 801060a:	7800      	ldrb	r0, [r0, #0]
 801060c:	f7ff fba4 	bl	800fd58 <udp_recv2>
 8010610:	4b0b      	ldr	r3, [pc, #44]	; (8010640 <MDNS::Run()+0x44>)
 8010612:	882a      	ldrh	r2, [r5, #0]
 8010614:	8018      	strh	r0, [r3, #0]
 8010616:	f241 43e9 	movw	r3, #5353	; 0x14e9
 801061a:	429a      	cmp	r2, r3
 801061c:	d106      	bne.n	801062c <MDNS::Run()+0x30>
 801061e:	280c      	cmp	r0, #12
 8010620:	d904      	bls.n	801062c <MDNS::Run()+0x30>
 8010622:	4620      	mov	r0, r4
 8010624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010628:	f7ff bfd4 	b.w	80105d4 <MDNS::Parse()>
 801062c:	bd38      	pop	{r3, r4, r5, pc}
 801062e:	bf00      	nop
 8010630:	20009e5c 	andcs	r9, r0, ip, asr lr
 8010634:	20000008 	andcs	r0, r0, r8
 8010638:	20009e58 	andcs	r9, r0, r8, asr lr
 801063c:	2000a294 	mulcs	r0, r4, r2
 8010640:	2000a088 	andcs	sl, r0, r8, lsl #1

08010644 <MDNS::Print()>:
 8010644:	b510      	push	{r4, lr}
 8010646:	4816      	ldr	r0, [pc, #88]	; (80106a0 <MDNS::Print()+0x5c>)
 8010648:	f003 fb2c 	bl	8013ca4 <printf>
 801064c:	4b15      	ldr	r3, [pc, #84]	; (80106a4 <MDNS::Print()+0x60>)
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	3301      	adds	r3, #1
 8010652:	d104      	bne.n	801065e <MDNS::Print()+0x1a>
 8010654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010658:	4813      	ldr	r0, [pc, #76]	; (80106a8 <MDNS::Print()+0x64>)
 801065a:	f003 bb23 	b.w	8013ca4 <printf>
 801065e:	4b13      	ldr	r3, [pc, #76]	; (80106ac <MDNS::Print()+0x68>)
 8010660:	4c13      	ldr	r4, [pc, #76]	; (80106b0 <MDNS::Print()+0x6c>)
 8010662:	6819      	ldr	r1, [r3, #0]
 8010664:	4813      	ldr	r0, [pc, #76]	; (80106b4 <MDNS::Print()+0x70>)
 8010666:	f003 fb1d 	bl	8013ca4 <printf>
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	b14b      	cbz	r3, 8010682 <MDNS::Print()+0x3e>
 801066e:	4a12      	ldr	r2, [pc, #72]	; (80106b8 <MDNS::Print()+0x74>)
 8010670:	68a3      	ldr	r3, [r4, #8]
 8010672:	6861      	ldr	r1, [r4, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	bf08      	it	eq
 8010678:	4613      	moveq	r3, r2
 801067a:	4810      	ldr	r0, [pc, #64]	; (80106bc <MDNS::Print()+0x78>)
 801067c:	89a2      	ldrh	r2, [r4, #12]
 801067e:	f003 fb11 	bl	8013ca4 <printf>
 8010682:	6923      	ldr	r3, [r4, #16]
 8010684:	b15b      	cbz	r3, 801069e <MDNS::Print()+0x5a>
 8010686:	69a3      	ldr	r3, [r4, #24]
 8010688:	4a0b      	ldr	r2, [pc, #44]	; (80106b8 <MDNS::Print()+0x74>)
 801068a:	6961      	ldr	r1, [r4, #20]
 801068c:	2b00      	cmp	r3, #0
 801068e:	bf08      	it	eq
 8010690:	4613      	moveq	r3, r2
 8010692:	480a      	ldr	r0, [pc, #40]	; (80106bc <MDNS::Print()+0x78>)
 8010694:	8ba2      	ldrh	r2, [r4, #28]
 8010696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801069a:	f003 bb03 	b.w	8013ca4 <printf>
 801069e:	bd10      	pop	{r4, pc}
 80106a0:	080177c4 	stmdaeq	r1, {r2, r6, r7, r8, r9, sl, ip, sp, lr}
 80106a4:	20000008 	andcs	r0, r0, r8
 80106a8:	080177ca 	stmdaeq	r1, {r1, r3, r6, r7, r8, r9, sl, ip, sp, lr}
 80106ac:	2000a290 	mulcs	r0, r0, r2
 80106b0:	2000a068 	andcs	sl, r0, r8, rrx
 80106b4:	080177d8 	stmdaeq	r1, {r3, r4, r6, r7, r8, r9, sl, ip, sp, lr}
 80106b8:	08016b1d 	stmdaeq	r1, {r0, r2, r3, r4, r8, r9, fp, sp, lr}
 80106bc:	080177e4 	stmdaeq	r1, {r2, r5, r6, r7, r8, r9, sl, ip, sp, lr}

080106c0 <strncpy.constprop.0.isra.0>:
 80106c0:	233f      	movs	r3, #63	; 0x3f
 80106c2:	3901      	subs	r1, #1
 80106c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80106c8:	b92a      	cbnz	r2, 80106d6 <strncpy.constprop.0.isra.0+0x16>
 80106ca:	4403      	add	r3, r0
 80106cc:	4298      	cmp	r0, r3
 80106ce:	d007      	beq.n	80106e0 <strncpy.constprop.0.isra.0+0x20>
 80106d0:	f800 2b01 	strb.w	r2, [r0], #1
 80106d4:	e7fa      	b.n	80106cc <strncpy.constprop.0.isra.0+0xc>
 80106d6:	3b01      	subs	r3, #1
 80106d8:	f800 2b01 	strb.w	r2, [r0], #1
 80106dc:	d1f2      	bne.n	80106c4 <strncpy.constprop.0.isra.0+0x4>
 80106de:	4770      	bx	lr
 80106e0:	4770      	bx	lr
	...

080106e4 <Network::Network()>:
 80106e4:	4a11      	ldr	r2, [pc, #68]	; (801072c <Network::Network()+0x48>)
 80106e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80106ea:	6010      	str	r0, [r2, #0]
 80106ec:	2201      	movs	r2, #1
 80106ee:	2300      	movs	r3, #0
 80106f0:	e9c0 1200 	strd	r1, r2, [r0]
 80106f4:	2200      	movs	r2, #0
 80106f6:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
 80106fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80106fe:	490c      	ldr	r1, [pc, #48]	; (8010730 <Network::Network()+0x4c>)
 8010700:	60c2      	str	r2, [r0, #12]
 8010702:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
 8010706:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 801070a:	f880 309c 	strb.w	r3, [r0, #156]	; 0x9c
 801070e:	6083      	str	r3, [r0, #8]
 8010710:	6183      	str	r3, [r0, #24]
 8010712:	7703      	strb	r3, [r0, #28]
 8010714:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8010718:	f100 02a2 	add.w	r2, r0, #162	; 0xa2
 801071c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010720:	f802 3b01 	strb.w	r3, [r2], #1
 8010724:	2b00      	cmp	r3, #0
 8010726:	d1f9      	bne.n	801071c <Network::Network()+0x38>
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	2000a298 	mulcs	r0, r8, r2
 8010730:	080177ef 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r7, r8, r9, sl, ip, sp, lr}

08010734 <Network::Shutdown()>:
 8010734:	b508      	push	{r3, lr}
 8010736:	30b8      	adds	r0, #184	; 0xb8
 8010738:	f001 fec6 	bl	80124c8 <NetworkDisplay::ShowShutdown()>
 801073c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010740:	f7fe bd74 	b.w	800f22c <net_shutdown>

08010744 <Network::Begin(unsigned short)>:
 8010744:	4608      	mov	r0, r1
 8010746:	f7ff ba97 	b.w	800fc78 <udp_bind>

0801074a <Network::End(unsigned short)>:
 801074a:	4608      	mov	r0, r1
 801074c:	f7ff baae 	b.w	800fcac <udp_unbind>

08010750 <Network::MacAddressCopyTo(unsigned char*)>:
 8010750:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 8010754:	3901      	subs	r1, #1
 8010756:	30a2      	adds	r0, #162	; 0xa2
 8010758:	f813 2b01 	ldrb.w	r2, [r3], #1
 801075c:	4283      	cmp	r3, r0
 801075e:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010762:	d1f9      	bne.n	8010758 <Network::MacAddressCopyTo(unsigned char*)+0x8>
 8010764:	4770      	bx	lr

08010766 <Network::JoinGroup(int, unsigned int)>:
 8010766:	4610      	mov	r0, r2
 8010768:	f001 b960 	b.w	8011a2c <igmp_join>

0801076c <Network::LeaveGroup(int, unsigned int)>:
 801076c:	4610      	mov	r0, r2
 801076e:	f001 b989 	b.w	8011a84 <igmp_leave>

08010772 <Network::SetDefaultIp()>:
 8010772:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8010776:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
 801077a:	041b      	lsls	r3, r3, #16
 801077c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8010780:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
 8010784:	3302      	adds	r3, #2
 8010786:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 801078a:	22ff      	movs	r2, #255	; 0xff
 801078c:	6103      	str	r3, [r0, #16]
 801078e:	e9c0 3205 	strd	r3, r2, [r0, #20]
 8010792:	4770      	bx	lr

08010794 <Network::Init(NetworkParamsStore*)>:
 8010794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010798:	b0a3      	sub	sp, #140	; 0x8c
 801079a:	4604      	mov	r4, r0
 801079c:	a809      	add	r0, sp, #36	; 0x24
 801079e:	f000 fa4f 	bl	8010c40 <NetworkParams::NetworkParams(NetworkParamsStore*)>
 80107a2:	a809      	add	r0, sp, #36	; 0x24
 80107a4:	f000 fa58 	bl	8010c58 <NetworkParams::Load()>
 80107a8:	b110      	cbz	r0, 80107b0 <Network::Init(NetworkParamsStore*)+0x1c>
 80107aa:	a809      	add	r0, sp, #36	; 0x24
 80107ac:	f000 fcab 	bl	8011106 <NetworkParams::Dump()>
 80107b0:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 80107b4:	4628      	mov	r0, r5
 80107b6:	f104 079c 	add.w	r7, r4, #156	; 0x9c
 80107ba:	f001 fe6d 	bl	8012498 <NetworkDisplay::ShowEmacStart()>
 80107be:	4638      	mov	r0, r7
 80107c0:	f004 f85a 	bl	8014878 <emac_start>
 80107c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107c6:	f104 061c 	add.w	r6, r4, #28
 80107ca:	9306      	str	r3, [sp, #24]
 80107cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80107ce:	9307      	str	r3, [sp, #28]
 80107d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107d2:	9308      	str	r3, [sp, #32]
 80107d4:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80107d8:	7063      	strb	r3, [r4, #1]
 80107da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107dc:	f013 0240 	ands.w	r2, r3, #64	; 0x40
 80107e0:	bf18      	it	ne
 80107e2:	f8dd 207d 	ldrne.w	r2, [sp, #125]	; 0x7d
 80107e6:	061b      	lsls	r3, r3, #24
 80107e8:	bf54      	ite	pl
 80107ea:	2300      	movpl	r3, #0
 80107ec:	f8dd 3081 	ldrmi.w	r3, [sp, #129]	; 0x81
 80107f0:	60a2      	str	r2, [r4, #8]
 80107f2:	60e3      	str	r3, [r4, #12]
 80107f4:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d15f      	bne.n	80108bc <Network::Init(NetworkParamsStore*)+0x128>
 80107fc:	4632      	mov	r2, r6
 80107fe:	4875      	ldr	r0, [pc, #468]	; (80109d4 <Network::Init(NetworkParamsStore*)+0x240>)
 8010800:	f810 1b01 	ldrb.w	r1, [r0], #1
 8010804:	f103 0c01 	add.w	ip, r3, #1
 8010808:	b119      	cbz	r1, 8010812 <Network::Init(NetworkParamsStore*)+0x7e>
 801080a:	4663      	mov	r3, ip
 801080c:	f802 1b01 	strb.w	r1, [r2], #1
 8010810:	e7f6      	b.n	8010800 <Network::Init(NetworkParamsStore*)+0x6c>
 8010812:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
 8010816:	18e1      	adds	r1, r4, r3
 8010818:	0910      	lsrs	r0, r2, #4
 801081a:	2a9f      	cmp	r2, #159	; 0x9f
 801081c:	f002 020f 	and.w	r2, r2, #15
 8010820:	bf94      	ite	ls
 8010822:	3030      	addls	r0, #48	; 0x30
 8010824:	3037      	addhi	r0, #55	; 0x37
 8010826:	2a09      	cmp	r2, #9
 8010828:	bf94      	ite	ls
 801082a:	3230      	addls	r2, #48	; 0x30
 801082c:	3237      	addhi	r2, #55	; 0x37
 801082e:	44a4      	add	ip, r4
 8010830:	7708      	strb	r0, [r1, #28]
 8010832:	f88c 201c 	strb.w	r2, [ip, #28]
 8010836:	f894 20a0 	ldrb.w	r2, [r4, #160]	; 0xa0
 801083a:	f103 0802 	add.w	r8, r3, #2
 801083e:	0910      	lsrs	r0, r2, #4
 8010840:	2a9f      	cmp	r2, #159	; 0x9f
 8010842:	f002 020f 	and.w	r2, r2, #15
 8010846:	bf94      	ite	ls
 8010848:	3030      	addls	r0, #48	; 0x30
 801084a:	3037      	addhi	r0, #55	; 0x37
 801084c:	f103 0e03 	add.w	lr, r3, #3
 8010850:	2a09      	cmp	r2, #9
 8010852:	eb04 0c08 	add.w	ip, r4, r8
 8010856:	f88c 001c 	strb.w	r0, [ip, #28]
 801085a:	bf94      	ite	ls
 801085c:	3230      	addls	r2, #48	; 0x30
 801085e:	3237      	addhi	r2, #55	; 0x37
 8010860:	eb04 000e 	add.w	r0, r4, lr
 8010864:	7702      	strb	r2, [r0, #28]
 8010866:	f894 20a1 	ldrb.w	r2, [r4, #161]	; 0xa1
 801086a:	f103 0c04 	add.w	ip, r3, #4
 801086e:	0910      	lsrs	r0, r2, #4
 8010870:	2a9f      	cmp	r2, #159	; 0x9f
 8010872:	f002 020f 	and.w	r2, r2, #15
 8010876:	bf94      	ite	ls
 8010878:	3030      	addls	r0, #48	; 0x30
 801087a:	3037      	addhi	r0, #55	; 0x37
 801087c:	3305      	adds	r3, #5
 801087e:	2a09      	cmp	r2, #9
 8010880:	4423      	add	r3, r4
 8010882:	44a4      	add	ip, r4
 8010884:	bf94      	ite	ls
 8010886:	3230      	addls	r2, #48	; 0x30
 8010888:	3237      	addhi	r2, #55	; 0x37
 801088a:	f88c 001c 	strb.w	r0, [ip, #28]
 801088e:	771a      	strb	r2, [r3, #28]
 8010890:	2300      	movs	r3, #0
 8010892:	f881 3022 	strb.w	r3, [r1, #34]	; 0x22
 8010896:	7863      	ldrb	r3, [r4, #1]
 8010898:	b95b      	cbnz	r3, 80108b2 <Network::Init(NetworkParamsStore*)+0x11e>
 801089a:	9b06      	ldr	r3, [sp, #24]
 801089c:	b9bb      	cbnz	r3, 80108ce <Network::Init(NetworkParamsStore*)+0x13a>
 801089e:	4620      	mov	r0, r4
 80108a0:	f7ff ff67 	bl	8010772 <Network::SetDefaultIp()>
 80108a4:	6923      	ldr	r3, [r4, #16]
 80108a6:	69a2      	ldr	r2, [r4, #24]
 80108a8:	9306      	str	r3, [sp, #24]
 80108aa:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80108ae:	7863      	ldrb	r3, [r4, #1]
 80108b0:	b1a3      	cbz	r3, 80108dc <Network::Init(NetworkParamsStore*)+0x148>
 80108b2:	2101      	movs	r1, #1
 80108b4:	4628      	mov	r0, r5
 80108b6:	f001 fe0d 	bl	80124d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80108ba:	e00f      	b.n	80108dc <Network::Init(NetworkParamsStore*)+0x148>
 80108bc:	4630      	mov	r0, r6
 80108be:	f10d 013d 	add.w	r1, sp, #61	; 0x3d
 80108c2:	f7ff fefd 	bl	80106c0 <strncpy.constprop.0.isra.0>
 80108c6:	2300      	movs	r3, #0
 80108c8:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 80108cc:	e7e3      	b.n	8010896 <Network::Init(NetworkParamsStore*)+0x102>
 80108ce:	69a1      	ldr	r1, [r4, #24]
 80108d0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80108d4:	4053      	eors	r3, r2
 80108d6:	420b      	tst	r3, r1
 80108d8:	d000      	beq.n	80108dc <Network::Init(NetworkParamsStore*)+0x148>
 80108da:	9208      	str	r2, [sp, #32]
 80108dc:	1ce3      	adds	r3, r4, #3
 80108de:	f104 0901 	add.w	r9, r4, #1
 80108e2:	9302      	str	r3, [sp, #8]
 80108e4:	9300      	str	r3, [sp, #0]
 80108e6:	4632      	mov	r2, r6
 80108e8:	464b      	mov	r3, r9
 80108ea:	4638      	mov	r0, r7
 80108ec:	a906      	add	r1, sp, #24
 80108ee:	f7fe fc4d 	bl	800f18c <net_init>
 80108f2:	78e3      	ldrb	r3, [r4, #3]
 80108f4:	b11b      	cbz	r3, 80108fe <Network::Init(NetworkParamsStore*)+0x16a>
 80108f6:	2104      	movs	r1, #4
 80108f8:	4628      	mov	r0, r5
 80108fa:	f001 fdeb 	bl	80124d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80108fe:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8010902:	f89d a085 	ldrb.w	sl, [sp, #133]	; 0x85
 8010906:	9304      	str	r3, [sp, #16]
 8010908:	233c      	movs	r3, #60	; 0x3c
 801090a:	fb03 f30a 	mul.w	r3, r3, sl
 801090e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80109d8 <Network::Init(NetworkParamsStore*)+0x244>
 8010912:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80109dc <Network::Init(NetworkParamsStore*)+0x248>
 8010916:	9303      	str	r3, [sp, #12]
 8010918:	78e3      	ldrb	r3, [r4, #3]
 801091a:	b95b      	cbnz	r3, 8010934 <Network::Init(NetworkParamsStore*)+0x1a0>
 801091c:	9b06      	ldr	r3, [sp, #24]
 801091e:	4628      	mov	r0, r5
 8010920:	6123      	str	r3, [r4, #16]
 8010922:	9b07      	ldr	r3, [sp, #28]
 8010924:	61a3      	str	r3, [r4, #24]
 8010926:	9b08      	ldr	r3, [sp, #32]
 8010928:	6163      	str	r3, [r4, #20]
 801092a:	f001 fdbb 	bl	80124a4 <NetworkDisplay::ShowIp()>
 801092e:	b023      	add	sp, #140	; 0x8c
 8010930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010934:	f1ba 0f00 	cmp.w	sl, #0
 8010938:	d0f0      	beq.n	801091c <Network::Init(NetworkParamsStore*)+0x188>
 801093a:	9b04      	ldr	r3, [sp, #16]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d0ed      	beq.n	801091c <Network::Init(NetworkParamsStore*)+0x188>
 8010940:	2104      	movs	r1, #4
 8010942:	f8d8 0000 	ldr.w	r0, [r8]
 8010946:	f002 fcc3 	bl	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 801094a:	2103      	movs	r1, #3
 801094c:	4628      	mov	r0, r5
 801094e:	f001 fdc1 	bl	80124d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010952:	2000      	movs	r0, #0
 8010954:	f003 fadc 	bl	8013f10 <time>
 8010958:	9005      	str	r0, [sp, #20]
 801095a:	2000      	movs	r0, #0
 801095c:	f003 fad8 	bl	8013f10 <time>
 8010960:	9b05      	ldr	r3, [sp, #20]
 8010962:	1ac0      	subs	r0, r0, r3
 8010964:	9b03      	ldr	r3, [sp, #12]
 8010966:	4298      	cmp	r0, r3
 8010968:	da1a      	bge.n	80109a0 <Network::Init(NetworkParamsStore*)+0x20c>
 801096a:	f8d8 3000 	ldr.w	r3, [r8]
 801096e:	491c      	ldr	r1, [pc, #112]	; (80109e0 <Network::Init(NetworkParamsStore*)+0x24c>)
 8010970:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8010974:	f1bc 0f00 	cmp.w	ip, #0
 8010978:	d0ef      	beq.n	801095a <Network::Init(NetworkParamsStore*)+0x1c6>
 801097a:	6808      	ldr	r0, [r1, #0]
 801097c:	695a      	ldr	r2, [r3, #20]
 801097e:	1a80      	subs	r0, r0, r2
 8010980:	4584      	cmp	ip, r0
 8010982:	d8ea      	bhi.n	801095a <Network::Init(NetworkParamsStore*)+0x1c6>
 8010984:	6808      	ldr	r0, [r1, #0]
 8010986:	6158      	str	r0, [r3, #20]
 8010988:	6918      	ldr	r0, [r3, #16]
 801098a:	2801      	cmp	r0, #1
 801098c:	f080 0201 	eor.w	r2, r0, #1
 8010990:	611a      	str	r2, [r3, #16]
 8010992:	bf16      	itet	ne
 8010994:	2301      	movne	r3, #1
 8010996:	f8cb 0014 	streq.w	r0, [fp, #20]
 801099a:	f8cb 3010 	strne.w	r3, [fp, #16]
 801099e:	e7dc      	b.n	801095a <Network::Init(NetworkParamsStore*)+0x1c6>
 80109a0:	2101      	movs	r1, #1
 80109a2:	4628      	mov	r0, r5
 80109a4:	f001 fd96 	bl	80124d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80109a8:	2101      	movs	r1, #1
 80109aa:	f8d8 0000 	ldr.w	r0, [r8]
 80109ae:	f002 fc8f 	bl	80132d0 <LedBlink::SetMode(ledblink::Mode)>
 80109b2:	2301      	movs	r3, #1
 80109b4:	7063      	strb	r3, [r4, #1]
 80109b6:	2300      	movs	r3, #0
 80109b8:	70e3      	strb	r3, [r4, #3]
 80109ba:	9b02      	ldr	r3, [sp, #8]
 80109bc:	4632      	mov	r2, r6
 80109be:	9300      	str	r3, [sp, #0]
 80109c0:	4638      	mov	r0, r7
 80109c2:	464b      	mov	r3, r9
 80109c4:	a906      	add	r1, sp, #24
 80109c6:	f7fe fbe1 	bl	800f18c <net_init>
 80109ca:	7863      	ldrb	r3, [r4, #1]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d0a3      	beq.n	8010918 <Network::Init(NetworkParamsStore*)+0x184>
 80109d0:	e7a4      	b.n	801091c <Network::Init(NetworkParamsStore*)+0x188>
 80109d2:	bf00      	nop
 80109d4:	080177f4 	stmdaeq	r1, {r2, r4, r5, r6, r7, r8, r9, sl, ip, sp, lr}
 80109d8:	2000a960 	andcs	sl, r0, r0, ror #18
 80109dc:	40011000 	andmi	r1, r1, r0
 80109e0:	2000a97c 	andcs	sl, r0, ip, ror r9

080109e4 <Network::SetIp(unsigned int)>:
 80109e4:	7843      	ldrb	r3, [r0, #1]
 80109e6:	b570      	push	{r4, r5, r6, lr}
 80109e8:	4604      	mov	r4, r0
 80109ea:	460d      	mov	r5, r1
 80109ec:	2600      	movs	r6, #0
 80109ee:	b113      	cbz	r3, 80109f6 <Network::SetIp(unsigned int)+0x12>
 80109f0:	7046      	strb	r6, [r0, #1]
 80109f2:	f7fe fc6d 	bl	800f2d0 <net_dhcp_release>
 80109f6:	70e6      	strb	r6, [r4, #3]
 80109f8:	b975      	cbnz	r5, 8010a18 <Network::SetIp(unsigned int)+0x34>
 80109fa:	4620      	mov	r0, r4
 80109fc:	f7ff feb9 	bl	8010772 <Network::SetDefaultIp()>
 8010a00:	6920      	ldr	r0, [r4, #16]
 8010a02:	f7fe fc21 	bl	800f248 <net_set_ip>
 8010a06:	34b8      	adds	r4, #184	; 0xb8
 8010a08:	4620      	mov	r0, r4
 8010a0a:	f001 fd4b 	bl	80124a4 <NetworkDisplay::ShowIp()>
 8010a0e:	4620      	mov	r0, r4
 8010a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a14:	f001 bd4c 	b.w	80124b0 <NetworkDisplay::ShowNetMask()>
 8010a18:	4628      	mov	r0, r5
 8010a1a:	f7fe fc15 	bl	800f248 <net_set_ip>
 8010a1e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8010a22:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010a26:	2800      	cmp	r0, #0
 8010a28:	d0ed      	beq.n	8010a06 <Network::SetIp(unsigned int)+0x22>
 8010a2a:	6803      	ldr	r3, [r0, #0]
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	689b      	ldr	r3, [r3, #8]
 8010a30:	4798      	blx	r3
 8010a32:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8010a36:	2100      	movs	r1, #0
 8010a38:	6803      	ldr	r3, [r0, #0]
 8010a3a:	699b      	ldr	r3, [r3, #24]
 8010a3c:	4798      	blx	r3
 8010a3e:	e7e2      	b.n	8010a06 <Network::SetIp(unsigned int)+0x22>

08010a40 <Network::SetNetmask(unsigned int)>:
 8010a40:	6982      	ldr	r2, [r0, #24]
 8010a42:	b510      	push	{r4, lr}
 8010a44:	428a      	cmp	r2, r1
 8010a46:	4604      	mov	r4, r0
 8010a48:	d00f      	beq.n	8010a6a <Network::SetNetmask(unsigned int)+0x2a>
 8010a4a:	6181      	str	r1, [r0, #24]
 8010a4c:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
 8010a50:	b110      	cbz	r0, 8010a58 <Network::SetNetmask(unsigned int)+0x18>
 8010a52:	6803      	ldr	r3, [r0, #0]
 8010a54:	68db      	ldr	r3, [r3, #12]
 8010a56:	4798      	blx	r3
 8010a58:	34b8      	adds	r4, #184	; 0xb8
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	f001 fd22 	bl	80124a4 <NetworkDisplay::ShowIp()>
 8010a60:	4620      	mov	r0, r4
 8010a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a66:	f001 bd23 	b.w	80124b0 <NetworkDisplay::ShowNetMask()>
 8010a6a:	bd10      	pop	{r4, pc}

08010a6c <Network::SetGatewayIp(unsigned int)>:
 8010a6c:	b538      	push	{r3, r4, r5, lr}
 8010a6e:	6943      	ldr	r3, [r0, #20]
 8010a70:	4604      	mov	r4, r0
 8010a72:	428b      	cmp	r3, r1
 8010a74:	460d      	mov	r5, r1
 8010a76:	d00f      	beq.n	8010a98 <Network::SetGatewayIp(unsigned int)+0x2c>
 8010a78:	4608      	mov	r0, r1
 8010a7a:	f7fe fbf5 	bl	800f268 <net_set_gw>
 8010a7e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8010a82:	b118      	cbz	r0, 8010a8c <Network::SetGatewayIp(unsigned int)+0x20>
 8010a84:	6803      	ldr	r3, [r0, #0]
 8010a86:	4629      	mov	r1, r5
 8010a88:	691b      	ldr	r3, [r3, #16]
 8010a8a:	4798      	blx	r3
 8010a8c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8010a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a94:	f001 bd12 	b.w	80124bc <NetworkDisplay::ShowGatewayIp()>
 8010a98:	bd38      	pop	{r3, r4, r5, pc}
	...

08010a9c <Network::EnableDhcp()>:
 8010a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a9e:	4e23      	ldr	r6, [pc, #140]	; (8010b2c <Network::EnableDhcp()+0x90>)
 8010aa0:	4604      	mov	r4, r0
 8010aa2:	6833      	ldr	r3, [r6, #0]
 8010aa4:	b085      	sub	sp, #20
 8010aa6:	791f      	ldrb	r7, [r3, #4]
 8010aa8:	b137      	cbz	r7, 8010ab8 <Network::EnableDhcp()+0x1c>
 8010aaa:	2200      	movs	r2, #0
 8010aac:	2104      	movs	r1, #4
 8010aae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010ab2:	711a      	strb	r2, [r3, #4]
 8010ab4:	f003 fb7a 	bl	80141ac <fwdgt_config>
 8010ab8:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
 8010abc:	2101      	movs	r1, #1
 8010abe:	4628      	mov	r0, r5
 8010ac0:	f001 fd08 	bl	80124d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010ac4:	1ce2      	adds	r2, r4, #3
 8010ac6:	f104 011c 	add.w	r1, r4, #28
 8010aca:	a801      	add	r0, sp, #4
 8010acc:	f7fe fbd4 	bl	800f278 <net_set_dhcp>
 8010ad0:	78e3      	ldrb	r3, [r4, #3]
 8010ad2:	7060      	strb	r0, [r4, #1]
 8010ad4:	b343      	cbz	r3, 8010b28 <Network::EnableDhcp()+0x8c>
 8010ad6:	2104      	movs	r1, #4
 8010ad8:	4628      	mov	r0, r5
 8010ada:	f001 fcfb 	bl	80124d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>
 8010ade:	b16f      	cbz	r7, 8010afc <Network::EnableDhcp()+0x60>
 8010ae0:	2102      	movs	r1, #2
 8010ae2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010ae6:	6836      	ldr	r6, [r6, #0]
 8010ae8:	f003 fb60 	bl	80141ac <fwdgt_config>
 8010aec:	2801      	cmp	r0, #1
 8010aee:	bf0c      	ite	eq
 8010af0:	2301      	moveq	r3, #1
 8010af2:	2300      	movne	r3, #0
 8010af4:	7133      	strb	r3, [r6, #4]
 8010af6:	d101      	bne.n	8010afc <Network::EnableDhcp()+0x60>
 8010af8:	f003 fb48 	bl	801418c <fwdgt_enable>
 8010afc:	9b01      	ldr	r3, [sp, #4]
 8010afe:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8010b02:	6123      	str	r3, [r4, #16]
 8010b04:	9b02      	ldr	r3, [sp, #8]
 8010b06:	61a3      	str	r3, [r4, #24]
 8010b08:	9b03      	ldr	r3, [sp, #12]
 8010b0a:	6163      	str	r3, [r4, #20]
 8010b0c:	b118      	cbz	r0, 8010b16 <Network::EnableDhcp()+0x7a>
 8010b0e:	6803      	ldr	r3, [r0, #0]
 8010b10:	7861      	ldrb	r1, [r4, #1]
 8010b12:	699b      	ldr	r3, [r3, #24]
 8010b14:	4798      	blx	r3
 8010b16:	4628      	mov	r0, r5
 8010b18:	f001 fcc4 	bl	80124a4 <NetworkDisplay::ShowIp()>
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	f001 fcc7 	bl	80124b0 <NetworkDisplay::ShowNetMask()>
 8010b22:	7860      	ldrb	r0, [r4, #1]
 8010b24:	b005      	add	sp, #20
 8010b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b28:	2102      	movs	r1, #2
 8010b2a:	e7d5      	b.n	8010ad8 <Network::EnableDhcp()+0x3c>
 8010b2c:	2000a964 	andcs	sl, r0, r4, ror #18

08010b30 <Network::Print()>:
 8010b30:	b530      	push	{r4, r5, lr}
 8010b32:	4604      	mov	r4, r0
 8010b34:	b085      	sub	sp, #20
 8010b36:	4832      	ldr	r0, [pc, #200]	; (8010c00 <Network::Print()+0xd0>)
 8010b38:	f003 f8b4 	bl	8013ca4 <printf>
 8010b3c:	f104 011c 	add.w	r1, r4, #28
 8010b40:	4830      	ldr	r0, [pc, #192]	; (8010c04 <Network::Print()+0xd4>)
 8010b42:	f003 f8af 	bl	8013ca4 <printf>
 8010b46:	6861      	ldr	r1, [r4, #4]
 8010b48:	f104 02a2 	add.w	r2, r4, #162	; 0xa2
 8010b4c:	482e      	ldr	r0, [pc, #184]	; (8010c08 <Network::Print()+0xd8>)
 8010b4e:	f003 f8a9 	bl	8013ca4 <printf>
 8010b52:	69a0      	ldr	r0, [r4, #24]
 8010b54:	f7f7 f81a 	bl	8007b8c <__popcountsi2>
 8010b58:	6925      	ldr	r5, [r4, #16]
 8010b5a:	9001      	str	r0, [sp, #4]
 8010b5c:	0e2b      	lsrs	r3, r5, #24
 8010b5e:	9300      	str	r3, [sp, #0]
 8010b60:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8010b64:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8010b68:	b2e9      	uxtb	r1, r5
 8010b6a:	4828      	ldr	r0, [pc, #160]	; (8010c0c <Network::Print()+0xdc>)
 8010b6c:	f003 f89a 	bl	8013ca4 <printf>
 8010b70:	69a1      	ldr	r1, [r4, #24]
 8010b72:	4827      	ldr	r0, [pc, #156]	; (8010c10 <Network::Print()+0xe0>)
 8010b74:	0e0b      	lsrs	r3, r1, #24
 8010b76:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010b7a:	9300      	str	r3, [sp, #0]
 8010b7c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010b80:	b2c9      	uxtb	r1, r1
 8010b82:	f003 f88f 	bl	8013ca4 <printf>
 8010b86:	6961      	ldr	r1, [r4, #20]
 8010b88:	4822      	ldr	r0, [pc, #136]	; (8010c14 <Network::Print()+0xe4>)
 8010b8a:	0e0b      	lsrs	r3, r1, #24
 8010b8c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010b90:	9300      	str	r3, [sp, #0]
 8010b92:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010b96:	b2c9      	uxtb	r1, r1
 8010b98:	f003 f884 	bl	8013ca4 <printf>
 8010b9c:	69a3      	ldr	r3, [r4, #24]
 8010b9e:	6921      	ldr	r1, [r4, #16]
 8010ba0:	481d      	ldr	r0, [pc, #116]	; (8010c18 <Network::Print()+0xe8>)
 8010ba2:	ea61 0103 	orn	r1, r1, r3
 8010ba6:	0e0b      	lsrs	r3, r1, #24
 8010ba8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8010bac:	9300      	str	r3, [sp, #0]
 8010bae:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8010bb2:	b2c9      	uxtb	r1, r1
 8010bb4:	f003 f876 	bl	8013ca4 <printf>
 8010bb8:	f894 30a1 	ldrb.w	r3, [r4, #161]	; 0xa1
 8010bbc:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 8010bc0:	9302      	str	r3, [sp, #8]
 8010bc2:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 8010bc6:	f894 109c 	ldrb.w	r1, [r4, #156]	; 0x9c
 8010bca:	9301      	str	r3, [sp, #4]
 8010bcc:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8010bd0:	4812      	ldr	r0, [pc, #72]	; (8010c1c <Network::Print()+0xec>)
 8010bd2:	9300      	str	r3, [sp, #0]
 8010bd4:	f894 309e 	ldrb.w	r3, [r4, #158]	; 0x9e
 8010bd8:	f003 f864 	bl	8013ca4 <printf>
 8010bdc:	4b10      	ldr	r3, [pc, #64]	; (8010c20 <Network::Print()+0xf0>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	78da      	ldrb	r2, [r3, #3]
 8010be2:	b952      	cbnz	r2, 8010bfa <Network::Print()+0xca>
 8010be4:	785b      	ldrb	r3, [r3, #1]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	bf14      	ite	ne
 8010bea:	2144      	movne	r1, #68	; 0x44
 8010bec:	2153      	moveq	r1, #83	; 0x53
 8010bee:	480d      	ldr	r0, [pc, #52]	; (8010c24 <Network::Print()+0xf4>)
 8010bf0:	b005      	add	sp, #20
 8010bf2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bf6:	f003 b855 	b.w	8013ca4 <printf>
 8010bfa:	215a      	movs	r1, #90	; 0x5a
 8010bfc:	e7f7      	b.n	8010bee <Network::Print()+0xbe>
 8010bfe:	bf00      	nop
 8010c00:	08017800 	stmdaeq	r1, {fp, ip, sp, lr}
 8010c04:	08017809 	stmdaeq	r1, {r0, r3, fp, ip, sp, lr}
 8010c08:	0801781a 	stmdaeq	r1, {r1, r3, r4, fp, ip, sp, lr}
 8010c0c:	0801782f 	stmdaeq	r1, {r0, r1, r2, r3, r5, fp, ip, sp, lr}
 8010c10:	0801784c 	stmdaeq	r1, {r2, r3, r6, fp, ip, sp, lr}
 8010c14:	08017866 	stmdaeq	r1, {r1, r2, r5, r6, fp, ip, sp, lr}
 8010c18:	08017880 	stmdaeq	r1, {r7, fp, ip, sp, lr}
 8010c1c:	0801789a 	stmdaeq	r1, {r1, r3, r4, r7, fp, ip, sp, lr}
 8010c20:	2000a298 	mulcs	r0, r8, r2
 8010c24:	080178c6 	stmdaeq	r1, {r1, r2, r6, r7, fp, ip, sp, lr}

08010c28 <Network::TcpBegin(unsigned short)>:
 8010c28:	4608      	mov	r0, r1
 8010c2a:	f7fe bed3 	b.w	800f9d4 <tcp_begin>

08010c2e <Network::TcpRead(int, unsigned char const**)>:
 8010c2e:	4608      	mov	r0, r1
 8010c30:	4611      	mov	r1, r2
 8010c32:	f7fe bf0d 	b.w	800fa50 <tcp_read>

08010c36 <Network::TcpWrite(int, unsigned char const*, unsigned short)>:
 8010c36:	4608      	mov	r0, r1
 8010c38:	4611      	mov	r1, r2
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	f7fe bee4 	b.w	800fa08 <tcp_write>

08010c40 <NetworkParams::NetworkParams(NetworkParamsStore*)>:
 8010c40:	b510      	push	{r4, lr}
 8010c42:	225e      	movs	r2, #94	; 0x5e
 8010c44:	4604      	mov	r4, r0
 8010c46:	f840 1b04 	str.w	r1, [r0], #4
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	f002 fcfa 	bl	8013644 <memset>
 8010c50:	2301      	movs	r3, #1
 8010c52:	4620      	mov	r0, r4
 8010c54:	7623      	strb	r3, [r4, #24]
 8010c56:	bd10      	pop	{r4, pc}

08010c58 <NetworkParams::Load()>:
 8010c58:	b508      	push	{r3, lr}
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	4601      	mov	r1, r0
 8010c5e:	6043      	str	r3, [r0, #4]
 8010c60:	6800      	ldr	r0, [r0, #0]
 8010c62:	b120      	cbz	r0, 8010c6e <NetworkParams::Load()+0x16>
 8010c64:	6803      	ldr	r3, [r0, #0]
 8010c66:	3104      	adds	r1, #4
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	4798      	blx	r3
 8010c6c:	2001      	movs	r0, #1
 8010c6e:	bd08      	pop	{r3, pc}

08010c70 <NetworkParams::Load(char const*, unsigned int)>:
 8010c70:	6803      	ldr	r3, [r0, #0]
 8010c72:	b1d3      	cbz	r3, 8010caa <NetworkParams::Load(char const*, unsigned int)+0x3a>
 8010c74:	2300      	movs	r3, #0
 8010c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c78:	460d      	mov	r5, r1
 8010c7a:	4616      	mov	r6, r2
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	6043      	str	r3, [r0, #4]
 8010c80:	4602      	mov	r2, r0
 8010c82:	490a      	ldr	r1, [pc, #40]	; (8010cac <NetworkParams::Load(char const*, unsigned int)+0x3c>)
 8010c84:	4668      	mov	r0, sp
 8010c86:	f001 fda9 	bl	80127dc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8010c8a:	4632      	mov	r2, r6
 8010c8c:	4629      	mov	r1, r5
 8010c8e:	4668      	mov	r0, sp
 8010c90:	f001 fda8 	bl	80127e4 <ReadConfigFile::Read(char const*, unsigned int)>
 8010c94:	4621      	mov	r1, r4
 8010c96:	f851 0b04 	ldr.w	r0, [r1], #4
 8010c9a:	6803      	ldr	r3, [r0, #0]
 8010c9c:	689b      	ldr	r3, [r3, #8]
 8010c9e:	4798      	blx	r3
 8010ca0:	4668      	mov	r0, sp
 8010ca2:	f001 fd9e 	bl	80127e2 <ReadConfigFile::~ReadConfigFile()>
 8010ca6:	b002      	add	sp, #8
 8010ca8:	bd70      	pop	{r4, r5, r6, pc}
 8010caa:	4770      	bx	lr
 8010cac:	08010e3d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r9, sl, fp}

08010cb0 <NetworkParams::callbackFunction(char const*)>:
 8010cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8010cb2:	460d      	mov	r5, r1
 8010cb4:	4604      	mov	r4, r0
 8010cb6:	4959      	ldr	r1, [pc, #356]	; (8010e1c <NetworkParams::callbackFunction(char const*)+0x16c>)
 8010cb8:	4628      	mov	r0, r5
 8010cba:	f10d 0203 	add.w	r2, sp, #3
 8010cbe:	f001 fef3 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010cc2:	b978      	cbnz	r0, 8010ce4 <NetworkParams::callbackFunction(char const*)+0x34>
 8010cc4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010cc8:	6863      	ldr	r3, [r4, #4]
 8010cca:	b142      	cbz	r2, 8010cde <NetworkParams::callbackFunction(char const*)+0x2e>
 8010ccc:	f023 0301 	bic.w	r3, r3, #1
 8010cd0:	3a00      	subs	r2, #0
 8010cd2:	bf18      	it	ne
 8010cd4:	2201      	movne	r2, #1
 8010cd6:	6063      	str	r3, [r4, #4]
 8010cd8:	7622      	strb	r2, [r4, #24]
 8010cda:	b004      	add	sp, #16
 8010cdc:	bd70      	pop	{r4, r5, r6, pc}
 8010cde:	f043 0301 	orr.w	r3, r3, #1
 8010ce2:	e7f5      	b.n	8010cd0 <NetworkParams::callbackFunction(char const*)+0x20>
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	494e      	ldr	r1, [pc, #312]	; (8010e20 <NetworkParams::callbackFunction(char const*)+0x170>)
 8010ce8:	f10d 0203 	add.w	r2, sp, #3
 8010cec:	f001 fedc 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8010cf0:	b980      	cbnz	r0, 8010d14 <NetworkParams::callbackFunction(char const*)+0x64>
 8010cf2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010cf6:	6863      	ldr	r3, [r4, #4]
 8010cf8:	1e51      	subs	r1, r2, #1
 8010cfa:	2904      	cmp	r1, #4
 8010cfc:	bf97      	itett	ls
 8010cfe:	f443 7380 	orrls.w	r3, r3, #256	; 0x100
 8010d02:	f423 7380 	bichi.w	r3, r3, #256	; 0x100
 8010d06:	6063      	strls	r3, [r4, #4]
 8010d08:	f884 2061 	strbls.w	r2, [r4, #97]	; 0x61
 8010d0c:	bf84      	itt	hi
 8010d0e:	6063      	strhi	r3, [r4, #4]
 8010d10:	f884 0061 	strbhi.w	r0, [r4, #97]	; 0x61
 8010d14:	4628      	mov	r0, r5
 8010d16:	4943      	ldr	r1, [pc, #268]	; (8010e24 <NetworkParams::callbackFunction(char const*)+0x174>)
 8010d18:	aa01      	add	r2, sp, #4
 8010d1a:	f001 fe3e 	bl	801299a <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010d1e:	b9c8      	cbnz	r0, 8010d54 <NetworkParams::callbackFunction(char const*)+0xa4>
 8010d20:	9b01      	ldr	r3, [sp, #4]
 8010d22:	b2d9      	uxtb	r1, r3
 8010d24:	29ac      	cmp	r1, #172	; 0xac
 8010d26:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010d2a:	d009      	beq.n	8010d40 <NetworkParams::callbackFunction(char const*)+0x90>
 8010d2c:	29c0      	cmp	r1, #192	; 0xc0
 8010d2e:	d00b      	beq.n	8010d48 <NetworkParams::callbackFunction(char const*)+0x98>
 8010d30:	290a      	cmp	r1, #10
 8010d32:	d10c      	bne.n	8010d4e <NetworkParams::callbackFunction(char const*)+0x9e>
 8010d34:	60a3      	str	r3, [r4, #8]
 8010d36:	6863      	ldr	r3, [r4, #4]
 8010d38:	f043 0302 	orr.w	r3, r3, #2
 8010d3c:	6063      	str	r3, [r4, #4]
 8010d3e:	e7cc      	b.n	8010cda <NetworkParams::callbackFunction(char const*)+0x2a>
 8010d40:	3a10      	subs	r2, #16
 8010d42:	2a0f      	cmp	r2, #15
 8010d44:	d8c9      	bhi.n	8010cda <NetworkParams::callbackFunction(char const*)+0x2a>
 8010d46:	e7f5      	b.n	8010d34 <NetworkParams::callbackFunction(char const*)+0x84>
 8010d48:	2aa8      	cmp	r2, #168	; 0xa8
 8010d4a:	d1c6      	bne.n	8010cda <NetworkParams::callbackFunction(char const*)+0x2a>
 8010d4c:	e7f2      	b.n	8010d34 <NetworkParams::callbackFunction(char const*)+0x84>
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d0f0      	beq.n	8010d34 <NetworkParams::callbackFunction(char const*)+0x84>
 8010d52:	e7c2      	b.n	8010cda <NetworkParams::callbackFunction(char const*)+0x2a>
 8010d54:	4628      	mov	r0, r5
 8010d56:	4934      	ldr	r1, [pc, #208]	; (8010e28 <NetworkParams::callbackFunction(char const*)+0x178>)
 8010d58:	aa01      	add	r2, sp, #4
 8010d5a:	f001 fe1e 	bl	801299a <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010d5e:	b960      	cbnz	r0, 8010d7a <NetworkParams::callbackFunction(char const*)+0xca>
 8010d60:	9b01      	ldr	r3, [sp, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d0b9      	beq.n	8010cda <NetworkParams::callbackFunction(char const*)+0x2a>
 8010d66:	ba1a      	rev	r2, r3
 8010d68:	43d1      	mvns	r1, r2
 8010d6a:	ea12 0251 	ands.w	r2, r2, r1, lsr #1
 8010d6e:	d1b4      	bne.n	8010cda <NetworkParams::callbackFunction(char const*)+0x2a>
 8010d70:	60e3      	str	r3, [r4, #12]
 8010d72:	6863      	ldr	r3, [r4, #4]
 8010d74:	f043 0304 	orr.w	r3, r3, #4
 8010d78:	e7e0      	b.n	8010d3c <NetworkParams::callbackFunction(char const*)+0x8c>
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	492b      	ldr	r1, [pc, #172]	; (8010e2c <NetworkParams::callbackFunction(char const*)+0x17c>)
 8010d7e:	aa01      	add	r2, sp, #4
 8010d80:	f001 fe0b 	bl	801299a <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010d84:	b928      	cbnz	r0, 8010d92 <NetworkParams::callbackFunction(char const*)+0xe2>
 8010d86:	9b01      	ldr	r3, [sp, #4]
 8010d88:	6123      	str	r3, [r4, #16]
 8010d8a:	6863      	ldr	r3, [r4, #4]
 8010d8c:	f043 0308 	orr.w	r3, r3, #8
 8010d90:	e7d4      	b.n	8010d3c <NetworkParams::callbackFunction(char const*)+0x8c>
 8010d92:	233f      	movs	r3, #63	; 0x3f
 8010d94:	4628      	mov	r0, r5
 8010d96:	9302      	str	r3, [sp, #8]
 8010d98:	4925      	ldr	r1, [pc, #148]	; (8010e30 <NetworkParams::callbackFunction(char const*)+0x180>)
 8010d9a:	ab02      	add	r3, sp, #8
 8010d9c:	f104 0219 	add.w	r2, r4, #25
 8010da0:	f001 fd54 	bl	801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>
 8010da4:	b930      	cbnz	r0, 8010db4 <NetworkParams::callbackFunction(char const*)+0x104>
 8010da6:	9b02      	ldr	r3, [sp, #8]
 8010da8:	4423      	add	r3, r4
 8010daa:	7658      	strb	r0, [r3, #25]
 8010dac:	6863      	ldr	r3, [r4, #4]
 8010dae:	f043 0320 	orr.w	r3, r3, #32
 8010db2:	e7c3      	b.n	8010d3c <NetworkParams::callbackFunction(char const*)+0x8c>
 8010db4:	4628      	mov	r0, r5
 8010db6:	491f      	ldr	r1, [pc, #124]	; (8010e34 <NetworkParams::callbackFunction(char const*)+0x184>)
 8010db8:	aa01      	add	r2, sp, #4
 8010dba:	f001 fdee 	bl	801299a <Sscan::IpAddress(char const*, char const*, unsigned int&)>
 8010dbe:	b958      	cbnz	r0, 8010dd8 <NetworkParams::callbackFunction(char const*)+0x128>
 8010dc0:	9a01      	ldr	r2, [sp, #4]
 8010dc2:	6863      	ldr	r3, [r4, #4]
 8010dc4:	b12a      	cbz	r2, 8010dd2 <NetworkParams::callbackFunction(char const*)+0x122>
 8010dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dca:	6063      	str	r3, [r4, #4]
 8010dcc:	f8c4 2059 	str.w	r2, [r4, #89]	; 0x59
 8010dd0:	e783      	b.n	8010cda <NetworkParams::callbackFunction(char const*)+0x2a>
 8010dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dd6:	e7f8      	b.n	8010dca <NetworkParams::callbackFunction(char const*)+0x11a>
 8010dd8:	4628      	mov	r0, r5
 8010dda:	4917      	ldr	r1, [pc, #92]	; (8010e38 <NetworkParams::callbackFunction(char const*)+0x188>)
 8010ddc:	aa03      	add	r2, sp, #12
 8010dde:	f001 fd4e 	bl	801287e <Sscan::Float(char const*, char const*, float&)>
 8010de2:	2800      	cmp	r0, #0
 8010de4:	f47f af79 	bne.w	8010cda <NetworkParams::callbackFunction(char const*)+0x2a>
 8010de8:	9e03      	ldr	r6, [sp, #12]
 8010dea:	6865      	ldr	r5, [r4, #4]
 8010dec:	4630      	mov	r0, r6
 8010dee:	f7f6 fe8f 	bl	8007b10 <__aeabi_f2iz>
 8010df2:	300c      	adds	r0, #12
 8010df4:	281a      	cmp	r0, #26
 8010df6:	d80a      	bhi.n	8010e0e <NetworkParams::callbackFunction(char const*)+0x15e>
 8010df8:	2100      	movs	r1, #0
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f7f6 fe56 	bl	8007aac <__aeabi_fcmpeq>
 8010e00:	b928      	cbnz	r0, 8010e0e <NetworkParams::callbackFunction(char const*)+0x15e>
 8010e02:	f8c4 605d 	str.w	r6, [r4, #93]	; 0x5d
 8010e06:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8010e0a:	6065      	str	r5, [r4, #4]
 8010e0c:	e765      	b.n	8010cda <NetworkParams::callbackFunction(char const*)+0x2a>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8010e14:	f8c4 305d 	str.w	r3, [r4, #93]	; 0x5d
 8010e18:	e7f7      	b.n	8010e0a <NetworkParams::callbackFunction(char const*)+0x15a>
 8010e1a:	bf00      	nop
 8010e1c:	08017943 	stmdaeq	r1, {r0, r1, r6, r8, fp, ip, sp, lr}
 8010e20:	08017921 	stmdaeq	r1, {r0, r5, r8, fp, ip, sp, lr}
 8010e24:	080178ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, fp, ip, sp, lr}
 8010e28:	0801793a 	stmdaeq	r1, {r1, r3, r4, r5, r8, fp, ip, sp, lr}
 8010e2c:	08017911 	stmdaeq	r1, {r0, r4, r8, fp, ip, sp, lr}
 8010e30:	08017931 	stmdaeq	r1, {r0, r4, r5, r8, fp, ip, sp, lr}
 8010e34:	080178f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, fp, ip, sp, lr}
 8010e38:	08017902 	stmdaeq	r1, {r1, r8, fp, ip, sp, lr}

08010e3c <NetworkParams::staticCallbackFunction(void*, char const*)>:
 8010e3c:	f7ff bf38 	b.w	8010cb0 <NetworkParams::callbackFunction(char const*)>

08010e40 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>:
 8010e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e42:	4604      	mov	r4, r0
 8010e44:	4615      	mov	r5, r2
 8010e46:	461e      	mov	r6, r3
 8010e48:	b089      	sub	sp, #36	; 0x24
 8010e4a:	3004      	adds	r0, #4
 8010e4c:	2900      	cmp	r1, #0
 8010e4e:	d040      	beq.n	8010ed2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x92>
 8010e50:	225e      	movs	r2, #94	; 0x5e
 8010e52:	f002 fbe0 	bl	8013616 <memmove>
 8010e56:	462a      	mov	r2, r5
 8010e58:	4633      	mov	r3, r6
 8010e5a:	498f      	ldr	r1, [pc, #572]	; (8011098 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x258>)
 8010e5c:	a805      	add	r0, sp, #20
 8010e5e:	f001 fbed 	bl	801263c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 8010e62:	6863      	ldr	r3, [r4, #4]
 8010e64:	f104 0519 	add.w	r5, r4, #25
 8010e68:	0798      	lsls	r0, r3, #30
 8010e6a:	bf5f      	itttt	pl
 8010e6c:	4a8b      	ldrpl	r2, [pc, #556]	; (801109c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x25c>)
 8010e6e:	6812      	ldrpl	r2, [r2, #0]
 8010e70:	6912      	ldrpl	r2, [r2, #16]
 8010e72:	60a2      	strpl	r2, [r4, #8]
 8010e74:	0759      	lsls	r1, r3, #29
 8010e76:	bf5f      	itttt	pl
 8010e78:	4a88      	ldrpl	r2, [pc, #544]	; (801109c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x25c>)
 8010e7a:	6812      	ldrpl	r2, [r2, #0]
 8010e7c:	6992      	ldrpl	r2, [r2, #24]
 8010e7e:	60e2      	strpl	r2, [r4, #12]
 8010e80:	071a      	lsls	r2, r3, #28
 8010e82:	bf5f      	itttt	pl
 8010e84:	4a85      	ldrpl	r2, [pc, #532]	; (801109c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x25c>)
 8010e86:	6812      	ldrpl	r2, [r2, #0]
 8010e88:	6952      	ldrpl	r2, [r2, #20]
 8010e8a:	6122      	strpl	r2, [r4, #16]
 8010e8c:	069b      	lsls	r3, r3, #26
 8010e8e:	d40c      	bmi.n	8010eaa <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x6a>
 8010e90:	4628      	mov	r0, r5
 8010e92:	223f      	movs	r2, #63	; 0x3f
 8010e94:	4b81      	ldr	r3, [pc, #516]	; (801109c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x25c>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	331b      	adds	r3, #27
 8010e9a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8010e9e:	b9f9      	cbnz	r1, 8010ee0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xa0>
 8010ea0:	f002 fbd0 	bl	8013644 <memset>
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8010eaa:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8010eae:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8010eb2:	42b1      	cmp	r1, r6
 8010eb4:	d227      	bcs.n	8010f06 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xc6>
 8010eb6:	9805      	ldr	r0, [sp, #20]
 8010eb8:	1a76      	subs	r6, r6, r1
 8010eba:	4408      	add	r0, r1
 8010ebc:	6861      	ldr	r1, [r4, #4]
 8010ebe:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8010ec2:	07cf      	lsls	r7, r1, #31
 8010ec4:	7e23      	ldrb	r3, [r4, #24]
 8010ec6:	d410      	bmi.n	8010eea <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xaa>
 8010ec8:	b982      	cbnz	r2, 8010eec <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xac>
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	4a74      	ldr	r2, [pc, #464]	; (80110a0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x260>)
 8010ece:	4b75      	ldr	r3, [pc, #468]	; (80110a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x264>)
 8010ed0:	e00f      	b.n	8010ef2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xb2>
 8010ed2:	6823      	ldr	r3, [r4, #0]
 8010ed4:	4601      	mov	r1, r0
 8010ed6:	681a      	ldr	r2, [r3, #0]
 8010ed8:	4618      	mov	r0, r3
 8010eda:	68d2      	ldr	r2, [r2, #12]
 8010edc:	4790      	blx	r2
 8010ede:	e7ba      	b.n	8010e56 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x16>
 8010ee0:	3a01      	subs	r2, #1
 8010ee2:	f800 1b01 	strb.w	r1, [r0], #1
 8010ee6:	d1d8      	bne.n	8010e9a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x5a>
 8010ee8:	e7dc      	b.n	8010ea4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x64>
 8010eea:	b30a      	cbz	r2, 8010f30 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf0>
 8010eec:	9300      	str	r3, [sp, #0]
 8010eee:	4a6e      	ldr	r2, [pc, #440]	; (80110a8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x268>)
 8010ef0:	4b6c      	ldr	r3, [pc, #432]	; (80110a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x264>)
 8010ef2:	4631      	mov	r1, r6
 8010ef4:	f002 fefe 	bl	8013cf4 <snprintf>
 8010ef8:	4286      	cmp	r6, r0
 8010efa:	bfa2      	ittt	ge
 8010efc:	f8bd 301a 	ldrhge.w	r3, [sp, #26]
 8010f00:	18c0      	addge	r0, r0, r3
 8010f02:	f8ad 001a 	strhge.w	r0, [sp, #26]
 8010f06:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8010f0a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8010f0e:	42b1      	cmp	r1, r6
 8010f10:	d221      	bcs.n	8010f56 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x116>
 8010f12:	9805      	ldr	r0, [sp, #20]
 8010f14:	1a76      	subs	r6, r6, r1
 8010f16:	4408      	add	r0, r1
 8010f18:	6861      	ldr	r1, [r4, #4]
 8010f1a:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8010f1e:	05c9      	lsls	r1, r1, #23
 8010f20:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8010f24:	d408      	bmi.n	8010f38 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xf8>
 8010f26:	b94a      	cbnz	r2, 8010f3c <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xfc>
 8010f28:	9300      	str	r3, [sp, #0]
 8010f2a:	4a5d      	ldr	r2, [pc, #372]	; (80110a0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x260>)
 8010f2c:	4b5f      	ldr	r3, [pc, #380]	; (80110ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x26c>)
 8010f2e:	e008      	b.n	8010f42 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x102>
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	4a5f      	ldr	r2, [pc, #380]	; (80110b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x270>)
 8010f34:	4b5b      	ldr	r3, [pc, #364]	; (80110a4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x264>)
 8010f36:	e7dc      	b.n	8010ef2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0xb2>
 8010f38:	2a00      	cmp	r2, #0
 8010f3a:	d03c      	beq.n	8010fb6 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x176>
 8010f3c:	9300      	str	r3, [sp, #0]
 8010f3e:	4a5a      	ldr	r2, [pc, #360]	; (80110a8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x268>)
 8010f40:	4b5a      	ldr	r3, [pc, #360]	; (80110ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x26c>)
 8010f42:	4631      	mov	r1, r6
 8010f44:	f002 fed6 	bl	8013cf4 <snprintf>
 8010f48:	4286      	cmp	r6, r0
 8010f4a:	bfa2      	ittt	ge
 8010f4c:	f8bd 301a 	ldrhge.w	r3, [sp, #26]
 8010f50:	18c0      	addge	r0, r0, r3
 8010f52:	f8ad 001a 	strhge.w	r0, [sp, #26]
 8010f56:	4957      	ldr	r1, [pc, #348]	; (80110b4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x274>)
 8010f58:	a805      	add	r0, sp, #20
 8010f5a:	f001 fbf5 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 8010f5e:	6863      	ldr	r3, [r4, #4]
 8010f60:	68a2      	ldr	r2, [r4, #8]
 8010f62:	4955      	ldr	r1, [pc, #340]	; (80110b8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x278>)
 8010f64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8010f68:	a805      	add	r0, sp, #20
 8010f6a:	f001 fba9 	bl	80126c0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010f6e:	6863      	ldr	r3, [r4, #4]
 8010f70:	68e2      	ldr	r2, [r4, #12]
 8010f72:	4952      	ldr	r1, [pc, #328]	; (80110bc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x27c>)
 8010f74:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010f78:	a805      	add	r0, sp, #20
 8010f7a:	f001 fba1 	bl	80126c0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010f7e:	6863      	ldr	r3, [r4, #4]
 8010f80:	494f      	ldr	r1, [pc, #316]	; (80110c0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x280>)
 8010f82:	6922      	ldr	r2, [r4, #16]
 8010f84:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010f88:	a805      	add	r0, sp, #20
 8010f8a:	f001 fb99 	bl	80126c0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010f8e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8010f92:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 8010f96:	42b1      	cmp	r1, r6
 8010f98:	d220      	bcs.n	8010fdc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x19c>
 8010f9a:	6862      	ldr	r2, [r4, #4]
 8010f9c:	9805      	ldr	r0, [sp, #20]
 8010f9e:	0692      	lsls	r2, r2, #26
 8010fa0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8010fa4:	4408      	add	r0, r1
 8010fa6:	eba6 0601 	sub.w	r6, r6, r1
 8010faa:	d408      	bmi.n	8010fbe <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x17e>
 8010fac:	b94b      	cbnz	r3, 8010fc2 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x182>
 8010fae:	4b45      	ldr	r3, [pc, #276]	; (80110c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x284>)
 8010fb0:	4a45      	ldr	r2, [pc, #276]	; (80110c8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x288>)
 8010fb2:	9500      	str	r5, [sp, #0]
 8010fb4:	e008      	b.n	8010fc8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x188>
 8010fb6:	9300      	str	r3, [sp, #0]
 8010fb8:	4a3d      	ldr	r2, [pc, #244]	; (80110b0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x270>)
 8010fba:	4b3c      	ldr	r3, [pc, #240]	; (80110ac <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x26c>)
 8010fbc:	e7c1      	b.n	8010f42 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x102>
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d035      	beq.n	801102e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1ee>
 8010fc2:	4b40      	ldr	r3, [pc, #256]	; (80110c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x284>)
 8010fc4:	4a41      	ldr	r2, [pc, #260]	; (80110cc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x28c>)
 8010fc6:	9500      	str	r5, [sp, #0]
 8010fc8:	4631      	mov	r1, r6
 8010fca:	f002 fe93 	bl	8013cf4 <snprintf>
 8010fce:	4286      	cmp	r6, r0
 8010fd0:	bfa2      	ittt	ge
 8010fd2:	f8bd 301a 	ldrhge.w	r3, [sp, #26]
 8010fd6:	18c0      	addge	r0, r0, r3
 8010fd8:	f8ad 001a 	strhge.w	r0, [sp, #26]
 8010fdc:	493c      	ldr	r1, [pc, #240]	; (80110d0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x290>)
 8010fde:	a805      	add	r0, sp, #20
 8010fe0:	f001 fbb2 	bl	8012748 <PropertiesBuilder::AddComment(char const*)>
 8010fe4:	6863      	ldr	r3, [r4, #4]
 8010fe6:	f8d4 2059 	ldr.w	r2, [r4, #89]	; 0x59
 8010fea:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8010fee:	4939      	ldr	r1, [pc, #228]	; (80110d4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x294>)
 8010ff0:	a805      	add	r0, sp, #20
 8010ff2:	f001 fb65 	bl	80126c0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>
 8010ff6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8010ffa:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8010ffe:	42ab      	cmp	r3, r5
 8011000:	d22a      	bcs.n	8011058 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x218>
 8011002:	9f05      	ldr	r7, [sp, #20]
 8011004:	f8d4 005d 	ldr.w	r0, [r4, #93]	; 0x5d
 8011008:	441f      	add	r7, r3
 801100a:	1aed      	subs	r5, r5, r3
 801100c:	f7f6 fa04 	bl	8007418 <__aeabi_f2d>
 8011010:	6863      	ldr	r3, [r4, #4]
 8011012:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8011016:	f013 0f80 	tst.w	r3, #128	; 0x80
 801101a:	f04f 0301 	mov.w	r3, #1
 801101e:	d10a      	bne.n	8011036 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f6>
 8011020:	b956      	cbnz	r6, 8011038 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x1f8>
 8011022:	9300      	str	r3, [sp, #0]
 8011024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011028:	4b2b      	ldr	r3, [pc, #172]	; (80110d8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x298>)
 801102a:	4a2c      	ldr	r2, [pc, #176]	; (80110dc <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x29c>)
 801102c:	e009      	b.n	8011042 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x202>
 801102e:	4b25      	ldr	r3, [pc, #148]	; (80110c4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x284>)
 8011030:	4a2b      	ldr	r2, [pc, #172]	; (80110e0 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a0>)
 8011032:	9500      	str	r5, [sp, #0]
 8011034:	e7c8      	b.n	8010fc8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x188>
 8011036:	b346      	cbz	r6, 801108a <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x24a>
 8011038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801103c:	9300      	str	r3, [sp, #0]
 801103e:	4a29      	ldr	r2, [pc, #164]	; (80110e4 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a4>)
 8011040:	4b25      	ldr	r3, [pc, #148]	; (80110d8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x298>)
 8011042:	4629      	mov	r1, r5
 8011044:	4638      	mov	r0, r7
 8011046:	f002 fe55 	bl	8013cf4 <snprintf>
 801104a:	4285      	cmp	r5, r0
 801104c:	bfa2      	ittt	ge
 801104e:	f8bd 301a 	ldrhge.w	r3, [sp, #26]
 8011052:	18c0      	addge	r0, r0, r3
 8011054:	f8ad 001a 	strhge.w	r0, [sp, #26]
 8011058:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801105c:	b17b      	cbz	r3, 801107e <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x23e>
 801105e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8011062:	9b05      	ldr	r3, [sp, #20]
 8011064:	4413      	add	r3, r2
 8011066:	227d      	movs	r2, #125	; 0x7d
 8011068:	f803 2c01 	strb.w	r2, [r3, #-1]
 801106c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8011070:	9905      	ldr	r1, [sp, #20]
 8011072:	54ca      	strb	r2, [r1, r3]
 8011074:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8011078:	3301      	adds	r3, #1
 801107a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801107e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8011082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011084:	601a      	str	r2, [r3, #0]
 8011086:	b009      	add	sp, #36	; 0x24
 8011088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801108a:	9300      	str	r3, [sp, #0]
 801108c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011090:	4b11      	ldr	r3, [pc, #68]	; (80110d8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x298>)
 8011092:	4a15      	ldr	r2, [pc, #84]	; (80110e8 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x2a8>)
 8011094:	e7d5      	b.n	8011042 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)+0x202>
 8011096:	bf00      	nop
 8011098:	0801794c 	stmdaeq	r1, {r2, r3, r6, r8, fp, ip, sp, lr}
 801109c:	2000a298 	mulcs	r0, r8, r2
 80110a0:	0801607d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sp, lr}
 80110a4:	08017943 	stmdaeq	r1, {r0, r1, r6, r8, fp, ip, sp, lr}
 80110a8:	08016074 	stmdaeq	r1, {r2, r4, r5, r6, sp, lr}
 80110ac:	08017921 	stmdaeq	r1, {r0, r5, r8, fp, ip, sp, lr}
 80110b0:	0801607e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sp, lr}
 80110b4:	080178d7 	stmdaeq	r1, {r0, r1, r2, r4, r6, r7, fp, ip, sp, lr}
 80110b8:	080178ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, fp, ip, sp, lr}
 80110bc:	0801793a 	stmdaeq	r1, {r1, r3, r4, r5, r8, fp, ip, sp, lr}
 80110c0:	08017911 	stmdaeq	r1, {r0, r4, r8, fp, ip, sp, lr}
 80110c4:	08017931 	stmdaeq	r1, {r0, r4, r5, r8, fp, ip, sp, lr}
 80110c8:	08016090 	stmdaeq	r1, {r4, r7, sp, lr}
 80110cc:	08016085 	stmdaeq	r1, {r0, r2, r7, sp, lr}
 80110d0:	080178e1 	stmdaeq	r1, {r0, r5, r6, r7, fp, ip, sp, lr}
 80110d4:	080178f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, fp, ip, sp, lr}
 80110d8:	08017902 	stmdaeq	r1, {r1, r8, fp, ip, sp, lr}
 80110dc:	0801636b 	stmdaeq	r1, {r0, r1, r3, r5, r6, r8, r9, sp, lr}
 80110e0:	08016091 	stmdaeq	r1, {r0, r4, r7, sp, lr}
 80110e4:	08016360 	stmdaeq	r1, {r5, r6, r8, r9, sp, lr}
 80110e8:	0801636c 	stmdaeq	r1, {r2, r3, r5, r6, r8, r9, sp, lr}

080110ec <NetworkParams::Save(char*, unsigned int, unsigned int&)>:
 80110ec:	b513      	push	{r0, r1, r4, lr}
 80110ee:	6804      	ldr	r4, [r0, #0]
 80110f0:	b914      	cbnz	r4, 80110f8 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0xc>
 80110f2:	601c      	str	r4, [r3, #0]
 80110f4:	b002      	add	sp, #8
 80110f6:	bd10      	pop	{r4, pc}
 80110f8:	9300      	str	r3, [sp, #0]
 80110fa:	4613      	mov	r3, r2
 80110fc:	460a      	mov	r2, r1
 80110fe:	2100      	movs	r1, #0
 8011100:	f7ff fe9e 	bl	8010e40 <NetworkParams::Builder(TNetworkParams const*, char*, unsigned int, unsigned int&)>
 8011104:	e7f6      	b.n	80110f4 <NetworkParams::Save(char*, unsigned int, unsigned int&)+0x8>

08011106 <NetworkParams::Dump()>:
 8011106:	4770      	bx	lr

08011108 <memcpy.isra.0>:
 8011108:	3801      	subs	r0, #1
 801110a:	440a      	add	r2, r1
 801110c:	4291      	cmp	r1, r2
 801110e:	d100      	bne.n	8011112 <memcpy.isra.0+0xa>
 8011110:	4770      	bx	lr
 8011112:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011116:	f800 3f01 	strb.w	r3, [r0, #1]!
 801111a:	e7f7      	b.n	801110c <memcpy.isra.0+0x4>

0801111c <arp_announce>:
 801111c:	4803      	ldr	r0, [pc, #12]	; (801112c <arp_announce+0x10>)
 801111e:	69c3      	ldr	r3, [r0, #28]
 8011120:	b113      	cbz	r3, 8011128 <arp_announce+0xc>
 8011122:	212a      	movs	r1, #42	; 0x2a
 8011124:	f003 bc7c 	b.w	8014a20 <emac_eth_send>
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	2000a29c 	mulcs	r0, ip, r2

08011130 <arp_handle_request>:
 8011130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011132:	2204      	movs	r2, #4
 8011134:	f100 0126 	add.w	r1, r0, #38	; 0x26
 8011138:	4604      	mov	r4, r0
 801113a:	eb0d 0002 	add.w	r0, sp, r2
 801113e:	f7ff ffe3 	bl	8011108 <memcpy.isra.0>
 8011142:	4b0d      	ldr	r3, [pc, #52]	; (8011178 <arp_handle_request+0x48>)
 8011144:	9a01      	ldr	r2, [sp, #4]
 8011146:	69db      	ldr	r3, [r3, #28]
 8011148:	429a      	cmp	r2, r3
 801114a:	d113      	bne.n	8011174 <arp_handle_request+0x44>
 801114c:	2206      	movs	r2, #6
 801114e:	4d0b      	ldr	r5, [pc, #44]	; (801117c <arp_handle_request+0x4c>)
 8011150:	18a1      	adds	r1, r4, r2
 8011152:	4628      	mov	r0, r5
 8011154:	f7ff ffd8 	bl	8011108 <memcpy.isra.0>
 8011158:	f104 0116 	add.w	r1, r4, #22
 801115c:	f105 0020 	add.w	r0, r5, #32
 8011160:	2206      	movs	r2, #6
 8011162:	f7ff ffd1 	bl	8011108 <memcpy.isra.0>
 8011166:	69e3      	ldr	r3, [r4, #28]
 8011168:	212a      	movs	r1, #42	; 0x2a
 801116a:	4628      	mov	r0, r5
 801116c:	f8c5 3026 	str.w	r3, [r5, #38]	; 0x26
 8011170:	f003 fc56 	bl	8014a20 <emac_eth_send>
 8011174:	b003      	add	sp, #12
 8011176:	bd30      	pop	{r4, r5, pc}
 8011178:	2000a29c 	mulcs	r0, ip, r2
 801117c:	2000a2c8 	andcs	sl, r0, r8, asr #5

08011180 <arp_handle_reply>:
 8011180:	69c1      	ldr	r1, [r0, #28]
 8011182:	3016      	adds	r0, #22
 8011184:	f000 b8ac 	b.w	80112e0 <arp_cache_update>

08011188 <arp_init>:
 8011188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801118c:	4604      	mov	r4, r0
 801118e:	460d      	mov	r5, r1
 8011190:	f000 f88c 	bl	80112ac <arp_cache_init>
 8011194:	2206      	movs	r2, #6
 8011196:	4621      	mov	r1, r4
 8011198:	482e      	ldr	r0, [pc, #184]	; (8011254 <arp_init+0xcc>)
 801119a:	682f      	ldr	r7, [r5, #0]
 801119c:	f7ff ffb4 	bl	8011108 <memcpy.isra.0>
 80111a0:	4b2d      	ldr	r3, [pc, #180]	; (8011258 <arp_init+0xd0>)
 80111a2:	2507      	movs	r5, #7
 80111a4:	461e      	mov	r6, r3
 80111a6:	22ff      	movs	r2, #255	; 0xff
 80111a8:	3d01      	subs	r5, #1
 80111aa:	d146      	bne.n	801123a <arp_init+0xb2>
 80111ac:	4b2b      	ldr	r3, [pc, #172]	; (801125c <arp_init+0xd4>)
 80111ae:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8011260 <arp_init+0xd8>
 80111b2:	2206      	movs	r2, #6
 80111b4:	e9c6 3803 	strd	r3, r8, [r6, #12]
 80111b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111bc:	4621      	mov	r1, r4
 80111be:	4829      	ldr	r0, [pc, #164]	; (8011264 <arp_init+0xdc>)
 80111c0:	82b3      	strh	r3, [r6, #20]
 80111c2:	f7ff ffa1 	bl	8011108 <memcpy.isra.0>
 80111c6:	2307      	movs	r3, #7
 80111c8:	4a27      	ldr	r2, [pc, #156]	; (8011268 <arp_init+0xe0>)
 80111ca:	61f7      	str	r7, [r6, #28]
 80111cc:	3b01      	subs	r3, #1
 80111ce:	d137      	bne.n	8011240 <arp_init+0xb8>
 80111d0:	2206      	movs	r2, #6
 80111d2:	4621      	mov	r1, r4
 80111d4:	4825      	ldr	r0, [pc, #148]	; (801126c <arp_init+0xe4>)
 80111d6:	f8c6 7026 	str.w	r7, [r6, #38]	; 0x26
 80111da:	f7ff ff95 	bl	8011108 <memcpy.isra.0>
 80111de:	4a24      	ldr	r2, [pc, #144]	; (8011270 <arp_init+0xe8>)
 80111e0:	2306      	movs	r3, #6
 80111e2:	4615      	mov	r5, r2
 80111e4:	21ff      	movs	r1, #255	; 0xff
 80111e6:	3b01      	subs	r3, #1
 80111e8:	d22d      	bcs.n	8011246 <arp_init+0xbe>
 80111ea:	4b1c      	ldr	r3, [pc, #112]	; (801125c <arp_init+0xd4>)
 80111ec:	2206      	movs	r2, #6
 80111ee:	e9c5 3803 	strd	r3, r8, [r5, #12]
 80111f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111f6:	4621      	mov	r1, r4
 80111f8:	481e      	ldr	r0, [pc, #120]	; (8011274 <arp_init+0xec>)
 80111fa:	82ab      	strh	r3, [r5, #20]
 80111fc:	f7ff ff84 	bl	8011108 <memcpy.isra.0>
 8011200:	2307      	movs	r3, #7
 8011202:	2100      	movs	r1, #0
 8011204:	4a1c      	ldr	r2, [pc, #112]	; (8011278 <arp_init+0xf0>)
 8011206:	61ef      	str	r7, [r5, #28]
 8011208:	3b01      	subs	r3, #1
 801120a:	d11f      	bne.n	801124c <arp_init+0xc4>
 801120c:	2206      	movs	r2, #6
 801120e:	4d1b      	ldr	r5, [pc, #108]	; (801127c <arp_init+0xf4>)
 8011210:	4621      	mov	r1, r4
 8011212:	18a8      	adds	r0, r5, r2
 8011214:	f7ff ff78 	bl	8011108 <memcpy.isra.0>
 8011218:	4b10      	ldr	r3, [pc, #64]	; (801125c <arp_init+0xd4>)
 801121a:	4621      	mov	r1, r4
 801121c:	e9c5 3803 	strd	r3, r8, [r5, #12]
 8011220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011224:	f105 0016 	add.w	r0, r5, #22
 8011228:	2206      	movs	r2, #6
 801122a:	82ab      	strh	r3, [r5, #20]
 801122c:	f7ff ff6c 	bl	8011108 <memcpy.isra.0>
 8011230:	61ef      	str	r7, [r5, #28]
 8011232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011236:	f7ff bf71 	b.w	801111c <arp_announce>
 801123a:	f803 2b01 	strb.w	r2, [r3], #1
 801123e:	e7b3      	b.n	80111a8 <arp_init+0x20>
 8011240:	f802 5b01 	strb.w	r5, [r2], #1
 8011244:	e7c2      	b.n	80111cc <arp_init+0x44>
 8011246:	f802 1b01 	strb.w	r1, [r2], #1
 801124a:	e7cc      	b.n	80111e6 <arp_init+0x5e>
 801124c:	f802 1b01 	strb.w	r1, [r2], #1
 8011250:	e7da      	b.n	8011208 <arp_init+0x80>
 8011252:	bf00      	nop
 8011254:	2000a2a2 	andcs	sl, r0, r2, lsr #5
 8011258:	2000a29c 	mulcs	r0, ip, r2
 801125c:	01000608 	tsteq	r0, r8, lsl #12
 8011260:	04060008 	streq	r0, [r6], #-8
 8011264:	2000a2b2 			; <UNDEFINED> instruction: 0x2000a2b2
 8011268:	2000a2bc 			; <UNDEFINED> instruction: 0x2000a2bc
 801126c:	2000a2fa 	strdcs	sl, [r0], -sl	; <UNPREDICTABLE>
 8011270:	2000a2f4 	strdcs	sl, [r0], -r4
 8011274:	2000a30a 	andcs	sl, r0, sl, lsl #6
 8011278:	2000a314 	andcs	sl, r0, r4, lsl r3
 801127c:	2000a2c8 	andcs	sl, r0, r8, asr #5

08011280 <arp_send_request>:
 8011280:	4b03      	ldr	r3, [pc, #12]	; (8011290 <arp_send_request+0x10>)
 8011282:	212a      	movs	r1, #42	; 0x2a
 8011284:	f8c3 0026 	str.w	r0, [r3, #38]	; 0x26
 8011288:	4618      	mov	r0, r3
 801128a:	f003 bbc9 	b.w	8014a20 <emac_eth_send>
 801128e:	bf00      	nop
 8011290:	2000a2f4 	strdcs	sl, [r0], -r4

08011294 <arp_handle>:
 8011294:	8a83      	ldrh	r3, [r0, #20]
 8011296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801129a:	d003      	beq.n	80112a4 <arp_handle+0x10>
 801129c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112a0:	d002      	beq.n	80112a8 <arp_handle+0x14>
 80112a2:	4770      	bx	lr
 80112a4:	f7ff bf44 	b.w	8011130 <arp_handle_request>
 80112a8:	f7ff bf6a 	b.w	8011180 <arp_handle_reply>

080112ac <arp_cache_init>:
 80112ac:	2300      	movs	r3, #0
 80112ae:	4618      	mov	r0, r3
 80112b0:	4a09      	ldr	r2, [pc, #36]	; (80112d8 <arp_cache_init+0x2c>)
 80112b2:	b510      	push	{r4, lr}
 80112b4:	8013      	strh	r3, [r2, #0]
 80112b6:	4a09      	ldr	r2, [pc, #36]	; (80112dc <arp_cache_init+0x30>)
 80112b8:	4611      	mov	r1, r2
 80112ba:	f842 0c04 	str.w	r0, [r2, #-4]
 80112be:	1d94      	adds	r4, r2, #6
 80112c0:	42a1      	cmp	r1, r4
 80112c2:	d105      	bne.n	80112d0 <arp_cache_init+0x24>
 80112c4:	3303      	adds	r3, #3
 80112c6:	2b60      	cmp	r3, #96	; 0x60
 80112c8:	f102 020c 	add.w	r2, r2, #12
 80112cc:	d1f4      	bne.n	80112b8 <arp_cache_init+0xc>
 80112ce:	bd10      	pop	{r4, pc}
 80112d0:	f801 0b01 	strb.w	r0, [r1], #1
 80112d4:	e7f4      	b.n	80112c0 <arp_cache_init+0x14>
 80112d6:	bf00      	nop
 80112d8:	2000a4a0 	andcs	sl, r0, r0, lsr #9
 80112dc:	2000a324 	andcs	sl, r0, r4, lsr #6

080112e0 <arp_cache_update>:
 80112e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112e2:	4e11      	ldr	r6, [pc, #68]	; (8011328 <arp_cache_update+0x48>)
 80112e4:	8833      	ldrh	r3, [r6, #0]
 80112e6:	2b20      	cmp	r3, #32
 80112e8:	d018      	beq.n	801131c <arp_cache_update+0x3c>
 80112ea:	2400      	movs	r4, #0
 80112ec:	220c      	movs	r2, #12
 80112ee:	4d0f      	ldr	r5, [pc, #60]	; (801132c <arp_cache_update+0x4c>)
 80112f0:	b2a7      	uxth	r7, r4
 80112f2:	42bb      	cmp	r3, r7
 80112f4:	d80b      	bhi.n	801130e <arp_cache_update+0x2e>
 80112f6:	fb02 5203 	mla	r2, r2, r3, r5
 80112fa:	1d84      	adds	r4, r0, #6
 80112fc:	3203      	adds	r2, #3
 80112fe:	42a0      	cmp	r0, r4
 8011300:	d10d      	bne.n	801131e <arp_cache_update+0x3e>
 8011302:	220c      	movs	r2, #12
 8011304:	435a      	muls	r2, r3
 8011306:	3301      	adds	r3, #1
 8011308:	50a9      	str	r1, [r5, r2]
 801130a:	8033      	strh	r3, [r6, #0]
 801130c:	e006      	b.n	801131c <arp_cache_update+0x3c>
 801130e:	3401      	adds	r4, #1
 8011310:	fb02 5704 	mla	r7, r2, r4, r5
 8011314:	f857 7c0c 	ldr.w	r7, [r7, #-12]
 8011318:	428f      	cmp	r7, r1
 801131a:	d1e9      	bne.n	80112f0 <arp_cache_update+0x10>
 801131c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801131e:	f810 7b01 	ldrb.w	r7, [r0], #1
 8011322:	f802 7f01 	strb.w	r7, [r2, #1]!
 8011326:	e7ea      	b.n	80112fe <arp_cache_update+0x1e>
 8011328:	2000a4a0 	andcs	sl, r0, r0, lsr #9
 801132c:	2000a320 	andcs	sl, r0, r0, lsr #6

08011330 <arp_cache_lookup>:
 8011330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011334:	2200      	movs	r2, #0
 8011336:	4606      	mov	r6, r0
 8011338:	460c      	mov	r4, r1
 801133a:	200c      	movs	r0, #12
 801133c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80113c4 <arp_cache_lookup+0x94>
 8011340:	fb00 f302 	mul.w	r3, r0, r2
 8011344:	f853 1008 	ldr.w	r1, [r3, r8]
 8011348:	42b1      	cmp	r1, r6
 801134a:	d10d      	bne.n	8011368 <arp_cache_lookup+0x38>
 801134c:	3304      	adds	r3, #4
 801134e:	4443      	add	r3, r8
 8011350:	3c01      	subs	r4, #1
 8011352:	1d9a      	adds	r2, r3, #6
 8011354:	4293      	cmp	r3, r2
 8011356:	d102      	bne.n	801135e <arp_cache_lookup+0x2e>
 8011358:	4630      	mov	r0, r6
 801135a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801135e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8011362:	f804 1f01 	strb.w	r1, [r4, #1]!
 8011366:	e7f5      	b.n	8011354 <arp_cache_lookup+0x24>
 8011368:	b111      	cbz	r1, 8011370 <arp_cache_lookup+0x40>
 801136a:	3201      	adds	r2, #1
 801136c:	2a20      	cmp	r2, #32
 801136e:	d1e7      	bne.n	8011340 <arp_cache_lookup+0x10>
 8011370:	2704      	movs	r7, #4
 8011372:	f8df a054 	ldr.w	sl, [pc, #84]	; 80113c8 <arp_cache_lookup+0x98>
 8011376:	f8ba 5000 	ldrh.w	r5, [sl]
 801137a:	3f01      	subs	r7, #1
 801137c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8011380:	d101      	bne.n	8011386 <arp_cache_lookup+0x56>
 8011382:	463e      	mov	r6, r7
 8011384:	e7e8      	b.n	8011358 <arp_cache_lookup+0x28>
 8011386:	4630      	mov	r0, r6
 8011388:	f7ff ff7a 	bl	8011280 <arp_send_request>
 801138c:	f44f 3900 	mov.w	r9, #131072	; 0x20000
 8011390:	f1b9 0901 	subs.w	r9, r9, #1
 8011394:	f8ba 3000 	ldrh.w	r3, [sl]
 8011398:	d011      	beq.n	80113be <arp_cache_lookup+0x8e>
 801139a:	429d      	cmp	r5, r3
 801139c:	d00c      	beq.n	80113b8 <arp_cache_lookup+0x88>
 801139e:	230c      	movs	r3, #12
 80113a0:	fb03 8505 	mla	r5, r3, r5, r8
 80113a4:	3c01      	subs	r4, #1
 80113a6:	1d2b      	adds	r3, r5, #4
 80113a8:	350a      	adds	r5, #10
 80113aa:	42ab      	cmp	r3, r5
 80113ac:	d0d4      	beq.n	8011358 <arp_cache_lookup+0x28>
 80113ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80113b6:	e7f8      	b.n	80113aa <arp_cache_lookup+0x7a>
 80113b8:	f7fd ff94 	bl	800f2e4 <net_handle>
 80113bc:	e7e8      	b.n	8011390 <arp_cache_lookup+0x60>
 80113be:	429d      	cmp	r5, r3
 80113c0:	d0db      	beq.n	801137a <arp_cache_lookup+0x4a>
 80113c2:	e7ec      	b.n	801139e <arp_cache_lookup+0x6e>
 80113c4:	2000a320 	andcs	sl, r0, r0, lsr #6
 80113c8:	2000a4a0 	andcs	sl, r0, r0, lsr #9

080113cc <_parse_response>:
 80113cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113d0:	460c      	mov	r4, r1
 80113d2:	4e5b      	ldr	r6, [pc, #364]	; (8011540 <_parse_response+0x174>)
 80113d4:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
 80113d8:	6837      	ldr	r7, [r6, #0]
 80113da:	b2c5      	uxtb	r5, r0
 80113dc:	f10d 0826 	add.w	r8, sp, #38	; 0x26
 80113e0:	f7fd ff80 	bl	800f2e4 <net_handle>
 80113e4:	f44f 7209 	mov.w	r2, #548	; 0x224
 80113e8:	4628      	mov	r0, r5
 80113ea:	f8cd 8000 	str.w	r8, [sp]
 80113ee:	ab0a      	add	r3, sp, #40	; 0x28
 80113f0:	a90b      	add	r1, sp, #44	; 0x2c
 80113f2:	f7fe fc7b 	bl	800fcec <udp_recv>
 80113f6:	2800      	cmp	r0, #0
 80113f8:	d05f      	beq.n	80114ba <_parse_response+0xee>
 80113fa:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80113fe:	2b43      	cmp	r3, #67	; 0x43
 8011400:	d15b      	bne.n	80114ba <_parse_response+0xee>
 8011402:	aa12      	add	r2, sp, #72	; 0x48
 8011404:	1e63      	subs	r3, r4, #1
 8011406:	1d61      	adds	r1, r4, #5
 8011408:	428b      	cmp	r3, r1
 801140a:	d150      	bne.n	80114ae <_parse_response+0xe2>
 801140c:	2100      	movs	r1, #0
 801140e:	ab0b      	add	r3, sp, #44	; 0x2c
 8011410:	181c      	adds	r4, r3, r0
 8011412:	4608      	mov	r0, r1
 8011414:	4b4b      	ldr	r3, [pc, #300]	; (8011544 <_parse_response+0x178>)
 8011416:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801141a:	781a      	ldrb	r2, [r3, #0]
 801141c:	f893 b001 	ldrb.w	fp, [r3, #1]
 8011420:	f893 c002 	ldrb.w	ip, [r3, #2]
 8011424:	78dd      	ldrb	r5, [r3, #3]
 8011426:	4b48      	ldr	r3, [pc, #288]	; (8011548 <_parse_response+0x17c>)
 8011428:	9207      	str	r2, [sp, #28]
 801142a:	781a      	ldrb	r2, [r3, #0]
 801142c:	789f      	ldrb	r7, [r3, #2]
 801142e:	78de      	ldrb	r6, [r3, #3]
 8011430:	9206      	str	r2, [sp, #24]
 8011432:	785a      	ldrb	r2, [r3, #1]
 8011434:	4b45      	ldr	r3, [pc, #276]	; (801154c <_parse_response+0x180>)
 8011436:	9203      	str	r2, [sp, #12]
 8011438:	f893 a000 	ldrb.w	sl, [r3]
 801143c:	f893 9001 	ldrb.w	r9, [r3, #1]
 8011440:	f893 8002 	ldrb.w	r8, [r3, #2]
 8011444:	f893 e003 	ldrb.w	lr, [r3, #3]
 8011448:	ab47      	add	r3, sp, #284	; 0x11c
 801144a:	42a3      	cmp	r3, r4
 801144c:	d33f      	bcc.n	80114ce <_parse_response+0x102>
 801144e:	9b04      	ldr	r3, [sp, #16]
 8011450:	b143      	cbz	r3, 8011464 <_parse_response+0x98>
 8011452:	4b3e      	ldr	r3, [pc, #248]	; (801154c <_parse_response+0x180>)
 8011454:	f883 a000 	strb.w	sl, [r3]
 8011458:	f883 9001 	strb.w	r9, [r3, #1]
 801145c:	f883 8002 	strb.w	r8, [r3, #2]
 8011460:	f883 e003 	strb.w	lr, [r3, #3]
 8011464:	9b05      	ldr	r3, [sp, #20]
 8011466:	b133      	cbz	r3, 8011476 <_parse_response+0xaa>
 8011468:	4b37      	ldr	r3, [pc, #220]	; (8011548 <_parse_response+0x17c>)
 801146a:	9a06      	ldr	r2, [sp, #24]
 801146c:	709f      	strb	r7, [r3, #2]
 801146e:	701a      	strb	r2, [r3, #0]
 8011470:	9a03      	ldr	r2, [sp, #12]
 8011472:	70de      	strb	r6, [r3, #3]
 8011474:	705a      	strb	r2, [r3, #1]
 8011476:	b139      	cbz	r1, 8011488 <_parse_response+0xbc>
 8011478:	4b32      	ldr	r3, [pc, #200]	; (8011544 <_parse_response+0x178>)
 801147a:	9a07      	ldr	r2, [sp, #28]
 801147c:	f883 b001 	strb.w	fp, [r3, #1]
 8011480:	701a      	strb	r2, [r3, #0]
 8011482:	f883 c002 	strb.w	ip, [r3, #2]
 8011486:	70dd      	strb	r5, [r3, #3]
 8011488:	2802      	cmp	r0, #2
 801148a:	d10c      	bne.n	80114a6 <_parse_response+0xda>
 801148c:	4b30      	ldr	r3, [pc, #192]	; (8011550 <_parse_response+0x184>)
 801148e:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8011492:	701a      	strb	r2, [r3, #0]
 8011494:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 8011498:	705a      	strb	r2, [r3, #1]
 801149a:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
 801149e:	709a      	strb	r2, [r3, #2]
 80114a0:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
 80114a4:	70da      	strb	r2, [r3, #3]
 80114a6:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 80114aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ae:	f812 cb01 	ldrb.w	ip, [r2], #1
 80114b2:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80114b6:	45e6      	cmp	lr, ip
 80114b8:	d0a6      	beq.n	8011408 <_parse_response+0x3c>
 80114ba:	6833      	ldr	r3, [r6, #0]
 80114bc:	1bdb      	subs	r3, r3, r7
 80114be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80114c2:	d38b      	bcc.n	80113dc <_parse_response+0x10>
 80114c4:	2800      	cmp	r0, #0
 80114c6:	d1a1      	bne.n	801140c <_parse_response+0x40>
 80114c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80114cc:	e7eb      	b.n	80114a6 <_parse_response+0xda>
 80114ce:	781a      	ldrb	r2, [r3, #0]
 80114d0:	2a35      	cmp	r2, #53	; 0x35
 80114d2:	d011      	beq.n	80114f8 <_parse_response+0x12c>
 80114d4:	d808      	bhi.n	80114e8 <_parse_response+0x11c>
 80114d6:	2a01      	cmp	r2, #1
 80114d8:	d011      	beq.n	80114fe <_parse_response+0x132>
 80114da:	2a03      	cmp	r2, #3
 80114dc:	d01a      	beq.n	8011514 <_parse_response+0x148>
 80114de:	b14a      	cbz	r2, 80114f4 <_parse_response+0x128>
 80114e0:	1c9a      	adds	r2, r3, #2
 80114e2:	785b      	ldrb	r3, [r3, #1]
 80114e4:	4413      	add	r3, r2
 80114e6:	e7b0      	b.n	801144a <_parse_response+0x7e>
 80114e8:	2a36      	cmp	r2, #54	; 0x36
 80114ea:	d01f      	beq.n	801152c <_parse_response+0x160>
 80114ec:	2aff      	cmp	r2, #255	; 0xff
 80114ee:	d1f7      	bne.n	80114e0 <_parse_response+0x114>
 80114f0:	4623      	mov	r3, r4
 80114f2:	e7aa      	b.n	801144a <_parse_response+0x7e>
 80114f4:	3301      	adds	r3, #1
 80114f6:	e7a8      	b.n	801144a <_parse_response+0x7e>
 80114f8:	7898      	ldrb	r0, [r3, #2]
 80114fa:	3303      	adds	r3, #3
 80114fc:	e7a5      	b.n	801144a <_parse_response+0x7e>
 80114fe:	f893 a002 	ldrb.w	sl, [r3, #2]
 8011502:	f893 9003 	ldrb.w	r9, [r3, #3]
 8011506:	f893 8004 	ldrb.w	r8, [r3, #4]
 801150a:	f893 e005 	ldrb.w	lr, [r3, #5]
 801150e:	9204      	str	r2, [sp, #16]
 8011510:	3306      	adds	r3, #6
 8011512:	e79a      	b.n	801144a <_parse_response+0x7e>
 8011514:	789a      	ldrb	r2, [r3, #2]
 8011516:	791f      	ldrb	r7, [r3, #4]
 8011518:	9206      	str	r2, [sp, #24]
 801151a:	78da      	ldrb	r2, [r3, #3]
 801151c:	795e      	ldrb	r6, [r3, #5]
 801151e:	9203      	str	r2, [sp, #12]
 8011520:	785a      	ldrb	r2, [r3, #1]
 8011522:	4413      	add	r3, r2
 8011524:	2201      	movs	r2, #1
 8011526:	3302      	adds	r3, #2
 8011528:	9205      	str	r2, [sp, #20]
 801152a:	e78e      	b.n	801144a <_parse_response+0x7e>
 801152c:	789a      	ldrb	r2, [r3, #2]
 801152e:	f893 b003 	ldrb.w	fp, [r3, #3]
 8011532:	f893 c004 	ldrb.w	ip, [r3, #4]
 8011536:	795d      	ldrb	r5, [r3, #5]
 8011538:	2101      	movs	r1, #1
 801153a:	9207      	str	r2, [sp, #28]
 801153c:	3306      	adds	r3, #6
 801153e:	e784      	b.n	801144a <_parse_response+0x7e>
 8011540:	2000a97c 	andcs	sl, r0, ip, ror r9
 8011544:	2000a6d4 	ldrdcs	sl, [r0], -r4
 8011548:	2000a4a4 	andcs	sl, r0, r4, lsr #9
 801154c:	2000a4ac 	andcs	sl, r0, ip, lsr #9
 8011550:	2000a4a8 	andcs	sl, r0, r8, lsr #9

08011554 <memcpy.isra.0>:
 8011554:	3801      	subs	r0, #1
 8011556:	440a      	add	r2, r1
 8011558:	4291      	cmp	r1, r2
 801155a:	d100      	bne.n	801155e <memcpy.isra.0+0xa>
 801155c:	4770      	bx	lr
 801155e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011562:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011566:	e7f7      	b.n	8011558 <memcpy.isra.0+0x4>

08011568 <dhcp_client>:
 8011568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801156c:	b087      	sub	sp, #28
 801156e:	9203      	str	r2, [sp, #12]
 8011570:	4a77      	ldr	r2, [pc, #476]	; (8011750 <dhcp_client+0x1e8>)
 8011572:	460f      	mov	r7, r1
 8011574:	4605      	mov	r5, r0
 8011576:	f44f 7309 	mov.w	r3, #548	; 0x224
 801157a:	4614      	mov	r4, r2
 801157c:	2100      	movs	r1, #0
 801157e:	3b01      	subs	r3, #1
 8011580:	f802 1b01 	strb.w	r1, [r2], #1
 8011584:	d1fb      	bne.n	801157e <dhcp_client+0x16>
 8011586:	f240 1301 	movw	r3, #257	; 0x101
 801158a:	2206      	movs	r2, #6
 801158c:	4629      	mov	r1, r5
 801158e:	4871      	ldr	r0, [pc, #452]	; (8011754 <dhcp_client+0x1ec>)
 8011590:	8023      	strh	r3, [r4, #0]
 8011592:	70a2      	strb	r2, [r4, #2]
 8011594:	f7ff ffde 	bl	8011554 <memcpy.isra.0>
 8011598:	4b6f      	ldr	r3, [pc, #444]	; (8011758 <dhcp_client+0x1f0>)
 801159a:	2044      	movs	r0, #68	; 0x44
 801159c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 80115a0:	f240 1335 	movw	r3, #309	; 0x135
 80115a4:	f8a4 30f0 	strh.w	r3, [r4, #240]	; 0xf0
 80115a8:	f7fe fb66 	bl	800fc78 <udp_bind>
 80115ac:	1e06      	subs	r6, r0, #0
 80115ae:	f2c0 80c9 	blt.w	8011744 <dhcp_client+0x1dc>
 80115b2:	f04f 0915 	mov.w	r9, #21
 80115b6:	f8df a198 	ldr.w	sl, [pc, #408]	; 8011750 <dhcp_client+0x1e8>
 80115ba:	f1b9 0901 	subs.w	r9, r9, #1
 80115be:	d11f      	bne.n	8011600 <dhcp_client+0x98>
 80115c0:	464c      	mov	r4, r9
 80115c2:	2044      	movs	r0, #68	; 0x44
 80115c4:	f7fe fb72 	bl	800fcac <udp_unbind>
 80115c8:	2c00      	cmp	r4, #0
 80115ca:	f000 80be 	beq.w	801174a <dhcp_client+0x1e2>
 80115ce:	2204      	movs	r2, #4
 80115d0:	4962      	ldr	r1, [pc, #392]	; (801175c <dhcp_client+0x1f4>)
 80115d2:	a805      	add	r0, sp, #20
 80115d4:	f7ff ffbe 	bl	8011554 <memcpy.isra.0>
 80115d8:	9b05      	ldr	r3, [sp, #20]
 80115da:	2204      	movs	r2, #4
 80115dc:	4960      	ldr	r1, [pc, #384]	; (8011760 <dhcp_client+0x1f8>)
 80115de:	603b      	str	r3, [r7, #0]
 80115e0:	a805      	add	r0, sp, #20
 80115e2:	f7ff ffb7 	bl	8011554 <memcpy.isra.0>
 80115e6:	9b05      	ldr	r3, [sp, #20]
 80115e8:	a805      	add	r0, sp, #20
 80115ea:	60bb      	str	r3, [r7, #8]
 80115ec:	2204      	movs	r2, #4
 80115ee:	495d      	ldr	r1, [pc, #372]	; (8011764 <dhcp_client+0x1fc>)
 80115f0:	f7ff ffb0 	bl	8011554 <memcpy.isra.0>
 80115f4:	2000      	movs	r0, #0
 80115f6:	9b05      	ldr	r3, [sp, #20]
 80115f8:	607b      	str	r3, [r7, #4]
 80115fa:	b007      	add	sp, #28
 80115fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011600:	f643 5301 	movw	r3, #15617	; 0x3d01
 8011604:	f240 1807 	movw	r8, #263	; 0x107
 8011608:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 801160c:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 8011610:	782b      	ldrb	r3, [r5, #0]
 8011612:	4a55      	ldr	r2, [pc, #340]	; (8011768 <dhcp_client+0x200>)
 8011614:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 8011618:	786b      	ldrb	r3, [r5, #1]
 801161a:	fa5f fb86 	uxtb.w	fp, r6
 801161e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8011622:	78ab      	ldrb	r3, [r5, #2]
 8011624:	4651      	mov	r1, sl
 8011626:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 801162a:	78eb      	ldrb	r3, [r5, #3]
 801162c:	4658      	mov	r0, fp
 801162e:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 8011632:	792b      	ldrb	r3, [r5, #4]
 8011634:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8011638:	796b      	ldrb	r3, [r5, #5]
 801163a:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 801163e:	4b4b      	ldr	r3, [pc, #300]	; (801176c <dhcp_client+0x204>)
 8011640:	e9c4 233f 	strd	r2, r3, [r4, #252]	; 0xfc
 8011644:	23ff      	movs	r3, #255	; 0xff
 8011646:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 801164a:	2343      	movs	r3, #67	; 0x43
 801164c:	f240 1205 	movw	r2, #261	; 0x105
 8011650:	9300      	str	r3, [sp, #0]
 8011652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011656:	f7fe fba5 	bl	800fda4 <udp_send>
 801165a:	4629      	mov	r1, r5
 801165c:	4630      	mov	r0, r6
 801165e:	f7ff feb5 	bl	80113cc <_parse_response>
 8011662:	2802      	cmp	r0, #2
 8011664:	d1a9      	bne.n	80115ba <dhcp_client+0x52>
 8011666:	f643 5303 	movw	r3, #15619	; 0x3d03
 801166a:	f8a4 80f4 	strh.w	r8, [r4, #244]	; 0xf4
 801166e:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
 8011672:	782b      	ldrb	r3, [r5, #0]
 8011674:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8011770 <dhcp_client+0x208>
 8011678:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
 801167c:	786b      	ldrb	r3, [r5, #1]
 801167e:	f884 30f7 	strb.w	r3, [r4, #247]	; 0xf7
 8011682:	78ab      	ldrb	r3, [r5, #2]
 8011684:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
 8011688:	78eb      	ldrb	r3, [r5, #3]
 801168a:	f884 30f9 	strb.w	r3, [r4, #249]	; 0xf9
 801168e:	792b      	ldrb	r3, [r5, #4]
 8011690:	f884 30fa 	strb.w	r3, [r4, #250]	; 0xfa
 8011694:	796b      	ldrb	r3, [r5, #5]
 8011696:	f884 30fb 	strb.w	r3, [r4, #251]	; 0xfb
 801169a:	f240 4332 	movw	r3, #1074	; 0x432
 801169e:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 80116a2:	4b2e      	ldr	r3, [pc, #184]	; (801175c <dhcp_client+0x1f4>)
 80116a4:	881a      	ldrh	r2, [r3, #0]
 80116a6:	885b      	ldrh	r3, [r3, #2]
 80116a8:	f8a4 20fe 	strh.w	r2, [r4, #254]	; 0xfe
 80116ac:	f8a4 3100 	strh.w	r3, [r4, #256]	; 0x100
 80116b0:	f240 4336 	movw	r3, #1078	; 0x436
 80116b4:	f8a4 3102 	strh.w	r3, [r4, #258]	; 0x102
 80116b8:	4b2e      	ldr	r3, [pc, #184]	; (8011774 <dhcp_client+0x20c>)
 80116ba:	221e      	movs	r2, #30
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 80116c2:	230c      	movs	r3, #12
 80116c4:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
 80116c8:	9b03      	ldr	r3, [sp, #12]
 80116ca:	1e58      	subs	r0, r3, #1
 80116cc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80116d0:	f1a2 0e1e 	sub.w	lr, r2, #30
 80116d4:	1c51      	adds	r1, r2, #1
 80116d6:	bb8b      	cbnz	r3, 801173c <dhcp_client+0x1d4>
 80116d8:	2037      	movs	r0, #55	; 0x37
 80116da:	18a3      	adds	r3, r4, r2
 80116dc:	f883 00ec 	strb.w	r0, [r3, #236]	; 0xec
 80116e0:	2006      	movs	r0, #6
 80116e2:	4421      	add	r1, r4
 80116e4:	f881 00ec 	strb.w	r0, [r1, #236]	; 0xec
 80116e8:	2103      	movs	r1, #3
 80116ea:	f883 10ef 	strb.w	r1, [r3, #239]	; 0xef
 80116ee:	210f      	movs	r1, #15
 80116f0:	f883 10f1 	strb.w	r1, [r3, #241]	; 0xf1
 80116f4:	213a      	movs	r1, #58	; 0x3a
 80116f6:	f883 10f2 	strb.w	r1, [r3, #242]	; 0xf2
 80116fa:	213b      	movs	r1, #59	; 0x3b
 80116fc:	f04f 0801 	mov.w	r8, #1
 8011700:	f883 10f3 	strb.w	r1, [r3, #243]	; 0xf3
 8011704:	21ff      	movs	r1, #255	; 0xff
 8011706:	f883 00f0 	strb.w	r0, [r3, #240]	; 0xf0
 801170a:	f883 10f4 	strb.w	r1, [r3, #244]	; 0xf4
 801170e:	f883 80ee 	strb.w	r8, [r3, #238]	; 0xee
 8011712:	2343      	movs	r3, #67	; 0x43
 8011714:	32f5      	adds	r2, #245	; 0xf5
 8011716:	f884 e109 	strb.w	lr, [r4, #265]	; 0x109
 801171a:	4651      	mov	r1, sl
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	b292      	uxth	r2, r2
 8011720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011724:	4658      	mov	r0, fp
 8011726:	f7fe fb3d 	bl	800fda4 <udp_send>
 801172a:	4629      	mov	r1, r5
 801172c:	4630      	mov	r0, r6
 801172e:	f7ff fe4d 	bl	80113cc <_parse_response>
 8011732:	2805      	cmp	r0, #5
 8011734:	f47f af41 	bne.w	80115ba <dhcp_client+0x52>
 8011738:	4644      	mov	r4, r8
 801173a:	e742      	b.n	80115c2 <dhcp_client+0x5a>
 801173c:	460a      	mov	r2, r1
 801173e:	f80c 3b01 	strb.w	r3, [ip], #1
 8011742:	e7c3      	b.n	80116cc <dhcp_client+0x164>
 8011744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011748:	e757      	b.n	80115fa <dhcp_client+0x92>
 801174a:	f06f 0001 	mvn.w	r0, #1
 801174e:	e754      	b.n	80115fa <dhcp_client+0x92>
 8011750:	2000a4b0 			; <UNDEFINED> instruction: 0x2000a4b0
 8011754:	2000a4cc 	andcs	sl, r0, ip, asr #9
 8011758:	63538263 	cmpvs	r3, #805306374	; 0x30000006
 801175c:	2000a4a8 	andcs	sl, r0, r8, lsr #9
 8011760:	2000a4a4 	andcs	sl, r0, r4, lsr #9
 8011764:	2000a4ac 	andcs	sl, r0, ip, lsr #9
 8011768:	03010637 	movweq	r0, #5687	; 0x1637
 801176c:	3b3a0f06 	blcc	8e9538c <__exidx_end+0xe7d224>
 8011770:	2000a5ba 			; <UNDEFINED> instruction: 0x2000a5ba
 8011774:	2000a6d4 	ldrdcs	sl, [r0], -r4

08011778 <dhcp_client_release>:
 8011778:	b507      	push	{r0, r1, r2, lr}
 801177a:	2044      	movs	r0, #68	; 0x44
 801177c:	f7fe fa7c 	bl	800fc78 <udp_bind>
 8011780:	f243 6307 	movw	r3, #13831	; 0x3607
 8011784:	4911      	ldr	r1, [pc, #68]	; (80117cc <dhcp_client_release+0x54>)
 8011786:	b2c0      	uxtb	r0, r0
 8011788:	f8a1 30f2 	strh.w	r3, [r1, #242]	; 0xf2
 801178c:	2304      	movs	r3, #4
 801178e:	f881 30f4 	strb.w	r3, [r1, #244]	; 0xf4
 8011792:	4b0f      	ldr	r3, [pc, #60]	; (80117d0 <dhcp_client_release+0x58>)
 8011794:	781a      	ldrb	r2, [r3, #0]
 8011796:	f881 20f5 	strb.w	r2, [r1, #245]	; 0xf5
 801179a:	785a      	ldrb	r2, [r3, #1]
 801179c:	f881 20f6 	strb.w	r2, [r1, #246]	; 0xf6
 80117a0:	789a      	ldrb	r2, [r3, #2]
 80117a2:	78db      	ldrb	r3, [r3, #3]
 80117a4:	f881 20f7 	strb.w	r2, [r1, #247]	; 0xf7
 80117a8:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
 80117ac:	23ff      	movs	r3, #255	; 0xff
 80117ae:	f881 30f9 	strb.w	r3, [r1, #249]	; 0xf9
 80117b2:	2343      	movs	r3, #67	; 0x43
 80117b4:	22fa      	movs	r2, #250	; 0xfa
 80117b6:	9300      	str	r3, [sp, #0]
 80117b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117bc:	f7fe faf2 	bl	800fda4 <udp_send>
 80117c0:	2044      	movs	r0, #68	; 0x44
 80117c2:	b003      	add	sp, #12
 80117c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80117c8:	f7fe ba70 	b.w	800fcac <udp_unbind>
 80117cc:	2000a4b0 			; <UNDEFINED> instruction: 0x2000a4b0
 80117d0:	2000a6d4 	ldrdcs	sl, [r0], -r4

080117d4 <memcpy.isra.0>:
 80117d4:	3801      	subs	r0, #1
 80117d6:	440a      	add	r2, r1
 80117d8:	4291      	cmp	r1, r2
 80117da:	d100      	bne.n	80117de <memcpy.isra.0+0xa>
 80117dc:	4770      	bx	lr
 80117de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117e2:	f800 3f01 	strb.w	r3, [r0, #1]!
 80117e6:	e7f7      	b.n	80117d8 <memcpy.isra.0+0x4>

080117e8 <_send_report>:
 80117e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117ea:	491c      	ldr	r1, [pc, #112]	; (801185c <_send_report+0x74>)
 80117ec:	4c1c      	ldr	r4, [pc, #112]	; (8011860 <_send_report+0x78>)
 80117ee:	f3c0 2306 	ubfx	r3, r0, #8, #7
 80117f2:	9001      	str	r0, [sp, #4]
 80117f4:	70cb      	strb	r3, [r1, #3]
 80117f6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80117fa:	f3c0 6007 	ubfx	r0, r0, #24, #8
 80117fe:	710b      	strb	r3, [r1, #4]
 8011800:	7148      	strb	r0, [r1, #5]
 8011802:	2206      	movs	r2, #6
 8011804:	4620      	mov	r0, r4
 8011806:	f7ff ffe5 	bl	80117d4 <memcpy.isra.0>
 801180a:	2204      	movs	r2, #4
 801180c:	2700      	movs	r7, #0
 801180e:	4d15      	ldr	r5, [pc, #84]	; (8011864 <_send_report+0x7c>)
 8011810:	eb0d 0102 	add.w	r1, sp, r2
 8011814:	882b      	ldrh	r3, [r5, #0]
 8011816:	f104 001e 	add.w	r0, r4, #30
 801181a:	f104 060e 	add.w	r6, r4, #14
 801181e:	8263      	strh	r3, [r4, #18]
 8011820:	f7ff ffd8 	bl	80117d4 <memcpy.isra.0>
 8011824:	2118      	movs	r1, #24
 8011826:	4630      	mov	r0, r6
 8011828:	8327      	strh	r7, [r4, #24]
 801182a:	f000 f9b7 	bl	8011b9c <net_chksum>
 801182e:	2204      	movs	r2, #4
 8011830:	8320      	strh	r0, [r4, #24]
 8011832:	eb0d 0102 	add.w	r1, sp, r2
 8011836:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801183a:	f7ff ffcb 	bl	80117d4 <memcpy.isra.0>
 801183e:	2120      	movs	r1, #32
 8011840:	4630      	mov	r0, r6
 8011842:	8527      	strh	r7, [r4, #40]	; 0x28
 8011844:	f000 f9aa 	bl	8011b9c <net_chksum>
 8011848:	212e      	movs	r1, #46	; 0x2e
 801184a:	8520      	strh	r0, [r4, #40]	; 0x28
 801184c:	4620      	mov	r0, r4
 801184e:	f003 f8e7 	bl	8014a20 <emac_eth_send>
 8011852:	882b      	ldrh	r3, [r5, #0]
 8011854:	3301      	adds	r3, #1
 8011856:	802b      	strh	r3, [r5, #0]
 8011858:	b003      	add	sp, #12
 801185a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801185c:	2000a830 	andcs	sl, r0, r0, lsr r8
 8011860:	2000a838 	andcs	sl, r0, r8, lsr r8
 8011864:	2000a7f8 	strdcs	sl, [r0], -r8

08011868 <igmp_set_ip>:
 8011868:	b507      	push	{r0, r1, r2, lr}
 801186a:	2204      	movs	r2, #4
 801186c:	6803      	ldr	r3, [r0, #0]
 801186e:	eb0d 0102 	add.w	r1, sp, r2
 8011872:	4806      	ldr	r0, [pc, #24]	; (801188c <igmp_set_ip+0x24>)
 8011874:	9301      	str	r3, [sp, #4]
 8011876:	f7ff ffad 	bl	80117d4 <memcpy.isra.0>
 801187a:	2204      	movs	r2, #4
 801187c:	4804      	ldr	r0, [pc, #16]	; (8011890 <igmp_set_ip+0x28>)
 801187e:	eb0d 0102 	add.w	r1, sp, r2
 8011882:	f7ff ffa7 	bl	80117d4 <memcpy.isra.0>
 8011886:	b003      	add	sp, #12
 8011888:	f85d fb04 	ldr.w	pc, [sp], #4
 801188c:	2000a852 	andcs	sl, r0, r2, asr r8
 8011890:	2000a81a 	andcs	sl, r0, sl, lsl r8

08011894 <igmp_init>:
 8011894:	2200      	movs	r2, #0
 8011896:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801189a:	4605      	mov	r5, r0
 801189c:	4608      	mov	r0, r1
 801189e:	4611      	mov	r1, r2
 80118a0:	4b23      	ldr	r3, [pc, #140]	; (8011930 <igmp_init+0x9c>)
 80118a2:	f103 0408 	add.w	r4, r3, #8
 80118a6:	42a3      	cmp	r3, r4
 80118a8:	d13e      	bne.n	8011928 <igmp_init+0x94>
 80118aa:	3201      	adds	r2, #1
 80118ac:	2a24      	cmp	r2, #36	; 0x24
 80118ae:	d1f8      	bne.n	80118a2 <igmp_init+0xe>
 80118b0:	2600      	movs	r6, #0
 80118b2:	4b20      	ldr	r3, [pc, #128]	; (8011934 <igmp_init+0xa0>)
 80118b4:	4c20      	ldr	r4, [pc, #128]	; (8011938 <igmp_init+0xa4>)
 80118b6:	601e      	str	r6, [r3, #0]
 80118b8:	4b20      	ldr	r3, [pc, #128]	; (801193c <igmp_init+0xa8>)
 80118ba:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 80118be:	801e      	strh	r6, [r3, #0]
 80118c0:	f7ff ffd2 	bl	8011868 <igmp_set_ip>
 80118c4:	2201      	movs	r2, #1
 80118c6:	4b1e      	ldr	r3, [pc, #120]	; (8011940 <igmp_init+0xac>)
 80118c8:	4629      	mov	r1, r5
 80118ca:	801a      	strh	r2, [r3, #0]
 80118cc:	225e      	movs	r2, #94	; 0x5e
 80118ce:	709a      	strb	r2, [r3, #2]
 80118d0:	2206      	movs	r2, #6
 80118d2:	18a0      	adds	r0, r4, r2
 80118d4:	f7ff ff7e 	bl	80117d4 <memcpy.isra.0>
 80118d8:	f240 4394 	movw	r3, #1172	; 0x494
 80118dc:	8463      	strh	r3, [r4, #34]	; 0x22
 80118de:	2316      	movs	r3, #22
 80118e0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8011944 <igmp_init+0xb0>
 80118e4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8011948 <igmp_init+0xb4>
 80118e8:	84e3      	strh	r3, [r4, #38]	; 0x26
 80118ea:	f8c4 9014 	str.w	r9, [r4, #20]
 80118ee:	4b17      	ldr	r3, [pc, #92]	; (801194c <igmp_init+0xb8>)
 80118f0:	f8c4 800c 	str.w	r8, [r4, #12]
 80118f4:	8227      	strh	r7, [r4, #16]
 80118f6:	84a6      	strh	r6, [r4, #36]	; 0x24
 80118f8:	4c15      	ldr	r4, [pc, #84]	; (8011950 <igmp_init+0xbc>)
 80118fa:	2206      	movs	r2, #6
 80118fc:	6023      	str	r3, [r4, #0]
 80118fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011902:	18a0      	adds	r0, r4, r2
 8011904:	80a3      	strh	r3, [r4, #4]
 8011906:	4629      	mov	r1, r5
 8011908:	f7ff ff64 	bl	80117d4 <memcpy.isra.0>
 801190c:	23e0      	movs	r3, #224	; 0xe0
 801190e:	83e3      	strh	r3, [r4, #30]
 8011910:	f44f 13b8 	mov.w	r3, #1507328	; 0x170000
 8011914:	4a0f      	ldr	r2, [pc, #60]	; (8011954 <igmp_init+0xc0>)
 8011916:	f8c4 9014 	str.w	r9, [r4, #20]
 801191a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801191e:	f8c4 800c 	str.w	r8, [r4, #12]
 8011922:	8227      	strh	r7, [r4, #16]
 8011924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011928:	f803 1b01 	strb.w	r1, [r3], #1
 801192c:	e7bb      	b.n	80118a6 <igmp_init+0x12>
 801192e:	bf00      	nop
 8011930:	2000a6d8 	ldrdcs	sl, [r0], -r8
 8011934:	2000a7fc 	strdcs	sl, [r0], -ip
 8011938:	2000a838 	andcs	sl, r0, r8, lsr r8
 801193c:	2000a7f8 	strdcs	sl, [r0], -r8
 8011940:	2000a830 	andcs	sl, r0, r0, lsr r8
 8011944:	02010040 	andeq	r0, r1, #64	; 0x40
 8011948:	00460008 	subeq	r0, r6, r8
 801194c:	005e0001 	subseq	r0, lr, r1
 8011950:	2000a800 	andcs	sl, r0, r0, lsl #16
 8011954:	04940200 	ldreq	r0, [r4], #512	; 0x200

08011958 <igmp_handle>:
 8011958:	7b83      	ldrb	r3, [r0, #14]
 801195a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801195e:	2b45      	cmp	r3, #69	; 0x45
 8011960:	d116      	bne.n	8011990 <igmp_handle+0x38>
 8011962:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8011966:	2b11      	cmp	r3, #17
 8011968:	d112      	bne.n	8011990 <igmp_handle+0x38>
 801196a:	4b20      	ldr	r3, [pc, #128]	; (80119ec <igmp_handle+0x94>)
 801196c:	f100 051e 	add.w	r5, r0, #30
 8011970:	9300      	str	r3, [sp, #0]
 8011972:	466a      	mov	r2, sp
 8011974:	462b      	mov	r3, r5
 8011976:	f100 0622 	add.w	r6, r0, #34	; 0x22
 801197a:	42b3      	cmp	r3, r6
 801197c:	d10b      	bne.n	8011996 <igmp_handle+0x3e>
 801197e:	2401      	movs	r4, #1
 8011980:	2100      	movs	r1, #0
 8011982:	f04f 0c01 	mov.w	ip, #1
 8011986:	4b1a      	ldr	r3, [pc, #104]	; (80119f0 <igmp_handle+0x98>)
 8011988:	4a1a      	ldr	r2, [pc, #104]	; (80119f4 <igmp_handle+0x9c>)
 801198a:	681f      	ldr	r7, [r3, #0]
 801198c:	428f      	cmp	r7, r1
 801198e:	d10a      	bne.n	80119a6 <igmp_handle+0x4e>
 8011990:	b003      	add	sp, #12
 8011992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011996:	f813 4b01 	ldrb.w	r4, [r3], #1
 801199a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801199e:	428c      	cmp	r4, r1
 80119a0:	d0eb      	beq.n	801197a <igmp_handle+0x22>
 80119a2:	2400      	movs	r4, #0
 80119a4:	e7ec      	b.n	8011980 <igmp_handle+0x28>
 80119a6:	6813      	ldr	r3, [r2, #0]
 80119a8:	9301      	str	r3, [sp, #4]
 80119aa:	b924      	cbnz	r4, 80119b6 <igmp_handle+0x5e>
 80119ac:	462b      	mov	r3, r5
 80119ae:	f10d 0e04 	add.w	lr, sp, #4
 80119b2:	42b3      	cmp	r3, r6
 80119b4:	d10e      	bne.n	80119d4 <igmp_handle+0x7c>
 80119b6:	f892 e005 	ldrb.w	lr, [r2, #5]
 80119ba:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80119be:	f1be 0f01 	cmp.w	lr, #1
 80119c2:	d110      	bne.n	80119e6 <igmp_handle+0x8e>
 80119c4:	f892 e004 	ldrb.w	lr, [r2, #4]
 80119c8:	459e      	cmp	lr, r3
 80119ca:	d909      	bls.n	80119e0 <igmp_handle+0x88>
 80119cc:	085b      	lsrs	r3, r3, #1
 80119ce:	3301      	adds	r3, #1
 80119d0:	7113      	strb	r3, [r2, #4]
 80119d2:	e005      	b.n	80119e0 <igmp_handle+0x88>
 80119d4:	f813 9b01 	ldrb.w	r9, [r3], #1
 80119d8:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80119dc:	45c1      	cmp	r9, r8
 80119de:	d0e8      	beq.n	80119b2 <igmp_handle+0x5a>
 80119e0:	3101      	adds	r1, #1
 80119e2:	3208      	adds	r2, #8
 80119e4:	e7d2      	b.n	801198c <igmp_handle+0x34>
 80119e6:	f882 c005 	strb.w	ip, [r2, #5]
 80119ea:	e7ef      	b.n	80119cc <igmp_handle+0x74>
 80119ec:	010000e0 	smlatteq	r0, r0, r0, r0
 80119f0:	2000a7fc 	strdcs	sl, [r0], -ip
 80119f4:	2000a6d8 	ldrdcs	sl, [r0], -r8

080119f8 <igmp_timer>:
 80119f8:	b570      	push	{r4, r5, r6, lr}
 80119fa:	2500      	movs	r5, #0
 80119fc:	2602      	movs	r6, #2
 80119fe:	4c0a      	ldr	r4, [pc, #40]	; (8011a28 <igmp_timer+0x30>)
 8011a00:	7963      	ldrb	r3, [r4, #5]
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d109      	bne.n	8011a1a <igmp_timer+0x22>
 8011a06:	7923      	ldrb	r3, [r4, #4]
 8011a08:	b13b      	cbz	r3, 8011a1a <igmp_timer+0x22>
 8011a0a:	3b01      	subs	r3, #1
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	7123      	strb	r3, [r4, #4]
 8011a10:	b91b      	cbnz	r3, 8011a1a <igmp_timer+0x22>
 8011a12:	6820      	ldr	r0, [r4, #0]
 8011a14:	f7ff fee8 	bl	80117e8 <_send_report>
 8011a18:	7166      	strb	r6, [r4, #5]
 8011a1a:	3501      	adds	r5, #1
 8011a1c:	2d24      	cmp	r5, #36	; 0x24
 8011a1e:	f104 0408 	add.w	r4, r4, #8
 8011a22:	d1ed      	bne.n	8011a00 <igmp_timer+0x8>
 8011a24:	bd70      	pop	{r4, r5, r6, pc}
 8011a26:	bf00      	nop
 8011a28:	2000a6d8 	ldrdcs	sl, [r0], -r8

08011a2c <igmp_join>:
 8011a2c:	b538      	push	{r3, r4, r5, lr}
 8011a2e:	f000 03e0 	and.w	r3, r0, #224	; 0xe0
 8011a32:	2be0      	cmp	r3, #224	; 0xe0
 8011a34:	d11b      	bne.n	8011a6e <igmp_join+0x42>
 8011a36:	4911      	ldr	r1, [pc, #68]	; (8011a7c <igmp_join+0x50>)
 8011a38:	680c      	ldr	r4, [r1, #0]
 8011a3a:	2c24      	cmp	r4, #36	; 0x24
 8011a3c:	d01a      	beq.n	8011a74 <igmp_join+0x48>
 8011a3e:	2300      	movs	r3, #0
 8011a40:	4a0f      	ldr	r2, [pc, #60]	; (8011a80 <igmp_join+0x54>)
 8011a42:	429c      	cmp	r4, r3
 8011a44:	dc0d      	bgt.n	8011a62 <igmp_join+0x36>
 8011a46:	f44f 7381 	mov.w	r3, #258	; 0x102
 8011a4a:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
 8011a4e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8011a52:	8093      	strh	r3, [r2, #4]
 8011a54:	1c63      	adds	r3, r4, #1
 8011a56:	600b      	str	r3, [r1, #0]
 8011a58:	f7ff fec6 	bl	80117e8 <_send_report>
 8011a5c:	4623      	mov	r3, r4
 8011a5e:	4618      	mov	r0, r3
 8011a60:	bd38      	pop	{r3, r4, r5, pc}
 8011a62:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8011a66:	4285      	cmp	r5, r0
 8011a68:	d0f9      	beq.n	8011a5e <igmp_join+0x32>
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	e7e9      	b.n	8011a42 <igmp_join+0x16>
 8011a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a72:	e7f4      	b.n	8011a5e <igmp_join+0x32>
 8011a74:	f06f 0301 	mvn.w	r3, #1
 8011a78:	e7f1      	b.n	8011a5e <igmp_join+0x32>
 8011a7a:	bf00      	nop
 8011a7c:	2000a7fc 	strdcs	sl, [r0], -ip
 8011a80:	2000a6d8 	ldrdcs	sl, [r0], -r8

08011a84 <igmp_leave>:
 8011a84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011a88:	2600      	movs	r6, #0
 8011a8a:	4f1c      	ldr	r7, [pc, #112]	; (8011afc <igmp_leave+0x78>)
 8011a8c:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 8011a90:	4283      	cmp	r3, r0
 8011a92:	d007      	beq.n	8011aa4 <igmp_leave+0x20>
 8011a94:	3601      	adds	r6, #1
 8011a96:	2e24      	cmp	r6, #36	; 0x24
 8011a98:	d1f8      	bne.n	8011a8c <igmp_leave+0x8>
 8011a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a9e:	b002      	add	sp, #8
 8011aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aa4:	2400      	movs	r4, #0
 8011aa6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8011b00 <igmp_leave+0x7c>
 8011aaa:	4d16      	ldr	r5, [pc, #88]	; (8011b04 <igmp_leave+0x80>)
 8011aac:	f8b8 3000 	ldrh.w	r3, [r8]
 8011ab0:	2118      	movs	r1, #24
 8011ab2:	9001      	str	r0, [sp, #4]
 8011ab4:	4814      	ldr	r0, [pc, #80]	; (8011b08 <igmp_leave+0x84>)
 8011ab6:	826b      	strh	r3, [r5, #18]
 8011ab8:	832c      	strh	r4, [r5, #24]
 8011aba:	f000 f86f 	bl	8011b9c <net_chksum>
 8011abe:	2204      	movs	r2, #4
 8011ac0:	8328      	strh	r0, [r5, #24]
 8011ac2:	eb0d 0102 	add.w	r1, sp, r2
 8011ac6:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8011aca:	f7ff fe83 	bl	80117d4 <memcpy.isra.0>
 8011ace:	2120      	movs	r1, #32
 8011ad0:	f105 000e 	add.w	r0, r5, #14
 8011ad4:	852c      	strh	r4, [r5, #40]	; 0x28
 8011ad6:	f000 f861 	bl	8011b9c <net_chksum>
 8011ada:	212e      	movs	r1, #46	; 0x2e
 8011adc:	8528      	strh	r0, [r5, #40]	; 0x28
 8011ade:	4628      	mov	r0, r5
 8011ae0:	f002 ff9e 	bl	8014a20 <emac_eth_send>
 8011ae4:	f8b8 3000 	ldrh.w	r3, [r8]
 8011ae8:	f847 4036 	str.w	r4, [r7, r6, lsl #3]
 8011aec:	3301      	adds	r3, #1
 8011aee:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 8011af2:	4620      	mov	r0, r4
 8011af4:	f8a8 3000 	strh.w	r3, [r8]
 8011af8:	80b4      	strh	r4, [r6, #4]
 8011afa:	e7d0      	b.n	8011a9e <igmp_leave+0x1a>
 8011afc:	2000a6d8 	ldrdcs	sl, [r0], -r8
 8011b00:	2000a7f8 	strdcs	sl, [r0], -r8
 8011b04:	2000a800 	andcs	sl, r0, r0, lsl #16
 8011b08:	2000a846 	andcs	sl, r0, r6, asr #16

08011b0c <igmp_shutdown>:
 8011b0c:	b570      	push	{r4, r5, r6, lr}
 8011b0e:	2500      	movs	r5, #0
 8011b10:	462e      	mov	r6, r5
 8011b12:	4c07      	ldr	r4, [pc, #28]	; (8011b30 <igmp_shutdown+0x24>)
 8011b14:	6820      	ldr	r0, [r4, #0]
 8011b16:	b120      	cbz	r0, 8011b22 <igmp_shutdown+0x16>
 8011b18:	f7ff ffb4 	bl	8011a84 <igmp_leave>
 8011b1c:	6026      	str	r6, [r4, #0]
 8011b1e:	7166      	strb	r6, [r4, #5]
 8011b20:	7126      	strb	r6, [r4, #4]
 8011b22:	3501      	adds	r5, #1
 8011b24:	2d24      	cmp	r5, #36	; 0x24
 8011b26:	f104 0408 	add.w	r4, r4, #8
 8011b2a:	d1f3      	bne.n	8011b14 <igmp_shutdown+0x8>
 8011b2c:	bd70      	pop	{r4, r5, r6, pc}
 8011b2e:	bf00      	nop
 8011b30:	2000a6d8 	ldrdcs	sl, [r0], -r8

08011b34 <ip_set_ip>:
 8011b34:	b510      	push	{r4, lr}
 8011b36:	4604      	mov	r4, r0
 8011b38:	f7fd fff6 	bl	800fb28 <udp_set_ip>
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b42:	f7ff be91 	b.w	8011868 <igmp_set_ip>

08011b46 <ip_init>:
 8011b46:	b538      	push	{r3, r4, r5, lr}
 8011b48:	4604      	mov	r4, r0
 8011b4a:	460d      	mov	r5, r1
 8011b4c:	f7fe f80c 	bl	800fb68 <udp_init>
 8011b50:	4629      	mov	r1, r5
 8011b52:	4620      	mov	r0, r4
 8011b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b58:	f7ff be9c 	b.w	8011894 <igmp_init>

08011b5c <ip_shutdown>:
 8011b5c:	b508      	push	{r3, lr}
 8011b5e:	f7ff ffd5 	bl	8011b0c <igmp_shutdown>
 8011b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8011b66:	f7fe b831 	b.w	800fbcc <udp_shutdown>

08011b6a <ip_handle>:
 8011b6a:	7b82      	ldrb	r2, [r0, #14]
 8011b6c:	7dc3      	ldrb	r3, [r0, #23]
 8011b6e:	2a45      	cmp	r2, #69	; 0x45
 8011b70:	d003      	beq.n	8011b7a <ip_handle+0x10>
 8011b72:	2b02      	cmp	r3, #2
 8011b74:	d111      	bne.n	8011b9a <ip_handle+0x30>
 8011b76:	f7ff beef 	b.w	8011958 <igmp_handle>
 8011b7a:	2b06      	cmp	r3, #6
 8011b7c:	d00b      	beq.n	8011b96 <ip_handle+0x2c>
 8011b7e:	d804      	bhi.n	8011b8a <ip_handle+0x20>
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	d006      	beq.n	8011b92 <ip_handle+0x28>
 8011b84:	2b02      	cmp	r3, #2
 8011b86:	d0f6      	beq.n	8011b76 <ip_handle+0xc>
 8011b88:	4770      	bx	lr
 8011b8a:	2b11      	cmp	r3, #17
 8011b8c:	d105      	bne.n	8011b9a <ip_handle+0x30>
 8011b8e:	f7fe b81f 	b.w	800fbd0 <udp_handle>
 8011b92:	f000 b82b 	b.w	8011bec <icmp_handle>
 8011b96:	f7fd bd6b 	b.w	800f670 <tcp_handle>
 8011b9a:	4770      	bx	lr

08011b9c <net_chksum>:
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	f021 0201 	bic.w	r2, r1, #1
 8011ba2:	b530      	push	{r4, r5, lr}
 8011ba4:	4402      	add	r2, r0
 8011ba6:	084c      	lsrs	r4, r1, #1
 8011ba8:	4290      	cmp	r0, r2
 8011baa:	d10e      	bne.n	8011bca <net_chksum+0x2e>
 8011bac:	f06f 0201 	mvn.w	r2, #1
 8011bb0:	fb02 1104 	mla	r1, r2, r4, r1
 8011bb4:	b121      	cbz	r1, 8011bc0 <net_chksum+0x24>
 8011bb6:	7802      	ldrb	r2, [r0, #0]
 8011bb8:	0212      	lsls	r2, r2, #8
 8011bba:	ba52      	rev16	r2, r2
 8011bbc:	b292      	uxth	r2, r2
 8011bbe:	4413      	add	r3, r2
 8011bc0:	0c1a      	lsrs	r2, r3, #16
 8011bc2:	d106      	bne.n	8011bd2 <net_chksum+0x36>
 8011bc4:	43d8      	mvns	r0, r3
 8011bc6:	b280      	uxth	r0, r0
 8011bc8:	bd30      	pop	{r4, r5, pc}
 8011bca:	f830 5b02 	ldrh.w	r5, [r0], #2
 8011bce:	442b      	add	r3, r5
 8011bd0:	e7ea      	b.n	8011ba8 <net_chksum+0xc>
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	e7f3      	b.n	8011bbe <net_chksum+0x22>

08011bd6 <memcpy.isra.0>:
 8011bd6:	3801      	subs	r0, #1
 8011bd8:	440a      	add	r2, r1
 8011bda:	4291      	cmp	r1, r2
 8011bdc:	d100      	bne.n	8011be0 <memcpy.isra.0+0xa>
 8011bde:	4770      	bx	lr
 8011be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011be4:	f800 3f01 	strb.w	r3, [r0, #1]!
 8011be8:	e7f7      	b.n	8011bda <memcpy.isra.0+0x4>
	...

08011bec <icmp_handle>:
 8011bec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011bee:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8011bf2:	4604      	mov	r4, r0
 8011bf4:	2b08      	cmp	r3, #8
 8011bf6:	d13e      	bne.n	8011c76 <icmp_handle+0x8a>
 8011bf8:	f890 5023 	ldrb.w	r5, [r0, #35]	; 0x23
 8011bfc:	2d00      	cmp	r5, #0
 8011bfe:	d13a      	bne.n	8011c76 <icmp_handle+0x8a>
 8011c00:	1d86      	adds	r6, r0, #6
 8011c02:	4631      	mov	r1, r6
 8011c04:	2206      	movs	r2, #6
 8011c06:	f7ff ffe6 	bl	8011bd6 <memcpy.isra.0>
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	2206      	movs	r2, #6
 8011c0e:	491b      	ldr	r1, [pc, #108]	; (8011c7c <icmp_handle+0x90>)
 8011c10:	f7ff ffe1 	bl	8011bd6 <memcpy.isra.0>
 8011c14:	8a63      	ldrh	r3, [r4, #18]
 8011c16:	f104 061a 	add.w	r6, r4, #26
 8011c1a:	43db      	mvns	r3, r3
 8011c1c:	4631      	mov	r1, r6
 8011c1e:	2204      	movs	r2, #4
 8011c20:	8263      	strh	r3, [r4, #18]
 8011c22:	f104 001e 	add.w	r0, r4, #30
 8011c26:	f7ff ffd6 	bl	8011bd6 <memcpy.isra.0>
 8011c2a:	2204      	movs	r2, #4
 8011c2c:	4b14      	ldr	r3, [pc, #80]	; (8011c80 <icmp_handle+0x94>)
 8011c2e:	eb0d 0102 	add.w	r1, sp, r2
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	4630      	mov	r0, r6
 8011c36:	f104 060e 	add.w	r6, r4, #14
 8011c3a:	9301      	str	r3, [sp, #4]
 8011c3c:	f7ff ffcb 	bl	8011bd6 <memcpy.isra.0>
 8011c40:	2114      	movs	r1, #20
 8011c42:	4630      	mov	r0, r6
 8011c44:	7625      	strb	r5, [r4, #24]
 8011c46:	7665      	strb	r5, [r4, #25]
 8011c48:	f7ff ffa8 	bl	8011b9c <net_chksum>
 8011c4c:	8a21      	ldrh	r1, [r4, #16]
 8011c4e:	8320      	strh	r0, [r4, #24]
 8011c50:	ba49      	rev16	r1, r1
 8011c52:	b289      	uxth	r1, r1
 8011c54:	4630      	mov	r0, r6
 8011c56:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8011c5a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8011c5e:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 8011c62:	f7ff ff9b 	bl	8011b9c <net_chksum>
 8011c66:	8a21      	ldrh	r1, [r4, #16]
 8011c68:	84a0      	strh	r0, [r4, #36]	; 0x24
 8011c6a:	ba49      	rev16	r1, r1
 8011c6c:	b289      	uxth	r1, r1
 8011c6e:	4620      	mov	r0, r4
 8011c70:	310e      	adds	r1, #14
 8011c72:	f002 fed5 	bl	8014a20 <emac_eth_send>
 8011c76:	b002      	add	sp, #8
 8011c78:	bd70      	pop	{r4, r5, r6, pc}
 8011c7a:	bf00      	nop
 8011c7c:	200029dc 	ldrdcs	r2, [r0], -ip
 8011c80:	200029d0 	ldrdcs	r2, [r0], -r0

08011c84 <Display::ClearLine(unsigned char) [clone .isra.0]>:
 8011c84:	b110      	cbz	r0, 8011c8c <Display::ClearLine(unsigned char) [clone .isra.0]+0x8>
 8011c86:	6803      	ldr	r3, [r0, #0]
 8011c88:	691b      	ldr	r3, [r3, #16]
 8011c8a:	4718      	bx	r3
 8011c8c:	4770      	bx	lr
	...

08011c90 <DisplayUdf::DisplayUdf()>:
 8011c90:	b510      	push	{r4, lr}
 8011c92:	4604      	mov	r4, r0
 8011c94:	f000 ffe6 	bl	8012c64 <Display::Display()>
 8011c98:	2202      	movs	r2, #2
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
 8011ca0:	4b05      	ldr	r3, [pc, #20]	; (8011cb8 <DisplayUdf::DisplayUdf()+0x28>)
 8011ca2:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8011ca6:	601c      	str	r4, [r3, #0]
 8011ca8:	2301      	movs	r3, #1
 8011caa:	f802 3b01 	strb.w	r3, [r2], #1
 8011cae:	3301      	adds	r3, #1
 8011cb0:	2b15      	cmp	r3, #21
 8011cb2:	d1fa      	bne.n	8011caa <DisplayUdf::DisplayUdf()+0x1a>
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	bd10      	pop	{r4, pc}
 8011cb8:	2000a868 	andcs	sl, r0, r8, ror #16

08011cbc <DisplayUdf::SetTitle(char const*, ...)>:
 8011cbc:	b40e      	push	{r1, r2, r3}
 8011cbe:	b517      	push	{r0, r1, r2, r4, lr}
 8011cc0:	ab05      	add	r3, sp, #20
 8011cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	211f      	movs	r1, #31
 8011cca:	3020      	adds	r0, #32
 8011ccc:	9301      	str	r3, [sp, #4]
 8011cce:	f002 f829 	bl	8013d24 <vsnprintf>
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	4404      	add	r4, r0
 8011cd6:	f884 3020 	strb.w	r3, [r4, #32]
 8011cda:	b003      	add	sp, #12
 8011cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ce0:	b003      	add	sp, #12
 8011ce2:	4770      	bx	lr

08011ce4 <DisplayUdf::ShowEmacStart()>:
 8011ce4:	b510      	push	{r4, lr}
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
 8011cec:	6840      	ldr	r0, [r0, #4]
 8011cee:	f7ff ffc9 	bl	8011c84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 8011cf8:	4a02      	ldr	r2, [pc, #8]	; (8011d04 <DisplayUdf::ShowEmacStart()+0x20>)
 8011cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cfe:	f000 bf31 	b.w	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 8011d02:	bf00      	nop
 8011d04:	08017958 	stmdaeq	r1, {r3, r4, r6, r8, fp, ip, sp, lr}

08011d08 <DisplayUdf::ShowIpAddress()>:
 8011d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
 8011d12:	b086      	sub	sp, #24
 8011d14:	6840      	ldr	r0, [r0, #4]
 8011d16:	f7ff ffb5 	bl	8011c84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011d1a:	4b13      	ldr	r3, [pc, #76]	; (8011d68 <DisplayUdf::ShowIpAddress()+0x60>)
 8011d1c:	f894 7042 	ldrb.w	r7, [r4, #66]	; 0x42
 8011d20:	681d      	ldr	r5, [r3, #0]
 8011d22:	69a8      	ldr	r0, [r5, #24]
 8011d24:	692e      	ldr	r6, [r5, #16]
 8011d26:	f7f5 ff31 	bl	8007b8c <__popcountsi2>
 8011d2a:	78eb      	ldrb	r3, [r5, #3]
 8011d2c:	fa5f f886 	uxtb.w	r8, r6
 8011d30:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8011d34:	f3c6 4a07 	ubfx	sl, r6, #16, #8
 8011d38:	0e36      	lsrs	r6, r6, #24
 8011d3a:	b99b      	cbnz	r3, 8011d64 <DisplayUdf::ShowIpAddress()+0x5c>
 8011d3c:	786b      	ldrb	r3, [r5, #1]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	bf14      	ite	ne
 8011d42:	2244      	movne	r2, #68	; 0x44
 8011d44:	2253      	moveq	r2, #83	; 0x53
 8011d46:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8011d4a:	4643      	mov	r3, r8
 8011d4c:	4639      	mov	r1, r7
 8011d4e:	4620      	mov	r0, r4
 8011d50:	e9cd a601 	strd	sl, r6, [sp, #4]
 8011d54:	4a05      	ldr	r2, [pc, #20]	; (8011d6c <DisplayUdf::ShowIpAddress()+0x64>)
 8011d56:	f8cd 9000 	str.w	r9, [sp]
 8011d5a:	f000 ff03 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 8011d5e:	b006      	add	sp, #24
 8011d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d64:	225a      	movs	r2, #90	; 0x5a
 8011d66:	e7ee      	b.n	8011d46 <DisplayUdf::ShowIpAddress()+0x3e>
 8011d68:	2000a298 	mulcs	r0, r8, r2
 8011d6c:	08017967 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, fp, ip, sp, lr}

08011d70 <DisplayUdf::ShowNetmask()>:
 8011d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d72:	4604      	mov	r4, r0
 8011d74:	4b0b      	ldr	r3, [pc, #44]	; (8011da4 <DisplayUdf::ShowNetmask()+0x34>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	699b      	ldr	r3, [r3, #24]
 8011d7a:	0e1a      	lsrs	r2, r3, #24
 8011d7c:	9202      	str	r2, [sp, #8]
 8011d7e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011d82:	9201      	str	r2, [sp, #4]
 8011d84:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011d88:	9200      	str	r2, [sp, #0]
 8011d8a:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 8011d8e:	4a06      	ldr	r2, [pc, #24]	; (8011da8 <DisplayUdf::ShowNetmask()+0x38>)
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	f000 fee7 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 8011d96:	4620      	mov	r0, r4
 8011d98:	b004      	add	sp, #16
 8011d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d9e:	f7ff bfb3 	b.w	8011d08 <DisplayUdf::ShowIpAddress()>
 8011da2:	bf00      	nop
 8011da4:	2000a298 	mulcs	r0, r8, r2
 8011da8:	08017979 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, fp, ip, sp, lr}

08011dac <DisplayUdf::ShowGatewayIp()>:
 8011dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011dae:	4604      	mov	r4, r0
 8011db0:	f890 1052 	ldrb.w	r1, [r0, #82]	; 0x52
 8011db4:	6840      	ldr	r0, [r0, #4]
 8011db6:	f7ff ff65 	bl	8011c84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011dba:	4b0a      	ldr	r3, [pc, #40]	; (8011de4 <DisplayUdf::ShowGatewayIp()+0x38>)
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f894 1052 	ldrb.w	r1, [r4, #82]	; 0x52
 8011dc4:	695b      	ldr	r3, [r3, #20]
 8011dc6:	0e1a      	lsrs	r2, r3, #24
 8011dc8:	9202      	str	r2, [sp, #8]
 8011dca:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011dce:	9201      	str	r2, [sp, #4]
 8011dd0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8011dd4:	9200      	str	r2, [sp, #0]
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	4a03      	ldr	r2, [pc, #12]	; (8011de8 <DisplayUdf::ShowGatewayIp()+0x3c>)
 8011dda:	f000 fec3 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 8011dde:	b004      	add	sp, #16
 8011de0:	bd10      	pop	{r4, pc}
 8011de2:	bf00      	nop
 8011de4:	2000a298 	mulcs	r0, r8, r2
 8011de8:	08017988 	stmdaeq	r1, {r3, r7, r8, fp, ip, sp, lr}

08011dec <DisplayUdf::ShowHostName()>:
 8011dec:	b510      	push	{r4, lr}
 8011dee:	4604      	mov	r4, r0
 8011df0:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
 8011df4:	6840      	ldr	r0, [r0, #4]
 8011df6:	f7ff ff45 	bl	8011c84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011dfa:	4b05      	ldr	r3, [pc, #20]	; (8011e10 <DisplayUdf::ShowHostName()+0x24>)
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 8011e04:	321c      	adds	r2, #28
 8011e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e0a:	f000 bec7 	b.w	8012b9c <Display::Write(unsigned char, char const*)>
 8011e0e:	bf00      	nop
 8011e10:	2000a298 	mulcs	r0, r8, r2

08011e14 <DisplayUdf::Show()>:
 8011e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e16:	4604      	mov	r4, r0
 8011e18:	21ff      	movs	r1, #255	; 0xff
 8011e1a:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8011e1e:	f100 0254 	add.w	r2, r0, #84	; 0x54
 8011e22:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011e26:	2806      	cmp	r0, #6
 8011e28:	bf88      	it	hi
 8011e2a:	f803 1c01 	strbhi.w	r1, [r3, #-1]
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d1f7      	bne.n	8011e22 <DisplayUdf::Show()+0xe>
 8011e32:	2501      	movs	r5, #1
 8011e34:	4629      	mov	r1, r5
 8011e36:	3501      	adds	r5, #1
 8011e38:	6860      	ldr	r0, [r4, #4]
 8011e3a:	b2ed      	uxtb	r5, r5
 8011e3c:	f7ff ff22 	bl	8011c84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011e40:	2d06      	cmp	r5, #6
 8011e42:	d1f7      	bne.n	8011e34 <DisplayUdf::Show()+0x20>
 8011e44:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 8011e48:	f104 0220 	add.w	r2, r4, #32
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	f000 fea5 	bl	8012b9c <Display::Write(unsigned char, char const*)>
 8011e52:	f894 1041 	ldrb.w	r1, [r4, #65]	; 0x41
 8011e56:	4620      	mov	r0, r4
 8011e58:	4a0d      	ldr	r2, [pc, #52]	; (8011e90 <DisplayUdf::Show()+0x7c>)
 8011e5a:	f000 fe9f 	bl	8012b9c <Display::Write(unsigned char, char const*)>
 8011e5e:	4b0d      	ldr	r3, [pc, #52]	; (8011e94 <DisplayUdf::Show()+0x80>)
 8011e60:	4a0d      	ldr	r2, [pc, #52]	; (8011e98 <DisplayUdf::Show()+0x84>)
 8011e62:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8011e66:	9300      	str	r3, [sp, #0]
 8011e68:	4620      	mov	r0, r4
 8011e6a:	2303      	movs	r3, #3
 8011e6c:	f000 fe7a 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 8011e70:	4620      	mov	r0, r4
 8011e72:	f7ff ff49 	bl	8011d08 <DisplayUdf::ShowIpAddress()>
 8011e76:	4620      	mov	r0, r4
 8011e78:	f7ff ff98 	bl	8011dac <DisplayUdf::ShowGatewayIp()>
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	f7ff ff77 	bl	8011d70 <DisplayUdf::ShowNetmask()>
 8011e82:	4620      	mov	r0, r4
 8011e84:	b003      	add	sp, #12
 8011e86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e8a:	f7ff bfaf 	b.w	8011dec <DisplayUdf::ShowHostName()>
 8011e8e:	bf00      	nop
 8011e90:	08015f25 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl, fp, ip, lr}
 8011e94:	2000a904 	andcs	sl, r0, r4, lsl #18
 8011e98:	08017997 	stmdaeq	r1, {r0, r1, r2, r4, r7, r8, fp, ip, sp, lr}

08011e9c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 8011e9c:	3901      	subs	r1, #1
 8011e9e:	b510      	push	{r4, lr}
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	2903      	cmp	r1, #3
 8011ea4:	d82e      	bhi.n	8011f04 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x68>
 8011ea6:	e8df f001 	tbb	[pc, r1]
 8011eaa:	2a1d1502 	bcs	87572ba <__exidx_end+0x73f152>
 8011eae:	4b16      	ldr	r3, [pc, #88]	; (8011f08 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8011eb0:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8011eb4:	6818      	ldr	r0, [r3, #0]
 8011eb6:	f000 ff2e 	bl	8012d16 <Display7Segment::Status(Display7SegmentMessage)>
 8011eba:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 8011ebe:	6860      	ldr	r0, [r4, #4]
 8011ec0:	f7ff fee0 	bl	8011c84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011ec4:	4a11      	ldr	r2, [pc, #68]	; (8011f0c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x70>)
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 8011ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ed0:	f000 be48 	b.w	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 8011ed4:	f248 0180 	movw	r1, #32896	; 0x8080
 8011ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011edc:	4b0a      	ldr	r3, [pc, #40]	; (8011f08 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8011ede:	6818      	ldr	r0, [r3, #0]
 8011ee0:	f000 bf19 	b.w	8012d16 <Display7Segment::Status(Display7SegmentMessage)>
 8011ee4:	4b08      	ldr	r3, [pc, #32]	; (8011f08 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x6c>)
 8011ee6:	f44f 41b6 	mov.w	r1, #23296	; 0x5b00
 8011eea:	6818      	ldr	r0, [r3, #0]
 8011eec:	f000 ff13 	bl	8012d16 <Display7Segment::Status(Display7SegmentMessage)>
 8011ef0:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 8011ef4:	6860      	ldr	r0, [r4, #4]
 8011ef6:	f7ff fec5 	bl	8011c84 <Display::ClearLine(unsigned char) [clone .isra.0]>
 8011efa:	4a05      	ldr	r2, [pc, #20]	; (8011f10 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x74>)
 8011efc:	e7e3      	b.n	8011ec6 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x2a>
 8011efe:	f645 3179 	movw	r1, #23417	; 0x5b79
 8011f02:	e7e9      	b.n	8011ed8 <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)+0x3c>
 8011f04:	bd10      	pop	{r4, pc}
 8011f06:	bf00      	nop
 8011f08:	2000a874 	andcs	sl, r0, r4, ror r8
 8011f0c:	080179a6 	stmdaeq	r1, {r1, r2, r5, r7, r8, fp, ip, sp, lr}
 8011f10:	080179b4 	stmdaeq	r1, {r2, r4, r5, r7, r8, fp, ip, sp, lr}

08011f14 <DisplayUdf::ShowShutdown()>:
 8011f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f18:	f44f 42de 	mov.w	r2, #28416	; 0x6f00
 8011f1c:	4901      	ldr	r1, [pc, #4]	; (8011f24 <DisplayUdf::ShowShutdown()+0x10>)
 8011f1e:	f000 be82 	b.w	8012c26 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>
 8011f22:	bf00      	nop
 8011f24:	080179c2 	stmdaeq	r1, {r1, r6, r7, r8, fp, ip, sp, lr}

08011f28 <DisplayUdf::Set(unsigned char, displayudf::Labels)>:
 8011f28:	1e4b      	subs	r3, r1, #1
 8011f2a:	2b05      	cmp	r3, #5
 8011f2c:	b530      	push	{r4, r5, lr}
 8011f2e:	d80f      	bhi.n	8011f50 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x28>
 8011f30:	2300      	movs	r3, #0
 8011f32:	f100 0440 	add.w	r4, r0, #64	; 0x40
 8011f36:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011f3a:	428d      	cmp	r5, r1
 8011f3c:	d109      	bne.n	8011f52 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x2a>
 8011f3e:	1884      	adds	r4, r0, r2
 8011f40:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
 8011f44:	4403      	add	r3, r0
 8011f46:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
 8011f4a:	4410      	add	r0, r2
 8011f4c:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 8011f50:	bd30      	pop	{r4, r5, pc}
 8011f52:	3301      	adds	r3, #1
 8011f54:	2b14      	cmp	r3, #20
 8011f56:	d1ee      	bne.n	8011f36 <DisplayUdf::Set(unsigned char, displayudf::Labels)+0xe>
 8011f58:	e7f7      	b.n	8011f4a <DisplayUdf::Set(unsigned char, displayudf::Labels)+0x22>
	...

08011f5c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>:
 8011f5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f5e:	88c5      	ldrh	r5, [r0, #6]
 8011f60:	8886      	ldrh	r6, [r0, #4]
 8011f62:	42b5      	cmp	r5, r6
 8011f64:	d216      	bcs.n	8011f94 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x38>
 8011f66:	4604      	mov	r4, r0
 8011f68:	6800      	ldr	r0, [r0, #0]
 8011f6a:	4428      	add	r0, r5
 8011f6c:	1b75      	subs	r5, r6, r5
 8011f6e:	7a26      	ldrb	r6, [r4, #8]
 8011f70:	b923      	cbnz	r3, 8011f7c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x20>
 8011f72:	b926      	cbnz	r6, 8011f7e <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x22>
 8011f74:	9200      	str	r2, [sp, #0]
 8011f76:	460b      	mov	r3, r1
 8011f78:	4a09      	ldr	r2, [pc, #36]	; (8011fa0 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x44>)
 8011f7a:	e003      	b.n	8011f84 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011f7c:	b166      	cbz	r6, 8011f98 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x3c>
 8011f7e:	460b      	mov	r3, r1
 8011f80:	9200      	str	r2, [sp, #0]
 8011f82:	4a08      	ldr	r2, [pc, #32]	; (8011fa4 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x48>)
 8011f84:	4629      	mov	r1, r5
 8011f86:	f001 feb5 	bl	8013cf4 <snprintf>
 8011f8a:	4285      	cmp	r5, r0
 8011f8c:	bfa2      	ittt	ge
 8011f8e:	88e3      	ldrhge	r3, [r4, #6]
 8011f90:	181b      	addge	r3, r3, r0
 8011f92:	80e3      	strhge	r3, [r4, #6]
 8011f94:	b002      	add	sp, #8
 8011f96:	bd70      	pop	{r4, r5, r6, pc}
 8011f98:	9200      	str	r2, [sp, #0]
 8011f9a:	460b      	mov	r3, r1
 8011f9c:	4a02      	ldr	r2, [pc, #8]	; (8011fa8 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x4c>)
 8011f9e:	e7f1      	b.n	8011f84 <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]+0x28>
 8011fa0:	0801607d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sp, lr}
 8011fa4:	08016074 	stmdaeq	r1, {r2, r4, r5, r6, sp, lr}
 8011fa8:	0801607e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sp, lr}

08011fac <DisplayUdfParams::DisplayUdfParams(DisplayUdfParamsStore*)>:
 8011fac:	b510      	push	{r4, lr}
 8011fae:	2220      	movs	r2, #32
 8011fb0:	4604      	mov	r4, r0
 8011fb2:	f840 1b04 	str.w	r1, [r0], #4
 8011fb6:	2100      	movs	r1, #0
 8011fb8:	f001 fb44 	bl	8013644 <memset>
 8011fbc:	f647 7305 	movw	r3, #32517	; 0x7f05
 8011fc0:	4620      	mov	r0, r4
 8011fc2:	84a3      	strh	r3, [r4, #36]	; 0x24
 8011fc4:	bd10      	pop	{r4, pc}

08011fc6 <DisplayUdfParams::Load()>:
 8011fc6:	b508      	push	{r3, lr}
 8011fc8:	2300      	movs	r3, #0
 8011fca:	4601      	mov	r1, r0
 8011fcc:	6043      	str	r3, [r0, #4]
 8011fce:	6800      	ldr	r0, [r0, #0]
 8011fd0:	b120      	cbz	r0, 8011fdc <DisplayUdfParams::Load()+0x16>
 8011fd2:	6803      	ldr	r3, [r0, #0]
 8011fd4:	3104      	adds	r1, #4
 8011fd6:	68db      	ldr	r3, [r3, #12]
 8011fd8:	4798      	blx	r3
 8011fda:	2001      	movs	r0, #1
 8011fdc:	bd08      	pop	{r3, pc}
	...

08011fe0 <DisplayUdfParams::Load(char const*, unsigned int)>:
 8011fe0:	6803      	ldr	r3, [r0, #0]
 8011fe2:	b1d3      	cbz	r3, 801201a <DisplayUdfParams::Load(char const*, unsigned int)+0x3a>
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011fe8:	460d      	mov	r5, r1
 8011fea:	4616      	mov	r6, r2
 8011fec:	4604      	mov	r4, r0
 8011fee:	6043      	str	r3, [r0, #4]
 8011ff0:	4602      	mov	r2, r0
 8011ff2:	490a      	ldr	r1, [pc, #40]	; (801201c <DisplayUdfParams::Load(char const*, unsigned int)+0x3c>)
 8011ff4:	4668      	mov	r0, sp
 8011ff6:	f000 fbf1 	bl	80127dc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>
 8011ffa:	4632      	mov	r2, r6
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	4668      	mov	r0, sp
 8012000:	f000 fbf0 	bl	80127e4 <ReadConfigFile::Read(char const*, unsigned int)>
 8012004:	4621      	mov	r1, r4
 8012006:	f851 0b04 	ldr.w	r0, [r1], #4
 801200a:	6803      	ldr	r3, [r0, #0]
 801200c:	689b      	ldr	r3, [r3, #8]
 801200e:	4798      	blx	r3
 8012010:	4668      	mov	r0, sp
 8012012:	f000 fbe6 	bl	80127e2 <ReadConfigFile::~ReadConfigFile()>
 8012016:	b002      	add	sp, #8
 8012018:	bd70      	pop	{r4, r5, r6, pc}
 801201a:	4770      	bx	lr
 801201c:	080120e5 	stmdaeq	r1, {r0, r2, r5, r6, r7, sp}

08012020 <DisplayUdfParams::callbackFunction(char const*)>:
 8012020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012022:	460e      	mov	r6, r1
 8012024:	4604      	mov	r4, r0
 8012026:	492b      	ldr	r1, [pc, #172]	; (80120d4 <DisplayUdfParams::callbackFunction(char const*)+0xb4>)
 8012028:	4630      	mov	r0, r6
 801202a:	f10d 0207 	add.w	r2, sp, #7
 801202e:	f000 fd3b 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012032:	b968      	cbnz	r0, 8012050 <DisplayUdfParams::callbackFunction(char const*)+0x30>
 8012034:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012038:	6863      	ldr	r3, [r4, #4]
 801203a:	2a7f      	cmp	r2, #127	; 0x7f
 801203c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8012040:	bf14      	ite	ne
 8012042:	f043 5300 	orrne.w	r3, r3, #536870912	; 0x20000000
 8012046:	f023 5300 	biceq.w	r3, r3, #536870912	; 0x20000000
 801204a:	6063      	str	r3, [r4, #4]
 801204c:	b003      	add	sp, #12
 801204e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012050:	4630      	mov	r0, r6
 8012052:	4921      	ldr	r1, [pc, #132]	; (80120d8 <DisplayUdfParams::callbackFunction(char const*)+0xb8>)
 8012054:	f10d 0207 	add.w	r2, sp, #7
 8012058:	f000 fd26 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 801205c:	b958      	cbnz	r0, 8012076 <DisplayUdfParams::callbackFunction(char const*)+0x56>
 801205e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012062:	6863      	ldr	r3, [r4, #4]
 8012064:	2a05      	cmp	r2, #5
 8012066:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 801206a:	bf14      	ite	ne
 801206c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8012070:	f023 5380 	biceq.w	r3, r3, #268435456	; 0x10000000
 8012074:	e7e9      	b.n	801204a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8012076:	4630      	mov	r0, r6
 8012078:	4918      	ldr	r1, [pc, #96]	; (80120dc <DisplayUdfParams::callbackFunction(char const*)+0xbc>)
 801207a:	f10d 0207 	add.w	r2, sp, #7
 801207e:	f000 fd13 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 8012082:	b948      	cbnz	r0, 8012098 <DisplayUdfParams::callbackFunction(char const*)+0x78>
 8012084:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012088:	6863      	ldr	r3, [r4, #4]
 801208a:	b112      	cbz	r2, 8012092 <DisplayUdfParams::callbackFunction(char const*)+0x72>
 801208c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012090:	e7db      	b.n	801204a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8012092:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012096:	e7d8      	b.n	801204a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 8012098:	2500      	movs	r5, #0
 801209a:	4f11      	ldr	r7, [pc, #68]	; (80120e0 <DisplayUdfParams::callbackFunction(char const*)+0xc0>)
 801209c:	4630      	mov	r0, r6
 801209e:	f857 1b04 	ldr.w	r1, [r7], #4
 80120a2:	f10d 0207 	add.w	r2, sp, #7
 80120a6:	f000 fcff 	bl	8012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>
 80120aa:	b978      	cbnz	r0, 80120cc <DisplayUdfParams::callbackFunction(char const*)+0xac>
 80120ac:	2301      	movs	r3, #1
 80120ae:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80120b2:	6862      	ldr	r2, [r4, #4]
 80120b4:	1e4e      	subs	r6, r1, #1
 80120b6:	2e05      	cmp	r6, #5
 80120b8:	fa03 f305 	lsl.w	r3, r3, r5
 80120bc:	4425      	add	r5, r4
 80120be:	bf99      	ittee	ls
 80120c0:	7229      	strbls	r1, [r5, #8]
 80120c2:	4313      	orrls	r3, r2
 80120c4:	7228      	strbhi	r0, [r5, #8]
 80120c6:	ea22 0303 	bichi.w	r3, r2, r3
 80120ca:	e7be      	b.n	801204a <DisplayUdfParams::callbackFunction(char const*)+0x2a>
 80120cc:	3501      	adds	r5, #1
 80120ce:	2d14      	cmp	r5, #20
 80120d0:	d1e4      	bne.n	801209c <DisplayUdfParams::callbackFunction(char const*)+0x7c>
 80120d2:	e7bb      	b.n	801204c <DisplayUdfParams::callbackFunction(char const*)+0x2c>
 80120d4:	08017a82 	stmdaeq	r1, {r1, r7, r9, fp, ip, sp, lr}
 80120d8:	08017a4a 	stmdaeq	r1, {r1, r3, r6, r9, fp, ip, sp, lr}
 80120dc:	08017a58 	stmdaeq	r1, {r3, r4, r6, r9, fp, ip, sp, lr}
 80120e0:	080179d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, fp, ip, sp, lr}

080120e4 <DisplayUdfParams::staticCallbackFunction(void*, char const*)>:
 80120e4:	f7ff bf9c 	b.w	8012020 <DisplayUdfParams::callbackFunction(char const*)>

080120e8 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)>:
 80120e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ec:	4604      	mov	r4, r0
 80120ee:	4615      	mov	r5, r2
 80120f0:	461e      	mov	r6, r3
 80120f2:	b086      	sub	sp, #24
 80120f4:	3004      	adds	r0, #4
 80120f6:	b379      	cbz	r1, 8012158 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x70>
 80120f8:	2222      	movs	r2, #34	; 0x22
 80120fa:	f001 fa8c 	bl	8013616 <memmove>
 80120fe:	462a      	mov	r2, r5
 8012100:	4633      	mov	r3, r6
 8012102:	493d      	ldr	r1, [pc, #244]	; (80121f8 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x110>)
 8012104:	a803      	add	r0, sp, #12
 8012106:	f000 fa99 	bl	801263c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>
 801210a:	6863      	ldr	r3, [r4, #4]
 801210c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8012110:	493a      	ldr	r1, [pc, #232]	; (80121fc <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x114>)
 8012112:	f3c3 7340 	ubfx	r3, r3, #29, #1
 8012116:	a803      	add	r0, sp, #12
 8012118:	f7ff ff20 	bl	8011f5c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801211c:	6863      	ldr	r3, [r4, #4]
 801211e:	4938      	ldr	r1, [pc, #224]	; (8012200 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x118>)
 8012120:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8012124:	f3c3 7300 	ubfx	r3, r3, #28, #1
 8012128:	a803      	add	r0, sp, #12
 801212a:	f7ff ff17 	bl	8011f5c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 801212e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8012132:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8012136:	42a9      	cmp	r1, r5
 8012138:	d227      	bcs.n	801218a <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0xa2>
 801213a:	6863      	ldr	r3, [r4, #4]
 801213c:	9803      	ldr	r0, [sp, #12]
 801213e:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
 8012142:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8012146:	4408      	add	r0, r1
 8012148:	eba5 0501 	sub.w	r5, r5, r1
 801214c:	d10b      	bne.n	8012166 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x7e>
 801214e:	b962      	cbnz	r2, 801216a <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x82>
 8012150:	9200      	str	r2, [sp, #0]
 8012152:	4b2c      	ldr	r3, [pc, #176]	; (8012204 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 8012154:	4a2c      	ldr	r2, [pc, #176]	; (8012208 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x120>)
 8012156:	e00e      	b.n	8012176 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x8e>
 8012158:	6823      	ldr	r3, [r4, #0]
 801215a:	4601      	mov	r1, r0
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	4618      	mov	r0, r3
 8012160:	68d2      	ldr	r2, [r2, #12]
 8012162:	4790      	blx	r2
 8012164:	e7cb      	b.n	80120fe <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x16>
 8012166:	2a00      	cmp	r2, #0
 8012168:	d041      	beq.n	80121ee <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x106>
 801216a:	3b00      	subs	r3, #0
 801216c:	bf18      	it	ne
 801216e:	2301      	movne	r3, #1
 8012170:	4a26      	ldr	r2, [pc, #152]	; (801220c <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x124>)
 8012172:	9300      	str	r3, [sp, #0]
 8012174:	4b23      	ldr	r3, [pc, #140]	; (8012204 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 8012176:	4629      	mov	r1, r5
 8012178:	f001 fdbc 	bl	8013cf4 <snprintf>
 801217c:	4285      	cmp	r5, r0
 801217e:	bfa2      	ittt	ge
 8012180:	f8bd 3012 	ldrhge.w	r3, [sp, #18]
 8012184:	181b      	addge	r3, r3, r0
 8012186:	f8ad 3012 	strhge.w	r3, [sp, #18]
 801218a:	2500      	movs	r5, #0
 801218c:	2701      	movs	r7, #1
 801218e:	4e20      	ldr	r6, [pc, #128]	; (8012210 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x128>)
 8012190:	f104 0808 	add.w	r8, r4, #8
 8012194:	f856 1b04 	ldr.w	r1, [r6], #4
 8012198:	780b      	ldrb	r3, [r1, #0]
 801219a:	b15b      	cbz	r3, 80121b4 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0xcc>
 801219c:	6862      	ldr	r2, [r4, #4]
 801219e:	fa07 f305 	lsl.w	r3, r7, r5
 80121a2:	4393      	bics	r3, r2
 80121a4:	bf0c      	ite	eq
 80121a6:	2301      	moveq	r3, #1
 80121a8:	2300      	movne	r3, #0
 80121aa:	f818 2005 	ldrb.w	r2, [r8, r5]
 80121ae:	a803      	add	r0, sp, #12
 80121b0:	f7ff fed4 	bl	8011f5c <bool PropertiesBuilder::Add<unsigned char>(char const*, unsigned char, bool, unsigned int) [clone .isra.0]>
 80121b4:	3501      	adds	r5, #1
 80121b6:	2d14      	cmp	r5, #20
 80121b8:	d1ec      	bne.n	8012194 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0xac>
 80121ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80121be:	b17b      	cbz	r3, 80121e0 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0xf8>
 80121c0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80121c4:	9b03      	ldr	r3, [sp, #12]
 80121c6:	4413      	add	r3, r2
 80121c8:	227d      	movs	r2, #125	; 0x7d
 80121ca:	f803 2c01 	strb.w	r2, [r3, #-1]
 80121ce:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80121d2:	9903      	ldr	r1, [sp, #12]
 80121d4:	54ca      	strb	r2, [r1, r3]
 80121d6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80121da:	3301      	adds	r3, #1
 80121dc:	f8ad 3012 	strh.w	r3, [sp, #18]
 80121e0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80121e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121e6:	601a      	str	r2, [r3, #0]
 80121e8:	b006      	add	sp, #24
 80121ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121ee:	2301      	movs	r3, #1
 80121f0:	4a08      	ldr	r2, [pc, #32]	; (8012214 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x12c>)
 80121f2:	9300      	str	r3, [sp, #0]
 80121f4:	4b03      	ldr	r3, [pc, #12]	; (8012204 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x11c>)
 80121f6:	e7be      	b.n	8012176 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)+0x8e>
 80121f8:	08017a76 	stmdaeq	r1, {r1, r2, r4, r5, r6, r9, fp, ip, sp, lr}
 80121fc:	08017a82 	stmdaeq	r1, {r1, r7, r9, fp, ip, sp, lr}
 8012200:	08017a4a 	stmdaeq	r1, {r1, r3, r6, r9, fp, ip, sp, lr}
 8012204:	08017a58 	stmdaeq	r1, {r3, r4, r6, r9, fp, ip, sp, lr}
 8012208:	0801607d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, sp, lr}
 801220c:	08016074 	stmdaeq	r1, {r2, r4, r5, r6, sp, lr}
 8012210:	080179d4 	stmdaeq	r1, {r2, r4, r6, r7, r8, fp, ip, sp, lr}
 8012214:	0801607e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sp, lr}

08012218 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)>:
 8012218:	b513      	push	{r0, r1, r4, lr}
 801221a:	6804      	ldr	r4, [r0, #0]
 801221c:	b914      	cbnz	r4, 8012224 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0xc>
 801221e:	601c      	str	r4, [r3, #0]
 8012220:	b002      	add	sp, #8
 8012222:	bd10      	pop	{r4, pc}
 8012224:	9300      	str	r3, [sp, #0]
 8012226:	4613      	mov	r3, r2
 8012228:	460a      	mov	r2, r1
 801222a:	2100      	movs	r1, #0
 801222c:	f7ff ff5c 	bl	80120e8 <DisplayUdfParams::Builder(TDisplayUdfParams const*, char*, unsigned int, unsigned int&)>
 8012230:	e7f6      	b.n	8012220 <DisplayUdfParams::Save(char*, unsigned int, unsigned int&)+0x8>

08012232 <DisplayUdfParams::Set(DisplayUdf*)>:
 8012232:	6843      	ldr	r3, [r0, #4]
 8012234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012238:	009a      	lsls	r2, r3, #2
 801223a:	4604      	mov	r4, r0
 801223c:	460e      	mov	r6, r1
 801223e:	d506      	bpl.n	801224e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8012240:	6848      	ldr	r0, [r1, #4]
 8012242:	b120      	cbz	r0, 801224e <DisplayUdfParams::Set(DisplayUdf*)+0x1c>
 8012244:	6803      	ldr	r3, [r0, #0]
 8012246:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
 801224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801224c:	4798      	blx	r3
 801224e:	6863      	ldr	r3, [r4, #4]
 8012250:	6870      	ldr	r0, [r6, #4]
 8012252:	00db      	lsls	r3, r3, #3
 8012254:	bf41      	itttt	mi
 8012256:	f64e 2260 	movwmi	r2, #60000	; 0xea60
 801225a:	f894 3024 	ldrbmi.w	r3, [r4, #36]	; 0x24
 801225e:	4353      	mulmi	r3, r2
 8012260:	6133      	strmi	r3, [r6, #16]
 8012262:	6861      	ldr	r1, [r4, #4]
 8012264:	f3c1 7180 	ubfx	r1, r1, #30, #1
 8012268:	b110      	cbz	r0, 8012270 <DisplayUdfParams::Set(DisplayUdf*)+0x3e>
 801226a:	6803      	ldr	r3, [r0, #0]
 801226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801226e:	4798      	blx	r3
 8012270:	2500      	movs	r5, #0
 8012272:	2701      	movs	r7, #1
 8012274:	f104 0808 	add.w	r8, r4, #8
 8012278:	6862      	ldr	r2, [r4, #4]
 801227a:	fa07 f305 	lsl.w	r3, r7, r5
 801227e:	4393      	bics	r3, r2
 8012280:	d105      	bne.n	801228e <DisplayUdfParams::Set(DisplayUdf*)+0x5c>
 8012282:	462a      	mov	r2, r5
 8012284:	4630      	mov	r0, r6
 8012286:	f818 1005 	ldrb.w	r1, [r8, r5]
 801228a:	f7ff fe4d 	bl	8011f28 <DisplayUdf::Set(unsigned char, displayudf::Labels)>
 801228e:	3501      	adds	r5, #1
 8012290:	2d14      	cmp	r5, #20
 8012292:	d1f1      	bne.n	8012278 <DisplayUdfParams::Set(DisplayUdf*)+0x46>
 8012294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012298 <DisplayUdfParams::Dump()>:
 8012298:	4770      	bx	lr

0801229a <DisplayUdf::ShowNodeName(ArtNetNode*)>:
 801229a:	b538      	push	{r3, r4, r5, lr}
 801229c:	4604      	mov	r4, r0
 801229e:	6840      	ldr	r0, [r0, #4]
 80122a0:	460d      	mov	r5, r1
 80122a2:	b120      	cbz	r0, 80122ae <DisplayUdf::ShowNodeName(ArtNetNode*)+0x14>
 80122a4:	6803      	ldr	r3, [r0, #0]
 80122a6:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 80122aa:	691b      	ldr	r3, [r3, #16]
 80122ac:	4798      	blx	r3
 80122ae:	4620      	mov	r0, r4
 80122b0:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 80122b4:	f105 0242 	add.w	r2, r5, #66	; 0x42
 80122b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122bc:	f000 bc6e 	b.w	8012b9c <Display::Write(unsigned char, char const*)>

080122c0 <DisplayUdf::ShowUniverse(ArtNetNode*)>:
 80122c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122c4:	460c      	mov	r4, r1
 80122c6:	b08b      	sub	sp, #44	; 0x2c
 80122c8:	4606      	mov	r6, r0
 80122ca:	2301      	movs	r3, #1
 80122cc:	2100      	movs	r1, #0
 80122ce:	4620      	mov	r0, r4
 80122d0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 80122d4:	f7f6 fd8a 	bl	8008dec <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 80122d8:	b350      	cbz	r0, 8012330 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x70>
 80122da:	2100      	movs	r1, #0
 80122dc:	4620      	mov	r0, r4
 80122de:	f896 9044 	ldrb.w	r9, [r6, #68]	; 0x44
 80122e2:	f7f6 fd9d 	bl	8008e20 <ArtNetNode::GetNetSwitch(unsigned int) const>
 80122e6:	2100      	movs	r1, #0
 80122e8:	4605      	mov	r5, r0
 80122ea:	4620      	mov	r0, r4
 80122ec:	f7f6 fd94 	bl	8008e18 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 80122f0:	2100      	movs	r1, #0
 80122f2:	4607      	mov	r7, r0
 80122f4:	4620      	mov	r0, r4
 80122f6:	f89d a027 	ldrb.w	sl, [sp, #39]	; 0x27
 80122fa:	f7f6 ff1b 	bl	8009134 <ArtNetNode::GetMergeMode(unsigned int) const>
 80122fe:	4a2d      	ldr	r2, [pc, #180]	; (80123b4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8012300:	4b2d      	ldr	r3, [pc, #180]	; (80123b8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 8012302:	2100      	movs	r1, #0
 8012304:	2800      	cmp	r0, #0
 8012306:	bf0c      	ite	eq
 8012308:	4690      	moveq	r8, r2
 801230a:	4698      	movne	r8, r3
 801230c:	4620      	mov	r0, r4
 801230e:	f7f6 fee0 	bl	80090d2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8012312:	4a2a      	ldr	r2, [pc, #168]	; (80123bc <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 8012314:	4b2a      	ldr	r3, [pc, #168]	; (80123c0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>)
 8012316:	4649      	mov	r1, r9
 8012318:	2800      	cmp	r0, #0
 801231a:	bf18      	it	ne
 801231c:	4613      	movne	r3, r2
 801231e:	e9cd 7a00 	strd	r7, sl, [sp]
 8012322:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8012326:	4630      	mov	r0, r6
 8012328:	462b      	mov	r3, r5
 801232a:	4a26      	ldr	r2, [pc, #152]	; (80123c4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x104>)
 801232c:	f000 fc1a 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 8012330:	2500      	movs	r5, #0
 8012332:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80123c0 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x100>
 8012336:	4629      	mov	r1, r5
 8012338:	2301      	movs	r3, #1
 801233a:	4620      	mov	r0, r4
 801233c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
 8012340:	f7f6 fd54 	bl	8008dec <ArtNetNode::GetUniverseSwitch(unsigned int, unsigned char&, lightset::PortDir) const>
 8012344:	46a9      	mov	r9, r5
 8012346:	3501      	adds	r5, #1
 8012348:	b378      	cbz	r0, 80123aa <DisplayUdf::ShowUniverse(ArtNetNode*)+0xea>
 801234a:	f106 0347 	add.w	r3, r6, #71	; 0x47
 801234e:	2100      	movs	r1, #0
 8012350:	4620      	mov	r0, r4
 8012352:	f813 b005 	ldrb.w	fp, [r3, r5]
 8012356:	f7f6 fd63 	bl	8008e20 <ArtNetNode::GetNetSwitch(unsigned int) const>
 801235a:	2100      	movs	r1, #0
 801235c:	4607      	mov	r7, r0
 801235e:	4620      	mov	r0, r4
 8012360:	f7f6 fd5a 	bl	8008e18 <ArtNetNode::GetSubnetSwitch(unsigned int) const>
 8012364:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8012368:	4680      	mov	r8, r0
 801236a:	4649      	mov	r1, r9
 801236c:	4620      	mov	r0, r4
 801236e:	9307      	str	r3, [sp, #28]
 8012370:	f7f6 fee0 	bl	8009134 <ArtNetNode::GetMergeMode(unsigned int) const>
 8012374:	4b10      	ldr	r3, [pc, #64]	; (80123b8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf8>)
 8012376:	4a0f      	ldr	r2, [pc, #60]	; (80123b4 <DisplayUdf::ShowUniverse(ArtNetNode*)+0xf4>)
 8012378:	4649      	mov	r1, r9
 801237a:	2800      	cmp	r0, #0
 801237c:	bf18      	it	ne
 801237e:	461a      	movne	r2, r3
 8012380:	4620      	mov	r0, r4
 8012382:	9206      	str	r2, [sp, #24]
 8012384:	f7f6 fea5 	bl	80090d2 <ArtNetNode::GetPortProtocol(unsigned int) const>
 8012388:	490c      	ldr	r1, [pc, #48]	; (80123bc <DisplayUdf::ShowUniverse(ArtNetNode*)+0xfc>)
 801238a:	9a06      	ldr	r2, [sp, #24]
 801238c:	2800      	cmp	r0, #0
 801238e:	bf08      	it	eq
 8012390:	4651      	moveq	r1, sl
 8012392:	9b07      	ldr	r3, [sp, #28]
 8012394:	9104      	str	r1, [sp, #16]
 8012396:	e9cd 8301 	strd	r8, r3, [sp, #4]
 801239a:	9203      	str	r2, [sp, #12]
 801239c:	462b      	mov	r3, r5
 801239e:	4659      	mov	r1, fp
 80123a0:	4630      	mov	r0, r6
 80123a2:	4a09      	ldr	r2, [pc, #36]	; (80123c8 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x108>)
 80123a4:	9700      	str	r7, [sp, #0]
 80123a6:	f000 fbdd 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 80123aa:	2d04      	cmp	r5, #4
 80123ac:	d1c3      	bne.n	8012336 <DisplayUdf::ShowUniverse(ArtNetNode*)+0x76>
 80123ae:	b00b      	add	sp, #44	; 0x2c
 80123b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b4:	08015fa5 	stmdaeq	r1, {r0, r2, r5, r7, r8, r9, sl, fp, ip, lr}
 80123b8:	08015fa9 	stmdaeq	r1, {r0, r3, r5, r7, r8, r9, sl, fp, ip, lr}
 80123bc:	08015fb5 	stmdaeq	r1, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip, lr}
 80123c0:	08017a8c 	stmdaeq	r1, {r2, r3, r7, r9, fp, ip, sp, lr}
 80123c4:	08017a91 	stmdaeq	r1, {r0, r4, r7, r9, fp, ip, sp, lr}
 80123c8:	08017aa5 	stmdaeq	r1, {r0, r2, r5, r7, r9, fp, ip, sp, lr}

080123cc <DisplayUdf::ShowDestinationIp(ArtNetNode*)>:
 80123cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123d0:	4606      	mov	r6, r0
 80123d2:	2541      	movs	r5, #65	; 0x41
 80123d4:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8012414 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x48>
 80123d8:	b085      	sub	sp, #20
 80123da:	f100 084e 	add.w	r8, r0, #78	; 0x4e
 80123de:	f501 775b 	add.w	r7, r1, #876	; 0x36c
 80123e2:	012b      	lsls	r3, r5, #4
 80123e4:	58fc      	ldr	r4, [r7, r3]
 80123e6:	464a      	mov	r2, r9
 80123e8:	0e23      	lsrs	r3, r4, #24
 80123ea:	9303      	str	r3, [sp, #12]
 80123ec:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80123f0:	9302      	str	r3, [sp, #8]
 80123f2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80123f6:	b2e4      	uxtb	r4, r4
 80123f8:	9301      	str	r3, [sp, #4]
 80123fa:	9400      	str	r4, [sp, #0]
 80123fc:	462b      	mov	r3, r5
 80123fe:	4630      	mov	r0, r6
 8012400:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012404:	3501      	adds	r5, #1
 8012406:	f000 fbad 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 801240a:	2d45      	cmp	r5, #69	; 0x45
 801240c:	d1e9      	bne.n	80123e2 <DisplayUdf::ShowDestinationIp(ArtNetNode*)+0x16>
 801240e:	b005      	add	sp, #20
 8012410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012414:	08017abb 	stmdaeq	r1, {r0, r1, r3, r4, r5, r7, r9, fp, ip, sp, lr}

08012418 <DisplayUdf::Show(ArtNetNode*)>:
 8012418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801241a:	4604      	mov	r4, r0
 801241c:	460d      	mov	r5, r1
 801241e:	f7ff fcf9 	bl	8011e14 <DisplayUdf::Show()>
 8012422:	4629      	mov	r1, r5
 8012424:	4620      	mov	r0, r4
 8012426:	f7ff ff38 	bl	801229a <DisplayUdf::ShowNodeName(ArtNetNode*)>
 801242a:	4629      	mov	r1, r5
 801242c:	4620      	mov	r0, r4
 801242e:	f7ff ff47 	bl	80122c0 <DisplayUdf::ShowUniverse(ArtNetNode*)>
 8012432:	4629      	mov	r1, r5
 8012434:	4620      	mov	r0, r4
 8012436:	f7ff ffc9 	bl	80123cc <DisplayUdf::ShowDestinationIp(ArtNetNode*)>
 801243a:	f895 26de 	ldrb.w	r2, [r5, #1758]	; 0x6de
 801243e:	f895 36df 	ldrb.w	r3, [r5, #1759]	; 0x6df
 8012442:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012446:	4413      	add	r3, r2
 8012448:	4620      	mov	r0, r4
 801244a:	4a0e      	ldr	r2, [pc, #56]	; (8012484 <DisplayUdf::Show(ArtNetNode*)+0x6c>)
 801244c:	f000 fb8a 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 8012450:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8012452:	f894 1053 	ldrb.w	r1, [r4, #83]	; 0x53
 8012456:	2a02      	cmp	r2, #2
 8012458:	d001      	beq.n	801245e <DisplayUdf::Show(ArtNetNode*)+0x46>
 801245a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801245c:	b933      	cbnz	r3, 801246c <DisplayUdf::Show(ArtNetNode*)+0x54>
 801245e:	4620      	mov	r0, r4
 8012460:	4a09      	ldr	r2, [pc, #36]	; (8012488 <DisplayUdf::Show(ArtNetNode*)+0x70>)
 8012462:	b003      	add	sp, #12
 8012464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012468:	f000 bb7c 	b.w	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 801246c:	9300      	str	r3, [sp, #0]
 801246e:	4807      	ldr	r0, [pc, #28]	; (801248c <DisplayUdf::Show(ArtNetNode*)+0x74>)
 8012470:	4b07      	ldr	r3, [pc, #28]	; (8012490 <DisplayUdf::Show(ArtNetNode*)+0x78>)
 8012472:	2a00      	cmp	r2, #0
 8012474:	bf08      	it	eq
 8012476:	4603      	moveq	r3, r0
 8012478:	4620      	mov	r0, r4
 801247a:	4a06      	ldr	r2, [pc, #24]	; (8012494 <DisplayUdf::Show(ArtNetNode*)+0x7c>)
 801247c:	f000 fb72 	bl	8012b64 <Display::Printf(unsigned char, char const*, ...)>
 8012480:	b003      	add	sp, #12
 8012482:	bd30      	pop	{r4, r5, pc}
 8012484:	08017acb 	stmdaeq	r1, {r0, r1, r3, r6, r7, r9, fp, ip, sp, lr}
 8012488:	08017ad2 	stmdaeq	r1, {r1, r4, r6, r7, r9, fp, ip, sp, lr}
 801248c:	080160ea 	stmdaeq	r1, {r1, r3, r5, r6, r7, sp, lr}
 8012490:	080160df 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, sp, lr}
 8012494:	08017ad9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r9, fp, ip, sp, lr}

08012498 <NetworkDisplay::ShowEmacStart()>:
 8012498:	4b01      	ldr	r3, [pc, #4]	; (80124a0 <NetworkDisplay::ShowEmacStart()+0x8>)
 801249a:	6818      	ldr	r0, [r3, #0]
 801249c:	f7ff bc22 	b.w	8011ce4 <DisplayUdf::ShowEmacStart()>
 80124a0:	2000a868 	andcs	sl, r0, r8, ror #16

080124a4 <NetworkDisplay::ShowIp()>:
 80124a4:	4b01      	ldr	r3, [pc, #4]	; (80124ac <NetworkDisplay::ShowIp()+0x8>)
 80124a6:	6818      	ldr	r0, [r3, #0]
 80124a8:	f7ff bc2e 	b.w	8011d08 <DisplayUdf::ShowIpAddress()>
 80124ac:	2000a868 	andcs	sl, r0, r8, ror #16

080124b0 <NetworkDisplay::ShowNetMask()>:
 80124b0:	4b01      	ldr	r3, [pc, #4]	; (80124b8 <NetworkDisplay::ShowNetMask()+0x8>)
 80124b2:	6818      	ldr	r0, [r3, #0]
 80124b4:	f7ff bc5c 	b.w	8011d70 <DisplayUdf::ShowNetmask()>
 80124b8:	2000a868 	andcs	sl, r0, r8, ror #16

080124bc <NetworkDisplay::ShowGatewayIp()>:
 80124bc:	4b01      	ldr	r3, [pc, #4]	; (80124c4 <NetworkDisplay::ShowGatewayIp()+0x8>)
 80124be:	6818      	ldr	r0, [r3, #0]
 80124c0:	f7ff bc74 	b.w	8011dac <DisplayUdf::ShowGatewayIp()>
 80124c4:	2000a868 	andcs	sl, r0, r8, ror #16

080124c8 <NetworkDisplay::ShowShutdown()>:
 80124c8:	4b01      	ldr	r3, [pc, #4]	; (80124d0 <NetworkDisplay::ShowShutdown()+0x8>)
 80124ca:	6818      	ldr	r0, [r3, #0]
 80124cc:	f7ff bd22 	b.w	8011f14 <DisplayUdf::ShowShutdown()>
 80124d0:	2000a868 	andcs	sl, r0, r8, ror #16

080124d4 <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)>:
 80124d4:	4b01      	ldr	r3, [pc, #4]	; (80124dc <NetworkDisplay::ShowDhcpStatus(network::dhcp::ClientStatus)+0x8>)
 80124d6:	6818      	ldr	r0, [r3, #0]
 80124d8:	f7ff bce0 	b.w	8011e9c <DisplayUdf::ShowDhcpStatus(network::dhcp::ClientStatus)>
 80124dc:	2000a868 	andcs	sl, r0, r8, ror #16

080124e0 <properties::convert_json_file(char*, unsigned short, bool)>:
 80124e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124e4:	7803      	ldrb	r3, [r0, #0]
 80124e6:	2b7b      	cmp	r3, #123	; 0x7b
 80124e8:	d170      	bne.n	80125cc <properties::convert_json_file(char*, unsigned short, bool)+0xec>
 80124ea:	b322      	cbz	r2, 8012536 <properties::convert_json_file(char*, unsigned short, bool)+0x56>
 80124ec:	2301      	movs	r3, #1
 80124ee:	4606      	mov	r6, r0
 80124f0:	461c      	mov	r4, r3
 80124f2:	2a00      	cmp	r2, #0
 80124f4:	bf0c      	ite	eq
 80124f6:	f04f 0c0a 	moveq.w	ip, #10
 80124fa:	f04f 0c00 	movne.w	ip, #0
 80124fe:	273d      	movs	r7, #61	; 0x3d
 8012500:	4299      	cmp	r1, r3
 8012502:	d960      	bls.n	80125c6 <properties::convert_json_file(char*, unsigned short, bool)+0xe6>
 8012504:	4299      	cmp	r1, r3
 8012506:	4602      	mov	r2, r0
 8012508:	f890 e000 	ldrb.w	lr, [r0]
 801250c:	f103 0301 	add.w	r3, r3, #1
 8012510:	f100 0001 	add.w	r0, r0, #1
 8012514:	d846      	bhi.n	80125a4 <properties::convert_json_file(char*, unsigned short, bool)+0xc4>
 8012516:	1aa0      	subs	r0, r4, r2
 8012518:	4615      	mov	r5, r2
 801251a:	1884      	adds	r4, r0, r2
 801251c:	f812 8b01 	ldrb.w	r8, [r2], #1
 8012520:	f103 0e01 	add.w	lr, r3, #1
 8012524:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 8012528:	d053      	beq.n	80125d2 <properties::convert_json_file(char*, unsigned short, bool)+0xf2>
 801252a:	4299      	cmp	r1, r3
 801252c:	d957      	bls.n	80125de <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 801252e:	4673      	mov	r3, lr
 8012530:	f806 8b01 	strb.w	r8, [r6], #1
 8012534:	e7f0      	b.n	8012518 <properties::convert_json_file(char*, unsigned short, bool)+0x38>
 8012536:	2323      	movs	r3, #35	; 0x23
 8012538:	f800 3b01 	strb.w	r3, [r0], #1
 801253c:	4605      	mov	r5, r0
 801253e:	2301      	movs	r3, #1
 8012540:	4299      	cmp	r1, r3
 8012542:	d92d      	bls.n	80125a0 <properties::convert_json_file(char*, unsigned short, bool)+0xc0>
 8012544:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012548:	2c22      	cmp	r4, #34	; 0x22
 801254a:	d001      	beq.n	8012550 <properties::convert_json_file(char*, unsigned short, bool)+0x70>
 801254c:	3301      	adds	r3, #1
 801254e:	e7f7      	b.n	8012540 <properties::convert_json_file(char*, unsigned short, bool)+0x60>
 8012550:	46ac      	mov	ip, r5
 8012552:	4606      	mov	r6, r0
 8012554:	2701      	movs	r7, #1
 8012556:	f89c e000 	ldrb.w	lr, [ip]
 801255a:	4665      	mov	r5, ip
 801255c:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 8012560:	4630      	mov	r0, r6
 8012562:	463c      	mov	r4, r7
 8012564:	f10c 0c01 	add.w	ip, ip, #1
 8012568:	f106 0601 	add.w	r6, r6, #1
 801256c:	f107 0701 	add.w	r7, r7, #1
 8012570:	d007      	beq.n	8012582 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 8012572:	3301      	adds	r3, #1
 8012574:	4299      	cmp	r1, r3
 8012576:	4665      	mov	r5, ip
 8012578:	f806 ec01 	strb.w	lr, [r6, #-1]
 801257c:	d8eb      	bhi.n	8012556 <properties::convert_json_file(char*, unsigned short, bool)+0x76>
 801257e:	463c      	mov	r4, r7
 8012580:	4630      	mov	r0, r6
 8012582:	4606      	mov	r6, r0
 8012584:	200a      	movs	r0, #10
 8012586:	3401      	adds	r4, #1
 8012588:	f806 0b01 	strb.w	r0, [r6], #1
 801258c:	4628      	mov	r0, r5
 801258e:	f815 7b01 	ldrb.w	r7, [r5], #1
 8012592:	2f7b      	cmp	r7, #123	; 0x7b
 8012594:	d0ad      	beq.n	80124f2 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 8012596:	1c5f      	adds	r7, r3, #1
 8012598:	4299      	cmp	r1, r3
 801259a:	463b      	mov	r3, r7
 801259c:	d8f6      	bhi.n	801258c <properties::convert_json_file(char*, unsigned short, bool)+0xac>
 801259e:	e7a8      	b.n	80124f2 <properties::convert_json_file(char*, unsigned short, bool)+0x12>
 80125a0:	2401      	movs	r4, #1
 80125a2:	e7ee      	b.n	8012582 <properties::convert_json_file(char*, unsigned short, bool)+0xa2>
 80125a4:	f1be 0f22 	cmp.w	lr, #34	; 0x22
 80125a8:	d1ac      	bne.n	8012504 <properties::convert_json_file(char*, unsigned short, bool)+0x24>
 80125aa:	4602      	mov	r2, r0
 80125ac:	e7b3      	b.n	8012516 <properties::convert_json_file(char*, unsigned short, bool)+0x36>
 80125ae:	283a      	cmp	r0, #58	; 0x3a
 80125b0:	d115      	bne.n	80125de <properties::convert_json_file(char*, unsigned short, bool)+0xfe>
 80125b2:	462b      	mov	r3, r5
 80125b4:	e01b      	b.n	80125ee <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 80125b6:	4686      	mov	lr, r0
 80125b8:	e027      	b.n	801260a <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
 80125ba:	4673      	mov	r3, lr
 80125bc:	f806 cb01 	strb.w	ip, [r6], #1
 80125c0:	3401      	adds	r4, #1
 80125c2:	3301      	adds	r3, #1
 80125c4:	e79c      	b.n	8012500 <properties::convert_json_file(char*, unsigned short, bool)+0x20>
 80125c6:	4620      	mov	r0, r4
 80125c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125d0:	e7fa      	b.n	80125c8 <properties::convert_json_file(char*, unsigned short, bool)+0xe8>
 80125d2:	4630      	mov	r0, r6
 80125d4:	f800 7b01 	strb.w	r7, [r0], #1
 80125d8:	469e      	mov	lr, r3
 80125da:	4606      	mov	r6, r0
 80125dc:	3401      	adds	r4, #1
 80125de:	4571      	cmp	r1, lr
 80125e0:	462b      	mov	r3, r5
 80125e2:	7828      	ldrb	r0, [r5, #0]
 80125e4:	f10e 0e01 	add.w	lr, lr, #1
 80125e8:	f105 0501 	add.w	r5, r5, #1
 80125ec:	d8df      	bhi.n	80125ae <properties::convert_json_file(char*, unsigned short, bool)+0xce>
 80125ee:	781d      	ldrb	r5, [r3, #0]
 80125f0:	461a      	mov	r2, r3
 80125f2:	2d2f      	cmp	r5, #47	; 0x2f
 80125f4:	4670      	mov	r0, lr
 80125f6:	f103 0301 	add.w	r3, r3, #1
 80125fa:	f10e 0e01 	add.w	lr, lr, #1
 80125fe:	d8da      	bhi.n	80125b6 <properties::convert_json_file(char*, unsigned short, bool)+0xd6>
 8012600:	4281      	cmp	r1, r0
 8012602:	d8f4      	bhi.n	80125ee <properties::convert_json_file(char*, unsigned short, bool)+0x10e>
 8012604:	2d22      	cmp	r5, #34	; 0x22
 8012606:	bf08      	it	eq
 8012608:	461a      	moveq	r2, r3
 801260a:	4610      	mov	r0, r2
 801260c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8012610:	f10e 0301 	add.w	r3, lr, #1
 8012614:	2d22      	cmp	r5, #34	; 0x22
 8012616:	d0d0      	beq.n	80125ba <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 8012618:	2d2c      	cmp	r5, #44	; 0x2c
 801261a:	d0ce      	beq.n	80125ba <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 801261c:	2d7d      	cmp	r5, #125	; 0x7d
 801261e:	d0cc      	beq.n	80125ba <properties::convert_json_file(char*, unsigned short, bool)+0xda>
 8012620:	4571      	cmp	r1, lr
 8012622:	d9ce      	bls.n	80125c2 <properties::convert_json_file(char*, unsigned short, bool)+0xe2>
 8012624:	f1a5 0e20 	sub.w	lr, r5, #32
 8012628:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 801262c:	d803      	bhi.n	8012636 <properties::convert_json_file(char*, unsigned short, bool)+0x156>
 801262e:	4602      	mov	r2, r0
 8012630:	f806 5b01 	strb.w	r5, [r6], #1
 8012634:	3401      	adds	r4, #1
 8012636:	469e      	mov	lr, r3
 8012638:	e7e7      	b.n	801260a <properties::convert_json_file(char*, unsigned short, bool)+0x12a>
	...

0801263c <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)>:
 801263c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012640:	6002      	str	r2, [r0, #0]
 8012642:	4614      	mov	r4, r2
 8012644:	2200      	movs	r2, #0
 8012646:	4606      	mov	r6, r0
 8012648:	460f      	mov	r7, r1
 801264a:	80c2      	strh	r2, [r0, #6]
 801264c:	4a1b      	ldr	r2, [pc, #108]	; (80126bc <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x80>)
 801264e:	8083      	strh	r3, [r0, #4]
 8012650:	7810      	ldrb	r0, [r2, #0]
 8012652:	f000 0001 	and.w	r0, r0, #1
 8012656:	7230      	strb	r0, [r6, #8]
 8012658:	463d      	mov	r5, r7
 801265a:	782a      	ldrb	r2, [r5, #0]
 801265c:	3701      	adds	r7, #1
 801265e:	2a00      	cmp	r2, #0
 8012660:	d1fa      	bne.n	8012658 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x1c>
 8012662:	1a6d      	subs	r5, r5, r1
 8012664:	b29b      	uxth	r3, r3
 8012666:	b1d0      	cbz	r0, 801269e <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x62>
 8012668:	1d2f      	adds	r7, r5, #4
 801266a:	429f      	cmp	r7, r3
 801266c:	d814      	bhi.n	8012698 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 801266e:	f04f 087b 	mov.w	r8, #123	; 0x7b
 8012672:	f04f 0922 	mov.w	r9, #34	; 0x22
 8012676:	462a      	mov	r2, r5
 8012678:	f884 8000 	strb.w	r8, [r4]
 801267c:	f884 9001 	strb.w	r9, [r4, #1]
 8012680:	1ca0      	adds	r0, r4, #2
 8012682:	f000 ffc8 	bl	8013616 <memmove>
 8012686:	223a      	movs	r2, #58	; 0x3a
 8012688:	1963      	adds	r3, r4, r5
 801268a:	3505      	adds	r5, #5
 801268c:	f883 9002 	strb.w	r9, [r3, #2]
 8012690:	70da      	strb	r2, [r3, #3]
 8012692:	80f5      	strh	r5, [r6, #6]
 8012694:	f804 8007 	strb.w	r8, [r4, r7]
 8012698:	4630      	mov	r0, r6
 801269a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801269e:	1caf      	adds	r7, r5, #2
 80126a0:	429f      	cmp	r7, r3
 80126a2:	d8f9      	bhi.n	8012698 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80126a4:	4620      	mov	r0, r4
 80126a6:	2323      	movs	r3, #35	; 0x23
 80126a8:	462a      	mov	r2, r5
 80126aa:	f800 3b01 	strb.w	r3, [r0], #1
 80126ae:	f000 ffb2 	bl	8013616 <memmove>
 80126b2:	230a      	movs	r3, #10
 80126b4:	442c      	add	r4, r5
 80126b6:	7063      	strb	r3, [r4, #1]
 80126b8:	80f7      	strh	r7, [r6, #6]
 80126ba:	e7ed      	b.n	8012698 <PropertiesBuilder::PropertiesBuilder(char const*, char*, unsigned int)+0x5c>
 80126bc:	2000a86c 	andcs	sl, r0, ip, ror #16

080126c0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)>:
 80126c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126c2:	469c      	mov	ip, r3
 80126c4:	8885      	ldrh	r5, [r0, #4]
 80126c6:	88c3      	ldrh	r3, [r0, #6]
 80126c8:	b085      	sub	sp, #20
 80126ca:	42ab      	cmp	r3, r5
 80126cc:	d302      	bcc.n	80126d4 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x14>
 80126ce:	2000      	movs	r0, #0
 80126d0:	b005      	add	sp, #20
 80126d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126d4:	4604      	mov	r4, r0
 80126d6:	6800      	ldr	r0, [r0, #0]
 80126d8:	1aed      	subs	r5, r5, r3
 80126da:	4418      	add	r0, r3
 80126dc:	b2d6      	uxtb	r6, r2
 80126de:	f3c2 2707 	ubfx	r7, r2, #8, #8
 80126e2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80126e6:	f894 e008 	ldrb.w	lr, [r4, #8]
 80126ea:	0e12      	lsrs	r2, r2, #24
 80126ec:	f1bc 0f00 	cmp.w	ip, #0
 80126f0:	d109      	bne.n	8012706 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x46>
 80126f2:	f1be 0f00 	cmp.w	lr, #0
 80126f6:	d109      	bne.n	801270c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x4c>
 80126f8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80126fc:	e9cd 6700 	strd	r6, r7, [sp]
 8012700:	460b      	mov	r3, r1
 8012702:	4a0e      	ldr	r2, [pc, #56]	; (801273c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x7c>)
 8012704:	e008      	b.n	8012718 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 8012706:	f1be 0f00 	cmp.w	lr, #0
 801270a:	d00f      	beq.n	801272c <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x6c>
 801270c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012710:	460b      	mov	r3, r1
 8012712:	e9cd 6700 	strd	r6, r7, [sp]
 8012716:	4a0a      	ldr	r2, [pc, #40]	; (8012740 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x80>)
 8012718:	4629      	mov	r1, r5
 801271a:	f001 faeb 	bl	8013cf4 <snprintf>
 801271e:	4285      	cmp	r5, r0
 8012720:	dbd5      	blt.n	80126ce <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0xe>
 8012722:	88e3      	ldrh	r3, [r4, #6]
 8012724:	4403      	add	r3, r0
 8012726:	80e3      	strh	r3, [r4, #6]
 8012728:	2001      	movs	r0, #1
 801272a:	e7d1      	b.n	80126d0 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x10>
 801272c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012730:	e9cd 6700 	strd	r6, r7, [sp]
 8012734:	460b      	mov	r3, r1
 8012736:	4a03      	ldr	r2, [pc, #12]	; (8012744 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x84>)
 8012738:	e7ee      	b.n	8012718 <PropertiesBuilder::AddIpAddress(char const*, unsigned int, bool)+0x58>
 801273a:	bf00      	nop
 801273c:	08017b67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, r9, fp, ip, sp, lr}
 8012740:	08017b53 	stmdaeq	r1, {r0, r1, r4, r6, r8, r9, fp, ip, sp, lr}
 8012744:	08017b68 	stmdaeq	r1, {r3, r5, r6, r8, r9, fp, ip, sp, lr}

08012748 <PropertiesBuilder::AddComment(char const*)>:
 8012748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801274a:	7a06      	ldrb	r6, [r0, #8]
 801274c:	b996      	cbnz	r6, 8012774 <PropertiesBuilder::AddComment(char const*)+0x2c>
 801274e:	4604      	mov	r4, r0
 8012750:	88c0      	ldrh	r0, [r0, #6]
 8012752:	88a5      	ldrh	r5, [r4, #4]
 8012754:	42a8      	cmp	r0, r5
 8012756:	d20d      	bcs.n	8012774 <PropertiesBuilder::AddComment(char const*)+0x2c>
 8012758:	6827      	ldr	r7, [r4, #0]
 801275a:	1a2d      	subs	r5, r5, r0
 801275c:	460b      	mov	r3, r1
 801275e:	4a06      	ldr	r2, [pc, #24]	; (8012778 <PropertiesBuilder::AddComment(char const*)+0x30>)
 8012760:	4629      	mov	r1, r5
 8012762:	4438      	add	r0, r7
 8012764:	f001 fac6 	bl	8013cf4 <snprintf>
 8012768:	4285      	cmp	r5, r0
 801276a:	bfa1      	itttt	ge
 801276c:	2601      	movge	r6, #1
 801276e:	88e3      	ldrhge	r3, [r4, #6]
 8012770:	18c0      	addge	r0, r0, r3
 8012772:	80e0      	strhge	r0, [r4, #6]
 8012774:	4630      	mov	r0, r6
 8012776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012778:	08017b78 	stmdaeq	r1, {r3, r4, r5, r6, r8, r9, fp, ip, sp, lr}

0801277c <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)>:
 801277c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801277e:	88c5      	ldrh	r5, [r0, #6]
 8012780:	8887      	ldrh	r7, [r0, #4]
 8012782:	9e08      	ldr	r6, [sp, #32]
 8012784:	42bd      	cmp	r5, r7
 8012786:	d302      	bcc.n	801278e <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x12>
 8012788:	2000      	movs	r0, #0
 801278a:	b003      	add	sp, #12
 801278c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801278e:	4604      	mov	r4, r0
 8012790:	6800      	ldr	r0, [r0, #0]
 8012792:	4428      	add	r0, r5
 8012794:	1b7d      	subs	r5, r7, r5
 8012796:	7a27      	ldrb	r7, [r4, #8]
 8012798:	b92b      	cbnz	r3, 80127a6 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2a>
 801279a:	b92f      	cbnz	r7, 80127a8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x2c>
 801279c:	e9cd 6200 	strd	r6, r2, [sp]
 80127a0:	460b      	mov	r3, r1
 80127a2:	4a0b      	ldr	r2, [pc, #44]	; (80127d0 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x54>)
 80127a4:	e004      	b.n	80127b0 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 80127a6:	b16f      	cbz	r7, 80127c4 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x48>
 80127a8:	460b      	mov	r3, r1
 80127aa:	e9cd 6200 	strd	r6, r2, [sp]
 80127ae:	4a09      	ldr	r2, [pc, #36]	; (80127d4 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x58>)
 80127b0:	4629      	mov	r1, r5
 80127b2:	f001 fa9f 	bl	8013cf4 <snprintf>
 80127b6:	4285      	cmp	r5, r0
 80127b8:	dbe6      	blt.n	8012788 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xc>
 80127ba:	88e3      	ldrh	r3, [r4, #6]
 80127bc:	4403      	add	r3, r0
 80127be:	80e3      	strh	r3, [r4, #6]
 80127c0:	2001      	movs	r0, #1
 80127c2:	e7e2      	b.n	801278a <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0xe>
 80127c4:	e9cd 6200 	strd	r6, r2, [sp]
 80127c8:	460b      	mov	r3, r1
 80127ca:	4a03      	ldr	r2, [pc, #12]	; (80127d8 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x5c>)
 80127cc:	e7f0      	b.n	80127b0 <PropertiesBuilder::AddHex(char const*, unsigned int, bool, unsigned int)+0x34>
 80127ce:	bf00      	nop
 80127d0:	08017b8d 	stmdaeq	r1, {r0, r2, r3, r7, r8, r9, fp, ip, sp, lr}
 80127d4:	08017b80 	stmdaeq	r1, {r7, r8, r9, fp, ip, sp, lr}
 80127d8:	08017b8e 	stmdaeq	r1, {r1, r2, r3, r7, r8, r9, fp, ip, sp, lr}

080127dc <ReadConfigFile::ReadConfigFile(void (*)(void*, char const*), void*)>:
 80127dc:	e9c0 1200 	strd	r1, r2, [r0]
 80127e0:	4770      	bx	lr

080127e2 <ReadConfigFile::~ReadConfigFile()>:
 80127e2:	4770      	bx	lr

080127e4 <ReadConfigFile::Read(char const*, unsigned int)>:
 80127e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127e8:	4606      	mov	r6, r0
 80127ea:	460d      	mov	r5, r1
 80127ec:	4614      	mov	r4, r2
 80127ee:	f04f 0800 	mov.w	r8, #0
 80127f2:	b090      	sub	sp, #64	; 0x40
 80127f4:	b33c      	cbz	r4, 8012846 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 80127f6:	466b      	mov	r3, sp
 80127f8:	462a      	mov	r2, r5
 80127fa:	4619      	mov	r1, r3
 80127fc:	7817      	ldrb	r7, [r2, #0]
 80127fe:	4610      	mov	r0, r2
 8012800:	2f0d      	cmp	r7, #13
 8012802:	f102 0201 	add.w	r2, r2, #1
 8012806:	d013      	beq.n	8012830 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 8012808:	2f0a      	cmp	r7, #10
 801280a:	d011      	beq.n	8012830 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 801280c:	f803 7b01 	strb.w	r7, [r3], #1
 8012810:	1a58      	subs	r0, r3, r1
 8012812:	283f      	cmp	r0, #63	; 0x3f
 8012814:	4615      	mov	r5, r2
 8012816:	dc16      	bgt.n	8012846 <ReadConfigFile::Read(char const*, unsigned int)+0x62>
 8012818:	3c01      	subs	r4, #1
 801281a:	d1ef      	bne.n	80127fc <ReadConfigFile::Read(char const*, unsigned int)+0x18>
 801281c:	f89d 2000 	ldrb.w	r2, [sp]
 8012820:	2a60      	cmp	r2, #96	; 0x60
 8012822:	d9e7      	bls.n	80127f4 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8012824:	f883 8000 	strb.w	r8, [r3]
 8012828:	e9d6 3000 	ldrd	r3, r0, [r6]
 801282c:	4798      	blx	r3
 801282e:	e7e1      	b.n	80127f4 <ReadConfigFile::Read(char const*, unsigned int)+0x10>
 8012830:	4605      	mov	r5, r0
 8012832:	2c00      	cmp	r4, #0
 8012834:	d0f2      	beq.n	801281c <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 8012836:	f810 2b01 	ldrb.w	r2, [r0], #1
 801283a:	2a0d      	cmp	r2, #13
 801283c:	d001      	beq.n	8012842 <ReadConfigFile::Read(char const*, unsigned int)+0x5e>
 801283e:	2a0a      	cmp	r2, #10
 8012840:	d1ec      	bne.n	801281c <ReadConfigFile::Read(char const*, unsigned int)+0x38>
 8012842:	3c01      	subs	r4, #1
 8012844:	e7f4      	b.n	8012830 <ReadConfigFile::Read(char const*, unsigned int)+0x4c>
 8012846:	b010      	add	sp, #64	; 0x40
 8012848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801284c <Sscan::Char(char const*, char const*, char*, unsigned int&)>:
 801284c:	b570      	push	{r4, r5, r6, lr}
 801284e:	4615      	mov	r5, r2
 8012850:	461c      	mov	r4, r3
 8012852:	f000 f946 	bl	8012ae2 <Sscan::checkName(char const*, char const*)>
 8012856:	b160      	cbz	r0, 8012872 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x26>
 8012858:	2100      	movs	r1, #0
 801285a:	5c43      	ldrb	r3, [r0, r1]
 801285c:	6826      	ldr	r6, [r4, #0]
 801285e:	b28a      	uxth	r2, r1
 8012860:	b123      	cbz	r3, 801286c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 8012862:	42b2      	cmp	r2, r6
 8012864:	d207      	bcs.n	8012876 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x2a>
 8012866:	546b      	strb	r3, [r5, r1]
 8012868:	3101      	adds	r1, #1
 801286a:	e7f6      	b.n	801285a <Sscan::Char(char const*, char const*, char*, unsigned int&)+0xe>
 801286c:	2000      	movs	r0, #0
 801286e:	6022      	str	r2, [r4, #0]
 8012870:	bd70      	pop	{r4, r5, r6, pc}
 8012872:	2001      	movs	r0, #1
 8012874:	e7fc      	b.n	8012870 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>
 8012876:	2b0a      	cmp	r3, #10
 8012878:	d0f8      	beq.n	801286c <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x20>
 801287a:	2002      	movs	r0, #2
 801287c:	e7f8      	b.n	8012870 <Sscan::Char(char const*, char const*, char*, unsigned int&)+0x24>

0801287e <Sscan::Float(char const*, char const*, float&)>:
 801287e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012882:	4616      	mov	r6, r2
 8012884:	f000 f92d 	bl	8012ae2 <Sscan::checkName(char const*, char const*)>
 8012888:	2800      	cmp	r0, #0
 801288a:	d059      	beq.n	8012940 <Sscan::Float(char const*, char const*, float&)+0xc2>
 801288c:	4604      	mov	r4, r0
 801288e:	7803      	ldrb	r3, [r0, #0]
 8012890:	2b2d      	cmp	r3, #45	; 0x2d
 8012892:	bf08      	it	eq
 8012894:	3401      	addeq	r4, #1
 8012896:	7823      	ldrb	r3, [r4, #0]
 8012898:	bf0c      	ite	eq
 801289a:	f04f 0801 	moveq.w	r8, #1
 801289e:	f04f 0800 	movne.w	r8, #0
 80128a2:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80128a6:	d103      	bne.n	80128b0 <Sscan::Float(char const*, char const*, float&)+0x32>
 80128a8:	2702      	movs	r7, #2
 80128aa:	4638      	mov	r0, r7
 80128ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128b0:	2000      	movs	r0, #0
 80128b2:	220a      	movs	r2, #10
 80128b4:	7823      	ldrb	r3, [r4, #0]
 80128b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80128ba:	2909      	cmp	r1, #9
 80128bc:	d8f4      	bhi.n	80128a8 <Sscan::Float(char const*, char const*, float&)+0x2a>
 80128be:	fb02 3000 	mla	r0, r2, r0, r3
 80128c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80128c6:	3830      	subs	r0, #48	; 0x30
 80128c8:	2b2e      	cmp	r3, #46	; 0x2e
 80128ca:	d002      	beq.n	80128d2 <Sscan::Float(char const*, char const*, float&)+0x54>
 80128cc:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80128d0:	d1f0      	bne.n	80128b4 <Sscan::Float(char const*, char const*, float&)+0x36>
 80128d2:	f7f4 feff 	bl	80076d4 <__aeabi_ui2f>
 80128d6:	6030      	str	r0, [r6, #0]
 80128d8:	7823      	ldrb	r3, [r4, #0]
 80128da:	4605      	mov	r5, r0
 80128dc:	2b2e      	cmp	r3, #46	; 0x2e
 80128de:	d008      	beq.n	80128f2 <Sscan::Float(char const*, char const*, float&)+0x74>
 80128e0:	f1b8 0f00 	cmp.w	r8, #0
 80128e4:	d101      	bne.n	80128ea <Sscan::Float(char const*, char const*, float&)+0x6c>
 80128e6:	2700      	movs	r7, #0
 80128e8:	e7df      	b.n	80128aa <Sscan::Float(char const*, char const*, float&)+0x2c>
 80128ea:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 80128ee:	6035      	str	r5, [r6, #0]
 80128f0:	e7f9      	b.n	80128e6 <Sscan::Float(char const*, char const*, float&)+0x68>
 80128f2:	f04f 0901 	mov.w	r9, #1
 80128f6:	2000      	movs	r0, #0
 80128f8:	220a      	movs	r2, #10
 80128fa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80128fe:	f013 07df 	ands.w	r7, r3, #223	; 0xdf
 8012902:	d007      	beq.n	8012914 <Sscan::Float(char const*, char const*, float&)+0x96>
 8012904:	3b30      	subs	r3, #48	; 0x30
 8012906:	2b09      	cmp	r3, #9
 8012908:	d8ce      	bhi.n	80128a8 <Sscan::Float(char const*, char const*, float&)+0x2a>
 801290a:	fb02 3000 	mla	r0, r2, r0, r3
 801290e:	fb02 f909 	mul.w	r9, r2, r9
 8012912:	e7f2      	b.n	80128fa <Sscan::Float(char const*, char const*, float&)+0x7c>
 8012914:	f7f4 fede 	bl	80076d4 <__aeabi_ui2f>
 8012918:	4604      	mov	r4, r0
 801291a:	4648      	mov	r0, r9
 801291c:	f7f4 feda 	bl	80076d4 <__aeabi_ui2f>
 8012920:	4601      	mov	r1, r0
 8012922:	4620      	mov	r0, r4
 8012924:	f7f4 ffe2 	bl	80078ec <__aeabi_fdiv>
 8012928:	4629      	mov	r1, r5
 801292a:	f7f4 fe23 	bl	8007574 <__addsf3>
 801292e:	f1b8 0f00 	cmp.w	r8, #0
 8012932:	d101      	bne.n	8012938 <Sscan::Float(char const*, char const*, float&)+0xba>
 8012934:	6030      	str	r0, [r6, #0]
 8012936:	e7d6      	b.n	80128e6 <Sscan::Float(char const*, char const*, float&)+0x68>
 8012938:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801293c:	6030      	str	r0, [r6, #0]
 801293e:	e7b4      	b.n	80128aa <Sscan::Float(char const*, char const*, float&)+0x2c>
 8012940:	2701      	movs	r7, #1
 8012942:	e7b2      	b.n	80128aa <Sscan::Float(char const*, char const*, float&)+0x2c>

08012944 <Sscan::HexUint16(char const*, char const*, unsigned short&)>:
 8012944:	b538      	push	{r3, r4, r5, lr}
 8012946:	4614      	mov	r4, r2
 8012948:	f000 f8cb 	bl	8012ae2 <Sscan::checkName(char const*, char const*)>
 801294c:	b908      	cbnz	r0, 8012952 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xe>
 801294e:	2001      	movs	r0, #1
 8012950:	bd38      	pop	{r3, r4, r5, pc}
 8012952:	2100      	movs	r1, #0
 8012954:	4602      	mov	r2, r0
 8012956:	8021      	strh	r1, [r4, #0]
 8012958:	5c50      	ldrb	r0, [r2, r1]
 801295a:	b1b0      	cbz	r0, 801298a <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x46>
 801295c:	2904      	cmp	r1, #4
 801295e:	d018      	beq.n	8012992 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x4e>
 8012960:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012964:	2b09      	cmp	r3, #9
 8012966:	d904      	bls.n	8012972 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x2e>
 8012968:	f040 0520 	orr.w	r5, r0, #32
 801296c:	3d61      	subs	r5, #97	; 0x61
 801296e:	2d05      	cmp	r5, #5
 8012970:	d8ed      	bhi.n	801294e <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xa>
 8012972:	2839      	cmp	r0, #57	; 0x39
 8012974:	bf84      	itt	hi
 8012976:	f040 0320 	orrhi.w	r3, r0, #32
 801297a:	3b57      	subhi	r3, #87	; 0x57
 801297c:	8820      	ldrh	r0, [r4, #0]
 801297e:	b2db      	uxtb	r3, r3
 8012980:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8012984:	8023      	strh	r3, [r4, #0]
 8012986:	3101      	adds	r1, #1
 8012988:	e7e6      	b.n	8012958 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0x14>
 801298a:	2904      	cmp	r1, #4
 801298c:	bf18      	it	ne
 801298e:	2002      	movne	r0, #2
 8012990:	e7de      	b.n	8012950 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>
 8012992:	3820      	subs	r0, #32
 8012994:	bf18      	it	ne
 8012996:	2001      	movne	r0, #1
 8012998:	e7da      	b.n	8012950 <Sscan::HexUint16(char const*, char const*, unsigned short&)+0xc>

0801299a <Sscan::IpAddress(char const*, char const*, unsigned int&)>:
 801299a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801299c:	4615      	mov	r5, r2
 801299e:	f000 f8a0 	bl	8012ae2 <Sscan::checkName(char const*, char const*)>
 80129a2:	b3c0      	cbz	r0, 8012a16 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x7c>
 80129a4:	2400      	movs	r4, #0
 80129a6:	270a      	movs	r7, #10
 80129a8:	ae01      	add	r6, sp, #4
 80129aa:	4603      	mov	r3, r0
 80129ac:	2100      	movs	r1, #0
 80129ae:	f100 0c04 	add.w	ip, r0, #4
 80129b2:	4618      	mov	r0, r3
 80129b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129b8:	2a2e      	cmp	r2, #46	; 0x2e
 80129ba:	d00e      	beq.n	80129da <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 80129bc:	b16a      	cbz	r2, 80129da <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x40>
 80129be:	4560      	cmp	r0, ip
 80129c0:	d102      	bne.n	80129c8 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2e>
 80129c2:	2002      	movs	r0, #2
 80129c4:	b003      	add	sp, #12
 80129c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80129cc:	2b09      	cmp	r3, #9
 80129ce:	d8f8      	bhi.n	80129c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80129d0:	fb07 2101 	mla	r1, r7, r1, r2
 80129d4:	4603      	mov	r3, r0
 80129d6:	3930      	subs	r1, #48	; 0x30
 80129d8:	e7eb      	b.n	80129b2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x18>
 80129da:	29ff      	cmp	r1, #255	; 0xff
 80129dc:	d8f1      	bhi.n	80129c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80129de:	3401      	adds	r4, #1
 80129e0:	2c03      	cmp	r4, #3
 80129e2:	f806 1b01 	strb.w	r1, [r6], #1
 80129e6:	d1e0      	bne.n	80129aa <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x10>
 80129e8:	2400      	movs	r4, #0
 80129ea:	220a      	movs	r2, #10
 80129ec:	1d1e      	adds	r6, r3, #4
 80129ee:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80129f2:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 80129f6:	d007      	beq.n	8012a08 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x6e>
 80129f8:	429e      	cmp	r6, r3
 80129fa:	d0e2      	beq.n	80129c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 80129fc:	3930      	subs	r1, #48	; 0x30
 80129fe:	2909      	cmp	r1, #9
 8012a00:	d8df      	bhi.n	80129c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8012a02:	fb02 1404 	mla	r4, r2, r4, r1
 8012a06:	e7f2      	b.n	80129ee <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x54>
 8012a08:	2cff      	cmp	r4, #255	; 0xff
 8012a0a:	d8da      	bhi.n	80129c2 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x28>
 8012a0c:	f88d 4007 	strb.w	r4, [sp, #7]
 8012a10:	9b01      	ldr	r3, [sp, #4]
 8012a12:	602b      	str	r3, [r5, #0]
 8012a14:	e7d6      	b.n	80129c4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>
 8012a16:	2001      	movs	r0, #1
 8012a18:	e7d4      	b.n	80129c4 <Sscan::IpAddress(char const*, char const*, unsigned int&)+0x2a>

08012a1a <Sscan::Uint16(char const*, char const*, unsigned short&)>:
 8012a1a:	b538      	push	{r3, r4, r5, lr}
 8012a1c:	4615      	mov	r5, r2
 8012a1e:	f000 f860 	bl	8012ae2 <Sscan::checkName(char const*, char const*)>
 8012a22:	b1a0      	cbz	r0, 8012a4e <Sscan::Uint16(char const*, char const*, unsigned short&)+0x34>
 8012a24:	4604      	mov	r4, r0
 8012a26:	2100      	movs	r1, #0
 8012a28:	220a      	movs	r2, #10
 8012a2a:	7823      	ldrb	r3, [r4, #0]
 8012a2c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8012a30:	2809      	cmp	r0, #9
 8012a32:	d80e      	bhi.n	8012a52 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8012a34:	fb02 3101 	mla	r1, r2, r1, r3
 8012a38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012a3c:	3930      	subs	r1, #48	; 0x30
 8012a3e:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8012a42:	d1f2      	bne.n	8012a2a <Sscan::Uint16(char const*, char const*, unsigned short&)+0x10>
 8012a44:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8012a48:	d203      	bcs.n	8012a52 <Sscan::Uint16(char const*, char const*, unsigned short&)+0x38>
 8012a4a:	8029      	strh	r1, [r5, #0]
 8012a4c:	bd38      	pop	{r3, r4, r5, pc}
 8012a4e:	2001      	movs	r0, #1
 8012a50:	e7fc      	b.n	8012a4c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>
 8012a52:	2002      	movs	r0, #2
 8012a54:	e7fa      	b.n	8012a4c <Sscan::Uint16(char const*, char const*, unsigned short&)+0x32>

08012a56 <Sscan::Uint32(char const*, char const*, unsigned int&)>:
 8012a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a58:	4615      	mov	r5, r2
 8012a5a:	f000 f842 	bl	8012ae2 <Sscan::checkName(char const*, char const*)>
 8012a5e:	b1f8      	cbz	r0, 8012aa0 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4a>
 8012a60:	2300      	movs	r3, #0
 8012a62:	4604      	mov	r4, r0
 8012a64:	461e      	mov	r6, r3
 8012a66:	270a      	movs	r7, #10
 8012a68:	7822      	ldrb	r2, [r4, #0]
 8012a6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012a6e:	2909      	cmp	r1, #9
 8012a70:	d818      	bhi.n	8012aa4 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8012a72:	fba3 3107 	umull	r3, r1, r3, r7
 8012a76:	fb07 1106 	mla	r1, r7, r6, r1
 8012a7a:	3b30      	subs	r3, #48	; 0x30
 8012a7c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8012a80:	18d3      	adds	r3, r2, r3
 8012a82:	f141 0600 	adc.w	r6, r1, #0
 8012a86:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8012a8a:	f011 00df 	ands.w	r0, r1, #223	; 0xdf
 8012a8e:	d1eb      	bne.n	8012a68 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x12>
 8012a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a94:	429a      	cmp	r2, r3
 8012a96:	eb70 0206 	sbcs.w	r2, r0, r6
 8012a9a:	d303      	bcc.n	8012aa4 <Sscan::Uint32(char const*, char const*, unsigned int&)+0x4e>
 8012a9c:	602b      	str	r3, [r5, #0]
 8012a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aa0:	2001      	movs	r0, #1
 8012aa2:	e7fc      	b.n	8012a9e <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>
 8012aa4:	2002      	movs	r0, #2
 8012aa6:	e7fa      	b.n	8012a9e <Sscan::Uint32(char const*, char const*, unsigned int&)+0x48>

08012aa8 <Sscan::Uint8(char const*, char const*, unsigned char&)>:
 8012aa8:	b538      	push	{r3, r4, r5, lr}
 8012aaa:	4615      	mov	r5, r2
 8012aac:	f000 f819 	bl	8012ae2 <Sscan::checkName(char const*, char const*)>
 8012ab0:	b198      	cbz	r0, 8012ada <Sscan::Uint8(char const*, char const*, unsigned char&)+0x32>
 8012ab2:	4604      	mov	r4, r0
 8012ab4:	2100      	movs	r1, #0
 8012ab6:	220a      	movs	r2, #10
 8012ab8:	7823      	ldrb	r3, [r4, #0]
 8012aba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8012abe:	2809      	cmp	r0, #9
 8012ac0:	d80d      	bhi.n	8012ade <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8012ac2:	fb02 3101 	mla	r1, r2, r1, r3
 8012ac6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012aca:	3930      	subs	r1, #48	; 0x30
 8012acc:	f013 00df 	ands.w	r0, r3, #223	; 0xdf
 8012ad0:	d1f2      	bne.n	8012ab8 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x10>
 8012ad2:	29ff      	cmp	r1, #255	; 0xff
 8012ad4:	d803      	bhi.n	8012ade <Sscan::Uint8(char const*, char const*, unsigned char&)+0x36>
 8012ad6:	7029      	strb	r1, [r5, #0]
 8012ad8:	bd38      	pop	{r3, r4, r5, pc}
 8012ada:	2001      	movs	r0, #1
 8012adc:	e7fc      	b.n	8012ad8 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>
 8012ade:	2002      	movs	r0, #2
 8012ae0:	e7fa      	b.n	8012ad8 <Sscan::Uint8(char const*, char const*, unsigned char&)+0x30>

08012ae2 <Sscan::checkName(char const*, char const*)>:
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	b510      	push	{r4, lr}
 8012ae6:	3901      	subs	r1, #1
 8012ae8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012aec:	461c      	mov	r4, r3
 8012aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012af2:	b120      	cbz	r0, 8012afe <Sscan::checkName(char const*, char const*)+0x1c>
 8012af4:	b10a      	cbz	r2, 8012afa <Sscan::checkName(char const*, char const*)+0x18>
 8012af6:	4290      	cmp	r0, r2
 8012af8:	d0f6      	beq.n	8012ae8 <Sscan::checkName(char const*, char const*)+0x6>
 8012afa:	2000      	movs	r0, #0
 8012afc:	e006      	b.n	8012b0c <Sscan::checkName(char const*, char const*)+0x2a>
 8012afe:	2a3d      	cmp	r2, #61	; 0x3d
 8012b00:	d104      	bne.n	8012b0c <Sscan::checkName(char const*, char const*)+0x2a>
 8012b02:	7860      	ldrb	r0, [r4, #1]
 8012b04:	f010 00df 	ands.w	r0, r0, #223	; 0xdf
 8012b08:	d000      	beq.n	8012b0c <Sscan::checkName(char const*, char const*)+0x2a>
 8012b0a:	1c60      	adds	r0, r4, #1
 8012b0c:	bd10      	pop	{r4, pc}

08012b0e <Display::Detect(DisplayType)>:
 8012b0e:	2902      	cmp	r1, #2
 8012b10:	b538      	push	{r3, r4, r5, lr}
 8012b12:	4604      	mov	r4, r0
 8012b14:	d014      	beq.n	8012b40 <Display::Detect(DisplayType)+0x32>
 8012b16:	2904      	cmp	r1, #4
 8012b18:	d01b      	beq.n	8012b52 <Display::Detect(DisplayType)+0x44>
 8012b1a:	6860      	ldr	r0, [r4, #4]
 8012b1c:	b168      	cbz	r0, 8012b3a <Display::Detect(DisplayType)+0x2c>
 8012b1e:	6803      	ldr	r3, [r0, #0]
 8012b20:	689b      	ldr	r3, [r3, #8]
 8012b22:	4798      	blx	r3
 8012b24:	4603      	mov	r3, r0
 8012b26:	6860      	ldr	r0, [r4, #4]
 8012b28:	b9ab      	cbnz	r3, 8012b56 <Display::Detect(DisplayType)+0x48>
 8012b2a:	b110      	cbz	r0, 8012b32 <Display::Detect(DisplayType)+0x24>
 8012b2c:	6803      	ldr	r3, [r0, #0]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	4798      	blx	r3
 8012b32:	2304      	movs	r3, #4
 8012b34:	2200      	movs	r2, #0
 8012b36:	e9c4 3200 	strd	r3, r2, [r4]
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	6123      	str	r3, [r4, #16]
 8012b3e:	e010      	b.n	8012b62 <Display::Detect(DisplayType)+0x54>
 8012b40:	2018      	movs	r0, #24
 8012b42:	f000 fca9 	bl	8013498 <operator new(unsigned int)>
 8012b46:	4605      	mov	r5, r0
 8012b48:	2100      	movs	r1, #0
 8012b4a:	f000 f97f 	bl	8012e4c <Ssd1306::Ssd1306(TOledPanel)>
 8012b4e:	6065      	str	r5, [r4, #4]
 8012b50:	e7e3      	b.n	8012b1a <Display::Detect(DisplayType)+0xc>
 8012b52:	6001      	str	r1, [r0, #0]
 8012b54:	e7e1      	b.n	8012b1a <Display::Detect(DisplayType)+0xc>
 8012b56:	6803      	ldr	r3, [r0, #0]
 8012b58:	68db      	ldr	r3, [r3, #12]
 8012b5a:	4798      	blx	r3
 8012b5c:	6863      	ldr	r3, [r4, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d0eb      	beq.n	8012b3a <Display::Detect(DisplayType)+0x2c>
 8012b62:	bd38      	pop	{r3, r4, r5, pc}

08012b64 <Display::Printf(unsigned char, char const*, ...)>:
 8012b64:	b40c      	push	{r2, r3}
 8012b66:	b570      	push	{r4, r5, r6, lr}
 8012b68:	6844      	ldr	r4, [r0, #4]
 8012b6a:	4605      	mov	r5, r0
 8012b6c:	460e      	mov	r6, r1
 8012b6e:	b08a      	sub	sp, #40	; 0x28
 8012b70:	b174      	cbz	r4, 8012b90 <Display::Printf(unsigned char, char const*, ...)+0x2c>
 8012b72:	ab0f      	add	r3, sp, #60	; 0x3c
 8012b74:	2120      	movs	r1, #32
 8012b76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b78:	a802      	add	r0, sp, #8
 8012b7a:	9301      	str	r3, [sp, #4]
 8012b7c:	f001 f8d2 	bl	8013d24 <vsnprintf>
 8012b80:	4604      	mov	r4, r0
 8012b82:	6868      	ldr	r0, [r5, #4]
 8012b84:	4631      	mov	r1, r6
 8012b86:	6803      	ldr	r3, [r0, #0]
 8012b88:	aa02      	add	r2, sp, #8
 8012b8a:	69dd      	ldr	r5, [r3, #28]
 8012b8c:	b2a3      	uxth	r3, r4
 8012b8e:	47a8      	blx	r5
 8012b90:	4620      	mov	r0, r4
 8012b92:	b00a      	add	sp, #40	; 0x28
 8012b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b98:	b002      	add	sp, #8
 8012b9a:	4770      	bx	lr

08012b9c <Display::Write(unsigned char, char const*)>:
 8012b9c:	6840      	ldr	r0, [r0, #4]
 8012b9e:	b538      	push	{r3, r4, r5, lr}
 8012ba0:	b168      	cbz	r0, 8012bbe <Display::Write(unsigned char, char const*)+0x22>
 8012ba2:	2400      	movs	r4, #0
 8012ba4:	7905      	ldrb	r5, [r0, #4]
 8012ba6:	5d13      	ldrb	r3, [r2, r4]
 8012ba8:	b11b      	cbz	r3, 8012bb2 <Display::Write(unsigned char, char const*)+0x16>
 8012baa:	1c63      	adds	r3, r4, #1
 8012bac:	42ac      	cmp	r4, r5
 8012bae:	461c      	mov	r4, r3
 8012bb0:	dbf9      	blt.n	8012ba6 <Display::Write(unsigned char, char const*)+0xa>
 8012bb2:	6803      	ldr	r3, [r0, #0]
 8012bb4:	69dd      	ldr	r5, [r3, #28]
 8012bb6:	b2e3      	uxtb	r3, r4
 8012bb8:	47a8      	blx	r5
 8012bba:	4620      	mov	r0, r4
 8012bbc:	bd38      	pop	{r3, r4, r5, pc}
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	e7fb      	b.n	8012bba <Display::Write(unsigned char, char const*)+0x1e>

08012bc2 <Display::SetCursorPos(unsigned char, unsigned char)>:
 8012bc2:	6840      	ldr	r0, [r0, #4]
 8012bc4:	b110      	cbz	r0, 8012bcc <Display::SetCursorPos(unsigned char, unsigned char)+0xa>
 8012bc6:	6803      	ldr	r3, [r0, #0]
 8012bc8:	6a1b      	ldr	r3, [r3, #32]
 8012bca:	4718      	bx	r3
 8012bcc:	4770      	bx	lr

08012bce <Display::TextStatus(char const*)>:
 8012bce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bd2:	6843      	ldr	r3, [r0, #4]
 8012bd4:	4604      	mov	r4, r0
 8012bd6:	460e      	mov	r6, r1
 8012bd8:	b31b      	cbz	r3, 8012c22 <Display::TextStatus(char const*)+0x54>
 8012bda:	f893 9005 	ldrb.w	r9, [r3, #5]
 8012bde:	2100      	movs	r1, #0
 8012be0:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 8012be4:	b2ed      	uxtb	r5, r5
 8012be6:	462a      	mov	r2, r5
 8012be8:	f893 8004 	ldrb.w	r8, [r3, #4]
 8012bec:	2700      	movs	r7, #0
 8012bee:	f7ff ffe8 	bl	8012bc2 <Display::SetCursorPos(unsigned char, unsigned char)>
 8012bf2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012bf6:	45b8      	cmp	r8, r7
 8012bf8:	d907      	bls.n	8012c0a <Display::TextStatus(char const*)+0x3c>
 8012bfa:	6860      	ldr	r0, [r4, #4]
 8012bfc:	b118      	cbz	r0, 8012c06 <Display::TextStatus(char const*)+0x38>
 8012bfe:	6803      	ldr	r3, [r0, #0]
 8012c00:	2120      	movs	r1, #32
 8012c02:	695b      	ldr	r3, [r3, #20]
 8012c04:	4798      	blx	r3
 8012c06:	3701      	adds	r7, #1
 8012c08:	e7f5      	b.n	8012bf6 <Display::TextStatus(char const*)+0x28>
 8012c0a:	462a      	mov	r2, r5
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	2100      	movs	r1, #0
 8012c10:	f7ff ffd7 	bl	8012bc2 <Display::SetCursorPos(unsigned char, unsigned char)>
 8012c14:	4632      	mov	r2, r6
 8012c16:	4649      	mov	r1, r9
 8012c18:	4620      	mov	r0, r4
 8012c1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c1e:	f7ff bfbd 	b.w	8012b9c <Display::Write(unsigned char, char const*)>
 8012c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012c26 <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)>:
 8012c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c28:	4617      	mov	r7, r2
 8012c2a:	4606      	mov	r6, r0
 8012c2c:	461c      	mov	r4, r3
 8012c2e:	460d      	mov	r5, r1
 8012c30:	f7ff ffcd 	bl	8012bce <Display::TextStatus(char const*)>
 8012c34:	4639      	mov	r1, r7
 8012c36:	f106 0014 	add.w	r0, r6, #20
 8012c3a:	f000 f86c 	bl	8012d16 <Display7Segment::Status(Display7SegmentMessage)>
 8012c3e:	1c63      	adds	r3, r4, #1
 8012c40:	d005      	beq.n	8012c4e <Display::TextStatus(char const*, Display7SegmentMessage, unsigned int)+0x28>
 8012c42:	4629      	mov	r1, r5
 8012c44:	4620      	mov	r0, r4
 8012c46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012c4a:	f000 bad3 	b.w	80131f4 <console_status>
 8012c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012c50 <Display::PrintInfo()>:
 8012c50:	6840      	ldr	r0, [r0, #4]
 8012c52:	b910      	cbnz	r0, 8012c5a <Display::PrintInfo()+0xa>
 8012c54:	4802      	ldr	r0, [pc, #8]	; (8012c60 <Display::PrintInfo()+0x10>)
 8012c56:	f001 b875 	b.w	8013d44 <puts>
 8012c5a:	6803      	ldr	r3, [r0, #0]
 8012c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c5e:	4718      	bx	r3
 8012c60:	08017d2a 	stmdaeq	r1, {r1, r3, r5, r8, sl, fp, ip, sp, lr}

08012c64 <Display::Display()>:
 8012c64:	2300      	movs	r3, #0
 8012c66:	2204      	movs	r2, #4
 8012c68:	b510      	push	{r4, lr}
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	e9c0 2300 	strd	r2, r3, [r0]
 8012c70:	7203      	strb	r3, [r0, #8]
 8012c72:	4b0b      	ldr	r3, [pc, #44]	; (8012ca0 <Display::Display()+0x3c>)
 8012c74:	3014      	adds	r0, #20
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f840 3c08 	str.w	r3, [r0, #-8]
 8012c7c:	4b09      	ldr	r3, [pc, #36]	; (8012ca4 <Display::Display()+0x40>)
 8012c7e:	f840 3c04 	str.w	r3, [r0, #-4]
 8012c82:	f000 f851 	bl	8012d28 <Display7Segment::Display7Segment()>
 8012c86:	4b08      	ldr	r3, [pc, #32]	; (8012ca8 <Display::Display()+0x44>)
 8012c88:	601c      	str	r4, [r3, #0]
 8012c8a:	6863      	ldr	r3, [r4, #4]
 8012c8c:	b91b      	cbnz	r3, 8012c96 <Display::Display()+0x32>
 8012c8e:	2102      	movs	r1, #2
 8012c90:	4620      	mov	r0, r4
 8012c92:	f7ff ff3c 	bl	8012b0e <Display::Detect(DisplayType)>
 8012c96:	4620      	mov	r0, r4
 8012c98:	f7ff ffda 	bl	8012c50 <Display::PrintInfo()>
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	bd10      	pop	{r4, pc}
 8012ca0:	2000a97c 	andcs	sl, r0, ip, ror r9
 8012ca4:	000493e0 	andeq	r9, r4, r0, ror #7
 8012ca8:	2000a870 	andcs	sl, r0, r0, ror r8

08012cac <Display::SetSleep(bool)>:
 8012cac:	b538      	push	{r3, r4, r5, lr}
 8012cae:	4604      	mov	r4, r0
 8012cb0:	6840      	ldr	r0, [r0, #4]
 8012cb2:	460d      	mov	r5, r1
 8012cb4:	b138      	cbz	r0, 8012cc6 <Display::SetSleep(bool)+0x1a>
 8012cb6:	6803      	ldr	r3, [r0, #0]
 8012cb8:	7221      	strb	r1, [r4, #8]
 8012cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cbc:	4798      	blx	r3
 8012cbe:	b915      	cbnz	r5, 8012cc6 <Display::SetSleep(bool)+0x1a>
 8012cc0:	4b01      	ldr	r3, [pc, #4]	; (8012cc8 <Display::SetSleep(bool)+0x1c>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	60e3      	str	r3, [r4, #12]
 8012cc6:	bd38      	pop	{r3, r4, r5, pc}
 8012cc8:	2000a97c 	andcs	sl, r0, ip, ror r9

08012ccc <Display::Run()>:
 8012ccc:	6901      	ldr	r1, [r0, #16]
 8012cce:	b151      	cbz	r1, 8012ce6 <Display::Run()+0x1a>
 8012cd0:	7a02      	ldrb	r2, [r0, #8]
 8012cd2:	b942      	cbnz	r2, 8012ce6 <Display::Run()+0x1a>
 8012cd4:	4a04      	ldr	r2, [pc, #16]	; (8012ce8 <Display::Run()+0x1c>)
 8012cd6:	68c3      	ldr	r3, [r0, #12]
 8012cd8:	6812      	ldr	r2, [r2, #0]
 8012cda:	1ad3      	subs	r3, r2, r3
 8012cdc:	4299      	cmp	r1, r3
 8012cde:	d202      	bcs.n	8012ce6 <Display::Run()+0x1a>
 8012ce0:	2101      	movs	r1, #1
 8012ce2:	f7ff bfe3 	b.w	8012cac <Display::SetSleep(bool)>
 8012ce6:	4770      	bx	lr
 8012ce8:	2000a97c 	andcs	sl, r0, ip, ror r9

08012cec <HAL_I2C::WriteRegister(unsigned char, unsigned short)>:
 8012cec:	b513      	push	{r0, r1, r4, lr}
 8012cee:	4604      	mov	r4, r0
 8012cf0:	0a13      	lsrs	r3, r2, #8
 8012cf2:	7800      	ldrb	r0, [r0, #0]
 8012cf4:	f88d 1004 	strb.w	r1, [sp, #4]
 8012cf8:	f88d 3005 	strb.w	r3, [sp, #5]
 8012cfc:	f88d 2006 	strb.w	r2, [sp, #6]
 8012d00:	f001 ff26 	bl	8014b50 <gd32_i2c_set_address(unsigned char)>
 8012d04:	6860      	ldr	r0, [r4, #4]
 8012d06:	f001 ff1b 	bl	8014b40 <gd32_i2c_set_baudrate(unsigned int)>
 8012d0a:	2103      	movs	r1, #3
 8012d0c:	a801      	add	r0, sp, #4
 8012d0e:	f001 ff25 	bl	8014b5c <gd32_i2c_write(char const*, unsigned int)>
 8012d12:	b002      	add	sp, #8
 8012d14:	bd10      	pop	{r4, pc}

08012d16 <Display7Segment::Status(Display7SegmentMessage)>:
 8012d16:	b508      	push	{r3, lr}
 8012d18:	7a03      	ldrb	r3, [r0, #8]
 8012d1a:	b123      	cbz	r3, 8012d26 <Display7Segment::Status(Display7SegmentMessage)+0x10>
 8012d1c:	43c9      	mvns	r1, r1
 8012d1e:	b28a      	uxth	r2, r1
 8012d20:	2112      	movs	r1, #18
 8012d22:	f7ff ffe3 	bl	8012cec <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8012d26:	bd08      	pop	{r3, pc}

08012d28 <Display7Segment::Display7Segment()>:
 8012d28:	b570      	push	{r4, r5, r6, lr}
 8012d2a:	4604      	mov	r4, r0
 8012d2c:	2500      	movs	r5, #0
 8012d2e:	2021      	movs	r0, #33	; 0x21
 8012d30:	4e0f      	ldr	r6, [pc, #60]	; (8012d70 <Display7Segment::Display7Segment()+0x48>)
 8012d32:	4b10      	ldr	r3, [pc, #64]	; (8012d74 <Display7Segment::Display7Segment()+0x4c>)
 8012d34:	7020      	strb	r0, [r4, #0]
 8012d36:	6066      	str	r6, [r4, #4]
 8012d38:	7225      	strb	r5, [r4, #8]
 8012d3a:	601c      	str	r4, [r3, #0]
 8012d3c:	f001 ff08 	bl	8014b50 <gd32_i2c_set_address(unsigned char)>
 8012d40:	4630      	mov	r0, r6
 8012d42:	f001 fefd 	bl	8014b40 <gd32_i2c_set_baudrate(unsigned int)>
 8012d46:	4629      	mov	r1, r5
 8012d48:	4628      	mov	r0, r5
 8012d4a:	f001 ff07 	bl	8014b5c <gd32_i2c_write(char const*, unsigned int)>
 8012d4e:	1e02      	subs	r2, r0, #0
 8012d50:	bf0c      	ite	eq
 8012d52:	2301      	moveq	r3, #1
 8012d54:	462b      	movne	r3, r5
 8012d56:	7223      	strb	r3, [r4, #8]
 8012d58:	d108      	bne.n	8012d6c <Display7Segment::Display7Segment()+0x44>
 8012d5a:	4611      	mov	r1, r2
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	f7ff ffc5 	bl	8012cec <HAL_I2C::WriteRegister(unsigned char, unsigned short)>
 8012d62:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8012d66:	4620      	mov	r0, r4
 8012d68:	f7ff ffd5 	bl	8012d16 <Display7Segment::Status(Display7SegmentMessage)>
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	bd70      	pop	{r4, r5, r6, pc}
 8012d70:	00061a80 	andeq	r1, r6, r0, lsl #21
 8012d74:	2000a874 	andcs	sl, r0, r4, ror r8

08012d78 <Ssd1306::~Ssd1306()>:
 8012d78:	4770      	bx	lr

08012d7a <Ssd1306::SetCursor(unsigned int)>:
 8012d7a:	4770      	bx	lr

08012d7c <Ssd1306::PrintInfo()>:
 8012d7c:	b410      	push	{r4}
 8012d7e:	4906      	ldr	r1, [pc, #24]	; (8012d98 <Ssd1306::PrintInfo()+0x1c>)
 8012d80:	7c44      	ldrb	r4, [r0, #17]
 8012d82:	7903      	ldrb	r3, [r0, #4]
 8012d84:	7942      	ldrb	r2, [r0, #5]
 8012d86:	4805      	ldr	r0, [pc, #20]	; (8012d9c <Ssd1306::PrintInfo()+0x20>)
 8012d88:	2c00      	cmp	r4, #0
 8012d8a:	bf08      	it	eq
 8012d8c:	4601      	moveq	r1, r0
 8012d8e:	4804      	ldr	r0, [pc, #16]	; (8012da0 <Ssd1306::PrintInfo()+0x24>)
 8012d90:	bc10      	pop	{r4}
 8012d92:	f000 bf87 	b.w	8013ca4 <printf>
 8012d96:	bf00      	nop
 8012d98:	08017d3b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r8, sl, fp, ip, sp, lr}
 8012d9c:	08017d42 	stmdaeq	r1, {r1, r6, r8, sl, fp, ip, sp, lr}
 8012da0:	08017d4a 	stmdaeq	r1, {r1, r3, r6, r8, sl, fp, ip, sp, lr}

08012da4 <Ssd1306::~Ssd1306()>:
 8012da4:	b510      	push	{r4, lr}
 8012da6:	4604      	mov	r4, r0
 8012da8:	f000 fb72 	bl	8013490 <operator delete(void*)>
 8012dac:	4620      	mov	r0, r4
 8012dae:	bd10      	pop	{r4, pc}

08012db0 <HAL_I2C::Setup()>:
 8012db0:	b510      	push	{r4, lr}
 8012db2:	4604      	mov	r4, r0
 8012db4:	7800      	ldrb	r0, [r0, #0]
 8012db6:	f001 fecb 	bl	8014b50 <gd32_i2c_set_address(unsigned char)>
 8012dba:	6860      	ldr	r0, [r4, #4]
 8012dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dc0:	f001 bebe 	b.w	8014b40 <gd32_i2c_set_baudrate(unsigned int)>

08012dc4 <Ssd1306::PutChar(int)>:
 8012dc4:	b510      	push	{r4, lr}
 8012dc6:	f1a1 0420 	sub.w	r4, r1, #32
 8012dca:	2c5f      	cmp	r4, #95	; 0x5f
 8012dcc:	bf88      	it	hi
 8012dce:	2400      	movhi	r4, #0
 8012dd0:	3008      	adds	r0, #8
 8012dd2:	f7ff ffed 	bl	8012db0 <HAL_I2C::Setup()>
 8012dd6:	4804      	ldr	r0, [pc, #16]	; (8012de8 <Ssd1306::PutChar(int)+0x24>)
 8012dd8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8012ddc:	4420      	add	r0, r4
 8012dde:	2107      	movs	r1, #7
 8012de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012de4:	f001 beba 	b.w	8014b5c <gd32_i2c_write(char const*, unsigned int)>
 8012de8:	08017d5c 	stmdaeq	r1, {r2, r3, r4, r6, r8, sl, fp, ip, sp, lr}

08012dec <Ssd1306::PutString(char const*)>:
 8012dec:	b538      	push	{r3, r4, r5, lr}
 8012dee:	4605      	mov	r5, r0
 8012df0:	1e4c      	subs	r4, r1, #1
 8012df2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8012df6:	b119      	cbz	r1, 8012e00 <Ssd1306::PutString(char const*)+0x14>
 8012df8:	4628      	mov	r0, r5
 8012dfa:	f7ff ffe3 	bl	8012dc4 <Ssd1306::PutChar(int)>
 8012dfe:	e7f8      	b.n	8012df2 <Ssd1306::PutString(char const*)+0x6>
 8012e00:	bd38      	pop	{r3, r4, r5, pc}

08012e02 <Ssd1306::Text(char const*, unsigned int)>:
 8012e02:	b570      	push	{r4, r5, r6, lr}
 8012e04:	7903      	ldrb	r3, [r0, #4]
 8012e06:	4605      	mov	r5, r0
 8012e08:	460c      	mov	r4, r1
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	bf94      	ite	ls
 8012e0e:	18ce      	addls	r6, r1, r3
 8012e10:	188e      	addhi	r6, r1, r2
 8012e12:	42b4      	cmp	r4, r6
 8012e14:	d005      	beq.n	8012e22 <Ssd1306::Text(char const*, unsigned int)+0x20>
 8012e16:	4628      	mov	r0, r5
 8012e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e1c:	f7ff ffd2 	bl	8012dc4 <Ssd1306::PutChar(int)>
 8012e20:	e7f7      	b.n	8012e12 <Ssd1306::Text(char const*, unsigned int)+0x10>
 8012e22:	bd70      	pop	{r4, r5, r6, pc}

08012e24 <Ssd1306::InitMembers()>:
 8012e24:	7c03      	ldrb	r3, [r0, #16]
 8012e26:	b12b      	cbz	r3, 8012e34 <Ssd1306::InitMembers()+0x10>
 8012e28:	3b01      	subs	r3, #1
 8012e2a:	2b01      	cmp	r3, #1
 8012e2c:	d908      	bls.n	8012e40 <Ssd1306::InitMembers()+0x1c>
 8012e2e:	f640 0315 	movw	r3, #2069	; 0x815
 8012e32:	e007      	b.n	8012e44 <Ssd1306::InitMembers()+0x20>
 8012e34:	f640 0315 	movw	r3, #2069	; 0x815
 8012e38:	8083      	strh	r3, [r0, #4]
 8012e3a:	2308      	movs	r3, #8
 8012e3c:	6143      	str	r3, [r0, #20]
 8012e3e:	4770      	bx	lr
 8012e40:	f240 4315 	movw	r3, #1045	; 0x415
 8012e44:	8083      	strh	r3, [r0, #4]
 8012e46:	2304      	movs	r3, #4
 8012e48:	e7f8      	b.n	8012e3c <Ssd1306::InitMembers()+0x18>
	...

08012e4c <Ssd1306::Ssd1306(TOledPanel)>:
 8012e4c:	4a08      	ldr	r2, [pc, #32]	; (8012e70 <Ssd1306::Ssd1306(TOledPanel)+0x24>)
 8012e4e:	b508      	push	{r3, lr}
 8012e50:	6002      	str	r2, [r0, #0]
 8012e52:	227f      	movs	r2, #127	; 0x7f
 8012e54:	80c2      	strh	r2, [r0, #6]
 8012e56:	223c      	movs	r2, #60	; 0x3c
 8012e58:	7202      	strb	r2, [r0, #8]
 8012e5a:	4a06      	ldr	r2, [pc, #24]	; (8012e74 <Ssd1306::Ssd1306(TOledPanel)+0x28>)
 8012e5c:	7401      	strb	r1, [r0, #16]
 8012e5e:	60c2      	str	r2, [r0, #12]
 8012e60:	2200      	movs	r2, #0
 8012e62:	7442      	strb	r2, [r0, #17]
 8012e64:	4a04      	ldr	r2, [pc, #16]	; (8012e78 <Ssd1306::Ssd1306(TOledPanel)+0x2c>)
 8012e66:	6010      	str	r0, [r2, #0]
 8012e68:	f7ff ffdc 	bl	8012e24 <Ssd1306::InitMembers()>
 8012e6c:	bd08      	pop	{r3, pc}
 8012e6e:	bf00      	nop
 8012e70:	08018034 	stmdaeq	r1, {r2, r4, r5, pc}
 8012e74:	00061a80 	andeq	r1, r6, r0, lsl #21
 8012e78:	2000a900 	andcs	sl, r0, r0, lsl #18

08012e7c <Ssd1306::SendCommand(unsigned char)>:
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	b507      	push	{r0, r1, r2, lr}
 8012e80:	3008      	adds	r0, #8
 8012e82:	f88d 3004 	strb.w	r3, [sp, #4]
 8012e86:	f88d 1005 	strb.w	r1, [sp, #5]
 8012e8a:	f7ff ff91 	bl	8012db0 <HAL_I2C::Setup()>
 8012e8e:	2102      	movs	r1, #2
 8012e90:	a801      	add	r0, sp, #4
 8012e92:	f001 fe63 	bl	8014b5c <gd32_i2c_write(char const*, unsigned int)>
 8012e96:	b003      	add	sp, #12
 8012e98:	f85d fb04 	ldr.w	pc, [sp], #4

08012e9c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>:
 8012e9c:	2914      	cmp	r1, #20
 8012e9e:	b570      	push	{r4, r5, r6, lr}
 8012ea0:	4605      	mov	r5, r0
 8012ea2:	4616      	mov	r6, r2
 8012ea4:	d81c      	bhi.n	8012ee0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8012ea6:	7943      	ldrb	r3, [r0, #5]
 8012ea8:	4293      	cmp	r3, r2
 8012eaa:	d919      	bls.n	8012ee0 <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x44>
 8012eac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012eb0:	7c43      	ldrb	r3, [r0, #17]
 8012eb2:	004c      	lsls	r4, r1, #1
 8012eb4:	b2e4      	uxtb	r4, r4
 8012eb6:	b10b      	cbz	r3, 8012ebc <Ssd1306::SetCursorPos(unsigned char, unsigned char)+0x20>
 8012eb8:	3404      	adds	r4, #4
 8012eba:	b2e4      	uxtb	r4, r4
 8012ebc:	4628      	mov	r0, r5
 8012ebe:	f004 010e 	and.w	r1, r4, #14
 8012ec2:	f7ff ffdb 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012ec6:	0921      	lsrs	r1, r4, #4
 8012ec8:	4628      	mov	r0, r5
 8012eca:	f041 0110 	orr.w	r1, r1, #16
 8012ece:	f7ff ffd5 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012ed2:	4628      	mov	r0, r5
 8012ed4:	f046 01b0 	orr.w	r1, r6, #176	; 0xb0
 8012ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012edc:	f7ff bfce 	b.w	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012ee0:	bd70      	pop	{r4, r5, r6, pc}

08012ee2 <Ssd1306::TextLine(unsigned char, char const*, unsigned int)>:
 8012ee2:	b570      	push	{r4, r5, r6, lr}
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	4615      	mov	r5, r2
 8012ee8:	461e      	mov	r6, r3
 8012eea:	b171      	cbz	r1, 8012f0a <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8012eec:	7943      	ldrb	r3, [r0, #5]
 8012eee:	428b      	cmp	r3, r1
 8012ef0:	d30b      	bcc.n	8012f0a <Ssd1306::TextLine(unsigned char, char const*, unsigned int)+0x28>
 8012ef2:	3901      	subs	r1, #1
 8012ef4:	b2ca      	uxtb	r2, r1
 8012ef6:	2100      	movs	r1, #0
 8012ef8:	f7ff ffd0 	bl	8012e9c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8012efc:	4632      	mov	r2, r6
 8012efe:	4629      	mov	r1, r5
 8012f00:	4620      	mov	r0, r4
 8012f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f06:	f7ff bf7c 	b.w	8012e02 <Ssd1306::Text(char const*, unsigned int)>
 8012f0a:	bd70      	pop	{r4, r5, r6, pc}

08012f0c <Ssd1306::ClearLine(unsigned char)>:
 8012f0c:	b538      	push	{r3, r4, r5, lr}
 8012f0e:	4605      	mov	r5, r0
 8012f10:	b1b9      	cbz	r1, 8012f42 <Ssd1306::ClearLine(unsigned char)+0x36>
 8012f12:	7943      	ldrb	r3, [r0, #5]
 8012f14:	428b      	cmp	r3, r1
 8012f16:	d314      	bcc.n	8012f42 <Ssd1306::ClearLine(unsigned char)+0x36>
 8012f18:	3901      	subs	r1, #1
 8012f1a:	b2cc      	uxtb	r4, r1
 8012f1c:	4622      	mov	r2, r4
 8012f1e:	2100      	movs	r1, #0
 8012f20:	f7ff ffbc 	bl	8012e9c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8012f24:	f105 0008 	add.w	r0, r5, #8
 8012f28:	f7ff ff42 	bl	8012db0 <HAL_I2C::Setup()>
 8012f2c:	2181      	movs	r1, #129	; 0x81
 8012f2e:	4805      	ldr	r0, [pc, #20]	; (8012f44 <Ssd1306::ClearLine(unsigned char)+0x38>)
 8012f30:	f001 fe14 	bl	8014b5c <gd32_i2c_write(char const*, unsigned int)>
 8012f34:	4622      	mov	r2, r4
 8012f36:	4628      	mov	r0, r5
 8012f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f3c:	2100      	movs	r1, #0
 8012f3e:	f7ff bfad 	b.w	8012e9c <Ssd1306::SetCursorPos(unsigned char, unsigned char)>
 8012f42:	bd38      	pop	{r3, r4, r5, pc}
 8012f44:	2000a878 	andcs	sl, r0, r8, ror r8

08012f48 <Ssd1306::SetSleep(bool)>:
 8012f48:	b111      	cbz	r1, 8012f50 <Ssd1306::SetSleep(bool)+0x8>
 8012f4a:	21ae      	movs	r1, #174	; 0xae
 8012f4c:	f7ff bf96 	b.w	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012f50:	21af      	movs	r1, #175	; 0xaf
 8012f52:	e7fb      	b.n	8012f4c <Ssd1306::SetSleep(bool)+0x4>

08012f54 <Ssd1306::SetContrast(unsigned char)>:
 8012f54:	b538      	push	{r3, r4, r5, lr}
 8012f56:	4604      	mov	r4, r0
 8012f58:	460d      	mov	r5, r1
 8012f5a:	7181      	strb	r1, [r0, #6]
 8012f5c:	2181      	movs	r1, #129	; 0x81
 8012f5e:	f7ff ff8d 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012f62:	4629      	mov	r1, r5
 8012f64:	4620      	mov	r0, r4
 8012f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f6a:	f7ff bf87 	b.w	8012e7c <Ssd1306::SendCommand(unsigned char)>

08012f6e <Ssd1306::SetFlipVertically(bool)>:
 8012f6e:	b510      	push	{r4, lr}
 8012f70:	4604      	mov	r4, r0
 8012f72:	71c1      	strb	r1, [r0, #7]
 8012f74:	b141      	cbz	r1, 8012f88 <Ssd1306::SetFlipVertically(bool)+0x1a>
 8012f76:	21c0      	movs	r1, #192	; 0xc0
 8012f78:	f7ff ff80 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012f7c:	21a0      	movs	r1, #160	; 0xa0
 8012f7e:	4620      	mov	r0, r4
 8012f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f84:	f7ff bf7a 	b.w	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012f88:	21c8      	movs	r1, #200	; 0xc8
 8012f8a:	f7ff ff77 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012f8e:	21a1      	movs	r1, #161	; 0xa1
 8012f90:	e7f5      	b.n	8012f7e <Ssd1306::SetFlipVertically(bool)+0x10>
	...

08012f94 <Ssd1306::CheckSH1106()>:
 8012f94:	b570      	push	{r4, r5, r6, lr}
 8012f96:	4604      	mov	r4, r0
 8012f98:	b086      	sub	sp, #24
 8012f9a:	2100      	movs	r1, #0
 8012f9c:	f7ff ff6e 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012fa0:	2190      	movs	r1, #144	; 0x90
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	f7ff ff6a 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012fa8:	21b0      	movs	r1, #176	; 0xb0
 8012faa:	4620      	mov	r0, r4
 8012fac:	f7ff ff66 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012fb0:	4b22      	ldr	r3, [pc, #136]	; (801303c <Ssd1306::CheckSH1106()+0xa8>)
 8012fb2:	f104 0608 	add.w	r6, r4, #8
 8012fb6:	6818      	ldr	r0, [r3, #0]
 8012fb8:	791b      	ldrb	r3, [r3, #4]
 8012fba:	ad02      	add	r5, sp, #8
 8012fbc:	9002      	str	r0, [sp, #8]
 8012fbe:	4630      	mov	r0, r6
 8012fc0:	712b      	strb	r3, [r5, #4]
 8012fc2:	f7ff fef5 	bl	8012db0 <HAL_I2C::Setup()>
 8012fc6:	2105      	movs	r1, #5
 8012fc8:	4628      	mov	r0, r5
 8012fca:	f001 fdc7 	bl	8014b5c <gd32_i2c_write(char const*, unsigned int)>
 8012fce:	2100      	movs	r1, #0
 8012fd0:	4620      	mov	r0, r4
 8012fd2:	f7ff ff53 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012fd6:	2190      	movs	r1, #144	; 0x90
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f7ff ff4f 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012fde:	21b0      	movs	r1, #176	; 0xb0
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f7ff ff4b 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	9304      	str	r3, [sp, #16]
 8012fea:	f88d 3014 	strb.w	r3, [sp, #20]
 8012fee:	2340      	movs	r3, #64	; 0x40
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	f88d 3007 	strb.w	r3, [sp, #7]
 8012ff6:	f7ff fedb 	bl	8012db0 <HAL_I2C::Setup()>
 8012ffa:	2101      	movs	r1, #1
 8012ffc:	f10d 0007 	add.w	r0, sp, #7
 8013000:	f001 fdac 	bl	8014b5c <gd32_i2c_write(char const*, unsigned int)>
 8013004:	4630      	mov	r0, r6
 8013006:	f7ff fed3 	bl	8012db0 <HAL_I2C::Setup()>
 801300a:	2105      	movs	r1, #5
 801300c:	a804      	add	r0, sp, #16
 801300e:	f001 fe0b 	bl	8014c28 <gd32_i2c_read(char*, unsigned int)>
 8013012:	2201      	movs	r2, #1
 8013014:	5cab      	ldrb	r3, [r5, r2]
 8013016:	a904      	add	r1, sp, #16
 8013018:	3201      	adds	r2, #1
 801301a:	4411      	add	r1, r2
 801301c:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 8013020:	428b      	cmp	r3, r1
 8013022:	d006      	beq.n	8013032 <Ssd1306::CheckSH1106()+0x9e>
 8013024:	1a5b      	subs	r3, r3, r1
 8013026:	fab3 f383 	clz	r3, r3
 801302a:	095b      	lsrs	r3, r3, #5
 801302c:	7463      	strb	r3, [r4, #17]
 801302e:	b006      	add	sp, #24
 8013030:	bd70      	pop	{r4, r5, r6, pc}
 8013032:	2a05      	cmp	r2, #5
 8013034:	d1ee      	bne.n	8013014 <Ssd1306::CheckSH1106()+0x80>
 8013036:	2300      	movs	r3, #0
 8013038:	e7f5      	b.n	8013026 <Ssd1306::CheckSH1106()+0x92>
 801303a:	bf00      	nop
 801303c:	08017d56 	stmdaeq	r1, {r1, r2, r4, r6, r8, sl, fp, ip, sp, lr}

08013040 <Ssd1306::Cls()>:
 8013040:	7c43      	ldrb	r3, [r0, #17]
 8013042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013046:	2b00      	cmp	r3, #0
 8013048:	bf0c      	ite	eq
 801304a:	2500      	moveq	r5, #0
 801304c:	2504      	movne	r5, #4
 801304e:	4604      	mov	r4, r0
 8013050:	2600      	movs	r6, #0
 8013052:	f1a5 077f 	sub.w	r7, r5, #127	; 0x7f
 8013056:	f045 0810 	orr.w	r8, r5, #16
 801305a:	b2ff      	uxtb	r7, r7
 801305c:	6963      	ldr	r3, [r4, #20]
 801305e:	4629      	mov	r1, r5
 8013060:	42b3      	cmp	r3, r6
 8013062:	4620      	mov	r0, r4
 8013064:	d91b      	bls.n	801309e <Ssd1306::Cls()+0x5e>
 8013066:	f7ff ff09 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 801306a:	4641      	mov	r1, r8
 801306c:	4620      	mov	r0, r4
 801306e:	f7ff ff05 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8013072:	f066 014f 	orn	r1, r6, #79	; 0x4f
 8013076:	4620      	mov	r0, r4
 8013078:	b2c9      	uxtb	r1, r1
 801307a:	f7ff feff 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 801307e:	7c23      	ldrb	r3, [r4, #16]
 8013080:	b123      	cbz	r3, 801308c <Ssd1306::Cls()+0x4c>
 8013082:	3b01      	subs	r3, #1
 8013084:	2b01      	cmp	r3, #1
 8013086:	d901      	bls.n	801308c <Ssd1306::Cls()+0x4c>
 8013088:	3601      	adds	r6, #1
 801308a:	e7e7      	b.n	801305c <Ssd1306::Cls()+0x1c>
 801308c:	f104 0008 	add.w	r0, r4, #8
 8013090:	f7ff fe8e 	bl	8012db0 <HAL_I2C::Setup()>
 8013094:	4639      	mov	r1, r7
 8013096:	4808      	ldr	r0, [pc, #32]	; (80130b8 <Ssd1306::Cls()+0x78>)
 8013098:	f001 fd60 	bl	8014b5c <gd32_i2c_write(char const*, unsigned int)>
 801309c:	e7f4      	b.n	8013088 <Ssd1306::Cls()+0x48>
 801309e:	f7ff feed 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 80130a2:	4641      	mov	r1, r8
 80130a4:	4620      	mov	r0, r4
 80130a6:	f7ff fee9 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 80130aa:	4620      	mov	r0, r4
 80130ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80130b0:	21b0      	movs	r1, #176	; 0xb0
 80130b2:	f7ff bee3 	b.w	8012e7c <Ssd1306::SendCommand(unsigned char)>
 80130b6:	bf00      	nop
 80130b8:	2000a878 	andcs	sl, r0, r8, ror r8

080130bc <Ssd1306::Start()>:
 80130bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130be:	7a04      	ldrb	r4, [r0, #8]
 80130c0:	68c6      	ldr	r6, [r0, #12]
 80130c2:	4605      	mov	r5, r0
 80130c4:	4620      	mov	r0, r4
 80130c6:	f001 fd43 	bl	8014b50 <gd32_i2c_set_address(unsigned char)>
 80130ca:	4630      	mov	r0, r6
 80130cc:	f001 fd38 	bl	8014b40 <gd32_i2c_set_baudrate(unsigned int)>
 80130d0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80130d4:	2b07      	cmp	r3, #7
 80130d6:	d902      	bls.n	80130de <Ssd1306::Start()+0x22>
 80130d8:	3c50      	subs	r4, #80	; 0x50
 80130da:	2c0f      	cmp	r4, #15
 80130dc:	d80f      	bhi.n	80130fe <Ssd1306::Start()+0x42>
 80130de:	2101      	movs	r1, #1
 80130e0:	f10d 0007 	add.w	r0, sp, #7
 80130e4:	f001 fda0 	bl	8014c28 <gd32_i2c_read(char*, unsigned int)>
 80130e8:	fab0 f480 	clz	r4, r0
 80130ec:	0964      	lsrs	r4, r4, #5
 80130ee:	b35c      	cbz	r4, 8013148 <Ssd1306::Start()+0x8c>
 80130f0:	7c2e      	ldrb	r6, [r5, #16]
 80130f2:	b14e      	cbz	r6, 8013108 <Ssd1306::Start()+0x4c>
 80130f4:	3e01      	subs	r6, #1
 80130f6:	2e01      	cmp	r6, #1
 80130f8:	d929      	bls.n	801314e <Ssd1306::Start()+0x92>
 80130fa:	2400      	movs	r4, #0
 80130fc:	e024      	b.n	8013148 <Ssd1306::Start()+0x8c>
 80130fe:	2100      	movs	r1, #0
 8013100:	4608      	mov	r0, r1
 8013102:	f001 fd2b 	bl	8014b5c <gd32_i2c_write(char const*, unsigned int)>
 8013106:	e7ef      	b.n	80130e8 <Ssd1306::Start()+0x2c>
 8013108:	4f16      	ldr	r7, [pc, #88]	; (8013164 <Ssd1306::Start()+0xa8>)
 801310a:	4628      	mov	r0, r5
 801310c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013110:	3601      	adds	r6, #1
 8013112:	f7ff feb3 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8013116:	2e18      	cmp	r6, #24
 8013118:	d1f7      	bne.n	801310a <Ssd1306::Start()+0x4e>
 801311a:	2300      	movs	r3, #0
 801311c:	4a12      	ldr	r2, [pc, #72]	; (8013168 <Ssd1306::Start()+0xac>)
 801311e:	4618      	mov	r0, r3
 8013120:	4611      	mov	r1, r2
 8013122:	3301      	adds	r3, #1
 8013124:	2b86      	cmp	r3, #134	; 0x86
 8013126:	f802 0b01 	strb.w	r0, [r2], #1
 801312a:	d1fa      	bne.n	8013122 <Ssd1306::Start()+0x66>
 801312c:	2340      	movs	r3, #64	; 0x40
 801312e:	4628      	mov	r0, r5
 8013130:	700b      	strb	r3, [r1, #0]
 8013132:	f7ff ff2f 	bl	8012f94 <Ssd1306::CheckSH1106()>
 8013136:	4628      	mov	r0, r5
 8013138:	f7ff ff82 	bl	8013040 <Ssd1306::Cls()>
 801313c:	21af      	movs	r1, #175	; 0xaf
 801313e:	4628      	mov	r0, r5
 8013140:	f7ff fe9c 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 8013144:	2301      	movs	r3, #1
 8013146:	71eb      	strb	r3, [r5, #7]
 8013148:	4620      	mov	r0, r4
 801314a:	b003      	add	sp, #12
 801314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801314e:	2600      	movs	r6, #0
 8013150:	4f06      	ldr	r7, [pc, #24]	; (801316c <Ssd1306::Start()+0xb0>)
 8013152:	4628      	mov	r0, r5
 8013154:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013158:	3601      	adds	r6, #1
 801315a:	f7ff fe8f 	bl	8012e7c <Ssd1306::SendCommand(unsigned char)>
 801315e:	2e18      	cmp	r6, #24
 8013160:	d1f7      	bne.n	8013152 <Ssd1306::Start()+0x96>
 8013162:	e7da      	b.n	801311a <Ssd1306::Start()+0x5e>
 8013164:	08018014 	stmdaeq	r1, {r2, r4, pc}
 8013168:	2000a878 	andcs	sl, r0, r8, ror r8
 801316c:	08017ffc 	stmdaeq	r1, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}

08013170 <console_putc>:
 8013170:	280a      	cmp	r0, #10
 8013172:	b510      	push	{r4, lr}
 8013174:	4604      	mov	r4, r0
 8013176:	d102      	bne.n	801317e <console_putc+0xe>
 8013178:	200d      	movs	r0, #13
 801317a:	f000 fee5 	bl	8013f48 <uart0_putc>
 801317e:	4620      	mov	r0, r4
 8013180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013184:	f000 bee0 	b.w	8013f48 <uart0_putc>

08013188 <console_puts>:
 8013188:	f000 befe 	b.w	8013f88 <uart0_puts>

0801318c <console_set_fg_color>:
 801318c:	2807      	cmp	r0, #7
 801318e:	d810      	bhi.n	80131b2 <console_set_fg_color+0x26>
 8013190:	e8df f000 	tbb	[pc, r0]
 8013194:	0b090704 	bleq	8254dac <__exidx_end+0x23cc44>
 8013198:	0d0f0f0f 	stceq	15, cr0, [pc, #-60]	; 8013164 <Ssd1306::Start()+0xa8>
 801319c:	4806      	ldr	r0, [pc, #24]	; (80131b8 <console_set_fg_color+0x2c>)
 801319e:	f000 bef3 	b.w	8013f88 <uart0_puts>
 80131a2:	4806      	ldr	r0, [pc, #24]	; (80131bc <console_set_fg_color+0x30>)
 80131a4:	e7fb      	b.n	801319e <console_set_fg_color+0x12>
 80131a6:	4806      	ldr	r0, [pc, #24]	; (80131c0 <console_set_fg_color+0x34>)
 80131a8:	e7f9      	b.n	801319e <console_set_fg_color+0x12>
 80131aa:	4806      	ldr	r0, [pc, #24]	; (80131c4 <console_set_fg_color+0x38>)
 80131ac:	e7f7      	b.n	801319e <console_set_fg_color+0x12>
 80131ae:	4806      	ldr	r0, [pc, #24]	; (80131c8 <console_set_fg_color+0x3c>)
 80131b0:	e7f5      	b.n	801319e <console_set_fg_color+0x12>
 80131b2:	4806      	ldr	r0, [pc, #24]	; (80131cc <console_set_fg_color+0x40>)
 80131b4:	e7f3      	b.n	801319e <console_set_fg_color+0x12>
 80131b6:	bf00      	nop
 80131b8:	08018072 	stmdaeq	r1, {r1, r4, r5, r6, pc}
 80131bc:	08018078 	stmdaeq	r1, {r3, r4, r5, r6, pc}
 80131c0:	0801807e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, pc}
 80131c4:	08018084 	stmdaeq	r1, {r2, r7, pc}
 80131c8:	08015dde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, sl, fp, ip, lr}
 80131cc:	0801808a 	stmdaeq	r1, {r1, r3, r7, pc}

080131d0 <console_error>:
 80131d0:	b510      	push	{r4, lr}
 80131d2:	4604      	mov	r4, r0
 80131d4:	4805      	ldr	r0, [pc, #20]	; (80131ec <console_error+0x1c>)
 80131d6:	f000 fed7 	bl	8013f88 <uart0_puts>
 80131da:	4620      	mov	r0, r4
 80131dc:	f000 fed4 	bl	8013f88 <uart0_puts>
 80131e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131e4:	4802      	ldr	r0, [pc, #8]	; (80131f0 <console_error+0x20>)
 80131e6:	f000 becf 	b.w	8013f88 <uart0_puts>
 80131ea:	bf00      	nop
 80131ec:	08018078 	stmdaeq	r1, {r3, r4, r5, r6, pc}
 80131f0:	08015dde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, sl, fp, ip, lr}

080131f4 <console_status>:
 80131f4:	b510      	push	{r4, lr}
 80131f6:	460c      	mov	r4, r1
 80131f8:	b280      	uxth	r0, r0
 80131fa:	f7ff ffc7 	bl	801318c <console_set_fg_color>
 80131fe:	4807      	ldr	r0, [pc, #28]	; (801321c <console_status+0x28>)
 8013200:	f000 fec2 	bl	8013f88 <uart0_puts>
 8013204:	4620      	mov	r0, r4
 8013206:	f000 febf 	bl	8013f88 <uart0_puts>
 801320a:	200a      	movs	r0, #10
 801320c:	f7ff ffb0 	bl	8013170 <console_putc>
 8013210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013214:	4802      	ldr	r0, [pc, #8]	; (8013220 <console_status+0x2c>)
 8013216:	f000 beb7 	b.w	8013f88 <uart0_puts>
 801321a:	bf00      	nop
 801321c:	0801806c 	stmdaeq	r1, {r2, r3, r5, r6, pc}
 8013220:	08015dde 	stmdaeq	r1, {r1, r2, r3, r4, r6, r7, r8, sl, fp, ip, lr}

08013224 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)>:
 8013224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013228:	4617      	mov	r7, r2
 801322a:	461e      	mov	r6, r3
 801322c:	4d14      	ldr	r5, [pc, #80]	; (8013280 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x5c>)
 801322e:	4b15      	ldr	r3, [pc, #84]	; (8013284 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x60>)
 8013230:	b086      	sub	sp, #24
 8013232:	6018      	str	r0, [r3, #0]
 8013234:	4604      	mov	r4, r0
 8013236:	f105 0803 	add.w	r8, r5, #3
 801323a:	2203      	movs	r2, #3
 801323c:	4628      	mov	r0, r5
 801323e:	f000 f9ea 	bl	8013616 <memmove>
 8013242:	4639      	mov	r1, r7
 8013244:	220b      	movs	r2, #11
 8013246:	4640      	mov	r0, r8
 8013248:	f000 f9e5 	bl	8013616 <memmove>
 801324c:	f105 030e 	add.w	r3, r5, #14
 8013250:	4631      	mov	r1, r6
 8013252:	2208      	movs	r2, #8
 8013254:	4618      	mov	r0, r3
 8013256:	f000 f9de 	bl	8013616 <memmove>
 801325a:	2308      	movs	r3, #8
 801325c:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8013260:	230b      	movs	r3, #11
 8013262:	9302      	str	r3, [sp, #8]
 8013264:	4b08      	ldr	r3, [pc, #32]	; (8013288 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x64>)
 8013266:	9005      	str	r0, [sp, #20]
 8013268:	e9cd 5300 	strd	r5, r3, [sp]
 801326c:	213f      	movs	r1, #63	; 0x3f
 801326e:	2303      	movs	r3, #3
 8013270:	4a06      	ldr	r2, [pc, #24]	; (801328c <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x68>)
 8013272:	4807      	ldr	r0, [pc, #28]	; (8013290 <FirmwareVersion::FirmwareVersion(char const*, char const*, char const*)+0x6c>)
 8013274:	f000 fd3e 	bl	8013cf4 <snprintf>
 8013278:	4620      	mov	r0, r4
 801327a:	b006      	add	sp, #24
 801327c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013280:	2000a904 	andcs	sl, r0, r4, lsl #18
 8013284:	2000a95c 	andcs	sl, r0, ip, asr r9
 8013288:	08015f25 	stmdaeq	r1, {r0, r2, r5, r8, r9, sl, fp, ip, lr}
 801328c:	08018090 	stmdaeq	r1, {r4, r7, pc}
 8013290:	2000a91a 	andcs	sl, r0, sl, lsl r9

08013294 <FirmwareVersion::Print(char const*)>:
 8013294:	b510      	push	{r4, lr}
 8013296:	460c      	mov	r4, r1
 8013298:	4804      	ldr	r0, [pc, #16]	; (80132ac <FirmwareVersion::Print(char const*)+0x18>)
 801329a:	f000 fd53 	bl	8013d44 <puts>
 801329e:	b124      	cbz	r4, 80132aa <FirmwareVersion::Print(char const*)+0x16>
 80132a0:	4620      	mov	r0, r4
 80132a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132a6:	f000 bd4d 	b.w	8013d44 <puts>
 80132aa:	bd10      	pop	{r4, pc}
 80132ac:	2000a91a 	andcs	sl, r0, sl, lsl r9

080132b0 <LedBlink::LedBlink()>:
 80132b0:	2200      	movs	r2, #0
 80132b2:	2105      	movs	r1, #5
 80132b4:	e9c0 2100 	strd	r2, r1, [r0]
 80132b8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80132bc:	6082      	str	r2, [r0, #8]
 80132be:	e9c0 1203 	strd	r1, r2, [r0, #12]
 80132c2:	6142      	str	r2, [r0, #20]
 80132c4:	4a01      	ldr	r2, [pc, #4]	; (80132cc <LedBlink::LedBlink()+0x1c>)
 80132c6:	6010      	str	r0, [r2, #0]
 80132c8:	4770      	bx	lr
 80132ca:	bf00      	nop
 80132cc:	2000a960 	andcs	sl, r0, r0, ror #18

080132d0 <LedBlink::SetMode(ledblink::Mode)>:
 80132d0:	6843      	ldr	r3, [r0, #4]
 80132d2:	428b      	cmp	r3, r1
 80132d4:	d02f      	beq.n	8013336 <LedBlink::SetMode(ledblink::Mode)+0x66>
 80132d6:	6041      	str	r1, [r0, #4]
 80132d8:	2904      	cmp	r1, #4
 80132da:	d822      	bhi.n	8013322 <LedBlink::SetMode(ledblink::Mode)+0x52>
 80132dc:	e8df f001 	tbb	[pc, r1]
 80132e0:	18120321 	ldmdane	r2, {r0, r5, r8, r9}
 80132e4:	23ff001d 	mvnscs	r0, #29
 80132e8:	6003      	str	r3, [r0, #0]
 80132ea:	2300      	movs	r3, #0
 80132ec:	2201      	movs	r2, #1
 80132ee:	60c3      	str	r3, [r0, #12]
 80132f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80132f4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80132f8:	611a      	str	r2, [r3, #16]
 80132fa:	6880      	ldr	r0, [r0, #8]
 80132fc:	b1d8      	cbz	r0, 8013336 <LedBlink::SetMode(ledblink::Mode)+0x66>
 80132fe:	6803      	ldr	r3, [r0, #0]
 8013300:	689b      	ldr	r3, [r3, #8]
 8013302:	4718      	bx	r3
 8013304:	2301      	movs	r3, #1
 8013306:	6003      	str	r3, [r0, #0]
 8013308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801330c:	60c3      	str	r3, [r0, #12]
 801330e:	e7f4      	b.n	80132fa <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8013310:	2303      	movs	r3, #3
 8013312:	6003      	str	r3, [r0, #0]
 8013314:	f240 134d 	movw	r3, #333	; 0x14d
 8013318:	e7f8      	b.n	801330c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 801331a:	2305      	movs	r3, #5
 801331c:	6003      	str	r3, [r0, #0]
 801331e:	23c8      	movs	r3, #200	; 0xc8
 8013320:	e7f4      	b.n	801330c <LedBlink::SetMode(ledblink::Mode)+0x3c>
 8013322:	2300      	movs	r3, #0
 8013324:	2201      	movs	r2, #1
 8013326:	6003      	str	r3, [r0, #0]
 8013328:	60c3      	str	r3, [r0, #12]
 801332a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801332e:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8013332:	615a      	str	r2, [r3, #20]
 8013334:	e7e1      	b.n	80132fa <LedBlink::SetMode(ledblink::Mode)+0x2a>
 8013336:	4770      	bx	lr

08013338 <Hardware::Hardware()>:
 8013338:	b570      	push	{r4, r5, r6, lr}
 801333a:	2400      	movs	r4, #0
 801333c:	4b24      	ldr	r3, [pc, #144]	; (80133d0 <Hardware::Hardware()+0x98>)
 801333e:	4e25      	ldr	r6, [pc, #148]	; (80133d4 <Hardware::Hardware()+0x9c>)
 8013340:	b090      	sub	sp, #64	; 0x40
 8013342:	4605      	mov	r5, r0
 8013344:	6004      	str	r4, [r0, #0]
 8013346:	7104      	strb	r4, [r0, #4]
 8013348:	6018      	str	r0, [r3, #0]
 801334a:	f240 6004 	movw	r0, #1540	; 0x604
 801334e:	f000 ffe7 	bl	8014320 <rcu_periph_clock_enable>
 8013352:	2203      	movs	r2, #3
 8013354:	2110      	movs	r1, #16
 8013356:	4630      	mov	r0, r6
 8013358:	2301      	movs	r3, #1
 801335a:	f000 ff51 	bl	8014200 <gpio_init>
 801335e:	2301      	movs	r3, #1
 8013360:	6173      	str	r3, [r6, #20]
 8013362:	f000 fde1 	bl	8013f28 <uart0_init>
 8013366:	f5a6 3680 	sub.w	r6, r6, #65536	; 0x10000
 801336a:	f000 fe1d 	bl	8013fa8 <systick_config>
 801336e:	f001 fe7d 	bl	801506c <udelay_init()>
 8013372:	f001 fe79 	bl	8015068 <micros_init()>
 8013376:	f240 7004 	movw	r0, #1796	; 0x704
 801337a:	f000 ffd1 	bl	8014320 <rcu_periph_clock_enable>
 801337e:	4630      	mov	r0, r6
 8013380:	f001 f91a 	bl	80145b8 <timer_deinit>
 8013384:	236b      	movs	r3, #107	; 0x6b
 8013386:	f8ad 300c 	strh.w	r3, [sp, #12]
 801338a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801338e:	a903      	add	r1, sp, #12
 8013390:	4630      	mov	r0, r6
 8013392:	9305      	str	r3, [sp, #20]
 8013394:	f001 f972 	bl	801467c <timer_init>
 8013398:	4630      	mov	r0, r6
 801339a:	f001 f9c7 	bl	801472c <timer_enable>
 801339e:	f001 fb41 	bl	8014a24 <gd32_adc_init()>
 80133a2:	2308      	movs	r3, #8
 80133a4:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80133a8:	237a      	movs	r3, #122	; 0x7a
 80133aa:	a807      	add	r0, sp, #28
 80133ac:	930c      	str	r3, [sp, #48]	; 0x30
 80133ae:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80133b2:	9407      	str	r4, [sp, #28]
 80133b4:	940f      	str	r4, [sp, #60]	; 0x3c
 80133b6:	f000 fd1d 	bl	8013df4 <mktime>
 80133ba:	4621      	mov	r1, r4
 80133bc:	e9cd 0401 	strd	r0, r4, [sp, #4]
 80133c0:	a801      	add	r0, sp, #4
 80133c2:	f000 fd8d 	bl	8013ee0 <settimeofday>
 80133c6:	f001 fb87 	bl	8014ad8 <gd32_i2c_begin()>
 80133ca:	4628      	mov	r0, r5
 80133cc:	b010      	add	sp, #64	; 0x40
 80133ce:	bd70      	pop	{r4, r5, r6, pc}
 80133d0:	2000a964 	andcs	sl, r0, r4, ror #18
 80133d4:	40011000 	andmi	r1, r1, r0

080133d8 <Hardware::GetUuid(unsigned char*)>:
 80133d8:	4a0c      	ldr	r2, [pc, #48]	; (801340c <Hardware::GetUuid(unsigned char*)+0x34>)
 80133da:	b084      	sub	sp, #16
 80133dc:	f8d2 37e8 	ldr.w	r3, [r2, #2024]	; 0x7e8
 80133e0:	9300      	str	r3, [sp, #0]
 80133e2:	f8d2 07ec 	ldr.w	r0, [r2, #2028]	; 0x7ec
 80133e6:	9001      	str	r0, [sp, #4]
 80133e8:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 80133ec:	4403      	add	r3, r0
 80133ee:	4413      	add	r3, r2
 80133f0:	9202      	str	r2, [sp, #8]
 80133f2:	466a      	mov	r2, sp
 80133f4:	9303      	str	r3, [sp, #12]
 80133f6:	1e4b      	subs	r3, r1, #1
 80133f8:	310f      	adds	r1, #15
 80133fa:	428b      	cmp	r3, r1
 80133fc:	d004      	beq.n	8013408 <Hardware::GetUuid(unsigned char*)+0x30>
 80133fe:	f812 0b01 	ldrb.w	r0, [r2], #1
 8013402:	f803 0f01 	strb.w	r0, [r3, #1]!
 8013406:	e7f8      	b.n	80133fa <Hardware::GetUuid(unsigned char*)+0x22>
 8013408:	b004      	add	sp, #16
 801340a:	4770      	bx	lr
 801340c:	1ffff000 	svcne	0x00fff000

08013410 <Hardware::SetTime(tm const*)>:
 8013410:	2000      	movs	r0, #0
 8013412:	4770      	bx	lr

08013414 <Hardware::Reboot()>:
 8013414:	b508      	push	{r3, lr}
 8013416:	6803      	ldr	r3, [r0, #0]
 8013418:	4604      	mov	r4, r0
 801341a:	b153      	cbz	r3, 8013432 <Hardware::Reboot()+0x1e>
 801341c:	2300      	movs	r3, #0
 801341e:	2104      	movs	r1, #4
 8013420:	7103      	strb	r3, [r0, #4]
 8013422:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013426:	f000 fec1 	bl	80141ac <fwdgt_config>
 801342a:	6820      	ldr	r0, [r4, #0]
 801342c:	6803      	ldr	r3, [r0, #0]
 801342e:	689b      	ldr	r3, [r3, #8]
 8013430:	4798      	blx	r3
 8013432:	2102      	movs	r1, #2
 8013434:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013438:	f000 feb8 	bl	80141ac <fwdgt_config>
 801343c:	2801      	cmp	r0, #1
 801343e:	bf0c      	ite	eq
 8013440:	2301      	moveq	r3, #1
 8013442:	2300      	movne	r3, #0
 8013444:	7123      	strb	r3, [r4, #4]
 8013446:	d101      	bne.n	801344c <Hardware::Reboot()+0x38>
 8013448:	f000 fea0 	bl	801418c <fwdgt_enable>
 801344c:	2208      	movs	r2, #8
 801344e:	4b0d      	ldr	r3, [pc, #52]	; (8013484 <Hardware::Reboot()+0x70>)
 8013450:	2501      	movs	r5, #1
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	480c      	ldr	r0, [pc, #48]	; (8013488 <Hardware::Reboot()+0x74>)
 8013456:	601a      	str	r2, [r3, #0]
 8013458:	227d      	movs	r2, #125	; 0x7d
 801345a:	490c      	ldr	r1, [pc, #48]	; (801348c <Hardware::Reboot()+0x78>)
 801345c:	60da      	str	r2, [r3, #12]
 801345e:	68dc      	ldr	r4, [r3, #12]
 8013460:	b904      	cbnz	r4, 8013464 <Hardware::Reboot()+0x50>
 8013462:	e7fe      	b.n	8013462 <Hardware::Reboot()+0x4e>
 8013464:	6802      	ldr	r2, [r0, #0]
 8013466:	695e      	ldr	r6, [r3, #20]
 8013468:	1b92      	subs	r2, r2, r6
 801346a:	4294      	cmp	r4, r2
 801346c:	d8f8      	bhi.n	8013460 <Hardware::Reboot()+0x4c>
 801346e:	6802      	ldr	r2, [r0, #0]
 8013470:	615a      	str	r2, [r3, #20]
 8013472:	691a      	ldr	r2, [r3, #16]
 8013474:	2a01      	cmp	r2, #1
 8013476:	f082 0401 	eor.w	r4, r2, #1
 801347a:	611c      	str	r4, [r3, #16]
 801347c:	bf14      	ite	ne
 801347e:	610d      	strne	r5, [r1, #16]
 8013480:	614a      	streq	r2, [r1, #20]
 8013482:	e7ec      	b.n	801345e <Hardware::Reboot()+0x4a>
 8013484:	2000a960 	andcs	sl, r0, r0, ror #18
 8013488:	2000a97c 	andcs	sl, r0, ip, ror r9
 801348c:	40011000 	andmi	r1, r1, r0

08013490 <operator delete(void*)>:
 8013490:	f000 b890 	b.w	80135b4 <free>

08013494 <operator delete[](void*)>:
 8013494:	f000 b88e 	b.w	80135b4 <free>

08013498 <operator new(unsigned int)>:
 8013498:	f000 b842 	b.w	8013520 <malloc>

0801349c <operator new[](unsigned int)>:
 801349c:	f000 b840 	b.w	8013520 <malloc>

080134a0 <inet_aton>:
 80134a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134a2:	f04f 0c0a 	mov.w	ip, #10
 80134a6:	2500      	movs	r5, #0
 80134a8:	ae01      	add	r6, sp, #4
 80134aa:	4603      	mov	r3, r0
 80134ac:	2200      	movs	r2, #0
 80134ae:	1d07      	adds	r7, r0, #4
 80134b0:	e007      	b.n	80134c2 <inet_aton+0x22>
 80134b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80134b6:	2b09      	cmp	r3, #9
 80134b8:	d820      	bhi.n	80134fc <inet_aton+0x5c>
 80134ba:	4603      	mov	r3, r0
 80134bc:	fb0c 4202 	mla	r2, ip, r2, r4
 80134c0:	3a30      	subs	r2, #48	; 0x30
 80134c2:	4618      	mov	r0, r3
 80134c4:	f810 4b01 	ldrb.w	r4, [r0], #1
 80134c8:	2c2e      	cmp	r4, #46	; 0x2e
 80134ca:	d111      	bne.n	80134f0 <inet_aton+0x50>
 80134cc:	3501      	adds	r5, #1
 80134ce:	2d03      	cmp	r5, #3
 80134d0:	f806 2b01 	strb.w	r2, [r6], #1
 80134d4:	d1e9      	bne.n	80134aa <inet_aton+0xa>
 80134d6:	2200      	movs	r2, #0
 80134d8:	250a      	movs	r5, #10
 80134da:	1d1c      	adds	r4, r3, #4
 80134dc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80134e0:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 80134e4:	d10d      	bne.n	8013502 <inet_aton+0x62>
 80134e6:	f88d 2007 	strb.w	r2, [sp, #7]
 80134ea:	b9b1      	cbnz	r1, 801351a <inet_aton+0x7a>
 80134ec:	2001      	movs	r0, #1
 80134ee:	e006      	b.n	80134fe <inet_aton+0x5e>
 80134f0:	2c00      	cmp	r4, #0
 80134f2:	d0eb      	beq.n	80134cc <inet_aton+0x2c>
 80134f4:	2c0a      	cmp	r4, #10
 80134f6:	d0e9      	beq.n	80134cc <inet_aton+0x2c>
 80134f8:	42b8      	cmp	r0, r7
 80134fa:	d1da      	bne.n	80134b2 <inet_aton+0x12>
 80134fc:	2000      	movs	r0, #0
 80134fe:	b003      	add	sp, #12
 8013500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013502:	280a      	cmp	r0, #10
 8013504:	d0ef      	beq.n	80134e6 <inet_aton+0x46>
 8013506:	42a3      	cmp	r3, r4
 8013508:	d0f8      	beq.n	80134fc <inet_aton+0x5c>
 801350a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
 801350e:	2e09      	cmp	r6, #9
 8013510:	d8f4      	bhi.n	80134fc <inet_aton+0x5c>
 8013512:	fb05 0202 	mla	r2, r5, r2, r0
 8013516:	3a30      	subs	r2, #48	; 0x30
 8013518:	e7e0      	b.n	80134dc <inet_aton+0x3c>
 801351a:	9b01      	ldr	r3, [sp, #4]
 801351c:	600b      	str	r3, [r1, #0]
 801351e:	e7e5      	b.n	80134ec <inet_aton+0x4c>

08013520 <malloc>:
 8013520:	b538      	push	{r3, r4, r5, lr}
 8013522:	4604      	mov	r4, r0
 8013524:	4601      	mov	r1, r0
 8013526:	481c      	ldr	r0, [pc, #112]	; (8013598 <malloc+0x78>)
 8013528:	f000 fbbc 	bl	8013ca4 <printf>
 801352c:	b17c      	cbz	r4, 801354e <malloc+0x2e>
 801352e:	4b1b      	ldr	r3, [pc, #108]	; (801359c <malloc+0x7c>)
 8013530:	6818      	ldr	r0, [r3, #0]
 8013532:	b978      	cbnz	r0, 8013554 <malloc+0x34>
 8013534:	4a1a      	ldr	r2, [pc, #104]	; (80135a0 <malloc+0x80>)
 8013536:	f104 031b 	add.w	r3, r4, #27
 801353a:	6811      	ldr	r1, [r2, #0]
 801353c:	4819      	ldr	r0, [pc, #100]	; (80135a4 <malloc+0x84>)
 801353e:	f023 030f 	bic.w	r3, r3, #15
 8013542:	440b      	add	r3, r1
 8013544:	4283      	cmp	r3, r0
 8013546:	d921      	bls.n	801358c <malloc+0x6c>
 8013548:	4817      	ldr	r0, [pc, #92]	; (80135a8 <malloc+0x88>)
 801354a:	f000 fbab 	bl	8013ca4 <printf>
 801354e:	2500      	movs	r5, #0
 8013550:	4628      	mov	r0, r5
 8013552:	bd38      	pop	{r3, r4, r5, pc}
 8013554:	4284      	cmp	r4, r0
 8013556:	d80a      	bhi.n	801356e <malloc+0x4e>
 8013558:	685a      	ldr	r2, [r3, #4]
 801355a:	6899      	ldr	r1, [r3, #8]
 801355c:	3201      	adds	r2, #1
 801355e:	428a      	cmp	r2, r1
 8013560:	605a      	str	r2, [r3, #4]
 8013562:	d900      	bls.n	8013566 <malloc+0x46>
 8013564:	609a      	str	r2, [r3, #8]
 8013566:	68d9      	ldr	r1, [r3, #12]
 8013568:	b919      	cbnz	r1, 8013572 <malloc+0x52>
 801356a:	4604      	mov	r4, r0
 801356c:	e7e2      	b.n	8013534 <malloc+0x14>
 801356e:	3310      	adds	r3, #16
 8013570:	e7de      	b.n	8013530 <malloc+0x10>
 8013572:	4604      	mov	r4, r0
 8013574:	688a      	ldr	r2, [r1, #8]
 8013576:	60da      	str	r2, [r3, #12]
 8013578:	2300      	movs	r3, #0
 801357a:	f101 050c 	add.w	r5, r1, #12
 801357e:	608b      	str	r3, [r1, #8]
 8013580:	4622      	mov	r2, r4
 8013582:	462b      	mov	r3, r5
 8013584:	4809      	ldr	r0, [pc, #36]	; (80135ac <malloc+0x8c>)
 8013586:	f000 fb8d 	bl	8013ca4 <printf>
 801358a:	e7e1      	b.n	8013550 <malloc+0x30>
 801358c:	6013      	str	r3, [r2, #0]
 801358e:	4b08      	ldr	r3, [pc, #32]	; (80135b0 <malloc+0x90>)
 8013590:	e9c1 3400 	strd	r3, r4, [r1]
 8013594:	e7f0      	b.n	8013578 <malloc+0x58>
 8013596:	bf00      	nop
 8013598:	080180b4 	stmdaeq	r1, {r2, r4, r5, r7, pc}
 801359c:	20000010 	andcs	r0, r0, r0, lsl r0
 80135a0:	2000000c 	andcs	r0, r0, ip
 80135a4:	20016800 	andcs	r6, r1, r0, lsl #16
 80135a8:	080180c0 	stmdaeq	r1, {r6, r7, pc}
 80135ac:	080180dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, pc}
 80135b0:	424c4d43 	submi	r4, ip, #4288	; 0x10c0

080135b4 <free>:
 80135b4:	b538      	push	{r3, r4, r5, lr}
 80135b6:	4604      	mov	r4, r0
 80135b8:	b1c8      	cbz	r0, 80135ee <free+0x3a>
 80135ba:	f1a0 050c 	sub.w	r5, r0, #12
 80135be:	4602      	mov	r2, r0
 80135c0:	4629      	mov	r1, r5
 80135c2:	480c      	ldr	r0, [pc, #48]	; (80135f4 <free+0x40>)
 80135c4:	f000 fb6e 	bl	8013ca4 <printf>
 80135c8:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80135cc:	4b0a      	ldr	r3, [pc, #40]	; (80135f8 <free+0x44>)
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d10d      	bne.n	80135ee <free+0x3a>
 80135d2:	4b0a      	ldr	r3, [pc, #40]	; (80135fc <free+0x48>)
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	b152      	cbz	r2, 80135ee <free+0x3a>
 80135d8:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80135dc:	4291      	cmp	r1, r2
 80135de:	d107      	bne.n	80135f0 <free+0x3c>
 80135e0:	68da      	ldr	r2, [r3, #12]
 80135e2:	f844 2c04 	str.w	r2, [r4, #-4]
 80135e6:	685a      	ldr	r2, [r3, #4]
 80135e8:	60dd      	str	r5, [r3, #12]
 80135ea:	3a01      	subs	r2, #1
 80135ec:	605a      	str	r2, [r3, #4]
 80135ee:	bd38      	pop	{r3, r4, r5, pc}
 80135f0:	3310      	adds	r3, #16
 80135f2:	e7ef      	b.n	80135d4 <free+0x20>
 80135f4:	08018107 	stmdaeq	r1, {r0, r1, r2, r8, pc}
 80135f8:	424c4d43 	submi	r4, ip, #4288	; 0x10c0
 80135fc:	20000010 	andcs	r0, r0, r0, lsl r0

08013600 <memcpy>:
 8013600:	b510      	push	{r4, lr}
 8013602:	1e43      	subs	r3, r0, #1
 8013604:	440a      	add	r2, r1
 8013606:	4291      	cmp	r1, r2
 8013608:	d100      	bne.n	801360c <memcpy+0xc>
 801360a:	bd10      	pop	{r4, pc}
 801360c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013610:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013614:	e7f7      	b.n	8013606 <memcpy+0x6>

08013616 <memmove>:
 8013616:	4288      	cmp	r0, r1
 8013618:	b510      	push	{r4, lr}
 801361a:	eb01 0302 	add.w	r3, r1, r2
 801361e:	d208      	bcs.n	8013632 <memmove+0x1c>
 8013620:	1e42      	subs	r2, r0, #1
 8013622:	4299      	cmp	r1, r3
 8013624:	d100      	bne.n	8013628 <memmove+0x12>
 8013626:	bd10      	pop	{r4, pc}
 8013628:	f811 4b01 	ldrb.w	r4, [r1], #1
 801362c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013630:	e7f7      	b.n	8013622 <memmove+0xc>
 8013632:	4601      	mov	r1, r0
 8013634:	4402      	add	r2, r0
 8013636:	428a      	cmp	r2, r1
 8013638:	d0f5      	beq.n	8013626 <memmove+0x10>
 801363a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801363e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013642:	e7f8      	b.n	8013636 <memmove+0x20>

08013644 <memset>:
 8013644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013646:	b1e2      	cbz	r2, 8013682 <memset+0x3e>
 8013648:	4603      	mov	r3, r0
 801364a:	b2c9      	uxtb	r1, r1
 801364c:	075c      	lsls	r4, r3, #29
 801364e:	d114      	bne.n	801367a <memset+0x36>
 8013650:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
 8013654:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
 8013658:	463d      	mov	r5, r7
 801365a:	f022 0407 	bic.w	r4, r2, #7
 801365e:	08d6      	lsrs	r6, r2, #3
 8013660:	441c      	add	r4, r3
 8013662:	42a3      	cmp	r3, r4
 8013664:	d10e      	bne.n	8013684 <memset+0x40>
 8013666:	f06f 0307 	mvn.w	r3, #7
 801366a:	fb03 2206 	mla	r2, r3, r6, r2
 801366e:	4422      	add	r2, r4
 8013670:	4294      	cmp	r4, r2
 8013672:	d006      	beq.n	8013682 <memset+0x3e>
 8013674:	f804 1b01 	strb.w	r1, [r4], #1
 8013678:	e7fa      	b.n	8013670 <memset+0x2c>
 801367a:	3a01      	subs	r2, #1
 801367c:	f803 1b01 	strb.w	r1, [r3], #1
 8013680:	d1e4      	bne.n	801364c <memset+0x8>
 8013682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013684:	f843 7b08 	str.w	r7, [r3], #8
 8013688:	f843 5c04 	str.w	r5, [r3, #-4]
 801368c:	e7e9      	b.n	8013662 <memset+0x1e>

0801368e <_itostr>:
 801368e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013690:	0fc7      	lsrs	r7, r0, #31
 8013692:	b091      	sub	sp, #68	; 0x44
 8013694:	bf18      	it	ne
 8013696:	4240      	negne	r0, r0
 8013698:	f10d 043f 	add.w	r4, sp, #63	; 0x3f
 801369c:	b9c8      	cbnz	r0, 80136d2 <_itostr+0x44>
 801369e:	2330      	movs	r3, #48	; 0x30
 80136a0:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 80136a4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 80136a8:	b132      	cbz	r2, 80136b8 <_itostr+0x2a>
 80136aa:	4668      	mov	r0, sp
 80136ac:	2530      	movs	r5, #48	; 0x30
 80136ae:	1ae6      	subs	r6, r4, r3
 80136b0:	4296      	cmp	r6, r2
 80136b2:	da01      	bge.n	80136b8 <_itostr+0x2a>
 80136b4:	4283      	cmp	r3, r0
 80136b6:	d81c      	bhi.n	80136f2 <_itostr+0x64>
 80136b8:	b117      	cbz	r7, 80136c0 <_itostr+0x32>
 80136ba:	222d      	movs	r2, #45	; 0x2d
 80136bc:	f803 2901 	strb.w	r2, [r3], #-1
 80136c0:	3301      	adds	r3, #1
 80136c2:	1ae0      	subs	r0, r4, r3
 80136c4:	3901      	subs	r1, #1
 80136c6:	aa10      	add	r2, sp, #64	; 0x40
 80136c8:	4293      	cmp	r3, r2
 80136ca:	d315      	bcc.n	80136f8 <_itostr+0x6a>
 80136cc:	3001      	adds	r0, #1
 80136ce:	b011      	add	sp, #68	; 0x44
 80136d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136d2:	4623      	mov	r3, r4
 80136d4:	250a      	movs	r5, #10
 80136d6:	46ec      	mov	ip, sp
 80136d8:	fb90 f6f5 	sdiv	r6, r0, r5
 80136dc:	fb05 0016 	mls	r0, r5, r6, r0
 80136e0:	3030      	adds	r0, #48	; 0x30
 80136e2:	f803 0901 	strb.w	r0, [r3], #-1
 80136e6:	4630      	mov	r0, r6
 80136e8:	2e00      	cmp	r6, #0
 80136ea:	d0dd      	beq.n	80136a8 <_itostr+0x1a>
 80136ec:	4563      	cmp	r3, ip
 80136ee:	d1f3      	bne.n	80136d8 <_itostr+0x4a>
 80136f0:	e7da      	b.n	80136a8 <_itostr+0x1a>
 80136f2:	f803 5901 	strb.w	r5, [r3], #-1
 80136f6:	e7da      	b.n	80136ae <_itostr+0x20>
 80136f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136fc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013700:	e7e1      	b.n	80136c6 <_itostr+0x38>
	...

08013704 <_xputch>:
 8013704:	4603      	mov	r3, r0
 8013706:	b410      	push	{r4}
 8013708:	4c08      	ldr	r4, [pc, #32]	; (801372c <_xputch+0x28>)
 801370a:	68da      	ldr	r2, [r3, #12]
 801370c:	4608      	mov	r0, r1
 801370e:	6821      	ldr	r1, [r4, #0]
 8013710:	3201      	adds	r2, #1
 8013712:	60da      	str	r2, [r3, #12]
 8013714:	b139      	cbz	r1, 8013726 <_xputch+0x22>
 8013716:	691b      	ldr	r3, [r3, #16]
 8013718:	429a      	cmp	r2, r3
 801371a:	da02      	bge.n	8013722 <_xputch+0x1e>
 801371c:	1c4b      	adds	r3, r1, #1
 801371e:	6023      	str	r3, [r4, #0]
 8013720:	7008      	strb	r0, [r1, #0]
 8013722:	bc10      	pop	{r4}
 8013724:	4770      	bx	lr
 8013726:	bc10      	pop	{r4}
 8013728:	f7ff bd22 	b.w	8013170 <console_putc>
 801372c:	2000a968 	andcs	sl, r0, r8, ror #18

08013730 <_format_int>:
 8013730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013734:	461f      	mov	r7, r3
 8013736:	b091      	sub	sp, #68	; 0x44
 8013738:	ea52 0307 	orrs.w	r3, r2, r7
 801373c:	4680      	mov	r8, r0
 801373e:	4616      	mov	r6, r2
 8013740:	f10d 053f 	add.w	r5, sp, #63	; 0x3f
 8013744:	d138      	bne.n	80137b8 <_format_int+0x88>
 8013746:	2330      	movs	r3, #48	; 0x30
 8013748:	f10d 043e 	add.w	r4, sp, #62	; 0x3e
 801374c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8013750:	f8d8 3000 	ldr.w	r3, [r8]
 8013754:	07d8      	lsls	r0, r3, #31
 8013756:	d508      	bpl.n	801376a <_format_int+0x3a>
 8013758:	466a      	mov	r2, sp
 801375a:	2030      	movs	r0, #48	; 0x30
 801375c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013760:	1b2e      	subs	r6, r5, r4
 8013762:	428e      	cmp	r6, r1
 8013764:	da01      	bge.n	801376a <_format_int+0x3a>
 8013766:	4294      	cmp	r4, r2
 8013768:	d843      	bhi.n	80137f2 <_format_int+0xc2>
 801376a:	0699      	lsls	r1, r3, #26
 801376c:	d508      	bpl.n	8013780 <_format_int+0x50>
 801376e:	466a      	mov	r2, sp
 8013770:	2030      	movs	r0, #48	; 0x30
 8013772:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013776:	1b2e      	subs	r6, r5, r4
 8013778:	428e      	cmp	r6, r1
 801377a:	da01      	bge.n	8013780 <_format_int+0x50>
 801377c:	4294      	cmp	r4, r2
 801377e:	d83b      	bhi.n	80137f8 <_format_int+0xc8>
 8013780:	071a      	lsls	r2, r3, #28
 8013782:	bf44      	itt	mi
 8013784:	222d      	movmi	r2, #45	; 0x2d
 8013786:	f804 2901 	strbmi.w	r2, [r4], #-1
 801378a:	065b      	lsls	r3, r3, #25
 801378c:	d408      	bmi.n	80137a0 <_format_int+0x70>
 801378e:	466b      	mov	r3, sp
 8013790:	2120      	movs	r1, #32
 8013792:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8013796:	1b28      	subs	r0, r5, r4
 8013798:	4290      	cmp	r0, r2
 801379a:	da01      	bge.n	80137a0 <_format_int+0x70>
 801379c:	429c      	cmp	r4, r3
 801379e:	d82e      	bhi.n	80137fe <_format_int+0xce>
 80137a0:	1b2d      	subs	r5, r5, r4
 80137a2:	3401      	adds	r4, #1
 80137a4:	ab10      	add	r3, sp, #64	; 0x40
 80137a6:	429c      	cmp	r4, r3
 80137a8:	d32c      	bcc.n	8013804 <_format_int+0xd4>
 80137aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80137ae:	42ab      	cmp	r3, r5
 80137b0:	dc2e      	bgt.n	8013810 <_format_int+0xe0>
 80137b2:	b011      	add	sp, #68	; 0x44
 80137b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b8:	462c      	mov	r4, r5
 80137ba:	46eb      	mov	fp, sp
 80137bc:	4630      	mov	r0, r6
 80137be:	4639      	mov	r1, r7
 80137c0:	220a      	movs	r2, #10
 80137c2:	2300      	movs	r3, #0
 80137c4:	f7f4 f9ca 	bl	8007b5c <__aeabi_uldivmod>
 80137c8:	46b2      	mov	sl, r6
 80137ca:	3230      	adds	r2, #48	; 0x30
 80137cc:	46b9      	mov	r9, r7
 80137ce:	2300      	movs	r3, #0
 80137d0:	4630      	mov	r0, r6
 80137d2:	4639      	mov	r1, r7
 80137d4:	f804 2901 	strb.w	r2, [r4], #-1
 80137d8:	220a      	movs	r2, #10
 80137da:	f7f4 f9bf 	bl	8007b5c <__aeabi_uldivmod>
 80137de:	f1ba 0f0a 	cmp.w	sl, #10
 80137e2:	f179 0300 	sbcs.w	r3, r9, #0
 80137e6:	4606      	mov	r6, r0
 80137e8:	460f      	mov	r7, r1
 80137ea:	d3b1      	bcc.n	8013750 <_format_int+0x20>
 80137ec:	455c      	cmp	r4, fp
 80137ee:	d1e5      	bne.n	80137bc <_format_int+0x8c>
 80137f0:	e7ae      	b.n	8013750 <_format_int+0x20>
 80137f2:	f804 0901 	strb.w	r0, [r4], #-1
 80137f6:	e7b3      	b.n	8013760 <_format_int+0x30>
 80137f8:	f804 0901 	strb.w	r0, [r4], #-1
 80137fc:	e7bb      	b.n	8013776 <_format_int+0x46>
 80137fe:	f804 1901 	strb.w	r1, [r4], #-1
 8013802:	e7c8      	b.n	8013796 <_format_int+0x66>
 8013804:	4640      	mov	r0, r8
 8013806:	f814 1b01 	ldrb.w	r1, [r4], #1
 801380a:	f7ff ff7b 	bl	8013704 <_xputch>
 801380e:	e7c9      	b.n	80137a4 <_format_int+0x74>
 8013810:	2120      	movs	r1, #32
 8013812:	4640      	mov	r0, r8
 8013814:	f7ff ff76 	bl	8013704 <_xputch>
 8013818:	3501      	adds	r5, #1
 801381a:	e7c6      	b.n	80137aa <_format_int+0x7a>

0801381c <_format_hex>:
 801381c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801381e:	b091      	sub	sp, #68	; 0x44
 8013820:	4606      	mov	r6, r0
 8013822:	6804      	ldr	r4, [r0, #0]
 8013824:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8013828:	bb61      	cbnz	r1, 8013884 <_format_hex+0x68>
 801382a:	2330      	movs	r3, #48	; 0x30
 801382c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8013830:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8013834:	07e5      	lsls	r5, r4, #31
 8013836:	d507      	bpl.n	8013848 <_format_hex+0x2c>
 8013838:	4669      	mov	r1, sp
 801383a:	2530      	movs	r5, #48	; 0x30
 801383c:	6870      	ldr	r0, [r6, #4]
 801383e:	1ad7      	subs	r7, r2, r3
 8013840:	4287      	cmp	r7, r0
 8013842:	da01      	bge.n	8013848 <_format_hex+0x2c>
 8013844:	428b      	cmp	r3, r1
 8013846:	d831      	bhi.n	80138ac <_format_hex+0x90>
 8013848:	06a0      	lsls	r0, r4, #26
 801384a:	d507      	bpl.n	801385c <_format_hex+0x40>
 801384c:	4669      	mov	r1, sp
 801384e:	2530      	movs	r5, #48	; 0x30
 8013850:	68b0      	ldr	r0, [r6, #8]
 8013852:	1ad7      	subs	r7, r2, r3
 8013854:	4287      	cmp	r7, r0
 8013856:	da01      	bge.n	801385c <_format_hex+0x40>
 8013858:	428b      	cmp	r3, r1
 801385a:	d82a      	bhi.n	80138b2 <_format_hex+0x96>
 801385c:	0661      	lsls	r1, r4, #25
 801385e:	d407      	bmi.n	8013870 <_format_hex+0x54>
 8013860:	4669      	mov	r1, sp
 8013862:	2420      	movs	r4, #32
 8013864:	68b0      	ldr	r0, [r6, #8]
 8013866:	1ad5      	subs	r5, r2, r3
 8013868:	4285      	cmp	r5, r0
 801386a:	da01      	bge.n	8013870 <_format_hex+0x54>
 801386c:	428b      	cmp	r3, r1
 801386e:	d823      	bhi.n	80138b8 <_format_hex+0x9c>
 8013870:	1ad5      	subs	r5, r2, r3
 8013872:	1c5c      	adds	r4, r3, #1
 8013874:	ab10      	add	r3, sp, #64	; 0x40
 8013876:	429c      	cmp	r4, r3
 8013878:	d321      	bcc.n	80138be <_format_hex+0xa2>
 801387a:	68b3      	ldr	r3, [r6, #8]
 801387c:	429d      	cmp	r5, r3
 801387e:	db24      	blt.n	80138ca <_format_hex+0xae>
 8013880:	b011      	add	sp, #68	; 0x44
 8013882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013884:	f014 0f02 	tst.w	r4, #2
 8013888:	bf0c      	ite	eq
 801388a:	2757      	moveq	r7, #87	; 0x57
 801388c:	2737      	movne	r7, #55	; 0x37
 801388e:	4613      	mov	r3, r2
 8013890:	466d      	mov	r5, sp
 8013892:	f001 000f 	and.w	r0, r1, #15
 8013896:	2809      	cmp	r0, #9
 8013898:	bf94      	ite	ls
 801389a:	3030      	addls	r0, #48	; 0x30
 801389c:	19c0      	addhi	r0, r0, r7
 801389e:	0909      	lsrs	r1, r1, #4
 80138a0:	f803 0901 	strb.w	r0, [r3], #-1
 80138a4:	d0c6      	beq.n	8013834 <_format_hex+0x18>
 80138a6:	42ab      	cmp	r3, r5
 80138a8:	d1f3      	bne.n	8013892 <_format_hex+0x76>
 80138aa:	e7c3      	b.n	8013834 <_format_hex+0x18>
 80138ac:	f803 5901 	strb.w	r5, [r3], #-1
 80138b0:	e7c5      	b.n	801383e <_format_hex+0x22>
 80138b2:	f803 5901 	strb.w	r5, [r3], #-1
 80138b6:	e7cc      	b.n	8013852 <_format_hex+0x36>
 80138b8:	f803 4901 	strb.w	r4, [r3], #-1
 80138bc:	e7d3      	b.n	8013866 <_format_hex+0x4a>
 80138be:	4630      	mov	r0, r6
 80138c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138c4:	f7ff ff1e 	bl	8013704 <_xputch>
 80138c8:	e7d4      	b.n	8013874 <_format_hex+0x58>
 80138ca:	2120      	movs	r1, #32
 80138cc:	4630      	mov	r0, r6
 80138ce:	f7ff ff19 	bl	8013704 <_xputch>
 80138d2:	3501      	adds	r5, #1
 80138d4:	e7d1      	b.n	801387a <_format_hex+0x5e>
	...

080138d8 <_vprintf>:
 80138d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138dc:	4614      	mov	r4, r2
 80138de:	2200      	movs	r2, #0
 80138e0:	460b      	mov	r3, r1
 80138e2:	2700      	movs	r7, #0
 80138e4:	b099      	sub	sp, #100	; 0x64
 80138e6:	e9cd 2006 	strd	r2, r0, [sp, #24]
 80138ea:	ae08      	add	r6, sp, #32
 80138ec:	7819      	ldrb	r1, [r3, #0]
 80138ee:	b919      	cbnz	r1, 80138f8 <_vprintf+0x20>
 80138f0:	9806      	ldr	r0, [sp, #24]
 80138f2:	b019      	add	sp, #100	; 0x64
 80138f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138f8:	2925      	cmp	r1, #37	; 0x25
 80138fa:	f103 0501 	add.w	r5, r3, #1
 80138fe:	d004      	beq.n	801390a <_vprintf+0x32>
 8013900:	a803      	add	r0, sp, #12
 8013902:	f7ff feff 	bl	8013704 <_xputch>
 8013906:	462b      	mov	r3, r5
 8013908:	e7f0      	b.n	80138ec <_vprintf+0x14>
 801390a:	2200      	movs	r2, #0
 801390c:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8013910:	9205      	str	r2, [sp, #20]
 8013912:	785a      	ldrb	r2, [r3, #1]
 8013914:	2a30      	cmp	r2, #48	; 0x30
 8013916:	d12b      	bne.n	8013970 <_vprintf+0x98>
 8013918:	2220      	movs	r2, #32
 801391a:	9203      	str	r2, [sp, #12]
 801391c:	1c9d      	adds	r5, r3, #2
 801391e:	2200      	movs	r2, #0
 8013920:	46ac      	mov	ip, r5
 8013922:	4613      	mov	r3, r2
 8013924:	f04f 0e0a 	mov.w	lr, #10
 8013928:	f89c 1000 	ldrb.w	r1, [ip]
 801392c:	4665      	mov	r5, ip
 801392e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8013932:	2809      	cmp	r0, #9
 8013934:	f10c 0c01 	add.w	ip, ip, #1
 8013938:	d91e      	bls.n	8013978 <_vprintf+0xa0>
 801393a:	b12a      	cbz	r2, 8013948 <_vprintf+0x70>
 801393c:	9305      	str	r3, [sp, #20]
 801393e:	b11b      	cbz	r3, 8013948 <_vprintf+0x70>
 8013940:	9b03      	ldr	r3, [sp, #12]
 8013942:	f043 0310 	orr.w	r3, r3, #16
 8013946:	9303      	str	r3, [sp, #12]
 8013948:	292e      	cmp	r1, #46	; 0x2e
 801394a:	d124      	bne.n	8013996 <_vprintf+0xbe>
 801394c:	786b      	ldrb	r3, [r5, #1]
 801394e:	2b2a      	cmp	r3, #42	; 0x2a
 8013950:	d016      	beq.n	8013980 <_vprintf+0xa8>
 8013952:	2100      	movs	r1, #0
 8013954:	f04f 0c0a 	mov.w	ip, #10
 8013958:	460a      	mov	r2, r1
 801395a:	1c68      	adds	r0, r5, #1
 801395c:	7803      	ldrb	r3, [r0, #0]
 801395e:	4605      	mov	r5, r0
 8013960:	3b30      	subs	r3, #48	; 0x30
 8013962:	2b09      	cmp	r3, #9
 8013964:	f100 0001 	add.w	r0, r0, #1
 8013968:	d958      	bls.n	8013a1c <_vprintf+0x144>
 801396a:	b181      	cbz	r1, 801398e <_vprintf+0xb6>
 801396c:	9204      	str	r2, [sp, #16]
 801396e:	e00e      	b.n	801398e <_vprintf+0xb6>
 8013970:	2a2d      	cmp	r2, #45	; 0x2d
 8013972:	d1d4      	bne.n	801391e <_vprintf+0x46>
 8013974:	2240      	movs	r2, #64	; 0x40
 8013976:	e7d0      	b.n	801391a <_vprintf+0x42>
 8013978:	2201      	movs	r2, #1
 801397a:	fb0e 0303 	mla	r3, lr, r3, r0
 801397e:	e7d3      	b.n	8013928 <_vprintf+0x50>
 8013980:	f854 3b04 	ldr.w	r3, [r4], #4
 8013984:	3502      	adds	r5, #2
 8013986:	2b00      	cmp	r3, #0
 8013988:	bfb8      	it	lt
 801398a:	425b      	neglt	r3, r3
 801398c:	9304      	str	r3, [sp, #16]
 801398e:	9b03      	ldr	r3, [sp, #12]
 8013990:	f043 0301 	orr.w	r3, r3, #1
 8013994:	9303      	str	r3, [sp, #12]
 8013996:	782b      	ldrb	r3, [r5, #0]
 8013998:	2b6c      	cmp	r3, #108	; 0x6c
 801399a:	bf04      	itt	eq
 801399c:	9b03      	ldreq	r3, [sp, #12]
 801399e:	3501      	addeq	r5, #1
 80139a0:	7829      	ldrb	r1, [r5, #0]
 80139a2:	bf04      	itt	eq
 80139a4:	f043 0304 	orreq.w	r3, r3, #4
 80139a8:	9303      	streq	r3, [sp, #12]
 80139aa:	2958      	cmp	r1, #88	; 0x58
 80139ac:	f000 8173 	beq.w	8013c96 <_vprintf+0x3be>
 80139b0:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 80139b4:	b2da      	uxtb	r2, r3
 80139b6:	2a15      	cmp	r2, #21
 80139b8:	d8a2      	bhi.n	8013900 <_vprintf+0x28>
 80139ba:	2b15      	cmp	r3, #21
 80139bc:	d8a0      	bhi.n	8013900 <_vprintf+0x28>
 80139be:	a201      	add	r2, pc, #4	; (adr r2, 80139c4 <_vprintf+0xec>)
 80139c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139c4:	08013a25 	stmdaeq	r1, {r0, r2, r5, r9, fp, ip, sp}
 80139c8:	08013a33 	stmdaeq	r1, {r0, r1, r4, r5, r9, fp, ip, sp}
 80139cc:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 80139d0:	08013a67 	stmdaeq	r1, {r0, r1, r2, r5, r6, r9, fp, ip, sp}
 80139d4:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 80139d8:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 80139dc:	08013a33 	stmdaeq	r1, {r0, r1, r4, r5, r9, fp, ip, sp}
 80139e0:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 80139e4:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 80139e8:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 80139ec:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 80139f0:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 80139f4:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 80139f8:	08013bd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, r8, r9, fp, ip, sp}
 80139fc:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 8013a00:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 8013a04:	08013bff 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, fp, ip, sp}
 8013a08:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 8013a0c:	08013c79 	stmdaeq	r1, {r0, r3, r4, r5, r6, sl, fp, ip, sp}
 8013a10:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 8013a14:	08013901 	stmdaeq	r1, {r0, r8, fp, ip, sp}
 8013a18:	08013c9f 	stmdaeq	r1, {r0, r1, r2, r3, r4, r7, sl, fp, ip, sp}
 8013a1c:	2101      	movs	r1, #1
 8013a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a22:	e79b      	b.n	801395c <_vprintf+0x84>
 8013a24:	f854 1b04 	ldr.w	r1, [r4], #4
 8013a28:	a803      	add	r0, sp, #12
 8013a2a:	f7ff fe6b 	bl	8013704 <_xputch>
 8013a2e:	3501      	adds	r5, #1
 8013a30:	e769      	b.n	8013906 <_vprintf+0x2e>
 8013a32:	9903      	ldr	r1, [sp, #12]
 8013a34:	074a      	lsls	r2, r1, #29
 8013a36:	bf43      	ittte	mi
 8013a38:	3407      	addmi	r4, #7
 8013a3a:	f024 0307 	bicmi.w	r3, r4, #7
 8013a3e:	461c      	movmi	r4, r3
 8013a40:	f854 2b04 	ldrpl.w	r2, [r4], #4
 8013a44:	bf4a      	itet	mi
 8013a46:	685b      	ldrmi	r3, [r3, #4]
 8013a48:	17d3      	asrpl	r3, r2, #31
 8013a4a:	f854 2b08 	ldrmi.w	r2, [r4], #8
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	da05      	bge.n	8013a5e <_vprintf+0x186>
 8013a52:	f041 0108 	orr.w	r1, r1, #8
 8013a56:	4252      	negs	r2, r2
 8013a58:	9103      	str	r1, [sp, #12]
 8013a5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8013a5e:	a803      	add	r0, sp, #12
 8013a60:	f7ff fe66 	bl	8013730 <_format_int>
 8013a64:	e7e3      	b.n	8013a2e <_vprintf+0x156>
 8013a66:	3407      	adds	r4, #7
 8013a68:	f024 0407 	bic.w	r4, r4, #7
 8013a6c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013a70:	f7f3 fd2a 	bl	80074c8 <__aeabi_d2f>
 8013a74:	9b03      	ldr	r3, [sp, #12]
 8013a76:	4639      	mov	r1, r7
 8013a78:	07db      	lsls	r3, r3, #31
 8013a7a:	bf54      	ite	pl
 8013a7c:	f04f 0a06 	movpl.w	sl, #6
 8013a80:	f8dd a010 	ldrmi.w	sl, [sp, #16]
 8013a84:	4681      	mov	r9, r0
 8013a86:	f7f4 f81b 	bl	8007ac0 <__aeabi_fcmplt>
 8013a8a:	2800      	cmp	r0, #0
 8013a8c:	d069      	beq.n	8013b62 <_vprintf+0x28a>
 8013a8e:	232d      	movs	r3, #45	; 0x2d
 8013a90:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000
 8013a94:	f88d 3020 	strb.w	r3, [sp, #32]
 8013a98:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
 8013a9c:	4648      	mov	r0, r9
 8013a9e:	f7f4 f837 	bl	8007b10 <__aeabi_f2iz>
 8013aa2:	4659      	mov	r1, fp
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	4680      	mov	r8, r0
 8013aa8:	f7ff fdf1 	bl	801368e <_itostr>
 8013aac:	eb0b 0200 	add.w	r2, fp, r0
 8013ab0:	e9cd 2000 	strd	r2, r0, [sp]
 8013ab4:	4640      	mov	r0, r8
 8013ab6:	f7f3 fe11 	bl	80076dc <__aeabi_i2f>
 8013aba:	4601      	mov	r1, r0
 8013abc:	4648      	mov	r0, r9
 8013abe:	f7f3 fd57 	bl	8007570 <__aeabi_fsub>
 8013ac2:	222e      	movs	r2, #46	; 0x2e
 8013ac4:	4601      	mov	r1, r0
 8013ac6:	200a      	movs	r0, #10
 8013ac8:	9b00      	ldr	r3, [sp, #0]
 8013aca:	f10a 0901 	add.w	r9, sl, #1
 8013ace:	f103 0801 	add.w	r8, r3, #1
 8013ad2:	9b01      	ldr	r3, [sp, #4]
 8013ad4:	f80b 2003 	strb.w	r2, [fp, r3]
 8013ad8:	4603      	mov	r3, r0
 8013ada:	f1ba 0f00 	cmp.w	sl, #0
 8013ade:	dc42      	bgt.n	8013b66 <_vprintf+0x28e>
 8013ae0:	9100      	str	r1, [sp, #0]
 8013ae2:	f7f3 fdfb 	bl	80076dc <__aeabi_i2f>
 8013ae6:	9900      	ldr	r1, [sp, #0]
 8013ae8:	f7f3 fe4c 	bl	8007784 <__aeabi_fmul>
 8013aec:	f7f4 f810 	bl	8007b10 <__aeabi_f2iz>
 8013af0:	4641      	mov	r1, r8
 8013af2:	464a      	mov	r2, r9
 8013af4:	f7ff fdcb 	bl	801368e <_itostr>
 8013af8:	4480      	add	r8, r0
 8013afa:	eba8 0806 	sub.w	r8, r8, r6
 8013afe:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8013b02:	5c73      	ldrb	r3, [r6, r1]
 8013b04:	1872      	adds	r2, r6, r1
 8013b06:	2b34      	cmp	r3, #52	; 0x34
 8013b08:	d910      	bls.n	8013b2c <_vprintf+0x254>
 8013b0a:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8013b0e:	1e53      	subs	r3, r2, #1
 8013b10:	282e      	cmp	r0, #46	; 0x2e
 8013b12:	d02f      	beq.n	8013b74 <_vprintf+0x29c>
 8013b14:	469c      	mov	ip, r3
 8013b16:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8013b1a:	4663      	mov	r3, ip
 8013b1c:	f81c 0901 	ldrb.w	r0, [ip], #-1
 8013b20:	2839      	cmp	r0, #57	; 0x39
 8013b22:	d024      	beq.n	8013b6e <_vprintf+0x296>
 8013b24:	282e      	cmp	r0, #46	; 0x2e
 8013b26:	d025      	beq.n	8013b74 <_vprintf+0x29c>
 8013b28:	3001      	adds	r0, #1
 8013b2a:	7018      	strb	r0, [r3, #0]
 8013b2c:	f101 0360 	add.w	r3, r1, #96	; 0x60
 8013b30:	446b      	add	r3, sp
 8013b32:	f813 3c41 	ldrb.w	r3, [r3, #-65]
 8013b36:	2b2e      	cmp	r3, #46	; 0x2e
 8013b38:	bf08      	it	eq
 8013b3a:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 8013b3e:	4688      	mov	r8, r1
 8013b40:	4689      	mov	r9, r1
 8013b42:	9b05      	ldr	r3, [sp, #20]
 8013b44:	454b      	cmp	r3, r9
 8013b46:	dc40      	bgt.n	8013bca <_vprintf+0x2f2>
 8013b48:	46b1      	mov	r9, r6
 8013b4a:	f1b8 0f00 	cmp.w	r8, #0
 8013b4e:	f77f af6e 	ble.w	8013a2e <_vprintf+0x156>
 8013b52:	f819 1b01 	ldrb.w	r1, [r9], #1
 8013b56:	a803      	add	r0, sp, #12
 8013b58:	f7ff fdd4 	bl	8013704 <_xputch>
 8013b5c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8013b60:	e7f3      	b.n	8013b4a <_vprintf+0x272>
 8013b62:	46b3      	mov	fp, r6
 8013b64:	e79a      	b.n	8013a9c <_vprintf+0x1c4>
 8013b66:	4358      	muls	r0, r3
 8013b68:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8013b6c:	e7b5      	b.n	8013ada <_vprintf+0x202>
 8013b6e:	f88c e001 	strb.w	lr, [ip, #1]
 8013b72:	e7d2      	b.n	8013b1a <_vprintf+0x242>
 8013b74:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8013b78:	3b01      	subs	r3, #1
 8013b7a:	7818      	ldrb	r0, [r3, #0]
 8013b7c:	2839      	cmp	r0, #57	; 0x39
 8013b7e:	d112      	bne.n	8013ba6 <_vprintf+0x2ce>
 8013b80:	42b3      	cmp	r3, r6
 8013b82:	d20d      	bcs.n	8013ba0 <_vprintf+0x2c8>
 8013b84:	1c98      	adds	r0, r3, #2
 8013b86:	1c59      	adds	r1, r3, #1
 8013b88:	4281      	cmp	r1, r0
 8013b8a:	eba2 0203 	sub.w	r2, r2, r3
 8013b8e:	d913      	bls.n	8013bb8 <_vprintf+0x2e0>
 8013b90:	3201      	adds	r2, #1
 8013b92:	441a      	add	r2, r3
 8013b94:	428a      	cmp	r2, r1
 8013b96:	d10b      	bne.n	8013bb0 <_vprintf+0x2d8>
 8013b98:	2231      	movs	r2, #49	; 0x31
 8013b9a:	4641      	mov	r1, r8
 8013b9c:	705a      	strb	r2, [r3, #1]
 8013b9e:	e7c5      	b.n	8013b2c <_vprintf+0x254>
 8013ba0:	f803 c901 	strb.w	ip, [r3], #-1
 8013ba4:	e7e9      	b.n	8013b7a <_vprintf+0x2a2>
 8013ba6:	42b3      	cmp	r3, r6
 8013ba8:	d3ec      	bcc.n	8013b84 <_vprintf+0x2ac>
 8013baa:	282d      	cmp	r0, #45	; 0x2d
 8013bac:	d0ea      	beq.n	8013b84 <_vprintf+0x2ac>
 8013bae:	e7bb      	b.n	8013b28 <_vprintf+0x250>
 8013bb0:	f811 0b01 	ldrb.w	r0, [r1], #1
 8013bb4:	7008      	strb	r0, [r1, #0]
 8013bb6:	e7ed      	b.n	8013b94 <_vprintf+0x2bc>
 8013bb8:	4411      	add	r1, r2
 8013bba:	4402      	add	r2, r0
 8013bbc:	4290      	cmp	r0, r2
 8013bbe:	d0eb      	beq.n	8013b98 <_vprintf+0x2c0>
 8013bc0:	f811 cd01 	ldrb.w	ip, [r1, #-1]!
 8013bc4:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8013bc8:	e7f8      	b.n	8013bbc <_vprintf+0x2e4>
 8013bca:	2120      	movs	r1, #32
 8013bcc:	a803      	add	r0, sp, #12
 8013bce:	f7ff fd99 	bl	8013704 <_xputch>
 8013bd2:	f109 0901 	add.w	r9, r9, #1
 8013bd6:	e7b4      	b.n	8013b42 <_vprintf+0x26a>
 8013bd8:	2308      	movs	r3, #8
 8013bda:	9305      	str	r3, [sp, #20]
 8013bdc:	2320      	movs	r3, #32
 8013bde:	2130      	movs	r1, #48	; 0x30
 8013be0:	f854 8b04 	ldr.w	r8, [r4], #4
 8013be4:	a803      	add	r0, sp, #12
 8013be6:	9303      	str	r3, [sp, #12]
 8013be8:	f7ff fd8c 	bl	8013704 <_xputch>
 8013bec:	2178      	movs	r1, #120	; 0x78
 8013bee:	a803      	add	r0, sp, #12
 8013bf0:	f7ff fd88 	bl	8013704 <_xputch>
 8013bf4:	4641      	mov	r1, r8
 8013bf6:	a803      	add	r0, sp, #12
 8013bf8:	f7ff fe10 	bl	801381c <_format_hex>
 8013bfc:	e717      	b.n	8013a2e <_vprintf+0x156>
 8013bfe:	f04f 0800 	mov.w	r8, #0
 8013c02:	f854 9b04 	ldr.w	r9, [r4], #4
 8013c06:	f819 3008 	ldrb.w	r3, [r9, r8]
 8013c0a:	b993      	cbnz	r3, 8013c32 <_vprintf+0x35a>
 8013c0c:	9b03      	ldr	r3, [sp, #12]
 8013c0e:	07d9      	lsls	r1, r3, #31
 8013c10:	d503      	bpl.n	8013c1a <_vprintf+0x342>
 8013c12:	9b04      	ldr	r3, [sp, #16]
 8013c14:	4598      	cmp	r8, r3
 8013c16:	bfa8      	it	ge
 8013c18:	4698      	movge	r8, r3
 8013c1a:	9b03      	ldr	r3, [sp, #12]
 8013c1c:	f108 0a01 	add.w	sl, r8, #1
 8013c20:	065a      	lsls	r2, r3, #25
 8013c22:	d403      	bmi.n	8013c2c <_vprintf+0x354>
 8013c24:	9b05      	ldr	r3, [sp, #20]
 8013c26:	4598      	cmp	r8, r3
 8013c28:	db06      	blt.n	8013c38 <_vprintf+0x360>
 8013c2a:	46d0      	mov	r8, sl
 8013c2c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8013c30:	e00e      	b.n	8013c50 <_vprintf+0x378>
 8013c32:	f108 0801 	add.w	r8, r8, #1
 8013c36:	e7e6      	b.n	8013c06 <_vprintf+0x32e>
 8013c38:	2120      	movs	r1, #32
 8013c3a:	a803      	add	r0, sp, #12
 8013c3c:	f7ff fd62 	bl	8013704 <_xputch>
 8013c40:	46d0      	mov	r8, sl
 8013c42:	e7ea      	b.n	8013c1a <_vprintf+0x342>
 8013c44:	a803      	add	r0, sp, #12
 8013c46:	f7ff fd5d 	bl	8013704 <_xputch>
 8013c4a:	9b04      	ldr	r3, [sp, #16]
 8013c4c:	3b01      	subs	r3, #1
 8013c4e:	9304      	str	r3, [sp, #16]
 8013c50:	9b03      	ldr	r3, [sp, #12]
 8013c52:	07db      	lsls	r3, r3, #31
 8013c54:	d501      	bpl.n	8013c5a <_vprintf+0x382>
 8013c56:	9b04      	ldr	r3, [sp, #16]
 8013c58:	b11b      	cbz	r3, 8013c62 <_vprintf+0x38a>
 8013c5a:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8013c5e:	2900      	cmp	r1, #0
 8013c60:	d1f0      	bne.n	8013c44 <_vprintf+0x36c>
 8013c62:	9b05      	ldr	r3, [sp, #20]
 8013c64:	4543      	cmp	r3, r8
 8013c66:	f77f aee2 	ble.w	8013a2e <_vprintf+0x156>
 8013c6a:	2120      	movs	r1, #32
 8013c6c:	a803      	add	r0, sp, #12
 8013c6e:	f7ff fd49 	bl	8013704 <_xputch>
 8013c72:	f108 0801 	add.w	r8, r8, #1
 8013c76:	e7f4      	b.n	8013c62 <_vprintf+0x38a>
 8013c78:	9b03      	ldr	r3, [sp, #12]
 8013c7a:	f013 0304 	ands.w	r3, r3, #4
 8013c7e:	bf1d      	ittte	ne
 8013c80:	3407      	addne	r4, #7
 8013c82:	f024 0307 	bicne.w	r3, r4, #7
 8013c86:	461c      	movne	r4, r3
 8013c88:	f854 2b04 	ldreq.w	r2, [r4], #4
 8013c8c:	bf1c      	itt	ne
 8013c8e:	f854 2b08 	ldrne.w	r2, [r4], #8
 8013c92:	685b      	ldrne	r3, [r3, #4]
 8013c94:	e6e3      	b.n	8013a5e <_vprintf+0x186>
 8013c96:	9b03      	ldr	r3, [sp, #12]
 8013c98:	f043 0302 	orr.w	r3, r3, #2
 8013c9c:	9303      	str	r3, [sp, #12]
 8013c9e:	f854 1b04 	ldr.w	r1, [r4], #4
 8013ca2:	e7a8      	b.n	8013bf6 <_vprintf+0x31e>

08013ca4 <printf>:
 8013ca4:	b40f      	push	{r0, r1, r2, r3}
 8013ca6:	b507      	push	{r0, r1, r2, lr}
 8013ca8:	aa04      	add	r2, sp, #16
 8013caa:	f852 1b04 	ldr.w	r1, [r2], #4
 8013cae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013cb2:	9201      	str	r2, [sp, #4]
 8013cb4:	f7ff fe10 	bl	80138d8 <_vprintf>
 8013cb8:	b003      	add	sp, #12
 8013cba:	f85d eb04 	ldr.w	lr, [sp], #4
 8013cbe:	b004      	add	sp, #16
 8013cc0:	4770      	bx	lr
	...

08013cc4 <sprintf>:
 8013cc4:	b40e      	push	{r1, r2, r3}
 8013cc6:	b517      	push	{r0, r1, r2, r4, lr}
 8013cc8:	4c09      	ldr	r4, [pc, #36]	; (8013cf0 <sprintf+0x2c>)
 8013cca:	aa05      	add	r2, sp, #20
 8013ccc:	f852 1b04 	ldr.w	r1, [r2], #4
 8013cd0:	6020      	str	r0, [r4, #0]
 8013cd2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013cd6:	9201      	str	r2, [sp, #4]
 8013cd8:	f7ff fdfe 	bl	80138d8 <_vprintf>
 8013cdc:	2300      	movs	r3, #0
 8013cde:	6822      	ldr	r2, [r4, #0]
 8013ce0:	6023      	str	r3, [r4, #0]
 8013ce2:	7013      	strb	r3, [r2, #0]
 8013ce4:	b003      	add	sp, #12
 8013ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cea:	b003      	add	sp, #12
 8013cec:	4770      	bx	lr
 8013cee:	bf00      	nop
 8013cf0:	2000a968 	andcs	sl, r0, r8, ror #18

08013cf4 <snprintf>:
 8013cf4:	b40c      	push	{r2, r3}
 8013cf6:	460b      	mov	r3, r1
 8013cf8:	b513      	push	{r0, r1, r4, lr}
 8013cfa:	4c09      	ldr	r4, [pc, #36]	; (8013d20 <snprintf+0x2c>)
 8013cfc:	aa04      	add	r2, sp, #16
 8013cfe:	f852 1b04 	ldr.w	r1, [r2], #4
 8013d02:	6020      	str	r0, [r4, #0]
 8013d04:	4618      	mov	r0, r3
 8013d06:	9201      	str	r2, [sp, #4]
 8013d08:	f7ff fde6 	bl	80138d8 <_vprintf>
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	6822      	ldr	r2, [r4, #0]
 8013d10:	6023      	str	r3, [r4, #0]
 8013d12:	7013      	strb	r3, [r2, #0]
 8013d14:	b002      	add	sp, #8
 8013d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d1a:	b002      	add	sp, #8
 8013d1c:	4770      	bx	lr
 8013d1e:	bf00      	nop
 8013d20:	2000a968 	andcs	sl, r0, r8, ror #18

08013d24 <vsnprintf>:
 8013d24:	b538      	push	{r3, r4, r5, lr}
 8013d26:	4605      	mov	r5, r0
 8013d28:	4c05      	ldr	r4, [pc, #20]	; (8013d40 <vsnprintf+0x1c>)
 8013d2a:	4608      	mov	r0, r1
 8013d2c:	4611      	mov	r1, r2
 8013d2e:	461a      	mov	r2, r3
 8013d30:	6025      	str	r5, [r4, #0]
 8013d32:	f7ff fdd1 	bl	80138d8 <_vprintf>
 8013d36:	2300      	movs	r3, #0
 8013d38:	6822      	ldr	r2, [r4, #0]
 8013d3a:	6023      	str	r3, [r4, #0]
 8013d3c:	7013      	strb	r3, [r2, #0]
 8013d3e:	bd38      	pop	{r3, r4, r5, pc}
 8013d40:	2000a968 	andcs	sl, r0, r8, ror #18

08013d44 <puts>:
 8013d44:	b508      	push	{r3, lr}
 8013d46:	f7ff fa1f 	bl	8013188 <console_puts>
 8013d4a:	200a      	movs	r0, #10
 8013d4c:	f7ff fa10 	bl	8013170 <console_putc>
 8013d50:	2001      	movs	r0, #1
 8013d52:	bd08      	pop	{r3, pc}

08013d54 <strtok>:
 8013d54:	b530      	push	{r4, r5, lr}
 8013d56:	b910      	cbnz	r0, 8013d5e <strtok+0xa>
 8013d58:	4b12      	ldr	r3, [pc, #72]	; (8013da4 <strtok+0x50>)
 8013d5a:	6818      	ldr	r0, [r3, #0]
 8013d5c:	b158      	cbz	r0, 8013d76 <strtok+0x22>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	460d      	mov	r5, r1
 8013d62:	4618      	mov	r0, r3
 8013d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d6c:	b924      	cbnz	r4, 8013d78 <strtok+0x24>
 8013d6e:	b94a      	cbnz	r2, 8013d84 <strtok+0x30>
 8013d70:	4610      	mov	r0, r2
 8013d72:	4b0c      	ldr	r3, [pc, #48]	; (8013da4 <strtok+0x50>)
 8013d74:	601a      	str	r2, [r3, #0]
 8013d76:	bd30      	pop	{r4, r5, pc}
 8013d78:	42a2      	cmp	r2, r4
 8013d7a:	d1f5      	bne.n	8013d68 <strtok+0x14>
 8013d7c:	e7f0      	b.n	8013d60 <strtok+0xc>
 8013d7e:	4613      	mov	r3, r2
 8013d80:	e00c      	b.n	8013d9c <strtok+0x48>
 8013d82:	b914      	cbnz	r4, 8013d8a <strtok+0x36>
 8013d84:	460d      	mov	r5, r1
 8013d86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013d8e:	42a2      	cmp	r2, r4
 8013d90:	d1f7      	bne.n	8013d82 <strtok+0x2e>
 8013d92:	2a00      	cmp	r2, #0
 8013d94:	d0f3      	beq.n	8013d7e <strtok+0x2a>
 8013d96:	2200      	movs	r2, #0
 8013d98:	f803 2c01 	strb.w	r2, [r3, #-1]
 8013d9c:	4a01      	ldr	r2, [pc, #4]	; (8013da4 <strtok+0x50>)
 8013d9e:	6013      	str	r3, [r2, #0]
 8013da0:	e7e9      	b.n	8013d76 <strtok+0x22>
 8013da2:	bf00      	nop
 8013da4:	2000a96c 	andcs	sl, r0, ip, ror #18

08013da8 <isleapyear>:
 8013da8:	2264      	movs	r2, #100	; 0x64
 8013daa:	fb90 f3f2 	sdiv	r3, r0, r2
 8013dae:	fb02 0313 	mls	r3, r2, r3, r0
 8013db2:	b94b      	cbnz	r3, 8013dc8 <isleapyear+0x20>
 8013db4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013db8:	fb90 f2f3 	sdiv	r2, r0, r3
 8013dbc:	fb03 0012 	mls	r0, r3, r2, r0
 8013dc0:	fab0 f080 	clz	r0, r0
 8013dc4:	0940      	lsrs	r0, r0, #5
 8013dc6:	4770      	bx	lr
 8013dc8:	f010 0f03 	tst.w	r0, #3
 8013dcc:	bf0c      	ite	eq
 8013dce:	2001      	moveq	r0, #1
 8013dd0:	2000      	movne	r0, #0
 8013dd2:	4770      	bx	lr

08013dd4 <getdaysofmonth>:
 8013dd4:	b510      	push	{r4, lr}
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	2c01      	cmp	r4, #1
 8013dda:	4608      	mov	r0, r1
 8013ddc:	d102      	bne.n	8013de4 <getdaysofmonth+0x10>
 8013dde:	f7ff ffe3 	bl	8013da8 <isleapyear>
 8013de2:	b918      	cbnz	r0, 8013dec <getdaysofmonth+0x18>
 8013de4:	4b02      	ldr	r3, [pc, #8]	; (8013df0 <getdaysofmonth+0x1c>)
 8013de6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8013dea:	bd10      	pop	{r4, pc}
 8013dec:	201d      	movs	r0, #29
 8013dee:	e7fc      	b.n	8013dea <getdaysofmonth+0x16>
 8013df0:	08018130 	stmdaeq	r1, {r4, r5, r8, pc}

08013df4 <mktime>:
 8013df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df8:	4604      	mov	r4, r0
 8013dfa:	2800      	cmp	r0, #0
 8013dfc:	d042      	beq.n	8013e84 <mktime+0x90>
 8013dfe:	6941      	ldr	r1, [r0, #20]
 8013e00:	f1a1 0346 	sub.w	r3, r1, #70	; 0x46
 8013e04:	2b45      	cmp	r3, #69	; 0x45
 8013e06:	d83d      	bhi.n	8013e84 <mktime+0x90>
 8013e08:	2600      	movs	r6, #0
 8013e0a:	f240 75b2 	movw	r5, #1970	; 0x7b2
 8013e0e:	f240 186d 	movw	r8, #365	; 0x16d
 8013e12:	f201 776b 	addw	r7, r1, #1899	; 0x76b
 8013e16:	42af      	cmp	r7, r5
 8013e18:	da23      	bge.n	8013e62 <mktime+0x6e>
 8013e1a:	6927      	ldr	r7, [r4, #16]
 8013e1c:	2f0b      	cmp	r7, #11
 8013e1e:	d831      	bhi.n	8013e84 <mktime+0x90>
 8013e20:	2500      	movs	r5, #0
 8013e22:	42af      	cmp	r7, r5
 8013e24:	d128      	bne.n	8013e78 <mktime+0x84>
 8013e26:	68e5      	ldr	r5, [r4, #12]
 8013e28:	2d00      	cmp	r5, #0
 8013e2a:	dd2b      	ble.n	8013e84 <mktime+0x90>
 8013e2c:	4638      	mov	r0, r7
 8013e2e:	f7ff ffd1 	bl	8013dd4 <getdaysofmonth>
 8013e32:	4285      	cmp	r5, r0
 8013e34:	dc26      	bgt.n	8013e84 <mktime+0x90>
 8013e36:	2318      	movs	r3, #24
 8013e38:	3d01      	subs	r5, #1
 8013e3a:	4435      	add	r5, r6
 8013e3c:	435d      	muls	r5, r3
 8013e3e:	68a3      	ldr	r3, [r4, #8]
 8013e40:	2b17      	cmp	r3, #23
 8013e42:	d81f      	bhi.n	8013e84 <mktime+0x90>
 8013e44:	203c      	movs	r0, #60	; 0x3c
 8013e46:	442b      	add	r3, r5
 8013e48:	fb00 f503 	mul.w	r5, r0, r3
 8013e4c:	6863      	ldr	r3, [r4, #4]
 8013e4e:	2b3b      	cmp	r3, #59	; 0x3b
 8013e50:	d818      	bhi.n	8013e84 <mktime+0x90>
 8013e52:	442b      	add	r3, r5
 8013e54:	4343      	muls	r3, r0
 8013e56:	6820      	ldr	r0, [r4, #0]
 8013e58:	283b      	cmp	r0, #59	; 0x3b
 8013e5a:	d813      	bhi.n	8013e84 <mktime+0x90>
 8013e5c:	4418      	add	r0, r3
 8013e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e62:	4628      	mov	r0, r5
 8013e64:	f7ff ffa0 	bl	8013da8 <isleapyear>
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	bf14      	ite	ne
 8013e6c:	f44f 73b7 	movne.w	r3, #366	; 0x16e
 8013e70:	4643      	moveq	r3, r8
 8013e72:	3501      	adds	r5, #1
 8013e74:	441e      	add	r6, r3
 8013e76:	e7ce      	b.n	8013e16 <mktime+0x22>
 8013e78:	4628      	mov	r0, r5
 8013e7a:	f7ff ffab 	bl	8013dd4 <getdaysofmonth>
 8013e7e:	3501      	adds	r5, #1
 8013e80:	4406      	add	r6, r0
 8013e82:	e7ce      	b.n	8013e22 <mktime+0x2e>
 8013e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e88:	e7e9      	b.n	8013e5e <mktime+0x6a>
	...

08013e8c <gettimeofday>:
 8013e8c:	b538      	push	{r3, r4, r5, lr}
 8013e8e:	4b10      	ldr	r3, [pc, #64]	; (8013ed0 <gettimeofday+0x44>)
 8013e90:	4a10      	ldr	r2, [pc, #64]	; (8013ed4 <gettimeofday+0x48>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	6814      	ldr	r4, [r2, #0]
 8013e96:	6013      	str	r3, [r2, #0]
 8013e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e9c:	429c      	cmp	r4, r3
 8013e9e:	bf2c      	ite	cs
 8013ea0:	1ae4      	subcs	r4, r4, r3
 8013ea2:	1b1c      	subcc	r4, r3, r4
 8013ea4:	4354      	muls	r4, r2
 8013ea6:	4b0c      	ldr	r3, [pc, #48]	; (8013ed8 <gettimeofday+0x4c>)
 8013ea8:	4605      	mov	r5, r0
 8013eaa:	e9d3 2100 	ldrd	r2, r1, [r3]
 8013eae:	18a4      	adds	r4, r4, r2
 8013eb0:	f141 0100 	adc.w	r1, r1, #0
 8013eb4:	e9c3 4100 	strd	r4, r1, [r3]
 8013eb8:	4620      	mov	r0, r4
 8013eba:	2300      	movs	r3, #0
 8013ebc:	4a07      	ldr	r2, [pc, #28]	; (8013edc <gettimeofday+0x50>)
 8013ebe:	f7f3 fe4d 	bl	8007b5c <__aeabi_uldivmod>
 8013ec2:	4b06      	ldr	r3, [pc, #24]	; (8013edc <gettimeofday+0x50>)
 8013ec4:	6028      	str	r0, [r5, #0]
 8013ec6:	fb03 4410 	mls	r4, r3, r0, r4
 8013eca:	2000      	movs	r0, #0
 8013ecc:	606c      	str	r4, [r5, #4]
 8013ece:	bd38      	pop	{r3, r4, r5, pc}
 8013ed0:	2000a97c 	andcs	sl, r0, ip, ror r9
 8013ed4:	2000a978 	andcs	sl, r0, r8, ror r9
 8013ed8:	2000a970 	andcs	sl, r0, r0, ror r9
 8013edc:	000f4240 	andeq	r4, pc, r0, asr #4

08013ee0 <settimeofday>:
 8013ee0:	4b07      	ldr	r3, [pc, #28]	; (8013f00 <settimeofday+0x20>)
 8013ee2:	b510      	push	{r4, lr}
 8013ee4:	681a      	ldr	r2, [r3, #0]
 8013ee6:	4b07      	ldr	r3, [pc, #28]	; (8013f04 <settimeofday+0x24>)
 8013ee8:	6804      	ldr	r4, [r0, #0]
 8013eea:	601a      	str	r2, [r3, #0]
 8013eec:	6843      	ldr	r3, [r0, #4]
 8013eee:	4806      	ldr	r0, [pc, #24]	; (8013f08 <settimeofday+0x28>)
 8013ef0:	17da      	asrs	r2, r3, #31
 8013ef2:	fbc4 3200 	smlal	r3, r2, r4, r0
 8013ef6:	4905      	ldr	r1, [pc, #20]	; (8013f0c <settimeofday+0x2c>)
 8013ef8:	2000      	movs	r0, #0
 8013efa:	e9c1 3200 	strd	r3, r2, [r1]
 8013efe:	bd10      	pop	{r4, pc}
 8013f00:	2000a97c 	andcs	sl, r0, ip, ror r9
 8013f04:	2000a978 	andcs	sl, r0, r8, ror r9
 8013f08:	000f4240 	andeq	r4, pc, r0, asr #4
 8013f0c:	2000a970 	andcs	sl, r0, r0, ror r9

08013f10 <time>:
 8013f10:	b513      	push	{r0, r1, r4, lr}
 8013f12:	4604      	mov	r4, r0
 8013f14:	2100      	movs	r1, #0
 8013f16:	4668      	mov	r0, sp
 8013f18:	f7ff ffb8 	bl	8013e8c <gettimeofday>
 8013f1c:	9800      	ldr	r0, [sp, #0]
 8013f1e:	b104      	cbz	r4, 8013f22 <time+0x12>
 8013f20:	6020      	str	r0, [r4, #0]
 8013f22:	b002      	add	sp, #8
 8013f24:	bd10      	pop	{r4, pc}
	...

08013f28 <uart0_init>:
 8013f28:	2301      	movs	r3, #1
 8013f2a:	b507      	push	{r0, r1, r2, lr}
 8013f2c:	2208      	movs	r2, #8
 8013f2e:	9300      	str	r3, [sp, #0]
 8013f30:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8013f34:	2300      	movs	r3, #0
 8013f36:	4803      	ldr	r0, [pc, #12]	; (8013f44 <uart0_init+0x1c>)
 8013f38:	f000 ffc8 	bl	8014ecc <gd32_uart_begin>
 8013f3c:	b003      	add	sp, #12
 8013f3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f42:	bf00      	nop
 8013f44:	40013800 	andmi	r3, r1, r0, lsl #16

08013f48 <uart0_putc>:
 8013f48:	280a      	cmp	r0, #10
 8013f4a:	b538      	push	{r3, r4, r5, lr}
 8013f4c:	4604      	mov	r4, r0
 8013f4e:	d10a      	bne.n	8013f66 <uart0_putc+0x1e>
 8013f50:	4d0b      	ldr	r5, [pc, #44]	; (8013f80 <uart0_putc+0x38>)
 8013f52:	2107      	movs	r1, #7
 8013f54:	4628      	mov	r0, r5
 8013f56:	f000 fc87 	bl	8014868 <usart_flag_get>
 8013f5a:	2800      	cmp	r0, #0
 8013f5c:	d0f9      	beq.n	8013f52 <uart0_putc+0xa>
 8013f5e:	220d      	movs	r2, #13
 8013f60:	4b08      	ldr	r3, [pc, #32]	; (8013f84 <uart0_putc+0x3c>)
 8013f62:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8013f66:	4d06      	ldr	r5, [pc, #24]	; (8013f80 <uart0_putc+0x38>)
 8013f68:	2107      	movs	r1, #7
 8013f6a:	4628      	mov	r0, r5
 8013f6c:	f000 fc7c 	bl	8014868 <usart_flag_get>
 8013f70:	2800      	cmp	r0, #0
 8013f72:	d0f9      	beq.n	8013f68 <uart0_putc+0x20>
 8013f74:	4b03      	ldr	r3, [pc, #12]	; (8013f84 <uart0_putc+0x3c>)
 8013f76:	b2e4      	uxtb	r4, r4
 8013f78:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
 8013f7c:	bd38      	pop	{r3, r4, r5, pc}
 8013f7e:	bf00      	nop
 8013f80:	40013800 	andmi	r3, r1, r0, lsl #16
 8013f84:	40013000 	andmi	r3, r1, r0

08013f88 <uart0_puts>:
 8013f88:	b510      	push	{r4, lr}
 8013f8a:	1e44      	subs	r4, r0, #1
 8013f8c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013f90:	b903      	cbnz	r3, 8013f94 <uart0_puts+0xc>
 8013f92:	bd10      	pop	{r4, pc}
 8013f94:	2b0a      	cmp	r3, #10
 8013f96:	d102      	bne.n	8013f9e <uart0_puts+0x16>
 8013f98:	200d      	movs	r0, #13
 8013f9a:	f7ff ffd5 	bl	8013f48 <uart0_putc>
 8013f9e:	7820      	ldrb	r0, [r4, #0]
 8013fa0:	f7ff ffd2 	bl	8013f48 <uart0_putc>
 8013fa4:	e7f2      	b.n	8013f8c <uart0_puts+0x4>
	...

08013fa8 <systick_config>:
 8013fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013fac:	4b0b      	ldr	r3, [pc, #44]	; (8013fdc <systick_config+0x34>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013fb4:	3b01      	subs	r3, #1
 8013fb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013fba:	d20d      	bcs.n	8013fd8 <systick_config+0x30>
 8013fbc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8013fc0:	21f0      	movs	r1, #240	; 0xf0
 8013fc2:	6153      	str	r3, [r2, #20]
 8013fc4:	4b06      	ldr	r3, [pc, #24]	; (8013fe0 <systick_config+0x38>)
 8013fc6:	2007      	movs	r0, #7
 8013fc8:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8013fcc:	2100      	movs	r1, #0
 8013fce:	6191      	str	r1, [r2, #24]
 8013fd0:	6110      	str	r0, [r2, #16]
 8013fd2:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8013fd6:	4770      	bx	lr
 8013fd8:	e7fe      	b.n	8013fd8 <systick_config+0x30>
 8013fda:	bf00      	nop
 8013fdc:	200000e0 	andcs	r0, r0, r0, ror #1
 8013fe0:	e000ed00 	and	lr, r0, r0, lsl #26

08013fe4 <SysTick_Handler>:
 8013fe4:	4a02      	ldr	r2, [pc, #8]	; (8013ff0 <SysTick_Handler+0xc>)
 8013fe6:	6813      	ldr	r3, [r2, #0]
 8013fe8:	3301      	adds	r3, #1
 8013fea:	6013      	str	r3, [r2, #0]
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop
 8013ff0:	2000a97c 	andcs	sl, r0, ip, ror r9

08013ff4 <SystemInit>:
 8013ff4:	4b37      	ldr	r3, [pc, #220]	; (80140d4 <SystemInit+0xe0>)
 8013ff6:	4838      	ldr	r0, [pc, #224]	; (80140d8 <SystemInit+0xe4>)
 8013ff8:	681a      	ldr	r2, [r3, #0]
 8013ffa:	f042 0201 	orr.w	r2, r2, #1
 8013ffe:	601a      	str	r2, [r3, #0]
 8014000:	685a      	ldr	r2, [r3, #4]
 8014002:	f022 0203 	bic.w	r2, r2, #3
 8014006:	605a      	str	r2, [r3, #4]
 8014008:	6819      	ldr	r1, [r3, #0]
 801400a:	4001      	ands	r1, r0
 801400c:	6019      	str	r1, [r3, #0]
 801400e:	685a      	ldr	r2, [r3, #4]
 8014010:	4932      	ldr	r1, [pc, #200]	; (80140dc <SystemInit+0xe8>)
 8014012:	4011      	ands	r1, r2
 8014014:	6059      	str	r1, [r3, #4]
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	4002      	ands	r2, r0
 801401a:	601a      	str	r2, [r3, #0]
 801401c:	681a      	ldr	r2, [r3, #0]
 801401e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8014022:	601a      	str	r2, [r3, #0]
 8014024:	685a      	ldr	r2, [r3, #4]
 8014026:	f022 5203 	bic.w	r2, r2, #549453824	; 0x20c00000
 801402a:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 801402e:	605a      	str	r2, [r3, #4]
 8014030:	2200      	movs	r2, #0
 8014032:	62da      	str	r2, [r3, #44]	; 0x2c
 8014034:	681a      	ldr	r2, [r3, #0]
 8014036:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 801403a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 801403e:	601a      	str	r2, [r3, #0]
 8014040:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8014044:	609a      	str	r2, [r3, #8]
 8014046:	681a      	ldr	r2, [r3, #0]
 8014048:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801404c:	601a      	str	r2, [r3, #0]
 801404e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014052:	6819      	ldr	r1, [r3, #0]
 8014054:	0389      	lsls	r1, r1, #14
 8014056:	d401      	bmi.n	801405c <SystemInit+0x68>
 8014058:	3a01      	subs	r2, #1
 801405a:	d1fa      	bne.n	8014052 <SystemInit+0x5e>
 801405c:	681a      	ldr	r2, [r3, #0]
 801405e:	0392      	lsls	r2, r2, #14
 8014060:	d400      	bmi.n	8014064 <SystemInit+0x70>
 8014062:	e7fe      	b.n	8014062 <SystemInit+0x6e>
 8014064:	685a      	ldr	r2, [r3, #4]
 8014066:	605a      	str	r2, [r3, #4]
 8014068:	685a      	ldr	r2, [r3, #4]
 801406a:	605a      	str	r2, [r3, #4]
 801406c:	685a      	ldr	r2, [r3, #4]
 801406e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014072:	605a      	str	r2, [r3, #4]
 8014074:	685a      	ldr	r2, [r3, #4]
 8014076:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 801407a:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 801407e:	605a      	str	r2, [r3, #4]
 8014080:	685a      	ldr	r2, [r3, #4]
 8014082:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8014086:	f442 1224 	orr.w	r2, r2, #2686976	; 0x290000
 801408a:	605a      	str	r2, [r3, #4]
 801408c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801408e:	4a14      	ldr	r2, [pc, #80]	; (80140e0 <SystemInit+0xec>)
 8014090:	400a      	ands	r2, r1
 8014092:	62da      	str	r2, [r3, #44]	; 0x2c
 8014094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014096:	f442 3283 	orr.w	r2, r2, #67072	; 0x10600
 801409a:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 801409e:	62da      	str	r2, [r3, #44]	; 0x2c
 80140a0:	681a      	ldr	r2, [r3, #0]
 80140a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80140a6:	601a      	str	r2, [r3, #0]
 80140a8:	681a      	ldr	r2, [r3, #0]
 80140aa:	0110      	lsls	r0, r2, #4
 80140ac:	d5fc      	bpl.n	80140a8 <SystemInit+0xb4>
 80140ae:	681a      	ldr	r2, [r3, #0]
 80140b0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80140b4:	601a      	str	r2, [r3, #0]
 80140b6:	681a      	ldr	r2, [r3, #0]
 80140b8:	0191      	lsls	r1, r2, #6
 80140ba:	d5fc      	bpl.n	80140b6 <SystemInit+0xc2>
 80140bc:	685a      	ldr	r2, [r3, #4]
 80140be:	f022 0203 	bic.w	r2, r2, #3
 80140c2:	605a      	str	r2, [r3, #4]
 80140c4:	685a      	ldr	r2, [r3, #4]
 80140c6:	f042 0202 	orr.w	r2, r2, #2
 80140ca:	605a      	str	r2, [r3, #4]
 80140cc:	685a      	ldr	r2, [r3, #4]
 80140ce:	0712      	lsls	r2, r2, #28
 80140d0:	d5fc      	bpl.n	80140cc <SystemInit+0xd8>
 80140d2:	4770      	bx	lr
 80140d4:	40021000 	andmi	r1, r2, r0
 80140d8:	fef6ffff 	mrc2	15, 7, pc, cr6, cr15, {7}
 80140dc:	e0ff000c 	rscs	r0, pc, ip
 80140e0:	fffef000 			; <UNDEFINED> instruction: 0xfffef000

080140e4 <fmc_bank0_unlock>:
 80140e4:	4b04      	ldr	r3, [pc, #16]	; (80140f8 <fmc_bank0_unlock+0x14>)
 80140e6:	691a      	ldr	r2, [r3, #16]
 80140e8:	0612      	lsls	r2, r2, #24
 80140ea:	bf41      	itttt	mi
 80140ec:	4a03      	ldrmi	r2, [pc, #12]	; (80140fc <fmc_bank0_unlock+0x18>)
 80140ee:	605a      	strmi	r2, [r3, #4]
 80140f0:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80140f4:	605a      	strmi	r2, [r3, #4]
 80140f6:	4770      	bx	lr
 80140f8:	40022000 	andmi	r2, r2, r0
 80140fc:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

08014100 <fmc_bank1_unlock>:
 8014100:	4b04      	ldr	r3, [pc, #16]	; (8014114 <fmc_bank1_unlock+0x14>)
 8014102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014104:	0612      	lsls	r2, r2, #24
 8014106:	bf41      	itttt	mi
 8014108:	4a03      	ldrmi	r2, [pc, #12]	; (8014118 <fmc_bank1_unlock+0x18>)
 801410a:	645a      	strmi	r2, [r3, #68]	; 0x44
 801410c:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 8014110:	645a      	strmi	r2, [r3, #68]	; 0x44
 8014112:	4770      	bx	lr
 8014114:	40022000 	andmi	r2, r2, r0
 8014118:	45670123 	strbmi	r0, [r7, #-291]!	; 0xfffffedd

0801411c <fmc_bank0_lock>:
 801411c:	4a02      	ldr	r2, [pc, #8]	; (8014128 <fmc_bank0_lock+0xc>)
 801411e:	6913      	ldr	r3, [r2, #16]
 8014120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014124:	6113      	str	r3, [r2, #16]
 8014126:	4770      	bx	lr
 8014128:	40022000 	andmi	r2, r2, r0

0801412c <fmc_bank1_lock>:
 801412c:	4a02      	ldr	r2, [pc, #8]	; (8014138 <fmc_bank1_lock+0xc>)
 801412e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8014130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014134:	6513      	str	r3, [r2, #80]	; 0x50
 8014136:	4770      	bx	lr
 8014138:	40022000 	andmi	r2, r2, r0

0801413c <fmc_bank0_state_get>:
 801413c:	4b08      	ldr	r3, [pc, #32]	; (8014160 <fmc_bank0_state_get+0x24>)
 801413e:	68da      	ldr	r2, [r3, #12]
 8014140:	07d1      	lsls	r1, r2, #31
 8014142:	d409      	bmi.n	8014158 <fmc_bank0_state_get+0x1c>
 8014144:	68da      	ldr	r2, [r3, #12]
 8014146:	06d2      	lsls	r2, r2, #27
 8014148:	d408      	bmi.n	801415c <fmc_bank0_state_get+0x20>
 801414a:	68db      	ldr	r3, [r3, #12]
 801414c:	f013 0f04 	tst.w	r3, #4
 8014150:	bf0c      	ite	eq
 8014152:	2000      	moveq	r0, #0
 8014154:	2002      	movne	r0, #2
 8014156:	4770      	bx	lr
 8014158:	2001      	movs	r0, #1
 801415a:	4770      	bx	lr
 801415c:	2003      	movs	r0, #3
 801415e:	4770      	bx	lr
 8014160:	40022000 	andmi	r2, r2, r0

08014164 <fmc_bank1_state_get>:
 8014164:	4b08      	ldr	r3, [pc, #32]	; (8014188 <fmc_bank1_state_get+0x24>)
 8014166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014168:	07d1      	lsls	r1, r2, #31
 801416a:	d409      	bmi.n	8014180 <fmc_bank1_state_get+0x1c>
 801416c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801416e:	06d2      	lsls	r2, r2, #27
 8014170:	d408      	bmi.n	8014184 <fmc_bank1_state_get+0x20>
 8014172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014174:	f013 0f04 	tst.w	r3, #4
 8014178:	bf0c      	ite	eq
 801417a:	2000      	moveq	r0, #0
 801417c:	2002      	movne	r0, #2
 801417e:	4770      	bx	lr
 8014180:	2001      	movs	r0, #1
 8014182:	4770      	bx	lr
 8014184:	2003      	movs	r0, #3
 8014186:	4770      	bx	lr
 8014188:	40022000 	andmi	r2, r2, r0

0801418c <fwdgt_enable>:
 801418c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8014190:	4b01      	ldr	r3, [pc, #4]	; (8014198 <fwdgt_enable+0xc>)
 8014192:	601a      	str	r2, [r3, #0]
 8014194:	4770      	bx	lr
 8014196:	bf00      	nop
 8014198:	40003000 	andmi	r3, r0, r0

0801419c <fwdgt_counter_reload>:
 801419c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80141a0:	4b01      	ldr	r3, [pc, #4]	; (80141a8 <fwdgt_counter_reload+0xc>)
 80141a2:	601a      	str	r2, [r3, #0]
 80141a4:	4770      	bx	lr
 80141a6:	bf00      	nop
 80141a8:	40003000 	andmi	r3, r0, r0

080141ac <fwdgt_config>:
 80141ac:	f245 5355 	movw	r3, #21845	; 0x5555
 80141b0:	4a11      	ldr	r2, [pc, #68]	; (80141f8 <fwdgt_config+0x4c>)
 80141b2:	b510      	push	{r4, lr}
 80141b4:	4c11      	ldr	r4, [pc, #68]	; (80141fc <fwdgt_config+0x50>)
 80141b6:	6013      	str	r3, [r2, #0]
 80141b8:	68d3      	ldr	r3, [r2, #12]
 80141ba:	3c01      	subs	r4, #1
 80141bc:	f003 0301 	and.w	r3, r3, #1
 80141c0:	d013      	beq.n	80141ea <fwdgt_config+0x3e>
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d1f8      	bne.n	80141b8 <fwdgt_config+0xc>
 80141c6:	6051      	str	r1, [r2, #4]
 80141c8:	490c      	ldr	r1, [pc, #48]	; (80141fc <fwdgt_config+0x50>)
 80141ca:	4a0b      	ldr	r2, [pc, #44]	; (80141f8 <fwdgt_config+0x4c>)
 80141cc:	68d3      	ldr	r3, [r2, #12]
 80141ce:	3901      	subs	r1, #1
 80141d0:	f003 0302 	and.w	r3, r3, #2
 80141d4:	d00d      	beq.n	80141f2 <fwdgt_config+0x46>
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d1f8      	bne.n	80141cc <fwdgt_config+0x20>
 80141da:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 80141de:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80141e2:	6090      	str	r0, [r2, #8]
 80141e4:	2001      	movs	r0, #1
 80141e6:	6013      	str	r3, [r2, #0]
 80141e8:	e002      	b.n	80141f0 <fwdgt_config+0x44>
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d0eb      	beq.n	80141c6 <fwdgt_config+0x1a>
 80141ee:	2000      	movs	r0, #0
 80141f0:	bd10      	pop	{r4, pc}
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d1fb      	bne.n	80141ee <fwdgt_config+0x42>
 80141f6:	e7f0      	b.n	80141da <fwdgt_config+0x2e>
 80141f8:	40003000 	andmi	r3, r0, r0
 80141fc:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

08014200 <gpio_init>:
 8014200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014204:	f04f 0c0f 	mov.w	ip, #15
 8014208:	06cf      	lsls	r7, r1, #27
 801420a:	f04f 0400 	mov.w	r4, #0
 801420e:	f04f 0701 	mov.w	r7, #1
 8014212:	f001 050f 	and.w	r5, r1, #15
 8014216:	bf48      	it	mi
 8014218:	4315      	orrmi	r5, r2
 801421a:	fa23 f204 	lsr.w	r2, r3, r4
 801421e:	07d6      	lsls	r6, r2, #31
 8014220:	d510      	bpl.n	8014244 <gpio_init+0x44>
 8014222:	00a2      	lsls	r2, r4, #2
 8014224:	6806      	ldr	r6, [r0, #0]
 8014226:	fa0c fe02 	lsl.w	lr, ip, r2
 801422a:	ea26 060e 	bic.w	r6, r6, lr
 801422e:	fa05 f202 	lsl.w	r2, r5, r2
 8014232:	2928      	cmp	r1, #40	; 0x28
 8014234:	ea42 0206 	orr.w	r2, r2, r6
 8014238:	d128      	bne.n	801428c <gpio_init+0x8c>
 801423a:	fa07 f604 	lsl.w	r6, r7, r4
 801423e:	401e      	ands	r6, r3
 8014240:	6146      	str	r6, [r0, #20]
 8014242:	6002      	str	r2, [r0, #0]
 8014244:	3401      	adds	r4, #1
 8014246:	2c08      	cmp	r4, #8
 8014248:	d1e7      	bne.n	801421a <gpio_init+0x1a>
 801424a:	2600      	movs	r6, #0
 801424c:	f04f 0c0f 	mov.w	ip, #15
 8014250:	2701      	movs	r7, #1
 8014252:	f106 0208 	add.w	r2, r6, #8
 8014256:	fa23 f402 	lsr.w	r4, r3, r2
 801425a:	07e4      	lsls	r4, r4, #31
 801425c:	d511      	bpl.n	8014282 <gpio_init+0x82>
 801425e:	00b4      	lsls	r4, r6, #2
 8014260:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8014264:	fa0c f804 	lsl.w	r8, ip, r4
 8014268:	ea2e 0e08 	bic.w	lr, lr, r8
 801426c:	fa05 f404 	lsl.w	r4, r5, r4
 8014270:	2928      	cmp	r1, #40	; 0x28
 8014272:	ea44 040e 	orr.w	r4, r4, lr
 8014276:	d110      	bne.n	801429a <gpio_init+0x9a>
 8014278:	fa07 f202 	lsl.w	r2, r7, r2
 801427c:	401a      	ands	r2, r3
 801427e:	6142      	str	r2, [r0, #20]
 8014280:	6044      	str	r4, [r0, #4]
 8014282:	3601      	adds	r6, #1
 8014284:	2e08      	cmp	r6, #8
 8014286:	d1e4      	bne.n	8014252 <gpio_init+0x52>
 8014288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801428c:	2948      	cmp	r1, #72	; 0x48
 801428e:	bf02      	ittt	eq
 8014290:	fa07 f604 	lsleq.w	r6, r7, r4
 8014294:	401e      	andeq	r6, r3
 8014296:	6106      	streq	r6, [r0, #16]
 8014298:	e7d3      	b.n	8014242 <gpio_init+0x42>
 801429a:	2948      	cmp	r1, #72	; 0x48
 801429c:	bf02      	ittt	eq
 801429e:	fa07 f202 	lsleq.w	r2, r7, r2
 80142a2:	401a      	andeq	r2, r3
 80142a4:	6102      	streq	r2, [r0, #16]
 80142a6:	e7eb      	b.n	8014280 <gpio_init+0x80>

080142a8 <gpio_pin_remap_config>:
 80142a8:	2800      	cmp	r0, #0
 80142aa:	4a16      	ldr	r2, [pc, #88]	; (8014304 <gpio_pin_remap_config+0x5c>)
 80142ac:	b530      	push	{r4, r5, lr}
 80142ae:	f400 1540 	and.w	r5, r0, #3145728	; 0x300000
 80142b2:	bfb4      	ite	lt
 80142b4:	69d3      	ldrlt	r3, [r2, #28]
 80142b6:	6853      	ldrge	r3, [r2, #4]
 80142b8:	f5b5 1f40 	cmp.w	r5, #3145728	; 0x300000
 80142bc:	b284      	uxth	r4, r0
 80142be:	d110      	bne.n	80142e2 <gpio_pin_remap_config+0x3a>
 80142c0:	6855      	ldr	r5, [r2, #4]
 80142c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80142c6:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 80142ca:	6055      	str	r5, [r2, #4]
 80142cc:	b119      	cbz	r1, 80142d6 <gpio_pin_remap_config+0x2e>
 80142ce:	0d42      	lsrs	r2, r0, #21
 80142d0:	0112      	lsls	r2, r2, #4
 80142d2:	4094      	lsls	r4, r2
 80142d4:	4323      	orrs	r3, r4
 80142d6:	4a0b      	ldr	r2, [pc, #44]	; (8014304 <gpio_pin_remap_config+0x5c>)
 80142d8:	2800      	cmp	r0, #0
 80142da:	bfb4      	ite	lt
 80142dc:	61d3      	strlt	r3, [r2, #28]
 80142de:	6053      	strge	r3, [r2, #4]
 80142e0:	bd30      	pop	{r4, r5, pc}
 80142e2:	02c2      	lsls	r2, r0, #11
 80142e4:	bf4d      	iteet	mi
 80142e6:	2203      	movmi	r2, #3
 80142e8:	0d42      	lsrpl	r2, r0, #21
 80142ea:	0112      	lslpl	r2, r2, #4
 80142ec:	f3c0 4503 	ubfxmi	r5, r0, #16, #4
 80142f0:	bf4c      	ite	mi
 80142f2:	40aa      	lslmi	r2, r5
 80142f4:	fa04 f202 	lslpl.w	r2, r4, r2
 80142f8:	ea23 0302 	bic.w	r3, r3, r2
 80142fc:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8014300:	e7e4      	b.n	80142cc <gpio_pin_remap_config+0x24>
 8014302:	bf00      	nop
 8014304:	40010000 	andmi	r0, r1, r0

08014308 <gpio_ethernet_phy_select>:
 8014308:	4b04      	ldr	r3, [pc, #16]	; (801431c <gpio_ethernet_phy_select+0x14>)
 801430a:	6859      	ldr	r1, [r3, #4]
 801430c:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8014310:	6059      	str	r1, [r3, #4]
 8014312:	685a      	ldr	r2, [r3, #4]
 8014314:	4302      	orrs	r2, r0
 8014316:	605a      	str	r2, [r3, #4]
 8014318:	4770      	bx	lr
 801431a:	bf00      	nop
 801431c:	40010000 	andmi	r0, r1, r0

08014320 <rcu_periph_clock_enable>:
 8014320:	2201      	movs	r2, #1
 8014322:	0983      	lsrs	r3, r0, #6
 8014324:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014328:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 801432c:	6819      	ldr	r1, [r3, #0]
 801432e:	f000 001f 	and.w	r0, r0, #31
 8014332:	fa02 f000 	lsl.w	r0, r2, r0
 8014336:	4308      	orrs	r0, r1
 8014338:	6018      	str	r0, [r3, #0]
 801433a:	4770      	bx	lr

0801433c <rcu_periph_clock_disable>:
 801433c:	2101      	movs	r1, #1
 801433e:	0983      	lsrs	r3, r0, #6
 8014340:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014344:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8014348:	681a      	ldr	r2, [r3, #0]
 801434a:	f000 001f 	and.w	r0, r0, #31
 801434e:	fa01 f000 	lsl.w	r0, r1, r0
 8014352:	ea22 0000 	bic.w	r0, r2, r0
 8014356:	6018      	str	r0, [r3, #0]
 8014358:	4770      	bx	lr

0801435a <rcu_periph_reset_enable>:
 801435a:	f7ff bfe1 	b.w	8014320 <rcu_periph_clock_enable>

0801435e <rcu_periph_reset_disable>:
 801435e:	f7ff bfed 	b.w	801433c <rcu_periph_clock_disable>
	...

08014364 <rcu_ckout0_config>:
 8014364:	4a03      	ldr	r2, [pc, #12]	; (8014374 <rcu_ckout0_config+0x10>)
 8014366:	6853      	ldr	r3, [r2, #4]
 8014368:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 801436c:	4303      	orrs	r3, r0
 801436e:	6053      	str	r3, [r2, #4]
 8014370:	4770      	bx	lr
 8014372:	bf00      	nop
 8014374:	40021000 	andmi	r1, r2, r0

08014378 <rcu_pll2_config>:
 8014378:	4b04      	ldr	r3, [pc, #16]	; (801438c <rcu_pll2_config+0x14>)
 801437a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801437c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8014380:	62d9      	str	r1, [r3, #44]	; 0x2c
 8014382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014384:	4302      	orrs	r2, r0
 8014386:	62da      	str	r2, [r3, #44]	; 0x2c
 8014388:	4770      	bx	lr
 801438a:	bf00      	nop
 801438c:	40021000 	andmi	r1, r2, r0

08014390 <rcu_adc_clock_config>:
 8014390:	490c      	ldr	r1, [pc, #48]	; (80143c4 <rcu_adc_clock_config+0x34>)
 8014392:	2805      	cmp	r0, #5
 8014394:	684b      	ldr	r3, [r1, #4]
 8014396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801439a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801439e:	d006      	beq.n	80143ae <rcu_adc_clock_config+0x1e>
 80143a0:	d803      	bhi.n	80143aa <rcu_adc_clock_config+0x1a>
 80143a2:	2804      	cmp	r0, #4
 80143a4:	d10a      	bne.n	80143bc <rcu_adc_clock_config+0x2c>
 80143a6:	604b      	str	r3, [r1, #4]
 80143a8:	4770      	bx	lr
 80143aa:	2807      	cmp	r0, #7
 80143ac:	d1fb      	bne.n	80143a6 <rcu_adc_clock_config+0x16>
 80143ae:	4a06      	ldr	r2, [pc, #24]	; (80143c8 <rcu_adc_clock_config+0x38>)
 80143b0:	ea02 3080 	and.w	r0, r2, r0, lsl #14
 80143b4:	4303      	orrs	r3, r0
 80143b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80143ba:	e7f4      	b.n	80143a6 <rcu_adc_clock_config+0x16>
 80143bc:	ea43 3380 	orr.w	r3, r3, r0, lsl #14
 80143c0:	e7f1      	b.n	80143a6 <rcu_adc_clock_config+0x16>
 80143c2:	bf00      	nop
 80143c4:	40021000 	andmi	r1, r2, r0
 80143c8:	fffec000 			; <UNDEFINED> instruction: 0xfffec000

080143cc <rcu_flag_get>:
 80143cc:	0983      	lsrs	r3, r0, #6
 80143ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80143d2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	f000 001f 	and.w	r0, r0, #31
 80143dc:	fa23 f000 	lsr.w	r0, r3, r0
 80143e0:	f000 0001 	and.w	r0, r0, #1
 80143e4:	4770      	bx	lr
	...

080143e8 <rcu_osci_stab_wait>:
 80143e8:	281a      	cmp	r0, #26
 80143ea:	b508      	push	{r3, lr}
 80143ec:	d051      	beq.n	8014492 <rcu_osci_stab_wait+0xaa>
 80143ee:	d806      	bhi.n	80143fe <rcu_osci_stab_wait+0x16>
 80143f0:	2810      	cmp	r0, #16
 80143f2:	d015      	beq.n	8014420 <rcu_osci_stab_wait+0x38>
 80143f4:	2818      	cmp	r0, #24
 80143f6:	d043      	beq.n	8014480 <rcu_osci_stab_wait+0x98>
 80143f8:	b368      	cbz	r0, 8014456 <rcu_osci_stab_wait+0x6e>
 80143fa:	2000      	movs	r0, #0
 80143fc:	bd08      	pop	{r3, pc}
 80143fe:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8014402:	d01c      	beq.n	801443e <rcu_osci_stab_wait+0x56>
 8014404:	f5b0 6f10 	cmp.w	r0, #2304	; 0x900
 8014408:	d02f      	beq.n	801446a <rcu_osci_stab_wait+0x82>
 801440a:	281c      	cmp	r0, #28
 801440c:	d1f5      	bne.n	80143fa <rcu_osci_stab_wait+0x12>
 801440e:	4a25      	ldr	r2, [pc, #148]	; (80144a4 <rcu_osci_stab_wait+0xbc>)
 8014410:	201d      	movs	r0, #29
 8014412:	f7ff ffdb 	bl	80143cc <rcu_flag_get>
 8014416:	b908      	cbnz	r0, 801441c <rcu_osci_stab_wait+0x34>
 8014418:	3a01      	subs	r2, #1
 801441a:	d1f9      	bne.n	8014410 <rcu_osci_stab_wait+0x28>
 801441c:	201d      	movs	r0, #29
 801441e:	e008      	b.n	8014432 <rcu_osci_stab_wait+0x4a>
 8014420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014424:	2011      	movs	r0, #17
 8014426:	f7ff ffd1 	bl	80143cc <rcu_flag_get>
 801442a:	b908      	cbnz	r0, 8014430 <rcu_osci_stab_wait+0x48>
 801442c:	3a01      	subs	r2, #1
 801442e:	d1f9      	bne.n	8014424 <rcu_osci_stab_wait+0x3c>
 8014430:	2011      	movs	r0, #17
 8014432:	f7ff ffcb 	bl	80143cc <rcu_flag_get>
 8014436:	3800      	subs	r0, #0
 8014438:	bf18      	it	ne
 801443a:	2001      	movne	r0, #1
 801443c:	e7de      	b.n	80143fc <rcu_osci_stab_wait+0x14>
 801443e:	f06f 427c 	mvn.w	r2, #4227858432	; 0xfc000000
 8014442:	f640 0001 	movw	r0, #2049	; 0x801
 8014446:	f7ff ffc1 	bl	80143cc <rcu_flag_get>
 801444a:	b908      	cbnz	r0, 8014450 <rcu_osci_stab_wait+0x68>
 801444c:	3a01      	subs	r2, #1
 801444e:	d1f8      	bne.n	8014442 <rcu_osci_stab_wait+0x5a>
 8014450:	f640 0001 	movw	r0, #2049	; 0x801
 8014454:	e7ed      	b.n	8014432 <rcu_osci_stab_wait+0x4a>
 8014456:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 801445a:	2001      	movs	r0, #1
 801445c:	f7ff ffb6 	bl	80143cc <rcu_flag_get>
 8014460:	b908      	cbnz	r0, 8014466 <rcu_osci_stab_wait+0x7e>
 8014462:	3a01      	subs	r2, #1
 8014464:	d1f9      	bne.n	801445a <rcu_osci_stab_wait+0x72>
 8014466:	2001      	movs	r0, #1
 8014468:	e7e3      	b.n	8014432 <rcu_osci_stab_wait+0x4a>
 801446a:	4a0e      	ldr	r2, [pc, #56]	; (80144a4 <rcu_osci_stab_wait+0xbc>)
 801446c:	f640 1001 	movw	r0, #2305	; 0x901
 8014470:	f7ff ffac 	bl	80143cc <rcu_flag_get>
 8014474:	b908      	cbnz	r0, 801447a <rcu_osci_stab_wait+0x92>
 8014476:	3a01      	subs	r2, #1
 8014478:	d1f8      	bne.n	801446c <rcu_osci_stab_wait+0x84>
 801447a:	f640 1001 	movw	r0, #2305	; 0x901
 801447e:	e7d8      	b.n	8014432 <rcu_osci_stab_wait+0x4a>
 8014480:	4a08      	ldr	r2, [pc, #32]	; (80144a4 <rcu_osci_stab_wait+0xbc>)
 8014482:	2019      	movs	r0, #25
 8014484:	f7ff ffa2 	bl	80143cc <rcu_flag_get>
 8014488:	b908      	cbnz	r0, 801448e <rcu_osci_stab_wait+0xa6>
 801448a:	3a01      	subs	r2, #1
 801448c:	d1f9      	bne.n	8014482 <rcu_osci_stab_wait+0x9a>
 801448e:	2019      	movs	r0, #25
 8014490:	e7cf      	b.n	8014432 <rcu_osci_stab_wait+0x4a>
 8014492:	4a04      	ldr	r2, [pc, #16]	; (80144a4 <rcu_osci_stab_wait+0xbc>)
 8014494:	201b      	movs	r0, #27
 8014496:	f7ff ff99 	bl	80143cc <rcu_flag_get>
 801449a:	b908      	cbnz	r0, 80144a0 <rcu_osci_stab_wait+0xb8>
 801449c:	3a01      	subs	r2, #1
 801449e:	d1f9      	bne.n	8014494 <rcu_osci_stab_wait+0xac>
 80144a0:	201b      	movs	r0, #27
 80144a2:	e7c6      	b.n	8014432 <rcu_osci_stab_wait+0x4a>
 80144a4:	000fffff 	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>

080144a8 <rcu_osci_on>:
 80144a8:	f7ff bf3a 	b.w	8014320 <rcu_periph_clock_enable>

080144ac <rcu_clock_freq_get>:
 80144ac:	4b3d      	ldr	r3, [pc, #244]	; (80145a4 <rcu_clock_freq_get+0xf8>)
 80144ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144b0:	4604      	mov	r4, r0
 80144b2:	461f      	mov	r7, r3
 80144b4:	b089      	sub	sp, #36	; 0x24
 80144b6:	ad04      	add	r5, sp, #16
 80144b8:	f103 0610 	add.w	r6, r3, #16
 80144bc:	462a      	mov	r2, r5
 80144be:	6818      	ldr	r0, [r3, #0]
 80144c0:	6859      	ldr	r1, [r3, #4]
 80144c2:	3308      	adds	r3, #8
 80144c4:	c203      	stmia	r2!, {r0, r1}
 80144c6:	42b3      	cmp	r3, r6
 80144c8:	4615      	mov	r5, r2
 80144ca:	d1f7      	bne.n	80144bc <rcu_clock_freq_get+0x10>
 80144cc:	466b      	mov	r3, sp
 80144ce:	6938      	ldr	r0, [r7, #16]
 80144d0:	6871      	ldr	r1, [r6, #4]
 80144d2:	4a35      	ldr	r2, [pc, #212]	; (80145a8 <rcu_clock_freq_get+0xfc>)
 80144d4:	c303      	stmia	r3!, {r0, r1}
 80144d6:	c303      	stmia	r3!, {r0, r1}
 80144d8:	6853      	ldr	r3, [r2, #4]
 80144da:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80144de:	2b01      	cmp	r3, #1
 80144e0:	d053      	beq.n	801458a <rcu_clock_freq_get+0xde>
 80144e2:	2b02      	cmp	r3, #2
 80144e4:	d153      	bne.n	801458e <rcu_clock_freq_get+0xe2>
 80144e6:	6853      	ldr	r3, [r2, #4]
 80144e8:	03dd      	lsls	r5, r3, #15
 80144ea:	d523      	bpl.n	8014534 <rcu_clock_freq_get+0x88>
 80144ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80144ee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80144f2:	4b2e      	ldr	r3, [pc, #184]	; (80145ac <rcu_clock_freq_get+0x100>)
 80144f4:	d00e      	beq.n	8014514 <rcu_clock_freq_get+0x68>
 80144f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80144f8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80144fa:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80144fe:	f3c0 2003 	ubfx	r0, r0, #8, #4
 8014502:	3101      	adds	r1, #1
 8014504:	280f      	cmp	r0, #15
 8014506:	f100 0502 	add.w	r5, r0, #2
 801450a:	fbb3 f3f1 	udiv	r3, r3, r1
 801450e:	bf08      	it	eq
 8014510:	2514      	moveq	r5, #20
 8014512:	436b      	muls	r3, r5
 8014514:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8014516:	f001 010f 	and.w	r1, r1, #15
 801451a:	3101      	adds	r1, #1
 801451c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014520:	6851      	ldr	r1, [r2, #4]
 8014522:	6850      	ldr	r0, [r2, #4]
 8014524:	f3c1 4183 	ubfx	r1, r1, #18, #4
 8014528:	0080      	lsls	r0, r0, #2
 801452a:	d505      	bpl.n	8014538 <rcu_clock_freq_get+0x8c>
 801452c:	f041 0110 	orr.w	r1, r1, #16
 8014530:	1c48      	adds	r0, r1, #1
 8014532:	e007      	b.n	8014544 <rcu_clock_freq_get+0x98>
 8014534:	4b1e      	ldr	r3, [pc, #120]	; (80145b0 <rcu_clock_freq_get+0x104>)
 8014536:	e7f3      	b.n	8014520 <rcu_clock_freq_get+0x74>
 8014538:	290f      	cmp	r1, #15
 801453a:	d0f9      	beq.n	8014530 <rcu_clock_freq_get+0x84>
 801453c:	290d      	cmp	r1, #13
 801453e:	f101 0002 	add.w	r0, r1, #2
 8014542:	d01d      	beq.n	8014580 <rcu_clock_freq_get+0xd4>
 8014544:	4343      	muls	r3, r0
 8014546:	6851      	ldr	r1, [r2, #4]
 8014548:	f3c1 1103 	ubfx	r1, r1, #4, #4
 801454c:	3120      	adds	r1, #32
 801454e:	4469      	add	r1, sp
 8014550:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 8014554:	fa23 f001 	lsr.w	r0, r3, r1
 8014558:	6851      	ldr	r1, [r2, #4]
 801455a:	6852      	ldr	r2, [r2, #4]
 801455c:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8014560:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 8014564:	3120      	adds	r1, #32
 8014566:	3220      	adds	r2, #32
 8014568:	4469      	add	r1, sp
 801456a:	446a      	add	r2, sp
 801456c:	f811 1c20 	ldrb.w	r1, [r1, #-32]
 8014570:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8014574:	2c03      	cmp	r4, #3
 8014576:	d813      	bhi.n	80145a0 <rcu_clock_freq_get+0xf4>
 8014578:	e8df f004 	tbb	[pc, r4]
 801457c:	100e0c0b 	andne	r0, lr, fp, lsl #24
 8014580:	2006      	movs	r0, #6
 8014582:	0859      	lsrs	r1, r3, #1
 8014584:	fb00 1303 	mla	r3, r0, r3, r1
 8014588:	e7dd      	b.n	8014546 <rcu_clock_freq_get+0x9a>
 801458a:	4b08      	ldr	r3, [pc, #32]	; (80145ac <rcu_clock_freq_get+0x100>)
 801458c:	e7db      	b.n	8014546 <rcu_clock_freq_get+0x9a>
 801458e:	4b09      	ldr	r3, [pc, #36]	; (80145b4 <rcu_clock_freq_get+0x108>)
 8014590:	e7d9      	b.n	8014546 <rcu_clock_freq_get+0x9a>
 8014592:	4618      	mov	r0, r3
 8014594:	b009      	add	sp, #36	; 0x24
 8014596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014598:	40c8      	lsrs	r0, r1
 801459a:	e7fb      	b.n	8014594 <rcu_clock_freq_get+0xe8>
 801459c:	40d0      	lsrs	r0, r2
 801459e:	e7f9      	b.n	8014594 <rcu_clock_freq_get+0xe8>
 80145a0:	2000      	movs	r0, #0
 80145a2:	e7f7      	b.n	8014594 <rcu_clock_freq_get+0xe8>
 80145a4:	08015d6d 	stmdaeq	r1, {r0, r2, r3, r5, r6, r8, sl, fp, ip, lr}
 80145a8:	40021000 	andmi	r1, r2, r0
 80145ac:	017d7840 	cmneq	sp, r0, asr #16
 80145b0:	003d0900 	eorseq	r0, sp, r0, lsl #18
 80145b4:	007a1200 	rsbseq	r1, sl, r0, lsl #4

080145b8 <timer_deinit>:
 80145b8:	b508      	push	{r3, lr}
 80145ba:	4b2d      	ldr	r3, [pc, #180]	; (8014670 <timer_deinit+0xb8>)
 80145bc:	4298      	cmp	r0, r3
 80145be:	d048      	beq.n	8014652 <timer_deinit+0x9a>
 80145c0:	d816      	bhi.n	80145f0 <timer_deinit+0x38>
 80145c2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80145c6:	4298      	cmp	r0, r3
 80145c8:	d03c      	beq.n	8014644 <timer_deinit+0x8c>
 80145ca:	d807      	bhi.n	80145dc <timer_deinit+0x24>
 80145cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80145d0:	d02a      	beq.n	8014628 <timer_deinit+0x70>
 80145d2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80145d6:	4298      	cmp	r0, r3
 80145d8:	d02d      	beq.n	8014636 <timer_deinit+0x7e>
 80145da:	bd08      	pop	{r3, pc}
 80145dc:	4b25      	ldr	r3, [pc, #148]	; (8014674 <timer_deinit+0xbc>)
 80145de:	4298      	cmp	r0, r3
 80145e0:	d1fb      	bne.n	80145da <timer_deinit+0x22>
 80145e2:	f240 4003 	movw	r0, #1027	; 0x403
 80145e6:	f7ff feb8 	bl	801435a <rcu_periph_reset_enable>
 80145ea:	f240 4003 	movw	r0, #1027	; 0x403
 80145ee:	e017      	b.n	8014620 <timer_deinit+0x68>
 80145f0:	4b21      	ldr	r3, [pc, #132]	; (8014678 <timer_deinit+0xc0>)
 80145f2:	4298      	cmp	r0, r3
 80145f4:	d00e      	beq.n	8014614 <timer_deinit+0x5c>
 80145f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145fa:	4298      	cmp	r0, r3
 80145fc:	d030      	beq.n	8014660 <timer_deinit+0xa8>
 80145fe:	f5a3 3390 	sub.w	r3, r3, #73728	; 0x12000
 8014602:	4298      	cmp	r0, r3
 8014604:	d1e9      	bne.n	80145da <timer_deinit+0x22>
 8014606:	f240 4005 	movw	r0, #1029	; 0x405
 801460a:	f7ff fea6 	bl	801435a <rcu_periph_reset_enable>
 801460e:	f240 4005 	movw	r0, #1029	; 0x405
 8014612:	e005      	b.n	8014620 <timer_deinit+0x68>
 8014614:	f240 300b 	movw	r0, #779	; 0x30b
 8014618:	f7ff fe9f 	bl	801435a <rcu_periph_reset_enable>
 801461c:	f240 300b 	movw	r0, #779	; 0x30b
 8014620:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014624:	f7ff be9b 	b.w	801435e <rcu_periph_reset_disable>
 8014628:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801462c:	f7ff fe95 	bl	801435a <rcu_periph_reset_enable>
 8014630:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014634:	e7f4      	b.n	8014620 <timer_deinit+0x68>
 8014636:	f240 4001 	movw	r0, #1025	; 0x401
 801463a:	f7ff fe8e 	bl	801435a <rcu_periph_reset_enable>
 801463e:	f240 4001 	movw	r0, #1025	; 0x401
 8014642:	e7ed      	b.n	8014620 <timer_deinit+0x68>
 8014644:	f240 4002 	movw	r0, #1026	; 0x402
 8014648:	f7ff fe87 	bl	801435a <rcu_periph_reset_enable>
 801464c:	f240 4002 	movw	r0, #1026	; 0x402
 8014650:	e7e6      	b.n	8014620 <timer_deinit+0x68>
 8014652:	f240 4004 	movw	r0, #1028	; 0x404
 8014656:	f7ff fe80 	bl	801435a <rcu_periph_reset_enable>
 801465a:	f240 4004 	movw	r0, #1028	; 0x404
 801465e:	e7df      	b.n	8014620 <timer_deinit+0x68>
 8014660:	f240 300d 	movw	r0, #781	; 0x30d
 8014664:	f7ff fe79 	bl	801435a <rcu_periph_reset_enable>
 8014668:	f240 300d 	movw	r0, #781	; 0x30d
 801466c:	e7d8      	b.n	8014620 <timer_deinit+0x68>
 801466e:	bf00      	nop
 8014670:	40001000 	andmi	r1, r0, r0
 8014674:	40000c00 	andmi	r0, r0, r0, lsl #24
 8014678:	40012c00 	andmi	r2, r1, r0, lsl #24

0801467c <timer_init>:
 801467c:	880b      	ldrh	r3, [r1, #0]
 801467e:	6283      	str	r3, [r0, #40]	; 0x28
 8014680:	4b26      	ldr	r3, [pc, #152]	; (801471c <timer_init+0xa0>)
 8014682:	4298      	cmp	r0, r3
 8014684:	d018      	beq.n	80146b8 <timer_init+0x3c>
 8014686:	f420 6240 	bic.w	r2, r0, #3072	; 0xc00
 801468a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801468e:	f420 6380 	bic.w	r3, r0, #1024	; 0x400
 8014692:	d011      	beq.n	80146b8 <timer_init+0x3c>
 8014694:	4a22      	ldr	r2, [pc, #136]	; (8014720 <timer_init+0xa4>)
 8014696:	4290      	cmp	r0, r2
 8014698:	d00e      	beq.n	80146b8 <timer_init+0x3c>
 801469a:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 801469e:	4290      	cmp	r0, r2
 80146a0:	d00a      	beq.n	80146b8 <timer_init+0x3c>
 80146a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80146a6:	4293      	cmp	r3, r2
 80146a8:	d006      	beq.n	80146b8 <timer_init+0x3c>
 80146aa:	f5a2 329c 	sub.w	r2, r2, #79872	; 0x13800
 80146ae:	4293      	cmp	r3, r2
 80146b0:	d002      	beq.n	80146b8 <timer_init+0x3c>
 80146b2:	4b1c      	ldr	r3, [pc, #112]	; (8014724 <timer_init+0xa8>)
 80146b4:	4298      	cmp	r0, r3
 80146b6:	d10f      	bne.n	80146d8 <timer_init+0x5c>
 80146b8:	6803      	ldr	r3, [r0, #0]
 80146ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80146be:	6003      	str	r3, [r0, #0]
 80146c0:	884b      	ldrh	r3, [r1, #2]
 80146c2:	6802      	ldr	r2, [r0, #0]
 80146c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80146c8:	4313      	orrs	r3, r2
 80146ca:	6003      	str	r3, [r0, #0]
 80146cc:	888b      	ldrh	r3, [r1, #4]
 80146ce:	6802      	ldr	r2, [r0, #0]
 80146d0:	f003 0310 	and.w	r3, r3, #16
 80146d4:	4313      	orrs	r3, r2
 80146d6:	6003      	str	r3, [r0, #0]
 80146d8:	688b      	ldr	r3, [r1, #8]
 80146da:	62c3      	str	r3, [r0, #44]	; 0x2c
 80146dc:	4b12      	ldr	r3, [pc, #72]	; (8014728 <timer_init+0xac>)
 80146de:	4298      	cmp	r0, r3
 80146e0:	d003      	beq.n	80146ea <timer_init+0x6e>
 80146e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80146e6:	4298      	cmp	r0, r3
 80146e8:	d104      	bne.n	80146f4 <timer_init+0x78>
 80146ea:	6943      	ldr	r3, [r0, #20]
 80146ec:	f043 0301 	orr.w	r3, r3, #1
 80146f0:	6143      	str	r3, [r0, #20]
 80146f2:	4770      	bx	lr
 80146f4:	6803      	ldr	r3, [r0, #0]
 80146f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80146fa:	6003      	str	r3, [r0, #0]
 80146fc:	898b      	ldrh	r3, [r1, #12]
 80146fe:	6802      	ldr	r2, [r0, #0]
 8014700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014704:	4313      	orrs	r3, r2
 8014706:	6003      	str	r3, [r0, #0]
 8014708:	4b04      	ldr	r3, [pc, #16]	; (801471c <timer_init+0xa0>)
 801470a:	4298      	cmp	r0, r3
 801470c:	d002      	beq.n	8014714 <timer_init+0x98>
 801470e:	4b04      	ldr	r3, [pc, #16]	; (8014720 <timer_init+0xa4>)
 8014710:	4298      	cmp	r0, r3
 8014712:	d1ea      	bne.n	80146ea <timer_init+0x6e>
 8014714:	7b8b      	ldrb	r3, [r1, #14]
 8014716:	6303      	str	r3, [r0, #48]	; 0x30
 8014718:	e7e7      	b.n	80146ea <timer_init+0x6e>
 801471a:	bf00      	nop
 801471c:	40012c00 	andmi	r2, r1, r0, lsl #24
 8014720:	40013400 	andmi	r3, r1, r0, lsl #8
 8014724:	40002000 	andmi	r2, r0, r0
 8014728:	40001000 	andmi	r1, r0, r0

0801472c <timer_enable>:
 801472c:	6803      	ldr	r3, [r0, #0]
 801472e:	f043 0301 	orr.w	r3, r3, #1
 8014732:	6003      	str	r3, [r0, #0]
 8014734:	4770      	bx	lr
	...

08014738 <usart_deinit>:
 8014738:	b508      	push	{r3, lr}
 801473a:	4b1d      	ldr	r3, [pc, #116]	; (80147b0 <usart_deinit+0x78>)
 801473c:	4298      	cmp	r0, r3
 801473e:	d028      	beq.n	8014792 <usart_deinit+0x5a>
 8014740:	d808      	bhi.n	8014754 <usart_deinit+0x1c>
 8014742:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014746:	4298      	cmp	r0, r3
 8014748:	d015      	beq.n	8014776 <usart_deinit+0x3e>
 801474a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801474e:	4298      	cmp	r0, r3
 8014750:	d018      	beq.n	8014784 <usart_deinit+0x4c>
 8014752:	bd08      	pop	{r3, pc}
 8014754:	4b17      	ldr	r3, [pc, #92]	; (80147b4 <usart_deinit+0x7c>)
 8014756:	4298      	cmp	r0, r3
 8014758:	d022      	beq.n	80147a0 <usart_deinit+0x68>
 801475a:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 801475e:	4298      	cmp	r0, r3
 8014760:	d1f7      	bne.n	8014752 <usart_deinit+0x1a>
 8014762:	f240 300e 	movw	r0, #782	; 0x30e
 8014766:	f7ff fdf8 	bl	801435a <rcu_periph_reset_enable>
 801476a:	f240 300e 	movw	r0, #782	; 0x30e
 801476e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014772:	f7ff bdf4 	b.w	801435e <rcu_periph_reset_disable>
 8014776:	f240 4011 	movw	r0, #1041	; 0x411
 801477a:	f7ff fdee 	bl	801435a <rcu_periph_reset_enable>
 801477e:	f240 4011 	movw	r0, #1041	; 0x411
 8014782:	e7f4      	b.n	801476e <usart_deinit+0x36>
 8014784:	f240 4012 	movw	r0, #1042	; 0x412
 8014788:	f7ff fde7 	bl	801435a <rcu_periph_reset_enable>
 801478c:	f240 4012 	movw	r0, #1042	; 0x412
 8014790:	e7ed      	b.n	801476e <usart_deinit+0x36>
 8014792:	f240 4013 	movw	r0, #1043	; 0x413
 8014796:	f7ff fde0 	bl	801435a <rcu_periph_reset_enable>
 801479a:	f240 4013 	movw	r0, #1043	; 0x413
 801479e:	e7e6      	b.n	801476e <usart_deinit+0x36>
 80147a0:	f240 4014 	movw	r0, #1044	; 0x414
 80147a4:	f7ff fdd9 	bl	801435a <rcu_periph_reset_enable>
 80147a8:	f240 4014 	movw	r0, #1044	; 0x414
 80147ac:	e7df      	b.n	801476e <usart_deinit+0x36>
 80147ae:	bf00      	nop
 80147b0:	40004c00 	andmi	r4, r0, r0, lsl #24
 80147b4:	40005000 	andmi	r5, r0, r0

080147b8 <usart_baudrate_set>:
 80147b8:	b538      	push	{r3, r4, r5, lr}
 80147ba:	4b11      	ldr	r3, [pc, #68]	; (8014800 <usart_baudrate_set+0x48>)
 80147bc:	4604      	mov	r4, r0
 80147be:	4298      	cmp	r0, r3
 80147c0:	460d      	mov	r5, r1
 80147c2:	d01b      	beq.n	80147fc <usart_baudrate_set+0x44>
 80147c4:	d809      	bhi.n	80147da <usart_baudrate_set+0x22>
 80147c6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80147ca:	4298      	cmp	r0, r3
 80147cc:	d016      	beq.n	80147fc <usart_baudrate_set+0x44>
 80147ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80147d2:	4298      	cmp	r0, r3
 80147d4:	d012      	beq.n	80147fc <usart_baudrate_set+0x44>
 80147d6:	2000      	movs	r0, #0
 80147d8:	e009      	b.n	80147ee <usart_baudrate_set+0x36>
 80147da:	4b0a      	ldr	r3, [pc, #40]	; (8014804 <usart_baudrate_set+0x4c>)
 80147dc:	4298      	cmp	r0, r3
 80147de:	d00d      	beq.n	80147fc <usart_baudrate_set+0x44>
 80147e0:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 80147e4:	4298      	cmp	r0, r3
 80147e6:	d1f6      	bne.n	80147d6 <usart_baudrate_set+0x1e>
 80147e8:	2003      	movs	r0, #3
 80147ea:	f7ff fe5f 	bl	80144ac <rcu_clock_freq_get>
 80147ee:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 80147f2:	fbb3 f1f5 	udiv	r1, r3, r5
 80147f6:	b289      	uxth	r1, r1
 80147f8:	60a1      	str	r1, [r4, #8]
 80147fa:	bd38      	pop	{r3, r4, r5, pc}
 80147fc:	2002      	movs	r0, #2
 80147fe:	e7f4      	b.n	80147ea <usart_baudrate_set+0x32>
 8014800:	40004c00 	andmi	r4, r0, r0, lsl #24
 8014804:	40005000 	andmi	r5, r0, r0

08014808 <usart_parity_config>:
 8014808:	68c2      	ldr	r2, [r0, #12]
 801480a:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 801480e:	60c2      	str	r2, [r0, #12]
 8014810:	68c3      	ldr	r3, [r0, #12]
 8014812:	430b      	orrs	r3, r1
 8014814:	60c3      	str	r3, [r0, #12]
 8014816:	4770      	bx	lr

08014818 <usart_word_length_set>:
 8014818:	68c2      	ldr	r2, [r0, #12]
 801481a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801481e:	60c2      	str	r2, [r0, #12]
 8014820:	68c3      	ldr	r3, [r0, #12]
 8014822:	430b      	orrs	r3, r1
 8014824:	60c3      	str	r3, [r0, #12]
 8014826:	4770      	bx	lr

08014828 <usart_stop_bit_set>:
 8014828:	6902      	ldr	r2, [r0, #16]
 801482a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 801482e:	6102      	str	r2, [r0, #16]
 8014830:	6903      	ldr	r3, [r0, #16]
 8014832:	430b      	orrs	r3, r1
 8014834:	6103      	str	r3, [r0, #16]
 8014836:	4770      	bx	lr

08014838 <usart_transmit_config>:
 8014838:	68c3      	ldr	r3, [r0, #12]
 801483a:	f023 0308 	bic.w	r3, r3, #8
 801483e:	430b      	orrs	r3, r1
 8014840:	60c3      	str	r3, [r0, #12]
 8014842:	4770      	bx	lr

08014844 <usart_receive_config>:
 8014844:	68c3      	ldr	r3, [r0, #12]
 8014846:	f023 0304 	bic.w	r3, r3, #4
 801484a:	430b      	orrs	r3, r1
 801484c:	60c3      	str	r3, [r0, #12]
 801484e:	4770      	bx	lr

08014850 <usart_hardware_flow_rts_config>:
 8014850:	6943      	ldr	r3, [r0, #20]
 8014852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014856:	430b      	orrs	r3, r1
 8014858:	6143      	str	r3, [r0, #20]
 801485a:	4770      	bx	lr

0801485c <usart_hardware_flow_cts_config>:
 801485c:	6943      	ldr	r3, [r0, #20]
 801485e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014862:	430b      	orrs	r3, r1
 8014864:	6143      	str	r3, [r0, #20]
 8014866:	4770      	bx	lr

08014868 <usart_flag_get>:
 8014868:	098b      	lsrs	r3, r1, #6
 801486a:	5818      	ldr	r0, [r3, r0]
 801486c:	f001 011f 	and.w	r1, r1, #31
 8014870:	40c8      	lsrs	r0, r1
 8014872:	f000 0001 	and.w	r0, r0, #1
 8014876:	4770      	bx	lr

08014878 <emac_start>:
 8014878:	b510      	push	{r4, lr}
 801487a:	4604      	mov	r4, r0
 801487c:	f240 6002 	movw	r0, #1538	; 0x602
 8014880:	f7ff fd4e 	bl	8014320 <rcu_periph_clock_enable>
 8014884:	f240 6003 	movw	r0, #1539	; 0x603
 8014888:	f7ff fd4a 	bl	8014320 <rcu_periph_clock_enable>
 801488c:	f240 6004 	movw	r0, #1540	; 0x604
 8014890:	f7ff fd46 	bl	8014320 <rcu_periph_clock_enable>
 8014894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014898:	2203      	movs	r2, #3
 801489a:	2118      	movs	r1, #24
 801489c:	484d      	ldr	r0, [pc, #308]	; (80149d4 <emac_start+0x15c>)
 801489e:	f7ff fcaf 	bl	8014200 <gpio_init>
 80148a2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 80148a6:	f7ff fd3b 	bl	8014320 <rcu_periph_clock_enable>
 80148aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80148ae:	f7ff fd63 	bl	8014378 <rcu_pll2_config>
 80148b2:	201c      	movs	r0, #28
 80148b4:	f7ff fdf8 	bl	80144a8 <rcu_osci_on>
 80148b8:	201c      	movs	r0, #28
 80148ba:	f7ff fd95 	bl	80143e8 <rcu_osci_stab_wait>
 80148be:	f04f 6030 	mov.w	r0, #184549376	; 0xb000000
 80148c2:	f7ff fd4f 	bl	8014364 <rcu_ckout0_config>
 80148c6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80148ca:	f7ff fd1d 	bl	8014308 <gpio_ethernet_phy_select>
 80148ce:	2302      	movs	r3, #2
 80148d0:	2203      	movs	r2, #3
 80148d2:	2104      	movs	r1, #4
 80148d4:	483f      	ldr	r0, [pc, #252]	; (80149d4 <emac_start+0x15c>)
 80148d6:	f7ff fc93 	bl	8014200 <gpio_init>
 80148da:	2304      	movs	r3, #4
 80148dc:	2203      	movs	r2, #3
 80148de:	2118      	movs	r1, #24
 80148e0:	483c      	ldr	r0, [pc, #240]	; (80149d4 <emac_start+0x15c>)
 80148e2:	f7ff fc8d 	bl	8014200 <gpio_init>
 80148e6:	2380      	movs	r3, #128	; 0x80
 80148e8:	2203      	movs	r2, #3
 80148ea:	2104      	movs	r1, #4
 80148ec:	4839      	ldr	r0, [pc, #228]	; (80149d4 <emac_start+0x15c>)
 80148ee:	f7ff fc87 	bl	8014200 <gpio_init>
 80148f2:	2302      	movs	r3, #2
 80148f4:	2203      	movs	r2, #3
 80148f6:	2118      	movs	r1, #24
 80148f8:	4837      	ldr	r0, [pc, #220]	; (80149d8 <emac_start+0x160>)
 80148fa:	f7ff fc81 	bl	8014200 <gpio_init>
 80148fe:	2310      	movs	r3, #16
 8014900:	2203      	movs	r2, #3
 8014902:	2104      	movs	r1, #4
 8014904:	4834      	ldr	r0, [pc, #208]	; (80149d8 <emac_start+0x160>)
 8014906:	f7ff fc7b 	bl	8014200 <gpio_init>
 801490a:	2320      	movs	r3, #32
 801490c:	2203      	movs	r2, #3
 801490e:	2104      	movs	r1, #4
 8014910:	4831      	ldr	r0, [pc, #196]	; (80149d8 <emac_start+0x160>)
 8014912:	f7ff fc75 	bl	8014200 <gpio_init>
 8014916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801491a:	2203      	movs	r2, #3
 801491c:	2118      	movs	r1, #24
 801491e:	482f      	ldr	r0, [pc, #188]	; (80149dc <emac_start+0x164>)
 8014920:	f7ff fc6e 	bl	8014200 <gpio_init>
 8014924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014928:	2203      	movs	r2, #3
 801492a:	2118      	movs	r1, #24
 801492c:	482b      	ldr	r0, [pc, #172]	; (80149dc <emac_start+0x164>)
 801492e:	f7ff fc67 	bl	8014200 <gpio_init>
 8014932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014936:	2203      	movs	r2, #3
 8014938:	2118      	movs	r1, #24
 801493a:	4828      	ldr	r0, [pc, #160]	; (80149dc <emac_start+0x164>)
 801493c:	f7ff fc60 	bl	8014200 <gpio_init>
 8014940:	f240 500e 	movw	r0, #1294	; 0x50e
 8014944:	f7ff fcec 	bl	8014320 <rcu_periph_clock_enable>
 8014948:	f240 500f 	movw	r0, #1295	; 0x50f
 801494c:	f7ff fce8 	bl	8014320 <rcu_periph_clock_enable>
 8014950:	f44f 60a2 	mov.w	r0, #1296	; 0x510
 8014954:	f7ff fce4 	bl	8014320 <rcu_periph_clock_enable>
 8014958:	f001 f8c4 	bl	8015ae4 <enet_deinit>
 801495c:	f000 fd1e 	bl	801539c <enet_software_reset>
 8014960:	b900      	cbnz	r0, 8014964 <emac_start+0xec>
 8014962:	e7fe      	b.n	8014962 <emac_start+0xea>
 8014964:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014968:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801496c:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8014970:	f000 fe98 	bl	80156a4 <enet_init>
 8014974:	4b1a      	ldr	r3, [pc, #104]	; (80149e0 <emac_start+0x168>)
 8014976:	6018      	str	r0, [r3, #0]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	b903      	cbnz	r3, 801497e <emac_start+0x106>
 801497c:	e7fe      	b.n	801497c <emac_start+0x104>
 801497e:	2102      	movs	r1, #2
 8014980:	4a18      	ldr	r2, [pc, #96]	; (80149e4 <emac_start+0x16c>)
 8014982:	2000      	movs	r0, #0
 8014984:	f8d2 37ec 	ldr.w	r3, [r2, #2028]	; 0x7ec
 8014988:	f8d2 27f0 	ldr.w	r2, [r2, #2032]	; 0x7f0
 801498c:	7021      	strb	r1, [r4, #0]
 801498e:	0a19      	lsrs	r1, r3, #8
 8014990:	7061      	strb	r1, [r4, #1]
 8014992:	7122      	strb	r2, [r4, #4]
 8014994:	0c19      	lsrs	r1, r3, #16
 8014996:	0a12      	lsrs	r2, r2, #8
 8014998:	0e1b      	lsrs	r3, r3, #24
 801499a:	70e3      	strb	r3, [r4, #3]
 801499c:	7162      	strb	r2, [r4, #5]
 801499e:	70a1      	strb	r1, [r4, #2]
 80149a0:	4621      	mov	r1, r4
 80149a2:	f000 fddf 	bl	8015564 <enet_mac_address_set>
 80149a6:	f44f 00e0 	mov.w	r0, #7340032	; 0x700000
 80149aa:	f000 fd0b 	bl	80153c4 <enet_descriptors_chain_init>
 80149ae:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 80149b2:	f000 fd07 	bl	80153c4 <enet_descriptors_chain_init>
 80149b6:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 80149ba:	480b      	ldr	r0, [pc, #44]	; (80149e8 <emac_start+0x170>)
 80149bc:	f000 fdcc 	bl	8015558 <enet_transmit_checksum_config>
 80149c0:	f44f 0140 	mov.w	r1, #12582912	; 0xc00000
 80149c4:	4809      	ldr	r0, [pc, #36]	; (80149ec <emac_start+0x174>)
 80149c6:	f000 fdc7 	bl	8015558 <enet_transmit_checksum_config>
 80149ca:	f001 f803 	bl	80159d4 <enet_enable>
 80149ce:	2001      	movs	r0, #1
 80149d0:	bd10      	pop	{r4, pc}
 80149d2:	bf00      	nop
 80149d4:	40010800 	andmi	r0, r1, r0, lsl #16
 80149d8:	40011000 	andmi	r1, r1, r0
 80149dc:	40010c00 	andmi	r0, r1, r0, lsl #24
 80149e0:	2000a980 	andcs	sl, r0, r0, lsl #19
 80149e4:	1ffff000 	svcne	0x00fff000
 80149e8:	200159d4 	ldrdcs	r5, [r1], -r4
 80149ec:	200159e4 	andcs	r5, r1, r4, ror #19

080149f0 <emac_eth_recv>:
 80149f0:	b538      	push	{r3, r4, r5, lr}
 80149f2:	4605      	mov	r5, r0
 80149f4:	f001 f846 	bl	8015a84 <enet_rxframe_size_get>
 80149f8:	4604      	mov	r4, r0
 80149fa:	b138      	cbz	r0, 8014a0c <emac_eth_recv+0x1c>
 80149fc:	4b05      	ldr	r3, [pc, #20]	; (8014a14 <emac_eth_recv+0x24>)
 80149fe:	2105      	movs	r1, #5
 8014a00:	6818      	ldr	r0, [r3, #0]
 8014a02:	f000 ffee 	bl	80159e2 <enet_desc_information_get>
 8014a06:	6028      	str	r0, [r5, #0]
 8014a08:	4620      	mov	r0, r4
 8014a0a:	bd38      	pop	{r3, r4, r5, pc}
 8014a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a10:	e7fb      	b.n	8014a0a <emac_eth_recv+0x1a>
 8014a12:	bf00      	nop
 8014a14:	20012990 	mulcs	r1, r0, r9

08014a18 <emac_free_pkt>:
 8014a18:	2100      	movs	r1, #0
 8014a1a:	4608      	mov	r0, r1
 8014a1c:	f000 bd1a 	b.w	8015454 <enet_frame_receive>

08014a20 <emac_eth_send>:
 8014a20:	f000 bd58 	b.w	80154d4 <enet_frame_transmit>

08014a24 <gd32_adc_init()>:
 8014a24:	b510      	push	{r4, lr}
 8014a26:	f240 6009 	movw	r0, #1545	; 0x609
 8014a2a:	4c21      	ldr	r4, [pc, #132]	; (8014ab0 <gd32_adc_init()+0x8c>)
 8014a2c:	f7ff fc78 	bl	8014320 <rcu_periph_clock_enable>
 8014a30:	2005      	movs	r0, #5
 8014a32:	f7ff fcad 	bl	8014390 <rcu_adc_clock_config>
 8014a36:	4620      	mov	r0, r4
 8014a38:	2201      	movs	r2, #1
 8014a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014a3e:	f000 fb51 	bl	80150e4 <adc_special_function_config>
 8014a42:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8014a46:	4620      	mov	r0, r4
 8014a48:	2102      	movs	r1, #2
 8014a4a:	f000 fbeb 	bl	8015224 <adc_external_trigger_source_config>
 8014a4e:	2100      	movs	r1, #0
 8014a50:	4620      	mov	r0, r4
 8014a52:	f000 fb6f 	bl	8015134 <adc_data_alignment_config>
 8014a56:	2000      	movs	r0, #0
 8014a58:	f000 fb34 	bl	80150c4 <adc_mode_config>
 8014a5c:	2202      	movs	r2, #2
 8014a5e:	4620      	mov	r0, r4
 8014a60:	4611      	mov	r1, r2
 8014a62:	f000 fb93 	bl	801518c <adc_channel_length_config>
 8014a66:	4620      	mov	r0, r4
 8014a68:	2307      	movs	r3, #7
 8014a6a:	2210      	movs	r2, #16
 8014a6c:	2100      	movs	r1, #0
 8014a6e:	f000 fbaa 	bl	80151c6 <adc_inserted_channel_config>
 8014a72:	2307      	movs	r3, #7
 8014a74:	4620      	mov	r0, r4
 8014a76:	2211      	movs	r2, #17
 8014a78:	2101      	movs	r1, #1
 8014a7a:	f000 fba4 	bl	80151c6 <adc_inserted_channel_config>
 8014a7e:	2201      	movs	r2, #1
 8014a80:	2102      	movs	r1, #2
 8014a82:	4620      	mov	r0, r4
 8014a84:	f000 fbdf 	bl	8015246 <adc_external_trigger_config>
 8014a88:	f000 fb76 	bl	8015178 <adc_tempsensor_vrefint_enable>
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	f000 fb5a 	bl	8015146 <adc_enable>
 8014a92:	2100      	movs	r1, #0
 8014a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a98:	f000 fafc 	bl	8015094 <udelay(unsigned int, unsigned int)>
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	f000 fb5a 	bl	8015156 <adc_calibration_enable>
 8014aa2:	4620      	mov	r0, r4
 8014aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014aa8:	2102      	movs	r1, #2
 8014aaa:	f000 bbe7 	b.w	801527c <adc_software_trigger_enable>
 8014aae:	bf00      	nop
 8014ab0:	40012400 	andmi	r2, r1, r0, lsl #8

08014ab4 <_stop() [clone .isra.0]>:
 8014ab4:	b508      	push	{r3, lr}
 8014ab6:	4806      	ldr	r0, [pc, #24]	; (8014ad0 <_stop() [clone .isra.0]+0x1c>)
 8014ab8:	f001 f8a4 	bl	8015c04 <i2c_stop_on_bus>
 8014abc:	f640 73ff 	movw	r3, #4095	; 0xfff
 8014ac0:	4a04      	ldr	r2, [pc, #16]	; (8014ad4 <_stop() [clone .isra.0]+0x20>)
 8014ac2:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 8014ac6:	0589      	lsls	r1, r1, #22
 8014ac8:	d501      	bpl.n	8014ace <_stop() [clone .isra.0]+0x1a>
 8014aca:	3b01      	subs	r3, #1
 8014acc:	d1f9      	bne.n	8014ac2 <_stop() [clone .isra.0]+0xe>
 8014ace:	bd08      	pop	{r3, pc}
 8014ad0:	40005400 	andmi	r5, r0, r0, lsl #8
 8014ad4:	40005000 	andmi	r5, r0, r0

08014ad8 <gd32_i2c_begin()>:
 8014ad8:	b510      	push	{r4, lr}
 8014ada:	f240 7015 	movw	r0, #1813	; 0x715
 8014ade:	f7ff fc1f 	bl	8014320 <rcu_periph_clock_enable>
 8014ae2:	4c15      	ldr	r4, [pc, #84]	; (8014b38 <gd32_i2c_begin()+0x60>)
 8014ae4:	f240 6003 	movw	r0, #1539	; 0x603
 8014ae8:	f7ff fc1a 	bl	8014320 <rcu_periph_clock_enable>
 8014aec:	f240 6003 	movw	r0, #1539	; 0x603
 8014af0:	f7ff fc16 	bl	8014320 <rcu_periph_clock_enable>
 8014af4:	4620      	mov	r0, r4
 8014af6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014afa:	2203      	movs	r2, #3
 8014afc:	211c      	movs	r1, #28
 8014afe:	f7ff fb7f 	bl	8014200 <gpio_init>
 8014b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014b06:	2203      	movs	r2, #3
 8014b08:	4620      	mov	r0, r4
 8014b0a:	211c      	movs	r1, #28
 8014b0c:	f7ff fb78 	bl	8014200 <gpio_init>
 8014b10:	f5a4 4438 	sub.w	r4, r4, #47104	; 0xb800
 8014b14:	2101      	movs	r1, #1
 8014b16:	2002      	movs	r0, #2
 8014b18:	f7ff fbc6 	bl	80142a8 <gpio_pin_remap_config>
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	4907      	ldr	r1, [pc, #28]	; (8014b3c <gd32_i2c_begin()+0x64>)
 8014b20:	2200      	movs	r2, #0
 8014b22:	f000 ffed 	bl	8015b00 <i2c_clock_config>
 8014b26:	4620      	mov	r0, r4
 8014b28:	f001 f862 	bl	8015bf0 <i2c_enable>
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b32:	2101      	movs	r1, #1
 8014b34:	f001 b842 	b.w	8015bbc <i2c_ack_config>
 8014b38:	40010c00 	andmi	r0, r1, r0, lsl #24
 8014b3c:	00061a80 	andeq	r1, r6, r0, lsl #21

08014b40 <gd32_i2c_set_baudrate(unsigned int)>:
 8014b40:	4601      	mov	r1, r0
 8014b42:	2200      	movs	r2, #0
 8014b44:	4801      	ldr	r0, [pc, #4]	; (8014b4c <gd32_i2c_set_baudrate(unsigned int)+0xc>)
 8014b46:	f000 bfdb 	b.w	8015b00 <i2c_clock_config>
 8014b4a:	bf00      	nop
 8014b4c:	40005400 	andmi	r5, r0, r0, lsl #8

08014b50 <gd32_i2c_set_address(unsigned char)>:
 8014b50:	4b01      	ldr	r3, [pc, #4]	; (8014b58 <gd32_i2c_set_address(unsigned char)+0x8>)
 8014b52:	0040      	lsls	r0, r0, #1
 8014b54:	7018      	strb	r0, [r3, #0]
 8014b56:	4770      	bx	lr
 8014b58:	2000a984 	andcs	sl, r0, r4, lsl #19

08014b5c <gd32_i2c_write(char const*, unsigned int)>:
 8014b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b5e:	4604      	mov	r4, r0
 8014b60:	460f      	mov	r7, r1
 8014b62:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014b66:	4e2e      	ldr	r6, [pc, #184]	; (8014c20 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014b68:	f240 6101 	movw	r1, #1537	; 0x601
 8014b6c:	4630      	mov	r0, r6
 8014b6e:	f001 f853 	bl	8015c18 <i2c_flag_get>
 8014b72:	b138      	cbz	r0, 8014b84 <gd32_i2c_write(char const*, unsigned int)+0x28>
 8014b74:	3d01      	subs	r5, #1
 8014b76:	d1f7      	bne.n	8014b68 <gd32_i2c_write(char const*, unsigned int)+0xc>
 8014b78:	f7ff ff9c 	bl	8014ab4 <_stop() [clone .isra.0]>
 8014b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b80:	4240      	negs	r0, r0
 8014b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b84:	4826      	ldr	r0, [pc, #152]	; (8014c20 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014b86:	f001 f838 	bl	8015bfa <i2c_start_on_bus>
 8014b8a:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014b8e:	4e24      	ldr	r6, [pc, #144]	; (8014c20 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014b90:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014b94:	4630      	mov	r0, r6
 8014b96:	f001 f83f 	bl	8015c18 <i2c_flag_get>
 8014b9a:	bb68      	cbnz	r0, 8014bf8 <gd32_i2c_write(char const*, unsigned int)+0x9c>
 8014b9c:	3d01      	subs	r5, #1
 8014b9e:	d1f7      	bne.n	8014b90 <gd32_i2c_write(char const*, unsigned int)+0x34>
 8014ba0:	e7ea      	b.n	8014b78 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8014ba2:	f240 5101 	movw	r1, #1281	; 0x501
 8014ba6:	481e      	ldr	r0, [pc, #120]	; (8014c20 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014ba8:	f001 f83e 	bl	8015c28 <i2c_flag_clear>
 8014bac:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014bb0:	4e1b      	ldr	r6, [pc, #108]	; (8014c20 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014bb2:	f240 5107 	movw	r1, #1287	; 0x507
 8014bb6:	4630      	mov	r0, r6
 8014bb8:	f001 f82e 	bl	8015c18 <i2c_flag_get>
 8014bbc:	2801      	cmp	r0, #1
 8014bbe:	d114      	bne.n	8014bea <gd32_i2c_write(char const*, unsigned int)+0x8e>
 8014bc0:	4e17      	ldr	r6, [pc, #92]	; (8014c20 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014bc2:	4427      	add	r7, r4
 8014bc4:	42a7      	cmp	r7, r4
 8014bc6:	d013      	beq.n	8014bf0 <gd32_i2c_write(char const*, unsigned int)+0x94>
 8014bc8:	4630      	mov	r0, r6
 8014bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bce:	f001 f81e 	bl	8015c0e <i2c_data_transmit>
 8014bd2:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014bd6:	f240 5102 	movw	r1, #1282	; 0x502
 8014bda:	4630      	mov	r0, r6
 8014bdc:	f001 f81c 	bl	8015c18 <i2c_flag_get>
 8014be0:	2800      	cmp	r0, #0
 8014be2:	d1ef      	bne.n	8014bc4 <gd32_i2c_write(char const*, unsigned int)+0x68>
 8014be4:	3d01      	subs	r5, #1
 8014be6:	d1f6      	bne.n	8014bd6 <gd32_i2c_write(char const*, unsigned int)+0x7a>
 8014be8:	e7c6      	b.n	8014b78 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8014bea:	3d01      	subs	r5, #1
 8014bec:	d1e1      	bne.n	8014bb2 <gd32_i2c_write(char const*, unsigned int)+0x56>
 8014bee:	e7c3      	b.n	8014b78 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8014bf0:	f7ff ff60 	bl	8014ab4 <_stop() [clone .isra.0]>
 8014bf4:	2000      	movs	r0, #0
 8014bf6:	e7c3      	b.n	8014b80 <gd32_i2c_write(char const*, unsigned int)+0x24>
 8014bf8:	4b0a      	ldr	r3, [pc, #40]	; (8014c24 <gd32_i2c_write(char const*, unsigned int)+0xc8>)
 8014bfa:	f06f 0201 	mvn.w	r2, #1
 8014bfe:	7819      	ldrb	r1, [r3, #0]
 8014c00:	4807      	ldr	r0, [pc, #28]	; (8014c20 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014c02:	f000 ffed 	bl	8015be0 <i2c_master_addressing>
 8014c06:	f640 75ff 	movw	r5, #4095	; 0xfff
 8014c0a:	4e05      	ldr	r6, [pc, #20]	; (8014c20 <gd32_i2c_write(char const*, unsigned int)+0xc4>)
 8014c0c:	f240 5101 	movw	r1, #1281	; 0x501
 8014c10:	4630      	mov	r0, r6
 8014c12:	f001 f801 	bl	8015c18 <i2c_flag_get>
 8014c16:	2800      	cmp	r0, #0
 8014c18:	d1c3      	bne.n	8014ba2 <gd32_i2c_write(char const*, unsigned int)+0x46>
 8014c1a:	3d01      	subs	r5, #1
 8014c1c:	d1f6      	bne.n	8014c0c <gd32_i2c_write(char const*, unsigned int)+0xb0>
 8014c1e:	e7ab      	b.n	8014b78 <gd32_i2c_write(char const*, unsigned int)+0x1c>
 8014c20:	40005400 	andmi	r5, r0, r0, lsl #8
 8014c24:	2000a984 	andcs	sl, r0, r4, lsl #19

08014c28 <gd32_i2c_read(char*, unsigned int)>:
 8014c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c2c:	4680      	mov	r8, r0
 8014c2e:	460c      	mov	r4, r1
 8014c30:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014c34:	4f49      	ldr	r7, [pc, #292]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014c36:	f240 6101 	movw	r1, #1537	; 0x601
 8014c3a:	4638      	mov	r0, r7
 8014c3c:	f000 ffec 	bl	8015c18 <i2c_flag_get>
 8014c40:	4605      	mov	r5, r0
 8014c42:	b128      	cbz	r0, 8014c50 <gd32_i2c_read(char*, unsigned int)+0x28>
 8014c44:	3e01      	subs	r6, #1
 8014c46:	d1f6      	bne.n	8014c36 <gd32_i2c_read(char*, unsigned int)+0xe>
 8014c48:	f7ff ff34 	bl	8014ab4 <_stop() [clone .isra.0]>
 8014c4c:	2504      	movs	r5, #4
 8014c4e:	e082      	b.n	8014d56 <gd32_i2c_read(char*, unsigned int)+0x12e>
 8014c50:	2c02      	cmp	r4, #2
 8014c52:	d103      	bne.n	8014c5c <gd32_i2c_read(char*, unsigned int)+0x34>
 8014c54:	4601      	mov	r1, r0
 8014c56:	4841      	ldr	r0, [pc, #260]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014c58:	f000 ffb9 	bl	8015bce <i2c_ackpos_config>
 8014c5c:	483f      	ldr	r0, [pc, #252]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014c5e:	f000 ffcc 	bl	8015bfa <i2c_start_on_bus>
 8014c62:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014c66:	4f3d      	ldr	r7, [pc, #244]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014c68:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8014c6c:	4638      	mov	r0, r7
 8014c6e:	f000 ffd3 	bl	8015c18 <i2c_flag_get>
 8014c72:	b910      	cbnz	r0, 8014c7a <gd32_i2c_read(char*, unsigned int)+0x52>
 8014c74:	3e01      	subs	r6, #1
 8014c76:	d1f7      	bne.n	8014c68 <gd32_i2c_read(char*, unsigned int)+0x40>
 8014c78:	e7e6      	b.n	8014c48 <gd32_i2c_read(char*, unsigned int)+0x20>
 8014c7a:	4b39      	ldr	r3, [pc, #228]	; (8014d60 <gd32_i2c_read(char*, unsigned int)+0x138>)
 8014c7c:	2201      	movs	r2, #1
 8014c7e:	7819      	ldrb	r1, [r3, #0]
 8014c80:	4836      	ldr	r0, [pc, #216]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014c82:	f000 ffad 	bl	8015be0 <i2c_master_addressing>
 8014c86:	2c02      	cmp	r4, #2
 8014c88:	d803      	bhi.n	8014c92 <gd32_i2c_read(char*, unsigned int)+0x6a>
 8014c8a:	2100      	movs	r1, #0
 8014c8c:	4833      	ldr	r0, [pc, #204]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014c8e:	f000 ff95 	bl	8015bbc <i2c_ack_config>
 8014c92:	f640 76ff 	movw	r6, #4095	; 0xfff
 8014c96:	4f31      	ldr	r7, [pc, #196]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014c98:	f240 5101 	movw	r1, #1281	; 0x501
 8014c9c:	4638      	mov	r0, r7
 8014c9e:	f000 ffbb 	bl	8015c18 <i2c_flag_get>
 8014ca2:	b910      	cbnz	r0, 8014caa <gd32_i2c_read(char*, unsigned int)+0x82>
 8014ca4:	3e01      	subs	r6, #1
 8014ca6:	d1f7      	bne.n	8014c98 <gd32_i2c_read(char*, unsigned int)+0x70>
 8014ca8:	e7ce      	b.n	8014c48 <gd32_i2c_read(char*, unsigned int)+0x20>
 8014caa:	f240 5101 	movw	r1, #1281	; 0x501
 8014cae:	482b      	ldr	r0, [pc, #172]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014cb0:	f000 ffba 	bl	8015c28 <i2c_flag_clear>
 8014cb4:	2c01      	cmp	r4, #1
 8014cb6:	d102      	bne.n	8014cbe <gd32_i2c_read(char*, unsigned int)+0x96>
 8014cb8:	4828      	ldr	r0, [pc, #160]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014cba:	f000 ffa3 	bl	8015c04 <i2c_stop_on_bus>
 8014cbe:	f640 77ff 	movw	r7, #4095	; 0xfff
 8014cc2:	4e26      	ldr	r6, [pc, #152]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014cc4:	b3ac      	cbz	r4, 8014d32 <gd32_i2c_read(char*, unsigned int)+0x10a>
 8014cc6:	2c03      	cmp	r4, #3
 8014cc8:	d121      	bne.n	8014d0e <gd32_i2c_read(char*, unsigned int)+0xe6>
 8014cca:	f640 79ff 	movw	r9, #4095	; 0xfff
 8014cce:	f240 5102 	movw	r1, #1282	; 0x502
 8014cd2:	4630      	mov	r0, r6
 8014cd4:	f000 ffa0 	bl	8015c18 <i2c_flag_get>
 8014cd8:	b918      	cbnz	r0, 8014ce2 <gd32_i2c_read(char*, unsigned int)+0xba>
 8014cda:	f1b9 0901 	subs.w	r9, r9, #1
 8014cde:	d1f6      	bne.n	8014cce <gd32_i2c_read(char*, unsigned int)+0xa6>
 8014ce0:	e7b2      	b.n	8014c48 <gd32_i2c_read(char*, unsigned int)+0x20>
 8014ce2:	2100      	movs	r1, #0
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	f000 ff69 	bl	8015bbc <i2c_ack_config>
 8014cea:	f240 5106 	movw	r1, #1286	; 0x506
 8014cee:	4630      	mov	r0, r6
 8014cf0:	f000 ff92 	bl	8015c18 <i2c_flag_get>
 8014cf4:	b138      	cbz	r0, 8014d06 <gd32_i2c_read(char*, unsigned int)+0xde>
 8014cf6:	4630      	mov	r0, r6
 8014cf8:	f000 ff8b 	bl	8015c12 <i2c_data_receive>
 8014cfc:	f640 77ff 	movw	r7, #4095	; 0xfff
 8014d00:	f808 0b01 	strb.w	r0, [r8], #1
 8014d04:	3c01      	subs	r4, #1
 8014d06:	3f01      	subs	r7, #1
 8014d08:	2f00      	cmp	r7, #0
 8014d0a:	dcdb      	bgt.n	8014cc4 <gd32_i2c_read(char*, unsigned int)+0x9c>
 8014d0c:	e79c      	b.n	8014c48 <gd32_i2c_read(char*, unsigned int)+0x20>
 8014d0e:	2c02      	cmp	r4, #2
 8014d10:	d1eb      	bne.n	8014cea <gd32_i2c_read(char*, unsigned int)+0xc2>
 8014d12:	f640 79ff 	movw	r9, #4095	; 0xfff
 8014d16:	f240 5102 	movw	r1, #1282	; 0x502
 8014d1a:	4630      	mov	r0, r6
 8014d1c:	f000 ff7c 	bl	8015c18 <i2c_flag_get>
 8014d20:	b918      	cbnz	r0, 8014d2a <gd32_i2c_read(char*, unsigned int)+0x102>
 8014d22:	f1b9 0901 	subs.w	r9, r9, #1
 8014d26:	d1f6      	bne.n	8014d16 <gd32_i2c_read(char*, unsigned int)+0xee>
 8014d28:	e78e      	b.n	8014c48 <gd32_i2c_read(char*, unsigned int)+0x20>
 8014d2a:	4630      	mov	r0, r6
 8014d2c:	f000 ff6a 	bl	8015c04 <i2c_stop_on_bus>
 8014d30:	e7db      	b.n	8014cea <gd32_i2c_read(char*, unsigned int)+0xc2>
 8014d32:	f640 73ff 	movw	r3, #4095	; 0xfff
 8014d36:	4a0b      	ldr	r2, [pc, #44]	; (8014d64 <gd32_i2c_read(char*, unsigned int)+0x13c>)
 8014d38:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
 8014d3c:	0589      	lsls	r1, r1, #22
 8014d3e:	d502      	bpl.n	8014d46 <gd32_i2c_read(char*, unsigned int)+0x11e>
 8014d40:	3b01      	subs	r3, #1
 8014d42:	d1f9      	bne.n	8014d38 <gd32_i2c_read(char*, unsigned int)+0x110>
 8014d44:	e782      	b.n	8014c4c <gd32_i2c_read(char*, unsigned int)+0x24>
 8014d46:	2101      	movs	r1, #1
 8014d48:	4804      	ldr	r0, [pc, #16]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014d4a:	f000 ff37 	bl	8015bbc <i2c_ack_config>
 8014d4e:	2101      	movs	r1, #1
 8014d50:	4802      	ldr	r0, [pc, #8]	; (8014d5c <gd32_i2c_read(char*, unsigned int)+0x134>)
 8014d52:	f000 ff3c 	bl	8015bce <i2c_ackpos_config>
 8014d56:	4628      	mov	r0, r5
 8014d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d5c:	40005400 	andmi	r5, r0, r0, lsl #8
 8014d60:	2000a984 	andcs	sl, r0, r4, lsl #19
 8014d64:	40005000 	andmi	r5, r0, r0

08014d68 <gd32_spi_dma_begin()>:
 8014d68:	b530      	push	{r4, r5, lr}
 8014d6a:	f240 6002 	movw	r0, #1538	; 0x602
 8014d6e:	b089      	sub	sp, #36	; 0x24
 8014d70:	f7ff fad6 	bl	8014320 <rcu_periph_clock_enable>
 8014d74:	f240 6003 	movw	r0, #1539	; 0x603
 8014d78:	f7ff fad2 	bl	8014320 <rcu_periph_clock_enable>
 8014d7c:	f240 700f 	movw	r0, #1807	; 0x70f
 8014d80:	f7ff face 	bl	8014320 <rcu_periph_clock_enable>
 8014d84:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8014d88:	f7ff faca 	bl	8014320 <rcu_periph_clock_enable>
 8014d8c:	2338      	movs	r3, #56	; 0x38
 8014d8e:	2203      	movs	r2, #3
 8014d90:	2118      	movs	r1, #24
 8014d92:	4827      	ldr	r0, [pc, #156]	; (8014e30 <gd32_spi_dma_begin()+0xc8>)
 8014d94:	f7ff fa34 	bl	8014200 <gpio_init>
 8014d98:	4c26      	ldr	r4, [pc, #152]	; (8014e34 <gd32_spi_dma_begin()+0xcc>)
 8014d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014d9e:	2203      	movs	r2, #3
 8014da0:	2118      	movs	r1, #24
 8014da2:	4825      	ldr	r0, [pc, #148]	; (8014e38 <gd32_spi_dma_begin()+0xd0>)
 8014da4:	f7ff fa2c 	bl	8014200 <gpio_init>
 8014da8:	2101      	movs	r1, #1
 8014daa:	4824      	ldr	r0, [pc, #144]	; (8014e3c <gd32_spi_dma_begin()+0xd4>)
 8014dac:	f7ff fa7c 	bl	80142a8 <gpio_pin_remap_config>
 8014db0:	4620      	mov	r0, r4
 8014db2:	f000 ffb8 	bl	8015d26 <i2s_disable>
 8014db6:	2300      	movs	r3, #0
 8014db8:	4620      	mov	r0, r4
 8014dba:	461a      	mov	r2, r3
 8014dbc:	4920      	ldr	r1, [pc, #128]	; (8014e40 <gd32_spi_dma_begin()+0xd8>)
 8014dbe:	f000 ff55 	bl	8015c6c <i2s_psc_config>
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	2210      	movs	r2, #16
 8014dc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014dca:	4620      	mov	r0, r4
 8014dcc:	f000 ff3f 	bl	8015c4e <i2s_init>
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	f000 ffa3 	bl	8015d1c <i2s_enable>
 8014dd6:	f504 34e4 	add.w	r4, r4, #116736	; 0x1c800
 8014dda:	f240 5001 	movw	r0, #1281	; 0x501
 8014dde:	f7ff fa9f 	bl	8014320 <rcu_periph_clock_enable>
 8014de2:	4620      	mov	r0, r4
 8014de4:	2101      	movs	r1, #1
 8014de6:	f000 fa57 	bl	8015298 <dma_deinit>
 8014dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014dee:	2501      	movs	r5, #1
 8014df0:	9304      	str	r3, [sp, #16]
 8014df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014dfa:	4912      	ldr	r1, [pc, #72]	; (8014e44 <gd32_spi_dma_begin()+0xdc>)
 8014dfc:	4620      	mov	r0, r4
 8014dfe:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8014e02:	9206      	str	r2, [sp, #24]
 8014e04:	4629      	mov	r1, r5
 8014e06:	aa01      	add	r2, sp, #4
 8014e08:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014e0c:	f88d 501e 	strb.w	r5, [sp, #30]
 8014e10:	f000 fa5e 	bl	80152d0 <dma_init>
 8014e14:	4629      	mov	r1, r5
 8014e16:	4620      	mov	r0, r4
 8014e18:	f000 fa94 	bl	8015344 <dma_circulation_disable>
 8014e1c:	4629      	mov	r1, r5
 8014e1e:	4620      	mov	r0, r4
 8014e20:	f000 faa0 	bl	8015364 <dma_memory_to_memory_disable>
 8014e24:	2200      	movs	r2, #0
 8014e26:	4b08      	ldr	r3, [pc, #32]	; (8014e48 <gd32_spi_dma_begin()+0xe0>)
 8014e28:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8014e2c:	b009      	add	sp, #36	; 0x24
 8014e2e:	bd30      	pop	{r4, r5, pc}
 8014e30:	40010c00 	andmi	r0, r1, r0, lsl #24
 8014e34:	40003c00 	andmi	r3, r0, r0, lsl #24
 8014e38:	40010800 	andmi	r0, r1, r0, lsl #16
 8014e3c:	00300400 	eorseq	r0, r0, r0, lsl #8
 8014e40:	00030d40 	andeq	r0, r3, r0, asr #26
 8014e44:	40003c0c 	andmi	r3, r0, ip, lsl #24
 8014e48:	40020000 	andmi	r0, r2, r0

08014e4c <gd32_spi_dma_set_speed_hz(unsigned int)>:
 8014e4c:	b538      	push	{r3, r4, r5, lr}
 8014e4e:	4c08      	ldr	r4, [pc, #32]	; (8014e70 <gd32_spi_dma_set_speed_hz(unsigned int)+0x24>)
 8014e50:	4605      	mov	r5, r0
 8014e52:	4620      	mov	r0, r4
 8014e54:	f000 ff67 	bl	8015d26 <i2s_disable>
 8014e58:	2300      	movs	r3, #0
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	461a      	mov	r2, r3
 8014e5e:	0969      	lsrs	r1, r5, #5
 8014e60:	f000 ff04 	bl	8015c6c <i2s_psc_config>
 8014e64:	4620      	mov	r0, r4
 8014e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e6a:	f000 bf57 	b.w	8015d1c <i2s_enable>
 8014e6e:	bf00      	nop
 8014e70:	40003c00 	andmi	r3, r0, r0, lsl #24

08014e74 <gd32_spi_dma_tx_prepare(unsigned int*)>:
 8014e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014e78:	6003      	str	r3, [r0, #0]
 8014e7a:	4801      	ldr	r0, [pc, #4]	; (8014e80 <gd32_spi_dma_tx_prepare(unsigned int*)+0xc>)
 8014e7c:	4770      	bx	lr
 8014e7e:	bf00      	nop
 8014e80:	2000a988 	andcs	sl, r0, r8, lsl #19

08014e84 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)>:
 8014e84:	4a0a      	ldr	r2, [pc, #40]	; (8014eb0 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x2c>)
 8014e86:	3101      	adds	r1, #1
 8014e88:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8014e8c:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8014e90:	f023 0301 	bic.w	r3, r3, #1
 8014e94:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8014e98:	f043 0301 	orr.w	r3, r3, #1
 8014e9c:	f8c2 0428 	str.w	r0, [r2, #1064]	; 0x428
 8014ea0:	f8c2 1420 	str.w	r1, [r2, #1056]	; 0x420
 8014ea4:	4803      	ldr	r0, [pc, #12]	; (8014eb4 <gd32_spi_dma_tx_start(unsigned char const*, unsigned int)+0x30>)
 8014ea6:	2100      	movs	r1, #0
 8014ea8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
 8014eac:	f000 bf40 	b.w	8015d30 <spi_dma_enable>
 8014eb0:	40020000 	andmi	r0, r2, r0
 8014eb4:	40003c00 	andmi	r3, r0, r0, lsl #24

08014eb8 <gd32_spi_dma_tx_is_active()>:
 8014eb8:	4b03      	ldr	r3, [pc, #12]	; (8014ec8 <gd32_spi_dma_tx_is_active()+0x10>)
 8014eba:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8014ebe:	3800      	subs	r0, #0
 8014ec0:	bf18      	it	ne
 8014ec2:	2001      	movne	r0, #1
 8014ec4:	4770      	bx	lr
 8014ec6:	bf00      	nop
 8014ec8:	40020000 	andmi	r0, r2, r0

08014ecc <gd32_uart_begin>:
 8014ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ece:	4604      	mov	r4, r0
 8014ed0:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8014ed4:	461d      	mov	r5, r3
 8014ed6:	460f      	mov	r7, r1
 8014ed8:	4616      	mov	r6, r2
 8014eda:	f7ff fa21 	bl	8014320 <rcu_periph_clock_enable>
 8014ede:	4b5c      	ldr	r3, [pc, #368]	; (8015050 <gd32_uart_begin+0x184>)
 8014ee0:	429c      	cmp	r4, r3
 8014ee2:	f000 8083 	beq.w	8014fec <gd32_uart_begin+0x120>
 8014ee6:	d857      	bhi.n	8014f98 <gd32_uart_begin+0xcc>
 8014ee8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8014eec:	429c      	cmp	r4, r3
 8014eee:	d06d      	beq.n	8014fcc <gd32_uart_begin+0x100>
 8014ef0:	f240 7012 	movw	r0, #1810	; 0x712
 8014ef4:	f7ff fa14 	bl	8014320 <rcu_periph_clock_enable>
 8014ef8:	f240 6004 	movw	r0, #1540	; 0x604
 8014efc:	f7ff fa10 	bl	8014320 <rcu_periph_clock_enable>
 8014f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f04:	2203      	movs	r2, #3
 8014f06:	2118      	movs	r1, #24
 8014f08:	4852      	ldr	r0, [pc, #328]	; (8015054 <gd32_uart_begin+0x188>)
 8014f0a:	f7ff f979 	bl	8014200 <gpio_init>
 8014f0e:	2104      	movs	r1, #4
 8014f10:	4850      	ldr	r0, [pc, #320]	; (8015054 <gd32_uart_begin+0x188>)
 8014f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014f16:	2203      	movs	r2, #3
 8014f18:	f7ff f972 	bl	8014200 <gpio_init>
 8014f1c:	2101      	movs	r1, #1
 8014f1e:	484e      	ldr	r0, [pc, #312]	; (8015058 <gd32_uart_begin+0x18c>)
 8014f20:	f7ff f9c2 	bl	80142a8 <gpio_pin_remap_config>
 8014f24:	4620      	mov	r0, r4
 8014f26:	f7ff fc07 	bl	8014738 <usart_deinit>
 8014f2a:	68e3      	ldr	r3, [r4, #12]
 8014f2c:	4639      	mov	r1, r7
 8014f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014f32:	60e3      	str	r3, [r4, #12]
 8014f34:	4620      	mov	r0, r4
 8014f36:	f7ff fc3f 	bl	80147b8 <usart_baudrate_set>
 8014f3a:	2e09      	cmp	r6, #9
 8014f3c:	bf0c      	ite	eq
 8014f3e:	f44f 5180 	moveq.w	r1, #4096	; 0x1000
 8014f42:	2100      	movne	r1, #0
 8014f44:	4620      	mov	r0, r4
 8014f46:	f7ff fc67 	bl	8014818 <usart_word_length_set>
 8014f4a:	9b06      	ldr	r3, [sp, #24]
 8014f4c:	4620      	mov	r0, r4
 8014f4e:	2b02      	cmp	r3, #2
 8014f50:	bf0c      	ite	eq
 8014f52:	f44f 5100 	moveq.w	r1, #8192	; 0x2000
 8014f56:	2100      	movne	r1, #0
 8014f58:	f7ff fc66 	bl	8014828 <usart_stop_bit_set>
 8014f5c:	2d01      	cmp	r5, #1
 8014f5e:	d072      	beq.n	8015046 <gd32_uart_begin+0x17a>
 8014f60:	2d02      	cmp	r5, #2
 8014f62:	d173      	bne.n	801504c <gd32_uart_begin+0x180>
 8014f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014f68:	4620      	mov	r0, r4
 8014f6a:	f7ff fc4d 	bl	8014808 <usart_parity_config>
 8014f6e:	2100      	movs	r1, #0
 8014f70:	4620      	mov	r0, r4
 8014f72:	f7ff fc6d 	bl	8014850 <usart_hardware_flow_rts_config>
 8014f76:	2100      	movs	r1, #0
 8014f78:	4620      	mov	r0, r4
 8014f7a:	f7ff fc6f 	bl	801485c <usart_hardware_flow_cts_config>
 8014f7e:	2104      	movs	r1, #4
 8014f80:	4620      	mov	r0, r4
 8014f82:	f7ff fc5f 	bl	8014844 <usart_receive_config>
 8014f86:	2108      	movs	r1, #8
 8014f88:	4620      	mov	r0, r4
 8014f8a:	f7ff fc55 	bl	8014838 <usart_transmit_config>
 8014f8e:	68e3      	ldr	r3, [r4, #12]
 8014f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014f94:	60e3      	str	r3, [r4, #12]
 8014f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f98:	4b30      	ldr	r3, [pc, #192]	; (801505c <gd32_uart_begin+0x190>)
 8014f9a:	429c      	cmp	r4, r3
 8014f9c:	d03b      	beq.n	8015016 <gd32_uart_begin+0x14a>
 8014f9e:	f240 600e 	movw	r0, #1550	; 0x60e
 8014fa2:	f7ff f9bd 	bl	8014320 <rcu_periph_clock_enable>
 8014fa6:	f240 6002 	movw	r0, #1538	; 0x602
 8014faa:	f7ff f9b9 	bl	8014320 <rcu_periph_clock_enable>
 8014fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014fb2:	2203      	movs	r2, #3
 8014fb4:	2118      	movs	r1, #24
 8014fb6:	482a      	ldr	r0, [pc, #168]	; (8015060 <gd32_uart_begin+0x194>)
 8014fb8:	f7ff f922 	bl	8014200 <gpio_init>
 8014fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014fc0:	2203      	movs	r2, #3
 8014fc2:	2104      	movs	r1, #4
 8014fc4:	4826      	ldr	r0, [pc, #152]	; (8015060 <gd32_uart_begin+0x194>)
 8014fc6:	f7ff f91b 	bl	8014200 <gpio_init>
 8014fca:	e7ab      	b.n	8014f24 <gd32_uart_begin+0x58>
 8014fcc:	f240 7011 	movw	r0, #1809	; 0x711
 8014fd0:	f7ff f9a6 	bl	8014320 <rcu_periph_clock_enable>
 8014fd4:	f240 6002 	movw	r0, #1538	; 0x602
 8014fd8:	f7ff f9a2 	bl	8014320 <rcu_periph_clock_enable>
 8014fdc:	2304      	movs	r3, #4
 8014fde:	2203      	movs	r2, #3
 8014fe0:	2118      	movs	r1, #24
 8014fe2:	481f      	ldr	r0, [pc, #124]	; (8015060 <gd32_uart_begin+0x194>)
 8014fe4:	f7ff f90c 	bl	8014200 <gpio_init>
 8014fe8:	2308      	movs	r3, #8
 8014fea:	e7e9      	b.n	8014fc0 <gd32_uart_begin+0xf4>
 8014fec:	f240 7013 	movw	r0, #1811	; 0x713
 8014ff0:	f7ff f996 	bl	8014320 <rcu_periph_clock_enable>
 8014ff4:	f240 6004 	movw	r0, #1540	; 0x604
 8014ff8:	f7ff f992 	bl	8014320 <rcu_periph_clock_enable>
 8014ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015000:	2203      	movs	r2, #3
 8015002:	2118      	movs	r1, #24
 8015004:	4813      	ldr	r0, [pc, #76]	; (8015054 <gd32_uart_begin+0x188>)
 8015006:	f7ff f8fb 	bl	8014200 <gpio_init>
 801500a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801500e:	2203      	movs	r2, #3
 8015010:	2104      	movs	r1, #4
 8015012:	4810      	ldr	r0, [pc, #64]	; (8015054 <gd32_uart_begin+0x188>)
 8015014:	e7d7      	b.n	8014fc6 <gd32_uart_begin+0xfa>
 8015016:	f240 7014 	movw	r0, #1812	; 0x714
 801501a:	f7ff f981 	bl	8014320 <rcu_periph_clock_enable>
 801501e:	f240 6004 	movw	r0, #1540	; 0x604
 8015022:	f7ff f97d 	bl	8014320 <rcu_periph_clock_enable>
 8015026:	f240 6005 	movw	r0, #1541	; 0x605
 801502a:	f7ff f979 	bl	8014320 <rcu_periph_clock_enable>
 801502e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015032:	2203      	movs	r2, #3
 8015034:	2118      	movs	r1, #24
 8015036:	4807      	ldr	r0, [pc, #28]	; (8015054 <gd32_uart_begin+0x188>)
 8015038:	f7ff f8e2 	bl	8014200 <gpio_init>
 801503c:	2304      	movs	r3, #4
 801503e:	2203      	movs	r2, #3
 8015040:	4619      	mov	r1, r3
 8015042:	4808      	ldr	r0, [pc, #32]	; (8015064 <gd32_uart_begin+0x198>)
 8015044:	e7bf      	b.n	8014fc6 <gd32_uart_begin+0xfa>
 8015046:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801504a:	e78d      	b.n	8014f68 <gd32_uart_begin+0x9c>
 801504c:	2100      	movs	r1, #0
 801504e:	e78b      	b.n	8014f68 <gd32_uart_begin+0x9c>
 8015050:	40004c00 	andmi	r4, r0, r0, lsl #24
 8015054:	40011000 	andmi	r1, r1, r0
 8015058:	00140010 	andseq	r0, r4, r0, lsl r0
 801505c:	40005000 	andmi	r5, r0, r0
 8015060:	40010800 	andmi	r0, r1, r0, lsl #16
 8015064:	40011400 	andmi	r1, r1, r0, lsl #8

08015068 <micros_init()>:
 8015068:	4770      	bx	lr
	...

0801506c <udelay_init()>:
 801506c:	4a07      	ldr	r2, [pc, #28]	; (801508c <udelay_init()+0x20>)
 801506e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8015072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015076:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 801507a:	2200      	movs	r2, #0
 801507c:	4b04      	ldr	r3, [pc, #16]	; (8015090 <udelay_init()+0x24>)
 801507e:	605a      	str	r2, [r3, #4]
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	f042 0201 	orr.w	r2, r2, #1
 8015086:	601a      	str	r2, [r3, #0]
 8015088:	4770      	bx	lr
 801508a:	bf00      	nop
 801508c:	e000ed00 	and	lr, r0, r0, lsl #26
 8015090:	e0001000 	and	r1, r0, r0

08015094 <udelay(unsigned int, unsigned int)>:
 8015094:	236c      	movs	r3, #108	; 0x6c
 8015096:	b510      	push	{r4, lr}
 8015098:	4358      	muls	r0, r3
 801509a:	b909      	cbnz	r1, 80150a0 <udelay(unsigned int, unsigned int)+0xc>
 801509c:	4b08      	ldr	r3, [pc, #32]	; (80150c0 <udelay(unsigned int, unsigned int)+0x2c>)
 801509e:	6859      	ldr	r1, [r3, #4]
 80150a0:	2300      	movs	r3, #0
 80150a2:	4c07      	ldr	r4, [pc, #28]	; (80150c0 <udelay(unsigned int, unsigned int)+0x2c>)
 80150a4:	6862      	ldr	r2, [r4, #4]
 80150a6:	4291      	cmp	r1, r2
 80150a8:	d0fc      	beq.n	80150a4 <udelay(unsigned int, unsigned int)+0x10>
 80150aa:	bf28      	it	cs
 80150ac:	f103 33ff 	addcs.w	r3, r3, #4294967295	; 0xffffffff
 80150b0:	1a5b      	subs	r3, r3, r1
 80150b2:	4413      	add	r3, r2
 80150b4:	4283      	cmp	r3, r0
 80150b6:	d300      	bcc.n	80150ba <udelay(unsigned int, unsigned int)+0x26>
 80150b8:	bd10      	pop	{r4, pc}
 80150ba:	4611      	mov	r1, r2
 80150bc:	e7f2      	b.n	80150a4 <udelay(unsigned int, unsigned int)+0x10>
 80150be:	bf00      	nop
 80150c0:	e0001000 	and	r1, r0, r0

080150c4 <adc_mode_config>:
 80150c4:	4b06      	ldr	r3, [pc, #24]	; (80150e0 <adc_mode_config+0x1c>)
 80150c6:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 80150ca:	f421 2170 	bic.w	r1, r1, #983040	; 0xf0000
 80150ce:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 80150d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80150d6:	4302      	orrs	r2, r0
 80150d8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80150dc:	4770      	bx	lr
 80150de:	bf00      	nop
 80150e0:	40012000 	andmi	r2, r1, r0

080150e4 <adc_special_function_config>:
 80150e4:	b510      	push	{r4, lr}
 80150e6:	f401 7380 	and.w	r3, r1, #256	; 0x100
 80150ea:	f401 6480 	and.w	r4, r1, #1024	; 0x400
 80150ee:	f001 0102 	and.w	r1, r1, #2
 80150f2:	b17a      	cbz	r2, 8015114 <adc_special_function_config+0x30>
 80150f4:	b11b      	cbz	r3, 80150fe <adc_special_function_config+0x1a>
 80150f6:	6843      	ldr	r3, [r0, #4]
 80150f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80150fc:	6043      	str	r3, [r0, #4]
 80150fe:	b11c      	cbz	r4, 8015108 <adc_special_function_config+0x24>
 8015100:	6843      	ldr	r3, [r0, #4]
 8015102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015106:	6043      	str	r3, [r0, #4]
 8015108:	b119      	cbz	r1, 8015112 <adc_special_function_config+0x2e>
 801510a:	6883      	ldr	r3, [r0, #8]
 801510c:	f043 0302 	orr.w	r3, r3, #2
 8015110:	6083      	str	r3, [r0, #8]
 8015112:	bd10      	pop	{r4, pc}
 8015114:	b11b      	cbz	r3, 801511e <adc_special_function_config+0x3a>
 8015116:	6843      	ldr	r3, [r0, #4]
 8015118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801511c:	6043      	str	r3, [r0, #4]
 801511e:	b11c      	cbz	r4, 8015128 <adc_special_function_config+0x44>
 8015120:	6843      	ldr	r3, [r0, #4]
 8015122:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015126:	6043      	str	r3, [r0, #4]
 8015128:	2900      	cmp	r1, #0
 801512a:	d0f2      	beq.n	8015112 <adc_special_function_config+0x2e>
 801512c:	6883      	ldr	r3, [r0, #8]
 801512e:	f023 0302 	bic.w	r3, r3, #2
 8015132:	e7ed      	b.n	8015110 <adc_special_function_config+0x2c>

08015134 <adc_data_alignment_config>:
 8015134:	6883      	ldr	r3, [r0, #8]
 8015136:	b119      	cbz	r1, 8015140 <adc_data_alignment_config+0xc>
 8015138:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801513c:	6083      	str	r3, [r0, #8]
 801513e:	4770      	bx	lr
 8015140:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015144:	e7fa      	b.n	801513c <adc_data_alignment_config+0x8>

08015146 <adc_enable>:
 8015146:	6883      	ldr	r3, [r0, #8]
 8015148:	07db      	lsls	r3, r3, #31
 801514a:	bf5e      	ittt	pl
 801514c:	6883      	ldrpl	r3, [r0, #8]
 801514e:	f043 0301 	orrpl.w	r3, r3, #1
 8015152:	6083      	strpl	r3, [r0, #8]
 8015154:	4770      	bx	lr

08015156 <adc_calibration_enable>:
 8015156:	6883      	ldr	r3, [r0, #8]
 8015158:	f100 0208 	add.w	r2, r0, #8
 801515c:	f043 0308 	orr.w	r3, r3, #8
 8015160:	6083      	str	r3, [r0, #8]
 8015162:	6813      	ldr	r3, [r2, #0]
 8015164:	0719      	lsls	r1, r3, #28
 8015166:	d4fc      	bmi.n	8015162 <adc_calibration_enable+0xc>
 8015168:	6883      	ldr	r3, [r0, #8]
 801516a:	f043 0304 	orr.w	r3, r3, #4
 801516e:	6083      	str	r3, [r0, #8]
 8015170:	6813      	ldr	r3, [r2, #0]
 8015172:	075b      	lsls	r3, r3, #29
 8015174:	d4fc      	bmi.n	8015170 <adc_calibration_enable+0x1a>
 8015176:	4770      	bx	lr

08015178 <adc_tempsensor_vrefint_enable>:
 8015178:	4a03      	ldr	r2, [pc, #12]	; (8015188 <adc_tempsensor_vrefint_enable+0x10>)
 801517a:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 801517e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015182:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
 8015186:	4770      	bx	lr
 8015188:	40012000 	andmi	r2, r1, r0

0801518c <adc_channel_length_config>:
 801518c:	2901      	cmp	r1, #1
 801518e:	d002      	beq.n	8015196 <adc_channel_length_config+0xa>
 8015190:	2902      	cmp	r1, #2
 8015192:	d00c      	beq.n	80151ae <adc_channel_length_config+0x22>
 8015194:	4770      	bx	lr
 8015196:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8015198:	3a01      	subs	r2, #1
 801519a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801519e:	62c3      	str	r3, [r0, #44]	; 0x2c
 80151a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80151a2:	0512      	lsls	r2, r2, #20
 80151a4:	f402 0270 	and.w	r2, r2, #15728640	; 0xf00000
 80151a8:	431a      	orrs	r2, r3
 80151aa:	62c2      	str	r2, [r0, #44]	; 0x2c
 80151ac:	4770      	bx	lr
 80151ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80151b0:	3a01      	subs	r2, #1
 80151b2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80151b6:	6383      	str	r3, [r0, #56]	; 0x38
 80151b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80151ba:	0512      	lsls	r2, r2, #20
 80151bc:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80151c0:	431a      	orrs	r2, r3
 80151c2:	6382      	str	r2, [r0, #56]	; 0x38
 80151c4:	4770      	bx	lr

080151c6 <adc_inserted_channel_config>:
 80151c6:	b530      	push	{r4, r5, lr}
 80151c8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80151ca:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80151cc:	f3c4 5401 	ubfx	r4, r4, #20, #2
 80151d0:	1a61      	subs	r1, r4, r1
 80151d2:	f06f 0404 	mvn.w	r4, #4
 80151d6:	4361      	muls	r1, r4
 80151d8:	241f      	movs	r4, #31
 80151da:	310f      	adds	r1, #15
 80151dc:	408c      	lsls	r4, r1
 80151de:	ea25 0504 	bic.w	r5, r5, r4
 80151e2:	fa02 f101 	lsl.w	r1, r2, r1
 80151e6:	4329      	orrs	r1, r5
 80151e8:	2a09      	cmp	r2, #9
 80151ea:	6381      	str	r1, [r0, #56]	; 0x38
 80151ec:	d80b      	bhi.n	8015206 <adc_inserted_channel_config+0x40>
 80151ee:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80151f2:	2207      	movs	r2, #7
 80151f4:	6904      	ldr	r4, [r0, #16]
 80151f6:	408a      	lsls	r2, r1
 80151f8:	ea24 0402 	bic.w	r4, r4, r2
 80151fc:	fa03 f201 	lsl.w	r2, r3, r1
 8015200:	4322      	orrs	r2, r4
 8015202:	6102      	str	r2, [r0, #16]
 8015204:	bd30      	pop	{r4, r5, pc}
 8015206:	2a11      	cmp	r2, #17
 8015208:	d8fc      	bhi.n	8015204 <adc_inserted_channel_config+0x3e>
 801520a:	2407      	movs	r4, #7
 801520c:	3a0a      	subs	r2, #10
 801520e:	68c1      	ldr	r1, [r0, #12]
 8015210:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015214:	4094      	lsls	r4, r2
 8015216:	ea21 0104 	bic.w	r1, r1, r4
 801521a:	fa03 f202 	lsl.w	r2, r3, r2
 801521e:	430a      	orrs	r2, r1
 8015220:	60c2      	str	r2, [r0, #12]
 8015222:	e7ef      	b.n	8015204 <adc_inserted_channel_config+0x3e>

08015224 <adc_external_trigger_source_config>:
 8015224:	2901      	cmp	r1, #1
 8015226:	d002      	beq.n	801522e <adc_external_trigger_source_config+0xa>
 8015228:	2902      	cmp	r1, #2
 801522a:	d008      	beq.n	801523e <adc_external_trigger_source_config+0x1a>
 801522c:	4770      	bx	lr
 801522e:	6883      	ldr	r3, [r0, #8]
 8015230:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8015234:	6083      	str	r3, [r0, #8]
 8015236:	6883      	ldr	r3, [r0, #8]
 8015238:	431a      	orrs	r2, r3
 801523a:	6082      	str	r2, [r0, #8]
 801523c:	4770      	bx	lr
 801523e:	6883      	ldr	r3, [r0, #8]
 8015240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015244:	e7f6      	b.n	8015234 <adc_external_trigger_source_config+0x10>

08015246 <adc_external_trigger_config>:
 8015246:	f001 0301 	and.w	r3, r1, #1
 801524a:	f001 0102 	and.w	r1, r1, #2
 801524e:	b152      	cbz	r2, 8015266 <adc_external_trigger_config+0x20>
 8015250:	b11b      	cbz	r3, 801525a <adc_external_trigger_config+0x14>
 8015252:	6883      	ldr	r3, [r0, #8]
 8015254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015258:	6083      	str	r3, [r0, #8]
 801525a:	b119      	cbz	r1, 8015264 <adc_external_trigger_config+0x1e>
 801525c:	6883      	ldr	r3, [r0, #8]
 801525e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015262:	6083      	str	r3, [r0, #8]
 8015264:	4770      	bx	lr
 8015266:	b11b      	cbz	r3, 8015270 <adc_external_trigger_config+0x2a>
 8015268:	6883      	ldr	r3, [r0, #8]
 801526a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801526e:	6083      	str	r3, [r0, #8]
 8015270:	2900      	cmp	r1, #0
 8015272:	d0f7      	beq.n	8015264 <adc_external_trigger_config+0x1e>
 8015274:	6883      	ldr	r3, [r0, #8]
 8015276:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801527a:	e7f2      	b.n	8015262 <adc_external_trigger_config+0x1c>

0801527c <adc_software_trigger_enable>:
 801527c:	07ca      	lsls	r2, r1, #31
 801527e:	bf42      	ittt	mi
 8015280:	6883      	ldrmi	r3, [r0, #8]
 8015282:	f443 0380 	orrmi.w	r3, r3, #4194304	; 0x400000
 8015286:	6083      	strmi	r3, [r0, #8]
 8015288:	078b      	lsls	r3, r1, #30
 801528a:	bf42      	ittt	mi
 801528c:	6883      	ldrmi	r3, [r0, #8]
 801528e:	f443 1300 	orrmi.w	r3, r3, #2097152	; 0x200000
 8015292:	6083      	strmi	r3, [r0, #8]
 8015294:	4770      	bx	lr
	...

08015298 <dma_deinit>:
 8015298:	4b0c      	ldr	r3, [pc, #48]	; (80152cc <dma_deinit+0x34>)
 801529a:	4298      	cmp	r0, r3
 801529c:	d102      	bne.n	80152a4 <dma_deinit+0xc>
 801529e:	2904      	cmp	r1, #4
 80152a0:	d900      	bls.n	80152a4 <dma_deinit+0xc>
 80152a2:	e7fe      	b.n	80152a2 <dma_deinit+0xa>
 80152a4:	2314      	movs	r3, #20
 80152a6:	fb03 0301 	mla	r3, r3, r1, r0
 80152aa:	689a      	ldr	r2, [r3, #8]
 80152ac:	0089      	lsls	r1, r1, #2
 80152ae:	f022 0201 	bic.w	r2, r2, #1
 80152b2:	609a      	str	r2, [r3, #8]
 80152b4:	2200      	movs	r2, #0
 80152b6:	609a      	str	r2, [r3, #8]
 80152b8:	60da      	str	r2, [r3, #12]
 80152ba:	611a      	str	r2, [r3, #16]
 80152bc:	615a      	str	r2, [r3, #20]
 80152be:	230f      	movs	r3, #15
 80152c0:	6842      	ldr	r2, [r0, #4]
 80152c2:	fa03 f101 	lsl.w	r1, r3, r1
 80152c6:	4311      	orrs	r1, r2
 80152c8:	6041      	str	r1, [r0, #4]
 80152ca:	4770      	bx	lr
 80152cc:	40020400 	andmi	r0, r2, r0, lsl #8

080152d0 <dma_init>:
 80152d0:	4b1b      	ldr	r3, [pc, #108]	; (8015340 <dma_init+0x70>)
 80152d2:	b510      	push	{r4, lr}
 80152d4:	4298      	cmp	r0, r3
 80152d6:	d102      	bne.n	80152de <dma_init+0xe>
 80152d8:	2904      	cmp	r1, #4
 80152da:	d900      	bls.n	80152de <dma_init+0xe>
 80152dc:	e7fe      	b.n	80152dc <dma_init+0xc>
 80152de:	2314      	movs	r3, #20
 80152e0:	fb03 0101 	mla	r1, r3, r1, r0
 80152e4:	6813      	ldr	r3, [r2, #0]
 80152e6:	610b      	str	r3, [r1, #16]
 80152e8:	6893      	ldr	r3, [r2, #8]
 80152ea:	614b      	str	r3, [r1, #20]
 80152ec:	8a13      	ldrh	r3, [r2, #16]
 80152ee:	60cb      	str	r3, [r1, #12]
 80152f0:	68d4      	ldr	r4, [r2, #12]
 80152f2:	6853      	ldr	r3, [r2, #4]
 80152f4:	6888      	ldr	r0, [r1, #8]
 80152f6:	4323      	orrs	r3, r4
 80152f8:	6954      	ldr	r4, [r2, #20]
 80152fa:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80152fe:	4323      	orrs	r3, r4
 8015300:	4303      	orrs	r3, r0
 8015302:	608b      	str	r3, [r1, #8]
 8015304:	7e13      	ldrb	r3, [r2, #24]
 8015306:	2b01      	cmp	r3, #1
 8015308:	688b      	ldr	r3, [r1, #8]
 801530a:	bf0c      	ite	eq
 801530c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
 8015310:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8015314:	608b      	str	r3, [r1, #8]
 8015316:	7e53      	ldrb	r3, [r2, #25]
 8015318:	2b01      	cmp	r3, #1
 801531a:	688b      	ldr	r3, [r1, #8]
 801531c:	bf0c      	ite	eq
 801531e:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
 8015322:	f023 0380 	bicne.w	r3, r3, #128	; 0x80
 8015326:	608b      	str	r3, [r1, #8]
 8015328:	7e93      	ldrb	r3, [r2, #26]
 801532a:	b923      	cbnz	r3, 8015336 <dma_init+0x66>
 801532c:	688b      	ldr	r3, [r1, #8]
 801532e:	f023 0310 	bic.w	r3, r3, #16
 8015332:	608b      	str	r3, [r1, #8]
 8015334:	bd10      	pop	{r4, pc}
 8015336:	688b      	ldr	r3, [r1, #8]
 8015338:	f043 0310 	orr.w	r3, r3, #16
 801533c:	e7f9      	b.n	8015332 <dma_init+0x62>
 801533e:	bf00      	nop
 8015340:	40020400 	andmi	r0, r2, r0, lsl #8

08015344 <dma_circulation_disable>:
 8015344:	4b06      	ldr	r3, [pc, #24]	; (8015360 <dma_circulation_disable+0x1c>)
 8015346:	4298      	cmp	r0, r3
 8015348:	d102      	bne.n	8015350 <dma_circulation_disable+0xc>
 801534a:	2904      	cmp	r1, #4
 801534c:	d900      	bls.n	8015350 <dma_circulation_disable+0xc>
 801534e:	e7fe      	b.n	801534e <dma_circulation_disable+0xa>
 8015350:	2314      	movs	r3, #20
 8015352:	4359      	muls	r1, r3
 8015354:	3008      	adds	r0, #8
 8015356:	580b      	ldr	r3, [r1, r0]
 8015358:	f023 0320 	bic.w	r3, r3, #32
 801535c:	500b      	str	r3, [r1, r0]
 801535e:	4770      	bx	lr
 8015360:	40020400 	andmi	r0, r2, r0, lsl #8

08015364 <dma_memory_to_memory_disable>:
 8015364:	4b06      	ldr	r3, [pc, #24]	; (8015380 <dma_memory_to_memory_disable+0x1c>)
 8015366:	4298      	cmp	r0, r3
 8015368:	d102      	bne.n	8015370 <dma_memory_to_memory_disable+0xc>
 801536a:	2904      	cmp	r1, #4
 801536c:	d900      	bls.n	8015370 <dma_memory_to_memory_disable+0xc>
 801536e:	e7fe      	b.n	801536e <dma_memory_to_memory_disable+0xa>
 8015370:	2314      	movs	r3, #20
 8015372:	4359      	muls	r1, r3
 8015374:	3008      	adds	r0, #8
 8015376:	580b      	ldr	r3, [r1, r0]
 8015378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801537c:	500b      	str	r3, [r1, r0]
 801537e:	4770      	bx	lr
 8015380:	40020400 	andmi	r0, r2, r0, lsl #8

08015384 <enet_delay>:
 8015384:	2300      	movs	r3, #0
 8015386:	b082      	sub	sp, #8
 8015388:	9301      	str	r3, [sp, #4]
 801538a:	9001      	str	r0, [sp, #4]
 801538c:	9b01      	ldr	r3, [sp, #4]
 801538e:	b90b      	cbnz	r3, 8015394 <enet_delay+0x10>
 8015390:	b002      	add	sp, #8
 8015392:	4770      	bx	lr
 8015394:	9b01      	ldr	r3, [sp, #4]
 8015396:	3b01      	subs	r3, #1
 8015398:	9301      	str	r3, [sp, #4]
 801539a:	e7f7      	b.n	801538c <enet_delay+0x8>

0801539c <enet_software_reset>:
 801539c:	4b07      	ldr	r3, [pc, #28]	; (80153bc <enet_software_reset+0x20>)
 801539e:	681a      	ldr	r2, [r3, #0]
 80153a0:	f042 0201 	orr.w	r2, r2, #1
 80153a4:	601a      	str	r2, [r3, #0]
 80153a6:	4a06      	ldr	r2, [pc, #24]	; (80153c0 <enet_software_reset+0x24>)
 80153a8:	6819      	ldr	r1, [r3, #0]
 80153aa:	07c9      	lsls	r1, r1, #31
 80153ac:	d501      	bpl.n	80153b2 <enet_software_reset+0x16>
 80153ae:	3a01      	subs	r2, #1
 80153b0:	d1fa      	bne.n	80153a8 <enet_software_reset+0xc>
 80153b2:	6818      	ldr	r0, [r3, #0]
 80153b4:	43c0      	mvns	r0, r0
 80153b6:	f000 0001 	and.w	r0, r0, #1
 80153ba:	4770      	bx	lr
 80153bc:	40029000 	andmi	r9, r2, r0
 80153c0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080153c4 <enet_descriptors_chain_init>:
 80153c4:	f5b0 0fe0 	cmp.w	r0, #7340032	; 0x700000
 80153c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153ca:	4a19      	ldr	r2, [pc, #100]	; (8015430 <enet_descriptors_chain_init+0x6c>)
 80153cc:	d125      	bne.n	801541a <enet_descriptors_chain_init+0x56>
 80153ce:	2500      	movs	r5, #0
 80153d0:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80153d4:	2002      	movs	r0, #2
 80153d6:	4b17      	ldr	r3, [pc, #92]	; (8015434 <enet_descriptors_chain_init+0x70>)
 80153d8:	4c17      	ldr	r4, [pc, #92]	; (8015438 <enet_descriptors_chain_init+0x74>)
 80153da:	6113      	str	r3, [r2, #16]
 80153dc:	4a17      	ldr	r2, [pc, #92]	; (801543c <enet_descriptors_chain_init+0x78>)
 80153de:	6013      	str	r3, [r2, #0]
 80153e0:	2200      	movs	r2, #0
 80153e2:	f240 5ef4 	movw	lr, #1524	; 0x5f4
 80153e6:	4916      	ldr	r1, [pc, #88]	; (8015440 <enet_descriptors_chain_init+0x7c>)
 80153e8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80153ec:	600a      	str	r2, [r1, #0]
 80153ee:	4915      	ldr	r1, [pc, #84]	; (8015444 <enet_descriptors_chain_init+0x80>)
 80153f0:	600a      	str	r2, [r1, #0]
 80153f2:	f103 0110 	add.w	r1, r3, #16
 80153f6:	fb0e 4702 	mla	r7, lr, r2, r4
 80153fa:	f841 7c08 	str.w	r7, [r1, #-8]
 80153fe:	4594      	cmp	ip, r2
 8015400:	bf94      	ite	ls
 8015402:	461f      	movls	r7, r3
 8015404:	460f      	movhi	r7, r1
 8015406:	3201      	adds	r2, #1
 8015408:	4290      	cmp	r0, r2
 801540a:	e941 6504 	strd	r6, r5, [r1, #-16]
 801540e:	f841 7c04 	str.w	r7, [r1, #-4]
 8015412:	f101 0110 	add.w	r1, r1, #16
 8015416:	d1ee      	bne.n	80153f6 <enet_descriptors_chain_init+0x32>
 8015418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801541a:	4b0b      	ldr	r3, [pc, #44]	; (8015448 <enet_descriptors_chain_init+0x84>)
 801541c:	f244 55f4 	movw	r5, #17908	; 0x45f4
 8015420:	60d3      	str	r3, [r2, #12]
 8015422:	4a0a      	ldr	r2, [pc, #40]	; (801544c <enet_descriptors_chain_init+0x88>)
 8015424:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015428:	2006      	movs	r0, #6
 801542a:	4c09      	ldr	r4, [pc, #36]	; (8015450 <enet_descriptors_chain_init+0x8c>)
 801542c:	6013      	str	r3, [r2, #0]
 801542e:	e7d7      	b.n	80153e0 <enet_descriptors_chain_init+0x1c>
 8015430:	40029000 	andmi	r9, r2, r0
 8015434:	200159d4 	ldrdcs	r5, [r1], -r4
 8015438:	20014dec 	andcs	r4, r1, ip, ror #27
 801543c:	20012994 	mulcs	r1, r4, r9
 8015440:	20012988 	andcs	r2, r1, r8, lsl #19
 8015444:	2001298c 	andcs	r2, r1, ip, lsl #19
 8015448:	20014d8c 	andcs	r4, r1, ip, lsl #27
 801544c:	20012990 	mulcs	r1, r0, r9
 8015450:	200129d4 	ldrdcs	r2, [r1], -r4

08015454 <enet_frame_receive>:
 8015454:	4a1d      	ldr	r2, [pc, #116]	; (80154cc <enet_frame_receive+0x78>)
 8015456:	b510      	push	{r4, lr}
 8015458:	6813      	ldr	r3, [r2, #0]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	2b00      	cmp	r3, #0
 801545e:	db33      	blt.n	80154c8 <enet_frame_receive+0x74>
 8015460:	b970      	cbnz	r0, 8015480 <enet_frame_receive+0x2c>
 8015462:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015466:	6813      	ldr	r3, [r2, #0]
 8015468:	6019      	str	r1, [r3, #0]
 801546a:	4919      	ldr	r1, [pc, #100]	; (80154d0 <enet_frame_receive+0x7c>)
 801546c:	6948      	ldr	r0, [r1, #20]
 801546e:	0604      	lsls	r4, r0, #24
 8015470:	d419      	bmi.n	80154a6 <enet_frame_receive+0x52>
 8015472:	6859      	ldr	r1, [r3, #4]
 8015474:	0448      	lsls	r0, r1, #17
 8015476:	d51b      	bpl.n	80154b0 <enet_frame_receive+0x5c>
 8015478:	68db      	ldr	r3, [r3, #12]
 801547a:	2001      	movs	r0, #1
 801547c:	6013      	str	r3, [r2, #0]
 801547e:	bd10      	pop	{r4, pc}
 8015480:	f403 4403 	and.w	r4, r3, #33536	; 0x8300
 8015484:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8015488:	d11e      	bne.n	80154c8 <enet_frame_receive+0x74>
 801548a:	f3c3 430d 	ubfx	r3, r3, #16, #14
 801548e:	3b04      	subs	r3, #4
 8015490:	428b      	cmp	r3, r1
 8015492:	d819      	bhi.n	80154c8 <enet_frame_receive+0x74>
 8015494:	2100      	movs	r1, #0
 8015496:	4299      	cmp	r1, r3
 8015498:	6814      	ldr	r4, [r2, #0]
 801549a:	d2e2      	bcs.n	8015462 <enet_frame_receive+0xe>
 801549c:	68a4      	ldr	r4, [r4, #8]
 801549e:	5d0c      	ldrb	r4, [r1, r4]
 80154a0:	5444      	strb	r4, [r0, r1]
 80154a2:	3101      	adds	r1, #1
 80154a4:	e7f7      	b.n	8015496 <enet_frame_receive+0x42>
 80154a6:	2080      	movs	r0, #128	; 0x80
 80154a8:	6148      	str	r0, [r1, #20]
 80154aa:	2000      	movs	r0, #0
 80154ac:	6088      	str	r0, [r1, #8]
 80154ae:	e7e0      	b.n	8015472 <enet_frame_receive+0x1e>
 80154b0:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80154b4:	4906      	ldr	r1, [pc, #24]	; (80154d0 <enet_frame_receive+0x7c>)
 80154b6:	bf05      	ittet	eq
 80154b8:	3310      	addeq	r3, #16
 80154ba:	6809      	ldreq	r1, [r1, #0]
 80154bc:	68cb      	ldrne	r3, [r1, #12]
 80154be:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 80154c2:	bf08      	it	eq
 80154c4:	185b      	addeq	r3, r3, r1
 80154c6:	e7d8      	b.n	801547a <enet_frame_receive+0x26>
 80154c8:	2000      	movs	r0, #0
 80154ca:	e7d8      	b.n	801547e <enet_frame_receive+0x2a>
 80154cc:	20012990 	mulcs	r1, r0, r9
 80154d0:	40029000 	andmi	r9, r2, r0

080154d4 <enet_frame_transmit>:
 80154d4:	4a1e      	ldr	r2, [pc, #120]	; (8015550 <enet_frame_transmit+0x7c>)
 80154d6:	b530      	push	{r4, r5, lr}
 80154d8:	6813      	ldr	r3, [r2, #0]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	db34      	blt.n	801554a <enet_frame_transmit+0x76>
 80154e0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80154e4:	4299      	cmp	r1, r3
 80154e6:	d830      	bhi.n	801554a <enet_frame_transmit+0x76>
 80154e8:	b9e8      	cbnz	r0, 8015526 <enet_frame_transmit+0x52>
 80154ea:	6813      	ldr	r3, [r2, #0]
 80154ec:	4819      	ldr	r0, [pc, #100]	; (8015554 <enet_frame_transmit+0x80>)
 80154ee:	6059      	str	r1, [r3, #4]
 80154f0:	6819      	ldr	r1, [r3, #0]
 80154f2:	f041 4130 	orr.w	r1, r1, #2952790016	; 0xb0000000
 80154f6:	6019      	str	r1, [r3, #0]
 80154f8:	6941      	ldr	r1, [r0, #20]
 80154fa:	6944      	ldr	r4, [r0, #20]
 80154fc:	f001 0104 	and.w	r1, r1, #4
 8015500:	f004 0420 	and.w	r4, r4, #32
 8015504:	4321      	orrs	r1, r4
 8015506:	d110      	bne.n	801552a <enet_frame_transmit+0x56>
 8015508:	6819      	ldr	r1, [r3, #0]
 801550a:	02c8      	lsls	r0, r1, #11
 801550c:	d511      	bpl.n	8015532 <enet_frame_transmit+0x5e>
 801550e:	68db      	ldr	r3, [r3, #12]
 8015510:	2001      	movs	r0, #1
 8015512:	6013      	str	r3, [r2, #0]
 8015514:	bd30      	pop	{r4, r5, pc}
 8015516:	5cc5      	ldrb	r5, [r0, r3]
 8015518:	68a4      	ldr	r4, [r4, #8]
 801551a:	551d      	strb	r5, [r3, r4]
 801551c:	3301      	adds	r3, #1
 801551e:	428b      	cmp	r3, r1
 8015520:	6814      	ldr	r4, [r2, #0]
 8015522:	d1f8      	bne.n	8015516 <enet_frame_transmit+0x42>
 8015524:	e7e1      	b.n	80154ea <enet_frame_transmit+0x16>
 8015526:	2300      	movs	r3, #0
 8015528:	e7f9      	b.n	801551e <enet_frame_transmit+0x4a>
 801552a:	6141      	str	r1, [r0, #20]
 801552c:	2100      	movs	r1, #0
 801552e:	6041      	str	r1, [r0, #4]
 8015530:	e7ea      	b.n	8015508 <enet_frame_transmit+0x34>
 8015532:	f411 1f00 	tst.w	r1, #2097152	; 0x200000
 8015536:	4907      	ldr	r1, [pc, #28]	; (8015554 <enet_frame_transmit+0x80>)
 8015538:	bf05      	ittet	eq
 801553a:	3310      	addeq	r3, #16
 801553c:	6809      	ldreq	r1, [r1, #0]
 801553e:	690b      	ldrne	r3, [r1, #16]
 8015540:	f3c1 0184 	ubfxeq	r1, r1, #2, #5
 8015544:	bf08      	it	eq
 8015546:	185b      	addeq	r3, r3, r1
 8015548:	e7e2      	b.n	8015510 <enet_frame_transmit+0x3c>
 801554a:	2000      	movs	r0, #0
 801554c:	e7e2      	b.n	8015514 <enet_frame_transmit+0x40>
 801554e:	bf00      	nop
 8015550:	20012994 	mulcs	r1, r4, r9
 8015554:	40029000 	andmi	r9, r2, r0

08015558 <enet_transmit_checksum_config>:
 8015558:	6803      	ldr	r3, [r0, #0]
 801555a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 801555e:	430b      	orrs	r3, r1
 8015560:	6003      	str	r3, [r0, #0]
 8015562:	4770      	bx	lr

08015564 <enet_mac_address_set>:
 8015564:	888a      	ldrh	r2, [r1, #4]
 8015566:	4b03      	ldr	r3, [pc, #12]	; (8015574 <enet_mac_address_set+0x10>)
 8015568:	50c2      	str	r2, [r0, r3]
 801556a:	680a      	ldr	r2, [r1, #0]
 801556c:	3304      	adds	r3, #4
 801556e:	50c2      	str	r2, [r0, r3]
 8015570:	4770      	bx	lr
 8015572:	bf00      	nop
 8015574:	40028040 	andmi	r8, r2, r0, asr #32

08015578 <enet_rx_enable>:
 8015578:	4a05      	ldr	r2, [pc, #20]	; (8015590 <enet_rx_enable+0x18>)
 801557a:	6813      	ldr	r3, [r2, #0]
 801557c:	f043 0304 	orr.w	r3, r3, #4
 8015580:	6013      	str	r3, [r2, #0]
 8015582:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8015586:	6993      	ldr	r3, [r2, #24]
 8015588:	f043 0302 	orr.w	r3, r3, #2
 801558c:	6193      	str	r3, [r2, #24]
 801558e:	4770      	bx	lr
 8015590:	40028000 	andmi	r8, r2, r0

08015594 <enet_phy_write_read>:
 8015594:	b530      	push	{r4, r5, lr}
 8015596:	4604      	mov	r4, r0
 8015598:	4d13      	ldr	r5, [pc, #76]	; (80155e8 <enet_phy_write_read+0x54>)
 801559a:	0192      	lsls	r2, r2, #6
 801559c:	6928      	ldr	r0, [r5, #16]
 801559e:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 80155a2:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
 80155a6:	f020 00c3 	bic.w	r0, r0, #195	; 0xc3
 80155aa:	4302      	orrs	r2, r0
 80155ac:	02c9      	lsls	r1, r1, #11
 80155ae:	b289      	uxth	r1, r1
 80155b0:	2c02      	cmp	r4, #2
 80155b2:	ea42 0204 	orr.w	r2, r2, r4
 80155b6:	ea42 0201 	orr.w	r2, r2, r1
 80155ba:	bf08      	it	eq
 80155bc:	8819      	ldrheq	r1, [r3, #0]
 80155be:	f042 0201 	orr.w	r2, r2, #1
 80155c2:	bf08      	it	eq
 80155c4:	6169      	streq	r1, [r5, #20]
 80155c6:	612a      	str	r2, [r5, #16]
 80155c8:	4907      	ldr	r1, [pc, #28]	; (80155e8 <enet_phy_write_read+0x54>)
 80155ca:	4a08      	ldr	r2, [pc, #32]	; (80155ec <enet_phy_write_read+0x58>)
 80155cc:	6908      	ldr	r0, [r1, #16]
 80155ce:	07c0      	lsls	r0, r0, #31
 80155d0:	d501      	bpl.n	80155d6 <enet_phy_write_read+0x42>
 80155d2:	3a01      	subs	r2, #1
 80155d4:	d1fa      	bne.n	80155cc <enet_phy_write_read+0x38>
 80155d6:	690a      	ldr	r2, [r1, #16]
 80155d8:	43d2      	mvns	r2, r2
 80155da:	f002 0001 	and.w	r0, r2, #1
 80155de:	b90c      	cbnz	r4, 80155e4 <enet_phy_write_read+0x50>
 80155e0:	694a      	ldr	r2, [r1, #20]
 80155e2:	801a      	strh	r2, [r3, #0]
 80155e4:	bd30      	pop	{r4, r5, pc}
 80155e6:	bf00      	nop
 80155e8:	40028000 	andmi	r8, r2, r0
 80155ec:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080155f0 <enet_phy_config>:
 80155f0:	4b22      	ldr	r3, [pc, #136]	; (801567c <enet_phy_config+0x8c>)
 80155f2:	b513      	push	{r0, r1, r4, lr}
 80155f4:	2001      	movs	r0, #1
 80155f6:	691c      	ldr	r4, [r3, #16]
 80155f8:	f7fe ff58 	bl	80144ac <rcu_clock_freq_get>
 80155fc:	4b20      	ldr	r3, [pc, #128]	; (8015680 <enet_phy_config+0x90>)
 80155fe:	4a21      	ldr	r2, [pc, #132]	; (8015684 <enet_phy_config+0x94>)
 8015600:	4403      	add	r3, r0
 8015602:	4293      	cmp	r3, r2
 8015604:	f024 041c 	bic.w	r4, r4, #28
 8015608:	d220      	bcs.n	801564c <enet_phy_config+0x5c>
 801560a:	f044 0408 	orr.w	r4, r4, #8
 801560e:	4b1b      	ldr	r3, [pc, #108]	; (801567c <enet_phy_config+0x8c>)
 8015610:	2200      	movs	r2, #0
 8015612:	611c      	str	r4, [r3, #16]
 8015614:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015618:	2101      	movs	r1, #1
 801561a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801561e:	2002      	movs	r0, #2
 8015620:	f10d 0306 	add.w	r3, sp, #6
 8015624:	f7ff ffb6 	bl	8015594 <enet_phy_write_read>
 8015628:	b310      	cbz	r0, 8015670 <enet_phy_config+0x80>
 801562a:	2200      	movs	r2, #0
 801562c:	4816      	ldr	r0, [pc, #88]	; (8015688 <enet_phy_config+0x98>)
 801562e:	f7ff fea9 	bl	8015384 <enet_delay>
 8015632:	2101      	movs	r1, #1
 8015634:	4610      	mov	r0, r2
 8015636:	f10d 0306 	add.w	r3, sp, #6
 801563a:	f7ff ffab 	bl	8015594 <enet_phy_write_read>
 801563e:	b1b8      	cbz	r0, 8015670 <enet_phy_config+0x80>
 8015640:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8015644:	43c0      	mvns	r0, r0
 8015646:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 801564a:	e012      	b.n	8015672 <enet_phy_config+0x82>
 801564c:	4b0f      	ldr	r3, [pc, #60]	; (801568c <enet_phy_config+0x9c>)
 801564e:	4a10      	ldr	r2, [pc, #64]	; (8015690 <enet_phy_config+0xa0>)
 8015650:	4403      	add	r3, r0
 8015652:	4293      	cmp	r3, r2
 8015654:	d802      	bhi.n	801565c <enet_phy_config+0x6c>
 8015656:	f044 040c 	orr.w	r4, r4, #12
 801565a:	e7d8      	b.n	801560e <enet_phy_config+0x1e>
 801565c:	4b0d      	ldr	r3, [pc, #52]	; (8015694 <enet_phy_config+0xa4>)
 801565e:	4a0e      	ldr	r2, [pc, #56]	; (8015698 <enet_phy_config+0xa8>)
 8015660:	4403      	add	r3, r0
 8015662:	4293      	cmp	r3, r2
 8015664:	d9d3      	bls.n	801560e <enet_phy_config+0x1e>
 8015666:	4b0d      	ldr	r3, [pc, #52]	; (801569c <enet_phy_config+0xac>)
 8015668:	4a0d      	ldr	r2, [pc, #52]	; (80156a0 <enet_phy_config+0xb0>)
 801566a:	4403      	add	r3, r0
 801566c:	4293      	cmp	r3, r2
 801566e:	d902      	bls.n	8015676 <enet_phy_config+0x86>
 8015670:	2000      	movs	r0, #0
 8015672:	b002      	add	sp, #8
 8015674:	bd10      	pop	{r4, pc}
 8015676:	f044 0404 	orr.w	r4, r4, #4
 801567a:	e7c8      	b.n	801560e <enet_phy_config+0x1e>
 801567c:	40028000 	andmi	r8, r2, r0
 8015680:	feced300 	cdp2	3, 12, cr13, cr14, cr0, {0}
 8015684:	00e4e1c0 	rsceq	lr, r4, r0, asr #3
 8015688:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 801568c:	fde9f140 	stc2l	1, cr15, [r9, #256]!	; 0x100
 8015690:	017d783f 	cmneq	sp, pc, lsr r8
 8015694:	fc6c7900 	stc2l	9, cr7, [ip], #-0	; <UNPREDICTABLE>
 8015698:	01c9c37f 	biceq	ip, r9, pc, ror r3
 801569c:	faa2b580 	blx	68c2ca4 <__stack_size+0x68c14a4>
 80156a0:	0112a880 	tsteq	r2, r0, lsl #17

080156a4 <enet_init>:
 80156a4:	2300      	movs	r3, #0
 80156a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156a8:	4604      	mov	r4, r0
 80156aa:	460d      	mov	r5, r1
 80156ac:	4616      	mov	r6, r2
 80156ae:	f8ad 3006 	strh.w	r3, [sp, #6]
 80156b2:	f7ff ff9d 	bl	80155f0 <enet_phy_config>
 80156b6:	2800      	cmp	r0, #0
 80156b8:	d037      	beq.n	801572a <enet_init+0x86>
 80156ba:	4b3b      	ldr	r3, [pc, #236]	; (80157a8 <enet_init+0x104>)
 80156bc:	4a3b      	ldr	r2, [pc, #236]	; (80157ac <enet_init+0x108>)
 80156be:	6819      	ldr	r1, [r3, #0]
 80156c0:	2c01      	cmp	r4, #1
 80156c2:	ea02 0201 	and.w	r2, r2, r1
 80156c6:	601a      	str	r2, [r3, #0]
 80156c8:	f04f 0200 	mov.w	r2, #0
 80156cc:	605a      	str	r2, [r3, #4]
 80156ce:	609a      	str	r2, [r3, #8]
 80156d0:	60da      	str	r2, [r3, #12]
 80156d2:	6999      	ldr	r1, [r3, #24]
 80156d4:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 80156d8:	ea4f 4101 	mov.w	r1, r1, lsl #16
 80156dc:	ea4f 4111 	mov.w	r1, r1, lsr #16
 80156e0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80156e4:	6199      	str	r1, [r3, #24]
 80156e6:	4932      	ldr	r1, [pc, #200]	; (80157b0 <enet_init+0x10c>)
 80156e8:	61da      	str	r2, [r3, #28]
 80156ea:	6988      	ldr	r0, [r1, #24]
 80156ec:	4b31      	ldr	r3, [pc, #196]	; (80157b4 <enet_init+0x110>)
 80156ee:	ea03 0300 	and.w	r3, r3, r0
 80156f2:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80156f6:	618b      	str	r3, [r1, #24]
 80156f8:	680b      	ldr	r3, [r1, #0]
 80156fa:	4b2f      	ldr	r3, [pc, #188]	; (80157b8 <enet_init+0x114>)
 80156fc:	600b      	str	r3, [r1, #0]
 80156fe:	d01e      	beq.n	801573e <enet_init+0x9a>
 8015700:	08e3      	lsrs	r3, r4, #3
 8015702:	0861      	lsrs	r1, r4, #1
 8015704:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8015708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801570c:	430b      	orrs	r3, r1
 801570e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015712:	2101      	movs	r1, #1
 8015714:	2002      	movs	r0, #2
 8015716:	f10d 0306 	add.w	r3, sp, #6
 801571a:	f7ff ff3b 	bl	8015594 <enet_phy_write_read>
 801571e:	b158      	cbz	r0, 8015738 <enet_init+0x94>
 8015720:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8015724:	f7ff fe2e 	bl	8015384 <enet_delay>
 8015728:	e05f      	b.n	80157ea <enet_init+0x146>
 801572a:	4824      	ldr	r0, [pc, #144]	; (80157bc <enet_init+0x118>)
 801572c:	f7ff fe2a 	bl	8015384 <enet_delay>
 8015730:	f7ff ff5e 	bl	80155f0 <enet_phy_config>
 8015734:	2800      	cmp	r0, #0
 8015736:	d1c0      	bne.n	80156ba <enet_init+0x16>
 8015738:	2000      	movs	r0, #0
 801573a:	b003      	add	sp, #12
 801573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801573e:	4614      	mov	r4, r2
 8015740:	4f1f      	ldr	r7, [pc, #124]	; (80157c0 <enet_init+0x11c>)
 8015742:	2201      	movs	r2, #1
 8015744:	2000      	movs	r0, #0
 8015746:	4611      	mov	r1, r2
 8015748:	f10d 0306 	add.w	r3, sp, #6
 801574c:	f7ff ff22 	bl	8015594 <enet_phy_write_read>
 8015750:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015754:	3401      	adds	r4, #1
 8015756:	f002 0204 	and.w	r2, r2, #4
 801575a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801575e:	b912      	cbnz	r2, 8015766 <enet_init+0xc2>
 8015760:	42bc      	cmp	r4, r7
 8015762:	d1ee      	bne.n	8015742 <enet_init+0x9e>
 8015764:	e7e8      	b.n	8015738 <enet_init+0x94>
 8015766:	42bc      	cmp	r4, r7
 8015768:	d0e6      	beq.n	8015738 <enet_init+0x94>
 801576a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801576e:	2101      	movs	r1, #1
 8015770:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015774:	2002      	movs	r0, #2
 8015776:	2200      	movs	r2, #0
 8015778:	f7ff ff0c 	bl	8015594 <enet_phy_write_read>
 801577c:	2800      	cmp	r0, #0
 801577e:	d0db      	beq.n	8015738 <enet_init+0x94>
 8015780:	2400      	movs	r4, #0
 8015782:	4f0f      	ldr	r7, [pc, #60]	; (80157c0 <enet_init+0x11c>)
 8015784:	2201      	movs	r2, #1
 8015786:	2000      	movs	r0, #0
 8015788:	4611      	mov	r1, r2
 801578a:	f10d 0306 	add.w	r3, sp, #6
 801578e:	f7ff ff01 	bl	8015594 <enet_phy_write_read>
 8015792:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015796:	3401      	adds	r4, #1
 8015798:	f002 0220 	and.w	r2, r2, #32
 801579c:	f8ad 2006 	strh.w	r2, [sp, #6]
 80157a0:	b982      	cbnz	r2, 80157c4 <enet_init+0x120>
 80157a2:	42bc      	cmp	r4, r7
 80157a4:	d1ee      	bne.n	8015784 <enet_init+0xe0>
 80157a6:	e7c7      	b.n	8015738 <enet_init+0x94>
 80157a8:	40028000 	andmi	r8, r2, r0
 80157ac:	fd30810f 	ldc2	1, cr8, [r0, #-60]!	; 0xffffffc4
 80157b0:	40029000 	andmi	r9, r2, r0
 80157b4:	f8de3f23 			; <UNDEFINED> instruction: 0xf8de3f23
 80157b8:	02c16000 	sbceq	r6, r1, #0
 80157bc:	008fffff 	strdeq	pc, [pc], pc	; <UNPREDICTABLE>
 80157c0:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>
 80157c4:	42bc      	cmp	r4, r7
 80157c6:	d0b7      	beq.n	8015738 <enet_init+0x94>
 80157c8:	2101      	movs	r1, #1
 80157ca:	2210      	movs	r2, #16
 80157cc:	2000      	movs	r0, #0
 80157ce:	f7ff fee1 	bl	8015594 <enet_phy_write_read>
 80157d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80157d6:	f013 0f04 	tst.w	r3, #4
 80157da:	bf14      	ite	ne
 80157dc:	f44f 6400 	movne.w	r4, #2048	; 0x800
 80157e0:	2400      	moveq	r4, #0
 80157e2:	0799      	lsls	r1, r3, #30
 80157e4:	d401      	bmi.n	80157ea <enet_init+0x146>
 80157e6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80157ea:	4b64      	ldr	r3, [pc, #400]	; (801597c <enet_init+0x2d8>)
 80157ec:	056a      	lsls	r2, r5, #21
 80157ee:	6818      	ldr	r0, [r3, #0]
 80157f0:	f420 40b0 	bic.w	r0, r0, #22528	; 0x5800
 80157f4:	ea44 0400 	orr.w	r4, r4, r0
 80157f8:	601c      	str	r4, [r3, #0]
 80157fa:	d50c      	bpl.n	8015816 <enet_init+0x172>
 80157fc:	681a      	ldr	r2, [r3, #0]
 80157fe:	f005 6580 	and.w	r5, r5, #67108864	; 0x4000000
 8015802:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015806:	601a      	str	r2, [r3, #0]
 8015808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801580c:	6999      	ldr	r1, [r3, #24]
 801580e:	f021 6180 	bic.w	r1, r1, #67108864	; 0x4000000
 8015812:	430d      	orrs	r5, r1
 8015814:	619d      	str	r5, [r3, #24]
 8015816:	4959      	ldr	r1, [pc, #356]	; (801597c <enet_init+0x2d8>)
 8015818:	4b59      	ldr	r3, [pc, #356]	; (8015980 <enet_init+0x2dc>)
 801581a:	684a      	ldr	r2, [r1, #4]
 801581c:	4316      	orrs	r6, r2
 801581e:	604e      	str	r6, [r1, #4]
 8015820:	681a      	ldr	r2, [r3, #0]
 8015822:	07d7      	lsls	r7, r2, #31
 8015824:	d510      	bpl.n	8015848 <enet_init+0x1a4>
 8015826:	685a      	ldr	r2, [r3, #4]
 8015828:	680c      	ldr	r4, [r1, #0]
 801582a:	f002 0080 	and.w	r0, r2, #128	; 0x80
 801582e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8015832:	4320      	orrs	r0, r4
 8015834:	6008      	str	r0, [r1, #0]
 8015836:	4853      	ldr	r0, [pc, #332]	; (8015984 <enet_init+0x2e0>)
 8015838:	0892      	lsrs	r2, r2, #2
 801583a:	6981      	ldr	r1, [r0, #24]
 801583c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8015840:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8015844:	430a      	orrs	r2, r1
 8015846:	6182      	str	r2, [r0, #24]
 8015848:	681a      	ldr	r2, [r3, #0]
 801584a:	0796      	lsls	r6, r2, #30
 801584c:	d508      	bpl.n	8015860 <enet_init+0x1bc>
 801584e:	494d      	ldr	r1, [pc, #308]	; (8015984 <enet_init+0x2e0>)
 8015850:	6898      	ldr	r0, [r3, #8]
 8015852:	680a      	ldr	r2, [r1, #0]
 8015854:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8015858:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801585c:	4302      	orrs	r2, r0
 801585e:	600a      	str	r2, [r1, #0]
 8015860:	681a      	ldr	r2, [r3, #0]
 8015862:	0755      	lsls	r5, r2, #29
 8015864:	d508      	bpl.n	8015878 <enet_init+0x1d4>
 8015866:	4947      	ldr	r1, [pc, #284]	; (8015984 <enet_init+0x2e0>)
 8015868:	68d8      	ldr	r0, [r3, #12]
 801586a:	680a      	ldr	r2, [r1, #0]
 801586c:	f422 027e 	bic.w	r2, r2, #16646144	; 0xfe0000
 8015870:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8015874:	4302      	orrs	r2, r0
 8015876:	600a      	str	r2, [r1, #0]
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	0714      	lsls	r4, r2, #28
 801587c:	d508      	bpl.n	8015890 <enet_init+0x1ec>
 801587e:	4941      	ldr	r1, [pc, #260]	; (8015984 <enet_init+0x2e0>)
 8015880:	6918      	ldr	r0, [r3, #16]
 8015882:	680a      	ldr	r2, [r1, #0]
 8015884:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8015888:	f022 0202 	bic.w	r2, r2, #2
 801588c:	4302      	orrs	r2, r0
 801588e:	600a      	str	r2, [r1, #0]
 8015890:	681a      	ldr	r2, [r3, #0]
 8015892:	06d0      	lsls	r0, r2, #27
 8015894:	d506      	bpl.n	80158a4 <enet_init+0x200>
 8015896:	493b      	ldr	r1, [pc, #236]	; (8015984 <enet_init+0x2e0>)
 8015898:	4a3b      	ldr	r2, [pc, #236]	; (8015988 <enet_init+0x2e4>)
 801589a:	6988      	ldr	r0, [r1, #24]
 801589c:	4002      	ands	r2, r0
 801589e:	6958      	ldr	r0, [r3, #20]
 80158a0:	4302      	orrs	r2, r0
 80158a2:	618a      	str	r2, [r1, #24]
 80158a4:	681a      	ldr	r2, [r3, #0]
 80158a6:	0691      	lsls	r1, r2, #26
 80158a8:	d508      	bpl.n	80158bc <enet_init+0x218>
 80158aa:	4936      	ldr	r1, [pc, #216]	; (8015984 <enet_init+0x2e0>)
 80158ac:	6998      	ldr	r0, [r3, #24]
 80158ae:	698a      	ldr	r2, [r1, #24]
 80158b0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80158b4:	f022 0204 	bic.w	r2, r2, #4
 80158b8:	4302      	orrs	r2, r0
 80158ba:	618a      	str	r2, [r1, #24]
 80158bc:	681a      	ldr	r2, [r3, #0]
 80158be:	0652      	lsls	r2, r2, #25
 80158c0:	d506      	bpl.n	80158d0 <enet_init+0x22c>
 80158c2:	492e      	ldr	r1, [pc, #184]	; (801597c <enet_init+0x2d8>)
 80158c4:	69d8      	ldr	r0, [r3, #28]
 80158c6:	69ca      	ldr	r2, [r1, #28]
 80158c8:	0c52      	lsrs	r2, r2, #17
 80158ca:	0452      	lsls	r2, r2, #17
 80158cc:	4302      	orrs	r2, r0
 80158ce:	61ca      	str	r2, [r1, #28]
 80158d0:	681a      	ldr	r2, [r3, #0]
 80158d2:	0617      	lsls	r7, r2, #24
 80158d4:	d517      	bpl.n	8015906 <enet_init+0x262>
 80158d6:	4c29      	ldr	r4, [pc, #164]	; (801597c <enet_init+0x2d8>)
 80158d8:	6a1a      	ldr	r2, [r3, #32]
 80158da:	69a0      	ldr	r0, [r4, #24]
 80158dc:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 80158e0:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
 80158e4:	0400      	lsls	r0, r0, #16
 80158e6:	0c00      	lsrs	r0, r0, #16
 80158e8:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 80158ec:	4301      	orrs	r1, r0
 80158ee:	4825      	ldr	r0, [pc, #148]	; (8015984 <enet_init+0x2e0>)
 80158f0:	61a1      	str	r1, [r4, #24]
 80158f2:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80158f6:	0a12      	lsrs	r2, r2, #8
 80158f8:	f021 0177 	bic.w	r1, r1, #119	; 0x77
 80158fc:	f002 0277 	and.w	r2, r2, #119	; 0x77
 8015900:	430a      	orrs	r2, r1
 8015902:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8015906:	681a      	ldr	r2, [r3, #0]
 8015908:	05d6      	lsls	r6, r2, #23
 801590a:	bf42      	ittt	mi
 801590c:	6a59      	ldrmi	r1, [r3, #36]	; 0x24
 801590e:	4a1b      	ldrmi	r2, [pc, #108]	; (801597c <enet_init+0x2d8>)
 8015910:	6091      	strmi	r1, [r2, #8]
 8015912:	681a      	ldr	r2, [r3, #0]
 8015914:	0595      	lsls	r5, r2, #22
 8015916:	bf42      	ittt	mi
 8015918:	4a18      	ldrmi	r2, [pc, #96]	; (801597c <enet_init+0x2d8>)
 801591a:	6a99      	ldrmi	r1, [r3, #40]	; 0x28
 801591c:	60d1      	strmi	r1, [r2, #12]
 801591e:	681a      	ldr	r2, [r3, #0]
 8015920:	0554      	lsls	r4, r2, #21
 8015922:	d508      	bpl.n	8015936 <enet_init+0x292>
 8015924:	4915      	ldr	r1, [pc, #84]	; (801597c <enet_init+0x2d8>)
 8015926:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015928:	684a      	ldr	r2, [r1, #4]
 801592a:	f422 62fb 	bic.w	r2, r2, #2008	; 0x7d8
 801592e:	f022 0206 	bic.w	r2, r2, #6
 8015932:	4302      	orrs	r2, r0
 8015934:	604a      	str	r2, [r1, #4]
 8015936:	681a      	ldr	r2, [r3, #0]
 8015938:	0510      	lsls	r0, r2, #20
 801593a:	d508      	bpl.n	801594e <enet_init+0x2aa>
 801593c:	490f      	ldr	r1, [pc, #60]	; (801597c <enet_init+0x2d8>)
 801593e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015940:	680a      	ldr	r2, [r1, #0]
 8015942:	f422 3291 	bic.w	r2, r2, #74240	; 0x12200
 8015946:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801594a:	4302      	orrs	r2, r0
 801594c:	600a      	str	r2, [r1, #0]
 801594e:	681a      	ldr	r2, [r3, #0]
 8015950:	04d1      	lsls	r1, r2, #19
 8015952:	d506      	bpl.n	8015962 <enet_init+0x2be>
 8015954:	4909      	ldr	r1, [pc, #36]	; (801597c <enet_init+0x2d8>)
 8015956:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015958:	680a      	ldr	r2, [r1, #0]
 801595a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 801595e:	4302      	orrs	r2, r0
 8015960:	600a      	str	r2, [r1, #0]
 8015962:	681a      	ldr	r2, [r3, #0]
 8015964:	0492      	lsls	r2, r2, #18
 8015966:	d506      	bpl.n	8015976 <enet_init+0x2d2>
 8015968:	4904      	ldr	r1, [pc, #16]	; (801597c <enet_init+0x2d8>)
 801596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801596c:	680a      	ldr	r2, [r1, #0]
 801596e:	f422 2260 	bic.w	r2, r2, #917504	; 0xe0000
 8015972:	4313      	orrs	r3, r2
 8015974:	600b      	str	r3, [r1, #0]
 8015976:	2001      	movs	r0, #1
 8015978:	e6df      	b.n	801573a <enet_init+0x96>
 801597a:	bf00      	nop
 801597c:	40028000 	andmi	r8, r2, r0
 8015980:	20012998 	mulcs	r1, r8, r9
 8015984:	40029000 	andmi	r9, r2, r0
 8015988:	fdde3fe7 	ldc2l	15, cr3, [lr, #924]	; 0x39c

0801598c <enet_txfifo_flush>:
 801598c:	4b06      	ldr	r3, [pc, #24]	; (80159a8 <enet_txfifo_flush+0x1c>)
 801598e:	4807      	ldr	r0, [pc, #28]	; (80159ac <enet_txfifo_flush+0x20>)
 8015990:	699a      	ldr	r2, [r3, #24]
 8015992:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015996:	619a      	str	r2, [r3, #24]
 8015998:	699a      	ldr	r2, [r3, #24]
 801599a:	02d2      	lsls	r2, r2, #11
 801599c:	d502      	bpl.n	80159a4 <enet_txfifo_flush+0x18>
 801599e:	3801      	subs	r0, #1
 80159a0:	d1fa      	bne.n	8015998 <enet_txfifo_flush+0xc>
 80159a2:	4770      	bx	lr
 80159a4:	2001      	movs	r0, #1
 80159a6:	4770      	bx	lr
 80159a8:	40029000 	andmi	r9, r2, r0
 80159ac:	0004ffff 	strdeq	pc, [r4], -pc	; <UNPREDICTABLE>

080159b0 <enet_tx_enable>:
 80159b0:	4a06      	ldr	r2, [pc, #24]	; (80159cc <enet_tx_enable+0x1c>)
 80159b2:	b508      	push	{r3, lr}
 80159b4:	6813      	ldr	r3, [r2, #0]
 80159b6:	f043 0308 	orr.w	r3, r3, #8
 80159ba:	6013      	str	r3, [r2, #0]
 80159bc:	f7ff ffe6 	bl	801598c <enet_txfifo_flush>
 80159c0:	4a03      	ldr	r2, [pc, #12]	; (80159d0 <enet_tx_enable+0x20>)
 80159c2:	6993      	ldr	r3, [r2, #24]
 80159c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80159c8:	6193      	str	r3, [r2, #24]
 80159ca:	bd08      	pop	{r3, pc}
 80159cc:	40028000 	andmi	r8, r2, r0
 80159d0:	40029000 	andmi	r9, r2, r0

080159d4 <enet_enable>:
 80159d4:	b508      	push	{r3, lr}
 80159d6:	f7ff ffeb 	bl	80159b0 <enet_tx_enable>
 80159da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80159de:	f7ff bdcb 	b.w	8015578 <enet_rx_enable>

080159e2 <enet_desc_information_get>:
 80159e2:	2905      	cmp	r1, #5
 80159e4:	d817      	bhi.n	8015a16 <enet_desc_information_get+0x34>
 80159e6:	e8df f001 	tbb	[pc, r1]
 80159ea:	03091012 	movweq	r1, #36882	; 0x9012
 80159ee:	68401007 	stmdavs	r0, {r0, r1, r2, ip}^
 80159f2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80159f6:	4770      	bx	lr
 80159f8:	88c0      	ldrh	r0, [r0, #6]
 80159fa:	e7fa      	b.n	80159f2 <enet_desc_information_get+0x10>
 80159fc:	8840      	ldrh	r0, [r0, #2]
 80159fe:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8015a02:	2804      	cmp	r0, #4
 8015a04:	d90a      	bls.n	8015a1c <enet_desc_information_get+0x3a>
 8015a06:	3804      	subs	r0, #4
 8015a08:	4770      	bx	lr
 8015a0a:	6880      	ldr	r0, [r0, #8]
 8015a0c:	4770      	bx	lr
 8015a0e:	6800      	ldr	r0, [r0, #0]
 8015a10:	f3c0 00c3 	ubfx	r0, r0, #3, #4
 8015a14:	4770      	bx	lr
 8015a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a1a:	4770      	bx	lr
 8015a1c:	2000      	movs	r0, #0
 8015a1e:	4770      	bx	lr

08015a20 <enet_rxframe_drop>:
 8015a20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015a24:	4814      	ldr	r0, [pc, #80]	; (8015a78 <enet_rxframe_drop+0x58>)
 8015a26:	b510      	push	{r4, lr}
 8015a28:	6802      	ldr	r2, [r0, #0]
 8015a2a:	4914      	ldr	r1, [pc, #80]	; (8015a7c <enet_rxframe_drop+0x5c>)
 8015a2c:	6854      	ldr	r4, [r2, #4]
 8015a2e:	6013      	str	r3, [r2, #0]
 8015a30:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8015a34:	680b      	ldr	r3, [r1, #0]
 8015a36:	d009      	beq.n	8015a4c <enet_rxframe_drop+0x2c>
 8015a38:	b12b      	cbz	r3, 8015a46 <enet_rxframe_drop+0x26>
 8015a3a:	68da      	ldr	r2, [r3, #12]
 8015a3c:	6002      	str	r2, [r0, #0]
 8015a3e:	681a      	ldr	r2, [r3, #0]
 8015a40:	b1ba      	cbz	r2, 8015a72 <enet_rxframe_drop+0x52>
 8015a42:	600a      	str	r2, [r1, #0]
 8015a44:	bd10      	pop	{r4, pc}
 8015a46:	68d3      	ldr	r3, [r2, #12]
 8015a48:	6003      	str	r3, [r0, #0]
 8015a4a:	e7fb      	b.n	8015a44 <enet_rxframe_drop+0x24>
 8015a4c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8015a50:	4c0b      	ldr	r4, [pc, #44]	; (8015a80 <enet_rxframe_drop+0x60>)
 8015a52:	d006      	beq.n	8015a62 <enet_rxframe_drop+0x42>
 8015a54:	68e2      	ldr	r2, [r4, #12]
 8015a56:	6002      	str	r2, [r0, #0]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d0f3      	beq.n	8015a44 <enet_rxframe_drop+0x24>
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	600b      	str	r3, [r1, #0]
 8015a60:	e7f0      	b.n	8015a44 <enet_rxframe_drop+0x24>
 8015a62:	6824      	ldr	r4, [r4, #0]
 8015a64:	3210      	adds	r2, #16
 8015a66:	f3c4 0484 	ubfx	r4, r4, #2, #5
 8015a6a:	4422      	add	r2, r4
 8015a6c:	6002      	str	r2, [r0, #0]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d0e8      	beq.n	8015a44 <enet_rxframe_drop+0x24>
 8015a72:	3310      	adds	r3, #16
 8015a74:	e7f3      	b.n	8015a5e <enet_rxframe_drop+0x3e>
 8015a76:	bf00      	nop
 8015a78:	20012990 	mulcs	r1, r0, r9
 8015a7c:	20012988 	andcs	r2, r1, r8, lsl #19
 8015a80:	40029000 	andmi	r9, r2, r0

08015a84 <enet_rxframe_size_get>:
 8015a84:	b508      	push	{r3, lr}
 8015a86:	4b0c      	ldr	r3, [pc, #48]	; (8015ab8 <enet_rxframe_size_get+0x34>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	6818      	ldr	r0, [r3, #0]
 8015a8c:	2800      	cmp	r0, #0
 8015a8e:	db10      	blt.n	8015ab2 <enet_rxframe_size_get+0x2e>
 8015a90:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
 8015a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015a98:	d003      	beq.n	8015aa2 <enet_rxframe_size_get+0x1e>
 8015a9a:	f7ff ffc1 	bl	8015a20 <enet_rxframe_drop>
 8015a9e:	2001      	movs	r0, #1
 8015aa0:	bd08      	pop	{r3, pc}
 8015aa2:	f000 0321 	and.w	r3, r0, #33	; 0x21
 8015aa6:	2b21      	cmp	r3, #33	; 0x21
 8015aa8:	d0f7      	beq.n	8015a9a <enet_rxframe_size_get+0x16>
 8015aaa:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8015aae:	3804      	subs	r0, #4
 8015ab0:	e7f6      	b.n	8015aa0 <enet_rxframe_size_get+0x1c>
 8015ab2:	2000      	movs	r0, #0
 8015ab4:	e7f4      	b.n	8015aa0 <enet_rxframe_size_get+0x1c>
 8015ab6:	bf00      	nop
 8015ab8:	20012990 	mulcs	r1, r0, r9

08015abc <enet_initpara_reset>:
 8015abc:	2200      	movs	r2, #0
 8015abe:	4b08      	ldr	r3, [pc, #32]	; (8015ae0 <enet_initpara_reset+0x24>)
 8015ac0:	e9c3 2200 	strd	r2, r2, [r3]
 8015ac4:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8015ac8:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8015acc:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8015ad0:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8015ad4:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8015ad8:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
 8015adc:	639a      	str	r2, [r3, #56]	; 0x38
 8015ade:	4770      	bx	lr
 8015ae0:	20012998 	mulcs	r1, r8, r9

08015ae4 <enet_deinit>:
 8015ae4:	b508      	push	{r3, lr}
 8015ae6:	f640 200e 	movw	r0, #2574	; 0xa0e
 8015aea:	f7fe fc36 	bl	801435a <rcu_periph_reset_enable>
 8015aee:	f640 200e 	movw	r0, #2574	; 0xa0e
 8015af2:	f7fe fc34 	bl	801435e <rcu_periph_reset_disable>
 8015af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015afa:	f7ff bfdf 	b.w	8015abc <enet_initpara_reset>
	...

08015b00 <i2c_clock_config>:
 8015b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b02:	4605      	mov	r5, r0
 8015b04:	2002      	movs	r0, #2
 8015b06:	460c      	mov	r4, r1
 8015b08:	4617      	mov	r7, r2
 8015b0a:	f7fe fccf 	bl	80144ac <rcu_clock_freq_get>
 8015b0e:	4927      	ldr	r1, [pc, #156]	; (8015bac <i2c_clock_config+0xac>)
 8015b10:	4a27      	ldr	r2, [pc, #156]	; (8015bb0 <i2c_clock_config+0xb0>)
 8015b12:	fbb0 f1f1 	udiv	r1, r0, r1
 8015b16:	4290      	cmp	r0, r2
 8015b18:	bf34      	ite	cc
 8015b1a:	460b      	movcc	r3, r1
 8015b1c:	2336      	movcs	r3, #54	; 0x36
 8015b1e:	686e      	ldr	r6, [r5, #4]
 8015b20:	4a24      	ldr	r2, [pc, #144]	; (8015bb4 <i2c_clock_config+0xb4>)
 8015b22:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8015b26:	431e      	orrs	r6, r3
 8015b28:	4294      	cmp	r4, r2
 8015b2a:	606e      	str	r6, [r5, #4]
 8015b2c:	d816      	bhi.n	8015b5c <i2c_clock_config+0x5c>
 8015b2e:	3101      	adds	r1, #1
 8015b30:	2935      	cmp	r1, #53	; 0x35
 8015b32:	d90d      	bls.n	8015b50 <i2c_clock_config+0x50>
 8015b34:	2336      	movs	r3, #54	; 0x36
 8015b36:	622b      	str	r3, [r5, #32]
 8015b38:	0064      	lsls	r4, r4, #1
 8015b3a:	fbb0 f4f4 	udiv	r4, r0, r4
 8015b3e:	2c04      	cmp	r4, #4
 8015b40:	bf38      	it	cc
 8015b42:	2404      	movcc	r4, #4
 8015b44:	69e8      	ldr	r0, [r5, #28]
 8015b46:	f3c4 040b 	ubfx	r4, r4, #0, #12
 8015b4a:	4304      	orrs	r4, r0
 8015b4c:	61ec      	str	r4, [r5, #28]
 8015b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b50:	2902      	cmp	r1, #2
 8015b52:	d801      	bhi.n	8015b58 <i2c_clock_config+0x58>
 8015b54:	2302      	movs	r3, #2
 8015b56:	e7ee      	b.n	8015b36 <i2c_clock_config+0x36>
 8015b58:	6229      	str	r1, [r5, #32]
 8015b5a:	e7ed      	b.n	8015b38 <i2c_clock_config+0x38>
 8015b5c:	4a16      	ldr	r2, [pc, #88]	; (8015bb8 <i2c_clock_config+0xb8>)
 8015b5e:	4294      	cmp	r4, r2
 8015b60:	d8f5      	bhi.n	8015b4e <i2c_clock_config+0x4e>
 8015b62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015b66:	4353      	muls	r3, r2
 8015b68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015b6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b70:	3301      	adds	r3, #1
 8015b72:	622b      	str	r3, [r5, #32]
 8015b74:	b997      	cbnz	r7, 8015b9c <i2c_clock_config+0x9c>
 8015b76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015b7a:	fbb0 f4f4 	udiv	r4, r0, r4
 8015b7e:	69eb      	ldr	r3, [r5, #28]
 8015b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015b84:	61eb      	str	r3, [r5, #28]
 8015b86:	f3c4 030b 	ubfx	r3, r4, #0, #12
 8015b8a:	b90b      	cbnz	r3, 8015b90 <i2c_clock_config+0x90>
 8015b8c:	f044 0401 	orr.w	r4, r4, #1
 8015b90:	69eb      	ldr	r3, [r5, #28]
 8015b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015b96:	61eb      	str	r3, [r5, #28]
 8015b98:	69e8      	ldr	r0, [r5, #28]
 8015b9a:	e7d6      	b.n	8015b4a <i2c_clock_config+0x4a>
 8015b9c:	2119      	movs	r1, #25
 8015b9e:	434c      	muls	r4, r1
 8015ba0:	69eb      	ldr	r3, [r5, #28]
 8015ba2:	fbb0 f4f4 	udiv	r4, r0, r4
 8015ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015baa:	e7eb      	b.n	8015b84 <i2c_clock_config+0x84>
 8015bac:	000f4240 	andeq	r4, pc, r0, asr #4
 8015bb0:	0337f980 	teqeq	r7, #128, 18	; 0x200000	; <UNPREDICTABLE>
 8015bb4:	000186a0 	andeq	r8, r1, r0, lsr #13
 8015bb8:	00061a80 	andeq	r1, r6, r0, lsl #21

08015bbc <i2c_ack_config>:
 8015bbc:	6803      	ldr	r3, [r0, #0]
 8015bbe:	2901      	cmp	r1, #1
 8015bc0:	bf0c      	ite	eq
 8015bc2:	f443 6380 	orreq.w	r3, r3, #1024	; 0x400
 8015bc6:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8015bca:	6003      	str	r3, [r0, #0]
 8015bcc:	4770      	bx	lr

08015bce <i2c_ackpos_config>:
 8015bce:	6803      	ldr	r3, [r0, #0]
 8015bd0:	b919      	cbnz	r1, 8015bda <i2c_ackpos_config+0xc>
 8015bd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015bd6:	6003      	str	r3, [r0, #0]
 8015bd8:	4770      	bx	lr
 8015bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015bde:	e7fa      	b.n	8015bd6 <i2c_ackpos_config+0x8>

08015be0 <i2c_master_addressing>:
 8015be0:	3202      	adds	r2, #2
 8015be2:	bf0c      	ite	eq
 8015be4:	f021 0101 	biceq.w	r1, r1, #1
 8015be8:	f041 0101 	orrne.w	r1, r1, #1
 8015bec:	6101      	str	r1, [r0, #16]
 8015bee:	4770      	bx	lr

08015bf0 <i2c_enable>:
 8015bf0:	6803      	ldr	r3, [r0, #0]
 8015bf2:	f043 0301 	orr.w	r3, r3, #1
 8015bf6:	6003      	str	r3, [r0, #0]
 8015bf8:	4770      	bx	lr

08015bfa <i2c_start_on_bus>:
 8015bfa:	6803      	ldr	r3, [r0, #0]
 8015bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015c00:	6003      	str	r3, [r0, #0]
 8015c02:	4770      	bx	lr

08015c04 <i2c_stop_on_bus>:
 8015c04:	6803      	ldr	r3, [r0, #0]
 8015c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015c0a:	6003      	str	r3, [r0, #0]
 8015c0c:	4770      	bx	lr

08015c0e <i2c_data_transmit>:
 8015c0e:	6101      	str	r1, [r0, #16]
 8015c10:	4770      	bx	lr

08015c12 <i2c_data_receive>:
 8015c12:	6900      	ldr	r0, [r0, #16]
 8015c14:	b2c0      	uxtb	r0, r0
 8015c16:	4770      	bx	lr

08015c18 <i2c_flag_get>:
 8015c18:	098b      	lsrs	r3, r1, #6
 8015c1a:	5818      	ldr	r0, [r3, r0]
 8015c1c:	f001 011f 	and.w	r1, r1, #31
 8015c20:	40c8      	lsrs	r0, r1
 8015c22:	f000 0001 	and.w	r0, r0, #1
 8015c26:	4770      	bx	lr

08015c28 <i2c_flag_clear>:
 8015c28:	f240 5301 	movw	r3, #1281	; 0x501
 8015c2c:	4299      	cmp	r1, r3
 8015c2e:	b510      	push	{r4, lr}
 8015c30:	d102      	bne.n	8015c38 <i2c_flag_clear+0x10>
 8015c32:	6943      	ldr	r3, [r0, #20]
 8015c34:	6983      	ldr	r3, [r0, #24]
 8015c36:	bd10      	pop	{r4, pc}
 8015c38:	2201      	movs	r2, #1
 8015c3a:	098c      	lsrs	r4, r1, #6
 8015c3c:	5823      	ldr	r3, [r4, r0]
 8015c3e:	f001 011f 	and.w	r1, r1, #31
 8015c42:	fa02 f101 	lsl.w	r1, r2, r1
 8015c46:	ea23 0101 	bic.w	r1, r3, r1
 8015c4a:	5021      	str	r1, [r4, r0]
 8015c4c:	e7f3      	b.n	8015c36 <i2c_flag_clear+0xe>

08015c4e <i2s_init>:
 8015c4e:	b510      	push	{r4, lr}
 8015c50:	69c4      	ldr	r4, [r0, #28]
 8015c52:	f424 647b 	bic.w	r4, r4, #4016	; 0xfb0
 8015c56:	f024 0408 	bic.w	r4, r4, #8
 8015c5a:	0424      	lsls	r4, r4, #16
 8015c5c:	0c24      	lsrs	r4, r4, #16
 8015c5e:	431c      	orrs	r4, r3
 8015c60:	4314      	orrs	r4, r2
 8015c62:	430c      	orrs	r4, r1
 8015c64:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8015c68:	61c4      	str	r4, [r0, #28]
 8015c6a:	bd10      	pop	{r4, pc}

08015c6c <i2s_psc_config>:
 8015c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c70:	4698      	mov	r8, r3
 8015c72:	2302      	movs	r3, #2
 8015c74:	6203      	str	r3, [r0, #32]
 8015c76:	4b26      	ldr	r3, [pc, #152]	; (8015d10 <i2s_psc_config+0xa4>)
 8015c78:	4617      	mov	r7, r2
 8015c7a:	4298      	cmp	r0, r3
 8015c7c:	bf0c      	ite	eq
 8015c7e:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 8015c82:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8015c86:	4a23      	ldr	r2, [pc, #140]	; (8015d14 <i2s_psc_config+0xa8>)
 8015c88:	4605      	mov	r5, r0
 8015c8a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8015c8c:	460e      	mov	r6, r1
 8015c8e:	4018      	ands	r0, r3
 8015c90:	d036      	beq.n	8015d00 <i2s_psc_config+0x94>
 8015c92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8015c94:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8015c98:	1f99      	subs	r1, r3, #6
 8015c9a:	2908      	cmp	r1, #8
 8015c9c:	d82c      	bhi.n	8015cf8 <i2s_psc_config+0x8c>
 8015c9e:	3302      	adds	r3, #2
 8015ca0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8015ca2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8015ca6:	1c42      	adds	r2, r0, #1
 8015ca8:	481b      	ldr	r0, [pc, #108]	; (8015d18 <i2s_psc_config+0xac>)
 8015caa:	fbb0 f0f2 	udiv	r0, r0, r2
 8015cae:	4358      	muls	r0, r3
 8015cb0:	0040      	lsls	r0, r0, #1
 8015cb2:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 8015cb6:	f04f 010a 	mov.w	r1, #10
 8015cba:	d124      	bne.n	8015d06 <i2s_psc_config+0x9a>
 8015cbc:	0a04      	lsrs	r4, r0, #8
 8015cbe:	434c      	muls	r4, r1
 8015cc0:	fbb4 f4f6 	udiv	r4, r4, r6
 8015cc4:	260a      	movs	r6, #10
 8015cc6:	3405      	adds	r4, #5
 8015cc8:	fbb4 f4f6 	udiv	r4, r4, r6
 8015ccc:	f004 0301 	and.w	r3, r4, #1
 8015cd0:	0864      	lsrs	r4, r4, #1
 8015cd2:	1ea2      	subs	r2, r4, #2
 8015cd4:	2afd      	cmp	r2, #253	; 0xfd
 8015cd6:	bf86      	itte	hi
 8015cd8:	2300      	movhi	r3, #0
 8015cda:	2402      	movhi	r4, #2
 8015cdc:	021b      	lslls	r3, r3, #8
 8015cde:	431c      	orrs	r4, r3
 8015ce0:	ea44 0408 	orr.w	r4, r4, r8
 8015ce4:	622c      	str	r4, [r5, #32]
 8015ce6:	69eb      	ldr	r3, [r5, #28]
 8015ce8:	f023 0307 	bic.w	r3, r3, #7
 8015cec:	61eb      	str	r3, [r5, #28]
 8015cee:	69ea      	ldr	r2, [r5, #28]
 8015cf0:	4317      	orrs	r7, r2
 8015cf2:	61ef      	str	r7, [r5, #28]
 8015cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cf8:	2b0f      	cmp	r3, #15
 8015cfa:	bf08      	it	eq
 8015cfc:	2314      	moveq	r3, #20
 8015cfe:	e7cf      	b.n	8015ca0 <i2s_psc_config+0x34>
 8015d00:	f7fe fbd4 	bl	80144ac <rcu_clock_freq_get>
 8015d04:	e7d5      	b.n	8015cb2 <i2s_psc_config+0x46>
 8015d06:	b90f      	cbnz	r7, 8015d0c <i2s_psc_config+0xa0>
 8015d08:	0944      	lsrs	r4, r0, #5
 8015d0a:	e7d8      	b.n	8015cbe <i2s_psc_config+0x52>
 8015d0c:	0984      	lsrs	r4, r0, #6
 8015d0e:	e7d6      	b.n	8015cbe <i2s_psc_config+0x52>
 8015d10:	40003800 	andmi	r3, r0, r0, lsl #16
 8015d14:	40021000 	andmi	r1, r2, r0
 8015d18:	017d7840 	cmneq	sp, r0, asr #16

08015d1c <i2s_enable>:
 8015d1c:	69c3      	ldr	r3, [r0, #28]
 8015d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015d22:	61c3      	str	r3, [r0, #28]
 8015d24:	4770      	bx	lr

08015d26 <i2s_disable>:
 8015d26:	69c3      	ldr	r3, [r0, #28]
 8015d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8015d2c:	61c3      	str	r3, [r0, #28]
 8015d2e:	4770      	bx	lr

08015d30 <spi_dma_enable>:
 8015d30:	6843      	ldr	r3, [r0, #4]
 8015d32:	b919      	cbnz	r1, 8015d3c <spi_dma_enable+0xc>
 8015d34:	f043 0302 	orr.w	r3, r3, #2
 8015d38:	6043      	str	r3, [r0, #4]
 8015d3a:	4770      	bx	lr
 8015d3c:	f043 0301 	orr.w	r3, r3, #1
 8015d40:	e7fa      	b.n	8015d38 <spi_dma_enable+0x8>
	...

Disassembly of section .rodata:

08015d44 <vtable for DisplayHandler-0xe4>:
 8015d44:	00000003 	andeq	r0, r0, r3
 8015d48:	000000aa 	andeq	r0, r0, sl, lsr #1
 8015d4c:	00000006 	andeq	r0, r0, r6
 8015d50:	00000000 	andeq	r0, r0, r0
 8015d54:	01ff0000 	mvnseq	r0, r0
 8015d58:	00000001 	andeq	r0, r0, r1
 8015d5c:	00000001 	andeq	r0, r0, r1
 8015d60:	00000001 	andeq	r0, r0, r1
 8015d64:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015d68:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 8015d74:	03020100 	movweq	r0, #8448	; 0x2100
 8015d78:	08070604 	stmdaeq	r7, {r2, r9, sl}
 8015d7c:	00000009 	andeq	r0, r0, r9
 8015d80:	03020100 	movweq	r0, #8448	; 0x2100
 8015d84:	3a732504 	bcc	9cdf19c <__exidx_end+0x1cc7034>
 8015d88:	31007525 	tstcc	r0, r5, lsr #10
 8015d8c:	37323a32 			; <UNDEFINED> instruction: 0x37323a32
 8015d90:	0039303a 	eorseq	r3, r9, sl, lsr r0
 8015d94:	206e614a 	rsbcs	r6, lr, sl, asr #2
 8015d98:	32203820 	eorcc	r3, r0, #32, 16	; 0x200000
 8015d9c:	00323230 	eorseq	r3, r2, r0, lsr r2
 8015da0:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 8015da4:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 8015da8:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8015dac:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8015db0:	4e203420 	cdpmi	4, 2, cr3, cr0, cr0, {1}
 8015db4:	2065646f 	rsbcs	r6, r5, pc, ror #8
 8015db8:	32335b1b 	eorscc	r5, r3, #27648	; 0x6c00
 8015dbc:	7869506d 	stmdavc	r9!, {r0, r2, r3, r5, r6, ip, lr}^
 8015dc0:	63206c65 			; <UNDEFINED> instruction: 0x63206c65
 8015dc4:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 8015dc8:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 8015dcc:	317b2072 	cmncc	fp, r2, ror r0
 8015dd0:	20342078 	eorscs	r2, r4, r8, ror r0
 8015dd4:	76696e55 			; <UNDEFINED> instruction: 0x76696e55
 8015dd8:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8015ddc:	5b1b7d73 	blpl	86f53b0 <__exidx_end+0x6dd248>
 8015de0:	006d3733 	rsbeq	r3, sp, r3, lsr r7
 8015de4:	6f635f2e 	svcvs	0x00635f2e
 8015de8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8015dec:	685f2e00 	ldmdavs	pc, {r9, sl, fp, sp}^	; <UNPREDICTABLE>
 8015df0:	00707474 	rsbseq	r7, r0, r4, ror r4
 8015df4:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8015df8:	7472413d 	ldrbtvc	r4, [r2], #-317	; 0xfffffec3
 8015dfc:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8015e00:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 8015e04:	41006c65 	tstmi	r0, r5, ror #24
 8015e08:	4e2d7472 	mcrmi	4, 1, r7, cr13, cr2, {3}
 8015e0c:	34207465 	strtcc	r7, [r0], #-1125	; 0xfffffb9b
 8015e10:	78695020 	stmdavc	r9!, {r5, ip, lr}^
 8015e14:	31206c65 			; <UNDEFINED> instruction: 0x31206c65
 8015e18:	3a732500 	bcc	9cdf220 <__exidx_end+0x1cc70b8>
 8015e1c:	47206425 	strmi	r6, [r0, -r5, lsr #8]!
 8015e20:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8015e24:	00000073 	andeq	r0, r0, r3, ror r0

08015e28 <vtable for DisplayHandler>:
	...
 8015e30:	08007edb 	stmdaeq	r0, {r0, r1, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8015e34:	08007f35 	stmdaeq	r0, {r0, r2, r4, r5, r8, r9, sl, fp, ip, sp, lr}
 8015e38:	08007fdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, sl, fp, ip, sp, lr}

08015e3c <vtable for DisplayUdfHandler>:
	...
 8015e44:	08007edd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8015e48:	08007f41 	stmdaeq	r0, {r0, r6, r8, r9, sl, fp, ip, sp, lr}
 8015e4c:	08007fc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, sl, fp, ip, sp, lr}
 8015e50:	08007edf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, r9, sl, fp, ip, sp, lr}
 8015e54:	08007fb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 8015e58:	08007fa1 	stmdaeq	r0, {r0, r5, r7, r8, r9, sl, fp, ip, sp, lr}
 8015e5c:	08007f8d 	stmdaeq	r0, {r0, r2, r3, r7, r8, r9, sl, fp, ip, sp, lr}
 8015e60:	08007f79 	stmdaeq	r0, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, sp, lr}
 8015e64:	08007f65 	stmdaeq	r0, {r0, r2, r5, r6, r8, r9, sl, fp, ip, sp, lr}

08015e68 <vtable for ArtNetTriggerHandler>:
	...
 8015e70:	08007ee1 	stmdaeq	r0, {r0, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 8015e74:	08007f4d 	stmdaeq	r0, {r0, r2, r3, r6, r8, r9, sl, fp, ip, sp, lr}
 8015e78:	080080e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, pc}

08015e7c <vtable for PixelDmxStartStop>:
	...
 8015e84:	08007ee3 	stmdaeq	r0, {r0, r1, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 8015e88:	08007f59 	stmdaeq	r0, {r0, r3, r4, r6, r8, r9, sl, fp, ip, sp, lr}
 8015e8c:	08007ee5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r9, sl, fp, ip, sp, lr}
 8015e90:	08007ef5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r9, sl, fp, ip, sp, lr}

08015e94 <vtable for Reboot>:
	...
 8015e9c:	08007f05 	stmdaeq	r0, {r0, r2, r8, r9, sl, fp, ip, sp, lr}
 8015ea0:	08007f29 	stmdaeq	r0, {r0, r3, r5, r8, r9, sl, fp, ip, sp, lr}
 8015ea4:	08007f09 	stmdaeq	r0, {r0, r3, r8, r9, sl, fp, ip, sp, lr}

08015ea8 <CSWTCH.52>:
 8015ea8:	444e4f4f 	strbmi	r4, [lr], #-3919	; 0xfffff0b1
 8015eac:	 	eorcc	r3, lr, r6, asr #2

08015ead <SOFTWARE_VERSION>:
 8015ead:	00302e31 	eorseq	r2, r0, r1, lsr lr
 8015eb1:	6e552020 	cdpvs	0, 5, cr2, cr5, cr0, {1}
 8015eb5:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 8015eb9:	20736573 	rsbscs	r6, r3, r3, ror r5
 8015ebd:	20657261 	rsbcs	r7, r5, r1, ror #4
 8015ec1:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8015ec5:	20646570 	rsbcs	r6, r4, r0, ror r5
 8015ec9:	000a312b 	andeq	r3, sl, fp, lsr #2
 8015ecd:	 	andeq	r0, r0, r0

08015ed0 <vtable for ArtNet4Node>:
	...
 8015ed8:	080085cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8, sl, pc}
 8015edc:	080086bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r9, sl, pc}
 8015ee0:	08008571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl, pc}
 8015ee4:	080085ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, pc}
 8015ee8:	080086cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r9, sl, pc}
 8015eec:	080086b3 	stmdaeq	r0, {r0, r1, r4, r5, r7, r9, sl, pc}

08015ef0 <ArtNetMsgConst::START>:
 8015ef0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
 8015ef4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 8015ef8:	74724120 	ldrbtvc	r4, [r2], #-288	; 0xfffffee0
 8015efc:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
	...

08015f01 <ArtNetMsgConst::PARAMS>:
 8015f01:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 8015f05:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 8015f09:	20676e69 	rsbcs	r6, r7, r9, ror #28
 8015f0d:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015f11:	0074654e 	rsbseq	r6, r4, lr, asr #10

08015f15 <ArtNetMsgConst::STARTED>:
 8015f15:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015f19:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8015f1d:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8015f21:	00646574 	rsbeq	r6, r4, r4, ror r5
 8015f25:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 8015f29:	37303146 	ldrcc	r3, [r0, -r6, asr #2]!
 8015f2d:	73250052 			; <UNDEFINED> instruction: 0x73250052
 8015f31:	20732520 	rsbscs	r2, r3, r0, lsr #10
 8015f35:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8015f39:	74680073 	strbtvc	r0, [r8], #-115	; 0xffffff8d
 8015f3d:	2f3a7074 	svccs	0x003a7074
 8015f41:	3364672f 	cmncc	r4, #12320768	; 0xbc0000
 8015f45:	6d642d32 	stclvs	13, cr2, [r4, #-200]!	; 0xffffff38
 8015f49:	726f2e78 	rsbvc	r2, pc, #120, 28	; 0x780
 8015f4d:	6d450067 	stclvs	0, cr0, [r5, #-412]	; 0xfffffe64
 8015f51:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 8015f55:	 	tstmi	r0, r5, ror #8

08015f58 <artnet::NODE_ID>:
 8015f58:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015f5c:	0074654e 	rsbseq	r6, r4, lr, asr #10

08015f60 <defaults::SHORT_NAME>:
 8015f60:	20567641 	subscs	r7, r6, r1, asr #12
 8015f64:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015f68:	2074654e 	rsbscs	r6, r4, lr, asr #10
 8015f6c:	65646f4e 	strbvs	r6, [r4, #-3918]!	; 0xfffff0b2
	...

08015f71 <artnet::NODE_ID>:
 8015f71:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015f75:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8015f79:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8015f7d:	30255b20 	eorcc	r5, r5, r0, lsr #22
 8015f81:	205d6434 	subscs	r6, sp, r4, lsr r4
 8015f85:	41207325 			; <UNDEFINED> instruction: 0x41207325
 8015f89:	 	tstmi	r0, r6, ror r6

08015f8c <artnet::NODE_ID>:
 8015f8c:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8015f90:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8015f94:	52206f4e 	eorpl	r6, r0, #312	; 0x138
 8015f98:	72204d44 	eorvc	r4, r0, #68, 26	; 0x1100
 8015f9c:	6f707365 	svcvs	0x00707365
 8015fa0:	0a65736e 	beq	9972d60 <__exidx_end+0x195abf8>
 8015fa4:	50544800 	subspl	r4, r4, r0, lsl #16
 8015fa8:	50544c00 	subspl	r4, r4, r0, lsl #24
 8015fac:	74724100 	ldrbtvc	r4, [r2], #-256	; 0xffffff00
 8015fb0:	74654e2d 	strbtvc	r4, [r5], #-3629	; 0xfffff1d3
 8015fb4:	43417300 	movtmi	r7, #4864	; 0x1300
 8015fb8:	6f4e004e 	svcvs	0x004e004e
 8015fbc:	25206564 	strcs	r6, [r0, #-1380]!	; 0xfffffa9c
 8015fc0:	255b2064 	ldrbcs	r2, [fp, #-100]	; 0xffffff9c
 8015fc4:	000a5d75 	andeq	r5, sl, r5, ror sp
 8015fc8:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8015fcc:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8015fd0:	20202065 	eorcs	r2, r0, r5, rrx
 8015fd4:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 8015fd8:	0a64252e 	beq	991f498 <__exidx_end+0x1907330>
 8015fdc:	68532000 	ldmdavs	r3, {sp}^
 8015fe0:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8015fe4:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8015fe8:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8015fec:	20000a73 	andcs	r0, r0, r3, ror sl
 8015ff0:	676e6f4c 	strbvs	r6, [lr, -ip, asr #30]!
 8015ff4:	6d616e20 	stclvs	14, cr6, [r1, #-128]!	; 0xffffff80
 8015ff8:	3a202065 	bcc	881e194 <__exidx_end+0x80602c>
 8015ffc:	0a732520 	beq	9cdf484 <__exidx_end+0x1cc731c>
 8016000:	754f2000 	strbvc	r2, [pc, #-0]	; 8016008 <artnet::NODE_ID+0x7c>
 8016004:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
 8016008:	2020000a 	eorcs	r0, r0, sl
 801600c:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 8016010:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 8016014:	3a642520 	bcc	991f49c <__exidx_end+0x1907334>
 8016018:	322d255b 	eorcc	r2, sp, #381681664	; 0x16c00000
 801601c:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 8016020:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8016024:	5d64322d 	sfmpl	f3, 2, [r4, #-180]!	; 0xffffff4c
 8016028:	7534253a 	ldrvc	r2, [r4, #-1338]!	; 0xfffffac6
 801602c:	73255b20 			; <UNDEFINED> instruction: 0x73255b20
 8016030:	7b20005d 	blvc	88161ac <__exidx_end+0x7fe044>
 8016034:	0a7d7325 	beq	9f72cd0 <__exidx_end+0x1f5ab68>
 8016038:	6e492000 	cdpvs	0, 4, cr2, cr9, cr0, {0}
 801603c:	0a747570 	beq	9d33604 <__exidx_end+0x1d1b49c>
 8016040:	50202000 	eorpl	r2, r0, r0
 8016044:	2074726f 	rsbscs	r7, r4, pc, ror #4
 8016048:	20643225 	rsbcs	r3, r4, r5, lsr #4
 801604c:	5b3a6425 	blpl	8eaf0e8 <__exidx_end+0xe96f80>
 8016050:	64322d25 	ldrtvs	r2, [r2], #-3365	; 0xfffff2db
 8016054:	322d253a 	eorcc	r2, sp, #243269632	; 0xe800000
 8016058:	2d253a64 	vstmdbcs	r5!, {s6-s105}
 801605c:	3a5d6432 	bcc	976f12c <__exidx_end+0x1756fc4>
 8016060:	20753425 	rsbscs	r3, r5, r5, lsr #8
 8016064:	25203e2d 	strcs	r3, [r0, #-3629]!	; 0xfffff1d3
 8016068:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801606c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016070:	000a6425 	andeq	r6, sl, r5, lsr #8
 8016074:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016078:	2c64253a 	cfstr64cs	mvdx2, [r4], #-232	; 0xffffff18
 801607c:	73252300 			; <UNDEFINED> instruction: 0x73252300
 8016080:	0a64253d 	beq	991f57c <__exidx_end+0x1907414>
 8016084:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8016088:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 801608c:	002c2273 	eoreq	r2, ip, r3, ror r2
 8016090:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8016094:	000a7325 	andeq	r7, sl, r5, lsr #6
 8016098:	6e636173 	mcrvs	1, 3, r6, cr3, cr3, {3}
 801609c:	706e6900 	rsbvc	r6, lr, r0, lsl #18
 80160a0:	6f007475 	svcvs	0x00007475
 80160a4:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 80160a8:	74680074 	strbtvc	r0, [r8], #-116	; 0xffffff8c
 80160ac:	746c0070 	strbtvc	r0, [ip], #-112	; 0xffffff90
 80160b0:	72610070 	rsbvc	r0, r1, #112	; 0x70
 80160b4:	74656e74 	strbtvc	r6, [r5], #-3700	; 0xfffff18c
 80160b8:	6c754d00 	ldclvs	13, cr4, [r5], #-0
 80160bc:	70206974 	eorvc	r6, r0, r4, ror r9
 80160c0:	2074726f 	rsbscs	r7, r4, pc, ror #4
 80160c4:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
 80160c8:	72756769 	rsbsvc	r6, r5, #27525120	; 0x1a40000
 80160cc:	6f697461 	svcvs	0x00697461
 80160d0:	6f4e006e 	svcvs	0x004e006e
 80160d4:	44006564 	strmi	r6, [r0], #-1380	; 0xfffffa9c
 80160d8:	522f584d 	eorpl	r5, pc, #5046272	; 0x4d0000
 80160dc:	4f204d44 	svcmi	0x00204d44
 80160e0:	75707475 	ldrbvc	r7, [r0, #-1141]!	; 0xfffffb8b
 80160e4:	4d440074 	stclmi	0, cr0, [r4, #-464]	; 0xfffffe30
 80160e8:	6e492058 	mcrvs	0, 2, r2, cr9, cr8, {2}
 80160ec:	00747570 	rsbseq	r7, r4, r0, ror r5
 80160f0:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 80160f4:	2074654e 	rsbscs	r6, r4, lr, asr #10
 80160f8:	 	mcrvs	0, 3, r0, cr5, cr4, {1}

080160fa <ArtNetParamsConst::ENABLE_RDM>:
 80160fa:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 80160fe:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8016102:	 	stcvs	13, cr6, [r0, #-400]	; 0xfffffe70

08016105 <ArtNetParamsConst::MAP_UNIVERSE0>:
 8016105:	5f70616d 	svcpl	0x0070616d
 8016109:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 801610d:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8016111:	 	rsbsvc	r0, r0, #48	; 0x30

08016113 <ArtNetParamsConst::PROTOCOL_PORT>:
 8016113:	746f7270 	strbtvc	r7, [pc], #-624	; 801611b <ArtNetParamsConst::PROTOCOL_PORT+0x8>
 8016117:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8015f60 <defaults::SHORT_NAME>
 801611b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801611f:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8016123:	746f7270 	strbtvc	r7, [pc], #-624	; 801612b <ArtNetParamsConst::PROTOCOL_PORT+0x18>
 8016127:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8015f70 <defaults::SHORT_NAME+0x10>
 801612b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801612f:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8016133:	746f7270 	strbtvc	r7, [pc], #-624	; 801613b <ArtNetParamsConst::PROTOCOL_PORT+0x28>
 8016137:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8015f80 <artnet::NODE_ID+0xf>
 801613b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801613f:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8016143:	746f7270 	strbtvc	r7, [pc], #-624	; 801614b <ArtNetParamsConst::PROTOCOL_PORT+0x38>
 8016147:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 8015f90 <artnet::NODE_ID+0x4>
 801614b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 801614f:	00645f74 	rsbeq	r5, r4, r4, ror pc

08016153 <ArtNetParamsConst::NODE_LONG_NAME>:
 8016153:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 8016157:	6d616e5f 	stclvs	14, cr6, [r1, #-380]!	; 0xfffffe84
 801615b:	 	strbvs	r0, [pc, #-101]!	; 80160fe <ArtNetParamsConst::ENABLE_RDM+0x4>

0801615d <ArtNetParamsConst::NODE_OEM_VALUE>:
 801615d:	5f6d656f 	svcpl	0x006d656f
 8016161:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 8016165:	 	ldmdavs	r3!, {r0, r2, r5, r6}^

08016167 <ArtNetParamsConst::NODE_SHORT_NAME>:
 8016167:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 801616b:	616e5f74 	smcvs	58868	; 0xe5f4
 801616f:	 	strvs	r6, [r0], #-1389	; 0xfffffa93

08016172 <ArtNetParamsConst::DESTINATION_IP_PORT>:
 8016172:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 8016176:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 801617a:	5f6e6f69 	svcpl	0x006e6f69
 801617e:	705f7069 	subsvc	r7, pc, r9, rrx
 8016182:	5f74726f 	svcpl	0x0074726f
 8016186:	00000061 	andeq	r0, r0, r1, rrx
 801618a:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 801618e:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 8016192:	5f6e6f69 	svcpl	0x006e6f69
 8016196:	705f7069 	subsvc	r7, pc, r9, rrx
 801619a:	5f74726f 	svcpl	0x0074726f
 801619e:	00000062 	andeq	r0, r0, r2, rrx
 80161a2:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80161a6:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80161aa:	5f6e6f69 	svcpl	0x006e6f69
 80161ae:	705f7069 	subsvc	r7, pc, r9, rrx
 80161b2:	5f74726f 	svcpl	0x0074726f
 80161b6:	00000063 	andeq	r0, r0, r3, rrx
 80161ba:	74736564 	ldrbtvc	r6, [r3], #-1380	; 0xfffffa9c
 80161be:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
 80161c2:	5f6e6f69 	svcpl	0x006e6f69
 80161c6:	705f7069 	subsvc	r7, pc, r9, rrx
 80161ca:	5f74726f 	svcpl	0x0074726f
 80161ce:	00000064 	andeq	r0, r0, r4, rrx

080161d2 <ArtNetParamsConst::DISABLE_MERGE_TIMEOUT>:
 80161d2:	61736964 	cmnvs	r3, r4, ror #18
 80161d6:	5f656c62 	svcpl	0x00656c62
 80161da:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 80161de:	69745f65 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 80161e2:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8015c7d <i2s_psc_config+0x11>
 80161e6:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

080161e8 <ArtNetParamsConst::NODE_NETWORK_DATA_LOSS_TIMEOUT>:
 80161e8:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 80161ec:	5f6b726f 	svcpl	0x006b726f
 80161f0:	61746164 	cmnvs	r4, r4, ror #2
 80161f4:	736f6c5f 	cmnvc	pc, #24320	; 0x5f00
 80161f8:	69745f73 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 80161fc:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8015c97 <i2s_psc_config+0x2b>
 8016200:	 	strbvs	r0, [lr, #-116]!	; 0xffffff8c

08016202 <ArtNetParamsConst::NET>:
 8016202:	0074656e 	rsbseq	r6, r4, lr, ror #10

08016206 <ArtNetParamsConst::SUBNET>:
 8016206:	6e627573 	mcrvs	5, 3, r7, cr2, cr3, {3}
 801620a:	 	andvc	r7, r0, r5, ror #8

0801620d <ArtNetParamsConst::PROTOCOL>:
 801620d:	746f7270 	strbtvc	r7, [pc], #-624	; 8016215 <ArtNetParamsConst::PROTOCOL+0x8>
 8016211:	6c6f636f 	stclvs	3, cr6, [pc], #-444	; 801605c <artnet::NODE_ID+0xd0>
	...

08016216 <ArtNetParamsConst::FILE_NAME>:
 8016216:	6e747261 	cdpvs	2, 7, cr7, cr4, cr1, {3}
 801621a:	742e7465 	strtvc	r7, [lr], #-1125	; 0xfffffb9b
 801621e:	 			; <UNDEFINED> instruction: 0xff007478

08016221 <ArtNetConst::OEM_ID>:
 8016221:	 	ldrsheq	pc, [r0], #-255	; 0xffffff01	; <UNPREDICTABLE>

08016223 <ArtNetConst::ESTA_ID>:
 8016223:	 	strcc	r0, [r1, #-80]	; 0xffffffb0

08016225 <ArtNetConst::VERSION>:
 8016225:	33323501 	teqcc	r2, #4194304	; 0x400000
 8016229:	35322e39 	ldrcc	r2, [r2, #-3641]!	; 0xfffff1c7
 801622d:	2e302e35 	mrccs	14, 1, r2, cr0, cr5, {1}
 8016231:	2e250030 	mcrcs	0, 1, r0, cr5, cr0, {1}
 8016235:	20733834 	rsbscs	r3, r3, r4, lsr r8
 8016239:	30007325 	andcc	r7, r0, r5, lsr #6
 801623d:	6f4e202e 	svcvs	0x004e202e
 8016241:	73616320 	cmnvc	r1, #32, 6	; 0x80000000
 8016245:	6d207365 	stcvs	3, cr7, [r0, #-404]!	; 0xfffffe6c
 8016249:	68637461 	stmdavs	r3!, {r0, r5, r6, sl, ip, sp, lr}^
 801624d:	202c6465 	eorcs	r6, ip, r5, ror #8
 8016251:	73696874 	cmnvc	r9, #116, 16	; 0x740000
 8016255:	6f687320 	svcvs	0x00687320
 8016259:	6e646c75 	mcrvs	12, 3, r6, cr4, cr5, {3}
 801625d:	68207427 	stmdavs	r0!, {r0, r1, r2, r5, sl, ip, sp, lr}
 8016261:	65707061 	ldrbvs	r7, [r0, #-97]!	; 0xffffff9f
 8016265:	000a216e 	andeq	r2, sl, lr, ror #2
 8016269:	64697242 	strbtvs	r7, [r9], #-578	; 0xfffffdbe
 801626d:	000a6567 	andeq	r6, sl, r7, ror #10
 8016271:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
 8016275:	7261776d 	rsbvc	r7, r1, #28573696	; 0x1b40000
 8016279:	203a2065 	eorscs	r2, sl, r5, rrx
 801627d:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016281:	20000a64 	andcs	r0, r0, r4, ror #20
 8016285:	20444943 	subcs	r4, r4, r3, asr #18
 8016289:	20202020 	eorcs	r2, r0, r0, lsr #32
 801628d:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8016291:	20000a73 	andcs	r0, r0, r3, ror sl
 8016295:	726f5020 	rsbvc	r5, pc, #32
 8016299:	32252074 	eorcc	r2, r5, #116	; 0x74
 801629d:	6e552064 	cdpvs	0, 5, cr2, cr5, cr4, {3}
 80162a1:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
 80162a5:	25206573 	strcs	r6, [r0, #-1395]!	; 0xfffffa8d
 80162a9:	2064332d 	rsbcs	r3, r4, sp, lsr #6
 80162ad:	5d73255b 	cfldr64pl	mvdx2, [r3, #-364]!	; 0xfffffe94
 80162b1:	2020000a 	eorcs	r0, r0, sl
 80162b5:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
 80162b9:	64322520 	ldrtvs	r2, [r2], #-1312	; 0xfffffae0
 80162bd:	696e5520 	stmdbvs	lr!, {r5, r8, sl, ip, lr}^
 80162c1:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80162c5:	2d252065 	stccs	0, cr2, [r5, #-404]!	; 0xfffffe6c
 80162c9:	5b206433 	blpl	882f39d <__exidx_end+0x817235>
 80162cd:	0a5d6425 	beq	976f369 <__exidx_end+0x1757201>
 80162d1:	79532000 	ldmdbvc	r3, {sp}^
 80162d5:	7268636e 	rsbvc	r6, r8, #-1207959551	; 0xb8000001
 80162d9:	7a696e6f 	bvc	9a71c9d <__exidx_end+0x1a59b35>
 80162dd:	73692065 	cmnvc	r9, #101	; 0x65
 80162e1:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 80162e5:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 80162e9:	 	tstmi	r0, r4, ror #20

080162ec <E117Const::ACN_PACKET_IDENTIFIER>:
 80162ec:	2d435341 	stclcs	3, cr5, [r3, #-260]	; 0xfffffefc
 80162f0:	312e3145 			; <UNDEFINED> instruction: 0x312e3145
 80162f4:	00000037 	andeq	r0, r0, r7, lsr r0

080162f8 <E131BridgeConst::VERSION>:
 80162f8:	30251801 	eorcc	r1, r5, r1, lsl #16
 80162fc:	252d7838 	strcs	r7, [sp, #-2104]!	; 0xfffff7c8
 8016300:	2d783430 	cfldrdcs	mvd3, [r8, #-192]!	; 0xffffff40
 8016304:	78343025 	ldmdavc	r4!, {r0, r2, r5, ip, sp}
 8016308:	3230252d 	eorscc	r2, r0, #188743680	; 0xb400000
 801630c:	32302578 	eorscc	r2, r0, #120, 10	; 0x1e000000
 8016310:	30252d78 	eorcc	r2, r5, r8, ror sp
 8016314:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016318:	30257832 	eorcc	r7, r5, r2, lsr r8
 801631c:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016320:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016324:	30257832 	eorcc	r7, r5, r2, lsr r8
 8016328:	00007832 	andeq	r7, r0, r2, lsr r8

0801632c <vtable for WS28xxDmx>:
	...
 8016334:	0800bbbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}
 8016338:	0800bbdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, r9, fp, ip, sp, pc}
 801633c:	0800bc15 	stmdaeq	r0, {r0, r2, r4, sl, fp, ip, sp, pc}
 8016340:	0800bc9f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r7, sl, fp, ip, sp, pc}
 8016344:	0800bcd1 	stmdaeq	r0, {r0, r4, r6, r7, sl, fp, ip, sp, pc}
 8016348:	0800bbef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8, r9, fp, ip, sp, pc}
 801634c:	0800c5a1 	stmdaeq	r0, {r0, r5, r7, r8, sl, lr, pc}
 8016350:	0800bc2d 	stmdaeq	r0, {r0, r2, r3, r5, sl, fp, ip, sp, pc}
 8016354:	0800bbb5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8, r9, fp, ip, sp, pc}
 8016358:	0800bbb9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, r9, fp, ip, sp, pc}
 801635c:	0800bc5f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, sl, fp, ip, sp, pc}
 8016360:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016364:	2a2e253a 	bcs	8b9f854 <__exidx_end+0xb876ec>
 8016368:	23002c66 	movwcs	r2, #3174	; 0xc66
 801636c:	253d7325 	ldrcs	r7, [sp, #-805]!	; 0xfffffcdb
 8016370:	0a662a2e 	beq	99a0c30 <__exidx_end+0x1988ac8>
 8016374:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 8016378:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 801637c:	64206574 	strtvs	r6, [r0], #-1396	; 0xfffffa8c
 8016380:	73617461 	cmnvc	r1, #1627389952	; 0x61000000
 8016384:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8016388:	65764f00 	ldrbvs	r4, [r6, #-3840]!	; 0xfffff100
 801638c:	69727772 	ldmdbvs	r2!, {r1, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 8016390:	74206574 	strtvc	r6, [r0], #-1396	; 0xfffffa8c
 8016394:	6e696d69 	cdpvs	13, 6, cr6, cr9, cr9, {3}
 8016398:	75282067 	strvc	r2, [r8, #-103]!	; 0xffffff99
 801639c:	47002973 	smlsdxmi	r0, r3, r9, r2
 80163a0:	70756f72 	rsbsvc	r6, r5, r2, ror pc
 80163a4:	00676e69 	rsbeq	r6, r7, r9, ror #28
 80163a8:	636f6c43 	cmnvs	pc, #17152	; 0x4300
 80163ac:	6162206b 	cmnvs	r2, fp, rrx
 80163b0:	20646573 	rsbcs	r6, r4, r3, ror r5
 80163b4:	70696863 	rsbvc	r6, r9, r3, ror #16
 80163b8:	50410073 	subpl	r0, r1, r3, ror r0
 80163bc:	32303141 	eorscc	r3, r0, #1073741840	; 0x40000010
 80163c0:	394b532f 	stmdbcc	fp, {r0, r1, r2, r3, r5, r8, r9, ip, lr}^
 80163c4:	00323238 	eorseq	r3, r2, r8, lsr r2
 80163c8:	74736554 	ldrbtvc	r6, [r3], #-1364	; 0xfffffaac
 80163cc:	74617020 	strbtvc	r7, [r1], #-32	; 0xffffffe0
 80163d0:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 80163d4:	78695000 	stmdavc	r9!, {ip, lr}^
 80163d8:	44206c65 	strtmi	r6, [r0], #-3173	; 0xfffff39b
 80163dc:	7020584d 	eorvc	r5, r0, sp, asr #16
 80163e0:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
 80163e4:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
 80163e8:	20000a73 	andcs	r0, r0, r3, ror sl
 80163ec:	756f7247 	strbvc	r7, [pc, #-583]!	; 80161ad <ArtNetParamsConst::DESTINATION_IP_PORT+0x3b>
 80163f0:	676e6970 			; <UNDEFINED> instruction: 0x676e6970
 80163f4:	756f6320 	strbvc	r6, [pc, #-800]!	; 80160dc <artnet::NODE_ID+0x150>
 80163f8:	3a20746e 	bcc	88335b8 <__exidx_end+0x81b450>
 80163fc:	20642520 	rsbcs	r2, r4, r0, lsr #10
 8016400:	6f72475b 	svcvs	0x0072475b
 8016404:	20737075 	rsbscs	r7, r3, r5, ror r0
 8016408:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801640c:	55000a5d 	strpl	r0, [r0, #-2653]	; 0xfffff5a3
 8016410:	6f6e6b6e 	svcvs	0x006e6b6e
 8016414:	 	mcrmi	14, 0, r6, cr0, cr7, {3}

08016417 <s_patternName>:
 8016417:	656e6f4e 	strbvs	r6, [lr, #-3918]!	; 0xfffff0b2
	...
 8016423:	61520000 	cmpvs	r2, r0
 8016427:	6f626e69 	svcvs	0x00626e69
 801642b:	79632077 	stmdbvc	r3!, {r0, r1, r2, r4, r5, r6, sp}^
 801642f:	00656c63 	rsbeq	r6, r5, r3, ror #24
 8016433:	61656854 	cmnvs	r5, r4, asr r8
 8016437:	20726574 	rsbscs	r6, r2, r4, ror r5
 801643b:	73616863 	cmnvc	r1, #6488064	; 0x630000
 801643f:	6f430065 	svcvs	0x00430065
 8016443:	72756f6c 	rsbsvc	r6, r5, #108, 30	; 0x1b0
 8016447:	70697720 	rsbvc	r7, r9, r0, lsr #14
 801644b:	00000065 	andeq	r0, r0, r5, rrx
 801644f:	6e616353 	mcrvs	3, 3, r6, cr1, cr3, {2}
 8016453:	0072656e 	rsbseq	r6, r2, lr, ror #10
 8016457:	00000000 	andeq	r0, r0, r0
 801645b:	61460000 	mrsvs	r0, (UNDEF: 70)
 801645f:	00006564 	andeq	r6, r0, r4, ror #10
	...
 801646b:	65646e55 	strbvs	r6, [r4, #-3669]!	; 0xfffff1ab
 801646f:	656e6966 	strbvs	r6, [lr, #-2406]!	; 0xfffff69a
 8016473:	 	ldrbmi	r0, [r2, -r4, rrx]

08016475 <PixelType::MAPS>:
 8016475:	00424752 	subeq	r4, r2, r2, asr r7
 8016479:	00474252 	subeq	r4, r7, r2, asr r2
 801647d:	00425247 	subeq	r5, r2, r7, asr #4
 8016481:	00524247 	subseq	r4, r2, r7, asr #4
 8016485:	00475242 	subeq	r5, r7, r2, asr #4
 8016489:	00524742 	subseq	r4, r2, r2, asr #14

0801648d <PixelType::TYPES>:
 801648d:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8016491:	00003130 	andeq	r3, r0, r0, lsr r1
 8016495:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 8016499:	00003131 	andeq	r3, r0, r1, lsr r1
 801649d:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80164a1:	00003231 	andeq	r3, r0, r1, lsr r2
 80164a5:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80164a9:	00423231 	subeq	r3, r2, r1, lsr r2
 80164ad:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80164b1:	00003331 	andeq	r3, r0, r1, lsr r3
 80164b5:	38325357 	ldmdacc	r2!, {r0, r1, r2, r4, r6, r8, r9, ip, lr}
 80164b9:	00003531 	andeq	r3, r0, r1, lsr r5
 80164bd:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80164c1:	00003231 	andeq	r3, r0, r1, lsr r2
 80164c5:	38364b53 	ldmdacc	r6!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80164c9:	00573231 	subseq	r3, r7, r1, lsr r2
 80164cd:	31534355 	cmpcc	r3, r5, asr r3
 80164d1:	00333039 	eorseq	r3, r3, r9, lsr r0
 80164d5:	32534355 	subscc	r4, r3, #1409286145	; 0x54000001
 80164d9:	00333039 	eorseq	r3, r3, r9, lsr r0
 80164dd:	38385343 	ldmdacc	r8!, {r0, r1, r6, r8, r9, ip, lr}
 80164e1:	00003231 	andeq	r3, r0, r1, lsr r2
 80164e5:	31415041 	cmpcc	r1, r1, asr #32
 80164e9:	00003230 	andeq	r3, r0, r0, lsr r2
 80164ed:	38394b53 	ldmdacc	r9!, {r0, r1, r4, r6, r8, r9, fp, lr}
 80164f1:	00003232 	andeq	r3, r0, r2, lsr r2
 80164f5:	31383950 	teqcc	r8, r0, asr r9
 80164f9:	00000033 	andeq	r0, r0, r3, lsr r0
 80164fd:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 8016501:	6170206c 	cmnvs	r0, ip, rrx
 8016505:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
 8016509:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
 801650d:	5420000a 	strtpl	r0, [r0], #-10
 8016511:	20657079 	rsbcs	r7, r5, r9, ror r0
 8016515:	3a202020 	bcc	881e59d <__exidx_end+0x806435>
 8016519:	20732520 	rsbscs	r2, r3, r0, lsr #10
 801651d:	5d64255b 	cfstr64pl	mvdx2, [r4, #-364]!	; 0xfffffe94
 8016521:	4320000a 			; <UNDEFINED> instruction: 0x4320000a
 8016525:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 8016529:	3a202020 	bcc	881e5b1 <__exidx_end+0x806449>
 801652d:	0a642520 	beq	991f9b5 <__exidx_end+0x190784d>
 8016531:	614d2000 	mrsvs	r2, (UNDEF: 77)
 8016535:	6e697070 	mcrvs	0, 3, r7, cr9, cr0, {3}
 8016539:	203a2067 	eorscs	r2, sl, r7, rrx
 801653d:	5b207325 	blpl	88331d9 <__exidx_end+0x81b071>
 8016541:	0a5d6425 	beq	976f5dd <__exidx_end+0x1757475>
 8016545:	30542000 	subscc	r2, r4, r0
 8016549:	20202048 	eorcs	r2, r0, r8, asr #32
 801654d:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016551:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 8016555:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 8016559:	0a5d5825 	beq	976c5f5 <__exidx_end+0x175448d>
 801655d:	31542000 	cmpcc	r4, r0
 8016561:	20202048 	eorcs	r2, r0, r8, asr #32
 8016565:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8016569:	66322e25 	ldrtvs	r2, [r2], -r5, lsr #28
 801656d:	78305b20 	ldmdavc	r0!, {r5, r8, r9, fp, ip, lr}
 8016571:	0a5d5825 	beq	976c60d <__exidx_end+0x17544a5>
 8016575:	2e642500 	cdpcs	5, 6, cr2, cr4, cr0, {0}
 8016579:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 801657d:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8016581:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 8016585:	252c7325 	strcs	r7, [ip, #-805]!	; 0xfffffcdb
 8016589:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 801658d:	6425000a 	strtvs	r0, [r5], #-10
 8016591:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016595:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016599:	73252c64 			; <UNDEFINED> instruction: 0x73252c64
 801659d:	2c73252c 	cfldr64cs	mvdx2, [r3], #-176	; 0xffffff50
 80165a1:	000a6425 	andeq	r6, sl, r5, lsr #8
 80165a5:	4f006e4f 	svcmi	0x00006e4f
 80165a9:	64006666 	strvs	r6, [r0], #-1638	; 0xfffff99a
 80165ad:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 80165b1:	253a7961 	ldrcs	r7, [sl, #-2401]!	; 0xfffff69f
 80165b5:	76000a73 			; <UNDEFINED> instruction: 0x76000a73
 80165b9:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80165bd:	253a6e6f 	ldrcs	r6, [sl, #-3695]!	; 0xfffff191
 80165c1:	70750073 	rsbsvc	r0, r5, r3, ror r0
 80165c5:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 80165c9:	7525203a 	strvc	r2, [r5, #-58]!	; 0xffffffc6
 80165cd:	45000a73 	strmi	r0, [r0, #-2675]	; 0xfffff58d
 80165d1:	524f5252 	subpl	r5, pc, #536870917	; 0x20000005
 80165d5:	65673f23 	strbvs	r3, [r7, #-3875]!	; 0xfffff0dd
 80165d9:	64000a74 	strvs	r0, [r0], #-2676	; 0xfffff58c
 80165dd:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 80165e1:	00237961 	eoreq	r7, r3, r1, ror #18
 80165e5:	4f525245 	svcmi	0x00525245
 80165e9:	0a3f2352 	beq	8fdf339 <__exidx_end+0xfc71d1>
 80165ed:	52524500 	subspl	r4, r2, #0, 10
 80165f1:	2123524f 			; <UNDEFINED> instruction: 0x2123524f
 80165f5:	6572000a 	ldrbvs	r0, [r2, #-10]!
 80165f9:	746f6f62 	strbtvc	r6, [pc], #-3938	; 8016601 <PixelType::TYPES+0x174>
 80165fd:	6c002323 	stcvs	3, cr2, [r0], {35}	; 0x23
 8016601:	23747369 	cmncs	r4, #-1543503871	; 0xa4000001
 8016605:	73696c00 	cmnvc	r9, #0, 24
 8016609:	002a2374 	eoreq	r2, sl, r4, ror r3
 801660d:	69747075 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, ip, sp, lr}^
 8016611:	0023656d 	eoreq	r6, r3, sp, ror #10
 8016615:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016619:	236e6f69 	cmncs	lr, #420	; 0x1a4
 801661d:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
 8016621:	61660023 	cmnvs	r6, r3, lsr #32
 8016625:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8016629:	00232379 	eoreq	r2, r3, r9, ror r3

0801662d <s_Node>:
 801662d:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 8016631:	0074654e 	rsbseq	r6, r4, lr, asr #10
	...
 801663d:	41730000 	cmnmi	r3, r0
 8016641:	45204e43 	strmi	r4, [r0, #-3651]!	; 0xfffff1bd
 8016645:	31332e31 	teqcc	r3, r1, lsr lr
	...
 8016651:	2043534f 	subcs	r5, r3, pc, asr #6
 8016655:	76726553 			; <UNDEFINED> instruction: 0x76726553
 8016659:	00007265 	andeq	r7, r0, r5, ror #4
 801665d:	00000000 	andeq	r0, r0, r0
 8016661:	544c0000 	strbpl	r0, [ip], #-0
 8016665:	00000043 	andeq	r0, r0, r3, asr #32
	...
 8016675:	2043534f 	subcs	r5, r3, pc, asr #6
 8016679:	65696c43 	strbvs	r6, [r9, #-3139]!	; 0xfffff3bd
 801667d:	0000746e 	andeq	r7, r0, lr, ror #8
 8016681:	00000000 	andeq	r0, r0, r0
 8016685:	44520000 	ldrbmi	r0, [r2], #-0
 8016689:	74654e4d 	strbtvc	r4, [r5], #-3661	; 0xfffff1b3
 801668d:	524c4c20 	subpl	r4, ip, #32, 24	; 0x2000
 8016691:	6e4f2050 	mcrvs	0, 2, r2, cr15, cr0, {2}
 8016695:	0000796c 	andeq	r7, r0, ip, ror #18
 8016699:	776f6853 			; <UNDEFINED> instruction: 0x776f6853
 801669d:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
	...
 80166a9:	494d0000 	stmdbmi	sp, {}^	; <UNPREDICTABLE>
 80166ad:	00004944 	andeq	r4, r0, r4, asr #18
	...
 80166bd:	00504444 	subseq	r4, r0, r4, asr #8
	...

080166cf <s_Output>:
 80166cf:	00584d44 	subseq	r4, r8, r4, asr #26
	...
 80166db:	004d4452 	subeq	r4, sp, r2, asr r4
	...
 80166e7:	696e6f4d 	stmdbvs	lr!, {r0, r2, r3, r6, r8, r9, sl, fp, sp, lr}^
 80166eb:	00726f74 	rsbseq	r6, r2, r4, ror pc
 80166ef:	00000000 	andeq	r0, r0, r0
 80166f3:	65786950 	ldrbvs	r6, [r8, #-2384]!	; 0xfffff6b0
 80166f7:	0000006c 	andeq	r0, r0, ip, rrx
 80166fb:	00000000 	andeq	r0, r0, r0
 80166ff:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
 8016703:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 8016707:	00000000 	andeq	r0, r0, r0
 801670b:	0043534f 	subeq	r5, r3, pc, asr #6
	...
 8016717:	666e6f43 	strbtvs	r6, [lr], -r3, asr #30
 801671b:	00006769 	andeq	r6, r0, r9, ror #14
 801671f:	00000000 	andeq	r0, r0, r0
 8016723:	70657453 	rsbvc	r7, r5, r3, asr r4
 8016727:	00726570 	rsbseq	r6, r2, r0, ror r5
 801672b:	00000000 	andeq	r0, r0, r0
 801672f:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 8016733:	00007265 	andeq	r7, r0, r5, ror #4
 8016737:	00000000 	andeq	r0, r0, r0
 801673b:	2d747241 	lfmcs	f7, 2, [r4, #-260]!	; 0xfffffefc
 801673f:	0074654e 	rsbseq	r6, r4, lr, asr #10
 8016743:	00000000 	andeq	r0, r0, r0
 8016747:	69726553 	ldmdbvs	r2!, {r0, r1, r4, r6, r8, sl, sp, lr}^
 801674b:	00006c61 	andeq	r6, r0, r1, ror #24
 801674f:	00000000 	andeq	r0, r0, r0
 8016753:	20424752 	subcs	r4, r2, r2, asr r7
 8016757:	656e6150 	strbvs	r6, [lr, #-336]!	; 0xfffffeb0
 801675b:	0000006c 	andeq	r0, r0, ip, rrx
	...

08016760 <RemoteConfig::s_GET>:
 8016760:	0800dc59 	stmdaeq	r0, {r0, r3, r4, r6, sl, fp, ip, lr, pc}
 8016764:	00000000 	andeq	r0, r0, r0
 8016768:	080165f7 	stmdaeq	r1, {r0, r1, r2, r4, r5, r6, r7, r8, sl, sp, lr}
 801676c:	00000008 	andeq	r0, r0, r8
 8016770:	0800d23d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, ip, lr, pc}
 8016774:	00000000 	andeq	r0, r0, r0
 8016778:	08016600 	stmdaeq	r1, {r9, sl, sp, lr}
 801677c:	00000005 	andeq	r0, r0, r5
 8016780:	0800d23d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r9, ip, lr, pc}
 8016784:	00000000 	andeq	r0, r0, r0
 8016788:	08016606 	stmdaeq	r1, {r1, r2, r9, sl, sp, lr}
 801678c:	00000006 	andeq	r0, r0, r6
 8016790:	0800d3b1 	stmdaeq	r0, {r0, r4, r5, r7, r8, r9, ip, lr, pc}
 8016794:	00000000 	andeq	r0, r0, r0
 8016798:	0801660d 	stmdaeq	r1, {r0, r2, r3, r9, sl, sp, lr}
 801679c:	00000007 	andeq	r0, r0, r7
 80167a0:	0800d371 	stmdaeq	r0, {r0, r4, r5, r6, r8, r9, ip, lr, pc}
 80167a4:	00000000 	andeq	r0, r0, r0
 80167a8:	08016615 	stmdaeq	r1, {r0, r2, r4, r9, sl, sp, lr}
 80167ac:	00000008 	andeq	r0, r0, r8
 80167b0:	0800d31d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9, ip, lr, pc}
 80167b4:	00000000 	andeq	r0, r0, r0
 80167b8:	080165dc 	stmdaeq	r1, {r2, r3, r4, r6, r7, r8, sl, sp, lr}
 80167bc:	00000008 	andeq	r0, r0, r8
 80167c0:	0800d5ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, sl, ip, lr, pc}
 80167c4:	00000000 	andeq	r0, r0, r0
 80167c8:	0801661e 	stmdaeq	r1, {r1, r2, r3, r4, r9, sl, sp, lr}
 80167cc:	00010004 	andeq	r0, r1, r4
 80167d0:	0800d949 	stmdaeq	r0, {r0, r3, r6, r8, fp, ip, lr, pc}
 80167d4:	00000000 	andeq	r0, r0, r0
 80167d8:	08016623 	stmdaeq	r1, {r0, r1, r5, r9, sl, sp, lr}
 80167dc:	00000009 	andeq	r0, r0, r9
 80167e0:	6f626552 	svcvs	0x00626552
 80167e4:	6e69746f 	cdpvs	4, 6, cr7, cr9, cr15, {3}
 80167e8:	2e2e2067 	cdpcs	0, 2, cr2, cr14, cr7, {3}
 80167ec:	52000a2e 	andpl	r0, r0, #188416	; 0x2e000
 80167f0:	6f6f6265 	svcvs	0x006f6265
 80167f4:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
 80167f8:	2e2e2e20 	cdpcs	14, 2, cr2, cr14, cr0, {1}
 80167fc:	6f637200 	svcvs	0x00637200
 8016800:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
 8016804:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8016808:	74656e00 	strbtvc	r6, [r5], #-3584	; 0xfffff200
 801680c:	6b726f77 	blvs	9cb25f0 <__exidx_end+0x1c9a488>
 8016810:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8016814:	73696400 	cmnvc	r9, #0, 8
 8016818:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 801681c:	7478742e 	ldrbtvc	r7, [r8], #-1070	; 0xfffffbd2
 8016820:	74726100 	ldrbtvc	r6, [r2], #-256	; 0xffffff00
 8016824:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8016828:	00747874 	rsbseq	r7, r4, r4, ror r8
 801682c:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8016830:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8016834:	00747874 	rsbseq	r7, r4, r4, ror r8

08016838 <RemoteConfig::s_TXT>:
 8016838:	0800d5f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, sl, ip, lr, pc}
 801683c:	00000000 	andeq	r0, r0, r0
 8016840:	0800d879 	stmdaeq	r0, {r0, r3, r4, r5, r6, fp, ip, lr, pc}
 8016844:	00000000 	andeq	r0, r0, r0
 8016848:	080167fd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr}
 801684c:	0000000b 	andeq	r0, r0, fp
 8016850:	0000000c 	andeq	r0, r0, ip
 8016854:	0800d621 	stmdaeq	r0, {r0, r5, r9, sl, ip, lr, pc}
 8016858:	00000000 	andeq	r0, r0, r0
 801685c:	0800d8a9 	stmdaeq	r0, {r0, r3, r5, r7, fp, ip, lr, pc}
 8016860:	00000000 	andeq	r0, r0, r0
 8016864:	08016809 	stmdaeq	r1, {r0, r3, fp, sp, lr}
 8016868:	0000000b 	andeq	r0, r0, fp
 801686c:	00000000 	andeq	r0, r0, r0
 8016870:	0800d6a5 	stmdaeq	r0, {r0, r2, r5, r7, r9, sl, ip, lr, pc}
 8016874:	00000000 	andeq	r0, r0, r0
 8016878:	0800d921 	stmdaeq	r0, {r0, r5, r8, fp, ip, lr, pc}
 801687c:	00000000 	andeq	r0, r0, r0
 8016880:	08016815 	stmdaeq	r1, {r0, r2, r4, fp, sp, lr}
 8016884:	0000000b 	andeq	r0, r0, fp
 8016888:	0000000f 	andeq	r0, r0, pc
 801688c:	0800d64d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, ip, lr, pc}
 8016890:	00000000 	andeq	r0, r0, r0
 8016894:	0800d8d1 	stmdaeq	r0, {r0, r4, r6, r7, fp, ip, lr, pc}
 8016898:	00000000 	andeq	r0, r0, r0
 801689c:	08016821 	stmdaeq	r1, {r0, r5, fp, sp, lr}
 80168a0:	0000000a 	andeq	r0, r0, sl
 80168a4:	00000001 	andeq	r0, r0, r1
 80168a8:	0800d679 	stmdaeq	r0, {r0, r3, r4, r5, r6, r9, sl, ip, lr, pc}
 80168ac:	00000000 	andeq	r0, r0, r0
 80168b0:	0800d8f9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, fp, ip, lr, pc}
 80168b4:	00000000 	andeq	r0, r0, r0
 80168b8:	0801682c 	stmdaeq	r1, {r2, r3, r5, fp, sp, lr}
 80168bc:	0000000b 	andeq	r0, r0, fp
 80168c0:	00000003 	andeq	r0, r0, r3
 80168c4:	00544547 	subseq	r4, r4, r7, asr #10
 80168c8:	54534f50 	ldrbpl	r4, [r3], #-3920	; 0xfffff0b0
 80168cc:	54544800 	ldrbpl	r4, [r4], #-2048	; 0xfffff800
 80168d0:	0a200050 	beq	8816a18 <__exidx_end+0x7fe8b0>
 80168d4:	312e3100 			; <UNDEFINED> instruction: 0x312e3100
 80168d8:	43003a00 	movwmi	r3, #2560	; 0xa00
 80168dc:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 80168e0:	542d746e 	strtpl	r7, [sp], #-1134	; 0xfffffb92
 80168e4:	00657079 	rsbeq	r7, r5, r9, ror r0
 80168e8:	61003b20 	tstvs	r0, r0, lsr #22
 80168ec:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
 80168f0:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
 80168f4:	6a2f6e6f 	bvs	8bf22b8 <__exidx_end+0xbda150>
 80168f8:	006e6f73 	rsbeq	r6, lr, r3, ror pc
 80168fc:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8016900:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8016904:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8016908:	2f006874 	svccs	0x00006874
 801690c:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8016910:	74682e78 	strbtvc	r2, [r8], #-3704	; 0xfffff188
 8016914:	2f006c6d 	svccs	0x00006c6d
 8016918:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 801691c:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8016920:	2f007373 	svccs	0x00007373
 8016924:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 8016928:	736a2e78 	cmnvc	sl, #120, 28	; 0x780
 801692c:	736a2f00 	cmnvc	sl, #0, 30
 8016930:	002f6e6f 	eoreq	r6, pc, pc, ror #28
 8016934:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8016938:	72657600 	rsbvc	r7, r5, #0, 12
 801693c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 8016940:	74707500 	ldrbtvc	r7, [r0], #-1280	; 0xfffffb00
 8016944:	00656d69 	rsbeq	r6, r5, r9, ror #26
 8016948:	70736964 	rsbsvc	r6, r3, r4, ror #18
 801694c:	0079616c 	rsbseq	r6, r9, ip, ror #2
 8016950:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8016954:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8016958:	6a2f0079 	bvs	8bd6b44 <__exidx_end+0xbbe9dc>
 801695c:	2f6e6f73 	svccs	0x006e6f73
 8016960:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8016964:	72006e6f 	andvc	r6, r0, #1776	; 0x6f0
 8016968:	6f6f6265 	svcvs	0x006f6265
 801696c:	64690074 	strbtvs	r0, [r9], #-116	; 0xffffff8c
 8016970:	69746e65 	ldmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
 8016974:	3c007966 			; <UNDEFINED> instruction: 0x3c007966
 8016978:	434f4421 	movtmi	r4, #62497	; 0xf421
 801697c:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8016980:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8016984:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8016988:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 801698c:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8016990:	3e646165 	powccsz	f6, f4, f5
 8016994:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8016998:	533e656c 	teqpl	lr, #108, 10	; 0x1b000000
 801699c:	696d6275 	stmdbvs	sp!, {r0, r2, r4, r5, r6, r9, sp, lr}^
 80169a0:	742f3c74 	strtvc	r3, [pc], #-3188	; 80169a8 <RemoteConfig::s_TXT+0x170>
 80169a4:	656c7469 	strbvs	r7, [ip, #-1129]!	; 0xfffffb97
 80169a8:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80169ac:	3e646165 	powccsz	f6, f4, f5
 80169b0:	6f623c0a 	svcvs	0x00623c0a
 80169b4:	3c3e7964 			; <UNDEFINED> instruction: 0x3c3e7964
 80169b8:	4f3e3168 	svcmi	0x003e3168
 80169bc:	682f3c4b 	stmdavs	pc!, {r0, r1, r3, r6, sl, fp, ip, sp}	; <UNPREDICTABLE>
 80169c0:	2f3c3e31 	svccs	0x003c3e31
 80169c4:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 80169c8:	2f3c0a3e 	svccs	0x003c0a3e
 80169cc:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80169d0:	52000a3e 	andpl	r0, r0, #253952	; 0x3e000
 80169d4:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0xfffffe9b
 80169d8:	45207473 	strmi	r7, [r0, #-1139]!	; 0xfffffb8d
 80169dc:	7469746e 	strbtvc	r7, [r9], #-1134	; 0xfffffb92
 80169e0:	6f542079 	svcvs	0x00542079
 80169e4:	614c206f 	cmpvs	ip, pc, rrx
 80169e8:	00656772 	rsbeq	r6, r5, r2, ror r7
 80169ec:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 80169f0:	6e756f46 	cdpvs	15, 7, cr6, cr5, cr6, {2}
 80169f4:	65520064 	ldrbvs	r0, [r2, #-100]	; 0xffffff9c
 80169f8:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
 80169fc:	52552d74 	subspl	r2, r5, #116, 26	; 0x1d00
 8016a00:	6f542049 	svcvs	0x00542049
 8016a04:	6f4c206f 	svcvs	0x004c206f
 8016a08:	5600676e 	strpl	r6, [r0], -lr, ror #14
 8016a0c:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016a10:	4e206e6f 	cdpmi	14, 2, cr6, cr0, cr15, {3}
 8016a14:	5320746f 			; <UNDEFINED> instruction: 0x5320746f
 8016a18:	6f707075 	svcvs	0x00707075
 8016a1c:	64657472 	strbtvs	r7, [r5], #-1138	; 0xfffffb8e
 8016a20:	74654d00 	strbtvc	r4, [r5], #-3328	; 0xfffff300
 8016a24:	20646f68 	rsbcs	r6, r4, r8, ror #30
 8016a28:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 8016a2c:	6c706d49 	ldclvs	13, cr6, [r0], #-292	; 0xfffffedc
 8016a30:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8016a34:	00646574 	rsbeq	r6, r4, r4, ror r5
 8016a38:	20646142 	rsbcs	r6, r4, r2, asr #2
 8016a3c:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0xfffffaae
 8016a40:	00747365 	rsbseq	r7, r4, r5, ror #6
 8016a44:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
 8016a48:	206e776f 	rsbcs	r7, lr, pc, ror #14
 8016a4c:	6f727245 	svcvs	0x00727245
 8016a50:	6e490072 	mcrvs	0, 2, r0, cr9, cr2, {3}
 8016a54:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
 8016a58:	53206c61 			; <UNDEFINED> instruction: 0x53206c61
 8016a5c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 8016a60:	72452072 	subvc	r2, r5, #114	; 0x72
 8016a64:	00726f72 	rsbseq	r6, r2, r2, ror pc
 8016a68:	3c004b4f 			; <UNDEFINED> instruction: 0x3c004b4f
 8016a6c:	434f4421 	movtmi	r4, #62497	; 0xf421
 8016a70:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
 8016a74:	6d746820 	ldclvs	8, cr6, [r4, #-128]!	; 0xffffff80
 8016a78:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8016a7c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8016a80:	683c0a3e 	ldmdavs	ip!, {r1, r2, r3, r4, r5, r9, fp}
 8016a84:	3e646165 	powccsz	f6, f4, f5
 8016a88:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8016a8c:	253e656c 	ldrcs	r6, [lr, #-1388]!	; 0xfffffa94
 8016a90:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8016a94:	69742f3c 	ldmdbvs	r4!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 8016a98:	3e656c74 	mcrcc	12, 3, r6, cr5, cr4, {3}
 8016a9c:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8016aa0:	0a3e6461 	beq	8fafc2c <__exidx_end+0xf97ac4>
 8016aa4:	646f623c 	strbtvs	r6, [pc], #-572	; 8016aac <RemoteConfig::s_TXT+0x274>
 8016aa8:	683c3e79 	ldmdavs	ip!, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8016aac:	73253e31 			; <UNDEFINED> instruction: 0x73253e31
 8016ab0:	31682f3c 	cmncc	r8, ip, lsr pc
 8016ab4:	622f3c3e 	eorvs	r3, pc, #15872	; 0x3e00
 8016ab8:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8016abc:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8016ac0:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8016ac4:	5448000a 	strbpl	r0, [r8], #-10
 8016ac8:	312f5054 	qsubcc	r5, r4, pc	; <UNPREDICTABLE>
 8016acc:	2520312e 	strcs	r3, [r0, #-302]!	; 0xfffffed2
 8016ad0:	73252075 			; <UNDEFINED> instruction: 0x73252075
 8016ad4:	65530a0d 	ldrbvs	r0, [r3, #-2573]	; 0xfffff5f3
 8016ad8:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
 8016adc:	7325203a 			; <UNDEFINED> instruction: 0x7325203a
 8016ae0:	6f430a0d 	svcvs	0x00430a0d
 8016ae4:	6e65746e 	cdpvs	4, 6, cr7, cr5, cr14, {3}
 8016ae8:	79542d74 	ldmdbvc	r4, {r2, r4, r5, r6, r8, sl, fp, sp}^
 8016aec:	203a6570 	eorscs	r6, sl, r0, ror r5
 8016af0:	0a0d7325 	beq	837378c <__exidx_end+0x35b624>
 8016af4:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
 8016af8:	2d746e65 	ldclcs	14, cr6, [r4, #-404]!	; 0xfffffe6c
 8016afc:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
 8016b00:	203a6874 	eorscs	r6, sl, r4, ror r8
 8016b04:	0a0d7525 	beq	8373fa0 <__exidx_end+0x35be38>
 8016b08:	6e6e6f43 	cdpvs	15, 6, cr6, cr14, cr3, {2}
 8016b0c:	69746365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sp, lr}^
 8016b10:	203a6e6f 	eorscs	r6, sl, pc, ror #28
 8016b14:	736f6c63 	cmnvc	pc, #25344	; 0x6300
 8016b18:	0d0a0d65 	stceq	13, cr0, [sl, #-404]	; 0xfffffe6c
 8016b1c:	 	ldrbvs	r0, [r4, #-10]!

08016b1e <contentType>:
 8016b1e:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8016b22:	6d74682f 	ldclvs	8, cr6, [r4, #-188]!	; 0xffffff44
 8016b26:	0000006c 	andeq	r0, r0, ip, rrx
	...
 8016b3e:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8016b42:	7373632f 	cmnvc	r3, #-1140850688	; 0xbc000000
	...
 8016b5e:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
 8016b62:	76616a2f 	strbtvc	r6, [r1], -pc, lsr #20
 8016b66:	72637361 	rsbvc	r7, r3, #-2080374783	; 0x84000001
 8016b6a:	00747069 	rsbseq	r7, r4, r9, rrx
	...
 8016b7e:	6c707061 	ldclvs	0, cr7, [r0], #-388	; 0xfffffe7c
 8016b82:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
 8016b86:	2f6e6f69 	svccs	0x006e6f69
 8016b8a:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
	...

08016b9e <RemoteConfigConst::PARAMS_DISABLE>:
 8016b9e:	61736964 	cmnvs	r3, r4, ror #18
 8016ba2:	00656c62 	rsbeq	r6, r5, r2, ror #24

08016ba6 <RemoteConfigConst::PARAMS_FILE_NAME>:
 8016ba6:	6e6f6372 	mcrvs	3, 3, r6, cr15, cr2, {3}
 8016baa:	2e676966 	vnmulcs.f16	s13, s14, s13	; <UNPREDICTABLE>
 8016bae:	00747874 	rsbseq	r7, r4, r4, ror r8

08016bb2 <RemoteConfigConst::PARAMS_DISPLAY_NAME>:
 8016bb2:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8016bb6:	5f79616c 	svcpl	0x0079616c
 8016bba:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

08016bbf <RemoteConfigConst::PARAMS_DISABLE_WRITE>:
 8016bbf:	61736964 	cmnvs	r3, r4, ror #18
 8016bc3:	5f656c62 	svcpl	0x00656c62
 8016bc7:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 8016bcb:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08016bcd <RemoteConfigConst::PARAMS_ENABLE_REBOOT>:
 8016bcd:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016bd1:	725f656c 	subsvc	r6, pc, #108, 10	; 0x1b000000
 8016bd5:	6f6f6265 	svcvs	0x006f6265
 8016bd9:	 	mcrvs	0, 3, r0, cr5, cr4, {3}

08016bdb <RemoteConfigConst::PARAMS_ENABLE_UPTIME>:
 8016bdb:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016bdf:	755f656c 	ldrbvc	r6, [pc, #-1388]	; 801667b <s_Node+0x4e>
 8016be3:	6d697470 	cfstrdvs	mvd7, [r9, #-448]!	; 0xfffffe40
 8016be7:	 	cdpvs	0, 6, cr0, cr5, cr5, {3}

08016be9 <RemoteConfigConst::PARAMS_ENABLE_FACTORY>:
 8016be9:	62616e65 	rsbvs	r6, r1, #1616	; 0x650
 8016bed:	665f656c 	ldrbvs	r6, [pc], -ip, ror #10
 8016bf1:	6f746361 	svcvs	0x00746361
 8016bf5:	7b007972 	blvc	80351c5 <__exidx_end+0x1d05d>
 8016bf9:	73696c22 	cmnvc	r9, #8704	; 0x2200
 8016bfd:	7b3a2274 	blvc	8e9f5d5 <__exidx_end+0xe8746d>
 8016c01:	22706922 	rsbscs	r6, r0, #557056	; 0x88000
 8016c05:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8016c09:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8016c0d:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8016c11:	222c2264 	eorcs	r2, ip, #100, 4	; 0x40000006
 8016c15:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8016c19:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016c1d:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8016c21:	65646f6e 	strbvs	r6, [r4, #-3950]!	; 0xfffff092
 8016c25:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8016c29:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8016c2d:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016c31:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8016c35:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8016c39:	227b3a22 	rsbscs	r3, fp, #139264	; 0x22000
 8016c3d:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 8016c41:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8016c45:	222c2273 	eorcs	r2, ip, #805306375	; 0x30000007
 8016c49:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8016c4d:	253a2274 	ldrcs	r2, [sl, #-628]!	; 0xfffffd8c
 8016c51:	7d7d7d64 	ldclvc	13, cr7, [sp, #-400]!	; 0xfffffe70
 8016c55:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8016c59:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8016c5d:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 8016c61:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8016c65:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8016c69:	616f6222 	cmnvs	pc, r2, lsr #4
 8016c6d:	3a226472 	bcc	88afe3d <__exidx_end+0x897cd5>
 8016c71:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8016c75:	7562222c 	strbvc	r2, [r2, #-556]!	; 0xfffffdd4
 8016c79:	22646c69 	rsbcs	r6, r4, #26880	; 0x6900
 8016c7d:	64227b3a 	strtvs	r7, [r2], #-2874	; 0xfffff4c6
 8016c81:	22657461 	rsbcs	r7, r5, #1627389952	; 0x61000000
 8016c85:	2e25223a 	mcrcs	2, 1, r2, cr5, cr10, {1}
 8016c89:	2c22732a 	stccs	3, cr7, [r2], #-168	; 0xffffff58
 8016c8d:	6d697422 	cfstrdvs	mvd7, [r9, #-136]!	; 0xffffff78
 8016c91:	223a2265 	eorscs	r2, sl, #1342177286	; 0x50000006
 8016c95:	732a2e25 			; <UNDEFINED> instruction: 0x732a2e25
 8016c99:	007d7d22 	rsbseq	r7, sp, r2, lsr #26
 8016c9d:	7075227b 	rsbsvc	r2, r5, fp, ror r2
 8016ca1:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
 8016ca5:	75253a22 	strvc	r3, [r5, #-2594]!	; 0xfffff5de
 8016ca9:	7b000a7d 	blvc	80196a5 <__exidx_end+0x153d>
 8016cad:	73696422 	cmnvc	r9, #570425344	; 0x22000000
 8016cb1:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016cb5:	64253a22 	strtvs	r3, [r5], #-2594	; 0xfffff5de
 8016cb9:	227b007d 	rsbscs	r0, fp, #125	; 0x7d
 8016cbd:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8016cc1:	7b3a2273 	blvc	8e9f695 <__exidx_end+0xe8752d>
 8016cc5:	74726122 	ldrbtvc	r6, [r2], #-290	; 0xfffffede
 8016cc9:	2e74656e 	cdpcs	5, 7, cr6, cr4, cr14, {3}
 8016ccd:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016cd1:	7241223a 	subvc	r2, r1, #-1610612733	; 0xa0000003
 8016cd5:	654e2d74 	strbvs	r2, [lr, #-3444]	; 0xfffff28c
 8016cd9:	222c2274 	eorcs	r2, ip, #116, 4	; 0x40000007
 8016cdd:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8016ce1:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8016ce5:	22747874 	rsbscs	r7, r4, #116, 16	; 0x740000
 8016ce9:	4d44223a 	sfmmi	f2, 2, [r4, #-232]	; 0xffffff18
 8016ced:	69502058 	ldmdbvs	r0, {r3, r4, r6, sp}^
 8016cf1:	226c6578 	rsbcs	r6, ip, #120, 10	; 0x1e000000
 8016cf5:	6964222c 	stmdbvs	r4!, {r2, r3, r5, r9, sp}^
 8016cf9:	616c7073 	smcvs	50947	; 0xc703
 8016cfd:	78742e79 	ldmdavc	r4!, {r0, r3, r4, r5, r6, r9, sl, fp, sp}^
 8016d01:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8016d05:	70736944 	rsbsvc	r6, r3, r4, asr #18
 8016d09:	2079616c 	rsbscs	r6, r9, ip, ror #2
 8016d0d:	22464455 	subcs	r4, r6, #1426063360	; 0x55000000
 8016d11:	656e222c 	strbvs	r2, [lr, #-556]!	; 0xfffffdd4
 8016d15:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 8016d19:	78742e6b 	ldmdavc	r4!, {r0, r1, r3, r5, r6, r9, sl, fp, sp}^
 8016d1d:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8016d21:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8016d25:	226b726f 	rsbcs	r7, fp, #-268435450	; 0xf0000006
 8016d29:	6372222c 	cmnvs	r2, #44, 4	; 0xc0000002
 8016d2d:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8016d31:	78742e67 	ldmdavc	r4!, {r0, r1, r2, r5, r6, r9, sl, fp, sp}^
 8016d35:	223a2274 	eorscs	r2, sl, #116, 4	; 0x40000007
 8016d39:	6f6d6552 	svcvs	0x006d6552
 8016d3d:	63206574 			; <UNDEFINED> instruction: 0x63206574
 8016d41:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8016d45:	61727567 	cmnvs	r2, r7, ror #10
 8016d49:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8016d4d:	007d7d22 	rsbseq	r7, sp, r2, lsr #26

08016d51 <index_html>:
 8016d51:	4f44213c 	svcmi	0x0044213c
 8016d55:	50595443 	subspl	r5, r9, r3, asr #8
 8016d59:	74682045 	strbtvc	r2, [r8], #-69	; 0xffffffbb
 8016d5d:	0a3e6c6d 	beq	8fb1f19 <__exidx_end+0xf99db1>
 8016d61:	6d74683c 	ldclvs	8, cr6, [r4, #-240]!	; 0xffffff10
 8016d65:	3c0a3e6c 	stccc	14, cr3, [sl], {108}	; 0x6c
 8016d69:	64616568 	strbtvs	r6, [r1], #-1384	; 0xfffffa98
 8016d6d:	3c090a3e 			; <UNDEFINED> instruction: 0x3c090a3e
 8016d71:	6b6e696c 	blvs	9bb1329 <__exidx_end+0x1b991c1>
 8016d75:	6c657220 	sfmvs	f7, 2, [r5], #-128	; 0xffffff80
 8016d79:	7473223d 	ldrbtvc	r2, [r3], #-573	; 0xfffffdc3
 8016d7d:	73656c79 	cmnvc	r5, #30976	; 0x7900
 8016d81:	74656568 	strbtvc	r6, [r5], #-1384	; 0xfffffa98
 8016d85:	72682022 	rsbvc	r2, r8, #34	; 0x22
 8016d89:	223d6665 	eorscs	r6, sp, #105906176	; 0x6500000
 8016d8d:	6c797473 	cfldrdvs	mvd7, [r9], #-460	; 0xfffffe34
 8016d91:	632e7365 			; <UNDEFINED> instruction: 0x632e7365
 8016d95:	20227373 	eorcs	r7, r2, r3, ror r3
 8016d99:	090a3e2f 	stmdbeq	sl, {r0, r1, r2, r3, r5, r9, sl, fp, ip, sp}
 8016d9d:	7469743c 	strbtvc	r7, [r9], #-1084	; 0xfffffbc4
 8016da1:	3c3e656c 	cfldr32cc	mvfx6, [lr], #-432	; 0xfffffe50
 8016da5:	7469742f 	strbtvc	r7, [r9], #-1071	; 0xfffffbd1
 8016da9:	0a3e656c 	beq	8fb0361 <__exidx_end+0xf981f9>
 8016dad:	65682f3c 	strbvs	r2, [r8, #-3900]!	; 0xfffff0c4
 8016db1:	0a3e6461 	beq	8faff3d <__exidx_end+0xf97dd5>
 8016db5:	646f623c 	strbtvs	r6, [pc], #-572	; 8016dbd <index_html+0x6c>
 8016db9:	090a3e79 	stmdbeq	sl, {r0, r3, r4, r5, r6, r9, sl, fp, ip, sp}
 8016dbd:	6165683c 	cmnvs	r5, ip, lsr r8
 8016dc1:	3e726564 	cdpcc	5, 7, cr6, cr2, cr4, {3}
 8016dc5:	206c753c 	rsbcs	r7, ip, ip, lsr r5
 8016dc9:	223d6469 	eorscs	r6, sp, #1761607680	; 0x69000000
 8016dcd:	694c6469 	stmdbvs	ip, {r0, r3, r5, r6, sl, sp, lr}^
 8016dd1:	3e227473 	mcrcc	4, 1, r7, cr2, cr3, {3}
 8016dd5:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8016dd9:	682f3c3e 	stmdavs	pc!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8016ddd:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8016de1:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8016de5:	3c3e703c 	ldccc	0, cr7, [lr], #-240	; 0xffffff10
 8016de9:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 8016ded:	69207463 	stmdbvs	r0!, {r0, r1, r5, r6, sl, ip, sp, lr}
 8016df1:	69223d64 	stmdbvs	r2!, {r2, r5, r6, r8, sl, fp, ip, sp}
 8016df5:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 8016df9:	6f746365 	svcvs	0x00746365
 8016dfd:	20227972 	eorcs	r7, r2, r2, ror r9
 8016e01:	68636e6f 	stmdavs	r3!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
 8016e05:	65676e61 	strbvs	r6, [r7, #-3681]!	; 0xfffff19f
 8016e09:	6567223d 	strbvs	r2, [r7, #-573]!	; 0xfffffdc3
 8016e0d:	78745f74 	ldmdavc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8016e11:	68742874 	ldmdavs	r4!, {r2, r4, r5, r6, fp, sp}^
 8016e15:	762e7369 	strtvc	r7, [lr], -r9, ror #6
 8016e19:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 8016e1d:	3c3e2229 	lfmcc	f2, 4, [lr], #-164	; 0xffffff5c
 8016e21:	6c65732f 	stclvs	3, cr7, [r5], #-188	; 0xffffff44
 8016e25:	3e746365 	cdpcc	3, 7, cr6, cr4, cr5, {3}
 8016e29:	3e702f3c 	mrccc	15, 3, r2, cr0, cr12, {1}
 8016e2d:	743c090a 	ldrtvc	r0, [ip], #-2314	; 0xfffff6f6
 8016e31:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
 8016e35:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8016e39:	54646922 	strbtpl	r6, [r4], #-2338	; 0xfffff6de
 8016e3d:	20227478 	eorcs	r7, r2, r8, ror r4
 8016e41:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8016e45:	273d7265 	ldrcs	r7, [sp, -r5, ror #4]!
 8016e49:	3c3e2731 	ldccc	7, cr2, [lr], #-196	; 0xffffff3c
 8016e4d:	6261742f 	rsbvs	r7, r1, #788529152	; 0x2f000000
 8016e51:	0a3e656c 	beq	8fb0409 <__exidx_end+0xf982a1>
 8016e55:	6f663c09 	svcvs	0x00663c09
 8016e59:	7265746f 	rsbvc	r7, r5, #1862270976	; 0x6f000000
 8016e5d:	6c753c3e 	ldclvs	12, cr3, [r5], #-248	; 0xffffff08
 8016e61:	3d646920 			; <UNDEFINED> instruction: 0x3d646920
 8016e65:	56646922 	strbtpl	r6, [r4], -r2, lsr #18
 8016e69:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8016e6d:	3e226e6f 	cdpcc	14, 2, cr6, cr2, cr15, {3}
 8016e71:	6c752f3c 	ldclvs	15, cr2, [r5], #-240	; 0xffffff10
 8016e75:	662f3c3e 			; <UNDEFINED> instruction: 0x662f3c3e
 8016e79:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8016e7d:	090a3e72 	stmdbeq	sl, {r1, r4, r5, r6, r9, sl, fp, ip, sp}
 8016e81:	7263733c 	rsbvc	r7, r3, #60, 6	; 0xf0000000
 8016e85:	20747069 	rsbscs	r7, r4, r9, rrx
 8016e89:	3d637273 	sfmcc	f7, 2, [r3, #-460]!	; 0xfffffe34
 8016e8d:	646e6922 	strbtvs	r6, [lr], #-2338	; 0xfffff6de
 8016e91:	6a2e7865 	bvs	8bb502d <__exidx_end+0xb9cec5>
 8016e95:	3c3e2273 	lfmcc	f2, 4, [lr], #-460	; 0xfffffe34
 8016e99:	7263732f 	rsbvc	r7, r3, #-1140850688	; 0xbc000000
 8016e9d:	3e747069 	cdpcc	0, 7, cr7, cr4, cr9, {3}
 8016ea1:	622f3c0a 	eorvs	r3, pc, #2560	; 0xa00
 8016ea5:	3e79646f 	cdpcc	4, 7, cr6, cr9, cr15, {3}
 8016ea9:	682f3c0a 	stmdavs	pc!, {r1, r3, sl, fp, ip, sp}	; <UNPREDICTABLE>
 8016ead:	3e6c6d74 	mcrcc	13, 3, r6, cr12, cr4, {3}
 8016eb1:	 	svcvs	0x0062000a

08016eb3 <styles_css>:
 8016eb3:	79646f62 	stmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016eb7:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8016ebb:	63616220 	cmnvs	r1, #32, 4
 8016ebf:	6f72676b 	svcvs	0x0072676b
 8016ec3:	2d646e75 	stclcs	14, cr6, [r4, #-468]!	; 0xfffffe2c
 8016ec7:	6f6c6f63 	svcvs	0x006c6f63
 8016ecb:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8016ecf:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8016ed3:	30322c30 	eorscc	r2, r2, r0, lsr ip
 8016ed7:	2930322c 	ldmdbcs	r0!, {r2, r3, r5, r9, ip, sp}
 8016edb:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8016edf:	6f6c6f63 	svcvs	0x006c6f63
 8016ee3:	72203a72 	eorvc	r3, r0, #466944	; 0x72000
 8016ee7:	32286267 	eorcc	r6, r8, #1879048198	; 0x70000006
 8016eeb:	202c3535 	eorcs	r3, ip, r5, lsr r5
 8016eef:	2c353532 	cfldr32cs	mvfx3, [r5], #-200	; 0xffffff38
 8016ef3:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 8016ef7:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 8016efb:	6c750a0a 			; <UNDEFINED> instruction: 0x6c750a0a
 8016eff:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8016f03:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016f07:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016f0b:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8016f0f:	0a3b7865 	beq	8ef50ab <__exidx_end+0xedcf43>
 8016f13:	6c0a0a7d 			; <UNDEFINED> instruction: 0x6c0a0a7d
 8016f17:	0a7b2069 	beq	9edf0c3 <__exidx_end+0x1ec6f5b>
 8016f1b:	696c2020 	stmdbvs	ip!, {r5, sp}^
 8016f1f:	732d7473 			; <UNDEFINED> instruction: 0x732d7473
 8016f23:	656c7974 	strbvs	r7, [ip, #-2420]!	; 0xfffff68c
 8016f27:	6f6e203a 	svcvs	0x006e203a
 8016f2b:	0a3b656e 	beq	8ef04eb <__exidx_end+0xed8383>
 8016f2f:	616d2020 	cmnvs	sp, r0, lsr #32
 8016f33:	6e696772 	mcrvs	7, 3, r6, cr9, cr2, {3}
 8016f37:	7031203a 	eorsvc	r2, r1, sl, lsr r0
 8016f3b:	70352078 	eorsvc	r2, r5, r8, ror r0
 8016f3f:	7d0a3b78 	vstrvc	d3, [sl, #-480]	; 0xfffffe20
 8016f43:	65680a0a 	strbvs	r0, [r8, #-2570]!	; 0xfffff5f6
 8016f47:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 8016f4b:	200a7b20 	andcs	r7, sl, r0, lsr #22
 8016f4f:	73696420 	cmnvc	r9, #32, 8	; 0x20000000
 8016f53:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 8016f57:	6c66203a 	stclvs	0, cr2, [r6], #-232	; 0xffffff18
 8016f5b:	0a3b7865 	beq	8ef50f7 <__exidx_end+0xedcf8f>
 8016f5f:	6f622020 	svcvs	0x00622020
 8016f63:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8016f67:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8016f6b:	3a737569 	bcc	9cf4517 <__exidx_end+0x1cdc3af>
 8016f6f:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8016f73:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8016f77:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8016f7b:	203a7265 	eorscs	r7, sl, r5, ror #4
 8016f7f:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016f83:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8016f87:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8016f8b:	0a3b7870 	beq	8ef5153 <__exidx_end+0xedcfeb>
 8016f8f:	660a0a7d 			; <UNDEFINED> instruction: 0x660a0a7d
 8016f93:	65746f6f 	ldrbvs	r6, [r4, #-3951]!	; 0xfffff091
 8016f97:	0a7b2072 	beq	9edf167 <__exidx_end+0x1ec6fff>
 8016f9b:	69642020 	stmdbvs	r4!, {r5, sp}^
 8016f9f:	616c7073 	smcvs	50947	; 0xc703
 8016fa3:	66203a79 			; <UNDEFINED> instruction: 0x66203a79
 8016fa7:	3b78656c 	blcc	9e3055f <__exidx_end+0x1e183f7>
 8016fab:	6a20200a 	bvs	881efdb <__exidx_end+0x806e73>
 8016faf:	69747375 	ldmdbvs	r4!, {r0, r2, r4, r5, r6, r8, r9, ip, sp, lr}^
 8016fb3:	632d7966 			; <UNDEFINED> instruction: 0x632d7966
 8016fb7:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	; 0xfffff191
 8016fbb:	203a746e 	eorscs	r7, sl, lr, ror #8
 8016fbf:	746e6563 	strbtvc	r6, [lr], #-1379	; 0xfffffa9d
 8016fc3:	0a3b7265 	beq	8ef395f <__exidx_end+0xedb7f7>
 8016fc7:	6f622020 	svcvs	0x00622020
 8016fcb:	72656472 	rsbvc	r6, r5, #1912602624	; 0x72000000
 8016fcf:	6461722d 	strbtvs	r7, [r1], #-557	; 0xfffffdd3
 8016fd3:	3a737569 	bcc	9cf457f <__exidx_end+0x1cdc417>
 8016fd7:	78703420 	ldmdavc	r0!, {r5, sl, ip, sp}^
 8016fdb:	20200a3b 	eorcs	r0, r0, fp, lsr sl
 8016fdf:	64726f62 	ldrbtvs	r6, [r2], #-3938	; 0xfffff09e
 8016fe3:	203a7265 	eorscs	r7, sl, r5, ror #4
 8016fe7:	696c6f73 	stmdbvs	ip!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8016feb:	72672064 	rsbvc	r2, r7, #100	; 0x64
 8016fef:	31207965 			; <UNDEFINED> instruction: 0x31207965
 8016ff3:	0a3b7870 	beq	8ef51bb <__exidx_end+0xedd053>
 8016ff7:	00000a7d 	andeq	r0, r0, sp, ror sl
	...

08016ffc <HttpContent>:
 8016ffc:	08016918 	stmdaeq	r1, {r3, r4, r8, fp, sp, lr}
 8017000:	08016eb3 	stmdaeq	r1, {r0, r1, r4, r5, r7, r9, sl, fp, sp, lr}
 8017004:	08016924 	stmdaeq	r1, {r2, r5, r8, fp, sp, lr}
 8017008:	08017014 	stmdaeq	r1, {r2, r4, ip, sp, lr}
 801700c:	0801690c 	stmdaeq	r1, {r2, r3, r8, fp, sp, lr}
 8017010:	08016d51 	stmdaeq	r1, {r0, r4, r6, r8, sl, fp, sp, lr}

08017014 <index_js>:
 8017014:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017018:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801701c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017020:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8017024:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017028:	6a284e4f 	bvs	8a2a96c <__exidx_end+0xa12804>
 801702c:	296e6f73 	stmdbcs	lr!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017030:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017034:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8017038:	6c727520 	cfldr64vs	mvdx7, [r2], #-128	; 0xffffff80
 801703c:	6a2f273d 	bvs	8be0d38 <__exidx_end+0xbc8bd0>
 8017040:	2f6e6f73 	svccs	0x006e6f73
 8017044:	202b2027 	eorcs	r2, fp, r7, lsr #32
 8017048:	6e6f736a 	cdpvs	3, 6, cr7, cr15, cr10, {3}
 801704c:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 8017050:	20797274 	rsbscs	r7, r9, r4, ror r2
 8017054:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 8017058:	656c0909 	strbvs	r0, [ip, #-2313]!	; 0xfffff6f7
 801705c:	65722074 	ldrbvs	r2, [r2, #-116]!	; 0xffffff8c
 8017060:	77613d73 			; <UNDEFINED> instruction: 0x77613d73
 8017064:	20746961 	rsbscs	r6, r4, r1, ror #18
 8017068:	63746566 	cmnvs	r4, #427819008	; 0x19800000
 801706c:	72752868 	rsbsvc	r2, r5, #104, 16	; 0x680000
 8017070:	0a3b296c 	beq	8ee1628 <__exidx_end+0xec94c0>
 8017074:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8017078:	75746572 	ldrbvc	r6, [r4, #-1394]!	; 0xfffffa8e
 801707c:	61206e72 			; <UNDEFINED> instruction: 0x61206e72
 8017080:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8017084:	73657220 	cmnvc	r5, #32, 4
 8017088:	6f736a2e 	svcvs	0x00736a2e
 801708c:	3b29286e 	blcc	8a6124c <__exidx_end+0xa490e4>
 8017090:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 8017094:	74616320 	strbtvc	r6, [r1], #-800	; 0xfffffce0
 8017098:	28206863 	stmdacs	r0!, {r0, r1, r5, r6, fp, sp, lr}
 801709c:	6f727265 	svcvs	0x00727265
 80170a0:	7b202972 	blvc	8821670 <__exidx_end+0x809508>
 80170a4:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80170a8:	6e6f6309 	cdpvs	3, 6, cr6, cr15, cr9, {0}
 80170ac:	656c6f73 	strbvs	r6, [ip, #-3955]!	; 0xfffff08d
 80170b0:	676f6c2e 	strbvs	r6, [pc, -lr, lsr #24]!
 80170b4:	72726528 	rsbsvc	r6, r2, #40, 10	; 0xa000000
 80170b8:	3b29726f 	blcc	8a73a7c <__exidx_end+0xa5b914>
 80170bc:	7d09090a 	vstrvc.16	s0, [r9, #-20]	; 0xffffffec	; <UNPREDICTABLE>
 80170c0:	0a0a7d0a 	beq	82b64f0 <__exidx_end+0x29e388>
 80170c4:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 80170c8:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 80170cc:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 80170d0:	72206e6f 	eorvc	r6, r0, #1776	; 0x6f0
 80170d4:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 80170d8:	73694c72 	cmnvc	r9, #29184	; 0x7200
 80170dc:	20292874 	eorcs	r2, r9, r4, ror r8
 80170e0:	09090a7b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r6, r9, fp}
 80170e4:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80170e8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 80170ec:	6177613d 	cmnvs	r7, sp, lsr r1
 80170f0:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80170f4:	534a7465 	movtpl	r7, #42085	; 0xa465
 80170f8:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 80170fc:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017100:	0a3b2927 	beq	8ee15a4 <__exidx_end+0xec943c>
 8017104:	6f640909 	svcvs	0x00640909
 8017108:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 801710c:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 8017110:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 8017114:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 8017118:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 801711c:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 8017120:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
 8017124:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 8017128:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 801712c:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8017130:	3c223d4c 	stccc	13, cr3, [r2], #-304	; 0xfffffed0
 8017134:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8017138:	73696c2b 	cmnvc	r9, #11008	; 0x2b00
 801713c:	696c2e74 	stmdbvs	ip!, {r2, r4, r5, r6, r9, sl, fp, sp}^
 8017140:	6e2e7473 	mcrvs	4, 1, r7, cr14, cr3, {3}
 8017144:	2b656d61 	blcs	99726d0 <__exidx_end+0x195a568>
 8017148:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80170c8 <index_js+0xb4>
 801714c:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8017150:	2b223e69 	blcs	88a6afc <__exidx_end+0x88e994>
 8017154:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017158:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 801715c:	6f6e2e74 	svcvs	0x006e2e74
 8017160:	742e6564 	strtvc	r6, [lr], #-1380	; 0xfffffa9c
 8017164:	2b657079 	blcs	9973350 <__exidx_end+0x195b1e8>
 8017168:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 80170e8 <index_js+0xd4>
 801716c:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 8017170:	2b223e69 	blcs	88a6b1c <__exidx_end+0x88e9b4>
 8017174:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
 8017178:	73696c2e 	cmnvc	r9, #11776	; 0x2e00
 801717c:	6f6e2e74 	svcvs	0x006e2e74
 8017180:	702e6564 	eorvc	r6, lr, r4, ror #10
 8017184:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
 8017188:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 801718c:	2f3c222b 	svccs	0x003c222b
 8017190:	223e696c 	eorscs	r6, lr, #108, 18	; 0x1b0000
 8017194:	0a7d0a3b 	beq	9f59a88 <__exidx_end+0x1f41920>
 8017198:	7973610a 	ldmdbvc	r3!, {r1, r3, r8, sp, lr}^
 801719c:	6620636e 	strtvs	r6, [r0], -lr, ror #6
 80171a0:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 80171a4:	206e6f69 	rsbcs	r6, lr, r9, ror #30
 80171a8:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 80171ac:	69447265 	stmdbvs	r4, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80171b0:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 80171b4:	2879726f 	ldmdacs	r9!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
 80171b8:	0a7b2029 	beq	9edf264 <__exidx_end+0x1ec70fc>
 80171bc:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 80171c0:	64207465 	strtvs	r7, [r0], #-1125	; 0xfffffb9b
 80171c4:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 80171c8:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 80171cc:	6177613d 	cmnvs	r7, sp, lsr r1
 80171d0:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 80171d4:	534a7465 	movtpl	r7, #42085	; 0xa465
 80171d8:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 80171dc:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 80171e0:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 80171e4:	3b292779 	blcc	8a60fd0 <__exidx_end+0xa48e68>
 80171e8:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80171ec:	2074656c 	rsbscs	r6, r4, ip, ror #10
 80171f0:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80171f4:	0a22223d 	beq	889faf0 <__exidx_end+0x887988>
 80171f8:	6c090909 			; <UNDEFINED> instruction: 0x6c090909
 80171fc:	66207465 	strtvs	r7, [r0], -r5, ror #8
 8017200:	6e656c69 	cdpvs	12, 6, cr6, cr5, cr9, {3}
 8017204:	73656d61 	cmnvc	r5, #6208	; 0x1840
 8017208:	6a624f3d 	bvs	98aaf04 <__exidx_end+0x1892d9c>
 801720c:	2e746365 	cdpcs	3, 7, cr6, cr4, cr5, {3}
 8017210:	7379656b 	cmnvc	r9, #448790528	; 0x1ac00000
 8017214:	72696428 	rsbvc	r6, r9, #40, 8	; 0x28000000
 8017218:	6f746365 	svcvs	0x00746365
 801721c:	225b7972 	subscs	r7, fp, #1867776	; 0x1c8000
 8017220:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8017224:	295d2273 	ldmdbcs	sp, {r0, r1, r4, r5, r6, r9, sp}^
 8017228:	09090a3b 	stmdbeq	r9, {r0, r1, r3, r4, r5, r9, fp}
 801722c:	6c696609 	stclvs	6, cr6, [r9], #-36	; 0xffffffdc
 8017230:	6d616e65 	stclvs	14, cr6, [r1, #-404]!	; 0xfffffe6c
 8017234:	662e7365 	strtvs	r7, [lr], -r5, ror #6
 8017238:	6145726f 	cmpvs	r5, pc, ror #4
 801723c:	66286863 	strtvs	r6, [r8], -r3, ror #16
 8017240:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 8017244:	286e6f69 	stmdacs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017248:	2979656b 	ldmdbcs	r9!, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
 801724c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017250:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
 8017254:	20726176 	rsbscs	r6, r2, r6, ror r1
 8017258:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
 801725c:	203d2065 	eorscs	r2, sp, r5, rrx
 8017260:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017264:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8017268:	66225b79 			; <UNDEFINED> instruction: 0x66225b79
 801726c:	73656c69 	cmnvc	r5, #26880	; 0x6900
 8017270:	6b5b5d22 	blvs	96ee700 <__exidx_end+0x16d6598>
 8017274:	3b5d7965 	blcc	9775810 <__exidx_end+0x175d6a8>
 8017278:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 801727c:	74680909 	strbtvc	r0, [r8], #-2313	; 0xfffff6f7
 8017280:	3d2b6c6d 	stccc	12, cr6, [fp, #-436]!	; 0xfffffe4c
 8017284:	706f3c22 	rsbvc	r3, pc, r2, lsr #24
 8017288:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801728c:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
 8017290:	223d6575 	eorscs	r6, sp, #490733568	; 0x1d400000
 8017294:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 8017298:	223e222b 	eorscs	r2, lr, #-1342177278	; 0xb0000002
 801729c:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80172a0:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80172a4:	706f2f3c 	rsbvc	r2, pc, ip, lsr pc	; <UNPREDICTABLE>
 80172a8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 80172ac:	0a3b223e 	beq	8edfbac <__exidx_end+0xec7a44>
 80172b0:	7d090909 	vstrvc.16	s0, [r9, #-18]	; 0xffffffee	; <UNPREDICTABLE>
 80172b4:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 80172b8:	6f640909 	svcvs	0x00640909
 80172bc:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 80172c0:	672e746e 	strvs	r7, [lr, -lr, ror #8]!
 80172c4:	6c457465 	cfstrdvs	mvd7, [r5], {101}	; 0x65
 80172c8:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
 80172cc:	49794274 	ldmdbmi	r9!, {r2, r4, r5, r6, r9, lr}^
 80172d0:	69222864 	stmdbvs	r2!, {r2, r5, r6, fp, sp}
 80172d4:	72694464 	rsbvc	r4, r9, #100, 8	; 0x64000000
 80172d8:	6f746365 	svcvs	0x00746365
 80172dc:	29227972 	stmdbcs	r2!, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 80172e0:	6e6e692e 	vmulvs.f16	s13, s28, s29	; <UNPREDICTABLE>
 80172e4:	54487265 	strbpl	r7, [r8], #-613	; 0xfffffd9b
 80172e8:	683d4c4d 	ldmdavs	sp!, {r0, r2, r3, r6, sl, fp, lr}
 80172ec:	3b6c6d74 	blcc	9b328c4 <__exidx_end+0x1b1a75c>
 80172f0:	0909090a 	stmdbeq	r9, {r1, r3, r8, fp}
 80172f4:	5f746567 	svcpl	0x00746567
 80172f8:	28747874 	ldmdacs	r4!, {r2, r4, r5, r6, fp, ip, sp, lr}^
 80172fc:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
 8017300:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
 8017304:	5d305b73 	fldmdbxpl	r0!, {d5-d61}	;@ Deprecated
 8017308:	7d0a3b29 	vstrvc	d3, [sl, #-164]	; 0xffffff5c
 801730c:	73610a0a 	cmnvc	r1, #40960	; 0xa000
 8017310:	20636e79 	rsbcs	r6, r3, r9, ror lr
 8017314:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8017318:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 801731c:	6e657220 	cdpvs	2, 6, cr7, cr5, cr0, {1}
 8017320:	56726564 	ldrbtpl	r6, [r2], -r4, ror #10
 8017324:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 8017328:	29286e6f 	stmdbcs	r8!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
 801732c:	090a7b20 	stmdbeq	sl, {r5, r8, r9, fp, ip, sp, lr}
 8017330:	74656c09 	strbtvc	r6, [r5], #-3081	; 0xfffff3f7
 8017334:	72657620 	rsbvc	r7, r5, #32, 12	; 0x2000000
 8017338:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 801733c:	6177613d 	cmnvs	r7, sp, lsr r1
 8017340:	67207469 	strvs	r7, [r0, -r9, ror #8]!
 8017344:	534a7465 	movtpl	r7, #42085	; 0xa465
 8017348:	27284e4f 	strcs	r4, [r8, -pc, asr #28]!
 801734c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017350:	276e6f69 	strbcs	r6, [lr, -r9, ror #30]!
 8017354:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8017358:	636f6409 	cmnvs	pc, #150994944	; 0x9000000
 801735c:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 8017360:	65672e74 	strbvs	r2, [r7, #-3700]!	; 0xfffff18c
 8017364:	656c4574 	strbvs	r4, [ip, #-1396]!	; 0xfffffa8c
 8017368:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 801736c:	64497942 	strbvs	r7, [r9], #-2370	; 0xfffff6be
 8017370:	64692228 	strbtvs	r2, [r9], #-552	; 0xfffffdd8
 8017374:	73726556 	cmnvc	r2, #360710144	; 0x15800000
 8017378:	226e6f69 	rsbcs	r6, lr, #420	; 0x1a4
 801737c:	6e692e29 	cdpvs	14, 6, cr2, cr9, cr9, {1}
 8017380:	4872656e 	ldmdami	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
 8017384:	3d4c4d54 	stclcc	13, cr4, [ip, #-336]	; 0xfffffeb0
 8017388:	696c3c22 	stmdbvs	ip!, {r1, r5, sl, fp, ip, sp}^
 801738c:	2b22563e 	blcs	88acc8c <__exidx_end+0x894b24>
 8017390:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017394:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 8017398:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 801739c:	2b6e6f69 	blcs	9bb3148 <__exidx_end+0x1b9afe0>
 80173a0:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017320 <index_js+0x30c>
 80173a4:	6c3c3e69 	ldcvs	14, cr3, [ip], #-420	; 0xfffffe5c
 80173a8:	2b223e69 	blcs	88a6d54 <__exidx_end+0x88ebec>
 80173ac:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 80173b0:	2e6e6f69 	cdpcs	15, 6, cr6, cr14, cr9, {3}
 80173b4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
 80173b8:	61642e64 	cmnvs	r4, r4, ror #28
 80173bc:	222b6574 	eorcs	r6, fp, #116, 10	; 0x1d000000
 80173c0:	696c2f3c 	stmdbvs	ip!, {r2, r3, r4, r5, r8, r9, sl, fp, sp}^
 80173c4:	696c3c3e 	stmdbvs	ip!, {r1, r2, r3, r4, r5, sl, fp, ip, sp}^
 80173c8:	762b223e 			; <UNDEFINED> instruction: 0x762b223e
 80173cc:	69737265 	ldmdbvs	r3!, {r0, r2, r5, r6, r9, ip, sp, lr}^
 80173d0:	622e6e6f 	eorvs	r6, lr, #1776	; 0x6f0
 80173d4:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
 80173d8:	6d69742e 	cfstrdvs	mvd7, [r9, #-184]!	; 0xffffff48
 80173dc:	3c222b65 			; <UNDEFINED> instruction: 0x3c222b65
 80173e0:	3e696c2f 	cdpcc	12, 6, cr6, cr9, cr15, {1}
 80173e4:	3e696c3c 	mcrcc	12, 3, r6, cr9, cr12, {1}
 80173e8:	65762b22 	ldrbvs	r2, [r6, #-2850]!	; 0xfffff4de
 80173ec:	6f697372 	svcvs	0x00697372
 80173f0:	6f622e6e 	svcvs	0x00622e6e
 80173f4:	2b647261 	blcs	9933d80 <__exidx_end+0x191bc18>
 80173f8:	6c2f3c22 	stcvs	12, cr3, [pc], #-136	; 8017378 <index_js+0x364>
 80173fc:	3b223e69 	blcc	88a6da8 <__exidx_end+0x88ec40>
 8017400:	0a0a7d0a 	beq	82b6830 <__exidx_end+0x29e6c8>
 8017404:	6e797361 	cdpvs	3, 7, cr7, cr9, cr1, {3}
 8017408:	75662063 	strbvc	r2, [r6, #-99]!	; 0xffffff9d
 801740c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8017410:	67206e6f 	strvs	r6, [r0, -pc, ror #28]!
 8017414:	745f7465 	ldrbvc	r7, [pc], #-1125	; 801741c <index_js+0x408>
 8017418:	73287478 			; <UNDEFINED> instruction: 0x73287478
 801741c:	20296c65 	eorcs	r6, r9, r5, ror #24
 8017420:	6c090a7b 			; <UNDEFINED> instruction: 0x6c090a7b
 8017424:	74207465 	strtvc	r7, [r0], #-1125	; 0xfffffb9b
 8017428:	613d7478 	teqvs	sp, r8, ror r4
 801742c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 8017430:	74656720 	strbtvc	r6, [r5], #-1824	; 0xfffff8e0
 8017434:	4e4f534a 	cdpmi	3, 4, cr5, cr15, cr10, {2}
 8017438:	6c657328 	stclvs	3, cr7, [r5], #-160	; 0xffffff60
 801743c:	090a3b29 	stmdbeq	sl, {r0, r3, r5, r8, r9, fp, ip, sp}
 8017440:	2074656c 	rsbscs	r6, r4, ip, ror #10
 8017444:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 8017448:	3b22223d 	blcc	889fd44 <__exidx_end+0x887bdc>
 801744c:	624f090a 	subvs	r0, pc, #163840	; 0x28000
 8017450:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 8017454:	79656b2e 	stmdbvc	r5!, {r1, r2, r3, r5, r8, r9, fp, sp, lr}^
 8017458:	78742873 	ldmdavc	r4!, {r0, r1, r4, r5, r6, fp, sp}^
 801745c:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8017460:	2e295d6c 	cdpcs	13, 2, cr5, cr9, cr12, {3}
 8017464:	45726f66 	ldrbmi	r6, [r2, #-3942]!	; 0xfffff09a
 8017468:	28686361 	stmdacs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 801746c:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
 8017470:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
 8017474:	79656b28 	stmdbvc	r5!, {r3, r5, r8, r9, fp, sp, lr}^
 8017478:	0a7b2029 	beq	9edf524 <__exidx_end+0x1ec73bc>
 801747c:	61760909 	cmnvs	r6, r9, lsl #18
 8017480:	61762072 	cmnvs	r6, r2, ror r0
 8017484:	2065756c 	rsbcs	r7, r5, ip, ror #10
 8017488:	7874203d 	ldmdavc	r4!, {r0, r2, r3, r4, r5, sp}^
 801748c:	65735b74 	ldrbvs	r5, [r3, #-2932]!	; 0xfffff48c
 8017490:	6b5b5d6c 	blvs	96eea48 <__exidx_end+0x16d68e0>
 8017494:	3b5d7965 	blcc	9775a30 <__exidx_end+0x175d8c8>
 8017498:	2009090a 	andcs	r0, r9, sl, lsl #18
 801749c:	6c6d7468 	cfstrdvs	mvd7, [sp], #-416	; 0xfffffe60
 80174a0:	3c223d2b 	stccc	13, cr3, [r2], #-172	; 0xffffff54
 80174a4:	3c3e7274 	lfmcc	f7, 4, [lr], #-464	; 0xfffffe30
 80174a8:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80174ac:	79656b2b 	stmdbvc	r5!, {r0, r1, r3, r5, r8, r9, fp, sp, lr}^
 80174b0:	2f3c222b 	svccs	0x003c222b
 80174b4:	3c3e6474 	cfldrscc	mvf6, [lr], #-464	; 0xfffffe30
 80174b8:	223e6474 	eorscs	r6, lr, #116, 8	; 0x74000000
 80174bc:	6c61762b 	stclvs	6, cr7, [r1], #-172	; 0xffffff54
 80174c0:	222b6575 	eorcs	r6, fp, #490733568	; 0x1d400000
 80174c4:	64742f3c 	ldrbtvs	r2, [r4], #-3900	; 0xfffff0c4
 80174c8:	742f3c3e 	strtvc	r3, [pc], #-3134	; 80174d0 <index_js+0x4bc>
 80174cc:	3b223e72 	blcc	88a6e9c <__exidx_end+0x88ed34>
 80174d0:	297d090a 	ldmdbcs	sp!, {r1, r3, r8, fp}^
 80174d4:	64090a3b 	strvs	r0, [r9], #-2619	; 0xfffff5c5
 80174d8:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
 80174dc:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 80174e0:	45746567 	ldrbmi	r6, [r4, #-1383]!	; 0xfffffa99
 80174e4:	656d656c 	strbvs	r6, [sp, #-1388]!	; 0xfffffa94
 80174e8:	7942746e 	stmdbvc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 80174ec:	22286449 	eorcs	r6, r8, #1224736768	; 0x49000000
 80174f0:	78546469 	ldmdavc	r4, {r0, r3, r5, r6, sl, sp, lr}^
 80174f4:	2e292274 	mcrcs	2, 1, r2, cr9, cr4, {3}
 80174f8:	656e6e69 	strbvs	r6, [lr, #-3689]!	; 0xfffff197
 80174fc:	4d544872 	ldclmi	8, cr4, [r4, #-456]	; 0xfffffe38
 8017500:	74683d4c 	strbtvc	r3, [r8], #-3404	; 0xfffff2b4
 8017504:	0a3b6c6d 	beq	8ef26c0 <__exidx_end+0xeda558>
 8017508:	720a0a7d 	andvc	r0, sl, #512000	; 0x7d000
 801750c:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
 8017510:	73694c72 	cmnvc	r9, #29184	; 0x7200
 8017514:	3b292874 	blcc	8a616ec <__exidx_end+0xa49584>
 8017518:	6e65720a 	cdpvs	2, 6, cr7, cr5, cr10, {0}
 801751c:	44726564 	ldrbtmi	r6, [r2], #-1380	; 0xfffffa9c
 8017520:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
 8017524:	79726f74 	ldmdbvc	r2!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 8017528:	0a3b2928 	beq	8ee19d0 <__exidx_end+0xec9868>
 801752c:	646e6572 	strbtvs	r6, [lr], #-1394	; 0xfffffa8e
 8017530:	65567265 	ldrbvs	r7, [r6, #-613]	; 0xfffffd9b
 8017534:	6f697372 	svcvs	0x00697372
 8017538:	3b29286e 	blcc	8a616f8 <__exidx_end+0xa49590>
 801753c:	0000000a 	andeq	r0, r0, sl

08017540 <s_aStorSize>:
 8017540:	00000060 	andeq	r0, r0, r0, rrx
 8017544:	00000090 	muleq	r0, r0, r0
 8017548:	00000020 	andeq	r0, r0, r0, lsr #32
 801754c:	00000040 	andeq	r0, r0, r0, asr #32
 8017550:	00000060 	andeq	r0, r0, r0, rrx
 8017554:	00000040 	andeq	r0, r0, r0, asr #32
 8017558:	00000020 	andeq	r0, r0, r0, lsr #32
 801755c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017560:	000001e0 	andeq	r0, r0, r0, ror #3
 8017564:	00000040 	andeq	r0, r0, r0, asr #32
 8017568:	00000020 	andeq	r0, r0, r0, lsr #32
 801756c:	00000060 	andeq	r0, r0, r0, rrx
 8017570:	00000030 	andeq	r0, r0, r0, lsr r0
 8017574:	00000020 	andeq	r0, r0, r0, lsr #32
 8017578:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 801757c:	00000030 	andeq	r0, r0, r0, lsr r0
 8017580:	00000040 	andeq	r0, r0, r0, asr #32
 8017584:	00000020 	andeq	r0, r0, r0, lsr #32
 8017588:	00000060 	andeq	r0, r0, r0, rrx
 801758c:	00000020 	andeq	r0, r0, r0, lsr #32
 8017590:	00000400 	andeq	r0, r0, r0, lsl #8
 8017594:	00000020 	andeq	r0, r0, r0, lsr #32
 8017598:	00000020 	andeq	r0, r0, r0, lsr #32
 801759c:	00000040 	andeq	r0, r0, r0, asr #32
 80175a0:	00000060 	andeq	r0, r0, r0, rrx
 80175a4:	00000020 	andeq	r0, r0, r0, lsr #32
 80175a8:	00000020 	andeq	r0, r0, r0, lsr #32
 80175ac:	00000020 	andeq	r0, r0, r0, lsr #32

080175b0 <vtable for StoreArtNet>:
	...
 80175b8:	0800e899 	stmdaeq	r0, {r0, r3, r4, r7, fp, sp, lr, pc}
 80175bc:	0800ea61 	stmdaeq	r0, {r0, r5, r6, r9, fp, sp, lr, pc}
 80175c0:	0800e8a1 	stmdaeq	r0, {r0, r5, r7, fp, sp, lr, pc}
 80175c4:	0800ea75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r9, fp, sp, lr, pc}
 80175c8:	0800e8c5 	stmdaeq	r0, {r0, r2, r6, r7, fp, sp, lr, pc}
 80175cc:	0800e8f5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, fp, sp, lr, pc}
 80175d0:	0800e921 	stmdaeq	r0, {r0, r5, r8, fp, sp, lr, pc}
 80175d4:	0800e95d 	stmdaeq	r0, {r0, r2, r3, r4, r6, r8, fp, sp, lr, pc}
 80175d8:	0800e98d 	stmdaeq	r0, {r0, r2, r3, r7, r8, fp, sp, lr, pc}
 80175dc:	0800e9c1 	stmdaeq	r0, {r0, r6, r7, r8, fp, sp, lr, pc}
 80175e0:	0800ea11 	stmdaeq	r0, {r0, r4, r9, fp, sp, lr, pc}
 80175e4:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80175e8:	00000000 	andeq	r0, r0, r0
 80175ec:	0800e89b 	stmdaeq	r0, {r0, r1, r3, r4, r7, fp, sp, lr, pc}
 80175f0:	0800ea6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r9, fp, sp, lr, pc}
 80175f4:	0800e8ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, fp, sp, lr, pc}
 80175f8:	0800e919 	stmdaeq	r0, {r0, r3, r4, r8, fp, sp, lr, pc}
 80175fc:	0800e955 	stmdaeq	r0, {r0, r2, r4, r6, r8, fp, sp, lr, pc}
 8017600:	0800e985 	stmdaeq	r0, {r0, r2, r7, r8, fp, sp, lr, pc}
 8017604:	0800e9b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8, fp, sp, lr, pc}
 8017608:	0800ea09 	stmdaeq	r0, {r0, r3, r9, fp, sp, lr, pc}
 801760c:	0800ea59 	stmdaeq	r0, {r0, r3, r4, r6, r9, fp, sp, lr, pc}

08017610 <vtable for StoreDisplayUdf>:
	...
 8017618:	0800eab1 	stmdaeq	r0, {r0, r4, r5, r7, r9, fp, sp, lr, pc}
 801761c:	0800eaf9 	stmdaeq	r0, {r0, r3, r4, r5, r6, r7, r9, fp, sp, lr, pc}
 8017620:	0800ead5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, fp, sp, lr, pc}
 8017624:	0800eab5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, fp, sp, lr, pc}

08017628 <vtable for StoreNetwork>:
	...
 8017630:	0800eb19 	stmdaeq	r0, {r0, r3, r4, r8, r9, fp, sp, lr, pc}
 8017634:	0800ec2d 	stmdaeq	r0, {r0, r2, r3, r5, sl, fp, sp, lr, pc}
 8017638:	0800eb21 	stmdaeq	r0, {r0, r5, r8, r9, fp, sp, lr, pc}
 801763c:	0800ec41 	stmdaeq	r0, {r0, r6, sl, fp, sp, lr, pc}
 8017640:	0800ebd1 	stmdaeq	r0, {r0, r4, r6, r7, r8, r9, fp, sp, lr, pc}
 8017644:	0800eba5 	stmdaeq	r0, {r0, r2, r5, r7, r8, r9, fp, sp, lr, pc}
 8017648:	0800eb75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, r9, fp, sp, lr, pc}
 801764c:	0800ebfd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8, r9, fp, sp, lr, pc}
 8017650:	0800eb45 	stmdaeq	r0, {r0, r2, r6, r8, r9, fp, sp, lr, pc}
 8017654:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 8017658:	00000000 	andeq	r0, r0, r0
 801765c:	0800eb1b 	stmdaeq	r0, {r0, r1, r3, r4, r8, r9, fp, sp, lr, pc}
 8017660:	0800ec39 	stmdaeq	r0, {r0, r3, r4, r5, sl, fp, sp, lr, pc}
 8017664:	0800ebf5 	stmdaeq	r0, {r0, r2, r4, r5, r6, r7, r8, r9, fp, sp, lr, pc}
 8017668:	0800ebc9 	stmdaeq	r0, {r0, r3, r6, r7, r8, r9, fp, sp, lr, pc}
 801766c:	0800eb9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r8, r9, fp, sp, lr, pc}
 8017670:	0800ec25 	stmdaeq	r0, {r0, r2, r5, sl, fp, sp, lr, pc}
 8017674:	0800eb6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, r9, fp, sp, lr, pc}

08017678 <vtable for StoreRemoteConfig>:
	...
 8017680:	0800ec75 	stmdaeq	r0, {r0, r2, r4, r5, r6, sl, fp, sp, lr, pc}
 8017684:	0800ecbd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, sl, fp, sp, lr, pc}
 8017688:	0800ec99 	stmdaeq	r0, {r0, r3, r4, r7, sl, fp, sp, lr, pc}
 801768c:	0800ec79 	stmdaeq	r0, {r0, r3, r4, r5, r6, sl, fp, sp, lr, pc}

08017690 <vtable for StoreWS28xxDmx>:
	...
 8017698:	0800ecdd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, sl, fp, sp, lr, pc}
 801769c:	0800ee4d 	stmdaeq	r0, {r0, r2, r3, r6, r9, sl, fp, sp, lr, pc}
 80176a0:	0800ece5 	stmdaeq	r0, {r0, r2, r5, r6, r7, sl, fp, sp, lr, pc}
 80176a4:	0800ee61 	stmdaeq	r0, {r0, r5, r6, r9, sl, fp, sp, lr, pc}
 80176a8:	0800ee19 	stmdaeq	r0, {r0, r3, r4, r9, sl, fp, sp, lr, pc}
 80176ac:	0800ede5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8, sl, fp, sp, lr, pc}
 80176b0:	0800edad 	stmdaeq	r0, {r0, r2, r3, r5, r7, r8, sl, fp, sp, lr, pc}
 80176b4:	0800ed75 	stmdaeq	r0, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr, pc}
 80176b8:	0800ed3d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, sl, fp, sp, lr, pc}
 80176bc:	0800ed09 	stmdaeq	r0, {r0, r3, r8, sl, fp, sp, lr, pc}
 80176c0:	fffffffc 			; <UNDEFINED> instruction: 0xfffffffc
 80176c4:	00000000 	andeq	r0, r0, r0
 80176c8:	0800ecdf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r6, r7, sl, fp, sp, lr, pc}
 80176cc:	0800ee59 	stmdaeq	r0, {r0, r3, r4, r6, r9, sl, fp, sp, lr, pc}
 80176d0:	0800ee45 	stmdaeq	r0, {r0, r2, r6, r9, sl, fp, sp, lr, pc}
 80176d4:	0800ee11 	stmdaeq	r0, {r0, r4, r9, sl, fp, sp, lr, pc}
 80176d8:	0800eddd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r8, sl, fp, sp, lr, pc}
 80176dc:	0800eda5 	stmdaeq	r0, {r0, r2, r5, r7, r8, sl, fp, sp, lr, pc}
 80176e0:	0800ed6d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8, sl, fp, sp, lr, pc}
 80176e4:	0800ed35 	stmdaeq	r0, {r0, r2, r4, r5, r8, sl, fp, sp, lr, pc}
 80176e8:	32334447 	eorscc	r4, r3, #1191182336	; 0x47000000
 80176ec:	74654400 	strbtvc	r4, [r5], #-1024	; 0xfffffc00
 80176f0:	65746365 	ldrbvs	r6, [r4, #-869]!	; 0xfffffc9b
 80176f4:	73252064 			; <UNDEFINED> instruction: 0x73252064
 80176f8:	74697720 	strbtvc	r7, [r9], #-1824	; 0xfffff8e0
 80176fc:	65732068 	ldrbvs	r2, [r3, #-104]!	; 0xffffff98
 8017700:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
 8017704:	7a697320 	bvc	9a7438c <__exidx_end+0x1a5c224>
 8017708:	64252065 	strtvs	r2, [r5], #-101	; 0xffffff9b
 801770c:	746f7420 	strbtvc	r7, [pc], #-1056	; 8017714 <vtable for StoreWS28xxDmx+0x84>
 8017710:	25206c61 	strcs	r6, [r0, #-3169]!	; 0xfffff39f
 8017714:	79622064 	stmdbvc	r2!, {r2, r5, r6, sp}^
 8017718:	0a736574 	beq	9cf0cf0 <__exidx_end+0x1cd8b88>
 801771c:	70637400 	rsbvc	r7, r3, r0, lsl #8
 8017720:	6765625f 			; <UNDEFINED> instruction: 0x6765625f
 8017724:	203a6e69 	eorscs	r6, sl, r9, ror #28
 8017728:	206f6f74 	rsbcs	r6, pc, r4, ror pc	; <UNPREDICTABLE>
 801772c:	796e616d 	stmdbvc	lr!, {r0, r2, r3, r5, r6, r8, sp, lr}^
 8017730:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
 8017734:	7463656e 	strbtvc	r6, [r3], #-1390	; 0xfffffa92
 8017738:	736e6f69 	cmnvc	lr, #420	; 0x1a4
 801773c:	6e696200 	cdpvs	2, 6, cr6, cr9, cr0, {0}
 8017740:	6e750064 	cdpvs	0, 7, cr0, cr5, cr4, {3}
 8017744:	646e6962 	strbtvs	r6, [lr], #-2402	; 0xfffff69e
 8017748:	5241000a 	subpl	r0, r1, #10
 801774c:	6f6c2050 	svcvs	0x006c2050
 8017750:	70756b6f 	rsbsvc	r6, r5, pc, ror #22
 8017754:	69616620 	stmdbvs	r1!, {r5, r9, sl, sp, lr}^
 8017758:	2064656c 	rsbcs	r6, r4, ip, ror #10
 801775c:	64203e2d 	strtvs	r3, [r0], #-3629	; 0xfffff1d3
 8017760:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
 8017764:	6720746c 	strvs	r7, [r0, -ip, ror #8]!
 8017768:	77657461 	strbvc	r7, [r5, -r1, ror #8]!
 801776c:	000a7961 	andeq	r7, sl, r1, ror #18
 8017770:	20505241 	subscs	r5, r0, r1, asr #4
 8017774:	6b6f6f6c 	blvs	9bf352c <__exidx_end+0x1bdb3c4>
 8017778:	66207075 			; <UNDEFINED> instruction: 0x66207075
 801777c:	656c6961 	strbvs	r6, [ip, #-2401]!	; 0xfffff69f
 8017780:	 	vmlsmi.f32	s0, s0, s9

08017783 <NetworkConst::MSG_NETWORK_INIT>:
 8017783:	7774654e 	ldrbvc	r6, [r4, -lr, asr #10]!
 8017787:	206b726f 	rsbcs	r7, fp, pc, ror #4
 801778b:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 801778f:	34323200 	ldrtcc	r3, [r2], #-512	; 0xfffffe00
 8017793:	302e302e 	eorcc	r3, lr, lr, lsr #32
 8017797:	3135322e 	teqcc	r5, lr, lsr #4
 801779b:	63745f00 	cmnvs	r4, #0, 30
 801779f:	6f6c2e70 	svcvs	0x006c2e70
 80177a3:	006c6163 	rsbeq	r6, ip, r3, ror #2
 80177a7:	7265735f 	rsbvc	r7, r5, #2080374785	; 0x7c000001
 80177ab:	65636976 	strbvs	r6, [r3, #-2422]!	; 0xfffff68a
 80177af:	645f2e73 	ldrbvs	r2, [pc], #-3699	; 80177b7 <NetworkConst::MSG_NETWORK_INIT+0x34>
 80177b3:	732d736e 			; <UNDEFINED> instruction: 0x732d736e
 80177b7:	755f2e64 	ldrbvc	r2, [pc, #-3684]	; 801695b <RemoteConfig::s_TXT+0x123>
 80177bb:	6c2e7064 	stcvs	0, cr7, [lr], #-400	; 0xfffffe70
 80177bf:	6c61636f 	stclvs	3, cr6, [r1], #-444	; 0xfffffe44
 80177c3:	4e446d00 	cdpmi	13, 4, cr6, cr4, cr0, {0}
 80177c7:	20000a53 	andcs	r0, r0, r3, asr sl
 80177cb:	20746f4e 	rsbscs	r6, r4, lr, asr #30
 80177cf:	6e6e7572 	mcrvs	5, 3, r7, cr14, cr2, {3}
 80177d3:	0a676e69 	beq	99f317f <__exidx_end+0x19db017>
 80177d7:	614e2000 	mrsvs	r2, (UNDEF: 78)
 80177db:	3a20656d 	bcc	8830d97 <__exidx_end+0x818c2f>
 80177df:	0a732520 	beq	9ce0c67 <__exidx_end+0x1cc8aff>
 80177e3:	73252000 			; <UNDEFINED> instruction: 0x73252000
 80177e7:	20642520 	rsbcs	r2, r4, r0, lsr #10
 80177eb:	000a7325 	andeq	r7, sl, r5, lsr #6
 80177ef:	30687465 	rsbcc	r7, r8, r5, ror #8
 80177f3:	67696700 	strbvs	r6, [r9, -r0, lsl #14]!
 80177f7:	76656461 	strbtvc	r6, [r5], -r1, ror #8
 80177fb:	5f656369 	svcpl	0x00656369
 80177ff:	74654e00 	strbtvc	r4, [r5], #-3584	; 0xfffff200
 8017803:	6b726f77 	blvs	9cb35e7 <__exidx_end+0x1c9b47f>
 8017807:	4820000a 	stmdami	r0!, {r1, r3}
 801780b:	6e74736f 	cdpvs	3, 7, cr7, cr4, cr15, {3}
 801780f:	20656d61 	rsbcs	r6, r5, r1, ror #26
 8017813:	25203a20 	strcs	r3, [r0, #-2592]!	; 0xfffff5e0
 8017817:	20000a73 	andcs	r0, r0, r3, ror sl
 801781b:	614e6649 	cmpvs	lr, r9, asr #12
 801781f:	2020656d 	eorcs	r6, r0, sp, ror #10
 8017823:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017827:	203a6425 	eorscs	r6, sl, r5, lsr #8
 801782b:	000a7325 	andeq	r7, sl, r5, lsr #6
 801782f:	656e4920 	strbvs	r4, [lr, #-2336]!	; 0xfffff6e0
 8017833:	20202074 	eorcs	r2, r0, r4, ror r0
 8017837:	3a202020 	bcc	881f8bf <__exidx_end+0x807757>
 801783b:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 801783f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017843:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017847:	0a64252f 	beq	9920d0b <__exidx_end+0x1908ba3>
 801784b:	654e2000 	strbvs	r2, [lr, #-0]
 801784f:	73616d74 	cmnvc	r1, #116, 26	; 0x1d00
 8017853:	2020206b 	eorcs	r2, r0, fp, rrx
 8017857:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801785b:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 801785f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017863:	20000a64 	andcs	r0, r0, r4, ror #20
 8017867:	65746147 	ldrbvs	r6, [r4, #-327]!	; 0xfffffeb9
 801786b:	20796177 	rsbscs	r6, r9, r7, ror r1
 801786f:	203a2020 	eorscs	r2, sl, r0, lsr #32
 8017873:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017877:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801787b:	0a64252e 	beq	9920d3b <__exidx_end+0x1908bd3>
 801787f:	72422000 	subvc	r2, r2, #0
 8017883:	6364616f 	cmnvs	r4, #-1073741797	; 0xc000001b
 8017887:	20747361 	rsbscs	r7, r4, r1, ror #6
 801788b:	6425203a 	strtvs	r2, [r5], #-58	; 0xffffffc6
 801788f:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017893:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017897:	20000a64 	andcs	r0, r0, r4, ror #20
 801789b:	2063614d 	rsbcs	r6, r3, sp, asr #2
 801789f:	20202020 	eorcs	r2, r0, r0, lsr #32
 80178a3:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80178a7:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 80178ab:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 80178af:	2e253a78 			; <UNDEFINED> instruction: 0x2e253a78
 80178b3:	253a7832 	ldrcs	r7, [sl, #-2098]!	; 0xfffff7ce
 80178b7:	3a78322e 	bcc	9e24177 <__exidx_end+0x1e0c00f>
 80178bb:	78322e25 	ldmdavc	r2!, {r0, r2, r5, r9, sl, fp, sp}
 80178bf:	322e253a 	eorcc	r2, lr, #243269632	; 0xe800000
 80178c3:	20000a78 	andcs	r0, r0, r8, ror sl
 80178c7:	65646f4d 	strbvs	r6, [r4, #-3917]!	; 0xfffff0b3
 80178cb:	20202020 	eorcs	r2, r0, r0, lsr #32
 80178cf:	203a2020 	eorscs	r2, sl, r0, lsr #32
 80178d3:	000a6325 	andeq	r6, sl, r5, lsr #6
 80178d7:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
 80178db:	49206369 	stmdbmi	r0!, {r0, r3, r5, r6, r8, r9, sp, lr}
 80178df:	544e0050 	strbpl	r0, [lr], #-80	; 0xffffffb0
 80178e3:	65532050 	ldrbvs	r2, [r3, #-80]	; 0xffffffb0
 80178e7:	72657672 	rsbvc	r7, r5, #119537664	; 0x7200000
	...

080178ec <NetworkParamsConst::IP_ADDRESS>:
 80178ec:	615f7069 	cmpvs	pc, r9, rrx
 80178f0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 80178f4:	 	mcrvs	3, 0, r7, cr0, cr3, {3}

080178f7 <NetworkParamsConst::NTP_SERVER>:
 80178f7:	5f70746e 	svcpl	0x0070746e
 80178fb:	76726573 			; <UNDEFINED> instruction: 0x76726573
 80178ff:	 	cdpvs	2, 0, cr7, cr0, cr5, {3}

08017902 <NetworkParamsConst::NTP_UTC_OFFSET>:
 8017902:	5f70746e 	svcpl	0x0070746e
 8017906:	5f637475 	svcpl	0x00637475
 801790a:	7366666f 	cmnvc	r6, #116391936	; 0x6f00000
 801790e:	 	strvs	r7, [r0], #-1125	; 0xfffffb9b

08017911 <NetworkParamsConst::DEFAULT_GATEWAY>:
 8017911:	61666564 	cmnvs	r6, r4, ror #10
 8017915:	5f746c75 	svcpl	0x00746c75
 8017919:	65746167 	ldrbvs	r6, [r4, #-359]!	; 0xfffffe99
 801791d:	00796177 	rsbseq	r6, r9, r7, ror r1

08017921 <NetworkParamsConst::DHCP_RETRY_TIME>:
 8017921:	70636864 	rsbvc	r6, r3, r4, ror #16
 8017925:	7465725f 	strbtvc	r7, [r5], #-607	; 0xfffffda1
 8017929:	745f7972 	ldrbvc	r7, [pc], #-2418	; 8017931 <NetworkParamsConst::HOSTNAME>
 801792d:	00656d69 	rsbeq	r6, r5, r9, ror #26

08017931 <NetworkParamsConst::HOSTNAME>:
 8017931:	74736f68 	ldrbtvc	r6, [r3], #-3944	; 0xfffff098
 8017935:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
	...

0801793a <NetworkParamsConst::NET_MASK>:
 801793a:	5f74656e 	svcpl	0x0074656e
 801793e:	6b73616d 	blvs	9cefefa <__exidx_end+0x1cd7d92>
	...

08017943 <NetworkParamsConst::USE_DHCP>:
 8017943:	5f657375 	svcpl	0x00657375
 8017947:	70636864 	rsbvc	r6, r3, r4, ror #16
	...

0801794c <NetworkParamsConst::FILE_NAME>:
 801794c:	7774656e 	ldrbvc	r6, [r4, -lr, ror #10]!
 8017950:	2e6b726f 	cdpcs	2, 6, cr7, cr11, cr15, {3}
 8017954:	00747874 	rsbseq	r7, r4, r4, ror r8
 8017958:	65687445 	strbvs	r7, [r8, #-1093]!	; 0xfffffbbb
 801795c:	74656e72 	strbtvc	r6, [r5], #-3698	; 0xfffff18e
 8017960:	61747320 	cmnvs	r4, r0, lsr #6
 8017964:	25007472 	strcs	r7, [r0, #-1138]	; 0xfffffb8e
 8017968:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 801796c:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017970:	252f6425 	strcs	r6, [pc, #-1061]!	; 8017553 <s_aStorSize+0x13>
 8017974:	63252064 			; <UNDEFINED> instruction: 0x63252064
 8017978:	203a4e00 	eorscs	r4, sl, r0, lsl #28
 801797c:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017980:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017984:	0064252e 	rsbeq	r2, r4, lr, lsr #10
 8017988:	25203a47 	strcs	r3, [r0, #-2631]!	; 0xfffff5b9
 801798c:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017990:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017994:	46006425 	strmi	r6, [r0], -r5, lsr #8
 8017998:	776d7269 	strbvc	r7, [sp, -r9, ror #4]!
 801799c:	20657261 	rsbcs	r7, r5, r1, ror #4
 80179a0:	2a2e2556 	bcs	8ba0f00 <__exidx_end+0xb88d98>
 80179a4:	48440073 	stmdami	r4, {r0, r1, r4, r5, r6}^
 80179a8:	72205043 	eorvc	r5, r0, #67	; 0x43
 80179ac:	77656e65 	strbvc	r6, [r5, -r5, ror #28]!
 80179b0:	00676e69 	rsbeq	r6, r7, r9, ror #28
 80179b4:	50434844 	subpl	r4, r3, r4, asr #16
 80179b8:	74657220 	strbtvc	r7, [r5], #-544	; 0xfffffde0
 80179bc:	6e697972 			; <UNDEFINED> instruction: 0x6e697972
 80179c0:	654e0067 	strbvs	r0, [lr, #-103]	; 0xffffff99
 80179c4:	726f7774 	rsbvc	r7, pc, #116, 14	; 0x1d00000
 80179c8:	6873206b 	ldmdavs	r3!, {r0, r1, r3, r5, r6, sp}^
 80179cc:	6f647475 	svcvs	0x00647475
 80179d0:	00006e77 	andeq	r6, r0, r7, ror lr

080179d4 <pArray>:
 80179d4:	08017a68 	stmdaeq	r1, {r3, r5, r6, r9, fp, ip, sp, lr}
 80179d8:	08017a24 	stmdaeq	r1, {r2, r5, r9, fp, ip, sp, lr}
 80179dc:	080178ec 	stmdaeq	r1, {r2, r3, r5, r6, r7, fp, ip, sp, lr}
 80179e0:	08017a6e 	stmdaeq	r1, {r1, r2, r3, r5, r6, r9, fp, ip, sp, lr}
 80179e4:	08017cd9 	stmdaeq	r1, {r0, r3, r4, r6, r7, sl, fp, ip, sp, lr}
 80179e8:	08017a2f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r9, fp, ip, sp, lr}
 80179ec:	08016167 	stmdaeq	r1, {r0, r1, r2, r5, r6, r8, sp, lr}
 80179f0:	08017931 	stmdaeq	r1, {r0, r4, r5, r8, fp, ip, sp, lr}
 80179f4:	08017baf 	stmdaeq	r1, {r0, r1, r2, r3, r5, r7, r8, r9, fp, ip, sp, lr}
 80179f8:	08017bbf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r5, r7, r8, r9, fp, ip, sp, lr}
 80179fc:	08017bcf 	stmdaeq	r1, {r0, r1, r2, r3, r6, r7, r8, r9, fp, ip, sp, lr}
 8017a00:	08017bdf 	stmdaeq	r1, {r0, r1, r2, r3, r4, r6, r7, r8, r9, fp, ip, sp, lr}
 8017a04:	0801793a 	stmdaeq	r1, {r1, r3, r4, r5, r8, fp, ip, sp, lr}
 8017a08:	08017cc7 	stmdaeq	r1, {r0, r1, r2, r6, r7, sl, fp, ip, sp, lr}
 8017a0c:	08016172 	stmdaeq	r1, {r1, r4, r5, r6, r8, sp, lr}
 8017a10:	0801618a 	stmdaeq	r1, {r1, r3, r7, r8, sp, lr}
 8017a14:	080161a2 	stmdaeq	r1, {r1, r5, r7, r8, sp, lr}
 8017a18:	080161ba 	stmdaeq	r1, {r1, r3, r4, r5, r7, r8, sp, lr}
 8017a1c:	08017911 	stmdaeq	r1, {r0, r4, r8, fp, ip, sp, lr}
 8017a20:	08017a3c 	stmdaeq	r1, {r2, r3, r4, r5, r9, fp, ip, sp, lr}

08017a24 <DisplayUdfParamsConst::BOARD_NAME>:
 8017a24:	72616f62 	rsbvc	r6, r1, #392	; 0x188
 8017a28:	616e5f64 	cmnvs	lr, r4, ror #30
 8017a2c:	 	tstvs	r0, sp, ror #10

08017a2f <DisplayUdfParamsConst::ACTIVE_PORTS>:
 8017a2f:	69746361 	ldmdbvs	r4!, {r0, r5, r6, r8, r9, sp, lr}^
 8017a33:	705f6576 	subsvc	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 8017a37:	7374726f 	cmnvc	r4, #-268435450	; 0xf0000006
	...

08017a3c <DisplayUdfParamsConst::DMX_DIRECTION>:
 8017a3c:	5f786d64 	svcpl	0x00786d64
 8017a40:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017a44:	6f697463 	svcvs	0x00697463
 8017a48:	 	ldclvs	0, cr0, [r3], #-440	; 0xfffffe48

08017a4a <DisplayUdfParamsConst::SLEEP_TIMEOUT>:
 8017a4a:	65656c73 	strbvs	r6, [r5, #-3187]!	; 0xfffff38d
 8017a4e:	69745f70 	ldmdbvs	r4!, {r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 8017a52:	756f656d 	strbvc	r6, [pc, #-1389]!	; 80174ed <index_js+0x4d9>
 8017a56:	 	stclvs	0, cr0, [r6], #-464	; 0xfffffe30

08017a58 <DisplayUdfParamsConst::FLIP_VERTICALLY>:
 8017a58:	70696c66 	rsbvc	r6, r9, r6, ror #24
 8017a5c:	7265765f 	rsbvc	r7, r5, #99614720	; 0x5f00000
 8017a60:	61636974 	smcvs	13972	; 0x3694
 8017a64:	00796c6c 	rsbseq	r6, r9, ip, ror #24

08017a68 <DisplayUdfParamsConst::TITLE>:
 8017a68:	6c746974 			; <UNDEFINED> instruction: 0x6c746974
 8017a6c:	 	ldrbvs	r0, [r6, #-101]!	; 0xffffff9b

08017a6e <DisplayUdfParamsConst::VERSION>:
 8017a6e:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
 8017a72:	006e6f69 	rsbeq	r6, lr, r9, ror #30

08017a76 <DisplayUdfParamsConst::FILE_NAME>:
 8017a76:	70736964 	rsbsvc	r6, r3, r4, ror #18
 8017a7a:	2e79616c 	rpwcsez	f6, f1, #4.0
 8017a7e:	00747874 	rsbseq	r7, r4, r4, ror r8

08017a82 <DisplayUdfParamsConst::INTENSITY>:
 8017a82:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xfffff197
 8017a86:	7469736e 	strbtvc	r7, [r9], #-878	; 0xfffffc92
 8017a8a:	20200079 	eorcs	r0, r0, r9, ror r0
 8017a8e:	4f002020 	svcmi	0x00002020
 8017a92:	2e25203a 	mcrcs	0, 1, r2, cr5, cr10, {1}
 8017a96:	253a6432 	ldrcs	r6, [sl, #-1074]!	; 0xfffffbce
 8017a9a:	64253a64 	strtvs	r3, [r5], #-2660	; 0xfffff59c
 8017a9e:	20632520 	rsbcs	r2, r3, r0, lsr #10
 8017aa2:	4f007325 	svcmi	0x00007325
 8017aa6:	203a6425 	eorscs	r6, sl, r5, lsr #8
 8017aaa:	64322e25 	ldrtvs	r2, [r2], #-3621	; 0xfffff1db
 8017aae:	3a64253a 	bcc	9920f9e <__exidx_end+0x1908e36>
 8017ab2:	25206425 	strcs	r6, [r0, #-1061]!	; 0xfffffbdb
 8017ab6:	73252063 			; <UNDEFINED> instruction: 0x73252063
 8017aba:	3a632500 	bcc	98e0ec2 <__exidx_end+0x18c8d5a>
 8017abe:	2e642520 	cdpcs	5, 6, cr2, cr4, cr0, {1}
 8017ac2:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017ac6:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017aca:	3a504100 	bcc	9427ed2 <__exidx_end+0x140fd6a>
 8017ace:	00642520 	rsbeq	r2, r4, r0, lsr #10
 8017ad2:	44206f4e 	strtmi	r6, [r0], #-3918	; 0xfffff0b2
 8017ad6:	4400584d 	strmi	r5, [r0], #-2125	; 0xfffff7b3
 8017ada:	2520584d 	strcs	r5, [r0, #-2125]!	; 0xfffff7b3
 8017ade:	64252073 	strtvs	r2, [r5], #-115	; 0xffffff8d
	...

08017ae3 <DevicesParamsConst::SPI_SPEED_HZ>:
 8017ae3:	636f6c63 	cmnvs	pc, #25344	; 0x6300
 8017ae7:	70735f6b 	rsbsvc	r5, r3, fp, ror #30
 8017aeb:	5f646565 	svcpl	0x00646565
 8017aef:	 			; <UNDEFINED> instruction: 0x6c007a68

08017af2 <DevicesParamsConst::GROUPING_COUNT>:
 8017af2:	5f64656c 	svcpl	0x0064656c
 8017af6:	756f7267 	strbvc	r7, [pc, #-615]!	; 8017897 <NetworkConst::MSG_NETWORK_INIT+0x114>
 8017afa:	6f635f70 	svcvs	0x00635f70
 8017afe:	00746e75 	rsbseq	r6, r4, r5, ror lr

08017b02 <DevicesParamsConst::GLOBAL_BRIGHTNESS>:
 8017b02:	626f6c67 	rsbvs	r6, pc, #26368	; 0x6700
 8017b06:	625f6c61 	subsvs	r6, pc, #24832	; 0x6100
 8017b0a:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 8017b0e:	73656e74 	cmnvc	r5, #116, 28	; 0x740
 8017b12:	 	strbvs	r0, [ip, #-115]!	; 0xffffff8d

08017b14 <DevicesParamsConst::MAP>:
 8017b14:	5f64656c 	svcpl	0x0064656c
 8017b18:	5f626772 	svcpl	0x00626772
 8017b1c:	7070616d 	rsbsvc	r6, r0, sp, ror #2
 8017b20:	00676e69 	rsbeq	r6, r7, r9, ror #28

08017b24 <DevicesParamsConst::TYPE>:
 8017b24:	5f64656c 	svcpl	0x0064656c
 8017b28:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
	...

08017b2d <DevicesParamsConst::COUNT>:
 8017b2d:	5f64656c 	svcpl	0x0064656c
 8017b31:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
 8017b35:	 	strbvs	r0, [ip, #-116]!	; 0xffffff8c

08017b37 <DevicesParamsConst::LED_T0H>:
 8017b37:	5f64656c 	svcpl	0x0064656c
 8017b3b:	00683074 	rsbeq	r3, r8, r4, ror r0

08017b3f <DevicesParamsConst::LED_T1H>:
 8017b3f:	5f64656c 	svcpl	0x0064656c
 8017b43:	00683174 	rsbeq	r3, r8, r4, ror r1

08017b47 <DevicesParamsConst::FILE_NAME>:
 8017b47:	69766564 	ldmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 8017b4b:	2e736563 	cdpcs	5, 7, cr6, cr3, cr3, {3}
 8017b4f:	00747874 	rsbseq	r7, r4, r4, ror r8
 8017b53:	22732522 	rsbscs	r2, r3, #142606336	; 0x8800000
 8017b57:	6425223a 	strtvs	r2, [r5], #-570	; 0xfffffdc6
 8017b5b:	2e64252e 	cdpcs	5, 6, cr2, cr4, cr14, {1}
 8017b5f:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017b63:	002c2264 	eoreq	r2, ip, r4, ror #4
 8017b67:	3d732523 	cfldr64cc	mvdx2, [r3, #-140]!	; 0xffffff74
 8017b6b:	252e6425 	strcs	r6, [lr, #-1061]!	; 0xfffffbdb
 8017b6f:	64252e64 	strtvs	r2, [r5], #-3684	; 0xfffff19c
 8017b73:	0a64252e 	beq	9921033 <__exidx_end+0x1908ecb>
 8017b77:	25202300 	strcs	r2, [r0, #-768]!	; 0xfffffd00
 8017b7b:	0a232073 	beq	88dfd4f <__exidx_end+0x8c7be7>
 8017b7f:	73252200 			; <UNDEFINED> instruction: 0x73252200
 8017b83:	25223a22 	strcs	r3, [r2, #-2594]!	; 0xfffff5de
 8017b87:	22782a2e 	rsbscs	r2, r8, #188416	; 0x2e000
 8017b8b:	2523002c 	strcs	r0, [r3, #-44]!	; 0xffffffd4
 8017b8f:	2e253d73 	mcrcs	13, 1, r3, cr5, cr3, {3}
 8017b93:	000a782a 	andeq	r7, sl, sl, lsr #16

08017b97 <LightSetParamsConst::MERGE_MODE>:
 8017b97:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017b9b:	6f6d5f65 	svcvs	0x006d5f65
 8017b9f:	 	strvc	r6, [r0], #-1380	; 0xfffffa9c

08017ba2 <LightSetParamsConst::TEST_PATTERN>:
 8017ba2:	74736574 	ldrbtvc	r6, [r3], #-1396	; 0xfffffa8c
 8017ba6:	7461705f 	strbtvc	r7, [r1], #-95	; 0xffffffa1
 8017baa:	6e726574 	mrcvs	5, 3, r6, cr2, cr4, {3}
	...

08017baf <LightSetParamsConst::UNIVERSE_PORT>:
 8017baf:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017bb3:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017bb7:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017bbb:	00615f74 	rsbeq	r5, r1, r4, ror pc
 8017bbf:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017bc3:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017bc7:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017bcb:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8017bcf:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017bd3:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017bd7:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017bdb:	00635f74 	rsbeq	r5, r3, r4, ror pc
 8017bdf:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017be3:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
 8017be7:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017beb:	00645f74 	rsbeq	r5, r4, r4, ror pc

08017bef <LightSetParamsConst::START_UNI_PORT>:
 8017bef:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8017bf3:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8017bf7:	6f705f69 	svcvs	0x00705f69
 8017bfb:	315f7472 	cmpcc	pc, r2, ror r4	; <UNPREDICTABLE>
 8017bff:	74730000 	ldrbtvc	r0, [r3], #-0
 8017c03:	5f747261 	svcpl	0x00747261
 8017c07:	5f696e75 	svcpl	0x00696e75
 8017c0b:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017c0f:	0000325f 	andeq	r3, r0, pc, asr r2
 8017c13:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8017c17:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8017c1b:	6f705f69 	svcvs	0x00705f69
 8017c1f:	335f7472 	cmpcc	pc, #1912602624	; 0x72000000
 8017c23:	74730000 	ldrbtvc	r0, [r3], #-0
 8017c27:	5f747261 	svcpl	0x00747261
 8017c2b:	5f696e75 	svcpl	0x00696e75
 8017c2f:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017c33:	0000345f 	andeq	r3, r0, pc, asr r4
 8017c37:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8017c3b:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8017c3f:	6f705f69 	svcvs	0x00705f69
 8017c43:	355f7472 	ldrbcc	r7, [pc, #-1138]	; 80177d9 <NetworkConst::MSG_NETWORK_INIT+0x56>
 8017c47:	74730000 	ldrbtvc	r0, [r3], #-0
 8017c4b:	5f747261 	svcpl	0x00747261
 8017c4f:	5f696e75 	svcpl	0x00696e75
 8017c53:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017c57:	0000365f 	andeq	r3, r0, pc, asr r6
 8017c5b:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8017c5f:	6e755f74 	mrcvs	15, 3, r5, cr5, cr4, {3}
 8017c63:	6f705f69 	svcvs	0x00705f69
 8017c67:	375f7472 			; <UNDEFINED> instruction: 0x375f7472
 8017c6b:	74730000 	ldrbtvc	r0, [r3], #-0
 8017c6f:	5f747261 	svcpl	0x00747261
 8017c73:	5f696e75 	svcpl	0x00696e75
 8017c77:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017c7b:	0000385f 	andeq	r3, r0, pc, asr r8

08017c7f <LightSetParamsConst::MERGE_MODE_PORT>:
 8017c7f:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017c83:	6f6d5f65 	svcvs	0x006d5f65
 8017c87:	705f6564 	subsvc	r6, pc, r4, ror #10
 8017c8b:	5f74726f 	svcpl	0x0074726f
 8017c8f:	656d0061 	strbvs	r0, [sp, #-97]!	; 0xffffff9f
 8017c93:	5f656772 	svcpl	0x00656772
 8017c97:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8017c9b:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017c9f:	00625f74 	rsbeq	r5, r2, r4, ror pc
 8017ca3:	6772656d 	ldrbvs	r6, [r2, -sp, ror #10]!
 8017ca7:	6f6d5f65 	svcvs	0x006d5f65
 8017cab:	705f6564 	subsvc	r6, pc, r4, ror #10
 8017caf:	5f74726f 	svcpl	0x0074726f
 8017cb3:	656d0063 	strbvs	r0, [sp, #-99]!	; 0xffffff9d
 8017cb7:	5f656772 	svcpl	0x00656772
 8017cbb:	65646f6d 	strbvs	r6, [r4, #-3949]!	; 0xfffff093
 8017cbf:	726f705f 	rsbvc	r7, pc, #95	; 0x5f
 8017cc3:	00645f74 	rsbeq	r5, r4, r4, ror pc

08017cc7 <LightSetParamsConst::DMX_START_ADDRESS>:
 8017cc7:	5f786d64 	svcpl	0x00786d64
 8017ccb:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 8017ccf:	64615f74 	strbtvs	r5, [r1], #-3956	; 0xfffff08c
 8017cd3:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 8017cd7:	 	mrcvs	0, 3, r0, cr5, cr3, {3}

08017cd9 <LightSetParamsConst::UNIVERSE>:
 8017cd9:	76696e75 			; <UNDEFINED> instruction: 0x76696e75
 8017cdd:	65737265 	ldrbvs	r7, [r3, #-613]!	; 0xfffffd9b
	...

08017ce2 <LightSetParamsConst::DIRECTION>:
 8017ce2:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017ce6:	6f697463 	svcvs	0x00697463
 8017cea:	6f705f6e 	svcvs	0x00705f6e
 8017cee:	615f7472 	cmpvs	pc, r2, ror r4	; <UNPREDICTABLE>
 8017cf2:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8017cf6:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8017cfa:	5f6e6f69 	svcpl	0x006e6f69
 8017cfe:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017d02:	0000625f 	andeq	r6, r0, pc, asr r2
 8017d06:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
 8017d0a:	6f697463 	svcvs	0x00697463
 8017d0e:	6f705f6e 	svcvs	0x00705f6e
 8017d12:	635f7472 	cmpvs	pc, #1912602624	; 0x72000000
 8017d16:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
 8017d1a:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
 8017d1e:	5f6e6f69 	svcpl	0x006e6f69
 8017d22:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
 8017d26:	0000645f 	andeq	r6, r0, pc, asr r4
 8017d2a:	64206f4e 	strtvs	r6, [r0], #-3918	; 0xfffff0b2
 8017d2e:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 8017d32:	66207961 	strtvs	r7, [r0], -r1, ror #18
 8017d36:	646e756f 	strbtvs	r7, [lr], #-1391	; 0xfffffa91
 8017d3a:	31485300 	mrscc	r5, (UNDEF: 120)
 8017d3e:	00363031 	eorseq	r3, r6, r1, lsr r0
 8017d42:	31445353 	cmpcc	r4, r3, asr r3
 8017d46:	00363033 	eorseq	r3, r6, r3, lsr r0
 8017d4a:	28207325 	stmdacs	r0!, {r0, r2, r5, r8, r9, ip, sp, lr}
 8017d4e:	252c6425 	strcs	r6, [ip, #-1061]!	; 0xfffffbdb
 8017d52:	000a2964 	andeq	r2, sl, r4, ror #18
 8017d56:	aaeeaa40 	bge	7bc265e <__stack_size+0x7bc0e5e>
 8017d5a:	 	subeq	r0, r0, lr, ror #1

08017d5c <_OledFont8x6>:
 8017d5c:	00000040 	andeq	r0, r0, r0, asr #32
 8017d60:	40000000 	andmi	r0, r0, r0
 8017d64:	005f0000 	subseq	r0, pc, r0
 8017d68:	00400000 	subeq	r0, r0, r0
 8017d6c:	00070007 	andeq	r0, r7, r7
 8017d70:	7f144000 	svcvc	0x00144000
 8017d74:	00147f14 	andseq	r7, r4, r4, lsl pc
 8017d78:	7f2a2440 	svcvc	0x002a2440
 8017d7c:	4000122a 	andmi	r1, r0, sl, lsr #4
 8017d80:	64081323 	strvs	r1, [r8], #-803	; 0xfffffcdd
 8017d84:	36400062 	strbcc	r0, [r0], -r2, rrx
 8017d88:	50205649 	eorpl	r5, r0, r9, asr #12
 8017d8c:	08004000 	stmdaeq	r0, {lr}
 8017d90:	00000307 	andeq	r0, r0, r7, lsl #6
 8017d94:	221c0040 	andscs	r0, ip, #64	; 0x40
 8017d98:	40000041 	andmi	r0, r0, r1, asr #32
 8017d9c:	1c224100 	stfnes	f4, [r2], #-0
 8017da0:	2a400000 	bcs	9017da8 <__exidx_end+0xfffc40>
 8017da4:	2a1c7f1c 	bcs	8737a1c <__exidx_end+0x71f8b4>
 8017da8:	08084000 	stmdaeq	r8, {lr}
 8017dac:	0008083e 	andeq	r0, r8, lr, lsr r8
 8017db0:	70800040 	addvc	r0, r0, r0, asr #32
 8017db4:	40000030 	andmi	r0, r0, r0, lsr r0
 8017db8:	08080808 	stmdaeq	r8, {r3, fp}
 8017dbc:	00400008 	subeq	r0, r0, r8
 8017dc0:	00606000 	rsbeq	r6, r0, r0
 8017dc4:	10204000 	eorne	r4, r0, r0
 8017dc8:	00020408 	andeq	r0, r2, r8, lsl #8
 8017dcc:	49513e40 	ldmdbmi	r1, {r6, r9, sl, fp, ip, sp}^
 8017dd0:	40003e45 	andmi	r3, r0, r5, asr #28
 8017dd4:	407f4200 	rsbsmi	r4, pc, r0, lsl #4
 8017dd8:	72400000 	subvc	r0, r0, #0
 8017ddc:	46494949 	strbmi	r4, [r9], -r9, asr #18
 8017de0:	41214000 			; <UNDEFINED> instruction: 0x41214000
 8017de4:	00334d49 	eorseq	r4, r3, r9, asr #26
 8017de8:	12141840 	andsne	r1, r4, #64, 16	; 0x400000
 8017dec:	4000107f 	andmi	r1, r0, pc, ror r0
 8017df0:	45454527 	strbmi	r4, [r5, #-1319]	; 0xfffffad9
 8017df4:	3c400039 	mcrrcc	0, 3, r0, r0, cr9
 8017df8:	3149494a 	cmpcc	r9, sl, asr #18
 8017dfc:	21414000 	mrscs	r4, (UNDEF: 65)
 8017e00:	00070911 	andeq	r0, r7, r1, lsl r9
 8017e04:	49493640 	stmdbmi	r9, {r6, r9, sl, ip, sp}^
 8017e08:	40003649 	andmi	r3, r0, r9, asr #12
 8017e0c:	29494946 	stmdbcs	r9, {r1, r2, r6, r8, fp, lr}^
 8017e10:	0040001e 	subeq	r0, r0, lr, lsl r0
 8017e14:	00001400 	andeq	r1, r0, r0, lsl #8
 8017e18:	40004000 	andmi	r4, r0, r0
 8017e1c:	00000034 	andeq	r0, r0, r4, lsr r0
 8017e20:	14080040 	strne	r0, [r8], #-64	; 0xffffffc0
 8017e24:	40004122 	andmi	r4, r0, r2, lsr #2
 8017e28:	14141414 	ldrne	r1, [r4], #-1044	; 0xfffffbec
 8017e2c:	00400014 	subeq	r0, r0, r4, lsl r0
 8017e30:	08142241 	ldmdaeq	r4, {r0, r6, r9, sp}
 8017e34:	01024000 	mrseq	r4, (UNDEF: 2)
 8017e38:	00060959 	andeq	r0, r6, r9, asr r9
 8017e3c:	5d413e40 	stclpl	14, cr3, [r1, #-256]	; 0xffffff00
 8017e40:	40004e59 	andmi	r4, r0, r9, asr lr
 8017e44:	1211127c 	andsne	r1, r1, #124, 4	; 0xc0000007
 8017e48:	7f40007c 	svcvc	0x0040007c
 8017e4c:	36494949 	strbcc	r4, [r9], -r9, asr #18
 8017e50:	413e4000 	teqmi	lr, r0
 8017e54:	00224141 	eoreq	r4, r2, r1, asr #2
 8017e58:	41417f40 	cmpmi	r1, r0, asr #30
 8017e5c:	40003e41 	andmi	r3, r0, r1, asr #28
 8017e60:	4949497f 	stmdbmi	r9, {r0, r1, r2, r3, r4, r5, r6, r8, fp, lr}^
 8017e64:	7f400041 	svcvc	0x00400041
 8017e68:	01090909 	tsteq	r9, r9, lsl #18
 8017e6c:	413e4000 	teqmi	lr, r0
 8017e70:	00735141 	rsbseq	r5, r3, r1, asr #2
 8017e74:	08087f40 	stmdaeq	r8, {r6, r8, r9, sl, fp, ip, sp, lr}
 8017e78:	40007f08 	andmi	r7, r0, r8, lsl #30
 8017e7c:	417f4100 	cmnmi	pc, r0, lsl #2
 8017e80:	20400000 	subcs	r0, r0, r0
 8017e84:	013f4140 	teqeq	pc, r0, asr #2
 8017e88:	087f4000 	ldmdaeq	pc!, {lr}^	; <UNPREDICTABLE>
 8017e8c:	00412214 	subeq	r2, r1, r4, lsl r2
 8017e90:	40407f40 	submi	r7, r0, r0, asr #30
 8017e94:	40004040 	andmi	r4, r0, r0, asr #32
 8017e98:	021c027f 	andseq	r0, ip, #-268435449	; 0xf0000007
 8017e9c:	7f40007f 	svcvc	0x0040007f
 8017ea0:	7f100804 	svcvc	0x00100804
 8017ea4:	413e4000 	teqmi	lr, r0
 8017ea8:	003e4141 	eorseq	r4, lr, r1, asr #2
 8017eac:	09097f40 	stmdbeq	r9, {r6, r8, r9, sl, fp, ip, sp, lr}
 8017eb0:	40000609 	andmi	r0, r0, r9, lsl #12
 8017eb4:	2151413e 	cmpcs	r1, lr, lsr r1
 8017eb8:	7f40005e 	svcvc	0x0040005e
 8017ebc:	46291909 	strtmi	r1, [r9], -r9, lsl #18
 8017ec0:	49264000 	stmdbmi	r6!, {lr}
 8017ec4:	00324949 	eorseq	r4, r2, r9, asr #18
 8017ec8:	7f010340 	svcvc	0x00010340
 8017ecc:	40000301 	andmi	r0, r0, r1, lsl #6
 8017ed0:	4040403f 	submi	r4, r0, pc, lsr r0
 8017ed4:	1f40003f 	svcne	0x0040003f
 8017ed8:	1f204020 	svcne	0x00204020
 8017edc:	403f4000 	eorsmi	r4, pc, r0
 8017ee0:	003f4038 	eorseq	r4, pc, r8, lsr r0	; <UNPREDICTABLE>
 8017ee4:	08146340 	ldmdaeq	r4, {r6, r8, r9, sp, lr}
 8017ee8:	40006314 	andmi	r6, r0, r4, lsl r3
 8017eec:	04780403 	ldrbteq	r0, [r8], #-1027	; 0xfffffbfd
 8017ef0:	61400003 	cmpvs	r0, r3
 8017ef4:	434d4959 	movtmi	r4, #55641	; 0xd959
 8017ef8:	7f004000 	svcvc	0x00004000
 8017efc:	00414141 	subeq	r4, r1, r1, asr #2
 8017f00:	08040240 	stmdaeq	r4, {r6, r9}
 8017f04:	40002010 	andmi	r2, r0, r0, lsl r0
 8017f08:	41414100 	mrsmi	r4, (UNDEF: 81)
 8017f0c:	0440007f 	strbeq	r0, [r0], #-127	; 0xffffff81
 8017f10:	04020102 	streq	r0, [r2], #-258	; 0xfffffefe
 8017f14:	40404000 	submi	r4, r0, r0
 8017f18:	00404040 	subeq	r4, r0, r0, asr #32
 8017f1c:	07030040 	streq	r0, [r3, -r0, asr #32]
 8017f20:	40000008 	andmi	r0, r0, r8
 8017f24:	78545420 	ldmdavc	r4, {r5, sl, ip, lr}^
 8017f28:	7f400040 	svcvc	0x00400040
 8017f2c:	38444428 	stmdacc	r4, {r3, r5, sl, lr}^
 8017f30:	44384000 	ldrtmi	r4, [r8], #-0
 8017f34:	00284444 	eoreq	r4, r8, r4, asr #8
 8017f38:	44443840 	strbmi	r3, [r4], #-2112	; 0xfffff7c0
 8017f3c:	40007f28 	andmi	r7, r0, r8, lsr #30
 8017f40:	54545438 	ldrbpl	r5, [r4], #-1080	; 0xfffffbc8
 8017f44:	00400018 	subeq	r0, r0, r8, lsl r0
 8017f48:	02097e08 	andeq	r7, r9, #8, 28	; 0x80
 8017f4c:	a4184000 	ldrge	r4, [r8], #-0
 8017f50:	00789ca4 	rsbseq	r9, r8, r4, lsr #25
 8017f54:	04087f40 	streq	r7, [r8], #-3904	; 0xfffff0c0
 8017f58:	40007804 	andmi	r7, r0, r4, lsl #16
 8017f5c:	407d4400 	rsbsmi	r4, sp, r0, lsl #8
 8017f60:	20400000 	subcs	r0, r0, r0
 8017f64:	003d4040 	eorseq	r4, sp, r0, asr #32
 8017f68:	107f4000 	rsbsne	r4, pc, r0
 8017f6c:	00004428 	andeq	r4, r0, r8, lsr #8
 8017f70:	7f410040 	svcvc	0x00410040
 8017f74:	40000040 	andmi	r0, r0, r0, asr #32
 8017f78:	0478047c 	ldrbteq	r0, [r8], #-1148	; 0xfffffb84
 8017f7c:	7c400078 	mcrrvc	0, 7, r0, r0, cr8
 8017f80:	78040408 	stmdavc	r4, {r3, sl}
 8017f84:	44384000 	ldrtmi	r4, [r8], #-0
 8017f88:	00384444 	eorseq	r4, r8, r4, asr #8
 8017f8c:	2418fc40 	ldrcs	pc, [r8], #-3136	; 0xfffff3c0
 8017f90:	40001824 	andmi	r1, r0, r4, lsr #16
 8017f94:	18242418 	stmdane	r4!, {r3, r4, sl, sp}
 8017f98:	7c4000fc 	mcrrvc	0, 15, r0, r0, cr12
 8017f9c:	08040408 	stmdaeq	r4, {r3, sl}
 8017fa0:	54484000 	strbpl	r4, [r8], #-0
 8017fa4:	00245454 	eoreq	r5, r4, r4, asr r4
 8017fa8:	3f040440 	svccc	0x00040440
 8017fac:	40002444 	andmi	r2, r0, r4, asr #8
 8017fb0:	2040403c 	subcs	r4, r0, ip, lsr r0
 8017fb4:	1c40007c 	mcrrne	0, 7, r0, r0, cr12
 8017fb8:	1c204020 	stcne	0, cr4, [r0], #-128	; 0xffffff80
 8017fbc:	403c4000 	eorsmi	r4, ip, r0
 8017fc0:	003c4030 	eorseq	r4, ip, r0, lsr r0
 8017fc4:	10284440 	eorne	r4, r8, r0, asr #8
 8017fc8:	40004428 	andmi	r4, r0, r8, lsr #8
 8017fcc:	9090904c 	addsls	r9, r0, ip, asr #32
 8017fd0:	4440007c 	strbmi	r0, [r0], #-124	; 0xffffff84
 8017fd4:	444c5464 	strbmi	r5, [ip], #-1124	; 0xfffffb9c
 8017fd8:	08004000 	stmdaeq	r0, {lr}
 8017fdc:	00004136 	andeq	r4, r0, r6, lsr r1
 8017fe0:	77000040 	strvc	r0, [r0, -r0, asr #32]
 8017fe4:	40000000 	andmi	r0, r0, r0
 8017fe8:	08364100 	ldmdaeq	r6!, {r8, lr}
 8017fec:	02400000 	subeq	r0, r0, #0
 8017ff0:	02040201 	andeq	r0, r4, #268435456	; 0x10000000
 8017ff4:	263c4000 	ldrtcs	r4, [ip], -r0
 8017ff8:	003c2623 	eorseq	r2, ip, r3, lsr #12

08017ffc <oled_128x32_init>:
 8017ffc:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8018000:	4000d31f 	andmi	sp, r0, pc, lsl r3
 8018004:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8018008:	02dac8a1 	sbcseq	ip, sl, #10551296	; 0xa10000
 801800c:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8018010:	a6a440db 	ssatge	r4, #5, fp, asr #1

08018014 <oled_128x64_init>:
 8018014:	a880d5ae 	stmge	r0, {r1, r2, r3, r5, r7, r8, sl, ip, lr, pc}
 8018018:	4000d33f 	andmi	sp, r0, pc, lsr r3
 801801c:	0020148d 	eoreq	r1, r0, sp, lsl #9
 8018020:	12dac8a1 	sbcsne	ip, sl, #10551296	; 0xa10000
 8018024:	f1d97f81 			; <UNDEFINED> instruction: 0xf1d97f81
 8018028:	a6a440db 	ssatge	r4, #5, fp, asr #1

0801802c <vtable for Ssd1306>:
	...
 8018034:	08012d79 	stmdaeq	r1, {r0, r3, r4, r5, r6, r8, sl, fp, sp}
 8018038:	08012da5 	stmdaeq	r1, {r0, r2, r5, r7, r8, sl, fp, sp}
 801803c:	080130bd 	stmdaeq	r1, {r0, r2, r3, r4, r5, r7, ip, sp}
 8018040:	08013041 	stmdaeq	r1, {r0, r6, ip, sp}
 8018044:	08012f0d 	stmdaeq	r1, {r0, r2, r3, r8, r9, sl, fp, sp}
 8018048:	08012dc5 	stmdaeq	r1, {r0, r2, r6, r7, r8, sl, fp, sp}
 801804c:	08012ded 	stmdaeq	r1, {r0, r2, r3, r5, r6, r7, r8, sl, fp, sp}
 8018050:	08012ee3 	stmdaeq	r1, {r0, r1, r5, r6, r7, r9, sl, fp, sp}
 8018054:	08012e9d 	stmdaeq	r1, {r0, r2, r3, r4, r7, r9, sl, fp, sp}
 8018058:	08012d7b 	stmdaeq	r1, {r0, r1, r3, r4, r5, r6, r8, sl, fp, sp}
 801805c:	08012f49 	stmdaeq	r1, {r0, r3, r6, r8, r9, sl, fp, sp}
 8018060:	08012f55 	stmdaeq	r1, {r0, r2, r4, r6, r8, r9, sl, fp, sp}
 8018064:	08012f6f 	stmdaeq	r1, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp}
 8018068:	08012d7d 	stmdaeq	r1, {r0, r2, r3, r4, r5, r6, r8, sl, fp, sp}
 801806c:	30345b1b 	eorscc	r5, r4, fp, lsl fp
 8018070:	5b1b006d 	blpl	86d822c <__exidx_end+0x6c00c4>
 8018074:	006d3033 	rsbeq	r3, sp, r3, lsr r0
 8018078:	31335b1b 	teqcc	r3, fp, lsl fp
 801807c:	5b1b006d 	blpl	86d8238 <__exidx_end+0x6c00d0>
 8018080:	006d3233 	rsbeq	r3, sp, r3, lsr r2
 8018084:	33335b1b 	teqcc	r3, #27648	; 0x6c00
 8018088:	5b1b006d 	blpl	86d8244 <__exidx_end+0x6c00dc>
 801808c:	006d3933 	rsbeq	r3, sp, r3, lsr r9
 8018090:	2e25565b 	mcrcs	6, 1, r5, cr5, cr11, {2}
 8018094:	205d732a 	subscs	r7, sp, sl, lsr #6
 8018098:	43207325 			; <UNDEFINED> instruction: 0x43207325
 801809c:	69706d6f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}^
 80180a0:	2064656c 	rsbcs	r6, r4, ip, ror #10
 80180a4:	25206e6f 	strcs	r6, [r0, #-3695]!	; 0xfffff191
 80180a8:	20732a2e 	rsbscs	r2, r3, lr, lsr #20
 80180ac:	25207461 	strcs	r7, [r0, #-1121]!	; 0xfffffb9f
 80180b0:	00732a2e 	rsbseq	r2, r3, lr, lsr #20
 80180b4:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80180b8:	203a636f 	eorscs	r6, sl, pc, ror #6
 80180bc:	000a7525 	andeq	r7, sl, r5, lsr #10
 80180c0:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80180c4:	203a636f 	eorscs	r6, sl, pc, ror #6
 80180c8:	7478656e 	ldrbtvc	r6, [r8], #-1390	; 0xfffffa92
 80180cc:	62203e20 	eorvs	r3, r0, #32, 28	; 0x200
 80180d0:	6b636f6c 	blvs	98f3e88 <__exidx_end+0x18dbd20>
 80180d4:	6d696c5f 	stclvs	12, cr6, [r9, #-380]!	; 0xfffffe84
 80180d8:	000a7469 	andeq	r7, sl, r9, ror #8
 80180dc:	6c6c616d 	stfvse	f6, [ip], #-436	; 0xfffffe4c
 80180e0:	203a636f 	eorscs	r6, sl, pc, ror #6
 80180e4:	6f6c4270 	svcvs	0x006c4270
 80180e8:	65486b63 	strbvs	r6, [r8, #-2915]	; 0xfffff49d
 80180ec:	72656461 	rsbvc	r6, r5, #1627389952	; 0x61000000
 80180f0:	2c70253d 	cfldr64cs	mvdx2, [r0], #-244	; 0xffffff0c
 80180f4:	7a697320 	bvc	9a74d7c <__exidx_end+0x1a5cc14>
 80180f8:	64253d65 	strtvs	r3, [r5], #-3429	; 0xfffff29b
 80180fc:	6164202c 	cmnvs	r4, ip, lsr #32
 8018100:	253d6174 	ldrcs	r6, [sp, #-372]!	; 0xfffffe8c
 8018104:	66000a70 			; <UNDEFINED> instruction: 0x66000a70
 8018108:	3a656572 	bcc	99716d8 <__exidx_end+0x1959570>
 801810c:	6c427020 	mcrrvs	0, 2, r7, r2, cr0
 8018110:	486b636f 	stmdami	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sp, lr}^
 8018114:	65646165 	strbvs	r6, [r4, #-357]!	; 0xfffffe9b
 8018118:	203d2072 	eorscs	r2, sp, r2, ror r0
 801811c:	202c7025 	eorcs	r7, ip, r5, lsr #32
 8018120:	6f6c4270 	svcvs	0x006c4270
 8018124:	3d206b63 	fstmdbxcc	r0!, {d6-d54}	;@ Deprecated
 8018128:	0a702520 	beq	9c215b0 <__exidx_end+0x1c09448>
 801812c:	00000000 	andeq	r0, r0, r0

08018130 <days_of_month>:
 8018130:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018134:	0000001c 	andeq	r0, r0, ip, lsl r0
 8018138:	0000001f 	andeq	r0, r0, pc, lsl r0
 801813c:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018140:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018144:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018148:	0000001f 	andeq	r0, r0, pc, lsl r0
 801814c:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018150:	0000001e 	andeq	r0, r0, lr, lsl r0
 8018154:	0000001f 	andeq	r0, r0, pc, lsl r0
 8018158:	0000001e 	andeq	r0, r0, lr, lsl r0
 801815c:	0000001f 	andeq	r0, r0, pc, lsl r0

Disassembly of section .ARM:

08018160 <__exidx_start>:
 8018160:	7ffefa54 	svcvc	0x00fefa54
 8018164:	00000001 	andeq	r0, r0, r1

Disassembly of section .ARM.attributes:

08018168 <.ARM.attributes>:
 8018168:	00002e41 	andeq	r2, r0, r1, asr #28
 801816c:	61656100 	cmnvs	r5, r0, lsl #2
 8018170:	01006962 	tsteq	r0, r2, ror #18
 8018174:	00000024 	andeq	r0, r0, r4, lsr #32
 8018178:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
 801817c:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
 8018180:	0600334d 	streq	r3, [r0], -sp, asr #6
 8018184:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
 8018188:	14041202 	strne	r1, [r4], #-514	; 0xfffffdfe
 801818c:	17011501 	strne	r1, [r1, -r1, lsl #10]
 8018190:	1a011803 	bne	805e1a4 <__exidx_end+0x4603c>
 8018194:	Address 0x0000000008018194 is out of bounds.


Disassembly of section .data:

20000000 <s_multicast_mac>:
20000000:	005e0001 	subseq	r0, lr, r1
20000004:	00000000 	andeq	r0, r0, r0

20000008 <MDNS::s_nHandle>:
20000008:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

2000000c <next_block>:
2000000c:	20016000 	andcs	r6, r1, r0

20000010 <s_block_bucket>:
20000010:	00000010 	andeq	r0, r0, r0, lsl r0
	...
20000020:	00000020 	andeq	r0, r0, r0, lsr #32
	...
20000030:	00000040 	andeq	r0, r0, r0, asr #32
	...
20000040:	00000060 	andeq	r0, r0, r0, rrx
	...
20000050:	00000080 	andeq	r0, r0, r0, lsl #1
	...
20000060:	00000100 	andeq	r0, r0, r0, lsl #2
	...
20000070:	00000140 	andeq	r0, r0, r0, asr #2
	...
20000080:	00000180 	andeq	r0, r0, r0, lsl #3
	...
20000090:	00000200 	andeq	r0, r0, r0, lsl #4
	...
200000a0:	00000300 	andeq	r0, r0, r0, lsl #6
	...
200000b0:	00000400 	andeq	r0, r0, r0, lsl #8
	...
200000c0:	00000500 	andeq	r0, r0, r0, lsl #10
	...

200000e0 <SystemCoreClock>:
200000e0:	066ff300 	strbteq	pc, [pc], -r0, lsl #6	; <UNPREDICTABLE>

Disassembly of section .bss:

200000e8 <guard variable for lightset::Data::Get()::instance>:
200000e8:	00000000 	andeq	r0, r0, r0

200000ec <lightset::Data::Get()::instance>:
	...

200018fc <ArtNetNode::s_pThis>:
200018fc:	00000000 	andeq	r0, r0, r0

20001900 <s_ReceivingMask>:
20001900:	00000000 	andeq	r0, r0, r0

20001904 <ip>:
20001904:	00000000 	andeq	r0, r0, r0

20001908 <ip>:
20001908:	00000000 	andeq	r0, r0, r0

2000190c <E131Bridge::s_pThis>:
2000190c:	00000000 	andeq	r0, r0, r0

20001910 <s_ReceivingMask>:
20001910:	00000000 	andeq	r0, r0, r0

20001914 <WS28xxDmx::s_pThis>:
20001914:	00000000 	andeq	r0, r0, r0

20001918 <PixelPatterns::m_PortConfig>:
	...

20001938 <PixelPatterns::m_nActivePorts>:
20001938:	00000000 	andeq	r0, r0, r0

2000193c <PixelPatterns::m_pScannerColours>:
2000193c:	00000000 	andeq	r0, r0, r0

20001940 <PixelPatterns::m_nCount>:
20001940:	00000000 	andeq	r0, r0, r0

20001944 <PixelPatterns::m_pOutput>:
20001944:	00000000 	andeq	r0, r0, r0

20001948 <PixelTestPattern::s_pThis>:
20001948:	00000000 	andeq	r0, r0, r0

2000194c <PixelTestPattern::s_Pattern>:
2000194c:	00000000 	andeq	r0, r0, r0

20001950 <s_tmp>:
20001950:	00000000 	andeq	r0, r0, r0

20001954 <WS28xx::s_pThis>:
20001954:	00000000 	andeq	r0, r0, r0

20001958 <RemoteConfig::s_pUdpBuffer>:
20001958:	00000000 	andeq	r0, r0, r0

2000195c <RemoteConfig::s_RemoteConfigListBin>:
	...

20001980 <RemoteConfig::s_pThis>:
20001980:	00000000 	andeq	r0, r0, r0

20001984 <SpiFlashStore::s_nWaitMillis>:
20001984:	00000000 	andeq	r0, r0, r0

20001988 <SpiFlashStore::s_SpiFlashData>:
	...

20002988 <SpiFlashStore::s_nStartAddress>:
20002988:	00000000 	andeq	r0, r0, r0

2000298c <SpiFlashStore::s_bHaveFlashChip>:
2000298c:	00000000 	andeq	r0, r0, r0

20002990 <SpiFlashStore::s_nSpiFlashStoreSize>:
20002990:	00000000 	andeq	r0, r0, r0

20002994 <SpiFlashStore::s_State>:
20002994:	00000000 	andeq	r0, r0, r0

20002998 <SpiFlashStore::s_pThis>:
20002998:	00000000 	andeq	r0, r0, r0

2000299c <SpiFlashStore::s_bIsNew>:
2000299c:	00000000 	andeq	r0, r0, r0

200029a0 <StoreArtNet::s_pThis>:
200029a0:	00000000 	andeq	r0, r0, r0

200029a4 <StoreDisplayUdf::s_pThis>:
200029a4:	00000000 	andeq	r0, r0, r0

200029a8 <StoreNetwork::s_pThis>:
200029a8:	00000000 	andeq	r0, r0, r0

200029ac <StoreRemoteConfig::s_pThis>:
200029ac:	00000000 	andeq	r0, r0, r0

200029b0 <StoreWS28xxDmx::s_pThis>:
200029b0:	00000000 	andeq	r0, r0, r0

200029b4 <FlashRom::s_pThis>:
200029b4:	00000000 	andeq	r0, r0, r0

200029b8 <flashrom::s_nAddress>:
200029b8:	00000000 	andeq	r0, r0, r0

200029bc <flashrom::s_State>:
200029bc:	00000000 	andeq	r0, r0, r0

200029c0 <flashrom::s_nPage>:
200029c0:	00000000 	andeq	r0, r0, r0

200029c4 <flashrom::s_pData>:
200029c4:	00000000 	andeq	r0, r0, r0

200029c8 <flashrom::s_isBank0>:
200029c8:	00000000 	andeq	r0, r0, r0

200029cc <flashrom::s_nLength>:
200029cc:	00000000 	andeq	r0, r0, r0

200029d0 <g_ip_info>:
	...

200029dc <g_mac_address>:
200029dc:	00000000 	andeq	r0, r0, r0
	...

200029e2 <s_is_dhcp>:
	...

200029e4 <s_p>:
200029e4:	00000000 	andeq	r0, r0, r0

200029e8 <s_ticker>:
200029e8:	00000000 	andeq	r0, r0, r0

200029ec <s_mac_address>:
	...

200029f4 <s_mac_address_arp_reply>:
200029f4:	00000000 	andeq	r0, r0, r0
	...

200029fa <s_id>:
	...

200029fc <s_recv_queue>:
	...

2000356c <s_tcb>:
	...

200035b0 <s_tcp>:
	...

20003b9c <broadcast_mask>:
20003b9c:	00000000 	andeq	r0, r0, r0

20003ba0 <gw_ip>:
20003ba0:	00000000 	andeq	r0, r0, r0

20003ba4 <on_network_mask>:
20003ba4:	00000000 	andeq	r0, r0, r0

20003ba8 <s_id>:
20003ba8:	00000000 	andeq	r0, r0, r0

20003bac <s_ports_allowed>:
	...

20003bcc <s_recv_queue>:
	...

2000986c <s_send_packet>:
	...

20009e58 <MDNS::s_nRemoteIp>:
20009e58:	00000000 	andeq	r0, r0, r0

20009e5c <MDNS::s_nRemotePort>:
20009e5c:	00000000 	andeq	r0, r0, r0

20009e60 <MDNS::s_nMulticastIp>:
20009e60:	00000000 	andeq	r0, r0, r0

20009e64 <MDNS::s_AnswerLocalIp>:
	...

2000a068 <MDNS::s_ServiceRecords>:
	...

2000a088 <MDNS::s_nBytesReceived>:
2000a088:	00000000 	andeq	r0, r0, r0

2000a08c <MDNS::s_ServiceRecordsData>:
	...

2000a290 <MDNS::s_pName>:
2000a290:	00000000 	andeq	r0, r0, r0

2000a294 <MDNS::s_pBuffer>:
2000a294:	00000000 	andeq	r0, r0, r0

2000a298 <Network::s_pThis>:
2000a298:	00000000 	andeq	r0, r0, r0

2000a29c <s_arp_announce>:
	...

2000a2c8 <s_arp_reply>:
	...

2000a2f4 <s_arp_request>:
	...

2000a320 <s_arp_records>:
	...

2000a4a0 <s_entry_current>:
2000a4a0:	00000000 	andeq	r0, r0, r0

2000a4a4 <s_dhcp_allocated_gw>:
2000a4a4:	00000000 	andeq	r0, r0, r0

2000a4a8 <s_dhcp_allocated_ip>:
2000a4a8:	00000000 	andeq	r0, r0, r0

2000a4ac <s_dhcp_allocated_netmask>:
2000a4ac:	00000000 	andeq	r0, r0, r0

2000a4b0 <s_dhcp_message>:
	...

2000a6d4 <s_dhcp_server_ip>:
2000a6d4:	00000000 	andeq	r0, r0, r0

2000a6d8 <s_groups>:
	...

2000a7f8 <s_id>:
2000a7f8:	00000000 	andeq	r0, r0, r0

2000a7fc <s_joins_allowed_index>:
2000a7fc:	00000000 	andeq	r0, r0, r0

2000a800 <s_leave>:
	...

2000a830 <s_multicast_mac>:
	...

2000a838 <s_report>:
	...

2000a868 <DisplayUdf::s_pThis>:
2000a868:	00000000 	andeq	r0, r0, r0

2000a86c <PropertiesConfig::s_Config>:
2000a86c:	00000000 	andeq	r0, r0, r0

2000a870 <Display::s_pThis>:
2000a870:	00000000 	andeq	r0, r0, r0

2000a874 <Display7Segment::s_pThis>:
2000a874:	00000000 	andeq	r0, r0, r0

2000a878 <_ClearBuffer>:
	...

2000a900 <Ssd1306::s_pThis>:
2000a900:	00000000 	andeq	r0, r0, r0

2000a904 <FirmwareVersion::s_FirmwareVersion>:
	...

2000a91a <FirmwareVersion::s_Print>:
	...

2000a95c <FirmwareVersion::s_pThis>:
2000a95c:	00000000 	andeq	r0, r0, r0

2000a960 <LedBlink::s_pThis>:
2000a960:	00000000 	andeq	r0, r0, r0

2000a964 <Hardware::s_pThis>:
2000a964:	00000000 	andeq	r0, r0, r0

2000a968 <outptr>:
2000a968:	00000000 	andeq	r0, r0, r0

2000a96c <last.0>:
2000a96c:	00000000 	andeq	r0, r0, r0

2000a970 <s_micros>:
	...

2000a978 <set_timer>:
2000a978:	00000000 	andeq	r0, r0, r0

2000a97c <s_nSysTickMillis>:
2000a97c:	00000000 	andeq	r0, r0, r0

2000a980 <enet_init_status>:
2000a980:	00000000 	andeq	r0, r0, r0

2000a984 <s_nAddress>:
2000a984:	00000000 	andeq	r0, r0, r0

2000a988 <s_TxBuffer>:
	...

20012988 <dma_current_ptp_rxdesc>:
20012988:	00000000 	andeq	r0, r0, r0

2001298c <dma_current_ptp_txdesc>:
2001298c:	00000000 	andeq	r0, r0, r0

20012990 <dma_current_rxdesc>:
20012990:	00000000 	andeq	r0, r0, r0

20012994 <dma_current_txdesc>:
20012994:	00000000 	andeq	r0, r0, r0

20012998 <enet_initpara>:
	...

200129d4 <rx_buff>:
	...

20014d8c <rxdesc_tab>:
	...

20014dec <tx_buff>:
	...

200159d4 <txdesc_tab>:
	...

Disassembly of section .heap:

20016000 <heap_low>:
	...

Disassembly of section .stack:

20016800 <_sp-0x1800>:
	...
